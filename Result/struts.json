[ {
  "filePath" : "d:\\chenhao\\test project\\struts\\apps\\rest-showcase\\src\\test\\java\\it\\org\\apache\\struts2\\rest\\example\\GetOrdersTest.java",
  "methodName" : "testGetOrders",
  "sourceCode" : "@Test\r\npublic void testGetOrders() {\r\n    beginAt(\"/orders/3\");\r\n    assertTextPresent(\"Bob\");\r\n    assertTextNotPresent(\"Sarah\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\apps\\rest-showcase\\src\\test\\java\\it\\org\\apache\\struts2\\rest\\example\\GetOrdersTest.java",
  "methodName" : "testGetOrdersInHtml",
  "sourceCode" : "@Test\r\npublic void testGetOrdersInHtml() {\r\n    beginAt(\"/orders/3.xhtml\");\r\n    assertTextPresent(\"Bob\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\apps\\rest-showcase\\src\\test\\java\\it\\org\\apache\\struts2\\rest\\example\\GetOrdersTest.java",
  "methodName" : "testGetOrdersInXml",
  "sourceCode" : "@Test\r\npublic void testGetOrdersInXml() {\r\n    beginAt(\"/orders/3.xml\");\r\n    assertTextPresent(\"<clientName>Bob\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\apps\\rest-showcase\\src\\test\\java\\it\\org\\apache\\struts2\\rest\\example\\GetOrdersTest.java",
  "methodName" : "testGetOrdersInJson",
  "sourceCode" : "@Test\r\npublic void testGetOrdersInJson() {\r\n    beginAt(\"/orders/3.json\");\r\n    assertTextPresent(\"\\\"clientName\\\":\\\"Bob\\\"\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\apps\\rest-showcase\\src\\test\\java\\it\\org\\apache\\struts2\\rest\\example\\ListOrdersTest.java",
  "methodName" : "testListOrders",
  "sourceCode" : "@Test\r\npublic void testListOrders() {\r\n    beginAt(\"/orders\");\r\n    assertTextPresent(\"Bob\");\r\n    assertTextPresent(\"Sarah\");\r\n    assertTextPresent(\"Jim\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\apps\\rest-showcase\\src\\test\\java\\it\\org\\apache\\struts2\\rest\\example\\ListOrdersTest.java",
  "methodName" : "testListOrdersInHtml",
  "sourceCode" : "@Test\r\npublic void testListOrdersInHtml() {\r\n    beginAt(\"/orders.xhtml\");\r\n    assertTextPresent(\"Bob\");\r\n    assertTextPresent(\"Sarah\");\r\n    assertTextPresent(\"Jim\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\apps\\rest-showcase\\src\\test\\java\\it\\org\\apache\\struts2\\rest\\example\\ListOrdersTest.java",
  "methodName" : "testListOrdersInXml",
  "sourceCode" : "@Test\r\npublic void testListOrdersInXml() {\r\n    beginAt(\"/orders.xml\");\r\n    assertTextPresent(\"<clientName>Bob\");\r\n    assertTextPresent(\"<clientName>Sarah\");\r\n    assertTextPresent(\"<clientName>Jim\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\apps\\rest-showcase\\src\\test\\java\\it\\org\\apache\\struts2\\rest\\example\\ListOrdersTest.java",
  "methodName" : "testListOrdersInJson",
  "sourceCode" : "@Test\r\npublic void testListOrdersInJson() {\r\n    beginAt(\"/orders.json\");\r\n    assertTextPresent(\"\\\"clientName\\\":\\\"Bob\\\"\");\r\n    assertTextPresent(\"\\\"clientName\\\":\\\"Sarah\\\"\");\r\n    assertTextPresent(\"\\\"clientName\\\":\\\"Jim\\\"\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\apps\\rest-showcase\\src\\test\\java\\it\\org\\apache\\struts2\\rest\\example\\PostOrderTest.java",
  "methodName" : "testPostOrder",
  "sourceCode" : "@Test\r\npublic void testPostOrder() {\r\n    beginAt(\"/orders/new\");\r\n    setWorkingForm(0);\r\n    setTextField(\"clientName\", \"Test1\");\r\n    setTextField(\"amount\", \"321\");\r\n    submit();\r\n    assertTextPresent(\"Test1\");\r\n    assertLinkNotPresentWithText(\"Back to Orders\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\apps\\rest-showcase\\src\\test\\java\\it\\org\\apache\\struts2\\rest\\example\\PostOrderTest.java",
  "methodName" : "testPostOrderWithErrors",
  "sourceCode" : "@Test\r\npublic void testPostOrderWithErrors() {\r\n    beginAt(\"/orders/new\");\r\n    setWorkingForm(0);\r\n    setTextField(\"amount\", \"321\");\r\n    try {\r\n        submit();\r\n    } catch (FailingHttpStatusCodeException ex) {\r\n        // ignore;\r\n    }\r\n    assertTextPresent(\"client name is empty\");\r\n    assertTextFieldEquals(\"amount\", \"321\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\apps\\rest-showcase\\src\\test\\java\\it\\org\\apache\\struts2\\rest\\example\\PostOrderTest.java",
  "methodName" : "testPostOrderInHtml",
  "sourceCode" : "@Test\r\npublic void testPostOrderInHtml() {\r\n    beginAt(\"/orders/new.xhtml\");\r\n    setWorkingForm(0);\r\n    setTextField(\"clientName\", \"Test2\");\r\n    setTextField(\"amount\", \"321\");\r\n    try {\r\n        submit();\r\n    } catch (FailingHttpStatusCodeException ex) {\r\n        // ignore;\r\n    }\r\n    assertTextPresent(\"Test2\");\r\n    assertLinkNotPresentWithText(\"Back to Orders\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\apps\\rest-showcase\\src\\test\\java\\it\\org\\apache\\struts2\\rest\\example\\PostOrderTest.java",
  "methodName" : "testPostOrderInXml",
  "sourceCode" : "@Test\r\npublic void testPostOrderInXml() throws IOException {\r\n    CloseableHttpClient client = HttpClients.createDefault();\r\n    HttpPost httpPost = new HttpPost(ParameterUtils.getBaseUrl() + \"/orders.xml\");\r\n    httpPost.setEntity(new StringEntity(\"<org.apache.struts2.rest.example.Order>\\n\" + \"<clientName>Test3</clientName>\\n\" + \"<amount>3342</amount>\\n\" + \"</org.apache.struts2.rest.example.Order>\"));\r\n    CloseableHttpResponse response = client.execute(httpPost);\r\n    assertEquals(201, response.getStatusLine().getStatusCode());\r\n    assertTrue(response.getHeaders(\"Location\")[0].getValue().startsWith(ParameterUtils.getBaseUrl() + \"/orders/\"));\r\n    client.close();\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\apps\\rest-showcase\\src\\test\\java\\it\\org\\apache\\struts2\\rest\\example\\PostOrderTest.java",
  "methodName" : "testPostOrderInXmlWithBadData",
  "sourceCode" : "@Test\r\npublic void testPostOrderInXmlWithBadData() throws IOException {\r\n    CloseableHttpClient client = HttpClients.createDefault();\r\n    HttpPost httpPost = new HttpPost(ParameterUtils.getBaseUrl() + \"/orders.xml\");\r\n    httpPost.setEntity(new StringEntity(\"<org.apache.struts2.rest.example.Order>\\n\" + \"<amount>3342</amount>\\n\" + \"</org.apache.struts2.rest.example.Order>\"));\r\n    CloseableHttpResponse response = client.execute(httpPost);\r\n    assertEquals(400, response.getStatusLine().getStatusCode());\r\n    assertTrue(response.toString().contains(\"<string>The client name is empty\"));\r\n    assertNull(response.getHeaders(\"Location\"));\r\n    client.close();\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\apps\\rest-showcase\\src\\test\\java\\it\\org\\apache\\struts2\\rest\\example\\PostOrderTest.java",
  "methodName" : "testPostOrderInJson",
  "sourceCode" : "@Test\r\npublic void testPostOrderInJson() throws IOException {\r\n    CloseableHttpClient client = HttpClients.createDefault();\r\n    HttpPost httpPost = new HttpPost(ParameterUtils.getBaseUrl() + \"/orders.json\");\r\n    httpPost.setEntity(new StringEntity(\"{\\\"amount\\\":33,\\\"clientName\\\":\\\"Test4\\\"}\"));\r\n    CloseableHttpResponse response = client.execute(httpPost);\r\n    assertEquals(201, response.getStatusLine().getStatusCode());\r\n    assertTrue(response.getHeaders(\"Location\")[0].getValue().startsWith(ParameterUtils.getBaseUrl() + \"/orders/\"));\r\n    client.close();\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\apps\\rest-showcase\\src\\test\\java\\it\\org\\apache\\struts2\\rest\\example\\PostOrderTest.java",
  "methodName" : "testPostOrderInJsonWithBadData",
  "sourceCode" : "@Test\r\npublic void testPostOrderInJsonWithBadData() throws IOException {\r\n    CloseableHttpClient client = HttpClients.createDefault();\r\n    HttpPost httpPost = new HttpPost(ParameterUtils.getBaseUrl() + \"/orders.json\");\r\n    httpPost.setEntity(new StringEntity(\"{\\\"amount\\\":33}\"));\r\n    CloseableHttpResponse response = client.execute(httpPost);\r\n    assertEquals(400, response.getStatusLine().getStatusCode());\r\n    assertTrue(response.toString().contains(\"{\\\"actionErrors\\\":[],\\\"fieldErrors\\\":{\\\"clientName\\\":[\\\"The client name is empty\\\"]}}\"));\r\n    assertNull(response.getHeaders(\"Location\"));\r\n    client.close();\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\apps\\showcase\\src\\test\\java\\it\\org\\apache\\struts2\\showcase\\ActionChainingTest.java",
  "methodName" : "test",
  "sourceCode" : "@Test\r\npublic void test() throws Exception {\r\n    try (final WebClient webClient = new WebClient()) {\r\n        final HtmlPage page = webClient.getPage(ParameterUtils.getBaseUrl() + \"/actionchaining/actionChain1!input\");\r\n        final String pageAsText = page.asNormalizedText();\r\n        Assert.assertTrue(pageAsText.contains(\"Action Chain 1 Property 1: Property Set In Action Chain 1\"));\r\n        Assert.assertTrue(pageAsText.contains(\"Action Chain 2 Property 1: Property Set in Action Chain 2\"));\r\n        Assert.assertTrue(pageAsText.contains(\"Action Chain 3 Property 1: Property set in Action Chain 3\"));\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\apps\\showcase\\src\\test\\java\\it\\org\\apache\\struts2\\showcase\\ActionTagExampleTest.java",
  "methodName" : "test",
  "sourceCode" : "@Test\r\npublic void test() throws Exception {\r\n    try (final WebClient webClient = new WebClient()) {\r\n        final HtmlPage page = webClient.getPage(ParameterUtils.getBaseUrl() + \"/tags/ui/actionTagExample!input.action\");\r\n        final String pageAsText = page.asNormalizedText();\r\n        Assert.assertTrue(pageAsText.contains(\"This text is from the called class\"));\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\apps\\showcase\\src\\test\\java\\it\\org\\apache\\struts2\\showcase\\AsyncTest.java",
  "methodName" : "testChatRoom",
  "sourceCode" : "@Test\r\npublic void testChatRoom() throws Exception {\r\n    try (final WebClient webClient = new WebClient()) {\r\n        final HtmlPage page = webClient.getPage(ParameterUtils.getBaseUrl() + \"/async/index.html\");\r\n        final HtmlForm form = page.getForms().get(0);\r\n        final HtmlTextInput textField = form.getInputByName(\"msg\");\r\n        textField.type(\"hello\");\r\n        final HtmlSubmitInput button = form.getInputByValue(\"Send\");\r\n        final HtmlPage page2 = button.click();\r\n        Thread.sleep(4000);\r\n        final DomElement msgs = page2.getElementById(\"msgs\");\r\n        Assert.assertEquals(\"hello\", msgs.asNormalizedText());\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\apps\\showcase\\src\\test\\java\\it\\org\\apache\\struts2\\showcase\\ComponentTagExampleTest.java",
  "methodName" : "test",
  "sourceCode" : "@Test\r\npublic void test() throws Exception {\r\n    try (final WebClient webClient = new WebClient()) {\r\n        final HtmlPage page = webClient.getPage(ParameterUtils.getBaseUrl() + \"/tags/ui/componentTagExample.action\");\r\n        final String pageAsText = page.asNormalizedText();\r\n        Assert.assertTrue(pageAsText.contains(\"Freemarker Custom Template - parameter 'paramName' - paramValue1\"));\r\n        Assert.assertTrue(pageAsText.contains(\"Freemarker Custom Template - parameter 'paramName' - paramValue4\"));\r\n        Assert.assertTrue(pageAsText.contains(\"JSP Custom Template - parameter 'paramName' - paramValue2\"));\r\n        Assert.assertTrue(pageAsText.contains(\"JSP Custom Template - parameter 'paramName' - paramValue3\"));\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\apps\\showcase\\src\\test\\java\\it\\org\\apache\\struts2\\showcase\\ConventionTest.java",
  "methodName" : "listPeople",
  "sourceCode" : "@Test\r\npublic void listPeople() throws Exception {\r\n    HtmlPage page = webClient.getPage(ParameterUtils.getBaseUrl() + \"/person/list-people.action\");\r\n    assertThat(page.asNormalizedText()).contains(\"3\\tAlexandru\\tPapesco\\n\" + \"4\\tJay\\tBoss\\n\" + \"5\\tRainer\\tHermanos\\n\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\apps\\showcase\\src\\test\\java\\it\\org\\apache\\struts2\\showcase\\ConventionTest.java",
  "methodName" : "editPeople",
  "sourceCode" : "@Test\r\npublic void editPeople() throws Exception {\r\n    HtmlPage page = webClient.getPage(ParameterUtils.getBaseUrl() + \"/person/edit-person.action\");\r\n    HtmlForm form = page.getForms().get(0);\r\n    form.getInputByName(\"persons(1).name\").setValue(\"Lukasz\");\r\n    form.getInputByName(\"persons(1).lastName\").setValue(\"Lenart\");\r\n    form.getInputByName(\"persons(2).name\").setValue(\"Kusal\");\r\n    form.getInputByName(\"persons(2).lastName\").setValue(\"Kithul-Godage\");\r\n    HtmlSubmitInput button = form.getInputByValue(\"Save all persons\");\r\n    page = button.click();\r\n    assertThat(page.asNormalizedText()).contains(\"1\\tLukasz\\tLenart\\n\" + \"2\\tKusal\\tKithul-Godage\\n\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\apps\\showcase\\src\\test\\java\\it\\org\\apache\\struts2\\showcase\\ConventionTest.java",
  "methodName" : "createPerson",
  "sourceCode" : "@Test\r\npublic void createPerson() throws Exception {\r\n    HtmlPage page = webClient.getPage(ParameterUtils.getBaseUrl() + \"/person/new-person!input.action\");\r\n    HtmlForm form = page.getForms().get(0);\r\n    form.getInputByName(\"person.name\").type(\"Lukasz\");\r\n    form.getInputByName(\"person.lastName\").type(\"Lenart\");\r\n    HtmlSubmitInput button = form.getInputByValue(\"Create person\");\r\n    page = button.click();\r\n    assertThat(page.asNormalizedText()).contains(\"6\\tLukasz\\tLenart\\n\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\apps\\showcase\\src\\test\\java\\it\\org\\apache\\struts2\\showcase\\ConversionTest.java",
  "methodName" : "testList",
  "sourceCode" : "@Test\r\npublic void testList() throws Exception {\r\n    try (final WebClient webClient = new WebClient()) {\r\n        final HtmlPage page = webClient.getPage(ParameterUtils.getBaseUrl() + \"/conversion/enterPersonsInfo.action\");\r\n        final HtmlForm form = page.getForms().get(0);\r\n        form.getInputByName(\"persons[0].name\").type(\"name0\");\r\n        form.getInputByName(\"persons[0].age\").type(\"0\");\r\n        form.getInputByName(\"persons[1].name\").type(\"name1\");\r\n        form.getInputByName(\"persons[1].age\").type(\"1\");\r\n        form.getInputByName(\"persons[2].name\").type(\"name2\");\r\n        form.getInputByName(\"persons[2].age\").type(\"2\");\r\n        final HtmlSubmitInput button = form.getInputByValue(\"Submit\");\r\n        final HtmlPage page2 = button.click();\r\n        final String page2Text = page2.asNormalizedText();\r\n        Assert.assertTrue(page2Text.contains(\"SET 0 Name: name0\"));\r\n        Assert.assertTrue(page2Text.contains(\"SET 0 Age: 0\"));\r\n        Assert.assertTrue(page2Text.contains(\"SET 1 Name: name1\"));\r\n        Assert.assertTrue(page2Text.contains(\"SET 1 Age: 1\"));\r\n        Assert.assertTrue(page2Text.contains(\"SET 2 Name: name2\"));\r\n        Assert.assertTrue(page2Text.contains(\"SET 2 Age: 2\"));\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\apps\\showcase\\src\\test\\java\\it\\org\\apache\\struts2\\showcase\\ConversionTest.java",
  "methodName" : "testSet",
  "sourceCode" : "@Test\r\npublic void testSet() throws Exception {\r\n    try (final WebClient webClient = new WebClient()) {\r\n        final HtmlPage page = webClient.getPage(ParameterUtils.getBaseUrl() + \"/conversion/enterAddressesInfo.action\");\r\n        final HtmlForm form = page.getForms().get(0);\r\n        form.getInputByName(\"addresses('id0').address\").type(\"address0\");\r\n        form.getInputByName(\"addresses('id1').address\").type(\"address1\");\r\n        form.getInputByName(\"addresses('id2').address\").type(\"address2\");\r\n        final HtmlSubmitInput button = form.getInputByValue(\"Submit\");\r\n        final HtmlPage page2 = button.click();\r\n        final String page2Text = page2.asNormalizedText();\r\n        Assert.assertTrue(page2Text.contains(\"id0 -> address0\"));\r\n        Assert.assertTrue(page2Text.contains(\"id1 -> address1\"));\r\n        Assert.assertTrue(page2Text.contains(\"id2 -> address2\"));\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\apps\\showcase\\src\\test\\java\\it\\org\\apache\\struts2\\showcase\\ConversionTest.java",
  "methodName" : "testEnum",
  "sourceCode" : "@Test\r\npublic void testEnum() throws Exception {\r\n    try (final WebClient webClient = new WebClient()) {\r\n        final HtmlPage page = webClient.getPage(ParameterUtils.getBaseUrl() + \"/conversion/enterOperationEnumInfo.action\");\r\n        final HtmlForm form = page.getForms().get(0);\r\n        form.getInputByValue(\"ADD\").setChecked(true);\r\n        form.getInputByValue(\"MINUS\").setChecked(true);\r\n        final HtmlSubmitInput button = form.getInputByValue(\"Submit\");\r\n        final HtmlPage page2 = button.click();\r\n        final String page2Text = page2.asNormalizedText();\r\n        Assert.assertTrue(page2Text.contains(\"ADD\"));\r\n        Assert.assertTrue(page2Text.contains(\"MINUS\"));\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\apps\\showcase\\src\\test\\java\\it\\org\\apache\\struts2\\showcase\\CRUDTest.java",
  "methodName" : "testCreate",
  "sourceCode" : "@Test\r\npublic void testCreate() throws Exception {\r\n    try (final WebClient webClient = new WebClient()) {\r\n        final HtmlPage page = webClient.getPage(ParameterUtils.getBaseUrl() + \"/skill/edit.action\");\r\n        final HtmlForm form = page.getForms().get(0);\r\n        final HtmlTextInput textField = form.getInputByName(\"currentSkill.name\");\r\n        textField.type(\"somename1\");\r\n        final HtmlTextInput textField2 = form.getInputByName(\"currentSkill.description\");\r\n        textField2.type(\"somedescription1\");\r\n        final HtmlSubmitInput button = form.getInputByValue(\"Save\");\r\n        final HtmlPage page2 = button.click();\r\n        final String page2Text = page2.asNormalizedText();\r\n        Assert.assertTrue(page2Text.contains(\"somename1\"));\r\n        Assert.assertTrue(page2Text.contains(\"somedescription1\"));\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\apps\\showcase\\src\\test\\java\\it\\org\\apache\\struts2\\showcase\\DispatcherResultTest.java",
  "methodName" : "testDispatchingToJSP",
  "sourceCode" : "@Test\r\npublic void testDispatchingToJSP() throws Exception {\r\n    try (final WebClient webClient = new WebClient()) {\r\n        final HtmlPage page = webClient.getPage(ParameterUtils.getBaseUrl() + \"/dispatcher/dispatch.action\");\r\n        DomElement div = page.getElementById(\"dispatcher-result\");\r\n        Assert.assertEquals(\"This page is a result of \\\"dispatching\\\" to it from an action\", div.asNormalizedText());\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\apps\\showcase\\src\\test\\java\\it\\org\\apache\\struts2\\showcase\\DispatcherResultTest.java",
  "methodName" : "testDispatchingToAction",
  "sourceCode" : "@Test\r\npublic void testDispatchingToAction() throws Exception {\r\n    try (final WebClient webClient = new WebClient()) {\r\n        final HtmlPage page = webClient.getPage(ParameterUtils.getBaseUrl() + \"/dispatcher/forward.action\");\r\n        DomElement div = page.getElementById(\"dispatcher-result\");\r\n        Assert.assertEquals(\"This page is a result of \\\"dispatching\\\" to it from an action\", div.asNormalizedText());\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\apps\\showcase\\src\\test\\java\\it\\org\\apache\\struts2\\showcase\\ExecAndWaitTest.java",
  "methodName" : "testNodelay",
  "sourceCode" : "@Test\r\npublic void testNodelay() throws Exception {\r\n    try (final WebClient webClient = new WebClient()) {\r\n        final HtmlPage page = webClient.getPage(ParameterUtils.getBaseUrl() + \"/wait/example1.action\");\r\n        final HtmlForm form = page.getForms().get(0);\r\n        final HtmlTextInput textField = form.getInputByName(\"time\");\r\n        textField.type(\"7000\");\r\n        final HtmlSubmitInput button = form.getInputByValue(\"submit\");\r\n        final HtmlPage page2 = button.click();\r\n        Assert.assertTrue(page2.asNormalizedText().contains(\"We are processing your request. Please wait.\"));\r\n        // hit it again\r\n        final HtmlPage page3 = webClient.getPage(ParameterUtils.getBaseUrl() + \"/wait/longProcess1.action?time=1000\");\r\n        Assert.assertTrue(page3.asNormalizedText().contains(\"We are processing your request. Please wait.\"));\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\apps\\showcase\\src\\test\\java\\it\\org\\apache\\struts2\\showcase\\FileDownloadTest.java",
  "methodName" : "testImage",
  "sourceCode" : "@Test\r\npublic void testImage() throws Exception {\r\n    try (final WebClient webClient = new WebClient()) {\r\n        final Page page = webClient.getPage(ParameterUtils.getBaseUrl() + \"/filedownload/download.action\");\r\n        URL url = new URL(\"https://gitbox.apache.org/repos/asf?p=struts.git;a=blob_plain;f=apps/showcase/src/main/webapp/images/struts.gif;hb=HEAD\");\r\n        Assert.assertTrue(areFilesEqual(url.openStream(), page.getWebResponse().getContentAsStream()));\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\apps\\showcase\\src\\test\\java\\it\\org\\apache\\struts2\\showcase\\FileDownloadTest.java",
  "methodName" : "testZip",
  "sourceCode" : "@Test\r\npublic void testZip() throws Exception {\r\n    try (final WebClient webClient = new WebClient()) {\r\n        final Page page = webClient.getPage(ParameterUtils.getBaseUrl() + \"/filedownload/download2.action\");\r\n        URL url = new URL(\"https://gitbox.apache.org/repos/asf?p=struts.git;a=blob_plain;f=apps/showcase/src/main/webapp/images/struts-gif.zip;hb=HEAD\");\r\n        Assert.assertTrue(areFilesEqual(url.openStream(), page.getWebResponse().getContentAsStream()));\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\apps\\showcase\\src\\test\\java\\it\\org\\apache\\struts2\\showcase\\FileUploadTest.java",
  "methodName" : "testSimpleFileUpload",
  "sourceCode" : "@Test\r\npublic void testSimpleFileUpload() throws Exception {\r\n    try (final WebClient webClient = new WebClient()) {\r\n        final HtmlPage page = webClient.getPage(ParameterUtils.getBaseUrl() + \"/fileupload/doUpload.action\");\r\n        final HtmlForm form = page.getFormByName(\"doUpload\");\r\n        HtmlInput captionInput = form.getInputByName(\"caption\");\r\n        HtmlFileInput uploadInput = form.getInputByName(\"upload\");\r\n        captionInput.type(\"some caption\");\r\n        File tempFile = File.createTempFile(\"testEmptyFile\", \".txt\");\r\n        tempFile.deleteOnExit();\r\n        try (FileWriter writer = new FileWriter(tempFile)) {\r\n            writer.append(\"Some strings\");\r\n            writer.flush();\r\n        }\r\n        uploadInput.setValue(tempFile.getAbsolutePath());\r\n        final HtmlSubmitInput button = form.getInputByValue(\"Submit\");\r\n        final HtmlPage resultPage = button.click();\r\n        String content = resultPage.getVisibleText();\r\n        assertThat(content).contains(\"ContentType: text/plain\", \"Original FileName: \" + tempFile.getName(), \"Caption: some caption\", \"Size: 12\", \"Input name: upload\");\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\apps\\showcase\\src\\test\\java\\it\\org\\apache\\struts2\\showcase\\FileUploadTest.java",
  "methodName" : "testUploadOverMaxSize",
  "sourceCode" : "@Test\r\npublic void testUploadOverMaxSize() throws Exception {\r\n    try (final WebClient webClient = new WebClient()) {\r\n        final HtmlPage page = webClient.getPage(ParameterUtils.getBaseUrl() + \"/fileupload/doUpload.action\");\r\n        final HtmlForm form = page.getFormByName(\"doUpload\");\r\n        HtmlInput captionInput = form.getInputByName(\"caption\");\r\n        HtmlFileInput uploadInput = form.getInputByName(\"upload\");\r\n        captionInput.type(\"Large file\");\r\n        File tempFile = File.createTempFile(\"testEmptyFile\", \".txt\");\r\n        SecureRandom rng = new SecureRandom();\r\n        tempFile.deleteOnExit();\r\n        try (FileWriter writer = new FileWriter(tempFile)) {\r\n            for (int i = 0; i < 10240; ++i) {\r\n                String line = String.format(\"%s %s%n\", rng.nextInt(), rng.nextInt());\r\n                writer.append(line);\r\n            }\r\n            writer.flush();\r\n        }\r\n        uploadInput.setValue(tempFile.getAbsolutePath());\r\n        final HtmlSubmitInput button = form.getInputByValue(\"Submit\");\r\n        final HtmlPage resultPage = button.click();\r\n        String content = resultPage.getVisibleText();\r\n        System.out.println(content);\r\n        assertThat(content).contains(\"Request exceeded allowed size limit! Max size allowed is: 10,240!\");\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\apps\\showcase\\src\\test\\java\\it\\org\\apache\\struts2\\showcase\\ForwardTest.java",
  "methodName" : "testServletForwardingToAction",
  "sourceCode" : "@Test\r\npublic void testServletForwardingToAction() throws Exception {\r\n    try (final WebClient webClient = new WebClient()) {\r\n        // Struts excluded URL, as defined by struts.action.excludePattern\r\n        final HtmlPage page = webClient.getPage(ParameterUtils.getBaseUrl() + \"/testServlet/forward\");\r\n        DomElement div = page.getElementById(\"dispatcher-result\");\r\n        Assert.assertEquals(\"This page is a result of \\\"dispatching\\\" to it from an action\", div.asNormalizedText());\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\apps\\showcase\\src\\test\\java\\it\\org\\apache\\struts2\\showcase\\FreeMarkerManagerTest.java",
  "methodName" : "testCustomManager",
  "sourceCode" : "@Test\r\npublic void testCustomManager() throws Exception {\r\n    try (final WebClient webClient = new WebClient()) {\r\n        final HtmlPage page = webClient.getPage(ParameterUtils.getBaseUrl() + \"/freemarker/customFreemarkerManagerDemo.action\");\r\n        final DomElement date = page.getElementById(\"todaysDate\");\r\n        Assert.assertNotNull(date);\r\n        Assert.assertFalse(date.asNormalizedText().isEmpty());\r\n        final DomElement time = page.getElementById(\"timeNow\");\r\n        Assert.assertNotNull(time);\r\n        Assert.assertFalse(time.asNormalizedText().isEmpty());\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\apps\\showcase\\src\\test\\java\\it\\org\\apache\\struts2\\showcase\\FreeMarkerManagerTest.java",
  "methodName" : "testTags",
  "sourceCode" : "@Test\r\npublic void testTags() throws Exception {\r\n    try (final WebClient webClient = new WebClient()) {\r\n        final HtmlPage page = webClient.getPage(ParameterUtils.getBaseUrl() + \"/freemarker/standardTags.action\");\r\n        final DomElement date = page.getElementById(\"test_name\");\r\n        Assert.assertNotNull(date);\r\n        final DomElement time = page.getElementById(\"test\");\r\n        Assert.assertNotNull(time);\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\apps\\showcase\\src\\test\\java\\it\\org\\apache\\struts2\\showcase\\ModelDrivenTest.java",
  "methodName" : "submit",
  "sourceCode" : "@Test\r\npublic void submit() throws Exception {\r\n    HtmlPage page = webClient.getPage(ParameterUtils.getBaseUrl() + \"/modelDriven/modelDriven.action\");\r\n    HtmlForm form = page.getForms().get(0);\r\n    form.getInputByName(\"name\").setValue(\"Johannes\");\r\n    form.getInputByName(\"age\").setValue(\"21\");\r\n    form.getInputByName(\"bustedBefore\").setChecked(true);\r\n    form.getTextAreaByName(\"description\").setText(\"Deals bugs\");\r\n    HtmlSubmitInput button = form.getInputByValue(\"Submit\");\r\n    page = button.click();\r\n    assertThat(page.getElementById(\"name\").asNormalizedText()).isEqualTo(\"Johannes\");\r\n    assertThat(page.getElementById(\"age\").asNormalizedText()).isEqualTo(\"21\");\r\n    assertThat(page.getElementById(\"bustedBefore\").asNormalizedText()).isEqualTo(\"true\");\r\n    assertThat(page.getElementById(\"description\").asNormalizedText()).isEqualTo(\"Deals bugs\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\apps\\showcase\\src\\test\\java\\it\\org\\apache\\struts2\\showcase\\StaticContentTest.java",
  "methodName" : "testInvalidResources1",
  "sourceCode" : "@Test\r\npublic void testInvalidResources1() throws Exception {\r\n    try (final WebClient webClient = new WebClient()) {\r\n        try {\r\n            webClient.getPage(ParameterUtils.getBaseUrl() + \"/struts..\");\r\n            Assert.fail(\"Previous request should have failed\");\r\n        } catch (FailingHttpStatusCodeException e) {\r\n            Assert.assertEquals(\"Not Found\", e.getStatusMessage());\r\n            Assert.assertEquals(404, e.getStatusCode());\r\n        }\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\apps\\showcase\\src\\test\\java\\it\\org\\apache\\struts2\\showcase\\StaticContentTest.java",
  "methodName" : "testInvalidResources2",
  "sourceCode" : "@Test\r\npublic void testInvalidResources2() throws Exception {\r\n    try (final WebClient webClient = new WebClient()) {\r\n        try {\r\n            webClient.getPage(ParameterUtils.getBaseUrl() + \"/static/..%252f\");\r\n            Assert.fail(\"Previous request should have failed\");\r\n        } catch (FailingHttpStatusCodeException e) {\r\n            Assert.assertEquals(\"Not Found\", e.getStatusMessage());\r\n            Assert.assertEquals(404, e.getStatusCode());\r\n        }\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\apps\\showcase\\src\\test\\java\\it\\org\\apache\\struts2\\showcase\\StrutsParametersTest.java",
  "methodName" : "public_StringField_WithoutGetterSetter_FieldNotAnnotated",
  "sourceCode" : "@Test\r\npublic void public_StringField_WithoutGetterSetter_FieldNotAnnotated() throws Exception {\r\n    Map<String, String> params = new HashMap<>();\r\n    params.put(\"publicField\", \"yes\");\r\n    params.put(\"varToPrint\", \"publicField\");\r\n    assertText(params, \"publicField{no}\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\apps\\showcase\\src\\test\\java\\it\\org\\apache\\struts2\\showcase\\StrutsParametersTest.java",
  "methodName" : "public_StringField_WithoutGetterSetter_FieldAnnotated",
  "sourceCode" : "@Test\r\npublic void public_StringField_WithoutGetterSetter_FieldAnnotated() throws Exception {\r\n    Map<String, String> params = new HashMap<>();\r\n    params.put(\"publicFieldAnnotated\", \"yes\");\r\n    params.put(\"varToPrint\", \"publicFieldAnnotated\");\r\n    assertText(params, \"publicFieldAnnotated{yes}\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\apps\\showcase\\src\\test\\java\\it\\org\\apache\\struts2\\showcase\\StrutsParametersTest.java",
  "methodName" : "private_StringField_WithSetter_MethodNotAnnotated",
  "sourceCode" : "@Test\r\npublic void private_StringField_WithSetter_MethodNotAnnotated() throws Exception {\r\n    Map<String, String> params = new HashMap<>();\r\n    params.put(\"privateFieldMethod\", \"yes\");\r\n    params.put(\"varToPrint\", \"privateField\");\r\n    assertText(params, \"privateField{no}\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\apps\\showcase\\src\\test\\java\\it\\org\\apache\\struts2\\showcase\\StrutsParametersTest.java",
  "methodName" : "private_StringField_WithSetter_MethodAnnotated",
  "sourceCode" : "@Test\r\npublic void private_StringField_WithSetter_MethodAnnotated() throws Exception {\r\n    Map<String, String> params = new HashMap<>();\r\n    params.put(\"privateFieldMethodAnnotated\", \"yes\");\r\n    params.put(\"varToPrint\", \"privateField\");\r\n    assertText(params, \"privateField{yes}\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\apps\\showcase\\src\\test\\java\\it\\org\\apache\\struts2\\showcase\\StrutsParametersTest.java",
  "methodName" : "public_ArrayField_WithoutGetterSetter_FieldNotAnnotated",
  "sourceCode" : "@Test\r\npublic void public_ArrayField_WithoutGetterSetter_FieldNotAnnotated() throws Exception {\r\n    Map<String, String> params = new HashMap<>();\r\n    params.put(\"publicArray[0]\", \"1\");\r\n    params.put(\"varToPrint\", \"publicArray\");\r\n    assertText(params, \"publicArray{[0]}\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\apps\\showcase\\src\\test\\java\\it\\org\\apache\\struts2\\showcase\\StrutsParametersTest.java",
  "methodName" : "public_ArrayField_WithoutGetterSetter_FieldAnnotated",
  "sourceCode" : "@Test\r\npublic void public_ArrayField_WithoutGetterSetter_FieldAnnotated() throws Exception {\r\n    Map<String, String> params = new HashMap<>();\r\n    params.put(\"publicArrayAnnotated[0]\", \"1\");\r\n    params.put(\"varToPrint\", \"publicArrayAnnotated\");\r\n    assertText(params, \"publicArrayAnnotated{[1]}\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\apps\\showcase\\src\\test\\java\\it\\org\\apache\\struts2\\showcase\\StrutsParametersTest.java",
  "methodName" : "public_ListField_WithoutGetterSetter_FieldNotAnnotated",
  "sourceCode" : "@Test\r\npublic void public_ListField_WithoutGetterSetter_FieldNotAnnotated() throws Exception {\r\n    Map<String, String> params = new HashMap<>();\r\n    params.put(\"publicList[0]\", \"yes\");\r\n    params.put(\"varToPrint\", \"publicList\");\r\n    assertText(params, \"publicList{[no]}\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\apps\\showcase\\src\\test\\java\\it\\org\\apache\\struts2\\showcase\\StrutsParametersTest.java",
  "methodName" : "public_ListField_WithoutGetterSetter_FieldAnnotated",
  "sourceCode" : "@Test\r\npublic void public_ListField_WithoutGetterSetter_FieldAnnotated() throws Exception {\r\n    Map<String, String> params = new HashMap<>();\r\n    params.put(\"publicListAnnotated[0]\", \"yes\");\r\n    params.put(\"varToPrint\", \"publicListAnnotated\");\r\n    assertText(params, \"publicListAnnotated{[yes]}\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\apps\\showcase\\src\\test\\java\\it\\org\\apache\\struts2\\showcase\\StrutsParametersTest.java",
  "methodName" : "private_ListField_WithGetterNoSetter_MethodNotAnnotated",
  "sourceCode" : "@Test\r\npublic void private_ListField_WithGetterNoSetter_MethodNotAnnotated() throws Exception {\r\n    Map<String, String> params = new HashMap<>();\r\n    params.put(\"privateListMethod[0]\", \"yes\");\r\n    params.put(\"varToPrint\", \"privateList\");\r\n    assertText(params, \"privateList{[no]}\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\apps\\showcase\\src\\test\\java\\it\\org\\apache\\struts2\\showcase\\StrutsParametersTest.java",
  "methodName" : "private_ListField_WithGetterNoSetter_MethodAnnotated",
  "sourceCode" : "@Test\r\npublic void private_ListField_WithGetterNoSetter_MethodAnnotated() throws Exception {\r\n    Map<String, String> params = new HashMap<>();\r\n    params.put(\"privateListMethodAnnotated[0]\", \"yes\");\r\n    params.put(\"varToPrint\", \"privateList\");\r\n    assertText(params, \"privateList{[yes]}\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\apps\\showcase\\src\\test\\java\\it\\org\\apache\\struts2\\showcase\\StrutsParametersTest.java",
  "methodName" : "public_MapField_WithoutGetterSetter_FieldNotAnnotated",
  "sourceCode" : "@Test\r\npublic void public_MapField_WithoutGetterSetter_FieldNotAnnotated() throws Exception {\r\n    Map<String, String> params = new HashMap<>();\r\n    params.put(\"publicMap['key']\", \"yes\");\r\n    params.put(\"varToPrint\", \"publicMap\");\r\n    assertText(params, \"publicMap{{key=no}}\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\apps\\showcase\\src\\test\\java\\it\\org\\apache\\struts2\\showcase\\StrutsParametersTest.java",
  "methodName" : "public_MapField_WithoutGetterSetter_FieldAnnotated",
  "sourceCode" : "@Test\r\npublic void public_MapField_WithoutGetterSetter_FieldAnnotated() throws Exception {\r\n    Map<String, String> params = new HashMap<>();\r\n    params.put(\"publicMapAnnotated['key']\", \"yes\");\r\n    params.put(\"varToPrint\", \"publicMapAnnotated\");\r\n    assertText(params, \"publicMapAnnotated{{key=yes}}\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\apps\\showcase\\src\\test\\java\\it\\org\\apache\\struts2\\showcase\\StrutsParametersTest.java",
  "methodName" : "public_MapField_Insert_WithoutGetterSetter_FieldNotAnnotated",
  "sourceCode" : "@Test\r\npublic void public_MapField_Insert_WithoutGetterSetter_FieldNotAnnotated() throws Exception {\r\n    Map<String, String> params = new HashMap<>();\r\n    params.put(\"publicMap[999]\", \"yes\");\r\n    params.put(\"varToPrint\", \"publicMap\");\r\n    assertText(params, \"publicMap{{key=no}}\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\apps\\showcase\\src\\test\\java\\it\\org\\apache\\struts2\\showcase\\StrutsParametersTest.java",
  "methodName" : "public_MapField_Insert_WithoutGetterSetter_FieldAnnotated",
  "sourceCode" : "@Test\r\npublic void public_MapField_Insert_WithoutGetterSetter_FieldAnnotated() throws Exception {\r\n    Map<String, String> params = new HashMap<>();\r\n    params.put(\"publicMapAnnotated[999]\", \"yes\");\r\n    params.put(\"varToPrint\", \"publicMapAnnotated\");\r\n    assertText(params, \"publicMapAnnotated{{999=yes, key=no}}\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\apps\\showcase\\src\\test\\java\\it\\org\\apache\\struts2\\showcase\\StrutsParametersTest.java",
  "methodName" : "public_MyDtoField_WithoutGetter_FieldNotAnnotated",
  "sourceCode" : "@Test\r\npublic void public_MyDtoField_WithoutGetter_FieldNotAnnotated() throws Exception {\r\n    Map<String, String> params = new HashMap<>();\r\n    params.put(\"publicMyDto.str\", \"yes\");\r\n    params.put(\"publicMyDto.map['key']\", \"yes\");\r\n    params.put(\"publicMyDto.array[0]\", \"1\");\r\n    params.put(\"varToPrint\", \"publicMyDto\");\r\n    assertText(params, \"publicMyDto{str=no, map={key=no}, array=[0]}\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\apps\\showcase\\src\\test\\java\\it\\org\\apache\\struts2\\showcase\\StrutsParametersTest.java",
  "methodName" : "public_MyDtoField_WithoutGetter_FieldAnnotated",
  "sourceCode" : "@Test\r\npublic void public_MyDtoField_WithoutGetter_FieldAnnotated() throws Exception {\r\n    Map<String, String> params = new HashMap<>();\r\n    params.put(\"publicMyDtoAnnotated.str\", \"yes\");\r\n    params.put(\"publicMyDtoAnnotated.map['key']\", \"yes\");\r\n    params.put(\"publicMyDtoAnnotated.array[0]\", \"1\");\r\n    params.put(\"varToPrint\", \"publicMyDtoAnnotated\");\r\n    assertText(params, \"publicMyDtoAnnotated{str=yes, map={key=yes}, array=[1]}\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\apps\\showcase\\src\\test\\java\\it\\org\\apache\\struts2\\showcase\\StrutsParametersTest.java",
  "methodName" : "public_MyDtoField_WithoutGetter_FieldAnnotatedDepthOne",
  "sourceCode" : "@Test\r\npublic void public_MyDtoField_WithoutGetter_FieldAnnotatedDepthOne() throws Exception {\r\n    Map<String, String> params = new HashMap<>();\r\n    params.put(\"publicMyDtoAnnotatedDepthOne.str\", \"yes\");\r\n    params.put(\"publicMyDtoAnnotatedDepthOne.map['key']\", \"yes\");\r\n    params.put(\"publicMyDtoAnnotatedDepthOne.array[0]\", \"1\");\r\n    params.put(\"varToPrint\", \"publicMyDtoAnnotatedDepthOne\");\r\n    assertText(params, \"publicMyDtoAnnotatedDepthOne{str=yes, map={key=no}, array=[0]}\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\apps\\showcase\\src\\test\\java\\it\\org\\apache\\struts2\\showcase\\StrutsParametersTest.java",
  "methodName" : "private_MyDtoField_WithGetter_MethodNotAnnotated",
  "sourceCode" : "@Test\r\npublic void private_MyDtoField_WithGetter_MethodNotAnnotated() throws Exception {\r\n    Map<String, String> params = new HashMap<>();\r\n    params.put(\"unsafeMethodMyDto.str\", \"yes\");\r\n    params.put(\"unsafeMethodMyDto.map['key']\", \"yes\");\r\n    params.put(\"unsafeMethodMyDto.array[0]\", \"1\");\r\n    params.put(\"varToPrint\", \"privateMyDto\");\r\n    assertText(params, \"privateMyDto{str=no, map={key=no}, array=[0]}\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\apps\\showcase\\src\\test\\java\\it\\org\\apache\\struts2\\showcase\\StrutsParametersTest.java",
  "methodName" : "private_MyDtoField_WithGetter_MethodNotAnnotated_Alternate",
  "sourceCode" : "@Test\r\npublic void private_MyDtoField_WithGetter_MethodNotAnnotated_Alternate() throws Exception {\r\n    Map<String, String> params = new HashMap<>();\r\n    params.put(\"unsafeMethodMyDto['str']\", \"yes\");\r\n    params.put(\"unsafeMethodMyDto['map']['key']\", \"yes\");\r\n    params.put(\"unsafeMethodMyDto['map'][999]\", \"yes\");\r\n    params.put(\"unsafeMethodMyDto['array'][0]\", \"1\");\r\n    params.put(\"varToPrint\", \"privateMyDto\");\r\n    assertText(params, \"privateMyDto{str=no, map={key=no}, array=[0]}\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\apps\\showcase\\src\\test\\java\\it\\org\\apache\\struts2\\showcase\\StrutsParametersTest.java",
  "methodName" : "private_MyDtoField_WithGetter_MethodAnnotated",
  "sourceCode" : "@Test\r\npublic void private_MyDtoField_WithGetter_MethodAnnotated() throws Exception {\r\n    Map<String, String> params = new HashMap<>();\r\n    params.put(\"safeMethodMyDto.str\", \"yes\");\r\n    params.put(\"safeMethodMyDto.map['key']\", \"yes\");\r\n    params.put(\"safeMethodMyDto.array[0]\", \"1\");\r\n    params.put(\"varToPrint\", \"privateMyDto\");\r\n    assertText(params, \"privateMyDto{str=yes, map={key=yes}, array=[1]}\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\apps\\showcase\\src\\test\\java\\it\\org\\apache\\struts2\\showcase\\StrutsParametersTest.java",
  "methodName" : "private_MyDtoField_WithGetter_MethodAnnotatedDepthOne",
  "sourceCode" : "@Test\r\npublic void private_MyDtoField_WithGetter_MethodAnnotatedDepthOne() throws Exception {\r\n    Map<String, String> params = new HashMap<>();\r\n    params.put(\"safeMethodMyDtoDepthOne.str\", \"yes\");\r\n    params.put(\"safeMethodMyDtoDepthOne.map['key']\", \"yes\");\r\n    params.put(\"safeMethodMyDtoDepthOne.array[0]\", \"1\");\r\n    params.put(\"varToPrint\", \"privateMyDto\");\r\n    assertText(params, \"privateMyDto{str=yes, map={key=no}, array=[0]}\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\apps\\showcase\\src\\test\\java\\it\\org\\apache\\struts2\\showcase\\UITagExampleTest.java",
  "methodName" : "testInputForm",
  "sourceCode" : "@Test\r\npublic void testInputForm() throws Exception {\r\n    try (final WebClient webClient = new WebClient()) {\r\n        final HtmlPage page = webClient.getPage(ParameterUtils.getBaseUrl() + \"/tags/ui/example!input.action\");\r\n        final HtmlForm form = page.getFormByName(\"exampleSubmit\");\r\n        Assert.assertNotNull(form);\r\n        final HtmlTextInput textField = form.getInputByName(\"name\");\r\n        final HtmlTextArea textField2 = form.getTextAreaByName(\"bio\");\r\n        final HtmlSelect textField3 = form.getSelectByName(\"favouriteColor\");\r\n        final HtmlCheckBoxInput textField4 = form.getInputByValue(\"Patrick\");\r\n        final HtmlCheckBoxInput textField41 = form.getInputByValue(\"Jason\");\r\n        final HtmlCheckBoxInput textField5 = form.getInputByName(\"legalAge\");\r\n        Assert.assertNotNull(textField);\r\n        Assert.assertNotNull(textField2);\r\n        Assert.assertNotNull(textField3);\r\n        Assert.assertNotNull(textField4);\r\n        Assert.assertNotNull(textField41);\r\n        Assert.assertNotNull(textField5);\r\n        textField.type(\"name\");\r\n        textField2.type(\"bio\");\r\n        textField3.setSelectedAttribute(\"Red\", true);\r\n        textField4.setChecked(true);\r\n        textField41.setChecked(true);\r\n        textField5.setChecked(true);\r\n        final HtmlSubmitInput button = form.getInputByValue(\"Submit\");\r\n        final HtmlPage page2 = button.click();\r\n        Assert.assertEquals(\"name\", page2.getElementById(\"name\").asNormalizedText());\r\n        Assert.assertEquals(\"bio\", page2.getElementById(\"bio\").asNormalizedText());\r\n        Assert.assertEquals(\"Red\", page2.getElementById(\"favouriteColor\").asNormalizedText());\r\n        Assert.assertEquals(\"[Patrick, Jason]\", page2.getElementById(\"friends\").asNormalizedText());\r\n        Assert.assertEquals(\"true\", page2.getElementById(\"legalAge\").asNormalizedText());\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\apps\\showcase\\src\\test\\java\\it\\org\\apache\\struts2\\showcase\\ValidationTest.java",
  "methodName" : "testFieldValidators",
  "sourceCode" : "@Test\r\npublic void testFieldValidators() throws Exception {\r\n    try (final WebClient webClient = new WebClient()) {\r\n        final HtmlPage page = webClient.getPage(ParameterUtils.getBaseUrl() + \"/validation/showFieldValidatorsExamples.action\");\r\n        final HtmlForm form = page.getForms().get(0);\r\n        form.getInputByName(\"integerValidatorField\").type(\"nonint\");\r\n        form.getInputByName(\"dateValidatorField\").type(\"nondate\");\r\n        form.getInputByName(\"emailValidatorField\").type(\"!@@#%\");\r\n        form.getInputByName(\"urlValidatorField\").type(\"!@@#%\");\r\n        form.getInputByName(\"stringLengthValidatorField\").type(\"a\");\r\n        form.getInputByName(\"regexValidatorField\").type(\"abc\");\r\n        form.getInputByName(\"fieldExpressionValidatorField\").type(\"abc\");\r\n        final HtmlSubmitInput button = form.getInputByValue(\"Submit\");\r\n        final HtmlPage page2 = button.click();\r\n        final String page2Text = page2.asNormalizedText();\r\n        Assert.assertTrue(page2Text.contains(\"Invalid field value for field \\\"dateValidatorField\\\"\"));\r\n        Assert.assertTrue(page2Text.contains(\"Invalid field value for field \\\"integerValidatorField\\\"\"));\r\n        Assert.assertTrue(page2Text.contains(\"required and must be string\"));\r\n        Assert.assertTrue(page2Text.contains(\"must be a valid email if supplied\"));\r\n        Assert.assertTrue(page2Text.contains(\"must be a valid url if supplied\"));\r\n        Assert.assertTrue(page2Text.contains(\"must be a String of a specific greater than 1 less than 5 if specified\"));\r\n        Assert.assertTrue(page2Text.contains(\"regexValidatorField must match a regexp (.*\\\\.txt) if specified\"));\r\n        Assert.assertTrue(page2Text.contains(\"must be the same as the Required Validator Field if specified\"));\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\apps\\showcase\\src\\test\\java\\org\\apache\\struts2\\showcase\\filedownload\\FileDownloadActionTest.java",
  "methodName" : "testSanitizeInputPathShouldAllowSimpleParameter",
  "sourceCode" : "@Test\r\npublic void testSanitizeInputPathShouldAllowSimpleParameter() throws Exception {\r\n    assertEquals(\"foo\", fileDownloadAction.sanitizeInputPath(\"foo\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\apps\\showcase\\src\\test\\java\\org\\apache\\struts2\\showcase\\filedownload\\FileDownloadActionTest.java",
  "methodName" : "testSanitizeInputPathShouldReturnNullForNullInput",
  "sourceCode" : "@Test\r\npublic void testSanitizeInputPathShouldReturnNullForNullInput() throws Exception {\r\n    assertNull(fileDownloadAction.sanitizeInputPath(null));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\apps\\showcase\\src\\test\\java\\org\\apache\\struts2\\showcase\\filedownload\\FileDownloadActionTest.java",
  "methodName" : "testSanitizeInputPathShouldReturnNullForLeadingWebInf",
  "sourceCode" : "@Test\r\npublic void testSanitizeInputPathShouldReturnNullForLeadingWebInf() throws Exception {\r\n    assertNull(fileDownloadAction.sanitizeInputPath(\"WEB-INF/foo\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\apps\\showcase\\src\\test\\java\\org\\apache\\struts2\\showcase\\filedownload\\FileDownloadActionTest.java",
  "methodName" : "testSanitizeInputPathShouldReturnNullForNonLeadingWebInf",
  "sourceCode" : "@Test\r\npublic void testSanitizeInputPathShouldReturnNullForNonLeadingWebInf() throws Exception {\r\n    assertNull(fileDownloadAction.sanitizeInputPath(\"./WEB-INF/foo\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\apps\\showcase\\src\\test\\java\\org\\apache\\struts2\\showcase\\filedownload\\FileDownloadActionTest.java",
  "methodName" : "testSanitizeInputPathShouldReturnNullForNonUppercaseWebInf",
  "sourceCode" : "@Test\r\npublic void testSanitizeInputPathShouldReturnNullForNonUppercaseWebInf() throws Exception {\r\n    assertNull(fileDownloadAction.sanitizeInputPath(\"./wEB-Inf/foo\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\core\\src\\test\\java\\org\\apache\\struts2\\ActionChainResultTest.java",
  "methodName" : "testPassingNullInvocation",
  "sourceCode" : "@Test\r\npublic void testPassingNullInvocation() throws Exception {\r\n    Result result = new ActionChainResult();\r\n    try {\r\n        result.execute(null);\r\n        fail(\"Exception should be thrown!\");\r\n    } catch (IllegalArgumentException e) {\r\n        assertEquals(\"Invocation cannot be null!\", e.getMessage());\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\core\\src\\test\\java\\org\\apache\\struts2\\config\\entities\\BeanConfigTest.java",
  "methodName" : "testConstructor",
  "sourceCode" : "@Test\r\npublic void testConstructor() throws Exception {\r\n    Class<TestBean> expectedClass = TestBean.class;\r\n    BeanConfig beanConfig = new BeanConfig(expectedClass);\r\n    Assert.assertEquals(expectedClass, beanConfig.getClazz());\r\n    Assert.assertEquals(Container.DEFAULT_NAME, beanConfig.getName());\r\n    Assert.assertEquals(Scope.SINGLETON, beanConfig.getScope());\r\n    Assert.assertEquals(expectedClass, beanConfig.getType());\r\n    Assert.assertFalse(beanConfig.isOnlyStatic());\r\n    Assert.assertFalse(beanConfig.isOptional());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\core\\src\\test\\java\\org\\apache\\struts2\\config\\entities\\BeanConfigTest.java",
  "methodName" : "testConstructor2",
  "sourceCode" : "@Test\r\npublic void testConstructor2() throws Exception {\r\n    Class<TestBean> expectedClass = TestBean.class;\r\n    String expectedName = \"expectedBeanName\";\r\n    Class<Object> expectedType = Object.class;\r\n    Scope expectedScope = Scope.PROTOTYPE;\r\n    boolean expectedOnlyStatic = true;\r\n    boolean expectedOptional = true;\r\n    BeanConfig beanConfig = new BeanConfig(expectedClass, expectedName, expectedType, expectedScope, expectedOnlyStatic, expectedOptional);\r\n    Assert.assertEquals(expectedClass, beanConfig.getClazz());\r\n    Assert.assertEquals(expectedName, beanConfig.getName());\r\n    Assert.assertEquals(expectedScope, beanConfig.getScope());\r\n    Assert.assertEquals(expectedType, beanConfig.getType());\r\n    Assert.assertEquals(expectedOnlyStatic, beanConfig.isOnlyStatic());\r\n    Assert.assertEquals(expectedOptional, beanConfig.isOptional());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\core\\src\\test\\java\\org\\apache\\struts2\\config\\entities\\ConstantConfigTest.java",
  "methodName" : "testBeanConfToString",
  "sourceCode" : "@Test\r\npublic void testBeanConfToString() {\r\n    ConstantConfig constantConfig = new ConstantConfig();\r\n    String actual = constantConfig.beanConfToString(null);\r\n    Assert.assertNull(actual);\r\n    actual = constantConfig.beanConfToString(new BeanConfig(TestBean.class));\r\n    Assert.assertEquals(Container.DEFAULT_NAME, actual);\r\n    String expectedName = \"expectedTestBeanName\";\r\n    actual = constantConfig.beanConfToString(new BeanConfig(TestBean.class, expectedName));\r\n    Assert.assertEquals(expectedName, actual);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\core\\src\\test\\java\\org\\apache\\struts2\\config\\entities\\ConstantConfigTest.java",
  "methodName" : "testGetAllAsStringsMap",
  "sourceCode" : "@Test\r\npublic void testGetAllAsStringsMap() {\r\n    ConstantConfig constantConfig = new ConstantConfig();\r\n    boolean expectedDevMode = true;\r\n    constantConfig.setDevMode(expectedDevMode);\r\n    String expectedActionExtensions = \".action,.some,.another\";\r\n    constantConfig.setActionExtension(Arrays.asList(expectedActionExtensions.split(\",\")));\r\n    String expectedLanguage = \"fr\";\r\n    constantConfig.setLocale(new Locale(expectedLanguage));\r\n    Map<String, String> map = constantConfig.getAllAsStringsMap();\r\n    Assert.assertEquals(String.valueOf(expectedDevMode), map.get(StrutsConstants.STRUTS_DEVMODE));\r\n    Assert.assertEquals(expectedActionExtensions, map.get(StrutsConstants.STRUTS_ACTION_EXTENSION));\r\n    Assert.assertNull(map.get(StrutsConstants.STRUTS_I18N_RELOAD));\r\n    Assert.assertEquals(expectedLanguage, map.get(StrutsConstants.STRUTS_LOCALE));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\core\\src\\test\\java\\org\\apache\\struts2\\config\\entities\\ConstantConfigTest.java",
  "methodName" : "testEmptyClassesToString",
  "sourceCode" : "@Test\r\npublic void testEmptyClassesToString() {\r\n    ConstantConfig constantConfig = new ConstantConfig();\r\n    constantConfig.setExcludedClasses(null);\r\n    constantConfig.setExcludedPackageNamePatterns(null);\r\n    constantConfig.setExcludedPackageNames(null);\r\n    constantConfig.setExcludedPackageExemptClasses(null);\r\n    constantConfig.setDevModeExcludedClasses(null);\r\n    constantConfig.setDevModeExcludedPackageNamePatterns(null);\r\n    constantConfig.setDevModeExcludedPackageNames(null);\r\n    constantConfig.setDevModeExcludedPackageExemptClasses(null);\r\n    Map<String, String> map = constantConfig.getAllAsStringsMap();\r\n    Assert.assertNull(map.get(StrutsConstants.STRUTS_EXCLUDED_CLASSES));\r\n    Assert.assertNull(map.get(StrutsConstants.STRUTS_EXCLUDED_PACKAGE_NAME_PATTERNS));\r\n    Assert.assertNull(map.get(StrutsConstants.STRUTS_EXCLUDED_PACKAGE_NAMES));\r\n    Assert.assertNull(map.get(StrutsConstants.STRUTS_DEV_MODE_EXCLUDED_CLASSES));\r\n    Assert.assertNull(map.get(StrutsConstants.STRUTS_DEV_MODE_EXCLUDED_PACKAGE_NAME_PATTERNS));\r\n    Assert.assertNull(map.get(StrutsConstants.STRUTS_DEV_MODE_EXCLUDED_PACKAGE_NAMES));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\core\\src\\test\\java\\org\\apache\\struts2\\config\\entities\\ConstantConfigTest.java",
  "methodName" : "testClassesToString",
  "sourceCode" : "@Test\r\npublic void testClassesToString() {\r\n    ConstantConfig constantConfig = new ConstantConfig();\r\n    Set<Class<?>> excludedClasses = new LinkedHashSet<>();\r\n    excludedClasses.add(Object.class);\r\n    excludedClasses.add(Runtime.class);\r\n    excludedClasses.add(System.class);\r\n    constantConfig.setExcludedClasses(excludedClasses);\r\n    constantConfig.setDevModeExcludedClasses(excludedClasses);\r\n    Map<String, String> map = constantConfig.getAllAsStringsMap();\r\n    Assert.assertEquals(\"java.lang.Object,java.lang.Runtime,java.lang.System\", map.get(StrutsConstants.STRUTS_EXCLUDED_CLASSES));\r\n    Assert.assertEquals(\"java.lang.Object,java.lang.Runtime,java.lang.System\", map.get(StrutsConstants.STRUTS_DEV_MODE_EXCLUDED_CLASSES));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\core\\src\\test\\java\\org\\apache\\struts2\\config\\entities\\ConstantConfigTest.java",
  "methodName" : "testExemptClassesToString",
  "sourceCode" : "@Test\r\npublic void testExemptClassesToString() {\r\n    ConstantConfig constantConfig = new ConstantConfig();\r\n    Set<Class<?>> exemptClasses = new LinkedHashSet<>();\r\n    exemptClasses.add(Object.class);\r\n    exemptClasses.add(Runtime.class);\r\n    exemptClasses.add(System.class);\r\n    constantConfig.setExcludedPackageExemptClasses(exemptClasses);\r\n    constantConfig.setDevModeExcludedPackageExemptClasses(exemptClasses);\r\n    Map<String, String> map = constantConfig.getAllAsStringsMap();\r\n    Assert.assertEquals(\"java.lang.Object,java.lang.Runtime,java.lang.System\", map.get(StrutsConstants.STRUTS_EXCLUDED_PACKAGE_EXEMPT_CLASSES));\r\n    Assert.assertEquals(\"java.lang.Object,java.lang.Runtime,java.lang.System\", map.get(StrutsConstants.STRUTS_DEV_MODE_EXCLUDED_PACKAGE_EXEMPT_CLASSES));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\core\\src\\test\\java\\org\\apache\\struts2\\config\\entities\\ConstantConfigTest.java",
  "methodName" : "testSettingStaticContentPath",
  "sourceCode" : "@Test\r\npublic void testSettingStaticContentPath() {\r\n    // given\r\n    ConstantConfig config = new ConstantConfig();\r\n    // when\r\n    config.setStaticContentPath(null);\r\n    // then\r\n    Assert.assertEquals(StaticContentLoader.DEFAULT_STATIC_CONTENT_PATH, config.getStaticContentPath());\r\n    // when\r\n    config.setStaticContentPath(\" \");\r\n    // then\r\n    Assert.assertEquals(StaticContentLoader.DEFAULT_STATIC_CONTENT_PATH, config.getStaticContentPath());\r\n    // when\r\n    config.setStaticContentPath(\"content\");\r\n    // then\r\n    Assert.assertEquals(\"/content\", config.getStaticContentPath());\r\n    // when\r\n    config.setStaticContentPath(\"/content\");\r\n    // then\r\n    Assert.assertEquals(\"/content\", config.getStaticContentPath());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\core\\src\\test\\java\\org\\apache\\struts2\\config\\providers\\ConfigurationProviderOgnlAllowlistTest.java",
  "methodName" : "allowList",
  "sourceCode" : "@Test\r\npublic void allowList() throws Exception {\r\n    loadConfigurationProviders(testXml1, testXml2);\r\n    providerAllowlist = container.getInstance(ProviderAllowlist.class);\r\n    assertThat(providerAllowlist.getProviderAllowlist()).containsExactlyInAnyOrder(Class.forName(\"org.apache.struts2.interceptor.ValidationAware\"), Class.forName(\"org.apache.struts2.locale.LocaleProvider\"), Class.forName(\"java.io.Serializable\"), Class.forName(\"org.apache.struts2.mock.MockResult\"), Class.forName(\"org.apache.struts2.interceptor.ConditionalInterceptor\"), Class.forName(\"org.apache.struts2.ActionSupport\"), Class.forName(\"org.apache.struts2.result.ActionChainResult\"), Class.forName(\"org.apache.struts2.text.TextProvider\"), Class.forName(\"org.apache.struts2.interceptor.NoOpInterceptor\"), Class.forName(\"org.apache.struts2.interceptor.Interceptor\"), Class.forName(\"java.lang.Object\"), Class.forName(\"org.apache.struts2.Validateable\"), Class.forName(\"org.apache.struts2.mock.MockInterceptor\"), Class.forName(\"org.apache.struts2.action.Action\"), Class.forName(\"org.apache.struts2.interceptor.AbstractInterceptor\"), Class.forName(\"org.apache.struts2.result.Result\"), Class.forName(\"org.apache.struts2.SimpleAction\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\core\\src\\test\\java\\org\\apache\\struts2\\config\\providers\\ConfigurationProviderOgnlAllowlistTest.java",
  "methodName" : "allowlist_1only",
  "sourceCode" : "@Test\r\npublic void allowlist_1only() throws Exception {\r\n    loadConfigurationProviders(testXml1);\r\n    providerAllowlist = container.getInstance(ProviderAllowlist.class);\r\n    assertThat(providerAllowlist.getProviderAllowlist()).containsExactlyInAnyOrder(Class.forName(\"org.apache.struts2.interceptor.ValidationAware\"), Class.forName(\"org.apache.struts2.locale.LocaleProvider\"), Class.forName(\"java.io.Serializable\"), Class.forName(\"org.apache.struts2.mock.MockResult\"), Class.forName(\"org.apache.struts2.interceptor.ConditionalInterceptor\"), Class.forName(\"org.apache.struts2.ActionSupport\"), Class.forName(\"org.apache.struts2.text.TextProvider\"), Class.forName(\"org.apache.struts2.interceptor.Interceptor\"), Class.forName(\"java.lang.Object\"), Class.forName(\"org.apache.struts2.Validateable\"), Class.forName(\"org.apache.struts2.mock.MockInterceptor\"), Class.forName(\"org.apache.struts2.action.Action\"), Class.forName(\"org.apache.struts2.interceptor.AbstractInterceptor\"), Class.forName(\"org.apache.struts2.result.Result\"), Class.forName(\"org.apache.struts2.SimpleAction\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\core\\src\\test\\java\\org\\apache\\struts2\\config\\providers\\ConfigurationProviderOgnlAllowlistTest.java",
  "methodName" : "allowlist_2only",
  "sourceCode" : "@Test\r\npublic void allowlist_2only() throws Exception {\r\n    loadConfigurationProviders(testXml2);\r\n    providerAllowlist = container.getInstance(ProviderAllowlist.class);\r\n    assertThat(providerAllowlist.getProviderAllowlist()).containsExactlyInAnyOrder(Class.forName(\"org.apache.struts2.interceptor.ValidationAware\"), Class.forName(\"org.apache.struts2.locale.LocaleProvider\"), Class.forName(\"java.io.Serializable\"), Class.forName(\"org.apache.struts2.interceptor.ConditionalInterceptor\"), Class.forName(\"org.apache.struts2.ActionSupport\"), Class.forName(\"org.apache.struts2.result.ActionChainResult\"), Class.forName(\"org.apache.struts2.text.TextProvider\"), Class.forName(\"org.apache.struts2.interceptor.NoOpInterceptor\"), Class.forName(\"org.apache.struts2.interceptor.Interceptor\"), Class.forName(\"java.lang.Object\"), Class.forName(\"org.apache.struts2.Validateable\"), Class.forName(\"org.apache.struts2.action.Action\"), Class.forName(\"org.apache.struts2.interceptor.AbstractInterceptor\"), Class.forName(\"org.apache.struts2.result.Result\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\core\\src\\test\\java\\org\\apache\\struts2\\config\\StrutsJavaConfigurationProviderTest.java",
  "methodName" : "testRegister",
  "sourceCode" : "@Test\r\npublic void testRegister() throws Exception {\r\n    final ConstantConfig constantConfig = new ConstantConfig();\r\n    constantConfig.setDevMode(true);\r\n    final String expectedUnknownHandler = \"expectedUnknownHandler\";\r\n    StrutsJavaConfiguration javaConfig = new StrutsJavaConfiguration() {\r\n\r\n        @Override\r\n        public List<String> unknownHandlerStack() {\r\n            return Collections.singletonList(expectedUnknownHandler);\r\n        }\r\n\r\n        @Override\r\n        public List<ConstantConfig> constants() {\r\n            return Collections.singletonList(constantConfig);\r\n        }\r\n\r\n        @Override\r\n        public List<BeanConfig> beans() {\r\n            return Arrays.asList(new BeanConfig(TestBean.class, \"struts\"), new BeanConfig(TestBean.class, \"struts.static\", TestBean.class, Scope.PROTOTYPE, true, true), new BeanConfig(TestBean.class, \"struts.test.bean\", TestBean.class));\r\n        }\r\n\r\n        @Override\r\n        public Optional<BeanSelectionConfig> beanSelection() {\r\n            return Optional.of(new BeanSelectionConfig(TestBeanSelectionProvider.class, \"testBeans\"));\r\n        }\r\n    };\r\n    StrutsJavaConfigurationProvider provider = new StrutsJavaConfigurationProvider(javaConfig);\r\n    Configuration configuration = new MockConfiguration();\r\n    provider.init(configuration);\r\n    ContainerBuilder builder = new ContainerBuilder();\r\n    LocatableProperties props = new LocatableProperties();\r\n    provider.register(builder, props);\r\n    // constant\r\n    Assert.assertEquals(String.valueOf(constantConfig.getDevMode()), props.get(StrutsConstants.STRUTS_DEVMODE));\r\n    // unknown-handler-stack\r\n    Assert.assertNotNull(configuration.getUnknownHandlerStack());\r\n    Assert.assertEquals(1, configuration.getUnknownHandlerStack().size());\r\n    Assert.assertEquals(expectedUnknownHandler, configuration.getUnknownHandlerStack().get(0).getName());\r\n    // bean\r\n    Container container = builder.create(true);\r\n    TestBean testBean = container.getInstance(TestBean.class);\r\n    Assert.assertNotNull(testBean);\r\n    testBean = container.getInstance(TestBean.class, \"struts\");\r\n    Assert.assertNotNull(testBean);\r\n    // bean selection\r\n    Set<String> names = container.getInstanceNames(TestBean.class);\r\n    Assert.assertTrue(names.contains(\"struts\"));\r\n    Assert.assertTrue(names.contains(\"struts.test.bean\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\core\\src\\test\\java\\org\\apache\\struts2\\config\\StrutsJavaConfigurationProviderTest.java",
  "methodName" : "testAbstractBeanProviderCoverage",
  "sourceCode" : "@Test\r\npublic /**\r\n * This test is purely to provide code coverage for {@link AbstractBeanSelectionProvider}.\r\n * It uses an arbitrary setup to ensure a code path not followed in the registration test\r\n * is traversed.\r\n */\r\nvoid testAbstractBeanProviderCoverage() throws Exception {\r\n    final ConstantConfig constantConfig = new ConstantConfig();\r\n    final String expectedUnknownHandler = \"expectedUnknownHandler\";\r\n    StrutsJavaConfiguration javaConfig = new StrutsJavaConfiguration() {\r\n\r\n        @Override\r\n        public List<String> unknownHandlerStack() {\r\n            return Collections.singletonList(expectedUnknownHandler);\r\n        }\r\n\r\n        @Override\r\n        public List<ConstantConfig> constants() {\r\n            return Collections.singletonList(constantConfig);\r\n        }\r\n\r\n        @Override\r\n        public List<BeanConfig> beans() {\r\n            return Arrays.asList(new BeanConfig(TestBean.class, \"struts\"));\r\n        }\r\n\r\n        @Override\r\n        public Optional<BeanSelectionConfig> beanSelection() {\r\n            return Optional.of(new BeanSelectionConfig(TestBeanSelectionProvider.class, \"testBeans\"));\r\n        }\r\n    };\r\n    StrutsJavaConfigurationProvider provider = new StrutsJavaConfigurationProvider(javaConfig);\r\n    Configuration configuration = new MockConfiguration();\r\n    ContainerBuilder builder = new ContainerBuilder();\r\n    LocatableProperties props = new LocatableProperties();\r\n    provider.init(configuration);\r\n    provider.register(builder, props);\r\n    props.put(CodeCoverageTestClass1.ALIAS_KEY, CodeCoverageTestClass1.ALIAS_VALUE);\r\n    TestBeanSelectionProvider testBeanSelectionProvider = new TestBeanSelectionProvider();\r\n    testBeanSelectionProvider.aliasCallCoverage(CodeCoverageTestClass1.class, builder, props, CodeCoverageTestClass1.ALIAS_KEY, Scope.THREAD);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\core\\src\\test\\java\\org\\apache\\struts2\\conversion\\UploadedFileConverterTest.java",
  "methodName" : "convertUploadedFileToFile",
  "sourceCode" : "@Test\r\npublic void convertUploadedFileToFile() {\r\n    // given\r\n    UploadedFileConverter ufc = new UploadedFileConverter();\r\n    UploadedFile uploadedFile = StrutsUploadedFile.Builder.create(tempFile).withContentType(this.contentType).withOriginalName(this.originalName).build();\r\n    // when\r\n    Object result = ufc.convertValue(context, target, member, propertyName, uploadedFile, File.class);\r\n    // then\r\n    assertThat(result).isInstanceOf(File.class);\r\n    File file = (File) result;\r\n    assertThat(file.length()).isEqualTo(tempFile.length());\r\n    assertThat(file.getAbsolutePath()).isEqualTo(tempFile.getAbsolutePath());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\core\\src\\test\\java\\org\\apache\\struts2\\conversion\\UploadedFileConverterTest.java",
  "methodName" : "convertUploadedFileArrayToFile",
  "sourceCode" : "@Test\r\npublic void convertUploadedFileArrayToFile() {\r\n    // given\r\n    UploadedFileConverter ufc = new UploadedFileConverter();\r\n    UploadedFile[] uploadedFile = new UploadedFile[] { StrutsUploadedFile.Builder.create(tempFile).withContentType(this.contentType).withOriginalName(this.originalName).build() };\r\n    // when\r\n    Object result = ufc.convertValue(context, target, member, propertyName, uploadedFile, File.class);\r\n    // then\r\n    assertThat(result).isInstanceOf(File.class);\r\n    File file = (File) result;\r\n    assertThat(file.length()).isEqualTo(tempFile.length());\r\n    assertThat(file.getAbsolutePath()).isEqualTo(tempFile.getAbsolutePath());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\core\\src\\test\\java\\org\\apache\\struts2\\DefaultActionProxyTest.java",
  "methodName" : "testThorwExceptionOnNotAllowedMethod",
  "sourceCode" : "@Test\r\npublic void testThorwExceptionOnNotAllowedMethod() throws Exception {\r\n    final String filename = \"org/apache/struts2/config/providers/xwork-test-allowed-methods.xml\";\r\n    loadConfigurationProviders(new StrutsXmlConfigurationProvider(filename));\r\n    DefaultActionProxy dap = new DefaultActionProxy(new MockActionInvocation(), \"strict\", \"Default\", \"notAllowed\", true, true);\r\n    container.inject(dap);\r\n    try {\r\n        dap.prepare();\r\n        fail(\"Must throw exception!\");\r\n    } catch (Exception e) {\r\n        assertEquals(e.getMessage(), \"Method notAllowed for action Default is not allowed!\");\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\core\\src\\test\\java\\org\\apache\\struts2\\dispatcher\\ApplicationMapTest.java",
  "methodName" : "shouldRetrieveAttribute",
  "sourceCode" : "@Test\r\npublic void shouldRetrieveAttribute() {\r\n    // given\r\n    ServletContext context = new MockServletContext();\r\n    context.setAttribute(\"attr\", \"value\");\r\n    // when\r\n    ApplicationMap am = new ApplicationMap(context);\r\n    Object value = am.get(\"attr\");\r\n    // then\r\n    assertEquals(\"value\", value);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\core\\src\\test\\java\\org\\apache\\struts2\\dispatcher\\ApplicationMapTest.java",
  "methodName" : "shouldReturnNullIfKeyIsNull",
  "sourceCode" : "@Test\r\npublic void shouldReturnNullIfKeyIsNull() {\r\n    // given\r\n    ServletContext context = new MockServletContext();\r\n    // when\r\n    ApplicationMap am = new ApplicationMap(context);\r\n    Object value = am.get(null);\r\n    // then\r\n    assertNull(value);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\core\\src\\test\\java\\org\\apache\\struts2\\dispatcher\\ApplicationMapTest.java",
  "methodName" : "shouldRemoveAttributeFromServletContext",
  "sourceCode" : "@Test\r\npublic void shouldRemoveAttributeFromServletContext() {\r\n    // given\r\n    ServletContext context = new MockServletContext();\r\n    context.setAttribute(\"attr\", \"value\");\r\n    // when\r\n    ApplicationMap am = new ApplicationMap(context);\r\n    Object value = am.remove(\"attr\");\r\n    // then\r\n    assertEquals(\"value\", value);\r\n    assertNull(context.getAttribute(\"attr\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\core\\src\\test\\java\\org\\apache\\struts2\\dispatcher\\ApplicationMapTest.java",
  "methodName" : "shouldClearAttributes",
  "sourceCode" : "@Test\r\npublic void shouldClearAttributes() {\r\n    // given\r\n    ServletContext context = new MockServletContext();\r\n    context.setAttribute(\"attr\", \"value\");\r\n    // when\r\n    ApplicationMap am = new ApplicationMap(context);\r\n    Object value = am.get(\"attr\");\r\n    // then\r\n    assertEquals(\"value\", value);\r\n    // when\r\n    am.clear();\r\n    // then\r\n    assertNull(context.getAttribute(\"attr\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\core\\src\\test\\java\\org\\apache\\struts2\\dispatcher\\AttributeMapTest.java",
  "methodName" : "shouldRetrievePageContextAttribute",
  "sourceCode" : "@Test\r\npublic void shouldRetrievePageContextAttribute() {\r\n    // given\r\n    PageContext pc = new MockPageContext();\r\n    pc.setAttribute(\"attr\", \"value\");\r\n    Map<String, Object> context = new HashMap<String, Object>() {\r\n\r\n        {\r\n            put(StrutsStatics.PAGE_CONTEXT, pc);\r\n        }\r\n    };\r\n    // when\r\n    AttributeMap am = new AttributeMap(context);\r\n    Object value = am.get(\"attr\");\r\n    // then\r\n    assertEquals(\"value\", value);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\core\\src\\test\\java\\org\\apache\\struts2\\dispatcher\\AttributeMapTest.java",
  "methodName" : "shouldPutAttribute",
  "sourceCode" : "@Test\r\npublic void shouldPutAttribute() {\r\n    // given\r\n    PageContext pc = new MockPageContext();\r\n    Map<String, Object> context = new HashMap<String, Object>() {\r\n\r\n        {\r\n            put(StrutsStatics.PAGE_CONTEXT, pc);\r\n        }\r\n    };\r\n    // when\r\n    AttributeMap am = new AttributeMap(context);\r\n    Object value = am.put(\"attr\", \"value\");\r\n    // then\r\n    assertEquals(\"value\", value);\r\n    assertEquals(\"value\", pc.getAttribute(\"attr\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\core\\src\\test\\java\\org\\apache\\struts2\\dispatcher\\AttributeMapTest.java",
  "methodName" : "shouldRetrieveRequestAttribute",
  "sourceCode" : "@Test\r\npublic void shouldRetrieveRequestAttribute() {\r\n    // given\r\n    HttpServletRequest request = new MockHttpServletRequest();\r\n    request.setAttribute(\"attr\", \"value\");\r\n    Map<String, Object> context = new HashMap<String, Object>() {\r\n\r\n        {\r\n            put(DispatcherConstants.REQUEST, new RequestMap(request));\r\n        }\r\n    };\r\n    // when\r\n    AttributeMap am = new AttributeMap(context);\r\n    Object value = am.get(\"attr\");\r\n    // then\r\n    assertEquals(\"value\", value);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\core\\src\\test\\java\\org\\apache\\struts2\\dispatcher\\AttributeMapTest.java",
  "methodName" : "shouldRetrieveSessionAttribute",
  "sourceCode" : "@Test\r\npublic void shouldRetrieveSessionAttribute() {\r\n    // given\r\n    HttpSession session = new MockHttpSession();\r\n    session.setAttribute(\"attr\", \"value\");\r\n    MockHttpServletRequest request = new MockHttpServletRequest();\r\n    request.setSession(session);\r\n    Map<String, Object> context = new HashMap<String, Object>() {\r\n\r\n        {\r\n            put(DispatcherConstants.SESSION, new SessionMap(request));\r\n        }\r\n    };\r\n    // when\r\n    AttributeMap am = new AttributeMap(context);\r\n    Object value = am.get(\"attr\");\r\n    // then\r\n    assertEquals(\"value\", value);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\core\\src\\test\\java\\org\\apache\\struts2\\dispatcher\\AttributeMapTest.java",
  "methodName" : "shouldRetrieveApplicationAttribute",
  "sourceCode" : "@Test\r\npublic void shouldRetrieveApplicationAttribute() {\r\n    // given\r\n    ServletContext sc = new MockServletContext();\r\n    sc.setAttribute(\"attr\", \"value\");\r\n    Map<String, Object> context = new HashMap<String, Object>() {\r\n\r\n        {\r\n            put(DispatcherConstants.APPLICATION, new ApplicationMap(sc));\r\n        }\r\n    };\r\n    // when\r\n    AttributeMap am = new AttributeMap(context);\r\n    Object value = am.get(\"attr\");\r\n    // then\r\n    assertEquals(\"value\", value);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\core\\src\\test\\java\\org\\apache\\struts2\\dispatcher\\AttributeMapTest.java",
  "methodName" : "shouldReturnNullIfKeyIsNull",
  "sourceCode" : "@Test\r\npublic void shouldReturnNullIfKeyIsNull() {\r\n    // given\r\n    // when\r\n    AttributeMap am = new AttributeMap(new HashMap<>());\r\n    Object value = am.get(null);\r\n    // then\r\n    assertNull(value);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\core\\src\\test\\java\\org\\apache\\struts2\\dispatcher\\AttributeMapTest.java",
  "methodName" : "shouldThrowExceptionOnRemove",
  "sourceCode" : "@Test\r\npublic void shouldThrowExceptionOnRemove() {\r\n    // given\r\n    PageContext pc = new MockPageContext();\r\n    pc.setAttribute(\"attr\", \"value\");\r\n    Map<String, Object> context = new HashMap<String, Object>() {\r\n\r\n        {\r\n            put(StrutsStatics.PAGE_CONTEXT, pc);\r\n        }\r\n    };\r\n    // when\r\n    AttributeMap am = new AttributeMap(context);\r\n    // then\r\n    Object value = am.get(\"attr\");\r\n    assertEquals(\"value\", value);\r\n    assertThrows(UnsupportedOperationException.class, () -> am.remove(\"attr\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\core\\src\\test\\java\\org\\apache\\struts2\\dispatcher\\AttributeMapTest.java",
  "methodName" : "shouldThrowExceptionOnClear",
  "sourceCode" : "@Test\r\npublic void shouldThrowExceptionOnClear() {\r\n    // given\r\n    PageContext pc = new MockPageContext();\r\n    pc.setAttribute(\"attr\", \"value\");\r\n    Map<String, Object> context = new HashMap<String, Object>() {\r\n\r\n        {\r\n            put(StrutsStatics.PAGE_CONTEXT, pc);\r\n        }\r\n    };\r\n    // when\r\n    AttributeMap am = new AttributeMap(context);\r\n    Object value = am.get(\"attr\");\r\n    // then\r\n    assertEquals(\"value\", value);\r\n    // when\r\n    assertThrows(UnsupportedOperationException.class, am::clear);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\core\\src\\test\\java\\org\\apache\\struts2\\dispatcher\\AttributeMapTest.java",
  "methodName" : "shouldThrowExceptionOnIsEmpty",
  "sourceCode" : "@Test\r\npublic void shouldThrowExceptionOnIsEmpty() {\r\n    // given\r\n    PageContext pc = new MockPageContext();\r\n    pc.setAttribute(\"attr\", \"value\");\r\n    Map<String, Object> context = new HashMap<String, Object>() {\r\n\r\n        {\r\n            put(StrutsStatics.PAGE_CONTEXT, pc);\r\n        }\r\n    };\r\n    // when\r\n    AttributeMap am = new AttributeMap(context);\r\n    Object value = am.get(\"attr\");\r\n    // then\r\n    assertEquals(\"value\", value);\r\n    // when\r\n    assertThrows(UnsupportedOperationException.class, am::isEmpty);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\core\\src\\test\\java\\org\\apache\\struts2\\dispatcher\\AttributeMapTest.java",
  "methodName" : "shouldThrowExceptionOnContainsValue",
  "sourceCode" : "@Test\r\npublic void shouldThrowExceptionOnContainsValue() {\r\n    // given\r\n    PageContext pc = new MockPageContext();\r\n    pc.setAttribute(\"attr\", \"value\");\r\n    Map<String, Object> context = new HashMap<String, Object>() {\r\n\r\n        {\r\n            put(StrutsStatics.PAGE_CONTEXT, pc);\r\n        }\r\n    };\r\n    // when\r\n    AttributeMap am = new AttributeMap(context);\r\n    Object value = am.get(\"attr\");\r\n    // then\r\n    assertEquals(\"value\", value);\r\n    // when\r\n    assertThrows(UnsupportedOperationException.class, () -> am.containsValue(\"attr\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\core\\src\\test\\java\\org\\apache\\struts2\\dispatcher\\AttributeMapTest.java",
  "methodName" : "shouldThrowExceptionOnPutAll",
  "sourceCode" : "@Test\r\npublic void shouldThrowExceptionOnPutAll() {\r\n    // given\r\n    PageContext pc = new MockPageContext();\r\n    pc.setAttribute(\"attr\", \"value\");\r\n    Map<String, Object> context = new HashMap<String, Object>() {\r\n\r\n        {\r\n            put(StrutsStatics.PAGE_CONTEXT, pc);\r\n        }\r\n    };\r\n    Map<String, Object> values = Collections.emptyMap();\r\n    // when\r\n    AttributeMap am = new AttributeMap(context);\r\n    Object value = am.get(\"attr\");\r\n    // then\r\n    assertEquals(\"value\", value);\r\n    // when\r\n    assertThrows(UnsupportedOperationException.class, () -> am.putAll(values));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\core\\src\\test\\java\\org\\apache\\struts2\\dispatcher\\AttributeMapTest.java",
  "methodName" : "shouldThrowExceptionOnKeySet",
  "sourceCode" : "@Test\r\npublic void shouldThrowExceptionOnKeySet() {\r\n    // given\r\n    PageContext pc = new MockPageContext();\r\n    pc.setAttribute(\"attr\", \"value\");\r\n    Map<String, Object> context = new HashMap<String, Object>() {\r\n\r\n        {\r\n            put(StrutsStatics.PAGE_CONTEXT, pc);\r\n        }\r\n    };\r\n    // when\r\n    AttributeMap am = new AttributeMap(context);\r\n    Object value = am.get(\"attr\");\r\n    // then\r\n    assertEquals(\"value\", value);\r\n    // when\r\n    assertEquals(am.keySet(), context.keySet());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\core\\src\\test\\java\\org\\apache\\struts2\\dispatcher\\AttributeMapTest.java",
  "methodName" : "shouldThrowExceptionOnSize",
  "sourceCode" : "@Test\r\npublic void shouldThrowExceptionOnSize() {\r\n    // given\r\n    PageContext pc = new MockPageContext();\r\n    pc.setAttribute(\"attr\", \"value\");\r\n    Map<String, Object> context = new HashMap<String, Object>() {\r\n\r\n        {\r\n            put(StrutsStatics.PAGE_CONTEXT, pc);\r\n        }\r\n    };\r\n    // when\r\n    AttributeMap am = new AttributeMap(context);\r\n    Object value = am.get(\"attr\");\r\n    // then\r\n    assertEquals(\"value\", value);\r\n    // when\r\n    assertThrows(UnsupportedOperationException.class, am::size);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\core\\src\\test\\java\\org\\apache\\struts2\\dispatcher\\AttributeMapTest.java",
  "methodName" : "shouldGetAllValues",
  "sourceCode" : "@Test\r\npublic void shouldGetAllValues() {\r\n    // given\r\n    PageContext pc = new MockPageContext();\r\n    pc.setAttribute(\"attr\", \"value\");\r\n    Map<String, Object> context = new HashMap<String, Object>() {\r\n\r\n        {\r\n            put(StrutsStatics.PAGE_CONTEXT, pc);\r\n        }\r\n    };\r\n    // when\r\n    AttributeMap am = new AttributeMap(context);\r\n    Object value = am.get(\"attr\");\r\n    // then\r\n    assertEquals(\"value\", value);\r\n    // when\r\n    Collection<Object> values = am.values();\r\n    // then\r\n    assertThat(values, hasItem(pc));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\core\\src\\test\\java\\org\\apache\\struts2\\dispatcher\\AttributeMapTest.java",
  "methodName" : "shouldGetEntrySet",
  "sourceCode" : "@Test\r\npublic void shouldGetEntrySet() {\r\n    // given\r\n    PageContext pc = new MockPageContext();\r\n    pc.setAttribute(\"attr\", \"value\");\r\n    Map<String, Object> context = new HashMap<String, Object>() {\r\n\r\n        {\r\n            put(StrutsStatics.PAGE_CONTEXT, pc);\r\n        }\r\n    };\r\n    // when\r\n    AttributeMap am = new AttributeMap(context);\r\n    Object value = am.get(\"attr\");\r\n    // then\r\n    assertEquals(\"value\", value);\r\n    // then\r\n    assertEquals(context.entrySet(), am.entrySet());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\core\\src\\test\\java\\org\\apache\\struts2\\dispatcher\\AttributeMapTest.java",
  "methodName" : "shouldContainsKey",
  "sourceCode" : "@Test\r\npublic void shouldContainsKey() {\r\n    // given\r\n    PageContext pc = new MockPageContext();\r\n    pc.setAttribute(\"attr\", \"value\");\r\n    Map<String, Object> context = new HashMap<String, Object>() {\r\n\r\n        {\r\n            put(StrutsStatics.PAGE_CONTEXT, pc);\r\n        }\r\n    };\r\n    // when\r\n    AttributeMap am = new AttributeMap(context);\r\n    // then\r\n    assertTrue(am.containsKey(\"attr\"));\r\n    Object value = am.get(\"attr\");\r\n    assertEquals(\"value\", value);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\core\\src\\test\\java\\org\\apache\\struts2\\dispatcher\\AttributeMapTest.java",
  "methodName" : "get_whenPageContextHasNoRequest",
  "sourceCode" : "@Test\r\npublic void get_whenPageContextHasNoRequest() {\r\n    PageContext pageContext = mock(PageContext.class);\r\n    when(pageContext.getRequest()).thenReturn(null);\r\n    var req = new MockHttpServletRequest();\r\n    req.setAttribute(\"attr\", \"reqValue\");\r\n    var attributeMap = new AttributeMap(Map.of(StrutsStatics.PAGE_CONTEXT, pageContext, DispatcherConstants.REQUEST, new RequestMap(req)));\r\n    assertEquals(\"reqValue\", attributeMap.get(\"attr\"));\r\n    verify(pageContext, never()).findAttribute(anyString());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\core\\src\\test\\java\\org\\apache\\struts2\\dispatcher\\DispatcherTest.java",
  "methodName" : "testDefaultResourceBundlePropertyLoaded",
  "sourceCode" : "@Test\r\npublic void testDefaultResourceBundlePropertyLoaded() {\r\n    LocalizedTextProvider localizedTextProvider = container.getInstance(LocalizedTextProvider.class);\r\n    // some i18n messages from xwork-messages.properties\r\n    assertEquals(localizedTextProvider.findDefaultText(\"xwork.error.action.execution\", Locale.US), \"Error during Action invocation\");\r\n    // some i18n messages from struts-messages.properties\r\n    assertEquals(localizedTextProvider.findDefaultText(\"struts.messages.error.uploading\", Locale.US, new Object[] { \"some error messages\" }), \"Error uploading: some error messages\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\core\\src\\test\\java\\org\\apache\\struts2\\dispatcher\\DispatcherTest.java",
  "methodName" : "testPrepareSetEncodingProperly",
  "sourceCode" : "@Test\r\npublic void testPrepareSetEncodingProperly() {\r\n    HttpServletRequest req = new MockHttpServletRequest();\r\n    HttpServletResponse res = new MockHttpServletResponse();\r\n    initDispatcher(singletonMap(StrutsConstants.STRUTS_I18N_ENCODING, UTF_8.name()));\r\n    dispatcher.prepare(req, res);\r\n    assertEquals(req.getCharacterEncoding(), UTF_8.name());\r\n    assertEquals(res.getCharacterEncoding(), UTF_8.name());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\core\\src\\test\\java\\org\\apache\\struts2\\dispatcher\\DispatcherTest.java",
  "methodName" : "testEncodingForXMLHttpRequest",
  "sourceCode" : "@Test\r\npublic void testEncodingForXMLHttpRequest() {\r\n    // given\r\n    MockHttpServletRequest req = new MockHttpServletRequest();\r\n    req.addHeader(\"X-Requested-With\", \"XMLHttpRequest\");\r\n    req.setCharacterEncoding(UTF_8.name());\r\n    HttpServletResponse res = new MockHttpServletResponse();\r\n    initDispatcher(singletonMap(StrutsConstants.STRUTS_I18N_ENCODING, StandardCharsets.ISO_8859_1.name()));\r\n    // when\r\n    dispatcher.prepare(req, res);\r\n    // then\r\n    assertEquals(req.getCharacterEncoding(), UTF_8.name());\r\n    assertEquals(res.getCharacterEncoding(), UTF_8.name());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\core\\src\\test\\java\\org\\apache\\struts2\\dispatcher\\DispatcherTest.java",
  "methodName" : "testSetEncodingIfDiffer",
  "sourceCode" : "@Test\r\npublic void testSetEncodingIfDiffer() {\r\n    // given\r\n    HttpServletRequest req = mock(HttpServletRequest.class);\r\n    when(req.getCharacterEncoding()).thenReturn(UTF_8.name());\r\n    when(req.getHeader(\"X-Requested-With\")).thenReturn(\"\");\r\n    HttpServletResponse res = new MockHttpServletResponse();\r\n    initDispatcher(singletonMap(StrutsConstants.STRUTS_I18N_ENCODING, UTF_8.name()));\r\n    // when\r\n    dispatcher.prepare(req, res);\r\n    // then\r\n    assertEquals(UTF_8.name(), req.getCharacterEncoding());\r\n    assertEquals(UTF_8.name(), res.getCharacterEncoding());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\core\\src\\test\\java\\org\\apache\\struts2\\dispatcher\\DispatcherTest.java",
  "methodName" : "testPrepareSetEncodingPropertyWithMultipartRequest",
  "sourceCode" : "@Test\r\npublic void testPrepareSetEncodingPropertyWithMultipartRequest() {\r\n    MockHttpServletRequest req = new MockHttpServletRequest();\r\n    MockHttpServletResponse res = new MockHttpServletResponse();\r\n    req.setContentType(\"multipart/form-data\");\r\n    initDispatcher(singletonMap(StrutsConstants.STRUTS_I18N_ENCODING, UTF_8.name()));\r\n    dispatcher.prepare(req, res);\r\n    assertEquals(UTF_8.name(), req.getCharacterEncoding());\r\n    assertEquals(UTF_8.name(), res.getCharacterEncoding());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\core\\src\\test\\java\\org\\apache\\struts2\\dispatcher\\DispatcherTest.java",
  "methodName" : "testPrepareMultipartRequest",
  "sourceCode" : "@Test\r\npublic void testPrepareMultipartRequest() throws Exception {\r\n    MockHttpServletRequest req = new MockHttpServletRequest();\r\n    MockHttpServletResponse res = new MockHttpServletResponse();\r\n    req.setMethod(\"post\");\r\n    req.setContentType(\"multipart/form-data; boundary=asdcvb345asd\");\r\n    dispatcher.prepare(req, res);\r\n    assertTrue(dispatcher.wrapRequest(req) instanceof MultiPartRequestWrapper);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\core\\src\\test\\java\\org\\apache\\struts2\\dispatcher\\DispatcherTest.java",
  "methodName" : "testPrepareMultipartRequestAllAllowedCharacters",
  "sourceCode" : "@Test\r\npublic void testPrepareMultipartRequestAllAllowedCharacters() throws Exception {\r\n    MockHttpServletRequest req = new MockHttpServletRequest();\r\n    MockHttpServletResponse res = new MockHttpServletResponse();\r\n    req.setMethod(\"post\");\r\n    req.setContentType(\"multipart/form-data; boundary=01=23a.bC:D((e)d'z?p+o_r,e-\");\r\n    dispatcher.prepare(req, res);\r\n    assertTrue(dispatcher.wrapRequest(req) instanceof MultiPartRequestWrapper);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\core\\src\\test\\java\\org\\apache\\struts2\\dispatcher\\DispatcherTest.java",
  "methodName" : "testPrepareMultipartRequestIllegalCharacter",
  "sourceCode" : "@Test\r\npublic void testPrepareMultipartRequestIllegalCharacter() throws Exception {\r\n    MockHttpServletRequest req = new MockHttpServletRequest();\r\n    MockHttpServletResponse res = new MockHttpServletResponse();\r\n    req.setMethod(\"post\");\r\n    req.setContentType(\"multipart/form-data; boundary=01=2;3a.bC:D((e)d'z?p+o_r,e-\");\r\n    dispatcher.prepare(req, res);\r\n    assertFalse(dispatcher.wrapRequest(req) instanceof MultiPartRequestWrapper);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\core\\src\\test\\java\\org\\apache\\struts2\\dispatcher\\DispatcherTest.java",
  "methodName" : "testDispatcherListener",
  "sourceCode" : "@Test\r\npublic void testDispatcherListener() {\r\n    final DispatcherListenerState state = new DispatcherListenerState();\r\n    Dispatcher.addDispatcherListener(new DispatcherListener() {\r\n\r\n        public void dispatcherDestroyed(Dispatcher du) {\r\n            state.isDestroyed = true;\r\n        }\r\n\r\n        public void dispatcherInitialized(Dispatcher du) {\r\n            state.isInitialized = true;\r\n        }\r\n    });\r\n    assertFalse(state.isDestroyed);\r\n    assertFalse(state.isInitialized);\r\n    dispatcher.init();\r\n    assertTrue(state.isInitialized);\r\n    dispatcher.cleanup();\r\n    assertTrue(state.isDestroyed);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\core\\src\\test\\java\\org\\apache\\struts2\\dispatcher\\DispatcherTest.java",
  "methodName" : "testConfigurationManager",
  "sourceCode" : "@Test\r\npublic void testConfigurationManager() {\r\n    configurationManager = spy(new ConfigurationManager(Container.DEFAULT_NAME));\r\n    dispatcher = spyDispatcherWithConfigurationManager(new Dispatcher(new MockServletContext(), emptyMap()), configurationManager);\r\n    dispatcher.init();\r\n    verify(configurationManager, never()).destroyConfiguration();\r\n    dispatcher.cleanup();\r\n    verify(configurationManager).destroyConfiguration();\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\core\\src\\test\\java\\org\\apache\\struts2\\dispatcher\\DispatcherTest.java",
  "methodName" : "testInitLoadsDefaultConfig",
  "sourceCode" : "@Test\r\npublic void testInitLoadsDefaultConfig() {\r\n    assertNotNull(configuration);\r\n    Set<String> expected = new HashSet<>();\r\n    expected.add(\"struts-default.xml\");\r\n    expected.add(\"struts-beans.xml\");\r\n    expected.add(\"struts-excluded-classes.xml\");\r\n    expected.add(\"struts-plugin.xml\");\r\n    expected.add(\"struts.xml\");\r\n    expected.add(\"struts-deferred.xml\");\r\n    assertEquals(expected, configuration.getLoadedFileNames());\r\n    assertFalse(configuration.getPackageConfigs().isEmpty());\r\n    PackageConfig packageConfig = configuration.getPackageConfig(\"struts-default\");\r\n    assertFalse(packageConfig.getInterceptorConfigs().isEmpty());\r\n    assertFalse(packageConfig.getResultTypeConfigs().isEmpty());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\core\\src\\test\\java\\org\\apache\\struts2\\dispatcher\\DispatcherTest.java",
  "methodName" : "testObjectFactoryDestroy",
  "sourceCode" : "@Test\r\npublic void testObjectFactoryDestroy() {\r\n    InnerDestroyableObjectFactory destroyedObjectFactory = new InnerDestroyableObjectFactory();\r\n    dispatcher.setObjectFactory(destroyedObjectFactory);\r\n    assertFalse(destroyedObjectFactory.destroyed);\r\n    dispatcher.cleanup();\r\n    assertTrue(destroyedObjectFactory.destroyed);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\core\\src\\test\\java\\org\\apache\\struts2\\dispatcher\\DispatcherTest.java",
  "methodName" : "testInterceptorDestroy",
  "sourceCode" : "@Test\r\npublic void testInterceptorDestroy() {\r\n    Interceptor mockedInterceptor = mock(Interceptor.class);\r\n    InterceptorMapping interceptorMapping = new InterceptorMapping(\"test\", mockedInterceptor);\r\n    InterceptorStackConfig isc = new InterceptorStackConfig.Builder(\"test\").addInterceptor(interceptorMapping).build();\r\n    PackageConfig packageConfig = new PackageConfig.Builder(\"test\").addInterceptorStackConfig(isc).build();\r\n    configurationManager = spy(new ConfigurationManager(Container.DEFAULT_NAME));\r\n    dispatcher = spyDispatcherWithConfigurationManager(new Dispatcher(new MockServletContext(), emptyMap()), configurationManager);\r\n    dispatcher.init();\r\n    configuration = spy(configurationManager.getConfiguration());\r\n    configurationManager.setConfiguration(configuration);\r\n    when(configuration.getPackageConfigs()).thenReturn(singletonMap(\"test\", packageConfig));\r\n    dispatcher.cleanup();\r\n    verify(mockedInterceptor).destroy();\r\n    verify(configuration).destroy();\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\core\\src\\test\\java\\org\\apache\\struts2\\dispatcher\\DispatcherTest.java",
  "methodName" : "testMultipartSupportEnabledByDefault",
  "sourceCode" : "@Test\r\npublic void testMultipartSupportEnabledByDefault() {\r\n    HttpServletRequest req = new MockHttpServletRequest();\r\n    HttpServletResponse res = new MockHttpServletResponse();\r\n    dispatcher.prepare(req, res);\r\n    assertTrue(dispatcher.isMultipartSupportEnabled(req));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\core\\src\\test\\java\\org\\apache\\struts2\\dispatcher\\DispatcherTest.java",
  "methodName" : "testIsMultipartRequest",
  "sourceCode" : "@Test\r\npublic void testIsMultipartRequest() {\r\n    MockHttpServletRequest req = new MockHttpServletRequest();\r\n    HttpServletResponse res = new MockHttpServletResponse();\r\n    req.setMethod(\"POST\");\r\n    dispatcher.prepare(req, res);\r\n    req.setContentType(\"multipart/form-data\");\r\n    assertTrue(dispatcher.isMultipartRequest(req));\r\n    req.setContentType(\"multipart/form-data; boundary=---------------------------207103069210263\");\r\n    assertTrue(dispatcher.isMultipartRequest(req));\r\n    req.setContentType(\"multipart/form-data; boundary=---------------------------207103069210263;charset=UTF-8\");\r\n    assertTrue(dispatcher.isMultipartRequest(req));\r\n    req.setContentType(\"multipart/form-data; boundary=---------------------------207103069210263;charset=ISO-8859-1\");\r\n    assertTrue(dispatcher.isMultipartRequest(req));\r\n    req.setContentType(\"multipart/form-data; boundary=---------------------------207103069210263;charset=Windows-1250\");\r\n    assertTrue(dispatcher.isMultipartRequest(req));\r\n    req.setContentType(\"multipart/form-data; boundary=---------------------------207103069210263;charset=US-ASCII\");\r\n    assertTrue(dispatcher.isMultipartRequest(req));\r\n    req.setContentType(\"multipart/form-data; boundary=---------------------------207103069210263;charset=UTF-16LE\");\r\n    assertTrue(dispatcher.isMultipartRequest(req));\r\n    req.setContentType(\"multipart/form-data;boundary=---------------------------207103069210263;charset=UTF-16LE\");\r\n    assertTrue(dispatcher.isMultipartRequest(req));\r\n    req.setContentType(\"multipart/form-data;boundary=---------------------------207103069210263; charset=UTF-16LE\");\r\n    assertTrue(dispatcher.isMultipartRequest(req));\r\n    req.setContentType(\"multipart/form-data;boundary=---------------------------207103069210263 ;charset=UTF-16LE\");\r\n    assertTrue(dispatcher.isMultipartRequest(req));\r\n    req.setContentType(\"multipart/form-data;boundary=---------------------------207103069210263 ; charset=UTF-16LE\");\r\n    assertTrue(dispatcher.isMultipartRequest(req));\r\n    req.setContentType(\"multipart/form-data ;boundary=---------------------------207103069210263;charset=UTF-16LE\");\r\n    assertTrue(dispatcher.isMultipartRequest(req));\r\n    req.setContentType(\"multipart/form-data ; boundary=---------------------------207103069210263;charset=UTF-16LE\");\r\n    assertTrue(dispatcher.isMultipartRequest(req));\r\n    req.setContentType(\"Multipart/Form-Data ; boundary=---------------------------207103069210263;charset=UTF-16LE\");\r\n    assertTrue(dispatcher.isMultipartRequest(req));\r\n    req.setContentType(\"multipart/form-data; boundary=\\\"----=_Part_38_1092302434.1734807780737\\\"\");\r\n    assertTrue(dispatcher.isMultipartRequest(req));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\core\\src\\test\\java\\org\\apache\\struts2\\dispatcher\\DispatcherTest.java",
  "methodName" : "testServiceActionResumePreviousProxy",
  "sourceCode" : "@Test\r\npublic void testServiceActionResumePreviousProxy() throws Exception {\r\n    MockActionInvocation mai = new MockActionInvocation();\r\n    ActionContext.getContext().withActionInvocation(mai);\r\n    MockActionProxy actionProxy = new MockActionProxy();\r\n    actionProxy.setInvocation(mai);\r\n    mai.setProxy(actionProxy);\r\n    mai.setStack(new StubValueStack());\r\n    HttpServletRequest req = new MockHttpServletRequest();\r\n    req.setAttribute(ServletActionContext.STRUTS_VALUESTACK_KEY, mai.getStack());\r\n    assertFalse(actionProxy.isExecutedCalled());\r\n    dispatcher.setDevMode(\"false\");\r\n    dispatcher.setHandleException(\"false\");\r\n    dispatcher.serviceAction(req, null, new ActionMapping());\r\n    assertTrue(\"should execute previous proxy\", actionProxy.isExecutedCalled());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\core\\src\\test\\java\\org\\apache\\struts2\\dispatcher\\DispatcherTest.java",
  "methodName" : "testServiceActionCreatesNewProxyIfDifferentMapping",
  "sourceCode" : "@Test\r\npublic void testServiceActionCreatesNewProxyIfDifferentMapping() throws Exception {\r\n    MockActionInvocation mai = new MockActionInvocation();\r\n    ActionContext.getContext().withActionInvocation(mai);\r\n    MockActionProxy previousActionProxy = new MockActionProxy();\r\n    previousActionProxy.setActionName(\"first-action\");\r\n    previousActionProxy.setNamespace(\"namespace1\");\r\n    previousActionProxy.setInvocation(mai);\r\n    mai.setProxy(previousActionProxy);\r\n    mai.setStack(new StubValueStack());\r\n    HttpServletRequest request = new MockHttpServletRequest();\r\n    request.setAttribute(ServletActionContext.STRUTS_VALUESTACK_KEY, mai.getStack());\r\n    HttpServletResponse response = new MockHttpServletResponse();\r\n    assertFalse(previousActionProxy.isExecutedCalled());\r\n    ActionMapping newActionMapping = new ActionMapping();\r\n    newActionMapping.setName(\"hello\");\r\n    dispatcher.serviceAction(request, response, newActionMapping);\r\n    assertFalse(previousActionProxy.isExecutedCalled());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\core\\src\\test\\java\\org\\apache\\struts2\\dispatcher\\DispatcherTest.java",
  "methodName" : "testHandleException",
  "sourceCode" : "/**\r\n * Verify proper default (true) handleExceptionState for Dispatcher and that\r\n * it properly reflects a manually configured change to false.\r\n */\r\n@Test\r\npublic void testHandleException() {\r\n    assertTrue(\"Default Dispatcher handleException state not true ?\", dispatcher.isHandleException());\r\n    initDispatcher(singletonMap(StrutsConstants.STRUTS_HANDLE_EXCEPTION, \"false\"));\r\n    assertFalse(\"Modified Dispatcher handleException state not false ?\", dispatcher.isHandleException());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\core\\src\\test\\java\\org\\apache\\struts2\\dispatcher\\DispatcherTest.java",
  "methodName" : "testDevMode",
  "sourceCode" : "/**\r\n * Verify proper default (false) devMode for Dispatcher and that\r\n * it properly reflects a manually configured change to true.\r\n */\r\n@Test\r\npublic void testDevMode() {\r\n    assertFalse(\"Default Dispatcher devMode state not false ?\", dispatcher.isDevMode());\r\n    initDispatcher(singletonMap(StrutsConstants.STRUTS_DEVMODE, \"true\"));\r\n    assertTrue(\"Modified Dispatcher devMode state not true ?\", dispatcher.isDevMode());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\core\\src\\test\\java\\org\\apache\\struts2\\dispatcher\\DispatcherTest.java",
  "methodName" : "testGetLocale_With_DefaultLocale_FromConfiguration",
  "sourceCode" : "@Test\r\npublic void testGetLocale_With_DefaultLocale_FromConfiguration() {\r\n    // Given\r\n    HttpServletRequest request = mock(HttpServletRequest.class);\r\n    MockHttpSession mockHttpSession = new MockHttpSession();\r\n    when(request.getCharacterEncoding()).thenReturn(UTF_8.name());\r\n    when(request.getHeader(\"X-Requested-With\")).thenReturn(\"\");\r\n    when(request.getParameterMap()).thenReturn(emptyMap());\r\n    when(request.getSession(anyBoolean())).thenReturn(mockHttpSession);\r\n    HttpServletResponse response = new MockHttpServletResponse();\r\n    // Not setting a Struts Locale here, so we should receive the default \"de_DE\" from the test configuration.\r\n    initDispatcher(singletonMap(StrutsConstants.STRUTS_I18N_ENCODING, UTF_8.name()));\r\n    // When\r\n    dispatcher.prepare(request, response);\r\n    ActionContext context = ActionContext.of(createTestContextMap(dispatcher, request, response));\r\n    // Then\r\n    // Expect the Dispatcher defaultLocale value \"de_DE\" from the test configuration.\r\n    assertEquals(Locale.GERMANY, context.getLocale());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\core\\src\\test\\java\\org\\apache\\struts2\\dispatcher\\DispatcherTest.java",
  "methodName" : "testGetLocale_With_DefaultLocale_fr_CA",
  "sourceCode" : "@Test\r\npublic void testGetLocale_With_DefaultLocale_fr_CA() {\r\n    // Given\r\n    HttpServletRequest request = mock(HttpServletRequest.class);\r\n    MockHttpSession mockHttpSession = new MockHttpSession();\r\n    when(request.getCharacterEncoding()).thenReturn(UTF_8.name());\r\n    when(request.getHeader(\"X-Requested-With\")).thenReturn(\"\");\r\n    when(request.getParameterMap()).thenReturn(emptyMap());\r\n    when(request.getSession(anyBoolean())).thenReturn(mockHttpSession);\r\n    HttpServletResponse response = new MockHttpServletResponse();\r\n    initDispatcher(new HashMap<String, String>() {\r\n\r\n        {\r\n            put(StrutsConstants.STRUTS_I18N_ENCODING, UTF_8.name());\r\n            // Set the Dispatcher defaultLocale to fr_CA.\r\n            put(StrutsConstants.STRUTS_LOCALE, Locale.CANADA_FRENCH.toString());\r\n        }\r\n    });\r\n    // When\r\n    dispatcher.prepare(request, response);\r\n    ActionContext context = ActionContext.of(createTestContextMap(dispatcher, request, response));\r\n    // Then\r\n    // Expect the Dispatcher defaultLocale value.\r\n    assertEquals(Locale.CANADA_FRENCH, context.getLocale());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\core\\src\\test\\java\\org\\apache\\struts2\\dispatcher\\DispatcherTest.java",
  "methodName" : "testGetLocale_With_BadDefaultLocale_RequestLocale_en_UK",
  "sourceCode" : "@Test\r\npublic void testGetLocale_With_BadDefaultLocale_RequestLocale_en_UK() {\r\n    // Given\r\n    HttpServletRequest request = mock(HttpServletRequest.class);\r\n    MockHttpSession mockHttpSession = new MockHttpSession();\r\n    when(request.getCharacterEncoding()).thenReturn(UTF_8.name());\r\n    when(request.getHeader(\"X-Requested-With\")).thenReturn(\"\");\r\n    when(request.getParameterMap()).thenReturn(emptyMap());\r\n    when(request.getSession(anyBoolean())).thenReturn(mockHttpSession);\r\n    when(request.getLocale()).thenReturn(Locale.UK);\r\n    HttpServletResponse response = new MockHttpServletResponse();\r\n    initDispatcher(new HashMap<String, String>() {\r\n\r\n        {\r\n            put(StrutsConstants.STRUTS_I18N_ENCODING, UTF_8.name());\r\n            // Set Dispatcher defaultLocale to an invalid value.\r\n            put(StrutsConstants.STRUTS_LOCALE, \"This_is_not_a_valid_Locale_string\");\r\n        }\r\n    });\r\n    // When\r\n    dispatcher.prepare(request, response);\r\n    ActionContext context = ActionContext.of(createTestContextMap(dispatcher, request, response));\r\n    // Then\r\n    // Expect the request set value from Mock.\r\n    assertEquals(Locale.UK, context.getLocale());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\core\\src\\test\\java\\org\\apache\\struts2\\dispatcher\\DispatcherTest.java",
  "methodName" : "testGetLocale_With_BadDefaultLocale_And_RuntimeException",
  "sourceCode" : "@Test\r\npublic void testGetLocale_With_BadDefaultLocale_And_RuntimeException() {\r\n    // Given\r\n    HttpServletRequest request = mock(HttpServletRequest.class);\r\n    MockHttpSession mockHttpSession = new MockHttpSession();\r\n    when(request.getCharacterEncoding()).thenReturn(UTF_8.name());\r\n    when(request.getHeader(\"X-Requested-With\")).thenReturn(\"\");\r\n    when(request.getParameterMap()).thenReturn(emptyMap());\r\n    when(request.getSession(anyBoolean())).thenReturn(mockHttpSession);\r\n    when(request.getLocale()).thenReturn(Locale.UK);\r\n    HttpServletResponse response = new MockHttpServletResponse();\r\n    initDispatcher(new HashMap<String, String>() {\r\n\r\n        {\r\n            put(StrutsConstants.STRUTS_I18N_ENCODING, UTF_8.name());\r\n            // Set the Dispatcher defaultLocale to an invalid value.\r\n            put(StrutsConstants.STRUTS_LOCALE, \"This_is_not_a_valid_Locale_string\");\r\n        }\r\n    });\r\n    // When\r\n    dispatcher.prepare(request, response);\r\n    when(request.getLocale()).thenThrow(new IllegalStateException(\"Test theoretical state preventing HTTP Request Locale access\"));\r\n    ActionContext context = ActionContext.of(createTestContextMap(dispatcher, request, response));\r\n    // Then\r\n    // Expect the system default value, when BOTH Dispatcher default Locale AND request access fail.\r\n    assertEquals(Locale.getDefault(), context.getLocale());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\core\\src\\test\\java\\org\\apache\\struts2\\dispatcher\\DispatcherTest.java",
  "methodName" : "testGetLocale_With_NullDefaultLocale",
  "sourceCode" : "@Test\r\npublic void testGetLocale_With_NullDefaultLocale() {\r\n    // Given\r\n    HttpServletRequest request = mock(HttpServletRequest.class);\r\n    MockHttpSession mockHttpSession = new MockHttpSession();\r\n    when(request.getCharacterEncoding()).thenReturn(UTF_8.name());\r\n    when(request.getHeader(\"X-Requested-With\")).thenReturn(\"\");\r\n    when(request.getParameterMap()).thenReturn(emptyMap());\r\n    when(request.getSession(anyBoolean())).thenReturn(mockHttpSession);\r\n    when(request.getLocale()).thenReturn(Locale.CANADA_FRENCH);\r\n    HttpServletResponse response = new MockHttpServletResponse();\r\n    // Attempting to set StrutsConstants.STRUTS_LOCALE to null here via parameters causes an NPE.\r\n    initDispatcher(singletonMap(StrutsConstants.STRUTS_I18N_ENCODING, UTF_8.name()));\r\n    // Force a null Struts default locale, otherwise we receive the default \"de_DE\" from the test configuration.\r\n    dispatcher.setDefaultLocale(null);\r\n    // When\r\n    dispatcher.prepare(request, response);\r\n    ActionContext context = ActionContext.of(createTestContextMap(dispatcher, request, response));\r\n    // Then\r\n    // Expect the request set value from Mock.\r\n    assertEquals(Locale.CANADA_FRENCH, context.getLocale());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\core\\src\\test\\java\\org\\apache\\struts2\\dispatcher\\DispatcherTest.java",
  "methodName" : "testGetLocale_With_NullDefaultLocale_And_RuntimeException",
  "sourceCode" : "@Test\r\npublic void testGetLocale_With_NullDefaultLocale_And_RuntimeException() {\r\n    // Given\r\n    HttpServletRequest request = mock(HttpServletRequest.class);\r\n    MockHttpSession mockHttpSession = new MockHttpSession();\r\n    when(request.getCharacterEncoding()).thenReturn(UTF_8.name());\r\n    when(request.getHeader(\"X-Requested-With\")).thenReturn(\"\");\r\n    when(request.getParameterMap()).thenReturn(emptyMap());\r\n    when(request.getSession(anyBoolean())).thenReturn(mockHttpSession);\r\n    when(request.getLocale()).thenReturn(Locale.CANADA_FRENCH);\r\n    HttpServletResponse response = new MockHttpServletResponse();\r\n    // Attempting to set StrutsConstants.STRUTS_LOCALE to null via parameters causes an NPE.\r\n    initDispatcher(singletonMap(StrutsConstants.STRUTS_I18N_ENCODING, UTF_8.name()));\r\n    // Force a null Struts default locale, otherwise we receive the default \"de_DE\" from the test configuration.\r\n    dispatcher.setDefaultLocale(null);\r\n    // When\r\n    dispatcher.prepare(request, response);\r\n    when(request.getLocale()).thenThrow(new IllegalStateException(\"Test theoretical state preventing HTTP Request Locale access\"));\r\n    ActionContext context = ActionContext.of(createTestContextMap(dispatcher, request, response));\r\n    // Then\r\n    // Expect the system default value when Mock request access fails.\r\n    assertEquals(Locale.getDefault(), context.getLocale());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\core\\src\\test\\java\\org\\apache\\struts2\\dispatcher\\DispatcherTest.java",
  "methodName" : "dispatcherReinjectedAfterReload",
  "sourceCode" : "@Test\r\npublic void dispatcherReinjectedAfterReload() {\r\n    HttpServletRequest request = mock(HttpServletRequest.class);\r\n    HttpServletResponse response = mock(HttpServletResponse.class);\r\n    dispatcher.prepare(request, response);\r\n    assertEquals(Locale.GERMANY, dispatcher.getLocale(request));\r\n    configurationManager.addContainerProvider(new StubConfigurationProvider() {\r\n\r\n        @Override\r\n        public void register(ContainerBuilder builder, LocatableProperties props) throws ConfigurationException {\r\n            props.setProperty(StrutsConstants.STRUTS_LOCALE, \"fr_CA\");\r\n        }\r\n    });\r\n    configurationManager.reload();\r\n    dispatcher.cleanUpRequest(request);\r\n    dispatcher.prepare(request, response);\r\n    assertEquals(Locale.CANADA_FRENCH, dispatcher.getLocale(request));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\core\\src\\test\\java\\org\\apache\\struts2\\dispatcher\\DispatcherTest.java",
  "methodName" : "testExcludePatterns",
  "sourceCode" : "@Test\r\npublic void testExcludePatterns() {\r\n    initDispatcher(singletonMap(StrutsConstants.STRUTS_ACTION_EXCLUDE_PATTERN, \"/ns1/.*\\\\.json,/ns2/.*\\\\.json\"));\r\n    assertThat(dispatcher.getActionExcludedPatterns()).extracting(Pattern::toString).containsOnly(\"/ns1/.*\\\\.json\", \"/ns2/.*\\\\.json\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\core\\src\\test\\java\\org\\apache\\struts2\\dispatcher\\DispatcherTest.java",
  "methodName" : "testExcludePatternsUsingCustomSeparator",
  "sourceCode" : "@Test\r\npublic void testExcludePatternsUsingCustomSeparator() {\r\n    Map<String, String> props = new HashMap<>();\r\n    props.put(StrutsConstants.STRUTS_ACTION_EXCLUDE_PATTERN, \"/ns1/[a-z]{1,10}.json///ns2/[a-z]{1,10}.json\");\r\n    props.put(StrutsConstants.STRUTS_ACTION_EXCLUDE_PATTERN_SEPARATOR, \"//\");\r\n    initDispatcher(props);\r\n    assertThat(dispatcher.getActionExcludedPatterns()).extracting(Pattern::toString).containsOnly(\"/ns1/[a-z]{1,10}.json\", \"/ns2/[a-z]{1,10}.json\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\core\\src\\test\\java\\org\\apache\\struts2\\dispatcher\\HttpParametersTest.java",
  "methodName" : "shouldGetBeCaseInsensitive",
  "sourceCode" : "@Test\r\npublic void shouldGetBeCaseInsensitive() {\r\n    // given\r\n    HttpParameters params = HttpParameters.create(new HashMap<String, Object>() {\r\n\r\n        {\r\n            put(\"param1\", \"value1\");\r\n        }\r\n    }).build();\r\n    // then\r\n    assertEquals(\"value1\", params.get(\"Param1\").getValue());\r\n    assertEquals(\"value1\", params.get(\"paraM1\").getValue());\r\n    assertEquals(\"value1\", params.get(\"pAraM1\").getValue());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\core\\src\\test\\java\\org\\apache\\struts2\\dispatcher\\HttpParametersTest.java",
  "methodName" : "shouldRemoveBeCaseInsensitive",
  "sourceCode" : "@Test\r\npublic void shouldRemoveBeCaseInsensitive() {\r\n    // given\r\n    HttpParameters params = HttpParameters.create(new HashMap<String, Object>() {\r\n\r\n        {\r\n            put(\"param1\", \"value1\");\r\n        }\r\n    }).build();\r\n    // then\r\n    assertFalse(params.remove(\"Param1\").contains(\"param1\"));\r\n    assertEquals(new Parameter.Empty(\"param1\"), params.get(\"param1\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\core\\src\\test\\java\\org\\apache\\struts2\\dispatcher\\HttpParametersTest.java",
  "methodName" : "shouldAppendSameParamsIgnoringCase",
  "sourceCode" : "@Test\r\npublic void shouldAppendSameParamsIgnoringCase() {\r\n    // given\r\n    HttpParameters params = HttpParameters.create(new HashMap<String, Object>() {\r\n\r\n        {\r\n            put(\"param1\", \"value1\");\r\n        }\r\n    }).build();\r\n    // when\r\n    assertEquals(\"value1\", params.get(\"param1\").getValue());\r\n    params = params.appendAll(HttpParameters.create(new HashMap<String, String>() {\r\n\r\n        {\r\n            put(\"Param1\", \"Value1\");\r\n        }\r\n    }).build());\r\n    // then\r\n    assertTrue(params.contains(\"param1\"));\r\n    assertTrue(params.contains(\"Param1\"));\r\n    assertEquals(\"Value1\", params.get(\"param1\").getValue());\r\n    assertEquals(\"Value1\", params.get(\"Param1\").getValue());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\core\\src\\test\\java\\org\\apache\\struts2\\dispatcher\\multipart\\AbstractMultiPartRequestTest.java",
  "methodName" : "uploadedFilesToDisk",
  "sourceCode" : "@Test\r\npublic void uploadedFilesToDisk() throws IOException {\r\n    // given\r\n    String content = formFile(\"file1\", \"test1.csv\", \"1,2,3,4\") + formFile(\"file2\", \"test2.csv\", \"5,6,7,8\") + endline + \"--\" + boundary + \"--\";\r\n    mockRequest.setContent(content.getBytes(StandardCharsets.UTF_8));\r\n    assertThat(JakartaServletDiskFileUpload.isMultipartContent(mockRequest)).isTrue();\r\n    // when\r\n    // always write files into disk\r\n    multiPart.setBufferSize(\"1\");\r\n    multiPart.parse(mockRequest, tempDir);\r\n    // then\r\n    assertThat(multiPart.getErrors()).isEmpty();\r\n    assertThat(multiPart.getFileParameterNames().asIterator()).toIterable().asInstanceOf(InstanceOfAssertFactories.LIST).containsOnly(\"file1\", \"file2\");\r\n    assertThat(multiPart.getFile(\"file1\")).allSatisfy(file -> {\r\n        assertThat(file.isFile()).isTrue();\r\n        assertThat(file.getOriginalName()).isEqualTo(\"test1.csv\");\r\n        assertThat(file.getContentType()).isEqualTo(\"text/csv\");\r\n        assertThat(file.getInputName()).isEqualTo(\"file1\");\r\n        assertThat(file.getContent()).asInstanceOf(InstanceOfAssertFactories.FILE).exists().content().isEqualTo(\"1,2,3,4\");\r\n    });\r\n    assertThat(multiPart.getFile(\"file2\")).allSatisfy(file -> {\r\n        assertThat(file.isFile()).isTrue();\r\n        assertThat(file.getOriginalName()).isEqualTo(\"test2.csv\");\r\n        assertThat(file.getContentType()).isEqualTo(\"text/csv\");\r\n        assertThat(file.getInputName()).isEqualTo(\"file2\");\r\n        assertThat(file.getContent()).asInstanceOf(InstanceOfAssertFactories.FILE).exists().content().isEqualTo(\"5,6,7,8\");\r\n    });\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\core\\src\\test\\java\\org\\apache\\struts2\\dispatcher\\multipart\\AbstractMultiPartRequestTest.java",
  "methodName" : "uploadedMultipleFilesToDisk",
  "sourceCode" : "@Test\r\npublic void uploadedMultipleFilesToDisk() throws IOException {\r\n    // given\r\n    String content = formFile(\"file1\", \"test1.csv\", \"1,2,3,4\") + formFile(\"file1\", \"test2.csv\", \"5,6,7,8\") + endline + \"--\" + boundary + \"--\";\r\n    mockRequest.setContent(content.getBytes(StandardCharsets.UTF_8));\r\n    assertThat(JakartaServletDiskFileUpload.isMultipartContent(mockRequest)).isTrue();\r\n    // when\r\n    // always write files into disk\r\n    multiPart.setBufferSize(\"1\");\r\n    multiPart.parse(mockRequest, tempDir);\r\n    // then\r\n    assertThat(multiPart.getErrors()).isEmpty();\r\n    assertThat(multiPart.getFileParameterNames().asIterator()).toIterable().asInstanceOf(InstanceOfAssertFactories.LIST).containsOnly(\"file1\");\r\n    assertThat(multiPart.getFile(\"file1\")).allSatisfy(file -> {\r\n        if (Objects.equals(file.getName(), \"test1.csv\")) {\r\n            assertThat(file.isFile()).isTrue();\r\n            assertThat(file.getOriginalName()).isEqualTo(\"test1.csv\");\r\n            assertThat(file.getContentType()).isEqualTo(\"text/csv\");\r\n            assertThat(file.getInputName()).isEqualTo(\"file1\");\r\n            assertThat(file.getContent()).asInstanceOf(InstanceOfAssertFactories.FILE).exists().content().isEqualTo(\"1,2,3,4\");\r\n        }\r\n        if (Objects.equals(file.getName(), \"test2.csv\")) {\r\n            assertThat(file.isFile()).isTrue();\r\n            assertThat(file.getOriginalName()).isEqualTo(\"test2.csv\");\r\n            assertThat(file.getContentType()).isEqualTo(\"text/csv\");\r\n            assertThat(file.getInputName()).isEqualTo(\"file1\");\r\n            assertThat(file.getContent()).asInstanceOf(InstanceOfAssertFactories.FILE).exists().content().isEqualTo(\"5,6,7,8\");\r\n        }\r\n    });\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\core\\src\\test\\java\\org\\apache\\struts2\\dispatcher\\multipart\\AbstractMultiPartRequestTest.java",
  "methodName" : "uploadedFilesWithLargeBuffer",
  "sourceCode" : "@Test\r\npublic void uploadedFilesWithLargeBuffer() throws IOException {\r\n    // given\r\n    String content = formFile(\"file1\", \"test1.csv\", \"1,2,3,4\") + formFile(\"file2\", \"test2.csv\", \"5,6,7,8\") + endline + \"--\" + boundary + \"--\";\r\n    mockRequest.setContent(content.getBytes(StandardCharsets.UTF_8));\r\n    assertThat(JakartaServletDiskFileUpload.isMultipartContent(mockRequest)).isTrue();\r\n    // when\r\n    // streams files into disk using larger buffer\r\n    multiPart.setBufferSize(\"8192\");\r\n    multiPart.parse(mockRequest, tempDir);\r\n    // then\r\n    assertThat(multiPart.getErrors()).isEmpty();\r\n    assertThat(multiPart.getFileParameterNames().asIterator()).toIterable().asInstanceOf(InstanceOfAssertFactories.LIST).containsOnly(\"file1\", \"file2\");\r\n    assertThat(multiPart.getFile(\"file1\")).allSatisfy(file -> {\r\n        assertThat(file.isFile()).isTrue();\r\n        assertThat(file.getOriginalName()).isEqualTo(\"test1.csv\");\r\n        assertThat(file.getContentType()).isEqualTo(\"text/csv\");\r\n        assertThat(file.getInputName()).isEqualTo(\"file1\");\r\n        assertThat(file.getContent()).asInstanceOf(InstanceOfAssertFactories.FILE).exists().content().isEqualTo(\"1,2,3,4\");\r\n    });\r\n    assertThat(multiPart.getFile(\"file2\")).allSatisfy(file -> {\r\n        assertThat(file.isFile()).isTrue();\r\n        assertThat(file.getOriginalName()).isEqualTo(\"test2.csv\");\r\n        assertThat(file.getInputName()).isEqualTo(\"file2\");\r\n        assertThat(file.getContent()).asInstanceOf(InstanceOfAssertFactories.FILE).exists().content().isEqualTo(\"5,6,7,8\");\r\n    });\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\core\\src\\test\\java\\org\\apache\\struts2\\dispatcher\\multipart\\AbstractMultiPartRequestTest.java",
  "methodName" : "cleanUp",
  "sourceCode" : "@Test\r\npublic void cleanUp() throws IOException {\r\n    // given\r\n    String content = formFile(\"file1\", \"test1.csv\", \"1,2,3,4\") + formFile(\"file2\", \"test2.csv\", \"5,6,7,8\") + endline + \"--\" + boundary + \"--\";\r\n    mockRequest.setContent(content.getBytes(StandardCharsets.UTF_8));\r\n    assertThat(JakartaServletDiskFileUpload.isMultipartContent(mockRequest)).isTrue();\r\n    // when\r\n    multiPart.parse(mockRequest, tempDir);\r\n    // then\r\n    assertThat(multiPart.getErrors()).isEmpty();\r\n    assertThat(multiPart.getFileParameterNames().asIterator()).toIterable().asInstanceOf(InstanceOfAssertFactories.LIST).containsOnly(\"file1\", \"file2\");\r\n    assertThat(multiPart.getFile(\"file1\")).allSatisfy(file -> {\r\n        assertThat(file.isFile()).isTrue();\r\n        assertThat(file.getOriginalName()).isEqualTo(\"test1.csv\");\r\n        assertThat(file.getContentType()).isEqualTo(\"text/csv\");\r\n        assertThat(file.getInputName()).isEqualTo(\"file1\");\r\n        assertThat(file.getContent()).asInstanceOf(InstanceOfAssertFactories.FILE).exists().content().isEqualTo(\"1,2,3,4\");\r\n    });\r\n    assertThat(multiPart.getFile(\"file2\")).allSatisfy(file -> {\r\n        assertThat(file.isFile()).isTrue();\r\n        assertThat(file.getOriginalName()).isEqualTo(\"test2.csv\");\r\n        assertThat(file.getContentType()).isEqualTo(\"text/csv\");\r\n        assertThat(file.getInputName()).isEqualTo(\"file2\");\r\n        assertThat(file.getContent()).asInstanceOf(InstanceOfAssertFactories.FILE).exists().content().isEqualTo(\"5,6,7,8\");\r\n    });\r\n    List<UploadedFile> uploadedFiles = new ArrayList<>();\r\n    for (Map.Entry<String, List<UploadedFile>> entry : multiPart.uploadedFiles.entrySet()) {\r\n        uploadedFiles.addAll(entry.getValue());\r\n    }\r\n    // when\r\n    multiPart.cleanUp();\r\n    // then\r\n    assertThat(multiPart.uploadedFiles).isEmpty();\r\n    assertThat(multiPart.parameters).isEmpty();\r\n    assertThat(uploadedFiles).allSatisfy(file -> assertThat(file.getContent()).asInstanceOf(InstanceOfAssertFactories.FILE).doesNotExist());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\core\\src\\test\\java\\org\\apache\\struts2\\dispatcher\\multipart\\AbstractMultiPartRequestTest.java",
  "methodName" : "nonMultiPartUpload",
  "sourceCode" : "@Test\r\npublic void nonMultiPartUpload() throws IOException {\r\n    String content = formFile(\"file1\", \"test1.csv\", \"1,2,3,4\") + formFile(\"file2\", \"test2.csv\", \"5,6,7,8\") + endline + \"--\" + boundary + \"--\";\r\n    mockRequest.setContent(content.getBytes(StandardCharsets.UTF_8));\r\n    // given\r\n    mockRequest.setContentType(\"\");\r\n    // when\r\n    multiPart.parse(mockRequest, tempDir);\r\n    // then\r\n    assertThat(multiPart.getErrors()).map(LocalizedMessage::getTextKey).containsExactly(\"struts.messages.upload.error.FileUploadContentTypeException\");\r\n    assertThat(multiPart.getFileParameterNames().asIterator()).toIterable().asInstanceOf(InstanceOfAssertFactories.LIST).isEmpty();\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\core\\src\\test\\java\\org\\apache\\struts2\\dispatcher\\multipart\\AbstractMultiPartRequestTest.java",
  "methodName" : "maxSize",
  "sourceCode" : "@Test\r\npublic void maxSize() throws IOException {\r\n    // given\r\n    String content = formFile(\"file1\", \"test1.csv\", \"1,2,3,4\") + formFile(\"file2\", \"test2.csv\", \"5,6,7,8\") + endline + \"--\" + boundary + \"--\";\r\n    mockRequest.setContent(content.getBytes(StandardCharsets.UTF_8));\r\n    assertThat(JakartaServletDiskFileUpload.isMultipartContent(mockRequest)).isTrue();\r\n    // when\r\n    multiPart.setMaxSize(\"1\");\r\n    multiPart.parse(mockRequest, tempDir);\r\n    // then\r\n    assertThat(multiPart.uploadedFiles).isEmpty();\r\n    assertThat(multiPart.getErrors()).map(LocalizedMessage::getTextKey).containsExactly(\"struts.messages.upload.error.FileUploadSizeException\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\core\\src\\test\\java\\org\\apache\\struts2\\dispatcher\\multipart\\AbstractMultiPartRequestTest.java",
  "methodName" : "maxFilesSize",
  "sourceCode" : "@Test\r\npublic void maxFilesSize() throws IOException {\r\n    String content = formFile(\"file1\", \"test1.csv\", \"1,2,3,4\") + formFile(\"file2\", \"test2.csv\", \"5,6,7,8\") + endline + \"--\" + boundary + \"--\";\r\n    mockRequest.setContent(content.getBytes(StandardCharsets.UTF_8));\r\n    assertThat(JakartaServletDiskFileUpload.isMultipartContent(mockRequest)).isTrue();\r\n    multiPart.setMaxFileSize(\"1\");\r\n    multiPart.parse(mockRequest, tempDir);\r\n    assertThat(multiPart.getErrors()).map(LocalizedMessage::getTextKey).containsExactly(\"struts.messages.upload.error.FileUploadByteCountLimitException\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\core\\src\\test\\java\\org\\apache\\struts2\\dispatcher\\multipart\\AbstractMultiPartRequestTest.java",
  "methodName" : "maxFiles",
  "sourceCode" : "@Test\r\npublic void maxFiles() throws IOException {\r\n    String content = formFile(\"file1\", \"test1.csv\", \"1,2,3,4\") + formFile(\"file2\", \"test2.csv\", \"5,6,7,8\") + endline + \"--\" + boundary + \"--\";\r\n    mockRequest.setContent(content.getBytes(StandardCharsets.US_ASCII));\r\n    assertThat(JakartaServletDiskFileUpload.isMultipartContent(mockRequest)).isTrue();\r\n    multiPart.setMaxFiles(\"1\");\r\n    multiPart.parse(mockRequest, tempDir);\r\n    assertThat(multiPart.errors).map(LocalizedMessage::getTextKey).containsExactly(\"struts.messages.upload.error.FileUploadFileCountLimitException\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\core\\src\\test\\java\\org\\apache\\struts2\\dispatcher\\multipart\\AbstractMultiPartRequestTest.java",
  "methodName" : "maxStringLength",
  "sourceCode" : "@Test\r\npublic void maxStringLength() throws IOException {\r\n    String content = formFile(\"file1\", \"test1.csv\", \"1,2,3,4\") + formFile(\"file2\", \"test2.csv\", \"5,6,7,8\") + formField(\"longText\", \"very long text\") + formField(\"shortText\", \"short text\") + endline + \"--\" + boundary + \"--\";\r\n    mockRequest.setContent(content.getBytes(StandardCharsets.UTF_8));\r\n    assertThat(JakartaServletDiskFileUpload.isMultipartContent(mockRequest)).isTrue();\r\n    multiPart.setMaxStringLength(\"10\");\r\n    multiPart.parse(mockRequest, tempDir);\r\n    assertThat(multiPart.getErrors()).map(LocalizedMessage::getTextKey).containsExactly(\"struts.messages.upload.error.parameter.too.long\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\core\\src\\test\\java\\org\\apache\\struts2\\dispatcher\\multipart\\AbstractMultiPartRequestTest.java",
  "methodName" : "mismatchCharset",
  "sourceCode" : "@Test\r\npublic void mismatchCharset() throws IOException {\r\n    // give\r\n    String content = formFile(\"file1\", \"test1.csv\", \"Ł,Ś,Ż,Ó\") + endline + \"--\" + boundary + \"--\";\r\n    mockRequest.setContent(content.getBytes(StandardCharsets.UTF_8));\r\n    assertThat(JakartaServletDiskFileUpload.isMultipartContent(mockRequest)).isTrue();\r\n    // when\r\n    multiPart.setDefaultEncoding(StandardCharsets.ISO_8859_1.name());\r\n    multiPart.parse(mockRequest, tempDir);\r\n    // then\r\n    assertThat(multiPart.getErrors()).isEmpty();\r\n    assertThat(multiPart.getFileParameterNames().asIterator()).toIterable().asInstanceOf(InstanceOfAssertFactories.LIST).containsOnly(\"file1\");\r\n    assertThat(multiPart.getFile(\"file1\")).allSatisfy(file -> {\r\n        assertThat(file.isFile()).isTrue();\r\n        assertThat(file.getOriginalName()).isEqualTo(\"test1.csv\");\r\n        assertThat(file.getContentType()).isEqualTo(\"text/csv\");\r\n        assertThat(file.getContent()).asInstanceOf(InstanceOfAssertFactories.FILE).exists().content().isEqualTo(\"Ł,Ś,Ż,Ó\");\r\n    });\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\core\\src\\test\\java\\org\\apache\\struts2\\dispatcher\\multipart\\AbstractMultiPartRequestTest.java",
  "methodName" : "normalFields",
  "sourceCode" : "@Test\r\npublic void normalFields() throws IOException {\r\n    String content = formFile(\"file1\", \"test1.csv\", \"1,2,3,4\") + formFile(\"file2\", \"test2.csv\", \"5,6,7,8\") + formField(\"longText\", \"very long text\") + formField(\"shortText\", \"short text\") + formField(\"multi\", \"multi1\") + formField(\"multi\", \"multi2\") + endline + \"--\" + boundary + \"--\";\r\n    mockRequest.setContent(content.getBytes(StandardCharsets.UTF_8));\r\n    assertThat(JakartaServletDiskFileUpload.isMultipartContent(mockRequest)).isTrue();\r\n    multiPart.parse(mockRequest, tempDir);\r\n    assertThat(multiPart.getErrors()).isEmpty();\r\n    assertThat(multiPart.getParameterNames().asIterator()).toIterable().containsOnly(\"longText\", \"shortText\", \"multi\");\r\n    assertThat(multiPart.getParameterValues(\"longText\")).contains(\"very long text\");\r\n    assertThat(multiPart.getParameterValues(\"shortText\")).contains(\"short text\");\r\n    assertThat(multiPart.getParameter(\"longText\")).isEqualTo(\"very long text\");\r\n    assertThat(multiPart.getParameter(\"shortText\")).isEqualTo(\"short text\");\r\n    assertThat(multiPart.getParameterValues(\"multi\")).containsOnly(\"multi1\", \"multi2\");\r\n    assertThat(multiPart.getParameterValues(\"not-existing\")).isNull();\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\core\\src\\test\\java\\org\\apache\\struts2\\dispatcher\\multipart\\AbstractMultiPartRequestTest.java",
  "methodName" : "unableParseRequest",
  "sourceCode" : "@Test\r\npublic void unableParseRequest() throws IOException {\r\n    String content = formFile(\"file1\", \"test1.csv\", \"1,2,3,4\");\r\n    mockRequest.setContent(content.getBytes(StandardCharsets.UTF_8));\r\n    assertThat(JakartaServletDiskFileUpload.isMultipartContent(mockRequest)).isTrue();\r\n    multiPart.parse(mockRequest, tempDir);\r\n    assertThat(multiPart.getErrors()).map(LocalizedMessage::getTextKey).containsExactly(\"struts.messages.upload.error.FileUploadException\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\core\\src\\test\\java\\org\\apache\\struts2\\dispatcher\\multipart\\AbstractMultiPartRequestTest.java",
  "methodName" : "cleanupDoesNotClearErrorsList",
  "sourceCode" : "@Test\r\npublic void cleanupDoesNotClearErrorsList() throws IOException {\r\n    // given - create a scenario that generates errors\r\n    String content = formFile(\"file1\", \"test1.csv\", \"1,2,3,4\");\r\n    mockRequest.setContent(content.getBytes(StandardCharsets.UTF_8));\r\n    // Very small to trigger error\r\n    multiPart.setMaxSize(\"1\");\r\n    multiPart.parse(mockRequest, tempDir);\r\n    // Verify errors exist\r\n    assertThat(multiPart.getErrors()).isNotEmpty();\r\n    int originalErrorCount = multiPart.getErrors().size();\r\n    // when\r\n    multiPart.cleanUp();\r\n    // then - errors should remain (cleanup doesn't clear errors)\r\n    assertThat(multiPart.getErrors()).hasSize(originalErrorCount);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\core\\src\\test\\java\\org\\apache\\struts2\\dispatcher\\multipart\\AbstractMultiPartRequestTest.java",
  "methodName" : "largeFileUploadHandling",
  "sourceCode" : "@Test\r\npublic void largeFileUploadHandling() throws IOException {\r\n    // Test that large files are handled properly\r\n    StringBuilder largeContent = new StringBuilder();\r\n    for (int i = 0; i < 1000; i++) {\r\n        largeContent.append(\"line\").append(i).append(\",\");\r\n    }\r\n    String content = formFile(\"largefile\", \"large.csv\", largeContent.toString()) + endline + \"--\" + boundary + \"--\";\r\n    mockRequest.setContent(content.getBytes(StandardCharsets.UTF_8));\r\n    // when\r\n    multiPart.parse(mockRequest, tempDir);\r\n    // then - should complete without memory issues\r\n    assertThat(multiPart.getErrors()).isEmpty();\r\n    assertThat(multiPart.getFile(\"largefile\")).hasSize(1);\r\n    // Cleanup should properly handle large files\r\n    multiPart.cleanUp();\r\n    assertThat(multiPart.uploadedFiles).isEmpty();\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\core\\src\\test\\java\\org\\apache\\struts2\\dispatcher\\multipart\\AbstractMultiPartRequestTest.java",
  "methodName" : "multipleFileUploadWithMixedContent",
  "sourceCode" : "@Test\r\npublic void multipleFileUploadWithMixedContent() throws IOException {\r\n    // Test mixed content with multiple files and parameters\r\n    String content = formFile(\"file1\", \"test1.csv\", \"1,2,3,4\") + formField(\"param1\", \"value1\") + formFile(\"file2\", \"test2.csv\", \"5,6,7,8\") + formField(\"param2\", \"value2\") + formFile(\"file3\", \"test3.csv\", \"9,10,11,12\") + formField(\"param3\", \"value3\") + endline + \"--\" + boundary + \"--\";\r\n    mockRequest.setContent(content.getBytes(StandardCharsets.UTF_8));\r\n    // when\r\n    multiPart.parse(mockRequest, tempDir);\r\n    // then - verify all content was processed\r\n    assertThat(multiPart.getErrors()).isEmpty();\r\n    assertThat(multiPart.getFile(\"file1\")).hasSize(1);\r\n    assertThat(multiPart.getFile(\"file2\")).hasSize(1);\r\n    assertThat(multiPart.getFile(\"file3\")).hasSize(1);\r\n    assertThat(multiPart.getParameter(\"param1\")).isEqualTo(\"value1\");\r\n    assertThat(multiPart.getParameter(\"param2\")).isEqualTo(\"value2\");\r\n    assertThat(multiPart.getParameter(\"param3\")).isEqualTo(\"value3\");\r\n    // Store file paths for post-cleanup verification\r\n    List<String> filePaths = new ArrayList<>();\r\n    for (UploadedFile file : multiPart.getFile(\"file1\")) {\r\n        filePaths.add(file.getAbsolutePath());\r\n    }\r\n    for (UploadedFile file : multiPart.getFile(\"file2\")) {\r\n        filePaths.add(file.getAbsolutePath());\r\n    }\r\n    for (UploadedFile file : multiPart.getFile(\"file3\")) {\r\n        filePaths.add(file.getAbsolutePath());\r\n    }\r\n    // when - cleanup\r\n    multiPart.cleanUp();\r\n    // then - verify complete cleanup\r\n    assertThat(multiPart.uploadedFiles).isEmpty();\r\n    assertThat(multiPart.parameters).isEmpty();\r\n    // Verify files are deleted\r\n    for (String filePath : filePaths) {\r\n        assertThat(new File(filePath)).doesNotExist();\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\core\\src\\test\\java\\org\\apache\\struts2\\dispatcher\\multipart\\AbstractMultiPartRequestTest.java",
  "methodName" : "createTemporaryFileGeneratesSecureNames",
  "sourceCode" : "@Test\r\npublic void createTemporaryFileGeneratesSecureNames() {\r\n    // Create a test instance to access the protected method\r\n    AbstractMultiPartRequest testRequest = createMultipartRequest();\r\n    Path testLocation = Paths.get(tempDir);\r\n    // when - create multiple temporary files\r\n    File tempFile1 = testRequest.createTemporaryFile(\"test1.csv\", testLocation);\r\n    File tempFile2 = testRequest.createTemporaryFile(\"test2.csv\", testLocation);\r\n    File tempFile3 = testRequest.createTemporaryFile(\"../../../malicious.csv\", testLocation);\r\n    // then - verify secure naming\r\n    assertThat(tempFile1.getName()).startsWith(\"upload_\");\r\n    assertThat(tempFile1.getName()).endsWith(\".tmp\");\r\n    assertThat(tempFile2.getName()).startsWith(\"upload_\");\r\n    assertThat(tempFile2.getName()).endsWith(\".tmp\");\r\n    assertThat(tempFile3.getName()).startsWith(\"upload_\");\r\n    assertThat(tempFile3.getName()).endsWith(\".tmp\");\r\n    // Verify each file has a unique name\r\n    assertThat(tempFile1.getName()).isNotEqualTo(tempFile2.getName());\r\n    assertThat(tempFile2.getName()).isNotEqualTo(tempFile3.getName());\r\n    assertThat(tempFile1.getName()).isNotEqualTo(tempFile3.getName());\r\n    // Verify all files are in the correct location\r\n    assertThat(tempFile1.getParent()).isEqualTo(tempDir);\r\n    assertThat(tempFile2.getParent()).isEqualTo(tempDir);\r\n    assertThat(tempFile3.getParent()).isEqualTo(tempDir);\r\n    // Verify malicious filename doesn't affect the location\r\n    assertThat(tempFile3.getName()).doesNotContain(\"..\");\r\n    assertThat(tempFile3.getName()).doesNotContain(\"/\");\r\n    assertThat(tempFile3.getName()).doesNotContain(\"\\\\\");\r\n    // Clean up test files\r\n    tempFile1.delete();\r\n    tempFile2.delete();\r\n    tempFile3.delete();\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\core\\src\\test\\java\\org\\apache\\struts2\\dispatcher\\multipart\\AbstractMultiPartRequestTest.java",
  "methodName" : "createTemporaryFileInSpecificDirectory",
  "sourceCode" : "@Test\r\npublic void createTemporaryFileInSpecificDirectory() throws IOException {\r\n    // Create a subdirectory for testing\r\n    Path subDir = Paths.get(tempDir, \"subdir\");\r\n    Files.createDirectories(subDir);\r\n    AbstractMultiPartRequest testRequest = createMultipartRequest();\r\n    // when\r\n    File tempFile = testRequest.createTemporaryFile(\"test.csv\", subDir);\r\n    // then - verify file is created in the specified subdirectory\r\n    assertThat(tempFile.getParent()).isEqualTo(subDir.toString());\r\n    assertThat(tempFile.getName()).startsWith(\"upload_\");\r\n    assertThat(tempFile.getName()).endsWith(\".tmp\");\r\n    // Clean up\r\n    tempFile.delete();\r\n    Files.delete(subDir);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\core\\src\\test\\java\\org\\apache\\struts2\\dispatcher\\multipart\\AbstractMultiPartRequestTest.java",
  "methodName" : "createTemporaryFileWithNullFileName",
  "sourceCode" : "@Test\r\npublic void createTemporaryFileWithNullFileName() throws IOException {\r\n    AbstractMultiPartRequest testRequest = createMultipartRequest();\r\n    Path testLocation = Paths.get(tempDir);\r\n    // when - create temp file with null filename\r\n    File tempFile = testRequest.createTemporaryFile(null, testLocation);\r\n    // then - should still create a valid temporary file\r\n    assertThat(tempFile.getName()).startsWith(\"upload_\");\r\n    assertThat(tempFile.getName()).endsWith(\".tmp\");\r\n    assertThat(tempFile.getParent()).isEqualTo(tempDir);\r\n    // Clean up\r\n    tempFile.delete();\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\core\\src\\test\\java\\org\\apache\\struts2\\dispatcher\\multipart\\AbstractMultiPartRequestTest.java",
  "methodName" : "createTemporaryFileWithEmptyFileName",
  "sourceCode" : "@Test\r\npublic void createTemporaryFileWithEmptyFileName() throws IOException {\r\n    AbstractMultiPartRequest testRequest = createMultipartRequest();\r\n    Path testLocation = Paths.get(tempDir);\r\n    // when - create temp file with empty filename\r\n    File tempFile = testRequest.createTemporaryFile(\"\", testLocation);\r\n    // then - should still create a valid temporary file\r\n    assertThat(tempFile.getName()).startsWith(\"upload_\");\r\n    assertThat(tempFile.getName()).endsWith(\".tmp\");\r\n    assertThat(tempFile.getParent()).isEqualTo(tempDir);\r\n    // Clean up\r\n    tempFile.delete();\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\core\\src\\test\\java\\org\\apache\\struts2\\dispatcher\\multipart\\AbstractMultiPartRequestTest.java",
  "methodName" : "createTemporaryFileWithSpecialCharacters",
  "sourceCode" : "@Test\r\npublic void createTemporaryFileWithSpecialCharacters() {\r\n    AbstractMultiPartRequest testRequest = createMultipartRequest();\r\n    Path testLocation = Paths.get(tempDir);\r\n    // when - create temp files with various special characters\r\n    File tempFile1 = testRequest.createTemporaryFile(\"file with spaces.csv\", testLocation);\r\n    File tempFile2 = testRequest.createTemporaryFile(\"file@#$%^&*().csv\", testLocation);\r\n    // Cyrillic\r\n    File tempFile3 = testRequest.createTemporaryFile(\"файл.csv\", testLocation);\r\n    // then - all should create valid secure temporary files\r\n    File[] tempFiles = { tempFile1, tempFile2, tempFile3 };\r\n    for (File tempFile : tempFiles) {\r\n        assertThat(tempFile.getName()).startsWith(\"upload_\");\r\n        assertThat(tempFile.getName()).endsWith(\".tmp\");\r\n        assertThat(tempFile.getParent()).isEqualTo(tempDir);\r\n        // Verify no special characters leak into the actual filename\r\n        assertThat(tempFile.getName()).matches(\"upload_[a-zA-Z0-9_]+\\\\.tmp\");\r\n    }\r\n    // All should have unique names\r\n    assertThat(tempFile1.getName()).isNotEqualTo(tempFile2.getName());\r\n    assertThat(tempFile2.getName()).isNotEqualTo(tempFile3.getName());\r\n    assertThat(tempFile1.getName()).isNotEqualTo(tempFile3.getName());\r\n    // Clean up\r\n    tempFile1.delete();\r\n    tempFile2.delete();\r\n    tempFile3.delete();\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\core\\src\\test\\java\\org\\apache\\struts2\\dispatcher\\multipart\\AbstractMultiPartRequestTest.java",
  "methodName" : "createTemporaryFileConsistentNaming",
  "sourceCode" : "@Test\r\npublic void createTemporaryFileConsistentNaming() {\r\n    AbstractMultiPartRequest testRequest = createMultipartRequest();\r\n    Path testLocation = Paths.get(tempDir);\r\n    // when - create many temporary files to verify naming consistency\r\n    List<File> tempFiles = new ArrayList<>();\r\n    for (int i = 0; i < 100; i++) {\r\n        tempFiles.add(testRequest.createTemporaryFile(\"test\" + i + \".csv\", testLocation));\r\n    }\r\n    // then - all should follow the same naming pattern\r\n    for (File tempFile : tempFiles) {\r\n        assertThat(tempFile.getName()).startsWith(\"upload_\");\r\n        assertThat(tempFile.getName()).endsWith(\".tmp\");\r\n        assertThat(tempFile.getParent()).isEqualTo(tempDir);\r\n        // Verify UUID pattern (without hyphens, replaced with underscores)\r\n        assertThat(tempFile.getName()).matches(\"upload_[a-zA-Z0-9_]+\\\\.tmp\");\r\n    }\r\n    // Verify all names are unique\r\n    List<String> fileNames = tempFiles.stream().map(File::getName).toList();\r\n    assertThat(fileNames).doesNotHaveDuplicates();\r\n    // Clean up\r\n    tempFiles.forEach(File::delete);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\core\\src\\test\\java\\org\\apache\\struts2\\dispatcher\\multipart\\AbstractMultiPartRequestTest.java",
  "methodName" : "emptyFileUploadsAreRejected",
  "sourceCode" : "@Test\r\npublic void emptyFileUploadsAreRejected() throws IOException {\r\n    // Test that empty files (0 bytes) are rejected with proper error message\r\n    String content = endline + \"--\" + boundary + endline + \"Content-Disposition: form-data; name=\\\"emptyfile\\\"; filename=\\\"empty.txt\\\"\" + endline + \"Content-Type: text/plain\" + endline + endline + // No content - this creates a 0-byte file\r\n    endline + \"--\" + boundary + \"--\";\r\n    mockRequest.setContent(content.getBytes(StandardCharsets.UTF_8));\r\n    // when\r\n    multiPart.parse(mockRequest, tempDir);\r\n    // then - should reject empty file and add error\r\n    assertThat(multiPart.getErrors()).hasSize(1).first().satisfies(error -> {\r\n        assertThat(error.getTextKey()).isEqualTo(\"struts.messages.upload.error.IllegalArgumentException\");\r\n        assertThat(error.getArgs()).containsExactly(\"empty.txt\", \"emptyfile\");\r\n    });\r\n    assertThat(multiPart.uploadedFiles).isEmpty();\r\n    assertThat(multiPart.getFile(\"emptyfile\")).isEmpty();\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\core\\src\\test\\java\\org\\apache\\struts2\\dispatcher\\multipart\\AbstractMultiPartRequestTest.java",
  "methodName" : "mixedEmptyAndValidFilesProcessedCorrectly",
  "sourceCode" : "@Test\r\npublic void mixedEmptyAndValidFilesProcessedCorrectly() throws IOException {\r\n    // Test that valid files are processed while empty files are rejected\r\n    String content = endline + \"--\" + boundary + endline + \"Content-Disposition: form-data; name=\\\"emptyfile1\\\"; filename=\\\"empty1.txt\\\"\" + endline + \"Content-Type: text/plain\" + endline + endline + // No content - empty file\r\n    endline + \"--\" + boundary + endline + \"Content-Disposition: form-data; name=\\\"validfile\\\"; filename=\\\"valid.txt\\\"\" + endline + \"Content-Type: text/plain\" + endline + endline + \"some valid content\" + endline + \"--\" + boundary + endline + \"Content-Disposition: form-data; name=\\\"emptyfile2\\\"; filename=\\\"empty2.txt\\\"\" + endline + \"Content-Type: application/octet-stream\" + endline + endline + // Another empty file\r\n    endline + \"--\" + boundary + \"--\";\r\n    mockRequest.setContent(content.getBytes(StandardCharsets.UTF_8));\r\n    // when\r\n    multiPart.parse(mockRequest, tempDir);\r\n    // then - should have 2 errors for empty files, 1 valid file processed\r\n    assertThat(multiPart.getErrors()).hasSize(2);\r\n    assertThat(multiPart.getErrors().get(0)).satisfies(error -> {\r\n        assertThat(error.getTextKey()).isEqualTo(\"struts.messages.upload.error.IllegalArgumentException\");\r\n        assertThat(error.getArgs()).containsExactly(\"empty1.txt\", \"emptyfile1\");\r\n    });\r\n    assertThat(multiPart.getErrors().get(1)).satisfies(error -> {\r\n        assertThat(error.getTextKey()).isEqualTo(\"struts.messages.upload.error.IllegalArgumentException\");\r\n        assertThat(error.getArgs()).containsExactly(\"empty2.txt\", \"emptyfile2\");\r\n    });\r\n    // Only the valid file should be processed\r\n    assertThat(multiPart.uploadedFiles).hasSize(1);\r\n    assertThat(multiPart.getFile(\"validfile\")).hasSize(1);\r\n    assertThat(multiPart.getFile(\"emptyfile1\")).isEmpty();\r\n    assertThat(multiPart.getFile(\"emptyfile2\")).isEmpty();\r\n    // Verify valid file content\r\n    assertThat(multiPart.getFile(\"validfile\")[0].getContent()).asInstanceOf(InstanceOfAssertFactories.FILE).content().isEqualTo(\"some valid content\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\core\\src\\test\\java\\org\\apache\\struts2\\dispatcher\\multipart\\AbstractMultiPartRequestTest.java",
  "methodName" : "emptyFileTemporaryFileCleanup",
  "sourceCode" : "@Test\r\npublic void emptyFileTemporaryFileCleanup() throws IOException {\r\n    // Test that temporary files for empty files are properly cleaned up\r\n    String content = endline + \"--\" + boundary + endline + \"Content-Disposition: form-data; name=\\\"emptyfile\\\"; filename=\\\"empty.txt\\\"\" + endline + \"Content-Type: text/plain\" + endline + endline + // Empty file\r\n    endline + \"--\" + boundary + \"--\";\r\n    mockRequest.setContent(content.getBytes(StandardCharsets.UTF_8));\r\n    // Count temp files before processing\r\n    File[] tempFilesBefore = new File(tempDir).listFiles((dir, name) -> name.startsWith(\"upload_\") && name.endsWith(\".tmp\"));\r\n    int countBefore = tempFilesBefore != null ? tempFilesBefore.length : 0;\r\n    // when\r\n    multiPart.parse(mockRequest, tempDir);\r\n    // then - should reject empty file and clean up temp file\r\n    assertThat(multiPart.getErrors()).hasSize(1);\r\n    assertThat(multiPart.uploadedFiles).isEmpty();\r\n    // Verify that temporary files are cleaned up (may have implementation differences)\r\n    // Some implementations create temp files first, others don't create any for empty uploads\r\n    File[] tempFilesAfter = new File(tempDir).listFiles((dir, name) -> name.startsWith(\"upload_\") && name.endsWith(\".tmp\"));\r\n    int countAfter = tempFilesAfter != null ? tempFilesAfter.length : 0;\r\n    // Allow for implementation differences - just ensure no new temp files remain\r\n    assertThat(countAfter).isLessThanOrEqualTo(countBefore);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\core\\src\\test\\java\\org\\apache\\struts2\\dispatcher\\multipart\\JakartaMultiPartRequestTest.java",
  "methodName" : "temporaryFileCleanupForInMemoryUploads",
  "sourceCode" : "@Test\r\npublic void temporaryFileCleanupForInMemoryUploads() throws IOException, NoSuchFieldException, IllegalAccessException {\r\n    // given - small files that will be in-memory\r\n    String content = formFile(\"file1\", \"test1.csv\", \"a,b,c,d\") + formFile(\"file2\", \"test2.csv\", \"1,2,3,4\") + endline + \"--\" + boundary + \"--\";\r\n    mockRequest.setContent(content.getBytes(StandardCharsets.UTF_8));\r\n    // when\r\n    multiPart.parse(mockRequest, tempDir);\r\n    // Access private field to verify temporary files are tracked\r\n    Field tempFilesField = JakartaMultiPartRequest.class.getDeclaredField(\"temporaryFiles\");\r\n    tempFilesField.setAccessible(true);\r\n    @SuppressWarnings(\"unchecked\")\r\n    List<File> temporaryFiles = (List<File>) tempFilesField.get(multiPart);\r\n    // Store file paths before cleanup for verification\r\n    List<String> tempFilePaths = temporaryFiles.stream().map(File::getAbsolutePath).toList();\r\n    // Verify temporary files exist before cleanup\r\n    assertThat(temporaryFiles).isNotEmpty();\r\n    for (File tempFile : temporaryFiles) {\r\n        assertThat(tempFile).exists();\r\n    }\r\n    // when - cleanup\r\n    multiPart.cleanUp();\r\n    // then - verify files are deleted and tracking list is cleared\r\n    for (String tempFilePath : tempFilePaths) {\r\n        assertThat(new File(tempFilePath)).doesNotExist();\r\n    }\r\n    assertThat(temporaryFiles).isEmpty();\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\core\\src\\test\\java\\org\\apache\\struts2\\dispatcher\\multipart\\JakartaMultiPartRequestTest.java",
  "methodName" : "cleanupMethodsCanBeOverridden",
  "sourceCode" : "@Test\r\npublic void cleanupMethodsCanBeOverridden() {\r\n    // Create a custom implementation to test extensibility\r\n    class CustomJakartaMultiPartRequest extends JakartaMultiPartRequest {\r\n\r\n        boolean diskFileItemsCleanedUp = false;\r\n\r\n        boolean temporaryFilesCleanedUp = false;\r\n\r\n        @Override\r\n        protected void cleanUpDiskFileItems() {\r\n            diskFileItemsCleanedUp = true;\r\n            super.cleanUpDiskFileItems();\r\n        }\r\n\r\n        @Override\r\n        protected void cleanUpTemporaryFiles() {\r\n            temporaryFilesCleanedUp = true;\r\n            super.cleanUpTemporaryFiles();\r\n        }\r\n    }\r\n    CustomJakartaMultiPartRequest customMultiPart = new CustomJakartaMultiPartRequest();\r\n    // when\r\n    customMultiPart.cleanUp();\r\n    // then\r\n    assertThat(customMultiPart.diskFileItemsCleanedUp).isTrue();\r\n    assertThat(customMultiPart.temporaryFilesCleanedUp).isTrue();\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\core\\src\\test\\java\\org\\apache\\struts2\\dispatcher\\multipart\\JakartaMultiPartRequestTest.java",
  "methodName" : "temporaryFileCreationFailureAddsError",
  "sourceCode" : "@Test\r\npublic void temporaryFileCreationFailureAddsError() throws IOException {\r\n    // Create a custom implementation that simulates temp file creation failure\r\n    class FaultyJakartaMultiPartRequest extends JakartaMultiPartRequest {\r\n\r\n        @Override\r\n        protected void processFileField(DiskFileItem item, String saveDir) {\r\n            // Simulate in-memory upload that fails to create temp file\r\n            if (item.isInMemory()) {\r\n                try {\r\n                    // Simulate IOException during temp file creation\r\n                    throw new IOException(\"Simulated temp file creation failure\");\r\n                } catch (IOException e) {\r\n                    // Add the error to the errors list for proper user feedback\r\n                    LocalizedMessage errorMessage = buildErrorMessage(e.getClass(), e.getMessage(), new Object[] { item.getName() });\r\n                    if (!errors.contains(errorMessage)) {\r\n                        errors.add(errorMessage);\r\n                    }\r\n                }\r\n            } else {\r\n                super.processFileField(item, saveDir);\r\n            }\r\n        }\r\n    }\r\n    FaultyJakartaMultiPartRequest faultyMultiPart = new FaultyJakartaMultiPartRequest();\r\n    // given - small file that would normally be in-memory\r\n    String content = formFile(\"file1\", \"test1.csv\", \"a,b\") + endline + \"--\" + boundary + \"--\";\r\n    mockRequest.setContent(content.getBytes(StandardCharsets.UTF_8));\r\n    // when\r\n    faultyMultiPart.parse(mockRequest, tempDir);\r\n    // then - verify error is properly captured\r\n    assertThat(faultyMultiPart.getErrors()).hasSize(1).first().extracting(LocalizedMessage::getTextKey).isEqualTo(\"struts.messages.upload.error.IOException\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\core\\src\\test\\java\\org\\apache\\struts2\\dispatcher\\multipart\\JakartaMultiPartRequestTest.java",
  "methodName" : "temporaryFileCreationErrorsAreNotDuplicated",
  "sourceCode" : "@Test\r\npublic void temporaryFileCreationErrorsAreNotDuplicated() throws IOException {\r\n    // Test that duplicate errors are not added to the errors list\r\n    JakartaMultiPartRequest multiPartWithDuplicateErrors = new JakartaMultiPartRequest();\r\n    // Simulate adding the same error twice\r\n    IOException testException = new IOException(\"Test exception\");\r\n    LocalizedMessage errorMessage = multiPartWithDuplicateErrors.buildErrorMessage(testException.getClass(), testException.getMessage(), new Object[] { \"test.csv\" });\r\n    // when - add same error twice\r\n    multiPartWithDuplicateErrors.errors.add(errorMessage);\r\n    if (!multiPartWithDuplicateErrors.errors.contains(errorMessage)) {\r\n        multiPartWithDuplicateErrors.errors.add(errorMessage);\r\n    }\r\n    // then - only one error should be present\r\n    assertThat(multiPartWithDuplicateErrors.getErrors()).hasSize(1);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\core\\src\\test\\java\\org\\apache\\struts2\\dispatcher\\multipart\\JakartaMultiPartRequestTest.java",
  "methodName" : "cleanupIsIdempotent",
  "sourceCode" : "@Test\r\npublic void cleanupIsIdempotent() throws IOException {\r\n    // given - process some files\r\n    String content = formFile(\"file1\", \"test1.csv\", \"1,2,3,4\") + endline + \"--\" + boundary + \"--\";\r\n    mockRequest.setContent(content.getBytes(StandardCharsets.UTF_8));\r\n    multiPart.parse(mockRequest, tempDir);\r\n    // when - call cleanup multiple times\r\n    multiPart.cleanUp();\r\n    multiPart.cleanUp();\r\n    multiPart.cleanUp();\r\n    // then - should not throw exceptions and should be safe\r\n    assertThat(multiPart.uploadedFiles).isEmpty();\r\n    assertThat(multiPart.parameters).isEmpty();\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\core\\src\\test\\java\\org\\apache\\struts2\\dispatcher\\multipart\\JakartaMultiPartRequestTest.java",
  "methodName" : "endToEndMultipartProcessingWithCleanup",
  "sourceCode" : "@Test\r\npublic void endToEndMultipartProcessingWithCleanup() throws IOException {\r\n    // Test complete multipart processing lifecycle\r\n    String content = formFile(\"file1\", \"test1.csv\", \"1,2,3,4\") + formField(\"param1\", \"value1\") + formFile(\"file2\", \"test2.csv\", \"5,6,7,8\") + formField(\"param2\", \"value2\") + endline + \"--\" + boundary + \"--\";\r\n    mockRequest.setContent(content.getBytes(StandardCharsets.UTF_8));\r\n    // when - full processing\r\n    multiPart.parse(mockRequest, tempDir);\r\n    // then - verify everything was processed\r\n    assertThat(multiPart.getErrors()).isEmpty();\r\n    assertThat(multiPart.getFile(\"file1\")).hasSize(1);\r\n    assertThat(multiPart.getFile(\"file2\")).hasSize(1);\r\n    assertThat(multiPart.getParameter(\"param1\")).isEqualTo(\"value1\");\r\n    assertThat(multiPart.getParameter(\"param2\")).isEqualTo(\"value2\");\r\n    // when - cleanup\r\n    multiPart.cleanUp();\r\n    // then - verify complete cleanup\r\n    assertThat(multiPart.uploadedFiles).isEmpty();\r\n    assertThat(multiPart.parameters).isEmpty();\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\core\\src\\test\\java\\org\\apache\\struts2\\dispatcher\\multipart\\JakartaMultiPartRequestTest.java",
  "methodName" : "temporaryFilesCreatedInSaveDirectory",
  "sourceCode" : "@Test\r\npublic void temporaryFilesCreatedInSaveDirectory() throws IOException, NoSuchFieldException, IllegalAccessException {\r\n    // Test that temporary files for in-memory uploads are created in the saveDir, not system temp\r\n    String content = formFile(\"file1\", \"test1.csv\", \"small,content\") + endline + \"--\" + boundary + \"--\";\r\n    mockRequest.setContent(content.getBytes(StandardCharsets.UTF_8));\r\n    // when\r\n    multiPart.parse(mockRequest, tempDir);\r\n    // Access private field to get temporary files\r\n    Field tempFilesField = JakartaMultiPartRequest.class.getDeclaredField(\"temporaryFiles\");\r\n    tempFilesField.setAccessible(true);\r\n    @SuppressWarnings(\"unchecked\")\r\n    List<File> temporaryFiles = (List<File>) tempFilesField.get(multiPart);\r\n    // then - verify temporary files are created in saveDir\r\n    assertThat(temporaryFiles).isNotEmpty();\r\n    for (File tempFile : temporaryFiles) {\r\n        // Verify the temporary file is in the saveDir, not system temp\r\n        assertThat(tempFile.getParent()).isEqualTo(tempDir);\r\n        assertThat(tempFile.getName()).startsWith(\"upload_\");\r\n        assertThat(tempFile.getName()).endsWith(\".tmp\");\r\n        assertThat(tempFile).exists();\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\core\\src\\test\\java\\org\\apache\\struts2\\dispatcher\\multipart\\JakartaMultiPartRequestTest.java",
  "methodName" : "secureTemporaryFileNaming",
  "sourceCode" : "@Test\r\npublic void secureTemporaryFileNaming() throws IOException, NoSuchFieldException, IllegalAccessException {\r\n    // Test that temporary files use UUID-based naming for security\r\n    String content = formFile(\"file1\", \"malicious../../../etc/passwd\", \"content\") + endline + \"--\" + boundary + \"--\";\r\n    mockRequest.setContent(content.getBytes(StandardCharsets.UTF_8));\r\n    // when\r\n    multiPart.parse(mockRequest, tempDir);\r\n    // Access private field to get temporary files\r\n    Field tempFilesField = JakartaMultiPartRequest.class.getDeclaredField(\"temporaryFiles\");\r\n    tempFilesField.setAccessible(true);\r\n    @SuppressWarnings(\"unchecked\")\r\n    List<File> temporaryFiles = (List<File>) tempFilesField.get(multiPart);\r\n    // then - verify secure naming prevents directory traversal\r\n    assertThat(temporaryFiles).isNotEmpty();\r\n    for (File tempFile : temporaryFiles) {\r\n        // Verify the temporary file uses secure UUID naming\r\n        assertThat(tempFile.getName()).startsWith(\"upload_\");\r\n        assertThat(tempFile.getName()).endsWith(\".tmp\");\r\n        // Verify it doesn't contain malicious path elements\r\n        assertThat(tempFile.getName()).doesNotContain(\"..\");\r\n        assertThat(tempFile.getName()).doesNotContain(\"/\");\r\n        assertThat(tempFile.getName()).doesNotContain(\"\\\\\");\r\n        // Verify it's in the correct directory\r\n        assertThat(tempFile.getParent()).isEqualTo(tempDir);\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\core\\src\\test\\java\\org\\apache\\struts2\\dispatcher\\multipart\\JakartaMultiPartRequestTest.java",
  "methodName" : "processNormalFormFieldHandlesNullFieldName",
  "sourceCode" : "@Test\r\npublic void processNormalFormFieldHandlesNullFieldName() throws IOException {\r\n    // Test null field name handling in processNormalFormField\r\n    String content = endline + \"--\" + boundary + endline + \"Content-Disposition: form-data\" + // No name attribute\r\n    endline + endline + \"field value without name\" + endline + \"--\" + boundary + endline + \"Content-Disposition: form-data; name=\\\"validfield\\\"\" + endline + endline + \"valid field value\" + endline + \"--\" + boundary + \"--\";\r\n    mockRequest.setContent(content.getBytes(StandardCharsets.UTF_8));\r\n    // when\r\n    multiPart.parse(mockRequest, tempDir);\r\n    // then - should only process the valid field\r\n    assertThat(multiPart.getErrors()).isEmpty();\r\n    assertThat(multiPart.getParameter(\"validfield\")).isEqualTo(\"valid field value\");\r\n    assertThat(multiPart.getParameterNames().asIterator()).toIterable().hasSize(1);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\core\\src\\test\\java\\org\\apache\\struts2\\dispatcher\\multipart\\JakartaMultiPartRequestTest.java",
  "methodName" : "processFileFieldHandlesNullFieldName",
  "sourceCode" : "@Test\r\npublic void processFileFieldHandlesNullFieldName() throws IOException {\r\n    // Test null field name handling in processFileField\r\n    String content = endline + \"--\" + boundary + endline + \"Content-Disposition: form-data; filename=\\\"orphan.txt\\\"\" + // No name attribute\r\n    endline + \"Content-Type: text/plain\" + endline + endline + \"orphaned file content\" + endline + \"--\" + boundary + endline + \"Content-Disposition: form-data; name=\\\"validfile\\\"; filename=\\\"valid.txt\\\"\" + endline + \"Content-Type: text/plain\" + endline + endline + \"valid file content\" + endline + \"--\" + boundary + \"--\";\r\n    mockRequest.setContent(content.getBytes(StandardCharsets.UTF_8));\r\n    // when\r\n    multiPart.parse(mockRequest, tempDir);\r\n    // then - should only process the valid file\r\n    assertThat(multiPart.getErrors()).isEmpty();\r\n    assertThat(multiPart.uploadedFiles).hasSize(1);\r\n    assertThat(multiPart.getFile(\"validfile\")).hasSize(1);\r\n    assertThat(multiPart.getFile(\"validfile\")[0].getContent()).asInstanceOf(InstanceOfAssertFactories.FILE).content().isEqualTo(\"valid file content\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\core\\src\\test\\java\\org\\apache\\struts2\\dispatcher\\multipart\\JakartaMultiPartRequestTest.java",
  "methodName" : "diskFileItemCleanupCoverage",
  "sourceCode" : "@Test\r\npublic void diskFileItemCleanupCoverage() throws IOException, NoSuchFieldException, IllegalAccessException {\r\n    // Test disk file item cleanup paths\r\n    String content = formFile(\"file1\", \"test1.csv\", \"1,2,3,4\") + endline + \"--\" + boundary + \"--\";\r\n    mockRequest.setContent(content.getBytes(StandardCharsets.UTF_8));\r\n    // when - force files to disk with small buffer\r\n    multiPart.setBufferSize(\"1\");\r\n    multiPart.parse(mockRequest, tempDir);\r\n    // Access private field to verify disk file items are tracked\r\n    Field diskFileItemsField = JakartaMultiPartRequest.class.getDeclaredField(\"diskFileItems\");\r\n    diskFileItemsField.setAccessible(true);\r\n    @SuppressWarnings(\"unchecked\")\r\n    java.util.List<org.apache.commons.fileupload2.core.DiskFileItem> diskFileItems = (java.util.List<org.apache.commons.fileupload2.core.DiskFileItem>) diskFileItemsField.get(multiPart);\r\n    // then - should have disk file items tracked\r\n    assertThat(diskFileItems).isNotEmpty();\r\n    // when - cleanup\r\n    multiPart.cleanUp();\r\n    // then - should clear tracking\r\n    assertThat(diskFileItems).isEmpty();\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\core\\src\\test\\java\\org\\apache\\struts2\\dispatcher\\multipart\\JakartaMultiPartRequestTest.java",
  "methodName" : "inMemoryVsDiskFileHandling",
  "sourceCode" : "@Test\r\npublic void inMemoryVsDiskFileHandling() throws IOException {\r\n    // Test both in-memory and disk file handling paths\r\n    // Should be in-memory\r\n    String smallContent = \"small\";\r\n    // Should go to disk\r\n    String largeContent = \"x\".repeat(20000);\r\n    String content = formFile(\"smallfile\", \"small.txt\", smallContent) + formFile(\"largefile\", \"large.txt\", largeContent) + endline + \"--\" + boundary + \"--\";\r\n    mockRequest.setContent(content.getBytes(StandardCharsets.UTF_8));\r\n    // when - use default buffer size\r\n    multiPart.parse(mockRequest, tempDir);\r\n    // then - both files should be processed\r\n    assertThat(multiPart.getErrors()).isEmpty();\r\n    assertThat(multiPart.uploadedFiles).hasSize(2);\r\n    assertThat(multiPart.getFile(\"smallfile\")).hasSize(1);\r\n    assertThat(multiPart.getFile(\"largefile\")).hasSize(1);\r\n    // Verify content\r\n    assertThat(multiPart.getFile(\"smallfile\")[0].getContent()).asInstanceOf(InstanceOfAssertFactories.FILE).content().isEqualTo(smallContent);\r\n    assertThat(multiPart.getFile(\"largefile\")[0].getContent()).asInstanceOf(InstanceOfAssertFactories.FILE).content().isEqualTo(largeContent);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\core\\src\\test\\java\\org\\apache\\struts2\\dispatcher\\multipart\\JakartaMultiPartRequestTest.java",
  "methodName" : "errorDuplicationPrevention",
  "sourceCode" : "@Test\r\npublic void errorDuplicationPrevention() throws IOException {\r\n    // Test that duplicate errors are not added\r\n    JakartaMultiPartRequest multiPartRequest = new JakartaMultiPartRequest();\r\n    // Simulate adding the same error multiple times\r\n    IOException testException = new IOException(\"Test error\");\r\n    LocalizedMessage errorMessage = multiPartRequest.buildErrorMessage(testException.getClass(), testException.getMessage(), new Object[] { \"test.csv\" });\r\n    // when - try to add same error multiple times\r\n    multiPartRequest.errors.add(errorMessage);\r\n    if (!multiPartRequest.errors.contains(errorMessage)) {\r\n        // Should not be added\r\n        multiPartRequest.errors.add(errorMessage);\r\n    }\r\n    if (!multiPartRequest.errors.contains(errorMessage)) {\r\n        // Should not be added\r\n        multiPartRequest.errors.add(errorMessage);\r\n    }\r\n    // then - should only have one error\r\n    assertThat(multiPartRequest.getErrors()).hasSize(1);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\core\\src\\test\\java\\org\\apache\\struts2\\dispatcher\\multipart\\JakartaMultiPartRequestTest.java",
  "methodName" : "processFileFieldHandlesEmptyFileName",
  "sourceCode" : "@Test\r\npublic void processFileFieldHandlesEmptyFileName() throws IOException {\r\n    String content = endline + \"--\" + boundary + endline + \"Content-Disposition: form-data; name=\\\"emptyfile\\\"; filename=\\\"\\\"\" + endline + \"Content-Type: text/plain\" + endline + endline + \"some content that should be ignored\" + endline + \"--\" + boundary + endline + \"Content-Disposition: form-data; name=\\\"validfile\\\"; filename=\\\"test.txt\\\"\" + endline + \"Content-Type: text/plain\" + endline + endline + \"valid file content\" + endline + \"--\" + boundary + \"--\";\r\n    mockRequest.setContent(content.getBytes(StandardCharsets.UTF_8));\r\n    // when\r\n    multiPart.parse(mockRequest, tempDir);\r\n    // then - should only process the file with valid filename\r\n    assertThat(multiPart.getErrors()).isEmpty();\r\n    assertThat(multiPart.uploadedFiles).hasSize(1);\r\n    assertThat(multiPart.getFile(\"validfile\")).hasSize(1);\r\n    assertThat(multiPart.getFile(\"emptyfile\")).isEmpty();\r\n    assertThat(multiPart.getFile(\"validfile\")[0].getContent()).asInstanceOf(InstanceOfAssertFactories.FILE).content().isEqualTo(\"valid file content\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\core\\src\\test\\java\\org\\apache\\struts2\\dispatcher\\multipart\\JakartaStreamMultiPartRequestTest.java",
  "methodName" : "maxSizeOfFiles",
  "sourceCode" : "@Test\r\npublic void maxSizeOfFiles() throws IOException {\r\n    // given\r\n    String content = formFile(\"file1\", \"test1.csv\", \"1,2,3,4\") + formFile(\"file2\", \"test2.csv\", \"5,6,7,8\") + endline + \"--\" + boundary + \"--\";\r\n    mockRequest.setContent(content.getBytes(StandardCharsets.UTF_8));\r\n    assertThat(JakartaServletDiskFileUpload.isMultipartContent(mockRequest)).isTrue();\r\n    // when\r\n    multiPart.setMaxSizeOfFiles(\"10\");\r\n    multiPart.parse(mockRequest, tempDir);\r\n    // then\r\n    assertThat(multiPart.uploadedFiles).hasSize(1);\r\n    assertThat(multiPart.getFile(\"file1\")).allSatisfy(file -> {\r\n        assertThat(file.isFile()).isTrue();\r\n        assertThat(file.getOriginalName()).isEqualTo(\"test1.csv\");\r\n        assertThat(file.getContentType()).isEqualTo(\"text/csv\");\r\n        assertThat(file.getContent()).asInstanceOf(InstanceOfAssertFactories.FILE).exists().content().isEqualTo(\"1,2,3,4\");\r\n    });\r\n    assertThat(multiPart.getErrors()).map(LocalizedMessage::getTextKey).containsExactly(\"struts.messages.upload.error.FileUploadSizeException\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\core\\src\\test\\java\\org\\apache\\struts2\\dispatcher\\multipart\\JakartaStreamMultiPartRequestTest.java",
  "methodName" : "readStreamProperlyHandlesResources",
  "sourceCode" : "@Test\r\npublic void readStreamProperlyHandlesResources() throws Exception {\r\n    // Create a test input stream with known data\r\n    byte[] testData = \"test data for stream reading\".getBytes(StandardCharsets.UTF_8);\r\n    InputStream testStream = new java.io.ByteArrayInputStream(testData);\r\n    JakartaStreamMultiPartRequest streamMultiPart = new JakartaStreamMultiPartRequest();\r\n    // Use reflection to access private readStream method\r\n    Method readStreamMethod = JakartaStreamMultiPartRequest.class.getDeclaredMethod(\"readStream\", InputStream.class);\r\n    readStreamMethod.setAccessible(true);\r\n    // when\r\n    String result = (String) readStreamMethod.invoke(streamMultiPart, testStream);\r\n    // then\r\n    assertThat(result).isEqualTo(\"test data for stream reading\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\core\\src\\test\\java\\org\\apache\\struts2\\dispatcher\\multipart\\JakartaStreamMultiPartRequestTest.java",
  "methodName" : "readStreamHandlesExceptionsProperly",
  "sourceCode" : "@Test\r\npublic void readStreamHandlesExceptionsProperly() throws Exception {\r\n    // Create a stream that throws an exception\r\n    InputStream faultyStream = new InputStream() {\r\n\r\n        @Override\r\n        public int read() throws IOException {\r\n            throw new IOException(\"Simulated stream failure\");\r\n        }\r\n    };\r\n    JakartaStreamMultiPartRequest streamMultiPart = new JakartaStreamMultiPartRequest();\r\n    // Use reflection to access private readStream method\r\n    Method readStreamMethod = JakartaStreamMultiPartRequest.class.getDeclaredMethod(\"readStream\", InputStream.class);\r\n    readStreamMethod.setAccessible(true);\r\n    // when/then - should propagate the exception\r\n    assertThatThrownBy(() -> readStreamMethod.invoke(streamMultiPart, faultyStream)).isInstanceOf(InvocationTargetException.class).cause().isInstanceOf(IOException.class).hasMessage(\"Simulated stream failure\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\core\\src\\test\\java\\org\\apache\\struts2\\dispatcher\\multipart\\JakartaStreamMultiPartRequestTest.java",
  "methodName" : "readStreamHandlesEmptyStream",
  "sourceCode" : "@Test\r\npublic void readStreamHandlesEmptyStream() throws Exception {\r\n    // Create an empty stream\r\n    InputStream emptyStream = new java.io.ByteArrayInputStream(new byte[0]);\r\n    JakartaStreamMultiPartRequest streamMultiPart = new JakartaStreamMultiPartRequest();\r\n    // Use reflection to access private readStream method\r\n    Method readStreamMethod = JakartaStreamMultiPartRequest.class.getDeclaredMethod(\"readStream\", InputStream.class);\r\n    readStreamMethod.setAccessible(true);\r\n    // when\r\n    String result = (String) readStreamMethod.invoke(streamMultiPart, emptyStream);\r\n    // then\r\n    assertThat(result).isEmpty();\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\core\\src\\test\\java\\org\\apache\\struts2\\dispatcher\\multipart\\JakartaStreamMultiPartRequestTest.java",
  "methodName" : "readStreamHandlesLargeData",
  "sourceCode" : "@Test\r\npublic void readStreamHandlesLargeData() throws Exception {\r\n    // Create a large data stream to test buffer handling\r\n    StringBuilder largeData = new StringBuilder();\r\n    for (int i = 0; i < 2000; i++) {\r\n        largeData.append(\"line\").append(i).append(\"\\n\");\r\n    }\r\n    byte[] testData = largeData.toString().getBytes(StandardCharsets.UTF_8);\r\n    InputStream largeStream = new java.io.ByteArrayInputStream(testData);\r\n    JakartaStreamMultiPartRequest streamMultiPart = new JakartaStreamMultiPartRequest();\r\n    // Use reflection to access private readStream method\r\n    Method readStreamMethod = JakartaStreamMultiPartRequest.class.getDeclaredMethod(\"readStream\", InputStream.class);\r\n    readStreamMethod.setAccessible(true);\r\n    // when\r\n    String result = (String) readStreamMethod.invoke(streamMultiPart, largeStream);\r\n    // then\r\n    assertThat(result).isEqualTo(largeData.toString());\r\n    // Verify it's larger than internal buffer\r\n    assertThat(result.length()).isGreaterThan(1024);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\core\\src\\test\\java\\org\\apache\\struts2\\dispatcher\\multipart\\JakartaStreamMultiPartRequestTest.java",
  "methodName" : "processFileItemAsFormFieldHandlesNullFieldName",
  "sourceCode" : "@Test\r\npublic void processFileItemAsFormFieldHandlesNullFieldName() throws IOException {\r\n    // Test the null field name path in processFileItemAsFormField\r\n    String content = // Field name will be empty/null-like\r\n    formFile(\"\", \"test.csv\", \"data\") + endline + \"--\" + boundary + \"--\";\r\n    mockRequest.setContent(content.getBytes(StandardCharsets.UTF_8));\r\n    // when\r\n    multiPart.parse(mockRequest, tempDir);\r\n    // then - should complete without error, but no parameters should be added\r\n    assertThat(multiPart.getErrors()).isEmpty();\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\core\\src\\test\\java\\org\\apache\\struts2\\dispatcher\\multipart\\JakartaStreamMultiPartRequestTest.java",
  "methodName" : "processFileItemAsFileFieldHandlesNullFieldName",
  "sourceCode" : "@Test\r\npublic void processFileItemAsFileFieldHandlesNullFieldName() throws IOException {\r\n    // This test covers the null field name path in processFileItemAsFileField\r\n    JakartaStreamMultiPartRequest streamMultiPart = new JakartaStreamMultiPartRequest();\r\n    // Create a mock file item with null field name\r\n    String content = \"--\" + boundary + endline + \"Content-Disposition: form-data; filename=\\\"test.csv\\\"\" + endline + \"Content-Type: text/csv\" + endline + endline + \"test data\" + endline + \"--\" + boundary + \"--\";\r\n    mockRequest.setContent(content.getBytes(StandardCharsets.UTF_8));\r\n    // when\r\n    streamMultiPart.parse(mockRequest, tempDir);\r\n    // then - should complete without error but no files should be uploaded\r\n    assertThat(streamMultiPart.getErrors()).isEmpty();\r\n    assertThat(streamMultiPart.uploadedFiles).isEmpty();\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\core\\src\\test\\java\\org\\apache\\struts2\\dispatcher\\multipart\\JakartaStreamMultiPartRequestTest.java",
  "methodName" : "exceedsMaxFilesPath",
  "sourceCode" : "@Test\r\npublic void exceedsMaxFilesPath() throws IOException {\r\n    // Test the exceedsMaxFiles method path\r\n    String content = formFile(\"file1\", \"test1.csv\", \"data1\") + formFile(\"file2\", \"test2.csv\", \"data2\") + formFile(\"file3\", \"test3.csv\", \"data3\") + endline + \"--\" + boundary + \"--\";\r\n    mockRequest.setContent(content.getBytes(StandardCharsets.UTF_8));\r\n    // when - set max files to 1\r\n    multiPart.setMaxFiles(\"1\");\r\n    multiPart.parse(mockRequest, tempDir);\r\n    // then - should have only 1 file and errors for others\r\n    assertThat(multiPart.uploadedFiles).hasSize(1);\r\n    assertThat(multiPart.getErrors()).isNotEmpty().allSatisfy(error -> assertThat(error.getTextKey()).isEqualTo(\"struts.messages.upload.error.FileUploadFileCountLimitException\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\core\\src\\test\\java\\org\\apache\\struts2\\dispatcher\\multipart\\JakartaStreamMultiPartRequestTest.java",
  "methodName" : "actualSizeOfUploadedFilesCalculation",
  "sourceCode" : "@Test\r\npublic void actualSizeOfUploadedFilesCalculation() throws IOException {\r\n    // Test the actualSizeOfUploadedFiles method\r\n    String content = // 14 bytes + headers\r\n    formFile(\"file1\", \"test1.csv\", \"data1234567890\") + // 8 bytes + headers\r\n    formFile(\"file2\", \"test2.csv\", \"moredata\") + endline + \"--\" + boundary + \"--\";\r\n    mockRequest.setContent(content.getBytes(StandardCharsets.UTF_8));\r\n    // when\r\n    multiPart.parse(mockRequest, tempDir);\r\n    // then - should have uploaded files and calculate their total size\r\n    assertThat(multiPart.uploadedFiles).hasSize(2);\r\n    assertThat(multiPart.getFile(\"file1\")).hasSize(1);\r\n    assertThat(multiPart.getFile(\"file2\")).hasSize(1);\r\n    // Verify files have the expected content\r\n    assertThat(multiPart.getFile(\"file1\")[0].getContent()).asInstanceOf(InstanceOfAssertFactories.FILE).content().isEqualTo(\"data1234567890\");\r\n    assertThat(multiPart.getFile(\"file2\")[0].getContent()).asInstanceOf(InstanceOfAssertFactories.FILE).content().isEqualTo(\"moredata\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\core\\src\\test\\java\\org\\apache\\struts2\\dispatcher\\multipart\\JakartaStreamMultiPartRequestTest.java",
  "methodName" : "createTemporaryFileMethod",
  "sourceCode" : "@Test\r\npublic void createTemporaryFileMethod() throws Exception {\r\n    // Test the createTemporaryFile method directly\r\n    JakartaStreamMultiPartRequest streamMultiPart = new JakartaStreamMultiPartRequest();\r\n    Path testLocation = Paths.get(tempDir);\r\n    // when\r\n    File tempFile1 = streamMultiPart.createTemporaryFile(\"test.csv\", testLocation);\r\n    File tempFile2 = streamMultiPart.createTemporaryFile(\"another.txt\", testLocation);\r\n    // then\r\n    assertThat(tempFile1.getName()).startsWith(\"upload_\");\r\n    assertThat(tempFile1.getName()).endsWith(\".tmp\");\r\n    assertThat(tempFile1.getParent()).isEqualTo(tempDir);\r\n    assertThat(tempFile2.getName()).startsWith(\"upload_\");\r\n    assertThat(tempFile2.getName()).endsWith(\".tmp\");\r\n    assertThat(tempFile2.getParent()).isEqualTo(tempDir);\r\n    // Should be unique names\r\n    assertThat(tempFile1.getName()).isNotEqualTo(tempFile2.getName());\r\n    // Clean up\r\n    tempFile1.delete();\r\n    tempFile2.delete();\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\core\\src\\test\\java\\org\\apache\\struts2\\dispatcher\\multipart\\JakartaStreamMultiPartRequestTest.java",
  "methodName" : "streamFileToDiskWithDifferentBufferSizes",
  "sourceCode" : "@Test\r\npublic void streamFileToDiskWithDifferentBufferSizes() throws IOException {\r\n    // Test streamFileToDisk with different buffer sizes\r\n    // Content larger than default buffer\r\n    String largeContent = \"x\".repeat(5000);\r\n    String content = formFile(\"largefile\", \"large.csv\", largeContent) + endline + \"--\" + boundary + \"--\";\r\n    mockRequest.setContent(content.getBytes(StandardCharsets.UTF_8));\r\n    // when - use small buffer size to ensure multiple reads\r\n    multiPart.setBufferSize(\"100\");\r\n    multiPart.parse(mockRequest, tempDir);\r\n    // then\r\n    assertThat(multiPart.getErrors()).isEmpty();\r\n    assertThat(multiPart.getFile(\"largefile\")).hasSize(1);\r\n    assertThat(multiPart.getFile(\"largefile\")[0].getContent()).asInstanceOf(InstanceOfAssertFactories.FILE).content().isEqualTo(largeContent);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\core\\src\\test\\java\\org\\apache\\struts2\\dispatcher\\multipart\\JakartaStreamMultiPartRequestTest.java",
  "methodName" : "exceedsMaxSizeOfFilesWithFileCleanup",
  "sourceCode" : "@Test\r\npublic void exceedsMaxSizeOfFilesWithFileCleanup() throws IOException {\r\n    // Test the file deletion path when max size is exceeded\r\n    String content = formFile(\"file1\", \"test1.csv\", \"small\") + formFile(\"file2\", \"test2.csv\", \"this is a much larger file content that should exceed the limit\") + endline + \"--\" + boundary + \"--\";\r\n    mockRequest.setContent(content.getBytes(StandardCharsets.UTF_8));\r\n    // when - set very small max size\r\n    multiPart.setMaxSizeOfFiles(\"20\");\r\n    multiPart.parse(mockRequest, tempDir);\r\n    // then - should have first file uploaded but error for second\r\n    assertThat(multiPart.uploadedFiles).hasSize(1);\r\n    assertThat(multiPart.getFile(\"file1\")).hasSize(1);\r\n    assertThat(multiPart.getFile(\"file2\")).isEmpty();\r\n    assertThat(multiPart.getErrors()).isNotEmpty().anyMatch(error -> error.getTextKey().equals(\"struts.messages.upload.error.FileUploadSizeException\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\core\\src\\test\\java\\org\\apache\\struts2\\dispatcher\\multipart\\JakartaStreamMultiPartRequestTest.java",
  "methodName" : "createUploadedFileWithVariousContentTypes",
  "sourceCode" : "@Test\r\npublic void createUploadedFileWithVariousContentTypes() throws IOException {\r\n    // Test different content types and file names\r\n    String content = endline + \"--\" + boundary + endline + \"Content-Disposition: form-data; name=\\\"textfile\\\"; filename=\\\"document.txt\\\"\" + endline + \"Content-Type: text/plain\" + endline + endline + \"Plain text content\" + endline + \"--\" + boundary + endline + \"Content-Disposition: form-data; name=\\\"jsonfile\\\"; filename=\\\"data.json\\\"\" + endline + \"Content-Type: application/json\" + endline + endline + \"{\\\"key\\\": \\\"value\\\"}\" + endline + \"--\" + boundary + \"--\";\r\n    mockRequest.setContent(content.getBytes(StandardCharsets.UTF_8));\r\n    // when\r\n    multiPart.parse(mockRequest, tempDir);\r\n    // then\r\n    assertThat(multiPart.getErrors()).isEmpty();\r\n    assertThat(multiPart.uploadedFiles).hasSize(2);\r\n    // Verify text file\r\n    assertThat(multiPart.getFile(\"textfile\")).hasSize(1);\r\n    assertThat(multiPart.getFile(\"textfile\")[0].getContentType()).isEqualTo(\"text/plain\");\r\n    assertThat(multiPart.getFile(\"textfile\")[0].getOriginalName()).isEqualTo(\"document.txt\");\r\n    // Verify JSON file\r\n    assertThat(multiPart.getFile(\"jsonfile\")).hasSize(1);\r\n    assertThat(multiPart.getFile(\"jsonfile\")[0].getContentType()).isEqualTo(\"application/json\");\r\n    assertThat(multiPart.getFile(\"jsonfile\")[0].getOriginalName()).isEqualTo(\"data.json\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\core\\src\\test\\java\\org\\apache\\struts2\\dispatcher\\multipart\\JakartaStreamMultiPartRequestTest.java",
  "methodName" : "emptyFileNameFieldsAreSkipped",
  "sourceCode" : "@Test\r\npublic void emptyFileNameFieldsAreSkipped() throws IOException {\r\n    // Test files with empty names are skipped\r\n    String content = endline + \"--\" + boundary + endline + \"Content-Disposition: form-data; name=\\\"emptyfile\\\"; filename=\\\"\\\"\" + endline + \"Content-Type: text/plain\" + endline + endline + \"This should be skipped\" + endline + \"--\" + boundary + endline + \"Content-Disposition: form-data; name=\\\"validfile\\\"; filename=\\\"valid.txt\\\"\" + endline + \"Content-Type: text/plain\" + endline + endline + \"This should be processed\" + endline + \"--\" + boundary + \"--\";\r\n    mockRequest.setContent(content.getBytes(StandardCharsets.UTF_8));\r\n    // when\r\n    multiPart.parse(mockRequest, tempDir);\r\n    // then\r\n    assertThat(multiPart.getErrors()).isEmpty();\r\n    assertThat(multiPart.uploadedFiles).hasSize(1);\r\n    assertThat(multiPart.getFile(\"emptyfile\")).isEmpty();\r\n    assertThat(multiPart.getFile(\"validfile\")).hasSize(1);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\core\\src\\test\\java\\org\\apache\\struts2\\dispatcher\\ParameterTest.java",
  "methodName" : "shouldConvertRequestValuesToStringArrays",
  "sourceCode" : "@Test(dataProvider = \"paramValues\")\r\npublic void shouldConvertRequestValuesToStringArrays(Object input, String[] expected) {\r\n    Parameter.Request request = new Parameter.Request(PARAM_NAME, input);\r\n    String[] result = request.getMultipleValues();\r\n    assertEquals(result, expected);\r\n    assertNotSame(result, input);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\core\\src\\test\\java\\org\\apache\\struts2\\dispatcher\\RequestMapTest.java",
  "methodName" : "shouldRetrieveRequestAttribute",
  "sourceCode" : "@Test\r\npublic void shouldRetrieveRequestAttribute() {\r\n    // given\r\n    HttpServletRequest request = new MockHttpServletRequest();\r\n    request.setAttribute(\"attr\", \"value\");\r\n    // when\r\n    RequestMap rm = new RequestMap(request);\r\n    Object value = rm.get(\"attr\");\r\n    // then\r\n    assertEquals(\"value\", value);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\core\\src\\test\\java\\org\\apache\\struts2\\dispatcher\\RequestMapTest.java",
  "methodName" : "shouldReturnNullIfKeyIsNull",
  "sourceCode" : "@Test\r\npublic void shouldReturnNullIfKeyIsNull() {\r\n    // given\r\n    HttpServletRequest request = new MockHttpServletRequest();\r\n    // when\r\n    RequestMap rm = new RequestMap(request);\r\n    Object value = rm.get(null);\r\n    // then\r\n    assertNull(value);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\core\\src\\test\\java\\org\\apache\\struts2\\dispatcher\\RequestMapTest.java",
  "methodName" : "shouldRemoveAttributeFromRequest",
  "sourceCode" : "@Test\r\npublic void shouldRemoveAttributeFromRequest() {\r\n    // given\r\n    HttpServletRequest request = new MockHttpServletRequest();\r\n    request.setAttribute(\"attr\", \"value\");\r\n    // when\r\n    RequestMap rm = new RequestMap(request);\r\n    Object value = rm.remove(\"attr\");\r\n    // then\r\n    assertEquals(\"value\", value);\r\n    assertNull(request.getAttribute(\"attr\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\core\\src\\test\\java\\org\\apache\\struts2\\dispatcher\\RequestMapTest.java",
  "methodName" : "shouldClearAttributes",
  "sourceCode" : "@Test\r\npublic void shouldClearAttributes() {\r\n    // given\r\n    HttpServletRequest request = new MockHttpServletRequest();\r\n    request.setAttribute(\"attr\", \"value\");\r\n    // when\r\n    RequestMap rm = new RequestMap(request);\r\n    Object value = rm.get(\"attr\");\r\n    // then\r\n    assertEquals(\"value\", value);\r\n    // when\r\n    rm.clear();\r\n    // then\r\n    assertNull(request.getAttribute(\"attr\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\core\\src\\test\\java\\org\\apache\\struts2\\dispatcher\\StrutsPrepareAndExecuteFilterIntegrationTest.java",
  "methodName" : "test404",
  "sourceCode" : "@Test\r\npublic void test404() throws ServletException, IOException {\r\n    MockHttpServletRequest request = new MockHttpServletRequest();\r\n    MockHttpServletResponse response = new MockHttpServletResponse();\r\n    MockFilterConfig filterConfig = new MockFilterConfig();\r\n    MockFilterChain filterChain = new MockFilterChain() {\r\n\r\n        @Override\r\n        public void doFilter(ServletRequest req, ServletResponse res) {\r\n            fail(\"Shouldn't get here\");\r\n        }\r\n    };\r\n    request.setRequestURI(\"/foo.action\");\r\n    StrutsPrepareAndExecuteFilter filter = new StrutsPrepareAndExecuteFilter();\r\n    filter.init(filterConfig);\r\n    filter.doFilter(request, response, filterChain);\r\n    assertEquals(404, response.getStatus());\r\n    assertNull(ActionContext.getContext());\r\n    assertNull(Dispatcher.getInstance());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\core\\src\\test\\java\\org\\apache\\struts2\\dispatcher\\StrutsPrepareAndExecuteFilterIntegrationTest.java",
  "methodName" : "test200",
  "sourceCode" : "@Test\r\npublic void test200() throws ServletException, IOException {\r\n    MockHttpServletRequest request = new MockHttpServletRequest();\r\n    MockHttpServletResponse response = new MockHttpServletResponse();\r\n    MockFilterConfig filterConfig = new MockFilterConfig();\r\n    MockFilterChain filterChain = new MockFilterChain() {\r\n\r\n        @Override\r\n        public void doFilter(ServletRequest req, ServletResponse res) {\r\n            fail(\"Shouldn't get here\");\r\n        }\r\n    };\r\n    request.setRequestURI(\"/hello.action\");\r\n    StrutsPrepareAndExecuteFilter filter = new StrutsPrepareAndExecuteFilter();\r\n    filter.init(filterConfig);\r\n    filter.doFilter(request, response, filterChain);\r\n    assertEquals(200, response.getStatus());\r\n    assertNull(ActionContext.getContext());\r\n    assertNull(Dispatcher.getInstance());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\core\\src\\test\\java\\org\\apache\\struts2\\dispatcher\\StrutsPrepareAndExecuteFilterIntegrationTest.java",
  "methodName" : "testActionMappingLookup",
  "sourceCode" : "@Test\r\npublic void testActionMappingLookup() throws ServletException, IOException {\r\n    MockHttpServletRequest request = new MockHttpServletRequest();\r\n    MockHttpServletResponse response = new MockHttpServletResponse();\r\n    MockFilterConfig filterConfig = new MockFilterConfig();\r\n    MockFilterChain filterChain = new MockFilterChain() {\r\n\r\n        @Override\r\n        public void doFilter(ServletRequest req, ServletResponse res) {\r\n            fail(\"Shouldn't get here\");\r\n        }\r\n    };\r\n    request.setRequestURI(\"/hello.action\");\r\n    StrutsPrepareAndExecuteFilter filter = new StrutsPrepareAndExecuteFilter();\r\n    filter.init(filterConfig);\r\n    filter.doFilter(request, response, filterChain);\r\n    assertEquals(200, response.getStatus());\r\n    assertNull(ActionContext.getContext());\r\n    assertNull(Dispatcher.getInstance());\r\n    //simulate a FORWARD\r\n    MockFilterChain filterChain2 = new MockFilterChain() {\r\n\r\n        @Override\r\n        public void doFilter(ServletRequest req, ServletResponse res) {\r\n            req.setAttribute(\"__invoked\", true);\r\n        }\r\n    };\r\n    request.setRequestURI(\"hello.jsp\");\r\n    filter.doFilter(request, response, filterChain2);\r\n    assertEquals(200, response.getStatus());\r\n    assertNull(ActionContext.getContext());\r\n    assertNull(Dispatcher.getInstance());\r\n    assertTrue((Boolean) request.getAttribute(\"__invoked\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\core\\src\\test\\java\\org\\apache\\struts2\\dispatcher\\StrutsPrepareAndExecuteFilterIntegrationTest.java",
  "methodName" : "testUriPatternExclusion",
  "sourceCode" : "@Test\r\npublic void testUriPatternExclusion() throws ServletException, IOException {\r\n    MockHttpServletRequest request = new MockHttpServletRequest();\r\n    MockHttpServletResponse response = new MockHttpServletResponse();\r\n    MockFilterConfig filterConfig = new MockFilterConfig();\r\n    filterConfig.addInitParameter(\"struts.action.excludePattern\", \".*hello.*\");\r\n    MockFilterChain filterChain = new MockFilterChain() {\r\n\r\n        @Override\r\n        public void doFilter(ServletRequest req, ServletResponse res) {\r\n            req.setAttribute(\"i_was\", \"invoked\");\r\n        }\r\n    };\r\n    request.setRequestURI(\"/hello.action\");\r\n    StrutsPrepareAndExecuteFilter filter = new StrutsPrepareAndExecuteFilter();\r\n    filter.init(filterConfig);\r\n    filter.doFilter(request, response, filterChain);\r\n    assertEquals(200, response.getStatus());\r\n    assertEquals(\"invoked\", request.getAttribute(\"i_was\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\core\\src\\test\\java\\org\\apache\\struts2\\dispatcher\\StrutsPrepareAndExecuteFilterIntegrationTest.java",
  "methodName" : "testStaticFallthrough",
  "sourceCode" : "@Test\r\npublic void testStaticFallthrough() throws ServletException, IOException {\r\n    MockHttpServletRequest request = new MockHttpServletRequest();\r\n    MockHttpServletResponse response = new MockHttpServletResponse();\r\n    MockFilterConfig filterConfig = new MockFilterConfig();\r\n    MockFilterChain filterChain = new MockFilterChain() {\r\n\r\n        @Override\r\n        public void doFilter(ServletRequest req, ServletResponse res) {\r\n            assertNotNull(ActionContext.getContext());\r\n            assertNotNull(Dispatcher.getInstance());\r\n            try {\r\n                res.getWriter().write(\"found\");\r\n            } catch (IOException e) {\r\n                fail(e.getMessage());\r\n            }\r\n        }\r\n    };\r\n    request.setRequestURI(\"/foo.txt\");\r\n    StrutsPrepareAndExecuteFilter filter = new StrutsPrepareAndExecuteFilter();\r\n    filter.init(filterConfig);\r\n    filter.doFilter(request, response, filterChain);\r\n    assertEquals(200, response.getStatus());\r\n    assertEquals(\"found\", response.getContentAsString());\r\n    assertNull(ActionContext.getContext());\r\n    assertNull(Dispatcher.getInstance());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\core\\src\\test\\java\\org\\apache\\struts2\\dispatcher\\StrutsPrepareAndExecuteFilterIntegrationTest.java",
  "methodName" : "testStaticExecute",
  "sourceCode" : "@Test\r\npublic void testStaticExecute() throws ServletException, IOException {\r\n    MockHttpServletRequest request = new MockHttpServletRequest();\r\n    MockHttpServletResponse response = new MockHttpServletResponse();\r\n    MockFilterConfig filterConfig = new MockFilterConfig();\r\n    MockFilterChain filterChain = new MockFilterChain() {\r\n\r\n        @Override\r\n        public void doFilter(ServletRequest req, ServletResponse res) {\r\n            fail(\"Should never get here\");\r\n        }\r\n    };\r\n    request.setRequestURI(\"/static/utils.js\");\r\n    StrutsPrepareAndExecuteFilter filter = new StrutsPrepareAndExecuteFilter();\r\n    filter.init(filterConfig);\r\n    filter.doFilter(request, response, filterChain);\r\n    assertEquals(200, response.getStatus());\r\n    assertTrue(response.getContentAsString().contains(\"StrutsUtils\"));\r\n    assertNull(ActionContext.getContext());\r\n    assertNull(Dispatcher.getInstance());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\core\\src\\test\\java\\org\\apache\\struts2\\dispatcher\\StrutsPrepareAndExecuteFilterIntegrationTest.java",
  "methodName" : "testDestroy",
  "sourceCode" : "@Test\r\npublic void testDestroy() throws ServletException {\r\n    MockFilterConfig filterConfig = new MockFilterConfig();\r\n    final MockPrepareOperations[] prepareOperations = { null };\r\n    StrutsPrepareAndExecuteFilter filter = new StrutsPrepareAndExecuteFilter() {\r\n\r\n        @Override\r\n        protected PrepareOperations createPrepareOperations(Dispatcher dispatcher) {\r\n            prepareOperations[0] = new MockPrepareOperations(dispatcher);\r\n            return prepareOperations[0];\r\n        }\r\n    };\r\n    filter.init(filterConfig);\r\n    filter.destroy();\r\n    assertNotNull(prepareOperations[0]);\r\n    assertTrue(prepareOperations[0].isCleaned());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\core\\src\\test\\java\\org\\apache\\struts2\\dispatcher\\TwoFilterIntegrationTest.java",
  "methodName" : "test404",
  "sourceCode" : "@Test\r\npublic void test404() throws ServletException, IOException {\r\n    MockHttpServletResponse response = run(\"/foo.action\", filterPrepare, filterExecute, failFilter);\r\n    assertEquals(404, response.getStatus());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\core\\src\\test\\java\\org\\apache\\struts2\\dispatcher\\TwoFilterIntegrationTest.java",
  "methodName" : "test200",
  "sourceCode" : "@Test\r\npublic void test200() throws ServletException, IOException {\r\n    MockHttpServletResponse response = run(\"/hello.action\", filterPrepare, filterExecute, failFilter);\r\n    assertEquals(200, response.getStatus());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\core\\src\\test\\java\\org\\apache\\struts2\\dispatcher\\TwoFilterIntegrationTest.java",
  "methodName" : "testStaticFallthrough",
  "sourceCode" : "@Test\r\npublic void testStaticFallthrough() throws ServletException, IOException {\r\n    MockHttpServletResponse response = run(\"/foo.txt\", filterPrepare, filterExecute, stringFilter);\r\n    assertEquals(200, response.getStatus());\r\n    assertEquals(\"content\", response.getContentAsString());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\core\\src\\test\\java\\org\\apache\\struts2\\dispatcher\\TwoFilterIntegrationTest.java",
  "methodName" : "testStaticExecute",
  "sourceCode" : "@Test\r\npublic void testStaticExecute() throws ServletException, IOException {\r\n    MockHttpServletResponse response = run(\"/static/utils.js\", filterPrepare, filterExecute, failFilter);\r\n    assertEquals(200, response.getStatus());\r\n    assertTrue(response.getContentAsString().contains(\"StrutsUtils\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\core\\src\\test\\java\\org\\apache\\struts2\\dispatcher\\TwoFilterIntegrationTest.java",
  "methodName" : "testFilterInMiddle",
  "sourceCode" : "@Test\r\npublic void testFilterInMiddle() throws ServletException, IOException {\r\n    Filter middle = newFilter((req, res, chain) -> {\r\n        assertNotNull(ActionContext.getContext());\r\n        assertNotNull(Dispatcher.getInstance());\r\n        assertNull(ActionContext.getContext().getActionInvocation());\r\n        chain.doFilter(req, res);\r\n        assertEquals(\"hello\", ActionContext.getContext().getActionInvocation().getProxy().getActionName());\r\n    });\r\n    MockHttpServletResponse response = run(\"/hello.action\", filterPrepare, middle, filterExecute, failFilter);\r\n    assertEquals(200, response.getStatus());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\core\\src\\test\\java\\org\\apache\\struts2\\dispatcher\\TwoFilterIntegrationTest.java",
  "methodName" : "testActionContextNotClearedUntilEndWhenForwardedFromExcludedUrl",
  "sourceCode" : "/**\r\n * It is possible for a Struts excluded URL to be forwarded to a Struts URL. If this happens, the ActionContext\r\n * should not be cleared until the very first execution of the StrutsPrepareFilter, otherwise SiteMesh will malfunction.\r\n */\r\n@Test\r\npublic void testActionContextNotClearedUntilEndWhenForwardedFromExcludedUrl() throws ServletException, IOException {\r\n    Filter firstFilter = newFilter((req, res, chain) -> {\r\n        chain.doFilter(req, res);\r\n        // Assert ActionContext cleared at end of request lifecycle\r\n        assertNull(ActionContext.getContext());\r\n    });\r\n    Filter dummySiteMesh = newFilter((req, res, chain) -> {\r\n        // Assert ActionContext not created initially, as URL is Struts excluded\r\n        assertNull(ActionContext.getContext());\r\n        chain.doFilter(req, res);\r\n        // Assert ActionContext not cleared by second StrutsPrepareFilter even though it created it\r\n        assertNotNull(ActionContext.getContext());\r\n    });\r\n    Filter dummyForward = newFilter((req, res, chain) -> {\r\n        MockHttpServletRequest castReq = (MockHttpServletRequest) req;\r\n        String oldUri = castReq.getRequestURI();\r\n        castReq.setRequestURI(\"/hello.action\");\r\n        chain.doFilter(castReq, res);\r\n        castReq.setRequestURI(oldUri);\r\n    });\r\n    MockHttpServletResponse response = run(\"/excluded/hello.action\", singletonMap(\"struts.action.excludePattern\", \"^/excluded/hello.action\"), firstFilter, filterPrepare, dummySiteMesh, filterExecute, dummyForward, filterPrepare);\r\n    assertEquals(200, response.getStatus());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\core\\src\\test\\java\\org\\apache\\struts2\\inject\\ContainerImplTest.java",
  "methodName" : "fieldInjector",
  "sourceCode" : "@Test\r\npublic void fieldInjector() {\r\n    FieldCheck fieldCheck = new FieldCheck();\r\n    c.inject(fieldCheck);\r\n    assertEquals(\"Lukasz\", fieldCheck.getName());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\core\\src\\test\\java\\org\\apache\\struts2\\inject\\ContainerImplTest.java",
  "methodName" : "methodInjector",
  "sourceCode" : "@Test\r\npublic void methodInjector() {\r\n    MethodCheck methodCheck = new MethodCheck();\r\n    c.inject(methodCheck);\r\n    assertEquals(\"Lukasz\", methodCheck.getName());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\core\\src\\test\\java\\org\\apache\\struts2\\inject\\ContainerImplTest.java",
  "methodName" : "constructorInjector",
  "sourceCode" : "@Test\r\npublic void constructorInjector() {\r\n    ConstructorCheck constructorCheck = c.inject(ConstructorCheck.class);\r\n    assertEquals(\"Lukasz\", constructorCheck.getName());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\core\\src\\test\\java\\org\\apache\\struts2\\inject\\ContainerImplTest.java",
  "methodName" : "optionalConstructorInjector",
  "sourceCode" : "@Test\r\npublic void optionalConstructorInjector() {\r\n    OptionalConstructorCheck constructorCheck = c.inject(OptionalConstructorCheck.class);\r\n    assertNull(constructorCheck.getName());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\core\\src\\test\\java\\org\\apache\\struts2\\inject\\ContainerImplTest.java",
  "methodName" : "requiredOptionalConstructorInjector",
  "sourceCode" : "@Test\r\npublic void requiredOptionalConstructorInjector() {\r\n    RequiredOptionalConstructorCheck constructorCheck = c.inject(RequiredOptionalConstructorCheck.class);\r\n    assertNotNull(constructorCheck.getExistingName());\r\n    assertNull(constructorCheck.getNonExitingName());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\core\\src\\test\\java\\org\\apache\\struts2\\inject\\ContainerImplTest.java",
  "methodName" : "optionalRequiredConstructorInjector",
  "sourceCode" : "@Test\r\npublic void optionalRequiredConstructorInjector() {\r\n    OptionalRequiredConstructorCheck constructorCheck = c.inject(OptionalRequiredConstructorCheck.class);\r\n    assertNull(constructorCheck.getNonExitingName());\r\n    assertNotNull(constructorCheck.getExistingName());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\core\\src\\test\\java\\org\\apache\\struts2\\inject\\ContainerImplTest.java",
  "methodName" : "testFieldInjectorWithSecurityEnabled",
  "sourceCode" : "/**\r\n * Inject values into field under SecurityManager\r\n */\r\n@Test\r\npublic void testFieldInjectorWithSecurityEnabled() throws Exception {\r\n    assumeTrue(SystemUtils.isJavaVersionAtMost(JavaVersion.JAVA_20));\r\n    System.setSecurityManager(new TestSecurityManager());\r\n    assertThrows(DependencyException.class, () -> c.inject(new FieldCheck()));\r\n    System.setSecurityManager(null);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\core\\src\\test\\java\\org\\apache\\struts2\\inject\\ContainerImplTest.java",
  "methodName" : "testMethodInjectorWithSecurityEnabled",
  "sourceCode" : "/**\r\n * Inject values into method under SecurityManager\r\n */\r\n@Test\r\npublic void testMethodInjectorWithSecurityEnabled() {\r\n    assumeTrue(SystemUtils.isJavaVersionAtMost(JavaVersion.JAVA_20));\r\n    System.setSecurityManager(new TestSecurityManager());\r\n    assertThrows(DependencyException.class, () -> c.inject(new MethodCheck()));\r\n    System.setSecurityManager(null);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\core\\src\\test\\java\\org\\apache\\struts2\\inject\\ContainerImplTest.java",
  "methodName" : "testEarlyInitializable",
  "sourceCode" : "@Test\r\npublic void testEarlyInitializable() {\r\n    assertTrue(\"should being initialized already\", EarlyInitializableBean.initializedEarly);\r\n    EarlyInitializableCheck earlyInitializableCheck = new EarlyInitializableCheck();\r\n    c.inject(earlyInitializableCheck);\r\n    assertEquals(\"initialized early\", ((EarlyInitializableBean) earlyInitializableCheck.getEarlyInitializable()).getMessage());\r\n    assertEquals(\"initialized early\", ((EarlyInitializableBean) earlyInitializableCheck.getPrototypeEarlyInitializable()).getMessage());\r\n    EarlyInitializableCheck earlyInitializableCheck2 = new EarlyInitializableCheck();\r\n    c.inject(earlyInitializableCheck2);\r\n    assertEquals(\"singletons should not being initialized twice\", \"initialized early\", ((EarlyInitializableBean) earlyInitializableCheck2.getEarlyInitializable()).getMessage());\r\n    assertEquals(\"initialized early\", ((EarlyInitializableBean) earlyInitializableCheck2.getPrototypeEarlyInitializable()).getMessage());\r\n    assertEquals(\"singletons should being instantiated once\", earlyInitializableCheck.getEarlyInitializable(), earlyInitializableCheck2.getEarlyInitializable());\r\n    assertNotSame(\"prototypes should being instantiated for each injection\", earlyInitializableCheck.getPrototypeEarlyInitializable(), earlyInitializableCheck2.getPrototypeEarlyInitializable());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\core\\src\\test\\java\\org\\apache\\struts2\\inject\\ContainerImplTest.java",
  "methodName" : "testInitializable",
  "sourceCode" : "@Test\r\npublic void testInitializable() throws Exception {\r\n    assertFalse(\"should not being initialized already\", InitializableBean.initialized);\r\n    InitializableCheck initializableCheck = new InitializableCheck();\r\n    c.inject(initializableCheck);\r\n    assertTrue(\"should being initialized here\", InitializableBean.initialized);\r\n    assertEquals(\"initialized\", ((InitializableBean) initializableCheck.getInitializable()).getMessage());\r\n    assertEquals(\"initialized\", ((InitializableBean) initializableCheck.getPrototypeInitializable()).getMessage());\r\n    InitializableCheck initializableCheck2 = new InitializableCheck();\r\n    c.inject(initializableCheck2);\r\n    assertEquals(\"singletons should not being initialized twice\", \"initialized\", ((InitializableBean) initializableCheck2.getInitializable()).getMessage());\r\n    assertEquals(\"initialized\", ((InitializableBean) initializableCheck2.getPrototypeInitializable()).getMessage());\r\n    assertEquals(\"threads should not being initialized twice\", \"initialized\", ((InitializableBean) initializableCheck2.getThreadInitializable()).getMessage());\r\n    assertEquals(\"singletons should being instantiated once\", initializableCheck.getInitializable(), initializableCheck2.getInitializable());\r\n    assertNotSame(\"prototypes should being instantiated for each injection\", initializableCheck.getPrototypeInitializable(), initializableCheck2.getPrototypeInitializable());\r\n    assertEquals(\"threads should being instantiated once for each thread\", initializableCheck.getThreadInitializable(), initializableCheck2.getThreadInitializable());\r\n    final InitializableCheck initializableCheck3 = new InitializableCheck();\r\n    final TestScopeStrategy testScopeStrategy = new TestScopeStrategy();\r\n    Thread thread = new Thread(() -> {\r\n        ContainerBuilder cb2 = new ContainerBuilder();\r\n        cb2.factory(EarlyInitializable.class, EarlyInitializableBean.class, Scope.SINGLETON);\r\n        cb2.factory(Initializable.class, InitializableBean.class, Scope.SINGLETON);\r\n        cb2.factory(EarlyInitializable.class, \"prototypeEarlyInitializable\", EarlyInitializableBean.class, Scope.PROTOTYPE);\r\n        cb2.factory(Initializable.class, \"prototypeInitializable\", InitializableBean.class, Scope.PROTOTYPE);\r\n        cb2.factory(Initializable.class, \"requestInitializable\", InitializableBean.class, Scope.REQUEST);\r\n        cb2.factory(Initializable.class, \"sessionInitializable\", InitializableBean.class, Scope.SESSION);\r\n        cb2.factory(Initializable.class, \"threadInitializable\", InitializableBean.class, Scope.THREAD);\r\n        cb2.factory(Initializable.class, \"wizardInitializable\", InitializableBean.class, Scope.WIZARD);\r\n        Container c2 = cb2.create(false);\r\n        c2.setScopeStrategy(testScopeStrategy);\r\n        c2.inject(initializableCheck3);\r\n    });\r\n    thread.run();\r\n    thread.join();\r\n    assertNotSame(\"threads should being instantiated in new threads\", initializableCheck.getThreadInitializable(), initializableCheck3.getThreadInitializable());\r\n    assertEquals(\"initialized\", ((InitializableBean) initializableCheck3.getThreadInitializable()).getMessage());\r\n    assertEquals(\"initialized\", ((InitializableBean) initializableCheck3.getRequestInitializable()).getMessage());\r\n    assertEquals(\"initialized\", ((InitializableBean) initializableCheck3.getSessionInitializable()).getMessage());\r\n    assertEquals(\"initialized\", ((InitializableBean) initializableCheck3.getWizardInitializable()).getMessage());\r\n    assertEquals(testScopeStrategy.requestInitializable, initializableCheck3.getRequestInitializable());\r\n    assertEquals(testScopeStrategy.sessionInitializable, initializableCheck3.getSessionInitializable());\r\n    assertEquals(testScopeStrategy.wizardInitializable, initializableCheck3.getWizardInitializable());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\core\\src\\test\\java\\org\\apache\\struts2\\interceptor\\httpmethod\\HttpMethodTest.java",
  "methodName" : "shouldConvertHttpRequestMethod_toProperEnum",
  "sourceCode" : "@Test\r\npublic void shouldConvertHttpRequestMethod_toProperEnum() {\r\n    // given\r\n    String httpRequestMethod = \"post\";\r\n    // when\r\n    HttpMethod httpMethod = HttpMethod.parse(httpRequestMethod);\r\n    // then\r\n    assertEquals(HttpMethod.POST, httpMethod);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\core\\src\\test\\java\\org\\apache\\struts2\\interceptor\\httpmethod\\HttpMethodTest.java",
  "methodName" : "shouldValueOfThrowsException",
  "sourceCode" : "@Test\r\npublic void shouldValueOfThrowsException() {\r\n    // given\r\n    String httpRequestMethod = \"post\";\r\n    // when\r\n    Throwable expected = null;\r\n    try {\r\n        HttpMethod.valueOf(httpRequestMethod);\r\n    } catch (IllegalArgumentException e) {\r\n        expected = e;\r\n    }\r\n    // then\r\n    assertNotNull(expected);\r\n    assertEquals(expected.getClass(), IllegalArgumentException.class);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\core\\src\\test\\java\\org\\apache\\struts2\\interceptor\\parameter\\StrutsParameterAnnotationTest.java",
  "methodName" : "privateStrAnnotated",
  "sourceCode" : "/**\r\n * Private String field cannot be injected even when annotated.\r\n */\r\n@Test\r\npublic void privateStrAnnotated() {\r\n    testParameter(new FieldAction(), \"privateStr\", false);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\core\\src\\test\\java\\org\\apache\\struts2\\interceptor\\parameter\\StrutsParameterAnnotationTest.java",
  "methodName" : "publicStrAnnotated",
  "sourceCode" : "/**\r\n * Public String field can be injected when annotated.\r\n */\r\n@Test\r\npublic void publicStrAnnotated() {\r\n    testParameter(new FieldAction(), \"publicStr\", true);\r\n    assertThat(threadAllowlist.getAllowlist()).isEmpty();\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\core\\src\\test\\java\\org\\apache\\struts2\\interceptor\\parameter\\StrutsParameterAnnotationTest.java",
  "methodName" : "publicStrNotAnnotated",
  "sourceCode" : "/**\r\n * Public String field cannot be injected when not annotated.\r\n */\r\n@Test\r\npublic void publicStrNotAnnotated() {\r\n    testParameter(new FieldAction(), \"publicStrNotAnnotated\", false);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\core\\src\\test\\java\\org\\apache\\struts2\\interceptor\\parameter\\StrutsParameterAnnotationTest.java",
  "methodName" : "privatePojoAnnotated",
  "sourceCode" : "/**\r\n * Private Pojo field cannot be injected even when annotated with the appropriate depth.\r\n */\r\n@Test\r\npublic void privatePojoAnnotated() {\r\n    testParameter(new FieldAction(), \"privatePojo.key\", false);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\core\\src\\test\\java\\org\\apache\\struts2\\interceptor\\parameter\\StrutsParameterAnnotationTest.java",
  "methodName" : "publicPojoDepthZero",
  "sourceCode" : "/**\r\n * Public Pojo field cannot be injected when annotated with depth zero.\r\n */\r\n@Test\r\npublic void publicPojoDepthZero() {\r\n    testParameter(new FieldAction(), \"publicPojoDepthZero.key\", false);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\core\\src\\test\\java\\org\\apache\\struts2\\interceptor\\parameter\\StrutsParameterAnnotationTest.java",
  "methodName" : "publicPojoDepthOne",
  "sourceCode" : "/**\r\n * Public Pojo field can be injected when annotated with depth one.\r\n */\r\n@Test\r\npublic void publicPojoDepthOne() {\r\n    testParameter(new FieldAction(), \"publicPojoDepthOne.key\", true);\r\n    assertThat(threadAllowlist.getAllowlist()).containsExactlyInAnyOrderElementsOf(getParentClasses(Pojo.class));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\core\\src\\test\\java\\org\\apache\\struts2\\interceptor\\parameter\\StrutsParameterAnnotationTest.java",
  "methodName" : "publicPojoDepthOne_sqrBracket",
  "sourceCode" : "/**\r\n * Public Pojo field can be injected when annotated with depth one, using the square bracket syntax.\r\n */\r\n@Test\r\npublic void publicPojoDepthOne_sqrBracket() {\r\n    testParameter(new FieldAction(), \"publicPojoDepthOne['key']\", true);\r\n    assertThat(threadAllowlist.getAllowlist()).containsExactlyInAnyOrderElementsOf(getParentClasses(Pojo.class));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\core\\src\\test\\java\\org\\apache\\struts2\\interceptor\\parameter\\StrutsParameterAnnotationTest.java",
  "methodName" : "publicPojoDepthOne_bracket",
  "sourceCode" : "/**\r\n * Public Pojo field can be injected when annotated with depth one, using the bracket syntax.\r\n */\r\n@Test\r\npublic void publicPojoDepthOne_bracket() {\r\n    testParameter(new FieldAction(), \"publicPojoDepthOne('key')\", true);\r\n    assertThat(threadAllowlist.getAllowlist()).containsExactlyInAnyOrderElementsOf(getParentClasses(Pojo.class));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\core\\src\\test\\java\\org\\apache\\struts2\\interceptor\\parameter\\StrutsParameterAnnotationTest.java",
  "methodName" : "publicPojoDepthTwo",
  "sourceCode" : "/**\r\n * Public Pojo field can be injected when annotated with a depth greater than required.\r\n */\r\n@Test\r\npublic void publicPojoDepthTwo() {\r\n    testParameter(new FieldAction(), \"publicPojoDepthTwo.key\", true);\r\n    assertThat(threadAllowlist.getAllowlist()).containsExactlyInAnyOrderElementsOf(getParentClasses(Pojo.class));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\core\\src\\test\\java\\org\\apache\\struts2\\interceptor\\parameter\\StrutsParameterAnnotationTest.java",
  "methodName" : "publicNestedPojoDepthOne",
  "sourceCode" : "/**\r\n * Public Pojo field cannot be injected two levels when only annotated with depth one.\r\n */\r\n@Test\r\npublic void publicNestedPojoDepthOne() {\r\n    testParameter(new FieldAction(), \"publicPojoDepthOne.key.key\", false);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\core\\src\\test\\java\\org\\apache\\struts2\\interceptor\\parameter\\StrutsParameterAnnotationTest.java",
  "methodName" : "publicNestedPojoDepthTwo",
  "sourceCode" : "/**\r\n * Public Pojo field can be injected two levels when annotated with depth two.\r\n */\r\n@Test\r\npublic void publicNestedPojoDepthTwo() {\r\n    testParameter(new FieldAction(), \"publicPojoDepthTwo.key.key\", true);\r\n    assertThat(threadAllowlist.getAllowlist()).containsExactlyInAnyOrderElementsOf(getParentClasses(Pojo.class));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\core\\src\\test\\java\\org\\apache\\struts2\\interceptor\\parameter\\StrutsParameterAnnotationTest.java",
  "methodName" : "publicNestedPojoDepthTwo_sqrBracket",
  "sourceCode" : "/**\r\n * Public Pojo field can be injected two levels when annotated with depth two, using the square bracket syntax.\r\n */\r\n@Test\r\npublic void publicNestedPojoDepthTwo_sqrBracket() {\r\n    testParameter(new FieldAction(), \"publicPojoDepthTwo['key']['key']\", true);\r\n    assertThat(threadAllowlist.getAllowlist()).containsExactlyInAnyOrderElementsOf(getParentClasses(Pojo.class));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\core\\src\\test\\java\\org\\apache\\struts2\\interceptor\\parameter\\StrutsParameterAnnotationTest.java",
  "methodName" : "publicNestedPojoDepthTwo_bracket",
  "sourceCode" : "/**\r\n * Public Pojo field can be injected two levels when annotated with depth two, using the bracket syntax.\r\n */\r\n@Test\r\npublic void publicNestedPojoDepthTwo_bracket() {\r\n    testParameter(new FieldAction(), \"publicPojoDepthTwo('key')('key')\", true);\r\n    assertThat(threadAllowlist.getAllowlist()).containsExactlyInAnyOrderElementsOf(getParentClasses(Pojo.class));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\core\\src\\test\\java\\org\\apache\\struts2\\interceptor\\parameter\\StrutsParameterAnnotationTest.java",
  "methodName" : "privateStrAnnotatedMethod",
  "sourceCode" : "/**\r\n * Private String setting method cannot be injected even when annotated.\r\n */\r\n@Test\r\npublic void privateStrAnnotatedMethod() {\r\n    testParameter(new MethodAction(), \"privateStr\", false);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\core\\src\\test\\java\\org\\apache\\struts2\\interceptor\\parameter\\StrutsParameterAnnotationTest.java",
  "methodName" : "publicStrAnnotatedMethod",
  "sourceCode" : "/**\r\n * Public String setting method can be injected when annotated.\r\n */\r\n@Test\r\npublic void publicStrAnnotatedMethod() {\r\n    testParameter(new MethodAction(), \"publicStr\", true);\r\n    assertThat(threadAllowlist.getAllowlist()).isEmpty();\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\core\\src\\test\\java\\org\\apache\\struts2\\interceptor\\parameter\\StrutsParameterAnnotationTest.java",
  "methodName" : "publicStrNotAnnotatedMethod",
  "sourceCode" : "/**\r\n * Public String setting method cannot be injected when not annotated.\r\n */\r\n@Test\r\npublic void publicStrNotAnnotatedMethod() {\r\n    testParameter(new MethodAction(), \"publicStrNotAnnotated\", false);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\core\\src\\test\\java\\org\\apache\\struts2\\interceptor\\parameter\\StrutsParameterAnnotationTest.java",
  "methodName" : "privatePojoAnnotatedMethod",
  "sourceCode" : "/**\r\n * Private Pojo returning method cannot be injected even when annotated with the appropriate depth.\r\n */\r\n@Test\r\npublic void privatePojoAnnotatedMethod() {\r\n    testParameter(new MethodAction(), \"privatePojo.key\", false);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\core\\src\\test\\java\\org\\apache\\struts2\\interceptor\\parameter\\StrutsParameterAnnotationTest.java",
  "methodName" : "publicPojoDepthZeroMethod",
  "sourceCode" : "/**\r\n * Public Pojo returning method cannot be injected when annotated with depth zero.\r\n */\r\n@Test\r\npublic void publicPojoDepthZeroMethod() {\r\n    testParameter(new MethodAction(), \"publicPojoDepthZero.key\", false);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\core\\src\\test\\java\\org\\apache\\struts2\\interceptor\\parameter\\StrutsParameterAnnotationTest.java",
  "methodName" : "publicPojoDepthOneMethod",
  "sourceCode" : "/**\r\n * Public Pojo returning method can be injected when annotated with depth one.\r\n */\r\n@Test\r\npublic void publicPojoDepthOneMethod() {\r\n    testParameter(new MethodAction(), \"publicPojoDepthOne.key\", true);\r\n    assertThat(threadAllowlist.getAllowlist()).containsExactlyInAnyOrderElementsOf(getParentClasses(Pojo.class));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\core\\src\\test\\java\\org\\apache\\struts2\\interceptor\\parameter\\StrutsParameterAnnotationTest.java",
  "methodName" : "publicNestedPojoDepthOneMethod",
  "sourceCode" : "/**\r\n * Public Pojo returning method cannot be injected two levels when only annotated with depth one.\r\n */\r\n@Test\r\npublic void publicNestedPojoDepthOneMethod() {\r\n    testParameter(new MethodAction(), \"publicPojoDepthOne.key.key\", false);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\core\\src\\test\\java\\org\\apache\\struts2\\interceptor\\parameter\\StrutsParameterAnnotationTest.java",
  "methodName" : "publicPojoDepthTwoMethod",
  "sourceCode" : "/**\r\n * Public Pojo returning method can be injected when annotated with a depth greater than required.\r\n */\r\n@Test\r\npublic void publicPojoDepthTwoMethod() {\r\n    testParameter(new MethodAction(), \"publicPojoDepthTwo.key\", true);\r\n    assertThat(threadAllowlist.getAllowlist()).containsExactlyInAnyOrderElementsOf(getParentClasses(Pojo.class));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\core\\src\\test\\java\\org\\apache\\struts2\\interceptor\\parameter\\StrutsParameterAnnotationTest.java",
  "methodName" : "publicNestedPojoDepthTwoMethod",
  "sourceCode" : "/**\r\n * Public Pojo returning method can be injected two levels when annotated with depth two.\r\n */\r\n@Test\r\npublic void publicNestedPojoDepthTwoMethod() {\r\n    testParameter(new MethodAction(), \"publicPojoDepthTwo.key.key\", true);\r\n    assertThat(threadAllowlist.getAllowlist()).containsExactlyInAnyOrderElementsOf(getParentClasses(Pojo.class));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\core\\src\\test\\java\\org\\apache\\struts2\\interceptor\\parameter\\StrutsParameterAnnotationTest.java",
  "methodName" : "publicPojoListDepthOne",
  "sourceCode" : "/**\r\n * Public list of Pojo field cannot be injected when annotated with depth one.\r\n */\r\n@Test\r\npublic void publicPojoListDepthOne() {\r\n    testParameter(new FieldAction(), \"publicPojoListDepthOne[0].key\", false);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\core\\src\\test\\java\\org\\apache\\struts2\\interceptor\\parameter\\StrutsParameterAnnotationTest.java",
  "methodName" : "publicPojoListDepthTwo",
  "sourceCode" : "/**\r\n * Public list of Pojo field can be injected when annotated with depth two.\r\n */\r\n@Test\r\npublic void publicPojoListDepthTwo() {\r\n    testParameter(new FieldAction(), \"publicPojoListDepthTwo[0].key\", true);\r\n    assertThat(threadAllowlist.getAllowlist()).containsExactlyInAnyOrderElementsOf(getParentClasses(List.class, Pojo.class));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\core\\src\\test\\java\\org\\apache\\struts2\\interceptor\\parameter\\StrutsParameterAnnotationTest.java",
  "methodName" : "publicPojoListDepthOneMethod",
  "sourceCode" : "/**\r\n * Public list of Pojo returning method cannot be injected when annotated with depth one.\r\n */\r\n@Test\r\npublic void publicPojoListDepthOneMethod() {\r\n    testParameter(new MethodAction(), \"publicPojoListDepthOne[0].key\", false);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\core\\src\\test\\java\\org\\apache\\struts2\\interceptor\\parameter\\StrutsParameterAnnotationTest.java",
  "methodName" : "publicPojoListDepthTwoMethod",
  "sourceCode" : "/**\r\n * Public list of Pojo returning method can be injected when annotated with depth two.\r\n */\r\n@Test\r\npublic void publicPojoListDepthTwoMethod() {\r\n    testParameter(new MethodAction(), \"publicPojoListDepthTwo[0].key\", true);\r\n    assertThat(threadAllowlist.getAllowlist()).containsExactlyInAnyOrderElementsOf(getParentClasses(List.class, Pojo.class));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\core\\src\\test\\java\\org\\apache\\struts2\\interceptor\\parameter\\StrutsParameterAnnotationTest.java",
  "methodName" : "publicPojoMapDepthTwo",
  "sourceCode" : "/**\r\n * Public map of Pojo field can be injected when annotated with depth two.\r\n */\r\n@Test\r\npublic void publicPojoMapDepthTwo() {\r\n    testParameter(new FieldAction(), \"publicPojoMapDepthTwo['a'].key\", true);\r\n    assertThat(threadAllowlist.getAllowlist()).containsExactlyInAnyOrderElementsOf(getParentClasses(Map.class, String.class, Pojo.class));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\core\\src\\test\\java\\org\\apache\\struts2\\interceptor\\parameter\\StrutsParameterAnnotationTest.java",
  "methodName" : "publicPojoMapDepthTwoMethod",
  "sourceCode" : "/**\r\n * Public map of Pojo returning method can be injected when annotated with depth two.\r\n */\r\n@Test\r\npublic void publicPojoMapDepthTwoMethod() {\r\n    testParameter(new MethodAction(), \"publicPojoMapDepthTwo['a'].key\", true);\r\n    assertThat(threadAllowlist.getAllowlist()).containsExactlyInAnyOrderElementsOf(getParentClasses(Map.class, String.class, Pojo.class));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\core\\src\\test\\java\\org\\apache\\struts2\\interceptor\\parameter\\StrutsParameterAnnotationTest.java",
  "methodName" : "publicStrNotAnnotated_transitionMode",
  "sourceCode" : "/**\r\n * Public String field can be injected even when not annotated, if transition mode is enabled.\r\n */\r\n@Test\r\npublic void publicStrNotAnnotated_transitionMode() {\r\n    parametersInterceptor.setRequireAnnotationsTransitionMode(Boolean.TRUE.toString());\r\n    testParameter(new FieldAction(), \"publicStrNotAnnotated\", true);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\core\\src\\test\\java\\org\\apache\\struts2\\interceptor\\parameter\\StrutsParameterAnnotationTest.java",
  "methodName" : "publicStrNotAnnotatedMethod_transitionMode",
  "sourceCode" : "/**\r\n * Public String setting method can be injected even when not annotated, if transition mode is enabled.\r\n */\r\n@Test\r\npublic void publicStrNotAnnotatedMethod_transitionMode() {\r\n    parametersInterceptor.setRequireAnnotationsTransitionMode(Boolean.TRUE.toString());\r\n    testParameter(new MethodAction(), \"publicStrNotAnnotated\", true);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\core\\src\\test\\java\\org\\apache\\struts2\\interceptor\\parameter\\StrutsParameterAnnotationTest.java",
  "methodName" : "publicModelPojo",
  "sourceCode" : "/**\r\n * Models of ModelDriven actions can be injected without any annotations on the Action.\r\n */\r\n@Test\r\npublic void publicModelPojo() {\r\n    var action = new ModelAction();\r\n    // Emulate ModelDrivenInterceptor running previously\r\n    var valueStack = new StubValueStack();\r\n    valueStack.push(action.getModel());\r\n    ActionContext.of().withValueStack(valueStack).bind();\r\n    testParameter(action, \"name\", true);\r\n    testParameter(action, \"name.nested\", true);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\core\\src\\test\\java\\org\\apache\\struts2\\interceptor\\parameter\\StrutsParameterAnnotationTest.java",
  "methodName" : "publicModelPojo_proxied",
  "sourceCode" : "/**\r\n * Models of ModelDriven actions can be injected without any annotations on the Action, even when the Action is\r\n * proxied.\r\n */\r\n@Test\r\npublic void publicModelPojo_proxied() {\r\n    var proxyFactory = new ProxyFactory(new ModelAction());\r\n    proxyFactory.setProxyTargetClass(true);\r\n    proxyFactory.addAdvice((MethodInterceptor) Joinpoint::proceed);\r\n    var proxiedAction = (ModelAction) proxyFactory.getProxy();\r\n    // Emulate ModelDrivenInterceptor running previously\r\n    var valueStack = new StubValueStack();\r\n    valueStack.push(proxiedAction.getModel());\r\n    ActionContext.of().withValueStack(valueStack).bind();\r\n    testParameter(proxiedAction, \"name\", true);\r\n    testParameter(proxiedAction, \"name.nested\", true);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\core\\src\\test\\java\\org\\apache\\struts2\\locale\\DefaultLocaleProviderTest.java",
  "methodName" : "getLocale",
  "sourceCode" : "@Test\r\npublic void getLocale() {\r\n    // given\r\n    ActionContext.getContext().withLocale(Locale.ITALY);\r\n    // when\r\n    Locale actual = provider.getLocale();\r\n    // then\r\n    assertEquals(Locale.ITALY, actual);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\core\\src\\test\\java\\org\\apache\\struts2\\locale\\DefaultLocaleProviderTest.java",
  "methodName" : "getLocaleNull",
  "sourceCode" : "@Test\r\npublic void getLocaleNull() {\r\n    // given\r\n    ActionContext backup = ActionContext.getContext();\r\n    ActionContext.clear();\r\n    // when\r\n    Locale actual = provider.getLocale();\r\n    // then\r\n    assertNull(actual);\r\n    ActionContext.bind(backup);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\core\\src\\test\\java\\org\\apache\\struts2\\locale\\DefaultLocaleProviderTest.java",
  "methodName" : "toLocale",
  "sourceCode" : "@Test\r\npublic void toLocale() {\r\n    // given\r\n    ActionContext.getContext().withLocale(Locale.GERMAN);\r\n    // when\r\n    Locale actual = provider.toLocale(\"it\");\r\n    // then\r\n    assertEquals(Locale.ITALIAN, actual);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\core\\src\\test\\java\\org\\apache\\struts2\\locale\\DefaultLocaleProviderTest.java",
  "methodName" : "toLocaleFull",
  "sourceCode" : "@Test\r\npublic void toLocaleFull() {\r\n    // given\r\n    ActionContext.getContext().withLocale(Locale.GERMAN);\r\n    // when\r\n    Locale actual = provider.toLocale(\"it_IT\");\r\n    // then\r\n    assertEquals(Locale.ITALY, actual);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\core\\src\\test\\java\\org\\apache\\struts2\\locale\\DefaultLocaleProviderTest.java",
  "methodName" : "toLocaleTrimEndOfLine",
  "sourceCode" : "@Test\r\npublic void toLocaleTrimEndOfLine() {\r\n    // given\r\n    ActionContext.getContext().withLocale(Locale.GERMAN);\r\n    // when\r\n    Locale actual = provider.toLocale(\"it_IT\\n\");\r\n    // then\r\n    assertEquals(Locale.ITALY, actual);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\core\\src\\test\\java\\org\\apache\\struts2\\locale\\DefaultLocaleProviderTest.java",
  "methodName" : "toLocaleTrimEmptySpace",
  "sourceCode" : "@Test\r\npublic void toLocaleTrimEmptySpace() {\r\n    // given\r\n    ActionContext.getContext().withLocale(Locale.GERMAN);\r\n    // when\r\n    Locale actual = provider.toLocale(\" it_IT \");\r\n    // then\r\n    assertEquals(Locale.ITALY, actual);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\core\\src\\test\\java\\org\\apache\\struts2\\locale\\DefaultLocaleProviderTest.java",
  "methodName" : "isValidLocaleNull",
  "sourceCode" : "@Test\r\npublic void isValidLocaleNull() {\r\n    // given\r\n    ActionContext.getContext().withLocale(Locale.GERMAN);\r\n    // when\r\n    boolean actual = provider.isValidLocale(null);\r\n    // then\r\n    assertFalse(actual);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\core\\src\\test\\java\\org\\apache\\struts2\\locale\\DefaultLocaleProviderTest.java",
  "methodName" : "isValidLocale",
  "sourceCode" : "@Test\r\npublic void isValidLocale() {\r\n    // given\r\n    ActionContext.getContext().withLocale(Locale.GERMAN);\r\n    // when\r\n    boolean actual = provider.isValidLocale(Locale.ITALIAN);\r\n    // then\r\n    assertTrue(actual);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\core\\src\\test\\java\\org\\apache\\struts2\\locale\\DefaultLocaleProviderTest.java",
  "methodName" : "isValidLocaleString",
  "sourceCode" : "@Test\r\npublic void isValidLocaleString() {\r\n    // given\r\n    ActionContext.getContext().withLocale(Locale.GERMAN);\r\n    // when\r\n    boolean actual = provider.isValidLocaleString(\"it\");\r\n    // then\r\n    assertTrue(actual);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\core\\src\\test\\java\\org\\apache\\struts2\\locale\\DefaultLocaleProviderTest.java",
  "methodName" : "isValidLocaleStringNot",
  "sourceCode" : "@Test\r\npublic void isValidLocaleStringNot() {\r\n    // given\r\n    ActionContext.getContext().withLocale(Locale.GERMAN);\r\n    // when\r\n    boolean actual = provider.isValidLocaleString(\"italy\");\r\n    // then\r\n    assertFalse(actual);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\core\\src\\test\\java\\org\\apache\\struts2\\LocaleProviderTest.java",
  "methodName" : "toLocale",
  "sourceCode" : "@Test\r\npublic void toLocale() {\r\n    // given\r\n    DummyLocale locale = new DummyLocale();\r\n    // when\r\n    Locale actual = locale.toLocale(\"de\");\r\n    // then\r\n    assertEquals(Locale.GERMAN, actual);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\core\\src\\test\\java\\org\\apache\\struts2\\LocaleProviderTest.java",
  "methodName" : "toLocaleTrim",
  "sourceCode" : "@Test\r\npublic void toLocaleTrim() {\r\n    // given\r\n    DummyLocale locale = new DummyLocale();\r\n    // when\r\n    Locale actual = locale.toLocale(\" de_DE \");\r\n    // then\r\n    assertEquals(Locale.GERMANY, actual);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\core\\src\\test\\java\\org\\apache\\struts2\\LocaleProviderTest.java",
  "methodName" : "toLocaleNull",
  "sourceCode" : "@Test\r\npublic void toLocaleNull() {\r\n    // given\r\n    DummyLocale locale = new DummyLocale();\r\n    // when\r\n    Locale actual = locale.toLocale(\"germany\");\r\n    // then\r\n    assertNull(actual);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\core\\src\\test\\java\\org\\apache\\struts2\\ognl\\ProviderAllowlistTest.java",
  "methodName" : "registerAllowlist",
  "sourceCode" : "@Test\r\npublic void registerAllowlist() {\r\n    providerAllowlist.registerAllowlist(key1, new HashSet<>(asList(String.class, Integer.class)));\r\n    providerAllowlist.registerAllowlist(key2, new HashSet<>(asList(Double.class, Integer.class)));\r\n    assertThat(providerAllowlist.getProviderAllowlist()).containsExactlyInAnyOrder(String.class, Integer.class, Double.class);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\core\\src\\test\\java\\org\\apache\\struts2\\ognl\\ProviderAllowlistTest.java",
  "methodName" : "registerAllowlist_twice",
  "sourceCode" : "@Test\r\npublic void registerAllowlist_twice() {\r\n    providerAllowlist.registerAllowlist(key1, new HashSet<>(asList(String.class, Integer.class)));\r\n    providerAllowlist.registerAllowlist(key1, new HashSet<>(asList(Double.class, Integer.class)));\r\n    assertThat(providerAllowlist.getProviderAllowlist()).containsExactlyInAnyOrder(Integer.class, Double.class);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\core\\src\\test\\java\\org\\apache\\struts2\\ognl\\ProviderAllowlistTest.java",
  "methodName" : "clearAllowlist",
  "sourceCode" : "@Test\r\npublic void clearAllowlist() {\r\n    providerAllowlist.registerAllowlist(key1, new HashSet<>(asList(String.class, Integer.class)));\r\n    providerAllowlist.registerAllowlist(key2, new HashSet<>(asList(Double.class, Integer.class)));\r\n    providerAllowlist.clearAllowlist(key1);\r\n    assertThat(providerAllowlist.getProviderAllowlist()).containsExactlyInAnyOrder(Integer.class, Double.class);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\core\\src\\test\\java\\org\\apache\\struts2\\ognl\\ProviderAllowlistTest.java",
  "methodName" : "clearAllowlist_both",
  "sourceCode" : "@Test\r\npublic void clearAllowlist_both() {\r\n    providerAllowlist.registerAllowlist(key1, new HashSet<>(asList(String.class, Integer.class)));\r\n    providerAllowlist.registerAllowlist(key2, new HashSet<>(asList(Double.class, Integer.class)));\r\n    providerAllowlist.clearAllowlist(key1);\r\n    providerAllowlist.clearAllowlist(key2);\r\n    assertThat(providerAllowlist.getProviderAllowlist()).isEmpty();\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\core\\src\\test\\java\\org\\apache\\struts2\\ognl\\SecurityMemberAccessTest.java",
  "methodName" : "defaultExclusionList",
  "sourceCode" : "@Test\r\npublic void defaultExclusionList() throws Exception {\r\n    Set<String> excludedClasses = reflectField(\"excludedClasses\");\r\n    assertThat(excludedClasses).containsExactly(Object.class.getName());\r\n    assignNewSma(false);\r\n    excludedClasses = reflectField(\"excludedClasses\");\r\n    assertThat(excludedClasses).containsExactlyInAnyOrder(Object.class.getName(), Class.class.getName());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\core\\src\\test\\java\\org\\apache\\struts2\\ognl\\SecurityMemberAccessTest.java",
  "methodName" : "configurationCollectionsImmutable",
  "sourceCode" : "@Test\r\npublic void configurationCollectionsImmutable() throws Exception {\r\n    List<String> fields = Arrays.asList(\"excludedClasses\", \"excludedPackageNames\", \"excludedPackageNamePatterns\", \"excludedPackageExemptClasses\", \"allowlistClasses\", \"allowlistPackageNames\", \"excludeProperties\", \"acceptProperties\");\r\n    for (String field : fields) {\r\n        Collection<String> fieldVal = reflectField(field);\r\n        assertThrows(UnsupportedOperationException.class, () -> fieldVal.add(\"foo\"));\r\n        if (!fieldVal.isEmpty()) {\r\n            String firstVal = fieldVal.iterator().next();\r\n            assertThrows(UnsupportedOperationException.class, () -> fieldVal.remove(firstVal));\r\n            assertThrows(UnsupportedOperationException.class, fieldVal::clear);\r\n        }\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\core\\src\\test\\java\\org\\apache\\struts2\\ognl\\SecurityMemberAccessTest.java",
  "methodName" : "exclusionListsAreAdditive_classes",
  "sourceCode" : "@Test\r\npublic void exclusionListsAreAdditive_classes() throws Exception {\r\n    Collection<String> fieldVal = reflectField(\"excludedClasses\");\r\n    Set<String> existing = new HashSet<>(fieldVal);\r\n    Collection<String> newExcludedClasses = Arrays.asList(FooBar.class.getName(), String.class.getName());\r\n    sma.useExcludedClasses(String.join(\",\", newExcludedClasses));\r\n    existing.addAll(newExcludedClasses);\r\n    fieldVal = reflectField(\"excludedClasses\");\r\n    assertThat(fieldVal).containsExactlyInAnyOrderElementsOf(existing);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\core\\src\\test\\java\\org\\apache\\struts2\\ognl\\SecurityMemberAccessTest.java",
  "methodName" : "exclusionListsAreAdditive_packages",
  "sourceCode" : "@Test\r\npublic void exclusionListsAreAdditive_packages() throws Exception {\r\n    sma.useExcludedPackageNames(Foo.class.getPackage().getName());\r\n    Collection<String> fieldVal = reflectField(\"excludedPackageNames\");\r\n    Set<String> existing = new HashSet<>(fieldVal);\r\n    Collection<String> newExcludedPackages = Arrays.asList(FooBar.class.getPackage().getName(), String.class.getPackage().getName());\r\n    sma.useExcludedPackageNames(String.join(\",\", newExcludedPackages));\r\n    existing.addAll(newExcludedPackages);\r\n    fieldVal = reflectField(\"excludedPackageNames\");\r\n    assertThat(fieldVal).containsExactlyInAnyOrderElementsOf(existing);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\core\\src\\test\\java\\org\\apache\\struts2\\ognl\\SecurityMemberAccessTest.java",
  "methodName" : "useExcludedPackageNames",
  "sourceCode" : "@Test\r\npublic void useExcludedPackageNames() {\r\n    assertThrows(ConfigurationException.class, () -> sma.useExcludedPackageNames(\"java.lang\\njava.awt\"));\r\n    assertThrows(ConfigurationException.class, () -> sma.useExcludedPackageNames(\"java.lang\\tjava.awt\"));\r\n    ConfigurationException e = assertThrows(ConfigurationException.class, () -> sma.useExcludedPackageNames(\"java.lang java.awt\"));\r\n    assertTrue(e.getMessage().contains(\"erroneous whitespace characters\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\core\\src\\test\\java\\org\\apache\\struts2\\ognl\\SecurityMemberAccessTest.java",
  "methodName" : "useExcludedPackagePatterns",
  "sourceCode" : "@Test\r\npublic void useExcludedPackagePatterns() {\r\n    ConfigurationException e = assertThrows(ConfigurationException.class, () -> sma.useExcludedPackageNamePatterns(\"[\"));\r\n    assertTrue(e.getMessage().contains(\"invalid regex\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\core\\src\\test\\java\\org\\apache\\struts2\\ognl\\SecurityMemberAccessTest.java",
  "methodName" : "testWithoutClassExclusion",
  "sourceCode" : "@Test\r\npublic void testWithoutClassExclusion() throws Exception {\r\n    // given\r\n    String propertyName = \"stringField\";\r\n    Member member = FooBar.class.getMethod(formGetterName(propertyName));\r\n    // when\r\n    boolean accessible = sma.isAccessible(context, target, member, propertyName);\r\n    // then\r\n    assertTrue(accessible);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\core\\src\\test\\java\\org\\apache\\struts2\\ognl\\SecurityMemberAccessTest.java",
  "methodName" : "testClassExclusion",
  "sourceCode" : "@Test\r\npublic void testClassExclusion() throws Exception {\r\n    // given\r\n    String propertyName = \"stringField\";\r\n    Member member = FooBar.class.getDeclaredMethod(formGetterName(propertyName));\r\n    sma.useExcludedClasses(FooBar.class.getName());\r\n    // when\r\n    boolean accessible = sma.isAccessible(context, target, member, propertyName);\r\n    // then\r\n    assertFalse(accessible);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\core\\src\\test\\java\\org\\apache\\struts2\\ognl\\SecurityMemberAccessTest.java",
  "methodName" : "testObjectClassExclusion",
  "sourceCode" : "@Test\r\npublic void testObjectClassExclusion() throws Exception {\r\n    // given\r\n    String propertyName = \"toString\";\r\n    Member member = FooBar.class.getMethod(propertyName);\r\n    // when\r\n    boolean accessible = sma.isAccessible(context, target, member, propertyName);\r\n    // then\r\n    assertFalse(\"toString() from Object is accessible!!!\", accessible);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\core\\src\\test\\java\\org\\apache\\struts2\\ognl\\SecurityMemberAccessTest.java",
  "methodName" : "testObjectOverwrittenMethodsExclusion",
  "sourceCode" : "@Test\r\npublic void testObjectOverwrittenMethodsExclusion() throws Exception {\r\n    // given\r\n    String propertyName = \"hashCode\";\r\n    Member member = FooBar.class.getMethod(propertyName);\r\n    // when\r\n    boolean accessible = sma.isAccessible(context, target, member, propertyName);\r\n    // then\r\n    assertTrue(\"hashCode() from FooBar isn't accessible!!!\", accessible);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\core\\src\\test\\java\\org\\apache\\struts2\\ognl\\SecurityMemberAccessTest.java",
  "methodName" : "testInterfaceInheritanceExclusion",
  "sourceCode" : "@Test\r\npublic void testInterfaceInheritanceExclusion() throws Exception {\r\n    // given\r\n    String propertyName = \"barLogic\";\r\n    Member member = BarInterface.class.getMethod(propertyName);\r\n    sma.useExcludedClasses(BarInterface.class.getName());\r\n    // when\r\n    boolean accessible = sma.isAccessible(context, target, member, propertyName);\r\n    // then\r\n    assertFalse(\"barLogic() from BarInterface is accessible!!!\", accessible);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\core\\src\\test\\java\\org\\apache\\struts2\\ognl\\SecurityMemberAccessTest.java",
  "methodName" : "testMiddleOfInheritanceExclusion1",
  "sourceCode" : "@Test\r\npublic void testMiddleOfInheritanceExclusion1() throws Exception {\r\n    // given\r\n    String propertyName = \"fooLogic\";\r\n    Member member = FooBar.class.getMethod(propertyName);\r\n    sma.useExcludedClasses(BarInterface.class.getName());\r\n    // when\r\n    boolean accessible = sma.isAccessible(context, target, member, propertyName);\r\n    // then\r\n    assertTrue(\"fooLogic() from FooInterface isn't accessible!!!\", accessible);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\core\\src\\test\\java\\org\\apache\\struts2\\ognl\\SecurityMemberAccessTest.java",
  "methodName" : "testMiddleOfInheritanceExclusion2",
  "sourceCode" : "@Test\r\npublic void testMiddleOfInheritanceExclusion2() throws Exception {\r\n    // given\r\n    String propertyName = \"barLogic\";\r\n    Member member = BarInterface.class.getMethod(propertyName);\r\n    sma.useExcludedClasses(BarInterface.class.getName());\r\n    // when\r\n    boolean accessible = sma.isAccessible(context, target, member, propertyName);\r\n    // then\r\n    assertFalse(\"barLogic() from BarInterface is accessible!!!\", accessible);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\core\\src\\test\\java\\org\\apache\\struts2\\ognl\\SecurityMemberAccessTest.java",
  "methodName" : "testMiddleOfInheritanceExclusion3",
  "sourceCode" : "@Test\r\npublic void testMiddleOfInheritanceExclusion3() throws Exception {\r\n    // given\r\n    String propertyName = \"barLogic\";\r\n    Member member = BarInterface.class.getMethod(propertyName);\r\n    sma.useExcludedClasses(FooInterface.class.getName());\r\n    // when\r\n    boolean accessible = sma.isAccessible(context, target, member, propertyName);\r\n    // then\r\n    assertTrue(\"barLogic() from BarInterface isn't accessible!!!\", accessible);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\core\\src\\test\\java\\org\\apache\\struts2\\ognl\\SecurityMemberAccessTest.java",
  "methodName" : "testPackageExclusion",
  "sourceCode" : "@Test\r\npublic void testPackageExclusion() throws Exception {\r\n    // given\r\n    sma.useExcludedPackageNamePatterns(\"^\" + FooBar.class.getPackage().getName().replaceAll(\"\\\\.\", \"\\\\\\\\.\") + \".*\");\r\n    String propertyName = \"stringField\";\r\n    Member member = FooBar.class.getMethod(formGetterName(propertyName));\r\n    // when\r\n    boolean actual = sma.isAccessible(context, target, member, propertyName);\r\n    // then\r\n    assertFalse(\"stringField is accessible!\", actual);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\core\\src\\test\\java\\org\\apache\\struts2\\ognl\\SecurityMemberAccessTest.java",
  "methodName" : "testPackageExclusionExemption",
  "sourceCode" : "@Test\r\npublic void testPackageExclusionExemption() throws Exception {\r\n    // given\r\n    sma.useExcludedPackageNamePatterns(\"^\" + FooBar.class.getPackage().getName().replaceAll(\"\\\\.\", \"\\\\\\\\.\") + \".*\");\r\n    sma.useExcludedPackageExemptClasses(FooBar.class.getName());\r\n    String propertyName = \"stringField\";\r\n    Member member = FooBar.class.getMethod(formGetterName(propertyName));\r\n    // when\r\n    boolean actual = sma.isAccessible(context, target, member, propertyName);\r\n    // then\r\n    assertTrue(\"stringField isn't accessible!\", actual);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\core\\src\\test\\java\\org\\apache\\struts2\\ognl\\SecurityMemberAccessTest.java",
  "methodName" : "testPackageNameExclusion",
  "sourceCode" : "@Test\r\npublic void testPackageNameExclusion() throws Exception {\r\n    // given\r\n    sma.useExcludedPackageNames(FooBar.class.getPackage().getName());\r\n    String propertyName = \"stringField\";\r\n    Member member = FooBar.class.getMethod(formGetterName(propertyName));\r\n    // when\r\n    boolean actual = sma.isAccessible(context, target, member, propertyName);\r\n    // then\r\n    assertFalse(\"stringField is accessible!\", actual);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\core\\src\\test\\java\\org\\apache\\struts2\\ognl\\SecurityMemberAccessTest.java",
  "methodName" : "testPackageNameExclusionExemption",
  "sourceCode" : "@Test\r\npublic void testPackageNameExclusionExemption() throws Exception {\r\n    // given\r\n    sma.useExcludedPackageNames(FooBar.class.getPackage().getName());\r\n    sma.useExcludedPackageExemptClasses(FooBar.class.getName());\r\n    String propertyName = \"stringField\";\r\n    Member member = FooBar.class.getMethod(formGetterName(propertyName));\r\n    // when\r\n    boolean actual = sma.isAccessible(context, target, member, propertyName);\r\n    // then\r\n    assertTrue(\"stringField isn't accessible!\", actual);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\core\\src\\test\\java\\org\\apache\\struts2\\ognl\\SecurityMemberAccessTest.java",
  "methodName" : "testPackageNameExclusionExemption2",
  "sourceCode" : "@Test\r\npublic void testPackageNameExclusionExemption2() throws Exception {\r\n    // given\r\n    sma.useExcludedPackageNames(FooBar.class.getPackage().getName());\r\n    // Exemption must exist for both classes (target and member) if they both match a banned package\r\n    sma.useExcludedPackageExemptClasses(BarInterface.class.getName());\r\n    String propertyName = \"barLogic\";\r\n    Member member = BarInterface.class.getMethod(propertyName);\r\n    // when\r\n    boolean actual = sma.isAccessible(context, target, member, propertyName);\r\n    // then\r\n    assertFalse(\"barLogic is accessible!\", actual);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\core\\src\\test\\java\\org\\apache\\struts2\\ognl\\SecurityMemberAccessTest.java",
  "methodName" : "testPackageNameExclusionExemption3",
  "sourceCode" : "@Test\r\npublic void testPackageNameExclusionExemption3() throws Exception {\r\n    // given\r\n    sma.useExcludedPackageNames(FooBar.class.getPackage().getName());\r\n    // Exemption must exist for both classes (target and member) if they both match a banned package\r\n    sma.useExcludedPackageExemptClasses(String.join(\",\", BarInterface.class.getName(), FooBar.class.getName()));\r\n    String propertyName = \"barLogic\";\r\n    Member member = BarInterface.class.getMethod(propertyName);\r\n    // when\r\n    boolean actual = sma.isAccessible(context, target, member, propertyName);\r\n    // then\r\n    assertTrue(\"barLogic isn't accessible!\", actual);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\core\\src\\test\\java\\org\\apache\\struts2\\ognl\\SecurityMemberAccessTest.java",
  "methodName" : "testDefaultPackageExclusion",
  "sourceCode" : "@Test\r\npublic void testDefaultPackageExclusion() throws Exception {\r\n    // given\r\n    sma.useExcludedPackageNamePatterns(\"^\" + FooBar.class.getPackage().getName().replaceAll(\"\\\\.\", \"\\\\\\\\.\") + \".*\");\r\n    Class<?> clazz = Class.forName(\"PackagelessAction\");\r\n    // when\r\n    boolean actual = sma.isPackageExcluded(clazz);\r\n    // then\r\n    assertFalse(\"default package is excluded!\", actual);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\core\\src\\test\\java\\org\\apache\\struts2\\ognl\\SecurityMemberAccessTest.java",
  "methodName" : "testDefaultPackageExclusionSetting",
  "sourceCode" : "@Test\r\npublic void testDefaultPackageExclusionSetting() throws Exception {\r\n    sma.useDisallowDefaultPackageAccess(Boolean.TRUE.toString());\r\n    Class<?> clazz = Class.forName(\"PackagelessAction\");\r\n    boolean actual = sma.isAccessible(null, clazz.getConstructor().newInstance(), clazz.getMethod(\"execute\"), null);\r\n    assertFalse(\"default package isn't excluded!\", actual);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\core\\src\\test\\java\\org\\apache\\struts2\\ognl\\SecurityMemberAccessTest.java",
  "methodName" : "testDefaultPackageExclusion2",
  "sourceCode" : "@Test\r\npublic void testDefaultPackageExclusion2() throws Exception {\r\n    // given\r\n    sma.useExcludedPackageNamePatterns(\"^$\");\r\n    Class<?> clazz = Class.forName(\"PackagelessAction\");\r\n    // when\r\n    boolean actual = sma.isPackageExcluded(clazz);\r\n    // then\r\n    assertTrue(\"default package isn't excluded!\", actual);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\core\\src\\test\\java\\org\\apache\\struts2\\ognl\\SecurityMemberAccessTest.java",
  "methodName" : "testAccessEnum",
  "sourceCode" : "@Test\r\npublic void testAccessEnum() throws Exception {\r\n    // when\r\n    Member values = MyValues.class.getMethod(\"values\");\r\n    boolean actual = sma.isAccessible(context, MyValues.class, values, null);\r\n    // then\r\n    assertFalse(\"Access to enums is allowed!\", actual);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\core\\src\\test\\java\\org\\apache\\struts2\\ognl\\SecurityMemberAccessTest.java",
  "methodName" : "testAccessEnum_alternateValues",
  "sourceCode" : "@Test\r\npublic void testAccessEnum_alternateValues() throws Exception {\r\n    // when\r\n    Member alternateValues = MyValues.class.getMethod(\"values\", String.class);\r\n    boolean actual = sma.isAccessible(context, MyValues.class, alternateValues, null);\r\n    // then\r\n    assertFalse(\"Access to unrelated #values method not blocked!\", actual);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\core\\src\\test\\java\\org\\apache\\struts2\\ognl\\SecurityMemberAccessTest.java",
  "methodName" : "testAccessStaticMethod",
  "sourceCode" : "@Test\r\npublic void testAccessStaticMethod() throws Exception {\r\n    // given\r\n    sma.useExcludedClasses(Class.class.getName());\r\n    // when\r\n    Member method = StaticTester.class.getMethod(\"sayHello\");\r\n    boolean actual = sma.isAccessible(context, StaticTester.class, method, null);\r\n    // then\r\n    assertFalse(\"Access to static method is not blocked!\", actual);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\core\\src\\test\\java\\org\\apache\\struts2\\ognl\\SecurityMemberAccessTest.java",
  "methodName" : "testAccessStaticField",
  "sourceCode" : "@Test\r\npublic void testAccessStaticField() throws Exception {\r\n    // given\r\n    sma.useExcludedClasses(Class.class.getName());\r\n    // when\r\n    Member method = StaticTester.class.getField(\"MAX_VALUE\");\r\n    boolean actual = sma.isAccessible(context, null, method, null);\r\n    // then\r\n    assertTrue(\"Access to static field is blocked!\", actual);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\core\\src\\test\\java\\org\\apache\\struts2\\ognl\\SecurityMemberAccessTest.java",
  "methodName" : "testBlockedStaticFieldWhenFlagIsTrue",
  "sourceCode" : "@Test\r\npublic void testBlockedStaticFieldWhenFlagIsTrue() throws Exception {\r\n    // given\r\n    assignNewSma(true);\r\n    sma.useExcludedClasses(Class.class.getName());\r\n    // when\r\n    Member method = StaticTester.class.getField(\"MAX_VALUE\");\r\n    boolean actual = sma.isAccessible(context, null, method, null);\r\n    // then\r\n    assertTrue(\"Access to public static field is blocked?\", actual);\r\n    // public static final test\r\n    // given\r\n    assignNewSma(true);\r\n    sma.useExcludedClasses(Class.class.getName());\r\n    // when\r\n    method = StaticTester.class.getField(\"MIN_VALUE\");\r\n    actual = sma.isAccessible(context, null, method, null);\r\n    // then\r\n    assertTrue(\"Access to public final static field is blocked?\", actual);\r\n    // package static test\r\n    // given\r\n    assignNewSma(true);\r\n    sma.useExcludedClasses(Class.class.getName());\r\n    // when\r\n    method = StaticTester.getFieldByName(\"PACKAGE_STRING\");\r\n    actual = sma.isAccessible(context, null, method, null);\r\n    // then\r\n    assertFalse(\"Access to package static field is allowed?\", actual);\r\n    // package final static test\r\n    // given\r\n    assignNewSma(true);\r\n    sma.useExcludedClasses(Class.class.getName());\r\n    // when\r\n    method = StaticTester.getFieldByName(\"FINAL_PACKAGE_STRING\");\r\n    actual = sma.isAccessible(context, null, method, null);\r\n    // then\r\n    assertFalse(\"Access to package final static field is allowed?\", actual);\r\n    // protected static test\r\n    // given\r\n    assignNewSma(true);\r\n    sma.useExcludedClasses(Class.class.getName());\r\n    // when\r\n    method = StaticTester.getFieldByName(\"PROTECTED_STRING\");\r\n    actual = sma.isAccessible(context, null, method, null);\r\n    // then\r\n    assertFalse(\"Access to protected static field is allowed?\", actual);\r\n    // protected final static test\r\n    // given\r\n    assignNewSma(true);\r\n    sma.useExcludedClasses(Class.class.getName());\r\n    // when\r\n    method = StaticTester.getFieldByName(\"FINAL_PROTECTED_STRING\");\r\n    actual = sma.isAccessible(context, null, method, null);\r\n    // then\r\n    assertFalse(\"Access to protected final static field is allowed?\", actual);\r\n    // private static test\r\n    // given\r\n    assignNewSma(true);\r\n    sma.useExcludedClasses(Class.class.getName());\r\n    // when\r\n    method = StaticTester.getFieldByName(\"PRIVATE_STRING\");\r\n    actual = sma.isAccessible(context, null, method, null);\r\n    // then\r\n    assertFalse(\"Access to private static field is allowed?\", actual);\r\n    // private final static test\r\n    // given\r\n    assignNewSma(true);\r\n    sma.useExcludedClasses(Class.class.getName());\r\n    // when\r\n    method = StaticTester.getFieldByName(\"FINAL_PRIVATE_STRING\");\r\n    actual = sma.isAccessible(context, null, method, null);\r\n    // then\r\n    assertFalse(\"Access to private final static field is allowed?\", actual);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\core\\src\\test\\java\\org\\apache\\struts2\\ognl\\SecurityMemberAccessTest.java",
  "methodName" : "testBlockedStaticFieldWhenFlagIsFalse",
  "sourceCode" : "@Test\r\npublic void testBlockedStaticFieldWhenFlagIsFalse() throws Exception {\r\n    // given\r\n    assignNewSma(false);\r\n    // when\r\n    Member method = StaticTester.class.getField(\"MAX_VALUE\");\r\n    boolean actual = sma.isAccessible(context, null, method, null);\r\n    // then\r\n    assertFalse(\"Access to public static field is allowed when flag false?\", actual);\r\n    // public static final test\r\n    // given\r\n    assignNewSma(false);\r\n    // when\r\n    method = StaticTester.class.getField(\"MIN_VALUE\");\r\n    actual = sma.isAccessible(context, null, method, null);\r\n    // then\r\n    assertFalse(\"Access to public final static field is allowed when flag is false?\", actual);\r\n    // package static test\r\n    // given\r\n    assignNewSma(false);\r\n    // when\r\n    method = StaticTester.getFieldByName(\"PACKAGE_STRING\");\r\n    actual = sma.isAccessible(context, null, method, null);\r\n    // then\r\n    assertFalse(\"Access to package static field is allowed?\", actual);\r\n    // package final static test\r\n    // given\r\n    assignNewSma(false);\r\n    // when\r\n    method = StaticTester.getFieldByName(\"FINAL_PACKAGE_STRING\");\r\n    actual = sma.isAccessible(context, null, method, null);\r\n    // then\r\n    assertFalse(\"Access to package final static field is allowed?\", actual);\r\n    // protected static test\r\n    // given\r\n    assignNewSma(false);\r\n    // when\r\n    method = StaticTester.getFieldByName(\"PROTECTED_STRING\");\r\n    actual = sma.isAccessible(context, null, method, null);\r\n    // then\r\n    assertFalse(\"Access to protected static field is allowed?\", actual);\r\n    // protected final static test\r\n    // given\r\n    assignNewSma(false);\r\n    // when\r\n    method = StaticTester.getFieldByName(\"FINAL_PROTECTED_STRING\");\r\n    actual = sma.isAccessible(context, null, method, null);\r\n    // then\r\n    assertFalse(\"Access to protected final static field is allowed?\", actual);\r\n    // private static test\r\n    // given\r\n    assignNewSma(false);\r\n    // when\r\n    method = StaticTester.getFieldByName(\"PRIVATE_STRING\");\r\n    actual = sma.isAccessible(context, null, method, null);\r\n    // then\r\n    assertFalse(\"Access to private static field is allowed?\", actual);\r\n    // private final static test\r\n    // given\r\n    assignNewSma(false);\r\n    // when\r\n    method = StaticTester.getFieldByName(\"FINAL_PRIVATE_STRING\");\r\n    actual = sma.isAccessible(context, null, method, null);\r\n    // then\r\n    assertFalse(\"Access to private final static field is allowed?\", actual);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\core\\src\\test\\java\\org\\apache\\struts2\\ognl\\SecurityMemberAccessTest.java",
  "methodName" : "testBlockedStaticFieldWhenClassIsExcluded",
  "sourceCode" : "@Test\r\npublic void testBlockedStaticFieldWhenClassIsExcluded() throws Exception {\r\n    // given\r\n    sma.useExcludedClasses(String.join(\",\", Class.class.getName(), StaticTester.class.getName()));\r\n    // when\r\n    Member method = StaticTester.class.getField(\"MAX_VALUE\");\r\n    boolean actual = sma.isAccessible(context, null, method, null);\r\n    // then\r\n    assertFalse(\"Access to static field isn't blocked!\", actual);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\core\\src\\test\\java\\org\\apache\\struts2\\ognl\\SecurityMemberAccessTest.java",
  "methodName" : "testBlockStaticMethodAccess",
  "sourceCode" : "@Test\r\npublic void testBlockStaticMethodAccess() throws Exception {\r\n    // given\r\n    sma.useExcludedClasses(Class.class.getName());\r\n    // when\r\n    Member method = StaticTester.class.getMethod(\"sayHello\");\r\n    boolean actual = sma.isAccessible(context, StaticTester.class, method, null);\r\n    // then\r\n    assertFalse(\"Access to static isn't blocked!\", actual);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\core\\src\\test\\java\\org\\apache\\struts2\\ognl\\SecurityMemberAccessTest.java",
  "methodName" : "testBlockAccessIfClassIsExcluded",
  "sourceCode" : "@Test\r\npublic void testBlockAccessIfClassIsExcluded() throws Exception {\r\n    // given\r\n    sma.useExcludedClasses(Class.class.getName());\r\n    // when\r\n    Member method = Class.class.getMethod(\"getClassLoader\");\r\n    boolean actual = sma.isAccessible(context, Class.class, method, null);\r\n    // then\r\n    assertFalse(\"Access to method of excluded class isn't blocked!\", actual);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\core\\src\\test\\java\\org\\apache\\struts2\\ognl\\SecurityMemberAccessTest.java",
  "methodName" : "testBlockAccessIfClassIsExcluded_2",
  "sourceCode" : "@Test\r\npublic void testBlockAccessIfClassIsExcluded_2() throws Exception {\r\n    // given\r\n    sma.useExcludedClasses(ClassLoader.class.getName());\r\n    // when\r\n    Member method = ClassLoader.class.getMethod(\"loadClass\", String.class);\r\n    ClassLoader classLoaderTarget = this.getClass().getClassLoader();\r\n    boolean actual = sma.isAccessible(context, classLoaderTarget, method, null);\r\n    // then\r\n    assertFalse(\"Invalid test! Access to method of excluded class isn't blocked!\", actual);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\core\\src\\test\\java\\org\\apache\\struts2\\ognl\\SecurityMemberAccessTest.java",
  "methodName" : "testAllowAccessIfClassIsNotExcluded",
  "sourceCode" : "@Test\r\npublic void testAllowAccessIfClassIsNotExcluded() throws Exception {\r\n    // given\r\n    sma.useExcludedClasses(ClassLoader.class.getName());\r\n    // when\r\n    Member method = Class.class.getMethod(\"getClassLoader\");\r\n    boolean actual = sma.isAccessible(context, Class.class, method, null);\r\n    // then\r\n    assertTrue(\"Invalid test! Access to method of non-excluded class is blocked!\", actual);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\core\\src\\test\\java\\org\\apache\\struts2\\ognl\\SecurityMemberAccessTest.java",
  "methodName" : "testIllegalArgumentExceptionExpectedForTargetMemberMismatch",
  "sourceCode" : "@Test\r\npublic void testIllegalArgumentExceptionExpectedForTargetMemberMismatch() throws Exception {\r\n    // given\r\n    sma.useExcludedClasses(Class.class.getName());\r\n    // when\r\n    Member method = ClassLoader.class.getMethod(\"loadClass\", String.class);\r\n    String mismatchTarget = \"misMatchTargetObject\";\r\n    try {\r\n        boolean actual = sma.isAccessible(context, mismatchTarget, method, null);\r\n        // then\r\n        assertFalse(\"Invalid test! Access to method of excluded class isn't blocked!\", actual);\r\n        fail(\"Mismatch between target and member did not cause IllegalArgumentException?\");\r\n    } catch (IllegalArgumentException iex) {\r\n        // Expected result is this exception\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\core\\src\\test\\java\\org\\apache\\struts2\\ognl\\SecurityMemberAccessTest.java",
  "methodName" : "testAccessPrimitiveInt",
  "sourceCode" : "@Test\r\npublic void testAccessPrimitiveInt() throws Exception {\r\n    // given\r\n    sma.useExcludedPackageNames(\"java.lang.,ognl,javax\");\r\n    String propertyName = \"intField\";\r\n    Member member = FooBar.class.getMethod(formGetterName(propertyName));\r\n    // when\r\n    boolean accessible = sma.isAccessible(context, target, member, propertyName);\r\n    // then\r\n    assertTrue(accessible);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\core\\src\\test\\java\\org\\apache\\struts2\\ognl\\SecurityMemberAccessTest.java",
  "methodName" : "testAccessPrimitiveDoubleWithNames",
  "sourceCode" : "@Test\r\npublic void testAccessPrimitiveDoubleWithNames() throws Exception {\r\n    // given\r\n    sma.useExcludedPackageNames(\"ognl.,javax.\");\r\n    Set<String> excluded = new HashSet<>();\r\n    excluded.add(Object.class.getName());\r\n    excluded.add(Runtime.class.getName());\r\n    excluded.add(System.class.getName());\r\n    excluded.add(Class.class.getName());\r\n    excluded.add(ClassLoader.class.getName());\r\n    sma.useExcludedClasses(String.join(\",\", excluded));\r\n    String propertyName = \"doubleValue\";\r\n    double myDouble = 1;\r\n    Member member = Double.class.getMethod(propertyName);\r\n    // when\r\n    boolean accessible = sma.isAccessible(context, myDouble, member, propertyName);\r\n    // then\r\n    assertTrue(accessible);\r\n    // given\r\n    propertyName = \"exit\";\r\n    member = System.class.getMethod(propertyName, int.class);\r\n    // when\r\n    accessible = sma.isAccessible(context, System.class, member, propertyName);\r\n    // then\r\n    assertFalse(accessible);\r\n    // given\r\n    propertyName = \"intField\";\r\n    member = FooBar.class.getMethod(formGetterName(propertyName));\r\n    // when\r\n    accessible = sma.isAccessible(context, target, member, propertyName);\r\n    // then\r\n    assertTrue(accessible);\r\n    // given\r\n    propertyName = \"doubleField\";\r\n    member = FooBar.class.getMethod(formGetterName(propertyName));\r\n    // when\r\n    accessible = sma.isAccessible(context, target, member, propertyName);\r\n    // then\r\n    assertTrue(accessible);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\core\\src\\test\\java\\org\\apache\\struts2\\ognl\\SecurityMemberAccessTest.java",
  "methodName" : "testAccessPrimitiveDoubleWithPackageRegExs",
  "sourceCode" : "@Test\r\npublic void testAccessPrimitiveDoubleWithPackageRegExs() throws Exception {\r\n    // given\r\n    sma.useExcludedPackageNamePatterns(\"^java\\\\.lang\\\\..*\");\r\n    String propertyName = \"doubleValue\";\r\n    double myDouble = 1;\r\n    Member member = Double.class.getMethod(propertyName);\r\n    // when\r\n    boolean accessible = sma.isAccessible(context, myDouble, member, propertyName);\r\n    // then\r\n    assertTrue(accessible);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\core\\src\\test\\java\\org\\apache\\struts2\\ognl\\SecurityMemberAccessTest.java",
  "methodName" : "testAccessMemberAccessIsAccessible",
  "sourceCode" : "@Test\r\npublic void testAccessMemberAccessIsAccessible() throws Exception {\r\n    // given\r\n    sma.useExcludedClasses(MemberAccess.class.getName());\r\n    String propertyName = \"excludedClasses\";\r\n    String setter = \"useExcludedClasses\";\r\n    Member member = SecurityMemberAccess.class.getMethod(setter, String.class);\r\n    // when\r\n    boolean accessible = sma.isAccessible(context, sma, member, propertyName);\r\n    // then\r\n    assertTrue(accessible);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\core\\src\\test\\java\\org\\apache\\struts2\\ognl\\SecurityMemberAccessTest.java",
  "methodName" : "testAccessMemberAccessIsBlocked",
  "sourceCode" : "@Test\r\npublic void testAccessMemberAccessIsBlocked() throws Exception {\r\n    // given\r\n    sma.useExcludedClasses(SecurityMemberAccess.class.getName());\r\n    String propertyName = \"excludedClasses\";\r\n    String setter = \"useExcludedClasses\";\r\n    Member member = SecurityMemberAccess.class.getMethod(setter, String.class);\r\n    // when\r\n    boolean accessible = sma.isAccessible(context, sma, member, propertyName);\r\n    // then\r\n    assertFalse(accessible);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\core\\src\\test\\java\\org\\apache\\struts2\\ognl\\SecurityMemberAccessTest.java",
  "methodName" : "testPackageNameExclusionAsCommaDelimited",
  "sourceCode" : "@Test\r\npublic void testPackageNameExclusionAsCommaDelimited() {\r\n    // given\r\n    sma.useExcludedPackageNames(\"java.lang\");\r\n    // when\r\n    boolean actual = sma.isPackageExcluded(String.class);\r\n    // then\r\n    assertTrue(\"package java.lang. is accessible!\", actual);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\core\\src\\test\\java\\org\\apache\\struts2\\ognl\\SecurityMemberAccessTest.java",
  "methodName" : "classInclusion",
  "sourceCode" : "/**\r\n * Test that the allowlist is enforced correctly for classes.\r\n */\r\n@Test\r\npublic void classInclusion() throws Exception {\r\n    sma.useEnforceAllowlistEnabled(Boolean.TRUE.toString());\r\n    TestBean2 bean = new TestBean2();\r\n    Method method = TestBean2.class.getMethod(\"getData\");\r\n    assertFalse(sma.checkAllowlist(bean, method));\r\n    sma.useAllowlistClasses(TestBean2.class.getName());\r\n    assertTrue(sma.checkAllowlist(bean, method));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\core\\src\\test\\java\\org\\apache\\struts2\\ognl\\SecurityMemberAccessTest.java",
  "methodName" : "packageInclusion",
  "sourceCode" : "/**\r\n * Test that the allowlist is enforced correctly for packages.\r\n */\r\n@Test\r\npublic void packageInclusion() throws Exception {\r\n    sma.useEnforceAllowlistEnabled(Boolean.TRUE.toString());\r\n    TestBean2 bean = new TestBean2();\r\n    Method method = TestBean2.class.getMethod(\"getData\");\r\n    assertFalse(sma.checkAllowlist(bean, method));\r\n    sma.useAllowlistPackageNames(TestBean2.class.getPackage().getName());\r\n    assertTrue(sma.checkAllowlist(bean, method));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\core\\src\\test\\java\\org\\apache\\struts2\\ognl\\SecurityMemberAccessTest.java",
  "methodName" : "classInclusion_subclass",
  "sourceCode" : "/**\r\n * Test that the allowlist doesn't allow inherited methods unless the declaring class is also allowlisted.\r\n */\r\n@Test\r\npublic void classInclusion_subclass() throws Exception {\r\n    sma.useEnforceAllowlistEnabled(Boolean.TRUE.toString());\r\n    sma.useAllowlistClasses(TestBean2.class.getName());\r\n    TestBean2 bean = new TestBean2();\r\n    Method method = TestBean2.class.getMethod(\"getName\");\r\n    assertFalse(sma.checkAllowlist(bean, method));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\core\\src\\test\\java\\org\\apache\\struts2\\ognl\\SecurityMemberAccessTest.java",
  "methodName" : "classInclusion_subclass_both",
  "sourceCode" : "/**\r\n * Test that the allowlist allows inherited methods when both the target and declaring class are allowlisted.\r\n */\r\n@Test\r\npublic void classInclusion_subclass_both() throws Exception {\r\n    sma.useEnforceAllowlistEnabled(Boolean.TRUE.toString());\r\n    sma.useAllowlistClasses(String.join(\",\", TestBean.class.getName(), TestBean2.class.getName()));\r\n    TestBean2 bean = new TestBean2();\r\n    Method method = TestBean2.class.getMethod(\"getName\");\r\n    assertTrue(sma.checkAllowlist(bean, method));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\core\\src\\test\\java\\org\\apache\\struts2\\ognl\\SecurityMemberAccessTest.java",
  "methodName" : "packageInclusion_subclass",
  "sourceCode" : "/**\r\n * Test that the allowlist doesn't allow inherited methods unless the package of the declaring class is also\r\n * allowlisted.\r\n */\r\n@Test\r\npublic void packageInclusion_subclass() throws Exception {\r\n    sma.useEnforceAllowlistEnabled(Boolean.TRUE.toString());\r\n    sma.useAllowlistPackageNames(TestBean2.class.getPackage().getName());\r\n    TestBean2 bean = new TestBean2();\r\n    Method method = TestBean2.class.getMethod(\"getName\");\r\n    assertFalse(sma.checkAllowlist(bean, method));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\core\\src\\test\\java\\org\\apache\\struts2\\ognl\\SecurityMemberAccessTest.java",
  "methodName" : "classInclusion_hibernateProxy_disallowProxyObjectAccess",
  "sourceCode" : "/**\r\n * When the allowlist is enabled and proxy object access is disallowed, Hibernate proxies should not be allowed.\r\n */\r\n@Test\r\npublic void classInclusion_hibernateProxy_disallowProxyObjectAccess() throws Exception {\r\n    FooBarInterface proxyObject = mockHibernateProxy(new FooBar(), FooBarInterface.class);\r\n    Method proxyMethod = proxyObject.getClass().getMethod(\"fooLogic\");\r\n    sma.useEnforceAllowlistEnabled(Boolean.TRUE.toString());\r\n    sma.useDisallowProxyObjectAccess(Boolean.TRUE.toString());\r\n    sma.useAllowlistClasses(FooBar.class.getName());\r\n    assertFalse(sma.checkAllowlist(proxyObject, proxyMethod));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\core\\src\\test\\java\\org\\apache\\struts2\\ognl\\SecurityMemberAccessTest.java",
  "methodName" : "classInclusion_hibernateProxy_allowProxyObjectAccess",
  "sourceCode" : "/**\r\n * When the allowlist is enabled and proxy object access is allowed, Hibernate proxies should be allowlisted based\r\n * on their underlying target object. Class allowlisting should work as expected.\r\n */\r\n@Test\r\npublic void classInclusion_hibernateProxy_allowProxyObjectAccess() throws Exception {\r\n    FooBarInterface proxyObject = mockHibernateProxy(new FooBar(), FooBarInterface.class);\r\n    Method proxyMethod = proxyObject.getClass().getMethod(\"fooLogic\");\r\n    sma.useEnforceAllowlistEnabled(Boolean.TRUE.toString());\r\n    sma.useDisallowProxyObjectAccess(Boolean.FALSE.toString());\r\n    sma.useAllowlistClasses(FooBar.class.getName());\r\n    assertTrue(sma.checkAllowlist(proxyObject, proxyMethod));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\core\\src\\test\\java\\org\\apache\\struts2\\ognl\\SecurityMemberAccessTest.java",
  "methodName" : "packageInclusion_subclass_both",
  "sourceCode" : "@Test\r\npublic void packageInclusion_subclass_both() throws Exception {\r\n    sma.useEnforceAllowlistEnabled(Boolean.TRUE.toString());\r\n    sma.useAllowlistPackageNames(String.join(\",\", TestBean.class.getPackage().getName(), TestBean2.class.getPackage().getName()));\r\n    TestBean2 bean = new TestBean2();\r\n    Method method = TestBean2.class.getMethod(\"getName\");\r\n    assertTrue(sma.checkAllowlist(bean, method));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\core\\src\\test\\java\\org\\apache\\struts2\\ognl\\StrutsOgnlGuardTest.java",
  "methodName" : "notConfigured",
  "sourceCode" : "@Test\r\npublic void notConfigured() throws Exception {\r\n    String expr = \"1+1\";\r\n    assertFalse(strutsOgnlGuard.isBlocked(expr));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\core\\src\\test\\java\\org\\apache\\struts2\\ognl\\StrutsOgnlGuardTest.java",
  "methodName" : "nonNodeTree",
  "sourceCode" : "@Test\r\npublic void nonNodeTree() throws Exception {\r\n    assertFalse(strutsOgnlGuard.isParsedTreeBlocked(\"String\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\core\\src\\test\\java\\org\\apache\\struts2\\ognl\\StrutsOgnlGuardTest.java",
  "methodName" : "nonExistentClass",
  "sourceCode" : "@Test\r\npublic void nonExistentClass() throws Exception {\r\n    ConfigurationException e = assertThrows(ConfigurationException.class, () -> strutsOgnlGuard.useExcludedNodeTypes(\"ognl.Kusal\"));\r\n    assertThat(e).hasMessageContaining(\"does not exist or cannot be loaded\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\core\\src\\test\\java\\org\\apache\\struts2\\ognl\\StrutsOgnlGuardTest.java",
  "methodName" : "invalidClass",
  "sourceCode" : "@Test\r\npublic void invalidClass() throws Exception {\r\n    ConfigurationException e = assertThrows(ConfigurationException.class, () -> strutsOgnlGuard.useExcludedNodeTypes(\"ognl.ElementsAccessor\"));\r\n    assertThat(e).hasMessageContaining(\"is not a subclass of ognl.Node\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\core\\src\\test\\java\\org\\apache\\struts2\\ognl\\StrutsOgnlGuardTest.java",
  "methodName" : "addBlocked",
  "sourceCode" : "@Test\r\npublic void addBlocked() throws Exception {\r\n    String expr = \"1+1\";\r\n    assertFalse(strutsOgnlGuard.isBlocked(expr));\r\n    strutsOgnlGuard.useExcludedNodeTypes(\"ognl.ASTAdd\");\r\n    assertTrue(strutsOgnlGuard.isBlocked(expr));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\core\\src\\test\\java\\org\\apache\\struts2\\ognl\\StrutsOgnlGuardTest.java",
  "methodName" : "nestedAddBlocked",
  "sourceCode" : "@Test\r\npublic void nestedAddBlocked() throws Exception {\r\n    String expr = \"{'a',1+1}\";\r\n    assertFalse(strutsOgnlGuard.isBlocked(expr));\r\n    strutsOgnlGuard.useExcludedNodeTypes(\"ognl.ASTAdd\");\r\n    assertTrue(strutsOgnlGuard.isBlocked(expr));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\core\\src\\test\\java\\org\\apache\\struts2\\url\\StrutsQueryStringBuilderTest.java",
  "methodName" : "testBuildParametersStringWithUrlHavingSomeExistingParameters",
  "sourceCode" : "@Test\r\npublic void testBuildParametersStringWithUrlHavingSomeExistingParameters() {\r\n    String expectedUrl = \"http://localhost:8080/myContext/myPage.jsp?initParam=initValue&amp;param1=value1&amp;param2=value2&amp;param3%22%3CsCrIpT%3Ealert%281%29%3B%3C%2FsCrIpT%3E=value3\";\r\n    Map<String, Object> parameters = new LinkedHashMap<>();\r\n    parameters.put(\"param1\", \"value1\");\r\n    parameters.put(\"param2\", \"value2\");\r\n    parameters.put(\"param3\\\"<sCrIpT>alert(1);</sCrIpT>\", \"value3\");\r\n    StringBuilder url = new StringBuilder(\"http://localhost:8080/myContext/myPage.jsp?initParam=initValue\");\r\n    builder.build(parameters, url, UrlHelper.AMP);\r\n    assertEquals(expectedUrl, url.toString());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\core\\src\\test\\java\\org\\apache\\struts2\\url\\StrutsQueryStringBuilderTest.java",
  "methodName" : "testBuildParametersStringWithJavaScriptInjected",
  "sourceCode" : "@Test\r\npublic void testBuildParametersStringWithJavaScriptInjected() {\r\n    String expectedUrl = \"http://localhost:8080/myContext/myPage.jsp?initParam=initValue&amp;param1=value1&amp;param2=value2&amp;param3%22%3Cscript+type%3D%22text%2Fjavascript%22%3Ealert%281%29%3B%3C%2Fscript%3E=value3\";\r\n    Map<String, Object> parameters = new LinkedHashMap<>();\r\n    parameters.put(\"param1\", \"value1\");\r\n    parameters.put(\"param2\", \"value2\");\r\n    parameters.put(\"param3\\\"<script type=\\\"text/javascript\\\">alert(1);</script>\", \"value3\");\r\n    StringBuilder url = new StringBuilder(\"http://localhost:8080/myContext/myPage.jsp?initParam=initValue\");\r\n    builder.build(parameters, url, UrlHelper.AMP);\r\n    assertEquals(expectedUrl, url.toString());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\core\\src\\test\\java\\org\\apache\\struts2\\url\\StrutsQueryStringBuilderTest.java",
  "methodName" : "testBuildParametersStringWithEmptyListParameters",
  "sourceCode" : "@Test\r\npublic void testBuildParametersStringWithEmptyListParameters() {\r\n    String expectedUrl = \"https://www.nowhere.com/myworld.html\";\r\n    Map<String, Object> parameters = new LinkedHashMap<>();\r\n    parameters.put(\"param1\", new String[] {});\r\n    parameters.put(\"param2\", new ArrayList<>());\r\n    StringBuilder url = new StringBuilder(\"https://www.nowhere.com/myworld.html\");\r\n    builder.build(parameters, url, UrlHelper.AMP);\r\n    assertEquals(expectedUrl, url.toString());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\core\\src\\test\\java\\org\\apache\\struts2\\url\\StrutsQueryStringBuilderTest.java",
  "methodName" : "testBuildParametersStringWithListParameters",
  "sourceCode" : "@Test\r\npublic void testBuildParametersStringWithListParameters() {\r\n    String expectedUrl = \"https://www.nowhere.com/myworld.html?param1=x&param2=y&param2=z\";\r\n    Map<String, Object> parameters = new LinkedHashMap<>();\r\n    parameters.put(\"param1\", new String[] { \"x\" });\r\n    parameters.put(\"param2\", new ArrayList<String>() {\r\n\r\n        {\r\n            add(\"y\");\r\n            add(\"z\");\r\n        }\r\n    });\r\n    StringBuilder url = new StringBuilder(\"https://www.nowhere.com/myworld.html\");\r\n    builder.build(parameters, url, \"&\");\r\n    assertEquals(expectedUrl, url.toString());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\core\\src\\test\\java\\org\\apache\\struts2\\url\\StrutsQueryStringParserTest.java",
  "methodName" : "testParseQuery",
  "sourceCode" : "@Test\r\npublic void testParseQuery() {\r\n    Map<String, Object> result = parser.parse(\"aaa=aaaval&bbb=bbbval&ccc=&%3Ca%22%3E=%3Cval%3E\").getQueryParams();\r\n    assertEquals(\"aaaval\", result.get(\"aaa\"));\r\n    assertEquals(\"bbbval\", result.get(\"bbb\"));\r\n    assertEquals(\"\", result.get(\"ccc\"));\r\n    assertEquals(\"<val>\", result.get(\"<a\\\">\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\core\\src\\test\\java\\org\\apache\\struts2\\url\\StrutsQueryStringParserTest.java",
  "methodName" : "testParseQueryIntoArray",
  "sourceCode" : "@Test\r\npublic void testParseQueryIntoArray() {\r\n    Map<String, Object> result = parser.parse(\"a=1&a=2&a=3\").getQueryParams();\r\n    Object actual = result.get(\"a\");\r\n    assertThat(actual).isInstanceOf(String[].class);\r\n    assertThat(Arrays.asList(actual)).containsOnly(\"1\", \"2\", \"3\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\core\\src\\test\\java\\org\\apache\\struts2\\url\\StrutsQueryStringParserTest.java",
  "methodName" : "testParseEmptyQuery",
  "sourceCode" : "@Test\r\npublic void testParseEmptyQuery() {\r\n    Map<String, Object> result = parser.parse(\"\").getQueryParams();\r\n    assertNotNull(result);\r\n    assertEquals(0, result.size());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\core\\src\\test\\java\\org\\apache\\struts2\\url\\StrutsQueryStringParserTest.java",
  "methodName" : "testParseNullQuery",
  "sourceCode" : "@Test\r\npublic void testParseNullQuery() {\r\n    Map<String, Object> result = parser.parse(null).getQueryParams();\r\n    assertNotNull(result);\r\n    assertEquals(0, result.size());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\core\\src\\test\\java\\org\\apache\\struts2\\url\\StrutsQueryStringParserTest.java",
  "methodName" : "testDecodeSpacesInQueryString",
  "sourceCode" : "@Test\r\npublic void testDecodeSpacesInQueryString() {\r\n    Map<String, Object> queryParameters = parser.parse(\"name=value+with+space\").getQueryParams();\r\n    assertTrue(queryParameters.containsKey(\"name\"));\r\n    assertEquals(\"value with space\", queryParameters.get(\"name\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\core\\src\\test\\java\\org\\apache\\struts2\\url\\StrutsQueryStringParserTest.java",
  "methodName" : "shouldProperlySplitParamsWithDoubleEqualSign",
  "sourceCode" : "@Test\r\npublic void shouldProperlySplitParamsWithDoubleEqualSign() {\r\n    Map<String, Object> queryParameters = parser.parse(\"id1=n123=&id2=n3456\").getQueryParams();\r\n    assertTrue(queryParameters.containsKey(\"id1\"));\r\n    assertTrue(queryParameters.containsKey(\"id2\"));\r\n    assertEquals(\"n123=\", queryParameters.get(\"id1\"));\r\n    assertEquals(\"n3456\", queryParameters.get(\"id2\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\core\\src\\test\\java\\org\\apache\\struts2\\url\\StrutsQueryStringParserTest.java",
  "methodName" : "shouldHandleParamWithNoValue1",
  "sourceCode" : "@Test\r\npublic void shouldHandleParamWithNoValue1() {\r\n    Map<String, Object> queryParameters = parser.parse(\"paramNoValue\").getQueryParams();\r\n    assertTrue(queryParameters.containsKey(\"paramNoValue\"));\r\n    assertEquals(\"\", queryParameters.get(\"paramNoValue\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\core\\src\\test\\java\\org\\apache\\struts2\\url\\StrutsQueryStringParserTest.java",
  "methodName" : "shouldHandleParamWithNoValue2",
  "sourceCode" : "@Test\r\npublic void shouldHandleParamWithNoValue2() {\r\n    Map<String, Object> queryParameters = parser.parse(\"paramNoValue&param1=1234\").getQueryParams();\r\n    assertTrue(queryParameters.containsKey(\"paramNoValue\"));\r\n    assertTrue(queryParameters.containsKey(\"param1\"));\r\n    assertEquals(\"1234\", queryParameters.get(\"param1\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\core\\src\\test\\java\\org\\apache\\struts2\\url\\StrutsQueryStringParserTest.java",
  "methodName" : "shouldHandleParamAndFragment",
  "sourceCode" : "@Test\r\npublic void shouldHandleParamAndFragment() {\r\n    QueryStringParser.Result queryParameters = parser.parse(\"param1=1234#test\");\r\n    assertTrue(queryParameters.getQueryParams().containsKey(\"param1\"));\r\n    assertEquals(\"1234\", queryParameters.getQueryParams().get(\"param1\"));\r\n    assertEquals(\"test\", queryParameters.getQueryFragment());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\core\\src\\test\\java\\org\\apache\\struts2\\url\\StrutsQueryStringParserTest.java",
  "methodName" : "shouldHandleOnlyFragment",
  "sourceCode" : "@Test\r\npublic void shouldHandleOnlyFragment() {\r\n    QueryStringParser.Result queryParameters = parser.parse(\"#test\");\r\n    assertTrue(queryParameters.getQueryParams().isEmpty());\r\n    assertEquals(\"test\", queryParameters.getQueryFragment());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\core\\src\\test\\java\\org\\apache\\struts2\\url\\StrutsUrlDecoderTest.java",
  "methodName" : "testDecodeStringInvalid",
  "sourceCode" : "@Test\r\npublic void testDecodeStringInvalid() {\r\n    // %n rather than %nn should throw an IAE according to the Javadoc\r\n    Exception exception = null;\r\n    try {\r\n        decoder.decode(\"%5xxxxx\", \"ISO-8859-1\", false);\r\n    } catch (Exception e) {\r\n        exception = e;\r\n    }\r\n    assertTrue(exception instanceof IllegalArgumentException);\r\n    // Edge case trying to trigger ArrayIndexOutOfBoundsException\r\n    exception = null;\r\n    try {\r\n        decoder.decode(\"%5\", \"ISO-8859-1\", false);\r\n    } catch (Exception e) {\r\n        exception = e;\r\n    }\r\n    assertTrue(exception instanceof IllegalArgumentException);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\core\\src\\test\\java\\org\\apache\\struts2\\url\\StrutsUrlDecoderTest.java",
  "methodName" : "testDecodeStringValidIso88591Start",
  "sourceCode" : "@Test\r\npublic void testDecodeStringValidIso88591Start() {\r\n    String result = decoder.decode(\"%41xxxx\", \"ISO-8859-1\", false);\r\n    assertEquals(\"Axxxx\", result);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\core\\src\\test\\java\\org\\apache\\struts2\\url\\StrutsUrlDecoderTest.java",
  "methodName" : "testDecodeStringValidIso88591Middle",
  "sourceCode" : "@Test\r\npublic void testDecodeStringValidIso88591Middle() {\r\n    String result = decoder.decode(\"xx%41xx\", \"ISO-8859-1\", false);\r\n    assertEquals(\"xxAxx\", result);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\core\\src\\test\\java\\org\\apache\\struts2\\url\\StrutsUrlDecoderTest.java",
  "methodName" : "testDecodeStringValidIso88591End",
  "sourceCode" : "@Test\r\npublic void testDecodeStringValidIso88591End() {\r\n    String result = decoder.decode(\"xxxx%41\", \"ISO-8859-1\", false);\r\n    assertEquals(\"xxxxA\", result);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\core\\src\\test\\java\\org\\apache\\struts2\\url\\StrutsUrlDecoderTest.java",
  "methodName" : "testDecodeStringValidUtf8Start",
  "sourceCode" : "@Test\r\npublic void testDecodeStringValidUtf8Start() {\r\n    String result = decoder.decode(\"%c3%aaxxxx\", \"UTF-8\", false);\r\n    assertEquals(\"\\u00eaxxxx\", result);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\core\\src\\test\\java\\org\\apache\\struts2\\url\\StrutsUrlDecoderTest.java",
  "methodName" : "testDecodeStringValidUtf8Middle",
  "sourceCode" : "@Test\r\npublic void testDecodeStringValidUtf8Middle() {\r\n    String result = decoder.decode(\"xx%c3%aaxx\", \"UTF-8\", false);\r\n    assertEquals(\"xx\\u00eaxx\", result);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\core\\src\\test\\java\\org\\apache\\struts2\\url\\StrutsUrlDecoderTest.java",
  "methodName" : "testDecodeStringValidUtf8End",
  "sourceCode" : "@Test\r\npublic void testDecodeStringValidUtf8End() {\r\n    String result = decoder.decode(\"xxxx%c3%aa\", \"UTF-8\", false);\r\n    assertEquals(\"xxxx\\u00ea\", result);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\core\\src\\test\\java\\org\\apache\\struts2\\url\\StrutsUrlDecoderTest.java",
  "methodName" : "testDecodePlusCharAsSpace",
  "sourceCode" : "@Test\r\npublic void testDecodePlusCharAsSpace() {\r\n    String result = decoder.decode(\"a+b\", \"UTF-8\", true);\r\n    assertEquals(\"a b\", result);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\core\\src\\test\\java\\org\\apache\\struts2\\url\\StrutsUrlDecoderTest.java",
  "methodName" : "testDecodeNull",
  "sourceCode" : "@Test\r\npublic void testDecodeNull() {\r\n    String result = decoder.decode(null);\r\n    assertNull(result);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\core\\src\\test\\java\\org\\apache\\struts2\\url\\StrutsUrlDecoderTest.java",
  "methodName" : "testSettingEncoding",
  "sourceCode" : "@Test\r\npublic void testSettingEncoding() {\r\n    decoder.setEncoding(\"ISO-8859-1\");\r\n    String result = decoder.decode(\"xxxx%41\");\r\n    assertEquals(\"xxxxA\", result);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\core\\src\\test\\java\\org\\apache\\struts2\\url\\StrutsUrlDecoderTest.java",
  "methodName" : "testDecoding",
  "sourceCode" : "@Test\r\npublic void testDecoding() {\r\n    String result = decoder.decode(\"%E6%96%B0%E8%81%9E\");\r\n    assertEquals(\"\\u65b0\\u805e\", result);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\core\\src\\test\\java\\org\\apache\\struts2\\url\\StrutsUrlEncoderTest.java",
  "methodName" : "testEncodeValidIso88591Start",
  "sourceCode" : "@Test\r\npublic void testEncodeValidIso88591Start() {\r\n    String result = encoder.encode(\"%xxxx\", \"ISO-8859-1\");\r\n    assertEquals(\"%25xxxx\", result);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\core\\src\\test\\java\\org\\apache\\struts2\\url\\StrutsUrlEncoderTest.java",
  "methodName" : "testEncodeValidIso88591Middle",
  "sourceCode" : "@Test\r\npublic void testEncodeValidIso88591Middle() {\r\n    String result = encoder.encode(\"xx%xx\", \"ISO-8859-1\");\r\n    assertEquals(\"xx%25xx\", result);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\core\\src\\test\\java\\org\\apache\\struts2\\url\\StrutsUrlEncoderTest.java",
  "methodName" : "testEncodeValidIso88591End",
  "sourceCode" : "@Test\r\npublic void testEncodeValidIso88591End() {\r\n    String result = encoder.encode(\"xxxx%\", \"ISO-8859-1\");\r\n    assertEquals(\"xxxx%25\", result);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\core\\src\\test\\java\\org\\apache\\struts2\\url\\StrutsUrlEncoderTest.java",
  "methodName" : "testEncodeValidUtf8Start",
  "sourceCode" : "@Test\r\npublic void testEncodeValidUtf8Start() {\r\n    String result = encoder.encode(\"\\u00eaxxxx\", \"UTF-8\");\r\n    assertEquals(\"%C3%AAxxxx\", result);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\core\\src\\test\\java\\org\\apache\\struts2\\url\\StrutsUrlEncoderTest.java",
  "methodName" : "testEncodeValidUtf8Middle",
  "sourceCode" : "@Test\r\npublic void testEncodeValidUtf8Middle() {\r\n    String result = encoder.encode(\"xx\\u00eaxx\", \"UTF-8\");\r\n    assertEquals(\"xx%C3%AAxx\", result);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\core\\src\\test\\java\\org\\apache\\struts2\\url\\StrutsUrlEncoderTest.java",
  "methodName" : "testEncodeValidUtf8End",
  "sourceCode" : "@Test\r\npublic void testEncodeValidUtf8End() {\r\n    String result = encoder.encode(\"xxxx\\u00ea\", \"UTF-8\");\r\n    assertEquals(\"xxxx%C3%AA\", result);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\core\\src\\test\\java\\org\\apache\\struts2\\url\\StrutsUrlEncoderTest.java",
  "methodName" : "testEncodePlusCharAsSpace",
  "sourceCode" : "@Test\r\npublic void testEncodePlusCharAsSpace() {\r\n    String result = encoder.encode(\"a b\", \"UTF-8\");\r\n    assertEquals(\"a+b\", result);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\core\\src\\test\\java\\org\\apache\\struts2\\url\\StrutsUrlEncoderTest.java",
  "methodName" : "testEncodeException",
  "sourceCode" : "@Test\r\npublic void testEncodeException() {\r\n    String result = encoder.encode(\"a b\", \"UNKNOWN-8\");\r\n    assertEquals(\"a b\", result);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\core\\src\\test\\java\\org\\apache\\struts2\\url\\StrutsUrlEncoderTest.java",
  "methodName" : "testSettingEncoding",
  "sourceCode" : "@Test\r\npublic void testSettingEncoding() {\r\n    encoder.setEncoding(\"ISO-8859-1\");\r\n    String result = encoder.encode(\"%xxxx\");\r\n    assertEquals(\"%25xxxx\", result);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\core\\src\\test\\java\\org\\apache\\struts2\\url\\StrutsUrlEncoderTest.java",
  "methodName" : "testEncoding",
  "sourceCode" : "@Test\r\npublic void testEncoding() {\r\n    String result = encoder.encode(\"\\u65b0\\u805e\");\r\n    assertEquals(\"%E6%96%B0%E8%81%9E\", result);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\core\\src\\test\\java\\org\\apache\\struts2\\util\\NamedVariablePatternMatcherTest.java",
  "methodName" : "testCompile",
  "sourceCode" : "@Test\r\npublic void testCompile() {\r\n    NamedVariablePatternMatcher matcher = new NamedVariablePatternMatcher();\r\n    assertNull(matcher.compilePattern(null));\r\n    assertNull(matcher.compilePattern(\"\"));\r\n    CompiledPattern pattern = matcher.compilePattern(\"action.{format}\");\r\n    assertEquals(\"\\\\Qaction.\\\\E([^/]+)\", pattern.getPattern().pattern());\r\n    pattern = matcher.compilePattern(\"foo\");\r\n    assertEquals(\"\\\\Qfoo\\\\E\", pattern.getPattern().pattern());\r\n    pattern = matcher.compilePattern(\"foo{jim}\");\r\n    assertEquals(\"\\\\Qfoo\\\\E([^/]+)\", pattern.getPattern().pattern());\r\n    assertEquals(\"jim\", pattern.getVariableNames().get(0));\r\n    pattern = matcher.compilePattern(\"foo{jim}/{bob}\");\r\n    assertEquals(\"\\\\Qfoo\\\\E([^/]+)\\\\Q/\\\\E([^/]+)\", pattern.getPattern().pattern());\r\n    assertEquals(\"jim\", pattern.getVariableNames().get(0));\r\n    assertEquals(\"bob\", pattern.getVariableNames().get(1));\r\n    assertTrue(pattern.getPattern().matcher(\"foostar/jie\").matches());\r\n    assertFalse(pattern.getPattern().matcher(\"foo/star/jie\").matches());\r\n    pattern = matcher.compilePattern(\"{urlLocale}/eula_cz\");\r\n    assertEquals(\"([^/]+)\\\\Q/eula_cz\\\\E\", pattern.getPattern().pattern());\r\n    assertEquals(\"urlLocale\", pattern.getVariableNames().get(0));\r\n    assertTrue(pattern.getPattern().matcher(\"foostar/eula_cz\").matches());\r\n    assertFalse(pattern.getPattern().matcher(\"foo/star/eula_cz\").matches());\r\n    pattern = matcher.compilePattern(\"{test1}/path/{test2}\");\r\n    assertEquals(\"([^/]+)\\\\Q/path/\\\\E([^/]+)\", pattern.getPattern().pattern());\r\n    assertEquals(\"test1\", pattern.getVariableNames().get(0));\r\n    assertEquals(\"test2\", pattern.getVariableNames().get(1));\r\n    assertTrue(pattern.getPattern().matcher(\"test1/path/test2\").matches());\r\n    assertFalse(pattern.getPattern().matcher(\"test/1/path/test2\").matches());\r\n    pattern = matcher.compilePattern(\"path1/{test1}/path2/{test2}\");\r\n    assertEquals(\"\\\\Qpath1/\\\\E([^/]+)\\\\Q/path2/\\\\E([^/]+)\", pattern.getPattern().pattern());\r\n    assertEquals(\"test1\", pattern.getVariableNames().get(0));\r\n    assertEquals(\"test2\", pattern.getVariableNames().get(1));\r\n    assertTrue(pattern.getPattern().matcher(\"path1/test1/path2/test2\").matches());\r\n    assertFalse(pattern.getPattern().matcher(\"path1/test/1/path2/test2\").matches());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\core\\src\\test\\java\\org\\apache\\struts2\\util\\NamedVariablePatternMatcherTest.java",
  "methodName" : "testCompileWithMissingVariableName",
  "sourceCode" : "@Test(expected = IllegalArgumentException.class)\r\npublic void testCompileWithMissingVariableName() {\r\n    NamedVariablePatternMatcher matcher = new NamedVariablePatternMatcher();\r\n    matcher.compilePattern(\"{}\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\core\\src\\test\\java\\org\\apache\\struts2\\util\\NamedVariablePatternMatcherTest.java",
  "methodName" : "testCompileWithMissingOpeningBracket1",
  "sourceCode" : "@Test(expected = IllegalArgumentException.class)\r\npublic void testCompileWithMissingOpeningBracket1() {\r\n    NamedVariablePatternMatcher matcher = new NamedVariablePatternMatcher();\r\n    matcher.compilePattern(\"}\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\core\\src\\test\\java\\org\\apache\\struts2\\util\\NamedVariablePatternMatcherTest.java",
  "methodName" : "testCompileWithMissingOpeningBracket2",
  "sourceCode" : "@Test(expected = IllegalArgumentException.class)\r\npublic void testCompileWithMissingOpeningBracket2() {\r\n    NamedVariablePatternMatcher matcher = new NamedVariablePatternMatcher();\r\n    matcher.compilePattern(\"test}\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\core\\src\\test\\java\\org\\apache\\struts2\\util\\NamedVariablePatternMatcherTest.java",
  "methodName" : "testMatch",
  "sourceCode" : "@Test\r\npublic void testMatch() {\r\n    NamedVariablePatternMatcher matcher = new NamedVariablePatternMatcher();\r\n    Map<String, String> vars = new HashMap<>();\r\n    CompiledPattern pattern = new CompiledPattern(Pattern.compile(\"foo([^/]+)\"), Arrays.asList(\"bar\"));\r\n    assertTrue(matcher.match(vars, \"foobaz\", pattern));\r\n    assertEquals(\"baz\", vars.get(\"bar\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\core\\src\\test\\java\\org\\apache\\struts2\\util\\NamedVariablePatternMatcherTest.java",
  "methodName" : "testIsLiteral",
  "sourceCode" : "@Test\r\npublic void testIsLiteral() {\r\n    NamedVariablePatternMatcher matcher = new NamedVariablePatternMatcher();\r\n    assertTrue(matcher.isLiteral(\"bob\"));\r\n    assertFalse(matcher.isLiteral(\"bob{jim}\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\core\\src\\test\\java\\org\\apache\\struts2\\validator\\validators\\RequiredFieldValidatorTest.java",
  "methodName" : "testNullObject",
  "sourceCode" : "@Test\r\npublic void testNullObject() throws Exception {\r\n    // given\r\n    RequiredFieldValidator rfv = container.inject(RequiredFieldValidator.class);\r\n    rfv.setValueStack(ActionContext.getContext().getValueStack());\r\n    rfv.setFieldName(\"stringValue\");\r\n    rfv.setDefaultMessage(\"${fieldName} field is required!\");\r\n    ValidationAction action = new ValidationAction();\r\n    DummyValidatorContext context = new DummyValidatorContext(action, container.getInstance(TextProviderFactory.class));\r\n    rfv.setValidatorContext(context);\r\n    // when\r\n    rfv.validate(action);\r\n    // then\r\n    assertTrue(context.hasFieldErrors());\r\n    assertEquals(1, context.getFieldErrors().size());\r\n    assertNotNull(context.getFieldErrors().get(\"stringValue\"));\r\n    assertEquals(\"stringValue field is required!\", context.getFieldErrors().get(\"stringValue\").get(0));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\core\\src\\test\\java\\org\\apache\\struts2\\validator\\validators\\RequiredFieldValidatorTest.java",
  "methodName" : "testArrayObject",
  "sourceCode" : "@Test\r\npublic void testArrayObject() throws Exception {\r\n    // given\r\n    RequiredFieldValidator rfv = container.inject(RequiredFieldValidator.class);\r\n    rfv.setValueStack(ActionContext.getContext().getValueStack());\r\n    rfv.setFieldName(\"ints\");\r\n    rfv.setDefaultMessage(\"${fieldName} field is required!\");\r\n    ValidationAction action = new ValidationAction();\r\n    action.setInts(new Integer[] {});\r\n    DummyValidatorContext context = new DummyValidatorContext(action, container.getInstance(TextProviderFactory.class));\r\n    rfv.setValidatorContext(context);\r\n    // when\r\n    rfv.validate(action);\r\n    // then\r\n    assertTrue(context.hasFieldErrors());\r\n    assertEquals(1, context.getFieldErrors().size());\r\n    assertNotNull(context.getFieldErrors().get(\"ints\"));\r\n    assertEquals(\"ints field is required!\", context.getFieldErrors().get(\"ints\").get(0));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\core\\src\\test\\java\\org\\apache\\struts2\\validator\\validators\\RequiredFieldValidatorTest.java",
  "methodName" : "testCollectionObject",
  "sourceCode" : "@Test\r\npublic void testCollectionObject() throws Exception {\r\n    // given\r\n    RequiredFieldValidator rfv = container.inject(RequiredFieldValidator.class);\r\n    rfv.setValueStack(ActionContext.getContext().getValueStack());\r\n    rfv.setFieldName(\"shorts\");\r\n    rfv.setDefaultMessage(\"${fieldName} field is required!\");\r\n    ValidationAction action = new ValidationAction();\r\n    action.setShorts(new ArrayList<Short>());\r\n    DummyValidatorContext context = new DummyValidatorContext(action, container.getInstance(TextProviderFactory.class));\r\n    rfv.setValidatorContext(context);\r\n    // when\r\n    rfv.validate(action);\r\n    // then\r\n    assertTrue(context.hasFieldErrors());\r\n    assertEquals(1, context.getFieldErrors().size());\r\n    assertNotNull(context.getFieldErrors().get(\"shorts\"));\r\n    assertEquals(\"shorts field is required!\", context.getFieldErrors().get(\"shorts\").get(0));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\plugins\\bean-validation\\src\\test\\java\\org\\apache\\struts\\beanvalidation\\constraints\\impl\\FieldMatchValidatorTest.java",
  "methodName" : "matchingFields",
  "sourceCode" : "@Test\r\npublic void matchingFields() {\r\n    // given\r\n    FieldMatchValidator validator = new FieldMatchValidator();\r\n    validator.initialize(FieldMatchTestBean.class.getAnnotation(FieldMatch.class));\r\n    ConstraintValidatorContext context = Mockito.mock(ConstraintValidatorContext.class);\r\n    // when\r\n    FieldMatchTestBean bean = new FieldMatchTestBean(\"12345678\", \"12345678\");\r\n    boolean valid = validator.isValid(bean, context);\r\n    // then\r\n    assertTrue(valid);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\plugins\\bean-validation\\src\\test\\java\\org\\apache\\struts\\beanvalidation\\constraints\\impl\\FieldMatchValidatorTest.java",
  "methodName" : "notMatchingFields",
  "sourceCode" : "@Test\r\npublic void notMatchingFields() {\r\n    // given\r\n    FieldMatchValidator validator = new FieldMatchValidator();\r\n    validator.initialize(FieldMatchTestBean.class.getAnnotation(FieldMatch.class));\r\n    ConstraintValidatorContext context = Mockito.mock(ConstraintValidatorContext.class);\r\n    // when\r\n    FieldMatchTestBean bean = new FieldMatchTestBean(\"12345678\", \"87654321\");\r\n    boolean valid = validator.isValid(bean, context);\r\n    // then\r\n    assertFalse(valid);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\plugins\\cdi\\src\\test\\java\\org\\apache\\struts2\\cdi\\CdiObjectFactoryTest.java",
  "methodName" : "testFindBeanManager",
  "sourceCode" : "@Test\r\npublic void testFindBeanManager() {\r\n    assertNotNull(new CdiObjectFactory().findBeanManager());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\plugins\\cdi\\src\\test\\java\\org\\apache\\struts2\\cdi\\CdiObjectFactoryTest.java",
  "methodName" : "testGetBean",
  "sourceCode" : "@Test\r\npublic void testGetBean() throws Exception {\r\n    var cdiObjectFactory = new CdiObjectFactory();\r\n    var fooConsumer = (FooConsumer) cdiObjectFactory.buildBean(FooConsumer.class.getCanonicalName(), null, false);\r\n    assertNotNull(fooConsumer);\r\n    assertNotNull(fooConsumer.fooService);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\plugins\\cdi\\src\\test\\java\\org\\apache\\struts2\\cdi\\CdiObjectFactoryTest.java",
  "methodName" : "testGetInjectionTarget",
  "sourceCode" : "@Test\r\npublic void testGetInjectionTarget() {\r\n    var cdiObjectFactory = new CdiObjectFactory();\r\n    InjectionTarget<?> injectionTarget = cdiObjectFactory.getInjectionTarget(FooConsumer.class);\r\n    assertNotNull(injectionTarget);\r\n    assertTrue(cdiObjectFactory.injectionTargetCache.containsKey(FooConsumer.class));\r\n    assertSame(cdiObjectFactory.getInjectionTarget(FooConsumer.class), injectionTarget);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\plugins\\convention\\src\\test\\java\\org\\apache\\struts2\\convention\\ConventionJUnit4Test.java",
  "methodName" : "testConventionUrl",
  "sourceCode" : "@Test\r\npublic void testConventionUrl() throws Exception {\r\n    // Output is filled out only for FreeMarker and Velocity templates\r\n    // If you wanna use JSP check response.getForwardedUrl()\r\n    String output = executeAction(\"/message.action\");\r\n    assertTrue(output.contains(\"This is the view Hello World\"));\r\n    MessageAction action = this.getAction();\r\n    assertEquals(\"Hello World\", action.getMessage());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\plugins\\convention\\src\\test\\java\\org\\apache\\struts2\\convention\\DefaultResultMapBuilderTest.java",
  "methodName" : "testBuild",
  "sourceCode" : "@Test\r\npublic void testBuild() {\r\n    ServletContext context = mockServletContext(\"/WEB-INF/location\");\r\n    // Test with a slash\r\n    PackageConfig packageConfig = createPackageConfigBuilder(\"/namespace\");\r\n    this.conventionsService = new ConventionsServiceImpl(\"/WEB-INF/location\");\r\n    DefaultResultMapBuilder builder = new DefaultResultMapBuilder(context, container, \"dispatcher,velocity,freemarker\");\r\n    Map<String, ResultConfig> results = builder.build(NoAnnotationAction.class, null, \"action\", packageConfig);\r\n    verify(context, \"/WEB-INF/location\", results, false);\r\n    // Test without a slash\r\n    context = mockServletContext(\"/WEB-INF/location\");\r\n    packageConfig = createPackageConfigBuilder(\"namespace\");\r\n    this.conventionsService = new ConventionsServiceImpl(\"/WEB-INF/location\");\r\n    builder = new DefaultResultMapBuilder(context, container, \"dispatcher,velocity,freemarker\");\r\n    results = builder.build(NoAnnotationAction.class, null, \"action\", packageConfig);\r\n    verify(context, \"/WEB-INF/location\", results, false);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\plugins\\convention\\src\\test\\java\\org\\apache\\struts2\\convention\\DefaultResultMapBuilderTest.java",
  "methodName" : "testResultOverride",
  "sourceCode" : "@Test\r\npublic void testResultOverride() throws Exception {\r\n    ServletContext context = mockServletContext(\"/WEB-INF/location\");\r\n    // Test with a slash\r\n    PackageConfig packageConfig = createPackageConfigBuilder(\"/namespace\");\r\n    this.conventionsService = new ConventionsServiceImpl(\"/WEB-INF/location\");\r\n    DefaultResultMapBuilder builder = new DefaultResultMapBuilder(context, container, \"dispatcher,velocity,freemarker\");\r\n    Action actionAnn = OverrideResultAction.class.getMethod(\"execute\").getAnnotation(Action.class);\r\n    Map<String, ResultConfig> results = builder.build(OverrideResultAction.class, actionAnn, \"action100\", packageConfig);\r\n    ResultConfig result = results.get(\"error\");\r\n    assertNotNull(result);\r\n    assertEquals(\"/WEB-INF/location/namespace/error-overriden.jsp\", result.getParams().get(\"location\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\plugins\\convention\\src\\test\\java\\org\\apache\\struts2\\convention\\DefaultResultMapBuilderTest.java",
  "methodName" : "testGlobalResult",
  "sourceCode" : "@Test\r\npublic void testGlobalResult() {\r\n    ServletContext context = mockServletContext(\"/WEB-INF/location\");\r\n    this.conventionsService = new ConventionsServiceImpl(\"/WEB-INF/location\");\r\n    DefaultResultMapBuilder builder = new DefaultResultMapBuilder(context, container, \"dispatcher,velocity,freemarker\");\r\n    ResultTypeConfig resultType = new ResultTypeConfig.Builder(\"dispatcher\", ServletDispatcherResult.class.getName()).addParam(\"key\", \"value\").addParam(\"key1\", \"value1\").defaultResultParam(\"location\").build();\r\n    ResultConfig globalError = new ResultConfig.Builder(\"error\", ServletDispatcherResult.class.getName()).addParam(\"location\", \"/globalError.jsp\").build();\r\n    PackageConfig packageConfig = new PackageConfig.Builder(\"package\").namespace(\"/namespace\").defaultResultType(\"dispatcher\").addResultTypeConfig(resultType).addGlobalResultConfig(globalError).build();\r\n    Map<String, ResultConfig> results = builder.build(GlobalResultAction.class, null, \"action\", packageConfig);\r\n    ResultConfig result = results.get(\"error\");\r\n    assertNotNull(result);\r\n    assertEquals(\"/globalError.jsp\", result.getParams().get(\"location\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\plugins\\convention\\src\\test\\java\\org\\apache\\struts2\\convention\\DefaultResultMapBuilderTest.java",
  "methodName" : "testGlobalResultOverride",
  "sourceCode" : "@Test\r\npublic void testGlobalResultOverride() {\r\n    ServletContext context = EasyMock.createStrictMock(ServletContext.class);\r\n    String resultPath = \"/WEB-INF/location\";\r\n    // Setup some mock jsps\r\n    Set<String> resources = new HashSet<>();\r\n    resources.add(resultPath + \"/namespace/action.jsp\");\r\n    resources.add(resultPath + \"/namespace/action-success.jsp\");\r\n    resources.add(resultPath + \"/namespace/action-error.jsp\");\r\n    EasyMock.expect(context.getResourcePaths(resultPath + \"/namespace/\")).andReturn(resources);\r\n    EasyMock.replay(context);\r\n    this.conventionsService = new ConventionsServiceImpl(\"/WEB-INF/location\");\r\n    DefaultResultMapBuilder builder = new DefaultResultMapBuilder(context, container, \"dispatcher,velocity,freemarker\");\r\n    ResultTypeConfig resultType = new ResultTypeConfig.Builder(\"dispatcher\", ServletDispatcherResult.class.getName()).addParam(\"key\", \"value\").addParam(\"key1\", \"value1\").defaultResultParam(\"location\").build();\r\n    ResultConfig globalError = new ResultConfig.Builder(\"error\", ServletDispatcherResult.class.getName()).addParam(\"location\", \"/globalError.jsp\").build();\r\n    PackageConfig packageConfig = new PackageConfig.Builder(\"package\").namespace(\"/namespace\").defaultResultType(\"dispatcher\").addResultTypeConfig(resultType).addGlobalResultConfig(globalError).build();\r\n    Map<String, ResultConfig> results = builder.build(GlobalResultOverrideAction.class, null, \"action\", packageConfig);\r\n    ResultConfig result = results.get(\"error\");\r\n    assertNotNull(result);\r\n    assertEquals(resultPath + \"/namespace/action-error.jsp\", result.getParams().get(\"location\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\plugins\\convention\\src\\test\\java\\org\\apache\\struts2\\convention\\DefaultResultMapBuilderTest.java",
  "methodName" : "testNull",
  "sourceCode" : "@Test\r\npublic void testNull() {\r\n    ServletContext context = EasyMock.createStrictMock(ServletContext.class);\r\n    EasyMock.expect(context.getResourcePaths(\"/WEB-INF/location/namespace/\")).andReturn(null);\r\n    EasyMock.replay(context);\r\n    // Test with a slash\r\n    PackageConfig packageConfig = createPackageConfigBuilder(\"/namespace\");\r\n    this.conventionsService = new ConventionsServiceImpl(\"/WEB-INF/location\");\r\n    DefaultResultMapBuilder builder = new DefaultResultMapBuilder(context, container, \"dispatcher,velocity,freemarker\");\r\n    Map<String, ResultConfig> results = builder.build(NoAnnotationAction.class, null, \"action\", packageConfig);\r\n    assertEquals(0, results.size());\r\n    EasyMock.verify(context);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\plugins\\convention\\src\\test\\java\\org\\apache\\struts2\\convention\\DefaultResultMapBuilderTest.java",
  "methodName" : "testResultPath",
  "sourceCode" : "@Test\r\npublic void testResultPath() {\r\n    ServletContext context = mockServletContext(\"/class-level\");\r\n    // Test with a result path\r\n    PackageConfig packageConfig = createPackageConfigBuilder(\"/namespace\");\r\n    this.conventionsService = new ConventionsServiceImpl(\"/not-used\");\r\n    DefaultResultMapBuilder builder = new DefaultResultMapBuilder(context, container, \"dispatcher,velocity,freemarker\");\r\n    Map<String, ResultConfig> results = builder.build(ClassLevelResultPathAction.class, null, \"action\", packageConfig);\r\n    verify(context, \"/class-level\", results, false);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\plugins\\convention\\src\\test\\java\\org\\apache\\struts2\\convention\\DefaultResultMapBuilderTest.java",
  "methodName" : "testFromServletContextWithBadNames",
  "sourceCode" : "@Test\r\npublic void testFromServletContextWithBadNames() {\r\n    ServletContext context = EasyMock.createStrictMock(ServletContext.class);\r\n    // Setup some mock jsps\r\n    Set<String> resources = new HashSet<>();\r\n    resources.add(\"/WEB-INF/location/namespace/.something\");\r\n    resources.add(\"/WEB-INF/location/namespace/.somethingelse/\");\r\n    EasyMock.expect(context.getResourcePaths(\"/WEB-INF/location/namespace/\")).andReturn(resources);\r\n    EasyMock.replay(context);\r\n    PackageConfig packageConfig = createPackageConfigBuilder(\"/namespace\");\r\n    this.conventionsService = new ConventionsServiceImpl(\"/WEB-INF/location\");\r\n    DefaultResultMapBuilder builder = new DefaultResultMapBuilder(context, container, \"dispatcher,velocity,freemarker\");\r\n    Map<String, ResultConfig> results = builder.build(NoAnnotationAction.class, null, \"no-annotation\", packageConfig);\r\n    assertEquals(0, results.size());\r\n    EasyMock.verify(context);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\plugins\\convention\\src\\test\\java\\org\\apache\\struts2\\convention\\DefaultResultMapBuilderTest.java",
  "methodName" : "testFromServletContext",
  "sourceCode" : "@Test\r\npublic void testFromServletContext() {\r\n    ServletContext context = EasyMock.createStrictMock(ServletContext.class);\r\n    // Setup some mock jsps\r\n    Set<String> resources = new HashSet<>();\r\n    resources.add(\"/WEB-INF/location/namespace/no-annotation.ftl\");\r\n    resources.add(\"/WEB-INF/location/namespace/no-annotation-success.jsp\");\r\n    resources.add(\"/WEB-INF/location/namespace/no-annotation-failure.jsp\");\r\n    EasyMock.expect(context.getResourcePaths(\"/WEB-INF/location/namespace/\")).andReturn(resources);\r\n    EasyMock.replay(context);\r\n    PackageConfig packageConfig = createPackageConfigBuilder(\"/namespace\");\r\n    this.conventionsService = new ConventionsServiceImpl(\"/WEB-INF/location\");\r\n    DefaultResultMapBuilder builder = new DefaultResultMapBuilder(context, container, \"dispatcher,velocity,freemarker\");\r\n    Map<String, ResultConfig> results = builder.build(NoAnnotationAction.class, null, \"no-annotation\", packageConfig);\r\n    assertEquals(4, results.size());\r\n    assertEquals(\"success\", results.get(\"success\").getName());\r\n    assertEquals(3, results.get(\"success\").getParams().size());\r\n    assertEquals(\"org.apache.struts2.result.ServletDispatcherResult\", results.get(\"success\").getClassName());\r\n    assertEquals(\"/WEB-INF/location/namespace/no-annotation-success.jsp\", results.get(\"success\").getParams().get(\"location\"));\r\n    assertEquals(1, results.get(\"input\").getParams().size());\r\n    assertEquals(\"org.apache.struts2.views.freemarker.FreemarkerResult\", results.get(\"input\").getClassName());\r\n    assertEquals(\"/WEB-INF/location/namespace/no-annotation.ftl\", results.get(\"input\").getParams().get(\"location\"));\r\n    assertEquals(1, results.get(\"error\").getParams().size());\r\n    assertEquals(\"org.apache.struts2.views.freemarker.FreemarkerResult\", results.get(\"error\").getClassName());\r\n    assertEquals(\"/WEB-INF/location/namespace/no-annotation.ftl\", results.get(\"error\").getParams().get(\"location\"));\r\n    assertEquals(3, results.get(\"failure\").getParams().size());\r\n    assertEquals(\"org.apache.struts2.result.ServletDispatcherResult\", results.get(\"success\").getClassName());\r\n    assertEquals(\"/WEB-INF/location/namespace/no-annotation-failure.jsp\", results.get(\"failure\").getParams().get(\"location\"));\r\n    EasyMock.verify(context);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\plugins\\convention\\src\\test\\java\\org\\apache\\struts2\\convention\\DefaultResultMapBuilderTest.java",
  "methodName" : "testFromServletContextNotFlat",
  "sourceCode" : "@Test\r\npublic void testFromServletContextNotFlat() {\r\n    ServletContext context = EasyMock.createStrictMock(ServletContext.class);\r\n    // Setup some mock jsps\r\n    Set<String> resources = new HashSet<>();\r\n    resources.add(\"/WEB-INF/location/namespace/no-annotation/index.ftl\");\r\n    resources.add(\"/WEB-INF/location/namespace/no-annotation/success.jsp\");\r\n    resources.add(\"/WEB-INF/location/namespace/no-annotation/failure.jsp\");\r\n    EasyMock.expect(context.getResourcePaths(\"/WEB-INF/location/namespace/no-annotation\")).andReturn(resources);\r\n    EasyMock.replay(context);\r\n    PackageConfig packageConfig = createPackageConfigBuilder(\"/namespace\");\r\n    this.conventionsService = new ConventionsServiceImpl(\"/WEB-INF/location\");\r\n    DefaultResultMapBuilder builder = new DefaultResultMapBuilder(context, container, \"dispatcher,velocity,freemarker\");\r\n    builder.setFlatResultLayout(\"false\");\r\n    Map<String, ResultConfig> results = builder.build(NoAnnotationAction.class, null, \"no-annotation\", packageConfig);\r\n    assertEquals(3, results.size());\r\n    assertEquals(\"success\", results.get(\"success\").getName());\r\n    assertEquals(3, results.get(\"success\").getParams().size());\r\n    assertEquals(\"org.apache.struts2.result.ServletDispatcherResult\", results.get(\"success\").getClassName());\r\n    assertEquals(\"/WEB-INF/location/namespace/no-annotation/success.jsp\", results.get(\"success\").getParams().get(\"location\"));\r\n    assertEquals(1, results.get(\"index\").getParams().size());\r\n    assertEquals(\"org.apache.struts2.views.freemarker.FreemarkerResult\", results.get(\"index\").getClassName());\r\n    assertEquals(\"/WEB-INF/location/namespace/no-annotation/index.ftl\", results.get(\"index\").getParams().get(\"location\"));\r\n    assertEquals(3, results.get(\"failure\").getParams().size());\r\n    assertEquals(\"org.apache.struts2.result.ServletDispatcherResult\", results.get(\"success\").getClassName());\r\n    assertEquals(\"/WEB-INF/location/namespace/no-annotation/failure.jsp\", results.get(\"failure\").getParams().get(\"location\"));\r\n    EasyMock.verify(context);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\plugins\\convention\\src\\test\\java\\org\\apache\\struts2\\convention\\DefaultResultMapBuilderTest.java",
  "methodName" : "testIgnoreFilesWithoutName",
  "sourceCode" : "@Test\r\npublic void testIgnoreFilesWithoutName() {\r\n    ServletContext context = EasyMock.createStrictMock(ServletContext.class);\r\n    // Setup some mock jsps\r\n    Set<String> resources = new HashSet<>();\r\n    resources.add(\"/WEB-INF/location/namespace/no-annotation/.svn\");\r\n    resources.add(\"/WEB-INF/location/namespace/no-annotation-success.jsp\");\r\n    EasyMock.expect(context.getResourcePaths(\"/WEB-INF/location/namespace/\")).andReturn(resources);\r\n    EasyMock.replay(context);\r\n    PackageConfig packageConfig = createPackageConfigBuilder(\"/namespace\");\r\n    this.conventionsService = new ConventionsServiceImpl(\"/WEB-INF/location\");\r\n    DefaultResultMapBuilder builder = new DefaultResultMapBuilder(context, container, \"dispatcher,velocity,freemarker\");\r\n    Map<String, ResultConfig> results = builder.build(NoAnnotationAction.class, null, \"no-annotation\", packageConfig);\r\n    assertEquals(1, results.size());\r\n    assertEquals(\"success\", results.get(\"success\").getName());\r\n    assertEquals(3, results.get(\"success\").getParams().size());\r\n    assertEquals(\"org.apache.struts2.result.ServletDispatcherResult\", results.get(\"success\").getClassName());\r\n    assertEquals(\"/WEB-INF/location/namespace/no-annotation-success.jsp\", results.get(\"success\").getParams().get(\"location\"));\r\n    EasyMock.verify(context);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\plugins\\convention\\src\\test\\java\\org\\apache\\struts2\\convention\\DefaultResultMapBuilderTest.java",
  "methodName" : "testClassLevelSingleResultAnnotation",
  "sourceCode" : "@Test\r\npublic void testClassLevelSingleResultAnnotation() {\r\n    ServletContext context = EasyMock.createStrictMock(ServletContext.class);\r\n    // Setup some mock jsps\r\n    Set<String> resources = new HashSet<>();\r\n    EasyMock.expect(context.getResourcePaths(\"/WEB-INF/location/namespace/\")).andReturn(resources);\r\n    EasyMock.replay(context);\r\n    PackageConfig packageConfig = createPackageConfigBuilder(\"/namespace\");\r\n    this.conventionsService = new ConventionsServiceImpl(\"/WEB-INF/location\");\r\n    DefaultResultMapBuilder builder = new DefaultResultMapBuilder(context, container, \"dispatcher,velocity,freemarker\");\r\n    Map<String, ResultConfig> results = builder.build(ClassLevelResultAction.class, null, \"class-level-result\", packageConfig);\r\n    assertEquals(1, results.size());\r\n    assertEquals(\"error\", results.get(\"error\").getName());\r\n    assertEquals(3, results.get(\"error\").getParams().size());\r\n    assertEquals(\"org.apache.struts2.result.ServletDispatcherResult\", results.get(\"error\").getClassName());\r\n    assertEquals(\"/WEB-INF/location/namespace/error.jsp\", results.get(\"error\").getParams().get(\"location\"));\r\n    assertEquals(\"value\", results.get(\"error\").getParams().get(\"key\"));\r\n    assertEquals(\"value1\", results.get(\"error\").getParams().get(\"key1\"));\r\n    EasyMock.verify(context);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\plugins\\convention\\src\\test\\java\\org\\apache\\struts2\\convention\\DefaultResultMapBuilderTest.java",
  "methodName" : "testClassLevelInheritedSingleResultAnnotation",
  "sourceCode" : "@Test\r\npublic void testClassLevelInheritedSingleResultAnnotation() {\r\n    ServletContext context = EasyMock.createStrictMock(ServletContext.class);\r\n    // Setup some mock jsps\r\n    Set<String> resources = new HashSet<>();\r\n    EasyMock.expect(context.getResourcePaths(\"/WEB-INF/location/namespace/\")).andReturn(resources);\r\n    EasyMock.replay(context);\r\n    PackageConfig packageConfig = createPackageConfigBuilder(\"/namespace\");\r\n    this.conventionsService = new ConventionsServiceImpl(\"/WEB-INF/location\");\r\n    DefaultResultMapBuilder builder = new DefaultResultMapBuilder(context, container, \"dispatcher,velocity,freemarker\");\r\n    Map<String, ResultConfig> results = builder.build(InheritedResultExtends.class, null, \"result-inheritance-extends\", packageConfig);\r\n    assertEquals(1, results.size());\r\n    assertEquals(\"error\", results.get(\"error\").getName());\r\n    assertEquals(3, results.get(\"error\").getParams().size());\r\n    assertEquals(\"org.apache.struts2.result.ServletDispatcherResult\", results.get(\"error\").getClassName());\r\n    assertEquals(\"/WEB-INF/location/namespace/error.jsp\", results.get(\"error\").getParams().get(\"location\"));\r\n    assertEquals(\"value\", results.get(\"error\").getParams().get(\"key\"));\r\n    assertEquals(\"value1\", results.get(\"error\").getParams().get(\"key1\"));\r\n    EasyMock.verify(context);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\plugins\\convention\\src\\test\\java\\org\\apache\\struts2\\convention\\DefaultResultMapBuilderTest.java",
  "methodName" : "testClassLevelOverwriteInheritedSingleResultAnnotation",
  "sourceCode" : "@Test\r\npublic void testClassLevelOverwriteInheritedSingleResultAnnotation() {\r\n    ServletContext context = EasyMock.createStrictMock(ServletContext.class);\r\n    // Setup some mock jsps\r\n    Set<String> resources = new HashSet<>();\r\n    EasyMock.expect(context.getResourcePaths(\"/WEB-INF/location/namespace/\")).andReturn(resources);\r\n    EasyMock.replay(context);\r\n    PackageConfig packageConfig = createPackageConfigBuilder(\"/namespace\");\r\n    this.conventionsService = new ConventionsServiceImpl(\"/WEB-INF/location\");\r\n    DefaultResultMapBuilder builder = new DefaultResultMapBuilder(context, container, \"dispatcher,velocity,freemarker\");\r\n    Map<String, ResultConfig> results = builder.build(OverrideInheritedResultExtends.class, null, \"result-inheritance-extends\", packageConfig);\r\n    assertEquals(1, results.size());\r\n    assertEquals(\"error\", results.get(\"error\").getName());\r\n    assertEquals(5, results.get(\"error\").getParams().size());\r\n    assertEquals(\"org.apache.struts2.result.ServletDispatcherResult\", results.get(\"error\").getClassName());\r\n    assertEquals(\"/WEB-INF/location/namespace/error.jsp\", results.get(\"error\").getParams().get(\"location\"));\r\n    assertEquals(\"value\", results.get(\"error\").getParams().get(\"key\"));\r\n    assertEquals(\"value1\", results.get(\"error\").getParams().get(\"key1\"));\r\n    assertEquals(\"value-overwritten\", results.get(\"error\").getParams().get(\"key-overwritten\"));\r\n    assertEquals(\"value1-overwritten\", results.get(\"error\").getParams().get(\"key1-overwritten\"));\r\n    EasyMock.verify(context);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\plugins\\convention\\src\\test\\java\\org\\apache\\struts2\\convention\\DefaultResultMapBuilderTest.java",
  "methodName" : "testClassLevelMultipleResultAnnotation",
  "sourceCode" : "@Test\r\npublic void testClassLevelMultipleResultAnnotation() {\r\n    ServletContext context = EasyMock.createStrictMock(ServletContext.class);\r\n    // Setup some mock jsps\r\n    Set<String> resources = new HashSet<>();\r\n    EasyMock.expect(context.getResourcePaths(\"/WEB-INF/location/namespace/\")).andReturn(resources);\r\n    EasyMock.replay(context);\r\n    PackageConfig packageConfig = createPackageConfigBuilder(\"/namespace\");\r\n    this.conventionsService = new ConventionsServiceImpl(\"/WEB-INF/location\");\r\n    DefaultResultMapBuilder builder = new DefaultResultMapBuilder(context, container, \"dispatcher,velocity,freemarker\");\r\n    Map<String, ResultConfig> results = builder.build(ClassLevelResultsAction.class, null, \"class-level-results\", packageConfig);\r\n    assertEquals(4, results.size());\r\n    assertEquals(\"error\", results.get(\"error\").getName());\r\n    assertEquals(\"input\", results.get(\"input\").getName());\r\n    assertEquals(\"success\", results.get(\"success\").getName());\r\n    assertEquals(\"failure\", results.get(\"failure\").getName());\r\n    assertEquals(3, results.get(\"error\").getParams().size());\r\n    assertEquals(\"org.apache.struts2.result.ServletDispatcherResult\", results.get(\"error\").getClassName());\r\n    assertEquals(\"/WEB-INF/location/namespace/error.jsp\", results.get(\"error\").getParams().get(\"location\"));\r\n    assertEquals(\"ann-value\", results.get(\"error\").getParams().get(\"key\"));\r\n    assertEquals(\"ann-value1\", results.get(\"error\").getParams().get(\"key1\"));\r\n    assertEquals(1, results.get(\"input\").getParams().size());\r\n    assertEquals(\"foo.action\", results.get(\"input\").getParams().get(\"actionName\"));\r\n    assertEquals(\"org.apache.struts2.result.ServletActionRedirectResult\", results.get(\"input\").getClassName());\r\n    assertEquals(3, results.get(\"failure\").getParams().size());\r\n    assertEquals(\"/WEB-INF/location/namespace/action-failure.jsp\", results.get(\"failure\").getParams().get(\"location\"));\r\n    assertEquals(\"org.apache.struts2.result.ServletDispatcherResult\", results.get(\"failure\").getClassName());\r\n    assertEquals(\"value\", results.get(\"failure\").getParams().get(\"key\"));\r\n    assertEquals(\"value1\", results.get(\"failure\").getParams().get(\"key1\"));\r\n    assertEquals(3, results.get(\"success\").getParams().size());\r\n    assertEquals(\"/WEB-INF/location/namespace/action-success.jsp\", results.get(\"success\").getParams().get(\"location\"));\r\n    assertEquals(\"org.apache.struts2.result.ServletDispatcherResult\", results.get(\"success\").getClassName());\r\n    assertEquals(\"value\", results.get(\"success\").getParams().get(\"key\"));\r\n    assertEquals(\"value1\", results.get(\"success\").getParams().get(\"key1\"));\r\n    EasyMock.verify(context);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\plugins\\convention\\src\\test\\java\\org\\apache\\struts2\\convention\\DefaultResultMapBuilderTest.java",
  "methodName" : "testClassLevelInheritanceMultipleResultAnnotation",
  "sourceCode" : "@Test\r\npublic void testClassLevelInheritanceMultipleResultAnnotation() {\r\n    ServletContext context = EasyMock.createStrictMock(ServletContext.class);\r\n    // Setup some mock jsps\r\n    Set<String> resources = new HashSet<>();\r\n    EasyMock.expect(context.getResourcePaths(\"/WEB-INF/location/namespace/\")).andReturn(resources);\r\n    EasyMock.replay(context);\r\n    PackageConfig packageConfig = createPackageConfigBuilder(\"/namespace\");\r\n    this.conventionsService = new ConventionsServiceImpl(\"/WEB-INF/location\");\r\n    DefaultResultMapBuilder builder = new DefaultResultMapBuilder(context, container, \"dispatcher,velocity,freemarker\");\r\n    Map<String, ResultConfig> results = builder.build(InheritedResultsExtends.class, null, \"class-level-results\", packageConfig);\r\n    assertEquals(4, results.size());\r\n    assertEquals(\"error\", results.get(\"error\").getName());\r\n    assertEquals(\"input\", results.get(\"input\").getName());\r\n    assertEquals(\"success\", results.get(\"success\").getName());\r\n    assertEquals(\"failure\", results.get(\"failure\").getName());\r\n    assertEquals(3, results.get(\"error\").getParams().size());\r\n    assertEquals(\"org.apache.struts2.result.ServletDispatcherResult\", results.get(\"error\").getClassName());\r\n    assertEquals(\"/WEB-INF/location/namespace/error.jsp\", results.get(\"error\").getParams().get(\"location\"));\r\n    assertEquals(\"ann-value\", results.get(\"error\").getParams().get(\"key\"));\r\n    assertEquals(\"ann-value1\", results.get(\"error\").getParams().get(\"key1\"));\r\n    assertEquals(1, results.get(\"input\").getParams().size());\r\n    assertEquals(\"foo.action\", results.get(\"input\").getParams().get(\"actionName\"));\r\n    assertEquals(\"org.apache.struts2.result.ServletActionRedirectResult\", results.get(\"input\").getClassName());\r\n    assertEquals(3, results.get(\"failure\").getParams().size());\r\n    assertEquals(\"/WEB-INF/location/namespace/action-failure.jsp\", results.get(\"failure\").getParams().get(\"location\"));\r\n    assertEquals(\"org.apache.struts2.result.ServletDispatcherResult\", results.get(\"failure\").getClassName());\r\n    assertEquals(\"value\", results.get(\"failure\").getParams().get(\"key\"));\r\n    assertEquals(\"value1\", results.get(\"failure\").getParams().get(\"key1\"));\r\n    assertEquals(3, results.get(\"success\").getParams().size());\r\n    assertEquals(\"/WEB-INF/location/namespace/action-success.jsp\", results.get(\"success\").getParams().get(\"location\"));\r\n    assertEquals(\"org.apache.struts2.result.ServletDispatcherResult\", results.get(\"success\").getClassName());\r\n    assertEquals(\"value\", results.get(\"success\").getParams().get(\"key\"));\r\n    assertEquals(\"value1\", results.get(\"success\").getParams().get(\"key1\"));\r\n    EasyMock.verify(context);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\plugins\\convention\\src\\test\\java\\org\\apache\\struts2\\convention\\DefaultResultMapBuilderTest.java",
  "methodName" : "testActionLevelSingleResultAnnotation",
  "sourceCode" : "@Test\r\npublic void testActionLevelSingleResultAnnotation() {\r\n    ServletContext context = EasyMock.createStrictMock(ServletContext.class);\r\n    // Setup some mock jsps\r\n    Set<String> resources = new HashSet<>();\r\n    EasyMock.expect(context.getResourcePaths(\"/WEB-INF/location/namespace/\")).andReturn(resources);\r\n    EasyMock.replay(context);\r\n    PackageConfig packageConfig = createPackageConfigBuilder(\"/namespace\");\r\n    this.conventionsService = new ConventionsServiceImpl(\"/WEB-INF/location\");\r\n    DefaultResultMapBuilder builder = new DefaultResultMapBuilder(context, container, \"dispatcher,velocity,freemarker\");\r\n    Map<String, ResultConfig> results = builder.build(ActionLevelResultAction.class, getAnnotation(ActionLevelResultAction.class, \"execute\", Action.class), \"action-level-result\", packageConfig);\r\n    assertEquals(1, results.size());\r\n    assertEquals(\"success\", results.get(\"success\").getName());\r\n    assertEquals(3, results.get(\"success\").getParams().size());\r\n    assertEquals(\"org.apache.struts2.result.ServletDispatcherResult\", results.get(\"success\").getClassName());\r\n    assertEquals(\"/WEB-INF/location/namespace/action-success.jsp\", results.get(\"success\").getParams().get(\"location\"));\r\n    assertEquals(\"value\", results.get(\"success\").getParams().get(\"key\"));\r\n    assertEquals(\"value1\", results.get(\"success\").getParams().get(\"key1\"));\r\n    EasyMock.verify(context);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\plugins\\convention\\src\\test\\java\\org\\apache\\struts2\\convention\\DefaultResultMapBuilderTest.java",
  "methodName" : "testActionLevelMultipleResultAnnotation",
  "sourceCode" : "@Test\r\npublic void testActionLevelMultipleResultAnnotation() {\r\n    ServletContext context = EasyMock.createStrictMock(ServletContext.class);\r\n    // Setup some mock jsps\r\n    Set<String> resources = new HashSet<>();\r\n    EasyMock.expect(context.getResourcePaths(\"/WEB-INF/location/namespace/\")).andReturn(resources);\r\n    EasyMock.replay(context);\r\n    PackageConfig packageConfig = createPackageConfigBuilder(\"/namespace\");\r\n    this.conventionsService = new ConventionsServiceImpl(\"/WEB-INF/location\");\r\n    DefaultResultMapBuilder builder = new DefaultResultMapBuilder(context, container, \"dispatcher,velocity,freemarker\");\r\n    Map<String, ResultConfig> results = builder.build(ActionLevelResultsAction.class, getAnnotation(ActionLevelResultsAction.class, \"execute\", Action.class), \"action-level-results\", packageConfig);\r\n    assertEquals(4, results.size());\r\n    assertEquals(\"error\", results.get(\"error\").getName());\r\n    assertEquals(\"input\", results.get(\"input\").getName());\r\n    assertEquals(\"success\", results.get(\"success\").getName());\r\n    assertEquals(\"failure\", results.get(\"failure\").getName());\r\n    assertEquals(3, results.get(\"error\").getParams().size());\r\n    assertEquals(\"org.apache.struts2.result.ServletDispatcherResult\", results.get(\"error\").getClassName());\r\n    assertEquals(\"/WEB-INF/location/namespace/error.jsp\", results.get(\"error\").getParams().get(\"location\"));\r\n    assertEquals(\"value\", results.get(\"success\").getParams().get(\"key\"));\r\n    assertEquals(\"value1\", results.get(\"success\").getParams().get(\"key1\"));\r\n    assertEquals(1, results.get(\"input\").getParams().size());\r\n    assertEquals(\"foo.action\", results.get(\"input\").getParams().get(\"actionName\"));\r\n    assertEquals(\"org.apache.struts2.result.ServletActionRedirectResult\", results.get(\"input\").getClassName());\r\n    assertEquals(3, results.get(\"failure\").getParams().size());\r\n    assertEquals(\"/WEB-INF/location/namespace/action-failure.jsp\", results.get(\"failure\").getParams().get(\"location\"));\r\n    assertEquals(\"org.apache.struts2.result.ServletDispatcherResult\", results.get(\"failure\").getClassName());\r\n    assertEquals(3, results.get(\"success\").getParams().size());\r\n    assertEquals(\"/WEB-INF/location/namespace/action-success.jsp\", results.get(\"success\").getParams().get(\"location\"));\r\n    assertEquals(\"org.apache.struts2.result.ServletDispatcherResult\", results.get(\"success\").getClassName());\r\n    EasyMock.verify(context);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\plugins\\convention\\src\\test\\java\\org\\apache\\struts2\\convention\\DefaultResultMapBuilderTest.java",
  "methodName" : "testActionLevelMultipleResultNamesAnnotation",
  "sourceCode" : "@Test\r\npublic void testActionLevelMultipleResultNamesAnnotation() {\r\n    ServletContext context = EasyMock.createStrictMock(ServletContext.class);\r\n    // Setup some mock jsps\r\n    Set<String> resources = new HashSet<>();\r\n    EasyMock.expect(context.getResourcePaths(\"/WEB-INF/location/namespace/\")).andReturn(resources);\r\n    EasyMock.replay(context);\r\n    PackageConfig packageConfig = createPackageConfigBuilder(\"/namespace\");\r\n    this.conventionsService = new ConventionsServiceImpl(\"/WEB-INF/location\");\r\n    DefaultResultMapBuilder builder = new DefaultResultMapBuilder(context, container, \"dispatcher,velocity,freemarker\");\r\n    Map<String, ResultConfig> results = builder.build(ActionLevelResultsNamesAction.class, getAnnotation(ActionLevelResultsNamesAction.class, \"execute\", Action.class), \"action-level-results\", packageConfig);\r\n    assertEquals(4, results.size());\r\n    assertEquals(\"error\", results.get(\"error\").getName());\r\n    assertEquals(\"input\", results.get(\"input\").getName());\r\n    assertEquals(\"success\", results.get(\"success\").getName());\r\n    assertEquals(\"failure\", results.get(\"failure\").getName());\r\n    assertEquals(3, results.get(\"error\").getParams().size());\r\n    assertEquals(\"/WEB-INF/location/namespace/error.jsp\", results.get(\"error\").getParams().get(\"location\"));\r\n    assertEquals(\"org.apache.struts2.result.ServletDispatcherResult\", results.get(\"error\").getClassName());\r\n    assertEquals(\"value\", results.get(\"success\").getParams().get(\"key\"));\r\n    assertEquals(\"value1\", results.get(\"success\").getParams().get(\"key1\"));\r\n    assertEquals(3, results.get(\"input\").getParams().size());\r\n    assertEquals(\"/WEB-INF/location/namespace/error.jsp\", results.get(\"input\").getParams().get(\"location\"));\r\n    assertEquals(\"org.apache.struts2.result.ServletDispatcherResult\", results.get(\"input\").getClassName());\r\n    assertEquals(3, results.get(\"failure\").getParams().size());\r\n    assertEquals(\"/WEB-INF/location/namespace/action-failure.jsp\", results.get(\"failure\").getParams().get(\"location\"));\r\n    assertEquals(\"org.apache.struts2.result.ServletDispatcherResult\", results.get(\"failure\").getClassName());\r\n    assertEquals(3, results.get(\"success\").getParams().size());\r\n    assertEquals(\"/WEB-INF/location/namespace/action-success.jsp\", results.get(\"success\").getParams().get(\"location\"));\r\n    assertEquals(\"org.apache.struts2.result.ServletDispatcherResult\", results.get(\"success\").getClassName());\r\n    EasyMock.verify(context);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\plugins\\convention\\src\\test\\java\\org\\apache\\struts2\\convention\\DefaultResultMapBuilderTest.java",
  "methodName" : "testActionLevelMultipleResultNamesAnnotationNoName",
  "sourceCode" : "@Test\r\npublic void testActionLevelMultipleResultNamesAnnotationNoName() {\r\n    ServletContext context = EasyMock.createStrictMock(ServletContext.class);\r\n    // Setup some mock jsps\r\n    Set<String> resources = new HashSet<>();\r\n    EasyMock.expect(context.getResourcePaths(\"/WEB-INF/location/namespace/\")).andReturn(resources);\r\n    EasyMock.replay(context);\r\n    PackageConfig packageConfig = createPackageConfigBuilder(\"/namespace\");\r\n    this.conventionsService = new ConventionsServiceImpl(\"/WEB-INF/location\");\r\n    DefaultResultMapBuilder builder = new DefaultResultMapBuilder(context, container, \"dispatcher,velocity,freemarker\");\r\n    Map<String, ResultConfig> results = builder.build(ActionLevelResultsNamesAction.class, getAnnotation(ActionLevelResultsNamesAction.class, \"noname\", Action.class), \"action-level-results\", packageConfig);\r\n    assertEquals(1, results.size());\r\n    assertEquals(\"success\", results.get(\"success\").getName());\r\n    assertEquals(3, results.get(\"success\").getParams().size());\r\n    assertEquals(\"value\", results.get(\"success\").getParams().get(\"key\"));\r\n    assertEquals(\"value1\", results.get(\"success\").getParams().get(\"key1\"));\r\n    assertEquals(\"/WEB-INF/location/namespace/action-success.jsp\", results.get(\"success\").getParams().get(\"location\"));\r\n    assertEquals(\"org.apache.struts2.result.ServletDispatcherResult\", results.get(\"success\").getClassName());\r\n    EasyMock.verify(context);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\plugins\\convention\\src\\test\\java\\org\\apache\\struts2\\convention\\DefaultResultMapBuilderTest.java",
  "methodName" : "testClassPath",
  "sourceCode" : "@Test\r\npublic void testClassPath() {\r\n    ServletContext context = EasyMock.createNiceMock(ServletContext.class);\r\n    ResultTypeConfig resultType = new ResultTypeConfig.Builder(\"freemarker\", \"org.apache.struts2.result.ServletDispatcherResult\").defaultResultParam(\"location\").build();\r\n    PackageConfig packageConfig = new PackageConfig.Builder(\"package\").defaultResultType(\"dispatcher\").addResultTypeConfig(resultType).build();\r\n    this.conventionsService = new ConventionsServiceImpl(\"/WEB-INF/component\");\r\n    DefaultResultMapBuilder builder = new DefaultResultMapBuilder(context, container, \"dispatcher,velocity,freemarker\");\r\n    Map<String, ResultConfig> results = builder.build(NoAnnotationAction.class, null, \"no-annotation\", packageConfig);\r\n    assertEquals(4, results.size());\r\n    assertEquals(\"input\", results.get(\"input\").getName());\r\n    assertEquals(\"error\", results.get(\"error\").getName());\r\n    assertEquals(\"success\", results.get(\"success\").getName());\r\n    assertEquals(\"foo\", results.get(\"foo\").getName());\r\n    assertEquals(1, results.get(\"success\").getParams().size());\r\n    assertEquals(\"/WEB-INF/component/no-annotation.ftl\", results.get(\"success\").getParams().get(\"location\"));\r\n    assertEquals(1, results.get(\"input\").getParams().size());\r\n    assertEquals(\"/WEB-INF/component/no-annotation.ftl\", results.get(\"input\").getParams().get(\"location\"));\r\n    assertEquals(1, results.get(\"error\").getParams().size());\r\n    assertEquals(\"/WEB-INF/component/no-annotation.ftl\", results.get(\"error\").getParams().get(\"location\"));\r\n    assertEquals(1, results.get(\"foo\").getParams().size());\r\n    assertEquals(\"/WEB-INF/component/no-annotation-foo.ftl\", results.get(\"foo\").getParams().get(\"location\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\plugins\\json\\src\\test\\java\\org\\apache\\struts2\\json\\DefaultJSONWriterTest.java",
  "methodName" : "testWrite",
  "sourceCode" : "@Test\r\npublic void testWrite() throws Exception {\r\n    Bean bean1 = new Bean();\r\n    bean1.setStringField(\"str\");\r\n    bean1.setBooleanField(true);\r\n    bean1.setCharField('s');\r\n    bean1.setDoubleField(10.1);\r\n    bean1.setFloatField(1.5f);\r\n    bean1.setIntField(10);\r\n    bean1.setLongField(100);\r\n    bean1.setEnumField(AnEnum.ValueA);\r\n    bean1.setEnumBean(AnEnumBean.Two);\r\n    JSONWriter jsonWriter = new DefaultJSONWriter();\r\n    jsonWriter.setEnumAsBean(false);\r\n    String json = jsonWriter.write(bean1);\r\n    TestUtils.assertEquals(DefaultJSONWriter.class.getResource(\"jsonwriter-write-bean-01.txt\"), json);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\plugins\\json\\src\\test\\java\\org\\apache\\struts2\\json\\DefaultJSONWriterTest.java",
  "methodName" : "testWriteExcludeNull",
  "sourceCode" : "@Test\r\npublic void testWriteExcludeNull() throws Exception {\r\n    BeanWithMap bean1 = new BeanWithMap();\r\n    bean1.setStringField(\"str\");\r\n    bean1.setBooleanField(true);\r\n    bean1.setCharField('s');\r\n    bean1.setDoubleField(10.1);\r\n    bean1.setFloatField(1.5f);\r\n    bean1.setIntField(10);\r\n    bean1.setLongField(100);\r\n    bean1.setEnumField(AnEnum.ValueA);\r\n    bean1.setEnumBean(AnEnumBean.Two);\r\n    Map m = new LinkedHashMap();\r\n    m.put(\"a\", \"x\");\r\n    m.put(\"b\", null);\r\n    m.put(\"c\", \"z\");\r\n    bean1.setMap(m);\r\n    JSONWriter jsonWriter = new DefaultJSONWriter();\r\n    jsonWriter.setEnumAsBean(false);\r\n    jsonWriter.setIgnoreHierarchy(false);\r\n    String json = jsonWriter.write(bean1, null, null, true);\r\n    TestUtils.assertEquals(DefaultJSONWriter.class.getResource(\"jsonwriter-write-bean-03.txt\"), json);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\plugins\\json\\src\\test\\java\\org\\apache\\struts2\\json\\DefaultJSONWriterTest.java",
  "methodName" : "testWriteAnnotatedBean",
  "sourceCode" : "@Test\r\npublic void testWriteAnnotatedBean() throws Exception {\r\n    AnnotatedBean bean1 = new AnnotatedBean();\r\n    bean1.setStringField(\"str\");\r\n    bean1.setBooleanField(true);\r\n    bean1.setCharField('s');\r\n    bean1.setDoubleField(10.1);\r\n    bean1.setFloatField(1.5f);\r\n    bean1.setIntField(10);\r\n    bean1.setLongField(100);\r\n    bean1.setEnumField(AnEnum.ValueA);\r\n    bean1.setEnumBean(AnEnumBean.Two);\r\n    bean1.setUrl(new URL(\"http://www.google.com\"));\r\n    JSONWriter jsonWriter = new DefaultJSONWriter();\r\n    jsonWriter.setEnumAsBean(false);\r\n    jsonWriter.setIgnoreHierarchy(false);\r\n    String json = jsonWriter.write(bean1);\r\n    TestUtils.assertEquals(DefaultJSONWriter.class.getResource(\"jsonwriter-write-bean-02.txt\"), json);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\plugins\\json\\src\\test\\java\\org\\apache\\struts2\\json\\DefaultJSONWriterTest.java",
  "methodName" : "testWriteBeanWithList",
  "sourceCode" : "@Test\r\npublic void testWriteBeanWithList() throws Exception {\r\n    BeanWithList bean1 = new BeanWithList();\r\n    bean1.setStringField(\"str\");\r\n    bean1.setBooleanField(true);\r\n    bean1.setCharField('s');\r\n    bean1.setDoubleField(10.1);\r\n    bean1.setFloatField(1.5f);\r\n    bean1.setIntField(10);\r\n    bean1.setLongField(100);\r\n    bean1.setEnumField(AnEnum.ValueA);\r\n    bean1.setEnumBean(AnEnumBean.Two);\r\n    List<String> errors = new ArrayList<String>();\r\n    errors.add(\"Field is required\");\r\n    bean1.setErrors(errors);\r\n    JSONWriter jsonWriter = new DefaultJSONWriter();\r\n    jsonWriter.setEnumAsBean(false);\r\n    jsonWriter.setIgnoreHierarchy(false);\r\n    String json = jsonWriter.write(bean1);\r\n    TestUtils.assertEquals(DefaultJSONWriter.class.getResource(\"jsonwriter-write-bean-04.txt\"), json);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\plugins\\json\\src\\test\\java\\org\\apache\\struts2\\json\\DefaultJSONWriterTest.java",
  "methodName" : "testCanSerializeADate",
  "sourceCode" : "@Test\r\npublic void testCanSerializeADate() throws Exception {\r\n    SimpleDateFormat sdf = new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss z\");\r\n    SingleDateBean dateBean = new SingleDateBean();\r\n    dateBean.setDate(sdf.parse(\"2012-12-23 10:10:10 GMT\"));\r\n    JSONWriter jsonWriter = new DefaultJSONWriter();\r\n    jsonWriter.setEnumAsBean(false);\r\n    TimeZone.setDefault(TimeZone.getTimeZone(\"GMT\"));\r\n    String json = jsonWriter.write(dateBean);\r\n    assertEquals(\"{\\\"date\\\":\\\"2012-12-23T10:10:10\\\"}\", json);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\plugins\\json\\src\\test\\java\\org\\apache\\struts2\\json\\DefaultJSONWriterTest.java",
  "methodName" : "testCanSetDefaultDateFormat",
  "sourceCode" : "@Test\r\npublic void testCanSetDefaultDateFormat() throws Exception {\r\n    SimpleDateFormat sdf = new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss z\");\r\n    SingleDateBean dateBean = new SingleDateBean();\r\n    dateBean.setDate(sdf.parse(\"2012-12-23 10:10:10 GMT\"));\r\n    JSONWriter jsonWriter = new DefaultJSONWriter();\r\n    jsonWriter.setEnumAsBean(false);\r\n    jsonWriter.setDateFormatter(\"MM-dd-yyyy\");\r\n    String json = jsonWriter.write(dateBean);\r\n    assertEquals(\"{\\\"date\\\":\\\"12-23-2012\\\"}\", json);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\plugins\\json\\src\\test\\java\\org\\apache\\struts2\\json\\JSONReaderTest.java",
  "methodName" : "testExponentialNumber",
  "sourceCode" : "@Test\r\npublic void testExponentialNumber() throws Exception {\r\n    Object ret = reader.read(\"5e-5\");\r\n    assertNotNull(ret);\r\n    assertEquals(Double.class, ret.getClass());\r\n    assertEquals(5.0E-5, ret);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\plugins\\json\\src\\test\\java\\org\\apache\\struts2\\json\\JSONReaderTest.java",
  "methodName" : "testExponentialNumber2",
  "sourceCode" : "@Test\r\npublic void testExponentialNumber2() throws Exception {\r\n    Object ret = reader.read(\"123.4e10\");\r\n    assertNotNull(ret);\r\n    assertEquals(Double.class, ret.getClass());\r\n    assertEquals(123.4e10, ret);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\plugins\\json\\src\\test\\java\\org\\apache\\struts2\\json\\JSONReaderTest.java",
  "methodName" : "testDecimalNumber",
  "sourceCode" : "@Test\r\npublic void testDecimalNumber() throws Exception {\r\n    Object ret = reader.read(\"3.2\");\r\n    assertNotNull(ret);\r\n    assertEquals(Double.class, ret.getClass());\r\n    assertEquals(3.2, ret);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\plugins\\json\\src\\test\\java\\org\\apache\\struts2\\json\\JSONReaderTest.java",
  "methodName" : "testNaturalNumber",
  "sourceCode" : "@Test\r\npublic void testNaturalNumber() throws Exception {\r\n    Object ret = reader.read(\"123\");\r\n    assertNotNull(ret);\r\n    assertEquals(Long.class, ret.getClass());\r\n    assertEquals(123L, ret);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\plugins\\junit\\src\\test\\java\\org\\apache\\struts2\\junit\\session\\StrutsJUnit4SessionTestCaseTest.java",
  "methodName" : "testPersistingSessionValues",
  "sourceCode" : "@Test\r\npublic void testPersistingSessionValues() throws Exception {\r\n    String output = executeAction(\"/sessiontest/sessionSet.action\");\r\n    Assert.assertEquals(\"sessionValue\", output);\r\n    this.finishExecution();\r\n    String output2 = executeAction(\"/sessiontest/sessionGet.action\");\r\n    Assert.assertEquals(\"sessionValue\", output2);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\plugins\\junit\\src\\test\\java\\org\\apache\\struts2\\junit\\StrutsJUnit4TestCaseTest.java",
  "methodName" : "testExecuteActionAgainstCustomStrutsConfigFile",
  "sourceCode" : "@Test\r\npublic void testExecuteActionAgainstCustomStrutsConfigFile() throws Exception {\r\n    String output = executeAction(\"/test/testAction-2.action\");\r\n    Assert.assertEquals(\"Test-2\", output);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\plugins\\junit\\src\\test\\java\\org\\apache\\struts2\\junit\\StrutsJUnit4TestCaseTest.java",
  "methodName" : "testSessionInitialized",
  "sourceCode" : "@Test\r\npublic void testSessionInitialized() throws Exception {\r\n    ActionProxy proxy = getActionProxy(\"/test/testAction-2.action\");\r\n    Assert.assertNotNull(\"invocation session should being initialized\", proxy.getInvocation().getInvocationContext().getSession());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\plugins\\junit\\src\\test\\java\\org\\apache\\struts2\\junit\\StrutsSpringJUnit4TestCaseTest.java",
  "methodName" : "getActionMapping",
  "sourceCode" : "@Test\r\npublic void getActionMapping() {\r\n    ActionMapping mapping = getActionMapping(\"/test/testAction.action\");\r\n    Assert.assertNotNull(mapping);\r\n    Assert.assertEquals(\"/test\", mapping.getNamespace());\r\n    Assert.assertEquals(\"testAction\", mapping.getName());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\plugins\\junit\\src\\test\\java\\org\\apache\\struts2\\junit\\StrutsSpringJUnit4TestCaseTest.java",
  "methodName" : "getActionProxy",
  "sourceCode" : "@Test\r\npublic void getActionProxy() throws Exception {\r\n    //set parameters before calling getActionProxy\r\n    request.setParameter(\"name\", \"FD\");\r\n    ActionProxy proxy = getActionProxy(\"/test/testAction.action\");\r\n    Assert.assertNotNull(proxy);\r\n    JUnitTestAction action = (JUnitTestAction) proxy.getAction();\r\n    Assert.assertNotNull(action);\r\n    String result = proxy.execute();\r\n    Assert.assertEquals(Action.SUCCESS, result);\r\n    Assert.assertEquals(\"FD\", action.getName());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\plugins\\junit\\src\\test\\java\\org\\apache\\struts2\\junit\\StrutsSpringJUnit4TestCaseTest.java",
  "methodName" : "executeAction",
  "sourceCode" : "@Test\r\npublic void executeAction() throws ServletException, UnsupportedEncodingException {\r\n    String output = executeAction(\"/test/testAction.action\");\r\n    Assert.assertEquals(\"Hello\", output);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\plugins\\junit\\src\\test\\java\\org\\apache\\struts2\\junit\\StrutsSpringJUnit4TestCaseTest.java",
  "methodName" : "getValueFromStack",
  "sourceCode" : "@Test\r\npublic void getValueFromStack() throws ServletException, UnsupportedEncodingException {\r\n    request.setParameter(\"name\", \"FD\");\r\n    executeAction(\"/test/testAction.action\");\r\n    String name = (String) findValueAfterExecute(\"name\");\r\n    Assert.assertEquals(\"FD\", name);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\plugins\\spring\\src\\test\\java\\org\\apache\\struts2\\ognl\\SecurityMemberAccessProxyTest.java",
  "methodName" : "disallowProxyObjectAccess",
  "sourceCode" : "/**\r\n * When {@code disallowProxyObjectAccess} is {@code true}, proxy access is blocked irrespective of\r\n * {@code disallowProxyMemberAccess} value and irrespective of whether the member itself originates from the proxy.\r\n */\r\n@Test\r\npublic void disallowProxyObjectAccess() {\r\n    sma.useDisallowProxyObjectAccess(Boolean.TRUE.toString());\r\n    Arrays.asList(proxyObjectProxyMember, proxyObjectNonProxyMember).forEach(member -> Arrays.asList(Boolean.TRUE, Boolean.FALSE).forEach(disallowProxyMemberAccess -> {\r\n        sma.useDisallowProxyMemberAccess(disallowProxyMemberAccess.toString());\r\n        assertFalse(sma.isAccessible(context, proxy.getAction(), member, \"\"));\r\n    }));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\plugins\\spring\\src\\test\\java\\org\\apache\\struts2\\ognl\\SecurityMemberAccessProxyTest.java",
  "methodName" : "disallowProxyMemberAccess",
  "sourceCode" : "@Test\r\npublic void disallowProxyMemberAccess() {\r\n    sma.useDisallowProxyObjectAccess(Boolean.FALSE.toString());\r\n    sma.useDisallowProxyMemberAccess(Boolean.TRUE.toString());\r\n    assertFalse(sma.isAccessible(context, proxy.getAction(), proxyObjectProxyMember, \"\"));\r\n    assertTrue(sma.isAccessible(context, proxy.getAction(), proxyObjectNonProxyMember, \"\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\plugins\\spring\\src\\test\\java\\org\\apache\\struts2\\ognl\\SecurityMemberAccessProxyTest.java",
  "methodName" : "allowAllProxyAccess",
  "sourceCode" : "@Test\r\npublic void allowAllProxyAccess() {\r\n    sma.useDisallowProxyObjectAccess(Boolean.FALSE.toString());\r\n    sma.useDisallowProxyMemberAccess(Boolean.FALSE.toString());\r\n    assertTrue(sma.isAccessible(context, proxy.getAction(), proxyObjectProxyMember, \"\"));\r\n    assertTrue(sma.isAccessible(context, proxy.getAction(), proxyObjectNonProxyMember, \"\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\plugins\\spring\\src\\test\\java\\org\\apache\\struts2\\ognl\\SecurityMemberAccessProxyTest.java",
  "methodName" : "nullTargetAndTargetAndMemberNotAllowed",
  "sourceCode" : "@Test\r\npublic void nullTargetAndTargetAndMemberNotAllowed() {\r\n    sma.useDisallowProxyObjectAccess(Boolean.TRUE.toString());\r\n    sma.useDisallowProxyMemberAccess(Boolean.TRUE.toString());\r\n    assertTrue(sma.isAccessible(context, null, proxyObjectProxyMember, \"\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\plugins\\spring\\src\\test\\java\\org\\apache\\struts2\\ognl\\SecurityMemberAccessProxyTest.java",
  "methodName" : "nullTargetAndTargetAllowedAndMemberNotAllowed",
  "sourceCode" : "@Test\r\npublic void nullTargetAndTargetAllowedAndMemberNotAllowed() {\r\n    sma.useDisallowProxyObjectAccess(Boolean.FALSE.toString());\r\n    sma.useDisallowProxyMemberAccess(Boolean.TRUE.toString());\r\n    assertTrue(sma.isAccessible(context, null, proxyObjectProxyMember, \"\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\plugins\\spring\\src\\test\\java\\org\\apache\\struts2\\ognl\\SecurityMemberAccessProxyTest.java",
  "methodName" : "nullTargetAndTargetAndMemberAllowed",
  "sourceCode" : "@Test\r\npublic void nullTargetAndTargetAndMemberAllowed() {\r\n    sma.useDisallowProxyObjectAccess(Boolean.FALSE.toString());\r\n    sma.useDisallowProxyMemberAccess(Boolean.FALSE.toString());\r\n    assertTrue(sma.isAccessible(context, null, proxyObjectProxyMember, \"\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\plugins\\spring\\src\\test\\java\\org\\apache\\struts2\\ognl\\SecurityMemberAccessProxyTest.java",
  "methodName" : "nullMemberAndTargetAndMemberNotAllowed",
  "sourceCode" : "@Test\r\npublic void nullMemberAndTargetAndMemberNotAllowed() {\r\n    sma.useDisallowProxyObjectAccess(Boolean.TRUE.toString());\r\n    sma.useDisallowProxyMemberAccess(Boolean.TRUE.toString());\r\n    Object action = proxy.getAction();\r\n    assertThrows(\"Member cannot be null!\", IllegalArgumentException.class, () -> sma.isAccessible(context, action, null, \"\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\plugins\\spring\\src\\test\\java\\org\\apache\\struts2\\ognl\\SecurityMemberAccessProxyTest.java",
  "methodName" : "nullMemberAndTargetAllowedAndMemberNotAllowed",
  "sourceCode" : "@Test\r\npublic void nullMemberAndTargetAllowedAndMemberNotAllowed() {\r\n    sma.useDisallowProxyObjectAccess(Boolean.FALSE.toString());\r\n    sma.useDisallowProxyMemberAccess(Boolean.TRUE.toString());\r\n    Object action = proxy.getAction();\r\n    assertThrows(\"Member cannot be null!\", IllegalArgumentException.class, () -> sma.isAccessible(context, action, null, \"\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\plugins\\spring\\src\\test\\java\\org\\apache\\struts2\\ognl\\SecurityMemberAccessProxyTest.java",
  "methodName" : "nullMemberAndTargetNotAllowedAndMemberAllowed",
  "sourceCode" : "@Test\r\npublic void nullMemberAndTargetNotAllowedAndMemberAllowed() {\r\n    sma.useDisallowProxyObjectAccess(Boolean.TRUE.toString());\r\n    sma.useDisallowProxyMemberAccess(Boolean.FALSE.toString());\r\n    Object action = proxy.getAction();\r\n    assertThrows(\"Member cannot be null!\", IllegalArgumentException.class, () -> sma.isAccessible(context, action, null, \"\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\plugins\\spring\\src\\test\\java\\org\\apache\\struts2\\ognl\\SecurityMemberAccessProxyTest.java",
  "methodName" : "nullTargetAndMemberAndTargetAndMemberNotAllowed",
  "sourceCode" : "@Test\r\npublic void nullTargetAndMemberAndTargetAndMemberNotAllowed() {\r\n    sma.useDisallowProxyObjectAccess(Boolean.TRUE.toString());\r\n    sma.useDisallowProxyMemberAccess(Boolean.TRUE.toString());\r\n    assertThrows(\"Member cannot be null!\", IllegalArgumentException.class, () -> sma.isAccessible(context, null, null, \"\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\plugins\\spring\\src\\test\\java\\org\\apache\\struts2\\ognl\\SecurityMemberAccessProxyTest.java",
  "methodName" : "nullTargetAndMemberAndTargetNotAllowedAndMemberAllowed",
  "sourceCode" : "@Test\r\npublic void nullTargetAndMemberAndTargetNotAllowedAndMemberAllowed() {\r\n    sma.useDisallowProxyObjectAccess(Boolean.TRUE.toString());\r\n    sma.useDisallowProxyMemberAccess(Boolean.FALSE.toString());\r\n    assertThrows(\"Member cannot be null!\", IllegalArgumentException.class, () -> sma.isAccessible(context, null, null, \"\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\plugins\\spring\\src\\test\\java\\org\\apache\\struts2\\ognl\\SecurityMemberAccessProxyTest.java",
  "methodName" : "nullTargetAndMemberAndTargetAllowedAndMemberNotAllowed",
  "sourceCode" : "@Test\r\npublic void nullTargetAndMemberAndTargetAllowedAndMemberNotAllowed() {\r\n    sma.useDisallowProxyObjectAccess(Boolean.FALSE.toString());\r\n    sma.useDisallowProxyMemberAccess(Boolean.TRUE.toString());\r\n    assertThrows(\"Member cannot be null!\", IllegalArgumentException.class, () -> sma.isAccessible(context, null, null, \"\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\plugins\\spring\\src\\test\\java\\org\\apache\\struts2\\ognl\\SecurityMemberAccessProxyTest.java",
  "methodName" : "nullTargetAndMemberAndTargetAndMemberAllowed",
  "sourceCode" : "@Test\r\npublic void nullTargetAndMemberAndTargetAndMemberAllowed() {\r\n    sma.useDisallowProxyObjectAccess(Boolean.FALSE.toString());\r\n    sma.useDisallowProxyMemberAccess(Boolean.FALSE.toString());\r\n    assertThrows(\"Member cannot be null!\", IllegalArgumentException.class, () -> sma.isAccessible(context, null, null, \"\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\plugins\\spring\\src\\test\\java\\org\\apache\\struts2\\ognl\\SecurityMemberAccessProxyTest.java",
  "methodName" : "nullPropertyName",
  "sourceCode" : "@Test\r\npublic void nullPropertyName() {\r\n    sma.useDisallowProxyMemberAccess(Boolean.FALSE.toString());\r\n    Object action = proxy.getAction();\r\n    assertTrue(sma.isAccessible(context, action, proxyObjectProxyMember, null));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\plugins\\spring\\src\\test\\java\\org\\apache\\struts2\\ognl\\SecurityMemberAccessProxyTest.java",
  "methodName" : "classInclusion_springProxy_allowProxyObjectAccess",
  "sourceCode" : "/**\r\n * When the allowlist is enabled and proxy object access is allowed, Spring proxies should be allowlisted based\r\n * on their underlying target object. Class allowlisting should work as expected.\r\n */\r\n@Test\r\npublic void classInclusion_springProxy_allowProxyObjectAccess() throws Exception {\r\n    SpringService proxyObject = newSpringService();\r\n    Method proxyMethod = proxyObject.getClass().getMethod(\"doSomething\");\r\n    sma.useEnforceAllowlistEnabled(Boolean.TRUE.toString());\r\n    sma.useDisallowProxyObjectAccess(Boolean.FALSE.toString());\r\n    sma.useAllowlistClasses(SpringServiceImpl.class.getName());\r\n    assertTrue(sma.checkAllowlist(proxyObject, proxyMethod));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\plugins\\testng\\src\\main\\java\\org\\apache\\struts2\\testng\\TestNGStrutsTestCase.java",
  "methodName" : "setUp",
  "sourceCode" : "@BeforeTest\r\n@Override\r\nprotected void setUp() throws Exception {\r\n    initDispatcher(null);\r\n}",
  "annotations" : [ "BeforeTest" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\plugins\\testng\\src\\main\\java\\org\\apache\\struts2\\testng\\TestNGStrutsTestCase.java",
  "methodName" : "tearDown",
  "sourceCode" : "@AfterTest\r\n@Override\r\nprotected void tearDown() throws Exception {\r\n    StrutsTestCaseHelper.tearDown();\r\n}",
  "annotations" : [ "AfterTest" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\plugins\\testng\\src\\main\\java\\org\\apache\\struts2\\testng\\TestNGXWorkTestCase.java",
  "methodName" : "setUp",
  "sourceCode" : "@BeforeTest\r\nprotected void setUp() throws Exception {\r\n    configurationManager = XWorkTestCaseHelper.setUp();\r\n    configuration = new MockConfiguration();\r\n    ((MockConfiguration) configuration).selfRegister();\r\n    container = configuration.getContainer();\r\n    actionProxyFactory = container.getInstance(ActionProxyFactory.class);\r\n}",
  "annotations" : [ "BeforeTest" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\plugins\\testng\\src\\main\\java\\org\\apache\\struts2\\testng\\TestNGXWorkTestCase.java",
  "methodName" : "tearDown",
  "sourceCode" : "@AfterTest\r\nprotected void tearDown() throws Exception {\r\n    XWorkTestCaseHelper.tearDown(configurationManager);\r\n    configurationManager = null;\r\n    configuration = null;\r\n    container = null;\r\n    actionProxyFactory = null;\r\n}",
  "annotations" : [ "AfterTest" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\plugins\\testng\\src\\test\\java\\org\\apache\\struts2\\testng\\TestNGStrutsTestCaseTest.java",
  "methodName" : "testRun",
  "sourceCode" : "@Test\r\npublic void testRun() {\r\n    ran = true;\r\n    mgr = this.configurationManager;\r\n    du = Dispatcher.getInstance();\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\plugins\\tiles\\src\\test\\java\\org\\apache\\struts2\\tiles\\StrutsTilesAnnotationProcessorTest.java",
  "methodName" : "findAnnotationSingleAction",
  "sourceCode" : "@Test\r\npublic void findAnnotationSingleAction() {\r\n    StrutsTilesAnnotationProcessor annotationProcessor = new StrutsTilesAnnotationProcessor();\r\n    TilesDefinition tilesDefinition = annotationProcessor.findAnnotation(new TilesTestActionSingleAnnotation(), null);\r\n    Assert.assertNotNull(tilesDefinition);\r\n    Assert.assertEquals(\"definition-name\", tilesDefinition.name());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\plugins\\tiles\\src\\test\\java\\org\\apache\\struts2\\tiles\\StrutsTilesAnnotationProcessorTest.java",
  "methodName" : "findAnnotationMultipleActionNameNull",
  "sourceCode" : "@Test\r\npublic void findAnnotationMultipleActionNameNull() {\r\n    StrutsTilesAnnotationProcessor annotationProcessor = new StrutsTilesAnnotationProcessor();\r\n    TilesDefinition tilesDefinition = annotationProcessor.findAnnotation(new TilesTestActionMultipleAnnotations(), null);\r\n    Assert.assertNotNull(tilesDefinition);\r\n    Assert.assertEquals(\"def1\", tilesDefinition.name());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\plugins\\tiles\\src\\test\\java\\org\\apache\\struts2\\tiles\\StrutsTilesAnnotationProcessorTest.java",
  "methodName" : "findAnnotationMultipleActionNameGiven",
  "sourceCode" : "@Test\r\npublic void findAnnotationMultipleActionNameGiven() {\r\n    StrutsTilesAnnotationProcessor annotationProcessor = new StrutsTilesAnnotationProcessor();\r\n    TilesDefinition tilesDefinition = annotationProcessor.findAnnotation(new TilesTestActionMultipleAnnotations(), \"def2\");\r\n    Assert.assertNotNull(tilesDefinition);\r\n    Assert.assertEquals(\"def2\", tilesDefinition.name());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\plugins\\tiles\\src\\test\\java\\org\\apache\\struts2\\tiles\\StrutsTilesAnnotationProcessorTest.java",
  "methodName" : "findAnnotationMultipleActionNotFound",
  "sourceCode" : "@Test\r\npublic void findAnnotationMultipleActionNotFound() {\r\n    StrutsTilesAnnotationProcessor annotationProcessor = new StrutsTilesAnnotationProcessor();\r\n    TilesDefinition tilesDefinition = annotationProcessor.findAnnotation(new TilesTestActionMultipleAnnotations(), \"def3\");\r\n    Assert.assertNull(tilesDefinition);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\plugins\\tiles\\src\\test\\java\\org\\apache\\struts2\\tiles\\StrutsTilesAnnotationProcessorTest.java",
  "methodName" : "buildDefiniton",
  "sourceCode" : "@Test\r\npublic void buildDefiniton() {\r\n    StrutsTilesAnnotationProcessor annotationProcessor = new StrutsTilesAnnotationProcessor();\r\n    TilesDefinition tilesDefinition = annotationProcessor.findAnnotation(new TilesTestActionSingleAnnotation(), null);\r\n    Definition definition = annotationProcessor.buildTilesDefinition(\"tileName\", tilesDefinition);\r\n    Assert.assertNotNull(definition);\r\n    Assert.assertEquals(\"tileName\", definition.getName());\r\n    Assert.assertEquals(\"preparer\", definition.getPreparer());\r\n    Assert.assertEquals(\"base-definition\", definition.getExtends());\r\n    Attribute templateAttribute = definition.getTemplateAttribute();\r\n    Assert.assertEquals(\"template\", templateAttribute.getValue());\r\n    Assert.assertEquals(\"type\", templateAttribute.getRenderer());\r\n    Assert.assertEquals(\"role\", templateAttribute.getRole());\r\n    Expression definitionExpressionObject = templateAttribute.getExpressionObject();\r\n    Assert.assertEquals(\"templ*\", definitionExpressionObject.getExpression());\r\n    Assert.assertNull(definitionExpressionObject.getLanguage());\r\n    Attribute putAttribute = definition.getAttribute(\"put-attr\");\r\n    Assert.assertNotNull(putAttribute);\r\n    Assert.assertEquals(\"attr-val\", putAttribute.getValue());\r\n    Assert.assertEquals(\"attr-type\", putAttribute.getRenderer());\r\n    Assert.assertEquals(\"attr-role\", putAttribute.getRole());\r\n    Expression putAttrExpressionObject = putAttribute.getExpressionObject();\r\n    Assert.assertEquals(\"expr\", putAttrExpressionObject.getExpression());\r\n    Assert.assertEquals(\"lang\", putAttrExpressionObject.getLanguage());\r\n    Attribute listAttribute = definition.getAttribute(\"list-name\");\r\n    Assert.assertEquals(\"list-role\", listAttribute.getRole());\r\n    List<Attribute> listValue = getListValue(listAttribute);\r\n    Assert.assertEquals(2, listValue.size());\r\n    Attribute addAttribute = listValue.get(0);\r\n    Assert.assertEquals(\"list-attr-role\", addAttribute.getRole());\r\n    Assert.assertEquals(\"list-attr-val\", addAttribute.getValue());\r\n    Assert.assertEquals(\"list-attr-type\", addAttribute.getRenderer());\r\n    Expression addAttrExpressionObject = addAttribute.getExpressionObject();\r\n    Assert.assertEquals(\"list-attr-expr\", addAttrExpressionObject.getExpression());\r\n    Attribute addListAttribute = listValue.get(1);\r\n    Assert.assertEquals(\"list-list-attr-role\", addListAttribute.getRole());\r\n    List<Attribute> addListValue = getListValue(addListAttribute);\r\n    Assert.assertEquals(1, addListValue.size());\r\n    Assert.assertEquals(\"list-list-add-attr\", addListValue.get(0).getValue());\r\n    Set<String> cascadedAttributeNames = definition.getCascadedAttributeNames();\r\n    Assert.assertEquals(2, cascadedAttributeNames.size());\r\n    Assert.assertTrue(cascadedAttributeNames.contains(\"put-attr\"));\r\n    Assert.assertTrue(cascadedAttributeNames.contains(\"list-name\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\plugins\\tiles\\src\\test\\java\\org\\apache\\struts2\\tiles\\StrutsTilesAnnotationProcessorTest.java",
  "methodName" : "buildDefinitonAllEmpty",
  "sourceCode" : "@Test\r\npublic void buildDefinitonAllEmpty() {\r\n    StrutsTilesAnnotationProcessor annotationProcessor = new StrutsTilesAnnotationProcessor();\r\n    TilesDefinition tilesDefinition = annotationProcessor.findAnnotation(new TilesTestActionSingleAnnotationAllEmpty(), null);\r\n    Definition definition = annotationProcessor.buildTilesDefinition(null, tilesDefinition);\r\n    Assert.assertNotNull(definition);\r\n    Assert.assertNull(definition.getName());\r\n    Assert.assertNull(definition.getPreparer());\r\n    Assert.assertNull(definition.getExtends());\r\n    Attribute templateAttribute = definition.getTemplateAttribute();\r\n    Assert.assertNull(templateAttribute.getValue());\r\n    Assert.assertNull(templateAttribute.getRole());\r\n    Assert.assertNull(templateAttribute.getExpressionObject());\r\n    Attribute putAttribute = definition.getAttribute(\"put-attr\");\r\n    Assert.assertNotNull(putAttribute);\r\n    Assert.assertNull(putAttribute.getValue());\r\n    Assert.assertNull(putAttribute.getRenderer());\r\n    Assert.assertNull(putAttribute.getRole());\r\n    Assert.assertNull(putAttribute.getExpressionObject());\r\n    Attribute listAttribute = definition.getAttribute(\"list-name\");\r\n    Assert.assertNull(listAttribute.getRole());\r\n    List<Attribute> listValue = getListValue(listAttribute);\r\n    Assert.assertEquals(2, listValue.size());\r\n    Attribute addAttribute = listValue.get(0);\r\n    Assert.assertNull(addAttribute.getRole());\r\n    Assert.assertNull(addAttribute.getValue());\r\n    Assert.assertNull(addAttribute.getRenderer());\r\n    Assert.assertNull(addAttribute.getExpressionObject());\r\n    Attribute addListAttribute = listValue.get(1);\r\n    Assert.assertNull(addListAttribute.getRole());\r\n    List<Attribute> addListValue = getListValue(addListAttribute);\r\n    Assert.assertEquals(1, addListValue.size());\r\n    Assert.assertNull(addListValue.get(0).getValue());\r\n    Set<String> cascadedAttributeNames = definition.getCascadedAttributeNames();\r\n    Assert.assertNull(cascadedAttributeNames);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\plugins\\tiles\\src\\test\\java\\org\\apache\\struts2\\tiles\\StrutsTilesContainerFactoryTest.java",
  "methodName" : "getSources",
  "sourceCode" : "@Test\r\npublic void getSources() {\r\n    ApplicationResource pathResource = new URLApplicationResource(\"/org/apache/tiles/core/config/tiles-defs.xml\", Objects.requireNonNull(getClass().getResource(\"/org/apache/tiles/core/config/tiles-defs.xml\")));\r\n    ApplicationResource classpathResource = new URLApplicationResource(\"/org/apache/tiles/core/config/tiles_defs1.xml\", Objects.requireNonNull(getClass().getResource(\"/org/apache/tiles/core/config/tiles_defs1.xml\")));\r\n    when(applicationContext.getInitParams()).thenReturn(Collections.emptyMap());\r\n    when(applicationContext.getResources(\"*tiles*.xml\")).thenReturn(Arrays.asList(pathResource, classpathResource));\r\n    List<ApplicationResource> resources = factory.getSources(applicationContext);\r\n    assertEquals(\"The urls list is not two-sized\", 2, resources.size());\r\n    assertEquals(\"The URL is not correct\", pathResource, resources.get(0));\r\n    assertEquals(\"The URL is not correct\", classpathResource, resources.get(1));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\plugins\\tiles\\src\\test\\java\\org\\apache\\struts2\\tiles\\StrutsTilesContainerFactoryTest.java",
  "methodName" : "createAttributeEvaluatorFactory",
  "sourceCode" : "@Test\r\npublic void createAttributeEvaluatorFactory() {\r\n    LocaleResolver resolver = factory.createLocaleResolver(applicationContext);\r\n    // explicitly disables support for EL\r\n    JspFactory.setDefaultFactory(null);\r\n    AttributeEvaluatorFactory attributeEvaluatorFactory = factory.createAttributeEvaluatorFactory(applicationContext, resolver);\r\n    assertTrue(\"The class of the evaluator is not correct\", attributeEvaluatorFactory.getAttributeEvaluator((String) null) instanceof DirectAttributeEvaluator);\r\n    assertTrue(\"The class of the evaluator is not correct\", attributeEvaluatorFactory.getAttributeEvaluator(\"S2\") instanceof StrutsAttributeEvaluator);\r\n    assertTrue(\"The class of the evaluator is not correct\", attributeEvaluatorFactory.getAttributeEvaluator(\"OGNL\") instanceof OGNLAttributeEvaluator);\r\n    assertTrue(\"The class of the evaluator is not correct\", attributeEvaluatorFactory.getAttributeEvaluator(\"I18N\") instanceof I18NAttributeEvaluator);\r\n    assertTrue(\"The class of the evaluator is not correct\", attributeEvaluatorFactory.getAttributeEvaluator(\"EL\") instanceof DirectAttributeEvaluator);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\plugins\\tiles\\src\\test\\java\\org\\apache\\struts2\\tiles\\StrutsTilesContainerFactoryTest.java",
  "methodName" : "createPreparerFactory",
  "sourceCode" : "@Test\r\npublic void createPreparerFactory() {\r\n    PreparerFactory preparerFactory = factory.createPreparerFactory(applicationContext);\r\n    assertTrue(\"The class of the preparer factory is not correct\", preparerFactory instanceof BasicPreparerFactory);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\plugins\\tiles\\src\\test\\java\\org\\apache\\struts2\\tiles\\StrutsTilesContainerFactoryTest.java",
  "methodName" : "createDefaultAttributeRenderer",
  "sourceCode" : "@Test\r\npublic void createDefaultAttributeRenderer() {\r\n    TilesContainer container = mock(TilesContainer.class);\r\n    AttributeEvaluatorFactory attributeEvaluatorFactory = mock(AttributeEvaluatorFactory.class);\r\n    BasicRendererFactory rendererFactory = mock(BasicRendererFactory.class);\r\n    Renderer stringRenderer = mock(Renderer.class);\r\n    Renderer templateRenderer = mock(Renderer.class);\r\n    Renderer definitionRenderer = mock(Renderer.class);\r\n    when(rendererFactory.getRenderer(\"string\")).thenReturn(stringRenderer);\r\n    when(rendererFactory.getRenderer(\"template\")).thenReturn(templateRenderer);\r\n    when(rendererFactory.getRenderer(\"definition\")).thenReturn(definitionRenderer);\r\n    when(rendererFactory.getRenderer(\"freemarker\")).thenReturn(definitionRenderer);\r\n    Renderer renderer = factory.createDefaultAttributeRenderer(rendererFactory, applicationContext, container, attributeEvaluatorFactory);\r\n    assertTrue(\"The default renderer class is not correct\", renderer instanceof ChainedDelegateRenderer);\r\n    verify(rendererFactory).getRenderer(\"string\");\r\n    verify(rendererFactory).getRenderer(\"template\");\r\n    verify(rendererFactory).getRenderer(\"definition\");\r\n    verify(rendererFactory).getRenderer(\"freemarker\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\plugins\\tiles\\src\\test\\java\\org\\apache\\struts2\\tiles\\StrutsWildcardServletApplicationContextTest.java",
  "methodName" : "wildcardSupport",
  "sourceCode" : "@Test\r\npublic void wildcardSupport() {\r\n    StrutsWildcardServletApplicationContext applicationContext = new StrutsWildcardServletApplicationContext(context);\r\n    Collection<ApplicationResource> resources = applicationContext.getResources(\"*tiles*.xml\");\r\n    assertThat(resources).hasSize(1).extracting(ApplicationResource::getLocalePath).first().asString().endsWith(\"/WEB-INF/tiles.xml\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\plugins\\tiles\\src\\test\\java\\org\\apache\\tiles\\api\\access\\TilesAccessTest.java",
  "methodName" : "testSetContainer",
  "sourceCode" : "@Test\r\npublic void testSetContainer() {\r\n    ApplicationContext context = createMock(ApplicationContext.class);\r\n    TilesContainer container = createMock(TilesContainer.class);\r\n    Map<String, Object> attribs = new HashMap<>();\r\n    expect(context.getApplicationScope()).andReturn(attribs);\r\n    replay(context, container);\r\n    TilesAccess.setContainer(context, container, null);\r\n    assertEquals(attribs.size(), 1);\r\n    assertEquals(attribs.get(TilesAccess.CONTAINER_ATTRIBUTE), container);\r\n    verify(context, container);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\plugins\\tiles\\src\\test\\java\\org\\apache\\tiles\\api\\access\\TilesAccessTest.java",
  "methodName" : "testSetContainerWithKey",
  "sourceCode" : "@Test\r\npublic void testSetContainerWithKey() {\r\n    ApplicationContext context = createMock(ApplicationContext.class);\r\n    TilesContainer container = createMock(TilesContainer.class);\r\n    Map<String, Object> attribs = new HashMap<>();\r\n    expect(context.getApplicationScope()).andReturn(attribs).anyTimes();\r\n    replay(context, container);\r\n    TilesAccess.setContainer(context, container, \"myKey\");\r\n    assertEquals(1, attribs.size());\r\n    assertEquals(container, attribs.get(\"myKey\"));\r\n    TilesAccess.setContainer(context, null, \"myKey\");\r\n    assertEquals(0, attribs.size());\r\n    TilesAccess.setContainer(context, container, null);\r\n    assertEquals(1, attribs.size());\r\n    assertEquals(container, attribs.get(TilesAccess.CONTAINER_ATTRIBUTE));\r\n    verify(context, container);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\plugins\\tiles\\src\\test\\java\\org\\apache\\tiles\\api\\access\\TilesAccessTest.java",
  "methodName" : "testGetContainer",
  "sourceCode" : "@Test\r\npublic void testGetContainer() {\r\n    ApplicationContext context = createMock(ApplicationContext.class);\r\n    TilesContainer container = createMock(TilesContainer.class);\r\n    Map<String, Object> attribs = new HashMap<>();\r\n    expect(context.getApplicationScope()).andReturn(attribs).anyTimes();\r\n    replay(context, container);\r\n    attribs.put(TilesAccess.CONTAINER_ATTRIBUTE, container);\r\n    assertEquals(container, TilesAccess.getContainer(context));\r\n    verify(context, container);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\plugins\\tiles\\src\\test\\java\\org\\apache\\tiles\\api\\access\\TilesAccessTest.java",
  "methodName" : "testGetContainerWithKey",
  "sourceCode" : "@Test\r\npublic void testGetContainerWithKey() {\r\n    ApplicationContext context = createMock(ApplicationContext.class);\r\n    TilesContainer container = createMock(TilesContainer.class);\r\n    Map<String, Object> attribs = new HashMap<>();\r\n    expect(context.getApplicationScope()).andReturn(attribs).anyTimes();\r\n    replay(context, container);\r\n    attribs.put(TilesAccess.CONTAINER_ATTRIBUTE, container);\r\n    attribs.put(\"myKey\", container);\r\n    assertEquals(container, TilesAccess.getContainer(context, null));\r\n    assertEquals(container, TilesAccess.getContainer(context, \"myKey\"));\r\n    verify(context, container);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\plugins\\tiles\\src\\test\\java\\org\\apache\\tiles\\api\\access\\TilesAccessTest.java",
  "methodName" : "testSetCurrentContainer",
  "sourceCode" : "@Test\r\npublic void testSetCurrentContainer() {\r\n    Request request = createMock(Request.class);\r\n    ApplicationContext context = createMock(ApplicationContext.class);\r\n    TilesContainer container = createMock(TilesContainer.class);\r\n    Map<String, Object> attribs = new HashMap<>();\r\n    attribs.put(\"myKey\", container);\r\n    Map<String, Object> requestScope = new HashMap<>();\r\n    expect(context.getApplicationScope()).andReturn(attribs).anyTimes();\r\n    expect(request.getContext(\"request\")).andReturn(requestScope);\r\n    expect(request.getApplicationContext()).andReturn(context);\r\n    replay(request, context, container);\r\n    TilesAccess.setCurrentContainer(request, \"myKey\");\r\n    assertEquals(container, requestScope.get(TilesAccess.CURRENT_CONTAINER_ATTRIBUTE_NAME));\r\n    verify(request, context, container);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\plugins\\tiles\\src\\test\\java\\org\\apache\\tiles\\api\\access\\TilesAccessTest.java",
  "methodName" : "testSetCurrentContainerException",
  "sourceCode" : "@Test(expected = NoSuchContainerException.class)\r\npublic void testSetCurrentContainerException() {\r\n    Request request = createMock(Request.class);\r\n    ApplicationContext context = createMock(ApplicationContext.class);\r\n    Map<String, Object> attribs = new HashMap<>();\r\n    expect(request.getApplicationContext()).andReturn(context);\r\n    expect(context.getApplicationScope()).andReturn(attribs).anyTimes();\r\n    replay(request, context);\r\n    try {\r\n        TilesAccess.setCurrentContainer(request, \"myKey\");\r\n    } finally {\r\n        verify(request, context);\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\plugins\\tiles\\src\\test\\java\\org\\apache\\tiles\\api\\access\\TilesAccessTest.java",
  "methodName" : "testSetCurrentContainerWithContainer",
  "sourceCode" : "@Test\r\npublic void testSetCurrentContainerWithContainer() {\r\n    Request request = createMock(Request.class);\r\n    ApplicationContext context = createMock(ApplicationContext.class);\r\n    TilesContainer container = createMock(TilesContainer.class);\r\n    Map<String, Object> attribs = new HashMap<>();\r\n    attribs.put(\"myKey\", container);\r\n    Map<String, Object> requestScope = new HashMap<>();\r\n    expect(context.getApplicationScope()).andReturn(attribs).anyTimes();\r\n    expect(request.getContext(\"request\")).andReturn(requestScope);\r\n    replay(request, context, container);\r\n    TilesAccess.setCurrentContainer(request, container);\r\n    assertEquals(container, requestScope.get(TilesAccess.CURRENT_CONTAINER_ATTRIBUTE_NAME));\r\n    verify(request, context, container);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\plugins\\tiles\\src\\test\\java\\org\\apache\\tiles\\api\\access\\TilesAccessTest.java",
  "methodName" : "testSetCurrentContainerWithContainerException",
  "sourceCode" : "@Test(expected = NullPointerException.class)\r\npublic void testSetCurrentContainerWithContainerException() {\r\n    Request request = createMock(Request.class);\r\n    ApplicationContext context = createMock(ApplicationContext.class);\r\n    Map<String, Object> attribs = new HashMap<>();\r\n    expect(context.getApplicationScope()).andReturn(attribs).anyTimes();\r\n    replay(request, context);\r\n    try {\r\n        TilesAccess.setCurrentContainer(request, (TilesContainer) null);\r\n    } finally {\r\n        verify(request, context);\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\plugins\\tiles\\src\\test\\java\\org\\apache\\tiles\\api\\access\\TilesAccessTest.java",
  "methodName" : "testGetCurrentContainer",
  "sourceCode" : "@Test\r\npublic void testGetCurrentContainer() {\r\n    Request request = createMock(Request.class);\r\n    ApplicationContext context = createMock(ApplicationContext.class);\r\n    TilesContainer container = createMock(TilesContainer.class);\r\n    Map<String, Object> attribs = new HashMap<>();\r\n    attribs.put(\"myKey\", container);\r\n    Map<String, Object> requestScope = new HashMap<>();\r\n    requestScope.put(TilesAccess.CURRENT_CONTAINER_ATTRIBUTE_NAME, container);\r\n    expect(request.getApplicationContext()).andReturn(context);\r\n    expect(context.getApplicationScope()).andReturn(attribs).anyTimes();\r\n    expect(request.getContext(\"request\")).andReturn(requestScope);\r\n    replay(request, context, container);\r\n    assertEquals(container, TilesAccess.getCurrentContainer(request));\r\n    verify(request, context, container);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\plugins\\tiles\\src\\test\\java\\org\\apache\\tiles\\api\\access\\TilesAccessTest.java",
  "methodName" : "testGetCurrentContainerDefault",
  "sourceCode" : "@Test\r\npublic void testGetCurrentContainerDefault() {\r\n    Request request = createMock(Request.class);\r\n    ApplicationContext context = createMock(ApplicationContext.class);\r\n    TilesContainer container = createMock(TilesContainer.class);\r\n    Map<String, Object> attribs = new HashMap<>();\r\n    attribs.put(TilesAccess.CONTAINER_ATTRIBUTE, container);\r\n    Map<String, Object> requestScope = new HashMap<>();\r\n    expect(request.getApplicationContext()).andReturn(context);\r\n    expect(context.getApplicationScope()).andReturn(attribs).anyTimes();\r\n    expect(request.getContext(\"request\")).andReturn(requestScope);\r\n    replay(request, context, container);\r\n    assertEquals(container, TilesAccess.getCurrentContainer(request));\r\n    verify(request, context, container);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\plugins\\tiles\\src\\test\\java\\org\\apache\\tiles\\api\\AttributeTest.java",
  "methodName" : "testCreateTemplateAttribute1",
  "sourceCode" : "/**\r\n * Tests {@link Attribute#createTemplateAttribute(String)}.\r\n */\r\n@Test\r\npublic void testCreateTemplateAttribute1() {\r\n    Attribute attribute = Attribute.createTemplateAttribute(\"/my/template.jsp\");\r\n    assertEquals(\"/my/template.jsp\", attribute.getValue());\r\n    assertEquals(\"template\", attribute.getRenderer());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\plugins\\tiles\\src\\test\\java\\org\\apache\\tiles\\api\\AttributeTest.java",
  "methodName" : "testAttribute",
  "sourceCode" : "/**\r\n * Tests {@link Attribute#Attribute()}.\r\n */\r\n@Test\r\npublic void testAttribute() {\r\n    Attribute attribute = new Attribute();\r\n    assertNull(attribute.getValue());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\plugins\\tiles\\src\\test\\java\\org\\apache\\tiles\\api\\AttributeTest.java",
  "methodName" : "testAttributeObject",
  "sourceCode" : "/**\r\n * Tests {@link Attribute#Attribute(Object)}.\r\n */\r\n@Test\r\npublic void testAttributeObject() {\r\n    Attribute attribute = new Attribute(\"my.value\");\r\n    assertEquals(\"my.value\", attribute.getValue());\r\n    assertNull(attribute.getRenderer());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\plugins\\tiles\\src\\test\\java\\org\\apache\\tiles\\api\\AttributeTest.java",
  "methodName" : "testAttributeObjectString",
  "sourceCode" : "/**\r\n * Tests {@link Attribute#Attribute(Object, String)}.\r\n */\r\n@Test\r\npublic void testAttributeObjectString() {\r\n    Attribute attribute = new Attribute(\"my.value\", \"role1,role2\");\r\n    assertEquals(\"my.value\", attribute.getValue());\r\n    assertNull(attribute.getRenderer());\r\n    Set<String> roles = new HashSet<>();\r\n    roles.add(\"role1\");\r\n    roles.add(\"role2\");\r\n    assertEquals(roles, attribute.getRoles());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\plugins\\tiles\\src\\test\\java\\org\\apache\\tiles\\api\\AttributeTest.java",
  "methodName" : "testAttributeComplete",
  "sourceCode" : "/**\r\n * Tests {@link Attribute#Attribute(Object, Expression, String, String)}.\r\n */\r\n@Test\r\npublic void testAttributeComplete() {\r\n    Expression expression = new Expression(\"my.expression\", \"MYLANG\");\r\n    Attribute attribute = new Attribute(\"my.value\", expression, \"role1,role2\", \"myrenderer\");\r\n    assertEquals(\"my.value\", attribute.getValue());\r\n    assertEquals(\"myrenderer\", attribute.getRenderer());\r\n    Set<String> roles = new HashSet<>();\r\n    roles.add(\"role1\");\r\n    roles.add(\"role2\");\r\n    assertEquals(roles, attribute.getRoles());\r\n    assertEquals(\"my.expression\", attribute.getExpressionObject().getExpression());\r\n    assertEquals(\"MYLANG\", attribute.getExpressionObject().getLanguage());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\plugins\\tiles\\src\\test\\java\\org\\apache\\tiles\\api\\AttributeTest.java",
  "methodName" : "testAttributeCopy",
  "sourceCode" : "/**\r\n * Tests {@link Attribute#Attribute(Attribute)}.\r\n */\r\n@Test\r\npublic void testAttributeCopy() {\r\n    Expression expression = new Expression(\"my.expression\", \"MYLANG\");\r\n    Attribute attribute = new Attribute(\"my.value\", expression, \"role1,role2\", \"myrenderer\");\r\n    attribute = new Attribute(attribute);\r\n    assertEquals(\"my.value\", attribute.getValue());\r\n    assertEquals(\"myrenderer\", attribute.getRenderer());\r\n    Set<String> roles = new HashSet<>();\r\n    roles.add(\"role1\");\r\n    roles.add(\"role2\");\r\n    assertEquals(roles, attribute.getRoles());\r\n    assertEquals(\"my.expression\", attribute.getExpressionObject().getExpression());\r\n    assertEquals(\"MYLANG\", attribute.getExpressionObject().getLanguage());\r\n    attribute = new Attribute(\"my.value\", null, \"role1,role2\", \"myrenderer\");\r\n    attribute = new Attribute(attribute);\r\n    assertEquals(\"my.value\", attribute.getValue());\r\n    assertEquals(\"myrenderer\", attribute.getRenderer());\r\n    roles = new HashSet<>();\r\n    roles.add(\"role1\");\r\n    roles.add(\"role2\");\r\n    assertEquals(roles, attribute.getRoles());\r\n    assertNull(attribute.getExpressionObject());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\plugins\\tiles\\src\\test\\java\\org\\apache\\tiles\\api\\AttributeTest.java",
  "methodName" : "testEquals",
  "sourceCode" : "/**\r\n * Tests {@link Attribute#equals(Object)}.\r\n */\r\n@Test\r\npublic void testEquals() {\r\n    Expression expression = new Expression(\"my.expression\", \"MYLANG\");\r\n    Attribute attribute = new Attribute(\"my.value\", expression, \"role1,role2\", \"myrenderer\");\r\n    Attribute attribute2 = new Attribute(attribute);\r\n    assertEquals(attribute, attribute2);\r\n    attribute2.setRenderer(\"anotherRenderer\");\r\n    assertNotEquals(attribute, attribute2);\r\n    attribute2 = new Attribute(attribute);\r\n    attribute2.setRole(\"otherrole\");\r\n    assertNotEquals(attribute, attribute2);\r\n    attribute2 = new Attribute(attribute);\r\n    attribute2.setExpressionObject(new Expression(\"another.expression\", \"MYLANG\"));\r\n    assertNotEquals(attribute, attribute2);\r\n    attribute2 = new Attribute(attribute);\r\n    attribute2.setValue(\"anothervalue\");\r\n    assertNotEquals(attribute, attribute2);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\plugins\\tiles\\src\\test\\java\\org\\apache\\tiles\\api\\AttributeTest.java",
  "methodName" : "testGetRole",
  "sourceCode" : "/**\r\n * Tests {@link Attribute#getRole()} and {@link Attribute#setRole(String)}.\r\n */\r\n@Test\r\npublic void testGetRole() {\r\n    Attribute attribute = new Attribute(\"my.value\");\r\n    assertNull(attribute.getRole());\r\n    Set<String> roles = new LinkedHashSet<>();\r\n    attribute.setRoles(roles);\r\n    assertNull(attribute.getRole());\r\n    roles.add(\"role1\");\r\n    roles.add(\"role2\");\r\n    assertEquals(\"role1,role2\", attribute.getRole());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\plugins\\tiles\\src\\test\\java\\org\\apache\\tiles\\api\\AttributeTest.java",
  "methodName" : "testHashCode",
  "sourceCode" : "/**\r\n * Tests {@link Attribute#hashCode()}.\r\n */\r\n@Test\r\npublic void testHashCode() {\r\n    Expression expression = new Expression(\"my.expression\", \"MYLANG\");\r\n    Attribute attribute = new Attribute(\"my.value\", expression, \"role1,role2\", \"myrenderer\");\r\n    Set<String> roles = new HashSet<>();\r\n    roles.add(\"role1\");\r\n    roles.add(\"role2\");\r\n    assertEquals(Objects.hashCode(\"my.value\") + Objects.hashCode(expression) + Objects.hashCode(roles) + Objects.hashCode(\"myrenderer\"), attribute.hashCode());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\plugins\\tiles\\src\\test\\java\\org\\apache\\tiles\\api\\AttributeTest.java",
  "methodName" : "testToString",
  "sourceCode" : "/**\r\n * Tests {@link Attribute#toString()}.\r\n */\r\n@Test\r\npublic void testToString() {\r\n    Expression expression = new Expression(\"my.expression\", \"MYLANG\");\r\n    Attribute attribute = new Attribute(\"my.value\", expression, \"role1,role2\", \"myrenderer\");\r\n    assertEquals(\"my.value\", attribute.toString());\r\n    attribute.setValue(null);\r\n    assertNotNull(attribute.toString());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\plugins\\tiles\\src\\test\\java\\org\\apache\\tiles\\api\\AttributeTest.java",
  "methodName" : "testInherit",
  "sourceCode" : "@Test\r\npublic void testInherit() {\r\n    Attribute attribute = new Attribute(null, null, null, null);\r\n    Attribute parentAttribute = new Attribute(\"value\", Expression.createExpression(\"expression\", \"language\"), \"role\", \"renderer\");\r\n    attribute.inherit(parentAttribute);\r\n    assertEquals(\"value\", attribute.getValue());\r\n    assertEquals(\"expression\", attribute.getExpressionObject().getExpression());\r\n    assertEquals(\"language\", attribute.getExpressionObject().getLanguage());\r\n    assertEquals(\"role\", attribute.getRole());\r\n    assertEquals(\"renderer\", attribute.getRenderer());\r\n    Expression expression = new Expression(null, \"MYLANG\");\r\n    attribute = new Attribute(null, expression, null, null);\r\n    attribute.setRoles(new HashSet<>());\r\n    attribute.inherit(parentAttribute);\r\n    assertEquals(\"value\", attribute.getValue());\r\n    assertEquals(\"expression\", attribute.getExpressionObject().getExpression());\r\n    assertEquals(\"language\", attribute.getExpressionObject().getLanguage());\r\n    assertEquals(\"role\", attribute.getRole());\r\n    assertEquals(\"renderer\", attribute.getRenderer());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\plugins\\tiles\\src\\test\\java\\org\\apache\\tiles\\api\\AttributeTest.java",
  "methodName" : "testClone",
  "sourceCode" : "/**\r\n * Tests {@link Attribute#clone()}.\r\n */\r\n@Test\r\npublic void testClone() {\r\n    Expression expression = new Expression(\"my.expression\", \"MYLANG\");\r\n    Attribute attribute = new Attribute(\"my.value\", expression, \"role1,role2\", \"myrenderer\");\r\n    attribute = attribute.copy();\r\n    assertEquals(\"my.value\", attribute.getValue());\r\n    assertEquals(\"myrenderer\", attribute.getRenderer());\r\n    Set<String> roles = new HashSet<>();\r\n    roles.add(\"role1\");\r\n    roles.add(\"role2\");\r\n    assertEquals(roles, attribute.getRoles());\r\n    assertEquals(\"my.expression\", attribute.getExpressionObject().getExpression());\r\n    assertEquals(\"MYLANG\", attribute.getExpressionObject().getLanguage());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\plugins\\tiles\\src\\test\\java\\org\\apache\\tiles\\api\\AttributeTest.java",
  "methodName" : "testCreateTemplateAttribute",
  "sourceCode" : "/**\r\n * Tests {@link Attribute#createTemplateAttribute(String, String, String, String)}.\r\n */\r\n@Test\r\npublic void testCreateTemplateAttribute() {\r\n    Attribute attribute = Attribute.createTemplateAttribute(\"myTemplate\", \"MYLANG:myExpression\", \"myType\", \"myRole\");\r\n    assertEquals(\"myTemplate\", attribute.getValue());\r\n    assertEquals(\"MYLANG\", attribute.getExpressionObject().getLanguage());\r\n    assertEquals(\"myExpression\", attribute.getExpressionObject().getExpression());\r\n    assertEquals(\"myType\", attribute.getRenderer());\r\n    Set<String> roles = attribute.getRoles();\r\n    assertEquals(1, roles.size());\r\n    assertTrue(roles.contains(\"myRole\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\plugins\\tiles\\src\\test\\java\\org\\apache\\tiles\\api\\AttributeTest.java",
  "methodName" : "testIsPermitted",
  "sourceCode" : "@Test\r\npublic void testIsPermitted() {\r\n    Attribute attribute = new Attribute(\"myvalue\");\r\n    Request requestContext = createMock(Request.class);\r\n    expect(requestContext.isUserInRole(\"first\")).andReturn(Boolean.TRUE).anyTimes();\r\n    expect(requestContext.isUserInRole(\"second\")).andReturn(Boolean.FALSE).anyTimes();\r\n    replay(requestContext);\r\n    assertTrue(attribute.isPermitted(requestContext));\r\n    Set<String> roles = new HashSet<>();\r\n    roles.add(\"first\");\r\n    attribute.setRoles(roles);\r\n    assertTrue(\"The role is not permitted\", attribute.isPermitted(requestContext));\r\n    roles.clear();\r\n    roles.add(\"second\");\r\n    assertFalse(\"The role is not permitted\", attribute.isPermitted(requestContext));\r\n    verify(requestContext);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\plugins\\tiles\\src\\test\\java\\org\\apache\\tiles\\api\\BasicAttributeContextTest.java",
  "methodName" : "testBasicAttributeContext",
  "sourceCode" : "/**\r\n * Tests {@link BasicAttributeContext#BasicAttributeContext()}.\r\n */\r\n@Test\r\npublic void testBasicAttributeContext() {\r\n    AttributeContext context = new BasicAttributeContext();\r\n    assertNull(\"There are some spurious attributes\", context.getLocalAttributeNames());\r\n    assertNull(\"There are some spurious attributes\", context.getCascadedAttributeNames());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\plugins\\tiles\\src\\test\\java\\org\\apache\\tiles\\api\\BasicAttributeContextTest.java",
  "methodName" : "testBasicAttributeContextMapOfStringAttribute",
  "sourceCode" : "/**\r\n * Tests {@link BasicAttributeContext#BasicAttributeContext(Map)}.\r\n */\r\n@Test\r\npublic void testBasicAttributeContextMapOfStringAttribute() {\r\n    Map<String, Attribute> name2attrib = new HashMap<>();\r\n    Attribute attribute = new Attribute(\"Value 1\");\r\n    name2attrib.put(\"name1\", attribute);\r\n    attribute = new Attribute(\"Value 2\");\r\n    name2attrib.put(\"name2\", attribute);\r\n    AttributeContext context = new BasicAttributeContext(name2attrib);\r\n    attribute = context.getAttribute(\"name1\");\r\n    assertNotNull(\"Attribute name1 not found\", attribute);\r\n    assertEquals(\"Attribute name1 has not been set correctly\", \"Value 1\", attribute.getValue());\r\n    attribute = context.getAttribute(\"name2\");\r\n    assertNotNull(\"Attribute name2 not found\", attribute);\r\n    assertEquals(\"Attribute name2 has not been set correctly\", \"Value 2\", attribute.getValue());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\plugins\\tiles\\src\\test\\java\\org\\apache\\tiles\\api\\BasicAttributeContextTest.java",
  "methodName" : "testBasicAttributeContextAttributeContext",
  "sourceCode" : "/**\r\n * Tests\r\n * {@link BasicAttributeContext#BasicAttributeContext(AttributeContext)}.\r\n */\r\n@Test\r\npublic void testBasicAttributeContextAttributeContext() {\r\n    Set<String> localAttributes = new LinkedHashSet<>();\r\n    Set<String> cascadedAttributes = new LinkedHashSet<>();\r\n    localAttributes.add(\"local1\");\r\n    localAttributes.add(\"local2\");\r\n    cascadedAttributes.add(\"cascaded1\");\r\n    cascadedAttributes.add(\"cascaded2\");\r\n    AttributeContext toCopy = createMock(AttributeContext.class);\r\n    expect(toCopy.getLocalAttributeNames()).andReturn(localAttributes);\r\n    expect(toCopy.getLocalAttribute(\"local1\")).andReturn(new Attribute(\"value1\")).anyTimes();\r\n    expect(toCopy.getLocalAttribute(\"local2\")).andReturn(new Attribute(\"value2\")).anyTimes();\r\n    expect(toCopy.getCascadedAttributeNames()).andReturn(cascadedAttributes);\r\n    expect(toCopy.getCascadedAttribute(\"cascaded1\")).andReturn(new Attribute(\"value3\")).anyTimes();\r\n    expect(toCopy.getCascadedAttribute(\"cascaded2\")).andReturn(new Attribute(\"value4\")).anyTimes();\r\n    Attribute templateAttribute = new Attribute(\"/template.jsp\", Expression.createExpression(\"expression\", null), \"role1,role2\", \"template\");\r\n    expect(toCopy.getTemplateAttribute()).andReturn(templateAttribute);\r\n    Set<String> roles = new HashSet<>();\r\n    roles.add(\"role1\");\r\n    roles.add(\"role2\");\r\n    expect(toCopy.getPreparer()).andReturn(\"my.preparer.Preparer\");\r\n    replay(toCopy);\r\n    BasicAttributeContext context = new BasicAttributeContext(toCopy);\r\n    assertEquals(\"The template has not been set correctly\", \"/template.jsp\", context.getTemplateAttribute().getValue());\r\n    assertEquals(\"The template expression has not been set correctly\", \"expression\", context.getTemplateAttribute().getExpressionObject().getExpression());\r\n    assertEquals(\"The roles are not the same\", roles, context.getTemplateAttribute().getRoles());\r\n    assertEquals(\"The preparer has not been set correctly\", \"my.preparer.Preparer\", context.getPreparer());\r\n    Attribute attribute = context.getLocalAttribute(\"local1\");\r\n    assertNotNull(\"Attribute local1 not found\", attribute);\r\n    assertEquals(\"Attribute local1 has not been set correctly\", \"value1\", attribute.getValue());\r\n    attribute = context.getLocalAttribute(\"local2\");\r\n    assertNotNull(\"Attribute local2 not found\", attribute);\r\n    assertEquals(\"Attribute local2 has not been set correctly\", \"value2\", attribute.getValue());\r\n    attribute = context.getCascadedAttribute(\"cascaded1\");\r\n    assertNotNull(\"Attribute cascaded1 not found\", attribute);\r\n    assertEquals(\"Attribute cascaded1 has not been set correctly\", \"value3\", attribute.getValue());\r\n    attribute = context.getCascadedAttribute(\"cascaded2\");\r\n    assertNotNull(\"Attribute cascaded2 not found\", attribute);\r\n    assertEquals(\"Attribute cascaded2 has not been set correctly\", \"value4\", attribute.getValue());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\plugins\\tiles\\src\\test\\java\\org\\apache\\tiles\\api\\BasicAttributeContextTest.java",
  "methodName" : "testBasicAttributeContextBasicAttributeContext",
  "sourceCode" : "/**\r\n * Tests\r\n * {@link BasicAttributeContext#BasicAttributeContext(BasicAttributeContext)}\r\n * .\r\n */\r\n@Test\r\npublic void testBasicAttributeContextBasicAttributeContext() {\r\n    BasicAttributeContext toCopy = new BasicAttributeContext();\r\n    toCopy.putAttribute(\"name1\", new Attribute(\"value1\"), false);\r\n    toCopy.putAttribute(\"name2\", new Attribute(\"value2\"), true);\r\n    Attribute templateAttribute = Attribute.createTemplateAttribute(\"/template.jsp\");\r\n    Set<String> roles = new HashSet<>();\r\n    roles.add(\"role1\");\r\n    roles.add(\"role2\");\r\n    templateAttribute.setRoles(roles);\r\n    toCopy.setTemplateAttribute(templateAttribute);\r\n    toCopy.setPreparer(\"my.preparer.Preparer\");\r\n    AttributeContext context = new BasicAttributeContext(toCopy);\r\n    assertEquals(\"The template has not been set correctly\", \"/template.jsp\", context.getTemplateAttribute().getValue());\r\n    assertEquals(\"The roles are not the same\", roles, context.getTemplateAttribute().getRoles());\r\n    assertEquals(\"The preparer has not been set correctly\", \"my.preparer.Preparer\", context.getPreparer());\r\n    Attribute attribute = context.getLocalAttribute(\"name1\");\r\n    assertNotNull(\"Attribute name1 not found\", attribute);\r\n    assertEquals(\"Attribute name1 has not been set correctly\", \"value1\", attribute.getValue());\r\n    attribute = context.getCascadedAttribute(\"name2\");\r\n    assertNotNull(\"Attribute name2 not found\", attribute);\r\n    assertEquals(\"Attribute name2 has not been set correctly\", \"value2\", attribute.getValue());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\plugins\\tiles\\src\\test\\java\\org\\apache\\tiles\\api\\BasicAttributeContextTest.java",
  "methodName" : "testInheritCascadedAttributes",
  "sourceCode" : "/**\r\n * Tests\r\n * {@link BasicAttributeContext#inheritCascadedAttributes(AttributeContext)}\r\n * .\r\n */\r\n@Test\r\npublic void testInheritCascadedAttributes() {\r\n    AttributeContext toCopy = new BasicAttributeContext();\r\n    toCopy.putAttribute(\"name1\", new Attribute(\"value1\"), false);\r\n    toCopy.putAttribute(\"name2\", new Attribute(\"value2\"), true);\r\n    AttributeContext context = new BasicAttributeContext();\r\n    context.inheritCascadedAttributes(toCopy);\r\n    Attribute attribute = context.getLocalAttribute(\"name1\");\r\n    assertNull(\"Attribute name1 found\", attribute);\r\n    attribute = context.getCascadedAttribute(\"name2\");\r\n    assertNotNull(\"Attribute name2 not found\", attribute);\r\n    assertEquals(\"Attribute name2 has not been set correctly\", \"value2\", attribute.getValue());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\plugins\\tiles\\src\\test\\java\\org\\apache\\tiles\\api\\BasicAttributeContextTest.java",
  "methodName" : "testInheritListAttribute",
  "sourceCode" : "/**\r\n * Tests {@link BasicAttributeContext#inherit(BasicAttributeContext)}\r\n * testing inheritance between {@link ListAttribute} instances.\r\n */\r\n@Test\r\npublic void testInheritListAttribute() {\r\n    AttributeContext toCopy = new BasicAttributeContext();\r\n    ListAttribute parentListAttribute = new ListAttribute();\r\n    Attribute first = new Attribute(\"first\");\r\n    Attribute second = new Attribute(\"second\");\r\n    parentListAttribute.add(first);\r\n    toCopy.putAttribute(\"list\", parentListAttribute);\r\n    AttributeContext context = new BasicAttributeContext();\r\n    ListAttribute listAttribute = new ListAttribute();\r\n    listAttribute.setInherit(true);\r\n    listAttribute.add(second);\r\n    context.putAttribute(\"list\", listAttribute);\r\n    context.inherit(toCopy);\r\n    ListAttribute result = (ListAttribute) context.getAttribute(\"list\");\r\n    assertNotNull(\"The attribute must exist\", result);\r\n    List<Attribute> value = result.getValue();\r\n    assertNotNull(\"The list must exist\", value);\r\n    assertEquals(\"The size is not correct\", 2, value.size());\r\n    assertEquals(\"The first element is not correct\", first, value.get(0));\r\n    assertEquals(\"The second element is not correct\", second, value.get(1));\r\n    context = new BasicAttributeContext();\r\n    listAttribute = new ListAttribute();\r\n    listAttribute.add(second);\r\n    context.putAttribute(\"list\", listAttribute);\r\n    context.inherit(toCopy);\r\n    result = (ListAttribute) context.getAttribute(\"list\");\r\n    assertNotNull(\"The attribute must exist\", result);\r\n    value = result.getValue();\r\n    assertNotNull(\"The list must exist\", value);\r\n    assertEquals(\"The size is not correct\", 1, value.size());\r\n    assertEquals(\"The second element is not correct\", second, value.get(0));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\plugins\\tiles\\src\\test\\java\\org\\apache\\tiles\\api\\BasicAttributeContextTest.java",
  "methodName" : "testInherit",
  "sourceCode" : "/**\r\n * Tests\r\n * {@link BasicAttributeContext#inheritCascadedAttributes(AttributeContext)}\r\n * .\r\n */\r\n@Test\r\npublic void testInherit() {\r\n    AttributeContext toCopy = new BasicAttributeContext();\r\n    Attribute parentTemplateAttribute = new Attribute();\r\n    parentTemplateAttribute.setValue(\"/parent/template.jsp\");\r\n    toCopy.setTemplateAttribute(parentTemplateAttribute);\r\n    toCopy.putAttribute(\"name1\", new Attribute(\"value1\"), true);\r\n    toCopy.putAttribute(\"name2\", new Attribute(\"value2\"), true);\r\n    toCopy.putAttribute(\"name3\", new Attribute(\"value3\"), false);\r\n    toCopy.putAttribute(\"name4\", new Attribute(\"value4\"), false);\r\n    AttributeContext context = new BasicAttributeContext();\r\n    Attribute templateAttribute = new Attribute();\r\n    templateAttribute.setRole(\"role1,role2\");\r\n    context.setTemplateAttribute(templateAttribute);\r\n    context.putAttribute(\"name1\", new Attribute(\"newValue1\"), true);\r\n    context.putAttribute(\"name3\", new Attribute(\"newValue3\"), false);\r\n    context.inherit(toCopy);\r\n    Attribute attribute = context.getTemplateAttribute();\r\n    assertEquals(\"/parent/template.jsp\", attribute.getValue());\r\n    assertTrue(attribute.getRoles().contains(\"role1\"));\r\n    assertTrue(attribute.getRoles().contains(\"role2\"));\r\n    attribute = context.getCascadedAttribute(\"name1\");\r\n    assertNotNull(\"Attribute name1 not found\", attribute);\r\n    assertEquals(\"Attribute name1 has not been set correctly\", \"newValue1\", attribute.getValue());\r\n    attribute = context.getCascadedAttribute(\"name2\");\r\n    assertNotNull(\"Attribute name2 not found\", attribute);\r\n    assertEquals(\"Attribute name2 has not been set correctly\", \"value2\", attribute.getValue());\r\n    attribute = context.getLocalAttribute(\"name3\");\r\n    assertNotNull(\"Attribute name3 not found\", attribute);\r\n    assertEquals(\"Attribute name3 has not been set correctly\", \"newValue3\", attribute.getValue());\r\n    attribute = context.getLocalAttribute(\"name4\");\r\n    assertNotNull(\"Attribute name4 not found\", attribute);\r\n    assertEquals(\"Attribute name4 has not been set correctly\", \"value4\", attribute.getValue());\r\n    toCopy = new BasicAttributeContext();\r\n    toCopy.putAttribute(\"name1\", new Attribute(\"value1\"), true);\r\n    toCopy.putAttribute(\"name2\", new Attribute(\"value2\"), true);\r\n    toCopy.putAttribute(\"name3\", new Attribute(\"value3\"), false);\r\n    toCopy.putAttribute(\"name4\", new Attribute(\"value4\"), false);\r\n    context = new BasicAttributeContext();\r\n    context.inherit(toCopy);\r\n    attribute = context.getCascadedAttribute(\"name1\");\r\n    assertNotNull(\"Attribute name1 not found\", attribute);\r\n    assertEquals(\"Attribute name1 has not been set correctly\", \"value1\", attribute.getValue());\r\n    attribute = context.getCascadedAttribute(\"name2\");\r\n    assertNotNull(\"Attribute name2 not found\", attribute);\r\n    assertEquals(\"Attribute name2 has not been set correctly\", \"value2\", attribute.getValue());\r\n    attribute = context.getLocalAttribute(\"name3\");\r\n    assertNotNull(\"Attribute name3 not found\", attribute);\r\n    assertEquals(\"Attribute name3 has not been set correctly\", \"value3\", attribute.getValue());\r\n    attribute = context.getLocalAttribute(\"name4\");\r\n    assertNotNull(\"Attribute name4 not found\", attribute);\r\n    assertEquals(\"Attribute name4 has not been set correctly\", \"value4\", attribute.getValue());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\plugins\\tiles\\src\\test\\java\\org\\apache\\tiles\\api\\BasicAttributeContextTest.java",
  "methodName" : "testInheritAttributeContext",
  "sourceCode" : "/**\r\n * Tests\r\n * {@link BasicAttributeContext#inherit(AttributeContext)}\r\n * .\r\n */\r\n@Test\r\npublic void testInheritAttributeContext() {\r\n    AttributeContext toCopy = createMock(AttributeContext.class);\r\n    Attribute templateAttribute = Attribute.createTemplateAttribute(\"/my/template.jsp\");\r\n    expect(toCopy.getTemplateAttribute()).andReturn(templateAttribute);\r\n    expect(toCopy.getPreparer()).andReturn(\"my.preparer\");\r\n    Set<String> cascadedNames = new HashSet<>();\r\n    cascadedNames.add(\"name1\");\r\n    cascadedNames.add(\"name2\");\r\n    expect(toCopy.getCascadedAttributeNames()).andReturn(cascadedNames);\r\n    expect(toCopy.getCascadedAttribute(\"name1\")).andReturn(new Attribute(\"value1\"));\r\n    expect(toCopy.getCascadedAttribute(\"name2\")).andReturn(new Attribute(\"value2\"));\r\n    Set<String> names = new HashSet<>();\r\n    names.add(\"name3\");\r\n    names.add(\"name4\");\r\n    expect(toCopy.getLocalAttributeNames()).andReturn(names);\r\n    expect(toCopy.getLocalAttribute(\"name3\")).andReturn(new Attribute(\"value3\"));\r\n    expect(toCopy.getLocalAttribute(\"name4\")).andReturn(new Attribute(\"value4\"));\r\n    replay(toCopy);\r\n    AttributeContext context = new BasicAttributeContext();\r\n    context.putAttribute(\"name1\", new Attribute(\"newValue1\"), true);\r\n    context.putAttribute(\"name3\", new Attribute(\"newValue3\"), false);\r\n    context.inherit(toCopy);\r\n    Attribute attribute = context.getCascadedAttribute(\"name1\");\r\n    assertEquals(\"/my/template.jsp\", context.getTemplateAttribute().getValue());\r\n    assertEquals(\"my.preparer\", context.getPreparer());\r\n    assertNotNull(\"Attribute name1 not found\", attribute);\r\n    assertEquals(\"Attribute name1 has not been set correctly\", \"newValue1\", attribute.getValue());\r\n    attribute = context.getCascadedAttribute(\"name2\");\r\n    assertNotNull(\"Attribute name2 not found\", attribute);\r\n    assertEquals(\"Attribute name2 has not been set correctly\", \"value2\", attribute.getValue());\r\n    attribute = context.getLocalAttribute(\"name3\");\r\n    assertNotNull(\"Attribute name3 not found\", attribute);\r\n    assertEquals(\"Attribute name3 has not been set correctly\", \"newValue3\", attribute.getValue());\r\n    attribute = context.getLocalAttribute(\"name4\");\r\n    assertNotNull(\"Attribute name4 not found\", attribute);\r\n    assertEquals(\"Attribute name4 has not been set correctly\", \"value4\", attribute.getValue());\r\n    verify(toCopy);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\plugins\\tiles\\src\\test\\java\\org\\apache\\tiles\\api\\BasicAttributeContextTest.java",
  "methodName" : "testInheritAttributeContextListAttribute",
  "sourceCode" : "/**\r\n * Tests {@link BasicAttributeContext#inherit(AttributeContext)}\r\n * testing inheritance between {@link ListAttribute} instances.\r\n */\r\n@Test\r\npublic void testInheritAttributeContextListAttribute() {\r\n    AttributeContext toCopy = createMock(AttributeContext.class);\r\n    Attribute templateAttribute = Attribute.createTemplateAttribute(\"/my/template.jsp\");\r\n    expect(toCopy.getTemplateAttribute()).andReturn(templateAttribute).times(2);\r\n    expect(toCopy.getPreparer()).andReturn(\"my.preparer\").times(2);\r\n    ListAttribute parentListAttribute = new ListAttribute();\r\n    Attribute first = new Attribute(\"first\");\r\n    Attribute second = new Attribute(\"second\");\r\n    Attribute third = new Attribute(\"third\");\r\n    Attribute fourth = new Attribute(\"fourth\");\r\n    parentListAttribute.add(first);\r\n    ListAttribute parentListAttribute2 = new ListAttribute();\r\n    parentListAttribute2.add(third);\r\n    Set<String> names = new HashSet<>();\r\n    names.add(\"list\");\r\n    Set<String> cascadedNames = new HashSet<>();\r\n    cascadedNames.add(\"list2\");\r\n    expect(toCopy.getCascadedAttributeNames()).andReturn(cascadedNames).times(2);\r\n    expect(toCopy.getCascadedAttribute(\"list2\")).andReturn(parentListAttribute2).times(2);\r\n    expect(toCopy.getLocalAttributeNames()).andReturn(names).times(2);\r\n    expect(toCopy.getLocalAttribute(\"list\")).andReturn(parentListAttribute).times(2);\r\n    replay(toCopy);\r\n    AttributeContext context = new BasicAttributeContext();\r\n    ListAttribute listAttribute = new ListAttribute();\r\n    listAttribute.setInherit(true);\r\n    listAttribute.add(second);\r\n    context.putAttribute(\"list\", listAttribute, false);\r\n    ListAttribute listAttribute2 = new ListAttribute();\r\n    listAttribute2.setInherit(true);\r\n    listAttribute2.add(fourth);\r\n    context.putAttribute(\"list2\", listAttribute2, true);\r\n    context.inherit(toCopy);\r\n    ListAttribute result = (ListAttribute) context.getAttribute(\"list\");\r\n    assertNotNull(\"The attribute must exist\", result);\r\n    List<Attribute> value = result.getValue();\r\n    assertNotNull(\"The list must exist\", value);\r\n    assertEquals(\"The size is not correct\", 2, value.size());\r\n    assertEquals(\"The first element is not correct\", first, value.get(0));\r\n    assertEquals(\"The second element is not correct\", second, value.get(1));\r\n    result = (ListAttribute) context.getAttribute(\"list2\");\r\n    assertNotNull(\"The attribute must exist\", result);\r\n    value = result.getValue();\r\n    assertNotNull(\"The list must exist\", value);\r\n    assertEquals(\"The size is not correct\", 2, value.size());\r\n    assertEquals(\"The first element is not correct\", third, value.get(0));\r\n    assertEquals(\"The second element is not correct\", fourth, value.get(1));\r\n    context = new BasicAttributeContext();\r\n    listAttribute = new ListAttribute();\r\n    listAttribute.add(second);\r\n    context.putAttribute(\"list\", listAttribute);\r\n    context.inherit(toCopy);\r\n    result = (ListAttribute) context.getAttribute(\"list\");\r\n    assertNotNull(\"The attribute must exist\", result);\r\n    value = result.getValue();\r\n    assertNotNull(\"The list must exist\", value);\r\n    assertEquals(\"The size is not correct\", 1, value.size());\r\n    assertEquals(\"The second element is not correct\", second, value.get(0));\r\n    verify(toCopy);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\plugins\\tiles\\src\\test\\java\\org\\apache\\tiles\\api\\BasicAttributeContextTest.java",
  "methodName" : "testAddAll",
  "sourceCode" : "/**\r\n * Tests {@link BasicAttributeContext#addAll(Map)}.\r\n */\r\n@Test\r\npublic void testAddAll() {\r\n    AttributeContext context = new BasicAttributeContext();\r\n    Map<String, Attribute> name2attrib = new HashMap<>();\r\n    Attribute attribute = new Attribute(\"Value 1\");\r\n    name2attrib.put(\"name1\", attribute);\r\n    attribute = new Attribute(\"Value 2\");\r\n    name2attrib.put(\"name2\", attribute);\r\n    context.addAll(name2attrib);\r\n    attribute = context.getAttribute(\"name1\");\r\n    assertNotNull(\"Attribute name1 not found\", attribute);\r\n    assertEquals(\"Attribute name1 has not been set correctly\", \"Value 1\", attribute.getValue());\r\n    attribute = context.getAttribute(\"name2\");\r\n    assertNotNull(\"Attribute name2 not found\", attribute);\r\n    assertEquals(\"Attribute name2 has not been set correctly\", \"Value 2\", attribute.getValue());\r\n    context.addAll(null);\r\n    attribute = context.getAttribute(\"name1\");\r\n    assertNotNull(\"Attribute name1 not found\", attribute);\r\n    assertEquals(\"Attribute name1 has not been set correctly\", \"Value 1\", attribute.getValue());\r\n    attribute = context.getAttribute(\"name2\");\r\n    assertNotNull(\"Attribute name2 not found\", attribute);\r\n    assertEquals(\"Attribute name2 has not been set correctly\", \"Value 2\", attribute.getValue());\r\n    name2attrib = new HashMap<>();\r\n    name2attrib.put(\"name3\", new Attribute(\"Value 3\"));\r\n    context.addAll(name2attrib);\r\n    attribute = context.getAttribute(\"name1\");\r\n    assertNotNull(\"Attribute name1 not found\", attribute);\r\n    assertEquals(\"Attribute name1 has not been set correctly\", \"Value 1\", attribute.getValue());\r\n    attribute = context.getAttribute(\"name2\");\r\n    assertNotNull(\"Attribute name2 not found\", attribute);\r\n    assertEquals(\"Attribute name2 has not been set correctly\", \"Value 2\", attribute.getValue());\r\n    attribute = context.getAttribute(\"name3\");\r\n    assertNotNull(\"Attribute name3 not found\", attribute);\r\n    assertEquals(\"Attribute name3 has not been set correctly\", \"Value 3\", attribute.getValue());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\plugins\\tiles\\src\\test\\java\\org\\apache\\tiles\\api\\BasicAttributeContextTest.java",
  "methodName" : "testGetAttribute",
  "sourceCode" : "/**\r\n * Tests {@link BasicAttributeContext#getAttribute(String)}.\r\n */\r\n@Test\r\npublic void testGetAttribute() {\r\n    AttributeContext context = new BasicAttributeContext();\r\n    context.putAttribute(\"name1\", new Attribute(\"value1\"), false);\r\n    context.putAttribute(\"name2\", new Attribute(\"value2\"), true);\r\n    context.putAttribute(\"name3\", new Attribute(\"value3a\"), true);\r\n    context.putAttribute(\"name3\", new Attribute(\"value3\"), false);\r\n    Attribute attribute = context.getAttribute(\"name1\");\r\n    assertNotNull(\"Attribute name1 not found\", attribute);\r\n    assertEquals(\"Attribute name1 has not been set correctly\", \"value1\", attribute.getValue());\r\n    attribute = context.getAttribute(\"name2\");\r\n    assertNotNull(\"Attribute name2 not found\", attribute);\r\n    assertEquals(\"Attribute name2 has not been set correctly\", \"value2\", attribute.getValue());\r\n    attribute = context.getAttribute(\"name3\");\r\n    assertNotNull(\"Attribute name3 not found\", attribute);\r\n    assertEquals(\"Attribute name3 has not been set correctly\", \"value3\", attribute.getValue());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\plugins\\tiles\\src\\test\\java\\org\\apache\\tiles\\api\\BasicAttributeContextTest.java",
  "methodName" : "testGetLocalAttribute",
  "sourceCode" : "/**\r\n * Tests {@link BasicAttributeContext#getLocalAttribute(String)}.\r\n */\r\n@Test\r\npublic void testGetLocalAttribute() {\r\n    AttributeContext context = new BasicAttributeContext();\r\n    context.putAttribute(\"name1\", new Attribute(\"value1\"), false);\r\n    context.putAttribute(\"name2\", new Attribute(\"value2\"), true);\r\n    context.putAttribute(\"name3\", new Attribute(\"value3a\"), true);\r\n    context.putAttribute(\"name3\", new Attribute(\"value3\"), false);\r\n    Attribute attribute = context.getLocalAttribute(\"name1\");\r\n    assertNotNull(\"Attribute name1 not found\", attribute);\r\n    assertEquals(\"Attribute name1 has not been set correctly\", \"value1\", attribute.getValue());\r\n    attribute = context.getLocalAttribute(\"name2\");\r\n    assertNull(\"Attribute name2 found\", attribute);\r\n    attribute = context.getLocalAttribute(\"name3\");\r\n    assertNotNull(\"Attribute name3 not found\", attribute);\r\n    assertEquals(\"Attribute name3 has not been set correctly\", \"value3\", attribute.getValue());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\plugins\\tiles\\src\\test\\java\\org\\apache\\tiles\\api\\BasicAttributeContextTest.java",
  "methodName" : "testGetCascadedAttribute",
  "sourceCode" : "/**\r\n * Tests {@link BasicAttributeContext#getCascadedAttribute(String)}.\r\n */\r\n@Test\r\npublic void testGetCascadedAttribute() {\r\n    AttributeContext context = new BasicAttributeContext();\r\n    context.putAttribute(\"name1\", new Attribute(\"value1\"), false);\r\n    context.putAttribute(\"name2\", new Attribute(\"value2\"), true);\r\n    context.putAttribute(\"name3\", new Attribute(\"value3a\"), true);\r\n    context.putAttribute(\"name3\", new Attribute(\"value3\"), false);\r\n    Attribute attribute = context.getCascadedAttribute(\"name1\");\r\n    assertNull(\"Attribute name1 found\", attribute);\r\n    attribute = context.getCascadedAttribute(\"name2\");\r\n    assertNotNull(\"Attribute name2 not found\", attribute);\r\n    assertEquals(\"Attribute name2 has not been set correctly\", \"value2\", attribute.getValue());\r\n    attribute = context.getCascadedAttribute(\"name3\");\r\n    assertNotNull(\"Attribute name3 not found\", attribute);\r\n    assertEquals(\"Attribute name3 has not been set correctly\", \"value3a\", attribute.getValue());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\plugins\\tiles\\src\\test\\java\\org\\apache\\tiles\\api\\BasicAttributeContextTest.java",
  "methodName" : "testGetLocalAttributeNames",
  "sourceCode" : "/**\r\n * Tests {@link BasicAttributeContext#getLocalAttributeNames()}.\r\n */\r\n@Test\r\npublic void testGetLocalAttributeNames() {\r\n    AttributeContext context = new BasicAttributeContext();\r\n    context.putAttribute(\"name1\", new Attribute(\"value1\"), false);\r\n    context.putAttribute(\"name2\", new Attribute(\"value2\"), true);\r\n    context.putAttribute(\"name3\", new Attribute(\"value3a\"), true);\r\n    context.putAttribute(\"name3\", new Attribute(\"value3\"), false);\r\n    Set<String> names = context.getLocalAttributeNames();\r\n    assertTrue(\"Attribute name1 is not present\", names.contains(\"name1\"));\r\n    assertFalse(\"Attribute name2 is present\", names.contains(\"name2\"));\r\n    assertTrue(\"Attribute name3 is not present\", names.contains(\"name3\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\plugins\\tiles\\src\\test\\java\\org\\apache\\tiles\\api\\BasicAttributeContextTest.java",
  "methodName" : "testGetCascadedAttributeNames",
  "sourceCode" : "/**\r\n * Tests {@link BasicAttributeContext#getCascadedAttributeNames()}.\r\n */\r\n@Test\r\npublic void testGetCascadedAttributeNames() {\r\n    AttributeContext context = new BasicAttributeContext();\r\n    context.putAttribute(\"name1\", new Attribute(\"value1\"), false);\r\n    context.putAttribute(\"name2\", new Attribute(\"value2\"), true);\r\n    context.putAttribute(\"name3\", new Attribute(\"value3a\"), true);\r\n    context.putAttribute(\"name3\", new Attribute(\"value3\"), false);\r\n    Set<String> names = context.getCascadedAttributeNames();\r\n    assertFalse(\"Attribute name1 is present\", names.contains(\"name1\"));\r\n    assertTrue(\"Attribute name2 is not present\", names.contains(\"name2\"));\r\n    assertTrue(\"Attribute name3 is not present\", names.contains(\"name3\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\plugins\\tiles\\src\\test\\java\\org\\apache\\tiles\\api\\BasicAttributeContextTest.java",
  "methodName" : "testPutAttributeStringAttribute",
  "sourceCode" : "/**\r\n * Tests {@link BasicAttributeContext#putAttribute(String, Attribute)}.\r\n */\r\n@Test\r\npublic void testPutAttributeStringAttribute() {\r\n    AttributeContext context = new BasicAttributeContext();\r\n    context.putAttribute(\"name1\", new Attribute(\"value1\"));\r\n    Attribute attribute = context.getLocalAttribute(\"name1\");\r\n    assertNotNull(\"Attribute name1 not found\", attribute);\r\n    assertEquals(\"Attribute name1 has not been set correctly\", \"value1\", attribute.getValue());\r\n    attribute = context.getCascadedAttribute(\"name1\");\r\n    assertNull(\"Attribute name1 found\", attribute);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\plugins\\tiles\\src\\test\\java\\org\\apache\\tiles\\api\\BasicAttributeContextTest.java",
  "methodName" : "testPutAttributeStringAttributeBoolean",
  "sourceCode" : "/**\r\n * Tests\r\n * {@link BasicAttributeContext#putAttribute(String, Attribute, boolean)}.\r\n */\r\n@Test\r\npublic void testPutAttributeStringAttributeBoolean() {\r\n    AttributeContext context = new BasicAttributeContext();\r\n    context.putAttribute(\"name1\", new Attribute(\"value1\"), false);\r\n    context.putAttribute(\"name2\", new Attribute(\"value2\"), true);\r\n    Attribute attribute = context.getLocalAttribute(\"name1\");\r\n    assertNotNull(\"Attribute name1 not found\", attribute);\r\n    assertEquals(\"Attribute name1 has not been set correctly\", \"value1\", attribute.getValue());\r\n    attribute = context.getCascadedAttribute(\"name1\");\r\n    assertNull(\"Attribute name1 found\", attribute);\r\n    attribute = context.getCascadedAttribute(\"name2\");\r\n    assertNotNull(\"Attribute name2 not found\", attribute);\r\n    assertEquals(\"Attribute name2 has not been set correctly\", \"value2\", attribute.getValue());\r\n    attribute = context.getLocalAttribute(\"name2\");\r\n    assertNull(\"Attribute name2 found\", attribute);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\plugins\\tiles\\src\\test\\java\\org\\apache\\tiles\\api\\BasicAttributeContextTest.java",
  "methodName" : "testClear",
  "sourceCode" : "/**\r\n * Tests {@link BasicAttributeContext#clear()}.\r\n */\r\n@Test\r\npublic void testClear() {\r\n    AttributeContext context = new BasicAttributeContext();\r\n    context.putAttribute(\"name1\", new Attribute(\"value1\"), false);\r\n    context.putAttribute(\"name2\", new Attribute(\"value2\"), true);\r\n    context.clear();\r\n    Set<String> names = context.getLocalAttributeNames();\r\n    assertTrue(\"There are local attributes\", names == null || names.isEmpty());\r\n    names = context.getCascadedAttributeNames();\r\n    assertTrue(\"There are cascaded attributes\", names == null || names.isEmpty());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\plugins\\tiles\\src\\test\\java\\org\\apache\\tiles\\api\\BasicAttributeContextTest.java",
  "methodName" : "testEquals",
  "sourceCode" : "/**\r\n * Tests {@link BasicAttributeContext#equals(Object)}.\r\n */\r\n@Test\r\npublic void testEquals() {\r\n    BasicAttributeContext attributeContext = new BasicAttributeContext();\r\n    attributeContext.setPreparer(\"my.preparer\");\r\n    attributeContext.setTemplateAttribute(Attribute.createTemplateAttribute(\"/my/template.jsp\"));\r\n    attributeContext.putAttribute(\"attribute1\", new Attribute(\"value1\"), true);\r\n    attributeContext.putAttribute(\"attribute2\", new Attribute(\"value2\"), true);\r\n    attributeContext.putAttribute(\"attribute3\", new Attribute(\"value3\"), false);\r\n    BasicAttributeContext toCompare = new BasicAttributeContext(attributeContext);\r\n    assertEquals(toCompare, attributeContext);\r\n    toCompare = new BasicAttributeContext(attributeContext);\r\n    toCompare.putAttribute(\"attribute4\", new Attribute(\"value4\"), true);\r\n    assertNotEquals(toCompare, attributeContext);\r\n    toCompare = new BasicAttributeContext(attributeContext);\r\n    toCompare.putAttribute(\"attribute4\", new Attribute(\"value4\"), false);\r\n    assertNotEquals(toCompare, attributeContext);\r\n    toCompare = new BasicAttributeContext(attributeContext);\r\n    toCompare.setPreparer(\"another.preparer\");\r\n    assertNotEquals(toCompare, attributeContext);\r\n    toCompare = new BasicAttributeContext(attributeContext);\r\n    toCompare.setTemplateAttribute(Attribute.createTemplateAttribute(\"/another/template.jsp\"));\r\n    assertNotEquals(toCompare, attributeContext);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\plugins\\tiles\\src\\test\\java\\org\\apache\\tiles\\api\\BasicAttributeContextTest.java",
  "methodName" : "testHashCode",
  "sourceCode" : "/**\r\n * Tests {@link BasicAttributeContext#hashCode()}.\r\n */\r\n@Test\r\npublic void testHashCode() {\r\n    BasicAttributeContext attributeContext = new BasicAttributeContext();\r\n    attributeContext.setPreparer(\"my.preparer\");\r\n    Attribute templateAttribute = Attribute.createTemplateAttribute(\"/my/template.jsp\");\r\n    attributeContext.setTemplateAttribute(templateAttribute);\r\n    Attribute attribute1 = new Attribute(\"value1\");\r\n    Attribute attribute2 = new Attribute(\"value2\");\r\n    Attribute attribute3 = new Attribute(\"value3\");\r\n    attributeContext.putAttribute(\"attribute1\", attribute1, true);\r\n    attributeContext.putAttribute(\"attribute2\", attribute2, true);\r\n    attributeContext.putAttribute(\"attribute3\", attribute3, false);\r\n    Map<String, Attribute> cascadedAttributes = new HashMap<>();\r\n    cascadedAttributes.put(\"attribute1\", attribute1);\r\n    cascadedAttributes.put(\"attribute2\", attribute2);\r\n    Map<String, Attribute> attributes = new HashMap<>();\r\n    attributes.put(\"attribute3\", attribute3);\r\n    assertEquals(templateAttribute.hashCode() + \"my.preparer\".hashCode() + attributes.hashCode() + cascadedAttributes.hashCode(), attributeContext.hashCode());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\plugins\\tiles\\src\\test\\java\\org\\apache\\tiles\\api\\ExpressionTest.java",
  "methodName" : "testHashCode",
  "sourceCode" : "@Test\r\npublic void testHashCode() {\r\n    Expression expression = new Expression(\"hello\", \"there\");\r\n    assertEquals(\"hello\".hashCode() + \"there\".hashCode(), expression.hashCode());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\plugins\\tiles\\src\\test\\java\\org\\apache\\tiles\\api\\ExpressionTest.java",
  "methodName" : "testExpressionStringString",
  "sourceCode" : "@Test\r\npublic void testExpressionStringString() {\r\n    Expression expression = new Expression(\"hello\", \"there\");\r\n    assertEquals(\"hello\", expression.getExpression());\r\n    assertEquals(\"there\", expression.getLanguage());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\plugins\\tiles\\src\\test\\java\\org\\apache\\tiles\\api\\ExpressionTest.java",
  "methodName" : "testExpressionString",
  "sourceCode" : "@Test\r\npublic void testExpressionString() {\r\n    Expression expression = new Expression(\"hello\");\r\n    assertEquals(\"hello\", expression.getExpression());\r\n    assertNull(expression.getLanguage());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\plugins\\tiles\\src\\test\\java\\org\\apache\\tiles\\api\\ExpressionTest.java",
  "methodName" : "testExpressionExpression",
  "sourceCode" : "@Test\r\npublic void testExpressionExpression() {\r\n    Expression expression = new Expression(\"hello\", \"there\");\r\n    Expression expression2 = new Expression(expression);\r\n    assertEquals(\"hello\", expression2.getExpression());\r\n    assertEquals(\"there\", expression2.getLanguage());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\plugins\\tiles\\src\\test\\java\\org\\apache\\tiles\\api\\ExpressionTest.java",
  "methodName" : "testCreateExpressionFromDescribedExpression",
  "sourceCode" : "@Test\r\npublic void testCreateExpressionFromDescribedExpression() {\r\n    Expression expression = Expression.createExpressionFromDescribedExpression(\"hello\");\r\n    assertEquals(\"hello\", expression.getExpression());\r\n    assertNull(expression.getLanguage());\r\n    expression = Expression.createExpressionFromDescribedExpression(\"there:hello\");\r\n    assertEquals(\"hello\", expression.getExpression());\r\n    assertEquals(\"there\", expression.getLanguage());\r\n    expression = Expression.createExpressionFromDescribedExpression(\"there_:hello\");\r\n    assertEquals(\"there_:hello\", expression.getExpression());\r\n    assertNull(expression.getLanguage());\r\n    assertNull(Expression.createExpressionFromDescribedExpression(null));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\plugins\\tiles\\src\\test\\java\\org\\apache\\tiles\\api\\ExpressionTest.java",
  "methodName" : "testCreateExpression",
  "sourceCode" : "@Test\r\npublic void testCreateExpression() {\r\n    Expression expression = Expression.createExpression(\"hello\", \"there\");\r\n    assertEquals(\"hello\", expression.getExpression());\r\n    assertEquals(\"there\", expression.getLanguage());\r\n    expression = Expression.createExpression(\"hello\", null);\r\n    assertEquals(\"hello\", expression.getExpression());\r\n    assertNull(expression.getLanguage());\r\n    expression = Expression.createExpression(null, \"there\");\r\n    assertNull(expression);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\plugins\\tiles\\src\\test\\java\\org\\apache\\tiles\\api\\ExpressionTest.java",
  "methodName" : "testEqualsObject",
  "sourceCode" : "@Test\r\npublic void testEqualsObject() {\r\n    Expression expression = new Expression(\"hello\", \"there\");\r\n    Expression expression2 = new Expression(\"hello\", \"there\");\r\n    assertEquals(expression, expression2);\r\n    expression2 = new Expression(\"hello\", \"there2\");\r\n    assertNotEquals(expression, expression2);\r\n    expression2 = new Expression(\"hello\");\r\n    assertNotEquals(expression, expression2);\r\n    expression = new Expression(\"hello\");\r\n    assertEquals(expression, expression2);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\plugins\\tiles\\src\\test\\java\\org\\apache\\tiles\\api\\ExpressionTest.java",
  "methodName" : "testToString",
  "sourceCode" : "@Test\r\npublic void testToString() {\r\n    Expression expression = new Expression(\"hello\", \"there\");\r\n    assertEquals(\"there:hello\", expression.toString());\r\n    expression = new Expression(\"hello\");\r\n    assertEquals(\"DEFAULT:hello\", expression.toString());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\plugins\\tiles\\src\\test\\java\\org\\apache\\tiles\\api\\ListAttributeTest.java",
  "methodName" : "testHashCode",
  "sourceCode" : "@Test\r\npublic void testHashCode() {\r\n    ListAttribute attribute = new ListAttribute();\r\n    List<Attribute> list = new ArrayList<>();\r\n    list.add(new Attribute(\"value1\"));\r\n    list.add(new Attribute(\"value2\"));\r\n    attribute.setValue(list);\r\n    attribute.setInherit(true);\r\n    assertEquals(list.hashCode() + Boolean.TRUE.hashCode(), attribute.hashCode());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\plugins\\tiles\\src\\test\\java\\org\\apache\\tiles\\api\\ListAttributeTest.java",
  "methodName" : "testEqualsObject",
  "sourceCode" : "@Test\r\npublic void testEqualsObject() {\r\n    ListAttribute attribute = new ListAttribute();\r\n    List<Attribute> list = new ArrayList<>();\r\n    list.add(new Attribute(\"value1\"));\r\n    list.add(new Attribute(\"value2\"));\r\n    attribute.setValue(list);\r\n    attribute.setInherit(true);\r\n    ListAttribute toCheck = new ListAttribute(attribute);\r\n    assertEquals(attribute, toCheck);\r\n    toCheck = new ListAttribute(attribute);\r\n    toCheck.setInherit(false);\r\n    assertNotEquals(attribute, toCheck);\r\n    toCheck = new ListAttribute(attribute);\r\n    toCheck.add(new Attribute(\"value3\"));\r\n    assertNotEquals(attribute, toCheck);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\plugins\\tiles\\src\\test\\java\\org\\apache\\tiles\\api\\ListAttributeTest.java",
  "methodName" : "testListAttributeListAttribute",
  "sourceCode" : "@Test\r\npublic void testListAttributeListAttribute() {\r\n    ListAttribute attribute = new ListAttribute();\r\n    List<Attribute> list = new ArrayList<>();\r\n    list.add(new Attribute(\"value1\"));\r\n    list.add(new Attribute(\"value2\"));\r\n    list.add(null);\r\n    attribute.setValue(list);\r\n    attribute.setInherit(true);\r\n    ListAttribute toCheck = new ListAttribute(attribute);\r\n    assertEquals(attribute, toCheck);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\plugins\\tiles\\src\\test\\java\\org\\apache\\tiles\\api\\ListAttributeTest.java",
  "methodName" : "testSetValue",
  "sourceCode" : "@Test\r\npublic void testSetValue() {\r\n    ListAttribute attribute = new ListAttribute();\r\n    List<Attribute> list = new ArrayList<>();\r\n    list.add(new Attribute(\"value1\"));\r\n    list.add(new Attribute(\"value2\"));\r\n    attribute.setValue(list);\r\n    assertEquals(list, attribute.getValue());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\plugins\\tiles\\src\\test\\java\\org\\apache\\tiles\\api\\ListAttributeTest.java",
  "methodName" : "testSetInherit",
  "sourceCode" : "@Test\r\npublic void testSetInherit() {\r\n    ListAttribute attribute = new ListAttribute();\r\n    attribute.setInherit(true);\r\n    assertTrue(attribute.isInherit());\r\n    attribute.setInherit(false);\r\n    assertFalse(attribute.isInherit());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\plugins\\tiles\\src\\test\\java\\org\\apache\\tiles\\api\\ListAttributeTest.java",
  "methodName" : "testClone",
  "sourceCode" : "@Test\r\npublic void testClone() {\r\n    ListAttribute attribute = new ListAttribute();\r\n    List<Attribute> list = new ArrayList<>();\r\n    list.add(new Attribute(\"value1\"));\r\n    list.add(new Attribute(\"value2\"));\r\n    attribute.setValue(list);\r\n    attribute.setInherit(true);\r\n    ListAttribute toCheck = attribute.copy();\r\n    assertEquals(attribute, toCheck);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\plugins\\tiles\\src\\test\\java\\org\\apache\\tiles\\api\\NoSuchContainerExceptionTest.java",
  "methodName" : "testNoSuchContainerExceptionString",
  "sourceCode" : "@Test\r\npublic void testNoSuchContainerExceptionString() {\r\n    NoSuchContainerException exception = new NoSuchContainerException(\"my message\");\r\n    assertEquals(\"my message\", exception.getMessage());\r\n    assertNull(exception.getCause());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\plugins\\tiles\\src\\test\\java\\org\\apache\\tiles\\api\\preparer\\PreparerExceptionTest.java",
  "methodName" : "testPreparerException",
  "sourceCode" : "/**\r\n * Test method for {@link PreparerException#PreparerException()}.\r\n */\r\n@Test\r\npublic void testPreparerException() {\r\n    PreparerException exception = new PreparerException();\r\n    assertNull(exception.getMessage());\r\n    assertNull(exception.getCause());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\plugins\\tiles\\src\\test\\java\\org\\apache\\tiles\\api\\preparer\\PreparerExceptionTest.java",
  "methodName" : "testPreparerExceptionString",
  "sourceCode" : "/**\r\n * Test method for {@link PreparerException#PreparerException(String)}.\r\n */\r\n@Test\r\npublic void testPreparerExceptionString() {\r\n    PreparerException exception = new PreparerException(\"my message\");\r\n    assertEquals(\"my message\", exception.getMessage());\r\n    assertNull(exception.getCause());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\plugins\\tiles\\src\\test\\java\\org\\apache\\tiles\\api\\preparer\\PreparerExceptionTest.java",
  "methodName" : "testPreparerExceptionThrowable",
  "sourceCode" : "/**\r\n * Test method for {@link PreparerException#PreparerException(Throwable)}.\r\n */\r\n@Test\r\npublic void testPreparerExceptionThrowable() {\r\n    Throwable cause = new Throwable();\r\n    PreparerException exception = new PreparerException(cause);\r\n    assertEquals(cause.toString(), exception.getMessage());\r\n    assertEquals(cause, exception.getCause());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\plugins\\tiles\\src\\test\\java\\org\\apache\\tiles\\api\\preparer\\PreparerExceptionTest.java",
  "methodName" : "testPreparerExceptionStringThrowable",
  "sourceCode" : "/**\r\n * Test method for {@link PreparerException#PreparerException(String, Throwable)}.\r\n */\r\n@Test\r\npublic void testPreparerExceptionStringThrowable() {\r\n    Throwable cause = new Throwable();\r\n    PreparerException exception = new PreparerException(\"my message\", cause);\r\n    assertEquals(\"my message\", exception.getMessage());\r\n    assertEquals(cause, exception.getCause());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\plugins\\tiles\\src\\test\\java\\org\\apache\\tiles\\api\\TestDefinition.java",
  "methodName" : "testDefinitionCopy",
  "sourceCode" : "/**\r\n * Tests {@link Definition#Definition(Definition)}.\r\n */\r\n@Test\r\npublic void testDefinitionCopy() {\r\n    Definition definition = new Definition();\r\n    definition.setName(\"myDefinition\");\r\n    definition.setExtends(\"myExtends\");\r\n    Attribute attribute1 = new Attribute(\"value1\");\r\n    definition.putAttribute(\"name1\", attribute1);\r\n    Attribute attribute2 = new Attribute(\"value2\");\r\n    definition.putAttribute(\"name2\", attribute2);\r\n    Definition toCheck = new Definition(definition);\r\n    assertEquals(\"myDefinition\", toCheck.getName());\r\n    assertEquals(\"myExtends\", toCheck.getExtends());\r\n    assertEquals(attribute1, toCheck.getAttribute(\"name1\"));\r\n    assertEquals(attribute2, toCheck.getAttribute(\"name2\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\plugins\\tiles\\src\\test\\java\\org\\apache\\tiles\\api\\TestDefinition.java",
  "methodName" : "testDefinitionComplete",
  "sourceCode" : "/**\r\n * Tests {@link Definition#Definition(Definition)}.\r\n */\r\n@Test\r\npublic void testDefinitionComplete() {\r\n    Map<String, Attribute> attributeMap = new HashMap<>();\r\n    Attribute attribute1 = new Attribute(\"value1\");\r\n    Attribute attribute2 = new Attribute(\"value2\");\r\n    attributeMap.put(\"name1\", attribute1);\r\n    attributeMap.put(\"name2\", attribute2);\r\n    Attribute templateAttribute = Attribute.createTemplateAttribute(\"/my/template.jsp\");\r\n    Definition definition = new Definition(\"myDefinition\", templateAttribute, attributeMap);\r\n    assertEquals(\"myDefinition\", definition.getName());\r\n    assertEquals(templateAttribute, definition.getTemplateAttribute());\r\n    assertEquals(attribute1, definition.getAttribute(\"name1\"));\r\n    assertEquals(attribute2, definition.getAttribute(\"name2\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\plugins\\tiles\\src\\test\\java\\org\\apache\\tiles\\api\\TestDefinition.java",
  "methodName" : "testPutAttribute",
  "sourceCode" : "/**\r\n * Verifies the put Attribute functionality. Attributes are added or replaced in the definition.\r\n */\r\n@Test\r\npublic void testPutAttribute() {\r\n    Definition def = new Definition();\r\n    def.setName(\"test1\");\r\n    def.setTemplateAttribute(Attribute.createTemplateAttribute(\"/page1.jsp\"));\r\n    Attribute attr1 = new Attribute(\"test.definition.name\", null, null, \"definition\");\r\n    def.putAttribute(\"attr1\", attr1);\r\n    attr1 = def.getAttribute(\"attr1\");\r\n    assertNotNull(\"Null attribute.\", attr1);\r\n    assertEquals(\"Wrong attribute type\", \"definition\", attr1.getRenderer());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\plugins\\tiles\\src\\test\\java\\org\\apache\\tiles\\api\\TestDefinition.java",
  "methodName" : "testInherit",
  "sourceCode" : "/**\r\n * Tests the {@link Definition#inherit(BasicAttributeContext)} method.\r\n */\r\n@Test\r\npublic void testInherit() {\r\n    Definition toCopy = new Definition();\r\n    toCopy.putAttribute(\"name1\", new Attribute(\"value1\"), true);\r\n    toCopy.putAttribute(\"name2\", new Attribute(\"value2\"), true);\r\n    toCopy.putAttribute(\"name3\", new Attribute(\"value3\"), false);\r\n    toCopy.putAttribute(\"name4\", new Attribute(\"value4\"), false);\r\n    Definition context = new Definition();\r\n    toCopy.putAttribute(\"name1\", new Attribute(\"newValue1\"), true);\r\n    toCopy.putAttribute(\"name3\", new Attribute(\"newValue3\"), false);\r\n    context.inherit(toCopy);\r\n    Attribute attribute = context.getCascadedAttribute(\"name1\");\r\n    assertNotNull(\"Attribute name1 not found\", attribute);\r\n    assertEquals(\"Attribute name1 has not been set correctly\", \"newValue1\", attribute.getValue());\r\n    attribute = context.getCascadedAttribute(\"name2\");\r\n    assertNotNull(\"Attribute name2 not found\", attribute);\r\n    assertEquals(\"Attribute name2 has not been set correctly\", \"value2\", attribute.getValue());\r\n    attribute = context.getLocalAttribute(\"name3\");\r\n    assertNotNull(\"Attribute name3 not found\", attribute);\r\n    assertEquals(\"Attribute name3 has not been set correctly\", \"newValue3\", attribute.getValue());\r\n    attribute = context.getLocalAttribute(\"name4\");\r\n    assertNotNull(\"Attribute name4 not found\", attribute);\r\n    assertEquals(\"Attribute name4 has not been set correctly\", \"value4\", attribute.getValue());\r\n    toCopy = new Definition();\r\n    toCopy.setPreparer(\"ExtendedPreparer\");\r\n    Attribute templateAttribute = new Attribute(\"extendedTemplate.jsp\", Expression.createExpression(\"expression\", \"language\"), \"extendedRole\", \"template\");\r\n    toCopy.setTemplateAttribute(templateAttribute);\r\n    context = new Definition();\r\n    context.inherit(toCopy);\r\n    assertEquals(\"Preparer not inherited\", \"ExtendedPreparer\", context.getPreparer());\r\n    assertNotNull(\"Roles not inherited\", context.getTemplateAttribute().getRoles());\r\n    assertEquals(\"Roles not inherited\", context.getTemplateAttribute().getRoles().size(), 1);\r\n    assertTrue(\"Roles not inherited\", context.getTemplateAttribute().getRoles().contains(\"extendedRole\"));\r\n    assertEquals(\"Template not inherited\", \"extendedTemplate.jsp\", context.getTemplateAttribute().getValue());\r\n    assertEquals(\"Template expression not inherited\", \"expression\", context.getTemplateAttribute().getExpressionObject().getExpression());\r\n    assertEquals(\"Template expression language not inherited\", \"language\", context.getTemplateAttribute().getExpressionObject().getLanguage());\r\n    context = new Definition();\r\n    context.setPreparer(\"LocalPreparer\");\r\n    templateAttribute = new Attribute(\"localTemplate.jsp\", Expression.createExpression(\"localExpression\", \"localLanguage\"), \"localRole\", \"template\");\r\n    context.setTemplateAttribute(templateAttribute);\r\n    assertEquals(\"Preparer inherited\", \"LocalPreparer\", context.getPreparer());\r\n    assertNotNull(\"Roles not correct\", context.getTemplateAttribute().getRoles());\r\n    assertEquals(\"Roles not correct\", context.getTemplateAttribute().getRoles().size(), 1);\r\n    assertTrue(\"Roles inherited\", context.getTemplateAttribute().getRoles().contains(\"localRole\"));\r\n    assertEquals(\"Template inherited\", \"localTemplate.jsp\", context.getTemplateAttribute().getValue());\r\n    assertEquals(\"Template expression inherited\", \"localExpression\", context.getTemplateAttribute().getExpressionObject().getExpression());\r\n    assertEquals(\"Template expression language not inherited\", \"localLanguage\", context.getTemplateAttribute().getExpressionObject().getLanguage());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\plugins\\tiles\\src\\test\\java\\org\\apache\\tiles\\api\\TestDefinition.java",
  "methodName" : "testToString",
  "sourceCode" : "/**\r\n * Tests {@link Definition#toString()}.\r\n */\r\n@Test\r\npublic void testToString() {\r\n    Definition definition = new Definition();\r\n    definition.setName(\"myDefinitionName\");\r\n    assertEquals(\"{name=myDefinitionName, template=<null>, role=<null>, preparerInstance=null, attributes=null}\", definition.toString());\r\n    definition.setTemplateAttribute(Attribute.createTemplateAttribute(\"myTemplate\"));\r\n    assertEquals(\"{name=myDefinitionName, template=myTemplate, role=null, preparerInstance=null, attributes=null}\", definition.toString());\r\n    definition.putAttribute(\"myAttributeName\", new Attribute(\"myAttributeValue\"));\r\n    assertEquals(\"{name=myDefinitionName, template=myTemplate, role=null, preparerInstance=null, \" + \"attributes={myAttributeName=myAttributeValue}}\", definition.toString());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\plugins\\tiles\\src\\test\\java\\org\\apache\\tiles\\api\\TestDefinition.java",
  "methodName" : "testEquals",
  "sourceCode" : "/**\r\n * Tests {@link Definition#equals(Object)}.\r\n */\r\n@Test\r\npublic void testEquals() {\r\n    Definition definition = new Definition();\r\n    definition.setName(\"myDefinition\");\r\n    definition.setExtends(\"myExtends\");\r\n    Attribute attribute1 = new Attribute(\"value1\");\r\n    definition.putAttribute(\"name1\", attribute1);\r\n    Attribute attribute2 = new Attribute(\"value2\");\r\n    definition.putAttribute(\"name2\", attribute2);\r\n    Definition toCheck = new Definition(definition);\r\n    assertEquals(definition, toCheck);\r\n    toCheck = new Definition(definition);\r\n    toCheck.setName(\"anotherDefinition\");\r\n    assertNotEquals(definition, toCheck);\r\n    toCheck = new Definition(definition);\r\n    toCheck.setExtends(\"anotherExtends\");\r\n    assertNotEquals(definition, toCheck);\r\n    toCheck = new Definition(definition);\r\n    toCheck.putAttribute(\"name1\", new Attribute(\"anotherAttribute\"));\r\n    assertNotEquals(definition, toCheck);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\plugins\\tiles\\src\\test\\java\\org\\apache\\tiles\\api\\TestDefinition.java",
  "methodName" : "testHashCode",
  "sourceCode" : "/**\r\n * Tests {@link Definition#hashCode()}.\r\n */\r\n@Test\r\npublic void testHashCode() {\r\n    Definition definition = new Definition();\r\n    definition.setName(\"myDefinition\");\r\n    definition.setExtends(\"myExtends\");\r\n    Attribute attribute1 = new Attribute(\"value1\");\r\n    definition.putAttribute(\"name1\", attribute1);\r\n    Attribute attribute2 = new Attribute(\"value2\");\r\n    definition.putAttribute(\"name2\", attribute2);\r\n    BasicAttributeContext attributeContext = new BasicAttributeContext();\r\n    attributeContext.putAttribute(\"name1\", attribute1);\r\n    attributeContext.putAttribute(\"name2\", attribute2);\r\n    assertEquals(\"myDefinition\".hashCode() + \"myExtends\".hashCode() + attributeContext.hashCode(), definition.hashCode());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\plugins\\tiles\\src\\test\\java\\org\\apache\\tiles\\api\\TestDefinition.java",
  "methodName" : "testIsExtending",
  "sourceCode" : "/**\r\n * Tests {@link Definition#isExtending()}.\r\n */\r\n@Test\r\npublic void testIsExtending() {\r\n    Definition definition = new Definition();\r\n    definition.setName(\"myDefinition\");\r\n    assertFalse(definition.isExtending());\r\n    definition.setExtends(\"myExtends\");\r\n    assertTrue(definition.isExtending());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\plugins\\tiles\\src\\test\\java\\org\\apache\\tiles\\api\\TilesContainerWrapperTest.java",
  "methodName" : "testTilesContainerWrapperNPE",
  "sourceCode" : "/**\r\n * Tests {@link TilesContainerWrapper#TilesContainerWrapper(TilesContainer)}.\r\n */\r\n@Test(expected = NullPointerException.class)\r\npublic void testTilesContainerWrapperNPE() {\r\n    new TilesContainerWrapper(null);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\plugins\\tiles\\src\\test\\java\\org\\apache\\tiles\\api\\TilesContainerWrapperTest.java",
  "methodName" : "testEndContext",
  "sourceCode" : "@Test\r\npublic void testEndContext() {\r\n    Request request = createMock(Request.class);\r\n    container.endContext(request);\r\n    replay(container, request);\r\n    wrapper.endContext(request);\r\n    verify(container, request);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\plugins\\tiles\\src\\test\\java\\org\\apache\\tiles\\api\\TilesContainerWrapperTest.java",
  "methodName" : "testEvaluate",
  "sourceCode" : "/**\r\n * Test method for {@link TilesContainerWrapper#evaluate(Attribute, Request)}.\r\n */\r\n@Test\r\npublic void testEvaluate() {\r\n    Request request = createMock(Request.class);\r\n    Attribute attribute = createMock(Attribute.class);\r\n    expect(container.evaluate(attribute, request)).andReturn(1);\r\n    replay(container, request, attribute);\r\n    assertEquals(new Integer(1), wrapper.evaluate(attribute, request));\r\n    verify(container, request, attribute);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\plugins\\tiles\\src\\test\\java\\org\\apache\\tiles\\api\\TilesContainerWrapperTest.java",
  "methodName" : "testGetApplicationContext",
  "sourceCode" : "@Test\r\npublic void testGetApplicationContext() {\r\n    ApplicationContext applicationContext = createMock(ApplicationContext.class);\r\n    expect(container.getApplicationContext()).andReturn(applicationContext);\r\n    replay(container, applicationContext);\r\n    assertSame(applicationContext, wrapper.getApplicationContext());\r\n    verify(container, applicationContext);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\plugins\\tiles\\src\\test\\java\\org\\apache\\tiles\\api\\TilesContainerWrapperTest.java",
  "methodName" : "testGetAttributeContext",
  "sourceCode" : "/**\r\n * Test method for {@link TilesContainerWrapper#getAttributeContext(Request)}.\r\n */\r\n@Test\r\npublic void testGetAttributeContext() {\r\n    Request request = createMock(Request.class);\r\n    AttributeContext attribute = createMock(AttributeContext.class);\r\n    expect(container.getAttributeContext(request)).andReturn(attribute);\r\n    replay(container, request, attribute);\r\n    assertSame(attribute, wrapper.getAttributeContext(request));\r\n    verify(container, request, attribute);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\plugins\\tiles\\src\\test\\java\\org\\apache\\tiles\\api\\TilesContainerWrapperTest.java",
  "methodName" : "testGetDefinition",
  "sourceCode" : "/**\r\n * Test method for {@link TilesContainerWrapper#getDefinition(String, Request)}.\r\n */\r\n@Test\r\npublic void testGetDefinition() {\r\n    Request request = createMock(Request.class);\r\n    Definition definition = createMock(Definition.class);\r\n    expect(container.getDefinition(\"definition\", request)).andReturn(definition);\r\n    replay(container, request, definition);\r\n    assertSame(definition, wrapper.getDefinition(\"definition\", request));\r\n    verify(container, request, definition);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\plugins\\tiles\\src\\test\\java\\org\\apache\\tiles\\api\\TilesContainerWrapperTest.java",
  "methodName" : "testIsValidDefinition",
  "sourceCode" : "/**\r\n * Test method for {@link TilesContainerWrapper#isValidDefinition(String, Request)}.\r\n */\r\n@Test\r\npublic void testIsValidDefinition() {\r\n    Request request = createMock(Request.class);\r\n    expect(container.isValidDefinition(\"definition\", request)).andReturn(true);\r\n    replay(container, request);\r\n    assertTrue(wrapper.isValidDefinition(\"definition\", request));\r\n    verify(container, request);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\plugins\\tiles\\src\\test\\java\\org\\apache\\tiles\\api\\TilesContainerWrapperTest.java",
  "methodName" : "testPrepare",
  "sourceCode" : "/**\r\n * Test method for {@link TilesContainerWrapper#prepare(String, Request)}.\r\n */\r\n@Test\r\npublic void testPrepare() {\r\n    Request request = createMock(Request.class);\r\n    container.prepare(\"preparer\", request);\r\n    replay(container, request);\r\n    wrapper.prepare(\"preparer\", request);\r\n    verify(container, request);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\plugins\\tiles\\src\\test\\java\\org\\apache\\tiles\\api\\TilesContainerWrapperTest.java",
  "methodName" : "testRenderStringRequest",
  "sourceCode" : "/**\r\n * Test method for {@link TilesContainerWrapper#render(String, Request)}.\r\n */\r\n@Test\r\npublic void testRenderStringRequest() {\r\n    Request request = createMock(Request.class);\r\n    container.render(\"definition\", request);\r\n    replay(container, request);\r\n    wrapper.render(\"definition\", request);\r\n    verify(container, request);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\plugins\\tiles\\src\\test\\java\\org\\apache\\tiles\\api\\TilesContainerWrapperTest.java",
  "methodName" : "testRenderDefinitionRequest",
  "sourceCode" : "/**\r\n * Test method for {@link TilesContainerWrapper#render(Definition, Request)}.\r\n */\r\n@Test\r\npublic void testRenderDefinitionRequest() {\r\n    Request request = createMock(Request.class);\r\n    Definition definition = createMock(Definition.class);\r\n    container.render(definition, request);\r\n    replay(container, request, definition);\r\n    wrapper.render(definition, request);\r\n    verify(container, request, definition);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\plugins\\tiles\\src\\test\\java\\org\\apache\\tiles\\api\\TilesContainerWrapperTest.java",
  "methodName" : "testRenderAttributeRequest",
  "sourceCode" : "/**\r\n * Test method for {@link TilesContainerWrapper#render(Attribute, Request)}.\r\n *\r\n * @throws IOException If something goes wrong.\r\n */\r\n@Test\r\npublic void testRenderAttributeRequest() throws IOException {\r\n    Request request = createMock(Request.class);\r\n    Attribute attribute = createMock(Attribute.class);\r\n    container.render(attribute, request);\r\n    replay(container, request, attribute);\r\n    wrapper.render(attribute, request);\r\n    verify(container, request, attribute);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\plugins\\tiles\\src\\test\\java\\org\\apache\\tiles\\api\\TilesContainerWrapperTest.java",
  "methodName" : "testRenderContext",
  "sourceCode" : "@Test\r\npublic void testRenderContext() {\r\n    Request request = createMock(Request.class);\r\n    container.renderContext(request);\r\n    replay(container, request);\r\n    wrapper.renderContext(request);\r\n    verify(container, request);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\plugins\\tiles\\src\\test\\java\\org\\apache\\tiles\\api\\TilesContainerWrapperTest.java",
  "methodName" : "testStartContext",
  "sourceCode" : "@Test\r\npublic void testStartContext() {\r\n    Request request = createMock(Request.class);\r\n    AttributeContext attribute = createMock(AttributeContext.class);\r\n    expect(container.startContext(request)).andReturn(attribute);\r\n    replay(container, request, attribute);\r\n    assertSame(attribute, wrapper.startContext(request));\r\n    verify(container, request, attribute);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\plugins\\tiles\\src\\test\\java\\org\\apache\\tiles\\api\\TilesExceptionTest.java",
  "methodName" : "testTilesException",
  "sourceCode" : "@Test\r\npublic void testTilesException() {\r\n    TilesException exception = new TilesException();\r\n    assertNull(exception.getMessage());\r\n    assertNull(exception.getCause());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\plugins\\tiles\\src\\test\\java\\org\\apache\\tiles\\api\\TilesExceptionTest.java",
  "methodName" : "testTilesExceptionString",
  "sourceCode" : "@Test\r\npublic void testTilesExceptionString() {\r\n    TilesException exception = new TilesException(\"my message\");\r\n    assertEquals(\"my message\", exception.getMessage());\r\n    assertNull(exception.getCause());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\plugins\\tiles\\src\\test\\java\\org\\apache\\tiles\\api\\TilesExceptionTest.java",
  "methodName" : "testTilesExceptionThrowable",
  "sourceCode" : "@Test\r\npublic void testTilesExceptionThrowable() {\r\n    Throwable cause = new Throwable();\r\n    TilesException exception = new TilesException(cause);\r\n    assertEquals(cause.toString(), exception.getMessage());\r\n    assertEquals(cause, exception.getCause());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\plugins\\tiles\\src\\test\\java\\org\\apache\\tiles\\api\\TilesExceptionTest.java",
  "methodName" : "testTilesExceptionStringThrowable",
  "sourceCode" : "@Test\r\npublic void testTilesExceptionStringThrowable() {\r\n    Throwable cause = new Throwable();\r\n    TilesException exception = new TilesException(\"my message\", cause);\r\n    assertEquals(\"my message\", exception.getMessage());\r\n    assertEquals(cause, exception.getCause());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\plugins\\tiles\\src\\test\\java\\org\\apache\\tiles\\autotag\\freemarker\\FMModelGeneratorTest.java",
  "methodName" : "testGenerate",
  "sourceCode" : "/**\r\n * Test method for TagClassGenerator#generate(File, String, TemplateSuite,\r\n * TemplateClass, java.util.Map).\r\n *\r\n * @throws Exception If something goes wrong.\r\n */\r\n@Test\r\npublic void testGenerate() throws Exception {\r\n    Properties props = new Properties();\r\n    InputStream propsStream = getClass().getResourceAsStream(\"/org/apache/tiles/autotag/velocity.properties\");\r\n    props.load(propsStream);\r\n    propsStream.close();\r\n    VelocityEngine velocityEngine = new VelocityEngine(props);\r\n    FMModelGenerator generator = new FMModelGenerator(velocityEngine);\r\n    File file = File.createTempFile(\"autotag\", null);\r\n    file.delete();\r\n    file.mkdir();\r\n    file.deleteOnExit();\r\n    TemplateSuite suite = new TemplateSuite(\"tldtest\", \"Test for TLD docs.\");\r\n    List<TemplateParameter> params = new ArrayList<TemplateParameter>();\r\n    TemplateParameter param = new TemplateParameter(\"one\", \"one\", \"java.lang.String\", null, true, false);\r\n    param.setDocumentation(\"Parameter one.\");\r\n    params.add(param);\r\n    param = new TemplateParameter(\"two\", \"two\", \"int\", null, false, false);\r\n    param.setDocumentation(\"Parameter two.\");\r\n    params.add(param);\r\n    param = new TemplateParameter(\"three\", \"three\", \"boolean\", null, false, false);\r\n    param.setDocumentation(\"Parameter three.\");\r\n    params.add(param);\r\n    param = new TemplateParameter(\"request\", \"request\", REQUEST_CLASS, null, false, true);\r\n    param.setDocumentation(\"The request.\");\r\n    params.add(param);\r\n    param = new TemplateParameter(\"modelBody\", \"modelBody\", ModelBody.class.getName(), null, false, false);\r\n    param.setDocumentation(\"The body.\");\r\n    params.add(param);\r\n    TemplateMethod executeMethod = new TemplateMethod(\"execute\", params);\r\n    TemplateClass clazz = new TemplateClass(\"org.apache.tiles.autotag.template.DoStuffTemplate\", \"doStuff\", \"DoStuff\", executeMethod);\r\n    clazz.setDocumentation(\"Documentation of the DoStuff class.\");\r\n    generator.generate(file, \"org.apache.tiles.autotag.freemarker.test\", suite, clazz, null, \"org.apache.tiles.autotag.freemarker.test.Runtime\", REQUEST_CLASS);\r\n    InputStream expected = getClass().getResourceAsStream(\"/org/apache/tiles/autotag/freemarker/test/DoStuffFMModel.javat\");\r\n    File effectiveFile = new File(file, \"/org/apache/tiles/autotag/freemarker/test/DoStuffFMModel.java\");\r\n    assertTrue(effectiveFile.exists());\r\n    InputStream effective = new FileInputStream(effectiveFile);\r\n    assertTrue(IOUtils.contentEquals(effective, expected));\r\n    effective.close();\r\n    expected.close();\r\n    suite.addTemplateClass(clazz);\r\n    params = new ArrayList<TemplateParameter>();\r\n    param = new TemplateParameter(\"one\", \"one\", \"java.lang.Double\", null, true, false);\r\n    param.setDocumentation(\"Parameter one.\");\r\n    params.add(param);\r\n    param = new TemplateParameter(\"two\", \"two\", \"float\", null, false, false);\r\n    param.setDocumentation(\"Parameter two.\");\r\n    params.add(param);\r\n    param = new TemplateParameter(\"three\", \"three\", \"java.util.Date\", null, false, false);\r\n    param.setDocumentation(\"Parameter three.\");\r\n    params.add(param);\r\n    param = new TemplateParameter(\"request\", \"request\", REQUEST_CLASS, null, false, true);\r\n    param.setDocumentation(\"The request.\");\r\n    params.add(param);\r\n    executeMethod = new TemplateMethod(\"execute\", params);\r\n    clazz = new TemplateClass(\"org.apache.tiles.autotag.template.DoStuffNoBodyTemplate\", \"doStuffNoBody\", \"DoStuffNoBody\", executeMethod);\r\n    clazz.setDocumentation(\"Documentation of the DoStuffNoBody class.\");\r\n    suite.addTemplateClass(clazz);\r\n    generator.generate(file, \"org.apache.tiles.autotag.freemarker.test\", suite, clazz, null, \"org.apache.tiles.autotag.freemarker.test.Runtime\", REQUEST_CLASS);\r\n    expected = getClass().getResourceAsStream(\"/org/apache/tiles/autotag/freemarker/test/DoStuffNoBodyFMModel.javat\");\r\n    effectiveFile = new File(file, \"/org/apache/tiles/autotag/freemarker/test/DoStuffNoBodyFMModel.java\");\r\n    assertTrue(effectiveFile.exists());\r\n    effective = new FileInputStream(effectiveFile);\r\n    assertTrue(IOUtils.contentEquals(effective, expected));\r\n    effective.close();\r\n    expected.close();\r\n    FileUtils.deleteDirectory(file);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\plugins\\tiles\\src\\test\\java\\org\\apache\\tiles\\autotag\\freemarker\\FMModelRepositoryGeneratorTest.java",
  "methodName" : "testGenerate",
  "sourceCode" : "/**\r\n * Test method for\r\n * {@link FMModelRepositoryGenerator#generate(File, String, TemplateSuite, java.util.Map)}.\r\n *\r\n * @throws Exception If something goes wrong.\r\n */\r\n@Test\r\npublic void testGenerate() throws Exception {\r\n    Properties props = new Properties();\r\n    InputStream propsStream = getClass().getResourceAsStream(\"/org/apache/tiles/autotag/velocity.properties\");\r\n    props.load(propsStream);\r\n    propsStream.close();\r\n    VelocityEngine velocityEngine = new VelocityEngine(props);\r\n    FMModelRepositoryGenerator generator = new FMModelRepositoryGenerator(velocityEngine);\r\n    File file = File.createTempFile(\"autotag\", null);\r\n    file.delete();\r\n    file.mkdir();\r\n    file.deleteOnExit();\r\n    TemplateSuite suite = new TemplateSuite(\"tldtest\", \"Test for TLD docs.\");\r\n    List<TemplateParameter> params = new ArrayList<TemplateParameter>();\r\n    TemplateParameter param = new TemplateParameter(\"one\", \"one\", \"java.lang.String\", null, true, false);\r\n    param.setDocumentation(\"Parameter one.\");\r\n    params.add(param);\r\n    param = new TemplateParameter(\"two\", \"two\", \"int\", null, false, false);\r\n    param.setDocumentation(\"Parameter two.\");\r\n    params.add(param);\r\n    param = new TemplateParameter(\"three\", \"three\", \"long\", null, false, false);\r\n    param.setDocumentation(\"Parameter three.\");\r\n    params.add(param);\r\n    param = new TemplateParameter(\"request\", \"request\", REQUEST_CLASS, null, false, true);\r\n    param.setDocumentation(\"The request.\");\r\n    params.add(param);\r\n    param = new TemplateParameter(\"modelBody\", \"modelBody\", ModelBody.class.getName(), null, false, false);\r\n    param.setDocumentation(\"The body.\");\r\n    params.add(param);\r\n    TemplateMethod executeMethod = new TemplateMethod(\"execute\", params);\r\n    TemplateClass clazz = new TemplateClass(\"org.apache.tiles.autotag.template.DoStuffTemplate\", \"doStuff\", \"DoStuff\", executeMethod);\r\n    clazz.setDocumentation(\"Documentation of the DoStuff class\");\r\n    suite.addTemplateClass(clazz);\r\n    params = new ArrayList<TemplateParameter>();\r\n    param = new TemplateParameter(\"one\", \"one\", \"java.lang.Double\", null, true, false);\r\n    param.setDocumentation(\"Parameter one.\");\r\n    params.add(param);\r\n    param = new TemplateParameter(\"two\", \"two\", \"float\", null, false, false);\r\n    param.setDocumentation(\"Parameter two.\");\r\n    params.add(param);\r\n    param = new TemplateParameter(\"three\", \"three\", \"java.util.Date\", null, false, false);\r\n    param.setDocumentation(\"Parameter three.\");\r\n    params.add(param);\r\n    param = new TemplateParameter(\"request\", \"request\", REQUEST_CLASS, null, false, true);\r\n    param.setDocumentation(\"The request.\");\r\n    params.add(param);\r\n    executeMethod = new TemplateMethod(\"execute\", params);\r\n    clazz = new TemplateClass(\"org.apache.tiles.autotag.template.DoStuffNoBodyTemplate\", \"doStuffNoBody\", \"DoStuffNoBody\", executeMethod);\r\n    clazz.setDocumentation(\"Documentation of the DoStuffNoBody class\");\r\n    suite.addTemplateClass(clazz);\r\n    generator.generate(file, \"org.apache.tiles.autotag.freemarker.test\", suite, null);\r\n    InputStream expected = getClass().getResourceAsStream(\"/org/apache/tiles/autotag/freemarker/test/TldtestFMModelRepository.javat\");\r\n    File effectiveFile = new File(file, \"/org/apache/tiles/autotag/freemarker/test/TldtestFMModelRepository.java\");\r\n    assertTrue(effectiveFile.exists());\r\n    InputStream effective = new FileInputStream(effectiveFile);\r\n    assertTrue(IOUtils.contentEquals(effective, expected));\r\n    effective.close();\r\n    expected.close();\r\n    FileUtils.deleteDirectory(file);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\plugins\\tiles\\src\\test\\java\\org\\apache\\tiles\\autotag\\freemarker\\FMTemplateGeneratorFactoryTest.java",
  "methodName" : "testCreateTemplateGenerator",
  "sourceCode" : "/**\r\n * Test method forFMTemplateGeneratorFactory#createTemplateGenerator().\r\n */\r\n@Test\r\npublic void testCreateTemplateGenerator() {\r\n    File classesOutputDirectory = createMock(File.class);\r\n    VelocityEngine velocityEngine = createMock(VelocityEngine.class);\r\n    TemplateGeneratorBuilder builder = createMock(TemplateGeneratorBuilder.class);\r\n    TemplateGenerator generator = createMock(TemplateGenerator.class);\r\n    expect(builder.setClassesOutputDirectory(classesOutputDirectory)).andReturn(builder);\r\n    expect(builder.addClassesTemplateSuiteGenerator(isA(FMModelRepositoryGenerator.class))).andReturn(builder);\r\n    expect(builder.addClassesTemplateClassGenerator(isA(FMModelGenerator.class))).andReturn(builder);\r\n    expect(builder.build()).andReturn(generator);\r\n    replay(classesOutputDirectory, velocityEngine, builder, generator);\r\n    FMTemplateGeneratorFactory factory = new FMTemplateGeneratorFactory(classesOutputDirectory, velocityEngine, builder);\r\n    assertSame(generator, factory.createTemplateGenerator());\r\n    verify(classesOutputDirectory, velocityEngine, builder, generator);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\plugins\\tiles\\src\\test\\java\\org\\apache\\tiles\\autotag\\jsp\\JspTemplateGeneratorFactoryTest.java",
  "methodName" : "testCreateTemplateGenerator",
  "sourceCode" : "/**\r\n * Test method JspTemplateGeneratorFactory#createTemplateGenerator().\r\n */\r\n@Test\r\npublic void testCreateTemplateGenerator() {\r\n    File classesOutputDirectory = createMock(File.class);\r\n    File resourcesOutputDirectory = createMock(File.class);\r\n    VelocityEngine velocityEngine = createMock(VelocityEngine.class);\r\n    TemplateGeneratorBuilder builder = createMock(TemplateGeneratorBuilder.class);\r\n    TemplateGenerator generator = createMock(TemplateGenerator.class);\r\n    expect(builder.setClassesOutputDirectory(classesOutputDirectory)).andReturn(builder);\r\n    expect(builder.setResourcesOutputDirectory(resourcesOutputDirectory)).andReturn(builder);\r\n    expect(builder.addResourcesTemplateSuiteGenerator(isA(TLDGenerator.class))).andReturn(builder);\r\n    expect(builder.addClassesTemplateClassGenerator(isA(TagClassGenerator.class))).andReturn(builder);\r\n    expect(builder.build()).andReturn(generator);\r\n    replay(classesOutputDirectory, resourcesOutputDirectory, velocityEngine, builder, generator);\r\n    JspTemplateGeneratorFactory factory = new JspTemplateGeneratorFactory(classesOutputDirectory, resourcesOutputDirectory, velocityEngine, builder);\r\n    assertSame(generator, factory.createTemplateGenerator());\r\n    verify(classesOutputDirectory, resourcesOutputDirectory, velocityEngine, builder, generator);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\plugins\\tiles\\src\\test\\java\\org\\apache\\tiles\\autotag\\jsp\\TagClassGeneratorTest.java",
  "methodName" : "testGenerate",
  "sourceCode" : "/**\r\n * Test method for TagClassGenerator#generate(File, String, TemplateSuite, TemplateClass, Map).\r\n * @throws Exception If something goes wrong.\r\n */\r\n@Test\r\npublic void testGenerate() throws Exception {\r\n    Properties props = new Properties();\r\n    InputStream propsStream = getClass().getResourceAsStream(\"/org/apache/tiles/autotag/velocity.properties\");\r\n    props.load(propsStream);\r\n    propsStream.close();\r\n    VelocityEngine velocityEngine = new VelocityEngine(props);\r\n    TagClassGenerator generator = new TagClassGenerator(velocityEngine);\r\n    File file = File.createTempFile(\"autotag\", null);\r\n    file.delete();\r\n    file.mkdir();\r\n    file.deleteOnExit();\r\n    TemplateSuite suite = new TemplateSuite(\"tldtest\", \"Test for TLD docs.\");\r\n    Map<String, String> parameters = new HashMap<String, String>();\r\n    parameters.put(\"taglibURI\", \"http://www.initrode.net/tags/test\");\r\n    List<TemplateParameter> params = new ArrayList<TemplateParameter>();\r\n    TemplateParameter param = new TemplateParameter(\"one\", \"one\", \"java.lang.String\", null, true, false);\r\n    param.setDocumentation(\"Parameter one.\");\r\n    params.add(param);\r\n    param = new TemplateParameter(\"two\", \"two\", \"int\", null, false, false);\r\n    param.setDocumentation(\"Parameter two.\");\r\n    params.add(param);\r\n    param = new TemplateParameter(\"three\", \"three\", \"boolean\", null, false, false);\r\n    param.setDocumentation(\"Parameter three.\");\r\n    params.add(param);\r\n    param = new TemplateParameter(\"request\", \"request\", REQUEST_CLASS, null, false, true);\r\n    param.setDocumentation(\"The request.\");\r\n    params.add(param);\r\n    param = new TemplateParameter(\"modelBody\", \"modelBody\", ModelBody.class.getName(), null, false, false);\r\n    param.setDocumentation(\"The body.\");\r\n    params.add(param);\r\n    TemplateMethod executeMethod = new TemplateMethod(\"execute\", params);\r\n    TemplateClass clazz = new TemplateClass(\"org.apache.tiles.autotag.template.DoStuffTemplate\", \"doStuff\", \"DoStuff\", executeMethod);\r\n    clazz.setDocumentation(\"Documentation of the DoStuff class.\");\r\n    generator.generate(file, \"org.apache.tiles.autotag.jsp.test\", suite, clazz, parameters, \"org.apache.tiles.autotag.jsp.test.Runtime\", REQUEST_CLASS);\r\n    InputStream expected = getClass().getResourceAsStream(\"/org/apache/tiles/autotag/jsp/test/DoStuffTag.java\");\r\n    File effectiveFile = new File(file, \"/org/apache/tiles/autotag/jsp/test/DoStuffTag.java\");\r\n    assertTrue(effectiveFile.exists());\r\n    InputStream effective = new FileInputStream(effectiveFile);\r\n    assertTrue(IOUtils.contentEquals(effective, expected));\r\n    effective.close();\r\n    expected.close();\r\n    suite.addTemplateClass(clazz);\r\n    params = new ArrayList<TemplateParameter>();\r\n    param = new TemplateParameter(\"one\", \"one\", \"java.lang.Double\", null, true, false);\r\n    param.setDocumentation(\"Parameter one.\");\r\n    params.add(param);\r\n    param = new TemplateParameter(\"two\", \"two\", \"float\", null, false, false);\r\n    param.setDocumentation(\"Parameter two.\");\r\n    params.add(param);\r\n    param = new TemplateParameter(\"three\", \"three\", \"java.util.Date\", null, false, false);\r\n    param.setDocumentation(\"Parameter three.\");\r\n    params.add(param);\r\n    param = new TemplateParameter(\"request\", \"request\", REQUEST_CLASS, null, false, true);\r\n    param.setDocumentation(\"The request.\");\r\n    params.add(param);\r\n    executeMethod = new TemplateMethod(\"execute\", params);\r\n    clazz = new TemplateClass(\"org.apache.tiles.autotag.template.DoStuffNoBodyTemplate\", \"doStuffNoBody\", \"DoStuffNoBody\", executeMethod);\r\n    clazz.setDocumentation(\"Documentation of the DoStuffNoBody class.\");\r\n    suite.addTemplateClass(clazz);\r\n    generator.generate(file, \"org.apache.tiles.autotag.jsp.test\", suite, clazz, parameters, \"org.apache.tiles.autotag.jsp.test.Runtime\", REQUEST_CLASS);\r\n    expected = getClass().getResourceAsStream(\"/org/apache/tiles/autotag/jsp/test/DoStuffNoBodyTag.java\");\r\n    effectiveFile = new File(file, \"/org/apache/tiles/autotag/jsp/test/DoStuffNoBodyTag.java\");\r\n    assertTrue(effectiveFile.exists());\r\n    effective = new FileInputStream(effectiveFile);\r\n    assertTrue(IOUtils.contentEquals(effective, expected));\r\n    effective.close();\r\n    expected.close();\r\n    FileUtils.deleteDirectory(file);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\plugins\\tiles\\src\\test\\java\\org\\apache\\tiles\\autotag\\jsp\\TLDGeneratorTest.java",
  "methodName" : "testGenerate",
  "sourceCode" : "/**\r\n * Test method for TLDGenerator#generate(File, String, TemplateSuite, Map).\r\n * @throws Exception If something goes wrong.\r\n */\r\n@Test\r\npublic void testGenerate() throws Exception {\r\n    Properties props = new Properties();\r\n    InputStream propsStream = getClass().getResourceAsStream(\"/org/apache/tiles/autotag/velocity.properties\");\r\n    props.load(propsStream);\r\n    propsStream.close();\r\n    VelocityEngine velocityEngine = new VelocityEngine(props);\r\n    TLDGenerator generator = new TLDGenerator(velocityEngine);\r\n    File file = File.createTempFile(\"autotag\", null);\r\n    file.delete();\r\n    file.mkdir();\r\n    file.deleteOnExit();\r\n    TemplateSuite suite = new TemplateSuite(\"tldtest\", \"Test for TLD docs.\");\r\n    Map<String, String> parameters = new HashMap<String, String>();\r\n    parameters.put(\"taglibURI\", \"http://www.initrode.net/tags/test\");\r\n    List<TemplateParameter> params = new ArrayList<TemplateParameter>();\r\n    TemplateParameter param = new TemplateParameter(\"one\", \"one\", \"java.lang.String\", null, true, false);\r\n    param.setDocumentation(\"Parameter one.\");\r\n    params.add(param);\r\n    param = new TemplateParameter(\"two\", \"two\", \"int\", null, false, false);\r\n    param.setDocumentation(\"Parameter two.\");\r\n    params.add(param);\r\n    param = new TemplateParameter(\"three\", \"three\", \"long\", null, false, false);\r\n    param.setDocumentation(\"Parameter three.\");\r\n    params.add(param);\r\n    param = new TemplateParameter(\"request\", \"request\", REQUEST_CLASS, null, false, true);\r\n    param.setDocumentation(\"The request.\");\r\n    params.add(param);\r\n    param = new TemplateParameter(\"modelBody\", \"modelBody\", ModelBody.class.getName(), null, false, false);\r\n    param.setDocumentation(\"The body.\");\r\n    params.add(param);\r\n    TemplateMethod executeMethod = new TemplateMethod(\"execute\", params);\r\n    TemplateClass clazz = new TemplateClass(\"org.apache.tiles.autotag.template.DoStuffTemplate\", \"doStuff\", \"DoStuff\", executeMethod);\r\n    clazz.setDocumentation(\"Documentation of the DoStuff class\");\r\n    suite.addTemplateClass(clazz);\r\n    params = new ArrayList<TemplateParameter>();\r\n    param = new TemplateParameter(\"one\", \"one\", \"java.lang.Double\", null, true, false);\r\n    param.setDocumentation(\"Parameter one.\");\r\n    params.add(param);\r\n    param = new TemplateParameter(\"two\", \"two\", \"float\", null, false, false);\r\n    param.setDocumentation(\"Parameter two.\");\r\n    params.add(param);\r\n    param = new TemplateParameter(\"three\", \"three\", \"java.util.Date\", null, false, false);\r\n    param.setDocumentation(\"Parameter three.\");\r\n    params.add(param);\r\n    param = new TemplateParameter(\"request\", \"request\", REQUEST_CLASS, null, false, true);\r\n    param.setDocumentation(\"The request.\");\r\n    params.add(param);\r\n    executeMethod = new TemplateMethod(\"execute\", params);\r\n    clazz = new TemplateClass(\"org.apache.tiles.autotag.template.DoStuffNoBodyTemplate\", \"doStuffNoBody\", \"DoStuffNoBody\", executeMethod);\r\n    clazz.setDocumentation(\"Documentation of the DoStuffNoBody class\");\r\n    suite.addTemplateClass(clazz);\r\n    generator.generate(file, \"org.apache.tiles.autotag.jsp.test\", suite, parameters);\r\n    InputStream expected = getClass().getResourceAsStream(\"/tldtest-jsp.tld\");\r\n    File effectiveFile = new File(file, \"META-INF/tld/tldtest-jsp.tld\");\r\n    assertTrue(effectiveFile.exists());\r\n    InputStream effective = new FileInputStream(effectiveFile);\r\n    assertTrue(IOUtils.contentEquals(effective, expected));\r\n    effective.close();\r\n    expected.close();\r\n    FileUtils.deleteDirectory(file);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\plugins\\tiles\\src\\test\\java\\org\\apache\\tiles\\autotag\\model\\TemplateClassTest.java",
  "methodName" : "testTemplateConstructor1",
  "sourceCode" : "/**\r\n * Test method for {@link TemplateClass#TemplateClass(String)}.\r\n */\r\n@Test\r\npublic void testTemplateConstructor1() {\r\n    TemplateClass templateClass = new TemplateClass(\"name\");\r\n    assertEquals(\"name\", templateClass.getName());\r\n    assertNull(templateClass.getTagName());\r\n    assertNull(templateClass.getTagClassPrefix());\r\n    assertNull(templateClass.getExecuteMethod());\r\n    Collection<TemplateParameter> params = templateClass.getParameters();\r\n    assertTrue(params.isEmpty());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\plugins\\tiles\\src\\test\\java\\org\\apache\\tiles\\autotag\\model\\TemplateClassTest.java",
  "methodName" : "testTemplateConstructor2",
  "sourceCode" : "/**\r\n * Test method for {@link TemplateClass#TemplateClass(String, String, String, TemplateMethod)}.\r\n */\r\n@Test\r\npublic void testTemplateConstructor2() {\r\n    TemplateMethod method = createMock(TemplateMethod.class);\r\n    replay(method);\r\n    TemplateClass templateClass = new TemplateClass(\"name\", \"tagName\", \"tagClassPrefix\", method);\r\n    assertEquals(\"name\", templateClass.getName());\r\n    assertEquals(\"tagName\", templateClass.getTagName());\r\n    assertEquals(\"tagClassPrefix\", templateClass.getTagClassPrefix());\r\n    assertEquals(method, templateClass.getExecuteMethod());\r\n    verify(method);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\plugins\\tiles\\src\\test\\java\\org\\apache\\tiles\\autotag\\model\\TemplateClassTest.java",
  "methodName" : "testGetSimpleName",
  "sourceCode" : "/**\r\n * Test method for {@link TemplateClass#getSimpleName()}.\r\n */\r\n@Test\r\npublic void testGetSimpleName() {\r\n    TemplateClass templateClass = new TemplateClass(\"name\");\r\n    assertEquals(\"name\", templateClass.getSimpleName());\r\n    templateClass = new TemplateClass(\"org.whatever.Hello\");\r\n    assertEquals(\"Hello\", templateClass.getSimpleName());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\plugins\\tiles\\src\\test\\java\\org\\apache\\tiles\\autotag\\model\\TemplateClassTest.java",
  "methodName" : "testSetDocumentation",
  "sourceCode" : "/**\r\n * Test method for {@link TemplateClass#setDocumentation(String)}.\r\n */\r\n@Test\r\npublic void testSetDocumentation() {\r\n    TemplateClass templateClass = new TemplateClass(\"name\");\r\n    templateClass.setDocumentation(\"docs\");\r\n    assertEquals(\"docs\", templateClass.getDocumentation());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\plugins\\tiles\\src\\test\\java\\org\\apache\\tiles\\autotag\\model\\TemplateClassTest.java",
  "methodName" : "testGetParameters",
  "sourceCode" : "/**\r\n * Test method for {@link TemplateClass#getParameters()}.\r\n */\r\n@Test\r\npublic void testGetParameters() {\r\n    TemplateParameter param1 = createMock(TemplateParameter.class);\r\n    TemplateParameter param2 = createMock(TemplateParameter.class);\r\n    TemplateParameter param3 = createMock(TemplateParameter.class);\r\n    TemplateParameter param4 = createMock(TemplateParameter.class);\r\n    TemplateMethod method = createMock(TemplateMethod.class);\r\n    List<TemplateParameter> params = new ArrayList<>();\r\n    expect(method.getParameters()).andReturn(params);\r\n    expect(param1.isRequest()).andReturn(true);\r\n    expect(param2.isRequest()).andReturn(false);\r\n    expect(param2.isBody()).andReturn(true);\r\n    expect(param3.isRequest()).andReturn(false);\r\n    expect(param3.isBody()).andReturn(false);\r\n    expect(param4.isRequest()).andReturn(false);\r\n    expect(param4.isBody()).andReturn(false);\r\n    expect(param3.getName()).andReturn(\"param1\");\r\n    expect(param4.getName()).andReturn(\"param2\");\r\n    replay(param1, param2, param3, param4, method);\r\n    params.add(param1);\r\n    params.add(param2);\r\n    params.add(param3);\r\n    params.add(param4);\r\n    TemplateClass templateClass = new TemplateClass(\"name\", \"tagName\", \"tagClassPrefix\", method);\r\n    Collection<TemplateParameter> returnedParams = templateClass.getParameters();\r\n    Iterator<TemplateParameter> paramIt = returnedParams.iterator();\r\n    assertSame(param3, paramIt.next());\r\n    assertSame(param4, paramIt.next());\r\n    assertFalse(paramIt.hasNext());\r\n    verify(param1, param2, param3, param4, method);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\plugins\\tiles\\src\\test\\java\\org\\apache\\tiles\\autotag\\model\\TemplateClassTest.java",
  "methodName" : "testHasBody",
  "sourceCode" : "/**\r\n * Test method for {@link TemplateClass#hasBody()}.\r\n */\r\n@Test\r\npublic void testHasBody() {\r\n    TemplateMethod method = createMock(TemplateMethod.class);\r\n    expect(method.hasBody()).andReturn(true);\r\n    replay(method);\r\n    TemplateClass templateClass = new TemplateClass(\"name\", \"tagName\", \"tagClassPrefix\", method);\r\n    assertTrue(templateClass.hasBody());\r\n    verify(method);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\plugins\\tiles\\src\\test\\java\\org\\apache\\tiles\\autotag\\model\\TemplateClassTest.java",
  "methodName" : "testToString",
  "sourceCode" : "/**\r\n * Test method for {@link TemplateClass#toString()}.\r\n */\r\n@Test\r\npublic void testToString() {\r\n    TemplateMethod method = new TemplateMethod(\"method\", new ArrayList<>());\r\n    TemplateClass templateClass = new TemplateClass(\"name\", \"tagName\", \"tagClassPrefix\", method);\r\n    assertEquals(\"TemplateClass [name=name, tagName=tagName, tagClassPrefix=tagClassPrefix, \" + \"documentation=null, executeMethod=TemplateMethod \" + \"[name=method, documentation=null, parameters={}]]\", templateClass.toString());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\plugins\\tiles\\src\\test\\java\\org\\apache\\tiles\\autotag\\model\\TemplateMethodTest.java",
  "methodName" : "testTemplateMethod",
  "sourceCode" : "/**\r\n * Tests {@link TemplateMethod#TemplateMethod(String, Iterable)}.\r\n */\r\n@Test\r\npublic void testTemplateMethod() {\r\n    TemplateParameter param1 = createMock(TemplateParameter.class);\r\n    TemplateParameter param2 = createMock(TemplateParameter.class);\r\n    expect(param1.getName()).andReturn(\"param1\");\r\n    expect(param2.getName()).andReturn(\"param2\");\r\n    replay(param1, param2);\r\n    List<TemplateParameter> parameters = new ArrayList<>();\r\n    parameters.add(param1);\r\n    parameters.add(param2);\r\n    TemplateMethod method = new TemplateMethod(\"method\", parameters);\r\n    assertEquals(\"method\", method.getName());\r\n    Iterator<TemplateParameter> params = method.getParameters().iterator();\r\n    assertSame(param1, params.next());\r\n    assertSame(param2, params.next());\r\n    assertFalse(params.hasNext());\r\n    assertSame(param1, method.getParameterByName(\"param1\"));\r\n    assertSame(param2, method.getParameterByName(\"param2\"));\r\n    verify(param1, param2);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\plugins\\tiles\\src\\test\\java\\org\\apache\\tiles\\autotag\\model\\TemplateMethodTest.java",
  "methodName" : "testSetDocumentation",
  "sourceCode" : "/**\r\n * Tests {@link TemplateMethod#setDocumentation(String)}.\r\n */\r\n@Test\r\npublic void testSetDocumentation() {\r\n    TemplateMethod method = new TemplateMethod(\"method\", new ArrayList<>());\r\n    method.setDocumentation(\"docs\");\r\n    assertEquals(\"docs\", method.getDocumentation());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\plugins\\tiles\\src\\test\\java\\org\\apache\\tiles\\autotag\\model\\TemplateMethodTest.java",
  "methodName" : "testHasBody",
  "sourceCode" : "/**\r\n * Tests {@link TemplateMethod#hasBody()}.\r\n */\r\n@Test\r\npublic void testHasBody() {\r\n    TemplateParameter param1 = createMock(TemplateParameter.class);\r\n    TemplateParameter param2 = createMock(TemplateParameter.class);\r\n    expect(param1.getName()).andReturn(\"param1\");\r\n    expect(param2.getName()).andReturn(\"param2\");\r\n    expect(param1.isBody()).andReturn(true);\r\n    replay(param1, param2);\r\n    List<TemplateParameter> parameters = new ArrayList<>();\r\n    parameters.add(param1);\r\n    parameters.add(param2);\r\n    TemplateMethod method = new TemplateMethod(\"method\", parameters);\r\n    assertTrue(method.hasBody());\r\n    verify(param1, param2);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\plugins\\tiles\\src\\test\\java\\org\\apache\\tiles\\autotag\\model\\TemplateMethodTest.java",
  "methodName" : "testHasBody2",
  "sourceCode" : "/**\r\n * Tests {@link TemplateMethod#hasBody()}.\r\n */\r\n@Test\r\npublic void testHasBody2() {\r\n    TemplateParameter param1 = createMock(TemplateParameter.class);\r\n    TemplateParameter param2 = createMock(TemplateParameter.class);\r\n    expect(param1.getName()).andReturn(\"param1\");\r\n    expect(param2.getName()).andReturn(\"param2\");\r\n    expect(param1.isBody()).andReturn(false);\r\n    expect(param2.isBody()).andReturn(false);\r\n    replay(param1, param2);\r\n    List<TemplateParameter> parameters = new ArrayList<>();\r\n    parameters.add(param1);\r\n    parameters.add(param2);\r\n    TemplateMethod method = new TemplateMethod(\"method\", parameters);\r\n    assertFalse(method.hasBody());\r\n    verify(param1, param2);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\plugins\\tiles\\src\\test\\java\\org\\apache\\tiles\\autotag\\model\\TemplateMethodTest.java",
  "methodName" : "testToString",
  "sourceCode" : "/**\r\n * Tests {@link TemplateMethod#toString()}.\r\n */\r\n@Test\r\npublic void testToString() {\r\n    TemplateMethod method = new TemplateMethod(\"method\", new ArrayList<>());\r\n    assertEquals(\"TemplateMethod [name=method, documentation=null, parameters={}]\", method.toString());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\plugins\\tiles\\src\\test\\java\\org\\apache\\tiles\\autotag\\model\\TemplateParameterTest.java",
  "methodName" : "testTemplateParameter",
  "sourceCode" : "@Test\r\npublic void testTemplateParameter() {\r\n    TemplateParameter parameter = new TemplateParameter(\"name\", \"exportedName\", \"type\", \"defaultValue\", true, false);\r\n    assertEquals(\"name\", parameter.getName());\r\n    assertEquals(\"exportedName\", parameter.getExportedName());\r\n    assertEquals(\"type\", parameter.getType());\r\n    assertEquals(\"defaultValue\", parameter.getDefaultValue());\r\n    assertTrue(parameter.isRequired());\r\n    assertEquals(\"ExportedName\", parameter.getGetterSetterSuffix());\r\n    assertFalse(parameter.isBody());\r\n    assertFalse(parameter.isRequest());\r\n    parameter = new TemplateParameter(\"name\", \"exportedName\", \"my.Request\", \"defaultValue\", false, true);\r\n    assertEquals(\"name\", parameter.getName());\r\n    assertEquals(\"exportedName\", parameter.getExportedName());\r\n    assertEquals(\"my.Request\", parameter.getType());\r\n    assertEquals(\"defaultValue\", parameter.getDefaultValue());\r\n    assertFalse(parameter.isRequired());\r\n    assertEquals(\"ExportedName\", parameter.getGetterSetterSuffix());\r\n    assertFalse(parameter.isBody());\r\n    assertTrue(parameter.isRequest());\r\n    parameter = new TemplateParameter(\"name\", \"exportedName\", ModelBody.class.getName(), \"defaultValue\", false, false);\r\n    assertEquals(\"name\", parameter.getName());\r\n    assertEquals(\"exportedName\", parameter.getExportedName());\r\n    assertEquals(ModelBody.class.getName(), parameter.getType());\r\n    assertEquals(\"defaultValue\", parameter.getDefaultValue());\r\n    assertFalse(parameter.isRequired());\r\n    assertEquals(\"ExportedName\", parameter.getGetterSetterSuffix());\r\n    assertTrue(parameter.isBody());\r\n    assertFalse(parameter.isRequest());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\plugins\\tiles\\src\\test\\java\\org\\apache\\tiles\\autotag\\model\\TemplateParameterTest.java",
  "methodName" : "testSetDocumentation",
  "sourceCode" : "/**\r\n * Tests {@link TemplateParameter#setDocumentation(String)}.\r\n */\r\n@Test\r\npublic void testSetDocumentation() {\r\n    TemplateParameter parameter = new TemplateParameter(\"name\", \"exportedName\", \"type\", \"defaultValue\", true, false);\r\n    parameter.setDocumentation(\"docs\");\r\n    assertEquals(\"docs\", parameter.getDocumentation());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\plugins\\tiles\\src\\test\\java\\org\\apache\\tiles\\autotag\\model\\TemplateParameterTest.java",
  "methodName" : "testToString",
  "sourceCode" : "/**\r\n * Tests {@link TemplateParameter#toString()}.\r\n */\r\n@Test\r\npublic void testToString() {\r\n    TemplateParameter parameter = new TemplateParameter(\"name\", \"exportedName\", \"type\", \"defaultValue\", true, false);\r\n    assertEquals(\"TemplateParameter [name=name, exportedName=exportedName, \" + \"documentation=null, type=type, defaultValue=defaultValue, required=true, request=false]\", parameter.toString());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\plugins\\tiles\\src\\test\\java\\org\\apache\\tiles\\autotag\\model\\TemplateSuiteTest.java",
  "methodName" : "testTemplateSuiteConstructor1",
  "sourceCode" : "/**\r\n * Test method for {@link TemplateSuite#TemplateSuite(String, String)}.\r\n */\r\n@Test\r\npublic void testTemplateSuiteConstructor1() {\r\n    TemplateSuite suite = new TemplateSuite(\"name\", \"docs\");\r\n    assertEquals(\"name\", suite.getName());\r\n    assertEquals(\"docs\", suite.getDocumentation());\r\n    assertTrue(suite.getTemplateClasses().isEmpty());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\plugins\\tiles\\src\\test\\java\\org\\apache\\tiles\\autotag\\model\\TemplateSuiteTest.java",
  "methodName" : "testTemplateSuiteConstructor2",
  "sourceCode" : "/**\r\n * Test method for {@link TemplateSuite#TemplateSuite(String, String, Iterable)}.\r\n */\r\n@Test\r\npublic void testTemplateSuiteConstructor2() {\r\n    TemplateClass class1 = createMock(TemplateClass.class);\r\n    TemplateClass class2 = createMock(TemplateClass.class);\r\n    expect(class1.getName()).andReturn(\"class1\");\r\n    expect(class2.getName()).andReturn(\"class2\");\r\n    replay(class1, class2);\r\n    List<TemplateClass> classes = new ArrayList<>();\r\n    classes.add(class1);\r\n    classes.add(class2);\r\n    TemplateSuite suite = new TemplateSuite(\"name\", \"docs\", classes);\r\n    assertEquals(\"name\", suite.getName());\r\n    assertEquals(\"docs\", suite.getDocumentation());\r\n    Iterator<TemplateClass> clazzes = suite.getTemplateClasses().iterator();\r\n    assertSame(class1, clazzes.next());\r\n    assertSame(class2, clazzes.next());\r\n    assertFalse(clazzes.hasNext());\r\n    assertSame(class1, suite.getTemplateClassByName(\"class1\"));\r\n    assertSame(class2, suite.getTemplateClassByName(\"class2\"));\r\n    verify(class1, class2);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\plugins\\tiles\\src\\test\\java\\org\\apache\\tiles\\autotag\\model\\TemplateSuiteTest.java",
  "methodName" : "testAddTemplateClass",
  "sourceCode" : "/**\r\n * Test method for {@link TemplateSuite#addTemplateClass(TemplateClass)}.\r\n */\r\n@Test\r\npublic void testAddTemplateClass() {\r\n    TemplateClass class1 = createMock(TemplateClass.class);\r\n    TemplateClass class2 = createMock(TemplateClass.class);\r\n    expect(class1.getName()).andReturn(\"class1\");\r\n    expect(class2.getName()).andReturn(\"class2\");\r\n    replay(class1, class2);\r\n    TemplateSuite suite = new TemplateSuite(\"name\", \"docs\");\r\n    assertEquals(\"name\", suite.getName());\r\n    assertEquals(\"docs\", suite.getDocumentation());\r\n    assertTrue(suite.getTemplateClasses().isEmpty());\r\n    suite.addTemplateClass(class1);\r\n    suite.addTemplateClass(class2);\r\n    Iterator<TemplateClass> clazzes = suite.getTemplateClasses().iterator();\r\n    assertSame(class1, clazzes.next());\r\n    assertSame(class2, clazzes.next());\r\n    assertFalse(clazzes.hasNext());\r\n    assertSame(class1, suite.getTemplateClassByName(\"class1\"));\r\n    assertSame(class2, suite.getTemplateClassByName(\"class2\"));\r\n    verify(class1, class2);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\plugins\\tiles\\src\\test\\java\\org\\apache\\tiles\\autotag\\model\\TemplateSuiteTest.java",
  "methodName" : "testToString",
  "sourceCode" : "/**\r\n * Test method for {@link TemplateSuite#toString()}.\r\n */\r\n@Test\r\npublic void testToString() {\r\n    TemplateSuite suite = new TemplateSuite(\"name\", \"docs\");\r\n    assertEquals(\"TemplateSuite [name=name, documentation=docs, templateClasses={}]\", suite.toString());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\plugins\\tiles\\src\\test\\java\\org\\apache\\tiles\\autotag\\runtime\\AbstractModelBodyTest.java",
  "methodName" : "testEvaluate",
  "sourceCode" : "/**\r\n * Test method for {@link AbstractModelBody#evaluate()}.\r\n *\r\n * @throws IOException If something goes wrong.\r\n */\r\n@Test\r\npublic void testEvaluate() throws IOException {\r\n    Writer writer = createMock(Writer.class);\r\n    AbstractModelBody modelBody = createMockBuilder(AbstractModelBody.class).withConstructor(writer).createMock();\r\n    modelBody.evaluate(writer);\r\n    replay(writer, modelBody);\r\n    modelBody.evaluate();\r\n    verify(writer, modelBody);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\plugins\\tiles\\src\\test\\java\\org\\apache\\tiles\\autotag\\runtime\\AbstractModelBodyTest.java",
  "methodName" : "testEvaluateAsString",
  "sourceCode" : "/**\r\n * Test method for {@link AbstractModelBody#evaluateAsString()}.\r\n *\r\n * @throws IOException If something goes wrong.\r\n */\r\n@Test\r\npublic void testEvaluateAsString() throws IOException {\r\n    AbstractModelBody modelBody = new MockModelBody(null, \"return me\");\r\n    assertEquals(\"return me\", modelBody.evaluateAsString());\r\n    modelBody = new MockModelBody(null, \"\\n   \\n\");\r\n    assertNull(modelBody.evaluateAsString());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\plugins\\tiles\\src\\test\\java\\org\\apache\\tiles\\autotag\\runtime\\AbstractModelBodyTest.java",
  "methodName" : "testEvaluateAsStringException",
  "sourceCode" : "/**\r\n * Test method for {@link AbstractModelBody#evaluateAsString()}.\r\n *\r\n * @throws IOException If something goes wrong.\r\n */\r\n@Test(expected = IOException.class)\r\npublic void testEvaluateAsStringException() throws IOException {\r\n    Writer writer = createMock(Writer.class);\r\n    AbstractModelBody modelBody = createMockBuilder(AbstractModelBody.class).withConstructor(writer).createMock();\r\n    modelBody.evaluate(isA(StringWriter.class));\r\n    expectLastCall().andThrow(new IOException());\r\n    replay(writer, modelBody);\r\n    try {\r\n        modelBody.evaluateAsString();\r\n    } finally {\r\n        verify(writer, modelBody);\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\plugins\\tiles\\src\\test\\java\\org\\apache\\tiles\\autotag\\runtime\\AbstractModelBodyTest.java",
  "methodName" : "testEvaluateWithoutWriting",
  "sourceCode" : "/**\r\n * Test method for {@link AbstractModelBody#evaluateWithoutWriting()}.\r\n *\r\n * @throws IOException If something goes wrong.\r\n */\r\n@Test\r\npublic void testEvaluateWithoutWriting() throws IOException {\r\n    Writer writer = createMock(Writer.class);\r\n    AbstractModelBody modelBody = createMockBuilder(AbstractModelBody.class).withConstructor(writer).createMock();\r\n    modelBody.evaluate(isA(NullWriter.class));\r\n    replay(writer, modelBody);\r\n    modelBody.evaluateWithoutWriting();\r\n    verify(writer, modelBody);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\plugins\\tiles\\src\\test\\java\\org\\apache\\tiles\\autotag\\runtime\\AbstractModelBodyTest.java",
  "methodName" : "testEvaluateWithoutWritingException",
  "sourceCode" : "/**\r\n * Test method for {@link AbstractModelBody#evaluateWithoutWriting()}.\r\n *\r\n * @throws IOException If something goes wrong.\r\n */\r\n@Test(expected = IOException.class)\r\npublic void testEvaluateWithoutWritingException() throws IOException {\r\n    Writer writer = createMock(Writer.class);\r\n    AbstractModelBody modelBody = createMockBuilder(AbstractModelBody.class).withConstructor(writer).createMock();\r\n    modelBody.evaluate(isA(NullWriter.class));\r\n    expectLastCall().andThrow(new IOException());\r\n    replay(writer, modelBody);\r\n    try {\r\n        modelBody.evaluateWithoutWriting();\r\n    } finally {\r\n        verify(writer, modelBody);\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\plugins\\tiles\\src\\test\\java\\org\\apache\\tiles\\autotag\\runtime\\util\\NullWriterTest.java",
  "methodName" : "testWriteCharArrayIntInt",
  "sourceCode" : "/**\r\n * Test method for {@link NullWriter#write(char[], int, int)}.\r\n */\r\n@Test\r\npublic void testWriteCharArrayIntInt() {\r\n    writer.write(\"Hello there\".toCharArray(), 0, DUMMY_SIZE);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\plugins\\tiles\\src\\test\\java\\org\\apache\\tiles\\autotag\\runtime\\util\\NullWriterTest.java",
  "methodName" : "testFlush",
  "sourceCode" : "/**\r\n * Test method for {@link NullWriter#flush()}.\r\n */\r\n@Test\r\npublic void testFlush() {\r\n    writer.flush();\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\plugins\\tiles\\src\\test\\java\\org\\apache\\tiles\\autotag\\runtime\\util\\NullWriterTest.java",
  "methodName" : "testClose",
  "sourceCode" : "/**\r\n * Test method for {@link NullWriter#close()}.\r\n */\r\n@Test\r\npublic void testClose() {\r\n    writer.close();\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\plugins\\tiles\\src\\test\\java\\org\\apache\\tiles\\autotag\\velocity\\VelocityDirectiveGeneratorTest.java",
  "methodName" : "testGenerate",
  "sourceCode" : "/**\r\n * Test method for VelocityDirectiveGenerator#generate(File, String,\r\n * TemplateSuite, TemplateClass, java.util.Map).\r\n *\r\n * @throws Exception If something goes wrong.\r\n */\r\n@Test\r\npublic void testGenerate() throws Exception {\r\n    Properties props = new Properties();\r\n    InputStream propsStream = getClass().getResourceAsStream(\"/org/apache/tiles/autotag/velocity.properties\");\r\n    props.load(propsStream);\r\n    propsStream.close();\r\n    VelocityEngine velocityEngine = new VelocityEngine(props);\r\n    VelocityDirectiveGenerator generator = new VelocityDirectiveGenerator(velocityEngine);\r\n    File file = File.createTempFile(\"autotag\", null);\r\n    file.delete();\r\n    file.mkdir();\r\n    file.deleteOnExit();\r\n    TemplateSuite suite = new TemplateSuite(\"tldtest\", \"Test for TLD docs.\");\r\n    List<TemplateParameter> params = new ArrayList<TemplateParameter>();\r\n    TemplateParameter param = new TemplateParameter(\"one\", \"one\", \"java.lang.String\", null, true, false);\r\n    param.setDocumentation(\"Parameter one.\");\r\n    params.add(param);\r\n    param = new TemplateParameter(\"two\", \"two\", \"int\", null, false, false);\r\n    param.setDocumentation(\"Parameter two.\");\r\n    params.add(param);\r\n    param = new TemplateParameter(\"three\", \"three\", \"boolean\", null, false, false);\r\n    param.setDocumentation(\"Parameter three.\");\r\n    params.add(param);\r\n    param = new TemplateParameter(\"request\", \"request\", REQUEST_CLASS, null, false, true);\r\n    param.setDocumentation(\"The request.\");\r\n    params.add(param);\r\n    param = new TemplateParameter(\"modelBody\", \"modelBody\", ModelBody.class.getName(), null, false, false);\r\n    param.setDocumentation(\"The body.\");\r\n    params.add(param);\r\n    TemplateMethod executeMethod = new TemplateMethod(\"execute\", params);\r\n    TemplateClass clazz = new TemplateClass(\"org.apache.tiles.autotag.template.DoStuffTemplate\", \"doStuff\", \"DoStuff\", executeMethod);\r\n    clazz.setDocumentation(\"Documentation of the DoStuff class.\");\r\n    generator.generate(file, \"org.apache.tiles.autotag.velocity.test\", suite, clazz, null, \"org.apache.tiles.autotag.velocity.test.Runtime\", REQUEST_CLASS);\r\n    InputStream expected = getClass().getResourceAsStream(\"/org/apache/tiles/autotag/velocity/test/DoStuffDirective.javat\");\r\n    File effectiveFile = new File(file, \"/org/apache/tiles/autotag/velocity/test/DoStuffDirective.java\");\r\n    assertTrue(effectiveFile.exists());\r\n    InputStream effective = new FileInputStream(effectiveFile);\r\n    assertTrue(IOUtils.contentEquals(effective, expected));\r\n    effective.close();\r\n    expected.close();\r\n    suite.addTemplateClass(clazz);\r\n    params = new ArrayList<TemplateParameter>();\r\n    param = new TemplateParameter(\"one\", \"one\", \"java.lang.Double\", null, true, false);\r\n    param.setDocumentation(\"Parameter one.\");\r\n    params.add(param);\r\n    param = new TemplateParameter(\"two\", \"two\", \"float\", null, false, false);\r\n    param.setDocumentation(\"Parameter two.\");\r\n    params.add(param);\r\n    param = new TemplateParameter(\"three\", \"three\", \"java.util.Date\", null, false, false);\r\n    param.setDocumentation(\"Parameter three.\");\r\n    params.add(param);\r\n    param = new TemplateParameter(\"request\", \"request\", REQUEST_CLASS, null, false, true);\r\n    param.setDocumentation(\"The request.\");\r\n    params.add(param);\r\n    executeMethod = new TemplateMethod(\"execute\", params);\r\n    clazz = new TemplateClass(\"org.apache.tiles.autotag.template.DoStuffNoBodyTemplate\", \"doStuffNoBody\", \"DoStuffNoBody\", executeMethod);\r\n    clazz.setDocumentation(\"Documentation of the DoStuffNoBody class.\");\r\n    suite.addTemplateClass(clazz);\r\n    generator.generate(file, \"org.apache.tiles.autotag.velocity.test\", suite, clazz, null, \"org.apache.tiles.autotag.velocity.test.Runtime\", REQUEST_CLASS);\r\n    expected = getClass().getResourceAsStream(\"/org/apache/tiles/autotag/velocity/test/DoStuffNoBodyDirective.javat\");\r\n    effectiveFile = new File(file, \"/org/apache/tiles/autotag/velocity/test/DoStuffNoBodyDirective.java\");\r\n    assertTrue(effectiveFile.exists());\r\n    effective = new FileInputStream(effectiveFile);\r\n    assertTrue(IOUtils.contentEquals(effective, expected));\r\n    effective.close();\r\n    expected.close();\r\n    FileUtils.deleteDirectory(file);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\plugins\\tiles\\src\\test\\java\\org\\apache\\tiles\\autotag\\velocity\\VelocityPropertiesGeneratorTest.java",
  "methodName" : "testGenerate",
  "sourceCode" : "/**\r\n * Test method for org.apache.tiles.autotag.velocity.VelocityPropertiesGenerator\r\n * #generate(File, String, TemplateSuite, java.util.Map).\r\n *\r\n * @throws Exception If something goes wrong.\r\n */\r\n@Test\r\npublic void testGenerate() throws Exception {\r\n    Properties props = new Properties();\r\n    InputStream propsStream = getClass().getResourceAsStream(\"/org/apache/tiles/autotag/velocity.properties\");\r\n    props.load(propsStream);\r\n    propsStream.close();\r\n    VelocityEngine velocityEngine = new VelocityEngine(props);\r\n    VelocityPropertiesGenerator generator = new VelocityPropertiesGenerator(velocityEngine);\r\n    File file = File.createTempFile(\"autotag\", null);\r\n    file.delete();\r\n    file.mkdir();\r\n    file.deleteOnExit();\r\n    TemplateSuite suite = new TemplateSuite(\"tldtest\", \"Test for TLD docs.\");\r\n    List<TemplateParameter> params = new ArrayList<TemplateParameter>();\r\n    TemplateParameter param = new TemplateParameter(\"one\", \"one\", \"java.lang.String\", null, true, false);\r\n    param.setDocumentation(\"Parameter one.\");\r\n    params.add(param);\r\n    param = new TemplateParameter(\"two\", \"two\", \"int\", null, false, false);\r\n    param.setDocumentation(\"Parameter two.\");\r\n    params.add(param);\r\n    param = new TemplateParameter(\"three\", \"three\", \"long\", null, false, false);\r\n    param.setDocumentation(\"Parameter three.\");\r\n    params.add(param);\r\n    param = new TemplateParameter(\"request\", \"request\", REQUEST_CLASS, null, false, true);\r\n    param.setDocumentation(\"The request.\");\r\n    params.add(param);\r\n    param = new TemplateParameter(\"modelBody\", \"modelBody\", ModelBody.class.getName(), null, false, false);\r\n    param.setDocumentation(\"The body.\");\r\n    params.add(param);\r\n    TemplateMethod executeMethod = new TemplateMethod(\"execute\", params);\r\n    TemplateClass clazz = new TemplateClass(\"org.apache.tiles.autotag.template.DoStuffTemplate\", \"doStuff\", \"DoStuff\", executeMethod);\r\n    clazz.setDocumentation(\"Documentation of the DoStuff class\");\r\n    suite.addTemplateClass(clazz);\r\n    params = new ArrayList<TemplateParameter>();\r\n    param = new TemplateParameter(\"one\", \"one\", \"java.lang.Double\", null, true, false);\r\n    param.setDocumentation(\"Parameter one.\");\r\n    params.add(param);\r\n    param = new TemplateParameter(\"two\", \"two\", \"float\", null, false, false);\r\n    param.setDocumentation(\"Parameter two.\");\r\n    params.add(param);\r\n    param = new TemplateParameter(\"three\", \"three\", \"java.util.Date\", null, false, false);\r\n    param.setDocumentation(\"Parameter three.\");\r\n    params.add(param);\r\n    param = new TemplateParameter(\"request\", \"request\", REQUEST_CLASS, null, false, true);\r\n    param.setDocumentation(\"The request.\");\r\n    params.add(param);\r\n    executeMethod = new TemplateMethod(\"execute\", params);\r\n    clazz = new TemplateClass(\"org.apache.tiles.autotag.template.DoStuffNoBodyTemplate\", \"doStuffNoBody\", \"DoStuffNoBody\", executeMethod);\r\n    clazz.setDocumentation(\"Documentation of the DoStuffNoBody class\");\r\n    suite.addTemplateClass(clazz);\r\n    generator.generate(file, \"org.apache.tiles.autotag.velocity.test\", suite, null);\r\n    InputStream expected = getClass().getResourceAsStream(\"/velocity.properties.test\");\r\n    File effectiveFile = new File(file, \"META-INF/velocity.properties\");\r\n    assertTrue(effectiveFile.exists());\r\n    InputStream effective = new FileInputStream(effectiveFile);\r\n    assertTrue(IOUtils.contentEquals(effective, expected));\r\n    effective.close();\r\n    expected.close();\r\n    FileUtils.deleteDirectory(file);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\plugins\\tiles\\src\\test\\java\\org\\apache\\tiles\\autotag\\velocity\\VelocityTemplateGeneratorFactoryTest.java",
  "methodName" : "testCreateTemplateGenerator",
  "sourceCode" : "/**\r\n * Test method for VelocityTemplateGeneratorFactory#createTemplateGenerator().\r\n */\r\n@Test\r\npublic void testCreateTemplateGenerator() {\r\n    File classesOutputDirectory = createMock(File.class);\r\n    File resourcesOutputDirectory = createMock(File.class);\r\n    VelocityEngine velocityEngine = createMock(VelocityEngine.class);\r\n    TemplateGeneratorBuilder builder = createMock(TemplateGeneratorBuilder.class);\r\n    TemplateGenerator generator = createMock(TemplateGenerator.class);\r\n    expect(builder.setClassesOutputDirectory(classesOutputDirectory)).andReturn(builder);\r\n    expect(builder.setResourcesOutputDirectory(resourcesOutputDirectory)).andReturn(builder);\r\n    expect(builder.addResourcesTemplateSuiteGenerator(isA(VelocityPropertiesGenerator.class))).andReturn(builder);\r\n    expect(builder.addClassesTemplateClassGenerator(isA(VelocityDirectiveGenerator.class))).andReturn(builder);\r\n    expect(builder.build()).andReturn(generator);\r\n    replay(classesOutputDirectory, resourcesOutputDirectory, velocityEngine, builder, generator);\r\n    VelocityTemplateGeneratorFactory factory = new VelocityTemplateGeneratorFactory(classesOutputDirectory, resourcesOutputDirectory, velocityEngine, builder);\r\n    assertSame(generator, factory.createTemplateGenerator());\r\n    verify(classesOutputDirectory, resourcesOutputDirectory, velocityEngine, builder, generator);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\plugins\\tiles\\src\\test\\java\\org\\apache\\tiles\\core\\definition\\dao\\BaseLocaleUrlDefinitionDAOTest.java",
  "methodName" : "testRefreshRequired",
  "sourceCode" : "/**\r\n * Test method for {@link org.apache.tiles.core.definition.dao.BaseLocaleUrlDefinitionDAO#refreshRequired()}.\r\n *\r\n * @throws InterruptedException If something goes wrong.\r\n */\r\n@Test\r\npublic void testRefreshRequired() throws InterruptedException {\r\n    // Set up multiple data sources.\r\n    Map<String, Attribute> attribs = new HashMap<>();\r\n    attribs.put(\"testparm\", new Attribute(\"testval\"));\r\n    Definition rewriteTest = new Definition(\"rewrite.test\", Attribute.createTemplateAttribute(\"/test.jsp\"), attribs);\r\n    expect(dao.getDefinition(\"rewrite.test\", null)).andReturn(rewriteTest);\r\n    replay(dao);\r\n    List<ApplicationResource> sources = new ArrayList<>();\r\n    sources.add(resource);\r\n    dao.setSources(sources);\r\n    DefinitionsReader reader = new DigesterDefinitionsReader();\r\n    dao.setReader(reader);\r\n    Request context = createMock(Request.class);\r\n    expect(context.getContext(\"session\")).andReturn(new HashMap<>()).anyTimes();\r\n    expect(context.getRequestLocale()).andReturn(null).anyTimes();\r\n    replay(context);\r\n    Definition definition = dao.getDefinition(\"rewrite.test\", null);\r\n    assertNotNull(\"rewrite.test definition not found.\", definition);\r\n    assertEquals(\"Incorrect initial template value\", \"/test.jsp\", definition.getTemplateAttribute().getValue());\r\n    RefreshMonitor reloadable = dao;\r\n    dao.loadDefinitionsFromResource(resource);\r\n    assertFalse(\"Factory should be fresh.\", reloadable.refreshRequired());\r\n    // Make sure the system actually updates the timestamp.\r\n    Thread.sleep(SLEEP_MILLIS);\r\n    // Set up multiple data sources.\r\n    resource.modify(\"<?xml version=\\\"1.0\\\" encoding=\\\"ISO-8859-1\\\" ?>\\n\" + \"<!DOCTYPE tiles-definitions PUBLIC \" + \"\\\"-//Apache Software Foundation//DTD Tiles Configuration 3.0//EN\\\" \" + \"\\\"http://tiles.apache.org/dtds/tiles-config_3_0.dtd\\\">\\n\\n\" + \"<tiles-definitions>\" + \"<definition name=\\\"rewrite.test\\\" template=\\\"/newtest.jsp\\\">\" + \"<put-attribute name=\\\"testparm\\\" value=\\\"testval\\\"/>\" + //\r\n    \"</definition>\" + \"</tiles-definitions>\");\r\n    assertTrue(\"Factory should be stale.\", reloadable.refreshRequired());\r\n    verify(context, dao);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\plugins\\tiles\\src\\test\\java\\org\\apache\\tiles\\core\\definition\\dao\\ResolvingLocaleUrlDefinitionDAOTest.java",
  "methodName" : "testGetDefinition",
  "sourceCode" : "@Test\r\npublic void testGetDefinition() {\r\n    List<ApplicationResource> sourceURLs = new ArrayList<>();\r\n    sourceURLs.add(url1);\r\n    sourceURLs.add(url2);\r\n    sourceURLs.add(url3);\r\n    definitionDao.setSources(sourceURLs);\r\n    DefinitionsReader reader = new DigesterDefinitionsReader();\r\n    definitionDao.setReader(reader);\r\n    assertNotNull(\"test.def1 definition not found.\", definitionDao.getDefinition(\"test.def1\", null));\r\n    assertNotNull(\"test.def2 definition not found.\", definitionDao.getDefinition(\"test.def2\", null));\r\n    assertNotNull(\"test.def3 definition not found.\", definitionDao.getDefinition(\"test.def3\", null));\r\n    assertNotNull(\"test.common definition not found.\", definitionDao.getDefinition(\"test.common\", null));\r\n    assertNotNull(\"test.common definition in US locale not found.\", definitionDao.getDefinition(\"test.common\", Locale.US));\r\n    assertNotNull(\"test.common definition in FRENCH locale not found.\", definitionDao.getDefinition(\"test.common\", Locale.FRENCH));\r\n    assertNotNull(\"test.common definition in CHINA locale not found.\", definitionDao.getDefinition(\"test.common\", Locale.CHINA));\r\n    assertNotNull(\"test.common.french definition in FRENCH locale not found.\", definitionDao.getDefinition(\"test.common.french\", Locale.FRENCH));\r\n    assertNotNull(\"test.common.french definition in CANADA_FRENCH locale not found.\", definitionDao.getDefinition(\"test.common.french\", Locale.CANADA_FRENCH));\r\n    assertNotNull(\"test.def.toextend definition not found.\", definitionDao.getDefinition(\"test.def.toextend\", null));\r\n    assertNotNull(\"test.def.overridden definition not found.\", definitionDao.getDefinition(\"test.def.overridden\", null));\r\n    assertNotNull(\"test.def.overridden definition in FRENCH locale not found.\", definitionDao.getDefinition(\"test.def.overridden\", Locale.FRENCH));\r\n    assertEquals(\"Incorrect default country value\", \"default\", definitionDao.getDefinition(\"test.def1\", null).getAttribute(\"country\").getValue());\r\n    assertEquals(\"Incorrect US country value\", \"US\", definitionDao.getDefinition(\"test.def1\", Locale.US).getAttribute(\"country\").getValue());\r\n    assertEquals(\"Incorrect France country value\", \"France\", definitionDao.getDefinition(\"test.def1\", Locale.FRENCH).getAttribute(\"country\").getValue());\r\n    assertEquals(\"Incorrect Chinese country value (should be default)\", \"default\", definitionDao.getDefinition(\"test.def1\", Locale.CHINA).getAttribute(\"country\").getValue());\r\n    assertEquals(\"Incorrect default country value\", \"default\", definitionDao.getDefinition(\"test.def.overridden\", null).getAttribute(\"country\").getValue());\r\n    assertEquals(\"Incorrect default title value\", \"Definition to be overridden\", definitionDao.getDefinition(\"test.def.overridden\", null).getAttribute(\"title\").getValue());\r\n    assertEquals(\"Incorrect France country value\", \"France\", definitionDao.getDefinition(\"test.def.overridden\", Locale.FRENCH).getAttribute(\"country\").getValue());\r\n    assertEquals(\"Incorrect France title value\", \"Definition to be extended\", definitionDao.getDefinition(\"test.def.overridden\", Locale.FRENCH).getAttribute(\"title\").getValue());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\plugins\\tiles\\src\\test\\java\\org\\apache\\tiles\\core\\definition\\dao\\ResolvingLocaleUrlDefinitionDAOTest.java",
  "methodName" : "testGetDefinitions",
  "sourceCode" : "@Test\r\npublic void testGetDefinitions() {\r\n    List<ApplicationResource> sourceURLs = new ArrayList<>();\r\n    sourceURLs.add(url1);\r\n    sourceURLs.add(url2);\r\n    sourceURLs.add(url3);\r\n    definitionDao.setSources(sourceURLs);\r\n    DefinitionsReader reader = new DigesterDefinitionsReader();\r\n    definitionDao.setReader(reader);\r\n    Map<String, Definition> defaultDefinitions = definitionDao.getDefinitions(null);\r\n    Map<String, Definition> usDefinitions = definitionDao.getDefinitions(Locale.US);\r\n    Map<String, Definition> frenchDefinitions = definitionDao.getDefinitions(Locale.FRENCH);\r\n    Map<String, Definition> chinaDefinitions = definitionDao.getDefinitions(Locale.CHINA);\r\n    Map<String, Definition> canadaFrendDefinitions = definitionDao.getDefinitions(Locale.CANADA_FRENCH);\r\n    assertNotNull(\"test.def1 definition not found.\", defaultDefinitions.get(\"test.def1\"));\r\n    assertNotNull(\"test.def2 definition not found.\", defaultDefinitions.get(\"test.def2\"));\r\n    assertNotNull(\"test.def3 definition not found.\", defaultDefinitions.get(\"test.def3\"));\r\n    assertNotNull(\"test.common definition not found.\", defaultDefinitions.get(\"test.common\"));\r\n    assertNotNull(\"test.common definition in US locale not found.\", usDefinitions.get(\"test.common\"));\r\n    assertNotNull(\"test.common definition in FRENCH locale not found.\", frenchDefinitions.get(\"test.common\"));\r\n    assertNotNull(\"test.common definition in CHINA locale not found.\", chinaDefinitions.get(\"test.common\"));\r\n    assertNotNull(\"test.common.french definition in FRENCH locale not found.\", canadaFrendDefinitions.get(\"test.common.french\"));\r\n    assertNotNull(\"test.common.french definition in CANADA_FRENCH locale not found.\", canadaFrendDefinitions.get(\"test.common.french\"));\r\n    assertNotNull(\"test.def.toextend definition not found.\", defaultDefinitions.get(\"test.def.toextend\"));\r\n    assertNotNull(\"test.def.overridden definition not found.\", defaultDefinitions.get(\"test.def.overridden\"));\r\n    assertNotNull(\"test.def.overridden definition in FRENCH locale not found.\", frenchDefinitions.get(\"test.def.overridden\"));\r\n    assertEquals(\"Incorrect default country value\", \"default\", defaultDefinitions.get(\"test.def1\").getAttribute(\"country\").getValue());\r\n    assertEquals(\"Incorrect US country value\", \"US\", usDefinitions.get(\"test.def1\").getAttribute(\"country\").getValue());\r\n    assertEquals(\"Incorrect France country value\", \"France\", frenchDefinitions.get(\"test.def1\").getAttribute(\"country\").getValue());\r\n    assertEquals(\"Incorrect Chinese country value (should be default)\", \"default\", chinaDefinitions.get(\"test.def1\").getAttribute(\"country\").getValue());\r\n    assertEquals(\"Incorrect default country value\", \"default\", defaultDefinitions.get(\"test.def.overridden\").getAttribute(\"country\").getValue());\r\n    assertEquals(\"Incorrect default title value\", \"Definition to be overridden\", defaultDefinitions.get(\"test.def.overridden\").getAttribute(\"title\").getValue());\r\n    assertEquals(\"Incorrect France country value\", \"France\", frenchDefinitions.get(\"test.def.overridden\").getAttribute(\"country\").getValue());\r\n    assertEquals(\"Incorrect France title value\", \"Definition to be extended\", frenchDefinitions.get(\"test.def.overridden\").getAttribute(\"title\").getValue());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\plugins\\tiles\\src\\test\\java\\org\\apache\\tiles\\core\\definition\\dao\\ResolvingLocaleUrlDefinitionDAOTest.java",
  "methodName" : "testSetSourceURLs",
  "sourceCode" : "@Test\r\npublic void testSetSourceURLs() {\r\n    List<ApplicationResource> sourceURLs = new ArrayList<>();\r\n    sourceURLs.add(url1);\r\n    sourceURLs.add(url2);\r\n    sourceURLs.add(url3);\r\n    definitionDao.setSources(sourceURLs);\r\n    assertEquals(\"The source URLs are not set correctly\", sourceURLs, definitionDao.sources);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\plugins\\tiles\\src\\test\\java\\org\\apache\\tiles\\core\\definition\\dao\\ResolvingLocaleUrlDefinitionDAOTest.java",
  "methodName" : "testSetReader",
  "sourceCode" : "@Test\r\npublic void testSetReader() {\r\n    DefinitionsReader reader = createMock(DefinitionsReader.class);\r\n    definitionDao.setReader(reader);\r\n    assertEquals(\"There reader has not been set correctly\", reader, definitionDao.reader);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\plugins\\tiles\\src\\test\\java\\org\\apache\\tiles\\core\\definition\\dao\\ResolvingLocaleUrlDefinitionDAOTest.java",
  "methodName" : "testResolveInheritanceNoParent",
  "sourceCode" : "/**\r\n * Tests {@link ResolvingLocaleUrlDefinitionDAO#resolveInheritance(Definition, Map, Locale, Set)}.\r\n */\r\n@Test(expected = NoSuchDefinitionException.class)\r\npublic void testResolveInheritanceNoParent() {\r\n    Definition definition = new Definition(\"mydef\", null, null);\r\n    definition.setExtends(\"otherDef\");\r\n    definitionDao.resolveInheritance(definition, new HashMap<>(), Locale.ITALY, new HashSet<>());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\plugins\\tiles\\src\\test\\java\\org\\apache\\tiles\\core\\definition\\dao\\ResolvingLocaleUrlDefinitionDAOTest.java",
  "methodName" : "testInit",
  "sourceCode" : "/**\r\n * Tests execution.\r\n */\r\n@Test\r\npublic void testInit() {\r\n    ApplicationContext applicationContext = createMock(ApplicationContext.class);\r\n    Set<ApplicationResource> urlSet = new HashSet<>();\r\n    urlSet.add(url1);\r\n    expect(applicationContext.getResources(\"/WEB-INF/tiles.xml\")).andReturn(urlSet);\r\n    replay(applicationContext);\r\n    DefinitionsReader reader = new DigesterDefinitionsReader();\r\n    definitionDao.setReader(reader);\r\n    List<ApplicationResource> sourceURLs = new ArrayList<>();\r\n    sourceURLs.add(url1);\r\n    definitionDao.setSources(sourceURLs);\r\n    assertEquals(\"The reader is not of the correct class\", DigesterDefinitionsReader.class, definitionDao.reader.getClass());\r\n    assertEquals(\"The source URLs are not correct\", sourceURLs, definitionDao.sources);\r\n    reset(applicationContext);\r\n    applicationContext = createMock(ApplicationContext.class);\r\n    replay(applicationContext);\r\n    definitionDao.setReader(new MockDefinitionsReader());\r\n    assertEquals(\"The reader is not of the correct class\", MockDefinitionsReader.class, definitionDao.reader.getClass());\r\n    sourceURLs = new ArrayList<>();\r\n    sourceURLs.add(url1);\r\n    sourceURLs.add(url2);\r\n    sourceURLs.add(url3);\r\n    definitionDao.setSources(sourceURLs);\r\n    assertEquals(\"The source URLs are not correct\", sourceURLs, definitionDao.sources);\r\n    verify(applicationContext);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\plugins\\tiles\\src\\test\\java\\org\\apache\\tiles\\core\\definition\\dao\\ResolvingLocaleUrlDefinitionDAOTest.java",
  "methodName" : "testWildcardMapping",
  "sourceCode" : "/**\r\n * Tests wildcard mappings.\r\n */\r\n@Test\r\npublic void testWildcardMapping() {\r\n    List<ApplicationResource> urls = new ArrayList<>();\r\n    urls.add(urlWildcard);\r\n    definitionDao.setSources(urls);\r\n    definitionDao.setReader(new DigesterDefinitionsReader());\r\n    Definition definition = definitionDao.getDefinition(\"test.defName.subLayered\", Locale.ITALY);\r\n    assertEquals(\"The template is not correct\", \"/testName.jsp\", definition.getTemplateAttribute().getValue());\r\n    assertEquals(\"The header attribute is not correct\", \"/common/headerLayered.jsp\", definition.getAttribute(\"header\").getValue());\r\n    definition = definitionDao.getDefinition(\"test.defName.subLayered\", Locale.ITALIAN);\r\n    assertEquals(\"The template is not correct\", \"/testName.jsp\", definition.getTemplateAttribute().getValue());\r\n    assertEquals(\"The header attribute is not correct\", \"/common/headerLayered.jsp\", definition.getAttribute(\"header\").getValue());\r\n    definition = definitionDao.getDefinition(\"test.defName.subLayered\", null);\r\n    assertEquals(\"The template is not correct\", \"/testName.jsp\", definition.getTemplateAttribute().getValue());\r\n    assertEquals(\"The header attribute is not correct\", \"/common/headerLayered.jsp\", definition.getAttribute(\"header\").getValue());\r\n    definition = definitionDao.getDefinition(\"test.defName.noAttribute\", null);\r\n    assertEquals(\"/testName.jsp\", definition.getTemplateAttribute().getValue());\r\n    assertNull(definition.getLocalAttributeNames());\r\n    definition = definitionDao.getDefinition(\"test.def3\", null);\r\n    assertNotNull(\"The simple definition is null\", definition);\r\n    definition = definitionDao.getDefinition(\"test.extended.defName.subLayered\", null);\r\n    assertEquals(\"test.defName.subLayered\", definition.getExtends());\r\n    assertEquals(ATTRIBUTE_NAMES_COUNT, definition.getLocalAttributeNames().size());\r\n    assertEquals(\"The template is not correct\", \"/testName.jsp\", definition.getTemplateAttribute().getValue());\r\n    assertEquals(\"Overridden Title\", definition.getAttribute(\"title\").getValue());\r\n    assertEquals(\"The header attribute is not correct\", \"/common/headerLayered.jsp\", definition.getAttribute(\"header\").getValue());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\plugins\\tiles\\src\\test\\java\\org\\apache\\tiles\\core\\definition\\dao\\ResolvingLocaleUrlDefinitionDAOTest.java",
  "methodName" : "testListAttributeLocaleInheritance",
  "sourceCode" : "/**\r\n * Tests\r\n * {@link ResolvingLocaleUrlDefinitionDAO#getDefinition(String, Locale)}\r\n * when loading multiple files for a locale.\r\n */\r\n@Test\r\npublic void testListAttributeLocaleInheritance() {\r\n    List<ApplicationResource> urls = new ArrayList<>();\r\n    urls.add(url21);\r\n    definitionDao.setSources(urls);\r\n    ApplicationContext applicationContext = createMock(ApplicationContext.class);\r\n    definitionDao.setReader(new DigesterDefinitionsReader());\r\n    replay(applicationContext);\r\n    Definition definition = definitionDao.getDefinition(\"test.inherit.list\", Locale.ITALIAN);\r\n    ListAttribute listAttribute = (ListAttribute) definition.getAttribute(\"list\");\r\n    List<Attribute> attributes = listAttribute.getValue();\r\n    assertEquals(2, attributes.size());\r\n    verify(applicationContext);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\plugins\\tiles\\src\\test\\java\\org\\apache\\tiles\\core\\definition\\dao\\ResolvingLocaleUrlDefinitionDAOTest.java",
  "methodName" : "testTiles512",
  "sourceCode" : "@Test\r\npublic void testTiles512() {\r\n    List<ApplicationResource> urls = new ArrayList<>();\r\n    urls.add(url21);\r\n    definitionDao.setSources(urls);\r\n    ApplicationContext applicationContext = createMock(ApplicationContext.class);\r\n    definitionDao.setReader(new DigesterDefinitionsReader());\r\n    replay(applicationContext);\r\n    Definition definition = definitionDao.getDefinition(\"test.inherit.othertype\", Locale.ITALIAN);\r\n    assertEquals(\"/layout.ftl\", definition.getTemplateAttribute().getValue());\r\n    assertEquals(\"freemarker\", definition.getTemplateAttribute().getRenderer());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\plugins\\tiles\\src\\test\\java\\org\\apache\\tiles\\core\\definition\\dao\\ResolvingLocaleUrlDefinitionDAOTest.java",
  "methodName" : "testTiles513",
  "sourceCode" : "@Test\r\npublic void testTiles513() {\r\n    List<ApplicationResource> urls = new ArrayList<>();\r\n    urls.add(url513);\r\n    definitionDao.setSources(urls);\r\n    ApplicationContext applicationContext = createMock(ApplicationContext.class);\r\n    definitionDao.setReader(new DigesterDefinitionsReader());\r\n    replay(applicationContext);\r\n    Definition definition = definitionDao.getDefinition(\"test.anonymous\", null);\r\n    definitionDao.getDefinition(\"test.anonymous\", new Locale(\"es\", \"CO\"));\r\n    definitionDao.getDefinition(\"test.anonymous\", new Locale(\"en\", \"CA\"));\r\n    Attribute attribute = definition.getAttribute(\"header\");\r\n    Definition child = definitionDao.getDefinition((String) attribute.getValue(), null);\r\n    assertNotNull(child);\r\n    attribute = definition.getAttribute(\"menu\");\r\n    child = definitionDao.getDefinition((String) attribute.getValue(), null);\r\n    assertNotNull(child);\r\n    attribute = definition.getAttribute(\"footer\");\r\n    child = definitionDao.getDefinition((String) attribute.getValue(), null);\r\n    assertNotNull(child);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\plugins\\tiles\\src\\test\\java\\org\\apache\\tiles\\core\\definition\\DefinitionsFactoryExceptionTest.java",
  "methodName" : "testDefinitionsFactoryException",
  "sourceCode" : "/**\r\n * Test method for {@link DefinitionsFactoryException#DefinitionsFactoryException()}.\r\n */\r\n@Test\r\npublic void testDefinitionsFactoryException() {\r\n    DefinitionsFactoryException exception = new DefinitionsFactoryException();\r\n    assertNull(exception.getMessage());\r\n    assertNull(exception.getCause());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\plugins\\tiles\\src\\test\\java\\org\\apache\\tiles\\core\\definition\\DefinitionsFactoryExceptionTest.java",
  "methodName" : "testDefinitionsFactoryExceptionString",
  "sourceCode" : "/**\r\n * Test method for {@link DefinitionsFactoryException#DefinitionsFactoryException(String)}.\r\n */\r\n@Test\r\npublic void testDefinitionsFactoryExceptionString() {\r\n    DefinitionsFactoryException exception = new DefinitionsFactoryException(\"my message\");\r\n    assertEquals(\"my message\", exception.getMessage());\r\n    assertNull(exception.getCause());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\plugins\\tiles\\src\\test\\java\\org\\apache\\tiles\\core\\definition\\DefinitionsFactoryExceptionTest.java",
  "methodName" : "testDefinitionsFactoryExceptionThrowable",
  "sourceCode" : "/**\r\n * Test method for {@link DefinitionsFactoryException#DefinitionsFactoryException(Throwable)}.\r\n */\r\n@Test\r\npublic void testDefinitionsFactoryExceptionThrowable() {\r\n    Throwable cause = new Throwable();\r\n    DefinitionsFactoryException exception = new DefinitionsFactoryException(cause);\r\n    assertEquals(cause.toString(), exception.getMessage());\r\n    assertEquals(cause, exception.getCause());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\plugins\\tiles\\src\\test\\java\\org\\apache\\tiles\\core\\definition\\DefinitionsFactoryExceptionTest.java",
  "methodName" : "testDefinitionsFactoryExceptionStringThrowable",
  "sourceCode" : "/**\r\n * Test method for {@link DefinitionsFactoryException#DefinitionsFactoryException(String, Throwable)}.\r\n */\r\n@Test\r\npublic void testDefinitionsFactoryExceptionStringThrowable() {\r\n    Throwable cause = new Throwable();\r\n    DefinitionsFactoryException exception = new DefinitionsFactoryException(\"my message\", cause);\r\n    assertEquals(\"my message\", exception.getMessage());\r\n    assertEquals(cause, exception.getCause());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\plugins\\tiles\\src\\test\\java\\org\\apache\\tiles\\core\\definition\\digester\\DigesterDefinitionsReaderExceptionTest.java",
  "methodName" : "testDigesterDefinitionsReaderExceptionString",
  "sourceCode" : "/**\r\n * Test method for {@link DigesterDefinitionsReaderException#DigesterDefinitionsReaderException(String)}.\r\n */\r\n@Test\r\npublic void testDigesterDefinitionsReaderExceptionString() {\r\n    DigesterDefinitionsReaderException exception = new DigesterDefinitionsReaderException(\"my message\");\r\n    assertEquals(\"my message\", exception.getMessage());\r\n    assertNull(exception.getCause());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\plugins\\tiles\\src\\test\\java\\org\\apache\\tiles\\core\\definition\\digester\\TestDigesterDefinitionsReader.java",
  "methodName" : "testRead",
  "sourceCode" : "/**\r\n * Tests the read method under normal conditions.\r\n *\r\n * @throws IOException If something goes wrong.\r\n */\r\n@Test\r\npublic void testRead() throws IOException {\r\n    URL configFile = this.getClass().getClassLoader().getResource(\"org/apache/tiles/core/config/tiles-defs.xml\");\r\n    assertNotNull(\"Config file not found\", configFile);\r\n    InputStream source = configFile.openStream();\r\n    Map<String, Definition> definitions = reader.read(source);\r\n    assertNotNull(\"Definitions not returned.\", definitions);\r\n    assertNotNull(\"Couldn't find doc.mainLayout tile.\", definitions.get(\"doc.mainLayout\"));\r\n    assertNotNull(\"Couldn't Find title attribute.\", definitions.get(\"doc.mainLayout\").getAttribute(\"title\").getValue());\r\n    assertEquals(\"Incorrect Find title attribute.\", \"Tiles Library Documentation\", definitions.get(\"doc.mainLayout\").getAttribute(\"title\").getValue());\r\n    Definition def = definitions.get(\"doc.role.test\");\r\n    assertNotNull(\"Couldn't find doc.role.test tile.\", def);\r\n    Attribute attribute = def.getAttribute(\"title\");\r\n    assertNotNull(\"Couldn't Find title attribute.\", attribute.getValue());\r\n    assertEquals(\"Role 'myrole' expected\", attribute.getRole(), \"myrole\");\r\n    def = definitions.get(\"doc.listattribute.test\");\r\n    assertNotNull(\"Couldn't find doc.listattribute.test tile.\", def);\r\n    attribute = def.getAttribute(\"items\");\r\n    assertNotNull(\"Couldn't Find items attribute.\", attribute);\r\n    assertTrue(\"The class of the attribute is not right\", attribute instanceof ListAttribute);\r\n    assertTrue(\"The class of value of the attribute is not right\", attribute.getValue() instanceof List);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\plugins\\tiles\\src\\test\\java\\org\\apache\\tiles\\core\\definition\\digester\\TestDigesterDefinitionsReader.java",
  "methodName" : "testRead21Version",
  "sourceCode" : "/**\r\n * Tests the read method under normal conditions for the new features in 2.1\r\n * version of the DTD.\r\n *\r\n * @throws IOException If something goes wrong.\r\n */\r\n@Test\r\npublic void testRead21Version() throws IOException {\r\n    URL configFile = this.getClass().getClassLoader().getResource(\"org/apache/tiles/core/config/tiles-defs-2.1.xml\");\r\n    assertNotNull(\"Config file not found\", configFile);\r\n    InputStream source = configFile.openStream();\r\n    Map<String, Definition> definitions = reader.read(source);\r\n    assertNotNull(\"Definitions not returned.\", definitions);\r\n    Definition def = definitions.get(\"doc.cascaded.test\");\r\n    assertNotNull(\"Couldn't find doc.role.test tile.\", def);\r\n    Attribute attribute = def.getLocalAttribute(\"title\");\r\n    assertNotNull(\"Couldn't Find title local attribute.\", attribute);\r\n    attribute = def.getCascadedAttribute(\"title2\");\r\n    assertNotNull(\"Couldn't Find title2 cascaded attribute.\", attribute);\r\n    attribute = def.getLocalAttribute(\"items1\");\r\n    assertNotNull(\"Couldn't Find items1 local attribute.\", attribute);\r\n    attribute = def.getCascadedAttribute(\"items2\");\r\n    assertNotNull(\"Couldn't Find items2 cascaded attribute.\", attribute);\r\n    def = definitions.get(\"test.nesting.definitions\");\r\n    assertNotNull(\"Couldn't find test.nesting.definitions tile.\", def);\r\n    assertEquals(\"/layout.jsp\", def.getTemplateAttribute().getValue());\r\n    assertEquals(\"template\", def.getTemplateAttribute().getRenderer());\r\n    attribute = def.getAttribute(\"body\");\r\n    assertNotNull(\"Couldn't Find body attribute.\", attribute);\r\n    assertEquals(\"Attribute not of 'definition' type\", \"definition\", attribute.getRenderer());\r\n    assertNotNull(\"Attribute value null\", attribute.getValue());\r\n    String defName = attribute.getValue().toString();\r\n    def = definitions.get(defName);\r\n    assertNotNull(\"Couldn't find \" + defName + \" tile.\", def);\r\n    def = definitions.get(\"test.nesting.list.definitions\");\r\n    assertNotNull(\"Couldn't find test.nesting.list.definitions tile.\", def);\r\n    attribute = def.getAttribute(\"list\");\r\n    assertNotNull(\"Couldn't Find list attribute.\", attribute);\r\n    assertTrue(\"Attribute not of valid type\", attribute instanceof ListAttribute);\r\n    ListAttribute listAttribute = (ListAttribute) attribute;\r\n    List<Attribute> list = listAttribute.getValue();\r\n    assertEquals(\"The list is not of correct size\", 1, list.size());\r\n    attribute = list.get(0);\r\n    assertNotNull(\"Couldn't Find element attribute.\", attribute);\r\n    assertEquals(\"Attribute not of 'definition' type\", \"definition\", attribute.getRenderer());\r\n    assertNotNull(\"Attribute value null\", attribute.getValue());\r\n    defName = attribute.getValue().toString();\r\n    def = definitions.get(defName);\r\n    assertNotNull(\"Couldn't find \" + defName + \" tile.\", def);\r\n    defName = \"test.inherit.list.base\";\r\n    def = definitions.get(defName);\r\n    assertNotNull(\"Couldn't find \" + defName + \" tile.\", def);\r\n    defName = \"test.inherit.list\";\r\n    def = definitions.get(defName);\r\n    assertNotNull(\"Couldn't find \" + defName + \" tile.\", def);\r\n    listAttribute = (ListAttribute) def.getAttribute(\"list\");\r\n    assertTrue(\"This definition does not inherit its list attribute\", listAttribute.isInherit());\r\n    defName = \"test.noinherit.list\";\r\n    def = definitions.get(defName);\r\n    listAttribute = (ListAttribute) def.getAttribute(\"list\");\r\n    assertFalse(\"This definition inherits its list attribute\", listAttribute.isInherit());\r\n    defName = \"test.new.attributes\";\r\n    def = definitions.get(defName);\r\n    assertNotNull(\"Couldn't find \" + defName + \" tile.\", def);\r\n    Attribute templateAttribute = def.getTemplateAttribute();\r\n    assertEquals(templateAttribute.getExpressionObject().getExpression(), \"${my.expression}\");\r\n    assertEquals(\"mytype\", templateAttribute.getRenderer());\r\n    attribute = def.getAttribute(\"body\");\r\n    assertNotNull(\"Couldn't Find body attribute.\", attribute);\r\n    assertEquals(\"${my.attribute.expression}\", attribute.getExpressionObject().getExpression());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\plugins\\tiles\\src\\test\\java\\org\\apache\\tiles\\core\\definition\\digester\\TestDigesterDefinitionsReader.java",
  "methodName" : "testBadSource",
  "sourceCode" : "/**\r\n * Tests read with bad input source.\r\n */\r\n@Test\r\npublic void testBadSource() {\r\n    try {\r\n        reader.read(\"Bad Input\");\r\n        fail(\"Should've thrown an exception.\");\r\n    } catch (DefinitionsFactoryException e) {\r\n        assertTrue(true);\r\n    } catch (Exception e) {\r\n        fail(\"Exception reading configuration.\" + e);\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\plugins\\tiles\\src\\test\\java\\org\\apache\\tiles\\core\\definition\\digester\\TestDigesterDefinitionsReader.java",
  "methodName" : "testBadXml",
  "sourceCode" : "/**\r\n * Tests read with bad XML source.\r\n */\r\n@Test\r\npublic void testBadXml() {\r\n    try {\r\n        URL configFile = this.getClass().getClassLoader().getResource(\"org/apache/tiles/config/malformed-defs.xml\");\r\n        assertNotNull(\"Config file not found\", configFile);\r\n        InputStream source = configFile.openStream();\r\n        reader.read(source);\r\n        fail(\"Should've thrown an exception.\");\r\n    } catch (DefinitionsFactoryException e) {\r\n        assertTrue(true);\r\n    } catch (Exception e) {\r\n        fail(\"Exception reading configuration.\" + e);\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\plugins\\tiles\\src\\test\\java\\org\\apache\\tiles\\core\\definition\\digester\\TestDigesterDefinitionsReader.java",
  "methodName" : "testValidatingParameter",
  "sourceCode" : "/**\r\n * Tests the validating input parameter.\r\n * <p>\r\n * This test case enables Digester's validating property then passes in a\r\n * configuration file with invalid XML.\r\n */\r\n@Test\r\npublic void testValidatingParameter() {\r\n    // Testing with default (validation ON).\r\n    try {\r\n        URL configFile = this.getClass().getClassLoader().getResource(\"org/apache/tiles/config/invalid-defs.xml\");\r\n        assertNotNull(\"Config file not found\", configFile);\r\n        InputStream source = configFile.openStream();\r\n        reader.setValidating(true);\r\n        reader.read(source);\r\n        fail(\"Should've thrown an exception.\");\r\n    } catch (DefinitionsFactoryException e) {\r\n        assertTrue(true);\r\n    } catch (Exception e) {\r\n        fail(\"Exception reading configuration.\" + e);\r\n    }\r\n    // Testing with validation OFF.\r\n    try {\r\n        setUp();\r\n        URL configFile = this.getClass().getClassLoader().getResource(\"org/apache/tiles/config/invalid-defs.xml\");\r\n        assertNotNull(\"Config file not found\", configFile);\r\n        InputStream source = configFile.openStream();\r\n        reader.read(source);\r\n    } catch (DefinitionsFactoryException e) {\r\n        fail(\"Should not have thrown an exception.\" + e);\r\n    } catch (Exception e) {\r\n        fail(\"Exception reading configuration.\" + e);\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\plugins\\tiles\\src\\test\\java\\org\\apache\\tiles\\core\\definition\\digester\\TestDigesterDefinitionsReader.java",
  "methodName" : "testRegressionTiles352",
  "sourceCode" : "/**\r\n * Regression test for bug TILES-352.\r\n *\r\n * @throws IOException If something goes wrong.\r\n */\r\n@Test\r\npublic void testRegressionTiles352() throws IOException {\r\n    URL configFile = this.getClass().getClassLoader().getResource(\"org/apache/tiles/config/defs_regression_TILES-352.xml\");\r\n    assertNotNull(\"Config file not found\", configFile);\r\n    InputStream source = configFile.openStream();\r\n    Map<String, Definition> name2defs = reader.read(source);\r\n    source.close();\r\n    Definition root = name2defs.get(\"root\");\r\n    Attribute attribute = root.getAttribute(\"body\");\r\n    Definition child = name2defs.get(attribute.getValue());\r\n    ListAttribute listAttribute = (ListAttribute) child.getAttribute(\"list\");\r\n    List<Attribute> list = listAttribute.getValue();\r\n    assertEquals((list.get(0)).getValue(), \"This is a value\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\plugins\\tiles\\src\\test\\java\\org\\apache\\tiles\\core\\definition\\digester\\TestDigesterDefinitionsReader.java",
  "methodName" : "testReadNoSource",
  "sourceCode" : "/**\r\n * Tests {@link DigesterDefinitionsReader#read(Object)}.\r\n */\r\n@Test\r\npublic void testReadNoSource() {\r\n    assertNull(reader.read(null));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\plugins\\tiles\\src\\test\\java\\org\\apache\\tiles\\core\\definition\\digester\\TestDigesterDefinitionsReader.java",
  "methodName" : "testAddDefinitionNoName",
  "sourceCode" : "/**\r\n * Tests {@link DigesterDefinitionsReader#addDefinition(Definition)}.\r\n */\r\n@Test(expected = DigesterDefinitionsReaderException.class)\r\npublic void testAddDefinitionNoName() {\r\n    Definition def = new Definition();\r\n    reader.addDefinition(def);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\plugins\\tiles\\src\\test\\java\\org\\apache\\tiles\\core\\definition\\NoSuchDefinitionExceptionTest.java",
  "methodName" : "testNoSuchDefinitionExceptionString",
  "sourceCode" : "/**\r\n * Test method for {@link NoSuchDefinitionException#NoSuchDefinitionException(String)}.\r\n */\r\n@Test\r\npublic void testNoSuchDefinitionExceptionString() {\r\n    NoSuchDefinitionException exception = new NoSuchDefinitionException(\"my message\");\r\n    assertEquals(\"my message\", exception.getMessage());\r\n    assertNull(exception.getCause());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\plugins\\tiles\\src\\test\\java\\org\\apache\\tiles\\core\\definition\\pattern\\AbstractPatternDefinitionResolverTest.java",
  "methodName" : "testResolveDefinition",
  "sourceCode" : "/**\r\n * Test method for\r\n * {@link BasicPatternDefinitionResolver#resolveDefinition(String, Object)}.\r\n */\r\n@Test\r\npublic void testResolveDefinition() {\r\n    testResolveDefinitionImpl();\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\plugins\\tiles\\src\\test\\java\\org\\apache\\tiles\\core\\definition\\pattern\\AbstractPatternDefinitionResolverTest.java",
  "methodName" : "testClearPatternPaths",
  "sourceCode" : "/**\r\n * Test method for\r\n * {@link BasicPatternDefinitionResolver#clearPatternPaths(Object)}.\r\n */\r\n@Test\r\npublic void testClearPatternPaths() {\r\n    testResolveDefinitionImpl();\r\n    resolver.clearPatternPaths(1);\r\n    resolver.clearPatternPaths(2);\r\n    testResolveDefinitionImpl();\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\plugins\\tiles\\src\\test\\java\\org\\apache\\tiles\\core\\definition\\pattern\\BasicPatternDefinitionResolverTest.java",
  "methodName" : "testAddDefinitionsAsPatternMatchers",
  "sourceCode" : "/**\r\n * Test method for\r\n * {@link BasicPatternDefinitionResolver#addDefinitionsAsPatternMatchers(List, Map)}.\r\n */\r\n@Test\r\npublic void testAddDefinitionsAsPatternMatchers() {\r\n    DefinitionPatternMatcherFactory factory = createMock(DefinitionPatternMatcherFactory.class);\r\n    PatternRecognizer recognizer = createMock(PatternRecognizer.class);\r\n    DefinitionPatternMatcher firstMatcher = createMock(DefinitionPatternMatcher.class);\r\n    DefinitionPatternMatcher thirdMatcher = createMock(DefinitionPatternMatcher.class);\r\n    expect(recognizer.isPatternRecognized(\"first\")).andReturn(true);\r\n    expect(recognizer.isPatternRecognized(\"second\")).andReturn(false);\r\n    expect(recognizer.isPatternRecognized(\"third\")).andReturn(true);\r\n    Definition firstDefinition = new Definition(\"first\", null, null);\r\n    Definition secondDefinition = new Definition(\"second\", null, null);\r\n    Definition thirdDefinition = new Definition(\"third\", null, null);\r\n    expect(factory.createDefinitionPatternMatcher(\"first\", firstDefinition)).andReturn(firstMatcher);\r\n    expect(factory.createDefinitionPatternMatcher(\"third\", thirdDefinition)).andReturn(thirdMatcher);\r\n    replay(factory, recognizer, firstMatcher, thirdMatcher);\r\n    BasicPatternDefinitionResolver<Integer> resolver = new BasicPatternDefinitionResolver<>(factory, recognizer);\r\n    Map<String, Definition> localeDefsMap = new LinkedHashMap<>();\r\n    localeDefsMap.put(\"first\", firstDefinition);\r\n    localeDefsMap.put(\"second\", secondDefinition);\r\n    localeDefsMap.put(\"third\", thirdDefinition);\r\n    List<DefinitionPatternMatcher> matchers = new ArrayList<>();\r\n    resolver.addDefinitionsAsPatternMatchers(matchers, localeDefsMap);\r\n    assertEquals(2, matchers.size());\r\n    assertEquals(firstMatcher, matchers.get(0));\r\n    assertEquals(thirdMatcher, matchers.get(1));\r\n    verify(factory, recognizer, firstMatcher, thirdMatcher);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\plugins\\tiles\\src\\test\\java\\org\\apache\\tiles\\core\\definition\\pattern\\PatternUtilTest.java",
  "methodName" : "testReplacePlaceholders",
  "sourceCode" : "/**\r\n * Test method for\r\n * {@link PatternUtil#replacePlaceholders(Definition, String, Object[])}.\r\n */\r\n@Test\r\npublic void testReplacePlaceholders() {\r\n    Map<String, Attribute> attributes = new HashMap<>();\r\n    attributes.put(\"attrib1\", new Attribute(\"value{2}\"));\r\n    attributes.put(\"attrib2\", new Attribute(\"value{2}{3}\"));\r\n    attributes.put(\"attrib3\", new Attribute(null, Expression.createExpression(\"expr{1}\", \"EL\"), null, null));\r\n    Definition definition = new Definition(\"definitionName\", new Attribute(\"template{1}\"), attributes);\r\n    definition.setExtends(\"{2}ext\");\r\n    definition.setPreparer(\"{3}prep\");\r\n    Definition nudef = PatternUtil.replacePlaceholders(definition, \"nudef\", \"value0\", \"value1\", \"value2\", \"value3\");\r\n    assertEquals(\"nudef\", nudef.getName());\r\n    assertEquals(\"value2ext\", nudef.getExtends());\r\n    assertEquals(\"value3prep\", nudef.getPreparer());\r\n    Attribute attribute = nudef.getTemplateAttribute();\r\n    assertEquals(\"templatevalue1\", attribute.getValue());\r\n    attribute = nudef.getAttribute(\"attrib1\");\r\n    assertEquals(\"valuevalue2\", attribute.getValue());\r\n    attribute = nudef.getAttribute(\"attrib2\");\r\n    assertEquals(\"valuevalue2value3\", attribute.getValue());\r\n    attribute = nudef.getAttribute(\"attrib3\");\r\n    assertEquals(\"exprvalue1\", attribute.getExpressionObject().getExpression());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\plugins\\tiles\\src\\test\\java\\org\\apache\\tiles\\core\\definition\\pattern\\PatternUtilTest.java",
  "methodName" : "testReplacePlaceholdersNullTemplate",
  "sourceCode" : "/**\r\n * Test method for\r\n * {@link PatternUtil#replacePlaceholders(Definition, String, Object[])}.\r\n */\r\n@Test\r\npublic void testReplacePlaceholdersNullTemplate() {\r\n    Map<String, Attribute> attributes = new HashMap<>();\r\n    attributes.put(\"attrib1\", new Attribute(\"value{2}\"));\r\n    attributes.put(\"attrib2\", new Attribute(\"value{2}{3}\"));\r\n    Definition definition = new Definition(\"definitionName\", null, attributes);\r\n    Definition nudef = PatternUtil.replacePlaceholders(definition, \"nudef\", \"value0\", \"value1\", \"value2\", \"value3\");\r\n    assertEquals(\"nudef\", nudef.getName());\r\n    assertNull(nudef.getTemplateAttribute());\r\n    Attribute attribute = nudef.getAttribute(\"attrib1\");\r\n    assertEquals(\"valuevalue2\", attribute.getValue());\r\n    attribute = nudef.getAttribute(\"attrib2\");\r\n    assertEquals(\"valuevalue2value3\", attribute.getValue());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\plugins\\tiles\\src\\test\\java\\org\\apache\\tiles\\core\\definition\\pattern\\PatternUtilTest.java",
  "methodName" : "testReplacePlaceholdersCascadedAttributes",
  "sourceCode" : "/**\r\n * Test method for\r\n * {@link PatternUtil#replacePlaceholders(Definition, String, Object[])}.\r\n */\r\n@Test\r\npublic void testReplacePlaceholdersCascadedAttributes() {\r\n    Definition definition = new Definition(\"definitionName\", new Attribute(\"template{1}\"), null);\r\n    definition.putAttribute(\"attrib1\", new Attribute(\"value{2}\"), true);\r\n    definition.putAttribute(\"attrib2\", new Attribute(\"value{2}{3}\"), true);\r\n    Definition nudef = PatternUtil.replacePlaceholders(definition, \"nudef\", \"value0\", \"value1\", \"value2\", \"value3\");\r\n    assertEquals(\"nudef\", nudef.getName());\r\n    Attribute attribute = nudef.getTemplateAttribute();\r\n    assertEquals(\"templatevalue1\", attribute.getValue());\r\n    attribute = nudef.getAttribute(\"attrib1\");\r\n    assertEquals(\"valuevalue2\", attribute.getValue());\r\n    attribute = nudef.getAttribute(\"attrib2\");\r\n    assertEquals(\"valuevalue2value3\", attribute.getValue());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\plugins\\tiles\\src\\test\\java\\org\\apache\\tiles\\core\\definition\\pattern\\PatternUtilTest.java",
  "methodName" : "testReplacePlaceholdersListAttribute",
  "sourceCode" : "/**\r\n * Test method for\r\n * {@link PatternUtil#replacePlaceholders(Definition, String, Object[])}.\r\n */\r\n@Test\r\npublic void testReplacePlaceholdersListAttribute() {\r\n    Map<String, Attribute> attributes = new HashMap<>();\r\n    ListAttribute listAttribute = new ListAttribute();\r\n    ListAttribute internalListAttribute = new ListAttribute();\r\n    listAttribute.setInherit(true);\r\n    attributes.put(\"myList\", listAttribute);\r\n    listAttribute.add(new Attribute(\"value{2}\"));\r\n    listAttribute.add(new Attribute(\"value{2}{3}\"));\r\n    listAttribute.add(internalListAttribute);\r\n    internalListAttribute.add(new Attribute(\"secondvalue{2}\"));\r\n    internalListAttribute.add(new Attribute(\"secondvalue{2}{3}\"));\r\n    Definition definition = new Definition(\"definitionName\", new Attribute(\"template{1}\"), attributes);\r\n    Definition nudef = PatternUtil.replacePlaceholders(definition, \"nudef\", \"value0\", \"value1\", \"value2\", \"value3\");\r\n    assertEquals(\"nudef\", nudef.getName());\r\n    Attribute attribute = nudef.getTemplateAttribute();\r\n    assertEquals(\"templatevalue1\", attribute.getValue());\r\n    ListAttribute nuListAttribute = (ListAttribute) nudef.getAttribute(\"myList\");\r\n    assertTrue(nuListAttribute.isInherit());\r\n    List<Attribute> list = nuListAttribute.getValue();\r\n    assertEquals(LIST_ATTRIBUTE_SIZE, list.size());\r\n    attribute = list.get(0);\r\n    assertEquals(\"valuevalue2\", attribute.getValue());\r\n    attribute = list.get(1);\r\n    assertEquals(\"valuevalue2value3\", attribute.getValue());\r\n    ListAttribute evaluatedListAttribute = (ListAttribute) list.get(2);\r\n    assertFalse(evaluatedListAttribute.isInherit());\r\n    list = evaluatedListAttribute.getValue();\r\n    assertEquals(2, list.size());\r\n    attribute = list.get(0);\r\n    assertEquals(\"secondvaluevalue2\", attribute.getValue());\r\n    attribute = list.get(1);\r\n    assertEquals(\"secondvaluevalue2value3\", attribute.getValue());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\plugins\\tiles\\src\\test\\java\\org\\apache\\tiles\\core\\definition\\pattern\\PatternUtilTest.java",
  "methodName" : "testCreateExtractedMap",
  "sourceCode" : "/**\r\n * Tests {@link PatternUtil#createExtractedMap(Map, Set)}.\r\n */\r\n@Test\r\npublic void testCreateExtractedMap() {\r\n    Map<Integer, String> map = new HashMap<>();\r\n    map.put(0, \"value0\");\r\n    map.put(1, \"value1\");\r\n    map.put(2, \"value2\");\r\n    Set<Integer> set = new HashSet<>();\r\n    set.add(1);\r\n    set.add(2);\r\n    Map<Integer, String> extractedMap = PatternUtil.createExtractedMap(map, set);\r\n    assertEquals(2, extractedMap.size());\r\n    assertEquals(\"value1\", extractedMap.get(1));\r\n    assertEquals(\"value2\", extractedMap.get(2));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\plugins\\tiles\\src\\test\\java\\org\\apache\\tiles\\core\\definition\\pattern\\PatternUtilTest.java",
  "methodName" : "testReplacePlaceholdersEL_0",
  "sourceCode" : "/**\r\n * Test method for\r\n * {@link PatternUtil#replacePlaceholders(Definition, String, Object[])}.\r\n * See TILES-502\r\n */\r\n@Test\r\npublic void testReplacePlaceholdersEL_0() {\r\n    Map<String, Attribute> attributes = new HashMap<>();\r\n    Attribute attribute = new Attribute(\"some-{1}-${requestScope.someVariable}.jsp\");\r\n    attribute.setExpressionObject(new Expression((String) attribute.getValue()));\r\n    attributes.put(\"something\", attribute);\r\n    Definition definition = new Definition(\"definitionName\", new Attribute(\"template\"), attributes);\r\n    Definition nudef = PatternUtil.replacePlaceholders(definition, \"nudef\", \"value0\", \"value1\", \"value2\", \"value3\");\r\n    assertEquals(\"nudef\", nudef.getName());\r\n    assertEquals(\"some-value1-${requestScope.someVariable}.jsp\", nudef.getAttribute(\"something\").getValue());\r\n    assertEquals(\"some-value1-${requestScope.someVariable}.jsp\", nudef.getAttribute(\"something\").getExpressionObject().getExpression());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\plugins\\tiles\\src\\test\\java\\org\\apache\\tiles\\core\\definition\\pattern\\PatternUtilTest.java",
  "methodName" : "testReplacePlaceholdersEL_1",
  "sourceCode" : "/**\r\n * Test method for\r\n * {@link PatternUtil#replacePlaceholders(Definition, String, Object[])}.\r\n * See TILES-574\r\n */\r\n@Test\r\npublic void testReplacePlaceholdersEL_1() {\r\n    Map<String, Attribute> attributes = new HashMap<>();\r\n    Attribute attribute = new Attribute(\"some-{1}-${requestScope.someVariable}-other-{2}.jsp\");\r\n    attribute.setExpressionObject(new Expression((String) attribute.getValue()));\r\n    attributes.put(\"something\", attribute);\r\n    Definition definition = new Definition(\"definitionName\", new Attribute(\"template\"), attributes);\r\n    Definition nudef = PatternUtil.replacePlaceholders(definition, \"nudef\", \"value0\", \"value1\", \"value2\", \"value3\");\r\n    assertEquals(\"nudef\", nudef.getName());\r\n    assertEquals(\"some-value1-${requestScope.someVariable}-other-value2.jsp\", nudef.getAttribute(\"something\").getValue());\r\n    assertEquals(\"some-value1-${requestScope.someVariable}-other-value2.jsp\", nudef.getAttribute(\"something\").getExpressionObject().getExpression());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\plugins\\tiles\\src\\test\\java\\org\\apache\\tiles\\core\\definition\\pattern\\PatternUtilTest.java",
  "methodName" : "testReplacePlaceholdersEL_2",
  "sourceCode" : "/**\r\n * Test method for\r\n * {@link PatternUtil#replacePlaceholders(Definition, String, Object[])}.\r\n * See TILES-574\r\n */\r\n@Test\r\npublic void testReplacePlaceholdersEL_2() {\r\n    Map<String, Attribute> attributes = new HashMap<>();\r\n    Attribute attribute = new Attribute(\"some-${requestScope.someVariable}-other-{1}-${requestScope.someOtherVariable}.jsp\");\r\n    attribute.setExpressionObject(new Expression((String) attribute.getValue()));\r\n    attributes.put(\"something\", attribute);\r\n    Definition definition = new Definition(\"definitionName\", new Attribute(\"template\"), attributes);\r\n    Definition nudef = PatternUtil.replacePlaceholders(definition, \"nudef\", \"value0\", \"value1\", \"value2\", \"value3\");\r\n    assertEquals(\"nudef\", nudef.getName());\r\n    assertEquals(\"some-${requestScope.someVariable}-other-value1-${requestScope.someOtherVariable}.jsp\", nudef.getAttribute(\"something\").getValue());\r\n    assertEquals(\"some-${requestScope.someVariable}-other-value1-${requestScope.someOtherVariable}.jsp\", nudef.getAttribute(\"something\").getExpressionObject().getExpression());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\plugins\\tiles\\src\\test\\java\\org\\apache\\tiles\\core\\definition\\pattern\\PatternUtilTest.java",
  "methodName" : "testReplacePlaceholdersEL_conditional",
  "sourceCode" : "/**\r\n * Test method for\r\n * {@link PatternUtil#replacePlaceholders(Definition, String, Object[])}.\r\n */\r\n@Test\r\npublic void testReplacePlaceholdersEL_conditional() {\r\n    Map<String, Attribute> attributes = new HashMap<>();\r\n    Attribute attribute = new Attribute(\"{1}/some-other-{2}-${requestScope.someBoolean ? 'a' : 'b'}.jsp\");\r\n    attribute.setExpressionObject(new Expression((String) attribute.getValue()));\r\n    attributes.put(\"something\", attribute);\r\n    Definition definition = new Definition(\"definitionName\", new Attribute(\"template\"), attributes);\r\n    Definition nudef = PatternUtil.replacePlaceholders(definition, \"nudef\", \"value0\", \"value1\", \"value2\", \"value3\");\r\n    assertEquals(\"nudef\", nudef.getName());\r\n    assertEquals(\"value1/some-other-value2-${requestScope.someBoolean ? 'a' : 'b'}.jsp\", nudef.getAttribute(\"something\").getValue());\r\n    assertEquals(\"value1/some-other-value2-${requestScope.someBoolean ? 'a' : 'b'}.jsp\", nudef.getAttribute(\"something\").getExpressionObject().getExpression());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\plugins\\tiles\\src\\test\\java\\org\\apache\\tiles\\core\\definition\\pattern\\PatternUtilTest.java",
  "methodName" : "testReplacePlaceholdersEL_twice",
  "sourceCode" : "/**\r\n * Test method for\r\n * {@link PatternUtil#replacePlaceholders(Definition, String, Object[])}.\r\n */\r\n@Test\r\npublic void testReplacePlaceholdersEL_twice() {\r\n    Map<String, Attribute> attributes = new HashMap<>();\r\n    Attribute attribute = new Attribute(\"some-${requestScope.firstVariable}-${requestScope.secondVariable}.jsp\");\r\n    attribute.setExpressionObject(new Expression((String) attribute.getValue()));\r\n    attributes.put(\"something\", attribute);\r\n    Definition definition = new Definition(\"definitionName\", new Attribute(\"template\"), attributes);\r\n    Definition nudef = PatternUtil.replacePlaceholders(definition, \"nudef\", \"value0\", \"value1\", \"value2\", \"value3\");\r\n    assertEquals(\"nudef\", nudef.getName());\r\n    assertEquals(\"some-${requestScope.firstVariable}-${requestScope.secondVariable}.jsp\", nudef.getAttribute(\"something\").getValue());\r\n    assertEquals(\"some-${requestScope.firstVariable}-${requestScope.secondVariable}.jsp\", nudef.getAttribute(\"something\").getExpressionObject().getExpression());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\plugins\\tiles\\src\\test\\java\\org\\apache\\tiles\\core\\definition\\pattern\\PatternUtilTest.java",
  "methodName" : "testReplacePlaceholdersEL_options",
  "sourceCode" : "/**\r\n * Test method for\r\n * {@link PatternUtil#replacePlaceholders(Definition, String, Object[])}.\r\n */\r\n@Test\r\npublic void testReplacePlaceholdersEL_options() {\r\n    Map<String, Attribute> attributes = new HashMap<>();\r\n    Attribute attribute = new Attribute(\"{1}/{options[my_fallback}}/some-other-{2}-${requestScope.someVariable}.jsp\");\r\n    attribute.setExpressionObject(new Expression((String) attribute.getValue()));\r\n    attributes.put(\"something\", attribute);\r\n    Definition definition = new Definition(\"definitionName\", new Attribute(\"template\"), attributes);\r\n    Definition nudef = PatternUtil.replacePlaceholders(definition, \"nudef\", \"value0\", \"value1\", \"value2\", \"value3\");\r\n    assertEquals(\"nudef\", nudef.getName());\r\n    assertEquals(\"value1/{options[my_fallback}}/some-other-value2-${requestScope.someVariable}.jsp\", nudef.getAttribute(\"something\").getValue());\r\n    assertEquals(\"value1/{options[my_fallback}}/some-other-value2-${requestScope.someVariable}.jsp\", nudef.getAttribute(\"something\").getExpressionObject().getExpression());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\plugins\\tiles\\src\\test\\java\\org\\apache\\tiles\\core\\definition\\pattern\\PrefixedPatternDefinitionResolverTest.java",
  "methodName" : "testAddDefinitionsAsPatternMatchers",
  "sourceCode" : "/**\r\n * Test method for {@link PrefixedPatternDefinitionResolver#addDefinitionsAsPatternMatchers(List, Map)}.\r\n */\r\n@Test\r\npublic void testAddDefinitionsAsPatternMatchers() {\r\n    DefinitionPatternMatcherFactory factory1 = createMock(DefinitionPatternMatcherFactory.class);\r\n    DefinitionPatternMatcherFactory factory2 = createMock(DefinitionPatternMatcherFactory.class);\r\n    DefinitionPatternMatcher matcher1 = createMock(DefinitionPatternMatcher.class);\r\n    DefinitionPatternMatcher matcher2 = createMock(DefinitionPatternMatcher.class);\r\n    Definition definition1 = new Definition(\"DF1:definition1\", null, null);\r\n    Definition definition2 = new Definition(\"DF2:definition2\", null, null);\r\n    Definition definition3 = new Definition(\"noLanguageHere\", null, null);\r\n    expect(factory1.createDefinitionPatternMatcher(\"definition1\", definition1)).andReturn(matcher1);\r\n    expect(factory2.createDefinitionPatternMatcher(\"definition2\", definition2)).andReturn(matcher2);\r\n    replay(factory1, factory2, matcher1, matcher2);\r\n    PrefixedPatternDefinitionResolver<Integer> resolver = new PrefixedPatternDefinitionResolver<>();\r\n    resolver.registerDefinitionPatternMatcherFactory(\"DF1\", factory1);\r\n    resolver.registerDefinitionPatternMatcherFactory(\"DF2\", factory2);\r\n    List<DefinitionPatternMatcher> matchers = new ArrayList<>();\r\n    Map<String, Definition> definitions = new LinkedHashMap<>();\r\n    definitions.put(\"DF1:definition1\", definition1);\r\n    definitions.put(\"DF2:definition2\", definition2);\r\n    definitions.put(\"noLanguageHere\", definition3);\r\n    resolver.addDefinitionsAsPatternMatchers(matchers, definitions);\r\n    assertEquals(2, matchers.size());\r\n    assertEquals(matcher1, matchers.get(0));\r\n    assertEquals(matcher2, matchers.get(1));\r\n    verify(factory1, factory2, matcher1, matcher2);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\plugins\\tiles\\src\\test\\java\\org\\apache\\tiles\\core\\definition\\pattern\\regexp\\RegexpDefinitionPatternMatcherFactoryTest.java",
  "methodName" : "testCreateDefinitionPatternMatcher",
  "sourceCode" : "@Test\r\npublic void testCreateDefinitionPatternMatcher() {\r\n    assertTrue(factory.createDefinitionPatternMatcher(\"myPattern\", new Definition()) instanceof RegexpDefinitionPatternMatcher);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\plugins\\tiles\\src\\test\\java\\org\\apache\\tiles\\core\\definition\\pattern\\regexp\\RegexpDefinitionPatternMatcherTest.java",
  "methodName" : "testResolveDefinition",
  "sourceCode" : "@Test\r\npublic void testResolveDefinition() {\r\n    Definition def = new Definition();\r\n    def.setName(\"testDef(.*)\\\\.message(.*)\");\r\n    def.setTemplateAttribute(Attribute.createTemplateAttribute(\"/test{1}.jsp\"));\r\n    def.putAttribute(\"body\", new Attribute(\"message{2}\"));\r\n    DefinitionPatternMatcher patternMatcher = new RegexpDefinitionPatternMatcher(\"testDef(.*)\\\\.message(.*)\", def);\r\n    Definition result = patternMatcher.createDefinition(\"testDefOne.messageTwo\");\r\n    assertNotNull(result);\r\n    assertEquals(\"testDefOne.messageTwo\", result.getName());\r\n    assertEquals(\"/testOne.jsp\", result.getTemplateAttribute().getValue());\r\n    assertEquals(\"messageTwo\", result.getAttribute(\"body\").getValue());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\plugins\\tiles\\src\\test\\java\\org\\apache\\tiles\\core\\definition\\pattern\\wildcard\\WildcardDefinitionPatternMatcherFactoryTest.java",
  "methodName" : "testCreateDefinitionPatternMatcher",
  "sourceCode" : "@Test\r\npublic void testCreateDefinitionPatternMatcher() {\r\n    assertTrue(factory.createDefinitionPatternMatcher(\"myPattern\", new Definition()) instanceof WildcardDefinitionPatternMatcher);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\plugins\\tiles\\src\\test\\java\\org\\apache\\tiles\\core\\definition\\pattern\\wildcard\\WildcardDefinitionPatternMatcherFactoryTest.java",
  "methodName" : "testIsPatternRecognized",
  "sourceCode" : "/**\r\n * Test method for {@link WildcardDefinitionPatternMatcherFactory#isPatternRecognized(String)}.\r\n */\r\n@Test\r\npublic void testIsPatternRecognized() {\r\n    assertTrue(factory.isPatternRecognized(\"my*pattern\"));\r\n    assertFalse(factory.isPatternRecognized(\"mypattern\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\plugins\\tiles\\src\\test\\java\\org\\apache\\tiles\\core\\definition\\pattern\\wildcard\\WildcardDefinitionPatternMatcherTest.java",
  "methodName" : "testResolveDefinition",
  "sourceCode" : "/**\r\n * Test method for {@link WildcardDefinitionPatternMatcher#createDefinition(String)}.\r\n */\r\n@Test\r\npublic void testResolveDefinition() {\r\n    Definition def = new Definition();\r\n    def.setName(\"testDef*.message*\");\r\n    def.setTemplateAttribute(Attribute.createTemplateAttribute(\"/test{1}.jsp\"));\r\n    def.putAttribute(\"body\", new Attribute(\"message{2}\"));\r\n    DefinitionPatternMatcher patternMatcher = new WildcardDefinitionPatternMatcher(\"testDef*.message*\", def, new WildcardHelper());\r\n    Definition result = patternMatcher.createDefinition(\"testDefOne.messageTwo\");\r\n    assertNotNull(result);\r\n    assertEquals(\"testDefOne.messageTwo\", result.getName());\r\n    assertEquals(\"/testOne.jsp\", result.getTemplateAttribute().getValue());\r\n    assertEquals(\"messageTwo\", result.getAttribute(\"body\").getValue());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\plugins\\tiles\\src\\test\\java\\org\\apache\\tiles\\core\\definition\\UnresolvingLocaleDefinitionsFactoryTest.java",
  "methodName" : "testGetDefinition",
  "sourceCode" : "/**\r\n * Test method for {@link UnresolvingLocaleDefinitionsFactory#getDefinition(String, Request)}.\r\n */\r\n@Test\r\npublic void testGetDefinition() {\r\n    DefinitionDAO<Locale> dao = createMock(DefinitionDAO.class);\r\n    LocaleResolver localeResolver = createMock(LocaleResolver.class);\r\n    UnresolvingLocaleDefinitionsFactory factory = new UnresolvingLocaleDefinitionsFactory();\r\n    Request request = createMock(Request.class);\r\n    Definition definition = createMock(Definition.class);\r\n    Locale locale = Locale.ITALY;\r\n    expect(localeResolver.resolveLocale(request)).andReturn(locale);\r\n    expect(dao.getDefinition(\"myDefinition\", locale)).andReturn(definition);\r\n    replay(dao, localeResolver, request, definition);\r\n    factory.setDefinitionDAO(dao);\r\n    factory.setLocaleResolver(localeResolver);\r\n    assertEquals(definition, factory.getDefinition(\"myDefinition\", request));\r\n    verify(dao, localeResolver, request, definition);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\plugins\\tiles\\src\\test\\java\\org\\apache\\tiles\\core\\evaluator\\BasicAttributeEvaluatorFactoryTest.java",
  "methodName" : "testGetAttributeEvaluatorString",
  "sourceCode" : "/**\r\n * Test method for {@link BasicAttributeEvaluatorFactory#getAttributeEvaluator(String)}.\r\n */\r\n@Test\r\npublic void testGetAttributeEvaluatorString() {\r\n    AttributeEvaluator defaultEvaluator = createMock(AttributeEvaluator.class);\r\n    AttributeEvaluator evaluator1 = createMock(AttributeEvaluator.class);\r\n    AttributeEvaluator evaluator2 = createMock(AttributeEvaluator.class);\r\n    replay(defaultEvaluator, evaluator1, evaluator2);\r\n    BasicAttributeEvaluatorFactory factory = new BasicAttributeEvaluatorFactory(defaultEvaluator);\r\n    factory.registerAttributeEvaluator(\"LANG1\", evaluator1);\r\n    factory.registerAttributeEvaluator(\"LANG2\", evaluator2);\r\n    assertSame(evaluator1, factory.getAttributeEvaluator(\"LANG1\"));\r\n    assertSame(evaluator2, factory.getAttributeEvaluator(\"LANG2\"));\r\n    assertSame(defaultEvaluator, factory.getAttributeEvaluator(\"LANG3\"));\r\n    verify(defaultEvaluator, evaluator1, evaluator2);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\plugins\\tiles\\src\\test\\java\\org\\apache\\tiles\\core\\evaluator\\BasicAttributeEvaluatorFactoryTest.java",
  "methodName" : "testGetAttributeEvaluatorAttribute",
  "sourceCode" : "/**\r\n * Test method for {@link BasicAttributeEvaluatorFactory#getAttributeEvaluator(Attribute)}.\r\n */\r\n@Test\r\npublic void testGetAttributeEvaluatorAttribute() {\r\n    AttributeEvaluator defaultEvaluator = createMock(AttributeEvaluator.class);\r\n    AttributeEvaluator evaluator1 = createMock(AttributeEvaluator.class);\r\n    AttributeEvaluator evaluator2 = createMock(AttributeEvaluator.class);\r\n    replay(defaultEvaluator, evaluator1, evaluator2);\r\n    BasicAttributeEvaluatorFactory factory = new BasicAttributeEvaluatorFactory(defaultEvaluator);\r\n    factory.registerAttributeEvaluator(\"LANG1\", evaluator1);\r\n    factory.registerAttributeEvaluator(\"LANG2\", evaluator2);\r\n    assertSame(evaluator1, factory.getAttributeEvaluator(createExpressionAttribute(\"LANG1\")));\r\n    assertSame(evaluator2, factory.getAttributeEvaluator(createExpressionAttribute(\"LANG2\")));\r\n    assertSame(defaultEvaluator, factory.getAttributeEvaluator(createExpressionAttribute(\"LANG3\")));\r\n    verify(defaultEvaluator, evaluator1, evaluator2);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\plugins\\tiles\\src\\test\\java\\org\\apache\\tiles\\core\\evaluator\\EvaluatorExceptionTest.java",
  "methodName" : "testEvaluationExceptionThrowable",
  "sourceCode" : "/**\r\n * Test method for {@link EvaluationException#EvaluationException(Throwable)}.\r\n */\r\n@Test\r\npublic void testEvaluationExceptionThrowable() {\r\n    Throwable cause = new Throwable();\r\n    EvaluationException exception = new EvaluationException(cause);\r\n    assertEquals(cause.toString(), exception.getMessage());\r\n    assertEquals(cause, exception.getCause());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\plugins\\tiles\\src\\test\\java\\org\\apache\\tiles\\core\\evaluator\\EvaluatorExceptionTest.java",
  "methodName" : "testEvaluationExceptionStringThrowable",
  "sourceCode" : "/**\r\n * Test method for {@link EvaluationException#EvaluationException(String, Throwable)}.\r\n */\r\n@Test\r\npublic void testEvaluationExceptionStringThrowable() {\r\n    Throwable cause = new Throwable();\r\n    EvaluationException exception = new EvaluationException(\"my message\", cause);\r\n    assertEquals(\"my message\", exception.getMessage());\r\n    assertEquals(cause, exception.getCause());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\plugins\\tiles\\src\\test\\java\\org\\apache\\tiles\\core\\evaluator\\impl\\DirectAttributeEvaluatorTest.java",
  "methodName" : "testEvaluate",
  "sourceCode" : "/**\r\n * Tests\r\n * {@link DirectAttributeEvaluator#evaluate(Attribute, org.apache.tiles.request.Request)}.\r\n */\r\n@Test\r\npublic void testEvaluate() {\r\n    String expression = \"This is an expression\";\r\n    Attribute attribute = new Attribute(null, Expression.createExpression(expression, null), null, null);\r\n    Object result = evaluator.evaluate(attribute, null);\r\n    assertEquals(\"The expression has not been evaluated correctly\", result, expression);\r\n    expression = \"${attributeName}\";\r\n    attribute.setExpressionObject(new Expression(expression));\r\n    result = evaluator.evaluate(attribute, null);\r\n    assertEquals(\"The expression has not been evaluated correctly\", result, expression);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\plugins\\tiles\\src\\test\\java\\org\\apache\\tiles\\core\\evaluator\\impl\\DirectAttributeEvaluatorTest.java",
  "methodName" : "testEvaluateNullAttribute",
  "sourceCode" : "/**\r\n * Tests\r\n * {@link DirectAttributeEvaluator#evaluate(Attribute, org.apache.tiles.request.Request)}.\r\n */\r\n@Test(expected = IllegalArgumentException.class)\r\npublic void testEvaluateNullAttribute() {\r\n    evaluator.evaluate((Attribute) null, null);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\plugins\\tiles\\src\\test\\java\\org\\apache\\tiles\\core\\evaluator\\impl\\DirectAttributeEvaluatorTest.java",
  "methodName" : "testEvaluateString",
  "sourceCode" : "/**\r\n * Tests\r\n * {@link DirectAttributeEvaluator#evaluate(String, org.apache.tiles.request.Request)}.\r\n */\r\n@Test\r\npublic void testEvaluateString() {\r\n    String expression = \"This is an expression\";\r\n    Object result = evaluator.evaluate(expression, null);\r\n    assertEquals(\"The expression has not been evaluated correctly\", result, expression);\r\n    expression = \"${attributeName}\";\r\n    result = evaluator.evaluate(expression, null);\r\n    assertEquals(\"The expression has not been evaluated correctly\", result, expression);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\plugins\\tiles\\src\\test\\java\\org\\apache\\tiles\\core\\factory\\NoSuchPreparerExceptionTest.java",
  "methodName" : "testNoSuchPreparerExceptionString",
  "sourceCode" : "/**\r\n * Test method for {@link NoSuchPreparerException#NoSuchPreparerException(String)}.\r\n */\r\n@Test\r\npublic void testNoSuchPreparerExceptionString() {\r\n    NoSuchPreparerException exception = new NoSuchPreparerException(\"my message\");\r\n    assertEquals(\"my message\", exception.getMessage());\r\n    assertNull(exception.getCause());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\plugins\\tiles\\src\\test\\java\\org\\apache\\tiles\\core\\factory\\TilesContainerFactoryExceptionTest.java",
  "methodName" : "testTilesContainerFactoryExceptionStringThrowable",
  "sourceCode" : "/**\r\n * Test method for {@link TilesContainerFactoryException#TilesContainerFactoryException(String, Throwable)}.\r\n */\r\n@Test\r\npublic void testTilesContainerFactoryExceptionStringThrowable() {\r\n    Throwable cause = new Throwable();\r\n    TilesContainerFactoryException exception = new TilesContainerFactoryException(\"my message\", cause);\r\n    assertEquals(\"my message\", exception.getMessage());\r\n    assertEquals(cause, exception.getCause());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\plugins\\tiles\\src\\test\\java\\org\\apache\\tiles\\core\\impl\\BasicTilesContainerUnitTest.java",
  "methodName" : "testStartContext",
  "sourceCode" : "/**\r\n * Test method for {@link BasicTilesContainer#startContext(Request)}.\r\n */\r\n@Test\r\npublic void testStartContext() {\r\n    Request request = createMock(Request.class);\r\n    Map<String, Object> requestScope = createMock(Map.class);\r\n    Deque<AttributeContext> deque = createMock(Deque.class);\r\n    AttributeContext attributeContext = createMock(AttributeContext.class);\r\n    expect(request.getContext(\"request\")).andReturn(requestScope);\r\n    expect(requestScope.get(ATTRIBUTE_CONTEXT_STACK)).andReturn(deque);\r\n    expect(deque.isEmpty()).andReturn(false);\r\n    expect(deque.peek()).andReturn(attributeContext);\r\n    expect(attributeContext.getCascadedAttributeNames()).andReturn(null);\r\n    deque.push(isA(BasicAttributeContext.class));\r\n    replay(applicationContext, attributeEvaluatorFactory, definitionsFactory, preparerFactory, rendererFactory, request, requestScope, deque, attributeContext);\r\n    assertTrue(container.startContext(request) instanceof BasicAttributeContext);\r\n    verify(applicationContext, attributeEvaluatorFactory, definitionsFactory, preparerFactory, rendererFactory, request, requestScope, deque, attributeContext);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\plugins\\tiles\\src\\test\\java\\org\\apache\\tiles\\core\\impl\\BasicTilesContainerUnitTest.java",
  "methodName" : "testEndContext",
  "sourceCode" : "/**\r\n * Test method for {@link BasicTilesContainer#endContext(Request)}.\r\n */\r\n@Test\r\npublic void testEndContext() {\r\n    Request request = createMock(Request.class);\r\n    Map<String, Object> requestScope = createMock(Map.class);\r\n    Deque<AttributeContext> deque = createMock(Deque.class);\r\n    AttributeContext attributeContext = createMock(AttributeContext.class);\r\n    expect(request.getContext(\"request\")).andReturn(requestScope);\r\n    expect(requestScope.get(ATTRIBUTE_CONTEXT_STACK)).andReturn(deque);\r\n    expect(deque.pop()).andReturn(attributeContext);\r\n    replay(applicationContext, attributeEvaluatorFactory, definitionsFactory, preparerFactory, rendererFactory, request, requestScope, deque, attributeContext);\r\n    container.endContext(request);\r\n    verify(applicationContext, attributeEvaluatorFactory, definitionsFactory, preparerFactory, rendererFactory, request, requestScope, deque, attributeContext);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\plugins\\tiles\\src\\test\\java\\org\\apache\\tiles\\core\\impl\\BasicTilesContainerUnitTest.java",
  "methodName" : "testRenderContext",
  "sourceCode" : "/**\r\n * Test method for {@link BasicTilesContainer#renderContext(Request)}.\r\n *\r\n * @throws IOException If something goes wrong.\r\n */\r\n@Test\r\npublic void testRenderContext() throws IOException {\r\n    Request request = createMock(Request.class);\r\n    Map<String, Object> requestScope = createMock(Map.class);\r\n    Deque<AttributeContext> deque = createMock(Deque.class);\r\n    AttributeContext attributeContext = createMock(AttributeContext.class);\r\n    ViewPreparer preparer = createMock(ViewPreparer.class);\r\n    Attribute templateAttribute = createMock(Attribute.class);\r\n    Renderer renderer = createMock(Renderer.class);\r\n    AttributeEvaluator evaluator = createMock(AttributeEvaluator.class);\r\n    expect(request.getContext(\"request\")).andReturn(requestScope);\r\n    expect(requestScope.get(ATTRIBUTE_CONTEXT_STACK)).andReturn(deque);\r\n    expect(deque.isEmpty()).andReturn(false);\r\n    expect(deque.peek()).andReturn(attributeContext);\r\n    expect(attributeContext.getPreparer()).andReturn(null);\r\n    expect(attributeContext.getTemplateAttribute()).andReturn(templateAttribute);\r\n    expect(templateAttribute.getRenderer()).andReturn(\"renderer\");\r\n    expect(rendererFactory.getRenderer(\"renderer\")).andReturn(renderer);\r\n    expect(attributeEvaluatorFactory.getAttributeEvaluator(templateAttribute)).andReturn(evaluator);\r\n    expect(evaluator.evaluate(templateAttribute, request)).andReturn(\"/mytemplate.jsp\");\r\n    expect(templateAttribute.isPermitted(request)).andReturn(true);\r\n    renderer.render(\"/mytemplate.jsp\", request);\r\n    replay(applicationContext, attributeEvaluatorFactory, evaluator, definitionsFactory, preparerFactory, rendererFactory, request, requestScope, deque, attributeContext, preparer, templateAttribute, renderer);\r\n    container.renderContext(request);\r\n    verify(applicationContext, attributeEvaluatorFactory, evaluator, definitionsFactory, preparerFactory, rendererFactory, request, requestScope, deque, attributeContext, preparer, templateAttribute, renderer);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\plugins\\tiles\\src\\test\\java\\org\\apache\\tiles\\core\\impl\\BasicTilesContainerUnitTest.java",
  "methodName" : "testGetApplicationContext",
  "sourceCode" : "/**\r\n * Test method for {@link BasicTilesContainer#getApplicationContext()}.\r\n */\r\n@Test\r\npublic void testGetApplicationContext() {\r\n    replay(applicationContext, attributeEvaluatorFactory, definitionsFactory, preparerFactory, rendererFactory);\r\n    assertEquals(applicationContext, container.getApplicationContext());\r\n    verify(applicationContext, attributeEvaluatorFactory, definitionsFactory, preparerFactory, rendererFactory);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\plugins\\tiles\\src\\test\\java\\org\\apache\\tiles\\core\\impl\\BasicTilesContainerUnitTest.java",
  "methodName" : "testGetAttributeContext",
  "sourceCode" : "/**\r\n * Test method for {@link BasicTilesContainer#getAttributeContext(Request)}.\r\n */\r\n@Test\r\npublic void testGetAttributeContext() {\r\n    Request request = createMock(Request.class);\r\n    Map<String, Object> requestScope = createMock(Map.class);\r\n    Deque<AttributeContext> deque = createMock(Deque.class);\r\n    AttributeContext attributeContext = createMock(AttributeContext.class);\r\n    expect(request.getContext(\"request\")).andReturn(requestScope);\r\n    expect(requestScope.get(ATTRIBUTE_CONTEXT_STACK)).andReturn(deque);\r\n    expect(deque.isEmpty()).andReturn(false);\r\n    expect(deque.peek()).andReturn(attributeContext);\r\n    replay(applicationContext, attributeEvaluatorFactory, definitionsFactory, preparerFactory, rendererFactory, request, requestScope, deque, attributeContext);\r\n    assertEquals(attributeContext, container.getAttributeContext(request));\r\n    verify(applicationContext, attributeEvaluatorFactory, definitionsFactory, preparerFactory, rendererFactory, request, requestScope, deque, attributeContext);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\plugins\\tiles\\src\\test\\java\\org\\apache\\tiles\\core\\impl\\BasicTilesContainerUnitTest.java",
  "methodName" : "testGetAttributeContextNew",
  "sourceCode" : "/**\r\n * Test method for {@link BasicTilesContainer#getAttributeContext(Request)}.\r\n */\r\n@Test\r\npublic void testGetAttributeContextNew() {\r\n    Request request = createMock(Request.class);\r\n    Map<String, Object> requestScope = createMock(Map.class);\r\n    Deque<AttributeContext> deque = createMock(Deque.class);\r\n    AttributeContext attributeContext = createMock(AttributeContext.class);\r\n    expect(request.getContext(\"request\")).andReturn(requestScope).times(2);\r\n    expect(requestScope.get(ATTRIBUTE_CONTEXT_STACK)).andReturn(deque).times(2);\r\n    expect(deque.isEmpty()).andReturn(true);\r\n    deque.push(isA(BasicAttributeContext.class));\r\n    replay(applicationContext, attributeEvaluatorFactory, definitionsFactory, preparerFactory, rendererFactory, request, requestScope, deque, attributeContext);\r\n    assertTrue(container.getAttributeContext(request) instanceof BasicAttributeContext);\r\n    verify(applicationContext, attributeEvaluatorFactory, definitionsFactory, preparerFactory, rendererFactory, request, requestScope, deque, attributeContext);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\plugins\\tiles\\src\\test\\java\\org\\apache\\tiles\\core\\impl\\BasicTilesContainerUnitTest.java",
  "methodName" : "testPrepare",
  "sourceCode" : "/**\r\n * Test method for {@link BasicTilesContainer#prepare(String, Request)}.\r\n */\r\n@Test\r\npublic void testPrepare() {\r\n    Request request = createMock(Request.class);\r\n    Map<String, Object> requestScope = createMock(Map.class);\r\n    Deque<AttributeContext> deque = createMock(Deque.class);\r\n    AttributeContext attributeContext = createMock(AttributeContext.class);\r\n    ViewPreparer preparer = createMock(ViewPreparer.class);\r\n    expect(preparerFactory.getPreparer(\"preparer\", request)).andReturn(preparer);\r\n    expect(request.getContext(\"request\")).andReturn(requestScope);\r\n    expect(requestScope.get(ATTRIBUTE_CONTEXT_STACK)).andReturn(deque);\r\n    expect(deque.isEmpty()).andReturn(false);\r\n    expect(deque.peek()).andReturn(attributeContext);\r\n    preparer.execute(request, attributeContext);\r\n    replay(applicationContext, attributeEvaluatorFactory, definitionsFactory, preparerFactory, rendererFactory, request, requestScope, deque, attributeContext, preparer);\r\n    container.prepare(\"preparer\", request);\r\n    verify(applicationContext, attributeEvaluatorFactory, definitionsFactory, preparerFactory, rendererFactory, request, requestScope, deque, attributeContext, preparer);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\plugins\\tiles\\src\\test\\java\\org\\apache\\tiles\\core\\impl\\BasicTilesContainerUnitTest.java",
  "methodName" : "testPrepareException",
  "sourceCode" : "/**\r\n * Test method for {@link BasicTilesContainer#prepare(String, Request)}.\r\n */\r\n@Test(expected = NoSuchPreparerException.class)\r\npublic void testPrepareException() {\r\n    Request request = createMock(Request.class);\r\n    Map<String, Object> requestScope = createMock(Map.class);\r\n    Deque<AttributeContext> deque = createMock(Deque.class);\r\n    AttributeContext attributeContext = createMock(AttributeContext.class);\r\n    expect(preparerFactory.getPreparer(\"preparer\", request)).andReturn(null);\r\n    replay(applicationContext, attributeEvaluatorFactory, definitionsFactory, preparerFactory, rendererFactory, request, requestScope, deque, attributeContext);\r\n    try {\r\n        container.prepare(\"preparer\", request);\r\n    } finally {\r\n        verify(applicationContext, attributeEvaluatorFactory, definitionsFactory, preparerFactory, rendererFactory, request, requestScope, deque, attributeContext);\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\plugins\\tiles\\src\\test\\java\\org\\apache\\tiles\\core\\impl\\BasicTilesContainerUnitTest.java",
  "methodName" : "testRenderStringRequest",
  "sourceCode" : "@Test\r\npublic void testRenderStringRequest() throws IOException {\r\n    Request request = createMock(Request.class);\r\n    Map<String, Object> requestScope = createMock(Map.class);\r\n    Deque<AttributeContext> deque = createMock(Deque.class);\r\n    AttributeContext attributeContext = createMock(AttributeContext.class);\r\n    ViewPreparer preparer = createMock(ViewPreparer.class);\r\n    Renderer renderer = createMock(Renderer.class);\r\n    Definition definition = createMock(Definition.class);\r\n    AttributeEvaluator evaluator = createMock(AttributeEvaluator.class);\r\n    Attribute templateAttribute = Attribute.createTemplateAttribute(\"/my/template.jsp\");\r\n    expect(definitionsFactory.getDefinition(\"definition\", request)).andReturn(definition);\r\n    expect(request.getContext(\"request\")).andReturn(requestScope).times(3);\r\n    expect(requestScope.get(ATTRIBUTE_CONTEXT_STACK)).andReturn(deque).times(3);\r\n    expect(deque.isEmpty()).andReturn(false);\r\n    expect(deque.peek()).andReturn(attributeContext);\r\n    expect(attributeContext.getPreparer()).andReturn(null);\r\n    expect(attributeContext.getTemplateAttribute()).andReturn(templateAttribute);\r\n    expect(attributeContext.getLocalAttributeNames()).andReturn(null);\r\n    expect(attributeContext.getCascadedAttributeNames()).andReturn(null);\r\n    expect(definition.getTemplateAttribute()).andReturn(templateAttribute);\r\n    expect(rendererFactory.getRenderer(\"template\")).andReturn(renderer);\r\n    deque.push(isA(BasicAttributeContext.class));\r\n    expect(attributeEvaluatorFactory.getAttributeEvaluator(templateAttribute)).andReturn(evaluator);\r\n    expect(evaluator.evaluate(templateAttribute, request)).andReturn(\"/my/template.jsp\");\r\n    renderer.render(\"/my/template.jsp\", request);\r\n    expect(deque.pop()).andReturn(null);\r\n    replay(applicationContext, attributeEvaluatorFactory, evaluator, definitionsFactory, preparerFactory, rendererFactory, request, requestScope, deque, attributeContext, preparer, renderer, definition);\r\n    container.render(\"definition\", request);\r\n    verify(applicationContext, attributeEvaluatorFactory, evaluator, definitionsFactory, preparerFactory, rendererFactory, request, requestScope, deque, attributeContext, preparer, renderer, definition);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\plugins\\tiles\\src\\test\\java\\org\\apache\\tiles\\core\\impl\\BasicTilesContainerUnitTest.java",
  "methodName" : "testRenderStringRequestException",
  "sourceCode" : "@Test(expected = NoSuchDefinitionException.class)\r\npublic void testRenderStringRequestException() {\r\n    Request request = createMock(Request.class);\r\n    expect(definitionsFactory.getDefinition(\"definition\", request)).andReturn(null);\r\n    replay(applicationContext, attributeEvaluatorFactory, definitionsFactory, preparerFactory, rendererFactory, request);\r\n    try {\r\n        container.render(\"definition\", request);\r\n    } finally {\r\n        verify(applicationContext, attributeEvaluatorFactory, definitionsFactory, preparerFactory, rendererFactory);\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\plugins\\tiles\\src\\test\\java\\org\\apache\\tiles\\core\\impl\\BasicTilesContainerUnitTest.java",
  "methodName" : "testRenderAttributeRequest",
  "sourceCode" : "@Test\r\npublic void testRenderAttributeRequest() throws IOException {\r\n    Request request = createMock(Request.class);\r\n    Attribute templateAttribute = createMock(Attribute.class);\r\n    Renderer renderer = createMock(Renderer.class);\r\n    AttributeEvaluator evaluator = createMock(AttributeEvaluator.class);\r\n    expect(templateAttribute.getRenderer()).andReturn(\"renderer\");\r\n    expect(rendererFactory.getRenderer(\"renderer\")).andReturn(renderer);\r\n    expect(attributeEvaluatorFactory.getAttributeEvaluator(templateAttribute)).andReturn(evaluator);\r\n    expect(evaluator.evaluate(templateAttribute, request)).andReturn(\"/mytemplate.jsp\");\r\n    expect(templateAttribute.isPermitted(request)).andReturn(true);\r\n    renderer.render(\"/mytemplate.jsp\", request);\r\n    replay(applicationContext, attributeEvaluatorFactory, evaluator, definitionsFactory, preparerFactory, rendererFactory, request, templateAttribute, renderer);\r\n    container.render(templateAttribute, request);\r\n    verify(applicationContext, attributeEvaluatorFactory, evaluator, definitionsFactory, preparerFactory, rendererFactory, request, templateAttribute, renderer);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\plugins\\tiles\\src\\test\\java\\org\\apache\\tiles\\core\\impl\\BasicTilesContainerUnitTest.java",
  "methodName" : "testRenderAttributeRequestException1",
  "sourceCode" : "@Test(expected = CannotRenderException.class)\r\npublic void testRenderAttributeRequestException1() throws IOException {\r\n    Request request = createMock(Request.class);\r\n    replay(applicationContext, attributeEvaluatorFactory, definitionsFactory, preparerFactory, rendererFactory, request);\r\n    try {\r\n        container.render((Attribute) null, request);\r\n    } finally {\r\n        verify(applicationContext, attributeEvaluatorFactory, definitionsFactory, preparerFactory, rendererFactory, request);\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\plugins\\tiles\\src\\test\\java\\org\\apache\\tiles\\core\\impl\\BasicTilesContainerUnitTest.java",
  "methodName" : "testRenderAttributeRequestException2",
  "sourceCode" : "@Test(expected = NoSuchRendererException.class)\r\npublic void testRenderAttributeRequestException2() throws IOException {\r\n    Request request = createMock(Request.class);\r\n    Attribute templateAttribute = createMock(Attribute.class);\r\n    AttributeEvaluator evaluator = createMock(AttributeEvaluator.class);\r\n    expect(templateAttribute.getRenderer()).andReturn(\"renderer\");\r\n    expect(templateAttribute.isPermitted(request)).andReturn(true);\r\n    expect(rendererFactory.getRenderer(\"renderer\")).andThrow(new NoSuchRendererException(\"Boom!\"));\r\n    replay(applicationContext, attributeEvaluatorFactory, evaluator, definitionsFactory, preparerFactory, rendererFactory, request, templateAttribute);\r\n    try {\r\n        container.render(templateAttribute, request);\r\n    } finally {\r\n        verify(applicationContext, attributeEvaluatorFactory, evaluator, definitionsFactory, preparerFactory, rendererFactory, request, templateAttribute);\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\plugins\\tiles\\src\\test\\java\\org\\apache\\tiles\\core\\impl\\BasicTilesContainerUnitTest.java",
  "methodName" : "testRenderAttributeRequestException3",
  "sourceCode" : "@Test(expected = CannotRenderException.class)\r\npublic void testRenderAttributeRequestException3() throws IOException {\r\n    Request request = createMock(Request.class);\r\n    Attribute templateAttribute = createMock(Attribute.class);\r\n    AttributeEvaluator evaluator = createMock(AttributeEvaluator.class);\r\n    Renderer renderer = createMock(Renderer.class);\r\n    expect(templateAttribute.getRenderer()).andReturn(\"renderer\");\r\n    expect(templateAttribute.isPermitted(request)).andReturn(true);\r\n    expect(rendererFactory.getRenderer(\"renderer\")).andReturn(renderer);\r\n    expect(attributeEvaluatorFactory.getAttributeEvaluator(templateAttribute)).andReturn(evaluator);\r\n    expect(evaluator.evaluate(templateAttribute, request)).andReturn(1);\r\n    replay(applicationContext, attributeEvaluatorFactory, evaluator, definitionsFactory, preparerFactory, rendererFactory, request, templateAttribute);\r\n    try {\r\n        container.render(templateAttribute, request);\r\n    } finally {\r\n        verify(applicationContext, attributeEvaluatorFactory, evaluator, definitionsFactory, preparerFactory, rendererFactory, request, templateAttribute);\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\plugins\\tiles\\src\\test\\java\\org\\apache\\tiles\\core\\impl\\BasicTilesContainerUnitTest.java",
  "methodName" : "testRenderAttributeRequestException",
  "sourceCode" : "@Test(expected = NoSuchRendererException.class)\r\npublic void testRenderAttributeRequestException() throws IOException {\r\n    Request request = createMock(Request.class);\r\n    Attribute templateAttribute = createMock(Attribute.class);\r\n    AttributeEvaluator evaluator = createMock(AttributeEvaluator.class);\r\n    expect(templateAttribute.getRenderer()).andReturn(\"renderer\");\r\n    expect(templateAttribute.isPermitted(request)).andReturn(true);\r\n    expect(rendererFactory.getRenderer(\"renderer\")).andThrow(new NoSuchRendererException(\"Boom!\"));\r\n    replay(applicationContext, attributeEvaluatorFactory, evaluator, definitionsFactory, preparerFactory, rendererFactory, request, templateAttribute);\r\n    try {\r\n        container.render(templateAttribute, request);\r\n    } finally {\r\n        verify(applicationContext, attributeEvaluatorFactory, evaluator, definitionsFactory, preparerFactory, rendererFactory, request, templateAttribute);\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\plugins\\tiles\\src\\test\\java\\org\\apache\\tiles\\core\\impl\\BasicTilesContainerUnitTest.java",
  "methodName" : "testEvaluate",
  "sourceCode" : "@Test\r\npublic void testEvaluate() {\r\n    Request request = createMock(Request.class);\r\n    AttributeEvaluator evaluator = createMock(AttributeEvaluator.class);\r\n    Attribute templateAttribute = createMock(Attribute.class);\r\n    expect(attributeEvaluatorFactory.getAttributeEvaluator(templateAttribute)).andReturn(evaluator);\r\n    expect(evaluator.evaluate(templateAttribute, request)).andReturn(1);\r\n    replay(applicationContext, attributeEvaluatorFactory, definitionsFactory, preparerFactory, rendererFactory, request, templateAttribute, evaluator);\r\n    assertEquals(1, container.evaluate(templateAttribute, request));\r\n    verify(applicationContext, attributeEvaluatorFactory, definitionsFactory, preparerFactory, rendererFactory, request, templateAttribute, evaluator);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\plugins\\tiles\\src\\test\\java\\org\\apache\\tiles\\core\\impl\\BasicTilesContainerUnitTest.java",
  "methodName" : "testIsValidDefinition",
  "sourceCode" : "/**\r\n * Test method for {@link BasicTilesContainer#isValidDefinition(String, Request)}.\r\n */\r\n@Test\r\npublic void testIsValidDefinition() {\r\n    Request request = createMock(Request.class);\r\n    Definition definition = createMock(Definition.class);\r\n    expect(definitionsFactory.getDefinition(\"definition\", request)).andReturn(definition);\r\n    replay(applicationContext, attributeEvaluatorFactory, definitionsFactory, preparerFactory, rendererFactory, request, definition);\r\n    assertTrue(container.isValidDefinition(\"definition\", request));\r\n    verify(applicationContext, attributeEvaluatorFactory, definitionsFactory, preparerFactory, rendererFactory, request, definition);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\plugins\\tiles\\src\\test\\java\\org\\apache\\tiles\\core\\impl\\BasicTilesContainerUnitTest.java",
  "methodName" : "testIsValidDefinitionNull",
  "sourceCode" : "/**\r\n * Test method for {@link BasicTilesContainer#isValidDefinition(String, Request)}.\r\n */\r\n@Test\r\npublic void testIsValidDefinitionNull() {\r\n    Request request = createMock(Request.class);\r\n    expect(definitionsFactory.getDefinition(\"definition\", request)).andReturn(null);\r\n    replay(applicationContext, attributeEvaluatorFactory, definitionsFactory, preparerFactory, rendererFactory, request);\r\n    assertFalse(container.isValidDefinition(\"definition\", request));\r\n    verify(applicationContext, attributeEvaluatorFactory, definitionsFactory, preparerFactory, rendererFactory, request);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\plugins\\tiles\\src\\test\\java\\org\\apache\\tiles\\core\\impl\\BasicTilesContainerUnitTest.java",
  "methodName" : "testIsValidDefinitionException",
  "sourceCode" : "/**\r\n * Test method for {@link BasicTilesContainer#isValidDefinition(String, Request)}.\r\n */\r\n@Test\r\npublic void testIsValidDefinitionException() {\r\n    Request request = createMock(Request.class);\r\n    expect(definitionsFactory.getDefinition(\"definition\", request)).andThrow(new NoSuchDefinitionException(\"Boom!\"));\r\n    replay(applicationContext, attributeEvaluatorFactory, definitionsFactory, preparerFactory, rendererFactory, request);\r\n    assertFalse(container.isValidDefinition(\"definition\", request));\r\n    verify(applicationContext, attributeEvaluatorFactory, definitionsFactory, preparerFactory, rendererFactory, request);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\plugins\\tiles\\src\\test\\java\\org\\apache\\tiles\\core\\impl\\BasicTilesContainerUnitTest.java",
  "methodName" : "testGetDefinition",
  "sourceCode" : "/**\r\n * Test method for {@link BasicTilesContainer#getDefinition(String, Request)}.\r\n */\r\n@Test\r\npublic void testGetDefinition() {\r\n    Request request = createMock(Request.class);\r\n    Definition definition = createMock(Definition.class);\r\n    expect(definitionsFactory.getDefinition(\"definition\", request)).andReturn(definition);\r\n    replay(applicationContext, attributeEvaluatorFactory, definitionsFactory, preparerFactory, rendererFactory, request, definition);\r\n    assertEquals(definition, container.getDefinition(\"definition\", request));\r\n    verify(applicationContext, attributeEvaluatorFactory, definitionsFactory, preparerFactory, rendererFactory, request, definition);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\plugins\\tiles\\src\\test\\java\\org\\apache\\tiles\\core\\impl\\BasicTilesContainerUnitTest.java",
  "methodName" : "testGetContextStack",
  "sourceCode" : "/**\r\n * Test method for {@link BasicTilesContainer#getContextStack(Request)}.\r\n */\r\n@Test\r\npublic void testGetContextStack() {\r\n    Request request = createMock(Request.class);\r\n    Map<String, Object> requestScope = createMock(Map.class);\r\n    Deque<AttributeContext> deque = createMock(Deque.class);\r\n    expect(request.getContext(\"request\")).andReturn(requestScope);\r\n    expect(requestScope.get(ATTRIBUTE_CONTEXT_STACK)).andReturn(deque);\r\n    replay(applicationContext, attributeEvaluatorFactory, definitionsFactory, preparerFactory, rendererFactory, request, requestScope, deque);\r\n    assertEquals(deque, container.getContextStack(request));\r\n    verify(applicationContext, attributeEvaluatorFactory, definitionsFactory, preparerFactory, rendererFactory, request, requestScope, deque);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\plugins\\tiles\\src\\test\\java\\org\\apache\\tiles\\core\\impl\\BasicTilesContainerUnitTest.java",
  "methodName" : "testGetContextStackNew",
  "sourceCode" : "/**\r\n * Test method for {@link BasicTilesContainer#getContextStack(Request)}.\r\n */\r\n@Test\r\npublic void testGetContextStackNew() {\r\n    Request request = createMock(Request.class);\r\n    Map<String, Object> requestScope = createMock(Map.class);\r\n    expect(request.getContext(\"request\")).andReturn(requestScope);\r\n    expect(requestScope.get(ATTRIBUTE_CONTEXT_STACK)).andReturn(null);\r\n    expect(requestScope.put(eq(ATTRIBUTE_CONTEXT_STACK), isA(LinkedList.class))).andReturn(null);\r\n    replay(applicationContext, attributeEvaluatorFactory, definitionsFactory, preparerFactory, rendererFactory, request, requestScope);\r\n    assertTrue(container.getContextStack(request) instanceof LinkedList);\r\n    verify(applicationContext, attributeEvaluatorFactory, definitionsFactory, preparerFactory, rendererFactory, request, requestScope);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\plugins\\tiles\\src\\test\\java\\org\\apache\\tiles\\core\\impl\\BasicTilesContainerUnitTest.java",
  "methodName" : "testPushContext",
  "sourceCode" : "@Test\r\npublic void testPushContext() {\r\n    Request request = createMock(Request.class);\r\n    Map<String, Object> requestScope = createMock(Map.class);\r\n    Deque<AttributeContext> deque = createMock(Deque.class);\r\n    AttributeContext attributeContext = createMock(AttributeContext.class);\r\n    expect(request.getContext(\"request\")).andReturn(requestScope);\r\n    expect(requestScope.get(ATTRIBUTE_CONTEXT_STACK)).andReturn(deque);\r\n    deque.push(attributeContext);\r\n    replay(applicationContext, attributeEvaluatorFactory, definitionsFactory, preparerFactory, rendererFactory, request, requestScope, deque, attributeContext);\r\n    container.pushContext(attributeContext, request);\r\n    verify(applicationContext, attributeEvaluatorFactory, definitionsFactory, preparerFactory, rendererFactory, request, requestScope, deque, attributeContext);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\plugins\\tiles\\src\\test\\java\\org\\apache\\tiles\\core\\impl\\BasicTilesContainerUnitTest.java",
  "methodName" : "testPopContext",
  "sourceCode" : "/**\r\n * Test method for {@link BasicTilesContainer#popContext(Request)}.\r\n */\r\n@Test\r\npublic void testPopContext() {\r\n    Request request = createMock(Request.class);\r\n    Map<String, Object> requestScope = createMock(Map.class);\r\n    Deque<AttributeContext> deque = createMock(Deque.class);\r\n    AttributeContext attributeContext = createMock(AttributeContext.class);\r\n    expect(request.getContext(\"request\")).andReturn(requestScope);\r\n    expect(requestScope.get(ATTRIBUTE_CONTEXT_STACK)).andReturn(deque);\r\n    expect(deque.pop()).andReturn(attributeContext);\r\n    replay(applicationContext, attributeEvaluatorFactory, definitionsFactory, preparerFactory, rendererFactory, request, requestScope, deque, attributeContext);\r\n    assertEquals(attributeContext, container.popContext(request));\r\n    verify(applicationContext, attributeEvaluatorFactory, definitionsFactory, preparerFactory, rendererFactory, request, requestScope, deque, attributeContext);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\plugins\\tiles\\src\\test\\java\\org\\apache\\tiles\\core\\impl\\BasicTilesContainerUnitTest.java",
  "methodName" : "testGetContext",
  "sourceCode" : "/**\r\n * Test method for {@link BasicTilesContainer#getContext(Request)}.\r\n */\r\n@Test\r\npublic void testGetContext() {\r\n    Request request = createMock(Request.class);\r\n    Map<String, Object> requestScope = createMock(Map.class);\r\n    Deque<AttributeContext> deque = createMock(Deque.class);\r\n    AttributeContext attributeContext = createMock(AttributeContext.class);\r\n    expect(request.getContext(\"request\")).andReturn(requestScope);\r\n    expect(requestScope.get(ATTRIBUTE_CONTEXT_STACK)).andReturn(deque);\r\n    expect(deque.isEmpty()).andReturn(false);\r\n    expect(deque.peek()).andReturn(attributeContext);\r\n    replay(applicationContext, attributeEvaluatorFactory, definitionsFactory, preparerFactory, rendererFactory, request, requestScope, deque, attributeContext);\r\n    assertEquals(attributeContext, container.getContext(request));\r\n    verify(applicationContext, attributeEvaluatorFactory, definitionsFactory, preparerFactory, rendererFactory, request, requestScope, deque, attributeContext);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\plugins\\tiles\\src\\test\\java\\org\\apache\\tiles\\core\\impl\\BasicTilesContainerUnitTest.java",
  "methodName" : "testGetContextNull",
  "sourceCode" : "/**\r\n * Test method for {@link BasicTilesContainer#getContext(Request)}.\r\n */\r\n@Test\r\npublic void testGetContextNull() {\r\n    Request request = createMock(Request.class);\r\n    Map<String, Object> requestScope = createMock(Map.class);\r\n    Deque<AttributeContext> deque = createMock(Deque.class);\r\n    expect(request.getContext(\"request\")).andReturn(requestScope);\r\n    expect(requestScope.get(ATTRIBUTE_CONTEXT_STACK)).andReturn(deque);\r\n    expect(deque.isEmpty()).andReturn(true);\r\n    replay(applicationContext, attributeEvaluatorFactory, definitionsFactory, preparerFactory, rendererFactory, request, requestScope, deque);\r\n    assertNull(container.getContext(request));\r\n    verify(applicationContext, attributeEvaluatorFactory, definitionsFactory, preparerFactory, rendererFactory, request, requestScope, deque);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\plugins\\tiles\\src\\test\\java\\org\\apache\\tiles\\core\\impl\\BasicTilesContainerUnitTest.java",
  "methodName" : "testRenderRequestDefinition",
  "sourceCode" : "@Test\r\npublic void testRenderRequestDefinition() throws IOException {\r\n    Request request = createMock(Request.class);\r\n    Map<String, Object> requestScope = createMock(Map.class);\r\n    Deque<AttributeContext> deque = createMock(Deque.class);\r\n    AttributeContext attributeContext = createMock(AttributeContext.class);\r\n    ViewPreparer preparer = createMock(ViewPreparer.class);\r\n    Renderer renderer = createMock(Renderer.class);\r\n    Definition definition = createMock(Definition.class);\r\n    AttributeEvaluator evaluator = createMock(AttributeEvaluator.class);\r\n    Attribute templateAttribute = Attribute.createTemplateAttribute(\"/my/template.jsp\");\r\n    expect(request.getContext(\"request\")).andReturn(requestScope).times(3);\r\n    expect(requestScope.get(ATTRIBUTE_CONTEXT_STACK)).andReturn(deque).times(3);\r\n    expect(deque.isEmpty()).andReturn(false);\r\n    expect(deque.peek()).andReturn(attributeContext);\r\n    expect(attributeContext.getPreparer()).andReturn(null);\r\n    expect(attributeContext.getTemplateAttribute()).andReturn(templateAttribute);\r\n    expect(attributeContext.getLocalAttributeNames()).andReturn(null);\r\n    expect(attributeContext.getCascadedAttributeNames()).andReturn(null);\r\n    expect(definition.getTemplateAttribute()).andReturn(templateAttribute);\r\n    expect(rendererFactory.getRenderer(\"template\")).andReturn(renderer);\r\n    deque.push(isA(BasicAttributeContext.class));\r\n    expect(attributeEvaluatorFactory.getAttributeEvaluator(templateAttribute)).andReturn(evaluator);\r\n    expect(evaluator.evaluate(templateAttribute, request)).andReturn(\"/my/template.jsp\");\r\n    renderer.render(\"/my/template.jsp\", request);\r\n    expect(deque.pop()).andReturn(null);\r\n    replay(applicationContext, attributeEvaluatorFactory, evaluator, definitionsFactory, preparerFactory, rendererFactory, request, requestScope, deque, attributeContext, preparer, renderer, definition);\r\n    container.render(definition, request);\r\n    verify(applicationContext, attributeEvaluatorFactory, evaluator, definitionsFactory, preparerFactory, rendererFactory, request, requestScope, deque, attributeContext, preparer, renderer, definition);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\plugins\\tiles\\src\\test\\java\\org\\apache\\tiles\\core\\impl\\BasicTilesContainerUnitTest.java",
  "methodName" : "testRenderRequestDefinitionException",
  "sourceCode" : "@Test(expected = CannotRenderException.class)\r\npublic void testRenderRequestDefinitionException() throws IOException {\r\n    Request request = createMock(Request.class);\r\n    Map<String, Object> requestScope = createMock(Map.class);\r\n    Deque<AttributeContext> deque = createMock(Deque.class);\r\n    AttributeContext attributeContext = createMock(AttributeContext.class);\r\n    ViewPreparer preparer = createMock(ViewPreparer.class);\r\n    Renderer renderer = createMock(Renderer.class);\r\n    Definition definition = createMock(Definition.class);\r\n    AttributeEvaluator evaluator = createMock(AttributeEvaluator.class);\r\n    Attribute templateAttribute = Attribute.createTemplateAttribute(\"/my/template.jsp\");\r\n    expect(request.getContext(\"request\")).andReturn(requestScope).times(3);\r\n    expect(requestScope.get(ATTRIBUTE_CONTEXT_STACK)).andReturn(deque).times(3);\r\n    expect(deque.isEmpty()).andReturn(false);\r\n    expect(deque.peek()).andReturn(attributeContext);\r\n    expect(attributeContext.getPreparer()).andReturn(null);\r\n    expect(attributeContext.getTemplateAttribute()).andReturn(templateAttribute);\r\n    expect(attributeContext.getLocalAttributeNames()).andReturn(null);\r\n    expect(attributeContext.getCascadedAttributeNames()).andReturn(null);\r\n    expect(definition.getTemplateAttribute()).andReturn(templateAttribute);\r\n    expect(rendererFactory.getRenderer(\"template\")).andReturn(renderer);\r\n    deque.push(isA(BasicAttributeContext.class));\r\n    expect(attributeEvaluatorFactory.getAttributeEvaluator(templateAttribute)).andReturn(evaluator);\r\n    expect(evaluator.evaluate(templateAttribute, request)).andReturn(\"/mytemplate.jsp\");\r\n    renderer.render(\"/mytemplate.jsp\", request);\r\n    expectLastCall().andThrow(new IOException());\r\n    expect(deque.pop()).andReturn(null);\r\n    replay(applicationContext, attributeEvaluatorFactory, evaluator, definitionsFactory, preparerFactory, rendererFactory, request, requestScope, deque, attributeContext, preparer, renderer, definition);\r\n    try {\r\n        container.render(definition, request);\r\n    } finally {\r\n        verify(applicationContext, attributeEvaluatorFactory, evaluator, definitionsFactory, preparerFactory, rendererFactory, request, requestScope, deque, attributeContext, preparer, renderer, definition);\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\plugins\\tiles\\src\\test\\java\\org\\apache\\tiles\\core\\impl\\BasicTilesContainerUnitTest.java",
  "methodName" : "testRenderRequestAttributeContext",
  "sourceCode" : "@Test\r\npublic void testRenderRequestAttributeContext() throws IOException {\r\n    Request request = createMock(Request.class);\r\n    Map<String, Object> requestScope = createMock(Map.class);\r\n    Deque<AttributeContext> deque = createMock(Deque.class);\r\n    AttributeContext attributeContext = createMock(AttributeContext.class);\r\n    ViewPreparer preparer = createMock(ViewPreparer.class);\r\n    Attribute templateAttribute = createMock(Attribute.class);\r\n    Renderer renderer = createMock(Renderer.class);\r\n    AttributeEvaluator evaluator = createMock(AttributeEvaluator.class);\r\n    expect(attributeContext.getPreparer()).andReturn(null);\r\n    expect(attributeContext.getTemplateAttribute()).andReturn(templateAttribute);\r\n    expect(templateAttribute.getRenderer()).andReturn(\"renderer\");\r\n    expect(rendererFactory.getRenderer(\"renderer\")).andReturn(renderer);\r\n    expect(attributeEvaluatorFactory.getAttributeEvaluator(templateAttribute)).andReturn(evaluator);\r\n    expect(evaluator.evaluate(templateAttribute, request)).andReturn(\"/mytemplate.jsp\");\r\n    expect(templateAttribute.isPermitted(request)).andReturn(true);\r\n    renderer.render(\"/mytemplate.jsp\", request);\r\n    replay(applicationContext, attributeEvaluatorFactory, evaluator, definitionsFactory, preparerFactory, rendererFactory, request, requestScope, deque, attributeContext, preparer, templateAttribute, renderer);\r\n    container.render(request, attributeContext);\r\n    verify(applicationContext, attributeEvaluatorFactory, evaluator, definitionsFactory, preparerFactory, rendererFactory, request, requestScope, deque, attributeContext, preparer, templateAttribute, renderer);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\plugins\\tiles\\src\\test\\java\\org\\apache\\tiles\\core\\impl\\BasicTilesContainerUnitTest.java",
  "methodName" : "testRenderRequestAttributeContextException",
  "sourceCode" : "@Test(expected = CannotRenderException.class)\r\npublic void testRenderRequestAttributeContextException() throws IOException {\r\n    Request request = createMock(Request.class);\r\n    Map<String, Object> requestScope = createMock(Map.class);\r\n    Deque<AttributeContext> deque = createMock(Deque.class);\r\n    AttributeContext attributeContext = createMock(AttributeContext.class);\r\n    Attribute templateAttribute = createMock(Attribute.class);\r\n    Renderer renderer = createMock(Renderer.class);\r\n    AttributeEvaluator evaluator = createMock(AttributeEvaluator.class);\r\n    expect(attributeContext.getPreparer()).andReturn(\"preparer\").times(2);\r\n    expect(preparerFactory.getPreparer(\"preparer\", request)).andReturn(null);\r\n    expect(attributeContext.getTemplateAttribute()).andReturn(templateAttribute);\r\n    expect(templateAttribute.getRenderer()).andReturn(\"renderer\");\r\n    expect(rendererFactory.getRenderer(\"renderer\")).andReturn(renderer);\r\n    expect(attributeEvaluatorFactory.getAttributeEvaluator(templateAttribute)).andReturn(evaluator);\r\n    expect(evaluator.evaluate(templateAttribute, request)).andReturn(\"/mytemplate.jsp\");\r\n    expect(templateAttribute.isPermitted(request)).andReturn(true);\r\n    renderer.render(\"/mytemplate.jsp\", request);\r\n    expectLastCall().andThrow(new IOException());\r\n    replay(applicationContext, attributeEvaluatorFactory, evaluator, definitionsFactory, preparerFactory, rendererFactory, request, requestScope, deque, attributeContext, templateAttribute, renderer);\r\n    try {\r\n        container.render(request, attributeContext);\r\n    } finally {\r\n        verify(applicationContext, attributeEvaluatorFactory, evaluator, definitionsFactory, preparerFactory, rendererFactory, request, requestScope, deque, attributeContext, templateAttribute, renderer);\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\plugins\\tiles\\src\\test\\java\\org\\apache\\tiles\\core\\impl\\CannotRenderExceptionTest.java",
  "methodName" : "testCannotRenderExceptionString",
  "sourceCode" : "/**\r\n * Test method for {@link CannotRenderException#CannotRenderException(String)}.\r\n */\r\n@Test\r\npublic void testCannotRenderExceptionString() {\r\n    CannotRenderException exception = new CannotRenderException(\"my message\");\r\n    assertEquals(\"my message\", exception.getMessage());\r\n    assertNull(exception.getCause());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\plugins\\tiles\\src\\test\\java\\org\\apache\\tiles\\core\\impl\\CannotRenderExceptionTest.java",
  "methodName" : "testCannotRenderExceptionStringThrowable",
  "sourceCode" : "/**\r\n * Test method for {@link CannotRenderException#CannotRenderException(String, Throwable)}.\r\n */\r\n@Test\r\npublic void testCannotRenderExceptionStringThrowable() {\r\n    Throwable cause = new Throwable();\r\n    CannotRenderException exception = new CannotRenderException(\"my message\", cause);\r\n    assertEquals(\"my message\", exception.getMessage());\r\n    assertEquals(cause, exception.getCause());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\plugins\\tiles\\src\\test\\java\\org\\apache\\tiles\\core\\impl\\DefaultLocaleResolverTest.java",
  "methodName" : "testResolveLocale",
  "sourceCode" : "/**\r\n * Test method for {@link DefaultLocaleResolver#resolveLocale(Request)}.\r\n */\r\n@Test\r\npublic void testResolveLocale() {\r\n    Request request = createMock(Request.class);\r\n    Map<String, Object> sessionScope = createMock(Map.class);\r\n    Locale locale = Locale.ITALY;\r\n    expect(request.getContext(\"session\")).andReturn(sessionScope);\r\n    expect(sessionScope.get(DefaultLocaleResolver.LOCALE_KEY)).andReturn(null);\r\n    expect(request.getRequestLocale()).andReturn(locale);\r\n    replay(request, sessionScope);\r\n    DefaultLocaleResolver resolver = new DefaultLocaleResolver();\r\n    assertSame(locale, resolver.resolveLocale(request));\r\n    verify(request, sessionScope);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\plugins\\tiles\\src\\test\\java\\org\\apache\\tiles\\core\\impl\\InvalidTemplateExceptionTest.java",
  "methodName" : "testInvalidTemplateExceptionString",
  "sourceCode" : "/**\r\n * Test method for {@link InvalidTemplateException#InvalidTemplateException(String)}.\r\n */\r\n@Test\r\npublic void testInvalidTemplateExceptionString() {\r\n    InvalidTemplateException exception = new InvalidTemplateException(\"my message\");\r\n    assertEquals(\"my message\", exception.getMessage());\r\n    assertNull(exception.getCause());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\plugins\\tiles\\src\\test\\java\\org\\apache\\tiles\\core\\impl\\InvalidTemplateExceptionTest.java",
  "methodName" : "testInvalidTemplateExceptionThrowable",
  "sourceCode" : "/**\r\n * Test method for {@link InvalidTemplateException#InvalidTemplateException(Throwable)}.\r\n */\r\n@Test\r\npublic void testInvalidTemplateExceptionThrowable() {\r\n    Throwable cause = new Throwable();\r\n    InvalidTemplateException exception = new InvalidTemplateException(cause);\r\n    assertEquals(cause.toString(), exception.getMessage());\r\n    assertEquals(cause, exception.getCause());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\plugins\\tiles\\src\\test\\java\\org\\apache\\tiles\\core\\impl\\mgmt\\CachingTilesContainerTest.java",
  "methodName" : "testCachingTilesContainer",
  "sourceCode" : "@Test\r\npublic void testCachingTilesContainer() {\r\n    Request request = createMock(Request.class);\r\n    Map<String, Definition> definitions = createMock(Map.class);\r\n    Map<String, Object> scope = createMock(Map.class);\r\n    Definition definition = createMock(Definition.class);\r\n    TilesContainer wrapped = createMock(TilesContainer.class);\r\n    expect(request.getContext(\"request\")).andReturn(scope);\r\n    expect(scope.get(DEFAULT_DEFINITIONS_ATTRIBUTE_NAME)).andReturn(definitions);\r\n    expect(definitions.get(\"definition\")).andReturn(definition);\r\n    replay(wrapped, request, definitions, scope, definition);\r\n    CachingTilesContainer container = new CachingTilesContainer(wrapped);\r\n    assertSame(definition, container.getDefinition(\"definition\", request));\r\n    verify(wrapped, request, definitions, scope, definition);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\plugins\\tiles\\src\\test\\java\\org\\apache\\tiles\\core\\impl\\mgmt\\CachingTilesContainerTest.java",
  "methodName" : "testGetDefinition",
  "sourceCode" : "@Test\r\npublic void testGetDefinition() {\r\n    Request request = createMock(Request.class);\r\n    Map<String, Definition> definitions = createMock(Map.class);\r\n    Map<String, Object> scope = createMock(Map.class);\r\n    Definition definition = createMock(Definition.class);\r\n    expect(request.getContext(\"request\")).andReturn(scope);\r\n    expect(scope.get(DEFAULT_DEFINITIONS_ATTRIBUTE_NAME)).andReturn(definitions);\r\n    expect(definitions.get(\"definition\")).andReturn(definition);\r\n    replay(wrapped, request, definitions, scope, definition);\r\n    assertSame(definition, container.getDefinition(\"definition\", request));\r\n    verify(wrapped, request, definitions, scope, definition);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\plugins\\tiles\\src\\test\\java\\org\\apache\\tiles\\core\\impl\\mgmt\\CachingTilesContainerTest.java",
  "methodName" : "testGetDefinitionContainer",
  "sourceCode" : "@Test\r\npublic void testGetDefinitionContainer() {\r\n    Request request = createMock(Request.class);\r\n    Map<String, Object> scope = createMock(Map.class);\r\n    Definition definition = createMock(Definition.class);\r\n    expect(request.getContext(\"request\")).andReturn(scope);\r\n    expect(scope.get(DEFAULT_DEFINITIONS_ATTRIBUTE_NAME)).andReturn(null);\r\n    expect(wrapped.getDefinition(\"definition\", request)).andReturn(definition);\r\n    replay(wrapped, request, scope, definition);\r\n    assertSame(definition, container.getDefinition(\"definition\", request));\r\n    verify(wrapped, request, scope, definition);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\plugins\\tiles\\src\\test\\java\\org\\apache\\tiles\\core\\impl\\mgmt\\CachingTilesContainerTest.java",
  "methodName" : "testIsValidDefinition",
  "sourceCode" : "@Test\r\npublic void testIsValidDefinition() {\r\n    Request request = createMock(Request.class);\r\n    Map<String, Definition> definitions = createMock(Map.class);\r\n    Map<String, Object> scope = createMock(Map.class);\r\n    Definition definition = createMock(Definition.class);\r\n    expect(request.getContext(\"request\")).andReturn(scope);\r\n    expect(scope.get(DEFAULT_DEFINITIONS_ATTRIBUTE_NAME)).andReturn(definitions);\r\n    expect(definitions.get(\"definition\")).andReturn(definition);\r\n    replay(wrapped, request, definitions, scope, definition);\r\n    assertTrue(container.isValidDefinition(\"definition\", request));\r\n    verify(wrapped, request, definitions, scope, definition);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\plugins\\tiles\\src\\test\\java\\org\\apache\\tiles\\core\\impl\\mgmt\\CachingTilesContainerTest.java",
  "methodName" : "testIsValidDefinitionContainer",
  "sourceCode" : "@Test\r\npublic void testIsValidDefinitionContainer() {\r\n    Request request = createMock(Request.class);\r\n    Map<String, Definition> definitions = createMock(Map.class);\r\n    Map<String, Object> scope = createMock(Map.class);\r\n    expect(request.getContext(\"request\")).andReturn(scope);\r\n    expect(scope.get(DEFAULT_DEFINITIONS_ATTRIBUTE_NAME)).andReturn(definitions);\r\n    expect(definitions.get(\"definition\")).andReturn(null);\r\n    expect(wrapped.isValidDefinition(\"definition\", request)).andReturn(true);\r\n    replay(wrapped, request, definitions, scope);\r\n    assertTrue(container.isValidDefinition(\"definition\", request));\r\n    verify(wrapped, request, definitions, scope);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\plugins\\tiles\\src\\test\\java\\org\\apache\\tiles\\core\\impl\\mgmt\\CachingTilesContainerTest.java",
  "methodName" : "testRegister",
  "sourceCode" : "@Test\r\npublic void testRegister() {\r\n    Request request = createMock(Request.class);\r\n    Map<String, Definition> definitions = createMock(Map.class);\r\n    Map<String, Object> scope = createMock(Map.class);\r\n    Definition definition = createMock(Definition.class);\r\n    expect(request.getContext(\"request\")).andReturn(scope);\r\n    expect(scope.get(DEFAULT_DEFINITIONS_ATTRIBUTE_NAME)).andReturn(definitions);\r\n    expect(definition.getName()).andReturn(null);\r\n    expect(definitions.containsKey(\"$anonymousMutableDefinition1\")).andReturn(false);\r\n    definition.setName(\"$anonymousMutableDefinition1\");\r\n    expect(definition.isExtending()).andReturn(true);\r\n    // trick to test resolve definition separately.\r\n    expect(definition.isExtending()).andReturn(false);\r\n    expect(definition.getName()).andReturn(\"$anonymousMutableDefinition1\");\r\n    expect(definitions.put(\"$anonymousMutableDefinition1\", definition)).andReturn(null);\r\n    replay(wrapped, request, definitions, scope, definition);\r\n    container.register(definition, request);\r\n    verify(wrapped, request, definitions, scope, definition);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\plugins\\tiles\\src\\test\\java\\org\\apache\\tiles\\core\\impl\\mgmt\\CachingTilesContainerTest.java",
  "methodName" : "testRegisterInheritance",
  "sourceCode" : "@Test\r\npublic void testRegisterInheritance() {\r\n    Request request = createMock(Request.class);\r\n    Map<String, Definition> definitions = createMock(Map.class);\r\n    Map<String, Object> scope = createMock(Map.class);\r\n    Definition definition = createMock(Definition.class);\r\n    Definition parent = createMock(Definition.class);\r\n    Definition grandparent = createMock(Definition.class);\r\n    expect(request.getContext(\"request\")).andReturn(scope).anyTimes();\r\n    expect(scope.get(DEFAULT_DEFINITIONS_ATTRIBUTE_NAME)).andReturn(definitions).anyTimes();\r\n    expect(definition.getName()).andReturn(null);\r\n    expect(definitions.containsKey(\"$anonymousMutableDefinition1\")).andReturn(false);\r\n    definition.setName(\"$anonymousMutableDefinition1\");\r\n    expect(definition.isExtending()).andReturn(true);\r\n    // trick to test resolve definition separately.\r\n    expect(definition.isExtending()).andReturn(true);\r\n    expect(definition.getExtends()).andReturn(\"parent\");\r\n    expect(definitions.get(\"parent\")).andReturn(parent);\r\n    expect(parent.isExtending()).andReturn(true);\r\n    expect(parent.getExtends()).andReturn(\"grandparent\");\r\n    expect(definition.getName()).andReturn(\"$anonymousMutableDefinition1\");\r\n    expect(definitions.get(\"grandparent\")).andReturn(null);\r\n    expect(wrapped.getDefinition(\"grandparent\", request)).andReturn(grandparent);\r\n    parent.inherit(grandparent);\r\n    definition.inherit(parent);\r\n    expect(definitions.put(\"$anonymousMutableDefinition1\", definition)).andReturn(null);\r\n    replay(wrapped, request, definitions, scope, definition, parent, grandparent);\r\n    container.register(definition, request);\r\n    verify(wrapped, request, definitions, scope, definition, parent, grandparent);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\plugins\\tiles\\src\\test\\java\\org\\apache\\tiles\\core\\impl\\mgmt\\CachingTilesContainerTest.java",
  "methodName" : "testRegisterInheritanceFail",
  "sourceCode" : "@Test(expected = NoSuchDefinitionException.class)\r\npublic void testRegisterInheritanceFail() {\r\n    Request request = createMock(Request.class);\r\n    Map<String, Definition> definitions = createMock(Map.class);\r\n    Map<String, Object> scope = createMock(Map.class);\r\n    Definition definition = createMock(Definition.class);\r\n    expect(request.getContext(\"request\")).andReturn(scope).anyTimes();\r\n    expect(scope.get(DEFAULT_DEFINITIONS_ATTRIBUTE_NAME)).andReturn(definitions).anyTimes();\r\n    expect(definition.getName()).andReturn(null);\r\n    expect(definitions.containsKey(\"$anonymousMutableDefinition1\")).andReturn(false);\r\n    definition.setName(\"$anonymousMutableDefinition1\");\r\n    expect(definition.isExtending()).andReturn(true);\r\n    // trick to test resolve definition separately.\r\n    expect(definition.isExtending()).andReturn(true);\r\n    expect(definition.getExtends()).andReturn(\"parent\");\r\n    expect(definitions.get(\"parent\")).andReturn(null);\r\n    expect(wrapped.getDefinition(\"parent\", request)).andReturn(null);\r\n    expect(definition.getName()).andReturn(\"$anonymousMutableDefinition1\");\r\n    replay(wrapped, request, definitions, scope, definition);\r\n    try {\r\n        container.register(definition, request);\r\n    } finally {\r\n        verify(wrapped, request, definitions, scope, definition);\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\plugins\\tiles\\src\\test\\java\\org\\apache\\tiles\\core\\impl\\mgmt\\CachingTilesContainerTest.java",
  "methodName" : "testRegisterCreateDefinitions",
  "sourceCode" : "@Test\r\npublic void testRegisterCreateDefinitions() {\r\n    Request request = createMock(Request.class);\r\n    Map<String, Object> scope = createMock(Map.class);\r\n    Definition definition = createMock(Definition.class);\r\n    expect(request.getContext(\"request\")).andReturn(scope).anyTimes();\r\n    expect(scope.get(DEFAULT_DEFINITIONS_ATTRIBUTE_NAME)).andReturn(null);\r\n    expect(scope.put(eq(DEFAULT_DEFINITIONS_ATTRIBUTE_NAME), isA(HashMap.class))).andReturn(null);\r\n    expect(definition.getName()).andReturn(null);\r\n    definition.setName(\"$anonymousMutableDefinition1\");\r\n    expect(definition.isExtending()).andReturn(true);\r\n    // trick to test resolve definition separately.\r\n    expect(definition.isExtending()).andReturn(false);\r\n    expect(definition.getName()).andReturn(\"$anonymousMutableDefinition1\");\r\n    replay(wrapped, request, scope, definition);\r\n    container.register(definition, request);\r\n    verify(wrapped, request, scope, definition);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\plugins\\tiles\\src\\test\\java\\org\\apache\\tiles\\core\\impl\\mgmt\\CachingTilesContainerTest.java",
  "methodName" : "testRender",
  "sourceCode" : "@Test\r\npublic void testRender() {\r\n    Request request = createMock(Request.class);\r\n    Map<String, Definition> definitions = createMock(Map.class);\r\n    Map<String, Object> scope = createMock(Map.class);\r\n    Definition definition = createMock(Definition.class);\r\n    expect(request.getContext(\"request\")).andReturn(scope);\r\n    expect(scope.get(DEFAULT_DEFINITIONS_ATTRIBUTE_NAME)).andReturn(definitions);\r\n    expect(definitions.get(\"definition\")).andReturn(definition);\r\n    container.render(definition, request);\r\n    replay(wrapped, request, definitions, scope, definition);\r\n    container.render(\"definition\", request);\r\n    verify(wrapped, request, definitions, scope, definition);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\plugins\\tiles\\src\\test\\java\\org\\apache\\tiles\\core\\impl\\mgmt\\CachingTilesContainerTest.java",
  "methodName" : "testRenderFail",
  "sourceCode" : "@Test(expected = NoSuchDefinitionException.class)\r\npublic void testRenderFail() {\r\n    Request request = createMock(Request.class);\r\n    Map<String, Definition> definitions = createMock(Map.class);\r\n    Map<String, Object> scope = createMock(Map.class);\r\n    expect(request.getContext(\"request\")).andReturn(scope);\r\n    expect(scope.get(DEFAULT_DEFINITIONS_ATTRIBUTE_NAME)).andReturn(definitions);\r\n    expect(definitions.get(\"definition\")).andReturn(null);\r\n    expect(wrapped.getDefinition(\"definition\", request)).andReturn(null);\r\n    replay(wrapped, request, definitions, scope);\r\n    try {\r\n        container.render(\"definition\", request);\r\n    } finally {\r\n        verify(wrapped, request, definitions, scope);\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\plugins\\tiles\\src\\test\\java\\org\\apache\\tiles\\core\\renderer\\DefinitionRendererTest.java",
  "methodName" : "testWrite",
  "sourceCode" : "/**\r\n * Tests\r\n * {@link DefinitionRenderer#render(String, Request)}.\r\n *\r\n * @throws IOException If something goes wrong during rendition.\r\n */\r\n@Test\r\npublic void testWrite() throws IOException {\r\n    Request requestContext = createMock(Request.class);\r\n    container.render(\"my.definition\", requestContext);\r\n    replay(requestContext, container);\r\n    renderer.render(\"my.definition\", requestContext);\r\n    verify(requestContext, container);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\plugins\\tiles\\src\\test\\java\\org\\apache\\tiles\\core\\renderer\\DefinitionRendererTest.java",
  "methodName" : "testRenderException",
  "sourceCode" : "/**\r\n * Tests\r\n * {@link DefinitionRenderer#render(String, Request)}.\r\n *\r\n * @throws IOException If something goes wrong during rendition.\r\n */\r\n@Test(expected = CannotRenderException.class)\r\npublic void testRenderException() throws IOException {\r\n    Request requestContext = createMock(Request.class);\r\n    replay(requestContext, container);\r\n    try {\r\n        renderer.render(null, requestContext);\r\n    } finally {\r\n        verify(requestContext, container);\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\plugins\\tiles\\src\\test\\java\\org\\apache\\tiles\\core\\renderer\\DefinitionRendererTest.java",
  "methodName" : "testIsRenderable",
  "sourceCode" : "/**\r\n * Tests\r\n * {@link DefinitionRenderer#isRenderable(String, Request)}\r\n * .\r\n */\r\n@Test\r\npublic void testIsRenderable() {\r\n    Request requestContext = createMock(Request.class);\r\n    expect(container.isValidDefinition(\"my.definition\", requestContext)).andReturn(Boolean.TRUE);\r\n    replay(requestContext, container);\r\n    assertTrue(renderer.isRenderable(\"my.definition\", requestContext));\r\n    assertFalse(renderer.isRenderable(null, requestContext));\r\n    verify(requestContext, container);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\plugins\\tiles\\src\\test\\java\\org\\apache\\tiles\\core\\startup\\AbstractTilesInitializerTest.java",
  "methodName" : "testInitialize",
  "sourceCode" : "/**\r\n * Test method for {@link AbstractTilesInitializer#initialize(ApplicationContext)}.\r\n */\r\n@Test\r\npublic void testInitialize() {\r\n    ApplicationContext context = createMock(ApplicationContext.class);\r\n    TilesContainer container = createMock(TilesContainer.class);\r\n    Map<String, Object> scope = createMock(Map.class);\r\n    expect(containerFactory.createContainer(context)).andReturn(container);\r\n    expect(context.getApplicationScope()).andReturn(scope).anyTimes();\r\n    expect(scope.put(ApplicationAccess.APPLICATION_CONTEXT_ATTRIBUTE, context)).andReturn(null);\r\n    expect(scope.put(TilesAccess.CONTAINER_ATTRIBUTE, container)).andReturn(null);\r\n    expect(scope.remove(TilesAccess.CONTAINER_ATTRIBUTE)).andReturn(container);\r\n    replay(containerFactory, context, container, scope);\r\n    initializer.initialize(context);\r\n    initializer.destroy();\r\n    verify(containerFactory, context, container, scope);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\plugins\\tiles\\src\\test\\java\\org\\apache\\tiles\\core\\startup\\AbstractTilesInitializerTest.java",
  "methodName" : "testCreateTilesApplicationContext",
  "sourceCode" : "/**\r\n * Test method for {@link AbstractTilesInitializer#createTilesApplicationContext(ApplicationContext)}.\r\n */\r\n@Test\r\npublic void testCreateTilesApplicationContext() {\r\n    ApplicationContext context = createMock(ApplicationContext.class);\r\n    replay(containerFactory, context);\r\n    assertEquals(context, initializer.createTilesApplicationContext(context));\r\n    verify(containerFactory, context);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\plugins\\tiles\\src\\test\\java\\org\\apache\\tiles\\core\\startup\\AbstractTilesInitializerTest.java",
  "methodName" : "testGetContainerKey",
  "sourceCode" : "/**\r\n * Test method for {@link AbstractTilesInitializer#getContainerKey(ApplicationContext)}.\r\n */\r\n@Test\r\npublic void testGetContainerKey() {\r\n    ApplicationContext context = createMock(ApplicationContext.class);\r\n    replay(containerFactory, context);\r\n    assertNull(initializer.getContainerKey(context));\r\n    verify(containerFactory, context);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\plugins\\tiles\\src\\test\\java\\org\\apache\\tiles\\core\\startup\\AbstractTilesInitializerTest.java",
  "methodName" : "testCreateContainer",
  "sourceCode" : "/**\r\n * Test method for {@link AbstractTilesInitializer#createContainer(ApplicationContext)}.\r\n */\r\n@Test\r\npublic void testCreateContainer() {\r\n    ApplicationContext context = createMock(ApplicationContext.class);\r\n    TilesContainer container = createMock(TilesContainer.class);\r\n    expect(containerFactory.createContainer(context)).andReturn(container);\r\n    replay(containerFactory, context, container);\r\n    assertEquals(container, initializer.createContainer(context));\r\n    verify(containerFactory, context, container);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\plugins\\tiles\\src\\test\\java\\org\\apache\\tiles\\core\\util\\CombinedBeanInfoTest.java",
  "methodName" : "testGetDescriptors",
  "sourceCode" : "@Test\r\npublic void testGetDescriptors() {\r\n    assertEquals(descriptors, beanInfo.getDescriptors());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\plugins\\tiles\\src\\test\\java\\org\\apache\\tiles\\core\\util\\CombinedBeanInfoTest.java",
  "methodName" : "testGetMappedDescriptors",
  "sourceCode" : "@Test\r\npublic void testGetMappedDescriptors() {\r\n    assertEquals(requestMap, beanInfo.getMappedDescriptors(Request.class));\r\n    assertEquals(applicationMap, beanInfo.getMappedDescriptors(ApplicationContext.class));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\plugins\\tiles\\src\\test\\java\\org\\apache\\tiles\\core\\util\\CombinedBeanInfoTest.java",
  "methodName" : "testGetProperties",
  "sourceCode" : "@Test\r\npublic void testGetProperties() {\r\n    assertEquals(requestMap.keySet(), beanInfo.getProperties(Request.class));\r\n    assertEquals(applicationMap.keySet(), beanInfo.getProperties(ApplicationContext.class));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\plugins\\tiles\\src\\test\\java\\org\\apache\\tiles\\el\\ELContextImplTest.java",
  "methodName" : "testGetELResolver",
  "sourceCode" : "/**\r\n * Test method for {@link ELContextImpl#getELResolver()}.\r\n */\r\n@Test\r\npublic void testGetELResolver() {\r\n    replay(resolver);\r\n    assertEquals(resolver, context.getELResolver());\r\n    verify(resolver);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\plugins\\tiles\\src\\test\\java\\org\\apache\\tiles\\el\\ELContextImplTest.java",
  "methodName" : "testSetFunctionMapper",
  "sourceCode" : "/**\r\n * Test method for {@link ELContextImpl#setFunctionMapper(FunctionMapper)}.\r\n */\r\n@Test\r\npublic void testSetFunctionMapper() {\r\n    FunctionMapper functionMapper = createMock(FunctionMapper.class);\r\n    replay(resolver, functionMapper);\r\n    context.setFunctionMapper(functionMapper);\r\n    assertEquals(functionMapper, context.getFunctionMapper());\r\n    verify(resolver, functionMapper);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\plugins\\tiles\\src\\test\\java\\org\\apache\\tiles\\el\\ELContextImplTest.java",
  "methodName" : "testSetVariableMapper",
  "sourceCode" : "/**\r\n * Test method for {@link ELContextImpl#setVariableMapper(VariableMapper)}.\r\n */\r\n@Test\r\npublic void testSetVariableMapper() {\r\n    VariableMapper variableMapper = createMock(VariableMapper.class);\r\n    replay(resolver, variableMapper);\r\n    context.setVariableMapper(variableMapper);\r\n    assertEquals(variableMapper, context.getVariableMapper());\r\n    verify(resolver, variableMapper);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\plugins\\tiles\\src\\test\\java\\org\\apache\\tiles\\el\\ELContextImplTest.java",
  "methodName" : "testNullFunctionMapper",
  "sourceCode" : "/**\r\n * Tests {@link ELContextImpl#getFunctionMapper()}.\r\n */\r\n@Test\r\npublic void testNullFunctionMapper() {\r\n    replay(resolver);\r\n    FunctionMapper functionMapper = context.getFunctionMapper();\r\n    assertNull(functionMapper.resolveFunction(\"whatever\", \"it_IT\"));\r\n    verify(resolver);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\plugins\\tiles\\src\\test\\java\\org\\apache\\tiles\\el\\ELContextImplTest.java",
  "methodName" : "testVariableMapperImpl",
  "sourceCode" : "/**\r\n * Tests {@link ELContextImpl#getVariableMapper()}.\r\n */\r\n@Test\r\npublic void testVariableMapperImpl() {\r\n    ValueExpression expression = createMock(ValueExpression.class);\r\n    replay(resolver, expression);\r\n    VariableMapper variableMapper = context.getVariableMapper();\r\n    assertNull(variableMapper.resolveVariable(\"whatever\"));\r\n    variableMapper.setVariable(\"var\", expression);\r\n    assertEquals(expression, variableMapper.resolveVariable(\"var\"));\r\n    verify(resolver, expression);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\plugins\\tiles\\src\\test\\java\\org\\apache\\tiles\\el\\JspExpressionFactoryFactoryTest.java",
  "methodName" : "testGetExpressionFactory",
  "sourceCode" : "/**\r\n * Test method for {@link JspExpressionFactoryFactory#getExpressionFactory()}.\r\n */\r\n@Test\r\npublic void testGetExpressionFactory() {\r\n    ApplicationContext applicationContext = createMock(ApplicationContext.class);\r\n    ServletContext servletContext = createMock(ServletContext.class);\r\n    JspFactory jspFactory = createMock(JspFactory.class);\r\n    JspApplicationContext jspApplicationContext = createMock(JspApplicationContext.class);\r\n    ExpressionFactory expressionFactory = createMock(ExpressionFactory.class);\r\n    expect(applicationContext.getContext()).andReturn(servletContext);\r\n    expect(jspFactory.getJspApplicationContext(servletContext)).andReturn(jspApplicationContext);\r\n    expect(jspApplicationContext.getExpressionFactory()).andReturn(expressionFactory);\r\n    replay(applicationContext, servletContext, jspFactory, jspApplicationContext, expressionFactory);\r\n    JspFactory.setDefaultFactory(jspFactory);\r\n    JspExpressionFactoryFactory factory = new JspExpressionFactoryFactory();\r\n    factory.setApplicationContext(applicationContext);\r\n    assertEquals(expressionFactory, factory.getExpressionFactory());\r\n    verify(applicationContext, servletContext, jspFactory, jspApplicationContext, expressionFactory);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\plugins\\tiles\\src\\test\\java\\org\\apache\\tiles\\el\\JspExpressionFactoryFactoryTest.java",
  "methodName" : "testSetApplicationContextIllegal",
  "sourceCode" : "/**\r\n * Test method for {@link JspExpressionFactoryFactory#getExpressionFactory()}.\r\n */\r\n@Test(expected = IllegalArgumentException.class)\r\npublic void testSetApplicationContextIllegal() {\r\n    ApplicationContext applicationContext = createMock(ApplicationContext.class);\r\n    Integer servletContext = 1;\r\n    expect(applicationContext.getContext()).andReturn(servletContext);\r\n    replay(applicationContext);\r\n    try {\r\n        JspExpressionFactoryFactory factory = new JspExpressionFactoryFactory();\r\n        factory.setApplicationContext(applicationContext);\r\n    } finally {\r\n        verify(applicationContext);\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\plugins\\tiles\\src\\test\\java\\org\\apache\\tiles\\el\\ScopeELResolverTest.java",
  "methodName" : "testGetCommonPropertyType",
  "sourceCode" : "/**\r\n * Tests {@link ScopeELResolver#getCommonPropertyType(ELContext, Object)}.\r\n */\r\n@Test\r\npublic void testGetCommonPropertyType() {\r\n    ELContext elContext = createMock(ELContext.class);\r\n    replay(elContext);\r\n    assertNull(resolver.getCommonPropertyType(elContext, 1));\r\n    assertEquals(Map.class, resolver.getCommonPropertyType(elContext, null));\r\n    verify(elContext);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\plugins\\tiles\\src\\test\\java\\org\\apache\\tiles\\el\\ScopeELResolverTest.java",
  "methodName" : "testGetFeatureDescriptors",
  "sourceCode" : "/**\r\n * Tests {@link ScopeELResolver#getFeatureDescriptors(ELContext, Object)}.\r\n */\r\n@Test\r\npublic void testGetFeatureDescriptors() {\r\n    ELContext elContext = createMock(ELContext.class);\r\n    Request request = createMock(Request.class);\r\n    expect(elContext.getContext(Request.class)).andReturn(request);\r\n    expect(request.getAvailableScopes()).andReturn(Arrays.asList(\"one\", \"two\"));\r\n    replay(elContext, request);\r\n    assertFalse(resolver.getFeatureDescriptors(elContext, 1).hasNext());\r\n    Iterator<FeatureDescriptor> descriptors = resolver.getFeatureDescriptors(elContext, null);\r\n    FeatureDescriptor descriptor = descriptors.next();\r\n    assertEquals(\"oneScope\", descriptor.getName());\r\n    descriptor = descriptors.next();\r\n    assertEquals(\"twoScope\", descriptor.getName());\r\n    assertFalse(descriptors.hasNext());\r\n    verify(elContext, request);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\plugins\\tiles\\src\\test\\java\\org\\apache\\tiles\\el\\ScopeELResolverTest.java",
  "methodName" : "testGetType",
  "sourceCode" : "/**\r\n * Test method for\r\n * {@link ScopeELResolver#getType(ELContext, Object, Object)}.\r\n */\r\n@Test\r\npublic void testGetType() {\r\n    Request request = createMock(Request.class);\r\n    ApplicationContext applicationContext = createMock(ApplicationContext.class);\r\n    ELContext context = new ELContextImpl(resolver);\r\n    replay(request, applicationContext);\r\n    context.putContext(Request.class, request);\r\n    context.putContext(ApplicationContext.class, applicationContext);\r\n    assertNull(resolver.getType(context, 1, \"whatever\"));\r\n    assertEquals(\"The requestScope object is not a map.\", Map.class, resolver.getType(context, null, \"requestScope\"));\r\n    assertEquals(\"The sessionScope object is not a map.\", Map.class, resolver.getType(context, null, \"sessionScope\"));\r\n    assertEquals(\"The applicationScope object is not a map.\", Map.class, resolver.getType(context, null, \"applicationScope\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\plugins\\tiles\\src\\test\\java\\org\\apache\\tiles\\el\\ScopeELResolverTest.java",
  "methodName" : "testGetValue",
  "sourceCode" : "/**\r\n * Test method for\r\n * {@link ScopeELResolver#getValue(ELContext, Object, Object)}.\r\n */\r\n@Test\r\npublic void testGetValue() {\r\n    Map<String, Object> requestScope = new HashMap<>();\r\n    requestScope.put(\"objectKey\", \"objectValue\");\r\n    Map<String, Object> sessionScope = new HashMap<>();\r\n    sessionScope.put(\"sessionObjectKey\", \"sessionObjectValue\");\r\n    Map<String, Object> applicationScope = new HashMap<>();\r\n    applicationScope.put(\"applicationObjectKey\", \"applicationObjectValue\");\r\n    Request request = createMock(Request.class);\r\n    expect(request.getContext(\"request\")).andReturn(requestScope);\r\n    expect(request.getContext(\"session\")).andReturn(sessionScope);\r\n    ApplicationContext applicationContext = createMock(ApplicationContext.class);\r\n    expect(request.getContext(\"application\")).andReturn(applicationScope);\r\n    ELContext context = new ELContextImpl(resolver);\r\n    replay(request, applicationContext);\r\n    context.putContext(Request.class, request);\r\n    context.putContext(ApplicationContext.class, applicationContext);\r\n    assertNull(resolver.getValue(context, 1, \"whatever\"));\r\n    assertEquals(\"The requestScope map does not correspond\", requestScope, resolver.getValue(context, null, \"requestScope\"));\r\n    assertEquals(\"The sessionScope map does not correspond\", sessionScope, resolver.getValue(context, null, \"sessionScope\"));\r\n    assertEquals(\"The applicationScope map does not correspond\", applicationScope, resolver.getValue(context, null, \"applicationScope\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\plugins\\tiles\\src\\test\\java\\org\\apache\\tiles\\el\\ScopeELResolverTest.java",
  "methodName" : "testIsReadOnly",
  "sourceCode" : "/**\r\n * Tests {@link ScopeELResolver#isReadOnly(ELContext, Object, Object)}.\r\n */\r\n@Test\r\npublic void testIsReadOnly() {\r\n    ELContext elContext = createMock(ELContext.class);\r\n    replay(elContext);\r\n    assertTrue(resolver.isReadOnly(elContext, null, \"whatever\"));\r\n    verify(elContext);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\plugins\\tiles\\src\\test\\java\\org\\apache\\tiles\\el\\ScopeELResolverTest.java",
  "methodName" : "testIsReadOnlyNPE",
  "sourceCode" : "/**\r\n * Tests {@link ScopeELResolver#isReadOnly(ELContext, Object, Object)}.\r\n */\r\n@Test(expected = NullPointerException.class)\r\npublic void testIsReadOnlyNPE() {\r\n    resolver.isReadOnly(null, null, \"whatever\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\plugins\\tiles\\src\\test\\java\\org\\apache\\tiles\\el\\ScopeELResolverTest.java",
  "methodName" : "testSetValue",
  "sourceCode" : "/**\r\n * Tests {@link ScopeELResolver#setValue(ELContext, Object, Object, Object)}.\r\n */\r\n@Test\r\npublic void testSetValue() {\r\n    // Just to complete code coverage!\r\n    resolver.setValue(null, null, null, null);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\plugins\\tiles\\src\\test\\java\\org\\apache\\tiles\\el\\TilesContextBeanELResolverTest.java",
  "methodName" : "testGetCommonPropertyType",
  "sourceCode" : "/**\r\n * Test method for\r\n * {@link TilesContextBeanELResolver#getCommonPropertyType(ELContext, Object)}.\r\n */\r\n@Test\r\npublic void testGetCommonPropertyType() {\r\n    Class<?> clazz = resolver.getCommonPropertyType(null, null);\r\n    assertEquals(\"The class is not correct\", String.class, clazz);\r\n    clazz = resolver.getCommonPropertyType(null, \"Base object\");\r\n    assertNull(\"The class for non root objects must be null\", clazz);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\plugins\\tiles\\src\\test\\java\\org\\apache\\tiles\\el\\TilesContextBeanELResolverTest.java",
  "methodName" : "testGetFeatureDescriptors",
  "sourceCode" : "/**\r\n * Test method for\r\n * {@link TilesContextBeanELResolver#getFeatureDescriptors(ELContext, Object)}.\r\n */\r\n@Test\r\npublic void testGetFeatureDescriptors() {\r\n    Map<String, Object> requestScope = new HashMap<>();\r\n    Map<String, Object> sessionScope = new HashMap<>();\r\n    Map<String, Object> applicationScope = new HashMap<>();\r\n    requestScope.put(\"object1\", \"value\");\r\n    sessionScope.put(\"object2\", 1);\r\n    applicationScope.put(\"object3\", 2.0F);\r\n    Request request = createMock(Request.class);\r\n    expect(request.getContext(\"request\")).andReturn(requestScope).anyTimes();\r\n    expect(request.getContext(\"session\")).andReturn(sessionScope).anyTimes();\r\n    ApplicationContext applicationContext = createMock(ApplicationContext.class);\r\n    expect(request.getContext(\"application\")).andReturn(applicationScope).anyTimes();\r\n    expect(request.getAvailableScopes()).andReturn(Arrays.asList(\"request\", \"session\", \"application\")).anyTimes();\r\n    replay(request, applicationContext);\r\n    ELContext context = new ELContextImpl(resolver);\r\n    context.putContext(Request.class, request);\r\n    context.putContext(ApplicationContext.class, applicationContext);\r\n    List<FeatureDescriptor> expected = new ArrayList<>();\r\n    resolver.collectBeanInfo(requestScope, expected);\r\n    resolver.collectBeanInfo(sessionScope, expected);\r\n    resolver.collectBeanInfo(applicationScope, expected);\r\n    Iterator<FeatureDescriptor> featureIt = resolver.getFeatureDescriptors(context, null);\r\n    Iterator<FeatureDescriptor> expectedIt = expected.iterator();\r\n    while (featureIt.hasNext() && expectedIt.hasNext()) {\r\n        FeatureDescriptor expectedDescriptor = expectedIt.next();\r\n        FeatureDescriptor descriptor = featureIt.next();\r\n        assertEquals(\"The feature is not the same\", expectedDescriptor.getDisplayName(), descriptor.getDisplayName());\r\n        assertEquals(\"The feature is not the same\", expectedDescriptor.getName(), descriptor.getName());\r\n        assertEquals(\"The feature is not the same\", expectedDescriptor.getShortDescription(), descriptor.getShortDescription());\r\n        assertEquals(\"The feature is not the same\", expectedDescriptor.getValue(\"type\"), descriptor.getValue(\"type\"));\r\n        assertEquals(\"The feature is not the same\", expectedDescriptor.getValue(\"resolvableAtDesignTime\"), descriptor.getValue(\"resolvableAtDesignTime\"));\r\n        assertEquals(\"The feature is not the same\", expectedDescriptor.isExpert(), descriptor.isExpert());\r\n        assertEquals(\"The feature is not the same\", expectedDescriptor.isHidden(), descriptor.isHidden());\r\n        assertEquals(\"The feature is not the same\", expectedDescriptor.isPreferred(), descriptor.isPreferred());\r\n    }\r\n    assertTrue(\"The feature descriptors are not of the same size\", !featureIt.hasNext() && !expectedIt.hasNext());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\plugins\\tiles\\src\\test\\java\\org\\apache\\tiles\\el\\TilesContextBeanELResolverTest.java",
  "methodName" : "testGetType",
  "sourceCode" : "/**\r\n * Test method for\r\n * {@link TilesContextBeanELResolver#getType(ELContext, Object, Object)}.\r\n */\r\n@Test\r\npublic void testGetType() {\r\n    Map<String, Object> requestScope = new HashMap<>();\r\n    Map<String, Object> sessionScope = new HashMap<>();\r\n    Map<String, Object> applicationScope = new HashMap<>();\r\n    requestScope.put(\"object1\", \"value\");\r\n    sessionScope.put(\"object2\", 1);\r\n    applicationScope.put(\"object3\", 2.0F);\r\n    Request request = createMock(Request.class);\r\n    expect(request.getContext(\"request\")).andReturn(requestScope).anyTimes();\r\n    expect(request.getContext(\"session\")).andReturn(sessionScope).anyTimes();\r\n    ApplicationContext applicationContext = createMock(ApplicationContext.class);\r\n    expect(request.getContext(\"application\")).andReturn(applicationScope).anyTimes();\r\n    expect(request.getAvailableScopes()).andReturn(Arrays.asList(\"request\", \"session\", \"application\")).anyTimes();\r\n    replay(request, applicationContext);\r\n    ELContext context = new ELContextImpl(resolver);\r\n    context.putContext(Request.class, request);\r\n    context.putContext(ApplicationContext.class, applicationContext);\r\n    assertEquals(\"The type is not correct\", String.class, resolver.getType(context, null, \"object1\"));\r\n    assertEquals(\"The type is not correct\", Integer.class, resolver.getType(context, null, \"object2\"));\r\n    assertEquals(\"The type is not correct\", Float.class, resolver.getType(context, null, \"object3\"));\r\n    assertNull(resolver.getType(context, 1, \"whatever\"));\r\n    assertNull(resolver.getType(context, null, \"object4\"));\r\n    verify(request, applicationContext);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\plugins\\tiles\\src\\test\\java\\org\\apache\\tiles\\el\\TilesContextBeanELResolverTest.java",
  "methodName" : "testGetValue",
  "sourceCode" : "/**\r\n * Test method for\r\n * {@link TilesContextBeanELResolver#getValue(ELContext, Object, Object)}.\r\n */\r\n@Test\r\npublic void testGetValue() {\r\n    Map<String, Object> requestScope = new HashMap<>();\r\n    Map<String, Object> sessionScope = new HashMap<>();\r\n    Map<String, Object> applicationScope = new HashMap<>();\r\n    requestScope.put(\"object1\", \"value\");\r\n    sessionScope.put(\"object2\", 1);\r\n    applicationScope.put(\"object3\", 2.0F);\r\n    Request request = createMock(Request.class);\r\n    expect(request.getContext(\"request\")).andReturn(requestScope).anyTimes();\r\n    expect(request.getContext(\"session\")).andReturn(sessionScope).anyTimes();\r\n    ApplicationContext applicationContext = createMock(ApplicationContext.class);\r\n    expect(request.getContext(\"application\")).andReturn(applicationScope).anyTimes();\r\n    expect(request.getAvailableScopes()).andReturn(Arrays.asList(\"request\", \"session\", \"application\")).anyTimes();\r\n    replay(request, applicationContext);\r\n    ELContext context = new ELContextImpl(resolver);\r\n    context.putContext(Request.class, request);\r\n    context.putContext(ApplicationContext.class, applicationContext);\r\n    assertEquals(\"The value is not correct\", \"value\", resolver.getValue(context, null, \"object1\"));\r\n    assertEquals(\"The value is not correct\", 1, resolver.getValue(context, null, \"object2\"));\r\n    assertEquals(\"The value is not correct\", 2.0F, resolver.getValue(context, null, \"object3\"));\r\n    assertNull(resolver.getValue(context, 1, \"whatever\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\plugins\\tiles\\src\\test\\java\\org\\apache\\tiles\\el\\TilesContextBeanELResolverTest.java",
  "methodName" : "testIsReadOnlyELContextObjectObject",
  "sourceCode" : "/**\r\n * Test method for\r\n * {@link TilesContextBeanELResolver#isReadOnly(ELContext, Object, Object)}.\r\n */\r\n@Test\r\npublic void testIsReadOnlyELContextObjectObject() {\r\n    ELContext context = new ELContextImpl(resolver);\r\n    assertTrue(\"The value is not read only\", resolver.isReadOnly(context, null, null));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\plugins\\tiles\\src\\test\\java\\org\\apache\\tiles\\el\\TilesContextBeanELResolverTest.java",
  "methodName" : "testIsReadOnlyNPE",
  "sourceCode" : "/**\r\n * Test method for\r\n * {@link TilesContextBeanELResolver#isReadOnly(ELContext, Object, Object)}.\r\n */\r\n@Test(expected = NullPointerException.class)\r\npublic void testIsReadOnlyNPE() {\r\n    resolver.isReadOnly(null, null, null);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\plugins\\tiles\\src\\test\\java\\org\\apache\\tiles\\el\\TilesContextBeanELResolverTest.java",
  "methodName" : "testSetValue",
  "sourceCode" : "/**\r\n * Tests {@link TilesContextBeanELResolver#setValue(ELContext, Object, Object, Object)}.\r\n */\r\n@Test\r\npublic void testSetValue() {\r\n    // Just to complete code coverage!\r\n    resolver.setValue(null, null, null, null);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\plugins\\tiles\\src\\test\\java\\org\\apache\\tiles\\el\\TilesContextBeanELResolverTest.java",
  "methodName" : "testFindObjectByProperty",
  "sourceCode" : "/**\r\n * Test method for\r\n * {@link TilesContextBeanELResolver#findObjectByProperty(ELContext, Object)}.\r\n */\r\n@Test\r\npublic void testFindObjectByProperty() {\r\n    Map<String, Object> requestScope = new HashMap<>();\r\n    Map<String, Object> sessionScope = new HashMap<>();\r\n    Map<String, Object> applicationScope = new HashMap<>();\r\n    requestScope.put(\"object1\", \"value\");\r\n    sessionScope.put(\"object2\", 1);\r\n    applicationScope.put(\"object3\", 2.0F);\r\n    Request request = createMock(Request.class);\r\n    expect(request.getContext(\"request\")).andReturn(requestScope).anyTimes();\r\n    expect(request.getContext(\"session\")).andReturn(sessionScope).anyTimes();\r\n    ApplicationContext applicationContext = createMock(ApplicationContext.class);\r\n    expect(request.getContext(\"application\")).andReturn(applicationScope).anyTimes();\r\n    expect(request.getAvailableScopes()).andReturn(Arrays.asList(\"request\", \"session\", \"application\")).anyTimes();\r\n    replay(request, applicationContext);\r\n    ELContext context = new ELContextImpl(resolver);\r\n    context.putContext(Request.class, request);\r\n    context.putContext(ApplicationContext.class, applicationContext);\r\n    assertEquals(\"The value is not correct\", \"value\", resolver.findObjectByProperty(context, \"object1\"));\r\n    assertEquals(\"The value is not correct\", 1, resolver.findObjectByProperty(context, \"object2\"));\r\n    assertEquals(\"The value is not correct\", 2.0F, resolver.findObjectByProperty(context, \"object3\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\plugins\\tiles\\src\\test\\java\\org\\apache\\tiles\\el\\TilesContextBeanELResolverTest.java",
  "methodName" : "testGetObject",
  "sourceCode" : "/**\r\n * Test method for\r\n * {@link TilesContextBeanELResolver#getObject(Map, String)}.\r\n */\r\n@Test\r\npublic void testGetObject() {\r\n    Map<String, Object> map = new HashMap<>();\r\n    map.put(\"object1\", \"value\");\r\n    assertEquals(\"The value is not correct\", \"value\", resolver.getObject(map, \"object1\"));\r\n    assertNull(\"The value is not null\", resolver.getObject(map, \"object2\"));\r\n    assertNull(\"The value is not null\", resolver.getObject(null, \"object1\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\plugins\\tiles\\src\\test\\java\\org\\apache\\tiles\\el\\TilesContextBeanELResolverTest.java",
  "methodName" : "testCollectBeanInfoEmpty",
  "sourceCode" : "/**\r\n * Tests {@link TilesContextBeanELResolver#collectBeanInfo(Map, List)}.\r\n */\r\n@Test\r\npublic void testCollectBeanInfoEmpty() {\r\n    resolver.collectBeanInfo(null, null);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\plugins\\tiles\\src\\test\\java\\org\\apache\\tiles\\el\\TilesContextELResolverTest.java",
  "methodName" : "testGetCommonPropertyTypeELContextObject",
  "sourceCode" : "/**\r\n * Test method for\r\n * {@link TilesContextELResolver#getCommonPropertyType(ELContext, Object)}.\r\n */\r\n@Test\r\npublic void testGetCommonPropertyTypeELContextObject() {\r\n    replay(beanElResolver);\r\n    Class<?> clazz = resolver.getCommonPropertyType(null, null);\r\n    assertEquals(\"The class is not correct\", String.class, clazz);\r\n    clazz = resolver.getCommonPropertyType(null, \"Base object\");\r\n    assertNull(\"The class for non root objects must be null\", clazz);\r\n    verify(beanElResolver);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\plugins\\tiles\\src\\test\\java\\org\\apache\\tiles\\el\\TilesContextELResolverTest.java",
  "methodName" : "testGetFeatureDescriptorsELContextObject",
  "sourceCode" : "/**\r\n * Test method for\r\n * {@link TilesContextELResolver#getFeatureDescriptors(ELContext, Object)}.\r\n */\r\n@Test\r\npublic void testGetFeatureDescriptorsELContextObject() {\r\n    replay(beanElResolver);\r\n    assertNull(resolver.getFeatureDescriptors(null, 1));\r\n    Map<String, PropertyDescriptor> expected = new LinkedHashMap<>();\r\n    ClassUtil.collectBeanInfo(Request.class, expected);\r\n    ClassUtil.collectBeanInfo(ApplicationContext.class, expected);\r\n    Iterator<FeatureDescriptor> featureIt = resolver.getFeatureDescriptors(null, null);\r\n    Iterator<? extends FeatureDescriptor> expectedIt = expected.values().iterator();\r\n    while (featureIt.hasNext() && expectedIt.hasNext()) {\r\n        assertEquals(\"The feature is not the same\", expectedIt.next(), featureIt.next());\r\n    }\r\n    assertTrue(\"The feature descriptors are not of the same size\", !featureIt.hasNext() && !expectedIt.hasNext());\r\n    verify(beanElResolver);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\plugins\\tiles\\src\\test\\java\\org\\apache\\tiles\\el\\TilesContextELResolverTest.java",
  "methodName" : "testGetType",
  "sourceCode" : "/**\r\n * Tests {@link TilesContextBeanELResolver#getType(ELContext, Object, Object)}.\r\n */\r\n@SuppressWarnings({ \"unchecked\", \"rawtypes\" })\r\n@Test\r\npublic void testGetType() {\r\n    ELContext elContext = createMock(ELContext.class);\r\n    Request request = createMock(Request.class);\r\n    ApplicationContext applicationContext = createMock(ApplicationContext.class);\r\n    expect(elContext.getContext(Request.class)).andReturn(request);\r\n    expect(elContext.getContext(ApplicationContext.class)).andReturn(applicationContext);\r\n    expect(beanElResolver.getType(elContext, request, \"responseCommitted\")).andReturn((Class) Boolean.class);\r\n    expect(beanElResolver.getType(elContext, applicationContext, \"initParams\")).andReturn((Class) Map.class);\r\n    elContext.setPropertyResolved(true);\r\n    expectLastCall().times(2);\r\n    replay(beanElResolver, elContext, request, applicationContext);\r\n    assertNull(resolver.getType(elContext, 1, \"whatever\"));\r\n    assertEquals(Boolean.class, resolver.getType(elContext, null, \"responseCommitted\"));\r\n    assertEquals(Map.class, resolver.getType(elContext, null, \"initParams\"));\r\n    verify(beanElResolver, elContext, request, applicationContext);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\plugins\\tiles\\src\\test\\java\\org\\apache\\tiles\\el\\TilesContextELResolverTest.java",
  "methodName" : "testGetValue",
  "sourceCode" : "/**\r\n * Tests {@link TilesContextBeanELResolver#getValue(ELContext, Object, Object)}.\r\n */\r\n@Test\r\npublic void testGetValue() {\r\n    ELContext elContext = createMock(ELContext.class);\r\n    Request request = createMock(Request.class);\r\n    ApplicationContext applicationContext = createMock(ApplicationContext.class);\r\n    @SuppressWarnings(\"rawtypes\")\r\n    Map map = createMock(Map.class);\r\n    expect(elContext.getContext(Request.class)).andReturn(request);\r\n    expect(elContext.getContext(ApplicationContext.class)).andReturn(applicationContext);\r\n    expect(beanElResolver.getValue(elContext, request, \"responseCommitted\")).andReturn(true);\r\n    expect(beanElResolver.getValue(elContext, applicationContext, \"initParams\")).andReturn(map);\r\n    elContext.setPropertyResolved(true);\r\n    expectLastCall().times(2);\r\n    replay(beanElResolver, elContext, request, applicationContext, map);\r\n    assertNull(resolver.getValue(elContext, 1, \"whatever\"));\r\n    assertEquals(true, resolver.getValue(elContext, null, \"responseCommitted\"));\r\n    assertEquals(map, resolver.getValue(elContext, null, \"initParams\"));\r\n    verify(beanElResolver, elContext, request, applicationContext, map);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\plugins\\tiles\\src\\test\\java\\org\\apache\\tiles\\el\\TilesContextELResolverTest.java",
  "methodName" : "testIsReadOnly",
  "sourceCode" : "/**\r\n * Test method for\r\n * {@link TilesContextELResolver#isReadOnly(ELContext, Object, Object)}.\r\n */\r\n@Test\r\npublic void testIsReadOnly() {\r\n    replay(beanElResolver);\r\n    ELContext context = new ELContextImpl(resolver);\r\n    assertTrue(\"The value is not read only\", resolver.isReadOnly(context, null, null));\r\n    verify(beanElResolver);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\plugins\\tiles\\src\\test\\java\\org\\apache\\tiles\\el\\TilesContextELResolverTest.java",
  "methodName" : "testIsReadOnlyNPE",
  "sourceCode" : "/**\r\n * Test method for\r\n * {@link TilesContextELResolver#isReadOnly(ELContext, Object, Object)}.\r\n */\r\n@Test(expected = NullPointerException.class)\r\npublic void testIsReadOnlyNPE() {\r\n    replay(beanElResolver);\r\n    try {\r\n        resolver.isReadOnly(null, null, null);\r\n    } finally {\r\n        verify(beanElResolver);\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\plugins\\tiles\\src\\test\\java\\org\\apache\\tiles\\el\\TilesContextELResolverTest.java",
  "methodName" : "testSetValue",
  "sourceCode" : "/**\r\n * Tests {@link TilesContextELResolver#setValue(ELContext, Object, Object, Object)}.\r\n */\r\n@Test\r\npublic void testSetValue() {\r\n    // Just to complete code coverage!\r\n    resolver.setValue(null, null, null, null);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\plugins\\tiles\\src\\test\\java\\org\\apache\\tiles\\ognl\\AnyScopePropertyAccessorTest.java",
  "methodName" : "testGetProperty",
  "sourceCode" : "/**\r\n * Test method for {@link AnyScopePropertyAccessor#getProperty(Map, Object, Object)}.\r\n */\r\n@Test\r\npublic void testGetProperty() {\r\n    Request request = createMock(Request.class);\r\n    Map<String, Object> oneScope = createMock(Map.class);\r\n    Map<String, Object> twoScope = createMock(Map.class);\r\n    expect(request.getAvailableScopes()).andReturn(Arrays.asList(\"one\", \"two\")).anyTimes();\r\n    expect(request.getContext(\"one\")).andReturn(oneScope).anyTimes();\r\n    expect(request.getContext(\"two\")).andReturn(twoScope).anyTimes();\r\n    expect(oneScope.containsKey(\"name1\")).andReturn(true);\r\n    expect(oneScope.get(\"name1\")).andReturn(\"value1\");\r\n    expect(oneScope.containsKey(\"name2\")).andReturn(false);\r\n    expect(oneScope.containsKey(\"name3\")).andReturn(false);\r\n    expect(twoScope.containsKey(\"name2\")).andReturn(true);\r\n    expect(twoScope.get(\"name2\")).andReturn(\"value2\");\r\n    expect(twoScope.containsKey(\"name3\")).andReturn(false);\r\n    replay(request, oneScope, twoScope);\r\n    assertEquals(\"value1\", accessor.getProperty(null, request, \"name1\"));\r\n    assertEquals(\"value2\", accessor.getProperty(null, request, \"name2\"));\r\n    assertNull(accessor.getProperty(null, request, \"name3\"));\r\n    verify(request, oneScope, twoScope);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\plugins\\tiles\\src\\test\\java\\org\\apache\\tiles\\ognl\\AnyScopePropertyAccessorTest.java",
  "methodName" : "testGetSourceAccessor",
  "sourceCode" : "@Test\r\npublic void testGetSourceAccessor() {\r\n    Request request = createMock(Request.class);\r\n    Map<String, Object> oneScope = createMock(Map.class);\r\n    Map<String, Object> twoScope = createMock(Map.class);\r\n    expect(request.getAvailableScopes()).andReturn(Arrays.asList(\"one\", \"two\")).anyTimes();\r\n    expect(request.getContext(\"one\")).andReturn(oneScope).anyTimes();\r\n    expect(request.getContext(\"two\")).andReturn(twoScope).anyTimes();\r\n    expect(oneScope.containsKey(\"name1\")).andReturn(true);\r\n    expect(oneScope.containsKey(\"name2\")).andReturn(false);\r\n    expect(oneScope.containsKey(\"name3\")).andReturn(false);\r\n    expect(twoScope.containsKey(\"name2\")).andReturn(true);\r\n    expect(twoScope.containsKey(\"name3\")).andReturn(false);\r\n    replay(request, oneScope, twoScope);\r\n    assertEquals(\".getContext(\\\"one\\\").get(index)\", accessor.getSourceAccessor(null, request, \"name1\"));\r\n    assertEquals(\".getContext(\\\"two\\\").get(index)\", accessor.getSourceAccessor(null, request, \"name2\"));\r\n    assertNull(accessor.getSourceAccessor(null, request, \"name3\"));\r\n    verify(request, oneScope, twoScope);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\plugins\\tiles\\src\\test\\java\\org\\apache\\tiles\\ognl\\AnyScopePropertyAccessorTest.java",
  "methodName" : "testGetSourceSetter",
  "sourceCode" : "@Test\r\npublic void testGetSourceSetter() {\r\n    Request request = createMock(Request.class);\r\n    Map<String, Object> oneScope = createMock(Map.class);\r\n    Map<String, Object> twoScope = createMock(Map.class);\r\n    expect(request.getAvailableScopes()).andReturn(Arrays.asList(\"one\", \"two\")).anyTimes();\r\n    expect(request.getContext(\"one\")).andReturn(oneScope).anyTimes();\r\n    expect(request.getContext(\"two\")).andReturn(twoScope).anyTimes();\r\n    expect(oneScope.containsKey(\"name1\")).andReturn(true);\r\n    expect(oneScope.containsKey(\"name2\")).andReturn(false);\r\n    expect(oneScope.containsKey(\"name3\")).andReturn(false);\r\n    expect(twoScope.containsKey(\"name2\")).andReturn(true);\r\n    expect(twoScope.containsKey(\"name3\")).andReturn(false);\r\n    replay(request, oneScope, twoScope);\r\n    assertEquals(\".getContext(\\\"one\\\").put(index, target)\", accessor.getSourceSetter(null, request, \"name1\"));\r\n    assertEquals(\".getContext(\\\"two\\\").put(index, target)\", accessor.getSourceSetter(null, request, \"name2\"));\r\n    assertEquals(\".getContext(\\\"one\\\").put(index, target)\", accessor.getSourceSetter(null, request, \"name3\"));\r\n    verify(request, oneScope, twoScope);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\plugins\\tiles\\src\\test\\java\\org\\apache\\tiles\\ognl\\AnyScopePropertyAccessorTest.java",
  "methodName" : "testSetProperty",
  "sourceCode" : "/**\r\n * Test method for {@link AnyScopePropertyAccessor#setProperty(Map, Object, Object, Object)}.\r\n */\r\n@Test\r\npublic void testSetProperty() {\r\n    Request request = createMock(Request.class);\r\n    Map<String, Object> oneScope = createMock(Map.class);\r\n    Map<String, Object> twoScope = createMock(Map.class);\r\n    expect(request.getAvailableScopes()).andReturn(Arrays.asList(\"one\", \"two\")).anyTimes();\r\n    expect(request.getContext(\"one\")).andReturn(oneScope).anyTimes();\r\n    expect(request.getContext(\"two\")).andReturn(twoScope).anyTimes();\r\n    expect(oneScope.containsKey(\"name1\")).andReturn(true);\r\n    expect(oneScope.put(\"name1\", \"otherValue1\")).andReturn(\"value1\");\r\n    expect(oneScope.containsKey(\"name2\")).andReturn(false);\r\n    expect(oneScope.containsKey(\"name3\")).andReturn(false);\r\n    expect(twoScope.containsKey(\"name2\")).andReturn(true);\r\n    expect(twoScope.put(\"name2\", \"otherValue2\")).andReturn(\"value2\");\r\n    expect(twoScope.containsKey(\"name3\")).andReturn(false);\r\n    expect(oneScope.put(\"name3\", \"otherValue3\")).andReturn(null);\r\n    replay(request, oneScope, twoScope);\r\n    accessor.setProperty(null, request, \"name1\", \"otherValue1\");\r\n    accessor.setProperty(null, request, \"name2\", \"otherValue2\");\r\n    accessor.setProperty(null, request, \"name3\", \"otherValue3\");\r\n    verify(request, oneScope, twoScope);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\plugins\\tiles\\src\\test\\java\\org\\apache\\tiles\\ognl\\DelegatePropertyAccessorTest.java",
  "methodName" : "testGetProperty",
  "sourceCode" : "/**\r\n * Test method for {@link DelegatePropertyAccessor#getProperty(Map, Object, Object)}.\r\n *\r\n * @throws OgnlException If something goes wrong.\r\n */\r\n@Test\r\npublic void testGetProperty() throws OgnlException {\r\n    PropertyAccessorDelegateFactory<Integer> factory = createMock(PropertyAccessorDelegateFactory.class);\r\n    PropertyAccessor mockAccessor = createMock(PropertyAccessor.class);\r\n    Map<String, Object> context = createMock(Map.class);\r\n    expect(factory.getPropertyAccessor(\"property\", 1)).andReturn(mockAccessor);\r\n    expect(mockAccessor.getProperty(context, 1, \"property\")).andReturn(\"value\");\r\n    replay(factory, mockAccessor, context);\r\n    PropertyAccessor accessor = new DelegatePropertyAccessor<>(factory);\r\n    assertEquals(\"value\", accessor.getProperty(context, 1, \"property\"));\r\n    verify(factory, mockAccessor, context);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\plugins\\tiles\\src\\test\\java\\org\\apache\\tiles\\ognl\\DelegatePropertyAccessorTest.java",
  "methodName" : "testSetProperty",
  "sourceCode" : "/**\r\n * Test method for {@link DelegatePropertyAccessor#setProperty(Map, Object, Object, Object)}.\r\n *\r\n * @throws OgnlException If something goes wrong.\r\n */\r\n@Test\r\npublic void testSetProperty() throws OgnlException {\r\n    PropertyAccessorDelegateFactory<Integer> factory = createMock(PropertyAccessorDelegateFactory.class);\r\n    PropertyAccessor mockAccessor = createMock(PropertyAccessor.class);\r\n    Map<String, Object> context = createMock(Map.class);\r\n    expect(factory.getPropertyAccessor(\"property\", 1)).andReturn(mockAccessor);\r\n    mockAccessor.setProperty(context, 1, \"property\", \"value\");\r\n    replay(factory, mockAccessor, context);\r\n    PropertyAccessor accessor = new DelegatePropertyAccessor<>(factory);\r\n    accessor.setProperty(context, 1, \"property\", \"value\");\r\n    verify(factory, mockAccessor, context);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\plugins\\tiles\\src\\test\\java\\org\\apache\\tiles\\ognl\\DelegatePropertyAccessorTest.java",
  "methodName" : "testGetSourceAccessor",
  "sourceCode" : "/**\r\n * Test method for {@link DelegatePropertyAccessor#getSourceAccessor(OgnlContext, Object, Object)}.\r\n */\r\n@Test\r\npublic void testGetSourceAccessor() {\r\n    PropertyAccessorDelegateFactory<Integer> factory = createMock(PropertyAccessorDelegateFactory.class);\r\n    PropertyAccessor mockAccessor = createMock(PropertyAccessor.class);\r\n    OgnlContext context = createMock(OgnlContext.class);\r\n    expect(factory.getPropertyAccessor(\"property\", 1)).andReturn(mockAccessor);\r\n    expect(mockAccessor.getSourceAccessor(context, 1, \"property\")).andReturn(\"method\");\r\n    replay(factory, mockAccessor, context);\r\n    PropertyAccessor accessor = new DelegatePropertyAccessor<>(factory);\r\n    assertEquals(\"method\", accessor.getSourceAccessor(context, 1, \"property\"));\r\n    verify(factory, mockAccessor, context);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\plugins\\tiles\\src\\test\\java\\org\\apache\\tiles\\ognl\\DelegatePropertyAccessorTest.java",
  "methodName" : "testGetSourceSetter",
  "sourceCode" : "/**\r\n * Test method for {@link DelegatePropertyAccessor#getSourceSetter(OgnlContext, Object, Object)}.\r\n */\r\n@Test\r\npublic void testGetSourceSetter() {\r\n    PropertyAccessorDelegateFactory<Integer> factory = createMock(PropertyAccessorDelegateFactory.class);\r\n    PropertyAccessor mockAccessor = createMock(PropertyAccessor.class);\r\n    OgnlContext context = createMock(OgnlContext.class);\r\n    expect(factory.getPropertyAccessor(\"property\", 1)).andReturn(mockAccessor);\r\n    expect(mockAccessor.getSourceSetter(context, 1, \"property\")).andReturn(\"method\");\r\n    replay(factory, mockAccessor, context);\r\n    PropertyAccessor accessor = new DelegatePropertyAccessor<>(factory);\r\n    assertEquals(\"method\", accessor.getSourceSetter(context, 1, \"property\"));\r\n    verify(factory, mockAccessor, context);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\plugins\\tiles\\src\\test\\java\\org\\apache\\tiles\\ognl\\NestedObjectDelegatePropertyAccessorTest.java",
  "methodName" : "testGetProperty",
  "sourceCode" : "/**\r\n * Test method for {@link NestedObjectDelegatePropertyAccessor#getProperty(Map, Object, Object)}.\r\n * @throws OgnlException If something goes wrong.\r\n */\r\n@Test\r\npublic void testGetProperty() throws OgnlException {\r\n    NestedObjectExtractor<Integer> nestedObjectExtractor = createMock(NestedObjectExtractor.class);\r\n    PropertyAccessor propertyAccessor = createMock(PropertyAccessor.class);\r\n    Map<String, Object> context = createMock(Map.class);\r\n    expect(propertyAccessor.getProperty(context, \"nested\", \"property\")).andReturn(\"value\");\r\n    expect(nestedObjectExtractor.getNestedObject(1)).andReturn(\"nested\");\r\n    replay(nestedObjectExtractor, propertyAccessor, context);\r\n    PropertyAccessor accessor = new NestedObjectDelegatePropertyAccessor<>(nestedObjectExtractor, propertyAccessor);\r\n    assertEquals(\"value\", accessor.getProperty(context, 1, \"property\"));\r\n    verify(nestedObjectExtractor, propertyAccessor, context);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\plugins\\tiles\\src\\test\\java\\org\\apache\\tiles\\ognl\\NestedObjectDelegatePropertyAccessorTest.java",
  "methodName" : "testSetProperty",
  "sourceCode" : "/**\r\n * Test method for {@link NestedObjectDelegatePropertyAccessor#setProperty(Map, Object, Object, Object)}.\r\n * @throws OgnlException If something goes wrong.\r\n */\r\n@Test\r\npublic void testSetProperty() throws OgnlException {\r\n    NestedObjectExtractor<Integer> nestedObjectExtractor = createMock(NestedObjectExtractor.class);\r\n    PropertyAccessor propertyAccessor = createMock(PropertyAccessor.class);\r\n    Map<String, Object> context = createMock(Map.class);\r\n    propertyAccessor.setProperty(context, \"nested\", \"property\", \"value\");\r\n    expect(nestedObjectExtractor.getNestedObject(1)).andReturn(\"nested\");\r\n    replay(nestedObjectExtractor, propertyAccessor, context);\r\n    PropertyAccessor accessor = new NestedObjectDelegatePropertyAccessor<>(nestedObjectExtractor, propertyAccessor);\r\n    accessor.setProperty(context, 1, \"property\", \"value\");\r\n    verify(nestedObjectExtractor, propertyAccessor, context);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\plugins\\tiles\\src\\test\\java\\org\\apache\\tiles\\ognl\\NestedObjectDelegatePropertyAccessorTest.java",
  "methodName" : "testGetSourceAccessor",
  "sourceCode" : "/**\r\n * Test method for {@link NestedObjectDelegatePropertyAccessor#getSourceAccessor(OgnlContext, Object, Object)}.\r\n */\r\n@Test\r\npublic void testGetSourceAccessor() {\r\n    NestedObjectExtractor<Integer> nestedObjectExtractor = createMock(NestedObjectExtractor.class);\r\n    PropertyAccessor propertyAccessor = createMock(PropertyAccessor.class);\r\n    OgnlContext context = createMock(OgnlContext.class);\r\n    expect(propertyAccessor.getSourceAccessor(context, \"nested\", \"property\")).andReturn(\"method\");\r\n    expect(nestedObjectExtractor.getNestedObject(1)).andReturn(\"nested\");\r\n    replay(nestedObjectExtractor, propertyAccessor, context);\r\n    PropertyAccessor accessor = new NestedObjectDelegatePropertyAccessor<>(nestedObjectExtractor, propertyAccessor);\r\n    assertEquals(\"method\", accessor.getSourceAccessor(context, 1, \"property\"));\r\n    verify(nestedObjectExtractor, propertyAccessor, context);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\plugins\\tiles\\src\\test\\java\\org\\apache\\tiles\\ognl\\NestedObjectDelegatePropertyAccessorTest.java",
  "methodName" : "testGetSourceSetter",
  "sourceCode" : "/**\r\n * Test method for {@link NestedObjectDelegatePropertyAccessor#getSourceSetter(OgnlContext, Object, Object)}.\r\n */\r\n@Test\r\npublic void testGetSourceSetter() {\r\n    NestedObjectExtractor<Integer> nestedObjectExtractor = createMock(NestedObjectExtractor.class);\r\n    PropertyAccessor propertyAccessor = createMock(PropertyAccessor.class);\r\n    OgnlContext context = createMock(OgnlContext.class);\r\n    expect(propertyAccessor.getSourceSetter(context, \"nested\", \"property\")).andReturn(\"method\");\r\n    expect(nestedObjectExtractor.getNestedObject(1)).andReturn(\"nested\");\r\n    replay(nestedObjectExtractor, propertyAccessor, context);\r\n    PropertyAccessor accessor = new NestedObjectDelegatePropertyAccessor<>(nestedObjectExtractor, propertyAccessor);\r\n    assertEquals(\"method\", accessor.getSourceSetter(context, 1, \"property\"));\r\n    verify(nestedObjectExtractor, propertyAccessor, context);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\plugins\\tiles\\src\\test\\java\\org\\apache\\tiles\\ognl\\OGNLAttributeEvaluatorTest.java",
  "methodName" : "testEvaluate",
  "sourceCode" : "/**\r\n * Tests\r\n * {@link OGNLAttributeEvaluator#evaluate(Attribute, Request)}.\r\n */\r\n@Test\r\npublic void testEvaluate() {\r\n    Attribute attribute = new Attribute();\r\n    attribute.setExpressionObject(new Expression(\"requestScope.object1\"));\r\n    assertEquals(\"The value is not correct\", \"value\", evaluator.evaluate(attribute, request));\r\n    attribute.setExpressionObject(new Expression(\"sessionScope.object2\"));\r\n    assertEquals(\"The value is not correct\", 1, evaluator.evaluate(attribute, request));\r\n    attribute.setExpressionObject(new Expression(\"applicationScope.object3\"));\r\n    assertEquals(\"The value is not correct\", 2.0F, evaluator.evaluate(attribute, request));\r\n    attribute.setExpressionObject(new Expression(\"object1\"));\r\n    assertEquals(\"The value is not correct\", \"value\", evaluator.evaluate(attribute, request));\r\n    attribute.setExpressionObject(new Expression(\"object2\"));\r\n    assertEquals(\"The value is not correct\", 1, evaluator.evaluate(attribute, request));\r\n    attribute.setExpressionObject(new Expression(\"object3\"));\r\n    assertEquals(\"The value is not correct\", 2.0F, evaluator.evaluate(attribute, request));\r\n    attribute.setExpressionObject(new Expression(\"paulaBean.paula\"));\r\n    assertEquals(\"The value is not correct\", \"Brillant\", evaluator.evaluate(attribute, request));\r\n    attribute.setExpressionObject(new Expression(\"'String literal'\"));\r\n    assertEquals(\"The value is not correct\", \"String literal\", evaluator.evaluate(attribute, request));\r\n    attribute.setValue(2);\r\n    assertEquals(\"The value is not correct\", 2, evaluator.evaluate(attribute, request));\r\n    attribute.setValue(\"object1\");\r\n    assertEquals(\"The value has been evaluated\", \"object1\", evaluator.evaluate(attribute, request));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\plugins\\tiles\\src\\test\\java\\org\\apache\\tiles\\ognl\\OGNLAttributeEvaluatorTest.java",
  "methodName" : "testEvaluateString",
  "sourceCode" : "/**\r\n * Tests {@link OGNLAttributeEvaluator#evaluate(String, Request)}.\r\n */\r\n@Test\r\npublic void testEvaluateString() {\r\n    String expression = \"requestScope.object1\";\r\n    assertEquals(\"The value is not correct\", \"value\", evaluator.evaluate(expression, request));\r\n    expression = \"sessionScope.object2\";\r\n    assertEquals(\"The value is not correct\", 1, evaluator.evaluate(expression, request));\r\n    expression = \"applicationScope.object3\";\r\n    assertEquals(\"The value is not correct\", 2.0F, evaluator.evaluate(expression, request));\r\n    expression = \"object1\";\r\n    assertEquals(\"The value is not correct\", \"value\", evaluator.evaluate(expression, request));\r\n    expression = \"object2\";\r\n    assertEquals(\"The value is not correct\", 1, evaluator.evaluate(expression, request));\r\n    expression = \"object3\";\r\n    assertEquals(\"The value is not correct\", 2.0F, evaluator.evaluate(expression, request));\r\n    expression = \"paulaBean.paula\";\r\n    assertEquals(\"The value is not correct\", \"Brillant\", evaluator.evaluate(expression, request));\r\n    expression = \"'String literal'\";\r\n    assertEquals(\"The value is not correct\", \"String literal\", evaluator.evaluate(expression, request));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\plugins\\tiles\\src\\test\\java\\org\\apache\\tiles\\ognl\\OGNLAttributeEvaluatorTest.java",
  "methodName" : "testEvaluateNull",
  "sourceCode" : "/**\r\n * Tests {@link OGNLAttributeEvaluator#evaluate(String, Request)}.\r\n */\r\n@Test(expected = IllegalArgumentException.class)\r\npublic void testEvaluateNull() {\r\n    evaluator.evaluate((String) null, request);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\plugins\\tiles\\src\\test\\java\\org\\apache\\tiles\\ognl\\OGNLAttributeEvaluatorTest.java",
  "methodName" : "testEvaluateOgnlException",
  "sourceCode" : "/**\r\n * Tests {@link OGNLAttributeEvaluator#evaluate(String, Request)}.\r\n */\r\n@Test(expected = EvaluationException.class)\r\npublic void testEvaluateOgnlException() {\r\n    evaluator.evaluate(\"wrong|||!!!!yes###\", request);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\plugins\\tiles\\src\\test\\java\\org\\apache\\tiles\\ognl\\ScopePropertyAccessorTest.java",
  "methodName" : "testGetProperty",
  "sourceCode" : "/**\r\n * Test method for {@link ScopePropertyAccessor#getProperty(Map, Object, Object)}.\r\n */\r\n@Test\r\npublic void testGetProperty() {\r\n    Request request = createMock(Request.class);\r\n    Map<String, Object> oneScope = createMock(Map.class);\r\n    expect(request.getContext(\"one\")).andReturn(oneScope);\r\n    replay(request);\r\n    assertEquals(oneScope, accessor.getProperty(null, request, \"oneScope\"));\r\n    assertNull(accessor.getProperty(null, request, \"whatever\"));\r\n    verify(request);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\plugins\\tiles\\src\\test\\java\\org\\apache\\tiles\\ognl\\ScopePropertyAccessorTest.java",
  "methodName" : "testGetSourceAccessor",
  "sourceCode" : "@Test\r\npublic void testGetSourceAccessor() {\r\n    Request request = createMock(Request.class);\r\n    replay(request);\r\n    assertEquals(\".getContext(\\\"one\\\")\", accessor.getSourceAccessor(null, request, \"oneScope\"));\r\n    assertNull(accessor.getSourceAccessor(null, request, \"whatever\"));\r\n    verify(request);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\plugins\\tiles\\src\\test\\java\\org\\apache\\tiles\\ognl\\ScopePropertyAccessorTest.java",
  "methodName" : "testGetSourceSetter",
  "sourceCode" : "@Test\r\npublic void testGetSourceSetter() {\r\n    assertNull(accessor.getSourceSetter(null, null, \"whatever\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\plugins\\tiles\\src\\test\\java\\org\\apache\\tiles\\ognl\\ScopePropertyAccessorTest.java",
  "methodName" : "testSetProperty",
  "sourceCode" : "/**\r\n * Test method for {@link ScopePropertyAccessor#setProperty(Map, Object, Object, Object)}.\r\n */\r\n@Test\r\npublic void testSetProperty() {\r\n    accessor.setProperty(null, null, \"whatever\", \"whateverValue\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\plugins\\tiles\\src\\test\\java\\org\\apache\\tiles\\ognl\\TilesApplicationContextNestedObjectExtractorTest.java",
  "methodName" : "testGetNestedObject",
  "sourceCode" : "/**\r\n * Tests {@link TilesApplicationContextNestedObjectExtractor#getNestedObject(Request)}.\r\n */\r\n@Test\r\npublic void testGetNestedObject() {\r\n    Request request = createMock(Request.class);\r\n    ApplicationContext applicationContext = createMock(ApplicationContext.class);\r\n    expect(request.getApplicationContext()).andReturn(applicationContext);\r\n    replay(request, applicationContext);\r\n    NestedObjectExtractor<Request> extractor = new TilesApplicationContextNestedObjectExtractor();\r\n    assertEquals(applicationContext, extractor.getNestedObject(request));\r\n    verify(request, applicationContext);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\plugins\\tiles\\src\\test\\java\\org\\apache\\tiles\\ognl\\TilesContextPropertyAccessorDelegateFactoryTest.java",
  "methodName" : "testGetPropertyAccessorRequest",
  "sourceCode" : "/**\r\n * Test method for\r\n * {@link TilesContextPropertyAccessorDelegateFactory#getPropertyAccessor(String, Request)}\r\n * .\r\n */\r\n@Test\r\npublic void testGetPropertyAccessorRequest() {\r\n    PropertyAccessor objectPropertyAccessor = createMock(PropertyAccessor.class);\r\n    PropertyAccessor applicationContextPropertyAccessor = createMock(PropertyAccessor.class);\r\n    PropertyAccessor requestScopePropertyAccessor = createMock(PropertyAccessor.class);\r\n    PropertyAccessor sessionScopePropertyAccessor = createMock(PropertyAccessor.class);\r\n    PropertyAccessor applicationScopePropertyAccessor = createMock(PropertyAccessor.class);\r\n    Request request = createMock(Request.class);\r\n    replay(objectPropertyAccessor, applicationContextPropertyAccessor, requestScopePropertyAccessor, sessionScopePropertyAccessor, applicationScopePropertyAccessor, request);\r\n    PropertyAccessorDelegateFactory<Request> factory = new TilesContextPropertyAccessorDelegateFactory(objectPropertyAccessor, applicationContextPropertyAccessor, requestScopePropertyAccessor, sessionScopePropertyAccessor);\r\n    assertEquals(objectPropertyAccessor, factory.getPropertyAccessor(\"writer\", request));\r\n    verify(objectPropertyAccessor, applicationContextPropertyAccessor, requestScopePropertyAccessor, sessionScopePropertyAccessor, applicationScopePropertyAccessor, request);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\plugins\\tiles\\src\\test\\java\\org\\apache\\tiles\\ognl\\TilesContextPropertyAccessorDelegateFactoryTest.java",
  "methodName" : "testGetPropertyAccessorApplication",
  "sourceCode" : "/**\r\n * Test method for\r\n * {@link TilesContextPropertyAccessorDelegateFactory#getPropertyAccessor(String, Request)}\r\n * .\r\n */\r\n@Test\r\npublic void testGetPropertyAccessorApplication() {\r\n    PropertyAccessor objectPropertyAccessor = createMock(PropertyAccessor.class);\r\n    PropertyAccessor applicationContextPropertyAccessor = createMock(PropertyAccessor.class);\r\n    PropertyAccessor requestScopePropertyAccessor = createMock(PropertyAccessor.class);\r\n    PropertyAccessor sessionScopePropertyAccessor = createMock(PropertyAccessor.class);\r\n    PropertyAccessor applicationScopePropertyAccessor = createMock(PropertyAccessor.class);\r\n    Request request = createMock(Request.class);\r\n    replay(objectPropertyAccessor, applicationContextPropertyAccessor, requestScopePropertyAccessor, sessionScopePropertyAccessor, applicationScopePropertyAccessor, request);\r\n    PropertyAccessorDelegateFactory<Request> factory = new TilesContextPropertyAccessorDelegateFactory(objectPropertyAccessor, applicationContextPropertyAccessor, requestScopePropertyAccessor, sessionScopePropertyAccessor);\r\n    assertEquals(applicationContextPropertyAccessor, factory.getPropertyAccessor(\"initParams\", request));\r\n    verify(objectPropertyAccessor, applicationContextPropertyAccessor, requestScopePropertyAccessor, sessionScopePropertyAccessor, applicationScopePropertyAccessor, request);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\plugins\\tiles\\src\\test\\java\\org\\apache\\tiles\\ognl\\TilesContextPropertyAccessorDelegateFactoryTest.java",
  "methodName" : "testGetPropertyAccessorRequestScope",
  "sourceCode" : "/**\r\n * Test method for\r\n * {@link TilesContextPropertyAccessorDelegateFactory#getPropertyAccessor(String, Request)}\r\n * .\r\n */\r\n@Test\r\npublic void testGetPropertyAccessorRequestScope() {\r\n    PropertyAccessor objectPropertyAccessor = createMock(PropertyAccessor.class);\r\n    PropertyAccessor applicationContextPropertyAccessor = createMock(PropertyAccessor.class);\r\n    PropertyAccessor requestScopePropertyAccessor = createMock(PropertyAccessor.class);\r\n    PropertyAccessor sessionScopePropertyAccessor = createMock(PropertyAccessor.class);\r\n    PropertyAccessor applicationScopePropertyAccessor = createMock(PropertyAccessor.class);\r\n    Request request = createMock(Request.class);\r\n    replay(objectPropertyAccessor, applicationContextPropertyAccessor, requestScopePropertyAccessor, sessionScopePropertyAccessor, applicationScopePropertyAccessor, request);\r\n    PropertyAccessorDelegateFactory<Request> factory = new TilesContextPropertyAccessorDelegateFactory(objectPropertyAccessor, applicationContextPropertyAccessor, requestScopePropertyAccessor, sessionScopePropertyAccessor);\r\n    assertEquals(requestScopePropertyAccessor, factory.getPropertyAccessor(\"attribute\", request));\r\n    verify(objectPropertyAccessor, applicationContextPropertyAccessor, requestScopePropertyAccessor, sessionScopePropertyAccessor, applicationScopePropertyAccessor, request);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\plugins\\tiles\\src\\test\\java\\org\\apache\\tiles\\ognl\\TilesContextPropertyAccessorDelegateFactoryTest.java",
  "methodName" : "testGetPropertyAccessorSessionScope",
  "sourceCode" : "/**\r\n * Test method for\r\n * {@link TilesContextPropertyAccessorDelegateFactory#getPropertyAccessor(String, Request)}\r\n * .\r\n */\r\n@Test\r\npublic void testGetPropertyAccessorSessionScope() {\r\n    PropertyAccessor objectPropertyAccessor = createMock(PropertyAccessor.class);\r\n    PropertyAccessor applicationContextPropertyAccessor = createMock(PropertyAccessor.class);\r\n    PropertyAccessor requestScopePropertyAccessor = createMock(PropertyAccessor.class);\r\n    PropertyAccessor sessionScopePropertyAccessor = createMock(PropertyAccessor.class);\r\n    PropertyAccessor applicationScopePropertyAccessor = createMock(PropertyAccessor.class);\r\n    Request request = createMock(Request.class);\r\n    replay(objectPropertyAccessor, applicationContextPropertyAccessor, requestScopePropertyAccessor, sessionScopePropertyAccessor, applicationScopePropertyAccessor, request);\r\n    PropertyAccessorDelegateFactory<Request> factory = new TilesContextPropertyAccessorDelegateFactory(objectPropertyAccessor, applicationContextPropertyAccessor, requestScopePropertyAccessor, sessionScopePropertyAccessor);\r\n    assertEquals(requestScopePropertyAccessor, factory.getPropertyAccessor(\"attribute\", request));\r\n    verify(objectPropertyAccessor, applicationContextPropertyAccessor, requestScopePropertyAccessor, sessionScopePropertyAccessor, applicationScopePropertyAccessor, request);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\plugins\\tiles\\src\\test\\java\\org\\apache\\tiles\\ognl\\TilesContextPropertyAccessorDelegateFactoryTest.java",
  "methodName" : "testGetPropertyAccessorApplicationScope",
  "sourceCode" : "/**\r\n * Test method for\r\n * {@link TilesContextPropertyAccessorDelegateFactory#getPropertyAccessor(String, Request)}\r\n * .\r\n */\r\n@Test\r\npublic void testGetPropertyAccessorApplicationScope() {\r\n    PropertyAccessor objectPropertyAccessor = createMock(PropertyAccessor.class);\r\n    PropertyAccessor applicationContextPropertyAccessor = createMock(PropertyAccessor.class);\r\n    PropertyAccessor requestScopePropertyAccessor = createMock(PropertyAccessor.class);\r\n    PropertyAccessor sessionScopePropertyAccessor = createMock(PropertyAccessor.class);\r\n    PropertyAccessor applicationScopePropertyAccessor = createMock(PropertyAccessor.class);\r\n    Request request = createMock(Request.class);\r\n    ApplicationContext applicationContext = createMock(ApplicationContext.class);\r\n    replay(objectPropertyAccessor, applicationContextPropertyAccessor, requestScopePropertyAccessor, sessionScopePropertyAccessor, applicationScopePropertyAccessor, request, applicationContext);\r\n    PropertyAccessorDelegateFactory<Request> factory = new TilesContextPropertyAccessorDelegateFactory(objectPropertyAccessor, applicationContextPropertyAccessor, requestScopePropertyAccessor, sessionScopePropertyAccessor);\r\n    assertEquals(requestScopePropertyAccessor, factory.getPropertyAccessor(\"attribute\", request));\r\n    verify(objectPropertyAccessor, applicationContextPropertyAccessor, requestScopePropertyAccessor, sessionScopePropertyAccessor, applicationScopePropertyAccessor, request, applicationContext);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\plugins\\tiles\\src\\test\\java\\org\\apache\\tiles\\ognl\\TilesContextPropertyAccessorDelegateFactoryTest.java",
  "methodName" : "testGetPropertyAccessorRequestScopeDefault",
  "sourceCode" : "/**\r\n * Test method for\r\n * {@link TilesContextPropertyAccessorDelegateFactory#getPropertyAccessor(String, Request)}\r\n * .\r\n */\r\n@Test\r\npublic void testGetPropertyAccessorRequestScopeDefault() {\r\n    PropertyAccessor objectPropertyAccessor = createMock(PropertyAccessor.class);\r\n    PropertyAccessor applicationContextPropertyAccessor = createMock(PropertyAccessor.class);\r\n    PropertyAccessor requestScopePropertyAccessor = createMock(PropertyAccessor.class);\r\n    PropertyAccessor sessionScopePropertyAccessor = createMock(PropertyAccessor.class);\r\n    PropertyAccessor applicationScopePropertyAccessor = createMock(PropertyAccessor.class);\r\n    Request request = createMock(Request.class);\r\n    ApplicationContext applicationContext = createMock(ApplicationContext.class);\r\n    replay(objectPropertyAccessor, applicationContextPropertyAccessor, requestScopePropertyAccessor, sessionScopePropertyAccessor, applicationScopePropertyAccessor, request, applicationContext);\r\n    PropertyAccessorDelegateFactory<Request> factory = new TilesContextPropertyAccessorDelegateFactory(objectPropertyAccessor, applicationContextPropertyAccessor, requestScopePropertyAccessor, sessionScopePropertyAccessor);\r\n    assertEquals(requestScopePropertyAccessor, factory.getPropertyAccessor(\"attribute\", request));\r\n    verify(objectPropertyAccessor, applicationContextPropertyAccessor, requestScopePropertyAccessor, sessionScopePropertyAccessor, applicationScopePropertyAccessor, request, applicationContext);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\plugins\\tiles\\src\\test\\java\\org\\apache\\tiles\\request\\AbstractClientRequestTest.java",
  "methodName" : "testDispatch",
  "sourceCode" : "/**\r\n * Test method for {@link AbstractClientRequest#dispatch(String)}.\r\n *\r\n * @throws IOException If something goes wrong.\r\n */\r\n@Test\r\npublic void testDispatch() throws IOException {\r\n    Map<String, Object> requestScope = new HashMap<>();\r\n    expect(request.getContext(Request.REQUEST_SCOPE)).andReturn(requestScope).anyTimes();\r\n    request.doForward(\"/my/path.html\");\r\n    request.doInclude(\"/my/path2.html\");\r\n    replay(request, applicationContext);\r\n    request.dispatch(\"/my/path.html\");\r\n    request.dispatch(\"/my/path2.html\");\r\n    verify(request, applicationContext);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\plugins\\tiles\\src\\test\\java\\org\\apache\\tiles\\request\\AbstractClientRequestTest.java",
  "methodName" : "testInclude",
  "sourceCode" : "/**\r\n * Test method for {@link AbstractClientRequest#include(String)}.\r\n *\r\n * @throws IOException If something goes wrong.\r\n */\r\n@Test\r\npublic void testInclude() throws IOException {\r\n    Map<String, Object> requestScope = new HashMap<>();\r\n    expect(request.getContext(Request.REQUEST_SCOPE)).andReturn(requestScope).anyTimes();\r\n    request.doInclude(\"/my/path2.html\");\r\n    replay(request, applicationContext);\r\n    request.include(\"/my/path2.html\");\r\n    assertTrue((Boolean) request.getContext(Request.REQUEST_SCOPE).get(AbstractRequest.FORCE_INCLUDE_ATTRIBUTE_NAME));\r\n    verify(request, applicationContext);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\plugins\\tiles\\src\\test\\java\\org\\apache\\tiles\\request\\AbstractClientRequestTest.java",
  "methodName" : "testGetApplicationContext",
  "sourceCode" : "/**\r\n * Test method for {@link AbstractClientRequest#getApplicationContext()}.\r\n */\r\n@Test\r\npublic void testGetApplicationContext() {\r\n    replay(request, applicationContext);\r\n    assertEquals(applicationContext, request.getApplicationContext());\r\n    verify(request, applicationContext);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\plugins\\tiles\\src\\test\\java\\org\\apache\\tiles\\request\\AbstractClientRequestTest.java",
  "methodName" : "testGetContext",
  "sourceCode" : "/**\r\n * Test method for {@link AbstractClientRequest#getContext(String)}.\r\n */\r\n@Test\r\npublic void testGetContext() {\r\n    Map<String, Object> scope = createMock(Map.class);\r\n    expect(request.getContext(\"myScope\")).andReturn(scope);\r\n    replay(request, applicationContext, scope);\r\n    assertEquals(scope, request.getContext(\"myScope\"));\r\n    verify(request, applicationContext, scope);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\plugins\\tiles\\src\\test\\java\\org\\apache\\tiles\\request\\AbstractClientRequestTest.java",
  "methodName" : "testGetAvailableScopes",
  "sourceCode" : "/**\r\n * Test method for {@link AbstractClientRequest#getAvailableScopes()}.\r\n */\r\n@Test\r\npublic void testGetAvailableScopes() {\r\n    String[] scopes = new String[] { \"one\", \"two\", \"three\" };\r\n    expect(request.getAvailableScopes()).andReturn(Arrays.asList(scopes));\r\n    replay(request, applicationContext);\r\n    assertArrayEquals(scopes, request.getAvailableScopes().toArray());\r\n    verify(request, applicationContext);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\plugins\\tiles\\src\\test\\java\\org\\apache\\tiles\\request\\AbstractClientRequestTest.java",
  "methodName" : "testGetApplicationScope",
  "sourceCode" : "/**\r\n * Test method for {@link AbstractClientRequest#getApplicationScope()}.\r\n */\r\n@Test\r\npublic void testGetApplicationScope() {\r\n    replay(request, applicationContext);\r\n    assertEquals(applicationScope, request.getApplicationScope());\r\n    verify(request, applicationContext);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\plugins\\tiles\\src\\test\\java\\org\\apache\\tiles\\request\\AbstractRequestTest.java",
  "methodName" : "testSetForceInclude",
  "sourceCode" : "/**\r\n * Test method for {@link AbstractRequest#setForceInclude(boolean)}.\r\n */\r\n@Test\r\npublic void testSetForceInclude() {\r\n    AbstractRequest request = createMockBuilder(AbstractRequest.class).createMock();\r\n    Map<String, Object> scope = new HashMap<>();\r\n    expect(request.getContext(Request.REQUEST_SCOPE)).andReturn(scope).anyTimes();\r\n    replay(request);\r\n    assertFalse(request.isForceInclude());\r\n    request.setForceInclude(true);\r\n    assertTrue(request.isForceInclude());\r\n    verify(request);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\plugins\\tiles\\src\\test\\java\\org\\apache\\tiles\\request\\AbstractViewRequestTest.java",
  "methodName" : "testDispatch",
  "sourceCode" : "/**\r\n * Test method for {@link AbstractViewRequest#dispatch(String)}.\r\n *\r\n * @throws IOException If something goes wrong.\r\n */\r\n@Test\r\npublic void testDispatch() throws IOException {\r\n    Map<String, Object> requestScope = new HashMap<>();\r\n    expect(request.getContext(Request.REQUEST_SCOPE)).andReturn(requestScope);\r\n    wrappedRequest.include(\"/my/path.html\");\r\n    replay(wrappedRequest, request, applicationContext);\r\n    request.dispatch(\"/my/path.html\");\r\n    assertTrue((Boolean) requestScope.get(AbstractRequest.FORCE_INCLUDE_ATTRIBUTE_NAME));\r\n    verify(wrappedRequest, request, applicationContext);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\plugins\\tiles\\src\\test\\java\\org\\apache\\tiles\\request\\AbstractViewRequestTest.java",
  "methodName" : "testInclude",
  "sourceCode" : "/**\r\n * Test method for {@link AbstractViewRequest#include(String)}.\r\n *\r\n * @throws IOException If something goes wrong.\r\n */\r\n@Test\r\npublic void testInclude() throws IOException {\r\n    Map<String, Object> requestScope = new HashMap<>();\r\n    expect(request.getContext(Request.REQUEST_SCOPE)).andReturn(requestScope);\r\n    wrappedRequest.include(\"/my/path.html\");\r\n    replay(wrappedRequest, request, applicationContext);\r\n    request.include(\"/my/path.html\");\r\n    assertTrue((Boolean) requestScope.get(AbstractRequest.FORCE_INCLUDE_ATTRIBUTE_NAME));\r\n    verify(wrappedRequest, request, applicationContext);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\plugins\\tiles\\src\\test\\java\\org\\apache\\tiles\\request\\AbstractViewRequestTest.java",
  "methodName" : "testDoInclude",
  "sourceCode" : "/**\r\n * Test method for {@link AbstractViewRequest#doInclude(String)}.\r\n *\r\n * @throws IOException If something goes wrong.\r\n */\r\n@Test\r\npublic void testDoInclude() throws IOException {\r\n    wrappedRequest.include(\"/my/path.html\");\r\n    replay(wrappedRequest, request, applicationContext);\r\n    request.doInclude(\"/my/path.html\");\r\n    verify(wrappedRequest, request, applicationContext);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\plugins\\tiles\\src\\test\\java\\org\\apache\\tiles\\request\\ApplicationAccessTest.java",
  "methodName" : "testRegister",
  "sourceCode" : "/**\r\n * Test method for {@link ApplicationAccess#register(ApplicationContext)}.\r\n */\r\n@Test\r\npublic void testRegister() {\r\n    ApplicationContext applicationContext = createMock(ApplicationContext.class);\r\n    Map<String, Object> applicationScope = createMock(Map.class);\r\n    expect(applicationContext.getApplicationScope()).andReturn(applicationScope);\r\n    expect(applicationScope.put(ApplicationAccess.APPLICATION_CONTEXT_ATTRIBUTE, applicationContext)).andReturn(null);\r\n    replay(applicationContext, applicationScope);\r\n    ApplicationAccess.register(applicationContext);\r\n    verify(applicationContext, applicationScope);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\plugins\\tiles\\src\\test\\java\\org\\apache\\tiles\\request\\collection\\AddableParameterMapTest.java",
  "methodName" : "testEntrySet",
  "sourceCode" : "/**\r\n * Test method for {@link AddableParameterMap#entrySet()}.\r\n */\r\n@Test\r\npublic void testEntrySet() {\r\n    Set<Map.Entry<String, String>> entrySet = map.entrySet();\r\n    MapEntry<String, String> entry1 = new MapEntry<>(\"one\", \"value1\", false);\r\n    MapEntry<String, String> entry2 = new MapEntry<>(\"two\", \"value2\", false);\r\n    List<Map.Entry<String, String>> entries = new ArrayList<>(2);\r\n    entries.add(entry1);\r\n    entries.add(entry2);\r\n    extractor.setValue(\"one\", \"value1\");\r\n    expectLastCall().times(2);\r\n    extractor.setValue(\"two\", \"value2\");\r\n    replay(extractor);\r\n    entrySet.add(entry1);\r\n    entrySet.addAll(entries);\r\n    verify(extractor);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\plugins\\tiles\\src\\test\\java\\org\\apache\\tiles\\request\\collection\\AddableParameterMapTest.java",
  "methodName" : "testPut",
  "sourceCode" : "/**\r\n * Test method for {@link AddableParameterMap#put(String, String)}.\r\n */\r\n@Test\r\npublic void testPut() {\r\n    expect(extractor.getValue(\"one\")).andReturn(null);\r\n    extractor.setValue(\"one\", \"value1\");\r\n    replay(extractor);\r\n    assertNull(map.put(\"one\", \"value1\"));\r\n    verify(extractor);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\plugins\\tiles\\src\\test\\java\\org\\apache\\tiles\\request\\collection\\AddableParameterMapTest.java",
  "methodName" : "testPutAll",
  "sourceCode" : "/**\r\n * Test method for {@link AddableParameterMap#putAll(Map)}.\r\n */\r\n@Test\r\npublic void testPutAll() {\r\n    Map<String, String> map = new HashMap<>();\r\n    map.put(\"one\", \"value1\");\r\n    map.put(\"two\", \"value2\");\r\n    extractor.setValue(\"one\", \"value1\");\r\n    extractor.setValue(\"two\", \"value2\");\r\n    replay(extractor);\r\n    this.map.putAll(map);\r\n    verify(extractor);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\plugins\\tiles\\src\\test\\java\\org\\apache\\tiles\\request\\collection\\CollectionUtilTest.java",
  "methodName" : "testKey",
  "sourceCode" : "@Test\r\npublic void testKey() {\r\n    assertEquals(\"1\", CollectionUtil.key(1));\r\n    assertEquals(\"hello\", CollectionUtil.key(\"hello\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\plugins\\tiles\\src\\test\\java\\org\\apache\\tiles\\request\\collection\\CollectionUtilTest.java",
  "methodName" : "testKeyException",
  "sourceCode" : "@Test(expected = IllegalArgumentException.class)\r\npublic void testKeyException() {\r\n    CollectionUtil.key(null);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\plugins\\tiles\\src\\test\\java\\org\\apache\\tiles\\request\\collection\\CollectionUtilTest.java",
  "methodName" : "testEnumerationSize",
  "sourceCode" : "@Test\r\npublic void testEnumerationSize() {\r\n    Enumeration<Object> enumeration = createMock(Enumeration.class);\r\n    expect(enumeration.hasMoreElements()).andReturn(true);\r\n    expect(enumeration.nextElement()).andReturn(1);\r\n    expect(enumeration.hasMoreElements()).andReturn(true);\r\n    expect(enumeration.nextElement()).andReturn(1);\r\n    expect(enumeration.hasMoreElements()).andReturn(false);\r\n    replay(enumeration);\r\n    assertEquals(2, CollectionUtil.enumerationSize(enumeration));\r\n    verify(enumeration);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\plugins\\tiles\\src\\test\\java\\org\\apache\\tiles\\request\\collection\\HeaderValuesCollectionTest.java",
  "methodName" : "testAdd",
  "sourceCode" : "/**\r\n * Tests {@link Collection#add(Object)}.\r\n */\r\n@Test(expected = UnsupportedOperationException.class)\r\npublic void testAdd() {\r\n    coll.add(null);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\plugins\\tiles\\src\\test\\java\\org\\apache\\tiles\\request\\collection\\HeaderValuesCollectionTest.java",
  "methodName" : "testAddAll",
  "sourceCode" : "@Test(expected = UnsupportedOperationException.class)\r\npublic void testAddAll() {\r\n    coll.addAll(null);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\plugins\\tiles\\src\\test\\java\\org\\apache\\tiles\\request\\collection\\HeaderValuesCollectionTest.java",
  "methodName" : "testClear",
  "sourceCode" : "@Test(expected = UnsupportedOperationException.class)\r\npublic void testClear() {\r\n    coll.clear();\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\plugins\\tiles\\src\\test\\java\\org\\apache\\tiles\\request\\collection\\HeaderValuesCollectionTest.java",
  "methodName" : "testContainsValue",
  "sourceCode" : "/**\r\n * Tests {@link Collection#contains(Object)}.\r\n */\r\n@Test\r\npublic void testContainsValue() {\r\n    assertFalse(map.containsValue(1));\r\n    Enumeration<String> keys = createMock(Enumeration.class);\r\n    Enumeration<String> values1 = createMock(Enumeration.class);\r\n    Enumeration<String> values2 = createMock(Enumeration.class);\r\n    expect(extractor.getKeys()).andReturn(keys);\r\n    expect(keys.hasMoreElements()).andReturn(true);\r\n    expect(keys.nextElement()).andReturn(\"one\");\r\n    expect(keys.hasMoreElements()).andReturn(true);\r\n    expect(keys.nextElement()).andReturn(\"two\");\r\n    expect(extractor.getValues(\"one\")).andReturn(values1);\r\n    expect(values1.hasMoreElements()).andReturn(true);\r\n    expect(values1.nextElement()).andReturn(\"value1\");\r\n    expect(values1.hasMoreElements()).andReturn(false);\r\n    expect(extractor.getValues(\"two\")).andReturn(values2);\r\n    expect(values2.hasMoreElements()).andReturn(true);\r\n    expect(values2.nextElement()).andReturn(\"value2\");\r\n    expect(values2.hasMoreElements()).andReturn(true);\r\n    expect(values2.nextElement()).andReturn(\"value3\");\r\n    expect(values2.hasMoreElements()).andReturn(false);\r\n    replay(extractor, keys, values1, values2);\r\n    assertTrue(coll.contains(new String[] { \"value2\", \"value3\" }));\r\n    verify(extractor, keys, values1, values2);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\plugins\\tiles\\src\\test\\java\\org\\apache\\tiles\\request\\collection\\HeaderValuesCollectionTest.java",
  "methodName" : "testContainsValueFalse",
  "sourceCode" : "/**\r\n * Tests {@link Collection#contains(Object)}.\r\n */\r\n@Test\r\npublic void testContainsValueFalse() {\r\n    Enumeration<String> keys = createMock(Enumeration.class);\r\n    Enumeration<String> values1 = createMock(Enumeration.class);\r\n    Enumeration<String> values2 = createMock(Enumeration.class);\r\n    expect(extractor.getKeys()).andReturn(keys);\r\n    expect(keys.hasMoreElements()).andReturn(true);\r\n    expect(keys.nextElement()).andReturn(\"one\");\r\n    expect(keys.hasMoreElements()).andReturn(true);\r\n    expect(keys.nextElement()).andReturn(\"two\");\r\n    expect(keys.hasMoreElements()).andReturn(false);\r\n    expect(extractor.getValues(\"one\")).andReturn(values1);\r\n    expect(values1.hasMoreElements()).andReturn(true);\r\n    expect(values1.nextElement()).andReturn(\"value1\");\r\n    expect(values1.hasMoreElements()).andReturn(false);\r\n    expect(extractor.getValues(\"two\")).andReturn(values2);\r\n    expect(values2.hasMoreElements()).andReturn(true);\r\n    expect(values2.nextElement()).andReturn(\"value2\");\r\n    expect(values2.hasMoreElements()).andReturn(true);\r\n    expect(values2.nextElement()).andReturn(\"value3\");\r\n    expect(values2.hasMoreElements()).andReturn(false);\r\n    replay(extractor, keys, values1, values2);\r\n    assertFalse(coll.contains(new String[] { \"value2\", \"value4\" }));\r\n    verify(extractor, keys, values1, values2);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\plugins\\tiles\\src\\test\\java\\org\\apache\\tiles\\request\\collection\\HeaderValuesCollectionTest.java",
  "methodName" : "testContainsAll",
  "sourceCode" : "@Test\r\npublic void testContainsAll() {\r\n    Enumeration<String> keys = createMock(Enumeration.class);\r\n    Enumeration<String> values1 = createMock(Enumeration.class);\r\n    Enumeration<String> values2 = createMock(Enumeration.class);\r\n    expect(extractor.getKeys()).andReturn(keys).times(2);\r\n    expect(keys.hasMoreElements()).andReturn(true);\r\n    expect(keys.nextElement()).andReturn(\"one\");\r\n    expect(keys.hasMoreElements()).andReturn(true);\r\n    expect(keys.nextElement()).andReturn(\"one\");\r\n    expect(keys.hasMoreElements()).andReturn(true);\r\n    expect(keys.nextElement()).andReturn(\"two\");\r\n    expect(extractor.getValues(\"one\")).andReturn(values1).times(2);\r\n    expect(values1.hasMoreElements()).andReturn(true);\r\n    expect(values1.nextElement()).andReturn(\"value1\");\r\n    expect(values1.hasMoreElements()).andReturn(false);\r\n    expect(values1.hasMoreElements()).andReturn(true);\r\n    expect(values1.nextElement()).andReturn(\"value1\");\r\n    expect(values1.hasMoreElements()).andReturn(false);\r\n    expect(extractor.getValues(\"two\")).andReturn(values2);\r\n    expect(values2.hasMoreElements()).andReturn(true);\r\n    expect(values2.nextElement()).andReturn(\"value2\");\r\n    expect(values2.hasMoreElements()).andReturn(true);\r\n    expect(values2.nextElement()).andReturn(\"value3\");\r\n    expect(values2.hasMoreElements()).andReturn(false);\r\n    replay(extractor, keys, values1, values2);\r\n    List<String[]> coll = new ArrayList<>();\r\n    coll.add(new String[] { \"value1\" });\r\n    coll.add(new String[] { \"value2\", \"value3\" });\r\n    assertTrue(this.coll.containsAll(coll));\r\n    verify(extractor, keys, values1, values2);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\plugins\\tiles\\src\\test\\java\\org\\apache\\tiles\\request\\collection\\HeaderValuesCollectionTest.java",
  "methodName" : "testContainsAllFalse",
  "sourceCode" : "@Test\r\npublic void testContainsAllFalse() {\r\n    Enumeration<String> keys = createMock(Enumeration.class);\r\n    Enumeration<String> values1 = createMock(Enumeration.class);\r\n    Enumeration<String> values2 = createMock(Enumeration.class);\r\n    expect(extractor.getKeys()).andReturn(keys);\r\n    expect(keys.hasMoreElements()).andReturn(true);\r\n    expect(keys.nextElement()).andReturn(\"one\");\r\n    expect(keys.hasMoreElements()).andReturn(true);\r\n    expect(keys.nextElement()).andReturn(\"two\");\r\n    expect(keys.hasMoreElements()).andReturn(false);\r\n    expect(extractor.getValues(\"one\")).andReturn(values1);\r\n    expect(values1.hasMoreElements()).andReturn(true);\r\n    expect(values1.nextElement()).andReturn(\"value1\");\r\n    expect(values1.hasMoreElements()).andReturn(false);\r\n    expect(extractor.getValues(\"two\")).andReturn(values2);\r\n    expect(values2.hasMoreElements()).andReturn(true);\r\n    expect(values2.nextElement()).andReturn(\"value2\");\r\n    expect(values2.hasMoreElements()).andReturn(true);\r\n    replay(extractor, keys, values1, values2);\r\n    List<String[]> coll = new ArrayList<>();\r\n    coll.add(new String[] { \"value4\" });\r\n    assertFalse(this.coll.containsAll(coll));\r\n    verify(extractor, keys, values1, values2);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\plugins\\tiles\\src\\test\\java\\org\\apache\\tiles\\request\\collection\\HeaderValuesCollectionTest.java",
  "methodName" : "testIsEmpty",
  "sourceCode" : "/**\r\n * Test method for {@link Collection#isEmpty()}.\r\n */\r\n@Test\r\npublic void testIsEmpty() {\r\n    Enumeration<String> keys = createMock(Enumeration.class);\r\n    expect(extractor.getKeys()).andReturn(keys);\r\n    expect(keys.hasMoreElements()).andReturn(true);\r\n    replay(extractor, keys);\r\n    assertFalse(coll.isEmpty());\r\n    verify(extractor, keys);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\plugins\\tiles\\src\\test\\java\\org\\apache\\tiles\\request\\collection\\HeaderValuesCollectionTest.java",
  "methodName" : "testIterator",
  "sourceCode" : "/**\r\n * Test method for {@link Collection#iterator()}.\r\n */\r\n@Test\r\npublic void testIterator() {\r\n    Enumeration<String> keys = createMock(Enumeration.class);\r\n    Enumeration<String> values2 = createMock(Enumeration.class);\r\n    expect(extractor.getKeys()).andReturn(keys);\r\n    expect(keys.hasMoreElements()).andReturn(true);\r\n    expect(keys.hasMoreElements()).andReturn(true);\r\n    expect(keys.nextElement()).andReturn(\"two\");\r\n    expect(extractor.getValues(\"two\")).andReturn(values2);\r\n    expect(values2.hasMoreElements()).andReturn(true);\r\n    expect(values2.nextElement()).andReturn(\"value2\");\r\n    expect(values2.hasMoreElements()).andReturn(true);\r\n    expect(values2.nextElement()).andReturn(\"value3\");\r\n    expect(values2.hasMoreElements()).andReturn(false);\r\n    replay(extractor, keys, values2);\r\n    Iterator<String[]> entryIt = coll.iterator();\r\n    assertTrue(entryIt.hasNext());\r\n    assertArrayEquals(new String[] { \"value2\", \"value3\" }, entryIt.next());\r\n    verify(extractor, keys, values2);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\plugins\\tiles\\src\\test\\java\\org\\apache\\tiles\\request\\collection\\HeaderValuesCollectionTest.java",
  "methodName" : "testIteratorRemove",
  "sourceCode" : "/**\r\n * Test method for {@link Collection#iterator()}.\r\n */\r\n@Test(expected = UnsupportedOperationException.class)\r\npublic void testIteratorRemove() {\r\n    Enumeration<String> keys = createMock(Enumeration.class);\r\n    expect(extractor.getKeys()).andReturn(keys);\r\n    try {\r\n        replay(extractor, keys);\r\n        coll.iterator().remove();\r\n    } finally {\r\n        verify(extractor, keys);\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\plugins\\tiles\\src\\test\\java\\org\\apache\\tiles\\request\\collection\\HeaderValuesCollectionTest.java",
  "methodName" : "testRemove",
  "sourceCode" : "/**\r\n * Tests {@link Collection#remove(Object)}.\r\n */\r\n@Test(expected = UnsupportedOperationException.class)\r\npublic void testRemove() {\r\n    coll.remove(null);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\plugins\\tiles\\src\\test\\java\\org\\apache\\tiles\\request\\collection\\HeaderValuesCollectionTest.java",
  "methodName" : "testRemoveAll",
  "sourceCode" : "/**\r\n * Tests {@link Collection#removeAll(Collection)}.\r\n */\r\n@Test(expected = UnsupportedOperationException.class)\r\npublic void testRemoveAll() {\r\n    coll.removeAll(null);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\plugins\\tiles\\src\\test\\java\\org\\apache\\tiles\\request\\collection\\HeaderValuesCollectionTest.java",
  "methodName" : "testRetainAll",
  "sourceCode" : "/**\r\n * Tests {@link Collection#retainAll(Collection)}.\r\n */\r\n@Test(expected = UnsupportedOperationException.class)\r\npublic void testRetainAll() {\r\n    coll.retainAll(null);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\plugins\\tiles\\src\\test\\java\\org\\apache\\tiles\\request\\collection\\HeaderValuesCollectionTest.java",
  "methodName" : "testSize",
  "sourceCode" : "/**\r\n * Test method for {@link HeaderValuesMap#size()}.\r\n */\r\n@Test\r\npublic void testSize() {\r\n    Enumeration<String> keys = createMock(Enumeration.class);\r\n    expect(extractor.getKeys()).andReturn(keys);\r\n    expect(keys.hasMoreElements()).andReturn(true);\r\n    expect(keys.nextElement()).andReturn(\"one\");\r\n    expect(keys.hasMoreElements()).andReturn(true);\r\n    expect(keys.nextElement()).andReturn(\"two\");\r\n    expect(keys.hasMoreElements()).andReturn(false);\r\n    replay(extractor, keys);\r\n    assertEquals(2, coll.size());\r\n    verify(extractor, keys);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\plugins\\tiles\\src\\test\\java\\org\\apache\\tiles\\request\\collection\\HeaderValuesCollectionTest.java",
  "methodName" : "testToArray",
  "sourceCode" : "/**\r\n * Test method for {@link Collection#toArray()}.\r\n */\r\n@Test\r\npublic void testToArray() {\r\n    Enumeration<String> keys = createMock(Enumeration.class);\r\n    Enumeration<String> values1 = createMock(Enumeration.class);\r\n    Enumeration<String> values2 = createMock(Enumeration.class);\r\n    expect(extractor.getKeys()).andReturn(keys);\r\n    expect(keys.hasMoreElements()).andReturn(true);\r\n    expect(keys.nextElement()).andReturn(\"one\");\r\n    expect(keys.hasMoreElements()).andReturn(true);\r\n    expect(keys.nextElement()).andReturn(\"two\");\r\n    expect(keys.hasMoreElements()).andReturn(false);\r\n    expect(extractor.getValues(\"one\")).andReturn(values1);\r\n    expect(values1.hasMoreElements()).andReturn(true);\r\n    expect(values1.nextElement()).andReturn(\"value1\");\r\n    expect(values1.hasMoreElements()).andReturn(false);\r\n    expect(extractor.getValues(\"two\")).andReturn(values2);\r\n    expect(values2.hasMoreElements()).andReturn(true);\r\n    expect(values2.nextElement()).andReturn(\"value2\");\r\n    expect(values2.hasMoreElements()).andReturn(true);\r\n    expect(values2.nextElement()).andReturn(\"value3\");\r\n    expect(values2.hasMoreElements()).andReturn(false);\r\n    String[][] entryArray = new String[2][];\r\n    entryArray[0] = new String[] { \"value1\" };\r\n    entryArray[1] = new String[] { \"value2\", \"value3\" };\r\n    replay(extractor, keys, values1, values2);\r\n    assertArrayEquals(entryArray, coll.toArray());\r\n    verify(extractor, keys, values1, values2);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\plugins\\tiles\\src\\test\\java\\org\\apache\\tiles\\request\\collection\\HeaderValuesCollectionTest.java",
  "methodName" : "testToArrayTArray",
  "sourceCode" : "/**\r\n * Test method for {@link Collection#toArray(Object[])}.\r\n */\r\n@Test\r\npublic void testToArrayTArray() {\r\n    Enumeration<String> keys = createMock(Enumeration.class);\r\n    Enumeration<String> values1 = createMock(Enumeration.class);\r\n    Enumeration<String> values2 = createMock(Enumeration.class);\r\n    expect(extractor.getKeys()).andReturn(keys);\r\n    expect(keys.hasMoreElements()).andReturn(true);\r\n    expect(keys.nextElement()).andReturn(\"one\");\r\n    expect(keys.hasMoreElements()).andReturn(true);\r\n    expect(keys.nextElement()).andReturn(\"two\");\r\n    expect(keys.hasMoreElements()).andReturn(false);\r\n    expect(extractor.getValues(\"one\")).andReturn(values1);\r\n    expect(values1.hasMoreElements()).andReturn(true);\r\n    expect(values1.nextElement()).andReturn(\"value1\");\r\n    expect(values1.hasMoreElements()).andReturn(false);\r\n    expect(extractor.getValues(\"two\")).andReturn(values2);\r\n    expect(values2.hasMoreElements()).andReturn(true);\r\n    expect(values2.nextElement()).andReturn(\"value2\");\r\n    expect(values2.hasMoreElements()).andReturn(true);\r\n    expect(values2.nextElement()).andReturn(\"value3\");\r\n    expect(values2.hasMoreElements()).andReturn(false);\r\n    String[][] entryArray = new String[2][];\r\n    entryArray[0] = new String[] { \"value1\" };\r\n    entryArray[1] = new String[] { \"value2\", \"value3\" };\r\n    String[][] realArray = new String[2][];\r\n    replay(extractor, keys, values1, values2);\r\n    assertArrayEquals(entryArray, coll.toArray(realArray));\r\n    verify(extractor, keys, values1, values2);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\plugins\\tiles\\src\\test\\java\\org\\apache\\tiles\\request\\collection\\HeaderValuesMapEntrySetTest.java",
  "methodName" : "testAdd",
  "sourceCode" : "/**\r\n * Tests {@link Set#add(Object)}.\r\n */\r\n@Test(expected = UnsupportedOperationException.class)\r\npublic void testAdd() {\r\n    entrySet.add(null);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\plugins\\tiles\\src\\test\\java\\org\\apache\\tiles\\request\\collection\\HeaderValuesMapEntrySetTest.java",
  "methodName" : "testAddAll",
  "sourceCode" : "@Test(expected = UnsupportedOperationException.class)\r\npublic void testAddAll() {\r\n    entrySet.addAll(null);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\plugins\\tiles\\src\\test\\java\\org\\apache\\tiles\\request\\collection\\HeaderValuesMapEntrySetTest.java",
  "methodName" : "testClear",
  "sourceCode" : "@Test(expected = UnsupportedOperationException.class)\r\npublic void testClear() {\r\n    entrySet.clear();\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\plugins\\tiles\\src\\test\\java\\org\\apache\\tiles\\request\\collection\\HeaderValuesMapEntrySetTest.java",
  "methodName" : "testContains",
  "sourceCode" : "/**\r\n * Tests {@link Set#contains(Object)}.\r\n */\r\n@Test\r\npublic void testContains() {\r\n    Map.Entry<String, String[]> entry = createMock(Map.Entry.class);\r\n    Enumeration<String> values2 = createMock(Enumeration.class);\r\n    expect(entry.getKey()).andReturn(\"two\");\r\n    expect(entry.getValue()).andReturn(new String[] { \"value2\", \"value3\" });\r\n    expect(extractor.getValues(\"two\")).andReturn(values2);\r\n    expect(values2.hasMoreElements()).andReturn(true);\r\n    expect(values2.nextElement()).andReturn(\"value2\");\r\n    expect(values2.hasMoreElements()).andReturn(true);\r\n    expect(values2.nextElement()).andReturn(\"value3\");\r\n    expect(values2.hasMoreElements()).andReturn(false);\r\n    replay(extractor, entry, values2);\r\n    assertTrue(entrySet.contains(entry));\r\n    verify(extractor, entry, values2);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\plugins\\tiles\\src\\test\\java\\org\\apache\\tiles\\request\\collection\\HeaderValuesMapEntrySetTest.java",
  "methodName" : "testContainsAll",
  "sourceCode" : "@Test\r\npublic void testContainsAll() {\r\n    Enumeration<String> values1 = createMock(Enumeration.class);\r\n    Enumeration<String> values2 = createMock(Enumeration.class);\r\n    Map.Entry<String, String[]> entry1 = createMock(Map.Entry.class);\r\n    Map.Entry<String, String[]> entry2 = createMock(Map.Entry.class);\r\n    expect(entry1.getKey()).andReturn(\"one\");\r\n    expect(entry1.getValue()).andReturn(new String[] { \"value1\" });\r\n    expect(entry2.getKey()).andReturn(\"two\");\r\n    expect(entry2.getValue()).andReturn(new String[] { \"value2\", \"value3\" });\r\n    expect(extractor.getValues(\"one\")).andReturn(values1);\r\n    expect(values1.hasMoreElements()).andReturn(true);\r\n    expect(values1.nextElement()).andReturn(\"value1\");\r\n    expect(values1.hasMoreElements()).andReturn(false);\r\n    expect(extractor.getValues(\"two\")).andReturn(values2);\r\n    expect(values2.hasMoreElements()).andReturn(true);\r\n    expect(values2.nextElement()).andReturn(\"value2\");\r\n    expect(values2.hasMoreElements()).andReturn(true);\r\n    expect(values2.nextElement()).andReturn(\"value3\");\r\n    expect(values2.hasMoreElements()).andReturn(false);\r\n    replay(extractor, values1, values2, entry1, entry2);\r\n    List<Map.Entry<String, String[]>> coll = new ArrayList<>();\r\n    coll.add(entry1);\r\n    coll.add(entry2);\r\n    assertTrue(entrySet.containsAll(coll));\r\n    verify(extractor, values1, values2, entry1, entry2);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\plugins\\tiles\\src\\test\\java\\org\\apache\\tiles\\request\\collection\\HeaderValuesMapEntrySetTest.java",
  "methodName" : "testContainsAllFalse",
  "sourceCode" : "@Test\r\npublic void testContainsAllFalse() {\r\n    Enumeration<String> values1 = createMock(Enumeration.class);\r\n    Map.Entry<String, String[]> entry1 = createMock(Map.Entry.class);\r\n    expect(entry1.getKey()).andReturn(\"one\");\r\n    expect(entry1.getValue()).andReturn(new String[] { \"value4\" });\r\n    expect(extractor.getValues(\"one\")).andReturn(values1);\r\n    expect(values1.hasMoreElements()).andReturn(true);\r\n    expect(values1.nextElement()).andReturn(\"value1\");\r\n    replay(extractor, values1, entry1);\r\n    List<Map.Entry<String, String[]>> coll = new ArrayList<>();\r\n    coll.add(entry1);\r\n    assertFalse(entrySet.containsAll(coll));\r\n    verify(extractor, values1, entry1);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\plugins\\tiles\\src\\test\\java\\org\\apache\\tiles\\request\\collection\\HeaderValuesMapEntrySetTest.java",
  "methodName" : "testIsEmpty",
  "sourceCode" : "/**\r\n * Test method for {@link Set#isEmpty()}.\r\n */\r\n@Test\r\npublic void testIsEmpty() {\r\n    Enumeration<String> keys = createMock(Enumeration.class);\r\n    expect(extractor.getKeys()).andReturn(keys);\r\n    expect(keys.hasMoreElements()).andReturn(true);\r\n    replay(extractor, keys);\r\n    assertFalse(entrySet.isEmpty());\r\n    verify(extractor, keys);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\plugins\\tiles\\src\\test\\java\\org\\apache\\tiles\\request\\collection\\HeaderValuesMapEntrySetTest.java",
  "methodName" : "testIterator",
  "sourceCode" : "/**\r\n * Test method for {@link Set#iterator()}.\r\n */\r\n@Test\r\npublic void testIterator() {\r\n    Enumeration<String> keys = createMock(Enumeration.class);\r\n    Enumeration<String> values2 = createMock(Enumeration.class);\r\n    expect(extractor.getKeys()).andReturn(keys);\r\n    expect(keys.hasMoreElements()).andReturn(true);\r\n    expect(keys.hasMoreElements()).andReturn(true);\r\n    expect(keys.nextElement()).andReturn(\"two\");\r\n    expect(extractor.getValues(\"two\")).andReturn(values2);\r\n    expect(values2.hasMoreElements()).andReturn(true);\r\n    expect(values2.nextElement()).andReturn(\"value2\");\r\n    expect(values2.hasMoreElements()).andReturn(true);\r\n    expect(values2.nextElement()).andReturn(\"value3\");\r\n    expect(values2.hasMoreElements()).andReturn(false);\r\n    replay(extractor, keys, values2);\r\n    Iterator<Map.Entry<String, String[]>> entryIt = entrySet.iterator();\r\n    assertTrue(entryIt.hasNext());\r\n    MapEntryArrayValues<String, String> entry = new MapEntryArrayValues<>(\"two\", new String[] { \"value2\", \"value3\" }, false);\r\n    assertEquals(entry, entryIt.next());\r\n    verify(extractor, keys, values2);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\plugins\\tiles\\src\\test\\java\\org\\apache\\tiles\\request\\collection\\HeaderValuesMapEntrySetTest.java",
  "methodName" : "testIteratorRemove",
  "sourceCode" : "/**\r\n * Test method for {@link Set#iterator()}.\r\n */\r\n@Test(expected = UnsupportedOperationException.class)\r\npublic void testIteratorRemove() {\r\n    Enumeration<String> keys = createMock(Enumeration.class);\r\n    expect(extractor.getKeys()).andReturn(keys);\r\n    try {\r\n        replay(extractor, keys);\r\n        entrySet.iterator().remove();\r\n    } finally {\r\n        verify(extractor, keys);\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\plugins\\tiles\\src\\test\\java\\org\\apache\\tiles\\request\\collection\\HeaderValuesMapEntrySetTest.java",
  "methodName" : "testRemove",
  "sourceCode" : "/**\r\n * Tests {@link Set#remove(Object)}.\r\n */\r\n@Test(expected = UnsupportedOperationException.class)\r\npublic void testRemove() {\r\n    entrySet.remove(null);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\plugins\\tiles\\src\\test\\java\\org\\apache\\tiles\\request\\collection\\HeaderValuesMapEntrySetTest.java",
  "methodName" : "testRemoveAll",
  "sourceCode" : "/**\r\n * Tests {@link Set#removeAll(java.util.Collection)}.\r\n */\r\n@Test(expected = UnsupportedOperationException.class)\r\npublic void testRemoveAll() {\r\n    entrySet.removeAll(null);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\plugins\\tiles\\src\\test\\java\\org\\apache\\tiles\\request\\collection\\HeaderValuesMapEntrySetTest.java",
  "methodName" : "testRetainAll",
  "sourceCode" : "/**\r\n * Tests {@link Set#retainAll(java.util.Collection)}.\r\n */\r\n@Test(expected = UnsupportedOperationException.class)\r\npublic void testRetainAll() {\r\n    entrySet.retainAll(null);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\plugins\\tiles\\src\\test\\java\\org\\apache\\tiles\\request\\collection\\HeaderValuesMapEntrySetTest.java",
  "methodName" : "testSize",
  "sourceCode" : "/**\r\n * Test method for {@link HeaderValuesMap#size()}.\r\n */\r\n@Test\r\npublic void testSize() {\r\n    Enumeration<String> keys = createMock(Enumeration.class);\r\n    expect(extractor.getKeys()).andReturn(keys);\r\n    expect(keys.hasMoreElements()).andReturn(true);\r\n    expect(keys.nextElement()).andReturn(\"one\");\r\n    expect(keys.hasMoreElements()).andReturn(true);\r\n    expect(keys.nextElement()).andReturn(\"two\");\r\n    expect(keys.hasMoreElements()).andReturn(false);\r\n    replay(extractor, keys);\r\n    assertEquals(2, entrySet.size());\r\n    verify(extractor, keys);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\plugins\\tiles\\src\\test\\java\\org\\apache\\tiles\\request\\collection\\HeaderValuesMapEntrySetTest.java",
  "methodName" : "testToArray",
  "sourceCode" : "/**\r\n * Test method for {@link Set#toArray()}.\r\n */\r\n@SuppressWarnings(\"unchecked\")\r\n@Test\r\npublic void testToArray() {\r\n    Enumeration<String> keys = createMock(Enumeration.class);\r\n    Enumeration<String> values1 = createMock(Enumeration.class);\r\n    Enumeration<String> values2 = createMock(Enumeration.class);\r\n    expect(extractor.getKeys()).andReturn(keys);\r\n    expect(keys.hasMoreElements()).andReturn(true);\r\n    expect(keys.nextElement()).andReturn(\"one\");\r\n    expect(keys.hasMoreElements()).andReturn(true);\r\n    expect(keys.nextElement()).andReturn(\"two\");\r\n    expect(keys.hasMoreElements()).andReturn(false);\r\n    expect(extractor.getValues(\"one\")).andReturn(values1);\r\n    expect(values1.hasMoreElements()).andReturn(true);\r\n    expect(values1.nextElement()).andReturn(\"value1\");\r\n    expect(values1.hasMoreElements()).andReturn(false);\r\n    expect(extractor.getValues(\"two\")).andReturn(values2);\r\n    expect(values2.hasMoreElements()).andReturn(true);\r\n    expect(values2.nextElement()).andReturn(\"value2\");\r\n    expect(values2.hasMoreElements()).andReturn(true);\r\n    expect(values2.nextElement()).andReturn(\"value3\");\r\n    expect(values2.hasMoreElements()).andReturn(false);\r\n    MapEntryArrayValues<String, String>[] entryArray = new MapEntryArrayValues[2];\r\n    entryArray[0] = new MapEntryArrayValues<>(\"one\", new String[] { \"value1\" }, false);\r\n    entryArray[1] = new MapEntryArrayValues<>(\"two\", new String[] { \"value2\", \"value3\" }, false);\r\n    replay(extractor, keys, values1, values2);\r\n    assertArrayEquals(entryArray, entrySet.toArray());\r\n    verify(extractor, keys, values1, values2);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\plugins\\tiles\\src\\test\\java\\org\\apache\\tiles\\request\\collection\\HeaderValuesMapEntrySetTest.java",
  "methodName" : "testToArrayTArray",
  "sourceCode" : "/**\r\n * Test method for {@link Set#toArray(Object[])}.\r\n */\r\n@Test\r\n@SuppressWarnings(\"unchecked\")\r\npublic void testToArrayTArray() {\r\n    Enumeration<String> keys = createMock(Enumeration.class);\r\n    Enumeration<String> values1 = createMock(Enumeration.class);\r\n    Enumeration<String> values2 = createMock(Enumeration.class);\r\n    expect(extractor.getKeys()).andReturn(keys);\r\n    expect(keys.hasMoreElements()).andReturn(true);\r\n    expect(keys.nextElement()).andReturn(\"one\");\r\n    expect(keys.hasMoreElements()).andReturn(true);\r\n    expect(keys.nextElement()).andReturn(\"two\");\r\n    expect(keys.hasMoreElements()).andReturn(false);\r\n    expect(extractor.getValues(\"one\")).andReturn(values1);\r\n    expect(values1.hasMoreElements()).andReturn(true);\r\n    expect(values1.nextElement()).andReturn(\"value1\");\r\n    expect(values1.hasMoreElements()).andReturn(false);\r\n    expect(extractor.getValues(\"two\")).andReturn(values2);\r\n    expect(values2.hasMoreElements()).andReturn(true);\r\n    expect(values2.nextElement()).andReturn(\"value2\");\r\n    expect(values2.hasMoreElements()).andReturn(true);\r\n    expect(values2.nextElement()).andReturn(\"value3\");\r\n    expect(values2.hasMoreElements()).andReturn(false);\r\n    MapEntryArrayValues<String, String>[] entryArray = new MapEntryArrayValues[2];\r\n    entryArray[0] = new MapEntryArrayValues<>(\"one\", new String[] { \"value1\" }, false);\r\n    entryArray[1] = new MapEntryArrayValues<>(\"two\", new String[] { \"value2\", \"value3\" }, false);\r\n    MapEntryArrayValues<String, String>[] realArray = new MapEntryArrayValues[2];\r\n    replay(extractor, keys, values1, values2);\r\n    assertArrayEquals(entryArray, entrySet.toArray(realArray));\r\n    verify(extractor, keys, values1, values2);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\plugins\\tiles\\src\\test\\java\\org\\apache\\tiles\\request\\collection\\HeaderValuesMapTest.java",
  "methodName" : "testHashCode",
  "sourceCode" : "/**\r\n * Test method for {@link HeaderValuesMap#hashCode()}.\r\n */\r\n@Test\r\npublic void testHashCode() {\r\n    Enumeration<String> keys = createMock(Enumeration.class);\r\n    Enumeration<String> values1 = createMock(Enumeration.class);\r\n    Enumeration<String> values2 = createMock(Enumeration.class);\r\n    expect(extractor.getKeys()).andReturn(keys);\r\n    expect(keys.hasMoreElements()).andReturn(true);\r\n    expect(keys.nextElement()).andReturn(\"one\");\r\n    expect(keys.hasMoreElements()).andReturn(true);\r\n    expect(keys.nextElement()).andReturn(\"two\");\r\n    expect(keys.hasMoreElements()).andReturn(false);\r\n    expect(extractor.getValues(\"one\")).andReturn(values1);\r\n    expect(values1.hasMoreElements()).andReturn(true);\r\n    expect(values1.nextElement()).andReturn(\"value1\");\r\n    expect(values1.hasMoreElements()).andReturn(false);\r\n    expect(extractor.getValues(\"two\")).andReturn(values2);\r\n    expect(values2.hasMoreElements()).andReturn(true);\r\n    expect(values2.nextElement()).andReturn(\"value2\");\r\n    expect(values2.hasMoreElements()).andReturn(true);\r\n    expect(values2.nextElement()).andReturn(\"value3\");\r\n    expect(values2.hasMoreElements()).andReturn(false);\r\n    replay(extractor, keys, values1, values2);\r\n    assertEquals((\"one\".hashCode() ^ \"value1\".hashCode()) + (\"two\".hashCode() ^ (\"value2\".hashCode() + \"value3\".hashCode())), map.hashCode());\r\n    verify(extractor, keys, values1, values2);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\plugins\\tiles\\src\\test\\java\\org\\apache\\tiles\\request\\collection\\HeaderValuesMapTest.java",
  "methodName" : "testClear",
  "sourceCode" : "/**\r\n * Test method for {@link HeaderValuesMap#clear()}.\r\n */\r\n@Test(expected = UnsupportedOperationException.class)\r\npublic void testClear() {\r\n    map.clear();\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\plugins\\tiles\\src\\test\\java\\org\\apache\\tiles\\request\\collection\\HeaderValuesMapTest.java",
  "methodName" : "testContainsKey",
  "sourceCode" : "/**\r\n * Test method for {@link HeaderValuesMap#containsKey(Object)}.\r\n */\r\n@Test\r\npublic void testContainsKey() {\r\n    expect(extractor.getValue(\"one\")).andReturn(\"value1\");\r\n    expect(extractor.getValue(\"two\")).andReturn(null);\r\n    replay(extractor);\r\n    assertTrue(map.containsKey(\"one\"));\r\n    assertFalse(map.containsKey(\"two\"));\r\n    verify(extractor);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\plugins\\tiles\\src\\test\\java\\org\\apache\\tiles\\request\\collection\\HeaderValuesMapTest.java",
  "methodName" : "testContainsValue",
  "sourceCode" : "/**\r\n * Test method for {@link HeaderValuesMap#containsValue(Object)}.\r\n */\r\n@Test\r\npublic void testContainsValue() {\r\n    assertFalse(map.containsValue(1));\r\n    Enumeration<String> keys = createMock(Enumeration.class);\r\n    Enumeration<String> values1 = createMock(Enumeration.class);\r\n    Enumeration<String> values2 = createMock(Enumeration.class);\r\n    expect(extractor.getKeys()).andReturn(keys);\r\n    expect(keys.hasMoreElements()).andReturn(true);\r\n    expect(keys.nextElement()).andReturn(\"one\");\r\n    expect(keys.hasMoreElements()).andReturn(true);\r\n    expect(keys.nextElement()).andReturn(\"two\");\r\n    expect(extractor.getValues(\"one\")).andReturn(values1);\r\n    expect(values1.hasMoreElements()).andReturn(true);\r\n    expect(values1.nextElement()).andReturn(\"value1\");\r\n    expect(values1.hasMoreElements()).andReturn(false);\r\n    expect(extractor.getValues(\"two\")).andReturn(values2);\r\n    expect(values2.hasMoreElements()).andReturn(true);\r\n    expect(values2.nextElement()).andReturn(\"value2\");\r\n    expect(values2.hasMoreElements()).andReturn(true);\r\n    expect(values2.nextElement()).andReturn(\"value3\");\r\n    expect(values2.hasMoreElements()).andReturn(false);\r\n    replay(extractor, keys, values1, values2);\r\n    assertTrue(map.containsValue(new String[] { \"value2\", \"value3\" }));\r\n    verify(extractor, keys, values1, values2);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\plugins\\tiles\\src\\test\\java\\org\\apache\\tiles\\request\\collection\\HeaderValuesMapTest.java",
  "methodName" : "testContainsValueFalse",
  "sourceCode" : "/**\r\n * Test method for {@link HeaderValuesMap#containsValue(Object)}.\r\n */\r\n@Test\r\npublic void testContainsValueFalse() {\r\n    Enumeration<String> keys = createMock(Enumeration.class);\r\n    Enumeration<String> values1 = createMock(Enumeration.class);\r\n    Enumeration<String> values2 = createMock(Enumeration.class);\r\n    expect(extractor.getKeys()).andReturn(keys);\r\n    expect(keys.hasMoreElements()).andReturn(true);\r\n    expect(keys.nextElement()).andReturn(\"one\");\r\n    expect(keys.hasMoreElements()).andReturn(true);\r\n    expect(keys.nextElement()).andReturn(\"two\");\r\n    expect(keys.hasMoreElements()).andReturn(false);\r\n    expect(extractor.getValues(\"one\")).andReturn(values1);\r\n    expect(values1.hasMoreElements()).andReturn(true);\r\n    expect(values1.nextElement()).andReturn(\"value1\");\r\n    expect(values1.hasMoreElements()).andReturn(false);\r\n    expect(extractor.getValues(\"two\")).andReturn(values2);\r\n    expect(values2.hasMoreElements()).andReturn(true);\r\n    expect(values2.nextElement()).andReturn(\"value2\");\r\n    expect(values2.hasMoreElements()).andReturn(true);\r\n    expect(values2.nextElement()).andReturn(\"value3\");\r\n    expect(values2.hasMoreElements()).andReturn(false);\r\n    replay(extractor, keys, values1, values2);\r\n    assertFalse(map.containsValue(new String[] { \"value2\", \"value4\" }));\r\n    verify(extractor, keys, values1, values2);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\plugins\\tiles\\src\\test\\java\\org\\apache\\tiles\\request\\collection\\HeaderValuesMapTest.java",
  "methodName" : "testEqualsObject",
  "sourceCode" : "/**\r\n * Test method for {@link HeaderValuesMap#equals(Object)}.\r\n */\r\n@Test\r\npublic void testEqualsObject() {\r\n    Enumeration<String> keys = createMock(Enumeration.class);\r\n    Enumeration<String> values1 = createMock(Enumeration.class);\r\n    Enumeration<String> values2 = createMock(Enumeration.class);\r\n    EnumeratedValuesExtractor otherExtractor = createMock(EnumeratedValuesExtractor.class);\r\n    Enumeration<String> otherValues1 = createMock(Enumeration.class);\r\n    Enumeration<String> otherValues2 = createMock(Enumeration.class);\r\n    expect(extractor.getKeys()).andReturn(keys);\r\n    expect(keys.hasMoreElements()).andReturn(true);\r\n    expect(keys.nextElement()).andReturn(\"one\");\r\n    expect(keys.hasMoreElements()).andReturn(true);\r\n    expect(keys.nextElement()).andReturn(\"two\");\r\n    expect(keys.hasMoreElements()).andReturn(false);\r\n    expect(extractor.getValues(\"one\")).andReturn(values1);\r\n    expect(values1.hasMoreElements()).andReturn(true);\r\n    expect(values1.nextElement()).andReturn(\"value1\");\r\n    expect(values1.hasMoreElements()).andReturn(false);\r\n    expect(extractor.getValues(\"two\")).andReturn(values2);\r\n    expect(values2.hasMoreElements()).andReturn(true);\r\n    expect(values2.nextElement()).andReturn(\"value2\");\r\n    expect(values2.hasMoreElements()).andReturn(true);\r\n    expect(values2.nextElement()).andReturn(\"value3\");\r\n    expect(values2.hasMoreElements()).andReturn(false);\r\n    expect(otherExtractor.getValues(\"one\")).andReturn(otherValues1);\r\n    expect(otherValues1.hasMoreElements()).andReturn(true);\r\n    expect(otherValues1.nextElement()).andReturn(\"value1\");\r\n    expect(otherValues1.hasMoreElements()).andReturn(false);\r\n    expect(otherExtractor.getValues(\"two\")).andReturn(otherValues2);\r\n    expect(otherValues2.hasMoreElements()).andReturn(true);\r\n    expect(otherValues2.nextElement()).andReturn(\"value2\");\r\n    expect(otherValues2.hasMoreElements()).andReturn(true);\r\n    expect(otherValues2.nextElement()).andReturn(\"value3\");\r\n    expect(otherValues2.hasMoreElements()).andReturn(false);\r\n    replay(extractor, otherExtractor, keys, values1, values2, otherValues1, otherValues2);\r\n    HeaderValuesMap otherMap = new HeaderValuesMap(otherExtractor);\r\n    assertTrue(map.equals(otherMap));\r\n    verify(extractor, otherExtractor, keys, values1, values2, otherValues1, otherValues2);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\plugins\\tiles\\src\\test\\java\\org\\apache\\tiles\\request\\collection\\HeaderValuesMapTest.java",
  "methodName" : "testGet",
  "sourceCode" : "/**\r\n * Test method for {@link HeaderValuesMap#get(Object)}.\r\n */\r\n@Test\r\npublic void testGet() {\r\n    Enumeration<String> values2 = createMock(Enumeration.class);\r\n    expect(extractor.getValues(\"two\")).andReturn(values2);\r\n    expect(values2.hasMoreElements()).andReturn(true);\r\n    expect(values2.nextElement()).andReturn(\"value2\");\r\n    expect(values2.hasMoreElements()).andReturn(true);\r\n    expect(values2.nextElement()).andReturn(\"value3\");\r\n    expect(values2.hasMoreElements()).andReturn(false);\r\n    replay(extractor, values2);\r\n    assertArrayEquals(new String[] { \"value2\", \"value3\" }, map.get(\"two\"));\r\n    verify(extractor, values2);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\plugins\\tiles\\src\\test\\java\\org\\apache\\tiles\\request\\collection\\HeaderValuesMapTest.java",
  "methodName" : "testIsEmpty",
  "sourceCode" : "/**\r\n * Test method for {@link HeaderValuesMap#isEmpty()}.\r\n */\r\n@Test\r\npublic void testIsEmpty() {\r\n    Enumeration<String> keys = createMock(Enumeration.class);\r\n    expect(extractor.getKeys()).andReturn(keys);\r\n    expect(keys.hasMoreElements()).andReturn(true);\r\n    replay(extractor, keys);\r\n    assertFalse(map.isEmpty());\r\n    verify(extractor, keys);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\plugins\\tiles\\src\\test\\java\\org\\apache\\tiles\\request\\collection\\HeaderValuesMapTest.java",
  "methodName" : "testIsEmptyTrue",
  "sourceCode" : "/**\r\n * Test method for {@link HeaderValuesMap#isEmpty()}.\r\n */\r\n@Test\r\npublic void testIsEmptyTrue() {\r\n    Enumeration<String> keys = createMock(Enumeration.class);\r\n    expect(extractor.getKeys()).andReturn(keys);\r\n    expect(keys.hasMoreElements()).andReturn(false);\r\n    replay(extractor, keys);\r\n    assertTrue(map.isEmpty());\r\n    verify(extractor, keys);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\plugins\\tiles\\src\\test\\java\\org\\apache\\tiles\\request\\collection\\HeaderValuesMapTest.java",
  "methodName" : "testKeySet",
  "sourceCode" : "/**\r\n * Test method for {@link HeaderValuesMap#keySet()}.\r\n */\r\n@Test\r\npublic void testKeySet() {\r\n    replay(extractor);\r\n    assertTrue(map.keySet() instanceof KeySet);\r\n    verify(extractor);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\plugins\\tiles\\src\\test\\java\\org\\apache\\tiles\\request\\collection\\HeaderValuesMapTest.java",
  "methodName" : "testPut",
  "sourceCode" : "/**\r\n * Test method for {@link HeaderValuesMap#put(String, String[])}.\r\n */\r\n@Test(expected = UnsupportedOperationException.class)\r\npublic void testPut() {\r\n    map.put(\"one\", new String[] { \"value1\", \"value2\" });\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\plugins\\tiles\\src\\test\\java\\org\\apache\\tiles\\request\\collection\\HeaderValuesMapTest.java",
  "methodName" : "testPutAll",
  "sourceCode" : "/**\r\n * Test method for {@link HeaderValuesMap#putAll(java.util.Map)}.\r\n */\r\n@Test(expected = UnsupportedOperationException.class)\r\npublic void testPutAll() {\r\n    map.putAll(new HashMap<>());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\plugins\\tiles\\src\\test\\java\\org\\apache\\tiles\\request\\collection\\HeaderValuesMapTest.java",
  "methodName" : "testRemove",
  "sourceCode" : "/**\r\n * Test method for {@link HeaderValuesMap#remove(Object)}.\r\n */\r\n@Test(expected = UnsupportedOperationException.class)\r\npublic void testRemove() {\r\n    map.remove(\"one\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\plugins\\tiles\\src\\test\\java\\org\\apache\\tiles\\request\\collection\\HeaderValuesMapTest.java",
  "methodName" : "testSize",
  "sourceCode" : "/**\r\n * Test method for {@link HeaderValuesMap#size()}.\r\n */\r\n@Test\r\npublic void testSize() {\r\n    Enumeration<String> keys = createMock(Enumeration.class);\r\n    expect(extractor.getKeys()).andReturn(keys);\r\n    expect(keys.hasMoreElements()).andReturn(true);\r\n    expect(keys.nextElement()).andReturn(\"one\");\r\n    expect(keys.hasMoreElements()).andReturn(true);\r\n    expect(keys.nextElement()).andReturn(\"two\");\r\n    expect(keys.hasMoreElements()).andReturn(false);\r\n    replay(extractor, keys);\r\n    assertEquals(2, map.size());\r\n    verify(extractor, keys);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\plugins\\tiles\\src\\test\\java\\org\\apache\\tiles\\request\\collection\\KeySetTest.java",
  "methodName" : "testAdd",
  "sourceCode" : "/**\r\n * Tests {@link Set#add(Object)}.\r\n */\r\n@Test(expected = UnsupportedOperationException.class)\r\npublic void testAdd() {\r\n    entrySet.add(null);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\plugins\\tiles\\src\\test\\java\\org\\apache\\tiles\\request\\collection\\KeySetTest.java",
  "methodName" : "testAddAll",
  "sourceCode" : "@Test(expected = UnsupportedOperationException.class)\r\npublic void testAddAll() {\r\n    entrySet.addAll(null);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\plugins\\tiles\\src\\test\\java\\org\\apache\\tiles\\request\\collection\\KeySetTest.java",
  "methodName" : "testClear",
  "sourceCode" : "@Test(expected = UnsupportedOperationException.class)\r\npublic void testClear() {\r\n    entrySet.clear();\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\plugins\\tiles\\src\\test\\java\\org\\apache\\tiles\\request\\collection\\KeySetTest.java",
  "methodName" : "testContains",
  "sourceCode" : "/**\r\n * Tests {@link Set#contains(Object)}.\r\n */\r\n@Test\r\npublic void testContains() {\r\n    expect(extractor.getValue(\"one\")).andReturn(1);\r\n    replay(extractor);\r\n    assertTrue(entrySet.contains(\"one\"));\r\n    verify(extractor);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\plugins\\tiles\\src\\test\\java\\org\\apache\\tiles\\request\\collection\\KeySetTest.java",
  "methodName" : "testContainsFalse",
  "sourceCode" : "/**\r\n * Tests {@link Set#contains(Object)}.\r\n */\r\n@Test\r\npublic void testContainsFalse() {\r\n    expect(extractor.getValue(\"one\")).andReturn(null);\r\n    replay(extractor);\r\n    assertFalse(entrySet.contains(\"one\"));\r\n    verify(extractor);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\plugins\\tiles\\src\\test\\java\\org\\apache\\tiles\\request\\collection\\KeySetTest.java",
  "methodName" : "testContainsAll",
  "sourceCode" : "@Test\r\npublic void testContainsAll() {\r\n    expect(extractor.getValue(\"one\")).andReturn(1);\r\n    expect(extractor.getValue(\"two\")).andReturn(1);\r\n    replay(extractor);\r\n    List<String> coll = new ArrayList<String>();\r\n    coll.add(\"one\");\r\n    coll.add(\"two\");\r\n    assertTrue(entrySet.containsAll(coll));\r\n    verify(extractor);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\plugins\\tiles\\src\\test\\java\\org\\apache\\tiles\\request\\collection\\KeySetTest.java",
  "methodName" : "testContainsAllFalse",
  "sourceCode" : "@Test\r\npublic void testContainsAllFalse() {\r\n    expect(extractor.getValue(\"one\")).andReturn(1);\r\n    expect(extractor.getValue(\"two\")).andReturn(null);\r\n    replay(extractor);\r\n    List<String> coll = new ArrayList<>();\r\n    coll.add(\"one\");\r\n    coll.add(\"two\");\r\n    assertFalse(entrySet.containsAll(coll));\r\n    verify(extractor);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\plugins\\tiles\\src\\test\\java\\org\\apache\\tiles\\request\\collection\\KeySetTest.java",
  "methodName" : "testIsEmpty",
  "sourceCode" : "/**\r\n * Test method for {@link Set#isEmpty()}.\r\n */\r\n@Test\r\npublic void testIsEmpty() {\r\n    Enumeration<String> keys = createMock(Enumeration.class);\r\n    expect(extractor.getKeys()).andReturn(keys);\r\n    expect(keys.hasMoreElements()).andReturn(true);\r\n    replay(extractor, keys);\r\n    assertFalse(entrySet.isEmpty());\r\n    verify(extractor, keys);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\plugins\\tiles\\src\\test\\java\\org\\apache\\tiles\\request\\collection\\KeySetTest.java",
  "methodName" : "testIsEmptyTrue",
  "sourceCode" : "/**\r\n * Test method for {@link Set#isEmpty()}.\r\n */\r\n@Test\r\npublic void testIsEmptyTrue() {\r\n    Enumeration<String> keys = createMock(Enumeration.class);\r\n    expect(extractor.getKeys()).andReturn(keys);\r\n    expect(keys.hasMoreElements()).andReturn(false);\r\n    replay(extractor, keys);\r\n    assertTrue(entrySet.isEmpty());\r\n    verify(extractor, keys);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\plugins\\tiles\\src\\test\\java\\org\\apache\\tiles\\request\\collection\\KeySetTest.java",
  "methodName" : "testIterator",
  "sourceCode" : "/**\r\n * Test method for {@link Set#iterator()}.\r\n */\r\n@Test\r\npublic void testIterator() {\r\n    Enumeration<String> keys = createMock(Enumeration.class);\r\n    Enumeration<String> values2 = createMock(Enumeration.class);\r\n    expect(extractor.getKeys()).andReturn(keys);\r\n    expect(keys.hasMoreElements()).andReturn(true);\r\n    expect(keys.hasMoreElements()).andReturn(true);\r\n    expect(keys.nextElement()).andReturn(\"two\");\r\n    replay(extractor, keys, values2);\r\n    Iterator<String> entryIt = entrySet.iterator();\r\n    assertTrue(entryIt.hasNext());\r\n    assertEquals(\"two\", entryIt.next());\r\n    verify(extractor, keys, values2);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\plugins\\tiles\\src\\test\\java\\org\\apache\\tiles\\request\\collection\\KeySetTest.java",
  "methodName" : "testIteratorRemove",
  "sourceCode" : "/**\r\n * Test method for {@link Set#iterator()}.\r\n */\r\n@Test(expected = UnsupportedOperationException.class)\r\npublic void testIteratorRemove() {\r\n    Enumeration<String> keys = createMock(Enumeration.class);\r\n    expect(extractor.getKeys()).andReturn(keys);\r\n    try {\r\n        replay(extractor, keys);\r\n        entrySet.iterator().remove();\r\n    } finally {\r\n        verify(extractor, keys);\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\plugins\\tiles\\src\\test\\java\\org\\apache\\tiles\\request\\collection\\KeySetTest.java",
  "methodName" : "testRemove",
  "sourceCode" : "/**\r\n * Tests {@link Set#remove(Object)}.\r\n */\r\n@Test(expected = UnsupportedOperationException.class)\r\npublic void testRemove() {\r\n    entrySet.remove(null);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\plugins\\tiles\\src\\test\\java\\org\\apache\\tiles\\request\\collection\\KeySetTest.java",
  "methodName" : "testRemoveAll",
  "sourceCode" : "/**\r\n * Tests {@link Set#removeAll(java.util.Collection)}.\r\n */\r\n@Test(expected = UnsupportedOperationException.class)\r\npublic void testRemoveAll() {\r\n    entrySet.removeAll(null);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\plugins\\tiles\\src\\test\\java\\org\\apache\\tiles\\request\\collection\\KeySetTest.java",
  "methodName" : "testRetainAll",
  "sourceCode" : "/**\r\n * Tests {@link Set#retainAll(java.util.Collection)}.\r\n */\r\n@Test(expected = UnsupportedOperationException.class)\r\npublic void testRetainAll() {\r\n    entrySet.retainAll(null);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\plugins\\tiles\\src\\test\\java\\org\\apache\\tiles\\request\\collection\\KeySetTest.java",
  "methodName" : "testSize",
  "sourceCode" : "/**\r\n * Test method for {@link HeaderValuesMap#size()}.\r\n */\r\n@Test\r\npublic void testSize() {\r\n    Enumeration<String> keys = createMock(Enumeration.class);\r\n    expect(extractor.getKeys()).andReturn(keys);\r\n    expect(keys.hasMoreElements()).andReturn(true);\r\n    expect(keys.nextElement()).andReturn(\"one\");\r\n    expect(keys.hasMoreElements()).andReturn(true);\r\n    expect(keys.nextElement()).andReturn(\"two\");\r\n    expect(keys.hasMoreElements()).andReturn(false);\r\n    replay(extractor, keys);\r\n    assertEquals(2, entrySet.size());\r\n    verify(extractor, keys);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\plugins\\tiles\\src\\test\\java\\org\\apache\\tiles\\request\\collection\\KeySetTest.java",
  "methodName" : "testToArray",
  "sourceCode" : "/**\r\n * Test method for {@link Set#toArray()}.\r\n */\r\n@Test\r\npublic void testToArray() {\r\n    Enumeration<String> keys = createMock(Enumeration.class);\r\n    Enumeration<String> values1 = createMock(Enumeration.class);\r\n    Enumeration<String> values2 = createMock(Enumeration.class);\r\n    expect(extractor.getKeys()).andReturn(keys);\r\n    expect(keys.hasMoreElements()).andReturn(true);\r\n    expect(keys.nextElement()).andReturn(\"one\");\r\n    expect(keys.hasMoreElements()).andReturn(true);\r\n    expect(keys.nextElement()).andReturn(\"two\");\r\n    expect(keys.hasMoreElements()).andReturn(false);\r\n    replay(extractor, keys, values1, values2);\r\n    assertArrayEquals(new String[] { \"one\", \"two\" }, entrySet.toArray());\r\n    verify(extractor, keys, values1, values2);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\plugins\\tiles\\src\\test\\java\\org\\apache\\tiles\\request\\collection\\KeySetTest.java",
  "methodName" : "testToArrayTArray",
  "sourceCode" : "/**\r\n * Test method for {@link Set#toArray(Object[])}.\r\n */\r\n@Test\r\npublic void testToArrayTArray() {\r\n    Enumeration<String> keys = createMock(Enumeration.class);\r\n    Enumeration<String> values1 = createMock(Enumeration.class);\r\n    Enumeration<String> values2 = createMock(Enumeration.class);\r\n    expect(extractor.getKeys()).andReturn(keys);\r\n    expect(keys.hasMoreElements()).andReturn(true);\r\n    expect(keys.nextElement()).andReturn(\"one\");\r\n    expect(keys.hasMoreElements()).andReturn(true);\r\n    expect(keys.nextElement()).andReturn(\"two\");\r\n    expect(keys.hasMoreElements()).andReturn(false);\r\n    replay(extractor, keys, values1, values2);\r\n    String[] realArray = new String[2];\r\n    assertArrayEquals(new String[] { \"one\", \"two\" }, entrySet.toArray(realArray));\r\n    verify(extractor, keys, values1, values2);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\plugins\\tiles\\src\\test\\java\\org\\apache\\tiles\\request\\collection\\MapEntryArrayValuesTest.java",
  "methodName" : "testHashCode",
  "sourceCode" : "/**\r\n * Test method for {@link MapEntryArrayValues#hashCode()}.\r\n */\r\n@Test\r\npublic void testHashCode() {\r\n    MapEntryArrayValues<String, String> entry = new MapEntryArrayValues<>(\"key\", new String[] { \"value1\", \"value2\" }, false);\r\n    assertEquals(\"key\".hashCode() ^ (\"value1\".hashCode() + \"value2\".hashCode()), entry.hashCode());\r\n    entry = new MapEntryArrayValues<>(null, new String[] { \"value1\", \"value2\" }, false);\r\n    assertEquals((\"value1\".hashCode() + \"value2\".hashCode()), entry.hashCode());\r\n    entry = new MapEntryArrayValues<>(\"key\", null, false);\r\n    assertEquals(\"key\".hashCode(), entry.hashCode());\r\n    entry = new MapEntryArrayValues<>(null, null, false);\r\n    assertEquals(0, entry.hashCode());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\plugins\\tiles\\src\\test\\java\\org\\apache\\tiles\\request\\collection\\MapEntryArrayValuesTest.java",
  "methodName" : "testEqualsObject",
  "sourceCode" : "/**\r\n * Test method for {@link MapEntryArrayValues#equals(Object)}.\r\n */\r\n@Test\r\npublic void testEqualsObject() {\r\n    MapEntryArrayValues<String, String> entry = new MapEntryArrayValues<>(\"key\", new String[] { \"value1\", \"value2\" }, false);\r\n    assertNotEquals(null, entry);\r\n    MapEntryArrayValues<String, String> entry2 = new MapEntryArrayValues<>(\"key\", new String[] { \"value1\", \"value2\" }, false);\r\n    assertEquals(entry, entry2);\r\n    entry2 = new MapEntryArrayValues<>(\"key\", null, false);\r\n    assertNotEquals(entry, entry2);\r\n    entry2 = new MapEntryArrayValues<>(\"key2\", new String[] { \"value1\", \"value2\" }, false);\r\n    assertNotEquals(entry, entry2);\r\n    entry2 = new MapEntryArrayValues<>(\"key\", new String[] { \"value1\", \"value3\" }, false);\r\n    assertNotEquals(entry, entry2);\r\n    entry = new MapEntryArrayValues<>(null, new String[] { \"value1\", \"value2\" }, false);\r\n    entry2 = new MapEntryArrayValues<>(null, new String[] { \"value1\", \"value2\" }, false);\r\n    assertEquals(entry, entry2);\r\n    entry = new MapEntryArrayValues<>(\"key\", null, false);\r\n    entry2 = new MapEntryArrayValues<>(\"key\", null, false);\r\n    assertEquals(entry, entry2);\r\n    entry2 = new MapEntryArrayValues<>(\"key\", new String[] { \"value1\", \"value2\" }, false);\r\n    assertNotEquals(entry, entry2);\r\n    entry = new MapEntryArrayValues<>(null, new String[] { null, \"value2\" }, false);\r\n    entry2 = new MapEntryArrayValues<>(null, new String[] { null, \"value2\" }, false);\r\n    assertEquals(entry, entry2);\r\n    entry2 = new MapEntryArrayValues<>(null, new String[] { \"value1\", \"value2\" }, false);\r\n    assertNotEquals(entry, entry2);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\plugins\\tiles\\src\\test\\java\\org\\apache\\tiles\\request\\collection\\MapEntryTest.java",
  "methodName" : "testHashCode",
  "sourceCode" : "/**\r\n * Test method for {@link MapEntry#hashCode()}.\r\n */\r\n@Test\r\npublic void testHashCode() {\r\n    MapEntry<String, String> entry = new MapEntry<>(\"key\", \"value\", false);\r\n    assertEquals(\"key\".hashCode() ^ \"value\".hashCode(), entry.hashCode());\r\n    entry = new MapEntry<>(null, \"value\", false);\r\n    assertEquals(\"value\".hashCode(), entry.hashCode());\r\n    entry = new MapEntry<>(\"key\", null, false);\r\n    assertEquals(\"key\".hashCode(), entry.hashCode());\r\n    entry = new MapEntry<>(null, null, false);\r\n    assertEquals(0, entry.hashCode());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\plugins\\tiles\\src\\test\\java\\org\\apache\\tiles\\request\\collection\\MapEntryTest.java",
  "methodName" : "testGetKey",
  "sourceCode" : "/**\r\n * Test method for {@link MapEntry#getKey()}.\r\n */\r\n@Test\r\npublic void testGetKey() {\r\n    MapEntry<String, String> entry = new MapEntry<>(\"key\", \"value\", false);\r\n    assertEquals(\"key\", entry.getKey());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\plugins\\tiles\\src\\test\\java\\org\\apache\\tiles\\request\\collection\\MapEntryTest.java",
  "methodName" : "testGetValue",
  "sourceCode" : "/**\r\n * Test method for {@link MapEntry#getValue()}.\r\n */\r\n@Test\r\npublic void testGetValue() {\r\n    MapEntry<String, String> entry = new MapEntry<>(\"key\", \"value\", false);\r\n    assertEquals(\"value\", entry.getValue());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\plugins\\tiles\\src\\test\\java\\org\\apache\\tiles\\request\\collection\\MapEntryTest.java",
  "methodName" : "testSetValue",
  "sourceCode" : "/**\r\n * Test method for {@link MapEntry#setValue(Object)}.\r\n */\r\n@Test\r\npublic void testSetValue() {\r\n    MapEntry<String, String> entry = new MapEntry<>(\"key\", \"value\", true);\r\n    assertEquals(\"value\", entry.getValue());\r\n    entry.setValue(\"value2\");\r\n    assertEquals(\"value2\", entry.getValue());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\plugins\\tiles\\src\\test\\java\\org\\apache\\tiles\\request\\collection\\MapEntryTest.java",
  "methodName" : "testSetValueException",
  "sourceCode" : "/**\r\n * Test method for {@link MapEntry#setValue(Object)}.\r\n */\r\n@Test(expected = UnsupportedOperationException.class)\r\npublic void testSetValueException() {\r\n    MapEntry<String, String> entry = new MapEntry<>(\"key\", \"value\", false);\r\n    assertEquals(\"value\", entry.getValue());\r\n    entry.setValue(\"value2\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\plugins\\tiles\\src\\test\\java\\org\\apache\\tiles\\request\\collection\\MapEntryTest.java",
  "methodName" : "testEqualsObject",
  "sourceCode" : "/**\r\n * Test method for {@link MapEntry#equals(Object)}.\r\n */\r\n@Test\r\npublic void testEqualsObject() {\r\n    MapEntry<String, String> entry = new MapEntry<>(\"key\", \"value\", false);\r\n    assertNotEquals(null, entry);\r\n    MapEntry<String, String> entry2 = new MapEntry<>(\"key\", \"value\", false);\r\n    assertEquals(entry, entry2);\r\n    entry2 = new MapEntry<>(\"key2\", \"value\", false);\r\n    assertNotEquals(entry, entry2);\r\n    entry2 = new MapEntry<>(\"key\", \"value2\", false);\r\n    assertNotEquals(entry, entry2);\r\n    entry = new MapEntry<>(null, \"value\", false);\r\n    entry2 = new MapEntry<>(null, \"value\", false);\r\n    assertEquals(entry, entry2);\r\n    entry = new MapEntry<>(\"key\", null, false);\r\n    entry2 = new MapEntry<>(\"key\", null, false);\r\n    assertEquals(entry, entry2);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\plugins\\tiles\\src\\test\\java\\org\\apache\\tiles\\request\\collection\\ReadOnlyEnumerationMapEntrySetTest.java",
  "methodName" : "testAdd",
  "sourceCode" : "/**\r\n * Tests {@link Set#add(Object)}.\r\n */\r\n@Test(expected = UnsupportedOperationException.class)\r\npublic void testAdd() {\r\n    entrySet.add(null);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\plugins\\tiles\\src\\test\\java\\org\\apache\\tiles\\request\\collection\\ReadOnlyEnumerationMapEntrySetTest.java",
  "methodName" : "testAddAll",
  "sourceCode" : "@Test(expected = UnsupportedOperationException.class)\r\npublic void testAddAll() {\r\n    entrySet.addAll(null);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\plugins\\tiles\\src\\test\\java\\org\\apache\\tiles\\request\\collection\\ReadOnlyEnumerationMapEntrySetTest.java",
  "methodName" : "testClear",
  "sourceCode" : "@Test(expected = UnsupportedOperationException.class)\r\npublic void testClear() {\r\n    entrySet.clear();\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\plugins\\tiles\\src\\test\\java\\org\\apache\\tiles\\request\\collection\\ReadOnlyEnumerationMapEntrySetTest.java",
  "methodName" : "testContains",
  "sourceCode" : "/**\r\n * Tests {@link Set#contains(Object)}.\r\n */\r\n@Test\r\npublic void testContains() {\r\n    Map.Entry<String, Integer> entry = createMock(Map.Entry.class);\r\n    Enumeration<String> values2 = createMock(Enumeration.class);\r\n    expect(entry.getKey()).andReturn(\"two\");\r\n    expect(entry.getValue()).andReturn(2);\r\n    expect(extractor.getValue(\"two\")).andReturn(2);\r\n    replay(extractor, entry, values2);\r\n    assertTrue(entrySet.contains(entry));\r\n    verify(extractor, entry, values2);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\plugins\\tiles\\src\\test\\java\\org\\apache\\tiles\\request\\collection\\ReadOnlyEnumerationMapEntrySetTest.java",
  "methodName" : "testContainsAll",
  "sourceCode" : "@Test\r\npublic void testContainsAll() {\r\n    Map.Entry<String, Integer> entry1 = createMock(Map.Entry.class);\r\n    Map.Entry<String, Integer> entry2 = createMock(Map.Entry.class);\r\n    expect(entry1.getKey()).andReturn(\"one\");\r\n    expect(entry1.getValue()).andReturn(1);\r\n    expect(entry2.getKey()).andReturn(\"two\");\r\n    expect(entry2.getValue()).andReturn(2);\r\n    expect(extractor.getValue(\"one\")).andReturn(1);\r\n    expect(extractor.getValue(\"two\")).andReturn(2);\r\n    replay(extractor, entry1, entry2);\r\n    List<Map.Entry<String, Integer>> coll = new ArrayList<>();\r\n    coll.add(entry1);\r\n    coll.add(entry2);\r\n    assertTrue(entrySet.containsAll(coll));\r\n    verify(extractor, entry1, entry2);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\plugins\\tiles\\src\\test\\java\\org\\apache\\tiles\\request\\collection\\ReadOnlyEnumerationMapEntrySetTest.java",
  "methodName" : "testContainsAllFalse",
  "sourceCode" : "@Test\r\npublic void testContainsAllFalse() {\r\n    Map.Entry<String, String> entry1 = createMock(Map.Entry.class);\r\n    expect(entry1.getKey()).andReturn(\"one\");\r\n    expect(entry1.getValue()).andReturn(\"value4\");\r\n    expect(extractor.getValue(\"one\")).andReturn(1);\r\n    replay(extractor, entry1);\r\n    List<Map.Entry<String, String>> coll = new ArrayList<>();\r\n    coll.add(entry1);\r\n    assertFalse(entrySet.containsAll(coll));\r\n    verify(extractor, entry1);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\plugins\\tiles\\src\\test\\java\\org\\apache\\tiles\\request\\collection\\ReadOnlyEnumerationMapEntrySetTest.java",
  "methodName" : "testIsEmpty",
  "sourceCode" : "/**\r\n * Test method for {@link Set#isEmpty()}.\r\n */\r\n@Test\r\npublic void testIsEmpty() {\r\n    Enumeration<String> keys = createMock(Enumeration.class);\r\n    expect(extractor.getKeys()).andReturn(keys);\r\n    expect(keys.hasMoreElements()).andReturn(true);\r\n    replay(extractor, keys);\r\n    assertFalse(entrySet.isEmpty());\r\n    verify(extractor, keys);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\plugins\\tiles\\src\\test\\java\\org\\apache\\tiles\\request\\collection\\ReadOnlyEnumerationMapEntrySetTest.java",
  "methodName" : "testIterator",
  "sourceCode" : "/**\r\n * Test method for {@link Set#iterator()}.\r\n */\r\n@Test\r\npublic void testIterator() {\r\n    Enumeration<String> keys = createMock(Enumeration.class);\r\n    expect(extractor.getKeys()).andReturn(keys);\r\n    expect(keys.hasMoreElements()).andReturn(true);\r\n    expect(keys.hasMoreElements()).andReturn(true);\r\n    expect(keys.nextElement()).andReturn(\"two\");\r\n    expect(extractor.getValue(\"two\")).andReturn(2);\r\n    replay(extractor, keys);\r\n    Iterator<Map.Entry<String, Integer>> entryIt = entrySet.iterator();\r\n    assertTrue(entryIt.hasNext());\r\n    MapEntry<String, Integer> entry = new MapEntry<>(\"two\", 2, false);\r\n    assertEquals(entry, entryIt.next());\r\n    verify(extractor, keys);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\plugins\\tiles\\src\\test\\java\\org\\apache\\tiles\\request\\collection\\ReadOnlyEnumerationMapEntrySetTest.java",
  "methodName" : "testIteratorRemove",
  "sourceCode" : "/**\r\n * Test method for {@link Set#iterator()}.\r\n */\r\n@Test(expected = UnsupportedOperationException.class)\r\npublic void testIteratorRemove() {\r\n    Enumeration<String> keys = createMock(Enumeration.class);\r\n    expect(extractor.getKeys()).andReturn(keys);\r\n    try {\r\n        replay(extractor, keys);\r\n        entrySet.iterator().remove();\r\n    } finally {\r\n        verify(extractor, keys);\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\plugins\\tiles\\src\\test\\java\\org\\apache\\tiles\\request\\collection\\ReadOnlyEnumerationMapEntrySetTest.java",
  "methodName" : "testRemove",
  "sourceCode" : "/**\r\n * Tests {@link Set#remove(Object)}.\r\n */\r\n@Test(expected = UnsupportedOperationException.class)\r\npublic void testRemove() {\r\n    entrySet.remove(null);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\plugins\\tiles\\src\\test\\java\\org\\apache\\tiles\\request\\collection\\ReadOnlyEnumerationMapEntrySetTest.java",
  "methodName" : "testRemoveAll",
  "sourceCode" : "/**\r\n * Tests {@link Set#removeAll(java.util.Collection)}.\r\n */\r\n@Test(expected = UnsupportedOperationException.class)\r\npublic void testRemoveAll() {\r\n    entrySet.removeAll(null);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\plugins\\tiles\\src\\test\\java\\org\\apache\\tiles\\request\\collection\\ReadOnlyEnumerationMapEntrySetTest.java",
  "methodName" : "testRetainAll",
  "sourceCode" : "/**\r\n * Tests {@link Set#retainAll(java.util.Collection)}.\r\n */\r\n@Test(expected = UnsupportedOperationException.class)\r\npublic void testRetainAll() {\r\n    entrySet.retainAll(null);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\plugins\\tiles\\src\\test\\java\\org\\apache\\tiles\\request\\collection\\ReadOnlyEnumerationMapEntrySetTest.java",
  "methodName" : "testSize",
  "sourceCode" : "/**\r\n * Test method for {@link HeaderValuesMap#size()}.\r\n */\r\n@Test\r\npublic void testSize() {\r\n    Enumeration<String> keys = createMock(Enumeration.class);\r\n    expect(extractor.getKeys()).andReturn(keys);\r\n    expect(keys.hasMoreElements()).andReturn(true);\r\n    expect(keys.nextElement()).andReturn(\"one\");\r\n    expect(keys.hasMoreElements()).andReturn(true);\r\n    expect(keys.nextElement()).andReturn(\"two\");\r\n    expect(keys.hasMoreElements()).andReturn(false);\r\n    replay(extractor, keys);\r\n    assertEquals(2, entrySet.size());\r\n    verify(extractor, keys);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\plugins\\tiles\\src\\test\\java\\org\\apache\\tiles\\request\\collection\\ReadOnlyEnumerationMapEntrySetTest.java",
  "methodName" : "testToArray",
  "sourceCode" : "/**\r\n * Test method for {@link Set#toArray()}.\r\n */\r\n@SuppressWarnings(\"unchecked\")\r\n@Test\r\npublic void testToArray() {\r\n    Enumeration<String> keys = createMock(Enumeration.class);\r\n    Enumeration<String> values1 = createMock(Enumeration.class);\r\n    Enumeration<String> values2 = createMock(Enumeration.class);\r\n    expect(extractor.getKeys()).andReturn(keys);\r\n    expect(keys.hasMoreElements()).andReturn(true);\r\n    expect(keys.nextElement()).andReturn(\"one\");\r\n    expect(keys.hasMoreElements()).andReturn(true);\r\n    expect(keys.nextElement()).andReturn(\"two\");\r\n    expect(keys.hasMoreElements()).andReturn(false);\r\n    expect(extractor.getValue(\"one\")).andReturn(1);\r\n    expect(extractor.getValue(\"two\")).andReturn(2);\r\n    MapEntry<String, Integer>[] entryArray = new MapEntry[2];\r\n    entryArray[0] = new MapEntry<>(\"one\", 1, false);\r\n    entryArray[1] = new MapEntry<>(\"two\", 2, false);\r\n    replay(extractor, keys, values1, values2);\r\n    assertArrayEquals(entryArray, entrySet.toArray());\r\n    verify(extractor, keys, values1, values2);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\plugins\\tiles\\src\\test\\java\\org\\apache\\tiles\\request\\collection\\ReadOnlyEnumerationMapEntrySetTest.java",
  "methodName" : "testToArrayTArray",
  "sourceCode" : "/**\r\n * Test method for {@link Set#toArray(Object[])}.\r\n */\r\n@SuppressWarnings(\"unchecked\")\r\n@Test\r\npublic void testToArrayTArray() {\r\n    Enumeration<String> keys = createMock(Enumeration.class);\r\n    Enumeration<String> values1 = createMock(Enumeration.class);\r\n    Enumeration<String> values2 = createMock(Enumeration.class);\r\n    expect(extractor.getKeys()).andReturn(keys);\r\n    expect(keys.hasMoreElements()).andReturn(true);\r\n    expect(keys.nextElement()).andReturn(\"one\");\r\n    expect(keys.hasMoreElements()).andReturn(true);\r\n    expect(keys.nextElement()).andReturn(\"two\");\r\n    expect(keys.hasMoreElements()).andReturn(false);\r\n    expect(extractor.getValue(\"one\")).andReturn(1);\r\n    expect(extractor.getValue(\"two\")).andReturn(2);\r\n    MapEntry<String, Integer>[] entryArray = new MapEntry[2];\r\n    entryArray[0] = new MapEntry<>(\"one\", 1, false);\r\n    entryArray[1] = new MapEntry<>(\"two\", 2, false);\r\n    replay(extractor, keys, values1, values2);\r\n    MapEntry<String, String>[] realArray = new MapEntry[2];\r\n    assertArrayEquals(entryArray, entrySet.toArray(realArray));\r\n    verify(extractor, keys, values1, values2);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\plugins\\tiles\\src\\test\\java\\org\\apache\\tiles\\request\\collection\\ReadOnlyEnumerationMapTest.java",
  "methodName" : "testClear",
  "sourceCode" : "/**\r\n * Test method for {@link ReadOnlyEnumerationMap#clear()}.\r\n */\r\n@Test(expected = UnsupportedOperationException.class)\r\npublic void testClear() {\r\n    map.clear();\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\plugins\\tiles\\src\\test\\java\\org\\apache\\tiles\\request\\collection\\ReadOnlyEnumerationMapTest.java",
  "methodName" : "testContainsKey",
  "sourceCode" : "/**\r\n * Test method for {@link ReadOnlyEnumerationMap#containsKey(Object)}.\r\n */\r\n@Test\r\npublic void testContainsKey() {\r\n    expect(extractor.getValue(\"one\")).andReturn(1);\r\n    expect(extractor.getValue(\"two\")).andReturn(null);\r\n    replay(extractor);\r\n    assertTrue(map.containsKey(\"one\"));\r\n    assertFalse(map.containsKey(\"two\"));\r\n    verify(extractor);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\plugins\\tiles\\src\\test\\java\\org\\apache\\tiles\\request\\collection\\ReadOnlyEnumerationMapTest.java",
  "methodName" : "testContainsValue",
  "sourceCode" : "/**\r\n * Test method for {@link ReadOnlyEnumerationMap#containsValue(Object)}.\r\n */\r\n@Test\r\npublic void testContainsValue() {\r\n    Enumeration<String> keys = createMock(Enumeration.class);\r\n    expect(extractor.getKeys()).andReturn(keys);\r\n    expect(keys.hasMoreElements()).andReturn(true);\r\n    expect(keys.nextElement()).andReturn(\"one\");\r\n    expect(keys.hasMoreElements()).andReturn(true);\r\n    expect(keys.nextElement()).andReturn(\"two\");\r\n    expect(extractor.getValue(\"one\")).andReturn(1);\r\n    expect(extractor.getValue(\"two\")).andReturn(2);\r\n    replay(extractor, keys);\r\n    assertTrue(map.containsValue(2));\r\n    verify(extractor, keys);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\plugins\\tiles\\src\\test\\java\\org\\apache\\tiles\\request\\collection\\ReadOnlyEnumerationMapTest.java",
  "methodName" : "testContainsValueFalse",
  "sourceCode" : "/**\r\n * Test method for {@link ReadOnlyEnumerationMap#containsValue(Object)}.\r\n */\r\n@Test\r\npublic void testContainsValueFalse() {\r\n    Enumeration<String> keys = createMock(Enumeration.class);\r\n    expect(extractor.getKeys()).andReturn(keys);\r\n    expect(keys.hasMoreElements()).andReturn(true);\r\n    expect(keys.nextElement()).andReturn(\"one\");\r\n    expect(keys.hasMoreElements()).andReturn(true);\r\n    expect(keys.nextElement()).andReturn(\"two\");\r\n    expect(keys.hasMoreElements()).andReturn(false);\r\n    expect(extractor.getValue(\"one\")).andReturn(1);\r\n    expect(extractor.getValue(\"two\")).andReturn(1);\r\n    replay(extractor, keys);\r\n    assertFalse(map.containsValue(3));\r\n    verify(extractor, keys);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\plugins\\tiles\\src\\test\\java\\org\\apache\\tiles\\request\\collection\\ReadOnlyEnumerationMapTest.java",
  "methodName" : "testGet",
  "sourceCode" : "/**\r\n * Test method for {@link ReadOnlyEnumerationMap#get(Object)}.\r\n */\r\n@Test\r\npublic void testGet() {\r\n    expect(extractor.getValue(\"two\")).andReturn(2);\r\n    replay(extractor);\r\n    assertEquals(new Integer(2), map.get(\"two\"));\r\n    verify(extractor);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\plugins\\tiles\\src\\test\\java\\org\\apache\\tiles\\request\\collection\\ReadOnlyEnumerationMapTest.java",
  "methodName" : "testIsEmpty",
  "sourceCode" : "/**\r\n * Test method for {@link ReadOnlyEnumerationMap#isEmpty()}.\r\n */\r\n@Test\r\npublic void testIsEmpty() {\r\n    Enumeration<String> keys = createMock(Enumeration.class);\r\n    expect(extractor.getKeys()).andReturn(keys);\r\n    expect(keys.hasMoreElements()).andReturn(true);\r\n    replay(extractor, keys);\r\n    assertFalse(map.isEmpty());\r\n    verify(extractor, keys);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\plugins\\tiles\\src\\test\\java\\org\\apache\\tiles\\request\\collection\\ReadOnlyEnumerationMapTest.java",
  "methodName" : "testIsEmptyTrue",
  "sourceCode" : "/**\r\n * Test method for {@link ReadOnlyEnumerationMap#isEmpty()}.\r\n */\r\n@Test\r\npublic void testIsEmptyTrue() {\r\n    Enumeration<String> keys = createMock(Enumeration.class);\r\n    expect(extractor.getKeys()).andReturn(keys);\r\n    expect(keys.hasMoreElements()).andReturn(false);\r\n    replay(extractor, keys);\r\n    assertTrue(map.isEmpty());\r\n    verify(extractor, keys);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\plugins\\tiles\\src\\test\\java\\org\\apache\\tiles\\request\\collection\\ReadOnlyEnumerationMapTest.java",
  "methodName" : "testKeySet",
  "sourceCode" : "/**\r\n * Test method for {@link ReadOnlyEnumerationMap#keySet()}.\r\n */\r\n@Test\r\npublic void testKeySet() {\r\n    replay(extractor);\r\n    assertTrue(map.keySet() instanceof KeySet);\r\n    verify(extractor);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\plugins\\tiles\\src\\test\\java\\org\\apache\\tiles\\request\\collection\\ReadOnlyEnumerationMapTest.java",
  "methodName" : "testPut",
  "sourceCode" : "@Test(expected = UnsupportedOperationException.class)\r\npublic void testPut() {\r\n    map.put(\"one\", 1);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\plugins\\tiles\\src\\test\\java\\org\\apache\\tiles\\request\\collection\\ReadOnlyEnumerationMapTest.java",
  "methodName" : "testPutAll",
  "sourceCode" : "/**\r\n * Test method for {@link ReadOnlyEnumerationMap#putAll(java.util.Map)}.\r\n */\r\n@Test(expected = UnsupportedOperationException.class)\r\npublic void testPutAll() {\r\n    map.putAll(new HashMap<>());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\plugins\\tiles\\src\\test\\java\\org\\apache\\tiles\\request\\collection\\ReadOnlyEnumerationMapTest.java",
  "methodName" : "testRemove",
  "sourceCode" : "/**\r\n * Test method for {@link ReadOnlyEnumerationMap#remove(Object)}.\r\n */\r\n@Test(expected = UnsupportedOperationException.class)\r\npublic void testRemove() {\r\n    map.remove(\"one\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\plugins\\tiles\\src\\test\\java\\org\\apache\\tiles\\request\\collection\\ReadOnlyEnumerationMapTest.java",
  "methodName" : "testSize",
  "sourceCode" : "/**\r\n * Test method for {@link ReadOnlyEnumerationMap#size()}.\r\n */\r\n@Test\r\npublic void testSize() {\r\n    Enumeration<String> keys = createMock(Enumeration.class);\r\n    expect(extractor.getKeys()).andReturn(keys);\r\n    expect(keys.hasMoreElements()).andReturn(true);\r\n    expect(keys.nextElement()).andReturn(\"one\");\r\n    expect(keys.hasMoreElements()).andReturn(true);\r\n    expect(keys.nextElement()).andReturn(\"two\");\r\n    expect(keys.hasMoreElements()).andReturn(false);\r\n    replay(extractor, keys);\r\n    assertEquals(2, map.size());\r\n    verify(extractor, keys);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\plugins\\tiles\\src\\test\\java\\org\\apache\\tiles\\request\\collection\\ReadOnlyEnumerationMapTest.java",
  "methodName" : "testHashCode",
  "sourceCode" : "@Test\r\npublic void testHashCode() {\r\n    Enumeration<String> keys = createMock(Enumeration.class);\r\n    expect(extractor.getKeys()).andReturn(keys);\r\n    expect(keys.hasMoreElements()).andReturn(true);\r\n    expect(keys.nextElement()).andReturn(\"first\");\r\n    expect(keys.hasMoreElements()).andReturn(true);\r\n    expect(keys.nextElement()).andReturn(\"second\");\r\n    expect(keys.hasMoreElements()).andReturn(false);\r\n    Integer value1 = 1;\r\n    expect(extractor.getValue(\"first\")).andReturn(value1);\r\n    expect(extractor.getValue(\"second\")).andReturn(null);\r\n    replay(extractor, keys);\r\n    assertEquals((\"first\".hashCode() ^ value1.hashCode()) + (\"second\".hashCode()), map.hashCode());\r\n    verify(extractor, keys);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\plugins\\tiles\\src\\test\\java\\org\\apache\\tiles\\request\\collection\\ReadOnlyEnumerationMapTest.java",
  "methodName" : "testEqualsObject",
  "sourceCode" : "@Test\r\npublic void testEqualsObject() {\r\n    HasKeys<Integer> otherRequest = createMock(HasKeys.class);\r\n    ReadOnlyEnumerationMap<Integer> otherMap = createMockBuilder(ReadOnlyEnumerationMap.class).withConstructor(otherRequest).createMock();\r\n    Enumeration<String> keys = createMock(Enumeration.class);\r\n    Enumeration<String> otherKeys = createMock(Enumeration.class);\r\n    expect(extractor.getKeys()).andReturn(keys);\r\n    expect(otherRequest.getKeys()).andReturn(otherKeys);\r\n    expect(keys.hasMoreElements()).andReturn(true);\r\n    expect(keys.nextElement()).andReturn(\"first\");\r\n    expect(keys.hasMoreElements()).andReturn(true);\r\n    expect(keys.nextElement()).andReturn(\"second\");\r\n    expect(keys.hasMoreElements()).andReturn(false);\r\n    expect(extractor.getValue(\"first\")).andReturn(1);\r\n    expect(extractor.getValue(\"second\")).andReturn(2);\r\n    expect(otherKeys.hasMoreElements()).andReturn(true);\r\n    expect(otherKeys.nextElement()).andReturn(\"first\");\r\n    expect(otherKeys.hasMoreElements()).andReturn(true);\r\n    expect(otherKeys.nextElement()).andReturn(\"second\");\r\n    expect(otherKeys.hasMoreElements()).andReturn(false);\r\n    expect(otherRequest.getValue(\"first\")).andReturn(1);\r\n    expect(otherRequest.getValue(\"second\")).andReturn(2);\r\n    replay(extractor, otherRequest, otherMap, keys, otherKeys);\r\n    assertEquals(map, otherMap);\r\n    verify(extractor, otherRequest, otherMap, keys, otherKeys);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\plugins\\tiles\\src\\test\\java\\org\\apache\\tiles\\request\\collection\\ReadOnlyEnumerationMapTest.java",
  "methodName" : "testEqualsObjectFalse",
  "sourceCode" : "@Test\r\npublic void testEqualsObjectFalse() {\r\n    HasKeys<Integer> otherRequest = createMock(HasKeys.class);\r\n    ReadOnlyEnumerationMap<Integer> otherMap = createMockBuilder(ReadOnlyEnumerationMap.class).withConstructor(otherRequest).createMock();\r\n    Enumeration<String> keys = createMock(Enumeration.class);\r\n    Enumeration<String> otherKeys = createMock(Enumeration.class);\r\n    expect(extractor.getKeys()).andReturn(keys);\r\n    expect(otherRequest.getKeys()).andReturn(otherKeys);\r\n    expect(keys.hasMoreElements()).andReturn(true);\r\n    expect(keys.nextElement()).andReturn(\"first\");\r\n    expect(keys.hasMoreElements()).andReturn(true);\r\n    expect(keys.nextElement()).andReturn(\"second\");\r\n    expect(keys.hasMoreElements()).andReturn(false);\r\n    expect(extractor.getValue(\"first\")).andReturn(1);\r\n    expect(extractor.getValue(\"second\")).andReturn(2);\r\n    expect(otherKeys.hasMoreElements()).andReturn(true);\r\n    expect(otherKeys.nextElement()).andReturn(\"first\");\r\n    expect(otherKeys.hasMoreElements()).andReturn(true);\r\n    expect(otherKeys.nextElement()).andReturn(\"second\");\r\n    expect(otherKeys.hasMoreElements()).andReturn(false);\r\n    expect(otherRequest.getValue(\"first\")).andReturn(1);\r\n    expect(otherRequest.getValue(\"second\")).andReturn(3);\r\n    replay(extractor, otherRequest, otherMap, keys, otherKeys);\r\n    assertNotEquals(map, otherMap);\r\n    verify(extractor, otherRequest, otherMap, keys, otherKeys);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\plugins\\tiles\\src\\test\\java\\org\\apache\\tiles\\request\\collection\\ReadOnlyEnumerationMapValuesCollectionTest.java",
  "methodName" : "testAdd",
  "sourceCode" : "/**\r\n * Tests {@link Collection#add(Object)}.\r\n */\r\n@Test(expected = UnsupportedOperationException.class)\r\npublic void testAdd() {\r\n    coll.add(null);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\plugins\\tiles\\src\\test\\java\\org\\apache\\tiles\\request\\collection\\ReadOnlyEnumerationMapValuesCollectionTest.java",
  "methodName" : "testAddAll",
  "sourceCode" : "@Test(expected = UnsupportedOperationException.class)\r\npublic void testAddAll() {\r\n    coll.addAll(null);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\plugins\\tiles\\src\\test\\java\\org\\apache\\tiles\\request\\collection\\ReadOnlyEnumerationMapValuesCollectionTest.java",
  "methodName" : "testClear",
  "sourceCode" : "@Test(expected = UnsupportedOperationException.class)\r\npublic void testClear() {\r\n    coll.clear();\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\plugins\\tiles\\src\\test\\java\\org\\apache\\tiles\\request\\collection\\ReadOnlyEnumerationMapValuesCollectionTest.java",
  "methodName" : "testContainsValue",
  "sourceCode" : "/**\r\n * Tests {@link Collection#contains(Object)}.\r\n */\r\n@Test\r\npublic void testContainsValue() {\r\n    Enumeration<String> keys = createMock(Enumeration.class);\r\n    expect(extractor.getKeys()).andReturn(keys);\r\n    expect(keys.hasMoreElements()).andReturn(true);\r\n    expect(keys.nextElement()).andReturn(\"one\");\r\n    expect(keys.hasMoreElements()).andReturn(true);\r\n    expect(keys.nextElement()).andReturn(\"two\");\r\n    expect(extractor.getValue(\"one\")).andReturn(1);\r\n    expect(extractor.getValue(\"two\")).andReturn(2);\r\n    replay(extractor, keys);\r\n    assertTrue(coll.contains(2));\r\n    verify(extractor, keys);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\plugins\\tiles\\src\\test\\java\\org\\apache\\tiles\\request\\collection\\ReadOnlyEnumerationMapValuesCollectionTest.java",
  "methodName" : "testContainsValueFalse",
  "sourceCode" : "/**\r\n * Tests {@link Collection#contains(Object)}.\r\n */\r\n@Test\r\npublic void testContainsValueFalse() {\r\n    Enumeration<String> keys = createMock(Enumeration.class);\r\n    expect(extractor.getKeys()).andReturn(keys);\r\n    expect(keys.hasMoreElements()).andReturn(true);\r\n    expect(keys.nextElement()).andReturn(\"one\");\r\n    expect(keys.hasMoreElements()).andReturn(true);\r\n    expect(keys.nextElement()).andReturn(\"two\");\r\n    expect(keys.hasMoreElements()).andReturn(false);\r\n    expect(extractor.getValue(\"one\")).andReturn(1);\r\n    expect(extractor.getValue(\"two\")).andReturn(2);\r\n    replay(extractor, keys);\r\n    assertFalse(coll.contains(3));\r\n    verify(extractor, keys);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\plugins\\tiles\\src\\test\\java\\org\\apache\\tiles\\request\\collection\\ReadOnlyEnumerationMapValuesCollectionTest.java",
  "methodName" : "testContainsAll",
  "sourceCode" : "@Test\r\npublic void testContainsAll() {\r\n    Enumeration<String> keys = createMock(Enumeration.class);\r\n    expect(extractor.getKeys()).andReturn(keys);\r\n    expect(keys.hasMoreElements()).andReturn(true);\r\n    expect(keys.nextElement()).andReturn(\"one\");\r\n    expect(keys.hasMoreElements()).andReturn(true);\r\n    expect(keys.nextElement()).andReturn(\"two\");\r\n    expect(extractor.getValue(\"one\")).andReturn(1);\r\n    expect(extractor.getValue(\"two\")).andReturn(2);\r\n    replay(extractor, keys);\r\n    List<Integer> coll = new ArrayList<>();\r\n    coll.add(1);\r\n    coll.add(2);\r\n    assertTrue(this.coll.containsAll(coll));\r\n    verify(extractor, keys);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\plugins\\tiles\\src\\test\\java\\org\\apache\\tiles\\request\\collection\\ReadOnlyEnumerationMapValuesCollectionTest.java",
  "methodName" : "testContainsAllFalse",
  "sourceCode" : "@Test\r\npublic void testContainsAllFalse() {\r\n    Enumeration<String> keys = createMock(Enumeration.class);\r\n    expect(extractor.getKeys()).andReturn(keys);\r\n    expect(keys.hasMoreElements()).andReturn(true);\r\n    expect(keys.nextElement()).andReturn(\"one\");\r\n    expect(keys.hasMoreElements()).andReturn(true);\r\n    expect(keys.nextElement()).andReturn(\"two\");\r\n    expect(keys.hasMoreElements()).andReturn(false);\r\n    expect(extractor.getValue(\"one\")).andReturn(1);\r\n    expect(extractor.getValue(\"two\")).andReturn(2);\r\n    replay(extractor, keys);\r\n    List<Integer> coll = new ArrayList<>();\r\n    coll.add(3);\r\n    assertFalse(this.coll.containsAll(coll));\r\n    verify(extractor, keys);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\plugins\\tiles\\src\\test\\java\\org\\apache\\tiles\\request\\collection\\ReadOnlyEnumerationMapValuesCollectionTest.java",
  "methodName" : "testIsEmpty",
  "sourceCode" : "/**\r\n * Test method for {@link Collection#isEmpty()}.\r\n */\r\n@Test\r\npublic void testIsEmpty() {\r\n    Enumeration<String> keys = createMock(Enumeration.class);\r\n    expect(extractor.getKeys()).andReturn(keys);\r\n    expect(keys.hasMoreElements()).andReturn(true);\r\n    replay(extractor, keys);\r\n    assertFalse(coll.isEmpty());\r\n    verify(extractor, keys);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\plugins\\tiles\\src\\test\\java\\org\\apache\\tiles\\request\\collection\\ReadOnlyEnumerationMapValuesCollectionTest.java",
  "methodName" : "testIterator",
  "sourceCode" : "/**\r\n * Test method for {@link Collection#iterator()}.\r\n */\r\n@Test\r\npublic void testIterator() {\r\n    Enumeration<String> keys = createMock(Enumeration.class);\r\n    expect(extractor.getKeys()).andReturn(keys);\r\n    expect(keys.hasMoreElements()).andReturn(true);\r\n    expect(keys.hasMoreElements()).andReturn(true);\r\n    expect(keys.nextElement()).andReturn(\"two\");\r\n    expect(extractor.getValue(\"two\")).andReturn(2);\r\n    replay(extractor, keys);\r\n    Iterator<Integer> entryIt = coll.iterator();\r\n    assertTrue(entryIt.hasNext());\r\n    assertEquals(new Integer(2), entryIt.next());\r\n    verify(extractor, keys);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\plugins\\tiles\\src\\test\\java\\org\\apache\\tiles\\request\\collection\\ReadOnlyEnumerationMapValuesCollectionTest.java",
  "methodName" : "testIteratorRemove",
  "sourceCode" : "/**\r\n * Test method for {@link Collection#iterator()}.\r\n */\r\n@Test(expected = UnsupportedOperationException.class)\r\npublic void testIteratorRemove() {\r\n    Enumeration<String> keys = createMock(Enumeration.class);\r\n    expect(extractor.getKeys()).andReturn(keys);\r\n    try {\r\n        replay(extractor, keys);\r\n        coll.iterator().remove();\r\n    } finally {\r\n        verify(extractor, keys);\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\plugins\\tiles\\src\\test\\java\\org\\apache\\tiles\\request\\collection\\ReadOnlyEnumerationMapValuesCollectionTest.java",
  "methodName" : "testRemove",
  "sourceCode" : "/**\r\n * Tests {@link Collection#remove(Object)}.\r\n */\r\n@Test(expected = UnsupportedOperationException.class)\r\npublic void testRemove() {\r\n    coll.remove(null);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\plugins\\tiles\\src\\test\\java\\org\\apache\\tiles\\request\\collection\\ReadOnlyEnumerationMapValuesCollectionTest.java",
  "methodName" : "testRemoveAll",
  "sourceCode" : "/**\r\n * Tests {@link Collection#removeAll(Collection)}.\r\n */\r\n@Test(expected = UnsupportedOperationException.class)\r\npublic void testRemoveAll() {\r\n    coll.removeAll(null);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\plugins\\tiles\\src\\test\\java\\org\\apache\\tiles\\request\\collection\\ReadOnlyEnumerationMapValuesCollectionTest.java",
  "methodName" : "testRetainAll",
  "sourceCode" : "/**\r\n * Tests {@link Collection#retainAll(Collection)}.\r\n */\r\n@Test(expected = UnsupportedOperationException.class)\r\npublic void testRetainAll() {\r\n    coll.retainAll(null);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\plugins\\tiles\\src\\test\\java\\org\\apache\\tiles\\request\\collection\\ReadOnlyEnumerationMapValuesCollectionTest.java",
  "methodName" : "testSize",
  "sourceCode" : "/**\r\n * Test method for {@link HeaderValuesMap#size()}.\r\n */\r\n@Test\r\npublic void testSize() {\r\n    Enumeration<String> keys = createMock(Enumeration.class);\r\n    expect(extractor.getKeys()).andReturn(keys);\r\n    expect(keys.hasMoreElements()).andReturn(true);\r\n    expect(keys.nextElement()).andReturn(\"one\");\r\n    expect(keys.hasMoreElements()).andReturn(true);\r\n    expect(keys.nextElement()).andReturn(\"two\");\r\n    expect(keys.hasMoreElements()).andReturn(false);\r\n    replay(extractor, keys);\r\n    assertEquals(2, coll.size());\r\n    verify(extractor, keys);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\plugins\\tiles\\src\\test\\java\\org\\apache\\tiles\\request\\collection\\ReadOnlyEnumerationMapValuesCollectionTest.java",
  "methodName" : "testToArray",
  "sourceCode" : "/**\r\n * Test method for {@link Collection#toArray()}.\r\n */\r\n@Test\r\npublic void testToArray() {\r\n    Enumeration<String> keys = createMock(Enumeration.class);\r\n    expect(extractor.getKeys()).andReturn(keys);\r\n    expect(keys.hasMoreElements()).andReturn(true);\r\n    expect(keys.nextElement()).andReturn(\"one\");\r\n    expect(keys.hasMoreElements()).andReturn(true);\r\n    expect(keys.nextElement()).andReturn(\"two\");\r\n    expect(keys.hasMoreElements()).andReturn(false);\r\n    expect(extractor.getValue(\"one\")).andReturn(1);\r\n    expect(extractor.getValue(\"two\")).andReturn(2);\r\n    Integer[] entryArray = new Integer[] { 1, 2 };\r\n    replay(extractor, keys);\r\n    assertArrayEquals(entryArray, coll.toArray());\r\n    verify(extractor, keys);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\plugins\\tiles\\src\\test\\java\\org\\apache\\tiles\\request\\collection\\ReadOnlyEnumerationMapValuesCollectionTest.java",
  "methodName" : "testToArrayTArray",
  "sourceCode" : "/**\r\n * Test method for {@link Collection#toArray(Object[])}.\r\n */\r\n@Test\r\npublic void testToArrayTArray() {\r\n    Enumeration<String> keys = createMock(Enumeration.class);\r\n    expect(extractor.getKeys()).andReturn(keys);\r\n    expect(keys.hasMoreElements()).andReturn(true);\r\n    expect(keys.nextElement()).andReturn(\"one\");\r\n    expect(keys.hasMoreElements()).andReturn(true);\r\n    expect(keys.nextElement()).andReturn(\"two\");\r\n    expect(keys.hasMoreElements()).andReturn(false);\r\n    expect(extractor.getValue(\"one\")).andReturn(1);\r\n    expect(extractor.getValue(\"two\")).andReturn(2);\r\n    Integer[] entryArray = new Integer[] { 1, 2 };\r\n    replay(extractor, keys);\r\n    Integer[] realArray = new Integer[2];\r\n    assertArrayEquals(entryArray, coll.toArray(realArray));\r\n    verify(extractor, keys);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\plugins\\tiles\\src\\test\\java\\org\\apache\\tiles\\request\\collection\\RemovableKeySetTest.java",
  "methodName" : "testRemove",
  "sourceCode" : "/**\r\n * Test method for {@link RemovableKeySet#remove(Object)}.\r\n */\r\n@Test\r\npublic void testRemove() {\r\n    expect(extractor.getValue(\"one\")).andReturn(1);\r\n    extractor.removeValue(\"one\");\r\n    replay(extractor);\r\n    assertTrue(entrySet.remove(\"one\"));\r\n    verify(extractor);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\plugins\\tiles\\src\\test\\java\\org\\apache\\tiles\\request\\collection\\RemovableKeySetTest.java",
  "methodName" : "testRemoveNoEffect",
  "sourceCode" : "/**\r\n * Test method for {@link RemovableKeySet#remove(Object)}.\r\n */\r\n@Test\r\npublic void testRemoveNoEffect() {\r\n    expect(extractor.getValue(\"one\")).andReturn(null);\r\n    replay(extractor);\r\n    assertFalse(entrySet.remove(\"one\"));\r\n    verify(extractor);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\plugins\\tiles\\src\\test\\java\\org\\apache\\tiles\\request\\collection\\RemovableKeySetTest.java",
  "methodName" : "testRemoveAll",
  "sourceCode" : "/**\r\n * Test method for {@link RemovableKeySet#removeAll(java.util.Collection)}.\r\n */\r\n@Test\r\npublic void testRemoveAll() {\r\n    expect(extractor.getValue(\"one\")).andReturn(1);\r\n    expect(extractor.getValue(\"two\")).andReturn(2);\r\n    extractor.removeValue(\"one\");\r\n    extractor.removeValue(\"two\");\r\n    replay(extractor);\r\n    List<String> coll = new ArrayList<>();\r\n    coll.add(\"one\");\r\n    coll.add(\"two\");\r\n    assertTrue(entrySet.removeAll(coll));\r\n    verify(extractor);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\plugins\\tiles\\src\\test\\java\\org\\apache\\tiles\\request\\collection\\RemovableKeySetTest.java",
  "methodName" : "testRetainAll",
  "sourceCode" : "/**\r\n * Test method for {@link RemovableKeySet#retainAll(java.util.Collection)}.\r\n */\r\n@Test\r\npublic void testRetainAll() {\r\n    Enumeration<String> keys = createMock(Enumeration.class);\r\n    expect(extractor.getKeys()).andReturn(keys);\r\n    expect(keys.hasMoreElements()).andReturn(true);\r\n    expect(keys.nextElement()).andReturn(\"one\");\r\n    expect(keys.hasMoreElements()).andReturn(true);\r\n    expect(keys.nextElement()).andReturn(\"two\");\r\n    expect(keys.hasMoreElements()).andReturn(true);\r\n    expect(keys.nextElement()).andReturn(\"three\");\r\n    expect(keys.hasMoreElements()).andReturn(false);\r\n    extractor.removeValue(\"three\");\r\n    replay(extractor, keys);\r\n    List<String> coll = new ArrayList<>();\r\n    coll.add(\"one\");\r\n    coll.add(\"two\");\r\n    assertTrue(entrySet.retainAll(coll));\r\n    verify(extractor, keys);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\plugins\\tiles\\src\\test\\java\\org\\apache\\tiles\\request\\collection\\ScopeMapEntrySetTest.java",
  "methodName" : "testAdd",
  "sourceCode" : "/**\r\n * Tests {@link Set#add(Object)}.\r\n */\r\n@Test\r\npublic void testAdd() {\r\n    Map.Entry<String, Object> entry = createMock(Map.Entry.class);\r\n    expect(entry.getKey()).andReturn(\"one\");\r\n    expect(entry.getValue()).andReturn(1);\r\n    expect(extractor.getValue(\"one\")).andReturn(null);\r\n    extractor.setValue(\"one\", 1);\r\n    replay(extractor, entry);\r\n    assertTrue(entrySet.add(entry));\r\n    verify(extractor, entry);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\plugins\\tiles\\src\\test\\java\\org\\apache\\tiles\\request\\collection\\ScopeMapEntrySetTest.java",
  "methodName" : "testAddNoEffect",
  "sourceCode" : "/**\r\n * Tests {@link Set#add(Object)}.\r\n */\r\n@Test\r\npublic void testAddNoEffect() {\r\n    Map.Entry<String, Object> entry = createMock(Map.Entry.class);\r\n    expect(entry.getKey()).andReturn(\"one\");\r\n    expect(entry.getValue()).andReturn(1);\r\n    expect(extractor.getValue(\"one\")).andReturn(1);\r\n    replay(extractor, entry);\r\n    assertFalse(entrySet.add(entry));\r\n    verify(extractor, entry);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\plugins\\tiles\\src\\test\\java\\org\\apache\\tiles\\request\\collection\\ScopeMapEntrySetTest.java",
  "methodName" : "testAddAll",
  "sourceCode" : "/**\r\n * Tests {@link Set#addAll(java.util.Collection)}.\r\n */\r\n@Test\r\npublic void testAddAll() {\r\n    Map.Entry<String, Object> entry1 = createMock(Map.Entry.class);\r\n    Map.Entry<String, Object> entry2 = createMock(Map.Entry.class);\r\n    expect(entry1.getKey()).andReturn(\"one\");\r\n    expect(entry1.getValue()).andReturn(1);\r\n    expect(entry2.getKey()).andReturn(\"two\");\r\n    expect(entry2.getValue()).andReturn(2);\r\n    expect(extractor.getValue(\"one\")).andReturn(null);\r\n    expect(extractor.getValue(\"two\")).andReturn(null);\r\n    extractor.setValue(\"one\", 1);\r\n    extractor.setValue(\"two\", 2);\r\n    replay(extractor, entry1, entry2);\r\n    List<Map.Entry<String, Object>> coll = new ArrayList<>();\r\n    coll.add(entry1);\r\n    coll.add(entry2);\r\n    assertTrue(entrySet.addAll(coll));\r\n    verify(extractor, entry1, entry2);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\plugins\\tiles\\src\\test\\java\\org\\apache\\tiles\\request\\collection\\ScopeMapEntrySetTest.java",
  "methodName" : "testClear",
  "sourceCode" : "/**\r\n * Test method for {@link ScopeMap#clear()}.\r\n */\r\n@Test\r\npublic void testClear() {\r\n    Enumeration<String> keys = createMock(Enumeration.class);\r\n    expect(extractor.getKeys()).andReturn(keys);\r\n    expect(keys.hasMoreElements()).andReturn(true);\r\n    expect(keys.nextElement()).andReturn(\"one\");\r\n    expect(keys.hasMoreElements()).andReturn(true);\r\n    expect(keys.nextElement()).andReturn(\"two\");\r\n    expect(keys.hasMoreElements()).andReturn(false);\r\n    extractor.removeValue(\"one\");\r\n    extractor.removeValue(\"two\");\r\n    replay(extractor, keys);\r\n    entrySet.clear();\r\n    verify(extractor, keys);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\plugins\\tiles\\src\\test\\java\\org\\apache\\tiles\\request\\collection\\ScopeMapEntrySetTest.java",
  "methodName" : "testRemove",
  "sourceCode" : "/**\r\n * Tests {@link Set#remove(Object)}.\r\n */\r\n@Test\r\npublic void testRemove() {\r\n    Map.Entry<String, Object> entry = createMock(Map.Entry.class);\r\n    expect(entry.getKey()).andReturn(\"one\");\r\n    expect(entry.getValue()).andReturn(1);\r\n    expect(extractor.getValue(\"one\")).andReturn(1);\r\n    extractor.removeValue(\"one\");\r\n    replay(extractor, entry);\r\n    assertTrue(entrySet.remove(entry));\r\n    verify(extractor, entry);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\plugins\\tiles\\src\\test\\java\\org\\apache\\tiles\\request\\collection\\ScopeMapEntrySetTest.java",
  "methodName" : "testRemoveNoEffect",
  "sourceCode" : "/**\r\n * Tests {@link Set#remove(Object)}.\r\n */\r\n@Test\r\npublic void testRemoveNoEffect() {\r\n    Map.Entry<String, Object> entry = createMock(Map.Entry.class);\r\n    expect(entry.getKey()).andReturn(\"one\");\r\n    expect(extractor.getValue(\"one\")).andReturn(null);\r\n    replay(extractor, entry);\r\n    assertFalse(entrySet.remove(entry));\r\n    verify(extractor, entry);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\plugins\\tiles\\src\\test\\java\\org\\apache\\tiles\\request\\collection\\ScopeMapEntrySetTest.java",
  "methodName" : "testRemoveAll",
  "sourceCode" : "/**\r\n * Tests {@link Set#addAll(java.util.Collection)}.\r\n */\r\n@Test\r\npublic void testRemoveAll() {\r\n    Map.Entry<String, Object> entry1 = createMock(Map.Entry.class);\r\n    Map.Entry<String, Object> entry2 = createMock(Map.Entry.class);\r\n    expect(entry1.getKey()).andReturn(\"one\");\r\n    expect(entry1.getValue()).andReturn(1);\r\n    expect(entry2.getKey()).andReturn(\"two\");\r\n    expect(entry2.getValue()).andReturn(2);\r\n    expect(extractor.getValue(\"one\")).andReturn(1);\r\n    expect(extractor.getValue(\"two\")).andReturn(2);\r\n    extractor.removeValue(\"one\");\r\n    extractor.removeValue(\"two\");\r\n    replay(extractor, entry1, entry2);\r\n    List<Map.Entry<String, Object>> coll = new ArrayList<>();\r\n    coll.add(entry1);\r\n    coll.add(entry2);\r\n    assertTrue(entrySet.removeAll(coll));\r\n    verify(extractor, entry1, entry2);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\plugins\\tiles\\src\\test\\java\\org\\apache\\tiles\\request\\collection\\ScopeMapEntrySetTest.java",
  "methodName" : "testRetainAll",
  "sourceCode" : "/**\r\n * Tests {@link Set#addAll(java.util.Collection)}.\r\n */\r\n@Test\r\npublic void testRetainAll() {\r\n    Enumeration<String> keys = createMock(Enumeration.class);\r\n    expect(extractor.getKeys()).andReturn(keys);\r\n    expect(keys.hasMoreElements()).andReturn(true);\r\n    expect(keys.nextElement()).andReturn(\"one\");\r\n    expect(keys.hasMoreElements()).andReturn(true);\r\n    expect(keys.nextElement()).andReturn(\"two\");\r\n    expect(keys.hasMoreElements()).andReturn(true);\r\n    expect(keys.nextElement()).andReturn(\"three\");\r\n    expect(keys.hasMoreElements()).andReturn(false);\r\n    Map.Entry<String, Object> entry1 = new MapEntry<>(\"one\", 1, false);\r\n    Map.Entry<String, Object> entry2 = new MapEntry<>(\"two\", 2, false);\r\n    expect(extractor.getValue(\"one\")).andReturn(1);\r\n    expect(extractor.getValue(\"two\")).andReturn(3);\r\n    expect(extractor.getValue(\"three\")).andReturn(4);\r\n    extractor.removeValue(\"two\");\r\n    extractor.removeValue(\"three\");\r\n    replay(extractor, keys);\r\n    List<Map.Entry<String, Object>> coll = new ArrayList<>();\r\n    coll.add(entry1);\r\n    coll.add(entry2);\r\n    assertTrue(entrySet.retainAll(coll));\r\n    verify(extractor, keys);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\plugins\\tiles\\src\\test\\java\\org\\apache\\tiles\\request\\collection\\ScopeMapTest.java",
  "methodName" : "testClear",
  "sourceCode" : "/**\r\n * Test method for {@link ScopeMap#clear()}.\r\n */\r\n@Test\r\npublic void testClear() {\r\n    Enumeration<String> keys = createMock(Enumeration.class);\r\n    expect(extractor.getKeys()).andReturn(keys);\r\n    expect(keys.hasMoreElements()).andReturn(true);\r\n    expect(keys.nextElement()).andReturn(\"one\");\r\n    expect(keys.hasMoreElements()).andReturn(true);\r\n    expect(keys.nextElement()).andReturn(\"two\");\r\n    expect(keys.hasMoreElements()).andReturn(false);\r\n    extractor.removeValue(\"one\");\r\n    extractor.removeValue(\"two\");\r\n    replay(extractor, keys);\r\n    map.clear();\r\n    verify(extractor, keys);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\plugins\\tiles\\src\\test\\java\\org\\apache\\tiles\\request\\collection\\ScopeMapTest.java",
  "methodName" : "testKeySet",
  "sourceCode" : "/**\r\n * Test method for {@link ScopeMap#keySet()}.\r\n */\r\n@Test\r\npublic void testKeySet() {\r\n    replay(extractor);\r\n    assertTrue(map.keySet() instanceof RemovableKeySet);\r\n    verify(extractor);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\plugins\\tiles\\src\\test\\java\\org\\apache\\tiles\\request\\collection\\ScopeMapTest.java",
  "methodName" : "testPutStringObject",
  "sourceCode" : "/**\r\n * Test method for {@link ScopeMap#put(String, Object)}.\r\n */\r\n@Test\r\npublic void testPutStringObject() {\r\n    expect(extractor.getValue(\"one\")).andReturn(null);\r\n    extractor.setValue(\"one\", 1);\r\n    replay(extractor);\r\n    assertNull(map.put(\"one\", 1));\r\n    verify(extractor);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\plugins\\tiles\\src\\test\\java\\org\\apache\\tiles\\request\\collection\\ScopeMapTest.java",
  "methodName" : "testPutAllMapOfQextendsStringQextendsObject",
  "sourceCode" : "/**\r\n * Test method for {@link ScopeMap#putAll(Map)}.\r\n */\r\n@Test\r\npublic void testPutAllMapOfQextendsStringQextendsObject() {\r\n    Map<String, Object> items = new LinkedHashMap<>();\r\n    items.put(\"one\", 1);\r\n    items.put(\"two\", 2);\r\n    extractor.setValue(\"one\", 1);\r\n    extractor.setValue(\"two\", 2);\r\n    replay(extractor);\r\n    map.putAll(items);\r\n    verify(extractor);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\plugins\\tiles\\src\\test\\java\\org\\apache\\tiles\\request\\collection\\ScopeMapTest.java",
  "methodName" : "testRemoveObject",
  "sourceCode" : "/**\r\n * Test method for {@link ScopeMap#remove(Object)}.\r\n */\r\n@Test\r\npublic void testRemoveObject() {\r\n    expect(extractor.getValue(\"one\")).andReturn(1);\r\n    extractor.removeValue(\"one\");\r\n    replay(extractor);\r\n    assertEquals(1, map.remove(\"one\"));\r\n    verify(extractor);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\plugins\\tiles\\src\\test\\java\\org\\apache\\tiles\\request\\DispatchRequestWrapperTest.java",
  "methodName" : "testDispatch",
  "sourceCode" : "/**\r\n * Test method for {@link DispatchRequestWrapper#dispatch(String)}.\r\n *\r\n * @throws IOException If something goes wrong.\r\n */\r\n@Test\r\npublic void testDispatch() throws IOException {\r\n    DispatchRequest wrappedRequest = createMockRequest();\r\n    wrappedRequest.dispatch(\"/my/path.html\");\r\n    replay(wrappedRequest);\r\n    DispatchRequestWrapper request = createRequestWrapper(wrappedRequest);\r\n    request.dispatch(\"/my/path.html\");\r\n    verify(wrappedRequest);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\plugins\\tiles\\src\\test\\java\\org\\apache\\tiles\\request\\DispatchRequestWrapperTest.java",
  "methodName" : "testInclude",
  "sourceCode" : "/**\r\n * Test method for {@link DispatchRequestWrapper#include(String)}.\r\n *\r\n * @throws IOException If something goes wrong.\r\n */\r\n@Test\r\npublic void testInclude() throws IOException {\r\n    DispatchRequest wrappedRequest = createMockRequest();\r\n    wrappedRequest.include(\"/my/path.html\");\r\n    replay(wrappedRequest);\r\n    DispatchRequestWrapper request = createRequestWrapper(wrappedRequest);\r\n    request.include(\"/my/path.html\");\r\n    verify(wrappedRequest);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\plugins\\tiles\\src\\test\\java\\org\\apache\\tiles\\request\\DispatchRequestWrapperTest.java",
  "methodName" : "testSetContentType",
  "sourceCode" : "/**\r\n * Test method for {@link DispatchRequestWrapper#setContentType(String)}.\r\n */\r\n@Test\r\npublic void testSetContentType() {\r\n    DispatchRequest wrappedRequest = createMockRequest();\r\n    wrappedRequest.setContentType(\"text/html\");\r\n    replay(wrappedRequest);\r\n    DispatchRequestWrapper request = createRequestWrapper(wrappedRequest);\r\n    request.setContentType(\"text/html\");\r\n    verify(wrappedRequest);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\plugins\\tiles\\src\\test\\java\\org\\apache\\tiles\\request\\locale\\PostfixedApplicationResourceTest.java",
  "methodName" : "testGetLocalePath",
  "sourceCode" : "/**\r\n * Test getLocalePath(String path, Locale locale).\r\n */\r\n@Test\r\npublic void testGetLocalePath() {\r\n    TestApplicationResource resource = new TestApplicationResource(\"/my test/path_fr.html\");\r\n    assertEquals(\"/my test/path.html\", resource.getLocalePath(null));\r\n    assertEquals(\"/my test/path.html\", resource.getLocalePath(Locale.ROOT));\r\n    assertEquals(\"/my test/path_it.html\", resource.getLocalePath(Locale.ITALIAN));\r\n    assertEquals(\"/my test/path_it_IT.html\", resource.getLocalePath(Locale.ITALY));\r\n    assertEquals(\"/my test/path_en_GB_scotland.html\", resource.getLocalePath(new Locale(\"en\", \"GB\", \"scotland\")));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\plugins\\tiles\\src\\test\\java\\org\\apache\\tiles\\request\\locale\\PostfixedApplicationResourceTest.java",
  "methodName" : "testBuildFromString",
  "sourceCode" : "@Test\r\npublic void testBuildFromString() {\r\n    TestApplicationResource resource = new TestApplicationResource(\"/my test/path_en_GB_scotland.html\");\r\n    assertEquals(\"/my test/path_en_GB_scotland.html\", resource.getLocalePath());\r\n    assertEquals(\"/my test/path.html\", resource.getPath());\r\n    assertEquals(new Locale(\"en\", \"GB\", \"scotland\"), resource.getLocale());\r\n    resource = new TestApplicationResource(\"/my test/path_it_IT.html\");\r\n    assertEquals(\"/my test/path_it_IT.html\", resource.getLocalePath());\r\n    assertEquals(\"/my test/path.html\", resource.getPath());\r\n    assertEquals(Locale.ITALY, resource.getLocale());\r\n    resource = new TestApplicationResource(\"/my test/path_it.html\");\r\n    assertEquals(\"/my test/path_it.html\", resource.getLocalePath());\r\n    assertEquals(\"/my test/path.html\", resource.getPath());\r\n    assertEquals(Locale.ITALIAN, resource.getLocale());\r\n    resource = new TestApplicationResource(\"/my test/path.html\");\r\n    assertEquals(\"/my test/path.html\", resource.getLocalePath());\r\n    assertEquals(\"/my test/path.html\", resource.getPath());\r\n    assertEquals(Locale.ROOT, resource.getLocale());\r\n    resource = new TestApplicationResource(\"/my test/path_zz.html\");\r\n    assertEquals(\"/my test/path_zz.html\", resource.getLocalePath());\r\n    assertEquals(\"/my test/path_zz.html\", resource.getPath());\r\n    assertEquals(Locale.ROOT, resource.getLocale());\r\n    resource = new TestApplicationResource(\"/my test/path_en_ZZ.html\");\r\n    assertEquals(\"/my test/path_en.html\", resource.getLocalePath());\r\n    assertEquals(\"/my test/path.html\", resource.getPath());\r\n    assertEquals(new Locale(\"en\"), resource.getLocale());\r\n    resource = new TestApplicationResource(\"/my test/path_tiles.html\");\r\n    assertEquals(\"/my test/path_tiles.html\", resource.getLocalePath());\r\n    assertEquals(\"/my test/path_tiles.html\", resource.getPath());\r\n    assertEquals(Locale.ROOT, resource.getLocale());\r\n    resource = new TestApplicationResource(\"/my test/path_longwordthatbreaksISO639.html\");\r\n    assertEquals(\"/my test/path_longwordthatbreaksISO639.html\", resource.getLocalePath());\r\n    assertEquals(\"/my test/path_longwordthatbreaksISO639.html\", resource.getPath());\r\n    assertEquals(Locale.ROOT, resource.getLocale());\r\n    resource = new TestApplicationResource(\"/my test/path_en_tiles.html\");\r\n    assertEquals(\"/my test/path_en.html\", resource.getLocalePath());\r\n    assertEquals(\"/my test/path.html\", resource.getPath());\r\n    assertEquals(new Locale(\"en\"), resource.getLocale());\r\n    resource = new TestApplicationResource(\"/my test/path_en_longwordthatbreaksISO3166.html\");\r\n    assertEquals(\"/my test/path_en.html\", resource.getLocalePath());\r\n    assertEquals(\"/my test/path.html\", resource.getPath());\r\n    assertEquals(new Locale(\"en\"), resource.getLocale());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\plugins\\tiles\\src\\test\\java\\org\\apache\\tiles\\request\\locale\\PostfixedApplicationResourceTest.java",
  "methodName" : "testBuildFromStringAndLocale",
  "sourceCode" : "@Test\r\npublic void testBuildFromStringAndLocale() {\r\n    TestApplicationResource resource = new TestApplicationResource(\"/my test/path.html\", new Locale(\"en\", \"GB\", \"scotland\"));\r\n    assertEquals(\"/my test/path_en_GB_scotland.html\", resource.getLocalePath());\r\n    assertEquals(\"/my test/path.html\", resource.getPath());\r\n    assertEquals(new Locale(\"en\", \"GB\", \"scotland\"), resource.getLocale());\r\n    resource = new TestApplicationResource(\"/my test/path.html\", Locale.ITALY);\r\n    assertEquals(\"/my test/path_it_IT.html\", resource.getLocalePath());\r\n    assertEquals(\"/my test/path.html\", resource.getPath());\r\n    assertEquals(Locale.ITALY, resource.getLocale());\r\n    resource = new TestApplicationResource(\"/my test/path.html\", Locale.ITALIAN);\r\n    assertEquals(\"/my test/path_it.html\", resource.getLocalePath());\r\n    assertEquals(\"/my test/path.html\", resource.getPath());\r\n    assertEquals(Locale.ITALIAN, resource.getLocale());\r\n    resource = new TestApplicationResource(\"/my test/path.html\", Locale.ROOT);\r\n    assertEquals(\"/my test/path.html\", resource.getLocalePath());\r\n    assertEquals(\"/my test/path.html\", resource.getPath());\r\n    assertEquals(Locale.ROOT, resource.getLocale());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\plugins\\tiles\\src\\test\\java\\org\\apache\\tiles\\request\\locale\\URLApplicationResourceTest.java",
  "methodName" : "testGetLocalePath",
  "sourceCode" : "/**\r\n * Test getLocalePath(String path, Locale locale).\r\n */\r\n@Test\r\npublic void testGetLocalePath() throws MalformedURLException {\r\n    URLApplicationResource resource = new URLApplicationResource(\"/my test/path_fr.html\", new URL(\"file:///\"));\r\n    assertEquals(\"/my test/path.html\", resource.getLocalePath(null));\r\n    assertEquals(\"/my test/path.html\", resource.getLocalePath(Locale.ROOT));\r\n    assertEquals(\"/my test/path_it.html\", resource.getLocalePath(Locale.ITALIAN));\r\n    assertEquals(\"/my test/path_it_IT.html\", resource.getLocalePath(Locale.ITALY));\r\n    assertEquals(\"/my test/path_en_GB_scotland.html\", resource.getLocalePath(new Locale(\"en\", \"GB\", \"scotland\")));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\plugins\\tiles\\src\\test\\java\\org\\apache\\tiles\\request\\locale\\URLApplicationResourceTest.java",
  "methodName" : "testBuildFromString",
  "sourceCode" : "@Test\r\npublic void testBuildFromString() throws MalformedURLException {\r\n    URLApplicationResource resource = new URLApplicationResource(\"/my test/path_en_GB_scotland.html\", new URL(\"file:///\"));\r\n    assertEquals(\"/my test/path_en_GB_scotland.html\", resource.getLocalePath());\r\n    assertEquals(\"/my test/path.html\", resource.getPath());\r\n    assertEquals(new Locale(\"en\", \"GB\", \"scotland\"), resource.getLocale());\r\n    resource = new URLApplicationResource(\"/my test/path_it_IT.html\", new URL(\"file:///\"));\r\n    assertEquals(\"/my test/path_it_IT.html\", resource.getLocalePath());\r\n    assertEquals(\"/my test/path.html\", resource.getPath());\r\n    assertEquals(Locale.ITALY, resource.getLocale());\r\n    resource = new URLApplicationResource(\"/my test/path_it.html\", new URL(\"file:///\"));\r\n    assertEquals(\"/my test/path_it.html\", resource.getLocalePath());\r\n    assertEquals(\"/my test/path.html\", resource.getPath());\r\n    assertEquals(Locale.ITALIAN, resource.getLocale());\r\n    resource = new URLApplicationResource(\"/my test/path.html\", new URL(\"file:///\"));\r\n    assertEquals(\"/my test/path.html\", resource.getLocalePath());\r\n    assertEquals(\"/my test/path.html\", resource.getPath());\r\n    assertEquals(Locale.ROOT, resource.getLocale());\r\n    resource = new URLApplicationResource(\"/my test/path_zz.html\", new URL(\"file:///\"));\r\n    assertEquals(\"/my test/path_zz.html\", resource.getLocalePath());\r\n    assertEquals(\"/my test/path_zz.html\", resource.getPath());\r\n    assertEquals(Locale.ROOT, resource.getLocale());\r\n    resource = new URLApplicationResource(\"/my test/path_en_ZZ.html\", new URL(\"file:///\"));\r\n    assertEquals(\"/my test/path_en.html\", resource.getLocalePath());\r\n    assertEquals(\"/my test/path.html\", resource.getPath());\r\n    assertEquals(new Locale(\"en\"), resource.getLocale());\r\n    resource = new URLApplicationResource(\"/my test/path_tiles.html\", new URL(\"file:///\"));\r\n    assertEquals(\"/my test/path_tiles.html\", resource.getLocalePath());\r\n    assertEquals(\"/my test/path_tiles.html\", resource.getPath());\r\n    assertEquals(Locale.ROOT, resource.getLocale());\r\n    resource = new URLApplicationResource(\"/my test/path_longwordthatbreaksISO639.html\", new URL(\"file:///\"));\r\n    assertEquals(\"/my test/path_longwordthatbreaksISO639.html\", resource.getLocalePath());\r\n    assertEquals(\"/my test/path_longwordthatbreaksISO639.html\", resource.getPath());\r\n    assertEquals(Locale.ROOT, resource.getLocale());\r\n    resource = new URLApplicationResource(\"/my test/path_en_tiles.html\", new URL(\"file:///\"));\r\n    assertEquals(\"/my test/path_en.html\", resource.getLocalePath());\r\n    assertEquals(\"/my test/path.html\", resource.getPath());\r\n    assertEquals(new Locale(\"en\"), resource.getLocale());\r\n    resource = new URLApplicationResource(\"/my test/path_en_longwordthatbreaksISO3166.html\", new URL(\"file:///\"));\r\n    assertEquals(\"/my test/path_en.html\", resource.getLocalePath());\r\n    assertEquals(\"/my test/path.html\", resource.getPath());\r\n    assertEquals(new Locale(\"en\"), resource.getLocale());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\plugins\\tiles\\src\\test\\java\\org\\apache\\tiles\\request\\locale\\URLApplicationResourceTest.java",
  "methodName" : "testBuildFromStringAndLocale",
  "sourceCode" : "@Test\r\npublic void testBuildFromStringAndLocale() throws MalformedURLException {\r\n    URLApplicationResource resource = new URLApplicationResource(\"/my test/path.html\", new Locale(\"en\", \"GB\", \"scotland\"), new URL(\"file:///\"));\r\n    assertEquals(\"/my test/path_en_GB_scotland.html\", resource.getLocalePath());\r\n    assertEquals(\"/my test/path.html\", resource.getPath());\r\n    assertEquals(new Locale(\"en\", \"GB\", \"scotland\"), resource.getLocale());\r\n    resource = new URLApplicationResource(\"/my test/path.html\", Locale.ITALY, new URL(\"file:///\"));\r\n    assertEquals(\"/my test/path_it_IT.html\", resource.getLocalePath());\r\n    assertEquals(\"/my test/path.html\", resource.getPath());\r\n    assertEquals(Locale.ITALY, resource.getLocale());\r\n    resource = new URLApplicationResource(\"/my test/path.html\", Locale.ITALIAN, new URL(\"file:///\"));\r\n    assertEquals(\"/my test/path_it.html\", resource.getLocalePath());\r\n    assertEquals(\"/my test/path.html\", resource.getPath());\r\n    assertEquals(Locale.ITALIAN, resource.getLocale());\r\n    resource = new URLApplicationResource(\"/my test/path.html\", Locale.ROOT, new URL(\"file:///\"));\r\n    assertEquals(\"/my test/path.html\", resource.getLocalePath());\r\n    assertEquals(\"/my test/path.html\", resource.getPath());\r\n    assertEquals(Locale.ROOT, resource.getLocale());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\plugins\\tiles\\src\\test\\java\\org\\apache\\tiles\\request\\locale\\URLApplicationResourceTest.java",
  "methodName" : "testGetLastModified",
  "sourceCode" : "@Test\r\npublic void testGetLastModified() throws IOException {\r\n    URL url = getClass().getClassLoader().getResource(\"org/apache/tiles/request/locale/resource.txt\");\r\n    assertNotNull(url);\r\n    URLApplicationResource resource = new URLApplicationResource(\"org/apache/tiles/request/locale/resource.txt\", url);\r\n    assertTrue(resource.getLastModified() > 0);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\plugins\\tiles\\src\\test\\java\\org\\apache\\tiles\\request\\locale\\URLApplicationResourceTest.java",
  "methodName" : "testGetLastModifiedWithSpace",
  "sourceCode" : "@Test\r\npublic void testGetLastModifiedWithSpace() throws IOException {\r\n    URL url = getClass().getClassLoader().getResource(\"org/apache/tiles/request/locale/resource with space.txt\");\r\n    assertNotNull(url);\r\n    URLApplicationResource resource = new URLApplicationResource(\"org/apache/tiles/request/locale/resource with space.txt\", url);\r\n    assertTrue(resource.getLastModified() > 0);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\plugins\\tiles\\src\\test\\java\\org\\apache\\tiles\\request\\locale\\URLApplicationResourceTest.java",
  "methodName" : "testGetInputStream",
  "sourceCode" : "@Test\r\npublic void testGetInputStream() throws IOException {\r\n    URL url = getClass().getClassLoader().getResource(\"org/apache/tiles/request/locale/resource.txt\");\r\n    assertNotNull(url);\r\n    URLApplicationResource resource = new URLApplicationResource(\"org/apache/tiles/request/locale/resource.txt\", url);\r\n    InputStream is = resource.getInputStream();\r\n    assertNotNull(is);\r\n    is.close();\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\plugins\\tiles\\src\\test\\java\\org\\apache\\tiles\\request\\locale\\URLApplicationResourceTest.java",
  "methodName" : "testGetInputStreamWithSpace",
  "sourceCode" : "@Test\r\npublic void testGetInputStreamWithSpace() throws IOException {\r\n    URL url = getClass().getClassLoader().getResource(\"org/apache/tiles/request/locale/resource with space.txt\");\r\n    assertNotNull(url);\r\n    URLApplicationResource resource = new URLApplicationResource(\"org/apache/tiles/request/locale/resource with space.txt\", url);\r\n    InputStream is = resource.getInputStream();\r\n    assertNotNull(is);\r\n    is.close();\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\plugins\\tiles\\src\\test\\java\\org\\apache\\tiles\\request\\locale\\URLApplicationResourceTest.java",
  "methodName" : "testLocalProtocol",
  "sourceCode" : "@Test(expected = FileNotFoundException.class)\r\npublic void testLocalProtocol() throws IOException {\r\n    URL url = new URL(\"file://foo/bar.txt\");\r\n    URLApplicationResource resource = new URLApplicationResource(\"org/apache/tiles/request/locale/resource.txt\", url);\r\n    resource.getInputStream();\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\plugins\\tiles\\src\\test\\java\\org\\apache\\tiles\\request\\NotAvailableFeatureExceptionTest.java",
  "methodName" : "testNotAvailableFeatureExceptionStringThrowable",
  "sourceCode" : "/**\r\n * Test method for {@link NotAvailableFeatureException#NotAvailableFeatureException(String, Throwable)}.\r\n */\r\n@Test\r\npublic void testNotAvailableFeatureExceptionStringThrowable() {\r\n    Throwable cause = new Throwable();\r\n    NotAvailableFeatureException exception = new NotAvailableFeatureException(\"my message\", cause);\r\n    assertEquals(\"my message\", exception.getMessage());\r\n    assertEquals(cause, exception.getCause());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\plugins\\tiles\\src\\test\\java\\org\\apache\\tiles\\request\\reflect\\CannotInstantiateObjectExceptionTest.java",
  "methodName" : "testCannotInstantiateObjectExceptionStringThrowable",
  "sourceCode" : "/**\r\n * Test method for {@link CannotInstantiateObjectException#CannotInstantiateObjectException(String, Throwable)}.\r\n */\r\n@Test\r\npublic void testCannotInstantiateObjectExceptionStringThrowable() {\r\n    Throwable cause = new Throwable();\r\n    CannotInstantiateObjectException exception = new CannotInstantiateObjectException(\"my message\", cause);\r\n    assertEquals(\"my message\", exception.getMessage());\r\n    assertEquals(cause, exception.getCause());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\plugins\\tiles\\src\\test\\java\\org\\apache\\tiles\\request\\reflect\\ClassUtilTest.java",
  "methodName" : "testCollectBeanInfo",
  "sourceCode" : "/**\r\n * Test method for {@link ClassUtil#collectBeanInfo(Class, Map)}.\r\n */\r\n@Test\r\npublic void testCollectBeanInfo() {\r\n    Map<String, PropertyDescriptor> name2descriptor = new HashMap<>();\r\n    ClassUtil.collectBeanInfo(TestInterface.class, name2descriptor);\r\n    assertEquals(MAP_SIZE, name2descriptor.size());\r\n    PropertyDescriptor descriptor = name2descriptor.get(\"value\");\r\n    assertEquals(\"value\", descriptor.getName());\r\n    assertEquals(int.class, descriptor.getPropertyType());\r\n    assertNotNull(descriptor.getReadMethod());\r\n    assertNotNull(descriptor.getWriteMethod());\r\n    descriptor = name2descriptor.get(\"value2\");\r\n    assertEquals(\"value2\", descriptor.getName());\r\n    assertEquals(long.class, descriptor.getPropertyType());\r\n    assertNotNull(descriptor.getReadMethod());\r\n    assertNull(descriptor.getWriteMethod());\r\n    descriptor = name2descriptor.get(\"value3\");\r\n    assertEquals(\"value3\", descriptor.getName());\r\n    assertEquals(String.class, descriptor.getPropertyType());\r\n    assertNull(descriptor.getReadMethod());\r\n    assertNotNull(descriptor.getWriteMethod());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\plugins\\tiles\\src\\test\\java\\org\\apache\\tiles\\request\\reflect\\ClassUtilTest.java",
  "methodName" : "testGetClass",
  "sourceCode" : "/**\r\n * Test method for {@link ClassUtil#getClass(String, Class)}.\r\n * @throws ClassNotFoundException If something goes wrong.\r\n */\r\n@Test\r\npublic void testGetClass() throws ClassNotFoundException {\r\n    assertEquals(TestInterface.class, ClassUtil.getClass(TestInterface.class.getName(), Object.class));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\plugins\\tiles\\src\\test\\java\\org\\apache\\tiles\\request\\reflect\\ClassUtilTest.java",
  "methodName" : "testGetClassException",
  "sourceCode" : "/**\r\n * Test method for {@link ClassUtil#getClass(String, Class)}.\r\n * @throws ClassNotFoundException If something goes wrong.\r\n */\r\n@Test(expected = ClassNotFoundException.class)\r\npublic void testGetClassException() throws ClassNotFoundException {\r\n    ClassUtil.getClass(\"this.class.does.not.Exist\", Object.class);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\plugins\\tiles\\src\\test\\java\\org\\apache\\tiles\\request\\reflect\\ClassUtilTest.java",
  "methodName" : "testInstantiate",
  "sourceCode" : "/**\r\n * Test method for {@link ClassUtil#instantiate(String, boolean)}.\r\n */\r\n@Test\r\npublic void testInstantiate() {\r\n    assertNotNull(ClassUtil.instantiate(TestClass.class.getName(), true));\r\n    assertNull(ClassUtil.instantiate(\"this.class.does.not.Exist\", true));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\plugins\\tiles\\src\\test\\java\\org\\apache\\tiles\\request\\reflect\\ClassUtilTest.java",
  "methodName" : "testInstantiateOneParameter",
  "sourceCode" : "/**\r\n * Test method for {@link ClassUtil#instantiate(String, boolean)}.\r\n */\r\n@Test\r\npublic void testInstantiateOneParameter() {\r\n    assertNotNull(ClassUtil.instantiate(TestClass.class.getName()));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\plugins\\tiles\\src\\test\\java\\org\\apache\\tiles\\request\\reflect\\ClassUtilTest.java",
  "methodName" : "testInstantiateOneParameterException",
  "sourceCode" : "/**\r\n * Test method for {@link ClassUtil#instantiate(String)}.\r\n */\r\n@Test(expected = CannotInstantiateObjectException.class)\r\npublic void testInstantiateOneParameterException() {\r\n    assertNotNull(ClassUtil.instantiate(\"this.class.does.not.Exist\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\plugins\\tiles\\src\\test\\java\\org\\apache\\tiles\\request\\reflect\\ClassUtilTest.java",
  "methodName" : "testInstantiateInstantiationException",
  "sourceCode" : "/**\r\n * Test method for {@link ClassUtil#instantiate(String)}.\r\n */\r\n@Test(expected = CannotInstantiateObjectException.class)\r\npublic void testInstantiateInstantiationException() {\r\n    ClassUtil.instantiate(TestInterface.class.getName());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\plugins\\tiles\\src\\test\\java\\org\\apache\\tiles\\request\\reflect\\ClassUtilTest.java",
  "methodName" : "testInstantiateIllegalAccessException",
  "sourceCode" : "/**\r\n * Test method for {@link ClassUtil#instantiate(String)}.\r\n */\r\n@Test(expected = CannotInstantiateObjectException.class)\r\npublic void testInstantiateIllegalAccessException() {\r\n    ClassUtil.instantiate(TestPrivateClass.class.getName());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\plugins\\tiles\\src\\test\\java\\org\\apache\\tiles\\request\\render\\BasicRendererFactoryTest.java",
  "methodName" : "testInitAndGetRenderer",
  "sourceCode" : "/**\r\n * Tests execution and\r\n * {@link BasicRendererFactory#getRenderer(String)}.\r\n */\r\n@Test\r\npublic void testInitAndGetRenderer() {\r\n    Renderer renderer1 = createMock(Renderer.class);\r\n    Renderer renderer2 = createMock(Renderer.class);\r\n    Renderer renderer3 = createMock(Renderer.class);\r\n    Renderer renderer4 = createMock(Renderer.class);\r\n    ApplicationContext applicationContext = createMock(ApplicationContext.class);\r\n    replay(renderer1, renderer2, renderer3, renderer4, applicationContext);\r\n    rendererFactory.registerRenderer(\"string\", renderer1);\r\n    rendererFactory.registerRenderer(\"test\", renderer2);\r\n    rendererFactory.registerRenderer(\"test2\", renderer3);\r\n    rendererFactory.setDefaultRenderer(renderer4);\r\n    Renderer renderer = rendererFactory.getRenderer(\"string\");\r\n    assertSame(renderer1, renderer);\r\n    renderer = rendererFactory.getRenderer(\"test\");\r\n    assertSame(renderer2, renderer);\r\n    renderer = rendererFactory.getRenderer(\"test2\");\r\n    assertSame(renderer3, renderer);\r\n    renderer = rendererFactory.getRenderer(null);\r\n    assertSame(renderer4, renderer);\r\n    verify(renderer1, renderer2, renderer3, renderer4, applicationContext);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\plugins\\tiles\\src\\test\\java\\org\\apache\\tiles\\request\\render\\BasicRendererFactoryTest.java",
  "methodName" : "testGetRendererException",
  "sourceCode" : "/**\r\n * Tests execution and\r\n * {@link BasicRendererFactory#getRenderer(String)}.\r\n */\r\n@Test(expected = NoSuchRendererException.class)\r\npublic void testGetRendererException() {\r\n    Renderer renderer1 = createMock(Renderer.class);\r\n    Renderer renderer2 = createMock(Renderer.class);\r\n    Renderer renderer3 = createMock(Renderer.class);\r\n    Renderer renderer4 = createMock(Renderer.class);\r\n    ApplicationContext applicationContext = createMock(ApplicationContext.class);\r\n    replay(renderer1, renderer2, renderer3, renderer4, applicationContext);\r\n    rendererFactory.registerRenderer(\"string\", renderer1);\r\n    rendererFactory.registerRenderer(\"test\", renderer2);\r\n    rendererFactory.registerRenderer(\"test2\", renderer3);\r\n    rendererFactory.setDefaultRenderer(renderer4);\r\n    try {\r\n        rendererFactory.getRenderer(\"nothing\");\r\n    } finally {\r\n        verify(renderer1, renderer2, renderer3, renderer4, applicationContext);\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\plugins\\tiles\\src\\test\\java\\org\\apache\\tiles\\request\\render\\ChainedDelegateRendererTest.java",
  "methodName" : "testWriteDefinition",
  "sourceCode" : "/**\r\n * Tests\r\n * {@link ChainedDelegateRenderer#render(String, Request)}\r\n * writing a definition.\r\n *\r\n * @throws IOException If something goes wrong during rendition.\r\n */\r\n@Test\r\npublic void testWriteDefinition() throws IOException {\r\n    Request requestContext = EasyMock.createMock(Request.class);\r\n    expect(definitionRenderer.isRenderable(\"my.definition\", requestContext)).andReturn(Boolean.TRUE);\r\n    definitionRenderer.render(\"my.definition\", requestContext);\r\n    replay(requestContext, stringRenderer, templateRenderer, definitionRenderer);\r\n    renderer.render(\"my.definition\", requestContext);\r\n    verify(requestContext, stringRenderer, templateRenderer, definitionRenderer);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\plugins\\tiles\\src\\test\\java\\org\\apache\\tiles\\request\\render\\ChainedDelegateRendererTest.java",
  "methodName" : "testWriteNull",
  "sourceCode" : "/**\r\n * Tests\r\n * {@link ChainedDelegateRenderer#render(String, Request)}\r\n * writing a definition.\r\n *\r\n * @throws IOException If something goes wrong during rendition.\r\n */\r\n@Test(expected = NullPointerException.class)\r\npublic void testWriteNull() throws IOException {\r\n    StringWriter writer = new StringWriter();\r\n    Request requestContext = EasyMock.createMock(Request.class);\r\n    replay(requestContext, stringRenderer, templateRenderer, definitionRenderer);\r\n    try {\r\n        renderer.render(null, requestContext);\r\n    } finally {\r\n        writer.close();\r\n        verify(requestContext, stringRenderer, templateRenderer, definitionRenderer);\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\plugins\\tiles\\src\\test\\java\\org\\apache\\tiles\\request\\render\\ChainedDelegateRendererTest.java",
  "methodName" : "testWriteNotRenderable",
  "sourceCode" : "/**\r\n * Tests\r\n * {@link ChainedDelegateRenderer#render(String, Request)}\r\n * writing a definition.\r\n *\r\n * @throws IOException If something goes wrong during rendition.\r\n */\r\n@Test(expected = CannotRenderException.class)\r\npublic void testWriteNotRenderable() throws IOException {\r\n    StringWriter writer = new StringWriter();\r\n    Request requestContext = EasyMock.createMock(Request.class);\r\n    expect(definitionRenderer.isRenderable(\"Result\", requestContext)).andReturn(Boolean.FALSE);\r\n    expect(templateRenderer.isRenderable(\"Result\", requestContext)).andReturn(Boolean.FALSE);\r\n    expect(stringRenderer.isRenderable(\"Result\", requestContext)).andReturn(Boolean.FALSE);\r\n    replay(requestContext, stringRenderer, templateRenderer, definitionRenderer);\r\n    try {\r\n        renderer.render(\"Result\", requestContext);\r\n    } finally {\r\n        writer.close();\r\n        verify(requestContext, stringRenderer, templateRenderer, definitionRenderer);\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\plugins\\tiles\\src\\test\\java\\org\\apache\\tiles\\request\\render\\ChainedDelegateRendererTest.java",
  "methodName" : "testWriteString",
  "sourceCode" : "/**\r\n * Tests\r\n * {@link ChainedDelegateRenderer#render(String, Request)}\r\n * writing a string.\r\n *\r\n * @throws IOException If something goes wrong during rendition.\r\n */\r\n@Test\r\npublic void testWriteString() throws IOException {\r\n    Request requestContext = EasyMock.createMock(Request.class);\r\n    expect(definitionRenderer.isRenderable(\"Result\", requestContext)).andReturn(Boolean.FALSE);\r\n    expect(templateRenderer.isRenderable(\"Result\", requestContext)).andReturn(Boolean.FALSE);\r\n    expect(stringRenderer.isRenderable(\"Result\", requestContext)).andReturn(Boolean.TRUE);\r\n    stringRenderer.render(\"Result\", requestContext);\r\n    replay(requestContext, stringRenderer, templateRenderer, definitionRenderer);\r\n    renderer.render(\"Result\", requestContext);\r\n    verify(requestContext, stringRenderer, templateRenderer, definitionRenderer);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\plugins\\tiles\\src\\test\\java\\org\\apache\\tiles\\request\\render\\ChainedDelegateRendererTest.java",
  "methodName" : "testWriteTemplate",
  "sourceCode" : "/**\r\n * Tests\r\n * {@link ChainedDelegateRenderer#render(String, Request)}\r\n * writing a template.\r\n *\r\n * @throws IOException If something goes wrong during rendition.\r\n */\r\n@Test\r\npublic void testWriteTemplate() throws IOException {\r\n    StringWriter writer = new StringWriter();\r\n    Request requestContext = EasyMock.createMock(Request.class);\r\n    templateRenderer.render(\"/myTemplate.jsp\", requestContext);\r\n    expect(definitionRenderer.isRenderable(\"/myTemplate.jsp\", requestContext)).andReturn(Boolean.FALSE);\r\n    expect(templateRenderer.isRenderable(\"/myTemplate.jsp\", requestContext)).andReturn(Boolean.TRUE);\r\n    replay(requestContext, stringRenderer, templateRenderer, definitionRenderer);\r\n    renderer.render(\"/myTemplate.jsp\", requestContext);\r\n    writer.close();\r\n    verify(requestContext, stringRenderer, templateRenderer, definitionRenderer);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\plugins\\tiles\\src\\test\\java\\org\\apache\\tiles\\request\\render\\DispatchRendererTest.java",
  "methodName" : "testWrite",
  "sourceCode" : "@Test\r\npublic void testWrite() throws IOException {\r\n    DispatchRequest requestContext = createMock(DispatchRequest.class);\r\n    requestContext.dispatch(\"/myTemplate.jsp\");\r\n    replay(requestContext);\r\n    renderer.render(\"/myTemplate.jsp\", requestContext);\r\n    verify(requestContext);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\plugins\\tiles\\src\\test\\java\\org\\apache\\tiles\\request\\render\\DispatchRendererTest.java",
  "methodName" : "testWriteNull",
  "sourceCode" : "@Test(expected = CannotRenderException.class)\r\npublic void testWriteNull() throws IOException {\r\n    DispatchRequest requestContext = createMock(DispatchRequest.class);\r\n    replay(requestContext);\r\n    renderer.render(null, requestContext);\r\n    verify(requestContext);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\plugins\\tiles\\src\\test\\java\\org\\apache\\tiles\\request\\render\\DispatchRendererTest.java",
  "methodName" : "testIsRenderable",
  "sourceCode" : "@Test\r\npublic void testIsRenderable() {\r\n    Request requestContext = createMock(DispatchRequest.class);\r\n    replay(requestContext);\r\n    assertTrue(renderer.isRenderable(\"/myTemplate.jsp\", requestContext));\r\n    assertFalse(renderer.isRenderable(null, requestContext));\r\n    verify(requestContext);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\plugins\\tiles\\src\\test\\java\\org\\apache\\tiles\\request\\render\\NoSuchRendererExceptionTest.java",
  "methodName" : "testNoSuchRendererExceptionString",
  "sourceCode" : "/**\r\n * Test method for {@link NoSuchRendererException#NoSuchRendererException(String)}.\r\n */\r\n@Test\r\npublic void testNoSuchRendererExceptionString() {\r\n    NoSuchRendererException exception = new NoSuchRendererException(\"my message\");\r\n    assertEquals(\"my message\", exception.getMessage());\r\n    assertNull(exception.getCause());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\plugins\\tiles\\src\\test\\java\\org\\apache\\tiles\\request\\render\\StringRendererTest.java",
  "methodName" : "testWrite",
  "sourceCode" : "/**\r\n * Tests\r\n * {@link StringRenderer#render(String, Request)}.\r\n *\r\n * @throws IOException If something goes wrong during rendition.\r\n */\r\n@Test\r\npublic void testWrite() throws IOException {\r\n    StringWriter writer = new StringWriter();\r\n    Request requestContext = createMock(Request.class);\r\n    expect(requestContext.getWriter()).andReturn(writer);\r\n    replay(requestContext);\r\n    renderer.render(\"Result\", requestContext);\r\n    writer.close();\r\n    assertEquals(\"Not written 'Result'\", \"Result\", writer.toString());\r\n    verify(requestContext);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\plugins\\tiles\\src\\test\\java\\org\\apache\\tiles\\request\\render\\StringRendererTest.java",
  "methodName" : "testIsRenderable",
  "sourceCode" : "/**\r\n * Tests\r\n * {@link StringRenderer#isRenderable(String, Request)}.\r\n */\r\n@Test\r\npublic void testIsRenderable() {\r\n    Request requestContext = createMock(Request.class);\r\n    replay(requestContext);\r\n    assertTrue(renderer.isRenderable(\"Result\", requestContext));\r\n    verify(requestContext);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\plugins\\tiles\\src\\test\\java\\org\\apache\\tiles\\request\\RequestExceptionTest.java",
  "methodName" : "testRequestExceptionString",
  "sourceCode" : "/**\r\n * Test method for {@link RequestException#RequestException(String)}.\r\n */\r\n@Test\r\npublic void testRequestExceptionString() {\r\n    RequestException exception = new RequestException(\"my message\");\r\n    assertEquals(\"my message\", exception.getMessage());\r\n    assertNull(exception.getCause());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\plugins\\tiles\\src\\test\\java\\org\\apache\\tiles\\request\\RequestExceptionTest.java",
  "methodName" : "testRequestExceptionStringThrowable",
  "sourceCode" : "/**\r\n * Test method for {@link RequestException#RequestException(String, Throwable)}.\r\n */\r\n@Test\r\npublic void testRequestExceptionStringThrowable() {\r\n    Throwable cause = new Throwable();\r\n    RequestException exception = new RequestException(\"my message\", cause);\r\n    assertEquals(\"my message\", exception.getMessage());\r\n    assertEquals(cause, exception.getCause());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\plugins\\tiles\\src\\test\\java\\org\\apache\\tiles\\template\\AddAttributeModelTest.java",
  "methodName" : "testExecute",
  "sourceCode" : "/**\r\n * Test method for {@link AddAttributeModel\r\n * #execute(java.lang.Object, java.lang.String, java.lang.String, java.lang.String,\r\n * Request, ModelBody)}.\r\n *\r\n * @throws IOException If something goes wrong.\r\n */\r\n@Test\r\npublic void testExecute() throws IOException {\r\n    Request request = createMock(Request.class);\r\n    ModelBody modelBody = createMock(ModelBody.class);\r\n    Deque<Object> composeStack = new ArrayDeque<>();\r\n    ListAttribute listAttribute = new ListAttribute();\r\n    Attribute attribute;\r\n    composeStack.push(listAttribute);\r\n    Map<String, Object> requestScope = new HashMap<>();\r\n    requestScope.put(ComposeStackUtil.COMPOSE_STACK_ATTRIBUTE_NAME, composeStack);\r\n    expect(request.getContext(\"request\")).andReturn(requestScope).times(2);\r\n    expect(modelBody.evaluateAsString()).andReturn(null);\r\n    expect(modelBody.evaluateAsString()).andReturn(\"myBody\");\r\n    replay(request, modelBody);\r\n    model.execute(\"myValue\", \"myExpression\", \"myRole\", \"myType\", request, modelBody);\r\n    List<Attribute> attributes = listAttribute.getValue();\r\n    assertEquals(1, attributes.size());\r\n    attribute = attributes.iterator().next();\r\n    assertEquals(\"myValue\", attribute.getValue());\r\n    assertEquals(\"myExpression\", attribute.getExpressionObject().getExpression());\r\n    assertEquals(\"myRole\", attribute.getRole());\r\n    assertEquals(\"myType\", attribute.getRenderer());\r\n    composeStack.clear();\r\n    listAttribute = new ListAttribute();\r\n    attribute = new Attribute();\r\n    composeStack.push(listAttribute);\r\n    composeStack.push(attribute);\r\n    model.execute(null, \"myExpression\", \"myRole\", \"myType\", request, modelBody);\r\n    attributes = listAttribute.getValue();\r\n    assertEquals(1, attributes.size());\r\n    attribute = attributes.iterator().next();\r\n    assertEquals(\"myBody\", attribute.getValue());\r\n    assertEquals(\"myExpression\", attribute.getExpressionObject().getExpression());\r\n    assertEquals(\"myRole\", attribute.getRole());\r\n    assertEquals(\"myType\", attribute.getRenderer());\r\n    verify(request, modelBody);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\plugins\\tiles\\src\\test\\java\\org\\apache\\tiles\\template\\AddListAttributeModelTest.java",
  "methodName" : "testExecute",
  "sourceCode" : "/**\r\n * Test method for\r\n * {@link AddListAttributeModel#execute(String, Request, ModelBody)}\r\n * .\r\n *\r\n * @throws IOException If something goes wrong.\r\n */\r\n@Test\r\npublic void testExecute() throws IOException {\r\n    Deque<Object> composeStack = new ArrayDeque<>();\r\n    Request request = createMock(Request.class);\r\n    Map<String, Object> requestScope = new HashMap<>();\r\n    ModelBody modelBody = createMock(ModelBody.class);\r\n    modelBody.evaluateWithoutWriting();\r\n    requestScope.put(ComposeStackUtil.COMPOSE_STACK_ATTRIBUTE_NAME, composeStack);\r\n    expect(request.getContext(\"request\")).andReturn(requestScope);\r\n    replay(request, modelBody);\r\n    ListAttribute parent = new ListAttribute();\r\n    composeStack.push(parent);\r\n    model.execute(\"myRole\", request, modelBody);\r\n    assertEquals(1, composeStack.size());\r\n    assertEquals(parent, composeStack.pop());\r\n    assertEquals(1, parent.getValue().size());\r\n    ListAttribute listAttribute = (ListAttribute) parent.getValue().get(0);\r\n    assertEquals(\"myRole\", listAttribute.getRole());\r\n    verify(request, modelBody);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\plugins\\tiles\\src\\test\\java\\org\\apache\\tiles\\template\\ComposeStackUtilTest.java",
  "methodName" : "testFindAncestorWithClass",
  "sourceCode" : "/**\r\n * Test method for {@link ComposeStackUtil\r\n * #findAncestorWithClass(java.util.Stack, java.lang.Class)}.\r\n */\r\n@Test\r\npublic void testFindAncestorWithClass() {\r\n    Deque<Object> composeStack = new ArrayDeque<>();\r\n    Integer integerValue = 1;\r\n    Long longValue = LONG_VALUE;\r\n    String stringValue = \"my value\";\r\n    Integer integerValue2 = INT_VALUE;\r\n    composeStack.push(integerValue);\r\n    composeStack.push(longValue);\r\n    composeStack.push(stringValue);\r\n    composeStack.push(integerValue2);\r\n    assertEquals(integerValue2, ComposeStackUtil.findAncestorWithClass(composeStack, Integer.class));\r\n    assertEquals(longValue, ComposeStackUtil.findAncestorWithClass(composeStack, Long.class));\r\n    assertEquals(stringValue, ComposeStackUtil.findAncestorWithClass(composeStack, String.class));\r\n    assertEquals(integerValue2, ComposeStackUtil.findAncestorWithClass(composeStack, Object.class));\r\n    assertNull(ComposeStackUtil.findAncestorWithClass(composeStack, Date.class));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\plugins\\tiles\\src\\test\\java\\org\\apache\\tiles\\template\\ComposeStackUtilTest.java",
  "methodName" : "testGetComposeStackNull",
  "sourceCode" : "/**\r\n * Tests {@link ComposeStackUtil#getComposeStack(Request)}.\r\n */\r\n@Test\r\npublic void testGetComposeStackNull() {\r\n    Request request = createMock(Request.class);\r\n    Map<String, Object> requestScope = new HashMap<>();\r\n    expect(request.getContext(\"request\")).andReturn(requestScope);\r\n    replay(request);\r\n    assertSame(ComposeStackUtil.getComposeStack(request), requestScope.get(ComposeStackUtil.COMPOSE_STACK_ATTRIBUTE_NAME));\r\n    verify(request);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\plugins\\tiles\\src\\test\\java\\org\\apache\\tiles\\template\\ComposeStackUtilTest.java",
  "methodName" : "testGetComposeStackNotNull",
  "sourceCode" : "/**\r\n * Tests {@link ComposeStackUtil#getComposeStack(Request)}.\r\n */\r\n@Test\r\npublic void testGetComposeStackNotNull() {\r\n    Request request = createMock(Request.class);\r\n    Deque<Object> composeStack = createMock(Deque.class);\r\n    Map<String, Object> requestScope = new HashMap<>();\r\n    requestScope.put(ComposeStackUtil.COMPOSE_STACK_ATTRIBUTE_NAME, composeStack);\r\n    expect(request.getContext(\"request\")).andReturn(requestScope);\r\n    replay(request, composeStack);\r\n    assertSame(composeStack, ComposeStackUtil.getComposeStack(request));\r\n    verify(request, composeStack);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\plugins\\tiles\\src\\test\\java\\org\\apache\\tiles\\template\\ComposeStackUtilTest.java",
  "methodName" : "testGetComposeStackNoNull",
  "sourceCode" : "/**\r\n * Tests {@link ComposeStackUtil#getComposeStack(Request)}.\r\n */\r\n@Test\r\npublic void testGetComposeStackNoNull() {\r\n    Request request = createMock(Request.class);\r\n    Map<String, Object> requestScope = new HashMap<>();\r\n    expect(request.getContext(\"request\")).andReturn(requestScope);\r\n    replay(request);\r\n    assertSame(ComposeStackUtil.getComposeStack(request), requestScope.get(ComposeStackUtil.COMPOSE_STACK_ATTRIBUTE_NAME));\r\n    verify(request);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\plugins\\tiles\\src\\test\\java\\org\\apache\\tiles\\template\\DefaultAttributeResolverTest.java",
  "methodName" : "testComputeAttributeInContext",
  "sourceCode" : "/**\r\n * Test method for {@link DefaultAttributeResolver\r\n * #computeAttribute(org.apache.tiles.TilesContainer, org.apache.tiles.Attribute,\r\n * java.lang.String, java.lang.String, boolean, java.lang.Object, java.lang.String,\r\n * java.lang.String, Request)}.\r\n */\r\n@Test\r\npublic void testComputeAttributeInContext() {\r\n    TilesContainer container = createMock(TilesContainer.class);\r\n    AttributeContext attributeContext = createMock(AttributeContext.class);\r\n    Request request = createMock(Request.class);\r\n    Attribute attribute = new Attribute(\"myValue\", Expression.createExpression(\"myExpression\", null), \"myRole\", \"myRenderer\");\r\n    expect(container.getAttributeContext(request)).andReturn(attributeContext);\r\n    expect(attributeContext.getAttribute(\"myName\")).andReturn(attribute);\r\n    replay(container, attributeContext, request);\r\n    assertEquals(attribute, resolver.computeAttribute(container, null, \"myName\", null, false, null, null, null, request));\r\n    verify(container, attributeContext, request);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\plugins\\tiles\\src\\test\\java\\org\\apache\\tiles\\template\\DefaultAttributeResolverTest.java",
  "methodName" : "testComputeAttributeInCall",
  "sourceCode" : "/**\r\n * Test method for {@link DefaultAttributeResolver\r\n * #computeAttribute(org.apache.tiles.TilesContainer, org.apache.tiles.Attribute,\r\n * java.lang.String, java.lang.String, boolean, java.lang.Object, java.lang.String,\r\n * java.lang.String, Request)}.\r\n */\r\n@Test\r\npublic void testComputeAttributeInCall() {\r\n    TilesContainer container = createMock(TilesContainer.class);\r\n    Request request = createMock(Request.class);\r\n    Attribute attribute = new Attribute(\"myValue\", Expression.createExpression(\"myExpression\", null), \"myRole\", \"myRenderer\");\r\n    replay(container, request);\r\n    assertEquals(attribute, resolver.computeAttribute(container, attribute, null, null, false, null, null, null, request));\r\n    verify(container, request);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\plugins\\tiles\\src\\test\\java\\org\\apache\\tiles\\template\\DefaultAttributeResolverTest.java",
  "methodName" : "testComputeAttributeDefault",
  "sourceCode" : "/**\r\n * Test method for {@link DefaultAttributeResolver\r\n * #computeAttribute(org.apache.tiles.TilesContainer, org.apache.tiles.Attribute,\r\n * java.lang.String, java.lang.String, boolean, java.lang.Object, java.lang.String,\r\n * java.lang.String, Request)}.\r\n */\r\n@Test\r\npublic void testComputeAttributeDefault() {\r\n    TilesContainer container = createMock(TilesContainer.class);\r\n    Request request = createMock(Request.class);\r\n    AttributeContext attributeContext = createMock(AttributeContext.class);\r\n    expect(container.getAttributeContext(request)).andReturn(attributeContext);\r\n    expect(attributeContext.getAttribute(\"myName\")).andReturn(null);\r\n    replay(container, attributeContext, request);\r\n    Attribute attribute = resolver.computeAttribute(container, null, \"myName\", null, false, \"defaultValue\", \"defaultRole\", \"defaultType\", request);\r\n    assertEquals(\"defaultValue\", attribute.getValue());\r\n    assertEquals(\"defaultRole\", attribute.getRole());\r\n    assertEquals(\"defaultType\", attribute.getRenderer());\r\n    verify(container, attributeContext, request);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\plugins\\tiles\\src\\test\\java\\org\\apache\\tiles\\template\\DefaultAttributeResolverTest.java",
  "methodName" : "testComputeAttributeException",
  "sourceCode" : "/**\r\n * Test method for {@link DefaultAttributeResolver\r\n * #computeAttribute(org.apache.tiles.TilesContainer, org.apache.tiles.Attribute,\r\n * java.lang.String, java.lang.String, boolean, java.lang.Object, java.lang.String,\r\n * java.lang.String, Request)}.\r\n */\r\n@Test(expected = NoSuchAttributeException.class)\r\npublic void testComputeAttributeException() {\r\n    TilesContainer container = createMock(TilesContainer.class);\r\n    AttributeContext attributeContext = createMock(AttributeContext.class);\r\n    Request request = createMock(Request.class);\r\n    expect(container.getAttributeContext(request)).andReturn(attributeContext);\r\n    expect(attributeContext.getAttribute(\"myName\")).andReturn(null);\r\n    replay(container, attributeContext, request);\r\n    resolver.computeAttribute(container, null, \"myName\", null, false, null, \"defaultRole\", \"defaultType\", request);\r\n    verify(container, attributeContext, request);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\plugins\\tiles\\src\\test\\java\\org\\apache\\tiles\\template\\DefaultAttributeResolverTest.java",
  "methodName" : "testComputeAttributeIgnore",
  "sourceCode" : "/**\r\n * Test method for {@link DefaultAttributeResolver\r\n * #computeAttribute(org.apache.tiles.TilesContainer, org.apache.tiles.Attribute,\r\n * java.lang.String, java.lang.String, boolean, java.lang.Object, java.lang.String,\r\n * java.lang.String, Request)}.\r\n */\r\n@Test\r\npublic void testComputeAttributeIgnore() {\r\n    TilesContainer container = createMock(TilesContainer.class);\r\n    AttributeContext attributeContext = createMock(AttributeContext.class);\r\n    Request request = createMock(Request.class);\r\n    expect(container.getAttributeContext(request)).andReturn(attributeContext);\r\n    expect(attributeContext.getAttribute(\"myName\")).andReturn(null);\r\n    replay(container, attributeContext, request);\r\n    assertNull(resolver.computeAttribute(container, null, \"myName\", null, true, null, \"defaultRole\", \"defaultType\", request));\r\n    verify(container, attributeContext, request);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\plugins\\tiles\\src\\test\\java\\org\\apache\\tiles\\template\\DefinitionModelTest.java",
  "methodName" : "testExecute",
  "sourceCode" : "/**\r\n * Test method for {@link DefinitionModel\r\n * #execute(java.lang.String, java.lang.String,\r\n * java.lang.String, java.lang.String, java.lang.String, Request, ModelBody)}.\r\n *\r\n * @throws IOException If something goes wrong.\r\n */\r\n@Test\r\npublic void testExecute() throws IOException {\r\n    MutableTilesContainer container = createMock(MutableTilesContainer.class);\r\n    Request request = createMock(Request.class);\r\n    Deque<Object> composeStack = new ArrayDeque<>();\r\n    Attribute attribute = new Attribute();\r\n    composeStack.push(attribute);\r\n    Map<String, Object> requestScope = new HashMap<>();\r\n    requestScope.put(ComposeStackUtil.COMPOSE_STACK_ATTRIBUTE_NAME, composeStack);\r\n    requestScope.put(TilesAccess.CURRENT_CONTAINER_ATTRIBUTE_NAME, container);\r\n    ApplicationContext applicationContext = createMock(ApplicationContext.class);\r\n    ModelBody modelBody = createMock(ModelBody.class);\r\n    modelBody.evaluateWithoutWriting();\r\n    expect(request.getApplicationContext()).andReturn(applicationContext);\r\n    expect(request.getContext(\"request\")).andReturn(requestScope).anyTimes();\r\n    container.register(notNull(), eq(request));\r\n    replay(container, request, modelBody, applicationContext);\r\n    model.execute(\"myName\", \"myTemplate\", \"myRole\", \"myExtends\", \"myPreparer\", request, modelBody);\r\n    assertEquals(1, composeStack.size());\r\n    attribute = (Attribute) composeStack.peek();\r\n    assertNotNull(attribute);\r\n    assertEquals(\"definition\", attribute.getRenderer());\r\n    verify(container, request, modelBody, applicationContext);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\plugins\\tiles\\src\\test\\java\\org\\apache\\tiles\\template\\GetAsStringModelTest.java",
  "methodName" : "testExecute",
  "sourceCode" : "/**\r\n * Test method for {@link GetAsStringModel\r\n * #execute(boolean, java.lang.String, java.lang.String,\r\n * java.lang.Object, java.lang.String, java.lang.String, java.lang.String,\r\n * org.apache.tiles.Attribute, Request, ModelBody)}.\r\n *\r\n * @throws IOException If something goes wrong.\r\n */\r\n@Test\r\npublic void testExecute() throws IOException {\r\n    TilesContainer container = createMock(TilesContainer.class);\r\n    Attribute attribute = createMock(Attribute.class);\r\n    AttributeContext attributeContext = createMock(AttributeContext.class);\r\n    Request request = createMock(Request.class);\r\n    Writer writer = createMock(Writer.class);\r\n    Map<String, Object> requestScope = new HashMap<>();\r\n    Deque<Object> composeStack = new ArrayDeque<>();\r\n    requestScope.put(ComposeStackUtil.COMPOSE_STACK_ATTRIBUTE_NAME, composeStack);\r\n    requestScope.put(TilesAccess.CURRENT_CONTAINER_ATTRIBUTE_NAME, container);\r\n    ApplicationContext applicationContext = createMock(ApplicationContext.class);\r\n    ModelBody modelBody = createMock(ModelBody.class);\r\n    modelBody.evaluateWithoutWriting();\r\n    expect(request.getApplicationContext()).andReturn(applicationContext).times(2);\r\n    expect(request.getContext(\"request\")).andReturn(requestScope).anyTimes();\r\n    expect(request.getWriter()).andReturn(writer);\r\n    container.prepare(\"myPreparer\", request);\r\n    expect(resolver.computeAttribute(container, attribute, \"myName\", \"myRole\", false, \"myDefaultValue\", \"myDefaultValueRole\", \"myDefaultValueType\", request)).andReturn(attribute);\r\n    expect(container.startContext(request)).andReturn(attributeContext);\r\n    expect(container.evaluate(attribute, request)).andReturn(\"myValue\");\r\n    writer.write(\"myValue\");\r\n    container.endContext(request);\r\n    replay(resolver, container, writer, request, applicationContext, modelBody);\r\n    model.execute(false, \"myPreparer\", \"myRole\", \"myDefaultValue\", \"myDefaultValueRole\", \"myDefaultValueType\", \"myName\", attribute, request, modelBody);\r\n    verify(resolver, container, writer, request, applicationContext, modelBody);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\plugins\\tiles\\src\\test\\java\\org\\apache\\tiles\\template\\GetAsStringModelTest.java",
  "methodName" : "testExecuteIgnore",
  "sourceCode" : "/**\r\n * Test method for {@link GetAsStringModel\r\n * #execute(boolean, java.lang.String, java.lang.String,\r\n * java.lang.Object, java.lang.String, java.lang.String, java.lang.String,\r\n * org.apache.tiles.Attribute, Request, ModelBody)} when ignore flag is set.\r\n *\r\n * @throws IOException If something goes wrong.\r\n */\r\n@Test\r\npublic void testExecuteIgnore() throws IOException {\r\n    TilesContainer container = createMock(TilesContainer.class);\r\n    AttributeContext attributeContext = createMock(AttributeContext.class);\r\n    Request request = createMock(Request.class);\r\n    Writer writer = createMock(Writer.class);\r\n    Map<String, Object> requestScope = new HashMap<>();\r\n    Deque<Object> composeStack = new ArrayDeque<>();\r\n    requestScope.put(ComposeStackUtil.COMPOSE_STACK_ATTRIBUTE_NAME, composeStack);\r\n    requestScope.put(TilesAccess.CURRENT_CONTAINER_ATTRIBUTE_NAME, container);\r\n    ApplicationContext applicationContext = createMock(ApplicationContext.class);\r\n    ModelBody modelBody = createMock(ModelBody.class);\r\n    modelBody.evaluateWithoutWriting();\r\n    expect(request.getApplicationContext()).andReturn(applicationContext).times(2);\r\n    expect(request.getContext(\"request\")).andReturn(requestScope).anyTimes();\r\n    expect(request.getWriter()).andReturn(writer);\r\n    container.prepare(\"myPreparer\", request);\r\n    expect(resolver.computeAttribute(container, null, \"myName\", \"myRole\", true, \"myDefaultValue\", \"myDefaultValueRole\", \"myDefaultValueType\", request)).andReturn(null);\r\n    expect(container.startContext(request)).andReturn(attributeContext);\r\n    container.endContext(request);\r\n    replay(resolver, container, writer, request, applicationContext, modelBody);\r\n    model.execute(true, \"myPreparer\", \"myRole\", \"myDefaultValue\", \"myDefaultValueRole\", \"myDefaultValueType\", \"myName\", null, request, modelBody);\r\n    verify(resolver, container, writer, request, applicationContext, modelBody);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\plugins\\tiles\\src\\test\\java\\org\\apache\\tiles\\template\\ImportAttributeModelTest.java",
  "methodName" : "testExecuteSingle",
  "sourceCode" : "/**\r\n * Test method for {@link ImportAttributeModel\r\n * #execute(String, String, String, boolean, Request).\r\n */\r\n@Test\r\npublic void testExecuteSingle() {\r\n    TilesContainer container = createMock(TilesContainer.class);\r\n    AttributeContext attributeContext = createMock(AttributeContext.class);\r\n    Attribute attribute = new Attribute();\r\n    Request request = createMock(Request.class);\r\n    ApplicationContext applicationContext = createMock(ApplicationContext.class);\r\n    Map<String, Object> requestScope = new HashMap<>();\r\n    requestScope.put(TilesAccess.CURRENT_CONTAINER_ATTRIBUTE_NAME, container);\r\n    expect(request.getApplicationContext()).andReturn(applicationContext);\r\n    expect(request.getContext(\"request\")).andReturn(requestScope).anyTimes();\r\n    expect(container.getAttributeContext(request)).andReturn(attributeContext);\r\n    expect(attributeContext.getAttribute(\"myName\")).andReturn(attribute);\r\n    expect(container.evaluate(attribute, request)).andReturn(\"myEvaluatedValue\");\r\n    replay(container, attributeContext, request, applicationContext);\r\n    model.execute(\"myName\", \"request\", null, false, request);\r\n    assertEquals(2, requestScope.size());\r\n    assertEquals(\"myEvaluatedValue\", requestScope.get(\"myName\"));\r\n    verify(container, attributeContext, request, applicationContext);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\plugins\\tiles\\src\\test\\java\\org\\apache\\tiles\\template\\ImportAttributeModelTest.java",
  "methodName" : "testExecuteSingleToName",
  "sourceCode" : "/**\r\n * Test method for {@link ImportAttributeModel\r\n * #execute(String, String, String, boolean, Request).\r\n */\r\n@Test\r\npublic void testExecuteSingleToName() {\r\n    TilesContainer container = createMock(TilesContainer.class);\r\n    Request request = createMock(Request.class);\r\n    AttributeContext attributeContext = createMock(AttributeContext.class);\r\n    Attribute attribute = new Attribute();\r\n    ApplicationContext applicationContext = createMock(ApplicationContext.class);\r\n    Map<String, Object> requestScope = new HashMap<>();\r\n    requestScope.put(TilesAccess.CURRENT_CONTAINER_ATTRIBUTE_NAME, container);\r\n    expect(request.getApplicationContext()).andReturn(applicationContext);\r\n    expect(request.getContext(\"request\")).andReturn(requestScope).anyTimes();\r\n    expect(container.getAttributeContext(request)).andReturn(attributeContext);\r\n    expect(attributeContext.getAttribute(\"myName\")).andReturn(attribute);\r\n    expect(container.evaluate(attribute, request)).andReturn(\"myEvaluatedValue\");\r\n    replay(container, attributeContext, request, applicationContext);\r\n    model.execute(\"myName\", \"request\", \"myToName\", false, request);\r\n    assertEquals(2, requestScope.size());\r\n    assertEquals(\"myEvaluatedValue\", requestScope.get(\"myToName\"));\r\n    verify(container, attributeContext, request, applicationContext);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\plugins\\tiles\\src\\test\\java\\org\\apache\\tiles\\template\\ImportAttributeModelTest.java",
  "methodName" : "testExecuteAll",
  "sourceCode" : "/**\r\n * Test method for {@link ImportAttributeModel\r\n * #execute(String, String, String, boolean, Request).\r\n */\r\n@Test\r\npublic void testExecuteAll() {\r\n    TilesContainer container = createMock(TilesContainer.class);\r\n    Request request = createMock(Request.class);\r\n    AttributeContext attributeContext = createMock(AttributeContext.class);\r\n    Attribute attribute1 = new Attribute(\"myValue1\");\r\n    Attribute attribute2 = new Attribute(\"myValue2\");\r\n    Attribute attribute3 = new Attribute(\"myValue3\");\r\n    Set<String> cascadedNames = new HashSet<>();\r\n    cascadedNames.add(\"myName1\");\r\n    cascadedNames.add(\"myName2\");\r\n    Set<String> localNames = new HashSet<>();\r\n    localNames.add(\"myName1\");\r\n    localNames.add(\"myName3\");\r\n    ApplicationContext applicationContext = createMock(ApplicationContext.class);\r\n    Map<String, Object> requestScope = new HashMap<>();\r\n    requestScope.put(TilesAccess.CURRENT_CONTAINER_ATTRIBUTE_NAME, container);\r\n    expect(request.getApplicationContext()).andReturn(applicationContext);\r\n    expect(request.getContext(\"request\")).andReturn(requestScope).anyTimes();\r\n    expect(container.getAttributeContext(request)).andReturn(attributeContext);\r\n    expect(attributeContext.getCascadedAttributeNames()).andReturn(cascadedNames);\r\n    expect(attributeContext.getLocalAttributeNames()).andReturn(localNames);\r\n    expect(attributeContext.getAttribute(\"myName1\")).andReturn(attribute1).times(2);\r\n    expect(attributeContext.getAttribute(\"myName2\")).andReturn(attribute2);\r\n    expect(attributeContext.getAttribute(\"myName3\")).andReturn(attribute3);\r\n    expect(container.evaluate(attribute1, request)).andReturn(\"myEvaluatedValue1\").times(2);\r\n    expect(container.evaluate(attribute2, request)).andReturn(\"myEvaluatedValue2\");\r\n    expect(container.evaluate(attribute3, request)).andReturn(\"myEvaluatedValue3\");\r\n    replay(container, attributeContext, request, applicationContext);\r\n    model.execute(null, \"request\", null, false, request);\r\n    assertEquals(ATTRIBUTES_SIZE, requestScope.size());\r\n    assertEquals(\"myEvaluatedValue1\", requestScope.get(\"myName1\"));\r\n    assertEquals(\"myEvaluatedValue2\", requestScope.get(\"myName2\"));\r\n    assertEquals(\"myEvaluatedValue3\", requestScope.get(\"myName3\"));\r\n    verify(container, attributeContext, request, applicationContext);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\plugins\\tiles\\src\\test\\java\\org\\apache\\tiles\\template\\ImportAttributeModelTest.java",
  "methodName" : "testExecuteSingleNullAttributeException",
  "sourceCode" : "/**\r\n * Test method for {@link ImportAttributeModel\r\n * #execute(String, String, String, boolean, Request).\r\n */\r\n@Test(expected = NoSuchAttributeException.class)\r\npublic void testExecuteSingleNullAttributeException() {\r\n    TilesContainer container = createMock(TilesContainer.class);\r\n    Request request = createMock(Request.class);\r\n    AttributeContext attributeContext = createMock(AttributeContext.class);\r\n    ApplicationContext applicationContext = createMock(ApplicationContext.class);\r\n    Map<String, Object> requestScope = new HashMap<>();\r\n    requestScope.put(TilesAccess.CURRENT_CONTAINER_ATTRIBUTE_NAME, container);\r\n    expect(request.getApplicationContext()).andReturn(applicationContext);\r\n    expect(request.getContext(\"request\")).andReturn(requestScope).anyTimes();\r\n    expect(container.getAttributeContext(request)).andReturn(attributeContext);\r\n    expect(attributeContext.getAttribute(\"myName\")).andReturn(null);\r\n    replay(container, attributeContext, request, applicationContext);\r\n    try {\r\n        model.execute(\"myName\", \"request\", null, false, request);\r\n    } finally {\r\n        verify(container, attributeContext, request, applicationContext);\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\plugins\\tiles\\src\\test\\java\\org\\apache\\tiles\\template\\ImportAttributeModelTest.java",
  "methodName" : "testExecuteSingleNullAttributeValueException",
  "sourceCode" : "/**\r\n * Test method for {@link ImportAttributeModel\r\n * #execute(String, String, String, boolean, Request).\r\n */\r\n@Test(expected = NoSuchAttributeException.class)\r\npublic void testExecuteSingleNullAttributeValueException() {\r\n    TilesContainer container = createMock(TilesContainer.class);\r\n    Request request = createMock(Request.class);\r\n    AttributeContext attributeContext = createMock(AttributeContext.class);\r\n    Attribute attribute = new Attribute();\r\n    ApplicationContext applicationContext = createMock(ApplicationContext.class);\r\n    Map<String, Object> requestScope = new HashMap<>();\r\n    requestScope.put(TilesAccess.CURRENT_CONTAINER_ATTRIBUTE_NAME, container);\r\n    expect(request.getApplicationContext()).andReturn(applicationContext);\r\n    expect(request.getContext(\"request\")).andReturn(requestScope).anyTimes();\r\n    expect(container.getAttributeContext(request)).andReturn(attributeContext);\r\n    expect(attributeContext.getAttribute(\"myName\")).andReturn(attribute);\r\n    expect(container.evaluate(attribute, request)).andReturn(null);\r\n    replay(container, attributeContext, request, applicationContext);\r\n    try {\r\n        model.execute(\"myName\", \"request\", null, false, request);\r\n    } finally {\r\n        verify(container, attributeContext, request, applicationContext);\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\plugins\\tiles\\src\\test\\java\\org\\apache\\tiles\\template\\ImportAttributeModelTest.java",
  "methodName" : "testExecuteSingleRuntimeException",
  "sourceCode" : "/**\r\n * Test method for {@link ImportAttributeModel\r\n * #execute(String, String, String, boolean, Request).\r\n */\r\n@Test(expected = RuntimeException.class)\r\npublic void testExecuteSingleRuntimeException() {\r\n    TilesContainer container = createMock(TilesContainer.class);\r\n    Request request = createMock(Request.class);\r\n    AttributeContext attributeContext = createMock(AttributeContext.class);\r\n    Attribute attribute = new Attribute();\r\n    ApplicationContext applicationContext = createMock(ApplicationContext.class);\r\n    Map<String, Object> requestScope = new HashMap<>();\r\n    requestScope.put(TilesAccess.CURRENT_CONTAINER_ATTRIBUTE_NAME, container);\r\n    expect(request.getApplicationContext()).andReturn(applicationContext);\r\n    expect(request.getContext(\"request\")).andReturn(requestScope).anyTimes();\r\n    expect(container.getAttributeContext(request)).andReturn(attributeContext);\r\n    expect(attributeContext.getAttribute(\"myName\")).andReturn(attribute);\r\n    expect(container.evaluate(attribute, request)).andThrow(new RuntimeException());\r\n    replay(container, attributeContext, request, applicationContext);\r\n    try {\r\n        model.execute(\"myName\", \"request\", null, false, request);\r\n    } finally {\r\n        verify(container, attributeContext, request, applicationContext);\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\plugins\\tiles\\src\\test\\java\\org\\apache\\tiles\\template\\ImportAttributeModelTest.java",
  "methodName" : "testExecuteSingleNullAttributeIgnore",
  "sourceCode" : "/**\r\n * Test method for {@link ImportAttributeModel\r\n * #execute(String, String, String, boolean, Request).\r\n */\r\n@Test\r\npublic void testExecuteSingleNullAttributeIgnore() {\r\n    TilesContainer container = createMock(TilesContainer.class);\r\n    Request request = createMock(Request.class);\r\n    AttributeContext attributeContext = createMock(AttributeContext.class);\r\n    ApplicationContext applicationContext = createMock(ApplicationContext.class);\r\n    Map<String, Object> requestScope = new HashMap<>();\r\n    requestScope.put(TilesAccess.CURRENT_CONTAINER_ATTRIBUTE_NAME, container);\r\n    expect(request.getApplicationContext()).andReturn(applicationContext);\r\n    expect(request.getContext(\"request\")).andReturn(requestScope).anyTimes();\r\n    expect(container.getAttributeContext(request)).andReturn(attributeContext);\r\n    expect(attributeContext.getAttribute(\"myName\")).andReturn(null);\r\n    replay(container, attributeContext, request, applicationContext);\r\n    model.execute(\"myName\", \"request\", null, true, request);\r\n    verify(container, attributeContext, request, applicationContext);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\plugins\\tiles\\src\\test\\java\\org\\apache\\tiles\\template\\ImportAttributeModelTest.java",
  "methodName" : "testExecuteSingleNullAttributeValueIgnore",
  "sourceCode" : "/**\r\n * Test method for {@link ImportAttributeModel\r\n * #execute(String, String, String, boolean, Request).\r\n */\r\n@Test\r\npublic void testExecuteSingleNullAttributeValueIgnore() {\r\n    TilesContainer container = createMock(TilesContainer.class);\r\n    Request request = createMock(Request.class);\r\n    AttributeContext attributeContext = createMock(AttributeContext.class);\r\n    Attribute attribute = new Attribute();\r\n    ApplicationContext applicationContext = createMock(ApplicationContext.class);\r\n    Map<String, Object> requestScope = new HashMap<>();\r\n    requestScope.put(TilesAccess.CURRENT_CONTAINER_ATTRIBUTE_NAME, container);\r\n    expect(request.getApplicationContext()).andReturn(applicationContext);\r\n    expect(request.getContext(\"request\")).andReturn(requestScope).anyTimes();\r\n    expect(container.getAttributeContext(request)).andReturn(attributeContext);\r\n    expect(attributeContext.getAttribute(\"myName\")).andReturn(attribute);\r\n    expect(container.evaluate(attribute, request)).andReturn(null);\r\n    replay(container, attributeContext, request, applicationContext);\r\n    model.execute(\"myName\", \"request\", null, true, request);\r\n    verify(container, attributeContext, request, applicationContext);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\plugins\\tiles\\src\\test\\java\\org\\apache\\tiles\\template\\ImportAttributeModelTest.java",
  "methodName" : "testExecuteSingleRuntimeIgnore",
  "sourceCode" : "/**\r\n * Test method for {@link ImportAttributeModel\r\n * #execute(String, String, String, boolean, Request).\r\n */\r\n@Test\r\npublic void testExecuteSingleRuntimeIgnore() {\r\n    TilesContainer container = createMock(TilesContainer.class);\r\n    Request request = createMock(Request.class);\r\n    AttributeContext attributeContext = createMock(AttributeContext.class);\r\n    Attribute attribute = new Attribute();\r\n    ApplicationContext applicationContext = createMock(ApplicationContext.class);\r\n    Map<String, Object> requestScope = new HashMap<>();\r\n    requestScope.put(TilesAccess.CURRENT_CONTAINER_ATTRIBUTE_NAME, container);\r\n    expect(request.getApplicationContext()).andReturn(applicationContext);\r\n    expect(request.getContext(\"request\")).andReturn(requestScope).anyTimes();\r\n    expect(container.getAttributeContext(request)).andReturn(attributeContext);\r\n    expect(attributeContext.getAttribute(\"myName\")).andReturn(attribute);\r\n    expect(container.evaluate(attribute, request)).andThrow(new RuntimeException());\r\n    replay(container, attributeContext, request, applicationContext);\r\n    model.execute(\"myName\", \"request\", null, true, request);\r\n    verify(container, attributeContext, request, applicationContext);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\plugins\\tiles\\src\\test\\java\\org\\apache\\tiles\\template\\InsertAttributeModelTest.java",
  "methodName" : "testExecute",
  "sourceCode" : "/**\r\n * Test method for {@link InsertAttributeModel\r\n * #execute(boolean, String, String, Object, String, String, String,\r\n * Attribute, boolean, Request, ModelBody)}.\r\n *\r\n * @throws IOException If something goes wrong.\r\n */\r\n@Test\r\npublic void testExecute() throws IOException {\r\n    TilesContainer container = createMock(TilesContainer.class);\r\n    Request request = createMock(Request.class);\r\n    Attribute attribute = new Attribute(\"myValue\");\r\n    AttributeContext attributeContext = createMock(AttributeContext.class);\r\n    Map<String, Object> requestScope = new HashMap<>();\r\n    requestScope.put(TilesAccess.CURRENT_CONTAINER_ATTRIBUTE_NAME, container);\r\n    ApplicationContext applicationContext = createMock(ApplicationContext.class);\r\n    ModelBody modelBody = createMock(ModelBody.class);\r\n    modelBody.evaluateWithoutWriting();\r\n    expect(request.getApplicationContext()).andReturn(applicationContext).times(2);\r\n    expect(request.getContext(\"request\")).andReturn(requestScope).anyTimes();\r\n    container.prepare(\"myPreparer\", request);\r\n    expect(resolver.computeAttribute(container, attribute, \"myName\", \"myRole\", false, \"myDefaultValue\", \"myDefaultValueRole\", \"myDefaultValueType\", request)).andReturn(attribute);\r\n    expect(container.startContext(request)).andReturn(attributeContext);\r\n    container.endContext(request);\r\n    container.render(attribute, request);\r\n    replay(resolver, container, request, applicationContext, modelBody);\r\n    model.execute(false, \"myPreparer\", \"myRole\", \"myDefaultValue\", \"myDefaultValueRole\", \"myDefaultValueType\", \"myName\", attribute, false, request, modelBody);\r\n    verify(resolver, container, request, applicationContext, modelBody);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\plugins\\tiles\\src\\test\\java\\org\\apache\\tiles\\template\\InsertAttributeModelTest.java",
  "methodName" : "testExecuteIgnore",
  "sourceCode" : "/**\r\n * Test method for {@link InsertAttributeModel\r\n * #execute(boolean, String, String, Object, String, String, String,\r\n * Attribute, boolean, Request, ModelBody)} when ignore flag is set.\r\n *\r\n * @throws IOException If something goes wrong.\r\n */\r\n@Test\r\npublic void testExecuteIgnore() throws IOException {\r\n    TilesContainer container = createMock(TilesContainer.class);\r\n    Request request = createMock(Request.class);\r\n    AttributeContext attributeContext = createMock(AttributeContext.class);\r\n    Map<String, Object> requestScope = new HashMap<>();\r\n    Deque<Object> composeStack = new ArrayDeque<>();\r\n    requestScope.put(ComposeStackUtil.COMPOSE_STACK_ATTRIBUTE_NAME, composeStack);\r\n    requestScope.put(TilesAccess.CURRENT_CONTAINER_ATTRIBUTE_NAME, container);\r\n    ApplicationContext applicationContext = createMock(ApplicationContext.class);\r\n    ModelBody modelBody = createMock(ModelBody.class);\r\n    modelBody.evaluateWithoutWriting();\r\n    expect(request.getApplicationContext()).andReturn(applicationContext).times(2);\r\n    expect(request.getContext(\"request\")).andReturn(requestScope).anyTimes();\r\n    container.prepare(\"myPreparer\", request);\r\n    expect(resolver.computeAttribute(container, null, \"myName\", \"myRole\", true, \"myDefaultValue\", \"myDefaultValueRole\", \"myDefaultValueType\", request)).andReturn(null);\r\n    expect(container.startContext(request)).andReturn(attributeContext);\r\n    container.endContext(request);\r\n    replay(resolver, container, request, applicationContext, modelBody);\r\n    model.execute(true, \"myPreparer\", \"myRole\", \"myDefaultValue\", \"myDefaultValueRole\", \"myDefaultValueType\", \"myName\", null, false, request, modelBody);\r\n    verify(resolver, container, request, applicationContext, modelBody);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\plugins\\tiles\\src\\test\\java\\org\\apache\\tiles\\template\\InsertDefinitionModelTest.java",
  "methodName" : "testExecute",
  "sourceCode" : "/**\r\n * Test method for {@link InsertDefinitionModel\r\n * #execute(java.lang.String, java.lang.String, String,\r\n * String, java.lang.String, java.lang.String, boolean, Request, ModelBody)}.\r\n *\r\n * @throws IOException If something goes wrong.\r\n */\r\n@Test\r\npublic void testExecute() throws IOException {\r\n    TilesContainer container = createMock(TilesContainer.class);\r\n    Request request = createMock(Request.class);\r\n    AttributeContext attributeContext = createMock(AttributeContext.class);\r\n    Map<String, Object> requestScope = new HashMap<>();\r\n    requestScope.put(TilesAccess.CURRENT_CONTAINER_ATTRIBUTE_NAME, container);\r\n    ApplicationContext applicationContext = createMock(ApplicationContext.class);\r\n    ModelBody modelBody = createMock(ModelBody.class);\r\n    modelBody.evaluateWithoutWriting();\r\n    expect(request.getApplicationContext()).andReturn(applicationContext).times(2);\r\n    expect(request.getContext(\"request\")).andReturn(requestScope).anyTimes();\r\n    expect(container.startContext(request)).andReturn(attributeContext);\r\n    expect(container.getAttributeContext(request)).andReturn(attributeContext);\r\n    container.endContext(request);\r\n    attributeContext.setPreparer(\"myPreparer\");\r\n    attributeContext.setTemplateAttribute(notNull());\r\n    container.render(\"myDefinitionName\", request);\r\n    replay(container, attributeContext, request, applicationContext, modelBody);\r\n    model.execute(\"myDefinitionName\", \"myTemplate\", \"myTemplateType\", \"myTemplateExpression\", \"myRole\", \"myPreparer\", false, request, modelBody);\r\n    verify(container, attributeContext, request, applicationContext, modelBody);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\plugins\\tiles\\src\\test\\java\\org\\apache\\tiles\\template\\InsertTemplateModelTest.java",
  "methodName" : "testExecute",
  "sourceCode" : "/**\r\n * Test method for {@link InsertTemplateModel\r\n * #execute(String, String, String, String, String, boolean, Request, ModelBody)}.\r\n *\r\n * @throws IOException If something goes wrong.\r\n */\r\n@Test\r\npublic void testExecute() throws IOException {\r\n    TilesContainer container = createMock(TilesContainer.class);\r\n    Request request = createMock(Request.class);\r\n    AttributeContext attributeContext = createMock(AttributeContext.class);\r\n    Map<String, Object> requestScope = new HashMap<>();\r\n    requestScope.put(TilesAccess.CURRENT_CONTAINER_ATTRIBUTE_NAME, container);\r\n    ApplicationContext applicationContext = createMock(ApplicationContext.class);\r\n    ModelBody modelBody = createMock(ModelBody.class);\r\n    modelBody.evaluateWithoutWriting();\r\n    expect(request.getApplicationContext()).andReturn(applicationContext).times(2);\r\n    expect(request.getContext(\"request\")).andReturn(requestScope).anyTimes();\r\n    expect(container.startContext(request)).andReturn(attributeContext);\r\n    expect(container.getAttributeContext(request)).andReturn(attributeContext);\r\n    container.endContext(request);\r\n    attributeContext.setPreparer(\"myPreparer\");\r\n    attributeContext.setTemplateAttribute(notNull());\r\n    container.renderContext(request);\r\n    replay(container, attributeContext, request, applicationContext, modelBody);\r\n    model.execute(\"myTemplate\", \"myTemplateType\", \"myTemplateExpression\", \"myRole\", \"myPreparer\", false, request, modelBody);\r\n    verify(container, attributeContext, request, applicationContext, modelBody);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\plugins\\tiles\\src\\test\\java\\org\\apache\\tiles\\template\\PutAttributeModelTest.java",
  "methodName" : "testExecuteListAttribute",
  "sourceCode" : "/**\r\n * Test method for {@link PutAttributeModel\r\n * #execute(String, Object, String, String, String,\r\n * boolean, Request, ModelBody)}.\r\n *\r\n * @throws IOException If something goes wrong.\r\n */\r\n@Test\r\npublic void testExecuteListAttribute() throws IOException {\r\n    TilesContainer container = createMock(TilesContainer.class);\r\n    Request request = createMock(Request.class);\r\n    ModelBody modelBody = createMock(ModelBody.class);\r\n    AttributeContext attributeContext = createMock(AttributeContext.class);\r\n    Deque<Object> composeStack = new ArrayDeque<>();\r\n    ListAttribute listAttribute = new ListAttribute();\r\n    composeStack.push(listAttribute);\r\n    Map<String, Object> requestScope = new HashMap<>();\r\n    requestScope.put(ComposeStackUtil.COMPOSE_STACK_ATTRIBUTE_NAME, composeStack);\r\n    requestScope.put(TilesAccess.CURRENT_CONTAINER_ATTRIBUTE_NAME, container);\r\n    ApplicationContext applicationContext = createMock(ApplicationContext.class);\r\n    expect(request.getApplicationContext()).andReturn(applicationContext);\r\n    expect(request.getContext(\"request\")).andReturn(requestScope).anyTimes();\r\n    expect(container.getAttributeContext(request)).andReturn(attributeContext);\r\n    attributeContext.putAttribute(eq(\"myName\"), notNull(), eq(false));\r\n    expect(modelBody.evaluateAsString()).andReturn(null);\r\n    replay(container, attributeContext, request, applicationContext, modelBody);\r\n    model.execute(\"myName\", \"myValue\", \"myExpression\", \"myRole\", \"myType\", false, request, modelBody);\r\n    verify(container, attributeContext, request, applicationContext, modelBody);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\plugins\\tiles\\src\\test\\java\\org\\apache\\tiles\\template\\PutListAttributeModelTest.java",
  "methodName" : "testExecute",
  "sourceCode" : "/**\r\n * Test method for {@link PutListAttributeModel\r\n * #execute(String, String, boolean, boolean, Request, ModelBody)}.\r\n *\r\n * @throws IOException If something goes wrong.\r\n */\r\n@Test\r\npublic void testExecute() throws IOException {\r\n    TilesContainer container = createMock(TilesContainer.class);\r\n    AttributeContext attributeContext = createMock(AttributeContext.class);\r\n    Request request = createMock(Request.class);\r\n    Deque<Object> composeStack = new ArrayDeque<>();\r\n    Map<String, Object> requestScope = new HashMap<>();\r\n    requestScope.put(ComposeStackUtil.COMPOSE_STACK_ATTRIBUTE_NAME, composeStack);\r\n    requestScope.put(TilesAccess.CURRENT_CONTAINER_ATTRIBUTE_NAME, container);\r\n    ApplicationContext applicationContext = createMock(ApplicationContext.class);\r\n    ModelBody modelBody = createMock(ModelBody.class);\r\n    modelBody.evaluateWithoutWriting();\r\n    expect(request.getApplicationContext()).andReturn(applicationContext);\r\n    expect(request.getContext(\"request\")).andReturn(requestScope).anyTimes();\r\n    expect(container.getAttributeContext(request)).andReturn(attributeContext);\r\n    attributeContext.putAttribute(eq(\"myName\"), isA(ListAttribute.class), eq(false));\r\n    replay(container, attributeContext, request, modelBody);\r\n    model.execute(\"myName\", \"myRole\", false, false, request, modelBody);\r\n    assertEquals(0, composeStack.size());\r\n    verify(container, attributeContext, request, modelBody);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\plugins\\tiles\\src\\test\\java\\org\\apache\\tiles\\template\\SetCurrentContainerModelTest.java",
  "methodName" : "testSetCurrentContainer",
  "sourceCode" : "/**\r\n * Test method for {@link SetCurrentContainerModel#execute(String, Request)}.\r\n */\r\n@Test\r\npublic void testSetCurrentContainer() {\r\n    Request request = createMock(Request.class);\r\n    ApplicationContext context = createMock(ApplicationContext.class);\r\n    TilesContainer container = createMock(TilesContainer.class);\r\n    Map<String, Object> attribs = new HashMap<>();\r\n    attribs.put(\"myKey\", container);\r\n    Map<String, Object> requestScope = new HashMap<>();\r\n    expect(context.getApplicationScope()).andReturn(attribs).anyTimes();\r\n    expect(request.getContext(\"request\")).andReturn(requestScope);\r\n    expect(request.getApplicationContext()).andReturn(context);\r\n    replay(request, context, container);\r\n    SetCurrentContainerModel model = new SetCurrentContainerModel();\r\n    model.execute(\"myKey\", request);\r\n    assertEquals(container, requestScope.get(TilesAccess.CURRENT_CONTAINER_ATTRIBUTE_NAME));\r\n    verify(request, context, container);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\plugins\\tiles\\src\\test\\java\\org\\apache\\tiles\\template\\SetCurrentContainerModelTest.java",
  "methodName" : "testSetCurrentContainerException",
  "sourceCode" : "/**\r\n * Test method for {@link SetCurrentContainerModel#execute(String, Request)}.\r\n */\r\n@Test(expected = NoSuchContainerException.class)\r\npublic void testSetCurrentContainerException() {\r\n    Request request = createMock(Request.class);\r\n    ApplicationContext context = createMock(ApplicationContext.class);\r\n    Map<String, Object> attribs = new HashMap<>();\r\n    expect(request.getApplicationContext()).andReturn(context);\r\n    expect(context.getApplicationScope()).andReturn(attribs).anyTimes();\r\n    replay(request, context);\r\n    try {\r\n        SetCurrentContainerModel model = new SetCurrentContainerModel();\r\n        model.execute(\"myKey\", request);\r\n    } finally {\r\n        verify(request, context);\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\plugins\\tiles\\src\\test\\java\\org\\apache\\tiles\\web\\jsp\\taglib\\UseAttributeTagTest.java",
  "methodName" : "testExecute",
  "sourceCode" : "/**\r\n * Test method for\r\n * {@link org/apache/tiles/web/jsp/taglib.UseAttributeTag#execute(org.apache.tiles.request.Request)}.\r\n *\r\n * @throws IOException\r\n * @throws JspException\r\n */\r\n@Test\r\npublic void testExecute() throws JspException, IOException {\r\n    JspFragment jspBody = createMock(JspFragment.class);\r\n    PageContext pageContext = createMock(PageContext.class);\r\n    JspTag parent = createMock(JspTag.class);\r\n    ApplicationContext applicationContext = createMock(ApplicationContext.class);\r\n    HttpServletRequest httpServletRequest = createMock(HttpServletRequest.class);\r\n    HttpServletResponse httpServletResponse = createMock(HttpServletResponse.class);\r\n    Map<String, Object> applicationScope = createMock(Map.class);\r\n    TilesContainer container = createMock(TilesContainer.class);\r\n    AttributeContext attributeContext = createMock(AttributeContext.class);\r\n    Attribute attribute = createMock(Attribute.class);\r\n    expect(pageContext.getAttribute(ApplicationAccess.APPLICATION_CONTEXT_ATTRIBUTE, PageContext.APPLICATION_SCOPE)).andReturn(applicationContext);\r\n    expect(applicationContext.getApplicationScope()).andReturn(applicationScope).anyTimes();\r\n    expect(pageContext.getRequest()).andReturn(httpServletRequest);\r\n    expect(pageContext.getResponse()).andReturn(httpServletResponse);\r\n    expect(pageContext.getAttribute(TilesAccess.CURRENT_CONTAINER_ATTRIBUTE_NAME, PageContext.REQUEST_SCOPE)).andReturn(container);\r\n    expect(container.getAttributeContext(isA(JspRequest.class))).andReturn(attributeContext);\r\n    expect(attributeContext.getAttribute(\"name\")).andReturn(attribute);\r\n    expect(container.evaluate(isA(Attribute.class), isA(JspRequest.class))).andReturn(new Integer(1));\r\n    pageContext.setAttribute(\"id\", new Integer(1), PageContext.PAGE_SCOPE);\r\n    replay(jspBody, pageContext, parent, applicationContext, httpServletRequest, httpServletResponse, applicationScope, container, attributeContext, attribute);\r\n    tag.setName(\"name\");\r\n    tag.setScope(\"page\");\r\n    tag.setId(\"id\");\r\n    tag.setIgnore(false);\r\n    tag.setJspContext(pageContext);\r\n    tag.setJspBody(jspBody);\r\n    tag.setParent(parent);\r\n    tag.doTag();\r\n    verify(jspBody, pageContext, parent, applicationContext, httpServletRequest, httpServletResponse, container, attributeContext, attribute);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\plugins\\tiles\\src\\test\\java\\org\\apache\\tiles\\web\\jsp\\taglib\\UseAttributeTagTest.java",
  "methodName" : "testSetId",
  "sourceCode" : "/**\r\n * Test method for\r\n * {@link org/apache/tiles/web/jsp/taglib.UseAttributeTag#setId(java.lang.String)}.\r\n */\r\n@Test\r\npublic void testSetId() {\r\n    tag.setId(\"id\");\r\n    assertEquals(\"id\", tag.getId());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\plugins\\tiles\\src\\test\\java\\org\\apache\\tiles\\web\\jsp\\taglib\\UseAttributeTagTest.java",
  "methodName" : "testGetScope",
  "sourceCode" : "/**\r\n * Test method for\r\n * {@link org/apache/tiles/web/jsp/taglib.UseAttributeTag#getScope()}.\r\n */\r\n@Test\r\npublic void testGetScope() {\r\n    tag.setScope(\"scope\");\r\n    assertEquals(\"scope\", tag.getScope());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\plugins\\tiles\\src\\test\\java\\org\\apache\\tiles\\web\\jsp\\taglib\\UseAttributeTagTest.java",
  "methodName" : "testSetName",
  "sourceCode" : "/**\r\n * Test method for\r\n * {@link org/apache/tiles/web/jsp/taglib.UseAttributeTag#setName(java.lang.String)}.\r\n */\r\n@Test\r\npublic void testSetName() {\r\n    tag.setName(\"name\");\r\n    assertEquals(\"name\", tag.getName());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\plugins\\tiles\\src\\test\\java\\org\\apache\\tiles\\web\\jsp\\taglib\\UseAttributeTagTest.java",
  "methodName" : "testSetIgnore",
  "sourceCode" : "/**\r\n * Test method for\r\n * {@link org/apache/tiles/web/jsp/taglib.UseAttributeTag#setIgnore(boolean)}.\r\n */\r\n@Test\r\npublic void testSetIgnore() {\r\n    tag.setIgnore(true);\r\n    assertTrue(tag.isIgnore());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\plugins\\tiles\\src\\test\\java\\org\\apache\\tiles\\web\\jsp\\taglib\\UseAttributeTagTest.java",
  "methodName" : "testSetClassname",
  "sourceCode" : "/**\r\n * Test method for\r\n * {@link org/apache/tiles/web/jsp/taglib.UseAttributeTag#setClassname(java.lang.String)}.\r\n */\r\n@Test\r\npublic void testSetClassname() {\r\n    tag.setClassname(\"classname\");\r\n    assertEquals(\"classname\", tag.getClassname());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\plugins\\tiles\\src\\test\\java\\org\\apache\\tiles\\web\\jsp\\taglib\\UseAttributeTagTest.java",
  "methodName" : "testGetScriptingVariable",
  "sourceCode" : "/**\r\n * Test method for\r\n * {@link org/apache/tiles/web/jsp/taglib.UseAttributeTag#getScriptingVariable()}.\r\n */\r\n@Test\r\npublic void testGetScriptingVariable() {\r\n    tag.setName(\"name\");\r\n    assertEquals(\"name\", tag.getScriptingVariable());\r\n    tag.setId(\"id\");\r\n    assertEquals(\"id\", tag.getScriptingVariable());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\plugins\\tiles\\src\\test\\java\\org\\apache\\tiles\\web\\jsp\\taglib\\UseAttributeTagTest.java",
  "methodName" : "testTei",
  "sourceCode" : "/**\r\n * Tests {@link UseAttributeTag.Tei}.\r\n */\r\n@Test\r\npublic void testTei() {\r\n    TagData tagData = createMock(TagData.class);\r\n    expect(tagData.getAttributeString(\"classname\")).andReturn(\"my.Clazz\");\r\n    expect(tagData.getAttributeString(\"id\")).andReturn(\"id\");\r\n    replay(tagData);\r\n    UseAttributeTag.Tei tei = new UseAttributeTag.Tei();\r\n    VariableInfo[] infos = tei.getVariableInfo(tagData);\r\n    assertEquals(1, infos.length);\r\n    VariableInfo info = infos[0];\r\n    assertEquals(\"id\", info.getVarName());\r\n    assertEquals(\"my.Clazz\", info.getClassName());\r\n    assertTrue(info.getDeclare());\r\n    assertEquals(VariableInfo.AT_END, info.getScope());\r\n    verify(tagData);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\plugins\\tiles\\src\\test\\java\\org\\apache\\tiles\\web\\jsp\\taglib\\UseAttributeTagTest.java",
  "methodName" : "testTeiDefaults",
  "sourceCode" : "/**\r\n * Tests {@link UseAttributeTag.Tei}.\r\n */\r\n@Test\r\npublic void testTeiDefaults() {\r\n    TagData tagData = createMock(TagData.class);\r\n    expect(tagData.getAttributeString(\"classname\")).andReturn(null);\r\n    expect(tagData.getAttributeString(\"id\")).andReturn(null);\r\n    expect(tagData.getAttributeString(\"name\")).andReturn(\"name\");\r\n    replay(tagData);\r\n    UseAttributeTag.Tei tei = new UseAttributeTag.Tei();\r\n    VariableInfo[] infos = tei.getVariableInfo(tagData);\r\n    assertEquals(1, infos.length);\r\n    VariableInfo info = infos[0];\r\n    assertEquals(\"name\", info.getVarName());\r\n    assertEquals(\"java.lang.Object\", info.getClassName());\r\n    assertTrue(info.getDeclare());\r\n    assertEquals(VariableInfo.AT_END, info.getScope());\r\n    verify(tagData);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\plugins\\tiles\\src\\test\\java\\org\\apache\\tiles\\web\\startup\\AbstractTilesListenerTest.java",
  "methodName" : "testContextInitialized",
  "sourceCode" : "/**\r\n * Test method for {@link AbstractTilesListener#contextInitialized(ServletContextEvent)}.\r\n */\r\n@Test\r\npublic void testContextInitialized() {\r\n    AbstractTilesListener listener = createMockBuilder(AbstractTilesListener.class).createMock();\r\n    ServletContextEvent event = createMock(ServletContextEvent.class);\r\n    ServletContext servletContext = createMock(ServletContext.class);\r\n    TilesInitializer initializer = createMock(TilesInitializer.class);\r\n    expect(event.getServletContext()).andReturn(servletContext);\r\n    expect(listener.createTilesInitializer()).andReturn(initializer);\r\n    initializer.initialize(isA(ServletApplicationContext.class));\r\n    initializer.destroy();\r\n    replay(listener, event, servletContext, initializer);\r\n    listener.contextInitialized(event);\r\n    listener.contextDestroyed(event);\r\n    verify(listener, event, servletContext, initializer);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\plugins\\velocity\\src\\test\\java\\org\\apache\\struts2\\views\\velocity\\result\\VelocityResultTest.java",
  "methodName" : "testCanResolveLocationUsingOgnl",
  "sourceCode" : "@Test\r\npublic void testCanResolveLocationUsingOgnl() throws Exception {\r\n    TestResult testResult = new TestResult();\r\n    String location = \"/myaction.action\";\r\n    Bean bean = new Bean();\r\n    bean.setLocation(location);\r\n    stack.push(bean);\r\n    assertEquals(location, stack.findValue(\"location\"));\r\n    testResult.setLocation(\"${location}\");\r\n    testResult.execute(actionInvocation);\r\n    assertEquals(location, testResult.finalLocation);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\plugins\\velocity\\src\\test\\java\\org\\apache\\struts2\\views\\velocity\\result\\VelocityResultTest.java",
  "methodName" : "testCanResolveLocationUsingStaticExpression",
  "sourceCode" : "@Test\r\npublic void testCanResolveLocationUsingStaticExpression() throws Exception {\r\n    TestResult result = new TestResult();\r\n    String location = \"/any.action\";\r\n    result.setLocation(\"${'\" + location + \"'}\");\r\n    result.execute(actionInvocation);\r\n    assertEquals(location, result.finalLocation);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\plugins\\velocity\\src\\test\\java\\org\\apache\\struts2\\views\\velocity\\result\\VelocityResultTest.java",
  "methodName" : "testResourcesFoundUsingAbsolutePath",
  "sourceCode" : "@Test\r\npublic void testResourcesFoundUsingAbsolutePath() throws Exception {\r\n    String location = \"/WEB-INF/views/registration.vm\";\r\n    Template template = velocityResult.getTemplate(stack, velocity, actionInvocation, location, \"UTF-8\");\r\n    assertNotNull(template);\r\n    assertEquals(\"expect absolute locations to be handled as is\", location, velocity.templateName);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\plugins\\velocity\\src\\test\\java\\org\\apache\\struts2\\views\\velocity\\result\\VelocityResultTest.java",
  "methodName" : "testResourcesFoundUsingNames",
  "sourceCode" : "@Test\r\npublic void testResourcesFoundUsingNames() throws Exception {\r\n    String location = \"Registration.vm\";\r\n    String expectedTemplateName = namespace + \"/\" + location;\r\n    Template template = velocityResult.getTemplate(stack, velocity, actionInvocation, location, \"UTF-8\");\r\n    assertNotNull(template);\r\n    assertEquals(\"expect the prefix to be appended to the path when the location is not absolute\", expectedTemplateName, velocity.templateName);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\plugins\\velocity\\src\\test\\java\\org\\apache\\struts2\\views\\velocity\\StrutsVelocityContextTest.java",
  "methodName" : "getChainedValue",
  "sourceCode" : "@Test\r\npublic void getChainedValue() {\r\n    when(chainedContext.get(\"foo\")).thenReturn(\"bar\");\r\n    assertEquals(\"bar\", strutsVelocityContext.internalGet(\"foo\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\plugins\\velocity\\src\\test\\java\\org\\apache\\struts2\\views\\velocity\\StrutsVelocityContextTest.java",
  "methodName" : "getStackValue",
  "sourceCode" : "@Test\r\npublic void getStackValue() {\r\n    when(stack.findValue(\"foo\")).thenReturn(\"bar\");\r\n    assertEquals(\"bar\", strutsVelocityContext.internalGet(\"foo\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\plugins\\velocity\\src\\test\\java\\org\\apache\\struts2\\views\\velocity\\StrutsVelocityContextTest.java",
  "methodName" : "getSuperValue",
  "sourceCode" : "@Test\r\npublic void getSuperValue() {\r\n    strutsVelocityContext.put(\"foo\", \"bar\");\r\n    assertEquals(\"bar\", strutsVelocityContext.internalGet(\"foo\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\plugins\\velocity\\src\\test\\java\\org\\apache\\struts2\\views\\velocity\\StrutsVelocityContextTest.java",
  "methodName" : "getValuePrecedence",
  "sourceCode" : "@Test\r\npublic void getValuePrecedence() {\r\n    when(stack.findValue(\"foo\")).thenReturn(\"qux\");\r\n    assertEquals(\"qux\", strutsVelocityContext.internalGet(\"foo\"));\r\n    when(chainedContext.get(\"foo\")).thenReturn(\"baz\");\r\n    assertEquals(\"baz\", strutsVelocityContext.internalGet(\"foo\"));\r\n    strutsVelocityContext.put(\"foo\", \"bar\");\r\n    assertEquals(\"bar\", strutsVelocityContext.internalGet(\"foo\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\plugins\\velocity\\src\\test\\java\\org\\apache\\struts2\\views\\velocity\\StrutsVelocityContextTest.java",
  "methodName" : "nullArgs",
  "sourceCode" : "@Test\r\npublic void nullArgs() {\r\n    strutsVelocityContext = new StrutsVelocityContext((List<VelocityContext>) null, null);\r\n    assertNull(strutsVelocityContext.internalGet(\"foo\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\plugins\\velocity\\src\\test\\java\\org\\apache\\struts2\\views\\velocity\\StrutsVelocityManagerTest.java",
  "methodName" : "overridingPropertiesLoaded",
  "sourceCode" : "@Test\r\npublic void overridingPropertiesLoaded() {\r\n    var props = new Properties();\r\n    props.setProperty(\"test\", \"value\");\r\n    strutsVelocityManager.setVelocityProperties(props);\r\n    strutsVelocityManager.init(servletContext);\r\n    assertEquals(\"value\", strutsVelocityManager.getVelocityEngine().getProperty(\"test\"));\r\n    assertEquals(props, strutsVelocityManager.getVelocityProperties());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\plugins\\velocity\\src\\test\\java\\org\\apache\\struts2\\views\\velocity\\StrutsVelocityManagerTest.java",
  "methodName" : "initSuccessful",
  "sourceCode" : "@Test\r\npublic void initSuccessful() {\r\n    strutsVelocityManager.init(servletContext);\r\n    assertNotNull(strutsVelocityManager.getVelocityEngine());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\plugins\\velocity\\src\\test\\java\\org\\apache\\struts2\\views\\velocity\\StrutsVelocityManagerTest.java",
  "methodName" : "exceptionThrownOnNoServletContext",
  "sourceCode" : "@Test\r\npublic void exceptionThrownOnNoServletContext() {\r\n    assertThrows(IllegalArgumentException.class, () -> strutsVelocityManager.init(null));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\plugins\\velocity\\src\\test\\java\\org\\apache\\struts2\\views\\velocity\\StrutsVelocityManagerTest.java",
  "methodName" : "initMethodIdempotent",
  "sourceCode" : "@Test\r\npublic void initMethodIdempotent() {\r\n    strutsVelocityManager.init(servletContext);\r\n    var engine = strutsVelocityManager.getVelocityEngine();\r\n    strutsVelocityManager.init(servletContext);\r\n    assertEquals(engine, strutsVelocityManager.getVelocityEngine());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\plugins\\velocity\\src\\test\\java\\org\\apache\\struts2\\views\\velocity\\StrutsVelocityManagerTest.java",
  "methodName" : "loadsConfigFromWebInfPath",
  "sourceCode" : "@Test\r\npublic void loadsConfigFromWebInfPath() {\r\n    strutsVelocityManager.setCustomConfigFile(\"webinf-velocity.properties\");\r\n    strutsVelocityManager.init(servletContext);\r\n    assertEquals(\"webinf\", strutsVelocityManager.getVelocityEngine().getProperty(\"test\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\plugins\\velocity\\src\\test\\java\\org\\apache\\struts2\\views\\velocity\\StrutsVelocityManagerTest.java",
  "methodName" : "loadsConfigFromClassPath",
  "sourceCode" : "@Test\r\npublic void loadsConfigFromClassPath() {\r\n    var servletContext = mock(ServletContext.class);\r\n    doReturn(null).when(servletContext).getRealPath(anyString());\r\n    strutsVelocityManager.setCustomConfigFile(\"test-velocity.properties\");\r\n    strutsVelocityManager.init(servletContext);\r\n    assertEquals(\"value\", strutsVelocityManager.getVelocityEngine().getProperty(\"test\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\plugins\\velocity\\src\\test\\java\\org\\apache\\struts2\\views\\velocity\\StrutsVelocityManagerTest.java",
  "methodName" : "initWithToolboxLocation",
  "sourceCode" : "@Test\r\npublic void initWithToolboxLocation() {\r\n    strutsVelocityManager.setToolBoxLocation(\"tools.xml\");\r\n    strutsVelocityManager.init(servletContext);\r\n    assertNotNull(strutsVelocityManager.getVelocityEngine());\r\n    assertNotNull(strutsVelocityManager.getVelocityTools());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\plugins\\velocity\\src\\test\\java\\org\\apache\\struts2\\views\\velocity\\StrutsVelocityManagerTest.java",
  "methodName" : "initFailsWithInvalidToolBoxLocation",
  "sourceCode" : "@Test\r\npublic void initFailsWithInvalidToolBoxLocation() {\r\n    strutsVelocityManager.setToolBoxLocation(\"invalid.xml\");\r\n    Exception e = assertThrows(Exception.class, () -> strutsVelocityManager.init(servletContext));\r\n    assertThat(e).hasMessageContaining(\"Could not find any configuration at invalid.xml\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\plugins\\velocity\\src\\test\\java\\org\\apache\\struts2\\views\\velocity\\StrutsVelocityManagerTest.java",
  "methodName" : "createContext",
  "sourceCode" : "@Test\r\npublic void createContext() {\r\n    strutsVelocityManager.init(servletContext);\r\n    Context context = strutsVelocityManager.createContext(ActionContext.getContext().getValueStack(), request, response);\r\n    assertNotNull(context);\r\n    assertThat(context.get(\"struts\")).isInstanceOf(VelocityStrutsUtil.class);\r\n    assertThat(context.get(\"stack\")).isInstanceOf(ValueStack.class);\r\n    assertThat(context.get(\"request\")).isInstanceOf(HttpServletRequest.class);\r\n    assertThat(context.get(\"response\")).isInstanceOf(HttpServletResponse.class);\r\n    assertEquals(context, request.getAttribute(KEY_VELOCITY_STRUTS_CONTEXT));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\plugins\\velocity\\src\\test\\java\\org\\apache\\struts2\\views\\velocity\\StrutsVelocityManagerTest.java",
  "methodName" : "createToolboxContext",
  "sourceCode" : "@Test\r\npublic void createToolboxContext() {\r\n    strutsVelocityManager.setToolBoxLocation(\"tools.xml\");\r\n    strutsVelocityManager.init(servletContext);\r\n    Context context = strutsVelocityManager.createContext(ActionContext.getContext().getValueStack(), request, response);\r\n    assertNotNull(context);\r\n    assertThat(context).isInstanceOf(ToolContext.class);\r\n    assertEquals(context, request.getAttribute(KEY_VELOCITY_STRUTS_CONTEXT));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\plugins\\velocity\\src\\test\\java\\org\\apache\\struts2\\views\\velocity\\template\\VelocityTemplateEngineTest.java",
  "methodName" : "templateTypeFromTemplateNameAndDefaults",
  "sourceCode" : "@Test\r\npublic void templateTypeFromTemplateNameAndDefaults() {\r\n    TemplateEngine engine = mgr.getTemplateEngine(new Template(\"/template\", \"simple\", \"foo\"), null);\r\n    assertTrue(engine instanceof JspTemplateEngine);\r\n    engine = mgr.getTemplateEngine(new Template(\"/template\", \"simple\", \"foo.vm\"), null);\r\n    assertTrue(engine instanceof VelocityTemplateEngine);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\plugins\\velocity\\src\\test\\java\\org\\apache\\struts2\\views\\velocity\\template\\VelocityTemplateEngineTest.java",
  "methodName" : "templateTypeOverrides",
  "sourceCode" : "@Test\r\npublic void templateTypeOverrides() {\r\n    TemplateEngine engine = mgr.getTemplateEngine(new Template(\"/template\", \"simple\", \"foo\"), \"ftl\");\r\n    assertTrue(engine instanceof FreemarkerTemplateEngine);\r\n    engine = mgr.getTemplateEngine(new Template(\"/template\", \"simple\", \"foo.vm\"), \"ftl\");\r\n    assertTrue(engine instanceof VelocityTemplateEngine);\r\n    engine = mgr.getTemplateEngine(new Template(\"/template\", \"simple\", \"foo.ftl\"), \"\");\r\n    assertTrue(engine instanceof FreemarkerTemplateEngine);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\struts\\plugins\\velocity\\src\\test\\java\\org\\apache\\struts2\\views\\velocity\\template\\VelocityTemplateEngineTest.java",
  "methodName" : "templateTypeUsesDefaultWhenNotSetInConfiguration",
  "sourceCode" : "@Test\r\npublic void templateTypeUsesDefaultWhenNotSetInConfiguration() {\r\n    mgr.setDefaultTemplateType(null);\r\n    TemplateEngine engine = mgr.getTemplateEngine(new Template(\"/template\", \"simple\", \"foo\"), null);\r\n    Template template = new Template(\"/template\", \"simple\", \"foo.\" + TemplateEngineManager.DEFAULT_TEMPLATE_TYPE);\r\n    TemplateEngine defaultTemplateEngine = mgr.getTemplateEngine(template, null);\r\n    assertEquals(engine.getClass(), defaultTemplateEngine.getClass());\r\n}",
  "annotations" : [ "Test" ]
} ]