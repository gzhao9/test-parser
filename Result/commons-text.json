[ {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\AlphabetConverterTest.java",
  "methodName" : "testBinaryTest",
  "sourceCode" : "@Test\r\nvoid testBinaryTest() throws UnsupportedEncodingException {\r\n    test(BINARY, NUMBERS, ArrayUtils.EMPTY_CHARACTER_OBJECT_ARRAY, \"0\", \"1\", \"10\", \"11\");\r\n    test(NUMBERS, BINARY, ArrayUtils.EMPTY_CHARACTER_OBJECT_ARRAY, \"12345\", \"0\");\r\n    test(LOWER_CASE_ENGLISH, BINARY, ArrayUtils.EMPTY_CHARACTER_OBJECT_ARRAY, \"abc\", \"a\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\AlphabetConverterTest.java",
  "methodName" : "testCreateConverterFromCharsAndEquals",
  "sourceCode" : "@Test\r\nvoid testCreateConverterFromCharsAndEquals() {\r\n    final Character[] characterArray = new Character[2];\r\n    final char charOne = '+';\r\n    final char character = '+';\r\n    characterArray[0] = character;\r\n    characterArray[1] = characterArray[0];\r\n    final AlphabetConverter alphabetConverter = AlphabetConverter.createConverterFromChars(characterArray, characterArray, characterArray);\r\n    assertFalse(alphabetConverter.equals(charOne));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\AlphabetConverterTest.java",
  "methodName" : "testCreateConverterFromCharsOne",
  "sourceCode" : "@Test\r\nvoid testCreateConverterFromCharsOne() {\r\n    final Character[] characterArray = new Character[2];\r\n    characterArray[0] = '5';\r\n    characterArray[1] = characterArray[0];\r\n    final AlphabetConverter alphabetConverter = AlphabetConverter.createConverterFromChars(characterArray, characterArray, characterArray);\r\n    assertEquals(1, alphabetConverter.getEncodedCharLength());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\AlphabetConverterTest.java",
  "methodName" : "testCreateConverterFromCharsWithNullAndNull",
  "sourceCode" : "@Test\r\nvoid testCreateConverterFromCharsWithNullAndNull() {\r\n    assertThrows(IllegalArgumentException.class, () -> {\r\n        final Character[] characterArray = new Character[2];\r\n        characterArray[0] = '$';\r\n        characterArray[1] = characterArray[0];\r\n        AlphabetConverter.createConverterFromChars(characterArray, null, null);\r\n    });\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\AlphabetConverterTest.java",
  "methodName" : "testCreateConverterFromMapAndEquals",
  "sourceCode" : "@Test\r\nvoid testCreateConverterFromMapAndEquals() {\r\n    final Map<Integer, String> hashMap = new HashMap<>();\r\n    final AlphabetConverter alphabetConverter = AlphabetConverter.createConverterFromMap(hashMap);\r\n    hashMap.put(0, \"CtDs\");\r\n    final AlphabetConverter alphabetConverterTwo = AlphabetConverter.createConverterFromMap(hashMap);\r\n    assertFalse(alphabetConverter.equals(alphabetConverterTwo));\r\n    assertEquals(1, alphabetConverter.getEncodedCharLength());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\AlphabetConverterTest.java",
  "methodName" : "testDecodeReturningNull",
  "sourceCode" : "@Test\r\nvoid testDecodeReturningNull() throws UnsupportedEncodingException {\r\n    final Map<Integer, String> map = new HashMap<>();\r\n    final AlphabetConverter alphabetConverter = AlphabetConverter.createConverterFromMap(map);\r\n    alphabetConverter.decode(null);\r\n    assertEquals(1, alphabetConverter.getEncodedCharLength());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\AlphabetConverterTest.java",
  "methodName" : "testDoNotEncodeTest",
  "sourceCode" : "@Test\r\nvoid testDoNotEncodeTest() throws UnsupportedEncodingException {\r\n    test(ENGLISH_AND_NUMBERS, LOWER_CASE_ENGLISH_AND_NUMBERS, LOWER_CASE_ENGLISH, \"1\", \"456\", \"abc\", \"ABC\", \"this will not be converted but THIS WILL\");\r\n    test(ENGLISH_AND_NUMBERS, LOWER_CASE_ENGLISH_AND_NUMBERS, NUMBERS, \"1\", \"456\", \"abc\", \"ABC\", \"this will be converted but 12345 and this will be\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\AlphabetConverterTest.java",
  "methodName" : "testEncodeFailureTest",
  "sourceCode" : "@Test\r\nvoid testEncodeFailureTest() {\r\n    assertEquals(\"Couldn't find encoding for '3' in 3\", assertThrows(UnsupportedEncodingException.class, () -> test(BINARY, NUMBERS, ArrayUtils.EMPTY_CHARACTER_OBJECT_ARRAY, \"3\")).getMessage());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\AlphabetConverterTest.java",
  "methodName" : "testEquals",
  "sourceCode" : "@Test\r\nvoid testEquals() {\r\n    final Character[] characterArray = new Character[2];\r\n    final char character = 'R';\r\n    characterArray[0] = character;\r\n    characterArray[1] = character;\r\n    final AlphabetConverter alphabetConverter = AlphabetConverter.createConverterFromChars(characterArray, characterArray, characterArray);\r\n    final Map<Integer, String> map = new HashMap<>();\r\n    final AlphabetConverter alphabetConverterTwo = AlphabetConverter.createConverterFromMap(map);\r\n    assertEquals(1, alphabetConverterTwo.getEncodedCharLength());\r\n    assertFalse(alphabetConverter.equals(alphabetConverterTwo));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\AlphabetConverterTest.java",
  "methodName" : "testEqualsWithNull",
  "sourceCode" : "@Test\r\nvoid testEqualsWithNull() {\r\n    final Character[] characterArray = ArrayUtils.EMPTY_CHARACTER_OBJECT_ARRAY;\r\n    final AlphabetConverter alphabetConverter = AlphabetConverter.createConverterFromChars(characterArray, null, null);\r\n    assertFalse(alphabetConverter.equals(null));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\AlphabetConverterTest.java",
  "methodName" : "testEqualsWithSameObject",
  "sourceCode" : "@Test\r\nvoid testEqualsWithSameObject() {\r\n    final Character[] characterArray = new Character[2];\r\n    final char character = 'R';\r\n    characterArray[0] = character;\r\n    characterArray[1] = character;\r\n    final AlphabetConverter alphabetConverter = AlphabetConverter.createConverterFromChars(characterArray, characterArray, characterArray);\r\n    assertTrue(alphabetConverter.equals(alphabetConverter));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\AlphabetConverterTest.java",
  "methodName" : "testHebrewTest",
  "sourceCode" : "@Test\r\nvoid testHebrewTest() throws UnsupportedEncodingException {\r\n    test(HEBREW, BINARY, ArrayUtils.EMPTY_CHARACTER_OBJECT_ARRAY, \"\\u05d0\", \"\\u05e2\", \"\\u05d0\\u05dc\\u05e3_\\u05d0\\u05d5\\u05d4\\u05d1\\u05dc_\\u05d1\\u05d9\\u05ea_\\u05d6\\u05d4_\\u05d1\\u05d9\\u05ea_\" + \"\\u05d2\\u05d9\\u05de\\u05dc_\\u05d6\\u05d4_\\u05db\\u05de\\u05dc_\\u05d2\\u05d3\\u05d5\\u05dc\");\r\n    test(HEBREW, NUMBERS, ArrayUtils.EMPTY_CHARACTER_OBJECT_ARRAY, \"\\u05d0\", \"\\u05e2\", \"\\u05d0\\u05dc\\u05e3_\\u05d0\\u05d5\\u05d4\\u05d1\\u05dc_\\u05d1\\u05d9\\u05ea_\\u05d6\\u05d4_\\u05d1\\u05d9\\u05ea_\" + \"\\u05d2\\u05d9\\u05de\\u05dc_\\u05d6\\u05d4_\\u05db\\u05de\\u05dc_\\u05d2\\u05d3\\u05d5\\u05dc\");\r\n    test(NUMBERS, HEBREW, ArrayUtils.EMPTY_CHARACTER_OBJECT_ARRAY, \"123456789\", \"1\", \"5\");\r\n    test(LOWER_CASE_ENGLISH, HEBREW, ArrayUtils.EMPTY_CHARACTER_OBJECT_ARRAY, \"this is a test\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\AlphabetConverterTest.java",
  "methodName" : "testJavadocExampleTest",
  "sourceCode" : "/*\r\n     * Test example in javadocs for consistency\r\n     */\r\n@Test\r\nvoid testJavadocExampleTest() throws UnsupportedEncodingException {\r\n    final AlphabetConverter ac = createJavadocExample();\r\n    assertEquals(\"00\", ac.encode(\"a\"));\r\n    assertEquals(\"01\", ac.encode(\"b\"));\r\n    assertEquals(\"0d\", ac.encode(\"c\"));\r\n    assertEquals(\"d\", ac.encode(\"d\"));\r\n    assertEquals(\"00010dd\", ac.encode(\"abcd\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\AlphabetConverterTest.java",
  "methodName" : "testMissingDoNotEncodeLettersFromEncodingTest",
  "sourceCode" : "@Test\r\nvoid testMissingDoNotEncodeLettersFromEncodingTest() {\r\n    assertEquals(\"Can not use 'do not encode' list because encoding alphabet does not contain '0'\", assertThrows(IllegalArgumentException.class, () -> AlphabetConverter.createConverterFromChars(ENGLISH_AND_NUMBERS, LOWER_CASE_ENGLISH, NUMBERS)).getMessage());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\AlphabetConverterTest.java",
  "methodName" : "testMissingDoNotEncodeLettersFromOriginalTest",
  "sourceCode" : "@Test\r\nvoid testMissingDoNotEncodeLettersFromOriginalTest() {\r\n    assertEquals(\"Can not use 'do not encode' list because original alphabet does not contain '0'\", assertThrows(IllegalArgumentException.class, () -> AlphabetConverter.createConverterFromChars(LOWER_CASE_ENGLISH, ENGLISH_AND_NUMBERS, NUMBERS)).getMessage());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\AlphabetConverterTest.java",
  "methodName" : "testNoEncodingLettersTest",
  "sourceCode" : "@Test\r\nvoid testNoEncodingLettersTest() {\r\n    assertEquals(\"Must have at least two encoding characters (excluding those in the 'do not encode' list), but has 0\", assertThrows(IllegalArgumentException.class, () -> AlphabetConverter.createConverterFromChars(ENGLISH_AND_NUMBERS, NUMBERS, NUMBERS)).getMessage());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\AlphabetConverterTest.java",
  "methodName" : "testOnlyOneEncodingLettersTest",
  "sourceCode" : "@Test\r\nvoid testOnlyOneEncodingLettersTest() {\r\n    assertEquals(\"Must have at least two encoding characters (excluding those in the 'do not encode' list), but has 1\", assertThrows(IllegalArgumentException.class, () -> {\r\n        final Character[] numbersPlusUnderscore = Arrays.copyOf(NUMBERS, NUMBERS.length + 1);\r\n        numbersPlusUnderscore[numbersPlusUnderscore.length - 1] = '_';\r\n        AlphabetConverter.createConverterFromChars(ENGLISH_AND_NUMBERS, numbersPlusUnderscore, NUMBERS);\r\n    }).getMessage());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\AlphabetConverterTest.java",
  "methodName" : "testUnexpectedEndWhileDecodingTest",
  "sourceCode" : "@Test\r\nvoid testUnexpectedEndWhileDecodingTest() {\r\n    final String toDecode = \"00d01d0\";\r\n    assertEquals(\"Unexpected end of string while decoding \" + toDecode, assertThrows(UnsupportedEncodingException.class, () -> createJavadocExample().decode(toDecode)).getMessage());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\AlphabetConverterTest.java",
  "methodName" : "testUnexpectedStringWhileDecodingTest",
  "sourceCode" : "@Test\r\nvoid testUnexpectedStringWhileDecodingTest() {\r\n    final String toDecode = \"00XX\";\r\n    assertEquals(\"Unexpected string without decoding (XX) in \" + toDecode, assertThrows(UnsupportedEncodingException.class, () -> createJavadocExample().decode(toDecode)).getMessage());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\AlphabetConverterTest.java",
  "methodName" : "testUnicodeTest",
  "sourceCode" : "/**\r\n * Test constructor from code points\r\n */\r\n@Test\r\nvoid testUnicodeTest() throws UnsupportedEncodingException {\r\n    final AlphabetConverter ac = AlphabetConverter.createConverter(UNICODE, LOWER_CASE_ENGLISH_CODEPOINTS, DO_NOT_ENCODE_CODEPOINTS);\r\n    assertEquals(2, ac.getEncodedCharLength());\r\n    final String original = \"\\u8a43\\u8a45 \\u8dce ab \\u8dc3 c \\u8983\";\r\n    final String encoded = ac.encode(original);\r\n    final String decoded = ac.decode(encoded);\r\n    assertEquals(original, decoded, () -> \"Encoded '\" + original + \"' into '\" + encoded + \"', but decoded into '\" + decoded + \"'\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\CaseUtilsTest.java",
  "methodName" : "testConstructor",
  "sourceCode" : "@Test\r\nvoid testConstructor() {\r\n    assertNotNull(new CaseUtils());\r\n    final Constructor<?>[] cons = CaseUtils.class.getDeclaredConstructors();\r\n    assertEquals(1, cons.length);\r\n    assertTrue(Modifier.isPublic(cons[0].getModifiers()));\r\n    assertTrue(Modifier.isPublic(CaseUtils.class.getModifiers()));\r\n    assertFalse(Modifier.isFinal(CaseUtils.class.getModifiers()));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\CaseUtilsTest.java",
  "methodName" : "testToCamelCase",
  "sourceCode" : "@Test\r\nvoid testToCamelCase() {\r\n    assertNull(CaseUtils.toCamelCase(null, false, null));\r\n    assertEquals(\"\", CaseUtils.toCamelCase(\"\", true, null));\r\n    assertEquals(\"\", CaseUtils.toCamelCase(\"  \", false, null));\r\n    assertEquals(\"aBC@def\", CaseUtils.toCamelCase(\"a  b  c  @def\", false, null));\r\n    assertEquals(\"ABC@def\", CaseUtils.toCamelCase(\"a b c @def\", true));\r\n    assertEquals(\"ABC@def\", CaseUtils.toCamelCase(\"a b c @def\", true, '-'));\r\n    assertEquals(\"ABC@def\", CaseUtils.toCamelCase(\"a b c @def\", true, '-'));\r\n    final char[] chars = { '-', '+', ' ', '@' };\r\n    assertEquals(\"\", CaseUtils.toCamelCase(\"-+@ \", true, chars));\r\n    assertEquals(\"toCamelCase\", CaseUtils.toCamelCase(\"   to-CAMEL-cASE\", false, chars));\r\n    assertEquals(\"ToCamelCase\", CaseUtils.toCamelCase(\"@@@@   to+CAMEL@cASE \", true, chars));\r\n    assertEquals(\"ToCaMeLCase\", CaseUtils.toCamelCase(\"To+CA+ME L@cASE\", true, chars));\r\n    assertEquals(\"toCamelCase\", CaseUtils.toCamelCase(\"To.Camel.Case\", false, '.'));\r\n    assertEquals(\"toCamelCase\", CaseUtils.toCamelCase(\"To.Camel-Case\", false, '-', '.'));\r\n    assertEquals(\"toCamelCase\", CaseUtils.toCamelCase(\" to @ Camel case\", false, '-', '@'));\r\n    assertEquals(\"ToCamelCase\", CaseUtils.toCamelCase(\" @to @ Camel case\", true, '-', '@'));\r\n    assertEquals(\"ToCamelCase\", CaseUtils.toCamelCase(\"TO CAMEL CASE\", true, null));\r\n    assertEquals(\"toCamelCase\", CaseUtils.toCamelCase(\"TO CAMEL CASE\", false, null));\r\n    assertEquals(\"toCamelCase\", CaseUtils.toCamelCase(\"TO CAMEL CASE\", false, null));\r\n    assertEquals(\"tocamelcase\", CaseUtils.toCamelCase(\"tocamelcase\", false, null));\r\n    assertEquals(\"Tocamelcase\", CaseUtils.toCamelCase(\"tocamelcase\", true, null));\r\n    assertEquals(\"tocamelcase\", CaseUtils.toCamelCase(\"Tocamelcase\", false, null));\r\n    assertEquals(\"Tocamelcase\", CaseUtils.toCamelCase(\"tocamelcase\", true));\r\n    assertEquals(\"tocamelcase\", CaseUtils.toCamelCase(\"tocamelcase\", false));\r\n    assertEquals(\"\\uD800\\uDF00\\uD800\\uDF02\", CaseUtils.toCamelCase(\"\\uD800\\uDF00 \\uD800\\uDF02\", true));\r\n    assertEquals(\"\\uD800\\uDF00\\uD800\\uDF01\\uD800\\uDF02\\uD800\\uDF03\", CaseUtils.toCamelCase(\"\\uD800\\uDF00\\uD800\\uDF01\\uD800\\uDF14\\uD800\\uDF02\\uD800\\uDF03\", true, '\\uD800', '\\uDF14'));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\CharacterPredicatesTest.java",
  "methodName" : "testArabicNumerals",
  "sourceCode" : "@Test\r\nvoid testArabicNumerals() {\r\n    assertTrue(CharacterPredicates.ARABIC_NUMERALS.test('0'));\r\n    assertTrue(CharacterPredicates.ARABIC_NUMERALS.test('1'));\r\n    assertTrue(CharacterPredicates.ARABIC_NUMERALS.test('9'));\r\n    assertFalse(CharacterPredicates.ARABIC_NUMERALS.test('/'));\r\n    assertFalse(CharacterPredicates.ARABIC_NUMERALS.test(':'));\r\n    assertFalse(CharacterPredicates.ARABIC_NUMERALS.test('a'));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\CharacterPredicatesTest.java",
  "methodName" : "testAsciiAlphaNumerals",
  "sourceCode" : "@Test\r\nvoid testAsciiAlphaNumerals() {\r\n    assertTrue(CharacterPredicates.ASCII_ALPHA_NUMERALS.test('a'));\r\n    assertTrue(CharacterPredicates.ASCII_ALPHA_NUMERALS.test('z'));\r\n    assertTrue(CharacterPredicates.ASCII_ALPHA_NUMERALS.test('A'));\r\n    assertTrue(CharacterPredicates.ASCII_ALPHA_NUMERALS.test('Z'));\r\n    assertTrue(CharacterPredicates.ASCII_ALPHA_NUMERALS.test('0'));\r\n    assertTrue(CharacterPredicates.ASCII_ALPHA_NUMERALS.test('9'));\r\n    assertFalse(CharacterPredicates.ASCII_ALPHA_NUMERALS.test('`'));\r\n    assertFalse(CharacterPredicates.ASCII_ALPHA_NUMERALS.test('{'));\r\n    assertFalse(CharacterPredicates.ASCII_ALPHA_NUMERALS.test('@'));\r\n    assertFalse(CharacterPredicates.ASCII_ALPHA_NUMERALS.test('['));\r\n    assertFalse(CharacterPredicates.ASCII_ALPHA_NUMERALS.test('/'));\r\n    assertFalse(CharacterPredicates.ASCII_ALPHA_NUMERALS.test(':'));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\CharacterPredicatesTest.java",
  "methodName" : "testAsciiLetters",
  "sourceCode" : "@Test\r\nvoid testAsciiLetters() {\r\n    assertTrue(CharacterPredicates.ASCII_LETTERS.test('a'));\r\n    assertTrue(CharacterPredicates.ASCII_LETTERS.test('z'));\r\n    assertTrue(CharacterPredicates.ASCII_LETTERS.test('A'));\r\n    assertTrue(CharacterPredicates.ASCII_LETTERS.test('Z'));\r\n    assertFalse(CharacterPredicates.ASCII_LETTERS.test('9'));\r\n    assertFalse(CharacterPredicates.ASCII_LETTERS.test('`'));\r\n    assertFalse(CharacterPredicates.ASCII_LETTERS.test('{'));\r\n    assertFalse(CharacterPredicates.ASCII_LETTERS.test('@'));\r\n    assertFalse(CharacterPredicates.ASCII_LETTERS.test('['));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\CharacterPredicatesTest.java",
  "methodName" : "testAsciiLowercaseLetters",
  "sourceCode" : "@Test\r\nvoid testAsciiLowercaseLetters() {\r\n    assertTrue(CharacterPredicates.ASCII_LOWERCASE_LETTERS.test('a'));\r\n    assertTrue(CharacterPredicates.ASCII_LOWERCASE_LETTERS.test('z'));\r\n    assertFalse(CharacterPredicates.ASCII_LOWERCASE_LETTERS.test('9'));\r\n    assertFalse(CharacterPredicates.ASCII_LOWERCASE_LETTERS.test('A'));\r\n    assertFalse(CharacterPredicates.ASCII_LOWERCASE_LETTERS.test('Z'));\r\n    assertFalse(CharacterPredicates.ASCII_LOWERCASE_LETTERS.test('`'));\r\n    assertFalse(CharacterPredicates.ASCII_LOWERCASE_LETTERS.test('{'));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\CharacterPredicatesTest.java",
  "methodName" : "testAsciiUppercaseLetters",
  "sourceCode" : "@Test\r\nvoid testAsciiUppercaseLetters() {\r\n    assertTrue(CharacterPredicates.ASCII_UPPERCASE_LETTERS.test('A'));\r\n    assertTrue(CharacterPredicates.ASCII_UPPERCASE_LETTERS.test('Z'));\r\n    assertFalse(CharacterPredicates.ASCII_UPPERCASE_LETTERS.test('9'));\r\n    assertFalse(CharacterPredicates.ASCII_UPPERCASE_LETTERS.test('@'));\r\n    assertFalse(CharacterPredicates.ASCII_UPPERCASE_LETTERS.test('['));\r\n    assertFalse(CharacterPredicates.ASCII_UPPERCASE_LETTERS.test('a'));\r\n    assertFalse(CharacterPredicates.ASCII_UPPERCASE_LETTERS.test('z'));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\CharacterPredicatesTest.java",
  "methodName" : "testDigits",
  "sourceCode" : "@Test\r\nvoid testDigits() {\r\n    assertTrue(CharacterPredicates.DIGITS.test('0'));\r\n    assertTrue(CharacterPredicates.DIGITS.test('9'));\r\n    assertFalse(CharacterPredicates.DIGITS.test('-'));\r\n    assertFalse(CharacterPredicates.DIGITS.test('.'));\r\n    assertFalse(CharacterPredicates.DIGITS.test('L'));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\CharacterPredicatesTest.java",
  "methodName" : "testLetters",
  "sourceCode" : "@Test\r\nvoid testLetters() {\r\n    assertTrue(CharacterPredicates.LETTERS.test('a'));\r\n    assertTrue(CharacterPredicates.LETTERS.test('Z'));\r\n    assertFalse(CharacterPredicates.LETTERS.test('1'));\r\n    assertFalse(CharacterPredicates.LETTERS.test('?'));\r\n    assertFalse(CharacterPredicates.LETTERS.test('@'));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\CompositeFormatTest.java",
  "methodName" : "testCompositeFormat",
  "sourceCode" : "/**\r\n * Ensures that the parse/format separation is correctly maintained.\r\n */\r\n@Test\r\nvoid testCompositeFormat() {\r\n    final Format parser = new Format() {\r\n\r\n        private static final long serialVersionUID = 1L;\r\n\r\n        @Override\r\n        public StringBuffer format(final Object obj, final StringBuffer toAppendTo, final FieldPosition pos) {\r\n            throw new UnsupportedOperationException(\"Not implemented\");\r\n        }\r\n\r\n        @Override\r\n        public Object parseObject(final String source, final ParsePosition pos) {\r\n            // do nothing\r\n            return null;\r\n        }\r\n    };\r\n    final Format formatter = new Format() {\r\n\r\n        private static final long serialVersionUID = 1L;\r\n\r\n        @Override\r\n        public StringBuffer format(final Object obj, final StringBuffer toAppendTo, final FieldPosition pos) {\r\n            // do nothing\r\n            return null;\r\n        }\r\n\r\n        @Override\r\n        public Object parseObject(final String source, final ParsePosition pos) {\r\n            throw new UnsupportedOperationException(\"Not implemented\");\r\n        }\r\n    };\r\n    final CompositeFormat composite = new CompositeFormat(parser, formatter);\r\n    composite.parseObject(\"\", null);\r\n    composite.format(new Object(), new StringBuffer(), null);\r\n    assertEquals(parser, composite.getParser(), \"Parser get method incorrectly implemented\");\r\n    assertEquals(formatter, composite.getFormatter(), \"Formatter get method incorrectly implemented\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\CompositeFormatTest.java",
  "methodName" : "testUsage",
  "sourceCode" : "@Test\r\nvoid testUsage() throws Exception {\r\n    final Format f1 = new SimpleDateFormat(\"MMddyyyy\", Locale.ENGLISH);\r\n    final Format f2 = new SimpleDateFormat(\"MMMM d, yyyy\", Locale.ENGLISH);\r\n    final CompositeFormat c = new CompositeFormat(f1, f2);\r\n    final String testString = \"January 3, 2005\";\r\n    assertEquals(testString, c.format(c.parseObject(\"01032005\")));\r\n    assertEquals(testString, c.reformat(\"01032005\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\diff\\ReplacementsFinderTest.java",
  "methodName" : "testReplacementsHandler",
  "sourceCode" : "@ParameterizedTest\r\n@MethodSource(\"parameters\")\r\nvoid testReplacementsHandler(final String left, final String right, final int skipped, final Character[] from, final Character[] to) {\r\n    final StringsComparator sc = new StringsComparator(left, right);\r\n    final ReplacementsFinder<Character> replacementFinder = new ReplacementsFinder<>(handler);\r\n    sc.getScript().visit(replacementFinder);\r\n    assertEquals(skipped, handler.getSkipped(), \"Skipped characters do not match\");\r\n    assertArrayEquals(handler.getFrom().toArray(ArrayUtils.EMPTY_CHARACTER_OBJECT_ARRAY), from, \"From characters do not match\");\r\n    assertArrayEquals(to, handler.getTo().toArray(ArrayUtils.EMPTY_CHARACTER_OBJECT_ARRAY), \"To characters do not match\");\r\n}",
  "annotations" : [ "ParameterizedTest" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\diff\\StringsComparatorTest.java",
  "methodName" : "testExecution",
  "sourceCode" : "@Test\r\nvoid testExecution() {\r\n    for (int i = 0; i < before.size(); ++i) {\r\n        final ExecutionVisitor<Character> ev = new ExecutionVisitor<>();\r\n        new StringsComparator(before.get(i), after.get(i)).getScript().visit(ev);\r\n        assertEquals(after.get(i), ev.getString());\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\diff\\StringsComparatorTest.java",
  "methodName" : "testLength",
  "sourceCode" : "@Test\r\nvoid testLength() {\r\n    for (int i = 0; i < before.size(); ++i) {\r\n        final StringsComparator comparator = new StringsComparator(before.get(i), after.get(i));\r\n        assertEquals(length[i], comparator.getScript().getModifications());\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\diff\\StringsComparatorTest.java",
  "methodName" : "testLongestCommonSubsequence",
  "sourceCode" : "@Test\r\nvoid testLongestCommonSubsequence() {\r\n    for (int i = 0; i < before.size(); ++i) {\r\n        final StringsComparator comparator = new StringsComparator(before.get(i), after.get(i));\r\n        assertEquals(lcs[i], comparator.getScript().getLCSLength());\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\ExtendedMessageFormatTest.java",
  "methodName" : "testBuiltInChoiceFormat",
  "sourceCode" : "/**\r\n * Test the built in choice format.\r\n */\r\n@Test\r\nvoid testBuiltInChoiceFormat() {\r\n    final Object[] values = new Number[] { 1, Double.valueOf(\"2.2\"), Double.valueOf(\"1234.5\") };\r\n    String choicePattern;\r\n    final Locale[] availableLocales = NumberFormat.getAvailableLocales();\r\n    choicePattern = \"{0,choice,1#One|2#Two|3#Many {0,number}}\";\r\n    for (final Object value : values) {\r\n        checkBuiltInFormat(value + \": \" + choicePattern, new Object[] { value }, availableLocales);\r\n    }\r\n    choicePattern = \"{0,choice,1#''One''|2#\\\"Two\\\"|3#''{Many}'' {0,number}}\";\r\n    for (final Object value : values) {\r\n        checkBuiltInFormat(value + \": \" + choicePattern, new Object[] { value }, availableLocales);\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\ExtendedMessageFormatTest.java",
  "methodName" : "testBuiltInDateTimeFormat",
  "sourceCode" : "/**\r\n * Test the built in date/time formats\r\n */\r\n@Test\r\nvoid testBuiltInDateTimeFormat() {\r\n    final Calendar cal = Calendar.getInstance();\r\n    cal.set(2007, Calendar.JANUARY, 23, 18, 33, 5);\r\n    final Object[] args = { cal.getTime() };\r\n    final Locale[] availableLocales = DateFormat.getAvailableLocales();\r\n    checkBuiltInFormat(\"1: {0,date,short}\", args, availableLocales);\r\n    checkBuiltInFormat(\"2: {0,date,medium}\", args, availableLocales);\r\n    checkBuiltInFormat(\"3: {0,date,long}\", args, availableLocales);\r\n    checkBuiltInFormat(\"4: {0,date,full}\", args, availableLocales);\r\n    checkBuiltInFormat(\"5: {0,date,d MMM yy}\", args, availableLocales);\r\n    checkBuiltInFormat(\"6: {0,time,short}\", args, availableLocales);\r\n    checkBuiltInFormat(\"7: {0,time,medium}\", args, availableLocales);\r\n    checkBuiltInFormat(\"8: {0,time,long}\", args, availableLocales);\r\n    checkBuiltInFormat(\"9: {0,time,full}\", args, availableLocales);\r\n    checkBuiltInFormat(\"10: {0,time,HH:mm}\", args, availableLocales);\r\n    checkBuiltInFormat(\"11: {0,date}\", args, availableLocales);\r\n    checkBuiltInFormat(\"12: {0,time}\", args, availableLocales);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\ExtendedMessageFormatTest.java",
  "methodName" : "testBuiltInNumberFormat",
  "sourceCode" : "/**\r\n * Test the built in number formats.\r\n */\r\n@Test\r\nvoid testBuiltInNumberFormat() {\r\n    final Object[] args = { Double.valueOf(\"6543.21\") };\r\n    final Locale[] availableLocales = NumberFormat.getAvailableLocales();\r\n    checkBuiltInFormat(\"1: {0,number}\", args, availableLocales);\r\n    checkBuiltInFormat(\"2: {0,number,integer}\", args, availableLocales);\r\n    checkBuiltInFormat(\"3: {0,number,currency}\", args, availableLocales);\r\n    checkBuiltInFormat(\"4: {0,number,percent}\", args, availableLocales);\r\n    checkBuiltInFormat(\"5: {0,number,00000.000}\", args, availableLocales);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\ExtendedMessageFormatTest.java",
  "methodName" : "testChoiceQuoteJustBeforeBraceEnd_TEXT_106",
  "sourceCode" : "/**\r\n * Test Bug TEXT-106 - Exception while using ExtendedMessageFormat and choice format element with quote just before brace end\r\n */\r\n@Test\r\nvoid testChoiceQuoteJustBeforeBraceEnd_TEXT_106() {\r\n    final String pattern2 = \"Choice format element with quote just before brace end ''{0,choice,0#0|0<'1'}''\";\r\n    final ExtendedMessageFormat emf = new ExtendedMessageFormat(pattern2, registry);\r\n    assertEquals(\"Choice format element with quote just before brace end '0'\", emf.format(new Object[] { 0 }));\r\n    assertEquals(\"Choice format element with quote just before brace end '1'\", emf.format(new Object[] { 1 }));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\ExtendedMessageFormatTest.java",
  "methodName" : "testCreatesExtendedMessageFormatTakingString",
  "sourceCode" : "@Test\r\nvoid testCreatesExtendedMessageFormatTakingString() {\r\n    final ExtendedMessageFormat extendedMessageFormat = new ExtendedMessageFormat(\"Unterminated format element at position \");\r\n    final Map<String, FormatFactory> map = new HashMap<>();\r\n    final ExtendedMessageFormat extendedMessageFormatTwo = new ExtendedMessageFormat(\"Unterminated format element at position \", map);\r\n    assertEquals(\"Unterminated format element at position \", extendedMessageFormatTwo.toPattern());\r\n    assertNotEquals(extendedMessageFormat, extendedMessageFormatTwo);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\ExtendedMessageFormatTest.java",
  "methodName" : "testEmbeddedPatternInChoice",
  "sourceCode" : "/**\r\n * Test Bug LANG-917 - IndexOutOfBoundsException and/or infinite loop when using a choice pattern\r\n */\r\n@Test\r\nvoid testEmbeddedPatternInChoice() {\r\n    final String pattern = \"Hi {0,lower}, got {1,choice,0#none|1#one|1<{1,number}}, {2,upper}!\";\r\n    final ExtendedMessageFormat emf = new ExtendedMessageFormat(pattern, registry);\r\n    assertEquals(\"Hi there, got 3, GREAT!\", emf.format(new Object[] { \"there\", 3, \"great\" }));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\ExtendedMessageFormatTest.java",
  "methodName" : "testEqualsHashcode",
  "sourceCode" : "/**\r\n * Test equals() and hashCode().\r\n */\r\n@Test\r\nvoid testEqualsHashcode() {\r\n    final Map<String, ? extends FormatFactory> fmtRegistry = Collections.singletonMap(\"testfmt\", LowerCaseFormat.FACTORY);\r\n    final Map<String, ? extends FormatFactory> otherRegistry = Collections.singletonMap(\"testfmt\", UpperCaseFormat.FACTORY);\r\n    final String pattern = \"Pattern: {0,testfmt}\";\r\n    final ExtendedMessageFormat emf = new ExtendedMessageFormat(pattern, Locale.US, fmtRegistry);\r\n    ExtendedMessageFormat other;\r\n    // Same object\r\n    assertEquals(emf, emf, \"same, equals()\");\r\n    assertEquals(emf.hashCode(), emf.hashCode(), \"same, hashCode()\");\r\n    assertNotEquals(null, emf, \"null, equals\");\r\n    // Equal Object\r\n    other = new ExtendedMessageFormat(pattern, Locale.US, fmtRegistry);\r\n    assertEquals(emf, other, \"equal, equals()\");\r\n    assertEquals(emf.hashCode(), other.hashCode(), \"equal, hashCode()\");\r\n    // Different Class\r\n    other = new OtherExtendedMessageFormat(pattern, Locale.US, fmtRegistry);\r\n    assertNotEquals(emf, other, \"class, equals()\");\r\n    // same hash code\r\n    assertEquals(emf.hashCode(), other.hashCode(), \"class, hashCode()\");\r\n    // Different pattern\r\n    other = new ExtendedMessageFormat(\"X\" + pattern, Locale.US, fmtRegistry);\r\n    assertNotEquals(emf, other, \"pattern, equals()\");\r\n    assertNotEquals(emf.hashCode(), other.hashCode(), \"pattern, hashCode()\");\r\n    // Different registry\r\n    other = new ExtendedMessageFormat(pattern, Locale.US, otherRegistry);\r\n    assertNotEquals(emf, other, \"registry, equals()\");\r\n    assertNotEquals(emf.hashCode(), other.hashCode(), \"registry, hashCode()\");\r\n    // Different Locale\r\n    other = new ExtendedMessageFormat(pattern, Locale.FRANCE, fmtRegistry);\r\n    assertNotEquals(emf, other, \"locale, equals()\");\r\n    // same hash code\r\n    assertEquals(emf.hashCode(), other.hashCode(), \"locale, hashCode()\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\ExtendedMessageFormatTest.java",
  "methodName" : "testEscapedBraces_LANG_948",
  "sourceCode" : "/**\r\n * Test Bug LANG-948 - Exception while using ExtendedMessageFormat and escaping braces\r\n */\r\n@Test\r\nvoid testEscapedBraces_LANG_948() {\r\n    // message without placeholder because braces are escaped by quotes\r\n    final String pattern = \"Message without placeholders '{}'\";\r\n    final ExtendedMessageFormat emf = new ExtendedMessageFormat(pattern, registry);\r\n    assertEquals(\"Message without placeholders {}\", emf.format(new Object[] { \"DUMMY\" }));\r\n    // message with placeholder because quotes are escaped by quotes\r\n    final String pattern2 = \"Message with placeholder ''{0}''\";\r\n    final ExtendedMessageFormat emf2 = new ExtendedMessageFormat(pattern2, registry);\r\n    assertEquals(\"Message with placeholder 'DUMMY'\", emf2.format(new Object[] { \"DUMMY\" }));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\ExtendedMessageFormatTest.java",
  "methodName" : "testEscapedQuote_LANG_477",
  "sourceCode" : "/**\r\n * Test Bug LANG-477 - out of memory error with escaped quote\r\n */\r\n@Test\r\nvoid testEscapedQuote_LANG_477() {\r\n    final String pattern = \"it''s a {0,lower} 'test'!\";\r\n    final ExtendedMessageFormat emf = new ExtendedMessageFormat(pattern, registry);\r\n    assertEquals(\"it's a dummy test!\", emf.format(new Object[] { \"DUMMY\" }));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\ExtendedMessageFormatTest.java",
  "methodName" : "testExtendedAndBuiltInFormats",
  "sourceCode" : "/**\r\n * Test extended and built in formats.\r\n */\r\n@Test\r\nvoid testExtendedAndBuiltInFormats() {\r\n    final Calendar cal = Calendar.getInstance();\r\n    cal.set(2007, Calendar.JANUARY, 23, 18, 33, 5);\r\n    final Object[] args = { \"John Doe\", cal.getTime(), Double.valueOf(\"12345.67\") };\r\n    final String builtinsPattern = \"DOB: {1,date,short} Salary: {2,number,currency}\";\r\n    final String extendedPattern = \"Name: {0,upper} \";\r\n    final String pattern = extendedPattern + builtinsPattern;\r\n    final HashSet<Locale> testLocales = new HashSet<>(Arrays.asList(DateFormat.getAvailableLocales()));\r\n    testLocales.retainAll(Arrays.asList(NumberFormat.getAvailableLocales()));\r\n    testLocales.add(null);\r\n    for (final Locale locale : testLocales) {\r\n        final MessageFormat builtins = createMessageFormat(builtinsPattern, locale);\r\n        final String expectedPattern = extendedPattern + builtins.toPattern();\r\n        DateFormat df = null;\r\n        NumberFormat nf = null;\r\n        ExtendedMessageFormat emf = null;\r\n        if (locale == null) {\r\n            df = DateFormat.getDateInstance(DateFormat.SHORT);\r\n            nf = NumberFormat.getCurrencyInstance();\r\n            emf = new ExtendedMessageFormat(pattern, registry);\r\n        } else {\r\n            df = DateFormat.getDateInstance(DateFormat.SHORT, locale);\r\n            nf = NumberFormat.getCurrencyInstance(locale);\r\n            emf = new ExtendedMessageFormat(pattern, locale, registry);\r\n        }\r\n        final StringBuilder expected = new StringBuilder();\r\n        expected.append(\"Name: \");\r\n        expected.append(args[0].toString().toUpperCase(Locale.ROOT));\r\n        expected.append(\" DOB: \");\r\n        expected.append(df.format(args[1]));\r\n        expected.append(\" Salary: \");\r\n        expected.append(nf.format(args[2]));\r\n        assertEquals(expectedPattern, emf.toPattern(), \"pattern comparison for locale \" + locale);\r\n        assertEquals(expected.toString(), emf.format(args), String.valueOf(locale));\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\ExtendedMessageFormatTest.java",
  "methodName" : "testExtendedFormats",
  "sourceCode" : "/**\r\n * Test extended formats.\r\n */\r\n@Test\r\nvoid testExtendedFormats() {\r\n    final String pattern = \"Lower: {0,lower} Upper: {1,upper}\";\r\n    final ExtendedMessageFormat emf = new ExtendedMessageFormat(pattern, registry);\r\n    assertEquals(pattern, emf.toPattern(), \"TOPATTERN\");\r\n    assertEquals(\"Lower: foo Upper: BAR\", emf.format(new Object[] { \"foo\", \"bar\" }));\r\n    assertEquals(\"Lower: foo Upper: BAR\", emf.format(new Object[] { \"Foo\", \"Bar\" }));\r\n    assertEquals(\"Lower: foo Upper: BAR\", emf.format(new Object[] { \"FOO\", \"BAR\" }));\r\n    assertEquals(\"Lower: foo Upper: BAR\", emf.format(new Object[] { \"FOO\", \"bar\" }));\r\n    assertEquals(\"Lower: foo Upper: BAR\", emf.format(new Object[] { \"foo\", \"BAR\" }));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\ExtendedMessageFormatTest.java",
  "methodName" : "testFailsToCreateExtendedMessageFormatTakingTwoArgumentsThrowsIllegalArgumentExceptionFive",
  "sourceCode" : "@Test\r\nvoid testFailsToCreateExtendedMessageFormatTakingTwoArgumentsThrowsIllegalArgumentExceptionFive() {\r\n    assertThrowsExactly(IllegalArgumentException.class, () -> new ExtendedMessageFormat(\"j/[_D9{0,\\\"&'+0o\", new HashMap<>()));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\ExtendedMessageFormatTest.java",
  "methodName" : "testFailsToCreateExtendedMessageFormatTakingTwoArgumentsThrowsIllegalArgumentExceptionFour",
  "sourceCode" : "@Test\r\nvoid testFailsToCreateExtendedMessageFormatTakingTwoArgumentsThrowsIllegalArgumentExceptionFour() {\r\n    assertThrowsExactly(IllegalArgumentException.class, () -> new ExtendedMessageFormat(\"RD,nXhM{}{\", new HashMap<>()));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\ExtendedMessageFormatTest.java",
  "methodName" : "testFailsToCreateExtendedMessageFormatTakingTwoArgumentsThrowsIllegalArgumentExceptionOne",
  "sourceCode" : "@Test\r\nvoid testFailsToCreateExtendedMessageFormatTakingTwoArgumentsThrowsIllegalArgumentExceptionOne() {\r\n    assertThrowsExactly(IllegalArgumentException.class, () -> new ExtendedMessageFormat(\"agdXdkR;T1{9 ^,LzXf?\", new HashMap<>()));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\ExtendedMessageFormatTest.java",
  "methodName" : "testFailsToCreateExtendedMessageFormatTakingTwoArgumentsThrowsIllegalArgumentExceptionThree",
  "sourceCode" : "@Test\r\nvoid testFailsToCreateExtendedMessageFormatTakingTwoArgumentsThrowsIllegalArgumentExceptionThree() {\r\n    assertThrowsExactly(IllegalArgumentException.class, () -> new ExtendedMessageFormat(\"9jLh_D9{ \", new HashMap<>()));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\ExtendedMessageFormatTest.java",
  "methodName" : "testFailsToCreateExtendedMessageFormatTakingTwoArgumentsThrowsIllegalArgumentExceptionTwo",
  "sourceCode" : "@Test\r\nvoid testFailsToCreateExtendedMessageFormatTakingTwoArgumentsThrowsIllegalArgumentExceptionTwo() {\r\n    assertThrowsExactly(IllegalArgumentException.class, () -> new ExtendedMessageFormat(\"a5XdkR;T1{9 ,LzXf?\", new HashMap<>()));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\ExtendedMessageFormatTest.java",
  "methodName" : "testOverriddenBuiltinFormat",
  "sourceCode" : "@Test\r\nvoid testOverriddenBuiltinFormat() {\r\n    final Calendar cal = Calendar.getInstance();\r\n    cal.set(2007, Calendar.JANUARY, 23);\r\n    final Object[] args = { cal.getTime() };\r\n    final Locale[] availableLocales = DateFormat.getAvailableLocales();\r\n    final Map<String, ? extends FormatFactory> dateRegistry = Collections.singletonMap(\"date\", OverrideShortDateFormatFactory.FACTORY);\r\n    // check the non-overridden builtins:\r\n    checkBuiltInFormat(\"1: {0,date}\", dateRegistry, args, availableLocales);\r\n    checkBuiltInFormat(\"2: {0,date,medium}\", dateRegistry, args, availableLocales);\r\n    checkBuiltInFormat(\"3: {0,date,long}\", dateRegistry, args, availableLocales);\r\n    checkBuiltInFormat(\"4: {0,date,full}\", dateRegistry, args, availableLocales);\r\n    checkBuiltInFormat(\"5: {0,date,d MMM yy}\", dateRegistry, args, availableLocales);\r\n    // check the overridden format:\r\n    for (int i = -1; i < availableLocales.length; i++) {\r\n        final Locale locale = i < 0 ? null : availableLocales[i];\r\n        final MessageFormat dateDefault = createMessageFormat(\"{0,date}\", locale);\r\n        final String pattern = \"{0,date,short}\";\r\n        final ExtendedMessageFormat dateShort = new ExtendedMessageFormat(pattern, locale, dateRegistry);\r\n        assertEquals(dateDefault.format(args), dateShort.format(args), \"overridden date,short format\");\r\n        assertEquals(pattern, dateShort.toPattern(), \"overridden date,short pattern\");\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\ExtendedMessageFormatTest.java",
  "methodName" : "testSetFormatByArgumentIndexIsUnsupported",
  "sourceCode" : "@Test\r\nvoid testSetFormatByArgumentIndexIsUnsupported() {\r\n    assertThrowsExactly(UnsupportedOperationException.class, () -> new ExtendedMessageFormat(\"\").setFormatByArgumentIndex(0, new LowerCaseFormat()));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\ExtendedMessageFormatTest.java",
  "methodName" : "testSetFormatIsUnsupported",
  "sourceCode" : "@Test\r\nvoid testSetFormatIsUnsupported() {\r\n    assertThrowsExactly(UnsupportedOperationException.class, () -> new ExtendedMessageFormat(\"\").setFormat(0, new LowerCaseFormat()));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\ExtendedMessageFormatTest.java",
  "methodName" : "testSetFormatsByArgumentIndex",
  "sourceCode" : "@Test\r\nvoid testSetFormatsByArgumentIndex() {\r\n    assertThrowsExactly(UnsupportedOperationException.class, () -> new ExtendedMessageFormat(\"\").setFormatsByArgumentIndex(new Format[] { new LowerCaseFormat(), new UpperCaseFormat() }));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\ExtendedMessageFormatTest.java",
  "methodName" : "testSetFormatsIsUnsupported",
  "sourceCode" : "@Test\r\nvoid testSetFormatsIsUnsupported() {\r\n    assertThrowsExactly(UnsupportedOperationException.class, () -> new ExtendedMessageFormat(\"\").setFormats(new Format[] { new LowerCaseFormat(), new UpperCaseFormat() }));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\FormattableUtilsTest.java",
  "methodName" : "testAlternatePadCharacter",
  "sourceCode" : "@Test\r\nvoid testAlternatePadCharacter() {\r\n    final char pad = '_';\r\n    assertEquals(\"foo\", FormattableUtils.append(\"foo\", createFormatter(), 0, -1, -1, pad).toString());\r\n    assertEquals(\"fo\", FormattableUtils.append(\"foo\", createFormatter(), 0, -1, 2, pad).toString());\r\n    assertEquals(\"_foo\", FormattableUtils.append(\"foo\", createFormatter(), 0, 4, -1, pad).toString());\r\n    assertEquals(\"___foo\", FormattableUtils.append(\"foo\", createFormatter(), 0, 6, -1, pad).toString());\r\n    assertEquals(\"_fo\", FormattableUtils.append(\"foo\", createFormatter(), 0, 3, 2, pad).toString());\r\n    assertEquals(\"___fo\", FormattableUtils.append(\"foo\", createFormatter(), 0, 5, 2, pad).toString());\r\n    assertEquals(\"foo_\", FormattableUtils.append(\"foo\", createFormatter(), LEFT_JUSTIFY, 4, -1, pad).toString());\r\n    assertEquals(\"foo___\", FormattableUtils.append(\"foo\", createFormatter(), LEFT_JUSTIFY, 6, -1, pad).toString());\r\n    assertEquals(\"fo_\", FormattableUtils.append(\"foo\", createFormatter(), LEFT_JUSTIFY, 3, 2, pad).toString());\r\n    assertEquals(\"fo___\", FormattableUtils.append(\"foo\", createFormatter(), LEFT_JUSTIFY, 5, 2, pad).toString());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\FormattableUtilsTest.java",
  "methodName" : "testAlternatePadCharAndEllipsis",
  "sourceCode" : "@Test\r\nvoid testAlternatePadCharAndEllipsis() {\r\n    assertEquals(\"foo\", FormattableUtils.append(\"foo\", createFormatter(), 0, -1, -1, '_', \"*\").toString());\r\n    assertEquals(\"f*\", FormattableUtils.append(\"foo\", createFormatter(), 0, -1, 2, '_', \"*\").toString());\r\n    assertEquals(\"_foo\", FormattableUtils.append(\"foo\", createFormatter(), 0, 4, -1, '_', \"*\").toString());\r\n    assertEquals(\"___foo\", FormattableUtils.append(\"foo\", createFormatter(), 0, 6, -1, '_', \"*\").toString());\r\n    assertEquals(\"_f*\", FormattableUtils.append(\"foo\", createFormatter(), 0, 3, 2, '_', \"*\").toString());\r\n    assertEquals(\"___f*\", FormattableUtils.append(\"foo\", createFormatter(), 0, 5, 2, '_', \"*\").toString());\r\n    assertEquals(\"foo_\", FormattableUtils.append(\"foo\", createFormatter(), LEFT_JUSTIFY, 4, -1, '_', \"*\").toString());\r\n    assertEquals(\"foo___\", FormattableUtils.append(\"foo\", createFormatter(), LEFT_JUSTIFY, 6, -1, '_', \"*\").toString());\r\n    assertEquals(\"f*_\", FormattableUtils.append(\"foo\", createFormatter(), LEFT_JUSTIFY, 3, 2, '_', \"*\").toString());\r\n    assertEquals(\"f*___\", FormattableUtils.append(\"foo\", createFormatter(), LEFT_JUSTIFY, 5, 2, '_', \"*\").toString());\r\n    assertEquals(\"foo\", FormattableUtils.append(\"foo\", createFormatter(), 0, -1, -1, '_', \"+*\").toString());\r\n    assertEquals(\"+*\", FormattableUtils.append(\"foo\", createFormatter(), 0, -1, 2, '_', \"+*\").toString());\r\n    assertEquals(\"_foo\", FormattableUtils.append(\"foo\", createFormatter(), 0, 4, -1, '_', \"+*\").toString());\r\n    assertEquals(\"___foo\", FormattableUtils.append(\"foo\", createFormatter(), 0, 6, -1, '_', \"+*\").toString());\r\n    assertEquals(\"_+*\", FormattableUtils.append(\"foo\", createFormatter(), 0, 3, 2, '_', \"+*\").toString());\r\n    assertEquals(\"___+*\", FormattableUtils.append(\"foo\", createFormatter(), 0, 5, 2, '_', \"+*\").toString());\r\n    assertEquals(\"foo_\", FormattableUtils.append(\"foo\", createFormatter(), LEFT_JUSTIFY, 4, -1, '_', \"+*\").toString());\r\n    assertEquals(\"foo___\", FormattableUtils.append(\"foo\", createFormatter(), LEFT_JUSTIFY, 6, -1, '_', \"+*\").toString());\r\n    assertEquals(\"+*_\", FormattableUtils.append(\"foo\", createFormatter(), LEFT_JUSTIFY, 3, 2, '_', \"+*\").toString());\r\n    assertEquals(\"+*___\", FormattableUtils.append(\"foo\", createFormatter(), LEFT_JUSTIFY, 5, 2, '_', \"+*\").toString());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\FormattableUtilsTest.java",
  "methodName" : "testAppendWithNullFormatterAndIntsThrowsNullPointerException",
  "sourceCode" : "@Test\r\nvoid testAppendWithNullFormatterAndIntsThrowsNullPointerException() {\r\n    assertThrowsExactly(NullPointerException.class, () -> FormattableUtils.append(\"\", null, 0, 0, 0, '}'));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\FormattableUtilsTest.java",
  "methodName" : "testDefaultAppend",
  "sourceCode" : "@Test\r\nvoid testDefaultAppend() {\r\n    assertEquals(\"foo\", FormattableUtils.append(\"foo\", createFormatter(), 0, -1, -1).toString());\r\n    assertEquals(\"fo\", FormattableUtils.append(\"foo\", createFormatter(), 0, -1, 2).toString());\r\n    assertEquals(\" foo\", FormattableUtils.append(\"foo\", createFormatter(), 0, 4, -1).toString());\r\n    assertEquals(\"   foo\", FormattableUtils.append(\"foo\", createFormatter(), 0, 6, -1).toString());\r\n    assertEquals(\" fo\", FormattableUtils.append(\"foo\", createFormatter(), 0, 3, 2).toString());\r\n    assertEquals(\"   fo\", FormattableUtils.append(\"foo\", createFormatter(), 0, 5, 2).toString());\r\n    assertEquals(\"foo \", FormattableUtils.append(\"foo\", createFormatter(), LEFT_JUSTIFY, 4, -1).toString());\r\n    assertEquals(\"foo   \", FormattableUtils.append(\"foo\", createFormatter(), LEFT_JUSTIFY, 6, -1).toString());\r\n    assertEquals(\"fo \", FormattableUtils.append(\"foo\", createFormatter(), LEFT_JUSTIFY, 3, 2).toString());\r\n    assertEquals(\"fo   \", FormattableUtils.append(\"foo\", createFormatter(), LEFT_JUSTIFY, 5, 2).toString());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\FormattableUtilsTest.java",
  "methodName" : "testEllipsis",
  "sourceCode" : "@Test\r\nvoid testEllipsis() {\r\n    assertEquals(\"foo\", FormattableUtils.append(\"foo\", createFormatter(), 0, -1, -1, \"*\").toString());\r\n    assertEquals(\"f*\", FormattableUtils.append(\"foo\", createFormatter(), 0, -1, 2, \"*\").toString());\r\n    assertEquals(\" foo\", FormattableUtils.append(\"foo\", createFormatter(), 0, 4, -1, \"*\").toString());\r\n    assertEquals(\"   foo\", FormattableUtils.append(\"foo\", createFormatter(), 0, 6, -1, \"*\").toString());\r\n    assertEquals(\" f*\", FormattableUtils.append(\"foo\", createFormatter(), 0, 3, 2, \"*\").toString());\r\n    assertEquals(\"   f*\", FormattableUtils.append(\"foo\", createFormatter(), 0, 5, 2, \"*\").toString());\r\n    assertEquals(\"foo \", FormattableUtils.append(\"foo\", createFormatter(), LEFT_JUSTIFY, 4, -1, \"*\").toString());\r\n    assertEquals(\"foo   \", FormattableUtils.append(\"foo\", createFormatter(), LEFT_JUSTIFY, 6, -1, \"*\").toString());\r\n    assertEquals(\"f* \", FormattableUtils.append(\"foo\", createFormatter(), LEFT_JUSTIFY, 3, 2, \"*\").toString());\r\n    assertEquals(\"f*   \", FormattableUtils.append(\"foo\", createFormatter(), LEFT_JUSTIFY, 5, 2, \"*\").toString());\r\n    assertEquals(\"foo\", FormattableUtils.append(\"foo\", createFormatter(), 0, -1, -1, \"+*\").toString());\r\n    assertEquals(\"+*\", FormattableUtils.append(\"foo\", createFormatter(), 0, -1, 2, \"+*\").toString());\r\n    assertEquals(\" foo\", FormattableUtils.append(\"foo\", createFormatter(), 0, 4, -1, \"+*\").toString());\r\n    assertEquals(\"   foo\", FormattableUtils.append(\"foo\", createFormatter(), 0, 6, -1, \"+*\").toString());\r\n    assertEquals(\" +*\", FormattableUtils.append(\"foo\", createFormatter(), 0, 3, 2, \"+*\").toString());\r\n    assertEquals(\"   +*\", FormattableUtils.append(\"foo\", createFormatter(), 0, 5, 2, \"+*\").toString());\r\n    assertEquals(\"foo \", FormattableUtils.append(\"foo\", createFormatter(), LEFT_JUSTIFY, 4, -1, \"+*\").toString());\r\n    assertEquals(\"foo   \", FormattableUtils.append(\"foo\", createFormatter(), LEFT_JUSTIFY, 6, -1, \"+*\").toString());\r\n    assertEquals(\"+* \", FormattableUtils.append(\"foo\", createFormatter(), LEFT_JUSTIFY, 3, 2, \"+*\").toString());\r\n    assertEquals(\"+*   \", FormattableUtils.append(\"foo\", createFormatter(), LEFT_JUSTIFY, 5, 2, \"+*\").toString());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\FormattableUtilsTest.java",
  "methodName" : "testIllegalEllipsis",
  "sourceCode" : "@Test\r\nvoid testIllegalEllipsis() {\r\n    assertThrowsExactly(IllegalArgumentException.class, () -> FormattableUtils.append(\"foo\", createFormatter(), 0, -1, 1, \"xx\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\FormattableUtilsTest.java",
  "methodName" : "testIllegalEllipsisWith7Args",
  "sourceCode" : "@Test\r\nvoid testIllegalEllipsisWith7Args() {\r\n    final String ellipsis = \"xxxx\";\r\n    final int precisionLessThanEllipsisLength = ellipsis.length() - 1;\r\n    assertThrowsExactly(IllegalArgumentException.class, () -> FormattableUtils.append(\"foo\", createFormatter(), 0, 0, precisionLessThanEllipsisLength, '}', ellipsis));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\FormattableUtilsTest.java",
  "methodName" : "testPublicConstructorExists",
  "sourceCode" : "@Test\r\nvoid testPublicConstructorExists() {\r\n    new FormattableUtils();\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\FormattableUtilsTest.java",
  "methodName" : "testSimplestFormat",
  "sourceCode" : "@Test\r\nvoid testSimplestFormat() {\r\n    final Formattable formattable = new SimplestFormattable(\"foo\");\r\n    assertEquals(\"foo\", FormattableUtils.toString(formattable));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\io\\StringSubstitutorFilterReaderTest.java",
  "methodName" : "testReadMixedBufferLengths1ToVarLenPlusNoReplace",
  "sourceCode" : "@Test\r\nvoid testReadMixedBufferLengths1ToVarLenPlusNoReplace() throws IOException {\r\n    final StringSubstitutor substitutor = new StringSubstitutor(values);\r\n    final String template = \"123456\";\r\n    assertTrue(template.length() > getMinExpressionLength(substitutor) + 1);\r\n    try (Reader reader = createReader(substitutor, template)) {\r\n        assertEquals('1', reader.read());\r\n        final char[] cbuf = new char[template.length() - 1];\r\n        reader.read(cbuf);\r\n        final String result = String.valueOf(cbuf);\r\n        assertEquals(template.substring(1), result);\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\io\\StringSubstitutorFilterReaderTest.java",
  "methodName" : "testReadMixedBufferLengthsReplace",
  "sourceCode" : "@Test\r\nvoid testReadMixedBufferLengthsReplace() throws IOException {\r\n    final String template = \"${aa}${bb}\";\r\n    final StringSubstitutor substitutor = new StringSubstitutor(values);\r\n    try (Reader reader = createReader(substitutor, template)) {\r\n        assertEquals('1', reader.read());\r\n        final char[] cbuf = new char[3];\r\n        assertEquals(0, reader.read(cbuf, 0, 0));\r\n        reader.read(cbuf);\r\n        final String result = String.valueOf(cbuf);\r\n        assertEquals(\"122\", result, () -> String.format(\"length %,d\", result.length()));\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\io\\StringSubstitutorFilterReaderTest.java",
  "methodName" : "testReadMixedBufferLengthsVarLenPlusToNoReplace",
  "sourceCode" : "@Test\r\nvoid testReadMixedBufferLengthsVarLenPlusToNoReplace() throws IOException {\r\n    final StringSubstitutor substitutor = new StringSubstitutor(values);\r\n    final String template = \"123456\";\r\n    assertTrue(template.length() > getMinExpressionLength(substitutor) + 1);\r\n    try (Reader reader = createReader(substitutor, template)) {\r\n        final int endIndex = template.length() - 1;\r\n        final char[] cbuf = new char[endIndex];\r\n        reader.read(cbuf);\r\n        final String result = String.valueOf(cbuf);\r\n        assertEquals(template.substring(0, endIndex), result);\r\n        assertEquals('6', reader.read());\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\lookup\\AbstractStringLookupTest.java",
  "methodName" : "testForwarding_substringAfter",
  "sourceCode" : "@SuppressWarnings(\"deprecation\")\r\n@Test\r\nvoid testForwarding_substringAfter() {\r\n    assertEquals(StringUtils.substringAfterLast(\"abc\", 'a'), new TestStringLookup().substringAfterLast(\"abc\", 'a'));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\lookup\\AbstractStringLookupTest.java",
  "methodName" : "testForwarding_substringAfterChar",
  "sourceCode" : "@SuppressWarnings(\"deprecation\")\r\n@Test\r\nvoid testForwarding_substringAfterChar() {\r\n    assertEquals(StringUtils.substringAfter(\"abc\", 'a'), new TestStringLookup().substringAfter(\"abc\", 'a'));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\lookup\\AbstractStringLookupTest.java",
  "methodName" : "testForwarding_substringAfterString",
  "sourceCode" : "@SuppressWarnings(\"deprecation\")\r\n@Test\r\nvoid testForwarding_substringAfterString() {\r\n    assertEquals(StringUtils.substringAfter(\"abc\", \"a\"), new TestStringLookup().substringAfter(\"abc\", \"a\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\lookup\\Base64DecoderStringLookupTest.java",
  "methodName" : "test",
  "sourceCode" : "@Test\r\nvoid test() {\r\n    Assertions.assertEquals(\"HelloWorld!\", StringLookupFactory.INSTANCE_BASE64_DECODER.apply(\"SGVsbG9Xb3JsZCE=\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\lookup\\Base64DecoderStringLookupTest.java",
  "methodName" : "testNull",
  "sourceCode" : "@Test\r\nvoid testNull() {\r\n    Assertions.assertNull(StringLookupFactory.INSTANCE_BASE64_DECODER.apply(null));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\lookup\\Base64DecoderStringLookupTest.java",
  "methodName" : "testToString",
  "sourceCode" : "@Test\r\nvoid testToString() {\r\n    // does not blow up and gives some kind of string.\r\n    Assertions.assertFalse(StringLookupFactory.INSTANCE_BASE64_DECODER.toString().isEmpty());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\lookup\\Base64EncoderStringLookupTest.java",
  "methodName" : "test",
  "sourceCode" : "@Test\r\nvoid test() {\r\n    Assertions.assertEquals(\"SGVsbG9Xb3JsZCE=\", StringLookupFactory.INSTANCE_BASE64_ENCODER.apply(\"HelloWorld!\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\lookup\\Base64EncoderStringLookupTest.java",
  "methodName" : "testNull",
  "sourceCode" : "@Test\r\nvoid testNull() {\r\n    Assertions.assertNull(StringLookupFactory.INSTANCE_BASE64_ENCODER.apply(null));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\lookup\\Base64EncoderStringLookupTest.java",
  "methodName" : "testToString",
  "sourceCode" : "@Test\r\nvoid testToString() {\r\n    // does not blow up and gives some kind of string.\r\n    Assertions.assertFalse(StringLookupFactory.INSTANCE_BASE64_ENCODER.toString().isEmpty());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\lookup\\BiFunctionStringLookupTest.java",
  "methodName" : "testBiFunctionForNestedMap",
  "sourceCode" : "@Test\r\nvoid testBiFunctionForNestedMap() {\r\n    // Build map\r\n    final String subSubKey = \"subsubkeyMap\";\r\n    final String subSubValue = \"subsubvalue\";\r\n    final Map<String, String> subSubMap = new HashMap<>();\r\n    subSubMap.put(subSubKey, subSubValue);\r\n    //\r\n    final String subKey = \"subkey\";\r\n    final String subKeyMap = \"subkeyMap\";\r\n    final String subValue = \"subvalue\";\r\n    final Map<String, Object> rootSubMap = new HashMap<>();\r\n    rootSubMap.put(subKey, subValue);\r\n    rootSubMap.put(subKeyMap, subSubMap);\r\n    //\r\n    final String rootKey = \"keyMap\";\r\n    final String rootKey2 = \"key2\";\r\n    final String rootValue2 = \"value2\";\r\n    final Map<String, Object> rootMap = new HashMap<>();\r\n    rootMap.put(rootKey, rootSubMap);\r\n    rootMap.put(rootKey2, rootValue2);\r\n    // Use map\r\n    final BiStringLookup<Map<String, Object>> stringLookup = StringLookupFactory.INSTANCE.biFunctionStringLookup(nestedMapBiFunction);\r\n    Assertions.assertEquals(rootValue2, stringLookup.lookup(rootKey2, rootMap));\r\n    Assertions.assertEquals(subValue, stringLookup.lookup(rootKey + SEPARATOR + subKey, rootMap));\r\n    Assertions.assertEquals(subSubValue, stringLookup.lookup(rootKey + SEPARATOR + subKeyMap + SEPARATOR + subSubKey, rootMap));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\lookup\\BiFunctionStringLookupTest.java",
  "methodName" : "testConcurrentHashMapNull",
  "sourceCode" : "@Test\r\nvoid testConcurrentHashMapNull() {\r\n    Assertions.assertNull(BiFunctionStringLookup.on(new ConcurrentHashMap<>()).apply(null));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\lookup\\BiFunctionStringLookupTest.java",
  "methodName" : "testHashMapNull",
  "sourceCode" : "@Test\r\nvoid testHashMapNull() {\r\n    Assertions.assertNull(BiFunctionStringLookup.on(new HashMap<>()).apply(null));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\lookup\\BiFunctionStringLookupTest.java",
  "methodName" : "testNullBiFunction",
  "sourceCode" : "@Test\r\nvoid testNullBiFunction() {\r\n    Assertions.assertNull(BiFunctionStringLookup.on((BiFunction<String, Object, Object>) null).apply(null));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\lookup\\BiFunctionStringLookupTest.java",
  "methodName" : "testOne",
  "sourceCode" : "@Test\r\nvoid testOne() {\r\n    final String key = \"key\";\r\n    final String value = \"value\";\r\n    final Map<String, String> map = new HashMap<>();\r\n    map.put(key, value);\r\n    Assertions.assertEquals(value, FunctionStringLookup.on(map).apply(key));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\lookup\\BiFunctionStringLookupTest.java",
  "methodName" : "testToString",
  "sourceCode" : "@Test\r\nvoid testToString() {\r\n    // does not blow up and gives some kind of string.\r\n    Assertions.assertFalse(BiFunctionStringLookup.on(new HashMap<>()).toString().isEmpty());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\lookup\\BiStringLookupTest.java",
  "methodName" : "testDefaultMethod",
  "sourceCode" : "@Test\r\nvoid testDefaultMethod() {\r\n    Assertions.assertEquals(\"a\", ((BiStringLookup<Object>) key -> key).lookup(\"a\", \"b\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\lookup\\ConstantStringLookupBasicTest.java",
  "methodName" : "testNull",
  "sourceCode" : "@Test\r\nvoid testNull() {\r\n    Assertions.assertNull(ConstantStringLookup.INSTANCE.apply(null));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\lookup\\ConstantStringLookupBasicTest.java",
  "methodName" : "testNullClassFetch",
  "sourceCode" : "@Test\r\nvoid testNullClassFetch() {\r\n    Assertions.assertNull(new ConstantStringLookup() {\r\n\r\n        @Override\r\n        protected Class<?> fetchClass(final String className) throws ClassNotFoundException {\r\n            return null;\r\n        }\r\n    }.apply(ConstantStringLookupBasicTest.class.getName() + \".STRING_FIXTURE\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\lookup\\ConstantStringLookupBasicTest.java",
  "methodName" : "testNullValue",
  "sourceCode" : "@Test\r\nvoid testNullValue() {\r\n    Assertions.assertEquals(NULL_STRING_FIXTURE, ConstantStringLookup.INSTANCE.apply(ConstantStringLookupBasicTest.class.getName() + \".NULL_STRING_FIXTURE\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\lookup\\ConstantStringLookupBasicTest.java",
  "methodName" : "testOne",
  "sourceCode" : "@Test\r\nvoid testOne() {\r\n    Assertions.assertEquals(STRING_FIXTURE, ConstantStringLookup.INSTANCE.apply(ConstantStringLookupBasicTest.class.getName() + \".STRING_FIXTURE\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\lookup\\ConstantStringLookupBasicTest.java",
  "methodName" : "testToString",
  "sourceCode" : "@Test\r\nvoid testToString() {\r\n    // does not blow up and gives some kind of string.\r\n    Assertions.assertFalse(ConstantStringLookup.INSTANCE.toString().isEmpty());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\lookup\\ConstantStringLookupTest.java",
  "methodName" : "testLookupCache",
  "sourceCode" : "/**\r\n * Tests accessing the cache by querying a variable twice.\r\n */\r\n@Test\r\nvoid testLookupCache() {\r\n    testLookupConstant();\r\n    testLookupConstant();\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\lookup\\ConstantStringLookupTest.java",
  "methodName" : "testLookupConstant",
  "sourceCode" : "/**\r\n * Tests resolving a valid constant.\r\n */\r\n@Test\r\nvoid testLookupConstant() {\r\n    Assertions.assertEquals(FIELD, stringLookup.apply(variable(\"FIELD\")), \"Wrong value of constant\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\lookup\\ConstantStringLookupTest.java",
  "methodName" : "testLookupInvalidSyntax",
  "sourceCode" : "/**\r\n * Tries to resolve a variable with an invalid syntax: The name does not contain a dot as a field separator.\r\n */\r\n@Test\r\nvoid testLookupInvalidSyntax() {\r\n    Assertions.assertNull(stringLookup.apply(\"InvalidVariableName\"), \"Non null return value for invalid variable name\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\lookup\\ConstantStringLookupTest.java",
  "methodName" : "testLookupNonExisting",
  "sourceCode" : "/**\r\n * Tests resolving a non existing constant. Result should be null.\r\n */\r\n@Test\r\nvoid testLookupNonExisting() {\r\n    Assertions.assertNull(stringLookup.apply(variable(\"NO_FIELD\")), \"Non null return value for non existing constant\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\lookup\\ConstantStringLookupTest.java",
  "methodName" : "testLookupNonString",
  "sourceCode" : "/**\r\n * Tests resolving a non string constant. Then looks the same variable up from the cache.\r\n */\r\n@Test\r\nvoid testLookupNonString() {\r\n    final String ref = KeyEvent.class.getName() + \".VK_ESCAPE\";\r\n    final String expected = Integer.toString(KeyEvent.VK_ESCAPE);\r\n    Assertions.assertEquals(expected, stringLookup.apply(ref), \"Wrong result of first lookup\");\r\n    Assertions.assertEquals(expected, stringLookup.apply(ref), \"Wrong result of 2nd lookup\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\lookup\\ConstantStringLookupTest.java",
  "methodName" : "testLookupNull",
  "sourceCode" : "/**\r\n * Tests looking up a null variable.\r\n */\r\n@Test\r\nvoid testLookupNull() {\r\n    Assertions.assertNull(stringLookup.apply(null), \"Non null return value for null variable\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\lookup\\ConstantStringLookupTest.java",
  "methodName" : "testLookupPrivate",
  "sourceCode" : "/**\r\n * Tests resolving a private constant. Because a private field cannot be accessed this should again yield null.\r\n */\r\n@Test\r\nvoid testLookupPrivate() {\r\n    Assertions.assertNull(stringLookup.apply(variable(\"PRIVATE_FIELD\")), \"Non null return value for non accessible field\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\lookup\\ConstantStringLookupTest.java",
  "methodName" : "testLookupUnknownClass",
  "sourceCode" : "/**\r\n * Tests resolving a field from an unknown class.\r\n */\r\n@Test\r\nvoid testLookupUnknownClass() {\r\n    Assertions.assertNull(stringLookup.apply(\"org.apache.commons.configuration.NonExistingConfig.\" + FIELD), \"Non null return value for unknown class\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\lookup\\DateStringLookupTest.java",
  "methodName" : "testBadFormat",
  "sourceCode" : "@Test\r\nvoid testBadFormat() {\r\n    assertThrows(IllegalArgumentException.class, () -> DateStringLookup.INSTANCE.apply(\"this-is-a-bad-format-dontcha-know\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\lookup\\DateStringLookupTest.java",
  "methodName" : "testDefault",
  "sourceCode" : "@Test\r\nvoid testDefault() throws ParseException {\r\n    final String formatted = DateStringLookup.INSTANCE.apply(null);\r\n    // throws ParseException\r\n    DateFormat.getInstance().parse(formatted);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\lookup\\DateStringLookupTest.java",
  "methodName" : "testFormat",
  "sourceCode" : "@Test\r\nvoid testFormat() {\r\n    final String format = \"yyyy-MM-dd\";\r\n    final String value = DateStringLookup.INSTANCE.apply(format);\r\n    // System.out.println(value);\r\n    assertNotNull(value, \"No Date\");\r\n    final SimpleDateFormat simpleDateFormat = new SimpleDateFormat(format);\r\n    final String today = simpleDateFormat.format(new Date());\r\n    assertEquals(value, today);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\lookup\\DateStringLookupTest.java",
  "methodName" : "testToString",
  "sourceCode" : "@Test\r\nvoid testToString() {\r\n    // does not blow up and gives some kind of string.\r\n    Assertions.assertFalse(DateStringLookup.INSTANCE.toString().isEmpty());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\lookup\\DefaultStringLookupTest.java",
  "methodName" : "testEnumValues",
  "sourceCode" : "@Test\r\nvoid testEnumValues() {\r\n    final Map<String, StringLookup> stringLookupMap = new HashMap<>();\r\n    StringLookupFactory.INSTANCE.addDefaultStringLookups(stringLookupMap);\r\n    // Loop through all enums\r\n    for (final DefaultStringLookup stringLookup : DefaultStringLookup.values()) {\r\n        assertSame(stringLookupMap.get(stringLookup.getKey()), stringLookupMap.get(stringLookup.getKey()));\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\lookup\\DefaultStringLookupTest.java",
  "methodName" : "testIndividualEnums",
  "sourceCode" : "@Test\r\nvoid testIndividualEnums() {\r\n    assertSame(DefaultStringLookup.BASE64_DECODER.getStringLookup(), StringLookupFactory.INSTANCE.base64DecoderStringLookup());\r\n    assertSame(DefaultStringLookup.BASE64_ENCODER.getStringLookup(), StringLookupFactory.INSTANCE.base64EncoderStringLookup());\r\n    assertSame(DefaultStringLookup.CONST.getStringLookup(), StringLookupFactory.INSTANCE.constantStringLookup());\r\n    assertSame(DefaultStringLookup.DATE.getStringLookup(), StringLookupFactory.INSTANCE.dateStringLookup());\r\n    assertSame(DefaultStringLookup.DNS.getStringLookup(), StringLookupFactory.INSTANCE.dnsStringLookup());\r\n    assertSame(DefaultStringLookup.ENVIRONMENT.getStringLookup(), StringLookupFactory.INSTANCE.environmentVariableStringLookup());\r\n    assertSame(DefaultStringLookup.FILE.getStringLookup(), StringLookupFactory.INSTANCE.fileStringLookup());\r\n    assertSame(DefaultStringLookup.JAVA.getStringLookup(), StringLookupFactory.INSTANCE.javaPlatformStringLookup());\r\n    assertSame(DefaultStringLookup.LOCAL_HOST.getStringLookup(), StringLookupFactory.INSTANCE.localHostStringLookup());\r\n    assertSame(DefaultStringLookup.PROPERTIES.getStringLookup(), StringLookupFactory.INSTANCE.propertiesStringLookup());\r\n    assertSame(DefaultStringLookup.RESOURCE_BUNDLE.getStringLookup(), StringLookupFactory.INSTANCE.resourceBundleStringLookup());\r\n    assertSame(DefaultStringLookup.SCRIPT.getStringLookup(), StringLookupFactory.INSTANCE.scriptStringLookup());\r\n    assertSame(DefaultStringLookup.SYSTEM_PROPERTIES.getStringLookup(), StringLookupFactory.INSTANCE.systemPropertyStringLookup());\r\n    assertSame(DefaultStringLookup.URL.getStringLookup(), StringLookupFactory.INSTANCE.urlStringLookup());\r\n    assertSame(DefaultStringLookup.URL_DECODER.getStringLookup(), StringLookupFactory.INSTANCE.urlDecoderStringLookup());\r\n    assertSame(DefaultStringLookup.URL_ENCODER.getStringLookup(), StringLookupFactory.INSTANCE.urlEncoderStringLookup());\r\n    assertSame(DefaultStringLookup.XML.getStringLookup(), StringLookupFactory.INSTANCE.xmlStringLookup());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\lookup\\DnsStringLookupTest.java",
  "methodName" : "testAddressFromHostAddress",
  "sourceCode" : "@Test\r\nvoid testAddressFromHostAddress() throws UnknownHostException {\r\n    final InetAddress localHost = InetAddress.getLocalHost();\r\n    Assertions.assertEquals(localHost.getHostAddress(), DnsStringLookup.INSTANCE.apply(\"address|\" + localHost.getHostAddress()));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\lookup\\DnsStringLookupTest.java",
  "methodName" : "testAddressFromHostName",
  "sourceCode" : "@Test\r\nvoid testAddressFromHostName() throws UnknownHostException {\r\n    final InetAddress localHost = InetAddress.getLocalHost();\r\n    Assertions.assertEquals(localHost.getHostAddress(), DnsStringLookup.INSTANCE.apply(\"address|\" + localHost.getHostName()));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\lookup\\DnsStringLookupTest.java",
  "methodName" : "testCanonicalNameFromHostAddress",
  "sourceCode" : "@Test\r\nvoid testCanonicalNameFromHostAddress() throws UnknownHostException {\r\n    final InetAddress localHost = InetAddress.getLocalHost();\r\n    Assertions.assertEquals(localHost.getCanonicalHostName(), DnsStringLookup.INSTANCE.apply(\"canonical-name|\" + localHost.getHostAddress()));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\lookup\\DnsStringLookupTest.java",
  "methodName" : "testCanonicalNameFromHostName",
  "sourceCode" : "@Test\r\nvoid testCanonicalNameFromHostName() throws UnknownHostException {\r\n    final InetAddress localHost = InetAddress.getLocalHost();\r\n    Assertions.assertEquals(localHost.getCanonicalHostName(), DnsStringLookup.INSTANCE.apply(\"canonical-name|\" + localHost.getHostName()));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\lookup\\DnsStringLookupTest.java",
  "methodName" : "testName",
  "sourceCode" : "@Test\r\nvoid testName() throws UnknownHostException {\r\n    final String address = InetAddress.getLocalHost().getHostAddress();\r\n    final InetAddress[] localHostAll = InetAddress.getAllByName(address);\r\n    boolean matched = false;\r\n    for (final InetAddress localHost : localHostAll) {\r\n        if (localHost.getHostName().equals(DnsStringLookup.INSTANCE.apply(\"name|\" + address + \"\"))) {\r\n            matched = true;\r\n        }\r\n    }\r\n    Assertions.assertTrue(matched);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\lookup\\DnsStringLookupTest.java",
  "methodName" : "testNull",
  "sourceCode" : "@Test\r\nvoid testNull() {\r\n    Assertions.assertNull(DnsStringLookup.INSTANCE.apply(null));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\lookup\\DnsStringLookupTest.java",
  "methodName" : "testToString",
  "sourceCode" : "@Test\r\nvoid testToString() {\r\n    // does not blow up and gives some kind of string.\r\n    Assertions.assertFalse(DnsStringLookup.INSTANCE.toString().isEmpty());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\lookup\\EnvironmentVariableStringLookupTest.java",
  "methodName" : "testNull",
  "sourceCode" : "@Test\r\nvoid testNull() {\r\n    Assertions.assertNull(StringLookupFactory.INSTANCE_ENVIRONMENT_VARIABLES.apply(null));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\lookup\\EnvironmentVariableStringLookupTest.java",
  "methodName" : "testOne",
  "sourceCode" : "@Test\r\nvoid testOne() {\r\n    if (SystemUtils.IS_OS_WINDOWS) {\r\n        final String key = \"PATH\";\r\n        Assertions.assertEquals(System.getenv(key), StringLookupFactory.INSTANCE_ENVIRONMENT_VARIABLES.apply(key));\r\n    } else if (SystemUtils.IS_OS_LINUX) {\r\n        final String key = \"USER\";\r\n        Assertions.assertEquals(System.getenv(key), StringLookupFactory.INSTANCE_ENVIRONMENT_VARIABLES.apply(key));\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\lookup\\EnvironmentVariableStringLookupTest.java",
  "methodName" : "testToString",
  "sourceCode" : "@Test\r\nvoid testToString() {\r\n    // does not blow up and gives some kind of string.\r\n    Assertions.assertFalse(StringLookupFactory.INSTANCE_ENVIRONMENT_VARIABLES.toString().isEmpty());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\lookup\\external\\CustomStringSubstitutorTest.java",
  "methodName" : "testFencedFiles",
  "sourceCode" : "@Test\r\nvoid testFencedFiles() throws IOException {\r\n    FileStringLookupTest.testFence(createStringSubstitutor());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\lookup\\external\\CustomStringSubstitutorTest.java",
  "methodName" : "testFencedProperties",
  "sourceCode" : "@Test\r\nvoid testFencedProperties() {\r\n    PropertiesStringLookupTest.testFence(createStringSubstitutor());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\lookup\\FileStringLookupTest.java",
  "methodName" : "testDefaultInstanceBadCharsetName",
  "sourceCode" : "@Test\r\nvoid testDefaultInstanceBadCharsetName() {\r\n    assertThrows(IllegalArgumentException.class, () -> FileStringLookup.INSTANCE.apply(\"BAD_CHARSET_NAME:src/test/resources/org/apache/commons/text/document.properties\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\lookup\\FileStringLookupTest.java",
  "methodName" : "testDefaultInstanceBadDocumentPath",
  "sourceCode" : "@Test\r\nvoid testDefaultInstanceBadDocumentPath() {\r\n    assertThrows(IllegalArgumentException.class, () -> FileStringLookup.INSTANCE.apply(\"BAD_CHARSET_NAME:src/test/resources/DOCUMENT_NOT_FOUND.TXT\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\lookup\\FileStringLookupTest.java",
  "methodName" : "testDefaultInstanceMissingFilePart",
  "sourceCode" : "@Test\r\nvoid testDefaultInstanceMissingFilePart() {\r\n    assertThrows(IllegalArgumentException.class, () -> FileStringLookup.INSTANCE.apply(StandardCharsets.UTF_8.name()));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\lookup\\FileStringLookupTest.java",
  "methodName" : "testDefaultInstanceNull",
  "sourceCode" : "@Test\r\nvoid testDefaultInstanceNull() {\r\n    Assertions.assertNull(FileStringLookup.INSTANCE.apply(null));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\lookup\\FileStringLookupTest.java",
  "methodName" : "testDefaultInstanceOne",
  "sourceCode" : "@Test\r\nvoid testDefaultInstanceOne() throws Exception {\r\n    final String expectedString = readDocumentFixtureString();\r\n    Assertions.assertEquals(expectedString, FileStringLookup.INSTANCE.apply(\"UTF-8:src/test/resources/org/apache/commons/text/document.properties\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\lookup\\FileStringLookupTest.java",
  "methodName" : "testDefaultInstanceToString",
  "sourceCode" : "@Test\r\nvoid testDefaultInstanceToString() {\r\n    // does not blow up and gives some kind of string.\r\n    Assertions.assertFalse(FileStringLookup.INSTANCE.toString().isEmpty());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\lookup\\FileStringLookupTest.java",
  "methodName" : "testFenceBadDirOne",
  "sourceCode" : "@Test\r\nvoid testFenceBadDirOne() throws Exception {\r\n    final FileStringLookup fileStringLookup = new FileStringLookup(Paths.get(\"dir does not exist at all\"));\r\n    assertThrows(IllegalArgumentException.class, () -> fileStringLookup.apply(\"UTF-8:src/test/resources/org/apache/commons/text/document.properties\"));\r\n    assertThrows(IllegalArgumentException.class, () -> fileStringLookup.apply(\"UTF-8:/src/test/resources/org/apache/commons/text/document.properties\"));\r\n    assertThrows(IllegalArgumentException.class, () -> fileStringLookup.apply(\"UTF-8:../src/test/resources/org/apache/commons/text/document.properties\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\lookup\\FileStringLookupTest.java",
  "methodName" : "testFenceBadDirPlusGoodOne",
  "sourceCode" : "@Test\r\nvoid testFenceBadDirPlusGoodOne() throws Exception {\r\n    final String expectedString = readDocumentFixtureString();\r\n    final FileStringLookup fileStringLookup = new FileStringLookup(Paths.get(\"dir does not exist at all\"), CURRENT_PATH);\r\n    testFence(expectedString, fileStringLookup);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\lookup\\FileStringLookupTest.java",
  "methodName" : "testFenceCurrentDirOne",
  "sourceCode" : "@Test\r\nvoid testFenceCurrentDirOne() throws Exception {\r\n    final String expectedString = readDocumentFixtureString();\r\n    final FileStringLookup fileStringLookup = new FileStringLookup(CURRENT_PATH);\r\n    testFence(expectedString, fileStringLookup);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\lookup\\FileStringLookupTest.java",
  "methodName" : "testFenceCurrentDirPlusOne",
  "sourceCode" : "@Test\r\nvoid testFenceCurrentDirPlusOne() throws Exception {\r\n    final String expectedString = readDocumentFixtureString();\r\n    final FileStringLookup fileStringLookup = new FileStringLookup(Paths.get(\"target\"), CURRENT_PATH);\r\n    testFence(expectedString, fileStringLookup);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\lookup\\FileStringLookupTest.java",
  "methodName" : "testFenceEmptyOne",
  "sourceCode" : "@Test\r\nvoid testFenceEmptyOne() throws Exception {\r\n    final String expectedString = readDocumentFixtureString();\r\n    Assertions.assertEquals(expectedString, new FileStringLookup().apply(\"UTF-8:src/test/resources/org/apache/commons/text/document.properties\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\lookup\\FileStringLookupTest.java",
  "methodName" : "testFenceNullOne",
  "sourceCode" : "@Test\r\nvoid testFenceNullOne() throws Exception {\r\n    final String expectedString = readDocumentFixtureString();\r\n    Assertions.assertEquals(expectedString, new FileStringLookup((Path[]) null).apply(\"UTF-8:src/test/resources/org/apache/commons/text/document.properties\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\lookup\\FileStringLookupTest.java",
  "methodName" : "testInterpolatorReplace",
  "sourceCode" : "@Test\r\nvoid testInterpolatorReplace() throws IOException {\r\n    final StringSubstitutor stringSubstitutor = StringSubstitutor.createInterpolator();\r\n    assertEquals(readDocumentFixtureString(), stringSubstitutor.replace(\"${file:UTF-8:\" + DOCUEMENT_PATH + \"}\"));\r\n    final InterpolatorStringLookup stringLookup = (InterpolatorStringLookup) stringSubstitutor.getStringLookup();\r\n    stringLookup.getStringLookupMap().replace(StringLookupFactory.KEY_FILE, StringLookupFactory.INSTANCE.fileStringLookup(CURRENT_PATH));\r\n    testFence(stringSubstitutor);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\lookup\\FunctionStringLookupTest.java",
  "methodName" : "testConcurrentHashMapNull",
  "sourceCode" : "@Test\r\nvoid testConcurrentHashMapNull() {\r\n    Assertions.assertNull(FunctionStringLookup.on(new ConcurrentHashMap<>()).apply(null));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\lookup\\FunctionStringLookupTest.java",
  "methodName" : "testHashMapNull",
  "sourceCode" : "@Test\r\nvoid testHashMapNull() {\r\n    Assertions.assertNull(FunctionStringLookup.on(new HashMap<>()).apply(null));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\lookup\\FunctionStringLookupTest.java",
  "methodName" : "testNullFunction",
  "sourceCode" : "@Test\r\nvoid testNullFunction() {\r\n    Assertions.assertNull(FunctionStringLookup.on((Function<String, Object>) null).apply(null));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\lookup\\FunctionStringLookupTest.java",
  "methodName" : "testOne",
  "sourceCode" : "@Test\r\nvoid testOne() {\r\n    final String key = \"key\";\r\n    final String value = \"value\";\r\n    final Map<String, String> map = new HashMap<>();\r\n    map.put(key, value);\r\n    Assertions.assertEquals(value, FunctionStringLookup.on(map).apply(key));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\lookup\\FunctionStringLookupTest.java",
  "methodName" : "testToString",
  "sourceCode" : "@Test\r\nvoid testToString() {\r\n    // does not blow up and gives some kind of string.\r\n    Assertions.assertFalse(FunctionStringLookup.on(new HashMap<>()).toString().isEmpty());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\lookup\\InetAddressStringLookupLocalHostTest.java",
  "methodName" : "testAddress",
  "sourceCode" : "@Test\r\nvoid testAddress() throws UnknownHostException {\r\n    Assertions.assertEquals(InetAddress.getLocalHost().getHostAddress(), InetAddressStringLookup.LOCAL_HOST.apply(\"address\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\lookup\\InetAddressStringLookupLocalHostTest.java",
  "methodName" : "testBadKey",
  "sourceCode" : "@Test\r\nvoid testBadKey() {\r\n    Assertions.assertThrows(IllegalArgumentException.class, () -> InetAddressStringLookup.LOCAL_HOST.apply(\"FOO\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\lookup\\InetAddressStringLookupLocalHostTest.java",
  "methodName" : "testCanonicalName",
  "sourceCode" : "@Test\r\nvoid testCanonicalName() throws UnknownHostException {\r\n    Assertions.assertEquals(InetAddress.getLocalHost().getCanonicalHostName(), InetAddressStringLookup.LOCAL_HOST.apply(\"canonical-name\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\lookup\\InetAddressStringLookupLocalHostTest.java",
  "methodName" : "testName",
  "sourceCode" : "@Test\r\nvoid testName() throws UnknownHostException {\r\n    Assertions.assertEquals(InetAddress.getLocalHost().getHostName(), InetAddressStringLookup.LOCAL_HOST.apply(\"name\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\lookup\\InetAddressStringLookupLocalHostTest.java",
  "methodName" : "testNull",
  "sourceCode" : "@Test\r\nvoid testNull() {\r\n    Assertions.assertNull(InetAddressStringLookup.LOCAL_HOST.apply(null));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\lookup\\InetAddressStringLookupLocalHostTest.java",
  "methodName" : "testToString",
  "sourceCode" : "@Test\r\nvoid testToString() {\r\n    // does not blow up and gives some kind of string.\r\n    Assertions.assertFalse(InetAddressStringLookup.LOCAL_HOST.toString().isEmpty());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\lookup\\InetAddressStringLookupLoopbackAddressTest.java",
  "methodName" : "testAddress",
  "sourceCode" : "@Test\r\nvoid testAddress() {\r\n    Assertions.assertEquals(InetAddress.getLoopbackAddress().getHostAddress(), InetAddressStringLookup.LOOPACK_ADDRESS.apply(\"address\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\lookup\\InetAddressStringLookupLoopbackAddressTest.java",
  "methodName" : "testBadKey",
  "sourceCode" : "@Test\r\nvoid testBadKey() {\r\n    Assertions.assertThrows(IllegalArgumentException.class, () -> InetAddressStringLookup.LOOPACK_ADDRESS.apply(\"FOO\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\lookup\\InetAddressStringLookupLoopbackAddressTest.java",
  "methodName" : "testCanonicalName",
  "sourceCode" : "@Test\r\nvoid testCanonicalName() {\r\n    Assertions.assertEquals(InetAddress.getLoopbackAddress().getCanonicalHostName(), InetAddressStringLookup.LOOPACK_ADDRESS.apply(\"canonical-name\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\lookup\\InetAddressStringLookupLoopbackAddressTest.java",
  "methodName" : "testName",
  "sourceCode" : "@Test\r\nvoid testName() {\r\n    Assertions.assertEquals(InetAddress.getLoopbackAddress().getHostName(), InetAddressStringLookup.LOOPACK_ADDRESS.apply(\"name\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\lookup\\InetAddressStringLookupLoopbackAddressTest.java",
  "methodName" : "testNull",
  "sourceCode" : "@Test\r\nvoid testNull() {\r\n    Assertions.assertNull(InetAddressStringLookup.LOOPACK_ADDRESS.apply(null));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\lookup\\InetAddressStringLookupLoopbackAddressTest.java",
  "methodName" : "testToString",
  "sourceCode" : "@Test\r\nvoid testToString() {\r\n    // does not blow up and gives some kind of string.\r\n    Assertions.assertFalse(InetAddressStringLookup.LOOPACK_ADDRESS.toString().isEmpty());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\lookup\\InterpolatorStringLookupTest.java",
  "methodName" : "testLookup",
  "sourceCode" : "@Test\r\nvoid testLookup() {\r\n    final Map<String, String> map = new HashMap<>();\r\n    map.put(TESTKEY, TESTVAL);\r\n    final StringLookup lookup = new InterpolatorStringLookup(StringLookupFactory.INSTANCE.mapStringLookup(map));\r\n    String value = lookup.apply(TESTKEY);\r\n    assertEquals(TESTVAL, value);\r\n    value = lookup.apply(\"ctx:\" + TESTKEY);\r\n    assertEquals(TESTVAL, value);\r\n    value = lookup.apply(\"sys:\" + TESTKEY);\r\n    assertEquals(TESTVAL, value);\r\n    value = lookup.apply(\"BadKey\");\r\n    assertNull(value);\r\n    value = lookup.apply(\"ctx:\" + TESTKEY);\r\n    assertEquals(TESTVAL, value);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\lookup\\InterpolatorStringLookupTest.java",
  "methodName" : "testLookupKeys",
  "sourceCode" : "@Test\r\nvoid testLookupKeys() {\r\n    final InterpolatorStringLookup lookup = new InterpolatorStringLookup((Map<String, Object>) null);\r\n    final Map<String, StringLookup> stringLookupMap = lookup.getStringLookupMap();\r\n    StringLookupFactoryTest.assertDefaultKeys(stringLookupMap);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\lookup\\InterpolatorStringLookupTest.java",
  "methodName" : "testLookupWithDefaultInterpolator",
  "sourceCode" : "@Test\r\nvoid testLookupWithDefaultInterpolator() {\r\n    check(new InterpolatorStringLookup());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\lookup\\InterpolatorStringLookupTest.java",
  "methodName" : "testLookupWithNullDefaultInterpolator",
  "sourceCode" : "@Test\r\nvoid testLookupWithNullDefaultInterpolator() {\r\n    check(new InterpolatorStringLookup((StringLookup) null));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\lookup\\InterpolatorStringLookupTest.java",
  "methodName" : "testNull",
  "sourceCode" : "@Test\r\nvoid testNull() {\r\n    Assertions.assertNull(InterpolatorStringLookup.INSTANCE.apply(null));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\lookup\\InterpolatorStringLookupTest.java",
  "methodName" : "testToString",
  "sourceCode" : "@Test\r\nvoid testToString() {\r\n    // does not blow up and gives some kind of string.\r\n    Assertions.assertFalse(new InterpolatorStringLookup().toString().isEmpty());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\lookup\\JavaPlatformStringLookupTest.java",
  "methodName" : "testBadKey",
  "sourceCode" : "@Test\r\nvoid testBadKey() {\r\n    assertThrows(IllegalArgumentException.class, () -> JavaPlatformStringLookup.INSTANCE.apply(\"BADKEY\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\lookup\\JavaPlatformStringLookupTest.java",
  "methodName" : "testMain",
  "sourceCode" : "@Test\r\nvoid testMain() {\r\n    JavaPlatformStringLookup.main(ArrayUtils.EMPTY_STRING_ARRAY);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\lookup\\JavaPlatformStringLookupTest.java",
  "methodName" : "testNull",
  "sourceCode" : "@Test\r\nvoid testNull() {\r\n    Assertions.assertNull(JavaPlatformStringLookup.INSTANCE.apply(null));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\lookup\\JavaPlatformStringLookupTest.java",
  "methodName" : "testToString",
  "sourceCode" : "@Test\r\nvoid testToString() {\r\n    // does not blow up and gives some kind of string.\r\n    Assertions.assertFalse(JavaPlatformStringLookup.INSTANCE.toString().isEmpty());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\lookup\\JavaPlatformStringLookupTest.java",
  "methodName" : "testVm",
  "sourceCode" : "@Test\r\nvoid testVm() {\r\n    final String key = \"vm\";\r\n    assertTrue(JavaPlatformStringLookup.INSTANCE.apply(key).contains(System.getProperty(\"java.vm.name\")));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\lookup\\NullStringLookupTest.java",
  "methodName" : "test",
  "sourceCode" : "@Test\r\nvoid test() {\r\n    Assertions.assertNull(StringLookupFactory.INSTANCE_NULL.apply(\"EverythingIsNull\"));\r\n    Assertions.assertNull(StringLookupFactory.INSTANCE_NULL.apply(null));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\lookup\\NullStringLookupTest.java",
  "methodName" : "testToString",
  "sourceCode" : "@Test\r\nvoid testToString() {\r\n    // does not blow up and gives some kind of string.\r\n    Assertions.assertFalse(StringLookupFactory.INSTANCE_NULL.toString().isEmpty());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\lookup\\PropertiesStringLookupTest.java",
  "methodName" : "testFenceOne",
  "sourceCode" : "@Test\r\nvoid testFenceOne() {\r\n    assertThrows(IllegalArgumentException.class, () -> new PropertiesStringLookup(CURRENT_PATH).apply(KEY_ROOT));\r\n    assertThrows(IllegalArgumentException.class, () -> new PropertiesStringLookup(Paths.get(\"not a dir at all\"), CURRENT_PATH).apply(KEY_ROOT));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\lookup\\PropertiesStringLookupTest.java",
  "methodName" : "testInterpolator",
  "sourceCode" : "@Test\r\nvoid testInterpolator() {\r\n    final StringSubstitutor stringSubstitutor = StringSubstitutor.createInterpolator();\r\n    assertEquals(\"Hello World!\", stringSubstitutor.replace(\"${properties:\" + KEY_RELATIVE + \"}\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\lookup\\PropertiesStringLookupTest.java",
  "methodName" : "testInterpolatorNestedColon",
  "sourceCode" : "@Test\r\nvoid testInterpolatorNestedColon() {\r\n    final StringSubstitutor stringSubstitutor = StringSubstitutor.createInterpolator();\r\n    // Need to handle \"C:\" in the sys prop user.dir.\r\n    final String replaced = stringSubstitutor.replace(\"$${properties:${sys:user.dir}/\" + KEY_RELATIVE + \"}\");\r\n    assertEquals(\"${properties:\" + System.getProperty(\"user.dir\") + \"/src/test/resources/org/apache/commons/text/document.properties::mykey}\", replaced);\r\n    assertEquals(\"Hello World!\", stringSubstitutor.replace(replaced));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\lookup\\PropertiesStringLookupTest.java",
  "methodName" : "testInterpolatorReplace",
  "sourceCode" : "@Test\r\nvoid testInterpolatorReplace() {\r\n    final StringSubstitutor stringSubstitutor = StringSubstitutor.createInterpolator();\r\n    assertEquals(\"Hello World!\", stringSubstitutor.replace(\"${properties:\" + KEY_RELATIVE + \"}\"));\r\n    final InterpolatorStringLookup stringLookup = (InterpolatorStringLookup) stringSubstitutor.getStringLookup();\r\n    stringLookup.getStringLookupMap().replace(StringLookupFactory.KEY_FILE, StringLookupFactory.INSTANCE.fileStringLookup(CURRENT_PATH));\r\n    testFence(stringSubstitutor);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\lookup\\PropertiesStringLookupTest.java",
  "methodName" : "testInterpolatorReplaceProperties",
  "sourceCode" : "@Test\r\nvoid testInterpolatorReplaceProperties() {\r\n    final StringSubstitutor stringSubstitutor = StringSubstitutor.createInterpolator();\r\n    assertEquals(\"Hello World!\", stringSubstitutor.replace(\"${properties:\" + KEY_RELATIVE + \"}\"));\r\n    final InterpolatorStringLookup stringLookup = (InterpolatorStringLookup) stringSubstitutor.getStringLookup();\r\n    stringLookup.getStringLookupMap().replace(StringLookupFactory.KEY_PROPERTIES, StringLookupFactory.INSTANCE.propertiesStringLookup(CURRENT_PATH));\r\n    assertEquals(\"Hello World!\", stringSubstitutor.replace(\"${properties:\" + KEY_RELATIVE + \"}\"));\r\n    assertThrows(IllegalArgumentException.class, () -> stringSubstitutor.replace(\"${properties:UTF-8:/foo.txt}\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\lookup\\PropertiesStringLookupTest.java",
  "methodName" : "testInterpolatorWithParameterizedKey",
  "sourceCode" : "@Test\r\nvoid testInterpolatorWithParameterizedKey() {\r\n    final Map<String, String> map = new HashMap<>();\r\n    map.put(\"KeyIsHere\", KEY);\r\n    final StringSubstitutor stringSubstitutor = new StringSubstitutor(StringLookupFactory.INSTANCE.interpolatorStringLookup(map));\r\n    final String replaced = stringSubstitutor.replace(\"$${properties:\" + PropertiesStringLookup.toPropertyKey(DOC_RELATIVE, \"${KeyIsHere}}\"));\r\n    assertEquals(\"${properties:\" + PropertiesStringLookup.toPropertyKey(DOC_RELATIVE, \"mykey}\"), replaced);\r\n    assertEquals(\"Hello World!\", stringSubstitutor.replace(replaced));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\lookup\\PropertiesStringLookupTest.java",
  "methodName" : "testInterpolatorWithParameterizedKey2",
  "sourceCode" : "@Test\r\nvoid testInterpolatorWithParameterizedKey2() {\r\n    final Map<String, String> map = new HashMap<>();\r\n    map.put(\"KeyIsHere\", KEY);\r\n    final StringSubstitutor stringSubstitutor = new StringSubstitutor(StringLookupFactory.INSTANCE.interpolatorStringLookup(map));\r\n    final String replaced = stringSubstitutor.replace(\"$${properties:${sys:user.dir}/\" + PropertiesStringLookup.toPropertyKey(DOC_RELATIVE, \"${KeyIsHere}}\"));\r\n    assertEquals(\"${properties:\" + System.getProperty(\"user.dir\") + \"/\" + PropertiesStringLookup.toPropertyKey(DOC_RELATIVE, \"mykey}\"), replaced);\r\n    assertEquals(\"Hello World!\", stringSubstitutor.replace(replaced));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\lookup\\PropertiesStringLookupTest.java",
  "methodName" : "testMissingFile",
  "sourceCode" : "@Test\r\nvoid testMissingFile() {\r\n    assertThrows(IllegalArgumentException.class, () -> PropertiesStringLookup.INSTANCE.apply(\"MissingFile\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\lookup\\PropertiesStringLookupTest.java",
  "methodName" : "testMissingFileWithKey",
  "sourceCode" : "@Test\r\nvoid testMissingFileWithKey() {\r\n    assertThrows(IllegalArgumentException.class, () -> PropertiesStringLookup.INSTANCE.apply(PropertiesStringLookup.toPropertyKey(\"MissingFile\", \"AnyKey\")));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\lookup\\PropertiesStringLookupTest.java",
  "methodName" : "testMissingKey",
  "sourceCode" : "@Test\r\nvoid testMissingKey() {\r\n    assertThrows(IllegalArgumentException.class, () -> PropertiesStringLookup.INSTANCE.apply(DOC_RELATIVE));\r\n    assertThrows(IllegalArgumentException.class, () -> new PropertiesStringLookup().apply(DOC_RELATIVE));\r\n    assertThrows(IllegalArgumentException.class, () -> new PropertiesStringLookup(NULL_PATH_ARRAY).apply(DOC_RELATIVE));\r\n    assertThrows(IllegalArgumentException.class, () -> new PropertiesStringLookup(CURRENT_PATH).apply(DOC_RELATIVE));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\lookup\\PropertiesStringLookupTest.java",
  "methodName" : "testNull",
  "sourceCode" : "@Test\r\nvoid testNull() {\r\n    Assertions.assertNull(PropertiesStringLookup.INSTANCE.apply(null));\r\n    Assertions.assertNull(new PropertiesStringLookup().apply(null));\r\n    Assertions.assertNull(new PropertiesStringLookup(NULL_PATH_ARRAY).apply(null));\r\n    Assertions.assertNull(new PropertiesStringLookup(CURRENT_PATH).apply(null));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\lookup\\PropertiesStringLookupTest.java",
  "methodName" : "testOne",
  "sourceCode" : "@Test\r\nvoid testOne() {\r\n    assertEquals(\"Hello World!\", PropertiesStringLookup.INSTANCE.apply(KEY_RELATIVE));\r\n    assertEquals(\"Hello World!\", new PropertiesStringLookup().apply(KEY_RELATIVE));\r\n    assertEquals(\"Hello World!\", new PropertiesStringLookup(NULL_PATH_ARRAY).apply(KEY_RELATIVE));\r\n    assertEquals(\"Hello World!\", new PropertiesStringLookup(CURRENT_PATH).apply(KEY_RELATIVE));\r\n    assertThrows(IllegalArgumentException.class, () -> new PropertiesStringLookup(CURRENT_PATH).apply(KEY_ROOT));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\lookup\\PropertiesStringLookupTest.java",
  "methodName" : "testToString",
  "sourceCode" : "@Test\r\nvoid testToString() {\r\n    // does not blow up and gives some kind of string.\r\n    Assertions.assertFalse(PropertiesStringLookup.INSTANCE.toString().isEmpty());\r\n    Assertions.assertFalse(new PropertiesStringLookup().toString().isEmpty());\r\n    Assertions.assertFalse(new PropertiesStringLookup(NULL_PATH_ARRAY).toString().isEmpty());\r\n    Assertions.assertFalse(new PropertiesStringLookup(CURRENT_PATH).toString().isEmpty());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\lookup\\ResourceBundleStringLookupTest.java",
  "methodName" : "testAny",
  "sourceCode" : "@Test\r\nvoid testAny() {\r\n    final String bundleName = TEST_RESOURCE_BUNDLE;\r\n    final String bundleKey = KEY;\r\n    Assertions.assertEquals(ResourceBundle.getBundle(bundleName).getString(bundleKey), ResourceBundleStringLookup.INSTANCE.apply(AbstractStringLookup.toLookupKey(bundleName, bundleKey)));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\lookup\\ResourceBundleStringLookupTest.java",
  "methodName" : "testBadKey",
  "sourceCode" : "@Test\r\nvoid testBadKey() {\r\n    final String bundleName = TEST_RESOURCE_BUNDLE;\r\n    final String bundleKey = \"bad_key\";\r\n    assertNull(new ResourceBundleStringLookup(bundleName).apply(bundleKey));\r\n    assertNull(ResourceBundleStringLookup.INSTANCE.apply(AbstractStringLookup.toLookupKey(bundleName, bundleKey)));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\lookup\\ResourceBundleStringLookupTest.java",
  "methodName" : "testBadNames",
  "sourceCode" : "@Test\r\nvoid testBadNames() {\r\n    assertNull(ResourceBundleStringLookup.INSTANCE.apply(AbstractStringLookup.toLookupKey(\"BAD_RESOURCE_BUNDLE_NAME\", \"KEY\")));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\lookup\\ResourceBundleStringLookupTest.java",
  "methodName" : "testDoubleBundle",
  "sourceCode" : "@Test\r\nvoid testDoubleBundle() {\r\n    assertThrows(IllegalArgumentException.class, () -> new ResourceBundleStringLookup(TEST_RESOURCE_BUNDLE).apply(AbstractStringLookup.toLookupKey(\"OtherBundle\", KEY)));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\lookup\\ResourceBundleStringLookupTest.java",
  "methodName" : "testExceptionGettingString",
  "sourceCode" : "@Test\r\nvoid testExceptionGettingString() {\r\n    final ResourceBundleStringLookup mockLookup = spy(ResourceBundleStringLookup.class);\r\n    when(mockLookup.getString(TEST_RESOURCE_BUNDLE, KEY)).thenThrow(ClassCastException.class);\r\n    assertThrows(IllegalArgumentException.class, () -> mockLookup.apply(AbstractStringLookup.toLookupKey(TEST_RESOURCE_BUNDLE, KEY)));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\lookup\\ResourceBundleStringLookupTest.java",
  "methodName" : "testMissingKeyInSpec",
  "sourceCode" : "@Test\r\nvoid testMissingKeyInSpec() {\r\n    assertThrows(IllegalArgumentException.class, () -> ResourceBundleStringLookup.INSTANCE.apply(TEST_RESOURCE_BUNDLE + \":\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\lookup\\ResourceBundleStringLookupTest.java",
  "methodName" : "testNull",
  "sourceCode" : "@Test\r\nvoid testNull() {\r\n    Assertions.assertNull(ResourceBundleStringLookup.INSTANCE.apply(null));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\lookup\\ResourceBundleStringLookupTest.java",
  "methodName" : "testOne",
  "sourceCode" : "@Test\r\nvoid testOne() {\r\n    Assertions.assertEquals(ResourceBundle.getBundle(TEST_RESOURCE_BUNDLE).getString(KEY), new ResourceBundleStringLookup(TEST_RESOURCE_BUNDLE).apply(KEY));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\lookup\\ResourceBundleStringLookupTest.java",
  "methodName" : "testToString",
  "sourceCode" : "@Test\r\nvoid testToString() {\r\n    // does not blow up and gives some kind of string.\r\n    Assertions.assertFalse(ResourceBundleStringLookup.INSTANCE.toString().isEmpty());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\lookup\\ScriptStringLookupTest.java",
  "methodName" : "testBadEngineName",
  "sourceCode" : "@Test\r\nvoid testBadEngineName() {\r\n    assertThrows(IllegalArgumentException.class, () -> ScriptStringLookup.INSTANCE.apply(\"BAD_ENGINE_NAME:\\\"Hello World!\\\"\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\lookup\\ScriptStringLookupTest.java",
  "methodName" : "testBadScript",
  "sourceCode" : "@Test\r\nvoid testBadScript() {\r\n    assertThrows(IllegalArgumentException.class, () -> ScriptStringLookup.INSTANCE.apply(JS_NAME + \":X\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\lookup\\ScriptStringLookupTest.java",
  "methodName" : "testNoScript",
  "sourceCode" : "@Test\r\nvoid testNoScript() {\r\n    assertThrows(IllegalArgumentException.class, () -> ScriptStringLookup.INSTANCE.apply(\"ENGINE_NAME:\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\lookup\\ScriptStringLookupTest.java",
  "methodName" : "testNull",
  "sourceCode" : "@Test\r\nvoid testNull() {\r\n    Assertions.assertNull(ScriptStringLookup.INSTANCE.apply(null));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\lookup\\ScriptStringLookupTest.java",
  "methodName" : "testOne",
  "sourceCode" : "@Test\r\nvoid testOne() {\r\n    Assertions.assertEquals(\"Hello World!\", ScriptStringLookup.INSTANCE.apply(JS_NAME + \":\\\"Hello World!\\\"\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\lookup\\ScriptStringLookupTest.java",
  "methodName" : "testSanityCheck",
  "sourceCode" : "@Test\r\nvoid testSanityCheck() {\r\n    Assertions.assertNotNull(new ScriptEngineManager().getEngineByName(JS_NAME), JS_NAME);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\lookup\\ScriptStringLookupTest.java",
  "methodName" : "testScriptMissingColon",
  "sourceCode" : "@Test\r\nvoid testScriptMissingColon() {\r\n    assertThrows(IllegalArgumentException.class, () -> ScriptStringLookup.INSTANCE.apply(\"JavaScript=\\\"test\\\"\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\lookup\\ScriptStringLookupTest.java",
  "methodName" : "testScriptUsingMultipleColons",
  "sourceCode" : "@Test\r\nvoid testScriptUsingMultipleColons() {\r\n    Assertions.assertEquals(\"It Works\", ScriptStringLookup.INSTANCE.apply(JS_NAME + \":true ? \\\"It Works\\\" : \\\"It Does Not Work\\\" \"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\lookup\\ScriptStringLookupTest.java",
  "methodName" : "testToString",
  "sourceCode" : "@Test\r\nvoid testToString() {\r\n    // does not blow up and gives some kind of string.\r\n    Assertions.assertFalse(ScriptStringLookup.INSTANCE.toString().isEmpty());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\lookup\\StringLookupFactoryTest.java",
  "methodName" : "testAddDefaultStringLookupsMap",
  "sourceCode" : "@Test\r\nvoid testAddDefaultStringLookupsMap() {\r\n    final Map<String, StringLookup> stringLookupMap = new HashMap<>();\r\n    StringLookupFactory.INSTANCE.addDefaultStringLookups(stringLookupMap);\r\n    assertDefaultKeys(stringLookupMap);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\lookup\\StringLookupFactoryTest.java",
  "methodName" : "testAddDefaultStringLookupsNull",
  "sourceCode" : "@Test\r\nvoid testAddDefaultStringLookupsNull() {\r\n    StringLookupFactory.INSTANCE.addDefaultStringLookups(null);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\lookup\\StringLookupFactoryTest.java",
  "methodName" : "testDefault",
  "sourceCode" : "/**\r\n * Tests that we return the singleton.\r\n */\r\n@Test\r\nvoid testDefault() {\r\n    final StringLookupFactory stringLookupFactory = StringLookupFactory.INSTANCE;\r\n    final Map<String, StringLookup> stringLookupMap = new HashMap<>();\r\n    stringLookupFactory.addDefaultStringLookups(stringLookupMap);\r\n    assertTrue(stringLookupMap.containsKey(\"base64\"));\r\n    assertTrue(stringLookupMap.containsKey(StringLookupFactory.KEY_BASE64_ENCODER.toLowerCase(Locale.ROOT)));\r\n    assertTrue(stringLookupMap.containsKey(StringLookupFactory.KEY_CONST.toLowerCase(Locale.ROOT)));\r\n    assertTrue(stringLookupMap.containsKey(StringLookupFactory.KEY_DATE));\r\n    assertTrue(stringLookupMap.containsKey(StringLookupFactory.KEY_ENV.toLowerCase(Locale.ROOT)));\r\n    assertTrue(stringLookupMap.containsKey(StringLookupFactory.KEY_FILE.toLowerCase(Locale.ROOT)));\r\n    assertTrue(stringLookupMap.containsKey(StringLookupFactory.KEY_JAVA.toLowerCase(Locale.ROOT)));\r\n    assertTrue(stringLookupMap.containsKey(StringLookupFactory.KEY_LOCALHOST.toLowerCase(Locale.ROOT)));\r\n    assertTrue(stringLookupMap.containsKey(StringLookupFactory.KEY_LOOPBACK_ADDRESS.toLowerCase(Locale.ROOT)));\r\n    assertTrue(stringLookupMap.containsKey(StringLookupFactory.KEY_PROPERTIES.toLowerCase(Locale.ROOT)));\r\n    assertTrue(stringLookupMap.containsKey(StringLookupFactory.KEY_RESOURCE_BUNDLE.toLowerCase(Locale.ROOT)));\r\n    assertTrue(stringLookupMap.containsKey(StringLookupFactory.KEY_SYS.toLowerCase(Locale.ROOT)));\r\n    assertTrue(stringLookupMap.containsKey(StringLookupFactory.KEY_URL_DECODER.toLowerCase(Locale.ROOT)));\r\n    assertTrue(stringLookupMap.containsKey(StringLookupFactory.KEY_URL_ENCODER.toLowerCase(Locale.ROOT)));\r\n    assertTrue(stringLookupMap.containsKey(StringLookupFactory.KEY_XML.toLowerCase(Locale.ROOT)));\r\n    assertTrue(stringLookupMap.containsKey(StringLookupFactory.KEY_XML_DECODER.toLowerCase(Locale.ROOT)));\r\n    assertTrue(stringLookupMap.containsKey(StringLookupFactory.KEY_XML_ENCODER.toLowerCase(Locale.ROOT)));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\lookup\\StringLookupFactoryTest.java",
  "methodName" : "testDefaultStringLookupsHolder_allLookups",
  "sourceCode" : "@Test\r\nvoid testDefaultStringLookupsHolder_allLookups() {\r\n    final Properties props = new Properties();\r\n    props.setProperty(StringLookupFactory.DEFAULT_STRING_LOOKUPS_PROPERTY, \"BASE64_DECODER BASE64_ENCODER const, date, dns, environment \" + \"file ,java, local_host properties, resource_bundle,script,system_properties \" + \"url url_decoder  , url_encoder, xml\");\r\n    checkDefaultStringLookupsHolder(props, \"base64\", StringLookupFactory.KEY_BASE64_DECODER, StringLookupFactory.KEY_BASE64_ENCODER, StringLookupFactory.KEY_CONST, StringLookupFactory.KEY_DATE, StringLookupFactory.KEY_ENV, StringLookupFactory.KEY_FILE, StringLookupFactory.KEY_JAVA, StringLookupFactory.KEY_LOCALHOST, StringLookupFactory.KEY_LOOPBACK_ADDRESS, StringLookupFactory.KEY_PROPERTIES, StringLookupFactory.KEY_RESOURCE_BUNDLE, StringLookupFactory.KEY_SYS, StringLookupFactory.KEY_URL_DECODER, StringLookupFactory.KEY_URL_ENCODER, StringLookupFactory.KEY_XML, StringLookupFactory.KEY_DNS, StringLookupFactory.KEY_URL, StringLookupFactory.KEY_SCRIPT);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\lookup\\StringLookupFactoryTest.java",
  "methodName" : "testDefaultStringLookupsHolder_givenSingleLookup",
  "sourceCode" : "@Test\r\nvoid testDefaultStringLookupsHolder_givenSingleLookup() {\r\n    final Properties props = new Properties();\r\n    props.setProperty(StringLookupFactory.DEFAULT_STRING_LOOKUPS_PROPERTY, \"base64_encoder\");\r\n    checkDefaultStringLookupsHolder(props, \"base64\", StringLookupFactory.KEY_BASE64_ENCODER);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\lookup\\StringLookupFactoryTest.java",
  "methodName" : "testDefaultStringLookupsHolder_givenSingleLookup_weirdString",
  "sourceCode" : "@Test\r\nvoid testDefaultStringLookupsHolder_givenSingleLookup_weirdString() {\r\n    final Properties props = new Properties();\r\n    props.setProperty(StringLookupFactory.DEFAULT_STRING_LOOKUPS_PROPERTY, \" \\n \\t  ,, DnS , , \");\r\n    checkDefaultStringLookupsHolder(props, StringLookupFactory.KEY_DNS);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\lookup\\StringLookupFactoryTest.java",
  "methodName" : "testDefaultStringLookupsHolder_invalidLookupsDefinition",
  "sourceCode" : "@Test\r\nvoid testDefaultStringLookupsHolder_invalidLookupsDefinition() {\r\n    final Properties props = new Properties();\r\n    props.setProperty(StringLookupFactory.DEFAULT_STRING_LOOKUPS_PROPERTY, \"base64_encoder nope\");\r\n    final Exception exc = assertThrows(IllegalArgumentException.class, () -> new StringLookupFactory.DefaultStringLookupsHolder(props));\r\n    assertEquals(\"Invalid default string lookups definition: base64_encoder nope\", exc.getMessage());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\lookup\\StringLookupFactoryTest.java",
  "methodName" : "testDefaultStringLookupsHolder_lookupsPropertyEmptyAndBlank",
  "sourceCode" : "@Test\r\nvoid testDefaultStringLookupsHolder_lookupsPropertyEmptyAndBlank() {\r\n    final Properties propsWithNull = new Properties();\r\n    propsWithNull.setProperty(StringLookupFactory.DEFAULT_STRING_LOOKUPS_PROPERTY, \"\");\r\n    checkDefaultStringLookupsHolder(propsWithNull);\r\n    final Properties propsWithBlank = new Properties();\r\n    propsWithBlank.setProperty(StringLookupFactory.DEFAULT_STRING_LOOKUPS_PROPERTY, \" \");\r\n    checkDefaultStringLookupsHolder(propsWithBlank);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\lookup\\StringLookupFactoryTest.java",
  "methodName" : "testDefaultStringLookupsHolder_lookupsPropertyNotPresent",
  "sourceCode" : "@Test\r\nvoid testDefaultStringLookupsHolder_lookupsPropertyNotPresent() {\r\n    checkDefaultStringLookupsHolder(new Properties(), \"base64\", StringLookupFactory.KEY_BASE64_DECODER, StringLookupFactory.KEY_BASE64_ENCODER, StringLookupFactory.KEY_CONST, StringLookupFactory.KEY_DATE, StringLookupFactory.KEY_ENV, StringLookupFactory.KEY_FILE, StringLookupFactory.KEY_JAVA, StringLookupFactory.KEY_LOCALHOST, StringLookupFactory.KEY_LOOPBACK_ADDRESS, StringLookupFactory.KEY_PROPERTIES, StringLookupFactory.KEY_RESOURCE_BUNDLE, StringLookupFactory.KEY_SYS, StringLookupFactory.KEY_URL_DECODER, StringLookupFactory.KEY_URL_ENCODER, StringLookupFactory.KEY_XML, StringLookupFactory.KEY_XML_DECODER, StringLookupFactory.KEY_XML_ENCODER);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\lookup\\StringLookupFactoryTest.java",
  "methodName" : "testDefaultStringLookupsHolder_multipleLookups",
  "sourceCode" : "@Test\r\nvoid testDefaultStringLookupsHolder_multipleLookups() {\r\n    final Properties props = new Properties();\r\n    props.setProperty(StringLookupFactory.DEFAULT_STRING_LOOKUPS_PROPERTY, \"dns, url script \");\r\n    checkDefaultStringLookupsHolder(props, StringLookupFactory.KEY_DNS, StringLookupFactory.KEY_URL, StringLookupFactory.KEY_SCRIPT);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\lookup\\StringLookupFactoryTest.java",
  "methodName" : "testSingletons",
  "sourceCode" : "/**\r\n * Tests that we return the singleton.\r\n */\r\n@Test\r\nvoid testSingletons() {\r\n    final StringLookupFactory stringLookupFactory = StringLookupFactory.INSTANCE;\r\n    assertSame(StringLookupFactory.INSTANCE_BASE64_DECODER, stringLookupFactory.base64DecoderStringLookup());\r\n    assertSame(StringLookupFactory.INSTANCE_BASE64_ENCODER, stringLookupFactory.base64EncoderStringLookup());\r\n    assertSame(ConstantStringLookup.INSTANCE, stringLookupFactory.constantStringLookup());\r\n    assertSame(DateStringLookup.INSTANCE, stringLookupFactory.dateStringLookup());\r\n    assertSame(DnsStringLookup.INSTANCE, stringLookupFactory.dnsStringLookup());\r\n    assertSame(StringLookupFactory.INSTANCE_ENVIRONMENT_VARIABLES, stringLookupFactory.environmentVariableStringLookup());\r\n    assertSame(InterpolatorStringLookup.INSTANCE, stringLookupFactory.interpolatorStringLookup());\r\n    assertSame(JavaPlatformStringLookup.INSTANCE, stringLookupFactory.javaPlatformStringLookup());\r\n    assertSame(InetAddressStringLookup.LOCAL_HOST, stringLookupFactory.localHostStringLookup());\r\n    assertSame(InetAddressStringLookup.LOOPACK_ADDRESS, stringLookupFactory.loopbackAddressStringLookup());\r\n    assertSame(StringLookupFactory.INSTANCE_NULL, stringLookupFactory.nullStringLookup());\r\n    assertSame(ResourceBundleStringLookup.INSTANCE, stringLookupFactory.resourceBundleStringLookup());\r\n    assertSame(ScriptStringLookup.INSTANCE, stringLookupFactory.scriptStringLookup());\r\n    assertSame(StringLookupFactory.INSTANCE_SYSTEM_PROPERTIES, stringLookupFactory.systemPropertyStringLookup());\r\n    assertSame(UrlDecoderStringLookup.INSTANCE, stringLookupFactory.urlDecoderStringLookup());\r\n    assertSame(UrlEncoderStringLookup.INSTANCE, stringLookupFactory.urlEncoderStringLookup());\r\n    assertSame(UrlStringLookup.INSTANCE, stringLookupFactory.urlStringLookup());\r\n    assertSame(XmlStringLookup.INSTANCE, stringLookupFactory.xmlStringLookup());\r\n    assertSame(XmlDecoderStringLookup.INSTANCE, stringLookupFactory.xmlDecoderStringLookup());\r\n    assertSame(XmlEncoderStringLookup.INSTANCE, stringLookupFactory.xmlEncoderStringLookup());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\lookup\\StringLookupFactoryTest.java",
  "methodName" : "testXmlStringLookup",
  "sourceCode" : "@Test\r\nvoid testXmlStringLookup() {\r\n    final StringLookupFactory stringLookupFactory = StringLookupFactory.INSTANCE;\r\n    final HashMap<String, Boolean> features = new HashMap<>(1);\r\n    features.put(XMLConstants.FEATURE_SECURE_PROCESSING, Boolean.TRUE);\r\n    XmlStringLookupTest.assertLookup(stringLookupFactory.xmlStringLookup(features));\r\n    XmlStringLookupTest.assertLookup(stringLookupFactory.xmlStringLookup(new HashMap<>()));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\lookup\\SystemPropertyStringLookupTest.java",
  "methodName" : "testNull",
  "sourceCode" : "@Test\r\nvoid testNull() {\r\n    Assertions.assertNull(StringLookupFactory.INSTANCE_SYSTEM_PROPERTIES.apply(null));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\lookup\\SystemPropertyStringLookupTest.java",
  "methodName" : "testToString",
  "sourceCode" : "@Test\r\nvoid testToString() {\r\n    // does not blow up and gives some kind of string.\r\n    Assertions.assertFalse(StringLookupFactory.INSTANCE_SYSTEM_PROPERTIES.toString().isEmpty());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\lookup\\SystemPropertyStringLookupTest.java",
  "methodName" : "testUserName",
  "sourceCode" : "@Test\r\nvoid testUserName() {\r\n    final String key = \"user.name\";\r\n    Assertions.assertEquals(System.getProperty(key), StringLookupFactory.INSTANCE_SYSTEM_PROPERTIES.apply(key));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\lookup\\UrlDecoderStringLookupTest.java",
  "methodName" : "testAllPercent",
  "sourceCode" : "@Test\r\nvoid testAllPercent() {\r\n    Assertions.assertEquals(DATA, UrlDecoderStringLookup.INSTANCE.apply(\"Hello%20World%21\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\lookup\\UrlDecoderStringLookupTest.java",
  "methodName" : "testExceptionGettingString",
  "sourceCode" : "@Test\r\nvoid testExceptionGettingString() throws UnsupportedEncodingException {\r\n    final UrlDecoderStringLookup mockLookup = spy(UrlDecoderStringLookup.class);\r\n    when(mockLookup.decode(DATA, StandardCharsets.UTF_8.displayName())).thenThrow(UnsupportedEncodingException.class);\r\n    assertThrows(IllegalArgumentException.class, () -> mockLookup.apply(DATA));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\lookup\\UrlDecoderStringLookupTest.java",
  "methodName" : "testExclamation",
  "sourceCode" : "@Test\r\nvoid testExclamation() {\r\n    Assertions.assertEquals(DATA, UrlDecoderStringLookup.INSTANCE.apply(\"Hello%20World!\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\lookup\\UrlDecoderStringLookupTest.java",
  "methodName" : "testNull",
  "sourceCode" : "@Test\r\nvoid testNull() {\r\n    Assertions.assertNull(UrlDecoderStringLookup.INSTANCE.apply(null));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\lookup\\UrlDecoderStringLookupTest.java",
  "methodName" : "testPlus",
  "sourceCode" : "@Test\r\nvoid testPlus() {\r\n    Assertions.assertEquals(DATA, UrlDecoderStringLookup.INSTANCE.apply(\"Hello+World!\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\lookup\\UrlDecoderStringLookupTest.java",
  "methodName" : "testToString",
  "sourceCode" : "@Test\r\nvoid testToString() {\r\n    // does not blow up and gives some kind of string.\r\n    Assertions.assertFalse(UrlDecoderStringLookup.INSTANCE.toString().isEmpty());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\lookup\\UrlEncoderStringLookupTest.java",
  "methodName" : "test",
  "sourceCode" : "@Test\r\nvoid test() {\r\n    Assertions.assertEquals(DATA, UrlEncoderStringLookup.INSTANCE.apply(\"Hello World!\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\lookup\\UrlEncoderStringLookupTest.java",
  "methodName" : "testExceptionGettingString",
  "sourceCode" : "@Test\r\nvoid testExceptionGettingString() throws UnsupportedEncodingException {\r\n    final UrlEncoderStringLookup mockLookup = spy(UrlEncoderStringLookup.class);\r\n    when(mockLookup.encode(DATA, StandardCharsets.UTF_8.displayName())).thenThrow(UnsupportedEncodingException.class);\r\n    assertThrows(IllegalArgumentException.class, () -> mockLookup.apply(DATA));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\lookup\\UrlEncoderStringLookupTest.java",
  "methodName" : "testNull",
  "sourceCode" : "@Test\r\nvoid testNull() {\r\n    Assertions.assertNull(UrlEncoderStringLookup.INSTANCE.apply(null));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\lookup\\UrlEncoderStringLookupTest.java",
  "methodName" : "testToString",
  "sourceCode" : "@Test\r\nvoid testToString() {\r\n    // does not blow up and gives some kind of string.\r\n    Assertions.assertFalse(UrlEncoderStringLookup.INSTANCE.toString().isEmpty());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\lookup\\UrlStringLookupTest.java",
  "methodName" : "testBadCharsetName",
  "sourceCode" : "@Test\r\nvoid testBadCharsetName() {\r\n    assertThrows(IllegalArgumentException.class, () -> UrlStringLookup.INSTANCE.apply(\"BAD_CHARSET_NAME:BAD_URL\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\lookup\\UrlStringLookupTest.java",
  "methodName" : "testBadEncoding",
  "sourceCode" : "@Test\r\nvoid testBadEncoding() {\r\n    assertThrows(IllegalArgumentException.class, () -> UrlStringLookup.INSTANCE.apply(\"FOO:https://www.google.com\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\lookup\\UrlStringLookupTest.java",
  "methodName" : "testBadUrl",
  "sourceCode" : "@Test\r\nvoid testBadUrl() {\r\n    assertThrows(IllegalArgumentException.class, () -> UrlStringLookup.INSTANCE.apply(\"UTF-8:BAD_URL\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\lookup\\UrlStringLookupTest.java",
  "methodName" : "testFileScheme",
  "sourceCode" : "@Test\r\nvoid testFileScheme() throws Exception {\r\n    final Path path = Paths.get(\"src/test/resources/org/apache/commons/text/document.properties\");\r\n    final URI uri = path.toUri();\r\n    // System.out.println(uri);\r\n    final byte[] expectedBytes = Files.readAllBytes(path);\r\n    final String expectedString = new String(expectedBytes, StandardCharsets.UTF_8);\r\n    Assertions.assertEquals(expectedString, UrlStringLookup.INSTANCE.apply(\"UTF-8:\" + uri.toString()));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\lookup\\UrlStringLookupTest.java",
  "methodName" : "testHttpScheme",
  "sourceCode" : "@Test\r\nvoid testHttpScheme() {\r\n    Assertions.assertNotNull(UrlStringLookup.INSTANCE.apply(\"UTF-8:https://www.apache.org\"));\r\n    Assertions.assertNotNull(UrlStringLookup.INSTANCE.apply(\"UTF-8:https://www.google.com\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\lookup\\UrlStringLookupTest.java",
  "methodName" : "testMissingUrl",
  "sourceCode" : "@Test\r\nvoid testMissingUrl() {\r\n    assertThrows(IllegalArgumentException.class, () -> UrlStringLookup.INSTANCE.apply(\"UTF-8\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\lookup\\UrlStringLookupTest.java",
  "methodName" : "testNull",
  "sourceCode" : "@Test\r\nvoid testNull() {\r\n    Assertions.assertNull(UrlStringLookup.INSTANCE.apply(null));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\lookup\\UrlStringLookupTest.java",
  "methodName" : "testToString",
  "sourceCode" : "@Test\r\nvoid testToString() {\r\n    // does not blow up and gives some kind of string.\r\n    Assertions.assertFalse(UrlStringLookup.INSTANCE.toString().isEmpty());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\lookup\\XmlDecoderStringLookupTest.java",
  "methodName" : "testDecode",
  "sourceCode" : "@Test\r\nvoid testDecode() {\r\n    Assertions.assertEquals(DATA, XmlDecoderStringLookup.INSTANCE.apply(\"&lt;element&gt;\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\lookup\\XmlDecoderStringLookupTest.java",
  "methodName" : "testNull",
  "sourceCode" : "@Test\r\nvoid testNull() {\r\n    Assertions.assertNull(XmlDecoderStringLookup.INSTANCE.apply(null));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\lookup\\XmlDecoderStringLookupTest.java",
  "methodName" : "testToString",
  "sourceCode" : "@Test\r\nvoid testToString() {\r\n    // does not blow up and gives some kind of string.\r\n    Assertions.assertFalse(XmlDecoderStringLookup.INSTANCE.toString().isEmpty());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\lookup\\XmlEncoderStringLookupTest.java",
  "methodName" : "testDecode",
  "sourceCode" : "@Test\r\nvoid testDecode() {\r\n    Assertions.assertEquals(DATA, XmlEncoderStringLookup.INSTANCE.apply(\"<element>\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\lookup\\XmlEncoderStringLookupTest.java",
  "methodName" : "testNull",
  "sourceCode" : "@Test\r\nvoid testNull() {\r\n    Assertions.assertNull(XmlEncoderStringLookup.INSTANCE.apply(null));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\lookup\\XmlEncoderStringLookupTest.java",
  "methodName" : "testToString",
  "sourceCode" : "@Test\r\nvoid testToString() {\r\n    // does not blow up and gives some kind of string.\r\n    Assertions.assertFalse(XmlEncoderStringLookup.INSTANCE.toString().isEmpty());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\lookup\\XmlStringLookupTest.java",
  "methodName" : "testBadXPath",
  "sourceCode" : "@Test\r\nvoid testBadXPath() {\r\n    assertThrows(IllegalArgumentException.class, () -> XmlStringLookup.INSTANCE.apply(\"docName\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\lookup\\XmlStringLookupTest.java",
  "methodName" : "testMissingXPath",
  "sourceCode" : "@Test\r\nvoid testMissingXPath() {\r\n    assertThrows(IllegalArgumentException.class, () -> XmlStringLookup.INSTANCE.apply(DOC_RELATIVE + \":!JUNK!\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\lookup\\XmlStringLookupTest.java",
  "methodName" : "testNoFeatures",
  "sourceCode" : "@Test\r\nvoid testNoFeatures() {\r\n    final String xpath = \"/root/path/to/node\";\r\n    assertEquals(\"Hello World!\", new XmlStringLookup(new HashMap<>()).apply(DOC_RELATIVE + \":\" + xpath));\r\n    assertEquals(\"Hello World!\", new XmlStringLookup(new HashMap<>(), CURRENT_PATH).apply(DOC_RELATIVE + \":\" + xpath));\r\n    assertEquals(\"Hello World!\", new XmlStringLookup(new HashMap<>(), CURRENT_PATH, ABSENT_PATH).apply(DOC_RELATIVE + \":\" + xpath));\r\n    assertEquals(\"Hello World!\", new XmlStringLookup(new HashMap<>(), ABSENT_PATH, CURRENT_PATH).apply(DOC_RELATIVE + \":\" + xpath));\r\n    assertThrows(IllegalArgumentException.class, () -> new XmlStringLookup(new HashMap<>(), ABSENT_PATH).apply(DOC_ROOT + \":\" + xpath));\r\n    assertThrows(IllegalArgumentException.class, () -> new XmlStringLookup(new HashMap<>(), CURRENT_PATH).apply(DOC_ROOT + \":\" + xpath));\r\n    assertThrows(IllegalArgumentException.class, () -> new XmlStringLookup(new HashMap<>(), ABSENT_PATH, CURRENT_PATH).apply(DOC_ROOT + \":\" + xpath));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\lookup\\XmlStringLookupTest.java",
  "methodName" : "testNoFeaturesDefault",
  "sourceCode" : "@Test\r\nvoid testNoFeaturesDefault() {\r\n    final HashMap<String, Boolean> features = new HashMap<>(1);\r\n    features.put(XMLConstants.FEATURE_SECURE_PROCESSING, Boolean.TRUE);\r\n    assertLookup(new XmlStringLookup(features));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\lookup\\XmlStringLookupTest.java",
  "methodName" : "testNull",
  "sourceCode" : "@Test\r\nvoid testNull() {\r\n    assertNull(XmlStringLookup.INSTANCE.apply(null));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\lookup\\XmlStringLookupTest.java",
  "methodName" : "testOne",
  "sourceCode" : "@Test\r\nvoid testOne() {\r\n    assertLookup(XmlStringLookup.INSTANCE);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\lookup\\XmlStringLookupTest.java",
  "methodName" : "testToString",
  "sourceCode" : "@Test\r\nvoid testToString() {\r\n    // does not blow up and gives some kind of string.\r\n    assertFalse(XmlStringLookup.INSTANCE.toString().isEmpty());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\matcher\\StringMatcherFactoryTest.java",
  "methodName" : "test_andMatcher",
  "sourceCode" : "@Test\r\nvoid test_andMatcher() {\r\n    assertNotNull(StringMatcherFactory.INSTANCE.andMatcher(StringMatcherFactory.INSTANCE.charMatcher('1'), StringMatcherFactory.INSTANCE.stringMatcher(\"2\")));\r\n    assertNotNull(StringMatcherFactory.INSTANCE.andMatcher(null, StringMatcherFactory.INSTANCE.stringMatcher(\"2\")));\r\n    assertNotNull(StringMatcherFactory.INSTANCE.andMatcher(null, null));\r\n    StringMatcher andMatcher = StringMatcherFactory.INSTANCE.andMatcher();\r\n    assertNotNull(andMatcher);\r\n    assertEquals(0, andMatcher.size());\r\n    andMatcher = StringMatcherFactory.INSTANCE.andMatcher(StringMatcherFactory.INSTANCE.charMatcher('1'));\r\n    assertNotNull(andMatcher);\r\n    assertEquals(1, andMatcher.size());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\matcher\\StringMatcherFactoryTest.java",
  "methodName" : "test_charMatcher",
  "sourceCode" : "@Test\r\nvoid test_charMatcher() {\r\n    final StringMatcher charMatcher = StringMatcherFactory.INSTANCE.charMatcher('1');\r\n    assertNotNull(charMatcher);\r\n    assertNotNull(charMatcher.toString());\r\n    assertEquals(1, charMatcher.size());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\matcher\\StringMatcherFactoryTest.java",
  "methodName" : "test_charSetMatcher_char",
  "sourceCode" : "@Test\r\nvoid test_charSetMatcher_char() {\r\n    final StringMatcher charSetMatcher = StringMatcherFactory.INSTANCE.charSetMatcher('1');\r\n    assertNotNull(charSetMatcher);\r\n    assertNotNull(charSetMatcher.toString());\r\n    assertEquals(1, charSetMatcher.size());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\matcher\\StringMatcherFactoryTest.java",
  "methodName" : "test_charSetMatcher_String",
  "sourceCode" : "@Test\r\nvoid test_charSetMatcher_String() {\r\n    final StringMatcher charSetMatcher = StringMatcherFactory.INSTANCE.charSetMatcher(\"1\");\r\n    assertNotNull(charSetMatcher);\r\n    assertNotNull(charSetMatcher.toString());\r\n    assertEquals(1, charSetMatcher.size());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\matcher\\StringMatcherFactoryTest.java",
  "methodName" : "test_commaMatcher",
  "sourceCode" : "@Test\r\nvoid test_commaMatcher() {\r\n    final StringMatcher commaMatcher = StringMatcherFactory.INSTANCE.commaMatcher();\r\n    assertNotNull(commaMatcher);\r\n    assertNotNull(commaMatcher.toString());\r\n    assertEquals(1, commaMatcher.size());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\matcher\\StringMatcherFactoryTest.java",
  "methodName" : "test_doubleQuoteMatcher",
  "sourceCode" : "@Test\r\nvoid test_doubleQuoteMatcher() {\r\n    final StringMatcher doubleQuoteMatcher = StringMatcherFactory.INSTANCE.doubleQuoteMatcher();\r\n    assertNotNull(doubleQuoteMatcher);\r\n    assertNotNull(doubleQuoteMatcher.toString());\r\n    assertEquals(1, doubleQuoteMatcher.size());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\matcher\\StringMatcherFactoryTest.java",
  "methodName" : "test_noneMatcher",
  "sourceCode" : "@Test\r\nvoid test_noneMatcher() {\r\n    final StringMatcher noneMatcher = StringMatcherFactory.INSTANCE.noneMatcher();\r\n    assertNotNull(noneMatcher);\r\n    assertNotNull(noneMatcher.toString());\r\n    assertEquals(0, noneMatcher.size());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\matcher\\StringMatcherFactoryTest.java",
  "methodName" : "test_quoteMatcher",
  "sourceCode" : "@Test\r\nvoid test_quoteMatcher() {\r\n    final StringMatcher quoteMatcher = StringMatcherFactory.INSTANCE.quoteMatcher();\r\n    assertNotNull(quoteMatcher);\r\n    assertNotNull(quoteMatcher.toString());\r\n    assertEquals(1, quoteMatcher.size());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\matcher\\StringMatcherFactoryTest.java",
  "methodName" : "test_singleQuoteMatcher",
  "sourceCode" : "@Test\r\nvoid test_singleQuoteMatcher() {\r\n    final StringMatcher singleQuoteMatcher = StringMatcherFactory.INSTANCE.singleQuoteMatcher();\r\n    assertNotNull(singleQuoteMatcher);\r\n    assertNotNull(singleQuoteMatcher.toString());\r\n    assertEquals(1, singleQuoteMatcher.size());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\matcher\\StringMatcherFactoryTest.java",
  "methodName" : "test_spaceMatcher",
  "sourceCode" : "@Test\r\nvoid test_spaceMatcher() {\r\n    final StringMatcher spaceMatcher = StringMatcherFactory.INSTANCE.spaceMatcher();\r\n    assertNotNull(spaceMatcher);\r\n    assertNotNull(spaceMatcher.toString());\r\n    assertEquals(1, spaceMatcher.size());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\matcher\\StringMatcherFactoryTest.java",
  "methodName" : "test_splitMatcher",
  "sourceCode" : "@Test\r\nvoid test_splitMatcher() {\r\n    final StringMatcher splitMatcher = StringMatcherFactory.INSTANCE.splitMatcher();\r\n    assertNotNull(splitMatcher);\r\n    assertNotNull(splitMatcher.toString());\r\n    assertEquals(1, splitMatcher.size());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\matcher\\StringMatcherFactoryTest.java",
  "methodName" : "test_stringMatcher",
  "sourceCode" : "@Test\r\nvoid test_stringMatcher() {\r\n    StringMatcher stringMatcher = StringMatcherFactory.INSTANCE.stringMatcher(\"1\");\r\n    assertNotNull(stringMatcher);\r\n    assertNotNull(stringMatcher.toString());\r\n    assertEquals(1, stringMatcher.size());\r\n    //\r\n    stringMatcher = StringMatcherFactory.INSTANCE.stringMatcher();\r\n    assertNotNull(stringMatcher);\r\n    assertNotNull(stringMatcher.toString());\r\n    assertEquals(0, stringMatcher.size());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\matcher\\StringMatcherFactoryTest.java",
  "methodName" : "test_stringMatcherChars",
  "sourceCode" : "@Test\r\nvoid test_stringMatcherChars() {\r\n    StringMatcher stringMatcher = StringMatcherFactory.INSTANCE.stringMatcher('1', '2');\r\n    assertNotNull(stringMatcher);\r\n    assertNotNull(stringMatcher.toString());\r\n    assertEquals(2, stringMatcher.size());\r\n    //\r\n    stringMatcher = StringMatcherFactory.INSTANCE.stringMatcher('1');\r\n    assertNotNull(stringMatcher);\r\n    assertNotNull(stringMatcher.toString());\r\n    assertEquals(1, stringMatcher.size());\r\n    //\r\n    stringMatcher = StringMatcherFactory.INSTANCE.stringMatcher();\r\n    assertNotNull(stringMatcher);\r\n    assertNotNull(stringMatcher.toString());\r\n    assertEquals(0, stringMatcher.size());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\matcher\\StringMatcherFactoryTest.java",
  "methodName" : "test_tabMatcher",
  "sourceCode" : "@Test\r\nvoid test_tabMatcher() {\r\n    final StringMatcher charMatcher = StringMatcherFactory.INSTANCE.charMatcher('1');\r\n    assertNotNull(charMatcher);\r\n    assertNotNull(charMatcher.toString());\r\n    assertEquals(1, charMatcher.size());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\matcher\\StringMatcherFactoryTest.java",
  "methodName" : "test_trimMatcher",
  "sourceCode" : "@Test\r\nvoid test_trimMatcher() {\r\n    final StringMatcher charMatcher = StringMatcherFactory.INSTANCE.charMatcher('1');\r\n    assertNotNull(charMatcher);\r\n    assertNotNull(charMatcher.toString());\r\n    assertEquals(1, charMatcher.size());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\matcher\\StringMatcherFactoryTest.java",
  "methodName" : "testDefaultMethods",
  "sourceCode" : "@Test\r\nvoid testDefaultMethods() {\r\n    final StringMatcherDefaults stringMatcher = new StringMatcherDefaults();\r\n    assertEquals(0, stringMatcher.size());\r\n    assertEquals(2, stringMatcher.isMatch(\"1\", 0));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\matcher\\StringMatcherOnCharArrayTest.java",
  "methodName" : "testAndMatcher_char",
  "sourceCode" : "@Test\r\nvoid testAndMatcher_char() {\r\n    final StringMatcher matcher1 = StringMatcherFactory.INSTANCE.andMatcher(StringMatcherFactory.INSTANCE.charMatcher('c'), StringMatcherFactory.INSTANCE.stringMatcher(\"de\"));\r\n    assertEquals(3, matcher1.size());\r\n    checkAndMatcher_char(matcher1);\r\n    //\r\n    final StringMatcher matcher2 = StringMatcherFactory.INSTANCE.andMatcher(null, StringMatcherFactory.INSTANCE.charMatcher('c'), null, StringMatcherFactory.INSTANCE.stringMatcher(\"de\"), null);\r\n    assertEquals(3, matcher2.size());\r\n    checkAndMatcher_char(matcher2);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\matcher\\StringMatcherOnCharArrayTest.java",
  "methodName" : "testCharMatcher_char",
  "sourceCode" : "@Test\r\nvoid testCharMatcher_char() {\r\n    final StringMatcher matcher = StringMatcherFactory.INSTANCE.charMatcher('c');\r\n    assertEquals(1, matcher.size());\r\n    //\r\n    assertEquals(0, matcher.isMatch(INPUT2, 0, 0, INPUT2_LENGTH));\r\n    assertEquals(0, matcher.isMatch(INPUT2, 1, 0, INPUT2_LENGTH));\r\n    assertEquals(1, matcher.isMatch(INPUT2, 2, 0, INPUT2_LENGTH));\r\n    assertEquals(0, matcher.isMatch(INPUT2, 3, 0, INPUT2_LENGTH));\r\n    assertEquals(0, matcher.isMatch(INPUT2, 4, 0, INPUT2_LENGTH));\r\n    assertEquals(0, matcher.isMatch(INPUT2, 5, 0, INPUT2_LENGTH));\r\n    //\r\n    assertEquals(0, matcher.isMatch(INPUT2, 0));\r\n    assertEquals(0, matcher.isMatch(INPUT2, 1));\r\n    assertEquals(1, matcher.isMatch(INPUT2, 2));\r\n    assertEquals(0, matcher.isMatch(INPUT2, 3));\r\n    assertEquals(0, matcher.isMatch(INPUT2, 4));\r\n    assertEquals(0, matcher.isMatch(INPUT2, 5));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\matcher\\StringMatcherOnCharArrayTest.java",
  "methodName" : "testCharSetMatcher_charArray",
  "sourceCode" : "@Test\r\nvoid testCharSetMatcher_charArray() {\r\n    final StringMatcher matcher = StringMatcherFactory.INSTANCE.charSetMatcher(\"ace\".toCharArray());\r\n    assertEquals(1, matcher.size());\r\n    //\r\n    assertEquals(1, matcher.isMatch(INPUT2, 0, 0, INPUT2_LENGTH));\r\n    assertEquals(0, matcher.isMatch(INPUT2, 1, 0, INPUT2_LENGTH));\r\n    assertEquals(1, matcher.isMatch(INPUT2, 2, 0, INPUT2_LENGTH));\r\n    assertEquals(0, matcher.isMatch(INPUT2, 3, 0, INPUT2_LENGTH));\r\n    assertEquals(1, matcher.isMatch(INPUT2, 4, 0, INPUT2_LENGTH));\r\n    assertEquals(0, matcher.isMatch(INPUT2, 5, 0, INPUT2_LENGTH));\r\n    //\r\n    assertEquals(1, matcher.isMatch(INPUT2, 0));\r\n    assertEquals(0, matcher.isMatch(INPUT2, 1));\r\n    assertEquals(1, matcher.isMatch(INPUT2, 2));\r\n    assertEquals(0, matcher.isMatch(INPUT2, 3));\r\n    assertEquals(1, matcher.isMatch(INPUT2, 4));\r\n    assertEquals(0, matcher.isMatch(INPUT2, 5));\r\n    //\r\n    assertSame(StringMatcherFactory.INSTANCE.charSetMatcher(), StringMatcherFactory.INSTANCE.noneMatcher());\r\n    assertSame(StringMatcherFactory.INSTANCE.charSetMatcher((char[]) null), StringMatcherFactory.INSTANCE.noneMatcher());\r\n    assertInstanceOf(AbstractStringMatcher.CharMatcher.class, StringMatcherFactory.INSTANCE.charSetMatcher(\"a\".toCharArray()));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\matcher\\StringMatcherOnCharArrayTest.java",
  "methodName" : "testCharSetMatcher_String",
  "sourceCode" : "@Test\r\nvoid testCharSetMatcher_String() {\r\n    final StringMatcher matcher = StringMatcherFactory.INSTANCE.charSetMatcher(\"ace\");\r\n    assertEquals(1, matcher.size());\r\n    //\r\n    assertEquals(1, matcher.isMatch(INPUT2, 0, 0, INPUT2_LENGTH));\r\n    assertEquals(0, matcher.isMatch(INPUT2, 1, 0, INPUT2_LENGTH));\r\n    assertEquals(1, matcher.isMatch(INPUT2, 2, 0, INPUT2_LENGTH));\r\n    assertEquals(0, matcher.isMatch(INPUT2, 3, 0, INPUT2_LENGTH));\r\n    assertEquals(1, matcher.isMatch(INPUT2, 4, 0, INPUT2_LENGTH));\r\n    assertEquals(0, matcher.isMatch(INPUT2, 5, 0, INPUT2_LENGTH));\r\n    //\r\n    assertEquals(1, matcher.isMatch(INPUT2, 0));\r\n    assertEquals(0, matcher.isMatch(INPUT2, 1));\r\n    assertEquals(1, matcher.isMatch(INPUT2, 2));\r\n    assertEquals(0, matcher.isMatch(INPUT2, 3));\r\n    assertEquals(1, matcher.isMatch(INPUT2, 4));\r\n    assertEquals(0, matcher.isMatch(INPUT2, 5));\r\n    //\r\n    assertSame(StringMatcherFactory.INSTANCE.charSetMatcher(\"\"), StringMatcherFactory.INSTANCE.noneMatcher());\r\n    assertSame(StringMatcherFactory.INSTANCE.charSetMatcher((String) null), StringMatcherFactory.INSTANCE.noneMatcher());\r\n    assertInstanceOf(AbstractStringMatcher.CharMatcher.class, StringMatcherFactory.INSTANCE.charSetMatcher(\"a\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\matcher\\StringMatcherOnCharArrayTest.java",
  "methodName" : "testCommaMatcher",
  "sourceCode" : "@Test\r\nvoid testCommaMatcher() {\r\n    final StringMatcher matcher = StringMatcherFactory.INSTANCE.commaMatcher();\r\n    assertEquals(1, matcher.size());\r\n    assertSame(StringMatcherFactory.INSTANCE.commaMatcher(), matcher);\r\n    //\r\n    assertEquals(0, matcher.isMatch(INPUT1, 0, 0, INPUT1.length));\r\n    assertEquals(1, matcher.isMatch(INPUT1, 1, 0, INPUT1.length));\r\n    assertEquals(0, matcher.isMatch(INPUT1, 2, 0, INPUT1.length));\r\n    //\r\n    assertEquals(0, matcher.isMatch(INPUT1, 0));\r\n    assertEquals(1, matcher.isMatch(INPUT1, 1));\r\n    assertEquals(0, matcher.isMatch(INPUT1, 2));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\matcher\\StringMatcherOnCharArrayTest.java",
  "methodName" : "testDoubleQuoteMatcher",
  "sourceCode" : "@Test\r\nvoid testDoubleQuoteMatcher() {\r\n    final StringMatcher matcher = StringMatcherFactory.INSTANCE.doubleQuoteMatcher();\r\n    assertEquals(1, matcher.size());\r\n    assertSame(StringMatcherFactory.INSTANCE.doubleQuoteMatcher(), matcher);\r\n    //\r\n    assertEquals(0, matcher.isMatch(INPUT1, 11, 0, INPUT1.length));\r\n    assertEquals(1, matcher.isMatch(INPUT1, 12, 0, INPUT1.length));\r\n    //\r\n    assertEquals(0, matcher.isMatch(INPUT1, 11));\r\n    assertEquals(1, matcher.isMatch(INPUT1, 12));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\matcher\\StringMatcherOnCharArrayTest.java",
  "methodName" : "testMatcherIndices",
  "sourceCode" : "@Test\r\nvoid testMatcherIndices() {\r\n    // remember that the API contract is tight for the isMatch() method\r\n    // all the onus is on the caller, so invalid inputs are not\r\n    // the concern of StringMatcher, and are not bugs\r\n    final StringMatcher matcher = StringMatcherFactory.INSTANCE.stringMatcher(\"bc\");\r\n    assertEquals(2, matcher.size());\r\n    assertEquals(2, matcher.isMatch(INPUT2, 1, 1, INPUT2_LENGTH));\r\n    assertEquals(2, matcher.isMatch(INPUT2, 1, 0, 3));\r\n    assertEquals(0, matcher.isMatch(INPUT2, 1, 0, 2));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\matcher\\StringMatcherOnCharArrayTest.java",
  "methodName" : "testNoneMatcher",
  "sourceCode" : "@Test\r\nvoid testNoneMatcher() {\r\n    final StringMatcher matcher = StringMatcherFactory.INSTANCE.noneMatcher();\r\n    assertEquals(0, matcher.size());\r\n    assertSame(StringMatcherFactory.INSTANCE.noneMatcher(), matcher);\r\n    //\r\n    assertEquals(0, matcher.isMatch(INPUT1, 0, 0, INPUT1.length));\r\n    assertEquals(0, matcher.isMatch(INPUT1, 1, 0, INPUT1.length));\r\n    assertEquals(0, matcher.isMatch(INPUT1, 2, 0, INPUT1.length));\r\n    assertEquals(0, matcher.isMatch(INPUT1, 3, 0, INPUT1.length));\r\n    assertEquals(0, matcher.isMatch(INPUT1, 4, 0, INPUT1.length));\r\n    assertEquals(0, matcher.isMatch(INPUT1, 5, 0, INPUT1.length));\r\n    assertEquals(0, matcher.isMatch(INPUT1, 6, 0, INPUT1.length));\r\n    assertEquals(0, matcher.isMatch(INPUT1, 7, 0, INPUT1.length));\r\n    assertEquals(0, matcher.isMatch(INPUT1, 8, 0, INPUT1.length));\r\n    assertEquals(0, matcher.isMatch(INPUT1, 9, 0, INPUT1.length));\r\n    assertEquals(0, matcher.isMatch(INPUT1, 10, 0, INPUT1.length));\r\n    assertEquals(0, matcher.isMatch(INPUT1, 11, 0, INPUT1.length));\r\n    assertEquals(0, matcher.isMatch(INPUT1, 12, 0, INPUT1.length));\r\n    //\r\n    assertEquals(0, matcher.isMatch(INPUT1, 0));\r\n    assertEquals(0, matcher.isMatch(INPUT1, 1));\r\n    assertEquals(0, matcher.isMatch(INPUT1, 2));\r\n    assertEquals(0, matcher.isMatch(INPUT1, 3));\r\n    assertEquals(0, matcher.isMatch(INPUT1, 4));\r\n    assertEquals(0, matcher.isMatch(INPUT1, 5));\r\n    assertEquals(0, matcher.isMatch(INPUT1, 6));\r\n    assertEquals(0, matcher.isMatch(INPUT1, 7));\r\n    assertEquals(0, matcher.isMatch(INPUT1, 8));\r\n    assertEquals(0, matcher.isMatch(INPUT1, 9));\r\n    assertEquals(0, matcher.isMatch(INPUT1, 10));\r\n    assertEquals(0, matcher.isMatch(INPUT1, 11));\r\n    assertEquals(0, matcher.isMatch(INPUT1, 12));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\matcher\\StringMatcherOnCharArrayTest.java",
  "methodName" : "testQuoteMatcher",
  "sourceCode" : "@Test\r\nvoid testQuoteMatcher() {\r\n    final StringMatcher matcher = StringMatcherFactory.INSTANCE.quoteMatcher();\r\n    assertEquals(1, matcher.size());\r\n    assertSame(StringMatcherFactory.INSTANCE.quoteMatcher(), matcher);\r\n    //\r\n    assertEquals(0, matcher.isMatch(INPUT1, 10, 0, INPUT1.length));\r\n    assertEquals(1, matcher.isMatch(INPUT1, 11, 0, INPUT1.length));\r\n    assertEquals(1, matcher.isMatch(INPUT1, 12, 0, INPUT1.length));\r\n    //\r\n    assertEquals(0, matcher.isMatch(INPUT1, 10));\r\n    assertEquals(1, matcher.isMatch(INPUT1, 11));\r\n    assertEquals(1, matcher.isMatch(INPUT1, 12));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\matcher\\StringMatcherOnCharArrayTest.java",
  "methodName" : "testSingleQuoteMatcher",
  "sourceCode" : "@Test\r\nvoid testSingleQuoteMatcher() {\r\n    final StringMatcher matcher = StringMatcherFactory.INSTANCE.singleQuoteMatcher();\r\n    assertEquals(1, matcher.size());\r\n    assertSame(StringMatcherFactory.INSTANCE.singleQuoteMatcher(), matcher);\r\n    //\r\n    assertEquals(0, matcher.isMatch(INPUT1, 10, 0, INPUT1.length));\r\n    assertEquals(1, matcher.isMatch(INPUT1, 11, 0, INPUT1.length));\r\n    assertEquals(0, matcher.isMatch(INPUT1, 12, 0, INPUT1.length));\r\n    //\r\n    assertEquals(0, matcher.isMatch(INPUT1, 10));\r\n    assertEquals(1, matcher.isMatch(INPUT1, 11));\r\n    assertEquals(0, matcher.isMatch(INPUT1, 12));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\matcher\\StringMatcherOnCharArrayTest.java",
  "methodName" : "testSpaceMatcher",
  "sourceCode" : "@Test\r\nvoid testSpaceMatcher() {\r\n    final StringMatcher matcher = StringMatcherFactory.INSTANCE.spaceMatcher();\r\n    assertEquals(1, matcher.size());\r\n    assertSame(StringMatcherFactory.INSTANCE.spaceMatcher(), matcher);\r\n    //\r\n    assertEquals(0, matcher.isMatch(INPUT1, 4, 0, INPUT1.length));\r\n    assertEquals(1, matcher.isMatch(INPUT1, 5, 0, INPUT1.length));\r\n    assertEquals(0, matcher.isMatch(INPUT1, 6, 0, INPUT1.length));\r\n    //\r\n    assertEquals(0, matcher.isMatch(INPUT1, 4));\r\n    assertEquals(1, matcher.isMatch(INPUT1, 5));\r\n    assertEquals(0, matcher.isMatch(INPUT1, 6));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\matcher\\StringMatcherOnCharArrayTest.java",
  "methodName" : "testSplitMatcher",
  "sourceCode" : "@Test\r\nvoid testSplitMatcher() {\r\n    final StringMatcher matcher = StringMatcherFactory.INSTANCE.splitMatcher();\r\n    assertEquals(1, matcher.size());\r\n    assertSame(StringMatcherFactory.INSTANCE.splitMatcher(), matcher);\r\n    //\r\n    assertEquals(0, matcher.isMatch(INPUT1, 2, 0, INPUT1.length));\r\n    assertEquals(1, matcher.isMatch(INPUT1, 3, 0, INPUT1.length));\r\n    assertEquals(0, matcher.isMatch(INPUT1, 4, 0, INPUT1.length));\r\n    assertEquals(1, matcher.isMatch(INPUT1, 5, 0, INPUT1.length));\r\n    assertEquals(0, matcher.isMatch(INPUT1, 6, 0, INPUT1.length));\r\n    assertEquals(1, matcher.isMatch(INPUT1, 7, 0, INPUT1.length));\r\n    assertEquals(1, matcher.isMatch(INPUT1, 8, 0, INPUT1.length));\r\n    assertEquals(1, matcher.isMatch(INPUT1, 9, 0, INPUT1.length));\r\n    assertEquals(0, matcher.isMatch(INPUT1, 10, 0, INPUT1.length));\r\n    //\r\n    assertEquals(0, matcher.isMatch(INPUT1, 2));\r\n    assertEquals(1, matcher.isMatch(INPUT1, 3));\r\n    assertEquals(0, matcher.isMatch(INPUT1, 4));\r\n    assertEquals(1, matcher.isMatch(INPUT1, 5));\r\n    assertEquals(0, matcher.isMatch(INPUT1, 6));\r\n    assertEquals(1, matcher.isMatch(INPUT1, 7));\r\n    assertEquals(1, matcher.isMatch(INPUT1, 8));\r\n    assertEquals(1, matcher.isMatch(INPUT1, 9));\r\n    assertEquals(0, matcher.isMatch(INPUT1, 10));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\matcher\\StringMatcherOnCharArrayTest.java",
  "methodName" : "testStringMatcher_String_fromChars",
  "sourceCode" : "@Test\r\nvoid testStringMatcher_String_fromChars() {\r\n    testStringMatcher_String(StringMatcherFactory.INSTANCE.stringMatcher('b', 'c'));\r\n    testStringMatcher_String(StringMatcherFactory.INSTANCE.stringMatcher(new char[] { 'b', 'c' }));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\matcher\\StringMatcherOnCharArrayTest.java",
  "methodName" : "testStringMatcher_String_fromString",
  "sourceCode" : "@Test\r\nvoid testStringMatcher_String_fromString() {\r\n    testStringMatcher_String(StringMatcherFactory.INSTANCE.stringMatcher(\"bc\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\matcher\\StringMatcherOnCharArrayTest.java",
  "methodName" : "testTabMatcher",
  "sourceCode" : "@Test\r\nvoid testTabMatcher() {\r\n    final StringMatcher matcher = StringMatcherFactory.INSTANCE.tabMatcher();\r\n    assertEquals(1, matcher.size());\r\n    assertSame(StringMatcherFactory.INSTANCE.tabMatcher(), matcher);\r\n    //\r\n    assertEquals(0, matcher.isMatch(INPUT1, 2, 0, INPUT1.length));\r\n    assertEquals(1, matcher.isMatch(INPUT1, 3, 0, INPUT1.length));\r\n    assertEquals(0, matcher.isMatch(INPUT1, 4, 0, INPUT1.length));\r\n    //\r\n    assertEquals(0, matcher.isMatch(INPUT1, 2));\r\n    assertEquals(1, matcher.isMatch(INPUT1, 3));\r\n    assertEquals(0, matcher.isMatch(INPUT1, 4));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\matcher\\StringMatcherOnCharArrayTest.java",
  "methodName" : "testTrimMatcher",
  "sourceCode" : "@Test\r\nvoid testTrimMatcher() {\r\n    final StringMatcher matcher = StringMatcherFactory.INSTANCE.trimMatcher();\r\n    assertEquals(1, matcher.size());\r\n    assertSame(StringMatcherFactory.INSTANCE.trimMatcher(), matcher);\r\n    //\r\n    assertEquals(0, matcher.isMatch(INPUT1, 2, 0, INPUT1.length));\r\n    assertEquals(1, matcher.isMatch(INPUT1, 3, 0, INPUT1.length));\r\n    assertEquals(0, matcher.isMatch(INPUT1, 4, 0, INPUT1.length));\r\n    assertEquals(1, matcher.isMatch(INPUT1, 5, 0, INPUT1.length));\r\n    assertEquals(0, matcher.isMatch(INPUT1, 6, 0, INPUT1.length));\r\n    assertEquals(1, matcher.isMatch(INPUT1, 7, 0, INPUT1.length));\r\n    assertEquals(1, matcher.isMatch(INPUT1, 8, 0, INPUT1.length));\r\n    assertEquals(1, matcher.isMatch(INPUT1, 9, 0, INPUT1.length));\r\n    assertEquals(1, matcher.isMatch(INPUT1, 10, 0, INPUT1.length));\r\n    //\r\n    assertEquals(0, matcher.isMatch(INPUT1, 2));\r\n    assertEquals(1, matcher.isMatch(INPUT1, 3));\r\n    assertEquals(0, matcher.isMatch(INPUT1, 4));\r\n    assertEquals(1, matcher.isMatch(INPUT1, 5));\r\n    assertEquals(0, matcher.isMatch(INPUT1, 6));\r\n    assertEquals(1, matcher.isMatch(INPUT1, 7));\r\n    assertEquals(1, matcher.isMatch(INPUT1, 8));\r\n    assertEquals(1, matcher.isMatch(INPUT1, 9));\r\n    assertEquals(1, matcher.isMatch(INPUT1, 10));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\matcher\\StringMatcherOnCharSequenceStringTest.java",
  "methodName" : "testAndMatcher_char",
  "sourceCode" : "@Test\r\nvoid testAndMatcher_char() {\r\n    final StringMatcher matcher1 = StringMatcherFactory.INSTANCE.andMatcher(StringMatcherFactory.INSTANCE.charMatcher('c'), StringMatcherFactory.INSTANCE.stringMatcher(\"de\"));\r\n    assertEquals(3, matcher1.size());\r\n    checkAndMatcher_char(matcher1);\r\n    //\r\n    final StringMatcher matcher2 = StringMatcherFactory.INSTANCE.andMatcher(null, StringMatcherFactory.INSTANCE.charMatcher('c'), null, StringMatcherFactory.INSTANCE.stringMatcher(\"de\"), null);\r\n    assertEquals(3, matcher2.size());\r\n    checkAndMatcher_char(matcher2);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\matcher\\StringMatcherOnCharSequenceStringTest.java",
  "methodName" : "testCharMatcher_char",
  "sourceCode" : "@Test\r\nvoid testCharMatcher_char() {\r\n    final StringMatcher matcher = StringMatcherFactory.INSTANCE.charMatcher('c');\r\n    assertEquals(1, matcher.size());\r\n    //\r\n    assertEquals(0, matcher.isMatch(INPUT2, 0, 0, INPUT2_LENGTH));\r\n    assertEquals(0, matcher.isMatch(INPUT2, 1, 0, INPUT2_LENGTH));\r\n    assertEquals(1, matcher.isMatch(INPUT2, 2, 0, INPUT2_LENGTH));\r\n    assertEquals(0, matcher.isMatch(INPUT2, 3, 0, INPUT2_LENGTH));\r\n    assertEquals(0, matcher.isMatch(INPUT2, 4, 0, INPUT2_LENGTH));\r\n    assertEquals(0, matcher.isMatch(INPUT2, 5, 0, INPUT2_LENGTH));\r\n    //\r\n    assertEquals(0, matcher.isMatch(INPUT2, 0));\r\n    assertEquals(0, matcher.isMatch(INPUT2, 1));\r\n    assertEquals(1, matcher.isMatch(INPUT2, 2));\r\n    assertEquals(0, matcher.isMatch(INPUT2, 3));\r\n    assertEquals(0, matcher.isMatch(INPUT2, 4));\r\n    assertEquals(0, matcher.isMatch(INPUT2, 5));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\matcher\\StringMatcherOnCharSequenceStringTest.java",
  "methodName" : "testCharSetMatcher_charArray",
  "sourceCode" : "@Test\r\nvoid testCharSetMatcher_charArray() {\r\n    final StringMatcher matcher = StringMatcherFactory.INSTANCE.charSetMatcher(\"ace\".toCharArray());\r\n    assertEquals(1, matcher.size());\r\n    //\r\n    assertEquals(1, matcher.isMatch(INPUT2, 0, 0, INPUT2_LENGTH));\r\n    assertEquals(0, matcher.isMatch(INPUT2, 1, 0, INPUT2_LENGTH));\r\n    assertEquals(1, matcher.isMatch(INPUT2, 2, 0, INPUT2_LENGTH));\r\n    assertEquals(0, matcher.isMatch(INPUT2, 3, 0, INPUT2_LENGTH));\r\n    assertEquals(1, matcher.isMatch(INPUT2, 4, 0, INPUT2_LENGTH));\r\n    assertEquals(0, matcher.isMatch(INPUT2, 5, 0, INPUT2_LENGTH));\r\n    //\r\n    assertEquals(1, matcher.isMatch(INPUT2, 0));\r\n    assertEquals(0, matcher.isMatch(INPUT2, 1));\r\n    assertEquals(1, matcher.isMatch(INPUT2, 2));\r\n    assertEquals(0, matcher.isMatch(INPUT2, 3));\r\n    assertEquals(1, matcher.isMatch(INPUT2, 4));\r\n    assertEquals(0, matcher.isMatch(INPUT2, 5));\r\n    //\r\n    assertSame(StringMatcherFactory.INSTANCE.charSetMatcher(), StringMatcherFactory.INSTANCE.noneMatcher());\r\n    assertSame(StringMatcherFactory.INSTANCE.charSetMatcher((char[]) null), StringMatcherFactory.INSTANCE.noneMatcher());\r\n    assertInstanceOf(AbstractStringMatcher.CharMatcher.class, StringMatcherFactory.INSTANCE.charSetMatcher(\"a\".toCharArray()));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\matcher\\StringMatcherOnCharSequenceStringTest.java",
  "methodName" : "testCharSetMatcher_String",
  "sourceCode" : "@Test\r\nvoid testCharSetMatcher_String() {\r\n    final StringMatcher matcher = StringMatcherFactory.INSTANCE.charSetMatcher(\"ace\");\r\n    assertEquals(1, matcher.size());\r\n    //\r\n    assertEquals(1, matcher.isMatch(INPUT2, 0, 0, INPUT2_LENGTH));\r\n    assertEquals(0, matcher.isMatch(INPUT2, 1, 0, INPUT2_LENGTH));\r\n    assertEquals(1, matcher.isMatch(INPUT2, 2, 0, INPUT2_LENGTH));\r\n    assertEquals(0, matcher.isMatch(INPUT2, 3, 0, INPUT2_LENGTH));\r\n    assertEquals(1, matcher.isMatch(INPUT2, 4, 0, INPUT2_LENGTH));\r\n    assertEquals(0, matcher.isMatch(INPUT2, 5, 0, INPUT2_LENGTH));\r\n    //\r\n    assertEquals(1, matcher.isMatch(INPUT2, 0));\r\n    assertEquals(0, matcher.isMatch(INPUT2, 1));\r\n    assertEquals(1, matcher.isMatch(INPUT2, 2));\r\n    assertEquals(0, matcher.isMatch(INPUT2, 3));\r\n    assertEquals(1, matcher.isMatch(INPUT2, 4));\r\n    assertEquals(0, matcher.isMatch(INPUT2, 5));\r\n    //\r\n    assertSame(StringMatcherFactory.INSTANCE.charSetMatcher(\"\"), StringMatcherFactory.INSTANCE.noneMatcher());\r\n    assertSame(StringMatcherFactory.INSTANCE.charSetMatcher((String) null), StringMatcherFactory.INSTANCE.noneMatcher());\r\n    assertInstanceOf(AbstractStringMatcher.CharMatcher.class, StringMatcherFactory.INSTANCE.charSetMatcher(\"a\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\matcher\\StringMatcherOnCharSequenceStringTest.java",
  "methodName" : "testCommaMatcher",
  "sourceCode" : "@Test\r\nvoid testCommaMatcher() {\r\n    final StringMatcher matcher = StringMatcherFactory.INSTANCE.commaMatcher();\r\n    assertEquals(1, matcher.size());\r\n    assertSame(StringMatcherFactory.INSTANCE.commaMatcher(), matcher);\r\n    //\r\n    assertEquals(0, matcher.isMatch(INPUT1, 0, 0, INPUT1.length()));\r\n    assertEquals(1, matcher.isMatch(INPUT1, 1, 0, INPUT1.length()));\r\n    assertEquals(0, matcher.isMatch(INPUT1, 2, 0, INPUT1.length()));\r\n    //\r\n    assertEquals(0, matcher.isMatch(INPUT1, 0));\r\n    assertEquals(1, matcher.isMatch(INPUT1, 1));\r\n    assertEquals(0, matcher.isMatch(INPUT1, 2));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\matcher\\StringMatcherOnCharSequenceStringTest.java",
  "methodName" : "testDoubleQuoteMatcher",
  "sourceCode" : "@Test\r\nvoid testDoubleQuoteMatcher() {\r\n    final StringMatcher matcher = StringMatcherFactory.INSTANCE.doubleQuoteMatcher();\r\n    assertEquals(1, matcher.size());\r\n    assertSame(StringMatcherFactory.INSTANCE.doubleQuoteMatcher(), matcher);\r\n    //\r\n    assertEquals(0, matcher.isMatch(INPUT1, 11, 0, INPUT1.length()));\r\n    assertEquals(1, matcher.isMatch(INPUT1, 12, 0, INPUT1.length()));\r\n    //\r\n    assertEquals(0, matcher.isMatch(INPUT1, 11));\r\n    assertEquals(1, matcher.isMatch(INPUT1, 12));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\matcher\\StringMatcherOnCharSequenceStringTest.java",
  "methodName" : "testMatcherIndices",
  "sourceCode" : "@Test\r\nvoid testMatcherIndices() {\r\n    // remember that the API contract is tight for the isMatch() method\r\n    // all the onus is on the caller, so invalid inputs are not\r\n    // the concern of StringMatcher, and are not bugs\r\n    final StringMatcher matcher = StringMatcherFactory.INSTANCE.stringMatcher(\"bc\");\r\n    assertEquals(2, matcher.size());\r\n    assertEquals(2, matcher.isMatch(INPUT2, 1, 1, INPUT2_LENGTH));\r\n    assertEquals(2, matcher.isMatch(INPUT2, 1, 0, 3));\r\n    assertEquals(0, matcher.isMatch(INPUT2, 1, 0, 2));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\matcher\\StringMatcherOnCharSequenceStringTest.java",
  "methodName" : "testNoneMatcher",
  "sourceCode" : "@Test\r\nvoid testNoneMatcher() {\r\n    final StringMatcher matcher = StringMatcherFactory.INSTANCE.noneMatcher();\r\n    assertEquals(0, matcher.size());\r\n    assertSame(StringMatcherFactory.INSTANCE.noneMatcher(), matcher);\r\n    //\r\n    assertEquals(0, matcher.isMatch(INPUT1, 0, 0, INPUT1.length()));\r\n    assertEquals(0, matcher.isMatch(INPUT1, 1, 0, INPUT1.length()));\r\n    assertEquals(0, matcher.isMatch(INPUT1, 2, 0, INPUT1.length()));\r\n    assertEquals(0, matcher.isMatch(INPUT1, 3, 0, INPUT1.length()));\r\n    assertEquals(0, matcher.isMatch(INPUT1, 4, 0, INPUT1.length()));\r\n    assertEquals(0, matcher.isMatch(INPUT1, 5, 0, INPUT1.length()));\r\n    assertEquals(0, matcher.isMatch(INPUT1, 6, 0, INPUT1.length()));\r\n    assertEquals(0, matcher.isMatch(INPUT1, 7, 0, INPUT1.length()));\r\n    assertEquals(0, matcher.isMatch(INPUT1, 8, 0, INPUT1.length()));\r\n    assertEquals(0, matcher.isMatch(INPUT1, 9, 0, INPUT1.length()));\r\n    assertEquals(0, matcher.isMatch(INPUT1, 10, 0, INPUT1.length()));\r\n    assertEquals(0, matcher.isMatch(INPUT1, 11, 0, INPUT1.length()));\r\n    assertEquals(0, matcher.isMatch(INPUT1, 12, 0, INPUT1.length()));\r\n    //\r\n    assertEquals(0, matcher.isMatch(INPUT1, 0));\r\n    assertEquals(0, matcher.isMatch(INPUT1, 1));\r\n    assertEquals(0, matcher.isMatch(INPUT1, 2));\r\n    assertEquals(0, matcher.isMatch(INPUT1, 3));\r\n    assertEquals(0, matcher.isMatch(INPUT1, 4));\r\n    assertEquals(0, matcher.isMatch(INPUT1, 5));\r\n    assertEquals(0, matcher.isMatch(INPUT1, 6));\r\n    assertEquals(0, matcher.isMatch(INPUT1, 7));\r\n    assertEquals(0, matcher.isMatch(INPUT1, 8));\r\n    assertEquals(0, matcher.isMatch(INPUT1, 9));\r\n    assertEquals(0, matcher.isMatch(INPUT1, 10));\r\n    assertEquals(0, matcher.isMatch(INPUT1, 11));\r\n    assertEquals(0, matcher.isMatch(INPUT1, 12));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\matcher\\StringMatcherOnCharSequenceStringTest.java",
  "methodName" : "testQuoteMatcher",
  "sourceCode" : "@Test\r\nvoid testQuoteMatcher() {\r\n    final StringMatcher matcher = StringMatcherFactory.INSTANCE.quoteMatcher();\r\n    assertEquals(1, matcher.size());\r\n    assertSame(StringMatcherFactory.INSTANCE.quoteMatcher(), matcher);\r\n    //\r\n    assertEquals(0, matcher.isMatch(INPUT1, 10, 0, INPUT1.length()));\r\n    assertEquals(1, matcher.isMatch(INPUT1, 11, 0, INPUT1.length()));\r\n    assertEquals(1, matcher.isMatch(INPUT1, 12, 0, INPUT1.length()));\r\n    //\r\n    assertEquals(0, matcher.isMatch(INPUT1, 10));\r\n    assertEquals(1, matcher.isMatch(INPUT1, 11));\r\n    assertEquals(1, matcher.isMatch(INPUT1, 12));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\matcher\\StringMatcherOnCharSequenceStringTest.java",
  "methodName" : "testSingleQuoteMatcher",
  "sourceCode" : "@Test\r\nvoid testSingleQuoteMatcher() {\r\n    final StringMatcher matcher = StringMatcherFactory.INSTANCE.singleQuoteMatcher();\r\n    assertEquals(1, matcher.size());\r\n    assertSame(StringMatcherFactory.INSTANCE.singleQuoteMatcher(), matcher);\r\n    //\r\n    assertEquals(0, matcher.isMatch(INPUT1, 10, 0, INPUT1.length()));\r\n    assertEquals(1, matcher.isMatch(INPUT1, 11, 0, INPUT1.length()));\r\n    assertEquals(0, matcher.isMatch(INPUT1, 12, 0, INPUT1.length()));\r\n    //\r\n    assertEquals(0, matcher.isMatch(INPUT1, 10));\r\n    assertEquals(1, matcher.isMatch(INPUT1, 11));\r\n    assertEquals(0, matcher.isMatch(INPUT1, 12));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\matcher\\StringMatcherOnCharSequenceStringTest.java",
  "methodName" : "testSpaceMatcher",
  "sourceCode" : "@Test\r\nvoid testSpaceMatcher() {\r\n    final StringMatcher matcher = StringMatcherFactory.INSTANCE.spaceMatcher();\r\n    assertEquals(1, matcher.size());\r\n    assertSame(StringMatcherFactory.INSTANCE.spaceMatcher(), matcher);\r\n    //\r\n    assertEquals(0, matcher.isMatch(INPUT1, 4, 0, INPUT1.length()));\r\n    assertEquals(1, matcher.isMatch(INPUT1, 5, 0, INPUT1.length()));\r\n    assertEquals(0, matcher.isMatch(INPUT1, 6, 0, INPUT1.length()));\r\n    //\r\n    assertEquals(0, matcher.isMatch(INPUT1, 4));\r\n    assertEquals(1, matcher.isMatch(INPUT1, 5));\r\n    assertEquals(0, matcher.isMatch(INPUT1, 6));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\matcher\\StringMatcherOnCharSequenceStringTest.java",
  "methodName" : "testSplitMatcher",
  "sourceCode" : "@Test\r\nvoid testSplitMatcher() {\r\n    final StringMatcher matcher = StringMatcherFactory.INSTANCE.splitMatcher();\r\n    assertEquals(1, matcher.size());\r\n    assertSame(StringMatcherFactory.INSTANCE.splitMatcher(), matcher);\r\n    //\r\n    assertEquals(0, matcher.isMatch(INPUT1, 2, 0, INPUT1.length()));\r\n    assertEquals(1, matcher.isMatch(INPUT1, 3, 0, INPUT1.length()));\r\n    assertEquals(0, matcher.isMatch(INPUT1, 4, 0, INPUT1.length()));\r\n    assertEquals(1, matcher.isMatch(INPUT1, 5, 0, INPUT1.length()));\r\n    assertEquals(0, matcher.isMatch(INPUT1, 6, 0, INPUT1.length()));\r\n    assertEquals(1, matcher.isMatch(INPUT1, 7, 0, INPUT1.length()));\r\n    assertEquals(1, matcher.isMatch(INPUT1, 8, 0, INPUT1.length()));\r\n    assertEquals(1, matcher.isMatch(INPUT1, 9, 0, INPUT1.length()));\r\n    assertEquals(0, matcher.isMatch(INPUT1, 10, 0, INPUT1.length()));\r\n    //\r\n    assertEquals(0, matcher.isMatch(INPUT1, 2));\r\n    assertEquals(1, matcher.isMatch(INPUT1, 3));\r\n    assertEquals(0, matcher.isMatch(INPUT1, 4));\r\n    assertEquals(1, matcher.isMatch(INPUT1, 5));\r\n    assertEquals(0, matcher.isMatch(INPUT1, 6));\r\n    assertEquals(1, matcher.isMatch(INPUT1, 7));\r\n    assertEquals(1, matcher.isMatch(INPUT1, 8));\r\n    assertEquals(1, matcher.isMatch(INPUT1, 9));\r\n    assertEquals(0, matcher.isMatch(INPUT1, 10));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\matcher\\StringMatcherOnCharSequenceStringTest.java",
  "methodName" : "testStringMatcher_String",
  "sourceCode" : "@Test\r\nvoid testStringMatcher_String() {\r\n    final StringMatcher matcher = StringMatcherFactory.INSTANCE.stringMatcher(\"bc\");\r\n    assertEquals(2, matcher.size());\r\n    //\r\n    assertEquals(0, matcher.isMatch(INPUT2, 0, 0, INPUT2_LENGTH));\r\n    assertEquals(2, matcher.isMatch(INPUT2, 1, 0, INPUT2_LENGTH));\r\n    assertEquals(0, matcher.isMatch(INPUT2, 2, 0, INPUT2_LENGTH));\r\n    assertEquals(0, matcher.isMatch(INPUT2, 3, 0, INPUT2_LENGTH));\r\n    assertEquals(0, matcher.isMatch(INPUT2, 4, 0, INPUT2_LENGTH));\r\n    assertEquals(0, matcher.isMatch(INPUT2, 5, 0, INPUT2_LENGTH));\r\n    //\r\n    assertEquals(0, matcher.isMatch(INPUT2, 0));\r\n    assertEquals(2, matcher.isMatch(INPUT2, 1));\r\n    assertEquals(0, matcher.isMatch(INPUT2, 2));\r\n    assertEquals(0, matcher.isMatch(INPUT2, 3));\r\n    assertEquals(0, matcher.isMatch(INPUT2, 4));\r\n    assertEquals(0, matcher.isMatch(INPUT2, 5));\r\n    //\r\n    assertSame(StringMatcherFactory.INSTANCE.stringMatcher(\"\"), StringMatcherFactory.INSTANCE.noneMatcher());\r\n    assertSame(StringMatcherFactory.INSTANCE.stringMatcher((String) null), StringMatcherFactory.INSTANCE.noneMatcher());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\matcher\\StringMatcherOnCharSequenceStringTest.java",
  "methodName" : "testTabMatcher",
  "sourceCode" : "@Test\r\nvoid testTabMatcher() {\r\n    final StringMatcher matcher = StringMatcherFactory.INSTANCE.tabMatcher();\r\n    assertEquals(1, matcher.size());\r\n    assertSame(StringMatcherFactory.INSTANCE.tabMatcher(), matcher);\r\n    //\r\n    assertEquals(0, matcher.isMatch(INPUT1, 2, 0, INPUT1.length()));\r\n    assertEquals(1, matcher.isMatch(INPUT1, 3, 0, INPUT1.length()));\r\n    assertEquals(0, matcher.isMatch(INPUT1, 4, 0, INPUT1.length()));\r\n    //\r\n    assertEquals(0, matcher.isMatch(INPUT1, 2));\r\n    assertEquals(1, matcher.isMatch(INPUT1, 3));\r\n    assertEquals(0, matcher.isMatch(INPUT1, 4));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\matcher\\StringMatcherOnCharSequenceStringTest.java",
  "methodName" : "testTrimMatcher",
  "sourceCode" : "@Test\r\nvoid testTrimMatcher() {\r\n    final StringMatcher matcher = StringMatcherFactory.INSTANCE.trimMatcher();\r\n    assertEquals(1, matcher.size());\r\n    assertSame(StringMatcherFactory.INSTANCE.trimMatcher(), matcher);\r\n    //\r\n    assertEquals(0, matcher.isMatch(INPUT1, 2, 0, INPUT1.length()));\r\n    assertEquals(1, matcher.isMatch(INPUT1, 3, 0, INPUT1.length()));\r\n    assertEquals(0, matcher.isMatch(INPUT1, 4, 0, INPUT1.length()));\r\n    assertEquals(1, matcher.isMatch(INPUT1, 5, 0, INPUT1.length()));\r\n    assertEquals(0, matcher.isMatch(INPUT1, 6, 0, INPUT1.length()));\r\n    assertEquals(1, matcher.isMatch(INPUT1, 7, 0, INPUT1.length()));\r\n    assertEquals(1, matcher.isMatch(INPUT1, 8, 0, INPUT1.length()));\r\n    assertEquals(1, matcher.isMatch(INPUT1, 9, 0, INPUT1.length()));\r\n    assertEquals(1, matcher.isMatch(INPUT1, 10, 0, INPUT1.length()));\r\n    //\r\n    assertEquals(0, matcher.isMatch(INPUT1, 2));\r\n    assertEquals(1, matcher.isMatch(INPUT1, 3));\r\n    assertEquals(0, matcher.isMatch(INPUT1, 4));\r\n    assertEquals(1, matcher.isMatch(INPUT1, 5));\r\n    assertEquals(0, matcher.isMatch(INPUT1, 6));\r\n    assertEquals(1, matcher.isMatch(INPUT1, 7));\r\n    assertEquals(1, matcher.isMatch(INPUT1, 8));\r\n    assertEquals(1, matcher.isMatch(INPUT1, 9));\r\n    assertEquals(1, matcher.isMatch(INPUT1, 10));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\matcher\\StringSubstitutorGetSetTest.java",
  "methodName" : "testGetSetPrefix",
  "sourceCode" : "/**\r\n * Tests get set.\r\n */\r\n@Test\r\nvoid testGetSetPrefix() {\r\n    final StringSubstitutor sub = new StringSubstitutor();\r\n    assertTrue(sub.getVariablePrefixMatcher() instanceof AbstractStringMatcher.CharArrayMatcher);\r\n    sub.setVariablePrefix('<');\r\n    assertTrue(sub.getVariablePrefixMatcher() instanceof AbstractStringMatcher.CharMatcher);\r\n    sub.setVariablePrefix(\"<<\");\r\n    assertTrue(sub.getVariablePrefixMatcher() instanceof AbstractStringMatcher.CharArrayMatcher);\r\n    assertThrows(IllegalArgumentException.class, () -> sub.setVariablePrefix((String) null));\r\n    assertTrue(sub.getVariablePrefixMatcher() instanceof AbstractStringMatcher.CharArrayMatcher);\r\n    final StringMatcher matcher = StringMatcherFactory.INSTANCE.commaMatcher();\r\n    sub.setVariablePrefixMatcher(matcher);\r\n    assertSame(matcher, sub.getVariablePrefixMatcher());\r\n    assertThrows(IllegalArgumentException.class, () -> sub.setVariablePrefixMatcher((StringMatcher) null));\r\n    assertSame(matcher, sub.getVariablePrefixMatcher());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\matcher\\StringSubstitutorGetSetTest.java",
  "methodName" : "testGetSetSuffix",
  "sourceCode" : "/**\r\n * Tests get set.\r\n */\r\n@Test\r\nvoid testGetSetSuffix() {\r\n    final StringSubstitutor sub = new StringSubstitutor();\r\n    assertTrue(sub.getVariableSuffixMatcher() instanceof AbstractStringMatcher.CharMatcher);\r\n    sub.setVariableSuffix('<');\r\n    assertTrue(sub.getVariableSuffixMatcher() instanceof AbstractStringMatcher.CharMatcher);\r\n    sub.setVariableSuffix(\"<<\");\r\n    assertTrue(sub.getVariableSuffixMatcher() instanceof AbstractStringMatcher.CharArrayMatcher);\r\n    assertThrows(IllegalArgumentException.class, () -> sub.setVariableSuffix((String) null));\r\n    assertTrue(sub.getVariableSuffixMatcher() instanceof AbstractStringMatcher.CharArrayMatcher);\r\n    final StringMatcher matcher = StringMatcherFactory.INSTANCE.commaMatcher();\r\n    sub.setVariableSuffixMatcher(matcher);\r\n    assertSame(matcher, sub.getVariableSuffixMatcher());\r\n    assertThrows(IllegalArgumentException.class, () -> sub.setVariableSuffixMatcher((StringMatcher) null));\r\n    assertSame(matcher, sub.getVariableSuffixMatcher());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\matcher\\StringSubstitutorGetSetTest.java",
  "methodName" : "testGetSetValueDelimiter",
  "sourceCode" : "/**\r\n * Tests get set.\r\n */\r\n@Test\r\nvoid testGetSetValueDelimiter() {\r\n    final StringSubstitutor sub = new StringSubstitutor();\r\n    assertTrue(sub.getValueDelimiterMatcher() instanceof AbstractStringMatcher.CharArrayMatcher);\r\n    sub.setValueDelimiter(':');\r\n    assertTrue(sub.getValueDelimiterMatcher() instanceof AbstractStringMatcher.CharMatcher);\r\n    sub.setValueDelimiter(\"||\");\r\n    assertTrue(sub.getValueDelimiterMatcher() instanceof AbstractStringMatcher.CharArrayMatcher);\r\n    sub.setValueDelimiter((String) null);\r\n    assertNull(sub.getValueDelimiterMatcher());\r\n    final StringMatcher matcher = StringMatcherFactory.INSTANCE.commaMatcher();\r\n    sub.setValueDelimiterMatcher(matcher);\r\n    assertSame(matcher, sub.getValueDelimiterMatcher());\r\n    sub.setValueDelimiterMatcher((StringMatcher) null);\r\n    assertNull(sub.getValueDelimiterMatcher());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\numbers\\DoubleFormatTest.java",
  "methodName" : "testBuilder_illegalArgs",
  "sourceCode" : "@Test\r\nvoid testBuilder_illegalArgs() {\r\n    // arrange\r\n    final DoubleFormat.Builder builder = DoubleFormat.PLAIN.builder();\r\n    // act/assert\r\n    Assertions.assertThrows(NullPointerException.class, () -> builder.digits(null));\r\n    Assertions.assertThrows(IllegalArgumentException.class, () -> builder.digits(\"a\"));\r\n    Assertions.assertThrows(IllegalArgumentException.class, () -> builder.digits(\"0123456789a\"));\r\n    Assertions.assertThrows(NullPointerException.class, () -> builder.exponentSeparator(null));\r\n    Assertions.assertThrows(NullPointerException.class, () -> builder.infinity(null));\r\n    Assertions.assertThrows(NullPointerException.class, () -> builder.nan(null));\r\n    Assertions.assertThrows(NullPointerException.class, () -> builder.formatSymbols(null));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\numbers\\DoubleFormatTest.java",
  "methodName" : "testCustomDigitString",
  "sourceCode" : "@Test\r\nvoid testCustomDigitString() {\r\n    // arrange\r\n    final String digits = \"abcdefghij\";\r\n    final DoubleFunction<String> plain = DoubleFormat.PLAIN.builder().digits(digits).get();\r\n    final DoubleFunction<String> sci = DoubleFormat.SCIENTIFIC.builder().digits(digits).get();\r\n    final DoubleFunction<String> eng = DoubleFormat.ENGINEERING.builder().digits(digits).get();\r\n    final DoubleFunction<String> mixed = DoubleFormat.MIXED.builder().digits(digits).get();\r\n    // act/assert\r\n    checkFormat(plain, 9876543210.0, \"jihgfedcba.a\");\r\n    checkFormat(sci, 9876543210.0, \"j.ihgfedcbEj\");\r\n    checkFormat(eng, 9876543210.0, \"j.ihgfedcbEj\");\r\n    checkFormat(mixed, 9876543210.0, \"j.ihgfedcbEj\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\numbers\\DoubleFormatTest.java",
  "methodName" : "testEngineering_custom",
  "sourceCode" : "@Test\r\nvoid testEngineering_custom() {\r\n    // act\r\n    final DoubleFunction<String> fmt = DoubleFormat.ENGINEERING.builder().maxPrecision(3).minDecimalExponent(-3).allowSignedZero(false).includeFractionPlaceholder(false).decimalSeparator(',').exponentSeparator(\"e\").infinity(\"inf\").nan(\"nan\").minusSign('!').get();\r\n    // act/assert\r\n    checkFormat(fmt, Double.NaN, \"nan\");\r\n    checkFormat(fmt, Double.POSITIVE_INFINITY, \"inf\");\r\n    checkFormat(fmt, Double.NEGATIVE_INFINITY, \"!inf\");\r\n    checkFormat(fmt, 0.00001, \"0\");\r\n    checkFormat(fmt, -0.0001, \"0\");\r\n    checkFormat(fmt, 0.001, \"1e!3\");\r\n    checkFormat(fmt, -0.01, \"!10e!3\");\r\n    checkFormat(fmt, 0.1, \"100e!3\");\r\n    checkFormat(fmt, -0.0, \"0\");\r\n    checkFormat(fmt, 0.0, \"0\");\r\n    checkFormat(fmt, -1.0, \"!1\");\r\n    checkFormat(fmt, 10.0, \"10\");\r\n    checkFormat(fmt, -100.0, \"!100\");\r\n    checkFormat(fmt, 1000.0, \"1e3\");\r\n    checkFormat(fmt, -10000.0, \"!10e3\");\r\n    checkFormat(fmt, 100000.0, \"100e3\");\r\n    checkFormat(fmt, -1000000.0, \"!1e6\");\r\n    checkFormat(fmt, 10000000.0, \"10e6\");\r\n    checkFormat(fmt, -100000000.0, \"!100e6\");\r\n    checkFormat(fmt, 1.25e-3, \"1e!3\");\r\n    checkFormat(fmt, -9.975e-4, \"!1e!3\");\r\n    checkFormat(fmt, 12345, \"12,3e3\");\r\n    checkFormat(fmt, -9_999_999, \"!10e6\");\r\n    checkFormat(fmt, 1.00001e7, \"10e6\");\r\n    checkFormat(fmt, Double.MAX_VALUE, \"180e306\");\r\n    checkFormat(fmt, Double.MIN_VALUE, \"0\");\r\n    checkFormat(fmt, Double.MIN_NORMAL, \"0\");\r\n    checkFormat(fmt, Math.PI, \"3,14\");\r\n    checkFormat(fmt, Math.E, \"2,72\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\numbers\\DoubleFormatTest.java",
  "methodName" : "testEngineering_defaults",
  "sourceCode" : "@Test\r\nvoid testEngineering_defaults() {\r\n    // act\r\n    final DoubleFunction<String> fmt = DoubleFormat.ENGINEERING.builder().get();\r\n    // act/assert\r\n    checkDefaultFormatSpecial(fmt);\r\n    checkFormat(fmt, 0.00001, \"10.0E-6\");\r\n    checkFormat(fmt, -0.0001, \"-100.0E-6\");\r\n    checkFormat(fmt, 0.001, \"1.0E-3\");\r\n    checkFormat(fmt, -0.01, \"-10.0E-3\");\r\n    checkFormat(fmt, 0.1, \"100.0E-3\");\r\n    checkFormat(fmt, -0.0, \"-0.0\");\r\n    checkFormat(fmt, 0.0, \"0.0\");\r\n    checkFormat(fmt, -1.0, \"-1.0\");\r\n    checkFormat(fmt, 10.0, \"10.0\");\r\n    checkFormat(fmt, -100.0, \"-100.0\");\r\n    checkFormat(fmt, 1000.0, \"1.0E3\");\r\n    checkFormat(fmt, -10000.0, \"-10.0E3\");\r\n    checkFormat(fmt, 100000.0, \"100.0E3\");\r\n    checkFormat(fmt, -1000000.0, \"-1.0E6\");\r\n    checkFormat(fmt, 10000000.0, \"10.0E6\");\r\n    checkFormat(fmt, -100000000.0, \"-100.0E6\");\r\n    checkFormat(fmt, 1.25e-3, \"1.25E-3\");\r\n    checkFormat(fmt, -9.975e-4, \"-997.5E-6\");\r\n    checkFormat(fmt, 12345, \"12.345E3\");\r\n    checkFormat(fmt, -9_999_999, \"-9.999999E6\");\r\n    checkFormat(fmt, 1.00001e7, \"10.0001E6\");\r\n    checkFormat(fmt, Double.MAX_VALUE, \"179.76931348623157E306\");\r\n    checkFormat(fmt, Double.MIN_VALUE, \"4.9E-324\");\r\n    checkFormat(fmt, Double.MIN_NORMAL, \"22.250738585072014E-309\");\r\n    checkFormat(fmt, Math.PI, \"3.141592653589793\");\r\n    checkFormat(fmt, Math.E, \"2.718281828459045\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\numbers\\DoubleFormatTest.java",
  "methodName" : "testEngineering_localeFormatComparison",
  "sourceCode" : "@Test\r\nvoid testEngineering_localeFormatComparison() {\r\n    // act/assert\r\n    checkLocalizedFormats(\"##0.0##E0\", loc -> DoubleFormat.ENGINEERING.builder().maxPrecision(6).alwaysIncludeExponent(true).formatSymbols(DecimalFormatSymbols.getInstance(loc)).get());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\numbers\\DoubleFormatTest.java",
  "methodName" : "testFormatAccuracy",
  "sourceCode" : "@Test\r\nvoid testFormatAccuracy() {\r\n    // act/assert\r\n    checkFormatAccuracyWithDefaults(DoubleFormat.PLAIN);\r\n    checkFormatAccuracyWithDefaults(DoubleFormat.MIXED);\r\n    checkFormatAccuracyWithDefaults(DoubleFormat.SCIENTIFIC);\r\n    checkFormatAccuracyWithDefaults(DoubleFormat.ENGINEERING);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\numbers\\DoubleFormatTest.java",
  "methodName" : "testMaximumPrecision",
  "sourceCode" : "/**\r\n * Test formatting at the maximum precision. The formatting is based on the output\r\n * of {@link Double#toString()}. If cannot create an extended precision text\r\n * representation and is limited to 17 significant digits. This test verifies that\r\n * formatting does not lose information that would be required to recreate the\r\n * same double value.\r\n */\r\n@ParameterizedTest\r\n@MethodSource\r\nvoid testMaximumPrecision(final DoubleFunction<String> fmt, final double value) {\r\n    final String s = fmt.apply(value);\r\n    final double d = Double.parseDouble(s);\r\n    Assertions.assertEquals(value, d, () -> value + \" formatted as \" + s);\r\n}",
  "annotations" : [ "ParameterizedTest" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\numbers\\DoubleFormatTest.java",
  "methodName" : "testMixed_custom",
  "sourceCode" : "@Test\r\nvoid testMixed_custom() {\r\n    // arrange\r\n    final DoubleFunction<String> fmt = DoubleFormat.MIXED.builder().maxPrecision(3).minDecimalExponent(-3).allowSignedZero(false).includeFractionPlaceholder(false).decimalSeparator(',').plainFormatMaxDecimalExponent(4).plainFormatMinDecimalExponent(-1).exponentSeparator(\"e\").infinity(\"inf\").nan(\"nan\").minusSign('!').get();\r\n    // act/assert\r\n    checkFormat(fmt, Double.NaN, \"nan\");\r\n    checkFormat(fmt, Double.POSITIVE_INFINITY, \"inf\");\r\n    checkFormat(fmt, Double.NEGATIVE_INFINITY, \"!inf\");\r\n    checkFormat(fmt, 0.00001, \"0\");\r\n    checkFormat(fmt, -0.0001, \"0\");\r\n    checkFormat(fmt, 0.001, \"1e!3\");\r\n    checkFormat(fmt, -0.01, \"!1e!2\");\r\n    checkFormat(fmt, 0.1, \"0,1\");\r\n    checkFormat(fmt, -0.0, \"0\");\r\n    checkFormat(fmt, 0.0, \"0\");\r\n    checkFormat(fmt, -1.0, \"!1\");\r\n    checkFormat(fmt, 10.0, \"10\");\r\n    checkFormat(fmt, -100.0, \"!100\");\r\n    checkFormat(fmt, 1000.0, \"1000\");\r\n    checkFormat(fmt, -10000.0, \"!10000\");\r\n    checkFormat(fmt, 100000.0, \"1e5\");\r\n    checkFormat(fmt, -1000000.0, \"!1e6\");\r\n    checkFormat(fmt, 10000000.0, \"1e7\");\r\n    checkFormat(fmt, -100000000.0, \"!1e8\");\r\n    checkFormat(fmt, 1.25e-3, \"1e!3\");\r\n    checkFormat(fmt, -9.975e-4, \"!1e!3\");\r\n    checkFormat(fmt, 12345, \"12300\");\r\n    checkFormat(fmt, -9_999_999, \"!1e7\");\r\n    checkFormat(fmt, 1.00001e7, \"1e7\");\r\n    checkFormat(fmt, Double.MAX_VALUE, \"1,8e308\");\r\n    checkFormat(fmt, Double.MIN_VALUE, \"0\");\r\n    checkFormat(fmt, Double.MIN_NORMAL, \"0\");\r\n    checkFormat(fmt, Math.PI, \"3,14\");\r\n    checkFormat(fmt, Math.E, \"2,72\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\numbers\\DoubleFormatTest.java",
  "methodName" : "testMixed_defaults",
  "sourceCode" : "@Test\r\nvoid testMixed_defaults() {\r\n    // arrange\r\n    testMixed_defaults(DoubleFormat.MIXED.builder().get());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\numbers\\DoubleFormatTest.java",
  "methodName" : "testMixed_defaultsDeprecated",
  "sourceCode" : "@Test\r\nvoid testMixed_defaultsDeprecated() {\r\n    testMixed_defaults(DoubleFormat.MIXED.builder().build());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\numbers\\DoubleFormatTest.java",
  "methodName" : "testPlain_custom",
  "sourceCode" : "@Test\r\nvoid testPlain_custom() {\r\n    // arrange\r\n    final DoubleFunction<String> fmt = DoubleFormat.PLAIN.builder().maxPrecision(3).minDecimalExponent(-3).allowSignedZero(false).includeFractionPlaceholder(false).decimalSeparator(',').exponentSeparator(\"e\").infinity(\"inf\").nan(\"nan\").minusSign('!').get();\r\n    // act/assert\r\n    checkFormat(fmt, Double.NaN, \"nan\");\r\n    checkFormat(fmt, Double.POSITIVE_INFINITY, \"inf\");\r\n    checkFormat(fmt, Double.NEGATIVE_INFINITY, \"!inf\");\r\n    checkFormat(fmt, 0.00001, \"0\");\r\n    checkFormat(fmt, -0.0001, \"0\");\r\n    checkFormat(fmt, 0.001, \"0,001\");\r\n    checkFormat(fmt, -0.01, \"!0,01\");\r\n    checkFormat(fmt, 0.1, \"0,1\");\r\n    checkFormat(fmt, -0.0, \"0\");\r\n    checkFormat(fmt, 0.0, \"0\");\r\n    checkFormat(fmt, -1.0, \"!1\");\r\n    checkFormat(fmt, 10.0, \"10\");\r\n    checkFormat(fmt, -100.0, \"!100\");\r\n    checkFormat(fmt, 1000.0, \"1000\");\r\n    checkFormat(fmt, -10000.0, \"!10000\");\r\n    checkFormat(fmt, 100000.0, \"100000\");\r\n    checkFormat(fmt, -1000000.0, \"!1000000\");\r\n    checkFormat(fmt, 10000000.0, \"10000000\");\r\n    checkFormat(fmt, -100000000.0, \"!100000000\");\r\n    checkFormat(fmt, 1.25e-3, \"0,001\");\r\n    checkFormat(fmt, -9.975e-4, \"!0,001\");\r\n    checkFormat(fmt, 12345, \"12300\");\r\n    checkFormat(fmt, -9_999_999, \"!10000000\");\r\n    checkFormat(fmt, 1.00001e7, \"10000000\");\r\n    checkFormat(fmt, Float.MAX_VALUE, \"340000000000000000000000000000000000000\");\r\n    checkFormat(fmt, -Float.MIN_VALUE, \"0\");\r\n    checkFormat(fmt, Float.MIN_NORMAL, \"0\");\r\n    checkFormat(fmt, Math.PI, \"3,14\");\r\n    checkFormat(fmt, Math.E, \"2,72\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\numbers\\DoubleFormatTest.java",
  "methodName" : "testPlain_defaults",
  "sourceCode" : "@Test\r\nvoid testPlain_defaults() {\r\n    // arrange\r\n    final DoubleFunction<String> fmt = DoubleFormat.PLAIN.builder().get();\r\n    // act/assert\r\n    checkFormat(fmt, 0.00001, \"0.00001\");\r\n    checkFormat(fmt, -0.0001, \"-0.0001\");\r\n    checkFormat(fmt, 0.001, \"0.001\");\r\n    checkFormat(fmt, -0.01, \"-0.01\");\r\n    checkFormat(fmt, 0.1, \"0.1\");\r\n    checkFormat(fmt, -0.0, \"-0.0\");\r\n    checkFormat(fmt, 0.0, \"0.0\");\r\n    checkFormat(fmt, -1.0, \"-1.0\");\r\n    checkFormat(fmt, 10.0, \"10.0\");\r\n    checkFormat(fmt, -100.0, \"-100.0\");\r\n    checkFormat(fmt, 1000.0, \"1000.0\");\r\n    checkFormat(fmt, -10000.0, \"-10000.0\");\r\n    checkFormat(fmt, 100000.0, \"100000.0\");\r\n    checkFormat(fmt, -1000000.0, \"-1000000.0\");\r\n    checkFormat(fmt, 10000000.0, \"10000000.0\");\r\n    checkFormat(fmt, -100000000.0, \"-100000000.0\");\r\n    checkFormat(fmt, 1.25e-3, \"0.00125\");\r\n    checkFormat(fmt, -9.975e-4, \"-0.0009975\");\r\n    checkFormat(fmt, 12345, \"12345.0\");\r\n    checkFormat(fmt, -9_999_999, \"-9999999.0\");\r\n    checkFormat(fmt, 1.00001e7, \"10000100.0\");\r\n    checkFormat(fmt, Float.MAX_VALUE, \"340282346638528860000000000000000000000.0\");\r\n    checkFormat(fmt, -Float.MIN_VALUE, \"-0.000000000000000000000000000000000000000000001401298464324817\");\r\n    checkFormat(fmt, Float.MIN_NORMAL, \"0.000000000000000000000000000000000000011754943508222875\");\r\n    checkFormat(fmt, Math.PI, \"3.141592653589793\");\r\n    checkFormat(fmt, Math.E, \"2.718281828459045\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\numbers\\DoubleFormatTest.java",
  "methodName" : "testPlain_localeFormatComparison",
  "sourceCode" : "@Test\r\nvoid testPlain_localeFormatComparison() {\r\n    // act/assert\r\n    checkLocalizedFormats(\"0.0##\", loc -> DoubleFormat.PLAIN.builder().minDecimalExponent(-3).formatSymbols(DecimalFormatSymbols.getInstance(loc)).get());\r\n    checkLocalizedFormats(\"#,##0.0##\", loc -> DoubleFormat.PLAIN.builder().minDecimalExponent(-3).groupThousands(true).formatSymbols(DecimalFormatSymbols.getInstance(loc)).get());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\numbers\\DoubleFormatTest.java",
  "methodName" : "testScientific_custom",
  "sourceCode" : "@Test\r\nvoid testScientific_custom() {\r\n    // arrange\r\n    final DoubleFunction<String> fmt = DoubleFormat.SCIENTIFIC.builder().maxPrecision(3).minDecimalExponent(-3).allowSignedZero(false).includeFractionPlaceholder(false).decimalSeparator(',').exponentSeparator(\"e\").infinity(\"inf\").nan(\"nan\").minusSign('!').get();\r\n    // act/assert\r\n    checkFormat(fmt, Double.NaN, \"nan\");\r\n    checkFormat(fmt, Double.POSITIVE_INFINITY, \"inf\");\r\n    checkFormat(fmt, Double.NEGATIVE_INFINITY, \"!inf\");\r\n    checkFormat(fmt, 0.00001, \"0\");\r\n    checkFormat(fmt, -0.0001, \"0\");\r\n    checkFormat(fmt, 0.001, \"1e!3\");\r\n    checkFormat(fmt, -0.01, \"!1e!2\");\r\n    checkFormat(fmt, 0.1, \"1e!1\");\r\n    checkFormat(fmt, -0.0, \"0\");\r\n    checkFormat(fmt, 0.0, \"0\");\r\n    checkFormat(fmt, -1.0, \"!1\");\r\n    checkFormat(fmt, 10.0, \"1e1\");\r\n    checkFormat(fmt, -100.0, \"!1e2\");\r\n    checkFormat(fmt, 1000.0, \"1e3\");\r\n    checkFormat(fmt, -10000.0, \"!1e4\");\r\n    checkFormat(fmt, 100000.0, \"1e5\");\r\n    checkFormat(fmt, -1000000.0, \"!1e6\");\r\n    checkFormat(fmt, 10000000.0, \"1e7\");\r\n    checkFormat(fmt, -100000000.0, \"!1e8\");\r\n    checkFormat(fmt, 1.25e-3, \"1e!3\");\r\n    checkFormat(fmt, -9.975e-4, \"!1e!3\");\r\n    checkFormat(fmt, 12345, \"1,23e4\");\r\n    checkFormat(fmt, -9_999_999, \"!1e7\");\r\n    checkFormat(fmt, 1.00001e7, \"1e7\");\r\n    checkFormat(fmt, Double.MAX_VALUE, \"1,8e308\");\r\n    checkFormat(fmt, Double.MIN_VALUE, \"0\");\r\n    checkFormat(fmt, Double.MIN_NORMAL, \"0\");\r\n    checkFormat(fmt, Math.PI, \"3,14\");\r\n    checkFormat(fmt, Math.E, \"2,72\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\numbers\\DoubleFormatTest.java",
  "methodName" : "testScientific_defaults",
  "sourceCode" : "@Test\r\nvoid testScientific_defaults() {\r\n    // arrange\r\n    final DoubleFunction<String> fmt = DoubleFormat.SCIENTIFIC.builder().get();\r\n    // act/assert\r\n    checkDefaultFormatSpecial(fmt);\r\n    checkFormat(fmt, 0.00001, \"1.0E-5\");\r\n    checkFormat(fmt, -0.0001, \"-1.0E-4\");\r\n    checkFormat(fmt, 0.001, \"1.0E-3\");\r\n    checkFormat(fmt, -0.01, \"-1.0E-2\");\r\n    checkFormat(fmt, 0.1, \"1.0E-1\");\r\n    checkFormat(fmt, -0.0, \"-0.0\");\r\n    checkFormat(fmt, 0.0, \"0.0\");\r\n    checkFormat(fmt, -1.0, \"-1.0\");\r\n    checkFormat(fmt, 10.0, \"1.0E1\");\r\n    checkFormat(fmt, -100.0, \"-1.0E2\");\r\n    checkFormat(fmt, 1000.0, \"1.0E3\");\r\n    checkFormat(fmt, -10000.0, \"-1.0E4\");\r\n    checkFormat(fmt, 100000.0, \"1.0E5\");\r\n    checkFormat(fmt, -1000000.0, \"-1.0E6\");\r\n    checkFormat(fmt, 10000000.0, \"1.0E7\");\r\n    checkFormat(fmt, -100000000.0, \"-1.0E8\");\r\n    checkFormat(fmt, 1.25e-3, \"1.25E-3\");\r\n    checkFormat(fmt, -9.975e-4, \"-9.975E-4\");\r\n    checkFormat(fmt, 12345, \"1.2345E4\");\r\n    checkFormat(fmt, -9_999_999, \"-9.999999E6\");\r\n    checkFormat(fmt, 1.00001e7, \"1.00001E7\");\r\n    checkFormat(fmt, Double.MAX_VALUE, \"1.7976931348623157E308\");\r\n    checkFormat(fmt, Double.MIN_VALUE, \"4.9E-324\");\r\n    checkFormat(fmt, Double.MIN_NORMAL, \"2.2250738585072014E-308\");\r\n    checkFormat(fmt, Math.PI, \"3.141592653589793\");\r\n    checkFormat(fmt, Math.E, \"2.718281828459045\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\numbers\\DoubleFormatTest.java",
  "methodName" : "testScientific_localeFormatComparison",
  "sourceCode" : "@Test\r\nvoid testScientific_localeFormatComparison() {\r\n    // act/assert\r\n    checkLocalizedFormats(\"0.0##E0\", loc -> DoubleFormat.SCIENTIFIC.builder().maxPrecision(4).alwaysIncludeExponent(true).formatSymbols(DecimalFormatSymbols.getInstance(loc)).get());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\numbers\\ParsedDecimalTest.java",
  "methodName" : "testFrom",
  "sourceCode" : "@Test\r\nvoid testFrom() {\r\n    // act/assert\r\n    checkFrom(0.0, \"0\", 0);\r\n    checkFrom(1.0, \"1\", 0);\r\n    checkFrom(10.0, \"1\", 1);\r\n    checkFrom(100.0, \"1\", 2);\r\n    checkFrom(1000.0, \"1\", 3);\r\n    checkFrom(10000.0, \"1\", 4);\r\n    checkFrom(0.1, \"1\", -1);\r\n    checkFrom(0.01, \"1\", -2);\r\n    checkFrom(0.001, \"1\", -3);\r\n    checkFrom(0.0001, \"1\", -4);\r\n    checkFrom(0.00001, \"1\", -5);\r\n    checkFrom(1.2, \"12\", -1);\r\n    checkFrom(0.00971, \"971\", -5);\r\n    checkFrom(56300, \"563\", 2);\r\n    checkFrom(123.0, \"123\", 0);\r\n    checkFrom(1230.0, \"123\", 1);\r\n    checkFrom(12300.0, \"123\", 2);\r\n    checkFrom(123000.0, \"123\", 3);\r\n    checkFrom(12.3, \"123\", -1);\r\n    checkFrom(1.23, \"123\", -2);\r\n    checkFrom(0.123, \"123\", -3);\r\n    checkFrom(0.0123, \"123\", -4);\r\n    checkFrom(1.987654321e270, \"1987654321\", 261);\r\n    checkFrom(1.987654321e-270, \"1987654321\", -279);\r\n    checkFrom(Math.PI, \"3141592653589793\", -15);\r\n    checkFrom(Math.E, \"2718281828459045\", -15);\r\n    checkFrom(Double.MAX_VALUE, \"17976931348623157\", 292);\r\n    checkFrom(Double.MIN_VALUE, \"49\", -325);\r\n    checkFrom(Double.MIN_NORMAL, \"22250738585072014\", -324);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\numbers\\ParsedDecimalTest.java",
  "methodName" : "testFromNotFinite",
  "sourceCode" : "@Test\r\nvoid testFromNotFinite() {\r\n    // arrange\r\n    final String msg = \"Double is not finite\";\r\n    // act/assert\r\n    assertThrowsWithMessage(() -> ParsedDecimal.from(Double.NaN), IllegalArgumentException.class, msg);\r\n    assertThrowsWithMessage(() -> ParsedDecimal.from(Double.NEGATIVE_INFINITY), IllegalArgumentException.class, msg);\r\n    assertThrowsWithMessage(() -> ParsedDecimal.from(Double.POSITIVE_INFINITY), IllegalArgumentException.class, msg);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\numbers\\ParsedDecimalTest.java",
  "methodName" : "testIsZero",
  "sourceCode" : "@Test\r\nvoid testIsZero() {\r\n    // act/assert\r\n    Assertions.assertTrue(ParsedDecimal.from(0.0).isZero());\r\n    Assertions.assertTrue(ParsedDecimal.from(-0.0).isZero());\r\n    Assertions.assertFalse(ParsedDecimal.from(1.0).isZero());\r\n    Assertions.assertFalse(ParsedDecimal.from(-1.0).isZero());\r\n    Assertions.assertFalse(ParsedDecimal.from(Double.MIN_NORMAL).isZero());\r\n    Assertions.assertFalse(ParsedDecimal.from(-Double.MIN_NORMAL).isZero());\r\n    Assertions.assertFalse(ParsedDecimal.from(Double.MAX_VALUE).isZero());\r\n    Assertions.assertFalse(ParsedDecimal.from(-Double.MIN_VALUE).isZero());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\numbers\\ParsedDecimalTest.java",
  "methodName" : "testMaxPrecision",
  "sourceCode" : "@Test\r\nvoid testMaxPrecision() {\r\n    // arrange\r\n    final double d = 1.02576552;\r\n    // act\r\n    assertMaxPrecision(d, 10, false, \"102576552\", -8);\r\n    assertMaxPrecision(d, 9, false, \"102576552\", -8);\r\n    assertMaxPrecision(d, 8, false, \"10257655\", -7);\r\n    assertMaxPrecision(d, 7, false, \"1025766\", -6);\r\n    assertMaxPrecision(d, 6, false, \"102577\", -5);\r\n    assertMaxPrecision(d, 5, false, \"10258\", -4);\r\n    assertMaxPrecision(d, 4, false, \"1026\", -3);\r\n    assertMaxPrecision(d, 3, false, \"103\", -2);\r\n    assertMaxPrecision(d, 2, false, \"1\", 0);\r\n    assertMaxPrecision(d, 1, false, \"1\", 0);\r\n    assertMaxPrecision(d, 0, false, \"102576552\", -8);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\numbers\\ParsedDecimalTest.java",
  "methodName" : "testMaxPrecision_carry",
  "sourceCode" : "@Test\r\nvoid testMaxPrecision_carry() {\r\n    // arrange\r\n    final double d = -999.0999e50;\r\n    // act\r\n    assertMaxPrecision(d, 8, true, \"9990999\", 46);\r\n    assertMaxPrecision(d, 7, true, \"9990999\", 46);\r\n    assertMaxPrecision(d, 6, true, \"9991\", 49);\r\n    assertMaxPrecision(d, 5, true, \"9991\", 49);\r\n    assertMaxPrecision(d, 4, true, \"9991\", 49);\r\n    assertMaxPrecision(d, 3, true, \"999\", 50);\r\n    assertMaxPrecision(d, 2, true, \"1\", 53);\r\n    assertMaxPrecision(d, 1, true, \"1\", 53);\r\n    assertMaxPrecision(d, 0, true, \"9990999\", 46);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\numbers\\ParsedDecimalTest.java",
  "methodName" : "testMaxPrecision_halfEvenRounding",
  "sourceCode" : "@Test\r\nvoid testMaxPrecision_halfEvenRounding() {\r\n    // act/assert\r\n    // Test values taken from RoundingMode.HALF_EVEN javadocs\r\n    assertMaxPrecision(5.5, 1, false, \"6\", 0);\r\n    assertMaxPrecision(2.5, 1, false, \"2\", 0);\r\n    assertMaxPrecision(1.6, 1, false, \"2\", 0);\r\n    assertMaxPrecision(1.1, 1, false, \"1\", 0);\r\n    assertMaxPrecision(1.0, 1, false, \"1\", 0);\r\n    assertMaxPrecision(-1.0, 1, true, \"1\", 0);\r\n    assertMaxPrecision(-1.1, 1, true, \"1\", 0);\r\n    assertMaxPrecision(-1.6, 1, true, \"2\", 0);\r\n    assertMaxPrecision(-2.5, 1, true, \"2\", 0);\r\n    assertMaxPrecision(-5.5, 1, true, \"6\", 0);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\numbers\\ParsedDecimalTest.java",
  "methodName" : "testMaxPrecision_random",
  "sourceCode" : "@Test\r\nvoid testMaxPrecision_random() {\r\n    // arrange\r\n    final UniformRandomProvider rand = RandomSource.XO_RO_SHI_RO_128_PP.create(0L);\r\n    final ParsedDecimal.FormatOptions opts = new FormatOptionsImpl();\r\n    for (int i = 0; i < 10_000; ++i) {\r\n        final double d = createRandomDouble(rand);\r\n        final int precision = rand.nextInt(20) + 1;\r\n        final MathContext ctx = new MathContext(precision, RoundingMode.HALF_EVEN);\r\n        final ParsedDecimal dec = ParsedDecimal.from(d);\r\n        // act\r\n        dec.maxPrecision(precision);\r\n        // assert\r\n        Assertions.assertEquals(new BigDecimal(Double.toString(d), ctx).doubleValue(), Double.parseDouble(dec.toScientificString(opts)));\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\numbers\\ParsedDecimalTest.java",
  "methodName" : "testMaxPrecision_singleDigits",
  "sourceCode" : "@Test\r\nvoid testMaxPrecision_singleDigits() {\r\n    // act\r\n    assertMaxPrecision(9.0, 1, false, \"9\", 0);\r\n    assertMaxPrecision(1.0, 1, false, \"1\", 0);\r\n    assertMaxPrecision(0.0, 1, false, \"0\", 0);\r\n    assertMaxPrecision(-0.0, 1, true, \"0\", 0);\r\n    assertMaxPrecision(-1.0, 1, true, \"1\", 0);\r\n    assertMaxPrecision(-9.0, 1, true, \"9\", 0);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\numbers\\ParsedDecimalTest.java",
  "methodName" : "testRound_mixed",
  "sourceCode" : "@Test\r\nvoid testRound_mixed() {\r\n    // arrange\r\n    final double a = 9.94e-10;\r\n    final double b = -3.1415;\r\n    final double c = 5.55e10;\r\n    // act/assert\r\n    assertRound(a, -13, false, \"994\", -12);\r\n    assertRound(a, -12, false, \"994\", -12);\r\n    assertRound(a, -11, false, \"99\", -11);\r\n    assertRound(a, -10, false, \"1\", -9);\r\n    assertRound(a, -9, false, \"1\", -9);\r\n    assertRound(a, -8, false, \"0\", 0);\r\n    assertRound(b, -5, true, \"31415\", -4);\r\n    assertRound(b, -4, true, \"31415\", -4);\r\n    assertRound(b, -3, true, \"3142\", -3);\r\n    assertRound(b, -2, true, \"314\", -2);\r\n    assertRound(b, -1, true, \"31\", -1);\r\n    assertRound(b, 0, true, \"3\", 0);\r\n    assertRound(b, 1, true, \"0\", 0);\r\n    assertRound(b, 2, true, \"0\", 0);\r\n    assertRound(c, 7, false, \"555\", 8);\r\n    assertRound(c, 8, false, \"555\", 8);\r\n    assertRound(c, 9, false, \"56\", 9);\r\n    assertRound(c, 10, false, \"6\", 10);\r\n    assertRound(c, 11, false, \"1\", 11);\r\n    assertRound(c, 12, false, \"0\", 0);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\numbers\\ParsedDecimalTest.java",
  "methodName" : "testRound_nine",
  "sourceCode" : "@Test\r\nvoid testRound_nine() {\r\n    // arrange\r\n    final double a = 9e-10;\r\n    final double b = -9;\r\n    final double c = 9e10;\r\n    // act/assert\r\n    assertRound(a, -11, false, \"9\", -10);\r\n    assertRound(a, -10, false, \"9\", -10);\r\n    assertRound(a, -9, false, \"1\", -9);\r\n    assertRound(b, -1, true, \"9\", 0);\r\n    assertRound(b, 0, true, \"9\", 0);\r\n    assertRound(b, 1, true, \"1\", 1);\r\n    assertRound(c, 9, false, \"9\", 10);\r\n    assertRound(c, 10, false, \"9\", 10);\r\n    assertRound(c, 11, false, \"1\", 11);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\numbers\\ParsedDecimalTest.java",
  "methodName" : "testRound_one",
  "sourceCode" : "@Test\r\nvoid testRound_one() {\r\n    // arrange\r\n    final double a = 1e-10;\r\n    final double b = -1;\r\n    final double c = 1e10;\r\n    // act/assert\r\n    assertRound(a, -11, false, \"1\", -10);\r\n    assertRound(a, -10, false, \"1\", -10);\r\n    assertRound(a, -9, false, \"0\", 0);\r\n    assertRound(b, -1, true, \"1\", 0);\r\n    assertRound(b, 0, true, \"1\", 0);\r\n    assertRound(b, 1, true, \"0\", 0);\r\n    assertRound(c, 9, false, \"1\", 10);\r\n    assertRound(c, 10, false, \"1\", 10);\r\n    assertRound(c, 11, false, \"0\", 0);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\numbers\\ParsedDecimalTest.java",
  "methodName" : "testStringMethodAccuracy_random",
  "sourceCode" : "@Test\r\nvoid testStringMethodAccuracy_random() {\r\n    // arrange\r\n    final UniformRandomProvider rand = RandomSource.XO_RO_SHI_RO_128_PP.create(0L);\r\n    final FormatOptionsImpl stdOpts = new FormatOptionsImpl();\r\n    final FormatOptionsImpl altOpts = new FormatOptionsImpl();\r\n    altOpts.setExponentSeparator(\"e\");\r\n    altOpts.setIncludeFractionPlaceholder(false);\r\n    double d;\r\n    for (int i = 0; i < 10_000; ++i) {\r\n        d = createRandomDouble(rand);\r\n        // act/assert\r\n        Assertions.assertEquals(d, Double.parseDouble(ParsedDecimal.from(d).toScientificString(stdOpts)));\r\n        Assertions.assertEquals(d, Double.parseDouble(ParsedDecimal.from(d).toScientificString(altOpts)));\r\n        Assertions.assertEquals(d, Double.parseDouble(ParsedDecimal.from(d).toEngineeringString(stdOpts)));\r\n        Assertions.assertEquals(d, Double.parseDouble(ParsedDecimal.from(d).toEngineeringString(altOpts)));\r\n        Assertions.assertEquals(d, Double.parseDouble(ParsedDecimal.from(d).toPlainString(stdOpts)));\r\n        Assertions.assertEquals(d, Double.parseDouble(ParsedDecimal.from(d).toPlainString(altOpts)));\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\numbers\\ParsedDecimalTest.java",
  "methodName" : "testStringMethodAccuracy_sequence",
  "sourceCode" : "@Test\r\nvoid testStringMethodAccuracy_sequence() {\r\n    // arrange\r\n    final double min = -1000;\r\n    final double max = 1000;\r\n    final double delta = 0.1;\r\n    final FormatOptionsImpl stdOpts = new FormatOptionsImpl();\r\n    final FormatOptionsImpl altOpts = new FormatOptionsImpl();\r\n    altOpts.setExponentSeparator(\"e\");\r\n    altOpts.setIncludeFractionPlaceholder(false);\r\n    Assertions.assertEquals(10.0, Double.parseDouble(ParsedDecimal.from(10.0).toScientificString(stdOpts)));\r\n    for (double d = min; d <= max; d += delta) {\r\n        // act/assert\r\n        Assertions.assertEquals(d, Double.parseDouble(ParsedDecimal.from(d).toScientificString(stdOpts)));\r\n        Assertions.assertEquals(d, Double.parseDouble(ParsedDecimal.from(d).toScientificString(altOpts)));\r\n        Assertions.assertEquals(d, Double.parseDouble(ParsedDecimal.from(d).toEngineeringString(stdOpts)));\r\n        Assertions.assertEquals(d, Double.parseDouble(ParsedDecimal.from(d).toEngineeringString(altOpts)));\r\n        Assertions.assertEquals(d, Double.parseDouble(ParsedDecimal.from(d).toPlainString(stdOpts)));\r\n        Assertions.assertEquals(d, Double.parseDouble(ParsedDecimal.from(d).toPlainString(altOpts)));\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\numbers\\ParsedDecimalTest.java",
  "methodName" : "testStringMethods_customDigits",
  "sourceCode" : "@Test\r\nvoid testStringMethods_customDigits() {\r\n    // arrange\r\n    final FormatOptionsImpl opts = new FormatOptionsImpl();\r\n    opts.setDigitsFromString(\"abcdefghij\");\r\n    // act/assert\r\n    Assertions.assertEquals(\"b.a\", ParsedDecimal.from(1.0).toPlainString(opts));\r\n    Assertions.assertEquals(\"-a.abcd\", ParsedDecimal.from(-0.0123).toPlainString(opts));\r\n    Assertions.assertEquals(\"bc.de\", ParsedDecimal.from(12.34).toPlainString(opts));\r\n    Assertions.assertEquals(\"baaaa.a\", ParsedDecimal.from(10000).toPlainString(opts));\r\n    Assertions.assertEquals(\"jihgfedcba.a\", ParsedDecimal.from(9876543210d).toPlainString(opts));\r\n    Assertions.assertEquals(\"b.a\", ParsedDecimal.from(1.0).toScientificString(opts));\r\n    Assertions.assertEquals(\"-b.cdE-c\", ParsedDecimal.from(-0.0123).toScientificString(opts));\r\n    Assertions.assertEquals(\"b.cdeEb\", ParsedDecimal.from(12.34).toScientificString(opts));\r\n    Assertions.assertEquals(\"b.aEe\", ParsedDecimal.from(10000).toScientificString(opts));\r\n    Assertions.assertEquals(\"j.ihgfedcbEj\", ParsedDecimal.from(9876543210d).toScientificString(opts));\r\n    Assertions.assertEquals(\"b.a\", ParsedDecimal.from(1.0).toEngineeringString(opts));\r\n    Assertions.assertEquals(\"-bc.dE-d\", ParsedDecimal.from(-0.0123).toEngineeringString(opts));\r\n    Assertions.assertEquals(\"bc.de\", ParsedDecimal.from(12.34).toEngineeringString(opts));\r\n    Assertions.assertEquals(\"ba.aEd\", ParsedDecimal.from(10000).toEngineeringString(opts));\r\n    Assertions.assertEquals(\"j.ihgfedcbEj\", ParsedDecimal.from(9876543210d).toEngineeringString(opts));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\numbers\\ParsedDecimalTest.java",
  "methodName" : "testToEngineeringString_altFormat",
  "sourceCode" : "@Test\r\nvoid testToEngineeringString_altFormat() {\r\n    // arrange\r\n    final FormatOptionsImpl opts = new FormatOptionsImpl();\r\n    opts.setIncludeFractionPlaceholder(false);\r\n    opts.setSignedZero(false);\r\n    opts.setDecimalSeparator(',');\r\n    opts.setMinusSign('!');\r\n    opts.setExponentSeparator(\"x10^\");\r\n    opts.setAlwaysIncludeExponent(true);\r\n    // act/assert\r\n    checkToEngineeringString(0.0, \"0x10^0\", opts);\r\n    checkToEngineeringString(-0.0, \"0x10^0\", opts);\r\n    checkToEngineeringString(1.0, \"1x10^0\", opts);\r\n    checkToEngineeringString(1.5, \"1,5x10^0\", opts);\r\n    checkToEngineeringString(10, \"10x10^0\", opts);\r\n    checkToEngineeringString(-0.000000123, \"!123x10^!9\", opts);\r\n    checkToEngineeringString(12300000, \"12,3x10^6\", opts);\r\n    checkToEngineeringString(Math.PI, \"3,141592653589793x10^0\", opts);\r\n    checkToEngineeringString(Math.E, \"2,718281828459045x10^0\", opts);\r\n    checkToEngineeringString(-Double.MAX_VALUE, \"!179,76931348623157x10^306\", opts);\r\n    checkToEngineeringString(Double.MIN_VALUE, \"4,9x10^!324\", opts);\r\n    checkToEngineeringString(Double.MIN_NORMAL, \"22,250738585072014x10^!309\", opts);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\numbers\\ParsedDecimalTest.java",
  "methodName" : "testToEngineeringString_defaults",
  "sourceCode" : "@Test\r\nvoid testToEngineeringString_defaults() {\r\n    // arrange\r\n    final FormatOptionsImpl opts = new FormatOptionsImpl();\r\n    // act/assert\r\n    checkToEngineeringString(0.0, \"0.0\", opts);\r\n    checkToEngineeringString(-0.0, \"-0.0\", opts);\r\n    checkToEngineeringString(1.0, \"1.0\", opts);\r\n    checkToEngineeringString(1.5, \"1.5\", opts);\r\n    checkToEngineeringString(10, \"10.0\", opts);\r\n    checkToEngineeringString(-0.000000123, \"-123.0E-9\", opts);\r\n    checkToEngineeringString(12300000, \"12.3E6\", opts);\r\n    checkToEngineeringString(Math.PI, \"3.141592653589793\", opts);\r\n    checkToEngineeringString(Math.E, \"2.718281828459045\", opts);\r\n    checkToEngineeringString(-Double.MAX_VALUE, \"-179.76931348623157E306\", opts);\r\n    checkToEngineeringString(Double.MIN_VALUE, \"4.9E-324\", opts);\r\n    checkToEngineeringString(Double.MIN_NORMAL, \"22.250738585072014E-309\", opts);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\numbers\\ParsedDecimalTest.java",
  "methodName" : "testToPlainString_altFormat",
  "sourceCode" : "@Test\r\nvoid testToPlainString_altFormat() {\r\n    // arrange\r\n    final FormatOptionsImpl opts = new FormatOptionsImpl();\r\n    opts.setIncludeFractionPlaceholder(false);\r\n    opts.setSignedZero(false);\r\n    opts.setDecimalSeparator(',');\r\n    opts.setMinusSign('!');\r\n    opts.setThousandsGroupingSeparator('_');\r\n    opts.setGroupThousands(true);\r\n    // act/assert\r\n    checkToPlainString(0.0, \"0\", opts);\r\n    checkToPlainString(-0.0, \"0\", opts);\r\n    checkToPlainString(1.0, \"1\", opts);\r\n    checkToPlainString(1.5, \"1,5\", opts);\r\n    checkToPlainString(12, \"12\", opts);\r\n    checkToPlainString(123, \"123\", opts);\r\n    checkToPlainString(1234, \"1_234\", opts);\r\n    checkToPlainString(12345, \"12_345\", opts);\r\n    checkToPlainString(123456, \"123_456\", opts);\r\n    checkToPlainString(1234567, \"1_234_567\", opts);\r\n    checkToPlainString(12345678, \"12_345_678\", opts);\r\n    checkToPlainString(123456789, \"123_456_789\", opts);\r\n    checkToPlainString(1234567890, \"1_234_567_890\", opts);\r\n    checkToPlainString(-0.000123, \"!0,000123\", opts);\r\n    checkToPlainString(12301, \"12_301\", opts);\r\n    checkToPlainString(Math.PI, \"3,141592653589793\", opts);\r\n    checkToPlainString(Math.E, \"2,718281828459045\", opts);\r\n    checkToPlainString(-12345.6789, \"!12_345,6789\", opts);\r\n    checkToPlainString(1.23e12, \"1_230_000_000_000\", opts);\r\n    checkToPlainString(1.23e-12, \"0,00000000000123\", opts);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\numbers\\ParsedDecimalTest.java",
  "methodName" : "testToPlainString_defaults",
  "sourceCode" : "@Test\r\nvoid testToPlainString_defaults() {\r\n    // arrange\r\n    final FormatOptionsImpl opts = new FormatOptionsImpl();\r\n    // act/assert\r\n    checkToPlainString(0.0, \"0.0\", opts);\r\n    checkToPlainString(-0.0, \"-0.0\", opts);\r\n    checkToPlainString(1.0, \"1.0\", opts);\r\n    checkToPlainString(1.5, \"1.5\", opts);\r\n    checkToPlainString(12, \"12.0\", opts);\r\n    checkToPlainString(123, \"123.0\", opts);\r\n    checkToPlainString(1234, \"1234.0\", opts);\r\n    checkToPlainString(12345, \"12345.0\", opts);\r\n    checkToPlainString(123456, \"123456.0\", opts);\r\n    checkToPlainString(1234567, \"1234567.0\", opts);\r\n    checkToPlainString(12345678, \"12345678.0\", opts);\r\n    checkToPlainString(123456789, \"123456789.0\", opts);\r\n    checkToPlainString(1234567890, \"1234567890.0\", opts);\r\n    checkToPlainString(-0.000123, \"-0.000123\", opts);\r\n    checkToPlainString(12301, \"12301.0\", opts);\r\n    checkToPlainString(Math.PI, \"3.141592653589793\", opts);\r\n    checkToPlainString(Math.E, \"2.718281828459045\", opts);\r\n    checkToPlainString(-12345.6789, \"-12345.6789\", opts);\r\n    checkToPlainString(1.23e12, \"1230000000000.0\", opts);\r\n    checkToPlainString(1.23e-12, \"0.00000000000123\", opts);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\numbers\\ParsedDecimalTest.java",
  "methodName" : "testToScientificString_altFormats",
  "sourceCode" : "@Test\r\nvoid testToScientificString_altFormats() {\r\n    // arrange\r\n    final FormatOptionsImpl opts = new FormatOptionsImpl();\r\n    opts.setIncludeFractionPlaceholder(false);\r\n    opts.setSignedZero(false);\r\n    opts.setDecimalSeparator(',');\r\n    opts.setMinusSign('!');\r\n    opts.setExponentSeparator(\"x10^\");\r\n    opts.setAlwaysIncludeExponent(true);\r\n    // act/assert\r\n    checkToScientificString(0.0, \"0x10^0\", opts);\r\n    checkToScientificString(-0.0, \"0x10^0\", opts);\r\n    checkToScientificString(1.0, \"1x10^0\", opts);\r\n    checkToScientificString(1.5, \"1,5x10^0\", opts);\r\n    checkToScientificString(-0.000123, \"!1,23x10^!4\", opts);\r\n    checkToScientificString(12301, \"1,2301x10^4\", opts);\r\n    checkToScientificString(Math.PI, \"3,141592653589793x10^0\", opts);\r\n    checkToScientificString(Math.E, \"2,718281828459045x10^0\", opts);\r\n    checkToScientificString(-Double.MAX_VALUE, \"!1,7976931348623157x10^308\", opts);\r\n    checkToScientificString(Double.MIN_VALUE, \"4,9x10^!324\", opts);\r\n    checkToScientificString(Double.MIN_NORMAL, \"2,2250738585072014x10^!308\", opts);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\numbers\\ParsedDecimalTest.java",
  "methodName" : "testToScientificString_defaults",
  "sourceCode" : "@Test\r\nvoid testToScientificString_defaults() {\r\n    // arrange\r\n    final FormatOptionsImpl opts = new FormatOptionsImpl();\r\n    // act/assert\r\n    checkToScientificString(0.0, \"0.0\", opts);\r\n    checkToScientificString(-0.0, \"-0.0\", opts);\r\n    checkToScientificString(1.0, \"1.0\", opts);\r\n    checkToScientificString(1.5, \"1.5\", opts);\r\n    checkToScientificString(-0.000123, \"-1.23E-4\", opts);\r\n    checkToScientificString(12301, \"1.2301E4\", opts);\r\n    checkToScientificString(Math.PI, \"3.141592653589793\", opts);\r\n    checkToScientificString(Math.E, \"2.718281828459045\", opts);\r\n    checkToScientificString(-Double.MAX_VALUE, \"-1.7976931348623157E308\", opts);\r\n    checkToScientificString(Double.MIN_VALUE, \"4.9E-324\", opts);\r\n    checkToScientificString(Double.MIN_NORMAL, \"2.2250738585072014E-308\", opts);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\OssFuzzTest.java",
  "methodName" : "test",
  "sourceCode" : "/**\r\n * Input is from clusterfuzz-testcase-StringSubstitutorInterpolatorFuzzer-5447769450741760\r\n *\r\n * @throws Exception Thrown when the test fails.\r\n */\r\n@Disabled(\"Until Apache Commons Lang 3.18.0\")\r\n@Test\r\npublic void test() throws Exception {\r\n    StringSubstitutor.createInterpolator().replace(\"¿ ,${const:ˇda´~e]W]\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000~\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000t\u0000$t\u0000${.u\u0000base64encoder{con+s\u0000{.u\u0000base64encoder{con+s\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000~\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000t\u0000\u0000\u0000....................\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000................ˇˇˇˇˇˇˇˇˇˇ\u0014&${localho\u001Dt:ˇˇˇˇˇˇ4ˇ\u0003.........\u0000\u0000...............\u0017..........s${.!.\u0000${.. \u0000\\\\E],${conÅ\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0000EEE]W€EÅE.!\u0000${.u\u0000base64encoder{conÅ\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0000EEE]W€EÅE.!\u0000${.u\u0000base64encoder{con+s\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000~\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000t\u0000\u0000\u0000....................................ˇˇˇˇˇˇˇˇˇˇ\u0014&${localho\u001Dt:ˇˇˇˇˇˇ-636ˇ\u0003.............................................................\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-\u0000}\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\OssFuzzTest.java",
  "methodName" : "testStringSubstitutorInterpolatorFuzzer5447769450741760",
  "sourceCode" : "/**\r\n * Input is from clusterfuzz-testcase-StringSubstitutorInterpolatorFuzzer-5447769450741760\r\n *\r\n * @throws Exception Thrown when the test fails.\r\n */\r\n@Test\r\npublic void testStringSubstitutorInterpolatorFuzzer5447769450741760() throws Exception {\r\n    StringSubstitutor.createInterpolator().replace(\"${date:swswswswswsswswswswswswwswsswswswswsswswswswsswswswswswswswswswswsws}\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\RandomStringGeneratorTest.java",
  "methodName" : "testBadMaximumCodePoint",
  "sourceCode" : "@Test\r\nvoid testBadMaximumCodePoint() {\r\n    assertThrowsExactly(IllegalArgumentException.class, () -> RandomStringGenerator.builder().withinRange(0, Character.MAX_CODE_POINT + 1));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\RandomStringGeneratorTest.java",
  "methodName" : "testBadMinAndMax",
  "sourceCode" : "@Test\r\nvoid testBadMinAndMax() {\r\n    assertThrowsExactly(IllegalArgumentException.class, () -> RandomStringGenerator.builder().withinRange(2, 1));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\RandomStringGeneratorTest.java",
  "methodName" : "testBadMinimumCodePoint",
  "sourceCode" : "@Test\r\nvoid testBadMinimumCodePoint() {\r\n    assertThrowsExactly(IllegalArgumentException.class, () -> RandomStringGenerator.builder().withinRange(-1, 1));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\RandomStringGeneratorTest.java",
  "methodName" : "testBuildDeprecated",
  "sourceCode" : "@Test\r\nvoid testBuildDeprecated() {\r\n    final RandomStringGenerator.Builder builder = RandomStringGenerator.builder().withinRange('a', 'z').filteredBy(A_FILTER);\r\n    final String str = builder.filteredBy(B_FILTER).build().generate(100);\r\n    for (final char c : str.toCharArray()) {\r\n        assertEquals('b', c);\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\RandomStringGeneratorTest.java",
  "methodName" : "testChangeOfFilter",
  "sourceCode" : "@Test\r\nvoid testChangeOfFilter() {\r\n    final RandomStringGenerator.Builder builder = RandomStringGenerator.builder().withinRange('a', 'z').filteredBy(A_FILTER);\r\n    final String str = builder.filteredBy(B_FILTER).get().generate(100);\r\n    for (final char c : str.toCharArray()) {\r\n        assertEquals('b', c);\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\RandomStringGeneratorTest.java",
  "methodName" : "testGenerateMinMaxLength",
  "sourceCode" : "@Test\r\nvoid testGenerateMinMaxLength() {\r\n    final int minLength = 0;\r\n    final int maxLength = 3;\r\n    final RandomStringGenerator generator = RandomStringGenerator.builder().get();\r\n    final String str = generator.generate(minLength, maxLength);\r\n    final int codePointLength = codePointLength(str);\r\n    assertTrue(codePointLength >= minLength && codePointLength <= maxLength);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\RandomStringGeneratorTest.java",
  "methodName" : "testGenerateMinMaxLengthInvalidLength",
  "sourceCode" : "@Test\r\nvoid testGenerateMinMaxLengthInvalidLength() {\r\n    assertThrowsExactly(IllegalArgumentException.class, () -> {\r\n        final RandomStringGenerator generator = RandomStringGenerator.builder().get();\r\n        generator.generate(-1, 0);\r\n    });\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\RandomStringGeneratorTest.java",
  "methodName" : "testGenerateMinMaxLengthMinGreaterThanMax",
  "sourceCode" : "@Test\r\nvoid testGenerateMinMaxLengthMinGreaterThanMax() {\r\n    assertThrowsExactly(IllegalArgumentException.class, () -> {\r\n        final RandomStringGenerator generator = RandomStringGenerator.builder().get();\r\n        generator.generate(1, 0);\r\n    });\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\RandomStringGeneratorTest.java",
  "methodName" : "testGenerateTakingIntThrowsNullPointerException",
  "sourceCode" : "@Test\r\nvoid testGenerateTakingIntThrowsNullPointerException() {\r\n    assertThrowsExactly(NullPointerException.class, () -> {\r\n        final RandomStringGenerator.Builder randomStringGeneratorBuilder = RandomStringGenerator.builder();\r\n        final CharacterPredicate[] characterPredicateArray = new CharacterPredicate[2];\r\n        randomStringGeneratorBuilder.filteredBy(characterPredicateArray);\r\n        final RandomStringGenerator randomStringGenerator = randomStringGeneratorBuilder.get();\r\n        randomStringGenerator.generate(18);\r\n    });\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\RandomStringGeneratorTest.java",
  "methodName" : "testInvalidLength",
  "sourceCode" : "@Test\r\nvoid testInvalidLength() {\r\n    assertThrowsExactly(IllegalArgumentException.class, () -> RandomStringGenerator.builder().get().generate(-1));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\RandomStringGeneratorTest.java",
  "methodName" : "testMultipleFilters",
  "sourceCode" : "@Test\r\nvoid testMultipleFilters() {\r\n    final String str = RandomStringGenerator.builder().withinRange('a', 'd').filteredBy(A_FILTER, B_FILTER).get().generate(5000);\r\n    boolean aFound = false;\r\n    boolean bFound = false;\r\n    for (final char c : str.toCharArray()) {\r\n        if (c == 'a') {\r\n            aFound = true;\r\n        } else if (c == 'b') {\r\n            bFound = true;\r\n        } else {\r\n            fail(\"Invalid character\");\r\n        }\r\n    }\r\n    assertTrue(aFound && bFound);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\RandomStringGeneratorTest.java",
  "methodName" : "testNoLoneSurrogates",
  "sourceCode" : "@Test\r\nvoid testNoLoneSurrogates() {\r\n    final int length = 5000;\r\n    final String str = RandomStringGenerator.builder().get().generate(length);\r\n    char lastChar = str.charAt(0);\r\n    for (int i = 1; i < str.length(); i++) {\r\n        final char c = str.charAt(i);\r\n        if (Character.isLowSurrogate(c)) {\r\n            assertTrue(Character.isHighSurrogate(lastChar));\r\n        }\r\n        if (Character.isHighSurrogate(lastChar)) {\r\n            assertTrue(Character.isLowSurrogate(c));\r\n        }\r\n        if (Character.isHighSurrogate(c)) {\r\n            // test this isn't the last character in the string\r\n            assertTrue(i + 1 < str.length());\r\n        }\r\n        lastChar = c;\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\RandomStringGeneratorTest.java",
  "methodName" : "testNoPrivateCharacters",
  "sourceCode" : "@Test\r\nvoid testNoPrivateCharacters() {\r\n    final int startOfPrivateBMPChars = 0xE000;\r\n    // Request a string in an area of the Basic Multilingual Plane that is\r\n    // largely occupied by private characters\r\n    final String str = RandomStringGenerator.builder().withinRange(startOfPrivateBMPChars, Character.MIN_SUPPLEMENTARY_CODE_POINT - 1).get().generate(5000);\r\n    int i = 0;\r\n    do {\r\n        final int codePoint = str.codePointAt(i);\r\n        assertFalse(Character.getType(codePoint) == Character.PRIVATE_USE);\r\n        i += Character.charCount(codePoint);\r\n    } while (i < str.length());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\RandomStringGeneratorTest.java",
  "methodName" : "testPasswordExample",
  "sourceCode" : "@Test\r\nvoid testPasswordExample() {\r\n    final char[] punctuation = ArraySorter.sort(new char[] { '!', '\"', '#', '$', '&', '\\'', '(', ')', ',', '.', ':', ';', '?', '@', '[', '\\\\', ']', '^', '_', '`', '{', '|', '}', '~' });\r\n    // @formatter:off\r\n    final RandomStringGenerator generator = RandomStringGenerator.builder().setAccumulate(true).withinRange('a', 'z').withinRange('A', 'Z').withinRange('0', '9').selectFrom(punctuation).get();\r\n    // @formatter:on\r\n    final String randomText = generator.generate(10);\r\n    for (final char c : randomText.toCharArray()) {\r\n        assertTrue(Character.isLetter(c) || Character.isDigit(c) || Arrays.binarySearch(punctuation, c) >= 0);\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\RandomStringGeneratorTest.java",
  "methodName" : "testRemoveFilters",
  "sourceCode" : "@Test\r\nvoid testRemoveFilters() {\r\n    final RandomStringGenerator.Builder builder = RandomStringGenerator.builder().withinRange('a', 'z').filteredBy(A_FILTER);\r\n    builder.filteredBy();\r\n    final String str = builder.get().generate(100);\r\n    for (final char c : str.toCharArray()) {\r\n        if (c != 'a') {\r\n            // filter was successfully removed\r\n            return;\r\n        }\r\n    }\r\n    fail(\"Filter appears to have remained in place\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\RandomStringGeneratorTest.java",
  "methodName" : "testSelectFromCharArray",
  "sourceCode" : "@Test\r\nvoid testSelectFromCharArray() {\r\n    final String str = \"abc\";\r\n    final char[] charArray = str.toCharArray();\r\n    final RandomStringGenerator generator = RandomStringGenerator.builder().selectFrom(charArray).get();\r\n    final String randomText = generator.generate(5);\r\n    for (final char c : randomText.toCharArray()) {\r\n        assertTrue(str.indexOf(c) != -1);\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\RandomStringGeneratorTest.java",
  "methodName" : "testSelectFromCharVarargs",
  "sourceCode" : "@Test\r\nvoid testSelectFromCharVarargs() {\r\n    final String str = \"abc\";\r\n    final RandomStringGenerator generator = RandomStringGenerator.builder().selectFrom('a', 'b', 'c').get();\r\n    final String randomText = generator.generate(5);\r\n    for (final char c : randomText.toCharArray()) {\r\n        assertTrue(str.indexOf(c) != -1);\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\RandomStringGeneratorTest.java",
  "methodName" : "testSelectFromCharVarargs2",
  "sourceCode" : "@ParameterizedTest\r\n@ValueSource(booleans = { false, true })\r\nvoid testSelectFromCharVarargs2(final boolean accumulate) {\r\n    final String str = \"abcde\";\r\n    // @formatter:off\r\n    final RandomStringGenerator generator = RandomStringGenerator.builder().setAccumulate(accumulate).selectFrom().selectFrom(null).selectFrom('a', 'b').selectFrom('a', 'b', 'c').selectFrom('a', 'b', 'c', 'd').selectFrom('a', 'b', 'c', 'd', // only this last call matters when accumulate is false\r\n    'e').get();\r\n    // @formatter:on\r\n    final String randomText = generator.generate(10);\r\n    for (final char c : randomText.toCharArray()) {\r\n        assertTrue(str.indexOf(c) != -1);\r\n    }\r\n}",
  "annotations" : [ "ParameterizedTest" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\RandomStringGeneratorTest.java",
  "methodName" : "testSelectFromCharVarargs3",
  "sourceCode" : "@ParameterizedTest\r\n@ValueSource(booleans = { false, true })\r\nvoid testSelectFromCharVarargs3(final boolean accumulate) {\r\n    final String str = \"abcde\";\r\n    // @formatter:off\r\n    final RandomStringGenerator generator = RandomStringGenerator.builder().setAccumulate(accumulate).selectFrom('a', 'b', 'c', 'd', 'e').selectFrom('a', 'b', 'c', 'd').selectFrom('a', 'b', 'c').selectFrom('a', 'b').selectFrom(null).selectFrom().get();\r\n    // @formatter:on\r\n    final String randomText = generator.generate(10);\r\n    for (final char c : randomText.toCharArray()) {\r\n        assertEquals(accumulate, str.indexOf(c) != -1);\r\n    }\r\n}",
  "annotations" : [ "ParameterizedTest" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\RandomStringGeneratorTest.java",
  "methodName" : "testSelectFromCharVarargSize1",
  "sourceCode" : "@Test\r\nvoid testSelectFromCharVarargSize1() {\r\n    final RandomStringGenerator generator = RandomStringGenerator.builder().selectFrom('a').get();\r\n    final String randomText = generator.generate(5);\r\n    for (final char c : randomText.toCharArray()) {\r\n        assertEquals('a', c);\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\RandomStringGeneratorTest.java",
  "methodName" : "testSelectFromEmptyCharVarargs",
  "sourceCode" : "@Test\r\nvoid testSelectFromEmptyCharVarargs() {\r\n    final RandomStringGenerator generator = RandomStringGenerator.builder().selectFrom().get();\r\n    final String randomText = generator.generate(5);\r\n    for (final char c : randomText.toCharArray()) {\r\n        assertTrue(c >= Character.MIN_CODE_POINT && c <= Character.MAX_CODE_POINT);\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\RandomStringGeneratorTest.java",
  "methodName" : "testSelectFromNullCharVarargs",
  "sourceCode" : "@Test\r\nvoid testSelectFromNullCharVarargs() {\r\n    final int length = 5;\r\n    RandomStringGenerator generator = RandomStringGenerator.builder().selectFrom(null).get();\r\n    String randomText = generator.generate(length);\r\n    assertEquals(length, codePointLength(randomText));\r\n    for (final char c : randomText.toCharArray()) {\r\n        assertTrue(c >= Character.MIN_CODE_POINT && c <= Character.MAX_CODE_POINT);\r\n    }\r\n    //\r\n    final Builder builder = RandomStringGenerator.builder().selectFrom('a');\r\n    generator = builder.get();\r\n    randomText = generator.generate(length);\r\n    for (final char c : randomText.toCharArray()) {\r\n        assertEquals('a', c);\r\n    }\r\n    // null input resets\r\n    generator = builder.selectFrom(null).get();\r\n    randomText = generator.generate(length);\r\n    assertEquals(length, codePointLength(randomText));\r\n    for (final char c : randomText.toCharArray()) {\r\n        assertTrue(c >= Character.MIN_CODE_POINT && c <= Character.MAX_CODE_POINT);\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\RandomStringGeneratorTest.java",
  "methodName" : "testSetLength",
  "sourceCode" : "@Test\r\nvoid testSetLength() {\r\n    final int length = 99;\r\n    final RandomStringGenerator generator = RandomStringGenerator.builder().get();\r\n    final String str = generator.generate(length);\r\n    assertEquals(length, codePointLength(str));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\RandomStringGeneratorTest.java",
  "methodName" : "testUsingRandomIntUnaryOperator",
  "sourceCode" : "@Test\r\nvoid testUsingRandomIntUnaryOperator() {\r\n    final char testChar = 'a';\r\n    final IntUnaryOperator testRandom = n -> testChar;\r\n    final String str = RandomStringGenerator.builder().usingRandom(testRandom).get().generate(10);\r\n    for (final char c : str.toCharArray()) {\r\n        assertEquals(testChar, c);\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\RandomStringGeneratorTest.java",
  "methodName" : "testUsingRandomTextRandomProvider",
  "sourceCode" : "@Test\r\nvoid testUsingRandomTextRandomProvider() {\r\n    final char testChar = 'a';\r\n    final TextRandomProvider testRandom = n -> testChar;\r\n    final String str = RandomStringGenerator.builder().usingRandom(testRandom).get().generate(10);\r\n    for (final char c : str.toCharArray()) {\r\n        assertEquals(testChar, c);\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\RandomStringGeneratorTest.java",
  "methodName" : "testWithinMultipleRanges",
  "sourceCode" : "@Test\r\nvoid testWithinMultipleRanges() {\r\n    final int length = 5000;\r\n    final char[][] pairs = { { 'a', 'z' }, { '0', '9' } };\r\n    // @formatter:off\r\n    final RandomStringGenerator generator = RandomStringGenerator.builder().withinRange().withinRange((char[][]) null).withinRange(pairs).get();\r\n    // @formatter:on\r\n    final String str = generator.generate(length);\r\n    int minimumCodePoint = 0, maximumCodePoint = 0;\r\n    for (final char[] pair : pairs) {\r\n        minimumCodePoint = Math.min(minimumCodePoint, pair[0]);\r\n        maximumCodePoint = Math.max(maximumCodePoint, pair[1]);\r\n    }\r\n    int i = 0;\r\n    do {\r\n        final int codePoint = str.codePointAt(i);\r\n        assertTrue(codePoint >= minimumCodePoint && codePoint <= maximumCodePoint);\r\n        i += Character.charCount(codePoint);\r\n    } while (i < str.length());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\RandomStringGeneratorTest.java",
  "methodName" : "testWithinRange",
  "sourceCode" : "@Test\r\nvoid testWithinRange() {\r\n    final int length = 5000;\r\n    final int minimumCodePoint = 'a';\r\n    final int maximumCodePoint = 'z';\r\n    final RandomStringGenerator generator = RandomStringGenerator.builder().withinRange(minimumCodePoint, maximumCodePoint).get();\r\n    final String str = generator.generate(length);\r\n    int i = 0;\r\n    do {\r\n        final int codePoint = str.codePointAt(i);\r\n        assertTrue(codePoint >= minimumCodePoint && codePoint <= maximumCodePoint);\r\n        i += Character.charCount(codePoint);\r\n    } while (i < str.length());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\RandomStringGeneratorTest.java",
  "methodName" : "testZeroLength",
  "sourceCode" : "@Test\r\nvoid testZeroLength() {\r\n    final RandomStringGenerator generator = RandomStringGenerator.builder().get();\r\n    assertEquals(\"\", generator.generate(0));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\similarity\\CosineDistanceTest.java",
  "methodName" : "testCosineDistance",
  "sourceCode" : "/**\r\n * Tests the cosine distance with several inputs.\r\n */\r\n@Test\r\nvoid testCosineDistance() {\r\n    assertEquals(Double.valueOf(0.5d), roundValue(cosineDistance.apply(\"the house\", \"da house\")));\r\n    assertEquals(Double.valueOf(0.0d), roundValue(cosineDistance.apply(\"AB\", \"AB\")));\r\n    assertEquals(Double.valueOf(1.0d), roundValue(cosineDistance.apply(\"AB\", \"BA\")));\r\n    assertEquals(Double.valueOf(0.08d), roundValue(cosineDistance.apply(\"the boy was from tamana shi, kumamoto ken, and the girl was from rio de janeiro, rio\", \"the boy was from tamana shi, kumamoto, and the boy was from rio de janeiro, rio de janeiro\")));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\similarity\\CosineSimilarityTest.java",
  "methodName" : "testCosineSimilarityReturningDoubleWhereByteValueIsZero",
  "sourceCode" : "@Test\r\nvoid testCosineSimilarityReturningDoubleWhereByteValueIsZero() {\r\n    final Map<CharSequence, Integer> hashMap = new HashMap<>();\r\n    assertEquals(0.0, CosineSimilarity.INSTANCE.cosineSimilarity(hashMap, hashMap), 0.01);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\similarity\\CosineSimilarityTest.java",
  "methodName" : "testCosineSimilarityThrowsIllegalArgumentException",
  "sourceCode" : "@Test\r\nvoid testCosineSimilarityThrowsIllegalArgumentException() {\r\n    assertThrows(IllegalArgumentException.class, () -> CosineSimilarity.INSTANCE.cosineSimilarity(new HashMap<>(), null));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\similarity\\CosineSimilarityTest.java",
  "methodName" : "testCosineSimilarityWithNonEmptyMap",
  "sourceCode" : "@Test\r\nvoid testCosineSimilarityWithNonEmptyMap() {\r\n    final Map<CharSequence, Integer> hashMap = new HashMap<>();\r\n    final Integer integer = -397;\r\n    hashMap.put(\"3J/$3.L\", integer);\r\n    final Map<CharSequence, Integer> hashMapTwo = new HashMap<>();\r\n    assertEquals(0.0, CosineSimilarity.INSTANCE.cosineSimilarity(hashMap, hashMapTwo), 0.01);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\similarity\\CosineSimilarityTest.java",
  "methodName" : "testCosineSimilarityWithNull",
  "sourceCode" : "@Test\r\nvoid testCosineSimilarityWithNull() {\r\n    assertThrows(IllegalArgumentException.class, () -> CosineSimilarity.INSTANCE.cosineSimilarity(null, null));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\similarity\\FuzzyScoreTest.java",
  "methodName" : "testGetFuzzyScore",
  "sourceCode" : "@Test\r\nvoid testGetFuzzyScore() {\r\n    assertEquals(0, ENGLISH_SCORE.fuzzyScore(\"\", \"\"));\r\n    assertEquals(0, ENGLISH_SCORE.fuzzyScore(\"Workshop\", \"b\"));\r\n    assertEquals(1, ENGLISH_SCORE.fuzzyScore(\"Room\", \"o\"));\r\n    assertEquals(1, ENGLISH_SCORE.fuzzyScore(\"Workshop\", \"w\"));\r\n    assertEquals(2, ENGLISH_SCORE.fuzzyScore(\"Workshop\", \"ws\"));\r\n    assertEquals(4, ENGLISH_SCORE.fuzzyScore(\"Workshop\", \"wo\"));\r\n    assertEquals(3, ENGLISH_SCORE.fuzzyScore(\"Apache Software Foundation\", \"asf\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\similarity\\FuzzyScoreTest.java",
  "methodName" : "testGetFuzzyScore_NullNullLocale",
  "sourceCode" : "@Test\r\nvoid testGetFuzzyScore_NullNullLocale() {\r\n    assertThrows(IllegalArgumentException.class, () -> ENGLISH_SCORE.fuzzyScore(null, null));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\similarity\\FuzzyScoreTest.java",
  "methodName" : "testGetFuzzyScore_NullStringLocale",
  "sourceCode" : "@Test\r\nvoid testGetFuzzyScore_NullStringLocale() {\r\n    assertThrows(IllegalArgumentException.class, () -> ENGLISH_SCORE.fuzzyScore(null, \"not null\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\similarity\\FuzzyScoreTest.java",
  "methodName" : "testGetFuzzyScore_StringNullLocale",
  "sourceCode" : "@Test\r\nvoid testGetFuzzyScore_StringNullLocale() {\r\n    assertThrows(IllegalArgumentException.class, () -> ENGLISH_SCORE.fuzzyScore(\"not null\", null));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\similarity\\FuzzyScoreTest.java",
  "methodName" : "testGetLocale",
  "sourceCode" : "@Test\r\nvoid testGetLocale() {\r\n    final Locale locale = Locale.CANADA_FRENCH;\r\n    final FuzzyScore fuzzyScore = new FuzzyScore(locale);\r\n    final Locale localeTwo = fuzzyScore.getLocale();\r\n    assertSame(localeTwo, locale);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\similarity\\FuzzyScoreTest.java",
  "methodName" : "testMissingLocale",
  "sourceCode" : "@Test\r\nvoid testMissingLocale() {\r\n    assertThrows(IllegalArgumentException.class, () -> new FuzzyScore((Locale) null));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\similarity\\HammingDistanceTest.java",
  "methodName" : "testHammingDistance",
  "sourceCode" : "@ParameterizedTest\r\n@MethodSource(\"org.apache.commons.text.similarity.SimilarityInputTest#similarityInputsEquals()\")\r\nvoid testHammingDistance(final Class<?> cls) {\r\n    assertEquals(0, distance.apply(SimilarityInputTest.build(cls, \"\"), SimilarityInputTest.build(cls, \"\")));\r\n    assertEquals(0, distance.apply(SimilarityInputTest.build(cls, \"pappa\"), SimilarityInputTest.build(cls, \"pappa\")));\r\n    assertEquals(1, distance.apply(SimilarityInputTest.build(cls, \"papaa\"), SimilarityInputTest.build(cls, \"pappa\")));\r\n    assertEquals(3, distance.apply(SimilarityInputTest.build(cls, \"karolin\"), SimilarityInputTest.build(cls, \"kathrin\")));\r\n    assertEquals(3, distance.apply(SimilarityInputTest.build(cls, \"karolin\"), SimilarityInputTest.build(cls, \"kerstin\")));\r\n    assertEquals(2, distance.apply(SimilarityInputTest.build(cls, \"1011101\"), SimilarityInputTest.build(cls, \"1001001\")));\r\n    assertEquals(3, distance.apply(SimilarityInputTest.build(cls, \"2173896\"), SimilarityInputTest.build(cls, \"2233796\")));\r\n    assertEquals(2, distance.apply(SimilarityInputTest.build(cls, \"ATCG\"), SimilarityInputTest.build(cls, \"ACCC\")));\r\n}",
  "annotations" : [ "ParameterizedTest" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\similarity\\HammingDistanceTest.java",
  "methodName" : "testHammingDistance_nullLeftValue",
  "sourceCode" : "@Test\r\nvoid testHammingDistance_nullLeftValue() {\r\n    assertThrows(IllegalArgumentException.class, () -> distance.apply(null, \"\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\similarity\\HammingDistanceTest.java",
  "methodName" : "testHammingDistance_nullRightValue",
  "sourceCode" : "@Test\r\nvoid testHammingDistance_nullRightValue() {\r\n    assertThrows(IllegalArgumentException.class, () -> distance.apply(\"\", null));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\similarity\\HammingDistanceTest.java",
  "methodName" : "testHammingDistanceCharSequence",
  "sourceCode" : "@Test\r\nvoid testHammingDistanceCharSequence() {\r\n    assertEquals(0, distance.apply(\"\", \"\"));\r\n    assertEquals(0, distance.apply(\"pappa\", \"pappa\"));\r\n    assertEquals(1, distance.apply(\"papaa\", \"pappa\"));\r\n    assertEquals(3, distance.apply(\"karolin\", \"kathrin\"));\r\n    assertEquals(3, distance.apply(\"karolin\", \"kerstin\"));\r\n    assertEquals(2, distance.apply(\"1011101\", \"1001001\"));\r\n    assertEquals(3, distance.apply(\"2173896\", \"2233796\"));\r\n    assertEquals(2, distance.apply(\"ATCG\", \"ACCC\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\similarity\\IntersectionResultTest.java",
  "methodName" : "testEquals",
  "sourceCode" : "@Test\r\nvoid testEquals() {\r\n    final IntersectionResult[] results = { new IntersectionResult(0, 0, 0), new IntersectionResult(10, 0, 0), new IntersectionResult(10, 10, 0), new IntersectionResult(10, 10, 10) };\r\n    // Test a different instance with same values\r\n    Assertions.assertEquals(results[0], new IntersectionResult(0, 0, 0));\r\n    final Object something = new Object();\r\n    for (int i = 0; i < results.length; i++) {\r\n        Assertions.assertNotEquals(results[i], something);\r\n        Assertions.assertNotEquals(null, results[i]);\r\n        for (int j = 0; j < results.length; j++) {\r\n            Assertions.assertEquals(results[i].equals(results[j]), i == j);\r\n        }\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\similarity\\IntersectionResultTest.java",
  "methodName" : "testHashCode",
  "sourceCode" : "@Test\r\nvoid testHashCode() {\r\n    final IntersectionResult[] results = { new IntersectionResult(10, 0, 0), new IntersectionResult(10, 10, 0), new IntersectionResult(10, 10, 10) };\r\n    final HashMap<IntersectionResult, Integer> map = new HashMap<>();\r\n    final int offset = 123;\r\n    for (int i = 0; i < results.length; i++) {\r\n        map.put(results[i], i + offset);\r\n    }\r\n    for (int i = 0; i < results.length; i++) {\r\n        Assertions.assertEquals(i + offset, map.get(results[i]));\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\similarity\\IntersectionResultTest.java",
  "methodName" : "testNewIntersectionResult_WithIntersectionAboveSizeAorB",
  "sourceCode" : "@Test\r\nvoid testNewIntersectionResult_WithIntersectionAboveSizeAorB() {\r\n    final int sizeA = 1;\r\n    final int sizeB = 2;\r\n    final int intersection = Math.max(sizeA, sizeB) + 1;\r\n    Assertions.assertThrows(IllegalArgumentException.class, () -> new IntersectionResult(sizeA, sizeB, intersection));\r\n    Assertions.assertThrows(IllegalArgumentException.class, () -> new IntersectionResult(sizeB, sizeA, intersection));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\similarity\\IntersectionResultTest.java",
  "methodName" : "testNewIntersectionResult_WithNegativeIntersection",
  "sourceCode" : "@Test\r\nvoid testNewIntersectionResult_WithNegativeIntersection() {\r\n    final int sizeA = 0;\r\n    final int sizeB = 0;\r\n    final int intersection = -1;\r\n    Assertions.assertThrows(IllegalArgumentException.class, () -> new IntersectionResult(sizeA, sizeB, intersection));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\similarity\\IntersectionResultTest.java",
  "methodName" : "testNewIntersectionResult_WithNegativeSizeA",
  "sourceCode" : "@Test\r\nvoid testNewIntersectionResult_WithNegativeSizeA() {\r\n    final int sizeA = -1;\r\n    final int sizeB = 0;\r\n    final int intersection = 0;\r\n    Assertions.assertThrows(IllegalArgumentException.class, () -> new IntersectionResult(sizeA, sizeB, intersection));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\similarity\\IntersectionResultTest.java",
  "methodName" : "testNewIntersectionResult_WithNegativeSizeB",
  "sourceCode" : "@Test\r\nvoid testNewIntersectionResult_WithNegativeSizeB() {\r\n    final int sizeA = 0;\r\n    final int sizeB = -1;\r\n    final int intersection = 0;\r\n    Assertions.assertThrows(IllegalArgumentException.class, () -> new IntersectionResult(sizeA, sizeB, intersection));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\similarity\\IntersectionResultTest.java",
  "methodName" : "testNewIntersectionResult_WithZeros",
  "sourceCode" : "@Test\r\nvoid testNewIntersectionResult_WithZeros() {\r\n    final int sizeA = 0;\r\n    final int sizeB = 0;\r\n    final int intersection = 0;\r\n    new IntersectionResult(sizeA, sizeB, intersection);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\similarity\\IntersectionResultTest.java",
  "methodName" : "testProperties",
  "sourceCode" : "@Test\r\nvoid testProperties() {\r\n    final ThreadLocalRandom rand = ThreadLocalRandom.current();\r\n    final int max = 1024;\r\n    for (int i = 0; i < 5; i++) {\r\n        // Ensure the min is above 0\r\n        final int sizeA = rand.nextInt(max) + 1;\r\n        final int sizeB = rand.nextInt(max) + 1;\r\n        final int intersection = rand.nextInt(Math.min(sizeA, sizeB));\r\n        final IntersectionResult result = new IntersectionResult(sizeA, sizeB, intersection);\r\n        Assertions.assertEquals(sizeA, result.getSizeA());\r\n        Assertions.assertEquals(sizeB, result.getSizeB());\r\n        Assertions.assertEquals(intersection, result.getIntersection());\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\similarity\\IntersectionResultTest.java",
  "methodName" : "testToString",
  "sourceCode" : "@Test\r\nvoid testToString() {\r\n    final ThreadLocalRandom rand = ThreadLocalRandom.current();\r\n    final int max = 9;\r\n    for (int i = 0; i < 5; i++) {\r\n        // Ensure the min is above 0\r\n        final int sizeA = rand.nextInt(max) + 1;\r\n        final int sizeB = rand.nextInt(max) + 1;\r\n        final int intersection = rand.nextInt(Math.min(sizeA, sizeB));\r\n        final IntersectionResult result = new IntersectionResult(sizeA, sizeB, intersection);\r\n        final String string = result.toString();\r\n        // Not perfect as this will match substrings too. The chance of error\r\n        // is limited by restricting the numbers to a max of 10.\r\n        Assertions.assertTrue(string.contains(String.valueOf(sizeA)));\r\n        Assertions.assertTrue(string.contains(String.valueOf(sizeB)));\r\n        Assertions.assertTrue(string.contains(String.valueOf(intersection)));\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\similarity\\IntersectionSimilarityTest.java",
  "methodName" : "testApplyNullNull",
  "sourceCode" : "@Test\r\nvoid testApplyNullNull() {\r\n    assertThrows(IllegalArgumentException.class, () -> new IntersectionSimilarity<>(cs -> new HashSet<>(Collections.singletonList(cs))).apply(null, null));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\similarity\\IntersectionSimilarityTest.java",
  "methodName" : "testApplyNullString",
  "sourceCode" : "@Test\r\nvoid testApplyNullString() {\r\n    assertThrows(IllegalArgumentException.class, () -> new IntersectionSimilarity<>(cs -> new HashSet<>(Collections.singletonList(cs))).apply(null, \"right\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\similarity\\IntersectionSimilarityTest.java",
  "methodName" : "testApplyStringNull",
  "sourceCode" : "@Test\r\nvoid testApplyStringNull() {\r\n    assertThrows(IllegalArgumentException.class, () -> new IntersectionSimilarity<>(cs -> new HashSet<>(Collections.singletonList(cs))).apply(\"left\", null));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\similarity\\IntersectionSimilarityTest.java",
  "methodName" : "testConstructorWithNullConverterThrows",
  "sourceCode" : "@Test\r\nvoid testConstructorWithNullConverterThrows() {\r\n    assertThrows(IllegalArgumentException.class, () -> new IntersectionSimilarity<>(null));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\similarity\\IntersectionSimilarityTest.java",
  "methodName" : "testF1ScoreUsingListWordBigrams",
  "sourceCode" : "@Test\r\nvoid testF1ScoreUsingListWordBigrams() {\r\n    // Example of a word letter pairs algorithm by Simon White:\r\n    // http://www.catalysoft.com/articles/StrikeAMatch.html\r\n    // This splits into words using whitespace and then computes uppercase\r\n    // bigrams for each word.\r\n    // Split on whitespace\r\n    final Pattern pattern = Pattern.compile(\"\\\\s+\");\r\n    // Compute using pairs of characters (bigrams) for each word.\r\n    // This can be done using a 32-bit int to store two 16-bit characters\r\n    final Function<CharSequence, Collection<Integer>> converter = cs -> {\r\n        final List<Integer> set = new ArrayList<>();\r\n        for (final String word : pattern.split(cs)) {\r\n            if (word.length() > 1) {\r\n                // The strings are converted to upper case\r\n                char ch2 = Character.toUpperCase(word.charAt(0));\r\n                for (int i = 1; i < word.length(); i++) {\r\n                    final char ch1 = ch2;\r\n                    ch2 = Character.toUpperCase(word.charAt(i));\r\n                    set.add(Integer.valueOf(ch1 << 16 | ch2));\r\n                }\r\n            }\r\n        }\r\n        return set;\r\n    };\r\n    final IntersectionSimilarity<Integer> similarity = new IntersectionSimilarity<>(converter);\r\n    String bookTitle;\r\n    final String search1 = \"Web Database Applications\";\r\n    final String search2 = \"PHP Web Applications\";\r\n    final String search3 = \"Web Aplications\";\r\n    bookTitle = \"Web Database Applications with PHP & MySQL\";\r\n    assertEquals(82, toF1ScorePercent(similarity.apply(bookTitle, search1)));\r\n    assertEquals(68, toF1ScorePercent(similarity.apply(bookTitle, search2)));\r\n    assertEquals(59, toF1ScorePercent(similarity.apply(bookTitle, search3)));\r\n    bookTitle = \"Creating Database Web Applications with PHP and ASP\";\r\n    assertEquals(71, toF1ScorePercent(similarity.apply(bookTitle, search1)));\r\n    assertEquals(59, toF1ScorePercent(similarity.apply(bookTitle, search2)));\r\n    assertEquals(50, toF1ScorePercent(similarity.apply(bookTitle, search3)));\r\n    bookTitle = \"Building Database Applications on the Web Using PHP3\";\r\n    assertEquals(70, toF1ScorePercent(similarity.apply(bookTitle, search1)));\r\n    assertEquals(58, toF1ScorePercent(similarity.apply(bookTitle, search2)));\r\n    assertEquals(49, toF1ScorePercent(similarity.apply(bookTitle, search3)));\r\n    bookTitle = \"Building Web Database Applications with Visual Studio 6\";\r\n    assertEquals(67, toF1ScorePercent(similarity.apply(bookTitle, search1)));\r\n    assertEquals(47, toF1ScorePercent(similarity.apply(bookTitle, search2)));\r\n    assertEquals(46, toF1ScorePercent(similarity.apply(bookTitle, search3)));\r\n    bookTitle = \"Web Application Development With PHP\";\r\n    assertEquals(51, toF1ScorePercent(similarity.apply(bookTitle, search1)));\r\n    assertEquals(67, toF1ScorePercent(similarity.apply(bookTitle, search2)));\r\n    assertEquals(56, toF1ScorePercent(similarity.apply(bookTitle, search3)));\r\n    bookTitle = \"WebRAD: Building Database Applications on the Web with Visual FoxPro and Web Connection\";\r\n    assertEquals(49, toF1ScorePercent(similarity.apply(bookTitle, search1)));\r\n    assertEquals(34, toF1ScorePercent(similarity.apply(bookTitle, search2)));\r\n    assertEquals(32, toF1ScorePercent(similarity.apply(bookTitle, search3)));\r\n    bookTitle = \"Structural Assessment: The Role of Large and Full-Scale Testing\";\r\n    assertEquals(12, toF1ScorePercent(similarity.apply(bookTitle, search1)));\r\n    assertEquals(7, toF1ScorePercent(similarity.apply(bookTitle, search2)));\r\n    assertEquals(7, toF1ScorePercent(similarity.apply(bookTitle, search3)));\r\n    bookTitle = \"How to Find a Scholarship Online\";\r\n    assertEquals(10, toF1ScorePercent(similarity.apply(bookTitle, search1)));\r\n    assertEquals(11, toF1ScorePercent(similarity.apply(bookTitle, search2)));\r\n    assertEquals(12, toF1ScorePercent(similarity.apply(bookTitle, search3)));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\similarity\\IntersectionSimilarityTest.java",
  "methodName" : "testIntersectionUsingListBigrams",
  "sourceCode" : "@Test\r\nvoid testIntersectionUsingListBigrams() {\r\n    // Compute using pairs of characters (bigrams).\r\n    // This can be done using a 32-bit int to store two 16-bit characters.\r\n    // This test uses a list and so duplicates should be matched.\r\n    final IntersectionSimilarity<Integer> similarity = new IntersectionSimilarity<>(IntersectionSimilarityTest::toBigramList);\r\n    // Expected:\r\n    // size A or B = sequence length - 1\r\n    // intersection = count of matching bigrams (include duplicates)\r\n    assertIntersection(similarity, \"\", \"\", 0, 0, 0);\r\n    assertIntersection(similarity, \"a\", \"\", 0, 0, 0);\r\n    assertIntersection(similarity, \"a\", \"a\", 0, 0, 0);\r\n    assertIntersection(similarity, \"a\", \"b\", 0, 0, 0);\r\n    assertIntersection(similarity, \"aa\", \"ab\", 1, 1, 0);\r\n    assertIntersection(similarity, \"ab\", \"ab\", 1, 1, 1);\r\n    assertIntersection(similarity, \"aaba\", \"abaa\", 3, 3, 3);\r\n    assertIntersection(similarity, \"aaaa\", \"aa\", 3, 1, 1);\r\n    assertIntersection(similarity, \"aa\", \"aaaa\", 1, 3, 1);\r\n    assertIntersection(similarity, \"aaaa\", \"aaa\", 3, 2, 2);\r\n    assertIntersection(similarity, \"aabab\", \"ababa\", 4, 4, 3);\r\n    assertIntersection(similarity, \"the same\", \"the same\", 7, 7, 7);\r\n    assertIntersection(similarity, \"abcdefghijklm\", \"ab_defg ijklm\", 12, 12, 8);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\similarity\\IntersectionSimilarityTest.java",
  "methodName" : "testIntersectionUsingListCharacter",
  "sourceCode" : "@Test\r\nvoid testIntersectionUsingListCharacter() {\r\n    // Compute using single characters.\r\n    // This test uses a list and so duplicates should be matched.\r\n    final IntersectionSimilarity<Character> similarity = new IntersectionSimilarity<>(IntersectionSimilarityTest::toCharacterList);\r\n    // Expected:\r\n    // size A or B = sequence length\r\n    // intersection = count of matching characters (include duplicates)\r\n    assertIntersection(similarity, \"\", \"\", 0, 0, 0);\r\n    assertIntersection(similarity, \"a\", \"\", 1, 0, 0);\r\n    assertIntersection(similarity, \"a\", \"a\", 1, 1, 1);\r\n    assertIntersection(similarity, \"a\", \"b\", 1, 1, 0);\r\n    assertIntersection(similarity, \"aa\", \"ab\", 2, 2, 1);\r\n    assertIntersection(similarity, \"ab\", \"ab\", 2, 2, 2);\r\n    assertIntersection(similarity, \"aaba\", \"abaa\", 4, 4, 4);\r\n    assertIntersection(similarity, \"aaaa\", \"aa\", 4, 2, 2);\r\n    assertIntersection(similarity, \"aa\", \"aaaa\", 2, 4, 2);\r\n    assertIntersection(similarity, \"aaaa\", \"aaa\", 4, 3, 3);\r\n    assertIntersection(similarity, \"aabab\", \"ababa\", 5, 5, 5);\r\n    assertIntersection(similarity, \"the same\", \"the same\", 8, 8, 8);\r\n    assertIntersection(similarity, \"abcdefghijklm\", \"ab_defg ijklm\", 13, 13, 11);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\similarity\\IntersectionSimilarityTest.java",
  "methodName" : "testIntersectionUsingSetBigrams",
  "sourceCode" : "@Test\r\nvoid testIntersectionUsingSetBigrams() {\r\n    // Compute using pairs of characters (bigrams).\r\n    // This can be done using a 32-bit int to store two 16-bit characters.\r\n    // This test uses a set and so should not allow duplicates.\r\n    final IntersectionSimilarity<Integer> similarity = new IntersectionSimilarity<>(IntersectionSimilarityTest::toBigramSet);\r\n    // Expected:\r\n    // size A or B = count of unique bigrams (exclude duplicates)\r\n    // intersection = count of unique matching bigrams (exclude duplicates)\r\n    assertIntersection(similarity, \"\", \"\", 0, 0, 0);\r\n    assertIntersection(similarity, \"a\", \"\", 0, 0, 0);\r\n    assertIntersection(similarity, \"a\", \"a\", 0, 0, 0);\r\n    assertIntersection(similarity, \"a\", \"b\", 0, 0, 0);\r\n    assertIntersection(similarity, \"aa\", \"ab\", 1, 1, 0);\r\n    assertIntersection(similarity, \"ab\", \"ab\", 1, 1, 1);\r\n    assertIntersection(similarity, \"aaba\", \"abaa\", 3, 3, 3);\r\n    assertIntersection(similarity, \"aaaa\", \"aa\", 1, 1, 1);\r\n    assertIntersection(similarity, \"aa\", \"aaaa\", 1, 1, 1);\r\n    assertIntersection(similarity, \"aaaa\", \"aaa\", 1, 1, 1);\r\n    assertIntersection(similarity, \"aabab\", \"ababa\", 3, 2, 2);\r\n    assertIntersection(similarity, \"the same\", \"the same\", 7, 7, 7);\r\n    assertIntersection(similarity, \"abcdefghijklm\", \"ab_defg ijklm\", 12, 12, 8);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\similarity\\IntersectionSimilarityTest.java",
  "methodName" : "testIntersectionUsingSetCharacter",
  "sourceCode" : "@Test\r\nvoid testIntersectionUsingSetCharacter() {\r\n    // Compute using single characters.\r\n    // This test uses a set and so should not allow duplicates.\r\n    final IntersectionSimilarity<Character> similarity = new IntersectionSimilarity<>(IntersectionSimilarityTest::toCharacterSet);\r\n    // Expected:\r\n    // size A or B = count of unique characters (exclude duplicates)\r\n    // intersection = count of unique matching characters (exclude duplicates)\r\n    assertIntersection(similarity, \"\", \"\", 0, 0, 0);\r\n    assertIntersection(similarity, \"a\", \"\", 1, 0, 0);\r\n    assertIntersection(similarity, \"a\", \"a\", 1, 1, 1);\r\n    assertIntersection(similarity, \"a\", \"b\", 1, 1, 0);\r\n    assertIntersection(similarity, \"aa\", \"ab\", 1, 2, 1);\r\n    assertIntersection(similarity, \"ab\", \"ab\", 2, 2, 2);\r\n    assertIntersection(similarity, \"aaba\", \"abaa\", 2, 2, 2);\r\n    assertIntersection(similarity, \"aaaa\", \"aa\", 1, 1, 1);\r\n    assertIntersection(similarity, \"aa\", \"aaaa\", 1, 1, 1);\r\n    assertIntersection(similarity, \"aaaa\", \"aaa\", 1, 1, 1);\r\n    assertIntersection(similarity, \"aabab\", \"ababa\", 2, 2, 2);\r\n    assertIntersection(similarity, \"the same\", \"the same\", 7, 7, 7);\r\n    assertIntersection(similarity, \"abcdefghijklm\", \"ab_defg ijklm\", 13, 13, 11);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\similarity\\IntersectionSimilarityTest.java",
  "methodName" : "testIntersectionUsingSetCharacterListCharacter",
  "sourceCode" : "@Test\r\nvoid testIntersectionUsingSetCharacterListCharacter() {\r\n    // Compute using a custom converter that returns a Set and a List.\r\n    // This is an edge-case test.\r\n    final HashMap<CharSequence, Collection<Character>> converter = new HashMap<>();\r\n    final String sequence1 = \"aabbccdd\";\r\n    final String sequence2 = \"aaaaaabbbfffff\";\r\n    converter.put(sequence1, toCharacterSet(sequence1));\r\n    converter.put(sequence2, toCharacterList(sequence2));\r\n    final IntersectionSimilarity<Character> similarity = new IntersectionSimilarity<>(converter::get);\r\n    // Expected:\r\n    // size A = count of unique characters (exclude duplicates)\r\n    // size B = sequence length\r\n    // intersection = count of matching characters (exclude duplicates)\r\n    assertIntersection(similarity, sequence1, sequence2, 4, sequence2.length(), 2);\r\n    assertIntersection(similarity, sequence2, sequence1, sequence2.length(), 4, 2);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\similarity\\JaccardDistanceTest.java",
  "methodName" : "testGettingJaccardDistance",
  "sourceCode" : "@ParameterizedTest\r\n@MethodSource(\"org.apache.commons.text.similarity.SimilarityInputTest#similarityInputsEquals()\")\r\nvoid testGettingJaccardDistance(final Class<?> cls) {\r\n    // Expected Jaccard distance = 1.0 - (intersect / union)\r\n    assertEquals(0.0, classBeingTested.apply(SimilarityInputTest.build(cls, \"\"), SimilarityInputTest.build(cls, \"\")));\r\n    assertEquals(1.0, classBeingTested.apply(SimilarityInputTest.build(cls, \"left\"), SimilarityInputTest.build(cls, \"\")));\r\n    assertEquals(1.0, classBeingTested.apply(SimilarityInputTest.build(cls, \"\"), SimilarityInputTest.build(cls, \"right\")));\r\n    assertEquals(1.0 - 3.0 / 4, classBeingTested.apply(SimilarityInputTest.build(cls, \"frog\"), SimilarityInputTest.build(cls, \"fog\")));\r\n    assertEquals(1.0, classBeingTested.apply(SimilarityInputTest.build(cls, \"fly\"), SimilarityInputTest.build(cls, \"ant\")));\r\n    assertEquals(1.0 - 2.0 / 9, classBeingTested.apply(SimilarityInputTest.build(cls, \"elephant\"), SimilarityInputTest.build(cls, \"hippo\")));\r\n    assertEquals(1.0 - 7.0 / 11, classBeingTested.apply(SimilarityInputTest.build(cls, \"ABC Corporation\"), SimilarityInputTest.build(cls, \"ABC Corp\")));\r\n    assertEquals(1.0 - 13.0 / 17, classBeingTested.apply(SimilarityInputTest.build(cls, \"D N H Enterprises Inc\"), SimilarityInputTest.build(cls, \"D & H Enterprises, Inc.\")));\r\n    assertEquals(1.0 - 16.0 / 18, classBeingTested.apply(SimilarityInputTest.build(cls, \"My Gym Children's Fitness Center\"), SimilarityInputTest.build(cls, \"My Gym. Childrens Fitness\")));\r\n    assertEquals(1.0 - 9.0 / 10, classBeingTested.apply(SimilarityInputTest.build(cls, \"PENNSYLVANIA\"), SimilarityInputTest.build(cls, \"PENNCISYLVNIA\")));\r\n    assertEquals(1.0 - 1.0 / 8, classBeingTested.apply(SimilarityInputTest.build(cls, \"left\"), SimilarityInputTest.build(cls, \"right\")));\r\n    assertEquals(1.0 - 1.0 / 8, classBeingTested.apply(SimilarityInputTest.build(cls, \"leettteft\"), SimilarityInputTest.build(cls, \"ritttght\")));\r\n    assertEquals(0.0, classBeingTested.apply(SimilarityInputTest.build(cls, \"the same string\"), SimilarityInputTest.build(cls, \"the same string\")));\r\n}",
  "annotations" : [ "ParameterizedTest" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\similarity\\JaccardDistanceTest.java",
  "methodName" : "testGettingJaccardDistanceCharSequence",
  "sourceCode" : "@Test\r\nvoid testGettingJaccardDistanceCharSequence() {\r\n    // Expected Jaccard distance = 1.0 - (intersect / union)\r\n    assertEquals(0.0, classBeingTested.apply(\"\", \"\"));\r\n    assertEquals(1.0, classBeingTested.apply(\"left\", \"\"));\r\n    assertEquals(1.0, classBeingTested.apply(\"\", \"right\"));\r\n    assertEquals(1.0 - 3.0 / 4, classBeingTested.apply(\"frog\", \"fog\"));\r\n    assertEquals(1.0, classBeingTested.apply(\"fly\", \"ant\"));\r\n    assertEquals(1.0 - 2.0 / 9, classBeingTested.apply(\"elephant\", \"hippo\"));\r\n    assertEquals(1.0 - 7.0 / 11, classBeingTested.apply(\"ABC Corporation\", \"ABC Corp\"));\r\n    assertEquals(1.0 - 13.0 / 17, classBeingTested.apply(\"D N H Enterprises Inc\", \"D & H Enterprises, Inc.\"));\r\n    assertEquals(1.0 - 16.0 / 18, classBeingTested.apply(\"My Gym Children's Fitness Center\", \"My Gym. Childrens Fitness\"));\r\n    assertEquals(1.0 - 9.0 / 10, classBeingTested.apply(\"PENNSYLVANIA\", \"PENNCISYLVNIA\"));\r\n    assertEquals(1.0 - 1.0 / 8, classBeingTested.apply(\"left\", \"right\"));\r\n    assertEquals(1.0 - 1.0 / 8, classBeingTested.apply(\"leettteft\", \"ritttght\"));\r\n    assertEquals(0.0, classBeingTested.apply(\"the same string\", \"the same string\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\similarity\\JaccardDistanceTest.java",
  "methodName" : "testGettingJaccardDistanceNullNull",
  "sourceCode" : "@Test\r\nvoid testGettingJaccardDistanceNullNull() {\r\n    assertThrows(IllegalArgumentException.class, () -> classBeingTested.apply((String) null, null));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\similarity\\JaccardDistanceTest.java",
  "methodName" : "testGettingJaccardDistanceNullString",
  "sourceCode" : "@Test\r\nvoid testGettingJaccardDistanceNullString() {\r\n    assertThrows(IllegalArgumentException.class, () -> classBeingTested.apply(null, \"right\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\similarity\\JaccardDistanceTest.java",
  "methodName" : "testGettingJaccardDistanceStringNull",
  "sourceCode" : "@Test\r\nvoid testGettingJaccardDistanceStringNull() {\r\n    assertThrows(IllegalArgumentException.class, () -> classBeingTested.apply(\" \", null));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\similarity\\JaccardSimilarityTest.java",
  "methodName" : "testGettingJaccardSimilarity",
  "sourceCode" : "@ParameterizedTest\r\n@MethodSource(\"org.apache.commons.text.similarity.SimilarityInputTest#similarityInputsEquals()\")\r\nvoid testGettingJaccardSimilarity(final Class<?> cls) {\r\n    // Expected Jaccard similarity = (intersect / union)\r\n    assertEquals(1.0, classBeingTested.apply(SimilarityInputTest.build(cls, \"\"), SimilarityInputTest.build(cls, \"\")));\r\n    assertEquals(0.0, classBeingTested.apply(SimilarityInputTest.build(cls, \"left\"), SimilarityInputTest.build(cls, \"\")));\r\n    assertEquals(0.0, classBeingTested.apply(SimilarityInputTest.build(cls, \"\"), SimilarityInputTest.build(cls, \"right\")));\r\n    assertEquals(3.0 / 4, classBeingTested.apply(SimilarityInputTest.build(cls, \"frog\"), SimilarityInputTest.build(cls, \"fog\")));\r\n    assertEquals(0.0, classBeingTested.apply(SimilarityInputTest.build(cls, \"fly\"), SimilarityInputTest.build(cls, \"ant\")));\r\n    assertEquals(2.0 / 9, classBeingTested.apply(SimilarityInputTest.build(cls, \"elephant\"), SimilarityInputTest.build(cls, \"hippo\")));\r\n    assertEquals(7.0 / 11, classBeingTested.apply(SimilarityInputTest.build(cls, \"ABC Corporation\"), SimilarityInputTest.build(cls, \"ABC Corp\")));\r\n    assertEquals(13.0 / 17, classBeingTested.apply(SimilarityInputTest.build(cls, \"D N H Enterprises Inc\"), SimilarityInputTest.build(cls, \"D & H Enterprises, Inc.\")));\r\n    assertEquals(16.0 / 18, classBeingTested.apply(SimilarityInputTest.build(cls, \"My Gym Children's Fitness Center\"), SimilarityInputTest.build(cls, \"My Gym. Childrens Fitness\")));\r\n    assertEquals(9.0 / 10, classBeingTested.apply(SimilarityInputTest.build(cls, \"PENNSYLVANIA\"), SimilarityInputTest.build(cls, \"PENNCISYLVNIA\")));\r\n    assertEquals(1.0 / 8, classBeingTested.apply(SimilarityInputTest.build(cls, \"left\"), SimilarityInputTest.build(cls, \"right\")));\r\n    assertEquals(1.0 / 8, classBeingTested.apply(SimilarityInputTest.build(cls, \"leettteft\"), SimilarityInputTest.build(cls, \"ritttght\")));\r\n    assertEquals(1.0, classBeingTested.apply(SimilarityInputTest.build(cls, \"the same string\"), SimilarityInputTest.build(cls, \"the same string\")));\r\n}",
  "annotations" : [ "ParameterizedTest" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\similarity\\JaccardSimilarityTest.java",
  "methodName" : "testGettingJaccardSimilarityCharSequence",
  "sourceCode" : "@Test\r\nvoid testGettingJaccardSimilarityCharSequence() {\r\n    // Expected Jaccard similarity = (intersect / union)\r\n    assertEquals(1.0, classBeingTested.apply(\"\", \"\"));\r\n    assertEquals(0.0, classBeingTested.apply(\"left\", \"\"));\r\n    assertEquals(0.0, classBeingTested.apply(\"\", \"right\"));\r\n    assertEquals(3.0 / 4, classBeingTested.apply(\"frog\", \"fog\"));\r\n    assertEquals(0.0, classBeingTested.apply(\"fly\", \"ant\"));\r\n    assertEquals(2.0 / 9, classBeingTested.apply(\"elephant\", \"hippo\"));\r\n    assertEquals(7.0 / 11, classBeingTested.apply(\"ABC Corporation\", \"ABC Corp\"));\r\n    assertEquals(13.0 / 17, classBeingTested.apply(\"D N H Enterprises Inc\", \"D & H Enterprises, Inc.\"));\r\n    assertEquals(16.0 / 18, classBeingTested.apply(\"My Gym Children's Fitness Center\", \"My Gym. Childrens Fitness\"));\r\n    assertEquals(9.0 / 10, classBeingTested.apply(\"PENNSYLVANIA\", \"PENNCISYLVNIA\"));\r\n    assertEquals(1.0 / 8, classBeingTested.apply(\"left\", \"right\"));\r\n    assertEquals(1.0 / 8, classBeingTested.apply(\"leettteft\", \"ritttght\"));\r\n    assertEquals(1.0, classBeingTested.apply(\"the same string\", \"the same string\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\similarity\\JaccardSimilarityTest.java",
  "methodName" : "testGettingJaccardSimilarityNullNull",
  "sourceCode" : "@Test\r\nvoid testGettingJaccardSimilarityNullNull() {\r\n    assertThrows(IllegalArgumentException.class, () -> classBeingTested.apply((String) null, null));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\similarity\\JaccardSimilarityTest.java",
  "methodName" : "testGettingJaccardSimilarityNullString",
  "sourceCode" : "@Test\r\nvoid testGettingJaccardSimilarityNullString() {\r\n    assertThrows(IllegalArgumentException.class, () -> classBeingTested.apply(null, \"right\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\similarity\\JaccardSimilarityTest.java",
  "methodName" : "testGettingJaccardSimilarityStringNull",
  "sourceCode" : "@Test\r\nvoid testGettingJaccardSimilarityStringNull() {\r\n    assertThrows(IllegalArgumentException.class, () -> classBeingTested.apply(\" \", null));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\similarity\\JaroWinklerDistanceTest.java",
  "methodName" : "testGetJaroWinklerDistance",
  "sourceCode" : "@ParameterizedTest\r\n@MethodSource(\"org.apache.commons.text.similarity.SimilarityInputTest#similarityInputsEquals()\")\r\nvoid testGetJaroWinklerDistance(final Class<?> cls) {\r\n    assertEquals(0.07501d, distance.apply(SimilarityInputTest.build(cls, \"frog\"), SimilarityInputTest.build(cls, \"fog\")), 0.00001d);\r\n    assertEquals(1.0d, distance.apply(SimilarityInputTest.build(cls, \"fly\"), SimilarityInputTest.build(cls, \"ant\")), 0.00000000000000000001d);\r\n    assertEquals(0.55834d, distance.apply(SimilarityInputTest.build(cls, \"elephant\"), SimilarityInputTest.build(cls, \"hippo\")), 0.00001d);\r\n    assertEquals(0.09334d, distance.apply(SimilarityInputTest.build(cls, \"ABC Corporation\"), SimilarityInputTest.build(cls, \"ABC Corp\")), 0.00001d);\r\n    assertEquals(0.04749d, distance.apply(SimilarityInputTest.build(cls, \"D N H Enterprises Inc\"), SimilarityInputTest.build(cls, \"D & H Enterprises, Inc.\")), 0.00001d);\r\n    assertEquals(0.058d, distance.apply(SimilarityInputTest.build(cls, \"My Gym Children's Fitness Center\"), SimilarityInputTest.build(cls, \"My Gym. Childrens Fitness\")), 0.00001d);\r\n    assertEquals(0.101982d, distance.apply(SimilarityInputTest.build(cls, \"PENNSYLVANIA\"), SimilarityInputTest.build(cls, \"PENNCISYLVNIA\")), 0.00001d);\r\n    assertEquals(0.028572d, distance.apply(SimilarityInputTest.build(cls, \"/opt/software1\"), SimilarityInputTest.build(cls, \"/opt/software2\")), 0.00001d);\r\n    assertEquals(0.058334d, distance.apply(SimilarityInputTest.build(cls, \"aaabcd\"), SimilarityInputTest.build(cls, \"aaacdb\")), 0.00001d);\r\n    assertEquals(0.088889d, distance.apply(SimilarityInputTest.build(cls, \"John Horn\"), SimilarityInputTest.build(cls, \"John Hopkins\")), 0.00001d);\r\n    assertEquals(0d, distance.apply(SimilarityInputTest.build(cls, \"\"), SimilarityInputTest.build(cls, \"\")), 0.00001d);\r\n    assertEquals(0d, distance.apply(SimilarityInputTest.build(cls, \"foo\"), SimilarityInputTest.build(cls, \"foo\")), 0.00001d);\r\n    assertEquals(1 - 0.94166d, distance.apply(SimilarityInputTest.build(cls, \"foo\"), SimilarityInputTest.build(cls, \"foo \")), 0.00001d);\r\n    assertEquals(1 - 0.90666d, distance.apply(SimilarityInputTest.build(cls, \"foo\"), SimilarityInputTest.build(cls, \"foo  \")), 0.00001d);\r\n    assertEquals(1 - 0.86666d, distance.apply(SimilarityInputTest.build(cls, \"foo\"), SimilarityInputTest.build(cls, \" foo \")), 0.00001d);\r\n    assertEquals(1 - 0.51111d, distance.apply(SimilarityInputTest.build(cls, \"foo\"), SimilarityInputTest.build(cls, \"  foo\")), 0.00001d);\r\n}",
  "annotations" : [ "ParameterizedTest" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\similarity\\JaroWinklerDistanceTest.java",
  "methodName" : "testGetJaroWinklerDistance_NullNull",
  "sourceCode" : "@Test\r\nvoid testGetJaroWinklerDistance_NullNull() {\r\n    assertThrows(IllegalArgumentException.class, () -> distance.apply((String) null, null));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\similarity\\JaroWinklerDistanceTest.java",
  "methodName" : "testGetJaroWinklerDistance_NullString",
  "sourceCode" : "@Test\r\nvoid testGetJaroWinklerDistance_NullString() {\r\n    assertThrows(IllegalArgumentException.class, () -> distance.apply(null, \"clear\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\similarity\\JaroWinklerDistanceTest.java",
  "methodName" : "testGetJaroWinklerDistance_StringNull",
  "sourceCode" : "@Test\r\nvoid testGetJaroWinklerDistance_StringNull() {\r\n    assertThrows(IllegalArgumentException.class, () -> distance.apply(\" \", null));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\similarity\\JaroWinklerDistanceTest.java",
  "methodName" : "testGetJaroWinklerDistance_StringString",
  "sourceCode" : "@Test\r\nvoid testGetJaroWinklerDistance_StringString() {\r\n    assertEquals(0.07501d, distance.apply(\"frog\", \"fog\"), 0.00001d);\r\n    assertEquals(1.0d, distance.apply(\"fly\", \"ant\"), 0.00000000000000000001d);\r\n    assertEquals(0.55834d, distance.apply(\"elephant\", \"hippo\"), 0.00001d);\r\n    assertEquals(0.09334d, distance.apply(\"ABC Corporation\", \"ABC Corp\"), 0.00001d);\r\n    assertEquals(0.04749d, distance.apply(\"D N H Enterprises Inc\", \"D & H Enterprises, Inc.\"), 0.00001d);\r\n    assertEquals(0.058d, distance.apply(\"My Gym Children's Fitness Center\", \"My Gym. Childrens Fitness\"), 0.00001d);\r\n    assertEquals(0.101982d, distance.apply(\"PENNSYLVANIA\", \"PENNCISYLVNIA\"), 0.00001d);\r\n    assertEquals(0.028572d, distance.apply(\"/opt/software1\", \"/opt/software2\"), 0.00001d);\r\n    assertEquals(0.058334d, distance.apply(\"aaabcd\", \"aaacdb\"), 0.00001d);\r\n    assertEquals(0.088889d, distance.apply(\"John Horn\", \"John Hopkins\"), 0.00001d);\r\n    assertEquals(0d, distance.apply(\"\", \"\"), 0.00001d);\r\n    assertEquals(0d, distance.apply(\"foo\", \"foo\"), 0.00001d);\r\n    assertEquals(1 - 0.94166d, distance.apply(\"foo\", \"foo \"), 0.00001d);\r\n    assertEquals(1 - 0.90666d, distance.apply(\"foo\", \"foo  \"), 0.00001d);\r\n    assertEquals(1 - 0.86666d, distance.apply(\"foo\", \" foo \"), 0.00001d);\r\n    assertEquals(1 - 0.51111d, distance.apply(\"foo\", \"  foo\"), 0.00001d);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\similarity\\JaroWinklerSimilarityTest.java",
  "methodName" : "testGetJaroWinklerSimilarity",
  "sourceCode" : "@ParameterizedTest\r\n@MethodSource(\"org.apache.commons.text.similarity.SimilarityInputTest#similarityInputsEquals()\")\r\nvoid testGetJaroWinklerSimilarity(final Class<?> cls) {\r\n    assertEquals(1d, similarity.apply(SimilarityInputTest.build(cls, \"\"), SimilarityInputTest.build(cls, \"\")), 0.00001d);\r\n    assertEquals(1d, similarity.apply(SimilarityInputTest.build(cls, \"foo\"), SimilarityInputTest.build(cls, \"foo\")), 0.00001d);\r\n    assertEquals(0.94166d, similarity.apply(SimilarityInputTest.build(cls, \"foo\"), SimilarityInputTest.build(cls, \"foo \")), 0.00001d);\r\n    assertEquals(0.90666d, similarity.apply(SimilarityInputTest.build(cls, \"foo\"), SimilarityInputTest.build(cls, \"foo  \")), 0.00001d);\r\n    assertEquals(0.86666d, similarity.apply(SimilarityInputTest.build(cls, \"foo\"), SimilarityInputTest.build(cls, \" foo \")), 0.00001d);\r\n    assertEquals(0.51111d, similarity.apply(SimilarityInputTest.build(cls, \"foo\"), SimilarityInputTest.build(cls, \"  foo\")), 0.00001d);\r\n    assertEquals(0.92499d, similarity.apply(SimilarityInputTest.build(cls, \"frog\"), SimilarityInputTest.build(cls, \"fog\")), 0.00001d);\r\n    assertEquals(0.0d, similarity.apply(SimilarityInputTest.build(cls, \"fly\"), SimilarityInputTest.build(cls, \"ant\")), 0.00000000000000000001d);\r\n    assertEquals(0.44166d, similarity.apply(SimilarityInputTest.build(cls, \"elephant\"), SimilarityInputTest.build(cls, \"hippo\")), 0.00001d);\r\n    assertEquals(0.90666d, similarity.apply(SimilarityInputTest.build(cls, \"ABC Corporation\"), SimilarityInputTest.build(cls, \"ABC Corp\")), 0.00001d);\r\n    assertEquals(0.95251d, similarity.apply(SimilarityInputTest.build(cls, \"D N H Enterprises Inc\"), SimilarityInputTest.build(cls, \"D & H Enterprises, Inc.\")), 0.00001d);\r\n    assertEquals(0.942d, similarity.apply(SimilarityInputTest.build(cls, \"My Gym Children's Fitness Center\"), SimilarityInputTest.build(cls, \"My Gym. Childrens Fitness\")), 0.00001d);\r\n    assertEquals(0.898018d, similarity.apply(SimilarityInputTest.build(cls, \"PENNSYLVANIA\"), SimilarityInputTest.build(cls, \"PENNCISYLVNIA\")), 0.00001d);\r\n    assertEquals(0.971428d, similarity.apply(SimilarityInputTest.build(cls, \"/opt/software1\"), SimilarityInputTest.build(cls, \"/opt/software2\")), 0.00001d);\r\n    assertEquals(0.941666d, similarity.apply(SimilarityInputTest.build(cls, \"aaabcd\"), SimilarityInputTest.build(cls, \"aaacdb\")), 0.00001d);\r\n    assertEquals(0.911111d, similarity.apply(SimilarityInputTest.build(cls, \"John Horn\"), SimilarityInputTest.build(cls, \"John Hopkins\")), 0.00001d);\r\n}",
  "annotations" : [ "ParameterizedTest" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\similarity\\JaroWinklerSimilarityTest.java",
  "methodName" : "testGetJaroWinklerSimilarity_NullNull",
  "sourceCode" : "@Test\r\nvoid testGetJaroWinklerSimilarity_NullNull() {\r\n    assertThrows(IllegalArgumentException.class, () -> similarity.apply((String) null, null));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\similarity\\JaroWinklerSimilarityTest.java",
  "methodName" : "testGetJaroWinklerSimilarity_NullString",
  "sourceCode" : "@Test\r\nvoid testGetJaroWinklerSimilarity_NullString() {\r\n    assertThrows(IllegalArgumentException.class, () -> similarity.apply(null, \"clear\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\similarity\\JaroWinklerSimilarityTest.java",
  "methodName" : "testGetJaroWinklerSimilarity_StringNull",
  "sourceCode" : "@Test\r\nvoid testGetJaroWinklerSimilarity_StringNull() {\r\n    assertThrows(IllegalArgumentException.class, () -> similarity.apply(\" \", null));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\similarity\\JaroWinklerSimilarityTest.java",
  "methodName" : "testGetJaroWinklerSimilarity_StringString",
  "sourceCode" : "@Test\r\nvoid testGetJaroWinklerSimilarity_StringString() {\r\n    assertEquals(1d, similarity.apply(wrap(\"\"), \"\"), 0.00001d);\r\n    assertEquals(1d, similarity.apply(wrap(\"foo\"), \"foo\"), 0.00001d);\r\n    assertEquals(0.94166d, similarity.apply(wrap(\"foo\"), \"foo \"), 0.00001d);\r\n    assertEquals(0.90666d, similarity.apply(wrap(\"foo\"), \"foo  \"), 0.00001d);\r\n    assertEquals(0.86666d, similarity.apply(wrap(\"foo\"), \" foo \"), 0.00001d);\r\n    assertEquals(0.51111d, similarity.apply(wrap(\"foo\"), \"  foo\"), 0.00001d);\r\n    assertEquals(0.92499d, similarity.apply(wrap(\"frog\"), \"fog\"), 0.00001d);\r\n    assertEquals(0.0d, similarity.apply(wrap(\"fly\"), \"ant\"), 0.00000000000000000001d);\r\n    assertEquals(0.44166d, similarity.apply(wrap(\"elephant\"), \"hippo\"), 0.00001d);\r\n    assertEquals(0.90666d, similarity.apply(wrap(\"ABC Corporation\"), \"ABC Corp\"), 0.00001d);\r\n    assertEquals(0.95251d, similarity.apply(wrap(\"D N H Enterprises Inc\"), \"D & H Enterprises, Inc.\"), 0.00001d);\r\n    assertEquals(0.942d, similarity.apply(wrap(\"My Gym Children's Fitness Center\"), \"My Gym. Childrens Fitness\"), 0.00001d);\r\n    assertEquals(0.898018d, similarity.apply(wrap(\"PENNSYLVANIA\"), \"PENNCISYLVNIA\"), 0.00001d);\r\n    assertEquals(0.971428d, similarity.apply(wrap(\"/opt/software1\"), \"/opt/software2\"), 0.00001d);\r\n    assertEquals(0.941666d, similarity.apply(wrap(\"aaabcd\"), \"aaacdb\"), 0.00001d);\r\n    assertEquals(0.911111d, similarity.apply(wrap(\"John Horn\"), \"John Hopkins\"), 0.00001d);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\similarity\\LevenshteinDetailedDistanceTest.java",
  "methodName" : "testApplyThrowsIllegalArgumentExceptionAndCreatesLevenshteinDetailedDistanceTakingInteger",
  "sourceCode" : "@Test\r\nvoid testApplyThrowsIllegalArgumentExceptionAndCreatesLevenshteinDetailedDistanceTakingInteger() {\r\n    assertThrows(IllegalArgumentException.class, () -> {\r\n        final LevenshteinDetailedDistance levenshteinDetailedDistance = new LevenshteinDetailedDistance(0);\r\n        final CharSequence charSequence = new TextStringBuilder();\r\n        levenshteinDetailedDistance.apply(charSequence, null);\r\n    });\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\similarity\\LevenshteinDetailedDistanceTest.java",
  "methodName" : "testApplyWithNullSimilarityInput",
  "sourceCode" : "@Test\r\nvoid testApplyWithNullSimilarityInput() {\r\n    assertThrows(IllegalArgumentException.class, () -> new LevenshteinDetailedDistance(0).apply((SimilarityInput<Object>) null, (SimilarityInput<Object>) null));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\similarity\\LevenshteinDetailedDistanceTest.java",
  "methodName" : "testApplyWithNullString",
  "sourceCode" : "@Test\r\nvoid testApplyWithNullString() {\r\n    assertThrows(IllegalArgumentException.class, () -> new LevenshteinDetailedDistance(0).apply((String) null, (String) null));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\similarity\\LevenshteinDetailedDistanceTest.java",
  "methodName" : "testConstructorWithNegativeThreshold",
  "sourceCode" : "@Test\r\nvoid testConstructorWithNegativeThreshold() {\r\n    assertThrows(IllegalArgumentException.class, () -> new LevenshteinDetailedDistance(-1));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\similarity\\LevenshteinDetailedDistanceTest.java",
  "methodName" : "testCreatesLevenshteinDetailedDistanceTakingInteger6",
  "sourceCode" : "@ParameterizedTest\r\n@MethodSource(\"org.apache.commons.text.similarity.SimilarityInputTest#similarityInputs()\")\r\nvoid testCreatesLevenshteinDetailedDistanceTakingInteger6(final Class<?> cls) {\r\n    final LevenshteinDetailedDistance levenshteinDetailedDistance = new LevenshteinDetailedDistance(0);\r\n    final LevenshteinResults levenshteinResults = levenshteinDetailedDistance.apply(\"\", \"Distance: 38, Insert: 0, Delete: 0, Substitute: 0\");\r\n    assertEquals(0, levenshteinResults.getSubstituteCount());\r\n    assertEquals(0, levenshteinResults.getDeleteCount());\r\n    assertEquals(0, levenshteinResults.getInsertCount());\r\n    assertEquals(-1, levenshteinResults.getDistance());\r\n    assertEquals(levenshteinResults, levenshteinDetailedDistance.apply(SimilarityInputTest.build(cls, \"\"), SimilarityInputTest.build(cls, \"Distance: 38, Insert: 0, Delete: 0, Substitute: 0\")));\r\n}",
  "annotations" : [ "ParameterizedTest" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\similarity\\LevenshteinDetailedDistanceTest.java",
  "methodName" : "testEquals",
  "sourceCode" : "@ParameterizedTest\r\n@MethodSource(\"org.apache.commons.text.similarity.SimilarityInputTest#similarityInputs()\")\r\nvoid testEquals(final Class<?> cls) {\r\n    final LevenshteinDetailedDistance classBeingTested = LevenshteinDetailedDistance.getDefaultInstance();\r\n    LevenshteinResults actualResult = classBeingTested.apply(SimilarityInputTest.build(cls, \"hello\"), SimilarityInputTest.build(cls, \"hallo\"));\r\n    LevenshteinResults expectedResult = new LevenshteinResults(1, 0, 0, 1);\r\n    assertEquals(expectedResult, actualResult);\r\n    assertEquals(classBeingTested.apply(\"zzzzzzzz\", \"hippo\"), classBeingTested.apply(SimilarityInputTest.build(cls, \"zzzzzzzz\"), SimilarityInputTest.build(cls, \"hippo\")));\r\n    actualResult = classBeingTested.apply(SimilarityInputTest.build(cls, \"zzzzzzzz\"), SimilarityInputTest.build(cls, \"hippo\"));\r\n    expectedResult = new LevenshteinResults(8, 0, 3, 5);\r\n    assertEquals(expectedResult, actualResult);\r\n    // intentionally added\r\n    assertEquals(actualResult, actualResult);\r\n    actualResult = classBeingTested.apply(SimilarityInputTest.build(cls, \"\"), SimilarityInputTest.build(cls, \"\"));\r\n    expectedResult = new LevenshteinResults(0, 0, 0, 0);\r\n    assertEquals(expectedResult, actualResult);\r\n}",
  "annotations" : [ "ParameterizedTest" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\similarity\\LevenshteinDetailedDistanceTest.java",
  "methodName" : "testGetDefaultInstanceOne",
  "sourceCode" : "@ParameterizedTest\r\n@MethodSource(\"org.apache.commons.text.similarity.SimilarityInputTest#similarityInputs()\")\r\nvoid testGetDefaultInstanceOne(final Class<?> cls) {\r\n    final LevenshteinDetailedDistance levenshteinDetailedDistance = LevenshteinDetailedDistance.getDefaultInstance();\r\n    final LevenshteinResults levenshteinResults = levenshteinDetailedDistance.apply(SimilarityInputTest.build(cls, \"Distance: -2147483643, Insert: 0, Delete: 0, Substitute: 0\"), SimilarityInputTest.build(cls, \"Distance: 0, Insert: 2147483536, Delete: 0, Substitute: 0\"));\r\n    assertEquals(21, levenshteinResults.getDistance());\r\n}",
  "annotations" : [ "ParameterizedTest" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\similarity\\LevenshteinDetailedDistanceTest.java",
  "methodName" : "testGetDefaultInstanceTwo",
  "sourceCode" : "@ParameterizedTest\r\n@MethodSource(\"org.apache.commons.text.similarity.SimilarityInputTest#similarityInputs()\")\r\nvoid testGetDefaultInstanceTwo(final Class<?> cls) {\r\n    final LevenshteinDetailedDistance levenshteinDetailedDistance = LevenshteinDetailedDistance.getDefaultInstance();\r\n    final LevenshteinResults levenshteinResults = levenshteinDetailedDistance.apply(\"Distance: 2147483647, Insert: 0, Delete: 0, Substitute: 0\", \"Distance: 0, Insert: 2147483647, Delete: 0, Substitute: 0\");\r\n    assertEquals(20, levenshteinResults.getDistance());\r\n    assertEquals(levenshteinResults, levenshteinDetailedDistance.apply(SimilarityInputTest.build(cls, \"Distance: 2147483647, Insert: 0, Delete: 0, Substitute: 0\"), SimilarityInputTest.build(cls, \"Distance: 0, Insert: 2147483647, Delete: 0, Substitute: 0\")));\r\n}",
  "annotations" : [ "ParameterizedTest" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\similarity\\LevenshteinDetailedDistanceTest.java",
  "methodName" : "testGetLevenshteinDetailedDistance_NullString",
  "sourceCode" : "@Test\r\nvoid testGetLevenshteinDetailedDistance_NullString() {\r\n    assertThrows(IllegalArgumentException.class, () -> UNLIMITED_DISTANCE.apply(\"a\", null));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\similarity\\LevenshteinDetailedDistanceTest.java",
  "methodName" : "testGetLevenshteinDetailedDistance_NullStringInt",
  "sourceCode" : "@Test\r\nvoid testGetLevenshteinDetailedDistance_NullStringInt() {\r\n    assertThrows(IllegalArgumentException.class, () -> UNLIMITED_DISTANCE.apply(null, \"a\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\similarity\\LevenshteinDetailedDistanceTest.java",
  "methodName" : "testGetLevenshteinDetailedDistance_StringNull",
  "sourceCode" : "@Test\r\nvoid testGetLevenshteinDetailedDistance_StringNull() {\r\n    assertThrows(IllegalArgumentException.class, () -> UNLIMITED_DISTANCE.apply(null, \"a\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\similarity\\LevenshteinDetailedDistanceTest.java",
  "methodName" : "testGetLevenshteinDetailedDistance_StringNullInt",
  "sourceCode" : "@Test\r\nvoid testGetLevenshteinDetailedDistance_StringNullInt() {\r\n    assertThrows(IllegalArgumentException.class, () -> UNLIMITED_DISTANCE.apply(\"a\", null));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\similarity\\LevenshteinDetailedDistanceTest.java",
  "methodName" : "testGetLevenshteinDetailedDistance_StringString",
  "sourceCode" : "@ParameterizedTest\r\n@MethodSource(\"org.apache.commons.text.similarity.SimilarityInputTest#similarityInputs()\")\r\nvoid testGetLevenshteinDetailedDistance_StringString(final Class<?> cls) {\r\n    LevenshteinResults result = UNLIMITED_DISTANCE.apply(SimilarityInputTest.build(cls, \"\"), SimilarityInputTest.build(cls, \"\"));\r\n    assertEquals(0, result.getDistance());\r\n    assertEquals(0, result.getInsertCount());\r\n    assertEquals(0, result.getDeleteCount());\r\n    assertEquals(0, result.getSubstituteCount());\r\n    result = UNLIMITED_DISTANCE.apply(SimilarityInputTest.build(cls, \"\"), SimilarityInputTest.build(cls, \"a\"));\r\n    assertEquals(1, result.getDistance());\r\n    assertEquals(1, result.getInsertCount());\r\n    assertEquals(0, result.getDeleteCount());\r\n    assertEquals(0, result.getSubstituteCount());\r\n    result = UNLIMITED_DISTANCE.apply(SimilarityInputTest.build(cls, \"aaapppp\"), SimilarityInputTest.build(cls, \"\"));\r\n    assertEquals(7, result.getDistance());\r\n    assertEquals(0, result.getInsertCount());\r\n    assertEquals(7, result.getDeleteCount());\r\n    assertEquals(0, result.getSubstituteCount());\r\n    result = UNLIMITED_DISTANCE.apply(SimilarityInputTest.build(cls, \"frog\"), SimilarityInputTest.build(cls, \"fog\"));\r\n    assertEquals(1, result.getDistance());\r\n    assertEquals(0, result.getInsertCount());\r\n    assertEquals(1, result.getDeleteCount());\r\n    assertEquals(0, result.getSubstituteCount());\r\n    result = UNLIMITED_DISTANCE.apply(SimilarityInputTest.build(cls, \"fly\"), SimilarityInputTest.build(cls, \"ant\"));\r\n    assertEquals(3, result.getDistance());\r\n    assertEquals(0, result.getInsertCount());\r\n    assertEquals(0, result.getDeleteCount());\r\n    assertEquals(3, result.getSubstituteCount());\r\n    result = UNLIMITED_DISTANCE.apply(SimilarityInputTest.build(cls, \"elephant\"), SimilarityInputTest.build(cls, \"hippo\"));\r\n    assertEquals(7, result.getDistance());\r\n    assertEquals(0, result.getInsertCount());\r\n    assertEquals(3, result.getDeleteCount());\r\n    assertEquals(4, result.getSubstituteCount());\r\n    result = UNLIMITED_DISTANCE.apply(SimilarityInputTest.build(cls, \"hippo\"), SimilarityInputTest.build(cls, \"elephant\"));\r\n    assertEquals(7, result.getDistance());\r\n    assertEquals(3, result.getInsertCount());\r\n    assertEquals(0, result.getDeleteCount());\r\n    assertEquals(4, result.getSubstituteCount());\r\n    result = UNLIMITED_DISTANCE.apply(SimilarityInputTest.build(cls, \"hippo\"), SimilarityInputTest.build(cls, \"zzzzzzzz\"));\r\n    assertEquals(8, result.getDistance());\r\n    assertEquals(3, result.getInsertCount());\r\n    assertEquals(0, result.getDeleteCount());\r\n    assertEquals(5, result.getSubstituteCount());\r\n    result = UNLIMITED_DISTANCE.apply(SimilarityInputTest.build(cls, \"zzzzzzzz\"), SimilarityInputTest.build(cls, \"hippo\"));\r\n    assertEquals(8, result.getDistance());\r\n    assertEquals(0, result.getInsertCount());\r\n    assertEquals(3, result.getDeleteCount());\r\n    assertEquals(5, result.getSubstituteCount());\r\n    result = UNLIMITED_DISTANCE.apply(SimilarityInputTest.build(cls, \"hello\"), SimilarityInputTest.build(cls, \"hallo\"));\r\n    assertEquals(1, result.getDistance());\r\n    assertEquals(0, result.getInsertCount());\r\n    assertEquals(0, result.getDeleteCount());\r\n    assertEquals(1, result.getSubstituteCount());\r\n}",
  "annotations" : [ "ParameterizedTest" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\similarity\\LevenshteinDetailedDistanceTest.java",
  "methodName" : "testGetLevenshteinDetailedDistance_StringStringInt",
  "sourceCode" : "@Test\r\nvoid testGetLevenshteinDetailedDistance_StringStringInt() {\r\n    LevenshteinResults result = new LevenshteinDetailedDistance(0).apply(\"\", \"\");\r\n    assertEquals(0, result.getDistance());\r\n    assertEquals(0, result.getInsertCount());\r\n    assertEquals(0, result.getDeleteCount());\r\n    assertEquals(0, result.getSubstituteCount());\r\n    result = new LevenshteinDetailedDistance(8).apply(\"aaapppp\", \"\");\r\n    assertEquals(7, result.getDistance());\r\n    assertEquals(0, result.getInsertCount());\r\n    assertEquals(7, result.getDeleteCount());\r\n    assertEquals(0, result.getSubstituteCount());\r\n    result = new LevenshteinDetailedDistance(7).apply(\"aaapppp\", \"\");\r\n    assertEquals(7, result.getDistance());\r\n    assertEquals(0, result.getInsertCount());\r\n    assertEquals(7, result.getDeleteCount());\r\n    assertEquals(0, result.getSubstituteCount());\r\n    result = new LevenshteinDetailedDistance(6).apply(\"aaapppp\", \"\");\r\n    assertEquals(-1, result.getDistance());\r\n    assertEquals(0, result.getInsertCount());\r\n    assertEquals(0, result.getDeleteCount());\r\n    assertEquals(0, result.getSubstituteCount());\r\n    result = new LevenshteinDetailedDistance(0).apply(\"b\", \"a\");\r\n    assertEquals(-1, result.getDistance());\r\n    assertEquals(0, result.getInsertCount());\r\n    assertEquals(0, result.getDeleteCount());\r\n    assertEquals(0, result.getSubstituteCount());\r\n    result = new LevenshteinDetailedDistance(0).apply(\"a\", \"b\");\r\n    assertEquals(-1, result.getDistance());\r\n    assertEquals(0, result.getInsertCount());\r\n    assertEquals(0, result.getDeleteCount());\r\n    assertEquals(0, result.getSubstituteCount());\r\n    result = new LevenshteinDetailedDistance(0).apply(\"aa\", \"aa\");\r\n    assertEquals(0, result.getDistance());\r\n    assertEquals(0, result.getInsertCount());\r\n    assertEquals(0, result.getDeleteCount());\r\n    assertEquals(0, result.getSubstituteCount());\r\n    result = new LevenshteinDetailedDistance(2).apply(\"aa\", \"aa\");\r\n    assertEquals(0, result.getDistance());\r\n    assertEquals(0, result.getInsertCount());\r\n    assertEquals(0, result.getDeleteCount());\r\n    assertEquals(0, result.getSubstituteCount());\r\n    result = new LevenshteinDetailedDistance(2).apply(\"aaa\", \"bbb\");\r\n    assertEquals(-1, result.getDistance());\r\n    assertEquals(0, result.getInsertCount());\r\n    assertEquals(0, result.getDeleteCount());\r\n    assertEquals(0, result.getSubstituteCount());\r\n    result = new LevenshteinDetailedDistance(3).apply(\"aaa\", \"bbb\");\r\n    assertEquals(3, result.getDistance());\r\n    assertEquals(0, result.getInsertCount());\r\n    assertEquals(0, result.getDeleteCount());\r\n    assertEquals(3, result.getSubstituteCount());\r\n    result = new LevenshteinDetailedDistance(10).apply(\"aaaaaa\", \"b\");\r\n    assertEquals(6, result.getDistance());\r\n    assertEquals(0, result.getInsertCount());\r\n    assertEquals(5, result.getDeleteCount());\r\n    assertEquals(1, result.getSubstituteCount());\r\n    result = new LevenshteinDetailedDistance(8).apply(\"aaapppp\", \"b\");\r\n    assertEquals(7, result.getDistance());\r\n    assertEquals(0, result.getInsertCount());\r\n    assertEquals(6, result.getDeleteCount());\r\n    assertEquals(1, result.getSubstituteCount());\r\n    result = new LevenshteinDetailedDistance(4).apply(\"a\", \"bbb\");\r\n    assertEquals(3, result.getDistance());\r\n    assertEquals(2, result.getInsertCount());\r\n    assertEquals(0, result.getDeleteCount());\r\n    assertEquals(1, result.getSubstituteCount());\r\n    result = new LevenshteinDetailedDistance(7).apply(\"aaapppp\", \"b\");\r\n    assertEquals(7, result.getDistance());\r\n    assertEquals(0, result.getInsertCount());\r\n    assertEquals(6, result.getDeleteCount());\r\n    assertEquals(1, result.getSubstituteCount());\r\n    result = new LevenshteinDetailedDistance(3).apply(\"a\", \"bbb\");\r\n    assertEquals(3, result.getDistance());\r\n    assertEquals(2, result.getInsertCount());\r\n    assertEquals(0, result.getDeleteCount());\r\n    assertEquals(1, result.getSubstituteCount());\r\n    result = new LevenshteinDetailedDistance(2).apply(\"a\", \"bbb\");\r\n    assertEquals(-1, result.getDistance());\r\n    assertEquals(0, result.getInsertCount());\r\n    assertEquals(0, result.getDeleteCount());\r\n    assertEquals(0, result.getSubstituteCount());\r\n    result = new LevenshteinDetailedDistance(2).apply(\"bbb\", \"a\");\r\n    assertEquals(-1, result.getDistance());\r\n    assertEquals(0, result.getInsertCount());\r\n    assertEquals(0, result.getDeleteCount());\r\n    assertEquals(0, result.getSubstituteCount());\r\n    result = new LevenshteinDetailedDistance(6).apply(\"aaapppp\", \"b\");\r\n    assertEquals(-1, result.getDistance());\r\n    assertEquals(0, result.getInsertCount());\r\n    assertEquals(0, result.getDeleteCount());\r\n    assertEquals(0, result.getSubstituteCount());\r\n    result = new LevenshteinDetailedDistance(1).apply(\"a\", \"bbb\");\r\n    assertEquals(-1, result.getDistance());\r\n    assertEquals(0, result.getInsertCount());\r\n    assertEquals(0, result.getDeleteCount());\r\n    assertEquals(0, result.getSubstituteCount());\r\n    result = new LevenshteinDetailedDistance(1).apply(\"bbb\", \"a\");\r\n    assertEquals(-1, result.getDistance());\r\n    assertEquals(0, result.getInsertCount());\r\n    assertEquals(0, result.getDeleteCount());\r\n    assertEquals(0, result.getSubstituteCount());\r\n    result = new LevenshteinDetailedDistance(1).apply(\"12345\", \"1234567\");\r\n    assertEquals(-1, result.getDistance());\r\n    assertEquals(0, result.getInsertCount());\r\n    assertEquals(0, result.getDeleteCount());\r\n    assertEquals(0, result.getSubstituteCount());\r\n    result = new LevenshteinDetailedDistance(1).apply(\"1234567\", \"12345\");\r\n    assertEquals(-1, result.getDistance());\r\n    assertEquals(0, result.getInsertCount());\r\n    assertEquals(0, result.getDeleteCount());\r\n    assertEquals(0, result.getSubstituteCount());\r\n    result = new LevenshteinDetailedDistance(1).apply(\"frog\", \"fog\");\r\n    assertEquals(1, result.getDistance());\r\n    assertEquals(0, result.getInsertCount());\r\n    assertEquals(1, result.getDeleteCount());\r\n    assertEquals(0, result.getSubstituteCount());\r\n    result = new LevenshteinDetailedDistance(3).apply(\"fly\", \"ant\");\r\n    assertEquals(3, result.getDistance());\r\n    assertEquals(0, result.getInsertCount());\r\n    assertEquals(0, result.getDeleteCount());\r\n    assertEquals(3, result.getSubstituteCount());\r\n    result = new LevenshteinDetailedDistance(7).apply(\"elephant\", \"hippo\");\r\n    assertEquals(7, result.getDistance());\r\n    assertEquals(0, result.getInsertCount());\r\n    assertEquals(3, result.getDeleteCount());\r\n    assertEquals(4, result.getSubstituteCount());\r\n    result = new LevenshteinDetailedDistance(6).apply(\"elephant\", \"hippo\");\r\n    assertEquals(-1, result.getDistance());\r\n    assertEquals(0, result.getInsertCount());\r\n    assertEquals(0, result.getDeleteCount());\r\n    assertEquals(0, result.getSubstituteCount());\r\n    result = new LevenshteinDetailedDistance(7).apply(\"hippo\", \"elephant\");\r\n    assertEquals(7, result.getDistance());\r\n    assertEquals(3, result.getInsertCount());\r\n    assertEquals(0, result.getDeleteCount());\r\n    assertEquals(4, result.getSubstituteCount());\r\n    result = new LevenshteinDetailedDistance(7).apply(\"hippo\", \"elephant\");\r\n    assertEquals(7, result.getDistance());\r\n    assertEquals(3, result.getInsertCount());\r\n    assertEquals(0, result.getDeleteCount());\r\n    assertEquals(4, result.getSubstituteCount());\r\n    result = new LevenshteinDetailedDistance(6).apply(\"hippo\", \"elephant\");\r\n    assertEquals(-1, result.getDistance());\r\n    assertEquals(0, result.getInsertCount());\r\n    assertEquals(0, result.getDeleteCount());\r\n    assertEquals(0, result.getSubstituteCount());\r\n    result = new LevenshteinDetailedDistance(8).apply(\"hippo\", \"zzzzzzzz\");\r\n    assertEquals(8, result.getDistance());\r\n    assertEquals(3, result.getInsertCount());\r\n    assertEquals(0, result.getDeleteCount());\r\n    assertEquals(5, result.getSubstituteCount());\r\n    result = new LevenshteinDetailedDistance(8).apply(\"zzzzzzzz\", \"hippo\");\r\n    assertEquals(8, result.getDistance());\r\n    assertEquals(0, result.getInsertCount());\r\n    assertEquals(3, result.getDeleteCount());\r\n    assertEquals(5, result.getSubstituteCount());\r\n    result = new LevenshteinDetailedDistance(1).apply(\"hello\", \"hallo\");\r\n    assertEquals(1, result.getDistance());\r\n    assertEquals(0, result.getInsertCount());\r\n    assertEquals(0, result.getDeleteCount());\r\n    assertEquals(1, result.getSubstituteCount());\r\n    result = new LevenshteinDetailedDistance(Integer.MAX_VALUE).apply(\"frog\", \"fog\");\r\n    assertEquals(1, result.getDistance());\r\n    assertEquals(0, result.getInsertCount());\r\n    assertEquals(1, result.getDeleteCount());\r\n    assertEquals(0, result.getSubstituteCount());\r\n    result = new LevenshteinDetailedDistance(Integer.MAX_VALUE).apply(\"fly\", \"ant\");\r\n    assertEquals(3, result.getDistance());\r\n    assertEquals(0, result.getInsertCount());\r\n    assertEquals(0, result.getDeleteCount());\r\n    assertEquals(3, result.getSubstituteCount());\r\n    result = new LevenshteinDetailedDistance(Integer.MAX_VALUE).apply(\"elephant\", \"hippo\");\r\n    assertEquals(7, result.getDistance());\r\n    assertEquals(0, result.getInsertCount());\r\n    assertEquals(3, result.getDeleteCount());\r\n    assertEquals(4, result.getSubstituteCount());\r\n    result = new LevenshteinDetailedDistance(Integer.MAX_VALUE).apply(\"hippo\", \"elephant\");\r\n    assertEquals(7, result.getDistance());\r\n    assertEquals(3, result.getInsertCount());\r\n    assertEquals(0, result.getDeleteCount());\r\n    assertEquals(4, result.getSubstituteCount());\r\n    result = new LevenshteinDetailedDistance(Integer.MAX_VALUE).apply(\"hippo\", \"zzzzzzzz\");\r\n    assertEquals(8, result.getDistance());\r\n    assertEquals(3, result.getInsertCount());\r\n    assertEquals(0, result.getDeleteCount());\r\n    assertEquals(5, result.getSubstituteCount());\r\n    result = new LevenshteinDetailedDistance(Integer.MAX_VALUE).apply(\"zzzzzzzz\", \"hippo\");\r\n    assertEquals(8, result.getDistance());\r\n    assertEquals(0, result.getInsertCount());\r\n    assertEquals(3, result.getDeleteCount());\r\n    assertEquals(5, result.getSubstituteCount());\r\n    result = new LevenshteinDetailedDistance(Integer.MAX_VALUE).apply(\"hello\", \"hallo\");\r\n    assertEquals(1, result.getDistance());\r\n    assertEquals(0, result.getInsertCount());\r\n    assertEquals(0, result.getDeleteCount());\r\n    assertEquals(1, result.getSubstituteCount());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\similarity\\LevenshteinDetailedDistanceTest.java",
  "methodName" : "testGetThreshold",
  "sourceCode" : "@Test\r\nvoid testGetThreshold() {\r\n    final LevenshteinDetailedDistance levenshteinDetailedDistance = new LevenshteinDetailedDistance(0);\r\n    assertEquals(0, levenshteinDetailedDistance.getThreshold());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\similarity\\LevenshteinDetailedDistanceTest.java",
  "methodName" : "testHashCode",
  "sourceCode" : "@Test\r\nvoid testHashCode() {\r\n    final LevenshteinDetailedDistance classBeingTested = LevenshteinDetailedDistance.getDefaultInstance();\r\n    LevenshteinResults actualResult = classBeingTested.apply(\"aaapppp\", \"\");\r\n    LevenshteinResults expectedResult = new LevenshteinResults(7, 0, 7, 0);\r\n    assertEquals(expectedResult.hashCode(), actualResult.hashCode());\r\n    actualResult = classBeingTested.apply(\"frog\", \"fog\");\r\n    expectedResult = new LevenshteinResults(1, 0, 1, 0);\r\n    assertEquals(expectedResult.hashCode(), actualResult.hashCode());\r\n    actualResult = classBeingTested.apply(\"elephant\", \"hippo\");\r\n    expectedResult = new LevenshteinResults(7, 0, 3, 4);\r\n    assertEquals(expectedResult.hashCode(), actualResult.hashCode());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\similarity\\LevenshteinDetailedDistanceTest.java",
  "methodName" : "testToString",
  "sourceCode" : "@Test\r\nvoid testToString() {\r\n    final LevenshteinDetailedDistance classBeingTested = LevenshteinDetailedDistance.getDefaultInstance();\r\n    LevenshteinResults actualResult = classBeingTested.apply(\"fly\", \"ant\");\r\n    LevenshteinResults expectedResult = new LevenshteinResults(3, 0, 0, 3);\r\n    assertEquals(expectedResult.toString(), actualResult.toString());\r\n    actualResult = classBeingTested.apply(\"hippo\", \"elephant\");\r\n    expectedResult = new LevenshteinResults(7, 3, 0, 4);\r\n    assertEquals(expectedResult.toString(), actualResult.toString());\r\n    actualResult = classBeingTested.apply(\"\", \"a\");\r\n    expectedResult = new LevenshteinResults(1, 1, 0, 0);\r\n    assertEquals(expectedResult.toString(), actualResult.toString());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\similarity\\LevenshteinDistanceTest.java",
  "methodName" : "testApplyThrowsIllegalArgumentExceptionSimilarityInput",
  "sourceCode" : "@Test\r\nvoid testApplyThrowsIllegalArgumentExceptionSimilarityInput() {\r\n    assertThrows(IllegalArgumentException.class, () -> new LevenshteinDistance(0).apply((SimilarityInput<Object>) null, (SimilarityInput<Object>) null));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\similarity\\LevenshteinDistanceTest.java",
  "methodName" : "testApplyThrowsIllegalArgumentExceptionString",
  "sourceCode" : "@Test\r\nvoid testApplyThrowsIllegalArgumentExceptionString() {\r\n    assertThrows(IllegalArgumentException.class, () -> new LevenshteinDistance(0).apply((String) null, (String) null));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\similarity\\LevenshteinDistanceTest.java",
  "methodName" : "testConstructorWithNegativeThreshold",
  "sourceCode" : "@Test\r\nvoid testConstructorWithNegativeThreshold() {\r\n    assertThrows(IllegalArgumentException.class, () -> new LevenshteinDistance(-1));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\similarity\\LevenshteinDistanceTest.java",
  "methodName" : "testGetLevenshteinDistance",
  "sourceCode" : "@ParameterizedTest\r\n@MethodSource(\"org.apache.commons.text.similarity.SimilarityInputTest#similarityInputs()\")\r\nvoid testGetLevenshteinDistance(final Class<?> cls) {\r\n    assertEquals(0, UNLIMITED_DISTANCE.apply(SimilarityInputTest.build(cls, \"\"), SimilarityInputTest.build(cls, \"\")));\r\n    assertEquals(1, UNLIMITED_DISTANCE.apply(SimilarityInputTest.build(cls, \"\"), SimilarityInputTest.build(cls, \"a\")));\r\n    assertEquals(7, UNLIMITED_DISTANCE.apply(SimilarityInputTest.build(cls, \"aaapppp\"), SimilarityInputTest.build(cls, \"\")));\r\n    assertEquals(1, UNLIMITED_DISTANCE.apply(SimilarityInputTest.build(cls, \"frog\"), SimilarityInputTest.build(cls, \"fog\")));\r\n    assertEquals(3, UNLIMITED_DISTANCE.apply(SimilarityInputTest.build(cls, \"fly\"), SimilarityInputTest.build(cls, \"ant\")));\r\n    assertEquals(7, UNLIMITED_DISTANCE.apply(SimilarityInputTest.build(cls, \"elephant\"), SimilarityInputTest.build(cls, \"hippo\")));\r\n    assertEquals(7, UNLIMITED_DISTANCE.apply(SimilarityInputTest.build(cls, \"hippo\"), SimilarityInputTest.build(cls, \"elephant\")));\r\n    assertEquals(8, UNLIMITED_DISTANCE.apply(SimilarityInputTest.build(cls, \"hippo\"), SimilarityInputTest.build(cls, \"zzzzzzzz\")));\r\n    assertEquals(8, UNLIMITED_DISTANCE.apply(SimilarityInputTest.build(cls, \"zzzzzzzz\"), SimilarityInputTest.build(cls, \"hippo\")));\r\n    assertEquals(1, UNLIMITED_DISTANCE.apply(SimilarityInputTest.build(cls, \"hello\"), SimilarityInputTest.build(cls, \"hallo\")));\r\n}",
  "annotations" : [ "ParameterizedTest" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\similarity\\LevenshteinDistanceTest.java",
  "methodName" : "testGetLevenshteinDistance_NullString",
  "sourceCode" : "@ParameterizedTest\r\n@MethodSource(\"org.apache.commons.text.similarity.SimilarityInputTest#similarityInputs()\")\r\nvoid testGetLevenshteinDistance_NullString(final Class<?> cls) {\r\n    assertThrows(IllegalArgumentException.class, () -> UNLIMITED_DISTANCE.apply(SimilarityInputTest.build(cls, \"a\"), SimilarityInputTest.build(cls, null)));\r\n}",
  "annotations" : [ "ParameterizedTest" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\similarity\\LevenshteinDistanceTest.java",
  "methodName" : "testGetLevenshteinDistance_NullStringInt",
  "sourceCode" : "@ParameterizedTest\r\n@MethodSource(\"org.apache.commons.text.similarity.SimilarityInputTest#similarityInputs()\")\r\nvoid testGetLevenshteinDistance_NullStringInt(final Class<?> cls) {\r\n    assertThrows(IllegalArgumentException.class, () -> UNLIMITED_DISTANCE.apply(SimilarityInputTest.build(cls, null), SimilarityInputTest.build(cls, \"a\")));\r\n}",
  "annotations" : [ "ParameterizedTest" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\similarity\\LevenshteinDistanceTest.java",
  "methodName" : "testGetLevenshteinDistance_StringNull",
  "sourceCode" : "@ParameterizedTest\r\n@MethodSource(\"org.apache.commons.text.similarity.SimilarityInputTest#similarityInputs()\")\r\nvoid testGetLevenshteinDistance_StringNull(final Class<?> cls) {\r\n    assertThrows(IllegalArgumentException.class, () -> UNLIMITED_DISTANCE.apply(SimilarityInputTest.build(cls, null), SimilarityInputTest.build(cls, \"a\")));\r\n}",
  "annotations" : [ "ParameterizedTest" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\similarity\\LevenshteinDistanceTest.java",
  "methodName" : "testGetLevenshteinDistance_StringNullInt",
  "sourceCode" : "@ParameterizedTest\r\n@MethodSource(\"org.apache.commons.text.similarity.SimilarityInputTest#similarityInputs()\")\r\nvoid testGetLevenshteinDistance_StringNullInt(final Class<?> cls) {\r\n    assertThrows(IllegalArgumentException.class, () -> UNLIMITED_DISTANCE.apply(SimilarityInputTest.build(cls, \"a\"), SimilarityInputTest.build(cls, null)));\r\n}",
  "annotations" : [ "ParameterizedTest" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\similarity\\LevenshteinDistanceTest.java",
  "methodName" : "testGetLevenshteinDistance_StringString",
  "sourceCode" : "@ParameterizedTest\r\n@MethodSource(\"org.apache.commons.text.similarity.SimilarityInputTest#similarityInputs()\")\r\nvoid testGetLevenshteinDistance_StringString(final Class<?> cls) {\r\n    assertEquals(0, UNLIMITED_DISTANCE.apply(SimilarityInputTest.build(cls, \"\"), SimilarityInputTest.build(cls, \"\")));\r\n    assertEquals(1, UNLIMITED_DISTANCE.apply(SimilarityInputTest.build(cls, \"\"), SimilarityInputTest.build(cls, \"a\")));\r\n    assertEquals(7, UNLIMITED_DISTANCE.apply(SimilarityInputTest.build(cls, \"aaapppp\"), SimilarityInputTest.build(cls, \"\")));\r\n    assertEquals(1, UNLIMITED_DISTANCE.apply(SimilarityInputTest.build(cls, \"frog\"), SimilarityInputTest.build(cls, \"fog\")));\r\n    assertEquals(3, UNLIMITED_DISTANCE.apply(SimilarityInputTest.build(cls, \"fly\"), SimilarityInputTest.build(cls, \"ant\")));\r\n    assertEquals(7, UNLIMITED_DISTANCE.apply(SimilarityInputTest.build(cls, \"elephant\"), SimilarityInputTest.build(cls, \"hippo\")));\r\n    assertEquals(7, UNLIMITED_DISTANCE.apply(SimilarityInputTest.build(cls, \"hippo\"), SimilarityInputTest.build(cls, \"elephant\")));\r\n    assertEquals(8, UNLIMITED_DISTANCE.apply(SimilarityInputTest.build(cls, \"hippo\"), SimilarityInputTest.build(cls, \"zzzzzzzz\")));\r\n    assertEquals(8, UNLIMITED_DISTANCE.apply(SimilarityInputTest.build(cls, \"zzzzzzzz\"), SimilarityInputTest.build(cls, \"hippo\")));\r\n    assertEquals(1, UNLIMITED_DISTANCE.apply(SimilarityInputTest.build(cls, \"hello\"), SimilarityInputTest.build(cls, \"hallo\")));\r\n}",
  "annotations" : [ "ParameterizedTest" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\similarity\\LevenshteinDistanceTest.java",
  "methodName" : "testGetLevenshteinDistance_StringStringInt",
  "sourceCode" : "@ParameterizedTest\r\n@MethodSource(\"org.apache.commons.text.similarity.SimilarityInputTest#similarityInputs()\")\r\nvoid testGetLevenshteinDistance_StringStringInt(final Class<?> cls) {\r\n    // empty strings\r\n    assertEquals(0, new LevenshteinDistance(0).apply(SimilarityInputTest.build(cls, \"\"), SimilarityInputTest.build(cls, \"\")));\r\n    assertEquals(7, new LevenshteinDistance(8).apply(SimilarityInputTest.build(cls, \"aaapppp\"), SimilarityInputTest.build(cls, \"\")));\r\n    assertEquals(7, new LevenshteinDistance(7).apply(SimilarityInputTest.build(cls, \"aaapppp\"), SimilarityInputTest.build(cls, \"\")));\r\n    assertEquals(-1, new LevenshteinDistance(6).apply(SimilarityInputTest.build(cls, \"aaapppp\"), SimilarityInputTest.build(cls, \"\")));\r\n    // unequal strings, zero threshold\r\n    assertEquals(-1, new LevenshteinDistance(0).apply(SimilarityInputTest.build(cls, \"b\"), SimilarityInputTest.build(cls, \"a\")));\r\n    assertEquals(-1, new LevenshteinDistance(0).apply(SimilarityInputTest.build(cls, \"a\"), SimilarityInputTest.build(cls, \"b\")));\r\n    // equal strings\r\n    assertEquals(0, new LevenshteinDistance(0).apply(SimilarityInputTest.build(cls, \"aa\"), SimilarityInputTest.build(cls, \"aa\")));\r\n    assertEquals(0, new LevenshteinDistance(2).apply(SimilarityInputTest.build(cls, \"aa\"), SimilarityInputTest.build(cls, \"aa\")));\r\n    // same length\r\n    assertEquals(-1, new LevenshteinDistance(2).apply(SimilarityInputTest.build(cls, \"aaa\"), SimilarityInputTest.build(cls, \"bbb\")));\r\n    assertEquals(3, new LevenshteinDistance(3).apply(SimilarityInputTest.build(cls, \"aaa\"), SimilarityInputTest.build(cls, \"bbb\")));\r\n    // big stripe\r\n    assertEquals(6, new LevenshteinDistance(10).apply(SimilarityInputTest.build(cls, \"aaaaaa\"), SimilarityInputTest.build(cls, \"b\")));\r\n    // distance less than threshold\r\n    assertEquals(7, new LevenshteinDistance(8).apply(SimilarityInputTest.build(cls, \"aaapppp\"), SimilarityInputTest.build(cls, \"b\")));\r\n    assertEquals(3, new LevenshteinDistance(4).apply(SimilarityInputTest.build(cls, \"a\"), SimilarityInputTest.build(cls, \"bbb\")));\r\n    // distance equal to threshold\r\n    assertEquals(7, new LevenshteinDistance(7).apply(SimilarityInputTest.build(cls, \"aaapppp\"), SimilarityInputTest.build(cls, \"b\")));\r\n    assertEquals(3, new LevenshteinDistance(3).apply(SimilarityInputTest.build(cls, \"a\"), SimilarityInputTest.build(cls, \"bbb\")));\r\n    // distance greater than threshold\r\n    assertEquals(-1, new LevenshteinDistance(2).apply(SimilarityInputTest.build(cls, \"a\"), SimilarityInputTest.build(cls, \"bbb\")));\r\n    assertEquals(-1, new LevenshteinDistance(2).apply(SimilarityInputTest.build(cls, \"bbb\"), SimilarityInputTest.build(cls, \"a\")));\r\n    assertEquals(-1, new LevenshteinDistance(6).apply(SimilarityInputTest.build(cls, \"aaapppp\"), SimilarityInputTest.build(cls, \"b\")));\r\n    // stripe runs off array, strings not similar\r\n    assertEquals(-1, new LevenshteinDistance(1).apply(SimilarityInputTest.build(cls, \"a\"), SimilarityInputTest.build(cls, \"bbb\")));\r\n    assertEquals(-1, new LevenshteinDistance(1).apply(SimilarityInputTest.build(cls, \"bbb\"), SimilarityInputTest.build(cls, \"a\")));\r\n    // stripe runs off array, strings are similar\r\n    assertEquals(-1, new LevenshteinDistance(1).apply(SimilarityInputTest.build(cls, \"12345\"), SimilarityInputTest.build(cls, \"1234567\")));\r\n    assertEquals(-1, new LevenshteinDistance(1).apply(SimilarityInputTest.build(cls, \"1234567\"), SimilarityInputTest.build(cls, \"12345\")));\r\n    // old getLevenshteinDistance test cases\r\n    assertEquals(1, new LevenshteinDistance(1).apply(SimilarityInputTest.build(cls, \"frog\"), SimilarityInputTest.build(cls, \"fog\")));\r\n    assertEquals(3, new LevenshteinDistance(3).apply(SimilarityInputTest.build(cls, \"fly\"), SimilarityInputTest.build(cls, \"ant\")));\r\n    assertEquals(7, new LevenshteinDistance(7).apply(SimilarityInputTest.build(cls, \"elephant\"), SimilarityInputTest.build(cls, \"hippo\")));\r\n    assertEquals(-1, new LevenshteinDistance(6).apply(SimilarityInputTest.build(cls, \"elephant\"), SimilarityInputTest.build(cls, \"hippo\")));\r\n    assertEquals(7, new LevenshteinDistance(7).apply(SimilarityInputTest.build(cls, \"hippo\"), SimilarityInputTest.build(cls, \"elephant\")));\r\n    assertEquals(-1, new LevenshteinDistance(6).apply(SimilarityInputTest.build(cls, \"hippo\"), SimilarityInputTest.build(cls, \"elephant\")));\r\n    assertEquals(8, new LevenshteinDistance(8).apply(SimilarityInputTest.build(cls, \"hippo\"), SimilarityInputTest.build(cls, \"zzzzzzzz\")));\r\n    assertEquals(8, new LevenshteinDistance(8).apply(SimilarityInputTest.build(cls, \"zzzzzzzz\"), SimilarityInputTest.build(cls, \"hippo\")));\r\n    assertEquals(1, new LevenshteinDistance(1).apply(SimilarityInputTest.build(cls, \"hello\"), SimilarityInputTest.build(cls, \"hallo\")));\r\n    assertEquals(1, new LevenshteinDistance(Integer.MAX_VALUE).apply(SimilarityInputTest.build(cls, \"frog\"), SimilarityInputTest.build(cls, \"fog\")));\r\n    assertEquals(3, new LevenshteinDistance(Integer.MAX_VALUE).apply(SimilarityInputTest.build(cls, \"fly\"), SimilarityInputTest.build(cls, \"ant\")));\r\n    assertEquals(7, new LevenshteinDistance(Integer.MAX_VALUE).apply(SimilarityInputTest.build(cls, \"elephant\"), SimilarityInputTest.build(cls, \"hippo\")));\r\n    assertEquals(7, new LevenshteinDistance(Integer.MAX_VALUE).apply(SimilarityInputTest.build(cls, \"hippo\"), SimilarityInputTest.build(cls, \"elephant\")));\r\n    assertEquals(8, new LevenshteinDistance(Integer.MAX_VALUE).apply(SimilarityInputTest.build(cls, \"hippo\"), SimilarityInputTest.build(cls, \"zzzzzzzz\")));\r\n    assertEquals(8, new LevenshteinDistance(Integer.MAX_VALUE).apply(SimilarityInputTest.build(cls, \"zzzzzzzz\"), SimilarityInputTest.build(cls, \"hippo\")));\r\n    assertEquals(1, new LevenshteinDistance(Integer.MAX_VALUE).apply(SimilarityInputTest.build(cls, \"hello\"), SimilarityInputTest.build(cls, \"hallo\")));\r\n    assertEquals(-1, new LevenshteinDistance(1).apply(SimilarityInputTest.build(cls, \"abc\"), SimilarityInputTest.build(cls, \"acb\")));\r\n}",
  "annotations" : [ "ParameterizedTest" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\similarity\\LevenshteinDistanceTest.java",
  "methodName" : "testGetThresholdDirectlyAfterObjectInstantiation",
  "sourceCode" : "@Test\r\nvoid testGetThresholdDirectlyAfterObjectInstantiation() {\r\n    assertNull(LevenshteinDistance.getDefaultInstance().getThreshold());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\similarity\\LevenshteinResultsTest.java",
  "methodName" : "testEqualsDifferenceInSubstitutionCount",
  "sourceCode" : "@Test\r\nvoid testEqualsDifferenceInSubstitutionCount() {\r\n    final Integer integer = 1662;\r\n    final LevenshteinResults levenshteinResults = new LevenshteinResults(integer, integer, integer, integer);\r\n    final LevenshteinResults levenshteinResultsTwo = new LevenshteinResults(integer, integer, integer, null);\r\n    assertFalse(levenshteinResults.equals(levenshteinResultsTwo));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\similarity\\LevenshteinResultsTest.java",
  "methodName" : "testEqualsReturningFalse",
  "sourceCode" : "@Test\r\nvoid testEqualsReturningFalse() {\r\n    final Integer integerOne = 1662;\r\n    final Integer integerTwo = 1164;\r\n    final LevenshteinResults levenshteinResults = new LevenshteinResults(integerOne, integerOne, integerOne, integerOne);\r\n    final LevenshteinResults levenshteinResultsTwo = new LevenshteinResults(integerOne, integerOne, integerTwo, integerTwo);\r\n    assertFalse(levenshteinResults.equals(levenshteinResultsTwo));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\similarity\\LevenshteinResultsTest.java",
  "methodName" : "testEqualsSameObject",
  "sourceCode" : "@Test\r\nvoid testEqualsSameObject() {\r\n    final Integer integer = 1662;\r\n    final LevenshteinResults levenshteinResults = new LevenshteinResults(integer, integer, integer, null);\r\n    assertTrue(levenshteinResults.equals(levenshteinResults));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\similarity\\LevenshteinResultsTest.java",
  "methodName" : "testEqualsWithNonNull",
  "sourceCode" : "@Test\r\nvoid testEqualsWithNonNull() {\r\n    final Integer integer = 1;\r\n    final LevenshteinResults levenshteinResults = new LevenshteinResults(null, integer, integer, null);\r\n    final LevenshteinResults levenshteinResultsTwo = new LevenshteinResults(null, null, null, null);\r\n    assertFalse(levenshteinResults.equals(levenshteinResultsTwo));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\similarity\\LevenshteinResultsTest.java",
  "methodName" : "testEqualsWithNull",
  "sourceCode" : "@Test\r\nvoid testEqualsWithNull() {\r\n    final Integer integer = -647;\r\n    final LevenshteinResults levenshteinResults = new LevenshteinResults(integer, null, null, integer);\r\n    assertFalse(levenshteinResults.equals(null));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\similarity\\LongestCommonSubsequenceDistanceTest.java",
  "methodName" : "testGettingLongestCommonSubsequenceDistance",
  "sourceCode" : "@Test\r\nvoid testGettingLongestCommonSubsequenceDistance() {\r\n    assertEquals(0, subject.apply(\"\", \"\"));\r\n    assertEquals(4, subject.apply(\"left\", \"\"));\r\n    assertEquals(5, subject.apply(\"\", \"right\"));\r\n    assertEquals(1, subject.apply(\"frog\", \"fog\"));\r\n    assertEquals(6, subject.apply(\"fly\", \"ant\"));\r\n    assertEquals(11, subject.apply(\"elephant\", \"hippo\"));\r\n    assertEquals(7, subject.apply(\"ABC Corporation\", \"ABC Corp\"));\r\n    assertEquals(4, subject.apply(\"D N H Enterprises Inc\", \"D & H Enterprises, Inc.\"));\r\n    assertEquals(9, subject.apply(\"My Gym Children's Fitness Center\", \"My Gym. Childrens Fitness\"));\r\n    assertEquals(3, subject.apply(\"PENNSYLVANIA\", \"PENNCISYLVNIA\"));\r\n    assertEquals(7, subject.apply(\"left\", \"right\"));\r\n    assertEquals(9, subject.apply(\"leettteft\", \"ritttght\"));\r\n    assertEquals(0, subject.apply(\"the same string\", \"the same string\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\similarity\\LongestCommonSubsequenceDistanceTest.java",
  "methodName" : "testGettingLongestCommonSubsequenceDistanceNullNull",
  "sourceCode" : "@Test\r\nvoid testGettingLongestCommonSubsequenceDistanceNullNull() {\r\n    assertThrows(IllegalArgumentException.class, () -> subject.apply(null, null));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\similarity\\LongestCommonSubsequenceDistanceTest.java",
  "methodName" : "testGettingLongestCommonSubsequenceDistanceNullString",
  "sourceCode" : "@Test\r\nvoid testGettingLongestCommonSubsequenceDistanceNullString() {\r\n    assertThrows(IllegalArgumentException.class, () -> subject.apply(null, \"right\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\similarity\\LongestCommonSubsequenceDistanceTest.java",
  "methodName" : "testGettingLongestCommonSubsequenceDistanceStringNull",
  "sourceCode" : "@Test\r\nvoid testGettingLongestCommonSubsequenceDistanceStringNull() {\r\n    assertThrows(IllegalArgumentException.class, () -> subject.apply(\" \", null));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\similarity\\LongestCommonSubsequenceTest.java",
  "methodName" : "testGettingLogestCommonSubsequenceNullNull",
  "sourceCode" : "@Test\r\n@SuppressWarnings(\"deprecation\")\r\nvoid testGettingLogestCommonSubsequenceNullNull() {\r\n    assertThrows(IllegalArgumentException.class, () -> subject.logestCommonSubsequence(null, null));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\similarity\\LongestCommonSubsequenceTest.java",
  "methodName" : "testGettingLogestCommonSubsequenceNullString",
  "sourceCode" : "@Test\r\n@SuppressWarnings(\"deprecation\")\r\nvoid testGettingLogestCommonSubsequenceNullString() {\r\n    assertThrows(IllegalArgumentException.class, () -> subject.logestCommonSubsequence(null, \"right\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\similarity\\LongestCommonSubsequenceTest.java",
  "methodName" : "testGettingLogestCommonSubsequenceStringNull",
  "sourceCode" : "@Test\r\n@SuppressWarnings(\"deprecation\")\r\nvoid testGettingLogestCommonSubsequenceStringNull() {\r\n    assertThrows(IllegalArgumentException.class, () -> subject.logestCommonSubsequence(\" \", null));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\similarity\\LongestCommonSubsequenceTest.java",
  "methodName" : "testGettingLongestCommonSubsequenceApplyNullNull",
  "sourceCode" : "@Test\r\nvoid testGettingLongestCommonSubsequenceApplyNullNull() {\r\n    assertThrows(IllegalArgumentException.class, () -> subject.apply(null, null));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\similarity\\LongestCommonSubsequenceTest.java",
  "methodName" : "testGettingLongestCommonSubsequenceApplyNullString",
  "sourceCode" : "@Test\r\nvoid testGettingLongestCommonSubsequenceApplyNullString() {\r\n    assertThrows(IllegalArgumentException.class, () -> subject.apply(null, \"right\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\similarity\\LongestCommonSubsequenceTest.java",
  "methodName" : "testGettingLongestCommonSubsequenceApplyStringNull",
  "sourceCode" : "@Test\r\nvoid testGettingLongestCommonSubsequenceApplyStringNull() {\r\n    assertThrows(IllegalArgumentException.class, () -> subject.apply(\" \", null));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\similarity\\LongestCommonSubsequenceTest.java",
  "methodName" : "testGettingLongestCommonSubsequenceNullNull",
  "sourceCode" : "@Test\r\nvoid testGettingLongestCommonSubsequenceNullNull() {\r\n    assertThrows(IllegalArgumentException.class, () -> subject.longestCommonSubsequence(null, null));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\similarity\\LongestCommonSubsequenceTest.java",
  "methodName" : "testGettingLongestCommonSubsequenceNullString",
  "sourceCode" : "@Test\r\nvoid testGettingLongestCommonSubsequenceNullString() {\r\n    assertThrows(IllegalArgumentException.class, () -> subject.longestCommonSubsequence(null, \"right\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\similarity\\LongestCommonSubsequenceTest.java",
  "methodName" : "testGettingLongestCommonSubsequenceStringNull",
  "sourceCode" : "@Test\r\nvoid testGettingLongestCommonSubsequenceStringNull() {\r\n    assertThrows(IllegalArgumentException.class, () -> subject.longestCommonSubsequence(\" \", null));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\similarity\\LongestCommonSubsequenceTest.java",
  "methodName" : "testLogestCommonSubsequence",
  "sourceCode" : "@Test\r\n@Deprecated\r\nvoid testLogestCommonSubsequence() {\r\n    assertEquals(\"\", subject.logestCommonSubsequence(\"\", \"\"));\r\n    assertEquals(\"\", subject.logestCommonSubsequence(\"left\", \"\"));\r\n    assertEquals(\"\", subject.logestCommonSubsequence(\"\", \"right\"));\r\n    assertEquals(\"fog\", subject.logestCommonSubsequence(\"frog\", \"fog\"));\r\n    assertEquals(\"\", subject.logestCommonSubsequence(\"fly\", \"ant\"));\r\n    assertEquals(\"h\", subject.logestCommonSubsequence(\"elephant\", \"hippo\"));\r\n    assertEquals(\"ABC Corp\", subject.logestCommonSubsequence(\"ABC Corporation\", \"ABC Corp\"));\r\n    assertEquals(\"D  H Enterprises Inc\", subject.logestCommonSubsequence(\"D N H Enterprises Inc\", \"D & H Enterprises, Inc.\"));\r\n    assertEquals(\"My Gym Childrens Fitness\", subject.logestCommonSubsequence(\"My Gym Children's Fitness Center\", \"My Gym. Childrens Fitness\"));\r\n    assertEquals(\"PENNSYLVNIA\", subject.logestCommonSubsequence(\"PENNSYLVANIA\", \"PENNCISYLVNIA\"));\r\n    assertEquals(\"t\", subject.logestCommonSubsequence(\"left\", \"right\"));\r\n    assertEquals(\"tttt\", subject.logestCommonSubsequence(\"leettteft\", \"ritttght\"));\r\n    assertEquals(\"the same string\", subject.logestCommonSubsequence(\"the same string\", \"the same string\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\similarity\\LongestCommonSubsequenceTest.java",
  "methodName" : "testLongestCommonSubsequence",
  "sourceCode" : "@Test\r\nvoid testLongestCommonSubsequence() {\r\n    assertEquals(\"\", subject.longestCommonSubsequence(\"\", \"\"));\r\n    assertEquals(\"\", subject.longestCommonSubsequence(\"left\", \"\"));\r\n    assertEquals(\"\", subject.longestCommonSubsequence(\"\", \"right\"));\r\n    assertEquals(\"fog\", subject.longestCommonSubsequence(\"frog\", \"fog\"));\r\n    assertEquals(\"\", subject.longestCommonSubsequence(\"fly\", \"ant\"));\r\n    assertEquals(\"h\", subject.longestCommonSubsequence(\"elephant\", \"hippo\"));\r\n    assertEquals(\"ABC Corp\", subject.longestCommonSubsequence(\"ABC Corporation\", \"ABC Corp\"));\r\n    assertEquals(\"D  H Enterprises Inc\", subject.longestCommonSubsequence(\"D N H Enterprises Inc\", \"D & H Enterprises, Inc.\"));\r\n    assertEquals(\"My Gym Childrens Fitness\", subject.longestCommonSubsequence(\"My Gym Children's Fitness Center\", \"My Gym. Childrens Fitness\"));\r\n    assertEquals(\"PENNSYLVNIA\", subject.longestCommonSubsequence(\"PENNSYLVANIA\", \"PENNCISYLVNIA\"));\r\n    assertEquals(\"t\", subject.longestCommonSubsequence(\"left\", \"right\"));\r\n    assertEquals(\"tttt\", subject.longestCommonSubsequence(\"leettteft\", \"ritttght\"));\r\n    assertEquals(\"the same string\", subject.longestCommonSubsequence(\"the same string\", \"the same string\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\similarity\\LongestCommonSubsequenceTest.java",
  "methodName" : "testLongestCommonSubsequenceApply",
  "sourceCode" : "@Test\r\nvoid testLongestCommonSubsequenceApply() {\r\n    assertEquals(0, subject.apply(\"\", \"\"));\r\n    assertEquals(0, subject.apply(\"left\", \"\"));\r\n    assertEquals(0, subject.apply(\"\", \"right\"));\r\n    assertEquals(3, subject.apply(\"frog\", \"fog\"));\r\n    assertEquals(0, subject.apply(\"fly\", \"ant\"));\r\n    assertEquals(1, subject.apply(\"elephant\", \"hippo\"));\r\n    assertEquals(8, subject.apply(\"ABC Corporation\", \"ABC Corp\"));\r\n    assertEquals(20, subject.apply(\"D N H Enterprises Inc\", \"D & H Enterprises, Inc.\"));\r\n    assertEquals(24, subject.apply(\"My Gym Children's Fitness Center\", \"My Gym. Childrens Fitness\"));\r\n    assertEquals(11, subject.apply(\"PENNSYLVANIA\", \"PENNCISYLVNIA\"));\r\n    assertEquals(1, subject.apply(\"left\", \"right\"));\r\n    assertEquals(4, subject.apply(\"leettteft\", \"ritttght\"));\r\n    assertEquals(15, subject.apply(\"the same string\", \"the same string\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\similarity\\ParameterizedEditDistanceFromTest.java",
  "methodName" : "test",
  "sourceCode" : "@ParameterizedTest\r\n@MethodSource(\"parameters\")\r\nvoid test(final EditDistance<R> editDistance, final CharSequence left, final CharSequence right, final R distance) {\r\n    final EditDistanceFrom<R> editDistanceFrom = new EditDistanceFrom<>(editDistance, left);\r\n    assertEquals(distance, editDistanceFrom.apply(right));\r\n}",
  "annotations" : [ "ParameterizedTest" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\similarity\\ParameterizedLevenshteinDistanceTest.java",
  "methodName" : "test",
  "sourceCode" : "@ParameterizedTest\r\n@MethodSource(\"parameters\")\r\nvoid test(final Integer threshold, final CharSequence left, final CharSequence right, final Integer distance) {\r\n    assertEquals(distance, new LevenshteinDistance(threshold).apply(left, right));\r\n}",
  "annotations" : [ "ParameterizedTest" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\similarity\\ParameterizedSimilarityScoreFromTest.java",
  "methodName" : "test",
  "sourceCode" : "@ParameterizedTest\r\n@MethodSource(\"parameters\")\r\nvoid test(final SimilarityScore<R> similarityScore, final CharSequence left, final CharSequence right, final R distance) {\r\n    final SimilarityScoreFrom<R> similarityScoreFrom = new SimilarityScoreFrom<>(similarityScore, left);\r\n    assertEquals(distance, similarityScoreFrom.apply(right));\r\n}",
  "annotations" : [ "ParameterizedTest" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\similarity\\SimilarityCharacterInputTest.java",
  "methodName" : "testEquals",
  "sourceCode" : "@ParameterizedTest\r\n@MethodSource(\"org.apache.commons.text.similarity.SimilarityInputTest#similarityInputsEquals()\")\r\nvoid testEquals(final Class<?> cls) {\r\n    final SimilarityInput<Object> similarityInput1 = SimilarityInputTest.build(cls, \"\");\r\n    final SimilarityInput<Object> similarityInput2 = SimilarityInputTest.build(cls, \"\");\r\n    assertEquals(similarityInput1, similarityInput2);\r\n    assertEquals(similarityInput1, similarityInput1);\r\n    assertEquals(similarityInput2, similarityInput1);\r\n    assertEquals(similarityInput2, similarityInput2);\r\n    final SimilarityInput<Object> similarityInput3 = SimilarityInputTest.build(cls, \"3\");\r\n    final SimilarityInput<Object> similarityInput4 = SimilarityInputTest.build(cls, \"4\");\r\n    assertNotEquals(similarityInput1, similarityInput4);\r\n    assertNotEquals(similarityInput2, similarityInput4);\r\n    assertNotEquals(similarityInput3, similarityInput4);\r\n}",
  "annotations" : [ "ParameterizedTest" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\similarity\\SimilarityCharacterInputTest.java",
  "methodName" : "testHashCode",
  "sourceCode" : "@ParameterizedTest\r\n@MethodSource(\"org.apache.commons.text.similarity.SimilarityInputTest#similarityInputsEquals()\")\r\nvoid testHashCode(final Class<?> cls) {\r\n    final SimilarityInput<Object> similarityInput1 = SimilarityInputTest.build(cls, \"\");\r\n    final SimilarityInput<Object> similarityInput2 = SimilarityInputTest.build(cls, \"\");\r\n    assertEquals(similarityInput1.hashCode(), similarityInput2.hashCode());\r\n    assertEquals(similarityInput1.hashCode(), similarityInput1.hashCode());\r\n    assertEquals(similarityInput2.hashCode(), similarityInput1.hashCode());\r\n    assertEquals(similarityInput2.hashCode(), similarityInput2.hashCode());\r\n    final SimilarityInput<Object> similarityInput3 = SimilarityInputTest.build(cls, \"3\");\r\n    final SimilarityInput<Object> similarityInput4 = SimilarityInputTest.build(cls, \"4\");\r\n    assertNotEquals(similarityInput1.hashCode(), similarityInput4.hashCode());\r\n    assertNotEquals(similarityInput2.hashCode(), similarityInput4.hashCode());\r\n    assertNotEquals(similarityInput3.hashCode(), similarityInput4.hashCode());\r\n}",
  "annotations" : [ "ParameterizedTest" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\similarity\\SimilarityCharacterInputTest.java",
  "methodName" : "testToString",
  "sourceCode" : "@ParameterizedTest\r\n@MethodSource(\"org.apache.commons.text.similarity.SimilarityInputTest#similarityInputsEquals()\")\r\nvoid testToString(final Class<?> cls) {\r\n    final SimilarityInput<Object> similarityInput1 = SimilarityInputTest.build(cls, \"\");\r\n    final SimilarityInput<Object> similarityInput2 = SimilarityInputTest.build(cls, \"\");\r\n    assertEquals(similarityInput1.toString(), similarityInput2.toString());\r\n    assertEquals(similarityInput1.toString(), similarityInput1.toString());\r\n    assertEquals(similarityInput2.toString(), similarityInput1.toString());\r\n    assertEquals(similarityInput2.toString(), similarityInput2.toString());\r\n    final SimilarityInput<Object> similarityInput3 = SimilarityInputTest.build(cls, \"3\");\r\n    final SimilarityInput<Object> similarityInput4 = SimilarityInputTest.build(cls, \"4\");\r\n    assertNotEquals(similarityInput1.toString(), similarityInput4.toString());\r\n    assertNotEquals(similarityInput2.toString(), similarityInput4.toString());\r\n    assertNotEquals(similarityInput3.toString(), similarityInput4.toString());\r\n}",
  "annotations" : [ "ParameterizedTest" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\similarity\\SimilarityInputTest.java",
  "methodName" : "testInput",
  "sourceCode" : "@Test\r\nvoid testInput() throws Exception {\r\n    final SimilarityInput<Character> input = SimilarityInput.input(\"a\");\r\n    assertEquals(1, input.length());\r\n    assertThrows(IllegalArgumentException.class, () -> SimilarityInput.input(new Object()));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\similarity\\SimilarityScoreFromTest.java",
  "methodName" : "testApply",
  "sourceCode" : "@Test\r\nvoid testApply() {\r\n    final LongestCommonSubsequence longestCommonSubsequence = new LongestCommonSubsequence();\r\n    final SimilarityScoreFrom<Integer> similarityScoreFrom = new SimilarityScoreFrom<>(longestCommonSubsequence, \"asdf\");\r\n    assertEquals(1, similarityScoreFrom.apply(\"s\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\similarity\\SimilarityScoreFromTest.java",
  "methodName" : "testFailsToCreateSimilarityScoreFromThrowsIllegalArgumentException",
  "sourceCode" : "@Test\r\nvoid testFailsToCreateSimilarityScoreFromThrowsIllegalArgumentException() {\r\n    assertThrows(IllegalArgumentException.class, () -> new SimilarityScoreFrom<>(null, \"\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\similarity\\StringMetricFromTest.java",
  "methodName" : "testEquivalence",
  "sourceCode" : "@Test\r\nvoid testEquivalence() {\r\n    final EditDistance<Integer> metric = LevenshteinDistance.getDefaultInstance();\r\n    final String left = \"Apache\";\r\n    final String right = \"a patchy\";\r\n    final Integer distance = 4;\r\n    final EditDistanceFrom<Integer> metricFrom = new EditDistanceFrom<>(metric, left);\r\n    assertEquals(distance, metricFrom.apply(right));\r\n    assertEquals(metric.apply(left, right), metricFrom.apply(right));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\similarity\\StringMetricFromTest.java",
  "methodName" : "testJavadocExample",
  "sourceCode" : "@Test\r\nvoid testJavadocExample() {\r\n    final EditDistance<Integer> metric = LevenshteinDistance.getDefaultInstance();\r\n    final String target = \"Apache\";\r\n    final EditDistanceFrom<Integer> metricFrom = new EditDistanceFrom<>(metric, target);\r\n    String mostSimilar = null;\r\n    Integer shortestDistance = null;\r\n    for (final String test : new String[] { \"Appaloosa\", \"a patchy\", \"apple\" }) {\r\n        final Integer distance = metricFrom.apply(test);\r\n        if (shortestDistance == null || distance < shortestDistance) {\r\n            shortestDistance = distance;\r\n            mostSimilar = test;\r\n        }\r\n    }\r\n    assertEquals(\"a patchy\", mostSimilar);\r\n    assertEquals(4, shortestDistance);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\similarity\\StringMetricFromTest.java",
  "methodName" : "testMissingMetric",
  "sourceCode" : "@Test\r\nvoid testMissingMetric() {\r\n    assertThrows(IllegalArgumentException.class, () -> new EditDistanceFrom<Number>(null, \"no go\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\StrBuilderAppendInsertTest.java",
  "methodName" : "testAppend_Boolean",
  "sourceCode" : "@Test\r\nvoid testAppend_Boolean() {\r\n    final StrBuilder sb = new StrBuilder();\r\n    sb.append(true);\r\n    assertEquals(\"true\", sb.toString());\r\n    sb.append(false);\r\n    assertEquals(\"truefalse\", sb.toString());\r\n    sb.append('!');\r\n    assertEquals(\"truefalse!\", sb.toString());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\StrBuilderAppendInsertTest.java",
  "methodName" : "testAppend_CharArray",
  "sourceCode" : "@Test\r\nvoid testAppend_CharArray() {\r\n    StrBuilder sb = new StrBuilder();\r\n    sb.setNullText(\"NULL\").append((char[]) null);\r\n    assertEquals(\"NULL\", sb.toString());\r\n    sb = new StrBuilder();\r\n    sb.append(ArrayUtils.EMPTY_CHAR_ARRAY);\r\n    assertEquals(\"\", sb.toString());\r\n    sb.append(new char[] { 'f', 'o', 'o' });\r\n    assertEquals(\"foo\", sb.toString());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\StrBuilderAppendInsertTest.java",
  "methodName" : "testAppend_CharArray_int_int",
  "sourceCode" : "@Test\r\nvoid testAppend_CharArray_int_int() {\r\n    StrBuilder sb = new StrBuilder();\r\n    sb.setNullText(\"NULL\").append((char[]) null, 0, 1);\r\n    assertEquals(\"NULL\", sb.toString());\r\n    sb = new StrBuilder();\r\n    sb.append(new char[] { 'f', 'o', 'o' }, 0, 3);\r\n    assertEquals(\"foo\", sb.toString());\r\n    try {\r\n        sb.append(new char[] { 'b', 'a', 'r' }, -1, 1);\r\n        fail(\"append(char[], -1,) expected IndexOutOfBoundsException\");\r\n    } catch (final IndexOutOfBoundsException e) {\r\n        // expected\r\n    }\r\n    try {\r\n        sb.append(new char[] { 'b', 'a', 'r' }, 3, 1);\r\n        fail(\"append(char[], 3,) expected IndexOutOfBoundsException\");\r\n    } catch (final IndexOutOfBoundsException e) {\r\n        // expected\r\n    }\r\n    try {\r\n        sb.append(new char[] { 'b', 'a', 'r' }, 1, -1);\r\n        fail(\"append(char[],, -1) expected IndexOutOfBoundsException\");\r\n    } catch (final IndexOutOfBoundsException e) {\r\n        // expected\r\n    }\r\n    try {\r\n        sb.append(new char[] { 'b', 'a', 'r' }, 1, 3);\r\n        fail(\"append(char[], 1, 3) expected IndexOutOfBoundsException\");\r\n    } catch (final IndexOutOfBoundsException e) {\r\n        // expected\r\n    }\r\n    try {\r\n        sb.append(new char[] { 'b', 'a', 'r' }, -1, 3);\r\n        fail(\"append(char[], -1, 3) expected IndexOutOfBoundsException\");\r\n    } catch (final IndexOutOfBoundsException e) {\r\n        // expected\r\n    }\r\n    try {\r\n        sb.append(new char[] { 'b', 'a', 'r' }, 4, 0);\r\n        fail(\"append(char[], 4, 0) expected IndexOutOfBoundsException\");\r\n    } catch (final IndexOutOfBoundsException e) {\r\n        // expected\r\n    }\r\n    sb.append(new char[] { 'b', 'a', 'r' }, 3, 0);\r\n    assertEquals(\"foo\", sb.toString());\r\n    sb.append(new char[] { 'a', 'b', 'c', 'b', 'a', 'r', 'd', 'e', 'f' }, 3, 3);\r\n    assertEquals(\"foobar\", sb.toString());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\StrBuilderAppendInsertTest.java",
  "methodName" : "testAppend_FormattedString",
  "sourceCode" : "@Test\r\nvoid testAppend_FormattedString() {\r\n    StrBuilder sb;\r\n    sb = new StrBuilder();\r\n    sb.append(\"Hi\", (Object[]) null);\r\n    assertEquals(\"Hi\", sb.toString());\r\n    sb = new StrBuilder();\r\n    sb.append(\"Hi\", \"Alice\");\r\n    assertEquals(\"Hi\", sb.toString());\r\n    sb = new StrBuilder();\r\n    sb.append(\"Hi %s\", \"Alice\");\r\n    assertEquals(\"Hi Alice\", sb.toString());\r\n    sb = new StrBuilder();\r\n    sb.append(\"Hi %s %,d\", \"Alice\", 5000);\r\n    // group separator depends on system locale\r\n    final char groupingSeparator = DecimalFormatSymbols.getInstance().getGroupingSeparator();\r\n    final String expected = \"Hi Alice 5\" + groupingSeparator + \"000\";\r\n    assertEquals(expected, sb.toString());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\StrBuilderAppendInsertTest.java",
  "methodName" : "testAppend_Object",
  "sourceCode" : "@Test\r\nvoid testAppend_Object() {\r\n    final StrBuilder sb = new StrBuilder();\r\n    sb.appendNull();\r\n    assertEquals(\"\", sb.toString());\r\n    sb.append((Object) null);\r\n    assertEquals(\"\", sb.toString());\r\n    sb.append(FOO);\r\n    assertEquals(\"foo\", sb.toString());\r\n    sb.append((StringBuffer) null);\r\n    assertEquals(\"foo\", sb.toString());\r\n    sb.append(new StringBuffer(\"baz\"));\r\n    assertEquals(\"foobaz\", sb.toString());\r\n    sb.append(new StrBuilder(\"yes\"));\r\n    assertEquals(\"foobazyes\", sb.toString());\r\n    sb.append((CharSequence) \"Seq\");\r\n    assertEquals(\"foobazyesSeq\", sb.toString());\r\n    // Check it supports StringBuilder\r\n    sb.append(new StringBuilder(\"bld\"));\r\n    assertEquals(\"foobazyesSeqbld\", sb.toString());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\StrBuilderAppendInsertTest.java",
  "methodName" : "testAppend_PrimitiveNumber",
  "sourceCode" : "@Test\r\nvoid testAppend_PrimitiveNumber() {\r\n    final StrBuilder sb = new StrBuilder();\r\n    sb.append(0);\r\n    assertEquals(\"0\", sb.toString());\r\n    sb.append(1L);\r\n    assertEquals(\"01\", sb.toString());\r\n    sb.append(2.3f);\r\n    assertEquals(\"012.3\", sb.toString());\r\n    sb.append(4.5d);\r\n    assertEquals(\"012.34.5\", sb.toString());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\StrBuilderAppendInsertTest.java",
  "methodName" : "testAppend_StrBuilder",
  "sourceCode" : "@Test\r\nvoid testAppend_StrBuilder() {\r\n    StrBuilder sb = new StrBuilder();\r\n    sb.setNullText(\"NULL\").append((StrBuilder) null);\r\n    assertEquals(\"NULL\", sb.toString());\r\n    sb = new StrBuilder();\r\n    sb.append(new StrBuilder(\"foo\"));\r\n    assertEquals(\"foo\", sb.toString());\r\n    sb.append(new StrBuilder(\"\"));\r\n    assertEquals(\"foo\", sb.toString());\r\n    sb.append(new StrBuilder(\"bar\"));\r\n    assertEquals(\"foobar\", sb.toString());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\StrBuilderAppendInsertTest.java",
  "methodName" : "testAppend_StrBuilder_int_int",
  "sourceCode" : "@Test\r\nvoid testAppend_StrBuilder_int_int() {\r\n    StrBuilder sb = new StrBuilder();\r\n    sb.setNullText(\"NULL\").append((StrBuilder) null, 0, 1);\r\n    assertEquals(\"NULL\", sb.toString());\r\n    sb = new StrBuilder();\r\n    sb.append(new StrBuilder(\"foo\"), 0, 3);\r\n    assertEquals(\"foo\", sb.toString());\r\n    try {\r\n        sb.append(new StrBuilder(\"bar\"), -1, 1);\r\n        fail(\"append(char[], -1,) expected IndexOutOfBoundsException\");\r\n    } catch (final IndexOutOfBoundsException e) {\r\n        // expected\r\n    }\r\n    try {\r\n        sb.append(new StrBuilder(\"bar\"), 3, 1);\r\n        fail(\"append(char[], 3,) expected IndexOutOfBoundsException\");\r\n    } catch (final IndexOutOfBoundsException e) {\r\n        // expected\r\n    }\r\n    try {\r\n        sb.append(new StrBuilder(\"bar\"), 1, -1);\r\n        fail(\"append(char[],, -1) expected IndexOutOfBoundsException\");\r\n    } catch (final IndexOutOfBoundsException e) {\r\n        // expected\r\n    }\r\n    try {\r\n        sb.append(new StrBuilder(\"bar\"), 1, 3);\r\n        fail(\"append(char[], 1, 3) expected IndexOutOfBoundsException\");\r\n    } catch (final IndexOutOfBoundsException e) {\r\n        // expected\r\n    }\r\n    try {\r\n        sb.append(new StrBuilder(\"bar\"), -1, 3);\r\n        fail(\"append(char[], -1, 3) expected IndexOutOfBoundsException\");\r\n    } catch (final IndexOutOfBoundsException e) {\r\n        // expected\r\n    }\r\n    try {\r\n        sb.append(new StrBuilder(\"bar\"), 4, 0);\r\n        fail(\"append(char[], 4, 0) expected IndexOutOfBoundsException\");\r\n    } catch (final IndexOutOfBoundsException e) {\r\n        // expected\r\n    }\r\n    sb.append(new StrBuilder(\"bar\"), 3, 0);\r\n    assertEquals(\"foo\", sb.toString());\r\n    sb.append(new StrBuilder(\"abcbardef\"), 3, 3);\r\n    assertEquals(\"foobar\", sb.toString());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\StrBuilderAppendInsertTest.java",
  "methodName" : "testAppend_String",
  "sourceCode" : "@Test\r\nvoid testAppend_String() {\r\n    StrBuilder sb = new StrBuilder();\r\n    sb.setNullText(\"NULL\").append((String) null);\r\n    assertEquals(\"NULL\", sb.toString());\r\n    sb = new StrBuilder();\r\n    sb.append(\"foo\");\r\n    assertEquals(\"foo\", sb.toString());\r\n    sb.append(\"\");\r\n    assertEquals(\"foo\", sb.toString());\r\n    sb.append(\"bar\");\r\n    assertEquals(\"foobar\", sb.toString());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\StrBuilderAppendInsertTest.java",
  "methodName" : "testAppend_String_int_int",
  "sourceCode" : "@Test\r\nvoid testAppend_String_int_int() {\r\n    StrBuilder sb = new StrBuilder();\r\n    sb.setNullText(\"NULL\").append((String) null, 0, 1);\r\n    assertEquals(\"NULL\", sb.toString());\r\n    sb = new StrBuilder();\r\n    sb.append(\"foo\", 0, 3);\r\n    assertEquals(\"foo\", sb.toString());\r\n    try {\r\n        sb.append(\"bar\", -1, 1);\r\n        fail(\"append(char[], -1,) expected IndexOutOfBoundsException\");\r\n    } catch (final IndexOutOfBoundsException e) {\r\n        // expected\r\n    }\r\n    try {\r\n        sb.append(\"bar\", 3, 1);\r\n        fail(\"append(char[], 3,) expected IndexOutOfBoundsException\");\r\n    } catch (final IndexOutOfBoundsException e) {\r\n        // expected\r\n    }\r\n    try {\r\n        sb.append(\"bar\", 1, -1);\r\n        fail(\"append(char[],, -1) expected IndexOutOfBoundsException\");\r\n    } catch (final IndexOutOfBoundsException e) {\r\n        // expected\r\n    }\r\n    try {\r\n        sb.append(\"bar\", 1, 3);\r\n        fail(\"append(char[], 1, 3) expected IndexOutOfBoundsException\");\r\n    } catch (final IndexOutOfBoundsException e) {\r\n        // expected\r\n    }\r\n    try {\r\n        sb.append(\"bar\", -1, 3);\r\n        fail(\"append(char[], -1, 3) expected IndexOutOfBoundsException\");\r\n    } catch (final IndexOutOfBoundsException e) {\r\n        // expected\r\n    }\r\n    try {\r\n        sb.append(\"bar\", 4, 0);\r\n        fail(\"append(char[], 4, 0) expected IndexOutOfBoundsException\");\r\n    } catch (final IndexOutOfBoundsException e) {\r\n        // expected\r\n    }\r\n    sb.append(\"bar\", 3, 0);\r\n    assertEquals(\"foo\", sb.toString());\r\n    sb.append(\"abcbardef\", 3, 3);\r\n    assertEquals(\"foobar\", sb.toString());\r\n    sb.append((CharSequence) \"abcbardef\", 4, 3);\r\n    assertEquals(\"foobarard\", sb.toString());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\StrBuilderAppendInsertTest.java",
  "methodName" : "testAppend_StringBuffer",
  "sourceCode" : "@Test\r\nvoid testAppend_StringBuffer() {\r\n    StrBuilder sb = new StrBuilder();\r\n    sb.setNullText(\"NULL\").append((StringBuffer) null);\r\n    assertEquals(\"NULL\", sb.toString());\r\n    sb = new StrBuilder();\r\n    sb.append(new StringBuffer(\"foo\"));\r\n    assertEquals(\"foo\", sb.toString());\r\n    sb.append(new StringBuffer(\"\"));\r\n    assertEquals(\"foo\", sb.toString());\r\n    sb.append(new StringBuffer(\"bar\"));\r\n    assertEquals(\"foobar\", sb.toString());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\StrBuilderAppendInsertTest.java",
  "methodName" : "testAppend_StringBuffer_int_int",
  "sourceCode" : "@Test\r\nvoid testAppend_StringBuffer_int_int() {\r\n    StrBuilder sb = new StrBuilder();\r\n    sb.setNullText(\"NULL\").append((StringBuffer) null, 0, 1);\r\n    assertEquals(\"NULL\", sb.toString());\r\n    sb = new StrBuilder();\r\n    sb.append(new StringBuffer(\"foo\"), 0, 3);\r\n    assertEquals(\"foo\", sb.toString());\r\n    try {\r\n        sb.append(new StringBuffer(\"bar\"), -1, 1);\r\n        fail(\"append(char[], -1,) expected IndexOutOfBoundsException\");\r\n    } catch (final IndexOutOfBoundsException e) {\r\n        // expected\r\n    }\r\n    try {\r\n        sb.append(new StringBuffer(\"bar\"), 3, 1);\r\n        fail(\"append(char[], 3,) expected IndexOutOfBoundsException\");\r\n    } catch (final IndexOutOfBoundsException e) {\r\n        // expected\r\n    }\r\n    try {\r\n        sb.append(new StringBuffer(\"bar\"), 1, -1);\r\n        fail(\"append(char[],, -1) expected IndexOutOfBoundsException\");\r\n    } catch (final IndexOutOfBoundsException e) {\r\n        // expected\r\n    }\r\n    try {\r\n        sb.append(new StringBuffer(\"bar\"), 1, 3);\r\n        fail(\"append(char[], 1, 3) expected IndexOutOfBoundsException\");\r\n    } catch (final IndexOutOfBoundsException e) {\r\n        // expected\r\n    }\r\n    try {\r\n        sb.append(new StringBuffer(\"bar\"), -1, 3);\r\n        fail(\"append(char[], -1, 3) expected IndexOutOfBoundsException\");\r\n    } catch (final IndexOutOfBoundsException e) {\r\n        // expected\r\n    }\r\n    try {\r\n        sb.append(new StringBuffer(\"bar\"), 4, 0);\r\n        fail(\"append(char[], 4, 0) expected IndexOutOfBoundsException\");\r\n    } catch (final IndexOutOfBoundsException e) {\r\n        // expected\r\n    }\r\n    sb.append(new StringBuffer(\"bar\"), 3, 0);\r\n    assertEquals(\"foo\", sb.toString());\r\n    sb.append(new StringBuffer(\"abcbardef\"), 3, 3);\r\n    assertEquals(\"foobar\", sb.toString());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\StrBuilderAppendInsertTest.java",
  "methodName" : "testAppend_StringBuilder",
  "sourceCode" : "@Test\r\nvoid testAppend_StringBuilder() {\r\n    StrBuilder sb = new StrBuilder();\r\n    sb.setNullText(\"NULL\").append((String) null);\r\n    assertEquals(\"NULL\", sb.toString());\r\n    sb = new StrBuilder();\r\n    sb.append(new StringBuilder(\"foo\"));\r\n    assertEquals(\"foo\", sb.toString());\r\n    sb.append(new StringBuilder(\"\"));\r\n    assertEquals(\"foo\", sb.toString());\r\n    sb.append(new StringBuilder(\"bar\"));\r\n    assertEquals(\"foobar\", sb.toString());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\StrBuilderAppendInsertTest.java",
  "methodName" : "testAppend_StringBuilder_int_int",
  "sourceCode" : "@Test\r\nvoid testAppend_StringBuilder_int_int() {\r\n    StrBuilder sb = new StrBuilder();\r\n    sb.setNullText(\"NULL\").append((String) null, 0, 1);\r\n    assertEquals(\"NULL\", sb.toString());\r\n    sb = new StrBuilder();\r\n    sb.append(new StringBuilder(\"foo\"), 0, 3);\r\n    assertEquals(\"foo\", sb.toString());\r\n    try {\r\n        sb.append(new StringBuilder(\"bar\"), -1, 1);\r\n        fail(\"append(StringBuilder, -1,) expected IndexOutOfBoundsException\");\r\n    } catch (final IndexOutOfBoundsException e) {\r\n        // expected\r\n    }\r\n    try {\r\n        sb.append(new StringBuilder(\"bar\"), 3, 1);\r\n        fail(\"append(StringBuilder, 3,) expected IndexOutOfBoundsException\");\r\n    } catch (final IndexOutOfBoundsException e) {\r\n        // expected\r\n    }\r\n    try {\r\n        sb.append(new StringBuilder(\"bar\"), 1, -1);\r\n        fail(\"append(StringBuilder,, -1) expected IndexOutOfBoundsException\");\r\n    } catch (final IndexOutOfBoundsException e) {\r\n        // expected\r\n    }\r\n    try {\r\n        sb.append(new StringBuilder(\"bar\"), 1, 3);\r\n        fail(\"append(StringBuilder, 1, 3) expected IndexOutOfBoundsException\");\r\n    } catch (final IndexOutOfBoundsException e) {\r\n        // expected\r\n    }\r\n    try {\r\n        sb.append(new StringBuilder(\"bar\"), -1, 3);\r\n        fail(\"append(StringBuilder, -1, 3) expected IndexOutOfBoundsException\");\r\n    } catch (final IndexOutOfBoundsException e) {\r\n        // expected\r\n    }\r\n    try {\r\n        sb.append(new StringBuilder(\"bar\"), 4, 0);\r\n        fail(\"append(StringBuilder, 4, 0) expected IndexOutOfBoundsException\");\r\n    } catch (final IndexOutOfBoundsException e) {\r\n        // expected\r\n    }\r\n    sb.append(new StringBuilder(\"bar\"), 3, 0);\r\n    assertEquals(\"foo\", sb.toString());\r\n    sb.append(new StringBuilder(\"abcbardef\"), 3, 3);\r\n    assertEquals(\"foobar\", sb.toString());\r\n    sb.append(new StringBuilder(\"abcbardef\"), 4, 3);\r\n    assertEquals(\"foobarard\", sb.toString());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\StrBuilderAppendInsertTest.java",
  "methodName" : "testAppendAll_Array",
  "sourceCode" : "@Test\r\nvoid testAppendAll_Array() {\r\n    final StrBuilder sb = new StrBuilder();\r\n    sb.appendAll((Object[]) null);\r\n    assertEquals(\"\", sb.toString());\r\n    sb.clear();\r\n    sb.appendAll();\r\n    assertEquals(\"\", sb.toString());\r\n    sb.clear();\r\n    sb.appendAll(\"foo\", \"bar\", \"baz\");\r\n    assertEquals(\"foobarbaz\", sb.toString());\r\n    sb.clear();\r\n    sb.appendAll(\"foo\", \"bar\", \"baz\");\r\n    assertEquals(\"foobarbaz\", sb.toString());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\StrBuilderAppendInsertTest.java",
  "methodName" : "testAppendAll_Collection",
  "sourceCode" : "@Test\r\nvoid testAppendAll_Collection() {\r\n    final StrBuilder sb = new StrBuilder();\r\n    sb.appendAll((Collection<?>) null);\r\n    assertEquals(\"\", sb.toString());\r\n    sb.clear();\r\n    sb.appendAll(Collections.EMPTY_LIST);\r\n    assertEquals(\"\", sb.toString());\r\n    sb.clear();\r\n    sb.appendAll(Arrays.asList(\"foo\", \"bar\", \"baz\"));\r\n    assertEquals(\"foobarbaz\", sb.toString());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\StrBuilderAppendInsertTest.java",
  "methodName" : "testAppendAll_Iterator",
  "sourceCode" : "@Test\r\nvoid testAppendAll_Iterator() {\r\n    final StrBuilder sb = new StrBuilder();\r\n    sb.appendAll((Iterator<?>) null);\r\n    assertEquals(\"\", sb.toString());\r\n    sb.clear();\r\n    sb.appendAll(Collections.EMPTY_LIST.iterator());\r\n    assertEquals(\"\", sb.toString());\r\n    sb.clear();\r\n    sb.appendAll(Arrays.asList(\"foo\", \"bar\", \"baz\").iterator());\r\n    assertEquals(\"foobarbaz\", sb.toString());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\StrBuilderAppendInsertTest.java",
  "methodName" : "testAppendFixedWidthPadLeft",
  "sourceCode" : "@Test\r\nvoid testAppendFixedWidthPadLeft() {\r\n    final StrBuilder sb = new StrBuilder();\r\n    sb.appendFixedWidthPadLeft(\"foo\", -1, '-');\r\n    assertEquals(\"\", sb.toString());\r\n    sb.clear();\r\n    sb.appendFixedWidthPadLeft(\"foo\", 0, '-');\r\n    assertEquals(\"\", sb.toString());\r\n    sb.clear();\r\n    sb.appendFixedWidthPadLeft(\"foo\", 1, '-');\r\n    assertEquals(\"o\", sb.toString());\r\n    sb.clear();\r\n    sb.appendFixedWidthPadLeft(\"foo\", 2, '-');\r\n    assertEquals(\"oo\", sb.toString());\r\n    sb.clear();\r\n    sb.appendFixedWidthPadLeft(\"foo\", 3, '-');\r\n    assertEquals(\"foo\", sb.toString());\r\n    sb.clear();\r\n    sb.appendFixedWidthPadLeft(\"foo\", 4, '-');\r\n    assertEquals(\"-foo\", sb.toString());\r\n    sb.clear();\r\n    sb.appendFixedWidthPadLeft(\"foo\", 10, '-');\r\n    assertEquals(10, sb.length());\r\n    // 1234567890\r\n    assertEquals(\"-------foo\", sb.toString());\r\n    sb.clear();\r\n    sb.setNullText(\"null\");\r\n    sb.appendFixedWidthPadLeft(null, 5, '-');\r\n    assertEquals(\"-null\", sb.toString());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\StrBuilderAppendInsertTest.java",
  "methodName" : "testAppendFixedWidthPadLeft_int",
  "sourceCode" : "@Test\r\nvoid testAppendFixedWidthPadLeft_int() {\r\n    final StrBuilder sb = new StrBuilder();\r\n    sb.appendFixedWidthPadLeft(123, -1, '-');\r\n    assertEquals(\"\", sb.toString());\r\n    sb.clear();\r\n    sb.appendFixedWidthPadLeft(123, 0, '-');\r\n    assertEquals(\"\", sb.toString());\r\n    sb.clear();\r\n    sb.appendFixedWidthPadLeft(123, 1, '-');\r\n    assertEquals(\"3\", sb.toString());\r\n    sb.clear();\r\n    sb.appendFixedWidthPadLeft(123, 2, '-');\r\n    assertEquals(\"23\", sb.toString());\r\n    sb.clear();\r\n    sb.appendFixedWidthPadLeft(123, 3, '-');\r\n    assertEquals(\"123\", sb.toString());\r\n    sb.clear();\r\n    sb.appendFixedWidthPadLeft(123, 4, '-');\r\n    assertEquals(\"-123\", sb.toString());\r\n    sb.clear();\r\n    sb.appendFixedWidthPadLeft(123, 10, '-');\r\n    assertEquals(10, sb.length());\r\n    // 1234567890\r\n    assertEquals(\"-------123\", sb.toString());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\StrBuilderAppendInsertTest.java",
  "methodName" : "testAppendFixedWidthPadRight",
  "sourceCode" : "@Test\r\nvoid testAppendFixedWidthPadRight() {\r\n    final StrBuilder sb = new StrBuilder();\r\n    sb.appendFixedWidthPadRight(\"foo\", -1, '-');\r\n    assertEquals(\"\", sb.toString());\r\n    sb.clear();\r\n    sb.appendFixedWidthPadRight(\"foo\", 0, '-');\r\n    assertEquals(\"\", sb.toString());\r\n    sb.clear();\r\n    sb.appendFixedWidthPadRight(\"foo\", 1, '-');\r\n    assertEquals(\"f\", sb.toString());\r\n    sb.clear();\r\n    sb.appendFixedWidthPadRight(\"foo\", 2, '-');\r\n    assertEquals(\"fo\", sb.toString());\r\n    sb.clear();\r\n    sb.appendFixedWidthPadRight(\"foo\", 3, '-');\r\n    assertEquals(\"foo\", sb.toString());\r\n    sb.clear();\r\n    sb.appendFixedWidthPadRight(\"foo\", 4, '-');\r\n    assertEquals(\"foo-\", sb.toString());\r\n    sb.clear();\r\n    sb.appendFixedWidthPadRight(\"foo\", 10, '-');\r\n    assertEquals(10, sb.length());\r\n    // 1234567890\r\n    assertEquals(\"foo-------\", sb.toString());\r\n    sb.clear();\r\n    sb.setNullText(\"null\");\r\n    sb.appendFixedWidthPadRight(null, 5, '-');\r\n    assertEquals(\"null-\", sb.toString());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\StrBuilderAppendInsertTest.java",
  "methodName" : "testAppendFixedWidthPadRight_int",
  "sourceCode" : "@Test\r\nvoid testAppendFixedWidthPadRight_int() {\r\n    final StrBuilder sb = new StrBuilder();\r\n    sb.appendFixedWidthPadRight(123, -1, '-');\r\n    assertEquals(\"\", sb.toString());\r\n    sb.clear();\r\n    sb.appendFixedWidthPadRight(123, 0, '-');\r\n    assertEquals(\"\", sb.toString());\r\n    sb.clear();\r\n    sb.appendFixedWidthPadRight(123, 1, '-');\r\n    assertEquals(\"1\", sb.toString());\r\n    sb.clear();\r\n    sb.appendFixedWidthPadRight(123, 2, '-');\r\n    assertEquals(\"12\", sb.toString());\r\n    sb.clear();\r\n    sb.appendFixedWidthPadRight(123, 3, '-');\r\n    assertEquals(\"123\", sb.toString());\r\n    sb.clear();\r\n    sb.appendFixedWidthPadRight(123, 4, '-');\r\n    assertEquals(\"123-\", sb.toString());\r\n    sb.clear();\r\n    sb.appendFixedWidthPadRight(123, 10, '-');\r\n    assertEquals(10, sb.length());\r\n    // 1234567890\r\n    assertEquals(\"123-------\", sb.toString());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\StrBuilderAppendInsertTest.java",
  "methodName" : "testAppendln_Boolean",
  "sourceCode" : "@Test\r\nvoid testAppendln_Boolean() {\r\n    final StrBuilder sb = new StrBuilder();\r\n    sb.appendln(true);\r\n    assertEquals(\"true\" + SEP, sb.toString());\r\n    sb.clear();\r\n    sb.appendln(false);\r\n    assertEquals(\"false\" + SEP, sb.toString());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\StrBuilderAppendInsertTest.java",
  "methodName" : "testAppendln_CharArray",
  "sourceCode" : "@Test\r\nvoid testAppendln_CharArray() {\r\n    final int[] count = new int[2];\r\n    final StrBuilder sb = new StrBuilder() {\r\n\r\n        private static final long serialVersionUID = 1L;\r\n\r\n        @Override\r\n        public StrBuilder append(final char[] str) {\r\n            count[0]++;\r\n            return super.append(str);\r\n        }\r\n\r\n        @Override\r\n        public StrBuilder appendNewLine() {\r\n            count[1]++;\r\n            return super.appendNewLine();\r\n        }\r\n    };\r\n    sb.appendln(\"foo\".toCharArray());\r\n    assertEquals(\"foo\" + SEP, sb.toString());\r\n    assertEquals(1, count[0]);\r\n    assertEquals(1, count[1]);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\StrBuilderAppendInsertTest.java",
  "methodName" : "testAppendln_CharArray_int_int",
  "sourceCode" : "@Test\r\nvoid testAppendln_CharArray_int_int() {\r\n    final int[] count = new int[2];\r\n    final StrBuilder sb = new StrBuilder() {\r\n\r\n        private static final long serialVersionUID = 1L;\r\n\r\n        @Override\r\n        public StrBuilder append(final char[] str, final int startIndex, final int length) {\r\n            count[0]++;\r\n            return super.append(str, startIndex, length);\r\n        }\r\n\r\n        @Override\r\n        public StrBuilder appendNewLine() {\r\n            count[1]++;\r\n            return super.appendNewLine();\r\n        }\r\n    };\r\n    sb.appendln(\"foo\".toCharArray(), 0, 3);\r\n    assertEquals(\"foo\" + SEP, sb.toString());\r\n    assertEquals(1, count[0]);\r\n    assertEquals(1, count[1]);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\StrBuilderAppendInsertTest.java",
  "methodName" : "testAppendln_FormattedString",
  "sourceCode" : "@Test\r\nvoid testAppendln_FormattedString() {\r\n    final int[] count = new int[2];\r\n    final StrBuilder sb = new StrBuilder() {\r\n\r\n        private static final long serialVersionUID = 1L;\r\n\r\n        @Override\r\n        public StrBuilder append(final String str) {\r\n            count[0]++;\r\n            return super.append(str);\r\n        }\r\n\r\n        @Override\r\n        public StrBuilder appendNewLine() {\r\n            count[1]++;\r\n            return super.appendNewLine();\r\n        }\r\n    };\r\n    sb.appendln(\"Hello %s\", \"Alice\");\r\n    assertEquals(\"Hello Alice\" + SEP, sb.toString());\r\n    // appendNewLine() calls append(String)\r\n    assertEquals(2, count[0]);\r\n    assertEquals(1, count[1]);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\StrBuilderAppendInsertTest.java",
  "methodName" : "testAppendln_Object",
  "sourceCode" : "@Test\r\nvoid testAppendln_Object() {\r\n    final StrBuilder sb = new StrBuilder();\r\n    sb.appendln((Object) null);\r\n    assertEquals(\"\" + SEP, sb.toString());\r\n    sb.appendln(FOO);\r\n    assertEquals(SEP + \"foo\" + SEP, sb.toString());\r\n    sb.appendln(Integer.valueOf(6));\r\n    assertEquals(SEP + \"foo\" + SEP + \"6\" + SEP, sb.toString());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\StrBuilderAppendInsertTest.java",
  "methodName" : "testAppendln_PrimitiveNumber",
  "sourceCode" : "@Test\r\nvoid testAppendln_PrimitiveNumber() {\r\n    final StrBuilder sb = new StrBuilder();\r\n    sb.appendln(0);\r\n    assertEquals(\"0\" + SEP, sb.toString());\r\n    sb.clear();\r\n    sb.appendln(1L);\r\n    assertEquals(\"1\" + SEP, sb.toString());\r\n    sb.clear();\r\n    sb.appendln(2.3f);\r\n    assertEquals(\"2.3\" + SEP, sb.toString());\r\n    sb.clear();\r\n    sb.appendln(4.5d);\r\n    assertEquals(\"4.5\" + SEP, sb.toString());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\StrBuilderAppendInsertTest.java",
  "methodName" : "testAppendln_StrBuilder",
  "sourceCode" : "@Test\r\nvoid testAppendln_StrBuilder() {\r\n    final int[] count = new int[2];\r\n    final StrBuilder sb = new StrBuilder() {\r\n\r\n        private static final long serialVersionUID = 1L;\r\n\r\n        @Override\r\n        public StrBuilder append(final StrBuilder str) {\r\n            count[0]++;\r\n            return super.append(str);\r\n        }\r\n\r\n        @Override\r\n        public StrBuilder appendNewLine() {\r\n            count[1]++;\r\n            return super.appendNewLine();\r\n        }\r\n    };\r\n    sb.appendln(new StrBuilder(\"foo\"));\r\n    assertEquals(\"foo\" + SEP, sb.toString());\r\n    assertEquals(1, count[0]);\r\n    assertEquals(1, count[1]);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\StrBuilderAppendInsertTest.java",
  "methodName" : "testAppendln_StrBuilder_int_int",
  "sourceCode" : "@Test\r\nvoid testAppendln_StrBuilder_int_int() {\r\n    final int[] count = new int[2];\r\n    final StrBuilder sb = new StrBuilder() {\r\n\r\n        private static final long serialVersionUID = 1L;\r\n\r\n        @Override\r\n        public StrBuilder append(final StrBuilder str, final int startIndex, final int length) {\r\n            count[0]++;\r\n            return super.append(str, startIndex, length);\r\n        }\r\n\r\n        @Override\r\n        public StrBuilder appendNewLine() {\r\n            count[1]++;\r\n            return super.appendNewLine();\r\n        }\r\n    };\r\n    sb.appendln(new StrBuilder(\"foo\"), 0, 3);\r\n    assertEquals(\"foo\" + SEP, sb.toString());\r\n    assertEquals(1, count[0]);\r\n    assertEquals(1, count[1]);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\StrBuilderAppendInsertTest.java",
  "methodName" : "testAppendln_String",
  "sourceCode" : "@Test\r\nvoid testAppendln_String() {\r\n    final int[] count = new int[2];\r\n    final StrBuilder sb = new StrBuilder() {\r\n\r\n        private static final long serialVersionUID = 1L;\r\n\r\n        @Override\r\n        public StrBuilder append(final String str) {\r\n            count[0]++;\r\n            return super.append(str);\r\n        }\r\n\r\n        @Override\r\n        public StrBuilder appendNewLine() {\r\n            count[1]++;\r\n            return super.appendNewLine();\r\n        }\r\n    };\r\n    sb.appendln(\"foo\");\r\n    assertEquals(\"foo\" + SEP, sb.toString());\r\n    // appendNewLine() calls append(String)\r\n    assertEquals(2, count[0]);\r\n    assertEquals(1, count[1]);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\StrBuilderAppendInsertTest.java",
  "methodName" : "testAppendln_String_int_int",
  "sourceCode" : "@Test\r\nvoid testAppendln_String_int_int() {\r\n    final int[] count = new int[2];\r\n    final StrBuilder sb = new StrBuilder() {\r\n\r\n        private static final long serialVersionUID = 1L;\r\n\r\n        @Override\r\n        public StrBuilder append(final String str, final int startIndex, final int length) {\r\n            count[0]++;\r\n            return super.append(str, startIndex, length);\r\n        }\r\n\r\n        @Override\r\n        public StrBuilder appendNewLine() {\r\n            count[1]++;\r\n            return super.appendNewLine();\r\n        }\r\n    };\r\n    sb.appendln(\"foo\", 0, 3);\r\n    assertEquals(\"foo\" + SEP, sb.toString());\r\n    assertEquals(1, count[0]);\r\n    assertEquals(1, count[1]);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\StrBuilderAppendInsertTest.java",
  "methodName" : "testAppendln_StringBuffer",
  "sourceCode" : "@Test\r\nvoid testAppendln_StringBuffer() {\r\n    final int[] count = new int[2];\r\n    final StrBuilder sb = new StrBuilder() {\r\n\r\n        private static final long serialVersionUID = 1L;\r\n\r\n        @Override\r\n        public StrBuilder append(final StringBuffer str) {\r\n            count[0]++;\r\n            return super.append(str);\r\n        }\r\n\r\n        @Override\r\n        public StrBuilder appendNewLine() {\r\n            count[1]++;\r\n            return super.appendNewLine();\r\n        }\r\n    };\r\n    sb.appendln(new StringBuffer(\"foo\"));\r\n    assertEquals(\"foo\" + SEP, sb.toString());\r\n    assertEquals(1, count[0]);\r\n    assertEquals(1, count[1]);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\StrBuilderAppendInsertTest.java",
  "methodName" : "testAppendln_StringBuffer_int_int",
  "sourceCode" : "@Test\r\nvoid testAppendln_StringBuffer_int_int() {\r\n    final int[] count = new int[2];\r\n    final StrBuilder sb = new StrBuilder() {\r\n\r\n        private static final long serialVersionUID = 1L;\r\n\r\n        @Override\r\n        public StrBuilder append(final StringBuffer str, final int startIndex, final int length) {\r\n            count[0]++;\r\n            return super.append(str, startIndex, length);\r\n        }\r\n\r\n        @Override\r\n        public StrBuilder appendNewLine() {\r\n            count[1]++;\r\n            return super.appendNewLine();\r\n        }\r\n    };\r\n    sb.appendln(new StringBuffer(\"foo\"), 0, 3);\r\n    assertEquals(\"foo\" + SEP, sb.toString());\r\n    assertEquals(1, count[0]);\r\n    assertEquals(1, count[1]);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\StrBuilderAppendInsertTest.java",
  "methodName" : "testAppendln_StringBuilder",
  "sourceCode" : "@Test\r\nvoid testAppendln_StringBuilder() {\r\n    final int[] count = new int[2];\r\n    final StrBuilder sb = new StrBuilder() {\r\n\r\n        private static final long serialVersionUID = 1L;\r\n\r\n        @Override\r\n        public StrBuilder append(final StringBuilder str) {\r\n            count[0]++;\r\n            return super.append(str);\r\n        }\r\n\r\n        @Override\r\n        public StrBuilder appendNewLine() {\r\n            count[1]++;\r\n            return super.appendNewLine();\r\n        }\r\n    };\r\n    sb.appendln(new StringBuilder(\"foo\"));\r\n    assertEquals(\"foo\" + SEP, sb.toString());\r\n    assertEquals(1, count[0]);\r\n    assertEquals(1, count[1]);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\StrBuilderAppendInsertTest.java",
  "methodName" : "testAppendln_StringBuilder_int_int",
  "sourceCode" : "@Test\r\nvoid testAppendln_StringBuilder_int_int() {\r\n    final int[] count = new int[2];\r\n    final StrBuilder sb = new StrBuilder() {\r\n\r\n        private static final long serialVersionUID = 1L;\r\n\r\n        @Override\r\n        public StrBuilder append(final StringBuilder str, final int startIndex, final int length) {\r\n            count[0]++;\r\n            return super.append(str, startIndex, length);\r\n        }\r\n\r\n        @Override\r\n        public StrBuilder appendNewLine() {\r\n            count[1]++;\r\n            return super.appendNewLine();\r\n        }\r\n    };\r\n    sb.appendln(new StringBuilder(\"foo\"), 0, 3);\r\n    assertEquals(\"foo\" + SEP, sb.toString());\r\n    assertEquals(1, count[0]);\r\n    assertEquals(1, count[1]);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\StrBuilderAppendInsertTest.java",
  "methodName" : "testAppendNewLine",
  "sourceCode" : "@Test\r\nvoid testAppendNewLine() {\r\n    StrBuilder sb = new StrBuilder(\"---\");\r\n    sb.appendNewLine().append(\"+++\");\r\n    assertEquals(\"---\" + SEP + \"+++\", sb.toString());\r\n    sb = new StrBuilder(\"---\");\r\n    sb.setNewLineText(\"#\").appendNewLine().setNewLineText(null).appendNewLine();\r\n    assertEquals(\"---#\" + SEP, sb.toString());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\StrBuilderAppendInsertTest.java",
  "methodName" : "testAppendPadding",
  "sourceCode" : "@Test\r\nvoid testAppendPadding() {\r\n    final StrBuilder sb = new StrBuilder();\r\n    sb.append(\"foo\");\r\n    assertEquals(\"foo\", sb.toString());\r\n    sb.appendPadding(-1, '-');\r\n    assertEquals(\"foo\", sb.toString());\r\n    sb.appendPadding(0, '-');\r\n    assertEquals(\"foo\", sb.toString());\r\n    sb.appendPadding(1, '-');\r\n    assertEquals(\"foo-\", sb.toString());\r\n    sb.appendPadding(16, '-');\r\n    assertEquals(20, sb.length());\r\n    // 12345678901234567890\r\n    assertEquals(\"foo-----------------\", sb.toString());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\StrBuilderAppendInsertTest.java",
  "methodName" : "testAppendSeparator_char",
  "sourceCode" : "@Test\r\nvoid testAppendSeparator_char() {\r\n    final StrBuilder sb = new StrBuilder();\r\n    // no effect\r\n    sb.appendSeparator(',');\r\n    assertEquals(\"\", sb.toString());\r\n    sb.append(\"foo\");\r\n    assertEquals(\"foo\", sb.toString());\r\n    sb.appendSeparator(',');\r\n    assertEquals(\"foo,\", sb.toString());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\StrBuilderAppendInsertTest.java",
  "methodName" : "testAppendSeparator_char_char",
  "sourceCode" : "@Test\r\nvoid testAppendSeparator_char_char() {\r\n    final StrBuilder sb = new StrBuilder();\r\n    final char startSeparator = ':';\r\n    final char standardSeparator = ',';\r\n    final String foo = \"foo\";\r\n    // no effect\r\n    sb.appendSeparator(standardSeparator, startSeparator);\r\n    assertEquals(String.valueOf(startSeparator), sb.toString());\r\n    sb.append(foo);\r\n    assertEquals(String.valueOf(startSeparator) + foo, sb.toString());\r\n    sb.appendSeparator(standardSeparator, startSeparator);\r\n    assertEquals(String.valueOf(startSeparator) + foo + standardSeparator, sb.toString());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\StrBuilderAppendInsertTest.java",
  "methodName" : "testAppendSeparator_char_int",
  "sourceCode" : "@Test\r\nvoid testAppendSeparator_char_int() {\r\n    final StrBuilder sb = new StrBuilder();\r\n    // no effect\r\n    sb.appendSeparator(',', 0);\r\n    assertEquals(\"\", sb.toString());\r\n    sb.append(\"foo\");\r\n    assertEquals(\"foo\", sb.toString());\r\n    sb.appendSeparator(',', 1);\r\n    assertEquals(\"foo,\", sb.toString());\r\n    // no effect\r\n    sb.appendSeparator(',', -1);\r\n    assertEquals(\"foo,\", sb.toString());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\StrBuilderAppendInsertTest.java",
  "methodName" : "testAppendSeparator_String",
  "sourceCode" : "@Test\r\nvoid testAppendSeparator_String() {\r\n    final StrBuilder sb = new StrBuilder();\r\n    // no effect\r\n    sb.appendSeparator(\",\");\r\n    assertEquals(\"\", sb.toString());\r\n    sb.append(\"foo\");\r\n    assertEquals(\"foo\", sb.toString());\r\n    sb.appendSeparator(\",\");\r\n    assertEquals(\"foo,\", sb.toString());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\StrBuilderAppendInsertTest.java",
  "methodName" : "testAppendSeparator_String_int",
  "sourceCode" : "@Test\r\nvoid testAppendSeparator_String_int() {\r\n    final StrBuilder sb = new StrBuilder();\r\n    // no effect\r\n    sb.appendSeparator(\",\", 0);\r\n    assertEquals(\"\", sb.toString());\r\n    sb.append(\"foo\");\r\n    assertEquals(\"foo\", sb.toString());\r\n    sb.appendSeparator(\",\", 1);\r\n    assertEquals(\"foo,\", sb.toString());\r\n    // no effect\r\n    sb.appendSeparator(\",\", -1);\r\n    assertEquals(\"foo,\", sb.toString());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\StrBuilderAppendInsertTest.java",
  "methodName" : "testAppendSeparator_String_String",
  "sourceCode" : "@Test\r\nvoid testAppendSeparator_String_String() {\r\n    final StrBuilder sb = new StrBuilder();\r\n    final String startSeparator = \"order by \";\r\n    final String standardSeparator = \",\";\r\n    final String foo = \"foo\";\r\n    sb.appendSeparator(null, null);\r\n    assertEquals(\"\", sb.toString());\r\n    sb.appendSeparator(standardSeparator, null);\r\n    assertEquals(\"\", sb.toString());\r\n    sb.appendSeparator(standardSeparator, startSeparator);\r\n    assertEquals(startSeparator, sb.toString());\r\n    sb.appendSeparator(null, null);\r\n    assertEquals(startSeparator, sb.toString());\r\n    sb.appendSeparator(null, startSeparator);\r\n    assertEquals(startSeparator, sb.toString());\r\n    sb.append(foo);\r\n    assertEquals(startSeparator + foo, sb.toString());\r\n    sb.appendSeparator(standardSeparator, startSeparator);\r\n    assertEquals(startSeparator + foo + standardSeparator, sb.toString());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\StrBuilderAppendInsertTest.java",
  "methodName" : "testAppendWithNullText",
  "sourceCode" : "@Test\r\nvoid testAppendWithNullText() {\r\n    final StrBuilder sb = new StrBuilder();\r\n    sb.setNullText(\"NULL\");\r\n    assertEquals(\"\", sb.toString());\r\n    sb.appendNull();\r\n    assertEquals(\"NULL\", sb.toString());\r\n    sb.append((Object) null);\r\n    assertEquals(\"NULLNULL\", sb.toString());\r\n    sb.append(FOO);\r\n    assertEquals(\"NULLNULLfoo\", sb.toString());\r\n    sb.append((String) null);\r\n    assertEquals(\"NULLNULLfooNULL\", sb.toString());\r\n    sb.append(\"\");\r\n    assertEquals(\"NULLNULLfooNULL\", sb.toString());\r\n    sb.append(\"bar\");\r\n    assertEquals(\"NULLNULLfooNULLbar\", sb.toString());\r\n    sb.append((StringBuffer) null);\r\n    assertEquals(\"NULLNULLfooNULLbarNULL\", sb.toString());\r\n    sb.append(new StringBuffer(\"baz\"));\r\n    assertEquals(\"NULLNULLfooNULLbarNULLbaz\", sb.toString());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\StrBuilderAppendInsertTest.java",
  "methodName" : "testAppendWithSeparators_Array",
  "sourceCode" : "@Test\r\nvoid testAppendWithSeparators_Array() {\r\n    final StrBuilder sb = new StrBuilder();\r\n    sb.appendWithSeparators((Object[]) null, \",\");\r\n    assertEquals(\"\", sb.toString());\r\n    sb.clear();\r\n    sb.appendWithSeparators(ArrayUtils.EMPTY_OBJECT_ARRAY, \",\");\r\n    assertEquals(\"\", sb.toString());\r\n    sb.clear();\r\n    sb.appendWithSeparators(new Object[] { \"foo\", \"bar\", \"baz\" }, \",\");\r\n    assertEquals(\"foo,bar,baz\", sb.toString());\r\n    sb.clear();\r\n    sb.appendWithSeparators(new Object[] { \"foo\", \"bar\", \"baz\" }, null);\r\n    assertEquals(\"foobarbaz\", sb.toString());\r\n    sb.clear();\r\n    sb.appendWithSeparators(new Object[] { \"foo\", null, \"baz\" }, \",\");\r\n    assertEquals(\"foo,,baz\", sb.toString());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\StrBuilderAppendInsertTest.java",
  "methodName" : "testAppendWithSeparators_Collection",
  "sourceCode" : "@Test\r\nvoid testAppendWithSeparators_Collection() {\r\n    final StrBuilder sb = new StrBuilder();\r\n    sb.appendWithSeparators((Collection<?>) null, \",\");\r\n    assertEquals(\"\", sb.toString());\r\n    sb.clear();\r\n    sb.appendWithSeparators(Collections.EMPTY_LIST, \",\");\r\n    assertEquals(\"\", sb.toString());\r\n    sb.clear();\r\n    sb.appendWithSeparators(Arrays.asList(\"foo\", \"bar\", \"baz\"), \",\");\r\n    assertEquals(\"foo,bar,baz\", sb.toString());\r\n    sb.clear();\r\n    sb.appendWithSeparators(Arrays.asList(\"foo\", \"bar\", \"baz\"), null);\r\n    assertEquals(\"foobarbaz\", sb.toString());\r\n    sb.clear();\r\n    sb.appendWithSeparators(Arrays.asList(\"foo\", null, \"baz\"), \",\");\r\n    assertEquals(\"foo,,baz\", sb.toString());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\StrBuilderAppendInsertTest.java",
  "methodName" : "testAppendWithSeparators_Iterator",
  "sourceCode" : "@Test\r\nvoid testAppendWithSeparators_Iterator() {\r\n    final StrBuilder sb = new StrBuilder();\r\n    sb.appendWithSeparators((Iterator<?>) null, \",\");\r\n    assertEquals(\"\", sb.toString());\r\n    sb.clear();\r\n    sb.appendWithSeparators(Collections.EMPTY_LIST.iterator(), \",\");\r\n    assertEquals(\"\", sb.toString());\r\n    sb.clear();\r\n    sb.appendWithSeparators(Arrays.asList(\"foo\", \"bar\", \"baz\").iterator(), \",\");\r\n    assertEquals(\"foo,bar,baz\", sb.toString());\r\n    sb.clear();\r\n    sb.appendWithSeparators(Arrays.asList(\"foo\", \"bar\", \"baz\").iterator(), null);\r\n    assertEquals(\"foobarbaz\", sb.toString());\r\n    sb.clear();\r\n    sb.appendWithSeparators(Arrays.asList(\"foo\", null, \"baz\").iterator(), \",\");\r\n    assertEquals(\"foo,,baz\", sb.toString());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\StrBuilderAppendInsertTest.java",
  "methodName" : "testAppendWithSeparatorsWithNullText",
  "sourceCode" : "@Test\r\nvoid testAppendWithSeparatorsWithNullText() {\r\n    final StrBuilder sb = new StrBuilder();\r\n    sb.setNullText(\"null\");\r\n    sb.appendWithSeparators(new Object[] { \"foo\", null, \"baz\" }, \",\");\r\n    assertEquals(\"foo,null,baz\", sb.toString());\r\n    sb.clear();\r\n    sb.appendWithSeparators(Arrays.asList(\"foo\", null, \"baz\"), \",\");\r\n    assertEquals(\"foo,null,baz\", sb.toString());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\StrBuilderAppendInsertTest.java",
  "methodName" : "testInsert",
  "sourceCode" : "@Test\r\nvoid testInsert() {\r\n    final StrBuilder sb = new StrBuilder();\r\n    sb.append(\"barbaz\");\r\n    assertEquals(\"barbaz\", sb.toString());\r\n    assertThrows(IndexOutOfBoundsException.class, () -> sb.insert(-1, FOO));\r\n    assertThrows(IndexOutOfBoundsException.class, () -> sb.insert(7, FOO));\r\n    sb.insert(0, (Object) null);\r\n    assertEquals(\"barbaz\", sb.toString());\r\n    sb.insert(0, FOO);\r\n    assertEquals(\"foobarbaz\", sb.toString());\r\n    sb.clear();\r\n    sb.append(\"barbaz\");\r\n    assertEquals(\"barbaz\", sb.toString());\r\n    assertThrows(IndexOutOfBoundsException.class, () -> sb.insert(-1, \"foo\"));\r\n    assertThrows(IndexOutOfBoundsException.class, () -> sb.insert(7, \"foo\"));\r\n    sb.insert(0, (String) null);\r\n    assertEquals(\"barbaz\", sb.toString());\r\n    sb.insert(0, \"foo\");\r\n    assertEquals(\"foobarbaz\", sb.toString());\r\n    sb.clear();\r\n    sb.append(\"barbaz\");\r\n    assertEquals(\"barbaz\", sb.toString());\r\n    assertThrows(IndexOutOfBoundsException.class, () -> sb.insert(-1, new char[] { 'f', 'o', 'o' }));\r\n    assertThrows(IndexOutOfBoundsException.class, () -> sb.insert(7, new char[] { 'f', 'o', 'o' }));\r\n    sb.insert(0, (char[]) null);\r\n    assertEquals(\"barbaz\", sb.toString());\r\n    sb.insert(0, ArrayUtils.EMPTY_CHAR_ARRAY);\r\n    assertEquals(\"barbaz\", sb.toString());\r\n    sb.insert(0, new char[] { 'f', 'o', 'o' });\r\n    assertEquals(\"foobarbaz\", sb.toString());\r\n    sb.clear();\r\n    sb.append(\"barbaz\");\r\n    assertEquals(\"barbaz\", sb.toString());\r\n    assertThrows(IndexOutOfBoundsException.class, () -> sb.insert(-1, new char[] { 'a', 'b', 'c', 'f', 'o', 'o', 'd', 'e', 'f' }, 3, 3));\r\n    assertThrows(IndexOutOfBoundsException.class, () -> sb.insert(7, new char[] { 'a', 'b', 'c', 'f', 'o', 'o', 'd', 'e', 'f' }, 3, 3));\r\n    sb.insert(0, (char[]) null, 0, 0);\r\n    assertEquals(\"barbaz\", sb.toString());\r\n    sb.insert(0, ArrayUtils.EMPTY_CHAR_ARRAY, 0, 0);\r\n    assertEquals(\"barbaz\", sb.toString());\r\n    assertThrows(IndexOutOfBoundsException.class, () -> sb.insert(0, new char[] { 'a', 'b', 'c', 'f', 'o', 'o', 'd', 'e', 'f' }, -1, 3));\r\n    assertThrows(IndexOutOfBoundsException.class, () -> sb.insert(0, new char[] { 'a', 'b', 'c', 'f', 'o', 'o', 'd', 'e', 'f' }, 10, 3));\r\n    assertThrows(IndexOutOfBoundsException.class, () -> sb.insert(0, new char[] { 'a', 'b', 'c', 'f', 'o', 'o', 'd', 'e', 'f' }, 0, -1));\r\n    assertThrows(IndexOutOfBoundsException.class, () -> sb.insert(0, new char[] { 'a', 'b', 'c', 'f', 'o', 'o', 'd', 'e', 'f' }, 0, 10));\r\n    sb.insert(0, new char[] { 'a', 'b', 'c', 'f', 'o', 'o', 'd', 'e', 'f' }, 0, 0);\r\n    assertEquals(\"barbaz\", sb.toString());\r\n    sb.insert(0, new char[] { 'a', 'b', 'c', 'f', 'o', 'o', 'd', 'e', 'f' }, 3, 3);\r\n    assertEquals(\"foobarbaz\", sb.toString());\r\n    sb.clear();\r\n    sb.append(\"barbaz\");\r\n    assertEquals(\"barbaz\", sb.toString());\r\n    assertThrows(IndexOutOfBoundsException.class, () -> sb.insert(-1, true));\r\n    assertThrows(IndexOutOfBoundsException.class, () -> sb.insert(7, true));\r\n    sb.insert(0, true);\r\n    assertEquals(\"truebarbaz\", sb.toString());\r\n    sb.insert(0, false);\r\n    assertEquals(\"falsetruebarbaz\", sb.toString());\r\n    sb.clear();\r\n    sb.append(\"barbaz\");\r\n    assertEquals(\"barbaz\", sb.toString());\r\n    assertThrows(IndexOutOfBoundsException.class, () -> sb.insert(-1, '!'));\r\n    assertThrows(IndexOutOfBoundsException.class, () -> sb.insert(7, '!'));\r\n    sb.insert(0, '!');\r\n    assertEquals(\"!barbaz\", sb.toString());\r\n    sb.clear();\r\n    sb.append(\"barbaz\");\r\n    assertEquals(\"barbaz\", sb.toString());\r\n    assertThrows(IndexOutOfBoundsException.class, () -> sb.insert(-1, 0));\r\n    assertThrows(IndexOutOfBoundsException.class, () -> sb.insert(7, 0));\r\n    sb.insert(0, '0');\r\n    assertEquals(\"0barbaz\", sb.toString());\r\n    sb.clear();\r\n    sb.append(\"barbaz\");\r\n    assertEquals(\"barbaz\", sb.toString());\r\n    assertThrows(IndexOutOfBoundsException.class, () -> sb.insert(-1, 1L));\r\n    assertThrows(IndexOutOfBoundsException.class, () -> sb.insert(7, 1L));\r\n    sb.insert(0, 1L);\r\n    assertEquals(\"1barbaz\", sb.toString());\r\n    sb.clear();\r\n    sb.append(\"barbaz\");\r\n    assertEquals(\"barbaz\", sb.toString());\r\n    assertThrows(IndexOutOfBoundsException.class, () -> sb.insert(-1, 2.3F));\r\n    assertThrows(IndexOutOfBoundsException.class, () -> sb.insert(7, 2.3F));\r\n    sb.insert(0, 2.3F);\r\n    assertEquals(\"2.3barbaz\", sb.toString());\r\n    sb.clear();\r\n    sb.append(\"barbaz\");\r\n    assertEquals(\"barbaz\", sb.toString());\r\n    assertThrows(IndexOutOfBoundsException.class, () -> sb.insert(-1, 4.5D));\r\n    assertThrows(IndexOutOfBoundsException.class, () -> sb.insert(7, 4.5D));\r\n    sb.insert(0, 4.5D);\r\n    assertEquals(\"4.5barbaz\", sb.toString());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\StrBuilderAppendInsertTest.java",
  "methodName" : "testInsertWithNullText",
  "sourceCode" : "@Test\r\nvoid testInsertWithNullText() {\r\n    final StrBuilder sb = new StrBuilder();\r\n    sb.setNullText(\"null\");\r\n    sb.append(\"barbaz\");\r\n    assertEquals(\"barbaz\", sb.toString());\r\n    assertThrows(IndexOutOfBoundsException.class, () -> sb.insert(-1, FOO));\r\n    assertThrows(IndexOutOfBoundsException.class, () -> sb.insert(7, FOO));\r\n    sb.insert(0, (Object) null);\r\n    assertEquals(\"nullbarbaz\", sb.toString());\r\n    sb.insert(0, FOO);\r\n    assertEquals(\"foonullbarbaz\", sb.toString());\r\n    sb.clear();\r\n    sb.append(\"barbaz\");\r\n    assertEquals(\"barbaz\", sb.toString());\r\n    assertThrows(IndexOutOfBoundsException.class, () -> sb.insert(-1, \"foo\"));\r\n    assertThrows(IndexOutOfBoundsException.class, () -> sb.insert(7, \"foo\"));\r\n    sb.insert(0, (String) null);\r\n    assertEquals(\"nullbarbaz\", sb.toString());\r\n    sb.insert(0, \"foo\");\r\n    assertEquals(\"foonullbarbaz\", sb.toString());\r\n    sb.insert(0, (char[]) null);\r\n    assertEquals(\"nullfoonullbarbaz\", sb.toString());\r\n    sb.insert(0, (char[]) null, 0, 0);\r\n    assertEquals(\"nullnullfoonullbarbaz\", sb.toString());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\StrBuilderAppendInsertTest.java",
  "methodName" : "testLang299",
  "sourceCode" : "/**\r\n * See: https://issues.apache.org/jira/browse/LANG-299\r\n */\r\n@Test\r\nvoid testLang299() {\r\n    final StrBuilder sb = new StrBuilder(1);\r\n    sb.appendFixedWidthPadRight(\"foo\", 1, '-');\r\n    assertEquals(\"f\", sb.toString());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\StrBuilderTest.java",
  "methodName" : "test_LANG_1131_EqualsWithNullStrBuilder",
  "sourceCode" : "@Test\r\nvoid test_LANG_1131_EqualsWithNullStrBuilder() throws Exception {\r\n    final StrBuilder sb = new StrBuilder();\r\n    final StrBuilder other = null;\r\n    assertFalse(sb.equals(other));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\StrBuilderTest.java",
  "methodName" : "testAppendCharBuffer",
  "sourceCode" : "@Test\r\nvoid testAppendCharBuffer() {\r\n    final StrBuilder sb1 = new StrBuilder();\r\n    final CharBuffer buf = CharBuffer.allocate(10);\r\n    buf.append(\"0123456789\");\r\n    buf.flip();\r\n    sb1.append(buf);\r\n    assertEquals(\"0123456789\", sb1.toString());\r\n    final StrBuilder sb2 = new StrBuilder();\r\n    sb2.append(buf, 1, 8);\r\n    assertEquals(\"12345678\", sb2.toString());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\StrBuilderTest.java",
  "methodName" : "testAppendCharBufferException",
  "sourceCode" : "@Test\r\nvoid testAppendCharBufferException() throws Exception {\r\n    final StrBuilder sb = new StrBuilder(\"1234567890\");\r\n    final String text = \"Test\";\r\n    final CharBuffer buffer = CharBuffer.allocate(sb.size() + text.length());\r\n    buffer.put(text);\r\n    buffer.flip();\r\n    try {\r\n        sb.append(buffer, -1, 12);\r\n    } catch (final StringIndexOutOfBoundsException e) {\r\n        assertEquals(\"startIndex must be valid\", e.getMessage());\r\n    }\r\n    try {\r\n        sb.append(buffer, 0, -1);\r\n    } catch (final StringIndexOutOfBoundsException e) {\r\n        assertEquals(\"length must be valid\", e.getMessage());\r\n    }\r\n    sb.append(buffer);\r\n    assertEquals(\"1234567890Test\", sb.toString());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\StrBuilderTest.java",
  "methodName" : "testAppendCharBufferNull",
  "sourceCode" : "@Test\r\nvoid testAppendCharBufferNull() throws Exception {\r\n    final StrBuilder sb = new StrBuilder(\"1234567890\");\r\n    final CharBuffer buffer = null;\r\n    sb.append(buffer);\r\n    assertEquals(\"1234567890\", sb.toString());\r\n    final StrBuilder sb1 = new StrBuilder(\"1234567890\");\r\n    final CharBuffer buffer1 = null;\r\n    sb.append(buffer1, 0, 0);\r\n    assertEquals(\"1234567890\", sb1.toString());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\StrBuilderTest.java",
  "methodName" : "testAppendCharSequence",
  "sourceCode" : "@Test\r\nvoid testAppendCharSequence() {\r\n    final CharSequence obj0 = null;\r\n    final CharSequence obj1 = new StrBuilder(\"test1\");\r\n    final CharSequence obj2 = new StringBuilder(\"test2\");\r\n    final CharSequence obj3 = new StringBuffer(\"test3\");\r\n    final CharBuffer obj4 = CharBuffer.wrap(\"test4\".toCharArray());\r\n    final StrBuilder sb0 = new StrBuilder();\r\n    assertEquals(\"\", sb0.append(obj0).toString());\r\n    final StrBuilder sb1 = new StrBuilder();\r\n    assertEquals(\"test1\", sb1.append(obj1).toString());\r\n    final StrBuilder sb2 = new StrBuilder();\r\n    assertEquals(\"test2\", sb2.append(obj2).toString());\r\n    final StrBuilder sb3 = new StrBuilder();\r\n    assertEquals(\"test3\", sb3.append(obj3).toString());\r\n    final StrBuilder sb4 = new StrBuilder();\r\n    assertEquals(\"test4\", sb4.append(obj4).toString());\r\n    final StrBuilder sb5 = new StrBuilder();\r\n    assertEquals(\"\", sb5.append(obj0, 0, 0).toString());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\StrBuilderTest.java",
  "methodName" : "testAppendln",
  "sourceCode" : "@Test\r\nvoid testAppendln() {\r\n    final StrBuilder sb1 = new StrBuilder();\r\n    final char ch = 'c';\r\n    assertEquals(\"c\" + System.lineSeparator(), sb1.appendln(ch).toString());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\StrBuilderTest.java",
  "methodName" : "testAppendStringBuilderNull",
  "sourceCode" : "@Test\r\nvoid testAppendStringBuilderNull() {\r\n    final StrBuilder sb1 = new StrBuilder();\r\n    final StringBuilder b = null;\r\n    assertEquals(\"\", sb1.append(b).toString());\r\n    final StrBuilder sb2 = new StrBuilder();\r\n    assertEquals(\"\", sb2.append(b, 0, 0).toString());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\StrBuilderTest.java",
  "methodName" : "testAppendTakingTwoIntsWithIndexOutOfBoundsThrowsStringIndexOutOfBoundsExceptionTwo",
  "sourceCode" : "@Test\r\nvoid testAppendTakingTwoIntsWithIndexOutOfBoundsThrowsStringIndexOutOfBoundsExceptionTwo() {\r\n    assertThrows(StringIndexOutOfBoundsException.class, () -> {\r\n        final Charset charset = Charset.defaultCharset();\r\n        final ByteBuffer byteBuffer = charset.encode(\"asdf\");\r\n        final CharBuffer charBuffer = charset.decode(byteBuffer);\r\n        new StrBuilder().append(charBuffer, 933, 654);\r\n    });\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\StrBuilderTest.java",
  "methodName" : "testAppendTakingTwoIntsWithZeroThrowsStringIndexOutOfBoundsException",
  "sourceCode" : "@Test\r\nvoid testAppendTakingTwoIntsWithZeroThrowsStringIndexOutOfBoundsException() {\r\n    assertThrows(StringIndexOutOfBoundsException.class, () -> {\r\n        final Charset charset = Charset.defaultCharset();\r\n        final ByteBuffer byteBuffer = charset.encode(\"end < start\");\r\n        final CharBuffer charBuffer = charset.decode(byteBuffer);\r\n        new StrBuilder(630).append(charBuffer, 0, 630);\r\n    });\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\StrBuilderTest.java",
  "methodName" : "testAppendToCharBuffer",
  "sourceCode" : "@Test\r\nvoid testAppendToCharBuffer() throws Exception {\r\n    final StrBuilder sb = new StrBuilder(\"1234567890\");\r\n    final String text = \"Test \";\r\n    final CharBuffer buffer = CharBuffer.allocate(sb.size() + text.length());\r\n    buffer.put(text);\r\n    sb.appendTo(buffer);\r\n    buffer.flip();\r\n    assertEquals(\"Test 1234567890\", buffer.toString());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\StrBuilderTest.java",
  "methodName" : "testAppendToStringBuffer",
  "sourceCode" : "@Test\r\nvoid testAppendToStringBuffer() throws Exception {\r\n    final StrBuilder sb = new StrBuilder(\"1234567890\");\r\n    final StringBuilder buffer = new StringBuilder(\"Test \");\r\n    sb.appendTo(buffer);\r\n    assertEquals(\"Test 1234567890\", buffer.toString());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\StrBuilderTest.java",
  "methodName" : "testAppendToStringBuilder",
  "sourceCode" : "@Test\r\nvoid testAppendToStringBuilder() throws Exception {\r\n    final StrBuilder sb = new StrBuilder(\"1234567890\");\r\n    final StringBuilder builder = new StringBuilder(\"Test \");\r\n    sb.appendTo(builder);\r\n    assertEquals(\"Test 1234567890\", builder.toString());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\StrBuilderTest.java",
  "methodName" : "testAppendToWriter",
  "sourceCode" : "@Test\r\nvoid testAppendToWriter() throws Exception {\r\n    final StrBuilder sb = new StrBuilder(\"1234567890\");\r\n    final StringWriter writer = new StringWriter();\r\n    writer.append(\"Test \");\r\n    sb.appendTo(writer);\r\n    assertEquals(\"Test 1234567890\", writer.toString());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\StrBuilderTest.java",
  "methodName" : "testAsBuilder",
  "sourceCode" : "@Test\r\nvoid testAsBuilder() {\r\n    final StrBuilder sb = new StrBuilder().appendAll(\"Lorem\", \" \", \"ipsum\", \" \", \"dolor\");\r\n    assertEquals(sb.toString(), sb.build());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\StrBuilderTest.java",
  "methodName" : "testAsReader",
  "sourceCode" : "@Test\r\nvoid testAsReader() throws Exception {\r\n    final StrBuilder sb = new StrBuilder(\"some text\");\r\n    try (Reader reader = sb.asReader()) {\r\n        assertTrue(reader.ready());\r\n        final char[] buf = new char[40];\r\n        assertEquals(9, reader.read(buf));\r\n        assertEquals(\"some text\", new String(buf, 0, 9));\r\n        assertEquals(-1, reader.read());\r\n        assertFalse(reader.ready());\r\n        assertEquals(0, reader.skip(2));\r\n        assertEquals(0, reader.skip(-1));\r\n        assertTrue(reader.markSupported());\r\n    }\r\n    try (Reader reader = sb.asReader()) {\r\n        assertEquals('s', reader.read());\r\n        reader.mark(-1);\r\n        final char[] array = new char[3];\r\n        assertEquals(3, reader.read(array, 0, 3));\r\n        assertEquals('o', array[0]);\r\n        assertEquals('m', array[1]);\r\n        assertEquals('e', array[2]);\r\n        reader.reset();\r\n        assertEquals(1, reader.read(array, 1, 1));\r\n        assertEquals('o', array[0]);\r\n        assertEquals('o', array[1]);\r\n        assertEquals('e', array[2]);\r\n        assertEquals(2, reader.skip(2));\r\n        assertEquals(' ', reader.read());\r\n        assertTrue(reader.ready());\r\n        reader.close();\r\n        assertTrue(reader.ready());\r\n    }\r\n    try (Reader reader = sb.asReader()) {\r\n        char[] array = new char[3];\r\n        try {\r\n            reader.read(array, -1, 0);\r\n            fail(\"Exception expected!\");\r\n        } catch (final IndexOutOfBoundsException ex) {\r\n            // expected\r\n        }\r\n        try {\r\n            reader.read(array, 0, -1);\r\n            fail(\"Exception expected!\");\r\n        } catch (final IndexOutOfBoundsException ex) {\r\n            // expected\r\n        }\r\n        try {\r\n            reader.read(array, 100, 1);\r\n            fail(\"Exception expected!\");\r\n        } catch (final IndexOutOfBoundsException ex) {\r\n            // expected\r\n        }\r\n        try {\r\n            reader.read(array, 0, 100);\r\n            fail(\"Exception expected!\");\r\n        } catch (final IndexOutOfBoundsException ex) {\r\n            // expected\r\n        }\r\n        try {\r\n            reader.read(array, Integer.MAX_VALUE, Integer.MAX_VALUE);\r\n            fail(\"Exception expected!\");\r\n        } catch (final IndexOutOfBoundsException ex) {\r\n            // expected\r\n        }\r\n        assertEquals(0, reader.read(array, 0, 0));\r\n        assertEquals(0, array[0]);\r\n        assertEquals(0, array[1]);\r\n        assertEquals(0, array[2]);\r\n        reader.skip(9);\r\n        assertEquals(-1, reader.read(array, 0, 1));\r\n        reader.reset();\r\n        array = new char[30];\r\n        assertEquals(9, reader.read(array, 0, 30));\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\StrBuilderTest.java",
  "methodName" : "testAsTokenizer",
  "sourceCode" : "@Test\r\nvoid testAsTokenizer() throws Exception {\r\n    // from Javadoc\r\n    final StrBuilder b = new StrBuilder();\r\n    b.append(\"a b \");\r\n    final StrTokenizer t = b.asTokenizer();\r\n    final String[] tokens1 = t.getTokenArray();\r\n    assertEquals(2, tokens1.length);\r\n    assertEquals(\"a\", tokens1[0]);\r\n    assertEquals(\"b\", tokens1[1]);\r\n    assertEquals(2, t.size());\r\n    b.append(\"c d \");\r\n    final String[] tokens2 = t.getTokenArray();\r\n    assertEquals(2, tokens2.length);\r\n    assertEquals(\"a\", tokens2[0]);\r\n    assertEquals(\"b\", tokens2[1]);\r\n    assertEquals(2, t.size());\r\n    assertEquals(\"a\", t.next());\r\n    assertEquals(\"b\", t.next());\r\n    t.reset();\r\n    final String[] tokens3 = t.getTokenArray();\r\n    assertEquals(4, tokens3.length);\r\n    assertEquals(\"a\", tokens3[0]);\r\n    assertEquals(\"b\", tokens3[1]);\r\n    assertEquals(\"c\", tokens3[2]);\r\n    assertEquals(\"d\", tokens3[3]);\r\n    assertEquals(4, t.size());\r\n    assertEquals(\"a\", t.next());\r\n    assertEquals(\"b\", t.next());\r\n    assertEquals(\"c\", t.next());\r\n    assertEquals(\"d\", t.next());\r\n    assertEquals(\"a b c d \", t.getContent());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\StrBuilderTest.java",
  "methodName" : "testAsWriter",
  "sourceCode" : "@Test\r\nvoid testAsWriter() throws Exception {\r\n    final StrBuilder sb = new StrBuilder(\"base\");\r\n    try (Writer writer = sb.asWriter()) {\r\n        writer.write('l');\r\n        assertEquals(\"basel\", sb.toString());\r\n        writer.write(new char[] { 'i', 'n' });\r\n        assertEquals(\"baselin\", sb.toString());\r\n        writer.write(new char[] { 'n', 'e', 'r' }, 1, 2);\r\n        assertEquals(\"baseliner\", sb.toString());\r\n        writer.write(\" rout\");\r\n        assertEquals(\"baseliner rout\", sb.toString());\r\n        writer.write(\"ping that server\", 1, 3);\r\n        assertEquals(\"baseliner routing\", sb.toString());\r\n        // no effect\r\n        writer.flush();\r\n        assertEquals(\"baseliner routing\", sb.toString());\r\n        // no effect\r\n        writer.close();\r\n        assertEquals(\"baseliner routing\", sb.toString());\r\n        // works after close\r\n        writer.write(\" hi\");\r\n        assertEquals(\"baseliner routing hi\", sb.toString());\r\n        // mix and match\r\n        sb.setLength(4);\r\n        writer.write('d');\r\n        assertEquals(\"based\", sb.toString());\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\StrBuilderTest.java",
  "methodName" : "testCapacity",
  "sourceCode" : "@Test\r\nvoid testCapacity() {\r\n    final StrBuilder sb = new StrBuilder();\r\n    assertEquals(sb.buffer.length, sb.capacity());\r\n    sb.append(\"HelloWorldHelloWorldHelloWorldHelloWorld\");\r\n    assertEquals(sb.buffer.length, sb.capacity());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\StrBuilderTest.java",
  "methodName" : "testCapacityAndLength",
  "sourceCode" : "@Test\r\nvoid testCapacityAndLength() {\r\n    final StrBuilder sb = new StrBuilder();\r\n    assertEquals(32, sb.capacity());\r\n    assertEquals(0, sb.length());\r\n    assertEquals(0, sb.size());\r\n    assertTrue(sb.isEmpty());\r\n    sb.minimizeCapacity();\r\n    assertEquals(0, sb.capacity());\r\n    assertEquals(0, sb.length());\r\n    assertEquals(0, sb.size());\r\n    assertTrue(sb.isEmpty());\r\n    sb.ensureCapacity(32);\r\n    assertTrue(sb.capacity() >= 32);\r\n    assertEquals(0, sb.length());\r\n    assertEquals(0, sb.size());\r\n    assertTrue(sb.isEmpty());\r\n    sb.append(\"foo\");\r\n    assertTrue(sb.capacity() >= 32);\r\n    assertEquals(3, sb.length());\r\n    assertEquals(3, sb.size());\r\n    assertFalse(sb.isEmpty());\r\n    sb.clear();\r\n    assertTrue(sb.capacity() >= 32);\r\n    assertEquals(0, sb.length());\r\n    assertEquals(0, sb.size());\r\n    assertTrue(sb.isEmpty());\r\n    sb.append(\"123456789012345678901234567890123\");\r\n    assertTrue(sb.capacity() > 32);\r\n    assertEquals(33, sb.length());\r\n    assertEquals(33, sb.size());\r\n    assertFalse(sb.isEmpty());\r\n    sb.ensureCapacity(16);\r\n    assertTrue(sb.capacity() > 16);\r\n    assertEquals(33, sb.length());\r\n    assertEquals(33, sb.size());\r\n    assertFalse(sb.isEmpty());\r\n    sb.minimizeCapacity();\r\n    assertEquals(33, sb.capacity());\r\n    assertEquals(33, sb.length());\r\n    assertEquals(33, sb.size());\r\n    assertFalse(sb.isEmpty());\r\n    assertThrows(IndexOutOfBoundsException.class, () -> sb.setLength(-1));\r\n    sb.setLength(33);\r\n    assertEquals(33, sb.capacity());\r\n    assertEquals(33, sb.length());\r\n    assertEquals(33, sb.size());\r\n    assertFalse(sb.isEmpty());\r\n    sb.setLength(16);\r\n    assertTrue(sb.capacity() >= 16);\r\n    assertEquals(16, sb.length());\r\n    assertEquals(16, sb.size());\r\n    assertEquals(\"1234567890123456\", sb.toString());\r\n    assertFalse(sb.isEmpty());\r\n    sb.setLength(32);\r\n    assertTrue(sb.capacity() >= 32);\r\n    assertEquals(32, sb.length());\r\n    assertEquals(32, sb.size());\r\n    assertEquals(\"1234567890123456\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\", sb.toString());\r\n    assertFalse(sb.isEmpty());\r\n    sb.setLength(0);\r\n    assertTrue(sb.capacity() >= 32);\r\n    assertEquals(0, sb.length());\r\n    assertEquals(0, sb.size());\r\n    assertTrue(sb.isEmpty());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\StrBuilderTest.java",
  "methodName" : "testChaining",
  "sourceCode" : "@Test\r\nvoid testChaining() {\r\n    final StrBuilder sb = new StrBuilder();\r\n    assertSame(sb, sb.setNewLineText(null));\r\n    assertSame(sb, sb.setNullText(null));\r\n    assertSame(sb, sb.setLength(1));\r\n    assertSame(sb, sb.setCharAt(0, 'a'));\r\n    assertSame(sb, sb.ensureCapacity(0));\r\n    assertSame(sb, sb.minimizeCapacity());\r\n    assertSame(sb, sb.clear());\r\n    assertSame(sb, sb.reverse());\r\n    assertSame(sb, sb.trim());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\StrBuilderTest.java",
  "methodName" : "testCharAt",
  "sourceCode" : "@Test\r\nvoid testCharAt() {\r\n    final StrBuilder sb = new StrBuilder();\r\n    assertThrows(IndexOutOfBoundsException.class, () -> sb.charAt(0));\r\n    assertThrows(IndexOutOfBoundsException.class, () -> sb.charAt(-1));\r\n    sb.append(\"foo\");\r\n    assertEquals('f', sb.charAt(0));\r\n    assertEquals('o', sb.charAt(1));\r\n    assertEquals('o', sb.charAt(2));\r\n    assertThrows(IndexOutOfBoundsException.class, () -> sb.charAt(-1));\r\n    assertThrows(IndexOutOfBoundsException.class, () -> sb.charAt(3));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\StrBuilderTest.java",
  "methodName" : "testClear",
  "sourceCode" : "@Test\r\nvoid testClear() {\r\n    final StrBuilder sb = new StrBuilder();\r\n    sb.append(\"Hello\");\r\n    sb.clear();\r\n    assertEquals(0, sb.length());\r\n    assertTrue(sb.buffer.length >= 5);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\StrBuilderTest.java",
  "methodName" : "testConstructors",
  "sourceCode" : "@Test\r\nvoid testConstructors() {\r\n    final StrBuilder sb0 = new StrBuilder();\r\n    assertEquals(32, sb0.capacity());\r\n    assertEquals(0, sb0.length());\r\n    assertEquals(0, sb0.size());\r\n    final StrBuilder sb1 = new StrBuilder(32);\r\n    assertEquals(32, sb1.capacity());\r\n    assertEquals(0, sb1.length());\r\n    assertEquals(0, sb1.size());\r\n    final StrBuilder sb2 = new StrBuilder(0);\r\n    assertEquals(32, sb2.capacity());\r\n    assertEquals(0, sb2.length());\r\n    assertEquals(0, sb2.size());\r\n    final StrBuilder sb3 = new StrBuilder(-1);\r\n    assertEquals(32, sb3.capacity());\r\n    assertEquals(0, sb3.length());\r\n    assertEquals(0, sb3.size());\r\n    final StrBuilder sb4 = new StrBuilder(1);\r\n    assertEquals(1, sb4.capacity());\r\n    assertEquals(0, sb4.length());\r\n    assertEquals(0, sb4.size());\r\n    final StrBuilder sb5 = new StrBuilder((String) null);\r\n    assertEquals(32, sb5.capacity());\r\n    assertEquals(0, sb5.length());\r\n    assertEquals(0, sb5.size());\r\n    final StrBuilder sb6 = new StrBuilder(\"\");\r\n    assertEquals(32, sb6.capacity());\r\n    assertEquals(0, sb6.length());\r\n    assertEquals(0, sb6.size());\r\n    final StrBuilder sb7 = new StrBuilder(\"foo\");\r\n    assertEquals(35, sb7.capacity());\r\n    assertEquals(3, sb7.length());\r\n    assertEquals(3, sb7.size());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\StrBuilderTest.java",
  "methodName" : "testContains_char",
  "sourceCode" : "@Test\r\nvoid testContains_char() {\r\n    final StrBuilder sb = new StrBuilder(\"abcdefghijklmnopqrstuvwxyz\");\r\n    assertTrue(sb.contains('a'));\r\n    assertTrue(sb.contains('o'));\r\n    assertTrue(sb.contains('z'));\r\n    assertFalse(sb.contains('1'));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\StrBuilderTest.java",
  "methodName" : "testContains_String",
  "sourceCode" : "@Test\r\nvoid testContains_String() {\r\n    final StrBuilder sb = new StrBuilder(\"abcdefghijklmnopqrstuvwxyz\");\r\n    assertTrue(sb.contains(\"a\"));\r\n    assertTrue(sb.contains(\"pq\"));\r\n    assertTrue(sb.contains(\"z\"));\r\n    assertFalse(sb.contains(\"zyx\"));\r\n    assertFalse(sb.contains((String) null));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\StrBuilderTest.java",
  "methodName" : "testContains_StrMatcher",
  "sourceCode" : "@Test\r\nvoid testContains_StrMatcher() {\r\n    StrBuilder sb = new StrBuilder(\"abcdefghijklmnopqrstuvwxyz\");\r\n    assertTrue(sb.contains(StrMatcher.charMatcher('a')));\r\n    assertTrue(sb.contains(StrMatcher.stringMatcher(\"pq\")));\r\n    assertTrue(sb.contains(StrMatcher.charMatcher('z')));\r\n    assertFalse(sb.contains(StrMatcher.stringMatcher(\"zy\")));\r\n    assertFalse(sb.contains((StrMatcher) null));\r\n    sb = new StrBuilder();\r\n    assertFalse(sb.contains(A_NUMBER_MATCHER));\r\n    sb.append(\"B A1 C\");\r\n    assertTrue(sb.contains(A_NUMBER_MATCHER));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\StrBuilderTest.java",
  "methodName" : "testDeleteAll_char",
  "sourceCode" : "@Test\r\nvoid testDeleteAll_char() {\r\n    StrBuilder sb = new StrBuilder(\"abcbccba\");\r\n    sb.deleteAll('X');\r\n    assertEquals(\"abcbccba\", sb.toString());\r\n    sb.deleteAll('a');\r\n    assertEquals(\"bcbccb\", sb.toString());\r\n    sb.deleteAll('c');\r\n    assertEquals(\"bbb\", sb.toString());\r\n    sb.deleteAll('b');\r\n    assertEquals(\"\", sb.toString());\r\n    sb = new StrBuilder(\"\");\r\n    sb.deleteAll('b');\r\n    assertEquals(\"\", sb.toString());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\StrBuilderTest.java",
  "methodName" : "testDeleteAll_String",
  "sourceCode" : "@Test\r\nvoid testDeleteAll_String() {\r\n    StrBuilder sb = new StrBuilder(\"abcbccba\");\r\n    sb.deleteAll((String) null);\r\n    assertEquals(\"abcbccba\", sb.toString());\r\n    sb.deleteAll(\"\");\r\n    assertEquals(\"abcbccba\", sb.toString());\r\n    sb.deleteAll(\"X\");\r\n    assertEquals(\"abcbccba\", sb.toString());\r\n    sb.deleteAll(\"a\");\r\n    assertEquals(\"bcbccb\", sb.toString());\r\n    sb.deleteAll(\"c\");\r\n    assertEquals(\"bbb\", sb.toString());\r\n    sb.deleteAll(\"b\");\r\n    assertEquals(\"\", sb.toString());\r\n    sb = new StrBuilder(\"abcbccba\");\r\n    sb.deleteAll(\"bc\");\r\n    assertEquals(\"acba\", sb.toString());\r\n    sb = new StrBuilder(\"\");\r\n    sb.deleteAll(\"bc\");\r\n    assertEquals(\"\", sb.toString());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\StrBuilderTest.java",
  "methodName" : "testDeleteAll_StrMatcher",
  "sourceCode" : "@Test\r\nvoid testDeleteAll_StrMatcher() {\r\n    StrBuilder sb = new StrBuilder(\"A0xA1A2yA3\");\r\n    sb.deleteAll((StrMatcher) null);\r\n    assertEquals(\"A0xA1A2yA3\", sb.toString());\r\n    sb.deleteAll(A_NUMBER_MATCHER);\r\n    assertEquals(\"xy\", sb.toString());\r\n    sb = new StrBuilder(\"Ax1\");\r\n    sb.deleteAll(A_NUMBER_MATCHER);\r\n    assertEquals(\"Ax1\", sb.toString());\r\n    sb = new StrBuilder(\"\");\r\n    sb.deleteAll(A_NUMBER_MATCHER);\r\n    assertEquals(\"\", sb.toString());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\StrBuilderTest.java",
  "methodName" : "testDeleteCharAt",
  "sourceCode" : "@Test\r\nvoid testDeleteCharAt() {\r\n    final StrBuilder sb = new StrBuilder(\"abc\");\r\n    sb.deleteCharAt(0);\r\n    assertEquals(\"bc\", sb.toString());\r\n    assertThrows(IndexOutOfBoundsException.class, () -> sb.deleteCharAt(1000));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\StrBuilderTest.java",
  "methodName" : "testDeleteCharAtWithNegative",
  "sourceCode" : "@Test\r\nvoid testDeleteCharAtWithNegative() {\r\n    assertThrows(StringIndexOutOfBoundsException.class, () -> new StrBuilder().deleteCharAt(-1258));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\StrBuilderTest.java",
  "methodName" : "testDeleteFirst_char",
  "sourceCode" : "@Test\r\nvoid testDeleteFirst_char() {\r\n    StrBuilder sb = new StrBuilder(\"abcba\");\r\n    sb.deleteFirst('X');\r\n    assertEquals(\"abcba\", sb.toString());\r\n    sb.deleteFirst('a');\r\n    assertEquals(\"bcba\", sb.toString());\r\n    sb.deleteFirst('c');\r\n    assertEquals(\"bba\", sb.toString());\r\n    sb.deleteFirst('b');\r\n    assertEquals(\"ba\", sb.toString());\r\n    sb = new StrBuilder(\"\");\r\n    sb.deleteFirst('b');\r\n    assertEquals(\"\", sb.toString());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\StrBuilderTest.java",
  "methodName" : "testDeleteFirst_String",
  "sourceCode" : "@Test\r\nvoid testDeleteFirst_String() {\r\n    StrBuilder sb = new StrBuilder(\"abcbccba\");\r\n    sb.deleteFirst((String) null);\r\n    assertEquals(\"abcbccba\", sb.toString());\r\n    sb.deleteFirst(\"\");\r\n    assertEquals(\"abcbccba\", sb.toString());\r\n    sb.deleteFirst(\"X\");\r\n    assertEquals(\"abcbccba\", sb.toString());\r\n    sb.deleteFirst(\"a\");\r\n    assertEquals(\"bcbccba\", sb.toString());\r\n    sb.deleteFirst(\"c\");\r\n    assertEquals(\"bbccba\", sb.toString());\r\n    sb.deleteFirst(\"b\");\r\n    assertEquals(\"bccba\", sb.toString());\r\n    sb = new StrBuilder(\"abcbccba\");\r\n    sb.deleteFirst(\"bc\");\r\n    assertEquals(\"abccba\", sb.toString());\r\n    sb = new StrBuilder(\"\");\r\n    sb.deleteFirst(\"bc\");\r\n    assertEquals(\"\", sb.toString());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\StrBuilderTest.java",
  "methodName" : "testDeleteFirst_StrMatcher",
  "sourceCode" : "@Test\r\nvoid testDeleteFirst_StrMatcher() {\r\n    StrBuilder sb = new StrBuilder(\"A0xA1A2yA3\");\r\n    sb.deleteFirst((StrMatcher) null);\r\n    assertEquals(\"A0xA1A2yA3\", sb.toString());\r\n    sb.deleteFirst(A_NUMBER_MATCHER);\r\n    assertEquals(\"xA1A2yA3\", sb.toString());\r\n    sb = new StrBuilder(\"Ax1\");\r\n    sb.deleteFirst(A_NUMBER_MATCHER);\r\n    assertEquals(\"Ax1\", sb.toString());\r\n    sb = new StrBuilder(\"\");\r\n    sb.deleteFirst(A_NUMBER_MATCHER);\r\n    assertEquals(\"\", sb.toString());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\StrBuilderTest.java",
  "methodName" : "testDeleteIntInt",
  "sourceCode" : "@Test\r\nvoid testDeleteIntInt() {\r\n    final StrBuilder sb = new StrBuilder(\"abc\");\r\n    sb.delete(0, 1);\r\n    assertEquals(\"bc\", sb.toString());\r\n    sb.delete(1, 2);\r\n    assertEquals(\"b\", sb.toString());\r\n    sb.delete(0, 1);\r\n    assertEquals(\"\", sb.toString());\r\n    sb.delete(0, 1000);\r\n    assertEquals(\"\", sb.toString());\r\n    assertThrows(IndexOutOfBoundsException.class, () -> sb.delete(1, 2));\r\n    assertThrows(IndexOutOfBoundsException.class, () -> sb.delete(-1, 1));\r\n    assertThrows(IndexOutOfBoundsException.class, () -> new StrBuilder(\"anything\").delete(2, 1));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\StrBuilderTest.java",
  "methodName" : "testEndsWith",
  "sourceCode" : "@Test\r\nvoid testEndsWith() {\r\n    final StrBuilder sb = new StrBuilder();\r\n    assertFalse(sb.endsWith(\"a\"));\r\n    assertFalse(sb.endsWith(\"c\"));\r\n    assertTrue(sb.endsWith(\"\"));\r\n    assertFalse(sb.endsWith(null));\r\n    sb.append(\"abc\");\r\n    assertTrue(sb.endsWith(\"c\"));\r\n    assertTrue(sb.endsWith(\"bc\"));\r\n    assertTrue(sb.endsWith(\"abc\"));\r\n    assertFalse(sb.endsWith(\"cba\"));\r\n    assertFalse(sb.endsWith(\"abcd\"));\r\n    assertFalse(sb.endsWith(\" abc\"));\r\n    assertFalse(sb.endsWith(\"abc \"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\StrBuilderTest.java",
  "methodName" : "testEnsureCapacity",
  "sourceCode" : "@Test\r\nvoid testEnsureCapacity() {\r\n    final StrBuilder sb = new StrBuilder();\r\n    sb.ensureCapacity(2);\r\n    assertTrue(sb.capacity() >= 2);\r\n    sb.ensureCapacity(-1);\r\n    assertTrue(sb.capacity() >= 0);\r\n    sb.append(\"HelloWorld\");\r\n    sb.ensureCapacity(40);\r\n    assertTrue(sb.capacity() >= 40);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\StrBuilderTest.java",
  "methodName" : "testEquals",
  "sourceCode" : "@Test\r\nvoid testEquals() {\r\n    final StrBuilder sb1 = new StrBuilder();\r\n    final StrBuilder sb2 = new StrBuilder();\r\n    assertTrue(sb1.equals(sb2));\r\n    assertTrue(sb1.equals(sb1));\r\n    assertTrue(sb2.equals(sb2));\r\n    assertEquals(sb1, (Object) sb2);\r\n    sb1.append(\"abc\");\r\n    assertFalse(sb1.equals(sb2));\r\n    assertNotEquals(sb1, (Object) sb2);\r\n    sb2.append(\"ABC\");\r\n    assertFalse(sb1.equals(sb2));\r\n    assertNotEquals(sb1, (Object) sb2);\r\n    sb2.clear().append(\"abc\");\r\n    assertTrue(sb1.equals(sb2));\r\n    assertEquals(sb1, (Object) sb2);\r\n    assertNotEquals(sb1, Integer.valueOf(1));\r\n    assertNotEquals(\"abc\", sb1);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\StrBuilderTest.java",
  "methodName" : "testEqualsIgnoreCase",
  "sourceCode" : "@Test\r\nvoid testEqualsIgnoreCase() {\r\n    final StrBuilder sb1 = new StrBuilder();\r\n    final StrBuilder sb2 = new StrBuilder();\r\n    assertTrue(sb1.equalsIgnoreCase(sb1));\r\n    assertTrue(sb1.equalsIgnoreCase(sb2));\r\n    assertTrue(sb2.equalsIgnoreCase(sb2));\r\n    sb1.append(\"abc\");\r\n    assertFalse(sb1.equalsIgnoreCase(sb2));\r\n    sb2.append(\"ABC\");\r\n    assertTrue(sb1.equalsIgnoreCase(sb2));\r\n    sb2.clear().append(\"abc\");\r\n    assertTrue(sb1.equalsIgnoreCase(sb2));\r\n    assertTrue(sb1.equalsIgnoreCase(sb1));\r\n    assertTrue(sb2.equalsIgnoreCase(sb2));\r\n    sb2.clear().append(\"aBc\");\r\n    assertTrue(sb1.equalsIgnoreCase(sb2));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\StrBuilderTest.java",
  "methodName" : "testGetChars",
  "sourceCode" : "@Test\r\nvoid testGetChars() {\r\n    final StrBuilder sb = new StrBuilder();\r\n    char[] input = new char[10];\r\n    char[] a = sb.getChars(input);\r\n    assertSame(input, a);\r\n    assertArrayEquals(new char[10], a);\r\n    sb.append(\"junit\");\r\n    a = sb.getChars(input);\r\n    assertSame(input, a);\r\n    assertArrayEquals(new char[] { 'j', 'u', 'n', 'i', 't', 0, 0, 0, 0, 0 }, a);\r\n    a = sb.getChars(null);\r\n    assertNotSame(input, a);\r\n    assertEquals(5, a.length);\r\n    assertArrayEquals(\"junit\".toCharArray(), a);\r\n    input = new char[5];\r\n    a = sb.getChars(input);\r\n    assertSame(input, a);\r\n    input = new char[4];\r\n    a = sb.getChars(input);\r\n    assertNotSame(input, a);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\StrBuilderTest.java",
  "methodName" : "testGetCharsIntIntCharArrayInt",
  "sourceCode" : "@Test\r\nvoid testGetCharsIntIntCharArrayInt() {\r\n    final StrBuilder sb = new StrBuilder();\r\n    sb.append(\"junit\");\r\n    char[] a = new char[5];\r\n    sb.getChars(0, 5, a, 0);\r\n    assertArrayEquals(new char[] { 'j', 'u', 'n', 'i', 't' }, a);\r\n    a = new char[5];\r\n    sb.getChars(0, 2, a, 3);\r\n    assertArrayEquals(new char[] { 0, 0, 0, 'j', 'u' }, a);\r\n    try {\r\n        sb.getChars(-1, 0, a, 0);\r\n        fail(\"no exception\");\r\n    } catch (final IndexOutOfBoundsException e) {\r\n        // expected\r\n    }\r\n    try {\r\n        sb.getChars(0, -1, a, 0);\r\n        fail(\"no exception\");\r\n    } catch (final IndexOutOfBoundsException e) {\r\n        // expected\r\n    }\r\n    try {\r\n        sb.getChars(0, 20, a, 0);\r\n        fail(\"no exception\");\r\n    } catch (final IndexOutOfBoundsException e) {\r\n        // expected\r\n    }\r\n    try {\r\n        sb.getChars(4, 2, a, 0);\r\n        fail(\"no exception\");\r\n    } catch (final IndexOutOfBoundsException e) {\r\n        // expected\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\StrBuilderTest.java",
  "methodName" : "testGetSetNewLineText",
  "sourceCode" : "@Test\r\nvoid testGetSetNewLineText() {\r\n    final StrBuilder sb = new StrBuilder();\r\n    assertNull(sb.getNewLineText());\r\n    sb.setNewLineText(\"#\");\r\n    assertEquals(\"#\", sb.getNewLineText());\r\n    sb.setNewLineText(\"\");\r\n    assertEquals(\"\", sb.getNewLineText());\r\n    sb.setNewLineText((String) null);\r\n    assertNull(sb.getNewLineText());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\StrBuilderTest.java",
  "methodName" : "testGetSetNullText",
  "sourceCode" : "@Test\r\nvoid testGetSetNullText() {\r\n    final StrBuilder sb = new StrBuilder();\r\n    assertNull(sb.getNullText());\r\n    sb.setNullText(\"null\");\r\n    assertEquals(\"null\", sb.getNullText());\r\n    sb.setNullText(\"\");\r\n    assertNull(sb.getNullText());\r\n    sb.setNullText(\"NULL\");\r\n    assertEquals(\"NULL\", sb.getNullText());\r\n    sb.setNullText((String) null);\r\n    assertNull(sb.getNullText());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\StrBuilderTest.java",
  "methodName" : "testHashCode",
  "sourceCode" : "@Test\r\nvoid testHashCode() {\r\n    final StrBuilder sb = new StrBuilder();\r\n    final int hc1a = sb.hashCode();\r\n    final int hc1b = sb.hashCode();\r\n    assertEquals(0, hc1a);\r\n    assertEquals(hc1a, hc1b);\r\n    sb.append(\"abc\");\r\n    final int hc2a = sb.hashCode();\r\n    final int hc2b = sb.hashCode();\r\n    assertTrue(hc2a != 0);\r\n    assertEquals(hc2a, hc2b);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\StrBuilderTest.java",
  "methodName" : "testIndexOf_char",
  "sourceCode" : "@Test\r\nvoid testIndexOf_char() {\r\n    final StrBuilder sb = new StrBuilder(\"abab\");\r\n    assertEquals(0, sb.indexOf('a'));\r\n    // should work like String#indexOf\r\n    assertEquals(\"abab\".indexOf('a'), sb.indexOf('a'));\r\n    assertEquals(1, sb.indexOf('b'));\r\n    assertEquals(\"abab\".indexOf('b'), sb.indexOf('b'));\r\n    assertEquals(-1, sb.indexOf('z'));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\StrBuilderTest.java",
  "methodName" : "testIndexOf_char_int",
  "sourceCode" : "@Test\r\nvoid testIndexOf_char_int() {\r\n    StrBuilder sb = new StrBuilder(\"abab\");\r\n    assertEquals(0, sb.indexOf('a', -1));\r\n    assertEquals(0, sb.indexOf('a', 0));\r\n    assertEquals(2, sb.indexOf('a', 1));\r\n    assertEquals(-1, sb.indexOf('a', 4));\r\n    assertEquals(-1, sb.indexOf('a', 5));\r\n    // should work like String#indexOf\r\n    assertEquals(\"abab\".indexOf('a', 1), sb.indexOf('a', 1));\r\n    assertEquals(3, sb.indexOf('b', 2));\r\n    assertEquals(\"abab\".indexOf('b', 2), sb.indexOf('b', 2));\r\n    assertEquals(-1, sb.indexOf('z', 2));\r\n    sb = new StrBuilder(\"xyzabc\");\r\n    assertEquals(2, sb.indexOf('z', 0));\r\n    assertEquals(-1, sb.indexOf('z', 3));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\StrBuilderTest.java",
  "methodName" : "testIndexOf_String",
  "sourceCode" : "@Test\r\nvoid testIndexOf_String() {\r\n    final StrBuilder sb = new StrBuilder(\"abab\");\r\n    assertEquals(0, sb.indexOf(\"a\"));\r\n    // should work like String#indexOf\r\n    assertEquals(\"abab\".indexOf(\"a\"), sb.indexOf(\"a\"));\r\n    assertEquals(0, sb.indexOf(\"ab\"));\r\n    // should work like String#indexOf\r\n    assertEquals(\"abab\".indexOf(\"ab\"), sb.indexOf(\"ab\"));\r\n    assertEquals(1, sb.indexOf(\"b\"));\r\n    assertEquals(\"abab\".indexOf(\"b\"), sb.indexOf(\"b\"));\r\n    assertEquals(1, sb.indexOf(\"ba\"));\r\n    assertEquals(\"abab\".indexOf(\"ba\"), sb.indexOf(\"ba\"));\r\n    assertEquals(-1, sb.indexOf(\"z\"));\r\n    assertEquals(-1, sb.indexOf((String) null));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\StrBuilderTest.java",
  "methodName" : "testIndexOf_String_int",
  "sourceCode" : "@Test\r\nvoid testIndexOf_String_int() {\r\n    StrBuilder sb = new StrBuilder(\"abab\");\r\n    assertEquals(0, sb.indexOf(\"a\", -1));\r\n    assertEquals(0, sb.indexOf(\"a\", 0));\r\n    assertEquals(2, sb.indexOf(\"a\", 1));\r\n    assertEquals(2, sb.indexOf(\"a\", 2));\r\n    assertEquals(-1, sb.indexOf(\"a\", 3));\r\n    assertEquals(-1, sb.indexOf(\"a\", 4));\r\n    assertEquals(-1, sb.indexOf(\"a\", 5));\r\n    assertEquals(-1, sb.indexOf(\"abcdef\", 0));\r\n    assertEquals(0, sb.indexOf(\"\", 0));\r\n    assertEquals(1, sb.indexOf(\"\", 1));\r\n    // should work like String#indexOf\r\n    assertEquals(\"abab\".indexOf(\"a\", 1), sb.indexOf(\"a\", 1));\r\n    assertEquals(2, sb.indexOf(\"ab\", 1));\r\n    // should work like String#indexOf\r\n    assertEquals(\"abab\".indexOf(\"ab\", 1), sb.indexOf(\"ab\", 1));\r\n    assertEquals(3, sb.indexOf(\"b\", 2));\r\n    assertEquals(\"abab\".indexOf(\"b\", 2), sb.indexOf(\"b\", 2));\r\n    assertEquals(1, sb.indexOf(\"ba\", 1));\r\n    assertEquals(\"abab\".indexOf(\"ba\", 2), sb.indexOf(\"ba\", 2));\r\n    assertEquals(-1, sb.indexOf(\"z\", 2));\r\n    sb = new StrBuilder(\"xyzabc\");\r\n    assertEquals(2, sb.indexOf(\"za\", 0));\r\n    assertEquals(-1, sb.indexOf(\"za\", 3));\r\n    assertEquals(-1, sb.indexOf((String) null, 2));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\StrBuilderTest.java",
  "methodName" : "testIndexOf_StrMatcher",
  "sourceCode" : "@Test\r\nvoid testIndexOf_StrMatcher() {\r\n    final StrBuilder sb = new StrBuilder();\r\n    assertEquals(-1, sb.indexOf((StrMatcher) null));\r\n    assertEquals(-1, sb.indexOf(StrMatcher.charMatcher('a')));\r\n    sb.append(\"ab bd\");\r\n    assertEquals(0, sb.indexOf(StrMatcher.charMatcher('a')));\r\n    assertEquals(1, sb.indexOf(StrMatcher.charMatcher('b')));\r\n    assertEquals(2, sb.indexOf(StrMatcher.spaceMatcher()));\r\n    assertEquals(4, sb.indexOf(StrMatcher.charMatcher('d')));\r\n    assertEquals(-1, sb.indexOf(StrMatcher.noneMatcher()));\r\n    assertEquals(-1, sb.indexOf((StrMatcher) null));\r\n    sb.append(\" A1 junction\");\r\n    assertEquals(6, sb.indexOf(A_NUMBER_MATCHER));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\StrBuilderTest.java",
  "methodName" : "testIndexOf_StrMatcher_int",
  "sourceCode" : "@Test\r\nvoid testIndexOf_StrMatcher_int() {\r\n    final StrBuilder sb = new StrBuilder();\r\n    assertEquals(-1, sb.indexOf((StrMatcher) null, 2));\r\n    assertEquals(-1, sb.indexOf(StrMatcher.charMatcher('a'), 2));\r\n    assertEquals(-1, sb.indexOf(StrMatcher.charMatcher('a'), 0));\r\n    sb.append(\"ab bd\");\r\n    assertEquals(0, sb.indexOf(StrMatcher.charMatcher('a'), -2));\r\n    assertEquals(0, sb.indexOf(StrMatcher.charMatcher('a'), 0));\r\n    assertEquals(-1, sb.indexOf(StrMatcher.charMatcher('a'), 2));\r\n    assertEquals(-1, sb.indexOf(StrMatcher.charMatcher('a'), 20));\r\n    assertEquals(1, sb.indexOf(StrMatcher.charMatcher('b'), -1));\r\n    assertEquals(1, sb.indexOf(StrMatcher.charMatcher('b'), 0));\r\n    assertEquals(1, sb.indexOf(StrMatcher.charMatcher('b'), 1));\r\n    assertEquals(3, sb.indexOf(StrMatcher.charMatcher('b'), 2));\r\n    assertEquals(3, sb.indexOf(StrMatcher.charMatcher('b'), 3));\r\n    assertEquals(-1, sb.indexOf(StrMatcher.charMatcher('b'), 4));\r\n    assertEquals(-1, sb.indexOf(StrMatcher.charMatcher('b'), 5));\r\n    assertEquals(-1, sb.indexOf(StrMatcher.charMatcher('b'), 6));\r\n    assertEquals(2, sb.indexOf(StrMatcher.spaceMatcher(), -2));\r\n    assertEquals(2, sb.indexOf(StrMatcher.spaceMatcher(), 0));\r\n    assertEquals(2, sb.indexOf(StrMatcher.spaceMatcher(), 2));\r\n    assertEquals(-1, sb.indexOf(StrMatcher.spaceMatcher(), 4));\r\n    assertEquals(-1, sb.indexOf(StrMatcher.spaceMatcher(), 20));\r\n    assertEquals(-1, sb.indexOf(StrMatcher.noneMatcher(), 0));\r\n    assertEquals(-1, sb.indexOf((StrMatcher) null, 0));\r\n    sb.append(\" A1 junction with A2\");\r\n    assertEquals(6, sb.indexOf(A_NUMBER_MATCHER, 5));\r\n    assertEquals(6, sb.indexOf(A_NUMBER_MATCHER, 6));\r\n    assertEquals(23, sb.indexOf(A_NUMBER_MATCHER, 7));\r\n    assertEquals(23, sb.indexOf(A_NUMBER_MATCHER, 22));\r\n    assertEquals(23, sb.indexOf(A_NUMBER_MATCHER, 23));\r\n    assertEquals(-1, sb.indexOf(A_NUMBER_MATCHER, 24));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\StrBuilderTest.java",
  "methodName" : "testIndexOfLang294",
  "sourceCode" : "@Test\r\nvoid testIndexOfLang294() {\r\n    final StrBuilder sb = new StrBuilder(\"onetwothree\");\r\n    sb.deleteFirst(\"three\");\r\n    assertEquals(-1, sb.indexOf(\"three\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\StrBuilderTest.java",
  "methodName" : "testIsEmpty",
  "sourceCode" : "@Test\r\nvoid testIsEmpty() {\r\n    final StrBuilder sb = new StrBuilder();\r\n    assertTrue(sb.isEmpty());\r\n    sb.append(\"Hello\");\r\n    assertFalse(sb.isEmpty());\r\n    sb.clear();\r\n    assertTrue(sb.isEmpty());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\StrBuilderTest.java",
  "methodName" : "testLang294",
  "sourceCode" : "@Test\r\nvoid testLang294() {\r\n    final StrBuilder sb = new StrBuilder(\"\\n%BLAH%\\nDo more stuff\\neven more stuff\\n%BLAH%\\n\");\r\n    sb.deleteAll(\"\\n%BLAH%\");\r\n    assertEquals(\"\\nDo more stuff\\neven more stuff\\n\", sb.toString());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\StrBuilderTest.java",
  "methodName" : "testLang295",
  "sourceCode" : "@Test\r\nvoid testLang295() {\r\n    final StrBuilder sb = new StrBuilder(\"onetwothree\");\r\n    sb.deleteFirst(\"three\");\r\n    assertFalse(sb.contains('h'), \"The contains(char) method is looking beyond the end of the string\");\r\n    assertEquals(-1, sb.indexOf('h'), \"The indexOf(char) method is looking beyond the end of the string\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\StrBuilderTest.java",
  "methodName" : "testLang412Left",
  "sourceCode" : "@Test\r\nvoid testLang412Left() {\r\n    final StrBuilder sb = new StrBuilder();\r\n    sb.appendFixedWidthPadLeft(null, 10, '*');\r\n    assertEquals(\"**********\", sb.toString(), \"Failed to invoke appendFixedWidthPadLeft correctly\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\StrBuilderTest.java",
  "methodName" : "testLang412Right",
  "sourceCode" : "@Test\r\nvoid testLang412Right() {\r\n    final StrBuilder sb = new StrBuilder();\r\n    sb.appendFixedWidthPadRight(null, 10, '*');\r\n    assertEquals(\"**********\", sb.toString(), \"Failed to invoke appendFixedWidthPadRight correctly\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\StrBuilderTest.java",
  "methodName" : "testLastIndexOf_char",
  "sourceCode" : "@Test\r\nvoid testLastIndexOf_char() {\r\n    final StrBuilder sb = new StrBuilder(\"abab\");\r\n    assertEquals(2, sb.lastIndexOf('a'));\r\n    // should work like String#lastIndexOf\r\n    assertEquals(\"abab\".lastIndexOf('a'), sb.lastIndexOf('a'));\r\n    assertEquals(3, sb.lastIndexOf('b'));\r\n    assertEquals(\"abab\".lastIndexOf('b'), sb.lastIndexOf('b'));\r\n    assertEquals(-1, sb.lastIndexOf('z'));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\StrBuilderTest.java",
  "methodName" : "testLastIndexOf_char_int",
  "sourceCode" : "@Test\r\nvoid testLastIndexOf_char_int() {\r\n    StrBuilder sb = new StrBuilder(\"abab\");\r\n    assertEquals(-1, sb.lastIndexOf('a', -1));\r\n    assertEquals(0, sb.lastIndexOf('a', 0));\r\n    assertEquals(0, sb.lastIndexOf('a', 1));\r\n    // should work like String#lastIndexOf\r\n    assertEquals(\"abab\".lastIndexOf('a', 1), sb.lastIndexOf('a', 1));\r\n    assertEquals(1, sb.lastIndexOf('b', 2));\r\n    assertEquals(\"abab\".lastIndexOf('b', 2), sb.lastIndexOf('b', 2));\r\n    assertEquals(-1, sb.lastIndexOf('z', 2));\r\n    sb = new StrBuilder(\"xyzabc\");\r\n    assertEquals(2, sb.lastIndexOf('z', sb.length()));\r\n    assertEquals(-1, sb.lastIndexOf('z', 1));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\StrBuilderTest.java",
  "methodName" : "testLastIndexOf_String",
  "sourceCode" : "@Test\r\nvoid testLastIndexOf_String() {\r\n    final StrBuilder sb = new StrBuilder(\"abab\");\r\n    assertEquals(2, sb.lastIndexOf(\"a\"));\r\n    // should work like String#lastIndexOf\r\n    assertEquals(\"abab\".lastIndexOf(\"a\"), sb.lastIndexOf(\"a\"));\r\n    assertEquals(2, sb.lastIndexOf(\"ab\"));\r\n    // should work like String#lastIndexOf\r\n    assertEquals(\"abab\".lastIndexOf(\"ab\"), sb.lastIndexOf(\"ab\"));\r\n    assertEquals(3, sb.lastIndexOf(\"b\"));\r\n    assertEquals(\"abab\".lastIndexOf(\"b\"), sb.lastIndexOf(\"b\"));\r\n    assertEquals(1, sb.lastIndexOf(\"ba\"));\r\n    assertEquals(\"abab\".lastIndexOf(\"ba\"), sb.lastIndexOf(\"ba\"));\r\n    assertEquals(-1, sb.lastIndexOf(\"z\"));\r\n    assertEquals(-1, sb.lastIndexOf((String) null));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\StrBuilderTest.java",
  "methodName" : "testLastIndexOf_String_int",
  "sourceCode" : "@Test\r\nvoid testLastIndexOf_String_int() {\r\n    StrBuilder sb = new StrBuilder(\"abab\");\r\n    assertEquals(-1, sb.lastIndexOf(\"a\", -1));\r\n    assertEquals(0, sb.lastIndexOf(\"a\", 0));\r\n    assertEquals(0, sb.lastIndexOf(\"a\", 1));\r\n    assertEquals(2, sb.lastIndexOf(\"a\", 2));\r\n    assertEquals(2, sb.lastIndexOf(\"a\", 3));\r\n    assertEquals(2, sb.lastIndexOf(\"a\", 4));\r\n    assertEquals(2, sb.lastIndexOf(\"a\", 5));\r\n    assertEquals(-1, sb.lastIndexOf(\"abcdef\", 3));\r\n    assertEquals(\"abab\".lastIndexOf(\"\", 3), sb.lastIndexOf(\"\", 3));\r\n    assertEquals(\"abab\".lastIndexOf(\"\", 1), sb.lastIndexOf(\"\", 1));\r\n    // should work like String#lastIndexOf\r\n    assertEquals(\"abab\".lastIndexOf(\"a\", 1), sb.lastIndexOf(\"a\", 1));\r\n    assertEquals(0, sb.lastIndexOf(\"ab\", 1));\r\n    // should work like String#lastIndexOf\r\n    assertEquals(\"abab\".lastIndexOf(\"ab\", 1), sb.lastIndexOf(\"ab\", 1));\r\n    assertEquals(1, sb.lastIndexOf(\"b\", 2));\r\n    assertEquals(\"abab\".lastIndexOf(\"b\", 2), sb.lastIndexOf(\"b\", 2));\r\n    assertEquals(1, sb.lastIndexOf(\"ba\", 2));\r\n    assertEquals(\"abab\".lastIndexOf(\"ba\", 2), sb.lastIndexOf(\"ba\", 2));\r\n    assertEquals(-1, sb.lastIndexOf(\"z\", 2));\r\n    sb = new StrBuilder(\"xyzabc\");\r\n    assertEquals(2, sb.lastIndexOf(\"za\", sb.length()));\r\n    assertEquals(-1, sb.lastIndexOf(\"za\", 1));\r\n    assertEquals(-1, sb.lastIndexOf((String) null, 2));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\StrBuilderTest.java",
  "methodName" : "testLastIndexOf_StrMatcher",
  "sourceCode" : "@Test\r\nvoid testLastIndexOf_StrMatcher() {\r\n    final StrBuilder sb = new StrBuilder();\r\n    assertEquals(-1, sb.lastIndexOf((StrMatcher) null));\r\n    assertEquals(-1, sb.lastIndexOf(StrMatcher.charMatcher('a')));\r\n    sb.append(\"ab bd\");\r\n    assertEquals(0, sb.lastIndexOf(StrMatcher.charMatcher('a')));\r\n    assertEquals(3, sb.lastIndexOf(StrMatcher.charMatcher('b')));\r\n    assertEquals(2, sb.lastIndexOf(StrMatcher.spaceMatcher()));\r\n    assertEquals(4, sb.lastIndexOf(StrMatcher.charMatcher('d')));\r\n    assertEquals(-1, sb.lastIndexOf(StrMatcher.noneMatcher()));\r\n    assertEquals(-1, sb.lastIndexOf((StrMatcher) null));\r\n    sb.append(\" A1 junction\");\r\n    assertEquals(6, sb.lastIndexOf(A_NUMBER_MATCHER));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\StrBuilderTest.java",
  "methodName" : "testLastIndexOf_StrMatcher_int",
  "sourceCode" : "@Test\r\nvoid testLastIndexOf_StrMatcher_int() {\r\n    final StrBuilder sb = new StrBuilder();\r\n    assertEquals(-1, sb.lastIndexOf((StrMatcher) null, 2));\r\n    assertEquals(-1, sb.lastIndexOf(StrMatcher.charMatcher('a'), 2));\r\n    assertEquals(-1, sb.lastIndexOf(StrMatcher.charMatcher('a'), 0));\r\n    assertEquals(-1, sb.lastIndexOf(StrMatcher.charMatcher('a'), -1));\r\n    sb.append(\"ab bd\");\r\n    assertEquals(-1, sb.lastIndexOf(StrMatcher.charMatcher('a'), -2));\r\n    assertEquals(0, sb.lastIndexOf(StrMatcher.charMatcher('a'), 0));\r\n    assertEquals(0, sb.lastIndexOf(StrMatcher.charMatcher('a'), 2));\r\n    assertEquals(0, sb.lastIndexOf(StrMatcher.charMatcher('a'), 20));\r\n    assertEquals(-1, sb.lastIndexOf(StrMatcher.charMatcher('b'), -1));\r\n    assertEquals(-1, sb.lastIndexOf(StrMatcher.charMatcher('b'), 0));\r\n    assertEquals(1, sb.lastIndexOf(StrMatcher.charMatcher('b'), 1));\r\n    assertEquals(1, sb.lastIndexOf(StrMatcher.charMatcher('b'), 2));\r\n    assertEquals(3, sb.lastIndexOf(StrMatcher.charMatcher('b'), 3));\r\n    assertEquals(3, sb.lastIndexOf(StrMatcher.charMatcher('b'), 4));\r\n    assertEquals(3, sb.lastIndexOf(StrMatcher.charMatcher('b'), 5));\r\n    assertEquals(3, sb.lastIndexOf(StrMatcher.charMatcher('b'), 6));\r\n    assertEquals(-1, sb.lastIndexOf(StrMatcher.spaceMatcher(), -2));\r\n    assertEquals(-1, sb.lastIndexOf(StrMatcher.spaceMatcher(), 0));\r\n    assertEquals(2, sb.lastIndexOf(StrMatcher.spaceMatcher(), 2));\r\n    assertEquals(2, sb.lastIndexOf(StrMatcher.spaceMatcher(), 4));\r\n    assertEquals(2, sb.lastIndexOf(StrMatcher.spaceMatcher(), 20));\r\n    assertEquals(-1, sb.lastIndexOf(StrMatcher.noneMatcher(), 0));\r\n    assertEquals(-1, sb.lastIndexOf((StrMatcher) null, 0));\r\n    sb.append(\" A1 junction with A2\");\r\n    assertEquals(-1, sb.lastIndexOf(A_NUMBER_MATCHER, 5));\r\n    // A matches, 1\r\n    assertEquals(-1, sb.lastIndexOf(A_NUMBER_MATCHER, 6));\r\n    // is outside\r\n    // bounds\r\n    assertEquals(6, sb.lastIndexOf(A_NUMBER_MATCHER, 7));\r\n    assertEquals(6, sb.lastIndexOf(A_NUMBER_MATCHER, 22));\r\n    // A matches, 2\r\n    assertEquals(6, sb.lastIndexOf(A_NUMBER_MATCHER, 23));\r\n    // is outside\r\n    // bounds\r\n    assertEquals(23, sb.lastIndexOf(A_NUMBER_MATCHER, 24));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\StrBuilderTest.java",
  "methodName" : "testLeftString",
  "sourceCode" : "@Test\r\nvoid testLeftString() {\r\n    final StrBuilder sb = new StrBuilder(\"left right\");\r\n    assertEquals(\"left\", sb.leftString(4));\r\n    assertEquals(\"\", sb.leftString(0));\r\n    assertEquals(\"\", sb.leftString(-5));\r\n    assertEquals(\"left right\", sb.leftString(15));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\StrBuilderTest.java",
  "methodName" : "testLength",
  "sourceCode" : "@Test\r\nvoid testLength() {\r\n    final StrBuilder sb = new StrBuilder();\r\n    assertEquals(0, sb.length());\r\n    sb.append(\"Hello\");\r\n    assertEquals(5, sb.length());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\StrBuilderTest.java",
  "methodName" : "testMidString",
  "sourceCode" : "@Test\r\nvoid testMidString() {\r\n    final StrBuilder sb = new StrBuilder(\"hello goodbye hello\");\r\n    assertEquals(\"goodbye\", sb.midString(6, 7));\r\n    assertEquals(\"hello\", sb.midString(0, 5));\r\n    assertEquals(\"hello\", sb.midString(-5, 5));\r\n    assertEquals(\"\", sb.midString(0, -1));\r\n    assertEquals(\"\", sb.midString(20, 2));\r\n    assertEquals(\"hello\", sb.midString(14, 22));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\StrBuilderTest.java",
  "methodName" : "testMinimizeCapacity",
  "sourceCode" : "@Test\r\nvoid testMinimizeCapacity() {\r\n    final StrBuilder sb = new StrBuilder();\r\n    sb.minimizeCapacity();\r\n    assertEquals(0, sb.capacity());\r\n    sb.append(\"HelloWorld\");\r\n    sb.minimizeCapacity();\r\n    assertEquals(10, sb.capacity());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\StrBuilderTest.java",
  "methodName" : "testReadFromCharBuffer",
  "sourceCode" : "@Test\r\nvoid testReadFromCharBuffer() throws Exception {\r\n    String s = \"\";\r\n    for (int i = 0; i < 100; ++i) {\r\n        final StrBuilder sb = new StrBuilder();\r\n        final int len = sb.readFrom(CharBuffer.wrap(s));\r\n        assertEquals(s.length(), len);\r\n        assertEquals(s, sb.toString());\r\n        s += Integer.toString(i);\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\StrBuilderTest.java",
  "methodName" : "testReadFromCharBufferAppendsToEnd",
  "sourceCode" : "@Test\r\nvoid testReadFromCharBufferAppendsToEnd() throws Exception {\r\n    final StrBuilder sb = new StrBuilder(\"Test\");\r\n    sb.readFrom(CharBuffer.wrap(\" 123\"));\r\n    assertEquals(\"Test 123\", sb.toString());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\StrBuilderTest.java",
  "methodName" : "testReadFromReadable",
  "sourceCode" : "@Test\r\nvoid testReadFromReadable() throws Exception {\r\n    String s = \"\";\r\n    for (int i = 0; i < 100; ++i) {\r\n        final StrBuilder sb = new StrBuilder();\r\n        final int len = sb.readFrom(new MockReadable(s));\r\n        assertEquals(s.length(), len);\r\n        assertEquals(s, sb.toString());\r\n        s += Integer.toString(i);\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\StrBuilderTest.java",
  "methodName" : "testReadFromReadableAppendsToEnd",
  "sourceCode" : "@Test\r\nvoid testReadFromReadableAppendsToEnd() throws Exception {\r\n    final StrBuilder sb = new StrBuilder(\"Test\");\r\n    sb.readFrom(new MockReadable(\" 123\"));\r\n    assertEquals(\"Test 123\", sb.toString());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\StrBuilderTest.java",
  "methodName" : "testReadFromReader",
  "sourceCode" : "@Test\r\nvoid testReadFromReader() throws Exception {\r\n    String s = \"\";\r\n    for (int i = 0; i < 100; ++i) {\r\n        final StrBuilder sb = new StrBuilder();\r\n        final int len = sb.readFrom(new StringReader(s));\r\n        assertEquals(s.length(), len);\r\n        assertEquals(s, sb.toString());\r\n        s += Integer.toString(i);\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\StrBuilderTest.java",
  "methodName" : "testReadFromReaderAppendsToEnd",
  "sourceCode" : "@Test\r\nvoid testReadFromReaderAppendsToEnd() throws Exception {\r\n    final StrBuilder sb = new StrBuilder(\"Test\");\r\n    sb.readFrom(new StringReader(\" 123\"));\r\n    assertEquals(\"Test 123\", sb.toString());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\StrBuilderTest.java",
  "methodName" : "testReplace_int_int_String",
  "sourceCode" : "@Test\r\nvoid testReplace_int_int_String() {\r\n    StrBuilder sb = new StrBuilder(\"abc\");\r\n    sb.replace(0, 1, \"d\");\r\n    assertEquals(\"dbc\", sb.toString());\r\n    sb.replace(0, 1, \"aaa\");\r\n    assertEquals(\"aaabc\", sb.toString());\r\n    sb.replace(0, 3, \"\");\r\n    assertEquals(\"bc\", sb.toString());\r\n    sb.replace(1, 2, (String) null);\r\n    assertEquals(\"b\", sb.toString());\r\n    sb.replace(1, 1000, \"text\");\r\n    assertEquals(\"btext\", sb.toString());\r\n    sb.replace(0, 1000, \"text\");\r\n    assertEquals(\"text\", sb.toString());\r\n    sb = new StrBuilder(\"atext\");\r\n    sb.replace(1, 1, \"ny\");\r\n    assertEquals(\"anytext\", sb.toString());\r\n    try {\r\n        sb.replace(2, 1, \"anything\");\r\n        fail(\"Expected IndexOutOfBoundsException\");\r\n    } catch (final IndexOutOfBoundsException e) {\r\n        // expected\r\n    }\r\n    sb = new StrBuilder();\r\n    try {\r\n        sb.replace(1, 2, \"anything\");\r\n        fail(\"Expected IndexOutOfBoundsException\");\r\n    } catch (final IndexOutOfBoundsException e) {\r\n        // expected\r\n    }\r\n    try {\r\n        sb.replace(-1, 1, \"anything\");\r\n        fail(\"Expected IndexOutOfBoundsException\");\r\n    } catch (final IndexOutOfBoundsException e) {\r\n        // expected\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\StrBuilderTest.java",
  "methodName" : "testReplace_StrMatcher_String_int_int_int_VaryCount",
  "sourceCode" : "@Test\r\nvoid testReplace_StrMatcher_String_int_int_int_VaryCount() {\r\n    StrBuilder sb = new StrBuilder(\"aaxaaaayaa\");\r\n    sb.replace(StrMatcher.stringMatcher(\"aa\"), \"-\", 0, 10, -1);\r\n    assertEquals(\"-x--y-\", sb.toString());\r\n    sb = new StrBuilder(\"aaxaaaayaa\");\r\n    sb.replace(StrMatcher.stringMatcher(\"aa\"), \"-\", 0, 10, 0);\r\n    assertEquals(\"aaxaaaayaa\", sb.toString());\r\n    sb = new StrBuilder(\"aaxaaaayaa\");\r\n    sb.replace(StrMatcher.stringMatcher(\"aa\"), \"-\", 0, 10, 1);\r\n    assertEquals(\"-xaaaayaa\", sb.toString());\r\n    sb = new StrBuilder(\"aaxaaaayaa\");\r\n    sb.replace(StrMatcher.stringMatcher(\"aa\"), \"-\", 0, 10, 2);\r\n    assertEquals(\"-x-aayaa\", sb.toString());\r\n    sb = new StrBuilder(\"aaxaaaayaa\");\r\n    sb.replace(StrMatcher.stringMatcher(\"aa\"), \"-\", 0, 10, 3);\r\n    assertEquals(\"-x--yaa\", sb.toString());\r\n    sb = new StrBuilder(\"aaxaaaayaa\");\r\n    sb.replace(StrMatcher.stringMatcher(\"aa\"), \"-\", 0, 10, 4);\r\n    assertEquals(\"-x--y-\", sb.toString());\r\n    sb = new StrBuilder(\"aaxaaaayaa\");\r\n    sb.replace(StrMatcher.stringMatcher(\"aa\"), \"-\", 0, 10, 5);\r\n    assertEquals(\"-x--y-\", sb.toString());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\StrBuilderTest.java",
  "methodName" : "testReplace_StrMatcher_String_int_int_int_VaryEndIndex",
  "sourceCode" : "@Test\r\nvoid testReplace_StrMatcher_String_int_int_int_VaryEndIndex() {\r\n    StrBuilder sb = new StrBuilder(\"aaxaaaayaa\");\r\n    sb.replace(StrMatcher.stringMatcher(\"aa\"), \"-\", 0, 0, -1);\r\n    assertEquals(\"aaxaaaayaa\", sb.toString());\r\n    sb = new StrBuilder(\"aaxaaaayaa\");\r\n    sb.replace(StrMatcher.stringMatcher(\"aa\"), \"-\", 0, 2, -1);\r\n    assertEquals(\"-xaaaayaa\", sb.toString());\r\n    sb = new StrBuilder(\"aaxaaaayaa\");\r\n    sb.replace(StrMatcher.stringMatcher(\"aa\"), \"-\", 0, 3, -1);\r\n    assertEquals(\"-xaaaayaa\", sb.toString());\r\n    sb = new StrBuilder(\"aaxaaaayaa\");\r\n    sb.replace(StrMatcher.stringMatcher(\"aa\"), \"-\", 0, 4, -1);\r\n    assertEquals(\"-xaaaayaa\", sb.toString());\r\n    sb = new StrBuilder(\"aaxaaaayaa\");\r\n    sb.replace(StrMatcher.stringMatcher(\"aa\"), \"-\", 0, 5, -1);\r\n    assertEquals(\"-x-aayaa\", sb.toString());\r\n    sb = new StrBuilder(\"aaxaaaayaa\");\r\n    sb.replace(StrMatcher.stringMatcher(\"aa\"), \"-\", 0, 6, -1);\r\n    assertEquals(\"-x-aayaa\", sb.toString());\r\n    sb = new StrBuilder(\"aaxaaaayaa\");\r\n    sb.replace(StrMatcher.stringMatcher(\"aa\"), \"-\", 0, 7, -1);\r\n    assertEquals(\"-x--yaa\", sb.toString());\r\n    sb = new StrBuilder(\"aaxaaaayaa\");\r\n    sb.replace(StrMatcher.stringMatcher(\"aa\"), \"-\", 0, 8, -1);\r\n    assertEquals(\"-x--yaa\", sb.toString());\r\n    sb = new StrBuilder(\"aaxaaaayaa\");\r\n    sb.replace(StrMatcher.stringMatcher(\"aa\"), \"-\", 0, 9, -1);\r\n    assertEquals(\"-x--yaa\", sb.toString());\r\n    sb = new StrBuilder(\"aaxaaaayaa\");\r\n    sb.replace(StrMatcher.stringMatcher(\"aa\"), \"-\", 0, 10, -1);\r\n    assertEquals(\"-x--y-\", sb.toString());\r\n    sb = new StrBuilder(\"aaxaaaayaa\");\r\n    sb.replace(StrMatcher.stringMatcher(\"aa\"), \"-\", 0, 1000, -1);\r\n    assertEquals(\"-x--y-\", sb.toString());\r\n    sb = new StrBuilder(\"aaxaaaayaa\");\r\n    try {\r\n        sb.replace(StrMatcher.stringMatcher(\"aa\"), \"-\", 2, 1, -1);\r\n        fail(\"Exception expected!\");\r\n    } catch (final IndexOutOfBoundsException ex) {\r\n        // expected\r\n    }\r\n    assertEquals(\"aaxaaaayaa\", sb.toString());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\StrBuilderTest.java",
  "methodName" : "testReplace_StrMatcher_String_int_int_int_VaryMatcher",
  "sourceCode" : "@Test\r\nvoid testReplace_StrMatcher_String_int_int_int_VaryMatcher() {\r\n    StrBuilder sb = new StrBuilder(\"abcbccba\");\r\n    sb.replace((StrMatcher) null, \"x\", 0, sb.length(), -1);\r\n    assertEquals(\"abcbccba\", sb.toString());\r\n    sb.replace(StrMatcher.charMatcher('a'), \"x\", 0, sb.length(), -1);\r\n    assertEquals(\"xbcbccbx\", sb.toString());\r\n    sb.replace(StrMatcher.stringMatcher(\"cb\"), \"x\", 0, sb.length(), -1);\r\n    assertEquals(\"xbxcxx\", sb.toString());\r\n    sb = new StrBuilder(\"A1-A2A3-A4\");\r\n    sb.replace(A_NUMBER_MATCHER, \"***\", 0, sb.length(), -1);\r\n    assertEquals(\"***-******-***\", sb.toString());\r\n    sb = new StrBuilder();\r\n    sb.replace(A_NUMBER_MATCHER, \"***\", 0, sb.length(), -1);\r\n    assertEquals(\"\", sb.toString());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\StrBuilderTest.java",
  "methodName" : "testReplace_StrMatcher_String_int_int_int_VaryReplace",
  "sourceCode" : "@Test\r\nvoid testReplace_StrMatcher_String_int_int_int_VaryReplace() {\r\n    StrBuilder sb = new StrBuilder(\"abcbccba\");\r\n    sb.replace(StrMatcher.stringMatcher(\"cb\"), \"cb\", 0, sb.length(), -1);\r\n    assertEquals(\"abcbccba\", sb.toString());\r\n    sb = new StrBuilder(\"abcbccba\");\r\n    sb.replace(StrMatcher.stringMatcher(\"cb\"), \"-\", 0, sb.length(), -1);\r\n    assertEquals(\"ab-c-a\", sb.toString());\r\n    sb = new StrBuilder(\"abcbccba\");\r\n    sb.replace(StrMatcher.stringMatcher(\"cb\"), \"+++\", 0, sb.length(), -1);\r\n    assertEquals(\"ab+++c+++a\", sb.toString());\r\n    sb = new StrBuilder(\"abcbccba\");\r\n    sb.replace(StrMatcher.stringMatcher(\"cb\"), \"\", 0, sb.length(), -1);\r\n    assertEquals(\"abca\", sb.toString());\r\n    sb = new StrBuilder(\"abcbccba\");\r\n    sb.replace(StrMatcher.stringMatcher(\"cb\"), null, 0, sb.length(), -1);\r\n    assertEquals(\"abca\", sb.toString());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\StrBuilderTest.java",
  "methodName" : "testReplace_StrMatcher_String_int_int_int_VaryStartIndex",
  "sourceCode" : "@Test\r\nvoid testReplace_StrMatcher_String_int_int_int_VaryStartIndex() {\r\n    StrBuilder sb = new StrBuilder(\"aaxaaaayaa\");\r\n    sb.replace(StrMatcher.stringMatcher(\"aa\"), \"-\", 0, sb.length(), -1);\r\n    assertEquals(\"-x--y-\", sb.toString());\r\n    sb = new StrBuilder(\"aaxaaaayaa\");\r\n    sb.replace(StrMatcher.stringMatcher(\"aa\"), \"-\", 1, sb.length(), -1);\r\n    assertEquals(\"aax--y-\", sb.toString());\r\n    sb = new StrBuilder(\"aaxaaaayaa\");\r\n    sb.replace(StrMatcher.stringMatcher(\"aa\"), \"-\", 2, sb.length(), -1);\r\n    assertEquals(\"aax--y-\", sb.toString());\r\n    sb = new StrBuilder(\"aaxaaaayaa\");\r\n    sb.replace(StrMatcher.stringMatcher(\"aa\"), \"-\", 3, sb.length(), -1);\r\n    assertEquals(\"aax--y-\", sb.toString());\r\n    sb = new StrBuilder(\"aaxaaaayaa\");\r\n    sb.replace(StrMatcher.stringMatcher(\"aa\"), \"-\", 4, sb.length(), -1);\r\n    assertEquals(\"aaxa-ay-\", sb.toString());\r\n    sb = new StrBuilder(\"aaxaaaayaa\");\r\n    sb.replace(StrMatcher.stringMatcher(\"aa\"), \"-\", 5, sb.length(), -1);\r\n    assertEquals(\"aaxaa-y-\", sb.toString());\r\n    sb = new StrBuilder(\"aaxaaaayaa\");\r\n    sb.replace(StrMatcher.stringMatcher(\"aa\"), \"-\", 6, sb.length(), -1);\r\n    assertEquals(\"aaxaaaay-\", sb.toString());\r\n    sb = new StrBuilder(\"aaxaaaayaa\");\r\n    sb.replace(StrMatcher.stringMatcher(\"aa\"), \"-\", 7, sb.length(), -1);\r\n    assertEquals(\"aaxaaaay-\", sb.toString());\r\n    sb = new StrBuilder(\"aaxaaaayaa\");\r\n    sb.replace(StrMatcher.stringMatcher(\"aa\"), \"-\", 8, sb.length(), -1);\r\n    assertEquals(\"aaxaaaay-\", sb.toString());\r\n    sb = new StrBuilder(\"aaxaaaayaa\");\r\n    sb.replace(StrMatcher.stringMatcher(\"aa\"), \"-\", 9, sb.length(), -1);\r\n    assertEquals(\"aaxaaaayaa\", sb.toString());\r\n    sb = new StrBuilder(\"aaxaaaayaa\");\r\n    sb.replace(StrMatcher.stringMatcher(\"aa\"), \"-\", 10, sb.length(), -1);\r\n    assertEquals(\"aaxaaaayaa\", sb.toString());\r\n    sb = new StrBuilder(\"aaxaaaayaa\");\r\n    try {\r\n        sb.replace(StrMatcher.stringMatcher(\"aa\"), \"-\", 11, sb.length(), -1);\r\n        fail(\"Exception expected!\");\r\n    } catch (final IndexOutOfBoundsException ex) {\r\n        // expected\r\n    }\r\n    assertEquals(\"aaxaaaayaa\", sb.toString());\r\n    sb = new StrBuilder(\"aaxaaaayaa\");\r\n    try {\r\n        sb.replace(StrMatcher.stringMatcher(\"aa\"), \"-\", -1, sb.length(), -1);\r\n        fail(\"Exception expected!\");\r\n    } catch (final IndexOutOfBoundsException ex) {\r\n        // expected\r\n    }\r\n    assertEquals(\"aaxaaaayaa\", sb.toString());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\StrBuilderTest.java",
  "methodName" : "testReplaceAll_char_char",
  "sourceCode" : "@Test\r\nvoid testReplaceAll_char_char() {\r\n    final StrBuilder sb = new StrBuilder(\"abcbccba\");\r\n    sb.replaceAll('x', 'y');\r\n    assertEquals(\"abcbccba\", sb.toString());\r\n    sb.replaceAll('a', 'd');\r\n    assertEquals(\"dbcbccbd\", sb.toString());\r\n    sb.replaceAll('b', 'e');\r\n    assertEquals(\"dececced\", sb.toString());\r\n    sb.replaceAll('c', 'f');\r\n    assertEquals(\"defeffed\", sb.toString());\r\n    sb.replaceAll('d', 'd');\r\n    assertEquals(\"defeffed\", sb.toString());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\StrBuilderTest.java",
  "methodName" : "testReplaceAll_String_String",
  "sourceCode" : "@Test\r\nvoid testReplaceAll_String_String() {\r\n    StrBuilder sb = new StrBuilder(\"abcbccba\");\r\n    sb.replaceAll((String) null, null);\r\n    assertEquals(\"abcbccba\", sb.toString());\r\n    sb.replaceAll((String) null, \"anything\");\r\n    assertEquals(\"abcbccba\", sb.toString());\r\n    sb.replaceAll(\"\", null);\r\n    assertEquals(\"abcbccba\", sb.toString());\r\n    sb.replaceAll(\"\", \"anything\");\r\n    assertEquals(\"abcbccba\", sb.toString());\r\n    sb.replaceAll(\"x\", \"y\");\r\n    assertEquals(\"abcbccba\", sb.toString());\r\n    sb.replaceAll(\"a\", \"d\");\r\n    assertEquals(\"dbcbccbd\", sb.toString());\r\n    sb.replaceAll(\"d\", null);\r\n    assertEquals(\"bcbccb\", sb.toString());\r\n    sb.replaceAll(\"cb\", \"-\");\r\n    assertEquals(\"b-c-\", sb.toString());\r\n    sb = new StrBuilder(\"abcba\");\r\n    sb.replaceAll(\"b\", \"xbx\");\r\n    assertEquals(\"axbxcxbxa\", sb.toString());\r\n    sb = new StrBuilder(\"bb\");\r\n    sb.replaceAll(\"b\", \"xbx\");\r\n    assertEquals(\"xbxxbx\", sb.toString());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\StrBuilderTest.java",
  "methodName" : "testReplaceAll_StrMatcher_String",
  "sourceCode" : "@Test\r\nvoid testReplaceAll_StrMatcher_String() {\r\n    StrBuilder sb = new StrBuilder(\"abcbccba\");\r\n    sb.replaceAll((StrMatcher) null, null);\r\n    assertEquals(\"abcbccba\", sb.toString());\r\n    sb.replaceAll((StrMatcher) null, \"anything\");\r\n    assertEquals(\"abcbccba\", sb.toString());\r\n    sb.replaceAll(StrMatcher.noneMatcher(), null);\r\n    assertEquals(\"abcbccba\", sb.toString());\r\n    sb.replaceAll(StrMatcher.noneMatcher(), \"anything\");\r\n    assertEquals(\"abcbccba\", sb.toString());\r\n    sb.replaceAll(StrMatcher.charMatcher('x'), \"y\");\r\n    assertEquals(\"abcbccba\", sb.toString());\r\n    sb.replaceAll(StrMatcher.charMatcher('a'), \"d\");\r\n    assertEquals(\"dbcbccbd\", sb.toString());\r\n    sb.replaceAll(StrMatcher.charMatcher('d'), null);\r\n    assertEquals(\"bcbccb\", sb.toString());\r\n    sb.replaceAll(StrMatcher.stringMatcher(\"cb\"), \"-\");\r\n    assertEquals(\"b-c-\", sb.toString());\r\n    sb = new StrBuilder(\"abcba\");\r\n    sb.replaceAll(StrMatcher.charMatcher('b'), \"xbx\");\r\n    assertEquals(\"axbxcxbxa\", sb.toString());\r\n    sb = new StrBuilder(\"bb\");\r\n    sb.replaceAll(StrMatcher.charMatcher('b'), \"xbx\");\r\n    assertEquals(\"xbxxbx\", sb.toString());\r\n    sb = new StrBuilder(\"A1-A2A3-A4\");\r\n    sb.replaceAll(A_NUMBER_MATCHER, \"***\");\r\n    assertEquals(\"***-******-***\", sb.toString());\r\n    sb = new StrBuilder(\"Dear X, hello X.\");\r\n    sb.replaceAll(StrMatcher.stringMatcher(\"X\"), \"012345678901234567\");\r\n    assertEquals(\"Dear 012345678901234567, hello 012345678901234567.\", sb.toString());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\StrBuilderTest.java",
  "methodName" : "testReplaceFirst_char_char",
  "sourceCode" : "@Test\r\nvoid testReplaceFirst_char_char() {\r\n    final StrBuilder sb = new StrBuilder(\"abcbccba\");\r\n    sb.replaceFirst('x', 'y');\r\n    assertEquals(\"abcbccba\", sb.toString());\r\n    sb.replaceFirst('a', 'd');\r\n    assertEquals(\"dbcbccba\", sb.toString());\r\n    sb.replaceFirst('b', 'e');\r\n    assertEquals(\"decbccba\", sb.toString());\r\n    sb.replaceFirst('c', 'f');\r\n    assertEquals(\"defbccba\", sb.toString());\r\n    sb.replaceFirst('d', 'd');\r\n    assertEquals(\"defbccba\", sb.toString());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\StrBuilderTest.java",
  "methodName" : "testReplaceFirst_String_String",
  "sourceCode" : "@Test\r\nvoid testReplaceFirst_String_String() {\r\n    StrBuilder sb = new StrBuilder(\"abcbccba\");\r\n    sb.replaceFirst((String) null, null);\r\n    assertEquals(\"abcbccba\", sb.toString());\r\n    sb.replaceFirst((String) null, \"anything\");\r\n    assertEquals(\"abcbccba\", sb.toString());\r\n    sb.replaceFirst(\"\", null);\r\n    assertEquals(\"abcbccba\", sb.toString());\r\n    sb.replaceFirst(\"\", \"anything\");\r\n    assertEquals(\"abcbccba\", sb.toString());\r\n    sb.replaceFirst(\"x\", \"y\");\r\n    assertEquals(\"abcbccba\", sb.toString());\r\n    sb.replaceFirst(\"a\", \"d\");\r\n    assertEquals(\"dbcbccba\", sb.toString());\r\n    sb.replaceFirst(\"d\", null);\r\n    assertEquals(\"bcbccba\", sb.toString());\r\n    sb.replaceFirst(\"cb\", \"-\");\r\n    assertEquals(\"b-ccba\", sb.toString());\r\n    sb = new StrBuilder(\"abcba\");\r\n    sb.replaceFirst(\"b\", \"xbx\");\r\n    assertEquals(\"axbxcba\", sb.toString());\r\n    sb = new StrBuilder(\"bb\");\r\n    sb.replaceFirst(\"b\", \"xbx\");\r\n    assertEquals(\"xbxb\", sb.toString());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\StrBuilderTest.java",
  "methodName" : "testReplaceFirst_StrMatcher_String",
  "sourceCode" : "@Test\r\nvoid testReplaceFirst_StrMatcher_String() {\r\n    StrBuilder sb = new StrBuilder(\"abcbccba\");\r\n    sb.replaceFirst((StrMatcher) null, null);\r\n    assertEquals(\"abcbccba\", sb.toString());\r\n    sb.replaceFirst((StrMatcher) null, \"anything\");\r\n    assertEquals(\"abcbccba\", sb.toString());\r\n    sb.replaceFirst(StrMatcher.noneMatcher(), null);\r\n    assertEquals(\"abcbccba\", sb.toString());\r\n    sb.replaceFirst(StrMatcher.noneMatcher(), \"anything\");\r\n    assertEquals(\"abcbccba\", sb.toString());\r\n    sb.replaceFirst(StrMatcher.charMatcher('x'), \"y\");\r\n    assertEquals(\"abcbccba\", sb.toString());\r\n    sb.replaceFirst(StrMatcher.charMatcher('a'), \"d\");\r\n    assertEquals(\"dbcbccba\", sb.toString());\r\n    sb.replaceFirst(StrMatcher.charMatcher('d'), null);\r\n    assertEquals(\"bcbccba\", sb.toString());\r\n    sb.replaceFirst(StrMatcher.stringMatcher(\"cb\"), \"-\");\r\n    assertEquals(\"b-ccba\", sb.toString());\r\n    sb = new StrBuilder(\"abcba\");\r\n    sb.replaceFirst(StrMatcher.charMatcher('b'), \"xbx\");\r\n    assertEquals(\"axbxcba\", sb.toString());\r\n    sb = new StrBuilder(\"bb\");\r\n    sb.replaceFirst(StrMatcher.charMatcher('b'), \"xbx\");\r\n    assertEquals(\"xbxb\", sb.toString());\r\n    sb = new StrBuilder(\"A1-A2A3-A4\");\r\n    sb.replaceFirst(A_NUMBER_MATCHER, \"***\");\r\n    assertEquals(\"***-A2A3-A4\", sb.toString());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\StrBuilderTest.java",
  "methodName" : "testReverse",
  "sourceCode" : "@Test\r\nvoid testReverse() {\r\n    final StrBuilder sb = new StrBuilder();\r\n    assertEquals(\"\", sb.reverse().toString());\r\n    sb.clear().append(true);\r\n    assertEquals(\"eurt\", sb.reverse().toString());\r\n    assertEquals(\"true\", sb.reverse().toString());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\StrBuilderTest.java",
  "methodName" : "testRightString",
  "sourceCode" : "@Test\r\nvoid testRightString() {\r\n    final StrBuilder sb = new StrBuilder(\"left right\");\r\n    assertEquals(\"right\", sb.rightString(5));\r\n    assertEquals(\"\", sb.rightString(0));\r\n    assertEquals(\"\", sb.rightString(-5));\r\n    assertEquals(\"left right\", sb.rightString(15));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\StrBuilderTest.java",
  "methodName" : "testSetCharAt",
  "sourceCode" : "@Test\r\nvoid testSetCharAt() {\r\n    final StrBuilder sb = new StrBuilder();\r\n    assertThrows(IndexOutOfBoundsException.class, () -> sb.setCharAt(0, 'f'));\r\n    assertThrows(IndexOutOfBoundsException.class, () -> sb.setCharAt(-1, 'f'));\r\n    sb.append(\"foo\");\r\n    sb.setCharAt(0, 'b');\r\n    sb.setCharAt(1, 'a');\r\n    sb.setCharAt(2, 'r');\r\n    assertThrows(IndexOutOfBoundsException.class, () -> sb.setCharAt(3, '!'));\r\n    assertEquals(\"bar\", sb.toString());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\StrBuilderTest.java",
  "methodName" : "testSetLength",
  "sourceCode" : "@Test\r\nvoid testSetLength() {\r\n    final StrBuilder sb = new StrBuilder();\r\n    sb.append(\"Hello\");\r\n    // shorten\r\n    sb.setLength(2);\r\n    assertEquals(\"He\", sb.toString());\r\n    // no change\r\n    sb.setLength(2);\r\n    assertEquals(\"He\", sb.toString());\r\n    // lengthen\r\n    sb.setLength(3);\r\n    assertEquals(\"He\\0\", sb.toString());\r\n    assertThrows(IndexOutOfBoundsException.class, () -> sb.setLength(-1));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\StrBuilderTest.java",
  "methodName" : "testSize",
  "sourceCode" : "@Test\r\nvoid testSize() {\r\n    final StrBuilder sb = new StrBuilder();\r\n    assertEquals(0, sb.size());\r\n    sb.append(\"Hello\");\r\n    assertEquals(5, sb.size());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\StrBuilderTest.java",
  "methodName" : "testStartsWith",
  "sourceCode" : "@Test\r\nvoid testStartsWith() {\r\n    final StrBuilder sb = new StrBuilder();\r\n    assertFalse(sb.startsWith(\"a\"));\r\n    assertFalse(sb.startsWith(null));\r\n    assertTrue(sb.startsWith(\"\"));\r\n    sb.append(\"abc\");\r\n    assertTrue(sb.startsWith(\"a\"));\r\n    assertTrue(sb.startsWith(\"ab\"));\r\n    assertTrue(sb.startsWith(\"abc\"));\r\n    assertFalse(sb.startsWith(\"cba\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\StrBuilderTest.java",
  "methodName" : "testSubSequenceIntInt",
  "sourceCode" : "@Test\r\nvoid testSubSequenceIntInt() {\r\n    final StrBuilder sb = new StrBuilder(\"hello goodbye\");\r\n    // Start index is negative\r\n    assertThrows(IndexOutOfBoundsException.class, () -> sb.subSequence(-1, 5));\r\n    // End index is negative\r\n    assertThrows(IndexOutOfBoundsException.class, () -> sb.subSequence(2, -1));\r\n    // End index greater than length()\r\n    assertThrows(IndexOutOfBoundsException.class, () -> sb.subSequence(2, sb.length() + 1));\r\n    // Start index greater then end index\r\n    assertThrows(IndexOutOfBoundsException.class, () -> sb.subSequence(3, 2));\r\n    // Normal cases\r\n    assertEquals(\"hello\", sb.subSequence(0, 5));\r\n    assertEquals(\"hello goodbye\".subSequence(0, 6), sb.subSequence(0, 6));\r\n    assertEquals(\"goodbye\", sb.subSequence(6, 13));\r\n    assertEquals(\"hello goodbye\".subSequence(6, 13), sb.subSequence(6, 13));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\StrBuilderTest.java",
  "methodName" : "testSubstringInt",
  "sourceCode" : "@Test\r\nvoid testSubstringInt() {\r\n    final StrBuilder sb = new StrBuilder(\"hello goodbye\");\r\n    assertEquals(\"goodbye\", sb.substring(6));\r\n    assertEquals(\"hello goodbye\".substring(6), sb.substring(6));\r\n    assertEquals(\"hello goodbye\", sb.substring(0));\r\n    assertEquals(\"hello goodbye\".substring(0), sb.substring(0));\r\n    assertThrows(IndexOutOfBoundsException.class, () -> sb.substring(-1));\r\n    assertThrows(IndexOutOfBoundsException.class, () -> sb.substring(15));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\StrBuilderTest.java",
  "methodName" : "testSubstringIntInt",
  "sourceCode" : "@Test\r\nvoid testSubstringIntInt() {\r\n    final StrBuilder sb = new StrBuilder(\"hello goodbye\");\r\n    assertEquals(\"hello\", sb.substring(0, 5));\r\n    assertEquals(\"hello goodbye\".substring(0, 6), sb.substring(0, 6));\r\n    assertEquals(\"goodbye\", sb.substring(6, 13));\r\n    assertEquals(\"hello goodbye\".substring(6, 13), sb.substring(6, 13));\r\n    assertEquals(\"goodbye\", sb.substring(6, 20));\r\n    assertThrows(IndexOutOfBoundsException.class, () -> sb.substring(-1, 5));\r\n    assertThrows(IndexOutOfBoundsException.class, () -> sb.substring(15, 20));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\StrBuilderTest.java",
  "methodName" : "testToCharArray",
  "sourceCode" : "@Test\r\nvoid testToCharArray() {\r\n    final StrBuilder sb = new StrBuilder();\r\n    assertEquals(0, sb.toCharArray().length);\r\n    char[] a = sb.toCharArray();\r\n    assertNotNull(a, \"toCharArray() result is null\");\r\n    assertEquals(0, a.length, \"toCharArray() result is too large\");\r\n    sb.append(\"junit\");\r\n    a = sb.toCharArray();\r\n    assertEquals(5, a.length, \"toCharArray() result incorrect length\");\r\n    assertArrayEquals(\"junit\".toCharArray(), a, \"toCharArray() result does not match\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\StrBuilderTest.java",
  "methodName" : "testToCharArrayIntInt",
  "sourceCode" : "@Test\r\nvoid testToCharArrayIntInt() {\r\n    final StrBuilder sb = new StrBuilder();\r\n    assertEquals(0, sb.toCharArray(0, 0).length);\r\n    sb.append(\"junit\");\r\n    // too large test\r\n    char[] a = sb.toCharArray(0, 20);\r\n    assertEquals(5, a.length, \"toCharArray(int,int) result incorrect length\");\r\n    assertArrayEquals(\"junit\".toCharArray(), a, \"toCharArray(int,int) result does not match\");\r\n    a = sb.toCharArray(0, 4);\r\n    assertEquals(4, a.length, \"toCharArray(int,int) result incorrect length\");\r\n    assertArrayEquals(\"juni\".toCharArray(), a, \"toCharArray(int,int) result does not match\");\r\n    a = sb.toCharArray(0, 4);\r\n    assertEquals(4, a.length, \"toCharArray(int,int) result incorrect length\");\r\n    assertArrayEquals(\"juni\".toCharArray(), a, \"toCharArray(int,int) result does not match\");\r\n    a = sb.toCharArray(0, 1);\r\n    assertNotNull(a, \"toCharArray(int,int) result is null\");\r\n    assertThrows(IndexOutOfBoundsException.class, () -> sb.toCharArray(-1, 5));\r\n    assertThrows(IndexOutOfBoundsException.class, () -> sb.toCharArray(6, 5));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\StrBuilderTest.java",
  "methodName" : "testToString",
  "sourceCode" : "@Test\r\nvoid testToString() {\r\n    final StrBuilder sb = new StrBuilder(\"abc\");\r\n    assertEquals(\"abc\", sb.toString());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\StrBuilderTest.java",
  "methodName" : "testToStringBuffer",
  "sourceCode" : "@Test\r\nvoid testToStringBuffer() {\r\n    final StrBuilder sb = new StrBuilder();\r\n    assertEquals(new StringBuffer().toString(), sb.toStringBuffer().toString());\r\n    sb.append(\"junit\");\r\n    assertEquals(new StringBuffer(\"junit\").toString(), sb.toStringBuffer().toString());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\StrBuilderTest.java",
  "methodName" : "testToStringBuilder",
  "sourceCode" : "@Test\r\nvoid testToStringBuilder() {\r\n    final StrBuilder sb = new StrBuilder();\r\n    assertEquals(new StringBuilder().toString(), sb.toStringBuilder().toString());\r\n    sb.append(\"junit\");\r\n    assertEquals(new StringBuilder(\"junit\").toString(), sb.toStringBuilder().toString());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\StrBuilderTest.java",
  "methodName" : "testTrim",
  "sourceCode" : "@Test\r\nvoid testTrim() {\r\n    final StrBuilder sb = new StrBuilder();\r\n    assertEquals(\"\", sb.reverse().toString());\r\n    sb.clear().append(\" \\u0000 \");\r\n    assertEquals(\"\", sb.trim().toString());\r\n    sb.clear().append(\" \\u0000 a b c\");\r\n    assertEquals(\"a b c\", sb.trim().toString());\r\n    sb.clear().append(\"a b c \\u0000 \");\r\n    assertEquals(\"a b c\", sb.trim().toString());\r\n    sb.clear().append(\" \\u0000 a b c \\u0000 \");\r\n    assertEquals(\"a b c\", sb.trim().toString());\r\n    sb.clear().append(\"a b c\");\r\n    assertEquals(\"a b c\", sb.trim().toString());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\StringEscapeUtilsTest.java",
  "methodName" : "testBuilder",
  "sourceCode" : "@Test\r\nvoid testBuilder() {\r\n    final String result = StringEscapeUtils.builder(StringEscapeUtils.ESCAPE_XML10).escape(\"<\").append(\">\").toString();\r\n    assertEquals(\"&lt;>\", result);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\StringEscapeUtilsTest.java",
  "methodName" : "testConstructor",
  "sourceCode" : "@Test\r\nvoid testConstructor() {\r\n    assertNotNull(new StringEscapeUtils());\r\n    final Constructor<?>[] cons = StringEscapeUtils.class.getDeclaredConstructors();\r\n    assertEquals(1, cons.length);\r\n    assertTrue(Modifier.isPublic(cons[0].getModifiers()));\r\n    assertTrue(Modifier.isPublic(StringEscapeUtils.class.getModifiers()));\r\n    assertFalse(Modifier.isFinal(StringEscapeUtils.class.getModifiers()));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\StringEscapeUtilsTest.java",
  "methodName" : "testDeleteCharacter",
  "sourceCode" : "// HTML and XML\r\n@Test\r\nvoid testDeleteCharacter() {\r\n    final String deleteString = \"Delete: \\u007F\";\r\n    assertEquals(\"Delete: \\\\u007F\", StringEscapeUtils.escapeJson(deleteString));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\StringEscapeUtilsTest.java",
  "methodName" : "testEscapeCsvString",
  "sourceCode" : "@Test\r\nvoid testEscapeCsvString() {\r\n    assertEquals(\"foo.bar\", StringEscapeUtils.escapeCsv(\"foo.bar\"));\r\n    assertEquals(\"\\\"foo,bar\\\"\", StringEscapeUtils.escapeCsv(\"foo,bar\"));\r\n    assertEquals(\"\\\"foo\\nbar\\\"\", StringEscapeUtils.escapeCsv(\"foo\\nbar\"));\r\n    assertEquals(\"\\\"foo\\rbar\\\"\", StringEscapeUtils.escapeCsv(\"foo\\rbar\"));\r\n    assertEquals(\"\\\"foo\\\"\\\"bar\\\"\", StringEscapeUtils.escapeCsv(\"foo\\\"bar\"));\r\n    assertEquals(\"foo\\uD84C\\uDFB4bar\", StringEscapeUtils.escapeCsv(\"foo\\uD84C\\uDFB4bar\"));\r\n    assertEquals(\"\", StringEscapeUtils.escapeCsv(\"\"));\r\n    assertNull(StringEscapeUtils.escapeCsv(null));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\StringEscapeUtilsTest.java",
  "methodName" : "testEscapeCsvWriter",
  "sourceCode" : "@Test\r\nvoid testEscapeCsvWriter() throws IOException {\r\n    checkCsvEscapeWriter(\"foo.bar\", \"foo.bar\");\r\n    checkCsvEscapeWriter(\"\\\"foo,bar\\\"\", \"foo,bar\");\r\n    checkCsvEscapeWriter(\"\\\"foo\\nbar\\\"\", \"foo\\nbar\");\r\n    checkCsvEscapeWriter(\"\\\"foo\\rbar\\\"\", \"foo\\rbar\");\r\n    checkCsvEscapeWriter(\"\\\"foo\\\"\\\"bar\\\"\", \"foo\\\"bar\");\r\n    checkCsvEscapeWriter(\"foo\\uD84C\\uDFB4bar\", \"foo\\uD84C\\uDFB4bar\");\r\n    checkCsvEscapeWriter(\"\", null);\r\n    checkCsvEscapeWriter(\"\", \"\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\StringEscapeUtilsTest.java",
  "methodName" : "testEscapeEcmaScript",
  "sourceCode" : "@Test\r\nvoid testEscapeEcmaScript() {\r\n    assertNull(StringEscapeUtils.escapeEcmaScript(null));\r\n    try {\r\n        StringEscapeUtils.ESCAPE_ECMASCRIPT.translate(null, null);\r\n        fail(\"Exception expected!\");\r\n    } catch (final IOException ex) {\r\n        fail(\"Exception expected!\");\r\n    } catch (final IllegalArgumentException ex) {\r\n        // expected\r\n    }\r\n    try {\r\n        StringEscapeUtils.ESCAPE_ECMASCRIPT.translate(\"\", null);\r\n        fail(\"Exception expected!\");\r\n    } catch (final IOException ex) {\r\n        fail(\"Exception expected!\");\r\n    } catch (final IllegalArgumentException ex) {\r\n        // expected\r\n    }\r\n    assertEquals(\"He didn\\\\'t say, \\\\\\\"stop!\\\\\\\"\", StringEscapeUtils.escapeEcmaScript(\"He didn't say, \\\"stop!\\\"\"));\r\n    assertEquals(\"document.getElementById(\\\\\\\"test\\\\\\\").value = \\\\'<script>alert(\\\\'aaa\\\\');<\\\\/script>\\\\';\", StringEscapeUtils.escapeEcmaScript(\"document.getElementById(\\\"test\\\").value = '<script>alert('aaa');</script>';\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\StringEscapeUtilsTest.java",
  "methodName" : "testEscapeHiragana",
  "sourceCode" : "/**\r\n * Tests https://issues.apache.org/jira/browse/LANG-339\r\n */\r\n@Test\r\nvoid testEscapeHiragana() {\r\n    // Some random Japanese Unicode characters\r\n    final String original = \"\\u304B\\u304C\\u3068\";\r\n    final String escaped = StringEscapeUtils.escapeHtml4(original);\r\n    assertEquals(original, escaped, \"Hiragana character Unicode behavior should not be being escaped by escapeHtml4\");\r\n    final String unescaped = StringEscapeUtils.unescapeHtml4(escaped);\r\n    assertEquals(escaped, unescaped, \"Hiragana character Unicode behavior has changed - expected no unescaping\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\StringEscapeUtilsTest.java",
  "methodName" : "testEscapeHtml3",
  "sourceCode" : "@Test\r\nvoid testEscapeHtml3() {\r\n    for (final String[] element : HTML_ESCAPES) {\r\n        final String message = element[0];\r\n        final String expected = element[1];\r\n        final String original = element[2];\r\n        assertEquals(expected, StringEscapeUtils.escapeHtml4(original), message);\r\n        final StringWriter sw = new StringWriter();\r\n        try {\r\n            StringEscapeUtils.ESCAPE_HTML3.translate(original, sw);\r\n        } catch (final IOException e) {\r\n            // expected\r\n        }\r\n        final String actual = original == null ? null : sw.toString();\r\n        assertEquals(expected, actual, message);\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\StringEscapeUtilsTest.java",
  "methodName" : "testEscapeHtml4",
  "sourceCode" : "@Test\r\nvoid testEscapeHtml4() {\r\n    for (final String[] element : HTML_ESCAPES) {\r\n        final String message = element[0];\r\n        final String expected = element[1];\r\n        final String original = element[2];\r\n        assertEquals(expected, StringEscapeUtils.escapeHtml4(original), message);\r\n        final StringWriter sw = new StringWriter();\r\n        try {\r\n            StringEscapeUtils.ESCAPE_HTML4.translate(original, sw);\r\n        } catch (final IOException e) {\r\n            // expected\r\n        }\r\n        final String actual = original == null ? null : sw.toString();\r\n        assertEquals(expected, actual, message);\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\StringEscapeUtilsTest.java",
  "methodName" : "testEscapeHtmlHighUnicode",
  "sourceCode" : "/**\r\n * Tests // https://issues.apache.org/jira/browse/LANG-480\r\n */\r\n@Test\r\nvoid testEscapeHtmlHighUnicode() {\r\n    // this is the utf8 representation of the character:\r\n    // COUNTING ROD UNIT DIGIT THREE\r\n    // in Unicode\r\n    // code point: U+1D362\r\n    final byte[] data = { (byte) 0xF0, (byte) 0x9D, (byte) 0x8D, (byte) 0xA2 };\r\n    final String original = new String(data, StandardCharsets.UTF_8);\r\n    final String escaped = StringEscapeUtils.escapeHtml4(original);\r\n    assertEquals(original, escaped, \"High Unicode should not have been escaped\");\r\n    final String unescaped = StringEscapeUtils.unescapeHtml4(escaped);\r\n    assertEquals(original, unescaped, \"High Unicode should have been unchanged\");\r\n    // TODO: I think this should hold, needs further investigation\r\n    // String unescapedFromEntity = StringEscapeUtils.unescapeHtml4(\"&#119650;\");\r\n    // assertEquals(\"High Unicode should have been unescaped\", original, unescapedFromEntity);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\StringEscapeUtilsTest.java",
  "methodName" : "testEscapeHtmlThree",
  "sourceCode" : "@Test\r\nvoid testEscapeHtmlThree() {\r\n    assertNull(StringEscapeUtils.escapeHtml3(null));\r\n    assertEquals(\"a\", StringEscapeUtils.escapeHtml3(\"a\"));\r\n    assertEquals(\"&lt;b&gt;a\", StringEscapeUtils.escapeHtml3(\"<b>a\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\StringEscapeUtilsTest.java",
  "methodName" : "testEscapeHtmlVersions",
  "sourceCode" : "@Test\r\nvoid testEscapeHtmlVersions() {\r\n    assertEquals(\"&Beta;\", StringEscapeUtils.escapeHtml4(\"\\u0392\"));\r\n    assertEquals(\"\\u0392\", StringEscapeUtils.unescapeHtml4(\"&Beta;\"));\r\n    // TODO: refine API for escaping/unescaping specific HTML versions\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\StringEscapeUtilsTest.java",
  "methodName" : "testEscapeJava",
  "sourceCode" : "@Test\r\nvoid testEscapeJava() throws IOException {\r\n    assertNull(StringEscapeUtils.escapeJava(null));\r\n    try {\r\n        StringEscapeUtils.ESCAPE_JAVA.translate(null, null);\r\n        fail(\"Exception expected!\");\r\n    } catch (final IOException ex) {\r\n        fail(\"Exception expected!\");\r\n    } catch (final IllegalArgumentException ex) {\r\n        // expected\r\n    }\r\n    try {\r\n        StringEscapeUtils.ESCAPE_JAVA.translate(\"\", null);\r\n        fail(\"Exception expected!\");\r\n    } catch (final IOException ex) {\r\n        fail(\"Exception expected!\");\r\n    } catch (final IllegalArgumentException ex) {\r\n        // expected\r\n    }\r\n    assertEscapeJava(\"\", \"\", \"empty string\");\r\n    assertEscapeJava(FOO, FOO);\r\n    assertEscapeJava(\"\\\\t\", \"\\t\", \"tab\");\r\n    assertEscapeJava(\"\\\\\\\\\", \"\\\\\", \"backslash\");\r\n    assertEscapeJava(\"'\", \"'\", \"single quote should not be escaped\");\r\n    assertEscapeJava(\"\\\\\\\\\\\\b\\\\t\\\\r\", \"\\\\\\b\\t\\r\");\r\n    assertEscapeJava(\"\\\\u1234\", \"\\u1234\");\r\n    assertEscapeJava(\"\\\\u0234\", \"\\u0234\");\r\n    assertEscapeJava(\"\\\\u00EF\", \"\\u00ef\");\r\n    assertEscapeJava(\"\\\\u0001\", \"\\u0001\");\r\n    assertEscapeJava(\"\\\\uABCD\", \"\\uabcd\", \"Should use capitalized Unicode hex\");\r\n    assertEscapeJava(\"He didn't say, \\\\\\\"stop!\\\\\\\"\", \"He didn't say, \\\"stop!\\\"\");\r\n    assertEscapeJava(\"This space is non-breaking:\\\\u00A0\", \"This space is non-breaking:\\u00a0\", \"non-breaking space\");\r\n    assertEscapeJava(\"\\\\uABCD\\\\u1234\\\\u012C\", \"\\uABCD\\u1234\\u012C\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\StringEscapeUtilsTest.java",
  "methodName" : "testEscapeJavaWithSlash",
  "sourceCode" : "/**\r\n * Tests https://issues.apache.org/jira/browse/LANG-421\r\n */\r\n@Test\r\nvoid testEscapeJavaWithSlash() {\r\n    final String input = \"String with a slash (/) in it\";\r\n    final String actual = StringEscapeUtils.escapeJava(input);\r\n    /*\r\n         * In 2.4 StringEscapeUtils.escapeJava(String) escapes '/' characters, which are not a valid character to escape in a Java string.\r\n         */\r\n    assertEquals(input, actual);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\StringEscapeUtilsTest.java",
  "methodName" : "testEscapeJson",
  "sourceCode" : "@Test\r\nvoid testEscapeJson() {\r\n    assertNull(StringEscapeUtils.escapeJson(null));\r\n    try {\r\n        StringEscapeUtils.ESCAPE_JSON.translate(null, null);\r\n        fail(\"Exception expected!\");\r\n    } catch (final IOException ex) {\r\n        fail(\"Exception expected!\");\r\n    } catch (final IllegalArgumentException ex) {\r\n        // expected\r\n    }\r\n    try {\r\n        StringEscapeUtils.ESCAPE_JSON.translate(\"\", null);\r\n        fail(\"Exception expected!\");\r\n    } catch (final IOException ex) {\r\n        fail(\"Exception expected!\");\r\n    } catch (final IllegalArgumentException ex) {\r\n        // expected\r\n    }\r\n    assertEquals(\"He didn't say, \\\\\\\"stop!\\\\\\\"\", StringEscapeUtils.escapeJson(\"He didn't say, \\\"stop!\\\"\"));\r\n    final String expected = \"\\\\\\\"foo\\\\\\\" isn't \\\\\\\"bar\\\\\\\". specials: \\\\b\\\\r\\\\n\\\\f\\\\t\\\\\\\\\\\\/\";\r\n    final String input = \"\\\"foo\\\" isn't \\\"bar\\\". specials: \\b\\r\\n\\f\\t\\\\/\";\r\n    assertEquals(expected, StringEscapeUtils.escapeJson(input));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\StringEscapeUtilsTest.java",
  "methodName" : "testEscapeXml10",
  "sourceCode" : "@Test\r\nvoid testEscapeXml10() {\r\n    assertEquals(\"a&lt;b&gt;c&quot;d&apos;e&amp;f\", StringEscapeUtils.escapeXml10(\"a<b>c\\\"d'e&f\"));\r\n    assertEquals(\"a\\tb\\rc\\nd\", StringEscapeUtils.escapeXml10(\"a\\tb\\rc\\nd\"), \"XML 1.0 should not escape \\t \\n \\r\");\r\n    assertEquals(\"ab\", StringEscapeUtils.escapeXml10(\"a\\u0000\\u0001\\u0008\\u000b\\u000c\\u000e\\u001fb\"), \"XML 1.0 should omit most #x0-x8 | #xb | #xc | #xe-#x19\");\r\n    assertEquals(\"a\\ud7ff  \\ue000b\", StringEscapeUtils.escapeXml10(\"a\\ud7ff\\ud800 \\udfff \\ue000b\"), \"XML 1.0 should omit #xd800-#xdfff\");\r\n    assertEquals(\"a\\ufffdb\", StringEscapeUtils.escapeXml10(\"a\\ufffd\\ufffe\\uffffb\"), \"XML 1.0 should omit #xfffe | #xffff\");\r\n    assertEquals(\"a\\u007e&#127;&#132;\\u0085&#134;&#159;\\u00a0b\", StringEscapeUtils.escapeXml10(\"a\\u007e\\u007f\\u0084\\u0085\\u0086\\u009f\\u00a0b\"), \"XML 1.0 should escape #x7f-#x84 | #x86 - #x9f, for XML 1.1 compatibility\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\StringEscapeUtilsTest.java",
  "methodName" : "testEscapeXml11",
  "sourceCode" : "@Test\r\nvoid testEscapeXml11() {\r\n    assertEquals(\"a&lt;b&gt;c&quot;d&apos;e&amp;f\", StringEscapeUtils.escapeXml11(\"a<b>c\\\"d'e&f\"));\r\n    assertEquals(\"a\\tb\\rc\\nd\", StringEscapeUtils.escapeXml11(\"a\\tb\\rc\\nd\"), \"XML 1.1 should not escape \\t \\n \\r\");\r\n    assertEquals(\"ab\", StringEscapeUtils.escapeXml11(\"a\\u0000b\"), \"XML 1.1 should omit #x0\");\r\n    assertEquals(\"a&#1;&#8;&#11;&#12;&#14;&#31;b\", StringEscapeUtils.escapeXml11(\"a\\u0001\\u0008\\u000b\\u000c\\u000e\\u001fb\"), \"XML 1.1 should escape #x1-x8 | #xb | #xc | #xe-#x19\");\r\n    assertEquals(\"a\\u007e&#127;&#132;\\u0085&#134;&#159;\\u00a0b\", StringEscapeUtils.escapeXml11(\"a\\u007e\\u007f\\u0084\\u0085\\u0086\\u009f\\u00a0b\"), \"XML 1.1 should escape #x7F-#x84 | #x86-#x9F\");\r\n    assertEquals(\"a\\ud7ff  \\ue000b\", StringEscapeUtils.escapeXml11(\"a\\ud7ff\\ud800 \\udfff \\ue000b\"), \"XML 1.1 should omit #xd800-#xdfff\");\r\n    assertEquals(\"a\\ufffdb\", StringEscapeUtils.escapeXml11(\"a\\ufffd\\ufffe\\uffffb\"), \"XML 1.1 should omit #xfffe | #xffff\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\StringEscapeUtilsTest.java",
  "methodName" : "testEscapeXSI",
  "sourceCode" : "@Test\r\nvoid testEscapeXSI() {\r\n    assertNull(null, escapeXSI(null));\r\n    assertEquals(\"He\\\\ didn\\\\'t\\\\ say,\\\\ \\\\\\\"Stop!\\\\\\\"\", escapeXSI(\"He didn't say, \\\"Stop!\\\"\"));\r\n    assertEquals(\"\\\\\\\\\", escapeXSI(\"\\\\\"));\r\n    assertEquals(\"\", escapeXSI(\"\\n\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\StringEscapeUtilsTest.java",
  "methodName" : "testLang313",
  "sourceCode" : "@Test\r\nvoid testLang313() {\r\n    assertEquals(\"& &\", StringEscapeUtils.unescapeHtml4(\"& &amp;\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\StringEscapeUtilsTest.java",
  "methodName" : "testLang708",
  "sourceCode" : "/**\r\n * Tests https://issues.apache.org/jira/browse/LANG-708\r\n *\r\n * @throws IOException if an I/O error occurs\r\n */\r\n@Test\r\nvoid testLang708() throws IOException {\r\n    final byte[] inputBytes = Files.readAllBytes(Paths.get(\"src/test/resources/org/apache/commons/text/stringEscapeUtilsTestData.txt\"));\r\n    final String input = new String(inputBytes, StandardCharsets.UTF_8);\r\n    final String escaped = StringEscapeUtils.escapeEcmaScript(input);\r\n    // just the end:\r\n    assertTrue(escaped.endsWith(\"}]\"), escaped);\r\n    // a little more:\r\n    assertTrue(escaped.endsWith(\"\\\"valueCode\\\\\\\":\\\\\\\"\\\\\\\"}]\"), escaped);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\StringEscapeUtilsTest.java",
  "methodName" : "testLang911",
  "sourceCode" : "/**\r\n * Tests https://issues.apache.org/jira/browse/LANG-911\r\n */\r\n@Test\r\nvoid testLang911() {\r\n    final String bellsTest = \"\\ud83d\\udc80\\ud83d\\udd14\";\r\n    final String value = StringEscapeUtils.escapeJava(bellsTest);\r\n    final String valueTest = StringEscapeUtils.unescapeJava(value);\r\n    assertEquals(bellsTest, valueTest);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\StringEscapeUtilsTest.java",
  "methodName" : "testStandaloneAmphersand",
  "sourceCode" : "// Tests issue #38569\r\n// https://issues.apache.org/bugzilla/show_bug.cgi?id=38569\r\n@Test\r\nvoid testStandaloneAmphersand() {\r\n    assertEquals(\"<P&O>\", StringEscapeUtils.unescapeHtml4(\"&lt;P&O&gt;\"));\r\n    assertEquals(\"test & <\", StringEscapeUtils.unescapeHtml4(\"test & &lt;\"));\r\n    assertEquals(\"<P&O>\", StringEscapeUtils.unescapeXml(\"&lt;P&O&gt;\"));\r\n    assertEquals(\"test & <\", StringEscapeUtils.unescapeXml(\"test & &lt;\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\StringEscapeUtilsTest.java",
  "methodName" : "testUnescapeCsvString",
  "sourceCode" : "@Test\r\nvoid testUnescapeCsvString() {\r\n    assertEquals(\"foo.bar\", StringEscapeUtils.unescapeCsv(\"foo.bar\"));\r\n    assertEquals(\"foo,bar\", StringEscapeUtils.unescapeCsv(\"\\\"foo,bar\\\"\"));\r\n    assertEquals(\"foo\\nbar\", StringEscapeUtils.unescapeCsv(\"\\\"foo\\nbar\\\"\"));\r\n    assertEquals(\"foo\\rbar\", StringEscapeUtils.unescapeCsv(\"\\\"foo\\rbar\\\"\"));\r\n    assertEquals(\"foo\\\"bar\", StringEscapeUtils.unescapeCsv(\"\\\"foo\\\"\\\"bar\\\"\"));\r\n    assertEquals(\"foo\\uD84C\\uDFB4bar\", StringEscapeUtils.unescapeCsv(\"foo\\uD84C\\uDFB4bar\"));\r\n    assertEquals(\"\", StringEscapeUtils.unescapeCsv(\"\"));\r\n    assertNull(StringEscapeUtils.unescapeCsv(null));\r\n    assertEquals(\"foo.bar\", StringEscapeUtils.unescapeCsv(\"\\\"foo.bar\\\"\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\StringEscapeUtilsTest.java",
  "methodName" : "testUnescapeCsvWriter",
  "sourceCode" : "@Test\r\nvoid testUnescapeCsvWriter() throws IOException {\r\n    checkCsvUnescapeWriter(\"foo.bar\", \"foo.bar\");\r\n    checkCsvUnescapeWriter(\"foo,bar\", \"\\\"foo,bar\\\"\");\r\n    checkCsvUnescapeWriter(\"foo\\nbar\", \"\\\"foo\\nbar\\\"\");\r\n    checkCsvUnescapeWriter(\"foo\\rbar\", \"\\\"foo\\rbar\\\"\");\r\n    checkCsvUnescapeWriter(\"foo\\\"bar\", \"\\\"foo\\\"\\\"bar\\\"\");\r\n    checkCsvUnescapeWriter(\"foo\\uD84C\\uDFB4bar\", \"foo\\uD84C\\uDFB4bar\");\r\n    checkCsvUnescapeWriter(\"\", null);\r\n    checkCsvUnescapeWriter(\"\", \"\");\r\n    checkCsvUnescapeWriter(\"foo.bar\", \"\\\"foo.bar\\\"\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\StringEscapeUtilsTest.java",
  "methodName" : "testUnescapeEcmaScript",
  "sourceCode" : "@Test\r\nvoid testUnescapeEcmaScript() {\r\n    assertNull(StringEscapeUtils.unescapeEcmaScript(null));\r\n    assertEquals(\"8lvc1u+6B#-I\", StringEscapeUtils.unescapeEcmaScript(\"8lvc1u+6B#-I\"));\r\n    assertEquals(\"<script src=\\\"build/main.bundle.js\\\"></script>\", StringEscapeUtils.unescapeEcmaScript(\"<script src=\\\"build/main.bundle.js\\\"></script>\"));\r\n    assertEquals(\"<script src=\\\"build/main.bundle.js\\\"></script>>\", StringEscapeUtils.unescapeEcmaScript(\"<script src=\\\"build/main.bundle.js\\\"></script>>\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\StringEscapeUtilsTest.java",
  "methodName" : "testUnescapeHexCharsHtml",
  "sourceCode" : "@Test\r\nvoid testUnescapeHexCharsHtml() {\r\n    // Simple easy to grok test\r\n    assertEquals(\"\\u0080\\u009F\", StringEscapeUtils.unescapeHtml4(\"&#x80;&#x9F;\"), \"hex number unescape\");\r\n    assertEquals(\"\\u0080\\u009F\", StringEscapeUtils.unescapeHtml4(\"&#X80;&#X9F;\"), \"hex number unescape\");\r\n    // Test all Character values:\r\n    for (char i = Character.MIN_VALUE; i < Character.MAX_VALUE; i++) {\r\n        final char c2 = (char) (i + 1);\r\n        final String expected = Character.toString(i) + Character.toString(c2);\r\n        final String escapedC1 = \"&#x\" + Integer.toHexString(i) + \";\";\r\n        final String escapedC2 = \"&#x\" + Integer.toHexString(c2) + \";\";\r\n        assertEquals(expected, StringEscapeUtils.unescapeHtml4(escapedC1 + escapedC2), \"hex number unescape index \" + i);\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\StringEscapeUtilsTest.java",
  "methodName" : "testUnescapeHtml3",
  "sourceCode" : "@Test\r\nvoid testUnescapeHtml3() {\r\n    for (final String[] element : HTML_ESCAPES) {\r\n        final String message = element[0];\r\n        final String expected = element[2];\r\n        final String original = element[1];\r\n        assertEquals(expected, StringEscapeUtils.unescapeHtml3(original), message);\r\n        final StringWriter sw = new StringWriter();\r\n        try {\r\n            StringEscapeUtils.UNESCAPE_HTML3.translate(original, sw);\r\n        } catch (final IOException e) {\r\n            // expected\r\n        }\r\n        final String actual = original == null ? null : sw.toString();\r\n        assertEquals(expected, actual, message);\r\n    }\r\n    // \\u00E7 is a cedilla (c with wiggle under)\r\n    // note that the test string must be 7-bit-clean (Unicode escaped) or else it will compile incorrectly\r\n    // on some locales\r\n    assertEquals(\"Fran\\u00E7ais\", StringEscapeUtils.unescapeHtml3(\"Fran\\u00E7ais\"), \"funny chars pass through OK\");\r\n    assertEquals(\"Hello&;World\", StringEscapeUtils.unescapeHtml3(\"Hello&;World\"));\r\n    assertEquals(\"Hello&#;World\", StringEscapeUtils.unescapeHtml3(\"Hello&#;World\"));\r\n    assertEquals(\"Hello&# ;World\", StringEscapeUtils.unescapeHtml3(\"Hello&# ;World\"));\r\n    assertEquals(\"Hello&##;World\", StringEscapeUtils.unescapeHtml3(\"Hello&##;World\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\StringEscapeUtilsTest.java",
  "methodName" : "testUnescapeHtml4",
  "sourceCode" : "@Test\r\nvoid testUnescapeHtml4() {\r\n    for (final String[] element : HTML_ESCAPES) {\r\n        final String message = element[0];\r\n        final String expected = element[2];\r\n        final String original = element[1];\r\n        assertEquals(expected, StringEscapeUtils.unescapeHtml4(original), message);\r\n        final StringWriter sw = new StringWriter();\r\n        try {\r\n            StringEscapeUtils.UNESCAPE_HTML4.translate(original, sw);\r\n        } catch (final IOException e) {\r\n            // expected\r\n        }\r\n        final String actual = original == null ? null : sw.toString();\r\n        assertEquals(expected, actual, message);\r\n    }\r\n    // \\u00E7 is a cedilla (c with wiggle under)\r\n    // note that the test string must be 7-bit-clean (Unicode escaped) or else it will compile incorrectly\r\n    // on some locales\r\n    assertEquals(\"Fran\\u00E7ais\", StringEscapeUtils.unescapeHtml4(\"Fran\\u00E7ais\"), \"funny chars pass through OK\");\r\n    assertEquals(\"Hello&;World\", StringEscapeUtils.unescapeHtml4(\"Hello&;World\"));\r\n    assertEquals(\"Hello&#;World\", StringEscapeUtils.unescapeHtml4(\"Hello&#;World\"));\r\n    assertEquals(\"Hello&# ;World\", StringEscapeUtils.unescapeHtml4(\"Hello&# ;World\"));\r\n    assertEquals(\"Hello&##;World\", StringEscapeUtils.unescapeHtml4(\"Hello&##;World\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\StringEscapeUtilsTest.java",
  "methodName" : "testUnescapeJava",
  "sourceCode" : "@Test\r\nvoid testUnescapeJava() throws IOException {\r\n    assertNull(StringEscapeUtils.unescapeJava(null));\r\n    try {\r\n        StringEscapeUtils.UNESCAPE_JAVA.translate(null, null);\r\n        fail(\"Exception expected!\");\r\n    } catch (final IOException ex) {\r\n        fail(\"Exception expected!\");\r\n    } catch (final IllegalArgumentException ex) {\r\n        // expected\r\n    }\r\n    try {\r\n        StringEscapeUtils.UNESCAPE_JAVA.translate(\"\", null);\r\n        fail(\"Exception expected!\");\r\n    } catch (final IOException ex) {\r\n        fail(\"Exception expected!\");\r\n    } catch (final IllegalArgumentException ex) {\r\n        // expected\r\n    }\r\n    assertThrows(RuntimeException.class, () -> StringEscapeUtils.unescapeJava(\"\\\\u02-3\"));\r\n    assertUnescapeJava(\"\", \"\");\r\n    assertUnescapeJava(\"test\", \"test\");\r\n    assertUnescapeJava(\"\\ntest\\b\", \"\\\\ntest\\\\b\");\r\n    assertUnescapeJava(\"\\u123425foo\\ntest\\b\", \"\\\\u123425foo\\\\ntest\\\\b\");\r\n    assertUnescapeJava(\"'\\foo\\teste\\r\", \"\\\\'\\\\foo\\\\teste\\\\r\");\r\n    assertUnescapeJava(\"\", \"\\\\\");\r\n    // foo\r\n    assertUnescapeJava(\"\\uABCDx\", \"\\\\uabcdx\", \"lowercase Unicode\");\r\n    assertUnescapeJava(\"\\uABCDx\", \"\\\\uABCDx\", \"uppercase Unicode\");\r\n    assertUnescapeJava(\"\\uABCD\", \"\\\\uabcd\", \"Unicode as final character\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\StringEscapeUtilsTest.java",
  "methodName" : "testUnescapeJson",
  "sourceCode" : "@Test\r\nvoid testUnescapeJson() {\r\n    final String jsonString = \"{\\\"age\\\":100,\\\"name\\\":\\\"kyong.com\\n\\\",\\\"messages\\\":[\\\"msg 1\\\",\\\"msg 2\\\",\\\"msg 3\\\"]}\";\r\n    assertEquals(\"\", StringEscapeUtils.unescapeJson(\"\"));\r\n    assertEquals(\" \", StringEscapeUtils.unescapeJson(\" \"));\r\n    assertEquals(\"a:b\", StringEscapeUtils.unescapeJson(\"a:b\"));\r\n    assertEquals(jsonString, StringEscapeUtils.unescapeJson(jsonString));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\StringEscapeUtilsTest.java",
  "methodName" : "testUnescapeJsonDoubleQuoteAndForwardSlash",
  "sourceCode" : "// TEXT-120\r\n@Test\r\nvoid testUnescapeJsonDoubleQuoteAndForwardSlash() {\r\n    final String escapedJsonString = \"double quote: \\\\\\\" and a forward slash: \\\\/\";\r\n    final String jsonString = \"double quote: \\\" and a forward slash: /\";\r\n    assertEquals(jsonString, StringEscapeUtils.unescapeJson(escapedJsonString));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\StringEscapeUtilsTest.java",
  "methodName" : "testUnescapeUnknownEntity",
  "sourceCode" : "@Test\r\nvoid testUnescapeUnknownEntity() {\r\n    assertEquals(\"&zzzz;\", StringEscapeUtils.unescapeHtml4(\"&zzzz;\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\StringEscapeUtilsTest.java",
  "methodName" : "testUnescapeXmlSupplementaryCharacters",
  "sourceCode" : "/**\r\n * Reverse of the above.\r\n *\r\n * @see <a href=\"https://issues.apache.org/jira/browse/LANG-729\">LANG-729</a>\r\n */\r\n@Test\r\nvoid testUnescapeXmlSupplementaryCharacters() {\r\n    assertEquals(\"\\uD84C\\uDFB4\", StringEscapeUtils.unescapeXml(\"&#144308;\"), \"Supplementary character must be represented using a single escape\");\r\n    assertEquals(\"a b c \\uD84C\\uDFB4\", StringEscapeUtils.unescapeXml(\"a b c &#144308;\"), \"Supplementary characters mixed with basic characters should be decoded correctly\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\StringEscapeUtilsTest.java",
  "methodName" : "testUnscapeXSI",
  "sourceCode" : "@Test\r\nvoid testUnscapeXSI() {\r\n    assertNull(null, unescapeXSI(null));\r\n    assertEquals(\"\\\"\", unescapeXSI(\"\\\\\\\"\"));\r\n    assertEquals(\"He didn't say, \\\"Stop!\\\"\", unescapeXSI(\"He\\\\ didn\\\\'t\\\\ say,\\\\ \\\\\\\"Stop!\\\\\\\"\"));\r\n    assertEquals(\"\\\\\", unescapeXSI(\"\\\\\\\\\"));\r\n    assertEquals(\"\", unescapeXSI(\"\\\\\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\StringSubstitutorOssFuzzTest.java",
  "methodName" : "test42522985",
  "sourceCode" : "/**\r\n * Tests OSS-Fuzz issue 42522985.\r\n *\r\n * apache-commons-text:StringSubstitutorInterpolatorFuzzer: Security exception in java.base/java.util.Arrays.copyOf\r\n *\r\n * https://issues.oss-fuzz.com/issues/42522985\r\n */\r\n@Test\r\nvoid test42522985() throws IOException {\r\n    StringSubstitutor.createInterpolator().replace(readAllString(\"clusterfuzz-testcase-StringSubstitutorInterpolatorFuzzer-6287296750813184\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\StringSubstitutorOssFuzzTest.java",
  "methodName" : "test42527553",
  "sourceCode" : "/**\r\n * Tests OSS-Fuzz issue 42527553.\r\n *\r\n * apache-commons-text:StringSubstitutorInterpolatorFuzzer: Security exception in java.base/java.util.Arrays.copyOf\r\n *\r\n * https://issues.oss-fuzz.com/issues/42527553\r\n */\r\n@Test\r\nvoid test42527553() {\r\n    StringSubstitutor.createInterpolator().replace(\"${date:swswswswsws\\177sw\\001\\000swswswswswwswsswswswsws\\177sw\\001\\000swswswsswswswswswswswswswswsws}\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\StringSubstitutorOssFuzzTest.java",
  "methodName" : "test42527776",
  "sourceCode" : "/**\r\n * Tests OSS-Fuzz issue 42527776.\r\n *\r\n * apache-commons-text:StringSubstitutorInterpolatorFuzzer: Security exception in java.base/java.util.Arrays.copyOf\r\n *\r\n * https://issues.oss-fuzz.com/issues/42527776\r\n */\r\n@Test\r\nvoid test42527776() throws IOException {\r\n    assertThrows(IllegalArgumentException.class, () -> StringSubstitutor.createInterpolator().replace(readAllString(\"clusterfuzz-testcase-StringSubstitutorInterpolatorFuzzer-5149898315268096\")));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\StringSubstitutorTest.java",
  "methodName" : "testConstructorNullMap",
  "sourceCode" : "@Test\r\nvoid testConstructorNullMap() {\r\n    final Map<String, Object> parameters = null;\r\n    final StringSubstitutor s = new StringSubstitutor(parameters, \"prefix\", \"suffix\");\r\n    assertNull(s.getStringLookup().apply(\"X\"));\r\n    assertNull(s.getStringLookup().lookup(\"X\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\StringSubstitutorTest.java",
  "methodName" : "testConstructorStringSubstitutor",
  "sourceCode" : "@Test\r\nvoid testConstructorStringSubstitutor() {\r\n    final StringSubstitutor source = new StringSubstitutor();\r\n    source.setDisableSubstitutionInValues(true);\r\n    source.setEnableSubstitutionInVariables(true);\r\n    source.setEnableUndefinedVariableException(true);\r\n    source.setEscapeChar('e');\r\n    source.setValueDelimiter('d');\r\n    source.setVariablePrefix('p');\r\n    source.setVariableResolver(StringLookupFactory.INSTANCE.nullStringLookup());\r\n    source.setVariableSuffix('s');\r\n    //\r\n    final StringSubstitutor target = new StringSubstitutor(source);\r\n    //\r\n    assertTrue(target.isDisableSubstitutionInValues());\r\n    assertTrue(target.isEnableSubstitutionInVariables());\r\n    assertTrue(target.isEnableUndefinedVariableException());\r\n    assertEquals('e', target.getEscapeChar());\r\n    assertTrue(target.getValueDelimiterMatcher().toString().endsWith(\"['d']\"), target.getValueDelimiterMatcher().toString());\r\n    assertTrue(target.getVariablePrefixMatcher().toString().endsWith(\"['p']\"), target.getValueDelimiterMatcher().toString());\r\n    assertTrue(target.getVariableSuffixMatcher().toString().endsWith(\"['s']\"), target.getValueDelimiterMatcher().toString());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\StringSubstitutorTest.java",
  "methodName" : "testGetSetEscape",
  "sourceCode" : "/**\r\n * Tests get set.\r\n */\r\n@Test\r\nvoid testGetSetEscape() {\r\n    final StringSubstitutor sub = new StringSubstitutor();\r\n    assertEquals('$', sub.getEscapeChar());\r\n    sub.setEscapeChar('<');\r\n    assertEquals('<', sub.getEscapeChar());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\StringSubstitutorTest.java",
  "methodName" : "testLANG1055",
  "sourceCode" : "/**\r\n * Test for LANG-1055: StringSubstitutor.replaceSystemProperties does not work consistently\r\n */\r\n@Test\r\nvoid testLANG1055() {\r\n    System.setProperty(\"test_key\", \"test_value\");\r\n    final String expected = StringSubstitutor.replace(\"test_key=${test_key}\", System.getProperties());\r\n    final String actual = StringSubstitutor.replaceSystemProperties(\"test_key=${test_key}\");\r\n    assertEquals(expected, actual);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\StringSubstitutorTest.java",
  "methodName" : "testReplace_JiraText178_WeirdPatterns1",
  "sourceCode" : "/**\r\n * Tests interpolation with weird boundary patterns.\r\n */\r\n@Test\r\nvoid testReplace_JiraText178_WeirdPatterns1() throws IOException {\r\n    doNotReplace(\"$${\");\r\n    doNotReplace(\"$${a\");\r\n    doNotReplace(\"$$${\");\r\n    doNotReplace(\"$$${a\");\r\n    doNotReplace(\"$${${a\");\r\n    // \"${a\" is not a registered variable name.\r\n    doNotReplace(\"${${a}\");\r\n    doNotReplace(\"${$${a}\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\StringSubstitutorTest.java",
  "methodName" : "testReplace_JiraText178_WeirdPatterns2",
  "sourceCode" : "/**\r\n * Tests interpolation with weird boundary patterns.\r\n */\r\n@Test\r\nvoid testReplace_JiraText178_WeirdPatterns2() throws IOException {\r\n    doReplace(\"${1}\", \"$${${a}}\", false);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\StringSubstitutorTest.java",
  "methodName" : "testReplace_JiraText178_WeirdPatterns3",
  "sourceCode" : "/**\r\n * Tests interpolation with weird boundary patterns.\r\n */\r\n@Test\r\n@Disabled\r\nvoid testReplace_JiraText178_WeirdPatterns3() throws IOException {\r\n    // not \"$${1\" or \"${1\"\r\n    doReplace(\"${${a}\", \"$${${a}\", false);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\StringSubstitutorTest.java",
  "methodName" : "testReplaceAdjacentAtEnd",
  "sourceCode" : "/**\r\n * Tests adjacent keys.\r\n */\r\n@Test\r\nvoid testReplaceAdjacentAtEnd() throws IOException {\r\n    values.put(\"code\", \"GBP\");\r\n    values.put(\"amount\", \"12.50\");\r\n    final StringSubstitutor sub = new StringSubstitutor(values);\r\n    assertEqualsCharSeq(\"Amount is GBP12.50\", replace(sub, \"Amount is ${code}${amount}\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\StringSubstitutorTest.java",
  "methodName" : "testReplaceAdjacentAtStart",
  "sourceCode" : "/**\r\n * Tests adjacent keys.\r\n */\r\n@Test\r\nvoid testReplaceAdjacentAtStart() throws IOException {\r\n    values.put(\"code\", \"GBP\");\r\n    values.put(\"amount\", \"12.50\");\r\n    final StringSubstitutor sub = new StringSubstitutor(values);\r\n    assertEqualsCharSeq(\"GBP12.50 charged\", replace(sub, \"${code}${amount} charged\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\StringSubstitutorTest.java",
  "methodName" : "testReplaceChangedMap",
  "sourceCode" : "/**\r\n * Tests key replace changing map after initialization (not recommended).\r\n */\r\n@Test\r\nvoid testReplaceChangedMap() throws IOException {\r\n    final StringSubstitutor sub = new StringSubstitutor(values);\r\n    // no map change\r\n    final String template = CLASSIC_TEMPLATE;\r\n    assertEqualsCharSeq(CLASSIC_RESULT, replace(sub, template));\r\n    // map change\r\n    values.put(\"target\", \"moon\");\r\n    assertEqualsCharSeq(\"The quick brown fox jumps over the moon.\", replace(sub, template));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\StringSubstitutorTest.java",
  "methodName" : "testReplaceComplexEscaping",
  "sourceCode" : "/**\r\n * Tests complex escaping.\r\n */\r\n@Test\r\nvoid testReplaceComplexEscaping() throws IOException {\r\n    doReplace(\"${1}\", \"$${${a}}\", false);\r\n    doReplace(\"${11}\", \"$${${aa}}\", false);\r\n    doReplace(\"${111}\", \"$${${aaa}}\", false);\r\n    doReplace(\"${quick brown fox}\", \"$${${animal}}\", false);\r\n    doReplace(\"The ${quick brown fox} jumps over the lazy dog.\", \"The $${${animal}} jumps over the ${target}.\", true);\r\n    doReplace(\"${${a}}\", \"$${$${a}}\", false);\r\n    doReplace(\"${${aa}}\", \"$${$${aa}}\", false);\r\n    doReplace(\"${${aaa}}\", \"$${$${aaa}}\", false);\r\n    doReplace(\"${${animal}}\", \"$${$${animal}}\", false);\r\n    doReplace(\".${${animal}}\", \".$${$${animal}}\", false);\r\n    doReplace(\"${${animal}}.\", \"$${$${animal}}.\", false);\r\n    doReplace(\".${${animal}}.\", \".$${$${animal}}.\", false);\r\n    doReplace(\"The ${${animal}} jumps over the lazy dog.\", \"The $${$${animal}} jumps over the ${target}.\", true);\r\n    doReplace(\"The ${quick brown fox} jumps over the lazy dog. ${1234567890}.\", \"The $${${animal}} jumps over the ${target}. $${${undefined.number:-1234567890}}.\", true);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\StringSubstitutorTest.java",
  "methodName" : "testReplaceEmptyKey",
  "sourceCode" : "/**\r\n * Tests when no variable name.\r\n */\r\n@Test\r\nvoid testReplaceEmptyKey() throws IOException {\r\n    doReplace(\"The ${} jumps over the lazy dog.\", \"The ${} jumps over the ${target}.\", true);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\StringSubstitutorTest.java",
  "methodName" : "testReplaceEmptyKeyExtraFirst",
  "sourceCode" : "/**\r\n * Tests when no variable name.\r\n */\r\n@Test\r\nvoid testReplaceEmptyKeyExtraFirst() throws IOException {\r\n    assertEqualsCharSeq(\".\" + EMPTY_EXPR, replace(new StringSubstitutor(values), \".\" + EMPTY_EXPR));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\StringSubstitutorTest.java",
  "methodName" : "testReplaceEmptyKeyExtraLast",
  "sourceCode" : "/**\r\n * Tests when no variable name.\r\n */\r\n@Test\r\nvoid testReplaceEmptyKeyExtraLast() throws IOException {\r\n    assertEqualsCharSeq(EMPTY_EXPR + \".\", replace(new StringSubstitutor(values), EMPTY_EXPR + \".\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\StringSubstitutorTest.java",
  "methodName" : "testReplaceEmptyKeyOnly",
  "sourceCode" : "/**\r\n * Tests when no variable name.\r\n */\r\n@Test\r\nvoid testReplaceEmptyKeyOnly() throws IOException {\r\n    assertEquals(EMPTY_EXPR, replace(new StringSubstitutor(values), EMPTY_EXPR));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\StringSubstitutorTest.java",
  "methodName" : "testReplaceEmptyKeyShortest",
  "sourceCode" : "/**\r\n * Tests when no variable name.\r\n */\r\n@Test\r\nvoid testReplaceEmptyKeyShortest() throws IOException {\r\n    doNotReplace(EMPTY_EXPR);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\StringSubstitutorTest.java",
  "methodName" : "testReplaceEmptyKeyWithDefault",
  "sourceCode" : "/**\r\n * Tests when no variable name.\r\n */\r\n@Test\r\nvoid testReplaceEmptyKeyWithDefault() throws IOException {\r\n    doReplace(\"The animal jumps over the lazy dog.\", \"The ${:-animal} jumps over the ${target}.\", true);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\StringSubstitutorTest.java",
  "methodName" : "testReplaceEmptyKeyWithDefaultOnly",
  "sourceCode" : "/**\r\n * Tests when no variable name.\r\n */\r\n@Test\r\nvoid testReplaceEmptyKeyWithDefaultOnly() throws IOException {\r\n    doReplace(\"animal\", \"${:-animal}\", false);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\StringSubstitutorTest.java",
  "methodName" : "testReplaceEmptyKeyWithDefaultOnlyEmpty",
  "sourceCode" : "/**\r\n * Tests when no variable name.\r\n */\r\n@Test\r\nvoid testReplaceEmptyKeyWithDefaultOnlyEmpty() throws IOException {\r\n    doReplace(\"\", \"${:-}\", false);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\StringSubstitutorTest.java",
  "methodName" : "testReplaceEmptyKeyWithDefaultOnlyShortest",
  "sourceCode" : "/**\r\n * Tests when no variable name.\r\n */\r\n@Test\r\nvoid testReplaceEmptyKeyWithDefaultOnlyShortest() throws IOException {\r\n    doReplace(\"a\", \"${:-a}\", false);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\StringSubstitutorTest.java",
  "methodName" : "testReplaceEmptyString",
  "sourceCode" : "/**\r\n * Tests replace with null.\r\n */\r\n@Test\r\nvoid testReplaceEmptyString() throws IOException {\r\n    doNotReplace(StringUtils.EMPTY);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\StringSubstitutorTest.java",
  "methodName" : "testReplaceEscaping",
  "sourceCode" : "/**\r\n * Tests escaping.\r\n */\r\n@Test\r\nvoid testReplaceEscaping() throws IOException {\r\n    doReplace(\"The ${animal} jumps over the lazy dog.\", \"The $${animal} jumps over the ${target}.\", true);\r\n    doReplace(\"${a}\", \"$${a}\", false);\r\n    doReplace(\"${a${a}}\", \"$${a$${a}}\", false);\r\n    doReplace(\"${a${a${a}}}\", \"$${a$${a$${a}}}\", false);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\StringSubstitutorTest.java",
  "methodName" : "testReplaceFailOnUndefinedVariable",
  "sourceCode" : "/**\r\n * Tests replace with fail on undefined variable.\r\n */\r\n@Test\r\nvoid testReplaceFailOnUndefinedVariable() throws IOException {\r\n    values.put(\"animal.1\", \"fox\");\r\n    values.put(\"animal.2\", \"mouse\");\r\n    values.put(\"species\", \"2\");\r\n    final StringSubstitutor sub = new StringSubstitutor(values);\r\n    sub.setEnableUndefinedVariableException(true);\r\n    assertEquals(\"Cannot resolve variable 'animal.${species' (enableSubstitutionInVariables=false).\", assertThrows(IllegalArgumentException.class, () -> replace(sub, \"The ${animal.${species}} jumps over the ${target}.\")).getMessage());\r\n    assertEquals(\"Cannot resolve variable 'animal.${species:-1' (enableSubstitutionInVariables=false).\", assertThrows(IllegalArgumentException.class, () -> replace(sub, \"The ${animal.${species:-1}} jumps over the ${target}.\")).getMessage());\r\n    assertEquals(\"Cannot resolve variable 'unknown' (enableSubstitutionInVariables=false).\", assertThrows(IllegalArgumentException.class, () -> replace(sub, \"The ${test:-statement} is a sample for missing ${unknown}.\")).getMessage());\r\n    // if default value is available, exception will not be thrown\r\n    assertEqualsCharSeq(\"The statement is a sample for missing variable.\", replace(sub, \"The ${test:-statement} is a sample for missing ${unknown:-variable}.\"));\r\n    assertEqualsCharSeq(\"The fox jumps over the lazy dog.\", replace(sub, \"The ${animal.1} jumps over the ${target}.\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\StringSubstitutorTest.java",
  "methodName" : "testReplaceFailOnUndefinedVariableWithReplaceInVariable",
  "sourceCode" : "/**\r\n * Tests whether replace with fail on undefined variable with substitution in variable names enabled.\r\n */\r\n@Test\r\nvoid testReplaceFailOnUndefinedVariableWithReplaceInVariable() throws IOException {\r\n    values.put(\"animal.1\", \"fox\");\r\n    values.put(\"animal.2\", \"mouse\");\r\n    values.put(\"species\", \"2\");\r\n    values.put(\"statement.1\", \"2\");\r\n    values.put(\"recursive\", \"1\");\r\n    values.put(\"word\", \"variable\");\r\n    values.put(\"testok.2\", \"statement\");\r\n    final StringSubstitutor sub = new StringSubstitutor(values);\r\n    sub.setEnableUndefinedVariableException(true);\r\n    sub.setEnableSubstitutionInVariables(true);\r\n    assertEqualsCharSeq(\"The mouse jumps over the lazy dog.\", replace(sub, \"The ${animal.${species}} jumps over the ${target}.\"));\r\n    values.put(\"species\", \"1\");\r\n    assertEqualsCharSeq(\"The fox jumps over the lazy dog.\", replace(sub, \"The ${animal.${species}} jumps over the ${target}.\"));\r\n    // exception is thrown here because variable with name test.1 is missing\r\n    assertEquals(\"Cannot resolve variable 'statement' (enableSubstitutionInVariables=true).\", assertThrows(IllegalArgumentException.class, () -> replace(sub, \"The ${test.${statement}} is a sample for missing ${word}.\")).getMessage());\r\n    // exception is thrown here because variable with name test.2 is missing\r\n    assertEquals(\"Cannot resolve variable 'test.2' (enableSubstitutionInVariables=true).\", assertThrows(IllegalArgumentException.class, () -> replace(sub, \"The ${test.${statement.${recursive}}} is a sample for missing ${word}.\")).getMessage());\r\n    assertEqualsCharSeq(\"statement\", replace(sub, \"${testok.${statement.${recursive}}}\"));\r\n    assertEqualsCharSeq(\"${testok.2}\", replace(sub, \"$${testok.${statement.${recursive}}}\"));\r\n    assertEqualsCharSeq(\"The statement is a sample for missing variable.\", replace(sub, \"The ${testok.${statement.${recursive}}} is a sample for missing ${word}.\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\StringSubstitutorTest.java",
  "methodName" : "testReplaceIncompletePrefix",
  "sourceCode" : "/**\r\n * Tests when no incomplete prefix.\r\n */\r\n@Test\r\nvoid testReplaceIncompletePrefix() throws IOException {\r\n    doReplace(\"The {animal} jumps over the lazy dog.\", \"The {animal} jumps over the ${target}.\", true);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\StringSubstitutorTest.java",
  "methodName" : "testReplaceInTakingStringBufferWithNonNull",
  "sourceCode" : "@Test\r\nvoid testReplaceInTakingStringBufferWithNonNull() {\r\n    final StringSubstitutor strSubstitutor = new StringSubstitutor(new HashMap<>(), \"WV@i#y?N*[\", \"WV@i#y?N*[\", '*');\r\n    assertFalse(strSubstitutor.isPreserveEscapes());\r\n    assertFalse(strSubstitutor.replaceIn(new StringBuffer(\"WV@i#y?N*[\")));\r\n    assertEquals('*', strSubstitutor.getEscapeChar());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\StringSubstitutorTest.java",
  "methodName" : "testReplaceInTakingStringBuilderWithNonNull",
  "sourceCode" : "@Test\r\nvoid testReplaceInTakingStringBuilderWithNonNull() {\r\n    final StringLookup strLookup = StringLookupFactory.INSTANCE.systemPropertyStringLookup();\r\n    final StringSubstitutor strSubstitutor = new StringSubstitutor(strLookup, \"b<H\", \"b<H\", '\\'');\r\n    final StringBuilder stringBuilder = new StringBuilder((CharSequence) \"b<H\");\r\n    assertEquals('\\'', strSubstitutor.getEscapeChar());\r\n    assertFalse(strSubstitutor.replaceIn(stringBuilder));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\StringSubstitutorTest.java",
  "methodName" : "testReplaceInTakingStringBuilderWithNull",
  "sourceCode" : "@Test\r\nvoid testReplaceInTakingStringBuilderWithNull() {\r\n    final Map<String, Object> map = new HashMap<>();\r\n    final StringSubstitutor strSubstitutor = new StringSubstitutor(map, StringUtils.EMPTY, StringUtils.EMPTY, 'T', \"K+<'f\");\r\n    assertFalse(strSubstitutor.replaceIn((StringBuilder) null));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\StringSubstitutorTest.java",
  "methodName" : "testReplaceInTakingTwoAndThreeIntsReturningFalse",
  "sourceCode" : "@Test\r\nvoid testReplaceInTakingTwoAndThreeIntsReturningFalse() {\r\n    final Map<String, Object> hashMap = new HashMap<>();\r\n    final StringLookup mapStringLookup = StringLookupFactory.INSTANCE.mapStringLookup(hashMap);\r\n    final StringMatcher strMatcher = StringMatcherFactory.INSTANCE.tabMatcher();\r\n    final StringSubstitutor strSubstitutor = new StringSubstitutor(mapStringLookup, strMatcher, strMatcher, 'b', strMatcher);\r\n    assertFalse(strSubstitutor.replaceIn((StringBuilder) null, 1315, -1369));\r\n    assertEquals('b', strSubstitutor.getEscapeChar());\r\n    assertFalse(strSubstitutor.isPreserveEscapes());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\StringSubstitutorTest.java",
  "methodName" : "testReplaceInVariable",
  "sourceCode" : "/**\r\n * Tests whether a variable can be replaced in a variable name.\r\n */\r\n@Test\r\nvoid testReplaceInVariable() throws IOException {\r\n    values.put(\"animal.1\", \"fox\");\r\n    values.put(\"animal.2\", \"mouse\");\r\n    values.put(\"species\", \"2\");\r\n    final StringSubstitutor sub = new StringSubstitutor(values);\r\n    sub.setEnableSubstitutionInVariables(true);\r\n    assertEqualsCharSeq(\"The mouse jumps over the lazy dog.\", replace(sub, \"The ${animal.${species}} jumps over the ${target}.\"));\r\n    values.put(\"species\", \"1\");\r\n    assertEqualsCharSeq(\"The fox jumps over the lazy dog.\", replace(sub, \"The ${animal.${species}} jumps over the ${target}.\"));\r\n    assertEqualsCharSeq(\"The fox jumps over the lazy dog.\", replace(sub, \"The ${unknown.animal.${unknown.species:-1}:-fox} jumps over the ${unknow.target:-lazy dog}.\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\StringSubstitutorTest.java",
  "methodName" : "testReplaceInVariableDisabled",
  "sourceCode" : "/**\r\n * Tests whether substitution in variable names is disabled per default.\r\n */\r\n@Test\r\nvoid testReplaceInVariableDisabled() throws IOException {\r\n    values.put(\"animal.1\", \"fox\");\r\n    values.put(\"animal.2\", \"mouse\");\r\n    values.put(\"species\", \"2\");\r\n    final StringSubstitutor sub = new StringSubstitutor(values);\r\n    assertEqualsCharSeq(\"The ${animal.${species}} jumps over the lazy dog.\", replace(sub, \"The ${animal.${species}} jumps over the ${target}.\"));\r\n    assertEqualsCharSeq(\"The ${animal.${species:-1}} jumps over the lazy dog.\", replace(sub, \"The ${animal.${species:-1}} jumps over the ${target}.\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\StringSubstitutorTest.java",
  "methodName" : "testReplaceInVariableRecursive",
  "sourceCode" : "/**\r\n * Tests complex and recursive substitution in variable names.\r\n */\r\n@Test\r\nvoid testReplaceInVariableRecursive() throws IOException {\r\n    values.put(\"animal.2\", \"brown fox\");\r\n    values.put(\"animal.1\", \"white mouse\");\r\n    values.put(\"color\", \"white\");\r\n    values.put(\"species.white\", \"1\");\r\n    values.put(\"species.brown\", \"2\");\r\n    final StringSubstitutor sub = new StringSubstitutor(values);\r\n    sub.setEnableSubstitutionInVariables(true);\r\n    assertEqualsCharSeq(\"white mouse\", replace(sub, \"${animal.${species.${color}}}\"));\r\n    assertEqualsCharSeq(\"The white mouse jumps over the lazy dog.\", replace(sub, \"The ${animal.${species.${color}}} jumps over the ${target}.\"));\r\n    assertEqualsCharSeq(\"The brown fox jumps over the lazy dog.\", replace(sub, \"The ${animal.${species.${unknownColor:-brown}}} jumps over the ${target}.\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\StringSubstitutorTest.java",
  "methodName" : "testReplaceKeyStartChars",
  "sourceCode" : "/**\r\n * Tests when no variable name.\r\n */\r\n@Test\r\nvoid testReplaceKeyStartChars() throws IOException {\r\n    final String substring = StringSubstitutor.DEFAULT_VAR_START + \"a\";\r\n    assertEqualsCharSeq(substring, replace(new StringSubstitutor(values), substring));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\StringSubstitutorTest.java",
  "methodName" : "testReplaceKeyStartChars1Only",
  "sourceCode" : "/**\r\n * Tests when no variable name.\r\n */\r\n@Test\r\nvoid testReplaceKeyStartChars1Only() throws IOException {\r\n    final String substring = StringSubstitutor.DEFAULT_VAR_START.substring(0, 1);\r\n    assertEqualsCharSeq(substring, replace(new StringSubstitutor(values), substring));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\StringSubstitutorTest.java",
  "methodName" : "testReplaceKeyStartChars2Only",
  "sourceCode" : "/**\r\n * Tests when no variable name.\r\n */\r\n@Test\r\nvoid testReplaceKeyStartChars2Only() throws IOException {\r\n    final String substring = StringSubstitutor.DEFAULT_VAR_START.substring(0, 2);\r\n    assertEqualsCharSeq(substring, replace(new StringSubstitutor(values), substring));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\StringSubstitutorTest.java",
  "methodName" : "testReplaceNoPrefixNoSuffix",
  "sourceCode" : "/**\r\n * Tests when no prefix or suffix.\r\n */\r\n@Test\r\nvoid testReplaceNoPrefixNoSuffix() throws IOException {\r\n    doReplace(\"The animal jumps over the lazy dog.\", \"The animal jumps over the ${target}.\", true);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\StringSubstitutorTest.java",
  "methodName" : "testReplaceNoPrefixSuffix",
  "sourceCode" : "/**\r\n * Tests when suffix but no prefix.\r\n */\r\n@Test\r\nvoid testReplaceNoPrefixSuffix() throws IOException {\r\n    doReplace(\"The animal} jumps over the lazy dog.\", \"The animal} jumps over the ${target}.\", true);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\StringSubstitutorTest.java",
  "methodName" : "testReplaceNoVariables",
  "sourceCode" : "/**\r\n * Tests replace with no variables.\r\n */\r\n@Test\r\nvoid testReplaceNoVariables() throws IOException {\r\n    doNotReplace(\"The balloon arrived.\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\StringSubstitutorTest.java",
  "methodName" : "testReplaceNull",
  "sourceCode" : "/**\r\n * Tests replace with null.\r\n */\r\n@Test\r\nvoid testReplaceNull() throws IOException {\r\n    doNotReplace(null);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\StringSubstitutorTest.java",
  "methodName" : "testReplacePartialString_noReplace",
  "sourceCode" : "/**\r\n * Tests simple key replace.\r\n */\r\n@Test\r\nvoid testReplacePartialString_noReplace() {\r\n    final StringSubstitutor sub = new StringSubstitutor();\r\n    assertEqualsCharSeq(\"${animal} jumps\", sub.replace(CLASSIC_TEMPLATE, 4, 15));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\StringSubstitutorTest.java",
  "methodName" : "testReplacePrefixNoSuffix",
  "sourceCode" : "/**\r\n * Tests when prefix but no suffix.\r\n */\r\n@Test\r\nvoid testReplacePrefixNoSuffix() throws IOException {\r\n    doReplace(\"The ${animal jumps over the ${target} lazy dog.\", \"The ${animal jumps over the ${target} ${target}.\", true);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\StringSubstitutorTest.java",
  "methodName" : "testReplaceRecursive",
  "sourceCode" : "/**\r\n * Tests simple recursive replace.\r\n */\r\n@Test\r\nvoid testReplaceRecursive() throws IOException {\r\n    values.put(\"animal\", \"${critter}\");\r\n    values.put(\"target\", \"${pet}\");\r\n    values.put(\"pet\", \"${petCharacteristic} dog\");\r\n    values.put(\"petCharacteristic\", \"lazy\");\r\n    values.put(\"critter\", \"${critterSpeed} ${critterColor} ${critterType}\");\r\n    values.put(\"critterSpeed\", \"quick\");\r\n    values.put(\"critterColor\", \"brown\");\r\n    values.put(\"critterType\", \"fox\");\r\n    doReplace(CLASSIC_RESULT, CLASSIC_TEMPLATE, true);\r\n    values.put(\"pet\", \"${petCharacteristicUnknown:-lazy} dog\");\r\n    doReplace(CLASSIC_RESULT, CLASSIC_TEMPLATE, true);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\StringSubstitutorTest.java",
  "methodName" : "testReplaceSimple",
  "sourceCode" : "/**\r\n * Tests simple key replace.\r\n */\r\n@Test\r\nvoid testReplaceSimple() throws IOException {\r\n    doReplace(CLASSIC_RESULT, CLASSIC_TEMPLATE, true);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\StringSubstitutorTest.java",
  "methodName" : "testReplaceSimpleKeySize1",
  "sourceCode" : "/**\r\n * Tests simple key replace.\r\n */\r\n@Test\r\nvoid testReplaceSimpleKeySize1() throws IOException {\r\n    doReplace(\"1\", \"${a}\", false);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\StringSubstitutorTest.java",
  "methodName" : "testReplaceSimpleKeySize2",
  "sourceCode" : "/**\r\n * Tests simple key replace.\r\n */\r\n@Test\r\nvoid testReplaceSimpleKeySize2() throws IOException {\r\n    doReplace(\"11\", \"${aa}\", false);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\StringSubstitutorTest.java",
  "methodName" : "testReplaceSimpleKeySize3",
  "sourceCode" : "/**\r\n * Tests simple key replace.\r\n */\r\n@Test\r\nvoid testReplaceSimpleKeySize3() throws IOException {\r\n    doReplace(\"111\", \"${aaa}\", false);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\StringSubstitutorTest.java",
  "methodName" : "testReplaceTakingCharSequenceReturningNull",
  "sourceCode" : "@Test\r\nvoid testReplaceTakingCharSequenceReturningNull() {\r\n    final StringSubstitutor strSubstitutor = new StringSubstitutor((StringLookup) null);\r\n    assertNull(strSubstitutor.replace((CharSequence) null));\r\n    assertFalse(strSubstitutor.isPreserveEscapes());\r\n    assertEquals('$', strSubstitutor.getEscapeChar());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\StringSubstitutorTest.java",
  "methodName" : "testReplaceTakingThreeArgumentsThrowsNullPointerException",
  "sourceCode" : "@Test\r\nvoid testReplaceTakingThreeArgumentsThrowsNullPointerException() {\r\n    assertThrows(NullPointerException.class, () -> StringSubstitutor.replace(null, (Properties) null));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\StringSubstitutorTest.java",
  "methodName" : "testReplaceThrowsStringIndexOutOfBoundsException",
  "sourceCode" : "@Test\r\nvoid testReplaceThrowsStringIndexOutOfBoundsException() {\r\n    final StringSubstitutor sub = new StringSubstitutor();\r\n    // replace(char[], int, int)\r\n    final char[] emptyCharArray = {};\r\n    // offset greater than array length\r\n    assertThrows(StringIndexOutOfBoundsException.class, () -> sub.replace(emptyCharArray, 0, 1));\r\n    // source != null && (offset > source.length || offset < 0)\r\n    assertThrows(StringIndexOutOfBoundsException.class, () -> sub.replace(emptyCharArray, 1, 0));\r\n    // replace(String, int, int)\r\n    // offset greater than source length\r\n    assertThrows(StringIndexOutOfBoundsException.class, () -> sub.replace(\"\", 1, 1));\r\n    // source != null && offset >= 0 && offset <= source.length() && (length > -offset + source.length() || length < 0)\r\n    assertThrows(StringIndexOutOfBoundsException.class, () -> sub.replace(\"\", 0, 1));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\StringSubstitutorTest.java",
  "methodName" : "testReplaceToIdentical",
  "sourceCode" : "/**\r\n * Tests replace creates output same as input.\r\n */\r\n@Test\r\nvoid testReplaceToIdentical() throws IOException {\r\n    values.put(\"animal\", \"$${${thing}}\");\r\n    values.put(\"thing\", \"animal\");\r\n    doReplace(\"The ${animal} jumps.\", \"The ${animal} jumps.\", true);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\StringSubstitutorTest.java",
  "methodName" : "testReplaceUnknownKey",
  "sourceCode" : "/**\r\n * Tests unknown key replace.\r\n */\r\n@Test\r\nvoid testReplaceUnknownKey() throws IOException {\r\n    doReplace(\"The ${person} jumps over the lazy dog.\", \"The ${person} jumps over the ${target}.\", true);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\StringSubstitutorTest.java",
  "methodName" : "testReplaceUnknownKeyDefaultValue",
  "sourceCode" : "/**\r\n * Tests unknown key replace.\r\n */\r\n@Test\r\nvoid testReplaceUnknownKeyDefaultValue() throws IOException {\r\n    doReplace(\"The ${person} jumps over the lazy dog. 1234567890.\", \"The ${person} jumps over the ${target}. ${undefined.number:-1234567890}.\", true);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\StringSubstitutorTest.java",
  "methodName" : "testReplaceUnknownKeyOnly",
  "sourceCode" : "/**\r\n * Tests unknown key replace.\r\n */\r\n@Test\r\nvoid testReplaceUnknownKeyOnly() throws IOException {\r\n    final String expected = \"${person}\";\r\n    assertEqualsCharSeq(expected, replace(new StringSubstitutor(values), expected));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\StringSubstitutorTest.java",
  "methodName" : "testReplaceUnknownKeyOnlyExtraFirst",
  "sourceCode" : "/**\r\n * Tests unknown key replace.\r\n */\r\n@Test\r\nvoid testReplaceUnknownKeyOnlyExtraFirst() throws IOException {\r\n    final String expected = \".${person}\";\r\n    assertEqualsCharSeq(expected, replace(new StringSubstitutor(values), expected));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\StringSubstitutorTest.java",
  "methodName" : "testReplaceUnknownKeyOnlyExtraLast",
  "sourceCode" : "/**\r\n * Tests unknown key replace.\r\n */\r\n@Test\r\nvoid testReplaceUnknownKeyOnlyExtraLast() throws IOException {\r\n    final String expected = \"${person}.\";\r\n    assertEqualsCharSeq(expected, replace(new StringSubstitutor(values), expected));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\StringSubstitutorTest.java",
  "methodName" : "testReplaceUnknownShortestKeyOnly",
  "sourceCode" : "/**\r\n * Tests unknown key replace.\r\n */\r\n@Test\r\nvoid testReplaceUnknownShortestKeyOnly() throws IOException {\r\n    final String expected = \"${U}\";\r\n    assertEqualsCharSeq(expected, replace(new StringSubstitutor(values), expected));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\StringSubstitutorTest.java",
  "methodName" : "testReplaceUnknownShortestKeyOnlyExtraFirst",
  "sourceCode" : "/**\r\n * Tests unknown key replace.\r\n */\r\n@Test\r\nvoid testReplaceUnknownShortestKeyOnlyExtraFirst() throws IOException {\r\n    final String expected = \".${U}\";\r\n    assertEqualsCharSeq(expected, replace(new StringSubstitutor(values), expected));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\StringSubstitutorTest.java",
  "methodName" : "testReplaceUnknownShortestKeyOnlyExtraLast",
  "sourceCode" : "/**\r\n * Tests unknown key replace.\r\n */\r\n@Test\r\nvoid testReplaceUnknownShortestKeyOnlyExtraLast() throws IOException {\r\n    final String expected = \"${U}.\";\r\n    assertEqualsCharSeq(expected, replace(new StringSubstitutor(values), expected));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\StringSubstitutorTest.java",
  "methodName" : "testReplaceVariablesCount1",
  "sourceCode" : "/**\r\n * Tests simple key replace.\r\n */\r\n@Test\r\nvoid testReplaceVariablesCount1() throws IOException {\r\n    doReplace(ACTUAL_ANIMAL, \"${animal}\", false);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\StringSubstitutorTest.java",
  "methodName" : "testReplaceVariablesCount1Escaping2To1",
  "sourceCode" : "/**\r\n * Tests escaping.\r\n */\r\n@Test\r\nvoid testReplaceVariablesCount1Escaping2To1() throws IOException {\r\n    doReplace(\"${a}\", \"$${a}\", false);\r\n    doReplace(\"${animal}\", \"$${animal}\", false);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\StringSubstitutorTest.java",
  "methodName" : "testReplaceVariablesCount1Escaping3To2",
  "sourceCode" : "/**\r\n * Tests escaping.\r\n */\r\n@Test\r\nvoid testReplaceVariablesCount1Escaping3To2() throws IOException {\r\n    doReplace(\"$${a}\", \"$$${a}\", false);\r\n    doReplace(\"$${animal}\", \"$$${animal}\", false);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\StringSubstitutorTest.java",
  "methodName" : "testReplaceVariablesCount1Escaping4To3",
  "sourceCode" : "/**\r\n * Tests escaping.\r\n */\r\n@Test\r\nvoid testReplaceVariablesCount1Escaping4To3() throws IOException {\r\n    doReplace(\"$$${a}\", \"$$$${a}\", false);\r\n    doReplace(\"$$${animal}\", \"$$$${animal}\", false);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\StringSubstitutorTest.java",
  "methodName" : "testReplaceVariablesCount1Escaping5To4",
  "sourceCode" : "/**\r\n * Tests escaping.\r\n */\r\n@Test\r\nvoid testReplaceVariablesCount1Escaping5To4() throws IOException {\r\n    doReplace(\"$$$${a}\", \"$$$$${a}\", false);\r\n    doReplace(\"$$$${animal}\", \"$$$$${animal}\", false);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\StringSubstitutorTest.java",
  "methodName" : "testReplaceVariablesCount1Escaping6To4",
  "sourceCode" : "/**\r\n * Tests escaping.\r\n */\r\n@Test\r\nvoid testReplaceVariablesCount1Escaping6To4() throws IOException {\r\n    doReplace(\"$$$$${a}\", \"$$$$$${a}\", false);\r\n    doReplace(\"$$$$${animal}\", \"$$$$$${animal}\", false);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\StringSubstitutorTest.java",
  "methodName" : "testReplaceVariablesCount2",
  "sourceCode" : "/**\r\n * Tests simple key replace.\r\n */\r\n@Test\r\nvoid testReplaceVariablesCount2() throws IOException {\r\n    // doTestReplace(\"12\", \"${a}${b}\", false);\r\n    doReplace(\"1122\", \"${aa}${bb}\", false);\r\n    doReplace(ACTUAL_ANIMAL + ACTUAL_ANIMAL, \"${animal}${animal}\", false);\r\n    doReplace(ACTUAL_TARGET + ACTUAL_TARGET, \"${target}${target}\", false);\r\n    doReplace(ACTUAL_ANIMAL + ACTUAL_TARGET, \"${animal}${target}\", false);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\StringSubstitutorTest.java",
  "methodName" : "testReplaceVariablesCount2NonAdjacent",
  "sourceCode" : "/**\r\n * Tests simple key replace.\r\n */\r\n@Test\r\nvoid testReplaceVariablesCount2NonAdjacent() throws IOException {\r\n    doReplace(\"1 2\", \"${a} ${b}\", false);\r\n    doReplace(\"11 22\", \"${aa} ${bb}\", false);\r\n    doReplace(ACTUAL_ANIMAL + \" \" + ACTUAL_ANIMAL, \"${animal} ${animal}\", false);\r\n    doReplace(ACTUAL_ANIMAL + \" \" + ACTUAL_ANIMAL, \"${animal} ${animal}\", false);\r\n    doReplace(ACTUAL_ANIMAL + \" \" + ACTUAL_ANIMAL, \"${animal} ${animal}\", false);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\StringSubstitutorTest.java",
  "methodName" : "testReplaceVariablesCount3",
  "sourceCode" : "/**\r\n * Tests simple key replace.\r\n */\r\n@Test\r\nvoid testReplaceVariablesCount3() throws IOException {\r\n    doReplace(\"121\", \"${a}${b}${a}\", false);\r\n    doReplace(\"112211\", \"${aa}${bb}${aa}\", false);\r\n    doReplace(ACTUAL_ANIMAL + ACTUAL_ANIMAL + ACTUAL_ANIMAL, \"${animal}${animal}${animal}\", false);\r\n    doReplace(ACTUAL_TARGET + ACTUAL_TARGET + ACTUAL_TARGET, \"${target}${target}${target}\", false);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\StringSubstitutorTest.java",
  "methodName" : "testReplaceVariablesCount3NonAdjacent",
  "sourceCode" : "/**\r\n * Tests simple key replace.\r\n */\r\n@Test\r\nvoid testReplaceVariablesCount3NonAdjacent() throws IOException {\r\n    doReplace(\"1 2 1\", \"${a} ${b} ${a}\", false);\r\n    doReplace(\"11 22 11\", \"${aa} ${bb} ${aa}\", false);\r\n    doReplace(ACTUAL_ANIMAL + \" \" + ACTUAL_ANIMAL + \" \" + ACTUAL_ANIMAL, \"${animal} ${animal} ${animal}\", false);\r\n    doReplace(ACTUAL_TARGET + \" \" + ACTUAL_TARGET + \" \" + ACTUAL_TARGET, \"${target} ${target} ${target}\", false);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\StringSubstitutorTest.java",
  "methodName" : "testReplaceWeirdPattens",
  "sourceCode" : "/**\r\n * Tests interpolation with weird boundary patterns.\r\n */\r\n@Test\r\nvoid testReplaceWeirdPattens() throws IOException {\r\n    doNotReplace(StringUtils.EMPTY);\r\n    doNotReplace(EMPTY_EXPR);\r\n    doNotReplace(\"${ }\");\r\n    doNotReplace(\"${\\t}\");\r\n    doNotReplace(\"${\\n}\");\r\n    doNotReplace(\"${\\b}\");\r\n    doNotReplace(\"${\");\r\n    doNotReplace(\"$}\");\r\n    doNotReplace(\"$$}\");\r\n    doNotReplace(\"}\");\r\n    doNotReplace(\"${}$\");\r\n    doNotReplace(\"${}$$\");\r\n    doNotReplace(\"${${\");\r\n    doNotReplace(\"${${}}\");\r\n    doNotReplace(\"${$${}}\");\r\n    doNotReplace(\"${$$${}}\");\r\n    doNotReplace(\"${$$${$}}\");\r\n    doNotReplace(\"${${}}\");\r\n    doNotReplace(\"${${ }}\");\r\n    //\r\n    doNotReplace(\"${$${a}}\");\r\n    doNotReplace(\"${$$${a}}\");\r\n    doNotReplace(\"${${a}}\");\r\n    doNotReplace(\"${${${a}\");\r\n    doNotReplace(\"${ ${a}\");\r\n    doNotReplace(\"${ ${ ${a}\");\r\n    //\r\n    doReplace(\"${1}\", \"$${${a}}\", false);\r\n    doReplace(\"${ 1}\", \"$${ ${a}}\", false);\r\n    doReplace(\"${12}\", \"$${${a}${b}}\", false);\r\n    doReplace(\"${ 1 2 }\", \"$${ ${a} ${b} }\", false);\r\n    doReplace(\"${${${a}2\", \"${${${a}${b}\", false);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\StringSubstitutorTest.java",
  "methodName" : "testResolveVariable",
  "sourceCode" : "/**\r\n * Tests protected.\r\n */\r\n@Test\r\nvoid testResolveVariable() {\r\n    final TextStringBuilder builder = new TextStringBuilder(\"Hi ${name}!\");\r\n    final Map<String, String> map = new HashMap<>();\r\n    map.put(\"name\", \"commons\");\r\n    final StringSubstitutor sub = new StringSubstitutor(map) {\r\n\r\n        @Override\r\n        protected String resolveVariable(final String variableName, final TextStringBuilder buf, final int startPos, final int endPos) {\r\n            assertEquals(\"name\", variableName);\r\n            assertSame(builder, buf);\r\n            assertEquals(3, startPos);\r\n            assertEquals(10, endPos);\r\n            return \"jakarta\";\r\n        }\r\n    };\r\n    sub.replaceIn(builder);\r\n    assertEqualsCharSeq(\"Hi jakarta!\", builder.toString());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\StringSubstitutorTest.java",
  "methodName" : "testSamePrefixAndSuffix",
  "sourceCode" : "@Test\r\nvoid testSamePrefixAndSuffix() {\r\n    final Map<String, String> map = new HashMap<>();\r\n    map.put(\"greeting\", \"Hello\");\r\n    map.put(\" there \", \"XXX\");\r\n    map.put(\"name\", \"commons\");\r\n    assertEqualsCharSeq(\"Hi commons!\", StringSubstitutor.replace(\"Hi @name@!\", map, \"@\", \"@\"));\r\n    assertEqualsCharSeq(\"Hello there commons!\", StringSubstitutor.replace(\"@greeting@ there @name@!\", map, \"@\", \"@\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\StringSubstitutorTest.java",
  "methodName" : "testStaticReplace",
  "sourceCode" : "/**\r\n * Tests static.\r\n */\r\n@Test\r\nvoid testStaticReplace() {\r\n    final Map<String, String> map = new HashMap<>();\r\n    map.put(\"name\", \"commons\");\r\n    assertEqualsCharSeq(\"Hi commons!\", StringSubstitutor.replace(\"Hi ${name}!\", map));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\StringSubstitutorTest.java",
  "methodName" : "testStaticReplacePrefixSuffix",
  "sourceCode" : "/**\r\n * Tests static.\r\n */\r\n@Test\r\nvoid testStaticReplacePrefixSuffix() {\r\n    final Map<String, String> map = new HashMap<>();\r\n    map.put(\"name\", \"commons\");\r\n    assertEqualsCharSeq(\"Hi commons!\", StringSubstitutor.replace(\"Hi <name>!\", map, \"<\", \">\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\StringSubstitutorTest.java",
  "methodName" : "testStaticReplaceSystemProperties",
  "sourceCode" : "/**\r\n * Tests interpolation with system properties.\r\n */\r\n@Test\r\nvoid testStaticReplaceSystemProperties() {\r\n    final TextStringBuilder buf = new TextStringBuilder();\r\n    buf.append(\"Hi \").append(SystemProperties.getUserName());\r\n    buf.append(\", you are working with \");\r\n    buf.append(SystemProperties.getOsName());\r\n    buf.append(\", your home directory is \");\r\n    buf.append(SystemProperties.getUserHome()).append('.');\r\n    assertEqualsCharSeq(buf.toString(), StringSubstitutor.replaceSystemProperties(\"Hi ${user.name}, you are \" + \"working with ${os.name}, your home directory is ${user.home}.\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\StringSubstitutorTest.java",
  "methodName" : "testStaticReplaceSystemPropertiesWithUpdate",
  "sourceCode" : "/**\r\n * Tests interpolation with system properties.\r\n */\r\n@Test\r\nvoid testStaticReplaceSystemPropertiesWithUpdate() {\r\n    System.setProperty(\"foo\", \"bar1\");\r\n    try {\r\n        assertEqualsCharSeq(\"bar1\", StringSubstitutor.replaceSystemProperties(\"${foo}\"));\r\n        System.setProperty(\"foo\", \"bar2\");\r\n        assertEqualsCharSeq(\"bar2\", StringSubstitutor.replaceSystemProperties(\"${foo}\"));\r\n    } finally {\r\n        System.getProperties().remove(\"foo\");\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\StringSubstitutorTest.java",
  "methodName" : "testSubstituteDefaultProperties",
  "sourceCode" : "/**\r\n * Test the replace of a properties object\r\n */\r\n@Test\r\nvoid testSubstituteDefaultProperties() {\r\n    final String org = \"${doesnotwork}\";\r\n    System.setProperty(\"doesnotwork\", \"It works!\");\r\n    // create a new Properties object with the System.getProperties as default\r\n    final Properties props = new Properties(System.getProperties());\r\n    assertEqualsCharSeq(\"It works!\", StringSubstitutor.replace(org, props));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\StringSubstitutorTest.java",
  "methodName" : "testSubstitutePreserveEscape",
  "sourceCode" : "@Test\r\nvoid testSubstitutePreserveEscape() throws IOException {\r\n    final String org = \"${not-escaped} $${escaped}\";\r\n    final Map<String, String> map = new HashMap<>();\r\n    map.put(\"not-escaped\", \"value\");\r\n    final StringSubstitutor sub = new StringSubstitutor(map, \"${\", \"}\", '$');\r\n    assertFalse(sub.isPreserveEscapes());\r\n    assertEqualsCharSeq(\"value ${escaped}\", replace(sub, org));\r\n    sub.setPreserveEscapes(true);\r\n    assertTrue(sub.isPreserveEscapes());\r\n    assertEqualsCharSeq(\"value $${escaped}\", replace(sub, org));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\StringSubstitutorWithInterpolatorStringLookupTest.java",
  "methodName" : "testCustomFunctionWithDefaults",
  "sourceCode" : "@Test\r\nvoid testCustomFunctionWithDefaults() {\r\n    testCustomFunctionWithDefaults(true);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\StringSubstitutorWithInterpolatorStringLookupTest.java",
  "methodName" : "testCustomFunctionWithoutDefaults",
  "sourceCode" : "@Test\r\nvoid testCustomFunctionWithoutDefaults() {\r\n    testCustomFunctionWithDefaults(false);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\StringSubstitutorWithInterpolatorStringLookupTest.java",
  "methodName" : "testCustomMapWithDefaults",
  "sourceCode" : "@Test\r\nvoid testCustomMapWithDefaults() {\r\n    testCustomMapWithDefaults(true);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\StringSubstitutorWithInterpolatorStringLookupTest.java",
  "methodName" : "testCustomMapWithoutDefaults",
  "sourceCode" : "@Test\r\nvoid testCustomMapWithoutDefaults() {\r\n    testCustomMapWithDefaults(false);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\StringSubstitutorWithInterpolatorStringLookupTest.java",
  "methodName" : "testDefaultInterpolator",
  "sourceCode" : "@Test\r\nvoid testDefaultInterpolator() {\r\n    // Used to cut and paste into the docs.\r\n    // @formatter:off\r\n    final StringSubstitutor interpolator = StringSubstitutor.createInterpolator();\r\n    final String text = interpolator.replace(\"Base64 Decoder:        ${base64Decoder:SGVsbG9Xb3JsZCE=}\\n\" + \"Base64 Encoder:        ${base64Encoder:HelloWorld!}\\n\" + \"Java Constant:         ${const:java.awt.event.KeyEvent.VK_ESCAPE}\\n\" + \"Date:                  ${date:yyyy-MM-dd}\\n\" + \"Environment Variable:  ${env:USERNAME}\\n\" + \"File Content:          ${file:UTF-8:src/test/resources/org/apache/commons/text/document.properties}\\n\" + \"Java:                  ${java:version}\\n\" + \"Localhost:             ${localhost:canonical-name}\\n\" + \"Properties File:       ${properties:src/test/resources/org/apache/commons/text/document.properties::mykey}\\n\" + \"Resource Bundle:       ${resourceBundle:org.apache.commons.text.example.testResourceBundleLookup:mykey}\\n\" + \"System Property:       ${sys:user.dir}\\n\" + \"URL Decoder:           ${urlDecoder:Hello%20World%21}\\n\" + \"URL Encoder:           ${urlEncoder:Hello World!}\\n\" + \"XML XPath:             ${xml:src/test/resources/org/apache/commons/text/document.xml:/root/path/to/node}\\n\");\r\n    // @formatter:on\r\n    Assertions.assertNotNull(text);\r\n    // TEXT-171:\r\n    Assertions.assertFalse(text.contains(\"${base64Decoder:SGVsbG9Xb3JsZCE=}\"));\r\n    Assertions.assertFalse(text.contains(\"${base64Encoder:HelloWorld!}\"));\r\n    Assertions.assertFalse(text.contains(\"${urlDecoder:Hello%20World%21}\"));\r\n    Assertions.assertFalse(text.contains(\"${urlEncoder:Hello World!}\"));\r\n    Assertions.assertFalse(text.contains(\"${resourceBundle:org.apache.commons.text.example.testResourceBundleLookup:mykey}\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\StringSubstitutorWithInterpolatorStringLookupTest.java",
  "methodName" : "testDefaultValueForMissingKeyInResourceBundle",
  "sourceCode" : "@Test\r\nvoid testDefaultValueForMissingKeyInResourceBundle() {\r\n    final StringLookup interpolatorStringLookup = StringLookupFactory.INSTANCE.interpolatorStringLookup(StringLookupFactory.INSTANCE.resourceBundleStringLookup(\"org.apache.commons.text.example.testResourceBundleLookup\"));\r\n    assertEquals(\"${missingKey:-defaultValue}\", interpolatorStringLookup.apply(\"keyWithMissingKey\"));\r\n    assertEquals(\"${missingKey:-defaultValue}\", interpolatorStringLookup.lookup(\"keyWithMissingKey\"));\r\n    final StringSubstitutor stringSubstitutor = new StringSubstitutor(interpolatorStringLookup);\r\n    // The following would throw a MissingResourceException before TEXT-165.\r\n    assertEquals(\"defaultValue\", stringSubstitutor.replace(\"${keyWithMissingKey}\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\StringSubstitutorWithInterpolatorStringLookupTest.java",
  "methodName" : "testDnsLookup",
  "sourceCode" : "@Test\r\nvoid testDnsLookup() throws UnknownHostException {\r\n    final StringSubstitutor strSubst = new StringSubstitutor(createInterpolatorWithLookups(DefaultStringLookup.DNS));\r\n    final String hostName = InetAddress.getLocalHost().getHostName();\r\n    Assertions.assertEquals(InetAddress.getByName(hostName).getHostAddress(), strSubst.replace(\"${dns:\" + hostName + \"}\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\StringSubstitutorWithInterpolatorStringLookupTest.java",
  "methodName" : "testDnsLookup_disabledByDefault",
  "sourceCode" : "@Test\r\nvoid testDnsLookup_disabledByDefault() throws UnknownHostException {\r\n    final StringSubstitutor strSubst = StringSubstitutor.createInterpolator();\r\n    final String hostName = InetAddress.getLocalHost().getHostName();\r\n    final String input = \"${dns:\" + hostName + \"}\";\r\n    Assertions.assertEquals(input, strSubst.replace(input));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\StringSubstitutorWithInterpolatorStringLookupTest.java",
  "methodName" : "testDnsLookupAddress",
  "sourceCode" : "@Test\r\nvoid testDnsLookupAddress() throws UnknownHostException {\r\n    final StringSubstitutor strSubst = new StringSubstitutor(createInterpolatorWithLookups(DefaultStringLookup.DNS));\r\n    Assertions.assertEquals(InetAddress.getByName(\"apache.org\").getHostAddress(), strSubst.replace(\"${dns:address|apache.org}\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\StringSubstitutorWithInterpolatorStringLookupTest.java",
  "methodName" : "testDnsLookupCanonicalName",
  "sourceCode" : "@Test\r\nvoid testDnsLookupCanonicalName() throws UnknownHostException {\r\n    final StringSubstitutor strSubst = new StringSubstitutor(createInterpolatorWithLookups(DefaultStringLookup.DNS));\r\n    final String address = InetAddress.getLocalHost().getHostAddress();\r\n    final InetAddress inetAddress = InetAddress.getByName(address);\r\n    Assertions.assertEquals(inetAddress.getCanonicalHostName(), strSubst.replace(\"${dns:canonical-name|\" + address + \"}\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\StringSubstitutorWithInterpolatorStringLookupTest.java",
  "methodName" : "testDnsLookupName",
  "sourceCode" : "@Test\r\nvoid testDnsLookupName() throws UnknownHostException {\r\n    final StringSubstitutor strSubst = new StringSubstitutor(createInterpolatorWithLookups(DefaultStringLookup.DNS));\r\n    final String address = InetAddress.getLocalHost().getHostAddress();\r\n    final InetAddress inetAddress = InetAddress.getByName(address);\r\n    Assertions.assertEquals(inetAddress.getHostName(), strSubst.replace(\"${dns:name|\" + address + \"}\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\StringSubstitutorWithInterpolatorStringLookupTest.java",
  "methodName" : "testDnsLookupNameUntrimmed",
  "sourceCode" : "@Test\r\nvoid testDnsLookupNameUntrimmed() throws UnknownHostException {\r\n    final StringSubstitutor strSubst = new StringSubstitutor(createInterpolatorWithLookups(DefaultStringLookup.DNS));\r\n    final String address = InetAddress.getLocalHost().getHostAddress();\r\n    final InetAddress inetAddress = InetAddress.getByName(address);\r\n    Assertions.assertEquals(inetAddress.getHostName(), strSubst.replace(\"${dns:name| \" + address + \" }\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\StringSubstitutorWithInterpolatorStringLookupTest.java",
  "methodName" : "testDnsLookupUnknown",
  "sourceCode" : "@Test\r\nvoid testDnsLookupUnknown() {\r\n    final StringSubstitutor strSubst = new StringSubstitutor(createInterpolatorWithLookups(DefaultStringLookup.DNS));\r\n    final String unknown = \"${dns: u n k n o w n}\";\r\n    Assertions.assertEquals(unknown, strSubst.replace(unknown));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\StringSubstitutorWithInterpolatorStringLookupTest.java",
  "methodName" : "testJavaScript",
  "sourceCode" : "@Test\r\nvoid testJavaScript() {\r\n    final StringSubstitutor strSubst = new StringSubstitutor(createInterpolatorWithLookups(DefaultStringLookup.SCRIPT));\r\n    Assertions.assertEquals(\"Hello World!\", strSubst.replace(\"${script:javascript:\\\"Hello World!\\\"}\"));\r\n    Assertions.assertEquals(\"7\", strSubst.replace(\"${script:javascript:3 + 4}\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\StringSubstitutorWithInterpolatorStringLookupTest.java",
  "methodName" : "testJavaScript_disabledByDefault",
  "sourceCode" : "@Test\r\nvoid testJavaScript_disabledByDefault() {\r\n    final StringSubstitutor strSubst = StringSubstitutor.createInterpolator();\r\n    Assertions.assertEquals(\"${script:javascript:3 + 4}\", strSubst.replace(\"${script:javascript:3 + 4}\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\StringSubstitutorWithInterpolatorStringLookupTest.java",
  "methodName" : "testLocalHostLookup_Address",
  "sourceCode" : "@Test\r\nvoid testLocalHostLookup_Address() throws UnknownHostException {\r\n    final StringSubstitutor strSubst = StringSubstitutor.createInterpolator();\r\n    Assertions.assertEquals(InetAddress.getLocalHost().getHostAddress(), strSubst.replace(\"${localhost:address}\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\StringSubstitutorWithInterpolatorStringLookupTest.java",
  "methodName" : "testLocalHostLookup_CanonicalName",
  "sourceCode" : "@Test\r\nvoid testLocalHostLookup_CanonicalName() throws UnknownHostException {\r\n    final StringSubstitutor strSubst = StringSubstitutor.createInterpolator();\r\n    Assertions.assertEquals(InetAddress.getLocalHost().getCanonicalHostName(), strSubst.replace(\"${localhost:canonical-name}\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\StringSubstitutorWithInterpolatorStringLookupTest.java",
  "methodName" : "testLocalHostLookup_Name",
  "sourceCode" : "@Test\r\nvoid testLocalHostLookup_Name() throws UnknownHostException {\r\n    final StringSubstitutor strSubst = StringSubstitutor.createInterpolator();\r\n    Assertions.assertEquals(InetAddress.getLocalHost().getHostName(), strSubst.replace(\"${localhost:name}\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\StringSubstitutorWithInterpolatorStringLookupTest.java",
  "methodName" : "testMapAndSystemProperty",
  "sourceCode" : "@Test\r\nvoid testMapAndSystemProperty() {\r\n    final String key = \"key\";\r\n    final String value = \"value\";\r\n    final Map<String, String> map = new HashMap<>();\r\n    map.put(key, value);\r\n    final StringSubstitutor strSubst = new StringSubstitutor(StringLookupFactory.INSTANCE.interpolatorStringLookup(map));\r\n    final String spKey = \"user.name\";\r\n    Assertions.assertEquals(System.getProperty(spKey), strSubst.replace(\"${sys:\" + spKey + \"}\"));\r\n    Assertions.assertEquals(value, strSubst.replace(\"${\" + key + \"}\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\StringSubstitutorWithInterpolatorStringLookupTest.java",
  "methodName" : "testSystemProperty",
  "sourceCode" : "@Test\r\nvoid testSystemProperty() {\r\n    final StringSubstitutor strSubst = StringSubstitutor.createInterpolator();\r\n    final String spKey = \"user.name\";\r\n    Assertions.assertEquals(System.getProperty(spKey), strSubst.replace(\"${sys:\" + spKey + \"}\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\StringSubstitutorWithInterpolatorStringLookupTest.java",
  "methodName" : "testSystemPropertyDefaultStringLookup",
  "sourceCode" : "@Test\r\nvoid testSystemPropertyDefaultStringLookup() {\r\n    final StringSubstitutor strSubst = new StringSubstitutor(StringLookupFactory.INSTANCE.interpolatorStringLookup(StringLookupFactory.INSTANCE.systemPropertyStringLookup()));\r\n    final String spKey = \"user.name\";\r\n    Assertions.assertEquals(System.getProperty(spKey), strSubst.replace(\"${\" + spKey + \"}\"));\r\n    Assertions.assertEquals(System.getProperty(spKey), strSubst.replace(\"${sys:\" + spKey + \"}\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\StringTokenizerTest.java",
  "methodName" : "test1",
  "sourceCode" : "@Test\r\nvoid test1() {\r\n    final String input = \"a;b;c;\\\"d;\\\"\\\"e\\\";f; ; ;  \";\r\n    final StringTokenizer tok = new StringTokenizer(input);\r\n    tok.setDelimiterChar(';');\r\n    tok.setQuoteChar('\"');\r\n    tok.setIgnoredMatcher(StringMatcherFactory.INSTANCE.trimMatcher());\r\n    tok.setIgnoreEmptyTokens(false);\r\n    final String[] tokens = tok.getTokenArray();\r\n    final String[] expected = { \"a\", \"b\", \"c\", \"d;\\\"e\", \"f\", \"\", \"\", \"\" };\r\n    assertEquals(expected.length, tokens.length, Arrays.toString(tokens));\r\n    for (int i = 0; i < expected.length; i++) {\r\n        assertEquals(expected[i], tokens[i], \"token[\" + i + \"] was '\" + tokens[i] + \"' but was expected to be '\" + expected[i] + \"'\");\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\StringTokenizerTest.java",
  "methodName" : "test2",
  "sourceCode" : "@Test\r\nvoid test2() {\r\n    final String input = \"a;b;c ;\\\"d;\\\"\\\"e\\\";f; ; ;\";\r\n    final StringTokenizer tok = new StringTokenizer(input);\r\n    tok.setDelimiterChar(';');\r\n    tok.setQuoteChar('\"');\r\n    tok.setIgnoredMatcher(StringMatcherFactory.INSTANCE.noneMatcher());\r\n    tok.setIgnoreEmptyTokens(false);\r\n    final String[] tokens = tok.getTokenArray();\r\n    final String[] expected = { \"a\", \"b\", \"c \", \"d;\\\"e\", \"f\", \" \", \" \", \"\" };\r\n    assertEquals(expected.length, tokens.length, Arrays.toString(tokens));\r\n    for (int i = 0; i < expected.length; i++) {\r\n        assertEquals(expected[i], tokens[i], \"token[\" + i + \"] was '\" + tokens[i] + \"' but was expected to be '\" + expected[i] + \"'\");\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\StringTokenizerTest.java",
  "methodName" : "test3",
  "sourceCode" : "@Test\r\nvoid test3() {\r\n    final String input = \"a;b; c;\\\"d;\\\"\\\"e\\\";f; ; ;\";\r\n    final StringTokenizer tok = new StringTokenizer(input);\r\n    tok.setDelimiterChar(';');\r\n    tok.setQuoteChar('\"');\r\n    tok.setIgnoredMatcher(StringMatcherFactory.INSTANCE.noneMatcher());\r\n    tok.setIgnoreEmptyTokens(false);\r\n    final String[] tokens = tok.getTokenArray();\r\n    final String[] expected = { \"a\", \"b\", \" c\", \"d;\\\"e\", \"f\", \" \", \" \", \"\" };\r\n    assertEquals(expected.length, tokens.length, Arrays.toString(tokens));\r\n    for (int i = 0; i < expected.length; i++) {\r\n        assertEquals(expected[i], tokens[i], \"token[\" + i + \"] was '\" + tokens[i] + \"' but was expected to be '\" + expected[i] + \"'\");\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\StringTokenizerTest.java",
  "methodName" : "test4",
  "sourceCode" : "@Test\r\nvoid test4() {\r\n    final String input = \"a;b; c;\\\"d;\\\"\\\"e\\\";f; ; ;\";\r\n    final StringTokenizer tok = new StringTokenizer(input);\r\n    tok.setDelimiterChar(';');\r\n    tok.setQuoteChar('\"');\r\n    tok.setIgnoredMatcher(StringMatcherFactory.INSTANCE.trimMatcher());\r\n    tok.setIgnoreEmptyTokens(true);\r\n    final String[] tokens = tok.getTokenArray();\r\n    final String[] expected = { \"a\", \"b\", \"c\", \"d;\\\"e\", \"f\" };\r\n    assertEquals(expected.length, tokens.length, Arrays.toString(tokens));\r\n    for (int i = 0; i < expected.length; i++) {\r\n        assertEquals(expected[i], tokens[i], \"token[\" + i + \"] was '\" + tokens[i] + \"' but was expected to be '\" + expected[i] + \"'\");\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\StringTokenizerTest.java",
  "methodName" : "test5",
  "sourceCode" : "@Test\r\nvoid test5() {\r\n    final String input = \"a;b; c;\\\"d;\\\"\\\"e\\\";f; ; ;\";\r\n    final StringTokenizer tok = new StringTokenizer(input);\r\n    tok.setDelimiterChar(';');\r\n    tok.setQuoteChar('\"');\r\n    tok.setIgnoredMatcher(StringMatcherFactory.INSTANCE.trimMatcher());\r\n    tok.setIgnoreEmptyTokens(false);\r\n    tok.setEmptyTokenAsNull(true);\r\n    final String[] tokens = tok.getTokenArray();\r\n    final String[] expected = { \"a\", \"b\", \"c\", \"d;\\\"e\", \"f\", null, null, null };\r\n    assertEquals(expected.length, tokens.length, Arrays.toString(tokens));\r\n    for (int i = 0; i < expected.length; i++) {\r\n        assertEquals(expected[i], tokens[i], \"token[\" + i + \"] was '\" + tokens[i] + \"' but was expected to be '\" + expected[i] + \"'\");\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\StringTokenizerTest.java",
  "methodName" : "test6",
  "sourceCode" : "@Test\r\nvoid test6() {\r\n    final String input = \"a;b; c;\\\"d;\\\"\\\"e\\\";f; ; ;\";\r\n    final StringTokenizer tok = new StringTokenizer(input);\r\n    tok.setDelimiterChar(';');\r\n    tok.setQuoteChar('\"');\r\n    tok.setIgnoredMatcher(StringMatcherFactory.INSTANCE.trimMatcher());\r\n    tok.setIgnoreEmptyTokens(false);\r\n    // tok.setTreatingEmptyAsNull(true);\r\n    final String[] tokens = tok.getTokenArray();\r\n    final String[] expected = { \"a\", \"b\", \" c\", \"d;\\\"e\", \"f\", null, null, null };\r\n    int nextCount = 0;\r\n    while (tok.hasNext()) {\r\n        tok.next();\r\n        nextCount++;\r\n    }\r\n    int prevCount = 0;\r\n    while (tok.hasPrevious()) {\r\n        tok.previous();\r\n        prevCount++;\r\n    }\r\n    assertEquals(expected.length, tokens.length, Arrays.toString(tokens));\r\n    assertEquals(nextCount, expected.length, \"could not cycle through entire token list using the 'hasNext' and 'next' methods\");\r\n    assertEquals(prevCount, expected.length, \"could not cycle through entire token list using the 'hasPrevious' and 'previous' methods\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\StringTokenizerTest.java",
  "methodName" : "test7",
  "sourceCode" : "@Test\r\nvoid test7() {\r\n    final String input = \"a   b c \\\"d e\\\" f \";\r\n    final StringTokenizer tok = new StringTokenizer(input);\r\n    tok.setDelimiterMatcher(StringMatcherFactory.INSTANCE.spaceMatcher());\r\n    tok.setQuoteMatcher(StringMatcherFactory.INSTANCE.doubleQuoteMatcher());\r\n    tok.setIgnoredMatcher(StringMatcherFactory.INSTANCE.noneMatcher());\r\n    tok.setIgnoreEmptyTokens(false);\r\n    final String[] tokens = tok.getTokenArray();\r\n    final String[] expected = { \"a\", \"\", \"\", \"b\", \"c\", \"d e\", \"f\", \"\" };\r\n    assertEquals(expected.length, tokens.length, Arrays.toString(tokens));\r\n    for (int i = 0; i < expected.length; i++) {\r\n        assertEquals(expected[i], tokens[i], \"token[\" + i + \"] was '\" + tokens[i] + \"' but was expected to be '\" + expected[i] + \"'\");\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\StringTokenizerTest.java",
  "methodName" : "test8",
  "sourceCode" : "@Test\r\nvoid test8() {\r\n    final String input = \"a   b c \\\"d e\\\" f \";\r\n    final StringTokenizer tok = new StringTokenizer(input);\r\n    tok.setDelimiterMatcher(StringMatcherFactory.INSTANCE.spaceMatcher());\r\n    tok.setQuoteMatcher(StringMatcherFactory.INSTANCE.doubleQuoteMatcher());\r\n    tok.setIgnoredMatcher(StringMatcherFactory.INSTANCE.noneMatcher());\r\n    tok.setIgnoreEmptyTokens(true);\r\n    final String[] tokens = tok.getTokenArray();\r\n    final String[] expected = { \"a\", \"b\", \"c\", \"d e\", \"f\" };\r\n    assertEquals(expected.length, tokens.length, Arrays.toString(tokens));\r\n    for (int i = 0; i < expected.length; i++) {\r\n        assertEquals(expected[i], tokens[i], \"token[\" + i + \"] was '\" + tokens[i] + \"' but was expected to be '\" + expected[i] + \"'\");\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\StringTokenizerTest.java",
  "methodName" : "testBasic1",
  "sourceCode" : "@Test\r\nvoid testBasic1() {\r\n    final String input = \"a  b c\";\r\n    final StringTokenizer tok = new StringTokenizer(input);\r\n    assertEquals(\"a\", tok.next());\r\n    assertEquals(\"b\", tok.next());\r\n    assertEquals(\"c\", tok.next());\r\n    assertFalse(tok.hasNext());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\StringTokenizerTest.java",
  "methodName" : "testBasic2",
  "sourceCode" : "@Test\r\nvoid testBasic2() {\r\n    final String input = \"a \\nb\\fc\";\r\n    final StringTokenizer tok = new StringTokenizer(input);\r\n    assertEquals(\"a\", tok.next());\r\n    assertEquals(\"b\", tok.next());\r\n    assertEquals(\"c\", tok.next());\r\n    assertFalse(tok.hasNext());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\StringTokenizerTest.java",
  "methodName" : "testBasic3",
  "sourceCode" : "@Test\r\nvoid testBasic3() {\r\n    final String input = \"a \\nb\\u0001\\fc\";\r\n    final StringTokenizer tok = new StringTokenizer(input);\r\n    assertEquals(\"a\", tok.next());\r\n    assertEquals(\"b\\u0001\", tok.next());\r\n    assertEquals(\"c\", tok.next());\r\n    assertFalse(tok.hasNext());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\StringTokenizerTest.java",
  "methodName" : "testBasic4",
  "sourceCode" : "@Test\r\nvoid testBasic4() {\r\n    final String input = \"a \\\"b\\\" c\";\r\n    final StringTokenizer tok = new StringTokenizer(input);\r\n    assertEquals(\"a\", tok.next());\r\n    assertEquals(\"\\\"b\\\"\", tok.next());\r\n    assertEquals(\"c\", tok.next());\r\n    assertFalse(tok.hasNext());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\StringTokenizerTest.java",
  "methodName" : "testBasic5",
  "sourceCode" : "@Test\r\nvoid testBasic5() {\r\n    final String input = \"a:b':c\";\r\n    final StringTokenizer tok = new StringTokenizer(input, ':', '\\'');\r\n    assertEquals(\"a\", tok.next());\r\n    assertEquals(\"b'\", tok.next());\r\n    assertEquals(\"c\", tok.next());\r\n    assertFalse(tok.hasNext());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\StringTokenizerTest.java",
  "methodName" : "testBasicDelim1",
  "sourceCode" : "@Test\r\nvoid testBasicDelim1() {\r\n    final String input = \"a:b:c\";\r\n    final StringTokenizer tok = new StringTokenizer(input, ':');\r\n    assertEquals(\"a\", tok.next());\r\n    assertEquals(\"b\", tok.next());\r\n    assertEquals(\"c\", tok.next());\r\n    assertFalse(tok.hasNext());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\StringTokenizerTest.java",
  "methodName" : "testBasicDelim2",
  "sourceCode" : "@Test\r\nvoid testBasicDelim2() {\r\n    final String input = \"a:b:c\";\r\n    final StringTokenizer tok = new StringTokenizer(input, ',');\r\n    assertEquals(\"a:b:c\", tok.next());\r\n    assertFalse(tok.hasNext());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\StringTokenizerTest.java",
  "methodName" : "testBasicEmpty1",
  "sourceCode" : "@Test\r\nvoid testBasicEmpty1() {\r\n    final String input = \"a  b c\";\r\n    final StringTokenizer tok = new StringTokenizer(input);\r\n    tok.setIgnoreEmptyTokens(false);\r\n    assertEquals(\"a\", tok.next());\r\n    assertEquals(\"\", tok.next());\r\n    assertEquals(\"b\", tok.next());\r\n    assertEquals(\"c\", tok.next());\r\n    assertFalse(tok.hasNext());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\StringTokenizerTest.java",
  "methodName" : "testBasicEmpty2",
  "sourceCode" : "@Test\r\nvoid testBasicEmpty2() {\r\n    final String input = \"a  b c\";\r\n    final StringTokenizer tok = new StringTokenizer(input);\r\n    tok.setIgnoreEmptyTokens(false);\r\n    tok.setEmptyTokenAsNull(true);\r\n    assertEquals(\"a\", tok.next());\r\n    assertNull(tok.next());\r\n    assertEquals(\"b\", tok.next());\r\n    assertEquals(\"c\", tok.next());\r\n    assertFalse(tok.hasNext());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\StringTokenizerTest.java",
  "methodName" : "testBasicIgnoreTrimmed1",
  "sourceCode" : "@Test\r\nvoid testBasicIgnoreTrimmed1() {\r\n    final String input = \"a: bIGNOREc : \";\r\n    final StringTokenizer tok = new StringTokenizer(input, ':');\r\n    tok.setIgnoredMatcher(StringMatcherFactory.INSTANCE.stringMatcher(\"IGNORE\"));\r\n    tok.setTrimmerMatcher(StringMatcherFactory.INSTANCE.trimMatcher());\r\n    tok.setIgnoreEmptyTokens(false);\r\n    tok.setEmptyTokenAsNull(true);\r\n    assertEquals(\"a\", tok.next());\r\n    assertEquals(\"bc\", tok.next());\r\n    assertNull(tok.next());\r\n    assertFalse(tok.hasNext());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\StringTokenizerTest.java",
  "methodName" : "testBasicIgnoreTrimmed2",
  "sourceCode" : "@Test\r\nvoid testBasicIgnoreTrimmed2() {\r\n    final String input = \"IGNOREaIGNORE: IGNORE bIGNOREc IGNORE : IGNORE \";\r\n    final StringTokenizer tok = new StringTokenizer(input, ':');\r\n    tok.setIgnoredMatcher(StringMatcherFactory.INSTANCE.stringMatcher(\"IGNORE\"));\r\n    tok.setTrimmerMatcher(StringMatcherFactory.INSTANCE.trimMatcher());\r\n    tok.setIgnoreEmptyTokens(false);\r\n    tok.setEmptyTokenAsNull(true);\r\n    assertEquals(\"a\", tok.next());\r\n    assertEquals(\"bc\", tok.next());\r\n    assertNull(tok.next());\r\n    assertFalse(tok.hasNext());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\StringTokenizerTest.java",
  "methodName" : "testBasicIgnoreTrimmed3",
  "sourceCode" : "@Test\r\nvoid testBasicIgnoreTrimmed3() {\r\n    final String input = \"IGNOREaIGNORE: IGNORE bIGNOREc IGNORE : IGNORE \";\r\n    final StringTokenizer tok = new StringTokenizer(input, ':');\r\n    tok.setIgnoredMatcher(StringMatcherFactory.INSTANCE.stringMatcher(\"IGNORE\"));\r\n    tok.setIgnoreEmptyTokens(false);\r\n    tok.setEmptyTokenAsNull(true);\r\n    assertEquals(\"a\", tok.next());\r\n    assertEquals(\"  bc  \", tok.next());\r\n    assertEquals(\"  \", tok.next());\r\n    assertFalse(tok.hasNext());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\StringTokenizerTest.java",
  "methodName" : "testBasicIgnoreTrimmed4",
  "sourceCode" : "@Test\r\nvoid testBasicIgnoreTrimmed4() {\r\n    final String input = \"IGNOREaIGNORE: IGNORE 'bIGNOREc'IGNORE'd' IGNORE : IGNORE \";\r\n    final StringTokenizer tok = new StringTokenizer(input, ':', '\\'');\r\n    tok.setIgnoredMatcher(StringMatcherFactory.INSTANCE.stringMatcher(\"IGNORE\"));\r\n    tok.setTrimmerMatcher(StringMatcherFactory.INSTANCE.trimMatcher());\r\n    tok.setIgnoreEmptyTokens(false);\r\n    tok.setEmptyTokenAsNull(true);\r\n    assertEquals(\"a\", tok.next());\r\n    assertEquals(\"bIGNOREcd\", tok.next());\r\n    assertNull(tok.next());\r\n    assertFalse(tok.hasNext());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\StringTokenizerTest.java",
  "methodName" : "testBasicQuoted1",
  "sourceCode" : "@Test\r\nvoid testBasicQuoted1() {\r\n    final String input = \"a 'b' c\";\r\n    final StringTokenizer tok = new StringTokenizer(input, ' ', '\\'');\r\n    assertEquals(\"a\", tok.next());\r\n    assertEquals(\"b\", tok.next());\r\n    assertEquals(\"c\", tok.next());\r\n    assertFalse(tok.hasNext());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\StringTokenizerTest.java",
  "methodName" : "testBasicQuoted2",
  "sourceCode" : "@Test\r\nvoid testBasicQuoted2() {\r\n    final String input = \"a:'b':\";\r\n    final StringTokenizer tok = new StringTokenizer(input, ':', '\\'');\r\n    tok.setIgnoreEmptyTokens(false);\r\n    tok.setEmptyTokenAsNull(true);\r\n    assertEquals(\"a\", tok.next());\r\n    assertEquals(\"b\", tok.next());\r\n    assertNull(tok.next());\r\n    assertFalse(tok.hasNext());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\StringTokenizerTest.java",
  "methodName" : "testBasicQuoted3",
  "sourceCode" : "@Test\r\nvoid testBasicQuoted3() {\r\n    final String input = \"a:'b''c'\";\r\n    final StringTokenizer tok = new StringTokenizer(input, ':', '\\'');\r\n    tok.setIgnoreEmptyTokens(false);\r\n    tok.setEmptyTokenAsNull(true);\r\n    assertEquals(\"a\", tok.next());\r\n    assertEquals(\"b'c\", tok.next());\r\n    assertFalse(tok.hasNext());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\StringTokenizerTest.java",
  "methodName" : "testBasicQuoted4",
  "sourceCode" : "@Test\r\nvoid testBasicQuoted4() {\r\n    final String input = \"a: 'b' 'c' :d\";\r\n    final StringTokenizer tok = new StringTokenizer(input, ':', '\\'');\r\n    tok.setTrimmerMatcher(StringMatcherFactory.INSTANCE.trimMatcher());\r\n    tok.setIgnoreEmptyTokens(false);\r\n    tok.setEmptyTokenAsNull(true);\r\n    assertEquals(\"a\", tok.next());\r\n    assertEquals(\"b c\", tok.next());\r\n    assertEquals(\"d\", tok.next());\r\n    assertFalse(tok.hasNext());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\StringTokenizerTest.java",
  "methodName" : "testBasicQuoted5",
  "sourceCode" : "@Test\r\nvoid testBasicQuoted5() {\r\n    final String input = \"a: 'b'x'c' :d\";\r\n    final StringTokenizer tok = new StringTokenizer(input, ':', '\\'');\r\n    tok.setTrimmerMatcher(StringMatcherFactory.INSTANCE.trimMatcher());\r\n    tok.setIgnoreEmptyTokens(false);\r\n    tok.setEmptyTokenAsNull(true);\r\n    assertEquals(\"a\", tok.next());\r\n    assertEquals(\"bxc\", tok.next());\r\n    assertEquals(\"d\", tok.next());\r\n    assertFalse(tok.hasNext());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\StringTokenizerTest.java",
  "methodName" : "testBasicQuoted6",
  "sourceCode" : "@Test\r\nvoid testBasicQuoted6() {\r\n    final String input = \"a:'b'\\\"c':d\";\r\n    final StringTokenizer tok = new StringTokenizer(input, ':');\r\n    tok.setQuoteMatcher(StringMatcherFactory.INSTANCE.quoteMatcher());\r\n    assertEquals(\"a\", tok.next());\r\n    assertEquals(\"b\\\"c:d\", tok.next());\r\n    assertFalse(tok.hasNext());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\StringTokenizerTest.java",
  "methodName" : "testBasicQuoted7",
  "sourceCode" : "@Test\r\nvoid testBasicQuoted7() {\r\n    final String input = \"a:\\\"There's a reason here\\\":b\";\r\n    final StringTokenizer tok = new StringTokenizer(input, ':');\r\n    tok.setQuoteMatcher(StringMatcherFactory.INSTANCE.quoteMatcher());\r\n    assertEquals(\"a\", tok.next());\r\n    assertEquals(\"There's a reason here\", tok.next());\r\n    assertEquals(\"b\", tok.next());\r\n    assertFalse(tok.hasNext());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\StringTokenizerTest.java",
  "methodName" : "testBasicQuotedTrimmed1",
  "sourceCode" : "@Test\r\nvoid testBasicQuotedTrimmed1() {\r\n    final String input = \"a: 'b' :\";\r\n    final StringTokenizer tok = new StringTokenizer(input, ':', '\\'');\r\n    tok.setTrimmerMatcher(StringMatcherFactory.INSTANCE.trimMatcher());\r\n    tok.setIgnoreEmptyTokens(false);\r\n    tok.setEmptyTokenAsNull(true);\r\n    assertEquals(\"a\", tok.next());\r\n    assertEquals(\"b\", tok.next());\r\n    assertNull(tok.next());\r\n    assertFalse(tok.hasNext());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\StringTokenizerTest.java",
  "methodName" : "testBasicTrimmed1",
  "sourceCode" : "@Test\r\nvoid testBasicTrimmed1() {\r\n    final String input = \"a: b :  \";\r\n    final StringTokenizer tok = new StringTokenizer(input, ':');\r\n    tok.setTrimmerMatcher(StringMatcherFactory.INSTANCE.trimMatcher());\r\n    tok.setIgnoreEmptyTokens(false);\r\n    tok.setEmptyTokenAsNull(true);\r\n    assertEquals(\"a\", tok.next());\r\n    assertEquals(\"b\", tok.next());\r\n    assertNull(tok.next());\r\n    assertFalse(tok.hasNext());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\StringTokenizerTest.java",
  "methodName" : "testBasicTrimmed2",
  "sourceCode" : "@Test\r\nvoid testBasicTrimmed2() {\r\n    final String input = \"a:  b  :\";\r\n    final StringTokenizer tok = new StringTokenizer(input, ':');\r\n    tok.setTrimmerMatcher(StringMatcherFactory.INSTANCE.stringMatcher(\"  \"));\r\n    tok.setIgnoreEmptyTokens(false);\r\n    tok.setEmptyTokenAsNull(true);\r\n    assertEquals(\"a\", tok.next());\r\n    assertEquals(\"b\", tok.next());\r\n    assertNull(tok.next());\r\n    assertFalse(tok.hasNext());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\StringTokenizerTest.java",
  "methodName" : "testChaining",
  "sourceCode" : "@Test\r\nvoid testChaining() {\r\n    final StringTokenizer tok = new StringTokenizer();\r\n    assertEquals(tok, tok.reset());\r\n    assertEquals(tok, tok.reset(\"\"));\r\n    assertEquals(tok, tok.reset(ArrayUtils.EMPTY_CHAR_ARRAY));\r\n    assertEquals(tok, tok.setDelimiterChar(' '));\r\n    assertEquals(tok, tok.setDelimiterString(\" \"));\r\n    assertEquals(tok, tok.setDelimiterMatcher(null));\r\n    assertEquals(tok, tok.setQuoteChar(' '));\r\n    assertEquals(tok, tok.setQuoteMatcher(null));\r\n    assertEquals(tok, tok.setIgnoredChar(' '));\r\n    assertEquals(tok, tok.setIgnoredMatcher(null));\r\n    assertEquals(tok, tok.setTrimmerMatcher(null));\r\n    assertEquals(tok, tok.setEmptyTokenAsNull(false));\r\n    assertEquals(tok, tok.setIgnoreEmptyTokens(false));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\StringTokenizerTest.java",
  "methodName" : "testCloneNotSupportedException",
  "sourceCode" : "/**\r\n * Tests that the {@link StringTokenizer#clone()} clone method catches {@link CloneNotSupportedException} and\r\n * returns {@code null}.\r\n */\r\n@Test\r\nvoid testCloneNotSupportedException() {\r\n    final Object notCloned = new StringTokenizer() {\r\n\r\n        @Override\r\n        Object cloneReset() throws CloneNotSupportedException {\r\n            throw new CloneNotSupportedException(\"test\");\r\n        }\r\n    }.clone();\r\n    assertNull(notCloned);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\StringTokenizerTest.java",
  "methodName" : "testCloneNull",
  "sourceCode" : "@Test\r\nvoid testCloneNull() {\r\n    final StringTokenizer tokenizer = new StringTokenizer((char[]) null);\r\n    // Start sanity check\r\n    assertNull(tokenizer.nextToken());\r\n    tokenizer.reset();\r\n    assertNull(tokenizer.nextToken());\r\n    // End sanity check\r\n    final StringTokenizer clonedTokenizer = (StringTokenizer) tokenizer.clone();\r\n    tokenizer.reset();\r\n    assertNull(tokenizer.nextToken());\r\n    assertNull(clonedTokenizer.nextToken());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\StringTokenizerTest.java",
  "methodName" : "testCloneReset",
  "sourceCode" : "@Test\r\nvoid testCloneReset() {\r\n    final char[] input = { 'a' };\r\n    final StringTokenizer tokenizer = new StringTokenizer(input);\r\n    // Start sanity check\r\n    assertEquals(\"a\", tokenizer.nextToken());\r\n    tokenizer.reset(input);\r\n    assertEquals(\"a\", tokenizer.nextToken());\r\n    // End sanity check\r\n    final StringTokenizer clonedTokenizer = (StringTokenizer) tokenizer.clone();\r\n    input[0] = 'b';\r\n    tokenizer.reset(input);\r\n    assertEquals(\"b\", tokenizer.nextToken());\r\n    assertEquals(\"a\", clonedTokenizer.nextToken());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\StringTokenizerTest.java",
  "methodName" : "testConstructor_charArray",
  "sourceCode" : "@Test\r\nvoid testConstructor_charArray() {\r\n    StringTokenizer tok = new StringTokenizer(\"a b\".toCharArray());\r\n    assertEquals(\"a\", tok.next());\r\n    assertEquals(\"b\", tok.next());\r\n    assertFalse(tok.hasNext());\r\n    tok = new StringTokenizer(ArrayUtils.EMPTY_CHAR_ARRAY);\r\n    assertFalse(tok.hasNext());\r\n    tok = new StringTokenizer((char[]) null);\r\n    assertFalse(tok.hasNext());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\StringTokenizerTest.java",
  "methodName" : "testConstructor_charArray_char",
  "sourceCode" : "@Test\r\nvoid testConstructor_charArray_char() {\r\n    StringTokenizer tok = new StringTokenizer(\"a b\".toCharArray(), ' ');\r\n    assertEquals(1, tok.getDelimiterMatcher().isMatch(\" \".toCharArray(), 0, 0, 1));\r\n    assertEquals(1, tok.getDelimiterMatcher().isMatch(\" \", 0, 0, 1));\r\n    assertEquals(\"a\", tok.next());\r\n    assertEquals(\"b\", tok.next());\r\n    assertFalse(tok.hasNext());\r\n    tok = new StringTokenizer(ArrayUtils.EMPTY_CHAR_ARRAY, ' ');\r\n    assertFalse(tok.hasNext());\r\n    tok = new StringTokenizer((char[]) null, ' ');\r\n    assertFalse(tok.hasNext());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\StringTokenizerTest.java",
  "methodName" : "testConstructor_charArray_char_char",
  "sourceCode" : "@Test\r\nvoid testConstructor_charArray_char_char() {\r\n    StringTokenizer tok = new StringTokenizer(\"a b\".toCharArray(), ' ', '\"');\r\n    assertEquals(1, tok.getDelimiterMatcher().isMatch(\" \".toCharArray(), 0, 0, 1));\r\n    assertEquals(1, tok.getDelimiterMatcher().isMatch(\" \", 0, 0, 1));\r\n    assertEquals(1, tok.getQuoteMatcher().isMatch(\"\\\"\".toCharArray(), 0, 0, 1));\r\n    assertEquals(1, tok.getQuoteMatcher().isMatch(\"\\\"\", 0, 0, 1));\r\n    assertEquals(\"a\", tok.next());\r\n    assertEquals(\"b\", tok.next());\r\n    assertFalse(tok.hasNext());\r\n    tok = new StringTokenizer(ArrayUtils.EMPTY_CHAR_ARRAY, ' ', '\"');\r\n    assertFalse(tok.hasNext());\r\n    tok = new StringTokenizer((char[]) null, ' ', '\"');\r\n    assertFalse(tok.hasNext());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\StringTokenizerTest.java",
  "methodName" : "testConstructor_String",
  "sourceCode" : "@Test\r\nvoid testConstructor_String() {\r\n    StringTokenizer tok = new StringTokenizer(\"a b\");\r\n    assertEquals(\"a\", tok.next());\r\n    assertEquals(\"b\", tok.next());\r\n    assertFalse(tok.hasNext());\r\n    tok = new StringTokenizer(\"\");\r\n    assertFalse(tok.hasNext());\r\n    tok = new StringTokenizer((String) null);\r\n    assertFalse(tok.hasNext());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\StringTokenizerTest.java",
  "methodName" : "testConstructor_String_char",
  "sourceCode" : "@Test\r\nvoid testConstructor_String_char() {\r\n    StringTokenizer tok = new StringTokenizer(\"a b\", ' ');\r\n    assertEquals(1, tok.getDelimiterMatcher().isMatch(\" \".toCharArray(), 0, 0, 1));\r\n    assertEquals(1, tok.getDelimiterMatcher().isMatch(\" \", 0, 0, 1));\r\n    assertEquals(\"a\", tok.next());\r\n    assertEquals(\"b\", tok.next());\r\n    assertFalse(tok.hasNext());\r\n    tok = new StringTokenizer(\"\", ' ');\r\n    assertFalse(tok.hasNext());\r\n    tok = new StringTokenizer((String) null, ' ');\r\n    assertFalse(tok.hasNext());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\StringTokenizerTest.java",
  "methodName" : "testConstructor_String_char_char",
  "sourceCode" : "@Test\r\nvoid testConstructor_String_char_char() {\r\n    StringTokenizer tok = new StringTokenizer(\"a b\", ' ', '\"');\r\n    assertEquals(1, tok.getDelimiterMatcher().isMatch(\" \".toCharArray(), 0, 0, 1));\r\n    assertEquals(1, tok.getDelimiterMatcher().isMatch(\" \", 0, 0, 1));\r\n    assertEquals(1, tok.getQuoteMatcher().isMatch(\"\\\"\".toCharArray(), 0, 0, 1));\r\n    assertEquals(1, tok.getQuoteMatcher().isMatch(\"\\\"\", 0, 0, 1));\r\n    assertEquals(\"a\", tok.next());\r\n    assertEquals(\"b\", tok.next());\r\n    assertFalse(tok.hasNext());\r\n    tok = new StringTokenizer(\"\", ' ', '\"');\r\n    assertFalse(tok.hasNext());\r\n    tok = new StringTokenizer((String) null, ' ', '\"');\r\n    assertFalse(tok.hasNext());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\StringTokenizerTest.java",
  "methodName" : "testCSVEmpty",
  "sourceCode" : "@Test\r\nvoid testCSVEmpty() {\r\n    testEmpty(StringTokenizer.getCSVInstance());\r\n    testEmpty(StringTokenizer.getCSVInstance(\"\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\StringTokenizerTest.java",
  "methodName" : "testCSVSimple",
  "sourceCode" : "@Test\r\nvoid testCSVSimple() {\r\n    testCSV(CSV_SIMPLE_FIXTURE);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\StringTokenizerTest.java",
  "methodName" : "testCSVSimpleNeedsTrim",
  "sourceCode" : "@Test\r\nvoid testCSVSimpleNeedsTrim() {\r\n    testCSV(\"   \" + CSV_SIMPLE_FIXTURE);\r\n    testCSV(\"   \\n\\t  \" + CSV_SIMPLE_FIXTURE);\r\n    testCSV(\"   \\n  \" + CSV_SIMPLE_FIXTURE + \"\\n\\n\\r\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\StringTokenizerTest.java",
  "methodName" : "testDelimMatcher",
  "sourceCode" : "@Test\r\nvoid testDelimMatcher() {\r\n    final String input = \"a/b\\\\c\";\r\n    final StringMatcher delimMatcher = StringMatcherFactory.INSTANCE.charSetMatcher('/', '\\\\');\r\n    final StringTokenizer tok = new StringTokenizer(input, delimMatcher);\r\n    assertEquals(\"a\", tok.next());\r\n    assertEquals(\"b\", tok.next());\r\n    assertEquals(\"c\", tok.next());\r\n    assertFalse(tok.hasNext());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\StringTokenizerTest.java",
  "methodName" : "testDelimMatcherQuoteMatcher",
  "sourceCode" : "@Test\r\nvoid testDelimMatcherQuoteMatcher() {\r\n    final String input = \"`a`;`b`;`c`\";\r\n    final StringMatcher delimMatcher = StringMatcherFactory.INSTANCE.charSetMatcher(';');\r\n    final StringMatcher quoteMatcher = StringMatcherFactory.INSTANCE.charSetMatcher('`');\r\n    final StringTokenizer tok = new StringTokenizer(input, delimMatcher, quoteMatcher);\r\n    assertEquals(\"a\", tok.next());\r\n    assertEquals(\"b\", tok.next());\r\n    assertEquals(\"c\", tok.next());\r\n    assertFalse(tok.hasNext());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\StringTokenizerTest.java",
  "methodName" : "testDelimString",
  "sourceCode" : "@Test\r\nvoid testDelimString() {\r\n    final String input = \"a##b##c\";\r\n    final StringTokenizer tok = new StringTokenizer(input, \"##\");\r\n    assertEquals(\"a\", tok.next());\r\n    assertEquals(\"b\", tok.next());\r\n    assertEquals(\"c\", tok.next());\r\n    assertFalse(tok.hasNext());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\StringTokenizerTest.java",
  "methodName" : "testGetContent",
  "sourceCode" : "@Test\r\nvoid testGetContent() {\r\n    final String input = \"a   b c \\\"d e\\\" f \";\r\n    StringTokenizer tok = new StringTokenizer(input);\r\n    assertEquals(input, tok.getContent());\r\n    tok = new StringTokenizer(input.toCharArray());\r\n    assertEquals(input, tok.getContent());\r\n    tok = new StringTokenizer();\r\n    assertNull(tok.getContent());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\StringTokenizerTest.java",
  "methodName" : "testIteration",
  "sourceCode" : "@Test\r\nvoid testIteration() {\r\n    final StringTokenizer tkn = new StringTokenizer(\"a b c\");\r\n    assertFalse(tkn.hasPrevious());\r\n    assertThrows(NoSuchElementException.class, tkn::previous);\r\n    assertTrue(tkn.hasNext());\r\n    assertEquals(\"a\", tkn.next());\r\n    assertThrows(UnsupportedOperationException.class, tkn::remove);\r\n    assertThrows(UnsupportedOperationException.class, () -> tkn.set(\"x\"));\r\n    assertThrows(UnsupportedOperationException.class, () -> tkn.add(\"y\"));\r\n    assertTrue(tkn.hasPrevious());\r\n    assertTrue(tkn.hasNext());\r\n    assertEquals(\"b\", tkn.next());\r\n    assertTrue(tkn.hasPrevious());\r\n    assertTrue(tkn.hasNext());\r\n    assertEquals(\"c\", tkn.next());\r\n    assertTrue(tkn.hasPrevious());\r\n    assertFalse(tkn.hasNext());\r\n    assertThrows(NoSuchElementException.class, tkn::next);\r\n    assertTrue(tkn.hasPrevious());\r\n    assertFalse(tkn.hasNext());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\StringTokenizerTest.java",
  "methodName" : "testListArray",
  "sourceCode" : "@Test\r\nvoid testListArray() {\r\n    final String input = \"a  b c\";\r\n    final StringTokenizer tok = new StringTokenizer(input);\r\n    final String[] array = tok.getTokenArray();\r\n    final List<String> list = tok.getTokenList();\r\n    assertEquals(Arrays.asList(array), list);\r\n    assertEquals(3, list.size());\r\n    // Test modification of the returned list\r\n    list.set(0, \"z\");\r\n    list.remove(1);\r\n    list.set(1, \"y\");\r\n    list.add(\"x\");\r\n    assertEquals(Arrays.asList(\"z\", \"y\", \"x\"), list);\r\n    // The tokenizer is unchanged\r\n    assertEquals(Arrays.asList(array), tok.getTokenList());\r\n    assertEquals(\"a\", tok.next());\r\n    assertEquals(\"b\", tok.next());\r\n    assertEquals(\"c\", tok.next());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\StringTokenizerTest.java",
  "methodName" : "testPreviousTokenAndSetEmptyTokenAsNull",
  "sourceCode" : "@Test\r\nvoid testPreviousTokenAndSetEmptyTokenAsNull() {\r\n    final StringTokenizer strTokenizer = StringTokenizer.getTSVInstance(\" \\t\\n\\r\\f\");\r\n    strTokenizer.setEmptyTokenAsNull(true);\r\n    assertNull(strTokenizer.previousToken());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\StringTokenizerTest.java",
  "methodName" : "testReset",
  "sourceCode" : "@Test\r\nvoid testReset() {\r\n    final StringTokenizer tok = new StringTokenizer(\"a b c\");\r\n    assertEquals(\"a\", tok.next());\r\n    assertEquals(\"b\", tok.next());\r\n    assertEquals(\"c\", tok.next());\r\n    assertFalse(tok.hasNext());\r\n    tok.reset();\r\n    assertEquals(\"a\", tok.next());\r\n    assertEquals(\"b\", tok.next());\r\n    assertEquals(\"c\", tok.next());\r\n    assertFalse(tok.hasNext());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\StringTokenizerTest.java",
  "methodName" : "testReset_charArray",
  "sourceCode" : "@Test\r\nvoid testReset_charArray() {\r\n    final StringTokenizer tok = new StringTokenizer(\"x x x\");\r\n    final char[] array = { 'a', 'b', 'c' };\r\n    tok.reset(array);\r\n    assertEquals(\"abc\", tok.next());\r\n    assertFalse(tok.hasNext());\r\n    tok.reset((char[]) null);\r\n    assertFalse(tok.hasNext());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\StringTokenizerTest.java",
  "methodName" : "testReset_String",
  "sourceCode" : "@Test\r\nvoid testReset_String() {\r\n    final StringTokenizer tok = new StringTokenizer(\"x x x\");\r\n    tok.reset(\"d e\");\r\n    assertEquals(\"d\", tok.next());\r\n    assertEquals(\"e\", tok.next());\r\n    assertFalse(tok.hasNext());\r\n    tok.reset((String) null);\r\n    assertFalse(tok.hasNext());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\StringTokenizerTest.java",
  "methodName" : "testStringTokenizerQuoteMatcher",
  "sourceCode" : "@Test\r\nvoid testStringTokenizerQuoteMatcher() {\r\n    final char[] chars = { '\\'', 'a', 'c', '\\'', 'd' };\r\n    final StringTokenizer tokens = new StringTokenizer(chars, StringMatcherFactory.INSTANCE.commaMatcher(), StringMatcherFactory.INSTANCE.quoteMatcher());\r\n    assertEquals(\"acd\", tokens.next());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\StringTokenizerTest.java",
  "methodName" : "testStringTokenizerStringMatcher",
  "sourceCode" : "@Test\r\nvoid testStringTokenizerStringMatcher() {\r\n    final char[] chars = { 'a', 'b', 'c', 'd' };\r\n    final StringTokenizer tokens = new StringTokenizer(chars, \"bc\");\r\n    assertEquals(\"a\", tokens.next());\r\n    assertEquals(\"d\", tokens.next());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\StringTokenizerTest.java",
  "methodName" : "testStringTokenizerStrMatcher",
  "sourceCode" : "@Test\r\nvoid testStringTokenizerStrMatcher() {\r\n    final char[] chars = { 'a', ',', 'c' };\r\n    final StringTokenizer tokens = new StringTokenizer(chars, StringMatcherFactory.INSTANCE.commaMatcher());\r\n    assertEquals(\"a\", tokens.next());\r\n    assertEquals(\"c\", tokens.next());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\StringTokenizerTest.java",
  "methodName" : "testTokenizeSubclassInputChange",
  "sourceCode" : "@Test\r\nvoid testTokenizeSubclassInputChange() {\r\n    final StringTokenizer tkn = new StringTokenizer(\"a b c d e\") {\r\n\r\n        @Override\r\n        protected List<String> tokenize(final char[] chars, final int offset, final int count) {\r\n            return super.tokenize(\"w x y z\".toCharArray(), 2, 5);\r\n        }\r\n    };\r\n    assertEquals(\"x\", tkn.next());\r\n    assertEquals(\"y\", tkn.next());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\StringTokenizerTest.java",
  "methodName" : "testTokenizeSubclassOutputChange",
  "sourceCode" : "@Test\r\nvoid testTokenizeSubclassOutputChange() {\r\n    final StringTokenizer tkn = new StringTokenizer(\"a b c\") {\r\n\r\n        @Override\r\n        protected List<String> tokenize(final char[] chars, final int offset, final int count) {\r\n            final List<String> list = super.tokenize(chars, offset, count);\r\n            Collections.reverse(list);\r\n            return list;\r\n        }\r\n    };\r\n    assertEquals(\"c\", tkn.next());\r\n    assertEquals(\"b\", tkn.next());\r\n    assertEquals(\"a\", tkn.next());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\StringTokenizerTest.java",
  "methodName" : "testToString",
  "sourceCode" : "@Test\r\nvoid testToString() {\r\n    final StringTokenizer tkn = new StringTokenizer(\"a b c d e\");\r\n    assertEquals(\"StringTokenizer[not tokenized yet]\", tkn.toString());\r\n    tkn.next();\r\n    assertEquals(\"StringTokenizer[a, b, c, d, e]\", tkn.toString());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\StringTokenizerTest.java",
  "methodName" : "testTSV",
  "sourceCode" : "@Test\r\nvoid testTSV() {\r\n    testXSVAbc(StringTokenizer.getTSVInstance(TSV_SIMPLE_FIXTURE));\r\n    testXSVAbc(StringTokenizer.getTSVInstance(TSV_SIMPLE_FIXTURE.toCharArray()));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\StringTokenizerTest.java",
  "methodName" : "testTSVEmpty",
  "sourceCode" : "@Test\r\nvoid testTSVEmpty() {\r\n    testEmpty(StringTokenizer.getTSVInstance());\r\n    testEmpty(StringTokenizer.getTSVInstance(\"\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\StrLookupTest.java",
  "methodName" : "testMapLookup",
  "sourceCode" : "@Test\r\nvoid testMapLookup() {\r\n    final Map<String, Object> map = new HashMap<>();\r\n    map.put(\"key\", \"value\");\r\n    map.put(\"number\", 2);\r\n    assertEquals(\"value\", StrLookup.mapLookup(map).apply(\"key\"));\r\n    assertEquals(\"2\", StrLookup.mapLookup(map).apply(\"number\"));\r\n    assertNull(StrLookup.mapLookup(map).apply(null));\r\n    assertNull(StrLookup.mapLookup(map).apply(\"\"));\r\n    assertNull(StrLookup.mapLookup(map).apply(\"other\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\StrLookupTest.java",
  "methodName" : "testMapLookup_nullMap",
  "sourceCode" : "@Test\r\nvoid testMapLookup_nullMap() {\r\n    final Map<String, ?> map = null;\r\n    assertNull(StrLookup.mapLookup(map).apply(null));\r\n    assertNull(StrLookup.mapLookup(map).apply(\"\"));\r\n    assertNull(StrLookup.mapLookup(map).apply(\"any\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\StrLookupTest.java",
  "methodName" : "testNoneLookup",
  "sourceCode" : "@Test\r\nvoid testNoneLookup() {\r\n    assertNull(StrLookup.noneLookup().apply(null));\r\n    assertNull(StrLookup.noneLookup().apply(\"\"));\r\n    assertNull(StrLookup.noneLookup().apply(\"any\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\StrLookupTest.java",
  "methodName" : "testResourceBundleLookup",
  "sourceCode" : "@Test\r\nvoid testResourceBundleLookup() {\r\n    final ResourceBundle map = ResourceBundle.getBundle(\"org.apache.commons.text.example.testResourceBundleLookup\");\r\n    assertEquals(\"value\", StrLookup.resourceBundleLookup(map).apply(\"key\"));\r\n    assertEquals(\"2\", StrLookup.resourceBundleLookup(map).lookup(\"number\"));\r\n    assertNull(StrLookup.resourceBundleLookup(map).apply(null));\r\n    assertNull(StrLookup.resourceBundleLookup(map).apply(\"\"));\r\n    assertNull(StrLookup.resourceBundleLookup(map).apply(\"other\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\StrLookupTest.java",
  "methodName" : "testResourceBundleLookup_nullMap",
  "sourceCode" : "@Test\r\nvoid testResourceBundleLookup_nullMap() {\r\n    final ResourceBundle resourceBundle = null;\r\n    assertNull(StrLookup.resourceBundleLookup(resourceBundle).apply(null));\r\n    assertNull(StrLookup.resourceBundleLookup(resourceBundle).apply(\"\"));\r\n    assertNull(StrLookup.resourceBundleLookup(resourceBundle).apply(\"any\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\StrLookupTest.java",
  "methodName" : "testSystemPropertiesLookup",
  "sourceCode" : "@Test\r\nvoid testSystemPropertiesLookup() {\r\n    assertEquals(System.getProperty(\"os.name\"), StrLookup.systemPropertiesLookup().apply(\"os.name\"));\r\n    assertNull(StrLookup.systemPropertiesLookup().apply(\"\"));\r\n    assertNull(StrLookup.systemPropertiesLookup().apply(\"other\"));\r\n    assertThrows(NullPointerException.class, () -> StrLookup.systemPropertiesLookup().apply(null));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\StrLookupTest.java",
  "methodName" : "testSystemPropertiesLookupReplacedProperties",
  "sourceCode" : "/**\r\n * Tests that a lookup object for system properties can deal with a full\r\n * replacement of the system properties object. This test is related to\r\n * LANG-1055.\r\n */\r\n@Test\r\nvoid testSystemPropertiesLookupReplacedProperties() {\r\n    final Properties oldProperties = System.getProperties();\r\n    final String osName = \"os.name\";\r\n    final String newOsName = oldProperties.getProperty(osName) + \"_changed\";\r\n    final StrLookup<String> sysLookup = StrLookup.systemPropertiesLookup();\r\n    final Properties newProps = new Properties();\r\n    newProps.setProperty(osName, newOsName);\r\n    System.setProperties(newProps);\r\n    try {\r\n        assertEquals(newOsName, sysLookup.apply(osName), \"Changed properties not detected\");\r\n    } finally {\r\n        System.setProperties(oldProperties);\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\StrLookupTest.java",
  "methodName" : "testSystemPropertiesLookupUpdatedProperty",
  "sourceCode" : "/**\r\n * Tests that a lookup object for system properties sees changes on system\r\n * properties. This test is related to LANG-1141.\r\n */\r\n@Test\r\nvoid testSystemPropertiesLookupUpdatedProperty() {\r\n    final String osName = \"os.name\";\r\n    final String oldOs = System.getProperty(osName);\r\n    final String newOsName = oldOs + \"_changed\";\r\n    final StrLookup<String> sysLookup = StrLookup.systemPropertiesLookup();\r\n    System.setProperty(osName, newOsName);\r\n    try {\r\n        assertEquals(newOsName, sysLookup.apply(osName), \"Changed properties not detected\");\r\n    } finally {\r\n        System.setProperty(osName, oldOs);\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\StrMatcherTest.java",
  "methodName" : "testCharMatcher_char",
  "sourceCode" : "@Test\r\nvoid testCharMatcher_char() {\r\n    final StrMatcher matcher = StrMatcher.charMatcher('c');\r\n    assertEquals(0, matcher.isMatch(BUFFER2, 0));\r\n    assertEquals(0, matcher.isMatch(BUFFER2, 1));\r\n    assertEquals(1, matcher.isMatch(BUFFER2, 2));\r\n    assertEquals(0, matcher.isMatch(BUFFER2, 3));\r\n    assertEquals(0, matcher.isMatch(BUFFER2, 4));\r\n    assertEquals(0, matcher.isMatch(BUFFER2, 5));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\StrMatcherTest.java",
  "methodName" : "testCharSetMatcher_charArray",
  "sourceCode" : "@Test\r\nvoid testCharSetMatcher_charArray() {\r\n    final StrMatcher matcher = StrMatcher.charSetMatcher(\"ace\".toCharArray());\r\n    assertEquals(1, matcher.isMatch(BUFFER2, 0));\r\n    assertEquals(0, matcher.isMatch(BUFFER2, 1));\r\n    assertEquals(1, matcher.isMatch(BUFFER2, 2));\r\n    assertEquals(0, matcher.isMatch(BUFFER2, 3));\r\n    assertEquals(1, matcher.isMatch(BUFFER2, 4));\r\n    assertEquals(0, matcher.isMatch(BUFFER2, 5));\r\n    assertSame(StrMatcher.charSetMatcher(), StrMatcher.noneMatcher());\r\n    assertSame(StrMatcher.charSetMatcher((char[]) null), StrMatcher.noneMatcher());\r\n    StrMatcherTest.assertStrMatcherImpl(\"CharMatcher\", StrMatcher.charSetMatcher(\"a\".toCharArray()));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\StrMatcherTest.java",
  "methodName" : "testCharSetMatcher_String",
  "sourceCode" : "@Test\r\nvoid testCharSetMatcher_String() {\r\n    final StrMatcher matcher = StrMatcher.charSetMatcher(\"ace\");\r\n    assertEquals(1, matcher.isMatch(BUFFER2, 0));\r\n    assertEquals(0, matcher.isMatch(BUFFER2, 1));\r\n    assertEquals(1, matcher.isMatch(BUFFER2, 2));\r\n    assertEquals(0, matcher.isMatch(BUFFER2, 3));\r\n    assertEquals(1, matcher.isMatch(BUFFER2, 4));\r\n    assertEquals(0, matcher.isMatch(BUFFER2, 5));\r\n    assertSame(StrMatcher.charSetMatcher(\"\"), StrMatcher.noneMatcher());\r\n    assertSame(StrMatcher.charSetMatcher((String) null), StrMatcher.noneMatcher());\r\n    StrMatcherTest.assertStrMatcherImpl(\"CharMatcher\", StrMatcher.charSetMatcher(\"a\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\StrMatcherTest.java",
  "methodName" : "testCommaMatcher",
  "sourceCode" : "@Test\r\nvoid testCommaMatcher() {\r\n    final StrMatcher matcher = StrMatcher.commaMatcher();\r\n    assertSame(StrMatcher.commaMatcher(), matcher);\r\n    assertEquals(0, matcher.isMatch(BUFFER1, 0));\r\n    assertEquals(1, matcher.isMatch(BUFFER1, 1));\r\n    assertEquals(0, matcher.isMatch(BUFFER1, 2));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\StrMatcherTest.java",
  "methodName" : "testDoubleQuoteMatcher",
  "sourceCode" : "@Test\r\nvoid testDoubleQuoteMatcher() {\r\n    final StrMatcher matcher = StrMatcher.doubleQuoteMatcher();\r\n    assertSame(StrMatcher.doubleQuoteMatcher(), matcher);\r\n    assertEquals(0, matcher.isMatch(BUFFER1, 11));\r\n    assertEquals(1, matcher.isMatch(BUFFER1, 12));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\StrMatcherTest.java",
  "methodName" : "testMatcherIndices",
  "sourceCode" : "@Test\r\nvoid testMatcherIndices() {\r\n    // remember that the API contract is tight for the isMatch() method\r\n    // all the onus is on the caller, so invalid inputs are not\r\n    // the concern of StrMatcher, and are not bugs\r\n    final StrMatcher matcher = StrMatcher.stringMatcher(\"bc\");\r\n    assertEquals(2, matcher.isMatch(BUFFER2, 1, 1, BUFFER2.length));\r\n    assertEquals(2, matcher.isMatch(BUFFER2, 1, 0, 3));\r\n    assertEquals(0, matcher.isMatch(BUFFER2, 1, 0, 2));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\StrMatcherTest.java",
  "methodName" : "testNoneMatcher",
  "sourceCode" : "@Test\r\nvoid testNoneMatcher() {\r\n    final StrMatcher matcher = StrMatcher.noneMatcher();\r\n    assertSame(StrMatcher.noneMatcher(), matcher);\r\n    assertEquals(0, matcher.isMatch(BUFFER1, 0));\r\n    assertEquals(0, matcher.isMatch(BUFFER1, 1));\r\n    assertEquals(0, matcher.isMatch(BUFFER1, 2));\r\n    assertEquals(0, matcher.isMatch(BUFFER1, 3));\r\n    assertEquals(0, matcher.isMatch(BUFFER1, 4));\r\n    assertEquals(0, matcher.isMatch(BUFFER1, 5));\r\n    assertEquals(0, matcher.isMatch(BUFFER1, 6));\r\n    assertEquals(0, matcher.isMatch(BUFFER1, 7));\r\n    assertEquals(0, matcher.isMatch(BUFFER1, 8));\r\n    assertEquals(0, matcher.isMatch(BUFFER1, 9));\r\n    assertEquals(0, matcher.isMatch(BUFFER1, 10));\r\n    assertEquals(0, matcher.isMatch(BUFFER1, 11));\r\n    assertEquals(0, matcher.isMatch(BUFFER1, 12));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\StrMatcherTest.java",
  "methodName" : "testQuoteMatcher",
  "sourceCode" : "@Test\r\nvoid testQuoteMatcher() {\r\n    final StrMatcher matcher = StrMatcher.quoteMatcher();\r\n    assertSame(StrMatcher.quoteMatcher(), matcher);\r\n    assertEquals(0, matcher.isMatch(BUFFER1, 10));\r\n    assertEquals(1, matcher.isMatch(BUFFER1, 11));\r\n    assertEquals(1, matcher.isMatch(BUFFER1, 12));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\StrMatcherTest.java",
  "methodName" : "testSingleQuoteMatcher",
  "sourceCode" : "@Test\r\nvoid testSingleQuoteMatcher() {\r\n    final StrMatcher matcher = StrMatcher.singleQuoteMatcher();\r\n    assertSame(StrMatcher.singleQuoteMatcher(), matcher);\r\n    assertEquals(0, matcher.isMatch(BUFFER1, 10));\r\n    assertEquals(1, matcher.isMatch(BUFFER1, 11));\r\n    assertEquals(0, matcher.isMatch(BUFFER1, 12));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\StrMatcherTest.java",
  "methodName" : "testSpaceMatcher",
  "sourceCode" : "@Test\r\nvoid testSpaceMatcher() {\r\n    final StrMatcher matcher = StrMatcher.spaceMatcher();\r\n    assertSame(StrMatcher.spaceMatcher(), matcher);\r\n    assertEquals(0, matcher.isMatch(BUFFER1, 4));\r\n    assertEquals(1, matcher.isMatch(BUFFER1, 5));\r\n    assertEquals(0, matcher.isMatch(BUFFER1, 6));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\StrMatcherTest.java",
  "methodName" : "testSplitMatcher",
  "sourceCode" : "@Test\r\nvoid testSplitMatcher() {\r\n    final StrMatcher matcher = StrMatcher.splitMatcher();\r\n    assertSame(StrMatcher.splitMatcher(), matcher);\r\n    assertEquals(0, matcher.isMatch(BUFFER1, 2));\r\n    assertEquals(1, matcher.isMatch(BUFFER1, 3));\r\n    assertEquals(0, matcher.isMatch(BUFFER1, 4));\r\n    assertEquals(1, matcher.isMatch(BUFFER1, 5));\r\n    assertEquals(0, matcher.isMatch(BUFFER1, 6));\r\n    assertEquals(1, matcher.isMatch(BUFFER1, 7));\r\n    assertEquals(1, matcher.isMatch(BUFFER1, 8));\r\n    assertEquals(1, matcher.isMatch(BUFFER1, 9));\r\n    assertEquals(0, matcher.isMatch(BUFFER1, 10));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\StrMatcherTest.java",
  "methodName" : "testStringMatcher_String",
  "sourceCode" : "@Test\r\nvoid testStringMatcher_String() {\r\n    final StrMatcher matcher = StrMatcher.stringMatcher(\"bc\");\r\n    assertEquals(0, matcher.isMatch(BUFFER2, 0));\r\n    assertEquals(2, matcher.isMatch(BUFFER2, 1));\r\n    assertEquals(0, matcher.isMatch(BUFFER2, 2));\r\n    assertEquals(0, matcher.isMatch(BUFFER2, 3));\r\n    assertEquals(0, matcher.isMatch(BUFFER2, 4));\r\n    assertEquals(0, matcher.isMatch(BUFFER2, 5));\r\n    assertSame(StrMatcher.stringMatcher(\"\"), StrMatcher.noneMatcher());\r\n    assertSame(StrMatcher.stringMatcher((String) null), StrMatcher.noneMatcher());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\StrMatcherTest.java",
  "methodName" : "testTabMatcher",
  "sourceCode" : "@Test\r\nvoid testTabMatcher() {\r\n    final StrMatcher matcher = StrMatcher.tabMatcher();\r\n    assertSame(StrMatcher.tabMatcher(), matcher);\r\n    assertEquals(0, matcher.isMatch(BUFFER1, 2));\r\n    assertEquals(1, matcher.isMatch(BUFFER1, 3));\r\n    assertEquals(0, matcher.isMatch(BUFFER1, 4));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\StrMatcherTest.java",
  "methodName" : "testTrimMatcher",
  "sourceCode" : "@Test\r\nvoid testTrimMatcher() {\r\n    final StrMatcher matcher = StrMatcher.trimMatcher();\r\n    assertSame(StrMatcher.trimMatcher(), matcher);\r\n    assertEquals(0, matcher.isMatch(BUFFER1, 2));\r\n    assertEquals(1, matcher.isMatch(BUFFER1, 3));\r\n    assertEquals(0, matcher.isMatch(BUFFER1, 4));\r\n    assertEquals(1, matcher.isMatch(BUFFER1, 5));\r\n    assertEquals(0, matcher.isMatch(BUFFER1, 6));\r\n    assertEquals(1, matcher.isMatch(BUFFER1, 7));\r\n    assertEquals(1, matcher.isMatch(BUFFER1, 8));\r\n    assertEquals(1, matcher.isMatch(BUFFER1, 9));\r\n    assertEquals(1, matcher.isMatch(BUFFER1, 10));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\StrSubstitutorTest.java",
  "methodName" : "testConstructorMapFull",
  "sourceCode" : "/**\r\n * Tests constructor.\r\n */\r\n@Test\r\nvoid testConstructorMapFull() {\r\n    final Map<String, String> map = new HashMap<>();\r\n    map.put(\"name\", \"commons\");\r\n    StrSubstitutor sub = new StrSubstitutor(map, \"<\", \">\", '!');\r\n    assertEquals(\"Hi < commons\", sub.replace(\"Hi !< <name>\"));\r\n    sub = new StrSubstitutor(map, \"<\", \">\", '!', \"||\");\r\n    assertEquals(\"Hi < commons\", sub.replace(\"Hi !< <name2||commons>\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\StrSubstitutorTest.java",
  "methodName" : "testConstructorMapPrefixSuffix",
  "sourceCode" : "/**\r\n * Tests constructor.\r\n */\r\n@Test\r\nvoid testConstructorMapPrefixSuffix() {\r\n    final Map<String, String> map = new HashMap<>();\r\n    map.put(\"name\", \"commons\");\r\n    final StrSubstitutor sub = new StrSubstitutor(map, \"<\", \">\");\r\n    assertEquals(\"Hi < commons\", sub.replace(\"Hi $< <name>\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\StrSubstitutorTest.java",
  "methodName" : "testConstructorNoArgs",
  "sourceCode" : "/**\r\n * Tests constructor.\r\n */\r\n@Test\r\nvoid testConstructorNoArgs() {\r\n    final StrSubstitutor sub = new StrSubstitutor();\r\n    assertEquals(\"Hi ${name}\", sub.replace(\"Hi ${name}\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\StrSubstitutorTest.java",
  "methodName" : "testCreatesStrSubstitutorTakingStrLookupAndCallsReplaceTakingTwoAndThreeInts",
  "sourceCode" : "@Test\r\nvoid testCreatesStrSubstitutorTakingStrLookupAndCallsReplaceTakingTwoAndThreeInts() {\r\n    final Map<String, CharacterPredicates> map = new HashMap<>();\r\n    final StrLookup<CharacterPredicates> strLookupMapStrLookup = StrLookup.mapLookup(map);\r\n    final StrSubstitutor strSubstitutor = new StrSubstitutor(strLookupMapStrLookup);\r\n    assertNull(strSubstitutor.replace((CharSequence) null, 0, 0));\r\n    assertEquals('$', strSubstitutor.getEscapeChar());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\StrSubstitutorTest.java",
  "methodName" : "testCyclicReplacement",
  "sourceCode" : "/**\r\n * Tests a cyclic replace operation.\r\n * The cycle should be detected and cause an exception to be thrown.\r\n */\r\n@Test\r\nvoid testCyclicReplacement() {\r\n    final Map<String, String> map = new HashMap<>();\r\n    map.put(\"animal\", \"${critter}\");\r\n    map.put(\"target\", \"${pet}\");\r\n    map.put(\"pet\", \"${petCharacteristic} dog\");\r\n    map.put(\"petCharacteristic\", \"lazy\");\r\n    map.put(\"critter\", \"${critterSpeed} ${critterColor} ${critterType}\");\r\n    map.put(\"critterSpeed\", \"quick\");\r\n    map.put(\"critterColor\", \"brown\");\r\n    map.put(\"critterType\", \"${animal}\");\r\n    final StrSubstitutor sub = new StrSubstitutor(map);\r\n    assertThrows(IllegalStateException.class, () -> sub.replace(\"The ${animal} jumps over the ${target}.\"));\r\n    // also check even when default value is set.\r\n    map.put(\"critterType\", \"${animal:-fox}\");\r\n    assertThrows(IllegalStateException.class, () -> new StrSubstitutor(map).replace(\"The ${animal} jumps over the ${target}.\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\StrSubstitutorTest.java",
  "methodName" : "testDefaultValueDelimiters",
  "sourceCode" : "@Test\r\nvoid testDefaultValueDelimiters() {\r\n    final Map<String, String> map = new HashMap<>();\r\n    map.put(\"animal\", \"fox\");\r\n    map.put(\"target\", \"dog\");\r\n    StrSubstitutor sub = new StrSubstitutor(map, \"${\", \"}\", '$');\r\n    assertEquals(\"The fox jumps over the lazy dog. 1234567890.\", sub.replace(\"The ${animal} jumps over the lazy ${target}. ${undefined.number:-1234567890}.\"));\r\n    sub = new StrSubstitutor(map, \"${\", \"}\", '$', \"?:\");\r\n    assertEquals(\"The fox jumps over the lazy dog. 1234567890.\", sub.replace(\"The ${animal} jumps over the lazy ${target}. ${undefined.number?:1234567890}.\"));\r\n    sub = new StrSubstitutor(map, \"${\", \"}\", '$', \"||\");\r\n    assertEquals(\"The fox jumps over the lazy dog. 1234567890.\", sub.replace(\"The ${animal} jumps over the lazy ${target}. ${undefined.number||1234567890}.\"));\r\n    sub = new StrSubstitutor(map, \"${\", \"}\", '$', \"!\");\r\n    assertEquals(\"The fox jumps over the lazy dog. 1234567890.\", sub.replace(\"The ${animal} jumps over the lazy ${target}. ${undefined.number!1234567890}.\"));\r\n    sub = new StrSubstitutor(map, \"${\", \"}\", '$', \"\");\r\n    sub.setValueDelimiterMatcher(null);\r\n    assertEquals(\"The fox jumps over the lazy dog. ${undefined.number!1234567890}.\", sub.replace(\"The ${animal} jumps over the lazy ${target}. ${undefined.number!1234567890}.\"));\r\n    sub = new StrSubstitutor(map, \"${\", \"}\", '$');\r\n    sub.setValueDelimiterMatcher(null);\r\n    assertEquals(\"The fox jumps over the lazy dog. ${undefined.number!1234567890}.\", sub.replace(\"The ${animal} jumps over the lazy ${target}. ${undefined.number!1234567890}.\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\StrSubstitutorTest.java",
  "methodName" : "testDisableSubstitutionInValues",
  "sourceCode" : "@Test\r\nvoid testDisableSubstitutionInValues() {\r\n    final StrSubstitutor sub = new StrSubstitutor(values);\r\n    sub.setDisableSubstitutionInValues(true);\r\n    values.put(\"animal\", \"${critter}\");\r\n    values.put(\"target\", \"${pet}\");\r\n    values.put(\"pet\", \"${petCharacteristic} dog\");\r\n    values.put(\"petCharacteristic\", \"lazy\");\r\n    values.put(\"critter\", \"${critterSpeed} ${critterColor} ${critterType}\");\r\n    values.put(\"critterSpeed\", \"quick\");\r\n    values.put(\"critterColor\", \"brown\");\r\n    values.put(\"critterType\", \"fox\");\r\n    doTestReplace(sub, \"The ${critter} jumps over the ${pet}.\", \"The ${animal} jumps over the ${target}.\", true);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\StrSubstitutorTest.java",
  "methodName" : "testGetSetEscape",
  "sourceCode" : "/**\r\n * Tests get set.\r\n */\r\n@Test\r\nvoid testGetSetEscape() {\r\n    final StrSubstitutor sub = new StrSubstitutor();\r\n    assertEquals('$', sub.getEscapeChar());\r\n    sub.setEscapeChar('<');\r\n    assertEquals('<', sub.getEscapeChar());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\StrSubstitutorTest.java",
  "methodName" : "testGetSetPrefix",
  "sourceCode" : "/**\r\n * Tests get set.\r\n */\r\n@Test\r\nvoid testGetSetPrefix() {\r\n    final StrSubstitutor sub = new StrSubstitutor();\r\n    StrMatcherTest.assertStrMatcherPrefixImpl(\"StringMatcher\", sub);\r\n    StrMatcherTest.assertStrMatcherSuffixImpl(\"StringMatcher\", sub);\r\n    sub.setVariablePrefix('<');\r\n    StrMatcherTest.assertStrMatcherPrefixImpl(\"CharMatcher\", sub);\r\n    StrMatcherTest.assertStrMatcherSuffixImpl(\"StringMatcher\", sub);\r\n    sub.setVariablePrefix(\"<<\");\r\n    StrMatcherTest.assertStrMatcherPrefixImpl(\"StringMatcher\", sub);\r\n    StrMatcherTest.assertStrMatcherSuffixImpl(\"StringMatcher\", sub);\r\n    assertThrows(IllegalArgumentException.class, () -> sub.setVariablePrefix((String) null));\r\n    StrMatcherTest.assertStrMatcherPrefixImpl(\"StringMatcher\", sub);\r\n    StrMatcherTest.assertStrMatcherSuffixImpl(\"StringMatcher\", sub);\r\n    final StrMatcher matcher = StrMatcher.commaMatcher();\r\n    sub.setVariablePrefixMatcher(matcher);\r\n    assertSame(matcher, sub.getVariablePrefixMatcher());\r\n    assertThrows(IllegalArgumentException.class, () -> sub.setVariablePrefixMatcher((StrMatcher) null));\r\n    assertSame(matcher, sub.getVariablePrefixMatcher());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\StrSubstitutorTest.java",
  "methodName" : "testGetSetSuffix",
  "sourceCode" : "/**\r\n * Tests get set.\r\n */\r\n@Test\r\nvoid testGetSetSuffix() {\r\n    final StrSubstitutor sub = new StrSubstitutor();\r\n    StrMatcherTest.assertStrMatcherPrefixImpl(\"StringMatcher\", sub);\r\n    StrMatcherTest.assertStrMatcherSuffixImpl(\"StringMatcher\", sub);\r\n    sub.setVariableSuffix('<');\r\n    StrMatcherTest.assertStrMatcherPrefixImpl(\"StringMatcher\", sub);\r\n    StrMatcherTest.assertStrMatcherSuffixImpl(\"CharMatcher\", sub);\r\n    sub.setVariableSuffix(\"<<\");\r\n    StrMatcherTest.assertStrMatcherPrefixImpl(\"StringMatcher\", sub);\r\n    StrMatcherTest.assertStrMatcherSuffixImpl(\"StringMatcher\", sub);\r\n    assertThrows(IllegalArgumentException.class, () -> sub.setVariableSuffix((String) null));\r\n    StrMatcherTest.assertStrMatcherPrefixImpl(\"StringMatcher\", sub);\r\n    StrMatcherTest.assertStrMatcherSuffixImpl(\"StringMatcher\", sub);\r\n    final StrMatcher matcher = StrMatcher.commaMatcher();\r\n    sub.setVariableSuffixMatcher(matcher);\r\n    assertSame(matcher, sub.getVariableSuffixMatcher());\r\n    assertThrows(IllegalArgumentException.class, () -> sub.setVariableSuffixMatcher((StrMatcher) null));\r\n    assertSame(matcher, sub.getVariableSuffixMatcher());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\StrSubstitutorTest.java",
  "methodName" : "testGetSetValueDelimiter",
  "sourceCode" : "/**\r\n * Tests get set.\r\n */\r\n@Test\r\nvoid testGetSetValueDelimiter() {\r\n    final StrSubstitutor sub = new StrSubstitutor();\r\n    StrMatcherTest.assertStrMatcherPrefixImpl(\"StringMatcher\", sub);\r\n    StrMatcherTest.assertStrMatcherSuffixImpl(\"StringMatcher\", sub);\r\n    sub.setValueDelimiter(':');\r\n    StrMatcherTest.assertStrMatcherPrefixImpl(\"StringMatcher\", sub);\r\n    StrMatcherTest.assertStrMatcherSuffixImpl(\"StringMatcher\", sub);\r\n    sub.setValueDelimiter(\"||\");\r\n    StrMatcherTest.assertStrMatcherPrefixImpl(\"StringMatcher\", sub);\r\n    StrMatcherTest.assertStrMatcherSuffixImpl(\"StringMatcher\", sub);\r\n    sub.setValueDelimiter((String) null);\r\n    assertNull(sub.getValueDelimiterMatcher());\r\n    final StrMatcher matcher = StrMatcher.commaMatcher();\r\n    sub.setValueDelimiterMatcher(matcher);\r\n    assertSame(matcher, sub.getValueDelimiterMatcher());\r\n    sub.setValueDelimiterMatcher((StrMatcher) null);\r\n    assertNull(sub.getValueDelimiterMatcher());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\StrSubstitutorTest.java",
  "methodName" : "testLANG1055",
  "sourceCode" : "/**\r\n * Test for LANG-1055: StrSubstitutor.replaceSystemProperties does not work consistently\r\n */\r\n@Test\r\nvoid testLANG1055() {\r\n    System.setProperty(\"test_key\", \"test_value\");\r\n    final String expected = StrSubstitutor.replace(\"test_key=${test_key}\", System.getProperties());\r\n    final String actual = StrSubstitutor.replaceSystemProperties(\"test_key=${test_key}\");\r\n    assertEquals(expected, actual);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\StrSubstitutorTest.java",
  "methodName" : "testReplaceAdjacentAtEnd",
  "sourceCode" : "/**\r\n * Tests adjacent keys.\r\n */\r\n@Test\r\nvoid testReplaceAdjacentAtEnd() {\r\n    values.put(\"code\", \"GBP\");\r\n    values.put(\"amount\", \"12.50\");\r\n    final StrSubstitutor sub = new StrSubstitutor(values);\r\n    assertEquals(\"Amount is GBP12.50\", sub.replace(\"Amount is ${code}${amount}\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\StrSubstitutorTest.java",
  "methodName" : "testReplaceAdjacentAtStart",
  "sourceCode" : "/**\r\n * Tests adjacent keys.\r\n */\r\n@Test\r\nvoid testReplaceAdjacentAtStart() {\r\n    values.put(\"code\", \"GBP\");\r\n    values.put(\"amount\", \"12.50\");\r\n    final StrSubstitutor sub = new StrSubstitutor(values);\r\n    assertEquals(\"GBP12.50 charged\", sub.replace(\"${code}${amount} charged\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\StrSubstitutorTest.java",
  "methodName" : "testReplaceChangedMap",
  "sourceCode" : "/**\r\n * Tests key replace changing map after initialization (not recommended).\r\n */\r\n@Test\r\nvoid testReplaceChangedMap() {\r\n    final StrSubstitutor sub = new StrSubstitutor(values);\r\n    values.put(\"target\", \"moon\");\r\n    assertEquals(\"The quick brown fox jumps over the moon.\", sub.replace(\"The ${animal} jumps over the ${target}.\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\StrSubstitutorTest.java",
  "methodName" : "testReplaceComplexEscaping",
  "sourceCode" : "/**\r\n * Tests complex escaping.\r\n */\r\n@Test\r\nvoid testReplaceComplexEscaping() {\r\n    doTestReplace(\"The ${quick brown fox} jumps over the lazy dog.\", \"The $${${animal}} jumps over the ${target}.\", true);\r\n    doTestReplace(\"The ${quick brown fox} jumps over the lazy dog. ${1234567890}.\", \"The $${${animal}} jumps over the ${target}. $${${undefined.number:-1234567890}}.\", true);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\StrSubstitutorTest.java",
  "methodName" : "testReplaceEmpty",
  "sourceCode" : "/**\r\n * Tests replace with null.\r\n */\r\n@Test\r\nvoid testReplaceEmpty() {\r\n    doTestNoReplace(\"\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\StrSubstitutorTest.java",
  "methodName" : "testReplaceEmptyKeys",
  "sourceCode" : "/**\r\n * Tests when no variable name.\r\n */\r\n@Test\r\nvoid testReplaceEmptyKeys() {\r\n    doTestReplace(\"The ${} jumps over the lazy dog.\", \"The ${} jumps over the ${target}.\", true);\r\n    doTestReplace(\"The animal jumps over the lazy dog.\", \"The ${:-animal} jumps over the ${target}.\", true);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\StrSubstitutorTest.java",
  "methodName" : "testReplaceEscaping",
  "sourceCode" : "/**\r\n * Tests escaping.\r\n */\r\n@Test\r\nvoid testReplaceEscaping() {\r\n    doTestReplace(\"The ${animal} jumps over the lazy dog.\", \"The $${animal} jumps over the ${target}.\", true);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\StrSubstitutorTest.java",
  "methodName" : "testReplaceIncompletePrefix",
  "sourceCode" : "/**\r\n * Tests when no incomplete prefix.\r\n */\r\n@Test\r\nvoid testReplaceIncompletePrefix() {\r\n    doTestReplace(\"The {animal} jumps over the lazy dog.\", \"The {animal} jumps over the ${target}.\", true);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\StrSubstitutorTest.java",
  "methodName" : "testReplaceInTakingStringBufferWithNonNull",
  "sourceCode" : "@Test\r\nvoid testReplaceInTakingStringBufferWithNonNull() {\r\n    final StrSubstitutor strSubstitutor = new StrSubstitutor(new HashMap<>(), \"WV@i#y?N*[\", \"WV@i#y?N*[\", '*');\r\n    assertFalse(strSubstitutor.isPreserveEscapes());\r\n    assertFalse(strSubstitutor.replaceIn(new StringBuffer(\"WV@i#y?N*[\")));\r\n    assertEquals('*', strSubstitutor.getEscapeChar());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\StrSubstitutorTest.java",
  "methodName" : "testReplaceInTakingStringBuilderWithNonNull",
  "sourceCode" : "@Test\r\nvoid testReplaceInTakingStringBuilderWithNonNull() {\r\n    final StrLookup<String> strLookup = StrLookup.systemPropertiesLookup();\r\n    final StrSubstitutor strSubstitutor = new StrSubstitutor(strLookup, \"b<H\", \"b<H\", '\\'');\r\n    final StringBuilder stringBuilder = new StringBuilder((CharSequence) \"b<H\");\r\n    assertEquals('\\'', strSubstitutor.getEscapeChar());\r\n    assertFalse(strSubstitutor.replaceIn(stringBuilder));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\StrSubstitutorTest.java",
  "methodName" : "testReplaceInTakingStringBuilderWithNull",
  "sourceCode" : "@Test\r\nvoid testReplaceInTakingStringBuilderWithNull() {\r\n    final Map<String, Object> map = new HashMap<>();\r\n    final StrSubstitutor strSubstitutor = new StrSubstitutor(map, \"\", \"\", 'T', \"K+<'f\");\r\n    assertFalse(strSubstitutor.replaceIn((StringBuilder) null));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\StrSubstitutorTest.java",
  "methodName" : "testReplaceInTakingTwoAndThreeIntsReturningFalse",
  "sourceCode" : "@Test\r\nvoid testReplaceInTakingTwoAndThreeIntsReturningFalse() {\r\n    final Map<String, Object> hashMap = new HashMap<>();\r\n    final StrLookup<Object> strLookupMapStrLookup = StrLookup.mapLookup(hashMap);\r\n    final StrMatcher strMatcher = StrMatcher.tabMatcher();\r\n    final StrSubstitutor strSubstitutor = new StrSubstitutor(strLookupMapStrLookup, strMatcher, strMatcher, 'b', strMatcher);\r\n    assertFalse(strSubstitutor.replaceIn((StringBuilder) null, 1315, -1369));\r\n    assertEquals('b', strSubstitutor.getEscapeChar());\r\n    assertFalse(strSubstitutor.isPreserveEscapes());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\StrSubstitutorTest.java",
  "methodName" : "testReplaceInVariable",
  "sourceCode" : "/**\r\n * Tests whether a variable can be replaced in a variable name.\r\n */\r\n@Test\r\nvoid testReplaceInVariable() {\r\n    values.put(\"animal.1\", \"fox\");\r\n    values.put(\"animal.2\", \"mouse\");\r\n    values.put(\"species\", \"2\");\r\n    final StrSubstitutor sub = new StrSubstitutor(values);\r\n    sub.setEnableSubstitutionInVariables(true);\r\n    assertEquals(\"The mouse jumps over the lazy dog.\", sub.replace(\"The ${animal.${species}} jumps over the ${target}.\"));\r\n    values.put(\"species\", \"1\");\r\n    assertEquals(\"The fox jumps over the lazy dog.\", sub.replace(\"The ${animal.${species}} jumps over the ${target}.\"));\r\n    assertEquals(\"The fox jumps over the lazy dog.\", sub.replace(\"The ${unknown.animal.${unknown.species:-1}:-fox} \" + \"jumps over the ${unknow.target:-lazy dog}.\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\StrSubstitutorTest.java",
  "methodName" : "testReplaceInVariableDisabled",
  "sourceCode" : "/**\r\n * Tests whether substitution in variable names is disabled per default.\r\n */\r\n@Test\r\nvoid testReplaceInVariableDisabled() {\r\n    values.put(\"animal.1\", \"fox\");\r\n    values.put(\"animal.2\", \"mouse\");\r\n    values.put(\"species\", \"2\");\r\n    final StrSubstitutor sub = new StrSubstitutor(values);\r\n    assertEquals(\"The ${animal.${species}} jumps over the lazy dog.\", sub.replace(\"The ${animal.${species}} jumps over the ${target}.\"));\r\n    assertEquals(\"The ${animal.${species:-1}} jumps over the lazy dog.\", sub.replace(\"The ${animal.${species:-1}} jumps over the ${target}.\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\StrSubstitutorTest.java",
  "methodName" : "testReplaceInVariableRecursive",
  "sourceCode" : "/**\r\n * Tests complex and recursive substitution in variable names.\r\n */\r\n@Test\r\nvoid testReplaceInVariableRecursive() {\r\n    values.put(\"animal.2\", \"brown fox\");\r\n    values.put(\"animal.1\", \"white mouse\");\r\n    values.put(\"color\", \"white\");\r\n    values.put(\"species.white\", \"1\");\r\n    values.put(\"species.brown\", \"2\");\r\n    final StrSubstitutor sub = new StrSubstitutor(values);\r\n    sub.setEnableSubstitutionInVariables(true);\r\n    assertEquals(\"The white mouse jumps over the lazy dog.\", sub.replace(\"The ${animal.${species.${color}}} jumps over the ${target}.\"));\r\n    assertEquals(\"The brown fox jumps over the lazy dog.\", sub.replace(\"The ${animal.${species.${unknownColor:-brown}}} jumps over the ${target}.\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\StrSubstitutorTest.java",
  "methodName" : "testReplaceNoPrefixNoSuffix",
  "sourceCode" : "/**\r\n * Tests when no prefix or suffix.\r\n */\r\n@Test\r\nvoid testReplaceNoPrefixNoSuffix() {\r\n    doTestReplace(\"The animal jumps over the lazy dog.\", \"The animal jumps over the ${target}.\", true);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\StrSubstitutorTest.java",
  "methodName" : "testReplaceNoPrefixSuffix",
  "sourceCode" : "/**\r\n * Tests when suffix but no prefix.\r\n */\r\n@Test\r\nvoid testReplaceNoPrefixSuffix() {\r\n    doTestReplace(\"The animal} jumps over the lazy dog.\", \"The animal} jumps over the ${target}.\", true);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\StrSubstitutorTest.java",
  "methodName" : "testReplaceNoVariables",
  "sourceCode" : "/**\r\n * Tests replace with no variables.\r\n */\r\n@Test\r\nvoid testReplaceNoVariables() {\r\n    doTestNoReplace(\"The balloon arrived.\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\StrSubstitutorTest.java",
  "methodName" : "testReplaceNull",
  "sourceCode" : "/**\r\n * Tests replace with null.\r\n */\r\n@Test\r\nvoid testReplaceNull() {\r\n    doTestNoReplace(null);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\StrSubstitutorTest.java",
  "methodName" : "testReplacePartialString_noReplace",
  "sourceCode" : "/**\r\n * Tests simple key replace.\r\n */\r\n@Test\r\nvoid testReplacePartialString_noReplace() {\r\n    final StrSubstitutor sub = new StrSubstitutor();\r\n    assertEquals(\"${animal} jumps\", sub.replace(\"The ${animal} jumps over the ${target}.\", 4, 15));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\StrSubstitutorTest.java",
  "methodName" : "testReplacePrefixNoSuffix",
  "sourceCode" : "/**\r\n * Tests when prefix but no suffix.\r\n */\r\n@Test\r\nvoid testReplacePrefixNoSuffix() {\r\n    doTestReplace(\"The ${animal jumps over the ${target} lazy dog.\", \"The ${animal jumps over the ${target} ${target}.\", true);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\StrSubstitutorTest.java",
  "methodName" : "testReplaceRecursive",
  "sourceCode" : "/**\r\n * Tests simple recursive replace.\r\n */\r\n@Test\r\nvoid testReplaceRecursive() {\r\n    values.put(\"animal\", \"${critter}\");\r\n    values.put(\"target\", \"${pet}\");\r\n    values.put(\"pet\", \"${petCharacteristic} dog\");\r\n    values.put(\"petCharacteristic\", \"lazy\");\r\n    values.put(\"critter\", \"${critterSpeed} ${critterColor} ${critterType}\");\r\n    values.put(\"critterSpeed\", \"quick\");\r\n    values.put(\"critterColor\", \"brown\");\r\n    values.put(\"critterType\", \"fox\");\r\n    doTestReplace(\"The quick brown fox jumps over the lazy dog.\", \"The ${animal} jumps over the ${target}.\", true);\r\n    values.put(\"pet\", \"${petCharacteristicUnknown:-lazy} dog\");\r\n    doTestReplace(\"The quick brown fox jumps over the lazy dog.\", \"The ${animal} jumps over the ${target}.\", true);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\StrSubstitutorTest.java",
  "methodName" : "testReplaceSimple",
  "sourceCode" : "/**\r\n * Tests simple key replace.\r\n */\r\n@Test\r\nvoid testReplaceSimple() {\r\n    doTestReplace(\"The quick brown fox jumps over the lazy dog.\", \"The ${animal} jumps over the ${target}.\", true);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\StrSubstitutorTest.java",
  "methodName" : "testReplaceSolo",
  "sourceCode" : "/**\r\n * Tests simple key replace.\r\n */\r\n@Test\r\nvoid testReplaceSolo() {\r\n    doTestReplace(\"quick brown fox\", \"${animal}\", false);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\StrSubstitutorTest.java",
  "methodName" : "testReplaceSoloEscaping",
  "sourceCode" : "/**\r\n * Tests escaping.\r\n */\r\n@Test\r\nvoid testReplaceSoloEscaping() {\r\n    doTestReplace(\"${animal}\", \"$${animal}\", false);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\StrSubstitutorTest.java",
  "methodName" : "testReplaceTakingCharSequenceReturningNull",
  "sourceCode" : "@Test\r\nvoid testReplaceTakingCharSequenceReturningNull() {\r\n    final StrSubstitutor strSubstitutor = new StrSubstitutor((StrLookup<?>) null);\r\n    assertNull(strSubstitutor.replace((CharSequence) null));\r\n    assertFalse(strSubstitutor.isPreserveEscapes());\r\n    assertEquals('$', strSubstitutor.getEscapeChar());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\StrSubstitutorTest.java",
  "methodName" : "testReplaceTakingThreeArgumentsThrowsNullPointerException",
  "sourceCode" : "@Test\r\nvoid testReplaceTakingThreeArgumentsThrowsNullPointerException() {\r\n    assertThrows(NullPointerException.class, () -> StrSubstitutor.replace(null, (Properties) null));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\StrSubstitutorTest.java",
  "methodName" : "testReplaceToIdentical",
  "sourceCode" : "/**\r\n * Tests replace creates output same as input.\r\n */\r\n@Test\r\nvoid testReplaceToIdentical() {\r\n    values.put(\"animal\", \"$${${thing}}\");\r\n    values.put(\"thing\", \"animal\");\r\n    doTestReplace(\"The ${animal} jumps.\", \"The ${animal} jumps.\", true);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\StrSubstitutorTest.java",
  "methodName" : "testReplaceUnknownKey",
  "sourceCode" : "/**\r\n * Tests unknown key replace.\r\n */\r\n@Test\r\nvoid testReplaceUnknownKey() {\r\n    doTestReplace(\"The ${person} jumps over the lazy dog.\", \"The ${person} jumps over the ${target}.\", true);\r\n    doTestReplace(\"The ${person} jumps over the lazy dog. 1234567890.\", \"The ${person} jumps over the ${target}. ${undefined.number:-1234567890}.\", true);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\StrSubstitutorTest.java",
  "methodName" : "testReplaceWeirdPattens",
  "sourceCode" : "/**\r\n * Tests interpolation with weird boundary patterns.\r\n */\r\n@Test\r\nvoid testReplaceWeirdPattens() {\r\n    doTestNoReplace(\"\");\r\n    doTestNoReplace(\"${}\");\r\n    doTestNoReplace(\"${ }\");\r\n    doTestNoReplace(\"${\\t}\");\r\n    doTestNoReplace(\"${\\n}\");\r\n    doTestNoReplace(\"${\\b}\");\r\n    doTestNoReplace(\"${\");\r\n    doTestNoReplace(\"$}\");\r\n    doTestNoReplace(\"}\");\r\n    doTestNoReplace(\"${}$\");\r\n    doTestNoReplace(\"${${\");\r\n    doTestNoReplace(\"${${}}\");\r\n    doTestNoReplace(\"${$${}}\");\r\n    doTestNoReplace(\"${$$${}}\");\r\n    doTestNoReplace(\"${$$${$}}\");\r\n    doTestNoReplace(\"${${}}\");\r\n    doTestNoReplace(\"${${ }}\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\StrSubstitutorTest.java",
  "methodName" : "testResolveVariable",
  "sourceCode" : "/**\r\n * Tests protected.\r\n */\r\n@Test\r\nvoid testResolveVariable() {\r\n    final StrBuilder builder = new StrBuilder(\"Hi ${name}!\");\r\n    final Map<String, String> map = new HashMap<>();\r\n    map.put(\"name\", \"commons\");\r\n    final StrSubstitutor sub = new StrSubstitutor(map) {\r\n\r\n        @Override\r\n        protected String resolveVariable(final String variableName, final StrBuilder buf, final int startPos, final int endPos) {\r\n            assertEquals(\"name\", variableName);\r\n            assertSame(builder, buf);\r\n            assertEquals(3, startPos);\r\n            assertEquals(10, endPos);\r\n            return \"jakarta\";\r\n        }\r\n    };\r\n    sub.replaceIn(builder);\r\n    assertEquals(\"Hi jakarta!\", builder.toString());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\StrSubstitutorTest.java",
  "methodName" : "testSamePrefixAndSuffix",
  "sourceCode" : "@Test\r\nvoid testSamePrefixAndSuffix() {\r\n    final Map<String, String> map = new HashMap<>();\r\n    map.put(\"greeting\", \"Hello\");\r\n    map.put(\" there \", \"XXX\");\r\n    map.put(\"name\", \"commons\");\r\n    assertEquals(\"Hi commons!\", StrSubstitutor.replace(\"Hi @name@!\", map, \"@\", \"@\"));\r\n    assertEquals(\"Hello there commons!\", StrSubstitutor.replace(\"@greeting@ there @name@!\", map, \"@\", \"@\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\StrSubstitutorTest.java",
  "methodName" : "testStaticReplace",
  "sourceCode" : "/**\r\n * Tests static.\r\n */\r\n@Test\r\nvoid testStaticReplace() {\r\n    final Map<String, String> map = new HashMap<>();\r\n    map.put(\"name\", \"commons\");\r\n    assertEquals(\"Hi commons!\", StrSubstitutor.replace(\"Hi ${name}!\", map));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\StrSubstitutorTest.java",
  "methodName" : "testStaticReplacePrefixSuffix",
  "sourceCode" : "/**\r\n * Tests static.\r\n */\r\n@Test\r\nvoid testStaticReplacePrefixSuffix() {\r\n    final Map<String, String> map = new HashMap<>();\r\n    map.put(\"name\", \"commons\");\r\n    assertEquals(\"Hi commons!\", StrSubstitutor.replace(\"Hi <name>!\", map, \"<\", \">\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\StrSubstitutorTest.java",
  "methodName" : "testStaticReplaceSystemProperties",
  "sourceCode" : "/**\r\n * Tests interpolation with system properties.\r\n */\r\n@Test\r\nvoid testStaticReplaceSystemProperties() {\r\n    final StrBuilder buf = new StrBuilder();\r\n    buf.append(\"Hi \").append(SystemProperties.getUserName());\r\n    buf.append(\", you are working with \");\r\n    buf.append(SystemProperties.getOsName());\r\n    buf.append(\", your home directory is \");\r\n    buf.append(SystemProperties.getUserHome()).append('.');\r\n    assertEquals(buf.toString(), StrSubstitutor.replaceSystemProperties(\"Hi ${user.name}, you are \" + \"working with ${os.name}, your home \" + \"directory is ${user.home}.\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\StrSubstitutorTest.java",
  "methodName" : "testSubstituteDefaultProperties",
  "sourceCode" : "/**\r\n * Test the replace of a properties object\r\n */\r\n@Test\r\nvoid testSubstituteDefaultProperties() {\r\n    final String org = \"${doesnotwork}\";\r\n    System.setProperty(\"doesnotwork\", \"It works!\");\r\n    // create a new Properties object with the System.getProperties as default\r\n    final Properties props = new Properties(System.getProperties());\r\n    assertEquals(\"It works!\", StrSubstitutor.replace(org, props));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\StrSubstitutorTest.java",
  "methodName" : "testSubstitutePreserveEscape",
  "sourceCode" : "@Test\r\nvoid testSubstitutePreserveEscape() {\r\n    final String org = \"${not-escaped} $${escaped}\";\r\n    final Map<String, String> map = new HashMap<>();\r\n    map.put(\"not-escaped\", \"value\");\r\n    final StrSubstitutor sub = new StrSubstitutor(map, \"${\", \"}\", '$');\r\n    assertFalse(sub.isPreserveEscapes());\r\n    assertEquals(\"value ${escaped}\", sub.replace(org));\r\n    sub.setPreserveEscapes(true);\r\n    assertTrue(sub.isPreserveEscapes());\r\n    assertEquals(\"value $${escaped}\", sub.replace(org));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\StrTokenizerTest.java",
  "methodName" : "test1",
  "sourceCode" : "@Test\r\nvoid test1() {\r\n    final String input = \"a;b;c;\\\"d;\\\"\\\"e\\\";f; ; ;  \";\r\n    final StrTokenizer tok = new StrTokenizer(input);\r\n    tok.setDelimiterChar(';');\r\n    tok.setQuoteChar('\"');\r\n    tok.setIgnoredMatcher(StrMatcher.trimMatcher());\r\n    tok.setIgnoreEmptyTokens(false);\r\n    final String[] tokens = tok.getTokenArray();\r\n    final String[] expected = { \"a\", \"b\", \"c\", \"d;\\\"e\", \"f\", \"\", \"\", \"\" };\r\n    assertEquals(expected.length, tokens.length, Arrays.toString(tokens));\r\n    for (int i = 0; i < expected.length; i++) {\r\n        assertEquals(expected[i], tokens[i], \"token[\" + i + \"] was '\" + tokens[i] + \"' but was expected to be '\" + expected[i] + \"'\");\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\StrTokenizerTest.java",
  "methodName" : "test2",
  "sourceCode" : "@Test\r\nvoid test2() {\r\n    final String input = \"a;b;c ;\\\"d;\\\"\\\"e\\\";f; ; ;\";\r\n    final StrTokenizer tok = new StrTokenizer(input);\r\n    tok.setDelimiterChar(';');\r\n    tok.setQuoteChar('\"');\r\n    tok.setIgnoredMatcher(StrMatcher.noneMatcher());\r\n    tok.setIgnoreEmptyTokens(false);\r\n    final String[] tokens = tok.getTokenArray();\r\n    final String[] expected = { \"a\", \"b\", \"c \", \"d;\\\"e\", \"f\", \" \", \" \", \"\" };\r\n    assertEquals(expected.length, tokens.length, Arrays.toString(tokens));\r\n    for (int i = 0; i < expected.length; i++) {\r\n        assertEquals(expected[i], tokens[i], \"token[\" + i + \"] was '\" + tokens[i] + \"' but was expected to be '\" + expected[i] + \"'\");\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\StrTokenizerTest.java",
  "methodName" : "test3",
  "sourceCode" : "@Test\r\nvoid test3() {\r\n    final String input = \"a;b; c;\\\"d;\\\"\\\"e\\\";f; ; ;\";\r\n    final StrTokenizer tok = new StrTokenizer(input);\r\n    tok.setDelimiterChar(';');\r\n    tok.setQuoteChar('\"');\r\n    tok.setIgnoredMatcher(StrMatcher.noneMatcher());\r\n    tok.setIgnoreEmptyTokens(false);\r\n    final String[] tokens = tok.getTokenArray();\r\n    final String[] expected = { \"a\", \"b\", \" c\", \"d;\\\"e\", \"f\", \" \", \" \", \"\" };\r\n    assertEquals(expected.length, tokens.length, Arrays.toString(tokens));\r\n    for (int i = 0; i < expected.length; i++) {\r\n        assertEquals(expected[i], tokens[i], \"token[\" + i + \"] was '\" + tokens[i] + \"' but was expected to be '\" + expected[i] + \"'\");\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\StrTokenizerTest.java",
  "methodName" : "test4",
  "sourceCode" : "@Test\r\nvoid test4() {\r\n    final String input = \"a;b; c;\\\"d;\\\"\\\"e\\\";f; ; ;\";\r\n    final StrTokenizer tok = new StrTokenizer(input);\r\n    tok.setDelimiterChar(';');\r\n    tok.setQuoteChar('\"');\r\n    tok.setIgnoredMatcher(StrMatcher.trimMatcher());\r\n    tok.setIgnoreEmptyTokens(true);\r\n    final String[] tokens = tok.getTokenArray();\r\n    final String[] expected = { \"a\", \"b\", \"c\", \"d;\\\"e\", \"f\" };\r\n    assertEquals(expected.length, tokens.length, Arrays.toString(tokens));\r\n    for (int i = 0; i < expected.length; i++) {\r\n        assertEquals(expected[i], tokens[i], \"token[\" + i + \"] was '\" + tokens[i] + \"' but was expected to be '\" + expected[i] + \"'\");\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\StrTokenizerTest.java",
  "methodName" : "test5",
  "sourceCode" : "@Test\r\nvoid test5() {\r\n    final String input = \"a;b; c;\\\"d;\\\"\\\"e\\\";f; ; ;\";\r\n    final StrTokenizer tok = new StrTokenizer(input);\r\n    tok.setDelimiterChar(';');\r\n    tok.setQuoteChar('\"');\r\n    tok.setIgnoredMatcher(StrMatcher.trimMatcher());\r\n    tok.setIgnoreEmptyTokens(false);\r\n    tok.setEmptyTokenAsNull(true);\r\n    final String[] tokens = tok.getTokenArray();\r\n    final String[] expected = { \"a\", \"b\", \"c\", \"d;\\\"e\", \"f\", null, null, null };\r\n    assertEquals(expected.length, tokens.length, Arrays.toString(tokens));\r\n    for (int i = 0; i < expected.length; i++) {\r\n        assertEquals(expected[i], tokens[i], \"token[\" + i + \"] was '\" + tokens[i] + \"' but was expected to be '\" + expected[i] + \"'\");\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\StrTokenizerTest.java",
  "methodName" : "test6",
  "sourceCode" : "@Test\r\nvoid test6() {\r\n    final String input = \"a;b; c;\\\"d;\\\"\\\"e\\\";f; ; ;\";\r\n    final StrTokenizer tok = new StrTokenizer(input);\r\n    tok.setDelimiterChar(';');\r\n    tok.setQuoteChar('\"');\r\n    tok.setIgnoredMatcher(StrMatcher.trimMatcher());\r\n    tok.setIgnoreEmptyTokens(false);\r\n    // tok.setTreatingEmptyAsNull(true);\r\n    final String[] tokens = tok.getTokenArray();\r\n    final String[] expected = { \"a\", \"b\", \" c\", \"d;\\\"e\", \"f\", null, null, null };\r\n    int nextCount = 0;\r\n    while (tok.hasNext()) {\r\n        tok.next();\r\n        nextCount++;\r\n    }\r\n    int prevCount = 0;\r\n    while (tok.hasPrevious()) {\r\n        tok.previous();\r\n        prevCount++;\r\n    }\r\n    assertEquals(expected.length, tokens.length, Arrays.toString(tokens));\r\n    assertEquals(nextCount, expected.length, \"could not cycle through entire token list using the 'hasNext' and 'next' methods\");\r\n    assertEquals(prevCount, expected.length, \"could not cycle through entire token list using the 'hasPrevious' and 'previous' methods\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\StrTokenizerTest.java",
  "methodName" : "test7",
  "sourceCode" : "@Test\r\nvoid test7() {\r\n    final String input = \"a   b c \\\"d e\\\" f \";\r\n    final StrTokenizer tok = new StrTokenizer(input);\r\n    tok.setDelimiterMatcher(StrMatcher.spaceMatcher());\r\n    tok.setQuoteMatcher(StrMatcher.doubleQuoteMatcher());\r\n    tok.setIgnoredMatcher(StrMatcher.noneMatcher());\r\n    tok.setIgnoreEmptyTokens(false);\r\n    final String[] tokens = tok.getTokenArray();\r\n    final String[] expected = { \"a\", \"\", \"\", \"b\", \"c\", \"d e\", \"f\", \"\" };\r\n    assertEquals(expected.length, tokens.length, Arrays.toString(tokens));\r\n    for (int i = 0; i < expected.length; i++) {\r\n        assertEquals(expected[i], tokens[i], \"token[\" + i + \"] was '\" + tokens[i] + \"' but was expected to be '\" + expected[i] + \"'\");\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\StrTokenizerTest.java",
  "methodName" : "test8",
  "sourceCode" : "@Test\r\nvoid test8() {\r\n    final String input = \"a   b c \\\"d e\\\" f \";\r\n    final StrTokenizer tok = new StrTokenizer(input);\r\n    tok.setDelimiterMatcher(StrMatcher.spaceMatcher());\r\n    tok.setQuoteMatcher(StrMatcher.doubleQuoteMatcher());\r\n    tok.setIgnoredMatcher(StrMatcher.noneMatcher());\r\n    tok.setIgnoreEmptyTokens(true);\r\n    final String[] tokens = tok.getTokenArray();\r\n    final String[] expected = { \"a\", \"b\", \"c\", \"d e\", \"f\" };\r\n    assertEquals(expected.length, tokens.length, Arrays.toString(tokens));\r\n    for (int i = 0; i < expected.length; i++) {\r\n        assertEquals(expected[i], tokens[i], \"token[\" + i + \"] was '\" + tokens[i] + \"' but was expected to be '\" + expected[i] + \"'\");\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\StrTokenizerTest.java",
  "methodName" : "testBasic1",
  "sourceCode" : "@Test\r\nvoid testBasic1() {\r\n    final String input = \"a  b c\";\r\n    final StrTokenizer tok = new StrTokenizer(input);\r\n    assertEquals(\"a\", tok.next());\r\n    assertEquals(\"b\", tok.next());\r\n    assertEquals(\"c\", tok.next());\r\n    assertFalse(tok.hasNext());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\StrTokenizerTest.java",
  "methodName" : "testBasic2",
  "sourceCode" : "@Test\r\nvoid testBasic2() {\r\n    final String input = \"a \\nb\\fc\";\r\n    final StrTokenizer tok = new StrTokenizer(input);\r\n    assertEquals(\"a\", tok.next());\r\n    assertEquals(\"b\", tok.next());\r\n    assertEquals(\"c\", tok.next());\r\n    assertFalse(tok.hasNext());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\StrTokenizerTest.java",
  "methodName" : "testBasic3",
  "sourceCode" : "@Test\r\nvoid testBasic3() {\r\n    final String input = \"a \\nb\\u0001\\fc\";\r\n    final StrTokenizer tok = new StrTokenizer(input);\r\n    assertEquals(\"a\", tok.next());\r\n    assertEquals(\"b\\u0001\", tok.next());\r\n    assertEquals(\"c\", tok.next());\r\n    assertFalse(tok.hasNext());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\StrTokenizerTest.java",
  "methodName" : "testBasic4",
  "sourceCode" : "@Test\r\nvoid testBasic4() {\r\n    final String input = \"a \\\"b\\\" c\";\r\n    final StrTokenizer tok = new StrTokenizer(input);\r\n    assertEquals(\"a\", tok.next());\r\n    assertEquals(\"\\\"b\\\"\", tok.next());\r\n    assertEquals(\"c\", tok.next());\r\n    assertFalse(tok.hasNext());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\StrTokenizerTest.java",
  "methodName" : "testBasic5",
  "sourceCode" : "@Test\r\nvoid testBasic5() {\r\n    final String input = \"a:b':c\";\r\n    final StrTokenizer tok = new StrTokenizer(input, ':', '\\'');\r\n    assertEquals(\"a\", tok.next());\r\n    assertEquals(\"b'\", tok.next());\r\n    assertEquals(\"c\", tok.next());\r\n    assertFalse(tok.hasNext());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\StrTokenizerTest.java",
  "methodName" : "testBasicDelim1",
  "sourceCode" : "@Test\r\nvoid testBasicDelim1() {\r\n    final String input = \"a:b:c\";\r\n    final StrTokenizer tok = new StrTokenizer(input, ':');\r\n    assertEquals(\"a\", tok.next());\r\n    assertEquals(\"b\", tok.next());\r\n    assertEquals(\"c\", tok.next());\r\n    assertFalse(tok.hasNext());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\StrTokenizerTest.java",
  "methodName" : "testBasicDelim2",
  "sourceCode" : "@Test\r\nvoid testBasicDelim2() {\r\n    final String input = \"a:b:c\";\r\n    final StrTokenizer tok = new StrTokenizer(input, ',');\r\n    assertEquals(\"a:b:c\", tok.next());\r\n    assertFalse(tok.hasNext());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\StrTokenizerTest.java",
  "methodName" : "testBasicEmpty1",
  "sourceCode" : "@Test\r\nvoid testBasicEmpty1() {\r\n    final String input = \"a  b c\";\r\n    final StrTokenizer tok = new StrTokenizer(input);\r\n    tok.setIgnoreEmptyTokens(false);\r\n    assertEquals(\"a\", tok.next());\r\n    assertEquals(\"\", tok.next());\r\n    assertEquals(\"b\", tok.next());\r\n    assertEquals(\"c\", tok.next());\r\n    assertFalse(tok.hasNext());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\StrTokenizerTest.java",
  "methodName" : "testBasicEmpty2",
  "sourceCode" : "@Test\r\nvoid testBasicEmpty2() {\r\n    final String input = \"a  b c\";\r\n    final StrTokenizer tok = new StrTokenizer(input);\r\n    tok.setIgnoreEmptyTokens(false);\r\n    tok.setEmptyTokenAsNull(true);\r\n    assertEquals(\"a\", tok.next());\r\n    assertNull(tok.next());\r\n    assertEquals(\"b\", tok.next());\r\n    assertEquals(\"c\", tok.next());\r\n    assertFalse(tok.hasNext());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\StrTokenizerTest.java",
  "methodName" : "testBasicIgnoreTrimmed1",
  "sourceCode" : "@Test\r\nvoid testBasicIgnoreTrimmed1() {\r\n    final String input = \"a: bIGNOREc : \";\r\n    final StrTokenizer tok = new StrTokenizer(input, ':');\r\n    tok.setIgnoredMatcher(StrMatcher.stringMatcher(\"IGNORE\"));\r\n    tok.setTrimmerMatcher(StrMatcher.trimMatcher());\r\n    tok.setIgnoreEmptyTokens(false);\r\n    tok.setEmptyTokenAsNull(true);\r\n    assertEquals(\"a\", tok.next());\r\n    assertEquals(\"bc\", tok.next());\r\n    assertNull(tok.next());\r\n    assertFalse(tok.hasNext());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\StrTokenizerTest.java",
  "methodName" : "testBasicIgnoreTrimmed2",
  "sourceCode" : "@Test\r\nvoid testBasicIgnoreTrimmed2() {\r\n    final String input = \"IGNOREaIGNORE: IGNORE bIGNOREc IGNORE : IGNORE \";\r\n    final StrTokenizer tok = new StrTokenizer(input, ':');\r\n    tok.setIgnoredMatcher(StrMatcher.stringMatcher(\"IGNORE\"));\r\n    tok.setTrimmerMatcher(StrMatcher.trimMatcher());\r\n    tok.setIgnoreEmptyTokens(false);\r\n    tok.setEmptyTokenAsNull(true);\r\n    assertEquals(\"a\", tok.next());\r\n    assertEquals(\"bc\", tok.next());\r\n    assertNull(tok.next());\r\n    assertFalse(tok.hasNext());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\StrTokenizerTest.java",
  "methodName" : "testBasicIgnoreTrimmed3",
  "sourceCode" : "@Test\r\nvoid testBasicIgnoreTrimmed3() {\r\n    final String input = \"IGNOREaIGNORE: IGNORE bIGNOREc IGNORE : IGNORE \";\r\n    final StrTokenizer tok = new StrTokenizer(input, ':');\r\n    tok.setIgnoredMatcher(StrMatcher.stringMatcher(\"IGNORE\"));\r\n    tok.setIgnoreEmptyTokens(false);\r\n    tok.setEmptyTokenAsNull(true);\r\n    assertEquals(\"a\", tok.next());\r\n    assertEquals(\"  bc  \", tok.next());\r\n    assertEquals(\"  \", tok.next());\r\n    assertFalse(tok.hasNext());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\StrTokenizerTest.java",
  "methodName" : "testBasicIgnoreTrimmed4",
  "sourceCode" : "@Test\r\nvoid testBasicIgnoreTrimmed4() {\r\n    final String input = \"IGNOREaIGNORE: IGNORE 'bIGNOREc'IGNORE'd' IGNORE : IGNORE \";\r\n    final StrTokenizer tok = new StrTokenizer(input, ':', '\\'');\r\n    tok.setIgnoredMatcher(StrMatcher.stringMatcher(\"IGNORE\"));\r\n    tok.setTrimmerMatcher(StrMatcher.trimMatcher());\r\n    tok.setIgnoreEmptyTokens(false);\r\n    tok.setEmptyTokenAsNull(true);\r\n    assertEquals(\"a\", tok.next());\r\n    assertEquals(\"bIGNOREcd\", tok.next());\r\n    assertNull(tok.next());\r\n    assertFalse(tok.hasNext());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\StrTokenizerTest.java",
  "methodName" : "testBasicQuoted1",
  "sourceCode" : "@Test\r\nvoid testBasicQuoted1() {\r\n    final String input = \"a 'b' c\";\r\n    final StrTokenizer tok = new StrTokenizer(input, ' ', '\\'');\r\n    assertEquals(\"a\", tok.next());\r\n    assertEquals(\"b\", tok.next());\r\n    assertEquals(\"c\", tok.next());\r\n    assertFalse(tok.hasNext());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\StrTokenizerTest.java",
  "methodName" : "testBasicQuoted2",
  "sourceCode" : "@Test\r\nvoid testBasicQuoted2() {\r\n    final String input = \"a:'b':\";\r\n    final StrTokenizer tok = new StrTokenizer(input, ':', '\\'');\r\n    tok.setIgnoreEmptyTokens(false);\r\n    tok.setEmptyTokenAsNull(true);\r\n    assertEquals(\"a\", tok.next());\r\n    assertEquals(\"b\", tok.next());\r\n    assertNull(tok.next());\r\n    assertFalse(tok.hasNext());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\StrTokenizerTest.java",
  "methodName" : "testBasicQuoted3",
  "sourceCode" : "@Test\r\nvoid testBasicQuoted3() {\r\n    final String input = \"a:'b''c'\";\r\n    final StrTokenizer tok = new StrTokenizer(input, ':', '\\'');\r\n    tok.setIgnoreEmptyTokens(false);\r\n    tok.setEmptyTokenAsNull(true);\r\n    assertEquals(\"a\", tok.next());\r\n    assertEquals(\"b'c\", tok.next());\r\n    assertFalse(tok.hasNext());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\StrTokenizerTest.java",
  "methodName" : "testBasicQuoted4",
  "sourceCode" : "@Test\r\nvoid testBasicQuoted4() {\r\n    final String input = \"a: 'b' 'c' :d\";\r\n    final StrTokenizer tok = new StrTokenizer(input, ':', '\\'');\r\n    tok.setTrimmerMatcher(StrMatcher.trimMatcher());\r\n    tok.setIgnoreEmptyTokens(false);\r\n    tok.setEmptyTokenAsNull(true);\r\n    assertEquals(\"a\", tok.next());\r\n    assertEquals(\"b c\", tok.next());\r\n    assertEquals(\"d\", tok.next());\r\n    assertFalse(tok.hasNext());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\StrTokenizerTest.java",
  "methodName" : "testBasicQuoted5",
  "sourceCode" : "@Test\r\nvoid testBasicQuoted5() {\r\n    final String input = \"a: 'b'x'c' :d\";\r\n    final StrTokenizer tok = new StrTokenizer(input, ':', '\\'');\r\n    tok.setTrimmerMatcher(StrMatcher.trimMatcher());\r\n    tok.setIgnoreEmptyTokens(false);\r\n    tok.setEmptyTokenAsNull(true);\r\n    assertEquals(\"a\", tok.next());\r\n    assertEquals(\"bxc\", tok.next());\r\n    assertEquals(\"d\", tok.next());\r\n    assertFalse(tok.hasNext());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\StrTokenizerTest.java",
  "methodName" : "testBasicQuoted6",
  "sourceCode" : "@Test\r\nvoid testBasicQuoted6() {\r\n    final String input = \"a:'b'\\\"c':d\";\r\n    final StrTokenizer tok = new StrTokenizer(input, ':');\r\n    tok.setQuoteMatcher(StrMatcher.quoteMatcher());\r\n    assertEquals(\"a\", tok.next());\r\n    assertEquals(\"b\\\"c:d\", tok.next());\r\n    assertFalse(tok.hasNext());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\StrTokenizerTest.java",
  "methodName" : "testBasicQuoted7",
  "sourceCode" : "@Test\r\nvoid testBasicQuoted7() {\r\n    final String input = \"a:\\\"There's a reason here\\\":b\";\r\n    final StrTokenizer tok = new StrTokenizer(input, ':');\r\n    tok.setQuoteMatcher(StrMatcher.quoteMatcher());\r\n    assertEquals(\"a\", tok.next());\r\n    assertEquals(\"There's a reason here\", tok.next());\r\n    assertEquals(\"b\", tok.next());\r\n    assertFalse(tok.hasNext());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\StrTokenizerTest.java",
  "methodName" : "testBasicQuotedTrimmed1",
  "sourceCode" : "@Test\r\nvoid testBasicQuotedTrimmed1() {\r\n    final String input = \"a: 'b' :\";\r\n    final StrTokenizer tok = new StrTokenizer(input, ':', '\\'');\r\n    tok.setTrimmerMatcher(StrMatcher.trimMatcher());\r\n    tok.setIgnoreEmptyTokens(false);\r\n    tok.setEmptyTokenAsNull(true);\r\n    assertEquals(\"a\", tok.next());\r\n    assertEquals(\"b\", tok.next());\r\n    assertNull(tok.next());\r\n    assertFalse(tok.hasNext());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\StrTokenizerTest.java",
  "methodName" : "testBasicTrimmed1",
  "sourceCode" : "@Test\r\nvoid testBasicTrimmed1() {\r\n    final String input = \"a: b :  \";\r\n    final StrTokenizer tok = new StrTokenizer(input, ':');\r\n    tok.setTrimmerMatcher(StrMatcher.trimMatcher());\r\n    tok.setIgnoreEmptyTokens(false);\r\n    tok.setEmptyTokenAsNull(true);\r\n    assertEquals(\"a\", tok.next());\r\n    assertEquals(\"b\", tok.next());\r\n    assertNull(tok.next());\r\n    assertFalse(tok.hasNext());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\StrTokenizerTest.java",
  "methodName" : "testBasicTrimmed2",
  "sourceCode" : "@Test\r\nvoid testBasicTrimmed2() {\r\n    final String input = \"a:  b  :\";\r\n    final StrTokenizer tok = new StrTokenizer(input, ':');\r\n    tok.setTrimmerMatcher(StrMatcher.stringMatcher(\"  \"));\r\n    tok.setIgnoreEmptyTokens(false);\r\n    tok.setEmptyTokenAsNull(true);\r\n    assertEquals(\"a\", tok.next());\r\n    assertEquals(\"b\", tok.next());\r\n    assertNull(tok.next());\r\n    assertFalse(tok.hasNext());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\StrTokenizerTest.java",
  "methodName" : "testChaining",
  "sourceCode" : "@Test\r\nvoid testChaining() {\r\n    final StrTokenizer tok = new StrTokenizer();\r\n    assertEquals(tok, tok.reset());\r\n    assertEquals(tok, tok.reset(\"\"));\r\n    assertEquals(tok, tok.reset(ArrayUtils.EMPTY_CHAR_ARRAY));\r\n    assertEquals(tok, tok.setDelimiterChar(' '));\r\n    assertEquals(tok, tok.setDelimiterString(\" \"));\r\n    assertEquals(tok, tok.setDelimiterMatcher(null));\r\n    assertEquals(tok, tok.setQuoteChar(' '));\r\n    assertEquals(tok, tok.setQuoteMatcher(null));\r\n    assertEquals(tok, tok.setIgnoredChar(' '));\r\n    assertEquals(tok, tok.setIgnoredMatcher(null));\r\n    assertEquals(tok, tok.setTrimmerMatcher(null));\r\n    assertEquals(tok, tok.setEmptyTokenAsNull(false));\r\n    assertEquals(tok, tok.setIgnoreEmptyTokens(false));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\StrTokenizerTest.java",
  "methodName" : "testCloneNotSupportedException",
  "sourceCode" : "/**\r\n * Tests that the {@link StrTokenizer#clone()} clone method catches\r\n * {@link CloneNotSupportedException} and returns {@code null}.\r\n */\r\n@Test\r\nvoid testCloneNotSupportedException() {\r\n    final Object notCloned = new StrTokenizer() {\r\n\r\n        @Override\r\n        Object cloneReset() throws CloneNotSupportedException {\r\n            throw new CloneNotSupportedException(\"test\");\r\n        }\r\n    }.clone();\r\n    assertNull(notCloned);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\StrTokenizerTest.java",
  "methodName" : "testCloneNull",
  "sourceCode" : "@Test\r\nvoid testCloneNull() {\r\n    final StrTokenizer tokenizer = new StrTokenizer((char[]) null);\r\n    // Start sanity check\r\n    assertNull(tokenizer.nextToken());\r\n    tokenizer.reset();\r\n    assertNull(tokenizer.nextToken());\r\n    // End sanity check\r\n    final StrTokenizer clonedTokenizer = (StrTokenizer) tokenizer.clone();\r\n    tokenizer.reset();\r\n    assertNull(tokenizer.nextToken());\r\n    assertNull(clonedTokenizer.nextToken());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\StrTokenizerTest.java",
  "methodName" : "testCloneReset",
  "sourceCode" : "@Test\r\nvoid testCloneReset() {\r\n    final char[] input = { 'a' };\r\n    final StrTokenizer tokenizer = new StrTokenizer(input);\r\n    // Start sanity check\r\n    assertEquals(\"a\", tokenizer.nextToken());\r\n    tokenizer.reset(input);\r\n    assertEquals(\"a\", tokenizer.nextToken());\r\n    // End sanity check\r\n    final StrTokenizer clonedTokenizer = (StrTokenizer) tokenizer.clone();\r\n    input[0] = 'b';\r\n    tokenizer.reset(input);\r\n    assertEquals(\"b\", tokenizer.nextToken());\r\n    assertEquals(\"a\", clonedTokenizer.nextToken());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\StrTokenizerTest.java",
  "methodName" : "testConstructor_charArray",
  "sourceCode" : "@Test\r\nvoid testConstructor_charArray() {\r\n    StrTokenizer tok = new StrTokenizer(\"a b\".toCharArray());\r\n    assertEquals(\"a\", tok.next());\r\n    assertEquals(\"b\", tok.next());\r\n    assertFalse(tok.hasNext());\r\n    tok = new StrTokenizer(ArrayUtils.EMPTY_CHAR_ARRAY);\r\n    assertFalse(tok.hasNext());\r\n    tok = new StrTokenizer((char[]) null);\r\n    assertFalse(tok.hasNext());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\StrTokenizerTest.java",
  "methodName" : "testConstructor_charArray_char",
  "sourceCode" : "@Test\r\nvoid testConstructor_charArray_char() {\r\n    StrTokenizer tok = new StrTokenizer(\"a b\".toCharArray(), ' ');\r\n    assertEquals(1, tok.getDelimiterMatcher().isMatch(\" \".toCharArray(), 0, 0, 1));\r\n    assertEquals(\"a\", tok.next());\r\n    assertEquals(\"b\", tok.next());\r\n    assertFalse(tok.hasNext());\r\n    tok = new StrTokenizer(ArrayUtils.EMPTY_CHAR_ARRAY, ' ');\r\n    assertFalse(tok.hasNext());\r\n    tok = new StrTokenizer((char[]) null, ' ');\r\n    assertFalse(tok.hasNext());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\StrTokenizerTest.java",
  "methodName" : "testConstructor_charArray_char_char",
  "sourceCode" : "@Test\r\nvoid testConstructor_charArray_char_char() {\r\n    StrTokenizer tok = new StrTokenizer(\"a b\".toCharArray(), ' ', '\"');\r\n    assertEquals(1, tok.getDelimiterMatcher().isMatch(\" \".toCharArray(), 0, 0, 1));\r\n    assertEquals(1, tok.getQuoteMatcher().isMatch(\"\\\"\".toCharArray(), 0, 0, 1));\r\n    assertEquals(\"a\", tok.next());\r\n    assertEquals(\"b\", tok.next());\r\n    assertFalse(tok.hasNext());\r\n    tok = new StrTokenizer(ArrayUtils.EMPTY_CHAR_ARRAY, ' ', '\"');\r\n    assertFalse(tok.hasNext());\r\n    tok = new StrTokenizer((char[]) null, ' ', '\"');\r\n    assertFalse(tok.hasNext());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\StrTokenizerTest.java",
  "methodName" : "testConstructor_String",
  "sourceCode" : "@Test\r\nvoid testConstructor_String() {\r\n    StrTokenizer tok = new StrTokenizer(\"a b\");\r\n    assertEquals(\"a\", tok.next());\r\n    assertEquals(\"b\", tok.next());\r\n    assertFalse(tok.hasNext());\r\n    tok = new StrTokenizer(\"\");\r\n    assertFalse(tok.hasNext());\r\n    tok = new StrTokenizer((String) null);\r\n    assertFalse(tok.hasNext());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\StrTokenizerTest.java",
  "methodName" : "testConstructor_String_char",
  "sourceCode" : "@Test\r\nvoid testConstructor_String_char() {\r\n    StrTokenizer tok = new StrTokenizer(\"a b\", ' ');\r\n    assertEquals(1, tok.getDelimiterMatcher().isMatch(\" \".toCharArray(), 0, 0, 1));\r\n    assertEquals(\"a\", tok.next());\r\n    assertEquals(\"b\", tok.next());\r\n    assertFalse(tok.hasNext());\r\n    tok = new StrTokenizer(\"\", ' ');\r\n    assertFalse(tok.hasNext());\r\n    tok = new StrTokenizer((String) null, ' ');\r\n    assertFalse(tok.hasNext());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\StrTokenizerTest.java",
  "methodName" : "testConstructor_String_char_char",
  "sourceCode" : "@Test\r\nvoid testConstructor_String_char_char() {\r\n    StrTokenizer tok = new StrTokenizer(\"a b\", ' ', '\"');\r\n    assertEquals(1, tok.getDelimiterMatcher().isMatch(\" \".toCharArray(), 0, 0, 1));\r\n    assertEquals(1, tok.getQuoteMatcher().isMatch(\"\\\"\".toCharArray(), 0, 0, 1));\r\n    assertEquals(\"a\", tok.next());\r\n    assertEquals(\"b\", tok.next());\r\n    assertFalse(tok.hasNext());\r\n    tok = new StrTokenizer(\"\", ' ', '\"');\r\n    assertFalse(tok.hasNext());\r\n    tok = new StrTokenizer((String) null, ' ', '\"');\r\n    assertFalse(tok.hasNext());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\StrTokenizerTest.java",
  "methodName" : "testCSVEmpty",
  "sourceCode" : "@Test\r\nvoid testCSVEmpty() {\r\n    testEmpty(StrTokenizer.getCSVInstance());\r\n    testEmpty(StrTokenizer.getCSVInstance(\"\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\StrTokenizerTest.java",
  "methodName" : "testCSVSimple",
  "sourceCode" : "@Test\r\nvoid testCSVSimple() {\r\n    testCSV(CSV_SIMPLE_FIXTURE);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\StrTokenizerTest.java",
  "methodName" : "testCSVSimpleNeedsTrim",
  "sourceCode" : "@Test\r\nvoid testCSVSimpleNeedsTrim() {\r\n    testCSV(\"   \" + CSV_SIMPLE_FIXTURE);\r\n    testCSV(\"   \\n\\t  \" + CSV_SIMPLE_FIXTURE);\r\n    testCSV(\"   \\n  \" + CSV_SIMPLE_FIXTURE + \"\\n\\n\\r\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\StrTokenizerTest.java",
  "methodName" : "testDelimMatcher",
  "sourceCode" : "@Test\r\nvoid testDelimMatcher() {\r\n    final String input = \"a/b\\\\c\";\r\n    final StrMatcher delimMatcher = StrMatcher.charSetMatcher(new char[] { '/', '\\\\' });\r\n    final StrTokenizer tok = new StrTokenizer(input, delimMatcher);\r\n    assertEquals(\"a\", tok.next());\r\n    assertEquals(\"b\", tok.next());\r\n    assertEquals(\"c\", tok.next());\r\n    assertFalse(tok.hasNext());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\StrTokenizerTest.java",
  "methodName" : "testDelimMatcherQuoteMatcher",
  "sourceCode" : "@Test\r\nvoid testDelimMatcherQuoteMatcher() {\r\n    final String input = \"`a`;`b`;`c`\";\r\n    final StrMatcher delimMatcher = StrMatcher.charSetMatcher(new char[] { ';' });\r\n    final StrMatcher quoteMatcher = StrMatcher.charSetMatcher(new char[] { '`' });\r\n    final StrTokenizer tok = new StrTokenizer(input, delimMatcher, quoteMatcher);\r\n    assertEquals(\"a\", tok.next());\r\n    assertEquals(\"b\", tok.next());\r\n    assertEquals(\"c\", tok.next());\r\n    assertFalse(tok.hasNext());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\StrTokenizerTest.java",
  "methodName" : "testDelimString",
  "sourceCode" : "@Test\r\nvoid testDelimString() {\r\n    final String input = \"a##b##c\";\r\n    final StrTokenizer tok = new StrTokenizer(input, \"##\");\r\n    assertEquals(\"a\", tok.next());\r\n    assertEquals(\"b\", tok.next());\r\n    assertEquals(\"c\", tok.next());\r\n    assertFalse(tok.hasNext());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\StrTokenizerTest.java",
  "methodName" : "testGetContent",
  "sourceCode" : "@Test\r\nvoid testGetContent() {\r\n    final String input = \"a   b c \\\"d e\\\" f \";\r\n    StrTokenizer tok = new StrTokenizer(input);\r\n    assertEquals(input, tok.getContent());\r\n    tok = new StrTokenizer(input.toCharArray());\r\n    assertEquals(input, tok.getContent());\r\n    tok = new StrTokenizer();\r\n    assertNull(tok.getContent());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\StrTokenizerTest.java",
  "methodName" : "testIteration",
  "sourceCode" : "@Test\r\nvoid testIteration() {\r\n    final StrTokenizer tkn = new StrTokenizer(\"a b c\");\r\n    assertFalse(tkn.hasPrevious());\r\n    assertThrows(NoSuchElementException.class, tkn::previous);\r\n    assertTrue(tkn.hasNext());\r\n    assertEquals(\"a\", tkn.next());\r\n    assertThrows(UnsupportedOperationException.class, tkn::remove);\r\n    assertThrows(UnsupportedOperationException.class, () -> tkn.set(\"x\"));\r\n    assertThrows(UnsupportedOperationException.class, () -> tkn.add(\"y\"));\r\n    assertTrue(tkn.hasPrevious());\r\n    assertTrue(tkn.hasNext());\r\n    assertEquals(\"b\", tkn.next());\r\n    assertTrue(tkn.hasPrevious());\r\n    assertTrue(tkn.hasNext());\r\n    assertEquals(\"c\", tkn.next());\r\n    assertTrue(tkn.hasPrevious());\r\n    assertFalse(tkn.hasNext());\r\n    assertThrows(NoSuchElementException.class, tkn::next);\r\n    assertTrue(tkn.hasPrevious());\r\n    assertFalse(tkn.hasNext());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\StrTokenizerTest.java",
  "methodName" : "testListArray",
  "sourceCode" : "@Test\r\nvoid testListArray() {\r\n    final String input = \"a  b c\";\r\n    final StrTokenizer tok = new StrTokenizer(input);\r\n    final String[] array = tok.getTokenArray();\r\n    final List<?> list = tok.getTokenList();\r\n    assertEquals(Arrays.asList(array), list);\r\n    assertEquals(3, list.size());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\StrTokenizerTest.java",
  "methodName" : "testPreviousTokenAndSetEmptyTokenAsNull",
  "sourceCode" : "@Test\r\nvoid testPreviousTokenAndSetEmptyTokenAsNull() {\r\n    final StrTokenizer strTokenizer = StrTokenizer.getTSVInstance(\" \\t\\n\\r\\f\");\r\n    strTokenizer.setEmptyTokenAsNull(true);\r\n    assertNull(strTokenizer.previousToken());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\StrTokenizerTest.java",
  "methodName" : "testReset",
  "sourceCode" : "@Test\r\nvoid testReset() {\r\n    final StrTokenizer tok = new StrTokenizer(\"a b c\");\r\n    assertEquals(\"a\", tok.next());\r\n    assertEquals(\"b\", tok.next());\r\n    assertEquals(\"c\", tok.next());\r\n    assertFalse(tok.hasNext());\r\n    tok.reset();\r\n    assertEquals(\"a\", tok.next());\r\n    assertEquals(\"b\", tok.next());\r\n    assertEquals(\"c\", tok.next());\r\n    assertFalse(tok.hasNext());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\StrTokenizerTest.java",
  "methodName" : "testReset_charArray",
  "sourceCode" : "@Test\r\nvoid testReset_charArray() {\r\n    final StrTokenizer tok = new StrTokenizer(\"x x x\");\r\n    final char[] array = { 'a', 'b', 'c' };\r\n    tok.reset(array);\r\n    assertEquals(\"abc\", tok.next());\r\n    assertFalse(tok.hasNext());\r\n    tok.reset((char[]) null);\r\n    assertFalse(tok.hasNext());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\StrTokenizerTest.java",
  "methodName" : "testReset_String",
  "sourceCode" : "@Test\r\nvoid testReset_String() {\r\n    final StrTokenizer tok = new StrTokenizer(\"x x x\");\r\n    tok.reset(\"d e\");\r\n    assertEquals(\"d\", tok.next());\r\n    assertEquals(\"e\", tok.next());\r\n    assertFalse(tok.hasNext());\r\n    tok.reset((String) null);\r\n    assertFalse(tok.hasNext());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\StrTokenizerTest.java",
  "methodName" : "testStringTokenizerQuoteMatcher",
  "sourceCode" : "@Test\r\nvoid testStringTokenizerQuoteMatcher() {\r\n    final char[] chars = { '\\'', 'a', 'c', '\\'', 'd' };\r\n    final StrTokenizer tokens = new StrTokenizer(chars, StrMatcher.commaMatcher(), StrMatcher.quoteMatcher());\r\n    assertEquals(\"acd\", tokens.next());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\StrTokenizerTest.java",
  "methodName" : "testStringTokenizerStringMatcher",
  "sourceCode" : "@Test\r\nvoid testStringTokenizerStringMatcher() {\r\n    final char[] chars = { 'a', 'b', 'c', 'd' };\r\n    final StrTokenizer tokens = new StrTokenizer(chars, \"bc\");\r\n    assertEquals(\"a\", tokens.next());\r\n    assertEquals(\"d\", tokens.next());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\StrTokenizerTest.java",
  "methodName" : "testStringTokenizerStrMatcher",
  "sourceCode" : "@Test\r\nvoid testStringTokenizerStrMatcher() {\r\n    final char[] chars = { 'a', ',', 'c' };\r\n    final StrTokenizer tokens = new StrTokenizer(chars, StrMatcher.commaMatcher());\r\n    assertEquals(\"a\", tokens.next());\r\n    assertEquals(\"c\", tokens.next());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\StrTokenizerTest.java",
  "methodName" : "testTokenizeSubclassInputChange",
  "sourceCode" : "@Test\r\nvoid testTokenizeSubclassInputChange() {\r\n    final StrTokenizer tkn = new StrTokenizer(\"a b c d e\") {\r\n\r\n        @Override\r\n        protected List<String> tokenize(final char[] chars, final int offset, final int count) {\r\n            return super.tokenize(\"w x y z\".toCharArray(), 2, 5);\r\n        }\r\n    };\r\n    assertEquals(\"x\", tkn.next());\r\n    assertEquals(\"y\", tkn.next());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\StrTokenizerTest.java",
  "methodName" : "testTokenizeSubclassOutputChange",
  "sourceCode" : "@Test\r\nvoid testTokenizeSubclassOutputChange() {\r\n    final StrTokenizer tkn = new StrTokenizer(\"a b c\") {\r\n\r\n        @Override\r\n        protected List<String> tokenize(final char[] chars, final int offset, final int count) {\r\n            final List<String> list = super.tokenize(chars, offset, count);\r\n            Collections.reverse(list);\r\n            return list;\r\n        }\r\n    };\r\n    assertEquals(\"c\", tkn.next());\r\n    assertEquals(\"b\", tkn.next());\r\n    assertEquals(\"a\", tkn.next());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\StrTokenizerTest.java",
  "methodName" : "testToString",
  "sourceCode" : "@Test\r\nvoid testToString() {\r\n    final StrTokenizer tkn = new StrTokenizer(\"a b c d e\");\r\n    assertEquals(\"StrTokenizer[not tokenized yet]\", tkn.toString());\r\n    tkn.next();\r\n    assertEquals(\"StrTokenizer[a, b, c, d, e]\", tkn.toString());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\StrTokenizerTest.java",
  "methodName" : "testTSV",
  "sourceCode" : "@Test\r\nvoid testTSV() {\r\n    testXSVAbc(StrTokenizer.getTSVInstance(TSV_SIMPLE_FIXTURE));\r\n    testXSVAbc(StrTokenizer.getTSVInstance(TSV_SIMPLE_FIXTURE.toCharArray()));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\StrTokenizerTest.java",
  "methodName" : "testTSVEmpty",
  "sourceCode" : "@Test\r\nvoid testTSVEmpty() {\r\n    testEmpty(StrTokenizer.getTSVInstance());\r\n    testEmpty(StrTokenizer.getTSVInstance(\"\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\TextStringBuilderAppendInsertTest.java",
  "methodName" : "testAppend_Boolean",
  "sourceCode" : "@Test\r\nvoid testAppend_Boolean() {\r\n    final TextStringBuilder sb = new TextStringBuilder();\r\n    sb.append(true);\r\n    assertEquals(\"true\", sb.toString());\r\n    sb.append(false);\r\n    assertEquals(\"truefalse\", sb.toString());\r\n    sb.append('!');\r\n    assertEquals(\"truefalse!\", sb.toString());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\TextStringBuilderAppendInsertTest.java",
  "methodName" : "testAppend_CharArray",
  "sourceCode" : "@Test\r\nvoid testAppend_CharArray() {\r\n    TextStringBuilder sb = new TextStringBuilder();\r\n    sb.setNullText(\"NULL\").append((char[]) null);\r\n    assertEquals(\"NULL\", sb.toString());\r\n    sb = new TextStringBuilder();\r\n    sb.append(ArrayUtils.EMPTY_CHAR_ARRAY);\r\n    assertEquals(\"\", sb.toString());\r\n    sb.append(new char[] { 'f', 'o', 'o' });\r\n    assertEquals(\"foo\", sb.toString());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\TextStringBuilderAppendInsertTest.java",
  "methodName" : "testAppend_CharArray_int_int",
  "sourceCode" : "@Test\r\nvoid testAppend_CharArray_int_int() {\r\n    final TextStringBuilder sb0 = new TextStringBuilder();\r\n    sb0.setNullText(\"NULL\").append((char[]) null, 0, 1);\r\n    assertEquals(\"NULL\", sb0.toString());\r\n    final TextStringBuilder sb = new TextStringBuilder();\r\n    sb.append(new char[] { 'f', 'o', 'o' }, 0, 3);\r\n    assertEquals(\"foo\", sb.toString());\r\n    assertThrows(IndexOutOfBoundsException.class, () -> sb.append(new char[] { 'b', 'a', 'r' }, -1, 1), \"append(char[], -1,) expected IndexOutOfBoundsException\");\r\n    assertThrows(IndexOutOfBoundsException.class, () -> sb.append(new char[] { 'b', 'a', 'r' }, 3, 1), \"append(char[], 3,) expected IndexOutOfBoundsException\");\r\n    assertThrows(IndexOutOfBoundsException.class, () -> sb.append(new char[] { 'b', 'a', 'r' }, 1, -1), \"append(char[],, -1) expected IndexOutOfBoundsException\");\r\n    assertThrows(IndexOutOfBoundsException.class, () -> sb.append(new char[] { 'b', 'a', 'r' }, 1, 3), \"append(char[], 1, 3) expected IndexOutOfBoundsException\");\r\n    assertThrows(IndexOutOfBoundsException.class, () -> sb.append(new char[] { 'b', 'a', 'r' }, -1, 3), \"append(char[], -1, 3) expected IndexOutOfBoundsException\");\r\n    assertThrows(IndexOutOfBoundsException.class, () -> sb.append(new char[] { 'b', 'a', 'r' }, 4, 0), \"append(char[], 4, 0) expected IndexOutOfBoundsException\");\r\n    sb.append(new char[] { 'b', 'a', 'r' }, 3, 0);\r\n    assertEquals(\"foo\", sb.toString());\r\n    sb.append(new char[] { 'a', 'b', 'c', 'b', 'a', 'r', 'd', 'e', 'f' }, 3, 3);\r\n    assertEquals(\"foobar\", sb.toString());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\TextStringBuilderAppendInsertTest.java",
  "methodName" : "testAppend_FormattedString",
  "sourceCode" : "@Test\r\nvoid testAppend_FormattedString() {\r\n    TextStringBuilder sb;\r\n    sb = new TextStringBuilder();\r\n    sb.append(\"Hi\", (Object[]) null);\r\n    assertEquals(\"Hi\", sb.toString());\r\n    sb = new TextStringBuilder();\r\n    sb.append(\"Hi\", \"Alice\");\r\n    assertEquals(\"Hi\", sb.toString());\r\n    sb = new TextStringBuilder();\r\n    sb.append(\"Hi %s\", \"Alice\");\r\n    assertEquals(\"Hi Alice\", sb.toString());\r\n    sb = new TextStringBuilder();\r\n    sb.append(\"Hi %s %,d\", \"Alice\", 5000);\r\n    // group separator depends on system locale\r\n    final char groupingSeparator = DecimalFormatSymbols.getInstance().getGroupingSeparator();\r\n    final String expected = \"Hi Alice 5\" + groupingSeparator + \"000\";\r\n    assertEquals(expected, sb.toString());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\TextStringBuilderAppendInsertTest.java",
  "methodName" : "testAppend_Object",
  "sourceCode" : "@Test\r\nvoid testAppend_Object() {\r\n    final TextStringBuilder sb = new TextStringBuilder();\r\n    sb.appendNull();\r\n    assertEquals(\"\", sb.toString());\r\n    sb.append((Object) null);\r\n    assertEquals(\"\", sb.toString());\r\n    sb.append(FOO);\r\n    assertEquals(\"foo\", sb.toString());\r\n    sb.append((StringBuffer) null);\r\n    assertEquals(\"foo\", sb.toString());\r\n    sb.append(new StringBuffer(\"baz\"));\r\n    assertEquals(\"foobaz\", sb.toString());\r\n    sb.append(new TextStringBuilder(\"yes\"));\r\n    assertEquals(\"foobazyes\", sb.toString());\r\n    sb.append((CharSequence) \"Seq\");\r\n    assertEquals(\"foobazyesSeq\", sb.toString());\r\n    // Check it supports StringBuilder\r\n    sb.append(new StringBuilder(\"bld\"));\r\n    assertEquals(\"foobazyesSeqbld\", sb.toString());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\TextStringBuilderAppendInsertTest.java",
  "methodName" : "testAppend_PrimitiveNumber",
  "sourceCode" : "@Test\r\nvoid testAppend_PrimitiveNumber() {\r\n    final TextStringBuilder sb = new TextStringBuilder();\r\n    sb.append(0);\r\n    assertEquals(\"0\", sb.toString());\r\n    sb.append(1L);\r\n    assertEquals(\"01\", sb.toString());\r\n    sb.append(2.3f);\r\n    assertEquals(\"012.3\", sb.toString());\r\n    sb.append(4.5d);\r\n    assertEquals(\"012.34.5\", sb.toString());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\TextStringBuilderAppendInsertTest.java",
  "methodName" : "testAppend_String",
  "sourceCode" : "@Test\r\nvoid testAppend_String() {\r\n    TextStringBuilder sb = new TextStringBuilder();\r\n    sb.setNullText(\"NULL\").append((String) null);\r\n    assertEquals(\"NULL\", sb.toString());\r\n    sb = new TextStringBuilder();\r\n    sb.append(\"foo\");\r\n    assertEquals(\"foo\", sb.toString());\r\n    sb.append(\"\");\r\n    assertEquals(\"foo\", sb.toString());\r\n    sb.append(\"bar\");\r\n    assertEquals(\"foobar\", sb.toString());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\TextStringBuilderAppendInsertTest.java",
  "methodName" : "testAppend_String_int_int",
  "sourceCode" : "@Test\r\nvoid testAppend_String_int_int() {\r\n    final TextStringBuilder sb0 = new TextStringBuilder();\r\n    sb0.setNullText(\"NULL\").append((String) null, 0, 1);\r\n    assertEquals(\"NULL\", sb0.toString());\r\n    final TextStringBuilder sb = new TextStringBuilder();\r\n    sb.append(\"foo\", 0, 3);\r\n    assertEquals(\"foo\", sb.toString());\r\n    assertThrows(IndexOutOfBoundsException.class, () -> sb.append(\"bar\", -1, 1), \"append(char[], -1,) expected IndexOutOfBoundsException\");\r\n    assertThrows(IndexOutOfBoundsException.class, () -> sb.append(\"bar\", 3, 1), \"append(char[], 3,) expected IndexOutOfBoundsException\");\r\n    assertThrows(IndexOutOfBoundsException.class, () -> sb.append(\"bar\", 1, -1), \"append(char[],, -1) expected IndexOutOfBoundsException\");\r\n    assertThrows(IndexOutOfBoundsException.class, () -> sb.append(\"bar\", 1, 3), \"append(char[], 1, 3) expected IndexOutOfBoundsException\");\r\n    assertThrows(IndexOutOfBoundsException.class, () -> sb.append(\"bar\", -1, 3), \"append(char[], -1, 3) expected IndexOutOfBoundsException\");\r\n    assertThrows(IndexOutOfBoundsException.class, () -> sb.append(\"bar\", 4, 0), \"append(char[], 4, 0) expected IndexOutOfBoundsException\");\r\n    assertThrows(IndexOutOfBoundsException.class, () -> sb.append((CharSequence) \"bar\", 2, 1), \"append(char[], 2, 1) expected IndexOutOfBoundsException\");\r\n    assertThrows(IndexOutOfBoundsException.class, () -> sb.append((CharSequence) \"bar\", 2, 2), \"append(char[], 2, 2) expected IndexOutOfBoundsException\");\r\n    assertThrows(IndexOutOfBoundsException.class, () -> sb.append((CharSequence) \"bar\", 2, -2), \"append(char[], 2, -2) expected IndexOutOfBoundsException\");\r\n    assertThrows(IndexOutOfBoundsException.class, () -> sb.append((CharSequence) \"bar\", 2, 0), \"append(char[], 2, 0) expected IndexOutOfBoundsException\");\r\n    sb.append(\"bar\", 3, 0);\r\n    assertEquals(\"foo\", sb.toString());\r\n    sb.append(\"abcbardef\", 3, 3);\r\n    assertEquals(\"foobar\", sb.toString());\r\n    sb.append((CharSequence) \"abcbardef\", 4, 7);\r\n    assertEquals(\"foobarard\", sb.toString());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\TextStringBuilderAppendInsertTest.java",
  "methodName" : "testAppend_StringBuffer",
  "sourceCode" : "@Test\r\nvoid testAppend_StringBuffer() {\r\n    TextStringBuilder sb = new TextStringBuilder();\r\n    sb.setNullText(\"NULL\").append((StringBuffer) null);\r\n    assertEquals(\"NULL\", sb.toString());\r\n    sb = new TextStringBuilder();\r\n    sb.append(new StringBuffer(\"foo\"));\r\n    assertEquals(\"foo\", sb.toString());\r\n    sb.append(new StringBuffer(\"\"));\r\n    assertEquals(\"foo\", sb.toString());\r\n    sb.append(new StringBuffer(\"bar\"));\r\n    assertEquals(\"foobar\", sb.toString());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\TextStringBuilderAppendInsertTest.java",
  "methodName" : "testAppend_StringBuffer_int_int",
  "sourceCode" : "@Test\r\nvoid testAppend_StringBuffer_int_int() {\r\n    final TextStringBuilder sb0 = new TextStringBuilder();\r\n    sb0.setNullText(\"NULL\").append((StringBuffer) null, 0, 1);\r\n    assertEquals(\"NULL\", sb0.toString());\r\n    final TextStringBuilder sb = new TextStringBuilder();\r\n    sb.append(new StringBuffer(\"foo\"), 0, 3);\r\n    assertEquals(\"foo\", sb.toString());\r\n    assertThrows(IndexOutOfBoundsException.class, () -> sb.append(new StringBuffer(\"bar\"), -1, 1), \"append(char[], -1,) expected IndexOutOfBoundsException\");\r\n    assertThrows(IndexOutOfBoundsException.class, () -> sb.append(new StringBuffer(\"bar\"), 3, 1), \"append(char[], 3,) expected IndexOutOfBoundsException\");\r\n    assertThrows(IndexOutOfBoundsException.class, () -> sb.append(new StringBuffer(\"bar\"), 1, -1), \"append(char[],, -1) expected IndexOutOfBoundsException\");\r\n    assertThrows(IndexOutOfBoundsException.class, () -> sb.append(new StringBuffer(\"bar\"), 1, 3), \"append(char[], 1, 3) expected IndexOutOfBoundsException\");\r\n    assertThrows(IndexOutOfBoundsException.class, () -> sb.append(new StringBuffer(\"bar\"), -1, 3), \"append(char[], -1, 3) expected IndexOutOfBoundsException\");\r\n    assertThrows(IndexOutOfBoundsException.class, () -> sb.append(new StringBuffer(\"bar\"), 4, 0), \"append(char[], 4, 0) expected IndexOutOfBoundsException\");\r\n    sb.append(new StringBuffer(\"bar\"), 3, 0);\r\n    assertEquals(\"foo\", sb.toString());\r\n    sb.append(new StringBuffer(\"abcbardef\"), 3, 3);\r\n    assertEquals(\"foobar\", sb.toString());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\TextStringBuilderAppendInsertTest.java",
  "methodName" : "testAppend_StringBuilder",
  "sourceCode" : "@Test\r\nvoid testAppend_StringBuilder() {\r\n    TextStringBuilder sb = new TextStringBuilder();\r\n    sb.setNullText(\"NULL\").append((String) null);\r\n    assertEquals(\"NULL\", sb.toString());\r\n    sb = new TextStringBuilder();\r\n    sb.append(new StringBuilder(\"foo\"));\r\n    assertEquals(\"foo\", sb.toString());\r\n    sb.append(new StringBuilder(\"\"));\r\n    assertEquals(\"foo\", sb.toString());\r\n    sb.append(new StringBuilder(\"bar\"));\r\n    assertEquals(\"foobar\", sb.toString());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\TextStringBuilderAppendInsertTest.java",
  "methodName" : "testAppend_StringBuilder_int_int",
  "sourceCode" : "@Test\r\nvoid testAppend_StringBuilder_int_int() {\r\n    final TextStringBuilder sb0 = new TextStringBuilder();\r\n    sb0.setNullText(\"NULL\").append((String) null, 0, 1);\r\n    assertEquals(\"NULL\", sb0.toString());\r\n    final TextStringBuilder sb = new TextStringBuilder();\r\n    sb.append(new StringBuilder(\"foo\"), 0, 3);\r\n    assertEquals(\"foo\", sb.toString());\r\n    assertThrows(IndexOutOfBoundsException.class, () -> sb.append(new StringBuilder(\"bar\"), -1, 1), \"append(StringBuilder, -1,) expected IndexOutOfBoundsException\");\r\n    assertThrows(IndexOutOfBoundsException.class, () -> sb.append(new StringBuilder(\"bar\"), 3, 1), \"append(StringBuilder, 3,) expected IndexOutOfBoundsException\");\r\n    assertThrows(IndexOutOfBoundsException.class, () -> sb.append(new StringBuilder(\"bar\"), 1, -1), \"append(StringBuilder,, -1) expected IndexOutOfBoundsException\");\r\n    assertThrows(IndexOutOfBoundsException.class, () -> sb.append(new StringBuilder(\"bar\"), 1, 3), \"append(StringBuilder, 1, 3) expected IndexOutOfBoundsException\");\r\n    assertThrows(IndexOutOfBoundsException.class, () -> sb.append(new StringBuilder(\"bar\"), -1, 3), \"append(StringBuilder, -1, 3) expected IndexOutOfBoundsException\");\r\n    assertThrows(IndexOutOfBoundsException.class, () -> sb.append(new StringBuilder(\"bar\"), 4, 0), \"append(StringBuilder, 4, 0) expected IndexOutOfBoundsException\");\r\n    sb.append(new StringBuilder(\"bar\"), 3, 0);\r\n    assertEquals(\"foo\", sb.toString());\r\n    sb.append(new StringBuilder(\"abcbardef\"), 3, 3);\r\n    assertEquals(\"foobar\", sb.toString());\r\n    sb.append(new StringBuilder(\"abcbardef\"), 4, 3);\r\n    assertEquals(\"foobarard\", sb.toString());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\TextStringBuilderAppendInsertTest.java",
  "methodName" : "testAppend_TextStringBuilder",
  "sourceCode" : "@Test\r\nvoid testAppend_TextStringBuilder() {\r\n    TextStringBuilder sb = new TextStringBuilder();\r\n    sb.setNullText(\"NULL\").append((TextStringBuilder) null);\r\n    assertEquals(\"NULL\", sb.toString());\r\n    sb = new TextStringBuilder();\r\n    sb.append(new TextStringBuilder(\"foo\"));\r\n    assertEquals(\"foo\", sb.toString());\r\n    sb.append(new TextStringBuilder(\"\"));\r\n    assertEquals(\"foo\", sb.toString());\r\n    sb.append(new TextStringBuilder(\"bar\"));\r\n    assertEquals(\"foobar\", sb.toString());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\TextStringBuilderAppendInsertTest.java",
  "methodName" : "testAppend_TextStringBuilder_int_int",
  "sourceCode" : "@Test\r\nvoid testAppend_TextStringBuilder_int_int() {\r\n    final TextStringBuilder sb0 = new TextStringBuilder();\r\n    sb0.setNullText(\"NULL\").append((TextStringBuilder) null, 0, 1);\r\n    assertEquals(\"NULL\", sb0.toString());\r\n    final TextStringBuilder sb = new TextStringBuilder();\r\n    sb.append(new TextStringBuilder(\"foo\"), 0, 3);\r\n    assertEquals(\"foo\", sb.toString());\r\n    assertThrows(IndexOutOfBoundsException.class, () -> sb.append(new TextStringBuilder(\"bar\"), -1, 1), \"append(char[], -1,) expected IndexOutOfBoundsException\");\r\n    assertThrows(IndexOutOfBoundsException.class, () -> sb.append(new TextStringBuilder(\"bar\"), 3, 1), \"append(char[], 3,) expected IndexOutOfBoundsException\");\r\n    assertThrows(IndexOutOfBoundsException.class, () -> sb.append(new TextStringBuilder(\"bar\"), 1, -1), \"append(char[],, -1) expected IndexOutOfBoundsException\");\r\n    assertThrows(IndexOutOfBoundsException.class, () -> sb.append(new TextStringBuilder(\"bar\"), 1, 3), \"append(char[], 1, 3) expected IndexOutOfBoundsException\");\r\n    assertThrows(IndexOutOfBoundsException.class, () -> sb.append(new TextStringBuilder(\"bar\"), -1, 3), \"append(char[], -1, 3) expected IndexOutOfBoundsException\");\r\n    assertThrows(IndexOutOfBoundsException.class, () -> sb.append(new TextStringBuilder(\"bar\"), 4, 0), \"append(char[], 4, 0) expected IndexOutOfBoundsException\");\r\n    sb.append(new TextStringBuilder(\"bar\"), 3, 0);\r\n    assertEquals(\"foo\", sb.toString());\r\n    sb.append(new TextStringBuilder(\"abcbardef\"), 3, 3);\r\n    assertEquals(\"foobar\", sb.toString());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\TextStringBuilderAppendInsertTest.java",
  "methodName" : "testAppendAll_Array",
  "sourceCode" : "@Test\r\nvoid testAppendAll_Array() {\r\n    final TextStringBuilder sb = new TextStringBuilder();\r\n    sb.appendAll((Object[]) null);\r\n    assertEquals(\"\", sb.toString());\r\n    sb.clear();\r\n    sb.appendAll();\r\n    assertEquals(\"\", sb.toString());\r\n    sb.clear();\r\n    sb.appendAll(\"foo\", \"bar\", \"baz\");\r\n    assertEquals(\"foobarbaz\", sb.toString());\r\n    sb.clear();\r\n    sb.appendAll(\"foo\", \"bar\", \"baz\");\r\n    assertEquals(\"foobarbaz\", sb.toString());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\TextStringBuilderAppendInsertTest.java",
  "methodName" : "testAppendAll_Collection",
  "sourceCode" : "@Test\r\nvoid testAppendAll_Collection() {\r\n    final TextStringBuilder sb = new TextStringBuilder();\r\n    sb.appendAll((Collection<?>) null);\r\n    assertEquals(\"\", sb.toString());\r\n    sb.clear();\r\n    sb.appendAll(Collections.EMPTY_LIST);\r\n    assertEquals(\"\", sb.toString());\r\n    sb.clear();\r\n    sb.appendAll(Arrays.asList(\"foo\", \"bar\", \"baz\"));\r\n    assertEquals(\"foobarbaz\", sb.toString());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\TextStringBuilderAppendInsertTest.java",
  "methodName" : "testAppendAll_Iterator",
  "sourceCode" : "@Test\r\nvoid testAppendAll_Iterator() {\r\n    final TextStringBuilder sb = new TextStringBuilder();\r\n    sb.appendAll((Iterator<?>) null);\r\n    assertEquals(\"\", sb.toString());\r\n    sb.clear();\r\n    sb.appendAll(Collections.EMPTY_LIST.iterator());\r\n    assertEquals(\"\", sb.toString());\r\n    sb.clear();\r\n    sb.appendAll(Arrays.asList(\"foo\", \"bar\", \"baz\").iterator());\r\n    assertEquals(\"foobarbaz\", sb.toString());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\TextStringBuilderAppendInsertTest.java",
  "methodName" : "testAppendFixedWidthPadLeft",
  "sourceCode" : "@Test\r\nvoid testAppendFixedWidthPadLeft() {\r\n    final TextStringBuilder sb = new TextStringBuilder();\r\n    sb.appendFixedWidthPadLeft(\"foo\", -1, '-');\r\n    assertEquals(\"\", sb.toString());\r\n    sb.clear();\r\n    sb.appendFixedWidthPadLeft(\"foo\", 0, '-');\r\n    assertEquals(\"\", sb.toString());\r\n    sb.clear();\r\n    sb.appendFixedWidthPadLeft(\"foo\", 1, '-');\r\n    assertEquals(\"o\", sb.toString());\r\n    sb.clear();\r\n    sb.appendFixedWidthPadLeft(\"foo\", 2, '-');\r\n    assertEquals(\"oo\", sb.toString());\r\n    sb.clear();\r\n    sb.appendFixedWidthPadLeft(\"foo\", 3, '-');\r\n    assertEquals(\"foo\", sb.toString());\r\n    sb.clear();\r\n    sb.appendFixedWidthPadLeft(\"foo\", 4, '-');\r\n    assertEquals(\"-foo\", sb.toString());\r\n    sb.clear();\r\n    sb.appendFixedWidthPadLeft(\"foo\", 10, '-');\r\n    assertEquals(10, sb.length());\r\n    // 1234567890\r\n    assertEquals(\"-------foo\", sb.toString());\r\n    sb.clear();\r\n    sb.setNullText(\"null\");\r\n    sb.appendFixedWidthPadLeft(null, 5, '-');\r\n    assertEquals(\"-null\", sb.toString());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\TextStringBuilderAppendInsertTest.java",
  "methodName" : "testAppendFixedWidthPadLeft_int",
  "sourceCode" : "@Test\r\nvoid testAppendFixedWidthPadLeft_int() {\r\n    final TextStringBuilder sb = new TextStringBuilder();\r\n    sb.appendFixedWidthPadLeft(123, -1, '-');\r\n    assertEquals(\"\", sb.toString());\r\n    sb.clear();\r\n    sb.appendFixedWidthPadLeft(123, 0, '-');\r\n    assertEquals(\"\", sb.toString());\r\n    sb.clear();\r\n    sb.appendFixedWidthPadLeft(123, 1, '-');\r\n    assertEquals(\"3\", sb.toString());\r\n    sb.clear();\r\n    sb.appendFixedWidthPadLeft(123, 2, '-');\r\n    assertEquals(\"23\", sb.toString());\r\n    sb.clear();\r\n    sb.appendFixedWidthPadLeft(123, 3, '-');\r\n    assertEquals(\"123\", sb.toString());\r\n    sb.clear();\r\n    sb.appendFixedWidthPadLeft(123, 4, '-');\r\n    assertEquals(\"-123\", sb.toString());\r\n    sb.clear();\r\n    sb.appendFixedWidthPadLeft(123, 10, '-');\r\n    assertEquals(10, sb.length());\r\n    // 1234567890\r\n    assertEquals(\"-------123\", sb.toString());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\TextStringBuilderAppendInsertTest.java",
  "methodName" : "testAppendFixedWidthPadRight",
  "sourceCode" : "@Test\r\nvoid testAppendFixedWidthPadRight() {\r\n    final TextStringBuilder sb = new TextStringBuilder();\r\n    sb.appendFixedWidthPadRight(\"foo\", -1, '-');\r\n    assertEquals(\"\", sb.toString());\r\n    sb.clear();\r\n    sb.appendFixedWidthPadRight(\"foo\", 0, '-');\r\n    assertEquals(\"\", sb.toString());\r\n    sb.clear();\r\n    sb.appendFixedWidthPadRight(\"foo\", 1, '-');\r\n    assertEquals(\"f\", sb.toString());\r\n    sb.clear();\r\n    sb.appendFixedWidthPadRight(\"foo\", 2, '-');\r\n    assertEquals(\"fo\", sb.toString());\r\n    sb.clear();\r\n    sb.appendFixedWidthPadRight(\"foo\", 3, '-');\r\n    assertEquals(\"foo\", sb.toString());\r\n    sb.clear();\r\n    sb.appendFixedWidthPadRight(\"foo\", 4, '-');\r\n    assertEquals(\"foo-\", sb.toString());\r\n    sb.clear();\r\n    sb.appendFixedWidthPadRight(\"foo\", 10, '-');\r\n    assertEquals(10, sb.length());\r\n    // 1234567890\r\n    assertEquals(\"foo-------\", sb.toString());\r\n    sb.clear();\r\n    sb.setNullText(\"null\");\r\n    sb.appendFixedWidthPadRight(null, 5, '-');\r\n    assertEquals(\"null-\", sb.toString());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\TextStringBuilderAppendInsertTest.java",
  "methodName" : "testAppendFixedWidthPadRight_int",
  "sourceCode" : "@Test\r\nvoid testAppendFixedWidthPadRight_int() {\r\n    final TextStringBuilder sb = new TextStringBuilder();\r\n    sb.appendFixedWidthPadRight(123, -1, '-');\r\n    assertEquals(\"\", sb.toString());\r\n    sb.clear();\r\n    sb.appendFixedWidthPadRight(123, 0, '-');\r\n    assertEquals(\"\", sb.toString());\r\n    sb.clear();\r\n    sb.appendFixedWidthPadRight(123, 1, '-');\r\n    assertEquals(\"1\", sb.toString());\r\n    sb.clear();\r\n    sb.appendFixedWidthPadRight(123, 2, '-');\r\n    assertEquals(\"12\", sb.toString());\r\n    sb.clear();\r\n    sb.appendFixedWidthPadRight(123, 3, '-');\r\n    assertEquals(\"123\", sb.toString());\r\n    sb.clear();\r\n    sb.appendFixedWidthPadRight(123, 4, '-');\r\n    assertEquals(\"123-\", sb.toString());\r\n    sb.clear();\r\n    sb.appendFixedWidthPadRight(123, 10, '-');\r\n    assertEquals(10, sb.length());\r\n    // 1234567890\r\n    assertEquals(\"123-------\", sb.toString());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\TextStringBuilderAppendInsertTest.java",
  "methodName" : "testAppendln_Boolean",
  "sourceCode" : "@Test\r\nvoid testAppendln_Boolean() {\r\n    final TextStringBuilder sb = new TextStringBuilder();\r\n    sb.appendln(true);\r\n    assertEquals(\"true\" + SEP, sb.toString());\r\n    sb.clear();\r\n    sb.appendln(false);\r\n    assertEquals(\"false\" + SEP, sb.toString());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\TextStringBuilderAppendInsertTest.java",
  "methodName" : "testAppendln_CharArray",
  "sourceCode" : "@Test\r\nvoid testAppendln_CharArray() {\r\n    final TextStringBuilder sb = spy(new TextStringBuilder());\r\n    final char[] input = \"foo\".toCharArray();\r\n    sb.appendln(input);\r\n    assertEquals(\"foo\" + SEP, sb.toString());\r\n    verify(sb, times(1)).append(input);\r\n    verify(sb, times(1)).appendNewLine();\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\TextStringBuilderAppendInsertTest.java",
  "methodName" : "testAppendln_CharArray_int_int",
  "sourceCode" : "@Test\r\nvoid testAppendln_CharArray_int_int() {\r\n    final TextStringBuilder sb = spy(new TextStringBuilder());\r\n    final char[] input = \"foo\".toCharArray();\r\n    sb.appendln(input, 0, 3);\r\n    assertEquals(\"foo\" + SEP, sb.toString());\r\n    verify(sb, times(1)).append(input, 0, 3);\r\n    verify(sb, times(1)).appendNewLine();\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\TextStringBuilderAppendInsertTest.java",
  "methodName" : "testAppendln_FormattedString",
  "sourceCode" : "@Test\r\nvoid testAppendln_FormattedString() {\r\n    final TextStringBuilder sb = spy(new TextStringBuilder());\r\n    sb.appendln(\"Hello %s\", \"Alice\");\r\n    assertEquals(\"Hello Alice\" + SEP, sb.toString());\r\n    // appendNewLine() calls append(String)\r\n    verify(sb, times(2)).append(anyString());\r\n    verify(sb, times(1)).appendNewLine();\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\TextStringBuilderAppendInsertTest.java",
  "methodName" : "testAppendln_Object",
  "sourceCode" : "@Test\r\nvoid testAppendln_Object() {\r\n    final TextStringBuilder sb = new TextStringBuilder();\r\n    sb.appendln((Object) null);\r\n    assertEquals(\"\" + SEP, sb.toString());\r\n    sb.appendln(FOO);\r\n    assertEquals(SEP + \"foo\" + SEP, sb.toString());\r\n    sb.appendln(Integer.valueOf(6));\r\n    assertEquals(SEP + \"foo\" + SEP + \"6\" + SEP, sb.toString());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\TextStringBuilderAppendInsertTest.java",
  "methodName" : "testAppendln_PrimitiveNumber",
  "sourceCode" : "@Test\r\nvoid testAppendln_PrimitiveNumber() {\r\n    final TextStringBuilder sb = new TextStringBuilder();\r\n    sb.appendln(0);\r\n    assertEquals(\"0\" + SEP, sb.toString());\r\n    sb.clear();\r\n    sb.appendln(1L);\r\n    assertEquals(\"1\" + SEP, sb.toString());\r\n    sb.clear();\r\n    sb.appendln(2.3f);\r\n    assertEquals(\"2.3\" + SEP, sb.toString());\r\n    sb.clear();\r\n    sb.appendln(4.5d);\r\n    assertEquals(\"4.5\" + SEP, sb.toString());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\TextStringBuilderAppendInsertTest.java",
  "methodName" : "testAppendln_String",
  "sourceCode" : "@Test\r\nvoid testAppendln_String() {\r\n    final TextStringBuilder sb = spy(new TextStringBuilder());\r\n    sb.appendln(\"foo\");\r\n    assertEquals(\"foo\" + SEP, sb.toString());\r\n    // appendNewLine() calls append(String)\r\n    verify(sb, times(2)).append(anyString());\r\n    verify(sb, times(1)).appendNewLine();\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\TextStringBuilderAppendInsertTest.java",
  "methodName" : "testAppendln_String_int_int",
  "sourceCode" : "@Test\r\nvoid testAppendln_String_int_int() {\r\n    final TextStringBuilder sb = spy(new TextStringBuilder());\r\n    sb.appendln(\"foo\", 0, 3);\r\n    assertEquals(\"foo\" + SEP, sb.toString());\r\n    // appendNewLine() calls append(String)\r\n    verify(sb, times(2)).append(anyString(), anyInt(), anyInt());\r\n    verify(sb, times(1)).appendNewLine();\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\TextStringBuilderAppendInsertTest.java",
  "methodName" : "testAppendln_StringBuffer",
  "sourceCode" : "@Test\r\nvoid testAppendln_StringBuffer() {\r\n    final TextStringBuilder sb = spy(new TextStringBuilder());\r\n    sb.appendln(new StringBuffer(\"foo\"));\r\n    assertEquals(\"foo\" + SEP, sb.toString());\r\n    verify(sb, times(1)).append(any(StringBuffer.class));\r\n    verify(sb, times(1)).appendNewLine();\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\TextStringBuilderAppendInsertTest.java",
  "methodName" : "testAppendln_StringBuffer_int_int",
  "sourceCode" : "@Test\r\nvoid testAppendln_StringBuffer_int_int() {\r\n    final TextStringBuilder sb = spy(new TextStringBuilder());\r\n    sb.appendln(new StringBuffer(\"foo\"), 0, 3);\r\n    assertEquals(\"foo\" + SEP, sb.toString());\r\n    verify(sb, times(1)).append(any(StringBuffer.class), anyInt(), anyInt());\r\n    verify(sb, times(1)).appendNewLine();\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\TextStringBuilderAppendInsertTest.java",
  "methodName" : "testAppendln_StringBuilder",
  "sourceCode" : "@Test\r\nvoid testAppendln_StringBuilder() {\r\n    final TextStringBuilder sb = spy(new TextStringBuilder());\r\n    sb.appendln(new StringBuilder(\"foo\"));\r\n    assertEquals(\"foo\" + SEP, sb.toString());\r\n    verify(sb, times(1)).append(any(StringBuilder.class));\r\n    verify(sb, times(1)).appendNewLine();\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\TextStringBuilderAppendInsertTest.java",
  "methodName" : "testAppendln_StringBuilder_int_int",
  "sourceCode" : "@Test\r\nvoid testAppendln_StringBuilder_int_int() {\r\n    final TextStringBuilder sb = spy(new TextStringBuilder());\r\n    sb.appendln(new StringBuilder(\"foo\"), 0, 3);\r\n    assertEquals(\"foo\" + SEP, sb.toString());\r\n    verify(sb, times(1)).append(any(StringBuilder.class), anyInt(), anyInt());\r\n    verify(sb, times(1)).appendNewLine();\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\TextStringBuilderAppendInsertTest.java",
  "methodName" : "testAppendln_TextStringBuilder",
  "sourceCode" : "@Test\r\nvoid testAppendln_TextStringBuilder() {\r\n    final TextStringBuilder sb = spy(new TextStringBuilder());\r\n    sb.appendln(new TextStringBuilder(\"foo\"));\r\n    assertEquals(\"foo\" + SEP, sb.toString());\r\n    verify(sb, times(1)).append(any(TextStringBuilder.class));\r\n    verify(sb, times(1)).appendNewLine();\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\TextStringBuilderAppendInsertTest.java",
  "methodName" : "testAppendln_TextStringBuilder_int_int",
  "sourceCode" : "@Test\r\nvoid testAppendln_TextStringBuilder_int_int() {\r\n    final TextStringBuilder sb = spy(new TextStringBuilder());\r\n    sb.appendln(new TextStringBuilder(\"foo\"), 0, 3);\r\n    assertEquals(\"foo\" + SEP, sb.toString());\r\n    verify(sb, times(1)).append(any(TextStringBuilder.class), anyInt(), anyInt());\r\n    verify(sb, times(1)).appendNewLine();\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\TextStringBuilderAppendInsertTest.java",
  "methodName" : "testAppendNewLine",
  "sourceCode" : "@Test\r\nvoid testAppendNewLine() {\r\n    TextStringBuilder sb = new TextStringBuilder(\"---\");\r\n    sb.appendNewLine().append(\"+++\");\r\n    assertEquals(\"---\" + SEP + \"+++\", sb.toString());\r\n    sb = new TextStringBuilder(\"---\");\r\n    sb.setNewLineText(\"#\").appendNewLine().setNewLineText(null).appendNewLine();\r\n    assertEquals(\"---#\" + SEP, sb.toString());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\TextStringBuilderAppendInsertTest.java",
  "methodName" : "testAppendPadding",
  "sourceCode" : "@Test\r\nvoid testAppendPadding() {\r\n    final TextStringBuilder sb = new TextStringBuilder();\r\n    sb.append(\"foo\");\r\n    assertEquals(\"foo\", sb.toString());\r\n    sb.appendPadding(-1, '-');\r\n    assertEquals(\"foo\", sb.toString());\r\n    sb.appendPadding(0, '-');\r\n    assertEquals(\"foo\", sb.toString());\r\n    sb.appendPadding(1, '-');\r\n    assertEquals(\"foo-\", sb.toString());\r\n    sb.appendPadding(16, '-');\r\n    assertEquals(20, sb.length());\r\n    // 12345678901234567890\r\n    assertEquals(\"foo-----------------\", sb.toString());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\TextStringBuilderAppendInsertTest.java",
  "methodName" : "testAppendSeparator_char",
  "sourceCode" : "@Test\r\nvoid testAppendSeparator_char() {\r\n    final TextStringBuilder sb = new TextStringBuilder();\r\n    // no effect\r\n    sb.appendSeparator(',');\r\n    assertEquals(\"\", sb.toString());\r\n    sb.append(\"foo\");\r\n    assertEquals(\"foo\", sb.toString());\r\n    sb.appendSeparator(',');\r\n    assertEquals(\"foo,\", sb.toString());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\TextStringBuilderAppendInsertTest.java",
  "methodName" : "testAppendSeparator_char_char",
  "sourceCode" : "@Test\r\nvoid testAppendSeparator_char_char() {\r\n    final TextStringBuilder sb = new TextStringBuilder();\r\n    final char startSeparator = ':';\r\n    final char standardSeparator = ',';\r\n    final String foo = \"foo\";\r\n    // no effect\r\n    sb.appendSeparator(standardSeparator, startSeparator);\r\n    assertEquals(String.valueOf(startSeparator), sb.toString());\r\n    sb.append(foo);\r\n    assertEquals(String.valueOf(startSeparator) + foo, sb.toString());\r\n    sb.appendSeparator(standardSeparator, startSeparator);\r\n    assertEquals(String.valueOf(startSeparator) + foo + standardSeparator, sb.toString());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\TextStringBuilderAppendInsertTest.java",
  "methodName" : "testAppendSeparator_char_int",
  "sourceCode" : "@Test\r\nvoid testAppendSeparator_char_int() {\r\n    final TextStringBuilder sb = new TextStringBuilder();\r\n    // no effect\r\n    sb.appendSeparator(',', 0);\r\n    assertEquals(\"\", sb.toString());\r\n    sb.append(\"foo\");\r\n    assertEquals(\"foo\", sb.toString());\r\n    sb.appendSeparator(',', 1);\r\n    assertEquals(\"foo,\", sb.toString());\r\n    // no effect\r\n    sb.appendSeparator(',', -1);\r\n    assertEquals(\"foo,\", sb.toString());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\TextStringBuilderAppendInsertTest.java",
  "methodName" : "testAppendSeparator_String",
  "sourceCode" : "@Test\r\nvoid testAppendSeparator_String() {\r\n    final TextStringBuilder sb = new TextStringBuilder();\r\n    // no effect\r\n    sb.appendSeparator(\",\");\r\n    assertEquals(\"\", sb.toString());\r\n    sb.append(\"foo\");\r\n    assertEquals(\"foo\", sb.toString());\r\n    sb.appendSeparator(\",\");\r\n    assertEquals(\"foo,\", sb.toString());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\TextStringBuilderAppendInsertTest.java",
  "methodName" : "testAppendSeparator_String_int",
  "sourceCode" : "@Test\r\nvoid testAppendSeparator_String_int() {\r\n    final TextStringBuilder sb = new TextStringBuilder();\r\n    // no effect\r\n    sb.appendSeparator(null, -1);\r\n    assertEquals(\"\", sb.toString());\r\n    // no effect\r\n    sb.appendSeparator(null, 0);\r\n    assertEquals(\"\", sb.toString());\r\n    // no effect\r\n    sb.appendSeparator(null, 1);\r\n    assertEquals(\"\", sb.toString());\r\n    // no effect\r\n    sb.appendSeparator(\",\", -1);\r\n    assertEquals(\"\", sb.toString());\r\n    // no effect\r\n    sb.appendSeparator(\",\", 0);\r\n    assertEquals(\"\", sb.toString());\r\n    sb.append(\"foo\");\r\n    assertEquals(\"foo\", sb.toString());\r\n    sb.appendSeparator(\",\", 1);\r\n    assertEquals(\"foo,\", sb.toString());\r\n    // no effect\r\n    sb.appendSeparator(\",\", -1);\r\n    assertEquals(\"foo,\", sb.toString());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\TextStringBuilderAppendInsertTest.java",
  "methodName" : "testAppendSeparator_String_String",
  "sourceCode" : "@Test\r\nvoid testAppendSeparator_String_String() {\r\n    final TextStringBuilder sb = new TextStringBuilder();\r\n    final String startSeparator = \"order by \";\r\n    final String standardSeparator = \",\";\r\n    final String foo = \"foo\";\r\n    sb.appendSeparator(null, null);\r\n    assertEquals(\"\", sb.toString());\r\n    sb.appendSeparator(standardSeparator, null);\r\n    assertEquals(\"\", sb.toString());\r\n    sb.appendSeparator(standardSeparator, startSeparator);\r\n    assertEquals(startSeparator, sb.toString());\r\n    sb.appendSeparator(null, null);\r\n    assertEquals(startSeparator, sb.toString());\r\n    sb.appendSeparator(null, startSeparator);\r\n    assertEquals(startSeparator, sb.toString());\r\n    sb.append(foo);\r\n    assertEquals(startSeparator + foo, sb.toString());\r\n    sb.appendSeparator(standardSeparator, startSeparator);\r\n    assertEquals(startSeparator + foo + standardSeparator, sb.toString());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\TextStringBuilderAppendInsertTest.java",
  "methodName" : "testAppendWithNullText",
  "sourceCode" : "@Test\r\nvoid testAppendWithNullText() {\r\n    final TextStringBuilder sb = new TextStringBuilder();\r\n    sb.setNullText(\"NULL\");\r\n    assertEquals(\"\", sb.toString());\r\n    sb.appendNull();\r\n    assertEquals(\"NULL\", sb.toString());\r\n    sb.append((Object) null);\r\n    assertEquals(\"NULLNULL\", sb.toString());\r\n    sb.append(FOO);\r\n    assertEquals(\"NULLNULLfoo\", sb.toString());\r\n    sb.append((String) null);\r\n    assertEquals(\"NULLNULLfooNULL\", sb.toString());\r\n    sb.append(\"\");\r\n    assertEquals(\"NULLNULLfooNULL\", sb.toString());\r\n    sb.append(\"bar\");\r\n    assertEquals(\"NULLNULLfooNULLbar\", sb.toString());\r\n    sb.append((StringBuffer) null);\r\n    assertEquals(\"NULLNULLfooNULLbarNULL\", sb.toString());\r\n    sb.append(new StringBuffer(\"baz\"));\r\n    assertEquals(\"NULLNULLfooNULLbarNULLbaz\", sb.toString());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\TextStringBuilderAppendInsertTest.java",
  "methodName" : "testAppendWithSeparators_Array",
  "sourceCode" : "@Test\r\nvoid testAppendWithSeparators_Array() {\r\n    final TextStringBuilder sb = new TextStringBuilder();\r\n    sb.appendWithSeparators((Object[]) null, \",\");\r\n    assertEquals(\"\", sb.toString());\r\n    sb.clear();\r\n    sb.appendWithSeparators(ArrayUtils.EMPTY_OBJECT_ARRAY, \",\");\r\n    assertEquals(\"\", sb.toString());\r\n    sb.clear();\r\n    sb.appendWithSeparators(new Object[] { \"foo\", \"bar\", \"baz\" }, \",\");\r\n    assertEquals(\"foo,bar,baz\", sb.toString());\r\n    sb.clear();\r\n    sb.appendWithSeparators(new Object[] { \"foo\", \"bar\", \"baz\" }, null);\r\n    assertEquals(\"foobarbaz\", sb.toString());\r\n    sb.clear();\r\n    sb.appendWithSeparators(new Object[] { \"foo\", null, \"baz\" }, \",\");\r\n    assertEquals(\"foo,,baz\", sb.toString());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\TextStringBuilderAppendInsertTest.java",
  "methodName" : "testAppendWithSeparators_Collection",
  "sourceCode" : "@Test\r\nvoid testAppendWithSeparators_Collection() {\r\n    final TextStringBuilder sb = new TextStringBuilder();\r\n    sb.appendWithSeparators((Collection<?>) null, \",\");\r\n    assertEquals(\"\", sb.toString());\r\n    sb.clear();\r\n    sb.appendWithSeparators(Collections.EMPTY_LIST, \",\");\r\n    assertEquals(\"\", sb.toString());\r\n    sb.clear();\r\n    sb.appendWithSeparators(Arrays.asList(\"foo\", \"bar\", \"baz\"), \",\");\r\n    assertEquals(\"foo,bar,baz\", sb.toString());\r\n    sb.clear();\r\n    sb.appendWithSeparators(Arrays.asList(\"foo\", \"bar\", \"baz\"), null);\r\n    assertEquals(\"foobarbaz\", sb.toString());\r\n    sb.clear();\r\n    sb.appendWithSeparators(Arrays.asList(\"foo\", null, \"baz\"), \",\");\r\n    assertEquals(\"foo,,baz\", sb.toString());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\TextStringBuilderAppendInsertTest.java",
  "methodName" : "testAppendWithSeparators_Iterator",
  "sourceCode" : "@Test\r\nvoid testAppendWithSeparators_Iterator() {\r\n    final TextStringBuilder sb = new TextStringBuilder();\r\n    sb.appendWithSeparators((Iterator<?>) null, \",\");\r\n    assertEquals(\"\", sb.toString());\r\n    sb.clear();\r\n    sb.appendWithSeparators(Collections.EMPTY_LIST.iterator(), \",\");\r\n    assertEquals(\"\", sb.toString());\r\n    sb.clear();\r\n    sb.appendWithSeparators(Arrays.asList(\"foo\", \"bar\", \"baz\").iterator(), \",\");\r\n    assertEquals(\"foo,bar,baz\", sb.toString());\r\n    sb.clear();\r\n    sb.appendWithSeparators(Arrays.asList(\"foo\", \"bar\", \"baz\").iterator(), null);\r\n    assertEquals(\"foobarbaz\", sb.toString());\r\n    sb.clear();\r\n    sb.appendWithSeparators(Arrays.asList(\"foo\", null, \"baz\").iterator(), \",\");\r\n    assertEquals(\"foo,,baz\", sb.toString());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\TextStringBuilderAppendInsertTest.java",
  "methodName" : "testAppendWithSeparatorsWithNullText",
  "sourceCode" : "@Test\r\nvoid testAppendWithSeparatorsWithNullText() {\r\n    final TextStringBuilder sb = new TextStringBuilder();\r\n    sb.setNullText(\"null\");\r\n    sb.appendWithSeparators(new Object[] { \"foo\", null, \"baz\" }, \",\");\r\n    assertEquals(\"foo,null,baz\", sb.toString());\r\n    sb.clear();\r\n    sb.appendWithSeparators(Arrays.asList(\"foo\", null, \"baz\"), \",\");\r\n    assertEquals(\"foo,null,baz\", sb.toString());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\TextStringBuilderAppendInsertTest.java",
  "methodName" : "testInsert",
  "sourceCode" : "@Test\r\nvoid testInsert() {\r\n    final TextStringBuilder sb = new TextStringBuilder();\r\n    sb.append(\"barbaz\");\r\n    assertEquals(\"barbaz\", sb.toString());\r\n    assertThrows(IndexOutOfBoundsException.class, () -> sb.insert(-1, FOO));\r\n    assertThrows(IndexOutOfBoundsException.class, () -> sb.insert(7, FOO));\r\n    sb.insert(0, (Object) null);\r\n    assertEquals(\"barbaz\", sb.toString());\r\n    sb.insert(0, FOO);\r\n    assertEquals(\"foobarbaz\", sb.toString());\r\n    sb.clear();\r\n    sb.append(\"barbaz\");\r\n    assertEquals(\"barbaz\", sb.toString());\r\n    assertThrows(IndexOutOfBoundsException.class, () -> sb.insert(-1, \"foo\"));\r\n    assertThrows(IndexOutOfBoundsException.class, () -> sb.insert(7, \"foo\"));\r\n    sb.insert(0, (String) null);\r\n    assertEquals(\"barbaz\", sb.toString());\r\n    sb.insert(0, \"foo\");\r\n    assertEquals(\"foobarbaz\", sb.toString());\r\n    sb.clear();\r\n    sb.append(\"barbaz\");\r\n    assertEquals(\"barbaz\", sb.toString());\r\n    assertThrows(IndexOutOfBoundsException.class, () -> sb.insert(-1, new char[] { 'f', 'o', 'o' }));\r\n    assertThrows(IndexOutOfBoundsException.class, () -> sb.insert(7, new char[] { 'f', 'o', 'o' }));\r\n    sb.insert(0, (char[]) null);\r\n    assertEquals(\"barbaz\", sb.toString());\r\n    sb.insert(0, ArrayUtils.EMPTY_CHAR_ARRAY);\r\n    assertEquals(\"barbaz\", sb.toString());\r\n    sb.insert(0, new char[] { 'f', 'o', 'o' });\r\n    assertEquals(\"foobarbaz\", sb.toString());\r\n    sb.clear();\r\n    sb.append(\"barbaz\");\r\n    assertEquals(\"barbaz\", sb.toString());\r\n    assertThrows(IndexOutOfBoundsException.class, () -> sb.insert(-1, new char[] { 'a', 'b', 'c', 'f', 'o', 'o', 'd', 'e', 'f' }, 3, 3));\r\n    assertThrows(IndexOutOfBoundsException.class, () -> sb.insert(7, new char[] { 'a', 'b', 'c', 'f', 'o', 'o', 'd', 'e', 'f' }, 3, 3));\r\n    sb.insert(0, (char[]) null, 0, 0);\r\n    assertEquals(\"barbaz\", sb.toString());\r\n    sb.insert(0, ArrayUtils.EMPTY_CHAR_ARRAY, 0, 0);\r\n    assertEquals(\"barbaz\", sb.toString());\r\n    assertThrows(IndexOutOfBoundsException.class, () -> sb.insert(0, new char[] { 'a', 'b', 'c', 'f', 'o', 'o', 'd', 'e', 'f' }, -1, 3));\r\n    assertThrows(IndexOutOfBoundsException.class, () -> sb.insert(0, new char[] { 'a', 'b', 'c', 'f', 'o', 'o', 'd', 'e', 'f' }, 10, 3));\r\n    assertThrows(IndexOutOfBoundsException.class, () -> sb.insert(0, new char[] { 'a', 'b', 'c', 'f', 'o', 'o', 'd', 'e', 'f' }, 0, -1));\r\n    assertThrows(IndexOutOfBoundsException.class, () -> sb.insert(0, new char[] { 'a', 'b', 'c', 'f', 'o', 'o', 'd', 'e', 'f' }, 0, 10));\r\n    sb.insert(0, new char[] { 'a', 'b', 'c', 'f', 'o', 'o', 'd', 'e', 'f' }, 0, 0);\r\n    assertEquals(\"barbaz\", sb.toString());\r\n    sb.insert(0, new char[] { 'a', 'b', 'c', 'f', 'o', 'o', 'd', 'e', 'f' }, 3, 3);\r\n    assertEquals(\"foobarbaz\", sb.toString());\r\n    sb.clear();\r\n    sb.append(\"barbaz\");\r\n    assertEquals(\"barbaz\", sb.toString());\r\n    assertThrows(IndexOutOfBoundsException.class, () -> sb.insert(-1, true));\r\n    assertThrows(IndexOutOfBoundsException.class, () -> sb.insert(7, true));\r\n    sb.insert(0, true);\r\n    assertEquals(\"truebarbaz\", sb.toString());\r\n    sb.insert(0, false);\r\n    assertEquals(\"falsetruebarbaz\", sb.toString());\r\n    sb.clear();\r\n    sb.append(\"barbaz\");\r\n    assertEquals(\"barbaz\", sb.toString());\r\n    assertThrows(IndexOutOfBoundsException.class, () -> sb.insert(-1, '!'));\r\n    assertThrows(IndexOutOfBoundsException.class, () -> sb.insert(7, '!'));\r\n    sb.insert(0, '!');\r\n    assertEquals(\"!barbaz\", sb.toString());\r\n    sb.clear();\r\n    sb.append(\"barbaz\");\r\n    assertEquals(\"barbaz\", sb.toString());\r\n    assertThrows(IndexOutOfBoundsException.class, () -> sb.insert(-1, 0));\r\n    assertThrows(IndexOutOfBoundsException.class, () -> sb.insert(7, 0));\r\n    sb.insert(0, '0');\r\n    assertEquals(\"0barbaz\", sb.toString());\r\n    sb.clear();\r\n    sb.append(\"barbaz\");\r\n    assertEquals(\"barbaz\", sb.toString());\r\n    assertThrows(IndexOutOfBoundsException.class, () -> sb.insert(-1, 1L));\r\n    assertThrows(IndexOutOfBoundsException.class, () -> sb.insert(7, 1L));\r\n    sb.insert(0, 1L);\r\n    assertEquals(\"1barbaz\", sb.toString());\r\n    sb.clear();\r\n    sb.append(\"barbaz\");\r\n    assertEquals(\"barbaz\", sb.toString());\r\n    assertThrows(IndexOutOfBoundsException.class, () -> sb.insert(-1, 2.3F));\r\n    assertThrows(IndexOutOfBoundsException.class, () -> sb.insert(7, 2.3F));\r\n    sb.insert(0, 2.3F);\r\n    assertEquals(\"2.3barbaz\", sb.toString());\r\n    sb.clear();\r\n    sb.append(\"barbaz\");\r\n    assertEquals(\"barbaz\", sb.toString());\r\n    assertThrows(IndexOutOfBoundsException.class, () -> sb.insert(-1, 4.5D));\r\n    assertThrows(IndexOutOfBoundsException.class, () -> sb.insert(7, 4.5D));\r\n    sb.insert(0, 4.5D);\r\n    assertEquals(\"4.5barbaz\", sb.toString());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\TextStringBuilderAppendInsertTest.java",
  "methodName" : "testInsertAtEnd",
  "sourceCode" : "@Test\r\nvoid testInsertAtEnd() {\r\n    final TextStringBuilder sb = new TextStringBuilder();\r\n    assertEquals(\"\", sb.toString());\r\n    sb.insert(0, \"Hello\");\r\n    assertEquals(\"Hello\", sb.toString());\r\n    assertThrows(IndexOutOfBoundsException.class, () -> sb.insert(-1, \"World\"));\r\n    assertThrows(IndexOutOfBoundsException.class, () -> sb.insert(6, \"World\"));\r\n    sb.insert(5, true);\r\n    assertEquals(\"Hellotrue\", sb.toString());\r\n    assertThrows(IndexOutOfBoundsException.class, () -> sb.insert(10, false));\r\n    assertThrows(IndexOutOfBoundsException.class, () -> sb.insert(-20, false));\r\n    sb.insert(9, 'A');\r\n    assertEquals(\"HellotrueA\", sb.toString());\r\n    assertThrows(IndexOutOfBoundsException.class, () -> sb.insert(11, 'B'));\r\n    assertThrows(IndexOutOfBoundsException.class, () -> sb.insert(-2, 'B'));\r\n    sb.insert(10, new char[] { 'B', 'C' });\r\n    assertEquals(\"HellotrueABC\", sb.toString());\r\n    assertThrows(IndexOutOfBoundsException.class, () -> sb.insert(13, new char[] { 'D', 'E' }));\r\n    assertThrows(IndexOutOfBoundsException.class, () -> sb.insert(-1, new char[] { 'D', 'E' }));\r\n    sb.insert(12, new char[] { 'D', 'E', 'F' }, 1, 1);\r\n    assertEquals(\"HellotrueABCE\", sb.toString());\r\n    assertThrows(IndexOutOfBoundsException.class, () -> sb.insert(14, new char[] { 'G', 'H', 'I' }, 1, 2));\r\n    assertThrows(IndexOutOfBoundsException.class, () -> sb.insert(-1, new char[] { 'G', 'H', 'I' }, 1, 1));\r\n    sb.insert(13, 1.2d);\r\n    assertEquals(\"HellotrueABCE1.2\", sb.toString());\r\n    assertThrows(IndexOutOfBoundsException.class, () -> sb.insert(17, 1.3d));\r\n    assertThrows(IndexOutOfBoundsException.class, () -> sb.insert(-1, 1.3d));\r\n    sb.insert(16, 1f);\r\n    assertEquals(\"HellotrueABCE1.21.0\", sb.toString());\r\n    assertThrows(IndexOutOfBoundsException.class, () -> sb.insert(20, 1.3f));\r\n    assertThrows(IndexOutOfBoundsException.class, () -> sb.insert(-3, 1.3f));\r\n    sb.insert(19, 23);\r\n    assertEquals(\"HellotrueABCE1.21.023\", sb.toString());\r\n    assertThrows(IndexOutOfBoundsException.class, () -> sb.insert(22, 20));\r\n    assertThrows(IndexOutOfBoundsException.class, () -> sb.insert(-5, -5));\r\n    sb.insert(21, 99L);\r\n    assertEquals(\"HellotrueABCE1.21.02399\", sb.toString());\r\n    assertThrows(IndexOutOfBoundsException.class, () -> sb.insert(24, 22L));\r\n    assertThrows(IndexOutOfBoundsException.class, () -> sb.insert(-1, -1L));\r\n    sb.insert(23, FOO);\r\n    assertEquals(\"HellotrueABCE1.21.02399foo\", sb.toString());\r\n    assertThrows(IndexOutOfBoundsException.class, () -> sb.insert(27, FOO));\r\n    assertThrows(IndexOutOfBoundsException.class, () -> sb.insert(-3, FOO));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\TextStringBuilderAppendInsertTest.java",
  "methodName" : "testInsertWithNullText",
  "sourceCode" : "@Test\r\nvoid testInsertWithNullText() {\r\n    final TextStringBuilder sb = new TextStringBuilder();\r\n    sb.setNullText(\"null\");\r\n    sb.append(\"barbaz\");\r\n    assertEquals(\"barbaz\", sb.toString());\r\n    assertThrows(IndexOutOfBoundsException.class, () -> sb.insert(-1, FOO));\r\n    assertThrows(IndexOutOfBoundsException.class, () -> sb.insert(7, FOO));\r\n    sb.insert(0, (Object) null);\r\n    assertEquals(\"nullbarbaz\", sb.toString());\r\n    sb.insert(0, FOO);\r\n    assertEquals(\"foonullbarbaz\", sb.toString());\r\n    sb.clear();\r\n    sb.append(\"barbaz\");\r\n    assertEquals(\"barbaz\", sb.toString());\r\n    assertThrows(IndexOutOfBoundsException.class, () -> sb.insert(-1, \"foo\"));\r\n    assertThrows(IndexOutOfBoundsException.class, () -> sb.insert(7, \"foo\"));\r\n    sb.insert(0, (String) null);\r\n    assertEquals(\"nullbarbaz\", sb.toString());\r\n    sb.insert(0, \"foo\");\r\n    assertEquals(\"foonullbarbaz\", sb.toString());\r\n    sb.insert(0, (char[]) null);\r\n    assertEquals(\"nullfoonullbarbaz\", sb.toString());\r\n    sb.insert(0, (char[]) null, 0, 0);\r\n    assertEquals(\"nullnullfoonullbarbaz\", sb.toString());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\TextStringBuilderAppendInsertTest.java",
  "methodName" : "testLang299",
  "sourceCode" : "/**\r\n * See: https://issues.apache.org/jira/browse/LANG-299\r\n */\r\n@Test\r\nvoid testLang299() {\r\n    final TextStringBuilder sb = new TextStringBuilder(1);\r\n    sb.appendFixedWidthPadRight(\"foo\", 1, '-');\r\n    assertEquals(\"f\", sb.toString());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\TextStringBuilderTest.java",
  "methodName" : "test_LANG_1131_EqualsWithNullTextStringBuilder",
  "sourceCode" : "@Test\r\nvoid test_LANG_1131_EqualsWithNullTextStringBuilder() throws Exception {\r\n    final TextStringBuilder sb = new TextStringBuilder();\r\n    final TextStringBuilder other = null;\r\n    assertFalse(sb.equals(other));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\TextStringBuilderTest.java",
  "methodName" : "testAppendCharBuffer",
  "sourceCode" : "@Test\r\nvoid testAppendCharBuffer() {\r\n    final TextStringBuilder sb1 = new TextStringBuilder();\r\n    final CharBuffer buf = CharBuffer.allocate(10);\r\n    buf.append(\"0123456789\");\r\n    buf.flip();\r\n    sb1.append(buf);\r\n    assertEquals(\"0123456789\", sb1.toString());\r\n    final TextStringBuilder sb2 = new TextStringBuilder();\r\n    sb2.append(buf, 1, 8);\r\n    assertEquals(\"12345678\", sb2.toString());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\TextStringBuilderTest.java",
  "methodName" : "testAppendCharBufferException",
  "sourceCode" : "@Test\r\nvoid testAppendCharBufferException() throws Exception {\r\n    final TextStringBuilder sb = new TextStringBuilder(\"1234567890\");\r\n    final String text = \"Test\";\r\n    final CharBuffer buffer = CharBuffer.allocate(sb.size() + text.length());\r\n    buffer.put(text);\r\n    buffer.flip();\r\n    try {\r\n        sb.append(buffer, -1, 12);\r\n    } catch (final StringIndexOutOfBoundsException e) {\r\n        assertEquals(\"startIndex must be valid\", e.getMessage());\r\n    }\r\n    try {\r\n        sb.append(buffer, 0, -1);\r\n    } catch (final StringIndexOutOfBoundsException e) {\r\n        assertEquals(\"length must be valid\", e.getMessage());\r\n    }\r\n    sb.append(buffer);\r\n    assertEquals(\"1234567890Test\", sb.toString());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\TextStringBuilderTest.java",
  "methodName" : "testAppendCharBufferNull",
  "sourceCode" : "@Test\r\nvoid testAppendCharBufferNull() throws Exception {\r\n    final TextStringBuilder sb = new TextStringBuilder(\"1234567890\");\r\n    final CharBuffer buffer = null;\r\n    sb.append(buffer);\r\n    assertEquals(\"1234567890\", sb.toString());\r\n    final TextStringBuilder sb1 = new TextStringBuilder(\"1234567890\");\r\n    final CharBuffer buffer1 = null;\r\n    sb.append(buffer1, 0, 0);\r\n    assertEquals(\"1234567890\", sb1.toString());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\TextStringBuilderTest.java",
  "methodName" : "testAppendCharSequence",
  "sourceCode" : "@Test\r\nvoid testAppendCharSequence() {\r\n    final CharSequence obj0 = null;\r\n    final CharSequence obj1 = new TextStringBuilder(\"test1\");\r\n    final CharSequence obj2 = new StringBuilder(\"test2\");\r\n    final CharSequence obj3 = new StringBuffer(\"test3\");\r\n    final CharBuffer obj4 = CharBuffer.wrap(\"test4\".toCharArray());\r\n    final TextStringBuilder sb0 = new TextStringBuilder();\r\n    assertEquals(\"\", sb0.append(obj0).toString());\r\n    final TextStringBuilder sb1 = new TextStringBuilder();\r\n    assertEquals(\"test1\", sb1.append(obj1).toString());\r\n    final TextStringBuilder sb2 = new TextStringBuilder();\r\n    assertEquals(\"test2\", sb2.append(obj2).toString());\r\n    final TextStringBuilder sb3 = new TextStringBuilder();\r\n    assertEquals(\"test3\", sb3.append(obj3).toString());\r\n    final TextStringBuilder sb4 = new TextStringBuilder();\r\n    assertEquals(\"test4\", sb4.append(obj4).toString());\r\n    final TextStringBuilder sb5 = new TextStringBuilder();\r\n    assertEquals(\"\", sb5.append(obj0, 0, 0).toString());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\TextStringBuilderTest.java",
  "methodName" : "testAppendln",
  "sourceCode" : "@Test\r\nvoid testAppendln() {\r\n    final TextStringBuilder sb1 = new TextStringBuilder();\r\n    final char ch = 'c';\r\n    assertEquals(\"c\" + System.lineSeparator(), sb1.appendln(ch).toString());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\TextStringBuilderTest.java",
  "methodName" : "testAppendStringBuilderNull",
  "sourceCode" : "@Test\r\nvoid testAppendStringBuilderNull() {\r\n    final TextStringBuilder sb1 = new TextStringBuilder();\r\n    final StringBuilder b = null;\r\n    assertEquals(\"\", sb1.append(b).toString());\r\n    final TextStringBuilder sb2 = new TextStringBuilder();\r\n    assertEquals(\"\", sb2.append(b, 0, 0).toString());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\TextStringBuilderTest.java",
  "methodName" : "testAppendTakingTwoIntsWithIndexOutOfBoundsThrowsStringIndexOutOfBoundsExceptionTwo",
  "sourceCode" : "@Test\r\nvoid testAppendTakingTwoIntsWithIndexOutOfBoundsThrowsStringIndexOutOfBoundsExceptionTwo() {\r\n    assertThrows(StringIndexOutOfBoundsException.class, () -> {\r\n        final Charset charset = Charset.defaultCharset();\r\n        final ByteBuffer byteBuffer = charset.encode(\"asdf\");\r\n        final CharBuffer charBuffer = charset.decode(byteBuffer);\r\n        new TextStringBuilder().append(charBuffer, 933, 654);\r\n    });\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\TextStringBuilderTest.java",
  "methodName" : "testAppendTakingTwoIntsWithZeroThrowsStringIndexOutOfBoundsException",
  "sourceCode" : "@Test\r\nvoid testAppendTakingTwoIntsWithZeroThrowsStringIndexOutOfBoundsException() {\r\n    assertThrows(StringIndexOutOfBoundsException.class, () -> {\r\n        final Charset charset = Charset.defaultCharset();\r\n        final ByteBuffer byteBuffer = charset.encode(\"end < start\");\r\n        final CharBuffer charBuffer = charset.decode(byteBuffer);\r\n        new TextStringBuilder(630).append(charBuffer, 0, 630);\r\n    });\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\TextStringBuilderTest.java",
  "methodName" : "testAppendToAppendable",
  "sourceCode" : "@Test\r\nvoid testAppendToAppendable() throws Exception {\r\n    final TextStringBuilder sb = new TextStringBuilder(\"1234567890\");\r\n    final StringWriter writer = new StringWriter();\r\n    writer.append(\"Test\");\r\n    sb.appendTo(NullAppendable.INSTANCE);\r\n    assertEquals(\"Test\", writer.toString());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\TextStringBuilderTest.java",
  "methodName" : "testAppendToCharBuffer",
  "sourceCode" : "@Test\r\nvoid testAppendToCharBuffer() throws Exception {\r\n    final TextStringBuilder sb = new TextStringBuilder(\"1234567890\");\r\n    final String text = \"Test \";\r\n    final CharBuffer buffer = CharBuffer.allocate(sb.size() + text.length());\r\n    buffer.put(text);\r\n    sb.appendTo(buffer);\r\n    buffer.flip();\r\n    assertEquals(\"Test 1234567890\", buffer.toString());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\TextStringBuilderTest.java",
  "methodName" : "testAppendToStringBuffer",
  "sourceCode" : "@Test\r\nvoid testAppendToStringBuffer() throws Exception {\r\n    final TextStringBuilder sb = new TextStringBuilder(\"1234567890\");\r\n    final StringBuilder buffer = new StringBuilder(\"Test \");\r\n    sb.appendTo(buffer);\r\n    assertEquals(\"Test 1234567890\", buffer.toString());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\TextStringBuilderTest.java",
  "methodName" : "testAppendToStringBuilder",
  "sourceCode" : "@Test\r\nvoid testAppendToStringBuilder() throws Exception {\r\n    final TextStringBuilder sb = new TextStringBuilder(\"1234567890\");\r\n    final StringBuilder builder = new StringBuilder(\"Test \");\r\n    sb.appendTo(builder);\r\n    assertEquals(\"Test 1234567890\", builder.toString());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\TextStringBuilderTest.java",
  "methodName" : "testAppendToWriter",
  "sourceCode" : "@Test\r\nvoid testAppendToWriter() throws Exception {\r\n    final TextStringBuilder sb = new TextStringBuilder(\"1234567890\");\r\n    final StringWriter writer = new StringWriter();\r\n    writer.append(\"Test \");\r\n    sb.appendTo(writer);\r\n    assertEquals(\"Test 1234567890\", writer.toString());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\TextStringBuilderTest.java",
  "methodName" : "testAsBuilder",
  "sourceCode" : "@Test\r\nvoid testAsBuilder() {\r\n    final TextStringBuilder sb = new TextStringBuilder().appendAll(\"Lorem\", \" \", \"ipsum\", \" \", \"dolor\");\r\n    assertEquals(sb.toString(), sb.build());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\TextStringBuilderTest.java",
  "methodName" : "testAsReader",
  "sourceCode" : "@Test\r\nvoid testAsReader() throws Exception {\r\n    final TextStringBuilder sb = new TextStringBuilder(\"some text\");\r\n    try (Reader reader = sb.asReader()) {\r\n        assertTrue(reader.ready());\r\n        final char[] buf = new char[40];\r\n        assertEquals(9, reader.read(buf));\r\n        assertEquals(\"some text\", new String(buf, 0, 9));\r\n        assertEquals(-1, reader.read());\r\n        assertFalse(reader.ready());\r\n        assertEquals(0, reader.skip(2));\r\n        assertEquals(0, reader.skip(-1));\r\n        assertTrue(reader.markSupported());\r\n    }\r\n    try (Reader reader = sb.asReader()) {\r\n        assertEquals('s', reader.read());\r\n        reader.mark(-1);\r\n        final char[] array = new char[3];\r\n        assertEquals(3, reader.read(array, 0, 3));\r\n        assertEquals('o', array[0]);\r\n        assertEquals('m', array[1]);\r\n        assertEquals('e', array[2]);\r\n        reader.reset();\r\n        assertEquals(1, reader.read(array, 1, 1));\r\n        assertEquals('o', array[0]);\r\n        assertEquals('o', array[1]);\r\n        assertEquals('e', array[2]);\r\n        assertEquals(2, reader.skip(2));\r\n        assertEquals(' ', reader.read());\r\n        assertTrue(reader.ready());\r\n        reader.close();\r\n        assertTrue(reader.ready());\r\n    }\r\n    try (Reader reader = sb.asReader()) {\r\n        final char[] array = new char[3];\r\n        assertThrows(IndexOutOfBoundsException.class, () -> reader.read(array, -1, 0));\r\n        assertThrows(IndexOutOfBoundsException.class, () -> reader.read(array, 0, -1));\r\n        assertThrows(IndexOutOfBoundsException.class, () -> reader.read(array, 100, 1));\r\n        assertThrows(IndexOutOfBoundsException.class, () -> reader.read(array, 0, 100));\r\n        assertThrows(IndexOutOfBoundsException.class, () -> reader.read(array, Integer.MAX_VALUE, Integer.MAX_VALUE));\r\n        assertEquals(0, reader.read(array, 0, 0));\r\n        assertEquals(0, array[0]);\r\n        assertEquals(0, array[1]);\r\n        assertEquals(0, array[2]);\r\n        reader.skip(9);\r\n        assertEquals(-1, reader.read(array, 0, 1));\r\n        reader.reset();\r\n        final char[] array2 = new char[30];\r\n        assertEquals(9, reader.read(array2, 0, 30));\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\TextStringBuilderTest.java",
  "methodName" : "testAsSupplier",
  "sourceCode" : "@Test\r\nvoid testAsSupplier() {\r\n    final TextStringBuilder sb = new TextStringBuilder().appendAll(\"Lorem\", \" \", \"ipsum\", \" \", \"dolor\");\r\n    assertEquals(sb.toString(), sb.get());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\TextStringBuilderTest.java",
  "methodName" : "testAsTokenizer",
  "sourceCode" : "@Test\r\nvoid testAsTokenizer() throws Exception {\r\n    // from Javadoc\r\n    final TextStringBuilder b = new TextStringBuilder();\r\n    b.append(\"a b \");\r\n    final StringTokenizer t = b.asTokenizer();\r\n    final String[] tokens1 = t.getTokenArray();\r\n    assertEquals(2, tokens1.length);\r\n    assertEquals(\"a\", tokens1[0]);\r\n    assertEquals(\"b\", tokens1[1]);\r\n    assertEquals(2, t.size());\r\n    b.append(\"c d \");\r\n    final String[] tokens2 = t.getTokenArray();\r\n    assertEquals(2, tokens2.length);\r\n    assertEquals(\"a\", tokens2[0]);\r\n    assertEquals(\"b\", tokens2[1]);\r\n    assertEquals(2, t.size());\r\n    assertEquals(\"a\", t.next());\r\n    assertEquals(\"b\", t.next());\r\n    t.reset();\r\n    final String[] tokens3 = t.getTokenArray();\r\n    assertEquals(4, tokens3.length);\r\n    assertEquals(\"a\", tokens3[0]);\r\n    assertEquals(\"b\", tokens3[1]);\r\n    assertEquals(\"c\", tokens3[2]);\r\n    assertEquals(\"d\", tokens3[3]);\r\n    assertEquals(4, t.size());\r\n    assertEquals(\"a\", t.next());\r\n    assertEquals(\"b\", t.next());\r\n    assertEquals(\"c\", t.next());\r\n    assertEquals(\"d\", t.next());\r\n    assertEquals(\"a b c d \", t.getContent());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\TextStringBuilderTest.java",
  "methodName" : "testAsWriter",
  "sourceCode" : "@Test\r\nvoid testAsWriter() throws Exception {\r\n    final TextStringBuilder sb = new TextStringBuilder(\"base\");\r\n    try (Writer writer = sb.asWriter()) {\r\n        writer.write('l');\r\n        assertEquals(\"basel\", sb.toString());\r\n        writer.write(new char[] { 'i', 'n' });\r\n        assertEquals(\"baselin\", sb.toString());\r\n        writer.write(new char[] { 'n', 'e', 'r' }, 1, 2);\r\n        assertEquals(\"baseliner\", sb.toString());\r\n        writer.write(\" rout\");\r\n        assertEquals(\"baseliner rout\", sb.toString());\r\n        writer.write(\"ping that server\", 1, 3);\r\n        assertEquals(\"baseliner routing\", sb.toString());\r\n        // no effect\r\n        writer.flush();\r\n        assertEquals(\"baseliner routing\", sb.toString());\r\n        // no effect\r\n        writer.close();\r\n        assertEquals(\"baseliner routing\", sb.toString());\r\n        // works after close\r\n        writer.write(\" hi\");\r\n        assertEquals(\"baseliner routing hi\", sb.toString());\r\n        // mix and match\r\n        sb.setLength(4);\r\n        writer.write('d');\r\n        assertEquals(\"based\", sb.toString());\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\TextStringBuilderTest.java",
  "methodName" : "testCapacity",
  "sourceCode" : "@Test\r\nvoid testCapacity() {\r\n    final TextStringBuilder sb = new TextStringBuilder();\r\n    assertEquals(sb.getBuffer().length, sb.capacity());\r\n    sb.append(\"HelloWorldHelloWorldHelloWorldHelloWorld\");\r\n    assertEquals(sb.getBuffer().length, sb.capacity());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\TextStringBuilderTest.java",
  "methodName" : "testCapacityAndLength",
  "sourceCode" : "@Test\r\nvoid testCapacityAndLength() {\r\n    final TextStringBuilder sb = new TextStringBuilder();\r\n    assertEquals(32, sb.capacity());\r\n    assertEquals(0, sb.length());\r\n    assertEquals(0, sb.size());\r\n    assertTrue(sb.isEmpty());\r\n    sb.minimizeCapacity();\r\n    assertEquals(0, sb.capacity());\r\n    assertEquals(0, sb.length());\r\n    assertEquals(0, sb.size());\r\n    assertTrue(sb.isEmpty());\r\n    sb.ensureCapacity(32);\r\n    assertTrue(sb.capacity() >= 32);\r\n    assertEquals(0, sb.length());\r\n    assertEquals(0, sb.size());\r\n    assertTrue(sb.isEmpty());\r\n    sb.append(\"foo\");\r\n    assertTrue(sb.capacity() >= 32);\r\n    assertEquals(3, sb.length());\r\n    assertEquals(3, sb.size());\r\n    assertFalse(sb.isEmpty());\r\n    sb.clear();\r\n    assertTrue(sb.capacity() >= 32);\r\n    assertEquals(0, sb.length());\r\n    assertEquals(0, sb.size());\r\n    assertTrue(sb.isEmpty());\r\n    sb.append(\"123456789012345678901234567890123\");\r\n    assertTrue(sb.capacity() > 32);\r\n    assertEquals(33, sb.length());\r\n    assertEquals(33, sb.size());\r\n    assertFalse(sb.isEmpty());\r\n    sb.ensureCapacity(16);\r\n    assertTrue(sb.capacity() > 16);\r\n    assertEquals(33, sb.length());\r\n    assertEquals(33, sb.size());\r\n    assertFalse(sb.isEmpty());\r\n    sb.minimizeCapacity();\r\n    assertEquals(33, sb.capacity());\r\n    assertEquals(33, sb.length());\r\n    assertEquals(33, sb.size());\r\n    assertFalse(sb.isEmpty());\r\n    assertThrows(IndexOutOfBoundsException.class, () -> sb.setLength(-1));\r\n    sb.setLength(33);\r\n    assertEquals(33, sb.capacity());\r\n    assertEquals(33, sb.length());\r\n    assertEquals(33, sb.size());\r\n    assertFalse(sb.isEmpty());\r\n    sb.setLength(16);\r\n    assertTrue(sb.capacity() >= 16);\r\n    assertEquals(16, sb.length());\r\n    assertEquals(16, sb.size());\r\n    assertEquals(\"1234567890123456\", sb.toString());\r\n    assertFalse(sb.isEmpty());\r\n    sb.setLength(32);\r\n    assertTrue(sb.capacity() >= 32);\r\n    assertEquals(32, sb.length());\r\n    assertEquals(32, sb.size());\r\n    assertEquals(\"1234567890123456\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\", sb.toString());\r\n    assertFalse(sb.isEmpty());\r\n    sb.setLength(0);\r\n    assertTrue(sb.capacity() >= 32);\r\n    assertEquals(0, sb.length());\r\n    assertEquals(0, sb.size());\r\n    assertTrue(sb.isEmpty());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\TextStringBuilderTest.java",
  "methodName" : "testChaining",
  "sourceCode" : "@Test\r\nvoid testChaining() {\r\n    final TextStringBuilder sb = new TextStringBuilder();\r\n    assertSame(sb, sb.setNewLineText(null));\r\n    assertSame(sb, sb.setNullText(null));\r\n    assertSame(sb, sb.setLength(1));\r\n    assertSame(sb, sb.setCharAt(0, 'a'));\r\n    assertSame(sb, sb.ensureCapacity(0));\r\n    assertSame(sb, sb.minimizeCapacity());\r\n    assertSame(sb, sb.clear());\r\n    assertSame(sb, sb.reverse());\r\n    assertSame(sb, sb.trim());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\TextStringBuilderTest.java",
  "methodName" : "testCharAt",
  "sourceCode" : "@Test\r\nvoid testCharAt() {\r\n    final TextStringBuilder sb = new TextStringBuilder();\r\n    assertThrows(IndexOutOfBoundsException.class, () -> sb.charAt(0));\r\n    assertThrows(IndexOutOfBoundsException.class, () -> sb.charAt(-1));\r\n    sb.append(\"foo\");\r\n    assertEquals('f', sb.charAt(0));\r\n    assertEquals('o', sb.charAt(1));\r\n    assertEquals('o', sb.charAt(2));\r\n    assertThrows(IndexOutOfBoundsException.class, () -> sb.charAt(-1));\r\n    assertThrows(IndexOutOfBoundsException.class, () -> sb.charAt(3));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\TextStringBuilderTest.java",
  "methodName" : "testClear",
  "sourceCode" : "@Test\r\nvoid testClear() {\r\n    final TextStringBuilder sb = new TextStringBuilder();\r\n    sb.append(\"Hello\");\r\n    sb.clear();\r\n    assertEquals(0, sb.length());\r\n    assertTrue(sb.getBuffer().length >= 5);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\TextStringBuilderTest.java",
  "methodName" : "testConstructorCharSequence",
  "sourceCode" : "@Test\r\nvoid testConstructorCharSequence() {\r\n    final CharBuffer str = CharBuffer.wrap(\"A\");\r\n    final int length = str.length();\r\n    final TextStringBuilder sb = new TextStringBuilder(str);\r\n    assertEquals(TextStringBuilder.CAPACITY + length, sb.capacity());\r\n    assertEquals(length, sb.toCharArray().length);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\TextStringBuilderTest.java",
  "methodName" : "testConstructorDefault",
  "sourceCode" : "@Test\r\nvoid testConstructorDefault() {\r\n    final TextStringBuilder sb = new TextStringBuilder();\r\n    assertEquals(TextStringBuilder.CAPACITY, sb.capacity());\r\n    assertEquals(0, sb.toCharArray().length);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\TextStringBuilderTest.java",
  "methodName" : "testConstructors",
  "sourceCode" : "@Test\r\nvoid testConstructors() {\r\n    final TextStringBuilder sb0 = new TextStringBuilder();\r\n    assertEquals(32, sb0.capacity());\r\n    assertEquals(0, sb0.length());\r\n    assertEquals(0, sb0.size());\r\n    final TextStringBuilder sb1 = new TextStringBuilder(32);\r\n    assertEquals(32, sb1.capacity());\r\n    assertEquals(0, sb1.length());\r\n    assertEquals(0, sb1.size());\r\n    final TextStringBuilder sb2 = new TextStringBuilder(0);\r\n    assertEquals(32, sb2.capacity());\r\n    assertEquals(0, sb2.length());\r\n    assertEquals(0, sb2.size());\r\n    final TextStringBuilder sb3 = new TextStringBuilder(-1);\r\n    assertEquals(32, sb3.capacity());\r\n    assertEquals(0, sb3.length());\r\n    assertEquals(0, sb3.size());\r\n    final TextStringBuilder sb4 = new TextStringBuilder(1);\r\n    assertEquals(1, sb4.capacity());\r\n    assertEquals(0, sb4.length());\r\n    assertEquals(0, sb4.size());\r\n    final TextStringBuilder sb5 = new TextStringBuilder((String) null);\r\n    assertEquals(32, sb5.capacity());\r\n    assertEquals(0, sb5.length());\r\n    assertEquals(0, sb5.size());\r\n    final TextStringBuilder sb6 = new TextStringBuilder(\"\");\r\n    assertEquals(32, sb6.capacity());\r\n    assertEquals(0, sb6.length());\r\n    assertEquals(0, sb6.size());\r\n    final TextStringBuilder sb7 = new TextStringBuilder(\"foo\");\r\n    assertEquals(35, sb7.capacity());\r\n    assertEquals(3, sb7.length());\r\n    assertEquals(3, sb7.size());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\TextStringBuilderTest.java",
  "methodName" : "testConstructorString",
  "sourceCode" : "@Test\r\nvoid testConstructorString() {\r\n    final String str = \"A\";\r\n    final int length = str.length();\r\n    final TextStringBuilder sb = new TextStringBuilder(str);\r\n    assertEquals(TextStringBuilder.CAPACITY + length, sb.capacity());\r\n    assertEquals(length, sb.toCharArray().length);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\TextStringBuilderTest.java",
  "methodName" : "testContains_char",
  "sourceCode" : "@Test\r\nvoid testContains_char() {\r\n    final TextStringBuilder sb = new TextStringBuilder(\"abcdefghijklmnopqrstuvwxyz\");\r\n    assertTrue(sb.contains('a'));\r\n    assertTrue(sb.contains('o'));\r\n    assertTrue(sb.contains('z'));\r\n    assertFalse(sb.contains('1'));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\TextStringBuilderTest.java",
  "methodName" : "testContains_String",
  "sourceCode" : "@Test\r\nvoid testContains_String() {\r\n    final TextStringBuilder sb = new TextStringBuilder(\"abcdefghijklmnopqrstuvwxyz\");\r\n    assertTrue(sb.contains(\"a\"));\r\n    assertTrue(sb.contains(\"pq\"));\r\n    assertTrue(sb.contains(\"z\"));\r\n    assertFalse(sb.contains(\"zyx\"));\r\n    assertFalse(sb.contains((String) null));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\TextStringBuilderTest.java",
  "methodName" : "testContains_StringMatcher",
  "sourceCode" : "@Test\r\nvoid testContains_StringMatcher() {\r\n    TextStringBuilder sb = new TextStringBuilder(\"abcdefghijklmnopqrstuvwxyz\");\r\n    assertTrue(sb.contains(StringMatcherFactory.INSTANCE.charMatcher('a')));\r\n    assertTrue(sb.contains(StringMatcherFactory.INSTANCE.stringMatcher(\"pq\")));\r\n    assertTrue(sb.contains(StringMatcherFactory.INSTANCE.charMatcher('z')));\r\n    assertFalse(sb.contains(StringMatcherFactory.INSTANCE.stringMatcher(\"zy\")));\r\n    assertFalse(sb.contains((StringMatcher) null));\r\n    sb = new TextStringBuilder();\r\n    assertFalse(sb.contains(A_NUMBER_MATCHER));\r\n    sb.append(\"B A1 C\");\r\n    assertTrue(sb.contains(A_NUMBER_MATCHER));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\TextStringBuilderTest.java",
  "methodName" : "testDeleteAll_char",
  "sourceCode" : "@Test\r\nvoid testDeleteAll_char() {\r\n    TextStringBuilder sb = new TextStringBuilder(\"abcbccba\");\r\n    sb.deleteAll('X');\r\n    assertEquals(\"abcbccba\", sb.toString());\r\n    sb.deleteAll('a');\r\n    assertEquals(\"bcbccb\", sb.toString());\r\n    sb.deleteAll('c');\r\n    assertEquals(\"bbb\", sb.toString());\r\n    sb.deleteAll('b');\r\n    assertEquals(\"\", sb.toString());\r\n    sb = new TextStringBuilder(\"\");\r\n    sb.deleteAll('b');\r\n    assertEquals(\"\", sb.toString());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\TextStringBuilderTest.java",
  "methodName" : "testDeleteAll_String",
  "sourceCode" : "@Test\r\nvoid testDeleteAll_String() {\r\n    TextStringBuilder sb = new TextStringBuilder(\"abcbccba\");\r\n    sb.deleteAll((String) null);\r\n    assertEquals(\"abcbccba\", sb.toString());\r\n    sb.deleteAll(\"\");\r\n    assertEquals(\"abcbccba\", sb.toString());\r\n    sb.deleteAll(\"X\");\r\n    assertEquals(\"abcbccba\", sb.toString());\r\n    sb.deleteAll(\"a\");\r\n    assertEquals(\"bcbccb\", sb.toString());\r\n    sb.deleteAll(\"c\");\r\n    assertEquals(\"bbb\", sb.toString());\r\n    sb.deleteAll(\"b\");\r\n    assertEquals(\"\", sb.toString());\r\n    sb = new TextStringBuilder(\"abcbccba\");\r\n    sb.deleteAll(\"bc\");\r\n    assertEquals(\"acba\", sb.toString());\r\n    sb = new TextStringBuilder(\"\");\r\n    sb.deleteAll(\"bc\");\r\n    assertEquals(\"\", sb.toString());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\TextStringBuilderTest.java",
  "methodName" : "testDeleteAll_StringMatcher",
  "sourceCode" : "@Test\r\nvoid testDeleteAll_StringMatcher() {\r\n    TextStringBuilder sb = new TextStringBuilder(\"A0xA1A2yA3\");\r\n    sb.deleteAll((StringMatcher) null);\r\n    assertEquals(\"A0xA1A2yA3\", sb.toString());\r\n    sb.deleteAll(A_NUMBER_MATCHER);\r\n    assertEquals(\"xy\", sb.toString());\r\n    sb = new TextStringBuilder(\"Ax1\");\r\n    sb.deleteAll(A_NUMBER_MATCHER);\r\n    assertEquals(\"Ax1\", sb.toString());\r\n    sb = new TextStringBuilder(\"\");\r\n    sb.deleteAll(A_NUMBER_MATCHER);\r\n    assertEquals(\"\", sb.toString());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\TextStringBuilderTest.java",
  "methodName" : "testDeleteCharAt",
  "sourceCode" : "@Test\r\nvoid testDeleteCharAt() {\r\n    final String str = \"abc\";\r\n    //\r\n    final TextStringBuilder sb1 = new TextStringBuilder(str);\r\n    sb1.deleteCharAt(0);\r\n    assertEquals(\"bc\", sb1.toString());\r\n    //\r\n    final TextStringBuilder sb2 = new TextStringBuilder(str);\r\n    sb2.deleteCharAt(str.length() - 1);\r\n    assertEquals(\"ab\", sb2.toString());\r\n    //\r\n    final TextStringBuilder sb3 = new TextStringBuilder(str);\r\n    assertThrows(IndexOutOfBoundsException.class, () -> sb3.deleteCharAt(str.length()));\r\n    assertThrows(IndexOutOfBoundsException.class, () -> sb3.deleteCharAt(1000));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\TextStringBuilderTest.java",
  "methodName" : "testDeleteCharAtWithNegative",
  "sourceCode" : "@Test\r\nvoid testDeleteCharAtWithNegative() {\r\n    assertThrows(StringIndexOutOfBoundsException.class, () -> new TextStringBuilder().deleteCharAt(-1258));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\TextStringBuilderTest.java",
  "methodName" : "testDeleteFirst_char",
  "sourceCode" : "@Test\r\nvoid testDeleteFirst_char() {\r\n    TextStringBuilder sb = new TextStringBuilder(\"abcba\");\r\n    sb.deleteFirst('X');\r\n    assertEquals(\"abcba\", sb.toString());\r\n    sb.deleteFirst('a');\r\n    assertEquals(\"bcba\", sb.toString());\r\n    sb.deleteFirst('c');\r\n    assertEquals(\"bba\", sb.toString());\r\n    sb.deleteFirst('b');\r\n    assertEquals(\"ba\", sb.toString());\r\n    sb = new TextStringBuilder(\"\");\r\n    sb.deleteFirst('b');\r\n    assertEquals(\"\", sb.toString());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\TextStringBuilderTest.java",
  "methodName" : "testDeleteFirst_String",
  "sourceCode" : "@Test\r\nvoid testDeleteFirst_String() {\r\n    TextStringBuilder sb = new TextStringBuilder(\"abcbccba\");\r\n    sb.deleteFirst((String) null);\r\n    assertEquals(\"abcbccba\", sb.toString());\r\n    sb.deleteFirst(\"\");\r\n    assertEquals(\"abcbccba\", sb.toString());\r\n    sb.deleteFirst(\"X\");\r\n    assertEquals(\"abcbccba\", sb.toString());\r\n    sb.deleteFirst(\"a\");\r\n    assertEquals(\"bcbccba\", sb.toString());\r\n    sb.deleteFirst(\"c\");\r\n    assertEquals(\"bbccba\", sb.toString());\r\n    sb.deleteFirst(\"b\");\r\n    assertEquals(\"bccba\", sb.toString());\r\n    sb = new TextStringBuilder(\"abcbccba\");\r\n    sb.deleteFirst(\"bc\");\r\n    assertEquals(\"abccba\", sb.toString());\r\n    sb = new TextStringBuilder(\"\");\r\n    sb.deleteFirst(\"bc\");\r\n    assertEquals(\"\", sb.toString());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\TextStringBuilderTest.java",
  "methodName" : "testDeleteFirst_StringMatcher",
  "sourceCode" : "@Test\r\nvoid testDeleteFirst_StringMatcher() {\r\n    TextStringBuilder sb = new TextStringBuilder(\"A0xA1A2yA3\");\r\n    sb.deleteFirst((StringMatcher) null);\r\n    assertEquals(\"A0xA1A2yA3\", sb.toString());\r\n    sb.deleteFirst(A_NUMBER_MATCHER);\r\n    assertEquals(\"xA1A2yA3\", sb.toString());\r\n    sb = new TextStringBuilder(\"Ax1\");\r\n    sb.deleteFirst(A_NUMBER_MATCHER);\r\n    assertEquals(\"Ax1\", sb.toString());\r\n    sb = new TextStringBuilder(\"\");\r\n    sb.deleteFirst(A_NUMBER_MATCHER);\r\n    assertEquals(\"\", sb.toString());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\TextStringBuilderTest.java",
  "methodName" : "testDeleteIntInt",
  "sourceCode" : "@Test\r\nvoid testDeleteIntInt() {\r\n    final TextStringBuilder sb = new TextStringBuilder(\"abc\");\r\n    sb.delete(0, 1);\r\n    assertEquals(\"bc\", sb.toString());\r\n    sb.delete(1, 2);\r\n    assertEquals(\"b\", sb.toString());\r\n    sb.delete(0, 1);\r\n    assertEquals(\"\", sb.toString());\r\n    sb.delete(0, 1000);\r\n    assertEquals(\"\", sb.toString());\r\n    assertThrows(IndexOutOfBoundsException.class, () -> sb.delete(1, 2));\r\n    assertThrows(IndexOutOfBoundsException.class, () -> sb.delete(-1, 1));\r\n    assertThrows(IndexOutOfBoundsException.class, () -> new TextStringBuilder(\"anything\").delete(2, 1));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\TextStringBuilderTest.java",
  "methodName" : "testDrainChar",
  "sourceCode" : "@Test\r\nvoid testDrainChar() {\r\n    final String str = \"abc\";\r\n    //\r\n    final TextStringBuilder sb1 = new TextStringBuilder(str);\r\n    assertEquals('a', sb1.drainChar(0));\r\n    assertEquals(\"bc\", sb1.toString());\r\n    //\r\n    final TextStringBuilder sb2 = new TextStringBuilder(str);\r\n    assertEquals('c', sb2.drainChar(str.length() - 1));\r\n    assertEquals(\"ab\", sb2.toString());\r\n    //\r\n    final TextStringBuilder sb3 = new TextStringBuilder(str);\r\n    assertThrows(IndexOutOfBoundsException.class, () -> sb3.drainChar(str.length()));\r\n    assertThrows(IndexOutOfBoundsException.class, () -> sb3.drainChar(1000));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\TextStringBuilderTest.java",
  "methodName" : "testDrainCharsIntIntCharArrayInt",
  "sourceCode" : "@Test\r\nvoid testDrainCharsIntIntCharArrayInt() {\r\n    final String data = \"junit\";\r\n    final char[] array = new char[data.length()];\r\n    final TextStringBuilder sb = new TextStringBuilder();\r\n    // empty buffer\r\n    assertEquals(0, sb.drainChars(0, 5, array, 1));\r\n    assertEquals(0, sb.drainChars(0, 5, ArrayUtils.EMPTY_CHAR_ARRAY, 1));\r\n    // empty buffer, 0 length request\r\n    assertEquals(0, sb.drainChars(5, 5, array, 1));\r\n    sb.append(data);\r\n    assertEquals(0, sb.drainChars(5, 5, array, 1));\r\n    assertEquals(5, sb.drainChars(0, 5, array, 0));\r\n    assertArrayEquals(data.toCharArray(), array);\r\n    final char[] b = new char[5];\r\n    sb.set(data);\r\n    assertEquals(2, sb.drainChars(0, 2, b, 3));\r\n    assertArrayEquals(new char[] { 0, 0, 0, 'j', 'u' }, b);\r\n    assertThrows(IndexOutOfBoundsException.class, () -> sb.drainChars(-1, 0, b, 0));\r\n    assertThrows(IndexOutOfBoundsException.class, () -> sb.drainChars(0, -1, array, 0));\r\n    assertThrows(IndexOutOfBoundsException.class, () -> sb.drainChars(4, 2, array, 0));\r\n    // get and delete it all.\r\n    sb.set(data);\r\n    assertEquals(data.length(), sb.drainChars(0, sb.length() + 1, array, 0));\r\n    assertArrayEquals(data.toCharArray(), array);\r\n    // get and delete more than there is\r\n    sb.set(data);\r\n    assertEquals(data.length(), sb.drainChars(0, sb.length() + 10, array, 0));\r\n    assertArrayEquals(data.toCharArray(), array);\r\n    // get and delete more than can fit\r\n    sb.set(data);\r\n    int targetIndex = 1;\r\n    Arrays.fill(array, '-');\r\n    assertEquals(data.length() - targetIndex, sb.drainChars(0, sb.length() + 10, array, targetIndex));\r\n    assertArrayEquals(\"-juni\".toCharArray(), array);\r\n    // get and delete more than can fit\r\n    sb.set(data);\r\n    Arrays.fill(array, '-');\r\n    assertEquals(data.length() - targetIndex, sb.drainChars(0, sb.length() + 1, array, targetIndex));\r\n    assertArrayEquals(\"-juni\".toCharArray(), array);\r\n    // get and delete more than can fit\r\n    sb.set(data);\r\n    targetIndex = 2;\r\n    Arrays.fill(array, '-');\r\n    assertEquals(data.length() - targetIndex, sb.drainChars(0, sb.length() + 1, array, targetIndex));\r\n    assertArrayEquals(\"--jun\".toCharArray(), array);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\TextStringBuilderTest.java",
  "methodName" : "testEndsWith",
  "sourceCode" : "@Test\r\nvoid testEndsWith() {\r\n    final TextStringBuilder sb = new TextStringBuilder();\r\n    assertFalse(sb.endsWith(\"a\"));\r\n    assertFalse(sb.endsWith(\"c\"));\r\n    assertTrue(sb.endsWith(\"\"));\r\n    assertFalse(sb.endsWith(null));\r\n    sb.append(\"abc\");\r\n    assertTrue(sb.endsWith(\"c\"));\r\n    assertTrue(sb.endsWith(\"bc\"));\r\n    assertTrue(sb.endsWith(\"abc\"));\r\n    assertFalse(sb.endsWith(\"cba\"));\r\n    assertFalse(sb.endsWith(\"abcd\"));\r\n    assertFalse(sb.endsWith(\" abc\"));\r\n    assertFalse(sb.endsWith(\"abc \"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\TextStringBuilderTest.java",
  "methodName" : "testEnsureCapacity",
  "sourceCode" : "@Test\r\nvoid testEnsureCapacity() {\r\n    final TextStringBuilder sb = new TextStringBuilder();\r\n    sb.ensureCapacity(2);\r\n    assertTrue(sb.capacity() >= 2);\r\n    sb.ensureCapacity(-1);\r\n    assertTrue(sb.capacity() >= 0);\r\n    sb.append(\"HelloWorld\");\r\n    sb.ensureCapacity(40);\r\n    assertTrue(sb.capacity() >= 40);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\TextStringBuilderTest.java",
  "methodName" : "testEnsureCapacityOutOfMemoryError",
  "sourceCode" : "@Test\r\nvoid testEnsureCapacityOutOfMemoryError() {\r\n    final TextStringBuilder sb = new TextStringBuilder();\r\n    // Should not be a NegativeArraySizeException\r\n    sb.ensureCapacity(Integer.MIN_VALUE);\r\n    sb.ensureCapacity(-1);\r\n    sb.ensureCapacity(0);\r\n    // Might fail in a CI:\r\n    // sb.ensureCapacity(Integer.MAX_VALUE / 2);\r\n    sb.ensureCapacity(10_000);\r\n    assertThrows(OutOfMemoryError.class, () -> sb.ensureCapacity(Integer.MAX_VALUE));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\TextStringBuilderTest.java",
  "methodName" : "testEquals",
  "sourceCode" : "@Test\r\nvoid testEquals() {\r\n    final TextStringBuilder sb1 = new TextStringBuilder(50);\r\n    final TextStringBuilder sb2 = new TextStringBuilder(100);\r\n    assertTrue(sb1.equals(sb2));\r\n    assertTrue(sb1.equals(sb1));\r\n    assertTrue(sb2.equals(sb2));\r\n    assertEquals(sb1, sb2);\r\n    sb1.append(\"abc\");\r\n    assertFalse(sb1.equals(sb2));\r\n    assertNotEquals(sb1, sb2);\r\n    sb2.append(\"ABC\");\r\n    assertFalse(sb1.equals(sb2));\r\n    assertNotEquals(sb1, sb2);\r\n    sb2.set(\"abc\");\r\n    assertTrue(sb1.equals(sb2));\r\n    assertEquals(sb1, sb2);\r\n    assertNotEquals(sb1, Integer.valueOf(1));\r\n    assertNotEquals(\"abc\", sb1);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\TextStringBuilderTest.java",
  "methodName" : "testEqualsIgnoreCase",
  "sourceCode" : "@Test\r\nvoid testEqualsIgnoreCase() {\r\n    final TextStringBuilder sb1 = new TextStringBuilder();\r\n    final TextStringBuilder sb2 = new TextStringBuilder();\r\n    assertTrue(sb1.equalsIgnoreCase(sb1));\r\n    assertTrue(sb1.equalsIgnoreCase(sb2));\r\n    assertTrue(sb2.equalsIgnoreCase(sb2));\r\n    sb1.append(\"abc\");\r\n    assertFalse(sb1.equalsIgnoreCase(sb2));\r\n    sb2.append(\"ABC\");\r\n    assertTrue(sb1.equalsIgnoreCase(sb2));\r\n    sb2.set(\"abc\");\r\n    assertTrue(sb1.equalsIgnoreCase(sb2));\r\n    assertTrue(sb1.equalsIgnoreCase(sb1));\r\n    assertTrue(sb2.equalsIgnoreCase(sb2));\r\n    sb2.set(\"aBc\");\r\n    assertTrue(sb1.equalsIgnoreCase(sb2));\r\n    final Locale turkish = Locale.forLanguageTag(\"tr\");\r\n    assertTrue(new TextStringBuilder(\"title\").equalsIgnoreCase(new TextStringBuilder(\"title\".toLowerCase(turkish))));\r\n    assertTrue(new TextStringBuilder(\"title\").equalsIgnoreCase(new TextStringBuilder(\"TITLE\".toLowerCase(turkish))));\r\n    assertTrue(new TextStringBuilder(\"TITLE\").equalsIgnoreCase(new TextStringBuilder(\"TITLE\".toLowerCase(turkish))));\r\n    assertTrue(new TextStringBuilder(\"TITLE\").equalsIgnoreCase(new TextStringBuilder(\"title\".toLowerCase(turkish))));\r\n    //\r\n    // assertTrue(new TextStringBuilder(\"title\").equalsIgnoreCase(new\r\n    // TextStringBuilder(\"title\".toUpperCase(turkish))));\r\n    // assertTrue(new TextStringBuilder(\"title\").equalsIgnoreCase(new\r\n    // TextStringBuilder(\"TITLE\".toUpperCase(turkish))));\r\n    assertTrue(new TextStringBuilder(\"TITLE\").equalsIgnoreCase(new TextStringBuilder(\"TITLE\".toUpperCase(turkish))));\r\n    // assertTrue(new TextStringBuilder(\"TITLE\").equalsIgnoreCase(new\r\n    // TextStringBuilder(\"title\".toUpperCase(turkish))));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\TextStringBuilderTest.java",
  "methodName" : "testGetChars",
  "sourceCode" : "@Test\r\nvoid testGetChars() {\r\n    final TextStringBuilder sb = new TextStringBuilder();\r\n    char[] input = new char[10];\r\n    char[] a = sb.getChars(input);\r\n    assertSame(input, a);\r\n    assertArrayEquals(new char[10], a);\r\n    sb.append(\"junit\");\r\n    a = sb.getChars(input);\r\n    assertSame(input, a);\r\n    assertArrayEquals(new char[] { 'j', 'u', 'n', 'i', 't', 0, 0, 0, 0, 0 }, a);\r\n    a = sb.getChars(null);\r\n    assertNotSame(input, a);\r\n    assertEquals(5, a.length);\r\n    assertArrayEquals(\"junit\".toCharArray(), a);\r\n    input = new char[5];\r\n    a = sb.getChars(input);\r\n    assertSame(input, a);\r\n    input = new char[4];\r\n    a = sb.getChars(input);\r\n    assertNotSame(input, a);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\TextStringBuilderTest.java",
  "methodName" : "testGetCharsIntIntCharArrayInt",
  "sourceCode" : "@Test\r\nvoid testGetCharsIntIntCharArrayInt() {\r\n    final TextStringBuilder sb = new TextStringBuilder();\r\n    final char[] array1 = new char[1];\r\n    sb.getChars(0, 0, array1, 0);\r\n    assertArrayEquals(new char[1], array1);\r\n    sb.set(\"junit\");\r\n    sb.getChars(0, 1, array1, 0);\r\n    assertArrayEquals(new char[] { 'j' }, array1);\r\n    final char[] array = new char[5];\r\n    sb.getChars(0, 5, array, 0);\r\n    assertArrayEquals(new char[] { 'j', 'u', 'n', 'i', 't' }, array);\r\n    final char[] b = new char[5];\r\n    sb.getChars(0, 2, b, 3);\r\n    assertArrayEquals(new char[] { 0, 0, 0, 'j', 'u' }, b);\r\n    assertThrows(IndexOutOfBoundsException.class, () -> sb.getChars(-1, 0, b, 0));\r\n    assertThrows(IndexOutOfBoundsException.class, () -> sb.getChars(0, -1, array, 0));\r\n    assertThrows(IndexOutOfBoundsException.class, () -> sb.getChars(0, 20, array, 0));\r\n    assertThrows(IndexOutOfBoundsException.class, () -> sb.getChars(4, 2, array, 0));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\TextStringBuilderTest.java",
  "methodName" : "testGetSetNewLineText",
  "sourceCode" : "@Test\r\nvoid testGetSetNewLineText() {\r\n    final TextStringBuilder sb = new TextStringBuilder();\r\n    assertNull(sb.getNewLineText());\r\n    sb.setNewLineText(\"#\");\r\n    assertEquals(\"#\", sb.getNewLineText());\r\n    sb.setNewLineText(\"\");\r\n    assertEquals(\"\", sb.getNewLineText());\r\n    sb.setNewLineText((String) null);\r\n    assertNull(sb.getNewLineText());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\TextStringBuilderTest.java",
  "methodName" : "testGetSetNullText",
  "sourceCode" : "@Test\r\nvoid testGetSetNullText() {\r\n    final TextStringBuilder sb = new TextStringBuilder();\r\n    assertNull(sb.getNullText());\r\n    sb.setNullText(\"null\");\r\n    assertEquals(\"null\", sb.getNullText());\r\n    sb.setNullText(\"\");\r\n    assertNull(sb.getNullText());\r\n    sb.setNullText(\"NULL\");\r\n    assertEquals(\"NULL\", sb.getNullText());\r\n    sb.setNullText((String) null);\r\n    assertNull(sb.getNullText());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\TextStringBuilderTest.java",
  "methodName" : "testHashCode",
  "sourceCode" : "@Test\r\nvoid testHashCode() {\r\n    final TextStringBuilder sb = new TextStringBuilder();\r\n    final int hc1a = sb.hashCode();\r\n    final int hc1b = sb.hashCode();\r\n    assertEquals(hc1a, hc1b);\r\n    // following TEXT-211 : the hash code of the buffer may not be equals to the hash code of the TextStringBuilder itself\r\n    final int emptyHc = Arrays.hashCode(sb.getBuffer());\r\n    assertNotEquals(emptyHc, hc1a);\r\n    sb.append(\"abc\");\r\n    final int hc2a = sb.hashCode();\r\n    final int hc2b = sb.hashCode();\r\n    assertEquals(hc2a, hc2b);\r\n    final TextStringBuilder sb2 = new TextStringBuilder(100);\r\n    final TextStringBuilder sb3 = new TextStringBuilder(10);\r\n    final int hc2 = sb2.hashCode();\r\n    final int hc3 = sb3.hashCode();\r\n    assertEquals(hc2, hc3);\r\n    sb2.append(\"abc\");\r\n    sb3.append(\"abc\");\r\n    final int hc2b2 = sb2.hashCode();\r\n    final int hc3b2 = sb3.hashCode();\r\n    assertEquals(hc2b2, hc3b2);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\TextStringBuilderTest.java",
  "methodName" : "testIndexOf_char",
  "sourceCode" : "@Test\r\nvoid testIndexOf_char() {\r\n    final TextStringBuilder sb = new TextStringBuilder(\"abab\");\r\n    assertEquals(0, sb.indexOf('a'));\r\n    // should work like String#indexOf\r\n    assertEquals(\"abab\".indexOf('a'), sb.indexOf('a'));\r\n    assertEquals(1, sb.indexOf('b'));\r\n    assertEquals(\"abab\".indexOf('b'), sb.indexOf('b'));\r\n    assertEquals(-1, sb.indexOf('z'));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\TextStringBuilderTest.java",
  "methodName" : "testIndexOf_char_int",
  "sourceCode" : "@Test\r\nvoid testIndexOf_char_int() {\r\n    TextStringBuilder sb = new TextStringBuilder(\"abab\");\r\n    assertEquals(0, sb.indexOf('a', -1));\r\n    assertEquals(0, sb.indexOf('a', 0));\r\n    assertEquals(2, sb.indexOf('a', 1));\r\n    assertEquals(-1, sb.indexOf('a', 4));\r\n    assertEquals(-1, sb.indexOf('a', 5));\r\n    // should work like String#indexOf\r\n    assertEquals(\"abab\".indexOf('a', 1), sb.indexOf('a', 1));\r\n    assertEquals(3, sb.indexOf('b', 2));\r\n    assertEquals(\"abab\".indexOf('b', 2), sb.indexOf('b', 2));\r\n    assertEquals(-1, sb.indexOf('z', 2));\r\n    sb = new TextStringBuilder(\"xyzabc\");\r\n    assertEquals(2, sb.indexOf('z', 0));\r\n    assertEquals(-1, sb.indexOf('z', 3));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\TextStringBuilderTest.java",
  "methodName" : "testIndexOf_String",
  "sourceCode" : "@Test\r\nvoid testIndexOf_String() {\r\n    final TextStringBuilder sb = new TextStringBuilder(\"abab\");\r\n    assertEquals(0, sb.indexOf(\"a\"));\r\n    // should work like String#indexOf\r\n    assertEquals(\"abab\".indexOf(\"a\"), sb.indexOf(\"a\"));\r\n    assertEquals(0, sb.indexOf(\"ab\"));\r\n    // should work like String#indexOf\r\n    assertEquals(\"abab\".indexOf(\"ab\"), sb.indexOf(\"ab\"));\r\n    assertEquals(1, sb.indexOf(\"b\"));\r\n    assertEquals(\"abab\".indexOf(\"b\"), sb.indexOf(\"b\"));\r\n    assertEquals(1, sb.indexOf(\"ba\"));\r\n    assertEquals(\"abab\".indexOf(\"ba\"), sb.indexOf(\"ba\"));\r\n    assertEquals(-1, sb.indexOf(\"z\"));\r\n    assertEquals(-1, sb.indexOf((String) null));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\TextStringBuilderTest.java",
  "methodName" : "testIndexOf_String_int",
  "sourceCode" : "@Test\r\nvoid testIndexOf_String_int() {\r\n    TextStringBuilder sb = new TextStringBuilder(\"abab\");\r\n    assertEquals(0, sb.indexOf(\"a\", -1));\r\n    assertEquals(0, sb.indexOf(\"a\", 0));\r\n    assertEquals(2, sb.indexOf(\"a\", 1));\r\n    assertEquals(2, sb.indexOf(\"a\", 2));\r\n    assertEquals(-1, sb.indexOf(\"a\", 3));\r\n    assertEquals(-1, sb.indexOf(\"a\", 4));\r\n    assertEquals(-1, sb.indexOf(\"a\", 5));\r\n    assertEquals(-1, sb.indexOf(\"abcdef\", 0));\r\n    assertEquals(0, sb.indexOf(\"\", 0));\r\n    assertEquals(1, sb.indexOf(\"\", 1));\r\n    // should work like String#indexOf\r\n    assertEquals(\"abab\".indexOf(\"a\", 1), sb.indexOf(\"a\", 1));\r\n    assertEquals(2, sb.indexOf(\"ab\", 1));\r\n    // should work like String#indexOf\r\n    assertEquals(\"abab\".indexOf(\"ab\", 1), sb.indexOf(\"ab\", 1));\r\n    assertEquals(3, sb.indexOf(\"b\", 2));\r\n    assertEquals(\"abab\".indexOf(\"b\", 2), sb.indexOf(\"b\", 2));\r\n    assertEquals(1, sb.indexOf(\"ba\", 1));\r\n    assertEquals(\"abab\".indexOf(\"ba\", 2), sb.indexOf(\"ba\", 2));\r\n    assertEquals(-1, sb.indexOf(\"z\", 2));\r\n    sb = new TextStringBuilder(\"xyzabc\");\r\n    assertEquals(2, sb.indexOf(\"za\", 0));\r\n    assertEquals(-1, sb.indexOf(\"za\", 3));\r\n    assertEquals(-1, sb.indexOf((String) null, 2));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\TextStringBuilderTest.java",
  "methodName" : "testIndexOf_StringMatcher",
  "sourceCode" : "@Test\r\nvoid testIndexOf_StringMatcher() {\r\n    final TextStringBuilder sb = new TextStringBuilder();\r\n    assertEquals(-1, sb.indexOf((StringMatcher) null));\r\n    assertEquals(-1, sb.indexOf(StringMatcherFactory.INSTANCE.charMatcher('a')));\r\n    sb.append(\"ab bd\");\r\n    assertEquals(0, sb.indexOf(StringMatcherFactory.INSTANCE.charMatcher('a')));\r\n    assertEquals(1, sb.indexOf(StringMatcherFactory.INSTANCE.charMatcher('b')));\r\n    assertEquals(2, sb.indexOf(StringMatcherFactory.INSTANCE.spaceMatcher()));\r\n    assertEquals(4, sb.indexOf(StringMatcherFactory.INSTANCE.charMatcher('d')));\r\n    assertEquals(-1, sb.indexOf(StringMatcherFactory.INSTANCE.noneMatcher()));\r\n    assertEquals(-1, sb.indexOf((StringMatcher) null));\r\n    sb.append(\" A1 junction\");\r\n    assertEquals(6, sb.indexOf(A_NUMBER_MATCHER));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\TextStringBuilderTest.java",
  "methodName" : "testIndexOf_StringMatcher_int",
  "sourceCode" : "@Test\r\nvoid testIndexOf_StringMatcher_int() {\r\n    final TextStringBuilder sb = new TextStringBuilder();\r\n    assertEquals(-1, sb.indexOf((StringMatcher) null, 2));\r\n    assertEquals(-1, sb.indexOf(StringMatcherFactory.INSTANCE.charMatcher('a'), 2));\r\n    assertEquals(-1, sb.indexOf(StringMatcherFactory.INSTANCE.charMatcher('a'), 0));\r\n    sb.append(\"ab bd\");\r\n    assertEquals(0, sb.indexOf(StringMatcherFactory.INSTANCE.charMatcher('a'), -2));\r\n    assertEquals(0, sb.indexOf(StringMatcherFactory.INSTANCE.charMatcher('a'), 0));\r\n    assertEquals(-1, sb.indexOf(StringMatcherFactory.INSTANCE.charMatcher('a'), 2));\r\n    assertEquals(-1, sb.indexOf(StringMatcherFactory.INSTANCE.charMatcher('a'), 20));\r\n    assertEquals(1, sb.indexOf(StringMatcherFactory.INSTANCE.charMatcher('b'), -1));\r\n    assertEquals(1, sb.indexOf(StringMatcherFactory.INSTANCE.charMatcher('b'), 0));\r\n    assertEquals(1, sb.indexOf(StringMatcherFactory.INSTANCE.charMatcher('b'), 1));\r\n    assertEquals(3, sb.indexOf(StringMatcherFactory.INSTANCE.charMatcher('b'), 2));\r\n    assertEquals(3, sb.indexOf(StringMatcherFactory.INSTANCE.charMatcher('b'), 3));\r\n    assertEquals(-1, sb.indexOf(StringMatcherFactory.INSTANCE.charMatcher('b'), 4));\r\n    assertEquals(-1, sb.indexOf(StringMatcherFactory.INSTANCE.charMatcher('b'), 5));\r\n    assertEquals(-1, sb.indexOf(StringMatcherFactory.INSTANCE.charMatcher('b'), 6));\r\n    assertEquals(2, sb.indexOf(StringMatcherFactory.INSTANCE.spaceMatcher(), -2));\r\n    assertEquals(2, sb.indexOf(StringMatcherFactory.INSTANCE.spaceMatcher(), 0));\r\n    assertEquals(2, sb.indexOf(StringMatcherFactory.INSTANCE.spaceMatcher(), 2));\r\n    assertEquals(-1, sb.indexOf(StringMatcherFactory.INSTANCE.spaceMatcher(), 4));\r\n    assertEquals(-1, sb.indexOf(StringMatcherFactory.INSTANCE.spaceMatcher(), 20));\r\n    assertEquals(-1, sb.indexOf(StringMatcherFactory.INSTANCE.noneMatcher(), 0));\r\n    assertEquals(-1, sb.indexOf((StringMatcher) null, 0));\r\n    sb.append(\" A1 junction with A2\");\r\n    assertEquals(6, sb.indexOf(A_NUMBER_MATCHER, 5));\r\n    assertEquals(6, sb.indexOf(A_NUMBER_MATCHER, 6));\r\n    assertEquals(23, sb.indexOf(A_NUMBER_MATCHER, 7));\r\n    assertEquals(23, sb.indexOf(A_NUMBER_MATCHER, 22));\r\n    assertEquals(23, sb.indexOf(A_NUMBER_MATCHER, 23));\r\n    assertEquals(-1, sb.indexOf(A_NUMBER_MATCHER, 24));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\TextStringBuilderTest.java",
  "methodName" : "testIndexOfLang294",
  "sourceCode" : "@Test\r\nvoid testIndexOfLang294() {\r\n    final TextStringBuilder sb = new TextStringBuilder(\"onetwothree\");\r\n    sb.deleteFirst(\"three\");\r\n    assertEquals(-1, sb.indexOf(\"three\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\TextStringBuilderTest.java",
  "methodName" : "testIsEmpty",
  "sourceCode" : "@Test\r\nvoid testIsEmpty() {\r\n    final TextStringBuilder sb = new TextStringBuilder();\r\n    assertTrue(sb.isEmpty());\r\n    sb.append(\"Hello\");\r\n    assertFalse(sb.isEmpty());\r\n    sb.clear();\r\n    assertTrue(sb.isEmpty());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\TextStringBuilderTest.java",
  "methodName" : "testIsNotEmpty",
  "sourceCode" : "@Test\r\nvoid testIsNotEmpty() {\r\n    final TextStringBuilder sb = new TextStringBuilder();\r\n    assertFalse(sb.isNotEmpty());\r\n    sb.append(\"Hello\");\r\n    assertTrue(sb.isNotEmpty());\r\n    sb.clear();\r\n    assertFalse(sb.isNotEmpty());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\TextStringBuilderTest.java",
  "methodName" : "testLang294",
  "sourceCode" : "@Test\r\nvoid testLang294() {\r\n    final TextStringBuilder sb = new TextStringBuilder(\"\\n%BLAH%\\nDo more stuff\\neven more stuff\\n%BLAH%\\n\");\r\n    sb.deleteAll(\"\\n%BLAH%\");\r\n    assertEquals(\"\\nDo more stuff\\neven more stuff\\n\", sb.toString());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\TextStringBuilderTest.java",
  "methodName" : "testLang295",
  "sourceCode" : "@Test\r\nvoid testLang295() {\r\n    final TextStringBuilder sb = new TextStringBuilder(\"onetwothree\");\r\n    sb.deleteFirst(\"three\");\r\n    assertFalse(sb.contains('h'), \"The contains(char) method is looking beyond the end of the string\");\r\n    assertEquals(-1, sb.indexOf('h'), \"The indexOf(char) method is looking beyond the end of the string\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\TextStringBuilderTest.java",
  "methodName" : "testLang412Left",
  "sourceCode" : "@Test\r\nvoid testLang412Left() {\r\n    final TextStringBuilder sb = new TextStringBuilder();\r\n    sb.appendFixedWidthPadLeft(null, 10, '*');\r\n    assertEquals(\"**********\", sb.toString(), \"Failed to invoke appendFixedWidthPadLeft correctly\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\TextStringBuilderTest.java",
  "methodName" : "testLang412Right",
  "sourceCode" : "@Test\r\nvoid testLang412Right() {\r\n    final TextStringBuilder sb = new TextStringBuilder();\r\n    sb.appendFixedWidthPadRight(null, 10, '*');\r\n    assertEquals(\"**********\", sb.toString(), \"Failed to invoke appendFixedWidthPadRight correctly\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\TextStringBuilderTest.java",
  "methodName" : "testLastIndexOf_char",
  "sourceCode" : "@Test\r\nvoid testLastIndexOf_char() {\r\n    final TextStringBuilder sb = new TextStringBuilder(\"abab\");\r\n    assertEquals(2, sb.lastIndexOf('a'));\r\n    // should work like String#lastIndexOf\r\n    assertEquals(\"abab\".lastIndexOf('a'), sb.lastIndexOf('a'));\r\n    assertEquals(3, sb.lastIndexOf('b'));\r\n    assertEquals(\"abab\".lastIndexOf('b'), sb.lastIndexOf('b'));\r\n    assertEquals(-1, sb.lastIndexOf('z'));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\TextStringBuilderTest.java",
  "methodName" : "testLastIndexOf_char_int",
  "sourceCode" : "@Test\r\nvoid testLastIndexOf_char_int() {\r\n    TextStringBuilder sb = new TextStringBuilder(\"abab\");\r\n    assertEquals(-1, sb.lastIndexOf('a', -1));\r\n    assertEquals(0, sb.lastIndexOf('a', 0));\r\n    assertEquals(0, sb.lastIndexOf('a', 1));\r\n    // should work like String#lastIndexOf\r\n    assertEquals(\"abab\".lastIndexOf('a', 1), sb.lastIndexOf('a', 1));\r\n    assertEquals(1, sb.lastIndexOf('b', 2));\r\n    assertEquals(\"abab\".lastIndexOf('b', 2), sb.lastIndexOf('b', 2));\r\n    assertEquals(-1, sb.lastIndexOf('z', 2));\r\n    sb = new TextStringBuilder(\"xyzabc\");\r\n    assertEquals(2, sb.lastIndexOf('z', sb.length()));\r\n    assertEquals(-1, sb.lastIndexOf('z', 1));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\TextStringBuilderTest.java",
  "methodName" : "testLastIndexOf_String",
  "sourceCode" : "@Test\r\nvoid testLastIndexOf_String() {\r\n    final TextStringBuilder sb = new TextStringBuilder(\"abab\");\r\n    assertEquals(2, sb.lastIndexOf(\"a\"));\r\n    // should work like String#lastIndexOf\r\n    assertEquals(\"abab\".lastIndexOf(\"a\"), sb.lastIndexOf(\"a\"));\r\n    assertEquals(2, sb.lastIndexOf(\"ab\"));\r\n    // should work like String#lastIndexOf\r\n    assertEquals(\"abab\".lastIndexOf(\"ab\"), sb.lastIndexOf(\"ab\"));\r\n    assertEquals(3, sb.lastIndexOf(\"b\"));\r\n    assertEquals(\"abab\".lastIndexOf(\"b\"), sb.lastIndexOf(\"b\"));\r\n    assertEquals(1, sb.lastIndexOf(\"ba\"));\r\n    assertEquals(\"abab\".lastIndexOf(\"ba\"), sb.lastIndexOf(\"ba\"));\r\n    assertEquals(-1, sb.lastIndexOf(\"z\"));\r\n    assertEquals(-1, sb.lastIndexOf((String) null));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\TextStringBuilderTest.java",
  "methodName" : "testLastIndexOf_String_int",
  "sourceCode" : "@Test\r\nvoid testLastIndexOf_String_int() {\r\n    TextStringBuilder sb = new TextStringBuilder(\"abab\");\r\n    assertEquals(-1, sb.lastIndexOf(\"a\", -1));\r\n    assertEquals(0, sb.lastIndexOf(\"a\", 0));\r\n    assertEquals(0, sb.lastIndexOf(\"a\", 1));\r\n    assertEquals(2, sb.lastIndexOf(\"a\", 2));\r\n    assertEquals(2, sb.lastIndexOf(\"a\", 3));\r\n    assertEquals(2, sb.lastIndexOf(\"a\", 4));\r\n    assertEquals(2, sb.lastIndexOf(\"a\", 5));\r\n    assertEquals(-1, sb.lastIndexOf(\"abcdef\", 3));\r\n    assertEquals(\"abab\".lastIndexOf(\"\", 3), sb.lastIndexOf(\"\", 3));\r\n    assertEquals(\"abab\".lastIndexOf(\"\", 1), sb.lastIndexOf(\"\", 1));\r\n    // should work like String#lastIndexOf\r\n    assertEquals(\"abab\".lastIndexOf(\"a\", 1), sb.lastIndexOf(\"a\", 1));\r\n    assertEquals(0, sb.lastIndexOf(\"ab\", 1));\r\n    // should work like String#lastIndexOf\r\n    assertEquals(\"abab\".lastIndexOf(\"ab\", 1), sb.lastIndexOf(\"ab\", 1));\r\n    assertEquals(1, sb.lastIndexOf(\"b\", 2));\r\n    assertEquals(\"abab\".lastIndexOf(\"b\", 2), sb.lastIndexOf(\"b\", 2));\r\n    assertEquals(1, sb.lastIndexOf(\"ba\", 2));\r\n    assertEquals(\"abab\".lastIndexOf(\"ba\", 2), sb.lastIndexOf(\"ba\", 2));\r\n    assertEquals(-1, sb.lastIndexOf(\"z\", 2));\r\n    sb = new TextStringBuilder(\"xyzabc\");\r\n    assertEquals(2, sb.lastIndexOf(\"za\", sb.length()));\r\n    assertEquals(-1, sb.lastIndexOf(\"za\", 1));\r\n    assertEquals(-1, sb.lastIndexOf((String) null, 2));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\TextStringBuilderTest.java",
  "methodName" : "testLastIndexOf_StringMatcher",
  "sourceCode" : "@Test\r\nvoid testLastIndexOf_StringMatcher() {\r\n    final TextStringBuilder sb = new TextStringBuilder();\r\n    assertEquals(-1, sb.lastIndexOf((StringMatcher) null));\r\n    assertEquals(-1, sb.lastIndexOf(StringMatcherFactory.INSTANCE.charMatcher('a')));\r\n    sb.append(\"ab bd\");\r\n    assertEquals(0, sb.lastIndexOf(StringMatcherFactory.INSTANCE.charMatcher('a')));\r\n    assertEquals(3, sb.lastIndexOf(StringMatcherFactory.INSTANCE.charMatcher('b')));\r\n    assertEquals(2, sb.lastIndexOf(StringMatcherFactory.INSTANCE.spaceMatcher()));\r\n    assertEquals(4, sb.lastIndexOf(StringMatcherFactory.INSTANCE.charMatcher('d')));\r\n    assertEquals(-1, sb.lastIndexOf(StringMatcherFactory.INSTANCE.noneMatcher()));\r\n    assertEquals(-1, sb.lastIndexOf((StringMatcher) null));\r\n    sb.append(\" A1 junction\");\r\n    assertEquals(6, sb.lastIndexOf(A_NUMBER_MATCHER));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\TextStringBuilderTest.java",
  "methodName" : "testLastIndexOf_StringMatcher_int",
  "sourceCode" : "@Test\r\nvoid testLastIndexOf_StringMatcher_int() {\r\n    final TextStringBuilder sb = new TextStringBuilder();\r\n    assertEquals(-1, sb.lastIndexOf((StringMatcher) null, 2));\r\n    assertEquals(-1, sb.lastIndexOf(StringMatcherFactory.INSTANCE.charMatcher('a'), 2));\r\n    assertEquals(-1, sb.lastIndexOf(StringMatcherFactory.INSTANCE.charMatcher('a'), 0));\r\n    assertEquals(-1, sb.lastIndexOf(StringMatcherFactory.INSTANCE.charMatcher('a'), -1));\r\n    sb.append(\"ab bd\");\r\n    assertEquals(-1, sb.lastIndexOf(StringMatcherFactory.INSTANCE.charMatcher('a'), -2));\r\n    assertEquals(0, sb.lastIndexOf(StringMatcherFactory.INSTANCE.charMatcher('a'), 0));\r\n    assertEquals(0, sb.lastIndexOf(StringMatcherFactory.INSTANCE.charMatcher('a'), 2));\r\n    assertEquals(0, sb.lastIndexOf(StringMatcherFactory.INSTANCE.charMatcher('a'), 20));\r\n    assertEquals(-1, sb.lastIndexOf(StringMatcherFactory.INSTANCE.charMatcher('b'), -1));\r\n    assertEquals(-1, sb.lastIndexOf(StringMatcherFactory.INSTANCE.charMatcher('b'), 0));\r\n    assertEquals(1, sb.lastIndexOf(StringMatcherFactory.INSTANCE.charMatcher('b'), 1));\r\n    assertEquals(1, sb.lastIndexOf(StringMatcherFactory.INSTANCE.charMatcher('b'), 2));\r\n    assertEquals(3, sb.lastIndexOf(StringMatcherFactory.INSTANCE.charMatcher('b'), 3));\r\n    assertEquals(3, sb.lastIndexOf(StringMatcherFactory.INSTANCE.charMatcher('b'), 4));\r\n    assertEquals(3, sb.lastIndexOf(StringMatcherFactory.INSTANCE.charMatcher('b'), 5));\r\n    assertEquals(3, sb.lastIndexOf(StringMatcherFactory.INSTANCE.charMatcher('b'), 6));\r\n    assertEquals(-1, sb.lastIndexOf(StringMatcherFactory.INSTANCE.spaceMatcher(), -2));\r\n    assertEquals(-1, sb.lastIndexOf(StringMatcherFactory.INSTANCE.spaceMatcher(), 0));\r\n    assertEquals(2, sb.lastIndexOf(StringMatcherFactory.INSTANCE.spaceMatcher(), 2));\r\n    assertEquals(2, sb.lastIndexOf(StringMatcherFactory.INSTANCE.spaceMatcher(), 4));\r\n    assertEquals(2, sb.lastIndexOf(StringMatcherFactory.INSTANCE.spaceMatcher(), 20));\r\n    assertEquals(-1, sb.lastIndexOf(StringMatcherFactory.INSTANCE.noneMatcher(), 0));\r\n    assertEquals(-1, sb.lastIndexOf((StringMatcher) null, 0));\r\n    sb.append(\" A1 junction with A2\");\r\n    assertEquals(-1, sb.lastIndexOf(A_NUMBER_MATCHER, 5));\r\n    // A matches, 1\r\n    assertEquals(-1, sb.lastIndexOf(A_NUMBER_MATCHER, 6));\r\n    // is outside\r\n    // bounds\r\n    assertEquals(6, sb.lastIndexOf(A_NUMBER_MATCHER, 7));\r\n    assertEquals(6, sb.lastIndexOf(A_NUMBER_MATCHER, 22));\r\n    // A matches, 2\r\n    assertEquals(6, sb.lastIndexOf(A_NUMBER_MATCHER, 23));\r\n    // is outside\r\n    // bounds\r\n    assertEquals(23, sb.lastIndexOf(A_NUMBER_MATCHER, 24));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\TextStringBuilderTest.java",
  "methodName" : "testLeftString",
  "sourceCode" : "@Test\r\nvoid testLeftString() {\r\n    final TextStringBuilder sb = new TextStringBuilder(\"left right\");\r\n    assertEquals(\"left\", sb.leftString(4));\r\n    assertEquals(\"\", sb.leftString(0));\r\n    assertEquals(\"\", sb.leftString(-5));\r\n    assertEquals(\"left right\", sb.leftString(15));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\TextStringBuilderTest.java",
  "methodName" : "testLength",
  "sourceCode" : "@Test\r\nvoid testLength() {\r\n    final TextStringBuilder sb = new TextStringBuilder();\r\n    assertEquals(0, sb.length());\r\n    sb.append(\"Hello\");\r\n    assertEquals(5, sb.length());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\TextStringBuilderTest.java",
  "methodName" : "testMidString",
  "sourceCode" : "@Test\r\nvoid testMidString() {\r\n    final TextStringBuilder sb = new TextStringBuilder(\"hello goodbye hello\");\r\n    assertEquals(\"goodbye\", sb.midString(6, 7));\r\n    assertEquals(\"hello\", sb.midString(0, 5));\r\n    assertEquals(\"hello\", sb.midString(-5, 5));\r\n    assertEquals(\"\", sb.midString(0, -1));\r\n    assertEquals(\"\", sb.midString(20, 2));\r\n    assertEquals(\"hello\", sb.midString(14, 22));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\TextStringBuilderTest.java",
  "methodName" : "testMinimizeCapacity",
  "sourceCode" : "@Test\r\nvoid testMinimizeCapacity() {\r\n    final TextStringBuilder sb = new TextStringBuilder();\r\n    sb.minimizeCapacity();\r\n    assertEquals(0, sb.capacity());\r\n    sb.append(\"HelloWorld\");\r\n    sb.minimizeCapacity();\r\n    assertEquals(10, sb.capacity());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\TextStringBuilderTest.java",
  "methodName" : "testOutOfMemoryError",
  "sourceCode" : "@Test\r\nvoid testOutOfMemoryError() {\r\n    // This test is memory hungry requiring at least 7GiB of memory.\r\n    // By default expansion will double the buffer size. If we repeat\r\n    // add 1GiB of char data then we require at maximum:\r\n    // 1GiB char[] data\r\n    // 2GiB char[] buffer\r\n    // ~4GiB char[] new buffer during reallocation\r\n    // Attempts to guess the amount of free memory available using\r\n    // the java.lang.Runtime/java.lang.management objects to\r\n    // skip the test often did not work.\r\n    // So here we just run the test and return a skip result if the\r\n    // OutOfMemoryError occurs too early.\r\n    final TextStringBuilder sb = new TextStringBuilder();\r\n    sb.minimizeCapacity();\r\n    assertEquals(0, sb.capacity());\r\n    // 1GiB char[] buffer: length is roughly 1/4 the maximum array size\r\n    final char[] chars = new char[1 << 29];\r\n    // With infinite memory it should be possible to add this 3 times.\r\n    try {\r\n        for (int i = 0; i < 3; i++) {\r\n            sb.append(chars);\r\n        }\r\n    } catch (final OutOfMemoryError ignored) {\r\n        Assumptions.abort(\"Not enough memory for the test\");\r\n    }\r\n    // Now at 3/4 of the maximum array length.\r\n    // Adding is not possible so we expect an OOM error.\r\n    assertThrows(OutOfMemoryError.class, () -> sb.append(chars));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\TextStringBuilderTest.java",
  "methodName" : "testOutOfMemoryError2",
  "sourceCode" : "@Test\r\nvoid testOutOfMemoryError2() {\r\n    // This test is memory hungry requiring at least 4GiB of memory\r\n    // in a single allocation. If not possible then skip the test.\r\n    final TextStringBuilder sb = new TextStringBuilder();\r\n    sb.minimizeCapacity();\r\n    assertEquals(0, sb.capacity());\r\n    // Allocate a lot\r\n    final int small = 10;\r\n    final int big = Integer.MAX_VALUE - small;\r\n    final char[] extra = new char[small + 1];\r\n    try {\r\n        sb.ensureCapacity(big);\r\n    } catch (final OutOfMemoryError ignored) {\r\n        Assumptions.abort(\"Not enough memory for the test\");\r\n    }\r\n    fill(sb, big);\r\n    // Adding more than the maximum array size is not possible so we expect an OOM error.\r\n    assertThrows(OutOfMemoryError.class, () -> sb.append(extra));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\TextStringBuilderTest.java",
  "methodName" : "testOutOfMemoryError3",
  "sourceCode" : "@Test\r\nvoid testOutOfMemoryError3() {\r\n    // This test is memory hungry requiring at least 2GiB of memory\r\n    // in a single allocation. If not possible then skip the test.\r\n    final TextStringBuilder sb = new TextStringBuilder();\r\n    sb.minimizeCapacity();\r\n    assertEquals(0, sb.capacity());\r\n    final int length = 1 << 30;\r\n    try {\r\n        sb.ensureCapacity(length);\r\n    } catch (final OutOfMemoryError ignored) {\r\n        Assumptions.abort(\"Not enough memory for the test\");\r\n    }\r\n    fill(sb, length);\r\n    // Adding to itself requires a new buffer above the limits of an array\r\n    assertThrows(OutOfMemoryError.class, () -> sb.append(sb));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\TextStringBuilderTest.java",
  "methodName" : "testReadFromCharBuffer",
  "sourceCode" : "@Test\r\nvoid testReadFromCharBuffer() throws Exception {\r\n    String s = \"\";\r\n    for (int i = 0; i < 100; ++i) {\r\n        final TextStringBuilder sb = new TextStringBuilder();\r\n        final int len = sb.readFrom(CharBuffer.wrap(s));\r\n        assertEquals(s.length(), len);\r\n        assertEquals(s, sb.toString());\r\n        s += Integer.toString(i);\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\TextStringBuilderTest.java",
  "methodName" : "testReadFromCharBufferAppendsToEnd",
  "sourceCode" : "@Test\r\nvoid testReadFromCharBufferAppendsToEnd() throws Exception {\r\n    final TextStringBuilder sb = new TextStringBuilder(\"Test\");\r\n    sb.readFrom(CharBuffer.wrap(\" 123\"));\r\n    assertEquals(\"Test 123\", sb.toString());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\TextStringBuilderTest.java",
  "methodName" : "testReadFromReadable",
  "sourceCode" : "@Test\r\nvoid testReadFromReadable() throws Exception {\r\n    String s = \"\";\r\n    for (int i = 0; i < 100; ++i) {\r\n        final TextStringBuilder sb = new TextStringBuilder();\r\n        final int len = sb.readFrom(new MockReadable(s));\r\n        assertEquals(s.length(), len);\r\n        assertEquals(s, sb.toString());\r\n        s += Integer.toString(i);\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\TextStringBuilderTest.java",
  "methodName" : "testReadFromReadableAppendsToEnd",
  "sourceCode" : "@Test\r\nvoid testReadFromReadableAppendsToEnd() throws Exception {\r\n    final TextStringBuilder sb = new TextStringBuilder(\"Test\");\r\n    sb.readFrom(new MockReadable(\" 123\"));\r\n    assertEquals(\"Test 123\", sb.toString());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\TextStringBuilderTest.java",
  "methodName" : "testReadFromReader",
  "sourceCode" : "@Test\r\nvoid testReadFromReader() throws Exception {\r\n    String s = \"1\";\r\n    for (int i = 0; i < 100; ++i) {\r\n        final TextStringBuilder sb = new TextStringBuilder();\r\n        final int len = sb.readFrom(new StringReader(s));\r\n        assertEquals(s.length(), len);\r\n        assertEquals(s, sb.toString());\r\n        s += Integer.toString(i);\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\TextStringBuilderTest.java",
  "methodName" : "testReadFromReaderAppendsToEnd",
  "sourceCode" : "@Test\r\nvoid testReadFromReaderAppendsToEnd() throws Exception {\r\n    final TextStringBuilder sb = new TextStringBuilder(\"Test\");\r\n    sb.readFrom(new StringReader(\" 123\"));\r\n    assertEquals(\"Test 123\", sb.toString());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\TextStringBuilderTest.java",
  "methodName" : "testReadFromReaderEmpty",
  "sourceCode" : "@Test\r\nvoid testReadFromReaderEmpty() throws Exception {\r\n    final TextStringBuilder sb = new TextStringBuilder();\r\n    final int len = sb.readFrom(new StringReader(StringUtils.EMPTY));\r\n    assertEquals(-1, len);\r\n    assertEquals(StringUtils.EMPTY, sb.toString());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\TextStringBuilderTest.java",
  "methodName" : "testReadFromReaderInt",
  "sourceCode" : "@Test\r\nvoid testReadFromReaderInt() throws Exception {\r\n    String str = \"\";\r\n    for (int i = 0; i < 100; ++i) {\r\n        final TextStringBuilder sb = new TextStringBuilder();\r\n        final int len = sb.readFrom(new StringReader(str), str.length());\r\n        assertEquals(str.length(), len);\r\n        assertEquals(str, sb.toString());\r\n        str += Integer.toString(i);\r\n    }\r\n    //\r\n    TextStringBuilder sb;\r\n    int count;\r\n    int target;\r\n    final String source = \"abc\";\r\n    final int sourceLen = source.length();\r\n    // empty\r\n    target = -1;\r\n    sb = new TextStringBuilder();\r\n    count = sb.readFrom(new StringReader(StringUtils.EMPTY), target);\r\n    assertEquals(0, count);\r\n    assertEquals(0, sb.size());\r\n    assertEquals(source.substring(0, 0), sb.toString());\r\n    //\r\n    target = -1;\r\n    sb = new TextStringBuilder();\r\n    count = sb.readFrom(new StringReader(source), target);\r\n    assertEquals(0, count);\r\n    assertEquals(0, sb.size());\r\n    assertEquals(source.substring(0, 0), sb.toString());\r\n    //\r\n    target = 0;\r\n    sb = new TextStringBuilder();\r\n    count = sb.readFrom(new StringReader(source), target);\r\n    assertEquals(target, count);\r\n    assertEquals(target, sb.size());\r\n    assertEquals(source.substring(0, target), sb.toString());\r\n    //\r\n    target = 1;\r\n    sb = new TextStringBuilder();\r\n    count = sb.readFrom(new StringReader(source), target);\r\n    assertEquals(target, count);\r\n    assertEquals(target, sb.size());\r\n    assertEquals(source.substring(0, target), sb.toString());\r\n    //\r\n    target = 2;\r\n    sb = new TextStringBuilder();\r\n    count = sb.readFrom(new StringReader(source), target);\r\n    assertEquals(target, count);\r\n    assertEquals(target, sb.size());\r\n    assertEquals(source.substring(0, target), sb.toString());\r\n    //\r\n    target = 3;\r\n    sb = new TextStringBuilder();\r\n    count = sb.readFrom(new StringReader(source), target);\r\n    assertEquals(target, count);\r\n    assertEquals(target, sb.size());\r\n    assertEquals(source.substring(0, target), sb.toString());\r\n    //\r\n    target = 4;\r\n    sb = new TextStringBuilder();\r\n    count = sb.readFrom(new StringReader(source), target);\r\n    assertEquals(sourceLen, count);\r\n    assertEquals(sourceLen, sb.size());\r\n    assertEquals(source.substring(0, sourceLen), sb.toString());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\TextStringBuilderTest.java",
  "methodName" : "testReadFromReaderIntEmpty",
  "sourceCode" : "@Test\r\nvoid testReadFromReaderIntEmpty() throws Exception {\r\n    final TextStringBuilder sb = new TextStringBuilder();\r\n    final int len = sb.readFrom(new StringReader(StringUtils.EMPTY), 1);\r\n    assertEquals(-1, len);\r\n    assertEquals(StringUtils.EMPTY, sb.toString());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\TextStringBuilderTest.java",
  "methodName" : "testReplace_int_int_String",
  "sourceCode" : "@Test\r\nvoid testReplace_int_int_String() {\r\n    final TextStringBuilder sb = new TextStringBuilder(\"abc\");\r\n    sb.replace(0, 1, \"d\");\r\n    assertEquals(\"dbc\", sb.toString());\r\n    sb.replace(0, 1, \"aaa\");\r\n    assertEquals(\"aaabc\", sb.toString());\r\n    sb.replace(0, 3, \"\");\r\n    assertEquals(\"bc\", sb.toString());\r\n    sb.replace(1, 2, (String) null);\r\n    assertEquals(\"b\", sb.toString());\r\n    sb.replace(1, 1000, \"text\");\r\n    assertEquals(\"btext\", sb.toString());\r\n    sb.replace(0, 1000, \"text\");\r\n    assertEquals(\"text\", sb.toString());\r\n    final TextStringBuilder builder = new TextStringBuilder(\"atext\");\r\n    builder.replace(1, 1, \"ny\");\r\n    assertEquals(\"anytext\", builder.toString());\r\n    assertThrows(IndexOutOfBoundsException.class, () -> builder.replace(2, 1, \"anything\"));\r\n    builder.clear();\r\n    assertThrows(IndexOutOfBoundsException.class, () -> builder.replace(1, 2, \"anything\"));\r\n    assertThrows(IndexOutOfBoundsException.class, () -> builder.replace(-1, 1, \"anything\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\TextStringBuilderTest.java",
  "methodName" : "testReplace_StringMatcher_String_int_int_int_VaryCount",
  "sourceCode" : "@Test\r\nvoid testReplace_StringMatcher_String_int_int_int_VaryCount() {\r\n    TextStringBuilder sb = new TextStringBuilder(\"aaxaaaayaa\");\r\n    sb.replace(StringMatcherFactory.INSTANCE.stringMatcher(\"aa\"), \"-\", 0, 10, -1);\r\n    assertEquals(\"-x--y-\", sb.toString());\r\n    sb = new TextStringBuilder(\"aaxaaaayaa\");\r\n    sb.replace(StringMatcherFactory.INSTANCE.stringMatcher(\"aa\"), \"-\", 0, 10, 0);\r\n    assertEquals(\"aaxaaaayaa\", sb.toString());\r\n    sb = new TextStringBuilder(\"aaxaaaayaa\");\r\n    sb.replace(StringMatcherFactory.INSTANCE.stringMatcher(\"aa\"), \"-\", 0, 10, 1);\r\n    assertEquals(\"-xaaaayaa\", sb.toString());\r\n    sb = new TextStringBuilder(\"aaxaaaayaa\");\r\n    sb.replace(StringMatcherFactory.INSTANCE.stringMatcher(\"aa\"), \"-\", 0, 10, 2);\r\n    assertEquals(\"-x-aayaa\", sb.toString());\r\n    sb = new TextStringBuilder(\"aaxaaaayaa\");\r\n    sb.replace(StringMatcherFactory.INSTANCE.stringMatcher(\"aa\"), \"-\", 0, 10, 3);\r\n    assertEquals(\"-x--yaa\", sb.toString());\r\n    sb = new TextStringBuilder(\"aaxaaaayaa\");\r\n    sb.replace(StringMatcherFactory.INSTANCE.stringMatcher(\"aa\"), \"-\", 0, 10, 4);\r\n    assertEquals(\"-x--y-\", sb.toString());\r\n    sb = new TextStringBuilder(\"aaxaaaayaa\");\r\n    sb.replace(StringMatcherFactory.INSTANCE.stringMatcher(\"aa\"), \"-\", 0, 10, 5);\r\n    assertEquals(\"-x--y-\", sb.toString());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\TextStringBuilderTest.java",
  "methodName" : "testReplace_StringMatcher_String_int_int_int_VaryEndIndex",
  "sourceCode" : "@Test\r\nvoid testReplace_StringMatcher_String_int_int_int_VaryEndIndex() {\r\n    TextStringBuilder sb = new TextStringBuilder(\"aaxaaaayaa\");\r\n    sb.replace(StringMatcherFactory.INSTANCE.stringMatcher(\"aa\"), \"-\", 0, 0, -1);\r\n    assertEquals(\"aaxaaaayaa\", sb.toString());\r\n    sb = new TextStringBuilder(\"aaxaaaayaa\");\r\n    sb.replace(StringMatcherFactory.INSTANCE.stringMatcher(\"aa\"), \"-\", 0, 2, -1);\r\n    assertEquals(\"-xaaaayaa\", sb.toString());\r\n    sb = new TextStringBuilder(\"aaxaaaayaa\");\r\n    sb.replace(StringMatcherFactory.INSTANCE.stringMatcher(\"aa\"), \"-\", 0, 3, -1);\r\n    assertEquals(\"-xaaaayaa\", sb.toString());\r\n    sb = new TextStringBuilder(\"aaxaaaayaa\");\r\n    sb.replace(StringMatcherFactory.INSTANCE.stringMatcher(\"aa\"), \"-\", 0, 4, -1);\r\n    assertEquals(\"-xaaaayaa\", sb.toString());\r\n    sb = new TextStringBuilder(\"aaxaaaayaa\");\r\n    sb.replace(StringMatcherFactory.INSTANCE.stringMatcher(\"aa\"), \"-\", 0, 5, -1);\r\n    assertEquals(\"-x-aayaa\", sb.toString());\r\n    sb = new TextStringBuilder(\"aaxaaaayaa\");\r\n    sb.replace(StringMatcherFactory.INSTANCE.stringMatcher(\"aa\"), \"-\", 0, 6, -1);\r\n    assertEquals(\"-x-aayaa\", sb.toString());\r\n    sb = new TextStringBuilder(\"aaxaaaayaa\");\r\n    sb.replace(StringMatcherFactory.INSTANCE.stringMatcher(\"aa\"), \"-\", 0, 7, -1);\r\n    assertEquals(\"-x--yaa\", sb.toString());\r\n    sb = new TextStringBuilder(\"aaxaaaayaa\");\r\n    sb.replace(StringMatcherFactory.INSTANCE.stringMatcher(\"aa\"), \"-\", 0, 8, -1);\r\n    assertEquals(\"-x--yaa\", sb.toString());\r\n    sb = new TextStringBuilder(\"aaxaaaayaa\");\r\n    sb.replace(StringMatcherFactory.INSTANCE.stringMatcher(\"aa\"), \"-\", 0, 9, -1);\r\n    assertEquals(\"-x--yaa\", sb.toString());\r\n    sb = new TextStringBuilder(\"aaxaaaayaa\");\r\n    sb.replace(StringMatcherFactory.INSTANCE.stringMatcher(\"aa\"), \"-\", 0, 10, -1);\r\n    assertEquals(\"-x--y-\", sb.toString());\r\n    sb = new TextStringBuilder(\"aaxaaaayaa\");\r\n    sb.replace(StringMatcherFactory.INSTANCE.stringMatcher(\"aa\"), \"-\", 0, 1000, -1);\r\n    assertEquals(\"-x--y-\", sb.toString());\r\n    final TextStringBuilder builder = new TextStringBuilder(\"aaxaaaayaa\");\r\n    assertThrows(IndexOutOfBoundsException.class, () -> builder.replace(StringMatcherFactory.INSTANCE.stringMatcher(\"aa\"), \"-\", 2, 1, -1));\r\n    assertEquals(\"aaxaaaayaa\", builder.toString());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\TextStringBuilderTest.java",
  "methodName" : "testReplace_StringMatcher_String_int_int_int_VaryMatcher",
  "sourceCode" : "@Test\r\nvoid testReplace_StringMatcher_String_int_int_int_VaryMatcher() {\r\n    TextStringBuilder sb = new TextStringBuilder(\"abcbccba\");\r\n    sb.replace((StringMatcher) null, \"x\", 0, sb.length(), -1);\r\n    assertEquals(\"abcbccba\", sb.toString());\r\n    sb.replace(StringMatcherFactory.INSTANCE.charMatcher('a'), \"x\", 0, sb.length(), -1);\r\n    assertEquals(\"xbcbccbx\", sb.toString());\r\n    sb.replace(StringMatcherFactory.INSTANCE.stringMatcher(\"cb\"), \"x\", 0, sb.length(), -1);\r\n    assertEquals(\"xbxcxx\", sb.toString());\r\n    sb = new TextStringBuilder(\"A1-A2A3-A4\");\r\n    sb.replace(A_NUMBER_MATCHER, \"***\", 0, sb.length(), -1);\r\n    assertEquals(\"***-******-***\", sb.toString());\r\n    sb = new TextStringBuilder();\r\n    sb.replace(A_NUMBER_MATCHER, \"***\", 0, sb.length(), -1);\r\n    assertEquals(\"\", sb.toString());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\TextStringBuilderTest.java",
  "methodName" : "testReplace_StringMatcher_String_int_int_int_VaryReplace",
  "sourceCode" : "@Test\r\nvoid testReplace_StringMatcher_String_int_int_int_VaryReplace() {\r\n    TextStringBuilder sb = new TextStringBuilder(\"abcbccba\");\r\n    sb.replace(StringMatcherFactory.INSTANCE.stringMatcher(\"cb\"), \"cb\", 0, sb.length(), -1);\r\n    assertEquals(\"abcbccba\", sb.toString());\r\n    sb = new TextStringBuilder(\"abcbccba\");\r\n    sb.replace(StringMatcherFactory.INSTANCE.stringMatcher(\"cb\"), \"-\", 0, sb.length(), -1);\r\n    assertEquals(\"ab-c-a\", sb.toString());\r\n    sb = new TextStringBuilder(\"abcbccba\");\r\n    sb.replace(StringMatcherFactory.INSTANCE.stringMatcher(\"cb\"), \"+++\", 0, sb.length(), -1);\r\n    assertEquals(\"ab+++c+++a\", sb.toString());\r\n    sb = new TextStringBuilder(\"abcbccba\");\r\n    sb.replace(StringMatcherFactory.INSTANCE.stringMatcher(\"cb\"), \"\", 0, sb.length(), -1);\r\n    assertEquals(\"abca\", sb.toString());\r\n    sb = new TextStringBuilder(\"abcbccba\");\r\n    sb.replace(StringMatcherFactory.INSTANCE.stringMatcher(\"cb\"), null, 0, sb.length(), -1);\r\n    assertEquals(\"abca\", sb.toString());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\TextStringBuilderTest.java",
  "methodName" : "testReplace_StringMatcher_String_int_int_int_VaryStartIndex",
  "sourceCode" : "@Test\r\nvoid testReplace_StringMatcher_String_int_int_int_VaryStartIndex() {\r\n    TextStringBuilder sb = new TextStringBuilder(\"aaxaaaayaa\");\r\n    sb.replace(StringMatcherFactory.INSTANCE.stringMatcher(\"aa\"), \"-\", 0, sb.length(), -1);\r\n    assertEquals(\"-x--y-\", sb.toString());\r\n    sb = new TextStringBuilder(\"aaxaaaayaa\");\r\n    sb.replace(StringMatcherFactory.INSTANCE.stringMatcher(\"aa\"), \"-\", 1, sb.length(), -1);\r\n    assertEquals(\"aax--y-\", sb.toString());\r\n    sb = new TextStringBuilder(\"aaxaaaayaa\");\r\n    sb.replace(StringMatcherFactory.INSTANCE.stringMatcher(\"aa\"), \"-\", 2, sb.length(), -1);\r\n    assertEquals(\"aax--y-\", sb.toString());\r\n    sb = new TextStringBuilder(\"aaxaaaayaa\");\r\n    sb.replace(StringMatcherFactory.INSTANCE.stringMatcher(\"aa\"), \"-\", 3, sb.length(), -1);\r\n    assertEquals(\"aax--y-\", sb.toString());\r\n    sb = new TextStringBuilder(\"aaxaaaayaa\");\r\n    sb.replace(StringMatcherFactory.INSTANCE.stringMatcher(\"aa\"), \"-\", 4, sb.length(), -1);\r\n    assertEquals(\"aaxa-ay-\", sb.toString());\r\n    sb = new TextStringBuilder(\"aaxaaaayaa\");\r\n    sb.replace(StringMatcherFactory.INSTANCE.stringMatcher(\"aa\"), \"-\", 5, sb.length(), -1);\r\n    assertEquals(\"aaxaa-y-\", sb.toString());\r\n    sb = new TextStringBuilder(\"aaxaaaayaa\");\r\n    sb.replace(StringMatcherFactory.INSTANCE.stringMatcher(\"aa\"), \"-\", 6, sb.length(), -1);\r\n    assertEquals(\"aaxaaaay-\", sb.toString());\r\n    sb = new TextStringBuilder(\"aaxaaaayaa\");\r\n    sb.replace(StringMatcherFactory.INSTANCE.stringMatcher(\"aa\"), \"-\", 7, sb.length(), -1);\r\n    assertEquals(\"aaxaaaay-\", sb.toString());\r\n    sb = new TextStringBuilder(\"aaxaaaayaa\");\r\n    sb.replace(StringMatcherFactory.INSTANCE.stringMatcher(\"aa\"), \"-\", 8, sb.length(), -1);\r\n    assertEquals(\"aaxaaaay-\", sb.toString());\r\n    sb = new TextStringBuilder(\"aaxaaaayaa\");\r\n    sb.replace(StringMatcherFactory.INSTANCE.stringMatcher(\"aa\"), \"-\", 9, sb.length(), -1);\r\n    assertEquals(\"aaxaaaayaa\", sb.toString());\r\n    sb = new TextStringBuilder(\"aaxaaaayaa\");\r\n    sb.replace(StringMatcherFactory.INSTANCE.stringMatcher(\"aa\"), \"-\", 10, sb.length(), -1);\r\n    assertEquals(\"aaxaaaayaa\", sb.toString());\r\n    final TextStringBuilder builder = new TextStringBuilder(\"aaxaaaayaa\");\r\n    assertThrows(IndexOutOfBoundsException.class, () -> builder.replace(StringMatcherFactory.INSTANCE.stringMatcher(\"aa\"), \"-\", 11, builder.length(), -1));\r\n    assertEquals(\"aaxaaaayaa\", builder.toString());\r\n    builder.set(\"aaxaaaayaa\");\r\n    assertThrows(IndexOutOfBoundsException.class, () -> builder.replace(StringMatcherFactory.INSTANCE.stringMatcher(\"aa\"), \"-\", -1, builder.length(), -1));\r\n    assertEquals(\"aaxaaaayaa\", builder.toString());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\TextStringBuilderTest.java",
  "methodName" : "testReplaceAll_char_char",
  "sourceCode" : "@Test\r\nvoid testReplaceAll_char_char() {\r\n    final TextStringBuilder sb = new TextStringBuilder(\"abcbccba\");\r\n    sb.replaceAll('x', 'y');\r\n    assertEquals(\"abcbccba\", sb.toString());\r\n    sb.replaceAll('a', 'd');\r\n    assertEquals(\"dbcbccbd\", sb.toString());\r\n    sb.replaceAll('b', 'e');\r\n    assertEquals(\"dececced\", sb.toString());\r\n    sb.replaceAll('c', 'f');\r\n    assertEquals(\"defeffed\", sb.toString());\r\n    sb.replaceAll('d', 'd');\r\n    assertEquals(\"defeffed\", sb.toString());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\TextStringBuilderTest.java",
  "methodName" : "testReplaceAll_String_String",
  "sourceCode" : "@Test\r\nvoid testReplaceAll_String_String() {\r\n    TextStringBuilder sb = new TextStringBuilder(\"abcbccba\");\r\n    sb.replaceAll((String) null, null);\r\n    assertEquals(\"abcbccba\", sb.toString());\r\n    sb.replaceAll((String) null, \"anything\");\r\n    assertEquals(\"abcbccba\", sb.toString());\r\n    sb.replaceAll(\"\", null);\r\n    assertEquals(\"abcbccba\", sb.toString());\r\n    sb.replaceAll(\"\", \"anything\");\r\n    assertEquals(\"abcbccba\", sb.toString());\r\n    sb.replaceAll(\"x\", \"y\");\r\n    assertEquals(\"abcbccba\", sb.toString());\r\n    sb.replaceAll(\"a\", \"d\");\r\n    assertEquals(\"dbcbccbd\", sb.toString());\r\n    sb.replaceAll(\"d\", null);\r\n    assertEquals(\"bcbccb\", sb.toString());\r\n    sb.replaceAll(\"cb\", \"-\");\r\n    assertEquals(\"b-c-\", sb.toString());\r\n    sb = new TextStringBuilder(\"abcba\");\r\n    sb.replaceAll(\"b\", \"xbx\");\r\n    assertEquals(\"axbxcxbxa\", sb.toString());\r\n    sb = new TextStringBuilder(\"bb\");\r\n    sb.replaceAll(\"b\", \"xbx\");\r\n    assertEquals(\"xbxxbx\", sb.toString());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\TextStringBuilderTest.java",
  "methodName" : "testReplaceAll_StringMatcher_String",
  "sourceCode" : "@Test\r\nvoid testReplaceAll_StringMatcher_String() {\r\n    TextStringBuilder sb = new TextStringBuilder(\"abcbccba\");\r\n    sb.replaceAll((StringMatcher) null, null);\r\n    assertEquals(\"abcbccba\", sb.toString());\r\n    sb.replaceAll((StringMatcher) null, \"anything\");\r\n    assertEquals(\"abcbccba\", sb.toString());\r\n    sb.replaceAll(StringMatcherFactory.INSTANCE.noneMatcher(), null);\r\n    assertEquals(\"abcbccba\", sb.toString());\r\n    sb.replaceAll(StringMatcherFactory.INSTANCE.noneMatcher(), \"anything\");\r\n    assertEquals(\"abcbccba\", sb.toString());\r\n    sb.replaceAll(StringMatcherFactory.INSTANCE.charMatcher('x'), \"y\");\r\n    assertEquals(\"abcbccba\", sb.toString());\r\n    sb.replaceAll(StringMatcherFactory.INSTANCE.charMatcher('a'), \"d\");\r\n    assertEquals(\"dbcbccbd\", sb.toString());\r\n    sb.replaceAll(StringMatcherFactory.INSTANCE.charMatcher('d'), null);\r\n    assertEquals(\"bcbccb\", sb.toString());\r\n    sb.replaceAll(StringMatcherFactory.INSTANCE.stringMatcher(\"cb\"), \"-\");\r\n    assertEquals(\"b-c-\", sb.toString());\r\n    sb = new TextStringBuilder(\"abcba\");\r\n    sb.replaceAll(StringMatcherFactory.INSTANCE.charMatcher('b'), \"xbx\");\r\n    assertEquals(\"axbxcxbxa\", sb.toString());\r\n    sb = new TextStringBuilder(\"bb\");\r\n    sb.replaceAll(StringMatcherFactory.INSTANCE.charMatcher('b'), \"xbx\");\r\n    assertEquals(\"xbxxbx\", sb.toString());\r\n    sb = new TextStringBuilder(\"A1-A2A3-A4\");\r\n    sb.replaceAll(A_NUMBER_MATCHER, \"***\");\r\n    assertEquals(\"***-******-***\", sb.toString());\r\n    sb = new TextStringBuilder(\"Dear X, hello X.\");\r\n    sb.replaceAll(StringMatcherFactory.INSTANCE.stringMatcher(\"X\"), \"012345678901234567\");\r\n    assertEquals(\"Dear 012345678901234567, hello 012345678901234567.\", sb.toString());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\TextStringBuilderTest.java",
  "methodName" : "testReplaceFirst_char_char",
  "sourceCode" : "@Test\r\nvoid testReplaceFirst_char_char() {\r\n    final TextStringBuilder sb = new TextStringBuilder(\"abcbccba\");\r\n    sb.replaceFirst('x', 'y');\r\n    assertEquals(\"abcbccba\", sb.toString());\r\n    sb.replaceFirst('a', 'd');\r\n    assertEquals(\"dbcbccba\", sb.toString());\r\n    sb.replaceFirst('b', 'e');\r\n    assertEquals(\"decbccba\", sb.toString());\r\n    sb.replaceFirst('c', 'f');\r\n    assertEquals(\"defbccba\", sb.toString());\r\n    sb.replaceFirst('d', 'd');\r\n    assertEquals(\"defbccba\", sb.toString());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\TextStringBuilderTest.java",
  "methodName" : "testReplaceFirst_String_String",
  "sourceCode" : "@Test\r\nvoid testReplaceFirst_String_String() {\r\n    TextStringBuilder sb = new TextStringBuilder(\"abcbccba\");\r\n    sb.replaceFirst((String) null, null);\r\n    assertEquals(\"abcbccba\", sb.toString());\r\n    sb.replaceFirst((String) null, \"anything\");\r\n    assertEquals(\"abcbccba\", sb.toString());\r\n    sb.replaceFirst(\"\", null);\r\n    assertEquals(\"abcbccba\", sb.toString());\r\n    sb.replaceFirst(\"\", \"anything\");\r\n    assertEquals(\"abcbccba\", sb.toString());\r\n    sb.replaceFirst(\"x\", \"y\");\r\n    assertEquals(\"abcbccba\", sb.toString());\r\n    sb.replaceFirst(\"a\", \"d\");\r\n    assertEquals(\"dbcbccba\", sb.toString());\r\n    sb.replaceFirst(\"d\", null);\r\n    assertEquals(\"bcbccba\", sb.toString());\r\n    sb.replaceFirst(\"cb\", \"-\");\r\n    assertEquals(\"b-ccba\", sb.toString());\r\n    sb = new TextStringBuilder(\"abcba\");\r\n    sb.replaceFirst(\"b\", \"xbx\");\r\n    assertEquals(\"axbxcba\", sb.toString());\r\n    sb = new TextStringBuilder(\"bb\");\r\n    sb.replaceFirst(\"b\", \"xbx\");\r\n    assertEquals(\"xbxb\", sb.toString());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\TextStringBuilderTest.java",
  "methodName" : "testReplaceFirst_StringMatcher_String",
  "sourceCode" : "@Test\r\nvoid testReplaceFirst_StringMatcher_String() {\r\n    TextStringBuilder sb = new TextStringBuilder(\"abcbccba\");\r\n    sb.replaceFirst((StringMatcher) null, null);\r\n    assertEquals(\"abcbccba\", sb.toString());\r\n    sb.replaceFirst((StringMatcher) null, \"anything\");\r\n    assertEquals(\"abcbccba\", sb.toString());\r\n    sb.replaceFirst(StringMatcherFactory.INSTANCE.noneMatcher(), null);\r\n    assertEquals(\"abcbccba\", sb.toString());\r\n    sb.replaceFirst(StringMatcherFactory.INSTANCE.noneMatcher(), \"anything\");\r\n    assertEquals(\"abcbccba\", sb.toString());\r\n    sb.replaceFirst(StringMatcherFactory.INSTANCE.charMatcher('x'), \"y\");\r\n    assertEquals(\"abcbccba\", sb.toString());\r\n    sb.replaceFirst(StringMatcherFactory.INSTANCE.charMatcher('a'), \"d\");\r\n    assertEquals(\"dbcbccba\", sb.toString());\r\n    sb.replaceFirst(StringMatcherFactory.INSTANCE.charMatcher('d'), null);\r\n    assertEquals(\"bcbccba\", sb.toString());\r\n    sb.replaceFirst(StringMatcherFactory.INSTANCE.stringMatcher(\"cb\"), \"-\");\r\n    assertEquals(\"b-ccba\", sb.toString());\r\n    sb = new TextStringBuilder(\"abcba\");\r\n    sb.replaceFirst(StringMatcherFactory.INSTANCE.charMatcher('b'), \"xbx\");\r\n    assertEquals(\"axbxcba\", sb.toString());\r\n    sb = new TextStringBuilder(\"bb\");\r\n    sb.replaceFirst(StringMatcherFactory.INSTANCE.charMatcher('b'), \"xbx\");\r\n    assertEquals(\"xbxb\", sb.toString());\r\n    sb = new TextStringBuilder(\"A1-A2A3-A4\");\r\n    sb.replaceFirst(A_NUMBER_MATCHER, \"***\");\r\n    assertEquals(\"***-A2A3-A4\", sb.toString());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\TextStringBuilderTest.java",
  "methodName" : "testReverse",
  "sourceCode" : "@Test\r\nvoid testReverse() {\r\n    final TextStringBuilder sb = new TextStringBuilder();\r\n    assertEquals(\"\", sb.reverse().toString());\r\n    sb.clear().append(true);\r\n    assertEquals(\"eurt\", sb.reverse().toString());\r\n    assertEquals(\"true\", sb.reverse().toString());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\TextStringBuilderTest.java",
  "methodName" : "testRightString",
  "sourceCode" : "@Test\r\nvoid testRightString() {\r\n    final TextStringBuilder sb = new TextStringBuilder(\"left right\");\r\n    assertEquals(\"right\", sb.rightString(5));\r\n    assertEquals(\"\", sb.rightString(0));\r\n    assertEquals(\"\", sb.rightString(-5));\r\n    assertEquals(\"left right\", sb.rightString(15));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\TextStringBuilderTest.java",
  "methodName" : "testSetCharAt",
  "sourceCode" : "@Test\r\nvoid testSetCharAt() {\r\n    final TextStringBuilder sb = new TextStringBuilder();\r\n    assertThrows(IndexOutOfBoundsException.class, () -> sb.setCharAt(0, 'f'));\r\n    assertThrows(IndexOutOfBoundsException.class, () -> sb.setCharAt(-1, 'f'));\r\n    sb.append(\"foo\");\r\n    sb.setCharAt(0, 'b');\r\n    sb.setCharAt(1, 'a');\r\n    sb.setCharAt(2, 'r');\r\n    assertThrows(IndexOutOfBoundsException.class, () -> sb.setCharAt(3, '!'));\r\n    assertEquals(\"bar\", sb.toString());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\TextStringBuilderTest.java",
  "methodName" : "testSetLength",
  "sourceCode" : "@Test\r\nvoid testSetLength() {\r\n    final TextStringBuilder sb = new TextStringBuilder();\r\n    sb.append(\"Hello\");\r\n    // shorten\r\n    sb.setLength(2);\r\n    assertEquals(\"He\", sb.toString());\r\n    // no change\r\n    sb.setLength(2);\r\n    assertEquals(\"He\", sb.toString());\r\n    // lengthen\r\n    sb.setLength(3);\r\n    assertEquals(\"He\\0\", sb.toString());\r\n    assertThrows(IndexOutOfBoundsException.class, () -> sb.setLength(-1));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\TextStringBuilderTest.java",
  "methodName" : "testSize",
  "sourceCode" : "@Test\r\nvoid testSize() {\r\n    final TextStringBuilder sb = new TextStringBuilder();\r\n    assertEquals(0, sb.size());\r\n    sb.append(\"Hello\");\r\n    assertEquals(5, sb.size());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\TextStringBuilderTest.java",
  "methodName" : "testStartsWith",
  "sourceCode" : "@Test\r\nvoid testStartsWith() {\r\n    final TextStringBuilder sb = new TextStringBuilder();\r\n    assertFalse(sb.startsWith(\"a\"));\r\n    assertFalse(sb.startsWith(null));\r\n    assertTrue(sb.startsWith(\"\"));\r\n    sb.append(\"abc\");\r\n    assertTrue(sb.startsWith(\"a\"));\r\n    assertTrue(sb.startsWith(\"ab\"));\r\n    assertTrue(sb.startsWith(\"abc\"));\r\n    assertFalse(sb.startsWith(\"cba\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\TextStringBuilderTest.java",
  "methodName" : "testSubSequenceIntInt",
  "sourceCode" : "@Test\r\nvoid testSubSequenceIntInt() {\r\n    final TextStringBuilder sb = new TextStringBuilder(\"hello goodbye\");\r\n    // Start index is negative\r\n    assertThrows(IndexOutOfBoundsException.class, () -> sb.subSequence(-1, 5));\r\n    // End index is negative\r\n    assertThrows(IndexOutOfBoundsException.class, () -> sb.subSequence(2, -1));\r\n    // End index greater than length()\r\n    assertThrows(IndexOutOfBoundsException.class, () -> sb.subSequence(2, sb.length() + 1));\r\n    // Start index greater then end index\r\n    assertThrows(IndexOutOfBoundsException.class, () -> sb.subSequence(3, 2));\r\n    // Normal cases\r\n    assertEquals(\"hello\", sb.subSequence(0, 5));\r\n    assertEquals(\"hello goodbye\".subSequence(0, 6), sb.subSequence(0, 6));\r\n    assertEquals(\"goodbye\", sb.subSequence(6, 13));\r\n    assertEquals(\"hello goodbye\".subSequence(6, 13), sb.subSequence(6, 13));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\TextStringBuilderTest.java",
  "methodName" : "testSubstringInt",
  "sourceCode" : "@Test\r\nvoid testSubstringInt() {\r\n    final TextStringBuilder sb = new TextStringBuilder(\"hello goodbye\");\r\n    assertEquals(\"goodbye\", sb.substring(6));\r\n    assertEquals(\"hello goodbye\".substring(6), sb.substring(6));\r\n    assertEquals(\"hello goodbye\", sb.substring(0));\r\n    assertEquals(\"hello goodbye\".substring(0), sb.substring(0));\r\n    assertThrows(IndexOutOfBoundsException.class, () -> sb.substring(-1));\r\n    assertThrows(IndexOutOfBoundsException.class, () -> sb.substring(15));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\TextStringBuilderTest.java",
  "methodName" : "testSubstringIntInt",
  "sourceCode" : "@Test\r\nvoid testSubstringIntInt() {\r\n    final TextStringBuilder sb = new TextStringBuilder(\"hello goodbye\");\r\n    assertEquals(\"hello\", sb.substring(0, 5));\r\n    assertEquals(\"hello goodbye\".substring(0, 6), sb.substring(0, 6));\r\n    assertEquals(\"goodbye\", sb.substring(6, 13));\r\n    assertEquals(\"hello goodbye\".substring(6, 13), sb.substring(6, 13));\r\n    assertEquals(\"goodbye\", sb.substring(6, 20));\r\n    assertThrows(IndexOutOfBoundsException.class, () -> sb.substring(-1, 5));\r\n    assertThrows(IndexOutOfBoundsException.class, () -> sb.substring(15, 20));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\TextStringBuilderTest.java",
  "methodName" : "testToCharArray",
  "sourceCode" : "@Test\r\nvoid testToCharArray() {\r\n    final TextStringBuilder sb = new TextStringBuilder();\r\n    assertEquals(0, sb.toCharArray().length);\r\n    char[] a = sb.toCharArray();\r\n    assertNotNull(a, \"toCharArray() result is null\");\r\n    assertEquals(0, a.length, \"toCharArray() result is too large\");\r\n    sb.append(\"junit\");\r\n    a = sb.toCharArray();\r\n    assertEquals(5, a.length, \"toCharArray() result incorrect length\");\r\n    assertArrayEquals(\"junit\".toCharArray(), a, \"toCharArray() result does not match\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\TextStringBuilderTest.java",
  "methodName" : "testToCharArrayIntInt",
  "sourceCode" : "@Test\r\nvoid testToCharArrayIntInt() {\r\n    final TextStringBuilder sb = new TextStringBuilder();\r\n    assertEquals(0, sb.toCharArray(0, 0).length);\r\n    sb.append(\"junit\");\r\n    // too large test\r\n    char[] a = sb.toCharArray(0, 20);\r\n    assertEquals(5, a.length, \"toCharArray(int,int) result incorrect length\");\r\n    assertArrayEquals(\"junit\".toCharArray(), a, \"toCharArray(int,int) result does not match\");\r\n    a = sb.toCharArray(0, 4);\r\n    assertEquals(4, a.length, \"toCharArray(int,int) result incorrect length\");\r\n    assertArrayEquals(\"juni\".toCharArray(), a, \"toCharArray(int,int) result does not match\");\r\n    a = sb.toCharArray(0, 4);\r\n    assertEquals(4, a.length, \"toCharArray(int,int) result incorrect length\");\r\n    assertArrayEquals(\"juni\".toCharArray(), a, \"toCharArray(int,int) result does not match\");\r\n    a = sb.toCharArray(0, 1);\r\n    assertNotNull(a, \"toCharArray(int,int) result is null\");\r\n    assertThrows(IndexOutOfBoundsException.class, () -> sb.toCharArray(-1, 5));\r\n    assertThrows(IndexOutOfBoundsException.class, () -> sb.toCharArray(6, 5));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\TextStringBuilderTest.java",
  "methodName" : "testToString",
  "sourceCode" : "@Test\r\nvoid testToString() {\r\n    final TextStringBuilder sb = new TextStringBuilder(\"abc\");\r\n    assertEquals(\"abc\", sb.toString());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\TextStringBuilderTest.java",
  "methodName" : "testToStringBuffer",
  "sourceCode" : "@Test\r\nvoid testToStringBuffer() {\r\n    final TextStringBuilder sb = new TextStringBuilder();\r\n    assertEquals(new StringBuffer().toString(), sb.toStringBuffer().toString());\r\n    sb.append(\"junit\");\r\n    assertEquals(new StringBuffer(\"junit\").toString(), sb.toStringBuffer().toString());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\TextStringBuilderTest.java",
  "methodName" : "testToStringBuilder",
  "sourceCode" : "@Test\r\nvoid testToStringBuilder() {\r\n    final TextStringBuilder sb = new TextStringBuilder();\r\n    assertEquals(new StringBuilder().toString(), sb.toStringBuilder().toString());\r\n    sb.append(\"junit\");\r\n    assertEquals(new StringBuilder(\"junit\").toString(), sb.toStringBuilder().toString());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\TextStringBuilderTest.java",
  "methodName" : "testTrim",
  "sourceCode" : "@Test\r\nvoid testTrim() {\r\n    final TextStringBuilder sb = new TextStringBuilder();\r\n    assertEquals(\"\", sb.reverse().toString());\r\n    sb.set(\" \\u0000 \");\r\n    assertEquals(\"\", sb.trim().toString());\r\n    sb.set(\" \\u0000 a b c\");\r\n    assertEquals(\"a b c\", sb.trim().toString());\r\n    sb.set(\"a b c \\u0000 \");\r\n    assertEquals(\"a b c\", sb.trim().toString());\r\n    sb.set(\" \\u0000 a b c \\u0000 \");\r\n    assertEquals(\"a b c\", sb.trim().toString());\r\n    sb.set(\"a b c\");\r\n    assertEquals(\"a b c\", sb.trim().toString());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\TextStringBuilderTest.java",
  "methodName" : "testWrap_CharArray",
  "sourceCode" : "@Test\r\nvoid testWrap_CharArray() {\r\n    assertThrows(NullPointerException.class, () -> TextStringBuilder.wrap(null));\r\n    //\r\n    final TextStringBuilder initEmpty = TextStringBuilder.wrap(ArrayUtils.EMPTY_CHAR_ARRAY);\r\n    assertEquals(0, initEmpty.size());\r\n    assertEquals(0, initEmpty.length());\r\n    initEmpty.append('a');\r\n    assertEquals(1, initEmpty.size());\r\n    assertEquals(1, initEmpty.length());\r\n    //\r\n    final char[] test = \"abc\".toCharArray();\r\n    final TextStringBuilder builder = TextStringBuilder.wrap(test);\r\n    assertArrayEquals(test, builder.getBuffer());\r\n    assertEquals(test.length, builder.length());\r\n    assertEquals(test.length, builder.size());\r\n    assertFalse(builder.isReallocated());\r\n    builder.ensureCapacity(builder.capacity() * 2);\r\n    assertFalse(Arrays.equals(test, builder.getBuffer()));\r\n    assertTrue(builder.isReallocated());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\TextStringBuilderTest.java",
  "methodName" : "testWrap_CharArray_Int_0",
  "sourceCode" : "@Test\r\nvoid testWrap_CharArray_Int_0() {\r\n    testWrap_CharArray_Int(\"abc\", 0);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\TextStringBuilderTest.java",
  "methodName" : "testWrap_CharArray_Int_1",
  "sourceCode" : "@Test\r\nvoid testWrap_CharArray_Int_1() {\r\n    testWrap_CharArray_Int(\"abc\", 1);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\TextStringBuilderTest.java",
  "methodName" : "testWrap_CharArray_Int_2",
  "sourceCode" : "@Test\r\nvoid testWrap_CharArray_Int_2() {\r\n    testWrap_CharArray_Int(\"abc\", 2);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\TextStringBuilderTest.java",
  "methodName" : "testWrap_CharArray_Int_3",
  "sourceCode" : "@Test\r\nvoid testWrap_CharArray_Int_3() {\r\n    testWrap_CharArray_Int(\"abc\", 3);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\TextStringBuilderTest.java",
  "methodName" : "testWrap_CharArray_Int_Empty_0",
  "sourceCode" : "@Test\r\nvoid testWrap_CharArray_Int_Empty_0() {\r\n    final TextStringBuilder initEmpty = TextStringBuilder.wrap(ArrayUtils.EMPTY_CHAR_ARRAY, 0);\r\n    assertEquals(0, initEmpty.size());\r\n    assertEquals(0, initEmpty.length());\r\n    initEmpty.append('a');\r\n    assertEquals(1, initEmpty.size());\r\n    assertEquals(1, initEmpty.length());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\TextStringBuilderTest.java",
  "methodName" : "testWrap_CharArray_Int_Exceptions",
  "sourceCode" : "@Test\r\nvoid testWrap_CharArray_Int_Exceptions() {\r\n    assertThrows(NullPointerException.class, () -> TextStringBuilder.wrap(null, 0));\r\n    assertThrows(IllegalArgumentException.class, () -> TextStringBuilder.wrap(\"abc\".toCharArray(), -1));\r\n    assertThrows(IllegalArgumentException.class, () -> TextStringBuilder.wrap(ArrayUtils.EMPTY_CHAR_ARRAY, 1));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\translate\\AggregateTranslatorTest.java",
  "methodName" : "testNonNull",
  "sourceCode" : "@Test\r\nvoid testNonNull() throws IOException {\r\n    final Map<CharSequence, CharSequence> oneTwoMap = new HashMap<>();\r\n    oneTwoMap.put(\"one\", \"two\");\r\n    final Map<CharSequence, CharSequence> threeFourMap = new HashMap<>();\r\n    threeFourMap.put(\"three\", \"four\");\r\n    final CharSequenceTranslator translator1 = new LookupTranslator(oneTwoMap);\r\n    final CharSequenceTranslator translator2 = new LookupTranslator(threeFourMap);\r\n    final AggregateTranslator subject = new AggregateTranslator(translator1, translator2);\r\n    final StringWriter out1 = new StringWriter();\r\n    final int result1 = subject.translate(new StringBuffer(\"one\"), 0, out1);\r\n    assertEquals(3, result1, \"Incorrect code point consumption\");\r\n    assertEquals(\"two\", out1.toString());\r\n    final StringWriter out2 = new StringWriter();\r\n    final int result2 = subject.translate(new StringBuffer(\"three\"), 0, out2);\r\n    assertEquals(5, result2, \"Incorrect code point consumption\");\r\n    assertEquals(\"four\", out2.toString(), \"Incorrect value\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\translate\\AggregateTranslatorTest.java",
  "methodName" : "testNullConstructor",
  "sourceCode" : "@Test\r\nvoid testNullConstructor() {\r\n    final String testString = \"foo\";\r\n    final AggregateTranslator subject = new AggregateTranslator((CharSequenceTranslator[]) null);\r\n    assertEquals(testString, subject.translate(testString));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\translate\\AggregateTranslatorTest.java",
  "methodName" : "testNullVarargConstructor",
  "sourceCode" : "@Test\r\nvoid testNullVarargConstructor() {\r\n    final String testString = \"foo\";\r\n    final AggregateTranslator subject = new AggregateTranslator((CharSequenceTranslator) null);\r\n    assertEquals(testString, subject.translate(testString));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\translate\\CodePointTranslatorTest.java",
  "methodName" : "testAboveReturningNonNull",
  "sourceCode" : "@Test\r\nvoid testAboveReturningNonNull() throws IOException {\r\n    final NumericEntityEscaper numericEntityEscaper = NumericEntityEscaper.above(0);\r\n    final UnicodeEscaper unicodeEscaper = new UnicodeEscaper();\r\n    final String string = unicodeEscaper.toUtf16Escape(0);\r\n    try (PipedReader pipedReader = new PipedReader();\r\n        PipedWriter pipedWriter = new PipedWriter(pipedReader)) {\r\n        assertEquals(1, numericEntityEscaper.translate(string, 0, pipedWriter));\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\translate\\CsvTranslatorsTest.java",
  "methodName" : "testCsvEscaperCommaTest",
  "sourceCode" : "@Test\r\nvoid testCsvEscaperCommaTest() throws IOException {\r\n    final CsvTranslators.CsvEscaper escaper = new CsvTranslators.CsvEscaper();\r\n    final Writer writer = new StringWriter();\r\n    final String input = \"hi,this,is,a,test\";\r\n    escaper.translateWhole(input, writer);\r\n    final String data = writer.toString();\r\n    assertEquals(\"\\\"hi,this,is,a,test\\\"\", data);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\translate\\CsvTranslatorsTest.java",
  "methodName" : "testCsvEscaperCRTest",
  "sourceCode" : "@Test\r\nvoid testCsvEscaperCRTest() throws IOException {\r\n    final CsvTranslators.CsvEscaper escaper = new CsvTranslators.CsvEscaper();\r\n    final Writer writer = new StringWriter();\r\n    final String input = \"hi,this,is,a,CR,test\" + String.valueOf(CharUtils.CR);\r\n    escaper.translateWhole(input, writer);\r\n    final String data = writer.toString();\r\n    assertEquals(\"\\\"hi,this,is,a,CR,test\" + String.valueOf(CharUtils.CR) + \"\\\"\", data);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\translate\\CsvTranslatorsTest.java",
  "methodName" : "testCsvEscaperLFTest",
  "sourceCode" : "@Test\r\nvoid testCsvEscaperLFTest() throws IOException {\r\n    final CsvTranslators.CsvEscaper escaper = new CsvTranslators.CsvEscaper();\r\n    final Writer writer = new StringWriter();\r\n    final String input = \"hi,this,is,a,LF,test\" + String.valueOf(CharUtils.LF);\r\n    escaper.translateWhole(input, writer);\r\n    final String data = writer.toString();\r\n    assertEquals(\"\\\"hi,this,is,a,LF,test\" + String.valueOf(CharUtils.LF) + \"\\\"\", data);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\translate\\CsvTranslatorsTest.java",
  "methodName" : "testCsvEscaperPlaneTextTest",
  "sourceCode" : "@Test\r\nvoid testCsvEscaperPlaneTextTest() throws IOException {\r\n    final CsvTranslators.CsvEscaper escaper = new CsvTranslators.CsvEscaper();\r\n    final Writer writer = new StringWriter();\r\n    final String input = \"hi this is just a plane text nothing to do with csv!\";\r\n    escaper.translateWhole(input, writer);\r\n    final String data = writer.toString();\r\n    assertEquals(data, input);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\translate\\CsvTranslatorsTest.java",
  "methodName" : "testCsvEscaperQuoteTest",
  "sourceCode" : "@Test\r\nvoid testCsvEscaperQuoteTest() throws IOException {\r\n    final CsvTranslators.CsvEscaper escaper = new CsvTranslators.CsvEscaper();\r\n    final Writer writer = new StringWriter();\r\n    final String input = \"hi,this,is,a,\\\"quote,test\";\r\n    escaper.translateWhole(input, writer);\r\n    final String data = writer.toString();\r\n    assertEquals(\"\\\"hi,this,is,a,\\\"\\\"quote,test\\\"\", data);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\translate\\CsvTranslatorsTest.java",
  "methodName" : "testCsvUnEscaperPlaneTextTest",
  "sourceCode" : "@Test\r\nvoid testCsvUnEscaperPlaneTextTest() throws IOException {\r\n    final CsvTranslators.CsvUnescaper escaper = new CsvTranslators.CsvUnescaper();\r\n    final Writer writer = new StringWriter();\r\n    final String input = \"hi,this,is,unescape,test\";\r\n    escaper.translateWhole(input, writer);\r\n    final String data = writer.toString();\r\n    assertEquals(input, data);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\translate\\CsvTranslatorsTest.java",
  "methodName" : "testCsvUnEscaperTest1",
  "sourceCode" : "@Test\r\nvoid testCsvUnEscaperTest1() throws IOException {\r\n    final CsvTranslators.CsvUnescaper escaper = new CsvTranslators.CsvUnescaper();\r\n    final Writer writer = new StringWriter();\r\n    final String input = \"\\\"hi,this,is,unescape,test\\\"\";\r\n    escaper.translateWhole(input, writer);\r\n    final String data = writer.toString();\r\n    assertEquals(\"hi,this,is,unescape,test\", data);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\translate\\CsvTranslatorsTest.java",
  "methodName" : "testCsvUnEscaperTest2",
  "sourceCode" : "@Test\r\nvoid testCsvUnEscaperTest2() throws IOException {\r\n    final CsvTranslators.CsvUnescaper escaper = new CsvTranslators.CsvUnescaper();\r\n    final Writer writer = new StringWriter();\r\n    final String input = \"\\\"hi,this,is,unescape,test\";\r\n    escaper.translateWhole(input, writer);\r\n    final String data = writer.toString();\r\n    assertEquals(input, data);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\translate\\CsvTranslatorsTest.java",
  "methodName" : "testCsvUnEscaperTest3",
  "sourceCode" : "@Test\r\nvoid testCsvUnEscaperTest3() throws IOException {\r\n    final CsvTranslators.CsvUnescaper escaper = new CsvTranslators.CsvUnescaper();\r\n    final Writer writer = new StringWriter();\r\n    final String input = \"hi,this,is,unescape,test\\\"\";\r\n    escaper.translateWhole(input, writer);\r\n    final String data = writer.toString();\r\n    assertEquals(input, data);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\translate\\CsvTranslatorsTest.java",
  "methodName" : "testCsvUnEscaperTest4",
  "sourceCode" : "@Test\r\nvoid testCsvUnEscaperTest4() throws IOException {\r\n    final CsvTranslators.CsvUnescaper escaper = new CsvTranslators.CsvUnescaper();\r\n    final Writer writer = new StringWriter();\r\n    final String input = \"\\\"hi,this,is,\\\"unescape,test\\\"\";\r\n    escaper.translateWhole(input, writer);\r\n    final String data = writer.toString();\r\n    assertEquals(\"hi,this,is,\\\"unescape,test\", data);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\translate\\EntityArraysTest.java",
  "methodName" : "testAposMap",
  "sourceCode" : "@Test\r\nvoid testAposMap() {\r\n    testEscapeVsUnescapeMaps(EntityArrays.APOS_ESCAPE, EntityArrays.APOS_UNESCAPE);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\translate\\EntityArraysTest.java",
  "methodName" : "testBasicMap",
  "sourceCode" : "@Test\r\nvoid testBasicMap() {\r\n    testEscapeVsUnescapeMaps(EntityArrays.BASIC_ESCAPE, EntityArrays.BASIC_UNESCAPE);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\translate\\EntityArraysTest.java",
  "methodName" : "testConstructorExists",
  "sourceCode" : "@Test\r\nvoid testConstructorExists() {\r\n    new EntityArrays();\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\translate\\EntityArraysTest.java",
  "methodName" : "testForDuplicatedDeclaredMapKeys",
  "sourceCode" : "// LANG-659, LANG-658 - avoid duplicate entries\r\n@Test\r\nvoid testForDuplicatedDeclaredMapKeys() throws Exception {\r\n    final String packageDirectory = EntityArraysTest.class.getPackage().getName().replace(\".\", \"/\");\r\n    try (BufferedReader br = new BufferedReader(new FileReader(\"src/main/java/\" + packageDirectory + \"/EntityArrays.java\"))) {\r\n        String line;\r\n        int mapDeclarationCounter = 0;\r\n        while ((line = br.readLine()) != null) {\r\n            // Start with map declaration and count put lines\r\n            if (line.contains(\"new HashMap<>();\")) {\r\n                mapDeclarationCounter = 0;\r\n            } else if (line.contains(\".put(\")) {\r\n                mapDeclarationCounter++;\r\n            } else if (line.contains(\"Collections.unmodifiableMap(initialMap);\")) {\r\n                final String mapVariableName = line.split(\"=\")[0].trim();\r\n                // This is test code\r\n                @SuppressWarnings(\"unchecked\")\r\n                final Map<String, String> mapValue = (Map<String, String>) EntityArrays.class.getDeclaredField(mapVariableName).get(EntityArrays.class);\r\n                // Validate that we are not inserting into the same key twice in the map declaration. If this,\r\n                // indeed was the case the keySet().size() would be smaller than the number of put() statements\r\n                assertEquals(mapDeclarationCounter, mapValue.size());\r\n            }\r\n        }\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\translate\\EntityArraysTest.java",
  "methodName" : "testForDuplicateDeclaredMapValuesAposMap",
  "sourceCode" : "@Test\r\nvoid testForDuplicateDeclaredMapValuesAposMap() {\r\n    assertEquals(EntityArrays.APOS_UNESCAPE.size(), EntityArrays.APOS_ESCAPE.size());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\translate\\EntityArraysTest.java",
  "methodName" : "testForDuplicateDeclaredMapValuesBasicMap",
  "sourceCode" : "@Test\r\nvoid testForDuplicateDeclaredMapValuesBasicMap() {\r\n    assertEquals(EntityArrays.BASIC_ESCAPE.size(), EntityArrays.BASIC_UNESCAPE.size());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\translate\\EntityArraysTest.java",
  "methodName" : "testForDuplicateDeclaredMapValuesHtml40ExtendedMap",
  "sourceCode" : "@Test\r\nvoid testForDuplicateDeclaredMapValuesHtml40ExtendedMap() {\r\n    assertEquals(EntityArrays.HTML40_EXTENDED_ESCAPE.size(), EntityArrays.HTML40_EXTENDED_UNESCAPE.size());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\translate\\EntityArraysTest.java",
  "methodName" : "testForDuplicateDeclaredMapValuesISO8859Map",
  "sourceCode" : "@Test\r\nvoid testForDuplicateDeclaredMapValuesISO8859Map() {\r\n    assertEquals(EntityArrays.ISO8859_1_ESCAPE.size(), EntityArrays.ISO8859_1_UNESCAPE.size());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\translate\\EntityArraysTest.java",
  "methodName" : "testForDuplicateDeclaredMapValuesJavaCtrlCharsMap",
  "sourceCode" : "@Test\r\nvoid testForDuplicateDeclaredMapValuesJavaCtrlCharsMap() {\r\n    assertEquals(EntityArrays.JAVA_CTRL_CHARS_ESCAPE.size(), EntityArrays.JAVA_CTRL_CHARS_UNESCAPE.size());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\translate\\EntityArraysTest.java",
  "methodName" : "testHtml40ExtendedMap",
  "sourceCode" : "@Test\r\nvoid testHtml40ExtendedMap() {\r\n    testEscapeVsUnescapeMaps(EntityArrays.HTML40_EXTENDED_ESCAPE, EntityArrays.HTML40_EXTENDED_UNESCAPE);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\translate\\EntityArraysTest.java",
  "methodName" : "testISO8859Map",
  "sourceCode" : "@Test\r\nvoid testISO8859Map() {\r\n    testEscapeVsUnescapeMaps(EntityArrays.ISO8859_1_ESCAPE, EntityArrays.ISO8859_1_UNESCAPE);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\translate\\EntityArraysTest.java",
  "methodName" : "testJavaCtrlCharsMap",
  "sourceCode" : "@Test\r\nvoid testJavaCtrlCharsMap() {\r\n    testEscapeVsUnescapeMaps(EntityArrays.JAVA_CTRL_CHARS_ESCAPE, EntityArrays.JAVA_CTRL_CHARS_UNESCAPE);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\translate\\JavaUnicodeEscaperTest.java",
  "methodName" : "testAbove",
  "sourceCode" : "@Test\r\nvoid testAbove() {\r\n    final JavaUnicodeEscaper jue = JavaUnicodeEscaper.above('F');\r\n    final String input = \"ADFGZ\";\r\n    final String result = jue.translate(input);\r\n    assertEquals(\"ADF\\\\u0047\\\\u005A\", result, \"Failed to escape Unicode characters via the above method\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\translate\\JavaUnicodeEscaperTest.java",
  "methodName" : "testBelow",
  "sourceCode" : "@Test\r\nvoid testBelow() {\r\n    final JavaUnicodeEscaper jue = JavaUnicodeEscaper.below('F');\r\n    final String input = \"ADFGZ\";\r\n    final String result = jue.translate(input);\r\n    assertEquals(\"\\\\u0041\\\\u0044FGZ\", result, \"Failed to escape Unicode characters via the below method\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\translate\\JavaUnicodeEscaperTest.java",
  "methodName" : "testBetween",
  "sourceCode" : "@Test\r\nvoid testBetween() {\r\n    final JavaUnicodeEscaper jue = JavaUnicodeEscaper.between('F', 'L');\r\n    final String input = \"ADFGZ\";\r\n    final String result = jue.translate(input);\r\n    assertEquals(\"AD\\\\u0046\\\\u0047Z\", result, \"Failed to escape Unicode characters via the between method\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\translate\\JavaUnicodeEscaperTest.java",
  "methodName" : "testToUtf16Escape",
  "sourceCode" : "@Test\r\nvoid testToUtf16Escape() {\r\n    final JavaUnicodeEscaper jue = JavaUnicodeEscaper.below('F');\r\n    // According to https://en.wikipedia.org/wiki/UTF-16#Code_points_U.2B10000..U.2B10FFFF,\r\n    // Character ?, U+24B62, Binary Code Point 0010 0100 1011 0110 0010,\r\n    // Binary UTF-167 1101 1000 0101 0010 1101 1111 0110 0010, UTF-16 Hex Code Units D852 DF62\r\n    final String encoding = jue.toUtf16Escape(Integer.parseInt(\"024B62\", 16));\r\n    assertEquals(\"\\\\uD852\\\\uDF62\", encoding);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\translate\\LookupTranslatorTest.java",
  "methodName" : "testBasicLookup",
  "sourceCode" : "@Test\r\nvoid testBasicLookup() throws IOException {\r\n    final Map<CharSequence, CharSequence> translatorMap = new HashMap<>();\r\n    translatorMap.put(\"one\", \"two\");\r\n    final LookupTranslator lt = new LookupTranslator(translatorMap);\r\n    final StringWriter out = new StringWriter();\r\n    final int result = lt.translate(\"one\", 0, out);\r\n    assertEquals(3, result, \"Incorrect code point consumption\");\r\n    assertEquals(\"two\", out.toString(), \"Incorrect value\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\translate\\LookupTranslatorTest.java",
  "methodName" : "testFailsToCreateLookupTranslatorThrowsInvalidParameterException",
  "sourceCode" : "@Test\r\nvoid testFailsToCreateLookupTranslatorThrowsInvalidParameterException() {\r\n    assertThrowsExactly(NullPointerException.class, () -> new LookupTranslator(null));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\translate\\LookupTranslatorTest.java",
  "methodName" : "testLang882",
  "sourceCode" : "// Tests: https://issues.apache.org/jira/browse/LANG-882\r\n@Test\r\nvoid testLang882() throws IOException {\r\n    final Map<CharSequence, CharSequence> translatorMap = new HashMap<>();\r\n    translatorMap.put(new StringBuffer(\"one\"), new StringBuffer(\"two\"));\r\n    final LookupTranslator lt = new LookupTranslator(translatorMap);\r\n    final StringWriter out = new StringWriter();\r\n    final int result = lt.translate(new StringBuffer(\"one\"), 0, out);\r\n    assertEquals(3, result, \"Incorrect code point consumption\");\r\n    assertEquals(\"two\", out.toString(), \"Incorrect value\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\translate\\LookupTranslatorTest.java",
  "methodName" : "testTranslateSupplementaryCharacter",
  "sourceCode" : "@Test\r\nvoid testTranslateSupplementaryCharacter() {\r\n    /* Key: string with Mathematical double-struck capital A (U+1D538) */\r\n    final String symbol = new StringBuilder().appendCodePoint(0x1D538).toString();\r\n    /* Map U+1D538 to \"A\" */\r\n    final Map<CharSequence, CharSequence> map = new HashMap<>();\r\n    map.put(symbol, \"A\");\r\n    final LookupTranslator translator = new LookupTranslator(map);\r\n    final String translated = translator.translate(symbol + \"=A\");\r\n    /* we should get \"A=A\". */\r\n    assertEquals(\"A=A\", translated, \"Incorrect value\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\translate\\NumericEntityEscaperTest.java",
  "methodName" : "testAbove",
  "sourceCode" : "@Test\r\nvoid testAbove() {\r\n    final NumericEntityEscaper nee = NumericEntityEscaper.above('F');\r\n    final String input = \"ADFGZ\";\r\n    final String result = nee.translate(input);\r\n    assertEquals(\"ADF&#71;&#90;\", result, \"Failed to escape numeric entities via the above method\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\translate\\NumericEntityEscaperTest.java",
  "methodName" : "testBelow",
  "sourceCode" : "@Test\r\nvoid testBelow() {\r\n    final NumericEntityEscaper nee = NumericEntityEscaper.below('F');\r\n    final String input = \"ADFGZ\";\r\n    final String result = nee.translate(input);\r\n    assertEquals(\"&#65;&#68;FGZ\", result, \"Failed to escape numeric entities via the below method\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\translate\\NumericEntityEscaperTest.java",
  "methodName" : "testBetween",
  "sourceCode" : "@Test\r\nvoid testBetween() {\r\n    final NumericEntityEscaper nee = NumericEntityEscaper.between('F', 'L');\r\n    final String input = \"ADFGZ\";\r\n    final String result = nee.translate(input);\r\n    assertEquals(\"AD&#70;&#71;Z\", result, \"Failed to escape numeric entities via the between method\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\translate\\NumericEntityEscaperTest.java",
  "methodName" : "testSupplementary",
  "sourceCode" : "/**\r\n * See LANG-617\r\n */\r\n@Test\r\nvoid testSupplementary() {\r\n    final NumericEntityEscaper nee = new NumericEntityEscaper();\r\n    final String input = \"\\uD803\\uDC22\";\r\n    final String expected = \"&#68642;\";\r\n    final String result = nee.translate(input);\r\n    assertEquals(expected, result, \"Failed to escape numeric entities supplementary characters\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\translate\\NumericEntityUnescaperTest.java",
  "methodName" : "testCreatesNumericEntityUnescaperOne",
  "sourceCode" : "@Test\r\nvoid testCreatesNumericEntityUnescaperOne() {\r\n    final NumericEntityUnescaper.OPTION[] numericEntityUnescaperOPTIONArray = {};\r\n    final NumericEntityUnescaper numericEntityUnescaper = new NumericEntityUnescaper(numericEntityUnescaperOPTIONArray);\r\n    assertEquals(\"2|y|O7y`&#uVWj\", numericEntityUnescaper.translate(\"2|y|O7y`&#uVWj\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\translate\\NumericEntityUnescaperTest.java",
  "methodName" : "testCreatesNumericEntityUnescaperTwo",
  "sourceCode" : "@Test\r\nvoid testCreatesNumericEntityUnescaperTwo() {\r\n    final NumericEntityUnescaper.OPTION[] numericEntityUnescaperOPTIONArray = {};\r\n    final NumericEntityUnescaper numericEntityUnescaper = new NumericEntityUnescaper(numericEntityUnescaperOPTIONArray);\r\n    assertEquals(\"Ws2v8|O=7NR&#cB\", numericEntityUnescaper.translate(\"Ws2v8|O=7NR&#cB\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\translate\\NumericEntityUnescaperTest.java",
  "methodName" : "testOutOfBounds",
  "sourceCode" : "@Test\r\nvoid testOutOfBounds() {\r\n    final NumericEntityUnescaper neu = new NumericEntityUnescaper();\r\n    assertEquals(\"Test &\", neu.translate(\"Test &\"), \"Failed to ignore when last character is &\");\r\n    assertEquals(\"Test &#\", neu.translate(\"Test &#\"), \"Failed to ignore when last character is &\");\r\n    assertEquals(\"Test &#x\", neu.translate(\"Test &#x\"), \"Failed to ignore when last character is &\");\r\n    assertEquals(\"Test &#X\", neu.translate(\"Test &#X\"), \"Failed to ignore when last character is &\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\translate\\NumericEntityUnescaperTest.java",
  "methodName" : "testSupplementaryUnescaping",
  "sourceCode" : "@Test\r\nvoid testSupplementaryUnescaping() {\r\n    final NumericEntityUnescaper neu = new NumericEntityUnescaper();\r\n    final String input = \"&#68642;\";\r\n    final String expected = \"\\uD803\\uDC22\";\r\n    final String result = neu.translate(input);\r\n    assertEquals(expected, result, \"Failed to unescape numeric entities supplementary characters\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\translate\\NumericEntityUnescaperTest.java",
  "methodName" : "testUnfinishedEntity",
  "sourceCode" : "@Test\r\nvoid testUnfinishedEntity() {\r\n    // parse it\r\n    NumericEntityUnescaper neu = new NumericEntityUnescaper(NumericEntityUnescaper.OPTION.semiColonOptional);\r\n    String input = \"Test &#x30 not test\";\r\n    String expected = \"Test \\u0030 not test\";\r\n    String result = neu.translate(input);\r\n    assertEquals(expected, result, \"Failed to support unfinished entities (i.e. missing semicolon)\");\r\n    // ignore it\r\n    neu = new NumericEntityUnescaper();\r\n    input = \"Test &#x30 not test\";\r\n    expected = input;\r\n    result = neu.translate(input);\r\n    assertEquals(expected, result, \"Failed to ignore unfinished entities (i.e. missing semicolon)\");\r\n    // fail it\r\n    neu = new NumericEntityUnescaper(NumericEntityUnescaper.OPTION.errorIfNoSemiColon);\r\n    input = \"Test &#x30 not test\";\r\n    try {\r\n        result = neu.translate(input);\r\n        fail(\"IllegalArgumentException expected\");\r\n    } catch (final IllegalArgumentException iae) {\r\n        // expected\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\translate\\OctalUnescaperTest.java",
  "methodName" : "testBetween",
  "sourceCode" : "@Test\r\nvoid testBetween() {\r\n    // .between(\"1\", \"377\");\r\n    final OctalUnescaper oue = new OctalUnescaper();\r\n    String input = \"\\\\45\";\r\n    String result = oue.translate(input);\r\n    assertEquals(\"\\45\", result, \"Failed to unescape octal characters via the between method\");\r\n    input = \"\\\\377\";\r\n    result = oue.translate(input);\r\n    assertEquals(\"\\377\", result, \"Failed to unescape octal characters via the between method\");\r\n    input = \"\\\\377 and\";\r\n    result = oue.translate(input);\r\n    assertEquals(\"\\377 and\", result, \"Failed to unescape octal characters via the between method\");\r\n    input = \"\\\\378 and\";\r\n    result = oue.translate(input);\r\n    assertEquals(\"\\37\" + \"8 and\", result, \"Failed to unescape octal characters via the between method\");\r\n    input = \"\\\\378\";\r\n    result = oue.translate(input);\r\n    assertEquals(\"\\37\" + \"8\", result, \"Failed to unescape octal characters via the between method\");\r\n    input = \"\\\\1\";\r\n    result = oue.translate(input);\r\n    assertEquals(\"\\1\", result, \"Failed to unescape octal characters via the between method\");\r\n    input = \"\\\\036\";\r\n    result = oue.translate(input);\r\n    assertEquals(\"\\036\", result, \"Failed to unescape octal characters via the between method\");\r\n    input = \"\\\\0365\";\r\n    result = oue.translate(input);\r\n    assertEquals(\"\\036\" + \"5\", result, \"Failed to unescape octal characters via the between method\");\r\n    input = \"\\\\003\";\r\n    result = oue.translate(input);\r\n    assertEquals(\"\\003\", result, \"Failed to unescape octal characters via the between method\");\r\n    input = \"\\\\0003\";\r\n    result = oue.translate(input);\r\n    assertEquals(\"\\000\" + \"3\", result, \"Failed to unescape octal characters via the between method\");\r\n    input = \"\\\\279\";\r\n    result = oue.translate(input);\r\n    assertEquals(\"\\279\", result, \"Failed to unescape octal characters via the between method\");\r\n    input = \"\\\\999\";\r\n    result = oue.translate(input);\r\n    assertEquals(\"\\\\999\", result, \"Failed to ignore an out of range octal character via the between method\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\translate\\SinglePassTranslatorTest.java",
  "methodName" : "testCodePointsAreReturned",
  "sourceCode" : "@Test\r\nvoid testCodePointsAreReturned() throws Exception {\r\n    assertEquals(0, dummyTranslator.translate(\"\", 0, out));\r\n    assertEquals(3, dummyTranslator.translate(\"abc\", 0, out));\r\n    assertEquals(7, dummyTranslator.translate(\"abcdefg\", 0, out));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\translate\\SinglePassTranslatorTest.java",
  "methodName" : "testIndexIsValidated",
  "sourceCode" : "@Test\r\nvoid testIndexIsValidated() {\r\n    assertThrows(IllegalArgumentException.class, () -> dummyTranslator.translate(\"abc\", 1, out));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\translate\\SinglePassTranslatorTest.java",
  "methodName" : "testTranslateThrowsIllegalArgumentException",
  "sourceCode" : "@Test\r\nvoid testTranslateThrowsIllegalArgumentException() {\r\n    assertThrows(IllegalArgumentException.class, () -> dummyTranslator.translate(\"(,Fk\", 647, null));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\translate\\UnicodeEscaperTest.java",
  "methodName" : "testAbove",
  "sourceCode" : "@Test\r\nvoid testAbove() {\r\n    final UnicodeEscaper escaper = UnicodeEscaper.above('F');\r\n    final String input = \"ADFGZ\";\r\n    final String result = escaper.translate(input);\r\n    assertEquals(\"ADF\\\\u0047\\\\u005A\", result, \"Failed to escape Unicode characters via the above method\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\translate\\UnicodeEscaperTest.java",
  "methodName" : "testBelow",
  "sourceCode" : "@Test\r\nvoid testBelow() {\r\n    final UnicodeEscaper escaper = UnicodeEscaper.below('F');\r\n    final String input = \"ADFGZ\";\r\n    final String result = escaper.translate(input);\r\n    assertEquals(\"\\\\u0041\\\\u0044FGZ\", result, \"Failed to escape Unicode characters via the below method\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\translate\\UnicodeEscaperTest.java",
  "methodName" : "testBetween",
  "sourceCode" : "@Test\r\nvoid testBetween() {\r\n    final UnicodeEscaper escaper = UnicodeEscaper.between('F', 'L');\r\n    final String input = \"ADFGZ\";\r\n    final String result = escaper.translate(input);\r\n    assertEquals(\"AD\\\\u0046\\\\u0047Z\", result, \"Failed to escape Unicode characters via the between method\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\translate\\UnicodeUnescaperTest.java",
  "methodName" : "testLessThanFour",
  "sourceCode" : "@Test\r\nvoid testLessThanFour() {\r\n    final UnicodeUnescaper escaper = new UnicodeUnescaper();\r\n    final String input = \"\\\\0047\\\\u006\";\r\n    assertThrows(IllegalArgumentException.class, () -> escaper.translate(input));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\translate\\UnicodeUnescaperTest.java",
  "methodName" : "testUPlus",
  "sourceCode" : "// Requested in LANG-507\r\n@Test\r\nvoid testUPlus() {\r\n    final UnicodeUnescaper escaper = new UnicodeUnescaper();\r\n    final String input = \"\\\\u+0047\";\r\n    assertEquals(\"G\", escaper.translate(input), \"Failed to unescape Unicode characters with 'u+' notation\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\translate\\UnicodeUnescaperTest.java",
  "methodName" : "testUuuuu",
  "sourceCode" : "@Test\r\nvoid testUuuuu() {\r\n    final UnicodeUnescaper escaper = new UnicodeUnescaper();\r\n    final String input = \"\\\\uuuuuuuu0047\";\r\n    final String result = escaper.translate(input);\r\n    assertEquals(\"G\", result, \"Failed to unescape Unicode characters with many 'u' characters\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\translate\\UnicodeUnpairedSurrogateRemoverTest.java",
  "methodName" : "testInvalidCharacters",
  "sourceCode" : "@Test\r\nvoid testInvalidCharacters() throws IOException {\r\n    assertTrue(subject.translate(0xd800, writer));\r\n    assertTrue(subject.translate(0xdfff, writer));\r\n    assertEquals(0, writer.size());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\translate\\UnicodeUnpairedSurrogateRemoverTest.java",
  "methodName" : "testValidCharacters",
  "sourceCode" : "@Test\r\nvoid testValidCharacters() throws IOException {\r\n    assertFalse(subject.translate(0xd7ff, writer));\r\n    assertFalse(subject.translate(0xe000, writer));\r\n    assertEquals(0, writer.size());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\WordUtilsTest.java",
  "methodName" : "testAbbreviateForLowerThanMinusOneValues",
  "sourceCode" : "@Test\r\nvoid testAbbreviateForLowerThanMinusOneValues() {\r\n    assertThrows(IllegalArgumentException.class, () -> WordUtils.abbreviate(\"01 23 45 67 89\", 9, -10, null));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\WordUtilsTest.java",
  "methodName" : "testAbbreviateForLowerValue",
  "sourceCode" : "@Test\r\nvoid testAbbreviateForLowerValue() {\r\n    assertEquals(\"012\", WordUtils.abbreviate(\"012 3456789\", 0, 5, null));\r\n    assertEquals(\"01234\", WordUtils.abbreviate(\"01234 56789\", 5, 10, null));\r\n    assertEquals(\"01 23 45 67\", WordUtils.abbreviate(\"01 23 45 67 89\", 9, -1, null));\r\n    assertEquals(\"01 23 45 6\", WordUtils.abbreviate(\"01 23 45 67 89\", 9, 10, null));\r\n    assertEquals(\"0123456789\", WordUtils.abbreviate(\"0123456789\", 15, 20, null));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\WordUtilsTest.java",
  "methodName" : "testAbbreviateForLowerValueAndAppendedString",
  "sourceCode" : "@Test\r\nvoid testAbbreviateForLowerValueAndAppendedString() {\r\n    assertEquals(\"012\", WordUtils.abbreviate(\"012 3456789\", 0, 5, null));\r\n    assertEquals(\"01234-\", WordUtils.abbreviate(\"01234 56789\", 5, 10, \"-\"));\r\n    assertEquals(\"01 23 45 67abc\", WordUtils.abbreviate(\"01 23 45 67 89\", 9, -1, \"abc\"));\r\n    assertEquals(\"01 23 45 6\", WordUtils.abbreviate(\"01 23 45 67 89\", 9, 10, \"\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\WordUtilsTest.java",
  "methodName" : "testAbbreviateForNullAndEmptyString",
  "sourceCode" : "@Test\r\nvoid testAbbreviateForNullAndEmptyString() {\r\n    assertNull(WordUtils.abbreviate(null, 1, -1, \"\"));\r\n    assertEquals(StringUtils.EMPTY, WordUtils.abbreviate(\"\", 1, -1, \"\"));\r\n    assertEquals(\"\", WordUtils.abbreviate(\"0123456790\", 0, 0, \"\"));\r\n    assertEquals(\"\", WordUtils.abbreviate(\" 0123456790\", 0, -1, \"\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\WordUtilsTest.java",
  "methodName" : "testAbbreviateForUpperLimit",
  "sourceCode" : "@Test\r\nvoid testAbbreviateForUpperLimit() {\r\n    assertEquals(\"01234\", WordUtils.abbreviate(\"0123456789\", 0, 5, \"\"));\r\n    assertEquals(\"012\", WordUtils.abbreviate(\"012 3456789\", 2, 5, \"\"));\r\n    assertEquals(\"0123456789\", WordUtils.abbreviate(\"0123456789\", 0, -1, \"\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\WordUtilsTest.java",
  "methodName" : "testAbbreviateForUpperLimitAndAppendedString",
  "sourceCode" : "@Test\r\nvoid testAbbreviateForUpperLimitAndAppendedString() {\r\n    assertEquals(\"01234-\", WordUtils.abbreviate(\"0123456789\", 0, 5, \"-\"));\r\n    assertEquals(\"012\", WordUtils.abbreviate(\"012 3456789\", 2, 5, null));\r\n    assertEquals(\"0123456789\", WordUtils.abbreviate(\"0123456789\", 0, -1, \"\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\WordUtilsTest.java",
  "methodName" : "testAbbreviateUpperLessThanLowerValues",
  "sourceCode" : "@Test\r\nvoid testAbbreviateUpperLessThanLowerValues() {\r\n    assertThrows(IllegalArgumentException.class, () -> WordUtils.abbreviate(\"0123456789\", 5, 2, \"\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\WordUtilsTest.java",
  "methodName" : "testCapitalize_String",
  "sourceCode" : "@Test\r\nvoid testCapitalize_String() {\r\n    assertNull(WordUtils.capitalize(null));\r\n    assertEquals(\"\", WordUtils.capitalize(\"\"));\r\n    assertEquals(\"  \", WordUtils.capitalize(\"  \"));\r\n    assertEquals(\"I\", WordUtils.capitalize(\"I\"));\r\n    assertEquals(\"I\", WordUtils.capitalize(\"i\"));\r\n    assertEquals(\"I Am Here 123\", WordUtils.capitalize(\"i am here 123\"));\r\n    assertEquals(\"I Am Here 123\", WordUtils.capitalize(\"I Am Here 123\"));\r\n    assertEquals(\"I Am HERE 123\", WordUtils.capitalize(\"i am HERE 123\"));\r\n    assertEquals(\"I AM HERE 123\", WordUtils.capitalize(\"I AM HERE 123\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\WordUtilsTest.java",
  "methodName" : "testCapitalizeFully_String",
  "sourceCode" : "@Test\r\nvoid testCapitalizeFully_String() {\r\n    assertNull(WordUtils.capitalizeFully(null));\r\n    assertEquals(\"\", WordUtils.capitalizeFully(\"\"));\r\n    assertEquals(\"  \", WordUtils.capitalizeFully(\"  \"));\r\n    assertEquals(\"I\", WordUtils.capitalizeFully(\"I\"));\r\n    assertEquals(\"I\", WordUtils.capitalizeFully(\"i\"));\r\n    assertEquals(\"I Am Here 123\", WordUtils.capitalizeFully(\"i am here 123\"));\r\n    assertEquals(\"I Am Here 123\", WordUtils.capitalizeFully(\"I Am Here 123\"));\r\n    assertEquals(\"I Am Here 123\", WordUtils.capitalizeFully(\"i am HERE 123\"));\r\n    assertEquals(\"I Am Here 123\", WordUtils.capitalizeFully(\"I AM HERE 123\"));\r\n    // single word\r\n    assertEquals(\"Alphabet\", WordUtils.capitalizeFully(\"alphabet\"));\r\n    assertEquals(\"A\\tB\\nC D\", WordUtils.capitalizeFully(\"a\\tb\\nc d\"));\r\n    assertEquals(\"And \\tBut \\nCleat  Dome\", WordUtils.capitalizeFully(\"and \\tbut \\ncleat  dome\"));\r\n    // All whitespace\r\n    assertEquals(WHITESPACE, WordUtils.capitalizeFully(WHITESPACE));\r\n    assertEquals(\"A\" + WHITESPACE + \"B\", WordUtils.capitalizeFully(\"a\" + WHITESPACE + \"b\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\WordUtilsTest.java",
  "methodName" : "testCapitalizeFully_Text88",
  "sourceCode" : "@Test\r\nvoid testCapitalizeFully_Text88() {\r\n    assertEquals(\"I am fine now\", WordUtils.capitalizeFully(\"i am fine now\", new char[] {}));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\WordUtilsTest.java",
  "methodName" : "testCapitalizeFullyWithDelimiters_String",
  "sourceCode" : "@Test\r\nvoid testCapitalizeFullyWithDelimiters_String() {\r\n    assertNull(WordUtils.capitalizeFully(null, null));\r\n    assertEquals(\"\", WordUtils.capitalizeFully(\"\", ArrayUtils.EMPTY_CHAR_ARRAY));\r\n    assertEquals(\"  \", WordUtils.capitalizeFully(\"  \", ArrayUtils.EMPTY_CHAR_ARRAY));\r\n    char[] chars = { '-', '+', ' ', '@' };\r\n    assertEquals(\"I\", WordUtils.capitalizeFully(\"I\", chars));\r\n    assertEquals(\"I\", WordUtils.capitalizeFully(\"i\", chars));\r\n    assertEquals(\"I-Am Here+123\", WordUtils.capitalizeFully(\"i-am here+123\", chars));\r\n    assertEquals(\"I Am+Here-123\", WordUtils.capitalizeFully(\"I Am+Here-123\", chars));\r\n    assertEquals(\"I+Am-Here 123\", WordUtils.capitalizeFully(\"i+am-HERE 123\", chars));\r\n    assertEquals(\"I-Am Here+123\", WordUtils.capitalizeFully(\"I-AM HERE+123\", chars));\r\n    chars = new char[] { '.' };\r\n    assertEquals(\"I am.Fine\", WordUtils.capitalizeFully(\"i aM.fine\", chars));\r\n    assertEquals(\"I Am.fine\", WordUtils.capitalizeFully(\"i am.fine\", null));\r\n    // single word\r\n    assertEquals(\"Alphabet\", WordUtils.capitalizeFully(\"alphabet\", null));\r\n    // no matching delim\r\n    assertEquals(\"Alphabet\", WordUtils.capitalizeFully(\"alphabet\", new char[] { '!' }));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\WordUtilsTest.java",
  "methodName" : "testCapitalizeWithDelimiters_String",
  "sourceCode" : "@Test\r\nvoid testCapitalizeWithDelimiters_String() {\r\n    assertNull(WordUtils.capitalize(null, null));\r\n    assertEquals(\"\", WordUtils.capitalize(\"\", ArrayUtils.EMPTY_CHAR_ARRAY));\r\n    assertEquals(\"  \", WordUtils.capitalize(\"  \", ArrayUtils.EMPTY_CHAR_ARRAY));\r\n    char[] chars = { '-', '+', ' ', '@' };\r\n    assertEquals(\"I\", WordUtils.capitalize(\"I\", chars));\r\n    assertEquals(\"I\", WordUtils.capitalize(\"i\", chars));\r\n    assertEquals(\"I-Am Here+123\", WordUtils.capitalize(\"i-am here+123\", chars));\r\n    assertEquals(\"I Am+Here-123\", WordUtils.capitalize(\"I Am+Here-123\", chars));\r\n    assertEquals(\"I+Am-HERE 123\", WordUtils.capitalize(\"i+am-HERE 123\", chars));\r\n    assertEquals(\"I-AM HERE+123\", WordUtils.capitalize(\"I-AM HERE+123\", chars));\r\n    chars = new char[] { '.' };\r\n    assertEquals(\"I aM.Fine\", WordUtils.capitalize(\"i aM.fine\", chars));\r\n    assertEquals(\"I Am.fine\", WordUtils.capitalize(\"i am.fine\", null));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\WordUtilsTest.java",
  "methodName" : "testConstructor",
  "sourceCode" : "@Test\r\nvoid testConstructor() {\r\n    assertNotNull(new WordUtils());\r\n    final Constructor<?>[] cons = WordUtils.class.getDeclaredConstructors();\r\n    assertEquals(1, cons.length);\r\n    assertTrue(Modifier.isPublic(cons[0].getModifiers()));\r\n    assertTrue(Modifier.isPublic(WordUtils.class.getModifiers()));\r\n    assertFalse(Modifier.isFinal(WordUtils.class.getModifiers()));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\WordUtilsTest.java",
  "methodName" : "testContainsAllWords_StringString",
  "sourceCode" : "@Test\r\nvoid testContainsAllWords_StringString() {\r\n    assertFalse(WordUtils.containsAllWords(null, (String) null));\r\n    assertFalse(WordUtils.containsAllWords(null, \"\"));\r\n    assertFalse(WordUtils.containsAllWords(null, \"ab\"));\r\n    assertFalse(WordUtils.containsAllWords(\"\", (String) null));\r\n    assertFalse(WordUtils.containsAllWords(\"\", \"\"));\r\n    assertFalse(WordUtils.containsAllWords(\"\", \"ab\"));\r\n    assertFalse(WordUtils.containsAllWords(\"foo\", (String) null));\r\n    assertFalse(WordUtils.containsAllWords(\"bar\", \"\"));\r\n    assertFalse(WordUtils.containsAllWords(\"zzabyycdxx\", \"by\"));\r\n    assertTrue(WordUtils.containsAllWords(\"lorem ipsum dolor sit amet\", \"ipsum\", \"lorem\", \"dolor\"));\r\n    assertFalse(WordUtils.containsAllWords(\"lorem ipsum dolor sit amet\", \"ipsum\", null, \"lorem\", \"dolor\"));\r\n    assertFalse(WordUtils.containsAllWords(\"lorem ipsum null dolor sit amet\", \"ipsum\", null, \"lorem\", \"dolor\"));\r\n    assertFalse(WordUtils.containsAllWords(\"ab\", \"b\"));\r\n    assertFalse(WordUtils.containsAllWords(\"ab\", \"z\"));\r\n    assertFalse(WordUtils.containsAllWords(\"ab\", \"[\"));\r\n    assertFalse(WordUtils.containsAllWords(\"ab\", \"]\"));\r\n    assertFalse(WordUtils.containsAllWords(\"ab\", \"*\"));\r\n    assertTrue(WordUtils.containsAllWords(\"ab x\", \"ab\", \"x\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\WordUtilsTest.java",
  "methodName" : "testContainsAllWordsWithNull",
  "sourceCode" : "@Test\r\nvoid testContainsAllWordsWithNull() {\r\n    assertFalse(WordUtils.containsAllWords(\"M\", (CharSequence) null));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\WordUtilsTest.java",
  "methodName" : "testInitials_String",
  "sourceCode" : "@Test\r\nvoid testInitials_String() {\r\n    assertNull(WordUtils.initials(null));\r\n    assertEquals(\"\", WordUtils.initials(\"\"));\r\n    assertEquals(\"\", WordUtils.initials(\"  \"));\r\n    assertEquals(\"I\", WordUtils.initials(\"I\"));\r\n    assertEquals(\"i\", WordUtils.initials(\"i\"));\r\n    assertEquals(\"BJL\", WordUtils.initials(\"Ben John Lee\"));\r\n    assertEquals(\"BJL\", WordUtils.initials(\"   Ben \\n   John\\tLee\\t\"));\r\n    assertEquals(\"BJ\", WordUtils.initials(\"Ben J.Lee\"));\r\n    assertEquals(\"BJ.L\", WordUtils.initials(\" Ben   John  . Lee\"));\r\n    assertEquals(\"iah1\", WordUtils.initials(\"i am here 123\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\WordUtilsTest.java",
  "methodName" : "testInitials_String_charArray",
  "sourceCode" : "@Test\r\nvoid testInitials_String_charArray() {\r\n    char[] array = null;\r\n    assertNull(WordUtils.initials(null, array));\r\n    assertEquals(\"\", WordUtils.initials(\"\", array));\r\n    assertEquals(\"\", WordUtils.initials(\"  \", array));\r\n    assertEquals(\"I\", WordUtils.initials(\"I\", array));\r\n    assertEquals(\"i\", WordUtils.initials(\"i\", array));\r\n    assertEquals(\"S\", WordUtils.initials(\"SJC\", array));\r\n    assertEquals(\"BJL\", WordUtils.initials(\"Ben John Lee\", array));\r\n    assertEquals(\"BJL\", WordUtils.initials(\"   Ben \\n   John\\tLee\\t\", array));\r\n    assertEquals(\"BJ\", WordUtils.initials(\"Ben J.Lee\", array));\r\n    assertEquals(\"BJ.L\", WordUtils.initials(\" Ben   John  . Lee\", array));\r\n    assertEquals(\"KO\", WordUtils.initials(\"Kay O'Murphy\", array));\r\n    assertEquals(\"iah1\", WordUtils.initials(\"i am here 123\", array));\r\n    array = ArrayUtils.EMPTY_CHAR_ARRAY;\r\n    assertNull(WordUtils.initials(null, array));\r\n    assertEquals(\"\", WordUtils.initials(\"\", array));\r\n    assertEquals(\"\", WordUtils.initials(\"  \", array));\r\n    assertEquals(\"\", WordUtils.initials(\"I\", array));\r\n    assertEquals(\"\", WordUtils.initials(\"i\", array));\r\n    assertEquals(\"\", WordUtils.initials(\"SJC\", array));\r\n    assertEquals(\"\", WordUtils.initials(\"Ben John Lee\", array));\r\n    assertEquals(\"\", WordUtils.initials(\"   Ben \\n   John\\tLee\\t\", array));\r\n    assertEquals(\"\", WordUtils.initials(\"Ben J.Lee\", array));\r\n    assertEquals(\"\", WordUtils.initials(\" Ben   John  . Lee\", array));\r\n    assertEquals(\"\", WordUtils.initials(\"Kay O'Murphy\", array));\r\n    assertEquals(\"\", WordUtils.initials(\"i am here 123\", array));\r\n    array = \" \".toCharArray();\r\n    assertNull(WordUtils.initials(null, array));\r\n    assertEquals(\"\", WordUtils.initials(\"\", array));\r\n    assertEquals(\"\", WordUtils.initials(\"  \", array));\r\n    assertEquals(\"I\", WordUtils.initials(\"I\", array));\r\n    assertEquals(\"i\", WordUtils.initials(\"i\", array));\r\n    assertEquals(\"S\", WordUtils.initials(\"SJC\", array));\r\n    assertEquals(\"BJL\", WordUtils.initials(\"Ben John Lee\", array));\r\n    assertEquals(\"BJ\", WordUtils.initials(\"Ben J.Lee\", array));\r\n    assertEquals(\"B\\nJ\", WordUtils.initials(\"   Ben \\n   John\\tLee\\t\", array));\r\n    assertEquals(\"BJ.L\", WordUtils.initials(\" Ben   John  . Lee\", array));\r\n    assertEquals(\"KO\", WordUtils.initials(\"Kay O'Murphy\", array));\r\n    assertEquals(\"iah1\", WordUtils.initials(\"i am here 123\", array));\r\n    array = \" .\".toCharArray();\r\n    assertNull(WordUtils.initials(null, array));\r\n    assertEquals(\"\", WordUtils.initials(\"\", array));\r\n    assertEquals(\"\", WordUtils.initials(\"  \", array));\r\n    assertEquals(\"I\", WordUtils.initials(\"I\", array));\r\n    assertEquals(\"i\", WordUtils.initials(\"i\", array));\r\n    assertEquals(\"S\", WordUtils.initials(\"SJC\", array));\r\n    assertEquals(\"BJL\", WordUtils.initials(\"Ben John Lee\", array));\r\n    assertEquals(\"BJL\", WordUtils.initials(\"Ben J.Lee\", array));\r\n    assertEquals(\"BJL\", WordUtils.initials(\" Ben   John  . Lee\", array));\r\n    assertEquals(\"KO\", WordUtils.initials(\"Kay O'Murphy\", array));\r\n    assertEquals(\"iah1\", WordUtils.initials(\"i am here 123\", array));\r\n    array = \" .'\".toCharArray();\r\n    assertNull(WordUtils.initials(null, array));\r\n    assertEquals(\"\", WordUtils.initials(\"\", array));\r\n    assertEquals(\"\", WordUtils.initials(\"  \", array));\r\n    assertEquals(\"I\", WordUtils.initials(\"I\", array));\r\n    assertEquals(\"i\", WordUtils.initials(\"i\", array));\r\n    assertEquals(\"S\", WordUtils.initials(\"SJC\", array));\r\n    assertEquals(\"BJL\", WordUtils.initials(\"Ben John Lee\", array));\r\n    assertEquals(\"BJL\", WordUtils.initials(\"Ben J.Lee\", array));\r\n    assertEquals(\"BJL\", WordUtils.initials(\" Ben   John  . Lee\", array));\r\n    assertEquals(\"KOM\", WordUtils.initials(\"Kay O'Murphy\", array));\r\n    assertEquals(\"iah1\", WordUtils.initials(\"i am here 123\", array));\r\n    array = \"SIJo1\".toCharArray();\r\n    assertNull(WordUtils.initials(null, array));\r\n    assertEquals(\"\", WordUtils.initials(\"\", array));\r\n    assertEquals(\" \", WordUtils.initials(\"  \", array));\r\n    assertEquals(\"\", WordUtils.initials(\"I\", array));\r\n    assertEquals(\"i\", WordUtils.initials(\"i\", array));\r\n    assertEquals(\"C\", WordUtils.initials(\"SJC\", array));\r\n    assertEquals(\"Bh\", WordUtils.initials(\"Ben John Lee\", array));\r\n    assertEquals(\"B.\", WordUtils.initials(\"Ben J.Lee\", array));\r\n    assertEquals(\" h\", WordUtils.initials(\" Ben   John  . Lee\", array));\r\n    assertEquals(\"K\", WordUtils.initials(\"Kay O'Murphy\", array));\r\n    assertEquals(\"i2\", WordUtils.initials(\"i am here 123\", array));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\WordUtilsTest.java",
  "methodName" : "testInitialsSurrogatePairs",
  "sourceCode" : "@Test\r\nvoid testInitialsSurrogatePairs() {\r\n    // Tests with space as default delimiter\r\n    assertEquals(\"\\uD800\\uDF00\\uD800\\uDF02\", WordUtils.initials(\"\\uD800\\uDF00\\uD800\\uDF01 \\uD800\\uDF02\\uD800\\uDF03\"));\r\n    assertEquals(\"\\uD800\\uDF00\\uD800\\uDF02\", WordUtils.initials(\"\\uD800\\uDF00\\uD800\\uDF01 \\uD800\\uDF02\\uD800\\uDF03\", null));\r\n    assertEquals(\"\\uD800\\uDF00\\uD800\\uDF02\", WordUtils.initials(\"\\uD800\\uDF00 \\uD800\\uDF02 \", null));\r\n    // Tests with UTF-16 as delimiters\r\n    assertEquals(\"\\uD800\\uDF00\\uD800\\uDF02\", WordUtils.initials(\"\\uD800\\uDF00\\uD800\\uDF01.\\uD800\\uDF02\\uD800\\uDF03\", new char[] { '.' }));\r\n    assertEquals(\"\\uD800\\uDF00\\uD800\\uDF02\", WordUtils.initials(\"\\uD800\\uDF00\\uD800\\uDF01A\\uD800\\uDF02\\uD800\\uDF03\", new char[] { 'A' }));\r\n    // Tests with UTF-32 as delimiters\r\n    assertEquals(\"\\uD800\\uDF00\\uD800\\uDF02\", WordUtils.initials(\"\\uD800\\uDF00\\uD800\\uDF01\\uD800\\uDF14\\uD800\\uDF02\\uD800\\uDF03\", new char[] { '\\uD800', '\\uDF14' }));\r\n    assertEquals(\"\\uD800\\uDF00\\uD800\\uDF02\", WordUtils.initials(\"\\uD800\\uDF00\\uD800\\uDF01\\uD800\\uDF14\\uD800\\uDF18\\uD800\\uDF02\\uD800\\uDF03\", new char[] { '\\uD800', '\\uDF14', '\\uD800', '\\uDF18' }));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\WordUtilsTest.java",
  "methodName" : "testLANG1292",
  "sourceCode" : "@Test\r\nvoid testLANG1292() {\r\n    // Prior to fix, this was throwing StringIndexOutOfBoundsException\r\n    WordUtils.wrap(\"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa \" + \"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa \" + \"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\", 70);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\WordUtilsTest.java",
  "methodName" : "testLANG673",
  "sourceCode" : "@Test\r\nvoid testLANG673() {\r\n    assertEquals(\"01\", WordUtils.abbreviate(\"01 23 45 67 89\", 0, 40, \"\"));\r\n    assertEquals(\"01 23 45 67\", WordUtils.abbreviate(\"01 23 45 67 89\", 10, 40, \"\"));\r\n    assertEquals(\"01 23 45 67 89\", WordUtils.abbreviate(\"01 23 45 67 89\", 40, 40, \"\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\WordUtilsTest.java",
  "methodName" : "testSwapCase_String",
  "sourceCode" : "@Test\r\nvoid testSwapCase_String() {\r\n    assertNull(WordUtils.swapCase(null));\r\n    assertEquals(\"\", WordUtils.swapCase(\"\"));\r\n    assertEquals(\"  \", WordUtils.swapCase(\"  \"));\r\n    assertEquals(\"i\", WordUtils.swapCase(\"I\"));\r\n    assertEquals(\"I\", WordUtils.swapCase(\"i\"));\r\n    assertEquals(\"I AM HERE 123\", WordUtils.swapCase(\"i am here 123\"));\r\n    assertEquals(\"i aM hERE 123\", WordUtils.swapCase(\"I Am Here 123\"));\r\n    assertEquals(\"I AM here 123\", WordUtils.swapCase(\"i am HERE 123\"));\r\n    assertEquals(\"i am here 123\", WordUtils.swapCase(\"I AM HERE 123\"));\r\n    final String test = \"This String contains a TitleCase character: \\u01C8\";\r\n    final String expect = \"tHIS sTRING CONTAINS A tITLEcASE CHARACTER: \\u01C9\";\r\n    assertEquals(expect, WordUtils.swapCase(test));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\WordUtilsTest.java",
  "methodName" : "testText123",
  "sourceCode" : "@Test\r\nvoid testText123() throws Exception {\r\n    // Prior to fix, this was throwing StringIndexOutOfBoundsException\r\n    WordUtils.wrap(\"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa \" + \"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\", Integer.MAX_VALUE);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\WordUtilsTest.java",
  "methodName" : "testUncapitalize_String",
  "sourceCode" : "@Test\r\nvoid testUncapitalize_String() {\r\n    assertNull(WordUtils.uncapitalize(null));\r\n    assertEquals(\"\", WordUtils.uncapitalize(\"\"));\r\n    assertEquals(\"  \", WordUtils.uncapitalize(\"  \"));\r\n    assertEquals(\"i\", WordUtils.uncapitalize(\"I\"));\r\n    assertEquals(\"i\", WordUtils.uncapitalize(\"i\"));\r\n    assertEquals(\"i am here 123\", WordUtils.uncapitalize(\"i am here 123\"));\r\n    assertEquals(\"i am here 123\", WordUtils.uncapitalize(\"I Am Here 123\"));\r\n    assertEquals(\"i am hERE 123\", WordUtils.uncapitalize(\"i am HERE 123\"));\r\n    assertEquals(\"i aM hERE 123\", WordUtils.uncapitalize(\"I AM HERE 123\"));\r\n    assertEquals(\"a\\tb\\nc d\", WordUtils.uncapitalize(\"A\\tB\\nC D\"));\r\n    assertEquals(\"and \\tbut \\ncLEAT  dome\", WordUtils.uncapitalize(\"And \\tBut \\nCLEAT  Dome\"));\r\n    // All whitespace\r\n    assertEquals(WHITESPACE, WordUtils.capitalizeFully(WHITESPACE));\r\n    assertEquals(\"A\" + WHITESPACE + \"B\", WordUtils.capitalizeFully(\"a\" + WHITESPACE + \"b\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\WordUtilsTest.java",
  "methodName" : "testUnCapitalize_Text88",
  "sourceCode" : "@Test\r\nvoid testUnCapitalize_Text88() {\r\n    assertEquals(\"i am fine now\", WordUtils.uncapitalize(\"I am fine now\", new char[] {}));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\WordUtilsTest.java",
  "methodName" : "testUncapitalizeWithDelimiters_String",
  "sourceCode" : "@Test\r\nvoid testUncapitalizeWithDelimiters_String() {\r\n    assertNull(WordUtils.uncapitalize(null, null));\r\n    assertEquals(\"\", WordUtils.uncapitalize(\"\", ArrayUtils.EMPTY_CHAR_ARRAY));\r\n    assertEquals(\"  \", WordUtils.uncapitalize(\"  \", ArrayUtils.EMPTY_CHAR_ARRAY));\r\n    char[] chars = { '-', '+', ' ', '@' };\r\n    assertEquals(\"i\", WordUtils.uncapitalize(\"I\", chars));\r\n    assertEquals(\"i\", WordUtils.uncapitalize(\"i\", chars));\r\n    assertEquals(\"i am-here+123\", WordUtils.uncapitalize(\"i am-here+123\", chars));\r\n    assertEquals(\"i+am here-123\", WordUtils.uncapitalize(\"I+Am Here-123\", chars));\r\n    assertEquals(\"i-am+hERE 123\", WordUtils.uncapitalize(\"i-am+HERE 123\", chars));\r\n    assertEquals(\"i aM-hERE+123\", WordUtils.uncapitalize(\"I AM-HERE+123\", chars));\r\n    chars = new char[] { '.' };\r\n    assertEquals(\"i AM.fINE\", WordUtils.uncapitalize(\"I AM.FINE\", chars));\r\n    assertEquals(\"i aM.FINE\", WordUtils.uncapitalize(\"I AM.FINE\", null));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\WordUtilsTest.java",
  "methodName" : "testWrap_StringInt",
  "sourceCode" : "@Test\r\nvoid testWrap_StringInt() {\r\n    assertNull(WordUtils.wrap(null, 20));\r\n    assertNull(WordUtils.wrap(null, -1));\r\n    assertEquals(\"\", WordUtils.wrap(\"\", 20));\r\n    assertEquals(\"\", WordUtils.wrap(\"\", -1));\r\n    // normal\r\n    final String systemNewLine = System.lineSeparator();\r\n    String input = \"Here is one line of text that is going to be wrapped after 20 columns.\";\r\n    String expected = \"Here is one line of\" + systemNewLine + \"text that is going\" + systemNewLine + \"to be wrapped after\" + systemNewLine + \"20 columns.\";\r\n    assertEquals(expected, WordUtils.wrap(input, 20));\r\n    // long word at end\r\n    input = \"Click here to jump to the commons website - https://commons.apache.org\";\r\n    expected = \"Click here to jump\" + systemNewLine + \"to the commons\" + systemNewLine + \"website -\" + systemNewLine + \"https://commons.apache.org\";\r\n    assertEquals(expected, WordUtils.wrap(input, 20));\r\n    // long word in middle\r\n    input = \"Click here, https://commons.apache.org, to jump to the commons website\";\r\n    expected = \"Click here,\" + systemNewLine + \"https://commons.apache.org,\" + systemNewLine + \"to jump to the\" + systemNewLine + \"commons website\";\r\n    assertEquals(expected, WordUtils.wrap(input, 20));\r\n    // leading spaces on a new line are stripped\r\n    // trailing spaces are not stripped\r\n    input = \"word1             word2                        word3\";\r\n    expected = \"word1  \" + systemNewLine + \"word2  \" + systemNewLine + \"word3\";\r\n    assertEquals(expected, WordUtils.wrap(input, 7));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\WordUtilsTest.java",
  "methodName" : "testWrap_StringIntStringBoolean",
  "sourceCode" : "@Test\r\nvoid testWrap_StringIntStringBoolean() {\r\n    assertNull(WordUtils.wrap(null, 20, \"\\n\", false));\r\n    assertNull(WordUtils.wrap(null, 20, \"\\n\", true));\r\n    assertNull(WordUtils.wrap(null, 20, null, true));\r\n    assertNull(WordUtils.wrap(null, 20, null, false));\r\n    assertNull(WordUtils.wrap(null, -1, null, true));\r\n    assertNull(WordUtils.wrap(null, -1, null, false));\r\n    assertEquals(\"\", WordUtils.wrap(\"\", 20, \"\\n\", false));\r\n    assertEquals(\"\", WordUtils.wrap(\"\", 20, \"\\n\", true));\r\n    assertEquals(\"\", WordUtils.wrap(\"\", 20, null, false));\r\n    assertEquals(\"\", WordUtils.wrap(\"\", 20, null, true));\r\n    assertEquals(\"\", WordUtils.wrap(\"\", -1, null, false));\r\n    assertEquals(\"\", WordUtils.wrap(\"\", -1, null, true));\r\n    // normal\r\n    String input = \"Here is one line of text that is going to be wrapped after 20 columns.\";\r\n    String expected = \"Here is one line of\\ntext that is going\\nto be wrapped after\\n20 columns.\";\r\n    assertEquals(expected, WordUtils.wrap(input, 20, \"\\n\", false));\r\n    assertEquals(expected, WordUtils.wrap(input, 20, \"\\n\", true));\r\n    // unusual newline char\r\n    input = \"Here is one line of text that is going to be wrapped after 20 columns.\";\r\n    expected = \"Here is one line of<br />text that is going<br />to be wrapped after<br />20 columns.\";\r\n    assertEquals(expected, WordUtils.wrap(input, 20, \"<br />\", false));\r\n    assertEquals(expected, WordUtils.wrap(input, 20, \"<br />\", true));\r\n    // short line length\r\n    input = \"Here is one line\";\r\n    expected = \"Here\\nis one\\nline\";\r\n    assertEquals(expected, WordUtils.wrap(input, 6, \"\\n\", false));\r\n    expected = \"Here\\nis\\none\\nline\";\r\n    assertEquals(expected, WordUtils.wrap(input, 2, \"\\n\", false));\r\n    assertEquals(expected, WordUtils.wrap(input, -1, \"\\n\", false));\r\n    // system newline char\r\n    final String systemNewLine = System.lineSeparator();\r\n    input = \"Here is one line of text that is going to be wrapped after 20 columns.\";\r\n    expected = \"Here is one line of\" + systemNewLine + \"text that is going\" + systemNewLine + \"to be wrapped after\" + systemNewLine + \"20 columns.\";\r\n    assertEquals(expected, WordUtils.wrap(input, 20, null, false));\r\n    assertEquals(expected, WordUtils.wrap(input, 20, null, true));\r\n    // with extra spaces\r\n    input = \" Here:  is  one  line  of  text  that  is  going  to  be  wrapped  after  20  columns.\";\r\n    expected = \"Here:  is  one  line\\nof  text  that  is \\ngoing  to  be \\nwrapped  after  20 \\ncolumns.\";\r\n    assertEquals(expected, WordUtils.wrap(input, 20, \"\\n\", false));\r\n    assertEquals(expected, WordUtils.wrap(input, 20, \"\\n\", true));\r\n    // with tab\r\n    input = \"Here is\\tone line of text that is going to be wrapped after 20 columns.\";\r\n    expected = \"Here is\\tone line of\\ntext that is going\\nto be wrapped after\\n20 columns.\";\r\n    assertEquals(expected, WordUtils.wrap(input, 20, \"\\n\", false));\r\n    assertEquals(expected, WordUtils.wrap(input, 20, \"\\n\", true));\r\n    // with tab at wrapColumn\r\n    input = \"Here is one line of\\ttext that is going to be wrapped after 20 columns.\";\r\n    expected = \"Here is one line\\nof\\ttext that is\\ngoing to be wrapped\\nafter 20 columns.\";\r\n    assertEquals(expected, WordUtils.wrap(input, 20, \"\\n\", false));\r\n    assertEquals(expected, WordUtils.wrap(input, 20, \"\\n\", true));\r\n    // difference because of long word\r\n    input = \"Click here to jump to the commons website - https://commons.apache.org\";\r\n    expected = \"Click here to jump\\nto the commons\\nwebsite -\\nhttps://commons.apache.org\";\r\n    assertEquals(expected, WordUtils.wrap(input, 20, \"\\n\", false));\r\n    expected = \"Click here to jump\\nto the commons\\nwebsite -\\nhttps://commons.apac\\nhe.org\";\r\n    assertEquals(expected, WordUtils.wrap(input, 20, \"\\n\", true));\r\n    // difference because of long word in middle\r\n    input = \"Click here, https://commons.apache.org, to jump to the commons website\";\r\n    expected = \"Click here,\\nhttps://commons.apache.org,\\nto jump to the\\ncommons website\";\r\n    assertEquals(expected, WordUtils.wrap(input, 20, \"\\n\", false));\r\n    expected = \"Click here,\\nhttps://commons.apac\\nhe.org, to jump to\\nthe commons website\";\r\n    assertEquals(expected, WordUtils.wrap(input, 20, \"\\n\", true));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\WordUtilsTest.java",
  "methodName" : "testWrap_StringIntStringBooleanString",
  "sourceCode" : "@Test\r\nvoid testWrap_StringIntStringBooleanString() {\r\n    // no changes test\r\n    String input = \"flammable/inflammable\";\r\n    String expected = \"flammable/inflammable\";\r\n    assertEquals(expected, WordUtils.wrap(input, 30, \"\\n\", false, \"/\"));\r\n    // wrap on / and small width\r\n    expected = \"flammable\\ninflammable\";\r\n    assertEquals(expected, WordUtils.wrap(input, 2, \"\\n\", false, \"/\"));\r\n    // wrap long words on / 1\r\n    expected = \"flammable\\ninflammab\\nle\";\r\n    assertEquals(expected, WordUtils.wrap(input, 9, \"\\n\", true, \"/\"));\r\n    // wrap long words on / 2\r\n    expected = \"flammable\\ninflammable\";\r\n    assertEquals(expected, WordUtils.wrap(input, 15, \"\\n\", true, \"/\"));\r\n    // wrap long words on / 3\r\n    input = \"flammableinflammable\";\r\n    expected = \"flammableinflam\\nmable\";\r\n    assertEquals(expected, WordUtils.wrap(input, 15, \"\\n\", true, \"/\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\WordUtilsTest.java",
  "methodName" : "testWrapAtMiddleTwice",
  "sourceCode" : "@Test\r\nvoid testWrapAtMiddleTwice() {\r\n    assertEquals(\"abcdef\\n\\nabcdef\", WordUtils.wrap(\"abcdefggabcdef\", 2, \"\\n\", false, \"(?=g)\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\WordUtilsTest.java",
  "methodName" : "testWrapAtStartAndEnd",
  "sourceCode" : "@Test\r\nvoid testWrapAtStartAndEnd() {\r\n    assertEquals(\"\\nabcdefabcdef\\n\", WordUtils.wrap(\"nabcdefabcdefn\", 2, \"\\n\", false, \"(?=n)\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\WordUtilsTest.java",
  "methodName" : "testWrapWithMultipleRegexMatchOfLength0",
  "sourceCode" : "@Test\r\nvoid testWrapWithMultipleRegexMatchOfLength0() {\r\n    assertEquals(\"abc\\ndefabc\\ndef\", WordUtils.wrap(\"abcdefabcdef\", 2, \"\\n\", false, \"(?=d)\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-text\\src\\test\\java\\org\\apache\\commons\\text\\WordUtilsTest.java",
  "methodName" : "testWrapWithRegexMatchOfLength0",
  "sourceCode" : "@Test\r\nvoid testWrapWithRegexMatchOfLength0() {\r\n    assertEquals(\"abc\\ndef\", WordUtils.wrap(\"abcdef\", 2, \"\\n\", false, \"(?=d)\"));\r\n}",
  "annotations" : [ "Test" ]
} ]