[ {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\cpdsadapter\\TestDriverAdapterCPDS.java",
  "methodName" : "testClose",
  "sourceCode" : "@Test\r\nvoid testClose() throws Exception {\r\n    final Connection[] c = new Connection[10];\r\n    for (int i = 0; i < c.length; i++) {\r\n        c[i] = pcds.getPooledConnection().getConnection();\r\n    }\r\n    // close one of the connections\r\n    c[0].close();\r\n    assertTrue(c[0].isClosed());\r\n    // get a new connection\r\n    c[0] = pcds.getPooledConnection().getConnection();\r\n    for (final Connection element : c) {\r\n        element.close();\r\n        checkAfterClose(element, null);\r\n    }\r\n    // open all the connections\r\n    for (int i = 0; i < c.length; i++) {\r\n        c[i] = pcds.getPooledConnection().getConnection();\r\n    }\r\n    for (final Connection element : c) {\r\n        element.close();\r\n        checkAfterClose(element, null);\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\cpdsadapter\\TestDriverAdapterCPDS.java",
  "methodName" : "testCloseWithUserName",
  "sourceCode" : "@Test\r\nvoid testCloseWithUserName() throws Exception {\r\n    final Connection[] c = new Connection[10];\r\n    for (int i = 0; i < c.length; i++) {\r\n        c[i] = pcds.getPooledConnection(\"u1\", \"p1\").getConnection();\r\n    }\r\n    // close one of the connections\r\n    c[0].close();\r\n    assertTrue(c[0].isClosed());\r\n    // get a new connection\r\n    c[0] = pcds.getPooledConnection(\"u1\", \"p1\").getConnection();\r\n    for (final Connection element : c) {\r\n        element.close();\r\n        checkAfterClose(element, null);\r\n    }\r\n    // open all the connections\r\n    for (int i = 0; i < c.length; i++) {\r\n        c[i] = pcds.getPooledConnection(\"u1\", \"p1\").getConnection();\r\n    }\r\n    for (final Connection element : c) {\r\n        element.close();\r\n        checkAfterClose(element, null);\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\cpdsadapter\\TestDriverAdapterCPDS.java",
  "methodName" : "testDbcp367",
  "sourceCode" : "/**\r\n * Tests https://issues.apache.org/jira/browse/DBCP-376\r\n */\r\n@Test\r\nvoid testDbcp367() throws Exception {\r\n    final ThreadDbcp367[] threads = new ThreadDbcp367[200];\r\n    pcds.setPoolPreparedStatements(true);\r\n    pcds.setMaxPreparedStatements(-1);\r\n    pcds.setAccessToUnderlyingConnectionAllowed(true);\r\n    try (final SharedPoolDataSource spds = new SharedPoolDataSource()) {\r\n        spds.setConnectionPoolDataSource(pcds);\r\n        spds.setMaxTotal(threads.length + 10);\r\n        spds.setDefaultMaxWait(Duration.ofMillis(-1));\r\n        spds.setDefaultMaxIdle(10);\r\n        spds.setDefaultAutoCommit(Boolean.FALSE);\r\n        spds.setValidationQuery(\"SELECT 1\");\r\n        spds.setDefaultDurationBetweenEvictionRuns(Duration.ofSeconds(10));\r\n        spds.setDefaultNumTestsPerEvictionRun(-1);\r\n        spds.setDefaultTestWhileIdle(true);\r\n        spds.setDefaultTestOnBorrow(true);\r\n        spds.setDefaultTestOnReturn(false);\r\n        for (int i = 0; i < threads.length; i++) {\r\n            threads[i] = new ThreadDbcp367(spds);\r\n            threads[i].start();\r\n        }\r\n        for (int i = 0; i < threads.length; i++) {\r\n            threads[i].join();\r\n            Assertions.assertFalse(threads[i].isFailed(), \"Thread \" + i + \" has failed\");\r\n        }\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\cpdsadapter\\TestDriverAdapterCPDS.java",
  "methodName" : "testDeprecatedAccessors",
  "sourceCode" : "@SuppressWarnings(\"deprecation\")\r\n@Test\r\nvoid testDeprecatedAccessors() {\r\n    int i = 0;\r\n    //\r\n    i++;\r\n    pcds.setMinEvictableIdleTimeMillis(i);\r\n    assertEquals(i, pcds.getMinEvictableIdleTimeMillis());\r\n    assertEquals(Duration.ofMillis(i), pcds.getMinEvictableIdleDuration());\r\n    //\r\n    i++;\r\n    pcds.setTimeBetweenEvictionRunsMillis(i);\r\n    assertEquals(i, pcds.getTimeBetweenEvictionRunsMillis());\r\n    assertEquals(Duration.ofMillis(i), pcds.getDurationBetweenEvictionRuns());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\cpdsadapter\\TestDriverAdapterCPDS.java",
  "methodName" : "testGetObjectInstance",
  "sourceCode" : "@Test\r\nvoid testGetObjectInstance() throws Exception {\r\n    final Reference ref = pcds.getReference();\r\n    final Object o = pcds.getObjectInstance(ref, null, null, null);\r\n    assertEquals(pcds.getDriver(), ((DriverAdapterCPDS) o).getDriver());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\cpdsadapter\\TestDriverAdapterCPDS.java",
  "methodName" : "testGetObjectInstanceChangeDescription",
  "sourceCode" : "@Test\r\nvoid testGetObjectInstanceChangeDescription() throws Exception {\r\n    final Reference ref = pcds.getReference();\r\n    for (int i = 0; i < ref.size(); i++) {\r\n        if (ref.get(i).getType().equals(\"description\")) {\r\n            ref.remove(i);\r\n            break;\r\n        }\r\n    }\r\n    ref.add(new StringRefAddr(\"description\", \"anything\"));\r\n    final Object o = pcds.getObjectInstance(ref, null, null, null);\r\n    assertEquals(pcds.getDescription(), ((DriverAdapterCPDS) o).getDescription());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\cpdsadapter\\TestDriverAdapterCPDS.java",
  "methodName" : "testGetObjectInstanceNull",
  "sourceCode" : "@Test\r\nvoid testGetObjectInstanceNull() throws Exception {\r\n    final Object o = pcds.getObjectInstance(null, null, null, null);\r\n    assertNull(o);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\cpdsadapter\\TestDriverAdapterCPDS.java",
  "methodName" : "testGetParentLogger",
  "sourceCode" : "@Test\r\nvoid testGetParentLogger() {\r\n    assertThrows(SQLFeatureNotSupportedException.class, pcds::getParentLogger);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\cpdsadapter\\TestDriverAdapterCPDS.java",
  "methodName" : "testGetReference",
  "sourceCode" : "@Test\r\nvoid testGetReference() throws NamingException {\r\n    final Reference ref = pcds.getReference();\r\n    assertEquals(pcds.getDriver(), ref.get(\"driver\").getContent());\r\n    assertEquals(pcds.getDescription(), ref.get(\"description\").getContent());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\cpdsadapter\\TestDriverAdapterCPDS.java",
  "methodName" : "testGettersAndSetters",
  "sourceCode" : "@Test\r\nvoid testGettersAndSetters() {\r\n    pcds.setUser(\"foo\");\r\n    assertEquals(\"foo\", pcds.getUser());\r\n    pcds.setPassword(\"bar\");\r\n    assertEquals(\"bar\", pcds.getPassword());\r\n    pcds.setPassword(new char[] { 'a', 'b' });\r\n    assertArrayEquals(new char[] { 'a', 'b' }, pcds.getPasswordCharArray());\r\n    final PrintWriter pw = new PrintWriter(System.err);\r\n    pcds.setLogWriter(pw);\r\n    @SuppressWarnings(\"resource\")\r\n    final PrintWriter logWriter = pcds.getLogWriter();\r\n    assertEquals(pw, logWriter);\r\n    pcds.setLoginTimeout(10);\r\n    assertEquals(10, pcds.getLoginTimeout());\r\n    pcds.setMaxIdle(100);\r\n    assertEquals(100, pcds.getMaxIdle());\r\n    pcds.setDurationBetweenEvictionRuns(Duration.ofMillis(100));\r\n    assertEquals(100, pcds.getDurationBetweenEvictionRuns().toMillis());\r\n    pcds.setNumTestsPerEvictionRun(1);\r\n    assertEquals(1, pcds.getNumTestsPerEvictionRun());\r\n    pcds.setMinEvictableIdleDuration(Duration.ofMillis(11));\r\n    assertEquals(Duration.ofMillis(11), pcds.getMinEvictableIdleDuration());\r\n    pcds.setDescription(\"jo\");\r\n    assertEquals(\"jo\", pcds.getDescription());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\cpdsadapter\\TestDriverAdapterCPDS.java",
  "methodName" : "testIncorrectPassword",
  "sourceCode" : "/**\r\n * JIRA: DBCP-245\r\n */\r\n@Test\r\nvoid testIncorrectPassword() throws Exception {\r\n    pcds.getPooledConnection(\"u2\", \"p2\").close();\r\n    // Use bad password\r\n    assertThrows(SQLException.class, () -> pcds.getPooledConnection(\"u1\", \"zlsafjk\"), \"Able to retrieve connection with incorrect password\");\r\n    // Use good password\r\n    final SQLException e = assertThrows(SQLException.class, () -> pcds.getPooledConnection(\"u1\", \"x\"), \"Able to retrieve connection with incorrect password\");\r\n    assertTrue(e.getMessage().startsWith(\"x is not the correct password\"));\r\n    // else the exception was expected\r\n    // Make sure we can still use our good password.\r\n    pcds.getPooledConnection(\"u1\", \"p1\").close();\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\cpdsadapter\\TestDriverAdapterCPDS.java",
  "methodName" : "testNullValidationQuery",
  "sourceCode" : "/**\r\n * JIRA: DBCP-442\r\n */\r\n@Test\r\nvoid testNullValidationQuery() throws Exception {\r\n    try (final SharedPoolDataSource spds = new SharedPoolDataSource()) {\r\n        spds.setConnectionPoolDataSource(pcds);\r\n        spds.setDefaultTestOnBorrow(true);\r\n        try (final Connection c = spds.getConnection()) {\r\n            // close right away\r\n        }\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\cpdsadapter\\TestDriverAdapterCPDS.java",
  "methodName" : "testSetConnectionProperties",
  "sourceCode" : "@Test\r\nvoid testSetConnectionProperties() throws Exception {\r\n    // Set user property to bad value\r\n    pcds.setUser(\"bad\");\r\n    // Supply correct value in connection properties\r\n    // This will overwrite field value\r\n    final Properties properties = new Properties();\r\n    properties.put(Constants.KEY_USER, \"foo\");\r\n    properties.put(Constants.KEY_PASSWORD, pcds.getPassword());\r\n    pcds.setConnectionProperties(properties);\r\n    pcds.getPooledConnection().close();\r\n    assertEquals(\"foo\", pcds.getUser());\r\n    // Put bad password into properties\r\n    properties.put(\"password\", \"bad\");\r\n    // This does not change local field\r\n    assertEquals(\"bar\", pcds.getPassword());\r\n    // Supply correct password in getPooledConnection\r\n    // Call will succeed and overwrite property\r\n    pcds.getPooledConnection(\"foo\", \"bar\").close();\r\n    assertEquals(\"bar\", pcds.getConnectionProperties().getProperty(\"password\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\cpdsadapter\\TestDriverAdapterCPDS.java",
  "methodName" : "testSetConnectionPropertiesConnectionCalled",
  "sourceCode" : "@Test\r\nvoid testSetConnectionPropertiesConnectionCalled() throws Exception {\r\n    final Properties properties = new Properties();\r\n    // call to the connection\r\n    pcds.getPooledConnection().close();\r\n    assertThrows(IllegalStateException.class, () -> pcds.setConnectionProperties(properties));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\cpdsadapter\\TestDriverAdapterCPDS.java",
  "methodName" : "testSetConnectionPropertiesNull",
  "sourceCode" : "@Test\r\nvoid testSetConnectionPropertiesNull() throws Exception {\r\n    pcds.setConnectionProperties(null);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\cpdsadapter\\TestDriverAdapterCPDS.java",
  "methodName" : "testSetPasswordNull",
  "sourceCode" : "@Test\r\nvoid testSetPasswordNull() throws Exception {\r\n    pcds.setPassword(\"Secret\");\r\n    assertEquals(\"Secret\", pcds.getPassword());\r\n    pcds.setPassword((char[]) null);\r\n    assertNull(pcds.getPassword());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\cpdsadapter\\TestDriverAdapterCPDS.java",
  "methodName" : "testSetPasswordNullWithConnectionProperties",
  "sourceCode" : "@Test\r\nvoid testSetPasswordNullWithConnectionProperties() throws Exception {\r\n    pcds.setConnectionProperties(new Properties());\r\n    pcds.setPassword(\"Secret\");\r\n    assertEquals(\"Secret\", pcds.getPassword());\r\n    pcds.setPassword((char[]) null);\r\n    assertNull(pcds.getPassword());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\cpdsadapter\\TestDriverAdapterCPDS.java",
  "methodName" : "testSetPasswordThenModCharArray",
  "sourceCode" : "@Test\r\nvoid testSetPasswordThenModCharArray() {\r\n    final char[] pwd = { 'a' };\r\n    pcds.setPassword(pwd);\r\n    assertEquals(\"a\", pcds.getPassword());\r\n    pwd[0] = 'b';\r\n    assertEquals(\"a\", pcds.getPassword());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\cpdsadapter\\TestDriverAdapterCPDS.java",
  "methodName" : "testSetUserNull",
  "sourceCode" : "@Test\r\nvoid testSetUserNull() throws Exception {\r\n    pcds.setUser(\"Alice\");\r\n    assertEquals(\"Alice\", pcds.getUser());\r\n    pcds.setUser(null);\r\n    assertNull(pcds.getUser());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\cpdsadapter\\TestDriverAdapterCPDS.java",
  "methodName" : "testSetUserNullWithConnectionProperties",
  "sourceCode" : "@Test\r\nvoid testSetUserNullWithConnectionProperties() throws Exception {\r\n    pcds.setConnectionProperties(new Properties());\r\n    pcds.setUser(\"Alice\");\r\n    assertEquals(\"Alice\", pcds.getUser());\r\n    pcds.setUser(null);\r\n    assertNull(pcds.getUser());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\cpdsadapter\\TestDriverAdapterCPDS.java",
  "methodName" : "testSimple",
  "sourceCode" : "@Test\r\nvoid testSimple() throws Exception {\r\n    try (final Connection conn = pcds.getPooledConnection().getConnection()) {\r\n        assertNotNull(conn);\r\n        try (final PreparedStatement stmt = conn.prepareStatement(\"select * from dual\")) {\r\n            assertNotNull(stmt);\r\n            try (final ResultSet resultSet = stmt.executeQuery()) {\r\n                assertNotNull(resultSet);\r\n                assertTrue(resultSet.next());\r\n            }\r\n        }\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\cpdsadapter\\TestDriverAdapterCPDS.java",
  "methodName" : "testSimpleWithUsername",
  "sourceCode" : "@SuppressWarnings(\"resource\")\r\n@Test\r\nvoid testSimpleWithUsername() throws Exception {\r\n    final Connection connCheck;\r\n    PStmtKey pStmtKey;\r\n    try (final Connection conn = pcds.getPooledConnection(\"u1\", \"p1\").getConnection()) {\r\n        assertNotNull(conn);\r\n        connCheck = conn;\r\n        try (final PreparedStatement stmt = conn.prepareStatement(\"select * from dual\")) {\r\n            assertNotNull(stmt);\r\n            final DelegatingStatement delegatingStatement = (DelegatingStatement) stmt;\r\n            final Statement delegateStatement = delegatingStatement.getDelegate();\r\n            pStmtKey = TestUtils.getPStmtKey((PoolablePreparedStatement) delegateStatement);\r\n            assertNotNull(pStmtKey);\r\n            try (final ResultSet resultSet = stmt.executeQuery()) {\r\n                assertNotNull(resultSet);\r\n                assertTrue(resultSet.next());\r\n            }\r\n        }\r\n    }\r\n    checkAfterClose(connCheck, pStmtKey);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\cpdsadapter\\TestDriverAdapterCPDS.java",
  "methodName" : "testToStringWithoutConnectionProperties",
  "sourceCode" : "@Test\r\nvoid testToStringWithoutConnectionProperties() throws ClassNotFoundException {\r\n    final DriverAdapterCPDS cleanCpds = new DriverAdapterCPDS();\r\n    cleanCpds.setDriver(\"org.apache.commons.dbcp2.TesterDriver\");\r\n    cleanCpds.setUrl(\"jdbc:apache:commons:testdriver\");\r\n    cleanCpds.setUser(\"foo\");\r\n    cleanCpds.setPassword(\"bar\");\r\n    cleanCpds.toString();\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\datasources\\CharArrayTest.java",
  "methodName" : "testAsString",
  "sourceCode" : "@Test\r\nvoid testAsString() {\r\n    assertEquals(\"foo\", new CharArray(\"foo\").asString());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\datasources\\CharArrayTest.java",
  "methodName" : "testEquals",
  "sourceCode" : "@Test\r\nvoid testEquals() {\r\n    assertEquals(new CharArray(\"foo\"), new CharArray(\"foo\"));\r\n    assertNotEquals(new CharArray(\"foo\"), new CharArray(\"bar\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\datasources\\CharArrayTest.java",
  "methodName" : "testGet",
  "sourceCode" : "@Test\r\nvoid testGet() {\r\n    assertArrayEquals(\"foo\".toCharArray(), new CharArray(\"foo\").get());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\datasources\\CharArrayTest.java",
  "methodName" : "testClear",
  "sourceCode" : "@Test\r\nvoid testClear() {\r\n    assertNull(new CharArray((String) null).clear().get());\r\n    assertArrayEquals(\"\".toCharArray(), new CharArray(\"\").clear().get());\r\n    assertArrayEquals(\"\\0\\0\\0\".toCharArray(), new CharArray(\"foo\").clear().get());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\datasources\\CharArrayTest.java",
  "methodName" : "testHashCode",
  "sourceCode" : "@Test\r\nvoid testHashCode() {\r\n    assertEquals(new CharArray(\"foo\").hashCode(), new CharArray(\"foo\").hashCode());\r\n    assertNotEquals(new CharArray(\"foo\").hashCode(), new CharArray(\"bar\").hashCode());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\datasources\\CharArrayTest.java",
  "methodName" : "testToString",
  "sourceCode" : "@Test\r\nvoid testToString() {\r\n    assertFalse(new CharArray(\"foo\").toString().contains(\"foo\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\datasources\\PooledConnectionManagerTest.java",
  "methodName" : "testSetPasswordCharArray",
  "sourceCode" : "@Test\r\nvoid testSetPasswordCharArray() {\r\n    final Fixture fixture = new Fixture();\r\n    fixture.setPassword(\"p\".toCharArray());\r\n    assertArrayEquals(\"p\".toCharArray(), fixture.getPassword());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\datasources\\PooledConnectionManagerTest.java",
  "methodName" : "testSetPasswordString",
  "sourceCode" : "@Test\r\nvoid testSetPasswordString() {\r\n    final Fixture fixture = new Fixture();\r\n    fixture.setPassword(\"p\");\r\n    assertArrayEquals(\"p\".toCharArray(), fixture.getPassword());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\datasources\\TestCPDSConnectionFactory.java",
  "methodName" : "testConnectionErrorCleanup",
  "sourceCode" : "/**\r\n * JIRA DBCP-216\r\n *\r\n * Verify that pool counters are maintained properly and listeners are\r\n * cleaned up when a PooledConnection throws a connectionError event.\r\n */\r\n@Test\r\nvoid testConnectionErrorCleanup() throws Exception {\r\n    // Setup factory\r\n    final CPDSConnectionFactory factory = new CPDSConnectionFactory(cpds, null, Duration.ofMillis(-1), false, \"userName\", \"password\".toCharArray());\r\n    try (final GenericObjectPool<PooledConnectionAndInfo> pool = new GenericObjectPool<>(factory)) {\r\n        factory.setPool(pool);\r\n        // Checkout a pair of connections\r\n        final PooledConnection pcon1 = pool.borrowObject().getPooledConnection();\r\n        try (final Connection con1 = pcon1.getConnection()) {\r\n            final PooledConnection pcon2 = pool.borrowObject().getPooledConnection();\r\n            assertEquals(2, pool.getNumActive());\r\n            assertEquals(0, pool.getNumIdle());\r\n            // Verify listening\r\n            final PooledConnectionProxy pc = (PooledConnectionProxy) pcon1;\r\n            assertTrue(pc.getListeners().contains(factory));\r\n            // Throw connectionError event\r\n            pc.throwConnectionError();\r\n            // Active count should be reduced by 1 and no idle increase\r\n            assertEquals(1, pool.getNumActive());\r\n            assertEquals(0, pool.getNumIdle());\r\n            // Throw another one - should be ignored\r\n            pc.throwConnectionError();\r\n            assertEquals(1, pool.getNumActive());\r\n            assertEquals(0, pool.getNumIdle());\r\n            // Ask for another connection\r\n            final PooledConnection pcon3 = pool.borrowObject().getPooledConnection();\r\n            // better not get baddie back\r\n            assertNotEquals(pcon3, pcon1);\r\n            // verify cleanup\r\n            assertFalse(pc.getListeners().contains(factory));\r\n            assertEquals(2, pool.getNumActive());\r\n            assertEquals(0, pool.getNumIdle());\r\n            // Return good connections back to pool\r\n            pcon2.getConnection().close();\r\n            pcon3.getConnection().close();\r\n            assertEquals(2, pool.getNumIdle());\r\n            assertEquals(0, pool.getNumActive());\r\n            // Verify pc is closed\r\n            assertThrows(SQLException.class, pc::getConnection, \"Expecting SQLException using closed PooledConnection\");\r\n            // Back from the dead - ignore the ghost!\r\n            con1.close();\r\n            assertEquals(2, pool.getNumIdle());\r\n            assertEquals(0, pool.getNumActive());\r\n            // Clear pool\r\n            pool.clear();\r\n            assertEquals(0, pool.getNumIdle());\r\n        }\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\datasources\\TestCPDSConnectionFactory.java",
  "methodName" : "testNullValidationQuery",
  "sourceCode" : "/**\r\n * JIRA: DBCP-442\r\n */\r\n@Test\r\nvoid testNullValidationQuery() throws Exception {\r\n    final CPDSConnectionFactory factory = new CPDSConnectionFactory(cpds, null, Duration.ofMillis(-1), false, \"userName\", \"password\".toCharArray());\r\n    try (final GenericObjectPool<PooledConnectionAndInfo> pool = new GenericObjectPool<>(factory)) {\r\n        factory.setPool(pool);\r\n        pool.setTestOnBorrow(true);\r\n        final PooledConnection pcon = pool.borrowObject().getPooledConnection();\r\n        try (final Connection con = pcon.getConnection()) {\r\n        }\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\datasources\\TestCPDSConnectionFactory.java",
  "methodName" : "testSetPasswordCharArray",
  "sourceCode" : "@Test\r\nvoid testSetPasswordCharArray() {\r\n    final CPDSConnectionFactory factory = new CPDSConnectionFactory(cpds, null, Duration.ofMillis(-1), false, \"userName\", \"password\".toCharArray());\r\n    final char[] pwd = { 'a' };\r\n    factory.setPassword(pwd);\r\n    assertEquals(\"a\", String.valueOf(factory.getPasswordCharArray()));\r\n    pwd[0] = 'b';\r\n    assertEquals(\"a\", String.valueOf(factory.getPasswordCharArray()));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\datasources\\TestCPDSConnectionFactory.java",
  "methodName" : "testSetPasswordString",
  "sourceCode" : "@Test\r\nvoid testSetPasswordString() {\r\n    final CPDSConnectionFactory factory = new CPDSConnectionFactory(cpds, null, Duration.ofMillis(-1), false, \"userName\", \"password\".toCharArray());\r\n    final String pwd = \"a\";\r\n    factory.setPassword(pwd);\r\n    assertEquals(\"a\", String.valueOf(factory.getPasswordCharArray()));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\datasources\\TestCPDSConnectionFactory.java",
  "methodName" : "testSharedPoolDSDestroyOnReturn",
  "sourceCode" : "/**\r\n * JIRA DBCP-216\r\n *\r\n * Check PoolableConnection close triggered by destroy is handled\r\n * properly. PooledConnectionProxy (dubiously) fires connectionClosed\r\n * when PooledConnection itself is closed.\r\n */\r\n@Test\r\nvoid testSharedPoolDSDestroyOnReturn() throws Exception {\r\n    try (final PerUserPoolDataSource ds = new PerUserPoolDataSource()) {\r\n        ds.setConnectionPoolDataSource(cpds);\r\n        ds.setPerUserMaxTotal(\"userName\", 10);\r\n        ds.setPerUserMaxWait(\"userName\", Duration.ofMillis(50));\r\n        ds.setPerUserMaxIdle(\"userName\", 2);\r\n        final Connection conn1 = ds.getConnection(\"userName\", \"password\");\r\n        final Connection conn2 = ds.getConnection(\"userName\", \"password\");\r\n        final Connection conn3 = ds.getConnection(\"userName\", \"password\");\r\n        assertEquals(3, ds.getNumActive(\"userName\"));\r\n        conn1.close();\r\n        assertEquals(1, ds.getNumIdle(\"userName\"));\r\n        conn2.close();\r\n        assertEquals(2, ds.getNumIdle(\"userName\"));\r\n        // Return to pool will trigger destroy -> close sequence\r\n        conn3.close();\r\n        assertEquals(2, ds.getNumIdle(\"userName\"));\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\datasources\\TestFactory.java",
  "methodName" : "testJNDI2Pools",
  "sourceCode" : "/**\r\n * Tests Bugzilla Bug 24082: bug in InstanceKeyDataSourceFactory.\r\n *\r\n * There's a fatal bug in InstanceKeyDataSourceFactory that means you can't instantiate more than one factory.\r\n * https://issues.apache.org/bugzilla/show_bug.cgi?id=24082\r\n */\r\n@ParameterizedTest\r\n// @formatter:off\r\n@CsvSource({ \"dataSourceName,                 java:comp/env/jdbc/bookstoreCPDS\", \"description,                    This is a test.\", \"jndiEnvironment,                X\", \"loginTimeout,                   30000\", \"blockWhenExhausted,             false\", \"evictionPolicyClassName,        org.apache.commons.pool2.impl.DefaultEvictionPolicy\", \"lifo,                           true\", \"maxIdlePerKey,                  4\", \"maxTotalPerKey,                 4\", \"maxWaitMillis,                  30001\", \"minEvictableIdleTimeMillis,     30002\", \"minIdlePerKey,                  4\", \"numTestsPerEvictionRun,         2\", \"softMinEvictableIdleTimeMillis, 30003\", \"testOnCreate,                   true\", \"testOnBorrow,                   true\", \"testOnReturn,                   true\", \"testWhileIdle,                  true\", \"timeBetweenEvictionRunsMillis,  30004\", \"validationQuery,                select 1\", \"validationQueryTimeout,         30005\", \"rollbackAfterValidation,        false\", \"maxConnLifetimeMillis,          60000\", \"defaultAutoCommit,              true\", \"defaultTransactionIsolation,    X\", \"defaultReadOnly,                true\" })\r\n// @formatter:on\r\nvoid testJNDI2Pools(final String string, final String value) throws Exception {\r\n    final Reference refObj = new Reference(SharedPoolDataSource.class.getName());\r\n    refObj.add(new StringRefAddr(string, value));\r\n    final Context context = new InitialContext();\r\n    final Hashtable<?, ?> env = new Hashtable<>();\r\n    final ObjectFactory factory = new SharedPoolDataSourceFactory();\r\n    final Name name = new CompositeName(\"myDB\");\r\n    final Object obj = factory.getObjectInstance(refObj, name, context, env);\r\n    assertNotNull(obj);\r\n    final Name name2 = new CompositeName(\"myDB2\");\r\n    final Object obj2 = factory.getObjectInstance(refObj, name2, context, env);\r\n    assertNotNull(obj2);\r\n}",
  "annotations" : [ "ParameterizedTest" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\datasources\\TestInstanceKeyDataSource.java",
  "methodName" : "testConnection",
  "sourceCode" : "@Test\r\nvoid testConnection() throws SQLException, ClassNotFoundException {\r\n    spds = new SharedPoolDataSource();\r\n    pcds.setDriver(DRIVER);\r\n    pcds.setUrl(URL);\r\n    spds.setConnectionPoolDataSource(pcds);\r\n    final PooledConnectionAndInfo info = spds.getPooledConnectionAndInfo(null, null);\r\n    assertNull(info.getUserName());\r\n    assertNull(info.getPassword());\r\n    try (final Connection conn = spds.getConnection()) {\r\n        assertNotNull(conn);\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\datasources\\TestInstanceKeyDataSource.java",
  "methodName" : "testConnectionPoolDataSource",
  "sourceCode" : "@Test\r\nvoid testConnectionPoolDataSource() {\r\n    assertEquals(pcds, spds.getConnectionPoolDataSource());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\datasources\\TestInstanceKeyDataSource.java",
  "methodName" : "testConnectionPoolDataSourceAlreadySet",
  "sourceCode" : "@Test\r\nvoid testConnectionPoolDataSourceAlreadySet() {\r\n    assertThrows(IllegalStateException.class, () -> spds.setConnectionPoolDataSource(new DriverAdapterCPDS()));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\datasources\\TestInstanceKeyDataSource.java",
  "methodName" : "testConnectionPoolDataSourceAlreadySetUsingJndi",
  "sourceCode" : "@Test\r\nvoid testConnectionPoolDataSourceAlreadySetUsingJndi() {\r\n    spds = new SharedPoolDataSource();\r\n    spds.setDataSourceName(\"anything\");\r\n    assertThrows(IllegalStateException.class, () -> spds.setConnectionPoolDataSource(new DriverAdapterCPDS()));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\datasources\\TestInstanceKeyDataSource.java",
  "methodName" : "testDataSourceName",
  "sourceCode" : "@Test\r\nvoid testDataSourceName() {\r\n    spds = new SharedPoolDataSource();\r\n    assertNull(spds.getDataSourceName());\r\n    spds.setDataSourceName(\"anything\");\r\n    assertEquals(\"anything\", spds.getDataSourceName());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\datasources\\TestInstanceKeyDataSource.java",
  "methodName" : "testDataSourceNameAlreadySet",
  "sourceCode" : "@Test\r\nvoid testDataSourceNameAlreadySet() {\r\n    assertThrows(IllegalStateException.class, () -> spds.setDataSourceName(\"anything\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\datasources\\TestInstanceKeyDataSource.java",
  "methodName" : "testDataSourceNameAlreadySetUsingJndi",
  "sourceCode" : "@Test\r\nvoid testDataSourceNameAlreadySetUsingJndi() {\r\n    spds = new SharedPoolDataSource();\r\n    spds.setDataSourceName(\"anything\");\r\n    assertThrows(IllegalStateException.class, () -> spds.setDataSourceName(\"anything\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\datasources\\TestInstanceKeyDataSource.java",
  "methodName" : "testDefaultBlockWhenExhausted",
  "sourceCode" : "@Test\r\nvoid testDefaultBlockWhenExhausted() {\r\n    spds.setDefaultBlockWhenExhausted(true);\r\n    assertTrue(spds.getDefaultBlockWhenExhausted());\r\n    spds.setDefaultBlockWhenExhausted(false);\r\n    assertFalse(spds.getDefaultBlockWhenExhausted());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\datasources\\TestInstanceKeyDataSource.java",
  "methodName" : "testDefaultEvictionPolicyClassName",
  "sourceCode" : "@Test\r\nvoid testDefaultEvictionPolicyClassName() {\r\n    spds.setDefaultEvictionPolicyClassName(Object.class.getName());\r\n    assertEquals(Object.class.getName(), spds.getDefaultEvictionPolicyClassName());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\datasources\\TestInstanceKeyDataSource.java",
  "methodName" : "testDefaultLifo",
  "sourceCode" : "@Test\r\nvoid testDefaultLifo() {\r\n    spds.setDefaultLifo(true);\r\n    assertTrue(spds.getDefaultLifo());\r\n    spds.setDefaultLifo(false);\r\n    assertFalse(spds.getDefaultLifo());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\datasources\\TestInstanceKeyDataSource.java",
  "methodName" : "testDefaultMinIdle",
  "sourceCode" : "@Test\r\nvoid testDefaultMinIdle() {\r\n    spds.setDefaultMinIdle(10);\r\n    assertEquals(10, spds.getDefaultMinIdle());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\datasources\\TestInstanceKeyDataSource.java",
  "methodName" : "testDefaultReadOnly",
  "sourceCode" : "@Test\r\nvoid testDefaultReadOnly() {\r\n    spds.setDefaultReadOnly(true);\r\n    assertTrue(spds.isDefaultReadOnly());\r\n    spds.setDefaultReadOnly(false);\r\n    assertFalse(spds.isDefaultReadOnly());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\datasources\\TestInstanceKeyDataSource.java",
  "methodName" : "testDefaultSoftMinEvictableIdleTimeMillis",
  "sourceCode" : "@Test\r\nvoid testDefaultSoftMinEvictableIdleTimeMillis() {\r\n    spds.setDefaultSoftMinEvictableIdleTimeMillis(10);\r\n    assertEquals(10, spds.getDefaultSoftMinEvictableIdleTimeMillis());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\datasources\\TestInstanceKeyDataSource.java",
  "methodName" : "testDefaultTestOnCreate",
  "sourceCode" : "@Test\r\nvoid testDefaultTestOnCreate() {\r\n    spds.setDefaultTestOnCreate(false);\r\n    assertFalse(spds.getDefaultTestOnCreate());\r\n    spds.setDefaultTestOnCreate(true);\r\n    assertTrue(spds.getDefaultTestOnCreate());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\datasources\\TestInstanceKeyDataSource.java",
  "methodName" : "testDefaultTransactionIsolation",
  "sourceCode" : "@Test\r\nvoid testDefaultTransactionIsolation() {\r\n    assertEquals(InstanceKeyDataSource.UNKNOWN_TRANSACTIONISOLATION, spds.getDefaultTransactionIsolation());\r\n    spds.setDefaultTransactionIsolation(Connection.TRANSACTION_READ_COMMITTED);\r\n    assertEquals(Connection.TRANSACTION_READ_COMMITTED, spds.getDefaultTransactionIsolation());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\datasources\\TestInstanceKeyDataSource.java",
  "methodName" : "testDefaultTransactionIsolationInvalid",
  "sourceCode" : "@Test\r\nvoid testDefaultTransactionIsolationInvalid() {\r\n    assertEquals(InstanceKeyDataSource.UNKNOWN_TRANSACTIONISOLATION, spds.getDefaultTransactionIsolation());\r\n    assertThrows(IllegalArgumentException.class, () -> spds.setDefaultTransactionIsolation(Integer.MAX_VALUE));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\datasources\\TestInstanceKeyDataSource.java",
  "methodName" : "testDescription",
  "sourceCode" : "@Test\r\nvoid testDescription() {\r\n    spds.setDescription(\"anything\");\r\n    assertEquals(\"anything\", spds.getDescription());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\datasources\\TestInstanceKeyDataSource.java",
  "methodName" : "testExceptionOnSetupDefaults",
  "sourceCode" : "/**\r\n * Verify that exception on setupDefaults does not leak PooledConnection\r\n *\r\n * JIRA: DBCP-237\r\n * @throws Exception\r\n */\r\n@Test\r\nvoid testExceptionOnSetupDefaults() throws Exception {\r\n    try (final ThrowOnSetupDefaultsDataSource tds = new ThrowOnSetupDefaultsDataSource()) {\r\n        final int numConnections = tds.getNumActive();\r\n        assertThrows(SQLException.class, () -> tds.getConnection(USER, PASS));\r\n        assertEquals(numConnections, tds.getNumActive());\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\datasources\\TestInstanceKeyDataSource.java",
  "methodName" : "testIsWrapperFor",
  "sourceCode" : "@Test\r\nvoid testIsWrapperFor() throws Exception {\r\n    assertTrue(spds.isWrapperFor(InstanceKeyDataSource.class));\r\n    assertTrue(spds.isWrapperFor(AutoCloseable.class));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\datasources\\TestInstanceKeyDataSource.java",
  "methodName" : "testJndiEnvironment",
  "sourceCode" : "@Test\r\nvoid testJndiEnvironment() {\r\n    assertNull(spds.getJndiEnvironment(\"name\"));\r\n    final Properties properties = new Properties();\r\n    properties.setProperty(\"name\", \"clarke\");\r\n    spds.setJndiEnvironment(properties);\r\n    assertEquals(\"clarke\", spds.getJndiEnvironment(\"name\"));\r\n    spds.setJndiEnvironment(\"name\", \"asimov\");\r\n    assertEquals(\"asimov\", spds.getJndiEnvironment(\"name\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\datasources\\TestInstanceKeyDataSource.java",
  "methodName" : "testJndiNullProperties",
  "sourceCode" : "@Test\r\nvoid testJndiNullProperties() {\r\n    assertThrows(NullPointerException.class, () -> spds.setJndiEnvironment(null));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\datasources\\TestInstanceKeyDataSource.java",
  "methodName" : "testJndiPropertiesCleared",
  "sourceCode" : "@Test\r\nvoid testJndiPropertiesCleared() {\r\n    spds.setJndiEnvironment(\"name\", \"king\");\r\n    assertEquals(\"king\", spds.getJndiEnvironment(\"name\"));\r\n    final Properties properties = new Properties();\r\n    properties.setProperty(\"fish\", \"kohi\");\r\n    spds.setJndiEnvironment(properties);\r\n    assertNull(spds.getJndiEnvironment(\"name\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\datasources\\TestInstanceKeyDataSource.java",
  "methodName" : "testJndiPropertiesNotInitialized",
  "sourceCode" : "@Test\r\nvoid testJndiPropertiesNotInitialized() {\r\n    assertNull(spds.getJndiEnvironment(\"name\"));\r\n    spds.setJndiEnvironment(\"name\", \"king\");\r\n    assertEquals(\"king\", spds.getJndiEnvironment(\"name\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\datasources\\TestInstanceKeyDataSource.java",
  "methodName" : "testLoginTimeout",
  "sourceCode" : "@Test\r\nvoid testLoginTimeout() {\r\n    spds.setLoginTimeout(10);\r\n    assertEquals(10, spds.getLoginTimeout());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\datasources\\TestInstanceKeyDataSource.java",
  "methodName" : "testLogWriter",
  "sourceCode" : "@SuppressWarnings(\"resource\")\r\n@Test\r\nvoid testLogWriter() {\r\n    spds.setLogWriter(new PrintWriter(System.out));\r\n    assertNotNull(spds.getLogWriter());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\datasources\\TestInstanceKeyDataSource.java",
  "methodName" : "testLogWriterAutoInitialized",
  "sourceCode" : "@SuppressWarnings(\"resource\")\r\n@Test\r\nvoid testLogWriterAutoInitialized() {\r\n    assertNotNull(spds.getLogWriter());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\datasources\\TestInstanceKeyDataSource.java",
  "methodName" : "testMaxConnLifetimeMillis",
  "sourceCode" : "@Test\r\nvoid testMaxConnLifetimeMillis() {\r\n    assertEquals(-1, spds.getMaxConnLifetimeMillis());\r\n    spds.setMaxConnLifetimeMillis(10);\r\n    assertEquals(10, spds.getMaxConnLifetimeMillis());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\datasources\\TestInstanceKeyDataSource.java",
  "methodName" : "testRollbackAfterValidation",
  "sourceCode" : "@Test\r\nvoid testRollbackAfterValidation() {\r\n    assertFalse(spds.isRollbackAfterValidation());\r\n    spds.setRollbackAfterValidation(true);\r\n    assertTrue(spds.isRollbackAfterValidation());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\datasources\\TestInstanceKeyDataSource.java",
  "methodName" : "testRollbackAfterValidationWithConnectionCalled",
  "sourceCode" : "@Test\r\nvoid testRollbackAfterValidationWithConnectionCalled() throws SQLException {\r\n    try (Connection connection = spds.getConnection()) {\r\n        assertFalse(spds.isRollbackAfterValidation());\r\n        assertThrows(IllegalStateException.class, () -> spds.setRollbackAfterValidation(true));\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\datasources\\TestInstanceKeyDataSource.java",
  "methodName" : "testUnwrap",
  "sourceCode" : "@SuppressWarnings(\"resource\")\r\n@Test\r\nvoid testUnwrap() throws Exception {\r\n    assertSame(spds.unwrap(InstanceKeyDataSource.class), spds);\r\n    assertSame(spds.unwrap(AutoCloseable.class), spds);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\datasources\\TestInstanceKeyDataSource.java",
  "methodName" : "testValidationQuery",
  "sourceCode" : "@Test\r\nvoid testValidationQuery() {\r\n    assertNull(spds.getValidationQuery());\r\n    spds.setValidationQuery(\"anything\");\r\n    assertEquals(\"anything\", spds.getValidationQuery());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\datasources\\TestInstanceKeyDataSource.java",
  "methodName" : "testValidationQueryTimeout",
  "sourceCode" : "@Test\r\nvoid testValidationQueryTimeout() {\r\n    assertEquals(-1, spds.getValidationQueryTimeout());\r\n    spds.setValidationQueryTimeout(10);\r\n    assertEquals(10, spds.getValidationQueryTimeout());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\datasources\\TestInstanceKeyDataSource.java",
  "methodName" : "testValidationQueryTimeoutDuration",
  "sourceCode" : "@Test\r\nvoid testValidationQueryTimeoutDuration() {\r\n    assertEquals(Duration.ofSeconds(-1), spds.getValidationQueryTimeoutDuration());\r\n    spds.setValidationQueryTimeout(Duration.ofSeconds(10));\r\n    assertEquals(Duration.ofSeconds(10), spds.getValidationQueryTimeoutDuration());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\datasources\\TestInstanceKeyDataSource.java",
  "methodName" : "testValidationQueryWithConnectionCalled",
  "sourceCode" : "@Test\r\nvoid testValidationQueryWithConnectionCalled() throws SQLException {\r\n    try (Connection connection = spds.getConnection()) {\r\n        assertNull(spds.getValidationQuery());\r\n        assertThrows(IllegalStateException.class, () -> spds.setValidationQuery(\"anything\"));\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\datasources\\TestKeyedCPDSConnectionFactory.java",
  "methodName" : "testConnectionErrorCleanup",
  "sourceCode" : "/**\r\n * JIRA DBCP-216\r\n *\r\n * Verify that pool counters are maintained properly and listeners are\r\n * cleaned up when a PooledConnection throws a connectionError event.\r\n */\r\n@Test\r\nvoid testConnectionErrorCleanup() throws Exception {\r\n    // Setup factory\r\n    final UserPassKey key = new UserPassKey(\"userName\", \"password\");\r\n    final KeyedCPDSConnectionFactory factory = new KeyedCPDSConnectionFactory(cpds, null, Duration.ofSeconds(-1), false);\r\n    try (final KeyedObjectPool<UserPassKey, PooledConnectionAndInfo> pool = new GenericKeyedObjectPool<>(factory)) {\r\n        factory.setPool(pool);\r\n        // Checkout a pair of connections\r\n        final PooledConnection pcon1 = pool.borrowObject(key).getPooledConnection();\r\n        try (final Connection con1 = pcon1.getConnection()) {\r\n            final PooledConnection pcon2 = pool.borrowObject(key).getPooledConnection();\r\n            assertEquals(2, pool.getNumActive(key));\r\n            assertEquals(0, pool.getNumIdle(key));\r\n            // Verify listening\r\n            final PooledConnectionProxy pc = (PooledConnectionProxy) pcon1;\r\n            assertTrue(pc.getListeners().contains(factory));\r\n            // Throw connectionError event\r\n            pc.throwConnectionError();\r\n            // Active count should be reduced by 1 and no idle increase\r\n            assertEquals(1, pool.getNumActive(key));\r\n            assertEquals(0, pool.getNumIdle(key));\r\n            // Throw another one - we should be on cleanup list, so ignored\r\n            pc.throwConnectionError();\r\n            assertEquals(1, pool.getNumActive(key));\r\n            assertEquals(0, pool.getNumIdle(key));\r\n            // Ask for another connection - should trigger makeObject, which causes\r\n            // cleanup, removing listeners.\r\n            final PooledConnection pcon3 = pool.borrowObject(key).getPooledConnection();\r\n            // better not get baddie back\r\n            assertNotEquals(pcon3, pcon1);\r\n            // verify cleanup\r\n            assertFalse(pc.getListeners().contains(factory));\r\n            assertEquals(2, pool.getNumActive(key));\r\n            assertEquals(0, pool.getNumIdle(key));\r\n            // Return good connections back to pool\r\n            pcon2.getConnection().close();\r\n            pcon3.getConnection().close();\r\n            assertEquals(2, pool.getNumIdle(key));\r\n            assertEquals(0, pool.getNumActive(key));\r\n            // Verify pc is closed\r\n            assertThrows(SQLException.class, pc::getConnection, \"Expecting SQLException using closed PooledConnection\");\r\n            // Back from the dead - ignore the ghost!\r\n        }\r\n        assertEquals(2, pool.getNumIdle(key));\r\n        assertEquals(0, pool.getNumActive(key));\r\n        // Clear pool\r\n        pool.clear();\r\n        assertEquals(0, pool.getNumIdle(key));\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\datasources\\TestKeyedCPDSConnectionFactory.java",
  "methodName" : "testNullValidationQuery",
  "sourceCode" : "/**\r\n * JIRA: DBCP-442\r\n */\r\n@Test\r\nvoid testNullValidationQuery() throws Exception {\r\n    final UserPassKey key = new UserPassKey(\"userName\", \"password\");\r\n    final KeyedCPDSConnectionFactory factory = new KeyedCPDSConnectionFactory(cpds, null, Duration.ofSeconds(-1), false);\r\n    try (final GenericKeyedObjectPool<UserPassKey, PooledConnectionAndInfo> pool = new GenericKeyedObjectPool<>(factory)) {\r\n        factory.setPool(pool);\r\n        pool.setTestOnBorrow(true);\r\n        final PooledConnection pcon = pool.borrowObject(key).getPooledConnection();\r\n        try (final Connection con = pcon.getConnection()) {\r\n        }\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\datasources\\TestKeyedCPDSConnectionFactory.java",
  "methodName" : "testSharedPoolDSDestroyOnReturn",
  "sourceCode" : "/**\r\n * JIRA DBCP-216\r\n *\r\n * Check PoolableConnection close triggered by destroy is handled\r\n * properly. PooledConnectionProxy (dubiously) fires connectionClosed\r\n * when PooledConnection itself is closed.\r\n */\r\n@Test\r\nvoid testSharedPoolDSDestroyOnReturn() throws Exception {\r\n    try (final SharedPoolDataSource ds = new SharedPoolDataSource()) {\r\n        ds.setConnectionPoolDataSource(cpds);\r\n        ds.setMaxTotal(10);\r\n        ds.setDefaultMaxWait(Duration.ofMillis(50));\r\n        ds.setDefaultMaxIdle(2);\r\n        final Connection conn1 = ds.getConnection(\"userName\", \"password\");\r\n        final Connection conn2 = ds.getConnection(\"userName\", \"password\");\r\n        final Connection conn3 = ds.getConnection(\"userName\", \"password\");\r\n        assertEquals(3, ds.getNumActive());\r\n        conn1.close();\r\n        assertEquals(1, ds.getNumIdle());\r\n        conn2.close();\r\n        assertEquals(2, ds.getNumIdle());\r\n        // Return to pool will trigger destroy -> close sequence\r\n        conn3.close();\r\n        assertEquals(2, ds.getNumIdle());\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\datasources\\TestPerUserPoolDataSource.java",
  "methodName" : "testChangePassword",
  "sourceCode" : "/**\r\n * See DBCP-8\r\n */\r\n@Test\r\nvoid testChangePassword() throws Exception {\r\n    assertThrows(SQLException.class, () -> ds.getConnection(user, \"bay\"));\r\n    final Connection con1 = ds.getConnection(user, \"bar\");\r\n    final Connection con2 = ds.getConnection(user, \"bar\");\r\n    final Connection con3 = ds.getConnection(user, \"bar\");\r\n    con1.close();\r\n    con2.close();\r\n    // change the user/password setting\r\n    TesterDriver.addUser(user, \"bay\");\r\n    try {\r\n        // new password\r\n        final Connection con4 = ds.getConnection(user, \"bay\");\r\n        // Idle instances with old password should have been cleared\r\n        assertEquals(0, ((PerUserPoolDataSource) ds).getNumIdle(user), \"Should be no idle connections in the pool\");\r\n        con4.close();\r\n        // Should be one idle instance with new pwd\r\n        assertEquals(1, ((PerUserPoolDataSource) ds).getNumIdle(user), \"Should be one idle connection in the pool\");\r\n        // old password\r\n        assertThrows(SQLException.class, () -> ds.getConnection(user, \"bar\"), \"Should have generated SQLException\");\r\n        try (Connection con5 = ds.getConnection(user, \"bay\")) {\r\n            // take the idle one\r\n            // Return a connection with the old password\r\n            con3.close();\r\n            // will try bad returned connection and destroy it\r\n            ds.getConnection(user, \"bay\").close();\r\n            assertEquals(1, ((PerUserPoolDataSource) ds).getNumIdle(user), \"Should be one idle connection in the pool\");\r\n        }\r\n    } finally {\r\n        TesterDriver.addUser(user, \"bar\");\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\datasources\\TestPerUserPoolDataSource.java",
  "methodName" : "testClosing",
  "sourceCode" : "@Override\r\n@Test\r\npublic void testClosing() throws Exception {\r\n    final Connection[] c = new Connection[getMaxTotal()];\r\n    // open the maximum connections\r\n    for (int i = 0; i < c.length; i++) {\r\n        c[i] = ds.getConnection();\r\n    }\r\n    // close one of the connections\r\n    c[0].close();\r\n    assertTrue(c[0].isClosed());\r\n    // get a new connection\r\n    c[0] = ds.getConnection();\r\n    for (final Connection element : c) {\r\n        element.close();\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\datasources\\TestPerUserPoolDataSource.java",
  "methodName" : "testClosingWithUserName",
  "sourceCode" : "@Test\r\nvoid testClosingWithUserName() throws Exception {\r\n    final Connection[] c = new Connection[getMaxTotal()];\r\n    // open the maximum connections\r\n    for (int i = 0; i < c.length; i++) {\r\n        c[i] = ds.getConnection(\"u1\", \"p1\");\r\n    }\r\n    // close one of the connections\r\n    c[0].close();\r\n    assertTrue(c[0].isClosed());\r\n    // get a new connection\r\n    c[0] = ds.getConnection(\"u1\", \"p1\");\r\n    for (final Connection element : c) {\r\n        element.close();\r\n    }\r\n    // open the maximum connections\r\n    for (int i = 0; i < c.length; i++) {\r\n        c[i] = ds.getConnection(\"u1\", \"p1\");\r\n    }\r\n    for (final Connection element : c) {\r\n        element.close();\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\datasources\\TestPerUserPoolDataSource.java",
  "methodName" : "testDbcp597",
  "sourceCode" : "/**\r\n * Tests https://issues.apache.org/jira/browse/DBCP-597\r\n */\r\n@Test\r\nvoid testDbcp597() throws SQLException {\r\n    final PerUserPoolDataSource tds = (PerUserPoolDataSource) ds;\r\n    tds.setDefaultTestOnBorrow(true);\r\n    tds.setValidationQuery(\"SELECT 1\");\r\n    // The tester statement throws a SQLTimeoutException when the timeout is > 0 and < 5.\r\n    tds.setValidationQueryTimeout(Duration.ofSeconds(1));\r\n    // The SQLTimeoutException is lost for now\r\n    SQLException e = assertThrows(SQLException.class, tds::getConnection);\r\n    assertEquals(NoSuchElementException.class, e.getCause().getClass());\r\n    // timeout > 0 and < 1\r\n    tds.setValidationQueryTimeout(Duration.ofMillis(999));\r\n    // The SQLTimeoutException is lost for now\r\n    e = assertThrows(SQLException.class, tds::getConnection);\r\n    assertEquals(NoSuchElementException.class, e.getCause().getClass());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\datasources\\TestPerUserPoolDataSource.java",
  "methodName" : "testDefaultReadOnly",
  "sourceCode" : "@Test\r\nvoid testDefaultReadOnly() {\r\n    try (PerUserPoolDataSource ds = new PerUserPoolDataSource()) {\r\n        assertNull(ds.isDefaultReadOnly());\r\n        ds.setDefaultReadOnly(true);\r\n        assertTrue(ds.isDefaultReadOnly().booleanValue());\r\n        ds.setDefaultReadOnly(false);\r\n        assertFalse(ds.isDefaultReadOnly().booleanValue());\r\n        ds.setDefaultReadOnly(true);\r\n        assertTrue(ds.isDefaultReadOnly().booleanValue());\r\n        ds.setDefaultReadOnly(null);\r\n        assertNull(ds.isDefaultReadOnly());\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\datasources\\TestPerUserPoolDataSource.java",
  "methodName" : "testDefaultUser1",
  "sourceCode" : "// see issue https://issues.apache.org/bugzilla/show_bug.cgi?id=23843\r\n@Test\r\nvoid testDefaultUser1() throws Exception {\r\n    TesterDriver.addUser(\"mkh\", \"password\");\r\n    TesterDriver.addUser(\"hanafey\", \"password\");\r\n    TesterDriver.addUser(\"jsmith\", \"password\");\r\n    final PerUserPoolDataSource puds = (PerUserPoolDataSource) ds;\r\n    puds.setPerUserMaxTotal(\"jsmith\", 2);\r\n    final String[] users = { \"mkh\", \"hanafey\", \"jsmith\" };\r\n    final String password = \"password\";\r\n    final Connection[] c = new Connection[users.length];\r\n    for (int i = 0; i < users.length; i++) {\r\n        c[i] = puds.getConnection(users[i], password);\r\n        assertEquals(users[i], getUsername(c[i]));\r\n    }\r\n    for (int i = 0; i < users.length; i++) {\r\n        c[i].close();\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\datasources\\TestPerUserPoolDataSource.java",
  "methodName" : "testDefaultUser2",
  "sourceCode" : "// see issue https://issues.apache.org/bugzilla/show_bug.cgi?id=23843\r\n@Test\r\nvoid testDefaultUser2() throws Exception {\r\n    TesterDriver.addUser(\"mkh\", \"password\");\r\n    TesterDriver.addUser(\"hanafey\", \"password\");\r\n    TesterDriver.addUser(\"jsmith\", \"password\");\r\n    final PerUserPoolDataSource puds = (PerUserPoolDataSource) ds;\r\n    puds.setPerUserMaxTotal(\"jsmith\", 2);\r\n    final String[] users = { \"jsmith\", \"hanafey\", \"mkh\" };\r\n    final String password = \"password\";\r\n    final Connection[] c = new Connection[users.length];\r\n    for (int i = 0; i < users.length; i++) {\r\n        c[i] = puds.getConnection(users[i], password);\r\n        assertEquals(users[i], getUsername(c[i]));\r\n    }\r\n    for (int i = 0; i < users.length; i++) {\r\n        c[i].close();\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\datasources\\TestPerUserPoolDataSource.java",
  "methodName" : "testDepreactedAccessors",
  "sourceCode" : "@SuppressWarnings(\"deprecation\")\r\n@Test\r\nvoid testDepreactedAccessors() {\r\n    try (final PerUserPoolDataSource ds = new PerUserPoolDataSource()) {\r\n        int i = 0;\r\n        //\r\n        i++;\r\n        ds.setDefaultMaxWaitMillis(i);\r\n        assertEquals(i, ds.getDefaultMaxWaitMillis());\r\n        assertEquals(Duration.ofMillis(i), ds.getDefaultMaxWait());\r\n        //\r\n        i++;\r\n        ds.setDefaultMinEvictableIdleTimeMillis(i);\r\n        assertEquals(i, ds.getDefaultMinEvictableIdleTimeMillis());\r\n        assertEquals(Duration.ofMillis(i), ds.getDefaultMinEvictableIdleDuration());\r\n        //\r\n        i++;\r\n        ds.setDefaultSoftMinEvictableIdleTimeMillis(i);\r\n        assertEquals(i, ds.getDefaultSoftMinEvictableIdleTimeMillis());\r\n        assertEquals(Duration.ofMillis(i), ds.getDefaultSoftMinEvictableIdleDuration());\r\n        //\r\n        i++;\r\n        ds.setDefaultTimeBetweenEvictionRunsMillis(i);\r\n        assertEquals(i, ds.getDefaultTimeBetweenEvictionRunsMillis());\r\n        assertEquals(Duration.ofMillis(i), ds.getDefaultDurationBetweenEvictionRuns());\r\n        //\r\n        i++;\r\n        ds.setPerUserMaxWaitMillis(user, Long.valueOf(i));\r\n        assertEquals(i, ds.getPerUserMaxWaitMillis(user));\r\n        assertEquals(Duration.ofMillis(i), ds.getPerUserMaxWaitDuration(user));\r\n        //\r\n        i++;\r\n        ds.setPerUserMinEvictableIdleTimeMillis(user, Long.valueOf(i));\r\n        assertEquals(i, ds.getPerUserMinEvictableIdleTimeMillis(user));\r\n        assertEquals(Duration.ofMillis(i), ds.getPerUserMinEvictableIdleDuration(user));\r\n        //\r\n        i++;\r\n        ds.setPerUserSoftMinEvictableIdleTimeMillis(user, Long.valueOf(i));\r\n        assertEquals(i, ds.getPerUserSoftMinEvictableIdleTimeMillis(user));\r\n        assertEquals(Duration.ofMillis(i), ds.getPerUserSoftMinEvictableIdleDuration(user));\r\n        //\r\n        i++;\r\n        ds.setPerUserTimeBetweenEvictionRunsMillis(user, Long.valueOf(i));\r\n        assertEquals(i, ds.getPerUserTimeBetweenEvictionRunsMillis(user));\r\n        assertEquals(Duration.ofMillis(i), ds.getPerUserDurationBetweenEvictionRuns(user));\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\datasources\\TestPerUserPoolDataSource.java",
  "methodName" : "testIncorrectPassword",
  "sourceCode" : "/**\r\n * Switching 'u1 to 'u2' and 'p1' to 'p2' will exhibit the bug detailed in https://issues.apache.org/bugzilla/show_bug.cgi?id=18905\r\n */\r\n@Test\r\nvoid testIncorrectPassword() throws SQLException {\r\n    // Use bad password\r\n    assertThrows(SQLException.class, () -> ds.getConnection(\"u1\", \"zlsafjk\"));\r\n    // Use good password\r\n    ds.getConnection(\"u1\", \"p1\").close();\r\n    final SQLException e = assertThrows(SQLException.class, () -> ds.getConnection(\"u1\", \"x\"), \"Able to retrieve connection with incorrect password\");\r\n    assertTrue(e.getMessage().startsWith(\"Given password did not match\"));\r\n    // Make sure we can still use our good password.\r\n    ds.getConnection(\"u1\", \"p1\").close();\r\n    // Try related users and passwords\r\n    ds.getConnection(user, \"bar\").close();\r\n    assertThrows(SQLException.class, () -> ds.getConnection(\"foob\", \"ar\"));\r\n    assertThrows(SQLException.class, () -> ds.getConnection(user, \"baz\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\datasources\\TestPerUserPoolDataSource.java",
  "methodName" : "testMaxTotal",
  "sourceCode" : "@Override\r\n@Test\r\npublic void testMaxTotal() throws Exception {\r\n    final Connection[] c = new Connection[getMaxTotal()];\r\n    for (int i = 0; i < c.length; i++) {\r\n        c[i] = ds.getConnection();\r\n        assertNotNull(c[i]);\r\n    }\r\n    // should only be able to open 10 connections, so this test should throw an\r\n    // exception\r\n    assertThrows(SQLException.class, ds::getConnection, \"Allowed to open more than DefaultMaxTotal connections.\");\r\n    for (final Connection element : c) {\r\n        element.close();\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\datasources\\TestPerUserPoolDataSource.java",
  "methodName" : "testMaxWaitMillisZero",
  "sourceCode" : "/**\r\n * Verify that defaultMaxWaitMillis = 0 means immediate failure when pool is exhausted.\r\n */\r\n@Test\r\nvoid testMaxWaitMillisZero() throws Exception {\r\n    final PerUserPoolDataSource tds = (PerUserPoolDataSource) ds;\r\n    tds.setDefaultMaxWait(Duration.ZERO);\r\n    tds.setPerUserMaxTotal(\"u1\", 1);\r\n    try (final Connection conn = tds.getConnection(\"u1\", \"p1\")) {\r\n        assertThrows(SQLException.class, () -> tds.getConnection(\"u1\", \"p1\"));\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\datasources\\TestPerUserPoolDataSource.java",
  "methodName" : "testMultipleThreads1",
  "sourceCode" : "@Test\r\nvoid testMultipleThreads1() throws Exception {\r\n    // Override wait time in order to allow for Thread.sleep(1) sometimes taking a lot longer on\r\n    // some JVMs, e.g. Windows.\r\n    final Duration defaultMaxWaitDuration = Duration.ofMillis(430);\r\n    ((PerUserPoolDataSource) ds).setDefaultMaxWait(defaultMaxWaitDuration);\r\n    ((PerUserPoolDataSource) ds).setPerUserMaxWait(user, defaultMaxWaitDuration);\r\n    multipleThreads(Duration.ofMillis(1), false, false, defaultMaxWaitDuration);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\datasources\\TestPerUserPoolDataSource.java",
  "methodName" : "testMultipleThreads2",
  "sourceCode" : "@Test\r\nvoid testMultipleThreads2() throws Exception {\r\n    final Duration defaultMaxWaitDuration = Duration.ofMillis(500);\r\n    ((PerUserPoolDataSource) ds).setDefaultMaxWait(defaultMaxWaitDuration);\r\n    ((PerUserPoolDataSource) ds).setPerUserMaxWait(user, defaultMaxWaitDuration);\r\n    multipleThreads(defaultMaxWaitDuration.multipliedBy(2), true, true, defaultMaxWaitDuration);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\datasources\\TestPerUserPoolDataSource.java",
  "methodName" : "testOpening",
  "sourceCode" : "@Override\r\n@Test\r\npublic void testOpening() throws Exception {\r\n    final Connection[] c = new Connection[getMaxTotal()];\r\n    // test that opening new connections is not closing previous\r\n    for (int i = 0; i < c.length; i++) {\r\n        c[i] = ds.getConnection();\r\n        assertNotNull(c[i]);\r\n        for (int j = 0; j <= i; j++) {\r\n            assertFalse(c[j].isClosed());\r\n        }\r\n    }\r\n    for (final Connection element : c) {\r\n        element.close();\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\datasources\\TestPerUserPoolDataSource.java",
  "methodName" : "testPerUserBlockWhenExhaustedMapInitialized",
  "sourceCode" : "/**\r\n * Test per user block when exhausted, with the backing map initialized before.\r\n */\r\n@Test\r\nvoid testPerUserBlockWhenExhaustedMapInitialized() {\r\n    final PerUserPoolDataSource ds = (PerUserPoolDataSource) this.ds;\r\n    Map<String, Boolean> userDefaultBlockWhenExhausted = new HashMap<>();\r\n    userDefaultBlockWhenExhausted.put(\"key\", Boolean.FALSE);\r\n    ds.setPerUserBlockWhenExhausted(userDefaultBlockWhenExhausted);\r\n    assertEquals(Boolean.FALSE, ds.getPerUserBlockWhenExhausted(\"key\"));\r\n    // when the code above is executed, the backing map was initalized\r\n    // now check if that still works. The backing map is clear'ed.\r\n    userDefaultBlockWhenExhausted = new HashMap<>();\r\n    userDefaultBlockWhenExhausted.put(\"anonymous\", Boolean.FALSE);\r\n    ds.setPerUserBlockWhenExhausted(userDefaultBlockWhenExhausted);\r\n    // now the previously entered value was cleared, so it will be back to the\r\n    // default value of TRUE\r\n    assertEquals(Boolean.TRUE, ds.getPerUserBlockWhenExhausted(\"key\"));\r\n    // and our new value exists too\r\n    assertEquals(Boolean.FALSE, ds.getPerUserBlockWhenExhausted(\"anonymous\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\datasources\\TestPerUserPoolDataSource.java",
  "methodName" : "testPerUserBlockWhenExhaustedMapNotInitialized",
  "sourceCode" : "/**\r\n * Test per user block when exhausted, with the backing map not initialized before. Instead we pass the map.\r\n */\r\n@Test\r\nvoid testPerUserBlockWhenExhaustedMapNotInitialized() {\r\n    final PerUserPoolDataSource ds = (PerUserPoolDataSource) this.ds;\r\n    final Map<String, Boolean> userDefaultBlockWhenExhausted = new HashMap<>();\r\n    userDefaultBlockWhenExhausted.put(\"key\", Boolean.TRUE);\r\n    ds.setPerUserBlockWhenExhausted(userDefaultBlockWhenExhausted);\r\n    assertEquals(Boolean.TRUE, ds.getPerUserBlockWhenExhausted(\"key\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\datasources\\TestPerUserPoolDataSource.java",
  "methodName" : "testPerUserBlockWhenExhaustedMapNotInitializedMissingKey",
  "sourceCode" : "/**\r\n * Test per user block when exhausted, with the backing map not initialized before. Instead, we pass the map. And furthermore, we are now searching for an\r\n * inexistent key, which should return the default value.\r\n */\r\n@Test\r\nvoid testPerUserBlockWhenExhaustedMapNotInitializedMissingKey() {\r\n    final PerUserPoolDataSource ds = (PerUserPoolDataSource) this.ds;\r\n    final Map<String, Boolean> userDefaultBlockWhenExhausted = new HashMap<>();\r\n    userDefaultBlockWhenExhausted.put(\"key\", Boolean.FALSE);\r\n    ds.setPerUserBlockWhenExhausted(userDefaultBlockWhenExhausted);\r\n    assertEquals(ds.getDefaultBlockWhenExhausted(), ds.getPerUserBlockWhenExhausted(\"missingkey\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\datasources\\TestPerUserPoolDataSource.java",
  "methodName" : "testPerUserBlockWhenExhaustedWithUserMapInitialized",
  "sourceCode" : "/**\r\n * Test per user block when exhausted, with the backing map not initialized before. Instead we pass the user and value, and hence the map is initialized\r\n * beforehand. After that, we pass another user, so both values should still be present. The PerUserPoolDataSource does not clear the perUserPoolDataSource\r\n * map, unless you pass a new map, using another internal/package method.\r\n */\r\n@Test\r\nvoid testPerUserBlockWhenExhaustedWithUserMapInitialized() {\r\n    final PerUserPoolDataSource ds = (PerUserPoolDataSource) this.ds;\r\n    ds.setPerUserBlockWhenExhausted(user, Boolean.FALSE);\r\n    assertEquals(Boolean.FALSE, ds.getPerUserBlockWhenExhausted(user));\r\n    // when the code above is executed, the backing map was initalized\r\n    // now check if that still works. The backing map is NOT clear'ed.\r\n    ds.setPerUserBlockWhenExhausted(\"anotheruser\", Boolean.FALSE);\r\n    assertEquals(Boolean.FALSE, ds.getPerUserBlockWhenExhausted(user));\r\n    assertEquals(Boolean.FALSE, ds.getPerUserBlockWhenExhausted(\"anotheruser\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\datasources\\TestPerUserPoolDataSource.java",
  "methodName" : "testPerUserBlockWhenExhaustedWithUserMapNotInitialized",
  "sourceCode" : "/**\r\n * Test per user block when exhausted, with the backing map not initialized before. Instead we pass the user and value, and hence the map is initialized\r\n * beforehand.\r\n */\r\n@Test\r\nvoid testPerUserBlockWhenExhaustedWithUserMapNotInitialized() {\r\n    final PerUserPoolDataSource ds = (PerUserPoolDataSource) this.ds;\r\n    ds.setPerUserBlockWhenExhausted(user, Boolean.FALSE);\r\n    assertEquals(Boolean.FALSE, ds.getPerUserBlockWhenExhausted(user));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\datasources\\TestPerUserPoolDataSource.java",
  "methodName" : "testPerUserBlockWhenExhaustedWithUserMapNotInitializedMissingKey",
  "sourceCode" : "/**\r\n * Test per user block when exhausted, with the backing map not initialized before. Instead we pass the user and value, and hence the map is initialized\r\n * beforehand. Furthermore, we are now searching for an inexistent key, which should return the default value.\r\n */\r\n@Test\r\nvoid testPerUserBlockWhenExhaustedWithUserMapNotInitializedMissingKey() {\r\n    final PerUserPoolDataSource ds = (PerUserPoolDataSource) this.ds;\r\n    ds.setPerUserBlockWhenExhausted(\"whatismyuseragain?\", Boolean.FALSE);\r\n    assertEquals(Boolean.TRUE, ds.getPerUserBlockWhenExhausted(\"missingkey\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\datasources\\TestPerUserPoolDataSource.java",
  "methodName" : "testPerUserDefaultAutoCommitMapInitialized",
  "sourceCode" : "// getters and setters. Most follow the same pattern. The initial tests contain a more\r\n// complete documentation, which can be helpful when write/understanding the other methods.\r\n// -- per user block when exhausted\r\n@Test\r\nvoid testPerUserDefaultAutoCommitMapInitialized() {\r\n    final PerUserPoolDataSource ds = (PerUserPoolDataSource) this.ds;\r\n    Map<String, Boolean> values = new HashMap<>();\r\n    values.put(\"key\", Boolean.FALSE);\r\n    ds.setPerUserDefaultAutoCommit(values);\r\n    assertEquals(Boolean.FALSE, ds.getPerUserDefaultAutoCommit(\"key\"));\r\n    values = new HashMap<>();\r\n    values.put(\"anonymous\", Boolean.FALSE);\r\n    ds.setPerUserDefaultAutoCommit(values);\r\n    assertNull(ds.getPerUserDefaultAutoCommit(\"key\"));\r\n    assertEquals(Boolean.FALSE, ds.getPerUserDefaultAutoCommit(\"anonymous\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\datasources\\TestPerUserPoolDataSource.java",
  "methodName" : "testPerUserDefaultAutoCommitMapNotInitialized",
  "sourceCode" : "@Test\r\nvoid testPerUserDefaultAutoCommitMapNotInitialized() {\r\n    final PerUserPoolDataSource ds = (PerUserPoolDataSource) this.ds;\r\n    final Map<String, Boolean> values = new HashMap<>();\r\n    values.put(\"key\", Boolean.TRUE);\r\n    ds.setPerUserDefaultAutoCommit(values);\r\n    assertEquals(Boolean.TRUE, ds.getPerUserDefaultAutoCommit(\"key\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\datasources\\TestPerUserPoolDataSource.java",
  "methodName" : "testPerUserDefaultAutoCommitMapNotInitializedMissingKey",
  "sourceCode" : "@Test\r\nvoid testPerUserDefaultAutoCommitMapNotInitializedMissingKey() {\r\n    final PerUserPoolDataSource ds = (PerUserPoolDataSource) this.ds;\r\n    final Map<String, Boolean> values = new HashMap<>();\r\n    values.put(\"key\", Boolean.FALSE);\r\n    ds.setPerUserDefaultAutoCommit(values);\r\n    // TODO this is not consistent with the other methods\r\n    assertNull(ds.getPerUserDefaultAutoCommit(\"missingkey\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\datasources\\TestPerUserPoolDataSource.java",
  "methodName" : "testPerUserDefaultAutoCommitWithUserMapInitialized",
  "sourceCode" : "@Test\r\nvoid testPerUserDefaultAutoCommitWithUserMapInitialized() {\r\n    final PerUserPoolDataSource ds = (PerUserPoolDataSource) this.ds;\r\n    ds.setPerUserDefaultAutoCommit(user, Boolean.FALSE);\r\n    assertEquals(Boolean.FALSE, ds.getPerUserDefaultAutoCommit(user));\r\n    ds.setPerUserDefaultAutoCommit(\"anotheruser\", Boolean.FALSE);\r\n    assertEquals(Boolean.FALSE, ds.getPerUserDefaultAutoCommit(user));\r\n    assertEquals(Boolean.FALSE, ds.getPerUserDefaultAutoCommit(\"anotheruser\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\datasources\\TestPerUserPoolDataSource.java",
  "methodName" : "testPerUserDefaultAutoCommitWithUserMapNotInitialized",
  "sourceCode" : "@Test\r\nvoid testPerUserDefaultAutoCommitWithUserMapNotInitialized() {\r\n    final PerUserPoolDataSource ds = (PerUserPoolDataSource) this.ds;\r\n    ds.setPerUserDefaultAutoCommit(user, Boolean.FALSE);\r\n    assertEquals(Boolean.FALSE, ds.getPerUserDefaultAutoCommit(user));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\datasources\\TestPerUserPoolDataSource.java",
  "methodName" : "testPerUserDefaultAutoCommitWithUserMapNotInitializedMissingKey",
  "sourceCode" : "@Test\r\nvoid testPerUserDefaultAutoCommitWithUserMapNotInitializedMissingKey() {\r\n    final PerUserPoolDataSource ds = (PerUserPoolDataSource) this.ds;\r\n    ds.setPerUserDefaultAutoCommit(\"whatismyuseragain?\", Boolean.FALSE);\r\n    // TODO this is not consistent with the other methods\r\n    assertNull(ds.getPerUserDefaultAutoCommit(\"missingkey\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\datasources\\TestPerUserPoolDataSource.java",
  "methodName" : "testPerUserDefaultReadOnlyMapInitialized",
  "sourceCode" : "// -- per user default auto commit\r\n@Test\r\nvoid testPerUserDefaultReadOnlyMapInitialized() {\r\n    final PerUserPoolDataSource ds = (PerUserPoolDataSource) this.ds;\r\n    Map<String, Boolean> values = new HashMap<>();\r\n    values.put(\"key\", Boolean.FALSE);\r\n    ds.setPerUserDefaultReadOnly(values);\r\n    assertEquals(Boolean.FALSE, ds.getPerUserDefaultReadOnly(\"key\"));\r\n    values = new HashMap<>();\r\n    values.put(\"anonymous\", Boolean.FALSE);\r\n    ds.setPerUserDefaultReadOnly(values);\r\n    assertNull(ds.getPerUserDefaultReadOnly(\"key\"));\r\n    assertEquals(Boolean.FALSE, ds.getPerUserDefaultReadOnly(\"anonymous\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\datasources\\TestPerUserPoolDataSource.java",
  "methodName" : "testPerUserDefaultReadOnlyMapNotInitialized",
  "sourceCode" : "@Test\r\nvoid testPerUserDefaultReadOnlyMapNotInitialized() {\r\n    final PerUserPoolDataSource ds = (PerUserPoolDataSource) this.ds;\r\n    final Map<String, Boolean> values = new HashMap<>();\r\n    values.put(\"key\", Boolean.TRUE);\r\n    ds.setPerUserDefaultReadOnly(values);\r\n    assertEquals(Boolean.TRUE, ds.getPerUserDefaultReadOnly(\"key\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\datasources\\TestPerUserPoolDataSource.java",
  "methodName" : "testPerUserDefaultReadOnlyMapNotInitializedMissingKey",
  "sourceCode" : "@Test\r\nvoid testPerUserDefaultReadOnlyMapNotInitializedMissingKey() {\r\n    final PerUserPoolDataSource ds = (PerUserPoolDataSource) this.ds;\r\n    final Map<String, Boolean> values = new HashMap<>();\r\n    values.put(\"key\", Boolean.FALSE);\r\n    ds.setPerUserDefaultReadOnly(values);\r\n    // TODO this is not consistent with the other methods\r\n    assertNull(ds.getPerUserDefaultReadOnly(\"missingkey\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\datasources\\TestPerUserPoolDataSource.java",
  "methodName" : "testPerUserDefaultReadOnlyWithUserMapInitialized",
  "sourceCode" : "@Test\r\nvoid testPerUserDefaultReadOnlyWithUserMapInitialized() {\r\n    final PerUserPoolDataSource ds = (PerUserPoolDataSource) this.ds;\r\n    ds.setPerUserDefaultReadOnly(user, Boolean.FALSE);\r\n    assertEquals(Boolean.FALSE, ds.getPerUserDefaultReadOnly(user));\r\n    ds.setPerUserDefaultReadOnly(\"anotheruser\", Boolean.FALSE);\r\n    assertEquals(Boolean.FALSE, ds.getPerUserDefaultReadOnly(user));\r\n    assertEquals(Boolean.FALSE, ds.getPerUserDefaultReadOnly(\"anotheruser\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\datasources\\TestPerUserPoolDataSource.java",
  "methodName" : "testPerUserDefaultReadOnlyWithUserMapNotInitialized",
  "sourceCode" : "@Test\r\nvoid testPerUserDefaultReadOnlyWithUserMapNotInitialized() {\r\n    final PerUserPoolDataSource ds = (PerUserPoolDataSource) this.ds;\r\n    ds.setPerUserDefaultReadOnly(user, Boolean.FALSE);\r\n    assertEquals(Boolean.FALSE, ds.getPerUserDefaultReadOnly(user));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\datasources\\TestPerUserPoolDataSource.java",
  "methodName" : "testPerUserDefaultReadOnlyWithUserMapNotInitializedMissingKey",
  "sourceCode" : "@Test\r\nvoid testPerUserDefaultReadOnlyWithUserMapNotInitializedMissingKey() {\r\n    final PerUserPoolDataSource ds = (PerUserPoolDataSource) this.ds;\r\n    ds.setPerUserDefaultReadOnly(\"whatismyuseragain?\", Boolean.FALSE);\r\n    // TODO this is not consistent with the other methods\r\n    assertNull(ds.getPerUserDefaultReadOnly(\"missingkey\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\datasources\\TestPerUserPoolDataSource.java",
  "methodName" : "testPerUserDefaultTransactionIsolationMapInitialized",
  "sourceCode" : "// -- per user default read only\r\n@Test\r\nvoid testPerUserDefaultTransactionIsolationMapInitialized() {\r\n    final PerUserPoolDataSource ds = (PerUserPoolDataSource) this.ds;\r\n    Map<String, Integer> values = new HashMap<>();\r\n    values.put(\"key\", 0);\r\n    ds.setPerUserDefaultTransactionIsolation(values);\r\n    assertEquals((Integer) 0, ds.getPerUserDefaultTransactionIsolation(\"key\"));\r\n    values = new HashMap<>();\r\n    values.put(\"anonymous\", 0);\r\n    ds.setPerUserDefaultTransactionIsolation(values);\r\n    // TODO this is not consistent with the other methods\r\n    assertNull(ds.getPerUserDefaultTransactionIsolation(\"key\"));\r\n    assertEquals((Integer) 0, ds.getPerUserDefaultTransactionIsolation(\"anonymous\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\datasources\\TestPerUserPoolDataSource.java",
  "methodName" : "testPerUserDefaultTransactionIsolationMapNotInitialized",
  "sourceCode" : "@Test\r\nvoid testPerUserDefaultTransactionIsolationMapNotInitialized() {\r\n    final PerUserPoolDataSource ds = (PerUserPoolDataSource) this.ds;\r\n    final Map<String, Integer> values = new HashMap<>();\r\n    values.put(\"key\", 1);\r\n    ds.setPerUserDefaultTransactionIsolation(values);\r\n    assertEquals((Integer) 1, ds.getPerUserDefaultTransactionIsolation(\"key\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\datasources\\TestPerUserPoolDataSource.java",
  "methodName" : "testPerUserDefaultTransactionIsolationMapNotInitializedMissingKey",
  "sourceCode" : "@Test\r\nvoid testPerUserDefaultTransactionIsolationMapNotInitializedMissingKey() {\r\n    final PerUserPoolDataSource ds = (PerUserPoolDataSource) this.ds;\r\n    final Map<String, Integer> values = new HashMap<>();\r\n    values.put(\"key\", 0);\r\n    ds.setPerUserDefaultTransactionIsolation(values);\r\n    // TODO this is not consistent with the other methods\r\n    assertNull(ds.getPerUserDefaultTransactionIsolation(\"missingkey\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\datasources\\TestPerUserPoolDataSource.java",
  "methodName" : "testPerUserDefaultTransactionIsolationWithUserMapInitialized",
  "sourceCode" : "@Test\r\nvoid testPerUserDefaultTransactionIsolationWithUserMapInitialized() {\r\n    final PerUserPoolDataSource ds = (PerUserPoolDataSource) this.ds;\r\n    ds.setPerUserDefaultTransactionIsolation(user, 0);\r\n    assertEquals((Integer) 0, ds.getPerUserDefaultTransactionIsolation(user));\r\n    ds.setPerUserDefaultTransactionIsolation(\"anotheruser\", 0);\r\n    assertEquals((Integer) 0, ds.getPerUserDefaultTransactionIsolation(user));\r\n    assertEquals((Integer) 0, ds.getPerUserDefaultTransactionIsolation(\"anotheruser\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\datasources\\TestPerUserPoolDataSource.java",
  "methodName" : "testPerUserDefaultTransactionIsolationWithUserMapNotInitialized",
  "sourceCode" : "@Test\r\nvoid testPerUserDefaultTransactionIsolationWithUserMapNotInitialized() {\r\n    final PerUserPoolDataSource ds = (PerUserPoolDataSource) this.ds;\r\n    ds.setPerUserDefaultTransactionIsolation(user, 0);\r\n    assertEquals((Integer) 0, ds.getPerUserDefaultTransactionIsolation(user));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\datasources\\TestPerUserPoolDataSource.java",
  "methodName" : "testPerUserDefaultTransactionIsolationWithUserMapNotInitializedMissingKey",
  "sourceCode" : "@Test\r\nvoid testPerUserDefaultTransactionIsolationWithUserMapNotInitializedMissingKey() {\r\n    final PerUserPoolDataSource ds = (PerUserPoolDataSource) this.ds;\r\n    ds.setPerUserDefaultTransactionIsolation(\"whatismyuseragain?\", 0);\r\n    // TODO this is not consistent with the other methods\r\n    assertNull(ds.getPerUserDefaultTransactionIsolation(\"missingkey\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\datasources\\TestPerUserPoolDataSource.java",
  "methodName" : "testPerUserDurationBetweenEvictionRunsMapInitialized",
  "sourceCode" : "// -- per user default transaction isolation\r\n@Test\r\nvoid testPerUserDurationBetweenEvictionRunsMapInitialized() {\r\n    final PerUserPoolDataSource ds = (PerUserPoolDataSource) this.ds;\r\n    Map<String, Duration> values = new HashMap<>();\r\n    values.put(\"key\", Duration.ZERO);\r\n    ds.setPerUserDurationBetweenEvictionRuns(values);\r\n    assertEquals(0L, ds.getPerUserTimeBetweenEvictionRunsMillis(\"key\"));\r\n    assertEquals(Duration.ZERO, ds.getPerUserDurationBetweenEvictionRuns(\"key\"));\r\n    values = new HashMap<>();\r\n    values.put(\"anonymous\", Duration.ZERO);\r\n    ds.setPerUserDurationBetweenEvictionRuns(values);\r\n    assertEquals(ds.getDefaultTimeBetweenEvictionRunsMillis(), ds.getPerUserTimeBetweenEvictionRunsMillis(\"key\"));\r\n    assertEquals(ds.getDefaultDurationBetweenEvictionRuns(), ds.getPerUserDurationBetweenEvictionRuns(\"key\"));\r\n    assertEquals(0L, ds.getPerUserTimeBetweenEvictionRunsMillis(\"anonymous\"));\r\n    assertEquals(Duration.ZERO, ds.getPerUserDurationBetweenEvictionRuns(\"anonymous\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\datasources\\TestPerUserPoolDataSource.java",
  "methodName" : "testPerUserDurationBetweenEvictionRunsMapNotInitialized",
  "sourceCode" : "@Test\r\nvoid testPerUserDurationBetweenEvictionRunsMapNotInitialized() {\r\n    final PerUserPoolDataSource ds = (PerUserPoolDataSource) this.ds;\r\n    final Map<String, Duration> values = new HashMap<>();\r\n    values.put(\"key\", DURATION_1_MILLISECOND);\r\n    ds.setPerUserDurationBetweenEvictionRuns(values);\r\n    assertEquals(1L, ds.getPerUserTimeBetweenEvictionRunsMillis(\"key\"));\r\n    assertEquals(DURATION_1_MILLISECOND, ds.getPerUserDurationBetweenEvictionRuns(\"key\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\datasources\\TestPerUserPoolDataSource.java",
  "methodName" : "testPerUserDurationBetweenEvictionRunsMapNotInitializedMissingKey",
  "sourceCode" : "@Test\r\nvoid testPerUserDurationBetweenEvictionRunsMapNotInitializedMissingKey() {\r\n    final PerUserPoolDataSource ds = (PerUserPoolDataSource) this.ds;\r\n    final Map<String, Duration> values = new HashMap<>();\r\n    values.put(\"key\", Duration.ZERO);\r\n    ds.setPerUserDurationBetweenEvictionRuns(values);\r\n    assertEquals(ds.getDefaultTimeBetweenEvictionRunsMillis(), ds.getPerUserTimeBetweenEvictionRunsMillis(\"missingkey\"));\r\n    assertEquals(ds.getDefaultDurationBetweenEvictionRuns(), ds.getPerUserDurationBetweenEvictionRuns(\"missingkey\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\datasources\\TestPerUserPoolDataSource.java",
  "methodName" : "testPerUserEvictionPolicyClassNameMapInitialized",
  "sourceCode" : "@Test\r\nvoid testPerUserEvictionPolicyClassNameMapInitialized() {\r\n    final PerUserPoolDataSource ds = (PerUserPoolDataSource) this.ds;\r\n    Map<String, String> values = new HashMap<>();\r\n    values.put(\"key\", \"bar\");\r\n    ds.setPerUserEvictionPolicyClassName(values);\r\n    assertEquals(\"bar\", ds.getPerUserEvictionPolicyClassName(\"key\"));\r\n    values = new HashMap<>();\r\n    values.put(\"anonymous\", \"bar\");\r\n    ds.setPerUserEvictionPolicyClassName(values);\r\n    assertEquals(ds.getDefaultEvictionPolicyClassName(), ds.getPerUserEvictionPolicyClassName(\"key\"));\r\n    assertEquals(\"bar\", ds.getPerUserEvictionPolicyClassName(\"anonymous\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\datasources\\TestPerUserPoolDataSource.java",
  "methodName" : "testPerUserEvictionPolicyClassNameMapNotInitialized",
  "sourceCode" : "@Test\r\nvoid testPerUserEvictionPolicyClassNameMapNotInitialized() {\r\n    final PerUserPoolDataSource ds = (PerUserPoolDataSource) this.ds;\r\n    final Map<String, String> values = new HashMap<>();\r\n    values.put(\"key\", \"test\");\r\n    ds.setPerUserEvictionPolicyClassName(values);\r\n    assertEquals(\"test\", ds.getPerUserEvictionPolicyClassName(\"key\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\datasources\\TestPerUserPoolDataSource.java",
  "methodName" : "testPerUserEvictionPolicyClassNameMapNotInitializedMissingKey",
  "sourceCode" : "@Test\r\nvoid testPerUserEvictionPolicyClassNameMapNotInitializedMissingKey() {\r\n    final PerUserPoolDataSource ds = (PerUserPoolDataSource) this.ds;\r\n    final Map<String, String> values = new HashMap<>();\r\n    values.put(\"key\", \"bar\");\r\n    ds.setPerUserEvictionPolicyClassName(values);\r\n    assertEquals(ds.getDefaultEvictionPolicyClassName(), ds.getPerUserEvictionPolicyClassName(\"missingkey\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\datasources\\TestPerUserPoolDataSource.java",
  "methodName" : "testPerUserEvictionPolicyClassNameWithUserMapInitialized",
  "sourceCode" : "// -- per user eviction policy class name\r\n@Test\r\nvoid testPerUserEvictionPolicyClassNameWithUserMapInitialized() {\r\n    final PerUserPoolDataSource ds = (PerUserPoolDataSource) this.ds;\r\n    ds.setPerUserEvictionPolicyClassName(user, \"bar\");\r\n    assertEquals(\"bar\", ds.getPerUserEvictionPolicyClassName(user));\r\n    ds.setPerUserEvictionPolicyClassName(\"anotheruser\", \"bar\");\r\n    assertEquals(\"bar\", ds.getPerUserEvictionPolicyClassName(user));\r\n    assertEquals(\"bar\", ds.getPerUserEvictionPolicyClassName(\"anotheruser\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\datasources\\TestPerUserPoolDataSource.java",
  "methodName" : "testPerUserEvictionPolicyClassNameWithUserMapNotInitialized",
  "sourceCode" : "@Test\r\nvoid testPerUserEvictionPolicyClassNameWithUserMapNotInitialized() {\r\n    final PerUserPoolDataSource ds = (PerUserPoolDataSource) this.ds;\r\n    ds.setPerUserEvictionPolicyClassName(user, \"bar\");\r\n    assertEquals(\"bar\", ds.getPerUserEvictionPolicyClassName(user));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\datasources\\TestPerUserPoolDataSource.java",
  "methodName" : "testPerUserEvictionPolicyClassNameWithUserMapNotInitializedMissingKey",
  "sourceCode" : "@Test\r\nvoid testPerUserEvictionPolicyClassNameWithUserMapNotInitializedMissingKey() {\r\n    final PerUserPoolDataSource ds = (PerUserPoolDataSource) this.ds;\r\n    ds.setPerUserEvictionPolicyClassName(\"whatismyuseragain?\", \"bar\");\r\n    assertEquals(ds.getDefaultEvictionPolicyClassName(), ds.getPerUserEvictionPolicyClassName(\"missingkey\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\datasources\\TestPerUserPoolDataSource.java",
  "methodName" : "testPerUserLifoMapInitialized",
  "sourceCode" : "@Test\r\nvoid testPerUserLifoMapInitialized() {\r\n    final PerUserPoolDataSource ds = (PerUserPoolDataSource) this.ds;\r\n    Map<String, Boolean> values = new HashMap<>();\r\n    values.put(\"key\", Boolean.FALSE);\r\n    ds.setPerUserLifo(values);\r\n    assertEquals(Boolean.FALSE, ds.getPerUserLifo(\"key\"));\r\n    values = new HashMap<>();\r\n    values.put(\"anonymous\", Boolean.FALSE);\r\n    ds.setPerUserLifo(values);\r\n    assertEquals(ds.getDefaultLifo(), ds.getPerUserLifo(\"key\"));\r\n    assertEquals(Boolean.FALSE, ds.getPerUserLifo(\"anonymous\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\datasources\\TestPerUserPoolDataSource.java",
  "methodName" : "testPerUserLifoMapNotInitialized",
  "sourceCode" : "@Test\r\nvoid testPerUserLifoMapNotInitialized() {\r\n    final PerUserPoolDataSource ds = (PerUserPoolDataSource) this.ds;\r\n    final Map<String, Boolean> values = new HashMap<>();\r\n    values.put(\"key\", Boolean.TRUE);\r\n    ds.setPerUserLifo(values);\r\n    assertEquals(Boolean.TRUE, ds.getPerUserLifo(\"key\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\datasources\\TestPerUserPoolDataSource.java",
  "methodName" : "testPerUserLifoMapNotInitializedMissingKey",
  "sourceCode" : "@Test\r\nvoid testPerUserLifoMapNotInitializedMissingKey() {\r\n    final PerUserPoolDataSource ds = (PerUserPoolDataSource) this.ds;\r\n    final Map<String, Boolean> values = new HashMap<>();\r\n    values.put(\"key\", Boolean.FALSE);\r\n    ds.setPerUserLifo(values);\r\n    assertEquals(ds.getDefaultLifo(), ds.getPerUserLifo(\"missingkey\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\datasources\\TestPerUserPoolDataSource.java",
  "methodName" : "testPerUserLifoWithUserMapInitialized",
  "sourceCode" : "// -- per user lifo\r\n@Test\r\nvoid testPerUserLifoWithUserMapInitialized() {\r\n    final PerUserPoolDataSource ds = (PerUserPoolDataSource) this.ds;\r\n    ds.setPerUserLifo(user, Boolean.FALSE);\r\n    assertEquals(Boolean.FALSE, ds.getPerUserLifo(user));\r\n    ds.setPerUserLifo(\"anotheruser\", Boolean.FALSE);\r\n    assertEquals(Boolean.FALSE, ds.getPerUserLifo(user));\r\n    assertEquals(Boolean.FALSE, ds.getPerUserLifo(\"anotheruser\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\datasources\\TestPerUserPoolDataSource.java",
  "methodName" : "testPerUserLifoWithUserMapNotInitialized",
  "sourceCode" : "@Test\r\nvoid testPerUserLifoWithUserMapNotInitialized() {\r\n    final PerUserPoolDataSource ds = (PerUserPoolDataSource) this.ds;\r\n    ds.setPerUserLifo(user, Boolean.FALSE);\r\n    assertEquals(Boolean.FALSE, ds.getPerUserLifo(user));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\datasources\\TestPerUserPoolDataSource.java",
  "methodName" : "testPerUserLifoWithUserMapNotInitializedMissingKey",
  "sourceCode" : "@Test\r\nvoid testPerUserLifoWithUserMapNotInitializedMissingKey() {\r\n    final PerUserPoolDataSource ds = (PerUserPoolDataSource) this.ds;\r\n    ds.setPerUserLifo(\"whatismyuseragain?\", Boolean.FALSE);\r\n    assertEquals(ds.getDefaultLifo(), ds.getPerUserLifo(\"missingkey\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\datasources\\TestPerUserPoolDataSource.java",
  "methodName" : "testPerUserMaxIdleMapInitialized",
  "sourceCode" : "@Test\r\nvoid testPerUserMaxIdleMapInitialized() {\r\n    final PerUserPoolDataSource ds = (PerUserPoolDataSource) this.ds;\r\n    Map<String, Integer> values = new HashMap<>();\r\n    values.put(\"key\", 0);\r\n    ds.setPerUserMaxIdle(values);\r\n    assertEquals((Integer) 0, (Integer) ds.getPerUserMaxIdle(\"key\"));\r\n    values = new HashMap<>();\r\n    values.put(\"anonymous\", 0);\r\n    ds.setPerUserMaxIdle(values);\r\n    assertEquals((Integer) ds.getDefaultMaxIdle(), (Integer) ds.getPerUserMaxIdle(\"key\"));\r\n    assertEquals((Integer) 0, (Integer) ds.getPerUserMaxIdle(\"anonymous\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\datasources\\TestPerUserPoolDataSource.java",
  "methodName" : "testPerUserMaxIdleMapNotInitialized",
  "sourceCode" : "@Test\r\nvoid testPerUserMaxIdleMapNotInitialized() {\r\n    final PerUserPoolDataSource ds = (PerUserPoolDataSource) this.ds;\r\n    final Map<String, Integer> values = new HashMap<>();\r\n    values.put(\"key\", 1);\r\n    ds.setPerUserMaxIdle(values);\r\n    assertEquals((Integer) 1, (Integer) ds.getPerUserMaxIdle(\"key\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\datasources\\TestPerUserPoolDataSource.java",
  "methodName" : "testPerUserMaxIdleMapNotInitializedMissingKey",
  "sourceCode" : "@Test\r\nvoid testPerUserMaxIdleMapNotInitializedMissingKey() {\r\n    final PerUserPoolDataSource ds = (PerUserPoolDataSource) this.ds;\r\n    final Map<String, Integer> values = new HashMap<>();\r\n    values.put(\"key\", 0);\r\n    ds.setPerUserMaxIdle(values);\r\n    assertEquals((Integer) ds.getDefaultMaxIdle(), (Integer) ds.getPerUserMaxIdle(\"missingkey\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\datasources\\TestPerUserPoolDataSource.java",
  "methodName" : "testPerUserMaxIdleWithUserMapInitialized",
  "sourceCode" : "// -- per user max idle\r\n@Test\r\nvoid testPerUserMaxIdleWithUserMapInitialized() {\r\n    final PerUserPoolDataSource ds = (PerUserPoolDataSource) this.ds;\r\n    ds.setPerUserMaxIdle(user, 0);\r\n    assertEquals((Integer) 0, (Integer) ds.getPerUserMaxIdle(user));\r\n    ds.setPerUserMaxIdle(\"anotheruser\", 0);\r\n    assertEquals((Integer) 0, (Integer) ds.getPerUserMaxIdle(user));\r\n    assertEquals((Integer) 0, (Integer) ds.getPerUserMaxIdle(\"anotheruser\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\datasources\\TestPerUserPoolDataSource.java",
  "methodName" : "testPerUserMaxIdleWithUserMapNotInitialized",
  "sourceCode" : "@Test\r\nvoid testPerUserMaxIdleWithUserMapNotInitialized() {\r\n    final PerUserPoolDataSource ds = (PerUserPoolDataSource) this.ds;\r\n    ds.setPerUserMaxIdle(user, 0);\r\n    assertEquals((Integer) 0, (Integer) ds.getPerUserMaxIdle(user));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\datasources\\TestPerUserPoolDataSource.java",
  "methodName" : "testPerUserMaxIdleWithUserMapNotInitializedMissingKey",
  "sourceCode" : "@Test\r\nvoid testPerUserMaxIdleWithUserMapNotInitializedMissingKey() {\r\n    final PerUserPoolDataSource ds = (PerUserPoolDataSource) this.ds;\r\n    ds.setPerUserMaxIdle(\"whatismyuseragain?\", 0);\r\n    assertEquals((Integer) ds.getDefaultMaxIdle(), (Integer) ds.getPerUserMaxIdle(\"missingkey\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\datasources\\TestPerUserPoolDataSource.java",
  "methodName" : "testPerUserMaxTotalMapInitialized",
  "sourceCode" : "@Test\r\nvoid testPerUserMaxTotalMapInitialized() {\r\n    final PerUserPoolDataSource ds = (PerUserPoolDataSource) this.ds;\r\n    Map<String, Integer> values = new HashMap<>();\r\n    values.put(\"key\", 0);\r\n    ds.setPerUserMaxTotal(values);\r\n    assertEquals((Integer) 0, (Integer) ds.getPerUserMaxTotal(\"key\"));\r\n    values = new HashMap<>();\r\n    values.put(\"anonymous\", 0);\r\n    ds.setPerUserMaxTotal(values);\r\n    assertEquals((Integer) ds.getDefaultMaxTotal(), (Integer) ds.getPerUserMaxTotal(\"key\"));\r\n    assertEquals((Integer) 0, (Integer) ds.getPerUserMaxTotal(\"anonymous\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\datasources\\TestPerUserPoolDataSource.java",
  "methodName" : "testPerUserMaxTotalMapNotInitialized",
  "sourceCode" : "@Test\r\nvoid testPerUserMaxTotalMapNotInitialized() {\r\n    final PerUserPoolDataSource ds = (PerUserPoolDataSource) this.ds;\r\n    final Map<String, Integer> values = new HashMap<>();\r\n    values.put(\"key\", 1);\r\n    ds.setPerUserMaxTotal(values);\r\n    assertEquals((Integer) 1, (Integer) ds.getPerUserMaxTotal(\"key\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\datasources\\TestPerUserPoolDataSource.java",
  "methodName" : "testPerUserMaxTotalMapNotInitializedMissingKey",
  "sourceCode" : "@Test\r\nvoid testPerUserMaxTotalMapNotInitializedMissingKey() {\r\n    final PerUserPoolDataSource ds = (PerUserPoolDataSource) this.ds;\r\n    final Map<String, Integer> values = new HashMap<>();\r\n    values.put(\"key\", 0);\r\n    ds.setPerUserMaxTotal(values);\r\n    assertEquals((Integer) ds.getDefaultMaxTotal(), (Integer) ds.getPerUserMaxTotal(\"missingkey\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\datasources\\TestPerUserPoolDataSource.java",
  "methodName" : "testPerUserMaxTotalWithUserMapInitialized",
  "sourceCode" : "@Test\r\nvoid testPerUserMaxTotalWithUserMapInitialized() {\r\n    final PerUserPoolDataSource ds = (PerUserPoolDataSource) this.ds;\r\n    ds.setPerUserMaxTotal(user, 0);\r\n    assertEquals((Integer) 0, (Integer) ds.getPerUserMaxTotal(user));\r\n    ds.setPerUserMaxTotal(\"anotheruser\", 0);\r\n    assertEquals((Integer) 0, (Integer) ds.getPerUserMaxTotal(user));\r\n    assertEquals((Integer) 0, (Integer) ds.getPerUserMaxTotal(\"anotheruser\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\datasources\\TestPerUserPoolDataSource.java",
  "methodName" : "testPerUserMaxTotalWithUserMapNotInitialized",
  "sourceCode" : "@Test\r\nvoid testPerUserMaxTotalWithUserMapNotInitialized() {\r\n    final PerUserPoolDataSource ds = (PerUserPoolDataSource) this.ds;\r\n    ds.setPerUserMaxTotal(user, 0);\r\n    assertEquals((Integer) 0, (Integer) ds.getPerUserMaxTotal(user));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\datasources\\TestPerUserPoolDataSource.java",
  "methodName" : "testPerUserMaxTotalWithUserMapNotInitializedMissingKey",
  "sourceCode" : "@Test\r\nvoid testPerUserMaxTotalWithUserMapNotInitializedMissingKey() {\r\n    final PerUserPoolDataSource ds = (PerUserPoolDataSource) this.ds;\r\n    ds.setPerUserMaxTotal(\"whatismyuseragain?\", 0);\r\n    assertEquals((Integer) ds.getDefaultMaxTotal(), (Integer) ds.getPerUserMaxTotal(\"missingkey\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\datasources\\TestPerUserPoolDataSource.java",
  "methodName" : "testPerUserMaxWaitDurationMapInitialized",
  "sourceCode" : "@Test\r\nvoid testPerUserMaxWaitDurationMapInitialized() {\r\n    final PerUserPoolDataSource ds = (PerUserPoolDataSource) this.ds;\r\n    Map<String, Duration> values = new HashMap<>();\r\n    values.put(\"key\", Duration.ZERO);\r\n    ds.setPerUserMaxWaitDuration(values);\r\n    assertEquals(Duration.ZERO, ds.getPerUserMaxWaitDuration(\"key\"));\r\n    values = new HashMap<>();\r\n    values.put(\"anonymous\", Duration.ZERO);\r\n    ds.setPerUserMaxWaitDuration(values);\r\n    assertEquals(ds.getDefaultMaxWait(), ds.getPerUserMaxWaitDuration(\"key\"));\r\n    assertEquals(Duration.ZERO, ds.getPerUserMaxWaitDuration(\"anonymous\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\datasources\\TestPerUserPoolDataSource.java",
  "methodName" : "testPerUserMaxWaitDurationMapNotInitialized",
  "sourceCode" : "@Test\r\nvoid testPerUserMaxWaitDurationMapNotInitialized() {\r\n    final PerUserPoolDataSource ds = (PerUserPoolDataSource) this.ds;\r\n    final Map<String, Duration> values = new HashMap<>();\r\n    values.put(\"key\", DURATION_1_MILLISECOND);\r\n    ds.setPerUserMaxWaitDuration(values);\r\n    assertEquals(DURATION_1_MILLISECOND, ds.getPerUserMaxWaitDuration(\"key\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\datasources\\TestPerUserPoolDataSource.java",
  "methodName" : "testPerUserMaxWaitDurationMapNotInitializedMissingKey",
  "sourceCode" : "@Test\r\nvoid testPerUserMaxWaitDurationMapNotInitializedMissingKey() {\r\n    final PerUserPoolDataSource ds = (PerUserPoolDataSource) this.ds;\r\n    final Map<String, Duration> values = new HashMap<>();\r\n    values.put(\"key\", Duration.ZERO);\r\n    ds.setPerUserMaxWaitDuration(values);\r\n    assertEquals(ds.getDefaultMaxWait(), ds.getPerUserMaxWaitDuration(\"missingkey\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\datasources\\TestPerUserPoolDataSource.java",
  "methodName" : "testPerUserMaxWaitMillisWithUserMapInitializedDeprecated",
  "sourceCode" : "// -- per user max wait millis\r\n@Test\r\n@SuppressWarnings(\"deprecation\")\r\nvoid testPerUserMaxWaitMillisWithUserMapInitializedDeprecated() {\r\n    final PerUserPoolDataSource ds = (PerUserPoolDataSource) this.ds;\r\n    ds.setPerUserMaxWaitMillis(user, 0L);\r\n    assertEquals(0L, ds.getPerUserMaxWaitMillis(user));\r\n    ds.setPerUserMaxWaitMillis(\"anotheruser\", 0L);\r\n    assertEquals(0L, ds.getPerUserMaxWaitMillis(user));\r\n    assertEquals(0L, ds.getPerUserMaxWaitMillis(\"anotheruser\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\datasources\\TestPerUserPoolDataSource.java",
  "methodName" : "testPerUserMaxWaitMillisWithUserMapNotInitializedDeprecated",
  "sourceCode" : "@Test\r\n@SuppressWarnings(\"deprecation\")\r\nvoid testPerUserMaxWaitMillisWithUserMapNotInitializedDeprecated() {\r\n    final PerUserPoolDataSource ds = (PerUserPoolDataSource) this.ds;\r\n    ds.setPerUserMaxWaitMillis(user, 0L);\r\n    assertEquals(0L, ds.getPerUserMaxWaitMillis(user));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\datasources\\TestPerUserPoolDataSource.java",
  "methodName" : "testPerUserMaxWaitMillisWithUserMapNotInitializedMissingKeyDeprecated",
  "sourceCode" : "@Test\r\n@SuppressWarnings(\"deprecation\")\r\nvoid testPerUserMaxWaitMillisWithUserMapNotInitializedMissingKeyDeprecated() {\r\n    final PerUserPoolDataSource ds = (PerUserPoolDataSource) this.ds;\r\n    ds.setPerUserMaxWaitMillis(\"whatismyuseragain?\", 0L);\r\n    assertEquals(ds.getDefaultMaxWaitMillis(), ds.getPerUserMaxWaitMillis(\"missingkey\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\datasources\\TestPerUserPoolDataSource.java",
  "methodName" : "testPerUserMethods",
  "sourceCode" : "@Test\r\nvoid testPerUserMethods() throws Exception {\r\n    final PerUserPoolDataSource tds = (PerUserPoolDataSource) ds;\r\n    // you need to set per user maxTotal otherwise there is no accounting\r\n    tds.setPerUserMaxTotal(\"u1\", 5);\r\n    tds.setPerUserMaxTotal(\"u2\", 5);\r\n    assertEquals(0, tds.getNumActive());\r\n    assertEquals(0, tds.getNumActive(\"u1\"));\r\n    assertEquals(0, tds.getNumActive(\"u2\"));\r\n    assertEquals(0, tds.getNumIdle());\r\n    assertEquals(0, tds.getNumIdle(\"u1\"));\r\n    assertEquals(0, tds.getNumIdle(\"u2\"));\r\n    try (Connection conn = tds.getConnection()) {\r\n        assertNotNull(conn);\r\n        assertEquals(1, tds.getNumActive());\r\n        assertEquals(0, tds.getNumActive(\"u1\"));\r\n        assertEquals(0, tds.getNumActive(\"u2\"));\r\n        assertEquals(0, tds.getNumIdle());\r\n        assertEquals(0, tds.getNumIdle(\"u1\"));\r\n        assertEquals(0, tds.getNumIdle(\"u2\"));\r\n    }\r\n    assertEquals(0, tds.getNumActive());\r\n    assertEquals(0, tds.getNumActive(\"u1\"));\r\n    assertEquals(0, tds.getNumActive(\"u2\"));\r\n    assertEquals(1, tds.getNumIdle());\r\n    assertEquals(0, tds.getNumIdle(\"u1\"));\r\n    assertEquals(0, tds.getNumIdle(\"u2\"));\r\n    try (Connection conn = tds.getConnection(\"u1\", \"p1\")) {\r\n        assertNotNull(conn);\r\n        assertEquals(0, tds.getNumActive());\r\n        assertEquals(1, tds.getNumActive(\"u1\"));\r\n        assertEquals(0, tds.getNumActive(\"u2\"));\r\n        assertEquals(1, tds.getNumIdle());\r\n        assertEquals(0, tds.getNumIdle(\"u1\"));\r\n        assertEquals(0, tds.getNumIdle(\"u2\"));\r\n    }\r\n    assertEquals(0, tds.getNumActive());\r\n    assertEquals(0, tds.getNumActive(\"u1\"));\r\n    assertEquals(0, tds.getNumActive(\"u2\"));\r\n    assertEquals(1, tds.getNumIdle());\r\n    assertEquals(1, tds.getNumIdle(\"u1\"));\r\n    assertEquals(0, tds.getNumIdle(\"u2\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\datasources\\TestPerUserPoolDataSource.java",
  "methodName" : "testPerUserMinEvictableIdleDurationMapInitialized",
  "sourceCode" : "@Test\r\nvoid testPerUserMinEvictableIdleDurationMapInitialized() {\r\n    final PerUserPoolDataSource ds = (PerUserPoolDataSource) this.ds;\r\n    Map<String, Duration> values = new HashMap<>();\r\n    values.put(\"key\", Duration.ZERO);\r\n    ds.setPerUserMinEvictableIdle(values);\r\n    assertEquals(0L, ds.getPerUserMinEvictableIdleTimeMillis(\"key\"));\r\n    assertEquals(Duration.ZERO, ds.getPerUserMinEvictableIdleDuration(\"key\"));\r\n    values = new HashMap<>();\r\n    values.put(\"anonymous\", Duration.ZERO);\r\n    ds.setPerUserMinEvictableIdle(values);\r\n    assertEquals(ds.getDefaultMinEvictableIdleTimeMillis(), ds.getPerUserMinEvictableIdleTimeMillis(\"key\"));\r\n    assertEquals(ds.getDefaultMinEvictableIdleDuration(), ds.getPerUserMinEvictableIdleDuration(\"key\"));\r\n    assertEquals(0L, ds.getPerUserMinEvictableIdleTimeMillis(\"anonymous\"));\r\n    assertEquals(Duration.ZERO, ds.getPerUserMinEvictableIdleDuration(\"anonymous\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\datasources\\TestPerUserPoolDataSource.java",
  "methodName" : "testPerUserMinEvictableIdleDurationMapNotInitialized",
  "sourceCode" : "@Test\r\nvoid testPerUserMinEvictableIdleDurationMapNotInitialized() {\r\n    final PerUserPoolDataSource ds = (PerUserPoolDataSource) this.ds;\r\n    final Map<String, Duration> values = new HashMap<>();\r\n    values.put(\"key\", DURATION_1_MILLISECOND);\r\n    ds.setPerUserMinEvictableIdle(values);\r\n    assertEquals(1L, ds.getPerUserMinEvictableIdleTimeMillis(\"key\"));\r\n    assertEquals(DURATION_1_MILLISECOND, ds.getPerUserMinEvictableIdleDuration(\"key\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\datasources\\TestPerUserPoolDataSource.java",
  "methodName" : "testPerUserMinEvictableIdleDurationMapNotInitializedMissingKey",
  "sourceCode" : "// -- per user min evictable idle time millis\r\n@Test\r\nvoid testPerUserMinEvictableIdleDurationMapNotInitializedMissingKey() {\r\n    final PerUserPoolDataSource ds = (PerUserPoolDataSource) this.ds;\r\n    final Map<String, Duration> values = new HashMap<>();\r\n    values.put(\"key\", Duration.ZERO);\r\n    ds.setPerUserMinEvictableIdle(values);\r\n    assertEquals(ds.getDefaultMinEvictableIdleTimeMillis(), ds.getPerUserMinEvictableIdleTimeMillis(\"missingkey\"));\r\n    assertEquals(ds.getDefaultMinEvictableIdleDuration(), ds.getPerUserMinEvictableIdleDuration(\"missingkey\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\datasources\\TestPerUserPoolDataSource.java",
  "methodName" : "testPerUserMinEvictableIdleTimeMillisWithUserMapInitialized",
  "sourceCode" : "@Test\r\nvoid testPerUserMinEvictableIdleTimeMillisWithUserMapInitialized() {\r\n    final PerUserPoolDataSource ds = (PerUserPoolDataSource) this.ds;\r\n    ds.setPerUserMinEvictableIdleTimeMillis(user, 0L);\r\n    assertEquals(0L, ds.getPerUserMinEvictableIdleTimeMillis(user));\r\n    ds.setPerUserMinEvictableIdleTimeMillis(\"anotheruser\", 0L);\r\n    assertEquals(0L, ds.getPerUserMinEvictableIdleTimeMillis(user));\r\n    assertEquals(0L, ds.getPerUserMinEvictableIdleTimeMillis(\"anotheruser\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\datasources\\TestPerUserPoolDataSource.java",
  "methodName" : "testPerUserMinEvictableIdleTimeMillisWithUserMapNotInitialized",
  "sourceCode" : "@Test\r\nvoid testPerUserMinEvictableIdleTimeMillisWithUserMapNotInitialized() {\r\n    final PerUserPoolDataSource ds = (PerUserPoolDataSource) this.ds;\r\n    ds.setPerUserMinEvictableIdleTimeMillis(user, 0L);\r\n    assertEquals(0L, ds.getPerUserMinEvictableIdleTimeMillis(user));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\datasources\\TestPerUserPoolDataSource.java",
  "methodName" : "testPerUserMinEvictableIdleTimeMillisWithUserMapNotInitializedMissingKey",
  "sourceCode" : "@Test\r\nvoid testPerUserMinEvictableIdleTimeMillisWithUserMapNotInitializedMissingKey() {\r\n    final PerUserPoolDataSource ds = (PerUserPoolDataSource) this.ds;\r\n    ds.setPerUserMinEvictableIdleTimeMillis(\"whatismyuseragain?\", 0L);\r\n    assertEquals(ds.getDefaultMinEvictableIdleTimeMillis(), ds.getPerUserMinEvictableIdleTimeMillis(\"missingkey\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\datasources\\TestPerUserPoolDataSource.java",
  "methodName" : "testPerUserMinIdleMapInitialized",
  "sourceCode" : "@Test\r\nvoid testPerUserMinIdleMapInitialized() {\r\n    final PerUserPoolDataSource ds = (PerUserPoolDataSource) this.ds;\r\n    Map<String, Integer> values = new HashMap<>();\r\n    values.put(\"key\", 0);\r\n    ds.setPerUserMinIdle(values);\r\n    assertEquals((Integer) 0, (Integer) ds.getPerUserMinIdle(\"key\"));\r\n    values = new HashMap<>();\r\n    values.put(\"anonymous\", 0);\r\n    ds.setPerUserMinIdle(values);\r\n    assertEquals((Integer) ds.getDefaultMinIdle(), (Integer) ds.getPerUserMinIdle(\"key\"));\r\n    assertEquals((Integer) 0, (Integer) ds.getPerUserMinIdle(\"anonymous\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\datasources\\TestPerUserPoolDataSource.java",
  "methodName" : "testPerUserMinIdleMapNotInitialized",
  "sourceCode" : "@Test\r\nvoid testPerUserMinIdleMapNotInitialized() {\r\n    final PerUserPoolDataSource ds = (PerUserPoolDataSource) this.ds;\r\n    final Map<String, Integer> values = new HashMap<>();\r\n    values.put(\"key\", 1);\r\n    ds.setPerUserMinIdle(values);\r\n    assertEquals((Integer) 1, (Integer) ds.getPerUserMinIdle(\"key\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\datasources\\TestPerUserPoolDataSource.java",
  "methodName" : "testPerUserMinIdleMapNotInitializedMissingKey",
  "sourceCode" : "// -- per user min idle\r\n@Test\r\nvoid testPerUserMinIdleMapNotInitializedMissingKey() {\r\n    final PerUserPoolDataSource ds = (PerUserPoolDataSource) this.ds;\r\n    final Map<String, Integer> values = new HashMap<>();\r\n    values.put(\"key\", 0);\r\n    ds.setPerUserMinIdle(values);\r\n    assertEquals((Integer) ds.getDefaultMinIdle(), (Integer) ds.getPerUserMinIdle(\"missingkey\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\datasources\\TestPerUserPoolDataSource.java",
  "methodName" : "testPerUserMinIdleWithUserMapInitialized",
  "sourceCode" : "@Test\r\nvoid testPerUserMinIdleWithUserMapInitialized() {\r\n    final PerUserPoolDataSource ds = (PerUserPoolDataSource) this.ds;\r\n    ds.setPerUserMinIdle(user, 0);\r\n    assertEquals((Integer) 0, (Integer) ds.getPerUserMinIdle(user));\r\n    ds.setPerUserMinIdle(\"anotheruser\", 0);\r\n    assertEquals((Integer) 0, (Integer) ds.getPerUserMinIdle(user));\r\n    assertEquals((Integer) 0, (Integer) ds.getPerUserMinIdle(\"anotheruser\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\datasources\\TestPerUserPoolDataSource.java",
  "methodName" : "testPerUserMinIdleWithUserMapNotInitialized",
  "sourceCode" : "@Test\r\nvoid testPerUserMinIdleWithUserMapNotInitialized() {\r\n    final PerUserPoolDataSource ds = (PerUserPoolDataSource) this.ds;\r\n    ds.setPerUserMinIdle(user, 0);\r\n    assertEquals((Integer) 0, (Integer) ds.getPerUserMinIdle(user));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\datasources\\TestPerUserPoolDataSource.java",
  "methodName" : "testPerUserMinIdleWithUserMapNotInitializedMissingKey",
  "sourceCode" : "@Test\r\nvoid testPerUserMinIdleWithUserMapNotInitializedMissingKey() {\r\n    final PerUserPoolDataSource ds = (PerUserPoolDataSource) this.ds;\r\n    ds.setPerUserMinIdle(\"whatismyuseragain?\", 0);\r\n    assertEquals((Integer) ds.getDefaultMinIdle(), (Integer) ds.getPerUserMinIdle(\"missingkey\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\datasources\\TestPerUserPoolDataSource.java",
  "methodName" : "testPerUserNumTestsPerEvictionRunMapInitialized",
  "sourceCode" : "@Test\r\nvoid testPerUserNumTestsPerEvictionRunMapInitialized() {\r\n    final PerUserPoolDataSource ds = (PerUserPoolDataSource) this.ds;\r\n    Map<String, Integer> values = new HashMap<>();\r\n    values.put(\"key\", 0);\r\n    ds.setPerUserNumTestsPerEvictionRun(values);\r\n    assertEquals((Integer) 0, (Integer) ds.getPerUserNumTestsPerEvictionRun(\"key\"));\r\n    values = new HashMap<>();\r\n    values.put(\"anonymous\", 0);\r\n    ds.setPerUserNumTestsPerEvictionRun(values);\r\n    assertEquals((Integer) ds.getDefaultNumTestsPerEvictionRun(), (Integer) ds.getPerUserNumTestsPerEvictionRun(\"key\"));\r\n    assertEquals((Integer) 0, (Integer) ds.getPerUserNumTestsPerEvictionRun(\"anonymous\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\datasources\\TestPerUserPoolDataSource.java",
  "methodName" : "testPerUserNumTestsPerEvictionRunMapNotInitialized",
  "sourceCode" : "@Test\r\nvoid testPerUserNumTestsPerEvictionRunMapNotInitialized() {\r\n    final PerUserPoolDataSource ds = (PerUserPoolDataSource) this.ds;\r\n    final Map<String, Integer> values = new HashMap<>();\r\n    values.put(\"key\", 1);\r\n    ds.setPerUserNumTestsPerEvictionRun(values);\r\n    assertEquals((Integer) 1, (Integer) ds.getPerUserNumTestsPerEvictionRun(\"key\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\datasources\\TestPerUserPoolDataSource.java",
  "methodName" : "testPerUserNumTestsPerEvictionRunMapNotInitializedMissingKey",
  "sourceCode" : "// -- per user num tests per eviction run\r\n@Test\r\nvoid testPerUserNumTestsPerEvictionRunMapNotInitializedMissingKey() {\r\n    final PerUserPoolDataSource ds = (PerUserPoolDataSource) this.ds;\r\n    final Map<String, Integer> values = new HashMap<>();\r\n    values.put(\"key\", 0);\r\n    ds.setPerUserNumTestsPerEvictionRun(values);\r\n    assertEquals((Integer) ds.getDefaultNumTestsPerEvictionRun(), (Integer) ds.getPerUserNumTestsPerEvictionRun(\"missingkey\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\datasources\\TestPerUserPoolDataSource.java",
  "methodName" : "testPerUserNumTestsPerEvictionRunWithUserMapInitialized",
  "sourceCode" : "@Test\r\nvoid testPerUserNumTestsPerEvictionRunWithUserMapInitialized() {\r\n    final PerUserPoolDataSource ds = (PerUserPoolDataSource) this.ds;\r\n    ds.setPerUserNumTestsPerEvictionRun(user, 0);\r\n    assertEquals((Integer) 0, (Integer) ds.getPerUserNumTestsPerEvictionRun(user));\r\n    ds.setPerUserNumTestsPerEvictionRun(\"anotheruser\", 0);\r\n    assertEquals((Integer) 0, (Integer) ds.getPerUserNumTestsPerEvictionRun(user));\r\n    assertEquals((Integer) 0, (Integer) ds.getPerUserNumTestsPerEvictionRun(\"anotheruser\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\datasources\\TestPerUserPoolDataSource.java",
  "methodName" : "testPerUserNumTestsPerEvictionRunWithUserMapNotInitialized",
  "sourceCode" : "@Test\r\nvoid testPerUserNumTestsPerEvictionRunWithUserMapNotInitialized() {\r\n    final PerUserPoolDataSource ds = (PerUserPoolDataSource) this.ds;\r\n    ds.setPerUserNumTestsPerEvictionRun(user, 0);\r\n    assertEquals((Integer) 0, (Integer) ds.getPerUserNumTestsPerEvictionRun(user));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\datasources\\TestPerUserPoolDataSource.java",
  "methodName" : "testPerUserNumTestsPerEvictionRunWithUserMapNotInitializedMissingKey",
  "sourceCode" : "@Test\r\nvoid testPerUserNumTestsPerEvictionRunWithUserMapNotInitializedMissingKey() {\r\n    final PerUserPoolDataSource ds = (PerUserPoolDataSource) this.ds;\r\n    ds.setPerUserNumTestsPerEvictionRun(\"whatismyuseragain?\", 0);\r\n    assertEquals((Integer) ds.getDefaultNumTestsPerEvictionRun(), (Integer) ds.getPerUserNumTestsPerEvictionRun(\"missingkey\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\datasources\\TestPerUserPoolDataSource.java",
  "methodName" : "testPerUserSoftMinEvictableIdleDurationMapInitialized",
  "sourceCode" : "@Test\r\nvoid testPerUserSoftMinEvictableIdleDurationMapInitialized() {\r\n    final PerUserPoolDataSource ds = (PerUserPoolDataSource) this.ds;\r\n    Map<String, Duration> values = new HashMap<>();\r\n    values.put(\"key\", Duration.ZERO);\r\n    ds.setPerUserSoftMinEvictableIdle(values);\r\n    assertEquals(0L, ds.getPerUserSoftMinEvictableIdleTimeMillis(\"key\"));\r\n    assertEquals(Duration.ZERO, ds.getPerUserSoftMinEvictableIdleDuration(\"key\"));\r\n    values = new HashMap<>();\r\n    values.put(\"anonymous\", Duration.ZERO);\r\n    ds.setPerUserSoftMinEvictableIdle(values);\r\n    assertEquals(ds.getDefaultSoftMinEvictableIdleTimeMillis(), ds.getPerUserSoftMinEvictableIdleTimeMillis(\"key\"));\r\n    assertEquals(ds.getDefaultSoftMinEvictableIdleDuration(), ds.getPerUserSoftMinEvictableIdleDuration(\"key\"));\r\n    assertEquals(0L, ds.getPerUserSoftMinEvictableIdleTimeMillis(\"anonymous\"));\r\n    assertEquals(Duration.ZERO, ds.getPerUserSoftMinEvictableIdleDuration(\"anonymous\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\datasources\\TestPerUserPoolDataSource.java",
  "methodName" : "testPerUserSoftMinEvictableIdleDurationMapNotInitialized",
  "sourceCode" : "@Test\r\nvoid testPerUserSoftMinEvictableIdleDurationMapNotInitialized() {\r\n    final PerUserPoolDataSource ds = (PerUserPoolDataSource) this.ds;\r\n    final Map<String, Duration> values = new HashMap<>();\r\n    values.put(\"key\", DURATION_1_MILLISECOND);\r\n    ds.setPerUserSoftMinEvictableIdle(values);\r\n    assertEquals(1L, ds.getPerUserSoftMinEvictableIdleTimeMillis(\"key\"));\r\n    assertEquals(DURATION_1_MILLISECOND, ds.getPerUserSoftMinEvictableIdleDuration(\"key\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\datasources\\TestPerUserPoolDataSource.java",
  "methodName" : "testPerUserSoftMinEvictableIdleDurationMapNotInitializedMissingKey",
  "sourceCode" : "// -- per user soft min evictable idle time millis\r\n@Test\r\nvoid testPerUserSoftMinEvictableIdleDurationMapNotInitializedMissingKey() {\r\n    final PerUserPoolDataSource ds = (PerUserPoolDataSource) this.ds;\r\n    final Map<String, Duration> values = new HashMap<>();\r\n    values.put(\"key\", Duration.ZERO);\r\n    ds.setPerUserSoftMinEvictableIdle(values);\r\n    assertEquals(ds.getDefaultSoftMinEvictableIdleTimeMillis(), ds.getPerUserSoftMinEvictableIdleTimeMillis(\"missingkey\"));\r\n    assertEquals(ds.getDefaultSoftMinEvictableIdleDuration(), ds.getPerUserSoftMinEvictableIdleDuration(\"missingkey\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\datasources\\TestPerUserPoolDataSource.java",
  "methodName" : "testPerUserSoftMinEvictableIdleTimeMillisWithUserMapInitialized",
  "sourceCode" : "@Test\r\nvoid testPerUserSoftMinEvictableIdleTimeMillisWithUserMapInitialized() {\r\n    final PerUserPoolDataSource ds = (PerUserPoolDataSource) this.ds;\r\n    ds.setPerUserSoftMinEvictableIdleTimeMillis(user, 0L);\r\n    assertEquals(0L, ds.getPerUserSoftMinEvictableIdleTimeMillis(user));\r\n    ds.setPerUserSoftMinEvictableIdleTimeMillis(\"anotheruser\", 0L);\r\n    assertEquals(0L, ds.getPerUserSoftMinEvictableIdleTimeMillis(user));\r\n    assertEquals(0L, ds.getPerUserSoftMinEvictableIdleTimeMillis(\"anotheruser\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\datasources\\TestPerUserPoolDataSource.java",
  "methodName" : "testPerUserSoftMinEvictableIdleTimeMillisWithUserMapNotInitialized",
  "sourceCode" : "@Test\r\nvoid testPerUserSoftMinEvictableIdleTimeMillisWithUserMapNotInitialized() {\r\n    final PerUserPoolDataSource ds = (PerUserPoolDataSource) this.ds;\r\n    ds.setPerUserSoftMinEvictableIdleTimeMillis(user, 0L);\r\n    assertEquals(0L, ds.getPerUserSoftMinEvictableIdleTimeMillis(user));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\datasources\\TestPerUserPoolDataSource.java",
  "methodName" : "testPerUserSoftMinEvictableIdleTimeMillisWithUserMapNotInitializedMissingKey",
  "sourceCode" : "@Test\r\nvoid testPerUserSoftMinEvictableIdleTimeMillisWithUserMapNotInitializedMissingKey() {\r\n    final PerUserPoolDataSource ds = (PerUserPoolDataSource) this.ds;\r\n    ds.setPerUserSoftMinEvictableIdleTimeMillis(\"whatismyuseragain?\", 0L);\r\n    assertEquals(ds.getDefaultSoftMinEvictableIdleTimeMillis(), ds.getPerUserSoftMinEvictableIdleTimeMillis(\"missingkey\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\datasources\\TestPerUserPoolDataSource.java",
  "methodName" : "testPerUserTestOnBorrowMapInitialized",
  "sourceCode" : "@Test\r\nvoid testPerUserTestOnBorrowMapInitialized() {\r\n    final PerUserPoolDataSource ds = (PerUserPoolDataSource) this.ds;\r\n    Map<String, Boolean> values = new HashMap<>();\r\n    values.put(\"key\", Boolean.FALSE);\r\n    ds.setPerUserTestOnBorrow(values);\r\n    assertEquals(Boolean.FALSE, ds.getPerUserTestOnBorrow(\"key\"));\r\n    values = new HashMap<>();\r\n    values.put(\"anonymous\", Boolean.FALSE);\r\n    ds.setPerUserTestOnBorrow(values);\r\n    assertEquals(ds.getDefaultTestOnBorrow(), ds.getPerUserTestOnBorrow(\"key\"));\r\n    assertEquals(Boolean.FALSE, ds.getPerUserTestOnBorrow(\"anonymous\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\datasources\\TestPerUserPoolDataSource.java",
  "methodName" : "testPerUserTestOnBorrowMapNotInitialized",
  "sourceCode" : "@Test\r\nvoid testPerUserTestOnBorrowMapNotInitialized() {\r\n    final PerUserPoolDataSource ds = (PerUserPoolDataSource) this.ds;\r\n    final Map<String, Boolean> values = new HashMap<>();\r\n    values.put(\"key\", Boolean.TRUE);\r\n    ds.setPerUserTestOnBorrow(values);\r\n    assertEquals(Boolean.TRUE, ds.getPerUserTestOnBorrow(\"key\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\datasources\\TestPerUserPoolDataSource.java",
  "methodName" : "testPerUserTestOnBorrowMapNotInitializedMissingKey",
  "sourceCode" : "// -- per user test on borrow\r\n@Test\r\nvoid testPerUserTestOnBorrowMapNotInitializedMissingKey() {\r\n    final PerUserPoolDataSource ds = (PerUserPoolDataSource) this.ds;\r\n    final Map<String, Boolean> values = new HashMap<>();\r\n    values.put(\"key\", Boolean.FALSE);\r\n    ds.setPerUserTestOnBorrow(values);\r\n    assertEquals(ds.getDefaultTestOnBorrow(), ds.getPerUserTestOnBorrow(\"missingkey\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\datasources\\TestPerUserPoolDataSource.java",
  "methodName" : "testPerUserTestOnBorrowWithUserMapInitialized",
  "sourceCode" : "@Test\r\nvoid testPerUserTestOnBorrowWithUserMapInitialized() {\r\n    final PerUserPoolDataSource ds = (PerUserPoolDataSource) this.ds;\r\n    ds.setPerUserTestOnBorrow(user, Boolean.FALSE);\r\n    assertEquals(Boolean.FALSE, ds.getPerUserTestOnBorrow(user));\r\n    ds.setPerUserTestOnBorrow(\"anotheruser\", Boolean.FALSE);\r\n    assertEquals(Boolean.FALSE, ds.getPerUserTestOnBorrow(user));\r\n    assertEquals(Boolean.FALSE, ds.getPerUserTestOnBorrow(\"anotheruser\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\datasources\\TestPerUserPoolDataSource.java",
  "methodName" : "testPerUserTestOnBorrowWithUserMapNotInitialized",
  "sourceCode" : "@Test\r\nvoid testPerUserTestOnBorrowWithUserMapNotInitialized() {\r\n    final PerUserPoolDataSource ds = (PerUserPoolDataSource) this.ds;\r\n    ds.setPerUserTestOnBorrow(user, Boolean.FALSE);\r\n    assertEquals(Boolean.FALSE, ds.getPerUserTestOnBorrow(user));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\datasources\\TestPerUserPoolDataSource.java",
  "methodName" : "testPerUserTestOnBorrowWithUserMapNotInitializedMissingKey",
  "sourceCode" : "@Test\r\nvoid testPerUserTestOnBorrowWithUserMapNotInitializedMissingKey() {\r\n    final PerUserPoolDataSource ds = (PerUserPoolDataSource) this.ds;\r\n    ds.setPerUserTestOnBorrow(\"whatismyuseragain?\", Boolean.FALSE);\r\n    assertEquals(ds.getDefaultTestOnBorrow(), ds.getPerUserTestOnBorrow(\"missingkey\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\datasources\\TestPerUserPoolDataSource.java",
  "methodName" : "testPerUserTestOnCreateMapInitialized",
  "sourceCode" : "@Test\r\nvoid testPerUserTestOnCreateMapInitialized() {\r\n    final PerUserPoolDataSource ds = (PerUserPoolDataSource) this.ds;\r\n    Map<String, Boolean> values = new HashMap<>();\r\n    values.put(\"key\", Boolean.FALSE);\r\n    ds.setPerUserTestOnCreate(values);\r\n    assertEquals(Boolean.FALSE, ds.getPerUserTestOnCreate(\"key\"));\r\n    values = new HashMap<>();\r\n    values.put(\"anonymous\", Boolean.FALSE);\r\n    ds.setPerUserTestOnCreate(values);\r\n    assertEquals(ds.getDefaultTestOnCreate(), ds.getPerUserTestOnCreate(\"key\"));\r\n    assertEquals(Boolean.FALSE, ds.getPerUserTestOnCreate(\"anonymous\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\datasources\\TestPerUserPoolDataSource.java",
  "methodName" : "testPerUserTestOnCreateMapNotInitialized",
  "sourceCode" : "@Test\r\nvoid testPerUserTestOnCreateMapNotInitialized() {\r\n    final PerUserPoolDataSource ds = (PerUserPoolDataSource) this.ds;\r\n    final Map<String, Boolean> values = new HashMap<>();\r\n    values.put(\"key\", Boolean.TRUE);\r\n    ds.setPerUserTestOnCreate(values);\r\n    assertEquals(Boolean.TRUE, ds.getPerUserTestOnCreate(\"key\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\datasources\\TestPerUserPoolDataSource.java",
  "methodName" : "testPerUserTestOnCreateMapNotInitializedMissingKey",
  "sourceCode" : "// -- per user test on create\r\n@Test\r\nvoid testPerUserTestOnCreateMapNotInitializedMissingKey() {\r\n    final PerUserPoolDataSource ds = (PerUserPoolDataSource) this.ds;\r\n    final Map<String, Boolean> values = new HashMap<>();\r\n    values.put(\"key\", Boolean.FALSE);\r\n    ds.setPerUserTestOnCreate(values);\r\n    assertEquals(ds.getDefaultTestOnCreate(), ds.getPerUserTestOnCreate(\"missingkey\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\datasources\\TestPerUserPoolDataSource.java",
  "methodName" : "testPerUserTestOnCreateWithUserMapInitialized",
  "sourceCode" : "@Test\r\nvoid testPerUserTestOnCreateWithUserMapInitialized() {\r\n    final PerUserPoolDataSource ds = (PerUserPoolDataSource) this.ds;\r\n    ds.setPerUserTestOnCreate(user, Boolean.FALSE);\r\n    assertEquals(Boolean.FALSE, ds.getPerUserTestOnCreate(user));\r\n    ds.setPerUserTestOnCreate(\"anotheruser\", Boolean.FALSE);\r\n    assertEquals(Boolean.FALSE, ds.getPerUserTestOnCreate(user));\r\n    assertEquals(Boolean.FALSE, ds.getPerUserTestOnCreate(\"anotheruser\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\datasources\\TestPerUserPoolDataSource.java",
  "methodName" : "testPerUserTestOnCreateWithUserMapNotInitialized",
  "sourceCode" : "@Test\r\nvoid testPerUserTestOnCreateWithUserMapNotInitialized() {\r\n    final PerUserPoolDataSource ds = (PerUserPoolDataSource) this.ds;\r\n    ds.setPerUserTestOnCreate(user, Boolean.FALSE);\r\n    assertEquals(Boolean.FALSE, ds.getPerUserTestOnCreate(user));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\datasources\\TestPerUserPoolDataSource.java",
  "methodName" : "testPerUserTestOnCreateWithUserMapNotInitializedMissingKey",
  "sourceCode" : "@Test\r\nvoid testPerUserTestOnCreateWithUserMapNotInitializedMissingKey() {\r\n    final PerUserPoolDataSource ds = (PerUserPoolDataSource) this.ds;\r\n    ds.setPerUserTestOnCreate(\"whatismyuseragain?\", Boolean.FALSE);\r\n    assertEquals(ds.getDefaultTestOnCreate(), ds.getPerUserTestOnCreate(\"missingkey\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\datasources\\TestPerUserPoolDataSource.java",
  "methodName" : "testPerUserTestOnReturnMapInitialized",
  "sourceCode" : "@Test\r\nvoid testPerUserTestOnReturnMapInitialized() {\r\n    final PerUserPoolDataSource ds = (PerUserPoolDataSource) this.ds;\r\n    Map<String, Boolean> values = new HashMap<>();\r\n    values.put(\"key\", Boolean.FALSE);\r\n    ds.setPerUserTestOnReturn(values);\r\n    assertEquals(Boolean.FALSE, ds.getPerUserTestOnReturn(\"key\"));\r\n    values = new HashMap<>();\r\n    values.put(\"anonymous\", Boolean.FALSE);\r\n    ds.setPerUserTestOnReturn(values);\r\n    assertEquals(ds.getDefaultTestOnReturn(), ds.getPerUserTestOnReturn(\"key\"));\r\n    assertEquals(Boolean.FALSE, ds.getPerUserTestOnReturn(\"anonymous\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\datasources\\TestPerUserPoolDataSource.java",
  "methodName" : "testPerUserTestOnReturnMapNotInitialized",
  "sourceCode" : "@Test\r\nvoid testPerUserTestOnReturnMapNotInitialized() {\r\n    final PerUserPoolDataSource ds = (PerUserPoolDataSource) this.ds;\r\n    final Map<String, Boolean> values = new HashMap<>();\r\n    values.put(\"key\", Boolean.TRUE);\r\n    ds.setPerUserTestOnReturn(values);\r\n    assertEquals(Boolean.TRUE, ds.getPerUserTestOnReturn(\"key\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\datasources\\TestPerUserPoolDataSource.java",
  "methodName" : "testPerUserTestOnReturnMapNotInitializedMissingKey",
  "sourceCode" : "@Test\r\nvoid testPerUserTestOnReturnMapNotInitializedMissingKey() {\r\n    final PerUserPoolDataSource ds = (PerUserPoolDataSource) this.ds;\r\n    final Map<String, Boolean> values = new HashMap<>();\r\n    values.put(\"key\", Boolean.FALSE);\r\n    ds.setPerUserTestOnReturn(values);\r\n    assertEquals(ds.getDefaultTestOnReturn(), ds.getPerUserTestOnReturn(\"missingkey\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\datasources\\TestPerUserPoolDataSource.java",
  "methodName" : "testPerUserTestOnReturnWithUserMapInitialized",
  "sourceCode" : "// -- per user test on return\r\n@Test\r\nvoid testPerUserTestOnReturnWithUserMapInitialized() {\r\n    final PerUserPoolDataSource ds = (PerUserPoolDataSource) this.ds;\r\n    ds.setPerUserTestOnReturn(user, Boolean.FALSE);\r\n    assertEquals(Boolean.FALSE, ds.getPerUserTestOnReturn(user));\r\n    ds.setPerUserTestOnReturn(\"anotheruser\", Boolean.FALSE);\r\n    assertEquals(Boolean.FALSE, ds.getPerUserTestOnReturn(user));\r\n    assertEquals(Boolean.FALSE, ds.getPerUserTestOnReturn(\"anotheruser\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\datasources\\TestPerUserPoolDataSource.java",
  "methodName" : "testPerUserTestOnReturnWithUserMapNotInitialized",
  "sourceCode" : "@Test\r\nvoid testPerUserTestOnReturnWithUserMapNotInitialized() {\r\n    final PerUserPoolDataSource ds = (PerUserPoolDataSource) this.ds;\r\n    ds.setPerUserTestOnReturn(user, Boolean.FALSE);\r\n    assertEquals(Boolean.FALSE, ds.getPerUserTestOnReturn(user));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\datasources\\TestPerUserPoolDataSource.java",
  "methodName" : "testPerUserTestOnReturnWithUserMapNotInitializedMissingKey",
  "sourceCode" : "@Test\r\nvoid testPerUserTestOnReturnWithUserMapNotInitializedMissingKey() {\r\n    final PerUserPoolDataSource ds = (PerUserPoolDataSource) this.ds;\r\n    ds.setPerUserTestOnReturn(\"whatismyuseragain?\", Boolean.FALSE);\r\n    assertEquals(ds.getDefaultTestOnReturn(), ds.getPerUserTestOnReturn(\"missingkey\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\datasources\\TestPerUserPoolDataSource.java",
  "methodName" : "testPerUserTestWhileIdleMapInitialized",
  "sourceCode" : "@Test\r\nvoid testPerUserTestWhileIdleMapInitialized() {\r\n    final PerUserPoolDataSource ds = (PerUserPoolDataSource) this.ds;\r\n    Map<String, Boolean> values = new HashMap<>();\r\n    values.put(\"key\", Boolean.FALSE);\r\n    ds.setPerUserTestWhileIdle(values);\r\n    assertEquals(Boolean.FALSE, ds.getPerUserTestWhileIdle(\"key\"));\r\n    values = new HashMap<>();\r\n    values.put(\"anonymous\", Boolean.FALSE);\r\n    ds.setPerUserTestWhileIdle(values);\r\n    assertEquals(ds.getDefaultTestWhileIdle(), ds.getPerUserTestWhileIdle(\"key\"));\r\n    assertEquals(Boolean.FALSE, ds.getPerUserTestWhileIdle(\"anonymous\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\datasources\\TestPerUserPoolDataSource.java",
  "methodName" : "testPerUserTestWhileIdleMapNotInitialized",
  "sourceCode" : "@Test\r\nvoid testPerUserTestWhileIdleMapNotInitialized() {\r\n    final PerUserPoolDataSource ds = (PerUserPoolDataSource) this.ds;\r\n    final Map<String, Boolean> values = new HashMap<>();\r\n    values.put(\"key\", Boolean.TRUE);\r\n    ds.setPerUserTestWhileIdle(values);\r\n    assertEquals(Boolean.TRUE, ds.getPerUserTestWhileIdle(\"key\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\datasources\\TestPerUserPoolDataSource.java",
  "methodName" : "testPerUserTestWhileIdleMapNotInitializedMissingKey",
  "sourceCode" : "@Test\r\nvoid testPerUserTestWhileIdleMapNotInitializedMissingKey() {\r\n    final PerUserPoolDataSource ds = (PerUserPoolDataSource) this.ds;\r\n    final Map<String, Boolean> values = new HashMap<>();\r\n    values.put(\"key\", Boolean.FALSE);\r\n    ds.setPerUserTestWhileIdle(values);\r\n    assertEquals(ds.getDefaultTestWhileIdle(), ds.getPerUserTestWhileIdle(\"missingkey\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\datasources\\TestPerUserPoolDataSource.java",
  "methodName" : "testPerUserTestWhileIdleWithUserMapInitialized",
  "sourceCode" : "@Test\r\nvoid testPerUserTestWhileIdleWithUserMapInitialized() {\r\n    final PerUserPoolDataSource ds = (PerUserPoolDataSource) this.ds;\r\n    ds.setPerUserTestWhileIdle(user, Boolean.FALSE);\r\n    assertEquals(Boolean.FALSE, ds.getPerUserTestWhileIdle(user));\r\n    ds.setPerUserTestWhileIdle(\"anotheruser\", Boolean.FALSE);\r\n    assertEquals(Boolean.FALSE, ds.getPerUserTestWhileIdle(user));\r\n    assertEquals(Boolean.FALSE, ds.getPerUserTestWhileIdle(\"anotheruser\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\datasources\\TestPerUserPoolDataSource.java",
  "methodName" : "testPerUserTestWhileIdleWithUserMapNotInitialized",
  "sourceCode" : "@Test\r\nvoid testPerUserTestWhileIdleWithUserMapNotInitialized() {\r\n    final PerUserPoolDataSource ds = (PerUserPoolDataSource) this.ds;\r\n    ds.setPerUserTestWhileIdle(user, Boolean.FALSE);\r\n    assertEquals(Boolean.FALSE, ds.getPerUserTestWhileIdle(user));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\datasources\\TestPerUserPoolDataSource.java",
  "methodName" : "testPerUserTestWhileIdleWithUserMapNotInitializedMissingKey",
  "sourceCode" : "@Test\r\nvoid testPerUserTestWhileIdleWithUserMapNotInitializedMissingKey() {\r\n    final PerUserPoolDataSource ds = (PerUserPoolDataSource) this.ds;\r\n    ds.setPerUserTestWhileIdle(\"whatismyuseragain?\", Boolean.FALSE);\r\n    assertEquals(ds.getDefaultTestWhileIdle(), ds.getPerUserTestWhileIdle(\"missingkey\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\datasources\\TestPerUserPoolDataSource.java",
  "methodName" : "testPerUserTimeBetweenEvictionRunsMillisWithUserMapInitialized",
  "sourceCode" : "@Test\r\nvoid testPerUserTimeBetweenEvictionRunsMillisWithUserMapInitialized() {\r\n    final PerUserPoolDataSource ds = (PerUserPoolDataSource) this.ds;\r\n    ds.setPerUserTimeBetweenEvictionRunsMillis(user, 0L);\r\n    assertEquals(0L, ds.getPerUserTimeBetweenEvictionRunsMillis(user));\r\n    ds.setPerUserTimeBetweenEvictionRunsMillis(\"anotheruser\", 0L);\r\n    assertEquals(0L, ds.getPerUserTimeBetweenEvictionRunsMillis(user));\r\n    assertEquals(0L, ds.getPerUserTimeBetweenEvictionRunsMillis(\"anotheruser\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\datasources\\TestPerUserPoolDataSource.java",
  "methodName" : "testPerUserTimeBetweenEvictionRunsMillisWithUserMapNotInitialized",
  "sourceCode" : "@Test\r\nvoid testPerUserTimeBetweenEvictionRunsMillisWithUserMapNotInitialized() {\r\n    final PerUserPoolDataSource ds = (PerUserPoolDataSource) this.ds;\r\n    ds.setPerUserTimeBetweenEvictionRunsMillis(user, 0L);\r\n    assertEquals(0L, ds.getPerUserTimeBetweenEvictionRunsMillis(user));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\datasources\\TestPerUserPoolDataSource.java",
  "methodName" : "testPerUserTimeBetweenEvictionRunsMillisWithUserMapNotInitializedMissingKey",
  "sourceCode" : "@Test\r\nvoid testPerUserTimeBetweenEvictionRunsMillisWithUserMapNotInitializedMissingKey() {\r\n    final PerUserPoolDataSource ds = (PerUserPoolDataSource) this.ds;\r\n    ds.setPerUserTimeBetweenEvictionRunsMillis(\"whatismyuseragain?\", 0L);\r\n    assertEquals(ds.getDefaultTimeBetweenEvictionRunsMillis(), ds.getPerUserTimeBetweenEvictionRunsMillis(\"missingkey\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\datasources\\TestPerUserPoolDataSource.java",
  "methodName" : "testSerialization",
  "sourceCode" : "// -- per user time between eviction runs millis\r\n@Test\r\nvoid testSerialization() throws Exception {\r\n    // make sure the pool has initialized\r\n    final Connection conn = ds.getConnection();\r\n    conn.close();\r\n    // serialize\r\n    final ByteArrayOutputStream baos = new ByteArrayOutputStream();\r\n    final ObjectOutputStream out = new ObjectOutputStream(baos);\r\n    out.writeObject(ds);\r\n    out.close();\r\n    final byte[] b = baos.toByteArray();\r\n    final ByteArrayInputStream bais = new ByteArrayInputStream(b);\r\n    final ObjectInputStream in = new ObjectInputStream(bais);\r\n    final Object obj = in.readObject();\r\n    in.close();\r\n    assertEquals(1, ((PerUserPoolDataSource) obj).getNumIdle());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\datasources\\TestPerUserPoolDataSource.java",
  "methodName" : "testSimple",
  "sourceCode" : "@Override\r\n@Test\r\npublic void testSimple() throws Exception {\r\n    try (final Connection conn = ds.getConnection()) {\r\n        assertNotNull(conn);\r\n        try (final PreparedStatement stmt = conn.prepareStatement(\"select * from dual\")) {\r\n            assertNotNull(stmt);\r\n            try (final ResultSet rset = stmt.executeQuery()) {\r\n                assertNotNull(rset);\r\n                assertTrue(rset.next());\r\n            }\r\n        }\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\datasources\\TestPerUserPoolDataSource.java",
  "methodName" : "testSimple2",
  "sourceCode" : "@Override\r\n@Test\r\npublic void testSimple2() throws Exception {\r\n    Connection conn = ds.getConnection();\r\n    assertNotNull(conn);\r\n    PreparedStatement stmt = conn.prepareStatement(\"select * from dual\");\r\n    assertNotNull(stmt);\r\n    ResultSet rset = stmt.executeQuery();\r\n    assertNotNull(rset);\r\n    assertTrue(rset.next());\r\n    rset.close();\r\n    stmt.close();\r\n    stmt = conn.prepareStatement(\"select * from dual\");\r\n    assertNotNull(stmt);\r\n    rset = stmt.executeQuery();\r\n    assertNotNull(rset);\r\n    assertTrue(rset.next());\r\n    rset.close();\r\n    stmt.close();\r\n    conn.close();\r\n    assertThrows(SQLException.class, conn::createStatement, \"Can't use closed connections\");\r\n    conn = ds.getConnection();\r\n    assertNotNull(conn);\r\n    stmt = conn.prepareStatement(\"select * from dual\");\r\n    assertNotNull(stmt);\r\n    rset = stmt.executeQuery();\r\n    assertNotNull(rset);\r\n    assertTrue(rset.next());\r\n    rset.close();\r\n    stmt.close();\r\n    stmt = conn.prepareStatement(\"select * from dual\");\r\n    assertNotNull(stmt);\r\n    rset = stmt.executeQuery();\r\n    assertNotNull(rset);\r\n    assertTrue(rset.next());\r\n    rset.close();\r\n    stmt.close();\r\n    conn.close();\r\n    conn = null;\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\datasources\\TestPerUserPoolDataSource.java",
  "methodName" : "testSimpleWithUsername",
  "sourceCode" : "@Test\r\nvoid testSimpleWithUsername() throws Exception {\r\n    try (final Connection conn = ds.getConnection(\"u1\", \"p1\")) {\r\n        assertNotNull(conn);\r\n        try (final PreparedStatement stmt = conn.prepareStatement(\"select * from dual\")) {\r\n            assertNotNull(stmt);\r\n            try (final ResultSet rset = stmt.executeQuery()) {\r\n                assertNotNull(rset);\r\n                assertTrue(rset.next());\r\n            }\r\n        }\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\datasources\\TestPerUserPoolDataSource.java",
  "methodName" : "testTransactionIsolationBehavior",
  "sourceCode" : "@Test\r\nvoid testTransactionIsolationBehavior() throws Exception {\r\n    try (Connection conn = getConnection()) {\r\n        assertNotNull(conn);\r\n        assertEquals(Connection.TRANSACTION_READ_COMMITTED, conn.getTransactionIsolation());\r\n        conn.setTransactionIsolation(Connection.TRANSACTION_READ_UNCOMMITTED);\r\n    }\r\n    final Connection conn2 = getConnection();\r\n    assertEquals(Connection.TRANSACTION_READ_COMMITTED, conn2.getTransactionIsolation());\r\n    final Connection conn3 = getConnection();\r\n    assertEquals(Connection.TRANSACTION_READ_COMMITTED, conn3.getTransactionIsolation());\r\n    conn2.close();\r\n    conn3.close();\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\datasources\\TestPerUserPoolDataSource.java",
  "methodName" : "testUnregisteredUser",
  "sourceCode" : "// see issue https://issues.apache.org/bugzilla/show_bug.cgi?id=23843\r\n// unregistered user is in the same pool as without user name\r\n@Test\r\nvoid testUnregisteredUser() throws Exception {\r\n    final PerUserPoolDataSource tds = (PerUserPoolDataSource) ds;\r\n    assertEquals(0, tds.getNumActive());\r\n    assertEquals(0, tds.getNumIdle());\r\n    try (Connection conn = tds.getConnection()) {\r\n        assertNotNull(conn);\r\n        assertEquals(1, tds.getNumActive());\r\n        assertEquals(0, tds.getNumIdle());\r\n    }\r\n    assertEquals(0, tds.getNumActive());\r\n    assertEquals(1, tds.getNumIdle());\r\n    try (Connection conn = tds.getConnection(\"u1\", \"p1\")) {\r\n        assertNotNull(conn);\r\n        assertEquals(0, tds.getNumActive());\r\n        assertEquals(1, tds.getNumIdle());\r\n        assertEquals(1, tds.getNumActive(\"u1\"));\r\n        assertEquals(0, tds.getNumIdle(\"u1\"));\r\n    }\r\n    assertEquals(0, tds.getNumActive());\r\n    assertEquals(1, tds.getNumIdle());\r\n    assertEquals(0, tds.getNumActive(\"u1\"));\r\n    assertEquals(1, tds.getNumIdle(\"u1\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\datasources\\TestPoolKey.java",
  "methodName" : "testEquals",
  "sourceCode" : "@Test\r\nvoid testEquals() {\r\n    assertEquals(poolKey, poolKey);\r\n    assertNotEquals(poolKey, null);\r\n    assertNotEquals(poolKey, new Object());\r\n    assertNotEquals(new PoolKey(null, \"user\"), poolKey);\r\n    assertEquals(new PoolKey(null, \"user\"), new PoolKey(null, \"user\"));\r\n    assertNotEquals(new PoolKey(null, \"user\"), new PoolKey(null, \"foo\"));\r\n    assertNotEquals(new PoolKey(\"ds\", null), new PoolKey(\"foo\", null));\r\n    assertNotEquals(new PoolKey(\"ds\", null), poolKey);\r\n    assertEquals(new PoolKey(\"ds\", null), new PoolKey(\"ds\", null));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\datasources\\TestPoolKey.java",
  "methodName" : "testHashcode",
  "sourceCode" : "@Test\r\nvoid testHashcode() {\r\n    assertEquals(poolKey.hashCode(), new PoolKey(\"ds\", \"user\").hashCode());\r\n    assertNotEquals(poolKey.hashCode(), anotherPoolKey.hashCode());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\datasources\\TestPoolKey.java",
  "methodName" : "testToString",
  "sourceCode" : "@Test\r\nvoid testToString() {\r\n    assertEquals(poolKey.toString(), new PoolKey(\"ds\", \"user\").toString());\r\n    assertNotEquals(poolKey.toString(), anotherPoolKey.toString());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\datasources\\TestSharedPoolDataSource.java",
  "methodName" : "testChangePassword",
  "sourceCode" : "// See DBCP-8\r\n@Test\r\nvoid testChangePassword() throws Exception {\r\n    assertThrows(SQLException.class, () -> ds.getConnection(\"foo\", \"bay\"));\r\n    final Connection con1 = ds.getConnection(\"foo\", \"bar\");\r\n    final Connection con2 = ds.getConnection(\"foo\", \"bar\");\r\n    final Connection con3 = ds.getConnection(\"foo\", \"bar\");\r\n    con1.close();\r\n    con2.close();\r\n    // change the user/password setting\r\n    TesterDriver.addUser(\"foo\", \"bay\");\r\n    try (Connection con4 = ds.getConnection(\"foo\", \"bay\")) {\r\n        // new password\r\n        // Idle instances with old password should have been cleared\r\n        assertEquals(0, ((SharedPoolDataSource) ds).getNumIdle(), \"Should be no idle connections in the pool\");\r\n        con4.close();\r\n        // Should be one idle instance with new pwd\r\n        assertEquals(1, ((SharedPoolDataSource) ds).getNumIdle(), \"Should be one idle connection in the pool\");\r\n        // old password\r\n        assertThrows(SQLException.class, () -> ds.getConnection(\"foo\", \"bar\"));\r\n        try (final Connection con5 = ds.getConnection(\"foo\", \"bay\")) {\r\n            // take the idle one\r\n            // Return a connection with the old password\r\n            con3.close();\r\n            // will try bad returned connection and destroy it\r\n            ds.getConnection(\"foo\", \"bay\").close();\r\n            assertEquals(1, ((SharedPoolDataSource) ds).getNumIdle(), \"Should be one idle connection in the pool\");\r\n        }\r\n    } finally {\r\n        TesterDriver.addUser(\"foo\", \"bar\");\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\datasources\\TestSharedPoolDataSource.java",
  "methodName" : "testClosePool",
  "sourceCode" : "/**\r\n * Tests pool close. Illustrates BZ 37359.\r\n *\r\n * @throws Exception\r\n */\r\n@Test\r\nvoid testClosePool() throws Exception {\r\n    ((SharedPoolDataSource) ds).close();\r\n    // closed below\r\n    @SuppressWarnings(\"resource\")\r\n    final SharedPoolDataSource tds = new SharedPoolDataSource();\r\n    // NPE before BZ 37359 fix\r\n    tds.close();\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\datasources\\TestSharedPoolDataSource.java",
  "methodName" : "testClosing",
  "sourceCode" : "@Override\r\n@Test\r\npublic void testClosing() throws Exception {\r\n    final Connection[] c = new Connection[getMaxTotal()];\r\n    // open the maximum connections\r\n    for (int i = 0; i < c.length; i++) {\r\n        c[i] = ds.getConnection();\r\n    }\r\n    // close one of the connections\r\n    c[0].close();\r\n    assertTrue(c[0].isClosed());\r\n    // get a new connection\r\n    c[0] = ds.getConnection();\r\n    for (final Connection element : c) {\r\n        element.close();\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\datasources\\TestSharedPoolDataSource.java",
  "methodName" : "testClosingWithUserName",
  "sourceCode" : "@Test\r\nvoid testClosingWithUserName() throws Exception {\r\n    final Connection[] c = new Connection[getMaxTotal()];\r\n    // open the maximum connections\r\n    for (int i = 0; i < c.length; i++) {\r\n        c[i] = ds.getConnection(\"u1\", \"p1\");\r\n    }\r\n    // close one of the connections\r\n    c[0].close();\r\n    assertTrue(c[0].isClosed());\r\n    // get a new connection\r\n    c[0] = ds.getConnection(\"u1\", \"p1\");\r\n    for (final Connection element : c) {\r\n        element.close();\r\n    }\r\n    // open the maximum connections\r\n    for (int i = 0; i < c.length; i++) {\r\n        c[i] = ds.getConnection(\"u1\", \"p1\");\r\n    }\r\n    for (final Connection element : c) {\r\n        element.close();\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\datasources\\TestSharedPoolDataSource.java",
  "methodName" : "testDbcp369",
  "sourceCode" : "@Test\r\nvoid testDbcp369() {\r\n    final ArrayList<SharedPoolDataSource> dataSources = new ArrayList<>();\r\n    for (int j = 0; j < 10000; j++) {\r\n        dataSources.add(new SharedPoolDataSource());\r\n    }\r\n    final Thread t1 = new Thread(() -> {\r\n        for (final SharedPoolDataSource dataSource : dataSources) {\r\n            dataSource.setDataSourceName(\"a\");\r\n        }\r\n    });\r\n    final Thread t2 = new Thread(() -> {\r\n        for (final SharedPoolDataSource dataSource : dataSources) {\r\n            try {\r\n                dataSource.close();\r\n            } catch (final Exception e) {\r\n                // Ignore\r\n            }\r\n        }\r\n    });\r\n    t1.start();\r\n    t2.start();\r\n    try {\r\n        t1.join();\r\n        t2.join();\r\n    } catch (final InterruptedException ie) {\r\n        // Ignore\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\datasources\\TestSharedPoolDataSource.java",
  "methodName" : "testDbcp597",
  "sourceCode" : "/**\r\n * Tests https://issues.apache.org/jira/browse/DBCP-597\r\n */\r\n@Test\r\nvoid testDbcp597() throws SQLException {\r\n    try (final SharedPoolDataSource sharedPoolDataSource = new SharedPoolDataSource()) {\r\n        sharedPoolDataSource.setConnectionPoolDataSource(pcds);\r\n        sharedPoolDataSource.setDefaultTestOnBorrow(true);\r\n        sharedPoolDataSource.setValidationQuery(\"SELECT 1\");\r\n        // The tester statement throws a SQLTimeoutException when the timeout is > 0 and < 5.\r\n        sharedPoolDataSource.setValidationQueryTimeout(Duration.ofSeconds(1));\r\n        // The SQLTimeoutException is lost for now\r\n        SQLException e = assertThrows(SQLException.class, sharedPoolDataSource::getConnection);\r\n        assertEquals(NoSuchElementException.class, e.getCause().getClass());\r\n        // timeout > 0 and < 1\r\n        sharedPoolDataSource.setValidationQueryTimeout(Duration.ofMillis(999));\r\n        // The SQLTimeoutException is lost for now\r\n        e = assertThrows(SQLException.class, sharedPoolDataSource::getConnection);\r\n        assertEquals(NoSuchElementException.class, e.getCause().getClass());\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\datasources\\TestSharedPoolDataSource.java",
  "methodName" : "testIncorrectPassword",
  "sourceCode" : "/**\r\n * Starting with a successful connection, then incorrect password, then correct password for same user illustrates JIRA: DBCP-245\r\n */\r\n@Test\r\nvoid testIncorrectPassword() throws SQLException {\r\n    ds.getConnection(\"u2\", \"p2\").close();\r\n    assertThrows(SQLException.class, () -> ds.getConnection(\"u1\", \"zlsafjk\"), \"Able to retrieve connection with incorrect password\");\r\n    // Use good password\r\n    ds.getConnection(\"u1\", \"p1\").close();\r\n    final SQLException e = assertThrows(SQLException.class, () -> ds.getConnection(\"u1\", \"x\"), \"Able to retrieve connection with incorrect password\");\r\n    assertTrue(e.getMessage().startsWith(\"Given password did not match\"));\r\n    // Make sure we can still use our good password.\r\n    ds.getConnection(\"u1\", \"p1\").close();\r\n    // Try related users and passwords\r\n    ds.getConnection(\"foo\", \"bar\").close();\r\n    assertThrows(SQLException.class, () -> ds.getConnection(\"u1\", \"ar\"));\r\n    assertThrows(SQLException.class, () -> ds.getConnection(\"u1\", \"baz\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\datasources\\TestSharedPoolDataSource.java",
  "methodName" : "testMaxTotal",
  "sourceCode" : "@Override\r\n@Test\r\npublic void testMaxTotal() throws Exception {\r\n    final Connection[] c = new Connection[getMaxTotal()];\r\n    for (int i = 0; i < c.length; i++) {\r\n        c[i] = ds.getConnection();\r\n        assertNotNull(c[i]);\r\n    }\r\n    assertThrows(SQLException.class, ds::getConnection, \"Allowed to open more than DefaultMaxTotal connections.\");\r\n    for (final Connection element : c) {\r\n        element.close();\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\datasources\\TestSharedPoolDataSource.java",
  "methodName" : "testMaxWaitMillis",
  "sourceCode" : "@Test\r\nvoid testMaxWaitMillis() throws Exception {\r\n    final int maxWaitMillis = 1000;\r\n    final int theadCount = 20;\r\n    ((SharedPoolDataSource) ds).setDefaultMaxWait(Duration.ofMillis(maxWaitMillis));\r\n    // Obtain all the connections from the pool\r\n    final Connection[] c = new Connection[getMaxTotal()];\r\n    for (int i = 0; i < c.length; i++) {\r\n        c[i] = ds.getConnection(\"foo\", \"bar\");\r\n        assertNotNull(c[i]);\r\n    }\r\n    final long startMillis = System.currentTimeMillis();\r\n    // Run a thread test with minimal hold time\r\n    // All threads should end after maxWaitMillis - DBCP-291\r\n    final PoolTest[] pts = new PoolTest[theadCount];\r\n    final ThreadGroup threadGroup = new ThreadGroup(\"testMaxWaitMillis\");\r\n    // Should take ~maxWaitMillis for threads to stop\r\n    for (int i = 0; i < pts.length; i++) {\r\n        pts[i] = new PoolTest(threadGroup, Duration.ofMillis(1), true);\r\n        pts[i].start();\r\n    }\r\n    // Wait for all the threads to complete\r\n    for (final PoolTest poolTest : pts) {\r\n        poolTest.getThread().join();\r\n    }\r\n    final long endMillis = System.currentTimeMillis();\r\n    // System.out.println(\"testMaxWaitMillis took \" + (end - start) + \" ms. maxWaitMillis: \" + maxWaitMillis);\r\n    // Threads should time out in parallel - allow double that to be safe\r\n    assertTrue(endMillis - startMillis < 2 * maxWaitMillis);\r\n    // Put all the connections back in the pool\r\n    for (final Connection element : c) {\r\n        element.close();\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\datasources\\TestSharedPoolDataSource.java",
  "methodName" : "testMultipleThreads1",
  "sourceCode" : "@Test\r\nvoid testMultipleThreads1() throws Exception {\r\n    // Override wait time in order to allow for Thread.sleep(1) sometimes taking a lot longer on\r\n    // some JVMs, e.g. Windows.\r\n    final Duration defaultMaxWaitDuration = Duration.ofMillis(430);\r\n    ((SharedPoolDataSource) ds).setDefaultMaxWait(defaultMaxWaitDuration);\r\n    multipleThreads(Duration.ofMillis(1), false, false, defaultMaxWaitDuration);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\datasources\\TestSharedPoolDataSource.java",
  "methodName" : "testMultipleThreads2",
  "sourceCode" : "@Test\r\nvoid testMultipleThreads2() throws Exception {\r\n    final Duration defaultMaxWaitDuration = Duration.ofMillis(500);\r\n    ((SharedPoolDataSource) ds).setDefaultMaxWait(defaultMaxWaitDuration);\r\n    multipleThreads(defaultMaxWaitDuration.multipliedBy(2), true, true, defaultMaxWaitDuration);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\datasources\\TestSharedPoolDataSource.java",
  "methodName" : "testOpening",
  "sourceCode" : "@Override\r\n@Test\r\npublic void testOpening() throws Exception {\r\n    final Connection[] c = new Connection[getMaxTotal()];\r\n    // test that opening new connections is not closing previous\r\n    for (int i = 0; i < c.length; i++) {\r\n        c[i] = ds.getConnection();\r\n        assertNotNull(c[i]);\r\n        for (int j = 0; j <= i; j++) {\r\n            assertFalse(c[j].isClosed());\r\n        }\r\n    }\r\n    for (final Connection element : c) {\r\n        element.close();\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\datasources\\TestSharedPoolDataSource.java",
  "methodName" : "testPoolPrepareCall",
  "sourceCode" : "/**\r\n * Bugzilla Bug 24136 ClassCastException in DriverAdapterCPDS when setPoolPreparedStatements(true)\r\n */\r\n@Test\r\nvoid testPoolPrepareCall() throws SQLException {\r\n    pcds.setPoolPreparedStatements(true);\r\n    try (final Connection conn = ds.getConnection()) {\r\n        assertNotNull(conn);\r\n        try (final PreparedStatement stmt = conn.prepareCall(\"{call home()}\")) {\r\n            assertNotNull(stmt);\r\n            try (final ResultSet rset = stmt.executeQuery()) {\r\n                assertNotNull(rset);\r\n                assertTrue(rset.next());\r\n            }\r\n        }\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\datasources\\TestSharedPoolDataSource.java",
  "methodName" : "testPoolPreparedCalls",
  "sourceCode" : "@Test\r\nvoid testPoolPreparedCalls() throws Exception {\r\n    doTestPoolCallableStatements(new CscbString());\r\n    doTestPoolCallableStatements(new CscbStringIntInt());\r\n    doTestPoolCallableStatements(new CscbStringIntIntInt());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\datasources\\TestSharedPoolDataSource.java",
  "methodName" : "testPoolPreparedStatements",
  "sourceCode" : "@Test\r\nvoid testPoolPreparedStatements() throws Exception {\r\n    doTestPoolPreparedStatements(new PscbString());\r\n    doTestPoolPreparedStatements(new PscbStringIntInt());\r\n    doTestPoolPreparedStatements(new PscbStringInt());\r\n    doTestPoolPreparedStatements(new PscbStringIntArray());\r\n    doTestPoolPreparedStatements(new PscbStringStringArray());\r\n    doTestPoolPreparedStatements(new PscbStringIntIntInt());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\datasources\\TestSharedPoolDataSource.java",
  "methodName" : "testPoolPrepareStatement",
  "sourceCode" : "@Test\r\nvoid testPoolPrepareStatement() throws SQLException {\r\n    pcds.setPoolPreparedStatements(true);\r\n    try (final Connection conn = ds.getConnection()) {\r\n        assertNotNull(conn);\r\n        try (final PreparedStatement stmt = conn.prepareStatement(\"select * from dual\")) {\r\n            assertNotNull(stmt);\r\n            try (final ResultSet rset = stmt.executeQuery()) {\r\n                assertNotNull(rset);\r\n                assertTrue(rset.next());\r\n            }\r\n        }\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\datasources\\TestSharedPoolDataSource.java",
  "methodName" : "testSimple",
  "sourceCode" : "@Override\r\n@Test\r\npublic void testSimple() throws Exception {\r\n    try (final Connection conn = ds.getConnection()) {\r\n        assertNotNull(conn);\r\n        try (final PreparedStatement stmt = conn.prepareStatement(\"select * from dual\")) {\r\n            assertNotNull(stmt);\r\n            try (final ResultSet rset = stmt.executeQuery()) {\r\n                assertNotNull(rset);\r\n                assertTrue(rset.next());\r\n            }\r\n        }\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\datasources\\TestSharedPoolDataSource.java",
  "methodName" : "testSimple2",
  "sourceCode" : "@Override\r\n@Test\r\npublic void testSimple2() throws SQLException {\r\n    {\r\n        final Connection conn = ds.getConnection();\r\n        assertNotNull(conn);\r\n        try (PreparedStatement stmt = conn.prepareStatement(\"select * from dual\")) {\r\n            assertNotNull(stmt);\r\n            try (ResultSet rset = stmt.executeQuery()) {\r\n                assertNotNull(rset);\r\n                assertTrue(rset.next());\r\n            }\r\n        }\r\n        try (PreparedStatement stmt = conn.prepareStatement(\"select * from dual\")) {\r\n            assertNotNull(stmt);\r\n            try (ResultSet rset = stmt.executeQuery()) {\r\n                assertNotNull(rset);\r\n                assertTrue(rset.next());\r\n            }\r\n        }\r\n        conn.close();\r\n        assertThrows(SQLException.class, () -> conn.createStatement(), \"Can't use closed connections\");\r\n    }\r\n    try (Connection conn = ds.getConnection()) {\r\n        assertNotNull(conn);\r\n        try (PreparedStatement stmt = conn.prepareStatement(\"select * from dual\")) {\r\n            assertNotNull(stmt);\r\n            try (ResultSet rset = stmt.executeQuery()) {\r\n                assertNotNull(rset);\r\n                assertTrue(rset.next());\r\n            }\r\n        }\r\n        try (PreparedStatement stmt = conn.prepareStatement(\"select * from dual\")) {\r\n            assertNotNull(stmt);\r\n            try (ResultSet rset = stmt.executeQuery()) {\r\n                assertNotNull(rset);\r\n                assertTrue(rset.next());\r\n            }\r\n        }\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\datasources\\TestSharedPoolDataSource.java",
  "methodName" : "testSimpleWithUsername",
  "sourceCode" : "@Test\r\nvoid testSimpleWithUsername() throws Exception {\r\n    try (final Connection conn = ds.getConnection(\"u1\", \"p1\")) {\r\n        assertNotNull(conn);\r\n        try (final PreparedStatement stmt = conn.prepareStatement(\"select * from dual\")) {\r\n            assertNotNull(stmt);\r\n            try (final ResultSet rset = stmt.executeQuery()) {\r\n                assertNotNull(rset);\r\n                assertTrue(rset.next());\r\n            }\r\n        }\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\datasources\\TestSharedPoolDataSource.java",
  "methodName" : "testTransactionIsolationBehavior",
  "sourceCode" : "@Test\r\nvoid testTransactionIsolationBehavior() throws Exception {\r\n    try (final Connection conn = getConnection()) {\r\n        assertNotNull(conn);\r\n        assertEquals(Connection.TRANSACTION_READ_COMMITTED, conn.getTransactionIsolation());\r\n        conn.setTransactionIsolation(Connection.TRANSACTION_READ_UNCOMMITTED);\r\n    }\r\n    final Connection conn2 = getConnection();\r\n    assertEquals(Connection.TRANSACTION_READ_COMMITTED, conn2.getTransactionIsolation());\r\n    final Connection conn3 = getConnection();\r\n    assertEquals(Connection.TRANSACTION_READ_COMMITTED, conn3.getTransactionIsolation());\r\n    conn2.close();\r\n    conn3.close();\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\datasources\\TestUserPassKey.java",
  "methodName" : "testEquals",
  "sourceCode" : "@Test\r\nvoid testEquals() {\r\n    assertEquals(new UserPassKey(\"user\"), new UserPassKey(\"user\", (char[]) null));\r\n    assertEquals(userPassKey, userPassKey);\r\n    assertNotEquals(userPassKey, null);\r\n    assertNotEquals(userPassKey, new Object());\r\n    assertNotEquals(new UserPassKey(null), userPassKey);\r\n    assertEquals(new UserPassKey(null), new UserPassKey(null));\r\n    assertNotEquals(new UserPassKey(\"user\", \"pass\"), new UserPassKey(\"foo\", \"pass\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\datasources\\TestUserPassKey.java",
  "methodName" : "testGettersAndSetters",
  "sourceCode" : "@Test\r\nvoid testGettersAndSetters() {\r\n    assertEquals(\"user\", userPassKey.getUserName());\r\n    assertEquals(\"pass\", userPassKey.getPassword());\r\n    assertArrayEquals(Utils.toCharArray(\"pass\"), userPassKey.getPasswordCharArray());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\datasources\\TestUserPassKey.java",
  "methodName" : "testHashcode",
  "sourceCode" : "@Test\r\nvoid testHashcode() {\r\n    assertEquals(userPassKey.hashCode(), new UserPassKey(\"user\", \"pass\").hashCode());\r\n    assertNotEquals(userPassKey.hashCode(), anotherUserPassKey.hashCode());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\datasources\\TestUserPassKey.java",
  "methodName" : "testSerialization",
  "sourceCode" : "@Test\r\nvoid testSerialization() {\r\n    assertEquals(userPassKey, SerializationUtils.roundtrip(userPassKey));\r\n    assertEquals(anotherUserPassKey, SerializationUtils.roundtrip(anotherUserPassKey));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\datasources\\TestUserPassKey.java",
  "methodName" : "testToString",
  "sourceCode" : "@Test\r\nvoid testToString() {\r\n    assertEquals(userPassKey.toString(), new UserPassKey(\"user\", \"pass\").toString());\r\n    assertNotEquals(userPassKey.toString(), anotherUserPassKey.toString());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\datasources\\UserPassKeyTest.java",
  "methodName" : "testClear",
  "sourceCode" : "@Test\r\nvoid testClear() {\r\n    // user name\r\n    assertNull(new UserPassKey((String) null).clear().getUserName());\r\n    assertEquals(\"\", new UserPassKey(\"\").clear().getUserName());\r\n    assertEquals(\"\\0\\0\\0\", new UserPassKey(\"foo\").clear().getUserName());\r\n    // password String\r\n    assertNull(new UserPassKey((String) null, (String) null).clear().getPassword());\r\n    assertEquals(\"\", new UserPassKey(\"\", \"\").clear().getPassword());\r\n    assertEquals(\"\\0\\0\\0\", new UserPassKey(\"foo\", \"bar\").clear().getPassword());\r\n    // password char[]\r\n    assertNull(new UserPassKey((String) null, (char[]) null).clear().getPasswordCharArray());\r\n    assertArrayEquals(\"\".toCharArray(), new UserPassKey(\"\", \"\").clear().getPasswordCharArray());\r\n    assertArrayEquals(\"\\0\\0\\0\".toCharArray(), new UserPassKey(\"foo\", \"bar\").clear().getPasswordCharArray());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\Jdbc41BridgeTest.java",
  "methodName" : "testAbort",
  "sourceCode" : "@SuppressWarnings(\"resource\")\r\n@Test\r\nvoid testAbort() throws SQLException {\r\n    // Normal\r\n    try (Connection conn = getConnection()) {\r\n        Jdbc41Bridge.abort(conn, r -> {\r\n            // empty for now\r\n        });\r\n    }\r\n    // Force AbstractMethodError\r\n    try (Connection conn = getConnection()) {\r\n        final Connection spy = Mockito.spy(conn);\r\n        Mockito.doThrow(new AbstractMethodError()).when(spy).abort(r -> {\r\n            // empty for now\r\n        });\r\n        Jdbc41Bridge.abort(spy, r -> {\r\n            // empty for now\r\n        });\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\Jdbc41BridgeTest.java",
  "methodName" : "testCloseOnCompletion",
  "sourceCode" : "@SuppressWarnings(\"resource\")\r\n@Test\r\nvoid testCloseOnCompletion() throws SQLException {\r\n    // Normal\r\n    try (Connection conn = getConnection();\r\n        Statement stmt = conn.createStatement()) {\r\n        Jdbc41Bridge.closeOnCompletion(stmt);\r\n    }\r\n    // Force AbstractMethodError\r\n    try (Connection conn = getConnection();\r\n        Statement stmt = conn.createStatement()) {\r\n        final Statement spy = Mockito.spy(stmt);\r\n        Mockito.doThrow(new AbstractMethodError()).when(spy).closeOnCompletion();\r\n        Jdbc41Bridge.closeOnCompletion(spy);\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\Jdbc41BridgeTest.java",
  "methodName" : "testGeneratedKeyAlwaysReturned",
  "sourceCode" : "@SuppressWarnings(\"resource\")\r\n@Test\r\nvoid testGeneratedKeyAlwaysReturned() throws SQLException {\r\n    // Normal\r\n    try (Connection conn = getConnection()) {\r\n        assertTrue(Jdbc41Bridge.generatedKeyAlwaysReturned(conn.getMetaData()));\r\n    }\r\n    // Cannot mock a final class\r\n    // Force AbstractMethodError\r\n    //        try (Connection conn = getConnection()) {\r\n    //            final DatabaseMetaData spy = Mockito.spy(conn.getMetaData());\r\n    //            Mockito.when(spy.generatedKeyAlwaysReturned()).thenThrow(AbstractMethodError.class);\r\n    //            assertTrue(Jdbc41Bridge.generatedKeyAlwaysReturned(spy));\r\n    //        }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\Jdbc41BridgeTest.java",
  "methodName" : "testGetNetworkTimeout",
  "sourceCode" : "@Test\r\nvoid testGetNetworkTimeout() throws SQLException {\r\n    // Normal\r\n    try (Connection conn = getConnection()) {\r\n        Jdbc41Bridge.setNetworkTimeout(conn, r -> {\r\n        }, 30_000);\r\n        // noop in H2\r\n        assertEquals(0, Jdbc41Bridge.getNetworkTimeout(conn));\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\Jdbc41BridgeTest.java",
  "methodName" : "testGetObjectIndex",
  "sourceCode" : "@Test\r\nvoid testGetObjectIndex() throws SQLException {\r\n    // Normal\r\n    try (Connection conn = getConnection();\r\n        ResultSet rs = conn.getMetaData().getTypeInfo()) {\r\n        rs.next();\r\n        assertNotNull(Jdbc41Bridge.getObject(rs, 1, String.class));\r\n        //\r\n        assertNotNull(Jdbc41Bridge.getObject(rs, 2, Integer.class));\r\n        assertNotNull(Jdbc41Bridge.getObject(rs, 2, Long.class));\r\n        assertNotNull(Jdbc41Bridge.getObject(rs, 2, Double.class));\r\n        assertNotNull(Jdbc41Bridge.getObject(rs, 2, Float.class));\r\n        assertNotNull(Jdbc41Bridge.getObject(rs, 2, Byte.class));\r\n        assertNotNull(Jdbc41Bridge.getObject(rs, 2, BigDecimal.class));\r\n        //\r\n        assertNotNull(Jdbc41Bridge.getObject(rs, 7, Short.class));\r\n        assertNotNull(Jdbc41Bridge.getObject(rs, 8, Boolean.class));\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\Jdbc41BridgeTest.java",
  "methodName" : "testGetObjectName",
  "sourceCode" : "@Test\r\nvoid testGetObjectName() throws SQLException {\r\n    // Normal\r\n    try (Connection conn = getConnection();\r\n        ResultSet rs = conn.getMetaData().getTypeInfo()) {\r\n        rs.next();\r\n        assertNotNull(Jdbc41Bridge.getObject(rs, \"TYPE_NAME\", String.class));\r\n        //\r\n        assertNotNull(Jdbc41Bridge.getObject(rs, \"DATA_TYPE\", Integer.class));\r\n        assertNotNull(Jdbc41Bridge.getObject(rs, \"DATA_TYPE\", Long.class));\r\n        assertNotNull(Jdbc41Bridge.getObject(rs, \"DATA_TYPE\", Double.class));\r\n        assertNotNull(Jdbc41Bridge.getObject(rs, \"DATA_TYPE\", Float.class));\r\n        assertNotNull(Jdbc41Bridge.getObject(rs, \"DATA_TYPE\", Byte.class));\r\n        assertNotNull(Jdbc41Bridge.getObject(rs, \"DATA_TYPE\", BigDecimal.class));\r\n        //\r\n        assertNotNull(Jdbc41Bridge.getObject(rs, \"NULLABLE\", Short.class));\r\n        assertNotNull(Jdbc41Bridge.getObject(rs, \"CASE_SENSITIVE\", Boolean.class));\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\Jdbc41BridgeTest.java",
  "methodName" : "testGetParentLogger",
  "sourceCode" : "@Test\r\nvoid testGetParentLogger() throws SQLException {\r\n    // Normal\r\n    try (Connection conn = getConnection();\r\n        Statement stmt = conn.createStatement()) {\r\n        // returns null for H2 (not supported).\r\n        Jdbc41Bridge.getParentLogger(new JdbcDataSource());\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\Jdbc41BridgeTest.java",
  "methodName" : "testGetSchema",
  "sourceCode" : "@SuppressWarnings(\"resource\")\r\n@Test\r\nvoid testGetSchema() throws SQLException {\r\n    // Normal\r\n    try (Connection conn = getConnection()) {\r\n        assertNotNull(Jdbc41Bridge.getSchema(conn));\r\n        final Connection spy = Mockito.spy(conn);\r\n        Mockito.when(spy.getSchema()).thenThrow(AbstractMethodError.class);\r\n        assertNull(Jdbc41Bridge.getSchema(spy));\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\Jdbc41BridgeTest.java",
  "methodName" : "testIsCloseOnCompletion",
  "sourceCode" : "@Test\r\nvoid testIsCloseOnCompletion() throws SQLException {\r\n    // Normal\r\n    try (Connection conn = getConnection();\r\n        Statement stmt = conn.createStatement()) {\r\n        assertFalse(Jdbc41Bridge.isCloseOnCompletion(stmt));\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\Jdbc41BridgeTest.java",
  "methodName" : "testSetNetworkTimeout",
  "sourceCode" : "@Test\r\nvoid testSetNetworkTimeout() throws SQLException {\r\n    // Normal\r\n    try (Connection conn = getConnection();\r\n        Statement stmt = conn.createStatement()) {\r\n        // noop in H2\r\n        Jdbc41Bridge.setNetworkTimeout(conn, r -> {\r\n            // empty for now\r\n        }, 30_0000);\r\n        assertEquals(0, Jdbc41Bridge.getNetworkTimeout(conn));\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\Jdbc41BridgeTest.java",
  "methodName" : "testSetSchema",
  "sourceCode" : "@Test\r\nvoid testSetSchema() throws SQLException {\r\n    // Normal\r\n    try (Connection conn = getConnection();\r\n        Statement stmt = conn.createStatement()) {\r\n        Jdbc41Bridge.setSchema(conn, Jdbc41Bridge.getSchema(conn));\r\n        final String expected = \"PUBLIC\";\r\n        Jdbc41Bridge.setSchema(conn, expected);\r\n        assertEquals(expected, Jdbc41Bridge.getSchema(conn));\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\managed\\TestBasicManagedDataSource.java",
  "methodName" : "testCreateXaDataSourceNewInstance",
  "sourceCode" : "@Test\r\nvoid testCreateXaDataSourceNewInstance() throws SQLException, XAException {\r\n    try (final BasicManagedDataSource basicManagedDataSource = new BasicManagedDataSource()) {\r\n        basicManagedDataSource.setXADataSource(JdbcDataSource.class.getCanonicalName());\r\n        basicManagedDataSource.setDriverClassName(Driver.class.getName());\r\n        basicManagedDataSource.setTransactionManager(new TransactionManagerImpl());\r\n        assertNotNull(basicManagedDataSource.createConnectionFactory());\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\managed\\TestBasicManagedDataSource.java",
  "methodName" : "testCreateXaDataSourceNoInstanceSetAndNoDataSource",
  "sourceCode" : "@Test\r\nvoid testCreateXaDataSourceNoInstanceSetAndNoDataSource() throws SQLException, XAException {\r\n    try (final BasicManagedDataSource basicManagedDataSource = new BasicManagedDataSource()) {\r\n        basicManagedDataSource.setDriverClassName(\"org.apache.commons.dbcp2.TesterDriver\");\r\n        basicManagedDataSource.setUrl(\"jdbc:apache:commons:testdriver\");\r\n        basicManagedDataSource.setTransactionManager(new TransactionManagerImpl());\r\n        assertNotNull(basicManagedDataSource.createConnectionFactory());\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\managed\\TestBasicManagedDataSource.java",
  "methodName" : "testReallyClose",
  "sourceCode" : "/**\r\n * JIRA: DBCP-294\r\n * Verify that PoolableConnections created by BasicManagedDataSource unregister themselves\r\n * when reallyClosed.\r\n */\r\n@Test\r\nvoid testReallyClose() throws Exception {\r\n    try (final BasicManagedDataSource basicManagedDataSource = new BasicManagedDataSource()) {\r\n        basicManagedDataSource.setTransactionManager(new TransactionManagerImpl());\r\n        basicManagedDataSource.setDriverClassName(\"org.apache.commons.dbcp2.TesterDriver\");\r\n        basicManagedDataSource.setUrl(\"jdbc:apache:commons:testdriver\");\r\n        basicManagedDataSource.setUsername(\"userName\");\r\n        basicManagedDataSource.setPassword(\"password\");\r\n        basicManagedDataSource.setMaxIdle(1);\r\n        // Create two connections\r\n        final ManagedConnection<?> conn = (ManagedConnection<?>) basicManagedDataSource.getConnection();\r\n        assertNotNull(basicManagedDataSource.getTransactionRegistry().getXAResource(conn));\r\n        final ManagedConnection<?> conn2 = (ManagedConnection<?>) basicManagedDataSource.getConnection();\r\n        // Return one connection to the pool\r\n        conn2.close();\r\n        // No room at the inn - this will trigger reallyClose(), which should unregister\r\n        conn.close();\r\n        assertThrows(SQLException.class, () -> basicManagedDataSource.getTransactionRegistry().getXAResource(conn), \"Expecting SQLException - XAResources orphaned\");\r\n        conn2.close();\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\managed\\TestBasicManagedDataSource.java",
  "methodName" : "testRuntimeExceptionsAreRethrown",
  "sourceCode" : "@Test\r\nvoid testRuntimeExceptionsAreRethrown() throws SQLException, XAException {\r\n    try (final BasicManagedDataSource basicManagedDataSource = new BasicManagedDataSource()) {\r\n        basicManagedDataSource.setTransactionManager(new TransactionManagerImpl());\r\n        basicManagedDataSource.setDriverClassName(\"org.apache.commons.dbcp2.TesterDriver\");\r\n        basicManagedDataSource.setUrl(\"jdbc:apache:commons:testdriver\");\r\n        basicManagedDataSource.setUsername(\"userName\");\r\n        basicManagedDataSource.setPassword(\"password\");\r\n        basicManagedDataSource.setMaxIdle(1);\r\n        // results in a NPE\r\n        assertThrows(NullPointerException.class, () -> basicManagedDataSource.createPoolableConnectionFactory(null));\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\managed\\TestBasicManagedDataSource.java",
  "methodName" : "testSetDriverName",
  "sourceCode" : "@Test\r\nvoid testSetDriverName() throws SQLException {\r\n    try (final BasicManagedDataSource basicManagedDataSource = new BasicManagedDataSource()) {\r\n        basicManagedDataSource.setDriverClassName(\"adams\");\r\n        assertEquals(\"adams\", basicManagedDataSource.getDriverClassName());\r\n        basicManagedDataSource.setDriverClassName(null);\r\n        assertNull(basicManagedDataSource.getDriverClassName());\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\managed\\TestBasicManagedDataSource.java",
  "methodName" : "testSetNullXaDataSourceInstance",
  "sourceCode" : "@Test\r\nvoid testSetNullXaDataSourceInstance() throws SQLException, XAException {\r\n    try (final BasicManagedDataSource basicManagedDataSource = new BasicManagedDataSource()) {\r\n        basicManagedDataSource.setTransactionManager(new TransactionManagerImpl());\r\n        basicManagedDataSource.setDriverClassName(\"org.apache.commons.dbcp2.TesterDriver\");\r\n        basicManagedDataSource.setUrl(\"jdbc:apache:commons:testdriver\");\r\n        basicManagedDataSource.setUsername(\"userName\");\r\n        basicManagedDataSource.setPassword(\"password\");\r\n        basicManagedDataSource.setMaxIdle(1);\r\n        basicManagedDataSource.setXaDataSourceInstance(null);\r\n        assertNull(basicManagedDataSource.getXaDataSourceInstance());\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\managed\\TestBasicManagedDataSource.java",
  "methodName" : "testSetRollbackOnlyBeforeGetConnectionDoesNotLeak",
  "sourceCode" : "/**\r\n * DBCP-564\r\n */\r\n@Test\r\nvoid testSetRollbackOnlyBeforeGetConnectionDoesNotLeak() throws Exception {\r\n    final TransactionManager transactionManager = ((BasicManagedDataSource) ds).getTransactionManager();\r\n    final int n = 3;\r\n    ds.setMaxIdle(n);\r\n    ds.setMaxTotal(n);\r\n    for (int i = 0; i <= n; i++) {\r\n        // loop n+1 times\r\n        transactionManager.begin();\r\n        transactionManager.setRollbackOnly();\r\n        try (final Connection conn = getConnection()) {\r\n            assertNotNull(conn);\r\n        }\r\n        transactionManager.rollback();\r\n    }\r\n    assertEquals(0, ds.getNumActive());\r\n    assertEquals(1, ds.getNumIdle());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\managed\\TestBasicManagedDataSource.java",
  "methodName" : "testSetXaDataSourceInstance",
  "sourceCode" : "@Test\r\nvoid testSetXaDataSourceInstance() throws SQLException, XAException {\r\n    try (final BasicManagedDataSource basicManagedDataSource = new BasicManagedDataSource()) {\r\n        basicManagedDataSource.setTransactionManager(new TransactionManagerImpl());\r\n        basicManagedDataSource.setDriverClassName(\"org.apache.commons.dbcp2.TesterDriver\");\r\n        basicManagedDataSource.setUrl(\"jdbc:apache:commons:testdriver\");\r\n        basicManagedDataSource.setUsername(\"userName\");\r\n        basicManagedDataSource.setPassword(\"password\");\r\n        basicManagedDataSource.setMaxIdle(1);\r\n        basicManagedDataSource.setXaDataSourceInstance(new JdbcDataSource());\r\n        assertNotNull(basicManagedDataSource.createConnectionFactory());\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\managed\\TestBasicManagedDataSource.java",
  "methodName" : "testTransactionManagerNotSet",
  "sourceCode" : "@Test\r\nvoid testTransactionManagerNotSet() throws SQLException {\r\n    try (final BasicManagedDataSource basicManagedDataSource = new BasicManagedDataSource()) {\r\n        assertThrows(SQLException.class, basicManagedDataSource::createConnectionFactory);\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\managed\\TestBasicManagedDataSource.java",
  "methodName" : "testTransactionSynchronizationRegistry",
  "sourceCode" : "@Test\r\nvoid testTransactionSynchronizationRegistry() throws Exception {\r\n    try (final BasicManagedDataSource basicManagedDataSource = new BasicManagedDataSource()) {\r\n        basicManagedDataSource.setTransactionManager(new TransactionManagerImple());\r\n        final TransactionSynchronizationRegistry tsr = new TransactionSynchronizationRegistryImple();\r\n        basicManagedDataSource.setTransactionSynchronizationRegistry(tsr);\r\n        final JdbcDataSource xaDataSource = new JdbcDataSource();\r\n        xaDataSource.setUrl(\"jdbc:h2:mem:test;DB_CLOSE_DELAY=-1\");\r\n        basicManagedDataSource.setXaDataSourceInstance(xaDataSource);\r\n        basicManagedDataSource.setMaxIdle(1);\r\n        final TransactionManager tm = basicManagedDataSource.getTransactionManager();\r\n        tm.begin();\r\n        tsr.registerInterposedSynchronization(new SynchronizationAdapter() {\r\n\r\n            @Override\r\n            public void beforeCompletion() {\r\n                try (Connection connection = assertDoesNotThrow((ThrowingSupplier<Connection>) basicManagedDataSource::getConnection)) {\r\n                    assertNotNull(connection);\r\n                } catch (SQLException e) {\r\n                    fail(e);\r\n                }\r\n            }\r\n        });\r\n        tm.commit();\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\managed\\TestBasicManagedDataSource.java",
  "methodName" : "testXADataSource",
  "sourceCode" : "@Test\r\nvoid testXADataSource() throws SQLException {\r\n    try (final BasicManagedDataSource basicManagedDataSource = new BasicManagedDataSource()) {\r\n        basicManagedDataSource.setXADataSource(\"anything\");\r\n        assertEquals(\"anything\", basicManagedDataSource.getXADataSource());\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\managed\\TestBasicManagedDataSource.java",
  "methodName" : "testXaDataSourceInstance",
  "sourceCode" : "@Test\r\nvoid testXaDataSourceInstance() throws SQLException {\r\n    try (final BasicManagedDataSource basicManagedDataSource = new BasicManagedDataSource()) {\r\n        final XADataSource ds = new JdbcDataSource();\r\n        basicManagedDataSource.setXaDataSourceInstance(ds);\r\n        assertEquals(ds, basicManagedDataSource.getXaDataSourceInstance());\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\managed\\TestConnectionWithNarayana.java",
  "methodName" : "testConnectionCommitAfterTimeout",
  "sourceCode" : "@Test\r\nvoid testConnectionCommitAfterTimeout() throws Exception {\r\n    mds.getTransactionManager().setTransactionTimeout(1);\r\n    mds.getTransactionManager().begin();\r\n    try (Connection conn = mds.getConnection()) {\r\n        do {\r\n            Thread.sleep(1000);\r\n        } while (mds.getTransactionManager().getTransaction().getStatus() != Status.STATUS_ROLLEDBACK);\r\n        // Let the reaper do it's thing\r\n        Thread.sleep(1000);\r\n        final SQLException e = assertThrows(SQLException.class, conn::commit);\r\n        assertEquals(\"Commit cannot be set while enrolled in a transaction\", e.getMessage(), \"Should not work after timeout\");\r\n        mds.getTransactionManager().rollback();\r\n    }\r\n    assertEquals(0, mds.getNumActive());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\managed\\TestConnectionWithNarayana.java",
  "methodName" : "testConnectionInTimeout",
  "sourceCode" : "@Test\r\nvoid testConnectionInTimeout() throws Exception {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    for (int i = 0; i < 5; i++) {\r\n        try {\r\n            mds.getTransactionManager().setTransactionTimeout(1);\r\n            mds.getTransactionManager().begin();\r\n            conn = mds.getConnection();\r\n            ps = conn.prepareStatement(INSERT_STMT);\r\n            ps.setString(1, Thread.currentThread().getName());\r\n            ps.setLong(2, i);\r\n            ps.setDouble(3, new java.util.Random().nextDouble());\r\n            ps.setString(4, PAYLOAD);\r\n            ps.setTimestamp(5, new Timestamp(System.currentTimeMillis()));\r\n            ps.execute();\r\n            int n = 0;\r\n            do {\r\n                if (mds.getTransactionManager().getTransaction().getStatus() != Status.STATUS_ACTIVE) {\r\n                    n++;\r\n                }\r\n                try (Connection c = mds.getConnection();\r\n                    PreparedStatement ps2 = c.prepareStatement(SELECT_STMT);\r\n                    ResultSet rs = ps2.executeQuery()) {\r\n                    // nothing here, all auto-close.\r\n                }\r\n            } while (n < 2);\r\n            ps.close();\r\n            ps = null;\r\n            conn.close();\r\n            conn = null;\r\n            assertThrows(RollbackException.class, () -> mds.getTransactionManager().commit());\r\n            // this is expected\r\n            if (mds.getTransactionManager().getTransaction() != null) {\r\n                // Need to pop it off the thread if a background thread rolled the transaction\r\n                // back\r\n                mds.getTransactionManager().rollback();\r\n            }\r\n        } catch (final Exception e) {\r\n            if (mds.getTransactionManager().getTransaction() != null) {\r\n                // Need to pop it off the thread if a background thread rolled the transaction\r\n                // back\r\n                mds.getTransactionManager().rollback();\r\n            }\r\n        } finally {\r\n            if (ps != null) {\r\n                ps.close();\r\n            }\r\n            if (conn != null) {\r\n                conn.close();\r\n            }\r\n        }\r\n        Assertions.assertEquals(0, mds.getNumActive());\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\managed\\TestConnectionWithNarayana.java",
  "methodName" : "testRepeatedGetConnectionInTimeout",
  "sourceCode" : "@Test\r\nvoid testRepeatedGetConnectionInTimeout() throws Exception {\r\n    mds.getTransactionManager().setTransactionTimeout(1);\r\n    mds.getTransactionManager().begin();\r\n    try {\r\n        do {\r\n            Thread.sleep(1000);\r\n        } while (mds.getTransactionManager().getTransaction().getStatus() != Status.STATUS_ROLLEDBACK);\r\n        // Let the reaper do it's thing\r\n        Thread.sleep(1000);\r\n        final SQLException e = assertThrows(SQLException.class, mds::getConnection);\r\n        assertTrue(e.getCause().getClass().equals(IllegalStateException.class));\r\n        final SQLException e2 = assertThrows(SQLException.class, mds::getConnection);\r\n        assertTrue(e2.getCause().getClass().equals(IllegalStateException.class));\r\n    } finally {\r\n        mds.getTransactionManager().rollback();\r\n    }\r\n    Assertions.assertEquals(0, mds.getNumActive());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\managed\\TestDataSourceXAConnectionFactory.java",
  "methodName" : "testPhysicalClose",
  "sourceCode" : "/**\r\n * JIRA: DBCP-355\r\n */\r\n@Test\r\nvoid testPhysicalClose() throws Exception {\r\n    bmds.setMaxIdle(1);\r\n    final Connection conn1 = bmds.getConnection();\r\n    final Connection conn2 = bmds.getConnection();\r\n    closeCounter.set(0);\r\n    conn1.close();\r\n    // stays idle in the pool\r\n    assertEquals(0, closeCounter.get());\r\n    conn2.close();\r\n    // can't have 2 idle ones\r\n    assertEquals(1, closeCounter.get());\r\n    bmds.close();\r\n    assertEquals(2, closeCounter.get());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\managed\\TestLocalXaResource.java",
  "methodName" : "testCommit",
  "sourceCode" : "@Test\r\nvoid testCommit() throws SQLException, XAException {\r\n    final Xid xid = new TestXid();\r\n    ((TestConnection) conn).closed = false;\r\n    conn.setReadOnly(false);\r\n    resource.start(xid, XAResource.TMNOFLAGS);\r\n    resource.commit(xid, false);\r\n    assertTrue(((TestConnection) conn).committed);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\managed\\TestLocalXaResource.java",
  "methodName" : "testCommitConnectionClosed",
  "sourceCode" : "@Test\r\nvoid testCommitConnectionClosed() throws SQLException, XAException {\r\n    final Xid xid = new TestXid();\r\n    ((TestConnection) conn).closed = true;\r\n    conn.setReadOnly(false);\r\n    resource.start(xid, XAResource.TMNOFLAGS);\r\n    assertThrows(XAException.class, () -> resource.commit(xid, false));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\managed\\TestLocalXaResource.java",
  "methodName" : "testCommitConnectionNotReadOnly",
  "sourceCode" : "@Test\r\nvoid testCommitConnectionNotReadOnly() throws SQLException, XAException {\r\n    final Xid xid = new TestXid();\r\n    ((TestConnection) conn).closed = false;\r\n    conn.setReadOnly(true);\r\n    resource.start(xid, XAResource.TMNOFLAGS);\r\n    resource.commit(xid, false);\r\n    assertFalse(((TestConnection) conn).committed);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\managed\\TestLocalXaResource.java",
  "methodName" : "testCommitInvalidXid",
  "sourceCode" : "@Test\r\nvoid testCommitInvalidXid() throws SQLException, XAException {\r\n    final Xid xid = new TestXid();\r\n    ((TestConnection) conn).closed = false;\r\n    conn.setReadOnly(false);\r\n    resource.start(xid, XAResource.TMNOFLAGS);\r\n    assertThrows(XAException.class, () -> resource.commit(new TestXid(), false));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\managed\\TestLocalXaResource.java",
  "methodName" : "testCommitMissingXid",
  "sourceCode" : "@Test\r\nvoid testCommitMissingXid() {\r\n    assertThrows(NullPointerException.class, () -> resource.commit(null, false));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\managed\\TestLocalXaResource.java",
  "methodName" : "testCommitNoTransaction",
  "sourceCode" : "@Test\r\nvoid testCommitNoTransaction() throws SQLException {\r\n    ((TestConnection) conn).closed = false;\r\n    conn.setReadOnly(false);\r\n    assertThrows(XAException.class, () -> resource.commit(new TestXid(), false));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\managed\\TestLocalXaResource.java",
  "methodName" : "testConstructor",
  "sourceCode" : "@Test\r\nvoid testConstructor() {\r\n    assertEquals(0, resource.getTransactionTimeout());\r\n    assertNull(resource.getXid());\r\n    // the current implementation always return false, regardless of the input value\r\n    assertFalse(resource.setTransactionTimeout(100));\r\n    // the current implementation always return an empty/zero'd array, regardless of the input value\r\n    assertEquals(0, resource.recover(100).length);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\managed\\TestLocalXaResource.java",
  "methodName" : "testForget",
  "sourceCode" : "@Test\r\nvoid testForget() throws XAException {\r\n    final Xid xid = new TestXid();\r\n    resource.start(xid, XAResource.TMNOFLAGS);\r\n    resource.forget(xid);\r\n    assertNull(resource.getXid());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\managed\\TestLocalXaResource.java",
  "methodName" : "testForgetDifferentXid",
  "sourceCode" : "@Test\r\nvoid testForgetDifferentXid() throws XAException {\r\n    final Xid xid = new TestXid();\r\n    resource.start(xid, XAResource.TMNOFLAGS);\r\n    resource.forget(new TestXid());\r\n    assertEquals(xid, resource.getXid());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\managed\\TestLocalXaResource.java",
  "methodName" : "testForgetMissingXid",
  "sourceCode" : "@Test\r\nvoid testForgetMissingXid() throws XAException {\r\n    final Xid xid = new TestXid();\r\n    resource.start(xid, XAResource.TMNOFLAGS);\r\n    resource.forget(null);\r\n    assertEquals(xid, resource.getXid());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\managed\\TestLocalXaResource.java",
  "methodName" : "testIsSame",
  "sourceCode" : "@Test\r\nvoid testIsSame() {\r\n    assertTrue(resource.isSameRM(resource));\r\n    assertFalse(resource.isSameRM(new LocalXAConnectionFactory.LocalXAResource(conn)));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\managed\\TestLocalXaResource.java",
  "methodName" : "testRollback",
  "sourceCode" : "@Test\r\nvoid testRollback() throws SQLException, XAException {\r\n    final Xid xid = new TestXid();\r\n    ((TestConnection) conn).closed = false;\r\n    conn.setReadOnly(false);\r\n    resource.start(xid, XAResource.TMNOFLAGS);\r\n    resource.rollback(xid);\r\n    assertTrue(((TestConnection) conn).rolledback);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\managed\\TestLocalXaResource.java",
  "methodName" : "testRollbackInvalidXid",
  "sourceCode" : "@Test\r\nvoid testRollbackInvalidXid() throws SQLException, XAException {\r\n    final Xid xid = new TestXid();\r\n    ((TestConnection) conn).closed = false;\r\n    conn.setReadOnly(false);\r\n    resource.start(xid, XAResource.TMNOFLAGS);\r\n    assertThrows(XAException.class, () -> resource.rollback(new TestXid()));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\managed\\TestLocalXaResource.java",
  "methodName" : "testRollbackMissingXid",
  "sourceCode" : "@Test\r\nvoid testRollbackMissingXid() {\r\n    assertThrows(NullPointerException.class, () -> resource.rollback(null));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\managed\\TestLocalXaResource.java",
  "methodName" : "testStartExceptionOnGetAutoCommit",
  "sourceCode" : "/**\r\n * When an exception is thrown on the {@link Connection#getAutoCommit()}, then the\r\n * value is set to {@code true} by default.\r\n * @throws XAException when there are errors with the transaction\r\n * @throws SQLException when there are errors with other SQL/DB parts\r\n */\r\n@Test\r\nvoid testStartExceptionOnGetAutoCommit() throws XAException, SQLException {\r\n    final Xid xid = new TestXid();\r\n    ((TestConnection) conn).throwWhenGetAutoCommit = true;\r\n    conn.setAutoCommit(false);\r\n    conn.setReadOnly(true);\r\n    // the start method with no flag will call getAutoCommit, the exception will be thrown, and it will be set\r\n    // to true\r\n    resource.start(xid, XAResource.TMNOFLAGS);\r\n    // and prepare sets the value computed in start in the connection\r\n    resource.prepare(xid);\r\n    ((TestConnection) conn).throwWhenGetAutoCommit = false;\r\n    assertTrue(conn.getAutoCommit());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\managed\\TestLocalXaResource.java",
  "methodName" : "testStartFailsWhenCannotSetAutoCommit",
  "sourceCode" : "@Test\r\nvoid testStartFailsWhenCannotSetAutoCommit() {\r\n    final Xid xid = new TestXid();\r\n    ((TestConnection) conn).throwWhenSetAutoCommit = true;\r\n    assertThrows(XAException.class, () -> resource.start(xid, XAResource.TMNOFLAGS));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\managed\\TestLocalXaResource.java",
  "methodName" : "testStartInvalidFlag",
  "sourceCode" : "@Test\r\nvoid testStartInvalidFlag() {\r\n    // currently, valid values are TMNOFLAGS and TMRESUME\r\n    assertThrows(XAException.class, () -> resource.start(null, XAResource.TMENDRSCAN));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\managed\\TestLocalXaResource.java",
  "methodName" : "testStartNoFlagButAlreadyEnlisted",
  "sourceCode" : "@Test\r\nvoid testStartNoFlagButAlreadyEnlisted() throws XAException {\r\n    resource.start(new TestXid(), XAResource.TMNOFLAGS);\r\n    assertThrows(XAException.class, () -> resource.start(new TestXid(), XAResource.TMNOFLAGS));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\managed\\TestLocalXaResource.java",
  "methodName" : "testStartNoFlagResume",
  "sourceCode" : "@Test\r\nvoid testStartNoFlagResume() throws XAException {\r\n    final Xid xid = new TestXid();\r\n    resource.start(xid, XAResource.TMNOFLAGS);\r\n    resource.start(xid, XAResource.TMRESUME);\r\n    assertEquals(xid, resource.getXid());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\managed\\TestLocalXaResource.java",
  "methodName" : "testStartNoFlagResumeButDifferentXid",
  "sourceCode" : "@Test\r\nvoid testStartNoFlagResumeButDifferentXid() throws XAException {\r\n    resource.start(new TestXid(), XAResource.TMNOFLAGS);\r\n    assertThrows(XAException.class, () -> resource.start(new TestXid(), XAResource.TMRESUME));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\managed\\TestLocalXaResource.java",
  "methodName" : "testStartNoFlagResumeEnd",
  "sourceCode" : "@Test\r\nvoid testStartNoFlagResumeEnd() throws XAException {\r\n    final Xid xid = new TestXid();\r\n    resource.start(xid, XAResource.TMNOFLAGS);\r\n    resource.start(xid, XAResource.TMRESUME);\r\n    // flag is never used in the end\r\n    resource.end(xid, 0);\r\n    assertEquals(xid, resource.getXid());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\managed\\TestLocalXaResource.java",
  "methodName" : "testStartNoFlagResumeEndDifferentXid",
  "sourceCode" : "@Test\r\nvoid testStartNoFlagResumeEndDifferentXid() throws XAException {\r\n    final Xid xid = new TestXid();\r\n    resource.start(xid, XAResource.TMNOFLAGS);\r\n    resource.start(xid, XAResource.TMRESUME);\r\n    // flag is never used in the end\r\n    assertThrows(XAException.class, () -> resource.end(new TestXid(), 0));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\managed\\TestLocalXaResource.java",
  "methodName" : "testStartNoFlagResumeEndMissingXid",
  "sourceCode" : "@Test\r\nvoid testStartNoFlagResumeEndMissingXid() throws XAException {\r\n    final Xid xid = new TestXid();\r\n    resource.start(xid, XAResource.TMNOFLAGS);\r\n    resource.start(xid, XAResource.TMRESUME);\r\n    // flag is never used in the end\r\n    assertThrows(NullPointerException.class, () -> resource.end(null, 0));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\managed\\TestLocalXaResource.java",
  "methodName" : "testStartReadOnlyConnectionExceptionOnGetAutoCommit",
  "sourceCode" : "/**\r\n * When an exception is thrown on the {@link Connection#getAutoCommit()}, then the\r\n * value is set to {@code true} by default. However, if the connection is not read-only,\r\n * then the value set by the user in the original connection will be kept.\r\n * @throws XAException when there are errors with the transaction\r\n * @throws SQLException when there are errors with other SQL/DB parts\r\n */\r\n@Test\r\nvoid testStartReadOnlyConnectionExceptionOnGetAutoCommit() throws XAException, SQLException {\r\n    final Xid xid = new TestXid();\r\n    ((TestConnection) conn).throwWhenGetAutoCommit = true;\r\n    conn.setAutoCommit(false);\r\n    conn.setReadOnly(false);\r\n    // the start method with no flag will call getAutoCommit, the exception will be thrown, and it will be set\r\n    // to true\r\n    resource.start(xid, XAResource.TMNOFLAGS);\r\n    // and prepare sets the value computed in start in the connection\r\n    resource.prepare(xid);\r\n    ((TestConnection) conn).throwWhenGetAutoCommit = false;\r\n    assertFalse(conn.getAutoCommit());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\managed\\TestLocalXaResource.java",
  "methodName" : "testStartReadOnlyConnectionPrepare",
  "sourceCode" : "@Test\r\nvoid testStartReadOnlyConnectionPrepare() throws XAException, SQLException {\r\n    final Xid xid = new TestXid();\r\n    conn.setAutoCommit(false);\r\n    conn.setReadOnly(true);\r\n    resource.start(xid, XAResource.TMNOFLAGS);\r\n    resource.prepare(xid);\r\n    assertFalse(conn.getAutoCommit());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\managed\\TestManagedConnection.java",
  "methodName" : "testConnectionReturnOnErrorWhenEnlistingXAResource",
  "sourceCode" : "@Test\r\nvoid testConnectionReturnOnErrorWhenEnlistingXAResource() throws Exception {\r\n    // see DBCP-433\r\n    transactionManager.begin();\r\n    assertThrows(SQLException.class, this::getConnection);\r\n    transactionManager.commit();\r\n    assertEquals(1, pool.getBorrowedCount());\r\n    // assertEquals(1, pool.getReturnedCount());\r\n    assertEquals(1, pool.getDestroyedCount());\r\n    assertEquals(0, pool.getNumActive());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\managed\\TestManagedConnectionCachedState.java",
  "methodName" : "testConnectionCachedState",
  "sourceCode" : "@Test\r\nvoid testConnectionCachedState() throws Exception {\r\n    // see DBCP-568\r\n    // begin a transaction\r\n    transactionManager.begin();\r\n    // acquire a connection enlisted in the transaction\r\n    try (final Connection conn = getConnection()) {\r\n        // check the autocommit status to trigger internal caching\r\n        conn.getAutoCommit();\r\n        // ask the transaction manager to rollback\r\n        transactionManager.rollback();\r\n    }\r\n    // check that no exceptions about failed rollback during close were logged\r\n    assertEquals(0, swallowedExceptionRecorder.getExceptions().size());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\managed\\TestManagedDataSource.java",
  "methodName" : "testAccessToUnderlyingConnectionAllowed",
  "sourceCode" : "/**\r\n * Verify the accessToUnderlyingConnectionAllowed properly limits access to the physical connection.\r\n */\r\n@Test\r\nvoid testAccessToUnderlyingConnectionAllowed() throws Exception {\r\n    ds.setAccessToUnderlyingConnectionAllowed(true);\r\n    try (ManagedConnection<?> connection = (ManagedConnection<?>) newConnection()) {\r\n        assertTrue(connection.isAccessToUnderlyingConnectionAllowed());\r\n        assertNotNull(connection.getDelegate());\r\n        assertNotNull(connection.getInnermostDelegate());\r\n    }\r\n    ds.setAccessToUnderlyingConnectionAllowed(false);\r\n    try (ManagedConnection<?> connection = (ManagedConnection<?>) newConnection()) {\r\n        assertFalse(connection.isAccessToUnderlyingConnectionAllowed());\r\n        assertNull(connection.getDelegate());\r\n        assertNull(connection.getInnermostDelegate());\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\managed\\TestManagedDataSource.java",
  "methodName" : "testConnectionReturnOnCommit",
  "sourceCode" : "@Test\r\nvoid testConnectionReturnOnCommit() throws Exception {\r\n    transactionManager.begin();\r\n    try (DelegatingConnection<?> connectionA = (DelegatingConnection<?>) newConnection()) {\r\n        // auto close.\r\n    }\r\n    transactionManager.commit();\r\n    assertEquals(1, pool.getBorrowedCount());\r\n    assertEquals(1, pool.getReturnedCount());\r\n    assertEquals(0, pool.getNumActive());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\managed\\TestManagedDataSource.java",
  "methodName" : "testManagedConnectionEqualInnermost",
  "sourceCode" : "@Test\r\nvoid testManagedConnectionEqualInnermost() throws Exception {\r\n    ds.setAccessToUnderlyingConnectionAllowed(true);\r\n    try (DelegatingConnection<?> con = (DelegatingConnection<?>) getConnection()) {\r\n        @SuppressWarnings(\"resource\")\r\n        final Connection inner = con.getInnermostDelegate();\r\n        ds.setAccessToUnderlyingConnectionAllowed(false);\r\n        final DelegatingConnection<Connection> con2 = new DelegatingConnection<>(inner);\r\n        assertNotEquals(con2, con);\r\n        assertTrue(con.innermostDelegateEquals(con2.getInnermostDelegate()));\r\n        assertTrue(con2.innermostDelegateEquals(inner));\r\n        assertNotEquals(con, con2);\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\managed\\TestManagedDataSource.java",
  "methodName" : "testManagedConnectionEqualsFail",
  "sourceCode" : "@Test\r\nvoid testManagedConnectionEqualsFail() throws Exception {\r\n    try (Connection con1 = getConnection();\r\n        final Connection con2 = getConnection()) {\r\n        assertNotEquals(con1, con2);\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\managed\\TestManagedDataSource.java",
  "methodName" : "testManagedConnectionEqualsNull",
  "sourceCode" : "@Test\r\nvoid testManagedConnectionEqualsNull() throws Exception {\r\n    try (Connection con1 = getConnection()) {\r\n        final Connection con2 = null;\r\n        assertNotEquals(con2, con1);\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\managed\\TestManagedDataSource.java",
  "methodName" : "testManagedConnectionEqualsReflexive",
  "sourceCode" : "/*\r\n    * JIRA: DBCP-198\r\n    */\r\n@Test\r\nvoid testManagedConnectionEqualsReflexive() throws Exception {\r\n    try (Connection con = getConnection()) {\r\n        @SuppressWarnings(\"resource\")\r\n        final Connection con2 = con;\r\n        assertEquals(con2, con);\r\n        assertEquals(con, con2);\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\managed\\TestManagedDataSource.java",
  "methodName" : "testManagedConnectionEqualsSameDelegate",
  "sourceCode" : "@Test\r\nvoid testManagedConnectionEqualsSameDelegate() throws Exception {\r\n    // Get a maximal set of connections from the pool\r\n    final Connection[] c = new Connection[getMaxTotal()];\r\n    for (int i = 0; i < c.length; i++) {\r\n        c[i] = newConnection();\r\n    }\r\n    // Close the delegate of one wrapper in the pool\r\n    ((DelegatingConnection<?>) c[0]).getDelegate().close();\r\n    // Grab a new connection - should get c[0]'s closed connection\r\n    // so should be delegate-equivalent\r\n    try (Connection con = newConnection()) {\r\n        Assertions.assertNotEquals(c[0], con);\r\n        Assertions.assertEquals(((DelegatingConnection<?>) c[0]).getInnermostDelegateInternal(), ((DelegatingConnection<?>) con).getInnermostDelegateInternal());\r\n        for (final Connection element : c) {\r\n            element.close();\r\n        }\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\managed\\TestManagedDataSource.java",
  "methodName" : "testManagedConnectionEqualsSameDelegateNoUnderlyingAccess",
  "sourceCode" : "@Test\r\nvoid testManagedConnectionEqualsSameDelegateNoUnderlyingAccess() throws Exception {\r\n    // Get a maximal set of connections from the pool\r\n    final Connection[] c = new Connection[getMaxTotal()];\r\n    for (int i = 0; i < c.length; i++) {\r\n        c[i] = newConnection();\r\n    }\r\n    // Close the delegate of one wrapper in the pool\r\n    ((DelegatingConnection<?>) c[0]).getDelegate().close();\r\n    // Disable access for the new connection\r\n    ds.setAccessToUnderlyingConnectionAllowed(false);\r\n    // Grab a new connection - should get c[0]'s closed connection\r\n    // so should be delegate-equivalent\r\n    try (Connection con = newConnection()) {\r\n        Assertions.assertNotEquals(c[0], con);\r\n        Assertions.assertEquals(((DelegatingConnection<?>) c[0]).getInnermostDelegateInternal(), ((DelegatingConnection<?>) con).getInnermostDelegateInternal());\r\n        for (final Connection element : c) {\r\n            element.close();\r\n        }\r\n        ds.setAccessToUnderlyingConnectionAllowed(true);\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\managed\\TestManagedDataSource.java",
  "methodName" : "testManagedConnectionEqualsType",
  "sourceCode" : "@Test\r\nvoid testManagedConnectionEqualsType() throws Exception {\r\n    try (Connection con1 = getConnection()) {\r\n        final Integer con2 = 0;\r\n        assertNotEquals(con2, con1);\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\managed\\TestManagedDataSource.java",
  "methodName" : "testNestedConnections",
  "sourceCode" : "@Test\r\nvoid testNestedConnections() throws Exception {\r\n    transactionManager.begin();\r\n    try (Connection c1 = newConnection();\r\n        final Connection c2 = newConnection()) {\r\n        transactionManager.commit();\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\managed\\TestManagedDataSource.java",
  "methodName" : "testSetNullTransactionRegistry",
  "sourceCode" : "@Test\r\nvoid testSetNullTransactionRegistry() throws Exception {\r\n    try (ManagedDataSource<?> ds = new ManagedDataSource<>(pool, null)) {\r\n        assertThrows(NullPointerException.class, () -> ds.setTransactionRegistry(null));\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\managed\\TestManagedDataSource.java",
  "methodName" : "testSetTransactionRegistry",
  "sourceCode" : "@Test()\r\nvoid testSetTransactionRegistry() throws Exception {\r\n    try (ManagedDataSource<?> ds = new ManagedDataSource<>(pool, null)) {\r\n        ds.setTransactionRegistry(new TransactionRegistry(transactionManager));\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\managed\\TestManagedDataSource.java",
  "methodName" : "testSetTransactionRegistryAlreadySet",
  "sourceCode" : "@Test\r\nvoid testSetTransactionRegistryAlreadySet() {\r\n    final ManagedDataSource<?> managed = (ManagedDataSource<?>) ds;\r\n    assertThrows(IllegalStateException.class, () -> managed.setTransactionRegistry(null));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\managed\\TestManagedDataSource.java",
  "methodName" : "testSharedConnection",
  "sourceCode" : "/**\r\n * Verify that connection sharing is working (or not working) as expected.\r\n */\r\n@Test\r\nvoid testSharedConnection() throws Exception {\r\n    try (DelegatingConnection<?> connectionA = (DelegatingConnection<?>) newConnection();\r\n        final DelegatingConnection<?> connectionB = (DelegatingConnection<?>) newConnection()) {\r\n        assertNotEquals(connectionA, connectionB);\r\n        assertNotEquals(connectionB, connectionA);\r\n        assertFalse(connectionA.innermostDelegateEquals(connectionB.getInnermostDelegate()));\r\n        assertFalse(connectionB.innermostDelegateEquals(connectionA.getInnermostDelegate()));\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\managed\\TestManagedDataSource.java",
  "methodName" : "testTransactionRegistryNotInitialized",
  "sourceCode" : "@Test\r\nvoid testTransactionRegistryNotInitialized() throws Exception {\r\n    try (ManagedDataSource<?> ds = new ManagedDataSource<>(pool, null)) {\r\n        assertThrows(IllegalStateException.class, ds::getConnection);\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\managed\\TestManagedDataSourceInTx.java",
  "methodName" : "testAutoCommitBehavior",
  "sourceCode" : "@Override\r\n@Test\r\npublic void testAutoCommitBehavior() throws Exception {\r\n    final Connection connection = newConnection();\r\n    // auto commit should be off\r\n    assertFalse(connection.getAutoCommit(), \"Auto-commit should be disabled\");\r\n    // attempt to set auto commit\r\n    assertThrows(SQLException.class, () -> connection.setAutoCommit(true), \"setAutoCommit method should be disabled while enlisted in a transaction\");\r\n    // make sure it is still disabled\r\n    assertFalse(connection.getAutoCommit(), \"Auto-commit should be disabled\");\r\n    // close connection\r\n    connection.close();\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\managed\\TestManagedDataSourceInTx.java",
  "methodName" : "testClearWarnings",
  "sourceCode" : "@Override\r\n@Test\r\npublic void testClearWarnings() throws Exception {\r\n    // open a connection\r\n    Connection connection = newConnection();\r\n    assertNotNull(connection);\r\n    // generate SQLWarning on connection\r\n    final CallableStatement statement = connection.prepareCall(\"warning\");\r\n    assertNotNull(connection.getWarnings());\r\n    // create a new shared connection\r\n    final Connection sharedConnection = newConnection();\r\n    // shared connection should see warning\r\n    assertNotNull(sharedConnection.getWarnings());\r\n    // close and allocate a new (original) connection\r\n    connection.close();\r\n    connection = newConnection();\r\n    // warnings should not have been cleared by closing the connection\r\n    assertNotNull(connection.getWarnings());\r\n    assertNotNull(sharedConnection.getWarnings());\r\n    statement.close();\r\n    sharedConnection.close();\r\n    connection.close();\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\managed\\TestManagedDataSourceInTx.java",
  "methodName" : "testCloseInTransaction",
  "sourceCode" : "@Test\r\nvoid testCloseInTransaction() throws Exception {\r\n    try (DelegatingConnection<?> connectionA = (DelegatingConnection<?>) newConnection();\r\n        DelegatingConnection<?> connectionB = (DelegatingConnection<?>) newConnection()) {\r\n        assertNotEquals(connectionA, connectionB);\r\n        assertNotEquals(connectionB, connectionA);\r\n        assertTrue(connectionA.innermostDelegateEquals(connectionB.getInnermostDelegate()));\r\n        assertTrue(connectionB.innermostDelegateEquals(connectionA.getInnermostDelegate()));\r\n    }\r\n    final Connection connection = newConnection();\r\n    assertFalse(connection.isClosed(), \"Connection should be open\");\r\n    connection.close();\r\n    assertTrue(connection.isClosed(), \"Connection should be closed\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\managed\\TestManagedDataSourceInTx.java",
  "methodName" : "testCommit",
  "sourceCode" : "@Test\r\nvoid testCommit() throws Exception {\r\n    try (Connection connection = newConnection()) {\r\n        // connection should be open\r\n        assertFalse(connection.isClosed(), \"Connection should be open\");\r\n        // attempt commit directly\r\n        assertThrows(SQLException.class, connection::commit, \"commit method should be disabled while enlisted in a transaction\");\r\n        // make sure it is still open\r\n        assertFalse(connection.isClosed(), \"Connection should be open\");\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\managed\\TestManagedDataSourceInTx.java",
  "methodName" : "testConnectionReturnOnCommit",
  "sourceCode" : "@Override\r\n@Test\r\npublic void testConnectionReturnOnCommit() throws Exception {\r\n    // override with no-op test\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\managed\\TestManagedDataSourceInTx.java",
  "methodName" : "testConnectionsAreDistinct",
  "sourceCode" : "@Override\r\n@Test\r\npublic void testConnectionsAreDistinct() throws Exception {\r\n    final Connection[] conn = new Connection[getMaxTotal()];\r\n    for (int i = 0; i < conn.length; i++) {\r\n        conn[i] = newConnection();\r\n        for (int j = 0; j < i; j++) {\r\n            // two connections should be distinct instances\r\n            Assertions.assertNotSame(conn[j], conn[i]);\r\n            // neither should they should be equivalent even though they are\r\n            // sharing the same underlying connection\r\n            Assertions.assertNotEquals(conn[j], conn[i]);\r\n            // Check underlying connection is the same\r\n            Assertions.assertEquals(((DelegatingConnection<?>) conn[j]).getInnermostDelegateInternal(), ((DelegatingConnection<?>) conn[i]).getInnermostDelegateInternal());\r\n        }\r\n    }\r\n    for (final Connection element : conn) {\r\n        element.close();\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\managed\\TestManagedDataSourceInTx.java",
  "methodName" : "testDoubleReturn",
  "sourceCode" : "@Test\r\nvoid testDoubleReturn() throws Exception {\r\n    transactionManager.getTransaction().registerSynchronization(new Synchronization() {\r\n\r\n        private ManagedConnection<?> conn;\r\n\r\n        @Override\r\n        public void afterCompletion(final int i) {\r\n            final int numActive = pool.getNumActive();\r\n            try {\r\n                conn.checkOpen();\r\n            } catch (final Exception e) {\r\n                // Ignore\r\n            }\r\n            assertEquals(numActive, pool.getNumActive());\r\n            assertDoesNotThrow(conn::close, \"Should have been able to close the connection\");\r\n            // TODO Requires DBCP-515 assertTrue(numActive -1 == pool.getNumActive());\r\n        }\r\n\r\n        @Override\r\n        public void beforeCompletion() {\r\n            assertDoesNotThrow(() -> conn = (ManagedConnection<?>) ds.getConnection(), \"Could not get connection\");\r\n        }\r\n    });\r\n    transactionManager.commit();\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\managed\\TestManagedDataSourceInTx.java",
  "methodName" : "testGetConnectionInAfterCompletion",
  "sourceCode" : "@Test\r\nvoid testGetConnectionInAfterCompletion() throws Exception {\r\n    try (DelegatingConnection<?> connection = (DelegatingConnection<?>) newConnection()) {\r\n        // Don't close so we can check it for warnings in afterCompletion\r\n        transactionManager.getTransaction().registerSynchronization(new SynchronizationAdapter() {\r\n\r\n            @Override\r\n            public void afterCompletion(final int i) {\r\n                final Connection connection1 = assertDoesNotThrow((ThrowingSupplier<Connection>) ds::getConnection);\r\n                assertThrows(SQLException.class, () -> connection1.getWarnings(), \"Could operate on closed connection\");\r\n            }\r\n        });\r\n    }\r\n    transactionManager.commit();\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\managed\\TestManagedDataSourceInTx.java",
  "methodName" : "testHashCode",
  "sourceCode" : "@Override\r\n@Test\r\npublic void testHashCode() throws Exception {\r\n    try (Connection conn1 = newConnection()) {\r\n        assertNotNull(conn1);\r\n        try (Connection conn2 = newConnection()) {\r\n            assertNotNull(conn2);\r\n            // shared connections should not have the same hash code\r\n            Assertions.assertNotEquals(conn1.hashCode(), conn2.hashCode());\r\n        }\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\managed\\TestManagedDataSourceInTx.java",
  "methodName" : "testManagedConnectionEqualsFail",
  "sourceCode" : "/**\r\n * @see #testSharedConnection()\r\n */\r\n@Override\r\n@Test\r\npublic void testManagedConnectionEqualsFail() throws Exception {\r\n    // this test is invalid for managed connections since because\r\n    // two connections to the same datasource are supposed to share\r\n    // a single connection\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\managed\\TestManagedDataSourceInTx.java",
  "methodName" : "testMaxTotal",
  "sourceCode" : "@Override\r\n@Test\r\npublic void testMaxTotal() throws Exception {\r\n    final Transaction[] transactions = new Transaction[getMaxTotal()];\r\n    final Connection[] c = new Connection[getMaxTotal()];\r\n    for (int i = 0; i < c.length; i++) {\r\n        // create a new connection in the current transaction\r\n        c[i] = newConnection();\r\n        assertNotNull(c[i]);\r\n        // suspend the current transaction and start a new one\r\n        transactions[i] = transactionManager.suspend();\r\n        assertNotNull(transactions[i]);\r\n        transactionManager.begin();\r\n    }\r\n    try {\r\n        assertThrows(SQLException.class, this::newConnection, \"Allowed to open more than DefaultMaxTotal connections.\");\r\n        // should only be able to open 10 connections, so this test should\r\n        // throw an exception\r\n    } finally {\r\n        transactionManager.commit();\r\n        for (int i = 0; i < c.length; i++) {\r\n            transactionManager.resume(transactions[i]);\r\n            c[i].close();\r\n            transactionManager.commit();\r\n        }\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\managed\\TestManagedDataSourceInTx.java",
  "methodName" : "testNestedConnections",
  "sourceCode" : "@Override\r\n@Test\r\npublic void testNestedConnections() {\r\n    // Not supported\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\managed\\TestManagedDataSourceInTx.java",
  "methodName" : "testReadOnly",
  "sourceCode" : "@Test\r\nvoid testReadOnly() throws Exception {\r\n    try (Connection connection = newConnection()) {\r\n        // NOTE: This test class uses connections that are read-only by default\r\n        // connection should be read only\r\n        assertTrue(connection.isReadOnly(), \"Connection be read-only\");\r\n        // attempt to setReadOnly\r\n        assertThrows(SQLException.class, () -> connection.setReadOnly(true), \"setReadOnly method should be disabled while enlisted in a transaction\");\r\n        // make sure it is still read-only\r\n        assertTrue(connection.isReadOnly(), \"Connection be read-only\");\r\n        // attempt to setReadonly\r\n        assertThrows(SQLException.class, () -> connection.setReadOnly(false), \"setReadOnly method should be disabled while enlisted in a transaction\");\r\n        // make sure it is still read-only\r\n        assertTrue(connection.isReadOnly(), \"Connection be read-only\");\r\n        // TwR closes the connection\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\managed\\TestManagedDataSourceInTx.java",
  "methodName" : "testSharedConnection",
  "sourceCode" : "@Override\r\n@Test\r\npublic void testSharedConnection() throws Exception {\r\n    try (DelegatingConnection<?> connectionA = (DelegatingConnection<?>) newConnection();\r\n        DelegatingConnection<?> connectionB = (DelegatingConnection<?>) newConnection()) {\r\n        assertNotEquals(connectionA, connectionB);\r\n        assertNotEquals(connectionB, connectionA);\r\n        assertTrue(connectionA.innermostDelegateEquals(connectionB.getInnermostDelegate()));\r\n        assertTrue(connectionB.innermostDelegateEquals(connectionA.getInnermostDelegate()));\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\managed\\TestManagedDataSourceInTx.java",
  "methodName" : "testSharedTransactionConversion",
  "sourceCode" : "@Test\r\nvoid testSharedTransactionConversion() throws Exception {\r\n    try (DelegatingConnection<?> connectionA = (DelegatingConnection<?>) newConnection();\r\n        DelegatingConnection<?> connectionB = (DelegatingConnection<?>) newConnection()) {\r\n        // in a transaction the inner connections should be equal\r\n        assertNotEquals(connectionA, connectionB);\r\n        assertNotEquals(connectionB, connectionA);\r\n        assertTrue(connectionA.innermostDelegateEquals(connectionB.getInnermostDelegate()));\r\n        assertTrue(connectionB.innermostDelegateEquals(connectionA.getInnermostDelegate()));\r\n        transactionManager.commit();\r\n        // use the connection so it adjusts to the completed transaction\r\n        connectionA.getAutoCommit();\r\n        connectionB.getAutoCommit();\r\n        // no there is no transaction so inner connections should not be equal\r\n        assertNotEquals(connectionA, connectionB);\r\n        assertNotEquals(connectionB, connectionA);\r\n        assertFalse(connectionA.innermostDelegateEquals(connectionB.getInnermostDelegate()));\r\n        assertFalse(connectionB.innermostDelegateEquals(connectionA.getInnermostDelegate()));\r\n        transactionManager.begin();\r\n        // use the connection so it adjusts to the new transaction\r\n        connectionA.getAutoCommit();\r\n        connectionB.getAutoCommit();\r\n        // back in a transaction so inner connections should be equal again\r\n        assertNotEquals(connectionA, connectionB);\r\n        assertNotEquals(connectionB, connectionA);\r\n        assertTrue(connectionA.innermostDelegateEquals(connectionB.getInnermostDelegate()));\r\n        assertTrue(connectionB.innermostDelegateEquals(connectionA.getInnermostDelegate()));\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\managed\\TestPoolableManagedConnection.java",
  "methodName" : "testManagedConnection",
  "sourceCode" : "@Test\r\nvoid testManagedConnection() throws Exception {\r\n    assertEquals(0, pool.getNumActive());\r\n    // create a connection\r\n    conn = pool.borrowObject();\r\n    assertEquals(1, pool.getNumActive());\r\n    // create the poolable managed connection\r\n    poolableManagedConnection = new PoolableManagedConnection(transactionRegistry, conn, pool);\r\n    poolableManagedConnection.close();\r\n    // closing a poolable managed connection won't close it, but simply return to the pool\r\n    assertEquals(1, pool.getNumActive());\r\n    // but closing the underlying connection really closes it\r\n    conn.close();\r\n    assertEquals(0, pool.getNumActive());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\managed\\TestPoolableManagedConnection.java",
  "methodName" : "testPoolableConnection",
  "sourceCode" : "@Test\r\nvoid testPoolableConnection() throws Exception {\r\n    // create a connection\r\n    // pool uses LocalXAConnectionFactory, which register the connection with the TransactionRegistry\r\n    conn = pool.borrowObject();\r\n    assertNotNull(transactionRegistry.getXAResource(conn));\r\n    // create the poolable managed connection\r\n    poolableManagedConnection = new PoolableManagedConnection(transactionRegistry, conn, pool);\r\n    poolableManagedConnection.close();\r\n    assertNotNull(transactionRegistry.getXAResource(conn));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\managed\\TestPoolableManagedConnection.java",
  "methodName" : "testReallyClose",
  "sourceCode" : "@Test\r\nvoid testReallyClose() throws Exception {\r\n    assertEquals(0, pool.getNumActive());\r\n    // create a connection\r\n    // pool uses LocalXAConnectionFactory, which register the connection with the\r\n    // TransactionRegistry\r\n    conn = pool.borrowObject();\r\n    assertEquals(1, pool.getNumActive());\r\n    assertNotNull(transactionRegistry.getXAResource(conn));\r\n    // create the poolable managed connection\r\n    poolableManagedConnection = new PoolableManagedConnection(transactionRegistry, conn, pool);\r\n    poolableManagedConnection.close();\r\n    assertNotNull(transactionRegistry.getXAResource(conn));\r\n    assertEquals(1, pool.getNumActive());\r\n    // this must close the managed connection, removing it from the transaction\r\n    // registry\r\n    poolableManagedConnection.reallyClose();\r\n    assertThrows(SQLException.class, () -> transactionRegistry.getXAResource(conn), \"Transaction registry was supposed to be empty now\");\r\n    assertEquals(0, pool.getNumActive());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\managed\\TestSynchronizationOrder.java",
  "methodName" : "testInterposedSynchronization",
  "sourceCode" : "@Test\r\nvoid testInterposedSynchronization() throws Exception {\r\n    final DataSourceXAConnectionFactory xaConnectionFactory = new DataSourceXAConnectionFactory(transactionManager, xads, transactionSynchronizationRegistry);\r\n    final PoolableConnectionFactory factory = new PoolableConnectionFactory(xaConnectionFactory, null);\r\n    factory.setValidationQuery(\"SELECT DUMMY FROM DUAL\");\r\n    factory.setDefaultReadOnly(Boolean.TRUE);\r\n    factory.setDefaultAutoCommit(Boolean.TRUE);\r\n    // create the pool\r\n    try (final GenericObjectPool<PoolableConnection> pool = new GenericObjectPool<>(factory)) {\r\n        factory.setPool(pool);\r\n        pool.setMaxTotal(10);\r\n        pool.setMaxWait(Duration.ofSeconds(1));\r\n        // finally create the datasource\r\n        try (final ManagedDataSource<PoolableConnection> ds = new ManagedDataSource<>(pool, xaConnectionFactory.getTransactionRegistry())) {\r\n            ds.setAccessToUnderlyingConnectionAllowed(true);\r\n            transactionManager.begin();\r\n            try (final Connection connectionA = ds.getConnection()) {\r\n                // Check and close right away.\r\n                assertInstanceOf(DelegatingConnection.class, connectionA);\r\n            }\r\n            transactionManager.commit();\r\n            assertFalse(transactionManagerRegistered);\r\n            assertTrue(transactionSynchronizationRegistryRegistered);\r\n        }\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\managed\\TestSynchronizationOrder.java",
  "methodName" : "testSessionSynchronization",
  "sourceCode" : "@Test\r\nvoid testSessionSynchronization() throws Exception {\r\n    final DataSourceXAConnectionFactory xaConnectionFactory = new DataSourceXAConnectionFactory(transactionManager, xads);\r\n    final PoolableConnectionFactory factory = new PoolableConnectionFactory(xaConnectionFactory, null);\r\n    factory.setValidationQuery(\"SELECT DUMMY FROM DUAL\");\r\n    factory.setDefaultReadOnly(Boolean.TRUE);\r\n    factory.setDefaultAutoCommit(Boolean.TRUE);\r\n    // create the pool\r\n    try (final GenericObjectPool<PoolableConnection> pool = new GenericObjectPool<>(factory)) {\r\n        factory.setPool(pool);\r\n        pool.setMaxTotal(10);\r\n        pool.setMaxWait(Duration.ofSeconds(1));\r\n        // finally create the datasource\r\n        try (final ManagedDataSource<PoolableConnection> ds = new ManagedDataSource<>(pool, xaConnectionFactory.getTransactionRegistry())) {\r\n            ds.setAccessToUnderlyingConnectionAllowed(true);\r\n            transactionManager.begin();\r\n            try (final Connection connectionA = ds.getConnection()) {\r\n                // Check and close right away.\r\n                assertInstanceOf(DelegatingConnection.class, connectionA);\r\n            }\r\n            transactionManager.commit();\r\n            assertTrue(transactionManagerRegistered);\r\n            assertFalse(transactionSynchronizationRegistryRegistered);\r\n        }\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\managed\\TestTransactionContext.java",
  "methodName" : "testSetSharedConnectionEnlistFailure",
  "sourceCode" : "/**\r\n * JIRA: DBCP-428\r\n */\r\n@Test\r\nvoid testSetSharedConnectionEnlistFailure() throws Exception {\r\n    try (final BasicManagedDataSource basicManagedDataSource = new BasicManagedDataSource()) {\r\n        basicManagedDataSource.setTransactionManager(new TransactionManagerImpl());\r\n        basicManagedDataSource.setDriverClassName(\"org.apache.commons.dbcp2.TesterDriver\");\r\n        basicManagedDataSource.setUrl(\"jdbc:apache:commons:testdriver\");\r\n        basicManagedDataSource.setUsername(\"userName\");\r\n        basicManagedDataSource.setPassword(\"password\");\r\n        basicManagedDataSource.setMaxIdle(1);\r\n        try (final Connection conn = basicManagedDataSource.getConnection()) {\r\n            assertInstanceOf(ManagedConnection.class, conn);\r\n            final UncooperativeTransaction transaction = new UncooperativeTransaction();\r\n            final TransactionContext transactionContext = new TransactionContext(basicManagedDataSource.getTransactionRegistry(), transaction);\r\n            assertThrows(SQLException.class, () -> transactionContext.setSharedConnection(conn));\r\n        }\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestAbandonedBasicDataSource.java",
  "methodName" : "testAbandoned",
  "sourceCode" : "@Test\r\nvoid testAbandoned() throws Exception {\r\n    // force abandoned\r\n    ds.setRemoveAbandonedTimeout(Duration.ZERO);\r\n    ds.setMaxTotal(1);\r\n    for (int i = 0; i < 3; i++) {\r\n        assertNotNull(ds.getConnection());\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestAbandonedBasicDataSource.java",
  "methodName" : "testAbandonedClose",
  "sourceCode" : "@Test\r\nvoid testAbandonedClose() throws Exception {\r\n    // force abandoned\r\n    ds.setRemoveAbandonedTimeout(Duration.ZERO);\r\n    ds.setMaxTotal(1);\r\n    ds.setAccessToUnderlyingConnectionAllowed(true);\r\n    try (Connection conn1 = getConnection()) {\r\n        assertNotNull(conn1);\r\n        assertEquals(1, ds.getNumActive());\r\n        try (Connection conn2 = getConnection()) {\r\n            // Attempt to borrow object triggers abandoned cleanup\r\n            // conn1 should be closed by the pool to make room\r\n            assertNotNull(conn2);\r\n            assertEquals(1, ds.getNumActive());\r\n            // Verify that conn1 is closed\r\n            assertTrue(((DelegatingConnection<?>) conn1).getInnermostDelegate().isClosed());\r\n            // Verify that conn1 is aborted\r\n            final TesterConnection tCon = (TesterConnection) ((DelegatingConnection<?>) conn1).getInnermostDelegate();\r\n            assertTrue(tCon.isAborted());\r\n        }\r\n        assertEquals(0, ds.getNumActive());\r\n        // Second close on conn1 is OK as of dbcp 1.3\r\n    }\r\n    assertEquals(0, ds.getNumActive());\r\n    final String string = sw.toString();\r\n    assertTrue(string.contains(\"testAbandonedClose\"), string);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestAbandonedBasicDataSource.java",
  "methodName" : "testAbandonedCloseWithExceptions",
  "sourceCode" : "@Test\r\nvoid testAbandonedCloseWithExceptions() throws Exception {\r\n    // force abandoned\r\n    ds.setRemoveAbandonedTimeout(Duration.ZERO);\r\n    ds.setMaxTotal(1);\r\n    ds.setAccessToUnderlyingConnectionAllowed(true);\r\n    final Connection conn1 = getConnection();\r\n    assertNotNull(conn1);\r\n    assertEquals(1, ds.getNumActive());\r\n    final Connection conn2 = getConnection();\r\n    assertNotNull(conn2);\r\n    assertEquals(1, ds.getNumActive());\r\n    // set an IO failure causing the isClosed method to fail\r\n    final TesterConnection tconn1 = (TesterConnection) ((DelegatingConnection<?>) conn1).getInnermostDelegate();\r\n    tconn1.setFailure(new IOException(\"network error\"));\r\n    final TesterConnection tconn2 = (TesterConnection) ((DelegatingConnection<?>) conn2).getInnermostDelegate();\r\n    tconn2.setFailure(new IOException(\"network error\"));\r\n    try {\r\n        conn2.close();\r\n    } catch (final SQLException ex) {\r\n        /* Ignore */\r\n    }\r\n    assertEquals(0, ds.getNumActive());\r\n    try {\r\n        conn1.close();\r\n    } catch (final SQLException ex) {\r\n        // ignore\r\n    }\r\n    assertEquals(0, ds.getNumActive());\r\n    final String string = sw.toString();\r\n    assertTrue(string.contains(\"testAbandonedCloseWithExceptions\"), string);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestAbandonedBasicDataSource.java",
  "methodName" : "testAbandonedStackTraces",
  "sourceCode" : "@Test\r\nvoid testAbandonedStackTraces() throws Exception {\r\n    // force abandoned\r\n    ds.setRemoveAbandonedTimeout(Duration.ZERO);\r\n    ds.setMaxTotal(1);\r\n    ds.setAccessToUnderlyingConnectionAllowed(true);\r\n    ds.setAbandonedUsageTracking(true);\r\n    try (Connection conn1 = getConnection()) {\r\n        assertNotNull(conn1);\r\n        assertEquals(1, ds.getNumActive());\r\n        // Use the connection\r\n        try (Statement stmt = conn1.createStatement()) {\r\n            assertNotNull(stmt);\r\n            stmt.execute(\"SELECT 1 FROM DUAL\");\r\n        }\r\n        try (Connection conn2 = getConnection()) {\r\n            // Attempt to borrow object triggers abandoned cleanup\r\n            // conn1 should be closed by the pool to make room\r\n            assertNotNull(conn2);\r\n            assertEquals(1, ds.getNumActive());\r\n            // Verify that conn1 is closed\r\n            assertTrue(((DelegatingConnection<?>) conn1).getInnermostDelegate().isClosed());\r\n            // Verify that conn1 is aborted\r\n            final TesterConnection tCon = (TesterConnection) ((DelegatingConnection<?>) conn1).getInnermostDelegate();\r\n            assertTrue(tCon.isAborted());\r\n        }\r\n        assertEquals(0, ds.getNumActive());\r\n    }\r\n    assertEquals(0, ds.getNumActive());\r\n    final String stackTrace = sw.toString();\r\n    assertTrue(stackTrace.contains(\"testAbandonedStackTraces\"), stackTrace);\r\n    assertTrue(stackTrace.contains(\"Pooled object created\"), stackTrace);\r\n    assertTrue(stackTrace.contains(\"The last code to use this object was:\"), stackTrace);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestAbandonedBasicDataSource.java",
  "methodName" : "testGarbageCollectorCleanUp01",
  "sourceCode" : "/**\r\n * DBCP-180 - verify that a GC can clean up an unused Statement when it is no longer referenced even when it is tracked via the AbandonedTrace mechanism.\r\n */\r\n@Test\r\nvoid testGarbageCollectorCleanUp01() throws Exception {\r\n    try (DelegatingConnection<?> conn = (DelegatingConnection<?>) ds.getConnection()) {\r\n        Assertions.assertEquals(0, conn.getTrace().size());\r\n        createStatement(conn);\r\n        Assertions.assertEquals(1, conn.getTrace().size());\r\n        System.gc();\r\n        Assertions.assertEquals(0, conn.getTrace().size());\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestAbandonedBasicDataSource.java",
  "methodName" : "testGarbageCollectorCleanUp02",
  "sourceCode" : "/**\r\n * DBCP-180 - things get more interesting with statement pooling.\r\n */\r\n@Test\r\nvoid testGarbageCollectorCleanUp02() throws Exception {\r\n    ds.setPoolPreparedStatements(true);\r\n    ds.setAccessToUnderlyingConnectionAllowed(true);\r\n    final DelegatingConnection<?> conn = (DelegatingConnection<?>) ds.getConnection();\r\n    final PoolableConnection poolableConn = (PoolableConnection) conn.getDelegate();\r\n    final PoolingConnection poolingConn = (PoolingConnection) poolableConn.getDelegate();\r\n    final KeyedObjectPool<PStmtKey, DelegatingPreparedStatement> gkop = poolingConn.getStatementPool();\r\n    Assertions.assertEquals(0, conn.getTrace().size());\r\n    Assertions.assertEquals(0, gkop.getNumActive());\r\n    createStatement(conn);\r\n    Assertions.assertEquals(1, conn.getTrace().size());\r\n    Assertions.assertEquals(1, gkop.getNumActive());\r\n    System.gc();\r\n    // Finalization happens in a separate thread. Give the test time for\r\n    // that to complete.\r\n    int count = 0;\r\n    while (count < 50 && gkop.getNumActive() > 0) {\r\n        Thread.sleep(100);\r\n        count++;\r\n    }\r\n    Assertions.assertEquals(0, gkop.getNumActive());\r\n    Assertions.assertEquals(0, conn.getTrace().size());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestAbandonedBasicDataSource.java",
  "methodName" : "testLastUsed",
  "sourceCode" : "/**\r\n * Verify that lastUsed property is updated when a connection creates or prepares a statement\r\n */\r\n@Test\r\nvoid testLastUsed() throws Exception {\r\n    ds.setRemoveAbandonedTimeout(Duration.ofSeconds(1));\r\n    ds.setMaxTotal(2);\r\n    try (Connection conn1 = ds.getConnection()) {\r\n        Thread.sleep(500);\r\n        try (Statement s = conn1.createStatement()) {\r\n            // Should reset lastUsed\r\n        }\r\n        Thread.sleep(800);\r\n        // triggers abandoned cleanup\r\n        final Connection conn2 = ds.getConnection();\r\n        try (Statement s = conn1.createStatement()) {\r\n            // Should still be OK\r\n        }\r\n        conn2.close();\r\n        Thread.sleep(500);\r\n        try (PreparedStatement ps = conn1.prepareStatement(\"SELECT 1 FROM DUAL\")) {\r\n            // reset\r\n        }\r\n        Thread.sleep(800);\r\n        try (Connection c = ds.getConnection()) {\r\n            // trigger abandoned cleanup again\r\n        }\r\n        try (Statement s = conn1.createStatement()) {\r\n            // empty\r\n        }\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestAbandonedBasicDataSource.java",
  "methodName" : "testLastUsedLargePreparedStatementUse",
  "sourceCode" : "/**\r\n * DBCP-343 - verify that using a DelegatingStatement updates the lastUsed on the parent connection\r\n */\r\n@Test\r\nvoid testLastUsedLargePreparedStatementUse() throws Exception {\r\n    ds.setRemoveAbandonedTimeout(Duration.ofSeconds(1));\r\n    ds.setMaxTotal(2);\r\n    try (Connection conn1 = ds.getConnection();\r\n        Statement st = conn1.createStatement()) {\r\n        final String querySQL = \"SELECT 1 FROM DUAL\";\r\n        Thread.sleep(500);\r\n        try (ResultSet rs = st.executeQuery(querySQL)) {\r\n            // Should reset lastUsed\r\n            Assertions.assertNotNull(rs);\r\n        }\r\n        Thread.sleep(800);\r\n        try (final Connection conn2 = ds.getConnection()) {\r\n            // triggers abandoned cleanup\r\n            try (ResultSet rs = st.executeQuery(querySQL)) {\r\n                // Should still be OK\r\n                Assertions.assertNotNull(rs);\r\n            }\r\n        }\r\n        Thread.sleep(500);\r\n        // Should also reset\r\n        st.executeLargeUpdate(\"\");\r\n        Thread.sleep(800);\r\n        try (Connection c = ds.getConnection()) {\r\n            // trigger abandoned cleanup again\r\n        }\r\n        try (Statement s = conn1.createStatement()) {\r\n            // Connection should still be good\r\n        }\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestAbandonedBasicDataSource.java",
  "methodName" : "testLastUsedPrepareCall",
  "sourceCode" : "/**\r\n * Verify that lastUsed property is updated when a connection prepares a callable statement.\r\n */\r\n@Test\r\nvoid testLastUsedPrepareCall() throws Exception {\r\n    ds.setRemoveAbandonedTimeout(Duration.ofSeconds(1));\r\n    ds.setMaxTotal(2);\r\n    try (Connection conn1 = ds.getConnection()) {\r\n        Thread.sleep(500);\r\n        try (CallableStatement cs = conn1.prepareCall(\"{call home}\")) {\r\n            // Should reset lastUsed\r\n        }\r\n        Thread.sleep(800);\r\n        // triggers abandoned cleanup\r\n        final Connection conn2 = ds.getConnection();\r\n        try (CallableStatement cs = conn1.prepareCall(\"{call home}\")) {\r\n            // Should still be OK\r\n        }\r\n        conn2.close();\r\n        Thread.sleep(500);\r\n        try (CallableStatement cs = conn1.prepareCall(\"{call home}\")) {\r\n            // reset\r\n        }\r\n        Thread.sleep(800);\r\n        try (Connection c = ds.getConnection()) {\r\n            // empty\r\n        }\r\n        try (Statement s = conn1.createStatement()) {\r\n            // trigger abandoned cleanup again\r\n        }\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestAbandonedBasicDataSource.java",
  "methodName" : "testLastUsedPreparedStatementUse",
  "sourceCode" : "/**\r\n * DBCP-343 - verify that using a DelegatingStatement updates the lastUsed on the parent connection\r\n */\r\n@Test\r\nvoid testLastUsedPreparedStatementUse() throws Exception {\r\n    ds.setRemoveAbandonedTimeout(Duration.ofSeconds(1));\r\n    ds.setMaxTotal(2);\r\n    try (Connection conn1 = ds.getConnection();\r\n        Statement st = conn1.createStatement()) {\r\n        final String querySQL = \"SELECT 1 FROM DUAL\";\r\n        Thread.sleep(500);\r\n        // Should reset lastUsed\r\n        Assertions.assertNotNull(st.executeQuery(querySQL));\r\n        Thread.sleep(800);\r\n        // triggers abandoned cleanup\r\n        final Connection conn2 = ds.getConnection();\r\n        // Should still be OK\r\n        Assertions.assertNotNull(st.executeQuery(querySQL));\r\n        conn2.close();\r\n        Thread.sleep(500);\r\n        // Should also reset\r\n        st.executeUpdate(\"\");\r\n        Thread.sleep(800);\r\n        try (Connection c = ds.getConnection()) {\r\n        }\r\n        // trigger abandoned cleanup again\r\n        try (Statement s = conn1.createStatement()) {\r\n        }\r\n        // Connection should still be good\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestAbandonedBasicDataSource.java",
  "methodName" : "testLastUsedUpdate",
  "sourceCode" : "/**\r\n * DBCP-343 - verify additional operations reset lastUsed on the parent connection\r\n */\r\n@Test\r\nvoid testLastUsedUpdate() throws Exception {\r\n    try (DelegatingConnection<?> conn = (DelegatingConnection<?>) ds.getConnection();\r\n        final PreparedStatement ps = conn.prepareStatement(\"\");\r\n        final CallableStatement cs = conn.prepareCall(\"\");\r\n        final Statement st = conn.prepareStatement(\"\")) {\r\n        checkLastUsedStatement(ps, conn);\r\n        checkLastUsedPreparedStatement(ps, conn);\r\n        checkLastUsedStatement(cs, conn);\r\n        checkLastUsedPreparedStatement(cs, conn);\r\n        checkLastUsedStatement(st, conn);\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestAbandonedTrace.java",
  "methodName" : "testDeprecated",
  "sourceCode" : "@Test\r\nvoid testDeprecated() throws SQLException {\r\n    try (AbandonedTrace trace = new AbandonedTrace()) {\r\n        assertEquals(trace.getLastUsedInstant().toEpochMilli(), trace.getLastUsed());\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestBasicDataSource.java",
  "methodName" : "testAccessToUnderlyingConnectionAllowed",
  "sourceCode" : "@Test\r\nvoid testAccessToUnderlyingConnectionAllowed() throws Exception {\r\n    ds.setAccessToUnderlyingConnectionAllowed(true);\r\n    assertTrue(ds.isAccessToUnderlyingConnectionAllowed());\r\n    try (final Connection conn = getConnection()) {\r\n        Connection dconn = ((DelegatingConnection<?>) conn).getDelegate();\r\n        assertNotNull(dconn);\r\n        dconn = ((DelegatingConnection<?>) conn).getInnermostDelegate();\r\n        assertNotNull(dconn);\r\n        assertInstanceOf(TesterConnection.class, dconn);\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestBasicDataSource.java",
  "methodName" : "testClose",
  "sourceCode" : "@Test\r\nvoid testClose() throws Exception {\r\n    ds.setAccessToUnderlyingConnectionAllowed(true);\r\n    // active connection is held open when ds is closed\r\n    final Connection activeConnection = getConnection();\r\n    final Connection rawActiveConnection = ((DelegatingConnection<?>) activeConnection).getInnermostDelegate();\r\n    assertFalse(activeConnection.isClosed());\r\n    assertFalse(rawActiveConnection.isClosed());\r\n    // idle connection is in pool but closed\r\n    final Connection idleConnection = getConnection();\r\n    final Connection rawIdleConnection = ((DelegatingConnection<?>) idleConnection).getInnermostDelegate();\r\n    assertFalse(idleConnection.isClosed());\r\n    assertFalse(rawIdleConnection.isClosed());\r\n    // idle wrapper should be closed but raw connection should be open\r\n    idleConnection.close();\r\n    assertTrue(idleConnection.isClosed());\r\n    assertFalse(rawIdleConnection.isClosed());\r\n    ds.close();\r\n    // raw idle connection should now be closed\r\n    assertTrue(rawIdleConnection.isClosed());\r\n    // active connection should still be open\r\n    assertFalse(activeConnection.isClosed());\r\n    assertFalse(rawActiveConnection.isClosed());\r\n    // now close the active connection\r\n    activeConnection.close();\r\n    // both wrapper and raw active connection should be closed\r\n    assertTrue(activeConnection.isClosed());\r\n    assertTrue(rawActiveConnection.isClosed());\r\n    // Verify SQLException on getConnection after close\r\n    assertThrows(SQLException.class, this::getConnection);\r\n    // Redundant close is OK\r\n    ds.close();\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestBasicDataSource.java",
  "methodName" : "testConcurrentInitBorrow",
  "sourceCode" : "@Test\r\nvoid testConcurrentInitBorrow() throws Exception {\r\n    ds.setDriverClassName(\"org.apache.commons.dbcp2.TesterConnectionDelayDriver\");\r\n    ds.setUrl(\"jdbc:apache:commons:testerConnectionDelayDriver:50\");\r\n    ds.setInitialSize(8);\r\n    // Launch a request to trigger pool initialization\r\n    final TestThread testThread = new TestThread(1, 0);\r\n    final Thread t = new Thread(testThread);\r\n    t.start();\r\n    // Get another connection (should wait for pool init)\r\n    // Make sure t gets into init first\r\n    Thread.sleep(100);\r\n    try (Connection conn = ds.getConnection()) {\r\n        // Pool should have at least 6 idle connections now\r\n        // Use underlying pool getNumIdle to avoid waiting for ds lock\r\n        assertTrue(ds.getConnectionPool().getNumIdle() > 5);\r\n        // Make sure t completes successfully\r\n        t.join();\r\n        assertFalse(testThread.failed());\r\n    }\r\n    ds.close();\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestBasicDataSource.java",
  "methodName" : "testConcurrentInvalidateBorrow",
  "sourceCode" : "/**\r\n * JIRA: DBCP-444 Verify that invalidate does not return closed connection to the pool.\r\n */\r\n@Test\r\nvoid testConcurrentInvalidateBorrow() throws Exception {\r\n    ds.setDriverClassName(\"org.apache.commons.dbcp2.TesterConnRequestCountDriver\");\r\n    ds.setUrl(\"jdbc:apache:commons:testerConnRequestCountDriver\");\r\n    ds.setTestOnBorrow(true);\r\n    ds.setValidationQuery(\"SELECT DUMMY FROM DUAL\");\r\n    ds.setMaxTotal(8);\r\n    ds.setLifo(true);\r\n    ds.setMaxWait(Duration.ofMillis(-1));\r\n    // Threads just borrow and return - validation will trigger close check\r\n    final TestThread testThread1 = new TestThread(1000, 0);\r\n    final Thread t1 = new Thread(testThread1);\r\n    t1.start();\r\n    final TestThread testThread2 = new TestThread(1000, 0);\r\n    final Thread t2 = new Thread(testThread1);\r\n    t2.start();\r\n    // Grab and invalidate connections\r\n    for (int i = 0; i < 1000; i++) {\r\n        final Connection conn = ds.getConnection();\r\n        ds.invalidateConnection(conn);\r\n    }\r\n    // Make sure borrow threads complete successfully\r\n    t1.join();\r\n    t2.join();\r\n    assertFalse(testThread1.failed());\r\n    assertFalse(testThread2.failed());\r\n    ds.close();\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestBasicDataSource.java",
  "methodName" : "testConnectionMBeansDisabled",
  "sourceCode" : "/**\r\n * Test disabling MBean registration for Connection objects. JIRA: DBCP-585\r\n */\r\n@Test\r\nvoid testConnectionMBeansDisabled() throws Exception {\r\n    final MBeanServer mbs = ManagementFactory.getPlatformMBeanServer();\r\n    // Unregister leftovers from other tests (TODO: worry about concurrent test execution)\r\n    final ObjectName commons = new ObjectName(\"org.apache.commons.*:*\");\r\n    final Set<ObjectName> results = mbs.queryNames(commons, null);\r\n    for (final ObjectName result : results) {\r\n        mbs.unregisterMBean(result);\r\n    }\r\n    // Should disable Connection MBean registration\r\n    ds.setRegisterConnectionMBean(false);\r\n    try (Connection conn = ds.getConnection()) {\r\n        // Trigger initialization\r\n        // No Connection MBeans shall be registered\r\n        final ObjectName connections = new ObjectName(\"org.apache.commons.*:connection=*,*\");\r\n        assertEquals(0, mbs.queryNames(connections, null).size());\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestBasicDataSource.java",
  "methodName" : "testCreateConnectionFactoryWithConnectionFactoryClassName",
  "sourceCode" : "/**\r\n * JIRA: DBCP-547 Verify that ConnectionFactory interface in BasicDataSource.createConnectionFactory().\r\n */\r\n@Test\r\nvoid testCreateConnectionFactoryWithConnectionFactoryClassName() throws Exception {\r\n    Properties properties = new Properties();\r\n    // set ConnectionFactoryClassName\r\n    properties = new Properties();\r\n    properties.put(\"initialSize\", \"1\");\r\n    properties.put(\"driverClassName\", \"org.apache.commons.dbcp2.TesterDriver\");\r\n    properties.put(\"url\", \"jdbc:apache:commons:testdriver\");\r\n    properties.put(\"username\", \"foo\");\r\n    properties.put(\"password\", \"bar\");\r\n    properties.put(\"connectionFactoryClassName\", \"org.apache.commons.dbcp2.TesterConnectionFactory\");\r\n    try (BasicDataSource ds = BasicDataSourceFactory.createDataSource(properties)) {\r\n        try (Connection conn = ds.getConnection()) {\r\n            assertNotNull(conn);\r\n        }\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestBasicDataSource.java",
  "methodName" : "testCreateConnectionFactoryWithoutConnectionFactoryClassName",
  "sourceCode" : "/**\r\n * JIRA: DBCP-547 Verify that ConnectionFactory interface in BasicDataSource.createConnectionFactory().\r\n */\r\n@Test\r\nvoid testCreateConnectionFactoryWithoutConnectionFactoryClassName() throws Exception {\r\n    // not set ConnectionFactoryClassName\r\n    final Properties properties = new Properties();\r\n    properties.put(\"initialSize\", \"1\");\r\n    properties.put(\"driverClassName\", \"org.apache.commons.dbcp2.TesterDriver\");\r\n    properties.put(\"url\", \"jdbc:apache:commons:testdriver\");\r\n    properties.put(\"username\", \"foo\");\r\n    properties.put(\"password\", \"bar\");\r\n    try (BasicDataSource ds = BasicDataSourceFactory.createDataSource(properties)) {\r\n        try (Connection conn = ds.getConnection()) {\r\n            assertNotNull(conn);\r\n        }\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestBasicDataSource.java",
  "methodName" : "testCreateDataSourceCleanupEvictor",
  "sourceCode" : "/**\r\n * JIRA: DBCP-342, DBCP-93 Verify that when errors occur during BasicDataSource initialization, GenericObjectPool Evictors are cleaned up.\r\n */\r\n@Test\r\nvoid testCreateDataSourceCleanupEvictor() throws Exception {\r\n    ds.close();\r\n    ds = null;\r\n    ds = createDataSource();\r\n    ds.setDriverClassName(\"org.apache.commons.dbcp2.TesterConnRequestCountDriver\");\r\n    ds.setUrl(\"jdbc:apache:commons:testerConnRequestCountDriver\");\r\n    ds.setValidationQuery(\"SELECT DUMMY FROM DUAL\");\r\n    ds.setUsername(\"userName\");\r\n    // Make password incorrect, so createDataSource will throw\r\n    ds.setPassword(\"wrong\");\r\n    // Set timeBetweenEvictionRuns > 0, so evictor will be created\r\n    ds.setDurationBetweenEvictionRuns(Duration.ofMillis(100));\r\n    // Set min idle > 0, so evictor will try to make connection as many as idle count\r\n    ds.setMinIdle(2);\r\n    // Prevent concurrent execution of threads executing test subclasses\r\n    synchronized (TesterConnRequestCountDriver.class) {\r\n        TesterConnRequestCountDriver.initConnRequestCount();\r\n        // user request 10 times\r\n        for (int i = 0; i < 10; i++) {\r\n            try {\r\n                @SuppressWarnings(\"unused\")\r\n                final DataSource ds2 = ds.createDataSource();\r\n            } catch (final SQLException e) {\r\n                // Ignore\r\n            }\r\n        }\r\n        // sleep 1000ms. evictor will be invoked 10 times if running.\r\n        Thread.sleep(1000);\r\n        // Make sure there have been no Evictor-generated requests (count should be 10, from requests above)\r\n        assertEquals(10, TesterConnRequestCountDriver.getConnectionRequestCount());\r\n    }\r\n    // make sure cleanup is complete\r\n    assertNull(ds.getConnectionPool());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestBasicDataSource.java",
  "methodName" : "testCreateDataSourceCleanupThreads",
  "sourceCode" : "/**\r\n * JIRA DBCP-93: If an SQLException occurs after the GenericObjectPool is initialized in createDataSource, the evictor task is not cleaned up.\r\n */\r\n@Test\r\nvoid testCreateDataSourceCleanupThreads() throws Exception {\r\n    ds.close();\r\n    ds = null;\r\n    ds = createDataSource();\r\n    ds.setDriverClassName(\"org.apache.commons.dbcp2.TesterDriver\");\r\n    ds.setUrl(\"jdbc:apache:commons:testdriver\");\r\n    ds.setMaxTotal(getMaxTotal());\r\n    ds.setMaxWait(getMaxWaitDuration());\r\n    ds.setDefaultAutoCommit(Boolean.TRUE);\r\n    ds.setDefaultReadOnly(Boolean.FALSE);\r\n    ds.setDefaultTransactionIsolation(Connection.TRANSACTION_READ_COMMITTED);\r\n    ds.setDefaultCatalog(CATALOG);\r\n    ds.setUsername(\"userName\");\r\n    // Set timeBetweenEvictionRuns > 0, so evictor is created\r\n    ds.setDurationBetweenEvictionRuns(Duration.ofMillis(100));\r\n    // Make password incorrect, so createDataSource will throw\r\n    ds.setPassword(\"wrong\");\r\n    ds.setValidationQuery(\"SELECT DUMMY FROM DUAL\");\r\n    final int threadCount = Thread.activeCount();\r\n    for (int i = 0; i < 10; i++) {\r\n        try (Connection c = ds.getConnection()) {\r\n        } catch (final SQLException ex) {\r\n            // ignore\r\n        }\r\n    }\r\n    // Allow one extra thread for JRockit compatibility\r\n    assertTrue(Thread.activeCount() <= threadCount + 1);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestBasicDataSource.java",
  "methodName" : "testDefaultCatalog",
  "sourceCode" : "@Test\r\nvoid testDefaultCatalog() throws Exception {\r\n    final Connection[] c = new Connection[getMaxTotal()];\r\n    for (int i = 0; i < c.length; i++) {\r\n        c[i] = getConnection();\r\n        assertNotNull(c[i]);\r\n        assertEquals(CATALOG, c[i].getCatalog());\r\n    }\r\n    for (final Connection element : c) {\r\n        element.setCatalog(\"error\");\r\n        element.close();\r\n    }\r\n    for (int i = 0; i < c.length; i++) {\r\n        c[i] = getConnection();\r\n        assertNotNull(c[i]);\r\n        assertEquals(CATALOG, c[i].getCatalog());\r\n    }\r\n    for (final Connection element : c) {\r\n        element.close();\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestBasicDataSource.java",
  "methodName" : "testDeprecatedAccessors",
  "sourceCode" : "@Test\r\nvoid testDeprecatedAccessors() throws SQLException {\r\n    try (BasicDataSource bds = new BasicDataSource()) {\r\n        int i = 0;\r\n        //\r\n        i++;\r\n        bds.setDefaultQueryTimeout(i);\r\n        assertEquals(i, bds.getDefaultQueryTimeout());\r\n        assertEquals(Duration.ofSeconds(i), bds.getDefaultQueryTimeoutDuration());\r\n        //\r\n        i++;\r\n        bds.setMaxConnLifetimeMillis(i);\r\n        assertEquals(i, bds.getMaxConnLifetimeMillis());\r\n        assertEquals(Duration.ofMillis(i), bds.getMaxConnDuration());\r\n        //\r\n        i++;\r\n        bds.setMaxWaitMillis(i);\r\n        assertEquals(i, bds.getMaxWaitMillis());\r\n        assertEquals(Duration.ofMillis(i), bds.getMaxWaitDuration());\r\n        //\r\n        i++;\r\n        bds.setMinEvictableIdleTimeMillis(i);\r\n        assertEquals(i, bds.getMinEvictableIdleTimeMillis());\r\n        assertEquals(Duration.ofMillis(i), bds.getMinEvictableIdleDuration());\r\n        //\r\n        i++;\r\n        bds.setRemoveAbandonedTimeout(i);\r\n        assertEquals(i, bds.getRemoveAbandonedTimeout());\r\n        assertEquals(Duration.ofSeconds(i), bds.getRemoveAbandonedTimeoutDuration());\r\n        //\r\n        i++;\r\n        bds.setSoftMinEvictableIdleTimeMillis(i);\r\n        assertEquals(i, bds.getSoftMinEvictableIdleTimeMillis());\r\n        assertEquals(Duration.ofMillis(i), bds.getSoftMinEvictableIdleDuration());\r\n        //\r\n        i++;\r\n        bds.setTimeBetweenEvictionRunsMillis(i);\r\n        assertEquals(i, bds.getTimeBetweenEvictionRunsMillis());\r\n        assertEquals(Duration.ofMillis(i), bds.getDurationBetweenEvictionRuns());\r\n        //\r\n        i++;\r\n        bds.setValidationQueryTimeout(1);\r\n        assertEquals(1, bds.getValidationQueryTimeout());\r\n        assertEquals(Duration.ofSeconds(1), bds.getValidationQueryTimeoutDuration());\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestBasicDataSource.java",
  "methodName" : "testDisconnectionIgnoreSqlCodes",
  "sourceCode" : "@Test\r\nvoid testDisconnectionIgnoreSqlCodes() throws Exception {\r\n    final ArrayList<String> disconnectionIgnoreSqlCodes = new ArrayList<>();\r\n    disconnectionIgnoreSqlCodes.add(\"XXXX\");\r\n    ds.setDisconnectionIgnoreSqlCodes(disconnectionIgnoreSqlCodes);\r\n    ds.setFastFailValidation(true);\r\n    try (Connection conn = ds.getConnection()) {\r\n        // Triggers initialization - pcf creation\r\n        // Make sure factory got the properties\r\n        final PoolableConnectionFactory pcf = (PoolableConnectionFactory) ds.getConnectionPool().getFactory();\r\n        assertTrue(pcf.isFastFailValidation());\r\n        assertTrue(pcf.getDisconnectionIgnoreSqlCodes().contains(\"XXXX\"));\r\n        assertEquals(1, pcf.getDisconnectionIgnoreSqlCodes().size());\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestBasicDataSource.java",
  "methodName" : "testDisconnectSqlCodes",
  "sourceCode" : "/**\r\n * JIRA: DBCP-437 Verify that BasicDataSource sets disconnect codes properties. Functionality is verified in pcf tests.\r\n */\r\n@Test\r\nvoid testDisconnectSqlCodes() throws Exception {\r\n    final ArrayList<String> disconnectionSqlCodes = new ArrayList<>();\r\n    disconnectionSqlCodes.add(\"XXX\");\r\n    ds.setDisconnectionSqlCodes(disconnectionSqlCodes);\r\n    ds.setFastFailValidation(true);\r\n    try (Connection conn = ds.getConnection()) {\r\n        // Triggers initialization - pcf creation\r\n        // Make sure factory got the properties\r\n        final PoolableConnectionFactory pcf = (PoolableConnectionFactory) ds.getConnectionPool().getFactory();\r\n        assertTrue(pcf.isFastFailValidation());\r\n        assertTrue(pcf.getDisconnectionSqlCodes().contains(\"XXX\"));\r\n        assertEquals(1, pcf.getDisconnectionSqlCodes().size());\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestBasicDataSource.java",
  "methodName" : "testDriverClassLoader",
  "sourceCode" : "/**\r\n * JIRA DBCP-333: Check that a custom class loader is used.\r\n *\r\n * @throws Exception\r\n */\r\n@Test\r\nvoid testDriverClassLoader() throws Exception {\r\n    try (Connection conn = getConnection()) {\r\n        final ClassLoader cl = ds.getDriverClassLoader();\r\n        assertNotNull(cl);\r\n        assertInstanceOf(TesterClassLoader.class, cl);\r\n        assertTrue(((TesterClassLoader) cl).didLoad(ds.getDriverClassName()));\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestBasicDataSource.java",
  "methodName" : "testEmptyInitConnectionSql",
  "sourceCode" : "@Test\r\nvoid testEmptyInitConnectionSql() throws Exception {\r\n    // List\r\n    ds.setConnectionInitSqls(Arrays.asList(\"\", \"   \"));\r\n    assertNotNull(ds.getConnectionInitSqls());\r\n    assertEquals(0, ds.getConnectionInitSqls().size());\r\n    // null\r\n    ds.setConnectionInitSqls(null);\r\n    assertNotNull(ds.getConnectionInitSqls());\r\n    assertEquals(0, ds.getConnectionInitSqls().size());\r\n    // Collection\r\n    ds.setConnectionInitSqls((Collection<String>) Arrays.asList(\"\", \"   \"));\r\n    assertNotNull(ds.getConnectionInitSqls());\r\n    assertEquals(0, ds.getConnectionInitSqls().size());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestBasicDataSource.java",
  "methodName" : "testEmptyValidationQuery",
  "sourceCode" : "@Test\r\nvoid testEmptyValidationQuery() throws Exception {\r\n    assertNotNull(ds.getValidationQuery());\r\n    ds.setValidationQuery(\"\");\r\n    assertNull(ds.getValidationQuery());\r\n    ds.setValidationQuery(\"   \");\r\n    assertNull(ds.getValidationQuery());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestBasicDataSource.java",
  "methodName" : "testEvict",
  "sourceCode" : "@Test\r\n@Disabled\r\nvoid testEvict() throws Exception {\r\n    final long delay = 1000;\r\n    ds.setInitialSize(10);\r\n    ds.setMaxIdle(10);\r\n    ds.setMaxTotal(10);\r\n    ds.setMinIdle(5);\r\n    ds.setNumTestsPerEvictionRun(3);\r\n    ds.setMinEvictableIdle(Duration.ofMillis(100));\r\n    ds.setDurationBetweenEvictionRuns(Duration.ofMillis(delay));\r\n    ds.setPoolPreparedStatements(true);\r\n    try (Connection conn = ds.getConnection()) {\r\n        // empty\r\n    }\r\n    final ThreadMXBean threadBean = ManagementFactory.getThreadMXBean();\r\n    while (Stream.of(threadBean.getThreadInfo(threadBean.getAllThreadIds())).anyMatch(t -> t.getThreadName().equals(\"commons-pool-evictor-thread\"))) {\r\n        if (ds.getNumIdle() <= ds.getMinIdle()) {\r\n            break;\r\n        }\r\n        Thread.sleep(delay);\r\n    }\r\n    assertFalse(ds.getNumIdle() > ds.getMinIdle(), () -> \"EvictionTimer thread was destroyed with numIdle=\" + ds.getNumIdle() + \"(expected: less or equal than \" + ds.getMinIdle() + \")\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestBasicDataSource.java",
  "methodName" : "testInitialSize",
  "sourceCode" : "@Test\r\nvoid testInitialSize() throws Exception {\r\n    ds.setMaxTotal(20);\r\n    ds.setMaxIdle(20);\r\n    ds.setInitialSize(10);\r\n    try (Connection conn = getConnection()) {\r\n        assertNotNull(conn);\r\n    }\r\n    assertEquals(0, ds.getNumActive());\r\n    assertEquals(10, ds.getNumIdle());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestBasicDataSource.java",
  "methodName" : "testInstanceNotFoundExceptionLogSuppressed",
  "sourceCode" : "/**\r\n * JIRA: DBCP-482 Verify warning not logged if JMX MBean unregistered before close() called.\r\n */\r\n@Test\r\nvoid testInstanceNotFoundExceptionLogSuppressed() throws Exception {\r\n    final MBeanServer mbs = ManagementFactory.getPlatformMBeanServer();\r\n    try (Connection c = ds.getConnection()) {\r\n        // nothing\r\n    }\r\n    final ObjectName objectName = new ObjectName(ds.getJmxName());\r\n    if (mbs.isRegistered(objectName)) {\r\n        mbs.unregisterMBean(objectName);\r\n    }\r\n    StackMessageLog.clear();\r\n    ds.close();\r\n    assertNull(StackMessageLog.popMessage());\r\n    assertNull(ds.getRegisteredJmxName());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestBasicDataSource.java",
  "methodName" : "testInvalidateConnection",
  "sourceCode" : "@Test\r\nvoid testInvalidateConnection() throws Exception {\r\n    ds.setMaxTotal(2);\r\n    try (final Connection conn1 = ds.getConnection()) {\r\n        try (final Connection conn2 = ds.getConnection()) {\r\n            ds.invalidateConnection(conn1);\r\n            assertTrue(conn1.isClosed());\r\n            assertEquals(1, ds.getNumActive());\r\n            assertEquals(0, ds.getNumIdle());\r\n            try (final Connection conn3 = ds.getConnection()) {\r\n                conn2.close();\r\n            }\r\n        }\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestBasicDataSource.java",
  "methodName" : "testInvalidConnectionInitSqlCollection",
  "sourceCode" : "@Test\r\nvoid testInvalidConnectionInitSqlCollection() {\r\n    ds.setConnectionInitSqls((Collection<String>) Arrays.asList(\"SELECT 1\", \"invalid\"));\r\n    final SQLException e = assertThrows(SQLException.class, ds::getConnection);\r\n    assertTrue(e.toString().contains(\"invalid\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestBasicDataSource.java",
  "methodName" : "testInvalidConnectionInitSqlList",
  "sourceCode" : "@Test\r\nvoid testInvalidConnectionInitSqlList() {\r\n    ds.setConnectionInitSqls(Arrays.asList(\"SELECT 1\", \"invalid\"));\r\n    final SQLException e = assertThrows(SQLException.class, ds::getConnection);\r\n    assertTrue(e.toString().contains(\"invalid\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestBasicDataSource.java",
  "methodName" : "testInvalidValidationQuery",
  "sourceCode" : "@Test\r\nvoid testInvalidValidationQuery() {\r\n    ds.setValidationQuery(\"invalid\");\r\n    final SQLException e = assertThrows(SQLException.class, ds::getConnection);\r\n    assertTrue(e.toString().contains(\"invalid\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestBasicDataSource.java",
  "methodName" : "testIsClosedFailure",
  "sourceCode" : "// Bugzilla Bug 28251: Returning dead database connections to BasicDataSource\r\n// isClosed() failure blocks returning a connection to the pool\r\n@Test\r\nvoid testIsClosedFailure() throws SQLException {\r\n    ds.setAccessToUnderlyingConnectionAllowed(true);\r\n    final Connection conn = ds.getConnection();\r\n    assertNotNull(conn);\r\n    assertEquals(1, ds.getNumActive());\r\n    // set an IO failure causing the isClosed method to fail\r\n    final TesterConnection tconn = (TesterConnection) ((DelegatingConnection<?>) conn).getInnermostDelegate();\r\n    tconn.setFailure(new IOException(\"network error\"));\r\n    assertThrows(SQLException.class, () -> conn.close());\r\n    assertEquals(0, ds.getNumActive());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestBasicDataSource.java",
  "methodName" : "testIsWrapperFor",
  "sourceCode" : "@Test\r\nvoid testIsWrapperFor() throws Exception {\r\n    assertTrue(ds.isWrapperFor(BasicDataSource.class));\r\n    assertTrue(ds.isWrapperFor(AutoCloseable.class));\r\n    assertFalse(ds.isWrapperFor(String.class));\r\n    assertFalse(ds.isWrapperFor(null));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestBasicDataSource.java",
  "methodName" : "testJmxDisabled",
  "sourceCode" : "/**\r\n * Make sure setting jmxName to null suppresses JMX registration of connection and statement pools. JIRA: DBCP-434\r\n */\r\n@Test\r\nvoid testJmxDisabled() throws Exception {\r\n    final MBeanServer mbs = ManagementFactory.getPlatformMBeanServer();\r\n    // Unregister leftovers from other tests (TODO: worry about concurrent test execution)\r\n    final ObjectName commons = new ObjectName(\"org.apache.commons.*:*\");\r\n    final Set<ObjectName> results = mbs.queryNames(commons, null);\r\n    for (final ObjectName result : results) {\r\n        mbs.unregisterMBean(result);\r\n    }\r\n    // Should disable JMX for both connection and statement pools\r\n    ds.setJmxName(null);\r\n    ds.setPoolPreparedStatements(true);\r\n    try (Connection conn = ds.getConnection()) {\r\n        // Trigger initialization\r\n        // Nothing should be registered\r\n        assertEquals(0, mbs.queryNames(commons, null).size());\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestBasicDataSource.java",
  "methodName" : "testJmxDoesNotExposePassword",
  "sourceCode" : "/**\r\n * Tests JIRA <a href=\"https://issues.apache.org/jira/browse/DBCP-562\">DBCP-562</a>.\r\n * <p>\r\n * Make sure Password Attribute is not exported via JMXBean.\r\n * </p>\r\n */\r\n@Test\r\nvoid testJmxDoesNotExposePassword() throws Exception {\r\n    final MBeanServer mbs = ManagementFactory.getPlatformMBeanServer();\r\n    try (Connection c = ds.getConnection()) {\r\n        // nothing\r\n    }\r\n    final ObjectName objectName = new ObjectName(ds.getJmxName());\r\n    final MBeanAttributeInfo[] attributes = mbs.getMBeanInfo(objectName).getAttributes();\r\n    assertTrue(attributes != null && attributes.length > 0);\r\n    Arrays.asList(attributes).forEach(attrInfo -> assertFalse(\"password\".equalsIgnoreCase(attrInfo.getName())));\r\n    assertThrows(AttributeNotFoundException.class, () -> mbs.getAttribute(objectName, \"Password\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestBasicDataSource.java",
  "methodName" : "testManualConnectionEvict",
  "sourceCode" : "@Test\r\nvoid testManualConnectionEvict() throws Exception {\r\n    ds.setMinIdle(0);\r\n    ds.setMaxIdle(4);\r\n    ds.setMinEvictableIdle(Duration.ofMillis(10));\r\n    ds.setNumTestsPerEvictionRun(2);\r\n    try (Connection ds2 = ds.createDataSource().getConnection();\r\n        Connection ds3 = ds.createDataSource().getConnection()) {\r\n        assertEquals(0, ds.getNumIdle());\r\n    }\r\n    // Make sure MinEvictableIdleTimeMillis has elapsed\r\n    Thread.sleep(100);\r\n    // Ensure no connections evicted by eviction thread\r\n    assertEquals(2, ds.getNumIdle());\r\n    // Force Eviction\r\n    ds.evict();\r\n    // Ensure all connections evicted\r\n    assertEquals(0, ds.getNumIdle());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestBasicDataSource.java",
  "methodName" : "testMaxConnLifetimeExceeded",
  "sourceCode" : "@Test\r\nvoid testMaxConnLifetimeExceeded() throws Exception {\r\n    try {\r\n        StackMessageLog.lock();\r\n        ds.setMaxConn(Duration.ofMillis(100));\r\n        try (Connection conn = ds.getConnection()) {\r\n            assertEquals(1, ds.getNumActive());\r\n            Thread.sleep(500);\r\n        }\r\n        assertEquals(0, ds.getNumIdle());\r\n        final String message = StackMessageLog.popMessage();\r\n        Assertions.assertNotNull(message);\r\n        assertTrue(message.indexOf(\"exceeds the maximum permitted value\") > 0);\r\n    } finally {\r\n        StackMessageLog.clear();\r\n        StackMessageLog.unLock();\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestBasicDataSource.java",
  "methodName" : "testMaxConnLifetimeExceededMutedLog",
  "sourceCode" : "@Test\r\nvoid testMaxConnLifetimeExceededMutedLog() throws Exception {\r\n    try {\r\n        StackMessageLog.lock();\r\n        StackMessageLog.clear();\r\n        ds.setMaxConn(Duration.ofMillis(100));\r\n        ds.setLogExpiredConnections(false);\r\n        try (final Connection conn = ds.getConnection()) {\r\n            assertEquals(1, ds.getNumActive());\r\n            Thread.sleep(500);\r\n        }\r\n        assertEquals(0, ds.getNumIdle());\r\n        assertTrue(StackMessageLog.isEmpty(), StackMessageLog.getAll().toString());\r\n    } finally {\r\n        StackMessageLog.clear();\r\n        StackMessageLog.unLock();\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestBasicDataSource.java",
  "methodName" : "testMaxTotalZero",
  "sourceCode" : "/**\r\n * Bugzilla Bug 29832: Broken behavior for BasicDataSource.setMaxTotal(0) MaxTotal == 0 should throw SQLException on getConnection. Results from Bug 29863\r\n * in commons-pool.\r\n */\r\n@Test\r\nvoid testMaxTotalZero() throws Exception {\r\n    ds.setMaxTotal(0);\r\n    assertThrows(SQLException.class, ds::getConnection);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestBasicDataSource.java",
  "methodName" : "testMutateAbandonedConfig",
  "sourceCode" : "/**\r\n * JIRA: DBCP-457 Verify that changes made to abandoned config are passed to the underlying pool.\r\n */\r\n@Test\r\nvoid testMutateAbandonedConfig() throws Exception {\r\n    final Properties properties = new Properties();\r\n    properties.put(\"initialSize\", \"1\");\r\n    properties.put(\"driverClassName\", \"org.apache.commons.dbcp2.TesterDriver\");\r\n    properties.put(\"url\", \"jdbc:apache:commons:testdriver\");\r\n    properties.put(\"username\", \"foo\");\r\n    properties.put(\"password\", \"bar\");\r\n    try (BasicDataSource ds = BasicDataSourceFactory.createDataSource(properties)) {\r\n        final boolean original = ds.getConnectionPool().getLogAbandoned();\r\n        ds.setLogAbandoned(!original);\r\n        Assertions.assertNotEquals(original, ds.getConnectionPool().getLogAbandoned());\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestBasicDataSource.java",
  "methodName" : "testNoAccessToUnderlyingConnectionAllowed",
  "sourceCode" : "@Test\r\nvoid testNoAccessToUnderlyingConnectionAllowed() throws Exception {\r\n    // default: false\r\n    assertFalse(ds.isAccessToUnderlyingConnectionAllowed());\r\n    try (Connection conn = getConnection()) {\r\n        Connection dconn = ((DelegatingConnection<?>) conn).getDelegate();\r\n        assertNull(dconn);\r\n        dconn = ((DelegatingConnection<?>) conn).getInnermostDelegate();\r\n        assertNull(dconn);\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestBasicDataSource.java",
  "methodName" : "testNoOverlapBetweenDisconnectionAndIgnoreSqlCodes",
  "sourceCode" : "@Test\r\nvoid testNoOverlapBetweenDisconnectionAndIgnoreSqlCodes() {\r\n    // Set disconnection SQL codes without overlap\r\n    final HashSet<String> disconnectionSqlCodes = new HashSet<>(Arrays.asList(\"XXX\", \"ZZZ\"));\r\n    ds.setDisconnectionSqlCodes(disconnectionSqlCodes);\r\n    // Set ignore SQL codes without overlap\r\n    final HashSet<String> disconnectionIgnoreSqlCodes = new HashSet<>(Arrays.asList(\"YYY\", \"AAA\"));\r\n    ds.setDisconnectionIgnoreSqlCodes(disconnectionIgnoreSqlCodes);\r\n    assertEquals(disconnectionSqlCodes, ds.getDisconnectionSqlCodes(), \"Disconnection SQL codes should match the set values.\");\r\n    assertEquals(disconnectionIgnoreSqlCodes, ds.getDisconnectionIgnoreSqlCodes(), \"Disconnection Ignore SQL codes should match the set values.\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestBasicDataSource.java",
  "methodName" : "testOverlapBetweenDisconnectionAndIgnoreSqlCodes",
  "sourceCode" : "@Test\r\nvoid testOverlapBetweenDisconnectionAndIgnoreSqlCodes() {\r\n    // Set initial disconnection SQL codes\r\n    final HashSet<String> disconnectionSqlCodes = new HashSet<>(Arrays.asList(\"XXX\", \"ZZZ\"));\r\n    ds.setDisconnectionSqlCodes(disconnectionSqlCodes);\r\n    // Try setting ignore SQL codes with overlap\r\n    final HashSet<String> disconnectionIgnoreSqlCodes = new HashSet<>(Arrays.asList(\"YYY\", \"XXX\"));\r\n    final IllegalArgumentException exception = assertThrows(IllegalArgumentException.class, () -> ds.setDisconnectionIgnoreSqlCodes(disconnectionIgnoreSqlCodes));\r\n    assertEquals(\"[XXX] cannot be in both disconnectionSqlCodes and disconnectionIgnoreSqlCodes.\", exception.getMessage());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestBasicDataSource.java",
  "methodName" : "testPoolCloseCheckedException",
  "sourceCode" : "/**\r\n * Verifies correct handling of exceptions generated by the underlying pool as it closes connections in response to BDS#close. Exceptions have to be either\r\n * swallowed by the underlying pool and logged, or propagated and wrapped.\r\n */\r\n@Test\r\nvoid testPoolCloseCheckedException() throws Exception {\r\n    // Allow dirty tricks\r\n    ds.setAccessToUnderlyingConnectionAllowed(true);\r\n    final TesterConnection tc;\r\n    // Get an idle connection into the pool\r\n    try (Connection conn = ds.getConnection()) {\r\n        tc = (TesterConnection) ((DelegatingConnection<?>) conn).getInnermostDelegate();\r\n    }\r\n    // After returning the connection to the pool, bork it.\r\n    // Don't try this at home - bad violation of pool contract!\r\n    tc.setFailure(new SQLException(\"bang\"));\r\n    // Now close Datasource, which will cause tc to be closed, triggering SQLE\r\n    // Pool 2.x swallows and logs exceptions on pool close. Below verifies that\r\n    // Either exceptions get logged or wrapped appropriately.\r\n    try {\r\n        StackMessageLog.lock();\r\n        StackMessageLog.clear();\r\n        ds.close();\r\n        // Exception must have been swallowed by the pool - verify it is logged\r\n        final String message = StackMessageLog.popMessage();\r\n        Assertions.assertNotNull(message);\r\n        assertTrue(message.indexOf(\"bang\") > 0);\r\n    } catch (final SQLException ex) {\r\n        assertTrue(ex.getMessage().indexOf(\"Cannot close\") > 0);\r\n        assertTrue(ex.getCause().getMessage().indexOf(\"bang\") > 0);\r\n    } finally {\r\n        StackMessageLog.unLock();\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestBasicDataSource.java",
  "methodName" : "testPoolCloseRTE",
  "sourceCode" : "@Test\r\nvoid testPoolCloseRTE() throws Exception {\r\n    // RTE version of testPoolCloseCheckedException - see comments there.\r\n    ds.setAccessToUnderlyingConnectionAllowed(true);\r\n    final TesterConnection tc;\r\n    try (Connection conn = ds.getConnection()) {\r\n        tc = (TesterConnection) ((DelegatingConnection<?>) conn).getInnermostDelegate();\r\n    }\r\n    tc.setFailure(new IllegalStateException(\"boom\"));\r\n    try {\r\n        StackMessageLog.lock();\r\n        StackMessageLog.clear();\r\n        ds.close();\r\n        final String message = StackMessageLog.popMessage();\r\n        Assertions.assertNotNull(message);\r\n        assertTrue(message.indexOf(\"boom\") > 0);\r\n    } catch (final IllegalStateException ex) {\r\n        // RTE is not wrapped by BDS#close\r\n        assertTrue(ex.getMessage().indexOf(\"boom\") > 0);\r\n    } finally {\r\n        StackMessageLog.unLock();\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestBasicDataSource.java",
  "methodName" : "testPooling",
  "sourceCode" : "@Override\r\n@Test\r\npublic void testPooling() throws Exception {\r\n    // this also needs access to the underlying connection\r\n    ds.setAccessToUnderlyingConnectionAllowed(true);\r\n    super.testPooling();\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestBasicDataSource.java",
  "methodName" : "testPropertyTestOnReturn",
  "sourceCode" : "/**\r\n * Bugzilla Bug 29054: The BasicDataSource.setTestOnReturn(boolean) is not carried through to the GenericObjectPool variable _testOnReturn.\r\n */\r\n@Test\r\nvoid testPropertyTestOnReturn() throws Exception {\r\n    ds.setValidationQuery(\"select 1 from dual\");\r\n    ds.setTestOnBorrow(false);\r\n    ds.setTestWhileIdle(false);\r\n    ds.setTestOnReturn(true);\r\n    try (Connection conn = ds.getConnection()) {\r\n        assertNotNull(conn);\r\n        assertFalse(ds.getConnectionPool().getTestOnBorrow());\r\n        assertFalse(ds.getConnectionPool().getTestWhileIdle());\r\n        assertTrue(ds.getConnectionPool().getTestOnReturn());\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestBasicDataSource.java",
  "methodName" : "testRestart",
  "sourceCode" : "@Test\r\nvoid testRestart() throws Exception {\r\n    ds.setMaxTotal(2);\r\n    ds.setDurationBetweenEvictionRuns(Duration.ofMillis(100));\r\n    ds.setNumTestsPerEvictionRun(2);\r\n    ds.setMinEvictableIdle(Duration.ofMinutes(1));\r\n    ds.setInitialSize(2);\r\n    ds.setDefaultCatalog(\"foo\");\r\n    try (Connection conn1 = ds.getConnection()) {\r\n        Thread.sleep(200);\r\n        // Now set some property that will not have effect until restart\r\n        ds.setDefaultCatalog(\"bar\");\r\n        ds.setInitialSize(1);\r\n        // restart will load new properties\r\n        ds.restart();\r\n        assertEquals(\"bar\", ds.getDefaultCatalog());\r\n        assertEquals(1, ds.getInitialSize());\r\n        // side effect is to init\r\n        ds.getLogWriter();\r\n        assertEquals(0, ds.getNumActive());\r\n        assertEquals(1, ds.getNumIdle());\r\n    }\r\n    // verify old pool connection is not returned to pool\r\n    assertEquals(1, ds.getNumIdle());\r\n    ds.close();\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestBasicDataSource.java",
  "methodName" : "testRollbackReadOnly",
  "sourceCode" : "/**\r\n * Bugzilla Bug 29055: AutoCommit and ReadOnly The DaffodilDB driver throws an SQLException if trying to commit or rollback a readOnly connection.\r\n */\r\n@Test\r\nvoid testRollbackReadOnly() throws Exception {\r\n    ds.setDefaultReadOnly(Boolean.TRUE);\r\n    ds.setDefaultAutoCommit(Boolean.FALSE);\r\n    try (Connection conn = ds.getConnection()) {\r\n        assertNotNull(conn);\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestBasicDataSource.java",
  "methodName" : "testSetAutoCommitTrueOnClose",
  "sourceCode" : "@Test\r\nvoid testSetAutoCommitTrueOnClose() throws Exception {\r\n    ds.setAccessToUnderlyingConnectionAllowed(true);\r\n    ds.setDefaultAutoCommit(Boolean.FALSE);\r\n    final Connection dconn;\r\n    try (Connection conn = getConnection()) {\r\n        assertNotNull(conn);\r\n        assertFalse(conn.getAutoCommit());\r\n        dconn = ((DelegatingConnection<?>) conn).getInnermostDelegate();\r\n        assertNotNull(dconn);\r\n        assertFalse(dconn.getAutoCommit());\r\n    }\r\n    assertTrue(dconn.getAutoCommit());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestBasicDataSource.java",
  "methodName" : "testSetProperties",
  "sourceCode" : "@Test\r\nvoid testSetProperties() throws Exception {\r\n    // normal\r\n    ds.setConnectionProperties(\"name1=value1;name2=value2;name3=value3\");\r\n    assertEquals(3, ds.getConnectionProperties().size());\r\n    assertEquals(\"value1\", ds.getConnectionProperties().getProperty(\"name1\"));\r\n    assertEquals(\"value2\", ds.getConnectionProperties().getProperty(\"name2\"));\r\n    assertEquals(\"value3\", ds.getConnectionProperties().getProperty(\"name3\"));\r\n    // make sure all properties are replaced\r\n    ds.setConnectionProperties(\"name1=value1;name2=value2\");\r\n    assertEquals(2, ds.getConnectionProperties().size());\r\n    assertEquals(\"value1\", ds.getConnectionProperties().getProperty(\"name1\"));\r\n    assertEquals(\"value2\", ds.getConnectionProperties().getProperty(\"name2\"));\r\n    assertFalse(ds.getConnectionProperties().containsKey(\"name3\"));\r\n    // no value is empty string\r\n    ds.setConnectionProperties(\"name1=value1;name2\");\r\n    assertEquals(2, ds.getConnectionProperties().size());\r\n    assertEquals(\"value1\", ds.getConnectionProperties().getProperty(\"name1\"));\r\n    assertEquals(\"\", ds.getConnectionProperties().getProperty(\"name2\"));\r\n    // no value (with equals) is empty string\r\n    ds.setConnectionProperties(\"name1=value1;name2=\");\r\n    assertEquals(2, ds.getConnectionProperties().size());\r\n    assertEquals(\"value1\", ds.getConnectionProperties().getProperty(\"name1\"));\r\n    assertEquals(\"\", ds.getConnectionProperties().getProperty(\"name2\"));\r\n    // single value\r\n    ds.setConnectionProperties(\"name1=value1\");\r\n    assertEquals(1, ds.getConnectionProperties().size());\r\n    assertEquals(\"value1\", ds.getConnectionProperties().getProperty(\"name1\"));\r\n    // single value with trailing ;\r\n    ds.setConnectionProperties(\"name1=value1;\");\r\n    assertEquals(1, ds.getConnectionProperties().size());\r\n    assertEquals(\"value1\", ds.getConnectionProperties().getProperty(\"name1\"));\r\n    // single value wit no value\r\n    ds.setConnectionProperties(\"name1\");\r\n    assertEquals(1, ds.getConnectionProperties().size());\r\n    assertEquals(\"\", ds.getConnectionProperties().getProperty(\"name1\"));\r\n    // null should throw a NullPointerException\r\n    assertThrows(NullPointerException.class, () -> ds.setConnectionProperties(null));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestBasicDataSource.java",
  "methodName" : "testSetValidationTestProperties",
  "sourceCode" : "@Test\r\nvoid testSetValidationTestProperties() {\r\n    // defaults\r\n    assertTrue(ds.getTestOnBorrow());\r\n    assertFalse(ds.getTestOnReturn());\r\n    assertFalse(ds.getTestWhileIdle());\r\n    ds.setTestOnBorrow(true);\r\n    ds.setTestOnReturn(true);\r\n    ds.setTestWhileIdle(true);\r\n    assertTrue(ds.getTestOnBorrow());\r\n    assertTrue(ds.getTestOnReturn());\r\n    assertTrue(ds.getTestWhileIdle());\r\n    ds.setTestOnBorrow(false);\r\n    ds.setTestOnReturn(false);\r\n    ds.setTestWhileIdle(false);\r\n    assertFalse(ds.getTestOnBorrow());\r\n    assertFalse(ds.getTestOnReturn());\r\n    assertFalse(ds.getTestWhileIdle());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestBasicDataSource.java",
  "methodName" : "testStart",
  "sourceCode" : "@Test\r\nvoid testStart() throws Exception {\r\n    ds.setAccessToUnderlyingConnectionAllowed(true);\r\n    ds.setMaxTotal(2);\r\n    final DelegatingConnection<?> conn1 = (DelegatingConnection<?>) ds.getConnection();\r\n    final DelegatingConnection<?> conn2 = (DelegatingConnection<?>) ds.getConnection();\r\n    final Connection inner1 = conn1.getInnermostDelegate();\r\n    final Connection inner2 = conn2.getInnermostDelegate();\r\n    assertFalse(inner2.isClosed());\r\n    conn2.close();\r\n    assertFalse(inner2.isClosed());\r\n    // One active, one idle in the pool\r\n    ds.close();\r\n    // Idle connection should be physically closed, checked out unaffected\r\n    assertFalse(conn1.isClosed());\r\n    assertTrue(inner2.isClosed());\r\n    assertEquals(0, ds.getNumIdle());\r\n    // Reopen creates a new pool, so we can have three out\r\n    ds.start();\r\n    final Connection conn3 = ds.getConnection();\r\n    final Connection conn4 = ds.getConnection();\r\n    conn3.close();\r\n    conn4.close();\r\n    // Old pool's orphan should get physically closed on return\r\n    conn1.close();\r\n    assertTrue(inner1.isClosed());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestBasicDataSource.java",
  "methodName" : "testStartInitializes",
  "sourceCode" : "@Test\r\nvoid testStartInitializes() throws Exception {\r\n    ds.setInitialSize(2);\r\n    // Note: if we ever move away from lazy init, next two will fail\r\n    assertEquals(0, ds.getNumIdle());\r\n    assertNull(ds.getRegisteredJmxName());\r\n    // Start forces init\r\n    ds.start();\r\n    assertEquals(2, ds.getNumIdle());\r\n    assertNotNull(ds.getRegisteredJmxName());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestBasicDataSource.java",
  "methodName" : "testTransactionIsolationBehavior",
  "sourceCode" : "@Test\r\nvoid testTransactionIsolationBehavior() throws Exception {\r\n    try (final Connection conn = getConnection()) {\r\n        assertNotNull(conn);\r\n        assertEquals(Connection.TRANSACTION_READ_COMMITTED, conn.getTransactionIsolation());\r\n        conn.setTransactionIsolation(Connection.TRANSACTION_READ_UNCOMMITTED);\r\n    }\r\n    final Connection conn2 = getConnection();\r\n    assertEquals(Connection.TRANSACTION_READ_COMMITTED, conn2.getTransactionIsolation());\r\n    final Connection conn3 = getConnection();\r\n    assertEquals(Connection.TRANSACTION_READ_COMMITTED, conn3.getTransactionIsolation());\r\n    conn2.close();\r\n    conn3.close();\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestBasicDataSource.java",
  "methodName" : "testUnwrap",
  "sourceCode" : "@Test\r\nvoid testUnwrap() throws Exception {\r\n    assertSame(ds.unwrap(BasicDataSource.class), ds);\r\n    assertSame(ds.unwrap(AutoCloseable.class), ds);\r\n    assertThrows(SQLException.class, () -> ds.unwrap(String.class));\r\n    assertThrows(SQLException.class, () -> ds.unwrap(null));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestBasicDataSource.java",
  "methodName" : "testValidationQueryTimeoutNegative",
  "sourceCode" : "@Test\r\nvoid testValidationQueryTimeoutNegative() throws Exception {\r\n    ds.setTestOnBorrow(true);\r\n    ds.setTestOnReturn(true);\r\n    ds.setValidationQueryTimeout(Duration.ofSeconds(-1));\r\n    try (final Connection con = ds.getConnection()) {\r\n        // close right away.\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestBasicDataSource.java",
  "methodName" : "testValidationQueryTimeoutSucceed",
  "sourceCode" : "@Test\r\nvoid testValidationQueryTimeoutSucceed() throws Exception {\r\n    ds.setTestOnBorrow(true);\r\n    ds.setTestOnReturn(true);\r\n    // Works for TesterStatement\r\n    ds.setValidationQueryTimeout(Duration.ofMillis(100));\r\n    try (final Connection con = ds.getConnection()) {\r\n        // close right away.\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestBasicDataSource.java",
  "methodName" : "testValidationQueryTimeoutZero",
  "sourceCode" : "@Test\r\nvoid testValidationQueryTimeoutZero() throws Exception {\r\n    ds.setTestOnBorrow(true);\r\n    ds.setTestOnReturn(true);\r\n    ds.setValidationQueryTimeout(Duration.ZERO);\r\n    try (final Connection con = ds.getConnection()) {\r\n        // close right away.\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestBasicDataSource.java",
  "methodName" : "testValidationQueryTimoutFail",
  "sourceCode" : "@Test\r\nvoid testValidationQueryTimoutFail() {\r\n    ds.setTestOnBorrow(true);\r\n    // Too fast for TesterStatement\r\n    ds.setValidationQueryTimeout(Duration.ofSeconds(3));\r\n    final SQLException e = assertThrows(SQLException.class, ds::getConnection);\r\n    assertTrue(e.toString().contains(\"timeout\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestBasicDataSourceFactory.java",
  "methodName" : "testAllProperties",
  "sourceCode" : "@Test\r\nvoid testAllProperties() throws Exception {\r\n    try {\r\n        StackMessageLog.lock();\r\n        StackMessageLog.clear();\r\n        final Reference ref = new Reference(\"javax.sql.DataSource\", BasicDataSourceFactory.class.getName(), null);\r\n        final Properties properties = getTestProperties();\r\n        for (final Entry<Object, Object> entry : properties.entrySet()) {\r\n            ref.add(new StringRefAddr((String) entry.getKey(), (String) entry.getValue()));\r\n        }\r\n        final BasicDataSourceFactory basicDataSourceFactory = new BasicDataSourceFactory();\r\n        try (final BasicDataSource ds = (BasicDataSource) basicDataSourceFactory.getObjectInstance(ref, null, null, null)) {\r\n            checkDataSourceProperties(ds);\r\n            checkConnectionPoolProperties(ds.getConnectionPool());\r\n            final List<String> messages = StackMessageLog.getAll();\r\n            assertEquals(0, messages.size());\r\n        }\r\n    } finally {\r\n        StackMessageLog.clear();\r\n        StackMessageLog.unLock();\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestBasicDataSourceFactory.java",
  "methodName" : "testNoProperties",
  "sourceCode" : "@Test\r\nvoid testNoProperties() throws Exception {\r\n    final Properties properties = new Properties();\r\n    try (final BasicDataSource ds = BasicDataSourceFactory.createDataSource(properties)) {\r\n        assertNotNull(ds);\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestBasicDataSourceFactory.java",
  "methodName" : "testProperties",
  "sourceCode" : "@Test\r\nvoid testProperties() throws Exception {\r\n    try (final BasicDataSource ds = BasicDataSourceFactory.createDataSource(getTestProperties())) {\r\n        checkDataSourceProperties(ds);\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestBasicDataSourceFactory.java",
  "methodName" : "testValidateProperties",
  "sourceCode" : "@Test\r\nvoid testValidateProperties() throws Exception {\r\n    try {\r\n        StackMessageLog.lock();\r\n        StackMessageLog.clear();\r\n        final Reference ref = new Reference(\"javax.sql.DataSource\", BasicDataSourceFactory.class.getName(), null);\r\n        // Unknown\r\n        ref.add(new StringRefAddr(\"foo\", \"bar\"));\r\n        // Changed\r\n        ref.add(new StringRefAddr(\"maxWait\", \"100\"));\r\n        // OK\r\n        ref.add(new StringRefAddr(\"driverClassName\", \"org.apache.commons.dbcp2.TesterDriver\"));\r\n        final BasicDataSourceFactory basicDataSourceFactory = new BasicDataSourceFactory();\r\n        basicDataSourceFactory.getObjectInstance(ref, null, null, null);\r\n        final List<String> messages = StackMessageLog.getAll();\r\n        assertEquals(2, messages.size(), messages.toString());\r\n        for (final String message : messages) {\r\n            if (message.contains(\"maxWait\")) {\r\n                assertTrue(message.contains(\"use maxWaitMillis\"));\r\n            } else {\r\n                assertTrue(message.contains(\"foo\"));\r\n                assertTrue(message.contains(\"Ignoring unknown property\"));\r\n            }\r\n        }\r\n    } finally {\r\n        StackMessageLog.clear();\r\n        StackMessageLog.unLock();\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestBasicDataSourceMXBean.java",
  "methodName" : "testDefaultSchema",
  "sourceCode" : "/**\r\n * Tests the interface defined default method.\r\n */\r\n@Test\r\nvoid testDefaultSchema() {\r\n    assertNull(bean.getDefaultSchema());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestBasicDataSourceMXBean.java",
  "methodName" : "testMXBeanCompliance",
  "sourceCode" : "/**\r\n * Tests if the {@link BasicDataSourceMXBean} interface is a valid MXBean interface.\r\n */\r\n@Test\r\nvoid testMXBeanCompliance() throws OperationsException {\r\n    testMXBeanCompliance(BasicDataSourceMXBean.class);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestConnectionPool.java",
  "methodName" : "testAutoCommitBehavior",
  "sourceCode" : "@Test\r\npublic void testAutoCommitBehavior() throws Exception {\r\n    final Connection conn0 = newConnection();\r\n    assertNotNull(conn0, \"connection should not be null\");\r\n    assertTrue(conn0.getAutoCommit(), \"autocommit should be true for conn0\");\r\n    final Connection conn1 = newConnection();\r\n    assertTrue(conn1.getAutoCommit(), \"autocommit should be true for conn1\");\r\n    conn1.close();\r\n    assertTrue(conn0.getAutoCommit(), \"autocommit should be true for conn0\");\r\n    conn0.setAutoCommit(false);\r\n    assertFalse(conn0.getAutoCommit(), \"autocommit should be false for conn0\");\r\n    conn0.close();\r\n    final Connection conn2 = newConnection();\r\n    assertTrue(conn2.getAutoCommit(), \"autocommit should be true for conn2\");\r\n    final Connection conn3 = newConnection();\r\n    assertTrue(conn3.getAutoCommit(), \"autocommit should be true for conn3\");\r\n    conn2.close();\r\n    conn3.close();\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestConnectionPool.java",
  "methodName" : "testBackPointers",
  "sourceCode" : "@Test\r\nvoid testBackPointers() throws Exception {\r\n    // normal statement\r\n    Connection conn = newConnection();\r\n    assertBackPointers(conn, conn.createStatement());\r\n    conn = newConnection();\r\n    assertBackPointers(conn, conn.createStatement(0, 0));\r\n    conn = newConnection();\r\n    assertBackPointers(conn, conn.createStatement(0, 0, 0));\r\n    // prepared statement\r\n    conn = newConnection();\r\n    assertBackPointers(conn, conn.prepareStatement(\"select * from dual\"));\r\n    conn = newConnection();\r\n    assertBackPointers(conn, conn.prepareStatement(\"select * from dual\", 0));\r\n    conn = newConnection();\r\n    assertBackPointers(conn, conn.prepareStatement(\"select * from dual\", 0, 0));\r\n    conn = newConnection();\r\n    assertBackPointers(conn, conn.prepareStatement(\"select * from dual\", 0, 0, 0));\r\n    conn = newConnection();\r\n    assertBackPointers(conn, conn.prepareStatement(\"select * from dual\", new int[0]));\r\n    conn = newConnection();\r\n    assertBackPointers(conn, conn.prepareStatement(\"select * from dual\", new String[0]));\r\n    // callable statement\r\n    conn = newConnection();\r\n    assertBackPointers(conn, conn.prepareCall(\"select * from dual\"));\r\n    conn = newConnection();\r\n    assertBackPointers(conn, conn.prepareCall(\"select * from dual\", 0, 0));\r\n    conn = newConnection();\r\n    assertBackPointers(conn, conn.prepareCall(\"select * from dual\", 0, 0, 0));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestConnectionPool.java",
  "methodName" : "testCanCloseCallableStatementTwice",
  "sourceCode" : "@Test\r\nvoid testCanCloseCallableStatementTwice() throws Exception {\r\n    try (Connection conn = newConnection()) {\r\n        assertNotNull(conn);\r\n        assertFalse(conn.isClosed());\r\n        for (int i = 0; i < 2; i++) {\r\n            // loop to show we *can* close again once we've borrowed it from the pool again\r\n            final PreparedStatement stmt = conn.prepareCall(\"select * from dual\");\r\n            assertNotNull(stmt);\r\n            assertFalse(isClosed(stmt));\r\n            stmt.close();\r\n            assertTrue(isClosed(stmt));\r\n            stmt.close();\r\n            assertTrue(isClosed(stmt));\r\n            stmt.close();\r\n            assertTrue(isClosed(stmt));\r\n        }\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestConnectionPool.java",
  "methodName" : "testCanCloseConnectionTwice",
  "sourceCode" : "/**\r\n * Verify the close method can be called multiple times on a single connection without an exception being thrown.\r\n */\r\n@Test\r\nvoid testCanCloseConnectionTwice() throws Exception {\r\n    for (int i = 0; i < getMaxTotal(); i++) {\r\n        // loop to show we *can* close again once we've borrowed it from the pool again\r\n        final Connection conn = newConnection();\r\n        assertNotNull(conn);\r\n        assertFalse(conn.isClosed());\r\n        conn.close();\r\n        assertTrue(conn.isClosed());\r\n        conn.close();\r\n        assertTrue(conn.isClosed());\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestConnectionPool.java",
  "methodName" : "testCanClosePreparedStatementTwice",
  "sourceCode" : "@Test\r\nvoid testCanClosePreparedStatementTwice() throws Exception {\r\n    try (Connection conn = newConnection()) {\r\n        assertNotNull(conn);\r\n        assertFalse(conn.isClosed());\r\n        for (int i = 0; i < 2; i++) {\r\n            // loop to show we *can* close again once we've borrowed it from the pool again\r\n            final PreparedStatement stmt = conn.prepareStatement(\"select * from dual\");\r\n            assertNotNull(stmt);\r\n            assertFalse(isClosed(stmt));\r\n            stmt.close();\r\n            assertTrue(isClosed(stmt));\r\n            stmt.close();\r\n            assertTrue(isClosed(stmt));\r\n            stmt.close();\r\n            assertTrue(isClosed(stmt));\r\n        }\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestConnectionPool.java",
  "methodName" : "testCanCloseResultSetTwice",
  "sourceCode" : "@Test\r\nvoid testCanCloseResultSetTwice() throws Exception {\r\n    try (Connection conn = newConnection()) {\r\n        assertNotNull(conn);\r\n        assertFalse(conn.isClosed());\r\n        for (int i = 0; i < 2; i++) {\r\n            // loop to show we *can* close again once we've borrowed it from the pool again\r\n            final PreparedStatement stmt = conn.prepareStatement(\"select * from dual\");\r\n            assertNotNull(stmt);\r\n            final ResultSet rset = stmt.executeQuery();\r\n            assertNotNull(rset);\r\n            assertFalse(isClosed(rset));\r\n            rset.close();\r\n            assertTrue(isClosed(rset));\r\n            rset.close();\r\n            assertTrue(isClosed(rset));\r\n            rset.close();\r\n            assertTrue(isClosed(rset));\r\n        }\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestConnectionPool.java",
  "methodName" : "testCanCloseStatementTwice",
  "sourceCode" : "@Test\r\nvoid testCanCloseStatementTwice() throws Exception {\r\n    final Connection conn = newConnection();\r\n    assertNotNull(conn);\r\n    assertFalse(conn.isClosed());\r\n    for (int i = 0; i < 2; i++) {\r\n        // loop to show we *can* close again once we've borrowed it from the pool again\r\n        final Statement stmt = conn.createStatement();\r\n        assertNotNull(stmt);\r\n        assertFalse(isClosed(stmt));\r\n        stmt.close();\r\n        assertTrue(isClosed(stmt));\r\n        stmt.close();\r\n        assertTrue(isClosed(stmt));\r\n        stmt.close();\r\n        assertTrue(isClosed(stmt));\r\n    }\r\n    conn.close();\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestConnectionPool.java",
  "methodName" : "testClearWarnings",
  "sourceCode" : "@Test\r\npublic void testClearWarnings() throws Exception {\r\n    final Connection[] c = new Connection[getMaxTotal()];\r\n    for (int i = 0; i < c.length; i++) {\r\n        c[i] = newConnection();\r\n        assertNotNull(c[i]);\r\n        // generate SQLWarning on connection\r\n        try (CallableStatement cs = c[i].prepareCall(\"warning\")) {\r\n            // empty\r\n        }\r\n    }\r\n    for (final Connection element : c) {\r\n        assertNotNull(element.getWarnings());\r\n    }\r\n    for (final Connection element : c) {\r\n        element.close();\r\n    }\r\n    for (int i = 0; i < c.length; i++) {\r\n        c[i] = newConnection();\r\n    }\r\n    for (final Connection element : c) {\r\n        // warnings should have been cleared by putting the connection back in the pool\r\n        assertNull(element.getWarnings());\r\n    }\r\n    for (final Connection element : c) {\r\n        element.close();\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestConnectionPool.java",
  "methodName" : "testClosing",
  "sourceCode" : "@Test\r\npublic void testClosing() throws Exception {\r\n    final Connection[] c = new Connection[getMaxTotal()];\r\n    // open the maximum connections\r\n    for (int i = 0; i < c.length; i++) {\r\n        c[i] = newConnection();\r\n    }\r\n    // close one of the connections\r\n    c[0].close();\r\n    assertTrue(c[0].isClosed());\r\n    // get a new connection\r\n    c[0] = newConnection();\r\n    for (final Connection element : c) {\r\n        element.close();\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestConnectionPool.java",
  "methodName" : "testConnectionsAreDistinct",
  "sourceCode" : "/**\r\n * \"https://issues.apache.org/bugzilla/show_bug.cgi?id=12400\"\r\n */\r\n@Test\r\npublic void testConnectionsAreDistinct() throws Exception {\r\n    final Connection[] conn = new Connection[getMaxTotal()];\r\n    for (int i = 0; i < conn.length; i++) {\r\n        conn[i] = newConnection();\r\n        for (int j = 0; j < i; j++) {\r\n            assertNotSame(conn[j], conn[i]);\r\n            assertNotEquals(conn[j], conn[i]);\r\n        }\r\n    }\r\n    for (final Connection element : conn) {\r\n        element.close();\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestConnectionPool.java",
  "methodName" : "testHashCode",
  "sourceCode" : "// Bugzilla Bug 26966: Connectionpool's connections always returns same\r\n@Test\r\npublic void testHashCode() throws Exception {\r\n    final Connection conn1 = newConnection();\r\n    assertNotNull(conn1);\r\n    final Connection conn2 = newConnection();\r\n    assertNotNull(conn2);\r\n    assertTrue(conn1.hashCode() != conn2.hashCode());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestConnectionPool.java",
  "methodName" : "testHashing",
  "sourceCode" : "/**\r\n * DBCP-128: BasicDataSource.getConnection() Connections don't work as hashtable keys\r\n */\r\n@Test\r\nvoid testHashing() throws Exception {\r\n    final Connection con = getConnection();\r\n    final Hashtable<Connection, String> hash = new Hashtable<>();\r\n    hash.put(con, \"test\");\r\n    assertEquals(\"test\", hash.get(con));\r\n    assertTrue(hash.containsKey(con));\r\n    assertTrue(hash.contains(\"test\"));\r\n    hash.clear();\r\n    con.close();\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestConnectionPool.java",
  "methodName" : "testIsClosed",
  "sourceCode" : "@Test\r\nvoid testIsClosed() throws Exception {\r\n    for (int i = 0; i < getMaxTotal(); i++) {\r\n        @SuppressWarnings(\"resource\")\r\n        final Connection conn = newConnection();\r\n        try {\r\n            assertNotNull(conn);\r\n            assertFalse(conn.isClosed());\r\n            try (PreparedStatement stmt = conn.prepareStatement(\"select * from dual\")) {\r\n                assertNotNull(stmt);\r\n                try (ResultSet rset = stmt.executeQuery()) {\r\n                    assertNotNull(rset);\r\n                    assertTrue(rset.next());\r\n                }\r\n            }\r\n        } finally {\r\n            conn.close();\r\n        }\r\n        assertTrue(conn.isClosed());\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestConnectionPool.java",
  "methodName" : "testMaxTotal",
  "sourceCode" : "@Test\r\npublic void testMaxTotal() throws Exception {\r\n    final Connection[] c = new Connection[getMaxTotal()];\r\n    for (int i = 0; i < c.length; i++) {\r\n        c[i] = newConnection();\r\n        assertNotNull(c[i]);\r\n    }\r\n    // should only be able to open 10 connections, so this test should\r\n    // throw an exception\r\n    assertThrows(SQLException.class, this::newConnection);\r\n    for (final Connection element : c) {\r\n        element.close();\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestConnectionPool.java",
  "methodName" : "testNoRsetClose",
  "sourceCode" : "// Bugzilla Bug 24966: NullPointer with Oracle 9 driver\r\n// wrong order of passivate/close when a rset isn't closed\r\n@Test\r\nvoid testNoRsetClose() throws Exception {\r\n    try (Connection conn = newConnection()) {\r\n        assertNotNull(conn);\r\n        try (PreparedStatement stmt = conn.prepareStatement(\"test\")) {\r\n            assertNotNull(stmt);\r\n            final ResultSet rset = stmt.getResultSet();\r\n            assertNotNull(rset);\r\n            // forget to close the resultset: rset.close();\r\n        }\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestConnectionPool.java",
  "methodName" : "testOpening",
  "sourceCode" : "@Test\r\npublic void testOpening() throws Exception {\r\n    final Connection[] c = new Connection[getMaxTotal()];\r\n    // test that opening new connections is not closing previous\r\n    for (int i = 0; i < c.length; i++) {\r\n        c[i] = newConnection();\r\n        assertNotNull(c[i]);\r\n        for (int j = 0; j <= i; j++) {\r\n            assertFalse(c[j].isClosed());\r\n        }\r\n    }\r\n    for (final Connection element : c) {\r\n        element.close();\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestConnectionPool.java",
  "methodName" : "testPooling",
  "sourceCode" : "@Test\r\nvoid testPooling() throws Exception {\r\n    // Grab a maximal set of open connections from the pool\r\n    final Connection[] c = new Connection[getMaxTotal()];\r\n    final Connection[] u = new Connection[getMaxTotal()];\r\n    for (int i = 0; i < c.length; i++) {\r\n        c[i] = newConnection();\r\n        if (!(c[i] instanceof DelegatingConnection)) {\r\n            for (int j = 0; j <= i; j++) {\r\n                c[j].close();\r\n            }\r\n            // skip this test\r\n            return;\r\n        }\r\n        u[i] = ((DelegatingConnection<?>) c[i]).getInnermostDelegate();\r\n    }\r\n    // Close connections one at a time and get new ones, making sure\r\n    // the new ones come from the pool\r\n    for (final Connection element : c) {\r\n        element.close();\r\n        try (Connection con = newConnection()) {\r\n            final Connection underCon = ((DelegatingConnection<?>) con).getInnermostDelegate();\r\n            assertNotNull(underCon, \"Failed to get connection\");\r\n            boolean found = false;\r\n            for (int j = 0; j < c.length; j++) {\r\n                if (underCon == u[j]) {\r\n                    found = true;\r\n                    break;\r\n                }\r\n            }\r\n            assertTrue(found, \"New connection not from pool\");\r\n        }\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestConnectionPool.java",
  "methodName" : "testPrepareStatementOptions",
  "sourceCode" : "// Bugzilla Bug 24328: PooledConnectionImpl ignores resultsetType\r\n// and Concurrency if statement pooling is not enabled\r\n// https://issues.apache.org/bugzilla/show_bug.cgi?id=24328\r\n@Test\r\nvoid testPrepareStatementOptions() throws Exception {\r\n    try (Connection conn = newConnection()) {\r\n        assertNotNull(conn);\r\n        try (PreparedStatement stmt = conn.prepareStatement(\"select * from dual\", ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE)) {\r\n            assertNotNull(stmt);\r\n            try (ResultSet rset = stmt.executeQuery()) {\r\n                assertNotNull(rset);\r\n                assertTrue(rset.next());\r\n                assertEquals(ResultSet.TYPE_SCROLL_SENSITIVE, rset.getType());\r\n                assertEquals(ResultSet.CONCUR_UPDATABLE, rset.getConcurrency());\r\n            }\r\n        }\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestConnectionPool.java",
  "methodName" : "testRepeatedBorrowAndReturn",
  "sourceCode" : "@Test\r\nvoid testRepeatedBorrowAndReturn() throws Exception {\r\n    for (int i = 0; i < 100; i++) {\r\n        try (Connection conn = newConnection()) {\r\n            assertNotNull(conn);\r\n            try (PreparedStatement stmt = conn.prepareStatement(\"select * from dual\")) {\r\n                assertNotNull(stmt);\r\n                try (ResultSet rset = stmt.executeQuery()) {\r\n                    assertNotNull(rset);\r\n                    assertTrue(rset.next());\r\n                }\r\n            }\r\n        }\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestConnectionPool.java",
  "methodName" : "testSimple",
  "sourceCode" : "@Test\r\npublic void testSimple() throws Exception {\r\n    try (Connection conn = newConnection()) {\r\n        assertNotNull(conn);\r\n        try (PreparedStatement stmt = conn.prepareStatement(\"select * from dual\")) {\r\n            assertNotNull(stmt);\r\n            try (ResultSet rset = stmt.executeQuery()) {\r\n                assertNotNull(rset);\r\n                assertTrue(rset.next());\r\n            }\r\n        }\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestConnectionPool.java",
  "methodName" : "testSimple2",
  "sourceCode" : "@Test\r\npublic void testSimple2() throws Exception {\r\n    @SuppressWarnings(\"resource\")\r\n    final Connection conn = newConnection();\r\n    assertNotNull(conn);\r\n    try {\r\n        try (PreparedStatement stmt = conn.prepareStatement(\"select * from dual\")) {\r\n            assertNotNull(stmt);\r\n            try (ResultSet rset = stmt.executeQuery()) {\r\n                assertNotNull(rset);\r\n                assertTrue(rset.next());\r\n            }\r\n        }\r\n        try (PreparedStatement stmt = conn.prepareStatement(\"select * from dual\")) {\r\n            assertNotNull(stmt);\r\n            try (ResultSet rset = stmt.executeQuery()) {\r\n                assertNotNull(rset);\r\n                assertTrue(rset.next());\r\n            }\r\n        }\r\n    } finally {\r\n        conn.close();\r\n    }\r\n    assertThrows(SQLException.class, conn::createStatement, \"Can't use closed connections\");\r\n    try (Connection conn2 = newConnection()) {\r\n        assertNotNull(conn2);\r\n        {\r\n            try (PreparedStatement stmt = conn2.prepareStatement(\"select * from dual\")) {\r\n                assertNotNull(stmt);\r\n                try (ResultSet rset = stmt.executeQuery()) {\r\n                    assertNotNull(rset);\r\n                    assertTrue(rset.next());\r\n                }\r\n            }\r\n        }\r\n        {\r\n            try (PreparedStatement stmt = conn2.prepareStatement(\"select * from dual\")) {\r\n                assertNotNull(stmt);\r\n                try (ResultSet rset = stmt.executeQuery()) {\r\n                    assertNotNull(rset);\r\n                    assertTrue(rset.next());\r\n                }\r\n            }\r\n        }\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestConnectionPool.java",
  "methodName" : "testThreaded",
  "sourceCode" : "@Test\r\nvoid testThreaded() {\r\n    final TestThread[] threads = new TestThread[getMaxTotal()];\r\n    for (int i = 0; i < threads.length; i++) {\r\n        threads[i] = new TestThread(50, 50);\r\n        final Thread t = new Thread(threads[i]);\r\n        t.start();\r\n    }\r\n    for (int i = 0; i < threads.length; i++) {\r\n        while (!threads[i].complete()) {\r\n            try {\r\n                Thread.sleep(100L);\r\n            } catch (final Exception e) {\r\n                // ignored\r\n            }\r\n        }\r\n        if (threads[i] != null && threads[i].failed()) {\r\n            fail(\"Thread failed: \" + i);\r\n        }\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestConstants.java",
  "methodName" : "testConstants",
  "sourceCode" : "@Test\r\nvoid testConstants() {\r\n    assertNotNull(new Constants());\r\n    assertEquals(\",connectionpool=\", Constants.JMX_CONNECTION_POOL_BASE_EXT);\r\n    assertEquals(\"connections\", Constants.JMX_CONNECTION_POOL_PREFIX);\r\n    assertEquals(\",connectionpool=connections,connection=\", Constants.JMX_CONNECTION_BASE_EXT);\r\n    assertEquals(\",connectionpool=connections,connection=\", Constants.JMX_STATEMENT_POOL_BASE_EXT);\r\n    assertEquals(\",statementpool=statements\", Constants.JMX_STATEMENT_POOL_PREFIX);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestDataSourceConnectionFactory.java",
  "methodName" : "testCredentials",
  "sourceCode" : "@Test\r\nvoid testCredentials() throws SQLException {\r\n    final DataSourceConnectionFactory factory = new DataSourceConnectionFactory(datasource, \"foo\", \"bar\");\r\n    try (Connection conn = factory.createConnection()) {\r\n        assertEquals(\"foo\", ((TesterConnection) conn).getUserName());\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestDataSourceConnectionFactory.java",
  "methodName" : "testDefaultValues",
  "sourceCode" : "@Test\r\nvoid testDefaultValues() throws SQLException {\r\n    try (Connection conn = factory.createConnection()) {\r\n        assertNull(((TesterConnection) conn).getUserName());\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestDataSourceConnectionFactory.java",
  "methodName" : "testEmptyPassword",
  "sourceCode" : "@Test\r\nvoid testEmptyPassword() throws SQLException {\r\n    final DataSourceConnectionFactory factory = new DataSourceConnectionFactory(datasource, \"foo\", (char[]) null);\r\n    try (Connection conn = factory.createConnection()) {\r\n        assertEquals(\"foo\", ((TesterConnection) conn).getUserName());\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestDataSourceConnectionFactory.java",
  "methodName" : "testEmptyUser",
  "sourceCode" : "@Test\r\nvoid testEmptyUser() throws SQLException {\r\n    final DataSourceConnectionFactory factory = new DataSourceConnectionFactory(datasource, null, new char[] { 'a' });\r\n    try (Connection conn = factory.createConnection()) {\r\n        assertNull(((TesterConnection) conn).getUserName());\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestDelegatingCallableStatement.java",
  "methodName" : "testExecuteQueryReturnsNotNull",
  "sourceCode" : "@Test\r\nvoid testExecuteQueryReturnsNotNull() throws Exception {\r\n    final TesterCallableStatement delegateStmt = new TesterCallableStatement(conn, \"select * from foo\");\r\n    obj = new DelegatingCallableStatement(new DelegatingConnection<>(conn), delegateStmt);\r\n    assertNotNull(obj.executeQuery());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestDelegatingCallableStatement.java",
  "methodName" : "testExecuteQueryReturnsNull",
  "sourceCode" : "@Test\r\nvoid testExecuteQueryReturnsNull() throws Exception {\r\n    final TesterCallableStatement delegateStmt = new TesterCallableStatement(conn, \"null\");\r\n    obj = new DelegatingCallableStatement(new DelegatingConnection<>(conn), delegateStmt);\r\n    assertNull(obj.executeQuery());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestDelegatingCallableStatement.java",
  "methodName" : "testGetArrayInteger",
  "sourceCode" : "@Test\r\nvoid testGetArrayInteger() throws Exception {\r\n    try {\r\n        delegate.getArray(1);\r\n    } catch (final SQLException e) {\r\n    }\r\n    verify(obj, times(1)).getArray(1);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestDelegatingCallableStatement.java",
  "methodName" : "testGetArrayString",
  "sourceCode" : "@Test\r\nvoid testGetArrayString() throws Exception {\r\n    try {\r\n        delegate.getArray(\"foo\");\r\n    } catch (final SQLException e) {\r\n    }\r\n    verify(obj, times(1)).getArray(\"foo\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestDelegatingCallableStatement.java",
  "methodName" : "testGetBigDecimalInteger",
  "sourceCode" : "@Test\r\nvoid testGetBigDecimalInteger() throws Exception {\r\n    try {\r\n        delegate.getBigDecimal(1);\r\n    } catch (final SQLException e) {\r\n    }\r\n    verify(obj, times(1)).getBigDecimal(1);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestDelegatingCallableStatement.java",
  "methodName" : "testGetBigDecimalIntegerInteger",
  "sourceCode" : "@Test\r\nvoid testGetBigDecimalIntegerInteger() throws Exception {\r\n    try {\r\n        delegate.getBigDecimal(1, 1);\r\n    } catch (final SQLException e) {\r\n    }\r\n    verify(obj, times(1)).getBigDecimal(1, 1);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestDelegatingCallableStatement.java",
  "methodName" : "testGetBigDecimalString",
  "sourceCode" : "@Test\r\nvoid testGetBigDecimalString() throws Exception {\r\n    try {\r\n        delegate.getBigDecimal(\"foo\");\r\n    } catch (final SQLException e) {\r\n    }\r\n    verify(obj, times(1)).getBigDecimal(\"foo\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestDelegatingCallableStatement.java",
  "methodName" : "testGetBlobInteger",
  "sourceCode" : "@Test\r\nvoid testGetBlobInteger() throws Exception {\r\n    try {\r\n        delegate.getBlob(1);\r\n    } catch (final SQLException e) {\r\n    }\r\n    verify(obj, times(1)).getBlob(1);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestDelegatingCallableStatement.java",
  "methodName" : "testGetBlobString",
  "sourceCode" : "@Test\r\nvoid testGetBlobString() throws Exception {\r\n    try {\r\n        delegate.getBlob(\"foo\");\r\n    } catch (final SQLException e) {\r\n    }\r\n    verify(obj, times(1)).getBlob(\"foo\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestDelegatingCallableStatement.java",
  "methodName" : "testGetBooleanInteger",
  "sourceCode" : "@Test\r\nvoid testGetBooleanInteger() throws Exception {\r\n    try {\r\n        delegate.getBoolean(1);\r\n    } catch (final SQLException e) {\r\n    }\r\n    verify(obj, times(1)).getBoolean(1);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestDelegatingCallableStatement.java",
  "methodName" : "testGetBooleanString",
  "sourceCode" : "@Test\r\nvoid testGetBooleanString() throws Exception {\r\n    try {\r\n        delegate.getBoolean(\"foo\");\r\n    } catch (final SQLException e) {\r\n    }\r\n    verify(obj, times(1)).getBoolean(\"foo\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestDelegatingCallableStatement.java",
  "methodName" : "testGetByteInteger",
  "sourceCode" : "@Test\r\nvoid testGetByteInteger() throws Exception {\r\n    try {\r\n        delegate.getByte(1);\r\n    } catch (final SQLException e) {\r\n    }\r\n    verify(obj, times(1)).getByte(1);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestDelegatingCallableStatement.java",
  "methodName" : "testGetBytesInteger",
  "sourceCode" : "@Test\r\nvoid testGetBytesInteger() throws Exception {\r\n    try {\r\n        delegate.getBytes(1);\r\n    } catch (final SQLException e) {\r\n    }\r\n    verify(obj, times(1)).getBytes(1);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestDelegatingCallableStatement.java",
  "methodName" : "testGetBytesString",
  "sourceCode" : "@Test\r\nvoid testGetBytesString() throws Exception {\r\n    try {\r\n        delegate.getBytes(\"foo\");\r\n    } catch (final SQLException e) {\r\n    }\r\n    verify(obj, times(1)).getBytes(\"foo\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestDelegatingCallableStatement.java",
  "methodName" : "testGetByteString",
  "sourceCode" : "@Test\r\nvoid testGetByteString() throws Exception {\r\n    try {\r\n        delegate.getByte(\"foo\");\r\n    } catch (final SQLException e) {\r\n    }\r\n    verify(obj, times(1)).getByte(\"foo\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestDelegatingCallableStatement.java",
  "methodName" : "testGetCharacterStreamInteger",
  "sourceCode" : "@Test\r\nvoid testGetCharacterStreamInteger() throws Exception {\r\n    try {\r\n        delegate.getCharacterStream(1);\r\n    } catch (final SQLException e) {\r\n    }\r\n    verify(obj, times(1)).getCharacterStream(1);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestDelegatingCallableStatement.java",
  "methodName" : "testGetCharacterStreamString",
  "sourceCode" : "@Test\r\nvoid testGetCharacterStreamString() throws Exception {\r\n    try {\r\n        delegate.getCharacterStream(\"foo\");\r\n    } catch (final SQLException e) {\r\n    }\r\n    verify(obj, times(1)).getCharacterStream(\"foo\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestDelegatingCallableStatement.java",
  "methodName" : "testGetClobInteger",
  "sourceCode" : "@Test\r\nvoid testGetClobInteger() throws Exception {\r\n    try {\r\n        delegate.getClob(1);\r\n    } catch (final SQLException e) {\r\n    }\r\n    verify(obj, times(1)).getClob(1);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestDelegatingCallableStatement.java",
  "methodName" : "testGetClobString",
  "sourceCode" : "@Test\r\nvoid testGetClobString() throws Exception {\r\n    try {\r\n        delegate.getClob(\"foo\");\r\n    } catch (final SQLException e) {\r\n    }\r\n    verify(obj, times(1)).getClob(\"foo\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestDelegatingCallableStatement.java",
  "methodName" : "testGetDateInteger",
  "sourceCode" : "@Test\r\nvoid testGetDateInteger() throws Exception {\r\n    try {\r\n        delegate.getDate(1);\r\n    } catch (final SQLException e) {\r\n    }\r\n    verify(obj, times(1)).getDate(1);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestDelegatingCallableStatement.java",
  "methodName" : "testGetDateIntegerCalendar",
  "sourceCode" : "@Test\r\nvoid testGetDateIntegerCalendar() throws Exception {\r\n    try {\r\n        delegate.getDate(1, (java.util.Calendar) null);\r\n    } catch (final SQLException e) {\r\n    }\r\n    verify(obj, times(1)).getDate(1, (java.util.Calendar) null);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestDelegatingCallableStatement.java",
  "methodName" : "testGetDateString",
  "sourceCode" : "@Test\r\nvoid testGetDateString() throws Exception {\r\n    try {\r\n        delegate.getDate(\"foo\");\r\n    } catch (final SQLException e) {\r\n    }\r\n    verify(obj, times(1)).getDate(\"foo\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestDelegatingCallableStatement.java",
  "methodName" : "testGetDateStringCalendar",
  "sourceCode" : "@Test\r\nvoid testGetDateStringCalendar() throws Exception {\r\n    try {\r\n        delegate.getDate(\"foo\", (java.util.Calendar) null);\r\n    } catch (final SQLException e) {\r\n    }\r\n    verify(obj, times(1)).getDate(\"foo\", (java.util.Calendar) null);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestDelegatingCallableStatement.java",
  "methodName" : "testGetDelegate",
  "sourceCode" : "@Test\r\nvoid testGetDelegate() throws Exception {\r\n    final TesterCallableStatement delegateStmt = new TesterCallableStatement(conn, \"select * from foo\");\r\n    obj = new DelegatingCallableStatement(new DelegatingConnection<>(conn), delegateStmt);\r\n    assertEquals(delegateStmt, ((DelegatingCallableStatement) obj).getDelegate());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestDelegatingCallableStatement.java",
  "methodName" : "testGetDoubleInteger",
  "sourceCode" : "@Test\r\nvoid testGetDoubleInteger() throws Exception {\r\n    try {\r\n        delegate.getDouble(1);\r\n    } catch (final SQLException e) {\r\n    }\r\n    verify(obj, times(1)).getDouble(1);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestDelegatingCallableStatement.java",
  "methodName" : "testGetDoubleString",
  "sourceCode" : "@Test\r\nvoid testGetDoubleString() throws Exception {\r\n    try {\r\n        delegate.getDouble(\"foo\");\r\n    } catch (final SQLException e) {\r\n    }\r\n    verify(obj, times(1)).getDouble(\"foo\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestDelegatingCallableStatement.java",
  "methodName" : "testGetFloatInteger",
  "sourceCode" : "@Test\r\nvoid testGetFloatInteger() throws Exception {\r\n    try {\r\n        delegate.getFloat(1);\r\n    } catch (final SQLException e) {\r\n    }\r\n    verify(obj, times(1)).getFloat(1);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestDelegatingCallableStatement.java",
  "methodName" : "testGetFloatString",
  "sourceCode" : "@Test\r\nvoid testGetFloatString() throws Exception {\r\n    try {\r\n        delegate.getFloat(\"foo\");\r\n    } catch (final SQLException e) {\r\n    }\r\n    verify(obj, times(1)).getFloat(\"foo\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestDelegatingCallableStatement.java",
  "methodName" : "testGetIntInteger",
  "sourceCode" : "@Test\r\nvoid testGetIntInteger() throws Exception {\r\n    try {\r\n        delegate.getInt(1);\r\n    } catch (final SQLException e) {\r\n    }\r\n    verify(obj, times(1)).getInt(1);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestDelegatingCallableStatement.java",
  "methodName" : "testGetIntString",
  "sourceCode" : "@Test\r\nvoid testGetIntString() throws Exception {\r\n    try {\r\n        delegate.getInt(\"foo\");\r\n    } catch (final SQLException e) {\r\n    }\r\n    verify(obj, times(1)).getInt(\"foo\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestDelegatingCallableStatement.java",
  "methodName" : "testGetLongInteger",
  "sourceCode" : "@Test\r\nvoid testGetLongInteger() throws Exception {\r\n    try {\r\n        delegate.getLong(1);\r\n    } catch (final SQLException e) {\r\n    }\r\n    verify(obj, times(1)).getLong(1);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestDelegatingCallableStatement.java",
  "methodName" : "testGetLongString",
  "sourceCode" : "@Test\r\nvoid testGetLongString() throws Exception {\r\n    try {\r\n        delegate.getLong(\"foo\");\r\n    } catch (final SQLException e) {\r\n    }\r\n    verify(obj, times(1)).getLong(\"foo\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestDelegatingCallableStatement.java",
  "methodName" : "testGetNCharacterStreamInteger",
  "sourceCode" : "@Test\r\nvoid testGetNCharacterStreamInteger() throws Exception {\r\n    try {\r\n        delegate.getNCharacterStream(1);\r\n    } catch (final SQLException e) {\r\n    }\r\n    verify(obj, times(1)).getNCharacterStream(1);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestDelegatingCallableStatement.java",
  "methodName" : "testGetNCharacterStreamString",
  "sourceCode" : "@Test\r\nvoid testGetNCharacterStreamString() throws Exception {\r\n    try {\r\n        delegate.getNCharacterStream(\"foo\");\r\n    } catch (final SQLException e) {\r\n    }\r\n    verify(obj, times(1)).getNCharacterStream(\"foo\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestDelegatingCallableStatement.java",
  "methodName" : "testGetNClobInteger",
  "sourceCode" : "@Test\r\nvoid testGetNClobInteger() throws Exception {\r\n    try {\r\n        delegate.getNClob(1);\r\n    } catch (final SQLException e) {\r\n    }\r\n    verify(obj, times(1)).getNClob(1);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestDelegatingCallableStatement.java",
  "methodName" : "testGetNClobString",
  "sourceCode" : "@Test\r\nvoid testGetNClobString() throws Exception {\r\n    try {\r\n        delegate.getNClob(\"foo\");\r\n    } catch (final SQLException e) {\r\n    }\r\n    verify(obj, times(1)).getNClob(\"foo\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestDelegatingCallableStatement.java",
  "methodName" : "testGetNStringInteger",
  "sourceCode" : "@Test\r\nvoid testGetNStringInteger() throws Exception {\r\n    try {\r\n        delegate.getNString(1);\r\n    } catch (final SQLException e) {\r\n    }\r\n    verify(obj, times(1)).getNString(1);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestDelegatingCallableStatement.java",
  "methodName" : "testGetNStringString",
  "sourceCode" : "@Test\r\nvoid testGetNStringString() throws Exception {\r\n    try {\r\n        delegate.getNString(\"foo\");\r\n    } catch (final SQLException e) {\r\n    }\r\n    verify(obj, times(1)).getNString(\"foo\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestDelegatingCallableStatement.java",
  "methodName" : "testGetObjectInteger",
  "sourceCode" : "@Test\r\nvoid testGetObjectInteger() throws Exception {\r\n    try {\r\n        delegate.getObject(1);\r\n    } catch (final SQLException e) {\r\n    }\r\n    verify(obj, times(1)).getObject(1);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestDelegatingCallableStatement.java",
  "methodName" : "testGetObjectIntegerClass",
  "sourceCode" : "@Test\r\nvoid testGetObjectIntegerClass() throws Exception {\r\n    try {\r\n        delegate.getObject(1, Object.class);\r\n    } catch (final SQLException e) {\r\n    }\r\n    verify(obj, times(1)).getObject(1, Object.class);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestDelegatingCallableStatement.java",
  "methodName" : "testGetObjectIntegerMap",
  "sourceCode" : "@Test\r\nvoid testGetObjectIntegerMap() throws Exception {\r\n    try {\r\n        delegate.getObject(1, (java.util.Map) null);\r\n    } catch (final SQLException e) {\r\n    }\r\n    verify(obj, times(1)).getObject(1, (java.util.Map) null);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestDelegatingCallableStatement.java",
  "methodName" : "testGetObjectString",
  "sourceCode" : "@Test\r\nvoid testGetObjectString() throws Exception {\r\n    try {\r\n        delegate.getObject(\"foo\");\r\n    } catch (final SQLException e) {\r\n    }\r\n    verify(obj, times(1)).getObject(\"foo\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestDelegatingCallableStatement.java",
  "methodName" : "testGetObjectStringClass",
  "sourceCode" : "@Test\r\nvoid testGetObjectStringClass() throws Exception {\r\n    try {\r\n        delegate.getObject(\"foo\", Object.class);\r\n    } catch (final SQLException e) {\r\n    }\r\n    verify(obj, times(1)).getObject(\"foo\", Object.class);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestDelegatingCallableStatement.java",
  "methodName" : "testGetObjectStringMap",
  "sourceCode" : "@Test\r\nvoid testGetObjectStringMap() throws Exception {\r\n    try {\r\n        delegate.getObject(\"foo\", (java.util.Map) null);\r\n    } catch (final SQLException e) {\r\n    }\r\n    verify(obj, times(1)).getObject(\"foo\", (java.util.Map) null);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestDelegatingCallableStatement.java",
  "methodName" : "testGetRefInteger",
  "sourceCode" : "@Test\r\nvoid testGetRefInteger() throws Exception {\r\n    try {\r\n        delegate.getRef(1);\r\n    } catch (final SQLException e) {\r\n    }\r\n    verify(obj, times(1)).getRef(1);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestDelegatingCallableStatement.java",
  "methodName" : "testGetRefString",
  "sourceCode" : "@Test\r\nvoid testGetRefString() throws Exception {\r\n    try {\r\n        delegate.getRef(\"foo\");\r\n    } catch (final SQLException e) {\r\n    }\r\n    verify(obj, times(1)).getRef(\"foo\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestDelegatingCallableStatement.java",
  "methodName" : "testGetRowIdInteger",
  "sourceCode" : "@Test\r\nvoid testGetRowIdInteger() throws Exception {\r\n    try {\r\n        delegate.getRowId(1);\r\n    } catch (final SQLException e) {\r\n    }\r\n    verify(obj, times(1)).getRowId(1);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestDelegatingCallableStatement.java",
  "methodName" : "testGetRowIdString",
  "sourceCode" : "@Test\r\nvoid testGetRowIdString() throws Exception {\r\n    try {\r\n        delegate.getRowId(\"foo\");\r\n    } catch (final SQLException e) {\r\n    }\r\n    verify(obj, times(1)).getRowId(\"foo\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestDelegatingCallableStatement.java",
  "methodName" : "testGetShortInteger",
  "sourceCode" : "@Test\r\nvoid testGetShortInteger() throws Exception {\r\n    try {\r\n        delegate.getShort(1);\r\n    } catch (final SQLException e) {\r\n    }\r\n    verify(obj, times(1)).getShort(1);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestDelegatingCallableStatement.java",
  "methodName" : "testGetShortString",
  "sourceCode" : "@Test\r\nvoid testGetShortString() throws Exception {\r\n    try {\r\n        delegate.getShort(\"foo\");\r\n    } catch (final SQLException e) {\r\n    }\r\n    verify(obj, times(1)).getShort(\"foo\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestDelegatingCallableStatement.java",
  "methodName" : "testGetSQLXMLInteger",
  "sourceCode" : "@Test\r\nvoid testGetSQLXMLInteger() throws Exception {\r\n    try {\r\n        delegate.getSQLXML(1);\r\n    } catch (final SQLException e) {\r\n    }\r\n    verify(obj, times(1)).getSQLXML(1);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestDelegatingCallableStatement.java",
  "methodName" : "testGetSQLXMLString",
  "sourceCode" : "@Test\r\nvoid testGetSQLXMLString() throws Exception {\r\n    try {\r\n        delegate.getSQLXML(\"foo\");\r\n    } catch (final SQLException e) {\r\n    }\r\n    verify(obj, times(1)).getSQLXML(\"foo\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestDelegatingCallableStatement.java",
  "methodName" : "testGetStringInteger",
  "sourceCode" : "@Test\r\nvoid testGetStringInteger() throws Exception {\r\n    try {\r\n        delegate.getString(1);\r\n    } catch (final SQLException e) {\r\n    }\r\n    verify(obj, times(1)).getString(1);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestDelegatingCallableStatement.java",
  "methodName" : "testGetStringString",
  "sourceCode" : "@Test\r\nvoid testGetStringString() throws Exception {\r\n    try {\r\n        delegate.getString(\"foo\");\r\n    } catch (final SQLException e) {\r\n    }\r\n    verify(obj, times(1)).getString(\"foo\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestDelegatingCallableStatement.java",
  "methodName" : "testGetTimeInteger",
  "sourceCode" : "@Test\r\nvoid testGetTimeInteger() throws Exception {\r\n    try {\r\n        delegate.getTime(1);\r\n    } catch (final SQLException e) {\r\n    }\r\n    verify(obj, times(1)).getTime(1);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestDelegatingCallableStatement.java",
  "methodName" : "testGetTimeIntegerCalendar",
  "sourceCode" : "@Test\r\nvoid testGetTimeIntegerCalendar() throws Exception {\r\n    try {\r\n        delegate.getTime(1, (java.util.Calendar) null);\r\n    } catch (final SQLException e) {\r\n    }\r\n    verify(obj, times(1)).getTime(1, (java.util.Calendar) null);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestDelegatingCallableStatement.java",
  "methodName" : "testGetTimestampInteger",
  "sourceCode" : "@Test\r\nvoid testGetTimestampInteger() throws Exception {\r\n    try {\r\n        delegate.getTimestamp(1);\r\n    } catch (final SQLException e) {\r\n    }\r\n    verify(obj, times(1)).getTimestamp(1);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestDelegatingCallableStatement.java",
  "methodName" : "testGetTimestampIntegerCalendar",
  "sourceCode" : "@Test\r\nvoid testGetTimestampIntegerCalendar() throws Exception {\r\n    try {\r\n        delegate.getTimestamp(1, (java.util.Calendar) null);\r\n    } catch (final SQLException e) {\r\n    }\r\n    verify(obj, times(1)).getTimestamp(1, (java.util.Calendar) null);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestDelegatingCallableStatement.java",
  "methodName" : "testGetTimestampString",
  "sourceCode" : "@Test\r\nvoid testGetTimestampString() throws Exception {\r\n    try {\r\n        delegate.getTimestamp(\"foo\");\r\n    } catch (final SQLException e) {\r\n    }\r\n    verify(obj, times(1)).getTimestamp(\"foo\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestDelegatingCallableStatement.java",
  "methodName" : "testGetTimestampStringCalendar",
  "sourceCode" : "@Test\r\nvoid testGetTimestampStringCalendar() throws Exception {\r\n    try {\r\n        delegate.getTimestamp(\"foo\", (java.util.Calendar) null);\r\n    } catch (final SQLException e) {\r\n    }\r\n    verify(obj, times(1)).getTimestamp(\"foo\", (java.util.Calendar) null);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestDelegatingCallableStatement.java",
  "methodName" : "testGetTimeString",
  "sourceCode" : "@Test\r\nvoid testGetTimeString() throws Exception {\r\n    try {\r\n        delegate.getTime(\"foo\");\r\n    } catch (final SQLException e) {\r\n    }\r\n    verify(obj, times(1)).getTime(\"foo\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestDelegatingCallableStatement.java",
  "methodName" : "testGetTimeStringCalendar",
  "sourceCode" : "@Test\r\nvoid testGetTimeStringCalendar() throws Exception {\r\n    try {\r\n        delegate.getTime(\"foo\", (java.util.Calendar) null);\r\n    } catch (final SQLException e) {\r\n    }\r\n    verify(obj, times(1)).getTime(\"foo\", (java.util.Calendar) null);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestDelegatingCallableStatement.java",
  "methodName" : "testGetURLInteger",
  "sourceCode" : "@Test\r\nvoid testGetURLInteger() throws Exception {\r\n    try {\r\n        delegate.getURL(1);\r\n    } catch (final SQLException e) {\r\n    }\r\n    verify(obj, times(1)).getURL(1);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestDelegatingCallableStatement.java",
  "methodName" : "testGetURLString",
  "sourceCode" : "@Test\r\nvoid testGetURLString() throws Exception {\r\n    try {\r\n        delegate.getURL(\"foo\");\r\n    } catch (final SQLException e) {\r\n    }\r\n    verify(obj, times(1)).getURL(\"foo\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestDelegatingCallableStatement.java",
  "methodName" : "testRegisterOutParameterIntegerInteger",
  "sourceCode" : "@Test\r\nvoid testRegisterOutParameterIntegerInteger() throws Exception {\r\n    try {\r\n        delegate.registerOutParameter(1, 1);\r\n    } catch (final SQLException e) {\r\n    }\r\n    verify(obj, times(1)).registerOutParameter(1, 1);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestDelegatingCallableStatement.java",
  "methodName" : "testRegisterOutParameterIntegerIntegerInteger",
  "sourceCode" : "@Test\r\nvoid testRegisterOutParameterIntegerIntegerInteger() throws Exception {\r\n    try {\r\n        delegate.registerOutParameter(1, 1, 1);\r\n    } catch (final SQLException e) {\r\n    }\r\n    verify(obj, times(1)).registerOutParameter(1, 1, 1);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestDelegatingCallableStatement.java",
  "methodName" : "testRegisterOutParameterIntegerIntegerString",
  "sourceCode" : "@Test\r\nvoid testRegisterOutParameterIntegerIntegerString() throws Exception {\r\n    try {\r\n        delegate.registerOutParameter(1, 1, \"foo\");\r\n    } catch (final SQLException e) {\r\n    }\r\n    verify(obj, times(1)).registerOutParameter(1, 1, \"foo\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestDelegatingCallableStatement.java",
  "methodName" : "testRegisterOutParameterIntegerSQLType",
  "sourceCode" : "@Test\r\nvoid testRegisterOutParameterIntegerSQLType() throws Exception {\r\n    try {\r\n        delegate.registerOutParameter(1, (java.sql.SQLType) null);\r\n    } catch (final SQLException e) {\r\n    }\r\n    verify(obj, times(1)).registerOutParameter(1, (java.sql.SQLType) null);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestDelegatingCallableStatement.java",
  "methodName" : "testRegisterOutParameterIntegerSQLTypeInteger",
  "sourceCode" : "@Test\r\nvoid testRegisterOutParameterIntegerSQLTypeInteger() throws Exception {\r\n    try {\r\n        delegate.registerOutParameter(1, (java.sql.SQLType) null, 1);\r\n    } catch (final SQLException e) {\r\n    }\r\n    verify(obj, times(1)).registerOutParameter(1, (java.sql.SQLType) null, 1);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestDelegatingCallableStatement.java",
  "methodName" : "testRegisterOutParameterIntegerSQLTypeString",
  "sourceCode" : "@Test\r\nvoid testRegisterOutParameterIntegerSQLTypeString() throws Exception {\r\n    try {\r\n        delegate.registerOutParameter(1, (java.sql.SQLType) null, \"foo\");\r\n    } catch (final SQLException e) {\r\n    }\r\n    verify(obj, times(1)).registerOutParameter(1, (java.sql.SQLType) null, \"foo\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestDelegatingCallableStatement.java",
  "methodName" : "testRegisterOutParameterStringInteger",
  "sourceCode" : "@Test\r\nvoid testRegisterOutParameterStringInteger() throws Exception {\r\n    try {\r\n        delegate.registerOutParameter(\"foo\", 1);\r\n    } catch (final SQLException e) {\r\n    }\r\n    verify(obj, times(1)).registerOutParameter(\"foo\", 1);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestDelegatingCallableStatement.java",
  "methodName" : "testRegisterOutParameterStringIntegerInteger",
  "sourceCode" : "@Test\r\nvoid testRegisterOutParameterStringIntegerInteger() throws Exception {\r\n    try {\r\n        delegate.registerOutParameter(\"foo\", 1, 1);\r\n    } catch (final SQLException e) {\r\n    }\r\n    verify(obj, times(1)).registerOutParameter(\"foo\", 1, 1);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestDelegatingCallableStatement.java",
  "methodName" : "testRegisterOutParameterStringIntegerString",
  "sourceCode" : "@Test\r\nvoid testRegisterOutParameterStringIntegerString() throws Exception {\r\n    try {\r\n        delegate.registerOutParameter(\"foo\", 1, \"foo\");\r\n    } catch (final SQLException e) {\r\n    }\r\n    verify(obj, times(1)).registerOutParameter(\"foo\", 1, \"foo\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestDelegatingCallableStatement.java",
  "methodName" : "testRegisterOutParameterStringSQLType",
  "sourceCode" : "@Test\r\nvoid testRegisterOutParameterStringSQLType() throws Exception {\r\n    try {\r\n        delegate.registerOutParameter(\"foo\", (java.sql.SQLType) null);\r\n    } catch (final SQLException e) {\r\n    }\r\n    verify(obj, times(1)).registerOutParameter(\"foo\", (java.sql.SQLType) null);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestDelegatingCallableStatement.java",
  "methodName" : "testRegisterOutParameterStringSQLTypeInteger",
  "sourceCode" : "@Test\r\nvoid testRegisterOutParameterStringSQLTypeInteger() throws Exception {\r\n    try {\r\n        delegate.registerOutParameter(\"foo\", (java.sql.SQLType) null, 1);\r\n    } catch (final SQLException e) {\r\n    }\r\n    verify(obj, times(1)).registerOutParameter(\"foo\", (java.sql.SQLType) null, 1);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestDelegatingCallableStatement.java",
  "methodName" : "testRegisterOutParameterStringSQLTypeString",
  "sourceCode" : "@Test\r\nvoid testRegisterOutParameterStringSQLTypeString() throws Exception {\r\n    try {\r\n        delegate.registerOutParameter(\"foo\", (java.sql.SQLType) null, \"foo\");\r\n    } catch (final SQLException e) {\r\n    }\r\n    verify(obj, times(1)).registerOutParameter(\"foo\", (java.sql.SQLType) null, \"foo\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestDelegatingCallableStatement.java",
  "methodName" : "testSetAsciiStreamStringInputStream",
  "sourceCode" : "@Test\r\nvoid testSetAsciiStreamStringInputStream() throws Exception {\r\n    try {\r\n        delegate.setAsciiStream(\"foo\", (java.io.InputStream) null);\r\n    } catch (final SQLException e) {\r\n    }\r\n    verify(obj, times(1)).setAsciiStream(\"foo\", (java.io.InputStream) null);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestDelegatingCallableStatement.java",
  "methodName" : "testSetAsciiStreamStringInputStreamInteger",
  "sourceCode" : "@Test\r\nvoid testSetAsciiStreamStringInputStreamInteger() throws Exception {\r\n    try {\r\n        delegate.setAsciiStream(\"foo\", (java.io.InputStream) null, 1);\r\n    } catch (final SQLException e) {\r\n    }\r\n    verify(obj, times(1)).setAsciiStream(\"foo\", (java.io.InputStream) null, 1);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestDelegatingCallableStatement.java",
  "methodName" : "testSetAsciiStreamStringInputStreamLong",
  "sourceCode" : "@Test\r\nvoid testSetAsciiStreamStringInputStreamLong() throws Exception {\r\n    try {\r\n        delegate.setAsciiStream(\"foo\", (java.io.InputStream) null, 1L);\r\n    } catch (final SQLException e) {\r\n    }\r\n    verify(obj, times(1)).setAsciiStream(\"foo\", (java.io.InputStream) null, 1L);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestDelegatingCallableStatement.java",
  "methodName" : "testSetBigDecimalStringBigDecimal",
  "sourceCode" : "@Test\r\nvoid testSetBigDecimalStringBigDecimal() throws Exception {\r\n    try {\r\n        delegate.setBigDecimal(\"foo\", java.math.BigDecimal.valueOf(1.0d));\r\n    } catch (final SQLException e) {\r\n    }\r\n    verify(obj, times(1)).setBigDecimal(\"foo\", java.math.BigDecimal.valueOf(1.0d));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestDelegatingCallableStatement.java",
  "methodName" : "testSetBinaryStreamStringInputStream",
  "sourceCode" : "@Test\r\nvoid testSetBinaryStreamStringInputStream() throws Exception {\r\n    try {\r\n        delegate.setBinaryStream(\"foo\", (java.io.InputStream) null);\r\n    } catch (final SQLException e) {\r\n    }\r\n    verify(obj, times(1)).setBinaryStream(\"foo\", (java.io.InputStream) null);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestDelegatingCallableStatement.java",
  "methodName" : "testSetBinaryStreamStringInputStreamInteger",
  "sourceCode" : "@Test\r\nvoid testSetBinaryStreamStringInputStreamInteger() throws Exception {\r\n    try {\r\n        delegate.setBinaryStream(\"foo\", (java.io.InputStream) null, 1);\r\n    } catch (final SQLException e) {\r\n    }\r\n    verify(obj, times(1)).setBinaryStream(\"foo\", (java.io.InputStream) null, 1);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestDelegatingCallableStatement.java",
  "methodName" : "testSetBinaryStreamStringInputStreamLong",
  "sourceCode" : "@Test\r\nvoid testSetBinaryStreamStringInputStreamLong() throws Exception {\r\n    try {\r\n        delegate.setBinaryStream(\"foo\", (java.io.InputStream) null, 1L);\r\n    } catch (final SQLException e) {\r\n    }\r\n    verify(obj, times(1)).setBinaryStream(\"foo\", (java.io.InputStream) null, 1L);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestDelegatingCallableStatement.java",
  "methodName" : "testSetBlobStringBlob",
  "sourceCode" : "@Test\r\nvoid testSetBlobStringBlob() throws Exception {\r\n    try {\r\n        delegate.setBlob(\"foo\", (java.sql.Blob) null);\r\n    } catch (final SQLException e) {\r\n    }\r\n    verify(obj, times(1)).setBlob(\"foo\", (java.sql.Blob) null);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestDelegatingCallableStatement.java",
  "methodName" : "testSetBlobStringInputStream",
  "sourceCode" : "@Test\r\nvoid testSetBlobStringInputStream() throws Exception {\r\n    try {\r\n        delegate.setBlob(\"foo\", (java.io.InputStream) null);\r\n    } catch (final SQLException e) {\r\n    }\r\n    verify(obj, times(1)).setBlob(\"foo\", (java.io.InputStream) null);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestDelegatingCallableStatement.java",
  "methodName" : "testSetBlobStringInputStreamLong",
  "sourceCode" : "@Test\r\nvoid testSetBlobStringInputStreamLong() throws Exception {\r\n    try {\r\n        delegate.setBlob(\"foo\", (java.io.InputStream) null, 1L);\r\n    } catch (final SQLException e) {\r\n    }\r\n    verify(obj, times(1)).setBlob(\"foo\", (java.io.InputStream) null, 1L);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestDelegatingCallableStatement.java",
  "methodName" : "testSetBooleanStringBoolean",
  "sourceCode" : "@Test\r\nvoid testSetBooleanStringBoolean() throws Exception {\r\n    try {\r\n        delegate.setBoolean(\"foo\", Boolean.TRUE);\r\n    } catch (final SQLException e) {\r\n    }\r\n    verify(obj, times(1)).setBoolean(\"foo\", Boolean.TRUE);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestDelegatingCallableStatement.java",
  "methodName" : "testSetBytesStringByteArray",
  "sourceCode" : "@Test\r\nvoid testSetBytesStringByteArray() throws Exception {\r\n    try {\r\n        delegate.setBytes(\"foo\", new byte[] { 1 });\r\n    } catch (final SQLException e) {\r\n    }\r\n    verify(obj, times(1)).setBytes(\"foo\", new byte[] { 1 });\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestDelegatingCallableStatement.java",
  "methodName" : "testSetByteStringByte",
  "sourceCode" : "@Test\r\nvoid testSetByteStringByte() throws Exception {\r\n    try {\r\n        delegate.setByte(\"foo\", (byte) 1);\r\n    } catch (final SQLException e) {\r\n    }\r\n    verify(obj, times(1)).setByte(\"foo\", (byte) 1);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestDelegatingCallableStatement.java",
  "methodName" : "testSetCharacterStreamStringReader",
  "sourceCode" : "@Test\r\nvoid testSetCharacterStreamStringReader() throws Exception {\r\n    try {\r\n        delegate.setCharacterStream(\"foo\", (java.io.StringReader) null);\r\n    } catch (final SQLException e) {\r\n    }\r\n    verify(obj, times(1)).setCharacterStream(\"foo\", (java.io.StringReader) null);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestDelegatingCallableStatement.java",
  "methodName" : "testSetCharacterStreamStringReaderInteger",
  "sourceCode" : "@Test\r\nvoid testSetCharacterStreamStringReaderInteger() throws Exception {\r\n    try {\r\n        delegate.setCharacterStream(\"foo\", (java.io.StringReader) null, 1);\r\n    } catch (final SQLException e) {\r\n    }\r\n    verify(obj, times(1)).setCharacterStream(\"foo\", (java.io.StringReader) null, 1);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestDelegatingCallableStatement.java",
  "methodName" : "testSetCharacterStreamStringReaderLong",
  "sourceCode" : "@Test\r\nvoid testSetCharacterStreamStringReaderLong() throws Exception {\r\n    try {\r\n        delegate.setCharacterStream(\"foo\", (java.io.StringReader) null, 1L);\r\n    } catch (final SQLException e) {\r\n    }\r\n    verify(obj, times(1)).setCharacterStream(\"foo\", (java.io.StringReader) null, 1L);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestDelegatingCallableStatement.java",
  "methodName" : "testSetClobStringClob",
  "sourceCode" : "@Test\r\nvoid testSetClobStringClob() throws Exception {\r\n    try {\r\n        delegate.setClob(\"foo\", (java.sql.Clob) null);\r\n    } catch (final SQLException e) {\r\n    }\r\n    verify(obj, times(1)).setClob(\"foo\", (java.sql.Clob) null);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestDelegatingCallableStatement.java",
  "methodName" : "testSetClobStringReader",
  "sourceCode" : "@Test\r\nvoid testSetClobStringReader() throws Exception {\r\n    try {\r\n        delegate.setClob(\"foo\", (java.io.StringReader) null);\r\n    } catch (final SQLException e) {\r\n    }\r\n    verify(obj, times(1)).setClob(\"foo\", (java.io.StringReader) null);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestDelegatingCallableStatement.java",
  "methodName" : "testSetClobStringReaderLong",
  "sourceCode" : "@Test\r\nvoid testSetClobStringReaderLong() throws Exception {\r\n    try {\r\n        delegate.setClob(\"foo\", (java.io.StringReader) null, 1L);\r\n    } catch (final SQLException e) {\r\n    }\r\n    verify(obj, times(1)).setClob(\"foo\", (java.io.StringReader) null, 1L);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestDelegatingCallableStatement.java",
  "methodName" : "testSetDateStringSqlDate",
  "sourceCode" : "@Test\r\nvoid testSetDateStringSqlDate() throws Exception {\r\n    try {\r\n        delegate.setDate(\"foo\", new java.sql.Date(1529827548745L));\r\n    } catch (final SQLException e) {\r\n    }\r\n    verify(obj, times(1)).setDate(\"foo\", new java.sql.Date(1529827548745L));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestDelegatingCallableStatement.java",
  "methodName" : "testSetDateStringSqlDateCalendar",
  "sourceCode" : "@Test\r\nvoid testSetDateStringSqlDateCalendar() throws Exception {\r\n    try {\r\n        delegate.setDate(\"foo\", new java.sql.Date(1529827548745L), (java.util.Calendar) null);\r\n    } catch (final SQLException e) {\r\n    }\r\n    verify(obj, times(1)).setDate(\"foo\", new java.sql.Date(1529827548745L), (java.util.Calendar) null);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestDelegatingCallableStatement.java",
  "methodName" : "testSetDoubleStringDouble",
  "sourceCode" : "@Test\r\nvoid testSetDoubleStringDouble() throws Exception {\r\n    try {\r\n        delegate.setDouble(\"foo\", 1.0d);\r\n    } catch (final SQLException e) {\r\n    }\r\n    verify(obj, times(1)).setDouble(\"foo\", 1.0d);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestDelegatingCallableStatement.java",
  "methodName" : "testSetFloatStringFloat",
  "sourceCode" : "@Test\r\nvoid testSetFloatStringFloat() throws Exception {\r\n    try {\r\n        delegate.setFloat(\"foo\", 1.0f);\r\n    } catch (final SQLException e) {\r\n    }\r\n    verify(obj, times(1)).setFloat(\"foo\", 1.0f);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestDelegatingCallableStatement.java",
  "methodName" : "testSetIntStringInteger",
  "sourceCode" : "@Test\r\nvoid testSetIntStringInteger() throws Exception {\r\n    try {\r\n        delegate.setInt(\"foo\", 1);\r\n    } catch (final SQLException e) {\r\n    }\r\n    verify(obj, times(1)).setInt(\"foo\", 1);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestDelegatingCallableStatement.java",
  "methodName" : "testSetLongStringLong",
  "sourceCode" : "@Test\r\nvoid testSetLongStringLong() throws Exception {\r\n    try {\r\n        delegate.setLong(\"foo\", 1L);\r\n    } catch (final SQLException e) {\r\n    }\r\n    verify(obj, times(1)).setLong(\"foo\", 1L);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestDelegatingCallableStatement.java",
  "methodName" : "testSetNCharacterStreamStringReader",
  "sourceCode" : "@Test\r\nvoid testSetNCharacterStreamStringReader() throws Exception {\r\n    try {\r\n        delegate.setNCharacterStream(\"foo\", (java.io.StringReader) null);\r\n    } catch (final SQLException e) {\r\n    }\r\n    verify(obj, times(1)).setNCharacterStream(\"foo\", (java.io.StringReader) null);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestDelegatingCallableStatement.java",
  "methodName" : "testSetNCharacterStreamStringReaderLong",
  "sourceCode" : "@Test\r\nvoid testSetNCharacterStreamStringReaderLong() throws Exception {\r\n    try {\r\n        delegate.setNCharacterStream(\"foo\", (java.io.StringReader) null, 1L);\r\n    } catch (final SQLException e) {\r\n    }\r\n    verify(obj, times(1)).setNCharacterStream(\"foo\", (java.io.StringReader) null, 1L);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestDelegatingCallableStatement.java",
  "methodName" : "testSetNClobStringNClob",
  "sourceCode" : "@Test\r\nvoid testSetNClobStringNClob() throws Exception {\r\n    try {\r\n        delegate.setNClob(\"foo\", (java.sql.NClob) null);\r\n    } catch (final SQLException e) {\r\n    }\r\n    verify(obj, times(1)).setNClob(\"foo\", (java.sql.NClob) null);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestDelegatingCallableStatement.java",
  "methodName" : "testSetNClobStringReader",
  "sourceCode" : "@Test\r\nvoid testSetNClobStringReader() throws Exception {\r\n    try {\r\n        delegate.setNClob(\"foo\", (java.io.StringReader) null);\r\n    } catch (final SQLException e) {\r\n    }\r\n    verify(obj, times(1)).setNClob(\"foo\", (java.io.StringReader) null);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestDelegatingCallableStatement.java",
  "methodName" : "testSetNClobStringReaderLong",
  "sourceCode" : "@Test\r\nvoid testSetNClobStringReaderLong() throws Exception {\r\n    try {\r\n        delegate.setNClob(\"foo\", (java.io.StringReader) null, 1L);\r\n    } catch (final SQLException e) {\r\n    }\r\n    verify(obj, times(1)).setNClob(\"foo\", (java.io.StringReader) null, 1L);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestDelegatingCallableStatement.java",
  "methodName" : "testSetNStringStringString",
  "sourceCode" : "@Test\r\nvoid testSetNStringStringString() throws Exception {\r\n    try {\r\n        delegate.setNString(\"foo\", \"foo\");\r\n    } catch (final SQLException e) {\r\n    }\r\n    verify(obj, times(1)).setNString(\"foo\", \"foo\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestDelegatingCallableStatement.java",
  "methodName" : "testSetNullStringInteger",
  "sourceCode" : "@Test\r\nvoid testSetNullStringInteger() throws Exception {\r\n    try {\r\n        delegate.setNull(\"foo\", 1);\r\n    } catch (final SQLException e) {\r\n    }\r\n    verify(obj, times(1)).setNull(\"foo\", 1);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestDelegatingCallableStatement.java",
  "methodName" : "testSetNullStringIntegerString",
  "sourceCode" : "@Test\r\nvoid testSetNullStringIntegerString() throws Exception {\r\n    try {\r\n        delegate.setNull(\"foo\", 1, \"foo\");\r\n    } catch (final SQLException e) {\r\n    }\r\n    verify(obj, times(1)).setNull(\"foo\", 1, \"foo\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestDelegatingCallableStatement.java",
  "methodName" : "testSetObjectStringObject",
  "sourceCode" : "@Test\r\nvoid testSetObjectStringObject() throws Exception {\r\n    try {\r\n        delegate.setObject(\"foo\", System.err);\r\n    } catch (final SQLException e) {\r\n    }\r\n    verify(obj, times(1)).setObject(\"foo\", System.err);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestDelegatingCallableStatement.java",
  "methodName" : "testSetObjectStringObjectInteger",
  "sourceCode" : "@Test\r\nvoid testSetObjectStringObjectInteger() throws Exception {\r\n    try {\r\n        delegate.setObject(\"foo\", System.err, 1);\r\n    } catch (final SQLException e) {\r\n    }\r\n    verify(obj, times(1)).setObject(\"foo\", System.err, 1);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestDelegatingCallableStatement.java",
  "methodName" : "testSetObjectStringObjectIntegerInteger",
  "sourceCode" : "@Test\r\nvoid testSetObjectStringObjectIntegerInteger() throws Exception {\r\n    try {\r\n        delegate.setObject(\"foo\", System.err, 1, 1);\r\n    } catch (final SQLException e) {\r\n    }\r\n    verify(obj, times(1)).setObject(\"foo\", System.err, 1, 1);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestDelegatingCallableStatement.java",
  "methodName" : "testSetObjectStringObjectSQLType",
  "sourceCode" : "@Test\r\nvoid testSetObjectStringObjectSQLType() throws Exception {\r\n    try {\r\n        delegate.setObject(\"foo\", System.err, (java.sql.SQLType) null);\r\n    } catch (final SQLException e) {\r\n    }\r\n    verify(obj, times(1)).setObject(\"foo\", System.err, (java.sql.SQLType) null);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestDelegatingCallableStatement.java",
  "methodName" : "testSetObjectStringObjectSQLTypeInteger",
  "sourceCode" : "@Test\r\nvoid testSetObjectStringObjectSQLTypeInteger() throws Exception {\r\n    try {\r\n        delegate.setObject(\"foo\", System.err, (java.sql.SQLType) null, 1);\r\n    } catch (final SQLException e) {\r\n    }\r\n    verify(obj, times(1)).setObject(\"foo\", System.err, (java.sql.SQLType) null, 1);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestDelegatingCallableStatement.java",
  "methodName" : "testSetRowIdStringRowId",
  "sourceCode" : "@Test\r\nvoid testSetRowIdStringRowId() throws Exception {\r\n    try {\r\n        delegate.setRowId(\"foo\", (java.sql.RowId) null);\r\n    } catch (final SQLException e) {\r\n    }\r\n    verify(obj, times(1)).setRowId(\"foo\", (java.sql.RowId) null);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestDelegatingCallableStatement.java",
  "methodName" : "testSetShortStringShort",
  "sourceCode" : "@Test\r\nvoid testSetShortStringShort() throws Exception {\r\n    try {\r\n        delegate.setShort(\"foo\", (short) 1);\r\n    } catch (final SQLException e) {\r\n    }\r\n    verify(obj, times(1)).setShort(\"foo\", (short) 1);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestDelegatingCallableStatement.java",
  "methodName" : "testSetSQLXMLStringSQLXML",
  "sourceCode" : "@Test\r\nvoid testSetSQLXMLStringSQLXML() throws Exception {\r\n    try {\r\n        delegate.setSQLXML(\"foo\", (java.sql.SQLXML) null);\r\n    } catch (final SQLException e) {\r\n    }\r\n    verify(obj, times(1)).setSQLXML(\"foo\", (java.sql.SQLXML) null);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestDelegatingCallableStatement.java",
  "methodName" : "testSetStringStringString",
  "sourceCode" : "@Test\r\nvoid testSetStringStringString() throws Exception {\r\n    try {\r\n        delegate.setString(\"foo\", \"foo\");\r\n    } catch (final SQLException e) {\r\n    }\r\n    verify(obj, times(1)).setString(\"foo\", \"foo\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestDelegatingCallableStatement.java",
  "methodName" : "testSetTimestampStringTimestamp",
  "sourceCode" : "@Test\r\nvoid testSetTimestampStringTimestamp() throws Exception {\r\n    try {\r\n        delegate.setTimestamp(\"foo\", (java.sql.Timestamp) null);\r\n    } catch (final SQLException e) {\r\n    }\r\n    verify(obj, times(1)).setTimestamp(\"foo\", (java.sql.Timestamp) null);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestDelegatingCallableStatement.java",
  "methodName" : "testSetTimestampStringTimestampCalendar",
  "sourceCode" : "@Test\r\nvoid testSetTimestampStringTimestampCalendar() throws Exception {\r\n    try {\r\n        delegate.setTimestamp(\"foo\", (java.sql.Timestamp) null, (java.util.Calendar) null);\r\n    } catch (final SQLException e) {\r\n    }\r\n    verify(obj, times(1)).setTimestamp(\"foo\", (java.sql.Timestamp) null, (java.util.Calendar) null);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestDelegatingCallableStatement.java",
  "methodName" : "testSetTimeStringTime",
  "sourceCode" : "@Test\r\nvoid testSetTimeStringTime() throws Exception {\r\n    try {\r\n        delegate.setTime(\"foo\", (java.sql.Time) null);\r\n    } catch (final SQLException e) {\r\n    }\r\n    verify(obj, times(1)).setTime(\"foo\", (java.sql.Time) null);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestDelegatingCallableStatement.java",
  "methodName" : "testSetTimeStringTimeCalendar",
  "sourceCode" : "@Test\r\nvoid testSetTimeStringTimeCalendar() throws Exception {\r\n    try {\r\n        delegate.setTime(\"foo\", (java.sql.Time) null, (java.util.Calendar) null);\r\n    } catch (final SQLException e) {\r\n    }\r\n    verify(obj, times(1)).setTime(\"foo\", (java.sql.Time) null, (java.util.Calendar) null);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestDelegatingCallableStatement.java",
  "methodName" : "testSetURLStringUrl",
  "sourceCode" : "@Test\r\nvoid testSetURLStringUrl() throws Exception {\r\n    try {\r\n        delegate.setURL(\"foo\", (java.net.URL) null);\r\n    } catch (final SQLException e) {\r\n    }\r\n    verify(obj, times(1)).setURL(\"foo\", (java.net.URL) null);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestDelegatingCallableStatement.java",
  "methodName" : "testWasNull",
  "sourceCode" : "@Test\r\nvoid testWasNull() throws Exception {\r\n    try {\r\n        delegate.wasNull();\r\n    } catch (final SQLException e) {\r\n    }\r\n    verify(obj, times(1)).wasNull();\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestDelegatingConnection.java",
  "methodName" : "testAbort",
  "sourceCode" : "@Test\r\nvoid testAbort() throws Exception {\r\n    h2DConnection.abort(r -> {\r\n    });\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestDelegatingConnection.java",
  "methodName" : "testAutoCommitCaching",
  "sourceCode" : "@Test\r\nvoid testAutoCommitCaching() throws SQLException {\r\n    final Connection con = new NoReadOnlyOrAutoCommitConnection();\r\n    final DelegatingConnection<Connection> delCon = new DelegatingConnection<>(con);\r\n    delCon.setAutoCommit(true);\r\n    assertFalse(con.getAutoCommit());\r\n    assertFalse(delCon.getAutoCommit());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestDelegatingConnection.java",
  "methodName" : "testCheckOpen",
  "sourceCode" : "@Test\r\nvoid testCheckOpen() throws Exception {\r\n    delegatingConnection.checkOpen();\r\n    delegatingConnection.close();\r\n    assertThrows(SQLException.class, delegatingConnection::checkOpen);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestDelegatingConnection.java",
  "methodName" : "testCheckOpenNull",
  "sourceCode" : "/**\r\n * Verify fix for DBCP-241\r\n */\r\n@Test\r\nvoid testCheckOpenNull() throws Exception {\r\n    delegatingConnection.close();\r\n    SQLException e = assertThrows(SQLException.class, delegatingConnection::checkOpen);\r\n    assertTrue(e.getMessage().endsWith(\"is closed.\"));\r\n    delegatingConnection = new DelegatingConnection<>(null);\r\n    delegatingConnection.setClosedInternal(true);\r\n    e = assertThrows(SQLException.class, delegatingConnection::checkOpen);\r\n    assertTrue(e.getMessage().endsWith(\"is null.\"));\r\n    final PoolingConnection pc = new PoolingConnection(connection2);\r\n    pc.setStatementPool(new GenericKeyedObjectPool<>(pc));\r\n    delegatingConnection = new DelegatingConnection<>(pc);\r\n    pc.close();\r\n    delegatingConnection.close();\r\n    e = assertThrows(SQLException.class, () -> delegatingConnection.prepareStatement(\"\"));\r\n    assertTrue(e.getMessage().endsWith(\"is closed.\"));\r\n    delegatingConnection = new DelegatingConnection<>(new RTEGeneratingConnection());\r\n    delegatingConnection.close();\r\n    e = assertThrows(SQLException.class, delegatingConnection::checkOpen);\r\n    assertTrue(e.getMessage().endsWith(\"is closed.\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestDelegatingConnection.java",
  "methodName" : "testCommit",
  "sourceCode" : "@Test\r\nvoid testCommit() throws Exception {\r\n    h2DConnection.commit();\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestDelegatingConnection.java",
  "methodName" : "testConnectionToString",
  "sourceCode" : "@Test\r\nvoid testConnectionToString() throws Exception {\r\n    final String s = delegatingConnection.toString();\r\n    assertNotNull(s);\r\n    assertFalse(s.isEmpty());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestDelegatingConnection.java",
  "methodName" : "testCreateArrayOf",
  "sourceCode" : "@Test\r\nvoid testCreateArrayOf() throws Exception {\r\n    assertNotNull(h2DConnection.createArrayOf(\"CHARACTER\", new Object[] { \"A\", \"B\" }));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestDelegatingConnection.java",
  "methodName" : "testCreateBlob",
  "sourceCode" : "@Test\r\nvoid testCreateBlob() throws Exception {\r\n    assertNotNull(h2DConnection.createBlob());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestDelegatingConnection.java",
  "methodName" : "testCreateClob",
  "sourceCode" : "@Test\r\nvoid testCreateClob() throws Exception {\r\n    assertNotNull(h2DConnection.createClob());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestDelegatingConnection.java",
  "methodName" : "testCreateNClob",
  "sourceCode" : "@Test\r\nvoid testCreateNClob() throws Exception {\r\n    assertNotNull(h2DConnection.createNClob());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestDelegatingConnection.java",
  "methodName" : "testCreateSQLXML",
  "sourceCode" : "@Test\r\nvoid testCreateSQLXML() throws Exception {\r\n    assertNotNull(h2DConnection.createSQLXML());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestDelegatingConnection.java",
  "methodName" : "testCreateStruct",
  "sourceCode" : "@Test\r\nvoid testCreateStruct() throws Exception {\r\n    // not supported by H2\r\n    assertThrows(SQLException.class, () -> h2DConnection.createStruct(\"CHARACTER\", new Object[] { \"A\", \"B\" }));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestDelegatingConnection.java",
  "methodName" : "testGetCacheState",
  "sourceCode" : "@Test\r\nvoid testGetCacheState() throws Exception {\r\n    assertTrue(h2DConnection.getCacheState());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestDelegatingConnection.java",
  "methodName" : "testGetClientInfo",
  "sourceCode" : "@Test\r\nvoid testGetClientInfo() throws Exception {\r\n    assertNotNull(h2DConnection.getClientInfo());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestDelegatingConnection.java",
  "methodName" : "testGetClientInfoString",
  "sourceCode" : "@Test\r\nvoid testGetClientInfoString() throws Exception {\r\n    assertNull(h2DConnection.getClientInfo(\"xyz\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestDelegatingConnection.java",
  "methodName" : "testGetDefaultQueryTimeout",
  "sourceCode" : "@Test\r\nvoid testGetDefaultQueryTimeout() throws Exception {\r\n    assertNull(h2DConnection.getDefaultQueryTimeout());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestDelegatingConnection.java",
  "methodName" : "testGetDefaultQueryTimeoutDuration",
  "sourceCode" : "@Test\r\nvoid testGetDefaultQueryTimeoutDuration() throws Exception {\r\n    assertNull(h2DConnection.getDefaultQueryTimeoutDuration());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestDelegatingConnection.java",
  "methodName" : "testGetDelegate",
  "sourceCode" : "@Test\r\nvoid testGetDelegate() throws Exception {\r\n    assertEquals(connection, delegatingConnection.getDelegate());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestDelegatingConnection.java",
  "methodName" : "testGetHoldability",
  "sourceCode" : "@Test\r\nvoid testGetHoldability() throws Exception {\r\n    assertEquals(1, h2DConnection.getHoldability());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestDelegatingConnection.java",
  "methodName" : "testGetNetworkTimeout",
  "sourceCode" : "@Test\r\nvoid testGetNetworkTimeout() throws Exception {\r\n    assertEquals(0, h2DConnection.getNetworkTimeout());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestDelegatingConnection.java",
  "methodName" : "testGetTypeMap",
  "sourceCode" : "@Test\r\nvoid testGetTypeMap() throws Exception {\r\n    assertNull(h2DConnection.getTypeMap());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestDelegatingConnection.java",
  "methodName" : "testIsClosed",
  "sourceCode" : "@Test\r\nvoid testIsClosed() throws Exception {\r\n    delegatingConnection.checkOpen();\r\n    assertFalse(delegatingConnection.isClosed());\r\n    delegatingConnection.close();\r\n    assertTrue(delegatingConnection.isClosed());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestDelegatingConnection.java",
  "methodName" : "testIsClosedNullDelegate",
  "sourceCode" : "@Test\r\nvoid testIsClosedNullDelegate() throws Exception {\r\n    delegatingConnection.checkOpen();\r\n    assertFalse(delegatingConnection.isClosed());\r\n    delegatingConnection.setDelegate(null);\r\n    assertTrue(delegatingConnection.isClosed());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestDelegatingConnection.java",
  "methodName" : "testIsWrapperFor",
  "sourceCode" : "@SuppressWarnings(\"resource\")\r\n@Test\r\nvoid testIsWrapperFor() throws Exception {\r\n    assertTrue(delegatingConnection.isWrapperFor(delegatingConnection.getClass()));\r\n    assertTrue(delegatingConnection.isWrapperFor(delegatingConnection.getDelegate().getClass()));\r\n    assertThrows(SQLException.class, () -> delegatingConnection.isWrapperFor(Integer.class));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestDelegatingConnection.java",
  "methodName" : "testNativeSQL",
  "sourceCode" : "@Test\r\nvoid testNativeSQL() throws Exception {\r\n    assertNotNull(h2DConnection.nativeSQL(\"select 1\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestDelegatingConnection.java",
  "methodName" : "testPassivateWithResultSetCloseException",
  "sourceCode" : "@Test\r\nvoid testPassivateWithResultSetCloseException() {\r\n    testerResultSet.setSqlExceptionOnClose(true);\r\n    delegatingConnection.addTrace(testerResultSet);\r\n    final SQLException e = assertThrows(SQLException.class, delegatingConnection::passivate);\r\n    Assertions.assertInstanceOf(SQLExceptionList.class, e);\r\n    Assertions.assertEquals(1, ((SQLExceptionList) e).getCauseList().size());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestDelegatingConnection.java",
  "methodName" : "testPassivateWithResultSetCloseExceptionAndStatementCloseException",
  "sourceCode" : "@Test\r\nvoid testPassivateWithResultSetCloseExceptionAndStatementCloseException() {\r\n    testerStatement.setSqlExceptionOnClose(true);\r\n    testerResultSet.setSqlExceptionOnClose(true);\r\n    delegatingConnection.addTrace(testerStatement);\r\n    delegatingConnection.addTrace(testerResultSet);\r\n    final SQLException e = assertThrows(SQLException.class, delegatingConnection::passivate);\r\n    Assertions.assertInstanceOf(SQLExceptionList.class, e);\r\n    Assertions.assertEquals(2, ((SQLExceptionList) e).getCauseList().size());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestDelegatingConnection.java",
  "methodName" : "testPassivateWithStatementCloseException",
  "sourceCode" : "@Test\r\nvoid testPassivateWithStatementCloseException() {\r\n    testerStatement.setSqlExceptionOnClose(true);\r\n    delegatingConnection.addTrace(testerStatement);\r\n    final SQLException e = assertThrows(SQLException.class, delegatingConnection::passivate);\r\n    Assertions.assertInstanceOf(SQLExceptionList.class, e);\r\n    Assertions.assertEquals(1, ((SQLExceptionList) e).getCauseList().size());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestDelegatingConnection.java",
  "methodName" : "testReadOnlyCaching",
  "sourceCode" : "@Test\r\nvoid testReadOnlyCaching() throws SQLException {\r\n    final Connection con = new NoReadOnlyOrAutoCommitConnection();\r\n    final DelegatingConnection<Connection> delCon = new DelegatingConnection<>(con);\r\n    delCon.setReadOnly(true);\r\n    assertFalse(con.isReadOnly());\r\n    assertFalse(delCon.isReadOnly());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestDelegatingConnection.java",
  "methodName" : "testReleaseSavepoint",
  "sourceCode" : "@Test\r\nvoid testReleaseSavepoint() throws Exception {\r\n    final Savepoint s = h2DConnection.setSavepoint();\r\n    h2DConnection.releaseSavepoint(s);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestDelegatingConnection.java",
  "methodName" : "testRollback",
  "sourceCode" : "@Test\r\nvoid testRollback() throws Exception {\r\n    h2DConnection.rollback();\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestDelegatingConnection.java",
  "methodName" : "testRollbackSavepoint",
  "sourceCode" : "@Test\r\nvoid testRollbackSavepoint() throws Exception {\r\n    h2DConnection.setAutoCommit(false);\r\n    try {\r\n        h2DConnection.rollback(h2DConnection.setSavepoint());\r\n    } finally {\r\n        h2DConnection.setAutoCommit(true);\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestDelegatingConnection.java",
  "methodName" : "testSetClientInfo",
  "sourceCode" : "@Test\r\nvoid testSetClientInfo() throws Exception {\r\n    // TODO\r\n    // h2DConnection.setClientInfo(\"ApplicationName\", \"app1\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestDelegatingConnection.java",
  "methodName" : "testSetDefaultQueryTimeout",
  "sourceCode" : "@Test\r\nvoid testSetDefaultQueryTimeout() throws Exception {\r\n    final int expected = 1;\r\n    delegatingConnection.setDefaultQueryTimeout(expected);\r\n    assertEquals(expected, delegatingConnection.getDefaultQueryTimeout());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestDelegatingConnection.java",
  "methodName" : "testSetHoldability",
  "sourceCode" : "@Test\r\nvoid testSetHoldability() throws Exception {\r\n    final int expected = 1;\r\n    h2DConnection.setHoldability(expected);\r\n    assertEquals(expected, h2DConnection.getHoldability());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestDelegatingConnection.java",
  "methodName" : "testSetNetworkTimeout",
  "sourceCode" : "@Test\r\nvoid testSetNetworkTimeout() throws Exception {\r\n    h2DConnection.setNetworkTimeout(r -> {\r\n    }, 1);\r\n    assertEquals(0, h2DConnection.getNetworkTimeout());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestDelegatingConnection.java",
  "methodName" : "testSetSavepoint",
  "sourceCode" : "@Test\r\nvoid testSetSavepoint() throws Exception {\r\n    h2DConnection.setSavepoint();\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestDelegatingConnection.java",
  "methodName" : "testUnwrap",
  "sourceCode" : "@SuppressWarnings(\"javadoc\")\r\n@Test\r\nvoid testUnwrap() throws Exception {\r\n    assertNotNull(delegatingConnection.unwrap(delegatingConnection.getClass()));\r\n    assertNotNull(delegatingConnection.unwrap(delegatingConnection.getDelegate().getClass()));\r\n    assertThrows(SQLException.class, () -> delegatingConnection.unwrap(Integer.class));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestDelegatingDatabaseMetaData.java",
  "methodName" : "testAllProceduresAreCallable",
  "sourceCode" : "@Test\r\nvoid testAllProceduresAreCallable() throws Exception {\r\n    try {\r\n        delegate.allProceduresAreCallable();\r\n    } catch (final SQLException e) {\r\n        // ignore\r\n    }\r\n    verify(obj, times(1)).allProceduresAreCallable();\r\n    // SQLException\r\n    Mockito.when(obj.allProceduresAreCallable()).thenThrow(SQLException.class);\r\n    // The default handler rethrows\r\n    assertThrows(SQLException.class, delegate::allProceduresAreCallable);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestDelegatingDatabaseMetaData.java",
  "methodName" : "testAllTablesAreSelectable",
  "sourceCode" : "@Test\r\nvoid testAllTablesAreSelectable() throws Exception {\r\n    try {\r\n        delegate.allTablesAreSelectable();\r\n    } catch (final SQLException e) {\r\n        // ignore\r\n    }\r\n    verify(obj, times(1)).allTablesAreSelectable();\r\n    // SQLException\r\n    Mockito.when(obj.allTablesAreSelectable()).thenThrow(SQLException.class);\r\n    // The default handler rethrows\r\n    assertThrows(SQLException.class, delegate::allTablesAreSelectable);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestDelegatingDatabaseMetaData.java",
  "methodName" : "testAutoCommitFailureClosesAllResultSets",
  "sourceCode" : "@Test\r\nvoid testAutoCommitFailureClosesAllResultSets() throws Exception {\r\n    try {\r\n        delegate.autoCommitFailureClosesAllResultSets();\r\n    } catch (final SQLException e) {\r\n        // ignore\r\n    }\r\n    verify(obj, times(1)).autoCommitFailureClosesAllResultSets();\r\n    // SQLException\r\n    Mockito.when(obj.autoCommitFailureClosesAllResultSets()).thenThrow(SQLException.class);\r\n    // The default handler rethrows\r\n    assertThrows(SQLException.class, delegate::autoCommitFailureClosesAllResultSets);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestDelegatingDatabaseMetaData.java",
  "methodName" : "testCheckOpen",
  "sourceCode" : "@Test\r\nvoid testCheckOpen() throws Exception {\r\n    delegate = new DelegatingDatabaseMetaData(conn, conn.getMetaData());\r\n    final ResultSet rst = delegate.getSchemas();\r\n    assertFalse(rst.isClosed());\r\n    conn.close();\r\n    assertTrue(rst.isClosed());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestDelegatingDatabaseMetaData.java",
  "methodName" : "testDataDefinitionCausesTransactionCommit",
  "sourceCode" : "@Test\r\nvoid testDataDefinitionCausesTransactionCommit() throws Exception {\r\n    try {\r\n        delegate.dataDefinitionCausesTransactionCommit();\r\n    } catch (final SQLException e) {\r\n        // ignore\r\n    }\r\n    verify(obj, times(1)).dataDefinitionCausesTransactionCommit();\r\n    // SQLException\r\n    Mockito.when(obj.dataDefinitionCausesTransactionCommit()).thenThrow(SQLException.class);\r\n    // The default handler rethrows\r\n    assertThrows(SQLException.class, delegate::dataDefinitionCausesTransactionCommit);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestDelegatingDatabaseMetaData.java",
  "methodName" : "testDataDefinitionIgnoredInTransactions",
  "sourceCode" : "@Test\r\nvoid testDataDefinitionIgnoredInTransactions() throws Exception {\r\n    try {\r\n        delegate.dataDefinitionIgnoredInTransactions();\r\n    } catch (final SQLException e) {\r\n        // ignore\r\n    }\r\n    verify(obj, times(1)).dataDefinitionIgnoredInTransactions();\r\n    // SQLException\r\n    Mockito.when(obj.dataDefinitionIgnoredInTransactions()).thenThrow(SQLException.class);\r\n    // The default handler rethrows\r\n    assertThrows(SQLException.class, delegate::dataDefinitionIgnoredInTransactions);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestDelegatingDatabaseMetaData.java",
  "methodName" : "testDeletesAreDetectedInteger",
  "sourceCode" : "@Test\r\nvoid testDeletesAreDetectedInteger() throws Exception {\r\n    try {\r\n        delegate.deletesAreDetected(1);\r\n    } catch (final SQLException e) {\r\n        // ignore\r\n    }\r\n    verify(obj, times(1)).deletesAreDetected(1);\r\n    // SQLException\r\n    Mockito.when(obj.deletesAreDetected(1)).thenThrow(SQLException.class);\r\n    // The default handler rethrows\r\n    assertThrows(SQLException.class, () -> delegate.deletesAreDetected(1));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestDelegatingDatabaseMetaData.java",
  "methodName" : "testDoesMaxRowSizeIncludeBlobs",
  "sourceCode" : "@Test\r\nvoid testDoesMaxRowSizeIncludeBlobs() throws Exception {\r\n    try {\r\n        delegate.doesMaxRowSizeIncludeBlobs();\r\n    } catch (final SQLException e) {\r\n        // ignore\r\n    }\r\n    verify(obj, times(1)).doesMaxRowSizeIncludeBlobs();\r\n    // SQLException\r\n    Mockito.when(obj.doesMaxRowSizeIncludeBlobs()).thenThrow(SQLException.class);\r\n    // The default handler rethrows\r\n    assertThrows(SQLException.class, delegate::doesMaxRowSizeIncludeBlobs);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestDelegatingDatabaseMetaData.java",
  "methodName" : "testGeneratedKeyAlwaysReturned",
  "sourceCode" : "@Test\r\nvoid testGeneratedKeyAlwaysReturned() throws Exception {\r\n    try {\r\n        delegate.generatedKeyAlwaysReturned();\r\n    } catch (final SQLException e) {\r\n        // ignore\r\n    }\r\n    verify(obj, times(1)).generatedKeyAlwaysReturned();\r\n    // SQLException\r\n    Mockito.when(obj.generatedKeyAlwaysReturned()).thenThrow(SQLException.class);\r\n    // The default handler rethrows\r\n    assertThrows(SQLException.class, delegate::generatedKeyAlwaysReturned);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestDelegatingDatabaseMetaData.java",
  "methodName" : "testGetAttributesStringStringStringString",
  "sourceCode" : "@Test\r\nvoid testGetAttributesStringStringStringString() throws Exception {\r\n    try {\r\n        delegate.getAttributes(\"foo\", \"foo\", \"foo\", \"foo\");\r\n    } catch (final SQLException e) {\r\n        // ignore\r\n    }\r\n    verify(obj, times(1)).getAttributes(\"foo\", \"foo\", \"foo\", \"foo\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestDelegatingDatabaseMetaData.java",
  "methodName" : "testGetBestRowIdentifierStringStringStringIntegerBoolean",
  "sourceCode" : "@Test\r\nvoid testGetBestRowIdentifierStringStringStringIntegerBoolean() throws Exception {\r\n    try {\r\n        delegate.getBestRowIdentifier(\"foo\", \"foo\", \"foo\", 1, Boolean.TRUE);\r\n    } catch (final SQLException e) {\r\n        // ignore\r\n    }\r\n    verify(obj, times(1)).getBestRowIdentifier(\"foo\", \"foo\", \"foo\", 1, Boolean.TRUE);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestDelegatingDatabaseMetaData.java",
  "methodName" : "testGetCatalogs",
  "sourceCode" : "@Test\r\nvoid testGetCatalogs() throws Exception {\r\n    try {\r\n        delegate.getCatalogs();\r\n    } catch (final SQLException e) {\r\n        // ignore\r\n    }\r\n    verify(obj, times(1)).getCatalogs();\r\n    // SQLException\r\n    Mockito.when(obj.getCatalogs()).thenThrow(SQLException.class);\r\n    // The default handler rethrows\r\n    assertThrows(SQLException.class, delegate::getCatalogs);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestDelegatingDatabaseMetaData.java",
  "methodName" : "testGetCatalogSeparator",
  "sourceCode" : "@Test\r\nvoid testGetCatalogSeparator() throws Exception {\r\n    try {\r\n        delegate.getCatalogSeparator();\r\n    } catch (final SQLException e) {\r\n        // ignore\r\n    }\r\n    verify(obj, times(1)).getCatalogSeparator();\r\n    // SQLException\r\n    Mockito.when(obj.getCatalogSeparator()).thenThrow(SQLException.class);\r\n    // The default handler rethrows\r\n    assertThrows(SQLException.class, delegate::getCatalogSeparator);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestDelegatingDatabaseMetaData.java",
  "methodName" : "testGetCatalogTerm",
  "sourceCode" : "@Test\r\nvoid testGetCatalogTerm() throws Exception {\r\n    try {\r\n        delegate.getCatalogTerm();\r\n    } catch (final SQLException e) {\r\n        // ignore\r\n    }\r\n    verify(obj, times(1)).getCatalogTerm();\r\n    // SQLException\r\n    Mockito.when(obj.getCatalogTerm()).thenThrow(SQLException.class);\r\n    // The default handler rethrows\r\n    assertThrows(SQLException.class, delegate::getCatalogTerm);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestDelegatingDatabaseMetaData.java",
  "methodName" : "testGetClientInfoProperties",
  "sourceCode" : "@Test\r\nvoid testGetClientInfoProperties() throws Exception {\r\n    try {\r\n        delegate.getClientInfoProperties();\r\n    } catch (final SQLException e) {\r\n        // ignore\r\n    }\r\n    verify(obj, times(1)).getClientInfoProperties();\r\n    // SQLException\r\n    Mockito.when(obj.getClientInfoProperties()).thenThrow(SQLException.class);\r\n    // The default handler rethrows\r\n    assertThrows(SQLException.class, delegate::getClientInfoProperties);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestDelegatingDatabaseMetaData.java",
  "methodName" : "testGetColumnPrivilegesStringStringStringString",
  "sourceCode" : "@Test\r\nvoid testGetColumnPrivilegesStringStringStringString() throws Exception {\r\n    try {\r\n        delegate.getColumnPrivileges(\"foo\", \"foo\", \"foo\", \"foo\");\r\n    } catch (final SQLException e) {\r\n        // ignore\r\n    }\r\n    verify(obj, times(1)).getColumnPrivileges(\"foo\", \"foo\", \"foo\", \"foo\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestDelegatingDatabaseMetaData.java",
  "methodName" : "testGetColumnsStringStringStringString",
  "sourceCode" : "@Test\r\nvoid testGetColumnsStringStringStringString() throws Exception {\r\n    try {\r\n        delegate.getColumns(\"foo\", \"foo\", \"foo\", \"foo\");\r\n    } catch (final SQLException e) {\r\n        // ignore\r\n    }\r\n    verify(obj, times(1)).getColumns(\"foo\", \"foo\", \"foo\", \"foo\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestDelegatingDatabaseMetaData.java",
  "methodName" : "testGetConnection",
  "sourceCode" : "/**\r\n * This method is a bit special, and doesn't call the method on the wrapped object, instead returning the connection from the delegate object itself.\r\n *\r\n * @throws Exception\r\n */\r\n@Test\r\nvoid testGetConnection() throws Exception {\r\n    try {\r\n        delegate.getConnection();\r\n    } catch (final SQLException e) {\r\n        // ignore\r\n    }\r\n    verify(obj, times(0)).getConnection();\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestDelegatingDatabaseMetaData.java",
  "methodName" : "testGetCrossReferenceStringStringStringStringStringString",
  "sourceCode" : "@Test\r\nvoid testGetCrossReferenceStringStringStringStringStringString() throws Exception {\r\n    try {\r\n        delegate.getCrossReference(\"foo\", \"foo\", \"foo\", \"foo\", \"foo\", \"foo\");\r\n    } catch (final SQLException e) {\r\n        // ignore\r\n    }\r\n    verify(obj, times(1)).getCrossReference(\"foo\", \"foo\", \"foo\", \"foo\", \"foo\", \"foo\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestDelegatingDatabaseMetaData.java",
  "methodName" : "testGetDatabaseMajorVersion",
  "sourceCode" : "@Test\r\nvoid testGetDatabaseMajorVersion() throws Exception {\r\n    try {\r\n        delegate.getDatabaseMajorVersion();\r\n    } catch (final SQLException e) {\r\n        // ignore\r\n    }\r\n    verify(obj, times(1)).getDatabaseMajorVersion();\r\n    // SQLException\r\n    Mockito.when(obj.getDatabaseMajorVersion()).thenThrow(SQLException.class);\r\n    // The default handler rethrows\r\n    assertThrows(SQLException.class, delegate::getDatabaseMajorVersion);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestDelegatingDatabaseMetaData.java",
  "methodName" : "testGetDatabaseMinorVersion",
  "sourceCode" : "@Test\r\nvoid testGetDatabaseMinorVersion() throws Exception {\r\n    try {\r\n        delegate.getDatabaseMinorVersion();\r\n    } catch (final SQLException e) {\r\n        // ignore\r\n    }\r\n    verify(obj, times(1)).getDatabaseMinorVersion();\r\n    // SQLException\r\n    Mockito.when(obj.getDatabaseMinorVersion()).thenThrow(SQLException.class);\r\n    // The default handler rethrows\r\n    assertThrows(SQLException.class, delegate::getDatabaseMinorVersion);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestDelegatingDatabaseMetaData.java",
  "methodName" : "testGetDatabaseProductName",
  "sourceCode" : "@Test\r\nvoid testGetDatabaseProductName() throws Exception {\r\n    try {\r\n        delegate.getDatabaseProductName();\r\n    } catch (final SQLException e) {\r\n        // ignore\r\n    }\r\n    verify(obj, times(1)).getDatabaseProductName();\r\n    // SQLException\r\n    Mockito.when(obj.getDatabaseProductName()).thenThrow(SQLException.class);\r\n    // The default handler rethrows\r\n    assertThrows(SQLException.class, delegate::getDatabaseProductName);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestDelegatingDatabaseMetaData.java",
  "methodName" : "testGetDatabaseProductVersion",
  "sourceCode" : "@Test\r\nvoid testGetDatabaseProductVersion() throws Exception {\r\n    try {\r\n        delegate.getDatabaseProductVersion();\r\n    } catch (final SQLException e) {\r\n        // ignore\r\n    }\r\n    verify(obj, times(1)).getDatabaseProductVersion();\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestDelegatingDatabaseMetaData.java",
  "methodName" : "testGetDefaultTransactionIsolation",
  "sourceCode" : "@Test\r\nvoid testGetDefaultTransactionIsolation() throws Exception {\r\n    try {\r\n        delegate.getDefaultTransactionIsolation();\r\n    } catch (final SQLException e) {\r\n        // ignore\r\n    }\r\n    verify(obj, times(1)).getDefaultTransactionIsolation();\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestDelegatingDatabaseMetaData.java",
  "methodName" : "testGetDelegate",
  "sourceCode" : "@Test\r\nvoid testGetDelegate() throws Exception {\r\n    assertEquals(obj, delegate.getDelegate());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestDelegatingDatabaseMetaData.java",
  "methodName" : "testGetDriverMajorVersion",
  "sourceCode" : "@Test\r\nvoid testGetDriverMajorVersion() throws Exception {\r\n    delegate.getDriverMajorVersion();\r\n    verify(obj, times(1)).getDriverMajorVersion();\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestDelegatingDatabaseMetaData.java",
  "methodName" : "testGetDriverMinorVersion",
  "sourceCode" : "@Test\r\nvoid testGetDriverMinorVersion() throws Exception {\r\n    delegate.getDriverMinorVersion();\r\n    verify(obj, times(1)).getDriverMinorVersion();\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestDelegatingDatabaseMetaData.java",
  "methodName" : "testGetDriverName",
  "sourceCode" : "@Test\r\nvoid testGetDriverName() throws Exception {\r\n    try {\r\n        delegate.getDriverName();\r\n    } catch (final SQLException e) {\r\n        // ignore\r\n    }\r\n    verify(obj, times(1)).getDriverName();\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestDelegatingDatabaseMetaData.java",
  "methodName" : "testGetDriverVersion",
  "sourceCode" : "@Test\r\nvoid testGetDriverVersion() throws Exception {\r\n    try {\r\n        delegate.getDriverVersion();\r\n    } catch (final SQLException e) {\r\n        // ignore\r\n    }\r\n    verify(obj, times(1)).getDriverVersion();\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestDelegatingDatabaseMetaData.java",
  "methodName" : "testGetExportedKeysStringStringString",
  "sourceCode" : "@Test\r\nvoid testGetExportedKeysStringStringString() throws Exception {\r\n    try {\r\n        delegate.getExportedKeys(\"foo\", \"foo\", \"foo\");\r\n    } catch (final SQLException e) {\r\n        // ignore\r\n    }\r\n    verify(obj, times(1)).getExportedKeys(\"foo\", \"foo\", \"foo\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestDelegatingDatabaseMetaData.java",
  "methodName" : "testGetExtraNameCharacters",
  "sourceCode" : "@Test\r\nvoid testGetExtraNameCharacters() throws Exception {\r\n    try {\r\n        delegate.getExtraNameCharacters();\r\n    } catch (final SQLException e) {\r\n        // ignore\r\n    }\r\n    verify(obj, times(1)).getExtraNameCharacters();\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestDelegatingDatabaseMetaData.java",
  "methodName" : "testGetFunctionColumnsStringStringStringString",
  "sourceCode" : "@Test\r\nvoid testGetFunctionColumnsStringStringStringString() throws Exception {\r\n    try {\r\n        delegate.getFunctionColumns(\"foo\", \"foo\", \"foo\", \"foo\");\r\n    } catch (final SQLException e) {\r\n        // ignore\r\n    }\r\n    verify(obj, times(1)).getFunctionColumns(\"foo\", \"foo\", \"foo\", \"foo\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestDelegatingDatabaseMetaData.java",
  "methodName" : "testGetFunctionsStringStringString",
  "sourceCode" : "@Test\r\nvoid testGetFunctionsStringStringString() throws Exception {\r\n    try {\r\n        delegate.getFunctions(\"foo\", \"foo\", \"foo\");\r\n    } catch (final SQLException e) {\r\n        // ignore\r\n    }\r\n    verify(obj, times(1)).getFunctions(\"foo\", \"foo\", \"foo\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestDelegatingDatabaseMetaData.java",
  "methodName" : "testGetIdentifierQuoteString",
  "sourceCode" : "@Test\r\nvoid testGetIdentifierQuoteString() throws Exception {\r\n    try {\r\n        delegate.getIdentifierQuoteString();\r\n    } catch (final SQLException e) {\r\n        // ignore\r\n    }\r\n    verify(obj, times(1)).getIdentifierQuoteString();\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestDelegatingDatabaseMetaData.java",
  "methodName" : "testGetImportedKeysStringStringString",
  "sourceCode" : "@Test\r\nvoid testGetImportedKeysStringStringString() throws Exception {\r\n    try {\r\n        delegate.getImportedKeys(\"foo\", \"foo\", \"foo\");\r\n    } catch (final SQLException e) {\r\n        // ignore\r\n    }\r\n    verify(obj, times(1)).getImportedKeys(\"foo\", \"foo\", \"foo\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestDelegatingDatabaseMetaData.java",
  "methodName" : "testGetIndexInfoStringStringStringBooleanBoolean",
  "sourceCode" : "@Test\r\nvoid testGetIndexInfoStringStringStringBooleanBoolean() throws Exception {\r\n    try {\r\n        delegate.getIndexInfo(\"foo\", \"foo\", \"foo\", Boolean.TRUE, Boolean.TRUE);\r\n    } catch (final SQLException e) {\r\n        // ignore\r\n    }\r\n    verify(obj, times(1)).getIndexInfo(\"foo\", \"foo\", \"foo\", Boolean.TRUE, Boolean.TRUE);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestDelegatingDatabaseMetaData.java",
  "methodName" : "testGetInnermostDelegate",
  "sourceCode" : "@Test\r\nvoid testGetInnermostDelegate() {\r\n    assertNotNull(delegate.getInnermostDelegate());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestDelegatingDatabaseMetaData.java",
  "methodName" : "testGetJDBCMajorVersion",
  "sourceCode" : "@Test\r\nvoid testGetJDBCMajorVersion() throws Exception {\r\n    try {\r\n        delegate.getJDBCMajorVersion();\r\n    } catch (final SQLException e) {\r\n        // ignore\r\n    }\r\n    verify(obj, times(1)).getJDBCMajorVersion();\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestDelegatingDatabaseMetaData.java",
  "methodName" : "testGetJDBCMinorVersion",
  "sourceCode" : "@Test\r\nvoid testGetJDBCMinorVersion() throws Exception {\r\n    try {\r\n        delegate.getJDBCMinorVersion();\r\n    } catch (final SQLException e) {\r\n        // ignore\r\n    }\r\n    verify(obj, times(1)).getJDBCMinorVersion();\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestDelegatingDatabaseMetaData.java",
  "methodName" : "testGetMaxBinaryLiteralLength",
  "sourceCode" : "@Test\r\nvoid testGetMaxBinaryLiteralLength() throws Exception {\r\n    try {\r\n        delegate.getMaxBinaryLiteralLength();\r\n    } catch (final SQLException e) {\r\n        // ignore\r\n    }\r\n    verify(obj, times(1)).getMaxBinaryLiteralLength();\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestDelegatingDatabaseMetaData.java",
  "methodName" : "testGetMaxCatalogNameLength",
  "sourceCode" : "@Test\r\nvoid testGetMaxCatalogNameLength() throws Exception {\r\n    try {\r\n        delegate.getMaxCatalogNameLength();\r\n    } catch (final SQLException e) {\r\n        // ignore\r\n    }\r\n    verify(obj, times(1)).getMaxCatalogNameLength();\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestDelegatingDatabaseMetaData.java",
  "methodName" : "testGetMaxCharLiteralLength",
  "sourceCode" : "@Test\r\nvoid testGetMaxCharLiteralLength() throws Exception {\r\n    try {\r\n        delegate.getMaxCharLiteralLength();\r\n    } catch (final SQLException e) {\r\n        // ignore\r\n    }\r\n    verify(obj, times(1)).getMaxCharLiteralLength();\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestDelegatingDatabaseMetaData.java",
  "methodName" : "testGetMaxColumnNameLength",
  "sourceCode" : "@Test\r\nvoid testGetMaxColumnNameLength() throws Exception {\r\n    try {\r\n        delegate.getMaxColumnNameLength();\r\n    } catch (final SQLException e) {\r\n        // ignore\r\n    }\r\n    verify(obj, times(1)).getMaxColumnNameLength();\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestDelegatingDatabaseMetaData.java",
  "methodName" : "testGetMaxColumnsInGroupBy",
  "sourceCode" : "@Test\r\nvoid testGetMaxColumnsInGroupBy() throws Exception {\r\n    try {\r\n        delegate.getMaxColumnsInGroupBy();\r\n    } catch (final SQLException e) {\r\n        // ignore\r\n    }\r\n    verify(obj, times(1)).getMaxColumnsInGroupBy();\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestDelegatingDatabaseMetaData.java",
  "methodName" : "testGetMaxColumnsInIndex",
  "sourceCode" : "@Test\r\nvoid testGetMaxColumnsInIndex() throws Exception {\r\n    try {\r\n        delegate.getMaxColumnsInIndex();\r\n    } catch (final SQLException e) {\r\n        // ignore\r\n    }\r\n    verify(obj, times(1)).getMaxColumnsInIndex();\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestDelegatingDatabaseMetaData.java",
  "methodName" : "testGetMaxColumnsInOrderBy",
  "sourceCode" : "@Test\r\nvoid testGetMaxColumnsInOrderBy() throws Exception {\r\n    try {\r\n        delegate.getMaxColumnsInOrderBy();\r\n    } catch (final SQLException e) {\r\n        // ignore\r\n    }\r\n    verify(obj, times(1)).getMaxColumnsInOrderBy();\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestDelegatingDatabaseMetaData.java",
  "methodName" : "testGetMaxColumnsInSelect",
  "sourceCode" : "@Test\r\nvoid testGetMaxColumnsInSelect() throws Exception {\r\n    try {\r\n        delegate.getMaxColumnsInSelect();\r\n    } catch (final SQLException e) {\r\n        // ignore\r\n    }\r\n    verify(obj, times(1)).getMaxColumnsInSelect();\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestDelegatingDatabaseMetaData.java",
  "methodName" : "testGetMaxColumnsInTable",
  "sourceCode" : "@Test\r\nvoid testGetMaxColumnsInTable() throws Exception {\r\n    try {\r\n        delegate.getMaxColumnsInTable();\r\n    } catch (final SQLException e) {\r\n        // ignore\r\n    }\r\n    verify(obj, times(1)).getMaxColumnsInTable();\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestDelegatingDatabaseMetaData.java",
  "methodName" : "testGetMaxConnections",
  "sourceCode" : "@Test\r\nvoid testGetMaxConnections() throws Exception {\r\n    try {\r\n        delegate.getMaxConnections();\r\n    } catch (final SQLException e) {\r\n        // ignore\r\n    }\r\n    verify(obj, times(1)).getMaxConnections();\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestDelegatingDatabaseMetaData.java",
  "methodName" : "testGetMaxCursorNameLength",
  "sourceCode" : "@Test\r\nvoid testGetMaxCursorNameLength() throws Exception {\r\n    try {\r\n        delegate.getMaxCursorNameLength();\r\n    } catch (final SQLException e) {\r\n        // ignore\r\n    }\r\n    verify(obj, times(1)).getMaxCursorNameLength();\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestDelegatingDatabaseMetaData.java",
  "methodName" : "testGetMaxIndexLength",
  "sourceCode" : "@Test\r\nvoid testGetMaxIndexLength() throws Exception {\r\n    try {\r\n        delegate.getMaxIndexLength();\r\n    } catch (final SQLException e) {\r\n        // ignore\r\n    }\r\n    verify(obj, times(1)).getMaxIndexLength();\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestDelegatingDatabaseMetaData.java",
  "methodName" : "testGetMaxLogicalLobSize",
  "sourceCode" : "@Test\r\nvoid testGetMaxLogicalLobSize() throws Exception {\r\n    try {\r\n        delegate.getMaxLogicalLobSize();\r\n    } catch (final SQLException e) {\r\n        // ignore\r\n    }\r\n    verify(obj, times(1)).getMaxLogicalLobSize();\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestDelegatingDatabaseMetaData.java",
  "methodName" : "testGetMaxProcedureNameLength",
  "sourceCode" : "@Test\r\nvoid testGetMaxProcedureNameLength() throws Exception {\r\n    try {\r\n        delegate.getMaxProcedureNameLength();\r\n    } catch (final SQLException e) {\r\n        // ignore\r\n    }\r\n    verify(obj, times(1)).getMaxProcedureNameLength();\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestDelegatingDatabaseMetaData.java",
  "methodName" : "testGetMaxRowSize",
  "sourceCode" : "@Test\r\nvoid testGetMaxRowSize() throws Exception {\r\n    try {\r\n        delegate.getMaxRowSize();\r\n    } catch (final SQLException e) {\r\n        // ignore\r\n    }\r\n    verify(obj, times(1)).getMaxRowSize();\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestDelegatingDatabaseMetaData.java",
  "methodName" : "testGetMaxSchemaNameLength",
  "sourceCode" : "@Test\r\nvoid testGetMaxSchemaNameLength() throws Exception {\r\n    try {\r\n        delegate.getMaxSchemaNameLength();\r\n    } catch (final SQLException e) {\r\n        // ignore\r\n    }\r\n    verify(obj, times(1)).getMaxSchemaNameLength();\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestDelegatingDatabaseMetaData.java",
  "methodName" : "testGetMaxStatementLength",
  "sourceCode" : "@Test\r\nvoid testGetMaxStatementLength() throws Exception {\r\n    try {\r\n        delegate.getMaxStatementLength();\r\n    } catch (final SQLException e) {\r\n        // ignore\r\n    }\r\n    verify(obj, times(1)).getMaxStatementLength();\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestDelegatingDatabaseMetaData.java",
  "methodName" : "testGetMaxStatements",
  "sourceCode" : "@Test\r\nvoid testGetMaxStatements() throws Exception {\r\n    try {\r\n        delegate.getMaxStatements();\r\n    } catch (final SQLException e) {\r\n        // ignore\r\n    }\r\n    verify(obj, times(1)).getMaxStatements();\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestDelegatingDatabaseMetaData.java",
  "methodName" : "testGetMaxTableNameLength",
  "sourceCode" : "@Test\r\nvoid testGetMaxTableNameLength() throws Exception {\r\n    try {\r\n        delegate.getMaxTableNameLength();\r\n    } catch (final SQLException e) {\r\n        // ignore\r\n    }\r\n    verify(obj, times(1)).getMaxTableNameLength();\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestDelegatingDatabaseMetaData.java",
  "methodName" : "testGetMaxTablesInSelect",
  "sourceCode" : "@Test\r\nvoid testGetMaxTablesInSelect() throws Exception {\r\n    try {\r\n        delegate.getMaxTablesInSelect();\r\n    } catch (final SQLException e) {\r\n        // ignore\r\n    }\r\n    verify(obj, times(1)).getMaxTablesInSelect();\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestDelegatingDatabaseMetaData.java",
  "methodName" : "testGetMaxUserNameLength",
  "sourceCode" : "@Test\r\nvoid testGetMaxUserNameLength() throws Exception {\r\n    try {\r\n        delegate.getMaxUserNameLength();\r\n    } catch (final SQLException e) {\r\n        // ignore\r\n    }\r\n    verify(obj, times(1)).getMaxUserNameLength();\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestDelegatingDatabaseMetaData.java",
  "methodName" : "testGetNumericFunctions",
  "sourceCode" : "@Test\r\nvoid testGetNumericFunctions() throws Exception {\r\n    try {\r\n        delegate.getNumericFunctions();\r\n    } catch (final SQLException e) {\r\n        // ignore\r\n    }\r\n    verify(obj, times(1)).getNumericFunctions();\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestDelegatingDatabaseMetaData.java",
  "methodName" : "testGetPrimaryKeysStringStringString",
  "sourceCode" : "@Test\r\nvoid testGetPrimaryKeysStringStringString() throws Exception {\r\n    try {\r\n        delegate.getPrimaryKeys(\"foo\", \"foo\", \"foo\");\r\n    } catch (final SQLException e) {\r\n        // ignore\r\n    }\r\n    verify(obj, times(1)).getPrimaryKeys(\"foo\", \"foo\", \"foo\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestDelegatingDatabaseMetaData.java",
  "methodName" : "testGetProcedureColumnsStringStringStringString",
  "sourceCode" : "@Test\r\nvoid testGetProcedureColumnsStringStringStringString() throws Exception {\r\n    try {\r\n        delegate.getProcedureColumns(\"foo\", \"foo\", \"foo\", \"foo\");\r\n    } catch (final SQLException e) {\r\n        // ignore\r\n    }\r\n    verify(obj, times(1)).getProcedureColumns(\"foo\", \"foo\", \"foo\", \"foo\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestDelegatingDatabaseMetaData.java",
  "methodName" : "testGetProceduresStringStringString",
  "sourceCode" : "@Test\r\nvoid testGetProceduresStringStringString() throws Exception {\r\n    try {\r\n        delegate.getProcedures(\"foo\", \"foo\", \"foo\");\r\n    } catch (final SQLException e) {\r\n        // ignore\r\n    }\r\n    verify(obj, times(1)).getProcedures(\"foo\", \"foo\", \"foo\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestDelegatingDatabaseMetaData.java",
  "methodName" : "testGetProcedureTerm",
  "sourceCode" : "@Test\r\nvoid testGetProcedureTerm() throws Exception {\r\n    try {\r\n        delegate.getProcedureTerm();\r\n    } catch (final SQLException e) {\r\n        // ignore\r\n    }\r\n    verify(obj, times(1)).getProcedureTerm();\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestDelegatingDatabaseMetaData.java",
  "methodName" : "testGetPseudoColumnsStringStringStringString",
  "sourceCode" : "@Test\r\nvoid testGetPseudoColumnsStringStringStringString() throws Exception {\r\n    try {\r\n        delegate.getPseudoColumns(\"foo\", \"foo\", \"foo\", \"foo\");\r\n    } catch (final SQLException e) {\r\n        // ignore\r\n    }\r\n    verify(obj, times(1)).getPseudoColumns(\"foo\", \"foo\", \"foo\", \"foo\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestDelegatingDatabaseMetaData.java",
  "methodName" : "testGetResultSetHoldability",
  "sourceCode" : "@Test\r\nvoid testGetResultSetHoldability() throws Exception {\r\n    try {\r\n        delegate.getResultSetHoldability();\r\n    } catch (final SQLException e) {\r\n        // ignore\r\n    }\r\n    verify(obj, times(1)).getResultSetHoldability();\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestDelegatingDatabaseMetaData.java",
  "methodName" : "testGetRowIdLifetime",
  "sourceCode" : "@Test\r\nvoid testGetRowIdLifetime() throws Exception {\r\n    try {\r\n        delegate.getRowIdLifetime();\r\n    } catch (final SQLException e) {\r\n        // ignore\r\n    }\r\n    verify(obj, times(1)).getRowIdLifetime();\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestDelegatingDatabaseMetaData.java",
  "methodName" : "testGetSchemas",
  "sourceCode" : "@Test\r\nvoid testGetSchemas() throws Exception {\r\n    try {\r\n        delegate.getSchemas();\r\n    } catch (final SQLException e) {\r\n        // ignore\r\n    }\r\n    verify(obj, times(1)).getSchemas();\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestDelegatingDatabaseMetaData.java",
  "methodName" : "testGetSchemasStringString",
  "sourceCode" : "@Test\r\nvoid testGetSchemasStringString() throws Exception {\r\n    try {\r\n        delegate.getSchemas(\"foo\", \"foo\");\r\n    } catch (final SQLException e) {\r\n        // ignore\r\n    }\r\n    verify(obj, times(1)).getSchemas(\"foo\", \"foo\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestDelegatingDatabaseMetaData.java",
  "methodName" : "testGetSchemaTerm",
  "sourceCode" : "@Test\r\nvoid testGetSchemaTerm() throws Exception {\r\n    try {\r\n        delegate.getSchemaTerm();\r\n    } catch (final SQLException e) {\r\n        // ignore\r\n    }\r\n    verify(obj, times(1)).getSchemaTerm();\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestDelegatingDatabaseMetaData.java",
  "methodName" : "testGetSearchStringEscape",
  "sourceCode" : "@Test\r\nvoid testGetSearchStringEscape() throws Exception {\r\n    try {\r\n        delegate.getSearchStringEscape();\r\n    } catch (final SQLException e) {\r\n        // ignore\r\n    }\r\n    verify(obj, times(1)).getSearchStringEscape();\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestDelegatingDatabaseMetaData.java",
  "methodName" : "testGetSQLKeywords",
  "sourceCode" : "@Test\r\nvoid testGetSQLKeywords() throws Exception {\r\n    try {\r\n        delegate.getSQLKeywords();\r\n    } catch (final SQLException e) {\r\n        // ignore\r\n    }\r\n    verify(obj, times(1)).getSQLKeywords();\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestDelegatingDatabaseMetaData.java",
  "methodName" : "testGetSQLStateType",
  "sourceCode" : "@Test\r\nvoid testGetSQLStateType() throws Exception {\r\n    try {\r\n        delegate.getSQLStateType();\r\n    } catch (final SQLException e) {\r\n        // ignore\r\n    }\r\n    verify(obj, times(1)).getSQLStateType();\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestDelegatingDatabaseMetaData.java",
  "methodName" : "testGetStringFunctions",
  "sourceCode" : "@Test\r\nvoid testGetStringFunctions() throws Exception {\r\n    try {\r\n        delegate.getStringFunctions();\r\n    } catch (final SQLException e) {\r\n        // ignore\r\n    }\r\n    verify(obj, times(1)).getStringFunctions();\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestDelegatingDatabaseMetaData.java",
  "methodName" : "testGetSuperTablesStringStringString",
  "sourceCode" : "@Test\r\nvoid testGetSuperTablesStringStringString() throws Exception {\r\n    try {\r\n        delegate.getSuperTables(\"foo\", \"foo\", \"foo\");\r\n    } catch (final SQLException e) {\r\n        // ignore\r\n    }\r\n    verify(obj, times(1)).getSuperTables(\"foo\", \"foo\", \"foo\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestDelegatingDatabaseMetaData.java",
  "methodName" : "testGetSuperTypesStringStringString",
  "sourceCode" : "@Test\r\nvoid testGetSuperTypesStringStringString() throws Exception {\r\n    try {\r\n        delegate.getSuperTypes(\"foo\", \"foo\", \"foo\");\r\n    } catch (final SQLException e) {\r\n        // ignore\r\n    }\r\n    verify(obj, times(1)).getSuperTypes(\"foo\", \"foo\", \"foo\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestDelegatingDatabaseMetaData.java",
  "methodName" : "testGetSystemFunctions",
  "sourceCode" : "@Test\r\nvoid testGetSystemFunctions() throws Exception {\r\n    try {\r\n        delegate.getSystemFunctions();\r\n    } catch (final SQLException e) {\r\n        // ignore\r\n    }\r\n    verify(obj, times(1)).getSystemFunctions();\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestDelegatingDatabaseMetaData.java",
  "methodName" : "testGetTablePrivilegesStringStringString",
  "sourceCode" : "@Test\r\nvoid testGetTablePrivilegesStringStringString() throws Exception {\r\n    try {\r\n        delegate.getTablePrivileges(\"foo\", \"foo\", \"foo\");\r\n    } catch (final SQLException e) {\r\n        // ignore\r\n    }\r\n    verify(obj, times(1)).getTablePrivileges(\"foo\", \"foo\", \"foo\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestDelegatingDatabaseMetaData.java",
  "methodName" : "testGetTablesStringStringStringStringArray",
  "sourceCode" : "@Test\r\nvoid testGetTablesStringStringStringStringArray() throws Exception {\r\n    try {\r\n        delegate.getTables(\"foo\", \"foo\", \"foo\", (String[]) null);\r\n    } catch (final SQLException e) {\r\n        // ignore\r\n    }\r\n    verify(obj, times(1)).getTables(\"foo\", \"foo\", \"foo\", (String[]) null);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestDelegatingDatabaseMetaData.java",
  "methodName" : "testGetTableTypes",
  "sourceCode" : "@Test\r\nvoid testGetTableTypes() throws Exception {\r\n    try {\r\n        delegate.getTableTypes();\r\n    } catch (final SQLException e) {\r\n        // ignore\r\n    }\r\n    verify(obj, times(1)).getTableTypes();\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestDelegatingDatabaseMetaData.java",
  "methodName" : "testGetTimeDateFunctions",
  "sourceCode" : "@Test\r\nvoid testGetTimeDateFunctions() throws Exception {\r\n    try {\r\n        delegate.getTimeDateFunctions();\r\n    } catch (final SQLException e) {\r\n        // ignore\r\n    }\r\n    verify(obj, times(1)).getTimeDateFunctions();\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestDelegatingDatabaseMetaData.java",
  "methodName" : "testGetTypeInfo",
  "sourceCode" : "@Test\r\nvoid testGetTypeInfo() throws Exception {\r\n    try {\r\n        delegate.getTypeInfo();\r\n    } catch (final SQLException e) {\r\n        // ignore\r\n    }\r\n    verify(obj, times(1)).getTypeInfo();\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestDelegatingDatabaseMetaData.java",
  "methodName" : "testGetUDTsStringStringStringIntegerArray",
  "sourceCode" : "@Test\r\nvoid testGetUDTsStringStringStringIntegerArray() throws Exception {\r\n    try {\r\n        delegate.getUDTs(\"foo\", \"foo\", \"foo\", (int[]) null);\r\n    } catch (final SQLException e) {\r\n        // ignore\r\n    }\r\n    verify(obj, times(1)).getUDTs(\"foo\", \"foo\", \"foo\", (int[]) null);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestDelegatingDatabaseMetaData.java",
  "methodName" : "testGetURL",
  "sourceCode" : "@Test\r\nvoid testGetURL() throws Exception {\r\n    try {\r\n        delegate.getURL();\r\n    } catch (final SQLException e) {\r\n        // ignore\r\n    }\r\n    verify(obj, times(1)).getURL();\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestDelegatingDatabaseMetaData.java",
  "methodName" : "testGetUserName",
  "sourceCode" : "@Test\r\nvoid testGetUserName() throws Exception {\r\n    try {\r\n        delegate.getUserName();\r\n    } catch (final SQLException e) {\r\n        // ignore\r\n    }\r\n    verify(obj, times(1)).getUserName();\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestDelegatingDatabaseMetaData.java",
  "methodName" : "testGetVersionColumnsStringStringString",
  "sourceCode" : "@Test\r\nvoid testGetVersionColumnsStringStringString() throws Exception {\r\n    try {\r\n        delegate.getVersionColumns(\"foo\", \"foo\", \"foo\");\r\n    } catch (final SQLException e) {\r\n        // ignore\r\n    }\r\n    verify(obj, times(1)).getVersionColumns(\"foo\", \"foo\", \"foo\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestDelegatingDatabaseMetaData.java",
  "methodName" : "testInsertsAreDetectedInteger",
  "sourceCode" : "@Test\r\nvoid testInsertsAreDetectedInteger() throws Exception {\r\n    try {\r\n        delegate.insertsAreDetected(1);\r\n    } catch (final SQLException e) {\r\n        // ignore\r\n    }\r\n    verify(obj, times(1)).insertsAreDetected(1);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestDelegatingDatabaseMetaData.java",
  "methodName" : "testIsCatalogAtStart",
  "sourceCode" : "@Test\r\nvoid testIsCatalogAtStart() throws Exception {\r\n    try {\r\n        delegate.isCatalogAtStart();\r\n    } catch (final SQLException e) {\r\n        // ignore\r\n    }\r\n    verify(obj, times(1)).isCatalogAtStart();\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestDelegatingDatabaseMetaData.java",
  "methodName" : "testIsReadOnly",
  "sourceCode" : "@Test\r\nvoid testIsReadOnly() throws Exception {\r\n    try {\r\n        delegate.isReadOnly();\r\n    } catch (final SQLException e) {\r\n        // ignore\r\n    }\r\n    verify(obj, times(1)).isReadOnly();\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestDelegatingDatabaseMetaData.java",
  "methodName" : "testLocatorsUpdateCopy",
  "sourceCode" : "@Test\r\nvoid testLocatorsUpdateCopy() throws Exception {\r\n    try {\r\n        delegate.locatorsUpdateCopy();\r\n    } catch (final SQLException e) {\r\n        // ignore\r\n    }\r\n    verify(obj, times(1)).locatorsUpdateCopy();\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestDelegatingDatabaseMetaData.java",
  "methodName" : "testNullArguments",
  "sourceCode" : "@Test\r\nvoid testNullArguments() throws Exception {\r\n    assertThrows(NullPointerException.class, () -> new DelegatingDatabaseMetaData(null, null));\r\n    assertThrows(NullPointerException.class, () -> new DelegatingDatabaseMetaData(new DelegatingConnection(null), null));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestDelegatingDatabaseMetaData.java",
  "methodName" : "testNullPlusNonNullIsNull",
  "sourceCode" : "@Test\r\nvoid testNullPlusNonNullIsNull() throws Exception {\r\n    try {\r\n        delegate.nullPlusNonNullIsNull();\r\n    } catch (final SQLException e) {\r\n        // ignore\r\n    }\r\n    verify(obj, times(1)).nullPlusNonNullIsNull();\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestDelegatingDatabaseMetaData.java",
  "methodName" : "testNullsAreSortedAtEnd",
  "sourceCode" : "@Test\r\nvoid testNullsAreSortedAtEnd() throws Exception {\r\n    try {\r\n        delegate.nullsAreSortedAtEnd();\r\n    } catch (final SQLException e) {\r\n        // ignore\r\n    }\r\n    verify(obj, times(1)).nullsAreSortedAtEnd();\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestDelegatingDatabaseMetaData.java",
  "methodName" : "testNullsAreSortedAtStart",
  "sourceCode" : "@Test\r\nvoid testNullsAreSortedAtStart() throws Exception {\r\n    try {\r\n        delegate.nullsAreSortedAtStart();\r\n    } catch (final SQLException e) {\r\n        // ignore\r\n    }\r\n    verify(obj, times(1)).nullsAreSortedAtStart();\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestDelegatingDatabaseMetaData.java",
  "methodName" : "testNullsAreSortedHigh",
  "sourceCode" : "@Test\r\nvoid testNullsAreSortedHigh() throws Exception {\r\n    try {\r\n        delegate.nullsAreSortedHigh();\r\n    } catch (final SQLException e) {\r\n        // ignore\r\n    }\r\n    verify(obj, times(1)).nullsAreSortedHigh();\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestDelegatingDatabaseMetaData.java",
  "methodName" : "testNullsAreSortedLow",
  "sourceCode" : "@Test\r\nvoid testNullsAreSortedLow() throws Exception {\r\n    try {\r\n        delegate.nullsAreSortedLow();\r\n    } catch (final SQLException e) {\r\n        // ignore\r\n    }\r\n    verify(obj, times(1)).nullsAreSortedLow();\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestDelegatingDatabaseMetaData.java",
  "methodName" : "testOthersDeletesAreVisibleInteger",
  "sourceCode" : "@Test\r\nvoid testOthersDeletesAreVisibleInteger() throws Exception {\r\n    try {\r\n        delegate.othersDeletesAreVisible(1);\r\n    } catch (final SQLException e) {\r\n        // ignore\r\n    }\r\n    verify(obj, times(1)).othersDeletesAreVisible(1);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestDelegatingDatabaseMetaData.java",
  "methodName" : "testOthersInsertsAreVisibleInteger",
  "sourceCode" : "@Test\r\nvoid testOthersInsertsAreVisibleInteger() throws Exception {\r\n    try {\r\n        delegate.othersInsertsAreVisible(1);\r\n    } catch (final SQLException e) {\r\n        // ignore\r\n    }\r\n    verify(obj, times(1)).othersInsertsAreVisible(1);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestDelegatingDatabaseMetaData.java",
  "methodName" : "testOthersUpdatesAreVisibleInteger",
  "sourceCode" : "@Test\r\nvoid testOthersUpdatesAreVisibleInteger() throws Exception {\r\n    try {\r\n        delegate.othersUpdatesAreVisible(1);\r\n    } catch (final SQLException e) {\r\n        // ignore\r\n    }\r\n    verify(obj, times(1)).othersUpdatesAreVisible(1);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestDelegatingDatabaseMetaData.java",
  "methodName" : "testOwnDeletesAreVisibleInteger",
  "sourceCode" : "@Test\r\nvoid testOwnDeletesAreVisibleInteger() throws Exception {\r\n    try {\r\n        delegate.ownDeletesAreVisible(1);\r\n    } catch (final SQLException e) {\r\n        // ignore\r\n    }\r\n    verify(obj, times(1)).ownDeletesAreVisible(1);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestDelegatingDatabaseMetaData.java",
  "methodName" : "testOwnInsertsAreVisibleInteger",
  "sourceCode" : "@Test\r\nvoid testOwnInsertsAreVisibleInteger() throws Exception {\r\n    try {\r\n        delegate.ownInsertsAreVisible(1);\r\n    } catch (final SQLException e) {\r\n        // ignore\r\n    }\r\n    verify(obj, times(1)).ownInsertsAreVisible(1);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestDelegatingDatabaseMetaData.java",
  "methodName" : "testOwnUpdatesAreVisibleInteger",
  "sourceCode" : "@Test\r\nvoid testOwnUpdatesAreVisibleInteger() throws Exception {\r\n    try {\r\n        delegate.ownUpdatesAreVisible(1);\r\n    } catch (final SQLException e) {\r\n        // ignore\r\n    }\r\n    verify(obj, times(1)).ownUpdatesAreVisible(1);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestDelegatingDatabaseMetaData.java",
  "methodName" : "testStoresLowerCaseIdentifiers",
  "sourceCode" : "@Test\r\nvoid testStoresLowerCaseIdentifiers() throws Exception {\r\n    try {\r\n        delegate.storesLowerCaseIdentifiers();\r\n    } catch (final SQLException e) {\r\n        // ignore\r\n    }\r\n    verify(obj, times(1)).storesLowerCaseIdentifiers();\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestDelegatingDatabaseMetaData.java",
  "methodName" : "testStoresLowerCaseQuotedIdentifiers",
  "sourceCode" : "@Test\r\nvoid testStoresLowerCaseQuotedIdentifiers() throws Exception {\r\n    try {\r\n        delegate.storesLowerCaseQuotedIdentifiers();\r\n    } catch (final SQLException e) {\r\n        // ignore\r\n    }\r\n    verify(obj, times(1)).storesLowerCaseQuotedIdentifiers();\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestDelegatingDatabaseMetaData.java",
  "methodName" : "testStoresMixedCaseIdentifiers",
  "sourceCode" : "@Test\r\nvoid testStoresMixedCaseIdentifiers() throws Exception {\r\n    try {\r\n        delegate.storesMixedCaseIdentifiers();\r\n    } catch (final SQLException e) {\r\n        // ignore\r\n    }\r\n    verify(obj, times(1)).storesMixedCaseIdentifiers();\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestDelegatingDatabaseMetaData.java",
  "methodName" : "testStoresMixedCaseQuotedIdentifiers",
  "sourceCode" : "@Test\r\nvoid testStoresMixedCaseQuotedIdentifiers() throws Exception {\r\n    try {\r\n        delegate.storesMixedCaseQuotedIdentifiers();\r\n    } catch (final SQLException e) {\r\n        // ignore\r\n    }\r\n    verify(obj, times(1)).storesMixedCaseQuotedIdentifiers();\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestDelegatingDatabaseMetaData.java",
  "methodName" : "testStoresUpperCaseIdentifiers",
  "sourceCode" : "@Test\r\nvoid testStoresUpperCaseIdentifiers() throws Exception {\r\n    try {\r\n        delegate.storesUpperCaseIdentifiers();\r\n    } catch (final SQLException e) {\r\n        // ignore\r\n    }\r\n    verify(obj, times(1)).storesUpperCaseIdentifiers();\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestDelegatingDatabaseMetaData.java",
  "methodName" : "testStoresUpperCaseQuotedIdentifiers",
  "sourceCode" : "@Test\r\nvoid testStoresUpperCaseQuotedIdentifiers() throws Exception {\r\n    try {\r\n        delegate.storesUpperCaseQuotedIdentifiers();\r\n    } catch (final SQLException e) {\r\n        // ignore\r\n    }\r\n    verify(obj, times(1)).storesUpperCaseQuotedIdentifiers();\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestDelegatingDatabaseMetaData.java",
  "methodName" : "testSupportsAlterTableWithAddColumn",
  "sourceCode" : "@Test\r\nvoid testSupportsAlterTableWithAddColumn() throws Exception {\r\n    try {\r\n        delegate.supportsAlterTableWithAddColumn();\r\n    } catch (final SQLException e) {\r\n        // ignore\r\n    }\r\n    verify(obj, times(1)).supportsAlterTableWithAddColumn();\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestDelegatingDatabaseMetaData.java",
  "methodName" : "testSupportsAlterTableWithDropColumn",
  "sourceCode" : "@Test\r\nvoid testSupportsAlterTableWithDropColumn() throws Exception {\r\n    try {\r\n        delegate.supportsAlterTableWithDropColumn();\r\n    } catch (final SQLException e) {\r\n        // ignore\r\n    }\r\n    verify(obj, times(1)).supportsAlterTableWithDropColumn();\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestDelegatingDatabaseMetaData.java",
  "methodName" : "testSupportsANSI92EntryLevelSQL",
  "sourceCode" : "@Test\r\nvoid testSupportsANSI92EntryLevelSQL() throws Exception {\r\n    try {\r\n        delegate.supportsANSI92EntryLevelSQL();\r\n    } catch (final SQLException e) {\r\n        // ignore\r\n    }\r\n    verify(obj, times(1)).supportsANSI92EntryLevelSQL();\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestDelegatingDatabaseMetaData.java",
  "methodName" : "testSupportsANSI92FullSQL",
  "sourceCode" : "@Test\r\nvoid testSupportsANSI92FullSQL() throws Exception {\r\n    try {\r\n        delegate.supportsANSI92FullSQL();\r\n    } catch (final SQLException e) {\r\n        // ignore\r\n    }\r\n    verify(obj, times(1)).supportsANSI92FullSQL();\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestDelegatingDatabaseMetaData.java",
  "methodName" : "testSupportsANSI92IntermediateSQL",
  "sourceCode" : "@Test\r\nvoid testSupportsANSI92IntermediateSQL() throws Exception {\r\n    try {\r\n        delegate.supportsANSI92IntermediateSQL();\r\n    } catch (final SQLException e) {\r\n        // ignore\r\n    }\r\n    verify(obj, times(1)).supportsANSI92IntermediateSQL();\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestDelegatingDatabaseMetaData.java",
  "methodName" : "testSupportsBatchUpdates",
  "sourceCode" : "@Test\r\nvoid testSupportsBatchUpdates() throws Exception {\r\n    try {\r\n        delegate.supportsBatchUpdates();\r\n    } catch (final SQLException e) {\r\n        // ignore\r\n    }\r\n    verify(obj, times(1)).supportsBatchUpdates();\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestDelegatingDatabaseMetaData.java",
  "methodName" : "testSupportsCatalogsInDataManipulation",
  "sourceCode" : "@Test\r\nvoid testSupportsCatalogsInDataManipulation() throws Exception {\r\n    try {\r\n        delegate.supportsCatalogsInDataManipulation();\r\n    } catch (final SQLException e) {\r\n        // ignore\r\n    }\r\n    verify(obj, times(1)).supportsCatalogsInDataManipulation();\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestDelegatingDatabaseMetaData.java",
  "methodName" : "testSupportsCatalogsInIndexDefinitions",
  "sourceCode" : "@Test\r\nvoid testSupportsCatalogsInIndexDefinitions() throws Exception {\r\n    try {\r\n        delegate.supportsCatalogsInIndexDefinitions();\r\n    } catch (final SQLException e) {\r\n        // ignore\r\n    }\r\n    verify(obj, times(1)).supportsCatalogsInIndexDefinitions();\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestDelegatingDatabaseMetaData.java",
  "methodName" : "testSupportsCatalogsInPrivilegeDefinitions",
  "sourceCode" : "@Test\r\nvoid testSupportsCatalogsInPrivilegeDefinitions() throws Exception {\r\n    try {\r\n        delegate.supportsCatalogsInPrivilegeDefinitions();\r\n    } catch (final SQLException e) {\r\n        // ignore\r\n    }\r\n    verify(obj, times(1)).supportsCatalogsInPrivilegeDefinitions();\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestDelegatingDatabaseMetaData.java",
  "methodName" : "testSupportsCatalogsInProcedureCalls",
  "sourceCode" : "@Test\r\nvoid testSupportsCatalogsInProcedureCalls() throws Exception {\r\n    try {\r\n        delegate.supportsCatalogsInProcedureCalls();\r\n    } catch (final SQLException e) {\r\n        // ignore\r\n    }\r\n    verify(obj, times(1)).supportsCatalogsInProcedureCalls();\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestDelegatingDatabaseMetaData.java",
  "methodName" : "testSupportsCatalogsInTableDefinitions",
  "sourceCode" : "@Test\r\nvoid testSupportsCatalogsInTableDefinitions() throws Exception {\r\n    try {\r\n        delegate.supportsCatalogsInTableDefinitions();\r\n    } catch (final SQLException e) {\r\n        // ignore\r\n    }\r\n    verify(obj, times(1)).supportsCatalogsInTableDefinitions();\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestDelegatingDatabaseMetaData.java",
  "methodName" : "testSupportsColumnAliasing",
  "sourceCode" : "@Test\r\nvoid testSupportsColumnAliasing() throws Exception {\r\n    try {\r\n        delegate.supportsColumnAliasing();\r\n    } catch (final SQLException e) {\r\n        // ignore\r\n    }\r\n    verify(obj, times(1)).supportsColumnAliasing();\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestDelegatingDatabaseMetaData.java",
  "methodName" : "testSupportsConvert",
  "sourceCode" : "@Test\r\nvoid testSupportsConvert() throws Exception {\r\n    try {\r\n        delegate.supportsConvert();\r\n    } catch (final SQLException e) {\r\n        // ignore\r\n    }\r\n    verify(obj, times(1)).supportsConvert();\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestDelegatingDatabaseMetaData.java",
  "methodName" : "testSupportsConvertIntegerInteger",
  "sourceCode" : "@Test\r\nvoid testSupportsConvertIntegerInteger() throws Exception {\r\n    try {\r\n        delegate.supportsConvert(1, 1);\r\n    } catch (final SQLException e) {\r\n        // ignore\r\n    }\r\n    verify(obj, times(1)).supportsConvert(1, 1);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestDelegatingDatabaseMetaData.java",
  "methodName" : "testSupportsCoreSQLGrammar",
  "sourceCode" : "@Test\r\nvoid testSupportsCoreSQLGrammar() throws Exception {\r\n    try {\r\n        delegate.supportsCoreSQLGrammar();\r\n    } catch (final SQLException e) {\r\n        // ignore\r\n    }\r\n    verify(obj, times(1)).supportsCoreSQLGrammar();\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestDelegatingDatabaseMetaData.java",
  "methodName" : "testSupportsCorrelatedSubqueries",
  "sourceCode" : "@Test\r\nvoid testSupportsCorrelatedSubqueries() throws Exception {\r\n    try {\r\n        delegate.supportsCorrelatedSubqueries();\r\n    } catch (final SQLException e) {\r\n        // ignore\r\n    }\r\n    verify(obj, times(1)).supportsCorrelatedSubqueries();\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestDelegatingDatabaseMetaData.java",
  "methodName" : "testSupportsDataDefinitionAndDataManipulationTransactions",
  "sourceCode" : "@Test\r\nvoid testSupportsDataDefinitionAndDataManipulationTransactions() throws Exception {\r\n    try {\r\n        delegate.supportsDataDefinitionAndDataManipulationTransactions();\r\n    } catch (final SQLException e) {\r\n        // ignore\r\n    }\r\n    verify(obj, times(1)).supportsDataDefinitionAndDataManipulationTransactions();\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestDelegatingDatabaseMetaData.java",
  "methodName" : "testSupportsDataManipulationTransactionsOnly",
  "sourceCode" : "@Test\r\nvoid testSupportsDataManipulationTransactionsOnly() throws Exception {\r\n    try {\r\n        delegate.supportsDataManipulationTransactionsOnly();\r\n    } catch (final SQLException e) {\r\n        // ignore\r\n    }\r\n    verify(obj, times(1)).supportsDataManipulationTransactionsOnly();\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestDelegatingDatabaseMetaData.java",
  "methodName" : "testSupportsDifferentTableCorrelationNames",
  "sourceCode" : "@Test\r\nvoid testSupportsDifferentTableCorrelationNames() throws Exception {\r\n    try {\r\n        delegate.supportsDifferentTableCorrelationNames();\r\n    } catch (final SQLException e) {\r\n        // ignore\r\n    }\r\n    verify(obj, times(1)).supportsDifferentTableCorrelationNames();\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestDelegatingDatabaseMetaData.java",
  "methodName" : "testSupportsExpressionsInOrderBy",
  "sourceCode" : "@Test\r\nvoid testSupportsExpressionsInOrderBy() throws Exception {\r\n    try {\r\n        delegate.supportsExpressionsInOrderBy();\r\n    } catch (final SQLException e) {\r\n        // ignore\r\n    }\r\n    verify(obj, times(1)).supportsExpressionsInOrderBy();\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestDelegatingDatabaseMetaData.java",
  "methodName" : "testSupportsExtendedSQLGrammar",
  "sourceCode" : "@Test\r\nvoid testSupportsExtendedSQLGrammar() throws Exception {\r\n    try {\r\n        delegate.supportsExtendedSQLGrammar();\r\n    } catch (final SQLException e) {\r\n        // ignore\r\n    }\r\n    verify(obj, times(1)).supportsExtendedSQLGrammar();\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestDelegatingDatabaseMetaData.java",
  "methodName" : "testSupportsFullOuterJoins",
  "sourceCode" : "@Test\r\nvoid testSupportsFullOuterJoins() throws Exception {\r\n    try {\r\n        delegate.supportsFullOuterJoins();\r\n    } catch (final SQLException e) {\r\n        // ignore\r\n    }\r\n    verify(obj, times(1)).supportsFullOuterJoins();\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestDelegatingDatabaseMetaData.java",
  "methodName" : "testSupportsGetGeneratedKeys",
  "sourceCode" : "@Test\r\nvoid testSupportsGetGeneratedKeys() throws Exception {\r\n    try {\r\n        delegate.supportsGetGeneratedKeys();\r\n    } catch (final SQLException e) {\r\n        // ignore\r\n    }\r\n    verify(obj, times(1)).supportsGetGeneratedKeys();\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestDelegatingDatabaseMetaData.java",
  "methodName" : "testSupportsGroupBy",
  "sourceCode" : "@Test\r\nvoid testSupportsGroupBy() throws Exception {\r\n    try {\r\n        delegate.supportsGroupBy();\r\n    } catch (final SQLException e) {\r\n        // ignore\r\n    }\r\n    verify(obj, times(1)).supportsGroupBy();\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestDelegatingDatabaseMetaData.java",
  "methodName" : "testSupportsGroupByBeyondSelect",
  "sourceCode" : "@Test\r\nvoid testSupportsGroupByBeyondSelect() throws Exception {\r\n    try {\r\n        delegate.supportsGroupByBeyondSelect();\r\n    } catch (final SQLException e) {\r\n        // ignore\r\n    }\r\n    verify(obj, times(1)).supportsGroupByBeyondSelect();\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestDelegatingDatabaseMetaData.java",
  "methodName" : "testSupportsGroupByUnrelated",
  "sourceCode" : "@Test\r\nvoid testSupportsGroupByUnrelated() throws Exception {\r\n    try {\r\n        delegate.supportsGroupByUnrelated();\r\n    } catch (final SQLException e) {\r\n        // ignore\r\n    }\r\n    verify(obj, times(1)).supportsGroupByUnrelated();\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestDelegatingDatabaseMetaData.java",
  "methodName" : "testSupportsIntegrityEnhancementFacility",
  "sourceCode" : "@Test\r\nvoid testSupportsIntegrityEnhancementFacility() throws Exception {\r\n    try {\r\n        delegate.supportsIntegrityEnhancementFacility();\r\n    } catch (final SQLException e) {\r\n        // ignore\r\n    }\r\n    verify(obj, times(1)).supportsIntegrityEnhancementFacility();\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestDelegatingDatabaseMetaData.java",
  "methodName" : "testSupportsLikeEscapeClause",
  "sourceCode" : "@Test\r\nvoid testSupportsLikeEscapeClause() throws Exception {\r\n    try {\r\n        delegate.supportsLikeEscapeClause();\r\n    } catch (final SQLException e) {\r\n        // ignore\r\n    }\r\n    verify(obj, times(1)).supportsLikeEscapeClause();\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestDelegatingDatabaseMetaData.java",
  "methodName" : "testSupportsLimitedOuterJoins",
  "sourceCode" : "@Test\r\nvoid testSupportsLimitedOuterJoins() throws Exception {\r\n    try {\r\n        delegate.supportsLimitedOuterJoins();\r\n    } catch (final SQLException e) {\r\n        // ignore\r\n    }\r\n    verify(obj, times(1)).supportsLimitedOuterJoins();\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestDelegatingDatabaseMetaData.java",
  "methodName" : "testSupportsMinimumSQLGrammar",
  "sourceCode" : "@Test\r\nvoid testSupportsMinimumSQLGrammar() throws Exception {\r\n    try {\r\n        delegate.supportsMinimumSQLGrammar();\r\n    } catch (final SQLException e) {\r\n        // ignore\r\n    }\r\n    verify(obj, times(1)).supportsMinimumSQLGrammar();\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestDelegatingDatabaseMetaData.java",
  "methodName" : "testSupportsMixedCaseIdentifiers",
  "sourceCode" : "@Test\r\nvoid testSupportsMixedCaseIdentifiers() throws Exception {\r\n    try {\r\n        delegate.supportsMixedCaseIdentifiers();\r\n    } catch (final SQLException e) {\r\n        // ignore\r\n    }\r\n    verify(obj, times(1)).supportsMixedCaseIdentifiers();\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestDelegatingDatabaseMetaData.java",
  "methodName" : "testSupportsMixedCaseQuotedIdentifiers",
  "sourceCode" : "@Test\r\nvoid testSupportsMixedCaseQuotedIdentifiers() throws Exception {\r\n    try {\r\n        delegate.supportsMixedCaseQuotedIdentifiers();\r\n    } catch (final SQLException e) {\r\n        // ignore\r\n    }\r\n    verify(obj, times(1)).supportsMixedCaseQuotedIdentifiers();\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestDelegatingDatabaseMetaData.java",
  "methodName" : "testSupportsMultipleOpenResults",
  "sourceCode" : "@Test\r\nvoid testSupportsMultipleOpenResults() throws Exception {\r\n    try {\r\n        delegate.supportsMultipleOpenResults();\r\n    } catch (final SQLException e) {\r\n        // ignore\r\n    }\r\n    verify(obj, times(1)).supportsMultipleOpenResults();\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestDelegatingDatabaseMetaData.java",
  "methodName" : "testSupportsMultipleResultSets",
  "sourceCode" : "@Test\r\nvoid testSupportsMultipleResultSets() throws Exception {\r\n    try {\r\n        delegate.supportsMultipleResultSets();\r\n    } catch (final SQLException e) {\r\n        // ignore\r\n    }\r\n    verify(obj, times(1)).supportsMultipleResultSets();\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestDelegatingDatabaseMetaData.java",
  "methodName" : "testSupportsMultipleTransactions",
  "sourceCode" : "@Test\r\nvoid testSupportsMultipleTransactions() throws Exception {\r\n    try {\r\n        delegate.supportsMultipleTransactions();\r\n    } catch (final SQLException e) {\r\n        // ignore\r\n    }\r\n    verify(obj, times(1)).supportsMultipleTransactions();\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestDelegatingDatabaseMetaData.java",
  "methodName" : "testSupportsNamedParameters",
  "sourceCode" : "@Test\r\nvoid testSupportsNamedParameters() throws Exception {\r\n    try {\r\n        delegate.supportsNamedParameters();\r\n    } catch (final SQLException e) {\r\n        // ignore\r\n    }\r\n    verify(obj, times(1)).supportsNamedParameters();\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestDelegatingDatabaseMetaData.java",
  "methodName" : "testSupportsNonNullableColumns",
  "sourceCode" : "@Test\r\nvoid testSupportsNonNullableColumns() throws Exception {\r\n    try {\r\n        delegate.supportsNonNullableColumns();\r\n    } catch (final SQLException e) {\r\n        // ignore\r\n    }\r\n    verify(obj, times(1)).supportsNonNullableColumns();\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestDelegatingDatabaseMetaData.java",
  "methodName" : "testSupportsOpenCursorsAcrossCommit",
  "sourceCode" : "@Test\r\nvoid testSupportsOpenCursorsAcrossCommit() throws Exception {\r\n    try {\r\n        delegate.supportsOpenCursorsAcrossCommit();\r\n    } catch (final SQLException e) {\r\n        // ignore\r\n    }\r\n    verify(obj, times(1)).supportsOpenCursorsAcrossCommit();\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestDelegatingDatabaseMetaData.java",
  "methodName" : "testSupportsOpenCursorsAcrossRollback",
  "sourceCode" : "@Test\r\nvoid testSupportsOpenCursorsAcrossRollback() throws Exception {\r\n    try {\r\n        delegate.supportsOpenCursorsAcrossRollback();\r\n    } catch (final SQLException e) {\r\n        // ignore\r\n    }\r\n    verify(obj, times(1)).supportsOpenCursorsAcrossRollback();\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestDelegatingDatabaseMetaData.java",
  "methodName" : "testSupportsOpenStatementsAcrossCommit",
  "sourceCode" : "@Test\r\nvoid testSupportsOpenStatementsAcrossCommit() throws Exception {\r\n    try {\r\n        delegate.supportsOpenStatementsAcrossCommit();\r\n    } catch (final SQLException e) {\r\n        // ignore\r\n    }\r\n    verify(obj, times(1)).supportsOpenStatementsAcrossCommit();\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestDelegatingDatabaseMetaData.java",
  "methodName" : "testSupportsOpenStatementsAcrossRollback",
  "sourceCode" : "@Test\r\nvoid testSupportsOpenStatementsAcrossRollback() throws Exception {\r\n    try {\r\n        delegate.supportsOpenStatementsAcrossRollback();\r\n    } catch (final SQLException e) {\r\n        // ignore\r\n    }\r\n    verify(obj, times(1)).supportsOpenStatementsAcrossRollback();\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestDelegatingDatabaseMetaData.java",
  "methodName" : "testSupportsOrderByUnrelated",
  "sourceCode" : "@Test\r\nvoid testSupportsOrderByUnrelated() throws Exception {\r\n    try {\r\n        delegate.supportsOrderByUnrelated();\r\n    } catch (final SQLException e) {\r\n        // ignore\r\n    }\r\n    verify(obj, times(1)).supportsOrderByUnrelated();\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestDelegatingDatabaseMetaData.java",
  "methodName" : "testSupportsOuterJoins",
  "sourceCode" : "@Test\r\nvoid testSupportsOuterJoins() throws Exception {\r\n    try {\r\n        delegate.supportsOuterJoins();\r\n    } catch (final SQLException e) {\r\n        // ignore\r\n    }\r\n    verify(obj, times(1)).supportsOuterJoins();\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestDelegatingDatabaseMetaData.java",
  "methodName" : "testSupportsPositionedDelete",
  "sourceCode" : "@Test\r\nvoid testSupportsPositionedDelete() throws Exception {\r\n    try {\r\n        delegate.supportsPositionedDelete();\r\n    } catch (final SQLException e) {\r\n        // ignore\r\n    }\r\n    verify(obj, times(1)).supportsPositionedDelete();\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestDelegatingDatabaseMetaData.java",
  "methodName" : "testSupportsPositionedUpdate",
  "sourceCode" : "@Test\r\nvoid testSupportsPositionedUpdate() throws Exception {\r\n    try {\r\n        delegate.supportsPositionedUpdate();\r\n    } catch (final SQLException e) {\r\n        // ignore\r\n    }\r\n    verify(obj, times(1)).supportsPositionedUpdate();\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestDelegatingDatabaseMetaData.java",
  "methodName" : "testSupportsRefCursors",
  "sourceCode" : "@Test\r\nvoid testSupportsRefCursors() throws Exception {\r\n    try {\r\n        delegate.supportsRefCursors();\r\n    } catch (final SQLException e) {\r\n        // ignore\r\n    }\r\n    verify(obj, times(1)).supportsRefCursors();\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestDelegatingDatabaseMetaData.java",
  "methodName" : "testSupportsResultSetConcurrencyIntegerInteger",
  "sourceCode" : "@Test\r\nvoid testSupportsResultSetConcurrencyIntegerInteger() throws Exception {\r\n    try {\r\n        delegate.supportsResultSetConcurrency(1, 1);\r\n    } catch (final SQLException e) {\r\n        // ignore\r\n    }\r\n    verify(obj, times(1)).supportsResultSetConcurrency(1, 1);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestDelegatingDatabaseMetaData.java",
  "methodName" : "testSupportsResultSetHoldabilityInteger",
  "sourceCode" : "@Test\r\nvoid testSupportsResultSetHoldabilityInteger() throws Exception {\r\n    try {\r\n        delegate.supportsResultSetHoldability(1);\r\n    } catch (final SQLException e) {\r\n        // ignore\r\n    }\r\n    verify(obj, times(1)).supportsResultSetHoldability(1);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestDelegatingDatabaseMetaData.java",
  "methodName" : "testSupportsResultSetTypeInteger",
  "sourceCode" : "@Test\r\nvoid testSupportsResultSetTypeInteger() throws Exception {\r\n    try {\r\n        delegate.supportsResultSetType(1);\r\n    } catch (final SQLException e) {\r\n        // ignore\r\n    }\r\n    verify(obj, times(1)).supportsResultSetType(1);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestDelegatingDatabaseMetaData.java",
  "methodName" : "testSupportsSavepoints",
  "sourceCode" : "@Test\r\nvoid testSupportsSavepoints() throws Exception {\r\n    try {\r\n        delegate.supportsSavepoints();\r\n    } catch (final SQLException e) {\r\n        // ignore\r\n    }\r\n    verify(obj, times(1)).supportsSavepoints();\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestDelegatingDatabaseMetaData.java",
  "methodName" : "testSupportsSchemasInDataManipulation",
  "sourceCode" : "@Test\r\nvoid testSupportsSchemasInDataManipulation() throws Exception {\r\n    try {\r\n        delegate.supportsSchemasInDataManipulation();\r\n    } catch (final SQLException e) {\r\n        // ignore\r\n    }\r\n    verify(obj, times(1)).supportsSchemasInDataManipulation();\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestDelegatingDatabaseMetaData.java",
  "methodName" : "testSupportsSchemasInIndexDefinitions",
  "sourceCode" : "@Test\r\nvoid testSupportsSchemasInIndexDefinitions() throws Exception {\r\n    try {\r\n        delegate.supportsSchemasInIndexDefinitions();\r\n    } catch (final SQLException e) {\r\n        // ignore\r\n    }\r\n    verify(obj, times(1)).supportsSchemasInIndexDefinitions();\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestDelegatingDatabaseMetaData.java",
  "methodName" : "testSupportsSchemasInPrivilegeDefinitions",
  "sourceCode" : "@Test\r\nvoid testSupportsSchemasInPrivilegeDefinitions() throws Exception {\r\n    try {\r\n        delegate.supportsSchemasInPrivilegeDefinitions();\r\n    } catch (final SQLException e) {\r\n        // ignore\r\n    }\r\n    verify(obj, times(1)).supportsSchemasInPrivilegeDefinitions();\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestDelegatingDatabaseMetaData.java",
  "methodName" : "testSupportsSchemasInProcedureCalls",
  "sourceCode" : "@Test\r\nvoid testSupportsSchemasInProcedureCalls() throws Exception {\r\n    try {\r\n        delegate.supportsSchemasInProcedureCalls();\r\n    } catch (final SQLException e) {\r\n        // ignore\r\n    }\r\n    verify(obj, times(1)).supportsSchemasInProcedureCalls();\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestDelegatingDatabaseMetaData.java",
  "methodName" : "testSupportsSchemasInTableDefinitions",
  "sourceCode" : "@Test\r\nvoid testSupportsSchemasInTableDefinitions() throws Exception {\r\n    try {\r\n        delegate.supportsSchemasInTableDefinitions();\r\n    } catch (final SQLException e) {\r\n        // ignore\r\n    }\r\n    verify(obj, times(1)).supportsSchemasInTableDefinitions();\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestDelegatingDatabaseMetaData.java",
  "methodName" : "testSupportsSelectForUpdate",
  "sourceCode" : "@Test\r\nvoid testSupportsSelectForUpdate() throws Exception {\r\n    try {\r\n        delegate.supportsSelectForUpdate();\r\n    } catch (final SQLException e) {\r\n        // ignore\r\n    }\r\n    verify(obj, times(1)).supportsSelectForUpdate();\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestDelegatingDatabaseMetaData.java",
  "methodName" : "testSupportsStatementPooling",
  "sourceCode" : "@Test\r\nvoid testSupportsStatementPooling() throws Exception {\r\n    try {\r\n        delegate.supportsStatementPooling();\r\n    } catch (final SQLException e) {\r\n        // ignore\r\n    }\r\n    verify(obj, times(1)).supportsStatementPooling();\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestDelegatingDatabaseMetaData.java",
  "methodName" : "testSupportsStoredFunctionsUsingCallSyntax",
  "sourceCode" : "@Test\r\nvoid testSupportsStoredFunctionsUsingCallSyntax() throws Exception {\r\n    try {\r\n        delegate.supportsStoredFunctionsUsingCallSyntax();\r\n    } catch (final SQLException e) {\r\n        // ignore\r\n    }\r\n    verify(obj, times(1)).supportsStoredFunctionsUsingCallSyntax();\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestDelegatingDatabaseMetaData.java",
  "methodName" : "testSupportsStoredProcedures",
  "sourceCode" : "@Test\r\nvoid testSupportsStoredProcedures() throws Exception {\r\n    try {\r\n        delegate.supportsStoredProcedures();\r\n    } catch (final SQLException e) {\r\n        // ignore\r\n    }\r\n    verify(obj, times(1)).supportsStoredProcedures();\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestDelegatingDatabaseMetaData.java",
  "methodName" : "testSupportsSubqueriesInComparisons",
  "sourceCode" : "@Test\r\nvoid testSupportsSubqueriesInComparisons() throws Exception {\r\n    try {\r\n        delegate.supportsSubqueriesInComparisons();\r\n    } catch (final SQLException e) {\r\n        // ignore\r\n    }\r\n    verify(obj, times(1)).supportsSubqueriesInComparisons();\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestDelegatingDatabaseMetaData.java",
  "methodName" : "testSupportsSubqueriesInExists",
  "sourceCode" : "@Test\r\nvoid testSupportsSubqueriesInExists() throws Exception {\r\n    try {\r\n        delegate.supportsSubqueriesInExists();\r\n    } catch (final SQLException e) {\r\n        // ignore\r\n    }\r\n    verify(obj, times(1)).supportsSubqueriesInExists();\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestDelegatingDatabaseMetaData.java",
  "methodName" : "testSupportsSubqueriesInIns",
  "sourceCode" : "@Test\r\nvoid testSupportsSubqueriesInIns() throws Exception {\r\n    try {\r\n        delegate.supportsSubqueriesInIns();\r\n    } catch (final SQLException e) {\r\n        // ignore\r\n    }\r\n    verify(obj, times(1)).supportsSubqueriesInIns();\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestDelegatingDatabaseMetaData.java",
  "methodName" : "testSupportsSubqueriesInQuantifieds",
  "sourceCode" : "@Test\r\nvoid testSupportsSubqueriesInQuantifieds() throws Exception {\r\n    try {\r\n        delegate.supportsSubqueriesInQuantifieds();\r\n    } catch (final SQLException e) {\r\n        // ignore\r\n    }\r\n    verify(obj, times(1)).supportsSubqueriesInQuantifieds();\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestDelegatingDatabaseMetaData.java",
  "methodName" : "testSupportsTableCorrelationNames",
  "sourceCode" : "@Test\r\nvoid testSupportsTableCorrelationNames() throws Exception {\r\n    try {\r\n        delegate.supportsTableCorrelationNames();\r\n    } catch (final SQLException e) {\r\n        // ignore\r\n    }\r\n    verify(obj, times(1)).supportsTableCorrelationNames();\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestDelegatingDatabaseMetaData.java",
  "methodName" : "testSupportsTransactionIsolationLevelInteger",
  "sourceCode" : "@Test\r\nvoid testSupportsTransactionIsolationLevelInteger() throws Exception {\r\n    try {\r\n        delegate.supportsTransactionIsolationLevel(1);\r\n    } catch (final SQLException e) {\r\n        // ignore\r\n    }\r\n    verify(obj, times(1)).supportsTransactionIsolationLevel(1);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestDelegatingDatabaseMetaData.java",
  "methodName" : "testSupportsTransactions",
  "sourceCode" : "@Test\r\nvoid testSupportsTransactions() throws Exception {\r\n    try {\r\n        delegate.supportsTransactions();\r\n    } catch (final SQLException e) {\r\n        // ignore\r\n    }\r\n    verify(obj, times(1)).supportsTransactions();\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestDelegatingDatabaseMetaData.java",
  "methodName" : "testSupportsUnion",
  "sourceCode" : "@Test\r\nvoid testSupportsUnion() throws Exception {\r\n    try {\r\n        delegate.supportsUnion();\r\n    } catch (final SQLException e) {\r\n        // ignore\r\n    }\r\n    verify(obj, times(1)).supportsUnion();\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestDelegatingDatabaseMetaData.java",
  "methodName" : "testSupportsUnionAll",
  "sourceCode" : "@Test\r\nvoid testSupportsUnionAll() throws Exception {\r\n    try {\r\n        delegate.supportsUnionAll();\r\n    } catch (final SQLException e) {\r\n        // ignore\r\n    }\r\n    verify(obj, times(1)).supportsUnionAll();\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestDelegatingDatabaseMetaData.java",
  "methodName" : "testUpdatesAreDetectedInteger",
  "sourceCode" : "@Test\r\nvoid testUpdatesAreDetectedInteger() throws Exception {\r\n    try {\r\n        delegate.updatesAreDetected(1);\r\n    } catch (final SQLException e) {\r\n        // ignore\r\n    }\r\n    verify(obj, times(1)).updatesAreDetected(1);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestDelegatingDatabaseMetaData.java",
  "methodName" : "testUsesLocalFilePerTable",
  "sourceCode" : "@Test\r\nvoid testUsesLocalFilePerTable() throws Exception {\r\n    try {\r\n        delegate.usesLocalFilePerTable();\r\n    } catch (final SQLException e) {\r\n        // ignore\r\n    }\r\n    verify(obj, times(1)).usesLocalFilePerTable();\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestDelegatingDatabaseMetaData.java",
  "methodName" : "testUsesLocalFiles",
  "sourceCode" : "@Test\r\nvoid testUsesLocalFiles() throws Exception {\r\n    try {\r\n        delegate.usesLocalFiles();\r\n    } catch (final SQLException e) {\r\n        // ignore\r\n    }\r\n    verify(obj, times(1)).usesLocalFiles();\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestDelegatingDatabaseMetaData.java",
  "methodName" : "testWrap",
  "sourceCode" : "@Test\r\nvoid testWrap() throws SQLException {\r\n    assertEquals(delegate, delegate.unwrap(DatabaseMetaData.class));\r\n    assertEquals(delegate, delegate.unwrap(DelegatingDatabaseMetaData.class));\r\n    assertEquals(obj, delegate.unwrap(obj.getClass()));\r\n    assertNull(delegate.unwrap(String.class));\r\n    assertTrue(delegate.isWrapperFor(DatabaseMetaData.class));\r\n    assertTrue(delegate.isWrapperFor(DelegatingDatabaseMetaData.class));\r\n    assertTrue(delegate.isWrapperFor(obj.getClass()));\r\n    assertFalse(delegate.isWrapperFor(String.class));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestDelegatingPreparedStatement.java",
  "methodName" : "testAddBatch",
  "sourceCode" : "@Test\r\nvoid testAddBatch() throws Exception {\r\n    try {\r\n        delegate.addBatch();\r\n    } catch (final SQLException e) {\r\n    }\r\n    verify(obj, times(1)).addBatch();\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestDelegatingPreparedStatement.java",
  "methodName" : "testClearParameters",
  "sourceCode" : "@Test\r\nvoid testClearParameters() throws Exception {\r\n    try {\r\n        delegate.clearParameters();\r\n    } catch (final SQLException e) {\r\n    }\r\n    verify(obj, times(1)).clearParameters();\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestDelegatingPreparedStatement.java",
  "methodName" : "testExecute",
  "sourceCode" : "@Test\r\nvoid testExecute() throws Exception {\r\n    try {\r\n        delegate.execute();\r\n    } catch (final SQLException e) {\r\n    }\r\n    verify(obj, times(1)).execute();\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestDelegatingPreparedStatement.java",
  "methodName" : "testExecuteLargeUpdate",
  "sourceCode" : "@Test\r\nvoid testExecuteLargeUpdate() throws Exception {\r\n    try {\r\n        delegate.executeLargeUpdate();\r\n    } catch (final SQLException e) {\r\n    }\r\n    verify(obj, times(1)).executeLargeUpdate();\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestDelegatingPreparedStatement.java",
  "methodName" : "testExecuteQuery",
  "sourceCode" : "@Test\r\nvoid testExecuteQuery() throws Exception {\r\n    try {\r\n        delegate.executeQuery();\r\n    } catch (final SQLException e) {\r\n    }\r\n    verify(obj, times(1)).executeQuery();\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestDelegatingPreparedStatement.java",
  "methodName" : "testExecuteQueryReturnsNotNull",
  "sourceCode" : "@Test\r\nvoid testExecuteQueryReturnsNotNull() throws Exception {\r\n    obj = new TesterPreparedStatement(testerConn, \"select * from foo\");\r\n    delegate = new DelegatingPreparedStatement(connection, obj);\r\n    assertNotNull(delegate.executeQuery());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestDelegatingPreparedStatement.java",
  "methodName" : "testExecuteQueryReturnsNull",
  "sourceCode" : "@Test\r\nvoid testExecuteQueryReturnsNull() throws Exception {\r\n    obj = new TesterPreparedStatement(testerConn, \"null\");\r\n    delegate = new DelegatingPreparedStatement(connection, obj);\r\n    assertNull(delegate.executeQuery());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestDelegatingPreparedStatement.java",
  "methodName" : "testExecuteUpdate",
  "sourceCode" : "@Test\r\nvoid testExecuteUpdate() throws Exception {\r\n    try {\r\n        delegate.executeUpdate();\r\n    } catch (final SQLException e) {\r\n    }\r\n    verify(obj, times(1)).executeUpdate();\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestDelegatingPreparedStatement.java",
  "methodName" : "testGetDelegate",
  "sourceCode" : "@Test\r\nvoid testGetDelegate() throws Exception {\r\n    obj = new TesterPreparedStatement(testerConn, \"select * from foo\");\r\n    delegate = new DelegatingPreparedStatement(connection, obj);\r\n    assertEquals(obj, delegate.getDelegate());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestDelegatingPreparedStatement.java",
  "methodName" : "testGetMetaData",
  "sourceCode" : "@Test\r\nvoid testGetMetaData() throws Exception {\r\n    try {\r\n        delegate.getMetaData();\r\n    } catch (final SQLException e) {\r\n    }\r\n    verify(obj, times(1)).getMetaData();\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestDelegatingPreparedStatement.java",
  "methodName" : "testGetParameterMetaData",
  "sourceCode" : "@Test\r\nvoid testGetParameterMetaData() throws Exception {\r\n    try {\r\n        delegate.getParameterMetaData();\r\n    } catch (final SQLException e) {\r\n    }\r\n    verify(obj, times(1)).getParameterMetaData();\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestDelegatingPreparedStatement.java",
  "methodName" : "testSetArrayIntegerArray",
  "sourceCode" : "@Test\r\nvoid testSetArrayIntegerArray() throws Exception {\r\n    try {\r\n        delegate.setArray(1, (java.sql.Array) null);\r\n    } catch (final SQLException e) {\r\n    }\r\n    verify(obj, times(1)).setArray(1, (java.sql.Array) null);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestDelegatingPreparedStatement.java",
  "methodName" : "testSetAsciiStreamIntegerInputStream",
  "sourceCode" : "@Test\r\nvoid testSetAsciiStreamIntegerInputStream() throws Exception {\r\n    try {\r\n        delegate.setAsciiStream(1, (java.io.InputStream) null);\r\n    } catch (final SQLException e) {\r\n    }\r\n    verify(obj, times(1)).setAsciiStream(1, (java.io.InputStream) null);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestDelegatingPreparedStatement.java",
  "methodName" : "testSetAsciiStreamIntegerInputStreamInteger",
  "sourceCode" : "@Test\r\nvoid testSetAsciiStreamIntegerInputStreamInteger() throws Exception {\r\n    try {\r\n        delegate.setAsciiStream(1, (java.io.InputStream) null, 1);\r\n    } catch (final SQLException e) {\r\n    }\r\n    verify(obj, times(1)).setAsciiStream(1, (java.io.InputStream) null, 1);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestDelegatingPreparedStatement.java",
  "methodName" : "testSetAsciiStreamIntegerInputStreamLong",
  "sourceCode" : "@Test\r\nvoid testSetAsciiStreamIntegerInputStreamLong() throws Exception {\r\n    try {\r\n        delegate.setAsciiStream(1, (java.io.InputStream) null, 1L);\r\n    } catch (final SQLException e) {\r\n    }\r\n    verify(obj, times(1)).setAsciiStream(1, (java.io.InputStream) null, 1L);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestDelegatingPreparedStatement.java",
  "methodName" : "testSetBigDecimalIntegerBigDecimal",
  "sourceCode" : "@Test\r\nvoid testSetBigDecimalIntegerBigDecimal() throws Exception {\r\n    try {\r\n        delegate.setBigDecimal(1, java.math.BigDecimal.valueOf(1.0d));\r\n    } catch (final SQLException e) {\r\n    }\r\n    verify(obj, times(1)).setBigDecimal(1, java.math.BigDecimal.valueOf(1.0d));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestDelegatingPreparedStatement.java",
  "methodName" : "testSetBinaryStreamIntegerInputStream",
  "sourceCode" : "@Test\r\nvoid testSetBinaryStreamIntegerInputStream() throws Exception {\r\n    try {\r\n        delegate.setBinaryStream(1, (java.io.InputStream) null);\r\n    } catch (final SQLException e) {\r\n    }\r\n    verify(obj, times(1)).setBinaryStream(1, (java.io.InputStream) null);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestDelegatingPreparedStatement.java",
  "methodName" : "testSetBinaryStreamIntegerInputStreamInteger",
  "sourceCode" : "@Test\r\nvoid testSetBinaryStreamIntegerInputStreamInteger() throws Exception {\r\n    try {\r\n        delegate.setBinaryStream(1, (java.io.InputStream) null, 1);\r\n    } catch (final SQLException e) {\r\n    }\r\n    verify(obj, times(1)).setBinaryStream(1, (java.io.InputStream) null, 1);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestDelegatingPreparedStatement.java",
  "methodName" : "testSetBinaryStreamIntegerInputStreamLong",
  "sourceCode" : "@Test\r\nvoid testSetBinaryStreamIntegerInputStreamLong() throws Exception {\r\n    try {\r\n        delegate.setBinaryStream(1, (java.io.InputStream) null, 1L);\r\n    } catch (final SQLException e) {\r\n    }\r\n    verify(obj, times(1)).setBinaryStream(1, (java.io.InputStream) null, 1L);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestDelegatingPreparedStatement.java",
  "methodName" : "testSetBlobIntegerBlob",
  "sourceCode" : "@Test\r\nvoid testSetBlobIntegerBlob() throws Exception {\r\n    try {\r\n        delegate.setBlob(1, (java.sql.Blob) null);\r\n    } catch (final SQLException e) {\r\n    }\r\n    verify(obj, times(1)).setBlob(1, (java.sql.Blob) null);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestDelegatingPreparedStatement.java",
  "methodName" : "testSetBlobIntegerInputStream",
  "sourceCode" : "@Test\r\nvoid testSetBlobIntegerInputStream() throws Exception {\r\n    try {\r\n        delegate.setBlob(1, (java.io.InputStream) null);\r\n    } catch (final SQLException e) {\r\n    }\r\n    verify(obj, times(1)).setBlob(1, (java.io.InputStream) null);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestDelegatingPreparedStatement.java",
  "methodName" : "testSetBlobIntegerInputStreamLong",
  "sourceCode" : "@Test\r\nvoid testSetBlobIntegerInputStreamLong() throws Exception {\r\n    try {\r\n        delegate.setBlob(1, (java.io.InputStream) null, 1L);\r\n    } catch (final SQLException e) {\r\n    }\r\n    verify(obj, times(1)).setBlob(1, (java.io.InputStream) null, 1L);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestDelegatingPreparedStatement.java",
  "methodName" : "testSetBooleanIntegerBoolean",
  "sourceCode" : "@Test\r\nvoid testSetBooleanIntegerBoolean() throws Exception {\r\n    try {\r\n        delegate.setBoolean(1, Boolean.TRUE);\r\n    } catch (final SQLException e) {\r\n    }\r\n    verify(obj, times(1)).setBoolean(1, Boolean.TRUE);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestDelegatingPreparedStatement.java",
  "methodName" : "testSetByteIntegerByte",
  "sourceCode" : "@Test\r\nvoid testSetByteIntegerByte() throws Exception {\r\n    try {\r\n        delegate.setByte(1, (byte) 1);\r\n    } catch (final SQLException e) {\r\n    }\r\n    verify(obj, times(1)).setByte(1, (byte) 1);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestDelegatingPreparedStatement.java",
  "methodName" : "testSetBytesIntegerByteArray",
  "sourceCode" : "@Test\r\nvoid testSetBytesIntegerByteArray() throws Exception {\r\n    try {\r\n        delegate.setBytes(1, new byte[] { 1 });\r\n    } catch (final SQLException e) {\r\n    }\r\n    verify(obj, times(1)).setBytes(1, new byte[] { 1 });\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestDelegatingPreparedStatement.java",
  "methodName" : "testSetCharacterStreamIntegerReader",
  "sourceCode" : "@Test\r\nvoid testSetCharacterStreamIntegerReader() throws Exception {\r\n    try {\r\n        delegate.setCharacterStream(1, (java.io.StringReader) null);\r\n    } catch (final SQLException e) {\r\n    }\r\n    verify(obj, times(1)).setCharacterStream(1, (java.io.StringReader) null);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestDelegatingPreparedStatement.java",
  "methodName" : "testSetCharacterStreamIntegerReaderInteger",
  "sourceCode" : "@Test\r\nvoid testSetCharacterStreamIntegerReaderInteger() throws Exception {\r\n    try {\r\n        delegate.setCharacterStream(1, (java.io.StringReader) null, 1);\r\n    } catch (final SQLException e) {\r\n    }\r\n    verify(obj, times(1)).setCharacterStream(1, (java.io.StringReader) null, 1);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestDelegatingPreparedStatement.java",
  "methodName" : "testSetCharacterStreamIntegerReaderLong",
  "sourceCode" : "@Test\r\nvoid testSetCharacterStreamIntegerReaderLong() throws Exception {\r\n    try {\r\n        delegate.setCharacterStream(1, (java.io.StringReader) null, 1L);\r\n    } catch (final SQLException e) {\r\n    }\r\n    verify(obj, times(1)).setCharacterStream(1, (java.io.StringReader) null, 1L);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestDelegatingPreparedStatement.java",
  "methodName" : "testSetClobIntegerClob",
  "sourceCode" : "@Test\r\nvoid testSetClobIntegerClob() throws Exception {\r\n    try {\r\n        delegate.setClob(1, (java.sql.Clob) null);\r\n    } catch (final SQLException e) {\r\n    }\r\n    verify(obj, times(1)).setClob(1, (java.sql.Clob) null);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestDelegatingPreparedStatement.java",
  "methodName" : "testSetClobIntegerReader",
  "sourceCode" : "@Test\r\nvoid testSetClobIntegerReader() throws Exception {\r\n    try {\r\n        delegate.setClob(1, (java.io.StringReader) null);\r\n    } catch (final SQLException e) {\r\n    }\r\n    verify(obj, times(1)).setClob(1, (java.io.StringReader) null);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestDelegatingPreparedStatement.java",
  "methodName" : "testSetClobIntegerReaderLong",
  "sourceCode" : "@Test\r\nvoid testSetClobIntegerReaderLong() throws Exception {\r\n    try {\r\n        delegate.setClob(1, (java.io.StringReader) null, 1L);\r\n    } catch (final SQLException e) {\r\n    }\r\n    verify(obj, times(1)).setClob(1, (java.io.StringReader) null, 1L);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestDelegatingPreparedStatement.java",
  "methodName" : "testSetDateIntegerSqlDate",
  "sourceCode" : "@Test\r\nvoid testSetDateIntegerSqlDate() throws Exception {\r\n    try {\r\n        delegate.setDate(1, new java.sql.Date(1529827548745L));\r\n    } catch (final SQLException e) {\r\n    }\r\n    verify(obj, times(1)).setDate(1, new java.sql.Date(1529827548745L));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestDelegatingPreparedStatement.java",
  "methodName" : "testSetDateIntegerSqlDateCalendar",
  "sourceCode" : "@Test\r\nvoid testSetDateIntegerSqlDateCalendar() throws Exception {\r\n    try {\r\n        delegate.setDate(1, new java.sql.Date(1529827548745L), (java.util.Calendar) null);\r\n    } catch (final SQLException e) {\r\n    }\r\n    verify(obj, times(1)).setDate(1, new java.sql.Date(1529827548745L), (java.util.Calendar) null);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestDelegatingPreparedStatement.java",
  "methodName" : "testSetDoubleIntegerDouble",
  "sourceCode" : "@Test\r\nvoid testSetDoubleIntegerDouble() throws Exception {\r\n    try {\r\n        delegate.setDouble(1, 1.0d);\r\n    } catch (final SQLException e) {\r\n    }\r\n    verify(obj, times(1)).setDouble(1, 1.0d);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestDelegatingPreparedStatement.java",
  "methodName" : "testSetFloatIntegerFloat",
  "sourceCode" : "@Test\r\nvoid testSetFloatIntegerFloat() throws Exception {\r\n    try {\r\n        delegate.setFloat(1, 1.0f);\r\n    } catch (final SQLException e) {\r\n    }\r\n    verify(obj, times(1)).setFloat(1, 1.0f);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestDelegatingPreparedStatement.java",
  "methodName" : "testSetIntIntegerInteger",
  "sourceCode" : "@Test\r\nvoid testSetIntIntegerInteger() throws Exception {\r\n    try {\r\n        delegate.setInt(1, 1);\r\n    } catch (final SQLException e) {\r\n    }\r\n    verify(obj, times(1)).setInt(1, 1);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestDelegatingPreparedStatement.java",
  "methodName" : "testSetLongIntegerLong",
  "sourceCode" : "@Test\r\nvoid testSetLongIntegerLong() throws Exception {\r\n    try {\r\n        delegate.setLong(1, 1L);\r\n    } catch (final SQLException e) {\r\n    }\r\n    verify(obj, times(1)).setLong(1, 1L);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestDelegatingPreparedStatement.java",
  "methodName" : "testSetNCharacterStreamIntegerReader",
  "sourceCode" : "@Test\r\nvoid testSetNCharacterStreamIntegerReader() throws Exception {\r\n    try {\r\n        delegate.setNCharacterStream(1, (java.io.StringReader) null);\r\n    } catch (final SQLException e) {\r\n    }\r\n    verify(obj, times(1)).setNCharacterStream(1, (java.io.StringReader) null);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestDelegatingPreparedStatement.java",
  "methodName" : "testSetNCharacterStreamIntegerReaderLong",
  "sourceCode" : "@Test\r\nvoid testSetNCharacterStreamIntegerReaderLong() throws Exception {\r\n    try {\r\n        delegate.setNCharacterStream(1, (java.io.StringReader) null, 1L);\r\n    } catch (final SQLException e) {\r\n    }\r\n    verify(obj, times(1)).setNCharacterStream(1, (java.io.StringReader) null, 1L);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestDelegatingPreparedStatement.java",
  "methodName" : "testSetNClobIntegerNClob",
  "sourceCode" : "@Test\r\nvoid testSetNClobIntegerNClob() throws Exception {\r\n    try {\r\n        delegate.setNClob(1, (java.sql.NClob) null);\r\n    } catch (final SQLException e) {\r\n    }\r\n    verify(obj, times(1)).setNClob(1, (java.sql.NClob) null);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestDelegatingPreparedStatement.java",
  "methodName" : "testSetNClobIntegerReader",
  "sourceCode" : "@Test\r\nvoid testSetNClobIntegerReader() throws Exception {\r\n    try {\r\n        delegate.setNClob(1, (java.io.StringReader) null);\r\n    } catch (final SQLException e) {\r\n    }\r\n    verify(obj, times(1)).setNClob(1, (java.io.StringReader) null);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestDelegatingPreparedStatement.java",
  "methodName" : "testSetNClobIntegerReaderLong",
  "sourceCode" : "@Test\r\nvoid testSetNClobIntegerReaderLong() throws Exception {\r\n    try {\r\n        delegate.setNClob(1, (java.io.StringReader) null, 1L);\r\n    } catch (final SQLException e) {\r\n    }\r\n    verify(obj, times(1)).setNClob(1, (java.io.StringReader) null, 1L);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestDelegatingPreparedStatement.java",
  "methodName" : "testSetNStringIntegerString",
  "sourceCode" : "@Test\r\nvoid testSetNStringIntegerString() throws Exception {\r\n    try {\r\n        delegate.setNString(1, \"foo\");\r\n    } catch (final SQLException e) {\r\n    }\r\n    verify(obj, times(1)).setNString(1, \"foo\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestDelegatingPreparedStatement.java",
  "methodName" : "testSetNullIntegerInteger",
  "sourceCode" : "@Test\r\nvoid testSetNullIntegerInteger() throws Exception {\r\n    try {\r\n        delegate.setNull(1, 1);\r\n    } catch (final SQLException e) {\r\n    }\r\n    verify(obj, times(1)).setNull(1, 1);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestDelegatingPreparedStatement.java",
  "methodName" : "testSetNullIntegerIntegerString",
  "sourceCode" : "@Test\r\nvoid testSetNullIntegerIntegerString() throws Exception {\r\n    try {\r\n        delegate.setNull(1, 1, \"foo\");\r\n    } catch (final SQLException e) {\r\n    }\r\n    verify(obj, times(1)).setNull(1, 1, \"foo\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestDelegatingPreparedStatement.java",
  "methodName" : "testSetObjectIntegerObject",
  "sourceCode" : "@Test\r\nvoid testSetObjectIntegerObject() throws Exception {\r\n    try {\r\n        delegate.setObject(1, System.err);\r\n    } catch (final SQLException e) {\r\n    }\r\n    verify(obj, times(1)).setObject(1, System.err);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestDelegatingPreparedStatement.java",
  "methodName" : "testSetObjectIntegerObjectInteger",
  "sourceCode" : "@Test\r\nvoid testSetObjectIntegerObjectInteger() throws Exception {\r\n    try {\r\n        delegate.setObject(1, System.err, 1);\r\n    } catch (final SQLException e) {\r\n    }\r\n    verify(obj, times(1)).setObject(1, System.err, 1);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestDelegatingPreparedStatement.java",
  "methodName" : "testSetObjectIntegerObjectIntegerInteger",
  "sourceCode" : "@Test\r\nvoid testSetObjectIntegerObjectIntegerInteger() throws Exception {\r\n    try {\r\n        delegate.setObject(1, System.err, 1, 1);\r\n    } catch (final SQLException e) {\r\n    }\r\n    verify(obj, times(1)).setObject(1, System.err, 1, 1);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestDelegatingPreparedStatement.java",
  "methodName" : "testSetObjectIntegerObjectSQLType",
  "sourceCode" : "@Test\r\nvoid testSetObjectIntegerObjectSQLType() throws Exception {\r\n    try {\r\n        delegate.setObject(1, System.err, (java.sql.SQLType) null);\r\n    } catch (final SQLException e) {\r\n    }\r\n    verify(obj, times(1)).setObject(1, System.err, (java.sql.SQLType) null);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestDelegatingPreparedStatement.java",
  "methodName" : "testSetObjectIntegerObjectSQLTypeInteger",
  "sourceCode" : "@Test\r\nvoid testSetObjectIntegerObjectSQLTypeInteger() throws Exception {\r\n    try {\r\n        delegate.setObject(1, System.err, (java.sql.SQLType) null, 1);\r\n    } catch (final SQLException e) {\r\n    }\r\n    verify(obj, times(1)).setObject(1, System.err, (java.sql.SQLType) null, 1);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestDelegatingPreparedStatement.java",
  "methodName" : "testSetRefIntegerRef",
  "sourceCode" : "@Test\r\nvoid testSetRefIntegerRef() throws Exception {\r\n    try {\r\n        delegate.setRef(1, (java.sql.Ref) null);\r\n    } catch (final SQLException e) {\r\n    }\r\n    verify(obj, times(1)).setRef(1, (java.sql.Ref) null);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestDelegatingPreparedStatement.java",
  "methodName" : "testSetRowIdIntegerRowId",
  "sourceCode" : "@Test\r\nvoid testSetRowIdIntegerRowId() throws Exception {\r\n    try {\r\n        delegate.setRowId(1, (java.sql.RowId) null);\r\n    } catch (final SQLException e) {\r\n    }\r\n    verify(obj, times(1)).setRowId(1, (java.sql.RowId) null);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestDelegatingPreparedStatement.java",
  "methodName" : "testSetShortIntegerShort",
  "sourceCode" : "@Test\r\nvoid testSetShortIntegerShort() throws Exception {\r\n    try {\r\n        delegate.setShort(1, (short) 1);\r\n    } catch (final SQLException e) {\r\n    }\r\n    verify(obj, times(1)).setShort(1, (short) 1);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestDelegatingPreparedStatement.java",
  "methodName" : "testSetSQLXMLIntegerSQLXML",
  "sourceCode" : "@Test\r\nvoid testSetSQLXMLIntegerSQLXML() throws Exception {\r\n    try {\r\n        delegate.setSQLXML(1, (java.sql.SQLXML) null);\r\n    } catch (final SQLException e) {\r\n    }\r\n    verify(obj, times(1)).setSQLXML(1, (java.sql.SQLXML) null);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestDelegatingPreparedStatement.java",
  "methodName" : "testSetStringIntegerString",
  "sourceCode" : "@Test\r\nvoid testSetStringIntegerString() throws Exception {\r\n    try {\r\n        delegate.setString(1, \"foo\");\r\n    } catch (final SQLException e) {\r\n    }\r\n    verify(obj, times(1)).setString(1, \"foo\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestDelegatingPreparedStatement.java",
  "methodName" : "testSetTimeIntegerTime",
  "sourceCode" : "@Test\r\nvoid testSetTimeIntegerTime() throws Exception {\r\n    try {\r\n        delegate.setTime(1, (java.sql.Time) null);\r\n    } catch (final SQLException e) {\r\n    }\r\n    verify(obj, times(1)).setTime(1, (java.sql.Time) null);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestDelegatingPreparedStatement.java",
  "methodName" : "testSetTimeIntegerTimeCalendar",
  "sourceCode" : "@Test\r\nvoid testSetTimeIntegerTimeCalendar() throws Exception {\r\n    try {\r\n        delegate.setTime(1, (java.sql.Time) null, (java.util.Calendar) null);\r\n    } catch (final SQLException e) {\r\n    }\r\n    verify(obj, times(1)).setTime(1, (java.sql.Time) null, (java.util.Calendar) null);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestDelegatingPreparedStatement.java",
  "methodName" : "testSetTimestampIntegerTimestamp",
  "sourceCode" : "@Test\r\nvoid testSetTimestampIntegerTimestamp() throws Exception {\r\n    try {\r\n        delegate.setTimestamp(1, (java.sql.Timestamp) null);\r\n    } catch (final SQLException e) {\r\n    }\r\n    verify(obj, times(1)).setTimestamp(1, (java.sql.Timestamp) null);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestDelegatingPreparedStatement.java",
  "methodName" : "testSetTimestampIntegerTimestampCalendar",
  "sourceCode" : "@Test\r\nvoid testSetTimestampIntegerTimestampCalendar() throws Exception {\r\n    try {\r\n        delegate.setTimestamp(1, (java.sql.Timestamp) null, (java.util.Calendar) null);\r\n    } catch (final SQLException e) {\r\n    }\r\n    verify(obj, times(1)).setTimestamp(1, (java.sql.Timestamp) null, (java.util.Calendar) null);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestDelegatingPreparedStatement.java",
  "methodName" : "testSetUnicodeStreamIntegerInputStreamInteger",
  "sourceCode" : "@Test\r\nvoid testSetUnicodeStreamIntegerInputStreamInteger() throws Exception {\r\n    try {\r\n        delegate.setUnicodeStream(1, (java.io.InputStream) null, 1);\r\n    } catch (final SQLException e) {\r\n    }\r\n    verify(obj, times(1)).setUnicodeStream(1, (java.io.InputStream) null, 1);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestDelegatingPreparedStatement.java",
  "methodName" : "testSetURLIntegerUrl",
  "sourceCode" : "@Test\r\nvoid testSetURLIntegerUrl() throws Exception {\r\n    try {\r\n        delegate.setURL(1, (java.net.URL) null);\r\n    } catch (final SQLException e) {\r\n    }\r\n    verify(obj, times(1)).setURL(1, (java.net.URL) null);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestDelegatingResultSet.java",
  "methodName" : "testAbsoluteInteger",
  "sourceCode" : "@Test\r\nvoid testAbsoluteInteger() throws Exception {\r\n    try {\r\n        delegate.absolute(1);\r\n    } catch (final SQLException e) {\r\n    }\r\n    verify(rs, times(1)).absolute(1);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestDelegatingResultSet.java",
  "methodName" : "testAbsolutes",
  "sourceCode" : "@Test\r\nvoid testAbsolutes() throws Exception {\r\n    try {\r\n        delegate.absolute(1);\r\n    } catch (final SQLException e) {\r\n    }\r\n    verify(rs, times(1)).absolute(1);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestDelegatingResultSet.java",
  "methodName" : "testAfterLast",
  "sourceCode" : "@Test\r\nvoid testAfterLast() throws Exception {\r\n    try {\r\n        delegate.afterLast();\r\n    } catch (final SQLException e) {\r\n    }\r\n    verify(rs, times(1)).afterLast();\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestDelegatingResultSet.java",
  "methodName" : "testBeforeFirst",
  "sourceCode" : "@Test\r\nvoid testBeforeFirst() throws Exception {\r\n    try {\r\n        delegate.beforeFirst();\r\n    } catch (final SQLException e) {\r\n    }\r\n    verify(rs, times(1)).beforeFirst();\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestDelegatingResultSet.java",
  "methodName" : "testCancelRowUpdates",
  "sourceCode" : "@Test\r\nvoid testCancelRowUpdates() throws Exception {\r\n    try {\r\n        delegate.cancelRowUpdates();\r\n    } catch (final SQLException e) {\r\n    }\r\n    verify(rs, times(1)).cancelRowUpdates();\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestDelegatingResultSet.java",
  "methodName" : "testClearWarnings",
  "sourceCode" : "@Test\r\nvoid testClearWarnings() throws Exception {\r\n    try {\r\n        delegate.clearWarnings();\r\n    } catch (final SQLException e) {\r\n    }\r\n    verify(rs, times(1)).clearWarnings();\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestDelegatingResultSet.java",
  "methodName" : "testClose",
  "sourceCode" : "@Test\r\nvoid testClose() throws Exception {\r\n    try {\r\n        delegate.close();\r\n    } catch (final SQLException e) {\r\n    }\r\n    verify(rs, times(1)).close();\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestDelegatingResultSet.java",
  "methodName" : "testDeleteRow",
  "sourceCode" : "@Test\r\nvoid testDeleteRow() throws Exception {\r\n    try {\r\n        delegate.deleteRow();\r\n    } catch (final SQLException e) {\r\n    }\r\n    verify(rs, times(1)).deleteRow();\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestDelegatingResultSet.java",
  "methodName" : "testFindColumnString",
  "sourceCode" : "@Test\r\nvoid testFindColumnString() throws Exception {\r\n    try {\r\n        delegate.findColumn(\"foo\");\r\n    } catch (final SQLException e) {\r\n    }\r\n    verify(rs, times(1)).findColumn(\"foo\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestDelegatingResultSet.java",
  "methodName" : "testFirst",
  "sourceCode" : "@Test\r\nvoid testFirst() throws Exception {\r\n    try {\r\n        delegate.first();\r\n    } catch (final SQLException e) {\r\n    }\r\n    verify(rs, times(1)).first();\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestDelegatingResultSet.java",
  "methodName" : "testGetArrayInteger",
  "sourceCode" : "@Test\r\nvoid testGetArrayInteger() throws Exception {\r\n    try {\r\n        delegate.getArray(1);\r\n    } catch (final SQLException e) {\r\n    }\r\n    verify(rs, times(1)).getArray(1);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestDelegatingResultSet.java",
  "methodName" : "testGetArrayString",
  "sourceCode" : "@Test\r\nvoid testGetArrayString() throws Exception {\r\n    try {\r\n        delegate.getArray(\"foo\");\r\n    } catch (final SQLException e) {\r\n    }\r\n    verify(rs, times(1)).getArray(\"foo\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestDelegatingResultSet.java",
  "methodName" : "testGetAsciiStreamInteger",
  "sourceCode" : "@Test\r\nvoid testGetAsciiStreamInteger() throws Exception {\r\n    try {\r\n        delegate.getAsciiStream(1);\r\n    } catch (final SQLException e) {\r\n    }\r\n    verify(rs, times(1)).getAsciiStream(1);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestDelegatingResultSet.java",
  "methodName" : "testGetAsciiStreamString",
  "sourceCode" : "@Test\r\nvoid testGetAsciiStreamString() throws Exception {\r\n    try {\r\n        delegate.getAsciiStream(\"foo\");\r\n    } catch (final SQLException e) {\r\n    }\r\n    verify(rs, times(1)).getAsciiStream(\"foo\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestDelegatingResultSet.java",
  "methodName" : "testGetBigDecimalInteger",
  "sourceCode" : "@Test\r\nvoid testGetBigDecimalInteger() throws Exception {\r\n    try {\r\n        delegate.getBigDecimal(1);\r\n    } catch (final SQLException e) {\r\n    }\r\n    verify(rs, times(1)).getBigDecimal(1);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestDelegatingResultSet.java",
  "methodName" : "testGetBigDecimalIntegerInteger",
  "sourceCode" : "// FIXME: this appears to be a bug\r\n@Disabled\r\n@Test\r\nvoid testGetBigDecimalIntegerInteger() throws Exception {\r\n    try {\r\n        delegate.getBigDecimal(1, 1);\r\n    } catch (final SQLException e) {\r\n    }\r\n    verify(rs, times(1)).getBigDecimal(1, 1);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestDelegatingResultSet.java",
  "methodName" : "testGetBigDecimalString",
  "sourceCode" : "@Test\r\nvoid testGetBigDecimalString() throws Exception {\r\n    try {\r\n        delegate.getBigDecimal(\"foo\");\r\n    } catch (final SQLException e) {\r\n    }\r\n    verify(rs, times(1)).getBigDecimal(\"foo\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestDelegatingResultSet.java",
  "methodName" : "testGetBigDecimalStringInteger",
  "sourceCode" : "// FIXME: this appears to be a bug\r\n@Disabled\r\n@Test\r\nvoid testGetBigDecimalStringInteger() throws Exception {\r\n    try {\r\n        delegate.getBigDecimal(\"foo\", 1);\r\n    } catch (final SQLException e) {\r\n    }\r\n    verify(rs, times(1)).getBigDecimal(\"foo\", 1);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestDelegatingResultSet.java",
  "methodName" : "testGetBinaryStreamInteger",
  "sourceCode" : "@Test\r\nvoid testGetBinaryStreamInteger() throws Exception {\r\n    try {\r\n        delegate.getBinaryStream(1);\r\n    } catch (final SQLException e) {\r\n    }\r\n    verify(rs, times(1)).getBinaryStream(1);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestDelegatingResultSet.java",
  "methodName" : "testGetBinaryStreamString",
  "sourceCode" : "@Test\r\nvoid testGetBinaryStreamString() throws Exception {\r\n    try {\r\n        delegate.getBinaryStream(\"foo\");\r\n    } catch (final SQLException e) {\r\n    }\r\n    verify(rs, times(1)).getBinaryStream(\"foo\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestDelegatingResultSet.java",
  "methodName" : "testGetBlobInteger",
  "sourceCode" : "@Test\r\nvoid testGetBlobInteger() throws Exception {\r\n    try {\r\n        delegate.getBlob(1);\r\n    } catch (final SQLException e) {\r\n    }\r\n    verify(rs, times(1)).getBlob(1);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestDelegatingResultSet.java",
  "methodName" : "testGetBlobString",
  "sourceCode" : "@Test\r\nvoid testGetBlobString() throws Exception {\r\n    try {\r\n        delegate.getBlob(\"foo\");\r\n    } catch (final SQLException e) {\r\n    }\r\n    verify(rs, times(1)).getBlob(\"foo\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestDelegatingResultSet.java",
  "methodName" : "testGetBooleanInteger",
  "sourceCode" : "@Test\r\nvoid testGetBooleanInteger() throws Exception {\r\n    try {\r\n        delegate.getBoolean(1);\r\n    } catch (final SQLException e) {\r\n    }\r\n    verify(rs, times(1)).getBoolean(1);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestDelegatingResultSet.java",
  "methodName" : "testGetBooleanString",
  "sourceCode" : "@Test\r\nvoid testGetBooleanString() throws Exception {\r\n    try {\r\n        delegate.getBoolean(\"foo\");\r\n    } catch (final SQLException e) {\r\n    }\r\n    verify(rs, times(1)).getBoolean(\"foo\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestDelegatingResultSet.java",
  "methodName" : "testGetByteInteger",
  "sourceCode" : "@Test\r\nvoid testGetByteInteger() throws Exception {\r\n    try {\r\n        delegate.getByte(1);\r\n    } catch (final SQLException e) {\r\n    }\r\n    verify(rs, times(1)).getByte(1);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestDelegatingResultSet.java",
  "methodName" : "testGetBytesInteger",
  "sourceCode" : "@Test\r\nvoid testGetBytesInteger() throws Exception {\r\n    try {\r\n        delegate.getBytes(1);\r\n    } catch (final SQLException e) {\r\n    }\r\n    verify(rs, times(1)).getBytes(1);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestDelegatingResultSet.java",
  "methodName" : "testGetBytesString",
  "sourceCode" : "@Test\r\nvoid testGetBytesString() throws Exception {\r\n    try {\r\n        delegate.getBytes(\"foo\");\r\n    } catch (final SQLException e) {\r\n    }\r\n    verify(rs, times(1)).getBytes(\"foo\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestDelegatingResultSet.java",
  "methodName" : "testGetByteString",
  "sourceCode" : "@Test\r\nvoid testGetByteString() throws Exception {\r\n    try {\r\n        delegate.getByte(\"foo\");\r\n    } catch (final SQLException e) {\r\n    }\r\n    verify(rs, times(1)).getByte(\"foo\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestDelegatingResultSet.java",
  "methodName" : "testGetCharacterStreamInteger",
  "sourceCode" : "@Test\r\nvoid testGetCharacterStreamInteger() throws Exception {\r\n    try {\r\n        delegate.getCharacterStream(1);\r\n    } catch (final SQLException e) {\r\n    }\r\n    verify(rs, times(1)).getCharacterStream(1);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestDelegatingResultSet.java",
  "methodName" : "testGetCharacterStreamString",
  "sourceCode" : "@Test\r\nvoid testGetCharacterStreamString() throws Exception {\r\n    try {\r\n        delegate.getCharacterStream(\"foo\");\r\n    } catch (final SQLException e) {\r\n    }\r\n    verify(rs, times(1)).getCharacterStream(\"foo\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestDelegatingResultSet.java",
  "methodName" : "testGetClobInteger",
  "sourceCode" : "@Test\r\nvoid testGetClobInteger() throws Exception {\r\n    try {\r\n        delegate.getClob(1);\r\n    } catch (final SQLException e) {\r\n    }\r\n    verify(rs, times(1)).getClob(1);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestDelegatingResultSet.java",
  "methodName" : "testGetClobString",
  "sourceCode" : "@Test\r\nvoid testGetClobString() throws Exception {\r\n    try {\r\n        delegate.getClob(\"foo\");\r\n    } catch (final SQLException e) {\r\n    }\r\n    verify(rs, times(1)).getClob(\"foo\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestDelegatingResultSet.java",
  "methodName" : "testGetConcurrency",
  "sourceCode" : "@Test\r\nvoid testGetConcurrency() throws Exception {\r\n    try {\r\n        delegate.getConcurrency();\r\n    } catch (final SQLException e) {\r\n    }\r\n    verify(rs, times(1)).getConcurrency();\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestDelegatingResultSet.java",
  "methodName" : "testGetCursorName",
  "sourceCode" : "@Test\r\nvoid testGetCursorName() throws Exception {\r\n    try {\r\n        delegate.getCursorName();\r\n    } catch (final SQLException e) {\r\n    }\r\n    verify(rs, times(1)).getCursorName();\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestDelegatingResultSet.java",
  "methodName" : "testGetDateInteger",
  "sourceCode" : "@Test\r\nvoid testGetDateInteger() throws Exception {\r\n    try {\r\n        delegate.getDate(1);\r\n    } catch (final SQLException e) {\r\n    }\r\n    verify(rs, times(1)).getDate(1);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestDelegatingResultSet.java",
  "methodName" : "testGetDateIntegerCalendar",
  "sourceCode" : "@Test\r\nvoid testGetDateIntegerCalendar() throws Exception {\r\n    try {\r\n        delegate.getDate(1, (java.util.Calendar) null);\r\n    } catch (final SQLException e) {\r\n    }\r\n    verify(rs, times(1)).getDate(1, (java.util.Calendar) null);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestDelegatingResultSet.java",
  "methodName" : "testGetDateString",
  "sourceCode" : "@Test\r\nvoid testGetDateString() throws Exception {\r\n    try {\r\n        delegate.getDate(\"foo\");\r\n    } catch (final SQLException e) {\r\n    }\r\n    verify(rs, times(1)).getDate(\"foo\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestDelegatingResultSet.java",
  "methodName" : "testGetDateStringCalendar",
  "sourceCode" : "@Test\r\nvoid testGetDateStringCalendar() throws Exception {\r\n    try {\r\n        delegate.getDate(\"foo\", (java.util.Calendar) null);\r\n    } catch (final SQLException e) {\r\n    }\r\n    verify(rs, times(1)).getDate(\"foo\", (java.util.Calendar) null);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestDelegatingResultSet.java",
  "methodName" : "testGetDoubleInteger",
  "sourceCode" : "@Test\r\nvoid testGetDoubleInteger() throws Exception {\r\n    try {\r\n        delegate.getDouble(1);\r\n    } catch (final SQLException e) {\r\n    }\r\n    verify(rs, times(1)).getDouble(1);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestDelegatingResultSet.java",
  "methodName" : "testGetDoubleString",
  "sourceCode" : "@Test\r\nvoid testGetDoubleString() throws Exception {\r\n    try {\r\n        delegate.getDouble(\"foo\");\r\n    } catch (final SQLException e) {\r\n    }\r\n    verify(rs, times(1)).getDouble(\"foo\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestDelegatingResultSet.java",
  "methodName" : "testGetFetchDirection",
  "sourceCode" : "@Test\r\nvoid testGetFetchDirection() throws Exception {\r\n    try {\r\n        delegate.getFetchDirection();\r\n    } catch (final SQLException e) {\r\n    }\r\n    verify(rs, times(1)).getFetchDirection();\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestDelegatingResultSet.java",
  "methodName" : "testGetFetchSize",
  "sourceCode" : "@Test\r\nvoid testGetFetchSize() throws Exception {\r\n    try {\r\n        delegate.getFetchSize();\r\n    } catch (final SQLException e) {\r\n    }\r\n    verify(rs, times(1)).getFetchSize();\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestDelegatingResultSet.java",
  "methodName" : "testGetFloatInteger",
  "sourceCode" : "@Test\r\nvoid testGetFloatInteger() throws Exception {\r\n    try {\r\n        delegate.getFloat(1);\r\n    } catch (final SQLException e) {\r\n    }\r\n    verify(rs, times(1)).getFloat(1);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestDelegatingResultSet.java",
  "methodName" : "testGetFloatString",
  "sourceCode" : "@Test\r\nvoid testGetFloatString() throws Exception {\r\n    try {\r\n        delegate.getFloat(\"foo\");\r\n    } catch (final SQLException e) {\r\n    }\r\n    verify(rs, times(1)).getFloat(\"foo\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestDelegatingResultSet.java",
  "methodName" : "testGetHoldability",
  "sourceCode" : "@Test\r\nvoid testGetHoldability() throws Exception {\r\n    try {\r\n        delegate.getHoldability();\r\n    } catch (final SQLException e) {\r\n    }\r\n    verify(rs, times(1)).getHoldability();\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestDelegatingResultSet.java",
  "methodName" : "testGetIntInteger",
  "sourceCode" : "@Test\r\nvoid testGetIntInteger() throws Exception {\r\n    try {\r\n        delegate.getInt(1);\r\n    } catch (final SQLException e) {\r\n    }\r\n    verify(rs, times(1)).getInt(1);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestDelegatingResultSet.java",
  "methodName" : "testGetIntString",
  "sourceCode" : "@Test\r\nvoid testGetIntString() throws Exception {\r\n    try {\r\n        delegate.getInt(\"foo\");\r\n    } catch (final SQLException e) {\r\n    }\r\n    verify(rs, times(1)).getInt(\"foo\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestDelegatingResultSet.java",
  "methodName" : "testGetLongInteger",
  "sourceCode" : "@Test\r\nvoid testGetLongInteger() throws Exception {\r\n    try {\r\n        delegate.getLong(1);\r\n    } catch (final SQLException e) {\r\n    }\r\n    verify(rs, times(1)).getLong(1);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestDelegatingResultSet.java",
  "methodName" : "testGetLongString",
  "sourceCode" : "@Test\r\nvoid testGetLongString() throws Exception {\r\n    try {\r\n        delegate.getLong(\"foo\");\r\n    } catch (final SQLException e) {\r\n    }\r\n    verify(rs, times(1)).getLong(\"foo\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestDelegatingResultSet.java",
  "methodName" : "testGetMetaData",
  "sourceCode" : "@Test\r\nvoid testGetMetaData() throws Exception {\r\n    try {\r\n        delegate.getMetaData();\r\n    } catch (final SQLException e) {\r\n    }\r\n    verify(rs, times(1)).getMetaData();\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestDelegatingResultSet.java",
  "methodName" : "testGetNCharacterStreamInteger",
  "sourceCode" : "@Test\r\nvoid testGetNCharacterStreamInteger() throws Exception {\r\n    try {\r\n        delegate.getNCharacterStream(1);\r\n    } catch (final SQLException e) {\r\n    }\r\n    verify(rs, times(1)).getNCharacterStream(1);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestDelegatingResultSet.java",
  "methodName" : "testGetNCharacterStreamString",
  "sourceCode" : "@Test\r\nvoid testGetNCharacterStreamString() throws Exception {\r\n    try {\r\n        delegate.getNCharacterStream(\"foo\");\r\n    } catch (final SQLException e) {\r\n    }\r\n    verify(rs, times(1)).getNCharacterStream(\"foo\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestDelegatingResultSet.java",
  "methodName" : "testGetNClobInteger",
  "sourceCode" : "@Test\r\nvoid testGetNClobInteger() throws Exception {\r\n    try {\r\n        delegate.getNClob(1);\r\n    } catch (final SQLException e) {\r\n    }\r\n    verify(rs, times(1)).getNClob(1);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestDelegatingResultSet.java",
  "methodName" : "testGetNClobString",
  "sourceCode" : "@Test\r\nvoid testGetNClobString() throws Exception {\r\n    try {\r\n        delegate.getNClob(\"foo\");\r\n    } catch (final SQLException e) {\r\n    }\r\n    verify(rs, times(1)).getNClob(\"foo\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestDelegatingResultSet.java",
  "methodName" : "testGetNStringInteger",
  "sourceCode" : "@Test\r\nvoid testGetNStringInteger() throws Exception {\r\n    try {\r\n        delegate.getNString(1);\r\n    } catch (final SQLException e) {\r\n    }\r\n    verify(rs, times(1)).getNString(1);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestDelegatingResultSet.java",
  "methodName" : "testGetNStringString",
  "sourceCode" : "@Test\r\nvoid testGetNStringString() throws Exception {\r\n    try {\r\n        delegate.getNString(\"foo\");\r\n    } catch (final SQLException e) {\r\n    }\r\n    verify(rs, times(1)).getNString(\"foo\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestDelegatingResultSet.java",
  "methodName" : "testGetObjectInteger",
  "sourceCode" : "@Test\r\nvoid testGetObjectInteger() throws Exception {\r\n    try {\r\n        delegate.getObject(1);\r\n    } catch (final SQLException e) {\r\n    }\r\n    verify(rs, times(1)).getObject(1);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestDelegatingResultSet.java",
  "methodName" : "testGetObjectIntegerClass",
  "sourceCode" : "@Test\r\nvoid testGetObjectIntegerClass() throws Exception {\r\n    try {\r\n        delegate.getObject(1, Object.class);\r\n    } catch (final SQLException e) {\r\n    }\r\n    verify(rs, times(1)).getObject(1, Object.class);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestDelegatingResultSet.java",
  "methodName" : "testGetObjectIntegerMap",
  "sourceCode" : "@Test\r\nvoid testGetObjectIntegerMap() throws Exception {\r\n    try {\r\n        delegate.getObject(1, (java.util.Map) null);\r\n    } catch (final SQLException e) {\r\n    }\r\n    verify(rs, times(1)).getObject(1, (java.util.Map) null);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestDelegatingResultSet.java",
  "methodName" : "testGetObjectString",
  "sourceCode" : "@Test\r\nvoid testGetObjectString() throws Exception {\r\n    try {\r\n        delegate.getObject(\"foo\");\r\n    } catch (final SQLException e) {\r\n    }\r\n    verify(rs, times(1)).getObject(\"foo\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestDelegatingResultSet.java",
  "methodName" : "testGetObjectStringClass",
  "sourceCode" : "@Test\r\nvoid testGetObjectStringClass() throws Exception {\r\n    try {\r\n        delegate.getObject(\"foo\", Object.class);\r\n    } catch (final SQLException e) {\r\n    }\r\n    verify(rs, times(1)).getObject(\"foo\", Object.class);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestDelegatingResultSet.java",
  "methodName" : "testGetObjectStringMap",
  "sourceCode" : "@Test\r\nvoid testGetObjectStringMap() throws Exception {\r\n    try {\r\n        delegate.getObject(\"foo\", (java.util.Map) null);\r\n    } catch (final SQLException e) {\r\n    }\r\n    verify(rs, times(1)).getObject(\"foo\", (java.util.Map) null);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestDelegatingResultSet.java",
  "methodName" : "testGetRefInteger",
  "sourceCode" : "@Test\r\nvoid testGetRefInteger() throws Exception {\r\n    try {\r\n        delegate.getRef(1);\r\n    } catch (final SQLException e) {\r\n    }\r\n    verify(rs, times(1)).getRef(1);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestDelegatingResultSet.java",
  "methodName" : "testGetRefString",
  "sourceCode" : "@Test\r\nvoid testGetRefString() throws Exception {\r\n    try {\r\n        delegate.getRef(\"foo\");\r\n    } catch (final SQLException e) {\r\n    }\r\n    verify(rs, times(1)).getRef(\"foo\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestDelegatingResultSet.java",
  "methodName" : "testGetRow",
  "sourceCode" : "@Test\r\nvoid testGetRow() throws Exception {\r\n    try {\r\n        delegate.getRow();\r\n    } catch (final SQLException e) {\r\n    }\r\n    verify(rs, times(1)).getRow();\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestDelegatingResultSet.java",
  "methodName" : "testGetRowIdInteger",
  "sourceCode" : "@Test\r\nvoid testGetRowIdInteger() throws Exception {\r\n    try {\r\n        delegate.getRowId(1);\r\n    } catch (final SQLException e) {\r\n    }\r\n    verify(rs, times(1)).getRowId(1);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestDelegatingResultSet.java",
  "methodName" : "testGetRowIdString",
  "sourceCode" : "@Test\r\nvoid testGetRowIdString() throws Exception {\r\n    try {\r\n        delegate.getRowId(\"foo\");\r\n    } catch (final SQLException e) {\r\n    }\r\n    verify(rs, times(1)).getRowId(\"foo\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestDelegatingResultSet.java",
  "methodName" : "testGetShortInteger",
  "sourceCode" : "@Test\r\nvoid testGetShortInteger() throws Exception {\r\n    try {\r\n        delegate.getShort(1);\r\n    } catch (final SQLException e) {\r\n    }\r\n    verify(rs, times(1)).getShort(1);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestDelegatingResultSet.java",
  "methodName" : "testGetShortString",
  "sourceCode" : "@Test\r\nvoid testGetShortString() throws Exception {\r\n    try {\r\n        delegate.getShort(\"foo\");\r\n    } catch (final SQLException e) {\r\n    }\r\n    verify(rs, times(1)).getShort(\"foo\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestDelegatingResultSet.java",
  "methodName" : "testGetSQLXMLInteger",
  "sourceCode" : "@Test\r\nvoid testGetSQLXMLInteger() throws Exception {\r\n    try {\r\n        delegate.getSQLXML(1);\r\n    } catch (final SQLException e) {\r\n    }\r\n    verify(rs, times(1)).getSQLXML(1);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestDelegatingResultSet.java",
  "methodName" : "testGetSQLXMLString",
  "sourceCode" : "@Test\r\nvoid testGetSQLXMLString() throws Exception {\r\n    try {\r\n        delegate.getSQLXML(\"foo\");\r\n    } catch (final SQLException e) {\r\n    }\r\n    verify(rs, times(1)).getSQLXML(\"foo\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestDelegatingResultSet.java",
  "methodName" : "testGetStatement",
  "sourceCode" : "/**\r\n * This method is a bit special. It actually calls statement in the\r\n * {@link DelegatingResultSet} object itself, instead of calling in the\r\n * underlying {@link ResultSet}.\r\n *\r\n * @throws Exception\r\n */\r\n@Test\r\nvoid testGetStatement() throws Exception {\r\n    try {\r\n        delegate.getStatement();\r\n    } catch (final SQLException e) {\r\n    }\r\n    verify(rs, times(0)).getStatement();\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestDelegatingResultSet.java",
  "methodName" : "testGetStringInteger",
  "sourceCode" : "@Test\r\nvoid testGetStringInteger() throws Exception {\r\n    try {\r\n        delegate.getString(1);\r\n    } catch (final SQLException e) {\r\n    }\r\n    verify(rs, times(1)).getString(1);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestDelegatingResultSet.java",
  "methodName" : "testGetStringString",
  "sourceCode" : "@Test\r\nvoid testGetStringString() throws Exception {\r\n    try {\r\n        delegate.getString(\"foo\");\r\n    } catch (final SQLException e) {\r\n    }\r\n    verify(rs, times(1)).getString(\"foo\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestDelegatingResultSet.java",
  "methodName" : "testGetTimeInteger",
  "sourceCode" : "@Test\r\nvoid testGetTimeInteger() throws Exception {\r\n    try {\r\n        delegate.getTime(1);\r\n    } catch (final SQLException e) {\r\n    }\r\n    verify(rs, times(1)).getTime(1);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestDelegatingResultSet.java",
  "methodName" : "testGetTimeIntegerCalendar",
  "sourceCode" : "@Test\r\nvoid testGetTimeIntegerCalendar() throws Exception {\r\n    try {\r\n        delegate.getTime(1, (java.util.Calendar) null);\r\n    } catch (final SQLException e) {\r\n    }\r\n    verify(rs, times(1)).getTime(1, (java.util.Calendar) null);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestDelegatingResultSet.java",
  "methodName" : "testGetTimestampInteger",
  "sourceCode" : "@Test\r\nvoid testGetTimestampInteger() throws Exception {\r\n    try {\r\n        delegate.getTimestamp(1);\r\n    } catch (final SQLException e) {\r\n    }\r\n    verify(rs, times(1)).getTimestamp(1);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestDelegatingResultSet.java",
  "methodName" : "testGetTimestampIntegerCalendar",
  "sourceCode" : "@Test\r\nvoid testGetTimestampIntegerCalendar() throws Exception {\r\n    try {\r\n        delegate.getTimestamp(1, (java.util.Calendar) null);\r\n    } catch (final SQLException e) {\r\n    }\r\n    verify(rs, times(1)).getTimestamp(1, (java.util.Calendar) null);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestDelegatingResultSet.java",
  "methodName" : "testGetTimestampString",
  "sourceCode" : "@Test\r\nvoid testGetTimestampString() throws Exception {\r\n    try {\r\n        delegate.getTimestamp(\"foo\");\r\n    } catch (final SQLException e) {\r\n    }\r\n    verify(rs, times(1)).getTimestamp(\"foo\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestDelegatingResultSet.java",
  "methodName" : "testGetTimestampStringCalendar",
  "sourceCode" : "@Test\r\nvoid testGetTimestampStringCalendar() throws Exception {\r\n    try {\r\n        delegate.getTimestamp(\"foo\", (java.util.Calendar) null);\r\n    } catch (final SQLException e) {\r\n    }\r\n    verify(rs, times(1)).getTimestamp(\"foo\", (java.util.Calendar) null);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestDelegatingResultSet.java",
  "methodName" : "testGetTimeString",
  "sourceCode" : "@Test\r\nvoid testGetTimeString() throws Exception {\r\n    try {\r\n        delegate.getTime(\"foo\");\r\n    } catch (final SQLException e) {\r\n    }\r\n    verify(rs, times(1)).getTime(\"foo\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestDelegatingResultSet.java",
  "methodName" : "testGetTimeStringCalendar",
  "sourceCode" : "@Test\r\nvoid testGetTimeStringCalendar() throws Exception {\r\n    try {\r\n        delegate.getTime(\"foo\", (java.util.Calendar) null);\r\n    } catch (final SQLException e) {\r\n    }\r\n    verify(rs, times(1)).getTime(\"foo\", (java.util.Calendar) null);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestDelegatingResultSet.java",
  "methodName" : "testGetType",
  "sourceCode" : "@Test\r\nvoid testGetType() throws Exception {\r\n    try {\r\n        delegate.getType();\r\n    } catch (final SQLException e) {\r\n    }\r\n    verify(rs, times(1)).getType();\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestDelegatingResultSet.java",
  "methodName" : "testGetUnicodeStreamInteger",
  "sourceCode" : "@Test\r\nvoid testGetUnicodeStreamInteger() throws Exception {\r\n    try {\r\n        delegate.getUnicodeStream(1);\r\n    } catch (final SQLException e) {\r\n    }\r\n    verify(rs, times(1)).getUnicodeStream(1);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestDelegatingResultSet.java",
  "methodName" : "testGetUnicodeStreamString",
  "sourceCode" : "@Test\r\nvoid testGetUnicodeStreamString() throws Exception {\r\n    try {\r\n        delegate.getUnicodeStream(\"foo\");\r\n    } catch (final SQLException e) {\r\n    }\r\n    verify(rs, times(1)).getUnicodeStream(\"foo\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestDelegatingResultSet.java",
  "methodName" : "testGetURLInteger",
  "sourceCode" : "@Test\r\nvoid testGetURLInteger() throws Exception {\r\n    try {\r\n        delegate.getURL(1);\r\n    } catch (final SQLException e) {\r\n    }\r\n    verify(rs, times(1)).getURL(1);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestDelegatingResultSet.java",
  "methodName" : "testGetURLString",
  "sourceCode" : "@Test\r\nvoid testGetURLString() throws Exception {\r\n    try {\r\n        delegate.getURL(\"foo\");\r\n    } catch (final SQLException e) {\r\n    }\r\n    verify(rs, times(1)).getURL(\"foo\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestDelegatingResultSet.java",
  "methodName" : "testGetWarnings",
  "sourceCode" : "@Test\r\nvoid testGetWarnings() throws Exception {\r\n    try {\r\n        delegate.getWarnings();\r\n    } catch (final SQLException e) {\r\n    }\r\n    verify(rs, times(1)).getWarnings();\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestDelegatingResultSet.java",
  "methodName" : "testInsertRow",
  "sourceCode" : "@Test\r\nvoid testInsertRow() throws Exception {\r\n    try {\r\n        delegate.insertRow();\r\n    } catch (final SQLException e) {\r\n    }\r\n    verify(rs, times(1)).insertRow();\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestDelegatingResultSet.java",
  "methodName" : "testIsAfterLast",
  "sourceCode" : "@Test\r\nvoid testIsAfterLast() throws Exception {\r\n    try {\r\n        delegate.isAfterLast();\r\n    } catch (final SQLException e) {\r\n    }\r\n    verify(rs, times(1)).isAfterLast();\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestDelegatingResultSet.java",
  "methodName" : "testIsBeforeFirst",
  "sourceCode" : "@Test\r\nvoid testIsBeforeFirst() throws Exception {\r\n    try {\r\n        delegate.isBeforeFirst();\r\n    } catch (final SQLException e) {\r\n    }\r\n    verify(rs, times(1)).isBeforeFirst();\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestDelegatingResultSet.java",
  "methodName" : "testIsClosed",
  "sourceCode" : "@Test\r\nvoid testIsClosed() throws Exception {\r\n    try {\r\n        delegate.isClosed();\r\n    } catch (final SQLException e) {\r\n    }\r\n    verify(rs, times(1)).isClosed();\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestDelegatingResultSet.java",
  "methodName" : "testIsFirst",
  "sourceCode" : "@Test\r\nvoid testIsFirst() throws Exception {\r\n    try {\r\n        delegate.isFirst();\r\n    } catch (final SQLException e) {\r\n    }\r\n    verify(rs, times(1)).isFirst();\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestDelegatingResultSet.java",
  "methodName" : "testIsLast",
  "sourceCode" : "@Test\r\nvoid testIsLast() throws Exception {\r\n    try {\r\n        delegate.isLast();\r\n    } catch (final SQLException e) {\r\n    }\r\n    verify(rs, times(1)).isLast();\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestDelegatingResultSet.java",
  "methodName" : "testLast",
  "sourceCode" : "@Test\r\nvoid testLast() throws Exception {\r\n    try {\r\n        delegate.last();\r\n    } catch (final SQLException e) {\r\n    }\r\n    verify(rs, times(1)).last();\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestDelegatingResultSet.java",
  "methodName" : "testMoveToCurrentRow",
  "sourceCode" : "@Test\r\nvoid testMoveToCurrentRow() throws Exception {\r\n    try {\r\n        delegate.moveToCurrentRow();\r\n    } catch (final SQLException e) {\r\n    }\r\n    verify(rs, times(1)).moveToCurrentRow();\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestDelegatingResultSet.java",
  "methodName" : "testMoveToInsertRow",
  "sourceCode" : "@Test\r\nvoid testMoveToInsertRow() throws Exception {\r\n    try {\r\n        delegate.moveToInsertRow();\r\n    } catch (final SQLException e) {\r\n    }\r\n    verify(rs, times(1)).moveToInsertRow();\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestDelegatingResultSet.java",
  "methodName" : "testNext",
  "sourceCode" : "@Test\r\nvoid testNext() throws Exception {\r\n    try {\r\n        delegate.next();\r\n    } catch (final SQLException e) {\r\n    }\r\n    verify(rs, times(1)).next();\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestDelegatingResultSet.java",
  "methodName" : "testPrevious",
  "sourceCode" : "@Test\r\nvoid testPrevious() throws Exception {\r\n    try {\r\n        delegate.previous();\r\n    } catch (final SQLException e) {\r\n    }\r\n    verify(rs, times(1)).previous();\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestDelegatingResultSet.java",
  "methodName" : "testRefreshRow",
  "sourceCode" : "@Test\r\nvoid testRefreshRow() throws Exception {\r\n    try {\r\n        delegate.refreshRow();\r\n    } catch (final SQLException e) {\r\n    }\r\n    verify(rs, times(1)).refreshRow();\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestDelegatingResultSet.java",
  "methodName" : "testRelativeInteger",
  "sourceCode" : "@Test\r\nvoid testRelativeInteger() throws Exception {\r\n    try {\r\n        delegate.relative(1);\r\n    } catch (final SQLException e) {\r\n    }\r\n    verify(rs, times(1)).relative(1);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestDelegatingResultSet.java",
  "methodName" : "testRowDeleted",
  "sourceCode" : "@Test\r\nvoid testRowDeleted() throws Exception {\r\n    try {\r\n        delegate.rowDeleted();\r\n    } catch (final SQLException e) {\r\n    }\r\n    verify(rs, times(1)).rowDeleted();\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestDelegatingResultSet.java",
  "methodName" : "testRowInserted",
  "sourceCode" : "@Test\r\nvoid testRowInserted() throws Exception {\r\n    try {\r\n        delegate.rowInserted();\r\n    } catch (final SQLException e) {\r\n    }\r\n    verify(rs, times(1)).rowInserted();\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestDelegatingResultSet.java",
  "methodName" : "testRowUpdated",
  "sourceCode" : "@Test\r\nvoid testRowUpdated() throws Exception {\r\n    try {\r\n        delegate.rowUpdated();\r\n    } catch (final SQLException e) {\r\n    }\r\n    verify(rs, times(1)).rowUpdated();\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestDelegatingResultSet.java",
  "methodName" : "testSetFetchDirectionInteger",
  "sourceCode" : "@Test\r\nvoid testSetFetchDirectionInteger() throws Exception {\r\n    try {\r\n        delegate.setFetchDirection(1);\r\n    } catch (final SQLException e) {\r\n    }\r\n    verify(rs, times(1)).setFetchDirection(1);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestDelegatingResultSet.java",
  "methodName" : "testSetFetchSizeInteger",
  "sourceCode" : "@Test\r\nvoid testSetFetchSizeInteger() throws Exception {\r\n    try {\r\n        delegate.setFetchSize(1);\r\n    } catch (final SQLException e) {\r\n    }\r\n    verify(rs, times(1)).setFetchSize(1);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestDelegatingResultSet.java",
  "methodName" : "testToString",
  "sourceCode" : "@Test\r\nvoid testToString() {\r\n    final String toString = delegate.toString();\r\n    assertTrue(toString.contains(\"DelegatingResultSet\"));\r\n    assertTrue(toString.contains(\"Mock for ResultSet\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestDelegatingResultSet.java",
  "methodName" : "testUpdateArrayIntegerArray",
  "sourceCode" : "@Test\r\nvoid testUpdateArrayIntegerArray() throws Exception {\r\n    try {\r\n        delegate.updateArray(1, (java.sql.Array) null);\r\n    } catch (final SQLException e) {\r\n    }\r\n    verify(rs, times(1)).updateArray(1, (java.sql.Array) null);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestDelegatingResultSet.java",
  "methodName" : "testUpdateArrayStringArray",
  "sourceCode" : "@Test\r\nvoid testUpdateArrayStringArray() throws Exception {\r\n    try {\r\n        delegate.updateArray(\"foo\", (java.sql.Array) null);\r\n    } catch (final SQLException e) {\r\n    }\r\n    verify(rs, times(1)).updateArray(\"foo\", (java.sql.Array) null);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestDelegatingResultSet.java",
  "methodName" : "testUpdateAsciiStreamIntegerInputStream",
  "sourceCode" : "@Test\r\nvoid testUpdateAsciiStreamIntegerInputStream() throws Exception {\r\n    try {\r\n        delegate.updateAsciiStream(1, (java.io.InputStream) null);\r\n    } catch (final SQLException e) {\r\n    }\r\n    verify(rs, times(1)).updateAsciiStream(1, (java.io.InputStream) null);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestDelegatingResultSet.java",
  "methodName" : "testUpdateAsciiStreamIntegerInputStreamInteger",
  "sourceCode" : "@Test\r\nvoid testUpdateAsciiStreamIntegerInputStreamInteger() throws Exception {\r\n    try {\r\n        delegate.updateAsciiStream(1, (java.io.InputStream) null, 1);\r\n    } catch (final SQLException e) {\r\n    }\r\n    verify(rs, times(1)).updateAsciiStream(1, (java.io.InputStream) null, 1);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestDelegatingResultSet.java",
  "methodName" : "testUpdateAsciiStreamIntegerInputStreamLong",
  "sourceCode" : "@Test\r\nvoid testUpdateAsciiStreamIntegerInputStreamLong() throws Exception {\r\n    try {\r\n        delegate.updateAsciiStream(1, (java.io.InputStream) null, 1L);\r\n    } catch (final SQLException e) {\r\n    }\r\n    verify(rs, times(1)).updateAsciiStream(1, (java.io.InputStream) null, 1L);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestDelegatingResultSet.java",
  "methodName" : "testUpdateAsciiStreamStringInputStream",
  "sourceCode" : "@Test\r\nvoid testUpdateAsciiStreamStringInputStream() throws Exception {\r\n    try {\r\n        delegate.updateAsciiStream(\"foo\", (java.io.InputStream) null);\r\n    } catch (final SQLException e) {\r\n    }\r\n    verify(rs, times(1)).updateAsciiStream(\"foo\", (java.io.InputStream) null);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestDelegatingResultSet.java",
  "methodName" : "testUpdateAsciiStreamStringInputStreamInteger",
  "sourceCode" : "@Test\r\nvoid testUpdateAsciiStreamStringInputStreamInteger() throws Exception {\r\n    try {\r\n        delegate.updateAsciiStream(\"foo\", (java.io.InputStream) null, 1);\r\n    } catch (final SQLException e) {\r\n    }\r\n    verify(rs, times(1)).updateAsciiStream(\"foo\", (java.io.InputStream) null, 1);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestDelegatingResultSet.java",
  "methodName" : "testUpdateAsciiStreamStringInputStreamLong",
  "sourceCode" : "@Test\r\nvoid testUpdateAsciiStreamStringInputStreamLong() throws Exception {\r\n    try {\r\n        delegate.updateAsciiStream(\"foo\", (java.io.InputStream) null, 1L);\r\n    } catch (final SQLException e) {\r\n    }\r\n    verify(rs, times(1)).updateAsciiStream(\"foo\", (java.io.InputStream) null, 1L);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestDelegatingResultSet.java",
  "methodName" : "testUpdateBigDecimalIntegerBigDecimal",
  "sourceCode" : "@Test\r\nvoid testUpdateBigDecimalIntegerBigDecimal() throws Exception {\r\n    try {\r\n        delegate.updateBigDecimal(1, java.math.BigDecimal.valueOf(1.0d));\r\n    } catch (final SQLException e) {\r\n    }\r\n    verify(rs, times(1)).updateBigDecimal(1, java.math.BigDecimal.valueOf(1.0d));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestDelegatingResultSet.java",
  "methodName" : "testUpdateBigDecimalStringBigDecimal",
  "sourceCode" : "@Test\r\nvoid testUpdateBigDecimalStringBigDecimal() throws Exception {\r\n    try {\r\n        delegate.updateBigDecimal(\"foo\", java.math.BigDecimal.valueOf(1.0d));\r\n    } catch (final SQLException e) {\r\n    }\r\n    verify(rs, times(1)).updateBigDecimal(\"foo\", java.math.BigDecimal.valueOf(1.0d));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestDelegatingResultSet.java",
  "methodName" : "testUpdateBinaryStreamIntegerInputStream",
  "sourceCode" : "@Test\r\nvoid testUpdateBinaryStreamIntegerInputStream() throws Exception {\r\n    try {\r\n        delegate.updateBinaryStream(1, (java.io.InputStream) null);\r\n    } catch (final SQLException e) {\r\n    }\r\n    verify(rs, times(1)).updateBinaryStream(1, (java.io.InputStream) null);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestDelegatingResultSet.java",
  "methodName" : "testUpdateBinaryStreamIntegerInputStreamInteger",
  "sourceCode" : "@Test\r\nvoid testUpdateBinaryStreamIntegerInputStreamInteger() throws Exception {\r\n    try {\r\n        delegate.updateBinaryStream(1, (java.io.InputStream) null, 1);\r\n    } catch (final SQLException e) {\r\n    }\r\n    verify(rs, times(1)).updateBinaryStream(1, (java.io.InputStream) null, 1);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestDelegatingResultSet.java",
  "methodName" : "testUpdateBinaryStreamIntegerInputStreamLong",
  "sourceCode" : "@Test\r\nvoid testUpdateBinaryStreamIntegerInputStreamLong() throws Exception {\r\n    try {\r\n        delegate.updateBinaryStream(1, (java.io.InputStream) null, 1L);\r\n    } catch (final SQLException e) {\r\n    }\r\n    verify(rs, times(1)).updateBinaryStream(1, (java.io.InputStream) null, 1L);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestDelegatingResultSet.java",
  "methodName" : "testUpdateBinaryStreamStringInputStream",
  "sourceCode" : "@Test\r\nvoid testUpdateBinaryStreamStringInputStream() throws Exception {\r\n    try {\r\n        delegate.updateBinaryStream(\"foo\", (java.io.InputStream) null);\r\n    } catch (final SQLException e) {\r\n    }\r\n    verify(rs, times(1)).updateBinaryStream(\"foo\", (java.io.InputStream) null);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestDelegatingResultSet.java",
  "methodName" : "testUpdateBinaryStreamStringInputStreamInteger",
  "sourceCode" : "@Test\r\nvoid testUpdateBinaryStreamStringInputStreamInteger() throws Exception {\r\n    try {\r\n        delegate.updateBinaryStream(\"foo\", (java.io.InputStream) null, 1);\r\n    } catch (final SQLException e) {\r\n    }\r\n    verify(rs, times(1)).updateBinaryStream(\"foo\", (java.io.InputStream) null, 1);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestDelegatingResultSet.java",
  "methodName" : "testUpdateBinaryStreamStringInputStreamLong",
  "sourceCode" : "@Test\r\nvoid testUpdateBinaryStreamStringInputStreamLong() throws Exception {\r\n    try {\r\n        delegate.updateBinaryStream(\"foo\", (java.io.InputStream) null, 1L);\r\n    } catch (final SQLException e) {\r\n    }\r\n    verify(rs, times(1)).updateBinaryStream(\"foo\", (java.io.InputStream) null, 1L);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestDelegatingResultSet.java",
  "methodName" : "testUpdateBlobIntegerBlob",
  "sourceCode" : "@Test\r\nvoid testUpdateBlobIntegerBlob() throws Exception {\r\n    try {\r\n        delegate.updateBlob(1, (java.sql.Blob) null);\r\n    } catch (final SQLException e) {\r\n    }\r\n    verify(rs, times(1)).updateBlob(1, (java.sql.Blob) null);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestDelegatingResultSet.java",
  "methodName" : "testUpdateBlobIntegerInputStream",
  "sourceCode" : "@Test\r\nvoid testUpdateBlobIntegerInputStream() throws Exception {\r\n    try {\r\n        delegate.updateBlob(1, (java.io.InputStream) null);\r\n    } catch (final SQLException e) {\r\n    }\r\n    verify(rs, times(1)).updateBlob(1, (java.io.InputStream) null);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestDelegatingResultSet.java",
  "methodName" : "testUpdateBlobIntegerInputStreamLong",
  "sourceCode" : "@Test\r\nvoid testUpdateBlobIntegerInputStreamLong() throws Exception {\r\n    try {\r\n        delegate.updateBlob(1, (java.io.InputStream) null, 1L);\r\n    } catch (final SQLException e) {\r\n    }\r\n    verify(rs, times(1)).updateBlob(1, (java.io.InputStream) null, 1L);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestDelegatingResultSet.java",
  "methodName" : "testUpdateBlobStringBlob",
  "sourceCode" : "@Test\r\nvoid testUpdateBlobStringBlob() throws Exception {\r\n    try {\r\n        delegate.updateBlob(\"foo\", (java.sql.Blob) null);\r\n    } catch (final SQLException e) {\r\n    }\r\n    verify(rs, times(1)).updateBlob(\"foo\", (java.sql.Blob) null);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestDelegatingResultSet.java",
  "methodName" : "testUpdateBlobStringInputStream",
  "sourceCode" : "@Test\r\nvoid testUpdateBlobStringInputStream() throws Exception {\r\n    try {\r\n        delegate.updateBlob(\"foo\", (java.io.InputStream) null);\r\n    } catch (final SQLException e) {\r\n    }\r\n    verify(rs, times(1)).updateBlob(\"foo\", (java.io.InputStream) null);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestDelegatingResultSet.java",
  "methodName" : "testUpdateBlobStringInputStreamLong",
  "sourceCode" : "@Test\r\nvoid testUpdateBlobStringInputStreamLong() throws Exception {\r\n    try {\r\n        delegate.updateBlob(\"foo\", (java.io.InputStream) null, 1L);\r\n    } catch (final SQLException e) {\r\n    }\r\n    verify(rs, times(1)).updateBlob(\"foo\", (java.io.InputStream) null, 1L);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestDelegatingResultSet.java",
  "methodName" : "testUpdateBooleanIntegerBoolean",
  "sourceCode" : "@Test\r\nvoid testUpdateBooleanIntegerBoolean() throws Exception {\r\n    try {\r\n        delegate.updateBoolean(1, Boolean.TRUE);\r\n    } catch (final SQLException e) {\r\n    }\r\n    verify(rs, times(1)).updateBoolean(1, Boolean.TRUE);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestDelegatingResultSet.java",
  "methodName" : "testUpdateBooleanStringBoolean",
  "sourceCode" : "@Test\r\nvoid testUpdateBooleanStringBoolean() throws Exception {\r\n    try {\r\n        delegate.updateBoolean(\"foo\", Boolean.TRUE);\r\n    } catch (final SQLException e) {\r\n    }\r\n    verify(rs, times(1)).updateBoolean(\"foo\", Boolean.TRUE);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestDelegatingResultSet.java",
  "methodName" : "testUpdateByteIntegerByte",
  "sourceCode" : "@Test\r\nvoid testUpdateByteIntegerByte() throws Exception {\r\n    try {\r\n        delegate.updateByte(1, (byte) 1);\r\n    } catch (final SQLException e) {\r\n    }\r\n    verify(rs, times(1)).updateByte(1, (byte) 1);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestDelegatingResultSet.java",
  "methodName" : "testUpdateBytesIntegerByteArray",
  "sourceCode" : "@Test\r\nvoid testUpdateBytesIntegerByteArray() throws Exception {\r\n    try {\r\n        delegate.updateBytes(1, new byte[] { 1 });\r\n    } catch (final SQLException e) {\r\n    }\r\n    verify(rs, times(1)).updateBytes(1, new byte[] { 1 });\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestDelegatingResultSet.java",
  "methodName" : "testUpdateBytesStringByteArray",
  "sourceCode" : "@Test\r\nvoid testUpdateBytesStringByteArray() throws Exception {\r\n    try {\r\n        delegate.updateBytes(\"foo\", new byte[] { 1 });\r\n    } catch (final SQLException e) {\r\n    }\r\n    verify(rs, times(1)).updateBytes(\"foo\", new byte[] { 1 });\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestDelegatingResultSet.java",
  "methodName" : "testUpdateByteStringByte",
  "sourceCode" : "@Test\r\nvoid testUpdateByteStringByte() throws Exception {\r\n    try {\r\n        delegate.updateByte(\"foo\", (byte) 1);\r\n    } catch (final SQLException e) {\r\n    }\r\n    verify(rs, times(1)).updateByte(\"foo\", (byte) 1);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestDelegatingResultSet.java",
  "methodName" : "testUpdateCharacterStreamIntegerReader",
  "sourceCode" : "@Test\r\nvoid testUpdateCharacterStreamIntegerReader() throws Exception {\r\n    try {\r\n        delegate.updateCharacterStream(1, (java.io.StringReader) null);\r\n    } catch (final SQLException e) {\r\n    }\r\n    verify(rs, times(1)).updateCharacterStream(1, (java.io.StringReader) null);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestDelegatingResultSet.java",
  "methodName" : "testUpdateCharacterStreamIntegerReaderInteger",
  "sourceCode" : "@Test\r\nvoid testUpdateCharacterStreamIntegerReaderInteger() throws Exception {\r\n    try {\r\n        delegate.updateCharacterStream(1, (java.io.StringReader) null, 1);\r\n    } catch (final SQLException e) {\r\n    }\r\n    verify(rs, times(1)).updateCharacterStream(1, (java.io.StringReader) null, 1);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestDelegatingResultSet.java",
  "methodName" : "testUpdateCharacterStreamIntegerReaderLong",
  "sourceCode" : "@Test\r\nvoid testUpdateCharacterStreamIntegerReaderLong() throws Exception {\r\n    try {\r\n        delegate.updateCharacterStream(1, (java.io.StringReader) null, 1L);\r\n    } catch (final SQLException e) {\r\n    }\r\n    verify(rs, times(1)).updateCharacterStream(1, (java.io.StringReader) null, 1L);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestDelegatingResultSet.java",
  "methodName" : "testUpdateCharacterStreamStringReader",
  "sourceCode" : "@Test\r\nvoid testUpdateCharacterStreamStringReader() throws Exception {\r\n    try {\r\n        delegate.updateCharacterStream(\"foo\", (java.io.StringReader) null);\r\n    } catch (final SQLException e) {\r\n    }\r\n    verify(rs, times(1)).updateCharacterStream(\"foo\", (java.io.StringReader) null);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestDelegatingResultSet.java",
  "methodName" : "testUpdateCharacterStreamStringReaderInteger",
  "sourceCode" : "@Test\r\nvoid testUpdateCharacterStreamStringReaderInteger() throws Exception {\r\n    try {\r\n        delegate.updateCharacterStream(\"foo\", (java.io.StringReader) null, 1);\r\n    } catch (final SQLException e) {\r\n    }\r\n    verify(rs, times(1)).updateCharacterStream(\"foo\", (java.io.StringReader) null, 1);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestDelegatingResultSet.java",
  "methodName" : "testUpdateCharacterStreamStringReaderLong",
  "sourceCode" : "@Test\r\nvoid testUpdateCharacterStreamStringReaderLong() throws Exception {\r\n    try {\r\n        delegate.updateCharacterStream(\"foo\", (java.io.StringReader) null, 1L);\r\n    } catch (final SQLException e) {\r\n    }\r\n    verify(rs, times(1)).updateCharacterStream(\"foo\", (java.io.StringReader) null, 1L);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestDelegatingResultSet.java",
  "methodName" : "testUpdateClobIntegerClob",
  "sourceCode" : "@Test\r\nvoid testUpdateClobIntegerClob() throws Exception {\r\n    try {\r\n        delegate.updateClob(1, (java.sql.Clob) null);\r\n    } catch (final SQLException e) {\r\n    }\r\n    verify(rs, times(1)).updateClob(1, (java.sql.Clob) null);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestDelegatingResultSet.java",
  "methodName" : "testUpdateClobIntegerReader",
  "sourceCode" : "@Test\r\nvoid testUpdateClobIntegerReader() throws Exception {\r\n    try {\r\n        delegate.updateClob(1, (java.io.StringReader) null);\r\n    } catch (final SQLException e) {\r\n    }\r\n    verify(rs, times(1)).updateClob(1, (java.io.StringReader) null);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestDelegatingResultSet.java",
  "methodName" : "testUpdateClobIntegerReaderLong",
  "sourceCode" : "@Test\r\nvoid testUpdateClobIntegerReaderLong() throws Exception {\r\n    try {\r\n        delegate.updateClob(1, (java.io.StringReader) null, 1L);\r\n    } catch (final SQLException e) {\r\n    }\r\n    verify(rs, times(1)).updateClob(1, (java.io.StringReader) null, 1L);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestDelegatingResultSet.java",
  "methodName" : "testUpdateClobStringClob",
  "sourceCode" : "@Test\r\nvoid testUpdateClobStringClob() throws Exception {\r\n    try {\r\n        delegate.updateClob(\"foo\", (java.sql.Clob) null);\r\n    } catch (final SQLException e) {\r\n    }\r\n    verify(rs, times(1)).updateClob(\"foo\", (java.sql.Clob) null);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestDelegatingResultSet.java",
  "methodName" : "testUpdateClobStringReader",
  "sourceCode" : "@Test\r\nvoid testUpdateClobStringReader() throws Exception {\r\n    try {\r\n        delegate.updateClob(\"foo\", (java.io.StringReader) null);\r\n    } catch (final SQLException e) {\r\n    }\r\n    verify(rs, times(1)).updateClob(\"foo\", (java.io.StringReader) null);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestDelegatingResultSet.java",
  "methodName" : "testUpdateClobStringReaderLong",
  "sourceCode" : "@Test\r\nvoid testUpdateClobStringReaderLong() throws Exception {\r\n    try {\r\n        delegate.updateClob(\"foo\", (java.io.StringReader) null, 1L);\r\n    } catch (final SQLException e) {\r\n    }\r\n    verify(rs, times(1)).updateClob(\"foo\", (java.io.StringReader) null, 1L);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestDelegatingResultSet.java",
  "methodName" : "testUpdateDateIntegerSqlDate",
  "sourceCode" : "@Test\r\nvoid testUpdateDateIntegerSqlDate() throws Exception {\r\n    try {\r\n        delegate.updateDate(1, new java.sql.Date(1529827548745L));\r\n    } catch (final SQLException e) {\r\n    }\r\n    verify(rs, times(1)).updateDate(1, new java.sql.Date(1529827548745L));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestDelegatingResultSet.java",
  "methodName" : "testUpdateDateStringSqlDate",
  "sourceCode" : "@Test\r\nvoid testUpdateDateStringSqlDate() throws Exception {\r\n    try {\r\n        delegate.updateDate(\"foo\", new java.sql.Date(1529827548745L));\r\n    } catch (final SQLException e) {\r\n    }\r\n    verify(rs, times(1)).updateDate(\"foo\", new java.sql.Date(1529827548745L));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestDelegatingResultSet.java",
  "methodName" : "testUpdateDoubleIntegerDouble",
  "sourceCode" : "@Test\r\nvoid testUpdateDoubleIntegerDouble() throws Exception {\r\n    try {\r\n        delegate.updateDouble(1, 1.0d);\r\n    } catch (final SQLException e) {\r\n    }\r\n    verify(rs, times(1)).updateDouble(1, 1.0d);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestDelegatingResultSet.java",
  "methodName" : "testUpdateDoubleStringDouble",
  "sourceCode" : "@Test\r\nvoid testUpdateDoubleStringDouble() throws Exception {\r\n    try {\r\n        delegate.updateDouble(\"foo\", 1.0d);\r\n    } catch (final SQLException e) {\r\n    }\r\n    verify(rs, times(1)).updateDouble(\"foo\", 1.0d);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestDelegatingResultSet.java",
  "methodName" : "testUpdateFloatIntegerFloat",
  "sourceCode" : "@Test\r\nvoid testUpdateFloatIntegerFloat() throws Exception {\r\n    try {\r\n        delegate.updateFloat(1, 1.0f);\r\n    } catch (final SQLException e) {\r\n    }\r\n    verify(rs, times(1)).updateFloat(1, 1.0f);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestDelegatingResultSet.java",
  "methodName" : "testUpdateFloatStringFloat",
  "sourceCode" : "@Test\r\nvoid testUpdateFloatStringFloat() throws Exception {\r\n    try {\r\n        delegate.updateFloat(\"foo\", 1.0f);\r\n    } catch (final SQLException e) {\r\n    }\r\n    verify(rs, times(1)).updateFloat(\"foo\", 1.0f);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestDelegatingResultSet.java",
  "methodName" : "testUpdateIntIntegerInteger",
  "sourceCode" : "@Test\r\nvoid testUpdateIntIntegerInteger() throws Exception {\r\n    try {\r\n        delegate.updateInt(1, 1);\r\n    } catch (final SQLException e) {\r\n    }\r\n    verify(rs, times(1)).updateInt(1, 1);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestDelegatingResultSet.java",
  "methodName" : "testUpdateIntStringInteger",
  "sourceCode" : "@Test\r\nvoid testUpdateIntStringInteger() throws Exception {\r\n    try {\r\n        delegate.updateInt(\"foo\", 1);\r\n    } catch (final SQLException e) {\r\n    }\r\n    verify(rs, times(1)).updateInt(\"foo\", 1);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestDelegatingResultSet.java",
  "methodName" : "testUpdateLongIntegerLong",
  "sourceCode" : "@Test\r\nvoid testUpdateLongIntegerLong() throws Exception {\r\n    try {\r\n        delegate.updateLong(1, 1L);\r\n    } catch (final SQLException e) {\r\n    }\r\n    verify(rs, times(1)).updateLong(1, 1L);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestDelegatingResultSet.java",
  "methodName" : "testUpdateLongStringLong",
  "sourceCode" : "@Test\r\nvoid testUpdateLongStringLong() throws Exception {\r\n    try {\r\n        delegate.updateLong(\"foo\", 1L);\r\n    } catch (final SQLException e) {\r\n    }\r\n    verify(rs, times(1)).updateLong(\"foo\", 1L);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestDelegatingResultSet.java",
  "methodName" : "testUpdateNCharacterStreamIntegerReader",
  "sourceCode" : "@Test\r\nvoid testUpdateNCharacterStreamIntegerReader() throws Exception {\r\n    try {\r\n        delegate.updateNCharacterStream(1, (java.io.StringReader) null);\r\n    } catch (final SQLException e) {\r\n    }\r\n    verify(rs, times(1)).updateNCharacterStream(1, (java.io.StringReader) null);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestDelegatingResultSet.java",
  "methodName" : "testUpdateNCharacterStreamIntegerReaderLong",
  "sourceCode" : "@Test\r\nvoid testUpdateNCharacterStreamIntegerReaderLong() throws Exception {\r\n    try {\r\n        delegate.updateNCharacterStream(1, (java.io.StringReader) null, 1L);\r\n    } catch (final SQLException e) {\r\n    }\r\n    verify(rs, times(1)).updateNCharacterStream(1, (java.io.StringReader) null, 1L);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestDelegatingResultSet.java",
  "methodName" : "testUpdateNCharacterStreamStringReader",
  "sourceCode" : "@Test\r\nvoid testUpdateNCharacterStreamStringReader() throws Exception {\r\n    try {\r\n        delegate.updateNCharacterStream(\"foo\", (java.io.StringReader) null);\r\n    } catch (final SQLException e) {\r\n    }\r\n    verify(rs, times(1)).updateNCharacterStream(\"foo\", (java.io.StringReader) null);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestDelegatingResultSet.java",
  "methodName" : "testUpdateNCharacterStreamStringReaderLong",
  "sourceCode" : "@Test\r\nvoid testUpdateNCharacterStreamStringReaderLong() throws Exception {\r\n    try {\r\n        delegate.updateNCharacterStream(\"foo\", (java.io.StringReader) null, 1L);\r\n    } catch (final SQLException e) {\r\n    }\r\n    verify(rs, times(1)).updateNCharacterStream(\"foo\", (java.io.StringReader) null, 1L);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestDelegatingResultSet.java",
  "methodName" : "testUpdateNClobIntegerNClob",
  "sourceCode" : "@Test\r\nvoid testUpdateNClobIntegerNClob() throws Exception {\r\n    try {\r\n        delegate.updateNClob(1, (java.sql.NClob) null);\r\n    } catch (final SQLException e) {\r\n    }\r\n    verify(rs, times(1)).updateNClob(1, (java.sql.NClob) null);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestDelegatingResultSet.java",
  "methodName" : "testUpdateNClobIntegerReader",
  "sourceCode" : "@Test\r\nvoid testUpdateNClobIntegerReader() throws Exception {\r\n    try {\r\n        delegate.updateNClob(1, (java.io.StringReader) null);\r\n    } catch (final SQLException e) {\r\n    }\r\n    verify(rs, times(1)).updateNClob(1, (java.io.StringReader) null);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestDelegatingResultSet.java",
  "methodName" : "testUpdateNClobIntegerReaderLong",
  "sourceCode" : "@Test\r\nvoid testUpdateNClobIntegerReaderLong() throws Exception {\r\n    try {\r\n        delegate.updateNClob(1, (java.io.StringReader) null, 1L);\r\n    } catch (final SQLException e) {\r\n    }\r\n    verify(rs, times(1)).updateNClob(1, (java.io.StringReader) null, 1L);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestDelegatingResultSet.java",
  "methodName" : "testUpdateNClobStringNClob",
  "sourceCode" : "@Test\r\nvoid testUpdateNClobStringNClob() throws Exception {\r\n    try {\r\n        delegate.updateNClob(\"foo\", (java.sql.NClob) null);\r\n    } catch (final SQLException e) {\r\n    }\r\n    verify(rs, times(1)).updateNClob(\"foo\", (java.sql.NClob) null);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestDelegatingResultSet.java",
  "methodName" : "testUpdateNClobStringReader",
  "sourceCode" : "@Test\r\nvoid testUpdateNClobStringReader() throws Exception {\r\n    try {\r\n        delegate.updateNClob(\"foo\", (java.io.StringReader) null);\r\n    } catch (final SQLException e) {\r\n    }\r\n    verify(rs, times(1)).updateNClob(\"foo\", (java.io.StringReader) null);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestDelegatingResultSet.java",
  "methodName" : "testUpdateNClobStringReaderLong",
  "sourceCode" : "@Test\r\nvoid testUpdateNClobStringReaderLong() throws Exception {\r\n    try {\r\n        delegate.updateNClob(\"foo\", (java.io.StringReader) null, 1L);\r\n    } catch (final SQLException e) {\r\n    }\r\n    verify(rs, times(1)).updateNClob(\"foo\", (java.io.StringReader) null, 1L);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestDelegatingResultSet.java",
  "methodName" : "testUpdateNStringIntegerString",
  "sourceCode" : "@Test\r\nvoid testUpdateNStringIntegerString() throws Exception {\r\n    try {\r\n        delegate.updateNString(1, \"foo\");\r\n    } catch (final SQLException e) {\r\n    }\r\n    verify(rs, times(1)).updateNString(1, \"foo\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestDelegatingResultSet.java",
  "methodName" : "testUpdateNStringStringString",
  "sourceCode" : "@Test\r\nvoid testUpdateNStringStringString() throws Exception {\r\n    try {\r\n        delegate.updateNString(\"foo\", \"foo\");\r\n    } catch (final SQLException e) {\r\n    }\r\n    verify(rs, times(1)).updateNString(\"foo\", \"foo\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestDelegatingResultSet.java",
  "methodName" : "testUpdateNullInteger",
  "sourceCode" : "@Test\r\nvoid testUpdateNullInteger() throws Exception {\r\n    try {\r\n        delegate.updateNull(1);\r\n    } catch (final SQLException e) {\r\n    }\r\n    verify(rs, times(1)).updateNull(1);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestDelegatingResultSet.java",
  "methodName" : "testUpdateNullString",
  "sourceCode" : "@Test\r\nvoid testUpdateNullString() throws Exception {\r\n    try {\r\n        delegate.updateNull(\"foo\");\r\n    } catch (final SQLException e) {\r\n    }\r\n    verify(rs, times(1)).updateNull(\"foo\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestDelegatingResultSet.java",
  "methodName" : "testUpdateObjectIntegerObject",
  "sourceCode" : "@Test\r\nvoid testUpdateObjectIntegerObject() throws Exception {\r\n    try {\r\n        delegate.updateObject(1, System.err);\r\n    } catch (final SQLException e) {\r\n    }\r\n    verify(rs, times(1)).updateObject(1, System.err);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestDelegatingResultSet.java",
  "methodName" : "testUpdateObjectIntegerObjectInteger",
  "sourceCode" : "// FIXME: this appears to be a bug\r\n@Disabled\r\n@Test\r\nvoid testUpdateObjectIntegerObjectInteger() throws Exception {\r\n    try {\r\n        delegate.updateObject(1, System.err, 1);\r\n    } catch (final SQLException e) {\r\n    }\r\n    verify(rs, times(1)).updateObject(1, System.err, 1);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestDelegatingResultSet.java",
  "methodName" : "testUpdateObjectIntegerObjectSQLType",
  "sourceCode" : "@Test\r\nvoid testUpdateObjectIntegerObjectSQLType() throws Exception {\r\n    try {\r\n        delegate.updateObject(1, System.err, (java.sql.SQLType) null);\r\n    } catch (final SQLException e) {\r\n    }\r\n    verify(rs, times(1)).updateObject(1, System.err, (java.sql.SQLType) null);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestDelegatingResultSet.java",
  "methodName" : "testUpdateObjectIntegerObjectSQLTypeInteger",
  "sourceCode" : "@Test\r\nvoid testUpdateObjectIntegerObjectSQLTypeInteger() throws Exception {\r\n    try {\r\n        delegate.updateObject(1, System.err, (java.sql.SQLType) null, 1);\r\n    } catch (final SQLException e) {\r\n    }\r\n    verify(rs, times(1)).updateObject(1, System.err, (java.sql.SQLType) null, 1);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestDelegatingResultSet.java",
  "methodName" : "testUpdateObjectStringObject",
  "sourceCode" : "@Test\r\nvoid testUpdateObjectStringObject() throws Exception {\r\n    try {\r\n        delegate.updateObject(\"foo\", System.err);\r\n    } catch (final SQLException e) {\r\n    }\r\n    verify(rs, times(1)).updateObject(\"foo\", System.err);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestDelegatingResultSet.java",
  "methodName" : "testUpdateObjectStringObjectInteger",
  "sourceCode" : "// FIXME this appears to be a bug\r\n@Disabled\r\n@Test\r\nvoid testUpdateObjectStringObjectInteger() throws Exception {\r\n    try {\r\n        delegate.updateObject(\"foo\", System.err, 1);\r\n    } catch (final SQLException e) {\r\n    }\r\n    verify(rs, times(1)).updateObject(\"foo\", System.err, 1);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestDelegatingResultSet.java",
  "methodName" : "testUpdateObjectStringObjectSQLType",
  "sourceCode" : "@Test\r\nvoid testUpdateObjectStringObjectSQLType() throws Exception {\r\n    try {\r\n        delegate.updateObject(\"foo\", System.err, (java.sql.SQLType) null);\r\n    } catch (final SQLException e) {\r\n    }\r\n    verify(rs, times(1)).updateObject(\"foo\", System.err, (java.sql.SQLType) null);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestDelegatingResultSet.java",
  "methodName" : "testUpdateObjectStringObjectSQLTypeInteger",
  "sourceCode" : "@Test\r\nvoid testUpdateObjectStringObjectSQLTypeInteger() throws Exception {\r\n    try {\r\n        delegate.updateObject(\"foo\", System.err, (java.sql.SQLType) null, 1);\r\n    } catch (final SQLException e) {\r\n    }\r\n    verify(rs, times(1)).updateObject(\"foo\", System.err, (java.sql.SQLType) null, 1);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestDelegatingResultSet.java",
  "methodName" : "testUpdateRefIntegerRef",
  "sourceCode" : "@Test\r\nvoid testUpdateRefIntegerRef() throws Exception {\r\n    try {\r\n        delegate.updateRef(1, (java.sql.Ref) null);\r\n    } catch (final SQLException e) {\r\n    }\r\n    verify(rs, times(1)).updateRef(1, (java.sql.Ref) null);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestDelegatingResultSet.java",
  "methodName" : "testUpdateRefStringRef",
  "sourceCode" : "@Test\r\nvoid testUpdateRefStringRef() throws Exception {\r\n    try {\r\n        delegate.updateRef(\"foo\", (java.sql.Ref) null);\r\n    } catch (final SQLException e) {\r\n    }\r\n    verify(rs, times(1)).updateRef(\"foo\", (java.sql.Ref) null);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestDelegatingResultSet.java",
  "methodName" : "testUpdateRow",
  "sourceCode" : "@Test\r\nvoid testUpdateRow() throws Exception {\r\n    try {\r\n        delegate.updateRow();\r\n    } catch (final SQLException e) {\r\n    }\r\n    verify(rs, times(1)).updateRow();\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestDelegatingResultSet.java",
  "methodName" : "testUpdateRowIdIntegerRowId",
  "sourceCode" : "@Test\r\nvoid testUpdateRowIdIntegerRowId() throws Exception {\r\n    try {\r\n        delegate.updateRowId(1, (java.sql.RowId) null);\r\n    } catch (final SQLException e) {\r\n    }\r\n    verify(rs, times(1)).updateRowId(1, (java.sql.RowId) null);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestDelegatingResultSet.java",
  "methodName" : "testUpdateRowIdStringRowId",
  "sourceCode" : "@Test\r\nvoid testUpdateRowIdStringRowId() throws Exception {\r\n    try {\r\n        delegate.updateRowId(\"foo\", (java.sql.RowId) null);\r\n    } catch (final SQLException e) {\r\n    }\r\n    verify(rs, times(1)).updateRowId(\"foo\", (java.sql.RowId) null);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestDelegatingResultSet.java",
  "methodName" : "testUpdateShortIntegerShort",
  "sourceCode" : "@Test\r\nvoid testUpdateShortIntegerShort() throws Exception {\r\n    try {\r\n        delegate.updateShort(1, (short) 1);\r\n    } catch (final SQLException e) {\r\n    }\r\n    verify(rs, times(1)).updateShort(1, (short) 1);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestDelegatingResultSet.java",
  "methodName" : "testUpdateShortStringShort",
  "sourceCode" : "@Test\r\nvoid testUpdateShortStringShort() throws Exception {\r\n    try {\r\n        delegate.updateShort(\"foo\", (short) 1);\r\n    } catch (final SQLException e) {\r\n    }\r\n    verify(rs, times(1)).updateShort(\"foo\", (short) 1);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestDelegatingResultSet.java",
  "methodName" : "testUpdateSQLXMLIntegerSQLXML",
  "sourceCode" : "@Test\r\nvoid testUpdateSQLXMLIntegerSQLXML() throws Exception {\r\n    try {\r\n        delegate.updateSQLXML(1, (java.sql.SQLXML) null);\r\n    } catch (final SQLException e) {\r\n    }\r\n    verify(rs, times(1)).updateSQLXML(1, (java.sql.SQLXML) null);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestDelegatingResultSet.java",
  "methodName" : "testUpdateSQLXMLStringSQLXML",
  "sourceCode" : "@Test\r\nvoid testUpdateSQLXMLStringSQLXML() throws Exception {\r\n    try {\r\n        delegate.updateSQLXML(\"foo\", (java.sql.SQLXML) null);\r\n    } catch (final SQLException e) {\r\n    }\r\n    verify(rs, times(1)).updateSQLXML(\"foo\", (java.sql.SQLXML) null);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestDelegatingResultSet.java",
  "methodName" : "testUpdateStringIntegerString",
  "sourceCode" : "@Test\r\nvoid testUpdateStringIntegerString() throws Exception {\r\n    try {\r\n        delegate.updateString(1, \"foo\");\r\n    } catch (final SQLException e) {\r\n    }\r\n    verify(rs, times(1)).updateString(1, \"foo\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestDelegatingResultSet.java",
  "methodName" : "testUpdateStringStringString",
  "sourceCode" : "@Test\r\nvoid testUpdateStringStringString() throws Exception {\r\n    try {\r\n        delegate.updateString(\"foo\", \"foo\");\r\n    } catch (final SQLException e) {\r\n    }\r\n    verify(rs, times(1)).updateString(\"foo\", \"foo\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestDelegatingResultSet.java",
  "methodName" : "testUpdateTimeIntegerTime",
  "sourceCode" : "@Test\r\nvoid testUpdateTimeIntegerTime() throws Exception {\r\n    try {\r\n        delegate.updateTime(1, (java.sql.Time) null);\r\n    } catch (final SQLException e) {\r\n    }\r\n    verify(rs, times(1)).updateTime(1, (java.sql.Time) null);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestDelegatingResultSet.java",
  "methodName" : "testUpdateTimestampIntegerTimestamp",
  "sourceCode" : "@Test\r\nvoid testUpdateTimestampIntegerTimestamp() throws Exception {\r\n    try {\r\n        delegate.updateTimestamp(1, (java.sql.Timestamp) null);\r\n    } catch (final SQLException e) {\r\n    }\r\n    verify(rs, times(1)).updateTimestamp(1, (java.sql.Timestamp) null);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestDelegatingResultSet.java",
  "methodName" : "testUpdateTimestampStringTimestamp",
  "sourceCode" : "@Test\r\nvoid testUpdateTimestampStringTimestamp() throws Exception {\r\n    try {\r\n        delegate.updateTimestamp(\"foo\", (java.sql.Timestamp) null);\r\n    } catch (final SQLException e) {\r\n    }\r\n    verify(rs, times(1)).updateTimestamp(\"foo\", (java.sql.Timestamp) null);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestDelegatingResultSet.java",
  "methodName" : "testUpdateTimeStringTime",
  "sourceCode" : "@Test\r\nvoid testUpdateTimeStringTime() throws Exception {\r\n    try {\r\n        delegate.updateTime(\"foo\", (java.sql.Time) null);\r\n    } catch (final SQLException e) {\r\n    }\r\n    verify(rs, times(1)).updateTime(\"foo\", (java.sql.Time) null);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestDelegatingResultSet.java",
  "methodName" : "testWasNull",
  "sourceCode" : "@Test\r\nvoid testWasNull() throws Exception {\r\n    try {\r\n        delegate.wasNull();\r\n    } catch (final SQLException e) {\r\n    }\r\n    verify(rs, times(1)).wasNull();\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestDelegatingResultSet.java",
  "methodName" : "testWrap",
  "sourceCode" : "@Test\r\nvoid testWrap() throws SQLException {\r\n    final DelegatingResultSet delegate = (DelegatingResultSet) DelegatingResultSet.wrapResultSet(conn, rs);\r\n    assertEquals(delegate, delegate.unwrap(ResultSet.class));\r\n    assertEquals(delegate, delegate.unwrap(DelegatingResultSet.class));\r\n    assertEquals(rs, delegate.unwrap(rs.getClass()));\r\n    assertNull(delegate.unwrap(String.class));\r\n    assertTrue(delegate.isWrapperFor(ResultSet.class));\r\n    assertTrue(delegate.isWrapperFor(DelegatingResultSet.class));\r\n    assertTrue(delegate.isWrapperFor(rs.getClass()));\r\n    assertFalse(delegate.isWrapperFor(String.class));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestDelegatingStatement.java",
  "methodName" : "testAddBatchString",
  "sourceCode" : "@Test\r\nvoid testAddBatchString() throws Exception {\r\n    try {\r\n        delegatingStatement.addBatch(\"foo\");\r\n    } catch (final SQLException e) {\r\n    }\r\n    verify(mockedStatement, times(1)).addBatch(\"foo\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestDelegatingStatement.java",
  "methodName" : "testCancel",
  "sourceCode" : "@Test\r\nvoid testCancel() throws Exception {\r\n    try {\r\n        delegatingStatement.cancel();\r\n    } catch (final SQLException e) {\r\n    }\r\n    verify(mockedStatement, times(1)).cancel();\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestDelegatingStatement.java",
  "methodName" : "testCheckOpen",
  "sourceCode" : "@Test\r\nvoid testCheckOpen() throws Exception {\r\n    delegatingStatement.checkOpen();\r\n    delegatingStatement.close();\r\n    assertThrows(SQLException.class, delegatingStatement::checkOpen);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestDelegatingStatement.java",
  "methodName" : "testClearBatch",
  "sourceCode" : "@Test\r\nvoid testClearBatch() throws Exception {\r\n    try {\r\n        delegatingStatement.clearBatch();\r\n    } catch (final SQLException e) {\r\n    }\r\n    verify(mockedStatement, times(1)).clearBatch();\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestDelegatingStatement.java",
  "methodName" : "testClearWarnings",
  "sourceCode" : "@Test\r\nvoid testClearWarnings() throws Exception {\r\n    try {\r\n        delegatingStatement.clearWarnings();\r\n    } catch (final SQLException e) {\r\n    }\r\n    verify(mockedStatement, times(1)).clearWarnings();\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestDelegatingStatement.java",
  "methodName" : "testClose",
  "sourceCode" : "@Test\r\nvoid testClose() throws Exception {\r\n    try {\r\n        delegatingStatement.close();\r\n    } catch (final SQLException e) {\r\n    }\r\n    verify(mockedStatement, times(1)).close();\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestDelegatingStatement.java",
  "methodName" : "testCloseOnCompletion",
  "sourceCode" : "@Test\r\nvoid testCloseOnCompletion() throws Exception {\r\n    try {\r\n        delegatingStatement.closeOnCompletion();\r\n    } catch (final SQLException e) {\r\n    }\r\n    verify(mockedStatement, times(1)).closeOnCompletion();\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestDelegatingStatement.java",
  "methodName" : "testCloseWithResultSetCloseException",
  "sourceCode" : "@Test\r\nvoid testCloseWithResultSetCloseException() throws Exception {\r\n    testerResultSet.setSqlExceptionOnClose(true);\r\n    delegatingStatement.addTrace(testerResultSet);\r\n    final SQLException e = assertThrows(SQLException.class, delegatingStatement::close);\r\n    assertInstanceOf(SQLExceptionList.class, e);\r\n    verify(mockedStatement, times(1)).close();\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestDelegatingStatement.java",
  "methodName" : "testCloseWithStatementCloseException",
  "sourceCode" : "@Test\r\nvoid testCloseWithStatementCloseException() throws Exception {\r\n    testerStatement.setSqlExceptionOnClose(true);\r\n    final SQLException e = assertThrows(SQLException.class, delegatingTesterStatement::close);\r\n    assertInstanceOf(SQLExceptionList.class, e);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestDelegatingStatement.java",
  "methodName" : "testExecuteBatch",
  "sourceCode" : "@Test\r\nvoid testExecuteBatch() throws Exception {\r\n    try {\r\n        delegatingStatement.executeBatch();\r\n    } catch (final SQLException e) {\r\n    }\r\n    verify(mockedStatement, times(1)).executeBatch();\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestDelegatingStatement.java",
  "methodName" : "testExecuteLargeBatch",
  "sourceCode" : "@Test\r\nvoid testExecuteLargeBatch() throws Exception {\r\n    try {\r\n        delegatingStatement.executeLargeBatch();\r\n    } catch (final SQLException e) {\r\n    }\r\n    verify(mockedStatement, times(1)).executeLargeBatch();\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestDelegatingStatement.java",
  "methodName" : "testExecuteLargeUpdateString",
  "sourceCode" : "@Test\r\nvoid testExecuteLargeUpdateString() throws Exception {\r\n    try {\r\n        delegatingStatement.executeLargeUpdate(\"foo\");\r\n    } catch (final SQLException e) {\r\n    }\r\n    verify(mockedStatement, times(1)).executeLargeUpdate(\"foo\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestDelegatingStatement.java",
  "methodName" : "testExecuteLargeUpdateStringInteger",
  "sourceCode" : "@Test\r\nvoid testExecuteLargeUpdateStringInteger() throws Exception {\r\n    try {\r\n        delegatingStatement.executeLargeUpdate(\"foo\", 1);\r\n    } catch (final SQLException e) {\r\n    }\r\n    verify(mockedStatement, times(1)).executeLargeUpdate(\"foo\", 1);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestDelegatingStatement.java",
  "methodName" : "testExecuteLargeUpdateStringIntegerArray",
  "sourceCode" : "@Test\r\nvoid testExecuteLargeUpdateStringIntegerArray() throws Exception {\r\n    try {\r\n        delegatingStatement.executeLargeUpdate(\"foo\", (int[]) null);\r\n    } catch (final SQLException e) {\r\n    }\r\n    verify(mockedStatement, times(1)).executeLargeUpdate(\"foo\", (int[]) null);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestDelegatingStatement.java",
  "methodName" : "testExecuteLargeUpdateStringStringArray",
  "sourceCode" : "@Test\r\nvoid testExecuteLargeUpdateStringStringArray() throws Exception {\r\n    try {\r\n        delegatingStatement.executeLargeUpdate(\"foo\", (String[]) null);\r\n    } catch (final SQLException e) {\r\n    }\r\n    verify(mockedStatement, times(1)).executeLargeUpdate(\"foo\", (String[]) null);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestDelegatingStatement.java",
  "methodName" : "testExecuteQueryReturnsNull",
  "sourceCode" : "@Test\r\nvoid testExecuteQueryReturnsNull() throws Exception {\r\n    assertNull(delegatingStatement.executeQuery(\"null\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestDelegatingStatement.java",
  "methodName" : "testExecuteQueryString",
  "sourceCode" : "@Test\r\nvoid testExecuteQueryString() throws Exception {\r\n    try {\r\n        delegatingStatement.executeQuery(\"foo\");\r\n    } catch (final SQLException e) {\r\n    }\r\n    verify(mockedStatement, times(1)).executeQuery(\"foo\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestDelegatingStatement.java",
  "methodName" : "testExecuteString",
  "sourceCode" : "@Test\r\nvoid testExecuteString() throws Exception {\r\n    try {\r\n        delegatingStatement.execute(\"foo\");\r\n    } catch (final SQLException e) {\r\n    }\r\n    verify(mockedStatement, times(1)).execute(\"foo\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestDelegatingStatement.java",
  "methodName" : "testExecuteStringInteger",
  "sourceCode" : "@Test\r\nvoid testExecuteStringInteger() throws Exception {\r\n    try {\r\n        delegatingStatement.execute(\"foo\", 1);\r\n    } catch (final SQLException e) {\r\n    }\r\n    verify(mockedStatement, times(1)).execute(\"foo\", 1);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestDelegatingStatement.java",
  "methodName" : "testExecuteStringIntegerArray",
  "sourceCode" : "@Test\r\nvoid testExecuteStringIntegerArray() throws Exception {\r\n    try {\r\n        delegatingStatement.execute(\"foo\", (int[]) null);\r\n    } catch (final SQLException e) {\r\n    }\r\n    verify(mockedStatement, times(1)).execute(\"foo\", (int[]) null);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestDelegatingStatement.java",
  "methodName" : "testExecuteStringStringArray",
  "sourceCode" : "@Test\r\nvoid testExecuteStringStringArray() throws Exception {\r\n    try {\r\n        delegatingStatement.execute(\"foo\", (String[]) null);\r\n    } catch (final SQLException e) {\r\n    }\r\n    verify(mockedStatement, times(1)).execute(\"foo\", (String[]) null);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestDelegatingStatement.java",
  "methodName" : "testExecuteUpdateString",
  "sourceCode" : "@Test\r\nvoid testExecuteUpdateString() throws Exception {\r\n    try {\r\n        delegatingStatement.executeUpdate(\"foo\");\r\n    } catch (final SQLException e) {\r\n    }\r\n    verify(mockedStatement, times(1)).executeUpdate(\"foo\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestDelegatingStatement.java",
  "methodName" : "testExecuteUpdateStringInteger",
  "sourceCode" : "@Test\r\nvoid testExecuteUpdateStringInteger() throws Exception {\r\n    try {\r\n        delegatingStatement.executeUpdate(\"foo\", 1);\r\n    } catch (final SQLException e) {\r\n    }\r\n    verify(mockedStatement, times(1)).executeUpdate(\"foo\", 1);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestDelegatingStatement.java",
  "methodName" : "testExecuteUpdateStringIntegerArray",
  "sourceCode" : "@Test\r\nvoid testExecuteUpdateStringIntegerArray() throws Exception {\r\n    try {\r\n        delegatingStatement.executeUpdate(\"foo\", (int[]) null);\r\n    } catch (final SQLException e) {\r\n    }\r\n    verify(mockedStatement, times(1)).executeUpdate(\"foo\", (int[]) null);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestDelegatingStatement.java",
  "methodName" : "testExecuteUpdateStringStringArray",
  "sourceCode" : "@Test\r\nvoid testExecuteUpdateStringStringArray() throws Exception {\r\n    try {\r\n        delegatingStatement.executeUpdate(\"foo\", (String[]) null);\r\n    } catch (final SQLException e) {\r\n    }\r\n    verify(mockedStatement, times(1)).executeUpdate(\"foo\", (String[]) null);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestDelegatingStatement.java",
  "methodName" : "testGetConnection",
  "sourceCode" : "/**\r\n * This method is a bit special, and return the delegate connection, not the wrapped statement's connection.\r\n *\r\n * @throws Exception\r\n */\r\n@Test\r\nvoid testGetConnection() throws Exception {\r\n    try {\r\n        delegatingStatement.getConnection();\r\n    } catch (final SQLException e) {\r\n    }\r\n    verify(mockedStatement, times(0)).getConnection();\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestDelegatingStatement.java",
  "methodName" : "testGetDelegate",
  "sourceCode" : "@Test\r\nvoid testGetDelegate() throws Exception {\r\n    assertEquals(mockedStatement, delegatingStatement.getDelegate());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestDelegatingStatement.java",
  "methodName" : "testGetFetchDirection",
  "sourceCode" : "@Test\r\nvoid testGetFetchDirection() throws Exception {\r\n    try {\r\n        delegatingStatement.getFetchDirection();\r\n    } catch (final SQLException e) {\r\n    }\r\n    verify(mockedStatement, times(1)).getFetchDirection();\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestDelegatingStatement.java",
  "methodName" : "testGetFetchSize",
  "sourceCode" : "@Test\r\nvoid testGetFetchSize() throws Exception {\r\n    try {\r\n        delegatingStatement.getFetchSize();\r\n    } catch (final SQLException e) {\r\n    }\r\n    verify(mockedStatement, times(1)).getFetchSize();\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestDelegatingStatement.java",
  "methodName" : "testGetGeneratedKeys",
  "sourceCode" : "@Test\r\nvoid testGetGeneratedKeys() throws Exception {\r\n    try {\r\n        delegatingStatement.getGeneratedKeys();\r\n    } catch (final SQLException e) {\r\n    }\r\n    verify(mockedStatement, times(1)).getGeneratedKeys();\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestDelegatingStatement.java",
  "methodName" : "testGetLargeMaxRows",
  "sourceCode" : "@Test\r\nvoid testGetLargeMaxRows() throws Exception {\r\n    try {\r\n        delegatingStatement.getLargeMaxRows();\r\n    } catch (final SQLException e) {\r\n    }\r\n    verify(mockedStatement, times(1)).getLargeMaxRows();\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestDelegatingStatement.java",
  "methodName" : "testGetLargeUpdateCount",
  "sourceCode" : "@Test\r\nvoid testGetLargeUpdateCount() throws Exception {\r\n    try {\r\n        delegatingStatement.getLargeUpdateCount();\r\n    } catch (final SQLException e) {\r\n    }\r\n    verify(mockedStatement, times(1)).getLargeUpdateCount();\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestDelegatingStatement.java",
  "methodName" : "testGetMaxFieldSize",
  "sourceCode" : "@Test\r\nvoid testGetMaxFieldSize() throws Exception {\r\n    try {\r\n        delegatingStatement.getMaxFieldSize();\r\n    } catch (final SQLException e) {\r\n    }\r\n    verify(mockedStatement, times(1)).getMaxFieldSize();\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestDelegatingStatement.java",
  "methodName" : "testGetMaxRows",
  "sourceCode" : "@Test\r\nvoid testGetMaxRows() throws Exception {\r\n    try {\r\n        delegatingStatement.getMaxRows();\r\n    } catch (final SQLException e) {\r\n    }\r\n    verify(mockedStatement, times(1)).getMaxRows();\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestDelegatingStatement.java",
  "methodName" : "testGetMoreResults",
  "sourceCode" : "@Test\r\nvoid testGetMoreResults() throws Exception {\r\n    try {\r\n        delegatingStatement.getMoreResults();\r\n    } catch (final SQLException e) {\r\n    }\r\n    verify(mockedStatement, times(1)).getMoreResults();\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestDelegatingStatement.java",
  "methodName" : "testGetMoreResultsInteger",
  "sourceCode" : "@Test\r\nvoid testGetMoreResultsInteger() throws Exception {\r\n    try {\r\n        delegatingStatement.getMoreResults(1);\r\n    } catch (final SQLException e) {\r\n    }\r\n    verify(mockedStatement, times(1)).getMoreResults(1);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestDelegatingStatement.java",
  "methodName" : "testGetQueryTimeout",
  "sourceCode" : "@Test\r\nvoid testGetQueryTimeout() throws Exception {\r\n    try {\r\n        delegatingStatement.getQueryTimeout();\r\n    } catch (final SQLException e) {\r\n    }\r\n    verify(mockedStatement, times(1)).getQueryTimeout();\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestDelegatingStatement.java",
  "methodName" : "testGetResultSet",
  "sourceCode" : "@Test\r\nvoid testGetResultSet() throws Exception {\r\n    try {\r\n        delegatingStatement.getResultSet();\r\n    } catch (final SQLException e) {\r\n    }\r\n    verify(mockedStatement, times(1)).getResultSet();\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestDelegatingStatement.java",
  "methodName" : "testGetResultSetConcurrency",
  "sourceCode" : "@Test\r\nvoid testGetResultSetConcurrency() throws Exception {\r\n    try {\r\n        delegatingStatement.getResultSetConcurrency();\r\n    } catch (final SQLException e) {\r\n    }\r\n    verify(mockedStatement, times(1)).getResultSetConcurrency();\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestDelegatingStatement.java",
  "methodName" : "testGetResultSetHoldability",
  "sourceCode" : "@Test\r\nvoid testGetResultSetHoldability() throws Exception {\r\n    try {\r\n        delegatingStatement.getResultSetHoldability();\r\n    } catch (final SQLException e) {\r\n    }\r\n    verify(mockedStatement, times(1)).getResultSetHoldability();\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestDelegatingStatement.java",
  "methodName" : "testGetResultSetType",
  "sourceCode" : "@Test\r\nvoid testGetResultSetType() throws Exception {\r\n    try {\r\n        delegatingStatement.getResultSetType();\r\n    } catch (final SQLException e) {\r\n    }\r\n    verify(mockedStatement, times(1)).getResultSetType();\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestDelegatingStatement.java",
  "methodName" : "testGetUpdateCount",
  "sourceCode" : "@Test\r\nvoid testGetUpdateCount() throws Exception {\r\n    try {\r\n        delegatingStatement.getUpdateCount();\r\n    } catch (final SQLException e) {\r\n    }\r\n    verify(mockedStatement, times(1)).getUpdateCount();\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestDelegatingStatement.java",
  "methodName" : "testGetWarnings",
  "sourceCode" : "@Test\r\nvoid testGetWarnings() throws Exception {\r\n    try {\r\n        delegatingStatement.getWarnings();\r\n    } catch (final SQLException e) {\r\n    }\r\n    verify(mockedStatement, times(1)).getWarnings();\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestDelegatingStatement.java",
  "methodName" : "testIsClosed",
  "sourceCode" : "/**\r\n * This method is a bit special, and call isClosed in the delegate object itself, not in the wrapped statement.\r\n *\r\n * @throws Exception\r\n */\r\n@Test\r\nvoid testIsClosed() throws Exception {\r\n    try {\r\n        delegatingStatement.isClosed();\r\n    } catch (final SQLException e) {\r\n    }\r\n    verify(mockedStatement, times(0)).isClosed();\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestDelegatingStatement.java",
  "methodName" : "testIsCloseOnCompletion",
  "sourceCode" : "@Test\r\nvoid testIsCloseOnCompletion() throws Exception {\r\n    try {\r\n        delegatingStatement.isCloseOnCompletion();\r\n    } catch (final SQLException e) {\r\n    }\r\n    verify(mockedStatement, times(1)).isCloseOnCompletion();\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestDelegatingStatement.java",
  "methodName" : "testIsPoolable",
  "sourceCode" : "@Test\r\nvoid testIsPoolable() throws Exception {\r\n    try {\r\n        delegatingStatement.isPoolable();\r\n    } catch (final SQLException e) {\r\n    }\r\n    verify(mockedStatement, times(1)).isPoolable();\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestDelegatingStatement.java",
  "methodName" : "testIsWrapperFor",
  "sourceCode" : "@Test\r\nvoid testIsWrapperFor() throws Exception {\r\n    final TesterConnection tstConn = new TesterConnection(\"test\", \"test\");\r\n    final TesterStatement tstStmt = new TesterStatementNonWrapping(tstConn);\r\n    final DelegatingConnection<TesterConnection> dconn = new DelegatingConnection<>(tstConn);\r\n    final DelegatingStatement stamt = new DelegatingStatement(dconn, tstStmt);\r\n    final Class<?> stmtProxyClass = Proxy.getProxyClass(this.getClass().getClassLoader(), Statement.class);\r\n    assertTrue(stamt.isWrapperFor(DelegatingStatement.class));\r\n    assertTrue(stamt.isWrapperFor(TesterStatement.class));\r\n    assertFalse(stamt.isWrapperFor(stmtProxyClass));\r\n    stamt.close();\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestDelegatingStatement.java",
  "methodName" : "testSetCursorNameString",
  "sourceCode" : "@Test\r\nvoid testSetCursorNameString() throws Exception {\r\n    try {\r\n        delegatingStatement.setCursorName(\"foo\");\r\n    } catch (final SQLException e) {\r\n    }\r\n    verify(mockedStatement, times(1)).setCursorName(\"foo\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestDelegatingStatement.java",
  "methodName" : "testSetEscapeProcessingBoolean",
  "sourceCode" : "@Test\r\nvoid testSetEscapeProcessingBoolean() throws Exception {\r\n    try {\r\n        delegatingStatement.setEscapeProcessing(Boolean.TRUE);\r\n    } catch (final SQLException e) {\r\n    }\r\n    verify(mockedStatement, times(1)).setEscapeProcessing(Boolean.TRUE);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestDelegatingStatement.java",
  "methodName" : "testSetFetchDirectionInteger",
  "sourceCode" : "@Test\r\nvoid testSetFetchDirectionInteger() throws Exception {\r\n    try {\r\n        delegatingStatement.setFetchDirection(1);\r\n    } catch (final SQLException e) {\r\n    }\r\n    verify(mockedStatement, times(1)).setFetchDirection(1);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestDelegatingStatement.java",
  "methodName" : "testSetFetchSizeInteger",
  "sourceCode" : "@Test\r\nvoid testSetFetchSizeInteger() throws Exception {\r\n    try {\r\n        delegatingStatement.setFetchSize(1);\r\n    } catch (final SQLException e) {\r\n    }\r\n    verify(mockedStatement, times(1)).setFetchSize(1);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestDelegatingStatement.java",
  "methodName" : "testSetLargeMaxRowsLong",
  "sourceCode" : "@Test\r\nvoid testSetLargeMaxRowsLong() throws Exception {\r\n    try {\r\n        delegatingStatement.setLargeMaxRows(1L);\r\n    } catch (final SQLException e) {\r\n    }\r\n    verify(mockedStatement, times(1)).setLargeMaxRows(1L);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestDelegatingStatement.java",
  "methodName" : "testSetMaxFieldSizeInteger",
  "sourceCode" : "@Test\r\nvoid testSetMaxFieldSizeInteger() throws Exception {\r\n    try {\r\n        delegatingStatement.setMaxFieldSize(1);\r\n    } catch (final SQLException e) {\r\n    }\r\n    verify(mockedStatement, times(1)).setMaxFieldSize(1);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestDelegatingStatement.java",
  "methodName" : "testSetMaxRowsInteger",
  "sourceCode" : "@Test\r\nvoid testSetMaxRowsInteger() throws Exception {\r\n    try {\r\n        delegatingStatement.setMaxRows(1);\r\n    } catch (final SQLException e) {\r\n    }\r\n    verify(mockedStatement, times(1)).setMaxRows(1);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestDelegatingStatement.java",
  "methodName" : "testSetPoolableBoolean",
  "sourceCode" : "@Test\r\nvoid testSetPoolableBoolean() throws Exception {\r\n    try {\r\n        delegatingStatement.setPoolable(Boolean.TRUE);\r\n    } catch (final SQLException e) {\r\n    }\r\n    verify(mockedStatement, times(1)).setPoolable(Boolean.TRUE);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestDelegatingStatement.java",
  "methodName" : "testSetQueryTimeoutInteger",
  "sourceCode" : "@Test\r\nvoid testSetQueryTimeoutInteger() throws Exception {\r\n    try {\r\n        delegatingStatement.setQueryTimeout(1);\r\n    } catch (final SQLException e) {\r\n    }\r\n    verify(mockedStatement, times(1)).setQueryTimeout(1);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestDelegatingStatement.java",
  "methodName" : "testWrap",
  "sourceCode" : "@Test\r\nvoid testWrap() throws SQLException {\r\n    assertEquals(delegatingStatement, delegatingStatement.unwrap(Statement.class));\r\n    assertEquals(delegatingStatement, delegatingStatement.unwrap(DelegatingStatement.class));\r\n    assertEquals(mockedStatement, delegatingStatement.unwrap(mockedStatement.getClass()));\r\n    assertNull(delegatingStatement.unwrap(String.class));\r\n    assertTrue(delegatingStatement.isWrapperFor(Statement.class));\r\n    assertTrue(delegatingStatement.isWrapperFor(DelegatingStatement.class));\r\n    assertTrue(delegatingStatement.isWrapperFor(mockedStatement.getClass()));\r\n    assertFalse(delegatingStatement.isWrapperFor(String.class));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestDriverConnectionFactory.java",
  "methodName" : "testCreateConnection",
  "sourceCode" : "@Test\r\nvoid testCreateConnection() throws SQLException {\r\n    final DriverConnectionFactory cf = new DriverConnectionFactory(new TesterDriver(), \"jdbc:apache:commons:testdriver\", null);\r\n    final Connection conn = cf.createConnection();\r\n    assertEquals(0, conn.getMetaData().getDriverMajorVersion());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestDriverConnectionFactory.java",
  "methodName" : "testDriverConnectionFactoryToString",
  "sourceCode" : "@Test\r\nvoid testDriverConnectionFactoryToString() {\r\n    final DriverConnectionFactory cf = new DriverConnectionFactory(new TesterDriver(), \"jdbc:apache:commons:testdriver\", null);\r\n    final String toString = cf.toString();\r\n    assertTrue(toString.contains(\"jdbc:apache:commons:testdriver\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestDriverManagerConnectionFactory.java",
  "methodName" : "testDriverManagerCredentialsInUrl",
  "sourceCode" : "@Test\r\nvoid testDriverManagerCredentialsInUrl() throws SQLException {\r\n    final DriverManagerConnectionFactory cf = new DriverManagerConnectionFactory(\"jdbc:apache:commons:testdriver;user=foo;password=bar\", null, (char[]) null);\r\n    cf.createConnection();\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestDriverManagerConnectionFactory.java",
  "methodName" : "testDriverManagerInitWithCredentials",
  "sourceCode" : "@Test\r\nvoid testDriverManagerInitWithCredentials() throws Exception {\r\n    testDriverManagerInit(false);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestDriverManagerConnectionFactory.java",
  "methodName" : "testDriverManagerInitWithEmptyProperties",
  "sourceCode" : "@Test\r\nvoid testDriverManagerInitWithEmptyProperties() throws Exception {\r\n    final ConnectionFactory connectionFactory = new DriverManagerConnectionFactory(\"jdbc:apache:commons:testdriver;user=foo;password=bar\");\r\n    connectionFactory.createConnection();\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestDriverManagerConnectionFactory.java",
  "methodName" : "testDriverManagerInitWithProperties",
  "sourceCode" : "@Test\r\nvoid testDriverManagerInitWithProperties() throws Exception {\r\n    testDriverManagerInit(true);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestDriverManagerConnectionFactory.java",
  "methodName" : "testDriverManagerWithoutCredentials",
  "sourceCode" : "@Test\r\nvoid testDriverManagerWithoutCredentials() {\r\n    final DriverManagerConnectionFactory cf = new DriverManagerConnectionFactory(\"jdbc:apache:commons:testdriver\", null, (char[]) null);\r\n    // thrown by TestDriver due to missing user\r\n    assertThrows(ArrayIndexOutOfBoundsException.class, cf::createConnection);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestDriverManagerConnectionFactory.java",
  "methodName" : "testDriverManagerWithoutPassword",
  "sourceCode" : "@Test\r\nvoid testDriverManagerWithoutPassword() {\r\n    final DriverManagerConnectionFactory cf = new DriverManagerConnectionFactory(\"jdbc:apache:commons:testdriver\", \"user\", (char[]) null);\r\n    // thrown by TestDriver due to invalid password\r\n    assertThrows(SQLException.class, cf::createConnection);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestDriverManagerConnectionFactory.java",
  "methodName" : "testDriverManagerWithoutUser",
  "sourceCode" : "@Test\r\nvoid testDriverManagerWithoutUser() {\r\n    final DriverManagerConnectionFactory cf = new DriverManagerConnectionFactory(\"jdbc:apache:commons:testdriver\", null, \"pass\");\r\n    // thrown by TestDriver due to missing user\r\n    assertThrows(IndexOutOfBoundsException.class, cf::createConnection);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestJndi.java",
  "methodName" : "testBasicDataSourceBind",
  "sourceCode" : "/**\r\n * Test BasicDatasource bind and lookup\r\n *\r\n * @throws Exception\r\n */\r\n@Test\r\nvoid testBasicDataSourceBind() throws Exception {\r\n    final BasicDataSource dataSource = new BasicDataSource();\r\n    checkBind(dataSource);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestJndi.java",
  "methodName" : "testPerUserPoolDataSourceBind",
  "sourceCode" : "/**\r\n * Test PerUserPoolDataSource bind and lookup\r\n *\r\n * @throws Exception\r\n */\r\n@Test\r\nvoid testPerUserPoolDataSourceBind() throws Exception {\r\n    final PerUserPoolDataSource dataSource = new PerUserPoolDataSource();\r\n    checkBind(dataSource);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestJndi.java",
  "methodName" : "testSharedPoolDataSourceBind",
  "sourceCode" : "/**\r\n * Test SharedPoolDataSource bind and lookup\r\n *\r\n * @throws Exception\r\n */\r\n@Test\r\nvoid testSharedPoolDataSourceBind() throws Exception {\r\n    final SharedPoolDataSource dataSource = new SharedPoolDataSource();\r\n    checkBind(dataSource);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestLifetimeExceededException.java",
  "methodName" : "testLifetimeExceededException",
  "sourceCode" : "@Test\r\nvoid testLifetimeExceededException() {\r\n    final LifetimeExceededException exception = new LifetimeExceededException(\"car\");\r\n    assertEquals(\"car\", exception.getMessage());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestLifetimeExceededException.java",
  "methodName" : "testLifetimeExceededExceptionNoMessage",
  "sourceCode" : "@Test\r\nvoid testLifetimeExceededExceptionNoMessage() {\r\n    final LifetimeExceededException exception = new LifetimeExceededException();\r\n    assertNull(exception.getMessage());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestListException.java",
  "methodName" : "testExceptionList",
  "sourceCode" : "@Test\r\nvoid testExceptionList() {\r\n    final List<Throwable> exceptions = Arrays.asList(new NullPointerException(), new RuntimeException());\r\n    final ListException list = new ListException(\"Internal Error\", exceptions);\r\n    assertEquals(\"Internal Error\", list.getMessage());\r\n    assertArrayEquals(exceptions.toArray(), list.getExceptionList().toArray());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestListException.java",
  "methodName" : "testNulls",
  "sourceCode" : "@Test\r\nvoid testNulls() {\r\n    final ListException list = new ListException(null, null);\r\n    assertNull(list.getMessage());\r\n    assertNull(list.getExceptionList());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestParallelCreationWithNoIdle.java",
  "methodName" : "testMassiveConcurrentInitBorrow",
  "sourceCode" : "/**\r\n * Fire up 100 Threads but only have 10 maxActive and forcedBlock. See\r\n *\r\n * @throws Exception\r\n */\r\n@Test\r\nvoid testMassiveConcurrentInitBorrow() throws Exception {\r\n    final int numThreads = 200;\r\n    ds.setDriverClassName(\"org.apache.commons.dbcp2.TesterConnectionDelayDriver\");\r\n    ds.setUrl(\"jdbc:apache:commons:testerConnectionDelayDriver:20\");\r\n    ds.setInitialSize(8);\r\n    final List<Throwable> errors = Collections.synchronizedList(new ArrayList<>());\r\n    final Thread[] threads = new Thread[numThreads];\r\n    for (int i = 0; i < numThreads; i++) {\r\n        threads[i] = new TestThread(2, 0, 50);\r\n        threads[i].setUncaughtExceptionHandler((t, e) -> errors.add(e));\r\n    }\r\n    for (int i = 0; i < numThreads; i++) {\r\n        threads[i].start();\r\n        if (i % 4 == 0) {\r\n            Thread.sleep(20);\r\n        }\r\n    }\r\n    for (int i = 0; i < numThreads; i++) {\r\n        threads[i].join();\r\n    }\r\n    assertEquals(0, errors.size());\r\n    ds.close();\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestPoolableConnection.java",
  "methodName" : "testClosingWrappedInDelegate",
  "sourceCode" : "@Test\r\nvoid testClosingWrappedInDelegate() throws Exception {\r\n    Assertions.assertEquals(0, pool.getNumActive());\r\n    final Connection conn = pool.borrowObject();\r\n    final DelegatingConnection<Connection> outer = new DelegatingConnection<>(conn);\r\n    Assertions.assertFalse(outer.isClosed());\r\n    Assertions.assertFalse(conn.isClosed());\r\n    Assertions.assertEquals(1, pool.getNumActive());\r\n    outer.close();\r\n    Assertions.assertTrue(outer.isClosed());\r\n    Assertions.assertTrue(conn.isClosed());\r\n    Assertions.assertEquals(0, pool.getNumActive());\r\n    Assertions.assertEquals(1, pool.getNumIdle());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestPoolableConnection.java",
  "methodName" : "testConnectionPool",
  "sourceCode" : "@Test\r\nvoid testConnectionPool() throws Exception {\r\n    // Grab a new connection from the pool\r\n    final Connection c = pool.borrowObject();\r\n    assertNotNull(c, \"Connection should be created and should not be null\");\r\n    assertEquals(1, pool.getNumActive(), \"There should be exactly one active object in the pool\");\r\n    // Now return the connection by closing it\r\n    // Can't be null\r\n    c.close();\r\n    assertEquals(0, pool.getNumActive(), \"There should now be zero active objects in the pool\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestPoolableConnection.java",
  "methodName" : "testDisconnectionIgnoreSqlCodes",
  "sourceCode" : "@Test\r\nvoid testDisconnectionIgnoreSqlCodes() throws Exception {\r\n    pool.setTestOnReturn(true);\r\n    final PoolableConnectionFactory factory = (PoolableConnectionFactory) pool.getFactory();\r\n    factory.setFastFailValidation(true);\r\n    factory.setDisconnectionIgnoreSqlCodes(Arrays.asList(\"08S02\", \"08007\"));\r\n    final PoolableConnection conn = pool.borrowObject();\r\n    final TesterConnection nativeConnection = (TesterConnection) conn.getInnermostDelegate();\r\n    // set up non-fatal exception\r\n    nativeConnection.setFailure(new SQLException(\"Non-fatal connection error.\", \"08S02\"));\r\n    assertThrows(SQLException.class, conn::createStatement);\r\n    nativeConnection.setFailure(null);\r\n    // verify that non-fatal connection is returned to the pool\r\n    conn.close();\r\n    assertEquals(0, pool.getNumActive(), \"The pool should have no active connections\");\r\n    assertEquals(1, pool.getNumIdle(), \"The pool should have one idle connection\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestPoolableConnection.java",
  "methodName" : "testFastFailValidation",
  "sourceCode" : "@Test\r\nvoid testFastFailValidation() throws Exception {\r\n    pool.setTestOnReturn(true);\r\n    final PoolableConnectionFactory factory = (PoolableConnectionFactory) pool.getFactory();\r\n    factory.setFastFailValidation(true);\r\n    final PoolableConnection conn = pool.borrowObject();\r\n    final TesterConnection nativeConnection = (TesterConnection) conn.getInnermostDelegate();\r\n    // Set up non-fatal exception\r\n    nativeConnection.setFailure(new SQLException(\"Not fatal error.\", \"Invalid syntax.\"));\r\n    assertThrows(SQLException.class, conn::createStatement);\r\n    // cleanup failure\r\n    nativeConnection.setFailure(null);\r\n    // validate should not fail - error was not fatal and condition was cleaned up\r\n    conn.validate(\"SELECT 1\", 1000);\r\n    // now set up fatal failure\r\n    nativeConnection.setFailure(new SQLException(\"Fatal connection error.\", \"01002\"));\r\n    assertThrows(SQLException.class, conn::createStatement);\r\n    // cleanup failure\r\n    nativeConnection.setFailure(null);\r\n    // validate should now fail because of previous fatal error, despite cleanup\r\n    assertThrows(SQLException.class, () -> conn.validate(\"SELECT 1\", 1000), \"Should throw SQL exception on validation.\");\r\n    // verify that bad connection does not get returned to the pool\r\n    // testOnReturn triggers validate, which should fail\r\n    conn.close();\r\n    assertEquals(0, pool.getNumActive(), \"The pool should have no active connections\");\r\n    assertEquals(0, pool.getNumIdle(), \"The pool should have no idle connections\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestPoolableConnection.java",
  "methodName" : "testFastFailValidationCustomCodes",
  "sourceCode" : "@Test\r\nvoid testFastFailValidationCustomCodes() throws Exception {\r\n    pool.setTestOnReturn(true);\r\n    final PoolableConnectionFactory factory = (PoolableConnectionFactory) pool.getFactory();\r\n    factory.setFastFailValidation(true);\r\n    final ArrayList<String> disconnectionSqlCodes = new ArrayList<>();\r\n    disconnectionSqlCodes.add(\"XXX\");\r\n    factory.setDisconnectionSqlCodes(disconnectionSqlCodes);\r\n    final PoolableConnection conn = pool.borrowObject();\r\n    final TesterConnection nativeConnection = (TesterConnection) conn.getInnermostDelegate();\r\n    // Set up fatal exception\r\n    nativeConnection.setFailure(new SQLException(\"Fatal connection error.\", \"XXX\"));\r\n    assertThrows(SQLException.class, conn::createStatement);\r\n    // cleanup failure\r\n    nativeConnection.setFailure(null);\r\n    // verify that bad connection does not get returned to the pool\r\n    // testOnReturn triggers validate, which should fail\r\n    conn.close();\r\n    assertEquals(0, pool.getNumActive(), \"The pool should have no active connections\");\r\n    assertEquals(0, pool.getNumIdle(), \"The pool should have no idle connections\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestPoolableConnection.java",
  "methodName" : "testIsDisconnectionSqlExceptionStackOverflow",
  "sourceCode" : "@Test\r\nvoid testIsDisconnectionSqlExceptionStackOverflow() throws Exception {\r\n    final int maxDeep = 100_000;\r\n    final SQLException rootException = new SQLException(\"Data truncated\", \"22001\");\r\n    SQLException parentException = rootException;\r\n    for (int i = 0; i <= maxDeep; i++) {\r\n        final SQLException childException = new SQLException(\"Data truncated: \" + i, \"22001\");\r\n        parentException.setNextException(childException);\r\n        parentException = childException;\r\n    }\r\n    final Connection conn = pool.borrowObject();\r\n    assertFalse(((PoolableConnection) conn).isDisconnectionSqlException(rootException));\r\n    assertFalse(((PoolableConnection) conn).isFatalException(rootException));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestPoolableConnection.java",
  "methodName" : "testMXBeanCompliance",
  "sourceCode" : "/**\r\n * Tests if the {@link PoolableConnectionMXBean} interface is a valid MXBean interface.\r\n */\r\n@Test\r\nvoid testMXBeanCompliance() throws OperationsException {\r\n    TestBasicDataSourceMXBean.testMXBeanCompliance(PoolableConnectionMXBean.class);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestPoolableConnection.java",
  "methodName" : "testPoolableConnectionLeak",
  "sourceCode" : "// Bugzilla Bug 33591: PoolableConnection leaks connections if the\r\n// delegated connection closes itself.\r\n@Test\r\nvoid testPoolableConnectionLeak() throws Exception {\r\n    // 'Borrow' a connection from the pool\r\n    final Connection conn = pool.borrowObject();\r\n    // Now close our innermost delegate, simulating the case where the\r\n    // underlying connection closes itself\r\n    ((PoolableConnection) conn).getInnermostDelegate().close();\r\n    // At this point, we can close the pooled connection. The\r\n    // PoolableConnection *should* realize that its underlying\r\n    // connection is gone and invalidate itself. The pool should have no\r\n    // active connections.\r\n    try {\r\n        conn.close();\r\n    } catch (final SQLException e) {\r\n        // Here we expect 'connection already closed', but the connection\r\n        // should *NOT* be returned to the pool\r\n    }\r\n    assertEquals(0, pool.getNumActive(), \"The pool should have no active connections\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestPoolingConnection.java",
  "methodName" : "testPrepareCall",
  "sourceCode" : "@Test\r\nvoid testPrepareCall() throws Exception {\r\n    final String sql = \"select 'a' from dual\";\r\n    try (final DelegatingCallableStatement statement = (DelegatingCallableStatement) connection.prepareCall(sql)) {\r\n        final TesterCallableStatement testStatement = (TesterCallableStatement) statement.getInnermostDelegate();\r\n        // assert\r\n        assertEquals(sql, testStatement.getSql());\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestPoolingConnection.java",
  "methodName" : "testPrepareCallWithResultSetConcurrency",
  "sourceCode" : "@Test\r\nvoid testPrepareCallWithResultSetConcurrency() throws Exception {\r\n    final String sql = \"select 'a' from dual\";\r\n    final int resultSetType = 0;\r\n    final int resultSetConcurrency = 0;\r\n    try (final DelegatingCallableStatement statement = (DelegatingCallableStatement) connection.prepareCall(sql, resultSetType, resultSetConcurrency)) {\r\n        final TesterCallableStatement testStatement = (TesterCallableStatement) statement.getInnermostDelegate();\r\n        // assert\r\n        assertEquals(sql, testStatement.getSql());\r\n        assertEquals(resultSetType, testStatement.getResultSetType());\r\n        assertEquals(resultSetConcurrency, testStatement.getResultSetConcurrency());\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestPoolingConnection.java",
  "methodName" : "testPrepareCallWithResultSetHoldability",
  "sourceCode" : "@Test\r\nvoid testPrepareCallWithResultSetHoldability() throws Exception {\r\n    final String sql = \"select 'a' from dual\";\r\n    final int resultSetType = 0;\r\n    final int resultSetConcurrency = 0;\r\n    final int resultSetHoldability = 0;\r\n    try (final DelegatingCallableStatement statement = (DelegatingCallableStatement) connection.prepareCall(sql, resultSetType, resultSetConcurrency, resultSetHoldability)) {\r\n        final TesterCallableStatement testStatement = (TesterCallableStatement) statement.getInnermostDelegate();\r\n        // assert\r\n        assertEquals(sql, testStatement.getSql());\r\n        assertEquals(resultSetType, testStatement.getResultSetType());\r\n        assertEquals(resultSetConcurrency, testStatement.getResultSetConcurrency());\r\n        assertEquals(resultSetHoldability, testStatement.getResultSetHoldability());\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestPoolingConnection.java",
  "methodName" : "testPrepareStatement",
  "sourceCode" : "@Test\r\nvoid testPrepareStatement() throws Exception {\r\n    final String sql = \"select 'a' from dual\";\r\n    try (final DelegatingPreparedStatement statement = (DelegatingPreparedStatement) connection.prepareStatement(sql)) {\r\n        final TesterPreparedStatement testStatement = (TesterPreparedStatement) statement.getInnermostDelegate();\r\n        // assert\r\n        assertEquals(sql, testStatement.getSql());\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestPoolingConnection.java",
  "methodName" : "testPrepareStatementWithAutoGeneratedKeys",
  "sourceCode" : "@Test\r\nvoid testPrepareStatementWithAutoGeneratedKeys() throws Exception {\r\n    final String sql = \"select 'a' from dual\";\r\n    final int autoGeneratedKeys = 0;\r\n    try (final DelegatingPreparedStatement statement = (DelegatingPreparedStatement) connection.prepareStatement(sql, autoGeneratedKeys)) {\r\n        final TesterPreparedStatement testStatement = (TesterPreparedStatement) statement.getInnermostDelegate();\r\n        // assert\r\n        assertEquals(sql, testStatement.getSql());\r\n        assertEquals(autoGeneratedKeys, testStatement.getAutoGeneratedKeys());\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestPoolingConnection.java",
  "methodName" : "testPrepareStatementWithColumnIndexes",
  "sourceCode" : "@Test\r\nvoid testPrepareStatementWithColumnIndexes() throws Exception {\r\n    final String sql = \"select 'a' from dual\";\r\n    final int[] columnIndexes = { 1 };\r\n    try (final DelegatingPreparedStatement statement = (DelegatingPreparedStatement) connection.prepareStatement(sql, columnIndexes)) {\r\n        final TesterPreparedStatement testStatement = (TesterPreparedStatement) statement.getInnermostDelegate();\r\n        // assert\r\n        assertEquals(sql, testStatement.getSql());\r\n        assertArrayEquals(columnIndexes, testStatement.getColumnIndexes());\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestPoolingConnection.java",
  "methodName" : "testPrepareStatementWithColumnNames",
  "sourceCode" : "@Test\r\nvoid testPrepareStatementWithColumnNames() throws Exception {\r\n    final String sql = \"select 'a' from dual\";\r\n    final String[] columnNames = { \"columnName1\" };\r\n    try (final DelegatingPreparedStatement statement = (DelegatingPreparedStatement) connection.prepareStatement(sql, columnNames)) {\r\n        final TesterPreparedStatement testStatement = (TesterPreparedStatement) statement.getInnermostDelegate();\r\n        // assert\r\n        assertEquals(sql, testStatement.getSql());\r\n        assertArrayEquals(columnNames, testStatement.getColumnNames());\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestPoolingConnection.java",
  "methodName" : "testPrepareStatementWithResultSetConcurrency",
  "sourceCode" : "@Test\r\nvoid testPrepareStatementWithResultSetConcurrency() throws Exception {\r\n    final String sql = \"select 'a' from dual\";\r\n    final int resultSetType = 0;\r\n    final int resultSetConcurrency = 0;\r\n    try (final DelegatingPreparedStatement statement = (DelegatingPreparedStatement) connection.prepareStatement(sql, resultSetType, resultSetConcurrency)) {\r\n        final TesterPreparedStatement testStatement = (TesterPreparedStatement) statement.getInnermostDelegate();\r\n        // assert\r\n        assertEquals(sql, testStatement.getSql());\r\n        assertEquals(resultSetType, testStatement.getResultSetType());\r\n        assertEquals(resultSetConcurrency, testStatement.getResultSetConcurrency());\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestPoolingConnection.java",
  "methodName" : "testPrepareStatementWithResultSetHoldability",
  "sourceCode" : "@Test\r\nvoid testPrepareStatementWithResultSetHoldability() throws Exception {\r\n    final String sql = \"select 'a' from dual\";\r\n    final int resultSetType = 0;\r\n    final int resultSetConcurrency = 0;\r\n    final int resultSetHoldability = 0;\r\n    try (final DelegatingPreparedStatement statement = (DelegatingPreparedStatement) connection.prepareStatement(sql, resultSetType, resultSetConcurrency, resultSetHoldability)) {\r\n        final TesterPreparedStatement testStatement = (TesterPreparedStatement) statement.getInnermostDelegate();\r\n        // assert\r\n        assertEquals(sql, testStatement.getSql());\r\n        assertEquals(resultSetType, testStatement.getResultSetType());\r\n        assertEquals(resultSetConcurrency, testStatement.getResultSetConcurrency());\r\n        assertEquals(resultSetHoldability, testStatement.getResultSetHoldability());\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestPoolingConnection.java",
  "methodName" : "testToStringStackOverflow",
  "sourceCode" : "/**\r\n * Tests DBCP-596 PoolingConnection.toString() causes StackOverflowError.\r\n */\r\n@Test\r\nvoid testToStringStackOverflow() throws SQLException {\r\n    // Also tests a possible NullPointerException in PoolingConnection.close()\r\n    try (PoolingConnection conn = new PoolingConnection(null)) {\r\n        final GenericKeyedObjectPoolConfig<DelegatingPreparedStatement> config = new GenericKeyedObjectPoolConfig<>();\r\n        try (GenericKeyedObjectPool<PStmtKey, DelegatingPreparedStatement> stmtPool = new GenericKeyedObjectPool<>(conn, config)) {\r\n            conn.setStatementPool(stmtPool);\r\n        }\r\n        conn.toString();\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestPoolingDataSource.java",
  "methodName" : "testClose",
  "sourceCode" : "@Test\r\nvoid testClose() throws Exception {\r\n    final Properties properties = new Properties();\r\n    properties.setProperty(Constants.KEY_USER, \"userName\");\r\n    properties.setProperty(Constants.KEY_PASSWORD, \"password\");\r\n    final PoolableConnectionFactory f = new PoolableConnectionFactory(new DriverConnectionFactory(new TesterDriver(), \"jdbc:apache:commons:testdriver\", properties), null);\r\n    f.setValidationQuery(\"SELECT DUMMY FROM DUAL\");\r\n    f.setDefaultReadOnly(Boolean.TRUE);\r\n    f.setDefaultAutoCommit(Boolean.TRUE);\r\n    final GenericObjectPool<PoolableConnection> p = new GenericObjectPool<>(f);\r\n    p.setMaxTotal(getMaxTotal());\r\n    p.setMaxWait(getMaxWaitDuration());\r\n    try (PoolingDataSource<PoolableConnection> dataSource = new PoolingDataSource<>(p)) {\r\n        final Connection connection = dataSource.getConnection();\r\n        assertNotNull(connection);\r\n        connection.close();\r\n    }\r\n    assertTrue(p.isClosed());\r\n    assertEquals(0, p.getNumIdle());\r\n    assertEquals(0, p.getNumActive());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestPoolingDataSource.java",
  "methodName" : "testFixFactoryConfig",
  "sourceCode" : "/**\r\n * DBCP-412\r\n * Verify that omitting factory.setPool(pool) when setting up PDS does not\r\n * result in NPE.\r\n */\r\n@Test\r\nvoid testFixFactoryConfig() throws Exception {\r\n    final Properties properties = new Properties();\r\n    properties.setProperty(Constants.KEY_USER, \"userName\");\r\n    properties.setProperty(Constants.KEY_PASSWORD, \"password\");\r\n    final PoolableConnectionFactory f = new PoolableConnectionFactory(new DriverConnectionFactory(new TesterDriver(), \"jdbc:apache:commons:testdriver\", properties), null);\r\n    f.setValidationQuery(\"SELECT DUMMY FROM DUAL\");\r\n    f.setDefaultReadOnly(Boolean.TRUE);\r\n    f.setDefaultAutoCommit(Boolean.TRUE);\r\n    final GenericObjectPool<PoolableConnection> p = new GenericObjectPool<>(f);\r\n    p.setMaxTotal(getMaxTotal());\r\n    p.setMaxWait(getMaxWaitDuration());\r\n    ds = new PoolingDataSource<>(p);\r\n    assertEquals(f.getPool(), p);\r\n    ds.getConnection();\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestPoolingDataSource.java",
  "methodName" : "testIsWrapperFor",
  "sourceCode" : "@Test\r\nvoid testIsWrapperFor() throws Exception {\r\n    assertTrue(ds.isWrapperFor(PoolingDataSource.class));\r\n    assertTrue(ds.isWrapperFor(AutoCloseable.class));\r\n    assertFalse(ds.isWrapperFor(String.class));\r\n    assertFalse(ds.isWrapperFor(null));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestPoolingDataSource.java",
  "methodName" : "testPoolGuardConnectionWrapperEqualInnermost",
  "sourceCode" : "@Test\r\nvoid testPoolGuardConnectionWrapperEqualInnermost() throws Exception {\r\n    ds.setAccessToUnderlyingConnectionAllowed(true);\r\n    final DelegatingConnection<?> con = (DelegatingConnection<?>) ds.getConnection();\r\n    final Connection inner = con.getInnermostDelegate();\r\n    ds.setAccessToUnderlyingConnectionAllowed(false);\r\n    final DelegatingConnection<Connection> con2 = new DelegatingConnection<>(inner);\r\n    assertNotEquals(con2, con);\r\n    assertTrue(con.innermostDelegateEquals(con2.getInnermostDelegate()));\r\n    assertTrue(con2.innermostDelegateEquals(inner));\r\n    assertNotEquals(con, con2);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestPoolingDataSource.java",
  "methodName" : "testPoolGuardConnectionWrapperEqualsFail",
  "sourceCode" : "@Test\r\nvoid testPoolGuardConnectionWrapperEqualsFail() throws Exception {\r\n    final Connection con1 = ds.getConnection();\r\n    final Connection con2 = ds.getConnection();\r\n    assertNotEquals(con1, con2);\r\n    con1.close();\r\n    con2.close();\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestPoolingDataSource.java",
  "methodName" : "testPoolGuardConnectionWrapperEqualsNull",
  "sourceCode" : "@Test\r\nvoid testPoolGuardConnectionWrapperEqualsNull() throws Exception {\r\n    final Connection con1 = ds.getConnection();\r\n    final Connection con2 = null;\r\n    assertNotEquals(con2, con1);\r\n    con1.close();\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestPoolingDataSource.java",
  "methodName" : "testPoolGuardConnectionWrapperEqualsReflexive",
  "sourceCode" : "/*\r\n     * JIRA: DBCP-198\r\n     */\r\n@Test\r\nvoid testPoolGuardConnectionWrapperEqualsReflexive() throws Exception {\r\n    final Connection con = ds.getConnection();\r\n    final Connection con2 = con;\r\n    assertEquals(con2, con);\r\n    assertEquals(con, con2);\r\n    con.close();\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestPoolingDataSource.java",
  "methodName" : "testPoolGuardConnectionWrapperEqualsSameDelegate",
  "sourceCode" : "@Test\r\nvoid testPoolGuardConnectionWrapperEqualsSameDelegate() throws Exception {\r\n    // Get a maximal set of connections from the pool\r\n    final Connection[] c = new Connection[getMaxTotal()];\r\n    for (int i = 0; i < c.length; i++) {\r\n        c[i] = newConnection();\r\n    }\r\n    // Close the delegate of one wrapper in the pool\r\n    ((DelegatingConnection<?>) c[0]).getDelegate().close();\r\n    // Grab a new connection - should get c[0]'s closed connection\r\n    // so should be delegate-equivalent\r\n    final Connection con = newConnection();\r\n    Assertions.assertNotEquals(c[0], con);\r\n    Assertions.assertEquals(((DelegatingConnection<?>) c[0]).getInnermostDelegateInternal(), ((DelegatingConnection<?>) con).getInnermostDelegateInternal());\r\n    for (final Connection element : c) {\r\n        element.close();\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestPoolingDataSource.java",
  "methodName" : "testPoolGuardConnectionWrapperEqualsType",
  "sourceCode" : "@Test\r\nvoid testPoolGuardConnectionWrapperEqualsType() throws Exception {\r\n    final Connection con1 = ds.getConnection();\r\n    final Integer con2 = 0;\r\n    assertNotEquals(con2, con1);\r\n    con1.close();\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestPoolingDataSource.java",
  "methodName" : "testUnwrap",
  "sourceCode" : "@Test\r\nvoid testUnwrap() throws Exception {\r\n    assertSame(ds.unwrap(PoolingDataSource.class), ds);\r\n    assertSame(ds.unwrap(AutoCloseable.class), ds);\r\n    assertThrows(SQLException.class, () -> ds.unwrap(String.class));\r\n    assertThrows(SQLException.class, () -> ds.unwrap(null));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestPoolingDriver.java",
  "methodName" : "test1",
  "sourceCode" : "@Test\r\nvoid test1() {\r\n    final ConnectionFactory connectionFactory = new DriverManagerConnectionFactory(\"jdbc:some:connect:string\", \"userName\", \"password\");\r\n    final PoolableConnectionFactory pcf = new PoolableConnectionFactory(connectionFactory, null);\r\n    pcf.setDefaultReadOnly(Boolean.FALSE);\r\n    pcf.setDefaultAutoCommit(Boolean.TRUE);\r\n    final GenericObjectPool<PoolableConnection> connectionPool = new GenericObjectPool<>(pcf);\r\n    pcf.setPool(connectionPool);\r\n    final DataSource ds = new PoolingDataSource<>(connectionPool);\r\n    Assertions.assertNotNull(ds);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestPoolingDriver.java",
  "methodName" : "test2",
  "sourceCode" : "@Test\r\nvoid test2() {\r\n    final ConnectionFactory connectionFactory = new DriverManagerConnectionFactory(\"jdbc:some:connect:string\", \"userName\", \"password\");\r\n    final PoolableConnectionFactory pcf = new PoolableConnectionFactory(connectionFactory, null);\r\n    pcf.setDefaultReadOnly(Boolean.FALSE);\r\n    pcf.setDefaultAutoCommit(Boolean.TRUE);\r\n    final GenericObjectPool<PoolableConnection> connectionPool = new GenericObjectPool<>(pcf);\r\n    final PoolingDriver driver2 = new PoolingDriver();\r\n    driver2.registerPool(\"example\", connectionPool);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestPoolingDriver.java",
  "methodName" : "testClosePool",
  "sourceCode" : "@Test\r\nvoid testClosePool() throws Exception {\r\n    final Connection conn = DriverManager.getConnection(\"jdbc:apache:commons:dbcp:test\");\r\n    assertNotNull(conn);\r\n    conn.close();\r\n    final PoolingDriver driver2 = (PoolingDriver) DriverManager.getDriver(\"jdbc:apache:commons:dbcp:\");\r\n    driver2.closePool(\"test\");\r\n    assertThrows(SQLException.class, () -> DriverManager.getConnection(\"jdbc:apache:commons:dbcp:test\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestPoolingDriver.java",
  "methodName" : "testInvalidateConnection",
  "sourceCode" : "@Test\r\nvoid testInvalidateConnection() throws Exception {\r\n    final Connection conn = DriverManager.getConnection(\"jdbc:apache:commons:dbcp:test\");\r\n    assertNotNull(conn);\r\n    final ObjectPool<?> pool = driver.getConnectionPool(\"test\");\r\n    assertEquals(1, pool.getNumActive());\r\n    assertEquals(0, pool.getNumIdle());\r\n    final PoolingDriver driver2 = (PoolingDriver) DriverManager.getDriver(\"jdbc:apache:commons:dbcp:\");\r\n    driver2.invalidateConnection(conn);\r\n    assertEquals(0, pool.getNumActive());\r\n    assertEquals(0, pool.getNumIdle());\r\n    assertTrue(conn.isClosed());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestPoolingDriver.java",
  "methodName" : "testLogWriter",
  "sourceCode" : "@Test\r\nvoid testLogWriter() throws Exception {\r\n    final PrintStream ps = new PrintStream(new ByteArrayOutputStream(), false, StandardCharsets.UTF_8.name());\r\n    final PrintWriter pw = new PrintWriter(new OutputStreamWriter(new ByteArrayOutputStream(), StandardCharsets.UTF_8));\r\n    System.setErr(new PrintStream(new ByteArrayOutputStream(), false, StandardCharsets.UTF_8.name()));\r\n    SQLException ex;\r\n    DriverManager.setLogWriter(pw);\r\n    ex = new SQLException(\"A\", new Exception(\"a\"));\r\n    ex.printStackTrace();\r\n    ex.printStackTrace(ps);\r\n    ex.printStackTrace(pw);\r\n    ex = new SQLException(\"B\");\r\n    ex.printStackTrace();\r\n    ex.printStackTrace(ps);\r\n    ex.printStackTrace(pw);\r\n    ex = new SQLException(null, new Exception(\"c\"));\r\n    ex.printStackTrace();\r\n    ex.printStackTrace(ps);\r\n    ex.printStackTrace(pw);\r\n    ex = new SQLException((String) null);\r\n    ex.printStackTrace();\r\n    ex.printStackTrace(ps);\r\n    ex.printStackTrace(pw);\r\n    DriverManager.setLogWriter(null);\r\n    ex = new SQLException(\"A\", new Exception(\"a\"));\r\n    ex.printStackTrace();\r\n    ex.printStackTrace(ps);\r\n    ex.printStackTrace(pw);\r\n    ex = new SQLException(\"B\");\r\n    ex.printStackTrace();\r\n    ex.printStackTrace(ps);\r\n    ex.printStackTrace(pw);\r\n    ex = new SQLException(null, new Exception(\"c\"));\r\n    ex.printStackTrace();\r\n    ex.printStackTrace(ps);\r\n    ex.printStackTrace(pw);\r\n    ex = new SQLException((String) null);\r\n    ex.printStackTrace();\r\n    ex.printStackTrace(ps);\r\n    ex.printStackTrace(pw);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestPoolingDriver.java",
  "methodName" : "testReportedBug12400",
  "sourceCode" : "/**\r\n * \"https://issues.apache.org/bugzilla/show_bug.cgi?id=12400\"\r\n */\r\n@Test\r\nvoid testReportedBug12400() throws Exception {\r\n    final GenericObjectPoolConfig<PoolableConnection> config = new GenericObjectPoolConfig<>();\r\n    config.setMaxTotal(70);\r\n    config.setMaxWait(Duration.ofMinutes(1));\r\n    config.setMaxIdle(10);\r\n    final ConnectionFactory connectionFactory = new DriverManagerConnectionFactory(\"jdbc:apache:commons:testdriver\", \"userName\", \"password\");\r\n    final PoolableConnectionFactory poolableConnectionFactory = new PoolableConnectionFactory(connectionFactory, null);\r\n    poolableConnectionFactory.setDefaultReadOnly(Boolean.FALSE);\r\n    poolableConnectionFactory.setDefaultAutoCommit(Boolean.TRUE);\r\n    final ObjectPool<PoolableConnection> connectionPool = new GenericObjectPool<>(poolableConnectionFactory, config);\r\n    poolableConnectionFactory.setPool(connectionPool);\r\n    assertNotNull(poolableConnectionFactory);\r\n    final PoolingDriver driver2 = new PoolingDriver();\r\n    driver2.registerPool(\"neusoftim\", connectionPool);\r\n    final Connection[] conn = new Connection[25];\r\n    for (int i = 0; i < 25; i++) {\r\n        conn[i] = DriverManager.getConnection(\"jdbc:apache:commons:dbcp:neusoftim\");\r\n        for (int j = 0; j < i; j++) {\r\n            assertNotSame(conn[j], conn[i]);\r\n            assertNotEquals(conn[j], conn[i]);\r\n        }\r\n    }\r\n    for (int i = 0; i < 25; i++) {\r\n        conn[i].close();\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestPoolingDriver.java",
  "methodName" : "testReportedBug28912",
  "sourceCode" : "/**\r\n * \"https://issues.apache.org/bugzilla/show_bug.cgi?id=28912\"\r\n */\r\n@Test\r\nvoid testReportedBug28912() throws Exception {\r\n    final Connection conn1 = getConnection();\r\n    assertNotNull(conn1);\r\n    assertFalse(conn1.isClosed());\r\n    conn1.close();\r\n    final Connection conn2 = getConnection();\r\n    assertNotNull(conn2);\r\n    assertTrue(conn1.isClosed());\r\n    assertFalse(conn2.isClosed());\r\n    // should be able to call close multiple times with no effect\r\n    conn1.close();\r\n    assertTrue(conn1.isClosed());\r\n    assertFalse(conn2.isClosed());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestPStmtKey.java",
  "methodName" : "testCtorDifferentCatalog",
  "sourceCode" : "/**\r\n * Tests constructors with different catalog.\r\n */\r\n@Test\r\nvoid testCtorDifferentCatalog() {\r\n    assertNotEquals(new PStmtKey(\"sql\", \"catalog1\", \"schema1\"), new PStmtKey(\"sql\", \"catalog2\", \"schema1\"));\r\n    assertNotEquals(new PStmtKey(\"sql\", \"catalog1\", \"schema1\", 0), new PStmtKey(\"sql\", \"catalog2\", \"schema1\", 0));\r\n    assertNotEquals(new PStmtKey(\"sql\", \"catalog1\", \"schema1\", 0, 0), new PStmtKey(\"sql\", \"catalog2\", \"schema1\", 0, 0));\r\n    assertNotEquals(new PStmtKey(\"sql\", \"catalog1\", \"schema1\", 0, 0, 0), new PStmtKey(\"sql\", \"catalog2\", \"schema1\", 0, 0, 0));\r\n    //\r\n    assertNotEquals(new PStmtKey(\"sql\", \"catalog1\", \"schema1\", 0, 0, 0, StatementType.CALLABLE_STATEMENT), new PStmtKey(\"sql\", \"catalog2\", \"schema1\", 0, 0, 0, StatementType.CALLABLE_STATEMENT));\r\n    assertNotEquals(new PStmtKey(\"sql\", \"catalog1\", \"schema1\", 0, 0, 0, StatementType.PREPARED_STATEMENT), new PStmtKey(\"sql\", \"catalog2\", \"schema1\", 0, 0, 0, StatementType.PREPARED_STATEMENT));\r\n    //\r\n    assertNotEquals(new PStmtKey(\"sql\", \"catalog1\", \"schema1\", 0, 0, StatementType.CALLABLE_STATEMENT), new PStmtKey(\"sql\", \"catalog2\", \"schema1\", 0, 0, StatementType.CALLABLE_STATEMENT));\r\n    assertNotEquals(new PStmtKey(\"sql\", \"catalog1\", \"schema1\", 0, 0, StatementType.PREPARED_STATEMENT), new PStmtKey(\"sql\", \"catalog2\", \"schema1\", 0, 0, StatementType.PREPARED_STATEMENT));\r\n    //\r\n    assertNotEquals(new PStmtKey(\"sql\", \"catalog1\", \"schema1\", (int[]) null), new PStmtKey(\"sql\", \"catalog2\", \"schema1\", (int[]) null));\r\n    assertNotEquals(new PStmtKey(\"sql\", \"catalog1\", \"schema1\", new int[1]), new PStmtKey(\"sql\", \"catalog2\", \"schema1\", new int[1]));\r\n    assertNotEquals(new PStmtKey(\"sql\", \"catalog1\", \"schema1\", (String[]) null), new PStmtKey(\"sql\", \"catalog2\", \"schema1\", (String[]) null));\r\n    assertNotEquals(new PStmtKey(\"sql\", \"catalog1\", \"schema1\", new String[] { \"A\" }), new PStmtKey(\"sql\", \"catalog2\", \"schema1\", new String[] { \"A\" }));\r\n    assertNotEquals(new PStmtKey(\"sql\", \"catalog1\", \"schema1\", StatementType.PREPARED_STATEMENT), new PStmtKey(\"sql\", \"catalog2\", \"schema1\", StatementType.PREPARED_STATEMENT));\r\n    assertNotEquals(new PStmtKey(\"sql\", \"catalog1\", \"schema1\", StatementType.PREPARED_STATEMENT, Integer.MAX_VALUE), new PStmtKey(\"sql\", \"catalog2\", \"schema1\", StatementType.PREPARED_STATEMENT, Integer.MAX_VALUE));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestPStmtKey.java",
  "methodName" : "testCtorDifferentSchema",
  "sourceCode" : "/**\r\n * Tests constructors with different schemas.\r\n */\r\n@Test\r\nvoid testCtorDifferentSchema() {\r\n    assertNotEquals(new PStmtKey(\"sql\", \"catalog1\", \"schema1\"), new PStmtKey(\"sql\", \"catalog1\", \"schema2\"));\r\n    assertNotEquals(new PStmtKey(\"sql\", \"catalog1\", \"schema1\", 0), new PStmtKey(\"sql\", \"catalog1\", \"schema2\", 0));\r\n    assertNotEquals(new PStmtKey(\"sql\", \"catalog1\", \"schema1\", 0, 0), new PStmtKey(\"sql\", \"catalog1\", \"schema2\", 0, 0));\r\n    assertNotEquals(new PStmtKey(\"sql\", \"catalog1\", \"schema1\", 0, 0, 0), new PStmtKey(\"sql\", \"catalog1\", \"schema2\", 0, 0, 0));\r\n    //\r\n    assertNotEquals(new PStmtKey(\"sql\", \"catalog1\", \"schema1\", 0, 0, 0, StatementType.CALLABLE_STATEMENT), new PStmtKey(\"sql\", \"catalog1\", \"schema2\", 0, 0, 0, StatementType.CALLABLE_STATEMENT));\r\n    assertNotEquals(new PStmtKey(\"sql\", \"catalog1\", \"schema1\", 0, 0, 0, StatementType.PREPARED_STATEMENT), new PStmtKey(\"sql\", \"catalog1\", \"schema2\", 0, 0, 0, StatementType.PREPARED_STATEMENT));\r\n    //\r\n    assertNotEquals(new PStmtKey(\"sql\", \"catalog1\", \"schema1\", 0, 0, StatementType.CALLABLE_STATEMENT), new PStmtKey(\"sql\", \"catalog1\", \"schema2\", 0, 0, StatementType.CALLABLE_STATEMENT));\r\n    assertNotEquals(new PStmtKey(\"sql\", \"catalog1\", \"schema1\", 0, 0, StatementType.PREPARED_STATEMENT), new PStmtKey(\"sql\", \"catalog1\", \"schema2\", 0, 0, StatementType.PREPARED_STATEMENT));\r\n    //\r\n    assertNotEquals(new PStmtKey(\"sql\", \"catalog1\", \"schema1\", (int[]) null), new PStmtKey(\"sql\", \"catalog1\", \"schema2\", (int[]) null));\r\n    assertNotEquals(new PStmtKey(\"sql\", \"catalog1\", \"schema1\", new int[1]), new PStmtKey(\"sql\", \"catalog1\", \"schema2\", new int[1]));\r\n    assertNotEquals(new PStmtKey(\"sql\", \"catalog1\", \"schema1\", (String[]) null), new PStmtKey(\"sql\", \"catalog1\", \"schema2\", (String[]) null));\r\n    assertNotEquals(new PStmtKey(\"sql\", \"catalog1\", \"schema1\", new String[] { \"A\" }), new PStmtKey(\"sql\", \"catalog1\", \"schema2\", new String[] { \"A\" }));\r\n    assertNotEquals(new PStmtKey(\"sql\", \"catalog1\", \"schema1\", StatementType.PREPARED_STATEMENT), new PStmtKey(\"sql\", \"catalog1\", \"schema2\", StatementType.PREPARED_STATEMENT));\r\n    assertNotEquals(new PStmtKey(\"sql\", \"catalog1\", \"schema1\", StatementType.PREPARED_STATEMENT, Integer.MAX_VALUE), new PStmtKey(\"sql\", \"catalog1\", \"schema2\", StatementType.PREPARED_STATEMENT, Integer.MAX_VALUE));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestPStmtKey.java",
  "methodName" : "testCtorEquals",
  "sourceCode" : "/**\r\n * Tests constructors with different catalog.\r\n */\r\n@Test\r\nvoid testCtorEquals() {\r\n    assertEquals(new PStmtKey(\"sql\", \"catalog1\", \"schema1\"), new PStmtKey(\"sql\", \"catalog1\", \"schema1\"));\r\n    assertEquals(new PStmtKey(\"sql\", \"catalog1\", \"schema1\", 0), new PStmtKey(\"sql\", \"catalog1\", \"schema1\", 0));\r\n    assertEquals(new PStmtKey(\"sql\", \"catalog1\", \"schema1\", 0, 0), new PStmtKey(\"sql\", \"catalog1\", \"schema1\", 0, 0));\r\n    assertEquals(new PStmtKey(\"sql\", \"catalog1\", \"schema1\", 0, 0, 0), new PStmtKey(\"sql\", \"catalog1\", \"schema1\", 0, 0, 0));\r\n    //\r\n    assertEquals(new PStmtKey(\"sql\", \"catalog1\", \"schema1\", 0, 0, 0, StatementType.CALLABLE_STATEMENT), new PStmtKey(\"sql\", \"catalog1\", \"schema1\", 0, 0, 0, StatementType.CALLABLE_STATEMENT));\r\n    assertEquals(new PStmtKey(\"sql\", \"catalog1\", \"schema1\", 0, 0, 0, StatementType.PREPARED_STATEMENT), new PStmtKey(\"sql\", \"catalog1\", \"schema1\", 0, 0, 0, StatementType.PREPARED_STATEMENT));\r\n    //\r\n    assertEquals(new PStmtKey(\"sql\", \"catalog1\", \"schema1\", 0, 0, StatementType.CALLABLE_STATEMENT), new PStmtKey(\"sql\", \"catalog1\", \"schema1\", 0, 0, StatementType.CALLABLE_STATEMENT));\r\n    assertEquals(new PStmtKey(\"sql\", \"catalog1\", \"schema1\", 0, 0, StatementType.PREPARED_STATEMENT), new PStmtKey(\"sql\", \"catalog1\", \"schema1\", 0, 0, StatementType.PREPARED_STATEMENT));\r\n    //\r\n    assertEquals(new PStmtKey(\"sql\", \"catalog1\", \"schema1\", (int[]) null), new PStmtKey(\"sql\", \"catalog1\", \"schema1\", (int[]) null));\r\n    assertEquals(new PStmtKey(\"sql\", \"catalog1\", \"schema1\", new int[1]), new PStmtKey(\"sql\", \"catalog1\", \"schema1\", new int[1]));\r\n    assertEquals(new PStmtKey(\"sql\", \"catalog1\", \"schema1\", (String[]) null), new PStmtKey(\"sql\", \"catalog1\", \"schema1\", (String[]) null));\r\n    assertEquals(new PStmtKey(\"sql\", \"catalog1\", \"schema1\", new String[] { \"A\" }), new PStmtKey(\"sql\", \"catalog1\", \"schema1\", new String[] { \"A\" }));\r\n    assertEquals(new PStmtKey(\"sql\", \"catalog1\", \"schema1\", StatementType.PREPARED_STATEMENT), new PStmtKey(\"sql\", \"catalog1\", \"schema1\", StatementType.PREPARED_STATEMENT));\r\n    assertEquals(new PStmtKey(\"sql\", \"catalog1\", \"schema1\", StatementType.PREPARED_STATEMENT, Integer.MAX_VALUE), new PStmtKey(\"sql\", \"catalog1\", \"schema1\", StatementType.PREPARED_STATEMENT, Integer.MAX_VALUE));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestPStmtKey.java",
  "methodName" : "testCtorStringStringArrayOfInts",
  "sourceCode" : "/**\r\n * Tests {@link org.apache.commons.dbcp2.PStmtKey#PStmtKey(String, String, String, int[])}.\r\n *\r\n * See https://issues.apache.org/jira/browse/DBCP-494\r\n */\r\n@Test\r\nvoid testCtorStringStringArrayOfInts() {\r\n    final int[] input = { 0, 0 };\r\n    final PStmtKey pStmtKey = new PStmtKey(\"\", \"\", \"\", input);\r\n    assertArrayEquals(input, pStmtKey.getColumnIndexes());\r\n    input[0] = 1;\r\n    input[1] = 1;\r\n    assertFalse(Arrays.equals(input, pStmtKey.getColumnIndexes()));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestPStmtKey.java",
  "methodName" : "testCtorStringStringArrayOfNullInts",
  "sourceCode" : "/**\r\n * Tests {@link org.apache.commons.dbcp2.PStmtKey#PStmtKey(String, String, String, int[])}.\r\n *\r\n * See https://issues.apache.org/jira/browse/DBCP-494\r\n */\r\n@Test\r\nvoid testCtorStringStringArrayOfNullInts() {\r\n    final int[] input = null;\r\n    final PStmtKey pStmtKey = new PStmtKey(\"\", \"\", \"\", input);\r\n    assertArrayEquals(input, pStmtKey.getColumnIndexes());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestPStmtKey.java",
  "methodName" : "testCtorStringStringArrayOfNullStrings",
  "sourceCode" : "/**\r\n * Tests {@link org.apache.commons.dbcp2.PStmtKey#PStmtKey(String, String, String, String[])}.\r\n *\r\n * See https://issues.apache.org/jira/browse/DBCP-494\r\n */\r\n@Test\r\nvoid testCtorStringStringArrayOfNullStrings() {\r\n    final String[] input = null;\r\n    final PStmtKey pStmtKey = new PStmtKey(\"\", \"\", \"\", input);\r\n    assertArrayEquals(input, pStmtKey.getColumnNames());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestPStmtKey.java",
  "methodName" : "testCtorStringStringArrayOfStrings",
  "sourceCode" : "/**\r\n * Tests {@link org.apache.commons.dbcp2.PStmtKey#PStmtKey(String, String, String, String[])}.\r\n *\r\n * See https://issues.apache.org/jira/browse/DBCP-494\r\n */\r\n@Test\r\nvoid testCtorStringStringArrayOfStrings() {\r\n    final String[] input = { \"A\", \"B\" };\r\n    final PStmtKey pStmtKey = new PStmtKey(\"\", \"\", \"\", input);\r\n    assertArrayEquals(input, pStmtKey.getColumnNames());\r\n    input[0] = \"C\";\r\n    input[1] = \"D\";\r\n    assertFalse(Arrays.equals(input, pStmtKey.getColumnNames()));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestPStmtKey.java",
  "methodName" : "testEquals",
  "sourceCode" : "@Test\r\nvoid testEquals() {\r\n    final PStmtKey pStmtKey = new PStmtKey(\"SELECT 1\", \"catalog\", \"public\", java.sql.ResultSet.TYPE_SCROLL_INSENSITIVE, java.sql.ResultSet.CONCUR_READ_ONLY, StatementType.CALLABLE_STATEMENT);\r\n    assertEquals(pStmtKey, pStmtKey);\r\n    assertNotEquals(null, pStmtKey);\r\n    assertNotEquals(pStmtKey, new Object());\r\n    assertNotEquals(pStmtKey, new PStmtKey(\"SELECT 2\", \"catalog\", \"public\", ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY, StatementType.CALLABLE_STATEMENT));\r\n    assertNotEquals(pStmtKey, new PStmtKey(\"SELECT 1\", \"anothercatalog\", \"public\", ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY, StatementType.CALLABLE_STATEMENT));\r\n    assertNotEquals(pStmtKey, new PStmtKey(\"SELECT 1\", \"catalog\", \"private\", ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY, StatementType.CALLABLE_STATEMENT));\r\n    assertNotEquals(pStmtKey, new PStmtKey(\"SELECT 1\", \"catalog\", \"public\", ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_READ_ONLY, StatementType.CALLABLE_STATEMENT));\r\n    assertNotEquals(pStmtKey, new PStmtKey(\"SELECT 1\", \"catalog\", \"public\", ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_UPDATABLE, StatementType.CALLABLE_STATEMENT));\r\n    assertNotEquals(pStmtKey, new PStmtKey(\"SELECT 1\", \"catalog\", \"public\", ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY, StatementType.PREPARED_STATEMENT));\r\n    assertEquals(pStmtKey, new PStmtKey(\"SELECT 1\", \"catalog\", \"public\", ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY, StatementType.CALLABLE_STATEMENT));\r\n    assertEquals(pStmtKey.hashCode(), new PStmtKey(\"SELECT 1\", \"catalog\", \"public\", java.sql.ResultSet.TYPE_SCROLL_INSENSITIVE, java.sql.ResultSet.CONCUR_READ_ONLY, StatementType.CALLABLE_STATEMENT).hashCode());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestPStmtKey.java",
  "methodName" : "testGettersSetters",
  "sourceCode" : "@Test\r\nvoid testGettersSetters() {\r\n    final PStmtKey pStmtKey = new PStmtKey(\"SELECT 1\", \"catalog\", \"public\");\r\n    assertEquals(\"SELECT 1\", pStmtKey.getSql());\r\n    assertEquals(\"public\", pStmtKey.getSchema());\r\n    assertEquals(\"catalog\", pStmtKey.getCatalog());\r\n    assertNull(pStmtKey.getAutoGeneratedKeys());\r\n    assertNull(pStmtKey.getResultSetConcurrency());\r\n    assertNull(pStmtKey.getResultSetHoldability());\r\n    assertNull(pStmtKey.getResultSetType());\r\n    assertEquals(StatementType.PREPARED_STATEMENT, pStmtKey.getStmtType());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestPStmtKey.java",
  "methodName" : "testToString",
  "sourceCode" : "@Test\r\nvoid testToString() {\r\n    final PStmtKey pStmtKey = new PStmtKey(\"SELECT 1\", \"catalog\", \"public\", StatementType.CALLABLE_STATEMENT, Statement.RETURN_GENERATED_KEYS);\r\n    assertTrue(pStmtKey.toString().contains(\"sql=SELECT 1\"));\r\n    assertTrue(pStmtKey.toString().contains(\"schema=public\"));\r\n    assertTrue(pStmtKey.toString().contains(\"autoGeneratedKeys=1\"));\r\n    assertTrue(pStmtKey.toString().contains(\"statementType=CALLABLE_STATEMENT\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestPStmtPooling.java",
  "methodName" : "testBatchUpdate",
  "sourceCode" : "@Test\r\nvoid testBatchUpdate() throws Exception {\r\n    DriverManager.registerDriver(new TesterDriver());\r\n    final ConnectionFactory connFactory = new DriverManagerConnectionFactory(\"jdbc:apache:commons:testdriver\", \"u1\", \"p1\");\r\n    final PoolableConnectionFactory pcf = new PoolableConnectionFactory(connFactory, null);\r\n    pcf.setPoolStatements(true);\r\n    pcf.setDefaultReadOnly(Boolean.FALSE);\r\n    pcf.setDefaultAutoCommit(Boolean.TRUE);\r\n    final ObjectPool<PoolableConnection> connPool = new GenericObjectPool<>(pcf);\r\n    pcf.setPool(connPool);\r\n    final PoolingDataSource<?> ds = new PoolingDataSource<>(connPool);\r\n    final Connection conn = ds.getConnection();\r\n    final PreparedStatement ps = conn.prepareStatement(\"select 1 from dual\");\r\n    final Statement inner = ((DelegatingPreparedStatement) ps).getInnermostDelegate();\r\n    // Check DBCP-372\r\n    ps.addBatch();\r\n    ps.close();\r\n    conn.close();\r\n    Assertions.assertFalse(inner.isClosed());\r\n    ds.close();\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestPStmtPooling.java",
  "methodName" : "testCallableStatementPooling",
  "sourceCode" : "@Test\r\nvoid testCallableStatementPooling() throws Exception {\r\n    DriverManager.registerDriver(new TesterDriver());\r\n    final ConnectionFactory connFactory = new DriverManagerConnectionFactory(\"jdbc:apache:commons:testdriver\", \"u1\", \"p1\");\r\n    final ObjectName oName = new ObjectName(\"UnitTests:DataSource=test\");\r\n    final PoolableConnectionFactory pcf = new PoolableConnectionFactory(connFactory, oName);\r\n    pcf.setPoolStatements(true);\r\n    pcf.setDefaultReadOnly(Boolean.FALSE);\r\n    pcf.setDefaultAutoCommit(Boolean.TRUE);\r\n    final GenericObjectPoolConfig<PoolableConnection> config = new GenericObjectPoolConfig<>();\r\n    config.setJmxNameBase(\"UnitTests:DataSource=test,connectionpool=connections\");\r\n    config.setJmxNamePrefix(\"\");\r\n    final ObjectPool<PoolableConnection> connPool = new GenericObjectPool<>(pcf, config);\r\n    pcf.setPool(connPool);\r\n    final PoolingDataSource<?> ds = new PoolingDataSource<>(connPool);\r\n    try (Connection conn = ds.getConnection()) {\r\n        final Statement stmt1 = conn.prepareStatement(\"select 1 from dual\");\r\n        final Statement ustmt1 = ((DelegatingStatement) stmt1).getInnermostDelegate();\r\n        final Statement cstmt1 = conn.prepareCall(\"{call home}\");\r\n        final Statement ucstmt1 = ((DelegatingStatement) cstmt1).getInnermostDelegate();\r\n        // Return to pool\r\n        stmt1.close();\r\n        // \"\"\r\n        cstmt1.close();\r\n        // Check out from pool\r\n        final Statement stmt2 = conn.prepareStatement(\"select 1 from dual\");\r\n        final Statement ustmt2 = ((DelegatingStatement) stmt2).getInnermostDelegate();\r\n        final Statement cstmt2 = conn.prepareCall(\"{call home}\");\r\n        final Statement ucstmt2 = ((DelegatingStatement) cstmt2).getInnermostDelegate();\r\n        // Return to pool\r\n        stmt2.close();\r\n        // \"\"\r\n        cstmt2.close();\r\n        assertSame(ustmt1, ustmt2);\r\n        assertSame(ucstmt1, ucstmt2);\r\n        // Verify key distinguishes Callable from Prepared Statements in the pool\r\n        final Statement stmt3 = conn.prepareCall(\"select 1 from dual\");\r\n        final Statement ustmt3 = ((DelegatingStatement) stmt3).getInnermostDelegate();\r\n        stmt3.close();\r\n        assertNotSame(ustmt1, ustmt3);\r\n        assertNotSame(ustmt3, ucstmt1);\r\n    }\r\n    ds.close();\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestPStmtPooling.java",
  "methodName" : "testClosePool",
  "sourceCode" : "@Test\r\nvoid testClosePool() throws Exception {\r\n    DriverManager.registerDriver(new TesterDriver());\r\n    final ConnectionFactory connFactory = new DriverManagerConnectionFactory(\"jdbc:apache:commons:testdriver\", \"u1\", \"p1\");\r\n    final PoolableConnectionFactory pcf = new PoolableConnectionFactory(connFactory, null);\r\n    pcf.setPoolStatements(true);\r\n    pcf.setDefaultReadOnly(Boolean.FALSE);\r\n    pcf.setDefaultAutoCommit(Boolean.TRUE);\r\n    final ObjectPool<PoolableConnection> connPool = new GenericObjectPool<>(pcf);\r\n    pcf.setPool(connPool);\r\n    final PoolingDataSource<?> ds = new PoolingDataSource<>(connPool);\r\n    ((PoolingDataSource<?>) ds).setAccessToUnderlyingConnectionAllowed(true);\r\n    final Connection conn = ds.getConnection();\r\n    try (Statement s = conn.prepareStatement(\"select 1 from dual\")) {\r\n    }\r\n    final Connection poolableConnection = ((DelegatingConnection<?>) conn).getDelegate();\r\n    final Connection poolingConnection = ((DelegatingConnection<?>) poolableConnection).getDelegate();\r\n    poolingConnection.close();\r\n    final SQLException ex = assertThrows(SQLException.class, () -> conn.prepareStatement(\"select 1 from dual\"));\r\n    assertTrue(ex.getMessage().endsWith(\"invalid PoolingConnection.\"));\r\n    ds.close();\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestPStmtPooling.java",
  "methodName" : "testMultipleClose",
  "sourceCode" : "/**\r\n * Verifies that executing close() on an already closed DelegatingStatement that wraps a PoolablePreparedStatement does not \"re-close\" the PPS (which could\r\n * be in use by another client - see DBCP-414).\r\n */\r\n@Test\r\nvoid testMultipleClose() throws Exception {\r\n    final DataSource ds = createPoolingDataSource();\r\n    final Connection conn = ds.getConnection();\r\n    final PreparedStatement stmt1 = conn.prepareStatement(\"select 1 from dual\");\r\n    final PoolablePreparedStatement<?> pps1 = getPoolablePreparedStatement(stmt1);\r\n    conn.close();\r\n    // Closing conn should close stmt\r\n    assertTrue(stmt1.isClosed());\r\n    // Should already be closed - no-op\r\n    stmt1.close();\r\n    assertTrue(stmt1.isClosed());\r\n    final Connection conn2 = ds.getConnection();\r\n    final PreparedStatement stmt2 = conn2.prepareStatement(\"select 1 from dual\");\r\n    // Confirm stmt2 now wraps the same PPS wrapped by stmt1\r\n    Assertions.assertSame(pps1, getPoolablePreparedStatement(stmt2));\r\n    // close should not cascade to PPS that stmt1 used to wrap\r\n    stmt1.close();\r\n    assertFalse(stmt2.isClosed());\r\n    // wrapped PPS needs to work here - pre DBCP-414 fix this throws\r\n    stmt2.executeQuery();\r\n    conn2.close();\r\n    assertTrue(stmt1.isClosed());\r\n    assertTrue(stmt2.isClosed());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestPStmtPooling.java",
  "methodName" : "testStmtPool",
  "sourceCode" : "@Test\r\nvoid testStmtPool() throws Exception {\r\n    final DataSource ds = createPoolingDataSource();\r\n    try (Connection conn = ds.getConnection()) {\r\n        final Statement stmt1 = conn.prepareStatement(\"select 1 from dual\");\r\n        final Statement ustmt1 = ((DelegatingStatement) stmt1).getInnermostDelegate();\r\n        stmt1.close();\r\n        final Statement stmt2 = conn.prepareStatement(\"select 1 from dual\");\r\n        final Statement ustmt2 = ((DelegatingStatement) stmt2).getInnermostDelegate();\r\n        stmt2.close();\r\n        assertSame(ustmt1, ustmt2);\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestPStmtPoolingBasicDataSource.java",
  "methodName" : "testLRUBehavior",
  "sourceCode" : "/**\r\n * Verifies that the prepared statement pool behaves as an LRU cache,\r\n * closing least-recently-used statements idle in the pool to make room\r\n * for new ones if necessary.\r\n */\r\n@Test\r\nvoid testLRUBehavior() throws Exception {\r\n    ds.setMaxOpenPreparedStatements(3);\r\n    final Connection conn = getConnection();\r\n    assertNotNull(conn);\r\n    // Open 3 statements and then close them into the pool\r\n    final PreparedStatement stmt1 = conn.prepareStatement(\"select 'a' from dual\");\r\n    final PreparedStatement inner1 = (PreparedStatement) ((DelegatingPreparedStatement) stmt1).getInnermostDelegate();\r\n    final PreparedStatement stmt2 = conn.prepareStatement(\"select 'b' from dual\");\r\n    final PreparedStatement inner2 = (PreparedStatement) ((DelegatingPreparedStatement) stmt2).getInnermostDelegate();\r\n    final PreparedStatement stmt3 = conn.prepareStatement(\"select 'c' from dual\");\r\n    final PreparedStatement inner3 = (PreparedStatement) ((DelegatingPreparedStatement) stmt3).getInnermostDelegate();\r\n    stmt1.close();\r\n    // Make sure return timestamps are different\r\n    Thread.sleep(100);\r\n    stmt2.close();\r\n    Thread.sleep(100);\r\n    stmt3.close();\r\n    // Pool now has three idle statements, getting another one will force oldest (stmt1) out\r\n    final PreparedStatement stmt4 = conn.prepareStatement(\"select 'd' from dual\");\r\n    assertNotNull(stmt4);\r\n    // Verify that inner1 has been closed\r\n    assertThrows(SQLException.class, inner1::clearParameters, \"expecting SQLExcption - statement should be closed\");\r\n    // But others are still open\r\n    inner2.clearParameters();\r\n    inner3.clearParameters();\r\n    // Now make sure stmt1 does not come back from the dead\r\n    final PreparedStatement stmt5 = conn.prepareStatement(\"select 'a' from dual\");\r\n    final PreparedStatement inner5 = (PreparedStatement) ((DelegatingPreparedStatement) stmt5).getInnermostDelegate();\r\n    assertNotSame(inner5, inner1);\r\n    // inner2 should be closed now\r\n    assertThrows(SQLException.class, inner2::clearParameters, \"expecting SQLExcption - statement should be closed\");\r\n    // But inner3 should still be open\r\n    inner3.clearParameters();\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestPStmtPoolingBasicDataSource.java",
  "methodName" : "testMultipleThreads1",
  "sourceCode" : "/**\r\n * Tests high-concurrency contention for connections and pooled prepared statements.\r\n * DBCP-414\r\n */\r\n@Test\r\nvoid testMultipleThreads1() throws Exception {\r\n    ds.setMaxWait(Duration.ofMillis(-1));\r\n    ds.setMaxTotal(5);\r\n    ds.setMaxOpenPreparedStatements(-1);\r\n    multipleThreads(Duration.ofMillis(5), false, false, Duration.ofMillis(-1), 3, 100, 10000);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestPStmtPoolingBasicDataSource.java",
  "methodName" : "testPreparedStatementPooling",
  "sourceCode" : "@Test\r\nvoid testPreparedStatementPooling() throws Exception {\r\n    final Connection conn = getConnection();\r\n    assertNotNull(conn);\r\n    final PreparedStatement stmt1 = conn.prepareStatement(\"select 'a' from dual\");\r\n    assertNotNull(stmt1);\r\n    final PreparedStatement stmt2 = conn.prepareStatement(\"select 'b' from dual\");\r\n    assertNotNull(stmt2);\r\n    assertNotSame(stmt1, stmt2);\r\n    // go over the maxOpen limit\r\n    assertThrows(SQLException.class, () -> conn.prepareStatement(\"select 'c' from dual\"));\r\n    // make idle\r\n    stmt2.close();\r\n    // test cleanup the 'b' statement\r\n    final PreparedStatement stmt3 = conn.prepareStatement(\"select 'c' from dual\");\r\n    assertNotNull(stmt3);\r\n    assertNotSame(stmt3, stmt1);\r\n    assertNotSame(stmt3, stmt2);\r\n    // normal reuse of statement\r\n    stmt1.close();\r\n    try (final PreparedStatement stmt4 = conn.prepareStatement(\"select 'a' from dual\")) {\r\n        assertNotNull(stmt4);\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestPStmtPoolingBasicDataSource.java",
  "methodName" : "testPStmtCatalog",
  "sourceCode" : "// Bugzilla Bug 27246\r\n// PreparedStatement cache should be different depending on the Catalog\r\n@Test\r\nvoid testPStmtCatalog() throws Exception {\r\n    final Connection conn = getConnection();\r\n    conn.setCatalog(\"catalog1\");\r\n    final DelegatingPreparedStatement stmt1 = (DelegatingPreparedStatement) conn.prepareStatement(\"select 'a' from dual\");\r\n    final TesterPreparedStatement inner1 = (TesterPreparedStatement) stmt1.getInnermostDelegate();\r\n    assertEquals(\"catalog1\", inner1.getCatalog());\r\n    stmt1.close();\r\n    conn.setCatalog(\"catalog2\");\r\n    final DelegatingPreparedStatement stmt2 = (DelegatingPreparedStatement) conn.prepareStatement(\"select 'a' from dual\");\r\n    final TesterPreparedStatement inner2 = (TesterPreparedStatement) stmt2.getInnermostDelegate();\r\n    assertEquals(\"catalog2\", inner2.getCatalog());\r\n    stmt2.close();\r\n    conn.setCatalog(\"catalog1\");\r\n    final DelegatingPreparedStatement stmt3 = (DelegatingPreparedStatement) conn.prepareStatement(\"select 'a' from dual\");\r\n    final TesterPreparedStatement inner3 = (TesterPreparedStatement) stmt3.getInnermostDelegate();\r\n    assertEquals(\"catalog1\", inner3.getCatalog());\r\n    stmt3.close();\r\n    assertNotSame(inner1, inner2);\r\n    assertSame(inner1, inner3);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestPStmtPoolingBasicDataSource.java",
  "methodName" : "testPStmtPoolingAcrossClose",
  "sourceCode" : "@Test\r\nvoid testPStmtPoolingAcrossClose() throws Exception {\r\n    // only one connection in pool needed\r\n    ds.setMaxTotal(1);\r\n    ds.setMaxIdle(1);\r\n    ds.setAccessToUnderlyingConnectionAllowed(true);\r\n    final Connection conn1 = getConnection();\r\n    assertNotNull(conn1);\r\n    assertEquals(1, ds.getNumActive());\r\n    assertEquals(0, ds.getNumIdle());\r\n    final PreparedStatement stmt1 = conn1.prepareStatement(\"select 'a' from dual\");\r\n    assertNotNull(stmt1);\r\n    final Statement inner1 = ((DelegatingPreparedStatement) stmt1).getInnermostDelegate();\r\n    assertNotNull(inner1);\r\n    stmt1.close();\r\n    conn1.close();\r\n    assertEquals(0, ds.getNumActive());\r\n    assertEquals(1, ds.getNumIdle());\r\n    final Connection conn2 = getConnection();\r\n    assertNotNull(conn2);\r\n    assertEquals(1, ds.getNumActive());\r\n    assertEquals(0, ds.getNumIdle());\r\n    final PreparedStatement stmt2 = conn2.prepareStatement(\"select 'a' from dual\");\r\n    assertNotNull(stmt2);\r\n    final Statement inner2 = ((DelegatingPreparedStatement) stmt2).getInnermostDelegate();\r\n    assertNotNull(inner2);\r\n    assertSame(inner1, inner2);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestPStmtPoolingBasicDataSource.java",
  "methodName" : "testPStmtPoolingAcrossCloseWithClearOnReturn",
  "sourceCode" : "/**\r\n * Tests clearStatementPoolOnReturn introduced with DBCP-566.\r\n * When turned on, the statement pool must be empty after the connection is closed.\r\n *\r\n * @throws Exception\r\n */\r\n@Test\r\nvoid testPStmtPoolingAcrossCloseWithClearOnReturn() throws Exception {\r\n    // only one connection in pool needed\r\n    ds.setMaxTotal(1);\r\n    ds.setMaxIdle(1);\r\n    ds.setClearStatementPoolOnReturn(true);\r\n    ds.setAccessToUnderlyingConnectionAllowed(true);\r\n    final Connection conn1 = getConnection();\r\n    assertNotNull(conn1);\r\n    assertEquals(1, ds.getNumActive());\r\n    assertEquals(0, ds.getNumIdle());\r\n    @SuppressWarnings(\"unchecked\")\r\n    final DelegatingConnection<Connection> poolableConn = (DelegatingConnection<Connection>) ((DelegatingConnection<Connection>) conn1).getDelegateInternal();\r\n    final KeyedObjectPool<PStmtKey, DelegatingPreparedStatement> stmtPool = ((PoolingConnection) poolableConn.getDelegateInternal()).getStatementPool();\r\n    final PreparedStatement stmt1 = conn1.prepareStatement(\"select 'a' from dual\");\r\n    assertNotNull(stmt1);\r\n    final Statement inner1 = ((DelegatingPreparedStatement) stmt1).getInnermostDelegate();\r\n    assertNotNull(inner1);\r\n    stmt1.close();\r\n    final PreparedStatement stmt2 = conn1.prepareStatement(\"select 'a' from dual\");\r\n    assertNotNull(stmt2);\r\n    final Statement inner2 = ((DelegatingPreparedStatement) stmt2).getInnermostDelegate();\r\n    assertNotNull(inner2);\r\n    // from the same connection the statement must be pooled\r\n    assertSame(inner1, inner2);\r\n    stmt2.close();\r\n    conn1.close();\r\n    assertTrue(inner1.isClosed());\r\n    assertEquals(0, stmtPool.getNumActive());\r\n    assertEquals(0, stmtPool.getNumIdle());\r\n    assertEquals(0, ds.getNumActive());\r\n    assertEquals(1, ds.getNumIdle());\r\n    final Connection conn2 = getConnection();\r\n    assertNotNull(conn2);\r\n    assertEquals(1, ds.getNumActive());\r\n    assertEquals(0, ds.getNumIdle());\r\n    final PreparedStatement stmt3 = conn2.prepareStatement(\"select 'a' from dual\");\r\n    assertNotNull(stmt3);\r\n    final Statement inner3 = ((DelegatingPreparedStatement) stmt3).getInnermostDelegate();\r\n    assertNotNull(inner3);\r\n    // when acquiring the connection the next time, statement must be new\r\n    assertNotSame(inner1, inner3);\r\n    conn2.close();\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestPStmtPoolingBasicDataSource.java",
  "methodName" : "testPStmtPoolingWithNoClose",
  "sourceCode" : "@Test\r\nvoid testPStmtPoolingWithNoClose() throws Exception {\r\n    // only one connection in pool needed\r\n    ds.setMaxTotal(1);\r\n    ds.setMaxIdle(1);\r\n    ds.setAccessToUnderlyingConnectionAllowed(true);\r\n    final Connection conn1 = getConnection();\r\n    assertNotNull(conn1);\r\n    assertEquals(1, ds.getNumActive());\r\n    assertEquals(0, ds.getNumIdle());\r\n    final PreparedStatement stmt1 = conn1.prepareStatement(\"select 'a' from dual\");\r\n    assertNotNull(stmt1);\r\n    final Statement inner1 = ((DelegatingPreparedStatement) stmt1).getInnermostDelegate();\r\n    assertNotNull(inner1);\r\n    stmt1.close();\r\n    assertNotNull(conn1);\r\n    assertEquals(1, ds.getNumActive());\r\n    assertEquals(0, ds.getNumIdle());\r\n    final PreparedStatement stmt2 = conn1.prepareStatement(\"select 'a' from dual\");\r\n    assertNotNull(stmt2);\r\n    final Statement inner2 = ((DelegatingPreparedStatement) stmt2).getInnermostDelegate();\r\n    assertNotNull(inner2);\r\n    assertSame(inner1, inner2);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestSQLExceptionList.java",
  "methodName" : "testCause",
  "sourceCode" : "@Test\r\nvoid testCause() {\r\n    final SQLTransientException cause = new SQLTransientException();\r\n    final List<SQLTransientException> list = Collections.singletonList(cause);\r\n    final SQLExceptionList sqlExceptionList = new SQLExceptionList(list);\r\n    Assertions.assertEquals(cause, sqlExceptionList.getCause());\r\n    Assertions.assertEquals(list, sqlExceptionList.getCauseList());\r\n    sqlExceptionList.printStackTrace();\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestSQLExceptionList.java",
  "methodName" : "testNullCause",
  "sourceCode" : "@Test\r\nvoid testNullCause() {\r\n    final SQLExceptionList sqlExceptionList = new SQLExceptionList(null);\r\n    Assertions.assertNull(sqlExceptionList.getCause());\r\n    Assertions.assertNull(sqlExceptionList.getCauseList());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestUtils.java",
  "methodName" : "testCheckForConflictsBothCollectionsNull",
  "sourceCode" : "@Test\r\nvoid testCheckForConflictsBothCollectionsNull() {\r\n    assertDoesNotThrow(() -> Utils.checkSqlCodes(null, null));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestUtils.java",
  "methodName" : "testCheckForConflictsEmptyCollections",
  "sourceCode" : "@Test\r\nvoid testCheckForConflictsEmptyCollections() {\r\n    final Collection<String> codes1 = Collections.emptySet();\r\n    final Collection<String> codes2 = Collections.emptySet();\r\n    assertDoesNotThrow(() -> Utils.checkSqlCodes(codes1, codes2));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestUtils.java",
  "methodName" : "testCheckForConflictsFirstCollectionNull",
  "sourceCode" : "@Test\r\nvoid testCheckForConflictsFirstCollectionNull() {\r\n    final Collection<String> codes1 = null;\r\n    final Collection<String> codes2 = new HashSet<>(Arrays.asList(\"08005\", \"08007\"));\r\n    assertDoesNotThrow(() -> Utils.checkSqlCodes(codes1, codes2));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestUtils.java",
  "methodName" : "testCheckForConflictsNoOverlap",
  "sourceCode" : "@Test\r\nvoid testCheckForConflictsNoOverlap() {\r\n    final Collection<String> codes1 = new HashSet<>(Arrays.asList(\"08003\", \"08006\"));\r\n    final Collection<String> codes2 = new HashSet<>(Arrays.asList(\"08005\", \"08007\"));\r\n    assertDoesNotThrow(() -> Utils.checkSqlCodes(codes1, codes2));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestUtils.java",
  "methodName" : "testCheckForConflictsSecondCollectionNull",
  "sourceCode" : "@Test\r\nvoid testCheckForConflictsSecondCollectionNull() {\r\n    final Collection<String> codes1 = new HashSet<>(Arrays.asList(\"08003\", \"08006\"));\r\n    final Collection<String> codes2 = null;\r\n    assertDoesNotThrow(() -> Utils.checkSqlCodes(codes1, codes2));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestUtils.java",
  "methodName" : "testCheckForConflictsWith1Overlap",
  "sourceCode" : "@Test\r\nvoid testCheckForConflictsWith1Overlap() {\r\n    final Collection<String> codes1 = new HashSet<>(Arrays.asList(\"08003\", \"08006\"));\r\n    final Collection<String> codes2 = new HashSet<>(Arrays.asList(\"08005\", \"08006\"));\r\n    final IllegalArgumentException exception = assertThrows(IllegalArgumentException.class, () -> Utils.checkSqlCodes(codes1, codes2));\r\n    assertEquals(\"[08006] cannot be in both disconnectionSqlCodes and disconnectionIgnoreSqlCodes.\", exception.getMessage());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestUtils.java",
  "methodName" : "testCheckForConflictsWith2Overlap",
  "sourceCode" : "@Test\r\nvoid testCheckForConflictsWith2Overlap() {\r\n    final Collection<String> codes1 = new HashSet<>(Arrays.asList(\"08003\", \"08006\", \"08007\"));\r\n    final Collection<String> codes2 = new HashSet<>(Arrays.asList(\"08005\", \"08006\", \"08007\"));\r\n    final IllegalArgumentException exception = assertThrows(IllegalArgumentException.class, () -> Utils.checkSqlCodes(codes1, codes2));\r\n    assertEquals(\"[08006, 08007] cannot be in both disconnectionSqlCodes and disconnectionIgnoreSqlCodes.\", exception.getMessage());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestUtils.java",
  "methodName" : "testClassLoads",
  "sourceCode" : "@Test\r\nvoid testClassLoads() {\r\n    Utils.closeQuietly((AutoCloseable) null);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-dbcp\\src\\test\\java\\org\\apache\\commons\\dbcp2\\TestUtils.java",
  "methodName" : "testIsDisconnectionSqlCode",
  "sourceCode" : "@Test\r\nvoid testIsDisconnectionSqlCode() {\r\n    assertTrue(Utils.isDisconnectionSqlCode(\"57P01\"), \"57P01 should be recognised as a disconnection SQL code.\");\r\n    assertTrue(Utils.isDisconnectionSqlCode(\"01002\"), \"01002 should be recognised as a disconnection SQL code.\");\r\n    assertTrue(Utils.isDisconnectionSqlCode(\"JZ0C0\"), \"JZ0C0 should be recognised as a disconnection SQL code.\");\r\n    assertFalse(Utils.isDisconnectionSqlCode(\"INVALID\"), \"INVALID should not be recognised as a disconnection SQL code.\");\r\n    assertFalse(Utils.isDisconnectionSqlCode(\"00000\"), \"00000 should not be recognised as a disconnection SQL code.\");\r\n}",
  "annotations" : [ "Test" ]
} ]