[ {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\AnnotationUtilsTest.java",
  "methodName" : "testAnnotationsOfDifferingTypes",
  "sourceCode" : "@Test\r\nvoid testAnnotationsOfDifferingTypes() {\r\n    assertFalse(AnnotationUtils.equals(field1.getAnnotation(TestAnnotation.class), field4.getAnnotation(NestAnnotation.class)));\r\n    assertFalse(AnnotationUtils.equals(field4.getAnnotation(NestAnnotation.class), field1.getAnnotation(TestAnnotation.class)));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\AnnotationUtilsTest.java",
  "methodName" : "testBothArgsNull",
  "sourceCode" : "@Test\r\nvoid testBothArgsNull() {\r\n    assertTrue(AnnotationUtils.equals(null, null));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\AnnotationUtilsTest.java",
  "methodName" : "testEquivalence",
  "sourceCode" : "@Test\r\nvoid testEquivalence() {\r\n    assertTrue(AnnotationUtils.equals(field1.getAnnotation(TestAnnotation.class), field2.getAnnotation(TestAnnotation.class)));\r\n    assertTrue(AnnotationUtils.equals(field2.getAnnotation(TestAnnotation.class), field1.getAnnotation(TestAnnotation.class)));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\AnnotationUtilsTest.java",
  "methodName" : "testGeneratedAnnotationEquivalentToRealAnnotation",
  "sourceCode" : "@Test\r\nvoid testGeneratedAnnotationEquivalentToRealAnnotation() {\r\n    assertTimeoutPreemptively(Duration.ofSeconds(666L), () -> {\r\n        final Test real = getClass().getDeclaredMethod(\"testGeneratedAnnotationEquivalentToRealAnnotation\").getAnnotation(Test.class);\r\n        final InvocationHandler generatedTestInvocationHandler = (proxy, method, args) -> {\r\n            if (\"equals\".equals(method.getName()) && method.getParameterTypes().length == 1) {\r\n                return Boolean.valueOf(proxy == args[0]);\r\n            }\r\n            if (\"hashCode\".equals(method.getName()) && method.getParameterTypes().length == 0) {\r\n                return Integer.valueOf(System.identityHashCode(proxy));\r\n            }\r\n            if (\"toString\".equals(method.getName()) && method.getParameterTypes().length == 0) {\r\n                return \"Test proxy\";\r\n            }\r\n            return method.invoke(real, args);\r\n        };\r\n        final Test generated = (Test) Proxy.newProxyInstance(Thread.currentThread().getContextClassLoader(), new Class[] { Test.class }, generatedTestInvocationHandler);\r\n        assertEquals(real, generated);\r\n        assertNotEquals(generated, real);\r\n        assertTrue(AnnotationUtils.equals(generated, real));\r\n        assertTrue(AnnotationUtils.equals(real, generated));\r\n        final Test generated2 = (Test) Proxy.newProxyInstance(Thread.currentThread().getContextClassLoader(), new Class[] { Test.class }, generatedTestInvocationHandler);\r\n        assertNotEquals(generated, generated2);\r\n        assertNotEquals(generated2, generated);\r\n        assertTrue(AnnotationUtils.equals(generated, generated2));\r\n        assertTrue(AnnotationUtils.equals(generated2, generated));\r\n    });\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\AnnotationUtilsTest.java",
  "methodName" : "testHashCode",
  "sourceCode" : "@Test\r\nvoid testHashCode() {\r\n    assertTimeoutPreemptively(Duration.ofSeconds(666L), () -> {\r\n        final Test test = getClass().getDeclaredMethod(\"testHashCode\").getAnnotation(Test.class);\r\n        assertEquals(test.hashCode(), AnnotationUtils.hashCode(test));\r\n        final TestAnnotation testAnnotation1 = field1.getAnnotation(TestAnnotation.class);\r\n        assertEquals(testAnnotation1.hashCode(), AnnotationUtils.hashCode(testAnnotation1));\r\n        final TestAnnotation testAnnotation3 = field3.getAnnotation(TestAnnotation.class);\r\n        assertEquals(testAnnotation3.hashCode(), AnnotationUtils.hashCode(testAnnotation3));\r\n    });\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\AnnotationUtilsTest.java",
  "methodName" : "testIsValidAnnotationMemberType",
  "sourceCode" : "@Test\r\nvoid testIsValidAnnotationMemberType() {\r\n    for (final Class<?> type : new Class[] { byte.class, short.class, int.class, char.class, long.class, float.class, double.class, boolean.class, String.class, Class.class, NestAnnotation.class, TestAnnotation.class, Stooge.class, ElementType.class }) {\r\n        assertTrue(AnnotationUtils.isValidAnnotationMemberType(type));\r\n        assertTrue(AnnotationUtils.isValidAnnotationMemberType(Array.newInstance(type, 0).getClass()));\r\n    }\r\n    for (final Class<?> type : new Class[] { Object.class, Map.class, Collection.class }) {\r\n        assertFalse(AnnotationUtils.isValidAnnotationMemberType(type));\r\n        assertFalse(AnnotationUtils.isValidAnnotationMemberType(Array.newInstance(type, 0).getClass()));\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\AnnotationUtilsTest.java",
  "methodName" : "testNonEquivalentAnnotationsOfSameType",
  "sourceCode" : "@Test\r\nvoid testNonEquivalentAnnotationsOfSameType() {\r\n    assertFalse(AnnotationUtils.equals(field1.getAnnotation(TestAnnotation.class), field3.getAnnotation(TestAnnotation.class)));\r\n    assertFalse(AnnotationUtils.equals(field3.getAnnotation(TestAnnotation.class), field1.getAnnotation(TestAnnotation.class)));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\AnnotationUtilsTest.java",
  "methodName" : "testOneArgNull",
  "sourceCode" : "@Test\r\nvoid testOneArgNull() {\r\n    assertFalse(AnnotationUtils.equals(field1.getAnnotation(TestAnnotation.class), null));\r\n    assertFalse(AnnotationUtils.equals(null, field1.getAnnotation(TestAnnotation.class)));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\AnnotationUtilsTest.java",
  "methodName" : "testSameInstance",
  "sourceCode" : "@Test\r\nvoid testSameInstance() {\r\n    assertTrue(AnnotationUtils.equals(field1.getAnnotation(TestAnnotation.class), field1.getAnnotation(TestAnnotation.class)));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\AnnotationUtilsTest.java",
  "methodName" : "testToString",
  "sourceCode" : "@Test\r\n@TestMethodAnnotation(timeout = 666000)\r\nvoid testToString() {\r\n    assertTimeoutPreemptively(Duration.ofSeconds(666L), () -> {\r\n        final TestMethodAnnotation testAnnotation = getClass().getDeclaredMethod(\"testToString\").getAnnotation(TestMethodAnnotation.class);\r\n        final String annotationString = AnnotationUtils.toString(testAnnotation);\r\n        assertTrue(annotationString.startsWith(\"@org.apache.commons.lang3.AnnotationUtilsTest$TestMethodAnnotation(\"));\r\n        assertTrue(annotationString.endsWith(\")\"));\r\n        assertTrue(annotationString.contains(\"expected=class org.apache.commons.lang3.AnnotationUtilsTest$TestMethodAnnotation$None\"));\r\n        assertTrue(annotationString.contains(\"timeout=666000\"));\r\n        assertTrue(annotationString.contains(\", \"));\r\n    });\r\n}",
  "annotations" : [ "Test", "TestMethodAnnotation" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\AppendableJoinerTest.java",
  "methodName" : "testAllBuilderPropertiesStringBuilder",
  "sourceCode" : "@Test\r\nvoid testAllBuilderPropertiesStringBuilder() {\r\n    // @formatter:off\r\n    final AppendableJoiner<Object> joiner = AppendableJoiner.builder().setPrefix(\"<\").setDelimiter(\".\").setSuffix(\">\").setElementAppender((a, e) -> a.append(String.valueOf(e))).get();\r\n    // @formatter:on\r\n    final StringBuilder sbuilder = new StringBuilder(\"A\");\r\n    assertEquals(\"A<B.C>\", joiner.join(sbuilder, \"B\", \"C\").toString());\r\n    sbuilder.append(\"1\");\r\n    assertEquals(\"A<B.C>1<D.E>\", joiner.join(sbuilder, Arrays.asList(\"D\", \"E\")).toString());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\AppendableJoinerTest.java",
  "methodName" : "testBuildDefaultStringBuilder",
  "sourceCode" : "@Test\r\nvoid testBuildDefaultStringBuilder() {\r\n    final Builder<Object> builder = AppendableJoiner.builder();\r\n    assertNotSame(builder.get(), builder.get());\r\n    final AppendableJoiner<Object> joiner = builder.get();\r\n    final StringBuilder sbuilder = new StringBuilder(\"A\");\r\n    assertEquals(\"ABC\", joiner.join(sbuilder, \"B\", \"C\").toString());\r\n    sbuilder.append(\"1\");\r\n    assertEquals(\"ABC1DE\", joiner.join(sbuilder, \"D\", \"E\").toString());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\AppendableJoinerTest.java",
  "methodName" : "testBuilder",
  "sourceCode" : "@Test\r\nvoid testBuilder() {\r\n    assertNotSame(AppendableJoiner.builder(), AppendableJoiner.builder());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\AppendableJoinerTest.java",
  "methodName" : "testDelimiterAppendable",
  "sourceCode" : "// Test own StrBuilder\r\n@SuppressWarnings(\"deprecation\")\r\n@ParameterizedTest\r\n@ValueSource(classes = { StringBuilder.class, StringBuffer.class, StringWriter.class, StrBuilder.class, TextStringBuilder.class })\r\nvoid testDelimiterAppendable(final Class<? extends Appendable> clazz) throws Exception {\r\n    final AppendableJoiner<Object> joiner = AppendableJoiner.builder().setDelimiter(\".\").get();\r\n    final Appendable sbuilder = clazz.newInstance();\r\n    sbuilder.append(\"A\");\r\n    // throws IOException\r\n    assertEquals(\"AB.C\", joiner.joinA(sbuilder, \"B\", \"C\").toString());\r\n    sbuilder.append(\"1\");\r\n    // throws IOException\r\n    assertEquals(\"AB.C1D.E\", joiner.joinA(sbuilder, Arrays.asList(\"D\", \"E\")).toString());\r\n}",
  "annotations" : [ "ParameterizedTest" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\AppendableJoinerTest.java",
  "methodName" : "testDelimiterStringBuilder",
  "sourceCode" : "@Test\r\nvoid testDelimiterStringBuilder() {\r\n    final AppendableJoiner<Object> joiner = AppendableJoiner.builder().setDelimiter(\".\").get();\r\n    final StringBuilder sbuilder = new StringBuilder(\"A\");\r\n    // does not throw IOException\r\n    assertEquals(\"AB.C\", joiner.join(sbuilder, \"B\", \"C\").toString());\r\n    sbuilder.append(\"1\");\r\n    // does not throw IOException\r\n    assertEquals(\"AB.C1D.E\", joiner.join(sbuilder, Arrays.asList(\"D\", \"E\")).toString());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\AppendableJoinerTest.java",
  "methodName" : "testToCharSequenceStringBuilder1",
  "sourceCode" : "@Test\r\nvoid testToCharSequenceStringBuilder1() {\r\n    // @formatter:off\r\n    final AppendableJoiner<Object> joiner = AppendableJoiner.builder().setPrefix(\"<\").setDelimiter(\".\").setSuffix(\">\").setElementAppender((a, e) -> a.append(\"|\").append(Objects.toString(e))).get();\r\n    // @formatter:on\r\n    final StringBuilder sbuilder = new StringBuilder(\"A\");\r\n    assertEquals(\"A<|B.|C>\", joiner.join(sbuilder, \"B\", \"C\").toString());\r\n    sbuilder.append(\"1\");\r\n    assertEquals(\"A<|B.|C>1<|D.|E>\", joiner.join(sbuilder, Arrays.asList(\"D\", \"E\")).toString());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\AppendableJoinerTest.java",
  "methodName" : "testToCharSequenceStringBuilder2",
  "sourceCode" : "@Test\r\nvoid testToCharSequenceStringBuilder2() {\r\n    // @formatter:off\r\n    final AppendableJoiner<Fixture> joiner = AppendableJoiner.<Fixture>builder().setElementAppender((a, e) -> e.render(a)).get();\r\n    // @formatter:on\r\n    final StringBuilder sbuilder = new StringBuilder(\"[\");\r\n    assertEquals(\"[B!C!\", joiner.join(sbuilder, new Fixture(\"B\"), new Fixture(\"C\")).toString());\r\n    sbuilder.append(\"]\");\r\n    assertEquals(\"[B!C!]D!E!\", joiner.join(sbuilder, Arrays.asList(new Fixture(\"D\"), new Fixture(\"E\"))).toString());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ArchUtilsTest.java",
  "methodName" : "testArch",
  "sourceCode" : "@Test\r\nvoid testArch() {\r\n    Processor processor = ArchUtils.getProcessor(X86);\r\n    assertEqualsTypeNotNull(Processor.Type.X86, processor);\r\n    assertTrue(processor.isX86());\r\n    assertNotEqualsTypeNotNull(Processor.Type.PPC, processor);\r\n    assertFalse(processor.isPPC());\r\n    processor = ArchUtils.getProcessor(X86_64);\r\n    assertEqualsTypeNotNull(Processor.Type.X86, processor);\r\n    assertTrue(processor.isX86());\r\n    processor = ArchUtils.getProcessor(IA64_32);\r\n    assertEqualsTypeNotNull(Processor.Type.IA_64, processor);\r\n    assertTrue(processor.isIA64());\r\n    processor = ArchUtils.getProcessor(IA64);\r\n    assertEqualsTypeNotNull(Processor.Type.IA_64, processor);\r\n    assertTrue(processor.isIA64());\r\n    assertNotEqualsTypeNotNull(Processor.Type.X86, processor);\r\n    assertFalse(processor.isX86());\r\n    processor = ArchUtils.getProcessor(PPC);\r\n    assertEqualsTypeNotNull(Processor.Type.PPC, processor);\r\n    assertTrue(processor.isPPC());\r\n    assertNotEqualsTypeNotNull(Processor.Type.IA_64, processor);\r\n    assertFalse(processor.isIA64());\r\n    processor = ArchUtils.getProcessor(PPC64);\r\n    assertEqualsTypeNotNull(Processor.Type.PPC, processor);\r\n    assertTrue(processor.isPPC());\r\n    processor = ArchUtils.getProcessor(AARCH_64);\r\n    assertEqualsTypeNotNull(Processor.Type.AARCH_64, processor);\r\n    assertTrue(processor.isAarch64());\r\n    processor = ArchUtils.getProcessor(RISCV_32);\r\n    assertEqualsTypeNotNull(Processor.Type.RISC_V, processor);\r\n    assertTrue(processor.isRISCV());\r\n    processor = ArchUtils.getProcessor(RISCV_64);\r\n    assertEqualsTypeNotNull(Processor.Type.RISC_V, processor);\r\n    assertTrue(processor.isRISCV());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ArchUtilsTest.java",
  "methodName" : "testArchLabels",
  "sourceCode" : "@Test\r\nvoid testArchLabels() {\r\n    for (final Arch arch : Arch.values()) {\r\n        // Only test label presence.\r\n        assertFalse(arch.getLabel().isEmpty());\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ArchUtilsTest.java",
  "methodName" : "testGetProcessor",
  "sourceCode" : "@Test\r\nvoid testGetProcessor() {\r\n    assertNotNull(ArchUtils.getProcessor(X86));\r\n    assertNull(ArchUtils.getProcessor(\"NA\"));\r\n    assertNull(ArchUtils.getProcessor(null));\r\n    final Processor processor = ArchUtils.getProcessor();\r\n    assertNotEquals(ObjectUtils.identityToString(processor), processor.toString());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ArchUtilsTest.java",
  "methodName" : "testIs32BitJVM",
  "sourceCode" : "@Test\r\nvoid testIs32BitJVM() {\r\n    Processor processor = ArchUtils.getProcessor(X86);\r\n    assertEqualsArchNotNull(Processor.Arch.BIT_32, processor);\r\n    assertTrue(processor.is32Bit());\r\n    processor = ArchUtils.getProcessor(IA64_32);\r\n    assertEqualsArchNotNull(Processor.Arch.BIT_32, processor);\r\n    assertTrue(processor.is32Bit());\r\n    processor = ArchUtils.getProcessor(PPC);\r\n    assertEqualsArchNotNull(Processor.Arch.BIT_32, processor);\r\n    processor.is32Bit();\r\n    processor = ArchUtils.getProcessor(RISCV_32);\r\n    assertEqualsArchNotNull(Processor.Arch.BIT_32, processor);\r\n    assertTrue(processor.is32Bit());\r\n    processor = ArchUtils.getProcessor(X86_64);\r\n    assertNotEqualsArchNotNull(Processor.Arch.BIT_32, processor);\r\n    assertFalse(processor.is32Bit());\r\n    processor = ArchUtils.getProcessor(PPC64);\r\n    assertNotEqualsArchNotNull(Processor.Arch.BIT_32, processor);\r\n    assertFalse(processor.is32Bit());\r\n    processor = ArchUtils.getProcessor(IA64);\r\n    assertNotEqualsArchNotNull(Processor.Arch.BIT_32, processor);\r\n    assertFalse(processor.is32Bit());\r\n    processor = ArchUtils.getProcessor(RISCV_64);\r\n    assertNotEqualsArchNotNull(Processor.Arch.BIT_32, processor);\r\n    assertFalse(processor.is32Bit());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ArchUtilsTest.java",
  "methodName" : "testIs64BitJVM",
  "sourceCode" : "@Test\r\nvoid testIs64BitJVM() {\r\n    Processor processor = ArchUtils.getProcessor(X86_64);\r\n    assertEqualsArchNotNull(Processor.Arch.BIT_64, processor);\r\n    assertTrue(processor.is64Bit());\r\n    processor = ArchUtils.getProcessor(PPC64);\r\n    assertEqualsArchNotNull(Processor.Arch.BIT_64, processor);\r\n    assertTrue(processor.is64Bit());\r\n    processor = ArchUtils.getProcessor(IA64);\r\n    assertEqualsArchNotNull(Processor.Arch.BIT_64, processor);\r\n    assertTrue(processor.is64Bit());\r\n    processor = ArchUtils.getProcessor(RISCV_64);\r\n    assertEqualsArchNotNull(Processor.Arch.BIT_64, processor);\r\n    assertTrue(processor.is64Bit());\r\n    processor = ArchUtils.getProcessor(X86);\r\n    assertNotEqualsArchNotNull(Processor.Arch.BIT_64, processor);\r\n    assertFalse(processor.is64Bit());\r\n    processor = ArchUtils.getProcessor(PPC);\r\n    assertNotEqualsArchNotNull(Processor.Arch.BIT_64, processor);\r\n    assertFalse(processor.is64Bit());\r\n    processor = ArchUtils.getProcessor(IA64_32);\r\n    assertNotEqualsArchNotNull(Processor.Arch.BIT_64, processor);\r\n    assertFalse(processor.is64Bit());\r\n    processor = ArchUtils.getProcessor(RISCV_32);\r\n    assertNotEqualsArchNotNull(Processor.Arch.BIT_64, processor);\r\n    assertFalse(processor.is64Bit());\r\n    processor = ArchUtils.getProcessor(AARCH_64);\r\n    assertEqualsArchNotNull(Processor.Arch.BIT_64, processor);\r\n    assertNotEqualsArchNotNull(Processor.Arch.BIT_32, processor);\r\n    assertTrue(processor.is64Bit());\r\n    assertFalse(processor.is32Bit());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ArchUtilsTest.java",
  "methodName" : "testTypeLabels",
  "sourceCode" : "@Test\r\nvoid testTypeLabels() {\r\n    for (final Type type : Type.values()) {\r\n        // Only test label presence.\r\n        assertFalse(type.getLabel().isEmpty());\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ArrayFillTest.java",
  "methodName" : "testFillBooleanArray",
  "sourceCode" : "@Test\r\nvoid testFillBooleanArray() {\r\n    final boolean[] array = new boolean[3];\r\n    final boolean val = true;\r\n    final boolean[] actual = ArrayFill.fill(array, val);\r\n    assertSame(array, actual);\r\n    for (final boolean v : actual) {\r\n        assertEquals(val, v);\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ArrayFillTest.java",
  "methodName" : "testFillBooleanArrayNull",
  "sourceCode" : "@Test\r\nvoid testFillBooleanArrayNull() {\r\n    final boolean[] array = null;\r\n    final boolean val = true;\r\n    final boolean[] actual = ArrayFill.fill(array, val);\r\n    assertSame(array, actual);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ArrayFillTest.java",
  "methodName" : "testFillByteArray",
  "sourceCode" : "@Test\r\nvoid testFillByteArray() {\r\n    final byte[] array = new byte[3];\r\n    final byte val = (byte) 1;\r\n    final byte[] actual = ArrayFill.fill(array, val);\r\n    assertSame(array, actual);\r\n    for (final byte v : actual) {\r\n        assertEquals(val, v);\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ArrayFillTest.java",
  "methodName" : "testFillByteArrayNull",
  "sourceCode" : "@Test\r\nvoid testFillByteArrayNull() {\r\n    final byte[] array = null;\r\n    final byte val = (byte) 1;\r\n    final byte[] actual = ArrayFill.fill(array, val);\r\n    assertSame(array, actual);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ArrayFillTest.java",
  "methodName" : "testFillCharArray",
  "sourceCode" : "@Test\r\nvoid testFillCharArray() {\r\n    final char[] array = new char[3];\r\n    final char val = 1;\r\n    final char[] actual = ArrayFill.fill(array, val);\r\n    assertSame(array, actual);\r\n    for (final char v : actual) {\r\n        assertEquals(val, v);\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ArrayFillTest.java",
  "methodName" : "testFillCharArrayNull",
  "sourceCode" : "@Test\r\nvoid testFillCharArrayNull() {\r\n    final char[] array = null;\r\n    final char val = 1;\r\n    final char[] actual = ArrayFill.fill(array, val);\r\n    assertSame(array, actual);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ArrayFillTest.java",
  "methodName" : "testFillDoubleArray",
  "sourceCode" : "@Test\r\nvoid testFillDoubleArray() {\r\n    final double[] array = new double[3];\r\n    final double val = 1;\r\n    final double[] actual = ArrayFill.fill(array, val);\r\n    assertSame(array, actual);\r\n    for (final double v : actual) {\r\n        assertEquals(val, v);\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ArrayFillTest.java",
  "methodName" : "testFillDoubleArrayNull",
  "sourceCode" : "@Test\r\nvoid testFillDoubleArrayNull() {\r\n    final double[] array = null;\r\n    final double val = 1;\r\n    final double[] actual = ArrayFill.fill(array, val);\r\n    assertSame(array, actual);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ArrayFillTest.java",
  "methodName" : "testFillFloatArray",
  "sourceCode" : "@Test\r\nvoid testFillFloatArray() {\r\n    final float[] array = new float[3];\r\n    final float val = 1;\r\n    final float[] actual = ArrayFill.fill(array, val);\r\n    assertSame(array, actual);\r\n    for (final float v : actual) {\r\n        assertEquals(val, v);\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ArrayFillTest.java",
  "methodName" : "testFillFloatArrayNull",
  "sourceCode" : "@Test\r\nvoid testFillFloatArrayNull() {\r\n    final float[] array = null;\r\n    final float val = 1;\r\n    final float[] actual = ArrayFill.fill(array, val);\r\n    assertSame(array, actual);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ArrayFillTest.java",
  "methodName" : "testFillFunction",
  "sourceCode" : "@Test\r\nvoid testFillFunction() throws Exception {\r\n    final FailableIntFunction<?, Exception> nullIntFunction = null;\r\n    assertNull(ArrayFill.fill(null, nullIntFunction));\r\n    assertArrayEquals(null, ArrayFill.fill(null, nullIntFunction));\r\n    assertArrayEquals(ArrayUtils.EMPTY_BOOLEAN_OBJECT_ARRAY, ArrayFill.fill(ArrayUtils.EMPTY_BOOLEAN_OBJECT_ARRAY, nullIntFunction));\r\n    assertArrayEquals(ArrayUtils.EMPTY_OBJECT_ARRAY, ArrayFill.fill(ArrayUtils.EMPTY_OBJECT_ARRAY, nullIntFunction));\r\n    final Integer[] array = new Integer[10];\r\n    final Integer[] array2 = ArrayFill.fill(array, Integer::valueOf);\r\n    assertSame(array, array2);\r\n    for (int i = 0; i < array.length; i++) {\r\n        assertEquals(i, array[i].intValue());\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ArrayFillTest.java",
  "methodName" : "testFillIntArray",
  "sourceCode" : "@Test\r\nvoid testFillIntArray() {\r\n    final int[] array = new int[3];\r\n    final int val = 1;\r\n    final int[] actual = ArrayFill.fill(array, val);\r\n    assertSame(array, actual);\r\n    for (final int v : actual) {\r\n        assertEquals(val, v);\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ArrayFillTest.java",
  "methodName" : "testFillIntArrayNull",
  "sourceCode" : "@Test\r\nvoid testFillIntArrayNull() {\r\n    final int[] array = null;\r\n    final int val = 1;\r\n    final int[] actual = ArrayFill.fill(array, val);\r\n    assertSame(array, actual);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ArrayFillTest.java",
  "methodName" : "testFillLongArray",
  "sourceCode" : "@Test\r\nvoid testFillLongArray() {\r\n    final long[] array = new long[3];\r\n    final long val = 1;\r\n    final long[] actual = ArrayFill.fill(array, val);\r\n    assertSame(array, actual);\r\n    for (final long v : actual) {\r\n        assertEquals(val, v);\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ArrayFillTest.java",
  "methodName" : "testFillLongArrayNull",
  "sourceCode" : "@Test\r\nvoid testFillLongArrayNull() {\r\n    final long[] array = null;\r\n    final long val = 1;\r\n    final long[] actual = ArrayFill.fill(array, val);\r\n    assertSame(array, actual);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ArrayFillTest.java",
  "methodName" : "testFillObjectArray",
  "sourceCode" : "@Test\r\nvoid testFillObjectArray() {\r\n    final String[] array = new String[3];\r\n    final String val = \"A\";\r\n    final String[] actual = ArrayFill.fill(array, val);\r\n    assertSame(array, actual);\r\n    for (final String v : actual) {\r\n        assertEquals(val, v);\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ArrayFillTest.java",
  "methodName" : "testFillObjectArrayNull",
  "sourceCode" : "@Test\r\nvoid testFillObjectArrayNull() {\r\n    final Object[] array = null;\r\n    final Object val = 1;\r\n    final Object[] actual = ArrayFill.fill(array, val);\r\n    assertSame(array, actual);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ArrayFillTest.java",
  "methodName" : "testFillShortArray",
  "sourceCode" : "@Test\r\nvoid testFillShortArray() {\r\n    final short[] array = new short[3];\r\n    final short val = (byte) 1;\r\n    final short[] actual = ArrayFill.fill(array, val);\r\n    assertSame(array, actual);\r\n    for (final short v : actual) {\r\n        assertEquals(val, v);\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ArrayFillTest.java",
  "methodName" : "testFillShortArrayNull",
  "sourceCode" : "@Test\r\nvoid testFillShortArrayNull() {\r\n    final short[] array = null;\r\n    final short val = 1;\r\n    final short[] actual = ArrayFill.fill(array, val);\r\n    assertSame(array, actual);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ArraySorterTest.java",
  "methodName" : "testSortByteArray",
  "sourceCode" : "@Test\r\nvoid testSortByteArray() {\r\n    final byte[] array1 = { 2, 1 };\r\n    final byte[] array2 = array1.clone();\r\n    Arrays.sort(array1);\r\n    assertArrayEquals(array1, ArraySorter.sort(array2));\r\n    assertNull(ArraySorter.sort((byte[]) null));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ArraySorterTest.java",
  "methodName" : "testSortCharArray",
  "sourceCode" : "@Test\r\nvoid testSortCharArray() {\r\n    final char[] array1 = { 2, 1 };\r\n    final char[] array2 = array1.clone();\r\n    Arrays.sort(array1);\r\n    assertArrayEquals(array1, ArraySorter.sort(array2));\r\n    assertNull(ArraySorter.sort((char[]) null));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ArraySorterTest.java",
  "methodName" : "testSortComparable",
  "sourceCode" : "@Test\r\nvoid testSortComparable() {\r\n    final String[] array1 = ArrayUtils.toArray(\"foo\", \"bar\");\r\n    final String[] array2 = array1.clone();\r\n    Arrays.sort(array1);\r\n    assertArrayEquals(array1, ArraySorter.sort(array2, String::compareTo));\r\n    assertNull(ArraySorter.sort((String[]) null));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ArraySorterTest.java",
  "methodName" : "testSortDoubleArray",
  "sourceCode" : "@Test\r\nvoid testSortDoubleArray() {\r\n    final double[] array1 = { 2, 1 };\r\n    final double[] array2 = array1.clone();\r\n    Arrays.sort(array1);\r\n    assertArrayEquals(array1, ArraySorter.sort(array2));\r\n    assertNull(ArraySorter.sort((double[]) null));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ArraySorterTest.java",
  "methodName" : "testSortFloatArray",
  "sourceCode" : "@Test\r\nvoid testSortFloatArray() {\r\n    final float[] array1 = { 2, 1 };\r\n    final float[] array2 = array1.clone();\r\n    Arrays.sort(array1);\r\n    assertArrayEquals(array1, ArraySorter.sort(array2));\r\n    assertNull(ArraySorter.sort((float[]) null));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ArraySorterTest.java",
  "methodName" : "testSortIntArray",
  "sourceCode" : "@Test\r\nvoid testSortIntArray() {\r\n    final int[] array1 = { 2, 1 };\r\n    final int[] array2 = array1.clone();\r\n    Arrays.sort(array1);\r\n    assertArrayEquals(array1, ArraySorter.sort(array2));\r\n    assertNull(ArraySorter.sort((int[]) null));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ArraySorterTest.java",
  "methodName" : "testSortLongArray",
  "sourceCode" : "@Test\r\nvoid testSortLongArray() {\r\n    final long[] array1 = { 2, 1 };\r\n    final long[] array2 = array1.clone();\r\n    Arrays.sort(array1);\r\n    assertArrayEquals(array1, ArraySorter.sort(array2));\r\n    assertNull(ArraySorter.sort((long[]) null));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ArraySorterTest.java",
  "methodName" : "testSortObjects",
  "sourceCode" : "@Test\r\nvoid testSortObjects() {\r\n    final String[] array1 = ArrayUtils.toArray(\"foo\", \"bar\");\r\n    final String[] array2 = array1.clone();\r\n    Arrays.sort(array1);\r\n    assertArrayEquals(array1, ArraySorter.sort(array2));\r\n    assertNull(ArraySorter.sort((String[]) null));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ArraySorterTest.java",
  "methodName" : "testSortShortArray",
  "sourceCode" : "@Test\r\nvoid testSortShortArray() {\r\n    final short[] array1 = { 2, 1 };\r\n    final short[] array2 = array1.clone();\r\n    Arrays.sort(array1);\r\n    assertArrayEquals(array1, ArraySorter.sort(array2));\r\n    assertNull(ArraySorter.sort((short[]) null));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ArrayUtilsAddTest.java",
  "methodName" : "testAddFirstBoolean",
  "sourceCode" : "@Test\r\nvoid testAddFirstBoolean() {\r\n    boolean[] newArray;\r\n    newArray = ArrayUtils.addFirst(null, false);\r\n    assertArrayEquals(new boolean[] { false }, newArray);\r\n    assertEquals(Boolean.TYPE, newArray.getClass().getComponentType());\r\n    newArray = ArrayUtils.addFirst(null, true);\r\n    assertArrayEquals(new boolean[] { true }, newArray);\r\n    assertEquals(Boolean.TYPE, newArray.getClass().getComponentType());\r\n    final boolean[] array1 = { true, false, true };\r\n    newArray = ArrayUtils.addFirst(array1, false);\r\n    assertArrayEquals(new boolean[] { false, true, false, true }, newArray);\r\n    assertEquals(Boolean.TYPE, newArray.getClass().getComponentType());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ArrayUtilsAddTest.java",
  "methodName" : "testAddFirstByte",
  "sourceCode" : "@Test\r\nvoid testAddFirstByte() {\r\n    byte[] newArray;\r\n    newArray = ArrayUtils.addFirst((byte[]) null, (byte) 0);\r\n    assertArrayEquals(new byte[] { 0 }, newArray);\r\n    assertEquals(Byte.TYPE, newArray.getClass().getComponentType());\r\n    newArray = ArrayUtils.addFirst((byte[]) null, (byte) 1);\r\n    assertArrayEquals(new byte[] { 1 }, newArray);\r\n    assertEquals(Byte.TYPE, newArray.getClass().getComponentType());\r\n    final byte[] array1 = { 1, 2, 3 };\r\n    newArray = ArrayUtils.addFirst(array1, (byte) 0);\r\n    assertArrayEquals(new byte[] { 0, 1, 2, 3 }, newArray);\r\n    assertEquals(Byte.TYPE, newArray.getClass().getComponentType());\r\n    newArray = ArrayUtils.addFirst(array1, (byte) 4);\r\n    assertArrayEquals(new byte[] { 4, 1, 2, 3 }, newArray);\r\n    assertEquals(Byte.TYPE, newArray.getClass().getComponentType());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ArrayUtilsAddTest.java",
  "methodName" : "testAddFirstChar",
  "sourceCode" : "@Test\r\nvoid testAddFirstChar() {\r\n    char[] newArray;\r\n    newArray = ArrayUtils.addFirst((char[]) null, (char) 0);\r\n    assertArrayEquals(new char[] { 0 }, newArray);\r\n    assertEquals(Character.TYPE, newArray.getClass().getComponentType());\r\n    newArray = ArrayUtils.addFirst((char[]) null, (char) 1);\r\n    assertArrayEquals(new char[] { 1 }, newArray);\r\n    assertEquals(Character.TYPE, newArray.getClass().getComponentType());\r\n    final char[] array1 = { 1, 2, 3 };\r\n    newArray = ArrayUtils.addFirst(array1, (char) 0);\r\n    assertArrayEquals(new char[] { 0, 1, 2, 3 }, newArray);\r\n    assertEquals(Character.TYPE, newArray.getClass().getComponentType());\r\n    newArray = ArrayUtils.addFirst(array1, (char) 4);\r\n    assertArrayEquals(new char[] { 4, 1, 2, 3 }, newArray);\r\n    assertEquals(Character.TYPE, newArray.getClass().getComponentType());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ArrayUtilsAddTest.java",
  "methodName" : "testAddFirstDouble",
  "sourceCode" : "@Test\r\nvoid testAddFirstDouble() {\r\n    double[] newArray;\r\n    newArray = ArrayUtils.addFirst((double[]) null, 0);\r\n    assertArrayEquals(new double[] { 0 }, newArray);\r\n    assertEquals(Double.TYPE, newArray.getClass().getComponentType());\r\n    newArray = ArrayUtils.addFirst((double[]) null, 1);\r\n    assertArrayEquals(new double[] { 1 }, newArray);\r\n    assertEquals(Double.TYPE, newArray.getClass().getComponentType());\r\n    final double[] array1 = { 1, 2, 3 };\r\n    newArray = ArrayUtils.addFirst(array1, 0);\r\n    assertArrayEquals(new double[] { 0, 1, 2, 3 }, newArray);\r\n    assertEquals(Double.TYPE, newArray.getClass().getComponentType());\r\n    newArray = ArrayUtils.addFirst(array1, 4);\r\n    assertArrayEquals(new double[] { 4, 1, 2, 3 }, newArray);\r\n    assertEquals(Double.TYPE, newArray.getClass().getComponentType());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ArrayUtilsAddTest.java",
  "methodName" : "testAddFirstFloat",
  "sourceCode" : "@Test\r\nvoid testAddFirstFloat() {\r\n    float[] newArray;\r\n    newArray = ArrayUtils.addFirst((float[]) null, 0);\r\n    assertArrayEquals(new float[] { 0 }, newArray);\r\n    assertEquals(Float.TYPE, newArray.getClass().getComponentType());\r\n    newArray = ArrayUtils.addFirst((float[]) null, 1);\r\n    assertArrayEquals(new float[] { 1 }, newArray);\r\n    assertEquals(Float.TYPE, newArray.getClass().getComponentType());\r\n    final float[] array1 = { 1, 2, 3 };\r\n    newArray = ArrayUtils.addFirst(array1, 0);\r\n    assertArrayEquals(new float[] { 0, 1, 2, 3 }, newArray);\r\n    assertEquals(Float.TYPE, newArray.getClass().getComponentType());\r\n    newArray = ArrayUtils.addFirst(array1, 4);\r\n    assertArrayEquals(new float[] { 4, 1, 2, 3 }, newArray);\r\n    assertEquals(Float.TYPE, newArray.getClass().getComponentType());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ArrayUtilsAddTest.java",
  "methodName" : "testAddFirstInt",
  "sourceCode" : "@Test\r\nvoid testAddFirstInt() {\r\n    int[] newArray;\r\n    newArray = ArrayUtils.addFirst((int[]) null, 0);\r\n    assertArrayEquals(new int[] { 0 }, newArray);\r\n    assertEquals(Integer.TYPE, newArray.getClass().getComponentType());\r\n    newArray = ArrayUtils.addFirst((int[]) null, 1);\r\n    assertArrayEquals(new int[] { 1 }, newArray);\r\n    assertEquals(Integer.TYPE, newArray.getClass().getComponentType());\r\n    final int[] array1 = { 1, 2, 3 };\r\n    newArray = ArrayUtils.addFirst(array1, 0);\r\n    assertArrayEquals(new int[] { 0, 1, 2, 3 }, newArray);\r\n    assertEquals(Integer.TYPE, newArray.getClass().getComponentType());\r\n    newArray = ArrayUtils.addFirst(array1, 4);\r\n    assertArrayEquals(new int[] { 4, 1, 2, 3 }, newArray);\r\n    assertEquals(Integer.TYPE, newArray.getClass().getComponentType());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ArrayUtilsAddTest.java",
  "methodName" : "testAddFirstLong",
  "sourceCode" : "@Test\r\nvoid testAddFirstLong() {\r\n    long[] newArray;\r\n    newArray = ArrayUtils.addFirst((long[]) null, 0);\r\n    assertArrayEquals(new long[] { 0 }, newArray);\r\n    assertEquals(Long.TYPE, newArray.getClass().getComponentType());\r\n    newArray = ArrayUtils.addFirst((long[]) null, 1);\r\n    assertArrayEquals(new long[] { 1 }, newArray);\r\n    assertEquals(Long.TYPE, newArray.getClass().getComponentType());\r\n    final long[] array1 = { 1, 2, 3 };\r\n    newArray = ArrayUtils.addFirst(array1, 0);\r\n    assertArrayEquals(new long[] { 0, 1, 2, 3 }, newArray);\r\n    assertEquals(Long.TYPE, newArray.getClass().getComponentType());\r\n    newArray = ArrayUtils.addFirst(array1, 4);\r\n    assertArrayEquals(new long[] { 4, 1, 2, 3 }, newArray);\r\n    assertEquals(Long.TYPE, newArray.getClass().getComponentType());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ArrayUtilsAddTest.java",
  "methodName" : "testAddFirstObject",
  "sourceCode" : "@Test\r\nvoid testAddFirstObject() {\r\n    Object[] newArray;\r\n    // show that not casting is okay\r\n    newArray = ArrayUtils.add((Object[]) null, \"a\");\r\n    assertArrayEquals(new String[] { \"a\" }, newArray);\r\n    assertArrayEquals(new Object[] { \"a\" }, newArray);\r\n    assertEquals(String.class, newArray.getClass().getComponentType());\r\n    // show that not casting to Object[] is okay and will assume String based on \"a\"\r\n    final String[] newStringArray = ArrayUtils.add(null, \"a\");\r\n    assertArrayEquals(new String[] { \"a\" }, newStringArray);\r\n    assertArrayEquals(new Object[] { \"a\" }, newStringArray);\r\n    assertEquals(String.class, newStringArray.getClass().getComponentType());\r\n    final String[] stringArray1 = { \"a\", \"b\", \"c\" };\r\n    newArray = ArrayUtils.addFirst(stringArray1, null);\r\n    assertArrayEquals(new String[] { null, \"a\", \"b\", \"c\" }, newArray);\r\n    assertEquals(String.class, newArray.getClass().getComponentType());\r\n    newArray = ArrayUtils.addFirst(stringArray1, \"d\");\r\n    assertArrayEquals(new String[] { \"d\", \"a\", \"b\", \"c\" }, newArray);\r\n    assertEquals(String.class, newArray.getClass().getComponentType());\r\n    Number[] numberArray1 = { Integer.valueOf(1), Double.valueOf(2) };\r\n    newArray = ArrayUtils.addFirst(numberArray1, Float.valueOf(3));\r\n    assertArrayEquals(new Number[] { Float.valueOf(3), Integer.valueOf(1), Double.valueOf(2) }, newArray);\r\n    assertEquals(Number.class, newArray.getClass().getComponentType());\r\n    numberArray1 = null;\r\n    newArray = ArrayUtils.addFirst(numberArray1, Float.valueOf(3));\r\n    assertArrayEquals(new Float[] { Float.valueOf(3) }, newArray);\r\n    assertEquals(Float.class, newArray.getClass().getComponentType());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ArrayUtilsAddTest.java",
  "methodName" : "testAddFirstShort",
  "sourceCode" : "@Test\r\nvoid testAddFirstShort() {\r\n    short[] newArray;\r\n    newArray = ArrayUtils.addFirst((short[]) null, (short) 0);\r\n    assertArrayEquals(new short[] { 0 }, newArray);\r\n    assertEquals(Short.TYPE, newArray.getClass().getComponentType());\r\n    newArray = ArrayUtils.addFirst((short[]) null, (short) 1);\r\n    assertArrayEquals(new short[] { 1 }, newArray);\r\n    assertEquals(Short.TYPE, newArray.getClass().getComponentType());\r\n    final short[] array1 = { 1, 2, 3 };\r\n    newArray = ArrayUtils.addFirst(array1, (short) 0);\r\n    assertArrayEquals(new short[] { 0, 1, 2, 3 }, newArray);\r\n    assertEquals(Short.TYPE, newArray.getClass().getComponentType());\r\n    newArray = ArrayUtils.addFirst(array1, (short) 4);\r\n    assertArrayEquals(new short[] { 4, 1, 2, 3 }, newArray);\r\n    assertEquals(Short.TYPE, newArray.getClass().getComponentType());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ArrayUtilsAddTest.java",
  "methodName" : "testAddObjectArrayBoolean",
  "sourceCode" : "@Test\r\nvoid testAddObjectArrayBoolean() {\r\n    boolean[] newArray;\r\n    newArray = ArrayUtils.add(null, false);\r\n    assertArrayEquals(new boolean[] { false }, newArray);\r\n    assertEquals(Boolean.TYPE, newArray.getClass().getComponentType());\r\n    newArray = ArrayUtils.add(null, true);\r\n    assertArrayEquals(new boolean[] { true }, newArray);\r\n    assertEquals(Boolean.TYPE, newArray.getClass().getComponentType());\r\n    final boolean[] array1 = { true, false, true };\r\n    newArray = ArrayUtils.add(array1, false);\r\n    assertArrayEquals(new boolean[] { true, false, true, false }, newArray);\r\n    assertEquals(Boolean.TYPE, newArray.getClass().getComponentType());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ArrayUtilsAddTest.java",
  "methodName" : "testAddObjectArrayByte",
  "sourceCode" : "@Test\r\nvoid testAddObjectArrayByte() {\r\n    byte[] newArray;\r\n    newArray = ArrayUtils.add((byte[]) null, (byte) 0);\r\n    assertArrayEquals(new byte[] { 0 }, newArray);\r\n    assertEquals(Byte.TYPE, newArray.getClass().getComponentType());\r\n    newArray = ArrayUtils.add((byte[]) null, (byte) 1);\r\n    assertArrayEquals(new byte[] { 1 }, newArray);\r\n    assertEquals(Byte.TYPE, newArray.getClass().getComponentType());\r\n    final byte[] array1 = { 1, 2, 3 };\r\n    newArray = ArrayUtils.add(array1, (byte) 0);\r\n    assertArrayEquals(new byte[] { 1, 2, 3, 0 }, newArray);\r\n    assertEquals(Byte.TYPE, newArray.getClass().getComponentType());\r\n    newArray = ArrayUtils.add(array1, (byte) 4);\r\n    assertArrayEquals(new byte[] { 1, 2, 3, 4 }, newArray);\r\n    assertEquals(Byte.TYPE, newArray.getClass().getComponentType());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ArrayUtilsAddTest.java",
  "methodName" : "testAddObjectArrayChar",
  "sourceCode" : "@Test\r\nvoid testAddObjectArrayChar() {\r\n    char[] newArray;\r\n    newArray = ArrayUtils.add((char[]) null, (char) 0);\r\n    assertArrayEquals(new char[] { 0 }, newArray);\r\n    assertEquals(Character.TYPE, newArray.getClass().getComponentType());\r\n    newArray = ArrayUtils.add((char[]) null, (char) 1);\r\n    assertArrayEquals(new char[] { 1 }, newArray);\r\n    assertEquals(Character.TYPE, newArray.getClass().getComponentType());\r\n    final char[] array1 = { 1, 2, 3 };\r\n    newArray = ArrayUtils.add(array1, (char) 0);\r\n    assertArrayEquals(new char[] { 1, 2, 3, 0 }, newArray);\r\n    assertEquals(Character.TYPE, newArray.getClass().getComponentType());\r\n    newArray = ArrayUtils.add(array1, (char) 4);\r\n    assertArrayEquals(new char[] { 1, 2, 3, 4 }, newArray);\r\n    assertEquals(Character.TYPE, newArray.getClass().getComponentType());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ArrayUtilsAddTest.java",
  "methodName" : "testAddObjectArrayDouble",
  "sourceCode" : "@Test\r\nvoid testAddObjectArrayDouble() {\r\n    double[] newArray;\r\n    newArray = ArrayUtils.add((double[]) null, 0);\r\n    assertArrayEquals(new double[] { 0 }, newArray);\r\n    assertEquals(Double.TYPE, newArray.getClass().getComponentType());\r\n    newArray = ArrayUtils.add((double[]) null, 1);\r\n    assertArrayEquals(new double[] { 1 }, newArray);\r\n    assertEquals(Double.TYPE, newArray.getClass().getComponentType());\r\n    final double[] array1 = { 1, 2, 3 };\r\n    newArray = ArrayUtils.add(array1, 0);\r\n    assertArrayEquals(new double[] { 1, 2, 3, 0 }, newArray);\r\n    assertEquals(Double.TYPE, newArray.getClass().getComponentType());\r\n    newArray = ArrayUtils.add(array1, 4);\r\n    assertArrayEquals(new double[] { 1, 2, 3, 4 }, newArray);\r\n    assertEquals(Double.TYPE, newArray.getClass().getComponentType());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ArrayUtilsAddTest.java",
  "methodName" : "testAddObjectArrayFloat",
  "sourceCode" : "@Test\r\nvoid testAddObjectArrayFloat() {\r\n    float[] newArray;\r\n    newArray = ArrayUtils.add((float[]) null, 0);\r\n    assertArrayEquals(new float[] { 0 }, newArray);\r\n    assertEquals(Float.TYPE, newArray.getClass().getComponentType());\r\n    newArray = ArrayUtils.add((float[]) null, 1);\r\n    assertArrayEquals(new float[] { 1 }, newArray);\r\n    assertEquals(Float.TYPE, newArray.getClass().getComponentType());\r\n    final float[] array1 = { 1, 2, 3 };\r\n    newArray = ArrayUtils.add(array1, 0);\r\n    assertArrayEquals(new float[] { 1, 2, 3, 0 }, newArray);\r\n    assertEquals(Float.TYPE, newArray.getClass().getComponentType());\r\n    newArray = ArrayUtils.add(array1, 4);\r\n    assertArrayEquals(new float[] { 1, 2, 3, 4 }, newArray);\r\n    assertEquals(Float.TYPE, newArray.getClass().getComponentType());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ArrayUtilsAddTest.java",
  "methodName" : "testAddObjectArrayInt",
  "sourceCode" : "@Test\r\nvoid testAddObjectArrayInt() {\r\n    int[] newArray;\r\n    newArray = ArrayUtils.add((int[]) null, 0);\r\n    assertArrayEquals(new int[] { 0 }, newArray);\r\n    assertEquals(Integer.TYPE, newArray.getClass().getComponentType());\r\n    newArray = ArrayUtils.add((int[]) null, 1);\r\n    assertArrayEquals(new int[] { 1 }, newArray);\r\n    assertEquals(Integer.TYPE, newArray.getClass().getComponentType());\r\n    final int[] array1 = { 1, 2, 3 };\r\n    newArray = ArrayUtils.add(array1, 0);\r\n    assertArrayEquals(new int[] { 1, 2, 3, 0 }, newArray);\r\n    assertEquals(Integer.TYPE, newArray.getClass().getComponentType());\r\n    newArray = ArrayUtils.add(array1, 4);\r\n    assertArrayEquals(new int[] { 1, 2, 3, 4 }, newArray);\r\n    assertEquals(Integer.TYPE, newArray.getClass().getComponentType());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ArrayUtilsAddTest.java",
  "methodName" : "testAddObjectArrayLong",
  "sourceCode" : "@Test\r\nvoid testAddObjectArrayLong() {\r\n    long[] newArray;\r\n    newArray = ArrayUtils.add((long[]) null, 0);\r\n    assertArrayEquals(new long[] { 0 }, newArray);\r\n    assertEquals(Long.TYPE, newArray.getClass().getComponentType());\r\n    newArray = ArrayUtils.add((long[]) null, 1);\r\n    assertArrayEquals(new long[] { 1 }, newArray);\r\n    assertEquals(Long.TYPE, newArray.getClass().getComponentType());\r\n    final long[] array1 = { 1, 2, 3 };\r\n    newArray = ArrayUtils.add(array1, 0);\r\n    assertArrayEquals(new long[] { 1, 2, 3, 0 }, newArray);\r\n    assertEquals(Long.TYPE, newArray.getClass().getComponentType());\r\n    newArray = ArrayUtils.add(array1, 4);\r\n    assertArrayEquals(new long[] { 1, 2, 3, 4 }, newArray);\r\n    assertEquals(Long.TYPE, newArray.getClass().getComponentType());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ArrayUtilsAddTest.java",
  "methodName" : "testAddObjectArrayObject",
  "sourceCode" : "@Test\r\nvoid testAddObjectArrayObject() {\r\n    Object[] newArray;\r\n    // show that not casting is okay\r\n    newArray = ArrayUtils.add((Object[]) null, \"a\");\r\n    assertArrayEquals(new String[] { \"a\" }, newArray);\r\n    assertArrayEquals(new Object[] { \"a\" }, newArray);\r\n    assertEquals(String.class, newArray.getClass().getComponentType());\r\n    // show that not casting to Object[] is okay and will assume String based on \"a\"\r\n    final String[] newStringArray = ArrayUtils.add(null, \"a\");\r\n    assertArrayEquals(new String[] { \"a\" }, newStringArray);\r\n    assertArrayEquals(new Object[] { \"a\" }, newStringArray);\r\n    assertEquals(String.class, newStringArray.getClass().getComponentType());\r\n    final String[] stringArray1 = { \"a\", \"b\", \"c\" };\r\n    newArray = ArrayUtils.add(stringArray1, null);\r\n    assertArrayEquals(new String[] { \"a\", \"b\", \"c\", null }, newArray);\r\n    assertEquals(String.class, newArray.getClass().getComponentType());\r\n    newArray = ArrayUtils.add(stringArray1, \"d\");\r\n    assertArrayEquals(new String[] { \"a\", \"b\", \"c\", \"d\" }, newArray);\r\n    assertEquals(String.class, newArray.getClass().getComponentType());\r\n    Number[] numberArray1 = { Integer.valueOf(1), Double.valueOf(2) };\r\n    newArray = ArrayUtils.add(numberArray1, Float.valueOf(3));\r\n    assertArrayEquals(new Number[] { Integer.valueOf(1), Double.valueOf(2), Float.valueOf(3) }, newArray);\r\n    assertEquals(Number.class, newArray.getClass().getComponentType());\r\n    numberArray1 = null;\r\n    newArray = ArrayUtils.add(numberArray1, Float.valueOf(3));\r\n    assertArrayEquals(new Float[] { Float.valueOf(3) }, newArray);\r\n    assertEquals(Float.class, newArray.getClass().getComponentType());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ArrayUtilsAddTest.java",
  "methodName" : "testAddObjectArrayShort",
  "sourceCode" : "@Test\r\nvoid testAddObjectArrayShort() {\r\n    short[] newArray;\r\n    newArray = ArrayUtils.add((short[]) null, (short) 0);\r\n    assertArrayEquals(new short[] { 0 }, newArray);\r\n    assertEquals(Short.TYPE, newArray.getClass().getComponentType());\r\n    newArray = ArrayUtils.add((short[]) null, (short) 1);\r\n    assertArrayEquals(new short[] { 1 }, newArray);\r\n    assertEquals(Short.TYPE, newArray.getClass().getComponentType());\r\n    final short[] array1 = { 1, 2, 3 };\r\n    newArray = ArrayUtils.add(array1, (short) 0);\r\n    assertArrayEquals(new short[] { 1, 2, 3, 0 }, newArray);\r\n    assertEquals(Short.TYPE, newArray.getClass().getComponentType());\r\n    newArray = ArrayUtils.add(array1, (short) 4);\r\n    assertArrayEquals(new short[] { 1, 2, 3, 4 }, newArray);\r\n    assertEquals(Short.TYPE, newArray.getClass().getComponentType());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ArrayUtilsAddTest.java",
  "methodName" : "testAddObjectArrayToObjectArray",
  "sourceCode" : "@Test\r\nvoid testAddObjectArrayToObjectArray() {\r\n    assertNull(ArrayUtils.addAll(null, (Object[]) null));\r\n    Object[] newArray;\r\n    final String[] stringArray1 = { \"a\", \"b\", \"c\" };\r\n    final String[] stringArray2 = { \"1\", \"2\", \"3\" };\r\n    newArray = ArrayUtils.addAll(stringArray1, (String[]) null);\r\n    assertNotSame(stringArray1, newArray);\r\n    assertArrayEquals(stringArray1, newArray);\r\n    assertArrayEquals(new String[] { \"a\", \"b\", \"c\" }, newArray);\r\n    assertEquals(String.class, newArray.getClass().getComponentType());\r\n    newArray = ArrayUtils.addAll(null, stringArray2);\r\n    assertNotSame(stringArray2, newArray);\r\n    assertArrayEquals(stringArray2, newArray);\r\n    assertArrayEquals(new String[] { \"1\", \"2\", \"3\" }, newArray);\r\n    assertEquals(String.class, newArray.getClass().getComponentType());\r\n    newArray = ArrayUtils.addAll(stringArray1, stringArray2);\r\n    assertArrayEquals(new String[] { \"a\", \"b\", \"c\", \"1\", \"2\", \"3\" }, newArray);\r\n    assertEquals(String.class, newArray.getClass().getComponentType());\r\n    newArray = ArrayUtils.addAll(ArrayUtils.EMPTY_STRING_ARRAY, (String[]) null);\r\n    assertArrayEquals(ArrayUtils.EMPTY_STRING_ARRAY, newArray);\r\n    assertArrayEquals(new String[] {}, newArray);\r\n    assertEquals(String.class, newArray.getClass().getComponentType());\r\n    newArray = ArrayUtils.addAll(null, ArrayUtils.EMPTY_STRING_ARRAY);\r\n    assertArrayEquals(ArrayUtils.EMPTY_STRING_ARRAY, newArray);\r\n    assertArrayEquals(new String[] {}, newArray);\r\n    assertEquals(String.class, newArray.getClass().getComponentType());\r\n    newArray = ArrayUtils.addAll(ArrayUtils.EMPTY_STRING_ARRAY, ArrayUtils.EMPTY_STRING_ARRAY);\r\n    assertArrayEquals(ArrayUtils.EMPTY_STRING_ARRAY, newArray);\r\n    assertArrayEquals(new String[] {}, newArray);\r\n    assertEquals(String.class, newArray.getClass().getComponentType());\r\n    final String[] stringArrayNull = { null };\r\n    newArray = ArrayUtils.addAll(stringArrayNull, stringArrayNull);\r\n    assertArrayEquals(new String[] { null, null }, newArray);\r\n    assertEquals(String.class, newArray.getClass().getComponentType());\r\n    // boolean\r\n    assertArrayEquals(new boolean[] { true, false, false, true }, ArrayUtils.addAll(new boolean[] { true, false }, false, true));\r\n    assertArrayEquals(new boolean[] { false, true }, ArrayUtils.addAll(null, new boolean[] { false, true }));\r\n    assertArrayEquals(new boolean[] { true, false }, ArrayUtils.addAll(new boolean[] { true, false }, null));\r\n    // char\r\n    assertArrayEquals(new char[] { 'a', 'b', 'c', 'd' }, ArrayUtils.addAll(new char[] { 'a', 'b' }, 'c', 'd'));\r\n    assertArrayEquals(new char[] { 'c', 'd' }, ArrayUtils.addAll(null, new char[] { 'c', 'd' }));\r\n    assertArrayEquals(new char[] { 'a', 'b' }, ArrayUtils.addAll(new char[] { 'a', 'b' }, null));\r\n    // byte\r\n    assertArrayEquals(new byte[] { (byte) 0, (byte) 1, (byte) 2, (byte) 3 }, ArrayUtils.addAll(new byte[] { (byte) 0, (byte) 1 }, (byte) 2, (byte) 3));\r\n    assertArrayEquals(new byte[] { (byte) 2, (byte) 3 }, ArrayUtils.addAll(null, new byte[] { (byte) 2, (byte) 3 }));\r\n    assertArrayEquals(new byte[] { (byte) 0, (byte) 1 }, ArrayUtils.addAll(new byte[] { (byte) 0, (byte) 1 }, null));\r\n    // short\r\n    assertArrayEquals(new short[] { (short) 10, (short) 20, (short) 30, (short) 40 }, ArrayUtils.addAll(new short[] { (short) 10, (short) 20 }, (short) 30, (short) 40));\r\n    assertArrayEquals(new short[] { (short) 30, (short) 40 }, ArrayUtils.addAll(null, new short[] { (short) 30, (short) 40 }));\r\n    assertArrayEquals(new short[] { (short) 10, (short) 20 }, ArrayUtils.addAll(new short[] { (short) 10, (short) 20 }, null));\r\n    // int\r\n    assertArrayEquals(new int[] { 1, 1000, -1000, -1 }, ArrayUtils.addAll(new int[] { 1, 1000 }, -1000, -1));\r\n    assertArrayEquals(new int[] { -1000, -1 }, ArrayUtils.addAll(null, new int[] { -1000, -1 }));\r\n    assertArrayEquals(new int[] { 1, 1000 }, ArrayUtils.addAll(new int[] { 1, 1000 }, null));\r\n    // long\r\n    assertArrayEquals(new long[] { 1L, -1L, 1000L, -1000L }, ArrayUtils.addAll(new long[] { 1L, -1L }, 1000L, -1000L));\r\n    assertArrayEquals(new long[] { 1000L, -1000L }, ArrayUtils.addAll(null, new long[] { 1000L, -1000L }));\r\n    assertArrayEquals(new long[] { 1L, -1L }, ArrayUtils.addAll(new long[] { 1L, -1L }, null));\r\n    // float\r\n    assertArrayEquals(new float[] { 10.5f, 10.1f, 1.6f, 0.01f }, ArrayUtils.addAll(new float[] { 10.5f, 10.1f }, 1.6f, 0.01f));\r\n    assertArrayEquals(new float[] { 1.6f, 0.01f }, ArrayUtils.addAll(null, new float[] { 1.6f, 0.01f }));\r\n    assertArrayEquals(new float[] { 10.5f, 10.1f }, ArrayUtils.addAll(new float[] { 10.5f, 10.1f }, null));\r\n    // double\r\n    assertArrayEquals(new double[] { Math.PI, -Math.PI, 0, 9.99 }, ArrayUtils.addAll(new double[] { Math.PI, -Math.PI }, 0, 9.99));\r\n    assertArrayEquals(new double[] { 0, 9.99 }, ArrayUtils.addAll(null, new double[] { 0, 9.99 }));\r\n    assertArrayEquals(new double[] { Math.PI, -Math.PI }, ArrayUtils.addAll(new double[] { Math.PI, -Math.PI }, null));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ArrayUtilsAddTest.java",
  "methodName" : "testAddObjectAtIndex",
  "sourceCode" : "@SuppressWarnings(\"deprecation\")\r\n@Test\r\nvoid testAddObjectAtIndex() {\r\n    Object[] newArray;\r\n    newArray = ArrayUtils.add((Object[]) null, 0, \"a\");\r\n    assertArrayEquals(new String[] { \"a\" }, newArray);\r\n    assertArrayEquals(new Object[] { \"a\" }, newArray);\r\n    assertEquals(String.class, newArray.getClass().getComponentType());\r\n    final String[] stringArray1 = { \"a\", \"b\", \"c\" };\r\n    newArray = ArrayUtils.add(stringArray1, 0, null);\r\n    assertArrayEquals(new String[] { null, \"a\", \"b\", \"c\" }, newArray);\r\n    assertEquals(String.class, newArray.getClass().getComponentType());\r\n    newArray = ArrayUtils.add(stringArray1, 1, null);\r\n    assertArrayEquals(new String[] { \"a\", null, \"b\", \"c\" }, newArray);\r\n    assertEquals(String.class, newArray.getClass().getComponentType());\r\n    newArray = ArrayUtils.add(stringArray1, 3, null);\r\n    assertArrayEquals(new String[] { \"a\", \"b\", \"c\", null }, newArray);\r\n    assertEquals(String.class, newArray.getClass().getComponentType());\r\n    newArray = ArrayUtils.add(stringArray1, 3, \"d\");\r\n    assertArrayEquals(new String[] { \"a\", \"b\", \"c\", \"d\" }, newArray);\r\n    assertEquals(String.class, newArray.getClass().getComponentType());\r\n    assertEquals(String.class, newArray.getClass().getComponentType());\r\n    final Object[] o = { \"1\", \"2\", \"4\" };\r\n    final Object[] result = ArrayUtils.add(o, 2, \"3\");\r\n    final Object[] result2 = ArrayUtils.add(o, 3, \"5\");\r\n    assertNotNull(result);\r\n    assertEquals(4, result.length);\r\n    assertEquals(\"1\", result[0]);\r\n    assertEquals(\"2\", result[1]);\r\n    assertEquals(\"3\", result[2]);\r\n    assertEquals(\"4\", result[3]);\r\n    assertNotNull(result2);\r\n    assertEquals(4, result2.length);\r\n    assertEquals(\"1\", result2[0]);\r\n    assertEquals(\"2\", result2[1]);\r\n    assertEquals(\"4\", result2[2]);\r\n    assertEquals(\"5\", result2[3]);\r\n    // boolean tests\r\n    boolean[] booleanArray = ArrayUtils.add(null, 0, true);\r\n    assertArrayEquals(new boolean[] { true }, booleanArray);\r\n    IndexOutOfBoundsException e = assertIndexOutOfBoundsException(() -> ArrayUtils.add(null, -1, true));\r\n    assertEquals(\"Index: -1, Length: 0\", e.getMessage());\r\n    booleanArray = ArrayUtils.add(new boolean[] { true }, 0, false);\r\n    assertArrayEquals(new boolean[] { false, true }, booleanArray);\r\n    booleanArray = ArrayUtils.add(new boolean[] { false }, 1, true);\r\n    assertArrayEquals(new boolean[] { false, true }, booleanArray);\r\n    booleanArray = ArrayUtils.add(new boolean[] { true, false }, 1, true);\r\n    assertArrayEquals(new boolean[] { true, true, false }, booleanArray);\r\n    e = assertIndexOutOfBoundsException(() -> ArrayUtils.add(new boolean[] { true, false }, 4, true));\r\n    assertEquals(\"Index: 4, Length: 2\", e.getMessage());\r\n    e = assertIndexOutOfBoundsException(() -> ArrayUtils.add(new boolean[] { true, false }, -1, true));\r\n    assertEquals(\"Index: -1, Length: 2\", e.getMessage());\r\n    // char tests\r\n    char[] charArray = ArrayUtils.add((char[]) null, 0, 'a');\r\n    assertArrayEquals(new char[] { 'a' }, charArray);\r\n    e = assertIndexOutOfBoundsException(() -> ArrayUtils.add((char[]) null, -1, 'a'));\r\n    assertEquals(\"Index: -1, Length: 0\", e.getMessage());\r\n    charArray = ArrayUtils.add(new char[] { 'a' }, 0, 'b');\r\n    assertArrayEquals(new char[] { 'b', 'a' }, charArray);\r\n    charArray = ArrayUtils.add(new char[] { 'a', 'b' }, 0, 'c');\r\n    assertArrayEquals(new char[] { 'c', 'a', 'b' }, charArray);\r\n    charArray = ArrayUtils.add(new char[] { 'a', 'b' }, 1, 'k');\r\n    assertArrayEquals(new char[] { 'a', 'k', 'b' }, charArray);\r\n    charArray = ArrayUtils.add(new char[] { 'a', 'b', 'c' }, 1, 't');\r\n    assertArrayEquals(new char[] { 'a', 't', 'b', 'c' }, charArray);\r\n    e = assertIndexOutOfBoundsException(() -> ArrayUtils.add(new char[] { 'a', 'b' }, 4, 'c'));\r\n    assertEquals(\"Index: 4, Length: 2\", e.getMessage());\r\n    e = assertIndexOutOfBoundsException(() -> ArrayUtils.add(new char[] { 'a', 'b' }, -1, 'c'));\r\n    assertEquals(\"Index: -1, Length: 2\", e.getMessage());\r\n    // short tests\r\n    short[] shortArray = ArrayUtils.add(new short[] { 1 }, 0, (short) 2);\r\n    assertArrayEquals(new short[] { 2, 1 }, shortArray);\r\n    e = assertIndexOutOfBoundsException(() -> ArrayUtils.add((short[]) null, -1, (short) 2));\r\n    assertEquals(\"Index: -1, Length: 0\", e.getMessage());\r\n    shortArray = ArrayUtils.add(new short[] { 2, 6 }, 2, (short) 10);\r\n    assertArrayEquals(new short[] { 2, 6, 10 }, shortArray);\r\n    shortArray = ArrayUtils.add(new short[] { 2, 6 }, 0, (short) -4);\r\n    assertArrayEquals(new short[] { -4, 2, 6 }, shortArray);\r\n    shortArray = ArrayUtils.add(new short[] { 2, 6, 3 }, 2, (short) 1);\r\n    assertArrayEquals(new short[] { 2, 6, 1, 3 }, shortArray);\r\n    e = assertIndexOutOfBoundsException(() -> ArrayUtils.add(new short[] { 2, 6 }, 4, (short) 10));\r\n    assertEquals(\"Index: 4, Length: 2\", e.getMessage());\r\n    e = assertIndexOutOfBoundsException(() -> ArrayUtils.add(new short[] { 2, 6 }, -1, (short) 10));\r\n    assertEquals(\"Index: -1, Length: 2\", e.getMessage());\r\n    // byte tests\r\n    byte[] byteArray = ArrayUtils.add(new byte[] { 1 }, 0, (byte) 2);\r\n    assertArrayEquals(new byte[] { 2, 1 }, byteArray);\r\n    e = assertIndexOutOfBoundsException(() -> ArrayUtils.add((byte[]) null, -1, (byte) 2));\r\n    assertEquals(\"Index: -1, Length: 0\", e.getMessage());\r\n    byteArray = ArrayUtils.add(new byte[] { 2, 6 }, 2, (byte) 3);\r\n    assertArrayEquals(new byte[] { 2, 6, 3 }, byteArray);\r\n    byteArray = ArrayUtils.add(new byte[] { 2, 6 }, 0, (byte) 1);\r\n    assertArrayEquals(new byte[] { 1, 2, 6 }, byteArray);\r\n    byteArray = ArrayUtils.add(new byte[] { 2, 6, 3 }, 2, (byte) 1);\r\n    assertArrayEquals(new byte[] { 2, 6, 1, 3 }, byteArray);\r\n    e = assertIndexOutOfBoundsException(() -> ArrayUtils.add(new byte[] { 2, 6 }, 4, (byte) 3));\r\n    assertEquals(\"Index: 4, Length: 2\", e.getMessage());\r\n    e = assertIndexOutOfBoundsException(() -> ArrayUtils.add(new byte[] { 2, 6 }, -1, (byte) 3));\r\n    assertEquals(\"Index: -1, Length: 2\", e.getMessage());\r\n    // int tests\r\n    int[] intArray = ArrayUtils.add(new int[] { 1 }, 0, 2);\r\n    assertArrayEquals(new int[] { 2, 1 }, intArray);\r\n    e = assertIndexOutOfBoundsException(() -> ArrayUtils.add((int[]) null, -1, 2));\r\n    assertEquals(\"Index: -1, Length: 0\", e.getMessage());\r\n    intArray = ArrayUtils.add(new int[] { 2, 6 }, 2, 10);\r\n    assertArrayEquals(new int[] { 2, 6, 10 }, intArray);\r\n    intArray = ArrayUtils.add(new int[] { 2, 6 }, 0, -4);\r\n    assertArrayEquals(new int[] { -4, 2, 6 }, intArray);\r\n    intArray = ArrayUtils.add(new int[] { 2, 6, 3 }, 2, 1);\r\n    assertArrayEquals(new int[] { 2, 6, 1, 3 }, intArray);\r\n    e = assertIndexOutOfBoundsException(() -> ArrayUtils.add(new int[] { 2, 6 }, 4, 10));\r\n    assertEquals(\"Index: 4, Length: 2\", e.getMessage());\r\n    e = assertIndexOutOfBoundsException(() -> ArrayUtils.add(new int[] { 2, 6 }, -1, 10));\r\n    assertEquals(\"Index: -1, Length: 2\", e.getMessage());\r\n    // long tests\r\n    long[] longArray = ArrayUtils.add(new long[] { 1L }, 0, 2L);\r\n    assertArrayEquals(new long[] { 2L, 1L }, longArray);\r\n    e = assertIndexOutOfBoundsException(() -> ArrayUtils.add((long[]) null, -1, 2L));\r\n    assertEquals(\"Index: -1, Length: 0\", e.getMessage());\r\n    longArray = ArrayUtils.add(new long[] { 2L, 6L }, 2, 10L);\r\n    assertArrayEquals(new long[] { 2L, 6L, 10L }, longArray);\r\n    longArray = ArrayUtils.add(new long[] { 2L, 6L }, 0, -4L);\r\n    assertArrayEquals(new long[] { -4L, 2L, 6L }, longArray);\r\n    longArray = ArrayUtils.add(new long[] { 2L, 6L, 3L }, 2, 1L);\r\n    assertArrayEquals(new long[] { 2L, 6L, 1L, 3L }, longArray);\r\n    e = assertIndexOutOfBoundsException(() -> ArrayUtils.add(new long[] { 2L, 6L }, 4, 10L));\r\n    assertEquals(\"Index: 4, Length: 2\", e.getMessage());\r\n    e = assertIndexOutOfBoundsException(() -> ArrayUtils.add(new long[] { 2L, 6L }, -1, 10L));\r\n    assertEquals(\"Index: -1, Length: 2\", e.getMessage());\r\n    // float tests\r\n    float[] floatArray = ArrayUtils.add(new float[] { 1.1f }, 0, 2.2f);\r\n    assertArrayEquals(new float[] { 2.2f, 1.1f }, floatArray);\r\n    e = assertIndexOutOfBoundsException(() -> ArrayUtils.add((float[]) null, -1, 2.2f));\r\n    assertEquals(\"Index: -1, Length: 0\", e.getMessage());\r\n    floatArray = ArrayUtils.add(new float[] { 2.3f, 6.4f }, 2, 10.5f);\r\n    assertArrayEquals(new float[] { 2.3f, 6.4f, 10.5f }, floatArray);\r\n    floatArray = ArrayUtils.add(new float[] { 2.6f, 6.7f }, 0, -4.8f);\r\n    assertArrayEquals(new float[] { -4.8f, 2.6f, 6.7f }, floatArray);\r\n    floatArray = ArrayUtils.add(new float[] { 2.9f, 6.0f, 0.3f }, 2, 1.0f);\r\n    assertArrayEquals(new float[] { 2.9f, 6.0f, 1.0f, 0.3f }, floatArray);\r\n    e = assertIndexOutOfBoundsException(() -> ArrayUtils.add(new float[] { 2.3f, 6.4f }, 4, 10.5f));\r\n    assertEquals(\"Index: 4, Length: 2\", e.getMessage());\r\n    e = assertIndexOutOfBoundsException(() -> ArrayUtils.add(new float[] { 2.3f, 6.4f }, -1, 10.5f));\r\n    assertEquals(\"Index: -1, Length: 2\", e.getMessage());\r\n    // double tests\r\n    double[] doubleArray = ArrayUtils.add(new double[] { 1.1 }, 0, 2.2);\r\n    assertArrayEquals(new double[] { 2.2, 1.1 }, doubleArray);\r\n    e = assertIndexOutOfBoundsException(() -> ArrayUtils.add(null, -1, 2.2));\r\n    assertEquals(\"Index: -1, Length: 0\", e.getMessage());\r\n    doubleArray = ArrayUtils.add(new double[] { 2.3, 6.4 }, 2, 10.5);\r\n    assertArrayEquals(new double[] { 2.3, 6.4, 10.5 }, doubleArray);\r\n    doubleArray = ArrayUtils.add(new double[] { 2.6, 6.7 }, 0, -4.8);\r\n    assertArrayEquals(new double[] { -4.8, 2.6, 6.7 }, doubleArray);\r\n    doubleArray = ArrayUtils.add(new double[] { 2.9, 6.0, 0.3 }, 2, 1.0);\r\n    assertArrayEquals(new double[] { 2.9, 6.0, 1.0, 0.3 }, doubleArray);\r\n    e = assertIndexOutOfBoundsException(() -> ArrayUtils.add(new double[] { 2.3, 6.4 }, 4, 10.5));\r\n    assertEquals(\"Index: 4, Length: 2\", e.getMessage());\r\n    e = assertIndexOutOfBoundsException(() -> ArrayUtils.add(new double[] { 2.3, 6.4 }, -1, 10.5));\r\n    assertEquals(\"Index: -1, Length: 2\", e.getMessage());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ArrayUtilsAddTest.java",
  "methodName" : "testJira567",
  "sourceCode" : "@Test\r\nvoid testJira567() {\r\n    final Number[] n;\r\n    // Valid array construction\r\n    n = ArrayUtils.addAll(new Number[] { Integer.valueOf(1) }, new Long[] { Long.valueOf(2) });\r\n    assertEquals(2, n.length);\r\n    assertEquals(Number.class, n.getClass().getComponentType());\r\n    // Invalid - can't store Long in Integer array\r\n    assertIllegalArgumentException(() -> ArrayUtils.addAll(new Integer[] { Integer.valueOf(1) }, new Long[] { Long.valueOf(2) }));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ArrayUtilsAddTest.java",
  "methodName" : "testLANG571",
  "sourceCode" : "@Test\r\n@SuppressWarnings(\"deprecation\")\r\nvoid testLANG571() {\r\n    final String[] stringArray = null;\r\n    final String aString = null;\r\n    assertIllegalArgumentException(() -> ArrayUtils.add(stringArray, aString));\r\n    assertIllegalArgumentException(() -> ArrayUtils.add(stringArray, 0, aString));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ArrayUtilsInsertTest.java",
  "methodName" : "testInsertBooleans",
  "sourceCode" : "@Test\r\nvoid testInsertBooleans() {\r\n    final boolean[] array = { true, false, true };\r\n    final boolean[] values = { false, true, false };\r\n    final boolean[] result = ArrayUtils.insert(42, array, null);\r\n    assertArrayEquals(array, result);\r\n    assertNotSame(array, result);\r\n    assertNull(ArrayUtils.insert(42, null, array));\r\n    assertArrayEquals(new boolean[0], ArrayUtils.insert(0, new boolean[0], null));\r\n    assertNull(ArrayUtils.insert(42, (boolean[]) null, null));\r\n    assertIndexOutOfBoundsException(() -> ArrayUtils.insert(-1, array, array));\r\n    assertIndexOutOfBoundsException(() -> ArrayUtils.insert(array.length + 1, array, array));\r\n    assertArrayEquals(new boolean[] { false, true, false, true }, ArrayUtils.insert(0, array, false));\r\n    assertArrayEquals(new boolean[] { true, false, false, true }, ArrayUtils.insert(1, array, false));\r\n    assertArrayEquals(new boolean[] { true, false, true, false }, ArrayUtils.insert(array.length, array, false));\r\n    assertArrayEquals(new boolean[] { false, true, false, true, false, true }, ArrayUtils.insert(0, array, values));\r\n    assertArrayEquals(new boolean[] { true, false, true, false, false, true }, ArrayUtils.insert(1, array, values));\r\n    assertArrayEquals(new boolean[] { true, false, true, false, true, false }, ArrayUtils.insert(array.length, array, values));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ArrayUtilsInsertTest.java",
  "methodName" : "testInsertBytes",
  "sourceCode" : "@Test\r\nvoid testInsertBytes() {\r\n    final byte[] array = { 1, 2, 3 };\r\n    final byte[] values = { 4, 5, 6 };\r\n    final byte[] result = ArrayUtils.insert(42, array, null);\r\n    assertArrayEquals(array, result);\r\n    assertNotSame(array, result);\r\n    assertNull(ArrayUtils.insert(42, null, array));\r\n    assertArrayEquals(new byte[0], ArrayUtils.insert(0, new byte[0], null));\r\n    assertNull(ArrayUtils.insert(42, (byte[]) null, null));\r\n    assertIndexOutOfBoundsException(() -> ArrayUtils.insert(-1, array, array));\r\n    assertIndexOutOfBoundsException(() -> ArrayUtils.insert(array.length + 1, array, array));\r\n    assertArrayEquals(new byte[] { 0, 1, 2, 3 }, ArrayUtils.insert(0, array, (byte) 0));\r\n    assertArrayEquals(new byte[] { 1, 0, 2, 3 }, ArrayUtils.insert(1, array, (byte) 0));\r\n    assertArrayEquals(new byte[] { 1, 2, 3, 0 }, ArrayUtils.insert(array.length, array, (byte) 0));\r\n    assertArrayEquals(new byte[] { 4, 5, 6, 1, 2, 3 }, ArrayUtils.insert(0, array, values));\r\n    assertArrayEquals(new byte[] { 1, 4, 5, 6, 2, 3 }, ArrayUtils.insert(1, array, values));\r\n    assertArrayEquals(new byte[] { 1, 2, 3, 4, 5, 6 }, ArrayUtils.insert(array.length, array, values));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ArrayUtilsInsertTest.java",
  "methodName" : "testInsertChars",
  "sourceCode" : "@Test\r\nvoid testInsertChars() {\r\n    final char[] array = { 'a', 'b', 'c' };\r\n    final char[] values = { 'd', 'e', 'f' };\r\n    final char[] result = ArrayUtils.insert(42, array, null);\r\n    assertArrayEquals(array, result);\r\n    assertNotSame(array, result);\r\n    assertNull(ArrayUtils.insert(42, null, array));\r\n    assertArrayEquals(new char[0], ArrayUtils.insert(0, new char[0], null));\r\n    assertNull(ArrayUtils.insert(42, (char[]) null, null));\r\n    assertIndexOutOfBoundsException(() -> ArrayUtils.insert(-1, array, array));\r\n    assertIndexOutOfBoundsException(() -> ArrayUtils.insert(array.length + 1, array, array));\r\n    assertArrayEquals(new char[] { 'z', 'a', 'b', 'c' }, ArrayUtils.insert(0, array, 'z'));\r\n    assertArrayEquals(new char[] { 'a', 'z', 'b', 'c' }, ArrayUtils.insert(1, array, 'z'));\r\n    assertArrayEquals(new char[] { 'a', 'b', 'c', 'z' }, ArrayUtils.insert(array.length, array, 'z'));\r\n    assertArrayEquals(new char[] { 'd', 'e', 'f', 'a', 'b', 'c' }, ArrayUtils.insert(0, array, values));\r\n    assertArrayEquals(new char[] { 'a', 'd', 'e', 'f', 'b', 'c' }, ArrayUtils.insert(1, array, values));\r\n    assertArrayEquals(new char[] { 'a', 'b', 'c', 'd', 'e', 'f' }, ArrayUtils.insert(array.length, array, values));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ArrayUtilsInsertTest.java",
  "methodName" : "testInsertDoubles",
  "sourceCode" : "@Test\r\nvoid testInsertDoubles() {\r\n    final double[] array = { 1, 2, 3 };\r\n    final double[] values = { 4, 5, 6 };\r\n    final double delta = 0.000001;\r\n    final double[] result = ArrayUtils.insert(42, array, null);\r\n    assertArrayEquals(array, result, delta);\r\n    assertNotSame(array, result);\r\n    assertNull(ArrayUtils.insert(42, null, array));\r\n    assertArrayEquals(new double[0], ArrayUtils.insert(0, new double[0], null), delta);\r\n    assertNull(ArrayUtils.insert(42, (double[]) null, null));\r\n    assertIndexOutOfBoundsException(() -> ArrayUtils.insert(-1, array, array));\r\n    assertIndexOutOfBoundsException(() -> ArrayUtils.insert(array.length + 1, array, array));\r\n    assertArrayEquals(new double[] { 0, 1, 2, 3 }, ArrayUtils.insert(0, array, 0), delta);\r\n    assertArrayEquals(new double[] { 1, 0, 2, 3 }, ArrayUtils.insert(1, array, 0), delta);\r\n    assertArrayEquals(new double[] { 1, 2, 3, 0 }, ArrayUtils.insert(array.length, array, 0), delta);\r\n    assertArrayEquals(new double[] { 4, 5, 6, 1, 2, 3 }, ArrayUtils.insert(0, array, values), delta);\r\n    assertArrayEquals(new double[] { 1, 4, 5, 6, 2, 3 }, ArrayUtils.insert(1, array, values), delta);\r\n    assertArrayEquals(new double[] { 1, 2, 3, 4, 5, 6 }, ArrayUtils.insert(array.length, array, values), delta);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ArrayUtilsInsertTest.java",
  "methodName" : "testInsertFloats",
  "sourceCode" : "@Test\r\nvoid testInsertFloats() {\r\n    final float[] array = { 1, 2, 3 };\r\n    final float[] values = { 4, 5, 6 };\r\n    final float delta = 0.000001f;\r\n    final float[] result = ArrayUtils.insert(42, array, null);\r\n    assertArrayEquals(array, result, delta);\r\n    assertNotSame(array, result);\r\n    assertNull(ArrayUtils.insert(42, null, array));\r\n    assertArrayEquals(new float[0], ArrayUtils.insert(0, new float[0], null), delta);\r\n    assertNull(ArrayUtils.insert(42, (float[]) null, null));\r\n    assertIndexOutOfBoundsException(() -> ArrayUtils.insert(-1, array, array));\r\n    assertIndexOutOfBoundsException(() -> ArrayUtils.insert(array.length + 1, array, array));\r\n    assertArrayEquals(new float[] { 0, 1, 2, 3 }, ArrayUtils.insert(0, array, 0), delta);\r\n    assertArrayEquals(new float[] { 1, 0, 2, 3 }, ArrayUtils.insert(1, array, 0), delta);\r\n    assertArrayEquals(new float[] { 1, 2, 3, 0 }, ArrayUtils.insert(array.length, array, 0), delta);\r\n    assertArrayEquals(new float[] { 4, 5, 6, 1, 2, 3 }, ArrayUtils.insert(0, array, values), delta);\r\n    assertArrayEquals(new float[] { 1, 4, 5, 6, 2, 3 }, ArrayUtils.insert(1, array, values), delta);\r\n    assertArrayEquals(new float[] { 1, 2, 3, 4, 5, 6 }, ArrayUtils.insert(array.length, array, values), delta);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ArrayUtilsInsertTest.java",
  "methodName" : "testInsertGenericArray",
  "sourceCode" : "@Test\r\nvoid testInsertGenericArray() {\r\n    final String[] array = { \"a\", \"b\", \"c\" };\r\n    final String[] values = { \"d\", \"e\", \"f\" };\r\n    final String[] result = ArrayUtils.insert(42, array, (String[]) null);\r\n    assertArrayEquals(array, result);\r\n    assertNotSame(array, result);\r\n    assertNull(ArrayUtils.insert(42, null, array));\r\n    assertArrayEquals(new String[0], ArrayUtils.insert(0, new String[0], (String[]) null));\r\n    assertNull(ArrayUtils.insert(42, null, (String[]) null));\r\n    assertIndexOutOfBoundsException(() -> ArrayUtils.insert(-1, array, array));\r\n    assertIndexOutOfBoundsException(() -> ArrayUtils.insert(array.length + 1, array, array));\r\n    assertArrayEquals(new String[] { \"z\", \"a\", \"b\", \"c\" }, ArrayUtils.insert(0, array, \"z\"));\r\n    assertArrayEquals(new String[] { \"a\", \"z\", \"b\", \"c\" }, ArrayUtils.insert(1, array, \"z\"));\r\n    assertArrayEquals(new String[] { \"a\", \"b\", \"c\", \"z\" }, ArrayUtils.insert(array.length, array, \"z\"));\r\n    assertArrayEquals(new String[] { \"d\", \"e\", \"f\", \"a\", \"b\", \"c\" }, ArrayUtils.insert(0, array, values));\r\n    assertArrayEquals(new String[] { \"a\", \"d\", \"e\", \"f\", \"b\", \"c\" }, ArrayUtils.insert(1, array, values));\r\n    assertArrayEquals(new String[] { \"a\", \"b\", \"c\", \"d\", \"e\", \"f\" }, ArrayUtils.insert(array.length, array, values));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ArrayUtilsInsertTest.java",
  "methodName" : "testInsertInts",
  "sourceCode" : "@Test\r\nvoid testInsertInts() {\r\n    final int[] array = { 1, 2, 3 };\r\n    final int[] values = { 4, 5, 6 };\r\n    final int[] result = ArrayUtils.insert(42, array, null);\r\n    assertArrayEquals(array, result);\r\n    assertNotSame(array, result);\r\n    assertNull(ArrayUtils.insert(42, null, array));\r\n    assertArrayEquals(new int[0], ArrayUtils.insert(0, new int[0], null));\r\n    assertNull(ArrayUtils.insert(42, (int[]) null, null));\r\n    assertIndexOutOfBoundsException(() -> ArrayUtils.insert(-1, array, array));\r\n    assertIndexOutOfBoundsException(() -> ArrayUtils.insert(array.length + 1, array, array));\r\n    assertArrayEquals(new int[] { 0, 1, 2, 3 }, ArrayUtils.insert(0, array, 0));\r\n    assertArrayEquals(new int[] { 1, 0, 2, 3 }, ArrayUtils.insert(1, array, 0));\r\n    assertArrayEquals(new int[] { 1, 2, 3, 0 }, ArrayUtils.insert(array.length, array, 0));\r\n    assertArrayEquals(new int[] { 4, 5, 6, 1, 2, 3 }, ArrayUtils.insert(0, array, values));\r\n    assertArrayEquals(new int[] { 1, 4, 5, 6, 2, 3 }, ArrayUtils.insert(1, array, values));\r\n    assertArrayEquals(new int[] { 1, 2, 3, 4, 5, 6 }, ArrayUtils.insert(array.length, array, values));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ArrayUtilsInsertTest.java",
  "methodName" : "testInsertLongs",
  "sourceCode" : "@Test\r\nvoid testInsertLongs() {\r\n    final long[] array = { 1, 2, 3 };\r\n    final long[] values = { 4, 5, 6 };\r\n    final long[] result = ArrayUtils.insert(42, array, null);\r\n    assertArrayEquals(array, result);\r\n    assertNotSame(array, result);\r\n    assertNull(ArrayUtils.insert(42, null, array));\r\n    assertArrayEquals(new long[0], ArrayUtils.insert(0, new long[0], null));\r\n    assertNull(ArrayUtils.insert(42, (long[]) null, null));\r\n    assertIndexOutOfBoundsException(() -> ArrayUtils.insert(-1, array, array));\r\n    assertIndexOutOfBoundsException(() -> ArrayUtils.insert(array.length + 1, array, array));\r\n    assertArrayEquals(new long[] { 0, 1, 2, 3 }, ArrayUtils.insert(0, array, 0));\r\n    assertArrayEquals(new long[] { 1, 0, 2, 3 }, ArrayUtils.insert(1, array, 0));\r\n    assertArrayEquals(new long[] { 1, 2, 3, 0 }, ArrayUtils.insert(array.length, array, 0));\r\n    assertArrayEquals(new long[] { 4, 5, 6, 1, 2, 3 }, ArrayUtils.insert(0, array, values));\r\n    assertArrayEquals(new long[] { 1, 4, 5, 6, 2, 3 }, ArrayUtils.insert(1, array, values));\r\n    assertArrayEquals(new long[] { 1, 2, 3, 4, 5, 6 }, ArrayUtils.insert(array.length, array, values));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ArrayUtilsInsertTest.java",
  "methodName" : "testInsertShorts",
  "sourceCode" : "@Test\r\nvoid testInsertShorts() {\r\n    final short[] array = { 1, 2, 3 };\r\n    final short[] values = { 4, 5, 6 };\r\n    final short[] result = ArrayUtils.insert(42, array, null);\r\n    assertArrayEquals(array, result);\r\n    assertNotSame(array, result);\r\n    assertNull(ArrayUtils.insert(42, null, array));\r\n    assertArrayEquals(new short[0], ArrayUtils.insert(0, new short[0], null));\r\n    assertNull(ArrayUtils.insert(42, (short[]) null, null));\r\n    assertIndexOutOfBoundsException(() -> ArrayUtils.insert(-1, array, array));\r\n    assertIndexOutOfBoundsException(() -> ArrayUtils.insert(array.length + 1, array, array));\r\n    assertArrayEquals(new short[] { 0, 1, 2, 3 }, ArrayUtils.insert(0, array, (short) 0));\r\n    assertArrayEquals(new short[] { 1, 0, 2, 3 }, ArrayUtils.insert(1, array, (short) 0));\r\n    assertArrayEquals(new short[] { 1, 2, 3, 0 }, ArrayUtils.insert(array.length, array, (short) 0));\r\n    assertArrayEquals(new short[] { 4, 5, 6, 1, 2, 3 }, ArrayUtils.insert(0, array, values));\r\n    assertArrayEquals(new short[] { 1, 4, 5, 6, 2, 3 }, ArrayUtils.insert(1, array, values));\r\n    assertArrayEquals(new short[] { 1, 2, 3, 4, 5, 6 }, ArrayUtils.insert(array.length, array, values));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ArrayUtilsRemoveMultipleTest.java",
  "methodName" : "testRemoveAllBooleanArray",
  "sourceCode" : "@Test\r\nvoid testRemoveAllBooleanArray() {\r\n    boolean[] array;\r\n    array = ArrayUtils.removeAll(new boolean[] { true }, 0);\r\n    assertArrayEquals(ArrayUtils.EMPTY_BOOLEAN_ARRAY, array);\r\n    assertEquals(Boolean.TYPE, array.getClass().getComponentType());\r\n    array = ArrayUtils.removeAll(new boolean[] { true, false }, 0);\r\n    assertArrayEquals(new boolean[] { false }, array);\r\n    assertEquals(Boolean.TYPE, array.getClass().getComponentType());\r\n    array = ArrayUtils.removeAll(new boolean[] { true, false }, 1);\r\n    assertArrayEquals(new boolean[] { true }, array);\r\n    assertEquals(Boolean.TYPE, array.getClass().getComponentType());\r\n    array = ArrayUtils.removeAll(new boolean[] { true, false, true }, 1);\r\n    assertArrayEquals(new boolean[] { true, true }, array);\r\n    assertEquals(Boolean.TYPE, array.getClass().getComponentType());\r\n    array = ArrayUtils.removeAll(new boolean[] { true, false }, 0, 1);\r\n    assertArrayEquals(ArrayUtils.EMPTY_BOOLEAN_ARRAY, array);\r\n    assertEquals(Boolean.TYPE, array.getClass().getComponentType());\r\n    array = ArrayUtils.removeAll(new boolean[] { true, false, false }, 0, 1);\r\n    assertArrayEquals(new boolean[] { false }, array);\r\n    assertEquals(Boolean.TYPE, array.getClass().getComponentType());\r\n    array = ArrayUtils.removeAll(new boolean[] { true, false, false }, 0, 2);\r\n    assertArrayEquals(new boolean[] { false }, array);\r\n    assertEquals(Boolean.TYPE, array.getClass().getComponentType());\r\n    array = ArrayUtils.removeAll(new boolean[] { true, false, false }, 1, 2);\r\n    assertArrayEquals(new boolean[] { true }, array);\r\n    assertEquals(Boolean.TYPE, array.getClass().getComponentType());\r\n    array = ArrayUtils.removeAll(new boolean[] { true, false, true, false, true }, 0, 2, 4);\r\n    assertArrayEquals(new boolean[] { false, false }, array);\r\n    assertEquals(Boolean.TYPE, array.getClass().getComponentType());\r\n    array = ArrayUtils.removeAll(new boolean[] { true, false, true, false, true }, 1, 3);\r\n    assertArrayEquals(new boolean[] { true, true, true }, array);\r\n    assertEquals(Boolean.TYPE, array.getClass().getComponentType());\r\n    array = ArrayUtils.removeAll(new boolean[] { true, false, true, false, true }, 1, 3, 4);\r\n    assertArrayEquals(new boolean[] { true, true }, array);\r\n    assertEquals(Boolean.TYPE, array.getClass().getComponentType());\r\n    array = ArrayUtils.removeAll(new boolean[] { true, false, true, false, true, false, true }, 0, 2, 4, 6);\r\n    assertArrayEquals(new boolean[] { false, false, false }, array);\r\n    assertEquals(Boolean.TYPE, array.getClass().getComponentType());\r\n    array = ArrayUtils.removeAll(new boolean[] { true, false, true, false, true, false, true }, 1, 3, 5);\r\n    assertArrayEquals(new boolean[] { true, true, true, true }, array);\r\n    assertEquals(Boolean.TYPE, array.getClass().getComponentType());\r\n    array = ArrayUtils.removeAll(new boolean[] { true, false, true, false, true, false, true }, 0, 1, 2);\r\n    assertArrayEquals(new boolean[] { false, true, false, true }, array);\r\n    assertEquals(Boolean.TYPE, array.getClass().getComponentType());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ArrayUtilsRemoveMultipleTest.java",
  "methodName" : "testRemoveAllBooleanArrayNegativeIndex",
  "sourceCode" : "@Test\r\nvoid testRemoveAllBooleanArrayNegativeIndex() {\r\n    assertIndexOutOfBoundsException(() -> ArrayUtils.removeAll(new boolean[] { true, false }, -1));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ArrayUtilsRemoveMultipleTest.java",
  "methodName" : "testRemoveAllBooleanArrayOutOfBoundsIndex",
  "sourceCode" : "@Test\r\nvoid testRemoveAllBooleanArrayOutOfBoundsIndex() {\r\n    assertIndexOutOfBoundsException(() -> ArrayUtils.removeAll(new boolean[] { true, false }, 2));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ArrayUtilsRemoveMultipleTest.java",
  "methodName" : "testRemoveAllBooleanArrayRemoveNone",
  "sourceCode" : "@Test\r\nvoid testRemoveAllBooleanArrayRemoveNone() {\r\n    final boolean[] array1 = { true, false };\r\n    final boolean[] array2 = ArrayUtils.removeAll(array1);\r\n    assertNotSame(array1, array2);\r\n    assertArrayEquals(array1, array2);\r\n    assertEquals(boolean.class, array2.getClass().getComponentType());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ArrayUtilsRemoveMultipleTest.java",
  "methodName" : "testRemoveAllByteArray",
  "sourceCode" : "@Test\r\nvoid testRemoveAllByteArray() {\r\n    byte[] array;\r\n    array = ArrayUtils.removeAll(new byte[] { 1 }, 0);\r\n    assertArrayEquals(ArrayUtils.EMPTY_BYTE_ARRAY, array);\r\n    assertEquals(Byte.TYPE, array.getClass().getComponentType());\r\n    array = ArrayUtils.removeAll(new byte[] { 1, 2 }, 0);\r\n    assertArrayEquals(new byte[] { 2 }, array);\r\n    assertEquals(Byte.TYPE, array.getClass().getComponentType());\r\n    array = ArrayUtils.removeAll(new byte[] { 1, 2 }, 1);\r\n    assertArrayEquals(new byte[] { 1 }, array);\r\n    assertEquals(Byte.TYPE, array.getClass().getComponentType());\r\n    array = ArrayUtils.removeAll(new byte[] { 1, 2, 1 }, 1);\r\n    assertArrayEquals(new byte[] { 1, 1 }, array);\r\n    assertEquals(Byte.TYPE, array.getClass().getComponentType());\r\n    array = ArrayUtils.removeAll(new byte[] { 1, 2 }, 0, 1);\r\n    assertArrayEquals(ArrayUtils.EMPTY_BYTE_ARRAY, array);\r\n    assertEquals(Byte.TYPE, array.getClass().getComponentType());\r\n    array = ArrayUtils.removeAll(new byte[] { 1, 2, 3 }, 0, 1);\r\n    assertArrayEquals(new byte[] { 3 }, array);\r\n    assertEquals(Byte.TYPE, array.getClass().getComponentType());\r\n    array = ArrayUtils.removeAll(new byte[] { 1, 2, 3 }, 1, 2);\r\n    assertArrayEquals(new byte[] { 1 }, array);\r\n    assertEquals(Byte.TYPE, array.getClass().getComponentType());\r\n    array = ArrayUtils.removeAll(new byte[] { 1, 2, 3 }, 0, 2);\r\n    assertArrayEquals(new byte[] { 2 }, array);\r\n    assertEquals(Byte.TYPE, array.getClass().getComponentType());\r\n    array = ArrayUtils.removeAll(new byte[] { 1, 2, 3, 4, 5 }, 1, 3);\r\n    assertArrayEquals(new byte[] { 1, 3, 5 }, array);\r\n    assertEquals(Byte.TYPE, array.getClass().getComponentType());\r\n    array = ArrayUtils.removeAll(new byte[] { 1, 2, 3, 4, 5 }, 0, 2, 4);\r\n    assertArrayEquals(new byte[] { 2, 4 }, array);\r\n    assertEquals(Byte.TYPE, array.getClass().getComponentType());\r\n    array = ArrayUtils.removeAll(new byte[] { 1, 2, 3, 4, 5, 6, 7 }, 1, 3, 5);\r\n    assertArrayEquals(new byte[] { 1, 3, 5, 7 }, array);\r\n    assertEquals(Byte.TYPE, array.getClass().getComponentType());\r\n    array = ArrayUtils.removeAll(new byte[] { 1, 2, 3, 4, 5, 6, 7 }, 0, 2, 4, 6);\r\n    assertArrayEquals(new byte[] { 2, 4, 6 }, array);\r\n    assertEquals(Byte.TYPE, array.getClass().getComponentType());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ArrayUtilsRemoveMultipleTest.java",
  "methodName" : "testRemoveAllByteArrayNegativeIndex",
  "sourceCode" : "@Test\r\nvoid testRemoveAllByteArrayNegativeIndex() {\r\n    assertIndexOutOfBoundsException(() -> ArrayUtils.removeAll(new byte[] { 1, 2 }, -1));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ArrayUtilsRemoveMultipleTest.java",
  "methodName" : "testRemoveAllByteArrayOutOfBoundsIndex",
  "sourceCode" : "@Test\r\nvoid testRemoveAllByteArrayOutOfBoundsIndex() {\r\n    assertIndexOutOfBoundsException(() -> ArrayUtils.removeAll(new byte[] { 1, 2 }, 2));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ArrayUtilsRemoveMultipleTest.java",
  "methodName" : "testRemoveAllByteArrayRemoveNone",
  "sourceCode" : "@Test\r\nvoid testRemoveAllByteArrayRemoveNone() {\r\n    final byte[] array1 = { 1, 2 };\r\n    final byte[] array2 = ArrayUtils.removeAll(array1);\r\n    assertNotSame(array1, array2);\r\n    assertArrayEquals(array1, array2);\r\n    assertEquals(byte.class, array2.getClass().getComponentType());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ArrayUtilsRemoveMultipleTest.java",
  "methodName" : "testRemoveAllCharArray",
  "sourceCode" : "@Test\r\nvoid testRemoveAllCharArray() {\r\n    char[] array;\r\n    array = ArrayUtils.removeAll(new char[] { 'a' }, 0);\r\n    assertArrayEquals(ArrayUtils.EMPTY_CHAR_ARRAY, array);\r\n    assertEquals(Character.TYPE, array.getClass().getComponentType());\r\n    array = ArrayUtils.removeAll(new char[] { 'a', 'b' }, 0);\r\n    assertArrayEquals(new char[] { 'b' }, array);\r\n    assertEquals(Character.TYPE, array.getClass().getComponentType());\r\n    array = ArrayUtils.removeAll(new char[] { 'a', 'b' }, 1);\r\n    assertArrayEquals(new char[] { 'a' }, array);\r\n    assertEquals(Character.TYPE, array.getClass().getComponentType());\r\n    array = ArrayUtils.removeAll(new char[] { 'a', 'b', 'c' }, 1);\r\n    assertArrayEquals(new char[] { 'a', 'c' }, array);\r\n    assertEquals(Character.TYPE, array.getClass().getComponentType());\r\n    array = ArrayUtils.removeAll(new char[] { 'a', 'b' }, 0, 1);\r\n    assertArrayEquals(ArrayUtils.EMPTY_CHAR_ARRAY, array);\r\n    assertEquals(Character.TYPE, array.getClass().getComponentType());\r\n    array = ArrayUtils.removeAll(new char[] { 'a', 'b', 'c' }, 0, 1);\r\n    assertArrayEquals(new char[] { 'c' }, array);\r\n    assertEquals(Character.TYPE, array.getClass().getComponentType());\r\n    array = ArrayUtils.removeAll(new char[] { 'a', 'b', 'c' }, 1, 2);\r\n    assertArrayEquals(new char[] { 'a' }, array);\r\n    assertEquals(Character.TYPE, array.getClass().getComponentType());\r\n    array = ArrayUtils.removeAll(new char[] { 'a', 'b', 'c' }, 0, 2);\r\n    assertArrayEquals(new char[] { 'b' }, array);\r\n    assertEquals(Character.TYPE, array.getClass().getComponentType());\r\n    array = ArrayUtils.removeAll(new char[] { 'a', 'b', 'c', 'd', 'e' }, 1, 3);\r\n    assertArrayEquals(new char[] { 'a', 'c', 'e' }, array);\r\n    assertEquals(Character.TYPE, array.getClass().getComponentType());\r\n    array = ArrayUtils.removeAll(new char[] { 'a', 'b', 'c', 'd', 'e' }, 0, 2, 4);\r\n    assertArrayEquals(new char[] { 'b', 'd' }, array);\r\n    assertEquals(Character.TYPE, array.getClass().getComponentType());\r\n    array = ArrayUtils.removeAll(new char[] { 'a', 'b', 'c', 'd', 'e', 'f', 'g' }, 1, 3, 5);\r\n    assertArrayEquals(new char[] { 'a', 'c', 'e', 'g' }, array);\r\n    assertEquals(Character.TYPE, array.getClass().getComponentType());\r\n    array = ArrayUtils.removeAll(new char[] { 'a', 'b', 'c', 'd', 'e', 'f', 'g' }, 0, 2, 4, 6);\r\n    assertArrayEquals(new char[] { 'b', 'd', 'f' }, array);\r\n    assertEquals(Character.TYPE, array.getClass().getComponentType());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ArrayUtilsRemoveMultipleTest.java",
  "methodName" : "testRemoveAllCharArrayNegativeIndex",
  "sourceCode" : "@Test\r\nvoid testRemoveAllCharArrayNegativeIndex() {\r\n    assertIndexOutOfBoundsException(() -> ArrayUtils.removeAll(new char[] { 'a', 'b' }, -1));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ArrayUtilsRemoveMultipleTest.java",
  "methodName" : "testRemoveAllCharArrayOutOfBoundsIndex",
  "sourceCode" : "@Test\r\nvoid testRemoveAllCharArrayOutOfBoundsIndex() {\r\n    assertIndexOutOfBoundsException(() -> ArrayUtils.removeAll(new char[] { 'a', 'b' }, 2));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ArrayUtilsRemoveMultipleTest.java",
  "methodName" : "testRemoveAllCharArrayRemoveNone",
  "sourceCode" : "@Test\r\nvoid testRemoveAllCharArrayRemoveNone() {\r\n    final char[] array1 = { 'a', 'b' };\r\n    final char[] array2 = ArrayUtils.removeAll(array1);\r\n    assertNotSame(array1, array2);\r\n    assertArrayEquals(array1, array2);\r\n    assertEquals(char.class, array2.getClass().getComponentType());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ArrayUtilsRemoveMultipleTest.java",
  "methodName" : "testRemoveAllDoubleArray",
  "sourceCode" : "@Test\r\nvoid testRemoveAllDoubleArray() {\r\n    double[] array;\r\n    array = ArrayUtils.removeAll(new double[] { 1 }, 0);\r\n    assertArrayEquals(ArrayUtils.EMPTY_DOUBLE_ARRAY, array);\r\n    assertEquals(Double.TYPE, array.getClass().getComponentType());\r\n    array = ArrayUtils.removeAll(new double[] { 1, 2 }, 0);\r\n    assertArrayEquals(new double[] { 2 }, array);\r\n    assertEquals(Double.TYPE, array.getClass().getComponentType());\r\n    array = ArrayUtils.removeAll(new double[] { 1, 2 }, 1);\r\n    assertArrayEquals(new double[] { 1 }, array);\r\n    assertEquals(Double.TYPE, array.getClass().getComponentType());\r\n    array = ArrayUtils.removeAll(new double[] { 1, 2, 1 }, 1);\r\n    assertArrayEquals(new double[] { 1, 1 }, array);\r\n    assertEquals(Double.TYPE, array.getClass().getComponentType());\r\n    array = ArrayUtils.removeAll(new double[] { 1, 2 }, 0, 1);\r\n    assertArrayEquals(ArrayUtils.EMPTY_DOUBLE_ARRAY, array);\r\n    assertEquals(Double.TYPE, array.getClass().getComponentType());\r\n    array = ArrayUtils.removeAll(new double[] { 1, 2, 3 }, 0, 1);\r\n    assertArrayEquals(new double[] { 3 }, array);\r\n    assertEquals(Double.TYPE, array.getClass().getComponentType());\r\n    array = ArrayUtils.removeAll(new double[] { 1, 2, 3 }, 1, 2);\r\n    assertArrayEquals(new double[] { 1 }, array);\r\n    assertEquals(Double.TYPE, array.getClass().getComponentType());\r\n    array = ArrayUtils.removeAll(new double[] { 1, 2, 3 }, 0, 2);\r\n    assertArrayEquals(new double[] { 2 }, array);\r\n    assertEquals(Double.TYPE, array.getClass().getComponentType());\r\n    array = ArrayUtils.removeAll(new double[] { 1, 2, 3, 4, 5 }, 1, 3);\r\n    assertArrayEquals(new double[] { 1, 3, 5 }, array);\r\n    assertEquals(Double.TYPE, array.getClass().getComponentType());\r\n    array = ArrayUtils.removeAll(new double[] { 1, 2, 3, 4, 5 }, 0, 2, 4);\r\n    assertArrayEquals(new double[] { 2, 4 }, array);\r\n    assertEquals(Double.TYPE, array.getClass().getComponentType());\r\n    array = ArrayUtils.removeAll(new double[] { 1, 2, 3, 4, 5, 6, 7 }, 1, 3, 5);\r\n    assertArrayEquals(new double[] { 1, 3, 5, 7 }, array);\r\n    assertEquals(Double.TYPE, array.getClass().getComponentType());\r\n    array = ArrayUtils.removeAll(new double[] { 1, 2, 3, 4, 5, 6, 7 }, 0, 2, 4, 6);\r\n    assertArrayEquals(new double[] { 2, 4, 6 }, array);\r\n    assertEquals(Double.TYPE, array.getClass().getComponentType());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ArrayUtilsRemoveMultipleTest.java",
  "methodName" : "testRemoveAllDoubleArrayNegativeIndex",
  "sourceCode" : "@Test\r\nvoid testRemoveAllDoubleArrayNegativeIndex() {\r\n    assertIndexOutOfBoundsException(() -> ArrayUtils.removeAll(new double[] { 1, 2 }, -1));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ArrayUtilsRemoveMultipleTest.java",
  "methodName" : "testRemoveAllDoubleArrayOutOfBoundsIndex",
  "sourceCode" : "@Test\r\nvoid testRemoveAllDoubleArrayOutOfBoundsIndex() {\r\n    assertIndexOutOfBoundsException(() -> ArrayUtils.removeAll(new double[] { 1, 2 }, 2));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ArrayUtilsRemoveMultipleTest.java",
  "methodName" : "testRemoveAllDoubleArrayRemoveNone",
  "sourceCode" : "@Test\r\nvoid testRemoveAllDoubleArrayRemoveNone() {\r\n    final double[] array1 = { 1, 2 };\r\n    final double[] array2 = ArrayUtils.removeAll(array1);\r\n    assertNotSame(array1, array2);\r\n    assertArrayEquals(array1, array2);\r\n    assertEquals(double.class, array2.getClass().getComponentType());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ArrayUtilsRemoveMultipleTest.java",
  "methodName" : "testRemoveAllFloatArray",
  "sourceCode" : "@Test\r\nvoid testRemoveAllFloatArray() {\r\n    float[] array;\r\n    array = ArrayUtils.removeAll(new float[] { 1 }, 0);\r\n    assertArrayEquals(ArrayUtils.EMPTY_FLOAT_ARRAY, array);\r\n    assertEquals(Float.TYPE, array.getClass().getComponentType());\r\n    array = ArrayUtils.removeAll(new float[] { 1, 2 }, 0);\r\n    assertArrayEquals(new float[] { 2 }, array);\r\n    assertEquals(Float.TYPE, array.getClass().getComponentType());\r\n    array = ArrayUtils.removeAll(new float[] { 1, 2 }, 1);\r\n    assertArrayEquals(new float[] { 1 }, array);\r\n    assertEquals(Float.TYPE, array.getClass().getComponentType());\r\n    array = ArrayUtils.removeAll(new float[] { 1, 2, 1 }, 1);\r\n    assertArrayEquals(new float[] { 1, 1 }, array);\r\n    assertEquals(Float.TYPE, array.getClass().getComponentType());\r\n    array = ArrayUtils.removeAll(new float[] { 1, 2 }, 0, 1);\r\n    assertArrayEquals(ArrayUtils.EMPTY_FLOAT_ARRAY, array);\r\n    assertEquals(Float.TYPE, array.getClass().getComponentType());\r\n    array = ArrayUtils.removeAll(new float[] { 1, 2, 3 }, 0, 1);\r\n    assertArrayEquals(new float[] { 3 }, array);\r\n    assertEquals(Float.TYPE, array.getClass().getComponentType());\r\n    array = ArrayUtils.removeAll(new float[] { 1, 2, 3 }, 1, 2);\r\n    assertArrayEquals(new float[] { 1 }, array);\r\n    assertEquals(Float.TYPE, array.getClass().getComponentType());\r\n    array = ArrayUtils.removeAll(new float[] { 1, 2, 3 }, 0, 2);\r\n    assertArrayEquals(new float[] { 2 }, array);\r\n    assertEquals(Float.TYPE, array.getClass().getComponentType());\r\n    array = ArrayUtils.removeAll(new float[] { 1, 2, 3, 4, 5 }, 1, 3);\r\n    assertArrayEquals(new float[] { 1, 3, 5 }, array);\r\n    assertEquals(Float.TYPE, array.getClass().getComponentType());\r\n    array = ArrayUtils.removeAll(new float[] { 1, 2, 3, 4, 5 }, 0, 2, 4);\r\n    assertArrayEquals(new float[] { 2, 4 }, array);\r\n    assertEquals(Float.TYPE, array.getClass().getComponentType());\r\n    array = ArrayUtils.removeAll(new float[] { 1, 2, 3, 4, 5, 6, 7 }, 1, 3, 5);\r\n    assertArrayEquals(new float[] { 1, 3, 5, 7 }, array);\r\n    assertEquals(Float.TYPE, array.getClass().getComponentType());\r\n    array = ArrayUtils.removeAll(new float[] { 1, 2, 3, 4, 5, 6, 7 }, 0, 2, 4, 6);\r\n    assertArrayEquals(new float[] { 2, 4, 6 }, array);\r\n    assertEquals(Float.TYPE, array.getClass().getComponentType());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ArrayUtilsRemoveMultipleTest.java",
  "methodName" : "testRemoveAllFloatArrayNegativeIndex",
  "sourceCode" : "@Test\r\nvoid testRemoveAllFloatArrayNegativeIndex() {\r\n    assertIndexOutOfBoundsException(() -> ArrayUtils.removeAll(new float[] { 1, 2 }, -1));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ArrayUtilsRemoveMultipleTest.java",
  "methodName" : "testRemoveAllFloatArrayOutOfBoundsIndex",
  "sourceCode" : "@Test\r\nvoid testRemoveAllFloatArrayOutOfBoundsIndex() {\r\n    assertIndexOutOfBoundsException(() -> ArrayUtils.removeAll(new float[] { 1, 2 }, 2));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ArrayUtilsRemoveMultipleTest.java",
  "methodName" : "testRemoveAllFloatArrayRemoveNone",
  "sourceCode" : "@Test\r\nvoid testRemoveAllFloatArrayRemoveNone() {\r\n    final float[] array1 = { 1, 2 };\r\n    final float[] array2 = ArrayUtils.removeAll(array1);\r\n    assertNotSame(array1, array2);\r\n    assertArrayEquals(array1, array2);\r\n    assertEquals(float.class, array2.getClass().getComponentType());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ArrayUtilsRemoveMultipleTest.java",
  "methodName" : "testRemoveAllIntArray",
  "sourceCode" : "@Test\r\nvoid testRemoveAllIntArray() {\r\n    int[] array;\r\n    array = ArrayUtils.removeAll(ArrayUtils.EMPTY_INT_ARRAY, ArrayUtils.EMPTY_INT_ARRAY);\r\n    assertArrayEquals(ArrayUtils.EMPTY_INT_ARRAY, array);\r\n    array = ArrayUtils.removeAll(new int[] { 1 }, ArrayUtils.EMPTY_INT_ARRAY);\r\n    assertArrayEquals(new int[] { 1 }, array);\r\n    array = ArrayUtils.removeAll(new int[] { 1 }, 0);\r\n    assertArrayEquals(ArrayUtils.EMPTY_INT_ARRAY, array);\r\n    assertEquals(Integer.TYPE, array.getClass().getComponentType());\r\n    array = ArrayUtils.removeAll(new int[] { 1, 2 }, 0);\r\n    assertArrayEquals(new int[] { 2 }, array);\r\n    assertEquals(Integer.TYPE, array.getClass().getComponentType());\r\n    array = ArrayUtils.removeAll(new int[] { 1, 2 }, 1);\r\n    assertArrayEquals(new int[] { 1 }, array);\r\n    assertEquals(Integer.TYPE, array.getClass().getComponentType());\r\n    array = ArrayUtils.removeAll(new int[] { 1, 2, 1 }, 1);\r\n    assertArrayEquals(new int[] { 1, 1 }, array);\r\n    assertEquals(Integer.TYPE, array.getClass().getComponentType());\r\n    array = ArrayUtils.removeAll(new int[] { 1, 2 }, 0, 1);\r\n    assertArrayEquals(ArrayUtils.EMPTY_INT_ARRAY, array);\r\n    assertEquals(Integer.TYPE, array.getClass().getComponentType());\r\n    array = ArrayUtils.removeAll(new int[] { 1, 2, 3 }, 0, 1);\r\n    assertArrayEquals(new int[] { 3 }, array);\r\n    assertEquals(Integer.TYPE, array.getClass().getComponentType());\r\n    array = ArrayUtils.removeAll(new int[] { 1, 2, 3 }, 1, 2);\r\n    assertArrayEquals(new int[] { 1 }, array);\r\n    assertEquals(Integer.TYPE, array.getClass().getComponentType());\r\n    array = ArrayUtils.removeAll(new int[] { 1, 2, 3 }, 0, 2);\r\n    assertArrayEquals(new int[] { 2 }, array);\r\n    assertEquals(Integer.TYPE, array.getClass().getComponentType());\r\n    array = ArrayUtils.removeAll(new int[] { 1, 2, 3, 4, 5 }, 1, 3);\r\n    assertArrayEquals(new int[] { 1, 3, 5 }, array);\r\n    assertEquals(Integer.TYPE, array.getClass().getComponentType());\r\n    array = ArrayUtils.removeAll(new int[] { 1, 2, 3, 4, 5 }, 0, 2, 4);\r\n    assertArrayEquals(new int[] { 2, 4 }, array);\r\n    assertEquals(Integer.TYPE, array.getClass().getComponentType());\r\n    array = ArrayUtils.removeAll(new int[] { 1, 2, 3, 4, 5, 6, 7 }, 1, 3, 5);\r\n    assertArrayEquals(new int[] { 1, 3, 5, 7 }, array);\r\n    assertEquals(Integer.TYPE, array.getClass().getComponentType());\r\n    array = ArrayUtils.removeAll(new int[] { 1, 2, 3, 4, 5, 6, 7 }, 0, 2, 4, 6);\r\n    assertArrayEquals(new int[] { 2, 4, 6 }, array);\r\n    assertEquals(Integer.TYPE, array.getClass().getComponentType());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ArrayUtilsRemoveMultipleTest.java",
  "methodName" : "testRemoveAllIntArrayNegativeIndex",
  "sourceCode" : "@Test\r\nvoid testRemoveAllIntArrayNegativeIndex() {\r\n    assertIndexOutOfBoundsException(() -> ArrayUtils.removeAll(new int[] { 1, 2 }, -1));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ArrayUtilsRemoveMultipleTest.java",
  "methodName" : "testRemoveAllIntArrayOutOfBoundsIndex",
  "sourceCode" : "@Test\r\nvoid testRemoveAllIntArrayOutOfBoundsIndex() {\r\n    assertIndexOutOfBoundsException(() -> ArrayUtils.removeAll(new int[] { 1, 2 }, 2));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ArrayUtilsRemoveMultipleTest.java",
  "methodName" : "testRemoveAllIntArrayRemoveNone",
  "sourceCode" : "@Test\r\nvoid testRemoveAllIntArrayRemoveNone() {\r\n    final int[] array1 = { 1, 2 };\r\n    final int[] array2 = ArrayUtils.removeAll(array1);\r\n    assertNotSame(array1, array2);\r\n    assertArrayEquals(array1, array2);\r\n    assertEquals(int.class, array2.getClass().getComponentType());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ArrayUtilsRemoveMultipleTest.java",
  "methodName" : "testRemoveAllLongArray",
  "sourceCode" : "@Test\r\nvoid testRemoveAllLongArray() {\r\n    long[] array;\r\n    array = ArrayUtils.removeAll(new long[] { 1 }, 0);\r\n    assertArrayEquals(ArrayUtils.EMPTY_LONG_ARRAY, array);\r\n    assertEquals(Long.TYPE, array.getClass().getComponentType());\r\n    array = ArrayUtils.removeAll(new long[] { 1, 2 }, 0);\r\n    assertArrayEquals(new long[] { 2 }, array);\r\n    assertEquals(Long.TYPE, array.getClass().getComponentType());\r\n    array = ArrayUtils.removeAll(new long[] { 1, 2 }, 1);\r\n    assertArrayEquals(new long[] { 1 }, array);\r\n    assertEquals(Long.TYPE, array.getClass().getComponentType());\r\n    array = ArrayUtils.removeAll(new long[] { 1, 2, 1 }, 1);\r\n    assertArrayEquals(new long[] { 1, 1 }, array);\r\n    assertEquals(Long.TYPE, array.getClass().getComponentType());\r\n    array = ArrayUtils.removeAll(new long[] { 1, 2 }, 0, 1);\r\n    assertArrayEquals(ArrayUtils.EMPTY_LONG_ARRAY, array);\r\n    assertEquals(Long.TYPE, array.getClass().getComponentType());\r\n    array = ArrayUtils.removeAll(new long[] { 1, 2, 3 }, 0, 1);\r\n    assertArrayEquals(new long[] { 3 }, array);\r\n    assertEquals(Long.TYPE, array.getClass().getComponentType());\r\n    array = ArrayUtils.removeAll(new long[] { 1, 2, 3 }, 1, 2);\r\n    assertArrayEquals(new long[] { 1 }, array);\r\n    assertEquals(Long.TYPE, array.getClass().getComponentType());\r\n    array = ArrayUtils.removeAll(new long[] { 1, 2, 3 }, 0, 2);\r\n    assertArrayEquals(new long[] { 2 }, array);\r\n    assertEquals(Long.TYPE, array.getClass().getComponentType());\r\n    array = ArrayUtils.removeAll(new long[] { 1, 2, 3, 4, 5 }, 1, 3);\r\n    assertArrayEquals(new long[] { 1, 3, 5 }, array);\r\n    assertEquals(Long.TYPE, array.getClass().getComponentType());\r\n    array = ArrayUtils.removeAll(new long[] { 1, 2, 3, 4, 5 }, 0, 2, 4);\r\n    assertArrayEquals(new long[] { 2, 4 }, array);\r\n    assertEquals(Long.TYPE, array.getClass().getComponentType());\r\n    array = ArrayUtils.removeAll(new long[] { 1, 2, 3, 4, 5, 6, 7 }, 1, 3, 5);\r\n    assertArrayEquals(new long[] { 1, 3, 5, 7 }, array);\r\n    assertEquals(Long.TYPE, array.getClass().getComponentType());\r\n    array = ArrayUtils.removeAll(new long[] { 1, 2, 3, 4, 5, 6, 7 }, 0, 2, 4, 6);\r\n    assertArrayEquals(new long[] { 2, 4, 6 }, array);\r\n    assertEquals(Long.TYPE, array.getClass().getComponentType());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ArrayUtilsRemoveMultipleTest.java",
  "methodName" : "testRemoveAllLongArrayNegativeIndex",
  "sourceCode" : "@Test\r\nvoid testRemoveAllLongArrayNegativeIndex() {\r\n    assertIndexOutOfBoundsException(() -> ArrayUtils.removeAll(new long[] { 1, 2 }, -1));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ArrayUtilsRemoveMultipleTest.java",
  "methodName" : "testRemoveAllLongArrayOutOfBoundsIndex",
  "sourceCode" : "@Test\r\nvoid testRemoveAllLongArrayOutOfBoundsIndex() {\r\n    assertIndexOutOfBoundsException(() -> ArrayUtils.removeAll(new long[] { 1, 2 }, 2));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ArrayUtilsRemoveMultipleTest.java",
  "methodName" : "testRemoveAllLongArrayRemoveNone",
  "sourceCode" : "@Test\r\nvoid testRemoveAllLongArrayRemoveNone() {\r\n    final long[] array1 = { 1, 2 };\r\n    final long[] array2 = ArrayUtils.removeAll(array1);\r\n    assertNotSame(array1, array2);\r\n    assertArrayEquals(array1, array2);\r\n    assertEquals(long.class, array2.getClass().getComponentType());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ArrayUtilsRemoveMultipleTest.java",
  "methodName" : "testRemoveAllNullBooleanArray",
  "sourceCode" : "@Test\r\nvoid testRemoveAllNullBooleanArray() {\r\n    assertNull(ArrayUtils.removeAll((boolean[]) null, 0));\r\n    assertNull(ArrayUtils.removeAll((boolean[]) null, NULL_INDICES));\r\n    final boolean[] array0 = {};\r\n    assertArrayEquals(array0, ArrayUtils.removeAll(array0, NULL_INDICES));\r\n    assertNotSame(array0, ArrayUtils.removeAll(array0, NULL_INDICES));\r\n    final boolean[] array1 = new boolean[1];\r\n    assertArrayEquals(array1, ArrayUtils.removeAll(array1, NULL_INDICES));\r\n    assertNotSame(array1, ArrayUtils.removeAll(array1, NULL_INDICES));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ArrayUtilsRemoveMultipleTest.java",
  "methodName" : "testRemoveAllNullByteArray",
  "sourceCode" : "@Test\r\nvoid testRemoveAllNullByteArray() {\r\n    assertNull(ArrayUtils.removeAll((byte[]) null));\r\n    assertNull(ArrayUtils.removeAll((byte[]) null, 0));\r\n    assertNull(ArrayUtils.removeAll((byte[]) null, NULL_INDICES));\r\n    final byte[] array0 = {};\r\n    assertArrayEquals(array0, ArrayUtils.removeAll(array0, NULL_INDICES));\r\n    assertNotSame(array0, ArrayUtils.removeAll(array0, NULL_INDICES));\r\n    final byte[] array1 = new byte[1];\r\n    assertArrayEquals(array1, ArrayUtils.removeAll(array1, NULL_INDICES));\r\n    assertNotSame(array1, ArrayUtils.removeAll(array1, NULL_INDICES));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ArrayUtilsRemoveMultipleTest.java",
  "methodName" : "testRemoveAllNullCharArray",
  "sourceCode" : "@Test\r\nvoid testRemoveAllNullCharArray() {\r\n    assertNull(ArrayUtils.removeAll((char[]) null));\r\n    assertNull(ArrayUtils.removeAll((char[]) null, 0));\r\n    assertNull(ArrayUtils.removeAll((char[]) null, NULL_INDICES));\r\n    final char[] array0 = {};\r\n    assertArrayEquals(array0, ArrayUtils.removeAll(array0, NULL_INDICES));\r\n    assertNotSame(array0, ArrayUtils.removeAll(array0, NULL_INDICES));\r\n    final char[] array1 = new char[1];\r\n    assertArrayEquals(array1, ArrayUtils.removeAll(array1, NULL_INDICES));\r\n    assertNotSame(array1, ArrayUtils.removeAll(array1, NULL_INDICES));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ArrayUtilsRemoveMultipleTest.java",
  "methodName" : "testRemoveAllNullDoubleArray",
  "sourceCode" : "@Test\r\nvoid testRemoveAllNullDoubleArray() {\r\n    assertNull(ArrayUtils.removeAll((double[]) null));\r\n    assertNull(ArrayUtils.removeAll((double[]) null, 0));\r\n    assertNull(ArrayUtils.removeAll((double[]) null, NULL_INDICES));\r\n    final double[] array0 = {};\r\n    assertArrayEquals(array0, ArrayUtils.removeAll(array0, NULL_INDICES));\r\n    assertNotSame(array0, ArrayUtils.removeAll(array0, NULL_INDICES));\r\n    final double[] array1 = new double[1];\r\n    assertArrayEquals(array1, ArrayUtils.removeAll(array1, NULL_INDICES));\r\n    assertNotSame(array1, ArrayUtils.removeAll(array1, NULL_INDICES));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ArrayUtilsRemoveMultipleTest.java",
  "methodName" : "testRemoveAllNullFloatArray",
  "sourceCode" : "@Test\r\nvoid testRemoveAllNullFloatArray() {\r\n    assertNull(ArrayUtils.removeAll((float[]) null));\r\n    assertNull(ArrayUtils.removeAll((float[]) null, 0));\r\n    assertNull(ArrayUtils.removeAll((float[]) null, NULL_INDICES));\r\n    final float[] array0 = {};\r\n    assertArrayEquals(array0, ArrayUtils.removeAll(array0, NULL_INDICES));\r\n    assertNotSame(array0, ArrayUtils.removeAll(array0, NULL_INDICES));\r\n    final float[] array1 = new float[1];\r\n    assertArrayEquals(array1, ArrayUtils.removeAll(array1, NULL_INDICES));\r\n    assertNotSame(array1, ArrayUtils.removeAll(array1, NULL_INDICES));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ArrayUtilsRemoveMultipleTest.java",
  "methodName" : "testRemoveAllNullIntArray",
  "sourceCode" : "@Test\r\nvoid testRemoveAllNullIntArray() {\r\n    assertNull(ArrayUtils.removeAll((int[]) null));\r\n    assertNull(ArrayUtils.removeAll((int[]) null, 0));\r\n    assertNull(ArrayUtils.removeAll((int[]) null, NULL_INDICES));\r\n    final int[] array0 = {};\r\n    assertArrayEquals(array0, ArrayUtils.removeAll(array0, NULL_INDICES));\r\n    assertNotSame(array0, ArrayUtils.removeAll(array0, NULL_INDICES));\r\n    final int[] array1 = new int[1];\r\n    assertArrayEquals(array1, ArrayUtils.removeAll(array1, NULL_INDICES));\r\n    assertNotSame(array1, ArrayUtils.removeAll(array1, NULL_INDICES));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ArrayUtilsRemoveMultipleTest.java",
  "methodName" : "testRemoveAllNullLongArray",
  "sourceCode" : "@Test\r\nvoid testRemoveAllNullLongArray() {\r\n    assertNull(ArrayUtils.removeAll((long[]) null));\r\n    assertNull(ArrayUtils.removeAll((long[]) null, 0));\r\n    assertNull(ArrayUtils.removeAll((long[]) null, NULL_INDICES));\r\n    final long[] array0 = {};\r\n    assertArrayEquals(array0, ArrayUtils.removeAll(array0, NULL_INDICES));\r\n    assertNotSame(array0, ArrayUtils.removeAll(array0, NULL_INDICES));\r\n    final long[] array1 = new long[1];\r\n    assertArrayEquals(array1, ArrayUtils.removeAll(array1, NULL_INDICES));\r\n    assertNotSame(array1, ArrayUtils.removeAll(array1, NULL_INDICES));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ArrayUtilsRemoveMultipleTest.java",
  "methodName" : "testRemoveAllNullObjectArray",
  "sourceCode" : "@Test\r\nvoid testRemoveAllNullObjectArray() {\r\n    assertNull(ArrayUtils.removeAll((Object[]) null));\r\n    assertNull(ArrayUtils.removeAll((Object[]) null, 0));\r\n    assertNull(ArrayUtils.removeAll((Object[]) null, NULL_INDICES));\r\n    final Object[] array0 = {};\r\n    assertArrayEquals(array0, ArrayUtils.removeAll(array0, NULL_INDICES));\r\n    assertNotSame(array0, ArrayUtils.removeAll(array0, NULL_INDICES));\r\n    final Object[] array1 = new Object[1];\r\n    assertArrayEquals(array1, ArrayUtils.removeAll(array1, NULL_INDICES));\r\n    assertNotSame(array1, ArrayUtils.removeAll(array1, NULL_INDICES));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ArrayUtilsRemoveMultipleTest.java",
  "methodName" : "testRemoveAllNullShortArray",
  "sourceCode" : "@Test\r\nvoid testRemoveAllNullShortArray() {\r\n    assertNull(ArrayUtils.removeAll((short[]) null));\r\n    assertNull(ArrayUtils.removeAll((short[]) null, 0));\r\n    assertNull(ArrayUtils.removeAll((short[]) null, NULL_INDICES));\r\n    final short[] array0 = {};\r\n    assertArrayEquals(array0, ArrayUtils.removeAll(array0, NULL_INDICES));\r\n    assertNotSame(array0, ArrayUtils.removeAll(array0, NULL_INDICES));\r\n    final short[] array1 = new short[1];\r\n    assertArrayEquals(array1, ArrayUtils.removeAll(array1, NULL_INDICES));\r\n    assertNotSame(array1, ArrayUtils.removeAll(array1, NULL_INDICES));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ArrayUtilsRemoveMultipleTest.java",
  "methodName" : "testRemoveAllNumberArray",
  "sourceCode" : "@Test\r\nvoid testRemoveAllNumberArray() {\r\n    final Number[] inarray = { Integer.valueOf(1), Long.valueOf(2L), Byte.valueOf((byte) 3) };\r\n    assertEquals(3, inarray.length);\r\n    Number[] outarray;\r\n    outarray = ArrayUtils.removeAll(inarray, 1);\r\n    assertArrayEquals(new Number[] { Integer.valueOf(1), Byte.valueOf((byte) 3) }, outarray);\r\n    assertEquals(Number.class, outarray.getClass().getComponentType());\r\n    outarray = ArrayUtils.removeAll(outarray, 1);\r\n    assertArrayEquals(new Number[] { Integer.valueOf(1) }, outarray);\r\n    assertEquals(Number.class, outarray.getClass().getComponentType());\r\n    outarray = ArrayUtils.removeAll(outarray, 0);\r\n    assertEquals(0, outarray.length);\r\n    assertEquals(Number.class, outarray.getClass().getComponentType());\r\n    outarray = ArrayUtils.removeAll(inarray, 0, 1);\r\n    assertArrayEquals(new Number[] { Byte.valueOf((byte) 3) }, outarray);\r\n    assertEquals(Number.class, outarray.getClass().getComponentType());\r\n    outarray = ArrayUtils.removeAll(inarray, 0, 2);\r\n    assertArrayEquals(new Number[] { Long.valueOf(2L) }, outarray);\r\n    assertEquals(Number.class, outarray.getClass().getComponentType());\r\n    outarray = ArrayUtils.removeAll(inarray, 1, 2);\r\n    assertArrayEquals(new Number[] { Integer.valueOf(1) }, outarray);\r\n    assertEquals(Number.class, outarray.getClass().getComponentType());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ArrayUtilsRemoveMultipleTest.java",
  "methodName" : "testRemoveAllObjectArray",
  "sourceCode" : "@Test\r\nvoid testRemoveAllObjectArray() {\r\n    Object[] array;\r\n    array = ArrayUtils.removeAll(new Object[] { \"a\" }, 0);\r\n    assertArrayEquals(ArrayUtils.EMPTY_OBJECT_ARRAY, array);\r\n    assertEquals(Object.class, array.getClass().getComponentType());\r\n    array = ArrayUtils.removeAll(new Object[] { \"a\", \"b\" }, 0, 1);\r\n    assertArrayEquals(ArrayUtils.EMPTY_OBJECT_ARRAY, array);\r\n    assertEquals(Object.class, array.getClass().getComponentType());\r\n    array = ArrayUtils.removeAll(new Object[] { \"a\", \"b\", \"c\" }, 1, 2);\r\n    assertArrayEquals(new Object[] { \"a\" }, array);\r\n    assertEquals(Object.class, array.getClass().getComponentType());\r\n    array = ArrayUtils.removeAll(new Object[] { \"a\", \"b\", \"c\", \"d\" }, 1, 2);\r\n    assertArrayEquals(new Object[] { \"a\", \"d\" }, array);\r\n    assertEquals(Object.class, array.getClass().getComponentType());\r\n    array = ArrayUtils.removeAll(new Object[] { \"a\", \"b\", \"c\", \"d\" }, 0, 3);\r\n    assertArrayEquals(new Object[] { \"b\", \"c\" }, array);\r\n    assertEquals(Object.class, array.getClass().getComponentType());\r\n    array = ArrayUtils.removeAll(new Object[] { \"a\", \"b\", \"c\", \"d\" }, 0, 1, 3);\r\n    assertArrayEquals(new Object[] { \"c\" }, array);\r\n    assertEquals(Object.class, array.getClass().getComponentType());\r\n    array = ArrayUtils.removeAll(new Object[] { \"a\", \"b\", \"c\", \"d\", \"e\" }, 0, 1, 3);\r\n    assertArrayEquals(new Object[] { \"c\", \"e\" }, array);\r\n    assertEquals(Object.class, array.getClass().getComponentType());\r\n    array = ArrayUtils.removeAll(new Object[] { \"a\", \"b\", \"c\", \"d\", \"e\" }, 0, 2, 4);\r\n    assertArrayEquals(new Object[] { \"b\", \"d\" }, array);\r\n    assertEquals(Object.class, array.getClass().getComponentType());\r\n    array = ArrayUtils.removeAll(new Object[] { \"a\", \"b\", \"c\", \"d\" }, 0, 1, 3, 0, 1, 3);\r\n    assertArrayEquals(new Object[] { \"c\" }, array);\r\n    assertEquals(Object.class, array.getClass().getComponentType());\r\n    array = ArrayUtils.removeAll(new Object[] { \"a\", \"b\", \"c\", \"d\" }, 2, 1, 0, 3);\r\n    assertArrayEquals(ArrayUtils.EMPTY_OBJECT_ARRAY, array);\r\n    assertEquals(Object.class, array.getClass().getComponentType());\r\n    array = ArrayUtils.removeAll(new Object[] { \"a\", \"b\", \"c\", \"d\" }, 2, 0, 1, 3, 0, 2, 1, 3);\r\n    assertArrayEquals(ArrayUtils.EMPTY_OBJECT_ARRAY, array);\r\n    assertEquals(Object.class, array.getClass().getComponentType());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ArrayUtilsRemoveMultipleTest.java",
  "methodName" : "testRemoveAllObjectArrayNegativeIndex",
  "sourceCode" : "@Test\r\nvoid testRemoveAllObjectArrayNegativeIndex() {\r\n    assertIndexOutOfBoundsException(() -> ArrayUtils.removeAll(new Object[] { \"a\", \"b\" }, -1));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ArrayUtilsRemoveMultipleTest.java",
  "methodName" : "testRemoveAllObjectArrayOutOfBoundsIndex",
  "sourceCode" : "@Test\r\nvoid testRemoveAllObjectArrayOutOfBoundsIndex() {\r\n    assertIndexOutOfBoundsException(() -> ArrayUtils.removeAll(new Object[] { \"a\", \"b\" }, 2));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ArrayUtilsRemoveMultipleTest.java",
  "methodName" : "testRemoveAllObjectArrayRemoveNone",
  "sourceCode" : "@Test\r\nvoid testRemoveAllObjectArrayRemoveNone() {\r\n    final Object[] array1 = { \"foo\", \"bar\", \"baz\" };\r\n    final Object[] array2 = ArrayUtils.removeAll(array1);\r\n    assertNotSame(array1, array2);\r\n    assertArrayEquals(array1, array2);\r\n    assertEquals(Object.class, array2.getClass().getComponentType());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ArrayUtilsRemoveMultipleTest.java",
  "methodName" : "testRemoveAllShortArray",
  "sourceCode" : "@Test\r\nvoid testRemoveAllShortArray() {\r\n    short[] array;\r\n    array = ArrayUtils.removeAll(new short[] { 1 }, 0);\r\n    assertArrayEquals(ArrayUtils.EMPTY_SHORT_ARRAY, array);\r\n    assertEquals(Short.TYPE, array.getClass().getComponentType());\r\n    array = ArrayUtils.removeAll(new short[] { 1, 2 }, 0);\r\n    assertArrayEquals(new short[] { 2 }, array);\r\n    assertEquals(Short.TYPE, array.getClass().getComponentType());\r\n    array = ArrayUtils.removeAll(new short[] { 1, 2 }, 1);\r\n    assertArrayEquals(new short[] { 1 }, array);\r\n    assertEquals(Short.TYPE, array.getClass().getComponentType());\r\n    array = ArrayUtils.removeAll(new short[] { 1, 2, 1 }, 1);\r\n    assertArrayEquals(new short[] { 1, 1 }, array);\r\n    assertEquals(Short.TYPE, array.getClass().getComponentType());\r\n    array = ArrayUtils.removeAll(new short[] { 1, 2 }, 0, 1);\r\n    assertArrayEquals(ArrayUtils.EMPTY_SHORT_ARRAY, array);\r\n    assertEquals(Short.TYPE, array.getClass().getComponentType());\r\n    array = ArrayUtils.removeAll(new short[] { 1, 2, 3 }, 0, 1);\r\n    assertArrayEquals(new short[] { 3 }, array);\r\n    assertEquals(Short.TYPE, array.getClass().getComponentType());\r\n    array = ArrayUtils.removeAll(new short[] { 1, 2, 3 }, 1, 2);\r\n    assertArrayEquals(new short[] { 1 }, array);\r\n    assertEquals(Short.TYPE, array.getClass().getComponentType());\r\n    array = ArrayUtils.removeAll(new short[] { 1, 2, 3 }, 0, 2);\r\n    assertArrayEquals(new short[] { 2 }, array);\r\n    assertEquals(Short.TYPE, array.getClass().getComponentType());\r\n    array = ArrayUtils.removeAll(new short[] { 1, 2, 3, 4, 5 }, 1, 3);\r\n    assertArrayEquals(new short[] { 1, 3, 5 }, array);\r\n    assertEquals(Short.TYPE, array.getClass().getComponentType());\r\n    array = ArrayUtils.removeAll(new short[] { 1, 2, 3, 4, 5 }, 0, 2, 4);\r\n    assertArrayEquals(new short[] { 2, 4 }, array);\r\n    assertEquals(Short.TYPE, array.getClass().getComponentType());\r\n    array = ArrayUtils.removeAll(new short[] { 1, 2, 3, 4, 5, 6, 7 }, 1, 3, 5);\r\n    assertArrayEquals(new short[] { 1, 3, 5, 7 }, array);\r\n    assertEquals(Short.TYPE, array.getClass().getComponentType());\r\n    array = ArrayUtils.removeAll(new short[] { 1, 2, 3, 4, 5, 6, 7 }, 0, 2, 4, 6);\r\n    assertArrayEquals(new short[] { 2, 4, 6 }, array);\r\n    assertEquals(Short.TYPE, array.getClass().getComponentType());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ArrayUtilsRemoveMultipleTest.java",
  "methodName" : "testRemoveAllShortArrayNegativeIndex",
  "sourceCode" : "@Test\r\nvoid testRemoveAllShortArrayNegativeIndex() {\r\n    assertIndexOutOfBoundsException(() -> ArrayUtils.removeAll(new short[] { 1, 2 }, -1, 0));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ArrayUtilsRemoveMultipleTest.java",
  "methodName" : "testRemoveAllShortArrayOutOfBoundsIndex",
  "sourceCode" : "@Test\r\nvoid testRemoveAllShortArrayOutOfBoundsIndex() {\r\n    assertIndexOutOfBoundsException(() -> ArrayUtils.removeAll(new short[] { 1, 2 }, 2, 0));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ArrayUtilsRemoveMultipleTest.java",
  "methodName" : "testRemoveAllShortArrayRemoveNone",
  "sourceCode" : "@Test\r\nvoid testRemoveAllShortArrayRemoveNone() {\r\n    final short[] array1 = { 1, 2 };\r\n    final short[] array2 = ArrayUtils.removeAll(array1);\r\n    assertNotSame(array1, array2);\r\n    assertArrayEquals(array1, array2);\r\n    assertEquals(short.class, array2.getClass().getComponentType());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ArrayUtilsRemoveMultipleTest.java",
  "methodName" : "testRemoveElementBooleanArray",
  "sourceCode" : "@Test\r\nvoid testRemoveElementBooleanArray() {\r\n    boolean[] array;\r\n    array = ArrayUtils.removeElements((boolean[]) null, true);\r\n    assertNull(array);\r\n    array = ArrayUtils.removeElements(ArrayUtils.EMPTY_BOOLEAN_ARRAY, true);\r\n    assertArrayEquals(ArrayUtils.EMPTY_BOOLEAN_ARRAY, array);\r\n    assertEquals(Boolean.TYPE, array.getClass().getComponentType());\r\n    array = ArrayUtils.removeElements(new boolean[] { true }, true);\r\n    assertArrayEquals(ArrayUtils.EMPTY_BOOLEAN_ARRAY, array);\r\n    assertEquals(Boolean.TYPE, array.getClass().getComponentType());\r\n    array = ArrayUtils.removeElements(new boolean[] { true, false }, true);\r\n    assertArrayEquals(new boolean[] { false }, array);\r\n    assertEquals(Boolean.TYPE, array.getClass().getComponentType());\r\n    array = ArrayUtils.removeElements(new boolean[] { true, false, true }, true);\r\n    assertArrayEquals(new boolean[] { false, true }, array);\r\n    assertEquals(Boolean.TYPE, array.getClass().getComponentType());\r\n    array = ArrayUtils.removeElements((boolean[]) null, true, false);\r\n    assertNull(array);\r\n    array = ArrayUtils.removeElements(ArrayUtils.EMPTY_BOOLEAN_ARRAY, true, false);\r\n    assertArrayEquals(ArrayUtils.EMPTY_BOOLEAN_ARRAY, array);\r\n    assertEquals(Boolean.TYPE, array.getClass().getComponentType());\r\n    array = ArrayUtils.removeElements(new boolean[] { true }, true, false);\r\n    assertArrayEquals(ArrayUtils.EMPTY_BOOLEAN_ARRAY, array);\r\n    assertEquals(Boolean.TYPE, array.getClass().getComponentType());\r\n    array = ArrayUtils.removeElements(new boolean[] { true, false }, true, false);\r\n    assertArrayEquals(ArrayUtils.EMPTY_BOOLEAN_ARRAY, array);\r\n    assertEquals(Boolean.TYPE, array.getClass().getComponentType());\r\n    array = ArrayUtils.removeElements(new boolean[] { true, false }, true, true);\r\n    assertArrayEquals(new boolean[] { false }, array);\r\n    assertEquals(Boolean.TYPE, array.getClass().getComponentType());\r\n    array = ArrayUtils.removeElements(new boolean[] { true, false, true }, true, false);\r\n    assertArrayEquals(new boolean[] { true }, array);\r\n    assertEquals(Boolean.TYPE, array.getClass().getComponentType());\r\n    array = ArrayUtils.removeElements(new boolean[] { true, false, true }, true, true);\r\n    assertArrayEquals(new boolean[] { false }, array);\r\n    assertEquals(Boolean.TYPE, array.getClass().getComponentType());\r\n    array = ArrayUtils.removeElements(new boolean[] { true, false, true }, true, true, true, true);\r\n    assertArrayEquals(new boolean[] { false }, array);\r\n    assertEquals(Boolean.TYPE, array.getClass().getComponentType());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ArrayUtilsRemoveMultipleTest.java",
  "methodName" : "testRemoveElementByteArray",
  "sourceCode" : "@Test\r\nvoid testRemoveElementByteArray() {\r\n    byte[] array;\r\n    array = ArrayUtils.removeElements((byte[]) null, (byte) 1);\r\n    assertNull(array);\r\n    array = ArrayUtils.removeElements(ArrayUtils.EMPTY_BYTE_ARRAY, (byte) 1);\r\n    assertArrayEquals(ArrayUtils.EMPTY_BYTE_ARRAY, array);\r\n    assertEquals(Byte.TYPE, array.getClass().getComponentType());\r\n    array = ArrayUtils.removeElements(new byte[] { 1 }, (byte) 1);\r\n    assertArrayEquals(ArrayUtils.EMPTY_BYTE_ARRAY, array);\r\n    assertEquals(Byte.TYPE, array.getClass().getComponentType());\r\n    array = ArrayUtils.removeElements(new byte[] { 1, 2 }, (byte) 1);\r\n    assertArrayEquals(new byte[] { 2 }, array);\r\n    assertEquals(Byte.TYPE, array.getClass().getComponentType());\r\n    array = ArrayUtils.removeElements(new byte[] { 1, 2, 1 }, (byte) 1);\r\n    assertArrayEquals(new byte[] { 2, 1 }, array);\r\n    assertEquals(Byte.TYPE, array.getClass().getComponentType());\r\n    array = ArrayUtils.removeElements((byte[]) null, (byte) 1, (byte) 2);\r\n    assertNull(array);\r\n    array = ArrayUtils.removeElements(ArrayUtils.EMPTY_BYTE_ARRAY, (byte) 1, (byte) 2);\r\n    assertArrayEquals(ArrayUtils.EMPTY_BYTE_ARRAY, array);\r\n    assertEquals(Byte.TYPE, array.getClass().getComponentType());\r\n    array = ArrayUtils.removeElements(new byte[] { 1 }, (byte) 1, (byte) 2);\r\n    assertArrayEquals(ArrayUtils.EMPTY_BYTE_ARRAY, array);\r\n    assertEquals(Byte.TYPE, array.getClass().getComponentType());\r\n    array = ArrayUtils.removeElements(new byte[] { 1, 2 }, (byte) 1, (byte) 2);\r\n    assertArrayEquals(ArrayUtils.EMPTY_BYTE_ARRAY, array);\r\n    assertEquals(Byte.TYPE, array.getClass().getComponentType());\r\n    array = ArrayUtils.removeElements(new byte[] { 1, 2 }, (byte) 1, (byte) 1);\r\n    assertArrayEquals(new byte[] { 2 }, array);\r\n    assertEquals(Byte.TYPE, array.getClass().getComponentType());\r\n    array = ArrayUtils.removeElements(new byte[] { 1, 2, 1 }, (byte) 1, (byte) 2);\r\n    assertArrayEquals(new byte[] { 1 }, array);\r\n    assertEquals(Byte.TYPE, array.getClass().getComponentType());\r\n    array = ArrayUtils.removeElements(new byte[] { 1, 2, 1 }, (byte) 1, (byte) 1);\r\n    assertArrayEquals(new byte[] { 2 }, array);\r\n    assertEquals(Byte.TYPE, array.getClass().getComponentType());\r\n    array = ArrayUtils.removeElements(new byte[] { 1, 2, 1 }, (byte) 1, (byte) 1, (byte) 1, (byte) 1);\r\n    assertArrayEquals(new byte[] { 2 }, array);\r\n    assertEquals(Byte.TYPE, array.getClass().getComponentType());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ArrayUtilsRemoveMultipleTest.java",
  "methodName" : "testRemoveElementCharArray",
  "sourceCode" : "@Test\r\nvoid testRemoveElementCharArray() {\r\n    char[] array;\r\n    array = ArrayUtils.removeElements((char[]) null, 'a');\r\n    assertNull(array);\r\n    array = ArrayUtils.removeElements(ArrayUtils.EMPTY_CHAR_ARRAY, 'a');\r\n    assertArrayEquals(ArrayUtils.EMPTY_CHAR_ARRAY, array);\r\n    assertEquals(Character.TYPE, array.getClass().getComponentType());\r\n    array = ArrayUtils.removeElements(new char[] { 'a' }, 'a');\r\n    assertArrayEquals(ArrayUtils.EMPTY_CHAR_ARRAY, array);\r\n    assertEquals(Character.TYPE, array.getClass().getComponentType());\r\n    array = ArrayUtils.removeElements(new char[] { 'a', 'b' }, 'a');\r\n    assertArrayEquals(new char[] { 'b' }, array);\r\n    assertEquals(Character.TYPE, array.getClass().getComponentType());\r\n    array = ArrayUtils.removeElements(new char[] { 'a', 'b', 'a' }, 'a');\r\n    assertArrayEquals(new char[] { 'b', 'a' }, array);\r\n    assertEquals(Character.TYPE, array.getClass().getComponentType());\r\n    array = ArrayUtils.removeElements((char[]) null, 'a', 'b');\r\n    assertNull(array);\r\n    array = ArrayUtils.removeElements(ArrayUtils.EMPTY_CHAR_ARRAY, 'a', 'b');\r\n    assertArrayEquals(ArrayUtils.EMPTY_CHAR_ARRAY, array);\r\n    assertEquals(Character.TYPE, array.getClass().getComponentType());\r\n    array = ArrayUtils.removeElements(new char[] { 'a' }, 'a', 'b');\r\n    assertArrayEquals(ArrayUtils.EMPTY_CHAR_ARRAY, array);\r\n    assertEquals(Character.TYPE, array.getClass().getComponentType());\r\n    array = ArrayUtils.removeElements(new char[] { 'a', 'b' }, 'a', 'b');\r\n    assertArrayEquals(ArrayUtils.EMPTY_CHAR_ARRAY, array);\r\n    assertEquals(Character.TYPE, array.getClass().getComponentType());\r\n    array = ArrayUtils.removeElements(new char[] { 'a', 'b' }, 'a', 'a');\r\n    assertArrayEquals(new char[] { 'b' }, array);\r\n    assertEquals(Character.TYPE, array.getClass().getComponentType());\r\n    array = ArrayUtils.removeElements(new char[] { 'a', 'b', 'a' }, 'a', 'b');\r\n    assertArrayEquals(new char[] { 'a' }, array);\r\n    assertEquals(Character.TYPE, array.getClass().getComponentType());\r\n    array = ArrayUtils.removeElements(new char[] { 'a', 'b', 'a' }, 'a', 'a');\r\n    assertArrayEquals(new char[] { 'b' }, array);\r\n    assertEquals(Character.TYPE, array.getClass().getComponentType());\r\n    array = ArrayUtils.removeElements(new char[] { 'a', 'b', 'a' }, 'a', 'a', 'a', 'a');\r\n    assertArrayEquals(new char[] { 'b' }, array);\r\n    assertEquals(Character.TYPE, array.getClass().getComponentType());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ArrayUtilsRemoveMultipleTest.java",
  "methodName" : "testRemoveElementDoubleArray",
  "sourceCode" : "@Test\r\nvoid testRemoveElementDoubleArray() {\r\n    double[] array;\r\n    array = ArrayUtils.removeElements((double[]) null, (double) 1);\r\n    assertNull(array);\r\n    array = ArrayUtils.removeElements(ArrayUtils.EMPTY_DOUBLE_ARRAY, (double) 1);\r\n    assertArrayEquals(ArrayUtils.EMPTY_DOUBLE_ARRAY, array);\r\n    assertEquals(Double.TYPE, array.getClass().getComponentType());\r\n    array = ArrayUtils.removeElements(new double[] { 1 }, (double) 1);\r\n    assertArrayEquals(ArrayUtils.EMPTY_DOUBLE_ARRAY, array);\r\n    assertEquals(Double.TYPE, array.getClass().getComponentType());\r\n    array = ArrayUtils.removeElements(new double[] { 1, 2 }, (double) 1);\r\n    assertArrayEquals(new double[] { 2 }, array);\r\n    assertEquals(Double.TYPE, array.getClass().getComponentType());\r\n    array = ArrayUtils.removeElements(new double[] { 1, 2, 1 }, (double) 1);\r\n    assertArrayEquals(new double[] { 2, 1 }, array);\r\n    assertEquals(Double.TYPE, array.getClass().getComponentType());\r\n    array = ArrayUtils.removeElements((double[]) null, 1, 2);\r\n    assertNull(array);\r\n    array = ArrayUtils.removeElements(ArrayUtils.EMPTY_DOUBLE_ARRAY, 1, 2);\r\n    assertArrayEquals(ArrayUtils.EMPTY_DOUBLE_ARRAY, array);\r\n    assertEquals(Double.TYPE, array.getClass().getComponentType());\r\n    array = ArrayUtils.removeElements(new double[] { 1 }, 1, 2);\r\n    assertArrayEquals(ArrayUtils.EMPTY_DOUBLE_ARRAY, array);\r\n    assertEquals(Double.TYPE, array.getClass().getComponentType());\r\n    array = ArrayUtils.removeElements(new double[] { 1, 2 }, 1, 2);\r\n    assertArrayEquals(ArrayUtils.EMPTY_DOUBLE_ARRAY, array);\r\n    assertEquals(Double.TYPE, array.getClass().getComponentType());\r\n    array = ArrayUtils.removeElements(new double[] { 1, 2 }, 1, 1);\r\n    assertArrayEquals(new double[] { 2 }, array);\r\n    assertEquals(Double.TYPE, array.getClass().getComponentType());\r\n    array = ArrayUtils.removeElements(new double[] { 1, 2, 1 }, 1, 2);\r\n    assertArrayEquals(new double[] { 1 }, array);\r\n    assertEquals(Double.TYPE, array.getClass().getComponentType());\r\n    array = ArrayUtils.removeElements(new double[] { 1, 2, 1 }, 1, 1);\r\n    assertArrayEquals(new double[] { 2 }, array);\r\n    assertEquals(Double.TYPE, array.getClass().getComponentType());\r\n    array = ArrayUtils.removeElements(new double[] { 1, 2, 1 }, 1, 1, 1, 1);\r\n    assertArrayEquals(new double[] { 2 }, array);\r\n    assertEquals(Double.TYPE, array.getClass().getComponentType());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ArrayUtilsRemoveMultipleTest.java",
  "methodName" : "testRemoveElementFloatArray",
  "sourceCode" : "@Test\r\nvoid testRemoveElementFloatArray() {\r\n    float[] array;\r\n    array = ArrayUtils.removeElements((float[]) null, (float) 1);\r\n    assertNull(array);\r\n    array = ArrayUtils.removeElements(ArrayUtils.EMPTY_FLOAT_ARRAY, (float) 1);\r\n    assertArrayEquals(ArrayUtils.EMPTY_FLOAT_ARRAY, array);\r\n    assertEquals(Float.TYPE, array.getClass().getComponentType());\r\n    array = ArrayUtils.removeElements(new float[] { 1 }, (float) 1);\r\n    assertArrayEquals(ArrayUtils.EMPTY_FLOAT_ARRAY, array);\r\n    assertEquals(Float.TYPE, array.getClass().getComponentType());\r\n    array = ArrayUtils.removeElements(new float[] { 1, 2 }, (float) 1);\r\n    assertArrayEquals(new float[] { 2 }, array);\r\n    assertEquals(Float.TYPE, array.getClass().getComponentType());\r\n    array = ArrayUtils.removeElements(new float[] { 1, 2, 1 }, (float) 1);\r\n    assertArrayEquals(new float[] { 2, 1 }, array);\r\n    assertEquals(Float.TYPE, array.getClass().getComponentType());\r\n    array = ArrayUtils.removeElements((float[]) null, 1, 1);\r\n    assertNull(array);\r\n    array = ArrayUtils.removeElements(ArrayUtils.EMPTY_FLOAT_ARRAY, 1, 1);\r\n    assertArrayEquals(ArrayUtils.EMPTY_FLOAT_ARRAY, array);\r\n    assertEquals(Float.TYPE, array.getClass().getComponentType());\r\n    array = ArrayUtils.removeElements(new float[] { 1 }, 1, 1);\r\n    assertArrayEquals(ArrayUtils.EMPTY_FLOAT_ARRAY, array);\r\n    assertEquals(Float.TYPE, array.getClass().getComponentType());\r\n    array = ArrayUtils.removeElements(new float[] { 1, 2 }, 1, 2);\r\n    assertArrayEquals(ArrayUtils.EMPTY_FLOAT_ARRAY, array);\r\n    assertEquals(Float.TYPE, array.getClass().getComponentType());\r\n    array = ArrayUtils.removeElements(new float[] { 1, 2 }, 1, 1);\r\n    assertArrayEquals(new float[] { 2 }, array);\r\n    assertEquals(Float.TYPE, array.getClass().getComponentType());\r\n    array = ArrayUtils.removeElements(new float[] { 1, 2, 1 }, 1, 1);\r\n    assertArrayEquals(new float[] { 2 }, array);\r\n    assertEquals(Float.TYPE, array.getClass().getComponentType());\r\n    array = ArrayUtils.removeElements(new float[] { 1, 2, 1 }, 1, 2);\r\n    assertArrayEquals(new float[] { 1 }, array);\r\n    assertEquals(Float.TYPE, array.getClass().getComponentType());\r\n    array = ArrayUtils.removeElements(new float[] { 1, 2, 1 }, 1, 1, 1, 1);\r\n    assertArrayEquals(new float[] { 2 }, array);\r\n    assertEquals(Float.TYPE, array.getClass().getComponentType());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ArrayUtilsRemoveMultipleTest.java",
  "methodName" : "testRemoveElementIntArray",
  "sourceCode" : "@Test\r\nvoid testRemoveElementIntArray() {\r\n    int[] array;\r\n    array = ArrayUtils.removeElements((int[]) null, 1);\r\n    assertNull(array);\r\n    array = ArrayUtils.removeElements(ArrayUtils.EMPTY_INT_ARRAY, 1);\r\n    assertArrayEquals(ArrayUtils.EMPTY_INT_ARRAY, array);\r\n    assertEquals(Integer.TYPE, array.getClass().getComponentType());\r\n    array = ArrayUtils.removeElements(new int[] { 1 }, 1);\r\n    assertArrayEquals(ArrayUtils.EMPTY_INT_ARRAY, array);\r\n    assertEquals(Integer.TYPE, array.getClass().getComponentType());\r\n    array = ArrayUtils.removeElements(new int[] { 1, 2 }, 1);\r\n    assertArrayEquals(new int[] { 2 }, array);\r\n    assertEquals(Integer.TYPE, array.getClass().getComponentType());\r\n    array = ArrayUtils.removeElements(new int[] { 1, 2, 1 }, 1);\r\n    assertArrayEquals(new int[] { 2, 1 }, array);\r\n    assertEquals(Integer.TYPE, array.getClass().getComponentType());\r\n    array = ArrayUtils.removeElements((int[]) null, 1);\r\n    assertNull(array);\r\n    array = ArrayUtils.removeElements(ArrayUtils.EMPTY_INT_ARRAY, 1, 1);\r\n    assertArrayEquals(ArrayUtils.EMPTY_INT_ARRAY, array);\r\n    assertEquals(Integer.TYPE, array.getClass().getComponentType());\r\n    array = ArrayUtils.removeElements(new int[] { 1 }, 1, 1);\r\n    assertArrayEquals(ArrayUtils.EMPTY_INT_ARRAY, array);\r\n    assertEquals(Integer.TYPE, array.getClass().getComponentType());\r\n    array = ArrayUtils.removeElements(new int[] { 1, 2 }, 1, 2);\r\n    assertArrayEquals(ArrayUtils.EMPTY_INT_ARRAY, array);\r\n    assertEquals(Integer.TYPE, array.getClass().getComponentType());\r\n    array = ArrayUtils.removeElements(new int[] { 1, 2 }, 1, 1);\r\n    assertArrayEquals(new int[] { 2 }, array);\r\n    assertEquals(Integer.TYPE, array.getClass().getComponentType());\r\n    array = ArrayUtils.removeElements(new int[] { 1, 2, 1 }, 1, 2);\r\n    assertArrayEquals(new int[] { 1 }, array);\r\n    assertEquals(Integer.TYPE, array.getClass().getComponentType());\r\n    array = ArrayUtils.removeElements(new int[] { 1, 2, 1 }, 1, 1);\r\n    assertArrayEquals(new int[] { 2 }, array);\r\n    assertEquals(Integer.TYPE, array.getClass().getComponentType());\r\n    array = ArrayUtils.removeElements(new int[] { 1, 2, 1 }, 1, 1, 1, 1);\r\n    assertArrayEquals(new int[] { 2 }, array);\r\n    assertEquals(Integer.TYPE, array.getClass().getComponentType());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ArrayUtilsRemoveMultipleTest.java",
  "methodName" : "testRemoveElementLongArray",
  "sourceCode" : "@Test\r\nvoid testRemoveElementLongArray() {\r\n    long[] array;\r\n    array = ArrayUtils.removeElements((long[]) null, 1L);\r\n    assertNull(array);\r\n    array = ArrayUtils.removeElements(ArrayUtils.EMPTY_LONG_ARRAY, 1L);\r\n    assertArrayEquals(ArrayUtils.EMPTY_LONG_ARRAY, array);\r\n    assertEquals(Long.TYPE, array.getClass().getComponentType());\r\n    array = ArrayUtils.removeElements(new long[] { 1 }, 1L);\r\n    assertArrayEquals(ArrayUtils.EMPTY_LONG_ARRAY, array);\r\n    assertEquals(Long.TYPE, array.getClass().getComponentType());\r\n    array = ArrayUtils.removeElements(new long[] { 1, 2 }, 1L);\r\n    assertArrayEquals(new long[] { 2 }, array);\r\n    assertEquals(Long.TYPE, array.getClass().getComponentType());\r\n    array = ArrayUtils.removeElements(new long[] { 1, 2, 1 }, 1L);\r\n    assertArrayEquals(new long[] { 2, 1 }, array);\r\n    assertEquals(Long.TYPE, array.getClass().getComponentType());\r\n    array = ArrayUtils.removeElements((long[]) null, 1L, 1L);\r\n    assertNull(array);\r\n    array = ArrayUtils.removeElements(ArrayUtils.EMPTY_LONG_ARRAY, 1L, 1L);\r\n    assertArrayEquals(ArrayUtils.EMPTY_LONG_ARRAY, array);\r\n    assertEquals(Long.TYPE, array.getClass().getComponentType());\r\n    array = ArrayUtils.removeElements(new long[] { 1 }, 1L, 1L);\r\n    assertArrayEquals(ArrayUtils.EMPTY_LONG_ARRAY, array);\r\n    assertEquals(Long.TYPE, array.getClass().getComponentType());\r\n    array = ArrayUtils.removeElements(new long[] { 1, 2 }, 1L, 2L);\r\n    assertArrayEquals(ArrayUtils.EMPTY_LONG_ARRAY, array);\r\n    assertEquals(Long.TYPE, array.getClass().getComponentType());\r\n    array = ArrayUtils.removeElements(new long[] { 1, 2 }, 1L, 1L);\r\n    assertArrayEquals(new long[] { 2 }, array);\r\n    assertEquals(Long.TYPE, array.getClass().getComponentType());\r\n    array = ArrayUtils.removeElements(new long[] { 1, 2, 1 }, 1L, 1L);\r\n    assertArrayEquals(new long[] { 2 }, array);\r\n    assertEquals(Long.TYPE, array.getClass().getComponentType());\r\n    array = ArrayUtils.removeElements(new long[] { 1, 2, 1 }, 1L, 2L);\r\n    assertArrayEquals(new long[] { 1 }, array);\r\n    assertEquals(Long.TYPE, array.getClass().getComponentType());\r\n    array = ArrayUtils.removeElements(new long[] { 1, 2, 1 }, 1L, 1L, 1L, 1L);\r\n    assertArrayEquals(new long[] { 2 }, array);\r\n    assertEquals(Long.TYPE, array.getClass().getComponentType());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ArrayUtilsRemoveMultipleTest.java",
  "methodName" : "testRemoveElementShortArray",
  "sourceCode" : "@Test\r\nvoid testRemoveElementShortArray() {\r\n    short[] array;\r\n    array = ArrayUtils.removeElements((short[]) null, (short) 1);\r\n    assertNull(array);\r\n    array = ArrayUtils.removeElements(ArrayUtils.EMPTY_SHORT_ARRAY, (short) 1);\r\n    assertArrayEquals(ArrayUtils.EMPTY_SHORT_ARRAY, array);\r\n    assertEquals(Short.TYPE, array.getClass().getComponentType());\r\n    array = ArrayUtils.removeElements(new short[] { 1 }, (short) 1);\r\n    assertArrayEquals(ArrayUtils.EMPTY_SHORT_ARRAY, array);\r\n    assertEquals(Short.TYPE, array.getClass().getComponentType());\r\n    array = ArrayUtils.removeElements(new short[] { 1, 2 }, (short) 1);\r\n    assertArrayEquals(new short[] { 2 }, array);\r\n    assertEquals(Short.TYPE, array.getClass().getComponentType());\r\n    array = ArrayUtils.removeElements(new short[] { 1, 2, 1 }, (short) 1);\r\n    assertArrayEquals(new short[] { 2, 1 }, array);\r\n    assertEquals(Short.TYPE, array.getClass().getComponentType());\r\n    array = ArrayUtils.removeElements((short[]) null, (short) 1, (short) 1);\r\n    assertNull(array);\r\n    array = ArrayUtils.removeElements(ArrayUtils.EMPTY_SHORT_ARRAY, (short) 1, (short) 1);\r\n    assertArrayEquals(ArrayUtils.EMPTY_SHORT_ARRAY, array);\r\n    assertEquals(Short.TYPE, array.getClass().getComponentType());\r\n    array = ArrayUtils.removeElements(new short[] { 1 }, (short) 1, (short) 1);\r\n    assertArrayEquals(ArrayUtils.EMPTY_SHORT_ARRAY, array);\r\n    assertEquals(Short.TYPE, array.getClass().getComponentType());\r\n    array = ArrayUtils.removeElements(new short[] { 1, 2 }, (short) 1, (short) 2);\r\n    assertArrayEquals(ArrayUtils.EMPTY_SHORT_ARRAY, array);\r\n    assertEquals(Short.TYPE, array.getClass().getComponentType());\r\n    array = ArrayUtils.removeElements(new short[] { 1, 2 }, (short) 1, (short) 1);\r\n    assertArrayEquals(new short[] { 2 }, array);\r\n    assertEquals(Short.TYPE, array.getClass().getComponentType());\r\n    array = ArrayUtils.removeElements(new short[] { 1, 2, 1 }, (short) 1, (short) 1);\r\n    assertArrayEquals(new short[] { 2 }, array);\r\n    assertEquals(Short.TYPE, array.getClass().getComponentType());\r\n    array = ArrayUtils.removeElements(new short[] { 1, 2, 1 }, (short) 1, (short) 2);\r\n    assertArrayEquals(new short[] { 1 }, array);\r\n    assertEquals(Short.TYPE, array.getClass().getComponentType());\r\n    array = ArrayUtils.removeElements(new short[] { 1, 2, 1 }, (short) 1, (short) 1, (short) 1, (short) 1);\r\n    assertArrayEquals(new short[] { 2 }, array);\r\n    assertEquals(Short.TYPE, array.getClass().getComponentType());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ArrayUtilsRemoveMultipleTest.java",
  "methodName" : "testRemoveElementsObjectArray",
  "sourceCode" : "@Test\r\nvoid testRemoveElementsObjectArray() {\r\n    Object[] array;\r\n    array = ArrayUtils.removeElements((Object[]) null, \"a\");\r\n    assertNull(array);\r\n    array = ArrayUtils.removeElements(ArrayUtils.EMPTY_OBJECT_ARRAY, \"a\");\r\n    assertArrayEquals(ArrayUtils.EMPTY_OBJECT_ARRAY, array);\r\n    assertEquals(Object.class, array.getClass().getComponentType());\r\n    array = ArrayUtils.removeElements(new Object[] { \"a\" }, \"a\");\r\n    assertArrayEquals(ArrayUtils.EMPTY_OBJECT_ARRAY, array);\r\n    assertEquals(Object.class, array.getClass().getComponentType());\r\n    array = ArrayUtils.removeElements(new Object[] { \"a\", \"b\" }, \"a\");\r\n    assertArrayEquals(new Object[] { \"b\" }, array);\r\n    assertEquals(Object.class, array.getClass().getComponentType());\r\n    array = ArrayUtils.removeElements(new Object[] { \"a\", \"b\", \"a\" }, \"a\");\r\n    assertArrayEquals(new Object[] { \"b\", \"a\" }, array);\r\n    assertEquals(Object.class, array.getClass().getComponentType());\r\n    array = ArrayUtils.removeElements((Object[]) null, \"a\", \"b\");\r\n    assertNull(array);\r\n    array = ArrayUtils.removeElements(ArrayUtils.EMPTY_OBJECT_ARRAY, \"a\", \"b\");\r\n    assertArrayEquals(ArrayUtils.EMPTY_OBJECT_ARRAY, array);\r\n    assertEquals(Object.class, array.getClass().getComponentType());\r\n    array = ArrayUtils.removeElements(new Object[] { \"a\" }, \"a\", \"b\");\r\n    assertArrayEquals(ArrayUtils.EMPTY_OBJECT_ARRAY, array);\r\n    assertEquals(Object.class, array.getClass().getComponentType());\r\n    array = ArrayUtils.removeElements(new Object[] { \"a\", \"b\" }, \"a\", \"c\");\r\n    assertArrayEquals(new Object[] { \"b\" }, array);\r\n    assertEquals(Object.class, array.getClass().getComponentType());\r\n    array = ArrayUtils.removeElements(new Object[] { \"a\", \"b\", \"a\" }, \"a\");\r\n    assertArrayEquals(new Object[] { \"b\", \"a\" }, array);\r\n    assertEquals(Object.class, array.getClass().getComponentType());\r\n    array = ArrayUtils.removeElements(new Object[] { \"a\", \"b\", \"a\" }, \"a\", \"b\");\r\n    assertArrayEquals(new Object[] { \"a\" }, array);\r\n    assertEquals(Object.class, array.getClass().getComponentType());\r\n    array = ArrayUtils.removeElements(new Object[] { \"a\", \"b\", \"a\" }, \"a\", \"a\");\r\n    assertArrayEquals(new Object[] { \"b\" }, array);\r\n    assertEquals(Object.class, array.getClass().getComponentType());\r\n    array = ArrayUtils.removeElements(new Object[] { \"a\", \"b\", \"a\" }, \"a\", \"a\", \"a\", \"a\");\r\n    assertArrayEquals(new Object[] { \"b\" }, array);\r\n    assertEquals(Object.class, array.getClass().getComponentType());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ArrayUtilsRemoveTest.java",
  "methodName" : "testRemoveAllBooleanOccurences",
  "sourceCode" : "@Test\r\nvoid testRemoveAllBooleanOccurences() {\r\n    boolean[] a = null;\r\n    assertNull(ArrayUtils.removeAllOccurences(a, true));\r\n    a = new boolean[0];\r\n    assertArrayEquals(ArrayUtils.EMPTY_BOOLEAN_ARRAY, ArrayUtils.removeAllOccurences(a, true));\r\n    a = new boolean[] { true };\r\n    assertArrayEquals(ArrayUtils.EMPTY_BOOLEAN_ARRAY, ArrayUtils.removeAllOccurences(a, true));\r\n    a = new boolean[] { true, true };\r\n    assertArrayEquals(ArrayUtils.EMPTY_BOOLEAN_ARRAY, ArrayUtils.removeAllOccurences(a, true));\r\n    a = new boolean[] { false, true, true, false, true };\r\n    assertArrayEquals(new boolean[] { false, false }, ArrayUtils.removeAllOccurences(a, true));\r\n    a = new boolean[] { false, true, true, false, true };\r\n    assertArrayEquals(new boolean[] { true, true, true }, ArrayUtils.removeAllOccurences(a, false));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ArrayUtilsRemoveTest.java",
  "methodName" : "testRemoveAllBooleanOccurrences",
  "sourceCode" : "@Test\r\nvoid testRemoveAllBooleanOccurrences() {\r\n    boolean[] a = null;\r\n    assertNull(ArrayUtils.removeAllOccurrences(a, true));\r\n    a = new boolean[0];\r\n    assertArrayEquals(ArrayUtils.EMPTY_BOOLEAN_ARRAY, ArrayUtils.removeAllOccurrences(a, true));\r\n    a = new boolean[] { true };\r\n    assertArrayEquals(ArrayUtils.EMPTY_BOOLEAN_ARRAY, ArrayUtils.removeAllOccurrences(a, true));\r\n    a = new boolean[] { true, true };\r\n    assertArrayEquals(ArrayUtils.EMPTY_BOOLEAN_ARRAY, ArrayUtils.removeAllOccurrences(a, true));\r\n    a = new boolean[] { false, true, true, false, true };\r\n    assertArrayEquals(new boolean[] { false, false }, ArrayUtils.removeAllOccurrences(a, true));\r\n    a = new boolean[] { false, true, true, false, true };\r\n    assertArrayEquals(new boolean[] { true, true, true }, ArrayUtils.removeAllOccurrences(a, false));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ArrayUtilsRemoveTest.java",
  "methodName" : "testRemoveAllByteOccurences",
  "sourceCode" : "@Test\r\nvoid testRemoveAllByteOccurences() {\r\n    byte[] a = null;\r\n    assertNull(ArrayUtils.removeAllOccurences(a, (byte) 2));\r\n    a = new byte[0];\r\n    assertArrayEquals(ArrayUtils.EMPTY_BYTE_ARRAY, ArrayUtils.removeAllOccurences(a, (byte) 2));\r\n    a = new byte[] { 2 };\r\n    assertArrayEquals(ArrayUtils.EMPTY_BYTE_ARRAY, ArrayUtils.removeAllOccurences(a, (byte) 2));\r\n    a = new byte[] { 2, 2 };\r\n    assertArrayEquals(ArrayUtils.EMPTY_BYTE_ARRAY, ArrayUtils.removeAllOccurences(a, (byte) 2));\r\n    a = new byte[] { 1, 2, 2, 3, 2 };\r\n    assertArrayEquals(new byte[] { 1, 3 }, ArrayUtils.removeAllOccurences(a, (byte) 2));\r\n    a = new byte[] { 1, 2, 2, 3, 2 };\r\n    assertArrayEquals(new byte[] { 1, 2, 2, 3, 2 }, ArrayUtils.removeAllOccurences(a, (byte) 4));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ArrayUtilsRemoveTest.java",
  "methodName" : "testRemoveAllByteOccurrences",
  "sourceCode" : "@Test\r\nvoid testRemoveAllByteOccurrences() {\r\n    byte[] a = null;\r\n    assertNull(ArrayUtils.removeAllOccurrences(a, (byte) 2));\r\n    a = new byte[0];\r\n    assertArrayEquals(ArrayUtils.EMPTY_BYTE_ARRAY, ArrayUtils.removeAllOccurrences(a, (byte) 2));\r\n    a = new byte[] { 2 };\r\n    assertArrayEquals(ArrayUtils.EMPTY_BYTE_ARRAY, ArrayUtils.removeAllOccurrences(a, (byte) 2));\r\n    a = new byte[] { 2, 2 };\r\n    assertArrayEquals(ArrayUtils.EMPTY_BYTE_ARRAY, ArrayUtils.removeAllOccurrences(a, (byte) 2));\r\n    a = new byte[] { 1, 2, 2, 3, 2 };\r\n    assertArrayEquals(new byte[] { 1, 3 }, ArrayUtils.removeAllOccurrences(a, (byte) 2));\r\n    a = new byte[] { 1, 2, 2, 3, 2 };\r\n    assertArrayEquals(new byte[] { 1, 2, 2, 3, 2 }, ArrayUtils.removeAllOccurrences(a, (byte) 4));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ArrayUtilsRemoveTest.java",
  "methodName" : "testRemoveAllCharOccurences",
  "sourceCode" : "@Test\r\nvoid testRemoveAllCharOccurences() {\r\n    char[] a = null;\r\n    assertNull(ArrayUtils.removeAllOccurences(a, '2'));\r\n    a = new char[0];\r\n    assertArrayEquals(ArrayUtils.EMPTY_CHAR_ARRAY, ArrayUtils.removeAllOccurences(a, '2'));\r\n    a = new char[] { '2' };\r\n    assertArrayEquals(ArrayUtils.EMPTY_CHAR_ARRAY, ArrayUtils.removeAllOccurences(a, '2'));\r\n    a = new char[] { '2', '2' };\r\n    assertArrayEquals(ArrayUtils.EMPTY_CHAR_ARRAY, ArrayUtils.removeAllOccurences(a, '2'));\r\n    a = new char[] { '1', '2', '2', '3', '2' };\r\n    assertArrayEquals(new char[] { '1', '3' }, ArrayUtils.removeAllOccurences(a, '2'));\r\n    a = new char[] { '1', '2', '2', '3', '2' };\r\n    assertArrayEquals(new char[] { '1', '2', '2', '3', '2' }, ArrayUtils.removeAllOccurences(a, '4'));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ArrayUtilsRemoveTest.java",
  "methodName" : "testRemoveAllCharOccurrences",
  "sourceCode" : "@Test\r\nvoid testRemoveAllCharOccurrences() {\r\n    char[] a = null;\r\n    assertNull(ArrayUtils.removeAllOccurrences(a, '2'));\r\n    a = new char[0];\r\n    assertArrayEquals(ArrayUtils.EMPTY_CHAR_ARRAY, ArrayUtils.removeAllOccurrences(a, '2'));\r\n    a = new char[] { '2' };\r\n    assertArrayEquals(ArrayUtils.EMPTY_CHAR_ARRAY, ArrayUtils.removeAllOccurrences(a, '2'));\r\n    a = new char[] { '2', '2' };\r\n    assertArrayEquals(ArrayUtils.EMPTY_CHAR_ARRAY, ArrayUtils.removeAllOccurrences(a, '2'));\r\n    a = new char[] { '1', '2', '2', '3', '2' };\r\n    assertArrayEquals(new char[] { '1', '3' }, ArrayUtils.removeAllOccurrences(a, '2'));\r\n    a = new char[] { '1', '2', '2', '3', '2' };\r\n    assertArrayEquals(new char[] { '1', '2', '2', '3', '2' }, ArrayUtils.removeAllOccurrences(a, '4'));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ArrayUtilsRemoveTest.java",
  "methodName" : "testRemoveAllDoubleOccurences",
  "sourceCode" : "@Test\r\nvoid testRemoveAllDoubleOccurences() {\r\n    double[] a = null;\r\n    assertNull(ArrayUtils.removeAllOccurences(a, 2));\r\n    a = new double[0];\r\n    assertArrayEquals(ArrayUtils.EMPTY_DOUBLE_ARRAY, ArrayUtils.removeAllOccurences(a, 2));\r\n    a = new double[] { 2 };\r\n    assertArrayEquals(ArrayUtils.EMPTY_DOUBLE_ARRAY, ArrayUtils.removeAllOccurences(a, 2));\r\n    a = new double[] { 2, 2 };\r\n    assertArrayEquals(ArrayUtils.EMPTY_DOUBLE_ARRAY, ArrayUtils.removeAllOccurences(a, 2));\r\n    a = new double[] { 1, 2, 2, 3, 2 };\r\n    assertArrayEquals(new double[] { 1, 3 }, ArrayUtils.removeAllOccurences(a, 2));\r\n    a = new double[] { 1, 2, 2, 3, 2 };\r\n    assertArrayEquals(new double[] { 1, 2, 2, 3, 2 }, ArrayUtils.removeAllOccurences(a, 4));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ArrayUtilsRemoveTest.java",
  "methodName" : "testRemoveAllDoubleOccurrences",
  "sourceCode" : "@Test\r\nvoid testRemoveAllDoubleOccurrences() {\r\n    double[] a = null;\r\n    assertNull(ArrayUtils.removeAllOccurrences(a, 2));\r\n    a = new double[0];\r\n    assertArrayEquals(ArrayUtils.EMPTY_DOUBLE_ARRAY, ArrayUtils.removeAllOccurrences(a, 2));\r\n    a = new double[] { 2 };\r\n    assertArrayEquals(ArrayUtils.EMPTY_DOUBLE_ARRAY, ArrayUtils.removeAllOccurrences(a, 2));\r\n    a = new double[] { 2, 2 };\r\n    assertArrayEquals(ArrayUtils.EMPTY_DOUBLE_ARRAY, ArrayUtils.removeAllOccurrences(a, 2));\r\n    a = new double[] { 1, 2, 2, 3, 2 };\r\n    assertArrayEquals(new double[] { 1, 3 }, ArrayUtils.removeAllOccurrences(a, 2));\r\n    a = new double[] { 1, 2, 2, 3, 2 };\r\n    assertArrayEquals(new double[] { 1, 2, 2, 3, 2 }, ArrayUtils.removeAllOccurrences(a, 4));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ArrayUtilsRemoveTest.java",
  "methodName" : "testRemoveAllFloatOccurences",
  "sourceCode" : "@Test\r\nvoid testRemoveAllFloatOccurences() {\r\n    float[] a = null;\r\n    assertNull(ArrayUtils.removeAllOccurences(a, 2));\r\n    a = new float[0];\r\n    assertArrayEquals(ArrayUtils.EMPTY_FLOAT_ARRAY, ArrayUtils.removeAllOccurences(a, 2));\r\n    a = new float[] { 2 };\r\n    assertArrayEquals(ArrayUtils.EMPTY_FLOAT_ARRAY, ArrayUtils.removeAllOccurences(a, 2));\r\n    a = new float[] { 2, 2 };\r\n    assertArrayEquals(ArrayUtils.EMPTY_FLOAT_ARRAY, ArrayUtils.removeAllOccurences(a, 2));\r\n    a = new float[] { 1, 2, 2, 3, 2 };\r\n    assertArrayEquals(new float[] { 1, 3 }, ArrayUtils.removeAllOccurences(a, 2));\r\n    a = new float[] { 1, 2, 2, 3, 2 };\r\n    assertArrayEquals(new float[] { 1, 2, 2, 3, 2 }, ArrayUtils.removeAllOccurences(a, 4));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ArrayUtilsRemoveTest.java",
  "methodName" : "testRemoveAllFloatOccurrences",
  "sourceCode" : "@Test\r\nvoid testRemoveAllFloatOccurrences() {\r\n    float[] a = null;\r\n    assertNull(ArrayUtils.removeAllOccurrences(a, 2));\r\n    a = new float[0];\r\n    assertArrayEquals(ArrayUtils.EMPTY_FLOAT_ARRAY, ArrayUtils.removeAllOccurrences(a, 2));\r\n    a = new float[] { 2 };\r\n    assertArrayEquals(ArrayUtils.EMPTY_FLOAT_ARRAY, ArrayUtils.removeAllOccurrences(a, 2));\r\n    a = new float[] { 2, 2 };\r\n    assertArrayEquals(ArrayUtils.EMPTY_FLOAT_ARRAY, ArrayUtils.removeAllOccurrences(a, 2));\r\n    a = new float[] { 1, 2, 2, 3, 2 };\r\n    assertArrayEquals(new float[] { 1, 3 }, ArrayUtils.removeAllOccurrences(a, 2));\r\n    a = new float[] { 1, 2, 2, 3, 2 };\r\n    assertArrayEquals(new float[] { 1, 2, 2, 3, 2 }, ArrayUtils.removeAllOccurrences(a, 4));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ArrayUtilsRemoveTest.java",
  "methodName" : "testRemoveAllIntOccurences",
  "sourceCode" : "@Test\r\nvoid testRemoveAllIntOccurences() {\r\n    int[] a = null;\r\n    assertNull(ArrayUtils.removeAllOccurences(a, 2));\r\n    a = new int[0];\r\n    assertArrayEquals(ArrayUtils.EMPTY_INT_ARRAY, ArrayUtils.removeAllOccurences(a, 2));\r\n    a = new int[] { 2 };\r\n    assertArrayEquals(ArrayUtils.EMPTY_INT_ARRAY, ArrayUtils.removeAllOccurences(a, 2));\r\n    a = new int[] { 2, 2 };\r\n    assertArrayEquals(ArrayUtils.EMPTY_INT_ARRAY, ArrayUtils.removeAllOccurences(a, 2));\r\n    a = new int[] { 1, 2, 2, 3, 2 };\r\n    assertArrayEquals(new int[] { 1, 3 }, ArrayUtils.removeAllOccurences(a, 2));\r\n    a = new int[] { 1, 2, 2, 3, 2 };\r\n    assertArrayEquals(new int[] { 1, 2, 2, 3, 2 }, ArrayUtils.removeAllOccurences(a, 4));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ArrayUtilsRemoveTest.java",
  "methodName" : "testRemoveAllIntOccurrences",
  "sourceCode" : "@Test\r\nvoid testRemoveAllIntOccurrences() {\r\n    int[] a = null;\r\n    assertNull(ArrayUtils.removeAllOccurrences(a, 2));\r\n    a = new int[0];\r\n    assertArrayEquals(ArrayUtils.EMPTY_INT_ARRAY, ArrayUtils.removeAllOccurrences(a, 2));\r\n    a = new int[] { 2 };\r\n    assertArrayEquals(ArrayUtils.EMPTY_INT_ARRAY, ArrayUtils.removeAllOccurrences(a, 2));\r\n    a = new int[] { 2, 2 };\r\n    assertArrayEquals(ArrayUtils.EMPTY_INT_ARRAY, ArrayUtils.removeAllOccurrences(a, 2));\r\n    a = new int[] { 1, 2, 2, 3, 2 };\r\n    assertArrayEquals(new int[] { 1, 3 }, ArrayUtils.removeAllOccurrences(a, 2));\r\n    a = new int[] { 1, 2, 2, 3, 2 };\r\n    assertArrayEquals(new int[] { 1, 2, 2, 3, 2 }, ArrayUtils.removeAllOccurrences(a, 4));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ArrayUtilsRemoveTest.java",
  "methodName" : "testRemoveAllLongOccurences",
  "sourceCode" : "@Test\r\nvoid testRemoveAllLongOccurences() {\r\n    long[] a = null;\r\n    assertNull(ArrayUtils.removeAllOccurences(a, 2));\r\n    a = new long[0];\r\n    assertArrayEquals(ArrayUtils.EMPTY_LONG_ARRAY, ArrayUtils.removeAllOccurences(a, 2));\r\n    a = new long[] { 2 };\r\n    assertArrayEquals(ArrayUtils.EMPTY_LONG_ARRAY, ArrayUtils.removeAllOccurences(a, 2));\r\n    a = new long[] { 2, 2 };\r\n    assertArrayEquals(ArrayUtils.EMPTY_LONG_ARRAY, ArrayUtils.removeAllOccurences(a, 2));\r\n    a = new long[] { 1, 2, 2, 3, 2 };\r\n    assertArrayEquals(new long[] { 1, 3 }, ArrayUtils.removeAllOccurences(a, 2));\r\n    a = new long[] { 1, 2, 2, 3, 2 };\r\n    assertArrayEquals(new long[] { 1, 2, 2, 3, 2 }, ArrayUtils.removeAllOccurences(a, 4));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ArrayUtilsRemoveTest.java",
  "methodName" : "testRemoveAllLongOccurrences",
  "sourceCode" : "@Test\r\nvoid testRemoveAllLongOccurrences() {\r\n    long[] a = null;\r\n    assertNull(ArrayUtils.removeAllOccurrences(a, 2));\r\n    a = new long[0];\r\n    assertArrayEquals(ArrayUtils.EMPTY_LONG_ARRAY, ArrayUtils.removeAllOccurrences(a, 2));\r\n    a = new long[] { 2 };\r\n    assertArrayEquals(ArrayUtils.EMPTY_LONG_ARRAY, ArrayUtils.removeAllOccurrences(a, 2));\r\n    a = new long[] { 2, 2 };\r\n    assertArrayEquals(ArrayUtils.EMPTY_LONG_ARRAY, ArrayUtils.removeAllOccurrences(a, 2));\r\n    a = new long[] { 1, 2, 2, 3, 2 };\r\n    assertArrayEquals(new long[] { 1, 3 }, ArrayUtils.removeAllOccurrences(a, 2));\r\n    a = new long[] { 1, 2, 2, 3, 2 };\r\n    assertArrayEquals(new long[] { 1, 2, 2, 3, 2 }, ArrayUtils.removeAllOccurrences(a, 4));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ArrayUtilsRemoveTest.java",
  "methodName" : "testRemoveAllObjectOccurences",
  "sourceCode" : "@Test\r\nvoid testRemoveAllObjectOccurences() {\r\n    String[] a = null;\r\n    assertNull(ArrayUtils.removeAllOccurences(a, \"2\"));\r\n    a = new String[0];\r\n    assertArrayEquals(ArrayUtils.EMPTY_STRING_ARRAY, ArrayUtils.removeAllOccurences(a, \"2\"));\r\n    a = new String[] { \"2\" };\r\n    assertArrayEquals(ArrayUtils.EMPTY_STRING_ARRAY, ArrayUtils.removeAllOccurences(a, \"2\"));\r\n    a = new String[] { \"2\", \"2\" };\r\n    assertArrayEquals(ArrayUtils.EMPTY_STRING_ARRAY, ArrayUtils.removeAllOccurences(a, \"2\"));\r\n    a = new String[] { \"1\", \"2\", \"2\", \"3\", \"2\" };\r\n    assertArrayEquals(new String[] { \"1\", \"3\" }, ArrayUtils.removeAllOccurences(a, \"2\"));\r\n    a = new String[] { \"1\", \"2\", \"2\", \"3\", \"2\" };\r\n    assertArrayEquals(new String[] { \"1\", \"2\", \"2\", \"3\", \"2\" }, ArrayUtils.removeAllOccurences(a, \"4\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ArrayUtilsRemoveTest.java",
  "methodName" : "testRemoveAllObjectOccurrences",
  "sourceCode" : "@Test\r\nvoid testRemoveAllObjectOccurrences() {\r\n    String[] a = null;\r\n    assertNull(ArrayUtils.removeAllOccurrences(a, \"2\"));\r\n    a = new String[0];\r\n    assertArrayEquals(ArrayUtils.EMPTY_STRING_ARRAY, ArrayUtils.removeAllOccurrences(a, \"2\"));\r\n    a = new String[] { \"2\" };\r\n    assertArrayEquals(ArrayUtils.EMPTY_STRING_ARRAY, ArrayUtils.removeAllOccurrences(a, \"2\"));\r\n    a = new String[] { \"2\", \"2\" };\r\n    assertArrayEquals(ArrayUtils.EMPTY_STRING_ARRAY, ArrayUtils.removeAllOccurrences(a, \"2\"));\r\n    a = new String[] { \"1\", \"2\", \"2\", \"3\", \"2\" };\r\n    assertArrayEquals(new String[] { \"1\", \"3\" }, ArrayUtils.removeAllOccurrences(a, \"2\"));\r\n    a = new String[] { \"1\", \"2\", \"2\", \"3\", \"2\" };\r\n    assertArrayEquals(new String[] { \"1\", \"2\", \"2\", \"3\", \"2\" }, ArrayUtils.removeAllOccurrences(a, \"4\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ArrayUtilsRemoveTest.java",
  "methodName" : "testRemoveAllShortOccurences",
  "sourceCode" : "@Test\r\nvoid testRemoveAllShortOccurences() {\r\n    short[] a = null;\r\n    assertNull(ArrayUtils.removeAllOccurences(a, (short) 2));\r\n    a = new short[0];\r\n    assertArrayEquals(ArrayUtils.EMPTY_SHORT_ARRAY, ArrayUtils.removeAllOccurences(a, (short) 2));\r\n    a = new short[] { 2 };\r\n    assertArrayEquals(ArrayUtils.EMPTY_SHORT_ARRAY, ArrayUtils.removeAllOccurences(a, (short) 2));\r\n    a = new short[] { 2, 2 };\r\n    assertArrayEquals(ArrayUtils.EMPTY_SHORT_ARRAY, ArrayUtils.removeAllOccurences(a, (short) 2));\r\n    a = new short[] { 1, 2, 2, 3, 2 };\r\n    assertArrayEquals(new short[] { 1, 3 }, ArrayUtils.removeAllOccurences(a, (short) 2));\r\n    a = new short[] { 1, 2, 2, 3, 2 };\r\n    assertArrayEquals(new short[] { 1, 2, 2, 3, 2 }, ArrayUtils.removeAllOccurences(a, (short) 4));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ArrayUtilsRemoveTest.java",
  "methodName" : "testRemoveAllShortOccurrences",
  "sourceCode" : "@Test\r\nvoid testRemoveAllShortOccurrences() {\r\n    short[] a = null;\r\n    assertNull(ArrayUtils.removeAllOccurrences(a, (short) 2));\r\n    a = new short[0];\r\n    assertArrayEquals(ArrayUtils.EMPTY_SHORT_ARRAY, ArrayUtils.removeAllOccurrences(a, (short) 2));\r\n    a = new short[] { 2 };\r\n    assertArrayEquals(ArrayUtils.EMPTY_SHORT_ARRAY, ArrayUtils.removeAllOccurrences(a, (short) 2));\r\n    a = new short[] { 2, 2 };\r\n    assertArrayEquals(ArrayUtils.EMPTY_SHORT_ARRAY, ArrayUtils.removeAllOccurrences(a, (short) 2));\r\n    a = new short[] { 1, 2, 2, 3, 2 };\r\n    assertArrayEquals(new short[] { 1, 3 }, ArrayUtils.removeAllOccurrences(a, (short) 2));\r\n    a = new short[] { 1, 2, 2, 3, 2 };\r\n    assertArrayEquals(new short[] { 1, 2, 2, 3, 2 }, ArrayUtils.removeAllOccurrences(a, (short) 4));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ArrayUtilsRemoveTest.java",
  "methodName" : "testRemoveBooleanArray",
  "sourceCode" : "@Test\r\nvoid testRemoveBooleanArray() {\r\n    boolean[] array;\r\n    array = ArrayUtils.remove(new boolean[] { true }, 0);\r\n    assertArrayEquals(ArrayUtils.EMPTY_BOOLEAN_ARRAY, array);\r\n    assertEquals(Boolean.TYPE, array.getClass().getComponentType());\r\n    array = ArrayUtils.remove(new boolean[] { true, false }, 0);\r\n    assertArrayEquals(new boolean[] { false }, array);\r\n    assertEquals(Boolean.TYPE, array.getClass().getComponentType());\r\n    array = ArrayUtils.remove(new boolean[] { true, false }, 1);\r\n    assertArrayEquals(new boolean[] { true }, array);\r\n    assertEquals(Boolean.TYPE, array.getClass().getComponentType());\r\n    array = ArrayUtils.remove(new boolean[] { true, false, true }, 1);\r\n    assertArrayEquals(new boolean[] { true, true }, array);\r\n    assertEquals(Boolean.TYPE, array.getClass().getComponentType());\r\n    assertIndexOutOfBoundsException(() -> ArrayUtils.remove(new boolean[] { true, false }, -1));\r\n    assertIndexOutOfBoundsException(() -> ArrayUtils.remove(new boolean[] { true, false }, 2));\r\n    assertIndexOutOfBoundsException(() -> ArrayUtils.remove((boolean[]) null, 0));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ArrayUtilsRemoveTest.java",
  "methodName" : "testRemoveByteArray",
  "sourceCode" : "@Test\r\nvoid testRemoveByteArray() {\r\n    byte[] array;\r\n    array = ArrayUtils.remove(new byte[] { 1 }, 0);\r\n    assertArrayEquals(ArrayUtils.EMPTY_BYTE_ARRAY, array);\r\n    assertEquals(Byte.TYPE, array.getClass().getComponentType());\r\n    array = ArrayUtils.remove(new byte[] { 1, 2 }, 0);\r\n    assertArrayEquals(new byte[] { 2 }, array);\r\n    assertEquals(Byte.TYPE, array.getClass().getComponentType());\r\n    array = ArrayUtils.remove(new byte[] { 1, 2 }, 1);\r\n    assertArrayEquals(new byte[] { 1 }, array);\r\n    assertEquals(Byte.TYPE, array.getClass().getComponentType());\r\n    array = ArrayUtils.remove(new byte[] { 1, 2, 1 }, 1);\r\n    assertArrayEquals(new byte[] { 1, 1 }, array);\r\n    assertEquals(Byte.TYPE, array.getClass().getComponentType());\r\n    assertIndexOutOfBoundsException(() -> ArrayUtils.remove(new byte[] { 1, 2 }, -1));\r\n    assertIndexOutOfBoundsException(() -> ArrayUtils.remove(new byte[] { 1, 2 }, 2));\r\n    assertIndexOutOfBoundsException(() -> ArrayUtils.remove((byte[]) null, 0));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ArrayUtilsRemoveTest.java",
  "methodName" : "testRemoveCharArray",
  "sourceCode" : "@Test\r\nvoid testRemoveCharArray() {\r\n    char[] array;\r\n    array = ArrayUtils.remove(new char[] { 'a' }, 0);\r\n    assertArrayEquals(ArrayUtils.EMPTY_CHAR_ARRAY, array);\r\n    assertEquals(Character.TYPE, array.getClass().getComponentType());\r\n    array = ArrayUtils.remove(new char[] { 'a', 'b' }, 0);\r\n    assertArrayEquals(new char[] { 'b' }, array);\r\n    assertEquals(Character.TYPE, array.getClass().getComponentType());\r\n    array = ArrayUtils.remove(new char[] { 'a', 'b' }, 1);\r\n    assertArrayEquals(new char[] { 'a' }, array);\r\n    assertEquals(Character.TYPE, array.getClass().getComponentType());\r\n    array = ArrayUtils.remove(new char[] { 'a', 'b', 'c' }, 1);\r\n    assertArrayEquals(new char[] { 'a', 'c' }, array);\r\n    assertEquals(Character.TYPE, array.getClass().getComponentType());\r\n    assertIndexOutOfBoundsException(() -> ArrayUtils.remove(new char[] { 'a', 'b' }, -1));\r\n    assertIndexOutOfBoundsException(() -> ArrayUtils.remove(new char[] { 'a', 'b' }, 2));\r\n    assertIndexOutOfBoundsException(() -> ArrayUtils.remove((char[]) null, 0));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ArrayUtilsRemoveTest.java",
  "methodName" : "testRemoveDoubleArray",
  "sourceCode" : "@Test\r\nvoid testRemoveDoubleArray() {\r\n    double[] array;\r\n    array = ArrayUtils.remove(new double[] { 1 }, 0);\r\n    assertArrayEquals(ArrayUtils.EMPTY_DOUBLE_ARRAY, array);\r\n    assertEquals(Double.TYPE, array.getClass().getComponentType());\r\n    array = ArrayUtils.remove(new double[] { 1, 2 }, 0);\r\n    assertArrayEquals(new double[] { 2 }, array);\r\n    assertEquals(Double.TYPE, array.getClass().getComponentType());\r\n    array = ArrayUtils.remove(new double[] { 1, 2 }, 1);\r\n    assertArrayEquals(new double[] { 1 }, array);\r\n    assertEquals(Double.TYPE, array.getClass().getComponentType());\r\n    array = ArrayUtils.remove(new double[] { 1, 2, 1 }, 1);\r\n    assertArrayEquals(new double[] { 1, 1 }, array);\r\n    assertEquals(Double.TYPE, array.getClass().getComponentType());\r\n    assertIndexOutOfBoundsException(() -> ArrayUtils.remove(new double[] { 1, 2 }, -1));\r\n    assertIndexOutOfBoundsException(() -> ArrayUtils.remove(new double[] { 1, 2 }, 2));\r\n    assertIndexOutOfBoundsException(() -> ArrayUtils.remove((double[]) null, 0));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ArrayUtilsRemoveTest.java",
  "methodName" : "testRemoveElementBooleanArray",
  "sourceCode" : "@Test\r\nvoid testRemoveElementBooleanArray() {\r\n    boolean[] array;\r\n    array = ArrayUtils.removeElement(null, true);\r\n    assertNull(array);\r\n    array = ArrayUtils.removeElement(ArrayUtils.EMPTY_BOOLEAN_ARRAY, true);\r\n    assertArrayEquals(ArrayUtils.EMPTY_BOOLEAN_ARRAY, array);\r\n    assertEquals(Boolean.TYPE, array.getClass().getComponentType());\r\n    array = ArrayUtils.removeElement(new boolean[] { true }, true);\r\n    assertArrayEquals(ArrayUtils.EMPTY_BOOLEAN_ARRAY, array);\r\n    assertEquals(Boolean.TYPE, array.getClass().getComponentType());\r\n    array = ArrayUtils.removeElement(new boolean[] { true, false }, true);\r\n    assertArrayEquals(new boolean[] { false }, array);\r\n    assertEquals(Boolean.TYPE, array.getClass().getComponentType());\r\n    array = ArrayUtils.removeElement(new boolean[] { true, false, true }, true);\r\n    assertArrayEquals(new boolean[] { false, true }, array);\r\n    assertEquals(Boolean.TYPE, array.getClass().getComponentType());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ArrayUtilsRemoveTest.java",
  "methodName" : "testRemoveElementByteArray",
  "sourceCode" : "@Test\r\nvoid testRemoveElementByteArray() {\r\n    byte[] array;\r\n    array = ArrayUtils.removeElement((byte[]) null, (byte) 1);\r\n    assertNull(array);\r\n    array = ArrayUtils.removeElement(ArrayUtils.EMPTY_BYTE_ARRAY, (byte) 1);\r\n    assertArrayEquals(ArrayUtils.EMPTY_BYTE_ARRAY, array);\r\n    assertEquals(Byte.TYPE, array.getClass().getComponentType());\r\n    array = ArrayUtils.removeElement(new byte[] { 1 }, (byte) 1);\r\n    assertArrayEquals(ArrayUtils.EMPTY_BYTE_ARRAY, array);\r\n    assertEquals(Byte.TYPE, array.getClass().getComponentType());\r\n    array = ArrayUtils.removeElement(new byte[] { 1, 2 }, (byte) 1);\r\n    assertArrayEquals(new byte[] { 2 }, array);\r\n    assertEquals(Byte.TYPE, array.getClass().getComponentType());\r\n    array = ArrayUtils.removeElement(new byte[] { 1, 2, 1 }, (byte) 1);\r\n    assertArrayEquals(new byte[] { 2, 1 }, array);\r\n    assertEquals(Byte.TYPE, array.getClass().getComponentType());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ArrayUtilsRemoveTest.java",
  "methodName" : "testRemoveElementCharArray",
  "sourceCode" : "@Test\r\nvoid testRemoveElementCharArray() {\r\n    char[] array;\r\n    array = ArrayUtils.removeElement((char[]) null, 'a');\r\n    assertNull(array);\r\n    array = ArrayUtils.removeElement(ArrayUtils.EMPTY_CHAR_ARRAY, 'a');\r\n    assertArrayEquals(ArrayUtils.EMPTY_CHAR_ARRAY, array);\r\n    assertEquals(Character.TYPE, array.getClass().getComponentType());\r\n    array = ArrayUtils.removeElement(new char[] { 'a' }, 'a');\r\n    assertArrayEquals(ArrayUtils.EMPTY_CHAR_ARRAY, array);\r\n    assertEquals(Character.TYPE, array.getClass().getComponentType());\r\n    array = ArrayUtils.removeElement(new char[] { 'a', 'b' }, 'a');\r\n    assertArrayEquals(new char[] { 'b' }, array);\r\n    assertEquals(Character.TYPE, array.getClass().getComponentType());\r\n    array = ArrayUtils.removeElement(new char[] { 'a', 'b', 'a' }, 'a');\r\n    assertArrayEquals(new char[] { 'b', 'a' }, array);\r\n    assertEquals(Character.TYPE, array.getClass().getComponentType());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ArrayUtilsRemoveTest.java",
  "methodName" : "testRemoveElementDoubleArray",
  "sourceCode" : "@Test\r\nvoid testRemoveElementDoubleArray() {\r\n    double[] array;\r\n    array = ArrayUtils.removeElement(null, (double) 1);\r\n    assertNull(array);\r\n    array = ArrayUtils.removeElement(ArrayUtils.EMPTY_DOUBLE_ARRAY, 1);\r\n    assertArrayEquals(ArrayUtils.EMPTY_DOUBLE_ARRAY, array);\r\n    assertEquals(Double.TYPE, array.getClass().getComponentType());\r\n    array = ArrayUtils.removeElement(new double[] { 1 }, 1);\r\n    assertArrayEquals(ArrayUtils.EMPTY_DOUBLE_ARRAY, array);\r\n    assertEquals(Double.TYPE, array.getClass().getComponentType());\r\n    array = ArrayUtils.removeElement(new double[] { 1, 2 }, 1);\r\n    assertArrayEquals(new double[] { 2 }, array);\r\n    assertEquals(Double.TYPE, array.getClass().getComponentType());\r\n    array = ArrayUtils.removeElement(new double[] { 1, 2, 1 }, 1);\r\n    assertArrayEquals(new double[] { 2, 1 }, array);\r\n    assertEquals(Double.TYPE, array.getClass().getComponentType());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ArrayUtilsRemoveTest.java",
  "methodName" : "testRemoveElementFloatArray",
  "sourceCode" : "@Test\r\nvoid testRemoveElementFloatArray() {\r\n    float[] array;\r\n    array = ArrayUtils.removeElement((float[]) null, 1);\r\n    assertNull(array);\r\n    array = ArrayUtils.removeElement(ArrayUtils.EMPTY_FLOAT_ARRAY, 1);\r\n    assertArrayEquals(ArrayUtils.EMPTY_FLOAT_ARRAY, array);\r\n    assertEquals(Float.TYPE, array.getClass().getComponentType());\r\n    array = ArrayUtils.removeElement(new float[] { 1 }, 1);\r\n    assertArrayEquals(ArrayUtils.EMPTY_FLOAT_ARRAY, array);\r\n    assertEquals(Float.TYPE, array.getClass().getComponentType());\r\n    array = ArrayUtils.removeElement(new float[] { 1, 2 }, 1);\r\n    assertArrayEquals(new float[] { 2 }, array);\r\n    assertEquals(Float.TYPE, array.getClass().getComponentType());\r\n    array = ArrayUtils.removeElement(new float[] { 1, 2, 1 }, 1);\r\n    assertArrayEquals(new float[] { 2, 1 }, array);\r\n    assertEquals(Float.TYPE, array.getClass().getComponentType());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ArrayUtilsRemoveTest.java",
  "methodName" : "testRemoveElementIntArray",
  "sourceCode" : "@Test\r\nvoid testRemoveElementIntArray() {\r\n    int[] array;\r\n    array = ArrayUtils.removeElement((int[]) null, 1);\r\n    assertNull(array);\r\n    array = ArrayUtils.removeElement(ArrayUtils.EMPTY_INT_ARRAY, 1);\r\n    assertArrayEquals(ArrayUtils.EMPTY_INT_ARRAY, array);\r\n    assertEquals(Integer.TYPE, array.getClass().getComponentType());\r\n    array = ArrayUtils.removeElement(new int[] { 1 }, 1);\r\n    assertArrayEquals(ArrayUtils.EMPTY_INT_ARRAY, array);\r\n    assertEquals(Integer.TYPE, array.getClass().getComponentType());\r\n    array = ArrayUtils.removeElement(new int[] { 1, 2 }, 1);\r\n    assertArrayEquals(new int[] { 2 }, array);\r\n    assertEquals(Integer.TYPE, array.getClass().getComponentType());\r\n    array = ArrayUtils.removeElement(new int[] { 1, 2, 1 }, 1);\r\n    assertArrayEquals(new int[] { 2, 1 }, array);\r\n    assertEquals(Integer.TYPE, array.getClass().getComponentType());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ArrayUtilsRemoveTest.java",
  "methodName" : "testRemoveElementLongArray",
  "sourceCode" : "@Test\r\nvoid testRemoveElementLongArray() {\r\n    long[] array;\r\n    array = ArrayUtils.removeElement((long[]) null, 1L);\r\n    assertNull(array);\r\n    array = ArrayUtils.removeElement(ArrayUtils.EMPTY_LONG_ARRAY, 1L);\r\n    assertArrayEquals(ArrayUtils.EMPTY_LONG_ARRAY, array);\r\n    assertEquals(Long.TYPE, array.getClass().getComponentType());\r\n    array = ArrayUtils.removeElement(new long[] { 1 }, 1L);\r\n    assertArrayEquals(ArrayUtils.EMPTY_LONG_ARRAY, array);\r\n    assertEquals(Long.TYPE, array.getClass().getComponentType());\r\n    array = ArrayUtils.removeElement(new long[] { 1, 2 }, 1L);\r\n    assertArrayEquals(new long[] { 2 }, array);\r\n    assertEquals(Long.TYPE, array.getClass().getComponentType());\r\n    array = ArrayUtils.removeElement(new long[] { 1, 2, 1 }, 1L);\r\n    assertArrayEquals(new long[] { 2, 1 }, array);\r\n    assertEquals(Long.TYPE, array.getClass().getComponentType());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ArrayUtilsRemoveTest.java",
  "methodName" : "testRemoveElementObjectArray",
  "sourceCode" : "@Test\r\nvoid testRemoveElementObjectArray() {\r\n    Object[] array;\r\n    array = ArrayUtils.removeElement(null, \"a\");\r\n    assertNull(array);\r\n    array = ArrayUtils.removeElement(ArrayUtils.EMPTY_OBJECT_ARRAY, \"a\");\r\n    assertArrayEquals(ArrayUtils.EMPTY_OBJECT_ARRAY, array);\r\n    assertEquals(Object.class, array.getClass().getComponentType());\r\n    array = ArrayUtils.removeElement(new Object[] { \"a\" }, \"a\");\r\n    assertArrayEquals(ArrayUtils.EMPTY_OBJECT_ARRAY, array);\r\n    assertEquals(Object.class, array.getClass().getComponentType());\r\n    array = ArrayUtils.removeElement(new Object[] { \"a\", \"b\" }, \"a\");\r\n    assertArrayEquals(new Object[] { \"b\" }, array);\r\n    assertEquals(Object.class, array.getClass().getComponentType());\r\n    array = ArrayUtils.removeElement(new Object[] { \"a\", \"b\", \"a\" }, \"a\");\r\n    assertArrayEquals(new Object[] { \"b\", \"a\" }, array);\r\n    assertEquals(Object.class, array.getClass().getComponentType());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ArrayUtilsRemoveTest.java",
  "methodName" : "testRemoveElementShortArray",
  "sourceCode" : "@Test\r\nvoid testRemoveElementShortArray() {\r\n    short[] array;\r\n    array = ArrayUtils.removeElement((short[]) null, (short) 1);\r\n    assertNull(array);\r\n    array = ArrayUtils.removeElement(ArrayUtils.EMPTY_SHORT_ARRAY, (short) 1);\r\n    assertArrayEquals(ArrayUtils.EMPTY_SHORT_ARRAY, array);\r\n    assertEquals(Short.TYPE, array.getClass().getComponentType());\r\n    array = ArrayUtils.removeElement(new short[] { 1 }, (short) 1);\r\n    assertArrayEquals(ArrayUtils.EMPTY_SHORT_ARRAY, array);\r\n    assertEquals(Short.TYPE, array.getClass().getComponentType());\r\n    array = ArrayUtils.removeElement(new short[] { 1, 2 }, (short) 1);\r\n    assertArrayEquals(new short[] { 2 }, array);\r\n    assertEquals(Short.TYPE, array.getClass().getComponentType());\r\n    array = ArrayUtils.removeElement(new short[] { 1, 2, 1 }, (short) 1);\r\n    assertArrayEquals(new short[] { 2, 1 }, array);\r\n    assertEquals(Short.TYPE, array.getClass().getComponentType());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ArrayUtilsRemoveTest.java",
  "methodName" : "testRemoveFloatArray",
  "sourceCode" : "@Test\r\nvoid testRemoveFloatArray() {\r\n    float[] array;\r\n    array = ArrayUtils.remove(new float[] { 1 }, 0);\r\n    assertArrayEquals(ArrayUtils.EMPTY_FLOAT_ARRAY, array);\r\n    assertEquals(Float.TYPE, array.getClass().getComponentType());\r\n    array = ArrayUtils.remove(new float[] { 1, 2 }, 0);\r\n    assertArrayEquals(new float[] { 2 }, array);\r\n    assertEquals(Float.TYPE, array.getClass().getComponentType());\r\n    array = ArrayUtils.remove(new float[] { 1, 2 }, 1);\r\n    assertArrayEquals(new float[] { 1 }, array);\r\n    assertEquals(Float.TYPE, array.getClass().getComponentType());\r\n    array = ArrayUtils.remove(new float[] { 1, 2, 1 }, 1);\r\n    assertArrayEquals(new float[] { 1, 1 }, array);\r\n    assertEquals(Float.TYPE, array.getClass().getComponentType());\r\n    assertIndexOutOfBoundsException(() -> ArrayUtils.remove(new float[] { 1, 2 }, -1));\r\n    assertIndexOutOfBoundsException(() -> ArrayUtils.remove(new float[] { 1, 2 }, 2));\r\n    assertIndexOutOfBoundsException(() -> ArrayUtils.remove((float[]) null, 0));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ArrayUtilsRemoveTest.java",
  "methodName" : "testRemoveIntArray",
  "sourceCode" : "@Test\r\nvoid testRemoveIntArray() {\r\n    int[] array;\r\n    array = ArrayUtils.remove(new int[] { 1 }, 0);\r\n    assertArrayEquals(ArrayUtils.EMPTY_INT_ARRAY, array);\r\n    assertEquals(Integer.TYPE, array.getClass().getComponentType());\r\n    array = ArrayUtils.remove(new int[] { 1, 2 }, 0);\r\n    assertArrayEquals(new int[] { 2 }, array);\r\n    assertEquals(Integer.TYPE, array.getClass().getComponentType());\r\n    array = ArrayUtils.remove(new int[] { 1, 2 }, 1);\r\n    assertArrayEquals(new int[] { 1 }, array);\r\n    assertEquals(Integer.TYPE, array.getClass().getComponentType());\r\n    array = ArrayUtils.remove(new int[] { 1, 2, 1 }, 1);\r\n    assertArrayEquals(new int[] { 1, 1 }, array);\r\n    assertEquals(Integer.TYPE, array.getClass().getComponentType());\r\n    assertIndexOutOfBoundsException(() -> ArrayUtils.remove(new int[] { 1, 2 }, -1));\r\n    assertIndexOutOfBoundsException(() -> ArrayUtils.remove(new int[] { 1, 2 }, 2));\r\n    assertIndexOutOfBoundsException(() -> ArrayUtils.remove((int[]) null, 0));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ArrayUtilsRemoveTest.java",
  "methodName" : "testRemoveLongArray",
  "sourceCode" : "@Test\r\nvoid testRemoveLongArray() {\r\n    long[] array;\r\n    array = ArrayUtils.remove(new long[] { 1 }, 0);\r\n    assertArrayEquals(ArrayUtils.EMPTY_LONG_ARRAY, array);\r\n    assertEquals(Long.TYPE, array.getClass().getComponentType());\r\n    array = ArrayUtils.remove(new long[] { 1, 2 }, 0);\r\n    assertArrayEquals(new long[] { 2 }, array);\r\n    assertEquals(Long.TYPE, array.getClass().getComponentType());\r\n    array = ArrayUtils.remove(new long[] { 1, 2 }, 1);\r\n    assertArrayEquals(new long[] { 1 }, array);\r\n    assertEquals(Long.TYPE, array.getClass().getComponentType());\r\n    array = ArrayUtils.remove(new long[] { 1, 2, 1 }, 1);\r\n    assertArrayEquals(new long[] { 1, 1 }, array);\r\n    assertEquals(Long.TYPE, array.getClass().getComponentType());\r\n    assertIndexOutOfBoundsException(() -> ArrayUtils.remove(new long[] { 1, 2 }, -1));\r\n    assertIndexOutOfBoundsException(() -> ArrayUtils.remove(new long[] { 1, 2 }, 2));\r\n    assertIndexOutOfBoundsException(() -> ArrayUtils.remove((long[]) null, 0));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ArrayUtilsRemoveTest.java",
  "methodName" : "testRemoveNumberArray",
  "sourceCode" : "@Test\r\nvoid testRemoveNumberArray() {\r\n    final Number[] inarray = { Integer.valueOf(1), Long.valueOf(2), Byte.valueOf((byte) 3) };\r\n    assertEquals(3, inarray.length);\r\n    Number[] outarray;\r\n    outarray = ArrayUtils.remove(inarray, 1);\r\n    assertEquals(2, outarray.length);\r\n    assertEquals(Number.class, outarray.getClass().getComponentType());\r\n    outarray = ArrayUtils.remove(outarray, 1);\r\n    assertEquals(1, outarray.length);\r\n    assertEquals(Number.class, outarray.getClass().getComponentType());\r\n    outarray = ArrayUtils.remove(outarray, 0);\r\n    assertEquals(0, outarray.length);\r\n    assertEquals(Number.class, outarray.getClass().getComponentType());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ArrayUtilsRemoveTest.java",
  "methodName" : "testRemoveObjectArray",
  "sourceCode" : "@Test\r\nvoid testRemoveObjectArray() {\r\n    Object[] array;\r\n    array = ArrayUtils.remove(new Object[] { \"a\" }, 0);\r\n    assertArrayEquals(ArrayUtils.EMPTY_OBJECT_ARRAY, array);\r\n    assertEquals(Object.class, array.getClass().getComponentType());\r\n    array = ArrayUtils.remove(new Object[] { \"a\", \"b\" }, 0);\r\n    assertArrayEquals(new Object[] { \"b\" }, array);\r\n    assertEquals(Object.class, array.getClass().getComponentType());\r\n    array = ArrayUtils.remove(new Object[] { \"a\", \"b\" }, 1);\r\n    assertArrayEquals(new Object[] { \"a\" }, array);\r\n    assertEquals(Object.class, array.getClass().getComponentType());\r\n    array = ArrayUtils.remove(new Object[] { \"a\", \"b\", \"c\" }, 1);\r\n    assertArrayEquals(new Object[] { \"a\", \"c\" }, array);\r\n    assertEquals(Object.class, array.getClass().getComponentType());\r\n    assertIndexOutOfBoundsException(() -> ArrayUtils.remove(new Object[] { \"a\", \"b\" }, -1));\r\n    assertIndexOutOfBoundsException(() -> ArrayUtils.remove(new Object[] { \"a\", \"b\" }, 2));\r\n    assertIndexOutOfBoundsException(() -> ArrayUtils.remove((Object[]) null, 0));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ArrayUtilsRemoveTest.java",
  "methodName" : "testRemoveShortArray",
  "sourceCode" : "@Test\r\nvoid testRemoveShortArray() {\r\n    short[] array;\r\n    array = ArrayUtils.remove(new short[] { 1 }, 0);\r\n    assertArrayEquals(ArrayUtils.EMPTY_SHORT_ARRAY, array);\r\n    assertEquals(Short.TYPE, array.getClass().getComponentType());\r\n    array = ArrayUtils.remove(new short[] { 1, 2 }, 0);\r\n    assertArrayEquals(new short[] { 2 }, array);\r\n    assertEquals(Short.TYPE, array.getClass().getComponentType());\r\n    array = ArrayUtils.remove(new short[] { 1, 2 }, 1);\r\n    assertArrayEquals(new short[] { 1 }, array);\r\n    assertEquals(Short.TYPE, array.getClass().getComponentType());\r\n    array = ArrayUtils.remove(new short[] { 1, 2, 1 }, 1);\r\n    assertArrayEquals(new short[] { 1, 1 }, array);\r\n    assertEquals(Short.TYPE, array.getClass().getComponentType());\r\n    assertIndexOutOfBoundsException(() -> ArrayUtils.remove(new short[] { 1, 2 }, -1));\r\n    assertIndexOutOfBoundsException(() -> ArrayUtils.remove(new short[] { 1, 2 }, 2));\r\n    assertIndexOutOfBoundsException(() -> ArrayUtils.remove((short[]) null, 0));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ArrayUtilsSetTest.java",
  "methodName" : "testSetAll_IntFunction",
  "sourceCode" : "@Test\r\nvoid testSetAll_IntFunction() {\r\n    final IntFunction<?> nullIntFunction = null;\r\n    assertNull(ArrayUtils.setAll(null, nullIntFunction));\r\n    assertArrayEquals(null, ArrayUtils.setAll(null, nullIntFunction));\r\n    assertArrayEquals(ArrayUtils.EMPTY_BOOLEAN_OBJECT_ARRAY, ArrayUtils.setAll(ArrayUtils.EMPTY_BOOLEAN_OBJECT_ARRAY, nullIntFunction));\r\n    assertArrayEquals(ArrayUtils.EMPTY_OBJECT_ARRAY, ArrayUtils.setAll(ArrayUtils.EMPTY_OBJECT_ARRAY, nullIntFunction));\r\n    final Integer[] array = new Integer[10];\r\n    final Integer[] array2 = ArrayUtils.setAll(array, Integer::valueOf);\r\n    assertSame(array, array2);\r\n    for (int i = 0; i < array.length; i++) {\r\n        assertEquals(i, array[i].intValue());\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ArrayUtilsSetTest.java",
  "methodName" : "testSetAll_Supplier",
  "sourceCode" : "@Test\r\nvoid testSetAll_Supplier() {\r\n    final Supplier<?> nullSupplier = null;\r\n    assertNull(ArrayUtils.setAll(null, nullSupplier));\r\n    assertArrayEquals(null, ArrayUtils.setAll(null, nullSupplier));\r\n    assertArrayEquals(ArrayUtils.EMPTY_BOOLEAN_OBJECT_ARRAY, ArrayUtils.setAll(ArrayUtils.EMPTY_BOOLEAN_OBJECT_ARRAY, nullSupplier));\r\n    assertArrayEquals(ArrayUtils.EMPTY_OBJECT_ARRAY, ArrayUtils.setAll(ArrayUtils.EMPTY_OBJECT_ARRAY, nullSupplier));\r\n    final String[] array = new String[10];\r\n    final String[] array2 = ArrayUtils.setAll(array, () -> StringUtils.EMPTY);\r\n    assertSame(array, array2);\r\n    for (final String s : array) {\r\n        assertEquals(StringUtils.EMPTY, s);\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ArrayUtilsTest.java",
  "methodName" : "testArraycopyFunction",
  "sourceCode" : "@Test\r\nvoid testArraycopyFunction() {\r\n    final String[] arr = { \"a\", \"b\" };\r\n    assertNullPointerException(() -> ArrayUtils.arraycopy(null, 0, 0, 1, i -> new String[3]));\r\n    assertNullPointerException(() -> ArrayUtils.arraycopy(arr, 0, 0, 1, i -> null));\r\n    assertNullPointerException(() -> ArrayUtils.arraycopy(arr, 0, 0, 1, (Function<Integer, String[]>) null));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ArrayUtilsTest.java",
  "methodName" : "testArraycopySupplier",
  "sourceCode" : "@Test\r\nvoid testArraycopySupplier() {\r\n    final String[] arr = { \"a\", \"b\" };\r\n    assertNullPointerException(() -> ArrayUtils.arraycopy(null, 0, 0, 1, () -> new String[3]));\r\n    assertNullPointerException(() -> ArrayUtils.arraycopy(arr, 0, 0, 1, Suppliers.nul()));\r\n    assertNullPointerException(() -> ArrayUtils.arraycopy(arr, 0, 0, 1, (Supplier<String[]>) null));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ArrayUtilsTest.java",
  "methodName" : "testArrayCreation",
  "sourceCode" : "/**\r\n * Tests generic array creation with parameters of same type.\r\n */\r\n@Test\r\nvoid testArrayCreation() {\r\n    final String[] array = ArrayUtils.toArray(\"foo\", \"bar\");\r\n    assertEquals(2, array.length);\r\n    assertEquals(\"foo\", array[0]);\r\n    assertEquals(\"bar\", array[1]);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ArrayUtilsTest.java",
  "methodName" : "testArrayCreationWithDifferentTypes",
  "sourceCode" : "/**\r\n * Tests generic array creation with parameters of common base type.\r\n */\r\n@Test\r\nvoid testArrayCreationWithDifferentTypes() {\r\n    final Number[] array = ArrayUtils.<Number>toArray(Integer.valueOf(42), Double.valueOf(Math.PI));\r\n    assertEquals(2, array.length);\r\n    assertEquals(Integer.valueOf(42), array[0]);\r\n    assertEquals(Double.valueOf(Math.PI), array[1]);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ArrayUtilsTest.java",
  "methodName" : "testArrayCreationWithGeneralReturnType",
  "sourceCode" : "/**\r\n * Tests generic array creation with general return type.\r\n */\r\n@Test\r\nvoid testArrayCreationWithGeneralReturnType() {\r\n    final Object obj = ArrayUtils.toArray(\"foo\", \"bar\");\r\n    assertInstanceOf(String[].class, obj);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ArrayUtilsTest.java",
  "methodName" : "testClone",
  "sourceCode" : "@Test\r\nvoid testClone() {\r\n    assertArrayEquals(null, ArrayUtils.clone((Object[]) null));\r\n    Object[] original1 = {};\r\n    Object[] cloned1 = ArrayUtils.clone(original1);\r\n    assertArrayEquals(original1, cloned1);\r\n    assertNotSame(original1, cloned1);\r\n    final StringBuilder builder = new StringBuilder(\"pick\");\r\n    original1 = new Object[] { builder, \"a\", new String[] { \"stick\" } };\r\n    cloned1 = ArrayUtils.clone(original1);\r\n    assertArrayEquals(original1, cloned1);\r\n    assertNotSame(original1, cloned1);\r\n    assertSame(original1[0], cloned1[0]);\r\n    assertSame(original1[1], cloned1[1]);\r\n    assertSame(original1[2], cloned1[2]);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ArrayUtilsTest.java",
  "methodName" : "testCloneBoolean",
  "sourceCode" : "@Test\r\nvoid testCloneBoolean() {\r\n    assertNull(ArrayUtils.clone((boolean[]) null));\r\n    final boolean[] original = { true, false };\r\n    final boolean[] cloned = ArrayUtils.clone(original);\r\n    assertArrayEquals(original, cloned);\r\n    assertNotSame(original, cloned);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ArrayUtilsTest.java",
  "methodName" : "testCloneByte",
  "sourceCode" : "@Test\r\nvoid testCloneByte() {\r\n    assertNull(ArrayUtils.clone((byte[]) null));\r\n    final byte[] original = { 1, 6 };\r\n    final byte[] cloned = ArrayUtils.clone(original);\r\n    assertArrayEquals(original, cloned);\r\n    assertNotSame(original, cloned);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ArrayUtilsTest.java",
  "methodName" : "testCloneChar",
  "sourceCode" : "@Test\r\nvoid testCloneChar() {\r\n    assertNull(ArrayUtils.clone((char[]) null));\r\n    final char[] original = { 'a', '4' };\r\n    final char[] cloned = ArrayUtils.clone(original);\r\n    assertArrayEquals(original, cloned);\r\n    assertNotSame(original, cloned);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ArrayUtilsTest.java",
  "methodName" : "testCloneDouble",
  "sourceCode" : "@Test\r\nvoid testCloneDouble() {\r\n    assertNull(ArrayUtils.clone((double[]) null));\r\n    final double[] original = { 2.4d, 5.7d };\r\n    final double[] cloned = ArrayUtils.clone(original);\r\n    assertArrayEquals(original, cloned);\r\n    assertNotSame(original, cloned);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ArrayUtilsTest.java",
  "methodName" : "testCloneFloat",
  "sourceCode" : "@Test\r\nvoid testCloneFloat() {\r\n    assertNull(ArrayUtils.clone((float[]) null));\r\n    final float[] original = { 2.6f, 6.4f };\r\n    final float[] cloned = ArrayUtils.clone(original);\r\n    assertArrayEquals(original, cloned);\r\n    assertNotSame(original, cloned);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ArrayUtilsTest.java",
  "methodName" : "testCloneInt",
  "sourceCode" : "@Test\r\nvoid testCloneInt() {\r\n    assertNull(ArrayUtils.clone((int[]) null));\r\n    final int[] original = { 5, 8 };\r\n    final int[] cloned = ArrayUtils.clone(original);\r\n    assertArrayEquals(original, cloned);\r\n    assertNotSame(original, cloned);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ArrayUtilsTest.java",
  "methodName" : "testCloneLong",
  "sourceCode" : "@Test\r\nvoid testCloneLong() {\r\n    assertNull(ArrayUtils.clone((long[]) null));\r\n    final long[] original = { 0L, 1L };\r\n    final long[] cloned = ArrayUtils.clone(original);\r\n    assertArrayEquals(original, cloned);\r\n    assertNotSame(original, cloned);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ArrayUtilsTest.java",
  "methodName" : "testCloneShort",
  "sourceCode" : "@Test\r\nvoid testCloneShort() {\r\n    assertNull(ArrayUtils.clone((short[]) null));\r\n    final short[] original = { 1, 4 };\r\n    final short[] cloned = ArrayUtils.clone(original);\r\n    assertArrayEquals(original, cloned);\r\n    assertNotSame(original, cloned);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ArrayUtilsTest.java",
  "methodName" : "testConstructor",
  "sourceCode" : "@Test\r\nvoid testConstructor() {\r\n    assertNotNull(new ArrayUtils());\r\n    final Constructor<?>[] cons = ArrayUtils.class.getDeclaredConstructors();\r\n    assertEquals(1, cons.length);\r\n    assertTrue(Modifier.isPublic(cons[0].getModifiers()));\r\n    assertTrue(Modifier.isPublic(ArrayUtils.class.getModifiers()));\r\n    assertFalse(Modifier.isFinal(ArrayUtils.class.getModifiers()));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ArrayUtilsTest.java",
  "methodName" : "testContains",
  "sourceCode" : "@Test\r\nvoid testContains() {\r\n    final Object[] array = { \"0\", \"1\", \"2\", \"3\", null, \"0\" };\r\n    assertFalse(ArrayUtils.contains(null, null));\r\n    assertFalse(ArrayUtils.contains(null, \"1\"));\r\n    assertTrue(ArrayUtils.contains(array, \"0\"));\r\n    assertTrue(ArrayUtils.contains(array, \"1\"));\r\n    assertTrue(ArrayUtils.contains(array, \"2\"));\r\n    assertTrue(ArrayUtils.contains(array, \"3\"));\r\n    assertFalse(ArrayUtils.contains(array, \"notInArray\"));\r\n    assertTrue(ArrayUtils.contains(array, null));\r\n    // Types will never match: an Object is not a String\r\n    final String stringToFind = \"4\";\r\n    assertFalse(ArrayUtils.contains(new String[] { stringToFind }, new Object()));\r\n    // String and Integer both implement java.io.Serializable\r\n    assertFalse(ArrayUtils.contains(new String[] { stringToFind }, Integer.valueOf(1)));\r\n    // Charset and Integer both implement Comparable\r\n    assertFalse(ArrayUtils.contains(new Charset[] { StandardCharsets.US_ASCII }, Integer.valueOf(1)));\r\n    // TestClass and Integer are only Objects\r\n    assertFalse(ArrayUtils.contains(new TestClass[] { new TestClass() }, Integer.valueOf(1)));\r\n    // Values can match\r\n    assertTrue(ArrayUtils.contains(new Object[] { stringToFind }, stringToFind));\r\n    // A String is a CharSequence\r\n    final CharSequence csToFind = stringToFind;\r\n    assertTrue(ArrayUtils.contains(new String[] { stringToFind }, csToFind));\r\n    assertTrue(ArrayUtils.contains(new CharSequence[] { stringToFind }, stringToFind));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ArrayUtilsTest.java",
  "methodName" : "testContains_LANG_1261",
  "sourceCode" : "@Test\r\nvoid testContains_LANG_1261() {\r\n    class LANG1261ParentObject {\r\n\r\n        @Override\r\n        public boolean equals(final Object o) {\r\n            return true;\r\n        }\r\n\r\n        @Override\r\n        public int hashCode() {\r\n            return 0;\r\n        }\r\n    }\r\n    final class LANG1261ChildObject extends LANG1261ParentObject {\r\n        // empty.\r\n    }\r\n    final Object[] array = new LANG1261ChildObject[] { new LANG1261ChildObject() };\r\n    assertTrue(ArrayUtils.contains(array, new LANG1261ParentObject()));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ArrayUtilsTest.java",
  "methodName" : "testContainsAnyEnum",
  "sourceCode" : "@Test\r\nvoid testContainsAnyEnum() {\r\n    assertTrue(ArrayUtils.containsAny(ElementType.values(), ElementType.ANNOTATION_TYPE));\r\n    assertFalse(ArrayUtils.containsAny(ElementType.values(), (ElementType) null));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ArrayUtilsTest.java",
  "methodName" : "testContainsAnyInt",
  "sourceCode" : "@Test\r\nvoid testContainsAnyInt() {\r\n    final int[] array = { 0, 1, 2, 3, 0 };\r\n    assertFalse(ArrayUtils.containsAny((int[]) null, 1));\r\n    assertTrue(ArrayUtils.containsAny(array, 0));\r\n    assertTrue(ArrayUtils.containsAny(array, 1));\r\n    assertTrue(ArrayUtils.containsAny(array, 2));\r\n    assertTrue(ArrayUtils.containsAny(array, 3));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ArrayUtilsTest.java",
  "methodName" : "testContainsAnyObject",
  "sourceCode" : "@Test\r\nvoid testContainsAnyObject() {\r\n    final Object[] array = { \"0\", \"1\", \"2\", \"3\", null, \"0\" };\r\n    assertFalse(ArrayUtils.containsAny(null, (Object) null));\r\n    assertFalse(ArrayUtils.containsAny(null, \"1\"));\r\n    assertTrue(ArrayUtils.containsAny(array, \"0\"));\r\n    assertTrue(ArrayUtils.containsAny(array, \"1\"));\r\n    assertTrue(ArrayUtils.containsAny(array, \"2\"));\r\n    assertTrue(ArrayUtils.containsAny(array, \"3\"));\r\n    assertFalse(ArrayUtils.containsAny(array, \"notInArray\"));\r\n    assertTrue(ArrayUtils.containsAny(array, (Object[]) new String[] { null }));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ArrayUtilsTest.java",
  "methodName" : "testContainsBoolean",
  "sourceCode" : "@Test\r\nvoid testContainsBoolean() {\r\n    boolean[] array = null;\r\n    assertFalse(ArrayUtils.contains(array, true));\r\n    array = new boolean[] { true, false, true };\r\n    assertTrue(ArrayUtils.contains(array, true));\r\n    assertTrue(ArrayUtils.contains(array, false));\r\n    array = new boolean[] { true, true };\r\n    assertTrue(ArrayUtils.contains(array, true));\r\n    assertFalse(ArrayUtils.contains(array, false));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ArrayUtilsTest.java",
  "methodName" : "testContainsByte",
  "sourceCode" : "@Test\r\nvoid testContainsByte() {\r\n    byte[] array = null;\r\n    assertFalse(ArrayUtils.contains(array, (byte) 1));\r\n    array = new byte[] { 0, 1, 2, 3, 0 };\r\n    assertTrue(ArrayUtils.contains(array, (byte) 0));\r\n    assertTrue(ArrayUtils.contains(array, (byte) 1));\r\n    assertTrue(ArrayUtils.contains(array, (byte) 2));\r\n    assertTrue(ArrayUtils.contains(array, (byte) 3));\r\n    assertFalse(ArrayUtils.contains(array, (byte) 99));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ArrayUtilsTest.java",
  "methodName" : "testContainsChar",
  "sourceCode" : "@Test\r\nvoid testContainsChar() {\r\n    char[] array = null;\r\n    assertFalse(ArrayUtils.contains(array, 'b'));\r\n    array = new char[] { 'a', 'b', 'c', 'd', 'a' };\r\n    assertTrue(ArrayUtils.contains(array, 'a'));\r\n    assertTrue(ArrayUtils.contains(array, 'b'));\r\n    assertTrue(ArrayUtils.contains(array, 'c'));\r\n    assertTrue(ArrayUtils.contains(array, 'd'));\r\n    assertFalse(ArrayUtils.contains(array, 'e'));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ArrayUtilsTest.java",
  "methodName" : "testContainsDouble",
  "sourceCode" : "@Test\r\nvoid testContainsDouble() {\r\n    double[] array = null;\r\n    assertFalse(ArrayUtils.contains(array, 1));\r\n    array = new double[] { 0, 1, 2, 3, 0 };\r\n    assertTrue(ArrayUtils.contains(array, 0));\r\n    assertTrue(ArrayUtils.contains(array, 1));\r\n    assertTrue(ArrayUtils.contains(array, 2));\r\n    assertTrue(ArrayUtils.contains(array, 3));\r\n    assertFalse(ArrayUtils.contains(array, 99));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ArrayUtilsTest.java",
  "methodName" : "testContainsDoubleNaN",
  "sourceCode" : "@Test\r\nvoid testContainsDoubleNaN() {\r\n    final double[] a = { Double.NEGATIVE_INFINITY, Double.NaN, Double.POSITIVE_INFINITY };\r\n    assertTrue(ArrayUtils.contains(a, Double.POSITIVE_INFINITY));\r\n    assertTrue(ArrayUtils.contains(a, Double.NEGATIVE_INFINITY));\r\n    assertTrue(ArrayUtils.contains(a, Double.NaN));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ArrayUtilsTest.java",
  "methodName" : "testContainsDoubleTolerance",
  "sourceCode" : "@Test\r\nvoid testContainsDoubleTolerance() {\r\n    double[] array = null;\r\n    assertFalse(ArrayUtils.contains(array, 1, 0));\r\n    array = new double[] { 0, 1, 2, 3, 0 };\r\n    assertFalse(ArrayUtils.contains(array, 4.0, 0.33));\r\n    assertFalse(ArrayUtils.contains(array, 2.5, 0.49));\r\n    assertTrue(ArrayUtils.contains(array, 2.5, 0.50));\r\n    assertTrue(ArrayUtils.contains(array, 2.5, 0.51));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ArrayUtilsTest.java",
  "methodName" : "testContainsFloat",
  "sourceCode" : "@Test\r\nvoid testContainsFloat() {\r\n    float[] array = null;\r\n    assertFalse(ArrayUtils.contains(array, 1));\r\n    array = new float[] { 0, 1, 2, 3, 0 };\r\n    assertTrue(ArrayUtils.contains(array, 0));\r\n    assertTrue(ArrayUtils.contains(array, 1));\r\n    assertTrue(ArrayUtils.contains(array, 2));\r\n    assertTrue(ArrayUtils.contains(array, 3));\r\n    assertFalse(ArrayUtils.contains(array, 99));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ArrayUtilsTest.java",
  "methodName" : "testContainsFloatNaN",
  "sourceCode" : "@Test\r\nvoid testContainsFloatNaN() {\r\n    final float[] array = { Float.NEGATIVE_INFINITY, Float.NaN, Float.POSITIVE_INFINITY };\r\n    assertTrue(ArrayUtils.contains(array, Float.POSITIVE_INFINITY));\r\n    assertTrue(ArrayUtils.contains(array, Float.NEGATIVE_INFINITY));\r\n    assertTrue(ArrayUtils.contains(array, Float.NaN));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ArrayUtilsTest.java",
  "methodName" : "testContainsInt",
  "sourceCode" : "@Test\r\nvoid testContainsInt() {\r\n    int[] array = null;\r\n    assertFalse(ArrayUtils.contains(array, 1));\r\n    array = new int[] { 0, 1, 2, 3, 0 };\r\n    assertTrue(ArrayUtils.contains(array, 0));\r\n    assertTrue(ArrayUtils.contains(array, 1));\r\n    assertTrue(ArrayUtils.contains(array, 2));\r\n    assertTrue(ArrayUtils.contains(array, 3));\r\n    assertFalse(ArrayUtils.contains(array, 99));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ArrayUtilsTest.java",
  "methodName" : "testContainsLong",
  "sourceCode" : "@Test\r\nvoid testContainsLong() {\r\n    long[] array = null;\r\n    assertFalse(ArrayUtils.contains(array, 1));\r\n    array = new long[] { 0, 1, 2, 3, 0 };\r\n    assertTrue(ArrayUtils.contains(array, 0));\r\n    assertTrue(ArrayUtils.contains(array, 1));\r\n    assertTrue(ArrayUtils.contains(array, 2));\r\n    assertTrue(ArrayUtils.contains(array, 3));\r\n    assertFalse(ArrayUtils.contains(array, 99));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ArrayUtilsTest.java",
  "methodName" : "testContainsShort",
  "sourceCode" : "@Test\r\nvoid testContainsShort() {\r\n    short[] array = null;\r\n    assertFalse(ArrayUtils.contains(array, (short) 1));\r\n    array = new short[] { 0, 1, 2, 3, 0 };\r\n    assertTrue(ArrayUtils.contains(array, (short) 0));\r\n    assertTrue(ArrayUtils.contains(array, (short) 1));\r\n    assertTrue(ArrayUtils.contains(array, (short) 2));\r\n    assertTrue(ArrayUtils.contains(array, (short) 3));\r\n    assertFalse(ArrayUtils.contains(array, (short) 99));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ArrayUtilsTest.java",
  "methodName" : "testEmptyArrayCreation",
  "sourceCode" : "/**\r\n * Tests generic empty array creation with generic type.\r\n */\r\n@Test\r\nvoid testEmptyArrayCreation() {\r\n    final String[] array = ArrayUtils.<String>toArray();\r\n    assertEquals(0, array.length);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ArrayUtilsTest.java",
  "methodName" : "testGet",
  "sourceCode" : "@Test\r\nvoid testGet() {\r\n    assertNull(ArrayUtils.get(null, -1));\r\n    assertNull(ArrayUtils.get(null, 0));\r\n    assertNull(ArrayUtils.get(null, 1));\r\n    final String[] array0 = {};\r\n    assertNull(ArrayUtils.get(array0, -1));\r\n    assertNull(ArrayUtils.get(array0, 0));\r\n    assertNull(ArrayUtils.get(array0, 1));\r\n    final String[] array1 = { StringUtils.EMPTY };\r\n    assertNull(ArrayUtils.get(array1, -1));\r\n    assertEquals(StringUtils.EMPTY, ArrayUtils.get(array1, 0));\r\n    assertNull(ArrayUtils.get(array1, 1));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ArrayUtilsTest.java",
  "methodName" : "testGetComponentType",
  "sourceCode" : "@Test\r\nvoid testGetComponentType() {\r\n    final TestClass[] newArray = {};\r\n    // No type-cast required.\r\n    final Class<TestClass> componentType = ArrayUtils.getComponentType(newArray);\r\n    assertEquals(TestClass.class, componentType);\r\n    assertNull(ArrayUtils.getComponentType(null));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ArrayUtilsTest.java",
  "methodName" : "testGetDefault",
  "sourceCode" : "@Test\r\nvoid testGetDefault() {\r\n    // null default\r\n    {\r\n        assertNull(ArrayUtils.get(null, -1, null));\r\n        assertNull(ArrayUtils.get(null, 0, null));\r\n        assertNull(ArrayUtils.get(null, 1, null));\r\n        final String[] array0 = {};\r\n        assertNull(ArrayUtils.get(array0, -1, null));\r\n        assertNull(ArrayUtils.get(array0, 0, null));\r\n        assertNull(ArrayUtils.get(array0, 1, null));\r\n        final String[] array1 = { StringUtils.EMPTY };\r\n        assertNull(ArrayUtils.get(array1, -1, null));\r\n        assertEquals(StringUtils.EMPTY, ArrayUtils.get(array1, 0, null));\r\n        assertNull(ArrayUtils.get(array1, 1, null));\r\n    }\r\n    // non-null default\r\n    {\r\n        final String defaultValue = \"defaultValue\";\r\n        final String[] array1 = { StringUtils.EMPTY };\r\n        assertEquals(defaultValue, ArrayUtils.get(array1, -1, defaultValue));\r\n        assertEquals(StringUtils.EMPTY, ArrayUtils.get(array1, 0, defaultValue));\r\n        assertEquals(defaultValue, ArrayUtils.get(array1, 1, defaultValue));\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ArrayUtilsTest.java",
  "methodName" : "testGetLength",
  "sourceCode" : "@Test\r\nvoid testGetLength() {\r\n    assertEquals(0, ArrayUtils.getLength(null));\r\n    final Object[] emptyObjectArray = {};\r\n    final Object[] notEmptyObjectArray = { \"aValue\" };\r\n    assertEquals(0, ArrayUtils.getLength(null));\r\n    assertEquals(0, ArrayUtils.getLength(emptyObjectArray));\r\n    assertEquals(1, ArrayUtils.getLength(notEmptyObjectArray));\r\n    final int[] emptyIntArray = {};\r\n    final int[] notEmptyIntArray = { 1 };\r\n    assertEquals(0, ArrayUtils.getLength(null));\r\n    assertEquals(0, ArrayUtils.getLength(emptyIntArray));\r\n    assertEquals(1, ArrayUtils.getLength(notEmptyIntArray));\r\n    final short[] emptyShortArray = {};\r\n    final short[] notEmptyShortArray = { 1 };\r\n    assertEquals(0, ArrayUtils.getLength(null));\r\n    assertEquals(0, ArrayUtils.getLength(emptyShortArray));\r\n    assertEquals(1, ArrayUtils.getLength(notEmptyShortArray));\r\n    final char[] emptyCharArray = {};\r\n    final char[] notEmptyCharArray = { 1 };\r\n    assertEquals(0, ArrayUtils.getLength(null));\r\n    assertEquals(0, ArrayUtils.getLength(emptyCharArray));\r\n    assertEquals(1, ArrayUtils.getLength(notEmptyCharArray));\r\n    final byte[] emptyByteArray = {};\r\n    final byte[] notEmptyByteArray = { 1 };\r\n    assertEquals(0, ArrayUtils.getLength(null));\r\n    assertEquals(0, ArrayUtils.getLength(emptyByteArray));\r\n    assertEquals(1, ArrayUtils.getLength(notEmptyByteArray));\r\n    final double[] emptyDoubleArray = {};\r\n    final double[] notEmptyDoubleArray = { 1.0 };\r\n    assertEquals(0, ArrayUtils.getLength(null));\r\n    assertEquals(0, ArrayUtils.getLength(emptyDoubleArray));\r\n    assertEquals(1, ArrayUtils.getLength(notEmptyDoubleArray));\r\n    final float[] emptyFloatArray = {};\r\n    final float[] notEmptyFloatArray = { 1.0F };\r\n    assertEquals(0, ArrayUtils.getLength(null));\r\n    assertEquals(0, ArrayUtils.getLength(emptyFloatArray));\r\n    assertEquals(1, ArrayUtils.getLength(notEmptyFloatArray));\r\n    final boolean[] emptyBooleanArray = {};\r\n    final boolean[] notEmptyBooleanArray = { true };\r\n    assertEquals(0, ArrayUtils.getLength(null));\r\n    assertEquals(0, ArrayUtils.getLength(emptyBooleanArray));\r\n    assertEquals(1, ArrayUtils.getLength(notEmptyBooleanArray));\r\n    assertIllegalArgumentException(() -> ArrayUtils.getLength(\"notAnArray\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ArrayUtilsTest.java",
  "methodName" : "testHashCode",
  "sourceCode" : "@Test\r\nvoid testHashCode() {\r\n    final long[][] array1 = { { 2, 5 }, { 4, 5 } };\r\n    final long[][] array2 = { { 2, 5 }, { 4, 6 } };\r\n    assertEquals(ArrayUtils.hashCode(array1), ArrayUtils.hashCode(array1));\r\n    assertNotEquals(ArrayUtils.hashCode(array1), ArrayUtils.hashCode(array2));\r\n    final Object[] array3 = { new String(new char[] { 'A', 'B' }) };\r\n    final Object[] array4 = { \"AB\" };\r\n    assertEquals(ArrayUtils.hashCode(array3), ArrayUtils.hashCode(array3));\r\n    assertEquals(ArrayUtils.hashCode(array3), ArrayUtils.hashCode(array4));\r\n    final Object[] arrayA = { new boolean[] { true, false }, new int[] { 6, 7 } };\r\n    final Object[] arrayB = { new boolean[] { true, false }, new int[] { 6, 7 } };\r\n    assertEquals(ArrayUtils.hashCode(arrayB), ArrayUtils.hashCode(arrayA));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ArrayUtilsTest.java",
  "methodName" : "testIndexesOf",
  "sourceCode" : "@Test\r\nvoid testIndexesOf() {\r\n    final Object[] array = { \"0\", \"1\", \"2\", \"3\", null, \"0\" };\r\n    final BitSet emptySet = new BitSet();\r\n    final BitSet testSet = new BitSet();\r\n    assertEquals(emptySet, ArrayUtils.indexesOf((Object[]) null, null));\r\n    assertEquals(emptySet, ArrayUtils.indexesOf(new Object[0], \"0\"));\r\n    testSet.set(5);\r\n    testSet.set(0);\r\n    assertEquals(testSet, ArrayUtils.indexesOf(array, \"0\"));\r\n    testSet.clear();\r\n    testSet.set(2);\r\n    assertEquals(testSet, ArrayUtils.indexesOf(array, \"2\"));\r\n    testSet.clear();\r\n    testSet.set(3);\r\n    assertEquals(testSet, ArrayUtils.indexesOf(array, \"3\"));\r\n    testSet.clear();\r\n    testSet.set(4);\r\n    assertEquals(testSet, ArrayUtils.indexesOf(array, null));\r\n    assertEquals(emptySet, ArrayUtils.indexesOf(array, \"notInArray\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ArrayUtilsTest.java",
  "methodName" : "testIndexesOfBoolean",
  "sourceCode" : "@Test\r\nvoid testIndexesOfBoolean() {\r\n    boolean[] array = null;\r\n    final BitSet emptySet = new BitSet();\r\n    final BitSet testSet = new BitSet();\r\n    assertEquals(emptySet, ArrayUtils.indexesOf(array, true));\r\n    array = new boolean[0];\r\n    assertEquals(emptySet, ArrayUtils.indexesOf(array, true));\r\n    array = new boolean[] { true, false, true };\r\n    testSet.set(0);\r\n    testSet.set(2);\r\n    assertEquals(testSet, ArrayUtils.indexesOf(array, true));\r\n    testSet.clear();\r\n    testSet.set(1);\r\n    assertEquals(testSet, ArrayUtils.indexesOf(array, false));\r\n    array = new boolean[] { true, true };\r\n    assertEquals(emptySet, ArrayUtils.indexesOf(array, false));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ArrayUtilsTest.java",
  "methodName" : "testIndexesOfBooleanWithStartIndex",
  "sourceCode" : "@Test\r\nvoid testIndexesOfBooleanWithStartIndex() {\r\n    boolean[] array = null;\r\n    final BitSet emptySet = new BitSet();\r\n    final BitSet testSet = new BitSet();\r\n    assertEquals(emptySet, ArrayUtils.indexesOf(array, true, 0));\r\n    array = new boolean[0];\r\n    assertEquals(emptySet, ArrayUtils.indexesOf(array, true, 0));\r\n    array = new boolean[] { true, false, true };\r\n    testSet.set(2);\r\n    assertEquals(testSet, ArrayUtils.indexesOf(array, true, 1));\r\n    testSet.set(0);\r\n    assertEquals(testSet, ArrayUtils.indexesOf(array, true, 0));\r\n    testSet.clear();\r\n    testSet.set(1);\r\n    assertEquals(testSet, ArrayUtils.indexesOf(array, false, 1));\r\n    array = new boolean[] { true, true };\r\n    assertEquals(emptySet, ArrayUtils.indexesOf(array, false, 0));\r\n    assertEquals(emptySet, ArrayUtils.indexesOf(array, false, -1));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ArrayUtilsTest.java",
  "methodName" : "testIndexesOfByte",
  "sourceCode" : "@Test\r\nvoid testIndexesOfByte() {\r\n    byte[] array = null;\r\n    final BitSet emptySet = new BitSet();\r\n    final BitSet testSet = new BitSet();\r\n    assertEquals(emptySet, ArrayUtils.indexesOf(array, (byte) 0));\r\n    array = new byte[] { 0, 1, 2, 3, 0 };\r\n    testSet.set(0);\r\n    testSet.set(4);\r\n    assertEquals(testSet, ArrayUtils.indexesOf(array, (byte) 0));\r\n    testSet.clear();\r\n    testSet.set(1);\r\n    assertEquals(testSet, ArrayUtils.indexesOf(array, (byte) 1));\r\n    testSet.clear();\r\n    testSet.set(2);\r\n    assertEquals(testSet, ArrayUtils.indexesOf(array, (byte) 2));\r\n    testSet.clear();\r\n    testSet.set(3);\r\n    assertEquals(testSet, ArrayUtils.indexesOf(array, (byte) 3));\r\n    assertEquals(emptySet, ArrayUtils.indexesOf(array, (byte) 99));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ArrayUtilsTest.java",
  "methodName" : "testIndexesOfByteWithStartIndex",
  "sourceCode" : "@Test\r\nvoid testIndexesOfByteWithStartIndex() {\r\n    byte[] array = null;\r\n    final BitSet emptySet = new BitSet();\r\n    final BitSet testSet = new BitSet();\r\n    assertEquals(emptySet, ArrayUtils.indexesOf(array, (byte) 0, 2));\r\n    array = new byte[] { 0, 1, 2, 3, 0 };\r\n    testSet.set(4);\r\n    assertEquals(testSet, ArrayUtils.indexesOf(array, (byte) 0, 2));\r\n    testSet.set(0);\r\n    assertEquals(testSet, ArrayUtils.indexesOf(array, (byte) 0, 0));\r\n    testSet.clear();\r\n    testSet.set(1);\r\n    assertEquals(testSet, ArrayUtils.indexesOf(array, (byte) 1, 1));\r\n    testSet.clear();\r\n    testSet.set(2);\r\n    assertEquals(testSet, ArrayUtils.indexesOf(array, (byte) 2, 0));\r\n    testSet.clear();\r\n    testSet.set(3);\r\n    assertEquals(testSet, ArrayUtils.indexesOf(array, (byte) 3, 0));\r\n    assertEquals(testSet, ArrayUtils.indexesOf(array, (byte) 3, -1));\r\n    assertEquals(emptySet, ArrayUtils.indexesOf(array, (byte) 99, 0));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ArrayUtilsTest.java",
  "methodName" : "testIndexesOfChar",
  "sourceCode" : "@Test\r\nvoid testIndexesOfChar() {\r\n    char[] array = null;\r\n    final BitSet emptySet = new BitSet();\r\n    final BitSet testSet = new BitSet();\r\n    assertEquals(emptySet, ArrayUtils.indexesOf(array, 'a'));\r\n    array = new char[] { 'a', 'b', 'c', 'd', 'a' };\r\n    testSet.set(0);\r\n    testSet.set(4);\r\n    assertEquals(testSet, ArrayUtils.indexesOf(array, 'a'));\r\n    testSet.clear();\r\n    testSet.set(1);\r\n    assertEquals(testSet, ArrayUtils.indexesOf(array, 'b'));\r\n    testSet.clear();\r\n    testSet.set(2);\r\n    assertEquals(testSet, ArrayUtils.indexesOf(array, 'c'));\r\n    testSet.clear();\r\n    testSet.set(3);\r\n    assertEquals(testSet, ArrayUtils.indexesOf(array, 'd'));\r\n    assertEquals(emptySet, ArrayUtils.indexesOf(array, 'e'));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ArrayUtilsTest.java",
  "methodName" : "testIndexesOfCharWithStartIndex",
  "sourceCode" : "@Test\r\nvoid testIndexesOfCharWithStartIndex() {\r\n    char[] array = null;\r\n    final BitSet emptySet = new BitSet();\r\n    final BitSet testSet = new BitSet();\r\n    assertEquals(emptySet, ArrayUtils.indexesOf(array, 'a', 0));\r\n    array = new char[] { 'a', 'b', 'c', 'd', 'a' };\r\n    testSet.set(4);\r\n    assertEquals(testSet, ArrayUtils.indexesOf(array, 'a', 2));\r\n    testSet.set(0);\r\n    assertEquals(testSet, ArrayUtils.indexesOf(array, 'a', 0));\r\n    assertEquals(testSet, ArrayUtils.indexesOf(array, 'a', -1));\r\n    testSet.clear();\r\n    testSet.set(1);\r\n    assertEquals(testSet, ArrayUtils.indexesOf(array, 'b', 1));\r\n    testSet.clear();\r\n    testSet.set(2);\r\n    assertEquals(testSet, ArrayUtils.indexesOf(array, 'c', 0));\r\n    testSet.clear();\r\n    testSet.set(3);\r\n    assertEquals(testSet, ArrayUtils.indexesOf(array, 'd', 0));\r\n    assertEquals(emptySet, ArrayUtils.indexesOf(array, 'd', 5));\r\n    assertEquals(emptySet, ArrayUtils.indexesOf(array, 'e', 0));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ArrayUtilsTest.java",
  "methodName" : "testIndexesOfDouble",
  "sourceCode" : "@Test\r\nvoid testIndexesOfDouble() {\r\n    double[] array = null;\r\n    final BitSet emptySet = new BitSet();\r\n    final BitSet testSet = new BitSet();\r\n    assertEquals(emptySet, ArrayUtils.indexesOf(array, 0));\r\n    array = new double[] { 0, 1, 2, 3, 0 };\r\n    testSet.set(0);\r\n    testSet.set(4);\r\n    assertEquals(testSet, ArrayUtils.indexesOf(array, 0));\r\n    testSet.clear();\r\n    testSet.set(1);\r\n    assertEquals(testSet, ArrayUtils.indexesOf(array, 1));\r\n    testSet.clear();\r\n    testSet.set(2);\r\n    assertEquals(testSet, ArrayUtils.indexesOf(array, 2));\r\n    testSet.clear();\r\n    testSet.set(3);\r\n    assertEquals(testSet, ArrayUtils.indexesOf(array, 3));\r\n    assertEquals(emptySet, ArrayUtils.indexesOf(array, 99));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ArrayUtilsTest.java",
  "methodName" : "testIndexesOfDoubleTolerance",
  "sourceCode" : "@Test\r\nvoid testIndexesOfDoubleTolerance() {\r\n    double[] array = null;\r\n    final BitSet emptySet = new BitSet();\r\n    final BitSet testSet = new BitSet();\r\n    assertEquals(emptySet, ArrayUtils.indexesOf(array, (double) 0, (double) 0));\r\n    array = new double[0];\r\n    assertEquals(emptySet, ArrayUtils.indexesOf(array, (double) 0, (double) 0));\r\n    array = new double[] { 0, 1, 2, 3, 0 };\r\n    testSet.set(0);\r\n    testSet.set(4);\r\n    assertEquals(testSet, ArrayUtils.indexesOf(array, 0, 0.3));\r\n    testSet.clear();\r\n    testSet.set(3);\r\n    assertEquals(testSet, ArrayUtils.indexesOf(array, 4.15, 2.0));\r\n    testSet.clear();\r\n    testSet.set(1);\r\n    assertEquals(testSet, ArrayUtils.indexesOf(array, 1.00001324, 0.0001));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ArrayUtilsTest.java",
  "methodName" : "testIndexesOfDoubleWithStartIndex",
  "sourceCode" : "@Test\r\nvoid testIndexesOfDoubleWithStartIndex() {\r\n    double[] array = null;\r\n    final BitSet emptySet = new BitSet();\r\n    final BitSet testSet = new BitSet();\r\n    assertEquals(emptySet, ArrayUtils.indexesOf(array, 0, 2));\r\n    array = new double[] { 0, 1, 2, 3, 0 };\r\n    testSet.set(4);\r\n    assertEquals(testSet, ArrayUtils.indexesOf(array, 0, 2));\r\n    testSet.set(0);\r\n    assertEquals(testSet, ArrayUtils.indexesOf(array, 0, 0));\r\n    testSet.clear();\r\n    testSet.set(1);\r\n    assertEquals(testSet, ArrayUtils.indexesOf(array, 1, 1));\r\n    testSet.clear();\r\n    testSet.set(2);\r\n    assertEquals(testSet, ArrayUtils.indexesOf(array, 2, 0));\r\n    testSet.clear();\r\n    testSet.set(3);\r\n    assertEquals(testSet, ArrayUtils.indexesOf(array, 3, 0));\r\n    assertEquals(testSet, ArrayUtils.indexesOf(array, 3, -1));\r\n    assertEquals(emptySet, ArrayUtils.indexesOf(array, 99, 0));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ArrayUtilsTest.java",
  "methodName" : "testIndexesOfDoubleWithStartIndexTolerance",
  "sourceCode" : "@Test\r\nvoid testIndexesOfDoubleWithStartIndexTolerance() {\r\n    double[] array = null;\r\n    final BitSet emptySet = new BitSet();\r\n    final BitSet testSet = new BitSet();\r\n    assertEquals(emptySet, ArrayUtils.indexesOf(array, 0, 0, 0));\r\n    array = new double[0];\r\n    assertEquals(emptySet, ArrayUtils.indexesOf(array, 0, 0, 0));\r\n    array = new double[] { 0, 1, 2, 3, 0 };\r\n    testSet.set(4);\r\n    assertEquals(testSet, ArrayUtils.indexesOf(array, 0, 1, 0.3));\r\n    testSet.set(0);\r\n    assertEquals(testSet, ArrayUtils.indexesOf(array, 0, 0, 0.3));\r\n    testSet.clear();\r\n    testSet.set(2);\r\n    assertEquals(testSet, ArrayUtils.indexesOf(array, 2, 0, 0.35));\r\n    assertEquals(testSet, ArrayUtils.indexesOf(array, 2, 2, 0.35));\r\n    assertEquals(testSet, ArrayUtils.indexesOf(array, 2, -1, 0.35));\r\n    assertEquals(emptySet, ArrayUtils.indexesOf(array, 2, 3, 0.35));\r\n    testSet.clear();\r\n    testSet.set(3);\r\n    assertEquals(testSet, ArrayUtils.indexesOf(array, 4.15, 0, 2.0));\r\n    testSet.clear();\r\n    testSet.set(1);\r\n    assertEquals(testSet, ArrayUtils.indexesOf(array, 1.00001324, 0, 0.0001));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ArrayUtilsTest.java",
  "methodName" : "testIndexesOfFloat",
  "sourceCode" : "@Test\r\nvoid testIndexesOfFloat() {\r\n    float[] array = null;\r\n    final BitSet emptySet = new BitSet();\r\n    final BitSet testSet = new BitSet();\r\n    assertEquals(emptySet, ArrayUtils.indexesOf(array, 0));\r\n    array = new float[] { 0, 1, 2, 3, 0 };\r\n    testSet.set(0);\r\n    testSet.set(4);\r\n    assertEquals(testSet, ArrayUtils.indexesOf(array, 0));\r\n    testSet.clear();\r\n    testSet.set(1);\r\n    assertEquals(testSet, ArrayUtils.indexesOf(array, 1));\r\n    testSet.clear();\r\n    testSet.set(2);\r\n    assertEquals(testSet, ArrayUtils.indexesOf(array, 2));\r\n    testSet.clear();\r\n    testSet.set(3);\r\n    assertEquals(testSet, ArrayUtils.indexesOf(array, 3));\r\n    assertEquals(emptySet, ArrayUtils.indexesOf(array, 99));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ArrayUtilsTest.java",
  "methodName" : "testIndexesOfFloatWithStartIndex",
  "sourceCode" : "@Test\r\nvoid testIndexesOfFloatWithStartIndex() {\r\n    float[] array = null;\r\n    final BitSet emptySet = new BitSet();\r\n    final BitSet testSet = new BitSet();\r\n    assertEquals(emptySet, ArrayUtils.indexesOf(array, 0, 2));\r\n    array = new float[] { 0, 1, 2, 3, 0 };\r\n    testSet.set(4);\r\n    assertEquals(testSet, ArrayUtils.indexesOf(array, 0, 2));\r\n    testSet.set(0);\r\n    assertEquals(testSet, ArrayUtils.indexesOf(array, 0, 0));\r\n    testSet.clear();\r\n    testSet.set(1);\r\n    assertEquals(testSet, ArrayUtils.indexesOf(array, 1, 1));\r\n    testSet.clear();\r\n    testSet.set(2);\r\n    assertEquals(testSet, ArrayUtils.indexesOf(array, 2, 0));\r\n    testSet.clear();\r\n    testSet.set(3);\r\n    assertEquals(testSet, ArrayUtils.indexesOf(array, 3, 0));\r\n    assertEquals(testSet, ArrayUtils.indexesOf(array, 3, -1));\r\n    assertEquals(emptySet, ArrayUtils.indexesOf(array, 99, 0));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ArrayUtilsTest.java",
  "methodName" : "testIndexesOfIntWithStartIndex",
  "sourceCode" : "@Test\r\nvoid testIndexesOfIntWithStartIndex() {\r\n    int[] array = null;\r\n    final BitSet emptySet = new BitSet();\r\n    final BitSet testSet = new BitSet();\r\n    assertEquals(emptySet, ArrayUtils.indexesOf(array, 0, 2));\r\n    array = new int[] { 0, 1, 2, 3, 0 };\r\n    testSet.set(4);\r\n    assertEquals(testSet, ArrayUtils.indexesOf(array, 0, 2));\r\n    testSet.set(0);\r\n    assertEquals(testSet, ArrayUtils.indexesOf(array, 0, 0));\r\n    testSet.clear();\r\n    testSet.set(1);\r\n    assertEquals(testSet, ArrayUtils.indexesOf(array, 1, 1));\r\n    testSet.clear();\r\n    testSet.set(2);\r\n    assertEquals(testSet, ArrayUtils.indexesOf(array, 2, 0));\r\n    testSet.clear();\r\n    testSet.set(3);\r\n    assertEquals(testSet, ArrayUtils.indexesOf(array, 3, 0));\r\n    assertEquals(testSet, ArrayUtils.indexesOf(array, 3, -1));\r\n    assertEquals(emptySet, ArrayUtils.indexesOf(array, 99, 0));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ArrayUtilsTest.java",
  "methodName" : "testIndexesOfLong",
  "sourceCode" : "@Test\r\nvoid testIndexesOfLong() {\r\n    final long[] array = { 0, 1, 2, 3 };\r\n    final BitSet emptySet = new BitSet();\r\n    final BitSet testSet = new BitSet();\r\n    assertEquals(emptySet, ArrayUtils.indexesOf((long[]) null, 0));\r\n    assertEquals(emptySet, ArrayUtils.indexesOf(array, 4));\r\n    testSet.set(0);\r\n    assertEquals(testSet, ArrayUtils.indexesOf(array, 0));\r\n    testSet.clear();\r\n    testSet.set(1);\r\n    assertEquals(testSet, ArrayUtils.indexesOf(array, 1));\r\n    testSet.clear();\r\n    testSet.set(2);\r\n    assertEquals(testSet, ArrayUtils.indexesOf(array, 2));\r\n    testSet.clear();\r\n    testSet.set(3);\r\n    assertEquals(testSet, ArrayUtils.indexesOf(array, 3));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ArrayUtilsTest.java",
  "methodName" : "testIndexesOfLongWithStartIndex",
  "sourceCode" : "@Test\r\nvoid testIndexesOfLongWithStartIndex() {\r\n    final long[] array = { 0, 1, 2, 3, 2, 1, 0, 1 };\r\n    final BitSet emptySet = new BitSet();\r\n    final BitSet testSet = new BitSet();\r\n    assertEquals(emptySet, ArrayUtils.indexesOf((long[]) null, 0, 0));\r\n    assertEquals(emptySet, ArrayUtils.indexesOf(array, 4, 0));\r\n    testSet.set(6);\r\n    assertEquals(testSet, ArrayUtils.indexesOf(array, 0, 1));\r\n    testSet.set(0);\r\n    assertEquals(testSet, ArrayUtils.indexesOf(array, 0, 0));\r\n    testSet.clear();\r\n    testSet.set(1);\r\n    testSet.set(5);\r\n    testSet.set(7);\r\n    assertEquals(testSet, ArrayUtils.indexesOf(array, 1, 0));\r\n    testSet.clear();\r\n    testSet.set(2);\r\n    testSet.set(4);\r\n    assertEquals(testSet, ArrayUtils.indexesOf(array, 2, 0));\r\n    testSet.clear();\r\n    testSet.set(3);\r\n    assertEquals(testSet, ArrayUtils.indexesOf(array, 3, 0));\r\n    assertEquals(emptySet, ArrayUtils.indexesOf(array, 3, 8));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ArrayUtilsTest.java",
  "methodName" : "testIndexesOfShort",
  "sourceCode" : "@Test\r\nvoid testIndexesOfShort() {\r\n    short[] array = null;\r\n    final BitSet emptySet = new BitSet();\r\n    final BitSet testSet = new BitSet();\r\n    assertEquals(emptySet, ArrayUtils.indexesOf(array, (short) 0));\r\n    array = new short[] { 0, 1, 2, 3, 0 };\r\n    testSet.set(0);\r\n    testSet.set(4);\r\n    assertEquals(testSet, ArrayUtils.indexesOf(array, (short) 0));\r\n    testSet.clear();\r\n    testSet.set(1);\r\n    assertEquals(testSet, ArrayUtils.indexesOf(array, (short) 1));\r\n    testSet.clear();\r\n    testSet.set(2);\r\n    assertEquals(testSet, ArrayUtils.indexesOf(array, (short) 2));\r\n    testSet.clear();\r\n    testSet.set(3);\r\n    assertEquals(testSet, ArrayUtils.indexesOf(array, (short) 3));\r\n    assertEquals(emptySet, ArrayUtils.indexesOf(array, (short) 99));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ArrayUtilsTest.java",
  "methodName" : "testIndexesOfShortWithStartIndex",
  "sourceCode" : "@Test\r\nvoid testIndexesOfShortWithStartIndex() {\r\n    short[] array = null;\r\n    final BitSet emptySet = new BitSet();\r\n    final BitSet testSet = new BitSet();\r\n    assertEquals(emptySet, ArrayUtils.indexesOf(array, (short) 0, 2));\r\n    array = new short[] { 0, 1, 2, 3, 0 };\r\n    testSet.set(4);\r\n    assertEquals(testSet, ArrayUtils.indexesOf(array, (short) 0, 2));\r\n    testSet.set(0);\r\n    assertEquals(testSet, ArrayUtils.indexesOf(array, (short) 0, 0));\r\n    testSet.clear();\r\n    testSet.set(1);\r\n    assertEquals(testSet, ArrayUtils.indexesOf(array, (short) 1, 1));\r\n    testSet.clear();\r\n    testSet.set(2);\r\n    assertEquals(testSet, ArrayUtils.indexesOf(array, (short) 2, 0));\r\n    testSet.clear();\r\n    testSet.set(3);\r\n    assertEquals(testSet, ArrayUtils.indexesOf(array, (short) 3, 0));\r\n    assertEquals(testSet, ArrayUtils.indexesOf(array, (short) 3, -1));\r\n    assertEquals(emptySet, ArrayUtils.indexesOf(array, (short) 99, 0));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ArrayUtilsTest.java",
  "methodName" : "testIndexesOfWithStartIndex",
  "sourceCode" : "@Test\r\nvoid testIndexesOfWithStartIndex() {\r\n    final Object[] array = { \"0\", \"1\", \"2\", \"3\", \"2\", \"3\", \"1\", null, \"0\" };\r\n    final BitSet emptySet = new BitSet();\r\n    final BitSet testSet = new BitSet();\r\n    assertEquals(emptySet, ArrayUtils.indexesOf(null, null, 2));\r\n    assertEquals(emptySet, ArrayUtils.indexesOf(new Object[0], \"0\", 0));\r\n    assertEquals(emptySet, ArrayUtils.indexesOf(null, \"0\", 2));\r\n    testSet.set(8);\r\n    assertEquals(testSet, ArrayUtils.indexesOf(array, \"0\", 8));\r\n    testSet.set(0);\r\n    assertEquals(testSet, ArrayUtils.indexesOf(array, \"0\", 0));\r\n    testSet.clear();\r\n    testSet.set(6);\r\n    testSet.set(1);\r\n    assertEquals(testSet, ArrayUtils.indexesOf(array, \"1\", 0));\r\n    assertEquals(emptySet, ArrayUtils.indexesOf(array, \"1\", 9));\r\n    testSet.clear();\r\n    testSet.set(4);\r\n    assertEquals(testSet, ArrayUtils.indexesOf(array, \"2\", 3));\r\n    testSet.set(2);\r\n    assertEquals(testSet, ArrayUtils.indexesOf(array, \"2\", 0));\r\n    testSet.clear();\r\n    testSet.set(3);\r\n    testSet.set(5);\r\n    assertEquals(testSet, ArrayUtils.indexesOf(array, \"3\", 0));\r\n    testSet.clear();\r\n    testSet.set(7);\r\n    assertEquals(testSet, ArrayUtils.indexesOf(array, null, 0));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ArrayUtilsTest.java",
  "methodName" : "testIndexOf",
  "sourceCode" : "@Test\r\nvoid testIndexOf() {\r\n    final Object[] array = { \"0\", \"1\", \"2\", \"3\", null, \"0\" };\r\n    assertEquals(-1, ArrayUtils.indexOf(null, null));\r\n    assertEquals(-1, ArrayUtils.indexOf(null, \"0\"));\r\n    assertEquals(-1, ArrayUtils.indexOf(new Object[0], \"0\"));\r\n    assertEquals(0, ArrayUtils.indexOf(array, \"0\"));\r\n    assertEquals(1, ArrayUtils.indexOf(array, \"1\"));\r\n    assertEquals(2, ArrayUtils.indexOf(array, \"2\"));\r\n    assertEquals(3, ArrayUtils.indexOf(array, \"3\"));\r\n    assertEquals(4, ArrayUtils.indexOf(array, null));\r\n    assertEquals(-1, ArrayUtils.indexOf(array, \"notInArray\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ArrayUtilsTest.java",
  "methodName" : "testIndexOfBoolean",
  "sourceCode" : "@Test\r\nvoid testIndexOfBoolean() {\r\n    boolean[] array = null;\r\n    assertEquals(-1, ArrayUtils.indexOf(array, true));\r\n    array = new boolean[0];\r\n    assertEquals(-1, ArrayUtils.indexOf(array, true));\r\n    array = new boolean[] { true, false, true };\r\n    assertEquals(0, ArrayUtils.indexOf(array, true));\r\n    assertEquals(1, ArrayUtils.indexOf(array, false));\r\n    array = new boolean[] { true, true };\r\n    assertEquals(-1, ArrayUtils.indexOf(array, false));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ArrayUtilsTest.java",
  "methodName" : "testIndexOfBooleanWithStartIndex",
  "sourceCode" : "@Test\r\nvoid testIndexOfBooleanWithStartIndex() {\r\n    boolean[] array = null;\r\n    assertEquals(-1, ArrayUtils.indexOf(array, true, 2));\r\n    array = new boolean[0];\r\n    assertEquals(-1, ArrayUtils.indexOf(array, true, 2));\r\n    array = new boolean[] { true, false, true };\r\n    assertEquals(2, ArrayUtils.indexOf(array, true, 1));\r\n    assertEquals(-1, ArrayUtils.indexOf(array, false, 2));\r\n    assertEquals(1, ArrayUtils.indexOf(array, false, 0));\r\n    assertEquals(1, ArrayUtils.indexOf(array, false, -1));\r\n    array = new boolean[] { true, true };\r\n    assertEquals(-1, ArrayUtils.indexOf(array, false, 0));\r\n    assertEquals(-1, ArrayUtils.indexOf(array, false, -1));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ArrayUtilsTest.java",
  "methodName" : "testIndexOfByte",
  "sourceCode" : "@Test\r\nvoid testIndexOfByte() {\r\n    byte[] array = null;\r\n    assertEquals(-1, ArrayUtils.indexOf(array, (byte) 0));\r\n    array = new byte[] { 0, 1, 2, 3, 0 };\r\n    assertEquals(0, ArrayUtils.indexOf(array, (byte) 0));\r\n    assertEquals(1, ArrayUtils.indexOf(array, (byte) 1));\r\n    assertEquals(2, ArrayUtils.indexOf(array, (byte) 2));\r\n    assertEquals(3, ArrayUtils.indexOf(array, (byte) 3));\r\n    assertEquals(-1, ArrayUtils.indexOf(array, (byte) 99));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ArrayUtilsTest.java",
  "methodName" : "testIndexOfByteWithStartIndex",
  "sourceCode" : "@Test\r\nvoid testIndexOfByteWithStartIndex() {\r\n    byte[] array = null;\r\n    assertEquals(-1, ArrayUtils.indexOf(array, (byte) 0, 2));\r\n    array = new byte[] { 0, 1, 2, 3, 0 };\r\n    assertEquals(4, ArrayUtils.indexOf(array, (byte) 0, 2));\r\n    assertEquals(-1, ArrayUtils.indexOf(array, (byte) 1, 2));\r\n    assertEquals(2, ArrayUtils.indexOf(array, (byte) 2, 2));\r\n    assertEquals(3, ArrayUtils.indexOf(array, (byte) 3, 2));\r\n    assertEquals(3, ArrayUtils.indexOf(array, (byte) 3, -1));\r\n    assertEquals(-1, ArrayUtils.indexOf(array, (byte) 99, 0));\r\n    assertEquals(-1, ArrayUtils.indexOf(array, (byte) 0, 6));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ArrayUtilsTest.java",
  "methodName" : "testIndexOfChar",
  "sourceCode" : "@Test\r\nvoid testIndexOfChar() {\r\n    char[] array = null;\r\n    assertEquals(-1, ArrayUtils.indexOf(array, 'a'));\r\n    array = new char[] { 'a', 'b', 'c', 'd', 'a' };\r\n    assertEquals(0, ArrayUtils.indexOf(array, 'a'));\r\n    assertEquals(1, ArrayUtils.indexOf(array, 'b'));\r\n    assertEquals(2, ArrayUtils.indexOf(array, 'c'));\r\n    assertEquals(3, ArrayUtils.indexOf(array, 'd'));\r\n    assertEquals(-1, ArrayUtils.indexOf(array, 'e'));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ArrayUtilsTest.java",
  "methodName" : "testIndexOfCharWithStartIndex",
  "sourceCode" : "@Test\r\nvoid testIndexOfCharWithStartIndex() {\r\n    char[] array = null;\r\n    assertEquals(-1, ArrayUtils.indexOf(array, 'a', 2));\r\n    array = new char[] { 'a', 'b', 'c', 'd', 'a' };\r\n    assertEquals(4, ArrayUtils.indexOf(array, 'a', 2));\r\n    assertEquals(-1, ArrayUtils.indexOf(array, 'b', 2));\r\n    assertEquals(2, ArrayUtils.indexOf(array, 'c', 2));\r\n    assertEquals(3, ArrayUtils.indexOf(array, 'd', 2));\r\n    assertEquals(3, ArrayUtils.indexOf(array, 'd', -1));\r\n    assertEquals(-1, ArrayUtils.indexOf(array, 'e', 0));\r\n    assertEquals(-1, ArrayUtils.indexOf(array, 'a', 6));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ArrayUtilsTest.java",
  "methodName" : "testIndexOfDouble",
  "sourceCode" : "@Test\r\nvoid testIndexOfDouble() {\r\n    double[] array = null;\r\n    assertEquals(-1, ArrayUtils.indexOf(array, 0));\r\n    array = new double[0];\r\n    assertEquals(-1, ArrayUtils.indexOf(array, 0));\r\n    array = new double[] { 0, 1, 2, 3, 0 };\r\n    assertEquals(0, ArrayUtils.indexOf(array, 0));\r\n    assertEquals(1, ArrayUtils.indexOf(array, 1));\r\n    assertEquals(2, ArrayUtils.indexOf(array, 2));\r\n    assertEquals(3, ArrayUtils.indexOf(array, 3));\r\n    assertEquals(3, ArrayUtils.indexOf(array, 3, -1));\r\n    assertEquals(-1, ArrayUtils.indexOf(array, 99));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ArrayUtilsTest.java",
  "methodName" : "testIndexOfDoubleNaN",
  "sourceCode" : "@Test\r\nvoid testIndexOfDoubleNaN() {\r\n    final double[] array = { Double.NEGATIVE_INFINITY, Double.NaN, Double.POSITIVE_INFINITY, Double.NaN };\r\n    assertEquals(0, ArrayUtils.indexOf(array, Double.NEGATIVE_INFINITY));\r\n    assertEquals(1, ArrayUtils.indexOf(array, Double.NaN));\r\n    assertEquals(2, ArrayUtils.indexOf(array, Double.POSITIVE_INFINITY));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ArrayUtilsTest.java",
  "methodName" : "testIndexOfDoubleTolerance",
  "sourceCode" : "@Test\r\nvoid testIndexOfDoubleTolerance() {\r\n    double[] array = null;\r\n    assertEquals(-1, ArrayUtils.indexOf(array, (double) 0, (double) 0));\r\n    array = new double[0];\r\n    assertEquals(-1, ArrayUtils.indexOf(array, (double) 0, (double) 0));\r\n    array = new double[] { 0, 1, 2, 3, 0 };\r\n    assertEquals(0, ArrayUtils.indexOf(array, 0, 0.3));\r\n    assertEquals(2, ArrayUtils.indexOf(array, 2.2, 0.35));\r\n    assertEquals(3, ArrayUtils.indexOf(array, 4.15, 2.0));\r\n    assertEquals(1, ArrayUtils.indexOf(array, 1.00001324, 0.0001));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ArrayUtilsTest.java",
  "methodName" : "testIndexOfDoubleWithStartIndex",
  "sourceCode" : "@Test\r\nvoid testIndexOfDoubleWithStartIndex() {\r\n    double[] array = null;\r\n    assertEquals(-1, ArrayUtils.indexOf(array, 0, 2));\r\n    array = new double[0];\r\n    assertEquals(-1, ArrayUtils.indexOf(array, 0, 2));\r\n    array = new double[] { 0, 1, 2, 3, 0 };\r\n    assertEquals(4, ArrayUtils.indexOf(array, 0, 2));\r\n    assertEquals(-1, ArrayUtils.indexOf(array, 1, 2));\r\n    assertEquals(2, ArrayUtils.indexOf(array, 2, 2));\r\n    assertEquals(3, ArrayUtils.indexOf(array, 3, 2));\r\n    assertEquals(-1, ArrayUtils.indexOf(array, 99, 0));\r\n    assertEquals(-1, ArrayUtils.indexOf(array, 0, 6));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ArrayUtilsTest.java",
  "methodName" : "testIndexOfDoubleWithStartIndexTolerance",
  "sourceCode" : "@Test\r\nvoid testIndexOfDoubleWithStartIndexTolerance() {\r\n    double[] array = null;\r\n    assertEquals(-1, ArrayUtils.indexOf(array, 0, 2, 0));\r\n    array = new double[0];\r\n    assertEquals(-1, ArrayUtils.indexOf(array, 0, 2, 0));\r\n    array = new double[] { 0, 1, 2, 3, 0 };\r\n    assertEquals(-1, ArrayUtils.indexOf(array, 0, 99, 0.3));\r\n    assertEquals(0, ArrayUtils.indexOf(array, 0, 0, 0.3));\r\n    assertEquals(4, ArrayUtils.indexOf(array, 0, 3, 0.3));\r\n    assertEquals(2, ArrayUtils.indexOf(array, 2.2, 0, 0.35));\r\n    assertEquals(3, ArrayUtils.indexOf(array, 4.15, 0, 2.0));\r\n    assertEquals(1, ArrayUtils.indexOf(array, 1.00001324, 0, 0.0001));\r\n    assertEquals(3, ArrayUtils.indexOf(array, 4.15, -1, 2.0));\r\n    assertEquals(1, ArrayUtils.indexOf(array, 1.00001324, -300, 0.0001));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ArrayUtilsTest.java",
  "methodName" : "testIndexOfFloat",
  "sourceCode" : "@Test\r\nvoid testIndexOfFloat() {\r\n    float[] array = null;\r\n    assertEquals(-1, ArrayUtils.indexOf(array, 0));\r\n    array = new float[0];\r\n    assertEquals(-1, ArrayUtils.indexOf(array, 0));\r\n    array = new float[] { 0, 1, 2, 3, 0 };\r\n    assertEquals(0, ArrayUtils.indexOf(array, 0));\r\n    assertEquals(1, ArrayUtils.indexOf(array, 1));\r\n    assertEquals(2, ArrayUtils.indexOf(array, 2));\r\n    assertEquals(3, ArrayUtils.indexOf(array, 3));\r\n    assertEquals(-1, ArrayUtils.indexOf(array, 99));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ArrayUtilsTest.java",
  "methodName" : "testIndexOfFloatNaN",
  "sourceCode" : "@Test\r\nvoid testIndexOfFloatNaN() {\r\n    final float[] array = { Float.NEGATIVE_INFINITY, Float.NaN, Float.POSITIVE_INFINITY, Float.NaN };\r\n    assertEquals(0, ArrayUtils.indexOf(array, Float.NEGATIVE_INFINITY));\r\n    assertEquals(1, ArrayUtils.indexOf(array, Float.NaN));\r\n    assertEquals(2, ArrayUtils.indexOf(array, Float.POSITIVE_INFINITY));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ArrayUtilsTest.java",
  "methodName" : "testIndexOfFloatWithStartIndex",
  "sourceCode" : "@Test\r\nvoid testIndexOfFloatWithStartIndex() {\r\n    float[] array = null;\r\n    assertEquals(-1, ArrayUtils.indexOf(array, 0, 2));\r\n    array = new float[0];\r\n    assertEquals(-1, ArrayUtils.indexOf(array, 0, 2));\r\n    array = new float[] { 0, 1, 2, 3, 0 };\r\n    assertEquals(4, ArrayUtils.indexOf(array, 0, 2));\r\n    assertEquals(-1, ArrayUtils.indexOf(array, 1, 2));\r\n    assertEquals(2, ArrayUtils.indexOf(array, 2, 2));\r\n    assertEquals(3, ArrayUtils.indexOf(array, 3, 2));\r\n    assertEquals(3, ArrayUtils.indexOf(array, 3, -1));\r\n    assertEquals(-1, ArrayUtils.indexOf(array, 99, 0));\r\n    assertEquals(-1, ArrayUtils.indexOf(array, 0, 6));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ArrayUtilsTest.java",
  "methodName" : "testIndexOfInt",
  "sourceCode" : "@Test\r\nvoid testIndexOfInt() {\r\n    int[] array = null;\r\n    assertEquals(-1, ArrayUtils.indexOf(array, 0));\r\n    array = new int[] { 0, 1, 2, 3, 0 };\r\n    assertEquals(0, ArrayUtils.indexOf(array, 0));\r\n    assertEquals(1, ArrayUtils.indexOf(array, 1));\r\n    assertEquals(2, ArrayUtils.indexOf(array, 2));\r\n    assertEquals(3, ArrayUtils.indexOf(array, 3));\r\n    assertEquals(-1, ArrayUtils.indexOf(array, 99));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ArrayUtilsTest.java",
  "methodName" : "testIndexOfIntWithStartIndex",
  "sourceCode" : "@Test\r\nvoid testIndexOfIntWithStartIndex() {\r\n    int[] array = null;\r\n    assertEquals(-1, ArrayUtils.indexOf(array, 0, 2));\r\n    array = new int[] { 0, 1, 2, 3, 0 };\r\n    assertEquals(4, ArrayUtils.indexOf(array, 0, 2));\r\n    assertEquals(-1, ArrayUtils.indexOf(array, 1, 2));\r\n    assertEquals(2, ArrayUtils.indexOf(array, 2, 2));\r\n    assertEquals(3, ArrayUtils.indexOf(array, 3, 2));\r\n    assertEquals(3, ArrayUtils.indexOf(array, 3, -1));\r\n    assertEquals(-1, ArrayUtils.indexOf(array, 99, 0));\r\n    assertEquals(-1, ArrayUtils.indexOf(array, 0, 6));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ArrayUtilsTest.java",
  "methodName" : "testIndexOfLong",
  "sourceCode" : "@Test\r\nvoid testIndexOfLong() {\r\n    long[] array = null;\r\n    assertEquals(-1, ArrayUtils.indexOf(array, 0));\r\n    array = new long[] { 0, 1, 2, 3, 0 };\r\n    assertEquals(0, ArrayUtils.indexOf(array, 0));\r\n    assertEquals(1, ArrayUtils.indexOf(array, 1));\r\n    assertEquals(2, ArrayUtils.indexOf(array, 2));\r\n    assertEquals(3, ArrayUtils.indexOf(array, 3));\r\n    assertEquals(-1, ArrayUtils.indexOf(array, 99));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ArrayUtilsTest.java",
  "methodName" : "testIndexOfLongWithStartIndex",
  "sourceCode" : "@Test\r\nvoid testIndexOfLongWithStartIndex() {\r\n    long[] array = null;\r\n    assertEquals(-1, ArrayUtils.indexOf(array, 0, 2));\r\n    array = new long[] { 0, 1, 2, 3, 0 };\r\n    assertEquals(4, ArrayUtils.indexOf(array, 0, 2));\r\n    assertEquals(-1, ArrayUtils.indexOf(array, 1, 2));\r\n    assertEquals(2, ArrayUtils.indexOf(array, 2, 2));\r\n    assertEquals(3, ArrayUtils.indexOf(array, 3, 2));\r\n    assertEquals(3, ArrayUtils.indexOf(array, 3, -1));\r\n    assertEquals(-1, ArrayUtils.indexOf(array, 99, 0));\r\n    assertEquals(-1, ArrayUtils.indexOf(array, 0, 6));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ArrayUtilsTest.java",
  "methodName" : "testIndexOfShort",
  "sourceCode" : "@Test\r\nvoid testIndexOfShort() {\r\n    short[] array = null;\r\n    assertEquals(-1, ArrayUtils.indexOf(array, (short) 0));\r\n    array = new short[] { 0, 1, 2, 3, 0 };\r\n    assertEquals(0, ArrayUtils.indexOf(array, (short) 0));\r\n    assertEquals(1, ArrayUtils.indexOf(array, (short) 1));\r\n    assertEquals(2, ArrayUtils.indexOf(array, (short) 2));\r\n    assertEquals(3, ArrayUtils.indexOf(array, (short) 3));\r\n    assertEquals(-1, ArrayUtils.indexOf(array, (short) 99));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ArrayUtilsTest.java",
  "methodName" : "testIndexOfShortWithStartIndex",
  "sourceCode" : "@Test\r\nvoid testIndexOfShortWithStartIndex() {\r\n    short[] array = null;\r\n    assertEquals(-1, ArrayUtils.indexOf(array, (short) 0, 2));\r\n    array = new short[] { 0, 1, 2, 3, 0 };\r\n    assertEquals(4, ArrayUtils.indexOf(array, (short) 0, 2));\r\n    assertEquals(-1, ArrayUtils.indexOf(array, (short) 1, 2));\r\n    assertEquals(2, ArrayUtils.indexOf(array, (short) 2, 2));\r\n    assertEquals(3, ArrayUtils.indexOf(array, (short) 3, 2));\r\n    assertEquals(3, ArrayUtils.indexOf(array, (short) 3, -1));\r\n    assertEquals(-1, ArrayUtils.indexOf(array, (short) 99, 0));\r\n    assertEquals(-1, ArrayUtils.indexOf(array, (short) 0, 6));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ArrayUtilsTest.java",
  "methodName" : "testIndexOfWithStartIndex",
  "sourceCode" : "@Test\r\nvoid testIndexOfWithStartIndex() {\r\n    final Object[] array = { \"0\", \"1\", \"2\", \"3\", null, \"0\" };\r\n    assertEquals(-1, ArrayUtils.indexOf(null, null, 2));\r\n    assertEquals(-1, ArrayUtils.indexOf(new Object[0], \"0\", 0));\r\n    assertEquals(-1, ArrayUtils.indexOf(null, \"0\", 2));\r\n    assertEquals(5, ArrayUtils.indexOf(array, \"0\", 2));\r\n    assertEquals(-1, ArrayUtils.indexOf(array, \"1\", 2));\r\n    assertEquals(2, ArrayUtils.indexOf(array, \"2\", 2));\r\n    assertEquals(3, ArrayUtils.indexOf(array, \"3\", 2));\r\n    assertEquals(4, ArrayUtils.indexOf(array, null, 2));\r\n    assertEquals(-1, ArrayUtils.indexOf(array, \"notInArray\", 2));\r\n    assertEquals(4, ArrayUtils.indexOf(array, null, -1));\r\n    assertEquals(-1, ArrayUtils.indexOf(array, null, 8));\r\n    assertEquals(-1, ArrayUtils.indexOf(array, \"0\", 8));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ArrayUtilsTest.java",
  "methodName" : "testIndirectArrayCreation",
  "sourceCode" : "/**\r\n * Tests generic array creation with generic type.\r\n */\r\n@Test\r\nvoid testIndirectArrayCreation() {\r\n    final String[] array = toArrayPropagatingType(\"foo\", \"bar\");\r\n    assertEquals(2, array.length);\r\n    assertEquals(\"foo\", array[0]);\r\n    assertEquals(\"bar\", array[1]);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ArrayUtilsTest.java",
  "methodName" : "testIndirectEmptyArrayCreation",
  "sourceCode" : "/**\r\n * Tests indirect generic empty array creation with generic type.\r\n */\r\n@Test\r\nvoid testIndirectEmptyArrayCreation() {\r\n    final String[] array = ArrayUtilsTest.<String>toArrayPropagatingType();\r\n    assertEquals(0, array.length);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ArrayUtilsTest.java",
  "methodName" : "testIsArrayIndexValid",
  "sourceCode" : "@Test\r\nvoid testIsArrayIndexValid() {\r\n    assertFalse(ArrayUtils.isArrayIndexValid(null, 0));\r\n    final String[] array = new String[1];\r\n    //too big\r\n    assertFalse(ArrayUtils.isArrayIndexValid(array, 1));\r\n    //negative index\r\n    assertFalse(ArrayUtils.isArrayIndexValid(array, -1));\r\n    //good to go\r\n    assertTrue(ArrayUtils.isArrayIndexValid(array, 0));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ArrayUtilsTest.java",
  "methodName" : "testIsEmptyObject",
  "sourceCode" : "/**\r\n * Test for {@link ArrayUtils#isEmpty(java.lang.Object[])}.\r\n */\r\n@Test\r\nvoid testIsEmptyObject() {\r\n    final Object[] emptyArray = {};\r\n    final Object[] notEmptyArray = { \"Value\" };\r\n    assertTrue(ArrayUtils.isEmpty((Object[]) null));\r\n    assertTrue(ArrayUtils.isEmpty(emptyArray));\r\n    assertFalse(ArrayUtils.isEmpty(notEmptyArray));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ArrayUtilsTest.java",
  "methodName" : "testIsEmptyPrimitives",
  "sourceCode" : "/**\r\n * Tests for {@link ArrayUtils#isEmpty(long[])},\r\n * {@link ArrayUtils#isEmpty(int[])},\r\n * {@link ArrayUtils#isEmpty(short[])},\r\n * {@link ArrayUtils#isEmpty(char[])},\r\n * {@link ArrayUtils#isEmpty(byte[])},\r\n * {@link ArrayUtils#isEmpty(double[])},\r\n * {@link ArrayUtils#isEmpty(float[])} and\r\n * {@link ArrayUtils#isEmpty(boolean[])}.\r\n */\r\n@Test\r\nvoid testIsEmptyPrimitives() {\r\n    final long[] emptyLongArray = {};\r\n    final long[] notEmptyLongArray = { 1L };\r\n    assertTrue(ArrayUtils.isEmpty((long[]) null));\r\n    assertTrue(ArrayUtils.isEmpty(emptyLongArray));\r\n    assertFalse(ArrayUtils.isEmpty(notEmptyLongArray));\r\n    final int[] emptyIntArray = {};\r\n    final int[] notEmptyIntArray = { 1 };\r\n    assertTrue(ArrayUtils.isEmpty((int[]) null));\r\n    assertTrue(ArrayUtils.isEmpty(emptyIntArray));\r\n    assertFalse(ArrayUtils.isEmpty(notEmptyIntArray));\r\n    final short[] emptyShortArray = {};\r\n    final short[] notEmptyShortArray = { 1 };\r\n    assertTrue(ArrayUtils.isEmpty((short[]) null));\r\n    assertTrue(ArrayUtils.isEmpty(emptyShortArray));\r\n    assertFalse(ArrayUtils.isEmpty(notEmptyShortArray));\r\n    final char[] emptyCharArray = {};\r\n    final char[] notEmptyCharArray = { 1 };\r\n    assertTrue(ArrayUtils.isEmpty((char[]) null));\r\n    assertTrue(ArrayUtils.isEmpty(emptyCharArray));\r\n    assertFalse(ArrayUtils.isEmpty(notEmptyCharArray));\r\n    final byte[] emptyByteArray = {};\r\n    final byte[] notEmptyByteArray = { 1 };\r\n    assertTrue(ArrayUtils.isEmpty((byte[]) null));\r\n    assertTrue(ArrayUtils.isEmpty(emptyByteArray));\r\n    assertFalse(ArrayUtils.isEmpty(notEmptyByteArray));\r\n    final double[] emptyDoubleArray = {};\r\n    final double[] notEmptyDoubleArray = { 1.0 };\r\n    assertTrue(ArrayUtils.isEmpty((double[]) null));\r\n    assertTrue(ArrayUtils.isEmpty(emptyDoubleArray));\r\n    assertFalse(ArrayUtils.isEmpty(notEmptyDoubleArray));\r\n    final float[] emptyFloatArray = {};\r\n    final float[] notEmptyFloatArray = { 1.0F };\r\n    assertTrue(ArrayUtils.isEmpty((float[]) null));\r\n    assertTrue(ArrayUtils.isEmpty(emptyFloatArray));\r\n    assertFalse(ArrayUtils.isEmpty(notEmptyFloatArray));\r\n    final boolean[] emptyBooleanArray = {};\r\n    final boolean[] notEmptyBooleanArray = { true };\r\n    assertTrue(ArrayUtils.isEmpty((boolean[]) null));\r\n    assertTrue(ArrayUtils.isEmpty(emptyBooleanArray));\r\n    assertFalse(ArrayUtils.isEmpty(notEmptyBooleanArray));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ArrayUtilsTest.java",
  "methodName" : "testIsEquals",
  "sourceCode" : "@Test\r\nvoid testIsEquals() {\r\n    final long[][] larray1 = { { 2, 5 }, { 4, 5 } };\r\n    final long[][] larray2 = { { 2, 5 }, { 4, 6 } };\r\n    final long[] larray3 = { 2, 5 };\r\n    assertIsEquals(larray1, larray2, larray3);\r\n    final int[][] iarray1 = { { 2, 5 }, { 4, 5 } };\r\n    final int[][] iarray2 = { { 2, 5 }, { 4, 6 } };\r\n    final int[] iarray3 = { 2, 5 };\r\n    assertIsEquals(iarray1, iarray2, iarray3);\r\n    final short[][] sarray1 = { { 2, 5 }, { 4, 5 } };\r\n    final short[][] sarray2 = { { 2, 5 }, { 4, 6 } };\r\n    final short[] sarray3 = { 2, 5 };\r\n    assertIsEquals(sarray1, sarray2, sarray3);\r\n    final float[][] farray1 = { { 2, 5 }, { 4, 5 } };\r\n    final float[][] farray2 = { { 2, 5 }, { 4, 6 } };\r\n    final float[] farray3 = { 2, 5 };\r\n    assertIsEquals(farray1, farray2, farray3);\r\n    final double[][] darray1 = { { 2, 5 }, { 4, 5 } };\r\n    final double[][] darray2 = { { 2, 5 }, { 4, 6 } };\r\n    final double[] darray3 = { 2, 5 };\r\n    assertIsEquals(darray1, darray2, darray3);\r\n    final byte[][] byteArray1 = { { 2, 5 }, { 4, 5 } };\r\n    final byte[][] byteArray2 = { { 2, 5 }, { 4, 6 } };\r\n    final byte[] byteArray3 = { 2, 5 };\r\n    assertIsEquals(byteArray1, byteArray2, byteArray3);\r\n    final char[][] charArray1 = { { 2, 5 }, { 4, 5 } };\r\n    final char[][] charArray2 = { { 2, 5 }, { 4, 6 } };\r\n    final char[] charArray3 = { 2, 5 };\r\n    assertIsEquals(charArray1, charArray2, charArray3);\r\n    final boolean[][] barray1 = { { true, false }, { true, true } };\r\n    final boolean[][] barray2 = { { true, false }, { true, false } };\r\n    final boolean[] barray3 = { false, true };\r\n    assertIsEquals(barray1, barray2, barray3);\r\n    final Object[] array3 = { new String(new char[] { 'A', 'B' }) };\r\n    final Object[] array4 = { \"AB\" };\r\n    assertTrue(ArrayUtils.isEquals(array3, array3));\r\n    assertTrue(ArrayUtils.isEquals(array3, array4));\r\n    assertTrue(ArrayUtils.isEquals(null, null));\r\n    assertFalse(ArrayUtils.isEquals(null, array4));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ArrayUtilsTest.java",
  "methodName" : "testIsNotEmptyObject",
  "sourceCode" : "/**\r\n * Test for {@link ArrayUtils#isNotEmpty(java.lang.Object[])}.\r\n */\r\n@Test\r\nvoid testIsNotEmptyObject() {\r\n    final Object[] emptyArray = {};\r\n    final Object[] notEmptyArray = { \"Value\" };\r\n    assertFalse(ArrayUtils.isNotEmpty((Object[]) null));\r\n    assertFalse(ArrayUtils.isNotEmpty(emptyArray));\r\n    assertTrue(ArrayUtils.isNotEmpty(notEmptyArray));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ArrayUtilsTest.java",
  "methodName" : "testIsNotEmptyPrimitives",
  "sourceCode" : "/**\r\n * Tests for {@link ArrayUtils#isNotEmpty(long[])},\r\n * {@link ArrayUtils#isNotEmpty(int[])},\r\n * {@link ArrayUtils#isNotEmpty(short[])},\r\n * {@link ArrayUtils#isNotEmpty(char[])},\r\n * {@link ArrayUtils#isNotEmpty(byte[])},\r\n * {@link ArrayUtils#isNotEmpty(double[])},\r\n * {@link ArrayUtils#isNotEmpty(float[])} and\r\n * {@link ArrayUtils#isNotEmpty(boolean[])}.\r\n */\r\n@Test\r\nvoid testIsNotEmptyPrimitives() {\r\n    final long[] emptyLongArray = {};\r\n    final long[] notEmptyLongArray = { 1L };\r\n    assertFalse(ArrayUtils.isNotEmpty((long[]) null));\r\n    assertFalse(ArrayUtils.isNotEmpty(emptyLongArray));\r\n    assertTrue(ArrayUtils.isNotEmpty(notEmptyLongArray));\r\n    final int[] emptyIntArray = {};\r\n    final int[] notEmptyIntArray = { 1 };\r\n    assertFalse(ArrayUtils.isNotEmpty((int[]) null));\r\n    assertFalse(ArrayUtils.isNotEmpty(emptyIntArray));\r\n    assertTrue(ArrayUtils.isNotEmpty(notEmptyIntArray));\r\n    final short[] emptyShortArray = {};\r\n    final short[] notEmptyShortArray = { 1 };\r\n    assertFalse(ArrayUtils.isNotEmpty((short[]) null));\r\n    assertFalse(ArrayUtils.isNotEmpty(emptyShortArray));\r\n    assertTrue(ArrayUtils.isNotEmpty(notEmptyShortArray));\r\n    final char[] emptyCharArray = {};\r\n    final char[] notEmptyCharArray = { 1 };\r\n    assertFalse(ArrayUtils.isNotEmpty((char[]) null));\r\n    assertFalse(ArrayUtils.isNotEmpty(emptyCharArray));\r\n    assertTrue(ArrayUtils.isNotEmpty(notEmptyCharArray));\r\n    final byte[] emptyByteArray = {};\r\n    final byte[] notEmptyByteArray = { 1 };\r\n    assertFalse(ArrayUtils.isNotEmpty((byte[]) null));\r\n    assertFalse(ArrayUtils.isNotEmpty(emptyByteArray));\r\n    assertTrue(ArrayUtils.isNotEmpty(notEmptyByteArray));\r\n    final double[] emptyDoubleArray = {};\r\n    final double[] notEmptyDoubleArray = { 1.0 };\r\n    assertFalse(ArrayUtils.isNotEmpty((double[]) null));\r\n    assertFalse(ArrayUtils.isNotEmpty(emptyDoubleArray));\r\n    assertTrue(ArrayUtils.isNotEmpty(notEmptyDoubleArray));\r\n    final float[] emptyFloatArray = {};\r\n    final float[] notEmptyFloatArray = { 1.0F };\r\n    assertFalse(ArrayUtils.isNotEmpty((float[]) null));\r\n    assertFalse(ArrayUtils.isNotEmpty(emptyFloatArray));\r\n    assertTrue(ArrayUtils.isNotEmpty(notEmptyFloatArray));\r\n    final boolean[] emptyBooleanArray = {};\r\n    final boolean[] notEmptyBooleanArray = { true };\r\n    assertFalse(ArrayUtils.isNotEmpty((boolean[]) null));\r\n    assertFalse(ArrayUtils.isNotEmpty(emptyBooleanArray));\r\n    assertTrue(ArrayUtils.isNotEmpty(notEmptyBooleanArray));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ArrayUtilsTest.java",
  "methodName" : "testIsSorted",
  "sourceCode" : "@Test\r\nvoid testIsSorted() {\r\n    Integer[] array = null;\r\n    assertTrue(ArrayUtils.isSorted(array));\r\n    array = new Integer[] { 1 };\r\n    assertTrue(ArrayUtils.isSorted(array));\r\n    array = new Integer[] { 1, 2, 3 };\r\n    assertTrue(ArrayUtils.isSorted(array));\r\n    array = new Integer[] { 1, 3, 2 };\r\n    assertFalse(ArrayUtils.isSorted(array));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ArrayUtilsTest.java",
  "methodName" : "testIsSortedBool",
  "sourceCode" : "@Test\r\nvoid testIsSortedBool() {\r\n    boolean[] array = null;\r\n    assertTrue(ArrayUtils.isSorted(array));\r\n    array = new boolean[] { true };\r\n    assertTrue(ArrayUtils.isSorted(array));\r\n    array = new boolean[] { false, true };\r\n    assertTrue(ArrayUtils.isSorted(array));\r\n    array = new boolean[] { true, false };\r\n    assertFalse(ArrayUtils.isSorted(array));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ArrayUtilsTest.java",
  "methodName" : "testIsSortedByte",
  "sourceCode" : "@Test\r\nvoid testIsSortedByte() {\r\n    byte[] array = null;\r\n    assertTrue(ArrayUtils.isSorted(array));\r\n    array = new byte[] { 0x10 };\r\n    assertTrue(ArrayUtils.isSorted(array));\r\n    array = new byte[] { 0x10, 0x20, 0x30 };\r\n    assertTrue(ArrayUtils.isSorted(array));\r\n    array = new byte[] { 0x10, 0x30, 0x20 };\r\n    assertFalse(ArrayUtils.isSorted(array));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ArrayUtilsTest.java",
  "methodName" : "testIsSortedChar",
  "sourceCode" : "@Test\r\nvoid testIsSortedChar() {\r\n    char[] array = null;\r\n    assertTrue(ArrayUtils.isSorted(array));\r\n    array = new char[] { 'a' };\r\n    assertTrue(ArrayUtils.isSorted(array));\r\n    array = new char[] { 'a', 'b', 'c' };\r\n    assertTrue(ArrayUtils.isSorted(array));\r\n    array = new char[] { 'a', 'c', 'b' };\r\n    assertFalse(ArrayUtils.isSorted(array));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ArrayUtilsTest.java",
  "methodName" : "testIsSortedComparator",
  "sourceCode" : "@Test\r\nvoid testIsSortedComparator() {\r\n    final Comparator<Integer> c = Comparator.reverseOrder();\r\n    Integer[] array = null;\r\n    assertTrue(ArrayUtils.isSorted(array, c));\r\n    array = new Integer[] { 1 };\r\n    assertTrue(ArrayUtils.isSorted(array, c));\r\n    array = new Integer[] { 3, 2, 1 };\r\n    assertTrue(ArrayUtils.isSorted(array, c));\r\n    array = new Integer[] { 1, 3, 2 };\r\n    assertFalse(ArrayUtils.isSorted(array, c));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ArrayUtilsTest.java",
  "methodName" : "testIsSortedDouble",
  "sourceCode" : "@Test\r\nvoid testIsSortedDouble() {\r\n    double[] array = null;\r\n    assertTrue(ArrayUtils.isSorted(array));\r\n    array = new double[] { 0.0 };\r\n    assertTrue(ArrayUtils.isSorted(array));\r\n    array = new double[] { -1.0, 0.0, 0.1, 0.2 };\r\n    assertTrue(ArrayUtils.isSorted(array));\r\n    array = new double[] { -1.0, 0.2, 0.1, 0.0 };\r\n    assertFalse(ArrayUtils.isSorted(array));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ArrayUtilsTest.java",
  "methodName" : "testIsSortedFloat",
  "sourceCode" : "@Test\r\nvoid testIsSortedFloat() {\r\n    float[] array = null;\r\n    assertTrue(ArrayUtils.isSorted(array));\r\n    array = new float[] { 0f };\r\n    assertTrue(ArrayUtils.isSorted(array));\r\n    array = new float[] { -1f, 0f, 0.1f, 0.2f };\r\n    assertTrue(ArrayUtils.isSorted(array));\r\n    array = new float[] { -1f, 0.2f, 0.1f, 0f };\r\n    assertFalse(ArrayUtils.isSorted(array));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ArrayUtilsTest.java",
  "methodName" : "testIsSortedInt",
  "sourceCode" : "@Test\r\nvoid testIsSortedInt() {\r\n    int[] array = null;\r\n    assertTrue(ArrayUtils.isSorted(array));\r\n    array = new int[] { 1 };\r\n    assertTrue(ArrayUtils.isSorted(array));\r\n    array = new int[] { 1, 2, 3 };\r\n    assertTrue(ArrayUtils.isSorted(array));\r\n    array = new int[] { 1, 3, 2 };\r\n    assertFalse(ArrayUtils.isSorted(array));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ArrayUtilsTest.java",
  "methodName" : "testIsSortedLong",
  "sourceCode" : "@Test\r\nvoid testIsSortedLong() {\r\n    long[] array = null;\r\n    assertTrue(ArrayUtils.isSorted(array));\r\n    array = new long[] { 0L };\r\n    assertTrue(ArrayUtils.isSorted(array));\r\n    array = new long[] { -1L, 0L, 1L };\r\n    assertTrue(ArrayUtils.isSorted(array));\r\n    array = new long[] { -1L, 1L, 0L };\r\n    assertFalse(ArrayUtils.isSorted(array));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ArrayUtilsTest.java",
  "methodName" : "testIsSortedNullComparator",
  "sourceCode" : "@Test\r\nvoid testIsSortedNullComparator() {\r\n    assertNullPointerException(() -> ArrayUtils.isSorted(null, null));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ArrayUtilsTest.java",
  "methodName" : "testIsSortedShort",
  "sourceCode" : "@Test\r\nvoid testIsSortedShort() {\r\n    short[] array = null;\r\n    assertTrue(ArrayUtils.isSorted(array));\r\n    array = new short[] { 0 };\r\n    assertTrue(ArrayUtils.isSorted(array));\r\n    array = new short[] { -1, 0, 1 };\r\n    assertTrue(ArrayUtils.isSorted(array));\r\n    array = new short[] { -1, 1, 0 };\r\n    assertFalse(ArrayUtils.isSorted(array));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ArrayUtilsTest.java",
  "methodName" : "testLastIndexOf",
  "sourceCode" : "@Test\r\nvoid testLastIndexOf() {\r\n    final Object[] array = { \"0\", \"1\", \"2\", \"3\", null, \"0\" };\r\n    assertEquals(-1, ArrayUtils.lastIndexOf(null, null));\r\n    assertEquals(-1, ArrayUtils.lastIndexOf(null, \"0\"));\r\n    assertEquals(5, ArrayUtils.lastIndexOf(array, \"0\"));\r\n    assertEquals(1, ArrayUtils.lastIndexOf(array, \"1\"));\r\n    assertEquals(2, ArrayUtils.lastIndexOf(array, \"2\"));\r\n    assertEquals(3, ArrayUtils.lastIndexOf(array, \"3\"));\r\n    assertEquals(4, ArrayUtils.lastIndexOf(array, null));\r\n    assertEquals(-1, ArrayUtils.lastIndexOf(array, \"notInArray\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ArrayUtilsTest.java",
  "methodName" : "testLastIndexOfBoolean",
  "sourceCode" : "@Test\r\nvoid testLastIndexOfBoolean() {\r\n    boolean[] array = null;\r\n    assertEquals(-1, ArrayUtils.lastIndexOf(array, true));\r\n    array = new boolean[0];\r\n    assertEquals(-1, ArrayUtils.lastIndexOf(array, true));\r\n    array = new boolean[] { true, false, true };\r\n    assertEquals(2, ArrayUtils.lastIndexOf(array, true));\r\n    assertEquals(1, ArrayUtils.lastIndexOf(array, false));\r\n    array = new boolean[] { true, true };\r\n    assertEquals(-1, ArrayUtils.lastIndexOf(array, false));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ArrayUtilsTest.java",
  "methodName" : "testLastIndexOfBooleanWithStartIndex",
  "sourceCode" : "@Test\r\nvoid testLastIndexOfBooleanWithStartIndex() {\r\n    boolean[] array = null;\r\n    assertEquals(-1, ArrayUtils.lastIndexOf(array, true, 2));\r\n    array = new boolean[0];\r\n    assertEquals(-1, ArrayUtils.lastIndexOf(array, true, 2));\r\n    array = new boolean[] { true, false, true };\r\n    assertEquals(2, ArrayUtils.lastIndexOf(array, true, 2));\r\n    assertEquals(0, ArrayUtils.lastIndexOf(array, true, 1));\r\n    assertEquals(1, ArrayUtils.lastIndexOf(array, false, 2));\r\n    assertEquals(-1, ArrayUtils.lastIndexOf(array, true, -1));\r\n    array = new boolean[] { true, true };\r\n    assertEquals(-1, ArrayUtils.lastIndexOf(array, false, 2));\r\n    assertEquals(-1, ArrayUtils.lastIndexOf(array, true, -1));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ArrayUtilsTest.java",
  "methodName" : "testLastIndexOfByte",
  "sourceCode" : "@Test\r\nvoid testLastIndexOfByte() {\r\n    byte[] array = null;\r\n    assertEquals(-1, ArrayUtils.lastIndexOf(array, (byte) 0));\r\n    array = new byte[] { 0, 1, 2, 3, 0 };\r\n    assertEquals(4, ArrayUtils.lastIndexOf(array, (byte) 0));\r\n    assertEquals(1, ArrayUtils.lastIndexOf(array, (byte) 1));\r\n    assertEquals(2, ArrayUtils.lastIndexOf(array, (byte) 2));\r\n    assertEquals(3, ArrayUtils.lastIndexOf(array, (byte) 3));\r\n    assertEquals(-1, ArrayUtils.lastIndexOf(array, (byte) 99));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ArrayUtilsTest.java",
  "methodName" : "testLastIndexOfByteWithStartIndex",
  "sourceCode" : "@Test\r\nvoid testLastIndexOfByteWithStartIndex() {\r\n    byte[] array = null;\r\n    assertEquals(-1, ArrayUtils.lastIndexOf(array, (byte) 0, 2));\r\n    array = new byte[] { 0, 1, 2, 3, 0 };\r\n    assertEquals(0, ArrayUtils.lastIndexOf(array, (byte) 0, 2));\r\n    assertEquals(1, ArrayUtils.lastIndexOf(array, (byte) 1, 2));\r\n    assertEquals(2, ArrayUtils.lastIndexOf(array, (byte) 2, 2));\r\n    assertEquals(-1, ArrayUtils.lastIndexOf(array, (byte) 3, 2));\r\n    assertEquals(-1, ArrayUtils.lastIndexOf(array, (byte) 3, -1));\r\n    assertEquals(-1, ArrayUtils.lastIndexOf(array, (byte) 99));\r\n    assertEquals(4, ArrayUtils.lastIndexOf(array, (byte) 0, 88));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ArrayUtilsTest.java",
  "methodName" : "testLastIndexOfChar",
  "sourceCode" : "@Test\r\nvoid testLastIndexOfChar() {\r\n    char[] array = null;\r\n    assertEquals(-1, ArrayUtils.lastIndexOf(array, 'a'));\r\n    array = new char[] { 'a', 'b', 'c', 'd', 'a' };\r\n    assertEquals(4, ArrayUtils.lastIndexOf(array, 'a'));\r\n    assertEquals(1, ArrayUtils.lastIndexOf(array, 'b'));\r\n    assertEquals(2, ArrayUtils.lastIndexOf(array, 'c'));\r\n    assertEquals(3, ArrayUtils.lastIndexOf(array, 'd'));\r\n    assertEquals(-1, ArrayUtils.lastIndexOf(array, 'e'));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ArrayUtilsTest.java",
  "methodName" : "testLastIndexOfCharWithStartIndex",
  "sourceCode" : "@Test\r\nvoid testLastIndexOfCharWithStartIndex() {\r\n    char[] array = null;\r\n    assertEquals(-1, ArrayUtils.lastIndexOf(array, 'a', 2));\r\n    array = new char[] { 'a', 'b', 'c', 'd', 'a' };\r\n    assertEquals(0, ArrayUtils.lastIndexOf(array, 'a', 2));\r\n    assertEquals(1, ArrayUtils.lastIndexOf(array, 'b', 2));\r\n    assertEquals(2, ArrayUtils.lastIndexOf(array, 'c', 2));\r\n    assertEquals(-1, ArrayUtils.lastIndexOf(array, 'd', 2));\r\n    assertEquals(-1, ArrayUtils.lastIndexOf(array, 'd', -1));\r\n    assertEquals(-1, ArrayUtils.lastIndexOf(array, 'e'));\r\n    assertEquals(4, ArrayUtils.lastIndexOf(array, 'a', 88));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ArrayUtilsTest.java",
  "methodName" : "testLastIndexOfDouble",
  "sourceCode" : "@Test\r\nvoid testLastIndexOfDouble() {\r\n    double[] array = null;\r\n    assertEquals(-1, ArrayUtils.lastIndexOf(array, 0));\r\n    array = new double[0];\r\n    assertEquals(-1, ArrayUtils.lastIndexOf(array, 0));\r\n    array = new double[] { 0, 1, 2, 3, 0 };\r\n    assertEquals(4, ArrayUtils.lastIndexOf(array, 0));\r\n    assertEquals(1, ArrayUtils.lastIndexOf(array, 1));\r\n    assertEquals(2, ArrayUtils.lastIndexOf(array, 2));\r\n    assertEquals(3, ArrayUtils.lastIndexOf(array, 3));\r\n    assertEquals(-1, ArrayUtils.lastIndexOf(array, 99));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ArrayUtilsTest.java",
  "methodName" : "testLastIndexOfDoubleTolerance",
  "sourceCode" : "@Test\r\nvoid testLastIndexOfDoubleTolerance() {\r\n    double[] array = null;\r\n    assertEquals(-1, ArrayUtils.lastIndexOf(array, (double) 0, (double) 0));\r\n    array = new double[0];\r\n    assertEquals(-1, ArrayUtils.lastIndexOf(array, (double) 0, (double) 0));\r\n    array = new double[] { 0, 1, 2, 3, 0 };\r\n    assertEquals(4, ArrayUtils.lastIndexOf(array, 0, 0.3));\r\n    assertEquals(2, ArrayUtils.lastIndexOf(array, 2.2, 0.35));\r\n    assertEquals(3, ArrayUtils.lastIndexOf(array, 4.15, 2.0));\r\n    assertEquals(1, ArrayUtils.lastIndexOf(array, 1.00001324, 0.0001));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ArrayUtilsTest.java",
  "methodName" : "testLastIndexOfDoubleWithStartIndex",
  "sourceCode" : "@Test\r\nvoid testLastIndexOfDoubleWithStartIndex() {\r\n    double[] array = null;\r\n    assertEquals(-1, ArrayUtils.lastIndexOf(array, 0, 2));\r\n    array = new double[0];\r\n    assertEquals(-1, ArrayUtils.lastIndexOf(array, 0, 2));\r\n    array = new double[] { 0, 1, 2, 3, 0 };\r\n    assertEquals(0, ArrayUtils.lastIndexOf(array, 0, 2));\r\n    assertEquals(1, ArrayUtils.lastIndexOf(array, 1, 2));\r\n    assertEquals(2, ArrayUtils.lastIndexOf(array, 2, 2));\r\n    assertEquals(-1, ArrayUtils.lastIndexOf(array, 3, 2));\r\n    assertEquals(-1, ArrayUtils.lastIndexOf(array, 3, -1));\r\n    assertEquals(-1, ArrayUtils.lastIndexOf(array, 99));\r\n    assertEquals(4, ArrayUtils.lastIndexOf(array, 0, 88));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ArrayUtilsTest.java",
  "methodName" : "testLastIndexOfDoubleWithStartIndexTolerance",
  "sourceCode" : "@Test\r\nvoid testLastIndexOfDoubleWithStartIndexTolerance() {\r\n    double[] array = null;\r\n    assertEquals(-1, ArrayUtils.lastIndexOf(array, 0, 2, 0));\r\n    array = new double[0];\r\n    assertEquals(-1, ArrayUtils.lastIndexOf(array, 0, 2, 0));\r\n    array = new double[] { 3 };\r\n    assertEquals(-1, ArrayUtils.lastIndexOf(array, 1, 0, 0));\r\n    array = new double[] { 0, 1, 2, 3, 0 };\r\n    assertEquals(4, ArrayUtils.lastIndexOf(array, 0, 99, 0.3));\r\n    assertEquals(0, ArrayUtils.lastIndexOf(array, 0, 3, 0.3));\r\n    assertEquals(2, ArrayUtils.lastIndexOf(array, 2.2, 3, 0.35));\r\n    assertEquals(3, ArrayUtils.lastIndexOf(array, 4.15, array.length, 2.0));\r\n    assertEquals(1, ArrayUtils.lastIndexOf(array, 1.00001324, array.length, 0.0001));\r\n    assertEquals(-1, ArrayUtils.lastIndexOf(array, 4.15, -200, 2.0));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ArrayUtilsTest.java",
  "methodName" : "testLastIndexOfFloat",
  "sourceCode" : "@Test\r\nvoid testLastIndexOfFloat() {\r\n    float[] array = null;\r\n    assertEquals(-1, ArrayUtils.lastIndexOf(array, 0));\r\n    array = new float[0];\r\n    assertEquals(-1, ArrayUtils.lastIndexOf(array, 0));\r\n    array = new float[] { 0, 1, 2, 3, 0 };\r\n    assertEquals(4, ArrayUtils.lastIndexOf(array, 0));\r\n    assertEquals(1, ArrayUtils.lastIndexOf(array, 1));\r\n    assertEquals(2, ArrayUtils.lastIndexOf(array, 2));\r\n    assertEquals(3, ArrayUtils.lastIndexOf(array, 3));\r\n    assertEquals(-1, ArrayUtils.lastIndexOf(array, 99));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ArrayUtilsTest.java",
  "methodName" : "testLastIndexOfFloatWithStartIndex",
  "sourceCode" : "@Test\r\nvoid testLastIndexOfFloatWithStartIndex() {\r\n    float[] array = null;\r\n    assertEquals(-1, ArrayUtils.lastIndexOf(array, 0, 2));\r\n    array = new float[0];\r\n    assertEquals(-1, ArrayUtils.lastIndexOf(array, 0, 2));\r\n    array = new float[] { 0, 1, 2, 3, 0 };\r\n    assertEquals(0, ArrayUtils.lastIndexOf(array, 0, 2));\r\n    assertEquals(1, ArrayUtils.lastIndexOf(array, 1, 2));\r\n    assertEquals(2, ArrayUtils.lastIndexOf(array, 2, 2));\r\n    assertEquals(-1, ArrayUtils.lastIndexOf(array, 3, 2));\r\n    assertEquals(-1, ArrayUtils.lastIndexOf(array, 3, -1));\r\n    assertEquals(-1, ArrayUtils.lastIndexOf(array, 99));\r\n    assertEquals(4, ArrayUtils.lastIndexOf(array, 0, 88));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ArrayUtilsTest.java",
  "methodName" : "testLastIndexOfInt",
  "sourceCode" : "@Test\r\nvoid testLastIndexOfInt() {\r\n    int[] array = null;\r\n    assertEquals(-1, ArrayUtils.lastIndexOf(array, 0));\r\n    array = new int[] { 0, 1, 2, 3, 0 };\r\n    assertEquals(4, ArrayUtils.lastIndexOf(array, 0));\r\n    assertEquals(1, ArrayUtils.lastIndexOf(array, 1));\r\n    assertEquals(2, ArrayUtils.lastIndexOf(array, 2));\r\n    assertEquals(3, ArrayUtils.lastIndexOf(array, 3));\r\n    assertEquals(-1, ArrayUtils.lastIndexOf(array, 99));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ArrayUtilsTest.java",
  "methodName" : "testLastIndexOfIntWithStartIndex",
  "sourceCode" : "@Test\r\nvoid testLastIndexOfIntWithStartIndex() {\r\n    int[] array = null;\r\n    assertEquals(-1, ArrayUtils.lastIndexOf(array, 0, 2));\r\n    array = new int[] { 0, 1, 2, 3, 0 };\r\n    assertEquals(0, ArrayUtils.lastIndexOf(array, 0, 2));\r\n    assertEquals(1, ArrayUtils.lastIndexOf(array, 1, 2));\r\n    assertEquals(2, ArrayUtils.lastIndexOf(array, 2, 2));\r\n    assertEquals(-1, ArrayUtils.lastIndexOf(array, 3, 2));\r\n    assertEquals(-1, ArrayUtils.lastIndexOf(array, 3, -1));\r\n    assertEquals(-1, ArrayUtils.lastIndexOf(array, 99));\r\n    assertEquals(4, ArrayUtils.lastIndexOf(array, 0, 88));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ArrayUtilsTest.java",
  "methodName" : "testLastIndexOfLong",
  "sourceCode" : "@Test\r\nvoid testLastIndexOfLong() {\r\n    long[] array = null;\r\n    assertEquals(-1, ArrayUtils.lastIndexOf(array, 0));\r\n    array = new long[] { 0, 1, 2, 3, 0 };\r\n    assertEquals(4, ArrayUtils.lastIndexOf(array, 0));\r\n    assertEquals(1, ArrayUtils.lastIndexOf(array, 1));\r\n    assertEquals(2, ArrayUtils.lastIndexOf(array, 2));\r\n    assertEquals(3, ArrayUtils.lastIndexOf(array, 3));\r\n    assertEquals(-1, ArrayUtils.lastIndexOf(array, 99));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ArrayUtilsTest.java",
  "methodName" : "testLastIndexOfLongWithStartIndex",
  "sourceCode" : "@Test\r\nvoid testLastIndexOfLongWithStartIndex() {\r\n    long[] array = null;\r\n    assertEquals(-1, ArrayUtils.lastIndexOf(array, 0, 2));\r\n    array = new long[] { 0, 1, 2, 3, 0 };\r\n    assertEquals(0, ArrayUtils.lastIndexOf(array, 0, 2));\r\n    assertEquals(1, ArrayUtils.lastIndexOf(array, 1, 2));\r\n    assertEquals(2, ArrayUtils.lastIndexOf(array, 2, 2));\r\n    assertEquals(-1, ArrayUtils.lastIndexOf(array, 3, 2));\r\n    assertEquals(-1, ArrayUtils.lastIndexOf(array, 3, -1));\r\n    assertEquals(-1, ArrayUtils.lastIndexOf(array, 99, 4));\r\n    assertEquals(4, ArrayUtils.lastIndexOf(array, 0, 88));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ArrayUtilsTest.java",
  "methodName" : "testLastIndexOfShort",
  "sourceCode" : "@Test\r\nvoid testLastIndexOfShort() {\r\n    short[] array = null;\r\n    assertEquals(-1, ArrayUtils.lastIndexOf(array, (short) 0));\r\n    array = new short[] { 0, 1, 2, 3, 0 };\r\n    assertEquals(4, ArrayUtils.lastIndexOf(array, (short) 0));\r\n    assertEquals(1, ArrayUtils.lastIndexOf(array, (short) 1));\r\n    assertEquals(2, ArrayUtils.lastIndexOf(array, (short) 2));\r\n    assertEquals(3, ArrayUtils.lastIndexOf(array, (short) 3));\r\n    assertEquals(-1, ArrayUtils.lastIndexOf(array, (short) 99));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ArrayUtilsTest.java",
  "methodName" : "testLastIndexOfShortWithStartIndex",
  "sourceCode" : "@Test\r\nvoid testLastIndexOfShortWithStartIndex() {\r\n    short[] array = null;\r\n    assertEquals(-1, ArrayUtils.lastIndexOf(array, (short) 0, 2));\r\n    array = new short[] { 0, 1, 2, 3, 0 };\r\n    assertEquals(0, ArrayUtils.lastIndexOf(array, (short) 0, 2));\r\n    assertEquals(1, ArrayUtils.lastIndexOf(array, (short) 1, 2));\r\n    assertEquals(2, ArrayUtils.lastIndexOf(array, (short) 2, 2));\r\n    assertEquals(-1, ArrayUtils.lastIndexOf(array, (short) 3, 2));\r\n    assertEquals(-1, ArrayUtils.lastIndexOf(array, (short) 3, -1));\r\n    assertEquals(-1, ArrayUtils.lastIndexOf(array, (short) 99));\r\n    assertEquals(4, ArrayUtils.lastIndexOf(array, (short) 0, 88));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ArrayUtilsTest.java",
  "methodName" : "testLastIndexOfWithStartIndex",
  "sourceCode" : "@Test\r\nvoid testLastIndexOfWithStartIndex() {\r\n    final Object[] array = { \"0\", \"1\", \"2\", \"3\", null, \"0\" };\r\n    assertEquals(-1, ArrayUtils.lastIndexOf(null, null, 2));\r\n    assertEquals(-1, ArrayUtils.lastIndexOf(null, \"0\", 2));\r\n    assertEquals(0, ArrayUtils.lastIndexOf(array, \"0\", 2));\r\n    assertEquals(1, ArrayUtils.lastIndexOf(array, \"1\", 2));\r\n    assertEquals(2, ArrayUtils.lastIndexOf(array, \"2\", 2));\r\n    assertEquals(-1, ArrayUtils.lastIndexOf(array, \"3\", 2));\r\n    assertEquals(-1, ArrayUtils.lastIndexOf(array, \"3\", -1));\r\n    assertEquals(4, ArrayUtils.lastIndexOf(array, null, 5));\r\n    assertEquals(-1, ArrayUtils.lastIndexOf(array, null, 2));\r\n    assertEquals(-1, ArrayUtils.lastIndexOf(array, \"notInArray\", 5));\r\n    assertEquals(-1, ArrayUtils.lastIndexOf(array, null, -1));\r\n    assertEquals(5, ArrayUtils.lastIndexOf(array, \"0\", 88));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ArrayUtilsTest.java",
  "methodName" : "testNullToEmptyBoolean",
  "sourceCode" : "@Test\r\nvoid testNullToEmptyBoolean() {\r\n    final boolean[] original = { true, false };\r\n    assertEquals(original, ArrayUtils.nullToEmpty(original));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ArrayUtilsTest.java",
  "methodName" : "testNullToEmptyBooleanEmptyArray",
  "sourceCode" : "@Test\r\nvoid testNullToEmptyBooleanEmptyArray() {\r\n    final boolean[] empty = {};\r\n    final boolean[] result = ArrayUtils.nullToEmpty(empty);\r\n    assertEquals(ArrayUtils.EMPTY_BOOLEAN_ARRAY, result);\r\n    assertNotSame(empty, result);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ArrayUtilsTest.java",
  "methodName" : "testNullToEmptyBooleanNull",
  "sourceCode" : "@Test\r\nvoid testNullToEmptyBooleanNull() {\r\n    assertEquals(ArrayUtils.EMPTY_BOOLEAN_ARRAY, ArrayUtils.nullToEmpty((boolean[]) null));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ArrayUtilsTest.java",
  "methodName" : "testNullToEmptyBooleanObject",
  "sourceCode" : "@Test\r\nvoid testNullToEmptyBooleanObject() {\r\n    final Boolean[] original = { Boolean.TRUE, Boolean.FALSE };\r\n    assertArrayEquals(original, ArrayUtils.nullToEmpty(original));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ArrayUtilsTest.java",
  "methodName" : "testNullToEmptyBooleanObjectEmptyArray",
  "sourceCode" : "@Test\r\nvoid testNullToEmptyBooleanObjectEmptyArray() {\r\n    final Boolean[] empty = {};\r\n    final Boolean[] result = ArrayUtils.nullToEmpty(empty);\r\n    assertArrayEquals(ArrayUtils.EMPTY_BOOLEAN_OBJECT_ARRAY, result);\r\n    assertNotSame(empty, result);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ArrayUtilsTest.java",
  "methodName" : "testNullToEmptyBooleanObjectNull",
  "sourceCode" : "@Test\r\nvoid testNullToEmptyBooleanObjectNull() {\r\n    assertArrayEquals(ArrayUtils.EMPTY_BOOLEAN_OBJECT_ARRAY, ArrayUtils.nullToEmpty((Boolean[]) null));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ArrayUtilsTest.java",
  "methodName" : "testNullToEmptyByte",
  "sourceCode" : "@Test\r\nvoid testNullToEmptyByte() {\r\n    final byte[] original = { 0x0F, 0x0E };\r\n    assertEquals(original, ArrayUtils.nullToEmpty(original));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ArrayUtilsTest.java",
  "methodName" : "testNullToEmptyByteEmptyArray",
  "sourceCode" : "@Test\r\nvoid testNullToEmptyByteEmptyArray() {\r\n    final byte[] empty = {};\r\n    final byte[] result = ArrayUtils.nullToEmpty(empty);\r\n    assertEquals(ArrayUtils.EMPTY_BYTE_ARRAY, result);\r\n    assertNotSame(empty, result);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ArrayUtilsTest.java",
  "methodName" : "testNullToEmptyByteNull",
  "sourceCode" : "@Test\r\nvoid testNullToEmptyByteNull() {\r\n    assertEquals(ArrayUtils.EMPTY_BYTE_ARRAY, ArrayUtils.nullToEmpty((byte[]) null));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ArrayUtilsTest.java",
  "methodName" : "testNullToEmptyByteObject",
  "sourceCode" : "@Test\r\nvoid testNullToEmptyByteObject() {\r\n    final Byte[] original = { 0x0F, 0x0E };\r\n    assertArrayEquals(original, ArrayUtils.nullToEmpty(original));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ArrayUtilsTest.java",
  "methodName" : "testNullToEmptyByteObjectEmptyArray",
  "sourceCode" : "@Test\r\nvoid testNullToEmptyByteObjectEmptyArray() {\r\n    final Byte[] empty = {};\r\n    final Byte[] result = ArrayUtils.nullToEmpty(empty);\r\n    assertArrayEquals(ArrayUtils.EMPTY_BYTE_OBJECT_ARRAY, result);\r\n    assertNotSame(empty, result);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ArrayUtilsTest.java",
  "methodName" : "testNullToEmptyByteObjectNull",
  "sourceCode" : "@Test\r\nvoid testNullToEmptyByteObjectNull() {\r\n    assertArrayEquals(ArrayUtils.EMPTY_BYTE_OBJECT_ARRAY, ArrayUtils.nullToEmpty((Byte[]) null));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ArrayUtilsTest.java",
  "methodName" : "testNullToEmptyChar",
  "sourceCode" : "@Test\r\nvoid testNullToEmptyChar() {\r\n    final char[] original = { 'a', 'b' };\r\n    assertEquals(original, ArrayUtils.nullToEmpty(original));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ArrayUtilsTest.java",
  "methodName" : "testNullToEmptyCharEmptyArray",
  "sourceCode" : "@Test\r\nvoid testNullToEmptyCharEmptyArray() {\r\n    final char[] empty = {};\r\n    final char[] result = ArrayUtils.nullToEmpty(empty);\r\n    assertEquals(ArrayUtils.EMPTY_CHAR_ARRAY, result);\r\n    assertNotSame(empty, result);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ArrayUtilsTest.java",
  "methodName" : "testNullToEmptyCharNull",
  "sourceCode" : "@Test\r\nvoid testNullToEmptyCharNull() {\r\n    assertEquals(ArrayUtils.EMPTY_CHAR_ARRAY, ArrayUtils.nullToEmpty((char[]) null));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ArrayUtilsTest.java",
  "methodName" : "testNullToEmptyCharObject",
  "sourceCode" : "@Test\r\nvoid testNullToEmptyCharObject() {\r\n    final Character[] original = { 'a', 'b' };\r\n    assertArrayEquals(original, ArrayUtils.nullToEmpty(original));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ArrayUtilsTest.java",
  "methodName" : "testNullToEmptyCharObjectEmptyArray",
  "sourceCode" : "@Test\r\nvoid testNullToEmptyCharObjectEmptyArray() {\r\n    final Character[] empty = {};\r\n    final Character[] result = ArrayUtils.nullToEmpty(empty);\r\n    assertArrayEquals(ArrayUtils.EMPTY_CHARACTER_OBJECT_ARRAY, result);\r\n    assertNotSame(empty, result);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ArrayUtilsTest.java",
  "methodName" : "testNUllToEmptyCharObjectNull",
  "sourceCode" : "@Test\r\nvoid testNUllToEmptyCharObjectNull() {\r\n    assertArrayEquals(ArrayUtils.EMPTY_CHARACTER_OBJECT_ARRAY, ArrayUtils.nullToEmpty((Character[]) null));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ArrayUtilsTest.java",
  "methodName" : "testNullToEmptyClass",
  "sourceCode" : "@Test\r\nvoid testNullToEmptyClass() {\r\n    final Class<?>[] original = { Object.class, String.class };\r\n    assertArrayEquals(original, ArrayUtils.nullToEmpty(original));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ArrayUtilsTest.java",
  "methodName" : "testNullToEmptyClassEmptyArray",
  "sourceCode" : "@Test\r\nvoid testNullToEmptyClassEmptyArray() {\r\n    final Class<?>[] empty = {};\r\n    final Class<?>[] result = ArrayUtils.nullToEmpty(empty);\r\n    assertArrayEquals(ArrayUtils.EMPTY_CLASS_ARRAY, result);\r\n    assertNotSame(empty, result);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ArrayUtilsTest.java",
  "methodName" : "testNullToEmptyClassNull",
  "sourceCode" : "@Test\r\nvoid testNullToEmptyClassNull() {\r\n    assertArrayEquals(ArrayUtils.EMPTY_CLASS_ARRAY, ArrayUtils.nullToEmpty((Class<?>[]) null));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ArrayUtilsTest.java",
  "methodName" : "testNullToEmptyDouble",
  "sourceCode" : "@Test\r\nvoid testNullToEmptyDouble() {\r\n    final double[] original = { 1L, 2L };\r\n    assertEquals(original, ArrayUtils.nullToEmpty(original));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ArrayUtilsTest.java",
  "methodName" : "testNullToEmptyDoubleEmptyArray",
  "sourceCode" : "@Test\r\nvoid testNullToEmptyDoubleEmptyArray() {\r\n    final double[] empty = {};\r\n    final double[] result = ArrayUtils.nullToEmpty(empty);\r\n    assertEquals(ArrayUtils.EMPTY_DOUBLE_ARRAY, result);\r\n    assertNotSame(empty, result);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ArrayUtilsTest.java",
  "methodName" : "testNullToEmptyDoubleNull",
  "sourceCode" : "@Test\r\nvoid testNullToEmptyDoubleNull() {\r\n    assertEquals(ArrayUtils.EMPTY_DOUBLE_ARRAY, ArrayUtils.nullToEmpty((double[]) null));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ArrayUtilsTest.java",
  "methodName" : "testNullToEmptyDoubleObject",
  "sourceCode" : "@Test\r\nvoid testNullToEmptyDoubleObject() {\r\n    final Double[] original = { 1D, 2D };\r\n    assertArrayEquals(original, ArrayUtils.nullToEmpty(original));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ArrayUtilsTest.java",
  "methodName" : "testNullToEmptyDoubleObjectEmptyArray",
  "sourceCode" : "@Test\r\nvoid testNullToEmptyDoubleObjectEmptyArray() {\r\n    final Double[] empty = {};\r\n    final Double[] result = ArrayUtils.nullToEmpty(empty);\r\n    assertArrayEquals(ArrayUtils.EMPTY_DOUBLE_OBJECT_ARRAY, result);\r\n    assertNotSame(empty, result);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ArrayUtilsTest.java",
  "methodName" : "testNullToEmptyDoubleObjectNull",
  "sourceCode" : "@Test\r\nvoid testNullToEmptyDoubleObjectNull() {\r\n    assertArrayEquals(ArrayUtils.EMPTY_DOUBLE_OBJECT_ARRAY, ArrayUtils.nullToEmpty((Double[]) null));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ArrayUtilsTest.java",
  "methodName" : "testNullToEmptyFloat",
  "sourceCode" : "@Test\r\nvoid testNullToEmptyFloat() {\r\n    final float[] original = { 2.6f, 3.8f };\r\n    assertEquals(original, ArrayUtils.nullToEmpty(original));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ArrayUtilsTest.java",
  "methodName" : "testNullToEmptyFloatEmptyArray",
  "sourceCode" : "@Test\r\nvoid testNullToEmptyFloatEmptyArray() {\r\n    final float[] empty = {};\r\n    final float[] result = ArrayUtils.nullToEmpty(empty);\r\n    assertEquals(ArrayUtils.EMPTY_FLOAT_ARRAY, result);\r\n    assertNotSame(empty, result);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ArrayUtilsTest.java",
  "methodName" : "testNullToEmptyFloatNull",
  "sourceCode" : "@Test\r\nvoid testNullToEmptyFloatNull() {\r\n    assertEquals(ArrayUtils.EMPTY_FLOAT_ARRAY, ArrayUtils.nullToEmpty((float[]) null));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ArrayUtilsTest.java",
  "methodName" : "testNullToEmptyFloatObject",
  "sourceCode" : "@Test\r\nvoid testNullToEmptyFloatObject() {\r\n    final Float[] original = { 2.6f, 3.8f };\r\n    assertArrayEquals(original, ArrayUtils.nullToEmpty(original));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ArrayUtilsTest.java",
  "methodName" : "testNullToEmptyFloatObjectEmptyArray",
  "sourceCode" : "@Test\r\nvoid testNullToEmptyFloatObjectEmptyArray() {\r\n    final Float[] empty = {};\r\n    final Float[] result = ArrayUtils.nullToEmpty(empty);\r\n    assertArrayEquals(ArrayUtils.EMPTY_FLOAT_OBJECT_ARRAY, result);\r\n    assertNotSame(empty, result);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ArrayUtilsTest.java",
  "methodName" : "testNullToEmptyFloatObjectNull",
  "sourceCode" : "@Test\r\nvoid testNullToEmptyFloatObjectNull() {\r\n    assertArrayEquals(ArrayUtils.EMPTY_FLOAT_OBJECT_ARRAY, ArrayUtils.nullToEmpty((Float[]) null));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ArrayUtilsTest.java",
  "methodName" : "testNullToEmptyGeneric",
  "sourceCode" : "@Test\r\nvoid testNullToEmptyGeneric() {\r\n    final TestClass[] input = { new TestClass(), new TestClass() };\r\n    final TestClass[] output = ArrayUtils.nullToEmpty(input, TestClass[].class);\r\n    assertSame(input, output);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ArrayUtilsTest.java",
  "methodName" : "testNullToEmptyGenericEmpty",
  "sourceCode" : "@Test\r\nvoid testNullToEmptyGenericEmpty() {\r\n    final TestClass[] input = {};\r\n    final TestClass[] output = ArrayUtils.nullToEmpty(input, TestClass[].class);\r\n    assertSame(input, output);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ArrayUtilsTest.java",
  "methodName" : "testNullToEmptyGenericNull",
  "sourceCode" : "@Test\r\nvoid testNullToEmptyGenericNull() {\r\n    final TestClass[] output = ArrayUtils.nullToEmpty(null, TestClass[].class);\r\n    assertNotNull(output);\r\n    assertEquals(0, output.length);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ArrayUtilsTest.java",
  "methodName" : "testNullToEmptyGenericNullType",
  "sourceCode" : "@Test\r\nvoid testNullToEmptyGenericNullType() {\r\n    final TestClass[] input = {};\r\n    assertIllegalArgumentException(() -> ArrayUtils.nullToEmpty(input, null));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ArrayUtilsTest.java",
  "methodName" : "testNullToEmptyInt",
  "sourceCode" : "@Test\r\nvoid testNullToEmptyInt() {\r\n    final int[] original = { 1, 2 };\r\n    assertEquals(original, ArrayUtils.nullToEmpty(original));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ArrayUtilsTest.java",
  "methodName" : "testNullToEmptyIntEmptyArray",
  "sourceCode" : "@Test\r\nvoid testNullToEmptyIntEmptyArray() {\r\n    final int[] empty = {};\r\n    final int[] result = ArrayUtils.nullToEmpty(empty);\r\n    assertEquals(ArrayUtils.EMPTY_INT_ARRAY, result);\r\n    assertNotSame(empty, result);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ArrayUtilsTest.java",
  "methodName" : "testNullToEmptyIntNull",
  "sourceCode" : "@Test\r\nvoid testNullToEmptyIntNull() {\r\n    assertEquals(ArrayUtils.EMPTY_INT_ARRAY, ArrayUtils.nullToEmpty((int[]) null));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ArrayUtilsTest.java",
  "methodName" : "testNullToEmptyIntObject",
  "sourceCode" : "@Test\r\nvoid testNullToEmptyIntObject() {\r\n    final Integer[] original = { 1, 2 };\r\n    assertArrayEquals(original, ArrayUtils.nullToEmpty(original));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ArrayUtilsTest.java",
  "methodName" : "testNullToEmptyIntObjectEmptyArray",
  "sourceCode" : "@Test\r\nvoid testNullToEmptyIntObjectEmptyArray() {\r\n    final Integer[] empty = {};\r\n    final Integer[] result = ArrayUtils.nullToEmpty(empty);\r\n    assertArrayEquals(ArrayUtils.EMPTY_INTEGER_OBJECT_ARRAY, result);\r\n    assertNotSame(empty, result);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ArrayUtilsTest.java",
  "methodName" : "testNullToEmptyIntObjectNull",
  "sourceCode" : "@Test\r\nvoid testNullToEmptyIntObjectNull() {\r\n    assertArrayEquals(ArrayUtils.EMPTY_INTEGER_OBJECT_ARRAY, ArrayUtils.nullToEmpty((Integer[]) null));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ArrayUtilsTest.java",
  "methodName" : "testNullToEmptyLong",
  "sourceCode" : "@Test\r\nvoid testNullToEmptyLong() {\r\n    final long[] original = { 1L, 2L };\r\n    assertEquals(original, ArrayUtils.nullToEmpty(original));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ArrayUtilsTest.java",
  "methodName" : "testNullToEmptyLongEmptyArray",
  "sourceCode" : "@Test\r\nvoid testNullToEmptyLongEmptyArray() {\r\n    final long[] empty = {};\r\n    final long[] result = ArrayUtils.nullToEmpty(empty);\r\n    assertEquals(ArrayUtils.EMPTY_LONG_ARRAY, result);\r\n    assertNotSame(empty, result);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ArrayUtilsTest.java",
  "methodName" : "testNullToEmptyLongNull",
  "sourceCode" : "@Test\r\nvoid testNullToEmptyLongNull() {\r\n    assertEquals(ArrayUtils.EMPTY_LONG_ARRAY, ArrayUtils.nullToEmpty((long[]) null));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ArrayUtilsTest.java",
  "methodName" : "testNullToEmptyLongObject",
  "sourceCode" : "@Test\r\nvoid testNullToEmptyLongObject() {\r\n    @SuppressWarnings(\"boxing\")\r\n    final Long[] original = { 1L, 2L };\r\n    assertArrayEquals(original, ArrayUtils.nullToEmpty(original));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ArrayUtilsTest.java",
  "methodName" : "testNullToEmptyLongObjectEmptyArray",
  "sourceCode" : "@Test\r\nvoid testNullToEmptyLongObjectEmptyArray() {\r\n    final Long[] empty = {};\r\n    final Long[] result = ArrayUtils.nullToEmpty(empty);\r\n    assertArrayEquals(ArrayUtils.EMPTY_LONG_OBJECT_ARRAY, result);\r\n    assertNotSame(empty, result);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ArrayUtilsTest.java",
  "methodName" : "testNullToEmptyLongObjectNull",
  "sourceCode" : "@Test\r\nvoid testNullToEmptyLongObjectNull() {\r\n    assertArrayEquals(ArrayUtils.EMPTY_LONG_OBJECT_ARRAY, ArrayUtils.nullToEmpty((Long[]) null));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ArrayUtilsTest.java",
  "methodName" : "testNullToEmptyObject",
  "sourceCode" : "@Test\r\nvoid testNullToEmptyObject() {\r\n    final Object[] original = { Boolean.TRUE, Boolean.FALSE };\r\n    assertArrayEquals(original, ArrayUtils.nullToEmpty(original));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ArrayUtilsTest.java",
  "methodName" : "testNullToEmptyObjectEmptyArray",
  "sourceCode" : "@Test\r\nvoid testNullToEmptyObjectEmptyArray() {\r\n    final Object[] empty = {};\r\n    final Object[] result = ArrayUtils.nullToEmpty(empty);\r\n    assertArrayEquals(ArrayUtils.EMPTY_OBJECT_ARRAY, result);\r\n    assertNotSame(empty, result);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ArrayUtilsTest.java",
  "methodName" : "testNullToEmptyObjectNull",
  "sourceCode" : "@Test\r\nvoid testNullToEmptyObjectNull() {\r\n    assertArrayEquals(ArrayUtils.EMPTY_OBJECT_ARRAY, ArrayUtils.nullToEmpty((Object[]) null));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ArrayUtilsTest.java",
  "methodName" : "testNullToEmptyShort",
  "sourceCode" : "@Test\r\nvoid testNullToEmptyShort() {\r\n    final short[] original = { 1, 2 };\r\n    assertEquals(original, ArrayUtils.nullToEmpty(original));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ArrayUtilsTest.java",
  "methodName" : "testNullToEmptyShortEmptyArray",
  "sourceCode" : "@Test\r\nvoid testNullToEmptyShortEmptyArray() {\r\n    final short[] empty = {};\r\n    final short[] result = ArrayUtils.nullToEmpty(empty);\r\n    assertEquals(ArrayUtils.EMPTY_SHORT_ARRAY, result);\r\n    assertNotSame(empty, result);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ArrayUtilsTest.java",
  "methodName" : "testNullToEmptyShortNull",
  "sourceCode" : "@Test\r\nvoid testNullToEmptyShortNull() {\r\n    assertEquals(ArrayUtils.EMPTY_SHORT_ARRAY, ArrayUtils.nullToEmpty((short[]) null));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ArrayUtilsTest.java",
  "methodName" : "testNullToEmptyShortObject",
  "sourceCode" : "@Test\r\nvoid testNullToEmptyShortObject() {\r\n    @SuppressWarnings(\"boxing\")\r\n    final Short[] original = { 1, 2 };\r\n    assertArrayEquals(original, ArrayUtils.nullToEmpty(original));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ArrayUtilsTest.java",
  "methodName" : "testNullToEmptyShortObjectEmptyArray",
  "sourceCode" : "@Test\r\nvoid testNullToEmptyShortObjectEmptyArray() {\r\n    final Short[] empty = {};\r\n    final Short[] result = ArrayUtils.nullToEmpty(empty);\r\n    assertArrayEquals(ArrayUtils.EMPTY_SHORT_OBJECT_ARRAY, result);\r\n    assertNotSame(empty, result);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ArrayUtilsTest.java",
  "methodName" : "testNullToEmptyShortObjectNull",
  "sourceCode" : "@Test\r\nvoid testNullToEmptyShortObjectNull() {\r\n    assertArrayEquals(ArrayUtils.EMPTY_SHORT_OBJECT_ARRAY, ArrayUtils.nullToEmpty((Short[]) null));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ArrayUtilsTest.java",
  "methodName" : "testNullToEmptyString",
  "sourceCode" : "@Test\r\nvoid testNullToEmptyString() {\r\n    final String[] original = { \"abc\", \"def\" };\r\n    assertArrayEquals(original, ArrayUtils.nullToEmpty(original));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ArrayUtilsTest.java",
  "methodName" : "testNullToEmptyStringEmptyArray",
  "sourceCode" : "@Test\r\nvoid testNullToEmptyStringEmptyArray() {\r\n    final String[] empty = {};\r\n    final String[] result = ArrayUtils.nullToEmpty(empty);\r\n    assertArrayEquals(ArrayUtils.EMPTY_STRING_ARRAY, result);\r\n    assertNotSame(empty, result);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ArrayUtilsTest.java",
  "methodName" : "testNullToEmptyStringNull",
  "sourceCode" : "@Test\r\nvoid testNullToEmptyStringNull() {\r\n    assertArrayEquals(ArrayUtils.EMPTY_STRING_ARRAY, ArrayUtils.nullToEmpty((String[]) null));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ArrayUtilsTest.java",
  "methodName" : "testNullToShortObject",
  "sourceCode" : "@Test\r\nvoid testNullToShortObject() {\r\n    @SuppressWarnings(\"boxing\")\r\n    final Short[] original = { 1, 2 };\r\n    assertArrayEquals(original, ArrayUtils.nullTo(original, ArrayUtils.EMPTY_SHORT_OBJECT_ARRAY));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ArrayUtilsTest.java",
  "methodName" : "testReverse",
  "sourceCode" : "@Test\r\nvoid testReverse() {\r\n    final StringBuffer str1 = new StringBuffer(\"pick\");\r\n    final String str2 = \"a\";\r\n    final String[] str3 = { \"stick\" };\r\n    final String str4 = \"up\";\r\n    Object[] array = { str1, str2, str3 };\r\n    ArrayUtils.reverse(array);\r\n    assertEquals(array[0], str3);\r\n    assertEquals(array[1], str2);\r\n    assertEquals(array[2], str1);\r\n    array = new Object[] { str1, str2, str3, str4 };\r\n    ArrayUtils.reverse(array);\r\n    assertEquals(array[0], str4);\r\n    assertEquals(array[1], str3);\r\n    assertEquals(array[2], str2);\r\n    assertEquals(array[3], str1);\r\n    array = null;\r\n    ArrayUtils.reverse(array);\r\n    assertArrayEquals(null, array);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ArrayUtilsTest.java",
  "methodName" : "testReverseBoolean",
  "sourceCode" : "@Test\r\nvoid testReverseBoolean() {\r\n    boolean[] array = { false, false, true };\r\n    ArrayUtils.reverse(array);\r\n    assertTrue(array[0]);\r\n    assertFalse(array[1]);\r\n    assertFalse(array[2]);\r\n    array = null;\r\n    ArrayUtils.reverse(array);\r\n    assertNull(array);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ArrayUtilsTest.java",
  "methodName" : "testReverseBooleanRange",
  "sourceCode" : "@Test\r\nvoid testReverseBooleanRange() {\r\n    boolean[] array = { false, false, true };\r\n    // The whole array\r\n    ArrayUtils.reverse(array, 0, 3);\r\n    assertTrue(array[0]);\r\n    assertFalse(array[1]);\r\n    assertFalse(array[2]);\r\n    // a range\r\n    array = new boolean[] { false, false, true };\r\n    ArrayUtils.reverse(array, 0, 2);\r\n    assertFalse(array[0]);\r\n    assertFalse(array[1]);\r\n    assertTrue(array[2]);\r\n    // a range with a negative start\r\n    array = new boolean[] { false, false, true };\r\n    ArrayUtils.reverse(array, -1, 3);\r\n    assertTrue(array[0]);\r\n    assertFalse(array[1]);\r\n    assertFalse(array[2]);\r\n    // a range with a large stop index\r\n    array = new boolean[] { false, false, true };\r\n    ArrayUtils.reverse(array, -1, array.length + 1000);\r\n    assertTrue(array[0]);\r\n    assertFalse(array[1]);\r\n    assertFalse(array[2]);\r\n    // null\r\n    array = null;\r\n    ArrayUtils.reverse(array, 0, 3);\r\n    assertNull(array);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ArrayUtilsTest.java",
  "methodName" : "testReverseByte",
  "sourceCode" : "@Test\r\nvoid testReverseByte() {\r\n    byte[] array = { 2, 3, 4 };\r\n    ArrayUtils.reverse(array);\r\n    assertEquals(4, array[0]);\r\n    assertEquals(3, array[1]);\r\n    assertEquals(2, array[2]);\r\n    array = null;\r\n    ArrayUtils.reverse(array);\r\n    assertNull(array);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ArrayUtilsTest.java",
  "methodName" : "testReverseByteRange",
  "sourceCode" : "@Test\r\nvoid testReverseByteRange() {\r\n    byte[] array = { 1, 2, 3 };\r\n    // The whole array\r\n    ArrayUtils.reverse(array, 0, 3);\r\n    assertEquals(3, array[0]);\r\n    assertEquals(2, array[1]);\r\n    assertEquals(1, array[2]);\r\n    // a range\r\n    array = new byte[] { 1, 2, 3 };\r\n    ArrayUtils.reverse(array, 0, 2);\r\n    assertEquals(2, array[0]);\r\n    assertEquals(1, array[1]);\r\n    assertEquals(3, array[2]);\r\n    // a range with a negative start\r\n    array = new byte[] { 1, 2, 3 };\r\n    ArrayUtils.reverse(array, -1, 3);\r\n    assertEquals(3, array[0]);\r\n    assertEquals(2, array[1]);\r\n    assertEquals(1, array[2]);\r\n    // a range with a large stop index\r\n    array = new byte[] { 1, 2, 3 };\r\n    ArrayUtils.reverse(array, -1, array.length + 1000);\r\n    assertEquals(3, array[0]);\r\n    assertEquals(2, array[1]);\r\n    assertEquals(1, array[2]);\r\n    // null\r\n    array = null;\r\n    ArrayUtils.reverse(array, 0, 3);\r\n    assertNull(array);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ArrayUtilsTest.java",
  "methodName" : "testReverseChar",
  "sourceCode" : "@Test\r\nvoid testReverseChar() {\r\n    char[] array = { 'a', 'f', 'C' };\r\n    ArrayUtils.reverse(array);\r\n    assertEquals('C', array[0]);\r\n    assertEquals('f', array[1]);\r\n    assertEquals('a', array[2]);\r\n    array = null;\r\n    ArrayUtils.reverse(array);\r\n    assertNull(array);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ArrayUtilsTest.java",
  "methodName" : "testReverseCharRange",
  "sourceCode" : "@Test\r\nvoid testReverseCharRange() {\r\n    char[] array = { 1, 2, 3 };\r\n    // The whole array\r\n    ArrayUtils.reverse(array, 0, 3);\r\n    assertEquals(3, array[0]);\r\n    assertEquals(2, array[1]);\r\n    assertEquals(1, array[2]);\r\n    // a range\r\n    array = new char[] { 1, 2, 3 };\r\n    ArrayUtils.reverse(array, 0, 2);\r\n    assertEquals(2, array[0]);\r\n    assertEquals(1, array[1]);\r\n    assertEquals(3, array[2]);\r\n    // a range with a negative start\r\n    array = new char[] { 1, 2, 3 };\r\n    ArrayUtils.reverse(array, -1, 3);\r\n    assertEquals(3, array[0]);\r\n    assertEquals(2, array[1]);\r\n    assertEquals(1, array[2]);\r\n    // a range with a large stop index\r\n    array = new char[] { 1, 2, 3 };\r\n    ArrayUtils.reverse(array, -1, array.length + 1000);\r\n    assertEquals(3, array[0]);\r\n    assertEquals(2, array[1]);\r\n    assertEquals(1, array[2]);\r\n    // null\r\n    array = null;\r\n    ArrayUtils.reverse(array, 0, 3);\r\n    assertNull(array);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ArrayUtilsTest.java",
  "methodName" : "testReverseDouble",
  "sourceCode" : "@Test\r\nvoid testReverseDouble() {\r\n    double[] array = { 0.3d, 0.4d, 0.5d };\r\n    ArrayUtils.reverse(array);\r\n    assertEquals(0.5d, array[0]);\r\n    assertEquals(0.4d, array[1]);\r\n    assertEquals(0.3d, array[2]);\r\n    array = null;\r\n    ArrayUtils.reverse(array);\r\n    assertNull(array);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ArrayUtilsTest.java",
  "methodName" : "testReverseDoubleRange",
  "sourceCode" : "@Test\r\nvoid testReverseDoubleRange() {\r\n    double[] array = { 1, 2, 3 };\r\n    // The whole array\r\n    ArrayUtils.reverse(array, 0, 3);\r\n    assertEquals(3, array[0]);\r\n    assertEquals(2, array[1]);\r\n    assertEquals(1, array[2]);\r\n    // a range\r\n    array = new double[] { 1, 2, 3 };\r\n    ArrayUtils.reverse(array, 0, 2);\r\n    assertEquals(2, array[0]);\r\n    assertEquals(1, array[1]);\r\n    assertEquals(3, array[2]);\r\n    // a range with a negative start\r\n    array = new double[] { 1, 2, 3 };\r\n    ArrayUtils.reverse(array, -1, 3);\r\n    assertEquals(3, array[0]);\r\n    assertEquals(2, array[1]);\r\n    assertEquals(1, array[2]);\r\n    // a range with a large stop index\r\n    array = new double[] { 1, 2, 3 };\r\n    ArrayUtils.reverse(array, -1, array.length + 1000);\r\n    assertEquals(3, array[0]);\r\n    assertEquals(2, array[1]);\r\n    assertEquals(1, array[2]);\r\n    // null\r\n    array = null;\r\n    ArrayUtils.reverse(array, 0, 3);\r\n    assertNull(array);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ArrayUtilsTest.java",
  "methodName" : "testReverseFloat",
  "sourceCode" : "@Test\r\nvoid testReverseFloat() {\r\n    float[] array = { 0.3f, 0.4f, 0.5f };\r\n    ArrayUtils.reverse(array);\r\n    assertEquals(0.5f, array[0]);\r\n    assertEquals(0.4f, array[1]);\r\n    assertEquals(0.3f, array[2]);\r\n    array = null;\r\n    ArrayUtils.reverse(array);\r\n    assertNull(array);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ArrayUtilsTest.java",
  "methodName" : "testReverseFloatRange",
  "sourceCode" : "@Test\r\nvoid testReverseFloatRange() {\r\n    float[] array = { 1, 2, 3 };\r\n    // The whole array\r\n    ArrayUtils.reverse(array, 0, 3);\r\n    assertEquals(3, array[0]);\r\n    assertEquals(2, array[1]);\r\n    assertEquals(1, array[2]);\r\n    // a range\r\n    array = new float[] { 1, 2, 3 };\r\n    ArrayUtils.reverse(array, 0, 2);\r\n    assertEquals(2, array[0]);\r\n    assertEquals(1, array[1]);\r\n    assertEquals(3, array[2]);\r\n    // a range with a negative start\r\n    array = new float[] { 1, 2, 3 };\r\n    ArrayUtils.reverse(array, -1, 3);\r\n    assertEquals(3, array[0]);\r\n    assertEquals(2, array[1]);\r\n    assertEquals(1, array[2]);\r\n    // a range with a large stop index\r\n    array = new float[] { 1, 2, 3 };\r\n    ArrayUtils.reverse(array, -1, array.length + 1000);\r\n    assertEquals(3, array[0]);\r\n    assertEquals(2, array[1]);\r\n    assertEquals(1, array[2]);\r\n    // null\r\n    array = null;\r\n    ArrayUtils.reverse(array, 0, 3);\r\n    assertNull(array);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ArrayUtilsTest.java",
  "methodName" : "testReverseInt",
  "sourceCode" : "@Test\r\nvoid testReverseInt() {\r\n    int[] array = { 1, 2, 3 };\r\n    ArrayUtils.reverse(array);\r\n    assertEquals(3, array[0]);\r\n    assertEquals(2, array[1]);\r\n    assertEquals(1, array[2]);\r\n    array = null;\r\n    ArrayUtils.reverse(array);\r\n    assertNull(array);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ArrayUtilsTest.java",
  "methodName" : "testReverseIntRange",
  "sourceCode" : "@Test\r\nvoid testReverseIntRange() {\r\n    int[] array = { 1, 2, 3 };\r\n    // The whole array\r\n    ArrayUtils.reverse(array, 0, 3);\r\n    assertEquals(3, array[0]);\r\n    assertEquals(2, array[1]);\r\n    assertEquals(1, array[2]);\r\n    // a range\r\n    array = new int[] { 1, 2, 3 };\r\n    ArrayUtils.reverse(array, 0, 2);\r\n    assertEquals(2, array[0]);\r\n    assertEquals(1, array[1]);\r\n    assertEquals(3, array[2]);\r\n    // a range with a negative start\r\n    array = new int[] { 1, 2, 3 };\r\n    ArrayUtils.reverse(array, -1, 3);\r\n    assertEquals(3, array[0]);\r\n    assertEquals(2, array[1]);\r\n    assertEquals(1, array[2]);\r\n    // a range with a large stop index\r\n    array = new int[] { 1, 2, 3 };\r\n    ArrayUtils.reverse(array, -1, array.length + 1000);\r\n    assertEquals(3, array[0]);\r\n    assertEquals(2, array[1]);\r\n    assertEquals(1, array[2]);\r\n    // null\r\n    array = null;\r\n    ArrayUtils.reverse(array, 0, 3);\r\n    assertNull(array);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ArrayUtilsTest.java",
  "methodName" : "testReverseLong",
  "sourceCode" : "@Test\r\nvoid testReverseLong() {\r\n    long[] array = { 1L, 2L, 3L };\r\n    ArrayUtils.reverse(array);\r\n    assertEquals(3L, array[0]);\r\n    assertEquals(2L, array[1]);\r\n    assertEquals(1L, array[2]);\r\n    array = null;\r\n    ArrayUtils.reverse(array);\r\n    assertNull(array);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ArrayUtilsTest.java",
  "methodName" : "testReverseLongRange",
  "sourceCode" : "@Test\r\nvoid testReverseLongRange() {\r\n    long[] array = { 1, 2, 3 };\r\n    // The whole array\r\n    ArrayUtils.reverse(array, 0, 3);\r\n    assertEquals(3, array[0]);\r\n    assertEquals(2, array[1]);\r\n    assertEquals(1, array[2]);\r\n    // a range\r\n    array = new long[] { 1, 2, 3 };\r\n    ArrayUtils.reverse(array, 0, 2);\r\n    assertEquals(2, array[0]);\r\n    assertEquals(1, array[1]);\r\n    assertEquals(3, array[2]);\r\n    // a range with a negative start\r\n    array = new long[] { 1, 2, 3 };\r\n    ArrayUtils.reverse(array, -1, 3);\r\n    assertEquals(3, array[0]);\r\n    assertEquals(2, array[1]);\r\n    assertEquals(1, array[2]);\r\n    // a range with a large stop index\r\n    array = new long[] { 1, 2, 3 };\r\n    ArrayUtils.reverse(array, -1, array.length + 1000);\r\n    assertEquals(3, array[0]);\r\n    assertEquals(2, array[1]);\r\n    assertEquals(1, array[2]);\r\n    // null\r\n    array = null;\r\n    ArrayUtils.reverse(array, 0, 3);\r\n    assertNull(array);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ArrayUtilsTest.java",
  "methodName" : "testReverseObjectRange",
  "sourceCode" : "@Test\r\nvoid testReverseObjectRange() {\r\n    String[] array = { \"1\", \"2\", \"3\" };\r\n    // The whole array\r\n    ArrayUtils.reverse(array, 0, 3);\r\n    assertEquals(\"3\", array[0]);\r\n    assertEquals(\"2\", array[1]);\r\n    assertEquals(\"1\", array[2]);\r\n    // a range\r\n    array = new String[] { \"1\", \"2\", \"3\" };\r\n    ArrayUtils.reverse(array, 0, 2);\r\n    assertEquals(\"2\", array[0]);\r\n    assertEquals(\"1\", array[1]);\r\n    assertEquals(\"3\", array[2]);\r\n    // a range with a negative start\r\n    array = new String[] { \"1\", \"2\", \"3\" };\r\n    ArrayUtils.reverse(array, -1, 3);\r\n    assertEquals(\"3\", array[0]);\r\n    assertEquals(\"2\", array[1]);\r\n    assertEquals(\"1\", array[2]);\r\n    // a range with a large stop index\r\n    array = new String[] { \"1\", \"2\", \"3\" };\r\n    ArrayUtils.reverse(array, -1, array.length + 1000);\r\n    assertEquals(\"3\", array[0]);\r\n    assertEquals(\"2\", array[1]);\r\n    assertEquals(\"1\", array[2]);\r\n    // null\r\n    array = null;\r\n    ArrayUtils.reverse(array, 0, 3);\r\n    assertNull(array);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ArrayUtilsTest.java",
  "methodName" : "testReverseShort",
  "sourceCode" : "@Test\r\nvoid testReverseShort() {\r\n    short[] array = { 1, 2, 3 };\r\n    ArrayUtils.reverse(array);\r\n    assertEquals(3, array[0]);\r\n    assertEquals(2, array[1]);\r\n    assertEquals(1, array[2]);\r\n    array = null;\r\n    ArrayUtils.reverse(array);\r\n    assertNull(array);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ArrayUtilsTest.java",
  "methodName" : "testReverseShortRange",
  "sourceCode" : "@Test\r\nvoid testReverseShortRange() {\r\n    short[] array = { 1, 2, 3 };\r\n    // The whole array\r\n    ArrayUtils.reverse(array, 0, 3);\r\n    assertEquals(3, array[0]);\r\n    assertEquals(2, array[1]);\r\n    assertEquals(1, array[2]);\r\n    // a range\r\n    array = new short[] { 1, 2, 3 };\r\n    ArrayUtils.reverse(array, 0, 2);\r\n    assertEquals(2, array[0]);\r\n    assertEquals(1, array[1]);\r\n    assertEquals(3, array[2]);\r\n    // a range with a negative start\r\n    array = new short[] { 1, 2, 3 };\r\n    ArrayUtils.reverse(array, -1, 3);\r\n    assertEquals(3, array[0]);\r\n    assertEquals(2, array[1]);\r\n    assertEquals(1, array[2]);\r\n    // a range with a large stop index\r\n    array = new short[] { 1, 2, 3 };\r\n    ArrayUtils.reverse(array, -1, array.length + 1000);\r\n    assertEquals(3, array[0]);\r\n    assertEquals(2, array[1]);\r\n    assertEquals(1, array[2]);\r\n    // null\r\n    array = null;\r\n    ArrayUtils.reverse(array, 0, 3);\r\n    assertNull(array);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ArrayUtilsTest.java",
  "methodName" : "testSameLength",
  "sourceCode" : "@Test\r\nvoid testSameLength() {\r\n    final Object[] nullArray = null;\r\n    final Object[] emptyArray = {};\r\n    final Object[] oneArray = { \"pick\" };\r\n    final Object[] twoArray = { \"pick\", \"stick\" };\r\n    assertTrue(ArrayUtils.isSameLength(nullArray, nullArray));\r\n    assertTrue(ArrayUtils.isSameLength(nullArray, emptyArray));\r\n    assertFalse(ArrayUtils.isSameLength(nullArray, oneArray));\r\n    assertFalse(ArrayUtils.isSameLength(nullArray, twoArray));\r\n    assertTrue(ArrayUtils.isSameLength(emptyArray, nullArray));\r\n    assertTrue(ArrayUtils.isSameLength(emptyArray, emptyArray));\r\n    assertFalse(ArrayUtils.isSameLength(emptyArray, oneArray));\r\n    assertFalse(ArrayUtils.isSameLength(emptyArray, twoArray));\r\n    assertFalse(ArrayUtils.isSameLength(oneArray, nullArray));\r\n    assertFalse(ArrayUtils.isSameLength(oneArray, emptyArray));\r\n    assertTrue(ArrayUtils.isSameLength(oneArray, oneArray));\r\n    assertFalse(ArrayUtils.isSameLength(oneArray, twoArray));\r\n    assertFalse(ArrayUtils.isSameLength(twoArray, nullArray));\r\n    assertFalse(ArrayUtils.isSameLength(twoArray, emptyArray));\r\n    assertFalse(ArrayUtils.isSameLength(twoArray, oneArray));\r\n    assertTrue(ArrayUtils.isSameLength(twoArray, twoArray));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ArrayUtilsTest.java",
  "methodName" : "testSameLengthAll",
  "sourceCode" : "@Test\r\nvoid testSameLengthAll() {\r\n    final Object[] nullArrayObject = null;\r\n    final Object[] emptyArrayObject = {};\r\n    final Object[] oneArrayObject = { \"pick\" };\r\n    final Object[] twoArrayObject = { \"pick\", \"stick\" };\r\n    final boolean[] nullArrayBoolean = null;\r\n    final boolean[] emptyArrayBoolean = {};\r\n    final boolean[] oneArrayBoolean = { true };\r\n    final boolean[] twoArrayBoolean = { true, false };\r\n    final long[] nullArrayLong = null;\r\n    final long[] emptyArrayLong = {};\r\n    final long[] oneArrayLong = { 0L };\r\n    final long[] twoArrayLong = { 0L, 76L };\r\n    final int[] nullArrayInt = null;\r\n    final int[] emptyArrayInt = {};\r\n    final int[] oneArrayInt = { 4 };\r\n    final int[] twoArrayInt = { 5, 7 };\r\n    final short[] nullArrayShort = null;\r\n    final short[] emptyArrayShort = {};\r\n    final short[] oneArrayShort = { 4 };\r\n    final short[] twoArrayShort = { 6, 8 };\r\n    final char[] nullArrayChar = null;\r\n    final char[] emptyArrayChar = {};\r\n    final char[] oneArrayChar = { 'f' };\r\n    final char[] twoArrayChar = { 'd', 't' };\r\n    final byte[] nullArrayByte = null;\r\n    final byte[] emptyArrayByte = {};\r\n    final byte[] oneArrayByte = { 3 };\r\n    final byte[] twoArrayByte = { 4, 6 };\r\n    final double[] nullArrayDouble = null;\r\n    final double[] emptyArrayDouble = {};\r\n    final double[] oneArrayDouble = { 1.3d };\r\n    final double[] twoArrayDouble = { 4.5d, 6.3d };\r\n    final float[] nullArrayFloat = null;\r\n    final float[] emptyArrayFloat = {};\r\n    final float[] oneArrayFloat = { 2.5f };\r\n    final float[] twoArrayFloat = { 6.4f, 5.8f };\r\n    assertTrue(ArrayUtils.isSameLength(nullArrayObject, nullArrayObject));\r\n    assertTrue(ArrayUtils.isSameLength(nullArrayObject, nullArrayBoolean));\r\n    assertTrue(ArrayUtils.isSameLength(nullArrayObject, nullArrayLong));\r\n    assertTrue(ArrayUtils.isSameLength(nullArrayObject, nullArrayInt));\r\n    assertTrue(ArrayUtils.isSameLength(nullArrayObject, nullArrayShort));\r\n    assertTrue(ArrayUtils.isSameLength(nullArrayObject, nullArrayChar));\r\n    assertTrue(ArrayUtils.isSameLength(nullArrayObject, nullArrayByte));\r\n    assertTrue(ArrayUtils.isSameLength(nullArrayObject, nullArrayDouble));\r\n    assertTrue(ArrayUtils.isSameLength(nullArrayObject, nullArrayFloat));\r\n    assertTrue(ArrayUtils.isSameLength(nullArrayBoolean, nullArrayObject));\r\n    assertTrue(ArrayUtils.isSameLength(nullArrayBoolean, nullArrayBoolean));\r\n    assertTrue(ArrayUtils.isSameLength(nullArrayBoolean, nullArrayLong));\r\n    assertTrue(ArrayUtils.isSameLength(nullArrayBoolean, nullArrayInt));\r\n    assertTrue(ArrayUtils.isSameLength(nullArrayBoolean, nullArrayShort));\r\n    assertTrue(ArrayUtils.isSameLength(nullArrayBoolean, nullArrayChar));\r\n    assertTrue(ArrayUtils.isSameLength(nullArrayBoolean, nullArrayByte));\r\n    assertTrue(ArrayUtils.isSameLength(nullArrayBoolean, nullArrayDouble));\r\n    assertTrue(ArrayUtils.isSameLength(nullArrayBoolean, nullArrayFloat));\r\n    assertTrue(ArrayUtils.isSameLength(nullArrayLong, nullArrayObject));\r\n    assertTrue(ArrayUtils.isSameLength(nullArrayLong, nullArrayBoolean));\r\n    assertTrue(ArrayUtils.isSameLength(nullArrayLong, nullArrayLong));\r\n    assertTrue(ArrayUtils.isSameLength(nullArrayLong, nullArrayInt));\r\n    assertTrue(ArrayUtils.isSameLength(nullArrayLong, nullArrayShort));\r\n    assertTrue(ArrayUtils.isSameLength(nullArrayLong, nullArrayChar));\r\n    assertTrue(ArrayUtils.isSameLength(nullArrayLong, nullArrayByte));\r\n    assertTrue(ArrayUtils.isSameLength(nullArrayLong, nullArrayDouble));\r\n    assertTrue(ArrayUtils.isSameLength(nullArrayLong, nullArrayFloat));\r\n    assertTrue(ArrayUtils.isSameLength(nullArrayInt, nullArrayObject));\r\n    assertTrue(ArrayUtils.isSameLength(nullArrayInt, nullArrayBoolean));\r\n    assertTrue(ArrayUtils.isSameLength(nullArrayInt, nullArrayLong));\r\n    assertTrue(ArrayUtils.isSameLength(nullArrayInt, nullArrayInt));\r\n    assertTrue(ArrayUtils.isSameLength(nullArrayInt, nullArrayShort));\r\n    assertTrue(ArrayUtils.isSameLength(nullArrayInt, nullArrayChar));\r\n    assertTrue(ArrayUtils.isSameLength(nullArrayInt, nullArrayByte));\r\n    assertTrue(ArrayUtils.isSameLength(nullArrayInt, nullArrayDouble));\r\n    assertTrue(ArrayUtils.isSameLength(nullArrayInt, nullArrayFloat));\r\n    assertTrue(ArrayUtils.isSameLength(nullArrayShort, nullArrayObject));\r\n    assertTrue(ArrayUtils.isSameLength(nullArrayShort, nullArrayBoolean));\r\n    assertTrue(ArrayUtils.isSameLength(nullArrayShort, nullArrayLong));\r\n    assertTrue(ArrayUtils.isSameLength(nullArrayShort, nullArrayInt));\r\n    assertTrue(ArrayUtils.isSameLength(nullArrayShort, nullArrayShort));\r\n    assertTrue(ArrayUtils.isSameLength(nullArrayShort, nullArrayChar));\r\n    assertTrue(ArrayUtils.isSameLength(nullArrayShort, nullArrayByte));\r\n    assertTrue(ArrayUtils.isSameLength(nullArrayShort, nullArrayDouble));\r\n    assertTrue(ArrayUtils.isSameLength(nullArrayShort, nullArrayFloat));\r\n    assertTrue(ArrayUtils.isSameLength(nullArrayChar, nullArrayObject));\r\n    assertTrue(ArrayUtils.isSameLength(nullArrayChar, nullArrayBoolean));\r\n    assertTrue(ArrayUtils.isSameLength(nullArrayChar, nullArrayLong));\r\n    assertTrue(ArrayUtils.isSameLength(nullArrayChar, nullArrayInt));\r\n    assertTrue(ArrayUtils.isSameLength(nullArrayChar, nullArrayShort));\r\n    assertTrue(ArrayUtils.isSameLength(nullArrayChar, nullArrayChar));\r\n    assertTrue(ArrayUtils.isSameLength(nullArrayChar, nullArrayByte));\r\n    assertTrue(ArrayUtils.isSameLength(nullArrayChar, nullArrayDouble));\r\n    assertTrue(ArrayUtils.isSameLength(nullArrayChar, nullArrayFloat));\r\n    assertTrue(ArrayUtils.isSameLength(nullArrayByte, nullArrayObject));\r\n    assertTrue(ArrayUtils.isSameLength(nullArrayByte, nullArrayBoolean));\r\n    assertTrue(ArrayUtils.isSameLength(nullArrayByte, nullArrayLong));\r\n    assertTrue(ArrayUtils.isSameLength(nullArrayByte, nullArrayInt));\r\n    assertTrue(ArrayUtils.isSameLength(nullArrayByte, nullArrayShort));\r\n    assertTrue(ArrayUtils.isSameLength(nullArrayByte, nullArrayChar));\r\n    assertTrue(ArrayUtils.isSameLength(nullArrayByte, nullArrayByte));\r\n    assertTrue(ArrayUtils.isSameLength(nullArrayByte, nullArrayDouble));\r\n    assertTrue(ArrayUtils.isSameLength(nullArrayByte, nullArrayFloat));\r\n    assertTrue(ArrayUtils.isSameLength(nullArrayDouble, nullArrayObject));\r\n    assertTrue(ArrayUtils.isSameLength(nullArrayDouble, nullArrayBoolean));\r\n    assertTrue(ArrayUtils.isSameLength(nullArrayDouble, nullArrayLong));\r\n    assertTrue(ArrayUtils.isSameLength(nullArrayDouble, nullArrayInt));\r\n    assertTrue(ArrayUtils.isSameLength(nullArrayDouble, nullArrayShort));\r\n    assertTrue(ArrayUtils.isSameLength(nullArrayDouble, nullArrayChar));\r\n    assertTrue(ArrayUtils.isSameLength(nullArrayDouble, nullArrayByte));\r\n    assertTrue(ArrayUtils.isSameLength(nullArrayDouble, nullArrayDouble));\r\n    assertTrue(ArrayUtils.isSameLength(nullArrayDouble, nullArrayFloat));\r\n    assertTrue(ArrayUtils.isSameLength(nullArrayFloat, nullArrayObject));\r\n    assertTrue(ArrayUtils.isSameLength(nullArrayFloat, nullArrayBoolean));\r\n    assertTrue(ArrayUtils.isSameLength(nullArrayFloat, nullArrayLong));\r\n    assertTrue(ArrayUtils.isSameLength(nullArrayFloat, nullArrayInt));\r\n    assertTrue(ArrayUtils.isSameLength(nullArrayFloat, nullArrayShort));\r\n    assertTrue(ArrayUtils.isSameLength(nullArrayFloat, nullArrayChar));\r\n    assertTrue(ArrayUtils.isSameLength(nullArrayFloat, nullArrayByte));\r\n    assertTrue(ArrayUtils.isSameLength(nullArrayFloat, nullArrayDouble));\r\n    assertTrue(ArrayUtils.isSameLength(nullArrayFloat, nullArrayFloat));\r\n    assertTrue(ArrayUtils.isSameLength(nullArrayObject, emptyArrayObject));\r\n    assertTrue(ArrayUtils.isSameLength(nullArrayObject, emptyArrayBoolean));\r\n    assertTrue(ArrayUtils.isSameLength(nullArrayObject, emptyArrayLong));\r\n    assertTrue(ArrayUtils.isSameLength(nullArrayObject, emptyArrayInt));\r\n    assertTrue(ArrayUtils.isSameLength(nullArrayObject, emptyArrayShort));\r\n    assertTrue(ArrayUtils.isSameLength(nullArrayObject, emptyArrayChar));\r\n    assertTrue(ArrayUtils.isSameLength(nullArrayObject, emptyArrayByte));\r\n    assertTrue(ArrayUtils.isSameLength(nullArrayObject, emptyArrayDouble));\r\n    assertTrue(ArrayUtils.isSameLength(nullArrayObject, emptyArrayFloat));\r\n    assertTrue(ArrayUtils.isSameLength(nullArrayBoolean, emptyArrayObject));\r\n    assertTrue(ArrayUtils.isSameLength(nullArrayBoolean, emptyArrayBoolean));\r\n    assertTrue(ArrayUtils.isSameLength(nullArrayBoolean, emptyArrayLong));\r\n    assertTrue(ArrayUtils.isSameLength(nullArrayBoolean, emptyArrayInt));\r\n    assertTrue(ArrayUtils.isSameLength(nullArrayBoolean, emptyArrayShort));\r\n    assertTrue(ArrayUtils.isSameLength(nullArrayBoolean, emptyArrayChar));\r\n    assertTrue(ArrayUtils.isSameLength(nullArrayBoolean, emptyArrayByte));\r\n    assertTrue(ArrayUtils.isSameLength(nullArrayBoolean, emptyArrayDouble));\r\n    assertTrue(ArrayUtils.isSameLength(nullArrayBoolean, emptyArrayFloat));\r\n    assertTrue(ArrayUtils.isSameLength(nullArrayLong, emptyArrayObject));\r\n    assertTrue(ArrayUtils.isSameLength(nullArrayLong, emptyArrayBoolean));\r\n    assertTrue(ArrayUtils.isSameLength(nullArrayLong, emptyArrayLong));\r\n    assertTrue(ArrayUtils.isSameLength(nullArrayLong, emptyArrayInt));\r\n    assertTrue(ArrayUtils.isSameLength(nullArrayLong, emptyArrayShort));\r\n    assertTrue(ArrayUtils.isSameLength(nullArrayLong, emptyArrayChar));\r\n    assertTrue(ArrayUtils.isSameLength(nullArrayLong, emptyArrayByte));\r\n    assertTrue(ArrayUtils.isSameLength(nullArrayLong, emptyArrayDouble));\r\n    assertTrue(ArrayUtils.isSameLength(nullArrayLong, emptyArrayFloat));\r\n    assertTrue(ArrayUtils.isSameLength(nullArrayInt, emptyArrayObject));\r\n    assertTrue(ArrayUtils.isSameLength(nullArrayInt, emptyArrayBoolean));\r\n    assertTrue(ArrayUtils.isSameLength(nullArrayInt, emptyArrayLong));\r\n    assertTrue(ArrayUtils.isSameLength(nullArrayInt, emptyArrayInt));\r\n    assertTrue(ArrayUtils.isSameLength(nullArrayInt, emptyArrayShort));\r\n    assertTrue(ArrayUtils.isSameLength(nullArrayInt, emptyArrayChar));\r\n    assertTrue(ArrayUtils.isSameLength(nullArrayInt, emptyArrayByte));\r\n    assertTrue(ArrayUtils.isSameLength(nullArrayInt, emptyArrayDouble));\r\n    assertTrue(ArrayUtils.isSameLength(nullArrayInt, emptyArrayFloat));\r\n    assertTrue(ArrayUtils.isSameLength(nullArrayShort, emptyArrayObject));\r\n    assertTrue(ArrayUtils.isSameLength(nullArrayShort, emptyArrayBoolean));\r\n    assertTrue(ArrayUtils.isSameLength(nullArrayShort, emptyArrayLong));\r\n    assertTrue(ArrayUtils.isSameLength(nullArrayShort, emptyArrayInt));\r\n    assertTrue(ArrayUtils.isSameLength(nullArrayShort, emptyArrayShort));\r\n    assertTrue(ArrayUtils.isSameLength(nullArrayShort, emptyArrayChar));\r\n    assertTrue(ArrayUtils.isSameLength(nullArrayShort, emptyArrayByte));\r\n    assertTrue(ArrayUtils.isSameLength(nullArrayShort, emptyArrayDouble));\r\n    assertTrue(ArrayUtils.isSameLength(nullArrayShort, emptyArrayFloat));\r\n    assertTrue(ArrayUtils.isSameLength(nullArrayChar, emptyArrayObject));\r\n    assertTrue(ArrayUtils.isSameLength(nullArrayChar, emptyArrayBoolean));\r\n    assertTrue(ArrayUtils.isSameLength(nullArrayChar, emptyArrayLong));\r\n    assertTrue(ArrayUtils.isSameLength(nullArrayChar, emptyArrayInt));\r\n    assertTrue(ArrayUtils.isSameLength(nullArrayChar, emptyArrayShort));\r\n    assertTrue(ArrayUtils.isSameLength(nullArrayChar, emptyArrayChar));\r\n    assertTrue(ArrayUtils.isSameLength(nullArrayChar, emptyArrayByte));\r\n    assertTrue(ArrayUtils.isSameLength(nullArrayChar, emptyArrayDouble));\r\n    assertTrue(ArrayUtils.isSameLength(nullArrayChar, emptyArrayFloat));\r\n    assertTrue(ArrayUtils.isSameLength(nullArrayByte, emptyArrayObject));\r\n    assertTrue(ArrayUtils.isSameLength(nullArrayByte, emptyArrayBoolean));\r\n    assertTrue(ArrayUtils.isSameLength(nullArrayByte, emptyArrayLong));\r\n    assertTrue(ArrayUtils.isSameLength(nullArrayByte, emptyArrayInt));\r\n    assertTrue(ArrayUtils.isSameLength(nullArrayByte, emptyArrayShort));\r\n    assertTrue(ArrayUtils.isSameLength(nullArrayByte, emptyArrayChar));\r\n    assertTrue(ArrayUtils.isSameLength(nullArrayByte, emptyArrayByte));\r\n    assertTrue(ArrayUtils.isSameLength(nullArrayByte, emptyArrayDouble));\r\n    assertTrue(ArrayUtils.isSameLength(nullArrayByte, emptyArrayFloat));\r\n    assertTrue(ArrayUtils.isSameLength(nullArrayDouble, emptyArrayObject));\r\n    assertTrue(ArrayUtils.isSameLength(nullArrayDouble, emptyArrayBoolean));\r\n    assertTrue(ArrayUtils.isSameLength(nullArrayDouble, emptyArrayLong));\r\n    assertTrue(ArrayUtils.isSameLength(nullArrayDouble, emptyArrayInt));\r\n    assertTrue(ArrayUtils.isSameLength(nullArrayDouble, emptyArrayShort));\r\n    assertTrue(ArrayUtils.isSameLength(nullArrayDouble, emptyArrayChar));\r\n    assertTrue(ArrayUtils.isSameLength(nullArrayDouble, emptyArrayByte));\r\n    assertTrue(ArrayUtils.isSameLength(nullArrayDouble, emptyArrayDouble));\r\n    assertTrue(ArrayUtils.isSameLength(nullArrayDouble, emptyArrayFloat));\r\n    assertTrue(ArrayUtils.isSameLength(nullArrayFloat, emptyArrayObject));\r\n    assertTrue(ArrayUtils.isSameLength(nullArrayFloat, emptyArrayBoolean));\r\n    assertTrue(ArrayUtils.isSameLength(nullArrayFloat, emptyArrayLong));\r\n    assertTrue(ArrayUtils.isSameLength(nullArrayFloat, emptyArrayInt));\r\n    assertTrue(ArrayUtils.isSameLength(nullArrayFloat, emptyArrayShort));\r\n    assertTrue(ArrayUtils.isSameLength(nullArrayFloat, emptyArrayChar));\r\n    assertTrue(ArrayUtils.isSameLength(nullArrayFloat, emptyArrayByte));\r\n    assertTrue(ArrayUtils.isSameLength(nullArrayFloat, emptyArrayDouble));\r\n    assertTrue(ArrayUtils.isSameLength(nullArrayFloat, emptyArrayFloat));\r\n    assertFalse(ArrayUtils.isSameLength(nullArrayObject, oneArrayObject));\r\n    assertFalse(ArrayUtils.isSameLength(nullArrayObject, oneArrayBoolean));\r\n    assertFalse(ArrayUtils.isSameLength(nullArrayObject, oneArrayLong));\r\n    assertFalse(ArrayUtils.isSameLength(nullArrayObject, oneArrayInt));\r\n    assertFalse(ArrayUtils.isSameLength(nullArrayObject, oneArrayShort));\r\n    assertFalse(ArrayUtils.isSameLength(nullArrayObject, oneArrayChar));\r\n    assertFalse(ArrayUtils.isSameLength(nullArrayObject, oneArrayByte));\r\n    assertFalse(ArrayUtils.isSameLength(nullArrayObject, oneArrayDouble));\r\n    assertFalse(ArrayUtils.isSameLength(nullArrayObject, oneArrayFloat));\r\n    assertFalse(ArrayUtils.isSameLength(nullArrayBoolean, oneArrayObject));\r\n    assertFalse(ArrayUtils.isSameLength(nullArrayBoolean, oneArrayBoolean));\r\n    assertFalse(ArrayUtils.isSameLength(nullArrayBoolean, oneArrayLong));\r\n    assertFalse(ArrayUtils.isSameLength(nullArrayBoolean, oneArrayInt));\r\n    assertFalse(ArrayUtils.isSameLength(nullArrayBoolean, oneArrayShort));\r\n    assertFalse(ArrayUtils.isSameLength(nullArrayBoolean, oneArrayChar));\r\n    assertFalse(ArrayUtils.isSameLength(nullArrayBoolean, oneArrayByte));\r\n    assertFalse(ArrayUtils.isSameLength(nullArrayBoolean, oneArrayDouble));\r\n    assertFalse(ArrayUtils.isSameLength(nullArrayBoolean, oneArrayFloat));\r\n    assertFalse(ArrayUtils.isSameLength(nullArrayLong, oneArrayObject));\r\n    assertFalse(ArrayUtils.isSameLength(nullArrayLong, oneArrayBoolean));\r\n    assertFalse(ArrayUtils.isSameLength(nullArrayLong, oneArrayLong));\r\n    assertFalse(ArrayUtils.isSameLength(nullArrayLong, oneArrayInt));\r\n    assertFalse(ArrayUtils.isSameLength(nullArrayLong, oneArrayShort));\r\n    assertFalse(ArrayUtils.isSameLength(nullArrayLong, oneArrayChar));\r\n    assertFalse(ArrayUtils.isSameLength(nullArrayLong, oneArrayByte));\r\n    assertFalse(ArrayUtils.isSameLength(nullArrayLong, oneArrayDouble));\r\n    assertFalse(ArrayUtils.isSameLength(nullArrayLong, oneArrayFloat));\r\n    assertFalse(ArrayUtils.isSameLength(nullArrayInt, oneArrayObject));\r\n    assertFalse(ArrayUtils.isSameLength(nullArrayInt, oneArrayBoolean));\r\n    assertFalse(ArrayUtils.isSameLength(nullArrayInt, oneArrayLong));\r\n    assertFalse(ArrayUtils.isSameLength(nullArrayInt, oneArrayInt));\r\n    assertFalse(ArrayUtils.isSameLength(nullArrayInt, oneArrayShort));\r\n    assertFalse(ArrayUtils.isSameLength(nullArrayInt, oneArrayChar));\r\n    assertFalse(ArrayUtils.isSameLength(nullArrayInt, oneArrayByte));\r\n    assertFalse(ArrayUtils.isSameLength(nullArrayInt, oneArrayDouble));\r\n    assertFalse(ArrayUtils.isSameLength(nullArrayInt, oneArrayFloat));\r\n    assertFalse(ArrayUtils.isSameLength(nullArrayShort, oneArrayObject));\r\n    assertFalse(ArrayUtils.isSameLength(nullArrayShort, oneArrayBoolean));\r\n    assertFalse(ArrayUtils.isSameLength(nullArrayShort, oneArrayLong));\r\n    assertFalse(ArrayUtils.isSameLength(nullArrayShort, oneArrayInt));\r\n    assertFalse(ArrayUtils.isSameLength(nullArrayShort, oneArrayShort));\r\n    assertFalse(ArrayUtils.isSameLength(nullArrayShort, oneArrayChar));\r\n    assertFalse(ArrayUtils.isSameLength(nullArrayShort, oneArrayByte));\r\n    assertFalse(ArrayUtils.isSameLength(nullArrayShort, oneArrayDouble));\r\n    assertFalse(ArrayUtils.isSameLength(nullArrayShort, oneArrayFloat));\r\n    assertFalse(ArrayUtils.isSameLength(nullArrayChar, oneArrayObject));\r\n    assertFalse(ArrayUtils.isSameLength(nullArrayChar, oneArrayBoolean));\r\n    assertFalse(ArrayUtils.isSameLength(nullArrayChar, oneArrayLong));\r\n    assertFalse(ArrayUtils.isSameLength(nullArrayChar, oneArrayInt));\r\n    assertFalse(ArrayUtils.isSameLength(nullArrayChar, oneArrayShort));\r\n    assertFalse(ArrayUtils.isSameLength(nullArrayChar, oneArrayChar));\r\n    assertFalse(ArrayUtils.isSameLength(nullArrayChar, oneArrayByte));\r\n    assertFalse(ArrayUtils.isSameLength(nullArrayChar, oneArrayDouble));\r\n    assertFalse(ArrayUtils.isSameLength(nullArrayChar, oneArrayFloat));\r\n    assertFalse(ArrayUtils.isSameLength(nullArrayByte, oneArrayObject));\r\n    assertFalse(ArrayUtils.isSameLength(nullArrayByte, oneArrayBoolean));\r\n    assertFalse(ArrayUtils.isSameLength(nullArrayByte, oneArrayLong));\r\n    assertFalse(ArrayUtils.isSameLength(nullArrayByte, oneArrayInt));\r\n    assertFalse(ArrayUtils.isSameLength(nullArrayByte, oneArrayShort));\r\n    assertFalse(ArrayUtils.isSameLength(nullArrayByte, oneArrayChar));\r\n    assertFalse(ArrayUtils.isSameLength(nullArrayByte, oneArrayByte));\r\n    assertFalse(ArrayUtils.isSameLength(nullArrayByte, oneArrayDouble));\r\n    assertFalse(ArrayUtils.isSameLength(nullArrayByte, oneArrayFloat));\r\n    assertFalse(ArrayUtils.isSameLength(nullArrayDouble, oneArrayObject));\r\n    assertFalse(ArrayUtils.isSameLength(nullArrayDouble, oneArrayBoolean));\r\n    assertFalse(ArrayUtils.isSameLength(nullArrayDouble, oneArrayLong));\r\n    assertFalse(ArrayUtils.isSameLength(nullArrayDouble, oneArrayInt));\r\n    assertFalse(ArrayUtils.isSameLength(nullArrayDouble, oneArrayShort));\r\n    assertFalse(ArrayUtils.isSameLength(nullArrayDouble, oneArrayChar));\r\n    assertFalse(ArrayUtils.isSameLength(nullArrayDouble, oneArrayByte));\r\n    assertFalse(ArrayUtils.isSameLength(nullArrayDouble, oneArrayDouble));\r\n    assertFalse(ArrayUtils.isSameLength(nullArrayDouble, oneArrayFloat));\r\n    assertFalse(ArrayUtils.isSameLength(nullArrayFloat, oneArrayObject));\r\n    assertFalse(ArrayUtils.isSameLength(nullArrayFloat, oneArrayBoolean));\r\n    assertFalse(ArrayUtils.isSameLength(nullArrayFloat, oneArrayLong));\r\n    assertFalse(ArrayUtils.isSameLength(nullArrayFloat, oneArrayInt));\r\n    assertFalse(ArrayUtils.isSameLength(nullArrayFloat, oneArrayShort));\r\n    assertFalse(ArrayUtils.isSameLength(nullArrayFloat, oneArrayChar));\r\n    assertFalse(ArrayUtils.isSameLength(nullArrayFloat, oneArrayByte));\r\n    assertFalse(ArrayUtils.isSameLength(nullArrayFloat, oneArrayDouble));\r\n    assertFalse(ArrayUtils.isSameLength(nullArrayFloat, oneArrayFloat));\r\n    assertFalse(ArrayUtils.isSameLength(nullArrayObject, twoArrayObject));\r\n    assertFalse(ArrayUtils.isSameLength(nullArrayObject, twoArrayBoolean));\r\n    assertFalse(ArrayUtils.isSameLength(nullArrayObject, twoArrayLong));\r\n    assertFalse(ArrayUtils.isSameLength(nullArrayObject, twoArrayInt));\r\n    assertFalse(ArrayUtils.isSameLength(nullArrayObject, twoArrayShort));\r\n    assertFalse(ArrayUtils.isSameLength(nullArrayObject, twoArrayChar));\r\n    assertFalse(ArrayUtils.isSameLength(nullArrayObject, twoArrayByte));\r\n    assertFalse(ArrayUtils.isSameLength(nullArrayObject, twoArrayDouble));\r\n    assertFalse(ArrayUtils.isSameLength(nullArrayObject, twoArrayFloat));\r\n    assertFalse(ArrayUtils.isSameLength(nullArrayBoolean, twoArrayObject));\r\n    assertFalse(ArrayUtils.isSameLength(nullArrayBoolean, twoArrayBoolean));\r\n    assertFalse(ArrayUtils.isSameLength(nullArrayBoolean, twoArrayLong));\r\n    assertFalse(ArrayUtils.isSameLength(nullArrayBoolean, twoArrayInt));\r\n    assertFalse(ArrayUtils.isSameLength(nullArrayBoolean, twoArrayShort));\r\n    assertFalse(ArrayUtils.isSameLength(nullArrayBoolean, twoArrayChar));\r\n    assertFalse(ArrayUtils.isSameLength(nullArrayBoolean, twoArrayByte));\r\n    assertFalse(ArrayUtils.isSameLength(nullArrayBoolean, twoArrayDouble));\r\n    assertFalse(ArrayUtils.isSameLength(nullArrayBoolean, twoArrayFloat));\r\n    assertFalse(ArrayUtils.isSameLength(nullArrayLong, twoArrayObject));\r\n    assertFalse(ArrayUtils.isSameLength(nullArrayLong, twoArrayBoolean));\r\n    assertFalse(ArrayUtils.isSameLength(nullArrayLong, twoArrayLong));\r\n    assertFalse(ArrayUtils.isSameLength(nullArrayLong, twoArrayInt));\r\n    assertFalse(ArrayUtils.isSameLength(nullArrayLong, twoArrayShort));\r\n    assertFalse(ArrayUtils.isSameLength(nullArrayLong, twoArrayChar));\r\n    assertFalse(ArrayUtils.isSameLength(nullArrayLong, twoArrayByte));\r\n    assertFalse(ArrayUtils.isSameLength(nullArrayLong, twoArrayDouble));\r\n    assertFalse(ArrayUtils.isSameLength(nullArrayLong, twoArrayFloat));\r\n    assertFalse(ArrayUtils.isSameLength(nullArrayInt, twoArrayObject));\r\n    assertFalse(ArrayUtils.isSameLength(nullArrayInt, twoArrayBoolean));\r\n    assertFalse(ArrayUtils.isSameLength(nullArrayInt, twoArrayLong));\r\n    assertFalse(ArrayUtils.isSameLength(nullArrayInt, twoArrayInt));\r\n    assertFalse(ArrayUtils.isSameLength(nullArrayInt, twoArrayShort));\r\n    assertFalse(ArrayUtils.isSameLength(nullArrayInt, twoArrayChar));\r\n    assertFalse(ArrayUtils.isSameLength(nullArrayInt, twoArrayByte));\r\n    assertFalse(ArrayUtils.isSameLength(nullArrayInt, twoArrayDouble));\r\n    assertFalse(ArrayUtils.isSameLength(nullArrayInt, twoArrayFloat));\r\n    assertFalse(ArrayUtils.isSameLength(nullArrayShort, twoArrayObject));\r\n    assertFalse(ArrayUtils.isSameLength(nullArrayShort, twoArrayBoolean));\r\n    assertFalse(ArrayUtils.isSameLength(nullArrayShort, twoArrayLong));\r\n    assertFalse(ArrayUtils.isSameLength(nullArrayShort, twoArrayInt));\r\n    assertFalse(ArrayUtils.isSameLength(nullArrayShort, twoArrayShort));\r\n    assertFalse(ArrayUtils.isSameLength(nullArrayShort, twoArrayChar));\r\n    assertFalse(ArrayUtils.isSameLength(nullArrayShort, twoArrayByte));\r\n    assertFalse(ArrayUtils.isSameLength(nullArrayShort, twoArrayDouble));\r\n    assertFalse(ArrayUtils.isSameLength(nullArrayShort, twoArrayFloat));\r\n    assertFalse(ArrayUtils.isSameLength(nullArrayChar, twoArrayObject));\r\n    assertFalse(ArrayUtils.isSameLength(nullArrayChar, twoArrayBoolean));\r\n    assertFalse(ArrayUtils.isSameLength(nullArrayChar, twoArrayLong));\r\n    assertFalse(ArrayUtils.isSameLength(nullArrayChar, twoArrayInt));\r\n    assertFalse(ArrayUtils.isSameLength(nullArrayChar, twoArrayShort));\r\n    assertFalse(ArrayUtils.isSameLength(nullArrayChar, twoArrayChar));\r\n    assertFalse(ArrayUtils.isSameLength(nullArrayChar, twoArrayByte));\r\n    assertFalse(ArrayUtils.isSameLength(nullArrayChar, twoArrayDouble));\r\n    assertFalse(ArrayUtils.isSameLength(nullArrayChar, twoArrayFloat));\r\n    assertFalse(ArrayUtils.isSameLength(nullArrayByte, twoArrayObject));\r\n    assertFalse(ArrayUtils.isSameLength(nullArrayByte, twoArrayBoolean));\r\n    assertFalse(ArrayUtils.isSameLength(nullArrayByte, twoArrayLong));\r\n    assertFalse(ArrayUtils.isSameLength(nullArrayByte, twoArrayInt));\r\n    assertFalse(ArrayUtils.isSameLength(nullArrayByte, twoArrayShort));\r\n    assertFalse(ArrayUtils.isSameLength(nullArrayByte, twoArrayChar));\r\n    assertFalse(ArrayUtils.isSameLength(nullArrayByte, twoArrayByte));\r\n    assertFalse(ArrayUtils.isSameLength(nullArrayByte, twoArrayDouble));\r\n    assertFalse(ArrayUtils.isSameLength(nullArrayByte, twoArrayFloat));\r\n    assertFalse(ArrayUtils.isSameLength(nullArrayDouble, twoArrayObject));\r\n    assertFalse(ArrayUtils.isSameLength(nullArrayDouble, twoArrayBoolean));\r\n    assertFalse(ArrayUtils.isSameLength(nullArrayDouble, twoArrayLong));\r\n    assertFalse(ArrayUtils.isSameLength(nullArrayDouble, twoArrayInt));\r\n    assertFalse(ArrayUtils.isSameLength(nullArrayDouble, twoArrayShort));\r\n    assertFalse(ArrayUtils.isSameLength(nullArrayDouble, twoArrayChar));\r\n    assertFalse(ArrayUtils.isSameLength(nullArrayDouble, twoArrayByte));\r\n    assertFalse(ArrayUtils.isSameLength(nullArrayDouble, twoArrayDouble));\r\n    assertFalse(ArrayUtils.isSameLength(nullArrayDouble, twoArrayFloat));\r\n    assertFalse(ArrayUtils.isSameLength(nullArrayFloat, twoArrayObject));\r\n    assertFalse(ArrayUtils.isSameLength(nullArrayFloat, twoArrayBoolean));\r\n    assertFalse(ArrayUtils.isSameLength(nullArrayFloat, twoArrayLong));\r\n    assertFalse(ArrayUtils.isSameLength(nullArrayFloat, twoArrayInt));\r\n    assertFalse(ArrayUtils.isSameLength(nullArrayFloat, twoArrayShort));\r\n    assertFalse(ArrayUtils.isSameLength(nullArrayFloat, twoArrayChar));\r\n    assertFalse(ArrayUtils.isSameLength(nullArrayFloat, twoArrayByte));\r\n    assertFalse(ArrayUtils.isSameLength(nullArrayFloat, twoArrayDouble));\r\n    assertFalse(ArrayUtils.isSameLength(nullArrayFloat, twoArrayFloat));\r\n    assertTrue(ArrayUtils.isSameLength(emptyArrayObject, nullArrayObject));\r\n    assertTrue(ArrayUtils.isSameLength(emptyArrayObject, nullArrayBoolean));\r\n    assertTrue(ArrayUtils.isSameLength(emptyArrayObject, nullArrayLong));\r\n    assertTrue(ArrayUtils.isSameLength(emptyArrayObject, nullArrayInt));\r\n    assertTrue(ArrayUtils.isSameLength(emptyArrayObject, nullArrayShort));\r\n    assertTrue(ArrayUtils.isSameLength(emptyArrayObject, nullArrayChar));\r\n    assertTrue(ArrayUtils.isSameLength(emptyArrayObject, nullArrayByte));\r\n    assertTrue(ArrayUtils.isSameLength(emptyArrayObject, nullArrayDouble));\r\n    assertTrue(ArrayUtils.isSameLength(emptyArrayObject, nullArrayFloat));\r\n    assertTrue(ArrayUtils.isSameLength(emptyArrayBoolean, nullArrayObject));\r\n    assertTrue(ArrayUtils.isSameLength(emptyArrayBoolean, nullArrayBoolean));\r\n    assertTrue(ArrayUtils.isSameLength(emptyArrayBoolean, nullArrayLong));\r\n    assertTrue(ArrayUtils.isSameLength(emptyArrayBoolean, nullArrayInt));\r\n    assertTrue(ArrayUtils.isSameLength(emptyArrayBoolean, nullArrayShort));\r\n    assertTrue(ArrayUtils.isSameLength(emptyArrayBoolean, nullArrayChar));\r\n    assertTrue(ArrayUtils.isSameLength(emptyArrayBoolean, nullArrayByte));\r\n    assertTrue(ArrayUtils.isSameLength(emptyArrayBoolean, nullArrayDouble));\r\n    assertTrue(ArrayUtils.isSameLength(emptyArrayBoolean, nullArrayFloat));\r\n    assertTrue(ArrayUtils.isSameLength(emptyArrayLong, nullArrayObject));\r\n    assertTrue(ArrayUtils.isSameLength(emptyArrayLong, nullArrayBoolean));\r\n    assertTrue(ArrayUtils.isSameLength(emptyArrayLong, nullArrayLong));\r\n    assertTrue(ArrayUtils.isSameLength(emptyArrayLong, nullArrayInt));\r\n    assertTrue(ArrayUtils.isSameLength(emptyArrayLong, nullArrayShort));\r\n    assertTrue(ArrayUtils.isSameLength(emptyArrayLong, nullArrayChar));\r\n    assertTrue(ArrayUtils.isSameLength(emptyArrayLong, nullArrayByte));\r\n    assertTrue(ArrayUtils.isSameLength(emptyArrayLong, nullArrayDouble));\r\n    assertTrue(ArrayUtils.isSameLength(emptyArrayLong, nullArrayFloat));\r\n    assertTrue(ArrayUtils.isSameLength(emptyArrayInt, nullArrayObject));\r\n    assertTrue(ArrayUtils.isSameLength(emptyArrayInt, nullArrayBoolean));\r\n    assertTrue(ArrayUtils.isSameLength(emptyArrayInt, nullArrayLong));\r\n    assertTrue(ArrayUtils.isSameLength(emptyArrayInt, nullArrayInt));\r\n    assertTrue(ArrayUtils.isSameLength(emptyArrayInt, nullArrayShort));\r\n    assertTrue(ArrayUtils.isSameLength(emptyArrayInt, nullArrayChar));\r\n    assertTrue(ArrayUtils.isSameLength(emptyArrayInt, nullArrayByte));\r\n    assertTrue(ArrayUtils.isSameLength(emptyArrayInt, nullArrayDouble));\r\n    assertTrue(ArrayUtils.isSameLength(emptyArrayInt, nullArrayFloat));\r\n    assertTrue(ArrayUtils.isSameLength(emptyArrayShort, nullArrayObject));\r\n    assertTrue(ArrayUtils.isSameLength(emptyArrayShort, nullArrayBoolean));\r\n    assertTrue(ArrayUtils.isSameLength(emptyArrayShort, nullArrayLong));\r\n    assertTrue(ArrayUtils.isSameLength(emptyArrayShort, nullArrayInt));\r\n    assertTrue(ArrayUtils.isSameLength(emptyArrayShort, nullArrayShort));\r\n    assertTrue(ArrayUtils.isSameLength(emptyArrayShort, nullArrayChar));\r\n    assertTrue(ArrayUtils.isSameLength(emptyArrayShort, nullArrayByte));\r\n    assertTrue(ArrayUtils.isSameLength(emptyArrayShort, nullArrayDouble));\r\n    assertTrue(ArrayUtils.isSameLength(emptyArrayShort, nullArrayFloat));\r\n    assertTrue(ArrayUtils.isSameLength(emptyArrayChar, nullArrayObject));\r\n    assertTrue(ArrayUtils.isSameLength(emptyArrayChar, nullArrayBoolean));\r\n    assertTrue(ArrayUtils.isSameLength(emptyArrayChar, nullArrayLong));\r\n    assertTrue(ArrayUtils.isSameLength(emptyArrayChar, nullArrayInt));\r\n    assertTrue(ArrayUtils.isSameLength(emptyArrayChar, nullArrayShort));\r\n    assertTrue(ArrayUtils.isSameLength(emptyArrayChar, nullArrayChar));\r\n    assertTrue(ArrayUtils.isSameLength(emptyArrayChar, nullArrayByte));\r\n    assertTrue(ArrayUtils.isSameLength(emptyArrayChar, nullArrayDouble));\r\n    assertTrue(ArrayUtils.isSameLength(emptyArrayChar, nullArrayFloat));\r\n    assertTrue(ArrayUtils.isSameLength(emptyArrayByte, nullArrayObject));\r\n    assertTrue(ArrayUtils.isSameLength(emptyArrayByte, nullArrayBoolean));\r\n    assertTrue(ArrayUtils.isSameLength(emptyArrayByte, nullArrayLong));\r\n    assertTrue(ArrayUtils.isSameLength(emptyArrayByte, nullArrayInt));\r\n    assertTrue(ArrayUtils.isSameLength(emptyArrayByte, nullArrayShort));\r\n    assertTrue(ArrayUtils.isSameLength(emptyArrayByte, nullArrayChar));\r\n    assertTrue(ArrayUtils.isSameLength(emptyArrayByte, nullArrayByte));\r\n    assertTrue(ArrayUtils.isSameLength(emptyArrayByte, nullArrayDouble));\r\n    assertTrue(ArrayUtils.isSameLength(emptyArrayByte, nullArrayFloat));\r\n    assertTrue(ArrayUtils.isSameLength(emptyArrayDouble, nullArrayObject));\r\n    assertTrue(ArrayUtils.isSameLength(emptyArrayDouble, nullArrayBoolean));\r\n    assertTrue(ArrayUtils.isSameLength(emptyArrayDouble, nullArrayLong));\r\n    assertTrue(ArrayUtils.isSameLength(emptyArrayDouble, nullArrayInt));\r\n    assertTrue(ArrayUtils.isSameLength(emptyArrayDouble, nullArrayShort));\r\n    assertTrue(ArrayUtils.isSameLength(emptyArrayDouble, nullArrayChar));\r\n    assertTrue(ArrayUtils.isSameLength(emptyArrayDouble, nullArrayByte));\r\n    assertTrue(ArrayUtils.isSameLength(emptyArrayDouble, nullArrayDouble));\r\n    assertTrue(ArrayUtils.isSameLength(emptyArrayDouble, nullArrayFloat));\r\n    assertTrue(ArrayUtils.isSameLength(emptyArrayFloat, nullArrayObject));\r\n    assertTrue(ArrayUtils.isSameLength(emptyArrayFloat, nullArrayBoolean));\r\n    assertTrue(ArrayUtils.isSameLength(emptyArrayFloat, nullArrayLong));\r\n    assertTrue(ArrayUtils.isSameLength(emptyArrayFloat, nullArrayInt));\r\n    assertTrue(ArrayUtils.isSameLength(emptyArrayFloat, nullArrayShort));\r\n    assertTrue(ArrayUtils.isSameLength(emptyArrayFloat, nullArrayChar));\r\n    assertTrue(ArrayUtils.isSameLength(emptyArrayFloat, nullArrayByte));\r\n    assertTrue(ArrayUtils.isSameLength(emptyArrayFloat, nullArrayDouble));\r\n    assertTrue(ArrayUtils.isSameLength(emptyArrayFloat, nullArrayFloat));\r\n    assertTrue(ArrayUtils.isSameLength(emptyArrayObject, emptyArrayObject));\r\n    assertTrue(ArrayUtils.isSameLength(emptyArrayObject, emptyArrayBoolean));\r\n    assertTrue(ArrayUtils.isSameLength(emptyArrayObject, emptyArrayLong));\r\n    assertTrue(ArrayUtils.isSameLength(emptyArrayObject, emptyArrayInt));\r\n    assertTrue(ArrayUtils.isSameLength(emptyArrayObject, emptyArrayShort));\r\n    assertTrue(ArrayUtils.isSameLength(emptyArrayObject, emptyArrayChar));\r\n    assertTrue(ArrayUtils.isSameLength(emptyArrayObject, emptyArrayByte));\r\n    assertTrue(ArrayUtils.isSameLength(emptyArrayObject, emptyArrayDouble));\r\n    assertTrue(ArrayUtils.isSameLength(emptyArrayObject, emptyArrayFloat));\r\n    assertTrue(ArrayUtils.isSameLength(emptyArrayBoolean, emptyArrayObject));\r\n    assertTrue(ArrayUtils.isSameLength(emptyArrayBoolean, emptyArrayBoolean));\r\n    assertTrue(ArrayUtils.isSameLength(emptyArrayBoolean, emptyArrayLong));\r\n    assertTrue(ArrayUtils.isSameLength(emptyArrayBoolean, emptyArrayInt));\r\n    assertTrue(ArrayUtils.isSameLength(emptyArrayBoolean, emptyArrayShort));\r\n    assertTrue(ArrayUtils.isSameLength(emptyArrayBoolean, emptyArrayChar));\r\n    assertTrue(ArrayUtils.isSameLength(emptyArrayBoolean, emptyArrayByte));\r\n    assertTrue(ArrayUtils.isSameLength(emptyArrayBoolean, emptyArrayDouble));\r\n    assertTrue(ArrayUtils.isSameLength(emptyArrayBoolean, emptyArrayFloat));\r\n    assertTrue(ArrayUtils.isSameLength(emptyArrayLong, emptyArrayObject));\r\n    assertTrue(ArrayUtils.isSameLength(emptyArrayLong, emptyArrayBoolean));\r\n    assertTrue(ArrayUtils.isSameLength(emptyArrayLong, emptyArrayLong));\r\n    assertTrue(ArrayUtils.isSameLength(emptyArrayLong, emptyArrayInt));\r\n    assertTrue(ArrayUtils.isSameLength(emptyArrayLong, emptyArrayShort));\r\n    assertTrue(ArrayUtils.isSameLength(emptyArrayLong, emptyArrayChar));\r\n    assertTrue(ArrayUtils.isSameLength(emptyArrayLong, emptyArrayByte));\r\n    assertTrue(ArrayUtils.isSameLength(emptyArrayLong, emptyArrayDouble));\r\n    assertTrue(ArrayUtils.isSameLength(emptyArrayLong, emptyArrayFloat));\r\n    assertTrue(ArrayUtils.isSameLength(emptyArrayInt, emptyArrayObject));\r\n    assertTrue(ArrayUtils.isSameLength(emptyArrayInt, emptyArrayBoolean));\r\n    assertTrue(ArrayUtils.isSameLength(emptyArrayInt, emptyArrayLong));\r\n    assertTrue(ArrayUtils.isSameLength(emptyArrayInt, emptyArrayInt));\r\n    assertTrue(ArrayUtils.isSameLength(emptyArrayInt, emptyArrayShort));\r\n    assertTrue(ArrayUtils.isSameLength(emptyArrayInt, emptyArrayChar));\r\n    assertTrue(ArrayUtils.isSameLength(emptyArrayInt, emptyArrayByte));\r\n    assertTrue(ArrayUtils.isSameLength(emptyArrayInt, emptyArrayDouble));\r\n    assertTrue(ArrayUtils.isSameLength(emptyArrayInt, emptyArrayFloat));\r\n    assertTrue(ArrayUtils.isSameLength(emptyArrayShort, emptyArrayObject));\r\n    assertTrue(ArrayUtils.isSameLength(emptyArrayShort, emptyArrayBoolean));\r\n    assertTrue(ArrayUtils.isSameLength(emptyArrayShort, emptyArrayLong));\r\n    assertTrue(ArrayUtils.isSameLength(emptyArrayShort, emptyArrayInt));\r\n    assertTrue(ArrayUtils.isSameLength(emptyArrayShort, emptyArrayShort));\r\n    assertTrue(ArrayUtils.isSameLength(emptyArrayShort, emptyArrayChar));\r\n    assertTrue(ArrayUtils.isSameLength(emptyArrayShort, emptyArrayByte));\r\n    assertTrue(ArrayUtils.isSameLength(emptyArrayShort, emptyArrayDouble));\r\n    assertTrue(ArrayUtils.isSameLength(emptyArrayShort, emptyArrayFloat));\r\n    assertTrue(ArrayUtils.isSameLength(emptyArrayChar, emptyArrayObject));\r\n    assertTrue(ArrayUtils.isSameLength(emptyArrayChar, emptyArrayBoolean));\r\n    assertTrue(ArrayUtils.isSameLength(emptyArrayChar, emptyArrayLong));\r\n    assertTrue(ArrayUtils.isSameLength(emptyArrayChar, emptyArrayInt));\r\n    assertTrue(ArrayUtils.isSameLength(emptyArrayChar, emptyArrayShort));\r\n    assertTrue(ArrayUtils.isSameLength(emptyArrayChar, emptyArrayChar));\r\n    assertTrue(ArrayUtils.isSameLength(emptyArrayChar, emptyArrayByte));\r\n    assertTrue(ArrayUtils.isSameLength(emptyArrayChar, emptyArrayDouble));\r\n    assertTrue(ArrayUtils.isSameLength(emptyArrayChar, emptyArrayFloat));\r\n    assertTrue(ArrayUtils.isSameLength(emptyArrayByte, emptyArrayObject));\r\n    assertTrue(ArrayUtils.isSameLength(emptyArrayByte, emptyArrayBoolean));\r\n    assertTrue(ArrayUtils.isSameLength(emptyArrayByte, emptyArrayLong));\r\n    assertTrue(ArrayUtils.isSameLength(emptyArrayByte, emptyArrayInt));\r\n    assertTrue(ArrayUtils.isSameLength(emptyArrayByte, emptyArrayShort));\r\n    assertTrue(ArrayUtils.isSameLength(emptyArrayByte, emptyArrayChar));\r\n    assertTrue(ArrayUtils.isSameLength(emptyArrayByte, emptyArrayByte));\r\n    assertTrue(ArrayUtils.isSameLength(emptyArrayByte, emptyArrayDouble));\r\n    assertTrue(ArrayUtils.isSameLength(emptyArrayByte, emptyArrayFloat));\r\n    assertTrue(ArrayUtils.isSameLength(emptyArrayDouble, emptyArrayObject));\r\n    assertTrue(ArrayUtils.isSameLength(emptyArrayDouble, emptyArrayBoolean));\r\n    assertTrue(ArrayUtils.isSameLength(emptyArrayDouble, emptyArrayLong));\r\n    assertTrue(ArrayUtils.isSameLength(emptyArrayDouble, emptyArrayInt));\r\n    assertTrue(ArrayUtils.isSameLength(emptyArrayDouble, emptyArrayShort));\r\n    assertTrue(ArrayUtils.isSameLength(emptyArrayDouble, emptyArrayChar));\r\n    assertTrue(ArrayUtils.isSameLength(emptyArrayDouble, emptyArrayByte));\r\n    assertTrue(ArrayUtils.isSameLength(emptyArrayDouble, emptyArrayDouble));\r\n    assertTrue(ArrayUtils.isSameLength(emptyArrayDouble, emptyArrayFloat));\r\n    assertTrue(ArrayUtils.isSameLength(emptyArrayFloat, emptyArrayObject));\r\n    assertTrue(ArrayUtils.isSameLength(emptyArrayFloat, emptyArrayBoolean));\r\n    assertTrue(ArrayUtils.isSameLength(emptyArrayFloat, emptyArrayLong));\r\n    assertTrue(ArrayUtils.isSameLength(emptyArrayFloat, emptyArrayInt));\r\n    assertTrue(ArrayUtils.isSameLength(emptyArrayFloat, emptyArrayShort));\r\n    assertTrue(ArrayUtils.isSameLength(emptyArrayFloat, emptyArrayChar));\r\n    assertTrue(ArrayUtils.isSameLength(emptyArrayFloat, emptyArrayByte));\r\n    assertTrue(ArrayUtils.isSameLength(emptyArrayFloat, emptyArrayDouble));\r\n    assertTrue(ArrayUtils.isSameLength(emptyArrayFloat, emptyArrayFloat));\r\n    assertFalse(ArrayUtils.isSameLength(emptyArrayObject, oneArrayObject));\r\n    assertFalse(ArrayUtils.isSameLength(emptyArrayObject, oneArrayBoolean));\r\n    assertFalse(ArrayUtils.isSameLength(emptyArrayObject, oneArrayLong));\r\n    assertFalse(ArrayUtils.isSameLength(emptyArrayObject, oneArrayInt));\r\n    assertFalse(ArrayUtils.isSameLength(emptyArrayObject, oneArrayShort));\r\n    assertFalse(ArrayUtils.isSameLength(emptyArrayObject, oneArrayChar));\r\n    assertFalse(ArrayUtils.isSameLength(emptyArrayObject, oneArrayByte));\r\n    assertFalse(ArrayUtils.isSameLength(emptyArrayObject, oneArrayDouble));\r\n    assertFalse(ArrayUtils.isSameLength(emptyArrayObject, oneArrayFloat));\r\n    assertFalse(ArrayUtils.isSameLength(emptyArrayBoolean, oneArrayObject));\r\n    assertFalse(ArrayUtils.isSameLength(emptyArrayBoolean, oneArrayBoolean));\r\n    assertFalse(ArrayUtils.isSameLength(emptyArrayBoolean, oneArrayLong));\r\n    assertFalse(ArrayUtils.isSameLength(emptyArrayBoolean, oneArrayInt));\r\n    assertFalse(ArrayUtils.isSameLength(emptyArrayBoolean, oneArrayShort));\r\n    assertFalse(ArrayUtils.isSameLength(emptyArrayBoolean, oneArrayChar));\r\n    assertFalse(ArrayUtils.isSameLength(emptyArrayBoolean, oneArrayByte));\r\n    assertFalse(ArrayUtils.isSameLength(emptyArrayBoolean, oneArrayDouble));\r\n    assertFalse(ArrayUtils.isSameLength(emptyArrayBoolean, oneArrayFloat));\r\n    assertFalse(ArrayUtils.isSameLength(emptyArrayLong, oneArrayObject));\r\n    assertFalse(ArrayUtils.isSameLength(emptyArrayLong, oneArrayBoolean));\r\n    assertFalse(ArrayUtils.isSameLength(emptyArrayLong, oneArrayLong));\r\n    assertFalse(ArrayUtils.isSameLength(emptyArrayLong, oneArrayInt));\r\n    assertFalse(ArrayUtils.isSameLength(emptyArrayLong, oneArrayShort));\r\n    assertFalse(ArrayUtils.isSameLength(emptyArrayLong, oneArrayChar));\r\n    assertFalse(ArrayUtils.isSameLength(emptyArrayLong, oneArrayByte));\r\n    assertFalse(ArrayUtils.isSameLength(emptyArrayLong, oneArrayDouble));\r\n    assertFalse(ArrayUtils.isSameLength(emptyArrayLong, oneArrayFloat));\r\n    assertFalse(ArrayUtils.isSameLength(emptyArrayInt, oneArrayObject));\r\n    assertFalse(ArrayUtils.isSameLength(emptyArrayInt, oneArrayBoolean));\r\n    assertFalse(ArrayUtils.isSameLength(emptyArrayInt, oneArrayLong));\r\n    assertFalse(ArrayUtils.isSameLength(emptyArrayInt, oneArrayInt));\r\n    assertFalse(ArrayUtils.isSameLength(emptyArrayInt, oneArrayShort));\r\n    assertFalse(ArrayUtils.isSameLength(emptyArrayInt, oneArrayChar));\r\n    assertFalse(ArrayUtils.isSameLength(emptyArrayInt, oneArrayByte));\r\n    assertFalse(ArrayUtils.isSameLength(emptyArrayInt, oneArrayDouble));\r\n    assertFalse(ArrayUtils.isSameLength(emptyArrayInt, oneArrayFloat));\r\n    assertFalse(ArrayUtils.isSameLength(emptyArrayShort, oneArrayObject));\r\n    assertFalse(ArrayUtils.isSameLength(emptyArrayShort, oneArrayBoolean));\r\n    assertFalse(ArrayUtils.isSameLength(emptyArrayShort, oneArrayLong));\r\n    assertFalse(ArrayUtils.isSameLength(emptyArrayShort, oneArrayInt));\r\n    assertFalse(ArrayUtils.isSameLength(emptyArrayShort, oneArrayShort));\r\n    assertFalse(ArrayUtils.isSameLength(emptyArrayShort, oneArrayChar));\r\n    assertFalse(ArrayUtils.isSameLength(emptyArrayShort, oneArrayByte));\r\n    assertFalse(ArrayUtils.isSameLength(emptyArrayShort, oneArrayDouble));\r\n    assertFalse(ArrayUtils.isSameLength(emptyArrayShort, oneArrayFloat));\r\n    assertFalse(ArrayUtils.isSameLength(emptyArrayChar, oneArrayObject));\r\n    assertFalse(ArrayUtils.isSameLength(emptyArrayChar, oneArrayBoolean));\r\n    assertFalse(ArrayUtils.isSameLength(emptyArrayChar, oneArrayLong));\r\n    assertFalse(ArrayUtils.isSameLength(emptyArrayChar, oneArrayInt));\r\n    assertFalse(ArrayUtils.isSameLength(emptyArrayChar, oneArrayShort));\r\n    assertFalse(ArrayUtils.isSameLength(emptyArrayChar, oneArrayChar));\r\n    assertFalse(ArrayUtils.isSameLength(emptyArrayChar, oneArrayByte));\r\n    assertFalse(ArrayUtils.isSameLength(emptyArrayChar, oneArrayDouble));\r\n    assertFalse(ArrayUtils.isSameLength(emptyArrayChar, oneArrayFloat));\r\n    assertFalse(ArrayUtils.isSameLength(emptyArrayByte, oneArrayObject));\r\n    assertFalse(ArrayUtils.isSameLength(emptyArrayByte, oneArrayBoolean));\r\n    assertFalse(ArrayUtils.isSameLength(emptyArrayByte, oneArrayLong));\r\n    assertFalse(ArrayUtils.isSameLength(emptyArrayByte, oneArrayInt));\r\n    assertFalse(ArrayUtils.isSameLength(emptyArrayByte, oneArrayShort));\r\n    assertFalse(ArrayUtils.isSameLength(emptyArrayByte, oneArrayChar));\r\n    assertFalse(ArrayUtils.isSameLength(emptyArrayByte, oneArrayByte));\r\n    assertFalse(ArrayUtils.isSameLength(emptyArrayByte, oneArrayDouble));\r\n    assertFalse(ArrayUtils.isSameLength(emptyArrayByte, oneArrayFloat));\r\n    assertFalse(ArrayUtils.isSameLength(emptyArrayDouble, oneArrayObject));\r\n    assertFalse(ArrayUtils.isSameLength(emptyArrayDouble, oneArrayBoolean));\r\n    assertFalse(ArrayUtils.isSameLength(emptyArrayDouble, oneArrayLong));\r\n    assertFalse(ArrayUtils.isSameLength(emptyArrayDouble, oneArrayInt));\r\n    assertFalse(ArrayUtils.isSameLength(emptyArrayDouble, oneArrayShort));\r\n    assertFalse(ArrayUtils.isSameLength(emptyArrayDouble, oneArrayChar));\r\n    assertFalse(ArrayUtils.isSameLength(emptyArrayDouble, oneArrayByte));\r\n    assertFalse(ArrayUtils.isSameLength(emptyArrayDouble, oneArrayDouble));\r\n    assertFalse(ArrayUtils.isSameLength(emptyArrayDouble, oneArrayFloat));\r\n    assertFalse(ArrayUtils.isSameLength(emptyArrayFloat, oneArrayObject));\r\n    assertFalse(ArrayUtils.isSameLength(emptyArrayFloat, oneArrayBoolean));\r\n    assertFalse(ArrayUtils.isSameLength(emptyArrayFloat, oneArrayLong));\r\n    assertFalse(ArrayUtils.isSameLength(emptyArrayFloat, oneArrayInt));\r\n    assertFalse(ArrayUtils.isSameLength(emptyArrayFloat, oneArrayShort));\r\n    assertFalse(ArrayUtils.isSameLength(emptyArrayFloat, oneArrayChar));\r\n    assertFalse(ArrayUtils.isSameLength(emptyArrayFloat, oneArrayByte));\r\n    assertFalse(ArrayUtils.isSameLength(emptyArrayFloat, oneArrayDouble));\r\n    assertFalse(ArrayUtils.isSameLength(emptyArrayFloat, oneArrayFloat));\r\n    assertFalse(ArrayUtils.isSameLength(emptyArrayObject, twoArrayObject));\r\n    assertFalse(ArrayUtils.isSameLength(emptyArrayObject, twoArrayBoolean));\r\n    assertFalse(ArrayUtils.isSameLength(emptyArrayObject, twoArrayLong));\r\n    assertFalse(ArrayUtils.isSameLength(emptyArrayObject, twoArrayInt));\r\n    assertFalse(ArrayUtils.isSameLength(emptyArrayObject, twoArrayShort));\r\n    assertFalse(ArrayUtils.isSameLength(emptyArrayObject, twoArrayChar));\r\n    assertFalse(ArrayUtils.isSameLength(emptyArrayObject, twoArrayByte));\r\n    assertFalse(ArrayUtils.isSameLength(emptyArrayObject, twoArrayDouble));\r\n    assertFalse(ArrayUtils.isSameLength(emptyArrayObject, twoArrayFloat));\r\n    assertFalse(ArrayUtils.isSameLength(emptyArrayBoolean, twoArrayObject));\r\n    assertFalse(ArrayUtils.isSameLength(emptyArrayBoolean, twoArrayBoolean));\r\n    assertFalse(ArrayUtils.isSameLength(emptyArrayBoolean, twoArrayLong));\r\n    assertFalse(ArrayUtils.isSameLength(emptyArrayBoolean, twoArrayInt));\r\n    assertFalse(ArrayUtils.isSameLength(emptyArrayBoolean, twoArrayShort));\r\n    assertFalse(ArrayUtils.isSameLength(emptyArrayBoolean, twoArrayChar));\r\n    assertFalse(ArrayUtils.isSameLength(emptyArrayBoolean, twoArrayByte));\r\n    assertFalse(ArrayUtils.isSameLength(emptyArrayBoolean, twoArrayDouble));\r\n    assertFalse(ArrayUtils.isSameLength(emptyArrayBoolean, twoArrayFloat));\r\n    assertFalse(ArrayUtils.isSameLength(emptyArrayLong, twoArrayObject));\r\n    assertFalse(ArrayUtils.isSameLength(emptyArrayLong, twoArrayBoolean));\r\n    assertFalse(ArrayUtils.isSameLength(emptyArrayLong, twoArrayLong));\r\n    assertFalse(ArrayUtils.isSameLength(emptyArrayLong, twoArrayInt));\r\n    assertFalse(ArrayUtils.isSameLength(emptyArrayLong, twoArrayShort));\r\n    assertFalse(ArrayUtils.isSameLength(emptyArrayLong, twoArrayChar));\r\n    assertFalse(ArrayUtils.isSameLength(emptyArrayLong, twoArrayByte));\r\n    assertFalse(ArrayUtils.isSameLength(emptyArrayLong, twoArrayDouble));\r\n    assertFalse(ArrayUtils.isSameLength(emptyArrayLong, twoArrayFloat));\r\n    assertFalse(ArrayUtils.isSameLength(emptyArrayInt, twoArrayObject));\r\n    assertFalse(ArrayUtils.isSameLength(emptyArrayInt, twoArrayBoolean));\r\n    assertFalse(ArrayUtils.isSameLength(emptyArrayInt, twoArrayLong));\r\n    assertFalse(ArrayUtils.isSameLength(emptyArrayInt, twoArrayInt));\r\n    assertFalse(ArrayUtils.isSameLength(emptyArrayInt, twoArrayShort));\r\n    assertFalse(ArrayUtils.isSameLength(emptyArrayInt, twoArrayChar));\r\n    assertFalse(ArrayUtils.isSameLength(emptyArrayInt, twoArrayByte));\r\n    assertFalse(ArrayUtils.isSameLength(emptyArrayInt, twoArrayDouble));\r\n    assertFalse(ArrayUtils.isSameLength(emptyArrayInt, twoArrayFloat));\r\n    assertFalse(ArrayUtils.isSameLength(emptyArrayShort, twoArrayObject));\r\n    assertFalse(ArrayUtils.isSameLength(emptyArrayShort, twoArrayBoolean));\r\n    assertFalse(ArrayUtils.isSameLength(emptyArrayShort, twoArrayLong));\r\n    assertFalse(ArrayUtils.isSameLength(emptyArrayShort, twoArrayInt));\r\n    assertFalse(ArrayUtils.isSameLength(emptyArrayShort, twoArrayShort));\r\n    assertFalse(ArrayUtils.isSameLength(emptyArrayShort, twoArrayChar));\r\n    assertFalse(ArrayUtils.isSameLength(emptyArrayShort, twoArrayByte));\r\n    assertFalse(ArrayUtils.isSameLength(emptyArrayShort, twoArrayDouble));\r\n    assertFalse(ArrayUtils.isSameLength(emptyArrayShort, twoArrayFloat));\r\n    assertFalse(ArrayUtils.isSameLength(emptyArrayChar, twoArrayObject));\r\n    assertFalse(ArrayUtils.isSameLength(emptyArrayChar, twoArrayBoolean));\r\n    assertFalse(ArrayUtils.isSameLength(emptyArrayChar, twoArrayLong));\r\n    assertFalse(ArrayUtils.isSameLength(emptyArrayChar, twoArrayInt));\r\n    assertFalse(ArrayUtils.isSameLength(emptyArrayChar, twoArrayShort));\r\n    assertFalse(ArrayUtils.isSameLength(emptyArrayChar, twoArrayChar));\r\n    assertFalse(ArrayUtils.isSameLength(emptyArrayChar, twoArrayByte));\r\n    assertFalse(ArrayUtils.isSameLength(emptyArrayChar, twoArrayDouble));\r\n    assertFalse(ArrayUtils.isSameLength(emptyArrayChar, twoArrayFloat));\r\n    assertFalse(ArrayUtils.isSameLength(emptyArrayByte, twoArrayObject));\r\n    assertFalse(ArrayUtils.isSameLength(emptyArrayByte, twoArrayBoolean));\r\n    assertFalse(ArrayUtils.isSameLength(emptyArrayByte, twoArrayLong));\r\n    assertFalse(ArrayUtils.isSameLength(emptyArrayByte, twoArrayInt));\r\n    assertFalse(ArrayUtils.isSameLength(emptyArrayByte, twoArrayShort));\r\n    assertFalse(ArrayUtils.isSameLength(emptyArrayByte, twoArrayChar));\r\n    assertFalse(ArrayUtils.isSameLength(emptyArrayByte, twoArrayByte));\r\n    assertFalse(ArrayUtils.isSameLength(emptyArrayByte, twoArrayDouble));\r\n    assertFalse(ArrayUtils.isSameLength(emptyArrayByte, twoArrayFloat));\r\n    assertFalse(ArrayUtils.isSameLength(emptyArrayDouble, twoArrayObject));\r\n    assertFalse(ArrayUtils.isSameLength(emptyArrayDouble, twoArrayBoolean));\r\n    assertFalse(ArrayUtils.isSameLength(emptyArrayDouble, twoArrayLong));\r\n    assertFalse(ArrayUtils.isSameLength(emptyArrayDouble, twoArrayInt));\r\n    assertFalse(ArrayUtils.isSameLength(emptyArrayDouble, twoArrayShort));\r\n    assertFalse(ArrayUtils.isSameLength(emptyArrayDouble, twoArrayChar));\r\n    assertFalse(ArrayUtils.isSameLength(emptyArrayDouble, twoArrayByte));\r\n    assertFalse(ArrayUtils.isSameLength(emptyArrayDouble, twoArrayDouble));\r\n    assertFalse(ArrayUtils.isSameLength(emptyArrayDouble, twoArrayFloat));\r\n    assertFalse(ArrayUtils.isSameLength(emptyArrayFloat, twoArrayObject));\r\n    assertFalse(ArrayUtils.isSameLength(emptyArrayFloat, twoArrayBoolean));\r\n    assertFalse(ArrayUtils.isSameLength(emptyArrayFloat, twoArrayLong));\r\n    assertFalse(ArrayUtils.isSameLength(emptyArrayFloat, twoArrayInt));\r\n    assertFalse(ArrayUtils.isSameLength(emptyArrayFloat, twoArrayShort));\r\n    assertFalse(ArrayUtils.isSameLength(emptyArrayFloat, twoArrayChar));\r\n    assertFalse(ArrayUtils.isSameLength(emptyArrayFloat, twoArrayByte));\r\n    assertFalse(ArrayUtils.isSameLength(emptyArrayFloat, twoArrayDouble));\r\n    assertFalse(ArrayUtils.isSameLength(emptyArrayFloat, twoArrayFloat));\r\n    assertFalse(ArrayUtils.isSameLength(oneArrayObject, nullArrayObject));\r\n    assertFalse(ArrayUtils.isSameLength(oneArrayObject, nullArrayBoolean));\r\n    assertFalse(ArrayUtils.isSameLength(oneArrayObject, nullArrayLong));\r\n    assertFalse(ArrayUtils.isSameLength(oneArrayObject, nullArrayInt));\r\n    assertFalse(ArrayUtils.isSameLength(oneArrayObject, nullArrayShort));\r\n    assertFalse(ArrayUtils.isSameLength(oneArrayObject, nullArrayChar));\r\n    assertFalse(ArrayUtils.isSameLength(oneArrayObject, nullArrayByte));\r\n    assertFalse(ArrayUtils.isSameLength(oneArrayObject, nullArrayDouble));\r\n    assertFalse(ArrayUtils.isSameLength(oneArrayObject, nullArrayFloat));\r\n    assertFalse(ArrayUtils.isSameLength(oneArrayBoolean, nullArrayObject));\r\n    assertFalse(ArrayUtils.isSameLength(oneArrayBoolean, nullArrayBoolean));\r\n    assertFalse(ArrayUtils.isSameLength(oneArrayBoolean, nullArrayLong));\r\n    assertFalse(ArrayUtils.isSameLength(oneArrayBoolean, nullArrayInt));\r\n    assertFalse(ArrayUtils.isSameLength(oneArrayBoolean, nullArrayShort));\r\n    assertFalse(ArrayUtils.isSameLength(oneArrayBoolean, nullArrayChar));\r\n    assertFalse(ArrayUtils.isSameLength(oneArrayBoolean, nullArrayByte));\r\n    assertFalse(ArrayUtils.isSameLength(oneArrayBoolean, nullArrayDouble));\r\n    assertFalse(ArrayUtils.isSameLength(oneArrayBoolean, nullArrayFloat));\r\n    assertFalse(ArrayUtils.isSameLength(oneArrayLong, nullArrayObject));\r\n    assertFalse(ArrayUtils.isSameLength(oneArrayLong, nullArrayBoolean));\r\n    assertFalse(ArrayUtils.isSameLength(oneArrayLong, nullArrayLong));\r\n    assertFalse(ArrayUtils.isSameLength(oneArrayLong, nullArrayInt));\r\n    assertFalse(ArrayUtils.isSameLength(oneArrayLong, nullArrayShort));\r\n    assertFalse(ArrayUtils.isSameLength(oneArrayLong, nullArrayChar));\r\n    assertFalse(ArrayUtils.isSameLength(oneArrayLong, nullArrayByte));\r\n    assertFalse(ArrayUtils.isSameLength(oneArrayLong, nullArrayDouble));\r\n    assertFalse(ArrayUtils.isSameLength(oneArrayLong, nullArrayFloat));\r\n    assertFalse(ArrayUtils.isSameLength(oneArrayInt, nullArrayObject));\r\n    assertFalse(ArrayUtils.isSameLength(oneArrayInt, nullArrayBoolean));\r\n    assertFalse(ArrayUtils.isSameLength(oneArrayInt, nullArrayLong));\r\n    assertFalse(ArrayUtils.isSameLength(oneArrayInt, nullArrayInt));\r\n    assertFalse(ArrayUtils.isSameLength(oneArrayInt, nullArrayShort));\r\n    assertFalse(ArrayUtils.isSameLength(oneArrayInt, nullArrayChar));\r\n    assertFalse(ArrayUtils.isSameLength(oneArrayInt, nullArrayByte));\r\n    assertFalse(ArrayUtils.isSameLength(oneArrayInt, nullArrayDouble));\r\n    assertFalse(ArrayUtils.isSameLength(oneArrayInt, nullArrayFloat));\r\n    assertFalse(ArrayUtils.isSameLength(oneArrayShort, nullArrayObject));\r\n    assertFalse(ArrayUtils.isSameLength(oneArrayShort, nullArrayBoolean));\r\n    assertFalse(ArrayUtils.isSameLength(oneArrayShort, nullArrayLong));\r\n    assertFalse(ArrayUtils.isSameLength(oneArrayShort, nullArrayInt));\r\n    assertFalse(ArrayUtils.isSameLength(oneArrayShort, nullArrayShort));\r\n    assertFalse(ArrayUtils.isSameLength(oneArrayShort, nullArrayChar));\r\n    assertFalse(ArrayUtils.isSameLength(oneArrayShort, nullArrayByte));\r\n    assertFalse(ArrayUtils.isSameLength(oneArrayShort, nullArrayDouble));\r\n    assertFalse(ArrayUtils.isSameLength(oneArrayShort, nullArrayFloat));\r\n    assertFalse(ArrayUtils.isSameLength(oneArrayChar, nullArrayObject));\r\n    assertFalse(ArrayUtils.isSameLength(oneArrayChar, nullArrayBoolean));\r\n    assertFalse(ArrayUtils.isSameLength(oneArrayChar, nullArrayLong));\r\n    assertFalse(ArrayUtils.isSameLength(oneArrayChar, nullArrayInt));\r\n    assertFalse(ArrayUtils.isSameLength(oneArrayChar, nullArrayShort));\r\n    assertFalse(ArrayUtils.isSameLength(oneArrayChar, nullArrayChar));\r\n    assertFalse(ArrayUtils.isSameLength(oneArrayChar, nullArrayByte));\r\n    assertFalse(ArrayUtils.isSameLength(oneArrayChar, nullArrayDouble));\r\n    assertFalse(ArrayUtils.isSameLength(oneArrayChar, nullArrayFloat));\r\n    assertFalse(ArrayUtils.isSameLength(oneArrayByte, nullArrayObject));\r\n    assertFalse(ArrayUtils.isSameLength(oneArrayByte, nullArrayBoolean));\r\n    assertFalse(ArrayUtils.isSameLength(oneArrayByte, nullArrayLong));\r\n    assertFalse(ArrayUtils.isSameLength(oneArrayByte, nullArrayInt));\r\n    assertFalse(ArrayUtils.isSameLength(oneArrayByte, nullArrayShort));\r\n    assertFalse(ArrayUtils.isSameLength(oneArrayByte, nullArrayChar));\r\n    assertFalse(ArrayUtils.isSameLength(oneArrayByte, nullArrayByte));\r\n    assertFalse(ArrayUtils.isSameLength(oneArrayByte, nullArrayDouble));\r\n    assertFalse(ArrayUtils.isSameLength(oneArrayByte, nullArrayFloat));\r\n    assertFalse(ArrayUtils.isSameLength(oneArrayDouble, nullArrayObject));\r\n    assertFalse(ArrayUtils.isSameLength(oneArrayDouble, nullArrayBoolean));\r\n    assertFalse(ArrayUtils.isSameLength(oneArrayDouble, nullArrayLong));\r\n    assertFalse(ArrayUtils.isSameLength(oneArrayDouble, nullArrayInt));\r\n    assertFalse(ArrayUtils.isSameLength(oneArrayDouble, nullArrayShort));\r\n    assertFalse(ArrayUtils.isSameLength(oneArrayDouble, nullArrayChar));\r\n    assertFalse(ArrayUtils.isSameLength(oneArrayDouble, nullArrayByte));\r\n    assertFalse(ArrayUtils.isSameLength(oneArrayDouble, nullArrayDouble));\r\n    assertFalse(ArrayUtils.isSameLength(oneArrayDouble, nullArrayFloat));\r\n    assertFalse(ArrayUtils.isSameLength(oneArrayFloat, nullArrayObject));\r\n    assertFalse(ArrayUtils.isSameLength(oneArrayFloat, nullArrayBoolean));\r\n    assertFalse(ArrayUtils.isSameLength(oneArrayFloat, nullArrayLong));\r\n    assertFalse(ArrayUtils.isSameLength(oneArrayFloat, nullArrayInt));\r\n    assertFalse(ArrayUtils.isSameLength(oneArrayFloat, nullArrayShort));\r\n    assertFalse(ArrayUtils.isSameLength(oneArrayFloat, nullArrayChar));\r\n    assertFalse(ArrayUtils.isSameLength(oneArrayFloat, nullArrayByte));\r\n    assertFalse(ArrayUtils.isSameLength(oneArrayFloat, nullArrayDouble));\r\n    assertFalse(ArrayUtils.isSameLength(oneArrayFloat, nullArrayFloat));\r\n    assertFalse(ArrayUtils.isSameLength(oneArrayObject, emptyArrayObject));\r\n    assertFalse(ArrayUtils.isSameLength(oneArrayObject, emptyArrayBoolean));\r\n    assertFalse(ArrayUtils.isSameLength(oneArrayObject, emptyArrayLong));\r\n    assertFalse(ArrayUtils.isSameLength(oneArrayObject, emptyArrayInt));\r\n    assertFalse(ArrayUtils.isSameLength(oneArrayObject, emptyArrayShort));\r\n    assertFalse(ArrayUtils.isSameLength(oneArrayObject, emptyArrayChar));\r\n    assertFalse(ArrayUtils.isSameLength(oneArrayObject, emptyArrayByte));\r\n    assertFalse(ArrayUtils.isSameLength(oneArrayObject, emptyArrayDouble));\r\n    assertFalse(ArrayUtils.isSameLength(oneArrayObject, emptyArrayFloat));\r\n    assertFalse(ArrayUtils.isSameLength(oneArrayBoolean, emptyArrayObject));\r\n    assertFalse(ArrayUtils.isSameLength(oneArrayBoolean, emptyArrayBoolean));\r\n    assertFalse(ArrayUtils.isSameLength(oneArrayBoolean, emptyArrayLong));\r\n    assertFalse(ArrayUtils.isSameLength(oneArrayBoolean, emptyArrayInt));\r\n    assertFalse(ArrayUtils.isSameLength(oneArrayBoolean, emptyArrayShort));\r\n    assertFalse(ArrayUtils.isSameLength(oneArrayBoolean, emptyArrayChar));\r\n    assertFalse(ArrayUtils.isSameLength(oneArrayBoolean, emptyArrayByte));\r\n    assertFalse(ArrayUtils.isSameLength(oneArrayBoolean, emptyArrayDouble));\r\n    assertFalse(ArrayUtils.isSameLength(oneArrayBoolean, emptyArrayFloat));\r\n    assertFalse(ArrayUtils.isSameLength(oneArrayLong, emptyArrayObject));\r\n    assertFalse(ArrayUtils.isSameLength(oneArrayLong, emptyArrayBoolean));\r\n    assertFalse(ArrayUtils.isSameLength(oneArrayLong, emptyArrayLong));\r\n    assertFalse(ArrayUtils.isSameLength(oneArrayLong, emptyArrayInt));\r\n    assertFalse(ArrayUtils.isSameLength(oneArrayLong, emptyArrayShort));\r\n    assertFalse(ArrayUtils.isSameLength(oneArrayLong, emptyArrayChar));\r\n    assertFalse(ArrayUtils.isSameLength(oneArrayLong, emptyArrayByte));\r\n    assertFalse(ArrayUtils.isSameLength(oneArrayLong, emptyArrayDouble));\r\n    assertFalse(ArrayUtils.isSameLength(oneArrayLong, emptyArrayFloat));\r\n    assertFalse(ArrayUtils.isSameLength(oneArrayInt, emptyArrayObject));\r\n    assertFalse(ArrayUtils.isSameLength(oneArrayInt, emptyArrayBoolean));\r\n    assertFalse(ArrayUtils.isSameLength(oneArrayInt, emptyArrayLong));\r\n    assertFalse(ArrayUtils.isSameLength(oneArrayInt, emptyArrayInt));\r\n    assertFalse(ArrayUtils.isSameLength(oneArrayInt, emptyArrayShort));\r\n    assertFalse(ArrayUtils.isSameLength(oneArrayInt, emptyArrayChar));\r\n    assertFalse(ArrayUtils.isSameLength(oneArrayInt, emptyArrayByte));\r\n    assertFalse(ArrayUtils.isSameLength(oneArrayInt, emptyArrayDouble));\r\n    assertFalse(ArrayUtils.isSameLength(oneArrayInt, emptyArrayFloat));\r\n    assertFalse(ArrayUtils.isSameLength(oneArrayShort, emptyArrayObject));\r\n    assertFalse(ArrayUtils.isSameLength(oneArrayShort, emptyArrayBoolean));\r\n    assertFalse(ArrayUtils.isSameLength(oneArrayShort, emptyArrayLong));\r\n    assertFalse(ArrayUtils.isSameLength(oneArrayShort, emptyArrayInt));\r\n    assertFalse(ArrayUtils.isSameLength(oneArrayShort, emptyArrayShort));\r\n    assertFalse(ArrayUtils.isSameLength(oneArrayShort, emptyArrayChar));\r\n    assertFalse(ArrayUtils.isSameLength(oneArrayShort, emptyArrayByte));\r\n    assertFalse(ArrayUtils.isSameLength(oneArrayShort, emptyArrayDouble));\r\n    assertFalse(ArrayUtils.isSameLength(oneArrayShort, emptyArrayFloat));\r\n    assertFalse(ArrayUtils.isSameLength(oneArrayChar, emptyArrayObject));\r\n    assertFalse(ArrayUtils.isSameLength(oneArrayChar, emptyArrayBoolean));\r\n    assertFalse(ArrayUtils.isSameLength(oneArrayChar, emptyArrayLong));\r\n    assertFalse(ArrayUtils.isSameLength(oneArrayChar, emptyArrayInt));\r\n    assertFalse(ArrayUtils.isSameLength(oneArrayChar, emptyArrayShort));\r\n    assertFalse(ArrayUtils.isSameLength(oneArrayChar, emptyArrayChar));\r\n    assertFalse(ArrayUtils.isSameLength(oneArrayChar, emptyArrayByte));\r\n    assertFalse(ArrayUtils.isSameLength(oneArrayChar, emptyArrayDouble));\r\n    assertFalse(ArrayUtils.isSameLength(oneArrayChar, emptyArrayFloat));\r\n    assertFalse(ArrayUtils.isSameLength(oneArrayByte, emptyArrayObject));\r\n    assertFalse(ArrayUtils.isSameLength(oneArrayByte, emptyArrayBoolean));\r\n    assertFalse(ArrayUtils.isSameLength(oneArrayByte, emptyArrayLong));\r\n    assertFalse(ArrayUtils.isSameLength(oneArrayByte, emptyArrayInt));\r\n    assertFalse(ArrayUtils.isSameLength(oneArrayByte, emptyArrayShort));\r\n    assertFalse(ArrayUtils.isSameLength(oneArrayByte, emptyArrayChar));\r\n    assertFalse(ArrayUtils.isSameLength(oneArrayByte, emptyArrayByte));\r\n    assertFalse(ArrayUtils.isSameLength(oneArrayByte, emptyArrayDouble));\r\n    assertFalse(ArrayUtils.isSameLength(oneArrayByte, emptyArrayFloat));\r\n    assertFalse(ArrayUtils.isSameLength(oneArrayDouble, emptyArrayObject));\r\n    assertFalse(ArrayUtils.isSameLength(oneArrayDouble, emptyArrayBoolean));\r\n    assertFalse(ArrayUtils.isSameLength(oneArrayDouble, emptyArrayLong));\r\n    assertFalse(ArrayUtils.isSameLength(oneArrayDouble, emptyArrayInt));\r\n    assertFalse(ArrayUtils.isSameLength(oneArrayDouble, emptyArrayShort));\r\n    assertFalse(ArrayUtils.isSameLength(oneArrayDouble, emptyArrayChar));\r\n    assertFalse(ArrayUtils.isSameLength(oneArrayDouble, emptyArrayByte));\r\n    assertFalse(ArrayUtils.isSameLength(oneArrayDouble, emptyArrayDouble));\r\n    assertFalse(ArrayUtils.isSameLength(oneArrayDouble, emptyArrayFloat));\r\n    assertFalse(ArrayUtils.isSameLength(oneArrayFloat, emptyArrayObject));\r\n    assertFalse(ArrayUtils.isSameLength(oneArrayFloat, emptyArrayBoolean));\r\n    assertFalse(ArrayUtils.isSameLength(oneArrayFloat, emptyArrayLong));\r\n    assertFalse(ArrayUtils.isSameLength(oneArrayFloat, emptyArrayInt));\r\n    assertFalse(ArrayUtils.isSameLength(oneArrayFloat, emptyArrayShort));\r\n    assertFalse(ArrayUtils.isSameLength(oneArrayFloat, emptyArrayChar));\r\n    assertFalse(ArrayUtils.isSameLength(oneArrayFloat, emptyArrayByte));\r\n    assertFalse(ArrayUtils.isSameLength(oneArrayFloat, emptyArrayDouble));\r\n    assertFalse(ArrayUtils.isSameLength(oneArrayFloat, emptyArrayFloat));\r\n    assertTrue(ArrayUtils.isSameLength(oneArrayObject, oneArrayObject));\r\n    assertTrue(ArrayUtils.isSameLength(oneArrayObject, oneArrayBoolean));\r\n    assertTrue(ArrayUtils.isSameLength(oneArrayObject, oneArrayLong));\r\n    assertTrue(ArrayUtils.isSameLength(oneArrayObject, oneArrayInt));\r\n    assertTrue(ArrayUtils.isSameLength(oneArrayObject, oneArrayShort));\r\n    assertTrue(ArrayUtils.isSameLength(oneArrayObject, oneArrayChar));\r\n    assertTrue(ArrayUtils.isSameLength(oneArrayObject, oneArrayByte));\r\n    assertTrue(ArrayUtils.isSameLength(oneArrayObject, oneArrayDouble));\r\n    assertTrue(ArrayUtils.isSameLength(oneArrayObject, oneArrayFloat));\r\n    assertTrue(ArrayUtils.isSameLength(oneArrayBoolean, oneArrayObject));\r\n    assertTrue(ArrayUtils.isSameLength(oneArrayBoolean, oneArrayBoolean));\r\n    assertTrue(ArrayUtils.isSameLength(oneArrayBoolean, oneArrayLong));\r\n    assertTrue(ArrayUtils.isSameLength(oneArrayBoolean, oneArrayInt));\r\n    assertTrue(ArrayUtils.isSameLength(oneArrayBoolean, oneArrayShort));\r\n    assertTrue(ArrayUtils.isSameLength(oneArrayBoolean, oneArrayChar));\r\n    assertTrue(ArrayUtils.isSameLength(oneArrayBoolean, oneArrayByte));\r\n    assertTrue(ArrayUtils.isSameLength(oneArrayBoolean, oneArrayDouble));\r\n    assertTrue(ArrayUtils.isSameLength(oneArrayBoolean, oneArrayFloat));\r\n    assertTrue(ArrayUtils.isSameLength(oneArrayLong, oneArrayObject));\r\n    assertTrue(ArrayUtils.isSameLength(oneArrayLong, oneArrayBoolean));\r\n    assertTrue(ArrayUtils.isSameLength(oneArrayLong, oneArrayLong));\r\n    assertTrue(ArrayUtils.isSameLength(oneArrayLong, oneArrayInt));\r\n    assertTrue(ArrayUtils.isSameLength(oneArrayLong, oneArrayShort));\r\n    assertTrue(ArrayUtils.isSameLength(oneArrayLong, oneArrayChar));\r\n    assertTrue(ArrayUtils.isSameLength(oneArrayLong, oneArrayByte));\r\n    assertTrue(ArrayUtils.isSameLength(oneArrayLong, oneArrayDouble));\r\n    assertTrue(ArrayUtils.isSameLength(oneArrayLong, oneArrayFloat));\r\n    assertTrue(ArrayUtils.isSameLength(oneArrayInt, oneArrayObject));\r\n    assertTrue(ArrayUtils.isSameLength(oneArrayInt, oneArrayBoolean));\r\n    assertTrue(ArrayUtils.isSameLength(oneArrayInt, oneArrayLong));\r\n    assertTrue(ArrayUtils.isSameLength(oneArrayInt, oneArrayInt));\r\n    assertTrue(ArrayUtils.isSameLength(oneArrayInt, oneArrayShort));\r\n    assertTrue(ArrayUtils.isSameLength(oneArrayInt, oneArrayChar));\r\n    assertTrue(ArrayUtils.isSameLength(oneArrayInt, oneArrayByte));\r\n    assertTrue(ArrayUtils.isSameLength(oneArrayInt, oneArrayDouble));\r\n    assertTrue(ArrayUtils.isSameLength(oneArrayInt, oneArrayFloat));\r\n    assertTrue(ArrayUtils.isSameLength(oneArrayShort, oneArrayObject));\r\n    assertTrue(ArrayUtils.isSameLength(oneArrayShort, oneArrayBoolean));\r\n    assertTrue(ArrayUtils.isSameLength(oneArrayShort, oneArrayLong));\r\n    assertTrue(ArrayUtils.isSameLength(oneArrayShort, oneArrayInt));\r\n    assertTrue(ArrayUtils.isSameLength(oneArrayShort, oneArrayShort));\r\n    assertTrue(ArrayUtils.isSameLength(oneArrayShort, oneArrayChar));\r\n    assertTrue(ArrayUtils.isSameLength(oneArrayShort, oneArrayByte));\r\n    assertTrue(ArrayUtils.isSameLength(oneArrayShort, oneArrayDouble));\r\n    assertTrue(ArrayUtils.isSameLength(oneArrayShort, oneArrayFloat));\r\n    assertTrue(ArrayUtils.isSameLength(oneArrayChar, oneArrayObject));\r\n    assertTrue(ArrayUtils.isSameLength(oneArrayChar, oneArrayBoolean));\r\n    assertTrue(ArrayUtils.isSameLength(oneArrayChar, oneArrayLong));\r\n    assertTrue(ArrayUtils.isSameLength(oneArrayChar, oneArrayInt));\r\n    assertTrue(ArrayUtils.isSameLength(oneArrayChar, oneArrayShort));\r\n    assertTrue(ArrayUtils.isSameLength(oneArrayChar, oneArrayChar));\r\n    assertTrue(ArrayUtils.isSameLength(oneArrayChar, oneArrayByte));\r\n    assertTrue(ArrayUtils.isSameLength(oneArrayChar, oneArrayDouble));\r\n    assertTrue(ArrayUtils.isSameLength(oneArrayChar, oneArrayFloat));\r\n    assertTrue(ArrayUtils.isSameLength(oneArrayByte, oneArrayObject));\r\n    assertTrue(ArrayUtils.isSameLength(oneArrayByte, oneArrayBoolean));\r\n    assertTrue(ArrayUtils.isSameLength(oneArrayByte, oneArrayLong));\r\n    assertTrue(ArrayUtils.isSameLength(oneArrayByte, oneArrayInt));\r\n    assertTrue(ArrayUtils.isSameLength(oneArrayByte, oneArrayShort));\r\n    assertTrue(ArrayUtils.isSameLength(oneArrayByte, oneArrayChar));\r\n    assertTrue(ArrayUtils.isSameLength(oneArrayByte, oneArrayByte));\r\n    assertTrue(ArrayUtils.isSameLength(oneArrayByte, oneArrayDouble));\r\n    assertTrue(ArrayUtils.isSameLength(oneArrayByte, oneArrayFloat));\r\n    assertTrue(ArrayUtils.isSameLength(oneArrayDouble, oneArrayObject));\r\n    assertTrue(ArrayUtils.isSameLength(oneArrayDouble, oneArrayBoolean));\r\n    assertTrue(ArrayUtils.isSameLength(oneArrayDouble, oneArrayLong));\r\n    assertTrue(ArrayUtils.isSameLength(oneArrayDouble, oneArrayInt));\r\n    assertTrue(ArrayUtils.isSameLength(oneArrayDouble, oneArrayShort));\r\n    assertTrue(ArrayUtils.isSameLength(oneArrayDouble, oneArrayChar));\r\n    assertTrue(ArrayUtils.isSameLength(oneArrayDouble, oneArrayByte));\r\n    assertTrue(ArrayUtils.isSameLength(oneArrayDouble, oneArrayDouble));\r\n    assertTrue(ArrayUtils.isSameLength(oneArrayDouble, oneArrayFloat));\r\n    assertTrue(ArrayUtils.isSameLength(oneArrayFloat, oneArrayObject));\r\n    assertTrue(ArrayUtils.isSameLength(oneArrayFloat, oneArrayBoolean));\r\n    assertTrue(ArrayUtils.isSameLength(oneArrayFloat, oneArrayLong));\r\n    assertTrue(ArrayUtils.isSameLength(oneArrayFloat, oneArrayInt));\r\n    assertTrue(ArrayUtils.isSameLength(oneArrayFloat, oneArrayShort));\r\n    assertTrue(ArrayUtils.isSameLength(oneArrayFloat, oneArrayChar));\r\n    assertTrue(ArrayUtils.isSameLength(oneArrayFloat, oneArrayByte));\r\n    assertTrue(ArrayUtils.isSameLength(oneArrayFloat, oneArrayDouble));\r\n    assertTrue(ArrayUtils.isSameLength(oneArrayFloat, oneArrayFloat));\r\n    assertFalse(ArrayUtils.isSameLength(oneArrayObject, twoArrayObject));\r\n    assertFalse(ArrayUtils.isSameLength(oneArrayObject, twoArrayBoolean));\r\n    assertFalse(ArrayUtils.isSameLength(oneArrayObject, twoArrayLong));\r\n    assertFalse(ArrayUtils.isSameLength(oneArrayObject, twoArrayInt));\r\n    assertFalse(ArrayUtils.isSameLength(oneArrayObject, twoArrayShort));\r\n    assertFalse(ArrayUtils.isSameLength(oneArrayObject, twoArrayChar));\r\n    assertFalse(ArrayUtils.isSameLength(oneArrayObject, twoArrayByte));\r\n    assertFalse(ArrayUtils.isSameLength(oneArrayObject, twoArrayDouble));\r\n    assertFalse(ArrayUtils.isSameLength(oneArrayObject, twoArrayFloat));\r\n    assertFalse(ArrayUtils.isSameLength(oneArrayBoolean, twoArrayObject));\r\n    assertFalse(ArrayUtils.isSameLength(oneArrayBoolean, twoArrayBoolean));\r\n    assertFalse(ArrayUtils.isSameLength(oneArrayBoolean, twoArrayLong));\r\n    assertFalse(ArrayUtils.isSameLength(oneArrayBoolean, twoArrayInt));\r\n    assertFalse(ArrayUtils.isSameLength(oneArrayBoolean, twoArrayShort));\r\n    assertFalse(ArrayUtils.isSameLength(oneArrayBoolean, twoArrayChar));\r\n    assertFalse(ArrayUtils.isSameLength(oneArrayBoolean, twoArrayByte));\r\n    assertFalse(ArrayUtils.isSameLength(oneArrayBoolean, twoArrayDouble));\r\n    assertFalse(ArrayUtils.isSameLength(oneArrayBoolean, twoArrayFloat));\r\n    assertFalse(ArrayUtils.isSameLength(oneArrayLong, twoArrayObject));\r\n    assertFalse(ArrayUtils.isSameLength(oneArrayLong, twoArrayBoolean));\r\n    assertFalse(ArrayUtils.isSameLength(oneArrayLong, twoArrayLong));\r\n    assertFalse(ArrayUtils.isSameLength(oneArrayLong, twoArrayInt));\r\n    assertFalse(ArrayUtils.isSameLength(oneArrayLong, twoArrayShort));\r\n    assertFalse(ArrayUtils.isSameLength(oneArrayLong, twoArrayChar));\r\n    assertFalse(ArrayUtils.isSameLength(oneArrayLong, twoArrayByte));\r\n    assertFalse(ArrayUtils.isSameLength(oneArrayLong, twoArrayDouble));\r\n    assertFalse(ArrayUtils.isSameLength(oneArrayLong, twoArrayFloat));\r\n    assertFalse(ArrayUtils.isSameLength(oneArrayInt, twoArrayObject));\r\n    assertFalse(ArrayUtils.isSameLength(oneArrayInt, twoArrayBoolean));\r\n    assertFalse(ArrayUtils.isSameLength(oneArrayInt, twoArrayLong));\r\n    assertFalse(ArrayUtils.isSameLength(oneArrayInt, twoArrayInt));\r\n    assertFalse(ArrayUtils.isSameLength(oneArrayInt, twoArrayShort));\r\n    assertFalse(ArrayUtils.isSameLength(oneArrayInt, twoArrayChar));\r\n    assertFalse(ArrayUtils.isSameLength(oneArrayInt, twoArrayByte));\r\n    assertFalse(ArrayUtils.isSameLength(oneArrayInt, twoArrayDouble));\r\n    assertFalse(ArrayUtils.isSameLength(oneArrayInt, twoArrayFloat));\r\n    assertFalse(ArrayUtils.isSameLength(oneArrayShort, twoArrayObject));\r\n    assertFalse(ArrayUtils.isSameLength(oneArrayShort, twoArrayBoolean));\r\n    assertFalse(ArrayUtils.isSameLength(oneArrayShort, twoArrayLong));\r\n    assertFalse(ArrayUtils.isSameLength(oneArrayShort, twoArrayInt));\r\n    assertFalse(ArrayUtils.isSameLength(oneArrayShort, twoArrayShort));\r\n    assertFalse(ArrayUtils.isSameLength(oneArrayShort, twoArrayChar));\r\n    assertFalse(ArrayUtils.isSameLength(oneArrayShort, twoArrayByte));\r\n    assertFalse(ArrayUtils.isSameLength(oneArrayShort, twoArrayDouble));\r\n    assertFalse(ArrayUtils.isSameLength(oneArrayShort, twoArrayFloat));\r\n    assertFalse(ArrayUtils.isSameLength(oneArrayChar, twoArrayObject));\r\n    assertFalse(ArrayUtils.isSameLength(oneArrayChar, twoArrayBoolean));\r\n    assertFalse(ArrayUtils.isSameLength(oneArrayChar, twoArrayLong));\r\n    assertFalse(ArrayUtils.isSameLength(oneArrayChar, twoArrayInt));\r\n    assertFalse(ArrayUtils.isSameLength(oneArrayChar, twoArrayShort));\r\n    assertFalse(ArrayUtils.isSameLength(oneArrayChar, twoArrayChar));\r\n    assertFalse(ArrayUtils.isSameLength(oneArrayChar, twoArrayByte));\r\n    assertFalse(ArrayUtils.isSameLength(oneArrayChar, twoArrayDouble));\r\n    assertFalse(ArrayUtils.isSameLength(oneArrayChar, twoArrayFloat));\r\n    assertFalse(ArrayUtils.isSameLength(oneArrayByte, twoArrayObject));\r\n    assertFalse(ArrayUtils.isSameLength(oneArrayByte, twoArrayBoolean));\r\n    assertFalse(ArrayUtils.isSameLength(oneArrayByte, twoArrayLong));\r\n    assertFalse(ArrayUtils.isSameLength(oneArrayByte, twoArrayInt));\r\n    assertFalse(ArrayUtils.isSameLength(oneArrayByte, twoArrayShort));\r\n    assertFalse(ArrayUtils.isSameLength(oneArrayByte, twoArrayChar));\r\n    assertFalse(ArrayUtils.isSameLength(oneArrayByte, twoArrayByte));\r\n    assertFalse(ArrayUtils.isSameLength(oneArrayByte, twoArrayDouble));\r\n    assertFalse(ArrayUtils.isSameLength(oneArrayByte, twoArrayFloat));\r\n    assertFalse(ArrayUtils.isSameLength(oneArrayDouble, twoArrayObject));\r\n    assertFalse(ArrayUtils.isSameLength(oneArrayDouble, twoArrayBoolean));\r\n    assertFalse(ArrayUtils.isSameLength(oneArrayDouble, twoArrayLong));\r\n    assertFalse(ArrayUtils.isSameLength(oneArrayDouble, twoArrayInt));\r\n    assertFalse(ArrayUtils.isSameLength(oneArrayDouble, twoArrayShort));\r\n    assertFalse(ArrayUtils.isSameLength(oneArrayDouble, twoArrayChar));\r\n    assertFalse(ArrayUtils.isSameLength(oneArrayDouble, twoArrayByte));\r\n    assertFalse(ArrayUtils.isSameLength(oneArrayDouble, twoArrayDouble));\r\n    assertFalse(ArrayUtils.isSameLength(oneArrayDouble, twoArrayFloat));\r\n    assertFalse(ArrayUtils.isSameLength(oneArrayFloat, twoArrayObject));\r\n    assertFalse(ArrayUtils.isSameLength(oneArrayFloat, twoArrayBoolean));\r\n    assertFalse(ArrayUtils.isSameLength(oneArrayFloat, twoArrayLong));\r\n    assertFalse(ArrayUtils.isSameLength(oneArrayFloat, twoArrayInt));\r\n    assertFalse(ArrayUtils.isSameLength(oneArrayFloat, twoArrayShort));\r\n    assertFalse(ArrayUtils.isSameLength(oneArrayFloat, twoArrayChar));\r\n    assertFalse(ArrayUtils.isSameLength(oneArrayFloat, twoArrayByte));\r\n    assertFalse(ArrayUtils.isSameLength(oneArrayFloat, twoArrayDouble));\r\n    assertFalse(ArrayUtils.isSameLength(oneArrayFloat, twoArrayFloat));\r\n    assertFalse(ArrayUtils.isSameLength(twoArrayObject, nullArrayObject));\r\n    assertFalse(ArrayUtils.isSameLength(twoArrayObject, nullArrayBoolean));\r\n    assertFalse(ArrayUtils.isSameLength(twoArrayObject, nullArrayLong));\r\n    assertFalse(ArrayUtils.isSameLength(twoArrayObject, nullArrayInt));\r\n    assertFalse(ArrayUtils.isSameLength(twoArrayObject, nullArrayShort));\r\n    assertFalse(ArrayUtils.isSameLength(twoArrayObject, nullArrayChar));\r\n    assertFalse(ArrayUtils.isSameLength(twoArrayObject, nullArrayByte));\r\n    assertFalse(ArrayUtils.isSameLength(twoArrayObject, nullArrayDouble));\r\n    assertFalse(ArrayUtils.isSameLength(twoArrayObject, nullArrayFloat));\r\n    assertFalse(ArrayUtils.isSameLength(twoArrayBoolean, nullArrayObject));\r\n    assertFalse(ArrayUtils.isSameLength(twoArrayBoolean, nullArrayBoolean));\r\n    assertFalse(ArrayUtils.isSameLength(twoArrayBoolean, nullArrayLong));\r\n    assertFalse(ArrayUtils.isSameLength(twoArrayBoolean, nullArrayInt));\r\n    assertFalse(ArrayUtils.isSameLength(twoArrayBoolean, nullArrayShort));\r\n    assertFalse(ArrayUtils.isSameLength(twoArrayBoolean, nullArrayChar));\r\n    assertFalse(ArrayUtils.isSameLength(twoArrayBoolean, nullArrayByte));\r\n    assertFalse(ArrayUtils.isSameLength(twoArrayBoolean, nullArrayDouble));\r\n    assertFalse(ArrayUtils.isSameLength(twoArrayBoolean, nullArrayFloat));\r\n    assertFalse(ArrayUtils.isSameLength(twoArrayLong, nullArrayObject));\r\n    assertFalse(ArrayUtils.isSameLength(twoArrayLong, nullArrayBoolean));\r\n    assertFalse(ArrayUtils.isSameLength(twoArrayLong, nullArrayLong));\r\n    assertFalse(ArrayUtils.isSameLength(twoArrayLong, nullArrayInt));\r\n    assertFalse(ArrayUtils.isSameLength(twoArrayLong, nullArrayShort));\r\n    assertFalse(ArrayUtils.isSameLength(twoArrayLong, nullArrayChar));\r\n    assertFalse(ArrayUtils.isSameLength(twoArrayLong, nullArrayByte));\r\n    assertFalse(ArrayUtils.isSameLength(twoArrayLong, nullArrayDouble));\r\n    assertFalse(ArrayUtils.isSameLength(twoArrayLong, nullArrayFloat));\r\n    assertFalse(ArrayUtils.isSameLength(twoArrayInt, nullArrayObject));\r\n    assertFalse(ArrayUtils.isSameLength(twoArrayInt, nullArrayBoolean));\r\n    assertFalse(ArrayUtils.isSameLength(twoArrayInt, nullArrayLong));\r\n    assertFalse(ArrayUtils.isSameLength(twoArrayInt, nullArrayInt));\r\n    assertFalse(ArrayUtils.isSameLength(twoArrayInt, nullArrayShort));\r\n    assertFalse(ArrayUtils.isSameLength(twoArrayInt, nullArrayChar));\r\n    assertFalse(ArrayUtils.isSameLength(twoArrayInt, nullArrayByte));\r\n    assertFalse(ArrayUtils.isSameLength(twoArrayInt, nullArrayDouble));\r\n    assertFalse(ArrayUtils.isSameLength(twoArrayInt, nullArrayFloat));\r\n    assertFalse(ArrayUtils.isSameLength(twoArrayShort, nullArrayObject));\r\n    assertFalse(ArrayUtils.isSameLength(twoArrayShort, nullArrayBoolean));\r\n    assertFalse(ArrayUtils.isSameLength(twoArrayShort, nullArrayLong));\r\n    assertFalse(ArrayUtils.isSameLength(twoArrayShort, nullArrayInt));\r\n    assertFalse(ArrayUtils.isSameLength(twoArrayShort, nullArrayShort));\r\n    assertFalse(ArrayUtils.isSameLength(twoArrayShort, nullArrayChar));\r\n    assertFalse(ArrayUtils.isSameLength(twoArrayShort, nullArrayByte));\r\n    assertFalse(ArrayUtils.isSameLength(twoArrayShort, nullArrayDouble));\r\n    assertFalse(ArrayUtils.isSameLength(twoArrayShort, nullArrayFloat));\r\n    assertFalse(ArrayUtils.isSameLength(twoArrayChar, nullArrayObject));\r\n    assertFalse(ArrayUtils.isSameLength(twoArrayChar, nullArrayBoolean));\r\n    assertFalse(ArrayUtils.isSameLength(twoArrayChar, nullArrayLong));\r\n    assertFalse(ArrayUtils.isSameLength(twoArrayChar, nullArrayInt));\r\n    assertFalse(ArrayUtils.isSameLength(twoArrayChar, nullArrayShort));\r\n    assertFalse(ArrayUtils.isSameLength(twoArrayChar, nullArrayChar));\r\n    assertFalse(ArrayUtils.isSameLength(twoArrayChar, nullArrayByte));\r\n    assertFalse(ArrayUtils.isSameLength(twoArrayChar, nullArrayDouble));\r\n    assertFalse(ArrayUtils.isSameLength(twoArrayChar, nullArrayFloat));\r\n    assertFalse(ArrayUtils.isSameLength(twoArrayByte, nullArrayObject));\r\n    assertFalse(ArrayUtils.isSameLength(twoArrayByte, nullArrayBoolean));\r\n    assertFalse(ArrayUtils.isSameLength(twoArrayByte, nullArrayLong));\r\n    assertFalse(ArrayUtils.isSameLength(twoArrayByte, nullArrayInt));\r\n    assertFalse(ArrayUtils.isSameLength(twoArrayByte, nullArrayShort));\r\n    assertFalse(ArrayUtils.isSameLength(twoArrayByte, nullArrayChar));\r\n    assertFalse(ArrayUtils.isSameLength(twoArrayByte, nullArrayByte));\r\n    assertFalse(ArrayUtils.isSameLength(twoArrayByte, nullArrayDouble));\r\n    assertFalse(ArrayUtils.isSameLength(twoArrayByte, nullArrayFloat));\r\n    assertFalse(ArrayUtils.isSameLength(twoArrayDouble, nullArrayObject));\r\n    assertFalse(ArrayUtils.isSameLength(twoArrayDouble, nullArrayBoolean));\r\n    assertFalse(ArrayUtils.isSameLength(twoArrayDouble, nullArrayLong));\r\n    assertFalse(ArrayUtils.isSameLength(twoArrayDouble, nullArrayInt));\r\n    assertFalse(ArrayUtils.isSameLength(twoArrayDouble, nullArrayShort));\r\n    assertFalse(ArrayUtils.isSameLength(twoArrayDouble, nullArrayChar));\r\n    assertFalse(ArrayUtils.isSameLength(twoArrayDouble, nullArrayByte));\r\n    assertFalse(ArrayUtils.isSameLength(twoArrayDouble, nullArrayDouble));\r\n    assertFalse(ArrayUtils.isSameLength(twoArrayDouble, nullArrayFloat));\r\n    assertFalse(ArrayUtils.isSameLength(twoArrayFloat, nullArrayObject));\r\n    assertFalse(ArrayUtils.isSameLength(twoArrayFloat, nullArrayBoolean));\r\n    assertFalse(ArrayUtils.isSameLength(twoArrayFloat, nullArrayLong));\r\n    assertFalse(ArrayUtils.isSameLength(twoArrayFloat, nullArrayInt));\r\n    assertFalse(ArrayUtils.isSameLength(twoArrayFloat, nullArrayShort));\r\n    assertFalse(ArrayUtils.isSameLength(twoArrayFloat, nullArrayChar));\r\n    assertFalse(ArrayUtils.isSameLength(twoArrayFloat, nullArrayByte));\r\n    assertFalse(ArrayUtils.isSameLength(twoArrayFloat, nullArrayDouble));\r\n    assertFalse(ArrayUtils.isSameLength(twoArrayFloat, nullArrayFloat));\r\n    assertFalse(ArrayUtils.isSameLength(twoArrayObject, emptyArrayObject));\r\n    assertFalse(ArrayUtils.isSameLength(twoArrayObject, emptyArrayBoolean));\r\n    assertFalse(ArrayUtils.isSameLength(twoArrayObject, emptyArrayLong));\r\n    assertFalse(ArrayUtils.isSameLength(twoArrayObject, emptyArrayInt));\r\n    assertFalse(ArrayUtils.isSameLength(twoArrayObject, emptyArrayShort));\r\n    assertFalse(ArrayUtils.isSameLength(twoArrayObject, emptyArrayChar));\r\n    assertFalse(ArrayUtils.isSameLength(twoArrayObject, emptyArrayByte));\r\n    assertFalse(ArrayUtils.isSameLength(twoArrayObject, emptyArrayDouble));\r\n    assertFalse(ArrayUtils.isSameLength(twoArrayObject, emptyArrayFloat));\r\n    assertFalse(ArrayUtils.isSameLength(twoArrayBoolean, emptyArrayObject));\r\n    assertFalse(ArrayUtils.isSameLength(twoArrayBoolean, emptyArrayBoolean));\r\n    assertFalse(ArrayUtils.isSameLength(twoArrayBoolean, emptyArrayLong));\r\n    assertFalse(ArrayUtils.isSameLength(twoArrayBoolean, emptyArrayInt));\r\n    assertFalse(ArrayUtils.isSameLength(twoArrayBoolean, emptyArrayShort));\r\n    assertFalse(ArrayUtils.isSameLength(twoArrayBoolean, emptyArrayChar));\r\n    assertFalse(ArrayUtils.isSameLength(twoArrayBoolean, emptyArrayByte));\r\n    assertFalse(ArrayUtils.isSameLength(twoArrayBoolean, emptyArrayDouble));\r\n    assertFalse(ArrayUtils.isSameLength(twoArrayBoolean, emptyArrayFloat));\r\n    assertFalse(ArrayUtils.isSameLength(twoArrayLong, emptyArrayObject));\r\n    assertFalse(ArrayUtils.isSameLength(twoArrayLong, emptyArrayBoolean));\r\n    assertFalse(ArrayUtils.isSameLength(twoArrayLong, emptyArrayLong));\r\n    assertFalse(ArrayUtils.isSameLength(twoArrayLong, emptyArrayInt));\r\n    assertFalse(ArrayUtils.isSameLength(twoArrayLong, emptyArrayShort));\r\n    assertFalse(ArrayUtils.isSameLength(twoArrayLong, emptyArrayChar));\r\n    assertFalse(ArrayUtils.isSameLength(twoArrayLong, emptyArrayByte));\r\n    assertFalse(ArrayUtils.isSameLength(twoArrayLong, emptyArrayDouble));\r\n    assertFalse(ArrayUtils.isSameLength(twoArrayLong, emptyArrayFloat));\r\n    assertFalse(ArrayUtils.isSameLength(twoArrayInt, emptyArrayObject));\r\n    assertFalse(ArrayUtils.isSameLength(twoArrayInt, emptyArrayBoolean));\r\n    assertFalse(ArrayUtils.isSameLength(twoArrayInt, emptyArrayLong));\r\n    assertFalse(ArrayUtils.isSameLength(twoArrayInt, emptyArrayInt));\r\n    assertFalse(ArrayUtils.isSameLength(twoArrayInt, emptyArrayShort));\r\n    assertFalse(ArrayUtils.isSameLength(twoArrayInt, emptyArrayChar));\r\n    assertFalse(ArrayUtils.isSameLength(twoArrayInt, emptyArrayByte));\r\n    assertFalse(ArrayUtils.isSameLength(twoArrayInt, emptyArrayDouble));\r\n    assertFalse(ArrayUtils.isSameLength(twoArrayInt, emptyArrayFloat));\r\n    assertFalse(ArrayUtils.isSameLength(twoArrayShort, emptyArrayObject));\r\n    assertFalse(ArrayUtils.isSameLength(twoArrayShort, emptyArrayBoolean));\r\n    assertFalse(ArrayUtils.isSameLength(twoArrayShort, emptyArrayLong));\r\n    assertFalse(ArrayUtils.isSameLength(twoArrayShort, emptyArrayInt));\r\n    assertFalse(ArrayUtils.isSameLength(twoArrayShort, emptyArrayShort));\r\n    assertFalse(ArrayUtils.isSameLength(twoArrayShort, emptyArrayChar));\r\n    assertFalse(ArrayUtils.isSameLength(twoArrayShort, emptyArrayByte));\r\n    assertFalse(ArrayUtils.isSameLength(twoArrayShort, emptyArrayDouble));\r\n    assertFalse(ArrayUtils.isSameLength(twoArrayShort, emptyArrayFloat));\r\n    assertFalse(ArrayUtils.isSameLength(twoArrayChar, emptyArrayObject));\r\n    assertFalse(ArrayUtils.isSameLength(twoArrayChar, emptyArrayBoolean));\r\n    assertFalse(ArrayUtils.isSameLength(twoArrayChar, emptyArrayLong));\r\n    assertFalse(ArrayUtils.isSameLength(twoArrayChar, emptyArrayInt));\r\n    assertFalse(ArrayUtils.isSameLength(twoArrayChar, emptyArrayShort));\r\n    assertFalse(ArrayUtils.isSameLength(twoArrayChar, emptyArrayChar));\r\n    assertFalse(ArrayUtils.isSameLength(twoArrayChar, emptyArrayByte));\r\n    assertFalse(ArrayUtils.isSameLength(twoArrayChar, emptyArrayDouble));\r\n    assertFalse(ArrayUtils.isSameLength(twoArrayChar, emptyArrayFloat));\r\n    assertFalse(ArrayUtils.isSameLength(twoArrayByte, emptyArrayObject));\r\n    assertFalse(ArrayUtils.isSameLength(twoArrayByte, emptyArrayBoolean));\r\n    assertFalse(ArrayUtils.isSameLength(twoArrayByte, emptyArrayLong));\r\n    assertFalse(ArrayUtils.isSameLength(twoArrayByte, emptyArrayInt));\r\n    assertFalse(ArrayUtils.isSameLength(twoArrayByte, emptyArrayShort));\r\n    assertFalse(ArrayUtils.isSameLength(twoArrayByte, emptyArrayChar));\r\n    assertFalse(ArrayUtils.isSameLength(twoArrayByte, emptyArrayByte));\r\n    assertFalse(ArrayUtils.isSameLength(twoArrayByte, emptyArrayDouble));\r\n    assertFalse(ArrayUtils.isSameLength(twoArrayByte, emptyArrayFloat));\r\n    assertFalse(ArrayUtils.isSameLength(twoArrayDouble, emptyArrayObject));\r\n    assertFalse(ArrayUtils.isSameLength(twoArrayDouble, emptyArrayBoolean));\r\n    assertFalse(ArrayUtils.isSameLength(twoArrayDouble, emptyArrayLong));\r\n    assertFalse(ArrayUtils.isSameLength(twoArrayDouble, emptyArrayInt));\r\n    assertFalse(ArrayUtils.isSameLength(twoArrayDouble, emptyArrayShort));\r\n    assertFalse(ArrayUtils.isSameLength(twoArrayDouble, emptyArrayChar));\r\n    assertFalse(ArrayUtils.isSameLength(twoArrayDouble, emptyArrayByte));\r\n    assertFalse(ArrayUtils.isSameLength(twoArrayDouble, emptyArrayDouble));\r\n    assertFalse(ArrayUtils.isSameLength(twoArrayDouble, emptyArrayFloat));\r\n    assertFalse(ArrayUtils.isSameLength(twoArrayFloat, emptyArrayObject));\r\n    assertFalse(ArrayUtils.isSameLength(twoArrayFloat, emptyArrayBoolean));\r\n    assertFalse(ArrayUtils.isSameLength(twoArrayFloat, emptyArrayLong));\r\n    assertFalse(ArrayUtils.isSameLength(twoArrayFloat, emptyArrayInt));\r\n    assertFalse(ArrayUtils.isSameLength(twoArrayFloat, emptyArrayShort));\r\n    assertFalse(ArrayUtils.isSameLength(twoArrayFloat, emptyArrayChar));\r\n    assertFalse(ArrayUtils.isSameLength(twoArrayFloat, emptyArrayByte));\r\n    assertFalse(ArrayUtils.isSameLength(twoArrayFloat, emptyArrayDouble));\r\n    assertFalse(ArrayUtils.isSameLength(twoArrayFloat, emptyArrayFloat));\r\n    assertFalse(ArrayUtils.isSameLength(twoArrayObject, oneArrayObject));\r\n    assertFalse(ArrayUtils.isSameLength(twoArrayObject, oneArrayBoolean));\r\n    assertFalse(ArrayUtils.isSameLength(twoArrayObject, oneArrayLong));\r\n    assertFalse(ArrayUtils.isSameLength(twoArrayObject, oneArrayInt));\r\n    assertFalse(ArrayUtils.isSameLength(twoArrayObject, oneArrayShort));\r\n    assertFalse(ArrayUtils.isSameLength(twoArrayObject, oneArrayChar));\r\n    assertFalse(ArrayUtils.isSameLength(twoArrayObject, oneArrayByte));\r\n    assertFalse(ArrayUtils.isSameLength(twoArrayObject, oneArrayDouble));\r\n    assertFalse(ArrayUtils.isSameLength(twoArrayObject, oneArrayFloat));\r\n    assertFalse(ArrayUtils.isSameLength(twoArrayBoolean, oneArrayObject));\r\n    assertFalse(ArrayUtils.isSameLength(twoArrayBoolean, oneArrayBoolean));\r\n    assertFalse(ArrayUtils.isSameLength(twoArrayBoolean, oneArrayLong));\r\n    assertFalse(ArrayUtils.isSameLength(twoArrayBoolean, oneArrayInt));\r\n    assertFalse(ArrayUtils.isSameLength(twoArrayBoolean, oneArrayShort));\r\n    assertFalse(ArrayUtils.isSameLength(twoArrayBoolean, oneArrayChar));\r\n    assertFalse(ArrayUtils.isSameLength(twoArrayBoolean, oneArrayByte));\r\n    assertFalse(ArrayUtils.isSameLength(twoArrayBoolean, oneArrayDouble));\r\n    assertFalse(ArrayUtils.isSameLength(twoArrayBoolean, oneArrayFloat));\r\n    assertFalse(ArrayUtils.isSameLength(twoArrayLong, oneArrayObject));\r\n    assertFalse(ArrayUtils.isSameLength(twoArrayLong, oneArrayBoolean));\r\n    assertFalse(ArrayUtils.isSameLength(twoArrayLong, oneArrayLong));\r\n    assertFalse(ArrayUtils.isSameLength(twoArrayLong, oneArrayInt));\r\n    assertFalse(ArrayUtils.isSameLength(twoArrayLong, oneArrayShort));\r\n    assertFalse(ArrayUtils.isSameLength(twoArrayLong, oneArrayChar));\r\n    assertFalse(ArrayUtils.isSameLength(twoArrayLong, oneArrayByte));\r\n    assertFalse(ArrayUtils.isSameLength(twoArrayLong, oneArrayDouble));\r\n    assertFalse(ArrayUtils.isSameLength(twoArrayLong, oneArrayFloat));\r\n    assertFalse(ArrayUtils.isSameLength(twoArrayInt, oneArrayObject));\r\n    assertFalse(ArrayUtils.isSameLength(twoArrayInt, oneArrayBoolean));\r\n    assertFalse(ArrayUtils.isSameLength(twoArrayInt, oneArrayLong));\r\n    assertFalse(ArrayUtils.isSameLength(twoArrayInt, oneArrayInt));\r\n    assertFalse(ArrayUtils.isSameLength(twoArrayInt, oneArrayShort));\r\n    assertFalse(ArrayUtils.isSameLength(twoArrayInt, oneArrayChar));\r\n    assertFalse(ArrayUtils.isSameLength(twoArrayInt, oneArrayByte));\r\n    assertFalse(ArrayUtils.isSameLength(twoArrayInt, oneArrayDouble));\r\n    assertFalse(ArrayUtils.isSameLength(twoArrayInt, oneArrayFloat));\r\n    assertFalse(ArrayUtils.isSameLength(twoArrayShort, oneArrayObject));\r\n    assertFalse(ArrayUtils.isSameLength(twoArrayShort, oneArrayBoolean));\r\n    assertFalse(ArrayUtils.isSameLength(twoArrayShort, oneArrayLong));\r\n    assertFalse(ArrayUtils.isSameLength(twoArrayShort, oneArrayInt));\r\n    assertFalse(ArrayUtils.isSameLength(twoArrayShort, oneArrayShort));\r\n    assertFalse(ArrayUtils.isSameLength(twoArrayShort, oneArrayChar));\r\n    assertFalse(ArrayUtils.isSameLength(twoArrayShort, oneArrayByte));\r\n    assertFalse(ArrayUtils.isSameLength(twoArrayShort, oneArrayDouble));\r\n    assertFalse(ArrayUtils.isSameLength(twoArrayShort, oneArrayFloat));\r\n    assertFalse(ArrayUtils.isSameLength(twoArrayChar, oneArrayObject));\r\n    assertFalse(ArrayUtils.isSameLength(twoArrayChar, oneArrayBoolean));\r\n    assertFalse(ArrayUtils.isSameLength(twoArrayChar, oneArrayLong));\r\n    assertFalse(ArrayUtils.isSameLength(twoArrayChar, oneArrayInt));\r\n    assertFalse(ArrayUtils.isSameLength(twoArrayChar, oneArrayShort));\r\n    assertFalse(ArrayUtils.isSameLength(twoArrayChar, oneArrayChar));\r\n    assertFalse(ArrayUtils.isSameLength(twoArrayChar, oneArrayByte));\r\n    assertFalse(ArrayUtils.isSameLength(twoArrayChar, oneArrayDouble));\r\n    assertFalse(ArrayUtils.isSameLength(twoArrayChar, oneArrayFloat));\r\n    assertFalse(ArrayUtils.isSameLength(twoArrayByte, oneArrayObject));\r\n    assertFalse(ArrayUtils.isSameLength(twoArrayByte, oneArrayBoolean));\r\n    assertFalse(ArrayUtils.isSameLength(twoArrayByte, oneArrayLong));\r\n    assertFalse(ArrayUtils.isSameLength(twoArrayByte, oneArrayInt));\r\n    assertFalse(ArrayUtils.isSameLength(twoArrayByte, oneArrayShort));\r\n    assertFalse(ArrayUtils.isSameLength(twoArrayByte, oneArrayChar));\r\n    assertFalse(ArrayUtils.isSameLength(twoArrayByte, oneArrayByte));\r\n    assertFalse(ArrayUtils.isSameLength(twoArrayByte, oneArrayDouble));\r\n    assertFalse(ArrayUtils.isSameLength(twoArrayByte, oneArrayFloat));\r\n    assertFalse(ArrayUtils.isSameLength(twoArrayDouble, oneArrayObject));\r\n    assertFalse(ArrayUtils.isSameLength(twoArrayDouble, oneArrayBoolean));\r\n    assertFalse(ArrayUtils.isSameLength(twoArrayDouble, oneArrayLong));\r\n    assertFalse(ArrayUtils.isSameLength(twoArrayDouble, oneArrayInt));\r\n    assertFalse(ArrayUtils.isSameLength(twoArrayDouble, oneArrayShort));\r\n    assertFalse(ArrayUtils.isSameLength(twoArrayDouble, oneArrayChar));\r\n    assertFalse(ArrayUtils.isSameLength(twoArrayDouble, oneArrayByte));\r\n    assertFalse(ArrayUtils.isSameLength(twoArrayDouble, oneArrayDouble));\r\n    assertFalse(ArrayUtils.isSameLength(twoArrayDouble, oneArrayFloat));\r\n    assertFalse(ArrayUtils.isSameLength(twoArrayFloat, oneArrayObject));\r\n    assertFalse(ArrayUtils.isSameLength(twoArrayFloat, oneArrayBoolean));\r\n    assertFalse(ArrayUtils.isSameLength(twoArrayFloat, oneArrayLong));\r\n    assertFalse(ArrayUtils.isSameLength(twoArrayFloat, oneArrayInt));\r\n    assertFalse(ArrayUtils.isSameLength(twoArrayFloat, oneArrayShort));\r\n    assertFalse(ArrayUtils.isSameLength(twoArrayFloat, oneArrayChar));\r\n    assertFalse(ArrayUtils.isSameLength(twoArrayFloat, oneArrayByte));\r\n    assertFalse(ArrayUtils.isSameLength(twoArrayFloat, oneArrayDouble));\r\n    assertFalse(ArrayUtils.isSameLength(twoArrayFloat, oneArrayFloat));\r\n    assertTrue(ArrayUtils.isSameLength(twoArrayObject, twoArrayObject));\r\n    assertTrue(ArrayUtils.isSameLength(twoArrayObject, twoArrayBoolean));\r\n    assertTrue(ArrayUtils.isSameLength(twoArrayObject, twoArrayLong));\r\n    assertTrue(ArrayUtils.isSameLength(twoArrayObject, twoArrayInt));\r\n    assertTrue(ArrayUtils.isSameLength(twoArrayObject, twoArrayShort));\r\n    assertTrue(ArrayUtils.isSameLength(twoArrayObject, twoArrayChar));\r\n    assertTrue(ArrayUtils.isSameLength(twoArrayObject, twoArrayByte));\r\n    assertTrue(ArrayUtils.isSameLength(twoArrayObject, twoArrayDouble));\r\n    assertTrue(ArrayUtils.isSameLength(twoArrayObject, twoArrayFloat));\r\n    assertTrue(ArrayUtils.isSameLength(twoArrayBoolean, twoArrayObject));\r\n    assertTrue(ArrayUtils.isSameLength(twoArrayBoolean, twoArrayBoolean));\r\n    assertTrue(ArrayUtils.isSameLength(twoArrayBoolean, twoArrayLong));\r\n    assertTrue(ArrayUtils.isSameLength(twoArrayBoolean, twoArrayInt));\r\n    assertTrue(ArrayUtils.isSameLength(twoArrayBoolean, twoArrayShort));\r\n    assertTrue(ArrayUtils.isSameLength(twoArrayBoolean, twoArrayChar));\r\n    assertTrue(ArrayUtils.isSameLength(twoArrayBoolean, twoArrayByte));\r\n    assertTrue(ArrayUtils.isSameLength(twoArrayBoolean, twoArrayDouble));\r\n    assertTrue(ArrayUtils.isSameLength(twoArrayBoolean, twoArrayFloat));\r\n    assertTrue(ArrayUtils.isSameLength(twoArrayLong, twoArrayObject));\r\n    assertTrue(ArrayUtils.isSameLength(twoArrayLong, twoArrayBoolean));\r\n    assertTrue(ArrayUtils.isSameLength(twoArrayLong, twoArrayLong));\r\n    assertTrue(ArrayUtils.isSameLength(twoArrayLong, twoArrayInt));\r\n    assertTrue(ArrayUtils.isSameLength(twoArrayLong, twoArrayShort));\r\n    assertTrue(ArrayUtils.isSameLength(twoArrayLong, twoArrayChar));\r\n    assertTrue(ArrayUtils.isSameLength(twoArrayLong, twoArrayByte));\r\n    assertTrue(ArrayUtils.isSameLength(twoArrayLong, twoArrayDouble));\r\n    assertTrue(ArrayUtils.isSameLength(twoArrayLong, twoArrayFloat));\r\n    assertTrue(ArrayUtils.isSameLength(twoArrayInt, twoArrayObject));\r\n    assertTrue(ArrayUtils.isSameLength(twoArrayInt, twoArrayBoolean));\r\n    assertTrue(ArrayUtils.isSameLength(twoArrayInt, twoArrayLong));\r\n    assertTrue(ArrayUtils.isSameLength(twoArrayInt, twoArrayInt));\r\n    assertTrue(ArrayUtils.isSameLength(twoArrayInt, twoArrayShort));\r\n    assertTrue(ArrayUtils.isSameLength(twoArrayInt, twoArrayChar));\r\n    assertTrue(ArrayUtils.isSameLength(twoArrayInt, twoArrayByte));\r\n    assertTrue(ArrayUtils.isSameLength(twoArrayInt, twoArrayDouble));\r\n    assertTrue(ArrayUtils.isSameLength(twoArrayInt, twoArrayFloat));\r\n    assertTrue(ArrayUtils.isSameLength(twoArrayShort, twoArrayObject));\r\n    assertTrue(ArrayUtils.isSameLength(twoArrayShort, twoArrayBoolean));\r\n    assertTrue(ArrayUtils.isSameLength(twoArrayShort, twoArrayLong));\r\n    assertTrue(ArrayUtils.isSameLength(twoArrayShort, twoArrayInt));\r\n    assertTrue(ArrayUtils.isSameLength(twoArrayShort, twoArrayShort));\r\n    assertTrue(ArrayUtils.isSameLength(twoArrayShort, twoArrayChar));\r\n    assertTrue(ArrayUtils.isSameLength(twoArrayShort, twoArrayByte));\r\n    assertTrue(ArrayUtils.isSameLength(twoArrayShort, twoArrayDouble));\r\n    assertTrue(ArrayUtils.isSameLength(twoArrayShort, twoArrayFloat));\r\n    assertTrue(ArrayUtils.isSameLength(twoArrayChar, twoArrayObject));\r\n    assertTrue(ArrayUtils.isSameLength(twoArrayChar, twoArrayBoolean));\r\n    assertTrue(ArrayUtils.isSameLength(twoArrayChar, twoArrayLong));\r\n    assertTrue(ArrayUtils.isSameLength(twoArrayChar, twoArrayInt));\r\n    assertTrue(ArrayUtils.isSameLength(twoArrayChar, twoArrayShort));\r\n    assertTrue(ArrayUtils.isSameLength(twoArrayChar, twoArrayChar));\r\n    assertTrue(ArrayUtils.isSameLength(twoArrayChar, twoArrayByte));\r\n    assertTrue(ArrayUtils.isSameLength(twoArrayChar, twoArrayDouble));\r\n    assertTrue(ArrayUtils.isSameLength(twoArrayChar, twoArrayFloat));\r\n    assertTrue(ArrayUtils.isSameLength(twoArrayByte, twoArrayObject));\r\n    assertTrue(ArrayUtils.isSameLength(twoArrayByte, twoArrayBoolean));\r\n    assertTrue(ArrayUtils.isSameLength(twoArrayByte, twoArrayLong));\r\n    assertTrue(ArrayUtils.isSameLength(twoArrayByte, twoArrayInt));\r\n    assertTrue(ArrayUtils.isSameLength(twoArrayByte, twoArrayShort));\r\n    assertTrue(ArrayUtils.isSameLength(twoArrayByte, twoArrayChar));\r\n    assertTrue(ArrayUtils.isSameLength(twoArrayByte, twoArrayByte));\r\n    assertTrue(ArrayUtils.isSameLength(twoArrayByte, twoArrayDouble));\r\n    assertTrue(ArrayUtils.isSameLength(twoArrayByte, twoArrayFloat));\r\n    assertTrue(ArrayUtils.isSameLength(twoArrayDouble, twoArrayObject));\r\n    assertTrue(ArrayUtils.isSameLength(twoArrayDouble, twoArrayBoolean));\r\n    assertTrue(ArrayUtils.isSameLength(twoArrayDouble, twoArrayLong));\r\n    assertTrue(ArrayUtils.isSameLength(twoArrayDouble, twoArrayInt));\r\n    assertTrue(ArrayUtils.isSameLength(twoArrayDouble, twoArrayShort));\r\n    assertTrue(ArrayUtils.isSameLength(twoArrayDouble, twoArrayChar));\r\n    assertTrue(ArrayUtils.isSameLength(twoArrayDouble, twoArrayByte));\r\n    assertTrue(ArrayUtils.isSameLength(twoArrayDouble, twoArrayDouble));\r\n    assertTrue(ArrayUtils.isSameLength(twoArrayDouble, twoArrayFloat));\r\n    assertTrue(ArrayUtils.isSameLength(twoArrayFloat, twoArrayObject));\r\n    assertTrue(ArrayUtils.isSameLength(twoArrayFloat, twoArrayBoolean));\r\n    assertTrue(ArrayUtils.isSameLength(twoArrayFloat, twoArrayLong));\r\n    assertTrue(ArrayUtils.isSameLength(twoArrayFloat, twoArrayInt));\r\n    assertTrue(ArrayUtils.isSameLength(twoArrayFloat, twoArrayShort));\r\n    assertTrue(ArrayUtils.isSameLength(twoArrayFloat, twoArrayChar));\r\n    assertTrue(ArrayUtils.isSameLength(twoArrayFloat, twoArrayByte));\r\n    assertTrue(ArrayUtils.isSameLength(twoArrayFloat, twoArrayDouble));\r\n    assertTrue(ArrayUtils.isSameLength(twoArrayFloat, twoArrayFloat));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ArrayUtilsTest.java",
  "methodName" : "testSameLengthBoolean",
  "sourceCode" : "@Test\r\nvoid testSameLengthBoolean() {\r\n    final boolean[] nullArray = null;\r\n    final boolean[] emptyArray = {};\r\n    final boolean[] oneArray = { true };\r\n    final boolean[] twoArray = { true, false };\r\n    assertTrue(ArrayUtils.isSameLength(nullArray, nullArray));\r\n    assertTrue(ArrayUtils.isSameLength(nullArray, emptyArray));\r\n    assertFalse(ArrayUtils.isSameLength(nullArray, oneArray));\r\n    assertFalse(ArrayUtils.isSameLength(nullArray, twoArray));\r\n    assertTrue(ArrayUtils.isSameLength(emptyArray, nullArray));\r\n    assertTrue(ArrayUtils.isSameLength(emptyArray, emptyArray));\r\n    assertFalse(ArrayUtils.isSameLength(emptyArray, oneArray));\r\n    assertFalse(ArrayUtils.isSameLength(emptyArray, twoArray));\r\n    assertFalse(ArrayUtils.isSameLength(oneArray, nullArray));\r\n    assertFalse(ArrayUtils.isSameLength(oneArray, emptyArray));\r\n    assertTrue(ArrayUtils.isSameLength(oneArray, oneArray));\r\n    assertFalse(ArrayUtils.isSameLength(oneArray, twoArray));\r\n    assertFalse(ArrayUtils.isSameLength(twoArray, nullArray));\r\n    assertFalse(ArrayUtils.isSameLength(twoArray, emptyArray));\r\n    assertFalse(ArrayUtils.isSameLength(twoArray, oneArray));\r\n    assertTrue(ArrayUtils.isSameLength(twoArray, twoArray));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ArrayUtilsTest.java",
  "methodName" : "testSameLengthByte",
  "sourceCode" : "@Test\r\nvoid testSameLengthByte() {\r\n    final byte[] nullArray = null;\r\n    final byte[] emptyArray = {};\r\n    final byte[] oneArray = { 3 };\r\n    final byte[] twoArray = { 4, 6 };\r\n    assertTrue(ArrayUtils.isSameLength(nullArray, nullArray));\r\n    assertTrue(ArrayUtils.isSameLength(nullArray, emptyArray));\r\n    assertFalse(ArrayUtils.isSameLength(nullArray, oneArray));\r\n    assertFalse(ArrayUtils.isSameLength(nullArray, twoArray));\r\n    assertTrue(ArrayUtils.isSameLength(emptyArray, nullArray));\r\n    assertTrue(ArrayUtils.isSameLength(emptyArray, emptyArray));\r\n    assertFalse(ArrayUtils.isSameLength(emptyArray, oneArray));\r\n    assertFalse(ArrayUtils.isSameLength(emptyArray, twoArray));\r\n    assertFalse(ArrayUtils.isSameLength(oneArray, nullArray));\r\n    assertFalse(ArrayUtils.isSameLength(oneArray, emptyArray));\r\n    assertTrue(ArrayUtils.isSameLength(oneArray, oneArray));\r\n    assertFalse(ArrayUtils.isSameLength(oneArray, twoArray));\r\n    assertFalse(ArrayUtils.isSameLength(twoArray, nullArray));\r\n    assertFalse(ArrayUtils.isSameLength(twoArray, emptyArray));\r\n    assertFalse(ArrayUtils.isSameLength(twoArray, oneArray));\r\n    assertTrue(ArrayUtils.isSameLength(twoArray, twoArray));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ArrayUtilsTest.java",
  "methodName" : "testSameLengthChar",
  "sourceCode" : "@Test\r\nvoid testSameLengthChar() {\r\n    final char[] nullArray = null;\r\n    final char[] emptyArray = {};\r\n    final char[] oneArray = { 'f' };\r\n    final char[] twoArray = { 'd', 't' };\r\n    assertTrue(ArrayUtils.isSameLength(nullArray, nullArray));\r\n    assertTrue(ArrayUtils.isSameLength(nullArray, emptyArray));\r\n    assertFalse(ArrayUtils.isSameLength(nullArray, oneArray));\r\n    assertFalse(ArrayUtils.isSameLength(nullArray, twoArray));\r\n    assertTrue(ArrayUtils.isSameLength(emptyArray, nullArray));\r\n    assertTrue(ArrayUtils.isSameLength(emptyArray, emptyArray));\r\n    assertFalse(ArrayUtils.isSameLength(emptyArray, oneArray));\r\n    assertFalse(ArrayUtils.isSameLength(emptyArray, twoArray));\r\n    assertFalse(ArrayUtils.isSameLength(oneArray, nullArray));\r\n    assertFalse(ArrayUtils.isSameLength(oneArray, emptyArray));\r\n    assertTrue(ArrayUtils.isSameLength(oneArray, oneArray));\r\n    assertFalse(ArrayUtils.isSameLength(oneArray, twoArray));\r\n    assertFalse(ArrayUtils.isSameLength(twoArray, nullArray));\r\n    assertFalse(ArrayUtils.isSameLength(twoArray, emptyArray));\r\n    assertFalse(ArrayUtils.isSameLength(twoArray, oneArray));\r\n    assertTrue(ArrayUtils.isSameLength(twoArray, twoArray));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ArrayUtilsTest.java",
  "methodName" : "testSameLengthDouble",
  "sourceCode" : "@Test\r\nvoid testSameLengthDouble() {\r\n    final double[] nullArray = null;\r\n    final double[] emptyArray = {};\r\n    final double[] oneArray = { 1.3d };\r\n    final double[] twoArray = { 4.5d, 6.3d };\r\n    assertTrue(ArrayUtils.isSameLength(nullArray, nullArray));\r\n    assertTrue(ArrayUtils.isSameLength(nullArray, emptyArray));\r\n    assertFalse(ArrayUtils.isSameLength(nullArray, oneArray));\r\n    assertFalse(ArrayUtils.isSameLength(nullArray, twoArray));\r\n    assertTrue(ArrayUtils.isSameLength(emptyArray, nullArray));\r\n    assertTrue(ArrayUtils.isSameLength(emptyArray, emptyArray));\r\n    assertFalse(ArrayUtils.isSameLength(emptyArray, oneArray));\r\n    assertFalse(ArrayUtils.isSameLength(emptyArray, twoArray));\r\n    assertFalse(ArrayUtils.isSameLength(oneArray, nullArray));\r\n    assertFalse(ArrayUtils.isSameLength(oneArray, emptyArray));\r\n    assertTrue(ArrayUtils.isSameLength(oneArray, oneArray));\r\n    assertFalse(ArrayUtils.isSameLength(oneArray, twoArray));\r\n    assertFalse(ArrayUtils.isSameLength(twoArray, nullArray));\r\n    assertFalse(ArrayUtils.isSameLength(twoArray, emptyArray));\r\n    assertFalse(ArrayUtils.isSameLength(twoArray, oneArray));\r\n    assertTrue(ArrayUtils.isSameLength(twoArray, twoArray));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ArrayUtilsTest.java",
  "methodName" : "testSameLengthFloat",
  "sourceCode" : "@Test\r\nvoid testSameLengthFloat() {\r\n    final float[] nullArray = null;\r\n    final float[] emptyArray = {};\r\n    final float[] oneArray = { 2.5f };\r\n    final float[] twoArray = { 6.4f, 5.8f };\r\n    assertTrue(ArrayUtils.isSameLength(nullArray, nullArray));\r\n    assertTrue(ArrayUtils.isSameLength(nullArray, emptyArray));\r\n    assertFalse(ArrayUtils.isSameLength(nullArray, oneArray));\r\n    assertFalse(ArrayUtils.isSameLength(nullArray, twoArray));\r\n    assertTrue(ArrayUtils.isSameLength(emptyArray, nullArray));\r\n    assertTrue(ArrayUtils.isSameLength(emptyArray, emptyArray));\r\n    assertFalse(ArrayUtils.isSameLength(emptyArray, oneArray));\r\n    assertFalse(ArrayUtils.isSameLength(emptyArray, twoArray));\r\n    assertFalse(ArrayUtils.isSameLength(oneArray, nullArray));\r\n    assertFalse(ArrayUtils.isSameLength(oneArray, emptyArray));\r\n    assertTrue(ArrayUtils.isSameLength(oneArray, oneArray));\r\n    assertFalse(ArrayUtils.isSameLength(oneArray, twoArray));\r\n    assertFalse(ArrayUtils.isSameLength(twoArray, nullArray));\r\n    assertFalse(ArrayUtils.isSameLength(twoArray, emptyArray));\r\n    assertFalse(ArrayUtils.isSameLength(twoArray, oneArray));\r\n    assertTrue(ArrayUtils.isSameLength(twoArray, twoArray));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ArrayUtilsTest.java",
  "methodName" : "testSameLengthInt",
  "sourceCode" : "@Test\r\nvoid testSameLengthInt() {\r\n    final int[] nullArray = null;\r\n    final int[] emptyArray = {};\r\n    final int[] oneArray = { 4 };\r\n    final int[] twoArray = { 5, 7 };\r\n    assertTrue(ArrayUtils.isSameLength(nullArray, nullArray));\r\n    assertTrue(ArrayUtils.isSameLength(nullArray, emptyArray));\r\n    assertFalse(ArrayUtils.isSameLength(nullArray, oneArray));\r\n    assertFalse(ArrayUtils.isSameLength(nullArray, twoArray));\r\n    assertTrue(ArrayUtils.isSameLength(emptyArray, nullArray));\r\n    assertTrue(ArrayUtils.isSameLength(emptyArray, emptyArray));\r\n    assertFalse(ArrayUtils.isSameLength(emptyArray, oneArray));\r\n    assertFalse(ArrayUtils.isSameLength(emptyArray, twoArray));\r\n    assertFalse(ArrayUtils.isSameLength(oneArray, nullArray));\r\n    assertFalse(ArrayUtils.isSameLength(oneArray, emptyArray));\r\n    assertTrue(ArrayUtils.isSameLength(oneArray, oneArray));\r\n    assertFalse(ArrayUtils.isSameLength(oneArray, twoArray));\r\n    assertFalse(ArrayUtils.isSameLength(twoArray, nullArray));\r\n    assertFalse(ArrayUtils.isSameLength(twoArray, emptyArray));\r\n    assertFalse(ArrayUtils.isSameLength(twoArray, oneArray));\r\n    assertTrue(ArrayUtils.isSameLength(twoArray, twoArray));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ArrayUtilsTest.java",
  "methodName" : "testSameLengthLong",
  "sourceCode" : "@Test\r\nvoid testSameLengthLong() {\r\n    final long[] nullArray = null;\r\n    final long[] emptyArray = {};\r\n    final long[] oneArray = { 0L };\r\n    final long[] twoArray = { 0L, 76L };\r\n    assertTrue(ArrayUtils.isSameLength(nullArray, nullArray));\r\n    assertTrue(ArrayUtils.isSameLength(nullArray, emptyArray));\r\n    assertFalse(ArrayUtils.isSameLength(nullArray, oneArray));\r\n    assertFalse(ArrayUtils.isSameLength(nullArray, twoArray));\r\n    assertTrue(ArrayUtils.isSameLength(emptyArray, nullArray));\r\n    assertTrue(ArrayUtils.isSameLength(emptyArray, emptyArray));\r\n    assertFalse(ArrayUtils.isSameLength(emptyArray, oneArray));\r\n    assertFalse(ArrayUtils.isSameLength(emptyArray, twoArray));\r\n    assertFalse(ArrayUtils.isSameLength(oneArray, nullArray));\r\n    assertFalse(ArrayUtils.isSameLength(oneArray, emptyArray));\r\n    assertTrue(ArrayUtils.isSameLength(oneArray, oneArray));\r\n    assertFalse(ArrayUtils.isSameLength(oneArray, twoArray));\r\n    assertFalse(ArrayUtils.isSameLength(twoArray, nullArray));\r\n    assertFalse(ArrayUtils.isSameLength(twoArray, emptyArray));\r\n    assertFalse(ArrayUtils.isSameLength(twoArray, oneArray));\r\n    assertTrue(ArrayUtils.isSameLength(twoArray, twoArray));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ArrayUtilsTest.java",
  "methodName" : "testSameLengthShort",
  "sourceCode" : "@Test\r\nvoid testSameLengthShort() {\r\n    final short[] nullArray = null;\r\n    final short[] emptyArray = {};\r\n    final short[] oneArray = { 4 };\r\n    final short[] twoArray = { 6, 8 };\r\n    assertTrue(ArrayUtils.isSameLength(nullArray, nullArray));\r\n    assertTrue(ArrayUtils.isSameLength(nullArray, emptyArray));\r\n    assertFalse(ArrayUtils.isSameLength(nullArray, oneArray));\r\n    assertFalse(ArrayUtils.isSameLength(nullArray, twoArray));\r\n    assertTrue(ArrayUtils.isSameLength(emptyArray, nullArray));\r\n    assertTrue(ArrayUtils.isSameLength(emptyArray, emptyArray));\r\n    assertFalse(ArrayUtils.isSameLength(emptyArray, oneArray));\r\n    assertFalse(ArrayUtils.isSameLength(emptyArray, twoArray));\r\n    assertFalse(ArrayUtils.isSameLength(oneArray, nullArray));\r\n    assertFalse(ArrayUtils.isSameLength(oneArray, emptyArray));\r\n    assertTrue(ArrayUtils.isSameLength(oneArray, oneArray));\r\n    assertFalse(ArrayUtils.isSameLength(oneArray, twoArray));\r\n    assertFalse(ArrayUtils.isSameLength(twoArray, nullArray));\r\n    assertFalse(ArrayUtils.isSameLength(twoArray, emptyArray));\r\n    assertFalse(ArrayUtils.isSameLength(twoArray, oneArray));\r\n    assertTrue(ArrayUtils.isSameLength(twoArray, twoArray));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ArrayUtilsTest.java",
  "methodName" : "testSameType",
  "sourceCode" : "@Test\r\nvoid testSameType() {\r\n    assertIllegalArgumentException(() -> ArrayUtils.isSameType(null, null));\r\n    assertIllegalArgumentException(() -> ArrayUtils.isSameType(null, new Object[0]));\r\n    assertIllegalArgumentException(() -> ArrayUtils.isSameType(new Object[0], null));\r\n    assertTrue(ArrayUtils.isSameType(new Object[0], new Object[0]));\r\n    assertFalse(ArrayUtils.isSameType(new String[0], new Object[0]));\r\n    assertTrue(ArrayUtils.isSameType(new String[0][0], new String[0][0]));\r\n    assertFalse(ArrayUtils.isSameType(new String[0], new String[0][0]));\r\n    assertFalse(ArrayUtils.isSameType(new String[0][0], new String[0]));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ArrayUtilsTest.java",
  "methodName" : "testShiftAllByte",
  "sourceCode" : "@Test\r\nvoid testShiftAllByte() {\r\n    final byte[] array = { 1, 2, 3, 4 };\r\n    ArrayUtils.shift(array, 4);\r\n    assertEquals(1, array[0]);\r\n    assertEquals(2, array[1]);\r\n    assertEquals(3, array[2]);\r\n    assertEquals(4, array[3]);\r\n    ArrayUtils.shift(array, -4);\r\n    assertEquals(1, array[0]);\r\n    assertEquals(2, array[1]);\r\n    assertEquals(3, array[2]);\r\n    assertEquals(4, array[3]);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ArrayUtilsTest.java",
  "methodName" : "testShiftAllChar",
  "sourceCode" : "@Test\r\nvoid testShiftAllChar() {\r\n    final char[] array = { 1, 2, 3, 4 };\r\n    ArrayUtils.shift(array, 4);\r\n    assertEquals(1, array[0]);\r\n    assertEquals(2, array[1]);\r\n    assertEquals(3, array[2]);\r\n    assertEquals(4, array[3]);\r\n    ArrayUtils.shift(array, -4);\r\n    assertEquals(1, array[0]);\r\n    assertEquals(2, array[1]);\r\n    assertEquals(3, array[2]);\r\n    assertEquals(4, array[3]);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ArrayUtilsTest.java",
  "methodName" : "testShiftAllDouble",
  "sourceCode" : "@Test\r\nvoid testShiftAllDouble() {\r\n    final double[] array = { 1, 2, 3, 4 };\r\n    ArrayUtils.shift(array, 4);\r\n    assertEquals(1, array[0]);\r\n    assertEquals(2, array[1]);\r\n    assertEquals(3, array[2]);\r\n    assertEquals(4, array[3]);\r\n    ArrayUtils.shift(array, -4);\r\n    assertEquals(1, array[0]);\r\n    assertEquals(2, array[1]);\r\n    assertEquals(3, array[2]);\r\n    assertEquals(4, array[3]);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ArrayUtilsTest.java",
  "methodName" : "testShiftAllFloat",
  "sourceCode" : "@Test\r\nvoid testShiftAllFloat() {\r\n    final float[] array = { 1, 2, 3, 4 };\r\n    ArrayUtils.shift(array, 4);\r\n    assertEquals(1, array[0]);\r\n    assertEquals(2, array[1]);\r\n    assertEquals(3, array[2]);\r\n    assertEquals(4, array[3]);\r\n    ArrayUtils.shift(array, -4);\r\n    assertEquals(1, array[0]);\r\n    assertEquals(2, array[1]);\r\n    assertEquals(3, array[2]);\r\n    assertEquals(4, array[3]);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ArrayUtilsTest.java",
  "methodName" : "testShiftAllInt",
  "sourceCode" : "@Test\r\nvoid testShiftAllInt() {\r\n    final int[] array = { 1, 2, 3, 4 };\r\n    ArrayUtils.shift(array, 4);\r\n    assertEquals(1, array[0]);\r\n    assertEquals(2, array[1]);\r\n    assertEquals(3, array[2]);\r\n    assertEquals(4, array[3]);\r\n    ArrayUtils.shift(array, -4);\r\n    assertEquals(1, array[0]);\r\n    assertEquals(2, array[1]);\r\n    assertEquals(3, array[2]);\r\n    assertEquals(4, array[3]);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ArrayUtilsTest.java",
  "methodName" : "testShiftAllLong",
  "sourceCode" : "@Test\r\nvoid testShiftAllLong() {\r\n    final long[] array = { 1, 2, 3, 4 };\r\n    ArrayUtils.shift(array, 4);\r\n    assertEquals(1, array[0]);\r\n    assertEquals(2, array[1]);\r\n    assertEquals(3, array[2]);\r\n    assertEquals(4, array[3]);\r\n    ArrayUtils.shift(array, -4);\r\n    assertEquals(1, array[0]);\r\n    assertEquals(2, array[1]);\r\n    assertEquals(3, array[2]);\r\n    assertEquals(4, array[3]);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ArrayUtilsTest.java",
  "methodName" : "testShiftAllObject",
  "sourceCode" : "@Test\r\nvoid testShiftAllObject() {\r\n    final String[] array = { \"1\", \"2\", \"3\", \"4\" };\r\n    ArrayUtils.shift(array, 4);\r\n    assertEquals(\"1\", array[0]);\r\n    assertEquals(\"2\", array[1]);\r\n    assertEquals(\"3\", array[2]);\r\n    assertEquals(\"4\", array[3]);\r\n    ArrayUtils.shift(array, -4);\r\n    assertEquals(\"1\", array[0]);\r\n    assertEquals(\"2\", array[1]);\r\n    assertEquals(\"3\", array[2]);\r\n    assertEquals(\"4\", array[3]);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ArrayUtilsTest.java",
  "methodName" : "testShiftAllShort",
  "sourceCode" : "@Test\r\nvoid testShiftAllShort() {\r\n    final short[] array = { 1, 2, 3, 4 };\r\n    ArrayUtils.shift(array, 4);\r\n    assertEquals(1, array[0]);\r\n    assertEquals(2, array[1]);\r\n    assertEquals(3, array[2]);\r\n    assertEquals(4, array[3]);\r\n    ArrayUtils.shift(array, -4);\r\n    assertEquals(1, array[0]);\r\n    assertEquals(2, array[1]);\r\n    assertEquals(3, array[2]);\r\n    assertEquals(4, array[3]);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ArrayUtilsTest.java",
  "methodName" : "testShiftBoolean",
  "sourceCode" : "@Test\r\nvoid testShiftBoolean() {\r\n    ArrayUtils.shift(new boolean[0], 1);\r\n    final boolean[] array = { true, true, false, false };\r\n    ArrayUtils.shift(array, 1);\r\n    assertFalse(array[0]);\r\n    assertTrue(array[1]);\r\n    assertTrue(array[2]);\r\n    assertFalse(array[3]);\r\n    ArrayUtils.shift(array, -1);\r\n    assertTrue(array[0]);\r\n    assertTrue(array[1]);\r\n    assertFalse(array[2]);\r\n    assertFalse(array[3]);\r\n    ArrayUtils.shift(array, 5);\r\n    assertFalse(array[0]);\r\n    assertTrue(array[1]);\r\n    assertTrue(array[2]);\r\n    assertFalse(array[3]);\r\n    ArrayUtils.shift(array, -3);\r\n    assertFalse(array[0]);\r\n    assertFalse(array[1]);\r\n    assertTrue(array[2]);\r\n    assertTrue(array[3]);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ArrayUtilsTest.java",
  "methodName" : "testShiftBooleanArrayNull",
  "sourceCode" : "@Test\r\nvoid testShiftBooleanArrayNull() {\r\n    final boolean[] array = null;\r\n    ArrayUtils.shift(array, 1);\r\n    assertNull(array);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ArrayUtilsTest.java",
  "methodName" : "testShiftByte",
  "sourceCode" : "@Test\r\nvoid testShiftByte() {\r\n    ArrayUtils.shift((byte[]) null, 1);\r\n    ArrayUtils.shift(new byte[0], 1);\r\n    final byte[] array = { 1, 2, 3, 4 };\r\n    ArrayUtils.shift(array, 1);\r\n    assertEquals(4, array[0]);\r\n    assertEquals(1, array[1]);\r\n    assertEquals(2, array[2]);\r\n    assertEquals(3, array[3]);\r\n    ArrayUtils.shift(array, -1);\r\n    assertEquals(1, array[0]);\r\n    assertEquals(2, array[1]);\r\n    assertEquals(3, array[2]);\r\n    assertEquals(4, array[3]);\r\n    ArrayUtils.shift(array, 5);\r\n    assertEquals(4, array[0]);\r\n    assertEquals(1, array[1]);\r\n    assertEquals(2, array[2]);\r\n    assertEquals(3, array[3]);\r\n    ArrayUtils.shift(array, -3);\r\n    assertEquals(3, array[0]);\r\n    assertEquals(4, array[1]);\r\n    assertEquals(1, array[2]);\r\n    assertEquals(2, array[3]);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ArrayUtilsTest.java",
  "methodName" : "testShiftChar",
  "sourceCode" : "@Test\r\nvoid testShiftChar() {\r\n    ArrayUtils.shift((char[]) null, 1);\r\n    final char[] array = { 1, 2, 3, 4 };\r\n    ArrayUtils.shift(array, 1);\r\n    assertEquals(4, array[0]);\r\n    assertEquals(1, array[1]);\r\n    assertEquals(2, array[2]);\r\n    assertEquals(3, array[3]);\r\n    ArrayUtils.shift(array, -1);\r\n    assertEquals(1, array[0]);\r\n    assertEquals(2, array[1]);\r\n    assertEquals(3, array[2]);\r\n    assertEquals(4, array[3]);\r\n    ArrayUtils.shift(array, 5);\r\n    assertEquals(4, array[0]);\r\n    assertEquals(1, array[1]);\r\n    assertEquals(2, array[2]);\r\n    assertEquals(3, array[3]);\r\n    ArrayUtils.shift(array, -3);\r\n    assertEquals(3, array[0]);\r\n    assertEquals(4, array[1]);\r\n    assertEquals(1, array[2]);\r\n    assertEquals(2, array[3]);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ArrayUtilsTest.java",
  "methodName" : "testShiftDouble",
  "sourceCode" : "@Test\r\nvoid testShiftDouble() {\r\n    ArrayUtils.shift((double[]) null, 1);\r\n    final double[] array = { 1, 2, 3, 4 };\r\n    ArrayUtils.shift(array, 1);\r\n    assertEquals(4, array[0]);\r\n    assertEquals(1, array[1]);\r\n    assertEquals(2, array[2]);\r\n    assertEquals(3, array[3]);\r\n    ArrayUtils.shift(array, -1);\r\n    assertEquals(1, array[0]);\r\n    assertEquals(2, array[1]);\r\n    assertEquals(3, array[2]);\r\n    assertEquals(4, array[3]);\r\n    ArrayUtils.shift(array, 5);\r\n    assertEquals(4, array[0]);\r\n    assertEquals(1, array[1]);\r\n    assertEquals(2, array[2]);\r\n    assertEquals(3, array[3]);\r\n    ArrayUtils.shift(array, -3);\r\n    assertEquals(3, array[0]);\r\n    assertEquals(4, array[1]);\r\n    assertEquals(1, array[2]);\r\n    assertEquals(2, array[3]);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ArrayUtilsTest.java",
  "methodName" : "testShiftDoubleArrayNull",
  "sourceCode" : "@Test\r\nvoid testShiftDoubleArrayNull() {\r\n    final double[] array = null;\r\n    ArrayUtils.shift(array, 1);\r\n    assertNull(array);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ArrayUtilsTest.java",
  "methodName" : "testShiftFloat",
  "sourceCode" : "@Test\r\nvoid testShiftFloat() {\r\n    ArrayUtils.shift((float[]) null, 1);\r\n    final float[] array = { 1, 2, 3, 4 };\r\n    ArrayUtils.shift(array, 1);\r\n    assertEquals(4, array[0]);\r\n    assertEquals(1, array[1]);\r\n    assertEquals(2, array[2]);\r\n    assertEquals(3, array[3]);\r\n    ArrayUtils.shift(array, -1);\r\n    assertEquals(1, array[0]);\r\n    assertEquals(2, array[1]);\r\n    assertEquals(3, array[2]);\r\n    assertEquals(4, array[3]);\r\n    ArrayUtils.shift(array, 5);\r\n    assertEquals(4, array[0]);\r\n    assertEquals(1, array[1]);\r\n    assertEquals(2, array[2]);\r\n    assertEquals(3, array[3]);\r\n    ArrayUtils.shift(array, -3);\r\n    assertEquals(3, array[0]);\r\n    assertEquals(4, array[1]);\r\n    assertEquals(1, array[2]);\r\n    assertEquals(2, array[3]);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ArrayUtilsTest.java",
  "methodName" : "testShiftFloatArrayNull",
  "sourceCode" : "@Test\r\nvoid testShiftFloatArrayNull() {\r\n    final float[] array = null;\r\n    ArrayUtils.shift(array, 1);\r\n    assertNull(array);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ArrayUtilsTest.java",
  "methodName" : "testShiftInt",
  "sourceCode" : "@Test\r\nvoid testShiftInt() {\r\n    ArrayUtils.shift((int[]) null, 1);\r\n    final int[] array = { 1, 2, 3, 4 };\r\n    ArrayUtils.shift(array, 1);\r\n    assertEquals(4, array[0]);\r\n    assertEquals(1, array[1]);\r\n    assertEquals(2, array[2]);\r\n    assertEquals(3, array[3]);\r\n    ArrayUtils.shift(array, -1);\r\n    assertEquals(1, array[0]);\r\n    assertEquals(2, array[1]);\r\n    assertEquals(3, array[2]);\r\n    assertEquals(4, array[3]);\r\n    ArrayUtils.shift(array, 5);\r\n    assertEquals(4, array[0]);\r\n    assertEquals(1, array[1]);\r\n    assertEquals(2, array[2]);\r\n    assertEquals(3, array[3]);\r\n    ArrayUtils.shift(array, -3);\r\n    assertEquals(3, array[0]);\r\n    assertEquals(4, array[1]);\r\n    assertEquals(1, array[2]);\r\n    assertEquals(2, array[3]);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ArrayUtilsTest.java",
  "methodName" : "testShiftIntArrayNull",
  "sourceCode" : "@Test\r\nvoid testShiftIntArrayNull() {\r\n    final int[] array = null;\r\n    ArrayUtils.shift(array, 1);\r\n    assertNull(array);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ArrayUtilsTest.java",
  "methodName" : "testShiftLong",
  "sourceCode" : "@Test\r\nvoid testShiftLong() {\r\n    ArrayUtils.shift((long[]) null, 1);\r\n    final long[] array = { 1, 2, 3, 4 };\r\n    ArrayUtils.shift(array, 1);\r\n    assertEquals(4, array[0]);\r\n    assertEquals(1, array[1]);\r\n    assertEquals(2, array[2]);\r\n    assertEquals(3, array[3]);\r\n    ArrayUtils.shift(array, -1);\r\n    assertEquals(1, array[0]);\r\n    assertEquals(2, array[1]);\r\n    assertEquals(3, array[2]);\r\n    assertEquals(4, array[3]);\r\n    ArrayUtils.shift(array, 5);\r\n    assertEquals(4, array[0]);\r\n    assertEquals(1, array[1]);\r\n    assertEquals(2, array[2]);\r\n    assertEquals(3, array[3]);\r\n    ArrayUtils.shift(array, -3);\r\n    assertEquals(3, array[0]);\r\n    assertEquals(4, array[1]);\r\n    assertEquals(1, array[2]);\r\n    assertEquals(2, array[3]);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ArrayUtilsTest.java",
  "methodName" : "testShiftLongArrayNull",
  "sourceCode" : "@Test\r\nvoid testShiftLongArrayNull() {\r\n    final long[] array = null;\r\n    ArrayUtils.shift(array, 1);\r\n    assertNull(array);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ArrayUtilsTest.java",
  "methodName" : "testShiftObject",
  "sourceCode" : "@Test\r\nvoid testShiftObject() {\r\n    ArrayUtils.shift((String[]) null, 1);\r\n    final String[] array = { \"1\", \"2\", \"3\", \"4\" };\r\n    ArrayUtils.shift(array, 1);\r\n    assertEquals(\"4\", array[0]);\r\n    assertEquals(\"1\", array[1]);\r\n    assertEquals(\"2\", array[2]);\r\n    assertEquals(\"3\", array[3]);\r\n    ArrayUtils.shift(array, -1);\r\n    assertEquals(\"1\", array[0]);\r\n    assertEquals(\"2\", array[1]);\r\n    assertEquals(\"3\", array[2]);\r\n    assertEquals(\"4\", array[3]);\r\n    ArrayUtils.shift(array, 5);\r\n    assertEquals(\"4\", array[0]);\r\n    assertEquals(\"1\", array[1]);\r\n    assertEquals(\"2\", array[2]);\r\n    assertEquals(\"3\", array[3]);\r\n    ArrayUtils.shift(array, -3);\r\n    assertEquals(\"3\", array[0]);\r\n    assertEquals(\"4\", array[1]);\r\n    assertEquals(\"1\", array[2]);\r\n    assertEquals(\"2\", array[3]);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ArrayUtilsTest.java",
  "methodName" : "testShiftObjectArrayNull",
  "sourceCode" : "@Test\r\nvoid testShiftObjectArrayNull() {\r\n    final String[] array = null;\r\n    ArrayUtils.shift(array, 1);\r\n    assertNull(array);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ArrayUtilsTest.java",
  "methodName" : "testShiftRangeBoolean",
  "sourceCode" : "@Test\r\nvoid testShiftRangeBoolean() {\r\n    // edge cases where nothing happens\r\n    // (1) array == null\r\n    ArrayUtils.shift((boolean[]) null, 0, 0, 0);\r\n    // (2) startIndexInclusive >= array.length - 1\r\n    ArrayUtils.shift(new boolean[0], 100, 0, 0);\r\n    // (3) endIndexExclusive <= 0\r\n    final boolean[] array1 = { true };\r\n    ArrayUtils.shift(array1, -1, 0, 0);\r\n    assertArrayEquals(new boolean[] { true }, array1);\r\n    // (4) n <= 1\r\n    final boolean[] array2 = { true, false, true };\r\n    ArrayUtils.shift(array2, 1, 1, 0);\r\n    assertArrayEquals(new boolean[] { true, false, true }, array2);\r\n    // tests\r\n    final boolean[] array = { true, false, false, false, true };\r\n    ArrayUtils.shift(array, 1, 3, 1);\r\n    assertEquals(true, array[0]);\r\n    assertEquals(false, array[1]);\r\n    assertEquals(false, array[2]);\r\n    assertEquals(false, array[3]);\r\n    assertEquals(true, array[4]);\r\n    ArrayUtils.shift(array, 1, 4, 2);\r\n    assertEquals(true, array[0]);\r\n    assertEquals(false, array[1]);\r\n    assertEquals(false, array[2]);\r\n    assertEquals(false, array[3]);\r\n    assertEquals(true, array[4]);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ArrayUtilsTest.java",
  "methodName" : "testShiftRangeByte",
  "sourceCode" : "@Test\r\nvoid testShiftRangeByte() {\r\n    // edge cases where nothing happens\r\n    // (1) array == null\r\n    ArrayUtils.shift((byte[]) null, 0, 0, 0);\r\n    // (2) startIndexInclusive >= array.length - 1\r\n    ArrayUtils.shift(new byte[0], 100, 0, 0);\r\n    // (3) endIndexExclusive <= 0\r\n    final byte[] array1 = { 1 };\r\n    ArrayUtils.shift(array1, -1, 0, 0);\r\n    assertArrayEquals(new byte[] { 1 }, array1);\r\n    // (4) n <= 1\r\n    final byte[] array2 = { 1, 0, 1 };\r\n    ArrayUtils.shift(array2, 1, 1, 0);\r\n    assertArrayEquals(new byte[] { 1, 0, 1 }, array2);\r\n    // tests\r\n    final byte[] array = { 1, 2, 3, 4, 5 };\r\n    ArrayUtils.shift(array, 1, 3, 1);\r\n    assertEquals(1, array[0]);\r\n    assertEquals(3, array[1]);\r\n    assertEquals(2, array[2]);\r\n    assertEquals(4, array[3]);\r\n    assertEquals(5, array[4]);\r\n    ArrayUtils.shift(array, 1, 4, 2);\r\n    assertEquals(1, array[0]);\r\n    assertEquals(2, array[1]);\r\n    assertEquals(4, array[2]);\r\n    assertEquals(3, array[3]);\r\n    assertEquals(5, array[4]);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ArrayUtilsTest.java",
  "methodName" : "testShiftRangeChar",
  "sourceCode" : "@Test\r\nvoid testShiftRangeChar() {\r\n    // edge cases where nothing happens\r\n    // (1) array == null\r\n    ArrayUtils.shift((char[]) null, 0, 0, 0);\r\n    // (2) startIndexInclusive >= array.length - 1\r\n    ArrayUtils.shift(new char[0], 100, 0, 0);\r\n    // (3) endIndexExclusive <= 0\r\n    final char[] array1 = { 1 };\r\n    ArrayUtils.shift(array1, -1, 0, 0);\r\n    assertArrayEquals(new char[] { 1 }, array1);\r\n    // (4) n <= 1\r\n    final char[] array2 = { 1, 0, 1 };\r\n    ArrayUtils.shift(array2, 1, 1, 0);\r\n    assertArrayEquals(new char[] { 1, 0, 1 }, array2);\r\n    // tests\r\n    final char[] array = { 1, 2, 3, 4, 5 };\r\n    ArrayUtils.shift(array, 1, 3, 1);\r\n    assertEquals(1, array[0]);\r\n    assertEquals(3, array[1]);\r\n    assertEquals(2, array[2]);\r\n    assertEquals(4, array[3]);\r\n    assertEquals(5, array[4]);\r\n    ArrayUtils.shift(array, 1, 4, 2);\r\n    assertEquals(1, array[0]);\r\n    assertEquals(2, array[1]);\r\n    assertEquals(4, array[2]);\r\n    assertEquals(3, array[3]);\r\n    assertEquals(5, array[4]);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ArrayUtilsTest.java",
  "methodName" : "testShiftRangeDouble",
  "sourceCode" : "@Test\r\nvoid testShiftRangeDouble() {\r\n    // edge cases where nothing happens\r\n    // (1) array == null\r\n    ArrayUtils.shift((double[]) null, 0, 0, 0);\r\n    // (2) startIndexInclusive >= array.length - 1\r\n    ArrayUtils.shift(new double[0], 100, 0, 0);\r\n    // (3) endIndexExclusive <= 0\r\n    final double[] array1 = { 1 };\r\n    ArrayUtils.shift(array1, -1, 0, 0);\r\n    assertArrayEquals(new double[] { 1 }, array1);\r\n    // (4) n <= 1\r\n    final double[] array2 = { 1, 0, 1 };\r\n    ArrayUtils.shift(array2, 1, 1, 0);\r\n    assertArrayEquals(new double[] { 1, 0, 1 }, array2);\r\n    // tests\r\n    final double[] array = { 1, 2, 3, 4, 5 };\r\n    ArrayUtils.shift(array, 1, 3, 1);\r\n    assertEquals(1, array[0]);\r\n    assertEquals(3, array[1]);\r\n    assertEquals(2, array[2]);\r\n    assertEquals(4, array[3]);\r\n    assertEquals(5, array[4]);\r\n    ArrayUtils.shift(array, 1, 4, 2);\r\n    assertEquals(1, array[0]);\r\n    assertEquals(2, array[1]);\r\n    assertEquals(4, array[2]);\r\n    assertEquals(3, array[3]);\r\n    assertEquals(5, array[4]);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ArrayUtilsTest.java",
  "methodName" : "testShiftRangeFloat",
  "sourceCode" : "@Test\r\nvoid testShiftRangeFloat() {\r\n    // edge cases where nothing happens\r\n    // (1) array == null\r\n    ArrayUtils.shift((float[]) null, 0, 0, 0);\r\n    // (2) startIndexInclusive >= array.length - 1\r\n    ArrayUtils.shift(new float[0], 100, 0, 0);\r\n    // (3) endIndexExclusive <= 0\r\n    final float[] array1 = { 1 };\r\n    ArrayUtils.shift(array1, -1, 0, 0);\r\n    assertArrayEquals(new float[] { 1 }, array1);\r\n    // (4) n <= 1\r\n    final float[] array2 = { 1, 0, 1 };\r\n    ArrayUtils.shift(array2, 1, 1, 0);\r\n    assertArrayEquals(new float[] { 1, 0, 1 }, array2);\r\n    // tests\r\n    final float[] array = { 1, 2, 3, 4, 5 };\r\n    ArrayUtils.shift(array, 1, 3, 1);\r\n    assertEquals(1, array[0]);\r\n    assertEquals(3, array[1]);\r\n    assertEquals(2, array[2]);\r\n    assertEquals(4, array[3]);\r\n    assertEquals(5, array[4]);\r\n    ArrayUtils.shift(array, 1, 4, 2);\r\n    assertEquals(1, array[0]);\r\n    assertEquals(2, array[1]);\r\n    assertEquals(4, array[2]);\r\n    assertEquals(3, array[3]);\r\n    assertEquals(5, array[4]);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ArrayUtilsTest.java",
  "methodName" : "testShiftRangeInt",
  "sourceCode" : "@Test\r\nvoid testShiftRangeInt() {\r\n    // edge cases where nothing happens\r\n    // (1) array == null\r\n    ArrayUtils.shift((int[]) null, 0, 0, 0);\r\n    // (2) startIndexInclusive >= array.length - 1\r\n    ArrayUtils.shift(new int[0], 100, 0, 0);\r\n    // (3) endIndexExclusive <= 0\r\n    final int[] array1 = { 1 };\r\n    ArrayUtils.shift(array1, -1, 0, 0);\r\n    assertArrayEquals(new int[] { 1 }, array1);\r\n    // (4) n <= 1\r\n    final int[] array2 = { 1, 0, 1 };\r\n    ArrayUtils.shift(array2, 1, 1, 0);\r\n    assertArrayEquals(new int[] { 1, 0, 1 }, array2);\r\n    // tests\r\n    final int[] array = { 1, 2, 3, 4, 5 };\r\n    ArrayUtils.shift(array, 1, 3, 1);\r\n    assertEquals(1, array[0]);\r\n    assertEquals(3, array[1]);\r\n    assertEquals(2, array[2]);\r\n    assertEquals(4, array[3]);\r\n    assertEquals(5, array[4]);\r\n    ArrayUtils.shift(array, 1, 4, 2);\r\n    assertEquals(1, array[0]);\r\n    assertEquals(2, array[1]);\r\n    assertEquals(4, array[2]);\r\n    assertEquals(3, array[3]);\r\n    assertEquals(5, array[4]);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ArrayUtilsTest.java",
  "methodName" : "testShiftRangeLong",
  "sourceCode" : "@Test\r\nvoid testShiftRangeLong() {\r\n    // edge cases where nothing happens\r\n    // (1) array == null\r\n    ArrayUtils.shift((long[]) null, 0, 0, 0);\r\n    // (2) startIndexInclusive >= array.length - 1\r\n    ArrayUtils.shift(new long[0], 100, 0, 0);\r\n    // (3) endIndexExclusive <= 0\r\n    final long[] array1 = { 1 };\r\n    ArrayUtils.shift(array1, -1, 0, 0);\r\n    assertArrayEquals(new long[] { 1 }, array1);\r\n    // (4) n <= 1\r\n    final long[] array2 = { 1, 0, 1 };\r\n    ArrayUtils.shift(array2, 1, 1, 0);\r\n    assertArrayEquals(new long[] { 1, 0, 1 }, array2);\r\n    // tests\r\n    final long[] array = { 1, 2, 3, 4, 5 };\r\n    ArrayUtils.shift(array, 1, 3, 1);\r\n    assertEquals(1, array[0]);\r\n    assertEquals(3, array[1]);\r\n    assertEquals(2, array[2]);\r\n    assertEquals(4, array[3]);\r\n    assertEquals(5, array[4]);\r\n    ArrayUtils.shift(array, 1, 4, 2);\r\n    assertEquals(1, array[0]);\r\n    assertEquals(2, array[1]);\r\n    assertEquals(4, array[2]);\r\n    assertEquals(3, array[3]);\r\n    assertEquals(5, array[4]);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ArrayUtilsTest.java",
  "methodName" : "testShiftRangeNoElemByte",
  "sourceCode" : "@Test\r\nvoid testShiftRangeNoElemByte() {\r\n    final byte[] array = { 1, 2, 3, 4 };\r\n    ArrayUtils.shift(array, 1, 1, 1);\r\n    assertEquals(1, array[0]);\r\n    assertEquals(2, array[1]);\r\n    assertEquals(3, array[2]);\r\n    assertEquals(4, array[3]);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ArrayUtilsTest.java",
  "methodName" : "testShiftRangeNoElemChar",
  "sourceCode" : "@Test\r\nvoid testShiftRangeNoElemChar() {\r\n    final char[] array = { 1, 2, 3, 4 };\r\n    ArrayUtils.shift(array, 1, 1, 1);\r\n    assertEquals(1, array[0]);\r\n    assertEquals(2, array[1]);\r\n    assertEquals(3, array[2]);\r\n    assertEquals(4, array[3]);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ArrayUtilsTest.java",
  "methodName" : "testShiftRangeNoElemDouble",
  "sourceCode" : "@Test\r\nvoid testShiftRangeNoElemDouble() {\r\n    final double[] array = { 1, 2, 3, 4 };\r\n    ArrayUtils.shift(array, 1, 1, 1);\r\n    assertEquals(1, array[0]);\r\n    assertEquals(2, array[1]);\r\n    assertEquals(3, array[2]);\r\n    assertEquals(4, array[3]);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ArrayUtilsTest.java",
  "methodName" : "testShiftRangeNoElemFloat",
  "sourceCode" : "@Test\r\nvoid testShiftRangeNoElemFloat() {\r\n    final float[] array = { 1, 2, 3, 4 };\r\n    ArrayUtils.shift(array, 1, 1, 1);\r\n    assertEquals(1, array[0]);\r\n    assertEquals(2, array[1]);\r\n    assertEquals(3, array[2]);\r\n    assertEquals(4, array[3]);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ArrayUtilsTest.java",
  "methodName" : "testShiftRangeNoElemInt",
  "sourceCode" : "@Test\r\nvoid testShiftRangeNoElemInt() {\r\n    final int[] array = { 1, 2, 3, 4 };\r\n    ArrayUtils.shift(array, 1, 1, 1);\r\n    assertEquals(1, array[0]);\r\n    assertEquals(2, array[1]);\r\n    assertEquals(3, array[2]);\r\n    assertEquals(4, array[3]);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ArrayUtilsTest.java",
  "methodName" : "testShiftRangeNoElemLong",
  "sourceCode" : "@Test\r\nvoid testShiftRangeNoElemLong() {\r\n    final long[] array = { 1, 2, 3, 4 };\r\n    ArrayUtils.shift(array, 1, 1, 1);\r\n    assertEquals(1, array[0]);\r\n    assertEquals(2, array[1]);\r\n    assertEquals(3, array[2]);\r\n    assertEquals(4, array[3]);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ArrayUtilsTest.java",
  "methodName" : "testShiftRangeNoElemObject",
  "sourceCode" : "@Test\r\nvoid testShiftRangeNoElemObject() {\r\n    final String[] array = { \"1\", \"2\", \"3\", \"4\" };\r\n    ArrayUtils.shift(array, 1, 1, 1);\r\n    assertEquals(\"1\", array[0]);\r\n    assertEquals(\"2\", array[1]);\r\n    assertEquals(\"3\", array[2]);\r\n    assertEquals(\"4\", array[3]);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ArrayUtilsTest.java",
  "methodName" : "testShiftRangeNoElemShort",
  "sourceCode" : "@Test\r\nvoid testShiftRangeNoElemShort() {\r\n    final short[] array = { 1, 2, 3, 4 };\r\n    ArrayUtils.shift(array, 1, 1, 1);\r\n    assertEquals(1, array[0]);\r\n    assertEquals(2, array[1]);\r\n    assertEquals(3, array[2]);\r\n    assertEquals(4, array[3]);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ArrayUtilsTest.java",
  "methodName" : "testShiftRangeNullByte",
  "sourceCode" : "@Test\r\nvoid testShiftRangeNullByte() {\r\n    final byte[] array = null;\r\n    ArrayUtils.shift(array, 1, 1, 1);\r\n    assertNull(array);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ArrayUtilsTest.java",
  "methodName" : "testShiftRangeNullChar",
  "sourceCode" : "@Test\r\nvoid testShiftRangeNullChar() {\r\n    final char[] array = null;\r\n    ArrayUtils.shift(array, 1, 1, 1);\r\n    assertNull(array);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ArrayUtilsTest.java",
  "methodName" : "testShiftRangeNullDouble",
  "sourceCode" : "@Test\r\nvoid testShiftRangeNullDouble() {\r\n    final double[] array = null;\r\n    ArrayUtils.shift(array, 1, 1, 1);\r\n    assertNull(array);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ArrayUtilsTest.java",
  "methodName" : "testShiftRangeNullFloat",
  "sourceCode" : "@Test\r\nvoid testShiftRangeNullFloat() {\r\n    final float[] array = null;\r\n    ArrayUtils.shift(array, 1, 1, 1);\r\n    assertNull(array);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ArrayUtilsTest.java",
  "methodName" : "testShiftRangeNullInt",
  "sourceCode" : "@Test\r\nvoid testShiftRangeNullInt() {\r\n    final int[] array = null;\r\n    ArrayUtils.shift(array, 1, 1, 1);\r\n    assertNull(array);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ArrayUtilsTest.java",
  "methodName" : "testShiftRangeNullLong",
  "sourceCode" : "@Test\r\nvoid testShiftRangeNullLong() {\r\n    final long[] array = null;\r\n    ArrayUtils.shift(array, 1, 1, 1);\r\n    assertNull(array);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ArrayUtilsTest.java",
  "methodName" : "testShiftRangeNullObject",
  "sourceCode" : "@Test\r\nvoid testShiftRangeNullObject() {\r\n    final String[] array = null;\r\n    ArrayUtils.shift(array, 1, 1, 1);\r\n    assertNull(array);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ArrayUtilsTest.java",
  "methodName" : "testShiftRangeNullShort",
  "sourceCode" : "@Test\r\nvoid testShiftRangeNullShort() {\r\n    final short[] array = null;\r\n    ArrayUtils.shift(array, 1, 1, 1);\r\n    assertNull(array);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ArrayUtilsTest.java",
  "methodName" : "testShiftRangeObject",
  "sourceCode" : "@Test\r\nvoid testShiftRangeObject() {\r\n    final String[] array = { \"1\", \"2\", \"3\", \"4\", \"5\" };\r\n    ArrayUtils.shift(array, 1, 3, 1);\r\n    assertEquals(\"1\", array[0]);\r\n    assertEquals(\"3\", array[1]);\r\n    assertEquals(\"2\", array[2]);\r\n    assertEquals(\"4\", array[3]);\r\n    assertEquals(\"5\", array[4]);\r\n    ArrayUtils.shift(array, 1, 4, 2);\r\n    assertEquals(\"1\", array[0]);\r\n    assertEquals(\"2\", array[1]);\r\n    assertEquals(\"4\", array[2]);\r\n    assertEquals(\"3\", array[3]);\r\n    assertEquals(\"5\", array[4]);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ArrayUtilsTest.java",
  "methodName" : "testShiftRangeShort",
  "sourceCode" : "@Test\r\nvoid testShiftRangeShort() {\r\n    // edge cases where nothing happens\r\n    // (1) array == null\r\n    ArrayUtils.shift((short[]) null, 0, 0, 0);\r\n    // (2) startIndexInclusive >= array.length - 1\r\n    ArrayUtils.shift(new short[0], 100, 0, 0);\r\n    // (3) endIndexExclusive <= 0\r\n    final short[] array1 = { 1 };\r\n    ArrayUtils.shift(array1, -1, 0, 0);\r\n    assertArrayEquals(new short[] { 1 }, array1);\r\n    // (4) n <= 1\r\n    final short[] array2 = { 1, 0, 1 };\r\n    ArrayUtils.shift(array2, 1, 1, 0);\r\n    assertArrayEquals(new short[] { 1, 0, 1 }, array2);\r\n    // tests\r\n    final short[] array = { 1, 2, 3, 4, 5 };\r\n    ArrayUtils.shift(array, 1, 3, 1);\r\n    assertEquals(1, array[0]);\r\n    assertEquals(3, array[1]);\r\n    assertEquals(2, array[2]);\r\n    assertEquals(4, array[3]);\r\n    assertEquals(5, array[4]);\r\n    ArrayUtils.shift(array, 1, 4, 2);\r\n    assertEquals(1, array[0]);\r\n    assertEquals(2, array[1]);\r\n    assertEquals(4, array[2]);\r\n    assertEquals(3, array[3]);\r\n    assertEquals(5, array[4]);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ArrayUtilsTest.java",
  "methodName" : "testShiftShort",
  "sourceCode" : "@Test\r\nvoid testShiftShort() {\r\n    ArrayUtils.shift((short[]) null, 1);\r\n    short[] array = { 1, 2, 3, 4 };\r\n    ArrayUtils.shift(array, 1);\r\n    assertEquals(4, array[0]);\r\n    assertEquals(1, array[1]);\r\n    assertEquals(2, array[2]);\r\n    assertEquals(3, array[3]);\r\n    ArrayUtils.shift(array, -1);\r\n    assertEquals(1, array[0]);\r\n    assertEquals(2, array[1]);\r\n    assertEquals(3, array[2]);\r\n    assertEquals(4, array[3]);\r\n    ArrayUtils.shift(array, 5);\r\n    assertEquals(4, array[0]);\r\n    assertEquals(1, array[1]);\r\n    assertEquals(2, array[2]);\r\n    assertEquals(3, array[3]);\r\n    ArrayUtils.shift(array, -3);\r\n    assertEquals(3, array[0]);\r\n    assertEquals(4, array[1]);\r\n    assertEquals(1, array[2]);\r\n    assertEquals(2, array[3]);\r\n    array = new short[] { 1, 2, 3, 4, 5 };\r\n    ArrayUtils.shift(array, 2);\r\n    assertEquals(4, array[0]);\r\n    assertEquals(5, array[1]);\r\n    assertEquals(1, array[2]);\r\n    assertEquals(2, array[3]);\r\n    assertEquals(3, array[4]);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ArrayUtilsTest.java",
  "methodName" : "testShiftShortArrayNull",
  "sourceCode" : "@Test\r\nvoid testShiftShortArrayNull() {\r\n    final short[] array = null;\r\n    ArrayUtils.shift(array, 1);\r\n    assertNull(array);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ArrayUtilsTest.java",
  "methodName" : "testShuffleBoolean",
  "sourceCode" : "@Test\r\nvoid testShuffleBoolean() {\r\n    // Don't use a \"small\" array to reduce spurious failures.\r\n    final boolean[] array1 = { true, false, true, true, false, false, true, false, false, true, true, false, true, true, false, false, true, false, false, true, true, false, true, true, false, false, true, false, false, true, false, true, true, false, true, true, false, false, true, false, false, false, true, true, false, false, true, false, false, true, false, true, true, false, true, true, false, false, true, false };\r\n    final boolean[] array2 = ArrayUtils.clone(array1);\r\n    ArrayUtils.shuffle(array1);\r\n    assertFalse(Arrays.equals(array1, array2));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ArrayUtilsTest.java",
  "methodName" : "testShuffleBooleanRandom",
  "sourceCode" : "@Test\r\nvoid testShuffleBooleanRandom() {\r\n    // Don't use a \"small\" array to reduce spurious failures.\r\n    final boolean[] array1 = { true, false, true, true, false, false, true, false, false, true, true, false, true, true, false, false, true, false, false, true, true, false, true, true, false, false, true, false, false, true, false, true, true, false, true, true, false, false, true, false, false, false, true, true, false, false, true, false, false, true, false, true, true, false, true, true, false, false, true, false };\r\n    final boolean[] array2 = ArrayUtils.clone(array1);\r\n    ArrayUtils.shuffle(array1, seededRandom());\r\n    assertFalse(Arrays.equals(array1, array2));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ArrayUtilsTest.java",
  "methodName" : "testShuffleByte",
  "sourceCode" : "@Test\r\nvoid testShuffleByte() {\r\n    // Don't use a \"small\" array, reduce spurious failures.\r\n    final byte[] array1 = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 };\r\n    final byte[] array2 = ArrayUtils.clone(array1);\r\n    ArrayUtils.shuffle(array1);\r\n    assertFalse(Arrays.equals(array1, array2));\r\n    for (final byte element : array2) {\r\n        assertTrue(ArrayUtils.contains(array1, element), () -> \"Element \" + element + \" not found\");\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ArrayUtilsTest.java",
  "methodName" : "testShuffleByteRandom",
  "sourceCode" : "@Test\r\nvoid testShuffleByteRandom() {\r\n    // Don't use a \"small\" array, reduce spurious failures.\r\n    final byte[] array1 = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 };\r\n    final byte[] array2 = ArrayUtils.clone(array1);\r\n    ArrayUtils.shuffle(array1, seededRandom());\r\n    assertFalse(Arrays.equals(array1, array2));\r\n    for (final byte element : array2) {\r\n        assertTrue(ArrayUtils.contains(array1, element), () -> \"Element \" + element + \" not found\");\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ArrayUtilsTest.java",
  "methodName" : "testShuffleChar",
  "sourceCode" : "@Test\r\nvoid testShuffleChar() {\r\n    // Don't use a \"small\" array, reduce spurious failures.\r\n    final char[] array1 = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 };\r\n    final char[] array2 = ArrayUtils.clone(array1);\r\n    ArrayUtils.shuffle(array1);\r\n    assertFalse(Arrays.equals(array1, array2));\r\n    for (final char element : array2) {\r\n        assertTrue(ArrayUtils.contains(array1, element), () -> \"Element \" + element + \" not found\");\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ArrayUtilsTest.java",
  "methodName" : "testShuffleCharRandom",
  "sourceCode" : "@Test\r\nvoid testShuffleCharRandom() {\r\n    // Don't use a \"small\" array, reduce spurious failures.\r\n    final char[] array1 = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 };\r\n    final char[] array2 = ArrayUtils.clone(array1);\r\n    ArrayUtils.shuffle(array1, seededRandom());\r\n    assertFalse(Arrays.equals(array1, array2));\r\n    for (final char element : array2) {\r\n        assertTrue(ArrayUtils.contains(array1, element), () -> \"Element \" + element + \" not found\");\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ArrayUtilsTest.java",
  "methodName" : "testShuffleDouble",
  "sourceCode" : "@Test\r\nvoid testShuffleDouble() {\r\n    // Don't use a \"small\" array, reduce spurious failures.\r\n    final double[] array1 = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 };\r\n    final double[] array2 = ArrayUtils.clone(array1);\r\n    ArrayUtils.shuffle(array1);\r\n    assertFalse(Arrays.equals(array1, array2));\r\n    for (final double element : array2) {\r\n        assertTrue(ArrayUtils.contains(array1, element), () -> \"Element \" + element + \" not found\");\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ArrayUtilsTest.java",
  "methodName" : "testShuffleDoubleRandom",
  "sourceCode" : "@Test\r\nvoid testShuffleDoubleRandom() {\r\n    // Don't use a \"small\" array, reduce spurious failures.\r\n    final double[] array1 = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 };\r\n    final double[] array2 = ArrayUtils.clone(array1);\r\n    ArrayUtils.shuffle(array1, seededRandom());\r\n    assertFalse(Arrays.equals(array1, array2));\r\n    for (final double element : array2) {\r\n        assertTrue(ArrayUtils.contains(array1, element), () -> \"Element \" + element + \" not found\");\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ArrayUtilsTest.java",
  "methodName" : "testShuffleFloat",
  "sourceCode" : "@Test\r\nvoid testShuffleFloat() {\r\n    // Don't use a \"small\" array, reduce spurious failures.\r\n    final float[] array1 = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 };\r\n    final float[] array2 = ArrayUtils.clone(array1);\r\n    ArrayUtils.shuffle(array1);\r\n    assertFalse(Arrays.equals(array1, array2));\r\n    for (final float element : array2) {\r\n        assertTrue(ArrayUtils.contains(array1, element), () -> \"Element \" + element + \" not found\");\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ArrayUtilsTest.java",
  "methodName" : "testShuffleFloatRandom",
  "sourceCode" : "@Test\r\nvoid testShuffleFloatRandom() {\r\n    // Don't use a \"small\" array, reduce spurious failures.\r\n    final float[] array1 = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 };\r\n    final float[] array2 = ArrayUtils.clone(array1);\r\n    ArrayUtils.shuffle(array1, seededRandom());\r\n    assertFalse(Arrays.equals(array1, array2));\r\n    for (final float element : array2) {\r\n        assertTrue(ArrayUtils.contains(array1, element), () -> \"Element \" + element + \" not found\");\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ArrayUtilsTest.java",
  "methodName" : "testShuffleInt",
  "sourceCode" : "@Test\r\nvoid testShuffleInt() {\r\n    // Don't use a \"small\" array, reduce spurious failures.\r\n    final int[] array1 = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 };\r\n    final int[] array2 = ArrayUtils.clone(array1);\r\n    ArrayUtils.shuffle(array1, seededRandom());\r\n    assertFalse(Arrays.equals(array1, array2));\r\n    for (final int element : array2) {\r\n        assertTrue(ArrayUtils.contains(array1, element), () -> \"Element \" + element + \" not found\");\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ArrayUtilsTest.java",
  "methodName" : "testShuffleIntRandom",
  "sourceCode" : "@Test\r\nvoid testShuffleIntRandom() {\r\n    // Don't use a \"small\" array, reduce spurious failures.\r\n    final int[] array1 = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 };\r\n    final int[] array2 = ArrayUtils.clone(array1);\r\n    ArrayUtils.shuffle(array1);\r\n    assertFalse(Arrays.equals(array1, array2));\r\n    for (final int element : array2) {\r\n        assertTrue(ArrayUtils.contains(array1, element), () -> \"Element \" + element + \" not found\");\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ArrayUtilsTest.java",
  "methodName" : "testShuffleLong",
  "sourceCode" : "@Test\r\nvoid testShuffleLong() {\r\n    // Don't use a \"small\" array, reduce spurious failures.\r\n    final long[] array1 = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 };\r\n    final long[] array2 = ArrayUtils.clone(array1);\r\n    ArrayUtils.shuffle(array1);\r\n    assertFalse(Arrays.equals(array1, array2));\r\n    for (final long element : array2) {\r\n        assertTrue(ArrayUtils.contains(array1, element), () -> \"Element \" + element + \" not found\");\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ArrayUtilsTest.java",
  "methodName" : "testShuffleLongRandom",
  "sourceCode" : "@Test\r\nvoid testShuffleLongRandom() {\r\n    // Don't use a \"small\" array, reduce spurious failures.\r\n    final long[] array1 = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 };\r\n    final long[] array2 = ArrayUtils.clone(array1);\r\n    ArrayUtils.shuffle(array1, seededRandom());\r\n    assertFalse(Arrays.equals(array1, array2));\r\n    for (final long element : array2) {\r\n        assertTrue(ArrayUtils.contains(array1, element), () -> \"Element \" + element + \" not found\");\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ArrayUtilsTest.java",
  "methodName" : "testShuffleShort",
  "sourceCode" : "@Test\r\nvoid testShuffleShort() {\r\n    // Don't use a \"small\" array, reduce spurious failures.\r\n    final short[] array1 = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 };\r\n    final short[] array2 = ArrayUtils.clone(array1);\r\n    ArrayUtils.shuffle(array1);\r\n    assertFalse(Arrays.equals(array1, array2));\r\n    for (final short element : array2) {\r\n        assertTrue(ArrayUtils.contains(array1, element), () -> \"Element \" + element + \" not found\");\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ArrayUtilsTest.java",
  "methodName" : "testShuffleShortRandom",
  "sourceCode" : "@Test\r\nvoid testShuffleShortRandom() {\r\n    // Don't use a \"small\" array, reduce spurious failures.\r\n    final short[] array1 = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 };\r\n    final short[] array2 = ArrayUtils.clone(array1);\r\n    ArrayUtils.shuffle(array1, seededRandom());\r\n    assertFalse(Arrays.equals(array1, array2));\r\n    for (final short element : array2) {\r\n        assertTrue(ArrayUtils.contains(array1, element), () -> \"Element \" + element + \" not found\");\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ArrayUtilsTest.java",
  "methodName" : "testShuffleString",
  "sourceCode" : "@Test\r\nvoid testShuffleString() {\r\n    // Don't use a \"small\" array, reduce spurious failures.\r\n    final String[] array1 = { \"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\" };\r\n    final String[] array2 = ArrayUtils.clone(array1);\r\n    ArrayUtils.shuffle(array1);\r\n    assertFalse(Arrays.equals(array1, array2));\r\n    for (final String element : array2) {\r\n        assertTrue(ArrayUtils.contains(array1, element), () -> \"Element \" + element + \" not found\");\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ArrayUtilsTest.java",
  "methodName" : "testShuffleStringRandom",
  "sourceCode" : "@Test\r\nvoid testShuffleStringRandom() {\r\n    // Don't use a \"small\" array, reduce spurious failures.\r\n    final String[] array1 = { \"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\" };\r\n    final String[] array2 = ArrayUtils.clone(array1);\r\n    ArrayUtils.shuffle(array1, seededRandom());\r\n    assertFalse(Arrays.equals(array1, array2));\r\n    for (final String element : array2) {\r\n        assertTrue(ArrayUtils.contains(array1, element), () -> \"Element \" + element + \" not found\");\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ArrayUtilsTest.java",
  "methodName" : "testStartsWith",
  "sourceCode" : "@Test\r\nvoid testStartsWith() {\r\n    // edge cases\r\n    assertTrue(ArrayUtils.startsWith(null, null));\r\n    assertFalse(ArrayUtils.startsWith(ArrayUtils.EMPTY_BYTE_ARRAY, null));\r\n    assertFalse(ArrayUtils.startsWith(null, ArrayUtils.EMPTY_BYTE_ARRAY));\r\n    assertTrue(ArrayUtils.startsWith(ArrayUtils.EMPTY_BYTE_ARRAY, ArrayUtils.EMPTY_BYTE_ARRAY));\r\n    assertTrue(ArrayUtils.startsWith(new byte[0], new byte[0]));\r\n    // normal cases\r\n    assertTrue(ArrayUtils.startsWith(new byte[10], new byte[10]));\r\n    assertTrue(ArrayUtils.startsWith(new byte[10], new byte[9]));\r\n    assertTrue(ArrayUtils.startsWith(new byte[10], new byte[1]));\r\n    final byte[] sig = \"Signature\".getBytes(StandardCharsets.US_ASCII);\r\n    final byte[] data = new byte[1024];\r\n    // data is 0\r\n    assertFalse(ArrayUtils.startsWith(data, sig));\r\n    // data is 1 short for expected at the end\r\n    System.arraycopy(sig, 0, data, 0, sig.length - 1);\r\n    assertFalse(ArrayUtils.startsWith(data, sig));\r\n    // data is mimatched at the start\r\n    System.arraycopy(sig, 0, data, 0, sig.length);\r\n    data[0] = 0;\r\n    assertFalse(ArrayUtils.startsWith(data, sig));\r\n    // data is as expected\r\n    System.arraycopy(sig, 0, data, 0, sig.length);\r\n    assertTrue(ArrayUtils.startsWith(data, sig));\r\n    // expected len > data len\r\n    assertFalse(ArrayUtils.startsWith(new byte[1], new byte[2]));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ArrayUtilsTest.java",
  "methodName" : "testSubarrayBoolean",
  "sourceCode" : "@Test\r\nvoid testSubarrayBoolean() {\r\n    final boolean[] nullArray = null;\r\n    final boolean[] array = { true, true, false, true, false, true };\r\n    final boolean[] leftSubarray = { true, true, false, true };\r\n    final boolean[] midSubarray = { true, false, true, false };\r\n    final boolean[] rightSubarray = { false, true, false, true };\r\n    assertTrue(ArrayUtils.isEquals(leftSubarray, ArrayUtils.subarray(array, 0, 4)), \"0 start, mid end\");\r\n    assertTrue(ArrayUtils.isEquals(array, ArrayUtils.subarray(array, 0, array.length)), \"0 start, length end\");\r\n    assertTrue(ArrayUtils.isEquals(midSubarray, ArrayUtils.subarray(array, 1, 5)), \"mid start, mid end\");\r\n    assertTrue(ArrayUtils.isEquals(rightSubarray, ArrayUtils.subarray(array, 2, array.length)), \"mid start, length end\");\r\n    assertNull(ArrayUtils.subarray(nullArray, 0, 3), \"null input\");\r\n    assertEquals(ArrayUtils.EMPTY_BOOLEAN_ARRAY, ArrayUtils.subarray(ArrayUtils.EMPTY_BOOLEAN_ARRAY, 1, 2), \"empty array\");\r\n    assertEquals(ArrayUtils.EMPTY_BOOLEAN_ARRAY, ArrayUtils.subarray(array, 4, 2), \"start > end\");\r\n    assertEquals(ArrayUtils.EMPTY_BOOLEAN_ARRAY, ArrayUtils.subarray(array, 3, 3), \"start == end\");\r\n    assertTrue(ArrayUtils.isEquals(leftSubarray, ArrayUtils.subarray(array, -2, 4)), \"start undershoot, normal end\");\r\n    assertEquals(ArrayUtils.EMPTY_BOOLEAN_ARRAY, ArrayUtils.subarray(array, 33, 4), \"start overshoot, any end\");\r\n    assertTrue(ArrayUtils.isEquals(rightSubarray, ArrayUtils.subarray(array, 2, 33)), \"normal start, end overshoot\");\r\n    assertTrue(ArrayUtils.isEquals(array, ArrayUtils.subarray(array, -2, 12)), \"start undershoot, end overshoot\");\r\n    // empty-return tests\r\n    assertSame(ArrayUtils.EMPTY_BOOLEAN_ARRAY, ArrayUtils.subarray(ArrayUtils.EMPTY_BOOLEAN_ARRAY, 1, 2), \"empty array, object test\");\r\n    assertSame(ArrayUtils.EMPTY_BOOLEAN_ARRAY, ArrayUtils.subarray(array, 4, 1), \"start > end, object test\");\r\n    assertSame(ArrayUtils.EMPTY_BOOLEAN_ARRAY, ArrayUtils.subarray(array, 3, 3), \"start == end, object test\");\r\n    assertSame(ArrayUtils.EMPTY_BOOLEAN_ARRAY, ArrayUtils.subarray(array, 8733, 4), \"start overshoot, any end, object test\");\r\n    // array type tests\r\n    assertSame(boolean.class, ArrayUtils.subarray(array, 2, 4).getClass().getComponentType(), \"boolean type\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ArrayUtilsTest.java",
  "methodName" : "testSubarrayByte",
  "sourceCode" : "@Test\r\nvoid testSubarrayByte() {\r\n    final byte[] nullArray = null;\r\n    final byte[] array = { 10, 11, 12, 13, 14, 15 };\r\n    final byte[] leftSubarray = { 10, 11, 12, 13 };\r\n    final byte[] midSubarray = { 11, 12, 13, 14 };\r\n    final byte[] rightSubarray = { 12, 13, 14, 15 };\r\n    assertTrue(ArrayUtils.isEquals(leftSubarray, ArrayUtils.subarray(array, 0, 4)), \"0 start, mid end\");\r\n    assertTrue(ArrayUtils.isEquals(array, ArrayUtils.subarray(array, 0, array.length)), \"0 start, length end\");\r\n    assertTrue(ArrayUtils.isEquals(midSubarray, ArrayUtils.subarray(array, 1, 5)), \"mid start, mid end\");\r\n    assertTrue(ArrayUtils.isEquals(rightSubarray, ArrayUtils.subarray(array, 2, array.length)), \"mid start, length end\");\r\n    assertNull(ArrayUtils.subarray(nullArray, 0, 3), \"null input\");\r\n    assertEquals(ArrayUtils.EMPTY_BYTE_ARRAY, ArrayUtils.subarray(ArrayUtils.EMPTY_BYTE_ARRAY, 1, 2), \"empty array\");\r\n    assertEquals(ArrayUtils.EMPTY_BYTE_ARRAY, ArrayUtils.subarray(array, 4, 2), \"start > end\");\r\n    assertEquals(ArrayUtils.EMPTY_BYTE_ARRAY, ArrayUtils.subarray(array, 3, 3), \"start == end\");\r\n    assertTrue(ArrayUtils.isEquals(leftSubarray, ArrayUtils.subarray(array, -2, 4)), \"start undershoot, normal end\");\r\n    assertEquals(ArrayUtils.EMPTY_BYTE_ARRAY, ArrayUtils.subarray(array, 33, 4), \"start overshoot, any end\");\r\n    assertTrue(ArrayUtils.isEquals(rightSubarray, ArrayUtils.subarray(array, 2, 33)), \"normal start, end overshoot\");\r\n    assertTrue(ArrayUtils.isEquals(array, ArrayUtils.subarray(array, -2, 12)), \"start undershoot, end overshoot\");\r\n    // empty-return tests\r\n    assertSame(ArrayUtils.EMPTY_BYTE_ARRAY, ArrayUtils.subarray(ArrayUtils.EMPTY_BYTE_ARRAY, 1, 2), \"empty array, object test\");\r\n    assertSame(ArrayUtils.EMPTY_BYTE_ARRAY, ArrayUtils.subarray(array, 4, 1), \"start > end, object test\");\r\n    assertSame(ArrayUtils.EMPTY_BYTE_ARRAY, ArrayUtils.subarray(array, 3, 3), \"start == end, object test\");\r\n    assertSame(ArrayUtils.EMPTY_BYTE_ARRAY, ArrayUtils.subarray(array, 8733, 4), \"start overshoot, any end, object test\");\r\n    // array type tests\r\n    assertSame(byte.class, ArrayUtils.subarray(array, 2, 4).getClass().getComponentType(), \"byte type\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ArrayUtilsTest.java",
  "methodName" : "testSubarrayDouble",
  "sourceCode" : "@Test\r\nvoid testSubarrayDouble() {\r\n    final double[] nullArray = null;\r\n    final double[] array = { 10.123, 11.234, 12.345, 13.456, 14.567, 15.678 };\r\n    final double[] leftSubarray = { 10.123, 11.234, 12.345, 13.456 };\r\n    final double[] midSubarray = { 11.234, 12.345, 13.456, 14.567 };\r\n    final double[] rightSubarray = { 12.345, 13.456, 14.567, 15.678 };\r\n    assertTrue(ArrayUtils.isEquals(leftSubarray, ArrayUtils.subarray(array, 0, 4)), \"0 start, mid end\");\r\n    assertTrue(ArrayUtils.isEquals(array, ArrayUtils.subarray(array, 0, array.length)), \"0 start, length end\");\r\n    assertTrue(ArrayUtils.isEquals(midSubarray, ArrayUtils.subarray(array, 1, 5)), \"mid start, mid end\");\r\n    assertTrue(ArrayUtils.isEquals(rightSubarray, ArrayUtils.subarray(array, 2, array.length)), \"mid start, length end\");\r\n    assertNull(ArrayUtils.subarray(nullArray, 0, 3), \"null input\");\r\n    assertEquals(ArrayUtils.EMPTY_DOUBLE_ARRAY, ArrayUtils.subarray(ArrayUtils.EMPTY_DOUBLE_ARRAY, 1, 2), \"empty array\");\r\n    assertEquals(ArrayUtils.EMPTY_DOUBLE_ARRAY, ArrayUtils.subarray(array, 4, 2), \"start > end\");\r\n    assertEquals(ArrayUtils.EMPTY_DOUBLE_ARRAY, ArrayUtils.subarray(array, 3, 3), \"start == end\");\r\n    assertTrue(ArrayUtils.isEquals(leftSubarray, ArrayUtils.subarray(array, -2, 4)), \"start undershoot, normal end\");\r\n    assertEquals(ArrayUtils.EMPTY_DOUBLE_ARRAY, ArrayUtils.subarray(array, 33, 4), \"start overshoot, any end\");\r\n    assertTrue(ArrayUtils.isEquals(rightSubarray, ArrayUtils.subarray(array, 2, 33)), \"normal start, end overshoot\");\r\n    assertTrue(ArrayUtils.isEquals(array, ArrayUtils.subarray(array, -2, 12)), \"start undershoot, end overshoot\");\r\n    // empty-return tests\r\n    assertSame(ArrayUtils.EMPTY_DOUBLE_ARRAY, ArrayUtils.subarray(ArrayUtils.EMPTY_DOUBLE_ARRAY, 1, 2), \"empty array, object test\");\r\n    assertSame(ArrayUtils.EMPTY_DOUBLE_ARRAY, ArrayUtils.subarray(array, 4, 1), \"start > end, object test\");\r\n    assertSame(ArrayUtils.EMPTY_DOUBLE_ARRAY, ArrayUtils.subarray(array, 3, 3), \"start == end, object test\");\r\n    assertSame(ArrayUtils.EMPTY_DOUBLE_ARRAY, ArrayUtils.subarray(array, 8733, 4), \"start overshoot, any end, object test\");\r\n    // array type tests\r\n    assertSame(double.class, ArrayUtils.subarray(array, 2, 4).getClass().getComponentType(), \"double type\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ArrayUtilsTest.java",
  "methodName" : "testSubarrayFloat",
  "sourceCode" : "@Test\r\nvoid testSubarrayFloat() {\r\n    final float[] nullArray = null;\r\n    final float[] array = { 10, 11, 12, 13, 14, 15 };\r\n    final float[] leftSubarray = { 10, 11, 12, 13 };\r\n    final float[] midSubarray = { 11, 12, 13, 14 };\r\n    final float[] rightSubarray = { 12, 13, 14, 15 };\r\n    assertTrue(ArrayUtils.isEquals(leftSubarray, ArrayUtils.subarray(array, 0, 4)), \"0 start, mid end\");\r\n    assertTrue(ArrayUtils.isEquals(array, ArrayUtils.subarray(array, 0, array.length)), \"0 start, length end\");\r\n    assertTrue(ArrayUtils.isEquals(midSubarray, ArrayUtils.subarray(array, 1, 5)), \"mid start, mid end\");\r\n    assertTrue(ArrayUtils.isEquals(rightSubarray, ArrayUtils.subarray(array, 2, array.length)), \"mid start, length end\");\r\n    assertNull(ArrayUtils.subarray(nullArray, 0, 3), \"null input\");\r\n    assertEquals(ArrayUtils.EMPTY_FLOAT_ARRAY, ArrayUtils.subarray(ArrayUtils.EMPTY_FLOAT_ARRAY, 1, 2), \"empty array\");\r\n    assertEquals(ArrayUtils.EMPTY_FLOAT_ARRAY, ArrayUtils.subarray(array, 4, 2), \"start > end\");\r\n    assertEquals(ArrayUtils.EMPTY_FLOAT_ARRAY, ArrayUtils.subarray(array, 3, 3), \"start == end\");\r\n    assertTrue(ArrayUtils.isEquals(leftSubarray, ArrayUtils.subarray(array, -2, 4)), \"start undershoot, normal end\");\r\n    assertEquals(ArrayUtils.EMPTY_FLOAT_ARRAY, ArrayUtils.subarray(array, 33, 4), \"start overshoot, any end\");\r\n    assertTrue(ArrayUtils.isEquals(rightSubarray, ArrayUtils.subarray(array, 2, 33)), \"normal start, end overshoot\");\r\n    assertTrue(ArrayUtils.isEquals(array, ArrayUtils.subarray(array, -2, 12)), \"start undershoot, end overshoot\");\r\n    // empty-return tests\r\n    assertSame(ArrayUtils.EMPTY_FLOAT_ARRAY, ArrayUtils.subarray(ArrayUtils.EMPTY_FLOAT_ARRAY, 1, 2), \"empty array, object test\");\r\n    assertSame(ArrayUtils.EMPTY_FLOAT_ARRAY, ArrayUtils.subarray(array, 4, 1), \"start > end, object test\");\r\n    assertSame(ArrayUtils.EMPTY_FLOAT_ARRAY, ArrayUtils.subarray(array, 3, 3), \"start == end, object test\");\r\n    assertSame(ArrayUtils.EMPTY_FLOAT_ARRAY, ArrayUtils.subarray(array, 8733, 4), \"start overshoot, any end, object test\");\r\n    // array type tests\r\n    assertSame(float.class, ArrayUtils.subarray(array, 2, 4).getClass().getComponentType(), \"float type\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ArrayUtilsTest.java",
  "methodName" : "testSubarrayInt",
  "sourceCode" : "@Test\r\nvoid testSubarrayInt() {\r\n    final int[] nullArray = null;\r\n    final int[] array = { 10, 11, 12, 13, 14, 15 };\r\n    final int[] leftSubarray = { 10, 11, 12, 13 };\r\n    final int[] midSubarray = { 11, 12, 13, 14 };\r\n    final int[] rightSubarray = { 12, 13, 14, 15 };\r\n    assertTrue(ArrayUtils.isEquals(leftSubarray, ArrayUtils.subarray(array, 0, 4)), \"0 start, mid end\");\r\n    assertTrue(ArrayUtils.isEquals(array, ArrayUtils.subarray(array, 0, array.length)), \"0 start, length end\");\r\n    assertTrue(ArrayUtils.isEquals(midSubarray, ArrayUtils.subarray(array, 1, 5)), \"mid start, mid end\");\r\n    assertTrue(ArrayUtils.isEquals(rightSubarray, ArrayUtils.subarray(array, 2, array.length)), \"mid start, length end\");\r\n    assertNull(ArrayUtils.subarray(nullArray, 0, 3), \"null input\");\r\n    assertEquals(ArrayUtils.EMPTY_INT_ARRAY, ArrayUtils.subarray(ArrayUtils.EMPTY_INT_ARRAY, 1, 2), \"empty array\");\r\n    assertEquals(ArrayUtils.EMPTY_INT_ARRAY, ArrayUtils.subarray(array, 4, 2), \"start > end\");\r\n    assertEquals(ArrayUtils.EMPTY_INT_ARRAY, ArrayUtils.subarray(array, 3, 3), \"start == end\");\r\n    assertTrue(ArrayUtils.isEquals(leftSubarray, ArrayUtils.subarray(array, -2, 4)), \"start undershoot, normal end\");\r\n    assertEquals(ArrayUtils.EMPTY_INT_ARRAY, ArrayUtils.subarray(array, 33, 4), \"start overshoot, any end\");\r\n    assertTrue(ArrayUtils.isEquals(rightSubarray, ArrayUtils.subarray(array, 2, 33)), \"normal start, end overshoot\");\r\n    assertTrue(ArrayUtils.isEquals(array, ArrayUtils.subarray(array, -2, 12)), \"start undershoot, end overshoot\");\r\n    // empty-return tests\r\n    assertSame(ArrayUtils.EMPTY_INT_ARRAY, ArrayUtils.subarray(ArrayUtils.EMPTY_INT_ARRAY, 1, 2), \"empty array, object test\");\r\n    assertSame(ArrayUtils.EMPTY_INT_ARRAY, ArrayUtils.subarray(array, 4, 1), \"start > end, object test\");\r\n    assertSame(ArrayUtils.EMPTY_INT_ARRAY, ArrayUtils.subarray(array, 3, 3), \"start == end, object test\");\r\n    assertSame(ArrayUtils.EMPTY_INT_ARRAY, ArrayUtils.subarray(array, 8733, 4), \"start overshoot, any end, object test\");\r\n    // array type tests\r\n    assertSame(int.class, ArrayUtils.subarray(array, 2, 4).getClass().getComponentType(), \"int type\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ArrayUtilsTest.java",
  "methodName" : "testSubarrayLong",
  "sourceCode" : "@Test\r\nvoid testSubarrayLong() {\r\n    final long[] nullArray = null;\r\n    final long[] array = { 999910, 999911, 999912, 999913, 999914, 999915 };\r\n    final long[] leftSubarray = { 999910, 999911, 999912, 999913 };\r\n    final long[] midSubarray = { 999911, 999912, 999913, 999914 };\r\n    final long[] rightSubarray = { 999912, 999913, 999914, 999915 };\r\n    assertTrue(ArrayUtils.isEquals(leftSubarray, ArrayUtils.subarray(array, 0, 4)), \"0 start, mid end\");\r\n    assertTrue(ArrayUtils.isEquals(array, ArrayUtils.subarray(array, 0, array.length)), \"0 start, length end\");\r\n    assertTrue(ArrayUtils.isEquals(midSubarray, ArrayUtils.subarray(array, 1, 5)), \"mid start, mid end\");\r\n    assertTrue(ArrayUtils.isEquals(rightSubarray, ArrayUtils.subarray(array, 2, array.length)), \"mid start, length end\");\r\n    assertNull(ArrayUtils.subarray(nullArray, 0, 3), \"null input\");\r\n    assertEquals(ArrayUtils.EMPTY_LONG_ARRAY, ArrayUtils.subarray(ArrayUtils.EMPTY_LONG_ARRAY, 1, 2), \"empty array\");\r\n    assertEquals(ArrayUtils.EMPTY_LONG_ARRAY, ArrayUtils.subarray(array, 4, 2), \"start > end\");\r\n    assertEquals(ArrayUtils.EMPTY_LONG_ARRAY, ArrayUtils.subarray(array, 3, 3), \"start == end\");\r\n    assertTrue(ArrayUtils.isEquals(leftSubarray, ArrayUtils.subarray(array, -2, 4)), \"start undershoot, normal end\");\r\n    assertEquals(ArrayUtils.EMPTY_LONG_ARRAY, ArrayUtils.subarray(array, 33, 4), \"start overshoot, any end\");\r\n    assertTrue(ArrayUtils.isEquals(rightSubarray, ArrayUtils.subarray(array, 2, 33)), \"normal start, end overshoot\");\r\n    assertTrue(ArrayUtils.isEquals(array, ArrayUtils.subarray(array, -2, 12)), \"start undershoot, end overshoot\");\r\n    // empty-return tests\r\n    assertSame(ArrayUtils.EMPTY_LONG_ARRAY, ArrayUtils.subarray(ArrayUtils.EMPTY_LONG_ARRAY, 1, 2), \"empty array, object test\");\r\n    assertSame(ArrayUtils.EMPTY_LONG_ARRAY, ArrayUtils.subarray(array, 4, 1), \"start > end, object test\");\r\n    assertSame(ArrayUtils.EMPTY_LONG_ARRAY, ArrayUtils.subarray(array, 3, 3), \"start == end, object test\");\r\n    assertSame(ArrayUtils.EMPTY_LONG_ARRAY, ArrayUtils.subarray(array, 8733, 4), \"start overshoot, any end, object test\");\r\n    // array type tests\r\n    assertSame(long.class, ArrayUtils.subarray(array, 2, 4).getClass().getComponentType(), \"long type\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ArrayUtilsTest.java",
  "methodName" : "testSubarrayObject",
  "sourceCode" : "@Test\r\nvoid testSubarrayObject() {\r\n    final Object[] nullArray = null;\r\n    final Object[] objectArray = { \"a\", \"b\", \"c\", \"d\", \"e\", \"f\" };\r\n    assertEquals(\"abcd\", StringUtils.join(ArrayUtils.subarray(objectArray, 0, 4)), \"0 start, mid end\");\r\n    assertEquals(\"abcdef\", StringUtils.join(ArrayUtils.subarray(objectArray, 0, objectArray.length)), \"0 start, length end\");\r\n    assertEquals(\"bcd\", StringUtils.join(ArrayUtils.subarray(objectArray, 1, 4)), \"mid start, mid end\");\r\n    assertEquals(\"bcdef\", StringUtils.join(ArrayUtils.subarray(objectArray, 1, objectArray.length)), \"mid start, length end\");\r\n    assertNull(ArrayUtils.subarray(nullArray, 0, 3), \"null input\");\r\n    assertEquals(\"\", StringUtils.join(ArrayUtils.subarray(ArrayUtils.EMPTY_OBJECT_ARRAY, 1, 2)), \"empty array\");\r\n    assertEquals(\"\", StringUtils.join(ArrayUtils.subarray(objectArray, 4, 2)), \"start > end\");\r\n    assertEquals(\"\", StringUtils.join(ArrayUtils.subarray(objectArray, 3, 3)), \"start == end\");\r\n    assertEquals(\"abcd\", StringUtils.join(ArrayUtils.subarray(objectArray, -2, 4)), \"start undershoot, normal end\");\r\n    assertEquals(\"\", StringUtils.join(ArrayUtils.subarray(objectArray, 33, 4)), \"start overshoot, any end\");\r\n    assertEquals(\"cdef\", StringUtils.join(ArrayUtils.subarray(objectArray, 2, 33)), \"normal start, end overshoot\");\r\n    assertEquals(\"abcdef\", StringUtils.join(ArrayUtils.subarray(objectArray, -2, 12)), \"start undershoot, end overshoot\");\r\n    // array type tests\r\n    final Date[] dateArray = { new java.sql.Date(new Date().getTime()), new Date(), new Date(), new Date(), new Date() };\r\n    assertSame(Object.class, ArrayUtils.subarray(objectArray, 2, 4).getClass().getComponentType(), \"Object type\");\r\n    assertSame(Date.class, ArrayUtils.subarray(dateArray, 1, 4).getClass().getComponentType(), \"java.util.Date type\");\r\n    assertNotSame(java.sql.Date.class, ArrayUtils.subarray(dateArray, 1, 4).getClass().getComponentType(), \"java.sql.Date type\");\r\n    assertThrows(ClassCastException.class, () -> java.sql.Date[].class.cast(ArrayUtils.subarray(dateArray, 1, 3)), \"Invalid downcast\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ArrayUtilsTest.java",
  "methodName" : "testSubarrayShort",
  "sourceCode" : "@Test\r\nvoid testSubarrayShort() {\r\n    final short[] nullArray = null;\r\n    final short[] array = { 10, 11, 12, 13, 14, 15 };\r\n    final short[] leftSubarray = { 10, 11, 12, 13 };\r\n    final short[] midSubarray = { 11, 12, 13, 14 };\r\n    final short[] rightSubarray = { 12, 13, 14, 15 };\r\n    assertTrue(ArrayUtils.isEquals(leftSubarray, ArrayUtils.subarray(array, 0, 4)), \"0 start, mid end\");\r\n    assertTrue(ArrayUtils.isEquals(array, ArrayUtils.subarray(array, 0, array.length)), \"0 start, length end\");\r\n    assertTrue(ArrayUtils.isEquals(midSubarray, ArrayUtils.subarray(array, 1, 5)), \"mid start, mid end\");\r\n    assertTrue(ArrayUtils.isEquals(rightSubarray, ArrayUtils.subarray(array, 2, array.length)), \"mid start, length end\");\r\n    assertNull(ArrayUtils.subarray(nullArray, 0, 3), \"null input\");\r\n    assertEquals(ArrayUtils.EMPTY_SHORT_ARRAY, ArrayUtils.subarray(ArrayUtils.EMPTY_SHORT_ARRAY, 1, 2), \"empty array\");\r\n    assertEquals(ArrayUtils.EMPTY_SHORT_ARRAY, ArrayUtils.subarray(array, 4, 2), \"start > end\");\r\n    assertEquals(ArrayUtils.EMPTY_SHORT_ARRAY, ArrayUtils.subarray(array, 3, 3), \"start == end\");\r\n    assertTrue(ArrayUtils.isEquals(leftSubarray, ArrayUtils.subarray(array, -2, 4)), \"start undershoot, normal end\");\r\n    assertEquals(ArrayUtils.EMPTY_SHORT_ARRAY, ArrayUtils.subarray(array, 33, 4), \"start overshoot, any end\");\r\n    assertTrue(ArrayUtils.isEquals(rightSubarray, ArrayUtils.subarray(array, 2, 33)), \"normal start, end overshoot\");\r\n    assertTrue(ArrayUtils.isEquals(array, ArrayUtils.subarray(array, -2, 12)), \"start undershoot, end overshoot\");\r\n    // empty-return tests\r\n    assertSame(ArrayUtils.EMPTY_SHORT_ARRAY, ArrayUtils.subarray(ArrayUtils.EMPTY_SHORT_ARRAY, 1, 2), \"empty array, object test\");\r\n    assertSame(ArrayUtils.EMPTY_SHORT_ARRAY, ArrayUtils.subarray(array, 4, 1), \"start > end, object test\");\r\n    assertSame(ArrayUtils.EMPTY_SHORT_ARRAY, ArrayUtils.subarray(array, 3, 3), \"start == end, object test\");\r\n    assertSame(ArrayUtils.EMPTY_SHORT_ARRAY, ArrayUtils.subarray(array, 8733, 4), \"start overshoot, any end, object test\");\r\n    // array type tests\r\n    assertSame(short.class, ArrayUtils.subarray(array, 2, 4).getClass().getComponentType(), \"short type\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ArrayUtilsTest.java",
  "methodName" : "testSubarrChar",
  "sourceCode" : "@Test\r\nvoid testSubarrChar() {\r\n    final char[] nullArray = null;\r\n    final char[] array = { 'a', 'b', 'c', 'd', 'e', 'f' };\r\n    final char[] leftSubarray = { 'a', 'b', 'c', 'd' };\r\n    final char[] midSubarray = { 'b', 'c', 'd', 'e' };\r\n    final char[] rightSubarray = { 'c', 'd', 'e', 'f' };\r\n    assertTrue(ArrayUtils.isEquals(leftSubarray, ArrayUtils.subarray(array, 0, 4)), \"0 start, mid end\");\r\n    assertTrue(ArrayUtils.isEquals(array, ArrayUtils.subarray(array, 0, array.length)), \"0 start, length end\");\r\n    assertTrue(ArrayUtils.isEquals(midSubarray, ArrayUtils.subarray(array, 1, 5)), \"mid start, mid end\");\r\n    assertTrue(ArrayUtils.isEquals(rightSubarray, ArrayUtils.subarray(array, 2, array.length)), \"mid start, length end\");\r\n    assertNull(ArrayUtils.subarray(nullArray, 0, 3), \"null input\");\r\n    assertEquals(ArrayUtils.EMPTY_CHAR_ARRAY, ArrayUtils.subarray(ArrayUtils.EMPTY_CHAR_ARRAY, 1, 2), \"empty array\");\r\n    assertEquals(ArrayUtils.EMPTY_CHAR_ARRAY, ArrayUtils.subarray(array, 4, 2), \"start > end\");\r\n    assertEquals(ArrayUtils.EMPTY_CHAR_ARRAY, ArrayUtils.subarray(array, 3, 3), \"start == end\");\r\n    assertTrue(ArrayUtils.isEquals(leftSubarray, ArrayUtils.subarray(array, -2, 4)), \"start undershoot, normal end\");\r\n    assertEquals(ArrayUtils.EMPTY_CHAR_ARRAY, ArrayUtils.subarray(array, 33, 4), \"start overshoot, any end\");\r\n    assertTrue(ArrayUtils.isEquals(rightSubarray, ArrayUtils.subarray(array, 2, 33)), \"normal start, end overshoot\");\r\n    assertTrue(ArrayUtils.isEquals(array, ArrayUtils.subarray(array, -2, 12)), \"start undershoot, end overshoot\");\r\n    // empty-return tests\r\n    assertSame(ArrayUtils.EMPTY_CHAR_ARRAY, ArrayUtils.subarray(ArrayUtils.EMPTY_CHAR_ARRAY, 1, 2), \"empty array, object test\");\r\n    assertSame(ArrayUtils.EMPTY_CHAR_ARRAY, ArrayUtils.subarray(array, 4, 1), \"start > end, object test\");\r\n    assertSame(ArrayUtils.EMPTY_CHAR_ARRAY, ArrayUtils.subarray(array, 3, 3), \"start == end, object test\");\r\n    assertSame(ArrayUtils.EMPTY_CHAR_ARRAY, ArrayUtils.subarray(array, 8733, 4), \"start overshoot, any end, object test\");\r\n    // array type tests\r\n    assertSame(char.class, ArrayUtils.subarray(array, 2, 4).getClass().getComponentType(), \"char type\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ArrayUtilsTest.java",
  "methodName" : "testSwapBoolean",
  "sourceCode" : "@Test\r\nvoid testSwapBoolean() {\r\n    final boolean[] array = { true, false, false };\r\n    ArrayUtils.swap(array, 0, 2);\r\n    assertFalse(array[0]);\r\n    assertFalse(array[1]);\r\n    assertTrue(array[2]);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ArrayUtilsTest.java",
  "methodName" : "testSwapBooleanRange",
  "sourceCode" : "@Test\r\nvoid testSwapBooleanRange() {\r\n    // edge cases where nothing happens\r\n    ArrayUtils.swap((boolean[]) null, 0, 2, 1);\r\n    ArrayUtils.swap(new boolean[0], 0, 2, 1);\r\n    final boolean[] array3a = { true, false, true };\r\n    final boolean[] array3b = array3a.clone();\r\n    // (1) offset1 >= array.length\r\n    ArrayUtils.swap(array3b, array3b.length, 2, 1);\r\n    assertArrayEquals(array3a, array3b);\r\n    // (2) offset2 >= array.length\r\n    ArrayUtils.swap(array3b, 0, array3b.length, 1);\r\n    assertArrayEquals(array3a, array3b);\r\n    // tests\r\n    boolean[] array = { false, false, true, true };\r\n    ArrayUtils.swap(array, 0, 2, 2);\r\n    assertTrue(array[0]);\r\n    assertTrue(array[1]);\r\n    assertFalse(array[2]);\r\n    assertFalse(array[3]);\r\n    array = new boolean[] { false, true, false };\r\n    ArrayUtils.swap(array, 0, 3);\r\n    assertFalse(array[0]);\r\n    assertTrue(array[1]);\r\n    assertFalse(array[2]);\r\n    array = new boolean[] { true, true, false };\r\n    ArrayUtils.swap(array, 0, 2, 2);\r\n    assertFalse(array[0]);\r\n    assertTrue(array[1]);\r\n    assertTrue(array[2]);\r\n    array = new boolean[] { true, true, false };\r\n    ArrayUtils.swap(array, -1, 2, 2);\r\n    assertFalse(array[0]);\r\n    assertTrue(array[1]);\r\n    assertTrue(array[2]);\r\n    array = new boolean[] { true, true, false };\r\n    ArrayUtils.swap(array, 0, -1, 2);\r\n    assertTrue(array[0]);\r\n    assertTrue(array[1]);\r\n    assertFalse(array[2]);\r\n    array = new boolean[] { true, true, false };\r\n    ArrayUtils.swap(array, -1, -1, 2);\r\n    assertTrue(array[0]);\r\n    assertTrue(array[1]);\r\n    assertFalse(array[2]);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ArrayUtilsTest.java",
  "methodName" : "testSwapByte",
  "sourceCode" : "@Test\r\nvoid testSwapByte() {\r\n    final byte[] array = { 1, 2, 3 };\r\n    ArrayUtils.swap(array, 0, 2);\r\n    assertEquals(3, array[0]);\r\n    assertEquals(2, array[1]);\r\n    assertEquals(1, array[2]);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ArrayUtilsTest.java",
  "methodName" : "testSwapByteRange",
  "sourceCode" : "@Test\r\nvoid testSwapByteRange() {\r\n    // edge cases where nothing happens\r\n    ArrayUtils.swap((byte[]) null, 0, 2, 1);\r\n    ArrayUtils.swap(new byte[0], 0, 2, 1);\r\n    final byte[] array3a = { 1, 0, 1 };\r\n    final byte[] array3b = array3a.clone();\r\n    // (1) offset1 >= array.length\r\n    ArrayUtils.swap(array3b, array3b.length, 2, 1);\r\n    assertArrayEquals(array3a, array3b);\r\n    // (2) offset2 >= array.length\r\n    ArrayUtils.swap(array3b, 0, array3b.length, 1);\r\n    assertArrayEquals(array3a, array3b);\r\n    // tests\r\n    byte[] array = { 1, 2, 3, 4 };\r\n    ArrayUtils.swap(array, 0, 2, 2);\r\n    assertEquals(3, array[0]);\r\n    assertEquals(4, array[1]);\r\n    assertEquals(1, array[2]);\r\n    assertEquals(2, array[3]);\r\n    array = new byte[] { 1, 2, 3 };\r\n    ArrayUtils.swap(array, 0, 3);\r\n    assertEquals(1, array[0]);\r\n    assertEquals(2, array[1]);\r\n    assertEquals(3, array[2]);\r\n    array = new byte[] { 1, 2, 3 };\r\n    ArrayUtils.swap(array, 0, 2, 2);\r\n    assertEquals(3, array[0]);\r\n    assertEquals(2, array[1]);\r\n    assertEquals(1, array[2]);\r\n    array = new byte[] { 1, 2, 3 };\r\n    ArrayUtils.swap(array, -1, 2, 2);\r\n    assertEquals(3, array[0]);\r\n    assertEquals(2, array[1]);\r\n    assertEquals(1, array[2]);\r\n    array = new byte[] { 1, 2, 3 };\r\n    ArrayUtils.swap(array, 0, -1, 2);\r\n    assertEquals(1, array[0]);\r\n    assertEquals(2, array[1]);\r\n    assertEquals(3, array[2]);\r\n    array = new byte[] { 1, 2, 3 };\r\n    ArrayUtils.swap(array, -1, -1, 2);\r\n    assertEquals(1, array[0]);\r\n    assertEquals(2, array[1]);\r\n    assertEquals(3, array[2]);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ArrayUtilsTest.java",
  "methodName" : "testSwapChar",
  "sourceCode" : "@Test\r\nvoid testSwapChar() {\r\n    char[] array = { 1, 2, 3 };\r\n    ArrayUtils.swap(array, 0, 2);\r\n    assertArrayEquals(new char[] { 3, 2, 1 }, array);\r\n    array = new char[] { 1, 2, 3 };\r\n    ArrayUtils.swap(array, 0, 0);\r\n    assertArrayEquals(new char[] { 1, 2, 3 }, array);\r\n    array = new char[] { 1, 2, 3 };\r\n    ArrayUtils.swap(array, 1, 0);\r\n    assertArrayEquals(new char[] { 2, 1, 3 }, array);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ArrayUtilsTest.java",
  "methodName" : "testSwapCharRange",
  "sourceCode" : "@Test\r\nvoid testSwapCharRange() {\r\n    // edge cases where nothing happens\r\n    ArrayUtils.swap((char[]) null, 0, 2, 1);\r\n    ArrayUtils.swap(new char[0], 0, 2, 1);\r\n    final char[] array3a = { 1, 0, 1 };\r\n    final char[] array3b = array3a.clone();\r\n    // (1) offset1 >= array.length\r\n    ArrayUtils.swap(array3b, array3b.length, 2, 1);\r\n    assertArrayEquals(array3a, array3b);\r\n    // (2) offset2 >= array.length\r\n    ArrayUtils.swap(array3b, 0, array3b.length, 1);\r\n    assertArrayEquals(array3a, array3b);\r\n    // tests\r\n    char[] array = { 1, 2, 3, 4 };\r\n    ArrayUtils.swap(array, 0, 2, 2);\r\n    assertEquals(3, array[0]);\r\n    assertEquals(4, array[1]);\r\n    assertEquals(1, array[2]);\r\n    assertEquals(2, array[3]);\r\n    array = new char[] { 1, 2, 3 };\r\n    ArrayUtils.swap(array, 0, 3);\r\n    assertEquals(1, array[0]);\r\n    assertEquals(2, array[1]);\r\n    assertEquals(3, array[2]);\r\n    array = new char[] { 1, 2, 3 };\r\n    ArrayUtils.swap(array, 0, 2, 2);\r\n    assertEquals(3, array[0]);\r\n    assertEquals(2, array[1]);\r\n    assertEquals(1, array[2]);\r\n    array = new char[] { 1, 2, 3 };\r\n    ArrayUtils.swap(array, -1, 2, 2);\r\n    assertEquals(3, array[0]);\r\n    assertEquals(2, array[1]);\r\n    assertEquals(1, array[2]);\r\n    array = new char[] { 1, 2, 3 };\r\n    ArrayUtils.swap(array, 0, -1, 2);\r\n    assertEquals(1, array[0]);\r\n    assertEquals(2, array[1]);\r\n    assertEquals(3, array[2]);\r\n    array = new char[] { 1, 2, 3 };\r\n    ArrayUtils.swap(array, -1, -1, 2);\r\n    assertEquals(1, array[0]);\r\n    assertEquals(2, array[1]);\r\n    assertEquals(3, array[2]);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ArrayUtilsTest.java",
  "methodName" : "testSwapDouble",
  "sourceCode" : "@Test\r\nvoid testSwapDouble() {\r\n    final double[] array = { 1, 2, 3 };\r\n    ArrayUtils.swap(array, 0, 2);\r\n    assertEquals(3, array[0]);\r\n    assertEquals(2, array[1]);\r\n    assertEquals(1, array[2]);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ArrayUtilsTest.java",
  "methodName" : "testSwapDoubleRange",
  "sourceCode" : "@Test\r\nvoid testSwapDoubleRange() {\r\n    // edge cases where nothing happens\r\n    ArrayUtils.swap((double[]) null, 0, 2, 1);\r\n    ArrayUtils.swap(new double[0], 0, 2, 1);\r\n    final double[] array3a = { 1, 0, 1 };\r\n    final double[] array3b = array3a.clone();\r\n    // (1) offset1 >= array.length\r\n    ArrayUtils.swap(array3b, array3b.length, 2, 1);\r\n    assertArrayEquals(array3a, array3b);\r\n    // (2) offset2 >= array.length\r\n    ArrayUtils.swap(array3b, 0, array3b.length, 1);\r\n    assertArrayEquals(array3a, array3b);\r\n    // tests\r\n    double[] array = { 1, 2, 3, 4 };\r\n    ArrayUtils.swap(array, 0, 2, 2);\r\n    assertEquals(3, array[0]);\r\n    assertEquals(4, array[1]);\r\n    assertEquals(1, array[2]);\r\n    assertEquals(2, array[3]);\r\n    array = new double[] { 1, 2, 3 };\r\n    ArrayUtils.swap(array, 0, 3);\r\n    assertEquals(1, array[0]);\r\n    assertEquals(2, array[1]);\r\n    assertEquals(3, array[2]);\r\n    array = new double[] { 1, 2, 3 };\r\n    ArrayUtils.swap(array, 0, 2, 2);\r\n    assertEquals(3, array[0]);\r\n    assertEquals(2, array[1]);\r\n    assertEquals(1, array[2]);\r\n    array = new double[] { 1, 2, 3 };\r\n    ArrayUtils.swap(array, -1, 2, 2);\r\n    assertEquals(3, array[0]);\r\n    assertEquals(2, array[1]);\r\n    assertEquals(1, array[2]);\r\n    array = new double[] { 1, 2, 3 };\r\n    ArrayUtils.swap(array, 0, -1, 2);\r\n    assertEquals(1, array[0]);\r\n    assertEquals(2, array[1]);\r\n    assertEquals(3, array[2]);\r\n    array = new double[] { 1, 2, 3 };\r\n    ArrayUtils.swap(array, -1, -1, 2);\r\n    assertEquals(1, array[0]);\r\n    assertEquals(2, array[1]);\r\n    assertEquals(3, array[2]);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ArrayUtilsTest.java",
  "methodName" : "testSwapEmptyBooleanArray",
  "sourceCode" : "@Test\r\nvoid testSwapEmptyBooleanArray() {\r\n    final boolean[] array = {};\r\n    ArrayUtils.swap(array, 0, 2);\r\n    assertEquals(0, array.length);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ArrayUtilsTest.java",
  "methodName" : "testSwapEmptyByteArray",
  "sourceCode" : "@Test\r\nvoid testSwapEmptyByteArray() {\r\n    final byte[] array = {};\r\n    ArrayUtils.swap(array, 0, 2);\r\n    assertEquals(0, array.length);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ArrayUtilsTest.java",
  "methodName" : "testSwapEmptyCharArray",
  "sourceCode" : "@Test\r\nvoid testSwapEmptyCharArray() {\r\n    final char[] array = {};\r\n    ArrayUtils.swap(array, 0, 2);\r\n    assertEquals(0, array.length);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ArrayUtilsTest.java",
  "methodName" : "testSwapEmptyDoubleArray",
  "sourceCode" : "@Test\r\nvoid testSwapEmptyDoubleArray() {\r\n    final double[] array = {};\r\n    ArrayUtils.swap(array, 0, 2);\r\n    assertEquals(0, array.length);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ArrayUtilsTest.java",
  "methodName" : "testSwapEmptyFloatArray",
  "sourceCode" : "@Test\r\nvoid testSwapEmptyFloatArray() {\r\n    final float[] array = {};\r\n    ArrayUtils.swap(array, 0, 2);\r\n    assertEquals(0, array.length);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ArrayUtilsTest.java",
  "methodName" : "testSwapEmptyIntArray",
  "sourceCode" : "@Test\r\nvoid testSwapEmptyIntArray() {\r\n    final int[] array = {};\r\n    ArrayUtils.swap(array, 0, 2);\r\n    assertEquals(0, array.length);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ArrayUtilsTest.java",
  "methodName" : "testSwapEmptyLongArray",
  "sourceCode" : "@Test\r\nvoid testSwapEmptyLongArray() {\r\n    final long[] array = {};\r\n    ArrayUtils.swap(array, 0, 2);\r\n    assertEquals(0, array.length);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ArrayUtilsTest.java",
  "methodName" : "testSwapEmptyObjectArray",
  "sourceCode" : "@Test\r\nvoid testSwapEmptyObjectArray() {\r\n    final String[] array = {};\r\n    ArrayUtils.swap(array, 0, 2);\r\n    assertEquals(0, array.length);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ArrayUtilsTest.java",
  "methodName" : "testSwapEmptyShortArray",
  "sourceCode" : "@Test\r\nvoid testSwapEmptyShortArray() {\r\n    final short[] array = {};\r\n    ArrayUtils.swap(array, 0, 2);\r\n    assertEquals(0, array.length);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ArrayUtilsTest.java",
  "methodName" : "testSwapFloat",
  "sourceCode" : "@Test\r\nvoid testSwapFloat() {\r\n    final float[] array = { 1, 2, 3 };\r\n    ArrayUtils.swap(array, 0, 2);\r\n    assertEquals(3, array[0]);\r\n    assertEquals(2, array[1]);\r\n    assertEquals(1, array[2]);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ArrayUtilsTest.java",
  "methodName" : "testSwapFloatRange",
  "sourceCode" : "@Test\r\nvoid testSwapFloatRange() {\r\n    // edge cases where nothing happens\r\n    ArrayUtils.swap((float[]) null, 0, 2, 1);\r\n    ArrayUtils.swap(new float[0], 0, 2, 1);\r\n    final float[] array3a = { 1, 0, 1 };\r\n    final float[] array3b = array3a.clone();\r\n    // (1) offset1 >= array.length\r\n    ArrayUtils.swap(array3b, array3b.length, 2, 1);\r\n    assertArrayEquals(array3a, array3b);\r\n    // (2) offset2 >= array.length\r\n    ArrayUtils.swap(array3b, 0, array3b.length, 1);\r\n    assertArrayEquals(array3a, array3b);\r\n    // tests\r\n    float[] array = { 1, 2, 3, 4 };\r\n    ArrayUtils.swap(array, 0, 2, 2);\r\n    assertEquals(3, array[0]);\r\n    assertEquals(4, array[1]);\r\n    assertEquals(1, array[2]);\r\n    assertEquals(2, array[3]);\r\n    array = new float[] { 1, 2, 3 };\r\n    ArrayUtils.swap(array, 0, 3);\r\n    assertEquals(1, array[0]);\r\n    assertEquals(2, array[1]);\r\n    assertEquals(3, array[2]);\r\n    array = new float[] { 1, 2, 3 };\r\n    ArrayUtils.swap(array, 0, 2, 2);\r\n    assertEquals(3, array[0]);\r\n    assertEquals(2, array[1]);\r\n    assertEquals(1, array[2]);\r\n    array = new float[] { 1, 2, 3 };\r\n    ArrayUtils.swap(array, -1, 2, 2);\r\n    assertEquals(3, array[0]);\r\n    assertEquals(2, array[1]);\r\n    assertEquals(1, array[2]);\r\n    array = new float[] { 1, 2, 3 };\r\n    ArrayUtils.swap(array, 0, -1, 2);\r\n    assertEquals(1, array[0]);\r\n    assertEquals(2, array[1]);\r\n    assertEquals(3, array[2]);\r\n    array = new float[] { 1, 2, 3 };\r\n    ArrayUtils.swap(array, -1, -1, 2);\r\n    assertEquals(1, array[0]);\r\n    assertEquals(2, array[1]);\r\n    assertEquals(3, array[2]);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ArrayUtilsTest.java",
  "methodName" : "testSwapInt",
  "sourceCode" : "@Test\r\nvoid testSwapInt() {\r\n    final int[] array = { 1, 2, 3 };\r\n    ArrayUtils.swap(array, 0, 2);\r\n    assertEquals(3, array[0]);\r\n    assertEquals(2, array[1]);\r\n    assertEquals(1, array[2]);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ArrayUtilsTest.java",
  "methodName" : "testSwapIntExchangedOffsets",
  "sourceCode" : "@Test\r\nvoid testSwapIntExchangedOffsets() {\r\n    int[] array;\r\n    array = new int[] { 1, 2, 3 };\r\n    ArrayUtils.swap(array, 0, 1, 2);\r\n    assertArrayEquals(new int[] { 2, 3, 1 }, array);\r\n    array = new int[] { 1, 2, 3 };\r\n    ArrayUtils.swap(array, 1, 0, 2);\r\n    assertArrayEquals(new int[] { 2, 3, 1 }, array);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ArrayUtilsTest.java",
  "methodName" : "testSwapIntRange",
  "sourceCode" : "@Test\r\nvoid testSwapIntRange() {\r\n    // edge cases where nothing happens\r\n    ArrayUtils.swap((int[]) null, 0, 2, 1);\r\n    ArrayUtils.swap(new int[0], 0, 2, 1);\r\n    final int[] array3a = { 1, 0, 1 };\r\n    final int[] array3b = array3a.clone();\r\n    // (1) offset1 >= array.length\r\n    ArrayUtils.swap(array3b, array3b.length, 2, 1);\r\n    assertArrayEquals(array3a, array3b);\r\n    // (2) offset2 >= array.length\r\n    ArrayUtils.swap(array3b, 0, array3b.length, 1);\r\n    assertArrayEquals(array3a, array3b);\r\n    // tests\r\n    int[] array = { 1, 2, 3, 4 };\r\n    ArrayUtils.swap(array, 0, 2, 2);\r\n    assertEquals(3, array[0]);\r\n    assertEquals(4, array[1]);\r\n    assertEquals(1, array[2]);\r\n    assertEquals(2, array[3]);\r\n    array = new int[] { 1, 2, 3 };\r\n    ArrayUtils.swap(array, 3, 0);\r\n    assertEquals(1, array[0]);\r\n    assertEquals(2, array[1]);\r\n    assertEquals(3, array[2]);\r\n    array = new int[] { 1, 2, 3 };\r\n    ArrayUtils.swap(array, 0, 2, 2);\r\n    assertEquals(3, array[0]);\r\n    assertEquals(2, array[1]);\r\n    assertEquals(1, array[2]);\r\n    array = new int[] { 1, 2, 3 };\r\n    ArrayUtils.swap(array, -1, 2, 2);\r\n    assertEquals(3, array[0]);\r\n    assertEquals(2, array[1]);\r\n    assertEquals(1, array[2]);\r\n    array = new int[] { 1, 2, 3 };\r\n    ArrayUtils.swap(array, 0, -1, 2);\r\n    assertEquals(1, array[0]);\r\n    assertEquals(2, array[1]);\r\n    assertEquals(3, array[2]);\r\n    array = new int[] { 1, 2, 3 };\r\n    ArrayUtils.swap(array, -1, -1, 2);\r\n    assertEquals(1, array[0]);\r\n    assertEquals(2, array[1]);\r\n    assertEquals(3, array[2]);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ArrayUtilsTest.java",
  "methodName" : "testSwapLong",
  "sourceCode" : "@Test\r\nvoid testSwapLong() {\r\n    final long[] array = { 1, 2, 3 };\r\n    ArrayUtils.swap(array, 0, 2);\r\n    assertEquals(3, array[0]);\r\n    assertEquals(2, array[1]);\r\n    assertEquals(1, array[2]);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ArrayUtilsTest.java",
  "methodName" : "testSwapLongRange",
  "sourceCode" : "@Test\r\nvoid testSwapLongRange() {\r\n    // edge cases where nothing happens\r\n    ArrayUtils.swap((long[]) null, 0, 2, 1);\r\n    ArrayUtils.swap(new long[0], 0, 2, 1);\r\n    final long[] array3a = { 1, 0, 1 };\r\n    final long[] array3b = array3a.clone();\r\n    // (1) offset1 >= array.length\r\n    ArrayUtils.swap(array3b, array3b.length, 2, 1);\r\n    assertArrayEquals(array3a, array3b);\r\n    // (2) offset2 >= array.length\r\n    ArrayUtils.swap(array3b, 0, array3b.length, 1);\r\n    assertArrayEquals(array3a, array3b);\r\n    // tests\r\n    long[] array = { 1, 2, 3, 4 };\r\n    ArrayUtils.swap(array, 0, 2, 2);\r\n    assertEquals(3, array[0]);\r\n    assertEquals(4, array[1]);\r\n    assertEquals(1, array[2]);\r\n    assertEquals(2, array[3]);\r\n    array = new long[] { 1, 2, 3 };\r\n    ArrayUtils.swap(array, 0, 3);\r\n    assertEquals(1, array[0]);\r\n    assertEquals(2, array[1]);\r\n    assertEquals(3, array[2]);\r\n    array = new long[] { 1, 2, 3 };\r\n    ArrayUtils.swap(array, 0, 2, 2);\r\n    assertEquals(3, array[0]);\r\n    assertEquals(2, array[1]);\r\n    assertEquals(1, array[2]);\r\n    array = new long[] { 1, 2, 3 };\r\n    ArrayUtils.swap(array, -1, 2, 2);\r\n    assertEquals(3, array[0]);\r\n    assertEquals(2, array[1]);\r\n    assertEquals(1, array[2]);\r\n    array = new long[] { 1, 2, 3 };\r\n    ArrayUtils.swap(array, 0, -1, 2);\r\n    assertEquals(1, array[0]);\r\n    assertEquals(2, array[1]);\r\n    assertEquals(3, array[2]);\r\n    array = new long[] { 1, 2, 3 };\r\n    ArrayUtils.swap(array, -1, -1, 2);\r\n    assertEquals(1, array[0]);\r\n    assertEquals(2, array[1]);\r\n    assertEquals(3, array[2]);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ArrayUtilsTest.java",
  "methodName" : "testSwapNullBooleanArray",
  "sourceCode" : "@Test\r\nvoid testSwapNullBooleanArray() {\r\n    final boolean[] array = null;\r\n    ArrayUtils.swap(array, 0, 2);\r\n    assertNull(array);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ArrayUtilsTest.java",
  "methodName" : "testSwapNullByteArray",
  "sourceCode" : "@Test\r\nvoid testSwapNullByteArray() {\r\n    final byte[] array = null;\r\n    ArrayUtils.swap(array, 0, 2);\r\n    assertNull(array);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ArrayUtilsTest.java",
  "methodName" : "testSwapNullCharArray",
  "sourceCode" : "@Test\r\nvoid testSwapNullCharArray() {\r\n    final char[] array = null;\r\n    ArrayUtils.swap(array, 0, 2);\r\n    assertNull(array);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ArrayUtilsTest.java",
  "methodName" : "testSwapNullDoubleArray",
  "sourceCode" : "@Test\r\nvoid testSwapNullDoubleArray() {\r\n    final double[] array = null;\r\n    ArrayUtils.swap(array, 0, 2);\r\n    assertNull(array);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ArrayUtilsTest.java",
  "methodName" : "testSwapNullFloatArray",
  "sourceCode" : "@Test\r\nvoid testSwapNullFloatArray() {\r\n    final float[] array = null;\r\n    ArrayUtils.swap(array, 0, 2);\r\n    assertNull(array);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ArrayUtilsTest.java",
  "methodName" : "testSwapNullIntArray",
  "sourceCode" : "@Test\r\nvoid testSwapNullIntArray() {\r\n    final int[] array = null;\r\n    ArrayUtils.swap(array, 0, 2);\r\n    assertNull(array);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ArrayUtilsTest.java",
  "methodName" : "testSwapNullLongArray",
  "sourceCode" : "@Test\r\nvoid testSwapNullLongArray() {\r\n    final long[] array = null;\r\n    ArrayUtils.swap(array, 0, 2);\r\n    assertNull(array);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ArrayUtilsTest.java",
  "methodName" : "testSwapNullObjectArray",
  "sourceCode" : "@Test\r\nvoid testSwapNullObjectArray() {\r\n    final String[] array = null;\r\n    ArrayUtils.swap(array, 0, 2);\r\n    assertNull(array);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ArrayUtilsTest.java",
  "methodName" : "testSwapNullShortArray",
  "sourceCode" : "@Test\r\nvoid testSwapNullShortArray() {\r\n    final short[] array = null;\r\n    ArrayUtils.swap(array, 0, 2);\r\n    assertNull(array);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ArrayUtilsTest.java",
  "methodName" : "testSwapObject",
  "sourceCode" : "@Test\r\nvoid testSwapObject() {\r\n    final String[] array = { \"1\", \"2\", \"3\" };\r\n    ArrayUtils.swap(array, 0, 2);\r\n    assertEquals(\"3\", array[0]);\r\n    assertEquals(\"2\", array[1]);\r\n    assertEquals(\"1\", array[2]);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ArrayUtilsTest.java",
  "methodName" : "testSwapObjectRange",
  "sourceCode" : "@Test\r\nvoid testSwapObjectRange() {\r\n    // edge cases where nothing happens\r\n    ArrayUtils.swap((Object[]) null, 0, 2, 1);\r\n    ArrayUtils.swap(new Object[0], 0, 2, 1);\r\n    final Object[] array3a = { 1, 0, 1 };\r\n    final Object[] array3b = array3a.clone();\r\n    // (1) offset1 >= array.length\r\n    ArrayUtils.swap(array3b, array3b.length, 2, 1);\r\n    assertArrayEquals(array3a, array3b);\r\n    // (2) offset2 >= array.length\r\n    ArrayUtils.swap(array3b, 0, array3b.length, 1);\r\n    assertArrayEquals(array3a, array3b);\r\n    // tests\r\n    String[] array = { \"1\", \"2\", \"3\", \"4\" };\r\n    ArrayUtils.swap(array, 0, 2, 2);\r\n    assertEquals(\"3\", array[0]);\r\n    assertEquals(\"4\", array[1]);\r\n    assertEquals(\"1\", array[2]);\r\n    assertEquals(\"2\", array[3]);\r\n    array = new String[] { \"1\", \"2\", \"3\", \"4\" };\r\n    ArrayUtils.swap(array, -1, 2, 3);\r\n    assertEquals(\"3\", array[0]);\r\n    assertEquals(\"4\", array[1]);\r\n    assertEquals(\"1\", array[2]);\r\n    assertEquals(\"2\", array[3]);\r\n    array = new String[] { \"1\", \"2\", \"3\", \"4\", \"5\" };\r\n    ArrayUtils.swap(array, -3, 2, 3);\r\n    assertEquals(\"3\", array[0]);\r\n    assertEquals(\"4\", array[1]);\r\n    assertEquals(\"5\", array[2]);\r\n    assertEquals(\"2\", array[3]);\r\n    assertEquals(\"1\", array[4]);\r\n    array = new String[] { \"1\", \"2\", \"3\", \"4\", \"5\" };\r\n    ArrayUtils.swap(array, 2, -2, 3);\r\n    assertEquals(\"3\", array[0]);\r\n    assertEquals(\"4\", array[1]);\r\n    assertEquals(\"5\", array[2]);\r\n    assertEquals(\"2\", array[3]);\r\n    assertEquals(\"1\", array[4]);\r\n    array = new String[0];\r\n    ArrayUtils.swap(array, 0, 2, 2);\r\n    assertEquals(0, array.length);\r\n    array = null;\r\n    ArrayUtils.swap(array, 0, 2, 2);\r\n    assertNull(array);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ArrayUtilsTest.java",
  "methodName" : "testSwapShort",
  "sourceCode" : "@Test\r\nvoid testSwapShort() {\r\n    final short[] array = { 1, 2, 3 };\r\n    ArrayUtils.swap(array, 0, 2);\r\n    assertEquals(3, array[0]);\r\n    assertEquals(2, array[1]);\r\n    assertEquals(1, array[2]);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ArrayUtilsTest.java",
  "methodName" : "testSwapShortRange",
  "sourceCode" : "@Test\r\nvoid testSwapShortRange() {\r\n    // edge cases where nothing happens\r\n    ArrayUtils.swap((short[]) null, 0, 2, 1);\r\n    ArrayUtils.swap(new short[0], 0, 2, 1);\r\n    final short[] array3a = { 1, 0, 1 };\r\n    final short[] array3b = array3a.clone();\r\n    // (1) offset1 >= array.length\r\n    ArrayUtils.swap(array3b, array3b.length, 2, 1);\r\n    assertArrayEquals(array3a, array3b);\r\n    // (2) offset2 >= array.length\r\n    ArrayUtils.swap(array3b, 0, array3b.length, 1);\r\n    assertArrayEquals(array3a, array3b);\r\n    // tests\r\n    short[] array = { 1, 2, 3, 4 };\r\n    ArrayUtils.swap(array, 0, 2, 2);\r\n    assertEquals(3, array[0]);\r\n    assertEquals(4, array[1]);\r\n    assertEquals(1, array[2]);\r\n    assertEquals(2, array[3]);\r\n    array = new short[] { 1, 2, 3 };\r\n    ArrayUtils.swap(array, 3, 0);\r\n    assertEquals(1, array[0]);\r\n    assertEquals(2, array[1]);\r\n    assertEquals(3, array[2]);\r\n    array = new short[] { 1, 2, 3 };\r\n    ArrayUtils.swap(array, 0, 2, 2);\r\n    assertEquals(3, array[0]);\r\n    assertEquals(2, array[1]);\r\n    assertEquals(1, array[2]);\r\n    array = new short[] { 1, 2, 3 };\r\n    ArrayUtils.swap(array, -1, 2, 2);\r\n    assertEquals(3, array[0]);\r\n    assertEquals(2, array[1]);\r\n    assertEquals(1, array[2]);\r\n    array = new short[] { 1, 2, 3 };\r\n    ArrayUtils.swap(array, 0, -1, 2);\r\n    assertEquals(1, array[0]);\r\n    assertEquals(2, array[1]);\r\n    assertEquals(3, array[2]);\r\n    array = new short[] { 1, 2, 3 };\r\n    ArrayUtils.swap(array, -1, -1, 2);\r\n    assertEquals(1, array[0]);\r\n    assertEquals(2, array[1]);\r\n    assertEquals(3, array[2]);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ArrayUtilsTest.java",
  "methodName" : "testTextIndexesOfInt",
  "sourceCode" : "@Test\r\nvoid testTextIndexesOfInt() {\r\n    int[] array = null;\r\n    final BitSet emptySet = new BitSet();\r\n    final BitSet testSet = new BitSet();\r\n    assertEquals(emptySet, ArrayUtils.indexesOf(array, 0));\r\n    array = new int[] { 0, 1, 2, 3, 0 };\r\n    testSet.set(0);\r\n    testSet.set(4);\r\n    assertEquals(testSet, ArrayUtils.indexesOf(array, 0));\r\n    testSet.clear();\r\n    testSet.set(1);\r\n    assertEquals(testSet, ArrayUtils.indexesOf(array, 1));\r\n    testSet.clear();\r\n    testSet.set(2);\r\n    assertEquals(testSet, ArrayUtils.indexesOf(array, 2));\r\n    testSet.clear();\r\n    testSet.set(3);\r\n    assertEquals(testSet, ArrayUtils.indexesOf(array, 3));\r\n    assertEquals(emptySet, ArrayUtils.indexesOf(array, 99));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ArrayUtilsTest.java",
  "methodName" : "testToMap",
  "sourceCode" : "@Test\r\nvoid testToMap() {\r\n    Map<?, ?> map = ArrayUtils.toMap(new String[][] { { \"foo\", \"bar\" }, { \"hello\", \"world\" } });\r\n    assertEquals(\"bar\", map.get(\"foo\"));\r\n    assertEquals(\"world\", map.get(\"hello\"));\r\n    assertNull(ArrayUtils.toMap(null));\r\n    assertIllegalArgumentException(() -> ArrayUtils.toMap(new String[][] { { \"foo\", \"bar\" }, { \"short\" } }));\r\n    assertIllegalArgumentException(() -> ArrayUtils.toMap(new Object[] { new Object[] { \"foo\", \"bar\" }, \"illegal type\" }));\r\n    assertIllegalArgumentException(() -> ArrayUtils.toMap(new Object[] { new Object[] { \"foo\", \"bar\" }, null }));\r\n    map = ArrayUtils.toMap(new Object[] { new Map.Entry<Object, Object>() {\r\n\r\n        @Override\r\n        public boolean equals(final Object o) {\r\n            throw new UnsupportedOperationException();\r\n        }\r\n\r\n        @Override\r\n        public Object getKey() {\r\n            return \"foo\";\r\n        }\r\n\r\n        @Override\r\n        public Object getValue() {\r\n            return \"bar\";\r\n        }\r\n\r\n        @Override\r\n        public int hashCode() {\r\n            throw new UnsupportedOperationException();\r\n        }\r\n\r\n        @Override\r\n        public Object setValue(final Object value) {\r\n            throw new UnsupportedOperationException();\r\n        }\r\n    } });\r\n    assertEquals(\"bar\", map.get(\"foo\"));\r\n    // Return empty map when got input array with length = 0\r\n    assertEquals(Collections.emptyMap(), ArrayUtils.toMap(new Object[0]));\r\n    // Test all null values\r\n    map = ArrayUtils.toMap(new Object[][] { { null, null }, { null, null } });\r\n    assertEquals(Collections.singletonMap(null, null), map);\r\n    // Test duplicate keys\r\n    map = ArrayUtils.toMap(new Object[][] { { \"key\", \"value2\" }, { \"key\", \"value1\" } });\r\n    assertEquals(Collections.singletonMap(\"key\", \"value1\"), map);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ArrayUtilsTest.java",
  "methodName" : "testToObject_boolean",
  "sourceCode" : "@Test\r\nvoid testToObject_boolean() {\r\n    final boolean[] b = null;\r\n    assertArrayEquals(null, ArrayUtils.toObject(b));\r\n    assertSame(ArrayUtils.EMPTY_BOOLEAN_OBJECT_ARRAY, ArrayUtils.toObject(new boolean[0]));\r\n    assertArrayEquals(new Boolean[] { Boolean.TRUE, Boolean.FALSE, Boolean.TRUE }, ArrayUtils.toObject(new boolean[] { true, false, true }));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ArrayUtilsTest.java",
  "methodName" : "testToObject_byte",
  "sourceCode" : "@Test\r\nvoid testToObject_byte() {\r\n    final byte[] b = null;\r\n    assertArrayEquals(null, ArrayUtils.toObject(b));\r\n    assertSame(ArrayUtils.EMPTY_BYTE_OBJECT_ARRAY, ArrayUtils.toObject(new byte[0]));\r\n    assertArrayEquals(new Byte[] { Byte.valueOf(Byte.MIN_VALUE), Byte.valueOf(Byte.MAX_VALUE), Byte.valueOf((byte) 9999999) }, ArrayUtils.toObject(new byte[] { Byte.MIN_VALUE, Byte.MAX_VALUE, (byte) 9999999 }));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ArrayUtilsTest.java",
  "methodName" : "testToObject_char",
  "sourceCode" : "@Test\r\nvoid testToObject_char() {\r\n    final char[] b = null;\r\n    assertArrayEquals(null, ArrayUtils.toObject(b));\r\n    assertSame(ArrayUtils.EMPTY_CHARACTER_OBJECT_ARRAY, ArrayUtils.toObject(new char[0]));\r\n    assertArrayEquals(new Character[] { Character.valueOf(Character.MIN_VALUE), Character.valueOf(Character.MAX_VALUE), Character.valueOf('0') }, ArrayUtils.toObject(new char[] { Character.MIN_VALUE, Character.MAX_VALUE, '0' }));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ArrayUtilsTest.java",
  "methodName" : "testToObject_double",
  "sourceCode" : "@Test\r\nvoid testToObject_double() {\r\n    final double[] b = null;\r\n    assertArrayEquals(null, ArrayUtils.toObject(b));\r\n    assertSame(ArrayUtils.EMPTY_DOUBLE_OBJECT_ARRAY, ArrayUtils.toObject(new double[0]));\r\n    assertArrayEquals(new Double[] { Double.valueOf(Double.MIN_VALUE), Double.valueOf(Double.MAX_VALUE), Double.valueOf(9999999) }, ArrayUtils.toObject(new double[] { Double.MIN_VALUE, Double.MAX_VALUE, 9999999 }));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ArrayUtilsTest.java",
  "methodName" : "testToObject_float",
  "sourceCode" : "@Test\r\nvoid testToObject_float() {\r\n    final float[] b = null;\r\n    assertArrayEquals(null, ArrayUtils.toObject(b));\r\n    assertSame(ArrayUtils.EMPTY_FLOAT_OBJECT_ARRAY, ArrayUtils.toObject(new float[0]));\r\n    assertArrayEquals(new Float[] { Float.valueOf(Float.MIN_VALUE), Float.valueOf(Float.MAX_VALUE), Float.valueOf(9999999) }, ArrayUtils.toObject(new float[] { Float.MIN_VALUE, Float.MAX_VALUE, 9999999 }));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ArrayUtilsTest.java",
  "methodName" : "testToObject_int",
  "sourceCode" : "@Test\r\nvoid testToObject_int() {\r\n    final int[] b = null;\r\n    assertArrayEquals(null, ArrayUtils.toObject(b));\r\n    assertSame(ArrayUtils.EMPTY_INTEGER_OBJECT_ARRAY, ArrayUtils.toObject(new int[0]));\r\n    assertArrayEquals(new Integer[] { Integer.valueOf(Integer.MIN_VALUE), Integer.valueOf(Integer.MAX_VALUE), Integer.valueOf(9999999) }, ArrayUtils.toObject(new int[] { Integer.MIN_VALUE, Integer.MAX_VALUE, 9999999 }));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ArrayUtilsTest.java",
  "methodName" : "testToObject_long",
  "sourceCode" : "@Test\r\nvoid testToObject_long() {\r\n    final long[] b = null;\r\n    assertArrayEquals(null, ArrayUtils.toObject(b));\r\n    assertSame(ArrayUtils.EMPTY_LONG_OBJECT_ARRAY, ArrayUtils.toObject(new long[0]));\r\n    assertArrayEquals(new Long[] { Long.valueOf(Long.MIN_VALUE), Long.valueOf(Long.MAX_VALUE), Long.valueOf(9999999) }, ArrayUtils.toObject(new long[] { Long.MIN_VALUE, Long.MAX_VALUE, 9999999 }));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ArrayUtilsTest.java",
  "methodName" : "testToObject_short",
  "sourceCode" : "@Test\r\nvoid testToObject_short() {\r\n    final short[] b = null;\r\n    assertArrayEquals(null, ArrayUtils.toObject(b));\r\n    assertSame(ArrayUtils.EMPTY_SHORT_OBJECT_ARRAY, ArrayUtils.toObject(new short[0]));\r\n    assertArrayEquals(new Short[] { Short.valueOf(Short.MIN_VALUE), Short.valueOf(Short.MAX_VALUE), Short.valueOf((short) 9999999) }, ArrayUtils.toObject(new short[] { Short.MIN_VALUE, Short.MAX_VALUE, (short) 9999999 }));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ArrayUtilsTest.java",
  "methodName" : "testToPrimitive_boolean",
  "sourceCode" : "/**\r\n * testToPrimitive/Object for boolean\r\n */\r\n@Test\r\nvoid testToPrimitive_boolean() {\r\n    final Boolean[] b = null;\r\n    assertNull(ArrayUtils.toPrimitive(b));\r\n    assertSame(ArrayUtils.EMPTY_BOOLEAN_ARRAY, ArrayUtils.toPrimitive(new Boolean[0]));\r\n    assertArrayEquals(new boolean[] { true, false, true }, ArrayUtils.toPrimitive(new Boolean[] { Boolean.TRUE, Boolean.FALSE, Boolean.TRUE }));\r\n    assertArrayEquals(new boolean[] { true, false }, ArrayUtils.toPrimitive(new Boolean[] { Boolean.TRUE, null }));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ArrayUtilsTest.java",
  "methodName" : "testToPrimitive_boolean_boolean",
  "sourceCode" : "@Test\r\nvoid testToPrimitive_boolean_boolean() {\r\n    assertNull(ArrayUtils.toPrimitive(null, false));\r\n    assertSame(ArrayUtils.EMPTY_BOOLEAN_ARRAY, ArrayUtils.toPrimitive(new Boolean[0], false));\r\n    assertArrayEquals(new boolean[] { true, false, true }, ArrayUtils.toPrimitive(new Boolean[] { Boolean.TRUE, Boolean.FALSE, Boolean.TRUE }, false));\r\n    assertArrayEquals(new boolean[] { true, false, false }, ArrayUtils.toPrimitive(new Boolean[] { Boolean.TRUE, null, Boolean.FALSE }, false));\r\n    assertArrayEquals(new boolean[] { true, true, false }, ArrayUtils.toPrimitive(new Boolean[] { Boolean.TRUE, null, Boolean.FALSE }, true));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ArrayUtilsTest.java",
  "methodName" : "testToPrimitive_byte",
  "sourceCode" : "/**\r\n * testToPrimitive/Object for byte\r\n */\r\n@Test\r\nvoid testToPrimitive_byte() {\r\n    final Byte[] b = null;\r\n    assertNull(ArrayUtils.toPrimitive(b));\r\n    assertSame(ArrayUtils.EMPTY_BYTE_ARRAY, ArrayUtils.toPrimitive(new Byte[0]));\r\n    assertArrayEquals(new byte[] { Byte.MIN_VALUE, Byte.MAX_VALUE, (byte) 9999999 }, ArrayUtils.toPrimitive(new Byte[] { Byte.valueOf(Byte.MIN_VALUE), Byte.valueOf(Byte.MAX_VALUE), Byte.valueOf((byte) 9999999) }));\r\n    assertNullPointerException(() -> ArrayUtils.toPrimitive(new Byte[] { Byte.valueOf(Byte.MIN_VALUE), null }));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ArrayUtilsTest.java",
  "methodName" : "testToPrimitive_byte_byte",
  "sourceCode" : "@Test\r\nvoid testToPrimitive_byte_byte() {\r\n    final Byte[] b = null;\r\n    assertNull(ArrayUtils.toPrimitive(b, Byte.MIN_VALUE));\r\n    assertSame(ArrayUtils.EMPTY_BYTE_ARRAY, ArrayUtils.toPrimitive(new Byte[0], (byte) 1));\r\n    assertArrayEquals(new byte[] { Byte.MIN_VALUE, Byte.MAX_VALUE, (byte) 9999999 }, ArrayUtils.toPrimitive(new Byte[] { Byte.valueOf(Byte.MIN_VALUE), Byte.valueOf(Byte.MAX_VALUE), Byte.valueOf((byte) 9999999) }, Byte.MIN_VALUE));\r\n    assertArrayEquals(new byte[] { Byte.MIN_VALUE, Byte.MAX_VALUE, (byte) 9999999 }, ArrayUtils.toPrimitive(new Byte[] { Byte.valueOf(Byte.MIN_VALUE), null, Byte.valueOf((byte) 9999999) }, Byte.MAX_VALUE));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ArrayUtilsTest.java",
  "methodName" : "testToPrimitive_char",
  "sourceCode" : "/**\r\n * testToPrimitive/Object for byte\r\n */\r\n@Test\r\nvoid testToPrimitive_char() {\r\n    final Character[] b = null;\r\n    assertNull(ArrayUtils.toPrimitive(b));\r\n    assertSame(ArrayUtils.EMPTY_CHAR_ARRAY, ArrayUtils.toPrimitive(new Character[0]));\r\n    assertArrayEquals(new char[] { Character.MIN_VALUE, Character.MAX_VALUE, '0' }, ArrayUtils.toPrimitive(new Character[] { Character.valueOf(Character.MIN_VALUE), Character.valueOf(Character.MAX_VALUE), Character.valueOf('0') }));\r\n    assertNullPointerException(() -> ArrayUtils.toPrimitive(new Character[] { Character.valueOf(Character.MIN_VALUE), null }));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ArrayUtilsTest.java",
  "methodName" : "testToPrimitive_char_char",
  "sourceCode" : "@Test\r\nvoid testToPrimitive_char_char() {\r\n    final Character[] b = null;\r\n    assertNull(ArrayUtils.toPrimitive(b, Character.MIN_VALUE));\r\n    assertSame(ArrayUtils.EMPTY_CHAR_ARRAY, ArrayUtils.toPrimitive(new Character[0], (char) 0));\r\n    assertArrayEquals(new char[] { Character.MIN_VALUE, Character.MAX_VALUE, '0' }, ArrayUtils.toPrimitive(new Character[] { Character.valueOf(Character.MIN_VALUE), Character.valueOf(Character.MAX_VALUE), Character.valueOf('0') }, Character.MIN_VALUE));\r\n    assertArrayEquals(new char[] { Character.MIN_VALUE, Character.MAX_VALUE, '0' }, ArrayUtils.toPrimitive(new Character[] { Character.valueOf(Character.MIN_VALUE), null, Character.valueOf('0') }, Character.MAX_VALUE));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ArrayUtilsTest.java",
  "methodName" : "testToPrimitive_double",
  "sourceCode" : "/**\r\n *  testToPrimitive/Object for double\r\n */\r\n@Test\r\nvoid testToPrimitive_double() {\r\n    final Double[] b = null;\r\n    assertNull(ArrayUtils.toPrimitive(b));\r\n    assertSame(ArrayUtils.EMPTY_DOUBLE_ARRAY, ArrayUtils.toPrimitive(new Double[0]));\r\n    assertArrayEquals(new double[] { Double.MIN_VALUE, Double.MAX_VALUE, 9999999 }, ArrayUtils.toPrimitive(new Double[] { Double.valueOf(Double.MIN_VALUE), Double.valueOf(Double.MAX_VALUE), Double.valueOf(9999999) }));\r\n    assertNullPointerException(() -> ArrayUtils.toPrimitive(new Float[] { Float.valueOf(Float.MIN_VALUE), null }));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ArrayUtilsTest.java",
  "methodName" : "testToPrimitive_double_double",
  "sourceCode" : "@Test\r\nvoid testToPrimitive_double_double() {\r\n    final Double[] l = null;\r\n    assertNull(ArrayUtils.toPrimitive(l, Double.MIN_VALUE));\r\n    assertSame(ArrayUtils.EMPTY_DOUBLE_ARRAY, ArrayUtils.toPrimitive(new Double[0], 1));\r\n    assertArrayEquals(new double[] { Double.MIN_VALUE, Double.MAX_VALUE, 9999999 }, ArrayUtils.toPrimitive(new Double[] { Double.valueOf(Double.MIN_VALUE), Double.valueOf(Double.MAX_VALUE), Double.valueOf(9999999) }, 1));\r\n    assertArrayEquals(new double[] { Double.MIN_VALUE, Double.MAX_VALUE, 9999999 }, ArrayUtils.toPrimitive(new Double[] { Double.valueOf(Double.MIN_VALUE), null, Double.valueOf(9999999) }, Double.MAX_VALUE));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ArrayUtilsTest.java",
  "methodName" : "testToPrimitive_float",
  "sourceCode" : "/**\r\n *  testToPrimitive/Object for float\r\n */\r\n@Test\r\nvoid testToPrimitive_float() {\r\n    final Float[] b = null;\r\n    assertNull(ArrayUtils.toPrimitive(b));\r\n    assertSame(ArrayUtils.EMPTY_FLOAT_ARRAY, ArrayUtils.toPrimitive(new Float[0]));\r\n    assertArrayEquals(new float[] { Float.MIN_VALUE, Float.MAX_VALUE, 9999999 }, ArrayUtils.toPrimitive(new Float[] { Float.valueOf(Float.MIN_VALUE), Float.valueOf(Float.MAX_VALUE), Float.valueOf(9999999) }));\r\n    assertNullPointerException(() -> ArrayUtils.toPrimitive(new Float[] { Float.valueOf(Float.MIN_VALUE), null }));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ArrayUtilsTest.java",
  "methodName" : "testToPrimitive_float_float",
  "sourceCode" : "@Test\r\nvoid testToPrimitive_float_float() {\r\n    final Float[] l = null;\r\n    assertNull(ArrayUtils.toPrimitive(l, Float.MIN_VALUE));\r\n    assertSame(ArrayUtils.EMPTY_FLOAT_ARRAY, ArrayUtils.toPrimitive(new Float[0], 1));\r\n    assertArrayEquals(new float[] { Float.MIN_VALUE, Float.MAX_VALUE, 9999999 }, ArrayUtils.toPrimitive(new Float[] { Float.valueOf(Float.MIN_VALUE), Float.valueOf(Float.MAX_VALUE), Float.valueOf(9999999) }, 1));\r\n    assertArrayEquals(new float[] { Float.MIN_VALUE, Float.MAX_VALUE, 9999999 }, ArrayUtils.toPrimitive(new Float[] { Float.valueOf(Float.MIN_VALUE), null, Float.valueOf(9999999) }, Float.MAX_VALUE));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ArrayUtilsTest.java",
  "methodName" : "testToPrimitive_int",
  "sourceCode" : "/**\r\n * testToPrimitive/Object for int\r\n */\r\n@Test\r\nvoid testToPrimitive_int() {\r\n    final Integer[] b = null;\r\n    assertNull(ArrayUtils.toPrimitive(b));\r\n    assertSame(ArrayUtils.EMPTY_INT_ARRAY, ArrayUtils.toPrimitive(new Integer[0]));\r\n    assertArrayEquals(new int[] { Integer.MIN_VALUE, Integer.MAX_VALUE, 9999999 }, ArrayUtils.toPrimitive(new Integer[] { Integer.valueOf(Integer.MIN_VALUE), Integer.valueOf(Integer.MAX_VALUE), Integer.valueOf(9999999) }));\r\n    assertNullPointerException(() -> ArrayUtils.toPrimitive(new Integer[] { Integer.valueOf(Integer.MIN_VALUE), null }));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ArrayUtilsTest.java",
  "methodName" : "testToPrimitive_int_int",
  "sourceCode" : "@Test\r\nvoid testToPrimitive_int_int() {\r\n    final Long[] l = null;\r\n    assertNull(ArrayUtils.toPrimitive(l, Integer.MIN_VALUE));\r\n    assertSame(ArrayUtils.EMPTY_INT_ARRAY, ArrayUtils.toPrimitive(new Integer[0], 1));\r\n    assertArrayEquals(new int[] { Integer.MIN_VALUE, Integer.MAX_VALUE, 9999999 }, ArrayUtils.toPrimitive(new Integer[] { Integer.valueOf(Integer.MIN_VALUE), Integer.valueOf(Integer.MAX_VALUE), Integer.valueOf(9999999) }, 1));\r\n    assertArrayEquals(new int[] { Integer.MIN_VALUE, Integer.MAX_VALUE, 9999999 }, ArrayUtils.toPrimitive(new Integer[] { Integer.valueOf(Integer.MIN_VALUE), null, Integer.valueOf(9999999) }, Integer.MAX_VALUE));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ArrayUtilsTest.java",
  "methodName" : "testToPrimitive_intNull",
  "sourceCode" : "@Test\r\nvoid testToPrimitive_intNull() {\r\n    final Integer[] iArray = null;\r\n    assertNull(ArrayUtils.toPrimitive(iArray, Integer.MIN_VALUE));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ArrayUtilsTest.java",
  "methodName" : "testToPrimitive_long",
  "sourceCode" : "/**\r\n * testToPrimitive/Object for long\r\n */\r\n@Test\r\nvoid testToPrimitive_long() {\r\n    final Long[] b = null;\r\n    assertNull(ArrayUtils.toPrimitive(b));\r\n    assertSame(ArrayUtils.EMPTY_LONG_ARRAY, ArrayUtils.toPrimitive(new Long[0]));\r\n    assertArrayEquals(new long[] { Long.MIN_VALUE, Long.MAX_VALUE, 9999999 }, ArrayUtils.toPrimitive(new Long[] { Long.valueOf(Long.MIN_VALUE), Long.valueOf(Long.MAX_VALUE), Long.valueOf(9999999) }));\r\n    assertNullPointerException(() -> ArrayUtils.toPrimitive(new Long[] { Long.valueOf(Long.MIN_VALUE), null }));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ArrayUtilsTest.java",
  "methodName" : "testToPrimitive_long_long",
  "sourceCode" : "@Test\r\nvoid testToPrimitive_long_long() {\r\n    final Long[] l = null;\r\n    assertNull(ArrayUtils.toPrimitive(l, Long.MIN_VALUE));\r\n    assertSame(ArrayUtils.EMPTY_LONG_ARRAY, ArrayUtils.toPrimitive(new Long[0], 1));\r\n    assertArrayEquals(new long[] { Long.MIN_VALUE, Long.MAX_VALUE, 9999999 }, ArrayUtils.toPrimitive(new Long[] { Long.valueOf(Long.MIN_VALUE), Long.valueOf(Long.MAX_VALUE), Long.valueOf(9999999) }, 1));\r\n    assertArrayEquals(new long[] { Long.MIN_VALUE, Long.MAX_VALUE, 9999999 }, ArrayUtils.toPrimitive(new Long[] { Long.valueOf(Long.MIN_VALUE), null, Long.valueOf(9999999) }, Long.MAX_VALUE));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ArrayUtilsTest.java",
  "methodName" : "testToPrimitive_short",
  "sourceCode" : "/**\r\n * testToPrimitive/Object for short\r\n */\r\n@Test\r\nvoid testToPrimitive_short() {\r\n    final Short[] b = null;\r\n    assertNull(ArrayUtils.toPrimitive(b));\r\n    assertSame(ArrayUtils.EMPTY_SHORT_ARRAY, ArrayUtils.toPrimitive(new Short[0]));\r\n    assertArrayEquals(new short[] { Short.MIN_VALUE, Short.MAX_VALUE, (short) 9999999 }, ArrayUtils.toPrimitive(new Short[] { Short.valueOf(Short.MIN_VALUE), Short.valueOf(Short.MAX_VALUE), Short.valueOf((short) 9999999) }));\r\n    assertNullPointerException(() -> ArrayUtils.toPrimitive(new Short[] { Short.valueOf(Short.MIN_VALUE), null }));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ArrayUtilsTest.java",
  "methodName" : "testToPrimitive_short_short",
  "sourceCode" : "@Test\r\nvoid testToPrimitive_short_short() {\r\n    final Short[] s = null;\r\n    assertNull(ArrayUtils.toPrimitive(s, Short.MIN_VALUE));\r\n    assertSame(ArrayUtils.EMPTY_SHORT_ARRAY, ArrayUtils.toPrimitive(new Short[0], Short.MIN_VALUE));\r\n    assertArrayEquals(new short[] { Short.MIN_VALUE, Short.MAX_VALUE, (short) 9999999 }, ArrayUtils.toPrimitive(new Short[] { Short.valueOf(Short.MIN_VALUE), Short.valueOf(Short.MAX_VALUE), Short.valueOf((short) 9999999) }, Short.MIN_VALUE));\r\n    assertArrayEquals(new short[] { Short.MIN_VALUE, Short.MAX_VALUE, (short) 9999999 }, ArrayUtils.toPrimitive(new Short[] { Short.valueOf(Short.MIN_VALUE), null, Short.valueOf((short) 9999999) }, Short.MAX_VALUE));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ArrayUtilsTest.java",
  "methodName" : "testToPrimitiveArray",
  "sourceCode" : "@Test\r\nvoid testToPrimitiveArray() {\r\n    assertNull(ArrayUtils.toPrimitive((Object[]) null));\r\n    assertArrayEquals(new boolean[] { true }, ArrayUtils.toPrimitive(new Boolean[] { true }));\r\n    assertArrayEquals(new char[] { 'a' }, ArrayUtils.toPrimitive(new Character[] { 'a' }));\r\n    assertArrayEquals(new byte[] { 1 }, ArrayUtils.toPrimitive(new Byte[] { 1 }));\r\n    assertArrayEquals(new int[] {}, ArrayUtils.toPrimitive(new Integer[] {}));\r\n    assertArrayEquals(new short[] { 2 }, ArrayUtils.toPrimitive(new Short[] { 2 }));\r\n    assertArrayEquals(new long[] { 2, 3 }, ArrayUtils.toPrimitive(new Long[] { 2L, 3L }));\r\n    assertArrayEquals(new float[] { 3.14f }, ArrayUtils.toPrimitive(new Float[] { 3.14f }), 0.1f);\r\n    assertArrayEquals(new double[] { 2.718 }, ArrayUtils.toPrimitive(new Double[] { 2.718 }), 0.1);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ArrayUtilsTest.java",
  "methodName" : "testToPrimitiveArrayViaObjectArray",
  "sourceCode" : "@Test\r\nvoid testToPrimitiveArrayViaObjectArray() {\r\n    assertNull(ArrayUtils.toPrimitive((Object) null));\r\n    assertArrayEquals(new boolean[] { true }, (boolean[]) ArrayUtils.toPrimitive((Object) new Boolean[] { true }));\r\n    assertArrayEquals(new char[] { 'a' }, (char[]) ArrayUtils.toPrimitive((Object) new Character[] { 'a' }));\r\n    assertArrayEquals(new byte[] { 1 }, (byte[]) ArrayUtils.toPrimitive((Object) new Byte[] { 1 }));\r\n    assertArrayEquals(new int[] {}, (int[]) ArrayUtils.toPrimitive((Object) new Integer[] {}));\r\n    assertArrayEquals(new short[] { 2 }, (short[]) ArrayUtils.toPrimitive((Object) new Short[] { 2 }));\r\n    assertArrayEquals(new long[] { 2, 3 }, (long[]) ArrayUtils.toPrimitive((Object) new Long[] { 2L, 3L }));\r\n    assertArrayEquals(new float[] { 3.14f }, (float[]) ArrayUtils.toPrimitive((Object) new Float[] { 3.14f }), 0.1f);\r\n    assertArrayEquals(new double[] { 2.718 }, (double[]) ArrayUtils.toPrimitive((Object) new Double[] { 2.718 }), 0.1);\r\n    assertArrayEquals(new String[] { \"a\" }, (String[]) ArrayUtils.toPrimitive(new String[] { \"a\" }));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ArrayUtilsTest.java",
  "methodName" : "testToString",
  "sourceCode" : "@Test\r\nvoid testToString() {\r\n    assertEquals(\"{}\", ArrayUtils.toString(null));\r\n    assertEquals(\"{}\", ArrayUtils.toString(new Object[0]));\r\n    assertEquals(\"{}\", ArrayUtils.toString(new String[0]));\r\n    assertEquals(\"{<null>}\", ArrayUtils.toString(new String[] { null }));\r\n    assertEquals(\"{pink,blue}\", ArrayUtils.toString(new String[] { \"pink\", \"blue\" }));\r\n    assertEquals(\"{<null>,<null>}\", ArrayUtils.toString(new String[] { null, null }));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ArrayUtilsTest.java",
  "methodName" : "testToStringArray_array",
  "sourceCode" : "@Test\r\nvoid testToStringArray_array() {\r\n    assertNull(ArrayUtils.toStringArray(null));\r\n    assertArrayEquals(new String[0], ArrayUtils.toStringArray(new Object[0]));\r\n    assertArrayEquals(new String[] { \"1\", \"2\", \"3\", \"array\", \"test\" }, ArrayUtils.toStringArray(new Object[] { 1, 2, 3, \"array\", \"test\" }));\r\n    assertArrayEquals(new String[] { \"null\" }, ArrayUtils.toStringArray(new Object[] { null }));\r\n    assertArrayEquals(new String[] { \"1\", \"null\", \"3\", \"null\", \"test\" }, ArrayUtils.toStringArray(new Object[] { 1, null, 3, null, \"test\" }));\r\n    assertArrayEquals(new String[] { \"null\", \"null\", \"null\", \"null\", \"null\" }, ArrayUtils.toStringArray(new Object[] { null, null, null, null, null }));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ArrayUtilsTest.java",
  "methodName" : "testToStringArray_array_string",
  "sourceCode" : "@Test\r\nvoid testToStringArray_array_string() {\r\n    assertNull(ArrayUtils.toStringArray(null, \"\"));\r\n    assertArrayEquals(new String[0], ArrayUtils.toStringArray(new Object[0], \"\"));\r\n    assertArrayEquals(new String[] { \"1\", \"MyNull\", \"test\" }, ArrayUtils.toStringArray(new Object[] { 1, null, \"test\" }, \"MyNull\"));\r\n    assertArrayEquals(new String[] { \"MyNull\" }, ArrayUtils.toStringArray(new Object[] { null }, \"MyNull\"));\r\n    assertArrayEquals(new String[] { \"MyNull\", \"MyNull\" }, ArrayUtils.toStringArray(new Object[] { null, null }, \"MyNull\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ArrayUtilsTest.java",
  "methodName" : "testToStringDefault",
  "sourceCode" : "@Test\r\nvoid testToStringDefault() {\r\n    assertEquals(\"<empty>\", ArrayUtils.toString(null, \"<empty>\"));\r\n    assertEquals(\"{}\", ArrayUtils.toString(new Object[0], \"<empty>\"));\r\n    assertEquals(\"{}\", ArrayUtils.toString(new String[0], \"<empty>\"));\r\n    assertEquals(\"{<null>}\", ArrayUtils.toString(new String[] { null }, \"<empty>\"));\r\n    assertEquals(\"{pink,blue}\", ArrayUtils.toString(new String[] { \"pink\", \"blue\" }, \"<empty>\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\BitFieldTest.java",
  "methodName" : "testByte",
  "sourceCode" : "@Test\r\nvoid testByte() {\r\n    assertEquals(0, new BitField(0).setByteBoolean((byte) 0, true));\r\n    assertEquals(1, new BitField(1).setByteBoolean((byte) 0, true));\r\n    assertEquals(2, new BitField(2).setByteBoolean((byte) 0, true));\r\n    assertEquals(4, new BitField(4).setByteBoolean((byte) 0, true));\r\n    assertEquals(8, new BitField(8).setByteBoolean((byte) 0, true));\r\n    assertEquals(16, new BitField(16).setByteBoolean((byte) 0, true));\r\n    assertEquals(32, new BitField(32).setByteBoolean((byte) 0, true));\r\n    assertEquals(64, new BitField(64).setByteBoolean((byte) 0, true));\r\n    assertEquals(-128, new BitField(128).setByteBoolean((byte) 0, true));\r\n    assertEquals(1, new BitField(0).setByteBoolean((byte) 1, false));\r\n    assertEquals(0, new BitField(1).setByteBoolean((byte) 1, false));\r\n    assertEquals(0, new BitField(2).setByteBoolean((byte) 2, false));\r\n    assertEquals(0, new BitField(4).setByteBoolean((byte) 4, false));\r\n    assertEquals(0, new BitField(8).setByteBoolean((byte) 8, false));\r\n    assertEquals(0, new BitField(16).setByteBoolean((byte) 16, false));\r\n    assertEquals(0, new BitField(32).setByteBoolean((byte) 32, false));\r\n    assertEquals(0, new BitField(64).setByteBoolean((byte) 64, false));\r\n    assertEquals(0, new BitField(128).setByteBoolean((byte) 128, false));\r\n    assertEquals(-2, new BitField(1).setByteBoolean((byte) 255, false));\r\n    final byte clearedBit = new BitField(0x40).setByteBoolean((byte) -63, false);\r\n    assertFalse(new BitField(0x40).isSet(clearedBit));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\BitFieldTest.java",
  "methodName" : "testClear",
  "sourceCode" : "/**\r\n * test the clear() method\r\n */\r\n@Test\r\nvoid testClear() {\r\n    assertEquals(bf_multi.clear(-1), 0xFFFFC07F);\r\n    assertEquals(bf_single.clear(-1), 0xFFFFBFFF);\r\n    assertEquals(bf_zero.clear(-1), 0xFFFFFFFF);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\BitFieldTest.java",
  "methodName" : "testClearShort",
  "sourceCode" : "/**\r\n * test the clearShort() method\r\n */\r\n@Test\r\nvoid testClearShort() {\r\n    assertEquals(bf_multi.clearShort((short) -1), (short) 0xC07F);\r\n    assertEquals(bf_single.clearShort((short) -1), (short) 0xBFFF);\r\n    assertEquals(bf_zero.clearShort((short) -1), (short) 0xFFFF);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\BitFieldTest.java",
  "methodName" : "testGetRawValue",
  "sourceCode" : "/**\r\n * test the getRawValue() method\r\n */\r\n@Test\r\nvoid testGetRawValue() {\r\n    assertEquals(bf_multi.getRawValue(-1), 0x3F80);\r\n    assertEquals(bf_multi.getRawValue(0), 0);\r\n    assertEquals(bf_single.getRawValue(-1), 0x4000);\r\n    assertEquals(bf_single.getRawValue(0), 0);\r\n    assertEquals(bf_zero.getRawValue(-1), 0);\r\n    assertEquals(bf_zero.getRawValue(0), 0);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\BitFieldTest.java",
  "methodName" : "testGetShortRawValue",
  "sourceCode" : "/**\r\n * test the getShortRawValue() method\r\n */\r\n@Test\r\nvoid testGetShortRawValue() {\r\n    assertEquals(bf_multi.getShortRawValue((short) -1), (short) 0x3F80);\r\n    assertEquals(bf_multi.getShortRawValue((short) 0), (short) 0);\r\n    assertEquals(bf_single.getShortRawValue((short) -1), (short) 0x4000);\r\n    assertEquals(bf_single.getShortRawValue((short) 0), (short) 0);\r\n    assertEquals(bf_zero.getShortRawValue((short) -1), (short) 0);\r\n    assertEquals(bf_zero.getShortRawValue((short) 0), (short) 0);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\BitFieldTest.java",
  "methodName" : "testGetShortValue",
  "sourceCode" : "/**\r\n * test the getShortValue() method\r\n */\r\n@Test\r\nvoid testGetShortValue() {\r\n    assertEquals(bf_multi.getShortValue((short) -1), (short) 127);\r\n    assertEquals(bf_multi.getShortValue((short) 0), (short) 0);\r\n    assertEquals(bf_single.getShortValue((short) -1), (short) 1);\r\n    assertEquals(bf_single.getShortValue((short) 0), (short) 0);\r\n    assertEquals(bf_zero.getShortValue((short) -1), (short) 0);\r\n    assertEquals(bf_zero.getShortValue((short) 0), (short) 0);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\BitFieldTest.java",
  "methodName" : "testGetValue",
  "sourceCode" : "/**\r\n * test the getValue() method\r\n */\r\n@Test\r\nvoid testGetValue() {\r\n    assertEquals(bf_multi.getValue(-1), 127);\r\n    assertEquals(bf_multi.getValue(0), 0);\r\n    assertEquals(bf_single.getValue(-1), 1);\r\n    assertEquals(bf_single.getValue(0), 0);\r\n    assertEquals(bf_zero.getValue(-1), 0);\r\n    assertEquals(bf_zero.getValue(0), 0);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\BitFieldTest.java",
  "methodName" : "testIsAllSet",
  "sourceCode" : "/**\r\n * test the isAllSet() method\r\n */\r\n@Test\r\nvoid testIsAllSet() {\r\n    for (int j = 0; j < 0x3F80; j += 0x80) {\r\n        assertFalse(bf_multi.isAllSet(j));\r\n        assertTrue(bf_zero.isAllSet(j));\r\n    }\r\n    assertTrue(bf_multi.isAllSet(0x3F80));\r\n    assertFalse(bf_single.isAllSet(0));\r\n    assertTrue(bf_single.isAllSet(0x4000));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\BitFieldTest.java",
  "methodName" : "testIsSet",
  "sourceCode" : "/**\r\n * test the isSet() method\r\n */\r\n@Test\r\nvoid testIsSet() {\r\n    assertFalse(bf_multi.isSet(0));\r\n    assertFalse(bf_zero.isSet(0));\r\n    for (int j = 0x80; j <= 0x3F80; j += 0x80) {\r\n        assertTrue(bf_multi.isSet(j));\r\n    }\r\n    for (int j = 0x80; j <= 0x3F80; j += 0x80) {\r\n        assertFalse(bf_zero.isSet(j));\r\n    }\r\n    assertFalse(bf_single.isSet(0));\r\n    assertTrue(bf_single.isSet(0x4000));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\BitFieldTest.java",
  "methodName" : "testSet",
  "sourceCode" : "/**\r\n * test the set() method\r\n */\r\n@Test\r\nvoid testSet() {\r\n    assertEquals(bf_multi.set(0), 0x3F80);\r\n    assertEquals(bf_single.set(0), 0x4000);\r\n    assertEquals(bf_zero.set(0), 0);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\BitFieldTest.java",
  "methodName" : "testSetBoolean",
  "sourceCode" : "/**\r\n * test the setBoolean() method\r\n */\r\n@Test\r\nvoid testSetBoolean() {\r\n    assertEquals(bf_multi.set(0), bf_multi.setBoolean(0, true));\r\n    assertEquals(bf_single.set(0), bf_single.setBoolean(0, true));\r\n    assertEquals(bf_zero.set(0), bf_zero.setBoolean(0, true));\r\n    assertEquals(bf_multi.clear(-1), bf_multi.setBoolean(-1, false));\r\n    assertEquals(bf_single.clear(-1), bf_single.setBoolean(-1, false));\r\n    assertEquals(bf_zero.clear(-1), bf_zero.setBoolean(-1, false));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\BitFieldTest.java",
  "methodName" : "testSetShort",
  "sourceCode" : "/**\r\n * test the setShort() method\r\n */\r\n@Test\r\nvoid testSetShort() {\r\n    assertEquals(bf_multi.setShort((short) 0), (short) 0x3F80);\r\n    assertEquals(bf_single.setShort((short) 0), (short) 0x4000);\r\n    assertEquals(bf_zero.setShort((short) 0), (short) 0);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\BitFieldTest.java",
  "methodName" : "testSetShortBoolean",
  "sourceCode" : "/**\r\n * test the setShortBoolean() method\r\n */\r\n@Test\r\nvoid testSetShortBoolean() {\r\n    assertEquals(bf_multi.setShort((short) 0), bf_multi.setShortBoolean((short) 0, true));\r\n    assertEquals(bf_single.setShort((short) 0), bf_single.setShortBoolean((short) 0, true));\r\n    assertEquals(bf_zero.setShort((short) 0), bf_zero.setShortBoolean((short) 0, true));\r\n    assertEquals(bf_multi.clearShort((short) -1), bf_multi.setShortBoolean((short) -1, false));\r\n    assertEquals(bf_single.clearShort((short) -1), bf_single.setShortBoolean((short) -1, false));\r\n    assertEquals(bf_zero.clearShort((short) -1), bf_zero.setShortBoolean((short) -1, false));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\BitFieldTest.java",
  "methodName" : "testSetShortValue",
  "sourceCode" : "/**\r\n * test the setShortValue() method\r\n */\r\n@Test\r\nvoid testSetShortValue() {\r\n    for (int j = 0; j < 128; j++) {\r\n        assertEquals(bf_multi.getShortValue(bf_multi.setShortValue((short) 0, (short) j)), (short) j);\r\n        assertEquals(bf_multi.setShortValue((short) 0, (short) j), (short) (j << 7));\r\n    }\r\n    for (int j = 0; j < 128; j++) {\r\n        assertEquals(bf_zero.getShortValue(bf_zero.setShortValue((short) 0, (short) j)), (short) 0);\r\n        assertEquals(bf_zero.setShortValue((short) 0, (short) j), (short) 0);\r\n    }\r\n    // verify that excess bits are stripped off\r\n    assertEquals(bf_multi.setShortValue((short) 0x3f80, (short) 128), (short) 0);\r\n    for (int j = 0; j < 2; j++) {\r\n        assertEquals(bf_single.getShortValue(bf_single.setShortValue((short) 0, (short) j)), (short) j);\r\n        assertEquals(bf_single.setShortValue((short) 0, (short) j), (short) (j << 14));\r\n    }\r\n    // verify that excess bits are stripped off\r\n    assertEquals(bf_single.setShortValue((short) 0x4000, (short) 2), (short) 0);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\BitFieldTest.java",
  "methodName" : "testSetValue",
  "sourceCode" : "/**\r\n * test the setValue() method\r\n */\r\n@Test\r\nvoid testSetValue() {\r\n    for (int j = 0; j < 128; j++) {\r\n        assertEquals(bf_multi.getValue(bf_multi.setValue(0, j)), j);\r\n        assertEquals(bf_multi.setValue(0, j), j << 7);\r\n    }\r\n    for (int j = 0; j < 128; j++) {\r\n        assertEquals(bf_zero.getValue(bf_zero.setValue(0, j)), 0);\r\n        assertEquals(bf_zero.setValue(0, j), 0);\r\n    }\r\n    // verify that excess bits are stripped off\r\n    assertEquals(bf_multi.setValue(0x3f80, 128), 0);\r\n    for (int j = 0; j < 2; j++) {\r\n        assertEquals(bf_single.getValue(bf_single.setValue(0, j)), j);\r\n        assertEquals(bf_single.setValue(0, j), j << 14);\r\n    }\r\n    // verify that excess bits are stripped off\r\n    assertEquals(bf_single.setValue(0x4000, 2), 0);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\BooleanUtilsTest.java",
  "methodName" : "test_booleanValues",
  "sourceCode" : "@Test\r\nvoid test_booleanValues() {\r\n    final Boolean[] expected = { Boolean.FALSE, Boolean.TRUE };\r\n    assertArrayEquals(sort(expected), BooleanUtils.booleanValues());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\BooleanUtilsTest.java",
  "methodName" : "test_forEach",
  "sourceCode" : "@Test\r\nvoid test_forEach() {\r\n    final List<Boolean> list = new ArrayList<>();\r\n    BooleanUtils.forEach(list::add);\r\n    assertEquals(Arrays.asList(Boolean.FALSE, Boolean.TRUE), list);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\BooleanUtilsTest.java",
  "methodName" : "test_isFalse_Boolean",
  "sourceCode" : "@Test\r\nvoid test_isFalse_Boolean() {\r\n    assertFalse(BooleanUtils.isFalse(Boolean.TRUE));\r\n    assertTrue(BooleanUtils.isFalse(Boolean.FALSE));\r\n    assertFalse(BooleanUtils.isFalse(null));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\BooleanUtilsTest.java",
  "methodName" : "test_isNotFalse_Boolean",
  "sourceCode" : "@Test\r\nvoid test_isNotFalse_Boolean() {\r\n    assertTrue(BooleanUtils.isNotFalse(Boolean.TRUE));\r\n    assertFalse(BooleanUtils.isNotFalse(Boolean.FALSE));\r\n    assertTrue(BooleanUtils.isNotFalse(null));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\BooleanUtilsTest.java",
  "methodName" : "test_isNotTrue_Boolean",
  "sourceCode" : "@Test\r\nvoid test_isNotTrue_Boolean() {\r\n    assertFalse(BooleanUtils.isNotTrue(Boolean.TRUE));\r\n    assertTrue(BooleanUtils.isNotTrue(Boolean.FALSE));\r\n    assertTrue(BooleanUtils.isNotTrue(null));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\BooleanUtilsTest.java",
  "methodName" : "test_isTrue_Boolean",
  "sourceCode" : "@Test\r\nvoid test_isTrue_Boolean() {\r\n    assertTrue(BooleanUtils.isTrue(Boolean.TRUE));\r\n    assertFalse(BooleanUtils.isTrue(Boolean.FALSE));\r\n    assertFalse(BooleanUtils.isTrue(null));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\BooleanUtilsTest.java",
  "methodName" : "test_negate_Boolean",
  "sourceCode" : "@Test\r\nvoid test_negate_Boolean() {\r\n    assertSame(null, BooleanUtils.negate(null));\r\n    assertSame(Boolean.TRUE, BooleanUtils.negate(Boolean.FALSE));\r\n    assertSame(Boolean.FALSE, BooleanUtils.negate(Boolean.TRUE));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\BooleanUtilsTest.java",
  "methodName" : "test_primitiveValues",
  "sourceCode" : "@Test\r\nvoid test_primitiveValues() {\r\n    assertArrayEquals(new boolean[] { false, true }, BooleanUtils.primitiveValues());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\BooleanUtilsTest.java",
  "methodName" : "test_toBoolean_Boolean",
  "sourceCode" : "@Test\r\nvoid test_toBoolean_Boolean() {\r\n    assertTrue(BooleanUtils.toBoolean(Boolean.TRUE));\r\n    assertFalse(BooleanUtils.toBoolean(Boolean.FALSE));\r\n    assertFalse(BooleanUtils.toBoolean((Boolean) null));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\BooleanUtilsTest.java",
  "methodName" : "test_toBoolean_int",
  "sourceCode" : "@Test\r\nvoid test_toBoolean_int() {\r\n    assertTrue(BooleanUtils.toBoolean(1));\r\n    assertTrue(BooleanUtils.toBoolean(-1));\r\n    assertFalse(BooleanUtils.toBoolean(0));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\BooleanUtilsTest.java",
  "methodName" : "test_toBoolean_int_int_int",
  "sourceCode" : "@Test\r\nvoid test_toBoolean_int_int_int() {\r\n    assertTrue(BooleanUtils.toBoolean(6, 6, 7));\r\n    assertFalse(BooleanUtils.toBoolean(7, 6, 7));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\BooleanUtilsTest.java",
  "methodName" : "test_toBoolean_int_int_int_noMatch",
  "sourceCode" : "@Test\r\nvoid test_toBoolean_int_int_int_noMatch() {\r\n    assertIllegalArgumentException(() -> BooleanUtils.toBoolean(8, 6, 7));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\BooleanUtilsTest.java",
  "methodName" : "test_toBoolean_Integer_Integer_Integer",
  "sourceCode" : "@Test\r\nvoid test_toBoolean_Integer_Integer_Integer() {\r\n    final Integer six = Integer.valueOf(6);\r\n    final Integer seven = Integer.valueOf(7);\r\n    assertTrue(BooleanUtils.toBoolean(null, null, seven));\r\n    assertFalse(BooleanUtils.toBoolean(null, six, null));\r\n    assertTrue(BooleanUtils.toBoolean(Integer.valueOf(6), six, seven));\r\n    assertFalse(BooleanUtils.toBoolean(Integer.valueOf(7), six, seven));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\BooleanUtilsTest.java",
  "methodName" : "test_toBoolean_Integer_Integer_Integer_noMatch",
  "sourceCode" : "@Test\r\nvoid test_toBoolean_Integer_Integer_Integer_noMatch() {\r\n    assertIllegalArgumentException(() -> BooleanUtils.toBoolean(Integer.valueOf(8), Integer.valueOf(6), Integer.valueOf(7)));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\BooleanUtilsTest.java",
  "methodName" : "test_toBoolean_Integer_Integer_Integer_nullValue",
  "sourceCode" : "@Test\r\nvoid test_toBoolean_Integer_Integer_Integer_nullValue() {\r\n    assertIllegalArgumentException(() -> BooleanUtils.toBoolean(null, Integer.valueOf(6), Integer.valueOf(7)));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\BooleanUtilsTest.java",
  "methodName" : "test_toBoolean_String",
  "sourceCode" : "@Test\r\nvoid test_toBoolean_String() {\r\n    assertFalse(BooleanUtils.toBoolean((String) null));\r\n    assertFalse(BooleanUtils.toBoolean(\"\"));\r\n    assertFalse(BooleanUtils.toBoolean(\"off\"));\r\n    assertFalse(BooleanUtils.toBoolean(\"oof\"));\r\n    assertFalse(BooleanUtils.toBoolean(\"yep\"));\r\n    assertFalse(BooleanUtils.toBoolean(\"trux\"));\r\n    assertFalse(BooleanUtils.toBoolean(\"false\"));\r\n    assertFalse(BooleanUtils.toBoolean(\"a\"));\r\n    // interned handled differently\r\n    assertTrue(BooleanUtils.toBoolean(\"true\"));\r\n    assertTrue(BooleanUtils.toBoolean(new StringBuilder(\"tr\").append(\"ue\").toString()));\r\n    assertTrue(BooleanUtils.toBoolean(\"truE\"));\r\n    assertTrue(BooleanUtils.toBoolean(\"trUe\"));\r\n    assertTrue(BooleanUtils.toBoolean(\"trUE\"));\r\n    assertTrue(BooleanUtils.toBoolean(\"tRue\"));\r\n    assertTrue(BooleanUtils.toBoolean(\"tRuE\"));\r\n    assertTrue(BooleanUtils.toBoolean(\"tRUe\"));\r\n    assertTrue(BooleanUtils.toBoolean(\"tRUE\"));\r\n    assertTrue(BooleanUtils.toBoolean(\"TRUE\"));\r\n    assertTrue(BooleanUtils.toBoolean(\"TRUe\"));\r\n    assertTrue(BooleanUtils.toBoolean(\"TRuE\"));\r\n    assertTrue(BooleanUtils.toBoolean(\"TRue\"));\r\n    assertTrue(BooleanUtils.toBoolean(\"TrUE\"));\r\n    assertTrue(BooleanUtils.toBoolean(\"TrUe\"));\r\n    assertTrue(BooleanUtils.toBoolean(\"TruE\"));\r\n    assertTrue(BooleanUtils.toBoolean(\"True\"));\r\n    assertTrue(BooleanUtils.toBoolean(\"on\"));\r\n    assertTrue(BooleanUtils.toBoolean(\"oN\"));\r\n    assertTrue(BooleanUtils.toBoolean(\"On\"));\r\n    assertTrue(BooleanUtils.toBoolean(\"ON\"));\r\n    assertTrue(BooleanUtils.toBoolean(\"yes\"));\r\n    assertTrue(BooleanUtils.toBoolean(\"yeS\"));\r\n    assertTrue(BooleanUtils.toBoolean(\"yEs\"));\r\n    assertTrue(BooleanUtils.toBoolean(\"yES\"));\r\n    assertTrue(BooleanUtils.toBoolean(\"Yes\"));\r\n    assertTrue(BooleanUtils.toBoolean(\"YeS\"));\r\n    assertTrue(BooleanUtils.toBoolean(\"YEs\"));\r\n    assertTrue(BooleanUtils.toBoolean(\"YES\"));\r\n    assertTrue(BooleanUtils.toBoolean(\"1\"));\r\n    assertFalse(BooleanUtils.toBoolean(\"yes?\"));\r\n    assertFalse(BooleanUtils.toBoolean(\"0\"));\r\n    assertFalse(BooleanUtils.toBoolean(\"tru\"));\r\n    assertFalse(BooleanUtils.toBoolean(\"no\"));\r\n    assertFalse(BooleanUtils.toBoolean(\"off\"));\r\n    assertFalse(BooleanUtils.toBoolean(\"yoo\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\BooleanUtilsTest.java",
  "methodName" : "test_toBoolean_String_String_String",
  "sourceCode" : "@Test\r\nvoid test_toBoolean_String_String_String() {\r\n    assertTrue(BooleanUtils.toBoolean(null, null, \"N\"));\r\n    assertFalse(BooleanUtils.toBoolean(null, \"Y\", null));\r\n    assertTrue(BooleanUtils.toBoolean(\"Y\", \"Y\", \"N\"));\r\n    assertTrue(BooleanUtils.toBoolean(\"Y\", \"Y\", \"N\"));\r\n    assertFalse(BooleanUtils.toBoolean(\"N\", \"Y\", \"N\"));\r\n    assertFalse(BooleanUtils.toBoolean(\"N\", \"Y\", \"N\"));\r\n    assertTrue(BooleanUtils.toBoolean((String) null, null, null));\r\n    assertTrue(BooleanUtils.toBoolean(\"Y\", \"Y\", \"Y\"));\r\n    assertTrue(BooleanUtils.toBoolean(\"Y\", \"Y\", \"Y\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\BooleanUtilsTest.java",
  "methodName" : "test_toBoolean_String_String_String_noMatch",
  "sourceCode" : "@Test\r\nvoid test_toBoolean_String_String_String_noMatch() {\r\n    assertIllegalArgumentException(() -> BooleanUtils.toBoolean(\"X\", \"Y\", \"N\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\BooleanUtilsTest.java",
  "methodName" : "test_toBoolean_String_String_String_nullValue",
  "sourceCode" : "@Test\r\nvoid test_toBoolean_String_String_String_nullValue() {\r\n    assertIllegalArgumentException(() -> BooleanUtils.toBoolean(null, \"Y\", \"N\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\BooleanUtilsTest.java",
  "methodName" : "test_toBooleanDefaultIfNull_Boolean_boolean",
  "sourceCode" : "@Test\r\nvoid test_toBooleanDefaultIfNull_Boolean_boolean() {\r\n    assertTrue(BooleanUtils.toBooleanDefaultIfNull(Boolean.TRUE, true));\r\n    assertTrue(BooleanUtils.toBooleanDefaultIfNull(Boolean.TRUE, false));\r\n    assertFalse(BooleanUtils.toBooleanDefaultIfNull(Boolean.FALSE, true));\r\n    assertFalse(BooleanUtils.toBooleanDefaultIfNull(Boolean.FALSE, false));\r\n    assertTrue(BooleanUtils.toBooleanDefaultIfNull(null, true));\r\n    assertFalse(BooleanUtils.toBooleanDefaultIfNull(null, false));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\BooleanUtilsTest.java",
  "methodName" : "test_toBooleanObject_int",
  "sourceCode" : "@Test\r\nvoid test_toBooleanObject_int() {\r\n    assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(1));\r\n    assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(-1));\r\n    assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(0));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\BooleanUtilsTest.java",
  "methodName" : "test_toBooleanObject_int_int_int",
  "sourceCode" : "@Test\r\nvoid test_toBooleanObject_int_int_int() {\r\n    assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(6, 6, 7, 8));\r\n    assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(7, 6, 7, 8));\r\n    assertNull(BooleanUtils.toBooleanObject(8, 6, 7, 8));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\BooleanUtilsTest.java",
  "methodName" : "test_toBooleanObject_int_int_int_noMatch",
  "sourceCode" : "@Test\r\nvoid test_toBooleanObject_int_int_int_noMatch() {\r\n    assertIllegalArgumentException(() -> BooleanUtils.toBooleanObject(9, 6, 7, 8));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\BooleanUtilsTest.java",
  "methodName" : "test_toBooleanObject_Integer",
  "sourceCode" : "@Test\r\nvoid test_toBooleanObject_Integer() {\r\n    assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(Integer.valueOf(1)));\r\n    assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(Integer.valueOf(-1)));\r\n    assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(Integer.valueOf(0)));\r\n    assertNull(BooleanUtils.toBooleanObject((Integer) null));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\BooleanUtilsTest.java",
  "methodName" : "test_toBooleanObject_Integer_Integer_Integer_Integer",
  "sourceCode" : "@Test\r\nvoid test_toBooleanObject_Integer_Integer_Integer_Integer() {\r\n    final Integer six = Integer.valueOf(6);\r\n    final Integer seven = Integer.valueOf(7);\r\n    final Integer eight = Integer.valueOf(8);\r\n    assertSame(Boolean.TRUE, BooleanUtils.toBooleanObject(null, null, seven, eight));\r\n    assertSame(Boolean.FALSE, BooleanUtils.toBooleanObject(null, six, null, eight));\r\n    assertSame(null, BooleanUtils.toBooleanObject(null, six, seven, null));\r\n    assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(Integer.valueOf(6), six, seven, eight));\r\n    assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(Integer.valueOf(7), six, seven, eight));\r\n    assertNull(BooleanUtils.toBooleanObject(Integer.valueOf(8), six, seven, eight));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\BooleanUtilsTest.java",
  "methodName" : "test_toBooleanObject_Integer_Integer_Integer_Integer_noMatch",
  "sourceCode" : "@Test\r\nvoid test_toBooleanObject_Integer_Integer_Integer_Integer_noMatch() {\r\n    assertIllegalArgumentException(() -> BooleanUtils.toBooleanObject(Integer.valueOf(9), Integer.valueOf(6), Integer.valueOf(7), Integer.valueOf(8)));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\BooleanUtilsTest.java",
  "methodName" : "test_toBooleanObject_Integer_Integer_Integer_Integer_nullValue",
  "sourceCode" : "@Test\r\nvoid test_toBooleanObject_Integer_Integer_Integer_Integer_nullValue() {\r\n    assertIllegalArgumentException(() -> BooleanUtils.toBooleanObject(null, Integer.valueOf(6), Integer.valueOf(7), Integer.valueOf(8)));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\BooleanUtilsTest.java",
  "methodName" : "test_toBooleanObject_String",
  "sourceCode" : "@Test\r\nvoid test_toBooleanObject_String() {\r\n    assertNull(BooleanUtils.toBooleanObject((String) null));\r\n    assertNull(BooleanUtils.toBooleanObject(\"\"));\r\n    assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(\"false\"));\r\n    assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(\"no\"));\r\n    assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(\"off\"));\r\n    assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(\"FALSE\"));\r\n    assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(\"NO\"));\r\n    assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(\"OFF\"));\r\n    assertNull(BooleanUtils.toBooleanObject(\"oof\"));\r\n    assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(\"true\"));\r\n    assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(\"yes\"));\r\n    assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(\"on\"));\r\n    assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(\"TRUE\"));\r\n    assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(\"ON\"));\r\n    assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(\"YES\"));\r\n    assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(\"TruE\"));\r\n    assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(\"TruE\"));\r\n    // yes\r\n    assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(\"y\"));\r\n    assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(\"Y\"));\r\n    // true\r\n    assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(\"t\"));\r\n    assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(\"T\"));\r\n    assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(\"1\"));\r\n    // false\r\n    assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(\"f\"));\r\n    assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(\"F\"));\r\n    // No\r\n    assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(\"n\"));\r\n    assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(\"N\"));\r\n    assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(\"0\"));\r\n    assertNull(BooleanUtils.toBooleanObject(\"z\"));\r\n    assertNull(BooleanUtils.toBooleanObject(\"ab\"));\r\n    assertNull(BooleanUtils.toBooleanObject(\"yoo\"));\r\n    assertNull(BooleanUtils.toBooleanObject(\"true \"));\r\n    assertNull(BooleanUtils.toBooleanObject(\"ono\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\BooleanUtilsTest.java",
  "methodName" : "test_toBooleanObject_String_String_String_String",
  "sourceCode" : "@Test\r\nvoid test_toBooleanObject_String_String_String_String() {\r\n    assertSame(Boolean.TRUE, BooleanUtils.toBooleanObject(null, null, \"N\", \"U\"));\r\n    assertSame(Boolean.FALSE, BooleanUtils.toBooleanObject(null, \"Y\", null, \"U\"));\r\n    assertSame(null, BooleanUtils.toBooleanObject(null, \"Y\", \"N\", null));\r\n    assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(\"Y\", \"Y\", \"N\", \"U\"));\r\n    assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(\"N\", \"Y\", \"N\", \"U\"));\r\n    assertNull(BooleanUtils.toBooleanObject(\"U\", \"Y\", \"N\", \"U\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\BooleanUtilsTest.java",
  "methodName" : "test_toBooleanObject_String_String_String_String_noMatch",
  "sourceCode" : "@Test\r\nvoid test_toBooleanObject_String_String_String_String_noMatch() {\r\n    assertIllegalArgumentException(() -> BooleanUtils.toBooleanObject(\"X\", \"Y\", \"N\", \"U\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\BooleanUtilsTest.java",
  "methodName" : "test_toBooleanObject_String_String_String_String_nullValue",
  "sourceCode" : "@Test\r\nvoid test_toBooleanObject_String_String_String_String_nullValue() {\r\n    assertIllegalArgumentException(() -> BooleanUtils.toBooleanObject(null, \"Y\", \"N\", \"U\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\BooleanUtilsTest.java",
  "methodName" : "test_toInteger_boolean",
  "sourceCode" : "@Test\r\nvoid test_toInteger_boolean() {\r\n    assertEquals(1, BooleanUtils.toInteger(true));\r\n    assertEquals(0, BooleanUtils.toInteger(false));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\BooleanUtilsTest.java",
  "methodName" : "test_toInteger_boolean_int_int",
  "sourceCode" : "@Test\r\nvoid test_toInteger_boolean_int_int() {\r\n    assertEquals(6, BooleanUtils.toInteger(true, 6, 7));\r\n    assertEquals(7, BooleanUtils.toInteger(false, 6, 7));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\BooleanUtilsTest.java",
  "methodName" : "test_toInteger_Boolean_int_int_int",
  "sourceCode" : "@Test\r\nvoid test_toInteger_Boolean_int_int_int() {\r\n    assertEquals(6, BooleanUtils.toInteger(Boolean.TRUE, 6, 7, 8));\r\n    assertEquals(7, BooleanUtils.toInteger(Boolean.FALSE, 6, 7, 8));\r\n    assertEquals(8, BooleanUtils.toInteger(null, 6, 7, 8));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\BooleanUtilsTest.java",
  "methodName" : "test_toIntegerObject_boolean",
  "sourceCode" : "@Test\r\nvoid test_toIntegerObject_boolean() {\r\n    assertEquals(Integer.valueOf(1), BooleanUtils.toIntegerObject(true));\r\n    assertEquals(Integer.valueOf(0), BooleanUtils.toIntegerObject(false));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\BooleanUtilsTest.java",
  "methodName" : "test_toIntegerObject_Boolean",
  "sourceCode" : "@Test\r\nvoid test_toIntegerObject_Boolean() {\r\n    assertEquals(Integer.valueOf(1), BooleanUtils.toIntegerObject(Boolean.TRUE));\r\n    assertEquals(Integer.valueOf(0), BooleanUtils.toIntegerObject(Boolean.FALSE));\r\n    assertNull(BooleanUtils.toIntegerObject(null));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\BooleanUtilsTest.java",
  "methodName" : "test_toIntegerObject_boolean_Integer_Integer",
  "sourceCode" : "@Test\r\nvoid test_toIntegerObject_boolean_Integer_Integer() {\r\n    final Integer six = Integer.valueOf(6);\r\n    final Integer seven = Integer.valueOf(7);\r\n    assertEquals(six, BooleanUtils.toIntegerObject(true, six, seven));\r\n    assertEquals(seven, BooleanUtils.toIntegerObject(false, six, seven));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\BooleanUtilsTest.java",
  "methodName" : "test_toIntegerObject_Boolean_Integer_Integer_Integer",
  "sourceCode" : "@Test\r\nvoid test_toIntegerObject_Boolean_Integer_Integer_Integer() {\r\n    final Integer six = Integer.valueOf(6);\r\n    final Integer seven = Integer.valueOf(7);\r\n    final Integer eight = Integer.valueOf(8);\r\n    assertEquals(six, BooleanUtils.toIntegerObject(Boolean.TRUE, six, seven, eight));\r\n    assertEquals(seven, BooleanUtils.toIntegerObject(Boolean.FALSE, six, seven, eight));\r\n    assertEquals(eight, BooleanUtils.toIntegerObject(null, six, seven, eight));\r\n    assertNull(BooleanUtils.toIntegerObject(null, six, seven, null));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\BooleanUtilsTest.java",
  "methodName" : "test_toString_boolean_String_String_String",
  "sourceCode" : "@Test\r\nvoid test_toString_boolean_String_String_String() {\r\n    assertEquals(\"Y\", BooleanUtils.toString(true, \"Y\", \"N\"));\r\n    assertEquals(\"N\", BooleanUtils.toString(false, \"Y\", \"N\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\BooleanUtilsTest.java",
  "methodName" : "test_toString_Boolean_String_String_String",
  "sourceCode" : "@Test\r\nvoid test_toString_Boolean_String_String_String() {\r\n    assertEquals(\"U\", BooleanUtils.toString(null, \"Y\", \"N\", \"U\"));\r\n    assertEquals(\"Y\", BooleanUtils.toString(Boolean.TRUE, \"Y\", \"N\", \"U\"));\r\n    assertEquals(\"N\", BooleanUtils.toString(Boolean.FALSE, \"Y\", \"N\", \"U\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\BooleanUtilsTest.java",
  "methodName" : "test_toStringOnOff_boolean",
  "sourceCode" : "@Test\r\nvoid test_toStringOnOff_boolean() {\r\n    assertEquals(\"on\", BooleanUtils.toStringOnOff(true));\r\n    assertEquals(\"off\", BooleanUtils.toStringOnOff(false));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\BooleanUtilsTest.java",
  "methodName" : "test_toStringOnOff_Boolean",
  "sourceCode" : "@Test\r\nvoid test_toStringOnOff_Boolean() {\r\n    assertNull(BooleanUtils.toStringOnOff(null));\r\n    assertEquals(\"on\", BooleanUtils.toStringOnOff(Boolean.TRUE));\r\n    assertEquals(\"off\", BooleanUtils.toStringOnOff(Boolean.FALSE));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\BooleanUtilsTest.java",
  "methodName" : "test_toStringTrueFalse_boolean",
  "sourceCode" : "@Test\r\nvoid test_toStringTrueFalse_boolean() {\r\n    assertEquals(\"true\", BooleanUtils.toStringTrueFalse(true));\r\n    assertEquals(\"false\", BooleanUtils.toStringTrueFalse(false));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\BooleanUtilsTest.java",
  "methodName" : "test_toStringTrueFalse_Boolean",
  "sourceCode" : "@Test\r\nvoid test_toStringTrueFalse_Boolean() {\r\n    assertNull(BooleanUtils.toStringTrueFalse(null));\r\n    assertEquals(\"true\", BooleanUtils.toStringTrueFalse(Boolean.TRUE));\r\n    assertEquals(\"false\", BooleanUtils.toStringTrueFalse(Boolean.FALSE));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\BooleanUtilsTest.java",
  "methodName" : "test_toStringYesNo_boolean",
  "sourceCode" : "@Test\r\nvoid test_toStringYesNo_boolean() {\r\n    assertEquals(\"yes\", BooleanUtils.toStringYesNo(true));\r\n    assertEquals(\"no\", BooleanUtils.toStringYesNo(false));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\BooleanUtilsTest.java",
  "methodName" : "test_toStringYesNo_Boolean",
  "sourceCode" : "@Test\r\nvoid test_toStringYesNo_Boolean() {\r\n    assertNull(BooleanUtils.toStringYesNo(null));\r\n    assertEquals(\"yes\", BooleanUtils.toStringYesNo(Boolean.TRUE));\r\n    assertEquals(\"no\", BooleanUtils.toStringYesNo(Boolean.FALSE));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\BooleanUtilsTest.java",
  "methodName" : "test_values",
  "sourceCode" : "@Test\r\nvoid test_values() {\r\n    final List<Boolean> expected = Arrays.asList(Boolean.FALSE, Boolean.TRUE);\r\n    Collections.sort(expected);\r\n    assertEquals(expected, BooleanUtils.values());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\BooleanUtilsTest.java",
  "methodName" : "testAnd_object_emptyInput",
  "sourceCode" : "@Test\r\nvoid testAnd_object_emptyInput() {\r\n    assertIllegalArgumentException(() -> BooleanUtils.and(new Boolean[] {}));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\BooleanUtilsTest.java",
  "methodName" : "testAnd_object_nullElementInput",
  "sourceCode" : "@Test\r\nvoid testAnd_object_nullElementInput() {\r\n    assertEquals(Boolean.FALSE, BooleanUtils.and(new Boolean[] { null }));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\BooleanUtilsTest.java",
  "methodName" : "testAnd_object_nullInput",
  "sourceCode" : "@Test\r\nvoid testAnd_object_nullInput() {\r\n    assertNullPointerException(() -> BooleanUtils.and((Boolean[]) null));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\BooleanUtilsTest.java",
  "methodName" : "testAnd_object_validInput_2items",
  "sourceCode" : "@Test\r\nvoid testAnd_object_validInput_2items() {\r\n    assertTrue(BooleanUtils.and(new Boolean[] { Boolean.TRUE, Boolean.TRUE }).booleanValue(), \"False result for (true, true)\");\r\n    assertFalse(BooleanUtils.and(new Boolean[] { Boolean.FALSE, Boolean.FALSE }).booleanValue(), \"True result for (false, false)\");\r\n    assertFalse(BooleanUtils.and(new Boolean[] { Boolean.TRUE, Boolean.FALSE }).booleanValue(), \"True result for (true, false)\");\r\n    assertFalse(BooleanUtils.and(new Boolean[] { Boolean.FALSE, Boolean.TRUE }).booleanValue(), \"True result for (false, true)\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\BooleanUtilsTest.java",
  "methodName" : "testAnd_object_validInput_3items",
  "sourceCode" : "@Test\r\nvoid testAnd_object_validInput_3items() {\r\n    assertFalse(BooleanUtils.and(new Boolean[] { Boolean.FALSE, Boolean.FALSE, Boolean.TRUE }).booleanValue(), \"True result for (false, false, true)\");\r\n    assertFalse(BooleanUtils.and(new Boolean[] { Boolean.FALSE, Boolean.TRUE, Boolean.FALSE }).booleanValue(), \"True result for (false, true, false)\");\r\n    assertFalse(BooleanUtils.and(new Boolean[] { Boolean.TRUE, Boolean.FALSE, Boolean.FALSE }).booleanValue(), \"True result for (true, false, false)\");\r\n    assertTrue(BooleanUtils.and(new Boolean[] { Boolean.TRUE, Boolean.TRUE, Boolean.TRUE }).booleanValue(), \"False result for (true, true, true)\");\r\n    assertFalse(BooleanUtils.and(new Boolean[] { Boolean.FALSE, Boolean.FALSE, Boolean.FALSE }).booleanValue(), \"True result for (false, false)\");\r\n    assertFalse(BooleanUtils.and(new Boolean[] { Boolean.TRUE, Boolean.TRUE, Boolean.FALSE }).booleanValue(), \"True result for (true, true, false)\");\r\n    assertFalse(BooleanUtils.and(new Boolean[] { Boolean.TRUE, Boolean.FALSE, Boolean.TRUE }).booleanValue(), \"True result for (true, false, true)\");\r\n    assertFalse(BooleanUtils.and(new Boolean[] { Boolean.FALSE, Boolean.TRUE, Boolean.TRUE }).booleanValue(), \"True result for (false, true, true)\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\BooleanUtilsTest.java",
  "methodName" : "testAnd_primitive_emptyInput",
  "sourceCode" : "@Test\r\nvoid testAnd_primitive_emptyInput() {\r\n    assertIllegalArgumentException(() -> BooleanUtils.and(new boolean[] {}));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\BooleanUtilsTest.java",
  "methodName" : "testAnd_primitive_nullInput",
  "sourceCode" : "@Test\r\nvoid testAnd_primitive_nullInput() {\r\n    assertNullPointerException(() -> BooleanUtils.and((boolean[]) null));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\BooleanUtilsTest.java",
  "methodName" : "testAnd_primitive_validInput_2items",
  "sourceCode" : "@Test\r\nvoid testAnd_primitive_validInput_2items() {\r\n    assertTrue(BooleanUtils.and(new boolean[] { true, true }), \"False result for (true, true)\");\r\n    assertFalse(BooleanUtils.and(new boolean[] { false, false }), \"True result for (false, false)\");\r\n    assertFalse(BooleanUtils.and(new boolean[] { true, false }), \"True result for (true, false)\");\r\n    assertFalse(BooleanUtils.and(new boolean[] { false, true }), \"True result for (false, true)\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\BooleanUtilsTest.java",
  "methodName" : "testAnd_primitive_validInput_3items",
  "sourceCode" : "@Test\r\nvoid testAnd_primitive_validInput_3items() {\r\n    assertFalse(BooleanUtils.and(new boolean[] { false, false, true }), \"True result for (false, false, true)\");\r\n    assertFalse(BooleanUtils.and(new boolean[] { false, true, false }), \"True result for (false, true, false)\");\r\n    assertFalse(BooleanUtils.and(new boolean[] { true, false, false }), \"True result for (true, false, false)\");\r\n    assertTrue(BooleanUtils.and(new boolean[] { true, true, true }), \"False result for (true, true, true)\");\r\n    assertFalse(BooleanUtils.and(new boolean[] { false, false, false }), \"True result for (false, false)\");\r\n    assertFalse(BooleanUtils.and(new boolean[] { true, true, false }), \"True result for (true, true, false)\");\r\n    assertFalse(BooleanUtils.and(new boolean[] { true, false, true }), \"True result for (true, false, true)\");\r\n    assertFalse(BooleanUtils.and(new boolean[] { false, true, true }), \"True result for (false, true, true)\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\BooleanUtilsTest.java",
  "methodName" : "testCompare",
  "sourceCode" : "@Test\r\nvoid testCompare() {\r\n    assertTrue(BooleanUtils.compare(true, false) > 0);\r\n    assertEquals(0, BooleanUtils.compare(true, true));\r\n    assertEquals(0, BooleanUtils.compare(false, false));\r\n    assertTrue(BooleanUtils.compare(false, true) < 0);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\BooleanUtilsTest.java",
  "methodName" : "testConstructor",
  "sourceCode" : "@Test\r\nvoid testConstructor() {\r\n    assertNotNull(new BooleanUtils());\r\n    final Constructor<?>[] cons = BooleanUtils.class.getDeclaredConstructors();\r\n    assertEquals(1, cons.length);\r\n    assertTrue(Modifier.isPublic(cons[0].getModifiers()));\r\n    assertTrue(Modifier.isPublic(BooleanUtils.class.getModifiers()));\r\n    assertFalse(Modifier.isFinal(BooleanUtils.class.getModifiers()));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\BooleanUtilsTest.java",
  "methodName" : "testOneHot_object_emptyInput",
  "sourceCode" : "@Test\r\nvoid testOneHot_object_emptyInput() {\r\n    assertIllegalArgumentException(() -> BooleanUtils.oneHot(new Boolean[] {}));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\BooleanUtilsTest.java",
  "methodName" : "testOneHot_object_nullElementInput",
  "sourceCode" : "@Test\r\nvoid testOneHot_object_nullElementInput() {\r\n    assertEquals(Boolean.FALSE, BooleanUtils.oneHot(new Boolean[] { null }));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\BooleanUtilsTest.java",
  "methodName" : "testOneHot_object_nullInput",
  "sourceCode" : "@Test\r\nvoid testOneHot_object_nullInput() {\r\n    assertNullPointerException(() -> BooleanUtils.oneHot((Boolean[]) null));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\BooleanUtilsTest.java",
  "methodName" : "testOneHot_object_validInput_1item",
  "sourceCode" : "@Test\r\nvoid testOneHot_object_validInput_1item() {\r\n    assertTrue(BooleanUtils.oneHot(new Boolean[] { Boolean.TRUE }), \"true\");\r\n    assertFalse(BooleanUtils.oneHot(new Boolean[] { Boolean.FALSE }), \"false\");\r\n    assertFalse(BooleanUtils.oneHot(new Boolean[] { null }), \"false\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\BooleanUtilsTest.java",
  "methodName" : "testOneHot_object_validInput_2items",
  "sourceCode" : "@Test\r\nvoid testOneHot_object_validInput_2items() {\r\n    assertFalse(BooleanUtils.oneHot(new Boolean[] { true, true }), \"both true\");\r\n    assertFalse(BooleanUtils.oneHot(new Boolean[] { false, false }), \"both false\");\r\n    assertTrue(BooleanUtils.oneHot(new Boolean[] { true, false }), \"first true\");\r\n    assertTrue(BooleanUtils.oneHot(new Boolean[] { false, true }), \"last true\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\BooleanUtilsTest.java",
  "methodName" : "testOneHot_object_validInput_2ItemsNullsTreatedAsFalse",
  "sourceCode" : "@Test\r\nvoid testOneHot_object_validInput_2ItemsNullsTreatedAsFalse() {\r\n    assertFalse(BooleanUtils.oneHot(null, null), \"both null\");\r\n    assertTrue(BooleanUtils.oneHot(true, null), \"first true\");\r\n    assertTrue(BooleanUtils.oneHot(null, true), \"last true\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\BooleanUtilsTest.java",
  "methodName" : "testOneHot_object_validInput_3items",
  "sourceCode" : "@Test\r\nvoid testOneHot_object_validInput_3items() {\r\n    // none true\r\n    assertFalse(BooleanUtils.oneHot(new Boolean[] { false, false, false }), \"all false\");\r\n    // one true\r\n    assertTrue(BooleanUtils.oneHot(new Boolean[] { true, false, false }), \"first true\");\r\n    assertTrue(BooleanUtils.oneHot(new Boolean[] { false, true, false }), \"middle true\");\r\n    assertTrue(BooleanUtils.oneHot(new Boolean[] { false, false, true }), \"last true\");\r\n    // two true\r\n    assertFalse(BooleanUtils.oneHot(new Boolean[] { false, true, true }), \"first false\");\r\n    assertFalse(BooleanUtils.oneHot(new Boolean[] { true, false, true }), \"middle false\");\r\n    assertFalse(BooleanUtils.oneHot(new Boolean[] { true, true, false }), \"last false\");\r\n    // three true\r\n    assertFalse(BooleanUtils.oneHot(new Boolean[] { true, true, true }), \"all true\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\BooleanUtilsTest.java",
  "methodName" : "testOneHot_primitive_emptyInput",
  "sourceCode" : "@Test\r\nvoid testOneHot_primitive_emptyInput() {\r\n    assertIllegalArgumentException(() -> BooleanUtils.oneHot(new boolean[] {}));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\BooleanUtilsTest.java",
  "methodName" : "testOneHot_primitive_nullInput",
  "sourceCode" : "@Test\r\nvoid testOneHot_primitive_nullInput() {\r\n    assertNullPointerException(() -> BooleanUtils.oneHot((boolean[]) null));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\BooleanUtilsTest.java",
  "methodName" : "testOneHot_primitive_validInput_1item",
  "sourceCode" : "@Test\r\nvoid testOneHot_primitive_validInput_1item() {\r\n    assertTrue(BooleanUtils.oneHot(new boolean[] { true }), \"true\");\r\n    assertFalse(BooleanUtils.oneHot(new boolean[] { false }), \"false\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\BooleanUtilsTest.java",
  "methodName" : "testOneHot_primitive_validInput_2items",
  "sourceCode" : "@Test\r\nvoid testOneHot_primitive_validInput_2items() {\r\n    assertFalse(BooleanUtils.oneHot(new boolean[] { true, true }), \"both true\");\r\n    assertFalse(BooleanUtils.oneHot(new boolean[] { false, false }), \"both false\");\r\n    assertTrue(BooleanUtils.oneHot(new boolean[] { true, false }), \"first true\");\r\n    assertTrue(BooleanUtils.oneHot(new boolean[] { false, true }), \"last true\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\BooleanUtilsTest.java",
  "methodName" : "testOneHot_primitive_validInput_3items",
  "sourceCode" : "@Test\r\nvoid testOneHot_primitive_validInput_3items() {\r\n    // none true\r\n    assertFalse(BooleanUtils.oneHot(new boolean[] { false, false, false }), \"all false\");\r\n    // one true\r\n    assertTrue(BooleanUtils.oneHot(new boolean[] { true, false, false }), \"first true\");\r\n    assertTrue(BooleanUtils.oneHot(new boolean[] { false, true, false }), \"middle true\");\r\n    assertTrue(BooleanUtils.oneHot(new boolean[] { false, false, true }), \"last true\");\r\n    // two true\r\n    assertFalse(BooleanUtils.oneHot(new boolean[] { false, true, true }), \"first false\");\r\n    assertFalse(BooleanUtils.oneHot(new boolean[] { true, false, true }), \"middle false\");\r\n    assertFalse(BooleanUtils.oneHot(new boolean[] { true, true, false }), \"last false\");\r\n    // three true\r\n    assertFalse(BooleanUtils.oneHot(new boolean[] { true, true, true }), \"all true\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\BooleanUtilsTest.java",
  "methodName" : "testOr_object_emptyInput",
  "sourceCode" : "@Test\r\nvoid testOr_object_emptyInput() {\r\n    assertIllegalArgumentException(() -> BooleanUtils.or(new Boolean[] {}));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\BooleanUtilsTest.java",
  "methodName" : "testOr_object_nullElementInput",
  "sourceCode" : "@Test\r\nvoid testOr_object_nullElementInput() {\r\n    assertEquals(Boolean.FALSE, BooleanUtils.or(new Boolean[] { null }));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\BooleanUtilsTest.java",
  "methodName" : "testOr_object_nullInput",
  "sourceCode" : "@Test\r\nvoid testOr_object_nullInput() {\r\n    assertNullPointerException(() -> BooleanUtils.or((Boolean[]) null));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\BooleanUtilsTest.java",
  "methodName" : "testOr_object_validInput_2items",
  "sourceCode" : "@Test\r\nvoid testOr_object_validInput_2items() {\r\n    assertTrue(BooleanUtils.or(new Boolean[] { Boolean.TRUE, Boolean.TRUE }).booleanValue(), \"False result for (true, true)\");\r\n    assertFalse(BooleanUtils.or(new Boolean[] { Boolean.FALSE, Boolean.FALSE }).booleanValue(), \"True result for (false, false)\");\r\n    assertTrue(BooleanUtils.or(new Boolean[] { Boolean.TRUE, Boolean.FALSE }).booleanValue(), \"False result for (true, false)\");\r\n    assertTrue(BooleanUtils.or(new Boolean[] { Boolean.FALSE, Boolean.TRUE }).booleanValue(), \"False result for (false, true)\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\BooleanUtilsTest.java",
  "methodName" : "testOr_object_validInput_3items",
  "sourceCode" : "@Test\r\nvoid testOr_object_validInput_3items() {\r\n    assertTrue(BooleanUtils.or(new Boolean[] { Boolean.FALSE, Boolean.FALSE, Boolean.TRUE }).booleanValue(), \"False result for (false, false, true)\");\r\n    assertTrue(BooleanUtils.or(new Boolean[] { Boolean.FALSE, Boolean.TRUE, Boolean.FALSE }).booleanValue(), \"False result for (false, true, false)\");\r\n    assertTrue(BooleanUtils.or(new Boolean[] { Boolean.TRUE, Boolean.FALSE, Boolean.FALSE }).booleanValue(), \"False result for (true, false, false)\");\r\n    assertTrue(BooleanUtils.or(new Boolean[] { Boolean.TRUE, Boolean.TRUE, Boolean.TRUE }).booleanValue(), \"False result for (true, true, true)\");\r\n    assertFalse(BooleanUtils.or(new Boolean[] { Boolean.FALSE, Boolean.FALSE, Boolean.FALSE }).booleanValue(), \"True result for (false, false)\");\r\n    assertTrue(BooleanUtils.or(new Boolean[] { Boolean.TRUE, Boolean.TRUE, Boolean.FALSE }).booleanValue(), \"False result for (true, true, false)\");\r\n    assertTrue(BooleanUtils.or(new Boolean[] { Boolean.TRUE, Boolean.FALSE, Boolean.TRUE }).booleanValue(), \"False result for (true, false, true)\");\r\n    assertTrue(BooleanUtils.or(new Boolean[] { Boolean.FALSE, Boolean.TRUE, Boolean.TRUE }).booleanValue(), \"False result for (false, true, true)\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\BooleanUtilsTest.java",
  "methodName" : "testOr_primitive_emptyInput",
  "sourceCode" : "@Test\r\nvoid testOr_primitive_emptyInput() {\r\n    assertIllegalArgumentException(() -> BooleanUtils.or(new boolean[] {}));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\BooleanUtilsTest.java",
  "methodName" : "testOr_primitive_nullInput",
  "sourceCode" : "@Test\r\nvoid testOr_primitive_nullInput() {\r\n    assertNullPointerException(() -> BooleanUtils.or((boolean[]) null));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\BooleanUtilsTest.java",
  "methodName" : "testOr_primitive_validInput_2items",
  "sourceCode" : "@Test\r\nvoid testOr_primitive_validInput_2items() {\r\n    assertTrue(BooleanUtils.or(new boolean[] { true, true }), \"False result for (true, true)\");\r\n    assertFalse(BooleanUtils.or(new boolean[] { false, false }), \"True result for (false, false)\");\r\n    assertTrue(BooleanUtils.or(new boolean[] { true, false }), \"False result for (true, false)\");\r\n    assertTrue(BooleanUtils.or(new boolean[] { false, true }), \"False result for (false, true)\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\BooleanUtilsTest.java",
  "methodName" : "testOr_primitive_validInput_3items",
  "sourceCode" : "@Test\r\nvoid testOr_primitive_validInput_3items() {\r\n    assertTrue(BooleanUtils.or(new boolean[] { false, false, true }), \"False result for (false, false, true)\");\r\n    assertTrue(BooleanUtils.or(new boolean[] { false, true, false }), \"False result for (false, true, false)\");\r\n    assertTrue(BooleanUtils.or(new boolean[] { true, false, false }), \"False result for (true, false, false)\");\r\n    assertTrue(BooleanUtils.or(new boolean[] { true, true, true }), \"False result for (true, true, true)\");\r\n    assertFalse(BooleanUtils.or(new boolean[] { false, false, false }), \"True result for (false, false)\");\r\n    assertTrue(BooleanUtils.or(new boolean[] { true, true, false }), \"False result for (true, true, false)\");\r\n    assertTrue(BooleanUtils.or(new boolean[] { true, false, true }), \"False result for (true, false, true)\");\r\n    assertTrue(BooleanUtils.or(new boolean[] { false, true, true }), \"False result for (false, true, true)\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\BooleanUtilsTest.java",
  "methodName" : "testXor_object_emptyInput",
  "sourceCode" : "@Test\r\nvoid testXor_object_emptyInput() {\r\n    assertIllegalArgumentException(() -> BooleanUtils.xor(new Boolean[] {}));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\BooleanUtilsTest.java",
  "methodName" : "testXor_object_nullElementInput",
  "sourceCode" : "@Test\r\nvoid testXor_object_nullElementInput() {\r\n    assertEquals(Boolean.FALSE, BooleanUtils.xor(new Boolean[] { null }));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\BooleanUtilsTest.java",
  "methodName" : "testXor_object_nullInput",
  "sourceCode" : "@Test\r\nvoid testXor_object_nullInput() {\r\n    assertNullPointerException(() -> BooleanUtils.xor((Boolean[]) null));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\BooleanUtilsTest.java",
  "methodName" : "testXor_object_validInput_1items",
  "sourceCode" : "@Test\r\nvoid testXor_object_validInput_1items() {\r\n    assertEquals(true, BooleanUtils.xor(new Boolean[] { Boolean.TRUE }).booleanValue(), \"true\");\r\n    assertEquals(false, BooleanUtils.xor(new Boolean[] { Boolean.FALSE }).booleanValue(), \"false\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\BooleanUtilsTest.java",
  "methodName" : "testXor_object_validInput_2items",
  "sourceCode" : "@Test\r\nvoid testXor_object_validInput_2items() {\r\n    assertEquals(false ^ false, BooleanUtils.xor(new Boolean[] { Boolean.FALSE, Boolean.FALSE }).booleanValue(), \"false ^ false\");\r\n    assertEquals(false ^ true, BooleanUtils.xor(new Boolean[] { Boolean.FALSE, Boolean.TRUE }).booleanValue(), \"false ^ true\");\r\n    assertEquals(true ^ false, BooleanUtils.xor(new Boolean[] { Boolean.TRUE, Boolean.FALSE }).booleanValue(), \"true ^ false\");\r\n    assertEquals(true ^ true, BooleanUtils.xor(new Boolean[] { Boolean.TRUE, Boolean.TRUE }).booleanValue(), \"true ^ true\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\BooleanUtilsTest.java",
  "methodName" : "testXor_object_validInput_3items",
  "sourceCode" : "@Test\r\nvoid testXor_object_validInput_3items() {\r\n    assertEquals(false ^ false ^ false, BooleanUtils.xor(new Boolean[] { Boolean.FALSE, Boolean.FALSE, Boolean.FALSE }).booleanValue(), \"false ^ false ^ false\");\r\n    assertEquals(false ^ false ^ true, BooleanUtils.xor(new Boolean[] { Boolean.FALSE, Boolean.FALSE, Boolean.TRUE }).booleanValue(), \"false ^ false ^ true\");\r\n    assertEquals(false ^ true ^ false, BooleanUtils.xor(new Boolean[] { Boolean.FALSE, Boolean.TRUE, Boolean.FALSE }).booleanValue(), \"false ^ true ^ false\");\r\n    assertEquals(true ^ false ^ false, BooleanUtils.xor(new Boolean[] { Boolean.TRUE, Boolean.FALSE, Boolean.FALSE }).booleanValue(), \"true ^ false ^ false\");\r\n    assertEquals(true ^ false ^ true, BooleanUtils.xor(new Boolean[] { Boolean.TRUE, Boolean.FALSE, Boolean.TRUE }).booleanValue(), \"true ^ false ^ true\");\r\n    assertEquals(true ^ true ^ false, BooleanUtils.xor(new Boolean[] { Boolean.TRUE, Boolean.TRUE, Boolean.FALSE }).booleanValue(), \"true ^ true ^ false\");\r\n    assertEquals(false ^ true ^ true, BooleanUtils.xor(new Boolean[] { Boolean.FALSE, Boolean.TRUE, Boolean.TRUE }).booleanValue(), \"false ^ true ^ true\");\r\n    assertEquals(true ^ true ^ true, BooleanUtils.xor(new Boolean[] { Boolean.TRUE, Boolean.TRUE, Boolean.TRUE }).booleanValue(), \"true ^ true ^ true\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\BooleanUtilsTest.java",
  "methodName" : "testXor_primitive_emptyInput",
  "sourceCode" : "@Test\r\nvoid testXor_primitive_emptyInput() {\r\n    assertIllegalArgumentException(() -> BooleanUtils.xor(new boolean[] {}));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\BooleanUtilsTest.java",
  "methodName" : "testXor_primitive_nullInput",
  "sourceCode" : "@Test\r\nvoid testXor_primitive_nullInput() {\r\n    assertNullPointerException(() -> BooleanUtils.xor((boolean[]) null));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\BooleanUtilsTest.java",
  "methodName" : "testXor_primitive_validInput_1items",
  "sourceCode" : "@Test\r\nvoid testXor_primitive_validInput_1items() {\r\n    assertEquals(true, BooleanUtils.xor(new boolean[] { true }), \"true\");\r\n    assertEquals(false, BooleanUtils.xor(new boolean[] { false }), \"false\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\BooleanUtilsTest.java",
  "methodName" : "testXor_primitive_validInput_2items",
  "sourceCode" : "@Test\r\nvoid testXor_primitive_validInput_2items() {\r\n    assertEquals(true ^ true, BooleanUtils.xor(new boolean[] { true, true }), \"true ^ true\");\r\n    assertEquals(false ^ false, BooleanUtils.xor(new boolean[] { false, false }), \"false ^ false\");\r\n    assertEquals(true ^ false, BooleanUtils.xor(new boolean[] { true, false }), \"true ^ false\");\r\n    assertEquals(false ^ true, BooleanUtils.xor(new boolean[] { false, true }), \"false ^ true\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\BooleanUtilsTest.java",
  "methodName" : "testXor_primitive_validInput_3items",
  "sourceCode" : "@Test\r\nvoid testXor_primitive_validInput_3items() {\r\n    assertEquals(false ^ false ^ false, BooleanUtils.xor(new boolean[] { false, false, false }), \"false ^ false ^ false\");\r\n    assertEquals(false ^ false ^ true, BooleanUtils.xor(new boolean[] { false, false, true }), \"false ^ false ^ true\");\r\n    assertEquals(false ^ true ^ false, BooleanUtils.xor(new boolean[] { false, true, false }), \"false ^ true ^ false\");\r\n    assertEquals(false ^ true ^ true, BooleanUtils.xor(new boolean[] { false, true, true }), \"false ^ true ^ true\");\r\n    assertEquals(true ^ false ^ false, BooleanUtils.xor(new boolean[] { true, false, false }), \"true ^ false ^ false\");\r\n    assertEquals(true ^ false ^ true, BooleanUtils.xor(new boolean[] { true, false, true }), \"true ^ false ^ true\");\r\n    assertEquals(true ^ true ^ false, BooleanUtils.xor(new boolean[] { true, true, false }), \"true ^ true ^ false\");\r\n    assertEquals(true ^ true ^ true, BooleanUtils.xor(new boolean[] { true, true, true }), \"true ^ true ^ true\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\builder\\CompareToBuilderTest.java",
  "methodName" : "testAppendSuper",
  "sourceCode" : "@Test\r\nvoid testAppendSuper() {\r\n    final TestObject o1 = new TestObject(4);\r\n    final TestObject o2 = new TestObject(5);\r\n    assertEquals(0, new CompareToBuilder().appendSuper(0).append(o1, o1).toComparison());\r\n    assertTrue(new CompareToBuilder().appendSuper(0).append(o1, o2).toComparison() < 0);\r\n    assertTrue(new CompareToBuilder().appendSuper(0).append(o2, o1).toComparison() > 0);\r\n    assertTrue(new CompareToBuilder().appendSuper(-1).append(o1, o1).toComparison() < 0);\r\n    assertTrue(new CompareToBuilder().appendSuper(-1).append(o1, o2).toComparison() < 0);\r\n    assertTrue(new CompareToBuilder().appendSuper(1).append(o1, o1).toComparison() > 0);\r\n    assertTrue(new CompareToBuilder().appendSuper(1).append(o1, o2).toComparison() > 0);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\builder\\CompareToBuilderTest.java",
  "methodName" : "testBoolean",
  "sourceCode" : "@Test\r\nvoid testBoolean() {\r\n    final boolean o1 = true;\r\n    final boolean o2 = false;\r\n    assertEquals(0, new CompareToBuilder().append(o1, o1).toComparison());\r\n    assertEquals(0, new CompareToBuilder().append(o2, o2).toComparison());\r\n    assertTrue(new CompareToBuilder().append(o1, o2).toComparison() > 0);\r\n    assertTrue(new CompareToBuilder().append(o2, o1).toComparison() < 0);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\builder\\CompareToBuilderTest.java",
  "methodName" : "testBooleanArray",
  "sourceCode" : "@Test\r\nvoid testBooleanArray() {\r\n    final boolean[] obj1 = new boolean[2];\r\n    obj1[0] = true;\r\n    obj1[1] = false;\r\n    final boolean[] obj2 = new boolean[2];\r\n    obj2[0] = true;\r\n    obj2[1] = false;\r\n    final boolean[] obj3 = new boolean[3];\r\n    obj3[0] = true;\r\n    obj3[1] = false;\r\n    obj3[2] = true;\r\n    assertEquals(0, new CompareToBuilder().append(obj1, obj1).toComparison());\r\n    assertEquals(0, new CompareToBuilder().append(obj1, obj2).toComparison());\r\n    assertTrue(new CompareToBuilder().append(obj1, obj3).toComparison() < 0);\r\n    assertTrue(new CompareToBuilder().append(obj3, obj1).toComparison() > 0);\r\n    obj1[1] = true;\r\n    assertTrue(new CompareToBuilder().append(obj1, obj2).toComparison() > 0);\r\n    assertTrue(new CompareToBuilder().append(obj2, obj1).toComparison() < 0);\r\n    assertTrue(new CompareToBuilder().append(obj1, null).toComparison() > 0);\r\n    assertEquals(0, new CompareToBuilder().append((boolean[]) null, null).toComparison());\r\n    assertTrue(new CompareToBuilder().append(null, obj1).toComparison() < 0);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\builder\\CompareToBuilderTest.java",
  "methodName" : "testBooleanArrayHiddenByObject",
  "sourceCode" : "@Test\r\nvoid testBooleanArrayHiddenByObject() {\r\n    final boolean[] array1 = new boolean[2];\r\n    array1[0] = true;\r\n    array1[1] = false;\r\n    final boolean[] array2 = new boolean[2];\r\n    array2[0] = true;\r\n    array2[1] = false;\r\n    final boolean[] array3 = new boolean[3];\r\n    array3[0] = true;\r\n    array3[1] = false;\r\n    array3[2] = true;\r\n    final Object obj1 = array1;\r\n    final Object obj2 = array2;\r\n    final Object obj3 = array3;\r\n    assertEquals(0, new CompareToBuilder().append(obj1, obj1).toComparison());\r\n    assertEquals(0, new CompareToBuilder().append(obj1, obj2).toComparison());\r\n    assertTrue(new CompareToBuilder().append(obj1, obj3).toComparison() < 0);\r\n    assertTrue(new CompareToBuilder().append(obj3, obj1).toComparison() > 0);\r\n    array1[1] = true;\r\n    assertTrue(new CompareToBuilder().append(obj1, obj2).toComparison() > 0);\r\n    assertTrue(new CompareToBuilder().append(obj2, obj1).toComparison() < 0);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\builder\\CompareToBuilderTest.java",
  "methodName" : "testByte",
  "sourceCode" : "@Test\r\nvoid testByte() {\r\n    final byte o1 = 1;\r\n    final byte o2 = 2;\r\n    assertEquals(0, new CompareToBuilder().append(o1, o1).toComparison());\r\n    assertTrue(new CompareToBuilder().append(o1, o2).toComparison() < 0);\r\n    assertTrue(new CompareToBuilder().append(o2, o1).toComparison() > 0);\r\n    assertTrue(new CompareToBuilder().append(o1, Byte.MAX_VALUE).toComparison() < 0);\r\n    assertTrue(new CompareToBuilder().append(Byte.MAX_VALUE, o1).toComparison() > 0);\r\n    assertTrue(new CompareToBuilder().append(o1, Byte.MIN_VALUE).toComparison() > 0);\r\n    assertTrue(new CompareToBuilder().append(Byte.MIN_VALUE, o1).toComparison() < 0);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\builder\\CompareToBuilderTest.java",
  "methodName" : "testByteArray",
  "sourceCode" : "@Test\r\nvoid testByteArray() {\r\n    final byte[] obj1 = new byte[2];\r\n    obj1[0] = 5;\r\n    obj1[1] = 6;\r\n    final byte[] obj2 = new byte[2];\r\n    obj2[0] = 5;\r\n    obj2[1] = 6;\r\n    final byte[] obj3 = new byte[3];\r\n    obj3[0] = 5;\r\n    obj3[1] = 6;\r\n    obj3[2] = 7;\r\n    assertEquals(0, new CompareToBuilder().append(obj1, obj1).toComparison());\r\n    assertEquals(0, new CompareToBuilder().append(obj1, obj2).toComparison());\r\n    assertTrue(new CompareToBuilder().append(obj1, obj3).toComparison() < 0);\r\n    assertTrue(new CompareToBuilder().append(obj3, obj1).toComparison() > 0);\r\n    obj1[1] = 7;\r\n    assertTrue(new CompareToBuilder().append(obj1, obj2).toComparison() > 0);\r\n    assertTrue(new CompareToBuilder().append(obj2, obj1).toComparison() < 0);\r\n    assertTrue(new CompareToBuilder().append(obj1, null).toComparison() > 0);\r\n    assertEquals(0, new CompareToBuilder().append((byte[]) null, null).toComparison());\r\n    assertTrue(new CompareToBuilder().append(null, obj1).toComparison() < 0);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\builder\\CompareToBuilderTest.java",
  "methodName" : "testByteArrayHiddenByObject",
  "sourceCode" : "@Test\r\nvoid testByteArrayHiddenByObject() {\r\n    final byte[] array1 = new byte[2];\r\n    array1[0] = 5;\r\n    array1[1] = 6;\r\n    final byte[] array2 = new byte[2];\r\n    array2[0] = 5;\r\n    array2[1] = 6;\r\n    final byte[] array3 = new byte[3];\r\n    array3[0] = 5;\r\n    array3[1] = 6;\r\n    array3[2] = 7;\r\n    final Object obj1 = array1;\r\n    final Object obj2 = array2;\r\n    final Object obj3 = array3;\r\n    assertEquals(0, new CompareToBuilder().append(obj1, obj1).toComparison());\r\n    assertEquals(0, new CompareToBuilder().append(obj1, obj2).toComparison());\r\n    assertTrue(new CompareToBuilder().append(obj1, obj3).toComparison() < 0);\r\n    assertTrue(new CompareToBuilder().append(obj3, obj1).toComparison() > 0);\r\n    array1[1] = 7;\r\n    assertTrue(new CompareToBuilder().append(obj1, obj2).toComparison() > 0);\r\n    assertTrue(new CompareToBuilder().append(obj2, obj1).toComparison() < 0);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\builder\\CompareToBuilderTest.java",
  "methodName" : "testChar",
  "sourceCode" : "@Test\r\nvoid testChar() {\r\n    final char o1 = 1;\r\n    final char o2 = 2;\r\n    assertEquals(0, new CompareToBuilder().append(o1, o1).toComparison());\r\n    assertTrue(new CompareToBuilder().append(o1, o2).toComparison() < 0);\r\n    assertTrue(new CompareToBuilder().append(o2, o1).toComparison() > 0);\r\n    assertTrue(new CompareToBuilder().append(o1, Character.MAX_VALUE).toComparison() < 0);\r\n    assertTrue(new CompareToBuilder().append(Character.MAX_VALUE, o1).toComparison() > 0);\r\n    assertTrue(new CompareToBuilder().append(o1, Character.MIN_VALUE).toComparison() > 0);\r\n    assertTrue(new CompareToBuilder().append(Character.MIN_VALUE, o1).toComparison() < 0);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\builder\\CompareToBuilderTest.java",
  "methodName" : "testCharArray",
  "sourceCode" : "@Test\r\nvoid testCharArray() {\r\n    final char[] obj1 = new char[2];\r\n    obj1[0] = 5;\r\n    obj1[1] = 6;\r\n    final char[] obj2 = new char[2];\r\n    obj2[0] = 5;\r\n    obj2[1] = 6;\r\n    final char[] obj3 = new char[3];\r\n    obj3[0] = 5;\r\n    obj3[1] = 6;\r\n    obj3[2] = 7;\r\n    assertEquals(0, new CompareToBuilder().append(obj1, obj1).toComparison());\r\n    assertEquals(0, new CompareToBuilder().append(obj1, obj2).toComparison());\r\n    assertTrue(new CompareToBuilder().append(obj1, obj3).toComparison() < 0);\r\n    assertTrue(new CompareToBuilder().append(obj3, obj1).toComparison() > 0);\r\n    obj1[1] = 7;\r\n    assertTrue(new CompareToBuilder().append(obj1, obj2).toComparison() > 0);\r\n    assertTrue(new CompareToBuilder().append(obj2, obj1).toComparison() < 0);\r\n    assertTrue(new CompareToBuilder().append(obj1, null).toComparison() > 0);\r\n    assertEquals(0, new CompareToBuilder().append((char[]) null, null).toComparison());\r\n    assertTrue(new CompareToBuilder().append(null, obj1).toComparison() < 0);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\builder\\CompareToBuilderTest.java",
  "methodName" : "testCharArrayHiddenByObject",
  "sourceCode" : "@Test\r\nvoid testCharArrayHiddenByObject() {\r\n    final char[] array1 = new char[2];\r\n    array1[0] = 5;\r\n    array1[1] = 6;\r\n    final char[] array2 = new char[2];\r\n    array2[0] = 5;\r\n    array2[1] = 6;\r\n    final char[] array3 = new char[3];\r\n    array3[0] = 5;\r\n    array3[1] = 6;\r\n    array3[2] = 7;\r\n    final Object obj1 = array1;\r\n    final Object obj2 = array2;\r\n    final Object obj3 = array3;\r\n    assertEquals(0, new CompareToBuilder().append(obj1, obj1).toComparison());\r\n    assertEquals(0, new CompareToBuilder().append(obj1, obj2).toComparison());\r\n    assertTrue(new CompareToBuilder().append(obj1, obj3).toComparison() < 0);\r\n    assertTrue(new CompareToBuilder().append(obj3, obj1).toComparison() > 0);\r\n    array1[1] = 7;\r\n    assertTrue(new CompareToBuilder().append(obj1, obj2).toComparison() > 0);\r\n    assertTrue(new CompareToBuilder().append(obj2, obj1).toComparison() < 0);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\builder\\CompareToBuilderTest.java",
  "methodName" : "testDouble",
  "sourceCode" : "@Test\r\nvoid testDouble() {\r\n    final double o1 = 1;\r\n    final double o2 = 2;\r\n    assertEquals(0, new CompareToBuilder().append(o1, o1).toComparison());\r\n    assertTrue(new CompareToBuilder().append(o1, o2).toComparison() < 0);\r\n    assertTrue(new CompareToBuilder().append(o2, o1).toComparison() > 0);\r\n    assertTrue(new CompareToBuilder().append(o1, Double.MAX_VALUE).toComparison() < 0);\r\n    assertTrue(new CompareToBuilder().append(Double.MAX_VALUE, o1).toComparison() > 0);\r\n    assertTrue(new CompareToBuilder().append(o1, Double.MIN_VALUE).toComparison() > 0);\r\n    assertTrue(new CompareToBuilder().append(Double.MIN_VALUE, o1).toComparison() < 0);\r\n    assertEquals(0, new CompareToBuilder().append(Double.NaN, Double.NaN).toComparison());\r\n    assertTrue(new CompareToBuilder().append(Double.NaN, Double.MAX_VALUE).toComparison() > 0);\r\n    assertTrue(new CompareToBuilder().append(Double.POSITIVE_INFINITY, Double.MAX_VALUE).toComparison() > 0);\r\n    assertTrue(new CompareToBuilder().append(Double.NEGATIVE_INFINITY, Double.MIN_VALUE).toComparison() < 0);\r\n    assertTrue(new CompareToBuilder().append(o1, Double.NaN).toComparison() < 0);\r\n    assertTrue(new CompareToBuilder().append(Double.NaN, o1).toComparison() > 0);\r\n    assertTrue(new CompareToBuilder().append(-0.0, 0.0).toComparison() < 0);\r\n    assertTrue(new CompareToBuilder().append(0.0, -0.0).toComparison() > 0);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\builder\\CompareToBuilderTest.java",
  "methodName" : "testDoubleArray",
  "sourceCode" : "@Test\r\nvoid testDoubleArray() {\r\n    final double[] obj1 = new double[2];\r\n    obj1[0] = 5;\r\n    obj1[1] = 6;\r\n    final double[] obj2 = new double[2];\r\n    obj2[0] = 5;\r\n    obj2[1] = 6;\r\n    final double[] obj3 = new double[3];\r\n    obj3[0] = 5;\r\n    obj3[1] = 6;\r\n    obj3[2] = 7;\r\n    assertEquals(0, new CompareToBuilder().append(obj1, obj1).toComparison());\r\n    assertEquals(0, new CompareToBuilder().append(obj1, obj2).toComparison());\r\n    assertTrue(new CompareToBuilder().append(obj1, obj3).toComparison() < 0);\r\n    assertTrue(new CompareToBuilder().append(obj3, obj1).toComparison() > 0);\r\n    obj1[1] = 7;\r\n    assertTrue(new CompareToBuilder().append(obj1, obj2).toComparison() > 0);\r\n    assertTrue(new CompareToBuilder().append(obj2, obj1).toComparison() < 0);\r\n    assertTrue(new CompareToBuilder().append(obj1, null).toComparison() > 0);\r\n    assertEquals(0, new CompareToBuilder().append((double[]) null, null).toComparison());\r\n    assertTrue(new CompareToBuilder().append(null, obj1).toComparison() < 0);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\builder\\CompareToBuilderTest.java",
  "methodName" : "testDoubleArrayHiddenByObject",
  "sourceCode" : "@Test\r\nvoid testDoubleArrayHiddenByObject() {\r\n    final double[] array1 = new double[2];\r\n    array1[0] = 5;\r\n    array1[1] = 6;\r\n    final double[] array2 = new double[2];\r\n    array2[0] = 5;\r\n    array2[1] = 6;\r\n    final double[] array3 = new double[3];\r\n    array3[0] = 5;\r\n    array3[1] = 6;\r\n    array3[2] = 7;\r\n    final Object obj1 = array1;\r\n    final Object obj2 = array2;\r\n    final Object obj3 = array3;\r\n    assertEquals(0, new CompareToBuilder().append(obj1, obj1).toComparison());\r\n    assertEquals(0, new CompareToBuilder().append(obj1, obj2).toComparison());\r\n    assertTrue(new CompareToBuilder().append(obj1, obj3).toComparison() < 0);\r\n    assertTrue(new CompareToBuilder().append(obj3, obj1).toComparison() > 0);\r\n    array1[1] = 7;\r\n    assertTrue(new CompareToBuilder().append(obj1, obj2).toComparison() > 0);\r\n    assertTrue(new CompareToBuilder().append(obj2, obj1).toComparison() < 0);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\builder\\CompareToBuilderTest.java",
  "methodName" : "testFloat",
  "sourceCode" : "@Test\r\nvoid testFloat() {\r\n    final float o1 = 1;\r\n    final float o2 = 2;\r\n    assertEquals(0, new CompareToBuilder().append(o1, o1).toComparison());\r\n    assertTrue(new CompareToBuilder().append(o1, o2).toComparison() < 0);\r\n    assertTrue(new CompareToBuilder().append(o2, o1).toComparison() > 0);\r\n    assertTrue(new CompareToBuilder().append(o1, Float.MAX_VALUE).toComparison() < 0);\r\n    assertTrue(new CompareToBuilder().append(Float.MAX_VALUE, o1).toComparison() > 0);\r\n    assertTrue(new CompareToBuilder().append(o1, Float.MIN_VALUE).toComparison() > 0);\r\n    assertTrue(new CompareToBuilder().append(Float.MIN_VALUE, o1).toComparison() < 0);\r\n    assertEquals(0, new CompareToBuilder().append(Float.NaN, Float.NaN).toComparison());\r\n    assertTrue(new CompareToBuilder().append(Float.NaN, Float.MAX_VALUE).toComparison() > 0);\r\n    assertTrue(new CompareToBuilder().append(Float.POSITIVE_INFINITY, Float.MAX_VALUE).toComparison() > 0);\r\n    assertTrue(new CompareToBuilder().append(Float.NEGATIVE_INFINITY, Float.MIN_VALUE).toComparison() < 0);\r\n    assertTrue(new CompareToBuilder().append(o1, Float.NaN).toComparison() < 0);\r\n    assertTrue(new CompareToBuilder().append(Float.NaN, o1).toComparison() > 0);\r\n    assertTrue(new CompareToBuilder().append(-0.0, 0.0).toComparison() < 0);\r\n    assertTrue(new CompareToBuilder().append(0.0, -0.0).toComparison() > 0);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\builder\\CompareToBuilderTest.java",
  "methodName" : "testFloatArray",
  "sourceCode" : "@Test\r\nvoid testFloatArray() {\r\n    final float[] obj1 = new float[2];\r\n    obj1[0] = 5;\r\n    obj1[1] = 6;\r\n    final float[] obj2 = new float[2];\r\n    obj2[0] = 5;\r\n    obj2[1] = 6;\r\n    final float[] obj3 = new float[3];\r\n    obj3[0] = 5;\r\n    obj3[1] = 6;\r\n    obj3[2] = 7;\r\n    assertEquals(0, new CompareToBuilder().append(obj1, obj1).toComparison());\r\n    assertEquals(0, new CompareToBuilder().append(obj1, obj2).toComparison());\r\n    assertTrue(new CompareToBuilder().append(obj1, obj3).toComparison() < 0);\r\n    assertTrue(new CompareToBuilder().append(obj3, obj1).toComparison() > 0);\r\n    obj1[1] = 7;\r\n    assertTrue(new CompareToBuilder().append(obj1, obj2).toComparison() > 0);\r\n    assertTrue(new CompareToBuilder().append(obj2, obj1).toComparison() < 0);\r\n    assertTrue(new CompareToBuilder().append(obj1, null).toComparison() > 0);\r\n    assertEquals(0, new CompareToBuilder().append((float[]) null, null).toComparison());\r\n    assertTrue(new CompareToBuilder().append(null, obj1).toComparison() < 0);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\builder\\CompareToBuilderTest.java",
  "methodName" : "testFloatArrayHiddenByObject",
  "sourceCode" : "@Test\r\nvoid testFloatArrayHiddenByObject() {\r\n    final float[] array1 = new float[2];\r\n    array1[0] = 5;\r\n    array1[1] = 6;\r\n    final float[] array2 = new float[2];\r\n    array2[0] = 5;\r\n    array2[1] = 6;\r\n    final float[] array3 = new float[3];\r\n    array3[0] = 5;\r\n    array3[1] = 6;\r\n    array3[2] = 7;\r\n    final Object obj1 = array1;\r\n    final Object obj2 = array2;\r\n    final Object obj3 = array3;\r\n    assertEquals(0, new CompareToBuilder().append(obj1, obj1).toComparison());\r\n    assertEquals(0, new CompareToBuilder().append(obj1, obj2).toComparison());\r\n    assertTrue(new CompareToBuilder().append(obj1, obj3).toComparison() < 0);\r\n    assertTrue(new CompareToBuilder().append(obj3, obj1).toComparison() > 0);\r\n    array1[1] = 7;\r\n    assertTrue(new CompareToBuilder().append(obj1, obj2).toComparison() > 0);\r\n    assertTrue(new CompareToBuilder().append(obj2, obj1).toComparison() < 0);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\builder\\CompareToBuilderTest.java",
  "methodName" : "testInt",
  "sourceCode" : "@Test\r\nvoid testInt() {\r\n    final int o1 = 1;\r\n    final int o2 = 2;\r\n    assertEquals(0, new CompareToBuilder().append(o1, o1).toComparison());\r\n    assertTrue(new CompareToBuilder().append(o1, o2).toComparison() < 0);\r\n    assertTrue(new CompareToBuilder().append(o2, o1).toComparison() > 0);\r\n    assertTrue(new CompareToBuilder().append(o1, Integer.MAX_VALUE).toComparison() < 0);\r\n    assertTrue(new CompareToBuilder().append(Integer.MAX_VALUE, o1).toComparison() > 0);\r\n    assertTrue(new CompareToBuilder().append(o1, Integer.MIN_VALUE).toComparison() > 0);\r\n    assertTrue(new CompareToBuilder().append(Integer.MIN_VALUE, o1).toComparison() < 0);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\builder\\CompareToBuilderTest.java",
  "methodName" : "testIntArray",
  "sourceCode" : "@Test\r\nvoid testIntArray() {\r\n    final int[] obj1 = new int[2];\r\n    obj1[0] = 5;\r\n    obj1[1] = 6;\r\n    final int[] obj2 = new int[2];\r\n    obj2[0] = 5;\r\n    obj2[1] = 6;\r\n    final int[] obj3 = new int[3];\r\n    obj3[0] = 5;\r\n    obj3[1] = 6;\r\n    obj3[2] = 7;\r\n    assertEquals(0, new CompareToBuilder().append(obj1, obj1).toComparison());\r\n    assertEquals(0, new CompareToBuilder().append(obj1, obj2).toComparison());\r\n    assertTrue(new CompareToBuilder().append(obj1, obj3).toComparison() < 0);\r\n    assertTrue(new CompareToBuilder().append(obj3, obj1).toComparison() > 0);\r\n    obj1[1] = 7;\r\n    assertTrue(new CompareToBuilder().append(obj1, obj2).toComparison() > 0);\r\n    assertTrue(new CompareToBuilder().append(obj2, obj1).toComparison() < 0);\r\n    assertTrue(new CompareToBuilder().append(obj1, null).toComparison() > 0);\r\n    assertEquals(0, new CompareToBuilder().append((int[]) null, null).toComparison());\r\n    assertTrue(new CompareToBuilder().append(null, obj1).toComparison() < 0);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\builder\\CompareToBuilderTest.java",
  "methodName" : "testIntArrayHiddenByObject",
  "sourceCode" : "@Test\r\nvoid testIntArrayHiddenByObject() {\r\n    final int[] array1 = new int[2];\r\n    array1[0] = 5;\r\n    array1[1] = 6;\r\n    final int[] array2 = new int[2];\r\n    array2[0] = 5;\r\n    array2[1] = 6;\r\n    final int[] array3 = new int[3];\r\n    array3[0] = 5;\r\n    array3[1] = 6;\r\n    array3[2] = 7;\r\n    final Object obj1 = array1;\r\n    final Object obj2 = array2;\r\n    final Object obj3 = array3;\r\n    assertEquals(0, new CompareToBuilder().append(obj1, obj1).toComparison());\r\n    assertEquals(0, new CompareToBuilder().append(obj1, obj2).toComparison());\r\n    assertTrue(new CompareToBuilder().append(obj1, obj3).toComparison() < 0);\r\n    assertTrue(new CompareToBuilder().append(obj3, obj1).toComparison() > 0);\r\n    array1[1] = 7;\r\n    assertTrue(new CompareToBuilder().append(obj1, obj2).toComparison() > 0);\r\n    assertTrue(new CompareToBuilder().append(obj2, obj1).toComparison() < 0);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\builder\\CompareToBuilderTest.java",
  "methodName" : "testLong",
  "sourceCode" : "@Test\r\nvoid testLong() {\r\n    final long o1 = 1L;\r\n    final long o2 = 2L;\r\n    assertEquals(0, new CompareToBuilder().append(o1, o1).toComparison());\r\n    assertTrue(new CompareToBuilder().append(o1, o2).toComparison() < 0);\r\n    assertTrue(new CompareToBuilder().append(o2, o1).toComparison() > 0);\r\n    assertTrue(new CompareToBuilder().append(o1, Long.MAX_VALUE).toComparison() < 0);\r\n    assertTrue(new CompareToBuilder().append(Long.MAX_VALUE, o1).toComparison() > 0);\r\n    assertTrue(new CompareToBuilder().append(o1, Long.MIN_VALUE).toComparison() > 0);\r\n    assertTrue(new CompareToBuilder().append(Long.MIN_VALUE, o1).toComparison() < 0);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\builder\\CompareToBuilderTest.java",
  "methodName" : "testLongArray",
  "sourceCode" : "@Test\r\nvoid testLongArray() {\r\n    final long[] obj1 = new long[2];\r\n    obj1[0] = 5L;\r\n    obj1[1] = 6L;\r\n    final long[] obj2 = new long[2];\r\n    obj2[0] = 5L;\r\n    obj2[1] = 6L;\r\n    final long[] obj3 = new long[3];\r\n    obj3[0] = 5L;\r\n    obj3[1] = 6L;\r\n    obj3[2] = 7L;\r\n    assertEquals(0, new CompareToBuilder().append(obj1, obj1).toComparison());\r\n    assertEquals(0, new CompareToBuilder().append(obj1, obj2).toComparison());\r\n    assertTrue(new CompareToBuilder().append(obj1, obj3).toComparison() < 0);\r\n    assertTrue(new CompareToBuilder().append(obj3, obj1).toComparison() > 0);\r\n    obj1[1] = 7;\r\n    assertTrue(new CompareToBuilder().append(obj1, obj2).toComparison() > 0);\r\n    assertTrue(new CompareToBuilder().append(obj2, obj1).toComparison() < 0);\r\n    assertTrue(new CompareToBuilder().append(obj1, null).toComparison() > 0);\r\n    assertEquals(0, new CompareToBuilder().append((long[]) null, null).toComparison());\r\n    assertTrue(new CompareToBuilder().append(null, obj1).toComparison() < 0);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\builder\\CompareToBuilderTest.java",
  "methodName" : "testLongArrayHiddenByObject",
  "sourceCode" : "@Test\r\nvoid testLongArrayHiddenByObject() {\r\n    final long[] array1 = new long[2];\r\n    array1[0] = 5L;\r\n    array1[1] = 6L;\r\n    final long[] array2 = new long[2];\r\n    array2[0] = 5L;\r\n    array2[1] = 6L;\r\n    final long[] array3 = new long[3];\r\n    array3[0] = 5L;\r\n    array3[1] = 6L;\r\n    array3[2] = 7L;\r\n    final Object obj1 = array1;\r\n    final Object obj2 = array2;\r\n    final Object obj3 = array3;\r\n    assertEquals(0, new CompareToBuilder().append(obj1, obj1).toComparison());\r\n    assertEquals(0, new CompareToBuilder().append(obj1, obj2).toComparison());\r\n    assertTrue(new CompareToBuilder().append(obj1, obj3).toComparison() < 0);\r\n    assertTrue(new CompareToBuilder().append(obj3, obj1).toComparison() > 0);\r\n    array1[1] = 7;\r\n    assertTrue(new CompareToBuilder().append(obj1, obj2).toComparison() > 0);\r\n    assertTrue(new CompareToBuilder().append(obj2, obj1).toComparison() < 0);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\builder\\CompareToBuilderTest.java",
  "methodName" : "testMixedArray",
  "sourceCode" : "@Test\r\nvoid testMixedArray() {\r\n    final Object[] array1 = new Object[2];\r\n    final Object[] array2 = new Object[2];\r\n    final Object[] array3 = new Object[2];\r\n    for (int i = 0; i < array1.length; ++i) {\r\n        array1[i] = new long[2];\r\n        array2[i] = new long[2];\r\n        array3[i] = new long[3];\r\n        for (int j = 0; j < 2; ++j) {\r\n            ((long[]) array1[i])[j] = (i + 1) * (j + 1);\r\n            ((long[]) array2[i])[j] = (i + 1) * (j + 1);\r\n            ((long[]) array3[i])[j] = (i + 1) * (j + 1);\r\n        }\r\n    }\r\n    ((long[]) array3[0])[2] = 1;\r\n    ((long[]) array3[1])[2] = 1;\r\n    assertEquals(0, new CompareToBuilder().append(array1, array1).toComparison());\r\n    assertEquals(0, new CompareToBuilder().append(array1, array2).toComparison());\r\n    assertTrue(new CompareToBuilder().append(array1, array3).toComparison() < 0);\r\n    assertTrue(new CompareToBuilder().append(array3, array1).toComparison() > 0);\r\n    ((long[]) array1[1])[1] = 200;\r\n    assertTrue(new CompareToBuilder().append(array1, array2).toComparison() > 0);\r\n    assertTrue(new CompareToBuilder().append(array2, array1).toComparison() < 0);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\builder\\CompareToBuilderTest.java",
  "methodName" : "testMultiBooleanArray",
  "sourceCode" : "@Test\r\nvoid testMultiBooleanArray() {\r\n    final boolean[][] array1 = new boolean[2][2];\r\n    final boolean[][] array2 = new boolean[2][2];\r\n    final boolean[][] array3 = new boolean[2][3];\r\n    for (int i = 0; i < array1.length; ++i) {\r\n        for (int j = 0; j < array1[0].length; j++) {\r\n            array1[i][j] = i == 1 ^ j == 1;\r\n            array2[i][j] = i == 1 ^ j == 1;\r\n            array3[i][j] = i == 1 ^ j == 1;\r\n        }\r\n    }\r\n    array3[1][2] = false;\r\n    array3[1][2] = false;\r\n    assertEquals(0, new CompareToBuilder().append(array1, array1).toComparison());\r\n    assertEquals(0, new CompareToBuilder().append(array1, array2).toComparison());\r\n    assertTrue(new CompareToBuilder().append(array1, array3).toComparison() < 0);\r\n    assertTrue(new CompareToBuilder().append(array3, array1).toComparison() > 0);\r\n    array1[1][1] = true;\r\n    assertTrue(new CompareToBuilder().append(array1, array2).toComparison() > 0);\r\n    assertTrue(new CompareToBuilder().append(array2, array1).toComparison() < 0);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\builder\\CompareToBuilderTest.java",
  "methodName" : "testMultiByteArray",
  "sourceCode" : "@Test\r\nvoid testMultiByteArray() {\r\n    final byte[][] array1 = new byte[2][2];\r\n    final byte[][] array2 = new byte[2][2];\r\n    final byte[][] array3 = new byte[2][3];\r\n    for (byte i = 0; i < array1.length; ++i) {\r\n        for (byte j = 0; j < array1[0].length; j++) {\r\n            array1[i][j] = (byte) ((i + 1) * (j + 1));\r\n            array2[i][j] = (byte) ((i + 1) * (j + 1));\r\n            array3[i][j] = (byte) ((i + 1) * (j + 1));\r\n        }\r\n    }\r\n    array3[1][2] = 100;\r\n    array3[1][2] = 100;\r\n    assertEquals(0, new CompareToBuilder().append(array1, array1).toComparison());\r\n    assertEquals(0, new CompareToBuilder().append(array1, array2).toComparison());\r\n    assertTrue(new CompareToBuilder().append(array1, array3).toComparison() < 0);\r\n    assertTrue(new CompareToBuilder().append(array3, array1).toComparison() > 0);\r\n    array1[1][1] = 127;\r\n    assertTrue(new CompareToBuilder().append(array1, array2).toComparison() > 0);\r\n    assertTrue(new CompareToBuilder().append(array2, array1).toComparison() < 0);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\builder\\CompareToBuilderTest.java",
  "methodName" : "testMultiCharArray",
  "sourceCode" : "@Test\r\nvoid testMultiCharArray() {\r\n    final char[][] array1 = new char[2][2];\r\n    final char[][] array2 = new char[2][2];\r\n    final char[][] array3 = new char[2][3];\r\n    for (short i = 0; i < array1.length; ++i) {\r\n        for (short j = 0; j < array1[0].length; j++) {\r\n            array1[i][j] = (char) ((i + 1) * (j + 1));\r\n            array2[i][j] = (char) ((i + 1) * (j + 1));\r\n            array3[i][j] = (char) ((i + 1) * (j + 1));\r\n        }\r\n    }\r\n    array3[1][2] = 100;\r\n    array3[1][2] = 100;\r\n    assertEquals(0, new CompareToBuilder().append(array1, array1).toComparison());\r\n    assertEquals(0, new CompareToBuilder().append(array1, array2).toComparison());\r\n    assertTrue(new CompareToBuilder().append(array1, array3).toComparison() < 0);\r\n    assertTrue(new CompareToBuilder().append(array3, array1).toComparison() > 0);\r\n    array1[1][1] = 200;\r\n    assertTrue(new CompareToBuilder().append(array1, array2).toComparison() > 0);\r\n    assertTrue(new CompareToBuilder().append(array2, array1).toComparison() < 0);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\builder\\CompareToBuilderTest.java",
  "methodName" : "testMultiDoubleArray",
  "sourceCode" : "@Test\r\nvoid testMultiDoubleArray() {\r\n    final double[][] array1 = new double[2][2];\r\n    final double[][] array2 = new double[2][2];\r\n    final double[][] array3 = new double[2][3];\r\n    for (int i = 0; i < array1.length; ++i) {\r\n        for (int j = 0; j < array1[0].length; j++) {\r\n            array1[i][j] = (i + 1) * (j + 1);\r\n            array2[i][j] = (i + 1) * (j + 1);\r\n            array3[i][j] = (i + 1) * (j + 1);\r\n        }\r\n    }\r\n    array3[1][2] = 100;\r\n    array3[1][2] = 100;\r\n    assertEquals(0, new CompareToBuilder().append(array1, array1).toComparison());\r\n    assertEquals(0, new CompareToBuilder().append(array1, array2).toComparison());\r\n    assertTrue(new CompareToBuilder().append(array1, array3).toComparison() < 0);\r\n    assertTrue(new CompareToBuilder().append(array3, array1).toComparison() > 0);\r\n    array1[1][1] = 127;\r\n    assertTrue(new CompareToBuilder().append(array1, array2).toComparison() > 0);\r\n    assertTrue(new CompareToBuilder().append(array2, array1).toComparison() < 0);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\builder\\CompareToBuilderTest.java",
  "methodName" : "testMultiFloatArray",
  "sourceCode" : "@Test\r\nvoid testMultiFloatArray() {\r\n    final float[][] array1 = new float[2][2];\r\n    final float[][] array2 = new float[2][2];\r\n    final float[][] array3 = new float[2][3];\r\n    for (int i = 0; i < array1.length; ++i) {\r\n        for (int j = 0; j < array1[0].length; j++) {\r\n            array1[i][j] = (i + 1) * (j + 1);\r\n            array2[i][j] = (i + 1) * (j + 1);\r\n            array3[i][j] = (i + 1) * (j + 1);\r\n        }\r\n    }\r\n    array3[1][2] = 100;\r\n    array3[1][2] = 100;\r\n    assertEquals(0, new CompareToBuilder().append(array1, array1).toComparison());\r\n    assertEquals(0, new CompareToBuilder().append(array1, array2).toComparison());\r\n    assertTrue(new CompareToBuilder().append(array1, array3).toComparison() < 0);\r\n    assertTrue(new CompareToBuilder().append(array3, array1).toComparison() > 0);\r\n    array1[1][1] = 127;\r\n    assertTrue(new CompareToBuilder().append(array1, array2).toComparison() > 0);\r\n    assertTrue(new CompareToBuilder().append(array2, array1).toComparison() < 0);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\builder\\CompareToBuilderTest.java",
  "methodName" : "testMultiIntArray",
  "sourceCode" : "@Test\r\nvoid testMultiIntArray() {\r\n    final int[][] array1 = new int[2][2];\r\n    final int[][] array2 = new int[2][2];\r\n    final int[][] array3 = new int[2][3];\r\n    for (int i = 0; i < array1.length; ++i) {\r\n        for (int j = 0; j < array1[0].length; j++) {\r\n            array1[i][j] = (i + 1) * (j + 1);\r\n            array2[i][j] = (i + 1) * (j + 1);\r\n            array3[i][j] = (i + 1) * (j + 1);\r\n        }\r\n    }\r\n    array3[1][2] = 100;\r\n    array3[1][2] = 100;\r\n    assertEquals(0, new CompareToBuilder().append(array1, array1).toComparison());\r\n    assertEquals(0, new CompareToBuilder().append(array1, array2).toComparison());\r\n    assertTrue(new CompareToBuilder().append(array1, array3).toComparison() < 0);\r\n    assertTrue(new CompareToBuilder().append(array3, array1).toComparison() > 0);\r\n    array1[1][1] = 200;\r\n    assertTrue(new CompareToBuilder().append(array1, array2).toComparison() > 0);\r\n    assertTrue(new CompareToBuilder().append(array2, array1).toComparison() < 0);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\builder\\CompareToBuilderTest.java",
  "methodName" : "testMultiLongArray",
  "sourceCode" : "@Test\r\nvoid testMultiLongArray() {\r\n    final long[][] array1 = new long[2][2];\r\n    final long[][] array2 = new long[2][2];\r\n    final long[][] array3 = new long[2][3];\r\n    for (int i = 0; i < array1.length; ++i) {\r\n        for (int j = 0; j < array1[0].length; j++) {\r\n            array1[i][j] = (i + 1) * (j + 1);\r\n            array2[i][j] = (i + 1) * (j + 1);\r\n            array3[i][j] = (i + 1) * (j + 1);\r\n        }\r\n    }\r\n    array3[1][2] = 100;\r\n    array3[1][2] = 100;\r\n    assertEquals(0, new CompareToBuilder().append(array1, array1).toComparison());\r\n    assertEquals(0, new CompareToBuilder().append(array1, array2).toComparison());\r\n    assertTrue(new CompareToBuilder().append(array1, array3).toComparison() < 0);\r\n    assertTrue(new CompareToBuilder().append(array3, array1).toComparison() > 0);\r\n    array1[1][1] = 200;\r\n    assertTrue(new CompareToBuilder().append(array1, array2).toComparison() > 0);\r\n    assertTrue(new CompareToBuilder().append(array2, array1).toComparison() < 0);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\builder\\CompareToBuilderTest.java",
  "methodName" : "testMultiShortArray",
  "sourceCode" : "@Test\r\nvoid testMultiShortArray() {\r\n    final short[][] array1 = new short[2][2];\r\n    final short[][] array2 = new short[2][2];\r\n    final short[][] array3 = new short[2][3];\r\n    for (short i = 0; i < array1.length; ++i) {\r\n        for (short j = 0; j < array1[0].length; j++) {\r\n            array1[i][j] = (short) ((i + 1) * (j + 1));\r\n            array2[i][j] = (short) ((i + 1) * (j + 1));\r\n            array3[i][j] = (short) ((i + 1) * (j + 1));\r\n        }\r\n    }\r\n    array3[1][2] = 100;\r\n    array3[1][2] = 100;\r\n    assertEquals(0, new CompareToBuilder().append(array1, array1).toComparison());\r\n    assertEquals(0, new CompareToBuilder().append(array1, array2).toComparison());\r\n    assertTrue(new CompareToBuilder().append(array1, array3).toComparison() < 0);\r\n    assertTrue(new CompareToBuilder().append(array3, array1).toComparison() > 0);\r\n    array1[1][1] = 200;\r\n    assertTrue(new CompareToBuilder().append(array1, array2).toComparison() > 0);\r\n    assertTrue(new CompareToBuilder().append(array2, array1).toComparison() < 0);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\builder\\CompareToBuilderTest.java",
  "methodName" : "testObject",
  "sourceCode" : "@Test\r\nvoid testObject() {\r\n    final TestObject o1 = new TestObject(4);\r\n    final TestObject o2 = new TestObject(4);\r\n    assertEquals(0, new CompareToBuilder().append(o1, o1).toComparison());\r\n    assertEquals(0, new CompareToBuilder().append(o1, o2).toComparison());\r\n    o2.setA(5);\r\n    assertTrue(new CompareToBuilder().append(o1, o2).toComparison() < 0);\r\n    assertTrue(new CompareToBuilder().append(o2, o1).toComparison() > 0);\r\n    assertTrue(new CompareToBuilder().append(o1, null).toComparison() > 0);\r\n    assertEquals(0, new CompareToBuilder().append((Object) null, null).toComparison());\r\n    assertTrue(new CompareToBuilder().append(null, o1).toComparison() < 0);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\builder\\CompareToBuilderTest.java",
  "methodName" : "testObjectArray",
  "sourceCode" : "@Test\r\nvoid testObjectArray() {\r\n    final TestObject[] obj1 = new TestObject[2];\r\n    obj1[0] = new TestObject(4);\r\n    obj1[1] = new TestObject(5);\r\n    final TestObject[] obj2 = new TestObject[2];\r\n    obj2[0] = new TestObject(4);\r\n    obj2[1] = new TestObject(5);\r\n    final TestObject[] obj3 = new TestObject[3];\r\n    obj3[0] = new TestObject(4);\r\n    obj3[1] = new TestObject(5);\r\n    obj3[2] = new TestObject(6);\r\n    assertEquals(0, new CompareToBuilder().append(obj1, obj1).toComparison());\r\n    assertEquals(0, new CompareToBuilder().append(obj1, obj2).toComparison());\r\n    assertTrue(new CompareToBuilder().append(obj1, obj3).toComparison() < 0);\r\n    assertTrue(new CompareToBuilder().append(obj3, obj1).toComparison() > 0);\r\n    obj1[1] = new TestObject(7);\r\n    assertTrue(new CompareToBuilder().append(obj1, obj2).toComparison() > 0);\r\n    assertTrue(new CompareToBuilder().append(obj2, obj1).toComparison() < 0);\r\n    assertTrue(new CompareToBuilder().append(obj1, null).toComparison() > 0);\r\n    assertEquals(0, new CompareToBuilder().append((Object[]) null, null).toComparison());\r\n    assertTrue(new CompareToBuilder().append(null, obj1).toComparison() < 0);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\builder\\CompareToBuilderTest.java",
  "methodName" : "testObjectArrayHiddenByObject",
  "sourceCode" : "@Test\r\nvoid testObjectArrayHiddenByObject() {\r\n    final TestObject[] array1 = new TestObject[2];\r\n    array1[0] = new TestObject(4);\r\n    array1[1] = new TestObject(5);\r\n    final TestObject[] array2 = new TestObject[2];\r\n    array2[0] = new TestObject(4);\r\n    array2[1] = new TestObject(5);\r\n    final TestObject[] array3 = new TestObject[3];\r\n    array3[0] = new TestObject(4);\r\n    array3[1] = new TestObject(5);\r\n    array3[2] = new TestObject(6);\r\n    final Object obj1 = array1;\r\n    final Object obj2 = array2;\r\n    final Object obj3 = array3;\r\n    assertEquals(0, new CompareToBuilder().append(obj1, obj1).toComparison());\r\n    assertEquals(0, new CompareToBuilder().append(obj1, obj2).toComparison());\r\n    assertTrue(new CompareToBuilder().append(obj1, obj3).toComparison() < 0);\r\n    assertTrue(new CompareToBuilder().append(obj3, obj1).toComparison() > 0);\r\n    array1[1] = new TestObject(7);\r\n    assertTrue(new CompareToBuilder().append(obj1, obj2).toComparison() > 0);\r\n    assertTrue(new CompareToBuilder().append(obj2, obj1).toComparison() < 0);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\builder\\CompareToBuilderTest.java",
  "methodName" : "testObjectBuild",
  "sourceCode" : "@Test\r\nvoid testObjectBuild() {\r\n    final TestObject o1 = new TestObject(4);\r\n    final TestObject o2 = new TestObject(4);\r\n    assertEquals(Integer.valueOf(0), new CompareToBuilder().append(o1, o1).build());\r\n    assertEquals(Integer.valueOf(0), new CompareToBuilder().append(o1, o2).build());\r\n    o2.setA(5);\r\n    assertTrue(new CompareToBuilder().append(o1, o2).build().intValue() < 0);\r\n    assertTrue(new CompareToBuilder().append(o2, o1).build().intValue() > 0);\r\n    assertTrue(new CompareToBuilder().append(o1, null).build().intValue() > 0);\r\n    assertEquals(Integer.valueOf(0), new CompareToBuilder().append((Object) null, null).build());\r\n    assertTrue(new CompareToBuilder().append(null, o1).build().intValue() < 0);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\builder\\CompareToBuilderTest.java",
  "methodName" : "testObjectComparator",
  "sourceCode" : "@Test\r\nvoid testObjectComparator() {\r\n    final String o1 = \"Fred\";\r\n    String o2 = \"Fred\";\r\n    assertEquals(0, new CompareToBuilder().append(o1, o1, String.CASE_INSENSITIVE_ORDER).toComparison());\r\n    assertEquals(0, new CompareToBuilder().append(o1, o2, String.CASE_INSENSITIVE_ORDER).toComparison());\r\n    o2 = \"FRED\";\r\n    assertEquals(0, new CompareToBuilder().append(o1, o2, String.CASE_INSENSITIVE_ORDER).toComparison());\r\n    assertEquals(0, new CompareToBuilder().append(o2, o1, String.CASE_INSENSITIVE_ORDER).toComparison());\r\n    o2 = \"FREDA\";\r\n    assertTrue(new CompareToBuilder().append(o1, o2, String.CASE_INSENSITIVE_ORDER).toComparison() < 0);\r\n    assertTrue(new CompareToBuilder().append(o2, o1, String.CASE_INSENSITIVE_ORDER).toComparison() > 0);\r\n    assertTrue(new CompareToBuilder().append(o1, null, String.CASE_INSENSITIVE_ORDER).toComparison() > 0);\r\n    assertEquals(0, new CompareToBuilder().append(null, null, String.CASE_INSENSITIVE_ORDER).toComparison());\r\n    assertTrue(new CompareToBuilder().append(null, o1, String.CASE_INSENSITIVE_ORDER).toComparison() < 0);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\builder\\CompareToBuilderTest.java",
  "methodName" : "testObjectComparatorNull",
  "sourceCode" : "@Test\r\nvoid testObjectComparatorNull() {\r\n    final String o1 = \"Fred\";\r\n    String o2 = \"Fred\";\r\n    assertEquals(0, new CompareToBuilder().append(o1, o1, null).toComparison());\r\n    assertEquals(0, new CompareToBuilder().append(o1, o2, null).toComparison());\r\n    o2 = \"Zebra\";\r\n    assertTrue(new CompareToBuilder().append(o1, o2, null).toComparison() < 0);\r\n    assertTrue(new CompareToBuilder().append(o2, o1, null).toComparison() > 0);\r\n    assertTrue(new CompareToBuilder().append(o1, null, null).toComparison() > 0);\r\n    assertEquals(0, new CompareToBuilder().append(null, null, null).toComparison());\r\n    assertTrue(new CompareToBuilder().append(null, o1, null).toComparison() < 0);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\builder\\CompareToBuilderTest.java",
  "methodName" : "testObjectEx2",
  "sourceCode" : "@Test\r\nvoid testObjectEx2() {\r\n    final TestObject o1 = new TestObject(4);\r\n    final Object o2 = new Object();\r\n    assertThrows(ClassCastException.class, () -> new CompareToBuilder().append(o1, o2));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\builder\\CompareToBuilderTest.java",
  "methodName" : "testRaggedArray",
  "sourceCode" : "@Test\r\nvoid testRaggedArray() {\r\n    final long[][] array1 = new long[2][];\r\n    final long[][] array2 = new long[2][];\r\n    final long[][] array3 = new long[3][];\r\n    for (int i = 0; i < array1.length; ++i) {\r\n        array1[i] = new long[2];\r\n        array2[i] = new long[2];\r\n        array3[i] = new long[3];\r\n        for (int j = 0; j < array1[i].length; ++j) {\r\n            array1[i][j] = (i + 1) * (j + 1);\r\n            array2[i][j] = (i + 1) * (j + 1);\r\n            array3[i][j] = (i + 1) * (j + 1);\r\n        }\r\n    }\r\n    array3[1][2] = 100;\r\n    array3[1][2] = 100;\r\n    assertEquals(0, new CompareToBuilder().append(array1, array1).toComparison());\r\n    assertEquals(0, new CompareToBuilder().append(array1, array2).toComparison());\r\n    assertTrue(new CompareToBuilder().append(array1, array3).toComparison() < 0);\r\n    assertTrue(new CompareToBuilder().append(array3, array1).toComparison() > 0);\r\n    array1[1][1] = 200;\r\n    assertTrue(new CompareToBuilder().append(array1, array2).toComparison() > 0);\r\n    assertTrue(new CompareToBuilder().append(array2, array1).toComparison() < 0);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\builder\\CompareToBuilderTest.java",
  "methodName" : "testReflectionCompare",
  "sourceCode" : "@Test\r\nvoid testReflectionCompare() {\r\n    final TestObject o1 = new TestObject(4);\r\n    final TestObject o2 = new TestObject(4);\r\n    assertEquals(0, CompareToBuilder.reflectionCompare(o1, o1));\r\n    assertEquals(0, CompareToBuilder.reflectionCompare(o1, o2));\r\n    o2.setA(5);\r\n    assertTrue(CompareToBuilder.reflectionCompare(o1, o2) < 0);\r\n    assertTrue(CompareToBuilder.reflectionCompare(o2, o1) > 0);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\builder\\CompareToBuilderTest.java",
  "methodName" : "testReflectionCompareEx1",
  "sourceCode" : "@Test\r\nvoid testReflectionCompareEx1() {\r\n    final TestObject o1 = new TestObject(4);\r\n    assertNullPointerException(() -> CompareToBuilder.reflectionCompare(o1, null));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\builder\\CompareToBuilderTest.java",
  "methodName" : "testReflectionCompareEx2",
  "sourceCode" : "@Test\r\nvoid testReflectionCompareEx2() {\r\n    final TestObject o1 = new TestObject(4);\r\n    final Object o2 = new Object();\r\n    assertThrows(ClassCastException.class, () -> CompareToBuilder.reflectionCompare(o1, o2));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\builder\\CompareToBuilderTest.java",
  "methodName" : "testReflectionHierarchyCompare",
  "sourceCode" : "@Test\r\nvoid testReflectionHierarchyCompare() {\r\n    testReflectionHierarchyCompare(false, null);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\builder\\CompareToBuilderTest.java",
  "methodName" : "testReflectionHierarchyCompareExcludeFields",
  "sourceCode" : "@Test\r\nvoid testReflectionHierarchyCompareExcludeFields() {\r\n    final String[] excludeFields = { \"b\" };\r\n    testReflectionHierarchyCompare(true, excludeFields);\r\n    TestSubObject x;\r\n    TestSubObject y;\r\n    TestSubObject z;\r\n    x = new TestSubObject(1, 1);\r\n    y = new TestSubObject(2, 1);\r\n    z = new TestSubObject(3, 1);\r\n    assertXYZCompareOrder(x, y, z, true, excludeFields);\r\n    x = new TestSubObject(1, 3);\r\n    y = new TestSubObject(2, 2);\r\n    z = new TestSubObject(3, 1);\r\n    assertXYZCompareOrder(x, y, z, true, excludeFields);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\builder\\CompareToBuilderTest.java",
  "methodName" : "testReflectionHierarchyCompareTransients",
  "sourceCode" : "@Test\r\nvoid testReflectionHierarchyCompareTransients() {\r\n    testReflectionHierarchyCompare(true, null);\r\n    TestTransientSubObject x;\r\n    TestTransientSubObject y;\r\n    TestTransientSubObject z;\r\n    x = new TestTransientSubObject(1, 1);\r\n    y = new TestTransientSubObject(2, 2);\r\n    z = new TestTransientSubObject(3, 3);\r\n    assertXYZCompareOrder(x, y, z, true, null);\r\n    x = new TestTransientSubObject(1, 1);\r\n    y = new TestTransientSubObject(1, 2);\r\n    z = new TestTransientSubObject(1, 3);\r\n    assertXYZCompareOrder(x, y, z, true, null);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\builder\\CompareToBuilderTest.java",
  "methodName" : "testShort",
  "sourceCode" : "@Test\r\nvoid testShort() {\r\n    final short o1 = 1;\r\n    final short o2 = 2;\r\n    assertEquals(0, new CompareToBuilder().append(o1, o1).toComparison());\r\n    assertTrue(new CompareToBuilder().append(o1, o2).toComparison() < 0);\r\n    assertTrue(new CompareToBuilder().append(o2, o1).toComparison() > 0);\r\n    assertTrue(new CompareToBuilder().append(o1, Short.MAX_VALUE).toComparison() < 0);\r\n    assertTrue(new CompareToBuilder().append(Short.MAX_VALUE, o1).toComparison() > 0);\r\n    assertTrue(new CompareToBuilder().append(o1, Short.MIN_VALUE).toComparison() > 0);\r\n    assertTrue(new CompareToBuilder().append(Short.MIN_VALUE, o1).toComparison() < 0);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\builder\\CompareToBuilderTest.java",
  "methodName" : "testShortArray",
  "sourceCode" : "@Test\r\nvoid testShortArray() {\r\n    final short[] obj1 = new short[2];\r\n    obj1[0] = 5;\r\n    obj1[1] = 6;\r\n    final short[] obj2 = new short[2];\r\n    obj2[0] = 5;\r\n    obj2[1] = 6;\r\n    final short[] obj3 = new short[3];\r\n    obj3[0] = 5;\r\n    obj3[1] = 6;\r\n    obj3[2] = 7;\r\n    assertEquals(0, new CompareToBuilder().append(obj1, obj1).toComparison());\r\n    assertEquals(0, new CompareToBuilder().append(obj1, obj2).toComparison());\r\n    assertTrue(new CompareToBuilder().append(obj1, obj3).toComparison() < 0);\r\n    assertTrue(new CompareToBuilder().append(obj3, obj1).toComparison() > 0);\r\n    obj1[1] = 7;\r\n    assertTrue(new CompareToBuilder().append(obj1, obj2).toComparison() > 0);\r\n    assertTrue(new CompareToBuilder().append(obj2, obj1).toComparison() < 0);\r\n    assertTrue(new CompareToBuilder().append(obj1, null).toComparison() > 0);\r\n    assertEquals(0, new CompareToBuilder().append((short[]) null, null).toComparison());\r\n    assertTrue(new CompareToBuilder().append(null, obj1).toComparison() < 0);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\builder\\CompareToBuilderTest.java",
  "methodName" : "testShortArrayHiddenByObject",
  "sourceCode" : "@Test\r\nvoid testShortArrayHiddenByObject() {\r\n    final short[] array1 = new short[2];\r\n    array1[0] = 5;\r\n    array1[1] = 6;\r\n    final short[] array2 = new short[2];\r\n    array2[0] = 5;\r\n    array2[1] = 6;\r\n    final short[] array3 = new short[3];\r\n    array3[0] = 5;\r\n    array3[1] = 6;\r\n    array3[2] = 7;\r\n    final Object obj1 = array1;\r\n    final Object obj2 = array2;\r\n    final Object obj3 = array3;\r\n    assertEquals(0, new CompareToBuilder().append(obj1, obj1).toComparison());\r\n    assertEquals(0, new CompareToBuilder().append(obj1, obj2).toComparison());\r\n    assertTrue(new CompareToBuilder().append(obj1, obj3).toComparison() < 0);\r\n    assertTrue(new CompareToBuilder().append(obj3, obj1).toComparison() > 0);\r\n    array1[1] = 7;\r\n    assertTrue(new CompareToBuilder().append(obj1, obj2).toComparison() > 0);\r\n    assertTrue(new CompareToBuilder().append(obj2, obj1).toComparison() < 0);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\builder\\ConversionTest.java",
  "methodName" : "testHexToByte",
  "sourceCode" : "@Test\r\nvoid testHexToByte() {\r\n    assertEquals((byte) 0, Conversion.hexToByte(\"00\", 0, (byte) 0, 0, 0));\r\n    assertEquals((byte) 0, Conversion.hexToByte(\"00\", 0, (byte) 0, 0, 2));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\builder\\ConversionTest.java",
  "methodName" : "testHexToByte_IllegalArgument",
  "sourceCode" : "@Test\r\nvoid testHexToByte_IllegalArgument() {\r\n    assertIllegalArgumentException(() -> Conversion.hexToByte(\"A0\", 0, (byte) 0, 4, 2));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\builder\\ConversionTest.java",
  "methodName" : "testHexToByte_nullString",
  "sourceCode" : "@Test\r\nvoid testHexToByte_nullString() {\r\n    assertNullPointerException(() -> Conversion.hexToByte(null, 0, (byte) 0, 0, 2));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\builder\\DefaultToStringStyleTest.java",
  "methodName" : "testAppendSuper",
  "sourceCode" : "@Test\r\nvoid testAppendSuper() {\r\n    assertEquals(baseStr + \"[]\", new ToStringBuilder(base).appendSuper(\"Integer@8888[]\").toString());\r\n    assertEquals(baseStr + \"[<null>]\", new ToStringBuilder(base).appendSuper(\"Integer@8888[<null>]\").toString());\r\n    assertEquals(baseStr + \"[a=hello]\", new ToStringBuilder(base).appendSuper(\"Integer@8888[]\").append(\"a\", \"hello\").toString());\r\n    assertEquals(baseStr + \"[<null>,a=hello]\", new ToStringBuilder(base).appendSuper(\"Integer@8888[<null>]\").append(\"a\", \"hello\").toString());\r\n    assertEquals(baseStr + \"[a=hello]\", new ToStringBuilder(base).appendSuper(null).append(\"a\", \"hello\").toString());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\builder\\DefaultToStringStyleTest.java",
  "methodName" : "testArray",
  "sourceCode" : "@Test\r\nvoid testArray() {\r\n    final Integer i3 = Integer.valueOf(3);\r\n    final Integer i4 = Integer.valueOf(4);\r\n    assertEquals(baseStr + \"[a=<size=0>]\", new ToStringBuilder(base).append(\"a\", (Object) new Integer[0], false).toString());\r\n    assertEquals(baseStr + \"[a={}]\", new ToStringBuilder(base).append(\"a\", (Object) new Integer[0], true).toString());\r\n    assertEquals(baseStr + \"[a=<size=1>]\", new ToStringBuilder(base).append(\"a\", (Object) new Integer[] { i3 }, false).toString());\r\n    assertEquals(baseStr + \"[a={3}]\", new ToStringBuilder(base).append(\"a\", (Object) new Integer[] { i3 }, true).toString());\r\n    assertEquals(baseStr + \"[a=<size=2>]\", new ToStringBuilder(base).append(\"a\", (Object) new Integer[] { i3, i4 }, false).toString());\r\n    assertEquals(baseStr + \"[a={3,4}]\", new ToStringBuilder(base).append(\"a\", (Object) new Integer[] { i3, i4 }, true).toString());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\builder\\DefaultToStringStyleTest.java",
  "methodName" : "testBlank",
  "sourceCode" : "@Test\r\nvoid testBlank() {\r\n    assertEquals(baseStr + \"[]\", new ToStringBuilder(base).toString());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\builder\\DefaultToStringStyleTest.java",
  "methodName" : "testCollection",
  "sourceCode" : "@Test\r\nvoid testCollection() {\r\n    final Integer i3 = Integer.valueOf(3);\r\n    final Integer i4 = Integer.valueOf(4);\r\n    assertEquals(baseStr + \"[a=<size=0>]\", new ToStringBuilder(base).append(\"a\", Collections.emptyList(), false).toString());\r\n    assertEquals(baseStr + \"[a=[]]\", new ToStringBuilder(base).append(\"a\", Collections.emptyList(), true).toString());\r\n    assertEquals(baseStr + \"[a=<size=1>]\", new ToStringBuilder(base).append(\"a\", Collections.singletonList(i3), false).toString());\r\n    assertEquals(baseStr + \"[a=[3]]\", new ToStringBuilder(base).append(\"a\", Collections.singletonList(i3), true).toString());\r\n    assertEquals(baseStr + \"[a=<size=2>]\", new ToStringBuilder(base).append(\"a\", Arrays.asList(i3, i4), false).toString());\r\n    assertEquals(baseStr + \"[a=[3, 4]]\", new ToStringBuilder(base).append(\"a\", Arrays.asList(i3, i4), true).toString());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\builder\\DefaultToStringStyleTest.java",
  "methodName" : "testLong",
  "sourceCode" : "@Test\r\nvoid testLong() {\r\n    assertEquals(baseStr + \"[3]\", new ToStringBuilder(base).append(3L).toString());\r\n    assertEquals(baseStr + \"[a=3]\", new ToStringBuilder(base).append(\"a\", 3L).toString());\r\n    assertEquals(baseStr + \"[a=3,b=4]\", new ToStringBuilder(base).append(\"a\", 3L).append(\"b\", 4L).toString());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\builder\\DefaultToStringStyleTest.java",
  "methodName" : "testLongArray",
  "sourceCode" : "@Test\r\nvoid testLongArray() {\r\n    long[] array = { 1, 2, -3, 4 };\r\n    assertEquals(baseStr + \"[{1,2,-3,4}]\", new ToStringBuilder(base).append(array).toString());\r\n    assertEquals(baseStr + \"[{1,2,-3,4}]\", new ToStringBuilder(base).append((Object) array).toString());\r\n    array = null;\r\n    assertEquals(baseStr + \"[<null>]\", new ToStringBuilder(base).append(array).toString());\r\n    assertEquals(baseStr + \"[<null>]\", new ToStringBuilder(base).append((Object) array).toString());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\builder\\DefaultToStringStyleTest.java",
  "methodName" : "testLongArrayArray",
  "sourceCode" : "@Test\r\nvoid testLongArrayArray() {\r\n    long[][] array = { { 1, 2 }, null, { 5 } };\r\n    assertEquals(baseStr + \"[{{1,2},<null>,{5}}]\", new ToStringBuilder(base).append(array).toString());\r\n    assertEquals(baseStr + \"[{{1,2},<null>,{5}}]\", new ToStringBuilder(base).append((Object) array).toString());\r\n    array = null;\r\n    assertEquals(baseStr + \"[<null>]\", new ToStringBuilder(base).append(array).toString());\r\n    assertEquals(baseStr + \"[<null>]\", new ToStringBuilder(base).append((Object) array).toString());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\builder\\DefaultToStringStyleTest.java",
  "methodName" : "testMap",
  "sourceCode" : "@Test\r\nvoid testMap() {\r\n    assertEquals(baseStr + \"[a=<size=0>]\", new ToStringBuilder(base).append(\"a\", Collections.emptyMap(), false).toString());\r\n    assertEquals(baseStr + \"[a={}]\", new ToStringBuilder(base).append(\"a\", Collections.emptyMap(), true).toString());\r\n    assertEquals(baseStr + \"[a=<size=1>]\", new ToStringBuilder(base).append(\"a\", Collections.singletonMap(\"k\", \"v\"), false).toString());\r\n    assertEquals(baseStr + \"[a={k=v}]\", new ToStringBuilder(base).append(\"a\", Collections.singletonMap(\"k\", \"v\"), true).toString());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\builder\\DefaultToStringStyleTest.java",
  "methodName" : "testObject",
  "sourceCode" : "@Test\r\nvoid testObject() {\r\n    final Integer i3 = Integer.valueOf(3);\r\n    final Integer i4 = Integer.valueOf(4);\r\n    assertEquals(baseStr + \"[<null>]\", new ToStringBuilder(base).append((Object) null).toString());\r\n    assertEquals(baseStr + \"[3]\", new ToStringBuilder(base).append(i3).toString());\r\n    assertEquals(baseStr + \"[a=<null>]\", new ToStringBuilder(base).append(\"a\", (Object) null).toString());\r\n    assertEquals(baseStr + \"[a=3]\", new ToStringBuilder(base).append(\"a\", i3).toString());\r\n    assertEquals(baseStr + \"[a=3,b=4]\", new ToStringBuilder(base).append(\"a\", i3).append(\"b\", i4).toString());\r\n    assertEquals(baseStr + \"[a=<Integer>]\", new ToStringBuilder(base).append(\"a\", i3, false).toString());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\builder\\DefaultToStringStyleTest.java",
  "methodName" : "testObjectArray",
  "sourceCode" : "@Test\r\nvoid testObjectArray() {\r\n    Object[] array = { null, base, new int[] { 3, 6 } };\r\n    assertEquals(baseStr + \"[{<null>,5,{3,6}}]\", new ToStringBuilder(base).append(array).toString());\r\n    assertEquals(baseStr + \"[{<null>,5,{3,6}}]\", new ToStringBuilder(base).append((Object) array).toString());\r\n    array = null;\r\n    assertEquals(baseStr + \"[<null>]\", new ToStringBuilder(base).append(array).toString());\r\n    assertEquals(baseStr + \"[<null>]\", new ToStringBuilder(base).append((Object) array).toString());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\builder\\DefaultToStringStyleTest.java",
  "methodName" : "testPerson",
  "sourceCode" : "@Test\r\nvoid testPerson() {\r\n    final Person p = new Person();\r\n    p.name = \"John Doe\";\r\n    p.age = 33;\r\n    p.smoker = false;\r\n    final String baseStr = p.getClass().getName() + \"@\" + Integer.toHexString(System.identityHashCode(p));\r\n    assertEquals(baseStr + \"[name=John Doe,age=33,smoker=false]\", new ToStringBuilder(p).append(\"name\", p.name).append(\"age\", p.age).append(\"smoker\", p.smoker).toString());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\builder\\DiffBuilderTest.java",
  "methodName" : "testBoolean",
  "sourceCode" : "@Test\r\nvoid testBoolean() {\r\n    final TypeTestClass class1 = new TypeTestClass();\r\n    final TypeTestClass class2 = new TypeTestClass();\r\n    class2.booleanField = false;\r\n    final DiffResult<TypeTestClass> list = class1.diff(class2);\r\n    assertEquals(1, list.getNumberOfDiffs());\r\n    final Diff<?> diff = list.getDiffs().get(0);\r\n    assertEquals(Boolean.class, diff.getType(), () -> diff.getType().getClass().toString());\r\n    assertEquals(Boolean.TRUE, diff.getLeft());\r\n    assertEquals(Boolean.FALSE, diff.getRight());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\builder\\DiffBuilderTest.java",
  "methodName" : "testBooleanArray",
  "sourceCode" : "@Test\r\nvoid testBooleanArray() {\r\n    final TypeTestClass class1 = new TypeTestClass();\r\n    final TypeTestClass class2 = new TypeTestClass();\r\n    class2.booleanArrayField = new boolean[] { false, false };\r\n    final DiffResult<TypeTestClass> list = class1.diff(class2);\r\n    assertEquals(1, list.getNumberOfDiffs());\r\n    final Diff<?> diff = list.getDiffs().get(0);\r\n    assertArrayEquals(ArrayUtils.toObject(class1.booleanArrayField), (Object[]) diff.getLeft());\r\n    assertArrayEquals(ArrayUtils.toObject(class2.booleanArrayField), (Object[]) diff.getRight());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\builder\\DiffBuilderTest.java",
  "methodName" : "testByte",
  "sourceCode" : "@Test\r\nvoid testByte() {\r\n    final TypeTestClass class1 = new TypeTestClass();\r\n    final TypeTestClass class2 = new TypeTestClass();\r\n    class2.byteField = 0x01;\r\n    final DiffResult<TypeTestClass> list = class1.diff(class2);\r\n    assertEquals(1, list.getNumberOfDiffs());\r\n    final Diff<?> diff = list.getDiffs().get(0);\r\n    assertEquals(Byte.class, diff.getType(), () -> diff.getType().getClass().toString());\r\n    assertEquals(Byte.valueOf(class1.byteField), diff.getLeft());\r\n    assertEquals(Byte.valueOf(class2.byteField), diff.getRight());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\builder\\DiffBuilderTest.java",
  "methodName" : "testByteArray",
  "sourceCode" : "@Test\r\nvoid testByteArray() {\r\n    final TypeTestClass class1 = new TypeTestClass();\r\n    final TypeTestClass class2 = new TypeTestClass();\r\n    class2.byteArrayField = new byte[] { 0x01, 0x02 };\r\n    final DiffResult<TypeTestClass> list = class1.diff(class2);\r\n    assertEquals(1, list.getNumberOfDiffs());\r\n    final Diff<?> diff = list.getDiffs().get(0);\r\n    assertArrayEquals(ArrayUtils.toObject(class1.byteArrayField), (Object[]) diff.getLeft());\r\n    assertArrayEquals(ArrayUtils.toObject(class2.byteArrayField), (Object[]) diff.getRight());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\builder\\DiffBuilderTest.java",
  "methodName" : "testByteArrayEqualAsObject1",
  "sourceCode" : "@Test\r\nvoid testByteArrayEqualAsObject1() {\r\n    // @formatter:off\r\n    final DiffResult<String> list = DiffBuilder.<String>builder().setLeft(\"String1\").setRight(\"String2\").setStyle(SHORT_STYLE).build().append(\"foo\", new boolean[] { false }, new boolean[] { false }).append(\"foo\", new byte[] { 0x01 }, new byte[] { 0x01 }).append(\"foo\", new char[] { 'a' }, new char[] { 'a' }).append(\"foo\", new double[] { 1.0 }, new double[] { 1.0 }).append(\"foo\", new float[] { 1.0F }, new float[] { 1.0F }).append(\"foo\", new int[] { 1 }, new int[] { 1 }).append(\"foo\", new long[] { 1L }, new long[] { 1L }).append(\"foo\", new short[] { 1 }, new short[] { 1 }).append(\"foo\", new Object[] { 1, \"two\" }, new Object[] { 1, \"two\" }).build();\r\n    // @formatter:on\r\n    assertEquals(0, list.getNumberOfDiffs());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\builder\\DiffBuilderTest.java",
  "methodName" : "testByteArrayEqualAsObjectDeprecated",
  "sourceCode" : "@Test\r\nvoid testByteArrayEqualAsObjectDeprecated() {\r\n    // @formatter:off\r\n    final DiffResult<String> list = new DiffBuilder<>(\"String1\", \"String2\", SHORT_STYLE).append(\"foo\", new boolean[] { false }, new boolean[] { false }).append(\"foo\", new byte[] { 0x01 }, new byte[] { 0x01 }).append(\"foo\", new char[] { 'a' }, new char[] { 'a' }).append(\"foo\", new double[] { 1.0 }, new double[] { 1.0 }).append(\"foo\", new float[] { 1.0F }, new float[] { 1.0F }).append(\"foo\", new int[] { 1 }, new int[] { 1 }).append(\"foo\", new long[] { 1L }, new long[] { 1L }).append(\"foo\", new short[] { 1 }, new short[] { 1 }).append(\"foo\", new Object[] { 1, \"two\" }, new Object[] { 1, \"two\" }).build();\r\n    // @formatter:on\r\n    assertEquals(0, list.getNumberOfDiffs());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\builder\\DiffBuilderTest.java",
  "methodName" : "testChar",
  "sourceCode" : "@Test\r\nvoid testChar() {\r\n    final TypeTestClass class1 = new TypeTestClass();\r\n    final TypeTestClass class2 = new TypeTestClass();\r\n    class2.charField = 'z';\r\n    final DiffResult<TypeTestClass> list = class1.diff(class2);\r\n    assertEquals(1, list.getNumberOfDiffs());\r\n    final Diff<?> diff = list.getDiffs().get(0);\r\n    assertEquals(Character.valueOf(class1.charField), diff.getLeft());\r\n    assertEquals(Character.valueOf(class2.charField), diff.getRight());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\builder\\DiffBuilderTest.java",
  "methodName" : "testCharArray",
  "sourceCode" : "@Test\r\nvoid testCharArray() {\r\n    final TypeTestClass class1 = new TypeTestClass();\r\n    final TypeTestClass class2 = new TypeTestClass();\r\n    class2.charArrayField = new char[] { 'f', 'o', 'o' };\r\n    final DiffResult<TypeTestClass> list = class1.diff(class2);\r\n    assertEquals(1, list.getNumberOfDiffs());\r\n    final Diff<?> diff = list.getDiffs().get(0);\r\n    assertArrayEquals(ArrayUtils.toObject(class1.charArrayField), (Object[]) diff.getLeft());\r\n    assertArrayEquals(ArrayUtils.toObject(class2.charArrayField), (Object[]) diff.getRight());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\builder\\DiffBuilderTest.java",
  "methodName" : "testDiffResult",
  "sourceCode" : "@Test\r\nvoid testDiffResult() {\r\n    final TypeTestClass class1 = new TypeTestClass();\r\n    final TypeTestClass class2 = new TypeTestClass();\r\n    class2.intField = 2;\r\n    final DiffResult<TypeTestClass> list = new DiffBuilder<>(class1, class2, SHORT_STYLE).append(\"prop1\", class1.diff(class2)).build();\r\n    assertEquals(1, list.getNumberOfDiffs());\r\n    assertEquals(\"prop1.int\", list.getDiffs().get(0).getFieldName());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\builder\\DiffBuilderTest.java",
  "methodName" : "testDiffResultEquals",
  "sourceCode" : "@Test\r\nvoid testDiffResultEquals() {\r\n    final TypeTestClass class1 = new TypeTestClass();\r\n    class1.intField = 2;\r\n    final DiffResult<TypeTestClass> list = new DiffBuilder<>(class1, class1, SHORT_STYLE).append(\"prop1\", class1.diff(class1)).build();\r\n    assertEquals(0, list.getNumberOfDiffs());\r\n    assertTrue(list.getDiffs().isEmpty());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\builder\\DiffBuilderTest.java",
  "methodName" : "testDouble",
  "sourceCode" : "@Test\r\nvoid testDouble() {\r\n    final TypeTestClass class1 = new TypeTestClass();\r\n    final TypeTestClass class2 = new TypeTestClass();\r\n    class2.doubleField = 99.99;\r\n    final DiffResult<TypeTestClass> list = class1.diff(class2);\r\n    assertEquals(1, list.getNumberOfDiffs());\r\n    final Diff<?> diff = list.getDiffs().get(0);\r\n    assertEquals(Double.valueOf(class1.doubleField), diff.getLeft());\r\n    assertEquals(Double.valueOf(class2.doubleField), diff.getRight());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\builder\\DiffBuilderTest.java",
  "methodName" : "testDoubleArray",
  "sourceCode" : "@Test\r\nvoid testDoubleArray() {\r\n    final TypeTestClass class1 = new TypeTestClass();\r\n    final TypeTestClass class2 = new TypeTestClass();\r\n    class2.doubleArrayField = new double[] { 3.0, 2.9, 2.8 };\r\n    final DiffResult<TypeTestClass> list = class1.diff(class2);\r\n    assertEquals(1, list.getNumberOfDiffs());\r\n    final Diff<?> diff = list.getDiffs().get(0);\r\n    assertArrayEquals(ArrayUtils.toObject(class1.doubleArrayField), (Object[]) diff.getLeft());\r\n    assertArrayEquals(ArrayUtils.toObject(class2.doubleArrayField), (Object[]) diff.getRight());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\builder\\DiffBuilderTest.java",
  "methodName" : "testFloat",
  "sourceCode" : "@Test\r\nvoid testFloat() {\r\n    final TypeTestClass class1 = new TypeTestClass();\r\n    final TypeTestClass class2 = new TypeTestClass();\r\n    class2.floatField = 99.99F;\r\n    final DiffResult<TypeTestClass> list = class1.diff(class2);\r\n    assertEquals(1, list.getNumberOfDiffs());\r\n    final Diff<?> diff = list.getDiffs().get(0);\r\n    assertEquals(Float.valueOf(class1.floatField), diff.getLeft());\r\n    assertEquals(Float.valueOf(class2.floatField), diff.getRight());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\builder\\DiffBuilderTest.java",
  "methodName" : "testFloatArray",
  "sourceCode" : "@Test\r\nvoid testFloatArray() {\r\n    final TypeTestClass class1 = new TypeTestClass();\r\n    final TypeTestClass class2 = new TypeTestClass();\r\n    class2.floatArrayField = new float[] { 3.0F, 2.9F, 2.8F };\r\n    final DiffResult<TypeTestClass> list = class1.diff(class2);\r\n    assertEquals(1, list.getNumberOfDiffs());\r\n    final Diff<?> diff = list.getDiffs().get(0);\r\n    assertArrayEquals(ArrayUtils.toObject(class1.floatArrayField), (Object[]) diff.getLeft());\r\n    assertArrayEquals(ArrayUtils.toObject(class2.floatArrayField), (Object[]) diff.getRight());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\builder\\DiffBuilderTest.java",
  "methodName" : "testInt",
  "sourceCode" : "@Test\r\nvoid testInt() {\r\n    final TypeTestClass class1 = new TypeTestClass();\r\n    final TypeTestClass class2 = new TypeTestClass();\r\n    class2.intField = 42;\r\n    final DiffResult<TypeTestClass> list = class1.diff(class2);\r\n    assertEquals(1, list.getNumberOfDiffs());\r\n    final Diff<?> diff = list.getDiffs().get(0);\r\n    assertEquals(Integer.valueOf(class1.intField), diff.getLeft());\r\n    assertEquals(Integer.valueOf(class2.intField), diff.getRight());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\builder\\DiffBuilderTest.java",
  "methodName" : "testIntArray",
  "sourceCode" : "@Test\r\nvoid testIntArray() {\r\n    final TypeTestClass class1 = new TypeTestClass();\r\n    final TypeTestClass class2 = new TypeTestClass();\r\n    class2.intArrayField = new int[] { 3, 2, 1 };\r\n    final DiffResult<TypeTestClass> list = class1.diff(class2);\r\n    assertEquals(1, list.getNumberOfDiffs());\r\n    final Diff<?> diff = list.getDiffs().get(0);\r\n    assertArrayEquals(ArrayUtils.toObject(class1.intArrayField), (Object[]) diff.getLeft());\r\n    assertArrayEquals(ArrayUtils.toObject(class2.intArrayField), (Object[]) diff.getRight());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\builder\\DiffBuilderTest.java",
  "methodName" : "testLong",
  "sourceCode" : "@Test\r\nvoid testLong() {\r\n    final TypeTestClass class1 = new TypeTestClass();\r\n    final TypeTestClass class2 = new TypeTestClass();\r\n    class2.longField = 42L;\r\n    final DiffResult<TypeTestClass> list = class1.diff(class2);\r\n    assertEquals(1, list.getNumberOfDiffs());\r\n    final Diff<?> diff = list.getDiffs().get(0);\r\n    assertEquals(Long.valueOf(class1.longField), diff.getLeft());\r\n    assertEquals(Long.valueOf(class2.longField), diff.getRight());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\builder\\DiffBuilderTest.java",
  "methodName" : "testLongArray",
  "sourceCode" : "@Test\r\nvoid testLongArray() {\r\n    final TypeTestClass class1 = new TypeTestClass();\r\n    final TypeTestClass class2 = new TypeTestClass();\r\n    class2.longArrayField = new long[] { 3L, 2L, 1L };\r\n    final DiffResult<TypeTestClass> list = class1.diff(class2);\r\n    assertEquals(1, list.getNumberOfDiffs());\r\n    final Diff<?> diff = list.getDiffs().get(0);\r\n    assertArrayEquals(ArrayUtils.toObject(class1.longArrayField), (Object[]) diff.getLeft());\r\n    assertArrayEquals(ArrayUtils.toObject(class2.longArrayField), (Object[]) diff.getRight());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\builder\\DiffBuilderTest.java",
  "methodName" : "testNestedDiffableNo",
  "sourceCode" : "@Test\r\nvoid testNestedDiffableNo() {\r\n    final TypeTestClass class1 = new TypeTestClass();\r\n    final TypeTestClass class2 = new TypeTestClass();\r\n    final DiffResult<TypeTestClass> list = class1.diff(class2);\r\n    assertEquals(0, list.getNumberOfDiffs());\r\n    final List<Diff<?>> diff = list.getDiffs();\r\n    assertTrue(diff.isEmpty());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\builder\\DiffBuilderTest.java",
  "methodName" : "testNestedDiffableYesNestedNot",
  "sourceCode" : "@Test\r\nvoid testNestedDiffableYesNestedNot() {\r\n    final TypeTestClass class1 = new TypeTestClass();\r\n    final TypeTestClass class2 = new TypeTestClass();\r\n    class2.intField = 9;\r\n    final DiffResult<TypeTestClass> list = class1.diff(class2);\r\n    assertEquals(1, list.getNumberOfDiffs());\r\n    final Diff<?> diff = list.getDiffs().get(0);\r\n    assertEquals(Integer.class, diff.getType());\r\n    assertEquals(1, diff.getLeft());\r\n    assertEquals(9, diff.getRight());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\builder\\DiffBuilderTest.java",
  "methodName" : "testNestedDiffableYesNestedOnly",
  "sourceCode" : "@Test\r\nvoid testNestedDiffableYesNestedOnly() {\r\n    final TypeTestClass class1 = new TypeTestClass();\r\n    final TypeTestClass class2 = new TypeTestClass();\r\n    class2.nestedDiffableField.booleanField = false;\r\n    final DiffResult<TypeTestClass> list = class1.diff(class2);\r\n    assertEquals(1, list.getNumberOfDiffs());\r\n    final Diff<?> diff = list.getDiffs().get(0);\r\n    assertEquals(Object.class, diff.getType());\r\n    assertEquals(Boolean.TRUE, diff.getLeft());\r\n    assertEquals(Boolean.FALSE, diff.getRight());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\builder\\DiffBuilderTest.java",
  "methodName" : "testNestedDiffableYesNestedYes",
  "sourceCode" : "@Test\r\nvoid testNestedDiffableYesNestedYes() {\r\n    final TypeTestClass class1 = new TypeTestClass();\r\n    final TypeTestClass class2 = new TypeTestClass();\r\n    class2.intField = 9;\r\n    class2.nestedDiffableField.booleanField = false;\r\n    final DiffResult<TypeTestClass> list = class1.diff(class2);\r\n    assertEquals(2, list.getNumberOfDiffs());\r\n    final Diff<?> diff0 = list.getDiffs().get(0);\r\n    assertEquals(Integer.class, diff0.getType());\r\n    assertEquals(1, diff0.getLeft());\r\n    assertEquals(9, diff0.getRight());\r\n    final Diff<?> diff1 = list.getDiffs().get(1);\r\n    assertEquals(Object.class, diff1.getType());\r\n    assertEquals(Boolean.TRUE, diff1.getLeft());\r\n    assertEquals(Boolean.FALSE, diff1.getRight());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\builder\\DiffBuilderTest.java",
  "methodName" : "testNullLhs",
  "sourceCode" : "@Test\r\nvoid testNullLhs() {\r\n    assertNullPointerException(() -> new DiffBuilder<>(null, this, ToStringStyle.DEFAULT_STYLE));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\builder\\DiffBuilderTest.java",
  "methodName" : "testNullLhs_4args",
  "sourceCode" : "@Test\r\nvoid testNullLhs_4args() {\r\n    assertNullPointerException(() -> new DiffBuilder<>(null, this, ToStringStyle.DEFAULT_STYLE, true));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\builder\\DiffBuilderTest.java",
  "methodName" : "testNullRhs",
  "sourceCode" : "@Test\r\nvoid testNullRhs() {\r\n    assertNullPointerException(() -> new DiffBuilder<>(this, null, ToStringStyle.DEFAULT_STYLE));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\builder\\DiffBuilderTest.java",
  "methodName" : "testNullRhs_4args",
  "sourceCode" : "@Test\r\nvoid testNullRhs_4args() {\r\n    assertNullPointerException(() -> new DiffBuilder<>(this, null, ToStringStyle.DEFAULT_STYLE, true));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\builder\\DiffBuilderTest.java",
  "methodName" : "testObject",
  "sourceCode" : "@Test\r\nvoid testObject() {\r\n    final TypeTestClass class1 = new TypeTestClass();\r\n    final TypeTestClass class2 = new TypeTestClass();\r\n    class2.objectField = \"Some string\";\r\n    final DiffResult<TypeTestClass> list = class1.diff(class2);\r\n    assertEquals(1, list.getNumberOfDiffs());\r\n    final Diff<?> diff = list.getDiffs().get(0);\r\n    assertEquals(class1.objectField, diff.getLeft());\r\n    assertEquals(class2.objectField, diff.getRight());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\builder\\DiffBuilderTest.java",
  "methodName" : "testObjectArray",
  "sourceCode" : "@Test\r\nvoid testObjectArray() {\r\n    final TypeTestClass class1 = new TypeTestClass();\r\n    final TypeTestClass class2 = new TypeTestClass();\r\n    class2.objectArrayField = new Object[] { \"string\", 1, 2 };\r\n    final DiffResult<TypeTestClass> list = class1.diff(class2);\r\n    assertEquals(1, list.getNumberOfDiffs());\r\n    final Diff<?> diff = list.getDiffs().get(0);\r\n    assertArrayEquals(class1.objectArrayField, (Object[]) diff.getLeft());\r\n    assertArrayEquals(class2.objectArrayField, (Object[]) diff.getRight());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\builder\\DiffBuilderTest.java",
  "methodName" : "testObjectArrayEqual",
  "sourceCode" : "@Test\r\nvoid testObjectArrayEqual() {\r\n    final TypeTestClass class1 = new TypeTestClass();\r\n    final TypeTestClass class2 = new TypeTestClass();\r\n    class1.objectArrayField = new Object[] { \"string\", 1, 2 };\r\n    class2.objectArrayField = new Object[] { \"string\", 1, 2 };\r\n    final DiffResult<TypeTestClass> list = class1.diff(class2);\r\n    assertEquals(0, list.getNumberOfDiffs());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\builder\\DiffBuilderTest.java",
  "methodName" : "testObjectsNotSameButEqual",
  "sourceCode" : "/**\r\n * Test that \"left\" and \"right\" are the same instance but are equal.\r\n */\r\n@Test\r\nvoid testObjectsNotSameButEqual() {\r\n    final TypeTestClass left = new TypeTestClass();\r\n    left.objectField = Integer.valueOf(1000);\r\n    final TypeTestClass right = new TypeTestClass();\r\n    right.objectField = Integer.valueOf(1000);\r\n    assertNotSame(left.objectField, right.objectField);\r\n    assertEquals(left.objectField, right.objectField);\r\n    final DiffResult<TypeTestClass> list = left.diff(right);\r\n    assertEquals(0, list.getNumberOfDiffs());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\builder\\DiffBuilderTest.java",
  "methodName" : "testObjectsNotSameNorEqual",
  "sourceCode" : "/**\r\n * Test that \"left\" and \"right\" are not the same instance and are not equal.\r\n */\r\n@Test\r\nvoid testObjectsNotSameNorEqual() {\r\n    final TypeTestClass left = new TypeTestClass();\r\n    left.objectField = 4;\r\n    final TypeTestClass right = new TypeTestClass();\r\n    right.objectField = 100;\r\n    assertNotSame(left.objectField, right.objectField);\r\n    assertNotEquals(left.objectField, right.objectField);\r\n    final DiffResult<TypeTestClass> list = left.diff(right);\r\n    assertEquals(1, list.getNumberOfDiffs());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\builder\\DiffBuilderTest.java",
  "methodName" : "testObjectsSameAndEqual",
  "sourceCode" : "/**\r\n * Test that \"left\" and \"right\" are the same instance and are equal.\r\n */\r\n@Test\r\nvoid testObjectsSameAndEqual() {\r\n    final Integer sameObject = 1;\r\n    final TypeTestClass left = new TypeTestClass();\r\n    left.objectField = sameObject;\r\n    final TypeTestClass right = new TypeTestClass();\r\n    right.objectField = sameObject;\r\n    assertSame(left.objectField, right.objectField);\r\n    assertEquals(left.objectField, right.objectField);\r\n    final DiffResult<TypeTestClass> list = left.diff(right);\r\n    assertEquals(0, list.getNumberOfDiffs());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\builder\\DiffBuilderTest.java",
  "methodName" : "testSameObjectIgnoresAppends",
  "sourceCode" : "@Test\r\nvoid testSameObjectIgnoresAppends() {\r\n    final TypeTestClass testClass = new TypeTestClass();\r\n    final DiffResult<TypeTestClass> list = new DiffBuilder<>(testClass, testClass, SHORT_STYLE).append(\"ignored\", false, true).build();\r\n    assertEquals(0, list.getNumberOfDiffs());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\builder\\DiffBuilderTest.java",
  "methodName" : "testShort",
  "sourceCode" : "@Test\r\nvoid testShort() {\r\n    final TypeTestClass class1 = new TypeTestClass();\r\n    final TypeTestClass class2 = new TypeTestClass();\r\n    class2.shortField = 42;\r\n    final DiffResult<TypeTestClass> list = class1.diff(class2);\r\n    assertEquals(1, list.getNumberOfDiffs());\r\n    final Diff<?> diff = list.getDiffs().get(0);\r\n    assertEquals(Short.valueOf(class1.shortField), diff.getLeft());\r\n    assertEquals(Short.valueOf(class2.shortField), diff.getRight());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\builder\\DiffBuilderTest.java",
  "methodName" : "testShortArray",
  "sourceCode" : "@Test\r\nvoid testShortArray() {\r\n    final TypeTestClass class1 = new TypeTestClass();\r\n    final TypeTestClass class2 = new TypeTestClass();\r\n    class2.shortArrayField = new short[] { 3, 2, 1 };\r\n    final DiffResult<TypeTestClass> list = class1.diff(class2);\r\n    assertEquals(1, list.getNumberOfDiffs());\r\n    final Diff<?> diff = list.getDiffs().get(0);\r\n    assertArrayEquals(ArrayUtils.toObject(class1.shortArrayField), (Object[]) diff.getLeft());\r\n    assertArrayEquals(ArrayUtils.toObject(class2.shortArrayField), (Object[]) diff.getRight());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\builder\\DiffBuilderTest.java",
  "methodName" : "testSimilarObjectIgnoresAppends",
  "sourceCode" : "@Test\r\nvoid testSimilarObjectIgnoresAppends() {\r\n    final TypeTestClass testClass1 = new TypeTestClass();\r\n    final TypeTestClass testClass2 = new TypeTestClass();\r\n    final DiffResult<TypeTestClass> list = new DiffBuilder<>(testClass1, testClass2, SHORT_STYLE).append(\"ignored\", false, true).build();\r\n    assertEquals(0, list.getNumberOfDiffs());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\builder\\DiffBuilderTest.java",
  "methodName" : "testStylePassedToDiffResult",
  "sourceCode" : "@Test\r\nvoid testStylePassedToDiffResult() {\r\n    final TypeTestClass class1 = new TypeTestClass();\r\n    DiffResult<TypeTestClass> list = class1.diff(class1);\r\n    assertEquals(SHORT_STYLE, list.getToStringStyle());\r\n    class1.style = ToStringStyle.MULTI_LINE_STYLE;\r\n    list = class1.diff(class1);\r\n    assertEquals(ToStringStyle.MULTI_LINE_STYLE, list.getToStringStyle());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\builder\\DiffBuilderTest.java",
  "methodName" : "testTriviallyEqualTestDisabled",
  "sourceCode" : "@Test\r\nvoid testTriviallyEqualTestDisabled() {\r\n    // Constructor's arguments are not trivially equal, but not testing for that.\r\n    final DiffBuilder<Integer> explicitTestAndNotEqual1 = new DiffBuilder<>(1, 2, null, false);\r\n    explicitTestAndNotEqual1.append(\"letter\", \"X\", \"Y\");\r\n    assertEquals(1, explicitTestAndNotEqual1.build().getNumberOfDiffs());\r\n    // Constructor's arguments are trivially equal, but not testing for that.\r\n    final DiffBuilder<Integer> explicitTestAndNotEqual2 = new DiffBuilder<>(1, 1, null, false);\r\n    // This append(f, l, r) will not abort early.\r\n    explicitTestAndNotEqual2.append(\"letter\", \"X\", \"Y\");\r\n    assertEquals(1, explicitTestAndNotEqual2.build().getNumberOfDiffs());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\builder\\DiffBuilderTest.java",
  "methodName" : "testTriviallyEqualTestEnabled",
  "sourceCode" : "@Test\r\nvoid testTriviallyEqualTestEnabled() {\r\n    // The option to test if trivially equal is enabled by default.\r\n    final DiffBuilder<Integer> implicitTestAndEqual = new DiffBuilder<>(1, 1, null);\r\n    // This append(f, l, r) will abort without creating a Diff for letter.\r\n    implicitTestAndEqual.append(\"letter\", \"X\", \"Y\");\r\n    assertEquals(0, implicitTestAndEqual.build().getNumberOfDiffs());\r\n    final DiffBuilder<Integer> implicitTestAndNotEqual = new DiffBuilder<>(1, 2, null);\r\n    // This append(f, l, r) will not abort early\r\n    // because the constructor's arguments were not trivially equal.\r\n    implicitTestAndNotEqual.append(\"letter\", \"X\", \"Y\");\r\n    assertEquals(1, implicitTestAndNotEqual.build().getNumberOfDiffs());\r\n    // This is explicitly enabling the trivially equal test.\r\n    final DiffBuilder<Integer> explicitTestAndEqual = new DiffBuilder<>(1, 1, null, true);\r\n    explicitTestAndEqual.append(\"letter\", \"X\", \"Y\");\r\n    assertEquals(0, explicitTestAndEqual.build().getNumberOfDiffs());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\builder\\DiffResultTest.java",
  "methodName" : "testDefaultStyle",
  "sourceCode" : "@Test\r\nvoid testDefaultStyle() {\r\n    final DiffResult<SimpleClass> diffResult = new DiffResult<>(SIMPLE_TRUE, SIMPLE_FALSE, SIMPLE_TRUE.diff(SIMPLE_FALSE).getDiffs(), ToStringStyle.DEFAULT_STYLE, DiffBuilder.TO_STRING_FORMAT);\r\n    assertEquals(ToStringStyle.DEFAULT_STYLE, diffResult.getToStringStyle());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\builder\\DiffResultTest.java",
  "methodName" : "testIterator",
  "sourceCode" : "@Test\r\nvoid testIterator() {\r\n    final SimpleClass lhs = new SimpleClass(true);\r\n    final SimpleClass rhs = new SimpleClass(false);\r\n    final List<Diff<?>> diffs = lhs.diff(rhs).getDiffs();\r\n    final Iterator<Diff<?>> expectedIterator = diffs.iterator();\r\n    final DiffResult<SimpleClass> list = new DiffResult<>(lhs, rhs, diffs, SHORT_STYLE, DiffBuilder.TO_STRING_FORMAT);\r\n    final Iterator<Diff<?>> iterator = list.iterator();\r\n    while (iterator.hasNext()) {\r\n        assertTrue(expectedIterator.hasNext());\r\n        assertEquals(expectedIterator.next(), iterator.next());\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\builder\\DiffResultTest.java",
  "methodName" : "testLeftAndRightGetters",
  "sourceCode" : "@Test\r\nvoid testLeftAndRightGetters() {\r\n    final SimpleClass left = new SimpleClass(true);\r\n    final SimpleClass right = new SimpleClass(false);\r\n    final List<Diff<?>> diffs = left.diff(right).getDiffs();\r\n    final DiffResult<SimpleClass> diffResult = new DiffResult<>(left, right, diffs, SHORT_STYLE, DiffBuilder.TO_STRING_FORMAT);\r\n    assertEquals(left, diffResult.getLeft());\r\n    assertEquals(right, diffResult.getRight());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\builder\\DiffResultTest.java",
  "methodName" : "testListIsNonModifiable",
  "sourceCode" : "@Test\r\nvoid testListIsNonModifiable() {\r\n    final SimpleClass lhs = new SimpleClass(true);\r\n    final SimpleClass rhs = new SimpleClass(false);\r\n    final List<Diff<?>> diffs = lhs.diff(rhs).getDiffs();\r\n    final DiffResult<SimpleClass> result = new DiffResult<>(lhs, rhs, diffs, SHORT_STYLE, DiffBuilder.TO_STRING_FORMAT);\r\n    assertEquals(diffs, result.getDiffs());\r\n    assertEquals(1, result.getNumberOfDiffs());\r\n    assertThrows(UnsupportedOperationException.class, () -> result.getDiffs().remove(0));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\builder\\DiffResultTest.java",
  "methodName" : "testNoDifferencesString",
  "sourceCode" : "@Test\r\nvoid testNoDifferencesString() {\r\n    final DiffResult<SimpleClass> diffResult = DiffBuilder.<SimpleClass>builder().setLeft(SIMPLE_TRUE).setRight(SIMPLE_TRUE).setStyle(SHORT_STYLE).build().build();\r\n    assertEquals(DiffResult.OBJECTS_SAME_STRING, diffResult.toString());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\builder\\DiffResultTest.java",
  "methodName" : "testNullLhs",
  "sourceCode" : "@Test\r\nvoid testNullLhs() {\r\n    assertNullPointerException(() -> new DiffResult<>(null, SIMPLE_FALSE, SIMPLE_TRUE.diff(SIMPLE_FALSE).getDiffs(), SHORT_STYLE, DiffBuilder.TO_STRING_FORMAT));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\builder\\DiffResultTest.java",
  "methodName" : "testNullList",
  "sourceCode" : "@Test\r\nvoid testNullList() {\r\n    assertNullPointerException(() -> new DiffResult<>(SIMPLE_TRUE, SIMPLE_FALSE, null, SHORT_STYLE, null));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\builder\\DiffResultTest.java",
  "methodName" : "testNullRhs",
  "sourceCode" : "@Test\r\nvoid testNullRhs() {\r\n    assertNullPointerException(() -> new DiffResult<>(SIMPLE_TRUE, null, SIMPLE_TRUE.diff(SIMPLE_FALSE).getDiffs(), SHORT_STYLE, DiffBuilder.TO_STRING_FORMAT));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\builder\\DiffResultTest.java",
  "methodName" : "testToStringFormat",
  "sourceCode" : "@Test\r\nvoid testToStringFormat() {\r\n    // @formatter:off\r\n    final DiffResult<EmptyClass> result = DiffBuilder.<EmptyClass>builder().setLeft(new EmptyClass()).setRight(new EmptyClass()).setStyle(ToStringStyle.SHORT_PREFIX_STYLE).setToStringFormat(\"%s <> %s\").build().append(\"test\", false, true).build();\r\n    // @formatter:on\r\n    assertEquals(\"DiffResultTest.EmptyClass[test=false] <> DiffResultTest.EmptyClass[test=true]\", result.toString());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\builder\\DiffResultTest.java",
  "methodName" : "testToStringOutput",
  "sourceCode" : "@Test\r\nvoid testToStringOutput() {\r\n    // @formatter:off\r\n    final DiffResult<EmptyClass> result = DiffBuilder.<EmptyClass>builder().setLeft(new EmptyClass()).setRight(new EmptyClass()).setStyle(ToStringStyle.SHORT_PREFIX_STYLE).build().append(\"test\", false, true).build();\r\n    // @formatter:on\r\n    assertEquals(\"DiffResultTest.EmptyClass[test=false] differs from DiffResultTest.EmptyClass[test=true]\", result.toString());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\builder\\DiffResultTest.java",
  "methodName" : "testToStringSpecifyStyleOutput",
  "sourceCode" : "@Test\r\nvoid testToStringSpecifyStyleOutput() {\r\n    final DiffResult<SimpleClass> result = SIMPLE_FALSE.diff(SIMPLE_TRUE);\r\n    assertEquals(result.getToStringStyle(), SHORT_STYLE);\r\n    // @formatter:off\r\n    final String lhsString = new ToStringBuilder(SIMPLE_FALSE, ToStringStyle.MULTI_LINE_STYLE).append(SimpleClass.getFieldName(), SIMPLE_FALSE.booleanField).build();\r\n    final String rhsString = new ToStringBuilder(SIMPLE_TRUE, ToStringStyle.MULTI_LINE_STYLE).append(SimpleClass.getFieldName(), SIMPLE_TRUE.booleanField).build();\r\n    // @formatter:on\r\n    assertEquals(String.format(\"%s differs from %s\", lhsString, rhsString), result.toString(ToStringStyle.MULTI_LINE_STYLE));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\builder\\DiffTest.java",
  "methodName" : "testCannotModify",
  "sourceCode" : "@Test\r\nvoid testCannotModify() {\r\n    assertThrows(UnsupportedOperationException.class, () -> booleanDiff.setValue(Boolean.FALSE));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\builder\\DiffTest.java",
  "methodName" : "testGetFieldName",
  "sourceCode" : "@Test\r\nvoid testGetFieldName() {\r\n    assertEquals(FIELD_NAME, booleanDiff.getFieldName());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\builder\\DiffTest.java",
  "methodName" : "testGetType",
  "sourceCode" : "@Test\r\nvoid testGetType() {\r\n    assertEquals(Boolean.class, booleanDiff.getType());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\builder\\DiffTest.java",
  "methodName" : "testToString",
  "sourceCode" : "@Test\r\nvoid testToString() {\r\n    assertEquals(String.format(\"[%s: %s, %s]\", FIELD_NAME, booleanDiff.getLeft(), booleanDiff.getRight()), booleanDiff.toString());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\builder\\EqualsBuilderReflectJreImplementationTest.java",
  "methodName" : "testRecursive",
  "sourceCode" : "@Test\r\nvoid testRecursive() {\r\n    final MyClass o1 = new MyClass(new MyCharSequence(\"1\"), new MyTemporal(\"2\"), new MyTemporalAccessor(\"3\"), new MyTemporalAmount(\"4\"));\r\n    // This gives you different instances of MyTemporalAccessor for 1 (and 2) that should be equals by reflection.\r\n    final MyClass o1Bis = new MyClass(new MyCharSequence(\"1\"), new MyTemporal(\"2\"), new MyTemporalAccessor(\"3\"), new MyTemporalAmount(\"4\"));\r\n    final MyClass o2 = new MyClass(new MyCharSequence(\"5\"), new MyTemporal(\"6\"), new MyTemporalAccessor(\"7\"), new MyTemporalAmount(\"8\"));\r\n    final MyClass o2Bis = new MyClass(new MyCharSequence(\"5\"), new MyTemporal(\"6\"), new MyTemporalAccessor(\"7\"), new MyTemporalAmount(\"8\"));\r\n    // MyTemporal\r\n    assertTrue(new EqualsBuilder().setTestRecursive(true).append(new MyTemporal(\"1\"), new MyTemporal(\"1\")).isEquals());\r\n    // MyTemporalAccessor\r\n    assertTrue(new EqualsBuilder().setTestRecursive(true).append(new MyTemporalAccessor(\"1\"), new MyTemporalAccessor(\"1\")).isEquals());\r\n    // MyCharSequence\r\n    assertTrue(new EqualsBuilder().setTestRecursive(true).append(new MyCharSequence(\"1\"), new MyCharSequence(\"1\")).isEquals());\r\n    // MyClass\r\n    assertTrue(new EqualsBuilder().setTestRecursive(true).append(o1, o1).isEquals(), o1::toString);\r\n    assertTrue(new EqualsBuilder().setTestRecursive(true).append(o1, o1Bis).isEquals(), o1::toString);\r\n    assertTrue(new EqualsBuilder().setTestRecursive(true).append(o2, o2).isEquals(), o2::toString);\r\n    assertTrue(new EqualsBuilder().setTestRecursive(true).append(o2, o2Bis).isEquals(), o2::toString);\r\n    assertFalse(new EqualsBuilder().setTestRecursive(true).append(o1, o2).isEquals());\r\n    assertFalse(new EqualsBuilder().setTestRecursive(true).append(o2, o1).isEquals());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\builder\\EqualsBuilderReflectJreImplementationTest.java",
  "methodName" : "testRetention",
  "sourceCode" : "@Test\r\nvoid testRetention() throws Exception {\r\n    // The following should not retain memory.\r\n    for (int i = 0; i < Integer.getInteger(\"testRetention\", 10_000); i++) {\r\n        final Class<?> clazz = TestClassBuilder.defineSimpleClass(getClass().getPackage().getName(), i);\r\n        assertTrue(new EqualsBuilder().setTestRecursive(true).append(clazz.newInstance(), clazz.newInstance()).isEquals());\r\n    }\r\n    // some retention is checked in super's after().\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\builder\\EqualsBuilderTest.java",
  "methodName" : "testAccessors",
  "sourceCode" : "@Test\r\nvoid testAccessors() {\r\n    final EqualsBuilder equalsBuilder = new EqualsBuilder();\r\n    assertTrue(equalsBuilder.isEquals());\r\n    equalsBuilder.setEquals(true);\r\n    assertTrue(equalsBuilder.isEquals());\r\n    equalsBuilder.setEquals(false);\r\n    assertFalse(equalsBuilder.isEquals());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\builder\\EqualsBuilderTest.java",
  "methodName" : "testBigDecimal",
  "sourceCode" : "@Test\r\nvoid testBigDecimal() {\r\n    testBigDecimalNotEq(BigDecimal.valueOf(1), BigDecimal.valueOf(2));\r\n    testBigDecimalNotEq(BigDecimal.valueOf(1), BigDecimal.valueOf(1.0));\r\n    testBigDecimalNotEq(BigDecimal.valueOf(1), BigDecimal.valueOf(1.00));\r\n    // 2.0 is not equal to 2.00, see BigDecimal#equals()\r\n    testBigDecimalNotEq(BigDecimal.valueOf(20, 1), BigDecimal.valueOf(200, 2));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\builder\\EqualsBuilderTest.java",
  "methodName" : "testBigInteger",
  "sourceCode" : "@Test\r\nvoid testBigInteger() {\r\n    final BigInteger o1 = BigInteger.valueOf(1);\r\n    final BigInteger o2 = BigInteger.valueOf(2);\r\n    assertTrue(new EqualsBuilder().append(o1, o1).isEquals());\r\n    assertFalse(new EqualsBuilder().append(o1, o2).isEquals());\r\n    assertFalse(new EqualsBuilder().append(o1, o2).append(o1, o1).isEquals());\r\n    assertFalse(new EqualsBuilder().append(o1, Double.NaN).isEquals());\r\n    assertTrue(new EqualsBuilder().append(Double.NaN, Double.NaN).isEquals());\r\n    assertTrue(new EqualsBuilder().append(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY).isEquals());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\builder\\EqualsBuilderTest.java",
  "methodName" : "testBoolean",
  "sourceCode" : "@Test\r\nvoid testBoolean() {\r\n    final boolean o1 = true;\r\n    final boolean o2 = false;\r\n    assertTrue(new EqualsBuilder().append(o1, o1).isEquals());\r\n    assertFalse(new EqualsBuilder().append(o1, o2).isEquals());\r\n    assertFalse(new EqualsBuilder().append(o1, o2).append(o1, o1).isEquals());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\builder\\EqualsBuilderTest.java",
  "methodName" : "testBooleanArray",
  "sourceCode" : "@Test\r\nvoid testBooleanArray() {\r\n    final boolean[] obj1 = new boolean[2];\r\n    obj1[0] = true;\r\n    obj1[1] = false;\r\n    final boolean[] obj2 = new boolean[2];\r\n    obj2[0] = true;\r\n    obj2[1] = false;\r\n    assertTrue(new EqualsBuilder().append(obj1, obj1).isEquals());\r\n    assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals());\r\n    obj1[1] = true;\r\n    assertFalse(new EqualsBuilder().append(obj1, obj2).isEquals());\r\n    assertFalse(new EqualsBuilder().append(obj1, obj2).append(obj1, obj1).isEquals());\r\n    final boolean[] nullArr1 = null;\r\n    final boolean[] nullArr2 = null;\r\n    assertFalse(new EqualsBuilder().append(obj1, nullArr2).isEquals());\r\n    assertFalse(new EqualsBuilder().append(nullArr1, obj2).isEquals());\r\n    assertTrue(new EqualsBuilder().append(nullArr1, nullArr2).isEquals());\r\n    assertTrue(new EqualsBuilder().append(nullArr1, nullArr1).isEquals());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\builder\\EqualsBuilderTest.java",
  "methodName" : "testBooleanArrayHiddenByObject",
  "sourceCode" : "@Test\r\nvoid testBooleanArrayHiddenByObject() {\r\n    final boolean[] array1 = new boolean[2];\r\n    array1[0] = true;\r\n    array1[1] = false;\r\n    final boolean[] array2 = new boolean[2];\r\n    array2[0] = true;\r\n    array2[1] = false;\r\n    final Object obj1 = array1;\r\n    final Object obj2 = array2;\r\n    assertTrue(new EqualsBuilder().append(obj1, obj1).isEquals());\r\n    assertTrue(new EqualsBuilder().append(obj1, array1).isEquals());\r\n    assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals());\r\n    assertTrue(new EqualsBuilder().append(obj1, array2).isEquals());\r\n    array1[1] = true;\r\n    assertFalse(new EqualsBuilder().append(obj1, obj2).isEquals());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\builder\\EqualsBuilderTest.java",
  "methodName" : "testByte",
  "sourceCode" : "@Test\r\nvoid testByte() {\r\n    final byte o1 = 1;\r\n    final byte o2 = 2;\r\n    assertTrue(new EqualsBuilder().append(o1, o1).isEquals());\r\n    assertFalse(new EqualsBuilder().append(o1, o2).isEquals());\r\n    assertFalse(new EqualsBuilder().append(o1, o2).append(o1, o1).isEquals());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\builder\\EqualsBuilderTest.java",
  "methodName" : "testByteArray",
  "sourceCode" : "@Test\r\nvoid testByteArray() {\r\n    final byte[] obj1 = new byte[2];\r\n    obj1[0] = 5;\r\n    obj1[1] = 6;\r\n    final byte[] obj2 = new byte[2];\r\n    obj2[0] = 5;\r\n    obj2[1] = 6;\r\n    assertTrue(new EqualsBuilder().append(obj1, obj1).isEquals());\r\n    assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals());\r\n    obj1[1] = 7;\r\n    assertFalse(new EqualsBuilder().append(obj1, obj2).isEquals());\r\n    assertFalse(new EqualsBuilder().append(obj1, obj2).append(obj1, obj1).isEquals());\r\n    final byte[] nullArr1 = null;\r\n    final byte[] nullArr2 = null;\r\n    assertFalse(new EqualsBuilder().append(obj1, nullArr2).isEquals());\r\n    assertFalse(new EqualsBuilder().append(nullArr1, obj2).isEquals());\r\n    assertTrue(new EqualsBuilder().append(nullArr1, nullArr2).isEquals());\r\n    assertTrue(new EqualsBuilder().append(nullArr1, nullArr1).isEquals());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\builder\\EqualsBuilderTest.java",
  "methodName" : "testByteArrayHiddenByObject",
  "sourceCode" : "@Test\r\nvoid testByteArrayHiddenByObject() {\r\n    final byte[] array1 = new byte[2];\r\n    array1[0] = 5;\r\n    array1[1] = 6;\r\n    final byte[] array2 = new byte[2];\r\n    array2[0] = 5;\r\n    array2[1] = 6;\r\n    final Object obj1 = array1;\r\n    final Object obj2 = array2;\r\n    assertTrue(new EqualsBuilder().append(obj1, obj1).isEquals());\r\n    assertTrue(new EqualsBuilder().append(obj1, array1).isEquals());\r\n    assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals());\r\n    assertTrue(new EqualsBuilder().append(obj1, array2).isEquals());\r\n    array1[1] = 7;\r\n    assertFalse(new EqualsBuilder().append(obj1, obj2).isEquals());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\builder\\EqualsBuilderTest.java",
  "methodName" : "testChar",
  "sourceCode" : "@Test\r\nvoid testChar() {\r\n    final char o1 = 1;\r\n    final char o2 = 2;\r\n    assertTrue(new EqualsBuilder().append(o1, o1).isEquals());\r\n    assertFalse(new EqualsBuilder().append(o1, o2).isEquals());\r\n    assertFalse(new EqualsBuilder().append(o1, o2).append(o1, o1).isEquals());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\builder\\EqualsBuilderTest.java",
  "methodName" : "testCharArray",
  "sourceCode" : "@Test\r\nvoid testCharArray() {\r\n    final char[] obj1 = new char[2];\r\n    obj1[0] = 5;\r\n    obj1[1] = 6;\r\n    final char[] obj2 = new char[2];\r\n    obj2[0] = 5;\r\n    obj2[1] = 6;\r\n    assertTrue(new EqualsBuilder().append(obj1, obj1).isEquals());\r\n    assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals());\r\n    obj1[1] = 7;\r\n    assertFalse(new EqualsBuilder().append(obj1, obj2).isEquals());\r\n    assertFalse(new EqualsBuilder().append(obj1, obj2).append(obj1, obj1).isEquals());\r\n    final char[] nullArr1 = null;\r\n    final char[] nullArr2 = null;\r\n    assertFalse(new EqualsBuilder().append(obj1, nullArr2).isEquals());\r\n    assertFalse(new EqualsBuilder().append(nullArr1, obj2).isEquals());\r\n    assertTrue(new EqualsBuilder().append(nullArr1, nullArr2).isEquals());\r\n    assertTrue(new EqualsBuilder().append(nullArr1, nullArr1).isEquals());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\builder\\EqualsBuilderTest.java",
  "methodName" : "testCharArrayHiddenByObject",
  "sourceCode" : "@Test\r\nvoid testCharArrayHiddenByObject() {\r\n    final char[] array1 = new char[2];\r\n    array1[0] = 5;\r\n    array1[1] = 6;\r\n    final char[] array2 = new char[2];\r\n    array2[0] = 5;\r\n    array2[1] = 6;\r\n    final Object obj1 = array1;\r\n    final Object obj2 = array2;\r\n    assertTrue(new EqualsBuilder().append(obj1, obj1).isEquals());\r\n    assertTrue(new EqualsBuilder().append(obj1, array1).isEquals());\r\n    assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals());\r\n    assertTrue(new EqualsBuilder().append(obj1, array2).isEquals());\r\n    array1[1] = 7;\r\n    assertFalse(new EqualsBuilder().append(obj1, obj2).isEquals());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\builder\\EqualsBuilderTest.java",
  "methodName" : "testCyclicalObjectReferences",
  "sourceCode" : "/**\r\n * Test cyclical object references which cause a StackOverflowException if\r\n * not handled properly. s. LANG-606\r\n */\r\n@Test\r\nvoid testCyclicalObjectReferences() {\r\n    final TestObjectReference refX1 = new TestObjectReference(1);\r\n    final TestObjectReference x1 = new TestObjectReference(1);\r\n    x1.setObjectReference(refX1);\r\n    refX1.setObjectReference(x1);\r\n    final TestObjectReference refX2 = new TestObjectReference(1);\r\n    final TestObjectReference x2 = new TestObjectReference(1);\r\n    x2.setObjectReference(refX2);\r\n    refX2.setObjectReference(x2);\r\n    final TestObjectReference refX3 = new TestObjectReference(2);\r\n    final TestObjectReference x3 = new TestObjectReference(2);\r\n    x3.setObjectReference(refX3);\r\n    refX3.setObjectReference(x3);\r\n    assertEquals(x1, x2);\r\n    assertNotEquals(x1, x3);\r\n    assertNotEquals(x2, x3);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\builder\\EqualsBuilderTest.java",
  "methodName" : "testDouble",
  "sourceCode" : "@Test\r\nvoid testDouble() {\r\n    final double o1 = 1;\r\n    final double o2 = 2;\r\n    assertTrue(new EqualsBuilder().append(o1, o1).isEquals());\r\n    assertFalse(new EqualsBuilder().append(o1, o2).isEquals());\r\n    assertFalse(new EqualsBuilder().append(o1, o2).append(o1, o1).isEquals());\r\n    assertFalse(new EqualsBuilder().append(o1, Double.NaN).isEquals());\r\n    assertTrue(new EqualsBuilder().append(Double.NaN, Double.NaN).isEquals());\r\n    assertTrue(new EqualsBuilder().append(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY).isEquals());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\builder\\EqualsBuilderTest.java",
  "methodName" : "testDoubleArray",
  "sourceCode" : "@Test\r\nvoid testDoubleArray() {\r\n    final double[] obj1 = new double[2];\r\n    obj1[0] = 5;\r\n    obj1[1] = 6;\r\n    final double[] obj2 = new double[2];\r\n    obj2[0] = 5;\r\n    obj2[1] = 6;\r\n    assertTrue(new EqualsBuilder().append(obj1, obj1).isEquals());\r\n    assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals());\r\n    obj1[1] = 7;\r\n    assertFalse(new EqualsBuilder().append(obj1, obj2).isEquals());\r\n    assertFalse(new EqualsBuilder().append(obj1, obj2).append(obj1, obj1).isEquals());\r\n    final double[] nullArr1 = null;\r\n    final double[] nullArr2 = null;\r\n    assertFalse(new EqualsBuilder().append(obj1, nullArr2).isEquals());\r\n    assertFalse(new EqualsBuilder().append(nullArr1, obj2).isEquals());\r\n    assertTrue(new EqualsBuilder().append(nullArr1, nullArr2).isEquals());\r\n    assertTrue(new EqualsBuilder().append(nullArr1, nullArr1).isEquals());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\builder\\EqualsBuilderTest.java",
  "methodName" : "testDoubleArrayHiddenByObject",
  "sourceCode" : "@Test\r\nvoid testDoubleArrayHiddenByObject() {\r\n    final double[] array1 = new double[2];\r\n    array1[0] = 5;\r\n    array1[1] = 6;\r\n    final double[] array2 = new double[2];\r\n    array2[0] = 5;\r\n    array2[1] = 6;\r\n    final Object obj1 = array1;\r\n    final Object obj2 = array2;\r\n    assertTrue(new EqualsBuilder().append(obj1, obj1).isEquals());\r\n    assertTrue(new EqualsBuilder().append(obj1, array1).isEquals());\r\n    assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals());\r\n    assertTrue(new EqualsBuilder().append(obj1, array2).isEquals());\r\n    array1[1] = 7;\r\n    assertFalse(new EqualsBuilder().append(obj1, obj2).isEquals());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\builder\\EqualsBuilderTest.java",
  "methodName" : "testFloat",
  "sourceCode" : "@Test\r\nvoid testFloat() {\r\n    final float o1 = 1;\r\n    final float o2 = 2;\r\n    assertTrue(new EqualsBuilder().append(o1, o1).isEquals());\r\n    assertFalse(new EqualsBuilder().append(o1, o2).isEquals());\r\n    assertFalse(new EqualsBuilder().append(o1, o2).append(o1, o1).isEquals());\r\n    assertFalse(new EqualsBuilder().append(o1, Float.NaN).isEquals());\r\n    assertTrue(new EqualsBuilder().append(Float.NaN, Float.NaN).isEquals());\r\n    assertTrue(new EqualsBuilder().append(Float.POSITIVE_INFINITY, Float.POSITIVE_INFINITY).isEquals());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\builder\\EqualsBuilderTest.java",
  "methodName" : "testFloatArray",
  "sourceCode" : "@Test\r\nvoid testFloatArray() {\r\n    final float[] obj1 = new float[2];\r\n    obj1[0] = 5;\r\n    obj1[1] = 6;\r\n    final float[] obj2 = new float[2];\r\n    obj2[0] = 5;\r\n    obj2[1] = 6;\r\n    assertTrue(new EqualsBuilder().append(obj1, obj1).isEquals());\r\n    assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals());\r\n    obj1[1] = 7;\r\n    assertFalse(new EqualsBuilder().append(obj1, obj2).isEquals());\r\n    assertFalse(new EqualsBuilder().append(obj1, obj2).append(obj1, obj1).isEquals());\r\n    final float[] nullArr1 = null;\r\n    final float[] nullArr2 = null;\r\n    assertFalse(new EqualsBuilder().append(obj1, nullArr2).isEquals());\r\n    assertFalse(new EqualsBuilder().append(nullArr1, obj2).isEquals());\r\n    assertTrue(new EqualsBuilder().append(nullArr1, nullArr2).isEquals());\r\n    assertTrue(new EqualsBuilder().append(nullArr1, nullArr1).isEquals());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\builder\\EqualsBuilderTest.java",
  "methodName" : "testFloatArrayHiddenByObject",
  "sourceCode" : "@Test\r\nvoid testFloatArrayHiddenByObject() {\r\n    final float[] array1 = new float[2];\r\n    array1[0] = 5;\r\n    array1[1] = 6;\r\n    final float[] array2 = new float[2];\r\n    array2[0] = 5;\r\n    array2[1] = 6;\r\n    final Object obj1 = array1;\r\n    final Object obj2 = array2;\r\n    assertTrue(new EqualsBuilder().append(obj1, obj1).isEquals());\r\n    assertTrue(new EqualsBuilder().append(obj1, array1).isEquals());\r\n    assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals());\r\n    assertTrue(new EqualsBuilder().append(obj1, array2).isEquals());\r\n    array1[1] = 7;\r\n    assertFalse(new EqualsBuilder().append(obj1, obj2).isEquals());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\builder\\EqualsBuilderTest.java",
  "methodName" : "testInt",
  "sourceCode" : "@Test\r\nvoid testInt() {\r\n    final int o1 = 1;\r\n    final int o2 = 2;\r\n    assertTrue(new EqualsBuilder().append(o1, o1).isEquals());\r\n    assertFalse(new EqualsBuilder().append(o1, o2).isEquals());\r\n    assertFalse(new EqualsBuilder().append(o1, o2).append(o1, o1).isEquals());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\builder\\EqualsBuilderTest.java",
  "methodName" : "testIntArray",
  "sourceCode" : "@Test\r\nvoid testIntArray() {\r\n    final int[] obj1 = new int[2];\r\n    obj1[0] = 5;\r\n    obj1[1] = 6;\r\n    final int[] obj2 = new int[2];\r\n    obj2[0] = 5;\r\n    obj2[1] = 6;\r\n    assertTrue(new EqualsBuilder().append(obj1, obj1).isEquals());\r\n    assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals());\r\n    obj1[1] = 7;\r\n    assertFalse(new EqualsBuilder().append(obj1, obj2).isEquals());\r\n    assertFalse(new EqualsBuilder().append(obj1, obj2).append(obj1, obj1).isEquals());\r\n    final int[] nullArr1 = null;\r\n    final int[] nullArr2 = null;\r\n    assertFalse(new EqualsBuilder().append(obj1, nullArr2).isEquals());\r\n    assertFalse(new EqualsBuilder().append(nullArr1, obj2).isEquals());\r\n    assertTrue(new EqualsBuilder().append(nullArr1, nullArr2).isEquals());\r\n    assertTrue(new EqualsBuilder().append(nullArr1, nullArr1).isEquals());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\builder\\EqualsBuilderTest.java",
  "methodName" : "testIntArrayHiddenByObject",
  "sourceCode" : "@Test\r\nvoid testIntArrayHiddenByObject() {\r\n    final int[] array1 = new int[2];\r\n    array1[0] = 5;\r\n    array1[1] = 6;\r\n    final int[] array2 = new int[2];\r\n    array2[0] = 5;\r\n    array2[1] = 6;\r\n    final Object obj1 = array1;\r\n    final Object obj2 = array2;\r\n    assertTrue(new EqualsBuilder().append(obj1, obj1).isEquals());\r\n    assertTrue(new EqualsBuilder().append(obj1, array1).isEquals());\r\n    assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals());\r\n    assertTrue(new EqualsBuilder().append(obj1, array2).isEquals());\r\n    array1[1] = 7;\r\n    assertFalse(new EqualsBuilder().append(obj1, obj2).isEquals());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\builder\\EqualsBuilderTest.java",
  "methodName" : "testIsRegistered",
  "sourceCode" : "@Test\r\nvoid testIsRegistered() throws Exception {\r\n    final Object firstObject = new Object();\r\n    final Object secondObject = new Object();\r\n    try {\r\n        final Method registerMethod = MethodUtils.getMatchingMethod(EqualsBuilder.class, \"register\", Object.class, Object.class);\r\n        registerMethod.setAccessible(true);\r\n        registerMethod.invoke(null, firstObject, secondObject);\r\n        assertTrue(EqualsBuilder.isRegistered(firstObject, secondObject));\r\n        // LANG-1349\r\n        assertTrue(EqualsBuilder.isRegistered(secondObject, firstObject));\r\n    } finally {\r\n        final Method unregisterMethod = MethodUtils.getMatchingMethod(EqualsBuilder.class, \"unregister\", Object.class, Object.class);\r\n        unregisterMethod.setAccessible(true);\r\n        unregisterMethod.invoke(null, firstObject, secondObject);\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\builder\\EqualsBuilderTest.java",
  "methodName" : "testLong",
  "sourceCode" : "@Test\r\nvoid testLong() {\r\n    final long o1 = 1L;\r\n    final long o2 = 2L;\r\n    assertTrue(new EqualsBuilder().append(o1, o1).isEquals());\r\n    assertFalse(new EqualsBuilder().append(o1, o2).isEquals());\r\n    assertFalse(new EqualsBuilder().append(o1, o2).append(o1, o1).isEquals());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\builder\\EqualsBuilderTest.java",
  "methodName" : "testLongArray",
  "sourceCode" : "@Test\r\nvoid testLongArray() {\r\n    final long[] obj1 = new long[2];\r\n    obj1[0] = 5L;\r\n    obj1[1] = 6L;\r\n    final long[] obj2 = new long[2];\r\n    obj2[0] = 5L;\r\n    obj2[1] = 6L;\r\n    assertTrue(new EqualsBuilder().append(obj1, obj1).isEquals());\r\n    assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals());\r\n    obj1[1] = 7;\r\n    assertFalse(new EqualsBuilder().append(obj1, obj2).isEquals());\r\n    assertFalse(new EqualsBuilder().append(obj1, obj2).append(obj1, obj1).isEquals());\r\n    final long[] nullArr1 = null;\r\n    final long[] nullArr2 = null;\r\n    assertFalse(new EqualsBuilder().append(obj1, nullArr2).isEquals());\r\n    assertFalse(new EqualsBuilder().append(nullArr1, obj2).isEquals());\r\n    assertTrue(new EqualsBuilder().append(nullArr1, nullArr2).isEquals());\r\n    assertTrue(new EqualsBuilder().append(nullArr1, nullArr1).isEquals());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\builder\\EqualsBuilderTest.java",
  "methodName" : "testLongArrayHiddenByObject",
  "sourceCode" : "@Test\r\nvoid testLongArrayHiddenByObject() {\r\n    final long[] array1 = new long[2];\r\n    array1[0] = 5L;\r\n    array1[1] = 6L;\r\n    final long[] array2 = new long[2];\r\n    array2[0] = 5L;\r\n    array2[1] = 6L;\r\n    final Object obj1 = array1;\r\n    final Object obj2 = array2;\r\n    assertTrue(new EqualsBuilder().append(obj1, obj1).isEquals());\r\n    assertTrue(new EqualsBuilder().append(obj1, array1).isEquals());\r\n    assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals());\r\n    assertTrue(new EqualsBuilder().append(obj1, array2).isEquals());\r\n    array1[1] = 7;\r\n    assertFalse(new EqualsBuilder().append(obj1, obj2).isEquals());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\builder\\EqualsBuilderTest.java",
  "methodName" : "testMixedArray",
  "sourceCode" : "@Test\r\nvoid testMixedArray() {\r\n    final Object[] array1 = new Object[2];\r\n    final Object[] array2 = new Object[2];\r\n    for (int i = 0; i < array1.length; ++i) {\r\n        array1[i] = new long[2];\r\n        array2[i] = new long[2];\r\n        for (int j = 0; j < 2; ++j) {\r\n            ((long[]) array1[i])[j] = (i + 1) * (j + 1);\r\n            ((long[]) array2[i])[j] = (i + 1) * (j + 1);\r\n        }\r\n    }\r\n    assertTrue(new EqualsBuilder().append(array1, array1).isEquals());\r\n    assertTrue(new EqualsBuilder().append(array1, array2).isEquals());\r\n    ((long[]) array1[1])[1] = 0;\r\n    assertFalse(new EqualsBuilder().append(array1, array2).isEquals());\r\n    assertFalse(new EqualsBuilder().append(array1, array2).append(array1, array2).isEquals());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\builder\\EqualsBuilderTest.java",
  "methodName" : "testMultiBooleanArray",
  "sourceCode" : "@Test\r\nvoid testMultiBooleanArray() {\r\n    final boolean[][] array1 = new boolean[2][2];\r\n    final boolean[][] array2 = new boolean[2][2];\r\n    for (int i = 0; i < array1.length; ++i) {\r\n        for (int j = 0; j < array1[0].length; j++) {\r\n            array1[i][j] = i == 1 || j == 1;\r\n            array2[i][j] = i == 1 || j == 1;\r\n        }\r\n    }\r\n    assertTrue(new EqualsBuilder().append(array1, array1).isEquals());\r\n    assertTrue(new EqualsBuilder().append(array1, array2).isEquals());\r\n    array1[1][1] = false;\r\n    assertFalse(new EqualsBuilder().append(array1, array2).isEquals());\r\n    // compare 1 dim to 2.\r\n    final boolean[] array3 = { true, true };\r\n    assertFalse(new EqualsBuilder().append(array1, array3).isEquals());\r\n    assertFalse(new EqualsBuilder().append(array3, array1).isEquals());\r\n    assertFalse(new EqualsBuilder().append(array2, array3).isEquals());\r\n    assertFalse(new EqualsBuilder().append(array3, array2).isEquals());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\builder\\EqualsBuilderTest.java",
  "methodName" : "testMultiByteArray",
  "sourceCode" : "@Test\r\nvoid testMultiByteArray() {\r\n    final byte[][] array1 = new byte[2][2];\r\n    final byte[][] array2 = new byte[2][2];\r\n    for (byte i = 0; i < array1.length; ++i) {\r\n        for (byte j = 0; j < array1[0].length; j++) {\r\n            array1[i][j] = i;\r\n            array2[i][j] = i;\r\n        }\r\n    }\r\n    assertTrue(new EqualsBuilder().append(array1, array1).isEquals());\r\n    assertTrue(new EqualsBuilder().append(array1, array2).isEquals());\r\n    array1[1][1] = 0;\r\n    assertFalse(new EqualsBuilder().append(array1, array2).isEquals());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\builder\\EqualsBuilderTest.java",
  "methodName" : "testMultiCharArray",
  "sourceCode" : "@Test\r\nvoid testMultiCharArray() {\r\n    final char[][] array1 = new char[2][2];\r\n    final char[][] array2 = new char[2][2];\r\n    for (char i = 0; i < array1.length; ++i) {\r\n        for (char j = 0; j < array1[0].length; j++) {\r\n            array1[i][j] = i;\r\n            array2[i][j] = i;\r\n        }\r\n    }\r\n    assertTrue(new EqualsBuilder().append(array1, array1).isEquals());\r\n    assertTrue(new EqualsBuilder().append(array1, array2).isEquals());\r\n    array1[1][1] = 0;\r\n    assertFalse(new EqualsBuilder().append(array1, array2).isEquals());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\builder\\EqualsBuilderTest.java",
  "methodName" : "testMultiDoubleArray",
  "sourceCode" : "@Test\r\nvoid testMultiDoubleArray() {\r\n    final double[][] array1 = new double[2][2];\r\n    final double[][] array2 = new double[2][2];\r\n    for (int i = 0; i < array1.length; ++i) {\r\n        for (int j = 0; j < array1[0].length; j++) {\r\n            array1[i][j] = (i + 1) * (j + 1);\r\n            array2[i][j] = (i + 1) * (j + 1);\r\n        }\r\n    }\r\n    assertTrue(new EqualsBuilder().append(array1, array1).isEquals());\r\n    assertTrue(new EqualsBuilder().append(array1, array2).isEquals());\r\n    array1[1][1] = 0;\r\n    assertFalse(new EqualsBuilder().append(array1, array2).isEquals());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\builder\\EqualsBuilderTest.java",
  "methodName" : "testMultiFloatArray",
  "sourceCode" : "@Test\r\nvoid testMultiFloatArray() {\r\n    final float[][] array1 = new float[2][2];\r\n    final float[][] array2 = new float[2][2];\r\n    for (int i = 0; i < array1.length; ++i) {\r\n        for (int j = 0; j < array1[0].length; j++) {\r\n            array1[i][j] = (i + 1) * (j + 1);\r\n            array2[i][j] = (i + 1) * (j + 1);\r\n        }\r\n    }\r\n    assertTrue(new EqualsBuilder().append(array1, array1).isEquals());\r\n    assertTrue(new EqualsBuilder().append(array1, array2).isEquals());\r\n    array1[1][1] = 0;\r\n    assertFalse(new EqualsBuilder().append(array1, array2).isEquals());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\builder\\EqualsBuilderTest.java",
  "methodName" : "testMultiIntArray",
  "sourceCode" : "@Test\r\nvoid testMultiIntArray() {\r\n    final int[][] array1 = new int[2][2];\r\n    final int[][] array2 = new int[2][2];\r\n    for (int i = 0; i < array1.length; ++i) {\r\n        for (int j = 0; j < array1[0].length; j++) {\r\n            array1[i][j] = (i + 1) * (j + 1);\r\n            array2[i][j] = (i + 1) * (j + 1);\r\n        }\r\n    }\r\n    assertTrue(new EqualsBuilder().append(array1, array1).isEquals());\r\n    assertTrue(new EqualsBuilder().append(array1, array2).isEquals());\r\n    array1[1][1] = 0;\r\n    assertFalse(new EqualsBuilder().append(array1, array2).isEquals());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\builder\\EqualsBuilderTest.java",
  "methodName" : "testMultiLongArray",
  "sourceCode" : "@Test\r\nvoid testMultiLongArray() {\r\n    final long[][] array1 = new long[2][2];\r\n    final long[][] array2 = new long[2][2];\r\n    for (int i = 0; i < array1.length; ++i) {\r\n        for (int j = 0; j < array1[0].length; j++) {\r\n            array1[i][j] = (i + 1) * (j + 1);\r\n            array2[i][j] = (i + 1) * (j + 1);\r\n        }\r\n    }\r\n    assertTrue(new EqualsBuilder().append(array1, array1).isEquals());\r\n    assertTrue(new EqualsBuilder().append(array1, array2).isEquals());\r\n    array1[1][1] = 0;\r\n    assertFalse(new EqualsBuilder().append(array1, array2).isEquals());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\builder\\EqualsBuilderTest.java",
  "methodName" : "testMultiShortArray",
  "sourceCode" : "@Test\r\nvoid testMultiShortArray() {\r\n    final short[][] array1 = new short[2][2];\r\n    final short[][] array2 = new short[2][2];\r\n    for (short i = 0; i < array1.length; ++i) {\r\n        for (short j = 0; j < array1[0].length; j++) {\r\n            array1[i][j] = i;\r\n            array2[i][j] = i;\r\n        }\r\n    }\r\n    assertTrue(new EqualsBuilder().append(array1, array1).isEquals());\r\n    assertTrue(new EqualsBuilder().append(array1, array2).isEquals());\r\n    array1[1][1] = 0;\r\n    assertFalse(new EqualsBuilder().append(array1, array2).isEquals());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\builder\\EqualsBuilderTest.java",
  "methodName" : "testNpeForNullElement",
  "sourceCode" : "/**\r\n * Test from https://issues.apache.org/jira/browse/LANG-42\r\n */\r\n@Test\r\nvoid testNpeForNullElement() {\r\n    final Object[] x1 = { Integer.valueOf(1), null, Integer.valueOf(3) };\r\n    final Object[] x2 = { Integer.valueOf(1), Integer.valueOf(2), Integer.valueOf(3) };\r\n    // causes an NPE in 2.0 according to:\r\n    // https://issues.apache.org/jira/browse/LANG-42\r\n    new EqualsBuilder().append(x1, x2);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\builder\\EqualsBuilderTest.java",
  "methodName" : "testObject",
  "sourceCode" : "@Test\r\nvoid testObject() {\r\n    final TestObject o1 = new TestObject(4);\r\n    final TestObject o2 = new TestObject(5);\r\n    assertTrue(new EqualsBuilder().append(o1, o1).isEquals());\r\n    assertFalse(new EqualsBuilder().append(o1, o2).isEquals());\r\n    o2.setA(4);\r\n    assertTrue(new EqualsBuilder().append(o1, o2).isEquals());\r\n    assertFalse(new EqualsBuilder().append(o1, this).isEquals());\r\n    assertFalse(new EqualsBuilder().append(o1, null).isEquals());\r\n    assertFalse(new EqualsBuilder().append(null, o2).isEquals());\r\n    assertTrue(new EqualsBuilder().append((Object) null, null).isEquals());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\builder\\EqualsBuilderTest.java",
  "methodName" : "testObjectArray",
  "sourceCode" : "@Test\r\nvoid testObjectArray() {\r\n    final TestObject[] obj1 = new TestObject[3];\r\n    obj1[0] = new TestObject(4);\r\n    obj1[1] = new TestObject(5);\r\n    obj1[2] = null;\r\n    final TestObject[] obj2 = new TestObject[3];\r\n    obj2[0] = new TestObject(4);\r\n    obj2[1] = new TestObject(5);\r\n    obj2[2] = null;\r\n    assertTrue(new EqualsBuilder().append(obj1, obj1).isEquals());\r\n    assertTrue(new EqualsBuilder().append(obj2, obj2).isEquals());\r\n    assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals());\r\n    obj1[1].setA(6);\r\n    assertFalse(new EqualsBuilder().append(obj1, obj2).isEquals());\r\n    assertFalse(new EqualsBuilder().append(obj1, obj2).append(obj1, obj1).isEquals());\r\n    obj1[1].setA(5);\r\n    assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals());\r\n    obj1[2] = obj1[1];\r\n    assertFalse(new EqualsBuilder().append(obj1, obj2).isEquals());\r\n    obj1[2] = null;\r\n    assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals());\r\n    final TestObject[] nullArr1 = null;\r\n    final TestObject[] nullArr2 = null;\r\n    assertFalse(new EqualsBuilder().append(obj1, nullArr2).isEquals());\r\n    assertFalse(new EqualsBuilder().append(nullArr1, obj2).isEquals());\r\n    assertTrue(new EqualsBuilder().append(nullArr1, nullArr2).isEquals());\r\n    assertTrue(new EqualsBuilder().append(nullArr1, nullArr1).isEquals());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\builder\\EqualsBuilderTest.java",
  "methodName" : "testObjectArrayHiddenByObject",
  "sourceCode" : "@Test\r\nvoid testObjectArrayHiddenByObject() {\r\n    final TestObject[] array1 = new TestObject[2];\r\n    array1[0] = new TestObject(4);\r\n    array1[1] = new TestObject(5);\r\n    final TestObject[] array2 = new TestObject[2];\r\n    array2[0] = new TestObject(4);\r\n    array2[1] = new TestObject(5);\r\n    final Object obj1 = array1;\r\n    final Object obj2 = array2;\r\n    assertTrue(new EqualsBuilder().append(obj1, obj1).isEquals());\r\n    assertTrue(new EqualsBuilder().append(obj1, array1).isEquals());\r\n    assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals());\r\n    assertTrue(new EqualsBuilder().append(obj1, array2).isEquals());\r\n    array1[1].setA(6);\r\n    assertFalse(new EqualsBuilder().append(obj1, obj2).isEquals());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\builder\\EqualsBuilderTest.java",
  "methodName" : "testObjectBuild",
  "sourceCode" : "@Test\r\nvoid testObjectBuild() {\r\n    final TestObject o1 = new TestObject(4);\r\n    final TestObject o2 = new TestObject(5);\r\n    assertEquals(Boolean.TRUE, new EqualsBuilder().append(o1, o1).build());\r\n    assertEquals(Boolean.FALSE, new EqualsBuilder().append(o1, o2).build());\r\n    o2.setA(4);\r\n    assertEquals(Boolean.TRUE, new EqualsBuilder().append(o1, o2).build());\r\n    assertEquals(Boolean.FALSE, new EqualsBuilder().append(o1, this).build());\r\n    assertEquals(Boolean.FALSE, new EqualsBuilder().append(o1, null).build());\r\n    assertEquals(Boolean.FALSE, new EqualsBuilder().append(null, o2).build());\r\n    assertEquals(Boolean.TRUE, new EqualsBuilder().append((Object) null, null).build());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\builder\\EqualsBuilderTest.java",
  "methodName" : "testObjectRecursive",
  "sourceCode" : "@Test\r\nvoid testObjectRecursive() {\r\n    final TestRecursiveInnerObject i1_1 = new TestRecursiveInnerObject(1);\r\n    final TestRecursiveInnerObject i1_2 = new TestRecursiveInnerObject(1);\r\n    final TestRecursiveInnerObject i2_1 = new TestRecursiveInnerObject(2);\r\n    final TestRecursiveInnerObject i2_2 = new TestRecursiveInnerObject(2);\r\n    final TestRecursiveInnerObject i3 = new TestRecursiveInnerObject(3);\r\n    final TestRecursiveInnerObject i4 = new TestRecursiveInnerObject(4);\r\n    final TestRecursiveObject o1A = new TestRecursiveObject(i1_1, i2_1, 1);\r\n    final TestRecursiveObject o1B = new TestRecursiveObject(i1_2, i2_2, 1);\r\n    final TestRecursiveObject o2 = new TestRecursiveObject(i3, i4, 2);\r\n    final TestRecursiveObject oNull = new TestRecursiveObject(null, null, 2);\r\n    assertTrue(new EqualsBuilder().setTestRecursive(true).append(o1A, o1A).isEquals());\r\n    assertTrue(new EqualsBuilder().setTestRecursive(true).append(o1A, o1B).isEquals());\r\n    assertFalse(new EqualsBuilder().setTestRecursive(true).append(o1A, o2).isEquals());\r\n    assertTrue(new EqualsBuilder().setTestRecursive(true).append(oNull, oNull).isEquals());\r\n    assertFalse(new EqualsBuilder().setTestRecursive(true).append(o1A, oNull).isEquals());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\builder\\EqualsBuilderTest.java",
  "methodName" : "testObjectRecursiveCycle",
  "sourceCode" : "@Test\r\nvoid testObjectRecursiveCycle() {\r\n    final TestRecursiveCycleObject o1A = new TestRecursiveCycleObject(1);\r\n    final TestRecursiveCycleObject i1A = new TestRecursiveCycleObject(o1A, 100);\r\n    o1A.setCycle(i1A);\r\n    final TestRecursiveCycleObject o1B = new TestRecursiveCycleObject(1);\r\n    final TestRecursiveCycleObject i1B = new TestRecursiveCycleObject(o1B, 100);\r\n    o1B.setCycle(i1B);\r\n    final TestRecursiveCycleObject o2 = new TestRecursiveCycleObject(2);\r\n    final TestRecursiveCycleObject i2 = new TestRecursiveCycleObject(o1B, 200);\r\n    o2.setCycle(i2);\r\n    assertTrue(new EqualsBuilder().setTestRecursive(true).append(o1A, o1A).isEquals());\r\n    assertTrue(new EqualsBuilder().setTestRecursive(true).append(o1A, o1B).isEquals());\r\n    assertFalse(new EqualsBuilder().setTestRecursive(true).append(o1A, o2).isEquals());\r\n    assertTrue(EqualsBuilder.reflectionEquals(o1A, o1B, false, null, true));\r\n    assertFalse(EqualsBuilder.reflectionEquals(o1A, o2, false, null, true));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\builder\\EqualsBuilderTest.java",
  "methodName" : "testObjectRecursiveCycleSelfreference",
  "sourceCode" : "@Test\r\nvoid testObjectRecursiveCycleSelfreference() {\r\n    final TestRecursiveCycleObject o1A = new TestRecursiveCycleObject(1);\r\n    final TestRecursiveCycleObject o1B = new TestRecursiveCycleObject(1);\r\n    final TestRecursiveCycleObject o2 = new TestRecursiveCycleObject(2);\r\n    assertTrue(new EqualsBuilder().setTestRecursive(true).append(o1A, o1A).isEquals());\r\n    assertTrue(new EqualsBuilder().setTestRecursive(true).append(o1A, o1B).isEquals());\r\n    assertFalse(new EqualsBuilder().setTestRecursive(true).append(o1A, o2).isEquals());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\builder\\EqualsBuilderTest.java",
  "methodName" : "testObjectRecursiveGenericInteger",
  "sourceCode" : "@Test\r\nvoid testObjectRecursiveGenericInteger() {\r\n    final TestRecursiveGenericObject<Integer> o1A = new TestRecursiveGenericObject<>(1);\r\n    final TestRecursiveGenericObject<Integer> o1B = new TestRecursiveGenericObject<>(1);\r\n    final TestRecursiveGenericObject<Integer> o2 = new TestRecursiveGenericObject<>(2);\r\n    assertTrue(new EqualsBuilder().setTestRecursive(true).append(o1A, o1B).isEquals());\r\n    assertTrue(new EqualsBuilder().setTestRecursive(true).append(o1B, o1A).isEquals());\r\n    assertFalse(new EqualsBuilder().setTestRecursive(true).append(o1B, o2).isEquals());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\builder\\EqualsBuilderTest.java",
  "methodName" : "testObjectRecursiveGenericString",
  "sourceCode" : "@Test\r\nvoid testObjectRecursiveGenericString() {\r\n    // Note: Do not use literals, because string literals are always mapped by same object (internal() of String))!\r\n    final String s1A = String.valueOf(1);\r\n    final TestRecursiveGenericObject<String> o1A = new TestRecursiveGenericObject<>(s1A);\r\n    final TestRecursiveGenericObject<String> o1B = new TestRecursiveGenericObject<>(String.valueOf(1));\r\n    final TestRecursiveGenericObject<String> o2 = new TestRecursiveGenericObject<>(String.valueOf(2));\r\n    // To trigger bug reported in LANG-1356, call hashCode only on string in instance o1_a\r\n    s1A.hashCode();\r\n    assertTrue(new EqualsBuilder().setTestRecursive(true).append(o1A, o1B).isEquals());\r\n    assertTrue(new EqualsBuilder().setTestRecursive(true).append(o1B, o1A).isEquals());\r\n    assertFalse(new EqualsBuilder().setTestRecursive(true).append(o1B, o2).isEquals());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\builder\\EqualsBuilderTest.java",
  "methodName" : "testObjectsBypassReflectionClasses",
  "sourceCode" : "@Test\r\nvoid testObjectsBypassReflectionClasses() {\r\n    final List<Class<?>> bypassReflectionClasses = new ArrayList<>();\r\n    bypassReflectionClasses.add(List.class);\r\n    bypassReflectionClasses.add(Boolean.class);\r\n    assertTrue(new EqualsBuilder().setBypassReflectionClasses(bypassReflectionClasses).isEquals());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\builder\\EqualsBuilderTest.java",
  "methodName" : "testRaggedArray",
  "sourceCode" : "@Test\r\nvoid testRaggedArray() {\r\n    final long[][] array1 = new long[2][];\r\n    final long[][] array2 = new long[2][];\r\n    for (int i = 0; i < array1.length; ++i) {\r\n        array1[i] = new long[2];\r\n        array2[i] = new long[2];\r\n        for (int j = 0; j < array1[i].length; ++j) {\r\n            array1[i][j] = (i + 1) * (j + 1);\r\n            array2[i][j] = (i + 1) * (j + 1);\r\n        }\r\n    }\r\n    assertTrue(new EqualsBuilder().append(array1, array1).isEquals());\r\n    assertTrue(new EqualsBuilder().append(array1, array2).isEquals());\r\n    array1[1][1] = 0;\r\n    assertFalse(new EqualsBuilder().append(array1, array2).isEquals());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\builder\\EqualsBuilderTest.java",
  "methodName" : "testReflectionAppend",
  "sourceCode" : "@Test\r\nvoid testReflectionAppend() {\r\n    assertTrue(EqualsBuilder.reflectionEquals(null, null));\r\n    final TestObject o1 = new TestObject(4);\r\n    final TestObject o2 = new TestObject(5);\r\n    assertTrue(new EqualsBuilder().reflectionAppend(o1, o1).build());\r\n    assertFalse(new EqualsBuilder().reflectionAppend(o1, o2).build());\r\n    assertFalse(new EqualsBuilder().reflectionAppend(o1, o2).reflectionAppend(o1, o1).build());\r\n    o2.setA(4);\r\n    assertTrue(new EqualsBuilder().reflectionAppend(o1, o2).build());\r\n    assertFalse(new EqualsBuilder().reflectionAppend(o1, this).build());\r\n    assertFalse(new EqualsBuilder().reflectionAppend(o1, null).build());\r\n    assertFalse(new EqualsBuilder().reflectionAppend(null, o2).build());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\builder\\EqualsBuilderTest.java",
  "methodName" : "testReflectionArrays",
  "sourceCode" : "@Test\r\nvoid testReflectionArrays() {\r\n    final TestObject one = new TestObject(1);\r\n    final TestObject two = new TestObject(2);\r\n    final Object[] o1 = { one };\r\n    final Object[] o2 = { two };\r\n    final Object[] o3 = { one };\r\n    assertFalse(EqualsBuilder.reflectionEquals(o1, o2));\r\n    assertTrue(EqualsBuilder.reflectionEquals(o1, o1));\r\n    assertTrue(EqualsBuilder.reflectionEquals(o1, o3));\r\n    final double[] d1 = { 0, 1 };\r\n    final double[] d2 = { 2, 3 };\r\n    final double[] d3 = { 0, 1 };\r\n    assertFalse(EqualsBuilder.reflectionEquals(d1, d2));\r\n    assertTrue(EqualsBuilder.reflectionEquals(d1, d1));\r\n    assertTrue(EqualsBuilder.reflectionEquals(d1, d3));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\builder\\EqualsBuilderTest.java",
  "methodName" : "testReflectionEquals",
  "sourceCode" : "@Test\r\nvoid testReflectionEquals() {\r\n    final TestObject o1 = new TestObject(4);\r\n    final TestObject o2 = new TestObject(5);\r\n    assertTrue(EqualsBuilder.reflectionEquals(o1, o1));\r\n    assertFalse(EqualsBuilder.reflectionEquals(o1, o2));\r\n    o2.setA(4);\r\n    assertTrue(EqualsBuilder.reflectionEquals(o1, o2));\r\n    assertFalse(EqualsBuilder.reflectionEquals(o1, this));\r\n    assertFalse(EqualsBuilder.reflectionEquals(o1, null));\r\n    assertFalse(EqualsBuilder.reflectionEquals(null, o2));\r\n    assertTrue(EqualsBuilder.reflectionEquals(null, null));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\builder\\EqualsBuilderTest.java",
  "methodName" : "testReflectionEqualsExcludeFields",
  "sourceCode" : "@Test\r\nvoid testReflectionEqualsExcludeFields() {\r\n    final TestObjectWithMultipleFields x1 = new TestObjectWithMultipleFields(1, 2, 3);\r\n    final TestObjectWithMultipleFields x2 = new TestObjectWithMultipleFields(1, 3, 4);\r\n    // not equal when including all fields\r\n    assertFalse(EqualsBuilder.reflectionEquals(x1, x2));\r\n    // doesn't barf on null, empty array, or non-existent field, but still tests as not equal\r\n    assertFalse(EqualsBuilder.reflectionEquals(x1, x2, (String[]) null));\r\n    assertFalse(EqualsBuilder.reflectionEquals(x1, x2));\r\n    assertFalse(EqualsBuilder.reflectionEquals(x1, x2, \"xxx\"));\r\n    // not equal if only one of the differing fields excluded\r\n    assertFalse(EqualsBuilder.reflectionEquals(x1, x2, \"two\"));\r\n    assertFalse(EqualsBuilder.reflectionEquals(x1, x2, \"three\"));\r\n    // equal if both differing fields excluded\r\n    assertTrue(EqualsBuilder.reflectionEquals(x1, x2, \"two\", \"three\"));\r\n    // still equal as long as both differing fields are among excluded\r\n    assertTrue(EqualsBuilder.reflectionEquals(x1, x2, \"one\", \"two\", \"three\"));\r\n    assertTrue(EqualsBuilder.reflectionEquals(x1, x2, \"one\", \"two\", \"three\", \"xxx\"));\r\n    // still equal as long as both differing fields are among excluded\r\n    assertTrue(EqualsBuilder.reflectionEquals(x1, x2, Arrays.asList(\"one\", \"two\", \"three\")));\r\n    assertTrue(EqualsBuilder.reflectionEquals(x1, x2, Arrays.asList(\"one\", \"two\", \"three\", \"xxx\")));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\builder\\EqualsBuilderTest.java",
  "methodName" : "testReflectionHierarchyEquals",
  "sourceCode" : "@Test\r\nvoid testReflectionHierarchyEquals() {\r\n    testReflectionHierarchyEquals(false);\r\n    testReflectionHierarchyEquals(true);\r\n    // Transients\r\n    assertTrue(EqualsBuilder.reflectionEquals(new TestTTLeafObject(1, 2, 3, 4), new TestTTLeafObject(1, 2, 3, 4), true));\r\n    assertTrue(EqualsBuilder.reflectionEquals(new TestTTLeafObject(1, 2, 3, 4), new TestTTLeafObject(1, 2, 3, 4), false));\r\n    assertFalse(EqualsBuilder.reflectionEquals(new TestTTLeafObject(1, 0, 0, 4), new TestTTLeafObject(1, 2, 3, 4), true));\r\n    assertFalse(EqualsBuilder.reflectionEquals(new TestTTLeafObject(1, 2, 3, 4), new TestTTLeafObject(1, 2, 3, 0), true));\r\n    assertFalse(EqualsBuilder.reflectionEquals(new TestTTLeafObject(0, 2, 3, 4), new TestTTLeafObject(1, 2, 3, 4), true));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\builder\\EqualsBuilderTest.java",
  "methodName" : "testReset",
  "sourceCode" : "@Test\r\nvoid testReset() {\r\n    final EqualsBuilder equalsBuilder = new EqualsBuilder();\r\n    assertTrue(equalsBuilder.isEquals());\r\n    equalsBuilder.setEquals(false);\r\n    assertFalse(equalsBuilder.isEquals());\r\n    equalsBuilder.reset();\r\n    assertTrue(equalsBuilder.isEquals());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\builder\\EqualsBuilderTest.java",
  "methodName" : "testShort",
  "sourceCode" : "@Test\r\nvoid testShort() {\r\n    final short o1 = 1;\r\n    final short o2 = 2;\r\n    assertTrue(new EqualsBuilder().append(o1, o1).isEquals());\r\n    assertFalse(new EqualsBuilder().append(o1, o2).isEquals());\r\n    assertFalse(new EqualsBuilder().append(o1, o2).append(o1, o1).isEquals());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\builder\\EqualsBuilderTest.java",
  "methodName" : "testShortArray",
  "sourceCode" : "@Test\r\nvoid testShortArray() {\r\n    final short[] obj1 = new short[2];\r\n    obj1[0] = 5;\r\n    obj1[1] = 6;\r\n    final short[] obj2 = new short[2];\r\n    obj2[0] = 5;\r\n    obj2[1] = 6;\r\n    assertTrue(new EqualsBuilder().append(obj1, obj1).isEquals());\r\n    assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals());\r\n    obj1[1] = 7;\r\n    assertFalse(new EqualsBuilder().append(obj1, obj2).isEquals());\r\n    assertFalse(new EqualsBuilder().append(obj1, obj2).append(obj1, obj1).isEquals());\r\n    final short[] nullArr1 = null;\r\n    final short[] nullArr2 = null;\r\n    assertFalse(new EqualsBuilder().append(obj1, nullArr2).isEquals());\r\n    assertFalse(new EqualsBuilder().append(nullArr1, obj2).isEquals());\r\n    assertTrue(new EqualsBuilder().append(nullArr1, nullArr2).isEquals());\r\n    assertTrue(new EqualsBuilder().append(nullArr1, nullArr1).isEquals());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\builder\\EqualsBuilderTest.java",
  "methodName" : "testShortArrayHiddenByObject",
  "sourceCode" : "@Test\r\nvoid testShortArrayHiddenByObject() {\r\n    final short[] array1 = new short[2];\r\n    array1[0] = 5;\r\n    array1[1] = 6;\r\n    final short[] array2 = new short[2];\r\n    array2[0] = 5;\r\n    array2[1] = 6;\r\n    final Object obj1 = array1;\r\n    final Object obj2 = array2;\r\n    assertTrue(new EqualsBuilder().append(obj1, obj1).isEquals());\r\n    assertTrue(new EqualsBuilder().append(obj1, array1).isEquals());\r\n    assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals());\r\n    assertTrue(new EqualsBuilder().append(obj1, array2).isEquals());\r\n    array1[1] = 7;\r\n    assertFalse(new EqualsBuilder().append(obj1, obj2).isEquals());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\builder\\EqualsBuilderTest.java",
  "methodName" : "testSuper",
  "sourceCode" : "@Test\r\nvoid testSuper() {\r\n    final TestObject o1 = new TestObject(4);\r\n    final TestObject o2 = new TestObject(5);\r\n    assertTrue(new EqualsBuilder().appendSuper(true).append(o1, o1).isEquals());\r\n    assertFalse(new EqualsBuilder().appendSuper(false).append(o1, o1).isEquals());\r\n    assertFalse(new EqualsBuilder().appendSuper(true).append(o1, o2).isEquals());\r\n    assertFalse(new EqualsBuilder().appendSuper(false).append(o1, o2).isEquals());\r\n    assertFalse(new EqualsBuilder().appendSuper(false).append(o1, o2).isEquals());\r\n    assertFalse(new EqualsBuilder().append(o1, o2).appendSuper(false).isEquals());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\builder\\EqualsBuilderTest.java",
  "methodName" : "testToEqualsExclude",
  "sourceCode" : "@Test\r\nvoid testToEqualsExclude() {\r\n    TestObjectEqualsExclude one = new TestObjectEqualsExclude(1, 2);\r\n    TestObjectEqualsExclude two = new TestObjectEqualsExclude(1, 3);\r\n    assertFalse(EqualsBuilder.reflectionEquals(one, two));\r\n    one = new TestObjectEqualsExclude(1, 2);\r\n    two = new TestObjectEqualsExclude(2, 2);\r\n    assertTrue(EqualsBuilder.reflectionEquals(one, two));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\builder\\EqualsBuilderTest.java",
  "methodName" : "testUnrelatedClasses",
  "sourceCode" : "/**\r\n * Tests two instances of classes that can be equal and that are not \"related\". The two classes are not subclasses\r\n * of each other and do not share a parent aside from Object.\r\n * See https://issues.apache.org/jira/browse/LANG-6\r\n */\r\n@Test\r\nvoid testUnrelatedClasses() {\r\n    final Object[] x = { new TestACanEqualB(1) };\r\n    final Object[] y = { new TestBCanEqualA(1) };\r\n    // sanity checks:\r\n    assertArrayEquals(x, x);\r\n    assertArrayEquals(y, y);\r\n    assertArrayEquals(x, y);\r\n    assertArrayEquals(y, x);\r\n    // real tests:\r\n    assertEquals(x[0], x[0]);\r\n    assertEquals(y[0], y[0]);\r\n    assertEquals(x[0], y[0]);\r\n    assertEquals(y[0], x[0]);\r\n    assertTrue(new EqualsBuilder().append(x, x).isEquals());\r\n    assertTrue(new EqualsBuilder().append(y, y).isEquals());\r\n    assertTrue(new EqualsBuilder().append(x, y).isEquals());\r\n    assertTrue(new EqualsBuilder().append(y, x).isEquals());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\builder\\HashCodeBuilderAndEqualsBuilderTest.java",
  "methodName" : "testFixture",
  "sourceCode" : "@Test\r\nvoid testFixture() {\r\n    testFixture(false);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\builder\\HashCodeBuilderAndEqualsBuilderTest.java",
  "methodName" : "testFixtureWithTransients",
  "sourceCode" : "@Test\r\nvoid testFixtureWithTransients() {\r\n    testFixture(true);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\builder\\HashCodeBuilderAndEqualsBuilderTest.java",
  "methodName" : "testInteger",
  "sourceCode" : "@Test\r\nvoid testInteger() {\r\n    testInteger(false);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\builder\\HashCodeBuilderAndEqualsBuilderTest.java",
  "methodName" : "testIntegerWithTransients",
  "sourceCode" : "@Test\r\nvoid testIntegerWithTransients() {\r\n    testInteger(true);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\builder\\HashCodeBuilderAndEqualsBuilderTest.java",
  "methodName" : "testRetention",
  "sourceCode" : "@Test\r\nvoid testRetention() throws Exception {\r\n    // The following should not retain memory.\r\n    for (int i = 0; i < Integer.getInteger(\"testRecursive\", 10_000); i++) {\r\n        final Class<?> clazz = TestClassBuilder.defineSimpleClass(getClass().getPackage().getName(), i);\r\n        assertEqualsAndHashCodeContract(clazz.newInstance(), clazz.newInstance(), false);\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\builder\\HashCodeBuilderTest.java",
  "methodName" : "testBoolean",
  "sourceCode" : "@Test\r\nvoid testBoolean() {\r\n    assertEquals(17 * 37 + 0, new HashCodeBuilder(17, 37).append(true).toHashCode());\r\n    assertEquals(17 * 37 + 1, new HashCodeBuilder(17, 37).append(false).toHashCode());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\builder\\HashCodeBuilderTest.java",
  "methodName" : "testBooleanArray",
  "sourceCode" : "@Test\r\nvoid testBooleanArray() {\r\n    assertEquals(17 * 37, new HashCodeBuilder(17, 37).append((boolean[]) null).toHashCode());\r\n    final boolean[] obj = new boolean[2];\r\n    assertEquals((17 * 37 + 1) * 37 + 1, new HashCodeBuilder(17, 37).append(obj).toHashCode());\r\n    obj[0] = true;\r\n    assertEquals((17 * 37 + 0) * 37 + 1, new HashCodeBuilder(17, 37).append(obj).toHashCode());\r\n    obj[1] = false;\r\n    assertEquals((17 * 37 + 0) * 37 + 1, new HashCodeBuilder(17, 37).append(obj).toHashCode());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\builder\\HashCodeBuilderTest.java",
  "methodName" : "testBooleanArrayAsObject",
  "sourceCode" : "@Test\r\nvoid testBooleanArrayAsObject() {\r\n    final boolean[] obj = new boolean[2];\r\n    assertEquals((17 * 37 + 1) * 37 + 1, new HashCodeBuilder(17, 37).append((Object) obj).toHashCode());\r\n    obj[0] = true;\r\n    assertEquals((17 * 37 + 0) * 37 + 1, new HashCodeBuilder(17, 37).append((Object) obj).toHashCode());\r\n    obj[1] = false;\r\n    assertEquals((17 * 37 + 0) * 37 + 1, new HashCodeBuilder(17, 37).append((Object) obj).toHashCode());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\builder\\HashCodeBuilderTest.java",
  "methodName" : "testBooleanMultiArray",
  "sourceCode" : "@Test\r\nvoid testBooleanMultiArray() {\r\n    final boolean[][] obj = new boolean[2][];\r\n    assertEquals(17 * 37 * 37, new HashCodeBuilder(17, 37).append(obj).toHashCode());\r\n    obj[0] = new boolean[0];\r\n    assertEquals(17 * 37, new HashCodeBuilder(17, 37).append(obj).toHashCode());\r\n    obj[0] = new boolean[1];\r\n    assertEquals((17 * 37 + 1) * 37, new HashCodeBuilder(17, 37).append(obj).toHashCode());\r\n    obj[0] = new boolean[2];\r\n    assertEquals(((17 * 37 + 1) * 37 + 1) * 37, new HashCodeBuilder(17, 37).append(obj).toHashCode());\r\n    obj[0][0] = true;\r\n    assertEquals(((17 * 37 + 0) * 37 + 1) * 37, new HashCodeBuilder(17, 37).append(obj).toHashCode());\r\n    obj[1] = new boolean[1];\r\n    assertEquals(((17 * 37 + 0) * 37 + 1) * 37 + 1, new HashCodeBuilder(17, 37).append(obj).toHashCode());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\builder\\HashCodeBuilderTest.java",
  "methodName" : "testByte",
  "sourceCode" : "@Test\r\nvoid testByte() {\r\n    assertEquals(17 * 37, new HashCodeBuilder(17, 37).append((byte) 0).toHashCode());\r\n    assertEquals(17 * 37 + 123, new HashCodeBuilder(17, 37).append((byte) 123).toHashCode());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\builder\\HashCodeBuilderTest.java",
  "methodName" : "testByteArray",
  "sourceCode" : "@Test\r\nvoid testByteArray() {\r\n    assertEquals(17 * 37, new HashCodeBuilder(17, 37).append((byte[]) null).toHashCode());\r\n    final byte[] obj = new byte[2];\r\n    assertEquals(17 * 37 * 37, new HashCodeBuilder(17, 37).append(obj).toHashCode());\r\n    obj[0] = (byte) 5;\r\n    assertEquals((17 * 37 + 5) * 37, new HashCodeBuilder(17, 37).append(obj).toHashCode());\r\n    obj[1] = (byte) 6;\r\n    assertEquals((17 * 37 + 5) * 37 + 6, new HashCodeBuilder(17, 37).append(obj).toHashCode());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\builder\\HashCodeBuilderTest.java",
  "methodName" : "testByteArrayAsObject",
  "sourceCode" : "@Test\r\nvoid testByteArrayAsObject() {\r\n    final byte[] obj = new byte[2];\r\n    assertEquals(17 * 37 * 37, new HashCodeBuilder(17, 37).append((Object) obj).toHashCode());\r\n    obj[0] = (byte) 5;\r\n    assertEquals((17 * 37 + 5) * 37, new HashCodeBuilder(17, 37).append((Object) obj).toHashCode());\r\n    obj[1] = (byte) 6;\r\n    assertEquals((17 * 37 + 5) * 37 + 6, new HashCodeBuilder(17, 37).append((Object) obj).toHashCode());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\builder\\HashCodeBuilderTest.java",
  "methodName" : "testChar",
  "sourceCode" : "@Test\r\nvoid testChar() {\r\n    assertEquals(17 * 37, new HashCodeBuilder(17, 37).append((char) 0).toHashCode());\r\n    assertEquals(17 * 37 + 1234, new HashCodeBuilder(17, 37).append((char) 1234).toHashCode());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\builder\\HashCodeBuilderTest.java",
  "methodName" : "testCharArray",
  "sourceCode" : "@Test\r\nvoid testCharArray() {\r\n    assertEquals(17 * 37, new HashCodeBuilder(17, 37).append((char[]) null).toHashCode());\r\n    final char[] obj = new char[2];\r\n    assertEquals(17 * 37 * 37, new HashCodeBuilder(17, 37).append(obj).toHashCode());\r\n    obj[0] = (char) 5;\r\n    assertEquals((17 * 37 + 5) * 37, new HashCodeBuilder(17, 37).append(obj).toHashCode());\r\n    obj[1] = (char) 6;\r\n    assertEquals((17 * 37 + 5) * 37 + 6, new HashCodeBuilder(17, 37).append(obj).toHashCode());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\builder\\HashCodeBuilderTest.java",
  "methodName" : "testCharArrayAsObject",
  "sourceCode" : "@Test\r\nvoid testCharArrayAsObject() {\r\n    final char[] obj = new char[2];\r\n    assertEquals(17 * 37 * 37, new HashCodeBuilder(17, 37).append((Object) obj).toHashCode());\r\n    obj[0] = (char) 5;\r\n    assertEquals((17 * 37 + 5) * 37, new HashCodeBuilder(17, 37).append((Object) obj).toHashCode());\r\n    obj[1] = (char) 6;\r\n    assertEquals((17 * 37 + 5) * 37 + 6, new HashCodeBuilder(17, 37).append((Object) obj).toHashCode());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\builder\\HashCodeBuilderTest.java",
  "methodName" : "testConstructorExEvenFirst",
  "sourceCode" : "@Test\r\nvoid testConstructorExEvenFirst() {\r\n    assertIllegalArgumentException(() -> new HashCodeBuilder(2, 3));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\builder\\HashCodeBuilderTest.java",
  "methodName" : "testConstructorExEvenNegative",
  "sourceCode" : "@Test\r\nvoid testConstructorExEvenNegative() {\r\n    assertIllegalArgumentException(() -> new HashCodeBuilder(-2, -2));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\builder\\HashCodeBuilderTest.java",
  "methodName" : "testConstructorExEvenSecond",
  "sourceCode" : "@Test\r\nvoid testConstructorExEvenSecond() {\r\n    assertIllegalArgumentException(() -> new HashCodeBuilder(3, 2));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\builder\\HashCodeBuilderTest.java",
  "methodName" : "testConstructorExZero",
  "sourceCode" : "@Test\r\nvoid testConstructorExZero() {\r\n    assertIllegalArgumentException(() -> new HashCodeBuilder(0, 0));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\builder\\HashCodeBuilderTest.java",
  "methodName" : "testDouble",
  "sourceCode" : "@Test\r\nvoid testDouble() {\r\n    assertEquals(17 * 37, new HashCodeBuilder(17, 37).append(0d).toHashCode());\r\n    final double d = 1234567.89;\r\n    final long l = Double.doubleToLongBits(d);\r\n    assertEquals(17 * 37 + (int) (l ^ l >> 32), new HashCodeBuilder(17, 37).append(d).toHashCode());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\builder\\HashCodeBuilderTest.java",
  "methodName" : "testDoubleArray",
  "sourceCode" : "@Test\r\nvoid testDoubleArray() {\r\n    assertEquals(17 * 37, new HashCodeBuilder(17, 37).append((double[]) null).toHashCode());\r\n    final double[] obj = new double[2];\r\n    assertEquals(17 * 37 * 37, new HashCodeBuilder(17, 37).append(obj).toHashCode());\r\n    obj[0] = 5.4d;\r\n    final long l1 = Double.doubleToLongBits(5.4d);\r\n    final int h1 = (int) (l1 ^ l1 >> 32);\r\n    assertEquals((17 * 37 + h1) * 37, new HashCodeBuilder(17, 37).append(obj).toHashCode());\r\n    obj[1] = 6.3d;\r\n    final long l2 = Double.doubleToLongBits(6.3d);\r\n    final int h2 = (int) (l2 ^ l2 >> 32);\r\n    assertEquals((17 * 37 + h1) * 37 + h2, new HashCodeBuilder(17, 37).append(obj).toHashCode());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\builder\\HashCodeBuilderTest.java",
  "methodName" : "testDoubleArrayAsObject",
  "sourceCode" : "@Test\r\nvoid testDoubleArrayAsObject() {\r\n    final double[] obj = new double[2];\r\n    assertEquals(17 * 37 * 37, new HashCodeBuilder(17, 37).append((Object) obj).toHashCode());\r\n    obj[0] = 5.4d;\r\n    final long l1 = Double.doubleToLongBits(5.4d);\r\n    final int h1 = (int) (l1 ^ l1 >> 32);\r\n    assertEquals((17 * 37 + h1) * 37, new HashCodeBuilder(17, 37).append((Object) obj).toHashCode());\r\n    obj[1] = 6.3d;\r\n    final long l2 = Double.doubleToLongBits(6.3d);\r\n    final int h2 = (int) (l2 ^ l2 >> 32);\r\n    assertEquals((17 * 37 + h1) * 37 + h2, new HashCodeBuilder(17, 37).append((Object) obj).toHashCode());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\builder\\HashCodeBuilderTest.java",
  "methodName" : "testEquals",
  "sourceCode" : "@Test\r\nvoid testEquals() {\r\n    final HashCodeBuilder hcb1 = new HashCodeBuilder(17, 37).append(1).append('a');\r\n    final HashCodeBuilder hcb2 = new HashCodeBuilder(17, 37).append(1).append('a');\r\n    final HashCodeBuilder hcb3 = new HashCodeBuilder(17, 37).append(2).append('c');\r\n    assertEquals(hcb1, hcb1);\r\n    assertEquals(hcb1, hcb2);\r\n    assertEquals(hcb2, hcb1);\r\n    assertNotEquals(hcb1, hcb3);\r\n    assertNotEquals(hcb2, hcb3);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\builder\\HashCodeBuilderTest.java",
  "methodName" : "testFloat",
  "sourceCode" : "@Test\r\nvoid testFloat() {\r\n    assertEquals(17 * 37, new HashCodeBuilder(17, 37).append(0f).toHashCode());\r\n    final float f = 1234.89f;\r\n    final int i = Float.floatToIntBits(f);\r\n    assertEquals(17 * 37 + i, new HashCodeBuilder(17, 37).append(f).toHashCode());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\builder\\HashCodeBuilderTest.java",
  "methodName" : "testFloatArray",
  "sourceCode" : "@Test\r\nvoid testFloatArray() {\r\n    assertEquals(17 * 37, new HashCodeBuilder(17, 37).append((float[]) null).toHashCode());\r\n    final float[] obj = new float[2];\r\n    assertEquals(17 * 37 * 37, new HashCodeBuilder(17, 37).append(obj).toHashCode());\r\n    obj[0] = 5.4f;\r\n    final int h1 = Float.floatToIntBits(5.4f);\r\n    assertEquals((17 * 37 + h1) * 37, new HashCodeBuilder(17, 37).append(obj).toHashCode());\r\n    obj[1] = 6.3f;\r\n    final int h2 = Float.floatToIntBits(6.3f);\r\n    assertEquals((17 * 37 + h1) * 37 + h2, new HashCodeBuilder(17, 37).append(obj).toHashCode());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\builder\\HashCodeBuilderTest.java",
  "methodName" : "testFloatArrayAsObject",
  "sourceCode" : "@Test\r\nvoid testFloatArrayAsObject() {\r\n    final float[] obj = new float[2];\r\n    assertEquals(17 * 37 * 37, new HashCodeBuilder(17, 37).append((Object) obj).toHashCode());\r\n    obj[0] = 5.4f;\r\n    final int h1 = Float.floatToIntBits(5.4f);\r\n    assertEquals((17 * 37 + h1) * 37, new HashCodeBuilder(17, 37).append((Object) obj).toHashCode());\r\n    obj[1] = 6.3f;\r\n    final int h2 = Float.floatToIntBits(6.3f);\r\n    assertEquals((17 * 37 + h1) * 37 + h2, new HashCodeBuilder(17, 37).append((Object) obj).toHashCode());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\builder\\HashCodeBuilderTest.java",
  "methodName" : "testInt",
  "sourceCode" : "@Test\r\nvoid testInt() {\r\n    assertEquals(17 * 37, new HashCodeBuilder(17, 37).append(0).toHashCode());\r\n    assertEquals(17 * 37 + 123456, new HashCodeBuilder(17, 37).append(123456).toHashCode());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\builder\\HashCodeBuilderTest.java",
  "methodName" : "testIntArray",
  "sourceCode" : "@Test\r\nvoid testIntArray() {\r\n    assertEquals(17 * 37, new HashCodeBuilder(17, 37).append((int[]) null).toHashCode());\r\n    final int[] obj = new int[2];\r\n    assertEquals(17 * 37 * 37, new HashCodeBuilder(17, 37).append(obj).toHashCode());\r\n    obj[0] = 5;\r\n    assertEquals((17 * 37 + 5) * 37, new HashCodeBuilder(17, 37).append(obj).toHashCode());\r\n    obj[1] = 6;\r\n    assertEquals((17 * 37 + 5) * 37 + 6, new HashCodeBuilder(17, 37).append(obj).toHashCode());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\builder\\HashCodeBuilderTest.java",
  "methodName" : "testIntArrayAsObject",
  "sourceCode" : "@Test\r\nvoid testIntArrayAsObject() {\r\n    final int[] obj = new int[2];\r\n    assertEquals(17 * 37 * 37, new HashCodeBuilder(17, 37).append((Object) obj).toHashCode());\r\n    obj[0] = 5;\r\n    assertEquals((17 * 37 + 5) * 37, new HashCodeBuilder(17, 37).append((Object) obj).toHashCode());\r\n    obj[1] = 6;\r\n    assertEquals((17 * 37 + 5) * 37 + 6, new HashCodeBuilder(17, 37).append((Object) obj).toHashCode());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\builder\\HashCodeBuilderTest.java",
  "methodName" : "testLong",
  "sourceCode" : "@Test\r\nvoid testLong() {\r\n    assertEquals(17 * 37, new HashCodeBuilder(17, 37).append(0L).toHashCode());\r\n    assertEquals(17 * 37 + (int) (123456789L ^ 123456789L >> 32), new HashCodeBuilder(17, 37).append(123456789L).toHashCode());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\builder\\HashCodeBuilderTest.java",
  "methodName" : "testLongArray",
  "sourceCode" : "@Test\r\nvoid testLongArray() {\r\n    assertEquals(17 * 37, new HashCodeBuilder(17, 37).append((long[]) null).toHashCode());\r\n    final long[] obj = new long[2];\r\n    assertEquals(17 * 37 * 37, new HashCodeBuilder(17, 37).append(obj).toHashCode());\r\n    obj[0] = 5L;\r\n    final int h1 = (int) (5L ^ 5L >> 32);\r\n    assertEquals((17 * 37 + h1) * 37, new HashCodeBuilder(17, 37).append(obj).toHashCode());\r\n    obj[1] = 6L;\r\n    final int h2 = (int) (6L ^ 6L >> 32);\r\n    assertEquals((17 * 37 + h1) * 37 + h2, new HashCodeBuilder(17, 37).append(obj).toHashCode());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\builder\\HashCodeBuilderTest.java",
  "methodName" : "testLongArrayAsObject",
  "sourceCode" : "@Test\r\nvoid testLongArrayAsObject() {\r\n    final long[] obj = new long[2];\r\n    assertEquals(17 * 37 * 37, new HashCodeBuilder(17, 37).append((Object) obj).toHashCode());\r\n    obj[0] = 5L;\r\n    final int h1 = (int) (5L ^ 5L >> 32);\r\n    assertEquals((17 * 37 + h1) * 37, new HashCodeBuilder(17, 37).append((Object) obj).toHashCode());\r\n    obj[1] = 6L;\r\n    final int h2 = (int) (6L ^ 6L >> 32);\r\n    assertEquals((17 * 37 + h1) * 37 + h2, new HashCodeBuilder(17, 37).append((Object) obj).toHashCode());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\builder\\HashCodeBuilderTest.java",
  "methodName" : "testObject",
  "sourceCode" : "@Test\r\nvoid testObject() {\r\n    Object obj = null;\r\n    assertEquals(17 * 37, new HashCodeBuilder(17, 37).append(obj).toHashCode());\r\n    obj = new Object();\r\n    assertEquals(17 * 37 + obj.hashCode(), new HashCodeBuilder(17, 37).append(obj).toHashCode());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\builder\\HashCodeBuilderTest.java",
  "methodName" : "testObjectArray",
  "sourceCode" : "@Test\r\nvoid testObjectArray() {\r\n    assertEquals(17 * 37, new HashCodeBuilder(17, 37).append((Object[]) null).toHashCode());\r\n    final Object[] obj = new Object[2];\r\n    assertEquals(17 * 37 * 37, new HashCodeBuilder(17, 37).append(obj).toHashCode());\r\n    obj[0] = new Object();\r\n    assertEquals((17 * 37 + obj[0].hashCode()) * 37, new HashCodeBuilder(17, 37).append(obj).toHashCode());\r\n    obj[1] = new Object();\r\n    assertEquals((17 * 37 + obj[0].hashCode()) * 37 + obj[1].hashCode(), new HashCodeBuilder(17, 37).append(obj).toHashCode());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\builder\\HashCodeBuilderTest.java",
  "methodName" : "testObjectArrayAsObject",
  "sourceCode" : "@Test\r\nvoid testObjectArrayAsObject() {\r\n    final Object[] obj = new Object[2];\r\n    assertEquals(17 * 37 * 37, new HashCodeBuilder(17, 37).append((Object) obj).toHashCode());\r\n    obj[0] = new Object();\r\n    assertEquals((17 * 37 + obj[0].hashCode()) * 37, new HashCodeBuilder(17, 37).append((Object) obj).toHashCode());\r\n    obj[1] = new Object();\r\n    assertEquals((17 * 37 + obj[0].hashCode()) * 37 + obj[1].hashCode(), new HashCodeBuilder(17, 37).append((Object) obj).toHashCode());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\builder\\HashCodeBuilderTest.java",
  "methodName" : "testObjectBuild",
  "sourceCode" : "@Test\r\nvoid testObjectBuild() {\r\n    Object obj = null;\r\n    assertEquals(17 * 37, new HashCodeBuilder(17, 37).append(obj).build().intValue());\r\n    obj = new Object();\r\n    assertEquals(17 * 37 + obj.hashCode(), new HashCodeBuilder(17, 37).append(obj).build().intValue());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\builder\\HashCodeBuilderTest.java",
  "methodName" : "testReflectionHashCode",
  "sourceCode" : "@Test\r\nvoid testReflectionHashCode() {\r\n    assertEquals(17 * 37, HashCodeBuilder.reflectionHashCode(new TestObject(0)));\r\n    assertEquals(17 * 37 + 123456, HashCodeBuilder.reflectionHashCode(new TestObject(123456)));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\builder\\HashCodeBuilderTest.java",
  "methodName" : "testReflectionHashCodeEx1",
  "sourceCode" : "@Test\r\nvoid testReflectionHashCodeEx1() {\r\n    assertIllegalArgumentException(() -> HashCodeBuilder.reflectionHashCode(0, 0, new TestObject(0), true));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\builder\\HashCodeBuilderTest.java",
  "methodName" : "testReflectionHashCodeEx2",
  "sourceCode" : "@Test\r\nvoid testReflectionHashCodeEx2() {\r\n    assertIllegalArgumentException(() -> HashCodeBuilder.reflectionHashCode(2, 2, new TestObject(0), true));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\builder\\HashCodeBuilderTest.java",
  "methodName" : "testReflectionHashCodeEx3",
  "sourceCode" : "@Test\r\nvoid testReflectionHashCodeEx3() {\r\n    assertNullPointerException(() -> HashCodeBuilder.reflectionHashCode(13, 19, null, true));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\builder\\HashCodeBuilderTest.java",
  "methodName" : "testReflectionHashCodeExcludeFields",
  "sourceCode" : "@Test\r\nvoid testReflectionHashCodeExcludeFields() {\r\n    final TestObjectWithMultipleFields x = new TestObjectWithMultipleFields(1, 2, 3);\r\n    assertEquals(((17 * 37 + 1) * 37 + 3) * 37 + 2, HashCodeBuilder.reflectionHashCode(x));\r\n    assertEquals(((17 * 37 + 1) * 37 + 3) * 37 + 2, HashCodeBuilder.reflectionHashCode(x, (String[]) null));\r\n    assertEquals(((17 * 37 + 1) * 37 + 3) * 37 + 2, HashCodeBuilder.reflectionHashCode(x));\r\n    assertEquals(((17 * 37 + 1) * 37 + 3) * 37 + 2, HashCodeBuilder.reflectionHashCode(x, \"xxx\"));\r\n    assertEquals((17 * 37 + 1) * 37 + 3, HashCodeBuilder.reflectionHashCode(x, \"two\"));\r\n    assertEquals((17 * 37 + 1) * 37 + 2, HashCodeBuilder.reflectionHashCode(x, \"three\"));\r\n    assertEquals(17 * 37 + 1, HashCodeBuilder.reflectionHashCode(x, \"two\", \"three\"));\r\n    assertEquals(17, HashCodeBuilder.reflectionHashCode(x, \"one\", \"two\", \"three\"));\r\n    assertEquals(17, HashCodeBuilder.reflectionHashCode(x, \"one\", \"two\", \"three\", \"xxx\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\builder\\HashCodeBuilderTest.java",
  "methodName" : "testReflectionHierarchyHashCode",
  "sourceCode" : "@Test\r\nvoid testReflectionHierarchyHashCode() {\r\n    assertEquals(17 * 37 * 37, HashCodeBuilder.reflectionHashCode(new TestSubObject(0, 0, 0)));\r\n    assertEquals(17 * 37 * 37 * 37, HashCodeBuilder.reflectionHashCode(new TestSubObject(0, 0, 0), true));\r\n    assertEquals((17 * 37 + 7890) * 37 + 123456, HashCodeBuilder.reflectionHashCode(new TestSubObject(123456, 7890, 0)));\r\n    assertEquals(((17 * 37 + 7890) * 37 + 0) * 37 + 123456, HashCodeBuilder.reflectionHashCode(new TestSubObject(123456, 7890, 0), true));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\builder\\HashCodeBuilderTest.java",
  "methodName" : "testReflectionHierarchyHashCodeEx1",
  "sourceCode" : "@Test\r\nvoid testReflectionHierarchyHashCodeEx1() {\r\n    assertIllegalArgumentException(() -> HashCodeBuilder.reflectionHashCode(0, 0, new TestSubObject(0, 0, 0), true));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\builder\\HashCodeBuilderTest.java",
  "methodName" : "testReflectionHierarchyHashCodeEx2",
  "sourceCode" : "@Test\r\nvoid testReflectionHierarchyHashCodeEx2() {\r\n    assertIllegalArgumentException(() -> HashCodeBuilder.reflectionHashCode(2, 2, new TestSubObject(0, 0, 0), true));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\builder\\HashCodeBuilderTest.java",
  "methodName" : "testReflectionObjectCycle",
  "sourceCode" : "/**\r\n * Test Objects pointing to each other.\r\n */\r\n@Test\r\nvoid testReflectionObjectCycle() {\r\n    final ReflectionTestCycleA a = new ReflectionTestCycleA();\r\n    final ReflectionTestCycleB b = new ReflectionTestCycleB();\r\n    a.b = b;\r\n    b.a = a;\r\n    // Used to caused:\r\n    // java.lang.StackOverflowError\r\n    // at java.lang.ClassLoader.getCallerClassLoader(Native Method)\r\n    // at java.lang.Class.getDeclaredFields(Class.java:992)\r\n    // at org.apache.commons.lang.builder.HashCodeBuilder.reflectionAppend(HashCodeBuilder.java:373)\r\n    // at org.apache.commons.lang.builder.HashCodeBuilder.reflectionHashCode(HashCodeBuilder.java:349)\r\n    // at org.apache.commons.lang.builder.HashCodeBuilder.reflectionHashCode(HashCodeBuilder.java:155)\r\n    // at\r\n    // org.apache.commons.lang.builder.HashCodeBuilderTest$ReflectionTestCycleB.hashCode(HashCodeBuilderTest.java:53)\r\n    // at org.apache.commons.lang.builder.HashCodeBuilder.append(HashCodeBuilder.java:422)\r\n    // at org.apache.commons.lang.builder.HashCodeBuilder.reflectionAppend(HashCodeBuilder.java:383)\r\n    // at org.apache.commons.lang.builder.HashCodeBuilder.reflectionHashCode(HashCodeBuilder.java:349)\r\n    // at org.apache.commons.lang.builder.HashCodeBuilder.reflectionHashCode(HashCodeBuilder.java:155)\r\n    // at\r\n    // org.apache.commons.lang.builder.HashCodeBuilderTest$ReflectionTestCycleA.hashCode(HashCodeBuilderTest.java:42)\r\n    // at org.apache.commons.lang.builder.HashCodeBuilder.append(HashCodeBuilder.java:422)\r\n    a.hashCode();\r\n    assertTrue(HashCodeBuilder.getRegistry().isEmpty());\r\n    b.hashCode();\r\n    assertTrue(HashCodeBuilder.getRegistry().isEmpty());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\builder\\HashCodeBuilderTest.java",
  "methodName" : "testShort",
  "sourceCode" : "@Test\r\nvoid testShort() {\r\n    assertEquals(17 * 37, new HashCodeBuilder(17, 37).append((short) 0).toHashCode());\r\n    assertEquals(17 * 37 + 12345, new HashCodeBuilder(17, 37).append((short) 12345).toHashCode());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\builder\\HashCodeBuilderTest.java",
  "methodName" : "testShortArray",
  "sourceCode" : "@Test\r\nvoid testShortArray() {\r\n    assertEquals(17 * 37, new HashCodeBuilder(17, 37).append((short[]) null).toHashCode());\r\n    final short[] obj = new short[2];\r\n    assertEquals(17 * 37 * 37, new HashCodeBuilder(17, 37).append(obj).toHashCode());\r\n    obj[0] = (short) 5;\r\n    assertEquals((17 * 37 + 5) * 37, new HashCodeBuilder(17, 37).append(obj).toHashCode());\r\n    obj[1] = (short) 6;\r\n    assertEquals((17 * 37 + 5) * 37 + 6, new HashCodeBuilder(17, 37).append(obj).toHashCode());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\builder\\HashCodeBuilderTest.java",
  "methodName" : "testShortArrayAsObject",
  "sourceCode" : "@Test\r\nvoid testShortArrayAsObject() {\r\n    final short[] obj = new short[2];\r\n    assertEquals(17 * 37 * 37, new HashCodeBuilder(17, 37).append((Object) obj).toHashCode());\r\n    obj[0] = (short) 5;\r\n    assertEquals((17 * 37 + 5) * 37, new HashCodeBuilder(17, 37).append((Object) obj).toHashCode());\r\n    obj[1] = (short) 6;\r\n    assertEquals((17 * 37 + 5) * 37 + 6, new HashCodeBuilder(17, 37).append((Object) obj).toHashCode());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\builder\\HashCodeBuilderTest.java",
  "methodName" : "testSuper",
  "sourceCode" : "@Test\r\nvoid testSuper() {\r\n    final Object obj = new Object();\r\n    assertEquals(17 * 37 + 19 * 41 + obj.hashCode(), new HashCodeBuilder(17, 37).appendSuper(new HashCodeBuilder(19, 41).append(obj).toHashCode()).toHashCode());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\builder\\HashCodeBuilderTest.java",
  "methodName" : "testToHashCodeEqualsHashCode",
  "sourceCode" : "/**\r\n * Ensures LANG-520 remains true\r\n */\r\n@Test\r\nvoid testToHashCodeEqualsHashCode() {\r\n    final HashCodeBuilder hcb = new HashCodeBuilder(17, 37).append(new Object()).append('a');\r\n    assertEquals(hcb.toHashCode(), hcb.hashCode(), \"hashCode() is no longer returning the same value as toHashCode() - see LANG-520\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\builder\\HashCodeBuilderTest.java",
  "methodName" : "testToHashCodeExclude",
  "sourceCode" : "@Test\r\nvoid testToHashCodeExclude() {\r\n    final TestObjectHashCodeExclude one = new TestObjectHashCodeExclude(1, 2);\r\n    final TestObjectHashCodeExclude2 two = new TestObjectHashCodeExclude2(1, 2);\r\n    assertEquals(17 * 37 + 2, HashCodeBuilder.reflectionHashCode(one));\r\n    assertEquals(17, HashCodeBuilder.reflectionHashCode(two));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\builder\\IDKeyTest.java",
  "methodName" : "testEquals",
  "sourceCode" : "@Test\r\nvoid testEquals() {\r\n    assertEquals(new IDKey(\"1\"), new IDKey(\"1\"));\r\n    assertNotEquals(new IDKey(\"1\"), new IDKey(\"2\"));\r\n    assertNotEquals(new IDKey(\"1\"), \"2\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\builder\\JsonToStringStyleTest.java",
  "methodName" : "testAppendSuper",
  "sourceCode" : "@Test\r\nvoid testAppendSuper() {\r\n    assertEquals(\"{}\", new ToStringBuilder(base).appendSuper(\"Integer@8888[\" + System.lineSeparator() + \"]\").toString());\r\n    assertEquals(\"{}\", new ToStringBuilder(base).appendSuper(\"Integer@8888[\" + System.lineSeparator() + \"  null\" + System.lineSeparator() + \"]\").toString());\r\n    assertEquals(\"{\\\"a\\\":\\\"hello\\\"}\", new ToStringBuilder(base).appendSuper(\"Integer@8888[\" + System.lineSeparator() + \"]\").append(\"a\", \"hello\").toString());\r\n    assertEquals(\"{\\\"a\\\":\\\"hello\\\"}\", new ToStringBuilder(base).appendSuper(\"Integer@8888[\" + System.lineSeparator() + \"  null\" + System.lineSeparator() + \"]\").append(\"a\", \"hello\").toString());\r\n    assertEquals(\"{\\\"a\\\":\\\"hello\\\"}\", new ToStringBuilder(base).appendSuper(null).append(\"a\", \"hello\").toString());\r\n    assertEquals(\"{\\\"a\\\":\\\"hello\\\",\\\"b\\\":\\\"world\\\"}\", new ToStringBuilder(base).appendSuper(\"{\\\"a\\\":\\\"hello\\\"}\").append(\"b\", \"world\").toString());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\builder\\JsonToStringStyleTest.java",
  "methodName" : "testArray",
  "sourceCode" : "@Test\r\nvoid testArray() {\r\n    final Person p = new Person();\r\n    p.name = \"Jane Doe\";\r\n    p.age = 25;\r\n    p.smoker = true;\r\n    assertEquals(\"{\\\"name\\\":\\\"Jane Doe\\\",\\\"age\\\":25,\\\"smoker\\\":true,\\\"groups\\\":['admin', 'manager', 'user']}\", new ToStringBuilder(p).append(\"name\", p.name).append(\"age\", p.age).append(\"smoker\", p.smoker).append(\"groups\", new Object() {\r\n\r\n        @Override\r\n        public String toString() {\r\n            return \"['admin', 'manager', 'user']\";\r\n        }\r\n    }).toString());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\builder\\JsonToStringStyleTest.java",
  "methodName" : "testArrayEnum",
  "sourceCode" : "@Test\r\nvoid testArrayEnum() {\r\n    final Teacher teacher = new Teacher();\r\n    final Hobby[] hobbies = new Hobby[3];\r\n    hobbies[0] = Hobby.BOOK;\r\n    hobbies[1] = Hobby.SPORT;\r\n    hobbies[2] = Hobby.MUSIC;\r\n    teacher.setHobbies(hobbies);\r\n    assertEquals(teacher.toString(), \"{\\\"hobbies\\\":[\\\"BOOK\\\",\\\"SPORT\\\",\\\"MUSIC\\\"]}\");\r\n    teacher.setHobbies(new Hobby[0]);\r\n    assertEquals(teacher.toString(), \"{\\\"hobbies\\\":[]}\");\r\n    teacher.setHobbies(null);\r\n    assertEquals(teacher.toString(), \"{\\\"hobbies\\\":null}\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\builder\\JsonToStringStyleTest.java",
  "methodName" : "testBlank",
  "sourceCode" : "@Test\r\nvoid testBlank() {\r\n    assertEquals(\"{}\", new ToStringBuilder(base).toString());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\builder\\JsonToStringStyleTest.java",
  "methodName" : "testBooleanArray",
  "sourceCode" : "@Test\r\nvoid testBooleanArray() {\r\n    final boolean[] array = { true, false };\r\n    final ToStringBuilder toStringBuilder = new ToStringBuilder(base);\r\n    assertThrows(UnsupportedOperationException.class, () -> toStringBuilder.append(array).toString());\r\n    assertEquals(\"{\\\"booleanArray\\\":[true,false]}\", toStringBuilder.append(\"booleanArray\", array).toString());\r\n    assertThrows(UnsupportedOperationException.class, () -> toStringBuilder.append((Object) array).toString());\r\n    assertThrows(UnsupportedOperationException.class, () -> toStringBuilder.append((long[]) null).toString());\r\n    assertThrows(UnsupportedOperationException.class, () -> toStringBuilder.append((Object) array).toString());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\builder\\JsonToStringStyleTest.java",
  "methodName" : "testByteArray",
  "sourceCode" : "@Test\r\nvoid testByteArray() {\r\n    final byte[] array = { 1, 2, -3, 4 };\r\n    final ToStringBuilder toStringBuilder = new ToStringBuilder(base);\r\n    assertThrows(UnsupportedOperationException.class, () -> toStringBuilder.append(array).toString());\r\n    assertEquals(\"{\\\"byteArray\\\":[1,2,-3,4]}\", toStringBuilder.append(\"byteArray\", array).toString());\r\n    assertThrows(UnsupportedOperationException.class, () -> toStringBuilder.append((Object) array).toString());\r\n    assertThrows(UnsupportedOperationException.class, () -> toStringBuilder.append((long[]) null).toString());\r\n    assertThrows(UnsupportedOperationException.class, () -> toStringBuilder.append((Object) array).toString());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\builder\\JsonToStringStyleTest.java",
  "methodName" : "testChar",
  "sourceCode" : "@Test\r\nvoid testChar() {\r\n    assertThrows(UnsupportedOperationException.class, () -> new ToStringBuilder(base).append('A').toString());\r\n    assertEquals(\"{\\\"a\\\":\\\"A\\\"}\", new ToStringBuilder(base).append(\"a\", 'A').toString());\r\n    assertEquals(\"{\\\"a\\\":\\\"A\\\",\\\"b\\\":\\\"B\\\"}\", new ToStringBuilder(base).append(\"a\", 'A').append(\"b\", 'B').toString());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\builder\\JsonToStringStyleTest.java",
  "methodName" : "testCharArray",
  "sourceCode" : "@Test\r\nvoid testCharArray() {\r\n    final char[] array = { '1', '2', '3', '4' };\r\n    final ToStringBuilder toStringBuilder = new ToStringBuilder(base);\r\n    assertThrows(UnsupportedOperationException.class, () -> toStringBuilder.append(array).toString());\r\n    assertEquals(\"{\\\"charArray\\\":[\\\"1\\\",\\\"2\\\",\\\"3\\\",\\\"4\\\"]}\", toStringBuilder.append(\"charArray\", array).toString());\r\n    assertThrows(UnsupportedOperationException.class, () -> toStringBuilder.append((Object) array).toString());\r\n    assertThrows(UnsupportedOperationException.class, () -> toStringBuilder.append((long[]) null).toString());\r\n    assertThrows(UnsupportedOperationException.class, () -> toStringBuilder.append((Object) array).toString());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\builder\\JsonToStringStyleTest.java",
  "methodName" : "testCombineListAndEnum",
  "sourceCode" : "@Test\r\nvoid testCombineListAndEnum() {\r\n    final Teacher teacher = new Teacher();\r\n    final Hobby[] teacherHobbies = new Hobby[3];\r\n    teacherHobbies[0] = Hobby.BOOK;\r\n    teacherHobbies[1] = Hobby.SPORT;\r\n    teacherHobbies[2] = Hobby.MUSIC;\r\n    teacher.setHobbies(teacherHobbies);\r\n    final Student john = new Student();\r\n    john.setHobbies(Arrays.asList(Hobby.BOOK, Hobby.MUSIC));\r\n    final Student alice = new Student();\r\n    alice.setHobbies(new ArrayList<>());\r\n    final Student bob = new Student();\r\n    bob.setHobbies(Collections.singletonList(Hobby.BOOK));\r\n    final ArrayList<Student> students = new ArrayList<>();\r\n    students.add(john);\r\n    students.add(alice);\r\n    students.add(bob);\r\n    final AcademyClass academyClass = new AcademyClass();\r\n    academyClass.setStudents(students);\r\n    academyClass.setTeacher(teacher);\r\n    assertEquals(academyClass.toString(), \"{\\\"students\\\":[{\\\"hobbies\\\":[\\\"BOOK\\\",\\\"MUSIC\\\"]},{\\\"hobbies\\\":[]},{\\\"hobbies\\\":[\\\"BOOK\\\"]}],\\\"teacher\\\":{\\\"hobbies\\\":[\\\"BOOK\\\",\\\"SPORT\\\",\\\"MUSIC\\\"]}}\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\builder\\JsonToStringStyleTest.java",
  "methodName" : "testDate",
  "sourceCode" : "@Test\r\nvoid testDate() {\r\n    final Date now = new Date();\r\n    final Date afterNow = new Date(System.currentTimeMillis() + 1);\r\n    assertThrows(UnsupportedOperationException.class, () -> new ToStringBuilder(base).append(now).toString());\r\n    assertEquals(\"{\\\"now\\\":\\\"\" + now + \"\\\"}\", new ToStringBuilder(base).append(\"now\", now).toString());\r\n    assertEquals(\"{\\\"now\\\":\\\"\" + now + \"\\\",\\\"after\\\":\\\"\" + afterNow + \"\\\"}\", new ToStringBuilder(base).append(\"now\", now).append(\"after\", afterNow).toString());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\builder\\JsonToStringStyleTest.java",
  "methodName" : "testDoubleArray",
  "sourceCode" : "@Test\r\nvoid testDoubleArray() {\r\n    final double[] array = { 1, 2, -3, 4 };\r\n    final ToStringBuilder toStringBuilder = new ToStringBuilder(base);\r\n    assertThrows(UnsupportedOperationException.class, () -> toStringBuilder.append(array).toString());\r\n    assertEquals(\"{\\\"doubleArray\\\":[1.0,2.0,-3.0,4.0]}\", toStringBuilder.append(\"doubleArray\", array).toString());\r\n    assertThrows(UnsupportedOperationException.class, () -> toStringBuilder.append((Object) array).toString());\r\n    assertThrows(UnsupportedOperationException.class, () -> toStringBuilder.append((long[]) null).toString());\r\n    assertThrows(UnsupportedOperationException.class, () -> toStringBuilder.append((Object) array).toString());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\builder\\JsonToStringStyleTest.java",
  "methodName" : "testFloatArray",
  "sourceCode" : "@Test\r\nvoid testFloatArray() {\r\n    final float[] array = { 1, 2, -3, 4 };\r\n    final ToStringBuilder toStringBuilder = new ToStringBuilder(base);\r\n    assertThrows(UnsupportedOperationException.class, () -> toStringBuilder.append(array).toString());\r\n    assertEquals(\"{\\\"floatArray\\\":[1.0,2.0,-3.0,4.0]}\", toStringBuilder.append(\"floatArray\", array).toString());\r\n    assertThrows(UnsupportedOperationException.class, () -> toStringBuilder.append((Object) array).toString());\r\n    assertThrows(UnsupportedOperationException.class, () -> toStringBuilder.append((long[]) null).toString());\r\n    assertThrows(UnsupportedOperationException.class, () -> toStringBuilder.append((Object) array).toString());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\builder\\JsonToStringStyleTest.java",
  "methodName" : "testIntArray",
  "sourceCode" : "@Test\r\nvoid testIntArray() {\r\n    final int[] array = { 1, 2, -3, 4 };\r\n    final ToStringBuilder toStringBuilder = new ToStringBuilder(base);\r\n    assertThrows(UnsupportedOperationException.class, () -> toStringBuilder.append(array).toString());\r\n    assertEquals(\"{\\\"intArray\\\":[1,2,-3,4]}\", toStringBuilder.append(\"intArray\", array).toString());\r\n    assertThrows(UnsupportedOperationException.class, () -> toStringBuilder.append((Object) array).toString());\r\n    assertThrows(UnsupportedOperationException.class, () -> toStringBuilder.append((long[]) null).toString());\r\n    assertThrows(UnsupportedOperationException.class, () -> toStringBuilder.append((Object) array).toString());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\builder\\JsonToStringStyleTest.java",
  "methodName" : "testLANG1395",
  "sourceCode" : "@Test\r\nvoid testLANG1395() {\r\n    assertEquals(\"{\\\"name\\\":\\\"value\\\"}\", new ToStringBuilder(base).append(\"name\", \"value\").toString());\r\n    assertEquals(\"{\\\"name\\\":\\\"\\\"}\", new ToStringBuilder(base).append(\"name\", \"\").toString());\r\n    assertEquals(\"{\\\"name\\\":\\\"\\\\\\\"\\\"}\", new ToStringBuilder(base).append(\"name\", '\"').toString());\r\n    assertEquals(\"{\\\"name\\\":\\\"\\\\\\\\\\\"}\", new ToStringBuilder(base).append(\"name\", '\\\\').toString());\r\n    assertEquals(\"{\\\"name\\\":\\\"Let's \\\\\\\"quote\\\\\\\" this\\\"}\", new ToStringBuilder(base).append(\"name\", \"Let's \\\"quote\\\" this\").toString());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\builder\\JsonToStringStyleTest.java",
  "methodName" : "testLANG1396",
  "sourceCode" : "@Test\r\nvoid testLANG1396() {\r\n    assertEquals(\"{\\\"Let's \\\\\\\"quote\\\\\\\" this\\\":\\\"value\\\"}\", new ToStringBuilder(base).append(\"Let's \\\"quote\\\" this\", \"value\").toString());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\builder\\JsonToStringStyleTest.java",
  "methodName" : "testList",
  "sourceCode" : "@Test\r\nvoid testList() {\r\n    final Student student = new Student();\r\n    final ArrayList<Hobby> objects = new ArrayList<>();\r\n    objects.add(Hobby.BOOK);\r\n    objects.add(Hobby.SPORT);\r\n    objects.add(Hobby.MUSIC);\r\n    student.setHobbies(objects);\r\n    assertEquals(student.toString(), \"{\\\"hobbies\\\":[\\\"BOOK\\\",\\\"SPORT\\\",\\\"MUSIC\\\"]}\");\r\n    student.setHobbies(new ArrayList<>());\r\n    assertEquals(student.toString(), \"{\\\"hobbies\\\":[]}\");\r\n    student.setHobbies(null);\r\n    assertEquals(student.toString(), \"{\\\"hobbies\\\":null}\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\builder\\JsonToStringStyleTest.java",
  "methodName" : "testLong",
  "sourceCode" : "@Test\r\nvoid testLong() {\r\n    assertThrows(UnsupportedOperationException.class, () -> new ToStringBuilder(base).append(3L).toString());\r\n    assertEquals(\"{\\\"a\\\":3}\", new ToStringBuilder(base).append(\"a\", 3L).toString());\r\n    assertEquals(\"{\\\"a\\\":3,\\\"b\\\":4}\", new ToStringBuilder(base).append(\"a\", 3L).append(\"b\", 4L).toString());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\builder\\JsonToStringStyleTest.java",
  "methodName" : "testLongArray",
  "sourceCode" : "@Test\r\nvoid testLongArray() {\r\n    final long[] array = { 1, 2, -3, 4 };\r\n    final ToStringBuilder toStringBuilder = new ToStringBuilder(base);\r\n    assertThrows(UnsupportedOperationException.class, () -> toStringBuilder.append(array).toString());\r\n    assertEquals(\"{\\\"longArray\\\":[1,2,-3,4]}\", toStringBuilder.append(\"longArray\", array).toString());\r\n    assertThrows(UnsupportedOperationException.class, () -> toStringBuilder.append((Object) array).toString());\r\n    assertThrows(UnsupportedOperationException.class, () -> toStringBuilder.append((long[]) null).toString());\r\n    assertThrows(UnsupportedOperationException.class, () -> toStringBuilder.append((Object) array).toString());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\builder\\JsonToStringStyleTest.java",
  "methodName" : "testLongArrayArray",
  "sourceCode" : "@Test\r\nvoid testLongArrayArray() {\r\n    final long[][] array = { { 1, 2 }, null, { 5 } };\r\n    final ToStringBuilder toStringBuilder = new ToStringBuilder(base);\r\n    assertThrows(UnsupportedOperationException.class, () -> toStringBuilder.append(array).toString());\r\n    assertThrows(UnsupportedOperationException.class, () -> toStringBuilder.append((Object) array).toString());\r\n    assertThrows(UnsupportedOperationException.class, () -> toStringBuilder.append((long[][]) null).toString());\r\n    assertThrows(UnsupportedOperationException.class, () -> toStringBuilder.append((Object) array).toString());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\builder\\JsonToStringStyleTest.java",
  "methodName" : "testMapSkipNullKey",
  "sourceCode" : "@Test\r\nvoid testMapSkipNullKey() {\r\n    final Map<String, Object> map = new LinkedHashMap<>();\r\n    map.put(\"k1\", \"v1\");\r\n    map.put(null, \"v2\");\r\n    assertEquals(\"{\\\"map\\\":{\\\"k1\\\":\\\"v1\\\"}}\", new ToStringBuilder(base).append(\"map\", map).toString());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\builder\\JsonToStringStyleTest.java",
  "methodName" : "testNestedMaps",
  "sourceCode" : "@Test\r\nvoid testNestedMaps() {\r\n    final Map<String, Object> innerMap = new LinkedHashMap<>();\r\n    innerMap.put(\"k2.1\", \"v2.1\");\r\n    innerMap.put(\"k2.2\", \"v2.2\");\r\n    final Map<String, Object> baseMap = new LinkedHashMap<>();\r\n    baseMap.put(\"k1\", \"v1\");\r\n    baseMap.put(\"k2\", innerMap);\r\n    final InnerMapObject object = new InnerMapObject() {\r\n\r\n        @Override\r\n        public String toString() {\r\n            return new ToStringBuilder(this).append(\"pid\", this.pid).append(\"map\", this.map).toString();\r\n        }\r\n    };\r\n    object.pid = \"dummy-text\";\r\n    object.map = baseMap;\r\n    assertEquals(\"{\\\"object\\\":{\\\"pid\\\":\\\"dummy-text\\\",\\\"map\\\":{\\\"k1\\\":\\\"v1\\\",\\\"k2\\\":{\\\"k2.1\\\":\\\"v2.1\\\",\\\"k2.2\\\":\\\"v2.2\\\"}}}}\", new ToStringBuilder(base).append(\"object\", object).toString());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\builder\\JsonToStringStyleTest.java",
  "methodName" : "testNestingPerson",
  "sourceCode" : "@Test\r\nvoid testNestingPerson() {\r\n    final Person p = new Person() {\r\n\r\n        @Override\r\n        public String toString() {\r\n            return new ToStringBuilder(this).append(\"name\", this.name).append(\"age\", this.age).append(\"smoker\", this.smoker).toString();\r\n        }\r\n    };\r\n    p.name = \"Jane Doe\";\r\n    p.age = 25;\r\n    p.smoker = true;\r\n    final NestingPerson nestP = new NestingPerson();\r\n    nestP.pid = \"#1@Jane\";\r\n    nestP.person = p;\r\n    assertEquals(\"{\\\"pid\\\":\\\"#1@Jane\\\",\\\"person\\\":{\\\"name\\\":\\\"Jane Doe\\\",\\\"age\\\":25,\\\"smoker\\\":true}}\", new ToStringBuilder(nestP).append(\"pid\", nestP.pid).append(\"person\", nestP.person).toString());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\builder\\JsonToStringStyleTest.java",
  "methodName" : "testNull",
  "sourceCode" : "@Test\r\nvoid testNull() {\r\n    assertEquals(\"null\", new ToStringBuilder(null).toString());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\builder\\JsonToStringStyleTest.java",
  "methodName" : "testObject",
  "sourceCode" : "@Test\r\nvoid testObject() {\r\n    final Integer i3 = Integer.valueOf(3);\r\n    final Integer i4 = Integer.valueOf(4);\r\n    assertThrows(UnsupportedOperationException.class, () -> new ToStringBuilder(base).append((Object) null).toString());\r\n    assertThrows(UnsupportedOperationException.class, () -> new ToStringBuilder(base).append(i3).toString());\r\n    assertEquals(\"{\\\"a\\\":null}\", new ToStringBuilder(base).append(\"a\", (Object) null).toString());\r\n    assertEquals(\"{\\\"a\\\":3}\", new ToStringBuilder(base).append(\"a\", i3).toString());\r\n    assertEquals(\"{\\\"a\\\":3,\\\"b\\\":4}\", new ToStringBuilder(base).append(\"a\", i3).append(\"b\", i4).toString());\r\n    assertThrows(UnsupportedOperationException.class, () -> new ToStringBuilder(base).append(\"a\", i3, false).toString());\r\n    assertThrows(UnsupportedOperationException.class, () -> new ToStringBuilder(base).append(\"a\", new ArrayList<>(), false).toString());\r\n    assertEquals(\"{\\\"a\\\":[]}\", new ToStringBuilder(base).append(\"a\", new ArrayList<>(), true).toString());\r\n    assertThrows(UnsupportedOperationException.class, () -> new ToStringBuilder(base).append(\"a\", new HashMap<>(), false).toString());\r\n    assertEquals(\"{\\\"a\\\":{}}\", new ToStringBuilder(base).append(\"a\", new HashMap<>(), true).toString());\r\n    assertThrows(UnsupportedOperationException.class, () -> new ToStringBuilder(base).append(\"a\", (Object) new String[0], false).toString());\r\n    assertEquals(\"{\\\"a\\\":[]}\", new ToStringBuilder(base).append(\"a\", (Object) new String[0], true).toString());\r\n    assertThrows(UnsupportedOperationException.class, () -> new ToStringBuilder(base).append(\"a\", (Object) new int[] { 1, 2, 3 }, false).toString());\r\n    assertEquals(\"{\\\"a\\\":[1,2,3]}\", new ToStringBuilder(base).append(\"a\", (Object) new int[] { 1, 2, 3 }, true).toString());\r\n    assertThrows(UnsupportedOperationException.class, () -> new ToStringBuilder(base).append(\"a\", (Object) new String[] { \"v\", \"x\", \"y\", \"z\" }, false).toString());\r\n    assertEquals(\"{\\\"a\\\":[\\\"v\\\",\\\"x\\\",\\\"y\\\",\\\"z\\\"]}\", new ToStringBuilder(base).append(\"a\", (Object) new String[] { \"v\", \"x\", \"y\", \"z\" }, true).toString());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\builder\\JsonToStringStyleTest.java",
  "methodName" : "testObjectArray",
  "sourceCode" : "@Test\r\nvoid testObjectArray() {\r\n    final Object[] array = { null, base, new int[] { 3, 6 } };\r\n    final ToStringBuilder toStringBuilder = new ToStringBuilder(base);\r\n    assertThrows(UnsupportedOperationException.class, () -> toStringBuilder.append(array).toString());\r\n    assertEquals(\"{\\\"objectArray\\\":[null,5,[3,6]]}\", toStringBuilder.append(\"objectArray\", array).toString());\r\n    assertThrows(UnsupportedOperationException.class, () -> toStringBuilder.append((Object) array).toString());\r\n    assertThrows(UnsupportedOperationException.class, () -> toStringBuilder.append((Object[]) null).toString());\r\n    assertThrows(UnsupportedOperationException.class, () -> toStringBuilder.append((Object) array).toString());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\builder\\JsonToStringStyleTest.java",
  "methodName" : "testObjectWithInnerMap",
  "sourceCode" : "@Test\r\nvoid testObjectWithInnerMap() {\r\n    final Map<String, Object> map = new LinkedHashMap<>();\r\n    map.put(\"k1\", \"value1\");\r\n    map.put(\"k2\", 2);\r\n    final InnerMapObject object = new InnerMapObject() {\r\n\r\n        @Override\r\n        public String toString() {\r\n            return new ToStringBuilder(this).append(\"pid\", this.pid).append(\"map\", this.map).toString();\r\n        }\r\n    };\r\n    object.pid = \"dummy-text\";\r\n    object.map = map;\r\n    assertEquals(\"{\\\"object\\\":{\\\"pid\\\":\\\"dummy-text\\\",\\\"map\\\":{\\\"k1\\\":\\\"value1\\\",\\\"k2\\\":2}}}\", new ToStringBuilder(base).append(\"object\", object).toString());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\builder\\JsonToStringStyleTest.java",
  "methodName" : "testPerson",
  "sourceCode" : "@Test\r\nvoid testPerson() {\r\n    final Person p = new Person();\r\n    p.name = \"Jane Doe\";\r\n    p.age = 25;\r\n    p.smoker = true;\r\n    assertEquals(\"{\\\"name\\\":\\\"Jane Doe\\\",\\\"age\\\":25,\\\"smoker\\\":true}\", new ToStringBuilder(p).append(\"name\", p.name).append(\"age\", p.age).append(\"smoker\", p.smoker).toString());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\builder\\JsonToStringStyleTest.java",
  "methodName" : "testRootMap",
  "sourceCode" : "@Test\r\nvoid testRootMap() {\r\n    final Map<String, Object> map = new LinkedHashMap<>();\r\n    map.put(\"k1\", \"v1\");\r\n    map.put(\"k2\", 2);\r\n    assertEquals(\"{\\\"map\\\":{\\\"k1\\\":\\\"v1\\\",\\\"k2\\\":2}}\", new ToStringBuilder(base).append(\"map\", map).toString());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\builder\\JsonToStringStyleTest.java",
  "methodName" : "testShortArray",
  "sourceCode" : "@Test\r\nvoid testShortArray() {\r\n    final short[] array = { 1, 2, -3, 4 };\r\n    final ToStringBuilder toStringBuilder = new ToStringBuilder(base);\r\n    assertThrows(UnsupportedOperationException.class, () -> toStringBuilder.append(array).toString());\r\n    assertEquals(\"{\\\"shortArray\\\":[1,2,-3,4]}\", toStringBuilder.append(\"shortArray\", array).toString());\r\n    assertThrows(UnsupportedOperationException.class, () -> toStringBuilder.append((Object) array).toString());\r\n    assertThrows(UnsupportedOperationException.class, () -> toStringBuilder.append((long[]) null).toString());\r\n    assertThrows(UnsupportedOperationException.class, () -> toStringBuilder.append((Object) array).toString());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\builder\\MultilineRecursiveToStringStyleTest.java",
  "methodName" : "boolArray",
  "sourceCode" : "@Test\r\npublic void boolArray() {\r\n    final WithArrays wa = new WithArrays();\r\n    wa.boolArray = new boolean[] { true, false, true };\r\n    final String exp = getExpectedToString(wa, WithArraysTestType.BOOLEAN, \"{\" + LS + \"    true,\" + LS + \"    false,\" + LS + \"    true\" + LS + \"  }\");\r\n    assertEquals(exp, toString(wa));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\builder\\MultilineRecursiveToStringStyleTest.java",
  "methodName" : "byteArray",
  "sourceCode" : "@Test\r\npublic void byteArray() {\r\n    final WithArrays wa = new WithArrays();\r\n    wa.byteArray = new byte[] { 1, 2 };\r\n    final String exp = getExpectedToString(wa, WithArraysTestType.BYTE, \"{\" + LS + \"    1,\" + LS + \"    2\" + LS + \"  }\");\r\n    assertEquals(exp, toString(wa));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\builder\\MultilineRecursiveToStringStyleTest.java",
  "methodName" : "charArray",
  "sourceCode" : "@Test\r\npublic void charArray() {\r\n    final WithArrays wa = new WithArrays();\r\n    wa.charArray = new char[] { 'a', 'A' };\r\n    final String exp = getExpectedToString(wa, WithArraysTestType.CHAR, \"{\" + LS + \"    a,\" + LS + \"    A\" + LS + \"  }\");\r\n    assertEquals(exp, toString(wa));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\builder\\MultilineRecursiveToStringStyleTest.java",
  "methodName" : "doubleArray",
  "sourceCode" : "@Test\r\npublic void doubleArray() {\r\n    final WithArrays wa = new WithArrays();\r\n    wa.doubleArray = new double[] { 1, 2 };\r\n    final String exp = getExpectedToString(wa, WithArraysTestType.DOUBLE, \"{\" + LS + \"    1.0,\" + LS + \"    2.0\" + LS + \"  }\");\r\n    assertEquals(exp, toString(wa));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\builder\\MultilineRecursiveToStringStyleTest.java",
  "methodName" : "floatArray",
  "sourceCode" : "@Test\r\npublic void floatArray() {\r\n    final WithArrays wa = new WithArrays();\r\n    wa.floatArray = new float[] { 1f, 2f };\r\n    final String exp = getExpectedToString(wa, WithArraysTestType.FLOAT, \"{\" + LS + \"    1.0,\" + LS + \"    2.0\" + LS + \"  }\");\r\n    assertEquals(exp, toString(wa));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\builder\\MultilineRecursiveToStringStyleTest.java",
  "methodName" : "intArray",
  "sourceCode" : "@Test\r\npublic void intArray() {\r\n    final WithArrays wa = new WithArrays();\r\n    wa.intArray = new int[] { 1, 2 };\r\n    final String exp = getExpectedToString(wa, WithArraysTestType.INT, \"{\" + LS + \"    1,\" + LS + \"    2\" + LS + \"  }\");\r\n    assertEquals(exp, toString(wa));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\builder\\MultilineRecursiveToStringStyleTest.java",
  "methodName" : "longArray",
  "sourceCode" : "@Test\r\npublic void longArray() {\r\n    final WithArrays wa = new WithArrays();\r\n    wa.longArray = new long[] { 1L, 2L };\r\n    final String exp = getExpectedToString(wa, WithArraysTestType.LONG, \"{\" + LS + \"    1,\" + LS + \"    2\" + LS + \"  }\");\r\n    assertEquals(exp, toString(wa));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\builder\\MultilineRecursiveToStringStyleTest.java",
  "methodName" : "nestedAndArray",
  "sourceCode" : "@Test\r\npublic void nestedAndArray() {\r\n    final Account acc = new Account();\r\n    final Transaction tx1 = new Transaction(\"2014.10.14\", 100);\r\n    final Transaction tx2 = new Transaction(\"2014.10.15\", 50);\r\n    acc.transactions.add(tx1);\r\n    acc.transactions.add(tx2);\r\n    final String expected = getClassPrefix(acc) + \"[\" + LS + \"  owner=<null>,\" + LS + \"  transactions=\" + getClassPrefix(acc.transactions) + \"{\" + LS + \"    \" + getClassPrefix(tx1) + \"[\" + LS + \"      amount=100.0,\" + LS + \"      date=2014.10.14\" + LS + \"    ],\" + LS + \"    \" + getClassPrefix(tx2) + \"[\" + LS + \"      amount=50.0,\" + LS + \"      date=2014.10.15\" + LS + \"    ]\" + LS + \"  }\" + LS + \"]\";\r\n    assertEquals(expected, toString(acc));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\builder\\MultilineRecursiveToStringStyleTest.java",
  "methodName" : "nestedElements",
  "sourceCode" : "@Test\r\npublic void nestedElements() {\r\n    final Customer customer = new Customer(\"Douglas Adams\");\r\n    final Bank bank = new Bank(\"ASF Bank\");\r\n    customer.bank = bank;\r\n    final String exp = getClassPrefix(customer) + \"[\" + LS + \"  accounts=<null>,\" + LS + \"  bank=\" + getClassPrefix(bank) + \"[\" + LS + \"    name=ASF Bank\" + LS + \"  ],\" + LS + \"  name=Douglas Adams\" + LS + \"]\";\r\n    assertEquals(exp, toString(customer));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\builder\\MultilineRecursiveToStringStyleTest.java",
  "methodName" : "noArray",
  "sourceCode" : "@Test\r\npublic void noArray() {\r\n    final WithArrays wa = new WithArrays();\r\n    final String exp = getExpectedToString(wa, WithArraysTestType.NONE, \"\");\r\n    assertEquals(exp, toString(wa));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\builder\\MultilineRecursiveToStringStyleTest.java",
  "methodName" : "shortArray",
  "sourceCode" : "@Test\r\npublic void shortArray() {\r\n    final WithArrays wa = new WithArrays();\r\n    wa.shortArray = new short[] { 1, 2 };\r\n    final String exp = getExpectedToString(wa, WithArraysTestType.SHORT, \"{\" + LS + \"    1,\" + LS + \"    2\" + LS + \"  }\");\r\n    assertEquals(exp, toString(wa));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\builder\\MultilineRecursiveToStringStyleTest.java",
  "methodName" : "simpleObject",
  "sourceCode" : "@Test\r\npublic void simpleObject() {\r\n    final Transaction tx = new Transaction(\"2014.10.15\", 100);\r\n    final String expected = getClassPrefix(tx) + \"[\" + LS + \"  amount=100.0,\" + LS + \"  date=2014.10.15\" + LS + \"]\";\r\n    assertEquals(expected, toString(tx));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\builder\\MultilineRecursiveToStringStyleTest.java",
  "methodName" : "stringArray",
  "sourceCode" : "@Test\r\npublic void stringArray() {\r\n    final WithArrays wa = new WithArrays();\r\n    wa.stringArray = new String[] { \"a\", \"A\" };\r\n    final String exp = getExpectedToString(wa, WithArraysTestType.STRING, \"{\" + LS + \"    a,\" + LS + \"    A\" + LS + \"  }\");\r\n    assertEquals(exp, toString(wa));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\builder\\MultilineRecursiveToStringStyleTest.java",
  "methodName" : "testLANG1319",
  "sourceCode" : "@Test\r\nvoid testLANG1319() {\r\n    final String[] stringArray = { \"1\", \"2\" };\r\n    final String exp = getClassPrefix(stringArray) + \"[\" + LS + \"  {\" + LS + \"    1,\" + LS + \"    2\" + LS + \"  }\" + LS + \"]\";\r\n    assertEquals(exp, toString(stringArray));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\builder\\MultiLineToStringStyleTest.java",
  "methodName" : "testAppendSuper",
  "sourceCode" : "@Test\r\nvoid testAppendSuper() {\r\n    assertEquals(baseStr + \"[\" + System.lineSeparator() + \"]\", new ToStringBuilder(base).appendSuper(\"Integer@8888[\" + System.lineSeparator() + \"]\").toString());\r\n    assertEquals(baseStr + \"[\" + System.lineSeparator() + \"  <null>\" + System.lineSeparator() + \"]\", new ToStringBuilder(base).appendSuper(\"Integer@8888[\" + System.lineSeparator() + \"  <null>\" + System.lineSeparator() + \"]\").toString());\r\n    assertEquals(baseStr + \"[\" + System.lineSeparator() + \"  a=hello\" + System.lineSeparator() + \"]\", new ToStringBuilder(base).appendSuper(\"Integer@8888[\" + System.lineSeparator() + \"]\").append(\"a\", \"hello\").toString());\r\n    assertEquals(baseStr + \"[\" + System.lineSeparator() + \"  <null>\" + System.lineSeparator() + \"  a=hello\" + System.lineSeparator() + \"]\", new ToStringBuilder(base).appendSuper(\"Integer@8888[\" + System.lineSeparator() + \"  <null>\" + System.lineSeparator() + \"]\").append(\"a\", \"hello\").toString());\r\n    assertEquals(baseStr + \"[\" + System.lineSeparator() + \"  a=hello\" + System.lineSeparator() + \"]\", new ToStringBuilder(base).appendSuper(null).append(\"a\", \"hello\").toString());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\builder\\MultiLineToStringStyleTest.java",
  "methodName" : "testArray",
  "sourceCode" : "@Test\r\nvoid testArray() {\r\n    final Integer i3 = Integer.valueOf(3);\r\n    final Integer i4 = Integer.valueOf(4);\r\n    assertEquals(baseStr + \"[\" + System.lineSeparator() + \"  a=<size=0>\" + System.lineSeparator() + \"]\", new ToStringBuilder(base).append(\"a\", (Object) new Integer[0], false).toString());\r\n    assertEquals(baseStr + \"[\" + System.lineSeparator() + \"  a={}\" + System.lineSeparator() + \"]\", new ToStringBuilder(base).append(\"a\", (Object) new Integer[0], true).toString());\r\n    assertEquals(baseStr + \"[\" + System.lineSeparator() + \"  a=<size=1>\" + System.lineSeparator() + \"]\", new ToStringBuilder(base).append(\"a\", (Object) new Integer[] { i3 }, false).toString());\r\n    assertEquals(baseStr + \"[\" + System.lineSeparator() + \"  a={3}\" + System.lineSeparator() + \"]\", new ToStringBuilder(base).append(\"a\", (Object) new Integer[] { i3 }, true).toString());\r\n    assertEquals(baseStr + \"[\" + System.lineSeparator() + \"  a=<size=2>\" + System.lineSeparator() + \"]\", new ToStringBuilder(base).append(\"a\", (Object) new Integer[] { i3, i4 }, false).toString());\r\n    assertEquals(baseStr + \"[\" + System.lineSeparator() + \"  a={3,4}\" + System.lineSeparator() + \"]\", new ToStringBuilder(base).append(\"a\", (Object) new Integer[] { i3, i4 }, true).toString());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\builder\\MultiLineToStringStyleTest.java",
  "methodName" : "testBlank",
  "sourceCode" : "@Test\r\nvoid testBlank() {\r\n    assertEquals(baseStr + \"[\" + System.lineSeparator() + \"]\", new ToStringBuilder(base).toString());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\builder\\MultiLineToStringStyleTest.java",
  "methodName" : "testCollection",
  "sourceCode" : "@Test\r\nvoid testCollection() {\r\n    final Integer i3 = Integer.valueOf(3);\r\n    final Integer i4 = Integer.valueOf(4);\r\n    assertEquals(baseStr + \"[\" + System.lineSeparator() + \"  a=<size=0>\" + System.lineSeparator() + \"]\", new ToStringBuilder(base).append(\"a\", Collections.emptyList(), false).toString());\r\n    assertEquals(baseStr + \"[\" + System.lineSeparator() + \"  a=[]\" + System.lineSeparator() + \"]\", new ToStringBuilder(base).append(\"a\", Collections.emptyList(), true).toString());\r\n    assertEquals(baseStr + \"[\" + System.lineSeparator() + \"  a=<size=1>\" + System.lineSeparator() + \"]\", new ToStringBuilder(base).append(\"a\", Collections.singletonList(i3), false).toString());\r\n    assertEquals(baseStr + \"[\" + System.lineSeparator() + \"  a=[3]\" + System.lineSeparator() + \"]\", new ToStringBuilder(base).append(\"a\", Collections.singletonList(i3), true).toString());\r\n    assertEquals(baseStr + \"[\" + System.lineSeparator() + \"  a=<size=2>\" + System.lineSeparator() + \"]\", new ToStringBuilder(base).append(\"a\", Arrays.asList(i3, i4), false).toString());\r\n    assertEquals(baseStr + \"[\" + System.lineSeparator() + \"  a=[3, 4]\" + System.lineSeparator() + \"]\", new ToStringBuilder(base).append(\"a\", Arrays.asList(i3, i4), true).toString());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\builder\\MultiLineToStringStyleTest.java",
  "methodName" : "testLong",
  "sourceCode" : "@Test\r\nvoid testLong() {\r\n    assertEquals(baseStr + \"[\" + System.lineSeparator() + \"  3\" + System.lineSeparator() + \"]\", new ToStringBuilder(base).append(3L).toString());\r\n    assertEquals(baseStr + \"[\" + System.lineSeparator() + \"  a=3\" + System.lineSeparator() + \"]\", new ToStringBuilder(base).append(\"a\", 3L).toString());\r\n    assertEquals(baseStr + \"[\" + System.lineSeparator() + \"  a=3\" + System.lineSeparator() + \"  b=4\" + System.lineSeparator() + \"]\", new ToStringBuilder(base).append(\"a\", 3L).append(\"b\", 4L).toString());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\builder\\MultiLineToStringStyleTest.java",
  "methodName" : "testLongArray",
  "sourceCode" : "@Test\r\nvoid testLongArray() {\r\n    long[] array = { 1, 2, -3, 4 };\r\n    assertEquals(baseStr + \"[\" + System.lineSeparator() + \"  {1,2,-3,4}\" + System.lineSeparator() + \"]\", new ToStringBuilder(base).append(array).toString());\r\n    assertEquals(baseStr + \"[\" + System.lineSeparator() + \"  {1,2,-3,4}\" + System.lineSeparator() + \"]\", new ToStringBuilder(base).append((Object) array).toString());\r\n    array = null;\r\n    assertEquals(baseStr + \"[\" + System.lineSeparator() + \"  <null>\" + System.lineSeparator() + \"]\", new ToStringBuilder(base).append(array).toString());\r\n    assertEquals(baseStr + \"[\" + System.lineSeparator() + \"  <null>\" + System.lineSeparator() + \"]\", new ToStringBuilder(base).append((Object) array).toString());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\builder\\MultiLineToStringStyleTest.java",
  "methodName" : "testLongArrayArray",
  "sourceCode" : "@Test\r\nvoid testLongArrayArray() {\r\n    long[][] array = { { 1, 2 }, null, { 5 } };\r\n    assertEquals(baseStr + \"[\" + System.lineSeparator() + \"  {{1,2},<null>,{5}}\" + System.lineSeparator() + \"]\", new ToStringBuilder(base).append(array).toString());\r\n    assertEquals(baseStr + \"[\" + System.lineSeparator() + \"  {{1,2},<null>,{5}}\" + System.lineSeparator() + \"]\", new ToStringBuilder(base).append((Object) array).toString());\r\n    array = null;\r\n    assertEquals(baseStr + \"[\" + System.lineSeparator() + \"  <null>\" + System.lineSeparator() + \"]\", new ToStringBuilder(base).append(array).toString());\r\n    assertEquals(baseStr + \"[\" + System.lineSeparator() + \"  <null>\" + System.lineSeparator() + \"]\", new ToStringBuilder(base).append((Object) array).toString());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\builder\\MultiLineToStringStyleTest.java",
  "methodName" : "testMap",
  "sourceCode" : "@Test\r\nvoid testMap() {\r\n    assertEquals(baseStr + \"[\" + System.lineSeparator() + \"  a=<size=0>\" + System.lineSeparator() + \"]\", new ToStringBuilder(base).append(\"a\", Collections.emptyMap(), false).toString());\r\n    assertEquals(baseStr + \"[\" + System.lineSeparator() + \"  a={}\" + System.lineSeparator() + \"]\", new ToStringBuilder(base).append(\"a\", Collections.emptyMap(), true).toString());\r\n    assertEquals(baseStr + \"[\" + System.lineSeparator() + \"  a=<size=1>\" + System.lineSeparator() + \"]\", new ToStringBuilder(base).append(\"a\", Collections.singletonMap(\"k\", \"v\"), false).toString());\r\n    assertEquals(baseStr + \"[\" + System.lineSeparator() + \"  a={k=v}\" + System.lineSeparator() + \"]\", new ToStringBuilder(base).append(\"a\", Collections.singletonMap(\"k\", \"v\"), true).toString());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\builder\\MultiLineToStringStyleTest.java",
  "methodName" : "testObject",
  "sourceCode" : "@Test\r\nvoid testObject() {\r\n    final Integer i3 = Integer.valueOf(3);\r\n    final Integer i4 = Integer.valueOf(4);\r\n    assertEquals(baseStr + \"[\" + System.lineSeparator() + \"  <null>\" + System.lineSeparator() + \"]\", new ToStringBuilder(base).append((Object) null).toString());\r\n    assertEquals(baseStr + \"[\" + System.lineSeparator() + \"  3\" + System.lineSeparator() + \"]\", new ToStringBuilder(base).append(i3).toString());\r\n    assertEquals(baseStr + \"[\" + System.lineSeparator() + \"  a=<null>\" + System.lineSeparator() + \"]\", new ToStringBuilder(base).append(\"a\", (Object) null).toString());\r\n    assertEquals(baseStr + \"[\" + System.lineSeparator() + \"  a=3\" + System.lineSeparator() + \"]\", new ToStringBuilder(base).append(\"a\", i3).toString());\r\n    assertEquals(baseStr + \"[\" + System.lineSeparator() + \"  a=3\" + System.lineSeparator() + \"  b=4\" + System.lineSeparator() + \"]\", new ToStringBuilder(base).append(\"a\", i3).append(\"b\", i4).toString());\r\n    assertEquals(baseStr + \"[\" + System.lineSeparator() + \"  a=<Integer>\" + System.lineSeparator() + \"]\", new ToStringBuilder(base).append(\"a\", i3, false).toString());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\builder\\MultiLineToStringStyleTest.java",
  "methodName" : "testObjectArray",
  "sourceCode" : "@Test\r\nvoid testObjectArray() {\r\n    Object[] array = { null, base, new int[] { 3, 6 } };\r\n    assertEquals(baseStr + \"[\" + System.lineSeparator() + \"  {<null>,5,{3,6}}\" + System.lineSeparator() + \"]\", new ToStringBuilder(base).append(array).toString());\r\n    assertEquals(baseStr + \"[\" + System.lineSeparator() + \"  {<null>,5,{3,6}}\" + System.lineSeparator() + \"]\", new ToStringBuilder(base).append((Object) array).toString());\r\n    array = null;\r\n    assertEquals(baseStr + \"[\" + System.lineSeparator() + \"  <null>\" + System.lineSeparator() + \"]\", new ToStringBuilder(base).append(array).toString());\r\n    assertEquals(baseStr + \"[\" + System.lineSeparator() + \"  <null>\" + System.lineSeparator() + \"]\", new ToStringBuilder(base).append((Object) array).toString());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\builder\\MultiLineToStringStyleTest.java",
  "methodName" : "testPerson",
  "sourceCode" : "@Test\r\nvoid testPerson() {\r\n    final Person p = new Person();\r\n    p.name = \"Jane Doe\";\r\n    p.age = 25;\r\n    p.smoker = true;\r\n    final String baseStr = p.getClass().getName() + \"@\" + Integer.toHexString(System.identityHashCode(p));\r\n    assertEquals(baseStr + \"[\" + System.lineSeparator() + \"  name=Jane Doe\" + System.lineSeparator() + \"  age=25\" + System.lineSeparator() + \"  smoker=true\" + System.lineSeparator() + \"]\", new ToStringBuilder(p).append(\"name\", p.name).append(\"age\", p.age).append(\"smoker\", p.smoker).toString());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\builder\\NoClassNameToStringStyleTest.java",
  "methodName" : "testAppendSuper",
  "sourceCode" : "@Test\r\nvoid testAppendSuper() {\r\n    assertEquals(\"[]\", new ToStringBuilder(base).appendSuper(\"Integer@8888[]\").toString());\r\n    assertEquals(\"[<null>]\", new ToStringBuilder(base).appendSuper(\"Integer@8888[<null>]\").toString());\r\n    assertEquals(\"[a=hello]\", new ToStringBuilder(base).appendSuper(\"Integer@8888[]\").append(\"a\", \"hello\").toString());\r\n    assertEquals(\"[<null>,a=hello]\", new ToStringBuilder(base).appendSuper(\"Integer@8888[<null>]\").append(\"a\", \"hello\").toString());\r\n    assertEquals(\"[a=hello]\", new ToStringBuilder(base).appendSuper(null).append(\"a\", \"hello\").toString());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\builder\\NoClassNameToStringStyleTest.java",
  "methodName" : "testArray",
  "sourceCode" : "@Test\r\nvoid testArray() {\r\n    final Integer i3 = Integer.valueOf(3);\r\n    final Integer i4 = Integer.valueOf(4);\r\n    assertEquals(\"[a=<size=0>]\", new ToStringBuilder(base).append(\"a\", (Object) new Integer[0], false).toString());\r\n    assertEquals(\"[a={}]\", new ToStringBuilder(base).append(\"a\", (Object) new Integer[0], true).toString());\r\n    assertEquals(\"[a=<size=1>]\", new ToStringBuilder(base).append(\"a\", (Object) new Integer[] { i3 }, false).toString());\r\n    assertEquals(\"[a={3}]\", new ToStringBuilder(base).append(\"a\", (Object) new Integer[] { i3 }, true).toString());\r\n    assertEquals(\"[a=<size=2>]\", new ToStringBuilder(base).append(\"a\", (Object) new Integer[] { i3, i4 }, false).toString());\r\n    assertEquals(\"[a={3,4}]\", new ToStringBuilder(base).append(\"a\", (Object) new Integer[] { i3, i4 }, true).toString());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\builder\\NoClassNameToStringStyleTest.java",
  "methodName" : "testBlank",
  "sourceCode" : "@Test\r\nvoid testBlank() {\r\n    assertEquals(\"[]\", new ToStringBuilder(base).toString());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\builder\\NoClassNameToStringStyleTest.java",
  "methodName" : "testCollection",
  "sourceCode" : "@Test\r\nvoid testCollection() {\r\n    final Integer i3 = Integer.valueOf(3);\r\n    final Integer i4 = Integer.valueOf(4);\r\n    assertEquals(\"[a=<size=0>]\", new ToStringBuilder(base).append(\"a\", Collections.emptyList(), false).toString());\r\n    assertEquals(\"[a=[]]\", new ToStringBuilder(base).append(\"a\", Collections.emptyList(), true).toString());\r\n    assertEquals(\"[a=<size=1>]\", new ToStringBuilder(base).append(\"a\", Collections.singletonList(i3), false).toString());\r\n    assertEquals(\"[a=[3]]\", new ToStringBuilder(base).append(\"a\", Collections.singletonList(i3), true).toString());\r\n    assertEquals(\"[a=<size=2>]\", new ToStringBuilder(base).append(\"a\", Arrays.asList(i3, i4), false).toString());\r\n    assertEquals(\"[a=[3, 4]]\", new ToStringBuilder(base).append(\"a\", Arrays.asList(i3, i4), true).toString());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\builder\\NoClassNameToStringStyleTest.java",
  "methodName" : "testLong",
  "sourceCode" : "@Test\r\nvoid testLong() {\r\n    assertEquals(\"[3]\", new ToStringBuilder(base).append(3L).toString());\r\n    assertEquals(\"[a=3]\", new ToStringBuilder(base).append(\"a\", 3L).toString());\r\n    assertEquals(\"[a=3,b=4]\", new ToStringBuilder(base).append(\"a\", 3L).append(\"b\", 4L).toString());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\builder\\NoClassNameToStringStyleTest.java",
  "methodName" : "testLongArray",
  "sourceCode" : "@Test\r\nvoid testLongArray() {\r\n    long[] array = { 1, 2, -3, 4 };\r\n    assertEquals(\"[{1,2,-3,4}]\", new ToStringBuilder(base).append(array).toString());\r\n    assertEquals(\"[{1,2,-3,4}]\", new ToStringBuilder(base).append((Object) array).toString());\r\n    array = null;\r\n    assertEquals(\"[<null>]\", new ToStringBuilder(base).append(array).toString());\r\n    assertEquals(\"[<null>]\", new ToStringBuilder(base).append((Object) array).toString());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\builder\\NoClassNameToStringStyleTest.java",
  "methodName" : "testLongArrayArray",
  "sourceCode" : "@Test\r\nvoid testLongArrayArray() {\r\n    long[][] array = { { 1, 2 }, null, { 5 } };\r\n    assertEquals(\"[{{1,2},<null>,{5}}]\", new ToStringBuilder(base).append(array).toString());\r\n    assertEquals(\"[{{1,2},<null>,{5}}]\", new ToStringBuilder(base).append((Object) array).toString());\r\n    array = null;\r\n    assertEquals(\"[<null>]\", new ToStringBuilder(base).append(array).toString());\r\n    assertEquals(\"[<null>]\", new ToStringBuilder(base).append((Object) array).toString());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\builder\\NoClassNameToStringStyleTest.java",
  "methodName" : "testMap",
  "sourceCode" : "@Test\r\nvoid testMap() {\r\n    assertEquals(\"[a=<size=0>]\", new ToStringBuilder(base).append(\"a\", Collections.emptyMap(), false).toString());\r\n    assertEquals(\"[a={}]\", new ToStringBuilder(base).append(\"a\", Collections.emptyMap(), true).toString());\r\n    assertEquals(\"[a=<size=1>]\", new ToStringBuilder(base).append(\"a\", Collections.singletonMap(\"k\", \"v\"), false).toString());\r\n    assertEquals(\"[a={k=v}]\", new ToStringBuilder(base).append(\"a\", Collections.singletonMap(\"k\", \"v\"), true).toString());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\builder\\NoClassNameToStringStyleTest.java",
  "methodName" : "testObject",
  "sourceCode" : "@Test\r\nvoid testObject() {\r\n    final Integer i3 = Integer.valueOf(3);\r\n    final Integer i4 = Integer.valueOf(4);\r\n    assertEquals(\"[<null>]\", new ToStringBuilder(base).append((Object) null).toString());\r\n    assertEquals(\"[3]\", new ToStringBuilder(base).append(i3).toString());\r\n    assertEquals(\"[a=<null>]\", new ToStringBuilder(base).append(\"a\", (Object) null).toString());\r\n    assertEquals(\"[a=3]\", new ToStringBuilder(base).append(\"a\", i3).toString());\r\n    assertEquals(\"[a=3,b=4]\", new ToStringBuilder(base).append(\"a\", i3).append(\"b\", i4).toString());\r\n    assertEquals(\"[a=<Integer>]\", new ToStringBuilder(base).append(\"a\", i3, false).toString());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\builder\\NoClassNameToStringStyleTest.java",
  "methodName" : "testObjectArray",
  "sourceCode" : "@Test\r\nvoid testObjectArray() {\r\n    Object[] array = { null, base, new int[] { 3, 6 } };\r\n    assertEquals(\"[{<null>,5,{3,6}}]\", new ToStringBuilder(base).append(array).toString());\r\n    assertEquals(\"[{<null>,5,{3,6}}]\", new ToStringBuilder(base).append((Object) array).toString());\r\n    array = null;\r\n    assertEquals(\"[<null>]\", new ToStringBuilder(base).append(array).toString());\r\n    assertEquals(\"[<null>]\", new ToStringBuilder(base).append((Object) array).toString());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\builder\\NoClassNameToStringStyleTest.java",
  "methodName" : "testPerson",
  "sourceCode" : "@Test\r\nvoid testPerson() {\r\n    final Person p = new Person();\r\n    p.name = \"John Q. Public\";\r\n    p.age = 45;\r\n    p.smoker = true;\r\n    assertEquals(\"[name=John Q. Public,age=45,smoker=true]\", new ToStringBuilder(p).append(\"name\", p.name).append(\"age\", p.age).append(\"smoker\", p.smoker).toString());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\builder\\NoFieldNamesToStringStyleTest.java",
  "methodName" : "testAppendSuper",
  "sourceCode" : "@Test\r\nvoid testAppendSuper() {\r\n    assertEquals(baseStr + \"[]\", new ToStringBuilder(base).appendSuper(\"Integer@8888[]\").toString());\r\n    assertEquals(baseStr + \"[<null>]\", new ToStringBuilder(base).appendSuper(\"Integer@8888[<null>]\").toString());\r\n    assertEquals(baseStr + \"[hello]\", new ToStringBuilder(base).appendSuper(\"Integer@8888[]\").append(\"a\", \"hello\").toString());\r\n    assertEquals(baseStr + \"[<null>,hello]\", new ToStringBuilder(base).appendSuper(\"Integer@8888[<null>]\").append(\"a\", \"hello\").toString());\r\n    assertEquals(baseStr + \"[hello]\", new ToStringBuilder(base).appendSuper(null).append(\"a\", \"hello\").toString());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\builder\\NoFieldNamesToStringStyleTest.java",
  "methodName" : "testArray",
  "sourceCode" : "@Test\r\nvoid testArray() {\r\n    final Integer i3 = Integer.valueOf(3);\r\n    final Integer i4 = Integer.valueOf(4);\r\n    assertEquals(baseStr + \"[<size=0>]\", new ToStringBuilder(base).append(\"a\", (Object) new Integer[0], false).toString());\r\n    assertEquals(baseStr + \"[{}]\", new ToStringBuilder(base).append(\"a\", (Object) new Integer[0], true).toString());\r\n    assertEquals(baseStr + \"[<size=1>]\", new ToStringBuilder(base).append(\"a\", (Object) new Integer[] { i3 }, false).toString());\r\n    assertEquals(baseStr + \"[{3}]\", new ToStringBuilder(base).append(\"a\", (Object) new Integer[] { i3 }, true).toString());\r\n    assertEquals(baseStr + \"[<size=2>]\", new ToStringBuilder(base).append(\"a\", (Object) new Integer[] { i3, i4 }, false).toString());\r\n    assertEquals(baseStr + \"[{3,4}]\", new ToStringBuilder(base).append(\"a\", (Object) new Integer[] { i3, i4 }, true).toString());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\builder\\NoFieldNamesToStringStyleTest.java",
  "methodName" : "testBlank",
  "sourceCode" : "@Test\r\nvoid testBlank() {\r\n    assertEquals(baseStr + \"[]\", new ToStringBuilder(base).toString());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\builder\\NoFieldNamesToStringStyleTest.java",
  "methodName" : "testCollection",
  "sourceCode" : "@Test\r\nvoid testCollection() {\r\n    final Integer i3 = Integer.valueOf(3);\r\n    final Integer i4 = Integer.valueOf(4);\r\n    assertEquals(baseStr + \"[<size=0>]\", new ToStringBuilder(base).append(\"a\", Collections.emptyList(), false).toString());\r\n    assertEquals(baseStr + \"[[]]\", new ToStringBuilder(base).append(\"a\", Collections.emptyList(), true).toString());\r\n    assertEquals(baseStr + \"[<size=1>]\", new ToStringBuilder(base).append(\"a\", Collections.singletonList(i3), false).toString());\r\n    assertEquals(baseStr + \"[[3]]\", new ToStringBuilder(base).append(\"a\", Collections.singletonList(i3), true).toString());\r\n    assertEquals(baseStr + \"[<size=2>]\", new ToStringBuilder(base).append(\"a\", Arrays.asList(i3, i4), false).toString());\r\n    assertEquals(baseStr + \"[[3, 4]]\", new ToStringBuilder(base).append(\"a\", Arrays.asList(i3, i4), true).toString());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\builder\\NoFieldNamesToStringStyleTest.java",
  "methodName" : "testLong",
  "sourceCode" : "@Test\r\nvoid testLong() {\r\n    assertEquals(baseStr + \"[3]\", new ToStringBuilder(base).append(3L).toString());\r\n    assertEquals(baseStr + \"[3]\", new ToStringBuilder(base).append(\"a\", 3L).toString());\r\n    assertEquals(baseStr + \"[3,4]\", new ToStringBuilder(base).append(\"a\", 3L).append(\"b\", 4L).toString());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\builder\\NoFieldNamesToStringStyleTest.java",
  "methodName" : "testLongArray",
  "sourceCode" : "@Test\r\nvoid testLongArray() {\r\n    long[] array = { 1, 2, -3, 4 };\r\n    assertEquals(baseStr + \"[{1,2,-3,4}]\", new ToStringBuilder(base).append(array).toString());\r\n    assertEquals(baseStr + \"[{1,2,-3,4}]\", new ToStringBuilder(base).append((Object) array).toString());\r\n    array = null;\r\n    assertEquals(baseStr + \"[<null>]\", new ToStringBuilder(base).append(array).toString());\r\n    assertEquals(baseStr + \"[<null>]\", new ToStringBuilder(base).append((Object) array).toString());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\builder\\NoFieldNamesToStringStyleTest.java",
  "methodName" : "testLongArrayArray",
  "sourceCode" : "@Test\r\nvoid testLongArrayArray() {\r\n    long[][] array = { { 1, 2 }, null, { 5 } };\r\n    assertEquals(baseStr + \"[{{1,2},<null>,{5}}]\", new ToStringBuilder(base).append(array).toString());\r\n    assertEquals(baseStr + \"[{{1,2},<null>,{5}}]\", new ToStringBuilder(base).append((Object) array).toString());\r\n    array = null;\r\n    assertEquals(baseStr + \"[<null>]\", new ToStringBuilder(base).append(array).toString());\r\n    assertEquals(baseStr + \"[<null>]\", new ToStringBuilder(base).append((Object) array).toString());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\builder\\NoFieldNamesToStringStyleTest.java",
  "methodName" : "testMap",
  "sourceCode" : "@Test\r\nvoid testMap() {\r\n    assertEquals(baseStr + \"[<size=0>]\", new ToStringBuilder(base).append(\"a\", Collections.emptyMap(), false).toString());\r\n    assertEquals(baseStr + \"[{}]\", new ToStringBuilder(base).append(\"a\", Collections.emptyMap(), true).toString());\r\n    assertEquals(baseStr + \"[<size=1>]\", new ToStringBuilder(base).append(\"a\", Collections.singletonMap(\"k\", \"v\"), false).toString());\r\n    assertEquals(baseStr + \"[{k=v}]\", new ToStringBuilder(base).append(\"a\", Collections.singletonMap(\"k\", \"v\"), true).toString());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\builder\\NoFieldNamesToStringStyleTest.java",
  "methodName" : "testObject",
  "sourceCode" : "@Test\r\nvoid testObject() {\r\n    final Integer i3 = Integer.valueOf(3);\r\n    final Integer i4 = Integer.valueOf(4);\r\n    assertEquals(baseStr + \"[<null>]\", new ToStringBuilder(base).append((Object) null).toString());\r\n    assertEquals(baseStr + \"[3]\", new ToStringBuilder(base).append(i3).toString());\r\n    assertEquals(baseStr + \"[<null>]\", new ToStringBuilder(base).append(\"a\", (Object) null).toString());\r\n    assertEquals(baseStr + \"[3]\", new ToStringBuilder(base).append(\"a\", i3).toString());\r\n    assertEquals(baseStr + \"[3,4]\", new ToStringBuilder(base).append(\"a\", i3).append(\"b\", i4).toString());\r\n    assertEquals(baseStr + \"[<Integer>]\", new ToStringBuilder(base).append(\"a\", i3, false).toString());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\builder\\NoFieldNamesToStringStyleTest.java",
  "methodName" : "testObjectArray",
  "sourceCode" : "@Test\r\nvoid testObjectArray() {\r\n    Object[] array = { null, base, new int[] { 3, 6 } };\r\n    assertEquals(baseStr + \"[{<null>,5,{3,6}}]\", new ToStringBuilder(base).append(array).toString());\r\n    assertEquals(baseStr + \"[{<null>,5,{3,6}}]\", new ToStringBuilder(base).append((Object) array).toString());\r\n    array = null;\r\n    assertEquals(baseStr + \"[<null>]\", new ToStringBuilder(base).append(array).toString());\r\n    assertEquals(baseStr + \"[<null>]\", new ToStringBuilder(base).append((Object) array).toString());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\builder\\NoFieldNamesToStringStyleTest.java",
  "methodName" : "testPerson",
  "sourceCode" : "@Test\r\nvoid testPerson() {\r\n    final Person p = new Person();\r\n    p.name = \"Ron Paul\";\r\n    p.age = 72;\r\n    p.smoker = false;\r\n    final String baseStr = p.getClass().getName() + \"@\" + Integer.toHexString(System.identityHashCode(p));\r\n    assertEquals(baseStr + \"[Ron Paul,72,false]\", new ToStringBuilder(p).append(\"name\", p.name).append(\"age\", p.age).append(\"smoker\", p.smoker).toString());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\builder\\RecursiveToStringStyleTest.java",
  "methodName" : "testAppendSuper",
  "sourceCode" : "@Test\r\nvoid testAppendSuper() {\r\n    assertEquals(baseStr + \"[]\", new ToStringBuilder(base).appendSuper(\"Integer@8888[]\").toString());\r\n    assertEquals(baseStr + \"[<null>]\", new ToStringBuilder(base).appendSuper(\"Integer@8888[<null>]\").toString());\r\n    assertEquals(baseStr + \"[a=hello]\", new ToStringBuilder(base).appendSuper(\"Integer@8888[]\").append(\"a\", \"hello\").toString());\r\n    assertEquals(baseStr + \"[<null>,a=hello]\", new ToStringBuilder(base).appendSuper(\"Integer@8888[<null>]\").append(\"a\", \"hello\").toString());\r\n    assertEquals(baseStr + \"[a=hello]\", new ToStringBuilder(base).appendSuper(null).append(\"a\", \"hello\").toString());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\builder\\RecursiveToStringStyleTest.java",
  "methodName" : "testBlank",
  "sourceCode" : "@Test\r\nvoid testBlank() {\r\n    assertEquals(baseStr + \"[]\", new ToStringBuilder(base).toString());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\builder\\RecursiveToStringStyleTest.java",
  "methodName" : "testLong",
  "sourceCode" : "@Test\r\nvoid testLong() {\r\n    assertEquals(baseStr + \"[3]\", new ToStringBuilder(base).append(3L).toString());\r\n    assertEquals(baseStr + \"[a=3]\", new ToStringBuilder(base).append(\"a\", 3L).toString());\r\n    assertEquals(baseStr + \"[a=3,b=4]\", new ToStringBuilder(base).append(\"a\", 3L).append(\"b\", 4L).toString());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\builder\\RecursiveToStringStyleTest.java",
  "methodName" : "testLongArray",
  "sourceCode" : "@Test\r\nvoid testLongArray() {\r\n    long[] array = { 1, 2, -3, 4 };\r\n    assertEquals(baseStr + \"[{1,2,-3,4}]\", new ToStringBuilder(base).append(array).toString());\r\n    assertEquals(baseStr + \"[{1,2,-3,4}]\", new ToStringBuilder(base).append((Object) array).toString());\r\n    array = null;\r\n    assertEquals(baseStr + \"[<null>]\", new ToStringBuilder(base).append(array).toString());\r\n    assertEquals(baseStr + \"[<null>]\", new ToStringBuilder(base).append((Object) array).toString());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\builder\\RecursiveToStringStyleTest.java",
  "methodName" : "testLongArrayArray",
  "sourceCode" : "@Test\r\nvoid testLongArrayArray() {\r\n    long[][] array = { { 1, 2 }, null, { 5 } };\r\n    assertEquals(baseStr + \"[{{1,2},<null>,{5}}]\", new ToStringBuilder(base).append(array).toString());\r\n    assertEquals(baseStr + \"[{{1,2},<null>,{5}}]\", new ToStringBuilder(base).append((Object) array).toString());\r\n    array = null;\r\n    assertEquals(baseStr + \"[<null>]\", new ToStringBuilder(base).append(array).toString());\r\n    assertEquals(baseStr + \"[<null>]\", new ToStringBuilder(base).append((Object) array).toString());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\builder\\RecursiveToStringStyleTest.java",
  "methodName" : "testObject",
  "sourceCode" : "@Test\r\nvoid testObject() {\r\n    final Integer i3 = Integer.valueOf(3);\r\n    final Integer i4 = Integer.valueOf(4);\r\n    final ArrayList<Object> emptyList = new ArrayList<>();\r\n    assertEquals(baseStr + \"[<null>]\", new ToStringBuilder(base).append((Object) null).toString());\r\n    assertEquals(baseStr + \"[3]\", new ToStringBuilder(base).append(i3).toString());\r\n    assertEquals(baseStr + \"[a=<null>]\", new ToStringBuilder(base).append(\"a\", (Object) null).toString());\r\n    assertEquals(baseStr + \"[a=3]\", new ToStringBuilder(base).append(\"a\", i3).toString());\r\n    assertEquals(baseStr + \"[a=3,b=4]\", new ToStringBuilder(base).append(\"a\", i3).append(\"b\", i4).toString());\r\n    assertEquals(baseStr + \"[a=<Integer>]\", new ToStringBuilder(base).append(\"a\", i3, false).toString());\r\n    assertEquals(baseStr + \"[a=<size=0>]\", new ToStringBuilder(base).append(\"a\", emptyList, false).toString());\r\n    assertEquals(baseStr + \"[a=java.util.ArrayList@\" + Integer.toHexString(System.identityHashCode(emptyList)) + \"{}]\", new ToStringBuilder(base).append(\"a\", emptyList, true).toString());\r\n    assertEquals(baseStr + \"[a=<size=0>]\", new ToStringBuilder(base).append(\"a\", new HashMap<>(), false).toString());\r\n    assertEquals(baseStr + \"[a={}]\", new ToStringBuilder(base).append(\"a\", new HashMap<>(), true).toString());\r\n    assertEquals(baseStr + \"[a=<size=0>]\", new ToStringBuilder(base).append(\"a\", (Object) new String[0], false).toString());\r\n    assertEquals(baseStr + \"[a={}]\", new ToStringBuilder(base).append(\"a\", (Object) new String[0], true).toString());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\builder\\RecursiveToStringStyleTest.java",
  "methodName" : "testObjectArray",
  "sourceCode" : "@Test\r\nvoid testObjectArray() {\r\n    Object[] array = { null, base, new int[] { 3, 6 } };\r\n    assertEquals(baseStr + \"[{<null>,5,{3,6}}]\", new ToStringBuilder(base).append(array).toString());\r\n    assertEquals(baseStr + \"[{<null>,5,{3,6}}]\", new ToStringBuilder(base).append((Object) array).toString());\r\n    array = null;\r\n    assertEquals(baseStr + \"[<null>]\", new ToStringBuilder(base).append(array).toString());\r\n    assertEquals(baseStr + \"[<null>]\", new ToStringBuilder(base).append((Object) array).toString());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\builder\\RecursiveToStringStyleTest.java",
  "methodName" : "testPerson",
  "sourceCode" : "@Test\r\nvoid testPerson() {\r\n    final Person p = new Person();\r\n    p.name = \"John Doe\";\r\n    p.age = 33;\r\n    p.smoker = false;\r\n    p.job = new Job();\r\n    p.job.title = \"Manager\";\r\n    final String baseStr = p.getClass().getName() + \"@\" + Integer.toHexString(System.identityHashCode(p));\r\n    final String jobStr = p.job.getClass().getName() + \"@\" + Integer.toHexString(System.identityHashCode(p.job));\r\n    assertEquals(baseStr + \"[age=33,job=\" + jobStr + \"[title=Manager],name=John Doe,smoker=false]\", new ReflectionToStringBuilder(p, new RecursiveToStringStyle()).toString());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\builder\\ReflectionDiffBuilderTest.java",
  "methodName" : "testArrayDifference",
  "sourceCode" : "@Test\r\nvoid testArrayDifference() {\r\n    final TypeTestClass firstObject = new TypeTestClass();\r\n    firstObject.charArrayField = new char[] { 'c' };\r\n    final TypeTestClass secondObject = new TypeTestClass();\r\n    // Normal builder\r\n    DiffResult<TypeTestClass> list = firstObject.diff(secondObject);\r\n    assertEquals(1, list.getNumberOfDiffs());\r\n    // Deprecated constructor\r\n    list = firstObject.diffDeprecated(secondObject);\r\n    assertEquals(1, list.getNumberOfDiffs());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\builder\\ReflectionDiffBuilderTest.java",
  "methodName" : "testBigDecimalDifference",
  "sourceCode" : "@Test\r\nvoid testBigDecimalDifference() {\r\n    final TypeTestClass firstObject = new TypeTestClass();\r\n    // 2.0 is not equal to 2.00, see BigDecimal#equals()\r\n    firstObject.bigDecimal = BigDecimal.valueOf(200, 2);\r\n    final TypeTestClass secondObject = new TypeTestClass();\r\n    final DiffResult<TypeTestClass> list = firstObject.diff(secondObject);\r\n    assertEquals(1, list.getNumberOfDiffs());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\builder\\ReflectionDiffBuilderTest.java",
  "methodName" : "testBigIntegerDifference",
  "sourceCode" : "@Test\r\nvoid testBigIntegerDifference() {\r\n    final TypeTestClass firstObject = new TypeTestClass();\r\n    firstObject.bigInteger = BigInteger.valueOf(100);\r\n    final TypeTestClass secondObject = new TypeTestClass();\r\n    final DiffResult<TypeTestClass> list = firstObject.diff(secondObject);\r\n    assertEquals(1, list.getNumberOfDiffs());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\builder\\ReflectionDiffBuilderTest.java",
  "methodName" : "testDifferenceInInherited_field",
  "sourceCode" : "@Test\r\nvoid testDifferenceInInherited_field() {\r\n    final TypeTestChildClass firstObject = new TypeTestChildClass();\r\n    firstObject.intField = 99;\r\n    final TypeTestChildClass secondObject = new TypeTestChildClass();\r\n    final DiffResult<TypeTestClass> list = firstObject.diff(secondObject);\r\n    assertEquals(1, list.getNumberOfDiffs());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\builder\\ReflectionDiffBuilderTest.java",
  "methodName" : "testGetExcludeFieldNamesWithNullExcludedFieldNames",
  "sourceCode" : "@Test\r\nvoid testGetExcludeFieldNamesWithNullExcludedFieldNames() {\r\n    // @formatter:off\r\n    final ReflectionDiffBuilder<TypeTestClass> reflectionDiffBuilder = ReflectionDiffBuilder.<TypeTestClass>builder().setDiffBuilder(DiffBuilder.<TypeTestClass>builder().setLeft(new TypeTestClass()).setRight(new TypeTestChildClass()).setStyle(SHORT_STYLE).build()).build();\r\n    // @formatter:on\r\n    final String[] excludeFieldNames = reflectionDiffBuilder.getExcludeFieldNames();\r\n    assertNotNull(excludeFieldNames);\r\n    assertEquals(0, excludeFieldNames.length);\r\n    assertNotNull(reflectionDiffBuilder.build());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\builder\\ReflectionDiffBuilderTest.java",
  "methodName" : "testGetExcludeFieldNamesWithNullExcludedFieldNamesCtor",
  "sourceCode" : "@Test\r\nvoid testGetExcludeFieldNamesWithNullExcludedFieldNamesCtor() {\r\n    // @formatter:off\r\n    final ReflectionDiffBuilder<TypeTestClass> reflectionDiffBuilder = new ReflectionDiffBuilder<>(new TypeTestClass(), new TypeTestChildClass(), SHORT_STYLE);\r\n    // @formatter:on\r\n    reflectionDiffBuilder.setExcludeFieldNames(null);\r\n    final String[] excludeFieldNames = reflectionDiffBuilder.getExcludeFieldNames();\r\n    assertNotNull(excludeFieldNames);\r\n    assertEquals(0, excludeFieldNames.length);\r\n    assertNotNull(reflectionDiffBuilder.build());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\builder\\ReflectionDiffBuilderTest.java",
  "methodName" : "testGetExcludeFieldNamesWithNullValuesInExcludedFieldNames",
  "sourceCode" : "@Test\r\nvoid testGetExcludeFieldNamesWithNullValuesInExcludedFieldNames() {\r\n    // @formatter:off\r\n    final ReflectionDiffBuilder<TypeTestClass> reflectionDiffBuilder = ReflectionDiffBuilder.<TypeTestClass>builder().setDiffBuilder(DiffBuilder.<TypeTestClass>builder().setLeft(new TypeTestClass()).setRight(new TypeTestChildClass()).setStyle(SHORT_STYLE).build()).setExcludeFieldNames(\"charField\", null).build();\r\n    // @formatter:on\r\n    final String[] excludeFieldNames = reflectionDiffBuilder.getExcludeFieldNames();\r\n    assertNotNull(excludeFieldNames);\r\n    assertEquals(1, excludeFieldNames.length);\r\n    assertEquals(\"charField\", excludeFieldNames[0]);\r\n    assertNotNull(reflectionDiffBuilder.build());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\builder\\ReflectionDiffBuilderTest.java",
  "methodName" : "testGetExcludeFieldNamesWithNullValuesInExcludedFieldNamesCtor",
  "sourceCode" : "@Test\r\nvoid testGetExcludeFieldNamesWithNullValuesInExcludedFieldNamesCtor() {\r\n    // @formatter:off\r\n    final ReflectionDiffBuilder<TypeTestClass> reflectionDiffBuilder = new ReflectionDiffBuilder<>(new TypeTestClass(), new TypeTestChildClass(), SHORT_STYLE);\r\n    // @formatter:on\r\n    reflectionDiffBuilder.setExcludeFieldNames(\"charField\", null);\r\n    final String[] excludeFieldNames = reflectionDiffBuilder.getExcludeFieldNames();\r\n    assertNotNull(excludeFieldNames);\r\n    assertEquals(1, excludeFieldNames.length);\r\n    assertEquals(\"charField\", excludeFieldNames[0]);\r\n    assertNotNull(reflectionDiffBuilder.build());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\builder\\ReflectionDiffBuilderTest.java",
  "methodName" : "testNoDifferences",
  "sourceCode" : "@Test\r\nvoid testNoDifferences() {\r\n    final TypeTestClass firstObject = new TypeTestClass();\r\n    final TypeTestClass secondObject = new TypeTestClass();\r\n    assertEquals(0, firstObject.diff(secondObject).getNumberOfDiffs());\r\n    assertEquals(0, firstObject.diffDeprecated(secondObject).getNumberOfDiffs());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\builder\\ReflectionDiffBuilderTest.java",
  "methodName" : "testNoDifferencesDiffExcludeAnnotatedField",
  "sourceCode" : "@Test\r\nvoid testNoDifferencesDiffExcludeAnnotatedField() {\r\n    final TypeTestClass firstObject = new TypeTestClass();\r\n    firstObject.annotatedField = \"b\";\r\n    final TypeTestClass secondObject = new TypeTestClass();\r\n    assertEquals(0, firstObject.diff(secondObject).getNumberOfDiffs());\r\n    assertEquals(0, firstObject.diffDeprecated(secondObject).getNumberOfDiffs());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\builder\\ReflectionDiffBuilderTest.java",
  "methodName" : "testNoDifferencesDiffExcludedFieldAndExcludeAnnotatedField",
  "sourceCode" : "@Test\r\nvoid testNoDifferencesDiffExcludedFieldAndExcludeAnnotatedField() {\r\n    final TypeTestClass firstObject = new TypeTestClass();\r\n    firstObject.excludedField = \"b\";\r\n    firstObject.annotatedField = \"b\";\r\n    final TypeTestClass secondObject = new TypeTestClass();\r\n    DiffResult<TypeTestClass> list = firstObject.diff(secondObject);\r\n    assertEquals(0, list.getNumberOfDiffs());\r\n    list = firstObject.diffDeprecated(secondObject);\r\n    assertEquals(0, list.getNumberOfDiffs());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\builder\\ReflectionDiffBuilderTest.java",
  "methodName" : "testNoDifferencesExcludedField",
  "sourceCode" : "@Test\r\nvoid testNoDifferencesExcludedField() {\r\n    final TypeTestClass firstObject = new TypeTestClass();\r\n    firstObject.excludedField = \"b\";\r\n    final TypeTestClass secondObject = new TypeTestClass();\r\n    DiffResult<TypeTestClass> list = firstObject.diff(secondObject);\r\n    assertEquals(0, list.getNumberOfDiffs());\r\n    list = firstObject.diffDeprecated(secondObject);\r\n    assertEquals(0, list.getNumberOfDiffs());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\builder\\ReflectionDiffBuilderTest.java",
  "methodName" : "testNoDifferencesInheritance",
  "sourceCode" : "@Test\r\nvoid testNoDifferencesInheritance() {\r\n    final TypeTestChildClass firstObject = new TypeTestChildClass();\r\n    final TypeTestChildClass secondObject = new TypeTestChildClass();\r\n    DiffResult<TypeTestClass> list = firstObject.diff(secondObject);\r\n    assertEquals(0, list.getNumberOfDiffs());\r\n    list = firstObject.diffDeprecated(secondObject);\r\n    assertEquals(0, list.getNumberOfDiffs());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\builder\\ReflectionDiffBuilderTest.java",
  "methodName" : "testPrimitiveDifference",
  "sourceCode" : "@Test\r\nvoid testPrimitiveDifference() {\r\n    final TypeTestClass firstObject = new TypeTestClass();\r\n    firstObject.charField = 'c';\r\n    final TypeTestClass secondObject = new TypeTestClass();\r\n    DiffResult<TypeTestClass> list = firstObject.diff(secondObject);\r\n    assertEquals(1, list.getNumberOfDiffs());\r\n    list = firstObject.diffDeprecated(secondObject);\r\n    assertEquals(1, list.getNumberOfDiffs());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\builder\\ReflectionDiffBuilderTest.java",
  "methodName" : "testRetention",
  "sourceCode" : "@Test\r\nvoid testRetention() throws Exception {\r\n    // The following should not retain memory.\r\n    for (int i = 0; i < Integer.getInteger(\"testRecursive\", 10_000); i++) {\r\n        final Class<?> clazz = TestClassBuilder.defineSimpleClass(getClass().getPackage().getName(), i);\r\n        final Object firstObject = clazz.newInstance();\r\n        final Object secondObject = clazz.newInstance();\r\n        final ReflectionDiffBuilder<Object> reflectionDiffBuilder = new ReflectionDiffBuilder<>(firstObject, secondObject, SHORT_STYLE);\r\n        assertNotNull(reflectionDiffBuilder.build());\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\builder\\ReflectionDiffBuilderTest.java",
  "methodName" : "testTransientFieldDifference",
  "sourceCode" : "@Test\r\nvoid testTransientFieldDifference() {\r\n    final TypeTestClass firstObject = new TypeTestClass();\r\n    firstObject.transientField = \"a\";\r\n    final TypeTestClass secondObject = new TypeTestClass();\r\n    firstObject.transientField = \"b\";\r\n    DiffResult<TypeTestClass> list = firstObject.diff(secondObject);\r\n    assertEquals(0, list.getNumberOfDiffs());\r\n    list = firstObject.diffDeprecated(secondObject);\r\n    assertEquals(0, list.getNumberOfDiffs());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\builder\\ReflectionToStringBuilderConcurrencyTest.java",
  "methodName" : "testArrayList",
  "sourceCode" : "@Test\r\n@Disabled\r\nvoid testArrayList() throws InterruptedException {\r\n    testConcurrency(new CollectionHolder<>(new ArrayList<>()));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\builder\\ReflectionToStringBuilderConcurrencyTest.java",
  "methodName" : "testCopyOnWriteArrayList",
  "sourceCode" : "@Test\r\n@Disabled\r\nvoid testCopyOnWriteArrayList() throws InterruptedException {\r\n    testConcurrency(new CollectionHolder<>(new CopyOnWriteArrayList<>()));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\builder\\ReflectionToStringBuilderConcurrencyTest.java",
  "methodName" : "testLinkedList",
  "sourceCode" : "@Test\r\n@Disabled\r\nvoid testLinkedList() throws InterruptedException {\r\n    testConcurrency(new CollectionHolder<>(new LinkedList<>()));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\builder\\ReflectionToStringBuilderCustomImplementationTest.java",
  "methodName" : "testBuild",
  "sourceCode" : "@Test\r\nvoid testBuild() {\r\n    assertEquals(\"[stringField=prefix:string]\", new CustomReflectionToStringBuilder(this, ToStringStyle.NO_CLASS_NAME_STYLE).build());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\builder\\ReflectionToStringBuilderExcludeNullValuesTest.java",
  "methodName" : "test_ConstructorOption",
  "sourceCode" : "@Test\r\nvoid test_ConstructorOption() {\r\n    ReflectionToStringBuilder builder = new ReflectionToStringBuilder(BOTH_NON_NULL, null, null, null, false, false, true);\r\n    assertTrue(builder.isExcludeNullValues());\r\n    String toString = builder.toString();\r\n    assertTrue(toString.contains(INTEGER_FIELD_NAME));\r\n    assertTrue(toString.contains(STRING_FIELD_NAME));\r\n    builder = new ReflectionToStringBuilder(FIRST_NULL, null, null, null, false, false, true);\r\n    toString = builder.toString();\r\n    assertFalse(toString.contains(INTEGER_FIELD_NAME));\r\n    assertTrue(toString.contains(STRING_FIELD_NAME));\r\n    builder = new ReflectionToStringBuilder(SECOND_NULL, null, null, null, false, false, true);\r\n    toString = builder.toString();\r\n    assertTrue(toString.contains(INTEGER_FIELD_NAME));\r\n    assertFalse(toString.contains(STRING_FIELD_NAME));\r\n    builder = new ReflectionToStringBuilder(BOTH_NULL, null, null, null, false, false, true);\r\n    toString = builder.toString();\r\n    assertFalse(toString.contains(INTEGER_FIELD_NAME));\r\n    assertFalse(toString.contains(STRING_FIELD_NAME));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\builder\\ReflectionToStringBuilderExcludeNullValuesTest.java",
  "methodName" : "test_ConstructorOption_ExcludeNull",
  "sourceCode" : "@Test\r\nvoid test_ConstructorOption_ExcludeNull() {\r\n    ReflectionToStringBuilder builder = new ReflectionToStringBuilder(BOTH_NULL, null, null, null, false, false, false);\r\n    builder.setExcludeNullValues(true);\r\n    assertTrue(builder.isExcludeNullValues());\r\n    String toString = builder.toString();\r\n    assertFalse(toString.contains(STRING_FIELD_NAME));\r\n    assertFalse(toString.contains(INTEGER_FIELD_NAME));\r\n    builder = new ReflectionToStringBuilder(BOTH_NULL, null, null, null, false, false, true);\r\n    toString = builder.toString();\r\n    assertFalse(toString.contains(STRING_FIELD_NAME));\r\n    assertFalse(toString.contains(INTEGER_FIELD_NAME));\r\n    final ReflectionToStringBuilder oldBuilder = new ReflectionToStringBuilder(BOTH_NULL);\r\n    oldBuilder.setExcludeNullValues(true);\r\n    assertTrue(oldBuilder.isExcludeNullValues());\r\n    toString = oldBuilder.toString();\r\n    assertFalse(toString.contains(STRING_FIELD_NAME));\r\n    assertFalse(toString.contains(INTEGER_FIELD_NAME));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\builder\\ReflectionToStringBuilderExcludeNullValuesTest.java",
  "methodName" : "test_ConstructorOptionNormal",
  "sourceCode" : "@Test\r\nvoid test_ConstructorOptionNormal() {\r\n    final ReflectionToStringBuilder builder = new ReflectionToStringBuilder(BOTH_NULL, null, null, null, false, false, false);\r\n    assertFalse(builder.isExcludeNullValues());\r\n    String toString = builder.toString();\r\n    assertTrue(toString.contains(STRING_FIELD_NAME));\r\n    assertTrue(toString.contains(INTEGER_FIELD_NAME));\r\n    //regression test older constructors\r\n    ReflectionToStringBuilder oldBuilder = new ReflectionToStringBuilder(BOTH_NULL);\r\n    toString = oldBuilder.toString();\r\n    assertTrue(toString.contains(STRING_FIELD_NAME));\r\n    assertTrue(toString.contains(INTEGER_FIELD_NAME));\r\n    oldBuilder = new ReflectionToStringBuilder(BOTH_NULL, null, null, null, false, false);\r\n    toString = oldBuilder.toString();\r\n    assertTrue(toString.contains(STRING_FIELD_NAME));\r\n    assertTrue(toString.contains(INTEGER_FIELD_NAME));\r\n    oldBuilder = new ReflectionToStringBuilder(BOTH_NULL, null, null);\r\n    toString = oldBuilder.toString();\r\n    assertTrue(toString.contains(STRING_FIELD_NAME));\r\n    assertTrue(toString.contains(INTEGER_FIELD_NAME));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\builder\\ReflectionToStringBuilderExcludeNullValuesTest.java",
  "methodName" : "test_excludeNull",
  "sourceCode" : "@Test\r\nvoid test_excludeNull() {\r\n    //test normal case\r\n    String toString = ReflectionToStringBuilder.toString(BOTH_NON_NULL, null, false, false, true, null);\r\n    assertTrue(toString.contains(INTEGER_FIELD_NAME));\r\n    assertTrue(toString.contains(STRING_FIELD_NAME));\r\n    //make one null\r\n    toString = ReflectionToStringBuilder.toString(FIRST_NULL, null, false, false, true, null);\r\n    assertFalse(toString.contains(INTEGER_FIELD_NAME));\r\n    assertTrue(toString.contains(STRING_FIELD_NAME));\r\n    //other one null\r\n    toString = ReflectionToStringBuilder.toString(SECOND_NULL, null, false, false, true, null);\r\n    assertTrue(toString.contains(INTEGER_FIELD_NAME));\r\n    assertFalse(toString.contains(STRING_FIELD_NAME));\r\n    //both null\r\n    toString = ReflectionToStringBuilder.toString(BOTH_NULL, null, false, false, true, null);\r\n    assertFalse(toString.contains(INTEGER_FIELD_NAME));\r\n    assertFalse(toString.contains(STRING_FIELD_NAME));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\builder\\ReflectionToStringBuilderExcludeNullValuesTest.java",
  "methodName" : "test_NonExclude",
  "sourceCode" : "@Test\r\nvoid test_NonExclude() {\r\n    //normal case=\r\n    String toString = ReflectionToStringBuilder.toString(BOTH_NON_NULL, null, false, false, false, null);\r\n    assertTrue(toString.contains(INTEGER_FIELD_NAME));\r\n    assertTrue(toString.contains(STRING_FIELD_NAME));\r\n    //make one null\r\n    toString = ReflectionToStringBuilder.toString(FIRST_NULL, null, false, false, false, null);\r\n    assertTrue(toString.contains(INTEGER_FIELD_NAME));\r\n    assertTrue(toString.contains(STRING_FIELD_NAME));\r\n    //other one null\r\n    toString = ReflectionToStringBuilder.toString(SECOND_NULL, null, false, false, false, null);\r\n    assertTrue(toString.contains(INTEGER_FIELD_NAME));\r\n    assertTrue(toString.contains(STRING_FIELD_NAME));\r\n    //make the both null\r\n    toString = ReflectionToStringBuilder.toString(BOTH_NULL, null, false, false, false, null);\r\n    assertTrue(toString.contains(INTEGER_FIELD_NAME));\r\n    assertTrue(toString.contains(STRING_FIELD_NAME));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\builder\\ReflectionToStringBuilderExcludeTest.java",
  "methodName" : "test_toStringExclude",
  "sourceCode" : "@Test\r\nvoid test_toStringExclude() {\r\n    final String toString = ReflectionToStringBuilder.toStringExclude(new TestFixture(), SECRET_FIELD);\r\n    validateSecretFieldAbsent(toString);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\builder\\ReflectionToStringBuilderExcludeTest.java",
  "methodName" : "test_toStringExcludeArray",
  "sourceCode" : "@Test\r\nvoid test_toStringExcludeArray() {\r\n    final String toString = ReflectionToStringBuilder.toStringExclude(new TestFixture(), SECRET_FIELD);\r\n    validateSecretFieldAbsent(toString);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\builder\\ReflectionToStringBuilderExcludeTest.java",
  "methodName" : "test_toStringExcludeArrayWithNull",
  "sourceCode" : "@Test\r\nvoid test_toStringExcludeArrayWithNull() {\r\n    final String toString = ReflectionToStringBuilder.toStringExclude(new TestFixture(), new String[] { null });\r\n    validateSecretFieldPresent(toString);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\builder\\ReflectionToStringBuilderExcludeTest.java",
  "methodName" : "test_toStringExcludeArrayWithNulls",
  "sourceCode" : "@Test\r\nvoid test_toStringExcludeArrayWithNulls() {\r\n    final String toString = ReflectionToStringBuilder.toStringExclude(new TestFixture(), null, null);\r\n    validateSecretFieldPresent(toString);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\builder\\ReflectionToStringBuilderExcludeTest.java",
  "methodName" : "test_toStringExcludeCollection",
  "sourceCode" : "@Test\r\nvoid test_toStringExcludeCollection() {\r\n    final List<String> excludeList = new ArrayList<>();\r\n    excludeList.add(SECRET_FIELD);\r\n    final String toString = ReflectionToStringBuilder.toStringExclude(new TestFixture(), excludeList);\r\n    validateSecretFieldAbsent(toString);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\builder\\ReflectionToStringBuilderExcludeTest.java",
  "methodName" : "test_toStringExcludeCollectionWithNull",
  "sourceCode" : "@Test\r\nvoid test_toStringExcludeCollectionWithNull() {\r\n    final List<String> excludeList = new ArrayList<>();\r\n    excludeList.add(null);\r\n    final String toString = ReflectionToStringBuilder.toStringExclude(new TestFixture(), excludeList);\r\n    validateSecretFieldPresent(toString);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\builder\\ReflectionToStringBuilderExcludeTest.java",
  "methodName" : "test_toStringExcludeCollectionWithNulls",
  "sourceCode" : "@Test\r\nvoid test_toStringExcludeCollectionWithNulls() {\r\n    final List<String> excludeList = new ArrayList<>();\r\n    excludeList.add(null);\r\n    excludeList.add(null);\r\n    final String toString = ReflectionToStringBuilder.toStringExclude(new TestFixture(), excludeList);\r\n    validateSecretFieldPresent(toString);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\builder\\ReflectionToStringBuilderExcludeTest.java",
  "methodName" : "test_toStringExcludeEmptyArray",
  "sourceCode" : "@Test\r\nvoid test_toStringExcludeEmptyArray() {\r\n    final String toString = ReflectionToStringBuilder.toStringExclude(new TestFixture(), ArrayUtils.EMPTY_STRING_ARRAY);\r\n    validateSecretFieldPresent(toString);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\builder\\ReflectionToStringBuilderExcludeTest.java",
  "methodName" : "test_toStringExcludeEmptyCollection",
  "sourceCode" : "@Test\r\nvoid test_toStringExcludeEmptyCollection() {\r\n    final String toString = ReflectionToStringBuilder.toStringExclude(new TestFixture(), new ArrayList<>());\r\n    validateSecretFieldPresent(toString);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\builder\\ReflectionToStringBuilderExcludeTest.java",
  "methodName" : "test_toStringExcludeNullArray",
  "sourceCode" : "@Test\r\nvoid test_toStringExcludeNullArray() {\r\n    final String toString = ReflectionToStringBuilder.toStringExclude(new TestFixture(), (String[]) null);\r\n    validateSecretFieldPresent(toString);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\builder\\ReflectionToStringBuilderExcludeTest.java",
  "methodName" : "test_toStringExcludeNullCollection",
  "sourceCode" : "@Test\r\nvoid test_toStringExcludeNullCollection() {\r\n    final String toString = ReflectionToStringBuilder.toStringExclude(new TestFixture(), (Collection<String>) null);\r\n    validateSecretFieldPresent(toString);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\builder\\ReflectionToStringBuilderExcludeWithAnnotationTest.java",
  "methodName" : "test_toStringExclude",
  "sourceCode" : "@Test\r\nvoid test_toStringExclude() {\r\n    final String toString = ReflectionToStringBuilder.toString(new TestFixture());\r\n    assertFalse(toString.contains(EXCLUDED_FIELD_NAME));\r\n    assertFalse(toString.contains(EXCLUDED_FIELD_VALUE));\r\n    assertTrue(toString.contains(INCLUDED_FIELD_NAME));\r\n    assertTrue(toString.contains(INCLUDED_FIELD_VALUE));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\builder\\ReflectionToStringBuilderIncludeTest.java",
  "methodName" : "test_toStringDefaultBehavior",
  "sourceCode" : "@Test\r\nvoid test_toStringDefaultBehavior() {\r\n    final ReflectionToStringBuilder builder = new ReflectionToStringBuilder(new TestFeature());\r\n    final String toString = builder.toString();\r\n    validateAllFieldsPresent(toString);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\builder\\ReflectionToStringBuilderIncludeTest.java",
  "methodName" : "test_toStringInclude",
  "sourceCode" : "@Test\r\nvoid test_toStringInclude() {\r\n    final String toString = ReflectionToStringBuilder.toStringInclude(new TestFeature(), SINGLE_FIELD_TO_SHOW);\r\n    validateIncludeFieldsPresent(toString, new String[] { SINGLE_FIELD_TO_SHOW }, new String[] { SINGLE_FIELD_VALUE_TO_SHOW });\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\builder\\ReflectionToStringBuilderIncludeTest.java",
  "methodName" : "test_toStringIncludeArray",
  "sourceCode" : "@Test\r\nvoid test_toStringIncludeArray() {\r\n    final String toString = ReflectionToStringBuilder.toStringInclude(new TestFeature(), FIELDS_TO_SHOW);\r\n    validateIncludeFieldsPresent(toString, FIELDS_TO_SHOW, FIELDS_VALUES_TO_SHOW);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\builder\\ReflectionToStringBuilderIncludeTest.java",
  "methodName" : "test_toStringIncludeArrayWithNull",
  "sourceCode" : "@Test\r\nvoid test_toStringIncludeArrayWithNull() {\r\n    final String toString = ReflectionToStringBuilder.toStringInclude(new TestFeature(), new String[] { null });\r\n    validateAllFieldsPresent(toString);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\builder\\ReflectionToStringBuilderIncludeTest.java",
  "methodName" : "test_toStringIncludeArrayWithNulls",
  "sourceCode" : "@Test\r\nvoid test_toStringIncludeArrayWithNulls() {\r\n    final String toString = ReflectionToStringBuilder.toStringInclude(new TestFeature(), null, null);\r\n    validateAllFieldsPresent(toString);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\builder\\ReflectionToStringBuilderIncludeTest.java",
  "methodName" : "test_toStringIncludeCollection",
  "sourceCode" : "@Test\r\nvoid test_toStringIncludeCollection() {\r\n    final List<String> includeList = new ArrayList<>();\r\n    includeList.add(SINGLE_FIELD_TO_SHOW);\r\n    final String toString = ReflectionToStringBuilder.toStringInclude(new TestFeature(), includeList);\r\n    validateIncludeFieldsPresent(toString, new String[] { SINGLE_FIELD_TO_SHOW }, new String[] { SINGLE_FIELD_VALUE_TO_SHOW });\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\builder\\ReflectionToStringBuilderIncludeTest.java",
  "methodName" : "test_toStringIncludeCollectionWithNull",
  "sourceCode" : "@Test\r\nvoid test_toStringIncludeCollectionWithNull() {\r\n    final List<String> includeList = new ArrayList<>();\r\n    includeList.add(null);\r\n    final String toString = ReflectionToStringBuilder.toStringInclude(new TestFeature(), includeList);\r\n    validateAllFieldsPresent(toString);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\builder\\ReflectionToStringBuilderIncludeTest.java",
  "methodName" : "test_toStringIncludeCollectionWithNulls",
  "sourceCode" : "@Test\r\nvoid test_toStringIncludeCollectionWithNulls() {\r\n    final List<String> includeList = new ArrayList<>();\r\n    includeList.add(null);\r\n    includeList.add(null);\r\n    final String toString = ReflectionToStringBuilder.toStringInclude(new TestFeature(), includeList);\r\n    validateAllFieldsPresent(toString);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\builder\\ReflectionToStringBuilderIncludeTest.java",
  "methodName" : "test_toStringIncludeEmptyArray",
  "sourceCode" : "@Test\r\nvoid test_toStringIncludeEmptyArray() {\r\n    final String toString = ReflectionToStringBuilder.toStringInclude(new TestFeature(), ArrayUtils.EMPTY_STRING_ARRAY);\r\n    validateAllFieldsPresent(toString);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\builder\\ReflectionToStringBuilderIncludeTest.java",
  "methodName" : "test_toStringIncludeEmptyCollection",
  "sourceCode" : "@Test\r\nvoid test_toStringIncludeEmptyCollection() {\r\n    final String toString = ReflectionToStringBuilder.toStringInclude(new TestFeature(), new ArrayList<>());\r\n    validateAllFieldsPresent(toString);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\builder\\ReflectionToStringBuilderIncludeTest.java",
  "methodName" : "test_toStringIncludeNullArray",
  "sourceCode" : "@Test\r\nvoid test_toStringIncludeNullArray() {\r\n    final String toString = ReflectionToStringBuilder.toStringInclude(new TestFeature(), (String[]) null);\r\n    validateAllFieldsPresent(toString);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\builder\\ReflectionToStringBuilderIncludeTest.java",
  "methodName" : "test_toStringIncludeNullArrayMultiplesValues",
  "sourceCode" : "@Test\r\nvoid test_toStringIncludeNullArrayMultiplesValues() {\r\n    final String toString = ReflectionToStringBuilder.toStringInclude(new TestFeature(), null, null, null, null);\r\n    validateAllFieldsPresent(toString);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\builder\\ReflectionToStringBuilderIncludeTest.java",
  "methodName" : "test_toStringIncludeNullCollection",
  "sourceCode" : "@Test\r\nvoid test_toStringIncludeNullCollection() {\r\n    final String toString = ReflectionToStringBuilder.toStringInclude(new TestFeature(), (Collection<String>) null);\r\n    validateAllFieldsPresent(toString);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\builder\\ReflectionToStringBuilderIncludeTest.java",
  "methodName" : "test_toStringIncludeWithoutInformingFields",
  "sourceCode" : "@Test\r\nvoid test_toStringIncludeWithoutInformingFields() {\r\n    final String toString = ReflectionToStringBuilder.toStringInclude(new TestFeature());\r\n    validateAllFieldsPresent(toString);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\builder\\ReflectionToStringBuilderIncludeTest.java",
  "methodName" : "test_toStringSetIncludeAndExcludeWithIntersection",
  "sourceCode" : "@Test\r\nvoid test_toStringSetIncludeAndExcludeWithIntersection() {\r\n    final ReflectionToStringBuilder builder = new ReflectionToStringBuilder(new TestFeature());\r\n    builder.setExcludeFieldNames(FIELDS[1], FIELDS[4]);\r\n    builder.setIncludeFieldNames(FIELDS[0], FIELDS[1]);\r\n    Assertions.assertThrows(IllegalStateException.class, () -> builder.toString());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\builder\\ReflectionToStringBuilderIncludeTest.java",
  "methodName" : "test_toStringSetIncludeAndExcludeWithoutIntersection",
  "sourceCode" : "@Test\r\nvoid test_toStringSetIncludeAndExcludeWithoutIntersection() {\r\n    final ReflectionToStringBuilder builder = new ReflectionToStringBuilder(new TestFeature());\r\n    builder.setExcludeFieldNames(FIELDS[1], FIELDS[4]);\r\n    builder.setIncludeFieldNames(FIELDS_TO_SHOW);\r\n    final String toString = builder.toString();\r\n    validateIncludeFieldsPresent(toString, FIELDS_TO_SHOW, FIELDS_VALUES_TO_SHOW);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\builder\\ReflectionToStringBuilderIncludeTest.java",
  "methodName" : "test_toStringSetIncludeAndExcludeWithRandomFieldsWithIntersection",
  "sourceCode" : "@Test\r\nvoid test_toStringSetIncludeAndExcludeWithRandomFieldsWithIntersection() {\r\n    final ReflectionToStringBuilder builder = new ReflectionToStringBuilder(new TestFeature());\r\n    builder.setExcludeFieldNames(FIELDS[1], \"random1\");\r\n    builder.setIncludeFieldNames(\"random1\");\r\n    Assertions.assertThrows(IllegalStateException.class, () -> builder.toString());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\builder\\ReflectionToStringBuilderIncludeTest.java",
  "methodName" : "test_toStringSetIncludeAndExcludeWithRandomFieldsWithoutIntersection",
  "sourceCode" : "@Test\r\nvoid test_toStringSetIncludeAndExcludeWithRandomFieldsWithoutIntersection() {\r\n    final ReflectionToStringBuilder builder = new ReflectionToStringBuilder(new TestFeature());\r\n    builder.setExcludeFieldNames(FIELDS[1], \"random1\");\r\n    builder.setIncludeFieldNames(\"random2\", FIELDS[2]);\r\n    final String toString = builder.toString();\r\n    validateIncludeFieldsPresent(toString, new String[] { FIELDS[2] }, new String[] { VALUES[2] });\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\builder\\ReflectionToStringBuilderIncludeTest.java",
  "methodName" : "test_toStringSetIncludeWithArrayWithMultipleNullFields",
  "sourceCode" : "@Test\r\nvoid test_toStringSetIncludeWithArrayWithMultipleNullFields() {\r\n    final ReflectionToStringBuilder builder = new ReflectionToStringBuilder(new TestFeature());\r\n    builder.setExcludeFieldNames(FIELDS[1], FIELDS[4]);\r\n    builder.setIncludeFieldNames(null, null, null);\r\n    final String toString = builder.toString();\r\n    validateIncludeFieldsPresent(toString, new String[] { FIELDS[0], FIELDS[2], FIELDS[3] }, new String[] { VALUES[0], VALUES[2], VALUES[3] });\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\builder\\ReflectionToStringBuilderIncludeTest.java",
  "methodName" : "test_toStringSetIncludeWithMultipleNullFields",
  "sourceCode" : "@Test\r\nvoid test_toStringSetIncludeWithMultipleNullFields() {\r\n    final ReflectionToStringBuilder builder = new ReflectionToStringBuilder(new TestFeature());\r\n    builder.setExcludeFieldNames(FIELDS[1], FIELDS[4]);\r\n    builder.setIncludeFieldNames(null, null, null);\r\n    final String toString = builder.toString();\r\n    validateIncludeFieldsPresent(toString, new String[] { FIELDS[0], FIELDS[2], FIELDS[3] }, new String[] { VALUES[0], VALUES[2], VALUES[3] });\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\builder\\ReflectionToStringBuilderMutateInspectConcurrencyTest.java",
  "methodName" : "testConcurrency",
  "sourceCode" : "@Test\r\n@Disabled\r\nvoid testConcurrency() {\r\n    final TestFixture testFixture = new TestFixture();\r\n    final int numMutators = 10;\r\n    final int numIterations = 10;\r\n    for (int i = 0; i < numIterations; i++) {\r\n        for (int j = 0; j < numMutators; j++) {\r\n            final Thread t = new Thread(new MutatingClient(testFixture));\r\n            t.start();\r\n            final Thread s = new Thread(new InspectingClient(testFixture));\r\n            s.start();\r\n        }\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\builder\\ReflectionToStringBuilderSummaryTest.java",
  "methodName" : "testSummary",
  "sourceCode" : "@Test\r\nvoid testSummary() {\r\n    assertEquals(\"[stringField=string,summaryString=<String>]\", new ReflectionToStringBuilder(this, ToStringStyle.NO_CLASS_NAME_STYLE).build());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\builder\\ReflectionToStringBuilderTest.java",
  "methodName" : "testConstructorWithNullObject",
  "sourceCode" : "@Test\r\nvoid testConstructorWithNullObject() {\r\n    assertEquals(\"<null>\", new ReflectionToStringBuilder(null, ToStringStyle.DEFAULT_STYLE, new StringBuffer()).toString());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\builder\\ShortPrefixToStringStyleTest.java",
  "methodName" : "testAppendSuper",
  "sourceCode" : "@Test\r\nvoid testAppendSuper() {\r\n    assertEquals(baseStr + \"[]\", new ToStringBuilder(base).appendSuper(\"Integer@8888[]\").toString());\r\n    assertEquals(baseStr + \"[<null>]\", new ToStringBuilder(base).appendSuper(\"Integer@8888[<null>]\").toString());\r\n    assertEquals(baseStr + \"[a=hello]\", new ToStringBuilder(base).appendSuper(\"Integer@8888[]\").append(\"a\", \"hello\").toString());\r\n    assertEquals(baseStr + \"[<null>,a=hello]\", new ToStringBuilder(base).appendSuper(\"Integer@8888[<null>]\").append(\"a\", \"hello\").toString());\r\n    assertEquals(baseStr + \"[a=hello]\", new ToStringBuilder(base).appendSuper(null).append(\"a\", \"hello\").toString());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\builder\\ShortPrefixToStringStyleTest.java",
  "methodName" : "testArray",
  "sourceCode" : "@Test\r\nvoid testArray() {\r\n    final Integer i3 = Integer.valueOf(3);\r\n    final Integer i4 = Integer.valueOf(4);\r\n    assertEquals(baseStr + \"[a=<size=0>]\", new ToStringBuilder(base).append(\"a\", (Object) new Integer[0], false).toString());\r\n    assertEquals(baseStr + \"[a={}]\", new ToStringBuilder(base).append(\"a\", (Object) new Integer[0], true).toString());\r\n    assertEquals(baseStr + \"[a=<size=1>]\", new ToStringBuilder(base).append(\"a\", (Object) new Integer[] { i3 }, false).toString());\r\n    assertEquals(baseStr + \"[a={3}]\", new ToStringBuilder(base).append(\"a\", (Object) new Integer[] { i3 }, true).toString());\r\n    assertEquals(baseStr + \"[a=<size=2>]\", new ToStringBuilder(base).append(\"a\", (Object) new Integer[] { i3, i4 }, false).toString());\r\n    assertEquals(baseStr + \"[a={3,4}]\", new ToStringBuilder(base).append(\"a\", (Object) new Integer[] { i3, i4 }, true).toString());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\builder\\ShortPrefixToStringStyleTest.java",
  "methodName" : "testBlank",
  "sourceCode" : "@Test\r\nvoid testBlank() {\r\n    assertEquals(baseStr + \"[]\", new ToStringBuilder(base).toString());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\builder\\ShortPrefixToStringStyleTest.java",
  "methodName" : "testCollection",
  "sourceCode" : "@Test\r\nvoid testCollection() {\r\n    final Integer i3 = Integer.valueOf(3);\r\n    final Integer i4 = Integer.valueOf(4);\r\n    assertEquals(baseStr + \"[a=<size=0>]\", new ToStringBuilder(base).append(\"a\", Collections.emptyList(), false).toString());\r\n    assertEquals(baseStr + \"[a=[]]\", new ToStringBuilder(base).append(\"a\", Collections.emptyList(), true).toString());\r\n    assertEquals(baseStr + \"[a=<size=1>]\", new ToStringBuilder(base).append(\"a\", Collections.singletonList(i3), false).toString());\r\n    assertEquals(baseStr + \"[a=[3]]\", new ToStringBuilder(base).append(\"a\", Collections.singletonList(i3), true).toString());\r\n    assertEquals(baseStr + \"[a=<size=2>]\", new ToStringBuilder(base).append(\"a\", Arrays.asList(i3, i4), false).toString());\r\n    assertEquals(baseStr + \"[a=[3, 4]]\", new ToStringBuilder(base).append(\"a\", Arrays.asList(i3, i4), true).toString());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\builder\\ShortPrefixToStringStyleTest.java",
  "methodName" : "testLong",
  "sourceCode" : "@Test\r\nvoid testLong() {\r\n    assertEquals(baseStr + \"[3]\", new ToStringBuilder(base).append(3L).toString());\r\n    assertEquals(baseStr + \"[a=3]\", new ToStringBuilder(base).append(\"a\", 3L).toString());\r\n    assertEquals(baseStr + \"[a=3,b=4]\", new ToStringBuilder(base).append(\"a\", 3L).append(\"b\", 4L).toString());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\builder\\ShortPrefixToStringStyleTest.java",
  "methodName" : "testLongArray",
  "sourceCode" : "@Test\r\nvoid testLongArray() {\r\n    long[] array = { 1, 2, -3, 4 };\r\n    assertEquals(baseStr + \"[{1,2,-3,4}]\", new ToStringBuilder(base).append(array).toString());\r\n    assertEquals(baseStr + \"[{1,2,-3,4}]\", new ToStringBuilder(base).append((Object) array).toString());\r\n    array = null;\r\n    assertEquals(baseStr + \"[<null>]\", new ToStringBuilder(base).append(array).toString());\r\n    assertEquals(baseStr + \"[<null>]\", new ToStringBuilder(base).append((Object) array).toString());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\builder\\ShortPrefixToStringStyleTest.java",
  "methodName" : "testLongArrayArray",
  "sourceCode" : "@Test\r\nvoid testLongArrayArray() {\r\n    long[][] array = { { 1, 2 }, null, { 5 } };\r\n    assertEquals(baseStr + \"[{{1,2},<null>,{5}}]\", new ToStringBuilder(base).append(array).toString());\r\n    assertEquals(baseStr + \"[{{1,2},<null>,{5}}]\", new ToStringBuilder(base).append((Object) array).toString());\r\n    array = null;\r\n    assertEquals(baseStr + \"[<null>]\", new ToStringBuilder(base).append(array).toString());\r\n    assertEquals(baseStr + \"[<null>]\", new ToStringBuilder(base).append((Object) array).toString());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\builder\\ShortPrefixToStringStyleTest.java",
  "methodName" : "testMap",
  "sourceCode" : "@Test\r\nvoid testMap() {\r\n    assertEquals(baseStr + \"[a=<size=0>]\", new ToStringBuilder(base).append(\"a\", Collections.emptyMap(), false).toString());\r\n    assertEquals(baseStr + \"[a={}]\", new ToStringBuilder(base).append(\"a\", Collections.emptyMap(), true).toString());\r\n    assertEquals(baseStr + \"[a=<size=1>]\", new ToStringBuilder(base).append(\"a\", Collections.singletonMap(\"k\", \"v\"), false).toString());\r\n    assertEquals(baseStr + \"[a={k=v}]\", new ToStringBuilder(base).append(\"a\", Collections.singletonMap(\"k\", \"v\"), true).toString());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\builder\\ShortPrefixToStringStyleTest.java",
  "methodName" : "testObject",
  "sourceCode" : "@Test\r\nvoid testObject() {\r\n    final Integer i3 = Integer.valueOf(3);\r\n    final Integer i4 = Integer.valueOf(4);\r\n    assertEquals(baseStr + \"[<null>]\", new ToStringBuilder(base).append((Object) null).toString());\r\n    assertEquals(baseStr + \"[3]\", new ToStringBuilder(base).append(i3).toString());\r\n    assertEquals(baseStr + \"[a=<null>]\", new ToStringBuilder(base).append(\"a\", (Object) null).toString());\r\n    assertEquals(baseStr + \"[a=3]\", new ToStringBuilder(base).append(\"a\", i3).toString());\r\n    assertEquals(baseStr + \"[a=3,b=4]\", new ToStringBuilder(base).append(\"a\", i3).append(\"b\", i4).toString());\r\n    assertEquals(baseStr + \"[a=<Integer>]\", new ToStringBuilder(base).append(\"a\", i3, false).toString());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\builder\\ShortPrefixToStringStyleTest.java",
  "methodName" : "testObjectArray",
  "sourceCode" : "@Test\r\nvoid testObjectArray() {\r\n    Object[] array = { null, base, new int[] { 3, 6 } };\r\n    assertEquals(baseStr + \"[{<null>,5,{3,6}}]\", new ToStringBuilder(base).append(array).toString());\r\n    assertEquals(baseStr + \"[{<null>,5,{3,6}}]\", new ToStringBuilder(base).append((Object) array).toString());\r\n    array = null;\r\n    assertEquals(baseStr + \"[<null>]\", new ToStringBuilder(base).append(array).toString());\r\n    assertEquals(baseStr + \"[<null>]\", new ToStringBuilder(base).append((Object) array).toString());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\builder\\ShortPrefixToStringStyleTest.java",
  "methodName" : "testPerson",
  "sourceCode" : "@Test\r\nvoid testPerson() {\r\n    final Person p = new Person();\r\n    p.name = \"John Q. Public\";\r\n    p.age = 45;\r\n    p.smoker = true;\r\n    final String baseStr = \"ToStringStyleTest.Person\";\r\n    assertEquals(baseStr + \"[name=John Q. Public,age=45,smoker=true]\", new ToStringBuilder(p).append(\"name\", p.name).append(\"age\", p.age).append(\"smoker\", p.smoker).toString());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\builder\\SimpleToStringStyleTest.java",
  "methodName" : "testAppendSuper",
  "sourceCode" : "@Test\r\nvoid testAppendSuper() {\r\n    assertEquals(\"\", new ToStringBuilder(base).appendSuper(\"\").toString());\r\n    assertEquals(\"<null>\", new ToStringBuilder(base).appendSuper(\"<null>\").toString());\r\n    assertEquals(\"hello\", new ToStringBuilder(base).appendSuper(\"\").append(\"a\", \"hello\").toString());\r\n    assertEquals(\"<null>,hello\", new ToStringBuilder(base).appendSuper(\"<null>\").append(\"a\", \"hello\").toString());\r\n    assertEquals(\"hello\", new ToStringBuilder(base).appendSuper(null).append(\"a\", \"hello\").toString());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\builder\\SimpleToStringStyleTest.java",
  "methodName" : "testArray",
  "sourceCode" : "@Test\r\nvoid testArray() {\r\n    final Integer i3 = Integer.valueOf(3);\r\n    final Integer i4 = Integer.valueOf(4);\r\n    assertEquals(\"<size=0>\", new ToStringBuilder(base).append(\"a\", (Object) new Integer[0], false).toString());\r\n    assertEquals(\"{}\", new ToStringBuilder(base).append(\"a\", (Object) new Integer[0], true).toString());\r\n    assertEquals(\"<size=1>\", new ToStringBuilder(base).append(\"a\", (Object) new Integer[] { i3 }, false).toString());\r\n    assertEquals(\"{3}\", new ToStringBuilder(base).append(\"a\", (Object) new Integer[] { i3 }, true).toString());\r\n    assertEquals(\"<size=2>\", new ToStringBuilder(base).append(\"a\", (Object) new Integer[] { i3, i4 }, false).toString());\r\n    assertEquals(\"{3,4}\", new ToStringBuilder(base).append(\"a\", (Object) new Integer[] { i3, i4 }, true).toString());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\builder\\SimpleToStringStyleTest.java",
  "methodName" : "testBlank",
  "sourceCode" : "@Test\r\nvoid testBlank() {\r\n    assertEquals(\"\", new ToStringBuilder(base).toString());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\builder\\SimpleToStringStyleTest.java",
  "methodName" : "testCollection",
  "sourceCode" : "@Test\r\nvoid testCollection() {\r\n    final Integer i3 = Integer.valueOf(3);\r\n    final Integer i4 = Integer.valueOf(4);\r\n    assertEquals(\"<size=0>\", new ToStringBuilder(base).append(\"a\", Collections.emptyList(), false).toString());\r\n    assertEquals(\"[]\", new ToStringBuilder(base).append(\"a\", Collections.emptyList(), true).toString());\r\n    assertEquals(\"<size=1>\", new ToStringBuilder(base).append(\"a\", Collections.singletonList(i3), false).toString());\r\n    assertEquals(\"[3]\", new ToStringBuilder(base).append(\"a\", Collections.singletonList(i3), true).toString());\r\n    assertEquals(\"<size=2>\", new ToStringBuilder(base).append(\"a\", Arrays.asList(i3, i4), false).toString());\r\n    assertEquals(\"[3, 4]\", new ToStringBuilder(base).append(\"a\", Arrays.asList(i3, i4), true).toString());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\builder\\SimpleToStringStyleTest.java",
  "methodName" : "testLong",
  "sourceCode" : "@Test\r\nvoid testLong() {\r\n    assertEquals(\"3\", new ToStringBuilder(base).append(3L).toString());\r\n    assertEquals(\"3\", new ToStringBuilder(base).append(\"a\", 3L).toString());\r\n    assertEquals(\"3,4\", new ToStringBuilder(base).append(\"a\", 3L).append(\"b\", 4L).toString());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\builder\\SimpleToStringStyleTest.java",
  "methodName" : "testLongArray",
  "sourceCode" : "@Test\r\nvoid testLongArray() {\r\n    long[] array = { 1, 2, -3, 4 };\r\n    assertEquals(\"{1,2,-3,4}\", new ToStringBuilder(base).append(array).toString());\r\n    assertEquals(\"{1,2,-3,4}\", new ToStringBuilder(base).append((Object) array).toString());\r\n    array = null;\r\n    assertEquals(\"<null>\", new ToStringBuilder(base).append(array).toString());\r\n    assertEquals(\"<null>\", new ToStringBuilder(base).append((Object) array).toString());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\builder\\SimpleToStringStyleTest.java",
  "methodName" : "testLongArrayArray",
  "sourceCode" : "@Test\r\nvoid testLongArrayArray() {\r\n    long[][] array = { { 1, 2 }, null, { 5 } };\r\n    assertEquals(\"{{1,2},<null>,{5}}\", new ToStringBuilder(base).append(array).toString());\r\n    assertEquals(\"{{1,2},<null>,{5}}\", new ToStringBuilder(base).append((Object) array).toString());\r\n    array = null;\r\n    assertEquals(\"<null>\", new ToStringBuilder(base).append(array).toString());\r\n    assertEquals(\"<null>\", new ToStringBuilder(base).append((Object) array).toString());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\builder\\SimpleToStringStyleTest.java",
  "methodName" : "testMap",
  "sourceCode" : "@Test\r\nvoid testMap() {\r\n    assertEquals(\"<size=0>\", new ToStringBuilder(base).append(\"a\", Collections.emptyMap(), false).toString());\r\n    assertEquals(\"{}\", new ToStringBuilder(base).append(\"a\", Collections.emptyMap(), true).toString());\r\n    assertEquals(\"<size=1>\", new ToStringBuilder(base).append(\"a\", Collections.singletonMap(\"k\", \"v\"), false).toString());\r\n    assertEquals(\"{k=v}\", new ToStringBuilder(base).append(\"a\", Collections.singletonMap(\"k\", \"v\"), true).toString());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\builder\\SimpleToStringStyleTest.java",
  "methodName" : "testObject",
  "sourceCode" : "@Test\r\nvoid testObject() {\r\n    final Integer i3 = Integer.valueOf(3);\r\n    final Integer i4 = Integer.valueOf(4);\r\n    assertEquals(\"<null>\", new ToStringBuilder(base).append((Object) null).toString());\r\n    assertEquals(\"3\", new ToStringBuilder(base).append(i3).toString());\r\n    assertEquals(\"<null>\", new ToStringBuilder(base).append(\"a\", (Object) null).toString());\r\n    assertEquals(\"3\", new ToStringBuilder(base).append(\"a\", i3).toString());\r\n    assertEquals(\"3,4\", new ToStringBuilder(base).append(\"a\", i3).append(\"b\", i4).toString());\r\n    assertEquals(\"<Integer>\", new ToStringBuilder(base).append(\"a\", i3, false).toString());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\builder\\SimpleToStringStyleTest.java",
  "methodName" : "testObjectArray",
  "sourceCode" : "@Test\r\nvoid testObjectArray() {\r\n    Object[] array = { null, base, new int[] { 3, 6 } };\r\n    assertEquals(\"{<null>,5,{3,6}}\", new ToStringBuilder(base).append(array).toString());\r\n    assertEquals(\"{<null>,5,{3,6}}\", new ToStringBuilder(base).append((Object) array).toString());\r\n    array = null;\r\n    assertEquals(\"<null>\", new ToStringBuilder(base).append(array).toString());\r\n    assertEquals(\"<null>\", new ToStringBuilder(base).append((Object) array).toString());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\builder\\SimpleToStringStyleTest.java",
  "methodName" : "testPerson",
  "sourceCode" : "@Test\r\nvoid testPerson() {\r\n    final Person p = new Person();\r\n    p.name = \"Jane Q. Public\";\r\n    p.age = 47;\r\n    p.smoker = false;\r\n    assertEquals(\"Jane Q. Public,47,false\", new ToStringBuilder(p).append(\"name\", p.name).append(\"age\", p.age).append(\"smoker\", p.smoker).toString());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\builder\\StandardToStringStyleTest.java",
  "methodName" : "testAppendSuper",
  "sourceCode" : "@Test\r\nvoid testAppendSuper() {\r\n    assertEquals(baseStr + \"[]\", new ToStringBuilder(base).appendSuper(\"Integer@8888[]\").toString());\r\n    assertEquals(baseStr + \"[%NULL%]\", new ToStringBuilder(base).appendSuper(\"Integer@8888[%NULL%]\").toString());\r\n    assertEquals(baseStr + \"[a=hello]\", new ToStringBuilder(base).appendSuper(\"Integer@8888[]\").append(\"a\", \"hello\").toString());\r\n    assertEquals(baseStr + \"[%NULL%,a=hello]\", new ToStringBuilder(base).appendSuper(\"Integer@8888[%NULL%]\").append(\"a\", \"hello\").toString());\r\n    assertEquals(baseStr + \"[a=hello]\", new ToStringBuilder(base).appendSuper(null).append(\"a\", \"hello\").toString());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\builder\\StandardToStringStyleTest.java",
  "methodName" : "testArray",
  "sourceCode" : "@Test\r\nvoid testArray() {\r\n    final Integer i3 = Integer.valueOf(3);\r\n    final Integer i4 = Integer.valueOf(4);\r\n    assertEquals(baseStr + \"[a=%SIZE=0%]\", new ToStringBuilder(base).append(\"a\", (Object) new Integer[0], false).toString());\r\n    assertEquals(baseStr + \"[a=[]]\", new ToStringBuilder(base).append(\"a\", (Object) new Integer[0], true).toString());\r\n    assertEquals(baseStr + \"[a=%SIZE=1%]\", new ToStringBuilder(base).append(\"a\", (Object) new Integer[] { i3 }, false).toString());\r\n    assertEquals(baseStr + \"[a=[3]]\", new ToStringBuilder(base).append(\"a\", (Object) new Integer[] { i3 }, true).toString());\r\n    assertEquals(baseStr + \"[a=%SIZE=2%]\", new ToStringBuilder(base).append(\"a\", (Object) new Integer[] { i3, i4 }, false).toString());\r\n    assertEquals(baseStr + \"[a=[3, 4]]\", new ToStringBuilder(base).append(\"a\", (Object) new Integer[] { i3, i4 }, true).toString());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\builder\\StandardToStringStyleTest.java",
  "methodName" : "testBlank",
  "sourceCode" : "@Test\r\nvoid testBlank() {\r\n    assertEquals(baseStr + \"[]\", new ToStringBuilder(base).toString());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\builder\\StandardToStringStyleTest.java",
  "methodName" : "testCollection",
  "sourceCode" : "@Test\r\nvoid testCollection() {\r\n    final Integer i3 = Integer.valueOf(3);\r\n    final Integer i4 = Integer.valueOf(4);\r\n    assertEquals(baseStr + \"[a=%SIZE=0%]\", new ToStringBuilder(base).append(\"a\", Collections.emptyList(), false).toString());\r\n    assertEquals(baseStr + \"[a=[]]\", new ToStringBuilder(base).append(\"a\", Collections.emptyList(), true).toString());\r\n    assertEquals(baseStr + \"[a=%SIZE=1%]\", new ToStringBuilder(base).append(\"a\", Collections.singletonList(i3), false).toString());\r\n    assertEquals(baseStr + \"[a=[3]]\", new ToStringBuilder(base).append(\"a\", Collections.singletonList(i3), true).toString());\r\n    assertEquals(baseStr + \"[a=%SIZE=2%]\", new ToStringBuilder(base).append(\"a\", Arrays.asList(i3, i4), false).toString());\r\n    assertEquals(baseStr + \"[a=[3, 4]]\", new ToStringBuilder(base).append(\"a\", Arrays.asList(i3, i4), true).toString());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\builder\\StandardToStringStyleTest.java",
  "methodName" : "testDefaultGetter",
  "sourceCode" : "@Test\r\nvoid testDefaultGetter() {\r\n    assertEquals(\"[\", STYLE.getContentStart());\r\n    assertEquals(\"]\", STYLE.getContentEnd());\r\n    assertEquals(\"=\", STYLE.getFieldNameValueSeparator());\r\n    assertEquals(\",\", STYLE.getFieldSeparator());\r\n    assertEquals(\"%NULL%\", STYLE.getNullText());\r\n    assertEquals(\"%SIZE=\", STYLE.getSizeStartText());\r\n    assertEquals(\"%\", STYLE.getSizeEndText());\r\n    assertEquals(\"%\", STYLE.getSummaryObjectStartText());\r\n    assertEquals(\"%\", STYLE.getSummaryObjectEndText());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\builder\\StandardToStringStyleTest.java",
  "methodName" : "testDefaultIsArrayContentDetail",
  "sourceCode" : "@Test\r\nvoid testDefaultIsArrayContentDetail() {\r\n    assertTrue(new StandardToStringStyle().isArrayContentDetail());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\builder\\StandardToStringStyleTest.java",
  "methodName" : "testDefaultIsFieldSeparatorAtEnd",
  "sourceCode" : "@Test\r\nvoid testDefaultIsFieldSeparatorAtEnd() {\r\n    assertFalse(new StandardToStringStyle().isFieldSeparatorAtEnd());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\builder\\StandardToStringStyleTest.java",
  "methodName" : "testDefaultIsFieldSeparatorAtStart",
  "sourceCode" : "@Test\r\nvoid testDefaultIsFieldSeparatorAtStart() {\r\n    assertFalse(new StandardToStringStyle().isFieldSeparatorAtStart());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\builder\\StandardToStringStyleTest.java",
  "methodName" : "testDefaultValueOfFullDetail",
  "sourceCode" : "@Test\r\nvoid testDefaultValueOfFullDetail() {\r\n    assertTrue(new StandardToStringStyle().isDefaultFullDetail());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\builder\\StandardToStringStyleTest.java",
  "methodName" : "testDefaultValueOfUseClassName",
  "sourceCode" : "@Test\r\nvoid testDefaultValueOfUseClassName() {\r\n    assertTrue(new StandardToStringStyle().isUseClassName());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\builder\\StandardToStringStyleTest.java",
  "methodName" : "testDefaultValueOfUseFieldNames",
  "sourceCode" : "@Test\r\nvoid testDefaultValueOfUseFieldNames() {\r\n    assertTrue(new StandardToStringStyle().isUseFieldNames());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\builder\\StandardToStringStyleTest.java",
  "methodName" : "testDefaultValueOfUseIdentityHashCode",
  "sourceCode" : "@Test\r\nvoid testDefaultValueOfUseIdentityHashCode() {\r\n    assertTrue(new StandardToStringStyle().isUseIdentityHashCode());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\builder\\StandardToStringStyleTest.java",
  "methodName" : "testDefaultValueOfUseShortClassName",
  "sourceCode" : "@Test\r\nvoid testDefaultValueOfUseShortClassName() {\r\n    assertFalse(new StandardToStringStyle().isUseShortClassName());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\builder\\StandardToStringStyleTest.java",
  "methodName" : "testLong",
  "sourceCode" : "@Test\r\nvoid testLong() {\r\n    assertEquals(baseStr + \"[3]\", new ToStringBuilder(base).append(3L).toString());\r\n    assertEquals(baseStr + \"[a=3]\", new ToStringBuilder(base).append(\"a\", 3L).toString());\r\n    assertEquals(baseStr + \"[a=3,b=4]\", new ToStringBuilder(base).append(\"a\", 3L).append(\"b\", 4L).toString());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\builder\\StandardToStringStyleTest.java",
  "methodName" : "testLongArray",
  "sourceCode" : "@Test\r\nvoid testLongArray() {\r\n    long[] array = { 1, 2, -3, 4 };\r\n    assertEquals(baseStr + \"[[1, 2, -3, 4]]\", new ToStringBuilder(base).append(array).toString());\r\n    assertEquals(baseStr + \"[[1, 2, -3, 4]]\", new ToStringBuilder(base).append((Object) array).toString());\r\n    array = null;\r\n    assertEquals(baseStr + \"[%NULL%]\", new ToStringBuilder(base).append(array).toString());\r\n    assertEquals(baseStr + \"[%NULL%]\", new ToStringBuilder(base).append((Object) array).toString());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\builder\\StandardToStringStyleTest.java",
  "methodName" : "testLongArrayArray",
  "sourceCode" : "@Test\r\nvoid testLongArrayArray() {\r\n    long[][] array = { { 1, 2 }, null, { 5 } };\r\n    assertEquals(baseStr + \"[[[1, 2], %NULL%, [5]]]\", new ToStringBuilder(base).append(array).toString());\r\n    assertEquals(baseStr + \"[[[1, 2], %NULL%, [5]]]\", new ToStringBuilder(base).append((Object) array).toString());\r\n    array = null;\r\n    assertEquals(baseStr + \"[%NULL%]\", new ToStringBuilder(base).append(array).toString());\r\n    assertEquals(baseStr + \"[%NULL%]\", new ToStringBuilder(base).append((Object) array).toString());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\builder\\StandardToStringStyleTest.java",
  "methodName" : "testMap",
  "sourceCode" : "@Test\r\nvoid testMap() {\r\n    assertEquals(baseStr + \"[a=%SIZE=0%]\", new ToStringBuilder(base).append(\"a\", Collections.emptyMap(), false).toString());\r\n    assertEquals(baseStr + \"[a={}]\", new ToStringBuilder(base).append(\"a\", Collections.emptyMap(), true).toString());\r\n    assertEquals(baseStr + \"[a=%SIZE=1%]\", new ToStringBuilder(base).append(\"a\", Collections.singletonMap(\"k\", \"v\"), false).toString());\r\n    assertEquals(baseStr + \"[a={k=v}]\", new ToStringBuilder(base).append(\"a\", Collections.singletonMap(\"k\", \"v\"), true).toString());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\builder\\StandardToStringStyleTest.java",
  "methodName" : "testObject",
  "sourceCode" : "@Test\r\nvoid testObject() {\r\n    final Integer i3 = Integer.valueOf(3);\r\n    final Integer i4 = Integer.valueOf(4);\r\n    assertEquals(baseStr + \"[%NULL%]\", new ToStringBuilder(base).append((Object) null).toString());\r\n    assertEquals(baseStr + \"[3]\", new ToStringBuilder(base).append(i3).toString());\r\n    assertEquals(baseStr + \"[a=%NULL%]\", new ToStringBuilder(base).append(\"a\", (Object) null).toString());\r\n    assertEquals(baseStr + \"[a=3]\", new ToStringBuilder(base).append(\"a\", i3).toString());\r\n    assertEquals(baseStr + \"[a=3,b=4]\", new ToStringBuilder(base).append(\"a\", i3).append(\"b\", i4).toString());\r\n    assertEquals(baseStr + \"[a=%Integer%]\", new ToStringBuilder(base).append(\"a\", i3, false).toString());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\builder\\StandardToStringStyleTest.java",
  "methodName" : "testObjectArray",
  "sourceCode" : "@Test\r\nvoid testObjectArray() {\r\n    Object[] array = { null, base, new int[] { 3, 6 } };\r\n    assertEquals(baseStr + \"[[%NULL%, 5, [3, 6]]]\", new ToStringBuilder(base).append(array).toString());\r\n    assertEquals(baseStr + \"[[%NULL%, 5, [3, 6]]]\", new ToStringBuilder(base).append((Object) array).toString());\r\n    array = null;\r\n    assertEquals(baseStr + \"[%NULL%]\", new ToStringBuilder(base).append(array).toString());\r\n    assertEquals(baseStr + \"[%NULL%]\", new ToStringBuilder(base).append((Object) array).toString());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\builder\\StandardToStringStyleTest.java",
  "methodName" : "testPerson",
  "sourceCode" : "@Test\r\nvoid testPerson() {\r\n    final Person p = new Person();\r\n    p.name = \"Suzy Queue\";\r\n    p.age = 19;\r\n    p.smoker = false;\r\n    final String baseStr = \"ToStringStyleTest.Person\";\r\n    assertEquals(baseStr + \"[name=Suzy Queue,age=19,smoker=false]\", new ToStringBuilder(p).append(\"name\", p.name).append(\"age\", p.age).append(\"smoker\", p.smoker).toString());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\builder\\ToStringBuilderTest.java",
  "methodName" : "test_setUpToClass_invalid",
  "sourceCode" : "/**\r\n * Tests ReflectionToStringBuilder setUpToClass().\r\n */\r\n@Test\r\nvoid test_setUpToClass_invalid() {\r\n    final Integer val = Integer.valueOf(5);\r\n    final ReflectionToStringBuilder test = new ReflectionToStringBuilder(val);\r\n    assertIllegalArgumentException(() -> test.setUpToClass(String.class));\r\n    test.toString();\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\builder\\ToStringBuilderTest.java",
  "methodName" : "test_setUpToClass_valid",
  "sourceCode" : "/**\r\n * Tests ReflectionToStringBuilder setUpToClass().\r\n */\r\n@Test\r\nvoid test_setUpToClass_valid() {\r\n    final Integer val = Integer.valueOf(5);\r\n    final ReflectionToStringBuilder test = new ReflectionToStringBuilder(val);\r\n    test.setUpToClass(Number.class);\r\n    test.toString();\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\builder\\ToStringBuilderTest.java",
  "methodName" : "testAppendAsObjectToString",
  "sourceCode" : "@Test\r\nvoid testAppendAsObjectToString() {\r\n    final String objectToAppend1 = \"\";\r\n    final Boolean objectToAppend2 = Boolean.TRUE;\r\n    final Object objectToAppend3 = new Object();\r\n    assertEquals(baseStr + \"[\" + toBaseString(objectToAppend1) + \"]\", new ToStringBuilder(base).appendAsObjectToString(objectToAppend1).toString());\r\n    assertEquals(baseStr + \"[\" + toBaseString(objectToAppend2) + \"]\", new ToStringBuilder(base).appendAsObjectToString(objectToAppend2).toString());\r\n    assertEquals(baseStr + \"[\" + toBaseString(objectToAppend3) + \"]\", new ToStringBuilder(base).appendAsObjectToString(objectToAppend3).toString());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\builder\\ToStringBuilderTest.java",
  "methodName" : "testAppendAsObjectToStringNullPointerException",
  "sourceCode" : "@Test\r\nvoid testAppendAsObjectToStringNullPointerException() {\r\n    final ToStringBuilder builder = new ToStringBuilder(1);\r\n    assertNullPointerException(() -> builder.appendAsObjectToString(null));\r\n    builder.toString();\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\builder\\ToStringBuilderTest.java",
  "methodName" : "testAppendBooleanArrayWithFieldName",
  "sourceCode" : "@Test\r\nvoid testAppendBooleanArrayWithFieldName() {\r\n    final boolean[] array = { true, false, false };\r\n    assertEquals(baseStr + \"[flags={true,false,false}]\", new ToStringBuilder(base).append(\"flags\", array).toString());\r\n    assertEquals(baseStr + \"[flags=<null>]\", new ToStringBuilder(base).append(\"flags\", (boolean[]) null).toString());\r\n    assertEquals(baseStr + \"[<null>]\", new ToStringBuilder(base).append(null, (boolean[]) null).toString());\r\n    assertEquals(baseStr + \"[{true,false,false}]\", new ToStringBuilder(base).append(null, array).toString());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\builder\\ToStringBuilderTest.java",
  "methodName" : "testAppendBooleanArrayWithFieldNameAndFullDetail",
  "sourceCode" : "@Test\r\nvoid testAppendBooleanArrayWithFieldNameAndFullDetail() {\r\n    final boolean[] array = { true, false, false };\r\n    assertEquals(baseStr + \"[flags={true,false,false}]\", new ToStringBuilder(base).append(\"flags\", array, true).toString());\r\n    assertEquals(baseStr + \"[length=<size=3>]\", new ToStringBuilder(base).append(\"length\", array, false).toString());\r\n    assertEquals(baseStr + \"[flags=<null>]\", new ToStringBuilder(base).append(\"flags\", (boolean[]) null, true).toString());\r\n    assertEquals(baseStr + \"[<null>]\", new ToStringBuilder(base).append(null, (boolean[]) null, false).toString());\r\n    assertEquals(baseStr + \"[<size=3>]\", new ToStringBuilder(base).append(null, array, false).toString());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\builder\\ToStringBuilderTest.java",
  "methodName" : "testAppendByteArrayWithFieldName",
  "sourceCode" : "// Reflection Array Array tests\r\n@Test\r\nvoid testAppendByteArrayWithFieldName() {\r\n    final byte[] array = { 1, 2, -3, 4 };\r\n    assertEquals(baseStr + \"[values={1,2,-3,4}]\", new ToStringBuilder(base).append(\"values\", array).toString());\r\n    assertEquals(baseStr + \"[values=<null>]\", new ToStringBuilder(base).append(\"values\", (boolean[]) null).toString());\r\n    assertEquals(baseStr + \"[<null>]\", new ToStringBuilder(base).append(null, (boolean[]) null).toString());\r\n    assertEquals(baseStr + \"[{1,2,-3,4}]\", new ToStringBuilder(base).append(null, array).toString());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\builder\\ToStringBuilderTest.java",
  "methodName" : "testAppendByteArrayWithFieldNameAndFullDetail",
  "sourceCode" : "@Test\r\nvoid testAppendByteArrayWithFieldNameAndFullDetail() {\r\n    final byte[] array = { 1, 2, -3, 4 };\r\n    assertEquals(baseStr + \"[values={1,2,-3,4}]\", new ToStringBuilder(base).append(\"values\", array, true).toString());\r\n    assertEquals(baseStr + \"[length=<size=4>]\", new ToStringBuilder(base).append(\"length\", array, false).toString());\r\n    assertEquals(baseStr + \"[values=<null>]\", new ToStringBuilder(base).append(\"values\", (boolean[]) null, true).toString());\r\n    assertEquals(baseStr + \"[<null>]\", new ToStringBuilder(base).append(null, (boolean[]) null, false).toString());\r\n    assertEquals(baseStr + \"[<size=4>]\", new ToStringBuilder(base).append(null, array, false).toString());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\builder\\ToStringBuilderTest.java",
  "methodName" : "testAppendCharArrayWithFieldName",
  "sourceCode" : "@Test\r\nvoid testAppendCharArrayWithFieldName() {\r\n    final char[] array = { 'A', '2', '_', 'D' };\r\n    assertEquals(baseStr + \"[chars={A,2,_,D}]\", new ToStringBuilder(base).append(\"chars\", array).toString());\r\n    assertEquals(baseStr + \"[letters={A,2,_,D}]\", new ToStringBuilder(base).append(\"letters\", array).toString());\r\n    assertEquals(baseStr + \"[flags=<null>]\", new ToStringBuilder(base).append(\"flags\", (boolean[]) null).toString());\r\n    assertEquals(baseStr + \"[<null>]\", new ToStringBuilder(base).append(null, (boolean[]) null).toString());\r\n    assertEquals(baseStr + \"[{A,2,_,D}]\", new ToStringBuilder(base).append(null, array).toString());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\builder\\ToStringBuilderTest.java",
  "methodName" : "testAppendCharArrayWithFieldNameAndFullDetail",
  "sourceCode" : "@Test\r\nvoid testAppendCharArrayWithFieldNameAndFullDetail() {\r\n    final char[] array = { 'A', '2', '_', 'D' };\r\n    assertEquals(baseStr + \"[chars={A,2,_,D}]\", new ToStringBuilder(base).append(\"chars\", array, true).toString());\r\n    assertEquals(baseStr + \"[letters=<size=4>]\", new ToStringBuilder(base).append(\"letters\", array, false).toString());\r\n    assertEquals(baseStr + \"[flags=<null>]\", new ToStringBuilder(base).append(\"flags\", (boolean[]) null, true).toString());\r\n    assertEquals(baseStr + \"[<null>]\", new ToStringBuilder(base).append(null, (boolean[]) null, false).toString());\r\n    assertEquals(baseStr + \"[<size=4>]\", new ToStringBuilder(base).append(null, array, false).toString());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\builder\\ToStringBuilderTest.java",
  "methodName" : "testAppendDoubleArrayWithFieldName",
  "sourceCode" : "@Test\r\nvoid testAppendDoubleArrayWithFieldName() {\r\n    final double[] array = { 1.0, 2.9876, -3.00001, 4.3 };\r\n    assertEquals(baseStr + \"[values={1.0,2.9876,-3.00001,4.3}]\", new ToStringBuilder(base).append(\"values\", array).toString());\r\n    assertEquals(baseStr + \"[values=<null>]\", new ToStringBuilder(base).append(\"values\", (boolean[]) null).toString());\r\n    assertEquals(baseStr + \"[<null>]\", new ToStringBuilder(base).append(null, (boolean[]) null).toString());\r\n    assertEquals(baseStr + \"[{1.0,2.9876,-3.00001,4.3}]\", new ToStringBuilder(base).append(null, array).toString());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\builder\\ToStringBuilderTest.java",
  "methodName" : "testAppendDoubleArrayWithFieldNameAndFullDetail",
  "sourceCode" : "@Test\r\nvoid testAppendDoubleArrayWithFieldNameAndFullDetail() {\r\n    final double[] array = { 1.0, 2.9876, -3.00001, 4.3 };\r\n    assertEquals(baseStr + \"[values={1.0,2.9876,-3.00001,4.3}]\", new ToStringBuilder(base).append(\"values\", array, true).toString());\r\n    assertEquals(baseStr + \"[length=<size=4>]\", new ToStringBuilder(base).append(\"length\", array, false).toString());\r\n    assertEquals(baseStr + \"[values=<null>]\", new ToStringBuilder(base).append(\"values\", (boolean[]) null, true).toString());\r\n    assertEquals(baseStr + \"[<null>]\", new ToStringBuilder(base).append(null, (boolean[]) null, false).toString());\r\n    assertEquals(baseStr + \"[<size=4>]\", new ToStringBuilder(base).append(null, array, false).toString());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\builder\\ToStringBuilderTest.java",
  "methodName" : "testAppendFloatArrayWithFieldName",
  "sourceCode" : "@Test\r\nvoid testAppendFloatArrayWithFieldName() {\r\n    final float[] array = { 1.0f, 2.9876f, -3.00001f, 4.3f };\r\n    assertEquals(baseStr + \"[values={1.0,2.9876,-3.00001,4.3}]\", new ToStringBuilder(base).append(\"values\", array).toString());\r\n    assertEquals(baseStr + \"[values=<null>]\", new ToStringBuilder(base).append(\"values\", (boolean[]) null).toString());\r\n    assertEquals(baseStr + \"[<null>]\", new ToStringBuilder(base).append(null, (boolean[]) null).toString());\r\n    assertEquals(baseStr + \"[{1.0,2.9876,-3.00001,4.3}]\", new ToStringBuilder(base).append(null, array).toString());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\builder\\ToStringBuilderTest.java",
  "methodName" : "testAppendFloatArrayWithFieldNameAndFullDetail",
  "sourceCode" : "@Test\r\nvoid testAppendFloatArrayWithFieldNameAndFullDetail() {\r\n    final float[] array = { 1.0f, 2.9876f, -3.00001f, 4.3f };\r\n    assertEquals(baseStr + \"[values={1.0,2.9876,-3.00001,4.3}]\", new ToStringBuilder(base).append(\"values\", array, true).toString());\r\n    assertEquals(baseStr + \"[length=<size=4>]\", new ToStringBuilder(base).append(\"length\", array, false).toString());\r\n    assertEquals(baseStr + \"[values=<null>]\", new ToStringBuilder(base).append(\"values\", (boolean[]) null, true).toString());\r\n    assertEquals(baseStr + \"[<null>]\", new ToStringBuilder(base).append(null, (boolean[]) null, false).toString());\r\n    assertEquals(baseStr + \"[<size=4>]\", new ToStringBuilder(base).append(null, array, false).toString());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\builder\\ToStringBuilderTest.java",
  "methodName" : "testAppendIntArrayWithFieldName",
  "sourceCode" : "@Test\r\nvoid testAppendIntArrayWithFieldName() {\r\n    final int[] array = { 1, 2, -3, 4 };\r\n    assertEquals(baseStr + \"[values={1,2,-3,4}]\", new ToStringBuilder(base).append(\"values\", array).toString());\r\n    assertEquals(baseStr + \"[values=<null>]\", new ToStringBuilder(base).append(\"values\", (boolean[]) null).toString());\r\n    assertEquals(baseStr + \"[<null>]\", new ToStringBuilder(base).append(null, (boolean[]) null).toString());\r\n    assertEquals(baseStr + \"[{1,2,-3,4}]\", new ToStringBuilder(base).append(null, array).toString());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\builder\\ToStringBuilderTest.java",
  "methodName" : "testAppendIntArrayWithFieldNameAndFullDetail",
  "sourceCode" : "@Test\r\nvoid testAppendIntArrayWithFieldNameAndFullDetail() {\r\n    final int[] array = { 1, 2, -3, 4 };\r\n    assertEquals(baseStr + \"[values={1,2,-3,4}]\", new ToStringBuilder(base).append(\"values\", array, true).toString());\r\n    assertEquals(baseStr + \"[length=<size=4>]\", new ToStringBuilder(base).append(\"length\", array, false).toString());\r\n    assertEquals(baseStr + \"[values=<null>]\", new ToStringBuilder(base).append(\"values\", (boolean[]) null, true).toString());\r\n    assertEquals(baseStr + \"[<null>]\", new ToStringBuilder(base).append(null, (boolean[]) null, false).toString());\r\n    assertEquals(baseStr + \"[<size=4>]\", new ToStringBuilder(base).append(null, array, false).toString());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\builder\\ToStringBuilderTest.java",
  "methodName" : "testAppendLongArrayWithFieldName",
  "sourceCode" : "@Test\r\nvoid testAppendLongArrayWithFieldName() {\r\n    final long[] array = { 1, 2, -3, 4 };\r\n    assertEquals(baseStr + \"[values={1,2,-3,4}]\", new ToStringBuilder(base).append(\"values\", array).toString());\r\n    assertEquals(baseStr + \"[values=<null>]\", new ToStringBuilder(base).append(\"values\", (boolean[]) null).toString());\r\n    assertEquals(baseStr + \"[<null>]\", new ToStringBuilder(base).append(null, (boolean[]) null).toString());\r\n    assertEquals(baseStr + \"[{1,2,-3,4}]\", new ToStringBuilder(base).append(null, array).toString());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\builder\\ToStringBuilderTest.java",
  "methodName" : "testAppendLongArrayWithFieldNameAndFullDetail",
  "sourceCode" : "@Test\r\nvoid testAppendLongArrayWithFieldNameAndFullDetail() {\r\n    final long[] array = { 1, 2, -3, 4 };\r\n    assertEquals(baseStr + \"[values={1,2,-3,4}]\", new ToStringBuilder(base).append(\"values\", array, true).toString());\r\n    assertEquals(baseStr + \"[length=<size=4>]\", new ToStringBuilder(base).append(\"length\", array, false).toString());\r\n    assertEquals(baseStr + \"[values=<null>]\", new ToStringBuilder(base).append(\"values\", (boolean[]) null, true).toString());\r\n    assertEquals(baseStr + \"[<null>]\", new ToStringBuilder(base).append(null, (boolean[]) null, false).toString());\r\n    assertEquals(baseStr + \"[<size=4>]\", new ToStringBuilder(base).append(null, array, false).toString());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\builder\\ToStringBuilderTest.java",
  "methodName" : "testAppendObjectArrayWithFieldName",
  "sourceCode" : "@Test\r\nvoid testAppendObjectArrayWithFieldName() {\r\n    final Object[] array = { null, base, new int[] { 3, 6 } };\r\n    assertEquals(baseStr + \"[values={<null>,5,{3,6}}]\", new ToStringBuilder(base).append(\"values\", array).toString());\r\n    assertEquals(baseStr + \"[values=<null>]\", new ToStringBuilder(base).append(\"values\", (boolean[]) null).toString());\r\n    assertEquals(baseStr + \"[<null>]\", new ToStringBuilder(base).append(null, (boolean[]) null).toString());\r\n    assertEquals(baseStr + \"[{<null>,5,{3,6}}]\", new ToStringBuilder(base).append(null, array).toString());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\builder\\ToStringBuilderTest.java",
  "methodName" : "testAppendObjectArrayWithFieldNameAndFullDetail",
  "sourceCode" : "@Test\r\nvoid testAppendObjectArrayWithFieldNameAndFullDetail() {\r\n    final Object[] array = { null, base, new int[] { 3, 6 } };\r\n    assertEquals(baseStr + \"[values={<null>,5,{3,6}}]\", new ToStringBuilder(base).append(\"values\", array, true).toString());\r\n    assertEquals(baseStr + \"[length=<size=3>]\", new ToStringBuilder(base).append(\"length\", array, false).toString());\r\n    assertEquals(baseStr + \"[values=<null>]\", new ToStringBuilder(base).append(\"values\", (boolean[]) null, true).toString());\r\n    assertEquals(baseStr + \"[<null>]\", new ToStringBuilder(base).append(null, (boolean[]) null, false).toString());\r\n    assertEquals(baseStr + \"[<size=3>]\", new ToStringBuilder(base).append(null, array, false).toString());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\builder\\ToStringBuilderTest.java",
  "methodName" : "testAppendShortArrayWithFieldName",
  "sourceCode" : "// Reflection cycle tests\r\n@Test\r\nvoid testAppendShortArrayWithFieldName() {\r\n    final short[] array = { 1, 2, -3, 4 };\r\n    assertEquals(baseStr + \"[values={1,2,-3,4}]\", new ToStringBuilder(base).append(\"values\", array).toString());\r\n    assertEquals(baseStr + \"[values=<null>]\", new ToStringBuilder(base).append(\"values\", (boolean[]) null).toString());\r\n    assertEquals(baseStr + \"[<null>]\", new ToStringBuilder(base).append(null, (boolean[]) null).toString());\r\n    assertEquals(baseStr + \"[{1,2,-3,4}]\", new ToStringBuilder(base).append(null, array).toString());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\builder\\ToStringBuilderTest.java",
  "methodName" : "testAppendShortArrayWithFieldNameAndFullDetail",
  "sourceCode" : "@Test\r\nvoid testAppendShortArrayWithFieldNameAndFullDetail() {\r\n    final short[] array = { 1, 2, -3, 4 };\r\n    assertEquals(baseStr + \"[values={1,2,-3,4}]\", new ToStringBuilder(base).append(\"values\", array, true).toString());\r\n    assertEquals(baseStr + \"[length=<size=4>]\", new ToStringBuilder(base).append(\"length\", array, false).toString());\r\n    assertEquals(baseStr + \"[values=<null>]\", new ToStringBuilder(base).append(\"values\", (boolean[]) null, true).toString());\r\n    assertEquals(baseStr + \"[<null>]\", new ToStringBuilder(base).append(null, (boolean[]) null, false).toString());\r\n    assertEquals(baseStr + \"[<size=4>]\", new ToStringBuilder(base).append(null, array, false).toString());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\builder\\ToStringBuilderTest.java",
  "methodName" : "testAppendSuper",
  "sourceCode" : "@Test\r\nvoid testAppendSuper() {\r\n    assertEquals(baseStr + \"[]\", new ToStringBuilder(base).appendSuper(\"Integer@8888[]\").toString());\r\n    assertEquals(baseStr + \"[<null>]\", new ToStringBuilder(base).appendSuper(\"Integer@8888[<null>]\").toString());\r\n    assertEquals(baseStr + \"[a=hello]\", new ToStringBuilder(base).appendSuper(\"Integer@8888[]\").append(\"a\", \"hello\").toString());\r\n    assertEquals(baseStr + \"[<null>,a=hello]\", new ToStringBuilder(base).appendSuper(\"Integer@8888[<null>]\").append(\"a\", \"hello\").toString());\r\n    assertEquals(baseStr + \"[a=hello]\", new ToStringBuilder(base).appendSuper(null).append(\"a\", \"hello\").toString());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\builder\\ToStringBuilderTest.java",
  "methodName" : "testAppendToString",
  "sourceCode" : "@Test\r\nvoid testAppendToString() {\r\n    assertEquals(baseStr + \"[]\", new ToStringBuilder(base).appendToString(\"Integer@8888[]\").toString());\r\n    assertEquals(baseStr + \"[<null>]\", new ToStringBuilder(base).appendToString(\"Integer@8888[<null>]\").toString());\r\n    assertEquals(baseStr + \"[a=hello]\", new ToStringBuilder(base).appendToString(\"Integer@8888[]\").append(\"a\", \"hello\").toString());\r\n    assertEquals(baseStr + \"[<null>,a=hello]\", new ToStringBuilder(base).appendToString(\"Integer@8888[<null>]\").append(\"a\", \"hello\").toString());\r\n    assertEquals(baseStr + \"[a=hello]\", new ToStringBuilder(base).appendToString(null).append(\"a\", \"hello\").toString());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\builder\\ToStringBuilderTest.java",
  "methodName" : "testAppendToStringUsingMultiLineStyle",
  "sourceCode" : "@Test\r\nvoid testAppendToStringUsingMultiLineStyle() {\r\n    final MultiLineTestObject obj = new MultiLineTestObject();\r\n    final ToStringBuilder testBuilder = new ToStringBuilder(this, ToStringStyle.MULTI_LINE_STYLE).appendToString(obj.toString());\r\n    assertEquals(-1, testBuilder.toString().indexOf(\"testInt=31337\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\builder\\ToStringBuilderTest.java",
  "methodName" : "testBlank",
  "sourceCode" : "@Test\r\nvoid testBlank() {\r\n    assertEquals(baseStr + \"[]\", new ToStringBuilder(base).toString());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\builder\\ToStringBuilderTest.java",
  "methodName" : "testBoolean",
  "sourceCode" : "@Test\r\nvoid testBoolean() {\r\n    assertEquals(baseStr + \"[true]\", new ToStringBuilder(base).append(true).toString());\r\n    assertEquals(baseStr + \"[a=true]\", new ToStringBuilder(base).append(\"a\", true).toString());\r\n    assertEquals(baseStr + \"[a=true,b=false]\", new ToStringBuilder(base).append(\"a\", true).append(\"b\", false).toString());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\builder\\ToStringBuilderTest.java",
  "methodName" : "testBooleanArray",
  "sourceCode" : "@Test\r\nvoid testBooleanArray() {\r\n    boolean[] array = { true, false, false };\r\n    assertEquals(baseStr + \"[{true,false,false}]\", new ToStringBuilder(base).append(array).toString());\r\n    assertEquals(baseStr + \"[{true,false,false}]\", new ToStringBuilder(base).append((Object) array).toString());\r\n    array = null;\r\n    assertEquals(baseStr + \"[<null>]\", new ToStringBuilder(base).append(array).toString());\r\n    assertEquals(baseStr + \"[<null>]\", new ToStringBuilder(base).append((Object) array).toString());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\builder\\ToStringBuilderTest.java",
  "methodName" : "testBooleanArrayArray",
  "sourceCode" : "@Test\r\nvoid testBooleanArrayArray() {\r\n    boolean[][] array = { { true, false }, null, { false } };\r\n    assertEquals(baseStr + \"[{{true,false},<null>,{false}}]\", new ToStringBuilder(base).append(array).toString());\r\n    assertEquals(baseStr + \"[{{true,false},<null>,{false}}]\", new ToStringBuilder(base).append((Object) array).toString());\r\n    array = null;\r\n    assertEquals(baseStr + \"[<null>]\", new ToStringBuilder(base).append(array).toString());\r\n    assertEquals(baseStr + \"[<null>]\", new ToStringBuilder(base).append((Object) array).toString());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\builder\\ToStringBuilderTest.java",
  "methodName" : "testByte",
  "sourceCode" : "@Test\r\nvoid testByte() {\r\n    assertEquals(baseStr + \"[3]\", new ToStringBuilder(base).append((byte) 3).toString());\r\n    assertEquals(baseStr + \"[a=3]\", new ToStringBuilder(base).append(\"a\", (byte) 3).toString());\r\n    assertEquals(baseStr + \"[a=3,b=4]\", new ToStringBuilder(base).append(\"a\", (byte) 3).append(\"b\", (byte) 4).toString());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\builder\\ToStringBuilderTest.java",
  "methodName" : "testByteArray",
  "sourceCode" : "@Test\r\nvoid testByteArray() {\r\n    byte[] array = { 1, 2, -3, 4 };\r\n    assertEquals(baseStr + \"[{1,2,-3,4}]\", new ToStringBuilder(base).append(array).toString());\r\n    assertEquals(baseStr + \"[{1,2,-3,4}]\", new ToStringBuilder(base).append((Object) array).toString());\r\n    array = null;\r\n    assertEquals(baseStr + \"[<null>]\", new ToStringBuilder(base).append(array).toString());\r\n    assertEquals(baseStr + \"[<null>]\", new ToStringBuilder(base).append((Object) array).toString());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\builder\\ToStringBuilderTest.java",
  "methodName" : "testByteArrayArray",
  "sourceCode" : "@Test\r\nvoid testByteArrayArray() {\r\n    byte[][] array = { { 1, 2 }, null, { 5 } };\r\n    assertEquals(baseStr + \"[{{1,2},<null>,{5}}]\", new ToStringBuilder(base).append(array).toString());\r\n    assertEquals(baseStr + \"[{{1,2},<null>,{5}}]\", new ToStringBuilder(base).append((Object) array).toString());\r\n    array = null;\r\n    assertEquals(baseStr + \"[<null>]\", new ToStringBuilder(base).append(array).toString());\r\n    assertEquals(baseStr + \"[<null>]\", new ToStringBuilder(base).append((Object) array).toString());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\builder\\ToStringBuilderTest.java",
  "methodName" : "testChar",
  "sourceCode" : "@Test\r\nvoid testChar() {\r\n    assertEquals(baseStr + \"[A]\", new ToStringBuilder(base).append((char) 65).toString());\r\n    assertEquals(baseStr + \"[a=A]\", new ToStringBuilder(base).append(\"a\", (char) 65).toString());\r\n    assertEquals(baseStr + \"[a=A,b=B]\", new ToStringBuilder(base).append(\"a\", (char) 65).append(\"b\", (char) 66).toString());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\builder\\ToStringBuilderTest.java",
  "methodName" : "testCharArray",
  "sourceCode" : "@Test\r\nvoid testCharArray() {\r\n    char[] array = { 'A', '2', '_', 'D' };\r\n    assertEquals(baseStr + \"[{A,2,_,D}]\", new ToStringBuilder(base).append(array).toString());\r\n    assertEquals(baseStr + \"[{A,2,_,D}]\", new ToStringBuilder(base).append((Object) array).toString());\r\n    array = null;\r\n    assertEquals(baseStr + \"[<null>]\", new ToStringBuilder(base).append(array).toString());\r\n    assertEquals(baseStr + \"[<null>]\", new ToStringBuilder(base).append((Object) array).toString());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\builder\\ToStringBuilderTest.java",
  "methodName" : "testCharArrayArray",
  "sourceCode" : "@Test\r\nvoid testCharArrayArray() {\r\n    char[][] array = { { 'A', 'B' }, null, { 'p' } };\r\n    assertEquals(baseStr + \"[{{A,B},<null>,{p}}]\", new ToStringBuilder(base).append(array).toString());\r\n    assertEquals(baseStr + \"[{{A,B},<null>,{p}}]\", new ToStringBuilder(base).append((Object) array).toString());\r\n    array = null;\r\n    assertEquals(baseStr + \"[<null>]\", new ToStringBuilder(base).append(array).toString());\r\n    assertEquals(baseStr + \"[<null>]\", new ToStringBuilder(base).append((Object) array).toString());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\builder\\ToStringBuilderTest.java",
  "methodName" : "testConstructorEx1",
  "sourceCode" : "@Test\r\nvoid testConstructorEx1() {\r\n    assertEquals(\"<null>\", new ToStringBuilder(null).toString());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\builder\\ToStringBuilderTest.java",
  "methodName" : "testConstructorEx2",
  "sourceCode" : "@Test\r\nvoid testConstructorEx2() {\r\n    assertEquals(\"<null>\", new ToStringBuilder(null, null).toString());\r\n    new ToStringBuilder(this.base, null).toString();\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\builder\\ToStringBuilderTest.java",
  "methodName" : "testConstructorEx3",
  "sourceCode" : "@Test\r\nvoid testConstructorEx3() {\r\n    assertEquals(\"<null>\", new ToStringBuilder(null, null, null).toString());\r\n    new ToStringBuilder(this.base, null, null).toString();\r\n    new ToStringBuilder(this.base, ToStringStyle.DEFAULT_STYLE, null).toString();\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\builder\\ToStringBuilderTest.java",
  "methodName" : "testConstructToStringBuilder",
  "sourceCode" : "@Test\r\nvoid testConstructToStringBuilder() {\r\n    final ToStringBuilder stringBuilder1 = new ToStringBuilder(base, null, null);\r\n    final ToStringBuilder stringBuilder2 = new ToStringBuilder(base, ToStringStyle.DEFAULT_STYLE, new StringBuffer(1024));\r\n    assertEquals(ToStringStyle.DEFAULT_STYLE, stringBuilder1.getStyle());\r\n    assertNotNull(stringBuilder1.getStringBuffer());\r\n    assertNotNull(stringBuilder1.toString());\r\n    assertEquals(ToStringStyle.DEFAULT_STYLE, stringBuilder2.getStyle());\r\n    assertNotNull(stringBuilder2.getStringBuffer());\r\n    assertNotNull(stringBuilder2.toString());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\builder\\ToStringBuilderTest.java",
  "methodName" : "testDouble",
  "sourceCode" : "@Test\r\nvoid testDouble() {\r\n    assertEquals(baseStr + \"[3.2]\", new ToStringBuilder(base).append(3.2).toString());\r\n    assertEquals(baseStr + \"[a=3.2]\", new ToStringBuilder(base).append(\"a\", 3.2).toString());\r\n    assertEquals(baseStr + \"[a=3.2,b=4.3]\", new ToStringBuilder(base).append(\"a\", 3.2).append(\"b\", 4.3).toString());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\builder\\ToStringBuilderTest.java",
  "methodName" : "testDoubleArray",
  "sourceCode" : "@Test\r\nvoid testDoubleArray() {\r\n    double[] array = { 1.0, 2.9876, -3.00001, 4.3 };\r\n    assertEquals(baseStr + \"[{1.0,2.9876,-3.00001,4.3}]\", new ToStringBuilder(base).append(array).toString());\r\n    assertEquals(baseStr + \"[{1.0,2.9876,-3.00001,4.3}]\", new ToStringBuilder(base).append((Object) array).toString());\r\n    array = null;\r\n    assertEquals(baseStr + \"[<null>]\", new ToStringBuilder(base).append(array).toString());\r\n    assertEquals(baseStr + \"[<null>]\", new ToStringBuilder(base).append((Object) array).toString());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\builder\\ToStringBuilderTest.java",
  "methodName" : "testDoubleArrayArray",
  "sourceCode" : "@Test\r\nvoid testDoubleArrayArray() {\r\n    double[][] array = { { 1.0, 2.29686 }, null, { Double.NaN } };\r\n    assertEquals(baseStr + \"[{{1.0,2.29686},<null>,{NaN}}]\", new ToStringBuilder(base).append(array).toString());\r\n    assertEquals(baseStr + \"[{{1.0,2.29686},<null>,{NaN}}]\", new ToStringBuilder(base).append((Object) array).toString());\r\n    array = null;\r\n    assertEquals(baseStr + \"[<null>]\", new ToStringBuilder(base).append(array).toString());\r\n    assertEquals(baseStr + \"[<null>]\", new ToStringBuilder(base).append((Object) array).toString());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\builder\\ToStringBuilderTest.java",
  "methodName" : "testFloat",
  "sourceCode" : "@Test\r\nvoid testFloat() {\r\n    assertEquals(baseStr + \"[3.2]\", new ToStringBuilder(base).append((float) 3.2).toString());\r\n    assertEquals(baseStr + \"[a=3.2]\", new ToStringBuilder(base).append(\"a\", (float) 3.2).toString());\r\n    assertEquals(baseStr + \"[a=3.2,b=4.3]\", new ToStringBuilder(base).append(\"a\", (float) 3.2).append(\"b\", (float) 4.3).toString());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\builder\\ToStringBuilderTest.java",
  "methodName" : "testFloatArray",
  "sourceCode" : "@Test\r\nvoid testFloatArray() {\r\n    float[] array = { 1.0f, 2.9876f, -3.00001f, 4.3f };\r\n    assertEquals(baseStr + \"[{1.0,2.9876,-3.00001,4.3}]\", new ToStringBuilder(base).append(array).toString());\r\n    assertEquals(baseStr + \"[{1.0,2.9876,-3.00001,4.3}]\", new ToStringBuilder(base).append((Object) array).toString());\r\n    array = null;\r\n    assertEquals(baseStr + \"[<null>]\", new ToStringBuilder(base).append(array).toString());\r\n    assertEquals(baseStr + \"[<null>]\", new ToStringBuilder(base).append((Object) array).toString());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\builder\\ToStringBuilderTest.java",
  "methodName" : "testFloatArrayArray",
  "sourceCode" : "@Test\r\nvoid testFloatArrayArray() {\r\n    float[][] array = { { 1.0f, 2.29686f }, null, { Float.NaN } };\r\n    assertEquals(baseStr + \"[{{1.0,2.29686},<null>,{NaN}}]\", new ToStringBuilder(base).append(array).toString());\r\n    assertEquals(baseStr + \"[{{1.0,2.29686},<null>,{NaN}}]\", new ToStringBuilder(base).append((Object) array).toString());\r\n    array = null;\r\n    assertEquals(baseStr + \"[<null>]\", new ToStringBuilder(base).append(array).toString());\r\n    assertEquals(baseStr + \"[<null>]\", new ToStringBuilder(base).append((Object) array).toString());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\builder\\ToStringBuilderTest.java",
  "methodName" : "testGetSetDefault",
  "sourceCode" : "@Test\r\nvoid testGetSetDefault() {\r\n    try {\r\n        ToStringBuilder.setDefaultStyle(ToStringStyle.NO_FIELD_NAMES_STYLE);\r\n        assertSame(ToStringStyle.NO_FIELD_NAMES_STYLE, ToStringBuilder.getDefaultStyle());\r\n    } finally {\r\n        // reset for other tests\r\n        ToStringBuilder.setDefaultStyle(ToStringStyle.DEFAULT_STYLE);\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\builder\\ToStringBuilderTest.java",
  "methodName" : "testInheritedReflectionStatics",
  "sourceCode" : "/**\r\n * Tests ReflectionToStringBuilder.toString() for statics.\r\n */\r\n@Test\r\nvoid testInheritedReflectionStatics() {\r\n    final InheritedReflectionStaticFieldsFixture instance1 = new InheritedReflectionStaticFieldsFixture();\r\n    assertEquals(toBaseString(instance1) + \"[staticInt2=67890,staticString2=staticString2]\", ReflectionToStringBuilder.toString(instance1, null, false, true, InheritedReflectionStaticFieldsFixture.class));\r\n    assertEquals(toBaseString(instance1) + \"[staticInt2=67890,staticString2=staticString2,staticInt=12345,staticString=staticString]\", ReflectionToStringBuilder.toString(instance1, null, false, true, SimpleReflectionStaticFieldsFixture.class));\r\n    assertEquals(toBaseString(instance1) + \"[staticInt2=67890,staticString2=staticString2,staticInt=12345,staticString=staticString]\", this.toStringWithStatics(instance1, null, SimpleReflectionStaticFieldsFixture.class));\r\n    assertEquals(toBaseString(instance1) + \"[staticInt2=67890,staticString2=staticString2,staticInt=12345,staticString=staticString]\", this.toStringWithStatics(instance1, null, SimpleReflectionStaticFieldsFixture.class));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\builder\\ToStringBuilderTest.java",
  "methodName" : "testInnerClassReflection",
  "sourceCode" : "@Test\r\nvoid testInnerClassReflection() {\r\n    final Outer outer = new Outer();\r\n    assertEquals(toBaseString(outer) + \"[inner=\" + toBaseString(outer.inner) + \"[]]\", outer.toString());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\builder\\ToStringBuilderTest.java",
  "methodName" : "testInt",
  "sourceCode" : "@Test\r\nvoid testInt() {\r\n    assertEquals(baseStr + \"[3]\", new ToStringBuilder(base).append(3).toString());\r\n    assertEquals(baseStr + \"[a=3]\", new ToStringBuilder(base).append(\"a\", 3).toString());\r\n    assertEquals(baseStr + \"[a=3,b=4]\", new ToStringBuilder(base).append(\"a\", 3).append(\"b\", 4).toString());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\builder\\ToStringBuilderTest.java",
  "methodName" : "testIntArray",
  "sourceCode" : "@Test\r\nvoid testIntArray() {\r\n    int[] array = { 1, 2, -3, 4 };\r\n    assertEquals(baseStr + \"[{1,2,-3,4}]\", new ToStringBuilder(base).append(array).toString());\r\n    assertEquals(baseStr + \"[{1,2,-3,4}]\", new ToStringBuilder(base).append((Object) array).toString());\r\n    array = null;\r\n    assertEquals(baseStr + \"[<null>]\", new ToStringBuilder(base).append(array).toString());\r\n    assertEquals(baseStr + \"[<null>]\", new ToStringBuilder(base).append((Object) array).toString());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\builder\\ToStringBuilderTest.java",
  "methodName" : "testIntArrayArray",
  "sourceCode" : "@Test\r\nvoid testIntArrayArray() {\r\n    int[][] array = { { 1, 2 }, null, { 5 } };\r\n    assertEquals(baseStr + \"[{{1,2},<null>,{5}}]\", new ToStringBuilder(base).append(array).toString());\r\n    assertEquals(baseStr + \"[{{1,2},<null>,{5}}]\", new ToStringBuilder(base).append((Object) array).toString());\r\n    array = null;\r\n    assertEquals(baseStr + \"[<null>]\", new ToStringBuilder(base).append(array).toString());\r\n    assertEquals(baseStr + \"[<null>]\", new ToStringBuilder(base).append((Object) array).toString());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\builder\\ToStringBuilderTest.java",
  "methodName" : "testLong",
  "sourceCode" : "@Test\r\nvoid testLong() {\r\n    assertEquals(baseStr + \"[3]\", new ToStringBuilder(base).append(3L).toString());\r\n    assertEquals(baseStr + \"[a=3]\", new ToStringBuilder(base).append(\"a\", 3L).toString());\r\n    assertEquals(baseStr + \"[a=3,b=4]\", new ToStringBuilder(base).append(\"a\", 3L).append(\"b\", 4L).toString());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\builder\\ToStringBuilderTest.java",
  "methodName" : "testLongArray",
  "sourceCode" : "@Test\r\nvoid testLongArray() {\r\n    long[] array = { 1, 2, -3, 4 };\r\n    assertEquals(baseStr + \"[{1,2,-3,4}]\", new ToStringBuilder(base).append(array).toString());\r\n    assertEquals(baseStr + \"[{1,2,-3,4}]\", new ToStringBuilder(base).append((Object) array).toString());\r\n    array = null;\r\n    assertEquals(baseStr + \"[<null>]\", new ToStringBuilder(base).append(array).toString());\r\n    assertEquals(baseStr + \"[<null>]\", new ToStringBuilder(base).append((Object) array).toString());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\builder\\ToStringBuilderTest.java",
  "methodName" : "testLongArrayArray",
  "sourceCode" : "@Test\r\nvoid testLongArrayArray() {\r\n    long[][] array = { { 1, 2 }, null, { 5 } };\r\n    assertEquals(baseStr + \"[{{1,2},<null>,{5}}]\", new ToStringBuilder(base).append(array).toString());\r\n    assertEquals(baseStr + \"[{{1,2},<null>,{5}}]\", new ToStringBuilder(base).append((Object) array).toString());\r\n    array = null;\r\n    assertEquals(baseStr + \"[<null>]\", new ToStringBuilder(base).append(array).toString());\r\n    assertEquals(baseStr + \"[<null>]\", new ToStringBuilder(base).append((Object) array).toString());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\builder\\ToStringBuilderTest.java",
  "methodName" : "testObject",
  "sourceCode" : "@Test\r\nvoid testObject() {\r\n    final Integer i3 = Integer.valueOf(3);\r\n    final Integer i4 = Integer.valueOf(4);\r\n    assertEquals(baseStr + \"[<null>]\", new ToStringBuilder(base).append((Object) null).toString());\r\n    assertEquals(baseStr + \"[3]\", new ToStringBuilder(base).append(i3).toString());\r\n    assertEquals(baseStr + \"[a=<null>]\", new ToStringBuilder(base).append(\"a\", (Object) null).toString());\r\n    assertEquals(baseStr + \"[a=3]\", new ToStringBuilder(base).append(\"a\", i3).toString());\r\n    assertEquals(baseStr + \"[a=3,b=4]\", new ToStringBuilder(base).append(\"a\", i3).append(\"b\", i4).toString());\r\n    assertEquals(baseStr + \"[a=<Integer>]\", new ToStringBuilder(base).append(\"a\", i3, false).toString());\r\n    assertEquals(baseStr + \"[a=<size=0>]\", new ToStringBuilder(base).append(\"a\", new ArrayList<>(), false).toString());\r\n    assertEquals(baseStr + \"[a=[]]\", new ToStringBuilder(base).append(\"a\", new ArrayList<>(), true).toString());\r\n    assertEquals(baseStr + \"[a=<size=0>]\", new ToStringBuilder(base).append(\"a\", new HashMap<>(), false).toString());\r\n    assertEquals(baseStr + \"[a={}]\", new ToStringBuilder(base).append(\"a\", new HashMap<>(), true).toString());\r\n    assertEquals(baseStr + \"[a=<size=0>]\", new ToStringBuilder(base).append(\"a\", (Object) new String[0], false).toString());\r\n    assertEquals(baseStr + \"[a={}]\", new ToStringBuilder(base).append(\"a\", (Object) new String[0], true).toString());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\builder\\ToStringBuilderTest.java",
  "methodName" : "testObjectArray",
  "sourceCode" : "@Test\r\nvoid testObjectArray() {\r\n    Object[] array = { null, base, new int[] { 3, 6 } };\r\n    assertEquals(baseStr + \"[{<null>,5,{3,6}}]\", new ToStringBuilder(base).append(array).toString());\r\n    assertEquals(baseStr + \"[{<null>,5,{3,6}}]\", new ToStringBuilder(base).append((Object) array).toString());\r\n    array = null;\r\n    assertEquals(baseStr + \"[<null>]\", new ToStringBuilder(base).append(array).toString());\r\n    assertEquals(baseStr + \"[<null>]\", new ToStringBuilder(base).append((Object) array).toString());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\builder\\ToStringBuilderTest.java",
  "methodName" : "testObjectBuild",
  "sourceCode" : "@Test\r\nvoid testObjectBuild() {\r\n    final Integer i3 = Integer.valueOf(3);\r\n    final Integer i4 = Integer.valueOf(4);\r\n    assertEquals(baseStr + \"[<null>]\", new ToStringBuilder(base).append((Object) null).build());\r\n    assertEquals(baseStr + \"[3]\", new ToStringBuilder(base).append(i3).build());\r\n    assertEquals(baseStr + \"[a=<null>]\", new ToStringBuilder(base).append(\"a\", (Object) null).build());\r\n    assertEquals(baseStr + \"[a=3]\", new ToStringBuilder(base).append(\"a\", i3).build());\r\n    assertEquals(baseStr + \"[a=3,b=4]\", new ToStringBuilder(base).append(\"a\", i3).append(\"b\", i4).build());\r\n    assertEquals(baseStr + \"[a=<Integer>]\", new ToStringBuilder(base).append(\"a\", i3, false).build());\r\n    assertEquals(baseStr + \"[a=<size=0>]\", new ToStringBuilder(base).append(\"a\", new ArrayList<>(), false).build());\r\n    assertEquals(baseStr + \"[a=[]]\", new ToStringBuilder(base).append(\"a\", new ArrayList<>(), true).build());\r\n    assertEquals(baseStr + \"[a=<size=0>]\", new ToStringBuilder(base).append(\"a\", new HashMap<>(), false).build());\r\n    assertEquals(baseStr + \"[a={}]\", new ToStringBuilder(base).append(\"a\", new HashMap<>(), true).build());\r\n    assertEquals(baseStr + \"[a=<size=0>]\", new ToStringBuilder(base).append(\"a\", (Object) new String[0], false).build());\r\n    assertEquals(baseStr + \"[a={}]\", new ToStringBuilder(base).append(\"a\", (Object) new String[0], true).build());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\builder\\ToStringBuilderTest.java",
  "methodName" : "testObjectCycle",
  "sourceCode" : "@Test\r\nvoid testObjectCycle() {\r\n    final ObjectCycle a = new ObjectCycle();\r\n    final ObjectCycle b = new ObjectCycle();\r\n    a.obj = b;\r\n    b.obj = a;\r\n    final String expected = toBaseString(a) + \"[\" + toBaseString(b) + \"[\" + toBaseString(a) + \"]]\";\r\n    assertEquals(expected, a.toString());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\builder\\ToStringBuilderTest.java",
  "methodName" : "testReflectionArrayAndObjectCycle",
  "sourceCode" : "/**\r\n * Test a nasty combination of arrays and Objects pointing to each other. objects[0] -&gt; SimpleReflectionTestFixture[ o -&gt; objects ]\r\n */\r\n@Test\r\nvoid testReflectionArrayAndObjectCycle() {\r\n    final Object[] objects = new Object[1];\r\n    final SimpleReflectionTestFixture simple = new SimpleReflectionTestFixture(objects);\r\n    objects[0] = simple;\r\n    assertEquals(toBaseString(objects) + \"[{\" + toBaseString(simple) + \"[o=\" + toBaseString(objects) + \"]}]\", ToStringBuilder.reflectionToString(objects));\r\n    assertEquals(toBaseString(simple) + \"[o={\" + toBaseString(simple) + \"}]\", ToStringBuilder.reflectionToString(simple));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\builder\\ToStringBuilderTest.java",
  "methodName" : "testReflectionArrayArrayCycle",
  "sourceCode" : "@Test\r\nvoid testReflectionArrayArrayCycle() {\r\n    final Object[][] objects = new Object[2][2];\r\n    objects[0][0] = objects;\r\n    objects[0][1] = objects;\r\n    objects[1][0] = objects;\r\n    objects[1][1] = objects;\r\n    final String basicToString = toBaseString(objects);\r\n    assertEquals(basicToString + \"[{{\" + basicToString + \",\" + basicToString + \"},{\" + basicToString + \",\" + basicToString + \"}}]\", ToStringBuilder.reflectionToString(objects));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\builder\\ToStringBuilderTest.java",
  "methodName" : "testReflectionArrayCycle",
  "sourceCode" : "/**\r\n * Test an array element pointing to its container.\r\n */\r\n@Test\r\nvoid testReflectionArrayCycle() {\r\n    final Object[] objects = new Object[1];\r\n    objects[0] = objects;\r\n    assertEquals(toBaseString(objects) + \"[{\" + toBaseString(objects) + \"}]\", ToStringBuilder.reflectionToString(objects));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\builder\\ToStringBuilderTest.java",
  "methodName" : "testReflectionArrayCycleLevel2",
  "sourceCode" : "/**\r\n * Test an array element pointing to its container.\r\n */\r\n@Test\r\nvoid testReflectionArrayCycleLevel2() {\r\n    final Object[] objects = new Object[1];\r\n    final Object[] objectsLevel2 = new Object[1];\r\n    objects[0] = objectsLevel2;\r\n    objectsLevel2[0] = objects;\r\n    assertEquals(toBaseString(objects) + \"[{{\" + toBaseString(objects) + \"}}]\", ToStringBuilder.reflectionToString(objects));\r\n    assertEquals(toBaseString(objectsLevel2) + \"[{{\" + toBaseString(objectsLevel2) + \"}}]\", ToStringBuilder.reflectionToString(objectsLevel2));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\builder\\ToStringBuilderTest.java",
  "methodName" : "testReflectionBoolean",
  "sourceCode" : "/**\r\n * Test wrapper for char boolean.\r\n */\r\n@Test\r\nvoid testReflectionBoolean() {\r\n    Boolean b;\r\n    b = Boolean.TRUE;\r\n    assertEquals(toBaseString(b) + \"[value=true]\", ToStringBuilder.reflectionToString(b));\r\n    b = Boolean.FALSE;\r\n    assertEquals(toBaseString(b) + \"[value=false]\", ToStringBuilder.reflectionToString(b));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\builder\\ToStringBuilderTest.java",
  "methodName" : "testReflectionBooleanArray",
  "sourceCode" : "@Test\r\nvoid testReflectionBooleanArray() {\r\n    boolean[] array = { true, false, false };\r\n    final String baseString = toBaseString(array);\r\n    assertEquals(baseString + \"[{true,false,false}]\", ToStringBuilder.reflectionToString(array));\r\n    array = null;\r\n    assertReflectionArray(\"<null>\", array);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\builder\\ToStringBuilderTest.java",
  "methodName" : "testReflectionBooleanArrayArray",
  "sourceCode" : "@Test\r\nvoid testReflectionBooleanArrayArray() {\r\n    boolean[][] array = { { true, false }, null, { false } };\r\n    final String baseString = toBaseString(array);\r\n    assertEquals(baseString + \"[{{true,false},<null>,{false}}]\", ToStringBuilder.reflectionToString(array));\r\n    assertEquals(baseString + \"[{{true,false},<null>,{false}}]\", ToStringBuilder.reflectionToString(array));\r\n    array = null;\r\n    assertReflectionArray(\"<null>\", array);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\builder\\ToStringBuilderTest.java",
  "methodName" : "testReflectionByteArray",
  "sourceCode" : "@Test\r\nvoid testReflectionByteArray() {\r\n    byte[] array = { 1, 2, -3, 4 };\r\n    final String baseString = toBaseString(array);\r\n    assertEquals(baseString + \"[{1,2,-3,4}]\", ToStringBuilder.reflectionToString(array));\r\n    array = null;\r\n    assertReflectionArray(\"<null>\", array);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\builder\\ToStringBuilderTest.java",
  "methodName" : "testReflectionByteArrayArray",
  "sourceCode" : "@Test\r\nvoid testReflectionByteArrayArray() {\r\n    byte[][] array = { { 1, 2 }, null, { 5 } };\r\n    final String baseString = toBaseString(array);\r\n    assertEquals(baseString + \"[{{1,2},<null>,{5}}]\", ToStringBuilder.reflectionToString(array));\r\n    array = null;\r\n    assertReflectionArray(\"<null>\", array);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\builder\\ToStringBuilderTest.java",
  "methodName" : "testReflectionCharacter",
  "sourceCode" : "/**\r\n * Test wrapper for char primitive.\r\n */\r\n@Test\r\nvoid testReflectionCharacter() {\r\n    final Character c = 'A';\r\n    assertEquals(toBaseString(c) + \"[value=A]\", ToStringBuilder.reflectionToString(c));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\builder\\ToStringBuilderTest.java",
  "methodName" : "testReflectionCharArray",
  "sourceCode" : "@Test\r\nvoid testReflectionCharArray() {\r\n    char[] array = { 'A', '2', '_', 'D' };\r\n    final String baseString = toBaseString(array);\r\n    assertEquals(baseString + \"[{A,2,_,D}]\", ToStringBuilder.reflectionToString(array));\r\n    array = null;\r\n    assertReflectionArray(\"<null>\", array);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\builder\\ToStringBuilderTest.java",
  "methodName" : "testReflectionCharArrayArray",
  "sourceCode" : "@Test\r\nvoid testReflectionCharArrayArray() {\r\n    char[][] array = { { 'A', 'B' }, null, { 'p' } };\r\n    final String baseString = toBaseString(array);\r\n    assertEquals(baseString + \"[{{A,B},<null>,{p}}]\", ToStringBuilder.reflectionToString(array));\r\n    array = null;\r\n    assertReflectionArray(\"<null>\", array);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\builder\\ToStringBuilderTest.java",
  "methodName" : "testReflectionDoubleArray",
  "sourceCode" : "@Test\r\nvoid testReflectionDoubleArray() {\r\n    double[] array = { 1.0, 2.9876, -3.00001, 4.3 };\r\n    final String baseString = toBaseString(array);\r\n    assertEquals(baseString + \"[{1.0,2.9876,-3.00001,4.3}]\", ToStringBuilder.reflectionToString(array));\r\n    array = null;\r\n    assertReflectionArray(\"<null>\", array);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\builder\\ToStringBuilderTest.java",
  "methodName" : "testReflectionDoubleArrayArray",
  "sourceCode" : "@Test\r\nvoid testReflectionDoubleArrayArray() {\r\n    double[][] array = { { 1.0, 2.29686 }, null, { Double.NaN } };\r\n    final String baseString = toBaseString(array);\r\n    assertEquals(baseString + \"[{{1.0,2.29686},<null>,{NaN}}]\", ToStringBuilder.reflectionToString(array));\r\n    array = null;\r\n    assertReflectionArray(\"<null>\", array);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\builder\\ToStringBuilderTest.java",
  "methodName" : "testReflectionFloatArray",
  "sourceCode" : "@Test\r\nvoid testReflectionFloatArray() {\r\n    float[] array = { 1.0f, 2.9876f, -3.00001f, 4.3f };\r\n    final String baseString = toBaseString(array);\r\n    assertEquals(baseString + \"[{1.0,2.9876,-3.00001,4.3}]\", ToStringBuilder.reflectionToString(array));\r\n    array = null;\r\n    assertReflectionArray(\"<null>\", array);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\builder\\ToStringBuilderTest.java",
  "methodName" : "testReflectionFloatArrayArray",
  "sourceCode" : "@Test\r\nvoid testReflectionFloatArrayArray() {\r\n    float[][] array = { { 1.0f, 2.29686f }, null, { Float.NaN } };\r\n    final String baseString = toBaseString(array);\r\n    assertEquals(baseString + \"[{{1.0,2.29686},<null>,{NaN}}]\", ToStringBuilder.reflectionToString(array));\r\n    array = null;\r\n    assertReflectionArray(\"<null>\", array);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\builder\\ToStringBuilderTest.java",
  "methodName" : "testReflectionHierarchy",
  "sourceCode" : "@Test\r\nvoid testReflectionHierarchy() {\r\n    final ReflectionTestFixtureA baseA = new ReflectionTestFixtureA();\r\n    String baseString = toBaseString(baseA);\r\n    assertEquals(baseString + \"[a=a]\", ToStringBuilder.reflectionToString(baseA));\r\n    assertEquals(baseString + \"[a=a]\", ToStringBuilder.reflectionToString(baseA, null));\r\n    assertEquals(baseString + \"[a=a]\", ToStringBuilder.reflectionToString(baseA, null, false));\r\n    assertEquals(baseString + \"[a=a,transientA=t]\", ToStringBuilder.reflectionToString(baseA, null, true));\r\n    assertEquals(baseString + \"[a=a]\", ToStringBuilder.reflectionToString(baseA, null, false, null));\r\n    assertEquals(baseString + \"[a=a]\", ToStringBuilder.reflectionToString(baseA, null, false, Object.class));\r\n    assertEquals(baseString + \"[a=a]\", ToStringBuilder.reflectionToString(baseA, null, false, ReflectionTestFixtureA.class));\r\n    final ReflectionTestFixtureB baseB = new ReflectionTestFixtureB();\r\n    baseString = toBaseString(baseB);\r\n    assertEquals(baseString + \"[b=b,a=a]\", ToStringBuilder.reflectionToString(baseB));\r\n    assertEquals(baseString + \"[b=b,a=a]\", ToStringBuilder.reflectionToString(baseB));\r\n    assertEquals(baseString + \"[b=b,a=a]\", ToStringBuilder.reflectionToString(baseB, null));\r\n    assertEquals(baseString + \"[b=b,a=a]\", ToStringBuilder.reflectionToString(baseB, null, false));\r\n    assertEquals(baseString + \"[b=b,transientB=t,a=a,transientA=t]\", ToStringBuilder.reflectionToString(baseB, null, true));\r\n    assertEquals(baseString + \"[b=b,a=a]\", ToStringBuilder.reflectionToString(baseB, null, false, null));\r\n    assertEquals(baseString + \"[b=b,a=a]\", ToStringBuilder.reflectionToString(baseB, null, false, Object.class));\r\n    assertEquals(baseString + \"[b=b,a=a]\", ToStringBuilder.reflectionToString(baseB, null, false, ReflectionTestFixtureA.class));\r\n    assertEquals(baseString + \"[b=b]\", ToStringBuilder.reflectionToString(baseB, null, false, ReflectionTestFixtureB.class));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\builder\\ToStringBuilderTest.java",
  "methodName" : "testReflectionHierarchyArrayList",
  "sourceCode" : "// Reflection hierarchy tests\r\n@Test\r\nvoid testReflectionHierarchyArrayList() {\r\n    // LANG-1337 without this, the generated string can differ depending on the JVM version/vendor\r\n    final List<Object> list = new ArrayList<>(ARRAYLIST_INITIAL_CAPACITY);\r\n    final String baseString = toBaseString(list);\r\n    final String expectedWithTransients = baseString + \"[elementData={<null>,<null>,<null>,<null>,<null>,<null>,<null>,<null>,<null>,<null>},size=0,modCount=0]\";\r\n    final String toStringWithTransients = ToStringBuilder.reflectionToString(list, null, true);\r\n    if (!expectedWithTransients.equals(toStringWithTransients)) {\r\n        assertEquals(expectedWithTransients, toStringWithTransients);\r\n    }\r\n    final String expectedWithoutTransients = baseString + \"[size=0]\";\r\n    final String toStringWithoutTransients = ToStringBuilder.reflectionToString(list, null, false);\r\n    if (!expectedWithoutTransients.equals(toStringWithoutTransients)) {\r\n        assertEquals(expectedWithoutTransients, toStringWithoutTransients);\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\builder\\ToStringBuilderTest.java",
  "methodName" : "testReflectionIntArray",
  "sourceCode" : "@Test\r\nvoid testReflectionIntArray() {\r\n    int[] array = { 1, 2, -3, 4 };\r\n    final String baseString = toBaseString(array);\r\n    assertEquals(baseString + \"[{1,2,-3,4}]\", ToStringBuilder.reflectionToString(array));\r\n    array = null;\r\n    assertReflectionArray(\"<null>\", array);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\builder\\ToStringBuilderTest.java",
  "methodName" : "testReflectionIntArrayArray",
  "sourceCode" : "@Test\r\nvoid testReflectionIntArrayArray() {\r\n    int[][] array = { { 1, 2 }, null, { 5 } };\r\n    final String baseString = toBaseString(array);\r\n    assertEquals(baseString + \"[{{1,2},<null>,{5}}]\", ToStringBuilder.reflectionToString(array));\r\n    array = null;\r\n    assertReflectionArray(\"<null>\", array);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\builder\\ToStringBuilderTest.java",
  "methodName" : "testReflectionInteger",
  "sourceCode" : "/**\r\n * Test wrapper for int primitive.\r\n */\r\n@Test\r\nvoid testReflectionInteger() {\r\n    assertEquals(baseStr + \"[value=5]\", ToStringBuilder.reflectionToString(base));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\builder\\ToStringBuilderTest.java",
  "methodName" : "testReflectionLongArray",
  "sourceCode" : "@Test\r\nvoid testReflectionLongArray() {\r\n    long[] array = { 1, 2, -3, 4 };\r\n    final String baseString = toBaseString(array);\r\n    assertEquals(baseString + \"[{1,2,-3,4}]\", ToStringBuilder.reflectionToString(array));\r\n    array = null;\r\n    assertReflectionArray(\"<null>\", array);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\builder\\ToStringBuilderTest.java",
  "methodName" : "testReflectionLongArrayArray",
  "sourceCode" : "@Test\r\nvoid testReflectionLongArrayArray() {\r\n    long[][] array = { { 1, 2 }, null, { 5 } };\r\n    final String baseString = toBaseString(array);\r\n    assertEquals(baseString + \"[{{1,2},<null>,{5}}]\", ToStringBuilder.reflectionToString(array));\r\n    array = null;\r\n    assertReflectionArray(\"<null>\", array);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\builder\\ToStringBuilderTest.java",
  "methodName" : "testReflectionNull",
  "sourceCode" : "@Test\r\nvoid testReflectionNull() {\r\n    assertEquals(\"<null>\", ReflectionToStringBuilder.toString(null));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\builder\\ToStringBuilderTest.java",
  "methodName" : "testReflectionObjectArray",
  "sourceCode" : "@Test\r\nvoid testReflectionObjectArray() {\r\n    Object[] array = { null, base, new int[] { 3, 6 } };\r\n    final String baseString = toBaseString(array);\r\n    assertEquals(baseString + \"[{<null>,5,{3,6}}]\", ToStringBuilder.reflectionToString(array));\r\n    array = null;\r\n    assertReflectionArray(\"<null>\", array);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\builder\\ToStringBuilderTest.java",
  "methodName" : "testReflectionObjectCycle",
  "sourceCode" : "/**\r\n * Test Objects pointing to each other.\r\n */\r\n@Test\r\nvoid testReflectionObjectCycle() {\r\n    final ReflectionTestCycleA a = new ReflectionTestCycleA();\r\n    final ReflectionTestCycleB b = new ReflectionTestCycleB();\r\n    a.b = b;\r\n    b.a = a;\r\n    assertEquals(toBaseString(a) + \"[b=\" + toBaseString(b) + \"[a=\" + toBaseString(a) + \"]]\", a.toString());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\builder\\ToStringBuilderTest.java",
  "methodName" : "testReflectionShort2DArray",
  "sourceCode" : "@Test\r\nvoid testReflectionShort2DArray() {\r\n    short[][] array = { { 1, 2 }, null, { 5 } };\r\n    final String baseString = toBaseString(array);\r\n    assertEquals(baseString + \"[{{1,2},<null>,{5}}]\", ToStringBuilder.reflectionToString(array));\r\n    array = null;\r\n    assertReflectionArray(\"<null>\", array);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\builder\\ToStringBuilderTest.java",
  "methodName" : "testReflectionShortArray",
  "sourceCode" : "@Test\r\nvoid testReflectionShortArray() {\r\n    short[] array = { 1, 2, -3, 4 };\r\n    final String baseString = toBaseString(array);\r\n    assertEquals(baseString + \"[{1,2,-3,4}]\", ToStringBuilder.reflectionToString(array));\r\n    array = null;\r\n    assertReflectionArray(\"<null>\", array);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\builder\\ToStringBuilderTest.java",
  "methodName" : "testReflectionStatics",
  "sourceCode" : "/**\r\n * Tests ReflectionToStringBuilder.toString() for statics.\r\n */\r\n@Test\r\nvoid testReflectionStatics() {\r\n    final ReflectionStaticFieldsFixture instance1 = new ReflectionStaticFieldsFixture();\r\n    assertEquals(toBaseString(instance1) + \"[instanceInt=67890,instanceString=instanceString,staticInt=12345,staticString=staticString]\", ReflectionToStringBuilder.toString(instance1, null, false, true, ReflectionStaticFieldsFixture.class));\r\n    assertEquals(toBaseString(instance1) + \"[instanceInt=67890,instanceString=instanceString,staticInt=12345,staticString=staticString,staticTransientInt=54321,staticTransientString=staticTransientString,transientInt=98765,transientString=transientString]\", ReflectionToStringBuilder.toString(instance1, null, true, true, ReflectionStaticFieldsFixture.class));\r\n    assertEquals(toBaseString(instance1) + \"[instanceInt=67890,instanceString=instanceString,staticInt=12345,staticString=staticString]\", this.toStringWithStatics(instance1, null, ReflectionStaticFieldsFixture.class));\r\n    assertEquals(toBaseString(instance1) + \"[instanceInt=67890,instanceString=instanceString,staticInt=12345,staticString=staticString]\", this.toStringWithStatics(instance1, null, ReflectionStaticFieldsFixture.class));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\builder\\ToStringBuilderTest.java",
  "methodName" : "testSelfInstanceTwoVarsReflectionObjectCycle",
  "sourceCode" : "/**\r\n * Test a class that defines an ivar pointing to itself. This test was created to show that handling cyclical object resulted in a missing endFieldSeparator\r\n * call.\r\n */\r\n@Test\r\nvoid testSelfInstanceTwoVarsReflectionObjectCycle() {\r\n    final SelfInstanceTwoVarsReflectionTestFixture test = new SelfInstanceTwoVarsReflectionTestFixture();\r\n    assertEquals(toBaseString(test) + \"[otherType=\" + test.getOtherType().toString() + \",typeIsSelf=\" + toBaseString(test) + \"]\", test.toString());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\builder\\ToStringBuilderTest.java",
  "methodName" : "testSelfInstanceVarReflectionObjectCycle",
  "sourceCode" : "/**\r\n * Test a class that defines an ivar pointing to itself.\r\n */\r\n@Test\r\nvoid testSelfInstanceVarReflectionObjectCycle() {\r\n    final SelfInstanceVarReflectionTestFixture test = new SelfInstanceVarReflectionTestFixture();\r\n    assertEquals(toBaseString(test) + \"[typeIsSelf=\" + toBaseString(test) + \"]\", test.toString());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\builder\\ToStringBuilderTest.java",
  "methodName" : "testSetDefaultEx",
  "sourceCode" : "@Test\r\nvoid testSetDefaultEx() {\r\n    assertNullPointerException(() -> ToStringBuilder.setDefaultStyle(null));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\builder\\ToStringBuilderTest.java",
  "methodName" : "testShort",
  "sourceCode" : "@Test\r\nvoid testShort() {\r\n    assertEquals(baseStr + \"[3]\", new ToStringBuilder(base).append((short) 3).toString());\r\n    assertEquals(baseStr + \"[a=3]\", new ToStringBuilder(base).append(\"a\", (short) 3).toString());\r\n    assertEquals(baseStr + \"[a=3,b=4]\", new ToStringBuilder(base).append(\"a\", (short) 3).append(\"b\", (short) 4).toString());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\builder\\ToStringBuilderTest.java",
  "methodName" : "testShortArray",
  "sourceCode" : "@Test\r\nvoid testShortArray() {\r\n    short[] array = { 1, 2, -3, 4 };\r\n    assertEquals(baseStr + \"[{1,2,-3,4}]\", new ToStringBuilder(base).append(array).toString());\r\n    assertEquals(baseStr + \"[{1,2,-3,4}]\", new ToStringBuilder(base).append((Object) array).toString());\r\n    array = null;\r\n    assertEquals(baseStr + \"[<null>]\", new ToStringBuilder(base).append(array).toString());\r\n    assertEquals(baseStr + \"[<null>]\", new ToStringBuilder(base).append((Object) array).toString());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\builder\\ToStringBuilderTest.java",
  "methodName" : "testShortArrayArray",
  "sourceCode" : "@Test\r\nvoid testShortArrayArray() {\r\n    short[][] array = { { 1, 2 }, null, { 5 } };\r\n    assertEquals(baseStr + \"[{{1,2},<null>,{5}}]\", new ToStringBuilder(base).append(array).toString());\r\n    assertEquals(baseStr + \"[{{1,2},<null>,{5}}]\", new ToStringBuilder(base).append((Object) array).toString());\r\n    array = null;\r\n    assertEquals(baseStr + \"[<null>]\", new ToStringBuilder(base).append(array).toString());\r\n    assertEquals(baseStr + \"[<null>]\", new ToStringBuilder(base).append((Object) array).toString());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\builder\\ToStringBuilderTest.java",
  "methodName" : "testSimpleReflectionObjectCycle",
  "sourceCode" : "/**\r\n * Test an Object pointing to itself, the simplest test.\r\n */\r\n@Test\r\nvoid testSimpleReflectionObjectCycle() {\r\n    final SimpleReflectionTestFixture simple = new SimpleReflectionTestFixture();\r\n    simple.o = simple;\r\n    assertEquals(toBaseString(simple) + \"[o=\" + toBaseString(simple) + \"]\", simple.toString());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\builder\\ToStringBuilderTest.java",
  "methodName" : "testSimpleReflectionStatics",
  "sourceCode" : "@Test\r\nvoid testSimpleReflectionStatics() {\r\n    final SimpleReflectionStaticFieldsFixture instance1 = new SimpleReflectionStaticFieldsFixture();\r\n    assertEquals(toBaseString(instance1) + \"[staticInt=12345,staticString=staticString]\", ReflectionToStringBuilder.toString(instance1, null, false, true, SimpleReflectionStaticFieldsFixture.class));\r\n    assertEquals(toBaseString(instance1) + \"[staticInt=12345,staticString=staticString]\", ReflectionToStringBuilder.toString(instance1, null, true, true, SimpleReflectionStaticFieldsFixture.class));\r\n    assertEquals(toBaseString(instance1) + \"[staticInt=12345,staticString=staticString]\", this.toStringWithStatics(instance1, null, SimpleReflectionStaticFieldsFixture.class));\r\n    assertEquals(toBaseString(instance1) + \"[staticInt=12345,staticString=staticString]\", this.toStringWithStatics(instance1, null, SimpleReflectionStaticFieldsFixture.class));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\builder\\ToStringStyleConcurrencyTest.java",
  "methodName" : "testArrayList",
  "sourceCode" : "@Test\r\nvoid testArrayList() throws InterruptedException {\r\n    testConcurrency(new CollectionHolder<>(new ArrayList<>()));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\builder\\ToStringStyleConcurrencyTest.java",
  "methodName" : "testCopyOnWriteArrayList",
  "sourceCode" : "@Test\r\nvoid testCopyOnWriteArrayList() throws InterruptedException {\r\n    testConcurrency(new CollectionHolder<>(new CopyOnWriteArrayList<>()));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\builder\\ToStringStyleConcurrencyTest.java",
  "methodName" : "testLinkedList",
  "sourceCode" : "@Test\r\nvoid testLinkedList() throws InterruptedException {\r\n    testConcurrency(new CollectionHolder<>(new LinkedList<>()));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\builder\\ToStringStyleTest.java",
  "methodName" : "testSetArrayEnd",
  "sourceCode" : "@Test\r\nvoid testSetArrayEnd() {\r\n    final ToStringStyle style = new ToStringStyleImpl();\r\n    style.setArrayEnd(null);\r\n    assertEquals(\"\", style.getArrayEnd());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\builder\\ToStringStyleTest.java",
  "methodName" : "testSetArraySeparator",
  "sourceCode" : "@Test\r\nvoid testSetArraySeparator() {\r\n    final ToStringStyle style = new ToStringStyleImpl();\r\n    style.setArraySeparator(null);\r\n    assertEquals(\"\", style.getArraySeparator());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\builder\\ToStringStyleTest.java",
  "methodName" : "testSetArrayStart",
  "sourceCode" : "@Test\r\nvoid testSetArrayStart() {\r\n    final ToStringStyle style = new ToStringStyleImpl();\r\n    style.setArrayStart(null);\r\n    assertEquals(\"\", style.getArrayStart());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\builder\\ToStringStyleTest.java",
  "methodName" : "testSetContentEnd",
  "sourceCode" : "@Test\r\nvoid testSetContentEnd() {\r\n    final ToStringStyle style = new ToStringStyleImpl();\r\n    style.setContentEnd(null);\r\n    assertEquals(\"\", style.getContentEnd());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\builder\\ToStringStyleTest.java",
  "methodName" : "testSetContentStart",
  "sourceCode" : "@Test\r\nvoid testSetContentStart() {\r\n    final ToStringStyle style = new ToStringStyleImpl();\r\n    style.setContentStart(null);\r\n    assertEquals(\"\", style.getContentStart());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\builder\\ToStringStyleTest.java",
  "methodName" : "testSetFieldNameValueSeparator",
  "sourceCode" : "@Test\r\nvoid testSetFieldNameValueSeparator() {\r\n    final ToStringStyle style = new ToStringStyleImpl();\r\n    style.setFieldNameValueSeparator(null);\r\n    assertEquals(\"\", style.getFieldNameValueSeparator());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\builder\\ToStringStyleTest.java",
  "methodName" : "testSetFieldSeparator",
  "sourceCode" : "@Test\r\nvoid testSetFieldSeparator() {\r\n    final ToStringStyle style = new ToStringStyleImpl();\r\n    style.setFieldSeparator(null);\r\n    assertEquals(\"\", style.getFieldSeparator());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\builder\\ToStringStyleTest.java",
  "methodName" : "testSetNullText",
  "sourceCode" : "@Test\r\nvoid testSetNullText() {\r\n    final ToStringStyle style = new ToStringStyleImpl();\r\n    style.setNullText(null);\r\n    assertEquals(\"\", style.getNullText());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\builder\\ToStringStyleTest.java",
  "methodName" : "testSetSizeEndText",
  "sourceCode" : "@Test\r\nvoid testSetSizeEndText() {\r\n    final ToStringStyle style = new ToStringStyleImpl();\r\n    style.setSizeEndText(null);\r\n    assertEquals(\"\", style.getSizeEndText());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\builder\\ToStringStyleTest.java",
  "methodName" : "testSetSizeStartText",
  "sourceCode" : "@Test\r\nvoid testSetSizeStartText() {\r\n    final ToStringStyle style = new ToStringStyleImpl();\r\n    style.setSizeStartText(null);\r\n    assertEquals(\"\", style.getSizeStartText());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\builder\\ToStringStyleTest.java",
  "methodName" : "testSetSummaryObjectEndText",
  "sourceCode" : "@Test\r\nvoid testSetSummaryObjectEndText() {\r\n    final ToStringStyle style = new ToStringStyleImpl();\r\n    style.setSummaryObjectEndText(null);\r\n    assertEquals(\"\", style.getSummaryObjectEndText());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\builder\\ToStringStyleTest.java",
  "methodName" : "testSetSummaryObjectStartText",
  "sourceCode" : "@Test\r\nvoid testSetSummaryObjectStartText() {\r\n    final ToStringStyle style = new ToStringStyleImpl();\r\n    style.setSummaryObjectStartText(null);\r\n    assertEquals(\"\", style.getSummaryObjectStartText());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\CachedRandomBitsTest.java",
  "methodName" : "testNext",
  "sourceCode" : "@ParameterizedTest\r\n@ValueSource(ints = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 32 })\r\nvoid testNext(final int cacheSize) {\r\n    final MockRandom random = new MockRandom(new byte[] { 0x11, 0x12, 0x13, 0x25, (byte) 0xab, (byte) 0xcd, (byte) 0xef, (byte) 0xff, 0x55, 0x44, 0x12, 0x34, 0x56, 0x78, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 });\r\n    final CachedRandomBits arb = new CachedRandomBits(cacheSize, random);\r\n    assertIllegalArgumentException(() -> arb.nextBits(0));\r\n    assertIllegalArgumentException(() -> arb.nextBits(33));\r\n    assertEquals(0x11, arb.nextBits(8));\r\n    assertEquals(0x12, arb.nextBits(8));\r\n    assertEquals(0x1325, arb.nextBits(16));\r\n    assertEquals(0xabcdefff, arb.nextBits(32));\r\n    assertEquals(0x5, arb.nextBits(4));\r\n    assertEquals(0x1, arb.nextBits(1));\r\n    assertEquals(0x0, arb.nextBits(1));\r\n    assertEquals(0x1, arb.nextBits(2));\r\n    assertEquals(0x4, arb.nextBits(6));\r\n    assertEquals(0x40000000 | 0x12345600 >> 2 | 0x38, arb.nextBits(32));\r\n    assertEquals(1, arb.nextBits(1));\r\n    assertEquals(0, arb.nextBits(1));\r\n    assertEquals(0, arb.nextBits(9));\r\n    assertEquals(0, arb.nextBits(31));\r\n}",
  "annotations" : [ "ParameterizedTest" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\CharEncodingTest.java",
  "methodName" : "testConstructor",
  "sourceCode" : "/**\r\n * The class can be instantiated.\r\n */\r\n@Test\r\nvoid testConstructor() {\r\n    new CharEncoding();\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\CharEncodingTest.java",
  "methodName" : "testMustBeSupportedJava1_3_1_and_above",
  "sourceCode" : "@Test\r\nvoid testMustBeSupportedJava1_3_1_and_above() {\r\n    assertSupportedEncoding(CharEncoding.ISO_8859_1);\r\n    assertSupportedEncoding(CharEncoding.US_ASCII);\r\n    assertSupportedEncoding(CharEncoding.UTF_16);\r\n    assertSupportedEncoding(CharEncoding.UTF_16BE);\r\n    assertSupportedEncoding(CharEncoding.UTF_16LE);\r\n    assertSupportedEncoding(CharEncoding.UTF_8);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\CharEncodingTest.java",
  "methodName" : "testNotSupported",
  "sourceCode" : "@Test\r\nvoid testNotSupported() {\r\n    assertFalse(CharEncoding.isSupported(null));\r\n    assertFalse(CharEncoding.isSupported(\"\"));\r\n    assertFalse(CharEncoding.isSupported(\" \"));\r\n    assertFalse(CharEncoding.isSupported(\"\\t\\r\\n\"));\r\n    assertFalse(CharEncoding.isSupported(\"DOESNOTEXIST\"));\r\n    assertFalse(CharEncoding.isSupported(\"this is not a valid encoding name\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\CharEncodingTest.java",
  "methodName" : "testStandardCharsetsEquality",
  "sourceCode" : "@Test\r\nvoid testStandardCharsetsEquality() {\r\n    assertEquals(StandardCharsets.ISO_8859_1.name(), CharEncoding.ISO_8859_1);\r\n    assertEquals(StandardCharsets.US_ASCII.name(), CharEncoding.US_ASCII);\r\n    assertEquals(StandardCharsets.UTF_8.name(), CharEncoding.UTF_8);\r\n    assertEquals(StandardCharsets.UTF_16.name(), CharEncoding.UTF_16);\r\n    assertEquals(StandardCharsets.UTF_16BE.name(), CharEncoding.UTF_16BE);\r\n    assertEquals(StandardCharsets.UTF_16LE.name(), CharEncoding.UTF_16LE);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\CharEncodingTest.java",
  "methodName" : "testSupported",
  "sourceCode" : "@Test\r\nvoid testSupported() {\r\n    assertTrue(CharEncoding.isSupported(\"UTF8\"));\r\n    assertTrue(CharEncoding.isSupported(\"UTF-8\"));\r\n    assertTrue(CharEncoding.isSupported(\"ASCII\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\CharRangeTest.java",
  "methodName" : "testClass",
  "sourceCode" : "@Test\r\nvoid testClass() {\r\n    // class changed to non-public in 3.0\r\n    assertFalse(Modifier.isPublic(CharRange.class.getModifiers()));\r\n    assertTrue(Modifier.isFinal(CharRange.class.getModifiers()));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\CharRangeTest.java",
  "methodName" : "testConstructorAccessors_is",
  "sourceCode" : "@Test\r\nvoid testConstructorAccessors_is() {\r\n    final CharRange rangea = CharRange.is('a');\r\n    assertEquals('a', rangea.getStart());\r\n    assertEquals('a', rangea.getEnd());\r\n    assertFalse(rangea.isNegated());\r\n    assertEquals(\"a\", rangea.toString());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\CharRangeTest.java",
  "methodName" : "testConstructorAccessors_isIn_Normal",
  "sourceCode" : "@Test\r\nvoid testConstructorAccessors_isIn_Normal() {\r\n    final CharRange rangea = CharRange.isIn('a', 'e');\r\n    assertEquals('a', rangea.getStart());\r\n    assertEquals('e', rangea.getEnd());\r\n    assertFalse(rangea.isNegated());\r\n    assertEquals(\"a-e\", rangea.toString());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\CharRangeTest.java",
  "methodName" : "testConstructorAccessors_isIn_Reversed",
  "sourceCode" : "@Test\r\nvoid testConstructorAccessors_isIn_Reversed() {\r\n    final CharRange rangea = CharRange.isIn('e', 'a');\r\n    assertEquals('a', rangea.getStart());\r\n    assertEquals('e', rangea.getEnd());\r\n    assertFalse(rangea.isNegated());\r\n    assertEquals(\"a-e\", rangea.toString());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\CharRangeTest.java",
  "methodName" : "testConstructorAccessors_isIn_Same",
  "sourceCode" : "@Test\r\nvoid testConstructorAccessors_isIn_Same() {\r\n    final CharRange rangea = CharRange.isIn('a', 'a');\r\n    assertEquals('a', rangea.getStart());\r\n    assertEquals('a', rangea.getEnd());\r\n    assertFalse(rangea.isNegated());\r\n    assertEquals(\"a\", rangea.toString());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\CharRangeTest.java",
  "methodName" : "testConstructorAccessors_isNot",
  "sourceCode" : "@Test\r\nvoid testConstructorAccessors_isNot() {\r\n    final CharRange rangea = CharRange.isNot('a');\r\n    assertEquals('a', rangea.getStart());\r\n    assertEquals('a', rangea.getEnd());\r\n    assertTrue(rangea.isNegated());\r\n    assertEquals(\"^a\", rangea.toString());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\CharRangeTest.java",
  "methodName" : "testConstructorAccessors_isNotIn_Normal",
  "sourceCode" : "@Test\r\nvoid testConstructorAccessors_isNotIn_Normal() {\r\n    final CharRange rangea = CharRange.isNotIn('a', 'e');\r\n    assertEquals('a', rangea.getStart());\r\n    assertEquals('e', rangea.getEnd());\r\n    assertTrue(rangea.isNegated());\r\n    assertEquals(\"^a-e\", rangea.toString());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\CharRangeTest.java",
  "methodName" : "testConstructorAccessors_isNotIn_Reversed",
  "sourceCode" : "@Test\r\nvoid testConstructorAccessors_isNotIn_Reversed() {\r\n    final CharRange rangea = CharRange.isNotIn('e', 'a');\r\n    assertEquals('a', rangea.getStart());\r\n    assertEquals('e', rangea.getEnd());\r\n    assertTrue(rangea.isNegated());\r\n    assertEquals(\"^a-e\", rangea.toString());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\CharRangeTest.java",
  "methodName" : "testConstructorAccessors_isNotIn_Same",
  "sourceCode" : "@Test\r\nvoid testConstructorAccessors_isNotIn_Same() {\r\n    final CharRange rangea = CharRange.isNotIn('a', 'a');\r\n    assertEquals('a', rangea.getStart());\r\n    assertEquals('a', rangea.getEnd());\r\n    assertTrue(rangea.isNegated());\r\n    assertEquals(\"^a\", rangea.toString());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\CharRangeTest.java",
  "methodName" : "testContains_Char",
  "sourceCode" : "@Test\r\nvoid testContains_Char() {\r\n    CharRange range = CharRange.is('c');\r\n    assertFalse(range.contains('b'));\r\n    assertTrue(range.contains('c'));\r\n    assertFalse(range.contains('d'));\r\n    assertFalse(range.contains('e'));\r\n    range = CharRange.isIn('c', 'd');\r\n    assertFalse(range.contains('b'));\r\n    assertTrue(range.contains('c'));\r\n    assertTrue(range.contains('d'));\r\n    assertFalse(range.contains('e'));\r\n    range = CharRange.isIn('d', 'c');\r\n    assertFalse(range.contains('b'));\r\n    assertTrue(range.contains('c'));\r\n    assertTrue(range.contains('d'));\r\n    assertFalse(range.contains('e'));\r\n    range = CharRange.isNotIn('c', 'd');\r\n    assertTrue(range.contains('b'));\r\n    assertFalse(range.contains('c'));\r\n    assertFalse(range.contains('d'));\r\n    assertTrue(range.contains('e'));\r\n    assertTrue(range.contains((char) 0));\r\n    assertTrue(range.contains(Character.MAX_VALUE));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\CharRangeTest.java",
  "methodName" : "testContains_Charrange",
  "sourceCode" : "@Test\r\nvoid testContains_Charrange() {\r\n    final CharRange a = CharRange.is('a');\r\n    final CharRange b = CharRange.is('b');\r\n    final CharRange c = CharRange.is('c');\r\n    final CharRange c2 = CharRange.is('c');\r\n    final CharRange d = CharRange.is('d');\r\n    final CharRange e = CharRange.is('e');\r\n    final CharRange cd = CharRange.isIn('c', 'd');\r\n    final CharRange bd = CharRange.isIn('b', 'd');\r\n    final CharRange bc = CharRange.isIn('b', 'c');\r\n    final CharRange ab = CharRange.isIn('a', 'b');\r\n    final CharRange de = CharRange.isIn('d', 'e');\r\n    final CharRange ef = CharRange.isIn('e', 'f');\r\n    final CharRange ae = CharRange.isIn('a', 'e');\r\n    // normal/normal\r\n    assertFalse(c.contains(b));\r\n    assertTrue(c.contains(c));\r\n    assertTrue(c.contains(c2));\r\n    assertFalse(c.contains(d));\r\n    assertFalse(c.contains(cd));\r\n    assertFalse(c.contains(bd));\r\n    assertFalse(c.contains(bc));\r\n    assertFalse(c.contains(ab));\r\n    assertFalse(c.contains(de));\r\n    assertTrue(cd.contains(c));\r\n    assertTrue(bd.contains(c));\r\n    assertTrue(bc.contains(c));\r\n    assertFalse(ab.contains(c));\r\n    assertFalse(de.contains(c));\r\n    assertTrue(ae.contains(b));\r\n    assertTrue(ae.contains(ab));\r\n    assertTrue(ae.contains(bc));\r\n    assertTrue(ae.contains(cd));\r\n    assertTrue(ae.contains(de));\r\n    final CharRange notb = CharRange.isNot('b');\r\n    final CharRange notc = CharRange.isNot('c');\r\n    final CharRange notd = CharRange.isNot('d');\r\n    final CharRange notab = CharRange.isNotIn('a', 'b');\r\n    final CharRange notbc = CharRange.isNotIn('b', 'c');\r\n    final CharRange notbd = CharRange.isNotIn('b', 'd');\r\n    final CharRange notcd = CharRange.isNotIn('c', 'd');\r\n    final CharRange notde = CharRange.isNotIn('d', 'e');\r\n    final CharRange notae = CharRange.isNotIn('a', 'e');\r\n    final CharRange all = CharRange.isIn((char) 0, Character.MAX_VALUE);\r\n    final CharRange allbutfirst = CharRange.isIn((char) 1, Character.MAX_VALUE);\r\n    // normal/negated\r\n    assertFalse(c.contains(notc));\r\n    assertFalse(c.contains(notbd));\r\n    assertTrue(all.contains(notc));\r\n    assertTrue(all.contains(notbd));\r\n    assertFalse(allbutfirst.contains(notc));\r\n    assertFalse(allbutfirst.contains(notbd));\r\n    // negated/normal\r\n    assertTrue(notc.contains(a));\r\n    assertTrue(notc.contains(b));\r\n    assertFalse(notc.contains(c));\r\n    assertTrue(notc.contains(d));\r\n    assertTrue(notc.contains(e));\r\n    assertTrue(notc.contains(ab));\r\n    assertFalse(notc.contains(bc));\r\n    assertFalse(notc.contains(bd));\r\n    assertFalse(notc.contains(cd));\r\n    assertTrue(notc.contains(de));\r\n    assertFalse(notc.contains(ae));\r\n    assertFalse(notc.contains(all));\r\n    assertFalse(notc.contains(allbutfirst));\r\n    assertTrue(notbd.contains(a));\r\n    assertFalse(notbd.contains(b));\r\n    assertFalse(notbd.contains(c));\r\n    assertFalse(notbd.contains(d));\r\n    assertTrue(notbd.contains(e));\r\n    assertTrue(notcd.contains(ab));\r\n    assertFalse(notcd.contains(bc));\r\n    assertFalse(notcd.contains(bd));\r\n    assertFalse(notcd.contains(cd));\r\n    assertFalse(notcd.contains(de));\r\n    assertFalse(notcd.contains(ae));\r\n    assertTrue(notcd.contains(ef));\r\n    assertFalse(notcd.contains(all));\r\n    assertFalse(notcd.contains(allbutfirst));\r\n    // negated/negated\r\n    assertFalse(notc.contains(notb));\r\n    assertTrue(notc.contains(notc));\r\n    assertFalse(notc.contains(notd));\r\n    assertFalse(notc.contains(notab));\r\n    assertTrue(notc.contains(notbc));\r\n    assertTrue(notc.contains(notbd));\r\n    assertTrue(notc.contains(notcd));\r\n    assertFalse(notc.contains(notde));\r\n    assertFalse(notbd.contains(notb));\r\n    assertFalse(notbd.contains(notc));\r\n    assertFalse(notbd.contains(notd));\r\n    assertFalse(notbd.contains(notab));\r\n    assertFalse(notbd.contains(notbc));\r\n    assertTrue(notbd.contains(notbd));\r\n    assertFalse(notbd.contains(notcd));\r\n    assertFalse(notbd.contains(notde));\r\n    assertTrue(notbd.contains(notae));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\CharRangeTest.java",
  "methodName" : "testContainsNullArg",
  "sourceCode" : "@Test\r\nvoid testContainsNullArg() {\r\n    final CharRange range = CharRange.is('a');\r\n    final NullPointerException e = assertNullPointerException(() -> range.contains(null));\r\n    assertEquals(\"range\", e.getMessage());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\CharRangeTest.java",
  "methodName" : "testEquals_Object",
  "sourceCode" : "@Test\r\nvoid testEquals_Object() {\r\n    final CharRange rangea = CharRange.is('a');\r\n    final CharRange rangeae = CharRange.isIn('a', 'e');\r\n    final CharRange rangenotbf = CharRange.isIn('b', 'f');\r\n    assertNotEquals(null, rangea);\r\n    assertEquals(rangea, rangea);\r\n    assertEquals(rangea, CharRange.is('a'));\r\n    assertEquals(rangeae, rangeae);\r\n    assertEquals(rangeae, CharRange.isIn('a', 'e'));\r\n    assertEquals(rangenotbf, rangenotbf);\r\n    assertEquals(rangenotbf, CharRange.isIn('b', 'f'));\r\n    assertNotEquals(rangea, rangeae);\r\n    assertNotEquals(rangea, rangenotbf);\r\n    assertNotEquals(rangeae, rangea);\r\n    assertNotEquals(rangeae, rangenotbf);\r\n    assertNotEquals(rangenotbf, rangea);\r\n    assertNotEquals(rangenotbf, rangeae);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\CharRangeTest.java",
  "methodName" : "testHashCode",
  "sourceCode" : "@Test\r\nvoid testHashCode() {\r\n    final CharRange rangea = CharRange.is('a');\r\n    final CharRange rangeae = CharRange.isIn('a', 'e');\r\n    final CharRange rangenotbf = CharRange.isIn('b', 'f');\r\n    assertEquals(rangea.hashCode(), rangea.hashCode());\r\n    assertEquals(rangea.hashCode(), CharRange.is('a').hashCode());\r\n    assertEquals(rangeae.hashCode(), rangeae.hashCode());\r\n    assertEquals(rangeae.hashCode(), CharRange.isIn('a', 'e').hashCode());\r\n    assertEquals(rangenotbf.hashCode(), rangenotbf.hashCode());\r\n    assertEquals(rangenotbf.hashCode(), CharRange.isIn('b', 'f').hashCode());\r\n    assertNotEquals(rangea.hashCode(), rangeae.hashCode());\r\n    assertNotEquals(rangea.hashCode(), rangenotbf.hashCode());\r\n    assertNotEquals(rangeae.hashCode(), rangea.hashCode());\r\n    assertNotEquals(rangeae.hashCode(), rangenotbf.hashCode());\r\n    assertNotEquals(rangenotbf.hashCode(), rangea.hashCode());\r\n    assertNotEquals(rangenotbf.hashCode(), rangeae.hashCode());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\CharRangeTest.java",
  "methodName" : "testIterator",
  "sourceCode" : "@Test\r\nvoid testIterator() {\r\n    final CharRange a = CharRange.is('a');\r\n    final CharRange ad = CharRange.isIn('a', 'd');\r\n    final CharRange nota = CharRange.isNot('a');\r\n    final CharRange emptySet = CharRange.isNotIn((char) 0, Character.MAX_VALUE);\r\n    final CharRange notFirst = CharRange.isNotIn((char) 1, Character.MAX_VALUE);\r\n    final CharRange notLast = CharRange.isNotIn((char) 0, (char) (Character.MAX_VALUE - 1));\r\n    final Iterator<Character> aIt = a.iterator();\r\n    assertNotNull(aIt);\r\n    assertTrue(aIt.hasNext());\r\n    assertEquals(Character.valueOf('a'), aIt.next());\r\n    assertFalse(aIt.hasNext());\r\n    final Iterator<Character> adIt = ad.iterator();\r\n    assertNotNull(adIt);\r\n    assertTrue(adIt.hasNext());\r\n    assertEquals(Character.valueOf('a'), adIt.next());\r\n    assertEquals(Character.valueOf('b'), adIt.next());\r\n    assertEquals(Character.valueOf('c'), adIt.next());\r\n    assertEquals(Character.valueOf('d'), adIt.next());\r\n    assertFalse(adIt.hasNext());\r\n    final Iterator<Character> notaIt = nota.iterator();\r\n    assertNotNull(notaIt);\r\n    assertTrue(notaIt.hasNext());\r\n    while (notaIt.hasNext()) {\r\n        final Character c = notaIt.next();\r\n        assertNotEquals('a', c.charValue());\r\n    }\r\n    final Iterator<Character> emptySetIt = emptySet.iterator();\r\n    assertNotNull(emptySetIt);\r\n    assertFalse(emptySetIt.hasNext());\r\n    assertThrows(NoSuchElementException.class, emptySetIt::next);\r\n    final Iterator<Character> notFirstIt = notFirst.iterator();\r\n    assertNotNull(notFirstIt);\r\n    assertTrue(notFirstIt.hasNext());\r\n    assertEquals(Character.valueOf((char) 0), notFirstIt.next());\r\n    assertFalse(notFirstIt.hasNext());\r\n    assertThrows(NoSuchElementException.class, notFirstIt::next);\r\n    final Iterator<Character> notLastIt = notLast.iterator();\r\n    assertNotNull(notLastIt);\r\n    assertTrue(notLastIt.hasNext());\r\n    assertEquals(Character.valueOf(Character.MAX_VALUE), notLastIt.next());\r\n    assertFalse(notLastIt.hasNext());\r\n    assertThrows(NoSuchElementException.class, notLastIt::next);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\CharRangeTest.java",
  "methodName" : "testIteratorRemove",
  "sourceCode" : "@Test\r\nvoid testIteratorRemove() {\r\n    final CharRange a = CharRange.is('a');\r\n    final Iterator<Character> aIt = a.iterator();\r\n    assertThrows(UnsupportedOperationException.class, aIt::remove);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\CharRangeTest.java",
  "methodName" : "testSerialization",
  "sourceCode" : "@Test\r\nvoid testSerialization() {\r\n    CharRange range = CharRange.is('a');\r\n    assertEquals(range, SerializationUtils.clone(range));\r\n    range = CharRange.isIn('a', 'e');\r\n    assertEquals(range, SerializationUtils.clone(range));\r\n    range = CharRange.isNotIn('a', 'e');\r\n    assertEquals(range, SerializationUtils.clone(range));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\CharSequenceUtilsTest.java",
  "methodName" : "testConstructor",
  "sourceCode" : "@Test\r\nvoid testConstructor() {\r\n    assertNotNull(new CharSequenceUtils());\r\n    final Constructor<?>[] cons = CharSequenceUtils.class.getDeclaredConstructors();\r\n    assertEquals(1, cons.length);\r\n    assertTrue(Modifier.isPublic(cons[0].getModifiers()));\r\n    assertTrue(Modifier.isPublic(CharSequenceUtils.class.getModifiers()));\r\n    assertFalse(Modifier.isFinal(CharSequenceUtils.class.getModifiers()));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\CharSequenceUtilsTest.java",
  "methodName" : "testLastIndexOfWithDifferentCharSequences",
  "sourceCode" : "@ParameterizedTest\r\n@MethodSource(\"lastIndexWithStandardCharSequence\")\r\nvoid testLastIndexOfWithDifferentCharSequences(final CharSequence cs, final CharSequence search, final int start, final int expected) {\r\n    assertEquals(expected, CharSequenceUtils.lastIndexOf(cs, search, start));\r\n}",
  "annotations" : [ "ParameterizedTest" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\CharSequenceUtilsTest.java",
  "methodName" : "testNewLastIndexOf",
  "sourceCode" : "@Test\r\nvoid testNewLastIndexOf() {\r\n    testNewLastIndexOfSingle(\"808087847-1321060740-635567660180086727-925755305\", \"-1321060740-635567660\", 21);\r\n    testNewLastIndexOfSingle(\"\", \"\");\r\n    testNewLastIndexOfSingle(\"1\", \"\");\r\n    testNewLastIndexOfSingle(\"\", \"1\");\r\n    testNewLastIndexOfSingle(\"1\", \"1\");\r\n    testNewLastIndexOfSingle(\"11\", \"1\");\r\n    testNewLastIndexOfSingle(\"1\", \"11\");\r\n    testNewLastIndexOfSingle(\"apache\", \"a\");\r\n    testNewLastIndexOfSingle(\"apache\", \"p\");\r\n    testNewLastIndexOfSingle(\"apache\", \"e\");\r\n    testNewLastIndexOfSingle(\"apache\", \"x\");\r\n    testNewLastIndexOfSingle(\"oraoraoraora\", \"r\");\r\n    testNewLastIndexOfSingle(\"mudamudamudamuda\", \"d\");\r\n    // There is a route through checkLaterThan1#checkLaterThan1\r\n    // which only gets touched if there is a two letter (or more) partial match\r\n    // (in this case \"st\") earlier in the searched string.\r\n    testNewLastIndexOfSingle(\"junk-ststarting\", \"starting\");\r\n    final Random random = new Random();\r\n    final StringBuilder seg = new StringBuilder();\r\n    while (seg.length() <= CharSequenceUtils.TO_STRING_LIMIT) {\r\n        seg.append(random.nextInt());\r\n    }\r\n    StringBuilder original = new StringBuilder(seg);\r\n    testNewLastIndexOfSingle(original, seg);\r\n    for (int i = 0; i < 100; i++) {\r\n        if (random.nextDouble() < 0.5) {\r\n            original.append(random.nextInt() % 10);\r\n        } else {\r\n            original = new StringBuilder().append(random.nextInt() % 100).append(original);\r\n        }\r\n        testNewLastIndexOfSingle(original, seg);\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\CharSequenceUtilsTest.java",
  "methodName" : "testRegionMatches",
  "sourceCode" : "@Test\r\nvoid testRegionMatches() {\r\n    for (final TestData data : TEST_DATA) {\r\n        new RunTest() {\r\n\r\n            @Override\r\n            boolean invoke() {\r\n                return data.source.regionMatches(data.ignoreCase, data.toffset, data.other, data.ooffset, data.len);\r\n            }\r\n        }.run(data, \"String\");\r\n        new RunTest() {\r\n\r\n            @Override\r\n            boolean invoke() {\r\n                return CharSequenceUtils.regionMatches(data.source, data.ignoreCase, data.toffset, data.other, data.ooffset, data.len);\r\n            }\r\n        }.run(data, \"CSString\");\r\n        new RunTest() {\r\n\r\n            @Override\r\n            boolean invoke() {\r\n                return CharSequenceUtils.regionMatches(new StringBuilder(data.source), data.ignoreCase, data.toffset, data.other, data.ooffset, data.len);\r\n            }\r\n        }.run(data, \"CSNonString\");\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\CharSequenceUtilsTest.java",
  "methodName" : "testSubSequence",
  "sourceCode" : "@Test\r\nvoid testSubSequence() {\r\n    //\r\n    // null input\r\n    //\r\n    assertNull(CharSequenceUtils.subSequence(null, -1));\r\n    assertNull(CharSequenceUtils.subSequence(null, 0));\r\n    assertNull(CharSequenceUtils.subSequence(null, 1));\r\n    //\r\n    // non-null input\r\n    //\r\n    assertEquals(StringUtils.EMPTY, CharSequenceUtils.subSequence(StringUtils.EMPTY, 0));\r\n    assertEquals(\"012\", CharSequenceUtils.subSequence(\"012\", 0));\r\n    assertEquals(\"12\", CharSequenceUtils.subSequence(\"012\", 1));\r\n    assertEquals(\"2\", CharSequenceUtils.subSequence(\"012\", 2));\r\n    assertEquals(StringUtils.EMPTY, CharSequenceUtils.subSequence(\"012\", 3));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\CharSequenceUtilsTest.java",
  "methodName" : "testSubSequenceNegativeStart",
  "sourceCode" : "@Test\r\nvoid testSubSequenceNegativeStart() {\r\n    assertIndexOutOfBoundsException(() -> CharSequenceUtils.subSequence(StringUtils.EMPTY, -1));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\CharSequenceUtilsTest.java",
  "methodName" : "testSubSequenceTooLong",
  "sourceCode" : "@Test\r\nvoid testSubSequenceTooLong() {\r\n    assertIndexOutOfBoundsException(() -> CharSequenceUtils.subSequence(StringUtils.EMPTY, 1));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\CharSequenceUtilsTest.java",
  "methodName" : "testToCharArray",
  "sourceCode" : "@Test\r\nvoid testToCharArray() {\r\n    final StringBuilder builder = new StringBuilder(\"abcdefg\");\r\n    final char[] expected = builder.toString().toCharArray();\r\n    assertArrayEquals(expected, CharSequenceUtils.toCharArray(builder));\r\n    assertArrayEquals(expected, CharSequenceUtils.toCharArray(builder.toString()));\r\n    assertArrayEquals(ArrayUtils.EMPTY_CHAR_ARRAY, CharSequenceUtils.toCharArray(null));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\CharsetsTest.java",
  "methodName" : "testToCharset_Charset",
  "sourceCode" : "@Test\r\nvoid testToCharset_Charset() {\r\n    Assertions.assertEquals(Charset.defaultCharset(), Charsets.toCharset((Charset) null));\r\n    Assertions.assertEquals(Charset.defaultCharset(), Charsets.toCharset(Charset.defaultCharset()));\r\n    Assertions.assertEquals(StandardCharsets.UTF_8, Charsets.toCharset(StandardCharsets.UTF_8));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\CharsetsTest.java",
  "methodName" : "testToCharset_String",
  "sourceCode" : "@Test\r\nvoid testToCharset_String() {\r\n    Assertions.assertEquals(Charset.defaultCharset(), Charsets.toCharset((String) null));\r\n    Assertions.assertEquals(Charset.defaultCharset(), Charsets.toCharset(Charset.defaultCharset().name()));\r\n    Assertions.assertEquals(StandardCharsets.UTF_8, Charsets.toCharset(StandardCharsets.UTF_8.name()));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\CharsetsTest.java",
  "methodName" : "testToCharsetName",
  "sourceCode" : "@Test\r\nvoid testToCharsetName() {\r\n    Assertions.assertEquals(Charset.defaultCharset().name(), Charsets.toCharsetName((String) null));\r\n    Assertions.assertEquals(\"UTF-8\", Charsets.toCharsetName(StandardCharsets.UTF_8.name()));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\CharSetTest.java",
  "methodName" : "testClass",
  "sourceCode" : "@Test\r\nvoid testClass() {\r\n    assertTrue(Modifier.isPublic(CharSet.class.getModifiers()));\r\n    assertFalse(Modifier.isFinal(CharSet.class.getModifiers()));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\CharSetTest.java",
  "methodName" : "testConstructor_String_combo",
  "sourceCode" : "@Test\r\nvoid testConstructor_String_combo() {\r\n    CharSet set;\r\n    CharRange[] array;\r\n    set = CharSet.getInstance(\"abc\");\r\n    array = set.getCharRanges();\r\n    assertEquals(3, array.length);\r\n    assertTrue(ArrayUtils.contains(array, CharRange.is('a')));\r\n    assertTrue(ArrayUtils.contains(array, CharRange.is('b')));\r\n    assertTrue(ArrayUtils.contains(array, CharRange.is('c')));\r\n    set = CharSet.getInstance(\"a-ce-f\");\r\n    array = set.getCharRanges();\r\n    assertEquals(2, array.length);\r\n    assertTrue(ArrayUtils.contains(array, CharRange.isIn('a', 'c')));\r\n    assertTrue(ArrayUtils.contains(array, CharRange.isIn('e', 'f')));\r\n    set = CharSet.getInstance(\"ae-f\");\r\n    array = set.getCharRanges();\r\n    assertEquals(2, array.length);\r\n    assertTrue(ArrayUtils.contains(array, CharRange.is('a')));\r\n    assertTrue(ArrayUtils.contains(array, CharRange.isIn('e', 'f')));\r\n    set = CharSet.getInstance(\"e-fa\");\r\n    array = set.getCharRanges();\r\n    assertEquals(2, array.length);\r\n    assertTrue(ArrayUtils.contains(array, CharRange.is('a')));\r\n    assertTrue(ArrayUtils.contains(array, CharRange.isIn('e', 'f')));\r\n    set = CharSet.getInstance(\"ae-fm-pz\");\r\n    array = set.getCharRanges();\r\n    assertEquals(4, array.length);\r\n    assertTrue(ArrayUtils.contains(array, CharRange.is('a')));\r\n    assertTrue(ArrayUtils.contains(array, CharRange.isIn('e', 'f')));\r\n    assertTrue(ArrayUtils.contains(array, CharRange.isIn('m', 'p')));\r\n    assertTrue(ArrayUtils.contains(array, CharRange.is('z')));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\CharSetTest.java",
  "methodName" : "testConstructor_String_comboNegated",
  "sourceCode" : "@Test\r\nvoid testConstructor_String_comboNegated() {\r\n    CharSet set;\r\n    CharRange[] array;\r\n    set = CharSet.getInstance(\"^abc\");\r\n    array = set.getCharRanges();\r\n    assertEquals(3, array.length);\r\n    assertTrue(ArrayUtils.contains(array, CharRange.isNot('a')));\r\n    assertTrue(ArrayUtils.contains(array, CharRange.is('b')));\r\n    assertTrue(ArrayUtils.contains(array, CharRange.is('c')));\r\n    set = CharSet.getInstance(\"b^ac\");\r\n    array = set.getCharRanges();\r\n    assertEquals(3, array.length);\r\n    assertTrue(ArrayUtils.contains(array, CharRange.is('b')));\r\n    assertTrue(ArrayUtils.contains(array, CharRange.isNot('a')));\r\n    assertTrue(ArrayUtils.contains(array, CharRange.is('c')));\r\n    set = CharSet.getInstance(\"db^ac\");\r\n    array = set.getCharRanges();\r\n    assertEquals(4, array.length);\r\n    assertTrue(ArrayUtils.contains(array, CharRange.is('d')));\r\n    assertTrue(ArrayUtils.contains(array, CharRange.is('b')));\r\n    assertTrue(ArrayUtils.contains(array, CharRange.isNot('a')));\r\n    assertTrue(ArrayUtils.contains(array, CharRange.is('c')));\r\n    set = CharSet.getInstance(\"^b^a\");\r\n    array = set.getCharRanges();\r\n    assertEquals(2, array.length);\r\n    assertTrue(ArrayUtils.contains(array, CharRange.isNot('b')));\r\n    assertTrue(ArrayUtils.contains(array, CharRange.isNot('a')));\r\n    set = CharSet.getInstance(\"b^a-c^z\");\r\n    array = set.getCharRanges();\r\n    assertEquals(3, array.length);\r\n    assertTrue(ArrayUtils.contains(array, CharRange.isNotIn('a', 'c')));\r\n    assertTrue(ArrayUtils.contains(array, CharRange.isNot('z')));\r\n    assertTrue(ArrayUtils.contains(array, CharRange.is('b')));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\CharSetTest.java",
  "methodName" : "testConstructor_String_oddCombinations",
  "sourceCode" : "@Test\r\nvoid testConstructor_String_oddCombinations() {\r\n    CharSet set;\r\n    CharRange[] array;\r\n    set = CharSet.getInstance(\"a-^c\");\r\n    array = set.getCharRanges();\r\n    // \"a-^\"\r\n    assertTrue(ArrayUtils.contains(array, CharRange.isIn('a', '^')));\r\n    // \"c\"\r\n    assertTrue(ArrayUtils.contains(array, CharRange.is('c')));\r\n    assertFalse(set.contains('b'));\r\n    assertTrue(set.contains('^'));\r\n    // between ^ and a\r\n    assertTrue(set.contains('_'));\r\n    assertTrue(set.contains('c'));\r\n    set = CharSet.getInstance(\"^a-^c\");\r\n    array = set.getCharRanges();\r\n    // \"^a-^\"\r\n    assertTrue(ArrayUtils.contains(array, CharRange.isNotIn('a', '^')));\r\n    // \"c\"\r\n    assertTrue(ArrayUtils.contains(array, CharRange.is('c')));\r\n    assertTrue(set.contains('b'));\r\n    assertFalse(set.contains('^'));\r\n    // between ^ and a\r\n    assertFalse(set.contains('_'));\r\n    //contains everything\r\n    set = CharSet.getInstance(\"a- ^-- \");\r\n    array = set.getCharRanges();\r\n    // \"a- \"\r\n    assertTrue(ArrayUtils.contains(array, CharRange.isIn('a', ' ')));\r\n    // \"^-- \"\r\n    assertTrue(ArrayUtils.contains(array, CharRange.isNotIn('-', ' ')));\r\n    assertTrue(set.contains('#'));\r\n    assertTrue(set.contains('^'));\r\n    assertTrue(set.contains('a'));\r\n    assertTrue(set.contains('*'));\r\n    assertTrue(set.contains('A'));\r\n    set = CharSet.getInstance(\"^-b\");\r\n    array = set.getCharRanges();\r\n    // \"^-b\"\r\n    assertTrue(ArrayUtils.contains(array, CharRange.isIn('^', 'b')));\r\n    assertTrue(set.contains('b'));\r\n    // between ^ and a\r\n    assertTrue(set.contains('_'));\r\n    assertFalse(set.contains('A'));\r\n    assertTrue(set.contains('^'));\r\n    set = CharSet.getInstance(\"b-^\");\r\n    array = set.getCharRanges();\r\n    // \"b-^\"\r\n    assertTrue(ArrayUtils.contains(array, CharRange.isIn('^', 'b')));\r\n    assertTrue(set.contains('b'));\r\n    assertTrue(set.contains('^'));\r\n    // between ^ and b\r\n    assertTrue(set.contains('a'));\r\n    assertFalse(set.contains('c'));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\CharSetTest.java",
  "methodName" : "testConstructor_String_oddDash",
  "sourceCode" : "@Test\r\nvoid testConstructor_String_oddDash() {\r\n    CharSet set;\r\n    CharRange[] array;\r\n    set = CharSet.getInstance(\"-\");\r\n    array = set.getCharRanges();\r\n    assertEquals(1, array.length);\r\n    assertTrue(ArrayUtils.contains(array, CharRange.is('-')));\r\n    set = CharSet.getInstance(\"--\");\r\n    array = set.getCharRanges();\r\n    assertEquals(1, array.length);\r\n    assertTrue(ArrayUtils.contains(array, CharRange.is('-')));\r\n    set = CharSet.getInstance(\"---\");\r\n    array = set.getCharRanges();\r\n    assertEquals(1, array.length);\r\n    assertTrue(ArrayUtils.contains(array, CharRange.is('-')));\r\n    set = CharSet.getInstance(\"----\");\r\n    array = set.getCharRanges();\r\n    assertEquals(1, array.length);\r\n    assertTrue(ArrayUtils.contains(array, CharRange.is('-')));\r\n    set = CharSet.getInstance(\"-a\");\r\n    array = set.getCharRanges();\r\n    assertEquals(2, array.length);\r\n    assertTrue(ArrayUtils.contains(array, CharRange.is('-')));\r\n    assertTrue(ArrayUtils.contains(array, CharRange.is('a')));\r\n    set = CharSet.getInstance(\"a-\");\r\n    array = set.getCharRanges();\r\n    assertEquals(2, array.length);\r\n    assertTrue(ArrayUtils.contains(array, CharRange.is('a')));\r\n    assertTrue(ArrayUtils.contains(array, CharRange.is('-')));\r\n    set = CharSet.getInstance(\"a--\");\r\n    array = set.getCharRanges();\r\n    assertEquals(1, array.length);\r\n    assertTrue(ArrayUtils.contains(array, CharRange.isIn('a', '-')));\r\n    set = CharSet.getInstance(\"--a\");\r\n    array = set.getCharRanges();\r\n    assertEquals(1, array.length);\r\n    assertTrue(ArrayUtils.contains(array, CharRange.isIn('-', 'a')));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\CharSetTest.java",
  "methodName" : "testConstructor_String_oddNegate",
  "sourceCode" : "@Test\r\nvoid testConstructor_String_oddNegate() {\r\n    CharSet set;\r\n    CharRange[] array;\r\n    set = CharSet.getInstance(\"^\");\r\n    array = set.getCharRanges();\r\n    assertEquals(1, array.length);\r\n    // \"^\"\r\n    assertTrue(ArrayUtils.contains(array, CharRange.is('^')));\r\n    set = CharSet.getInstance(\"^^\");\r\n    array = set.getCharRanges();\r\n    assertEquals(1, array.length);\r\n    // \"^^\"\r\n    assertTrue(ArrayUtils.contains(array, CharRange.isNot('^')));\r\n    set = CharSet.getInstance(\"^^^\");\r\n    array = set.getCharRanges();\r\n    assertEquals(2, array.length);\r\n    // \"^^\"\r\n    assertTrue(ArrayUtils.contains(array, CharRange.isNot('^')));\r\n    // \"^\"\r\n    assertTrue(ArrayUtils.contains(array, CharRange.is('^')));\r\n    set = CharSet.getInstance(\"^^^^\");\r\n    array = set.getCharRanges();\r\n    assertEquals(1, array.length);\r\n    // \"^^\" x2\r\n    assertTrue(ArrayUtils.contains(array, CharRange.isNot('^')));\r\n    set = CharSet.getInstance(\"a^\");\r\n    array = set.getCharRanges();\r\n    assertEquals(2, array.length);\r\n    // \"a\"\r\n    assertTrue(ArrayUtils.contains(array, CharRange.is('a')));\r\n    // \"^\"\r\n    assertTrue(ArrayUtils.contains(array, CharRange.is('^')));\r\n    set = CharSet.getInstance(\"^a-\");\r\n    array = set.getCharRanges();\r\n    assertEquals(2, array.length);\r\n    // \"^a\"\r\n    assertTrue(ArrayUtils.contains(array, CharRange.isNot('a')));\r\n    // \"-\"\r\n    assertTrue(ArrayUtils.contains(array, CharRange.is('-')));\r\n    set = CharSet.getInstance(\"^^-c\");\r\n    array = set.getCharRanges();\r\n    assertEquals(1, array.length);\r\n    // \"^^-c\"\r\n    assertTrue(ArrayUtils.contains(array, CharRange.isNotIn('^', 'c')));\r\n    set = CharSet.getInstance(\"^c-^\");\r\n    array = set.getCharRanges();\r\n    assertEquals(1, array.length);\r\n    // \"^c-^\"\r\n    assertTrue(ArrayUtils.contains(array, CharRange.isNotIn('c', '^')));\r\n    set = CharSet.getInstance(\"^c-^d\");\r\n    array = set.getCharRanges();\r\n    assertEquals(2, array.length);\r\n    // \"^c-^\"\r\n    assertTrue(ArrayUtils.contains(array, CharRange.isNotIn('c', '^')));\r\n    // \"d\"\r\n    assertTrue(ArrayUtils.contains(array, CharRange.is('d')));\r\n    set = CharSet.getInstance(\"^^-\");\r\n    array = set.getCharRanges();\r\n    assertEquals(2, array.length);\r\n    // \"^^\"\r\n    assertTrue(ArrayUtils.contains(array, CharRange.isNot('^')));\r\n    // \"-\"\r\n    assertTrue(ArrayUtils.contains(array, CharRange.is('-')));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\CharSetTest.java",
  "methodName" : "testConstructor_String_simple",
  "sourceCode" : "@Test\r\nvoid testConstructor_String_simple() {\r\n    CharSet set;\r\n    CharRange[] array;\r\n    set = CharSet.getInstance((String) null);\r\n    array = set.getCharRanges();\r\n    assertEquals(\"[]\", set.toString());\r\n    assertEquals(0, array.length);\r\n    set = CharSet.getInstance(\"\");\r\n    array = set.getCharRanges();\r\n    assertEquals(\"[]\", set.toString());\r\n    assertEquals(0, array.length);\r\n    set = CharSet.getInstance(\"a\");\r\n    array = set.getCharRanges();\r\n    assertEquals(\"[a]\", set.toString());\r\n    assertEquals(1, array.length);\r\n    assertEquals(\"a\", array[0].toString());\r\n    set = CharSet.getInstance(\"^a\");\r\n    array = set.getCharRanges();\r\n    assertEquals(\"[^a]\", set.toString());\r\n    assertEquals(1, array.length);\r\n    assertEquals(\"^a\", array[0].toString());\r\n    set = CharSet.getInstance(\"a-e\");\r\n    array = set.getCharRanges();\r\n    assertEquals(\"[a-e]\", set.toString());\r\n    assertEquals(1, array.length);\r\n    assertEquals(\"a-e\", array[0].toString());\r\n    set = CharSet.getInstance(\"^a-e\");\r\n    array = set.getCharRanges();\r\n    assertEquals(\"[^a-e]\", set.toString());\r\n    assertEquals(1, array.length);\r\n    assertEquals(\"^a-e\", array[0].toString());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\CharSetTest.java",
  "methodName" : "testContains_Char",
  "sourceCode" : "@Test\r\nvoid testContains_Char() {\r\n    final CharSet btod = CharSet.getInstance(\"b-d\");\r\n    final CharSet dtob = CharSet.getInstance(\"d-b\");\r\n    final CharSet bcd = CharSet.getInstance(\"bcd\");\r\n    final CharSet bd = CharSet.getInstance(\"bd\");\r\n    final CharSet notbtod = CharSet.getInstance(\"^b-d\");\r\n    assertFalse(btod.contains('a'));\r\n    assertTrue(btod.contains('b'));\r\n    assertTrue(btod.contains('c'));\r\n    assertTrue(btod.contains('d'));\r\n    assertFalse(btod.contains('e'));\r\n    assertFalse(bcd.contains('a'));\r\n    assertTrue(bcd.contains('b'));\r\n    assertTrue(bcd.contains('c'));\r\n    assertTrue(bcd.contains('d'));\r\n    assertFalse(bcd.contains('e'));\r\n    assertFalse(bd.contains('a'));\r\n    assertTrue(bd.contains('b'));\r\n    assertFalse(bd.contains('c'));\r\n    assertTrue(bd.contains('d'));\r\n    assertFalse(bd.contains('e'));\r\n    assertTrue(notbtod.contains('a'));\r\n    assertFalse(notbtod.contains('b'));\r\n    assertFalse(notbtod.contains('c'));\r\n    assertFalse(notbtod.contains('d'));\r\n    assertTrue(notbtod.contains('e'));\r\n    assertFalse(dtob.contains('a'));\r\n    assertTrue(dtob.contains('b'));\r\n    assertTrue(dtob.contains('c'));\r\n    assertTrue(dtob.contains('d'));\r\n    assertFalse(dtob.contains('e'));\r\n    final CharRange[] array = dtob.getCharRanges();\r\n    assertEquals(\"[b-d]\", dtob.toString());\r\n    assertEquals(1, array.length);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\CharSetTest.java",
  "methodName" : "testEquals_Object",
  "sourceCode" : "@Test\r\nvoid testEquals_Object() {\r\n    final CharSet abc = CharSet.getInstance(\"abc\");\r\n    final CharSet abc2 = CharSet.getInstance(\"abc\");\r\n    final CharSet atoc = CharSet.getInstance(\"a-c\");\r\n    final CharSet atoc2 = CharSet.getInstance(\"a-c\");\r\n    final CharSet notatoc = CharSet.getInstance(\"^a-c\");\r\n    final CharSet notatoc2 = CharSet.getInstance(\"^a-c\");\r\n    assertNotEquals(null, abc);\r\n    assertEquals(abc, abc);\r\n    assertEquals(abc, abc2);\r\n    assertNotEquals(abc, atoc);\r\n    assertNotEquals(abc, notatoc);\r\n    assertNotEquals(atoc, abc);\r\n    assertEquals(atoc, atoc);\r\n    assertEquals(atoc, atoc2);\r\n    assertNotEquals(atoc, notatoc);\r\n    assertNotEquals(notatoc, abc);\r\n    assertNotEquals(notatoc, atoc);\r\n    assertEquals(notatoc, notatoc);\r\n    assertEquals(notatoc, notatoc2);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\CharSetTest.java",
  "methodName" : "testGetInstance",
  "sourceCode" : "@Test\r\nvoid testGetInstance() {\r\n    assertSame(CharSet.EMPTY, CharSet.getInstance((String) null));\r\n    assertSame(CharSet.EMPTY, CharSet.getInstance(\"\"));\r\n    assertSame(CharSet.ASCII_ALPHA, CharSet.getInstance(\"a-zA-Z\"));\r\n    assertSame(CharSet.ASCII_ALPHA, CharSet.getInstance(\"A-Za-z\"));\r\n    assertSame(CharSet.ASCII_ALPHA_LOWER, CharSet.getInstance(\"a-z\"));\r\n    assertSame(CharSet.ASCII_ALPHA_UPPER, CharSet.getInstance(\"A-Z\"));\r\n    assertSame(CharSet.ASCII_NUMERIC, CharSet.getInstance(\"0-9\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\CharSetTest.java",
  "methodName" : "testGetInstance_Stringarray",
  "sourceCode" : "@Test\r\nvoid testGetInstance_Stringarray() {\r\n    assertNull(CharSet.getInstance((String[]) null));\r\n    assertEquals(\"[]\", CharSet.getInstance().toString());\r\n    assertEquals(\"[]\", CharSet.getInstance(new String[] { null }).toString());\r\n    assertEquals(\"[a-e]\", CharSet.getInstance(\"a-e\").toString());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\CharSetTest.java",
  "methodName" : "testHashCode",
  "sourceCode" : "@Test\r\nvoid testHashCode() {\r\n    final CharSet abc = CharSet.getInstance(\"abc\");\r\n    final CharSet abc2 = CharSet.getInstance(\"abc\");\r\n    final CharSet atoc = CharSet.getInstance(\"a-c\");\r\n    final CharSet atoc2 = CharSet.getInstance(\"a-c\");\r\n    final CharSet notatoc = CharSet.getInstance(\"^a-c\");\r\n    final CharSet notatoc2 = CharSet.getInstance(\"^a-c\");\r\n    assertEquals(abc.hashCode(), abc.hashCode());\r\n    assertEquals(abc.hashCode(), abc2.hashCode());\r\n    assertEquals(atoc.hashCode(), atoc.hashCode());\r\n    assertEquals(atoc.hashCode(), atoc2.hashCode());\r\n    assertEquals(notatoc.hashCode(), notatoc.hashCode());\r\n    assertEquals(notatoc.hashCode(), notatoc2.hashCode());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\CharSetTest.java",
  "methodName" : "testJavadocExamples",
  "sourceCode" : "@Test\r\nvoid testJavadocExamples() {\r\n    assertFalse(CharSet.getInstance(\"^a-c\").contains('a'));\r\n    assertTrue(CharSet.getInstance(\"^a-c\").contains('d'));\r\n    assertTrue(CharSet.getInstance(\"^^a-c\").contains('a'));\r\n    assertFalse(CharSet.getInstance(\"^^a-c\").contains('^'));\r\n    assertTrue(CharSet.getInstance(\"^a-cd-f\").contains('d'));\r\n    assertTrue(CharSet.getInstance(\"a-c^\").contains('^'));\r\n    assertTrue(CharSet.getInstance(\"^\", \"a-c\").contains('^'));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\CharSetTest.java",
  "methodName" : "testSerialization",
  "sourceCode" : "@Test\r\nvoid testSerialization() {\r\n    CharSet set = CharSet.getInstance(\"a\");\r\n    assertEquals(set, SerializationUtils.clone(set));\r\n    set = CharSet.getInstance(\"a-e\");\r\n    assertEquals(set, SerializationUtils.clone(set));\r\n    set = CharSet.getInstance(\"be-f^a-z\");\r\n    assertEquals(set, SerializationUtils.clone(set));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\CharSetTest.java",
  "methodName" : "testStatics",
  "sourceCode" : "@Test\r\nvoid testStatics() {\r\n    CharRange[] array;\r\n    array = CharSet.EMPTY.getCharRanges();\r\n    assertEquals(0, array.length);\r\n    array = CharSet.ASCII_ALPHA.getCharRanges();\r\n    assertEquals(2, array.length);\r\n    assertTrue(ArrayUtils.contains(array, CharRange.isIn('a', 'z')));\r\n    assertTrue(ArrayUtils.contains(array, CharRange.isIn('A', 'Z')));\r\n    array = CharSet.ASCII_ALPHA_LOWER.getCharRanges();\r\n    assertEquals(1, array.length);\r\n    assertTrue(ArrayUtils.contains(array, CharRange.isIn('a', 'z')));\r\n    array = CharSet.ASCII_ALPHA_UPPER.getCharRanges();\r\n    assertEquals(1, array.length);\r\n    assertTrue(ArrayUtils.contains(array, CharRange.isIn('A', 'Z')));\r\n    array = CharSet.ASCII_NUMERIC.getCharRanges();\r\n    assertEquals(1, array.length);\r\n    assertTrue(ArrayUtils.contains(array, CharRange.isIn('0', '9')));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\CharSetUtilsTest.java",
  "methodName" : "testConstructor",
  "sourceCode" : "@Test\r\nvoid testConstructor() {\r\n    assertNotNull(new CharSetUtils());\r\n    final Constructor<?>[] cons = CharSetUtils.class.getDeclaredConstructors();\r\n    assertEquals(1, cons.length);\r\n    assertTrue(Modifier.isPublic(cons[0].getModifiers()));\r\n    assertTrue(Modifier.isPublic(CharSetUtils.class.getModifiers()));\r\n    assertFalse(Modifier.isFinal(CharSetUtils.class.getModifiers()));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\CharSetUtilsTest.java",
  "methodName" : "testContainsAny_StringString",
  "sourceCode" : "@Test\r\nvoid testContainsAny_StringString() {\r\n    assertFalse(CharSetUtils.containsAny(null, (String) null));\r\n    assertFalse(CharSetUtils.containsAny(null, \"\"));\r\n    assertFalse(CharSetUtils.containsAny(\"\", (String) null));\r\n    assertFalse(CharSetUtils.containsAny(\"\", \"\"));\r\n    assertFalse(CharSetUtils.containsAny(\"\", \"a-e\"));\r\n    assertFalse(CharSetUtils.containsAny(\"hello\", (String) null));\r\n    assertFalse(CharSetUtils.containsAny(\"hello\", \"\"));\r\n    assertTrue(CharSetUtils.containsAny(\"hello\", \"a-e\"));\r\n    assertTrue(CharSetUtils.containsAny(\"hello\", \"l-p\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\CharSetUtilsTest.java",
  "methodName" : "testContainsAny_StringStringarray",
  "sourceCode" : "@Test\r\nvoid testContainsAny_StringStringarray() {\r\n    assertFalse(CharSetUtils.containsAny(null, (String[]) null));\r\n    assertFalse(CharSetUtils.containsAny(null));\r\n    assertFalse(CharSetUtils.containsAny(null, (String) null));\r\n    assertFalse(CharSetUtils.containsAny(null, \"a-e\"));\r\n    assertFalse(CharSetUtils.containsAny(\"\", (String[]) null));\r\n    assertFalse(CharSetUtils.containsAny(\"\"));\r\n    assertFalse(CharSetUtils.containsAny(\"\", (String) null));\r\n    assertFalse(CharSetUtils.containsAny(\"\", \"a-e\"));\r\n    assertFalse(CharSetUtils.containsAny(\"hello\", (String[]) null));\r\n    assertFalse(CharSetUtils.containsAny(\"hello\"));\r\n    assertFalse(CharSetUtils.containsAny(\"hello\", (String) null));\r\n    assertTrue(CharSetUtils.containsAny(\"hello\", \"a-e\"));\r\n    assertTrue(CharSetUtils.containsAny(\"hello\", \"el\"));\r\n    assertFalse(CharSetUtils.containsAny(\"hello\", \"x\"));\r\n    assertTrue(CharSetUtils.containsAny(\"hello\", \"e-i\"));\r\n    assertTrue(CharSetUtils.containsAny(\"hello\", \"a-z\"));\r\n    assertFalse(CharSetUtils.containsAny(\"hello\", \"\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\CharSetUtilsTest.java",
  "methodName" : "testCount_StringString",
  "sourceCode" : "@Test\r\nvoid testCount_StringString() {\r\n    assertEquals(0, CharSetUtils.count(null, (String) null));\r\n    assertEquals(0, CharSetUtils.count(null, \"\"));\r\n    assertEquals(0, CharSetUtils.count(\"\", (String) null));\r\n    assertEquals(0, CharSetUtils.count(\"\", \"\"));\r\n    assertEquals(0, CharSetUtils.count(\"\", \"a-e\"));\r\n    assertEquals(0, CharSetUtils.count(\"hello\", (String) null));\r\n    assertEquals(0, CharSetUtils.count(\"hello\", \"\"));\r\n    assertEquals(1, CharSetUtils.count(\"hello\", \"a-e\"));\r\n    assertEquals(3, CharSetUtils.count(\"hello\", \"l-p\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\CharSetUtilsTest.java",
  "methodName" : "testCount_StringStringarray",
  "sourceCode" : "@Test\r\nvoid testCount_StringStringarray() {\r\n    assertEquals(0, CharSetUtils.count(null, (String[]) null));\r\n    assertEquals(0, CharSetUtils.count(null));\r\n    assertEquals(0, CharSetUtils.count(null, (String) null));\r\n    assertEquals(0, CharSetUtils.count(null, \"a-e\"));\r\n    assertEquals(0, CharSetUtils.count(\"\", (String[]) null));\r\n    assertEquals(0, CharSetUtils.count(\"\"));\r\n    assertEquals(0, CharSetUtils.count(\"\", (String) null));\r\n    assertEquals(0, CharSetUtils.count(\"\", \"a-e\"));\r\n    assertEquals(0, CharSetUtils.count(\"hello\", (String[]) null));\r\n    assertEquals(0, CharSetUtils.count(\"hello\"));\r\n    assertEquals(0, CharSetUtils.count(\"hello\", (String) null));\r\n    assertEquals(1, CharSetUtils.count(\"hello\", \"a-e\"));\r\n    assertEquals(3, CharSetUtils.count(\"hello\", \"el\"));\r\n    assertEquals(0, CharSetUtils.count(\"hello\", \"x\"));\r\n    assertEquals(2, CharSetUtils.count(\"hello\", \"e-i\"));\r\n    assertEquals(5, CharSetUtils.count(\"hello\", \"a-z\"));\r\n    assertEquals(0, CharSetUtils.count(\"hello\", \"\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\CharSetUtilsTest.java",
  "methodName" : "testDelete_StringString",
  "sourceCode" : "@Test\r\nvoid testDelete_StringString() {\r\n    assertNull(CharSetUtils.delete(null, (String) null));\r\n    assertNull(CharSetUtils.delete(null, \"\"));\r\n    assertEquals(\"\", CharSetUtils.delete(\"\", (String) null));\r\n    assertEquals(\"\", CharSetUtils.delete(\"\", \"\"));\r\n    assertEquals(\"\", CharSetUtils.delete(\"\", \"a-e\"));\r\n    assertEquals(\"hello\", CharSetUtils.delete(\"hello\", (String) null));\r\n    assertEquals(\"hello\", CharSetUtils.delete(\"hello\", \"\"));\r\n    assertEquals(\"hllo\", CharSetUtils.delete(\"hello\", \"a-e\"));\r\n    assertEquals(\"he\", CharSetUtils.delete(\"hello\", \"l-p\"));\r\n    assertEquals(\"hello\", CharSetUtils.delete(\"hello\", \"z\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\CharSetUtilsTest.java",
  "methodName" : "testDelete_StringStringarray",
  "sourceCode" : "@Test\r\nvoid testDelete_StringStringarray() {\r\n    assertNull(CharSetUtils.delete(null, (String[]) null));\r\n    assertNull(CharSetUtils.delete(null));\r\n    assertNull(CharSetUtils.delete(null, (String) null));\r\n    assertNull(CharSetUtils.delete(null, \"el\"));\r\n    assertEquals(\"\", CharSetUtils.delete(\"\", (String[]) null));\r\n    assertEquals(\"\", CharSetUtils.delete(\"\"));\r\n    assertEquals(\"\", CharSetUtils.delete(\"\", (String) null));\r\n    assertEquals(\"\", CharSetUtils.delete(\"\", \"a-e\"));\r\n    assertEquals(\"hello\", CharSetUtils.delete(\"hello\", (String[]) null));\r\n    assertEquals(\"hello\", CharSetUtils.delete(\"hello\"));\r\n    assertEquals(\"hello\", CharSetUtils.delete(\"hello\", (String) null));\r\n    assertEquals(\"hello\", CharSetUtils.delete(\"hello\", \"xyz\"));\r\n    assertEquals(\"ho\", CharSetUtils.delete(\"hello\", \"el\"));\r\n    assertEquals(\"\", CharSetUtils.delete(\"hello\", \"elho\"));\r\n    assertEquals(\"hello\", CharSetUtils.delete(\"hello\", \"\"));\r\n    assertEquals(\"hello\", CharSetUtils.delete(\"hello\", \"\"));\r\n    assertEquals(\"\", CharSetUtils.delete(\"hello\", \"a-z\"));\r\n    assertEquals(\"\", CharSetUtils.delete(\"----\", \"-\"));\r\n    assertEquals(\"heo\", CharSetUtils.delete(\"hello\", \"l\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\CharSetUtilsTest.java",
  "methodName" : "testKeep_StringString",
  "sourceCode" : "@Test\r\nvoid testKeep_StringString() {\r\n    assertNull(CharSetUtils.keep(null, (String) null));\r\n    assertNull(CharSetUtils.keep(null, \"\"));\r\n    assertEquals(\"\", CharSetUtils.keep(\"\", (String) null));\r\n    assertEquals(\"\", CharSetUtils.keep(\"\", \"\"));\r\n    assertEquals(\"\", CharSetUtils.keep(\"\", \"a-e\"));\r\n    assertEquals(\"\", CharSetUtils.keep(\"hello\", (String) null));\r\n    assertEquals(\"\", CharSetUtils.keep(\"hello\", \"\"));\r\n    assertEquals(\"\", CharSetUtils.keep(\"hello\", \"xyz\"));\r\n    assertEquals(\"hello\", CharSetUtils.keep(\"hello\", \"a-z\"));\r\n    assertEquals(\"hello\", CharSetUtils.keep(\"hello\", \"oleh\"));\r\n    assertEquals(\"ell\", CharSetUtils.keep(\"hello\", \"el\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\CharSetUtilsTest.java",
  "methodName" : "testKeep_StringStringarray",
  "sourceCode" : "@Test\r\nvoid testKeep_StringStringarray() {\r\n    assertNull(CharSetUtils.keep(null, (String[]) null));\r\n    assertNull(CharSetUtils.keep(null));\r\n    assertNull(CharSetUtils.keep(null, (String) null));\r\n    assertNull(CharSetUtils.keep(null, \"a-e\"));\r\n    assertEquals(\"\", CharSetUtils.keep(\"\", (String[]) null));\r\n    assertEquals(\"\", CharSetUtils.keep(\"\"));\r\n    assertEquals(\"\", CharSetUtils.keep(\"\", (String) null));\r\n    assertEquals(\"\", CharSetUtils.keep(\"\", \"a-e\"));\r\n    assertEquals(\"\", CharSetUtils.keep(\"hello\", (String[]) null));\r\n    assertEquals(\"\", CharSetUtils.keep(\"hello\"));\r\n    assertEquals(\"\", CharSetUtils.keep(\"hello\", (String) null));\r\n    assertEquals(\"e\", CharSetUtils.keep(\"hello\", \"a-e\"));\r\n    assertEquals(\"e\", CharSetUtils.keep(\"hello\", \"a-e\"));\r\n    assertEquals(\"ell\", CharSetUtils.keep(\"hello\", \"el\"));\r\n    assertEquals(\"hello\", CharSetUtils.keep(\"hello\", \"elho\"));\r\n    assertEquals(\"hello\", CharSetUtils.keep(\"hello\", \"a-z\"));\r\n    assertEquals(\"----\", CharSetUtils.keep(\"----\", \"-\"));\r\n    assertEquals(\"ll\", CharSetUtils.keep(\"hello\", \"l\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\CharSetUtilsTest.java",
  "methodName" : "testSqueeze_StringString",
  "sourceCode" : "@Test\r\nvoid testSqueeze_StringString() {\r\n    assertNull(CharSetUtils.squeeze(null, (String) null));\r\n    assertNull(CharSetUtils.squeeze(null, \"\"));\r\n    assertEquals(\"\", CharSetUtils.squeeze(\"\", (String) null));\r\n    assertEquals(\"\", CharSetUtils.squeeze(\"\", \"\"));\r\n    assertEquals(\"\", CharSetUtils.squeeze(\"\", \"a-e\"));\r\n    assertEquals(\"hello\", CharSetUtils.squeeze(\"hello\", (String) null));\r\n    assertEquals(\"hello\", CharSetUtils.squeeze(\"hello\", \"\"));\r\n    assertEquals(\"hello\", CharSetUtils.squeeze(\"hello\", \"a-e\"));\r\n    assertEquals(\"helo\", CharSetUtils.squeeze(\"hello\", \"l-p\"));\r\n    assertEquals(\"heloo\", CharSetUtils.squeeze(\"helloo\", \"l\"));\r\n    assertEquals(\"hello\", CharSetUtils.squeeze(\"helloo\", \"^l\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\CharSetUtilsTest.java",
  "methodName" : "testSqueeze_StringStringarray",
  "sourceCode" : "@Test\r\nvoid testSqueeze_StringStringarray() {\r\n    assertNull(CharSetUtils.squeeze(null, (String[]) null));\r\n    assertNull(CharSetUtils.squeeze(null));\r\n    assertNull(CharSetUtils.squeeze(null, (String) null));\r\n    assertNull(CharSetUtils.squeeze(null, \"el\"));\r\n    assertEquals(\"\", CharSetUtils.squeeze(\"\", (String[]) null));\r\n    assertEquals(\"\", CharSetUtils.squeeze(\"\"));\r\n    assertEquals(\"\", CharSetUtils.squeeze(\"\", (String) null));\r\n    assertEquals(\"\", CharSetUtils.squeeze(\"\", \"a-e\"));\r\n    assertEquals(\"hello\", CharSetUtils.squeeze(\"hello\", (String[]) null));\r\n    assertEquals(\"hello\", CharSetUtils.squeeze(\"hello\"));\r\n    assertEquals(\"hello\", CharSetUtils.squeeze(\"hello\", (String) null));\r\n    assertEquals(\"hello\", CharSetUtils.squeeze(\"hello\", \"a-e\"));\r\n    assertEquals(\"helo\", CharSetUtils.squeeze(\"hello\", \"el\"));\r\n    assertEquals(\"hello\", CharSetUtils.squeeze(\"hello\", \"e\"));\r\n    assertEquals(\"fofof\", CharSetUtils.squeeze(\"fooffooff\", \"of\"));\r\n    assertEquals(\"fof\", CharSetUtils.squeeze(\"fooooff\", \"fo\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\CharUtilsTest.java",
  "methodName" : "testCompare",
  "sourceCode" : "@Test\r\nvoid testCompare() {\r\n    assertTrue(CharUtils.compare('a', 'b') < 0);\r\n    assertEquals(0, CharUtils.compare('c', 'c'));\r\n    assertTrue(CharUtils.compare('c', 'a') > 0);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\CharUtilsTest.java",
  "methodName" : "testConstructor",
  "sourceCode" : "@Test\r\nvoid testConstructor() {\r\n    assertNotNull(new CharUtils());\r\n    final Constructor<?>[] cons = CharUtils.class.getDeclaredConstructors();\r\n    assertEquals(1, cons.length);\r\n    assertTrue(Modifier.isPublic(cons[0].getModifiers()));\r\n    assertTrue(Modifier.isPublic(CharUtils.class.getModifiers()));\r\n    assertFalse(Modifier.isFinal(CharUtils.class.getModifiers()));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\CharUtilsTest.java",
  "methodName" : "testIsAscii_char",
  "sourceCode" : "@Test\r\nvoid testIsAscii_char() {\r\n    assertTrue(CharUtils.isAscii('a'));\r\n    assertTrue(CharUtils.isAscii('A'));\r\n    assertTrue(CharUtils.isAscii('3'));\r\n    assertTrue(CharUtils.isAscii('-'));\r\n    assertTrue(CharUtils.isAscii('\\n'));\r\n    assertFalse(CharUtils.isAscii(CHAR_COPY));\r\n    for (int i = 0; i < 255; i++) {\r\n        assertEquals(i < 128, CharUtils.isAscii((char) i));\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\CharUtilsTest.java",
  "methodName" : "testIsAsciiAlpha_char",
  "sourceCode" : "@Test\r\nvoid testIsAsciiAlpha_char() {\r\n    assertTrue(CharUtils.isAsciiAlpha('a'));\r\n    assertTrue(CharUtils.isAsciiAlpha('A'));\r\n    assertFalse(CharUtils.isAsciiAlpha('3'));\r\n    assertFalse(CharUtils.isAsciiAlpha('-'));\r\n    assertFalse(CharUtils.isAsciiAlpha('\\n'));\r\n    assertFalse(CharUtils.isAsciiAlpha(CHAR_COPY));\r\n    for (int i = 0; i < 196; i++) {\r\n        if (i >= 'A' && i <= 'Z' || i >= 'a' && i <= 'z') {\r\n            assertTrue(CharUtils.isAsciiAlpha((char) i));\r\n        } else {\r\n            assertFalse(CharUtils.isAsciiAlpha((char) i));\r\n        }\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\CharUtilsTest.java",
  "methodName" : "testIsAsciiAlphaLower_char",
  "sourceCode" : "@Test\r\nvoid testIsAsciiAlphaLower_char() {\r\n    assertTrue(CharUtils.isAsciiAlphaLower('a'));\r\n    assertFalse(CharUtils.isAsciiAlphaLower('A'));\r\n    assertFalse(CharUtils.isAsciiAlphaLower('3'));\r\n    assertFalse(CharUtils.isAsciiAlphaLower('-'));\r\n    assertFalse(CharUtils.isAsciiAlphaLower('\\n'));\r\n    assertFalse(CharUtils.isAsciiAlphaLower(CHAR_COPY));\r\n    for (int i = 0; i < 196; i++) {\r\n        if (i >= 'a' && i <= 'z') {\r\n            assertTrue(CharUtils.isAsciiAlphaLower((char) i));\r\n        } else {\r\n            assertFalse(CharUtils.isAsciiAlphaLower((char) i));\r\n        }\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\CharUtilsTest.java",
  "methodName" : "testIsAsciiAlphanumeric_char",
  "sourceCode" : "@Test\r\nvoid testIsAsciiAlphanumeric_char() {\r\n    assertTrue(CharUtils.isAsciiAlphanumeric('a'));\r\n    assertTrue(CharUtils.isAsciiAlphanumeric('A'));\r\n    assertTrue(CharUtils.isAsciiAlphanumeric('3'));\r\n    assertFalse(CharUtils.isAsciiAlphanumeric('-'));\r\n    assertFalse(CharUtils.isAsciiAlphanumeric('\\n'));\r\n    assertFalse(CharUtils.isAsciiAlphanumeric(CHAR_COPY));\r\n    for (int i = 0; i < 196; i++) {\r\n        if (i >= 'A' && i <= 'Z' || i >= 'a' && i <= 'z' || i >= '0' && i <= '9') {\r\n            assertTrue(CharUtils.isAsciiAlphanumeric((char) i));\r\n        } else {\r\n            assertFalse(CharUtils.isAsciiAlphanumeric((char) i));\r\n        }\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\CharUtilsTest.java",
  "methodName" : "testIsAsciiAlphaUpper_char",
  "sourceCode" : "@Test\r\nvoid testIsAsciiAlphaUpper_char() {\r\n    assertFalse(CharUtils.isAsciiAlphaUpper('a'));\r\n    assertTrue(CharUtils.isAsciiAlphaUpper('A'));\r\n    assertFalse(CharUtils.isAsciiAlphaUpper('3'));\r\n    assertFalse(CharUtils.isAsciiAlphaUpper('-'));\r\n    assertFalse(CharUtils.isAsciiAlphaUpper('\\n'));\r\n    assertFalse(CharUtils.isAsciiAlphaUpper(CHAR_COPY));\r\n    for (int i = 0; i < 196; i++) {\r\n        if (i >= 'A' && i <= 'Z') {\r\n            assertTrue(CharUtils.isAsciiAlphaUpper((char) i));\r\n        } else {\r\n            assertFalse(CharUtils.isAsciiAlphaUpper((char) i));\r\n        }\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\CharUtilsTest.java",
  "methodName" : "testIsAsciiControl_char",
  "sourceCode" : "@Test\r\nvoid testIsAsciiControl_char() {\r\n    assertFalse(CharUtils.isAsciiControl('a'));\r\n    assertFalse(CharUtils.isAsciiControl('A'));\r\n    assertFalse(CharUtils.isAsciiControl('3'));\r\n    assertFalse(CharUtils.isAsciiControl('-'));\r\n    assertTrue(CharUtils.isAsciiControl('\\n'));\r\n    assertFalse(CharUtils.isAsciiControl(CHAR_COPY));\r\n    for (int i = 0; i < 196; i++) {\r\n        if (i < 32 || i == 127) {\r\n            assertTrue(CharUtils.isAsciiControl((char) i));\r\n        } else {\r\n            assertFalse(CharUtils.isAsciiControl((char) i));\r\n        }\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\CharUtilsTest.java",
  "methodName" : "testIsAsciiNumeric_char",
  "sourceCode" : "@Test\r\nvoid testIsAsciiNumeric_char() {\r\n    assertFalse(CharUtils.isAsciiNumeric('a'));\r\n    assertFalse(CharUtils.isAsciiNumeric('A'));\r\n    assertTrue(CharUtils.isAsciiNumeric('3'));\r\n    assertFalse(CharUtils.isAsciiNumeric('-'));\r\n    assertFalse(CharUtils.isAsciiNumeric('\\n'));\r\n    assertFalse(CharUtils.isAsciiNumeric(CHAR_COPY));\r\n    for (int i = 0; i < 196; i++) {\r\n        if (i >= '0' && i <= '9') {\r\n            assertTrue(CharUtils.isAsciiNumeric((char) i));\r\n        } else {\r\n            assertFalse(CharUtils.isAsciiNumeric((char) i));\r\n        }\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\CharUtilsTest.java",
  "methodName" : "testIsAsciiPrintable_char",
  "sourceCode" : "@Test\r\nvoid testIsAsciiPrintable_char() {\r\n    assertTrue(CharUtils.isAsciiPrintable('a'));\r\n    assertTrue(CharUtils.isAsciiPrintable('A'));\r\n    assertTrue(CharUtils.isAsciiPrintable('3'));\r\n    assertTrue(CharUtils.isAsciiPrintable('-'));\r\n    assertFalse(CharUtils.isAsciiPrintable('\\n'));\r\n    assertFalse(CharUtils.isAsciiPrintable(CHAR_COPY));\r\n    for (int i = 0; i < 196; i++) {\r\n        if (i >= 32 && i <= 126) {\r\n            assertTrue(CharUtils.isAsciiPrintable((char) i));\r\n        } else {\r\n            assertFalse(CharUtils.isAsciiPrintable((char) i));\r\n        }\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\CharUtilsTest.java",
  "methodName" : "testToChar_Character",
  "sourceCode" : "@Test\r\nvoid testToChar_Character() {\r\n    assertEquals('A', CharUtils.toChar(CHARACTER_A));\r\n    assertEquals('B', CharUtils.toChar(CHARACTER_B));\r\n    assertNullPointerException(() -> CharUtils.toChar((Character) null));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\CharUtilsTest.java",
  "methodName" : "testToChar_Character_char",
  "sourceCode" : "@Test\r\nvoid testToChar_Character_char() {\r\n    assertEquals('A', CharUtils.toChar(CHARACTER_A, 'X'));\r\n    assertEquals('B', CharUtils.toChar(CHARACTER_B, 'X'));\r\n    assertEquals('X', CharUtils.toChar((Character) null, 'X'));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\CharUtilsTest.java",
  "methodName" : "testToChar_String",
  "sourceCode" : "@Test\r\nvoid testToChar_String() {\r\n    assertEquals('A', CharUtils.toChar(\"A\"));\r\n    assertEquals('B', CharUtils.toChar(\"BA\"));\r\n    assertNullPointerException(() -> CharUtils.toChar((String) null));\r\n    assertIllegalArgumentException(() -> CharUtils.toChar(\"\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\CharUtilsTest.java",
  "methodName" : "testToChar_String_char",
  "sourceCode" : "@Test\r\nvoid testToChar_String_char() {\r\n    assertEquals('A', CharUtils.toChar(\"A\", 'X'));\r\n    assertEquals('B', CharUtils.toChar(\"BA\", 'X'));\r\n    assertEquals('X', CharUtils.toChar(\"\", 'X'));\r\n    assertEquals('X', CharUtils.toChar((String) null, 'X'));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\CharUtilsTest.java",
  "methodName" : "testToCharacterObject_char",
  "sourceCode" : "// intentional test of deprecated method\r\n@SuppressWarnings(\"deprecation\")\r\n@Test\r\nvoid testToCharacterObject_char() {\r\n    assertEquals(Character.valueOf('a'), CharUtils.toCharacterObject('a'));\r\n    assertSame(CharUtils.toCharacterObject('a'), CharUtils.toCharacterObject('a'));\r\n    for (int i = 0; i < 128; i++) {\r\n        final Character ch = CharUtils.toCharacterObject((char) i);\r\n        final Character ch2 = CharUtils.toCharacterObject((char) i);\r\n        assertSame(ch, ch2);\r\n        assertEquals(i, ch.charValue());\r\n    }\r\n    for (int i = 128; i < 196; i++) {\r\n        final Character ch = CharUtils.toCharacterObject((char) i);\r\n        final Character ch2 = CharUtils.toCharacterObject((char) i);\r\n        assertEquals(ch, ch2);\r\n        assertNotSame(ch, ch2);\r\n        assertEquals(i, ch.charValue());\r\n        assertEquals(i, ch2.charValue());\r\n    }\r\n    assertSame(CharUtils.toCharacterObject(\"a\"), CharUtils.toCharacterObject('a'));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\CharUtilsTest.java",
  "methodName" : "testToCharacterObject_String",
  "sourceCode" : "@Test\r\nvoid testToCharacterObject_String() {\r\n    assertNull(CharUtils.toCharacterObject(null));\r\n    assertNull(CharUtils.toCharacterObject(\"\"));\r\n    assertEquals(Character.valueOf('a'), CharUtils.toCharacterObject(\"a\"));\r\n    assertEquals(Character.valueOf('a'), CharUtils.toCharacterObject(\"abc\"));\r\n    assertSame(CharUtils.toCharacterObject(\"a\"), CharUtils.toCharacterObject(\"a\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\CharUtilsTest.java",
  "methodName" : "testToIntValue_char",
  "sourceCode" : "@Test\r\nvoid testToIntValue_char() {\r\n    assertEquals(0, CharUtils.toIntValue('0'));\r\n    assertEquals(1, CharUtils.toIntValue('1'));\r\n    assertEquals(2, CharUtils.toIntValue('2'));\r\n    assertEquals(3, CharUtils.toIntValue('3'));\r\n    assertEquals(4, CharUtils.toIntValue('4'));\r\n    assertEquals(5, CharUtils.toIntValue('5'));\r\n    assertEquals(6, CharUtils.toIntValue('6'));\r\n    assertEquals(7, CharUtils.toIntValue('7'));\r\n    assertEquals(8, CharUtils.toIntValue('8'));\r\n    assertEquals(9, CharUtils.toIntValue('9'));\r\n    assertIllegalArgumentException(() -> CharUtils.toIntValue('a'));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\CharUtilsTest.java",
  "methodName" : "testToIntValue_char_int",
  "sourceCode" : "@Test\r\nvoid testToIntValue_char_int() {\r\n    assertEquals(0, CharUtils.toIntValue('0', -1));\r\n    assertEquals(3, CharUtils.toIntValue('3', -1));\r\n    assertEquals(-1, CharUtils.toIntValue('a', -1));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\CharUtilsTest.java",
  "methodName" : "testToIntValue_Character",
  "sourceCode" : "@Test\r\nvoid testToIntValue_Character() {\r\n    assertEquals(0, CharUtils.toIntValue(Character.valueOf('0')));\r\n    assertEquals(3, CharUtils.toIntValue(Character.valueOf('3')));\r\n    assertNullPointerException(() -> CharUtils.toIntValue(null));\r\n    assertIllegalArgumentException(() -> CharUtils.toIntValue(CHARACTER_A));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\CharUtilsTest.java",
  "methodName" : "testToIntValue_Character_int",
  "sourceCode" : "@Test\r\nvoid testToIntValue_Character_int() {\r\n    assertEquals(0, CharUtils.toIntValue(Character.valueOf('0'), -1));\r\n    assertEquals(3, CharUtils.toIntValue(Character.valueOf('3'), -1));\r\n    assertEquals(-1, CharUtils.toIntValue(Character.valueOf('A'), -1));\r\n    assertEquals(-1, CharUtils.toIntValue(null, -1));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\CharUtilsTest.java",
  "methodName" : "testToString_char",
  "sourceCode" : "@Test\r\nvoid testToString_char() {\r\n    assertEquals(\"a\", CharUtils.toString('a'));\r\n    assertSame(CharUtils.toString('a'), CharUtils.toString('a'));\r\n    for (int i = 0; i < 128; i++) {\r\n        final String str = CharUtils.toString((char) i);\r\n        final String str2 = CharUtils.toString((char) i);\r\n        assertSame(str, str2);\r\n        assertEquals(1, str.length());\r\n        assertEquals(i, str.charAt(0));\r\n    }\r\n    for (int i = 128; i < 196; i++) {\r\n        final String str = CharUtils.toString((char) i);\r\n        final String str2 = CharUtils.toString((char) i);\r\n        assertEquals(str, str2);\r\n        assertNotSame(str, str2);\r\n        assertEquals(1, str.length());\r\n        assertEquals(i, str.charAt(0));\r\n        assertEquals(1, str2.length());\r\n        assertEquals(i, str2.charAt(0));\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\CharUtilsTest.java",
  "methodName" : "testToString_Character",
  "sourceCode" : "@Test\r\nvoid testToString_Character() {\r\n    assertNull(CharUtils.toString(null));\r\n    assertEquals(\"A\", CharUtils.toString(CHARACTER_A));\r\n    assertSame(CharUtils.toString(CHARACTER_A), CharUtils.toString(CHARACTER_A));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\CharUtilsTest.java",
  "methodName" : "testToUnicodeEscaped_char",
  "sourceCode" : "@Test\r\nvoid testToUnicodeEscaped_char() {\r\n    assertEquals(\"\\\\u0041\", CharUtils.unicodeEscaped('A'));\r\n    assertEquals(\"\\\\u004c\", CharUtils.unicodeEscaped('L'));\r\n    for (int i = 0; i < 196; i++) {\r\n        final String str = CharUtils.unicodeEscaped((char) i);\r\n        assertEquals(6, str.length());\r\n        final int val = Integer.parseInt(str.substring(2), 16);\r\n        assertEquals(i, val);\r\n    }\r\n    assertEquals(\"\\\\u0999\", CharUtils.unicodeEscaped((char) 0x999));\r\n    assertEquals(\"\\\\u1001\", CharUtils.unicodeEscaped((char) 0x1001));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\CharUtilsTest.java",
  "methodName" : "testToUnicodeEscaped_Character",
  "sourceCode" : "@Test\r\nvoid testToUnicodeEscaped_Character() {\r\n    assertNull(CharUtils.unicodeEscaped(null));\r\n    assertEquals(\"\\\\u0041\", CharUtils.unicodeEscaped(CHARACTER_A));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ClassLoaderUtilsTest.java",
  "methodName" : "testGetSystemURLs",
  "sourceCode" : "@Test\r\nvoid testGetSystemURLs() {\r\n    // TODO How to better test considering this test may be called from an IDE and Maven?\r\n    assertNotNull(ClassLoaderUtils.getSystemURLs());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ClassLoaderUtilsTest.java",
  "methodName" : "testGetThreadURLs",
  "sourceCode" : "@Test\r\nvoid testGetThreadURLs() {\r\n    // TODO How to better test considering this test may be called from an IDE and Maven?\r\n    assertNotNull(ClassLoaderUtils.getThreadURLs());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ClassLoaderUtilsTest.java",
  "methodName" : "testToString_ClassLoader",
  "sourceCode" : "@Test\r\nvoid testToString_ClassLoader() throws IOException {\r\n    final URL url = new URL(\"http://localhost\");\r\n    try (URLClassLoader urlClassLoader = new URLClassLoader(new URL[] { url })) {\r\n        @SuppressWarnings(\"resource\")\r\n        final ClassLoader classLoader = urlClassLoader;\r\n        Assertions.assertEquals(String.format(\"%s[%s]\", classLoader, url), ClassLoaderUtils.toString(classLoader));\r\n    }\r\n    assertEquals(\"null\", ClassLoaderUtils.toString((ClassLoader) null));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ClassLoaderUtilsTest.java",
  "methodName" : "testToString_URLClassLoader",
  "sourceCode" : "@Test\r\nvoid testToString_URLClassLoader() throws IOException {\r\n    final URL url = new URL(\"http://localhost\");\r\n    try (URLClassLoader urlClassLoader = new URLClassLoader(new URL[] { url })) {\r\n        Assertions.assertEquals(String.format(\"%s[%s]\", urlClassLoader, url), ClassLoaderUtils.toString(urlClassLoader));\r\n    }\r\n    assertEquals(\"null\", ClassLoaderUtils.toString((URLClassLoader) null));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ClassPathUtilsTest.java",
  "methodName" : "testConstructor",
  "sourceCode" : "@Test\r\nvoid testConstructor() {\r\n    assertNotNull(new ClassPathUtils());\r\n    final Constructor<?>[] cons = ClassPathUtils.class.getDeclaredConstructors();\r\n    assertEquals(1, cons.length);\r\n    assertTrue(Modifier.isPublic(cons[0].getModifiers()));\r\n    assertTrue(Modifier.isPublic(ClassPathUtils.class.getModifiers()));\r\n    assertFalse(Modifier.isFinal(ClassPathUtils.class.getModifiers()));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ClassPathUtilsTest.java",
  "methodName" : "testPackageToPath",
  "sourceCode" : "@Test\r\nvoid testPackageToPath() {\r\n    assertEquals(\"a\", ClassPathUtils.packageToPath(\"a\"));\r\n    assertEquals(\"a/b\", ClassPathUtils.packageToPath(\"a.b\"));\r\n    assertEquals(\"a/b/c\", ClassPathUtils.packageToPath(\"a.b.c\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ClassPathUtilsTest.java",
  "methodName" : "testPathToPackage",
  "sourceCode" : "@Test\r\nvoid testPathToPackage() {\r\n    assertEquals(\"a\", ClassPathUtils.pathToPackage(\"a\"));\r\n    assertEquals(\"a.b\", ClassPathUtils.pathToPackage(\"a/b\"));\r\n    assertEquals(\"a.b.c\", ClassPathUtils.pathToPackage(\"a/b/c\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ClassPathUtilsTest.java",
  "methodName" : "testToFullyQualifiedNameClassNull",
  "sourceCode" : "@Test\r\nvoid testToFullyQualifiedNameClassNull() {\r\n    assertNullPointerException(() -> ClassPathUtils.toFullyQualifiedName(ClassPathUtils.class, null));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ClassPathUtilsTest.java",
  "methodName" : "testToFullyQualifiedNameClassString",
  "sourceCode" : "@Test\r\nvoid testToFullyQualifiedNameClassString() {\r\n    final String expected = \"org.apache.commons.lang3.Test.properties\";\r\n    final String actual = ClassPathUtils.toFullyQualifiedName(ClassPathUtils.class, \"Test.properties\");\r\n    assertEquals(expected, actual);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ClassPathUtilsTest.java",
  "methodName" : "testToFullyQualifiedNameNullClassString",
  "sourceCode" : "@Test\r\nvoid testToFullyQualifiedNameNullClassString() {\r\n    assertNullPointerException(() -> ClassPathUtils.toFullyQualifiedName((Class<?>) null, \"Test.properties\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ClassPathUtilsTest.java",
  "methodName" : "testToFullyQualifiedNameNullPackageString",
  "sourceCode" : "@Test\r\nvoid testToFullyQualifiedNameNullPackageString() {\r\n    assertNullPointerException(() -> ClassPathUtils.toFullyQualifiedName((Package) null, \"Test.properties\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ClassPathUtilsTest.java",
  "methodName" : "testToFullyQualifiedNamePackageNull",
  "sourceCode" : "@Test\r\nvoid testToFullyQualifiedNamePackageNull() {\r\n    assertNullPointerException(() -> ClassPathUtils.toFullyQualifiedName(ClassPathUtils.class.getPackage(), null));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ClassPathUtilsTest.java",
  "methodName" : "testToFullyQualifiedNamePackageString",
  "sourceCode" : "@Test\r\nvoid testToFullyQualifiedNamePackageString() {\r\n    final String expected = \"org.apache.commons.lang3.Test.properties\";\r\n    final String actual = ClassPathUtils.toFullyQualifiedName(ClassPathUtils.class.getPackage(), \"Test.properties\");\r\n    assertEquals(expected, actual);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ClassPathUtilsTest.java",
  "methodName" : "testToFullyQualifiedPathClass",
  "sourceCode" : "@Test\r\nvoid testToFullyQualifiedPathClass() {\r\n    final String expected = \"org/apache/commons/lang3/Test.properties\";\r\n    final String actual = ClassPathUtils.toFullyQualifiedPath(ClassPathUtils.class, \"Test.properties\");\r\n    assertEquals(expected, actual);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ClassPathUtilsTest.java",
  "methodName" : "testToFullyQualifiedPathClassNull",
  "sourceCode" : "@Test\r\nvoid testToFullyQualifiedPathClassNull() {\r\n    assertNullPointerException(() -> ClassPathUtils.toFullyQualifiedPath(ClassPathUtils.class, null));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ClassPathUtilsTest.java",
  "methodName" : "testToFullyQualifiedPathClassNullString",
  "sourceCode" : "@Test\r\nvoid testToFullyQualifiedPathClassNullString() {\r\n    assertNullPointerException(() -> ClassPathUtils.toFullyQualifiedPath((Class<?>) null, \"Test.properties\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ClassPathUtilsTest.java",
  "methodName" : "testToFullyQualifiedPathPackage",
  "sourceCode" : "@Test\r\nvoid testToFullyQualifiedPathPackage() {\r\n    final String expected = \"org/apache/commons/lang3/Test.properties\";\r\n    final String actual = ClassPathUtils.toFullyQualifiedPath(ClassPathUtils.class.getPackage(), \"Test.properties\");\r\n    assertEquals(expected, actual);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ClassPathUtilsTest.java",
  "methodName" : "testToFullyQualifiedPathPackageNull",
  "sourceCode" : "@Test\r\nvoid testToFullyQualifiedPathPackageNull() {\r\n    assertNullPointerException(() -> ClassPathUtils.toFullyQualifiedPath(ClassPathUtils.class.getPackage(), null));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ClassPathUtilsTest.java",
  "methodName" : "testToFullyQualifiedPathPackageNullString",
  "sourceCode" : "@Test\r\nvoid testToFullyQualifiedPathPackageNullString() {\r\n    assertNullPointerException(() -> ClassPathUtils.toFullyQualifiedPath((Package) null, \"Test.properties\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ClassUtilsOssFuzzTest.java",
  "methodName" : "testGetClassLongIllegalName",
  "sourceCode" : "/**\r\n * Tests that no StackOverflowError is thrown.\r\n * <p>\r\n * OSS-Fuzz Issue 42522972: apache-commons-text:StringSubstitutorInterpolatorFuzzer: Security exception in org.apache.commons.lang3.ClassUtils.getClass\r\n * </p>\r\n */\r\n@Test\r\npublic void testGetClassLongIllegalName() throws Exception {\r\n    // Input from Commons Text clusterfuzz-testcase-StringSubstitutorInterpolatorFuzzer-5447769450741760\r\n    assertThrows(ClassNotFoundException.class, () -> ClassUtils.getClass(\"ˇda´~e]W]\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000~\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000t\u0000$t\u0000${.u\u0000base64encoder{con+s\u0000{.u\u0000base64encoder{con+s\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000~\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000t\u0000\u0000\u0000....................\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000................ˇˇˇˇˇˇˇˇˇˇ\u0014&${localho\u001Dt:ˇˇˇˇˇˇ4ˇ\u0003.........\u0000\u0000...............\u0017..........s${.!.\u0000${.. \u0000\\\\E],${conÅ\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0000EEE]W€EÅE.!\u0000${.u\u0000base64encoder{conÅ\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0000EEE]W€EÅE.!\u0000${.u\u0000base64encoder{con+s\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000~\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000t\u0000\u0000\u0000....................................ˇˇˇˇˇˇˇˇˇˇ\u0014&${localho\u001Dt:ˇˇˇˇˇˇ-636ˇ\u0003.............................................................\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-....\u000E..\u0000\u0000\u0000\u0000\u0000t]V]W€EÅE.!\u0000$${.u\u0000-\u0000-\u0000}\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ClassUtilsOssFuzzTest.java",
  "methodName" : "testGetClassLongName",
  "sourceCode" : "/**\r\n * Tests that no StackOverflowError is thrown.\r\n */\r\n@Test\r\npublic void testGetClassLongName() throws Exception {\r\n    // Input from based on the above, without illegal characters.\r\n    assertThrows(ClassNotFoundException.class, () -> ClassUtils.getClass(StringUtils.repeat(\"a.\", 5_000) + \"b\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ClassUtilsTest.java",
  "methodName" : "test_convertClassesToClassNames_List",
  "sourceCode" : "@Test\r\nvoid test_convertClassesToClassNames_List() {\r\n    final List<Class<?>> list = new ArrayList<>();\r\n    List<String> result = ClassUtils.convertClassesToClassNames(list);\r\n    assertEquals(0, result.size());\r\n    list.add(String.class);\r\n    list.add(null);\r\n    list.add(Object.class);\r\n    result = ClassUtils.convertClassesToClassNames(list);\r\n    assertEquals(3, result.size());\r\n    assertEquals(\"java.lang.String\", result.get(0));\r\n    assertNull(result.get(1));\r\n    assertEquals(OBJECT_CANONICAL_NAME, result.get(2));\r\n    // test what happens when non-generic code adds wrong type of element\r\n    @SuppressWarnings(\"unchecked\")\r\n    final List<Object> olist = (List<Object>) (List<?>) list;\r\n    olist.add(new Object());\r\n    assertThrows(ClassCastException.class, () -> ClassUtils.convertClassesToClassNames(list), \"Should not have been able to convert list\");\r\n    assertNull(ClassUtils.convertClassesToClassNames(null));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ClassUtilsTest.java",
  "methodName" : "test_convertClassNamesToClasses_List",
  "sourceCode" : "@Test\r\nvoid test_convertClassNamesToClasses_List() {\r\n    final List<String> list = new ArrayList<>();\r\n    List<Class<?>> result = ClassUtils.convertClassNamesToClasses(list);\r\n    assertEquals(0, result.size());\r\n    list.add(\"java.lang.String\");\r\n    list.add(\"java.lang.xxx\");\r\n    list.add(OBJECT_CANONICAL_NAME);\r\n    result = ClassUtils.convertClassNamesToClasses(list);\r\n    assertEquals(3, result.size());\r\n    assertEquals(String.class, result.get(0));\r\n    assertNull(result.get(1));\r\n    assertEquals(Object.class, result.get(2));\r\n    // test what happens when non-generic code adds wrong type of element\r\n    @SuppressWarnings(\"unchecked\")\r\n    final List<Object> olist = (List<Object>) (List<?>) list;\r\n    olist.add(new Object());\r\n    assertThrows(ClassCastException.class, () -> ClassUtils.convertClassNamesToClasses(list), \"Should not have been able to convert list\");\r\n    assertNull(ClassUtils.convertClassNamesToClasses(null));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ClassUtilsTest.java",
  "methodName" : "test_getAbbreviatedName_Class",
  "sourceCode" : "@Test\r\nvoid test_getAbbreviatedName_Class() {\r\n    assertEquals(\"\", ClassUtils.getAbbreviatedName((Class<?>) null, 1));\r\n    assertEquals(\"j.l.String\", ClassUtils.getAbbreviatedName(String.class, 1));\r\n    assertEquals(\"j.l.String\", ClassUtils.getAbbreviatedName(String.class, 5));\r\n    assertEquals(\"o.a.c.l.ClassUtils\", ClassUtils.getAbbreviatedName(ClassUtils.class, 18));\r\n    assertEquals(\"j.lang.String\", ClassUtils.getAbbreviatedName(String.class, 13));\r\n    assertEquals(\"j.lang.String\", ClassUtils.getAbbreviatedName(String.class, 15));\r\n    assertEquals(\"java.lang.String\", ClassUtils.getAbbreviatedName(String.class, 20));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ClassUtilsTest.java",
  "methodName" : "test_getAbbreviatedName_Class_NegativeLen",
  "sourceCode" : "@Test\r\n@DisplayName(\"When the desired length is negative then exception is thrown\")\r\nvoid test_getAbbreviatedName_Class_NegativeLen() {\r\n    assertIllegalArgumentException(() -> ClassUtils.getAbbreviatedName(String.class, -10));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ClassUtilsTest.java",
  "methodName" : "test_getAbbreviatedName_Class_ZeroLen",
  "sourceCode" : "@Test\r\n@DisplayName(\"When the desired length is zero then exception is thrown\")\r\nvoid test_getAbbreviatedName_Class_ZeroLen() {\r\n    assertIllegalArgumentException(() -> ClassUtils.getAbbreviatedName(String.class, 0));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ClassUtilsTest.java",
  "methodName" : "test_getAbbreviatedName_String",
  "sourceCode" : "@Test\r\nvoid test_getAbbreviatedName_String() {\r\n    assertEquals(\"\", ClassUtils.getAbbreviatedName((String) null, 1));\r\n    assertEquals(\"\", ClassUtils.getAbbreviatedName(\"\", 1));\r\n    assertEquals(\"WithoutPackage\", ClassUtils.getAbbreviatedName(\"WithoutPackage\", 1));\r\n    assertEquals(\"j.l.String\", ClassUtils.getAbbreviatedName(\"java.lang.String\", 1));\r\n    assertEquals(\"o.a.c.l.ClassUtils\", ClassUtils.getAbbreviatedName(\"org.apache.commons.lang3.ClassUtils\", 18));\r\n    assertEquals(\"org.apache.commons.lang3.ClassUtils\", ClassUtils.getAbbreviatedName(\"org.apache.commons.lang3.ClassUtils\", \"org.apache.commons.lang3.ClassUtils\".length()));\r\n    assertEquals(\"o.a.c.l.ClassUtils\", ClassUtils.getAbbreviatedName(\"o.a.c.l.ClassUtils\", 18));\r\n    assertEquals(\"o..c.l.ClassUtils\", ClassUtils.getAbbreviatedName(\"o..c.l.ClassUtils\", 18));\r\n    assertEquals(\".\", ClassUtils.getAbbreviatedName(\".\", 18));\r\n    assertEquals(\".\", ClassUtils.getAbbreviatedName(\".\", 1));\r\n    assertEquals(\"..\", ClassUtils.getAbbreviatedName(\"..\", 1));\r\n    assertEquals(\"...\", ClassUtils.getAbbreviatedName(\"...\", 2));\r\n    assertEquals(\"...\", ClassUtils.getAbbreviatedName(\"...\", 3));\r\n    assertEquals(\"java.lang.String\", ClassUtils.getAbbreviatedName(\"java.lang.String\", Integer.MAX_VALUE));\r\n    assertEquals(\"j.lang.String\", ClassUtils.getAbbreviatedName(\"java.lang.String\", \"j.lang.String\".length()));\r\n    assertEquals(\"j.l.String\", ClassUtils.getAbbreviatedName(\"java.lang.String\", \"j.lang.String\".length() - 1));\r\n    assertEquals(\"j.l.String\", ClassUtils.getAbbreviatedName(\"java.lang.String\", \"j.l.String\".length()));\r\n    assertEquals(\"j.l.String\", ClassUtils.getAbbreviatedName(\"java.lang.String\", \"j.l.String\".length() - 1));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ClassUtilsTest.java",
  "methodName" : "test_getAbbreviatedName_TooLongHint",
  "sourceCode" : "/**\r\n * Test that in case the required length is larger than the name and thus there is no need for any shortening then the\r\n * returned string object is the same as the one passed as argument. Note, however, that this is tested as an internal\r\n * implementation detail, but it is not a guaranteed feature of the implementation.\r\n */\r\n@Test\r\n@DisplayName(\"When the length hint is longer than the actual length then the same String object is returned\")\r\nvoid test_getAbbreviatedName_TooLongHint() {\r\n    final String className = \"java.lang.String\";\r\n    Assertions.assertSame(className, ClassUtils.getAbbreviatedName(className, className.length() + 1));\r\n    Assertions.assertSame(className, ClassUtils.getAbbreviatedName(className, className.length()));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ClassUtilsTest.java",
  "methodName" : "test_getAllInterfaces_Class",
  "sourceCode" : "@Test\r\nvoid test_getAllInterfaces_Class() {\r\n    final List<?> list = ClassUtils.getAllInterfaces(CY.class);\r\n    assertEquals(6, list.size());\r\n    assertEquals(IB.class, list.get(0));\r\n    assertEquals(IC.class, list.get(1));\r\n    assertEquals(ID.class, list.get(2));\r\n    assertEquals(IE.class, list.get(3));\r\n    assertEquals(IF.class, list.get(4));\r\n    assertEquals(IA.class, list.get(5));\r\n    assertNull(ClassUtils.getAllInterfaces(null));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ClassUtilsTest.java",
  "methodName" : "test_getAllSuperclasses_Class",
  "sourceCode" : "@Test\r\nvoid test_getAllSuperclasses_Class() {\r\n    final List<?> list = ClassUtils.getAllSuperclasses(CY.class);\r\n    assertEquals(2, list.size());\r\n    assertEquals(CX.class, list.get(0));\r\n    assertEquals(Object.class, list.get(1));\r\n    assertNull(ClassUtils.getAllSuperclasses(null));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ClassUtilsTest.java",
  "methodName" : "test_getCanonicalName_Class",
  "sourceCode" : "@Test\r\nvoid test_getCanonicalName_Class() {\r\n    assertEquals(\"org.apache.commons.lang3.ClassUtils\", ClassUtils.getCanonicalName(ClassUtils.class));\r\n    assertEquals(\"java.util.Map.Entry\", ClassUtils.getCanonicalName(Map.Entry.class));\r\n    assertEquals(\"\", ClassUtils.getCanonicalName((Class<?>) null));\r\n    assertEquals(\"java.lang.String[]\", ClassUtils.getCanonicalName(String[].class));\r\n    assertEquals(\"java.util.Map.Entry[]\", ClassUtils.getCanonicalName(Map.Entry[].class));\r\n    // Primitives\r\n    assertEquals(\"boolean\", ClassUtils.getCanonicalName(boolean.class));\r\n    assertEquals(\"byte\", ClassUtils.getCanonicalName(byte.class));\r\n    assertEquals(\"char\", ClassUtils.getCanonicalName(char.class));\r\n    assertEquals(\"short\", ClassUtils.getCanonicalName(short.class));\r\n    assertEquals(\"int\", ClassUtils.getCanonicalName(int.class));\r\n    assertEquals(\"long\", ClassUtils.getCanonicalName(long.class));\r\n    assertEquals(\"float\", ClassUtils.getCanonicalName(float.class));\r\n    assertEquals(\"double\", ClassUtils.getCanonicalName(double.class));\r\n    // Primitive Arrays\r\n    assertEquals(\"boolean[]\", ClassUtils.getCanonicalName(boolean[].class));\r\n    assertEquals(\"byte[]\", ClassUtils.getCanonicalName(byte[].class));\r\n    assertEquals(\"char[]\", ClassUtils.getCanonicalName(char[].class));\r\n    assertEquals(\"short[]\", ClassUtils.getCanonicalName(short[].class));\r\n    assertEquals(\"int[]\", ClassUtils.getCanonicalName(int[].class));\r\n    assertEquals(\"long[]\", ClassUtils.getCanonicalName(long[].class));\r\n    assertEquals(\"float[]\", ClassUtils.getCanonicalName(float[].class));\r\n    assertEquals(\"double[]\", ClassUtils.getCanonicalName(double[].class));\r\n    // Arrays of arrays of ...\r\n    assertEquals(\"java.lang.String[][]\", ClassUtils.getCanonicalName(String[][].class));\r\n    assertEquals(\"java.lang.String[][][]\", ClassUtils.getCanonicalName(String[][][].class));\r\n    assertEquals(\"java.lang.String[][][][]\", ClassUtils.getCanonicalName(String[][][][].class));\r\n    // Inner types\r\n    final class Named {\r\n        // empty\r\n    }\r\n    assertEquals(StringUtils.EMPTY, ClassUtils.getCanonicalName(new Object() {\r\n    }.getClass()));\r\n    assertEquals(StringUtils.EMPTY, ClassUtils.getCanonicalName(Named.class));\r\n    assertEquals(\"org.apache.commons.lang3.ClassUtilsTest.Inner\", ClassUtils.getCanonicalName(Inner.class));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ClassUtilsTest.java",
  "methodName" : "test_getCanonicalName_Class_String",
  "sourceCode" : "@Test\r\nvoid test_getCanonicalName_Class_String() {\r\n    assertEquals(\"org.apache.commons.lang3.ClassUtils\", ClassUtils.getCanonicalName(ClassUtils.class, \"X\"));\r\n    assertEquals(\"java.util.Map.Entry\", ClassUtils.getCanonicalName(Map.Entry.class, \"X\"));\r\n    assertEquals(\"X\", ClassUtils.getCanonicalName((Class<?>) null, \"X\"));\r\n    assertEquals(\"java.lang.String[]\", ClassUtils.getCanonicalName(String[].class, \"X\"));\r\n    assertEquals(\"java.util.Map.Entry[]\", ClassUtils.getCanonicalName(Map.Entry[].class, \"X\"));\r\n    // Primitives\r\n    assertEquals(\"boolean\", ClassUtils.getCanonicalName(boolean.class, \"X\"));\r\n    assertEquals(\"byte\", ClassUtils.getCanonicalName(byte.class, \"X\"));\r\n    assertEquals(\"char\", ClassUtils.getCanonicalName(char.class, \"X\"));\r\n    assertEquals(\"short\", ClassUtils.getCanonicalName(short.class, \"X\"));\r\n    assertEquals(\"int\", ClassUtils.getCanonicalName(int.class, \"X\"));\r\n    assertEquals(\"long\", ClassUtils.getCanonicalName(long.class, \"X\"));\r\n    assertEquals(\"float\", ClassUtils.getCanonicalName(float.class, \"X\"));\r\n    assertEquals(\"double\", ClassUtils.getCanonicalName(double.class, \"X\"));\r\n    // Primitive Arrays\r\n    assertEquals(\"boolean[]\", ClassUtils.getCanonicalName(boolean[].class, \"X\"));\r\n    assertEquals(\"byte[]\", ClassUtils.getCanonicalName(byte[].class, \"X\"));\r\n    assertEquals(\"char[]\", ClassUtils.getCanonicalName(char[].class, \"X\"));\r\n    assertEquals(\"short[]\", ClassUtils.getCanonicalName(short[].class, \"X\"));\r\n    assertEquals(\"int[]\", ClassUtils.getCanonicalName(int[].class, \"X\"));\r\n    assertEquals(\"long[]\", ClassUtils.getCanonicalName(long[].class, \"X\"));\r\n    assertEquals(\"float[]\", ClassUtils.getCanonicalName(float[].class, \"X\"));\r\n    assertEquals(\"double[]\", ClassUtils.getCanonicalName(double[].class, \"X\"));\r\n    // Arrays of arrays of ...\r\n    assertEquals(\"java.lang.String[][]\", ClassUtils.getCanonicalName(String[][].class, \"X\"));\r\n    assertEquals(\"java.lang.String[][][]\", ClassUtils.getCanonicalName(String[][][].class, \"X\"));\r\n    assertEquals(\"java.lang.String[][][][]\", ClassUtils.getCanonicalName(String[][][][].class, \"X\"));\r\n    // Inner types\r\n    final class Named {\r\n        // empty\r\n    }\r\n    assertEquals(\"X\", ClassUtils.getCanonicalName(new Object() {\r\n    }.getClass(), \"X\"));\r\n    assertEquals(\"X\", ClassUtils.getCanonicalName(Named.class, \"X\"));\r\n    assertEquals(\"org.apache.commons.lang3.ClassUtilsTest.Inner\", ClassUtils.getCanonicalName(Inner.class, \"X\"));\r\n    assertEquals(\"X\", ClassUtils.getCanonicalName((Object) null, \"X\"));\r\n    assertEquals(OBJECT_CANONICAL_NAME, ClassUtils.getCanonicalName(new Object()));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ClassUtilsTest.java",
  "methodName" : "test_getClass",
  "sourceCode" : "@Test\r\nvoid test_getClass() {\r\n    // assertEquals(\"org.apache.commons.lang3.ClassUtils\", ClassUtils.getName(ClassLoader.class, \"@\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ClassUtilsTest.java",
  "methodName" : "test_getName_Class",
  "sourceCode" : "@Test\r\nvoid test_getName_Class() {\r\n    assertEquals(\"org.apache.commons.lang3.ClassUtils\", ClassUtils.getName(ClassUtils.class));\r\n    assertEquals(\"java.util.Map$Entry\", ClassUtils.getName(Map.Entry.class));\r\n    assertEquals(\"\", ClassUtils.getName((Class<?>) null));\r\n    assertEquals(\"[Ljava.lang.String;\", ClassUtils.getName(String[].class));\r\n    assertEquals(\"[Ljava.util.Map$Entry;\", ClassUtils.getName(Map.Entry[].class));\r\n    // Primitives\r\n    assertEquals(\"boolean\", ClassUtils.getName(boolean.class));\r\n    assertEquals(\"byte\", ClassUtils.getName(byte.class));\r\n    assertEquals(\"char\", ClassUtils.getName(char.class));\r\n    assertEquals(\"short\", ClassUtils.getName(short.class));\r\n    assertEquals(\"int\", ClassUtils.getName(int.class));\r\n    assertEquals(\"long\", ClassUtils.getName(long.class));\r\n    assertEquals(\"float\", ClassUtils.getName(float.class));\r\n    assertEquals(\"double\", ClassUtils.getName(double.class));\r\n    // Primitive Arrays\r\n    assertEquals(\"[Z\", ClassUtils.getName(boolean[].class));\r\n    assertEquals(\"[B\", ClassUtils.getName(byte[].class));\r\n    assertEquals(\"[C\", ClassUtils.getName(char[].class));\r\n    assertEquals(\"[S\", ClassUtils.getName(short[].class));\r\n    assertEquals(\"[I\", ClassUtils.getName(int[].class));\r\n    assertEquals(\"[J\", ClassUtils.getName(long[].class));\r\n    assertEquals(\"[F\", ClassUtils.getName(float[].class));\r\n    assertEquals(\"[D\", ClassUtils.getName(double[].class));\r\n    // Arrays of arrays of ...\r\n    assertEquals(\"[[Ljava.lang.String;\", ClassUtils.getName(String[][].class));\r\n    assertEquals(\"[[[Ljava.lang.String;\", ClassUtils.getName(String[][][].class));\r\n    assertEquals(\"[[[[Ljava.lang.String;\", ClassUtils.getName(String[][][][].class));\r\n    // Inner types\r\n    final class Named {\r\n        // empty\r\n    }\r\n    assertEquals(\"org.apache.commons.lang3.ClassUtilsTest$3\", ClassUtils.getName(new Object() {\r\n    }.getClass()));\r\n    assertEquals(\"org.apache.commons.lang3.ClassUtilsTest$3Named\", ClassUtils.getName(Named.class));\r\n    assertEquals(\"org.apache.commons.lang3.ClassUtilsTest$Inner\", ClassUtils.getName(Inner.class));\r\n    assertEquals(OBJECT_CANONICAL_NAME, ClassUtils.getName(new Object()));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ClassUtilsTest.java",
  "methodName" : "test_getName_Object",
  "sourceCode" : "@Test\r\nvoid test_getName_Object() {\r\n    assertEquals(\"org.apache.commons.lang3.ClassUtils\", ClassUtils.getName(new ClassUtils(), \"<null>\"));\r\n    assertEquals(\"org.apache.commons.lang3.ClassUtilsTest$Inner\", ClassUtils.getName(new Inner(), \"<null>\"));\r\n    assertEquals(\"java.lang.String\", ClassUtils.getName(\"hello\", \"<null>\"));\r\n    assertEquals(\"<null>\", ClassUtils.getName(null, \"<null>\"));\r\n    // Inner types\r\n    final class Named {\r\n        // empty\r\n    }\r\n    assertEquals(\"org.apache.commons.lang3.ClassUtilsTest$4\", ClassUtils.getName(new Object() {\r\n    }, \"<null>\"));\r\n    assertEquals(\"org.apache.commons.lang3.ClassUtilsTest$4Named\", ClassUtils.getName(new Named(), \"<null>\"));\r\n    assertEquals(\"org.apache.commons.lang3.ClassUtilsTest$Inner\", ClassUtils.getName(new Inner(), \"<null>\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ClassUtilsTest.java",
  "methodName" : "test_getPackageCanonicalName_Class",
  "sourceCode" : "@Test\r\nvoid test_getPackageCanonicalName_Class() {\r\n    assertEquals(\"org.apache.commons.lang3\", ClassUtils.getPackageCanonicalName(ClassUtils.class));\r\n    assertEquals(\"org.apache.commons.lang3\", ClassUtils.getPackageCanonicalName(ClassUtils[].class));\r\n    assertEquals(\"org.apache.commons.lang3\", ClassUtils.getPackageCanonicalName(ClassUtils[][].class));\r\n    assertEquals(\"\", ClassUtils.getPackageCanonicalName(int[].class));\r\n    assertEquals(\"\", ClassUtils.getPackageCanonicalName(int[][].class));\r\n    // Inner types\r\n    final class Named {\r\n        // empty\r\n    }\r\n    assertEquals(\"org.apache.commons.lang3\", ClassUtils.getPackageCanonicalName(new Object() {\r\n    }.getClass()));\r\n    assertEquals(\"org.apache.commons.lang3\", ClassUtils.getPackageCanonicalName(Named.class));\r\n    assertEquals(\"org.apache.commons.lang3\", ClassUtils.getPackageCanonicalName(Inner.class));\r\n    assertEquals(StringUtils.EMPTY, ClassUtils.getPackageCanonicalName((Class<?>) null));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ClassUtilsTest.java",
  "methodName" : "test_getPackageCanonicalName_Object",
  "sourceCode" : "@Test\r\nvoid test_getPackageCanonicalName_Object() {\r\n    assertEquals(\"<null>\", ClassUtils.getPackageCanonicalName(null, \"<null>\"));\r\n    assertEquals(\"org.apache.commons.lang3\", ClassUtils.getPackageCanonicalName(new ClassUtils(), \"<null>\"));\r\n    assertEquals(\"org.apache.commons.lang3\", ClassUtils.getPackageCanonicalName(new ClassUtils[0], \"<null>\"));\r\n    assertEquals(\"org.apache.commons.lang3\", ClassUtils.getPackageCanonicalName(new ClassUtils[0][0], \"<null>\"));\r\n    assertEquals(\"\", ClassUtils.getPackageCanonicalName(new int[0], \"<null>\"));\r\n    assertEquals(\"\", ClassUtils.getPackageCanonicalName(new int[0][0], \"<null>\"));\r\n    // Inner types\r\n    final class Named {\r\n        // empty\r\n    }\r\n    assertEquals(\"org.apache.commons.lang3\", ClassUtils.getPackageCanonicalName(new Object() {\r\n    }, \"<null>\"));\r\n    assertEquals(\"org.apache.commons.lang3\", ClassUtils.getPackageCanonicalName(new Named(), \"<null>\"));\r\n    assertEquals(\"org.apache.commons.lang3\", ClassUtils.getPackageCanonicalName(new Inner(), \"<null>\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ClassUtilsTest.java",
  "methodName" : "test_getPackageCanonicalName_String",
  "sourceCode" : "@Test\r\nvoid test_getPackageCanonicalName_String() {\r\n    assertEquals(\"org.apache.commons.lang3\", ClassUtils.getPackageCanonicalName(\"org.apache.commons.lang3.ClassUtils\"));\r\n    assertEquals(\"org.apache.commons.lang3\", ClassUtils.getPackageCanonicalName(\"[Lorg.apache.commons.lang3.ClassUtils;\"));\r\n    assertEquals(\"org.apache.commons.lang3\", ClassUtils.getPackageCanonicalName(\"[[Lorg.apache.commons.lang3.ClassUtils;\"));\r\n    assertEquals(\"org.apache.commons.lang3\", ClassUtils.getPackageCanonicalName(\"[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[Lorg.apache.commons.lang3.ClassUtils;\"));\r\n    assertEquals(\"org.apache.commons.lang3\", ClassUtils.getPackageCanonicalName(\"org.apache.commons.lang3.ClassUtils[]\"));\r\n    assertEquals(\"org.apache.commons.lang3\", ClassUtils.getPackageCanonicalName(\"org.apache.commons.lang3.ClassUtils[][]\"));\r\n    assertEquals(\"org.apache.commons.lang3\", ClassUtils.getPackageCanonicalName(\"org.apache.commons.lang3.ClassUtils[][][][][][][][][][][][][][][][]\"));\r\n    assertEquals(\"\", ClassUtils.getPackageCanonicalName(\"[I\"));\r\n    assertEquals(\"\", ClassUtils.getPackageCanonicalName(\"[[I\"));\r\n    assertEquals(\"\", ClassUtils.getPackageCanonicalName(\"int[]\"));\r\n    assertEquals(\"\", ClassUtils.getPackageCanonicalName(\"int[][]\"));\r\n    // Inner types\r\n    assertEquals(\"org.apache.commons.lang3\", ClassUtils.getPackageCanonicalName(\"org.apache.commons.lang3.ClassUtilsTest$6\"));\r\n    assertEquals(\"org.apache.commons.lang3\", ClassUtils.getPackageCanonicalName(\"org.apache.commons.lang3.ClassUtilsTest$5Named\"));\r\n    assertEquals(\"org.apache.commons.lang3\", ClassUtils.getPackageCanonicalName(\"org.apache.commons.lang3.ClassUtilsTest$Inner\"));\r\n    assertEquals(\"a.b.c.D.e.f\", ClassUtils.getPackageCanonicalName(\"a.b.c.D.e.f.D\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ClassUtilsTest.java",
  "methodName" : "test_getPackageName_Class",
  "sourceCode" : "@Test\r\nvoid test_getPackageName_Class() {\r\n    assertEquals(\"java.lang\", ClassUtils.getPackageName(String.class));\r\n    assertEquals(\"java.util\", ClassUtils.getPackageName(Map.Entry.class));\r\n    assertEquals(\"\", ClassUtils.getPackageName((Class<?>) null));\r\n    // LANG-535\r\n    assertEquals(\"java.lang\", ClassUtils.getPackageName(String[].class));\r\n    // Primitive Arrays\r\n    assertEquals(\"\", ClassUtils.getPackageName(boolean[].class));\r\n    assertEquals(\"\", ClassUtils.getPackageName(byte[].class));\r\n    assertEquals(\"\", ClassUtils.getPackageName(char[].class));\r\n    assertEquals(\"\", ClassUtils.getPackageName(short[].class));\r\n    assertEquals(\"\", ClassUtils.getPackageName(int[].class));\r\n    assertEquals(\"\", ClassUtils.getPackageName(long[].class));\r\n    assertEquals(\"\", ClassUtils.getPackageName(float[].class));\r\n    assertEquals(\"\", ClassUtils.getPackageName(double[].class));\r\n    // Arrays of arrays of ...\r\n    assertEquals(\"java.lang\", ClassUtils.getPackageName(String[][].class));\r\n    assertEquals(\"java.lang\", ClassUtils.getPackageName(String[][][].class));\r\n    assertEquals(\"java.lang\", ClassUtils.getPackageName(String[][][][].class));\r\n    // On-the-fly types\r\n    final class Named {\r\n        // empty\r\n    }\r\n    assertEquals(\"org.apache.commons.lang3\", ClassUtils.getPackageName(new Object() {\r\n    }.getClass()));\r\n    assertEquals(\"org.apache.commons.lang3\", ClassUtils.getPackageName(Named.class));\r\n    assertEquals(\"org.apache.commons.lang3\", ClassUtils.getPackageName(new Serializable() {\r\n\r\n        private static final long serialVersionUID = 1L;\r\n    }.getClass()));\r\n    assertEquals(\"java.util.function\", ClassUtils.getPackageName(Function.identity().getClass()));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ClassUtilsTest.java",
  "methodName" : "test_getPackageName_Object",
  "sourceCode" : "@Test\r\nvoid test_getPackageName_Object() {\r\n    assertEquals(\"org.apache.commons.lang3\", ClassUtils.getPackageName(new ClassUtils(), \"<null>\"));\r\n    assertEquals(\"org.apache.commons.lang3\", ClassUtils.getPackageName(new Inner(), \"<null>\"));\r\n    assertEquals(\"<null>\", ClassUtils.getPackageName(null, \"<null>\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ClassUtilsTest.java",
  "methodName" : "test_getPackageName_String",
  "sourceCode" : "@Test\r\nvoid test_getPackageName_String() {\r\n    assertEquals(\"org.apache.commons.lang3\", ClassUtils.getPackageName(ClassUtils.class.getName()));\r\n    assertEquals(\"java.util\", ClassUtils.getPackageName(Map.Entry.class.getName()));\r\n    assertEquals(\"\", ClassUtils.getPackageName((String) null));\r\n    assertEquals(\"\", ClassUtils.getPackageName(\"\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ClassUtilsTest.java",
  "methodName" : "test_getShortCanonicalName_Class",
  "sourceCode" : "@Test\r\nvoid test_getShortCanonicalName_Class() {\r\n    assertEquals(\"ClassUtils\", ClassUtils.getShortCanonicalName(ClassUtils.class));\r\n    assertEquals(\"ClassUtils[]\", ClassUtils.getShortCanonicalName(ClassUtils[].class));\r\n    assertEquals(\"ClassUtils[][]\", ClassUtils.getShortCanonicalName(ClassUtils[][].class));\r\n    assertEquals(\"int[]\", ClassUtils.getShortCanonicalName(int[].class));\r\n    assertEquals(\"int[][]\", ClassUtils.getShortCanonicalName(int[][].class));\r\n    assertEquals(\"int[][][][][][][][][][]\", ClassUtils.getShortCanonicalName(int[][][][][][][][][][].class));\r\n    // Inner types\r\n    final class Named {\r\n        // empty\r\n    }\r\n    assertEquals(\"\", ClassUtils.getShortCanonicalName(new Object() {\r\n    }.getClass()));\r\n    // WARNING: this is fragile, implementation may change, naming is not guaranteed\r\n    assertEquals(\"\", ClassUtils.getShortCanonicalName(Named.class));\r\n    assertEquals(\"Inner\", ClassUtils.getShortCanonicalName(Inner.class));\r\n    assertEquals(StringUtils.EMPTY, ClassUtils.getShortCanonicalName((Class<?>) null));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ClassUtilsTest.java",
  "methodName" : "test_getShortCanonicalName_Object",
  "sourceCode" : "@Test\r\nvoid test_getShortCanonicalName_Object() {\r\n    assertEquals(\"<null>\", ClassUtils.getShortCanonicalName(null, \"<null>\"));\r\n    assertEquals(\"ClassUtils\", ClassUtils.getShortCanonicalName(new ClassUtils(), \"<null>\"));\r\n    assertEquals(\"ClassUtils[]\", ClassUtils.getShortCanonicalName(new ClassUtils[0], \"<null>\"));\r\n    assertEquals(\"ClassUtils[][]\", ClassUtils.getShortCanonicalName(new ClassUtils[0][0], \"<null>\"));\r\n    assertEquals(\"int[]\", ClassUtils.getShortCanonicalName(new int[0], \"<null>\"));\r\n    assertEquals(\"int[][]\", ClassUtils.getShortCanonicalName(new int[0][0], \"<null>\"));\r\n    assertEquals(\"int[][][][][][][][][][]\", ClassUtils.getShortCanonicalName(new int[0][0][0][0][0][0][0][0][0][0], \"<null>\"));\r\n    // Inner types\r\n    final class Named {\r\n        // empty\r\n    }\r\n    assertEquals(\"\", ClassUtils.getShortCanonicalName(new Object() {\r\n    }, \"<null>\"));\r\n    assertEquals(\"\", ClassUtils.getShortCanonicalName(new Named(), \"<null>\"));\r\n    assertEquals(\"Inner\", ClassUtils.getShortCanonicalName(new Inner(), \"<null>\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ClassUtilsTest.java",
  "methodName" : "test_getShortCanonicalName_String",
  "sourceCode" : "@Test\r\nvoid test_getShortCanonicalName_String() {\r\n    assertEquals(\"\", ClassUtils.getShortCanonicalName((String) null));\r\n    assertEquals(\"Map.Entry\", ClassUtils.getShortCanonicalName(java.util.Map.Entry.class.getName()));\r\n    assertEquals(\"Entry\", ClassUtils.getShortCanonicalName(java.util.Map.Entry.class.getCanonicalName()));\r\n    assertEquals(\"ClassUtils\", ClassUtils.getShortCanonicalName(\"org.apache.commons.lang3.ClassUtils\"));\r\n    assertEquals(\"ClassUtils[]\", ClassUtils.getShortCanonicalName(\"[Lorg.apache.commons.lang3.ClassUtils;\"));\r\n    assertEquals(\"ClassUtils[][]\", ClassUtils.getShortCanonicalName(\"[[Lorg.apache.commons.lang3.ClassUtils;\"));\r\n    assertEquals(\"ClassUtils[]\", ClassUtils.getShortCanonicalName(\"org.apache.commons.lang3.ClassUtils[]\"));\r\n    assertEquals(\"ClassUtils[][]\", ClassUtils.getShortCanonicalName(\"org.apache.commons.lang3.ClassUtils[][]\"));\r\n    assertEquals(\"int[]\", ClassUtils.getShortCanonicalName(\"[I\"));\r\n    assertEquals(\"int[]\", ClassUtils.getShortCanonicalName(int[].class.getCanonicalName()));\r\n    assertEquals(\"int[]\", ClassUtils.getShortCanonicalName(int[].class.getName()));\r\n    assertEquals(\"int[][]\", ClassUtils.getShortCanonicalName(\"[[I\"));\r\n    assertEquals(\"int[]\", ClassUtils.getShortCanonicalName(\"int[]\"));\r\n    assertEquals(\"int[][]\", ClassUtils.getShortCanonicalName(\"int[][]\"));\r\n    assertEquals(\"int[][][][][][][][][][][][]\", ClassUtils.getShortCanonicalName(\"int[][][][][][][][][][][][]\"));\r\n    // this is to demonstrate that the documentation and the naming of the methods\r\n    // uses the class name and canonical name totally mixed up, which cannot be\r\n    // fixed without backward compatibility break\r\n    assertEquals(\"int[]\", int[].class.getCanonicalName());\r\n    assertEquals(\"[I\", int[].class.getName());\r\n    assertIllegalArgumentException(() -> ClassUtils.getShortCanonicalName(StringUtils.repeat(\"[\", 256) + \"I\"));\r\n    assertEquals(\"int\" + StringUtils.repeat(\"[]\", 255), ClassUtils.getShortCanonicalName(StringUtils.repeat(\"[\", 255) + \"I\"));\r\n    // Inner types... the problem is that these are not canonical names, classes with this name do not even have canonical\r\n    // name\r\n    // WARNING: this is fragile, implementation may change, naming is not guaranteed\r\n    assertEquals(\"ClassUtilsTest.6\", ClassUtils.getShortCanonicalName(\"org.apache.commons.lang3.ClassUtilsTest$6\"));\r\n    // WARNING: this is fragile, implementation may change, naming is not guaranteed\r\n    assertEquals(\"ClassUtilsTest.5Named\", ClassUtils.getShortCanonicalName(\"org.apache.commons.lang3.ClassUtilsTest$5Named\"));\r\n    assertEquals(\"ClassUtilsTest.Inner\", ClassUtils.getShortCanonicalName(\"org.apache.commons.lang3.ClassUtilsTest$Inner\"));\r\n    // demonstrating what a canonical name is... it is a bigger issue to clean this up\r\n    assertEquals(\"org.apache.commons.lang3.ClassUtilsTest$11\", new org.apache.commons.lang3.ClassUtilsTest() {\r\n    }.getClass().getName());\r\n    assertNull(new org.apache.commons.lang3.ClassUtilsTest() {\r\n    }.getClass().getCanonicalName());\r\n    assertEquals(\"String[]\", ClassUtils.getShortCanonicalName(String[].class.getName()));\r\n    assertEquals(\"String[]\", ClassUtils.getShortCanonicalName(String[].class.getCanonicalName()));\r\n    assertEquals(\"String[]\", ClassUtils.getShortCanonicalName(\"String[]\"));\r\n    // Note that we throw IllegalArgumentException for the following bad inputs:\r\n    assertThrows(IllegalArgumentException.class, () -> ClassUtils.getShortCanonicalName(\"\"));\r\n    assertThrows(IllegalArgumentException.class, () -> ClassUtils.getShortCanonicalName(\"[\"));\r\n    assertThrows(IllegalArgumentException.class, () -> ClassUtils.getShortCanonicalName(\"[]\"));\r\n    assertThrows(IllegalArgumentException.class, () -> ClassUtils.getShortCanonicalName(\"[;\"));\r\n    assertThrows(IllegalArgumentException.class, () -> ClassUtils.getShortCanonicalName(\"[];\"));\r\n    assertThrows(IllegalArgumentException.class, () -> ClassUtils.getShortCanonicalName(\" \"));\r\n    assertThrows(IllegalArgumentException.class, () -> ClassUtils.getShortCanonicalName(\"[$\"));\r\n    assertThrows(IllegalArgumentException.class, () -> ClassUtils.getShortCanonicalName(\"[$a\"));\r\n    assertThrows(IllegalArgumentException.class, () -> ClassUtils.getShortCanonicalName(\"[[\"));\r\n    assertThrows(IllegalArgumentException.class, () -> ClassUtils.getShortCanonicalName(\"[[L\"));\r\n    assertThrows(IllegalArgumentException.class, () -> ClassUtils.getShortCanonicalName(\"[org.apache.commons.lang3.ClassUtilsTest\"));\r\n    assertThrows(IllegalArgumentException.class, () -> ClassUtils.getShortCanonicalName(\"[Lorg.apache.commons.lang3.ClassUtilsTest\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ClassUtilsTest.java",
  "methodName" : "test_getShortClassName_Class",
  "sourceCode" : "@Test\r\nvoid test_getShortClassName_Class() {\r\n    assertEquals(\"ClassUtils\", ClassUtils.getShortClassName(ClassUtils.class));\r\n    assertEquals(\"Map.Entry\", ClassUtils.getShortClassName(Map.Entry.class));\r\n    assertEquals(\"\", ClassUtils.getShortClassName((Class<?>) null));\r\n    // LANG-535\r\n    assertEquals(\"String[]\", ClassUtils.getShortClassName(String[].class));\r\n    assertEquals(\"Map.Entry[]\", ClassUtils.getShortClassName(Map.Entry[].class));\r\n    // Primitives\r\n    assertEquals(\"boolean\", ClassUtils.getShortClassName(boolean.class));\r\n    assertEquals(\"byte\", ClassUtils.getShortClassName(byte.class));\r\n    assertEquals(\"char\", ClassUtils.getShortClassName(char.class));\r\n    assertEquals(\"short\", ClassUtils.getShortClassName(short.class));\r\n    assertEquals(\"int\", ClassUtils.getShortClassName(int.class));\r\n    assertEquals(\"long\", ClassUtils.getShortClassName(long.class));\r\n    assertEquals(\"float\", ClassUtils.getShortClassName(float.class));\r\n    assertEquals(\"double\", ClassUtils.getShortClassName(double.class));\r\n    // Primitive Arrays\r\n    assertEquals(\"boolean[]\", ClassUtils.getShortClassName(boolean[].class));\r\n    assertEquals(\"byte[]\", ClassUtils.getShortClassName(byte[].class));\r\n    assertEquals(\"char[]\", ClassUtils.getShortClassName(char[].class));\r\n    assertEquals(\"short[]\", ClassUtils.getShortClassName(short[].class));\r\n    assertEquals(\"int[]\", ClassUtils.getShortClassName(int[].class));\r\n    assertEquals(\"long[]\", ClassUtils.getShortClassName(long[].class));\r\n    assertEquals(\"float[]\", ClassUtils.getShortClassName(float[].class));\r\n    assertEquals(\"double[]\", ClassUtils.getShortClassName(double[].class));\r\n    // Arrays of arrays of ...\r\n    assertEquals(\"String[][]\", ClassUtils.getShortClassName(String[][].class));\r\n    assertEquals(\"String[][][]\", ClassUtils.getShortClassName(String[][][].class));\r\n    assertEquals(\"String[][][][]\", ClassUtils.getShortClassName(String[][][][].class));\r\n    // Inner types\r\n    final class Named {\r\n        // empty\r\n    }\r\n    // WARNING: this is fragile, implementation may change, naming is not guaranteed\r\n    assertEquals(\"ClassUtilsTest.13\", ClassUtils.getShortClassName(new Object() {\r\n    }.getClass()));\r\n    // WARNING: this is fragile, implementation may change, naming is not guaranteed\r\n    assertEquals(\"ClassUtilsTest.10Named\", ClassUtils.getShortClassName(Named.class));\r\n    assertEquals(\"ClassUtilsTest.Inner\", ClassUtils.getShortClassName(Inner.class));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ClassUtilsTest.java",
  "methodName" : "test_getShortClassName_Object",
  "sourceCode" : "@Test\r\nvoid test_getShortClassName_Object() {\r\n    assertEquals(\"ClassUtils\", ClassUtils.getShortClassName(new ClassUtils(), \"<null>\"));\r\n    assertEquals(\"ClassUtilsTest.Inner\", ClassUtils.getShortClassName(new Inner(), \"<null>\"));\r\n    assertEquals(\"String\", ClassUtils.getShortClassName(\"hello\", \"<null>\"));\r\n    assertEquals(\"<null>\", ClassUtils.getShortClassName(null, \"<null>\"));\r\n    // Inner types\r\n    final class Named {\r\n        // empty\r\n    }\r\n    // WARNING: this is fragile, implementation may change, naming is not guaranteed\r\n    assertEquals(\"ClassUtilsTest.14\", ClassUtils.getShortClassName(new Object() {\r\n    }, \"<null>\"));\r\n    // WARNING: this is fragile, implementation may change, naming is not guaranteed\r\n    assertEquals(\"ClassUtilsTest.11Named\", ClassUtils.getShortClassName(new Named(), \"<null>\"));\r\n    assertEquals(\"ClassUtilsTest.Inner\", ClassUtils.getShortClassName(new Inner(), \"<null>\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ClassUtilsTest.java",
  "methodName" : "test_getShortClassName_String",
  "sourceCode" : "@Test\r\nvoid test_getShortClassName_String() {\r\n    assertEquals(\"ClassUtils\", ClassUtils.getShortClassName(ClassUtils.class.getName()));\r\n    assertEquals(\"Map.Entry\", ClassUtils.getShortClassName(Map.Entry.class.getName()));\r\n    assertEquals(\"\", ClassUtils.getShortClassName((String) null));\r\n    assertEquals(\"\", ClassUtils.getShortClassName(\"\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ClassUtilsTest.java",
  "methodName" : "test_getSimpleName_Class",
  "sourceCode" : "@Test\r\nvoid test_getSimpleName_Class() {\r\n    assertEquals(\"ClassUtils\", ClassUtils.getSimpleName(ClassUtils.class));\r\n    assertEquals(\"Entry\", ClassUtils.getSimpleName(Map.Entry.class));\r\n    assertEquals(\"\", ClassUtils.getSimpleName(null));\r\n    // LANG-535\r\n    assertEquals(\"String[]\", ClassUtils.getSimpleName(String[].class));\r\n    assertEquals(\"Entry[]\", ClassUtils.getSimpleName(Map.Entry[].class));\r\n    // Primitives\r\n    assertEquals(\"boolean\", ClassUtils.getSimpleName(boolean.class));\r\n    assertEquals(\"byte\", ClassUtils.getSimpleName(byte.class));\r\n    assertEquals(\"char\", ClassUtils.getSimpleName(char.class));\r\n    assertEquals(\"short\", ClassUtils.getSimpleName(short.class));\r\n    assertEquals(\"int\", ClassUtils.getSimpleName(int.class));\r\n    assertEquals(\"long\", ClassUtils.getSimpleName(long.class));\r\n    assertEquals(\"float\", ClassUtils.getSimpleName(float.class));\r\n    assertEquals(\"double\", ClassUtils.getSimpleName(double.class));\r\n    // Primitive Arrays\r\n    assertEquals(\"boolean[]\", ClassUtils.getSimpleName(boolean[].class));\r\n    assertEquals(\"byte[]\", ClassUtils.getSimpleName(byte[].class));\r\n    assertEquals(\"char[]\", ClassUtils.getSimpleName(char[].class));\r\n    assertEquals(\"short[]\", ClassUtils.getSimpleName(short[].class));\r\n    assertEquals(\"int[]\", ClassUtils.getSimpleName(int[].class));\r\n    assertEquals(\"long[]\", ClassUtils.getSimpleName(long[].class));\r\n    assertEquals(\"float[]\", ClassUtils.getSimpleName(float[].class));\r\n    assertEquals(\"double[]\", ClassUtils.getSimpleName(double[].class));\r\n    // Arrays of arrays of ...\r\n    assertEquals(\"String[][]\", ClassUtils.getSimpleName(String[][].class));\r\n    assertEquals(\"String[][][]\", ClassUtils.getSimpleName(String[][][].class));\r\n    assertEquals(\"String[][][][]\", ClassUtils.getSimpleName(String[][][][].class));\r\n    // On-the-fly types\r\n    final class Named {\r\n        // empty\r\n    }\r\n    assertEquals(\"\", ClassUtils.getSimpleName(new Object() {\r\n    }.getClass()));\r\n    assertEquals(\"Named\", ClassUtils.getSimpleName(Named.class));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ClassUtilsTest.java",
  "methodName" : "test_getSimpleName_Object",
  "sourceCode" : "@Test\r\nvoid test_getSimpleName_Object() {\r\n    assertEquals(\"ClassUtils\", ClassUtils.getSimpleName(new ClassUtils()));\r\n    assertEquals(\"Inner\", ClassUtils.getSimpleName(new Inner()));\r\n    assertEquals(\"String\", ClassUtils.getSimpleName(\"hello\"));\r\n    assertEquals(StringUtils.EMPTY, ClassUtils.getSimpleName(null));\r\n    assertEquals(StringUtils.EMPTY, ClassUtils.getSimpleName(null));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ClassUtilsTest.java",
  "methodName" : "test_getSimpleName_Object_String",
  "sourceCode" : "@Test\r\nvoid test_getSimpleName_Object_String() {\r\n    assertEquals(\"ClassUtils\", ClassUtils.getSimpleName(new ClassUtils(), \"<null>\"));\r\n    assertEquals(\"Inner\", ClassUtils.getSimpleName(new Inner(), \"<null>\"));\r\n    assertEquals(\"String\", ClassUtils.getSimpleName(\"hello\", \"<null>\"));\r\n    assertEquals(\"<null>\", ClassUtils.getSimpleName(null, \"<null>\"));\r\n    assertNull(ClassUtils.getSimpleName(null, null));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ClassUtilsTest.java",
  "methodName" : "test_isAssignable",
  "sourceCode" : "@Test\r\nvoid test_isAssignable() {\r\n    assertFalse(ClassUtils.isAssignable((Class<?>) null, null));\r\n    assertFalse(ClassUtils.isAssignable(String.class, null));\r\n    assertTrue(ClassUtils.isAssignable(null, Object.class));\r\n    assertTrue(ClassUtils.isAssignable(null, Integer.class));\r\n    assertFalse(ClassUtils.isAssignable(null, Integer.TYPE));\r\n    assertTrue(ClassUtils.isAssignable(String.class, Object.class));\r\n    assertTrue(ClassUtils.isAssignable(String.class, String.class));\r\n    assertFalse(ClassUtils.isAssignable(Object.class, String.class));\r\n    assertTrue(ClassUtils.isAssignable(Integer.TYPE, Integer.class));\r\n    assertTrue(ClassUtils.isAssignable(Integer.TYPE, Object.class));\r\n    assertTrue(ClassUtils.isAssignable(Integer.class, Integer.TYPE));\r\n    assertTrue(ClassUtils.isAssignable(Integer.class, Object.class));\r\n    assertTrue(ClassUtils.isAssignable(Integer.TYPE, Integer.TYPE));\r\n    assertTrue(ClassUtils.isAssignable(Integer.class, Integer.class));\r\n    assertTrue(ClassUtils.isAssignable(Boolean.TYPE, Boolean.class));\r\n    assertTrue(ClassUtils.isAssignable(Boolean.TYPE, Object.class));\r\n    assertTrue(ClassUtils.isAssignable(Boolean.class, Boolean.TYPE));\r\n    assertTrue(ClassUtils.isAssignable(Boolean.class, Object.class));\r\n    assertTrue(ClassUtils.isAssignable(Boolean.TYPE, Boolean.TYPE));\r\n    assertTrue(ClassUtils.isAssignable(Boolean.class, Boolean.class));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ClassUtilsTest.java",
  "methodName" : "test_isAssignable_Autoboxing",
  "sourceCode" : "@Test\r\nvoid test_isAssignable_Autoboxing() {\r\n    assertFalse(ClassUtils.isAssignable((Class<?>) null, null, true));\r\n    assertFalse(ClassUtils.isAssignable(String.class, null, true));\r\n    assertTrue(ClassUtils.isAssignable(null, Object.class, true));\r\n    assertTrue(ClassUtils.isAssignable(null, Integer.class, true));\r\n    assertFalse(ClassUtils.isAssignable(null, Integer.TYPE, true));\r\n    assertTrue(ClassUtils.isAssignable(String.class, Object.class, true));\r\n    assertTrue(ClassUtils.isAssignable(String.class, String.class, true));\r\n    assertFalse(ClassUtils.isAssignable(Object.class, String.class, true));\r\n    assertTrue(ClassUtils.isAssignable(Integer.TYPE, Integer.class, true));\r\n    assertTrue(ClassUtils.isAssignable(Integer.TYPE, Object.class, true));\r\n    assertTrue(ClassUtils.isAssignable(Integer.class, Integer.TYPE, true));\r\n    assertTrue(ClassUtils.isAssignable(Integer.class, Object.class, true));\r\n    assertTrue(ClassUtils.isAssignable(Integer.TYPE, Integer.TYPE, true));\r\n    assertTrue(ClassUtils.isAssignable(Integer.class, Integer.class, true));\r\n    assertTrue(ClassUtils.isAssignable(Boolean.TYPE, Boolean.class, true));\r\n    assertTrue(ClassUtils.isAssignable(Boolean.class, Boolean.TYPE, true));\r\n    assertTrue(ClassUtils.isAssignable(Boolean.class, Object.class, true));\r\n    assertTrue(ClassUtils.isAssignable(Boolean.TYPE, Boolean.TYPE, true));\r\n    assertTrue(ClassUtils.isAssignable(Boolean.class, Boolean.class, true));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ClassUtilsTest.java",
  "methodName" : "test_isAssignable_ClassArray_ClassArray",
  "sourceCode" : "@Test\r\nvoid test_isAssignable_ClassArray_ClassArray() {\r\n    final Class<?>[] array2 = new Class[] { Object.class, Object.class };\r\n    final Class<?>[] array1 = new Class[] { Object.class };\r\n    final Class<?>[] array1s = new Class[] { String.class };\r\n    final Class<?>[] array0 = new Class[] {};\r\n    final Class<?>[] arrayPrimitives = { Integer.TYPE, Boolean.TYPE };\r\n    final Class<?>[] arrayWrappers = { Integer.class, Boolean.class };\r\n    assertFalse(ClassUtils.isAssignable(array1, array2));\r\n    assertFalse(ClassUtils.isAssignable(null, array2));\r\n    assertTrue(ClassUtils.isAssignable(null, array0));\r\n    assertTrue(ClassUtils.isAssignable(array0, array0));\r\n    // explicit cast to avoid warning\r\n    assertTrue(ClassUtils.isAssignable(array0, (Class<?>[]) null));\r\n    // explicit cast to avoid warning\r\n    assertTrue(ClassUtils.isAssignable(null, (Class<?>[]) null));\r\n    assertFalse(ClassUtils.isAssignable(array1, array1s));\r\n    assertTrue(ClassUtils.isAssignable(array1s, array1s));\r\n    assertTrue(ClassUtils.isAssignable(array1s, array1));\r\n    assertTrue(ClassUtils.isAssignable(arrayPrimitives, arrayWrappers));\r\n    assertTrue(ClassUtils.isAssignable(arrayWrappers, arrayPrimitives));\r\n    assertFalse(ClassUtils.isAssignable(arrayPrimitives, array1));\r\n    assertFalse(ClassUtils.isAssignable(arrayWrappers, array1));\r\n    assertTrue(ClassUtils.isAssignable(arrayPrimitives, array2));\r\n    assertTrue(ClassUtils.isAssignable(arrayWrappers, array2));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ClassUtilsTest.java",
  "methodName" : "test_isAssignable_ClassArray_ClassArray_Autoboxing",
  "sourceCode" : "@Test\r\nvoid test_isAssignable_ClassArray_ClassArray_Autoboxing() {\r\n    final Class<?>[] array2 = new Class[] { Object.class, Object.class };\r\n    final Class<?>[] array1 = new Class[] { Object.class };\r\n    final Class<?>[] array1s = new Class[] { String.class };\r\n    final Class<?>[] array0 = new Class[] {};\r\n    final Class<?>[] arrayPrimitives = { Integer.TYPE, Boolean.TYPE };\r\n    final Class<?>[] arrayWrappers = { Integer.class, Boolean.class };\r\n    assertFalse(ClassUtils.isAssignable(array1, array2, true));\r\n    assertFalse(ClassUtils.isAssignable(null, array2, true));\r\n    assertTrue(ClassUtils.isAssignable(null, array0, true));\r\n    assertTrue(ClassUtils.isAssignable(array0, array0, true));\r\n    assertTrue(ClassUtils.isAssignable(array0, null, true));\r\n    assertTrue(ClassUtils.isAssignable((Class[]) null, null, true));\r\n    assertFalse(ClassUtils.isAssignable(array1, array1s, true));\r\n    assertTrue(ClassUtils.isAssignable(array1s, array1s, true));\r\n    assertTrue(ClassUtils.isAssignable(array1s, array1, true));\r\n    assertTrue(ClassUtils.isAssignable(arrayPrimitives, arrayWrappers, true));\r\n    assertTrue(ClassUtils.isAssignable(arrayWrappers, arrayPrimitives, true));\r\n    assertFalse(ClassUtils.isAssignable(arrayPrimitives, array1, true));\r\n    assertFalse(ClassUtils.isAssignable(arrayWrappers, array1, true));\r\n    assertTrue(ClassUtils.isAssignable(arrayPrimitives, array2, true));\r\n    assertTrue(ClassUtils.isAssignable(arrayWrappers, array2, true));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ClassUtilsTest.java",
  "methodName" : "test_isAssignable_ClassArray_ClassArray_NoAutoboxing",
  "sourceCode" : "@Test\r\nvoid test_isAssignable_ClassArray_ClassArray_NoAutoboxing() {\r\n    final Class<?>[] array2 = new Class[] { Object.class, Object.class };\r\n    final Class<?>[] array1 = new Class[] { Object.class };\r\n    final Class<?>[] array1s = new Class[] { String.class };\r\n    final Class<?>[] array0 = new Class[] {};\r\n    final Class<?>[] arrayPrimitives = { Integer.TYPE, Boolean.TYPE };\r\n    final Class<?>[] arrayWrappers = { Integer.class, Boolean.class };\r\n    assertFalse(ClassUtils.isAssignable(array1, array2, false));\r\n    assertFalse(ClassUtils.isAssignable(null, array2, false));\r\n    assertTrue(ClassUtils.isAssignable(null, array0, false));\r\n    assertTrue(ClassUtils.isAssignable(array0, array0, false));\r\n    assertTrue(ClassUtils.isAssignable(array0, null, false));\r\n    assertTrue(ClassUtils.isAssignable((Class[]) null, null, false));\r\n    assertFalse(ClassUtils.isAssignable(array1, array1s, false));\r\n    assertTrue(ClassUtils.isAssignable(array1s, array1s, false));\r\n    assertTrue(ClassUtils.isAssignable(array1s, array1, false));\r\n    assertFalse(ClassUtils.isAssignable(arrayPrimitives, arrayWrappers, false));\r\n    assertFalse(ClassUtils.isAssignable(arrayWrappers, arrayPrimitives, false));\r\n    assertFalse(ClassUtils.isAssignable(arrayPrimitives, array1, false));\r\n    assertFalse(ClassUtils.isAssignable(arrayWrappers, array1, false));\r\n    assertTrue(ClassUtils.isAssignable(arrayWrappers, array2, false));\r\n    assertFalse(ClassUtils.isAssignable(arrayPrimitives, array2, false));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ClassUtilsTest.java",
  "methodName" : "test_isAssignable_DefaultUnboxing_Widening",
  "sourceCode" : "@Test\r\nvoid test_isAssignable_DefaultUnboxing_Widening() {\r\n    // test byte conversions\r\n    assertFalse(ClassUtils.isAssignable(Byte.class, Character.TYPE), \"byte -> char\");\r\n    assertTrue(ClassUtils.isAssignable(Byte.class, Byte.TYPE), \"byte -> byte\");\r\n    assertTrue(ClassUtils.isAssignable(Byte.class, Short.TYPE), \"byte -> short\");\r\n    assertTrue(ClassUtils.isAssignable(Byte.class, Integer.TYPE), \"byte -> int\");\r\n    assertTrue(ClassUtils.isAssignable(Byte.class, Long.TYPE), \"byte -> long\");\r\n    assertTrue(ClassUtils.isAssignable(Byte.class, Float.TYPE), \"byte -> float\");\r\n    assertTrue(ClassUtils.isAssignable(Byte.class, Double.TYPE), \"byte -> double\");\r\n    assertFalse(ClassUtils.isAssignable(Byte.class, Boolean.TYPE), \"byte -> boolean\");\r\n    // test short conversions\r\n    assertFalse(ClassUtils.isAssignable(Short.class, Character.TYPE), \"short -> char\");\r\n    assertFalse(ClassUtils.isAssignable(Short.class, Byte.TYPE), \"short -> byte\");\r\n    assertTrue(ClassUtils.isAssignable(Short.class, Short.TYPE), \"short -> short\");\r\n    assertTrue(ClassUtils.isAssignable(Short.class, Integer.TYPE), \"short -> int\");\r\n    assertTrue(ClassUtils.isAssignable(Short.class, Long.TYPE), \"short -> long\");\r\n    assertTrue(ClassUtils.isAssignable(Short.class, Float.TYPE), \"short -> float\");\r\n    assertTrue(ClassUtils.isAssignable(Short.class, Double.TYPE), \"short -> double\");\r\n    assertFalse(ClassUtils.isAssignable(Short.class, Boolean.TYPE), \"short -> boolean\");\r\n    // test char conversions\r\n    assertTrue(ClassUtils.isAssignable(Character.class, Character.TYPE), \"char -> char\");\r\n    assertFalse(ClassUtils.isAssignable(Character.class, Byte.TYPE), \"char -> byte\");\r\n    assertFalse(ClassUtils.isAssignable(Character.class, Short.TYPE), \"char -> short\");\r\n    assertTrue(ClassUtils.isAssignable(Character.class, Integer.TYPE), \"char -> int\");\r\n    assertTrue(ClassUtils.isAssignable(Character.class, Long.TYPE), \"char -> long\");\r\n    assertTrue(ClassUtils.isAssignable(Character.class, Float.TYPE), \"char -> float\");\r\n    assertTrue(ClassUtils.isAssignable(Character.class, Double.TYPE), \"char -> double\");\r\n    assertFalse(ClassUtils.isAssignable(Character.class, Boolean.TYPE), \"char -> boolean\");\r\n    // test int conversions\r\n    assertFalse(ClassUtils.isAssignable(Integer.class, Character.TYPE), \"int -> char\");\r\n    assertFalse(ClassUtils.isAssignable(Integer.class, Byte.TYPE), \"int -> byte\");\r\n    assertFalse(ClassUtils.isAssignable(Integer.class, Short.TYPE), \"int -> short\");\r\n    assertTrue(ClassUtils.isAssignable(Integer.class, Integer.TYPE), \"int -> int\");\r\n    assertTrue(ClassUtils.isAssignable(Integer.class, Long.TYPE), \"int -> long\");\r\n    assertTrue(ClassUtils.isAssignable(Integer.class, Float.TYPE), \"int -> float\");\r\n    assertTrue(ClassUtils.isAssignable(Integer.class, Double.TYPE), \"int -> double\");\r\n    assertFalse(ClassUtils.isAssignable(Integer.class, Boolean.TYPE), \"int -> boolean\");\r\n    // test long conversions\r\n    assertFalse(ClassUtils.isAssignable(Long.class, Character.TYPE), \"long -> char\");\r\n    assertFalse(ClassUtils.isAssignable(Long.class, Byte.TYPE), \"long -> byte\");\r\n    assertFalse(ClassUtils.isAssignable(Long.class, Short.TYPE), \"long -> short\");\r\n    assertFalse(ClassUtils.isAssignable(Long.class, Integer.TYPE), \"long -> int\");\r\n    assertTrue(ClassUtils.isAssignable(Long.class, Long.TYPE), \"long -> long\");\r\n    assertTrue(ClassUtils.isAssignable(Long.class, Float.TYPE), \"long -> float\");\r\n    assertTrue(ClassUtils.isAssignable(Long.class, Double.TYPE), \"long -> double\");\r\n    assertFalse(ClassUtils.isAssignable(Long.class, Boolean.TYPE), \"long -> boolean\");\r\n    // test float conversions\r\n    assertFalse(ClassUtils.isAssignable(Float.class, Character.TYPE), \"float -> char\");\r\n    assertFalse(ClassUtils.isAssignable(Float.class, Byte.TYPE), \"float -> byte\");\r\n    assertFalse(ClassUtils.isAssignable(Float.class, Short.TYPE), \"float -> short\");\r\n    assertFalse(ClassUtils.isAssignable(Float.class, Integer.TYPE), \"float -> int\");\r\n    assertFalse(ClassUtils.isAssignable(Float.class, Long.TYPE), \"float -> long\");\r\n    assertTrue(ClassUtils.isAssignable(Float.class, Float.TYPE), \"float -> float\");\r\n    assertTrue(ClassUtils.isAssignable(Float.class, Double.TYPE), \"float -> double\");\r\n    assertFalse(ClassUtils.isAssignable(Float.class, Boolean.TYPE), \"float -> boolean\");\r\n    // test double conversions\r\n    assertFalse(ClassUtils.isAssignable(Double.class, Character.TYPE), \"double -> char\");\r\n    assertFalse(ClassUtils.isAssignable(Double.class, Byte.TYPE), \"double -> byte\");\r\n    assertFalse(ClassUtils.isAssignable(Double.class, Short.TYPE), \"double -> short\");\r\n    assertFalse(ClassUtils.isAssignable(Double.class, Integer.TYPE), \"double -> int\");\r\n    assertFalse(ClassUtils.isAssignable(Double.class, Long.TYPE), \"double -> long\");\r\n    assertFalse(ClassUtils.isAssignable(Double.class, Float.TYPE), \"double -> float\");\r\n    assertTrue(ClassUtils.isAssignable(Double.class, Double.TYPE), \"double -> double\");\r\n    assertFalse(ClassUtils.isAssignable(Double.class, Boolean.TYPE), \"double -> boolean\");\r\n    // test boolean conversions\r\n    assertFalse(ClassUtils.isAssignable(Boolean.class, Character.TYPE), \"boolean -> char\");\r\n    assertFalse(ClassUtils.isAssignable(Boolean.class, Byte.TYPE), \"boolean -> byte\");\r\n    assertFalse(ClassUtils.isAssignable(Boolean.class, Short.TYPE), \"boolean -> short\");\r\n    assertFalse(ClassUtils.isAssignable(Boolean.class, Integer.TYPE), \"boolean -> int\");\r\n    assertFalse(ClassUtils.isAssignable(Boolean.class, Long.TYPE), \"boolean -> long\");\r\n    assertFalse(ClassUtils.isAssignable(Boolean.class, Float.TYPE), \"boolean -> float\");\r\n    assertFalse(ClassUtils.isAssignable(Boolean.class, Double.TYPE), \"boolean -> double\");\r\n    assertTrue(ClassUtils.isAssignable(Boolean.class, Boolean.TYPE), \"boolean -> boolean\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ClassUtilsTest.java",
  "methodName" : "test_isAssignable_NoAutoboxing",
  "sourceCode" : "@Test\r\nvoid test_isAssignable_NoAutoboxing() {\r\n    assertFalse(ClassUtils.isAssignable((Class<?>) null, null, false));\r\n    assertFalse(ClassUtils.isAssignable(String.class, null, false));\r\n    assertTrue(ClassUtils.isAssignable(null, Object.class, false));\r\n    assertTrue(ClassUtils.isAssignable(null, Integer.class, false));\r\n    assertFalse(ClassUtils.isAssignable(null, Integer.TYPE, false));\r\n    assertTrue(ClassUtils.isAssignable(String.class, Object.class, false));\r\n    assertTrue(ClassUtils.isAssignable(String.class, String.class, false));\r\n    assertFalse(ClassUtils.isAssignable(Object.class, String.class, false));\r\n    assertFalse(ClassUtils.isAssignable(Integer.TYPE, Integer.class, false));\r\n    assertFalse(ClassUtils.isAssignable(Integer.TYPE, Object.class, false));\r\n    assertFalse(ClassUtils.isAssignable(Integer.class, Integer.TYPE, false));\r\n    assertTrue(ClassUtils.isAssignable(Integer.TYPE, Integer.TYPE, false));\r\n    assertTrue(ClassUtils.isAssignable(Integer.class, Integer.class, false));\r\n    assertFalse(ClassUtils.isAssignable(Boolean.TYPE, Boolean.class, false));\r\n    assertFalse(ClassUtils.isAssignable(Boolean.TYPE, Object.class, false));\r\n    assertFalse(ClassUtils.isAssignable(Boolean.class, Boolean.TYPE, false));\r\n    assertTrue(ClassUtils.isAssignable(Boolean.class, Object.class, false));\r\n    assertTrue(ClassUtils.isAssignable(Boolean.TYPE, Boolean.TYPE, false));\r\n    assertTrue(ClassUtils.isAssignable(Boolean.class, Boolean.class, false));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ClassUtilsTest.java",
  "methodName" : "test_isAssignable_Unboxing_Widening",
  "sourceCode" : "@Test\r\nvoid test_isAssignable_Unboxing_Widening() {\r\n    // test byte conversions\r\n    assertFalse(ClassUtils.isAssignable(Byte.class, Character.TYPE, true), \"byte -> char\");\r\n    assertTrue(ClassUtils.isAssignable(Byte.class, Byte.TYPE, true), \"byte -> byte\");\r\n    assertTrue(ClassUtils.isAssignable(Byte.class, Short.TYPE, true), \"byte -> short\");\r\n    assertTrue(ClassUtils.isAssignable(Byte.class, Integer.TYPE, true), \"byte -> int\");\r\n    assertTrue(ClassUtils.isAssignable(Byte.class, Long.TYPE, true), \"byte -> long\");\r\n    assertTrue(ClassUtils.isAssignable(Byte.class, Float.TYPE, true), \"byte -> float\");\r\n    assertTrue(ClassUtils.isAssignable(Byte.class, Double.TYPE, true), \"byte -> double\");\r\n    assertFalse(ClassUtils.isAssignable(Byte.class, Boolean.TYPE, true), \"byte -> boolean\");\r\n    // test short conversions\r\n    assertFalse(ClassUtils.isAssignable(Short.class, Character.TYPE, true), \"short -> char\");\r\n    assertFalse(ClassUtils.isAssignable(Short.class, Byte.TYPE, true), \"short -> byte\");\r\n    assertTrue(ClassUtils.isAssignable(Short.class, Short.TYPE, true), \"short -> short\");\r\n    assertTrue(ClassUtils.isAssignable(Short.class, Integer.TYPE, true), \"short -> int\");\r\n    assertTrue(ClassUtils.isAssignable(Short.class, Long.TYPE, true), \"short -> long\");\r\n    assertTrue(ClassUtils.isAssignable(Short.class, Float.TYPE, true), \"short -> float\");\r\n    assertTrue(ClassUtils.isAssignable(Short.class, Double.TYPE, true), \"short -> double\");\r\n    assertFalse(ClassUtils.isAssignable(Short.class, Boolean.TYPE, true), \"short -> boolean\");\r\n    // test char conversions\r\n    assertTrue(ClassUtils.isAssignable(Character.class, Character.TYPE, true), \"char -> char\");\r\n    assertFalse(ClassUtils.isAssignable(Character.class, Byte.TYPE, true), \"char -> byte\");\r\n    assertFalse(ClassUtils.isAssignable(Character.class, Short.TYPE, true), \"char -> short\");\r\n    assertTrue(ClassUtils.isAssignable(Character.class, Integer.TYPE, true), \"char -> int\");\r\n    assertTrue(ClassUtils.isAssignable(Character.class, Long.TYPE, true), \"char -> long\");\r\n    assertTrue(ClassUtils.isAssignable(Character.class, Float.TYPE, true), \"char -> float\");\r\n    assertTrue(ClassUtils.isAssignable(Character.class, Double.TYPE, true), \"char -> double\");\r\n    assertFalse(ClassUtils.isAssignable(Character.class, Boolean.TYPE, true), \"char -> boolean\");\r\n    // test int conversions\r\n    assertFalse(ClassUtils.isAssignable(Integer.class, Character.TYPE, true), \"int -> char\");\r\n    assertFalse(ClassUtils.isAssignable(Integer.class, Byte.TYPE, true), \"int -> byte\");\r\n    assertFalse(ClassUtils.isAssignable(Integer.class, Short.TYPE, true), \"int -> short\");\r\n    assertTrue(ClassUtils.isAssignable(Integer.class, Integer.TYPE, true), \"int -> int\");\r\n    assertTrue(ClassUtils.isAssignable(Integer.class, Long.TYPE, true), \"int -> long\");\r\n    assertTrue(ClassUtils.isAssignable(Integer.class, Float.TYPE, true), \"int -> float\");\r\n    assertTrue(ClassUtils.isAssignable(Integer.class, Double.TYPE, true), \"int -> double\");\r\n    assertFalse(ClassUtils.isAssignable(Integer.class, Boolean.TYPE, true), \"int -> boolean\");\r\n    // test long conversions\r\n    assertFalse(ClassUtils.isAssignable(Long.class, Character.TYPE, true), \"long -> char\");\r\n    assertFalse(ClassUtils.isAssignable(Long.class, Byte.TYPE, true), \"long -> byte\");\r\n    assertFalse(ClassUtils.isAssignable(Long.class, Short.TYPE, true), \"long -> short\");\r\n    assertFalse(ClassUtils.isAssignable(Long.class, Integer.TYPE, true), \"long -> int\");\r\n    assertTrue(ClassUtils.isAssignable(Long.class, Long.TYPE, true), \"long -> long\");\r\n    assertTrue(ClassUtils.isAssignable(Long.class, Float.TYPE, true), \"long -> float\");\r\n    assertTrue(ClassUtils.isAssignable(Long.class, Double.TYPE, true), \"long -> double\");\r\n    assertFalse(ClassUtils.isAssignable(Long.class, Boolean.TYPE, true), \"long -> boolean\");\r\n    // test float conversions\r\n    assertFalse(ClassUtils.isAssignable(Float.class, Character.TYPE, true), \"float -> char\");\r\n    assertFalse(ClassUtils.isAssignable(Float.class, Byte.TYPE, true), \"float -> byte\");\r\n    assertFalse(ClassUtils.isAssignable(Float.class, Short.TYPE, true), \"float -> short\");\r\n    assertFalse(ClassUtils.isAssignable(Float.class, Integer.TYPE, true), \"float -> int\");\r\n    assertFalse(ClassUtils.isAssignable(Float.class, Long.TYPE, true), \"float -> long\");\r\n    assertTrue(ClassUtils.isAssignable(Float.class, Float.TYPE, true), \"float -> float\");\r\n    assertTrue(ClassUtils.isAssignable(Float.class, Double.TYPE, true), \"float -> double\");\r\n    assertFalse(ClassUtils.isAssignable(Float.class, Boolean.TYPE, true), \"float -> boolean\");\r\n    // test double conversions\r\n    assertFalse(ClassUtils.isAssignable(Double.class, Character.TYPE, true), \"double -> char\");\r\n    assertFalse(ClassUtils.isAssignable(Double.class, Byte.TYPE, true), \"double -> byte\");\r\n    assertFalse(ClassUtils.isAssignable(Double.class, Short.TYPE, true), \"double -> short\");\r\n    assertFalse(ClassUtils.isAssignable(Double.class, Integer.TYPE, true), \"double -> int\");\r\n    assertFalse(ClassUtils.isAssignable(Double.class, Long.TYPE, true), \"double -> long\");\r\n    assertFalse(ClassUtils.isAssignable(Double.class, Float.TYPE, true), \"double -> float\");\r\n    assertTrue(ClassUtils.isAssignable(Double.class, Double.TYPE, true), \"double -> double\");\r\n    assertFalse(ClassUtils.isAssignable(Double.class, Boolean.TYPE, true), \"double -> boolean\");\r\n    // test boolean conversions\r\n    assertFalse(ClassUtils.isAssignable(Boolean.class, Character.TYPE, true), \"boolean -> char\");\r\n    assertFalse(ClassUtils.isAssignable(Boolean.class, Byte.TYPE, true), \"boolean -> byte\");\r\n    assertFalse(ClassUtils.isAssignable(Boolean.class, Short.TYPE, true), \"boolean -> short\");\r\n    assertFalse(ClassUtils.isAssignable(Boolean.class, Integer.TYPE, true), \"boolean -> int\");\r\n    assertFalse(ClassUtils.isAssignable(Boolean.class, Long.TYPE, true), \"boolean -> long\");\r\n    assertFalse(ClassUtils.isAssignable(Boolean.class, Float.TYPE, true), \"boolean -> float\");\r\n    assertFalse(ClassUtils.isAssignable(Boolean.class, Double.TYPE, true), \"boolean -> double\");\r\n    assertTrue(ClassUtils.isAssignable(Boolean.class, Boolean.TYPE, true), \"boolean -> boolean\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ClassUtilsTest.java",
  "methodName" : "test_isAssignable_Widening",
  "sourceCode" : "@Test\r\nvoid test_isAssignable_Widening() {\r\n    // test byte conversions\r\n    assertFalse(ClassUtils.isAssignable(Byte.TYPE, Character.TYPE), \"byte -> char\");\r\n    assertTrue(ClassUtils.isAssignable(Byte.TYPE, Byte.TYPE), \"byte -> byte\");\r\n    assertTrue(ClassUtils.isAssignable(Byte.TYPE, Short.TYPE), \"byte -> short\");\r\n    assertTrue(ClassUtils.isAssignable(Byte.TYPE, Integer.TYPE), \"byte -> int\");\r\n    assertTrue(ClassUtils.isAssignable(Byte.TYPE, Long.TYPE), \"byte -> long\");\r\n    assertTrue(ClassUtils.isAssignable(Byte.TYPE, Float.TYPE), \"byte -> float\");\r\n    assertTrue(ClassUtils.isAssignable(Byte.TYPE, Double.TYPE), \"byte -> double\");\r\n    assertFalse(ClassUtils.isAssignable(Byte.TYPE, Boolean.TYPE), \"byte -> boolean\");\r\n    // test short conversions\r\n    assertFalse(ClassUtils.isAssignable(Short.TYPE, Character.TYPE), \"short -> char\");\r\n    assertFalse(ClassUtils.isAssignable(Short.TYPE, Byte.TYPE), \"short -> byte\");\r\n    assertTrue(ClassUtils.isAssignable(Short.TYPE, Short.TYPE), \"short -> short\");\r\n    assertTrue(ClassUtils.isAssignable(Short.TYPE, Integer.TYPE), \"short -> int\");\r\n    assertTrue(ClassUtils.isAssignable(Short.TYPE, Long.TYPE), \"short -> long\");\r\n    assertTrue(ClassUtils.isAssignable(Short.TYPE, Float.TYPE), \"short -> float\");\r\n    assertTrue(ClassUtils.isAssignable(Short.TYPE, Double.TYPE), \"short -> double\");\r\n    assertFalse(ClassUtils.isAssignable(Short.TYPE, Boolean.TYPE), \"short -> boolean\");\r\n    // test char conversions\r\n    assertTrue(ClassUtils.isAssignable(Character.TYPE, Character.TYPE), \"char -> char\");\r\n    assertFalse(ClassUtils.isAssignable(Character.TYPE, Byte.TYPE), \"char -> byte\");\r\n    assertFalse(ClassUtils.isAssignable(Character.TYPE, Short.TYPE), \"char -> short\");\r\n    assertTrue(ClassUtils.isAssignable(Character.TYPE, Integer.TYPE), \"char -> int\");\r\n    assertTrue(ClassUtils.isAssignable(Character.TYPE, Long.TYPE), \"char -> long\");\r\n    assertTrue(ClassUtils.isAssignable(Character.TYPE, Float.TYPE), \"char -> float\");\r\n    assertTrue(ClassUtils.isAssignable(Character.TYPE, Double.TYPE), \"char -> double\");\r\n    assertFalse(ClassUtils.isAssignable(Character.TYPE, Boolean.TYPE), \"char -> boolean\");\r\n    // test int conversions\r\n    assertFalse(ClassUtils.isAssignable(Integer.TYPE, Character.TYPE), \"int -> char\");\r\n    assertFalse(ClassUtils.isAssignable(Integer.TYPE, Byte.TYPE), \"int -> byte\");\r\n    assertFalse(ClassUtils.isAssignable(Integer.TYPE, Short.TYPE), \"int -> short\");\r\n    assertTrue(ClassUtils.isAssignable(Integer.TYPE, Integer.TYPE), \"int -> int\");\r\n    assertTrue(ClassUtils.isAssignable(Integer.TYPE, Long.TYPE), \"int -> long\");\r\n    assertTrue(ClassUtils.isAssignable(Integer.TYPE, Float.TYPE), \"int -> float\");\r\n    assertTrue(ClassUtils.isAssignable(Integer.TYPE, Double.TYPE), \"int -> double\");\r\n    assertFalse(ClassUtils.isAssignable(Integer.TYPE, Boolean.TYPE), \"int -> boolean\");\r\n    // test long conversions\r\n    assertFalse(ClassUtils.isAssignable(Long.TYPE, Character.TYPE), \"long -> char\");\r\n    assertFalse(ClassUtils.isAssignable(Long.TYPE, Byte.TYPE), \"long -> byte\");\r\n    assertFalse(ClassUtils.isAssignable(Long.TYPE, Short.TYPE), \"long -> short\");\r\n    assertFalse(ClassUtils.isAssignable(Long.TYPE, Integer.TYPE), \"long -> int\");\r\n    assertTrue(ClassUtils.isAssignable(Long.TYPE, Long.TYPE), \"long -> long\");\r\n    assertTrue(ClassUtils.isAssignable(Long.TYPE, Float.TYPE), \"long -> float\");\r\n    assertTrue(ClassUtils.isAssignable(Long.TYPE, Double.TYPE), \"long -> double\");\r\n    assertFalse(ClassUtils.isAssignable(Long.TYPE, Boolean.TYPE), \"long -> boolean\");\r\n    // test float conversions\r\n    assertFalse(ClassUtils.isAssignable(Float.TYPE, Character.TYPE), \"float -> char\");\r\n    assertFalse(ClassUtils.isAssignable(Float.TYPE, Byte.TYPE), \"float -> byte\");\r\n    assertFalse(ClassUtils.isAssignable(Float.TYPE, Short.TYPE), \"float -> short\");\r\n    assertFalse(ClassUtils.isAssignable(Float.TYPE, Integer.TYPE), \"float -> int\");\r\n    assertFalse(ClassUtils.isAssignable(Float.TYPE, Long.TYPE), \"float -> long\");\r\n    assertTrue(ClassUtils.isAssignable(Float.TYPE, Float.TYPE), \"float -> float\");\r\n    assertTrue(ClassUtils.isAssignable(Float.TYPE, Double.TYPE), \"float -> double\");\r\n    assertFalse(ClassUtils.isAssignable(Float.TYPE, Boolean.TYPE), \"float -> boolean\");\r\n    // test double conversions\r\n    assertFalse(ClassUtils.isAssignable(Double.TYPE, Character.TYPE), \"double -> char\");\r\n    assertFalse(ClassUtils.isAssignable(Double.TYPE, Byte.TYPE), \"double -> byte\");\r\n    assertFalse(ClassUtils.isAssignable(Double.TYPE, Short.TYPE), \"double -> short\");\r\n    assertFalse(ClassUtils.isAssignable(Double.TYPE, Integer.TYPE), \"double -> int\");\r\n    assertFalse(ClassUtils.isAssignable(Double.TYPE, Long.TYPE), \"double -> long\");\r\n    assertFalse(ClassUtils.isAssignable(Double.TYPE, Float.TYPE), \"double -> float\");\r\n    assertTrue(ClassUtils.isAssignable(Double.TYPE, Double.TYPE), \"double -> double\");\r\n    assertFalse(ClassUtils.isAssignable(Double.TYPE, Boolean.TYPE), \"double -> boolean\");\r\n    // test boolean conversions\r\n    assertFalse(ClassUtils.isAssignable(Boolean.TYPE, Character.TYPE), \"boolean -> char\");\r\n    assertFalse(ClassUtils.isAssignable(Boolean.TYPE, Byte.TYPE), \"boolean -> byte\");\r\n    assertFalse(ClassUtils.isAssignable(Boolean.TYPE, Short.TYPE), \"boolean -> short\");\r\n    assertFalse(ClassUtils.isAssignable(Boolean.TYPE, Integer.TYPE), \"boolean -> int\");\r\n    assertFalse(ClassUtils.isAssignable(Boolean.TYPE, Long.TYPE), \"boolean -> long\");\r\n    assertFalse(ClassUtils.isAssignable(Boolean.TYPE, Float.TYPE), \"boolean -> float\");\r\n    assertFalse(ClassUtils.isAssignable(Boolean.TYPE, Double.TYPE), \"boolean -> double\");\r\n    assertTrue(ClassUtils.isAssignable(Boolean.TYPE, Boolean.TYPE), \"boolean -> boolean\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ClassUtilsTest.java",
  "methodName" : "test_isInnerClass_Class",
  "sourceCode" : "@Test\r\nvoid test_isInnerClass_Class() {\r\n    assertTrue(ClassUtils.isInnerClass(Inner.class));\r\n    assertTrue(ClassUtils.isInnerClass(Map.Entry.class));\r\n    assertTrue(ClassUtils.isInnerClass(new Cloneable() {\r\n    }.getClass()));\r\n    assertFalse(ClassUtils.isInnerClass(this.getClass()));\r\n    assertFalse(ClassUtils.isInnerClass(String.class));\r\n    assertFalse(ClassUtils.isInnerClass(null));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ClassUtilsTest.java",
  "methodName" : "testComparable",
  "sourceCode" : "@Test\r\nvoid testComparable() {\r\n    final TreeMap<Class<?>, String> map = new TreeMap<>(ClassUtils.comparator());\r\n    map.put(String.class, \"lastEntry\");\r\n    map.toString();\r\n    map.put(Character.class, \"firstEntry\");\r\n    map.toString();\r\n    assertEquals(\"firstEntry\", map.firstEntry().getValue());\r\n    assertEquals(Character.class, map.firstEntry().getKey());\r\n    //\r\n    assertEquals(\"lastEntry\", map.lastEntry().getValue());\r\n    assertEquals(String.class, map.lastEntry().getKey());\r\n    //\r\n    map.put(null, \"null\");\r\n    map.toString();\r\n    assertEquals(\"null\", map.get(null));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ClassUtilsTest.java",
  "methodName" : "testConstructor",
  "sourceCode" : "@Test\r\nvoid testConstructor() {\r\n    assertNotNull(new ClassUtils());\r\n    final Constructor<?>[] cons = ClassUtils.class.getDeclaredConstructors();\r\n    assertEquals(1, cons.length);\r\n    assertTrue(Modifier.isPublic(cons[0].getModifiers()));\r\n    assertTrue(Modifier.isPublic(ClassUtils.class.getModifiers()));\r\n    assertFalse(Modifier.isFinal(ClassUtils.class.getModifiers()));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ClassUtilsTest.java",
  "methodName" : "testGetClassByNormalNameArrays",
  "sourceCode" : "@Test\r\nvoid testGetClassByNormalNameArrays() throws ClassNotFoundException {\r\n    assertEquals(int[].class, ClassUtils.getClass(\"int[]\"));\r\n    assertEquals(long[].class, ClassUtils.getClass(\"long[]\"));\r\n    assertEquals(short[].class, ClassUtils.getClass(\"short[]\"));\r\n    assertEquals(byte[].class, ClassUtils.getClass(\"byte[]\"));\r\n    assertEquals(char[].class, ClassUtils.getClass(\"char[]\"));\r\n    assertEquals(float[].class, ClassUtils.getClass(\"float[]\"));\r\n    assertEquals(double[].class, ClassUtils.getClass(\"double[]\"));\r\n    assertEquals(boolean[].class, ClassUtils.getClass(\"boolean[]\"));\r\n    assertEquals(String[].class, ClassUtils.getClass(\"java.lang.String[]\"));\r\n    assertEquals(java.util.Map.Entry[].class, ClassUtils.getClass(\"java.util.Map.Entry[]\"));\r\n    assertEquals(java.util.Map.Entry[].class, ClassUtils.getClass(\"java.util.Map$Entry[]\"));\r\n    assertEquals(java.util.Map.Entry[].class, ClassUtils.getClass(\"[Ljava.util.Map.Entry;\"));\r\n    assertEquals(java.util.Map.Entry[].class, ClassUtils.getClass(\"[Ljava.util.Map$Entry;\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ClassUtilsTest.java",
  "methodName" : "testGetClassByNormalNameArrays2D",
  "sourceCode" : "@Test\r\nvoid testGetClassByNormalNameArrays2D() throws ClassNotFoundException {\r\n    assertEquals(int[][].class, ClassUtils.getClass(\"int[][]\"));\r\n    assertEquals(long[][].class, ClassUtils.getClass(\"long[][]\"));\r\n    assertEquals(short[][].class, ClassUtils.getClass(\"short[][]\"));\r\n    assertEquals(byte[][].class, ClassUtils.getClass(\"byte[][]\"));\r\n    assertEquals(char[][].class, ClassUtils.getClass(\"char[][]\"));\r\n    assertEquals(float[][].class, ClassUtils.getClass(\"float[][]\"));\r\n    assertEquals(double[][].class, ClassUtils.getClass(\"double[][]\"));\r\n    assertEquals(boolean[][].class, ClassUtils.getClass(\"boolean[][]\"));\r\n    assertEquals(String[][].class, ClassUtils.getClass(\"java.lang.String[][]\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ClassUtilsTest.java",
  "methodName" : "testGetClassClassNotFound",
  "sourceCode" : "@Test\r\nvoid testGetClassClassNotFound() throws Exception {\r\n    assertGetClassThrowsClassNotFound(\"bool\");\r\n    assertGetClassThrowsClassNotFound(\"bool[]\");\r\n    assertGetClassThrowsClassNotFound(\"integer[]\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ClassUtilsTest.java",
  "methodName" : "testGetClassInvalidArguments",
  "sourceCode" : "@Test\r\nvoid testGetClassInvalidArguments() throws Exception {\r\n    assertGetClassThrowsNullPointerException(null);\r\n    assertGetClassThrowsClassNotFound(\"[][][]\");\r\n    assertGetClassThrowsClassNotFound(\"[[]\");\r\n    assertGetClassThrowsClassNotFound(\"[\");\r\n    assertGetClassThrowsClassNotFound(\"java.lang.String][\");\r\n    assertGetClassThrowsClassNotFound(\".hello.world\");\r\n    assertGetClassThrowsClassNotFound(\"hello..world\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ClassUtilsTest.java",
  "methodName" : "testGetClassRawPrimitives",
  "sourceCode" : "@Test\r\nvoid testGetClassRawPrimitives() throws ClassNotFoundException {\r\n    assertEquals(int.class, ClassUtils.getClass(\"int\"));\r\n    assertEquals(long.class, ClassUtils.getClass(\"long\"));\r\n    assertEquals(short.class, ClassUtils.getClass(\"short\"));\r\n    assertEquals(byte.class, ClassUtils.getClass(\"byte\"));\r\n    assertEquals(char.class, ClassUtils.getClass(\"char\"));\r\n    assertEquals(float.class, ClassUtils.getClass(\"float\"));\r\n    assertEquals(double.class, ClassUtils.getClass(\"double\"));\r\n    assertEquals(boolean.class, ClassUtils.getClass(\"boolean\"));\r\n    assertEquals(void.class, ClassUtils.getClass(\"void\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ClassUtilsTest.java",
  "methodName" : "testGetClassWithArrayClasses",
  "sourceCode" : "@Test\r\nvoid testGetClassWithArrayClasses() throws Exception {\r\n    assertGetClassReturnsClass(String[].class);\r\n    assertGetClassReturnsClass(int[].class);\r\n    assertGetClassReturnsClass(long[].class);\r\n    assertGetClassReturnsClass(short[].class);\r\n    assertGetClassReturnsClass(byte[].class);\r\n    assertGetClassReturnsClass(char[].class);\r\n    assertGetClassReturnsClass(float[].class);\r\n    assertGetClassReturnsClass(double[].class);\r\n    assertGetClassReturnsClass(boolean[].class);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ClassUtilsTest.java",
  "methodName" : "testGetClassWithArrayClasses2D",
  "sourceCode" : "@Test\r\nvoid testGetClassWithArrayClasses2D() throws Exception {\r\n    assertGetClassReturnsClass(String[][].class);\r\n    assertGetClassReturnsClass(int[][].class);\r\n    assertGetClassReturnsClass(long[][].class);\r\n    assertGetClassReturnsClass(short[][].class);\r\n    assertGetClassReturnsClass(byte[][].class);\r\n    assertGetClassReturnsClass(char[][].class);\r\n    assertGetClassReturnsClass(float[][].class);\r\n    assertGetClassReturnsClass(double[][].class);\r\n    assertGetClassReturnsClass(boolean[][].class);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ClassUtilsTest.java",
  "methodName" : "testGetComponentType",
  "sourceCode" : "@Test\r\nvoid testGetComponentType() {\r\n    final CX[] newArray = {};\r\n    @SuppressWarnings(\"unchecked\")\r\n    final Class<CX[]> classCxArray = (Class<CX[]>) newArray.getClass();\r\n    // No type-cast required.\r\n    final Class<CX> componentType = ClassUtils.getComponentType(classCxArray);\r\n    assertEquals(CX.class, componentType);\r\n    assertNull(ClassUtils.getComponentType(null));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ClassUtilsTest.java",
  "methodName" : "testGetInnerClass",
  "sourceCode" : "@Test\r\nvoid testGetInnerClass() throws ClassNotFoundException {\r\n    assertEquals(Inner.DeeplyNested.class, ClassUtils.getClass(\"org.apache.commons.lang3.ClassUtilsTest.Inner.DeeplyNested\"));\r\n    assertEquals(Inner.DeeplyNested.class, ClassUtils.getClass(\"org.apache.commons.lang3.ClassUtilsTest.Inner$DeeplyNested\"));\r\n    assertEquals(Inner.DeeplyNested.class, ClassUtils.getClass(\"org.apache.commons.lang3.ClassUtilsTest$Inner$DeeplyNested\"));\r\n    assertEquals(Inner.DeeplyNested.class, ClassUtils.getClass(\"org.apache.commons.lang3.ClassUtilsTest$Inner.DeeplyNested\"));\r\n    //\r\n    assertEquals(Inner.DeeplyNested.class, ClassUtils.getClass(\"org.apache.commons.lang3.ClassUtilsTest.Inner.DeeplyNested\", true));\r\n    assertEquals(Inner.DeeplyNested.class, ClassUtils.getClass(\"org.apache.commons.lang3.ClassUtilsTest.Inner$DeeplyNested\", true));\r\n    assertEquals(Inner.DeeplyNested.class, ClassUtils.getClass(\"org.apache.commons.lang3.ClassUtilsTest$Inner$DeeplyNested\", true));\r\n    assertEquals(Inner.DeeplyNested.class, ClassUtils.getClass(\"org.apache.commons.lang3.ClassUtilsTest$Inner.DeeplyNested\", true));\r\n    //\r\n    final ClassLoader classLoader = Inner.DeeplyNested.class.getClassLoader();\r\n    assertEquals(Inner.DeeplyNested.class, ClassUtils.getClass(classLoader, \"org.apache.commons.lang3.ClassUtilsTest.Inner.DeeplyNested\"));\r\n    assertEquals(Inner.DeeplyNested.class, ClassUtils.getClass(classLoader, \"org.apache.commons.lang3.ClassUtilsTest.Inner$DeeplyNested\"));\r\n    assertEquals(Inner.DeeplyNested.class, ClassUtils.getClass(classLoader, \"org.apache.commons.lang3.ClassUtilsTest$Inner$DeeplyNested\"));\r\n    assertEquals(Inner.DeeplyNested.class, ClassUtils.getClass(classLoader, \"org.apache.commons.lang3.ClassUtilsTest$Inner.DeeplyNested\"));\r\n    //\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ClassUtilsTest.java",
  "methodName" : "testGetPublicMethod",
  "sourceCode" : "@Test\r\nvoid testGetPublicMethod() throws Exception {\r\n    // Tests with Collections$UnmodifiableSet\r\n    final Set<?> set = Collections.unmodifiableSet(new HashSet<>());\r\n    final Method isEmptyMethod = ClassUtils.getPublicMethod(set.getClass(), \"isEmpty\");\r\n    assertTrue(Modifier.isPublic(isEmptyMethod.getDeclaringClass().getModifiers()));\r\n    assertTrue((Boolean) isEmptyMethod.invoke(set));\r\n    // Tests with a public Class\r\n    final Method toStringMethod = ClassUtils.getPublicMethod(Object.class, \"toString\");\r\n    assertEquals(Object.class.getMethod(\"toString\"), toStringMethod);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ClassUtilsTest.java",
  "methodName" : "testHierarchyExcludingInterfaces",
  "sourceCode" : "@Test\r\nvoid testHierarchyExcludingInterfaces() {\r\n    final Iterator<Class<?>> iter = ClassUtils.hierarchy(StringParameterizedChild.class).iterator();\r\n    assertEquals(StringParameterizedChild.class, iter.next());\r\n    assertEquals(GenericParent.class, iter.next());\r\n    assertEquals(Object.class, iter.next());\r\n    assertFalse(iter.hasNext());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ClassUtilsTest.java",
  "methodName" : "testHierarchyIncludingInterfaces",
  "sourceCode" : "@Test\r\nvoid testHierarchyIncludingInterfaces() {\r\n    final Iterator<Class<?>> iter = ClassUtils.hierarchy(StringParameterizedChild.class, Interfaces.INCLUDE).iterator();\r\n    assertEquals(StringParameterizedChild.class, iter.next());\r\n    assertEquals(GenericParent.class, iter.next());\r\n    assertEquals(GenericConsumer.class, iter.next());\r\n    assertEquals(Object.class, iter.next());\r\n    assertFalse(iter.hasNext());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ClassUtilsTest.java",
  "methodName" : "testIsPrimitiveOrWrapper",
  "sourceCode" : "@Test\r\nvoid testIsPrimitiveOrWrapper() {\r\n    // test primitive wrapper classes\r\n    assertTrue(ClassUtils.isPrimitiveOrWrapper(Boolean.class), \"Boolean.class\");\r\n    assertTrue(ClassUtils.isPrimitiveOrWrapper(Byte.class), \"Byte.class\");\r\n    assertTrue(ClassUtils.isPrimitiveOrWrapper(Character.class), \"Character.class\");\r\n    assertTrue(ClassUtils.isPrimitiveOrWrapper(Short.class), \"Short.class\");\r\n    assertTrue(ClassUtils.isPrimitiveOrWrapper(Integer.class), \"Integer.class\");\r\n    assertTrue(ClassUtils.isPrimitiveOrWrapper(Long.class), \"Long.class\");\r\n    assertTrue(ClassUtils.isPrimitiveOrWrapper(Double.class), \"Double.class\");\r\n    assertTrue(ClassUtils.isPrimitiveOrWrapper(Float.class), \"Float.class\");\r\n    // test primitive classes\r\n    assertTrue(ClassUtils.isPrimitiveOrWrapper(Boolean.TYPE), \"boolean\");\r\n    assertTrue(ClassUtils.isPrimitiveOrWrapper(Byte.TYPE), \"byte\");\r\n    assertTrue(ClassUtils.isPrimitiveOrWrapper(Character.TYPE), \"char\");\r\n    assertTrue(ClassUtils.isPrimitiveOrWrapper(Short.TYPE), \"short\");\r\n    assertTrue(ClassUtils.isPrimitiveOrWrapper(Integer.TYPE), \"int\");\r\n    assertTrue(ClassUtils.isPrimitiveOrWrapper(Long.TYPE), \"long\");\r\n    assertTrue(ClassUtils.isPrimitiveOrWrapper(Double.TYPE), \"double\");\r\n    assertTrue(ClassUtils.isPrimitiveOrWrapper(Float.TYPE), \"float\");\r\n    assertTrue(ClassUtils.isPrimitiveOrWrapper(Void.TYPE), \"Void.TYPE\");\r\n    // others\r\n    assertFalse(ClassUtils.isPrimitiveOrWrapper(null), \"null\");\r\n    assertFalse(ClassUtils.isPrimitiveOrWrapper(Void.class), \"Void.class\");\r\n    assertFalse(ClassUtils.isPrimitiveOrWrapper(String.class), \"String.class\");\r\n    assertFalse(ClassUtils.isPrimitiveOrWrapper(this.getClass()), \"this.getClass()\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ClassUtilsTest.java",
  "methodName" : "testIsPrimitiveWrapper",
  "sourceCode" : "@Test\r\nvoid testIsPrimitiveWrapper() {\r\n    // test primitive wrapper classes\r\n    assertTrue(ClassUtils.isPrimitiveWrapper(Boolean.class), \"Boolean.class\");\r\n    assertTrue(ClassUtils.isPrimitiveWrapper(Byte.class), \"Byte.class\");\r\n    assertTrue(ClassUtils.isPrimitiveWrapper(Character.class), \"Character.class\");\r\n    assertTrue(ClassUtils.isPrimitiveWrapper(Short.class), \"Short.class\");\r\n    assertTrue(ClassUtils.isPrimitiveWrapper(Integer.class), \"Integer.class\");\r\n    assertTrue(ClassUtils.isPrimitiveWrapper(Long.class), \"Long.class\");\r\n    assertTrue(ClassUtils.isPrimitiveWrapper(Double.class), \"Double.class\");\r\n    assertTrue(ClassUtils.isPrimitiveWrapper(Float.class), \"Float.class\");\r\n    // test primitive classes\r\n    assertFalse(ClassUtils.isPrimitiveWrapper(Boolean.TYPE), \"boolean\");\r\n    assertFalse(ClassUtils.isPrimitiveWrapper(Byte.TYPE), \"byte\");\r\n    assertFalse(ClassUtils.isPrimitiveWrapper(Character.TYPE), \"char\");\r\n    assertFalse(ClassUtils.isPrimitiveWrapper(Short.TYPE), \"short\");\r\n    assertFalse(ClassUtils.isPrimitiveWrapper(Integer.TYPE), \"int\");\r\n    assertFalse(ClassUtils.isPrimitiveWrapper(Long.TYPE), \"long\");\r\n    assertFalse(ClassUtils.isPrimitiveWrapper(Double.TYPE), \"double\");\r\n    assertFalse(ClassUtils.isPrimitiveWrapper(Float.TYPE), \"float\");\r\n    // others\r\n    assertFalse(ClassUtils.isPrimitiveWrapper(null), \"null\");\r\n    assertFalse(ClassUtils.isPrimitiveWrapper(Void.class), \"Void.class\");\r\n    assertFalse(ClassUtils.isPrimitiveWrapper(Void.TYPE), \"Void.TYPE\");\r\n    assertFalse(ClassUtils.isPrimitiveWrapper(String.class), \"String.class\");\r\n    assertFalse(ClassUtils.isPrimitiveWrapper(this.getClass()), \"this.getClass()\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ClassUtilsTest.java",
  "methodName" : "testPrimitivesToWrappers",
  "sourceCode" : "@Test\r\nvoid testPrimitivesToWrappers() {\r\n    // test null\r\n    //        assertNull(\"null -> null\", ClassUtils.primitivesToWrappers(null)); // generates warning\r\n    // equivalent cast to avoid warning\r\n    assertNull(ClassUtils.primitivesToWrappers((Class<?>[]) null), \"null -> null\");\r\n    // Other possible casts for null\r\n    assertArrayEquals(ArrayUtils.EMPTY_CLASS_ARRAY, ClassUtils.primitivesToWrappers(), \"empty -> empty\");\r\n    // == new Class<?>[]{null}\r\n    final Class<?>[] castNull = ClassUtils.primitivesToWrappers((Class<?>) null);\r\n    assertArrayEquals(new Class<?>[] { null }, castNull, \"(Class<?>) null -> [null]\");\r\n    // test empty array is returned unchanged\r\n    assertArrayEquals(ArrayUtils.EMPTY_CLASS_ARRAY, ClassUtils.primitivesToWrappers(ArrayUtils.EMPTY_CLASS_ARRAY), \"empty -> empty\");\r\n    // test an array of various classes\r\n    final Class<?>[] primitives = new Class[] { Boolean.TYPE, Byte.TYPE, Character.TYPE, Short.TYPE, Integer.TYPE, Long.TYPE, Double.TYPE, Float.TYPE, String.class, ClassUtils.class };\r\n    final Class<?>[] wrappers = ClassUtils.primitivesToWrappers(primitives);\r\n    for (int i = 0; i < primitives.length; i++) {\r\n        // test each returned wrapper\r\n        final Class<?> primitive = primitives[i];\r\n        final Class<?> expectedWrapper = ClassUtils.primitiveToWrapper(primitive);\r\n        assertEquals(expectedWrapper, wrappers[i], primitive + \" -> \" + expectedWrapper);\r\n    }\r\n    // test an array of no primitive classes\r\n    final Class<?>[] noPrimitives = new Class[] { String.class, ClassUtils.class, Void.TYPE };\r\n    // This used to return the exact same array, but no longer does.\r\n    assertNotSame(noPrimitives, ClassUtils.primitivesToWrappers(noPrimitives), \"unmodified\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ClassUtilsTest.java",
  "methodName" : "testPrimitiveToWrapper",
  "sourceCode" : "@Test\r\nvoid testPrimitiveToWrapper() {\r\n    // test primitive classes\r\n    assertEquals(Boolean.class, ClassUtils.primitiveToWrapper(Boolean.TYPE), \"boolean -> Boolean.class\");\r\n    assertEquals(Byte.class, ClassUtils.primitiveToWrapper(Byte.TYPE), \"byte -> Byte.class\");\r\n    assertEquals(Character.class, ClassUtils.primitiveToWrapper(Character.TYPE), \"char -> Character.class\");\r\n    assertEquals(Short.class, ClassUtils.primitiveToWrapper(Short.TYPE), \"short -> Short.class\");\r\n    assertEquals(Integer.class, ClassUtils.primitiveToWrapper(Integer.TYPE), \"int -> Integer.class\");\r\n    assertEquals(Long.class, ClassUtils.primitiveToWrapper(Long.TYPE), \"long -> Long.class\");\r\n    assertEquals(Double.class, ClassUtils.primitiveToWrapper(Double.TYPE), \"double -> Double.class\");\r\n    assertEquals(Float.class, ClassUtils.primitiveToWrapper(Float.TYPE), \"float -> Float.class\");\r\n    // test a few other classes\r\n    assertEquals(String.class, ClassUtils.primitiveToWrapper(String.class), \"String.class -> String.class\");\r\n    assertEquals(ClassUtils.class, ClassUtils.primitiveToWrapper(ClassUtils.class), \"ClassUtils.class -> ClassUtils.class\");\r\n    assertEquals(Void.TYPE, ClassUtils.primitiveToWrapper(Void.TYPE), \"Void.TYPE -> Void.TYPE\");\r\n    // test null\r\n    assertNull(ClassUtils.primitiveToWrapper(null), \"null -> null\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ClassUtilsTest.java",
  "methodName" : "testShowJavaBug",
  "sourceCode" : "// Show the Java bug: https://bugs.java.com/bugdatabase/view_bug.do?bug_id=4071957\r\n// We may have to delete this if a JDK fixes the bug.\r\n@Test\r\nvoid testShowJavaBug() throws Exception {\r\n    // Tests with Collections$UnmodifiableSet\r\n    final Set<?> set = Collections.unmodifiableSet(new HashSet<>());\r\n    final Method isEmptyMethod = set.getClass().getMethod(\"isEmpty\");\r\n    assertThrows(IllegalAccessException.class, () -> isEmptyMethod.invoke(set));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ClassUtilsTest.java",
  "methodName" : "testToClass_object",
  "sourceCode" : "@Test\r\nvoid testToClass_object() {\r\n    //        assertNull(ClassUtils.toClass(null)); // generates warning\r\n    // equivalent explicit cast\r\n    assertNull(ClassUtils.toClass((Object[]) null));\r\n    // Additional varargs tests\r\n    assertArrayEquals(ArrayUtils.EMPTY_CLASS_ARRAY, ClassUtils.toClass(), \"empty -> empty\");\r\n    // == new Object[]{null}\r\n    final Class<?>[] castNull = ClassUtils.toClass((Object) null);\r\n    assertArrayEquals(new Object[] { null }, castNull, \"(Object) null -> [null]\");\r\n    assertSame(ArrayUtils.EMPTY_CLASS_ARRAY, ClassUtils.toClass(ArrayUtils.EMPTY_OBJECT_ARRAY));\r\n    assertArrayEquals(new Class[] { String.class, Integer.class, Double.class }, ClassUtils.toClass(\"Test\", Integer.valueOf(1), Double.valueOf(99d)));\r\n    assertArrayEquals(new Class[] { String.class, null, Double.class }, ClassUtils.toClass(\"Test\", null, Double.valueOf(99d)));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ClassUtilsTest.java",
  "methodName" : "testWithInterleavingWhitespace",
  "sourceCode" : "@Test\r\nvoid testWithInterleavingWhitespace() throws ClassNotFoundException {\r\n    assertEquals(int[].class, ClassUtils.getClass(\" int [ ] \"));\r\n    assertEquals(long[].class, ClassUtils.getClass(\"\\rlong\\t[\\n]\\r\"));\r\n    assertEquals(short[].class, ClassUtils.getClass(\"\\tshort                \\t\\t[]\"));\r\n    assertEquals(byte[].class, ClassUtils.getClass(\"byte[\\t\\t\\n\\r]   \"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ClassUtilsTest.java",
  "methodName" : "testWrappersToPrimitives",
  "sourceCode" : "@Test\r\nvoid testWrappersToPrimitives() {\r\n    // an array with classes to test\r\n    final Class<?>[] classes = { Boolean.class, Byte.class, Character.class, Short.class, Integer.class, Long.class, Float.class, Double.class, String.class, ClassUtils.class, null };\r\n    final Class<?>[] primitives = ClassUtils.wrappersToPrimitives(classes);\r\n    // now test the result\r\n    assertEquals(classes.length, primitives.length, \"Wrong length of result array\");\r\n    for (int i = 0; i < classes.length; i++) {\r\n        final Class<?> expectedPrimitive = ClassUtils.wrapperToPrimitive(classes[i]);\r\n        assertEquals(expectedPrimitive, primitives[i], classes[i] + \" -> \" + expectedPrimitive);\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ClassUtilsTest.java",
  "methodName" : "testWrappersToPrimitivesEmpty",
  "sourceCode" : "@Test\r\nvoid testWrappersToPrimitivesEmpty() {\r\n    final Class<?>[] empty = new Class[0];\r\n    assertArrayEquals(empty, ClassUtils.wrappersToPrimitives(empty), \"Wrong result for empty input\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ClassUtilsTest.java",
  "methodName" : "testWrappersToPrimitivesNull",
  "sourceCode" : "@Test\r\nvoid testWrappersToPrimitivesNull() {\r\n    //        assertNull(\"Wrong result for null input\", ClassUtils.wrappersToPrimitives(null)); // generates warning\r\n    // equivalent cast\r\n    assertNull(ClassUtils.wrappersToPrimitives((Class<?>[]) null), \"Wrong result for null input\");\r\n    // Other possible casts for null\r\n    assertArrayEquals(ArrayUtils.EMPTY_CLASS_ARRAY, ClassUtils.wrappersToPrimitives(), \"empty -> empty\");\r\n    // == new Class<?>[]{null}\r\n    final Class<?>[] castNull = ClassUtils.wrappersToPrimitives((Class<?>) null);\r\n    assertArrayEquals(new Class<?>[] { null }, castNull, \"(Class<?>) null -> [null]\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ClassUtilsTest.java",
  "methodName" : "testWrapperToPrimitive",
  "sourceCode" : "@Test\r\nvoid testWrapperToPrimitive() {\r\n    // an array with classes to convert\r\n    final Class<?>[] primitives = { Boolean.TYPE, Byte.TYPE, Character.TYPE, Short.TYPE, Integer.TYPE, Long.TYPE, Float.TYPE, Double.TYPE };\r\n    for (final Class<?> primitive : primitives) {\r\n        final Class<?> wrapperCls = ClassUtils.primitiveToWrapper(primitive);\r\n        assertFalse(wrapperCls.isPrimitive(), \"Still primitive\");\r\n        assertEquals(primitive, ClassUtils.wrapperToPrimitive(wrapperCls), wrapperCls + \" -> \" + primitive);\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ClassUtilsTest.java",
  "methodName" : "testWrapperToPrimitiveNoWrapper",
  "sourceCode" : "@Test\r\nvoid testWrapperToPrimitiveNoWrapper() {\r\n    assertNull(ClassUtils.wrapperToPrimitive(String.class), \"Wrong result for non wrapper class\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ClassUtilsTest.java",
  "methodName" : "testWrapperToPrimitiveNull",
  "sourceCode" : "@Test\r\nvoid testWrapperToPrimitiveNull() {\r\n    assertNull(ClassUtils.wrapperToPrimitive(null), \"Wrong result for null class\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\compare\\ComparableUtilsTest.java",
  "methodName" : "between_returns_false",
  "sourceCode" : "@Test\r\nvoid between_returns_false() {\r\n    assertFalse(ComparableUtils.is(a).between(b, c));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\compare\\ComparableUtilsTest.java",
  "methodName" : "betweenExclusive_returns_false",
  "sourceCode" : "@Test\r\nvoid betweenExclusive_returns_false() {\r\n    assertFalse(ComparableUtils.is(a).betweenExclusive(b, c));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\compare\\ComparableUtilsTest.java",
  "methodName" : "static_between_returns_false",
  "sourceCode" : "@Test\r\nvoid static_between_returns_false() {\r\n    assertFalse(ComparableUtils.between(b, c).test(a));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\compare\\ComparableUtilsTest.java",
  "methodName" : "static_betweenExclusive_returns_false",
  "sourceCode" : "@Test\r\nvoid static_betweenExclusive_returns_false() {\r\n    assertFalse(ComparableUtils.betweenExclusive(b, c).test(a));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\compare\\ComparableUtilsTest.java",
  "methodName" : "between_returns_true",
  "sourceCode" : "@Test\r\nvoid between_returns_true() {\r\n    assertTrue(ComparableUtils.is(a).between(b, c));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\compare\\ComparableUtilsTest.java",
  "methodName" : "betweenExclusive_returns_false",
  "sourceCode" : "@Test\r\nvoid betweenExclusive_returns_false() {\r\n    assertFalse(ComparableUtils.is(a).betweenExclusive(b, c));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\compare\\ComparableUtilsTest.java",
  "methodName" : "static_between_returns_true",
  "sourceCode" : "@Test\r\nvoid static_between_returns_true() {\r\n    assertTrue(ComparableUtils.between(b, c).test(a));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\compare\\ComparableUtilsTest.java",
  "methodName" : "static_betweenExclusive_returns_false",
  "sourceCode" : "@Test\r\nvoid static_betweenExclusive_returns_false() {\r\n    assertFalse(ComparableUtils.betweenExclusive(b, c).test(a));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\compare\\ComparableUtilsTest.java",
  "methodName" : "between_returns_true",
  "sourceCode" : "@Test\r\nvoid between_returns_true() {\r\n    assertTrue(ComparableUtils.is(a).between(b, c));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\compare\\ComparableUtilsTest.java",
  "methodName" : "betweenExclusive_returns_true",
  "sourceCode" : "@Test\r\nvoid betweenExclusive_returns_true() {\r\n    assertTrue(ComparableUtils.is(a).betweenExclusive(b, c));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\compare\\ComparableUtilsTest.java",
  "methodName" : "static_between_returns_true",
  "sourceCode" : "@Test\r\nvoid static_between_returns_true() {\r\n    assertTrue(ComparableUtils.between(b, c).test(a));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\compare\\ComparableUtilsTest.java",
  "methodName" : "static_betweenExclusive_returns_true",
  "sourceCode" : "@Test\r\nvoid static_betweenExclusive_returns_true() {\r\n    assertTrue(ComparableUtils.betweenExclusive(b, c).test(a));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\compare\\ComparableUtilsTest.java",
  "methodName" : "equalTo_returns_false",
  "sourceCode" : "@Test\r\nvoid equalTo_returns_false() {\r\n    assertFalse(ComparableUtils.is(a).equalTo(b));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\compare\\ComparableUtilsTest.java",
  "methodName" : "greaterThan_returns_true",
  "sourceCode" : "@Test\r\nvoid greaterThan_returns_true() {\r\n    assertTrue(ComparableUtils.is(a).greaterThan(b));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\compare\\ComparableUtilsTest.java",
  "methodName" : "greaterThanOrEqualTo_returns_true",
  "sourceCode" : "@Test\r\nvoid greaterThanOrEqualTo_returns_true() {\r\n    assertTrue(ComparableUtils.is(a).greaterThanOrEqualTo(b));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\compare\\ComparableUtilsTest.java",
  "methodName" : "lessThan_returns_false",
  "sourceCode" : "@Test\r\nvoid lessThan_returns_false() {\r\n    assertFalse(ComparableUtils.is(a).lessThan(b));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\compare\\ComparableUtilsTest.java",
  "methodName" : "lessThanOrEqualTo_returns_false",
  "sourceCode" : "@Test\r\nvoid lessThanOrEqualTo_returns_false() {\r\n    assertFalse(ComparableUtils.is(a).lessThanOrEqualTo(b));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\compare\\ComparableUtilsTest.java",
  "methodName" : "static_ge_returns_true",
  "sourceCode" : "@Test\r\nvoid static_ge_returns_true() {\r\n    assertTrue(ComparableUtils.ge(b).test(a));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\compare\\ComparableUtilsTest.java",
  "methodName" : "static_gt_returns_true",
  "sourceCode" : "@Test\r\nvoid static_gt_returns_true() {\r\n    assertTrue(ComparableUtils.gt(b).test(a));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\compare\\ComparableUtilsTest.java",
  "methodName" : "static_le_returns_false",
  "sourceCode" : "@Test\r\nvoid static_le_returns_false() {\r\n    assertFalse(ComparableUtils.le(b).test(a));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\compare\\ComparableUtilsTest.java",
  "methodName" : "static_lt_returns_false",
  "sourceCode" : "@Test\r\nvoid static_lt_returns_false() {\r\n    assertFalse(ComparableUtils.lt(b).test(a));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\compare\\ComparableUtilsTest.java",
  "methodName" : "between_returns_true",
  "sourceCode" : "@Test\r\nvoid between_returns_true() {\r\n    assertTrue(ComparableUtils.is(a).between(b, c));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\compare\\ComparableUtilsTest.java",
  "methodName" : "betweenExclusive_returns_false",
  "sourceCode" : "@Test\r\nvoid betweenExclusive_returns_false() {\r\n    assertFalse(ComparableUtils.is(a).betweenExclusive(b, c));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\compare\\ComparableUtilsTest.java",
  "methodName" : "static_between_returns_true",
  "sourceCode" : "@Test\r\nvoid static_between_returns_true() {\r\n    assertTrue(ComparableUtils.between(b, c).test(a));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\compare\\ComparableUtilsTest.java",
  "methodName" : "static_betweenExclusive_returns_false",
  "sourceCode" : "@Test\r\nvoid static_betweenExclusive_returns_false() {\r\n    assertFalse(ComparableUtils.betweenExclusive(b, c).test(a));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\compare\\ComparableUtilsTest.java",
  "methodName" : "between_returns_true",
  "sourceCode" : "@Test\r\nvoid between_returns_true() {\r\n    assertTrue(ComparableUtils.is(a).between(b, c));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\compare\\ComparableUtilsTest.java",
  "methodName" : "betweenExclusive_returns_false",
  "sourceCode" : "@Test\r\nvoid betweenExclusive_returns_false() {\r\n    assertFalse(ComparableUtils.is(a).betweenExclusive(b, c));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\compare\\ComparableUtilsTest.java",
  "methodName" : "static_between_returns_true",
  "sourceCode" : "@Test\r\nvoid static_between_returns_true() {\r\n    assertTrue(ComparableUtils.between(b, c).test(a));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\compare\\ComparableUtilsTest.java",
  "methodName" : "static_betweenExclusive_returns_false",
  "sourceCode" : "@Test\r\nvoid static_betweenExclusive_returns_false() {\r\n    assertFalse(ComparableUtils.betweenExclusive(b, c).test(a));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\compare\\ComparableUtilsTest.java",
  "methodName" : "between_returns_true",
  "sourceCode" : "@Test\r\nvoid between_returns_true() {\r\n    assertTrue(ComparableUtils.is(a).between(b, c));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\compare\\ComparableUtilsTest.java",
  "methodName" : "betweenExclusive_returns_false",
  "sourceCode" : "@Test\r\nvoid betweenExclusive_returns_false() {\r\n    assertFalse(ComparableUtils.is(a).betweenExclusive(b, c));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\compare\\ComparableUtilsTest.java",
  "methodName" : "static_between_returns_true",
  "sourceCode" : "@Test\r\nvoid static_between_returns_true() {\r\n    assertTrue(ComparableUtils.between(b, c).test(a));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\compare\\ComparableUtilsTest.java",
  "methodName" : "static_betweenExclusive_returns_false",
  "sourceCode" : "@Test\r\nvoid static_betweenExclusive_returns_false() {\r\n    assertFalse(ComparableUtils.betweenExclusive(b, c).test(a));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\compare\\ComparableUtilsTest.java",
  "methodName" : "equalTo_returns_true",
  "sourceCode" : "@Test\r\nvoid equalTo_returns_true() {\r\n    assertTrue(ComparableUtils.is(a).equalTo(b));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\compare\\ComparableUtilsTest.java",
  "methodName" : "greaterThan_returns_false",
  "sourceCode" : "@Test\r\nvoid greaterThan_returns_false() {\r\n    assertFalse(ComparableUtils.is(a).greaterThan(b));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\compare\\ComparableUtilsTest.java",
  "methodName" : "greaterThanOrEqualTo_returns_true",
  "sourceCode" : "@Test\r\nvoid greaterThanOrEqualTo_returns_true() {\r\n    assertTrue(ComparableUtils.is(a).greaterThanOrEqualTo(b));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\compare\\ComparableUtilsTest.java",
  "methodName" : "lessThan_returns_false",
  "sourceCode" : "@Test\r\nvoid lessThan_returns_false() {\r\n    assertFalse(ComparableUtils.is(a).lessThan(b));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\compare\\ComparableUtilsTest.java",
  "methodName" : "lessThanOrEqualTo_returns_true",
  "sourceCode" : "@Test\r\nvoid lessThanOrEqualTo_returns_true() {\r\n    assertTrue(ComparableUtils.is(a).lessThanOrEqualTo(b));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\compare\\ComparableUtilsTest.java",
  "methodName" : "static_ge_returns_true",
  "sourceCode" : "@Test\r\nvoid static_ge_returns_true() {\r\n    assertTrue(ComparableUtils.ge(b).test(a));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\compare\\ComparableUtilsTest.java",
  "methodName" : "static_gt_returns_false",
  "sourceCode" : "@Test\r\nvoid static_gt_returns_false() {\r\n    assertFalse(ComparableUtils.gt(b).test(a));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\compare\\ComparableUtilsTest.java",
  "methodName" : "static_le_returns_true",
  "sourceCode" : "@Test\r\nvoid static_le_returns_true() {\r\n    assertTrue(ComparableUtils.le(b).test(a));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\compare\\ComparableUtilsTest.java",
  "methodName" : "static_lt_returns_false",
  "sourceCode" : "@Test\r\nvoid static_lt_returns_false() {\r\n    assertFalse(ComparableUtils.lt(b).test(a));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\compare\\ComparableUtilsTest.java",
  "methodName" : "between_returns_true",
  "sourceCode" : "@Test\r\nvoid between_returns_true() {\r\n    assertTrue(ComparableUtils.is(a).between(b, c));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\compare\\ComparableUtilsTest.java",
  "methodName" : "betweenExclusive_returns_true",
  "sourceCode" : "@Test\r\nvoid betweenExclusive_returns_true() {\r\n    assertTrue(ComparableUtils.is(a).betweenExclusive(b, c));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\compare\\ComparableUtilsTest.java",
  "methodName" : "static_between_returns_true",
  "sourceCode" : "@Test\r\nvoid static_between_returns_true() {\r\n    assertTrue(ComparableUtils.between(b, c).test(a));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\compare\\ComparableUtilsTest.java",
  "methodName" : "static_betweenExclusive_returns_true",
  "sourceCode" : "@Test\r\nvoid static_betweenExclusive_returns_true() {\r\n    assertTrue(ComparableUtils.betweenExclusive(b, c).test(a));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\compare\\ComparableUtilsTest.java",
  "methodName" : "between_returns_true",
  "sourceCode" : "@Test\r\nvoid between_returns_true() {\r\n    assertTrue(ComparableUtils.is(a).between(b, c));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\compare\\ComparableUtilsTest.java",
  "methodName" : "betweenExclusive_returns_false",
  "sourceCode" : "@Test\r\nvoid betweenExclusive_returns_false() {\r\n    assertFalse(ComparableUtils.is(a).betweenExclusive(b, c));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\compare\\ComparableUtilsTest.java",
  "methodName" : "static_between_returns_true",
  "sourceCode" : "@Test\r\nvoid static_between_returns_true() {\r\n    assertTrue(ComparableUtils.between(b, c).test(a));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\compare\\ComparableUtilsTest.java",
  "methodName" : "static_betweenExclusive_returns_false",
  "sourceCode" : "@Test\r\nvoid static_betweenExclusive_returns_false() {\r\n    assertFalse(ComparableUtils.betweenExclusive(b, c).test(a));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\compare\\ComparableUtilsTest.java",
  "methodName" : "between_returns_false",
  "sourceCode" : "@Test\r\nvoid between_returns_false() {\r\n    assertFalse(ComparableUtils.is(a).between(b, c));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\compare\\ComparableUtilsTest.java",
  "methodName" : "betweenExclusive_returns_false",
  "sourceCode" : "@Test\r\nvoid betweenExclusive_returns_false() {\r\n    assertFalse(ComparableUtils.is(a).betweenExclusive(b, c));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\compare\\ComparableUtilsTest.java",
  "methodName" : "static_between_returns_false",
  "sourceCode" : "@Test\r\nvoid static_between_returns_false() {\r\n    assertFalse(ComparableUtils.between(b, c).test(a));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\compare\\ComparableUtilsTest.java",
  "methodName" : "static_betweenExclusive_returns_false",
  "sourceCode" : "@Test\r\nvoid static_betweenExclusive_returns_false() {\r\n    assertFalse(ComparableUtils.betweenExclusive(b, c).test(a));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\compare\\ComparableUtilsTest.java",
  "methodName" : "equalTo_returns_false",
  "sourceCode" : "@Test\r\nvoid equalTo_returns_false() {\r\n    assertFalse(ComparableUtils.is(a).equalTo(b));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\compare\\ComparableUtilsTest.java",
  "methodName" : "greaterThan_returns_false",
  "sourceCode" : "@Test\r\nvoid greaterThan_returns_false() {\r\n    assertFalse(ComparableUtils.is(a).greaterThan(b));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\compare\\ComparableUtilsTest.java",
  "methodName" : "greaterThanOrEqualTo_returns_false",
  "sourceCode" : "@Test\r\nvoid greaterThanOrEqualTo_returns_false() {\r\n    assertFalse(ComparableUtils.is(a).greaterThanOrEqualTo(b));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\compare\\ComparableUtilsTest.java",
  "methodName" : "lessThan_returns_true",
  "sourceCode" : "@Test\r\nvoid lessThan_returns_true() {\r\n    assertTrue(ComparableUtils.is(a).lessThan(b));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\compare\\ComparableUtilsTest.java",
  "methodName" : "lessThanOrEqualTo_returns_true",
  "sourceCode" : "@Test\r\nvoid lessThanOrEqualTo_returns_true() {\r\n    assertTrue(ComparableUtils.is(a).lessThanOrEqualTo(b));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\compare\\ComparableUtilsTest.java",
  "methodName" : "static_ge_returns_false",
  "sourceCode" : "@Test\r\nvoid static_ge_returns_false() {\r\n    assertFalse(ComparableUtils.ge(b).test(a));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\compare\\ComparableUtilsTest.java",
  "methodName" : "static_gt_returns_false",
  "sourceCode" : "@Test\r\nvoid static_gt_returns_false() {\r\n    assertFalse(ComparableUtils.gt(b).test(a));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\compare\\ComparableUtilsTest.java",
  "methodName" : "static_le_returns_true",
  "sourceCode" : "@Test\r\nvoid static_le_returns_true() {\r\n    assertTrue(ComparableUtils.le(b).test(a));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\compare\\ComparableUtilsTest.java",
  "methodName" : "static_lt_returns_true",
  "sourceCode" : "@Test\r\nvoid static_lt_returns_true() {\r\n    assertTrue(ComparableUtils.lt(b).test(a));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\compare\\ComparableUtilsTest.java",
  "methodName" : "testIsEqualTo",
  "sourceCode" : "@Test\r\nvoid testIsEqualTo() {\r\n    assertNullPointerException(() -> ComparableUtils.is(\"a\").equalTo(null));\r\n    assertFalse(ComparableUtils.is(new MyComparable(1)).equalTo(null));\r\n    assertFalse(ComparableUtils.is((String) null).equalTo(\"a\"));\r\n    assertTrue(ComparableUtils.is(\"a\").equalTo(\"a\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\compare\\ComparableUtilsTest.java",
  "methodName" : "testIsGreaterThan",
  "sourceCode" : "@Test\r\nvoid testIsGreaterThan() {\r\n    assertNullPointerException(() -> ComparableUtils.is(\"a\").greaterThan(null));\r\n    assertTrue(ComparableUtils.is(new MyComparable(1)).greaterThan(null));\r\n    assertFalse(ComparableUtils.is((String) null).greaterThan(\"a\"));\r\n    assertFalse(ComparableUtils.is(\"a\").greaterThan(\"a\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\compare\\ComparableUtilsTest.java",
  "methodName" : "testIsGreaterThanOrEqualTo",
  "sourceCode" : "@Test\r\nvoid testIsGreaterThanOrEqualTo() {\r\n    assertNullPointerException(() -> ComparableUtils.is(\"a\").greaterThanOrEqualTo(null));\r\n    assertTrue(ComparableUtils.is(new MyComparable(1)).greaterThanOrEqualTo(null));\r\n    assertFalse(ComparableUtils.is((String) null).greaterThanOrEqualTo(\"a\"));\r\n    assertTrue(ComparableUtils.is(\"a\").greaterThanOrEqualTo(\"a\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\compare\\ComparableUtilsTest.java",
  "methodName" : "testIsLessThan",
  "sourceCode" : "@Test\r\nvoid testIsLessThan() {\r\n    assertNullPointerException(() -> ComparableUtils.is(\"a\").lessThan(null));\r\n    assertFalse(ComparableUtils.is(new MyComparable(1)).lessThan(null));\r\n    assertFalse(ComparableUtils.is((String) null).lessThan(\"a\"));\r\n    assertFalse(ComparableUtils.is(\"a\").lessThan(\"a\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\compare\\ComparableUtilsTest.java",
  "methodName" : "testIsLessThanOrEqualTo",
  "sourceCode" : "@Test\r\nvoid testIsLessThanOrEqualTo() {\r\n    assertNullPointerException(() -> ComparableUtils.is(\"a\").greaterThanOrEqualTo(null));\r\n    assertTrue(ComparableUtils.is(new MyComparable(1)).greaterThanOrEqualTo(null));\r\n    assertFalse(ComparableUtils.is((String) null).lessThanOrEqualTo(\"a\"));\r\n    assertTrue(ComparableUtils.is(\"a\").lessThanOrEqualTo(\"a\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\compare\\ComparableUtilsTest.java",
  "methodName" : "testMax",
  "sourceCode" : "@Test\r\nvoid testMax() {\r\n    assertEquals(Instant.MAX, ComparableUtils.max(Instant.MAX, Instant.MAX));\r\n    assertEquals(Instant.MIN, ComparableUtils.max(Instant.MIN, Instant.MIN));\r\n    assertEquals(Instant.MAX, ComparableUtils.max(Instant.MIN, Instant.MAX));\r\n    assertEquals(Instant.MAX, ComparableUtils.max(Instant.MAX, Instant.MIN));\r\n    //\r\n    assertEquals(Integer.MIN_VALUE, ComparableUtils.max(Integer.valueOf(Integer.MIN_VALUE), Integer.valueOf(Integer.MIN_VALUE)));\r\n    assertEquals(Integer.MAX_VALUE, ComparableUtils.max(Integer.valueOf(Integer.MAX_VALUE), Integer.valueOf(Integer.MAX_VALUE)));\r\n    assertEquals(Integer.MAX_VALUE, ComparableUtils.max(Integer.valueOf(Integer.MIN_VALUE), Integer.valueOf(Integer.MAX_VALUE)));\r\n    assertEquals(Integer.MAX_VALUE, ComparableUtils.max(Integer.valueOf(Integer.MAX_VALUE), Integer.valueOf(Integer.MIN_VALUE)));\r\n    //\r\n    assertEquals(Instant.MAX, ComparableUtils.max(null, Instant.MAX));\r\n    assertEquals(Instant.MAX, ComparableUtils.max(Instant.MAX, null));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\compare\\ComparableUtilsTest.java",
  "methodName" : "testMin",
  "sourceCode" : "@Test\r\nvoid testMin() {\r\n    assertEquals(Instant.MAX, ComparableUtils.min(Instant.MAX, Instant.MAX));\r\n    assertEquals(Instant.MIN, ComparableUtils.min(Instant.MIN, Instant.MIN));\r\n    assertEquals(Instant.MIN, ComparableUtils.min(Instant.MIN, Instant.MAX));\r\n    assertEquals(Instant.MIN, ComparableUtils.min(Instant.MAX, Instant.MIN));\r\n    //\r\n    assertEquals(Integer.MIN_VALUE, ComparableUtils.min(Integer.valueOf(Integer.MIN_VALUE), Integer.valueOf(Integer.MIN_VALUE)));\r\n    assertEquals(Integer.MAX_VALUE, ComparableUtils.min(Integer.valueOf(Integer.MAX_VALUE), Integer.valueOf(Integer.MAX_VALUE)));\r\n    assertEquals(Integer.MIN_VALUE, ComparableUtils.min(Integer.valueOf(Integer.MIN_VALUE), Integer.valueOf(Integer.MAX_VALUE)));\r\n    assertEquals(Integer.MIN_VALUE, ComparableUtils.min(Integer.valueOf(Integer.MAX_VALUE), Integer.valueOf(Integer.MIN_VALUE)));\r\n    //\r\n    assertEquals(Instant.MAX, ComparableUtils.min(null, Instant.MAX));\r\n    assertEquals(Instant.MAX, ComparableUtils.min(Instant.MAX, null));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\compare\\ObjectToStringComparatorTest.java",
  "methodName" : "testNull",
  "sourceCode" : "@Test\r\nvoid testNull() {\r\n    final List<Thing> things = Arrays.asList(null, new Thing(\"y\"), null);\r\n    things.sort(ObjectToStringComparator.INSTANCE);\r\n    assertEquals(\"y\", things.get(0).string);\r\n    assertNull(things.get(1));\r\n    assertNull(things.get(2));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\compare\\ObjectToStringComparatorTest.java",
  "methodName" : "testNullToString",
  "sourceCode" : "@Test\r\nvoid testNullToString() {\r\n    final List<Thing> things = Arrays.asList(new Thing(null), new Thing(\"y\"), new Thing(null));\r\n    things.sort(ObjectToStringComparator.INSTANCE);\r\n    assertEquals(\"y\", things.get(0).string);\r\n    assertNull(things.get(1).string);\r\n    assertNull(things.get(2).string);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\compare\\ObjectToStringComparatorTest.java",
  "methodName" : "testSortCollection",
  "sourceCode" : "@Test\r\nvoid testSortCollection() {\r\n    final List<Thing> things = Arrays.asList(new Thing(\"z\"), new Thing(\"y\"), new Thing(\"x\"));\r\n    things.sort(ObjectToStringComparator.INSTANCE);\r\n    assertEquals(\"x\", things.get(0).string);\r\n    assertEquals(\"y\", things.get(1).string);\r\n    assertEquals(\"z\", things.get(2).string);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\concurrent\\AbstractConcurrentInitializerCloseAndExceptionsTest.java",
  "methodName" : "testCloserThrowsCheckedException",
  "sourceCode" : "/**\r\n * This method tests that if AbstractConcurrentInitializer.close catches a\r\n * ConcurrentException it will rethrow it wrapped in a ConcurrentException\r\n */\r\n@SuppressWarnings(\"rawtypes\")\r\n@Test\r\nvoid testCloserThrowsCheckedException() throws ConcurrentException {\r\n    final ConcurrentInitializer<CloseableObject> initializer = createInitializerThatThrowsException(CloseableObject::new, CloseableObject -> methodThatThrowsException(ExceptionToThrow.IOException));\r\n    try {\r\n        initializer.get();\r\n        ((AbstractConcurrentInitializer) initializer).close();\r\n        fail();\r\n    } catch (final Exception e) {\r\n        assertInstanceOf(ConcurrentException.class, e);\r\n        assertInstanceOf(IOException.class, e.getCause());\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\concurrent\\AbstractConcurrentInitializerCloseAndExceptionsTest.java",
  "methodName" : "testCloserThrowsRuntimeException",
  "sourceCode" : "/**\r\n * This method tests that if AbstractConcurrentInitializer.close catches a\r\n * RuntimeException it will throw it without wrapping it in a ConcurrentException\r\n */\r\n@SuppressWarnings(\"rawtypes\")\r\n@Test\r\nvoid testCloserThrowsRuntimeException() throws ConcurrentException {\r\n    final ConcurrentInitializer<CloseableObject> initializer = createInitializerThatThrowsException(CloseableObject::new, CloseableObject -> methodThatThrowsException(ExceptionToThrow.NullPointerException));\r\n    initializer.get();\r\n    assertNullPointerException(() -> {\r\n        ((AbstractConcurrentInitializer) initializer).close();\r\n    });\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\concurrent\\AbstractConcurrentInitializerCloseAndExceptionsTest.java",
  "methodName" : "testSupplierThrowsCheckedException",
  "sourceCode" : "/**\r\n * This method tests that if AbstractConcurrentInitializer.initialize catches a checked\r\n * exception it will rethrow it wrapped in a ConcurrentException\r\n */\r\n//for NOP\r\n@SuppressWarnings(\"unchecked\")\r\n@Test\r\nvoid testSupplierThrowsCheckedException() {\r\n    final ConcurrentInitializer<CloseableObject> initializer = createInitializerThatThrowsException(() -> methodThatThrowsException(ExceptionToThrow.IOException), FailableConsumer.NOP);\r\n    assertThrows(ConcurrentException.class, () -> initializer.get());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\concurrent\\AbstractConcurrentInitializerCloseAndExceptionsTest.java",
  "methodName" : "testSupplierThrowsConcurrentException",
  "sourceCode" : "/**\r\n * This method tests that if a AbstractConcurrentInitializer.initialize method catches a\r\n * ConcurrentException it will rethrow it without wrapping it.\r\n */\r\n@Test\r\nvoid testSupplierThrowsConcurrentException() {\r\n    final ConcurrentException concurrentException = new ConcurrentException();\r\n    @SuppressWarnings(\"unchecked\")\r\n    final ConcurrentInitializer<CloseableObject> initializer = createInitializerThatThrowsException(() -> {\r\n        if (\"test\".equals(\"test\")) {\r\n            throw concurrentException;\r\n        }\r\n        return new CloseableObject();\r\n    }, FailableConsumer.NOP);\r\n    try {\r\n        initializer.get();\r\n        fail();\r\n    } catch (final ConcurrentException e) {\r\n        assertEquals(concurrentException, e);\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\concurrent\\AbstractConcurrentInitializerCloseAndExceptionsTest.java",
  "methodName" : "testSupplierThrowsRuntimeException",
  "sourceCode" : "/**\r\n * This method tests that if AbstractConcurrentInitializer.initialize catches a runtime exception\r\n * it will not be wrapped in a ConcurrentException\r\n */\r\n@SuppressWarnings(\"unchecked\")\r\n@Test\r\nvoid testSupplierThrowsRuntimeException() {\r\n    final ConcurrentInitializer<CloseableObject> initializer = createInitializerThatThrowsException(() -> methodThatThrowsException(ExceptionToThrow.NullPointerException), FailableConsumer.NOP);\r\n    assertNullPointerException(() -> initializer.get());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\concurrent\\AbstractConcurrentInitializerCloseAndExceptionsTest.java",
  "methodName" : "testWorkingCloser",
  "sourceCode" : "/**\r\n * This method tests that if AbstractConcurrentInitializer.close actually closes the wrapped object\r\n */\r\n@SuppressWarnings(\"rawtypes\")\r\n@Test\r\nvoid testWorkingCloser() throws Exception {\r\n    final ConcurrentInitializer<CloseableObject> initializer = createInitializerThatThrowsException(CloseableObject::new, CloseableObject::close);\r\n    final CloseableObject closeableObject = initializer.get();\r\n    assertFalse(closeableObject.isClosed());\r\n    ((AbstractConcurrentInitializer) initializer).close();\r\n    assertTrue(closeableObject.isClosed());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\concurrent\\AbstractConcurrentInitializerTest.java",
  "methodName" : "testGet",
  "sourceCode" : "/**\r\n * Tests a simple invocation of the get() method.\r\n *\r\n * @throws org.apache.commons.lang3.concurrent.ConcurrentException because the object under test may throw it.\r\n */\r\n@Test\r\nvoid testGet() throws ConcurrentException {\r\n    assertNotNull(createInitializer().get(), \"No managed object\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\concurrent\\AbstractConcurrentInitializerTest.java",
  "methodName" : "testGetConcurrent",
  "sourceCode" : "/**\r\n * Tests whether get() can be invoked from multiple threads concurrently. Always the same object should be returned.\r\n *\r\n * @throws org.apache.commons.lang3.concurrent.ConcurrentException because the object under test may throw it.\r\n * @throws InterruptedException                                    because the threading API my throw it.\r\n */\r\n@Test\r\nvoid testGetConcurrent() throws ConcurrentException, InterruptedException {\r\n    final ConcurrentInitializer<T> initializer = createInitializer();\r\n    final int threadCount = 20;\r\n    final CountDownLatch startLatch = new CountDownLatch(1);\r\n    final GetThread[] threads = new GetThread[threadCount];\r\n    for (int i = 0; i < threadCount; i++) {\r\n        threads[i] = new GetThread(startLatch, initializer);\r\n        threads[i].start();\r\n    }\r\n    // fire all threads and wait until they are ready\r\n    startLatch.countDown();\r\n    for (final Thread t : threads) {\r\n        t.join();\r\n    }\r\n    // check results\r\n    final Object managedObject = initializer.get();\r\n    for (final GetThread t : threads) {\r\n        assertEquals(managedObject, t.object, \"Wrong object\");\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\concurrent\\AbstractConcurrentInitializerTest.java",
  "methodName" : "testGetMultipleTimes",
  "sourceCode" : "/**\r\n * Tests whether sequential get() invocations always return the same instance.\r\n *\r\n * @throws org.apache.commons.lang3.concurrent.ConcurrentException because the object under test may throw it.\r\n */\r\n@Test\r\nvoid testGetMultipleTimes() throws ConcurrentException {\r\n    final ConcurrentInitializer<T> initializer = createInitializer();\r\n    final Object obj = initializer.get();\r\n    for (int i = 0; i < 10; i++) {\r\n        assertEquals(obj, initializer.get(), \"Got different object at \" + i);\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\concurrent\\AbstractConcurrentInitializerTest.java",
  "methodName" : "testisInitialized",
  "sourceCode" : "/**\r\n * Tests a simple invocation of the isInitialized() method.\r\n *\r\n * @throws Throwable on test failure.\r\n */\r\n@Test\r\nvoid testisInitialized() throws Throwable {\r\n    final ConcurrentInitializer<T> initializer = createInitializer();\r\n    if (initializer instanceof AbstractConcurrentInitializer) {\r\n        @SuppressWarnings(\"unchecked\")\r\n        final AbstractConcurrentInitializer<T, Exception> castedInitializer = (AbstractConcurrentInitializer<T, Exception>) initializer;\r\n        assertFalse(castedInitializer.isInitialized(), \"was initialized before get()\");\r\n        assertNotNull(castedInitializer.get(), \"No managed object\");\r\n        assertTrue(castedInitializer.isInitialized(), \"was not initialized after get()\");\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\concurrent\\AtomicInitializerNonObjectTest.java",
  "methodName" : "testGetThatReturnsNullFirstTime",
  "sourceCode" : "@Test\r\nvoid testGetThatReturnsNullFirstTime() throws ConcurrentException {\r\n    final AtomicInitializer<Integer> initializer = new AtomicInitializer<Integer>() {\r\n\r\n        final AtomicInteger firstRun = new AtomicInteger(1);\r\n\r\n        @Override\r\n        protected Integer initialize() {\r\n            if (firstRun.getAndSet(0) == 1) {\r\n                return null;\r\n            }\r\n            return Integer.valueOf(0);\r\n        }\r\n    };\r\n    assertNull(initializer.get());\r\n    assertNull(initializer.get());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\concurrent\\AtomicInitializerObjectTest.java",
  "methodName" : "testGetThatReturnsNullFirstTime",
  "sourceCode" : "@Test\r\nvoid testGetThatReturnsNullFirstTime() throws ConcurrentException {\r\n    final AtomicInitializer<Object> initializer = new AtomicInitializer<Object>() {\r\n\r\n        final AtomicBoolean firstRun = new AtomicBoolean(true);\r\n\r\n        @Override\r\n        protected Object initialize() {\r\n            if (firstRun.getAndSet(false)) {\r\n                return null;\r\n            }\r\n            return new Object();\r\n        }\r\n    };\r\n    assertNull(initializer.get());\r\n    assertNull(initializer.get());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\concurrent\\AtomicSafeInitializerSupplierTest.java",
  "methodName" : "testGetThatReturnsNullFirstTime",
  "sourceCode" : "@Test\r\nvoid testGetThatReturnsNullFirstTime() throws ConcurrentException {\r\n    final AtomicSafeInitializer<Object> initializer = new AtomicSafeInitializer<Object>() {\r\n\r\n        final AtomicBoolean firstRun = new AtomicBoolean(true);\r\n\r\n        @Override\r\n        protected Object initialize() {\r\n            if (firstRun.getAndSet(false)) {\r\n                return null;\r\n            }\r\n            return new Object();\r\n        }\r\n    };\r\n    assertNull(initializer.get());\r\n    assertNull(initializer.get());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\concurrent\\AtomicSafeInitializerSupplierTest.java",
  "methodName" : "testNumberOfInitializeInvocations",
  "sourceCode" : "/**\r\n * Tests that initialize() is called only once.\r\n *\r\n * @throws org.apache.commons.lang3.concurrent.ConcurrentException because {@link #testGetConcurrent()} may throw it\r\n * @throws InterruptedException because {@link #testGetConcurrent()} may throw it\r\n */\r\n@Test\r\nvoid testNumberOfInitializeInvocations() throws ConcurrentException, InterruptedException {\r\n    testGetConcurrent();\r\n    assertEquals(1, initCounter.get(), \"Wrong number of invocations\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\concurrent\\AtomicSafeInitializerTest.java",
  "methodName" : "testGetThatReturnsNullFirstTime",
  "sourceCode" : "@Test\r\nvoid testGetThatReturnsNullFirstTime() throws ConcurrentException {\r\n    final AtomicSafeInitializer<Object> initializer = new AtomicSafeInitializer<Object>() {\r\n\r\n        final AtomicBoolean firstRun = new AtomicBoolean(true);\r\n\r\n        @Override\r\n        protected Object initialize() {\r\n            if (firstRun.getAndSet(false)) {\r\n                return null;\r\n            }\r\n            return new Object();\r\n        }\r\n    };\r\n    assertNull(initializer.get());\r\n    assertNull(initializer.get());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\concurrent\\AtomicSafeInitializerTest.java",
  "methodName" : "testInitializerThrowsChecked",
  "sourceCode" : "@ParameterizedTest\r\n@ValueSource(classes = { IOException.class, Exception.class, FileSystemException.class, ReflectiveOperationException.class, ConcurrentException.class })\r\n@Timeout(value = 5, unit = TimeUnit.SECONDS, threadMode = ThreadMode.SAME_THREAD)\r\nvoid testInitializerThrowsChecked(final Class<Exception> throwableClass) throws ConcurrentException {\r\n    final String message = \"Initializing\";\r\n    final AtomicSafeInitializer<Object> asi = AtomicSafeInitializer.builder().setInitializer(() -> {\r\n        throw throwableClass.getConstructor(String.class).newInstance(message);\r\n    }).get();\r\n    final String expected = throwableClass.getSimpleName() + \": \" + message;\r\n    assertEquals(expected, ExceptionUtils.getRootCauseMessage(assertThrows(ConcurrentException.class, asi::get)));\r\n    assertEquals(expected, ExceptionUtils.getRootCauseMessage(assertThrows(ConcurrentException.class, asi::get)));\r\n}",
  "annotations" : [ "ParameterizedTest" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\concurrent\\AtomicSafeInitializerTest.java",
  "methodName" : "testInitializerThrowsUnchecked",
  "sourceCode" : "@ParameterizedTest\r\n@ValueSource(classes = { IllegalStateException.class, IllegalArgumentException.class, NullPointerException.class, RuntimeException.class })\r\n@Timeout(value = 5, unit = TimeUnit.SECONDS, threadMode = ThreadMode.SAME_THREAD)\r\nvoid testInitializerThrowsUnchecked(final Class<Exception> throwableClass) throws ConcurrentException {\r\n    final String message = \"Initializing\";\r\n    final AtomicSafeInitializer<Object> asi = AtomicSafeInitializer.builder().setInitializer(() -> {\r\n        throw throwableClass.getConstructor(String.class).newInstance(message);\r\n    }).get();\r\n    assertEquals(message, assertThrows(throwableClass, asi::get).getMessage());\r\n    assertEquals(message, assertThrows(throwableClass, asi::get).getMessage());\r\n}",
  "annotations" : [ "ParameterizedTest" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\concurrent\\AtomicSafeInitializerTest.java",
  "methodName" : "testNumberOfInitializeInvocations",
  "sourceCode" : "/**\r\n * Tests that initialize() is called only once.\r\n *\r\n * @throws org.apache.commons.lang3.concurrent.ConcurrentException because {@link #testGetConcurrent()} may throw it.\r\n * @throws InterruptedException                                    because {@link #testGetConcurrent()} may throw it.\r\n */\r\n@Test\r\nvoid testNumberOfInitializeInvocations() throws ConcurrentException, InterruptedException {\r\n    testGetConcurrent();\r\n    assertEquals(1, initializer.initCounter.get(), \"Wrong number of invocations\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\concurrent\\BackgroundInitializerSupplierTest.java",
  "methodName" : "testClose",
  "sourceCode" : "/**\r\n * Tests that close() method closes the wrapped object\r\n *\r\n * @throws Exception\r\n */\r\n@Test\r\nvoid testClose() throws Exception {\r\n    final AbstractBackgroundInitializerTestImpl init = getBackgroundInitializerTestImpl();\r\n    assertFalse(init.getCloseableCounter().isClosed(), \"closed without close() call\");\r\n    init.close();\r\n    assertFalse(init.getCloseableCounter().isClosed(), \"closed() succeeded before start()\");\r\n    init.start();\r\n    //ensure the Future has completed.\r\n    init.get();\r\n    assertFalse(init.getCloseableCounter().isClosed(), \"closed() succeeded after start() but before close()\");\r\n    init.close();\r\n    assertTrue(init.getCloseableCounter().isClosed(), \"closed() did not succeed\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\concurrent\\BackgroundInitializerSupplierTest.java",
  "methodName" : "testCloseWithCheckedException",
  "sourceCode" : "/**\r\n * Tests that close() wraps a checked exception in a ConcurrentException\r\n *\r\n * @throws Exception\r\n */\r\n@Test\r\nvoid testCloseWithCheckedException() throws Exception {\r\n    final IOException ioException = new IOException();\r\n    final FailableConsumer<?, ?> IOExceptionConsumer = (final CloseableCounter cc) -> {\r\n        throw ioException;\r\n    };\r\n    final AbstractBackgroundInitializerTestImpl init = new SupplierBackgroundInitializerTestImpl(IOExceptionConsumer);\r\n    init.start();\r\n    //ensure the Future has completed.\r\n    init.get();\r\n    try {\r\n        init.close();\r\n        fail();\r\n    } catch (final Exception e) {\r\n        assertInstanceOf(ConcurrentException.class, e);\r\n        assertSame(ioException, e.getCause());\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\concurrent\\BackgroundInitializerSupplierTest.java",
  "methodName" : "testCloseWithRuntimeException",
  "sourceCode" : "/**\r\n * Tests that close() throws a runtime exception\r\n *\r\n * @throws Exception\r\n */\r\n@Test\r\nvoid testCloseWithRuntimeException() throws Exception {\r\n    final NullPointerException npe = new NullPointerException();\r\n    final FailableConsumer<?, ?> NullPointerExceptionConsumer = (final CloseableCounter cc) -> {\r\n        throw npe;\r\n    };\r\n    final AbstractBackgroundInitializerTestImpl init = new SupplierBackgroundInitializerTestImpl(NullPointerExceptionConsumer);\r\n    init.start();\r\n    //ensure the Future has completed.\r\n    init.get();\r\n    try {\r\n        init.close();\r\n        fail();\r\n    } catch (final Exception e) {\r\n        assertSame(npe, e);\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\concurrent\\BackgroundInitializerTest.java",
  "methodName" : "testBuilder",
  "sourceCode" : "@Test\r\nvoid testBuilder() throws ConcurrentException {\r\n    // @formatter:off\r\n    final BackgroundInitializer<Object> backgroundInitializer = BackgroundInitializer.builder().setCloser(null).setExternalExecutor(null).setInitializer(null).get();\r\n    // @formatter:on\r\n    assertNull(backgroundInitializer.getExternalExecutor());\r\n    assertFalse(backgroundInitializer.isInitialized());\r\n    assertFalse(backgroundInitializer.isStarted());\r\n    assertThrows(IllegalStateException.class, backgroundInitializer::getFuture);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\concurrent\\BackgroundInitializerTest.java",
  "methodName" : "testBuilderThenGetFailures",
  "sourceCode" : "@Test\r\nvoid testBuilderThenGetFailures() throws ConcurrentException {\r\n    // @formatter:off\r\n    final BackgroundInitializer<Object> backgroundInitializer = BackgroundInitializer.builder().setCloser(null).setExternalExecutor(null).setInitializer(() -> {\r\n        throw new IllegalStateException(\"test\");\r\n    }).get();\r\n    // @formatter:on\r\n    assertNull(backgroundInitializer.getExternalExecutor());\r\n    assertFalse(backgroundInitializer.isInitialized());\r\n    assertFalse(backgroundInitializer.isStarted());\r\n    assertThrows(IllegalStateException.class, backgroundInitializer::getFuture);\r\n    // start\r\n    backgroundInitializer.start();\r\n    assertEquals(\"test\", assertThrows(IllegalStateException.class, backgroundInitializer::get).getMessage());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\concurrent\\BackgroundInitializerTest.java",
  "methodName" : "testGetActiveExecutorBeforeStart",
  "sourceCode" : "/**\r\n * Tries to obtain the executor before start(). It should not have been\r\n * initialized yet.\r\n */\r\n@Test\r\nvoid testGetActiveExecutorBeforeStart() {\r\n    final AbstractBackgroundInitializerTestImpl init = getBackgroundInitializerTestImpl();\r\n    assertNull(init.getActiveExecutor(), \"Got an executor\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\concurrent\\BackgroundInitializerTest.java",
  "methodName" : "testGetActiveExecutorExternal",
  "sourceCode" : "/**\r\n * Tests whether an external executor is correctly detected.\r\n */\r\n@Test\r\nvoid testGetActiveExecutorExternal() throws InterruptedException, ConcurrentException {\r\n    final ExecutorService exec = Executors.newSingleThreadExecutor();\r\n    try {\r\n        final AbstractBackgroundInitializerTestImpl init = getBackgroundInitializerTestImpl(exec);\r\n        init.start();\r\n        assertSame(exec, init.getActiveExecutor(), \"Wrong executor\");\r\n        checkInitialize(init);\r\n    } finally {\r\n        exec.shutdown();\r\n        exec.awaitTermination(1, TimeUnit.SECONDS);\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\concurrent\\BackgroundInitializerTest.java",
  "methodName" : "testGetActiveExecutorTemp",
  "sourceCode" : "/**\r\n * Tests getActiveExecutor() for a temporary executor.\r\n */\r\n@Test\r\nvoid testGetActiveExecutorTemp() throws ConcurrentException {\r\n    final AbstractBackgroundInitializerTestImpl init = getBackgroundInitializerTestImpl();\r\n    init.start();\r\n    assertNotNull(init.getActiveExecutor(), \"No active executor\");\r\n    checkInitialize(init);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\concurrent\\BackgroundInitializerTest.java",
  "methodName" : "testGetBeforeStart",
  "sourceCode" : "/**\r\n * Tests calling get() before start(). This should cause an exception.\r\n */\r\n@Test\r\nvoid testGetBeforeStart() {\r\n    final AbstractBackgroundInitializerTestImpl init = getBackgroundInitializerTestImpl();\r\n    assertThrows(IllegalStateException.class, init::get);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\concurrent\\BackgroundInitializerTest.java",
  "methodName" : "testGetCheckedException",
  "sourceCode" : "/**\r\n * Tests the get() method if background processing causes a checked\r\n * exception.\r\n */\r\n@Test\r\nvoid testGetCheckedException() {\r\n    final AbstractBackgroundInitializerTestImpl init = getBackgroundInitializerTestImpl();\r\n    final Exception ex = new Exception();\r\n    init.ex = ex;\r\n    init.start();\r\n    final ConcurrentException cex = assertThrows(ConcurrentException.class, init::get);\r\n    assertEquals(ex, cex.getCause(), \"Exception not thrown\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\concurrent\\BackgroundInitializerTest.java",
  "methodName" : "testGetInterruptedException",
  "sourceCode" : "/**\r\n * Tests the get() method if waiting for the initialization is interrupted.\r\n *\r\n * @throws InterruptedException because we're making use of Java's concurrent API\r\n */\r\n@Test\r\nvoid testGetInterruptedException() throws InterruptedException {\r\n    final ExecutorService exec = Executors.newSingleThreadExecutor();\r\n    final AbstractBackgroundInitializerTestImpl init = getBackgroundInitializerTestImpl(exec);\r\n    final CountDownLatch latch1 = new CountDownLatch(1);\r\n    init.shouldSleep = true;\r\n    init.start();\r\n    final AtomicReference<InterruptedException> iex = new AtomicReference<>();\r\n    final Thread getThread = new Thread() {\r\n\r\n        @Override\r\n        public void run() {\r\n            try {\r\n                init.get();\r\n            } catch (final ConcurrentException cex) {\r\n                if (cex.getCause() instanceof InterruptedException) {\r\n                    iex.set((InterruptedException) cex.getCause());\r\n                }\r\n            } finally {\r\n                assertTrue(isInterrupted(), \"Thread not interrupted\");\r\n                latch1.countDown();\r\n            }\r\n        }\r\n    };\r\n    getThread.start();\r\n    getThread.interrupt();\r\n    latch1.await();\r\n    exec.shutdownNow();\r\n    exec.awaitTermination(1, TimeUnit.SECONDS);\r\n    assertNotNull(iex.get(), \"No interrupted exception\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\concurrent\\BackgroundInitializerTest.java",
  "methodName" : "testGetRuntimeException",
  "sourceCode" : "/**\r\n * Tests the get() method if background processing causes a runtime\r\n * exception.\r\n */\r\n@Test\r\nvoid testGetRuntimeException() {\r\n    final AbstractBackgroundInitializerTestImpl init = getBackgroundInitializerTestImpl();\r\n    final RuntimeException rex = new RuntimeException();\r\n    init.ex = rex;\r\n    init.start();\r\n    final Exception ex = assertThrows(Exception.class, init::get);\r\n    assertEquals(rex, ex, \"Runtime exception not thrown\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\concurrent\\BackgroundInitializerTest.java",
  "methodName" : "testInitialize",
  "sourceCode" : "/**\r\n * Tests whether initialize() is invoked.\r\n */\r\n@Test\r\nvoid testInitialize() throws ConcurrentException {\r\n    final AbstractBackgroundInitializerTestImpl init = getBackgroundInitializerTestImpl();\r\n    init.start();\r\n    checkInitialize(init);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\concurrent\\BackgroundInitializerTest.java",
  "methodName" : "testInitializeTempExecutor",
  "sourceCode" : "/**\r\n * Tests the execution of the background task if a temporary executor has to\r\n * be created.\r\n */\r\n@Test\r\nvoid testInitializeTempExecutor() throws ConcurrentException {\r\n    final AbstractBackgroundInitializerTestImpl init = getBackgroundInitializerTestImpl();\r\n    assertTrue(init.start(), \"Wrong result of start()\");\r\n    checkInitialize(init);\r\n    assertTrue(init.getActiveExecutor().isShutdown(), \"Executor not shutdown\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\concurrent\\BackgroundInitializerTest.java",
  "methodName" : "testIsInitialized",
  "sourceCode" : "/**\r\n * Tests isInitialized() before and after the background task has finished.\r\n */\r\n@Test\r\nvoid testIsInitialized() throws ConcurrentException {\r\n    final AbstractBackgroundInitializerTestImpl init = getBackgroundInitializerTestImpl();\r\n    init.enableLatch();\r\n    init.start();\r\n    //Started and Initialized should return opposite values\r\n    assertTrue(init.isStarted(), \"Not started\");\r\n    assertFalse(init.isInitialized(), \"Initialized before releasing latch\");\r\n    init.releaseLatch();\r\n    //to ensure the initialize thread has completed.\r\n    init.get();\r\n    assertTrue(init.isInitialized(), \"Not initialized after releasing latch\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\concurrent\\BackgroundInitializerTest.java",
  "methodName" : "testIsStartedAfterGet",
  "sourceCode" : "/**\r\n * Tests isStarted() after the background task has finished.\r\n */\r\n@Test\r\nvoid testIsStartedAfterGet() throws ConcurrentException {\r\n    final AbstractBackgroundInitializerTestImpl init = getBackgroundInitializerTestImpl();\r\n    init.start();\r\n    checkInitialize(init);\r\n    assertTrue(init.isStarted(), \"Not started\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\concurrent\\BackgroundInitializerTest.java",
  "methodName" : "testIsStartedFalse",
  "sourceCode" : "/**\r\n * Tests isStarted() before start() was called.\r\n */\r\n@Test\r\nvoid testIsStartedFalse() {\r\n    final AbstractBackgroundInitializerTestImpl init = getBackgroundInitializerTestImpl();\r\n    assertFalse(init.isStarted(), \"Already started\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\concurrent\\BackgroundInitializerTest.java",
  "methodName" : "testIsStartedTrue",
  "sourceCode" : "/**\r\n * Tests isStarted() after start().\r\n */\r\n@Test\r\nvoid testIsStartedTrue() {\r\n    final AbstractBackgroundInitializerTestImpl init = getBackgroundInitializerTestImpl();\r\n    init.start();\r\n    assertTrue(init.isStarted(), \"Not started\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\concurrent\\BackgroundInitializerTest.java",
  "methodName" : "testSetExternalExecutor",
  "sourceCode" : "/**\r\n * Tests whether an external executor can be set using the\r\n * setExternalExecutor() method.\r\n */\r\n@Test\r\nvoid testSetExternalExecutor() throws ConcurrentException {\r\n    final ExecutorService exec = Executors.newCachedThreadPool();\r\n    try {\r\n        final AbstractBackgroundInitializerTestImpl init = getBackgroundInitializerTestImpl();\r\n        init.setExternalExecutor(exec);\r\n        assertEquals(exec, init.getExternalExecutor(), \"Wrong executor service\");\r\n        assertTrue(init.start(), \"Wrong result of start()\");\r\n        assertSame(exec, init.getActiveExecutor(), \"Wrong active executor\");\r\n        checkInitialize(init);\r\n        assertFalse(exec.isShutdown(), \"Executor was shutdown\");\r\n    } finally {\r\n        exec.shutdown();\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\concurrent\\BackgroundInitializerTest.java",
  "methodName" : "testSetExternalExecutorAfterStart",
  "sourceCode" : "/**\r\n * Tests that setting an executor after start() causes an exception.\r\n *\r\n * @throws org.apache.commons.lang3.concurrent.ConcurrentException because the test implementation may throw it\r\n */\r\n@Test\r\nvoid testSetExternalExecutorAfterStart() throws ConcurrentException, InterruptedException {\r\n    final AbstractBackgroundInitializerTestImpl init = getBackgroundInitializerTestImpl();\r\n    init.start();\r\n    final ExecutorService exec = Executors.newSingleThreadExecutor();\r\n    try {\r\n        assertThrows(IllegalStateException.class, () -> init.setExternalExecutor(exec));\r\n        init.get();\r\n    } finally {\r\n        exec.shutdown();\r\n        exec.awaitTermination(1, TimeUnit.SECONDS);\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\concurrent\\BackgroundInitializerTest.java",
  "methodName" : "testStartMultipleTimes",
  "sourceCode" : "/**\r\n * Tests invoking start() multiple times. Only the first invocation should\r\n * have an effect.\r\n */\r\n@Test\r\nvoid testStartMultipleTimes() throws ConcurrentException {\r\n    final AbstractBackgroundInitializerTestImpl init = getBackgroundInitializerTestImpl();\r\n    assertTrue(init.start(), \"Wrong result for start()\");\r\n    for (int i = 0; i < 10; i++) {\r\n        assertFalse(init.start(), \"Could start again\");\r\n    }\r\n    checkInitialize(init);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\concurrent\\BasicThreadFactoryTest.java",
  "methodName" : "testBuildDefaults",
  "sourceCode" : "/**\r\n * Tests the default values used by the builder.\r\n */\r\n@Test\r\nvoid testBuildDefaults() {\r\n    final BasicThreadFactory factory = builder.build();\r\n    checkFactoryDefaults(factory);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\concurrent\\BasicThreadFactoryTest.java",
  "methodName" : "testBuilderDaemon",
  "sourceCode" : "/**\r\n * Tests the daemon() method of the builder.\r\n */\r\n@Test\r\nvoid testBuilderDaemon() {\r\n    builder.daemon();\r\n    assertTrue(builder.build().getDaemonFlag());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\concurrent\\BasicThreadFactoryTest.java",
  "methodName" : "testBuilderDaemonBoolean",
  "sourceCode" : "/**\r\n * Tests the daemon() method of the builder.\r\n */\r\n@Test\r\nvoid testBuilderDaemonBoolean() {\r\n    builder.daemon(true);\r\n    assertTrue(builder.build().getDaemonFlag());\r\n    builder.daemon(false);\r\n    assertFalse(builder.build().getDaemonFlag());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\concurrent\\BasicThreadFactoryTest.java",
  "methodName" : "testBuilderReset",
  "sourceCode" : "/**\r\n * Tests the reset() method of the builder.\r\n */\r\n@Test\r\nvoid testBuilderReset() {\r\n    final ThreadFactory wrappedFactory = EasyMock.createMock(ThreadFactory.class);\r\n    final Thread.UncaughtExceptionHandler exHandler = EasyMock.createMock(Thread.UncaughtExceptionHandler.class);\r\n    EasyMock.replay(wrappedFactory, exHandler);\r\n    // @formatter:off\r\n    builder.namingPattern(PATTERN).daemon(true).priority(Thread.MAX_PRIORITY).uncaughtExceptionHandler(exHandler).wrappedFactory(wrappedFactory);\r\n    // @formatter:on\r\n    builder.reset();\r\n    final BasicThreadFactory factory = builder.build();\r\n    checkFactoryDefaults(factory);\r\n    assertNotSame(wrappedFactory, factory.getWrappedFactory(), \"Wrapped factory not reset\");\r\n    EasyMock.verify(wrappedFactory, exHandler);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\concurrent\\BasicThreadFactoryTest.java",
  "methodName" : "testBuilderResetAfterBuild",
  "sourceCode" : "/**\r\n * Tests whether reset() is automatically called after build().\r\n */\r\n@Test\r\nvoid testBuilderResetAfterBuild() {\r\n    // @formatter:off\r\n    builder.wrappedFactory(EasyMock.createNiceMock(ThreadFactory.class)).namingPattern(PATTERN).daemon(true).build();\r\n    // @formatter:on\r\n    checkFactoryDefaults(builder.build());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\concurrent\\BasicThreadFactoryTest.java",
  "methodName" : "testBuildNamingPatternNull",
  "sourceCode" : "/**\r\n * Tries to set a null naming pattern.\r\n */\r\n@Test\r\nvoid testBuildNamingPatternNull() {\r\n    assertNullPointerException(() -> builder.namingPattern(null));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\concurrent\\BasicThreadFactoryTest.java",
  "methodName" : "testBuildUncaughtExceptionHandlerNull",
  "sourceCode" : "/**\r\n * Tries to set a null exception handler.\r\n */\r\n@Test\r\nvoid testBuildUncaughtExceptionHandlerNull() {\r\n    assertNullPointerException(() -> builder.uncaughtExceptionHandler(null));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\concurrent\\BasicThreadFactoryTest.java",
  "methodName" : "testBuildWrappedFactoryNull",
  "sourceCode" : "/**\r\n * Tries to set a null wrapped factory.\r\n */\r\n@Test\r\nvoid testBuildWrappedFactoryNull() {\r\n    assertNullPointerException(() -> builder.wrappedFactory(null));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\concurrent\\BasicThreadFactoryTest.java",
  "methodName" : "testNewThreadDaemonFalse",
  "sourceCode" : "/**\r\n * Tests whether the daemon status of new threads can be turned off.\r\n */\r\n@Test\r\nvoid testNewThreadDaemonFalse() {\r\n    checkDaemonFlag(false);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\concurrent\\BasicThreadFactoryTest.java",
  "methodName" : "testNewThreadDaemonTrue",
  "sourceCode" : "/**\r\n * Tests whether daemon threads can be created.\r\n */\r\n@Test\r\nvoid testNewThreadDaemonTrue() {\r\n    checkDaemonFlag(true);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\concurrent\\BasicThreadFactoryTest.java",
  "methodName" : "testNewThreadExHandler",
  "sourceCode" : "/**\r\n * Tests whether the exception handler is set if one is provided.\r\n */\r\n@Test\r\nvoid testNewThreadExHandler() {\r\n    final ThreadFactory wrapped = EasyMock.createMock(ThreadFactory.class);\r\n    final Runnable r = EasyMock.createMock(Runnable.class);\r\n    final Thread.UncaughtExceptionHandler handler = EasyMock.createMock(Thread.UncaughtExceptionHandler.class);\r\n    final Thread t = new Thread();\r\n    EasyMock.expect(wrapped.newThread(r)).andReturn(t);\r\n    EasyMock.replay(wrapped, r, handler);\r\n    final BasicThreadFactory factory = builder.wrappedFactory(wrapped).uncaughtExceptionHandler(handler).build();\r\n    assertSame(t, factory.newThread(r), \"Wrong thread\");\r\n    assertEquals(handler, t.getUncaughtExceptionHandler(), \"Wrong exception handler\");\r\n    EasyMock.verify(wrapped, r, handler);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\concurrent\\BasicThreadFactoryTest.java",
  "methodName" : "testNewThreadNamingPattern",
  "sourceCode" : "/**\r\n * Tests whether the naming pattern is applied to new threads.\r\n */\r\n@Test\r\nvoid testNewThreadNamingPattern() {\r\n    final ThreadFactory wrapped = EasyMock.createMock(ThreadFactory.class);\r\n    final Runnable r = EasyMock.createMock(Runnable.class);\r\n    final int count = 12;\r\n    for (int i = 0; i < count; i++) {\r\n        EasyMock.expect(wrapped.newThread(r)).andReturn(new Thread());\r\n    }\r\n    EasyMock.replay(wrapped, r);\r\n    final BasicThreadFactory factory = builder.wrappedFactory(wrapped).namingPattern(PATTERN).build();\r\n    for (int i = 0; i < count; i++) {\r\n        final Thread t = factory.newThread(r);\r\n        assertEquals(String.format(PATTERN, Long.valueOf(i + 1)), t.getName(), \"Wrong thread name\");\r\n        assertEquals(i + 1, factory.getThreadCount(), \"Wrong thread count\");\r\n    }\r\n    EasyMock.verify(wrapped, r);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\concurrent\\BasicThreadFactoryTest.java",
  "methodName" : "testNewThreadNoDaemonFlag",
  "sourceCode" : "/**\r\n * Tests whether the daemon flag is not touched on newly created threads if\r\n * it is not specified.\r\n */\r\n@Test\r\nvoid testNewThreadNoDaemonFlag() {\r\n    final ThreadFactory wrapped = EasyMock.createMock(ThreadFactory.class);\r\n    final Runnable r1 = EasyMock.createMock(Runnable.class);\r\n    final Runnable r2 = EasyMock.createMock(Runnable.class);\r\n    final Thread t1 = new Thread();\r\n    final Thread t2 = new Thread();\r\n    t1.setDaemon(true);\r\n    EasyMock.expect(wrapped.newThread(r1)).andReturn(t1);\r\n    EasyMock.expect(wrapped.newThread(r2)).andReturn(t2);\r\n    EasyMock.replay(wrapped, r1, r2);\r\n    final BasicThreadFactory factory = builder.wrappedFactory(wrapped).build();\r\n    assertSame(t1, factory.newThread(r1), \"Wrong thread 1\");\r\n    assertTrue(t1.isDaemon(), \"No daemon thread\");\r\n    assertSame(t2, factory.newThread(r2), \"Wrong thread 2\");\r\n    assertFalse(t2.isDaemon(), \"A daemon thread\");\r\n    EasyMock.verify(wrapped, r1, r2);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\concurrent\\BasicThreadFactoryTest.java",
  "methodName" : "testNewThreadNoExHandler",
  "sourceCode" : "/**\r\n * Tests whether the original exception handler is not touched if none is\r\n * specified.\r\n */\r\n@Test\r\nvoid testNewThreadNoExHandler() {\r\n    final ThreadFactory wrapped = EasyMock.createMock(ThreadFactory.class);\r\n    final Runnable r = EasyMock.createMock(Runnable.class);\r\n    final Thread.UncaughtExceptionHandler handler = EasyMock.createMock(Thread.UncaughtExceptionHandler.class);\r\n    final Thread t = new Thread();\r\n    t.setUncaughtExceptionHandler(handler);\r\n    EasyMock.expect(wrapped.newThread(r)).andReturn(t);\r\n    EasyMock.replay(wrapped, r, handler);\r\n    final BasicThreadFactory factory = builder.wrappedFactory(wrapped).build();\r\n    assertSame(t, factory.newThread(r), \"Wrong thread\");\r\n    assertEquals(handler, t.getUncaughtExceptionHandler(), \"Wrong exception handler\");\r\n    EasyMock.verify(wrapped, r, handler);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\concurrent\\BasicThreadFactoryTest.java",
  "methodName" : "testNewThreadNoNamingPattern",
  "sourceCode" : "/**\r\n * Tests whether the thread name is not modified if no naming pattern is\r\n * set.\r\n */\r\n@Test\r\nvoid testNewThreadNoNamingPattern() {\r\n    final ThreadFactory wrapped = EasyMock.createMock(ThreadFactory.class);\r\n    final Runnable r = EasyMock.createMock(Runnable.class);\r\n    final String name = \"unchangedThreadName\";\r\n    final Thread t = new Thread(name);\r\n    EasyMock.expect(wrapped.newThread(r)).andReturn(t);\r\n    EasyMock.replay(wrapped, r);\r\n    final BasicThreadFactory factory = builder.wrappedFactory(wrapped).build();\r\n    assertSame(t, factory.newThread(r), \"Wrong thread\");\r\n    assertEquals(name, t.getName(), \"Name was changed\");\r\n    EasyMock.verify(wrapped, r);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\concurrent\\BasicThreadFactoryTest.java",
  "methodName" : "testNewThreadNoPriority",
  "sourceCode" : "/**\r\n * Tests whether the original priority is not changed if no priority is\r\n * specified.\r\n */\r\n@Test\r\nvoid testNewThreadNoPriority() {\r\n    final ThreadFactory wrapped = EasyMock.createMock(ThreadFactory.class);\r\n    final Runnable r = EasyMock.createMock(Runnable.class);\r\n    final int orgPriority = Thread.NORM_PRIORITY + 1;\r\n    final Thread t = new Thread();\r\n    t.setPriority(orgPriority);\r\n    EasyMock.expect(wrapped.newThread(r)).andReturn(t);\r\n    EasyMock.replay(wrapped, r);\r\n    final BasicThreadFactory factory = builder.wrappedFactory(wrapped).build();\r\n    assertSame(t, factory.newThread(r), \"Wrong thread\");\r\n    assertEquals(orgPriority, t.getPriority(), \"Wrong priority\");\r\n    EasyMock.verify(wrapped, r);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\concurrent\\BasicThreadFactoryTest.java",
  "methodName" : "testNewThreadPriority",
  "sourceCode" : "/**\r\n * Tests whether the priority is set on newly created threads.\r\n */\r\n@Test\r\nvoid testNewThreadPriority() {\r\n    final ThreadFactory wrapped = EasyMock.createMock(ThreadFactory.class);\r\n    final Runnable r = EasyMock.createMock(Runnable.class);\r\n    final Thread t = new Thread();\r\n    EasyMock.expect(wrapped.newThread(r)).andReturn(t);\r\n    EasyMock.replay(wrapped, r);\r\n    final int priority = Thread.NORM_PRIORITY + 1;\r\n    final BasicThreadFactory factory = builder.wrappedFactory(wrapped).priority(priority).build();\r\n    assertSame(t, factory.newThread(r), \"Wrong thread\");\r\n    assertEquals(priority, t.getPriority(), \"Wrong priority\");\r\n    EasyMock.verify(wrapped, r);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\concurrent\\CallableBackgroundInitializerTest.java",
  "methodName" : "testInitExecutor",
  "sourceCode" : "/**\r\n * Tests whether the executor service is correctly passed to the super\r\n * class.\r\n */\r\n@Test\r\nvoid testInitExecutor() throws InterruptedException {\r\n    final ExecutorService exec = Executors.newSingleThreadExecutor();\r\n    final CallableBackgroundInitializer<Integer> init = new CallableBackgroundInitializer<>(new TestCallable(), exec);\r\n    assertEquals(exec, init.getExternalExecutor(), \"Executor not set\");\r\n    exec.shutdown();\r\n    exec.awaitTermination(1, TimeUnit.SECONDS);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\concurrent\\CallableBackgroundInitializerTest.java",
  "methodName" : "testInitExecutorNullCallable",
  "sourceCode" : "/**\r\n * Tries to pass a null Callable to the constructor that takes an executor.\r\n * This should cause an exception.\r\n */\r\n@Test\r\nvoid testInitExecutorNullCallable() throws InterruptedException {\r\n    final ExecutorService exec = Executors.newSingleThreadExecutor();\r\n    try {\r\n        assertNullPointerException(() -> new CallableBackgroundInitializer<Integer>(null, exec));\r\n    } finally {\r\n        exec.shutdown();\r\n        exec.awaitTermination(1, TimeUnit.SECONDS);\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\concurrent\\CallableBackgroundInitializerTest.java",
  "methodName" : "testInitialize",
  "sourceCode" : "/**\r\n * Tests the implementation of initialize().\r\n *\r\n * @throws Exception so we don't have to catch it\r\n */\r\n@Test\r\nvoid testInitialize() throws Exception {\r\n    final TestCallable call = new TestCallable();\r\n    final CallableBackgroundInitializer<Integer> init = new CallableBackgroundInitializer<>(call);\r\n    assertEquals(RESULT, init.initialize(), \"Wrong result\");\r\n    assertEquals(1, call.callCount, \"Wrong number of invocations\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\concurrent\\CallableBackgroundInitializerTest.java",
  "methodName" : "testInitNullCallable",
  "sourceCode" : "/**\r\n * Tries to create an instance without a Callable. This should cause an\r\n * exception.\r\n */\r\n@Test()\r\nvoid testInitNullCallable() {\r\n    assertNullPointerException(() -> new CallableBackgroundInitializer<>(null));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\concurrent\\CircuitBreakingExceptionTest.java",
  "methodName" : "testThrowingEmptyException",
  "sourceCode" : "@Test\r\nvoid testThrowingEmptyException() {\r\n    assertThrows(CircuitBreakingException.class, () -> {\r\n        throw new CircuitBreakingException();\r\n    });\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\concurrent\\CircuitBreakingExceptionTest.java",
  "methodName" : "testThrowingExceptionWithCause",
  "sourceCode" : "@Test\r\nvoid testThrowingExceptionWithCause() {\r\n    assertThrows(CircuitBreakingException.class, () -> {\r\n        throw new CircuitBreakingException(generateCause());\r\n    });\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\concurrent\\CircuitBreakingExceptionTest.java",
  "methodName" : "testThrowingExceptionWithMessage",
  "sourceCode" : "@Test\r\nvoid testThrowingExceptionWithMessage() {\r\n    assertThrows(CircuitBreakingException.class, () -> {\r\n        throw new CircuitBreakingException(EXCEPTION_MESSAGE);\r\n    });\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\concurrent\\CircuitBreakingExceptionTest.java",
  "methodName" : "testThrowingInformativeException",
  "sourceCode" : "@Test\r\nvoid testThrowingInformativeException() {\r\n    assertThrows(CircuitBreakingException.class, () -> {\r\n        throw new CircuitBreakingException(EXCEPTION_MESSAGE, generateCause());\r\n    });\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\concurrent\\CircuitBreakingExceptionTest.java",
  "methodName" : "testWithCauseAndMessage",
  "sourceCode" : "@Test\r\nvoid testWithCauseAndMessage() {\r\n    final Exception exception = new CircuitBreakingException(EXCEPTION_MESSAGE, generateCause());\r\n    assertNotNull(exception);\r\n    assertEquals(EXCEPTION_MESSAGE, exception.getMessage(), WRONG_EXCEPTION_MESSAGE);\r\n    final Throwable cause = exception.getCause();\r\n    assertNotNull(cause);\r\n    assertEquals(CAUSE_MESSAGE, cause.getMessage(), WRONG_CAUSE_MESSAGE);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\concurrent\\CircuitBreakingExceptionTest.java",
  "methodName" : "testWithoutCause",
  "sourceCode" : "@Test\r\nvoid testWithoutCause() {\r\n    final Exception exception = new CircuitBreakingException(EXCEPTION_MESSAGE);\r\n    assertNotNull(exception);\r\n    assertEquals(EXCEPTION_MESSAGE, exception.getMessage(), WRONG_EXCEPTION_MESSAGE);\r\n    final Throwable cause = exception.getCause();\r\n    assertNull(cause);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\concurrent\\CircuitBreakingExceptionTest.java",
  "methodName" : "testWithoutMessage",
  "sourceCode" : "@Test\r\nvoid testWithoutMessage() {\r\n    final Exception exception = new CircuitBreakingException(generateCause());\r\n    assertNotNull(exception);\r\n    assertNotNull(exception.getMessage());\r\n    final Throwable cause = exception.getCause();\r\n    assertNotNull(cause);\r\n    assertEquals(CAUSE_MESSAGE, cause.getMessage(), WRONG_CAUSE_MESSAGE);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\concurrent\\ConcurrentExceptionTest.java",
  "methodName" : "testCauseError",
  "sourceCode" : "/**\r\n * Tests creating a ConcurrentException with an error as cause.\r\n */\r\n@Test\r\nvoid testCauseError() {\r\n    assertIllegalArgumentException(() -> new ConcurrentException(\"An error\", new Error()));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\concurrent\\ConcurrentExceptionTest.java",
  "methodName" : "testCauseNull",
  "sourceCode" : "/**\r\n * Tests creating a ConcurrentException with null as cause.\r\n */\r\n@Test\r\nvoid testCauseNull() {\r\n    assertIllegalArgumentException(() -> new ConcurrentException((Throwable) null));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\concurrent\\ConcurrentExceptionTest.java",
  "methodName" : "testCauseString",
  "sourceCode" : "@Test\r\nvoid testCauseString() {\r\n    assertEquals(\"test\", new ConcurrentException(\"test\").getMessage());\r\n    assertNull(new ConcurrentException((String) null).getMessage());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\concurrent\\ConcurrentExceptionTest.java",
  "methodName" : "testCauseUnchecked",
  "sourceCode" : "/**\r\n * Tests creating a ConcurrentException with a runtime exception as cause.\r\n */\r\n@Test\r\nvoid testCauseUnchecked() {\r\n    assertIllegalArgumentException(() -> new ConcurrentException(new RuntimeException()));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\concurrent\\ConcurrentRuntimeExceptionTest.java",
  "methodName" : "testCauseError",
  "sourceCode" : "/**\r\n * Tries to create a ConcurrentRuntimeException with an error as cause.\r\n */\r\n@Test\r\nvoid testCauseError() {\r\n    assertIllegalArgumentException(() -> new ConcurrentRuntimeException(\"An error\", new Error()));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\concurrent\\ConcurrentRuntimeExceptionTest.java",
  "methodName" : "testCauseNull",
  "sourceCode" : "/**\r\n * Tries to create a ConcurrentRuntimeException with null as cause.\r\n */\r\n@Test\r\nvoid testCauseNull() {\r\n    assertIllegalArgumentException(() -> new ConcurrentRuntimeException(null));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\concurrent\\ConcurrentRuntimeExceptionTest.java",
  "methodName" : "testCauseUnchecked",
  "sourceCode" : "/**\r\n * Tries to create a ConcurrentRuntimeException with a runtime as cause.\r\n */\r\n@Test\r\nvoid testCauseUnchecked() {\r\n    assertIllegalArgumentException(() -> new ConcurrentRuntimeException(new RuntimeException()));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\concurrent\\ConcurrentUtilsTest.java",
  "methodName" : "testConstantFuture_Integer",
  "sourceCode" : "/**\r\n * Tests constant future.\r\n *\r\n * @throws Exception so we don't have to catch it\r\n */\r\n@Test\r\nvoid testConstantFuture_Integer() throws Exception {\r\n    final Integer value = Integer.valueOf(5);\r\n    final Future<Integer> test = ConcurrentUtils.constantFuture(value);\r\n    assertTrue(test.isDone());\r\n    assertSame(value, test.get());\r\n    assertSame(value, test.get(1000, TimeUnit.SECONDS));\r\n    assertSame(value, test.get(1000, null));\r\n    assertFalse(test.isCancelled());\r\n    assertFalse(test.cancel(true));\r\n    assertFalse(test.cancel(false));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\concurrent\\ConcurrentUtilsTest.java",
  "methodName" : "testConstantFuture_null",
  "sourceCode" : "/**\r\n * Tests constant future.\r\n *\r\n * @throws Exception so we don't have to catch it\r\n */\r\n@Test\r\nvoid testConstantFuture_null() throws Exception {\r\n    final Integer value = null;\r\n    final Future<Integer> test = ConcurrentUtils.constantFuture(value);\r\n    assertTrue(test.isDone());\r\n    assertSame(value, test.get());\r\n    assertSame(value, test.get(1000, TimeUnit.SECONDS));\r\n    assertSame(value, test.get(1000, null));\r\n    assertFalse(test.isCancelled());\r\n    assertFalse(test.cancel(true));\r\n    assertFalse(test.cancel(false));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\concurrent\\ConcurrentUtilsTest.java",
  "methodName" : "testCreateIfAbsentKeyNotPresent",
  "sourceCode" : "/**\r\n * Tests createIfAbsent() if the map does not contain the key in question.\r\n *\r\n * @throws org.apache.commons.lang3.concurrent.ConcurrentException so we don't have to catch it\r\n */\r\n@Test\r\nvoid testCreateIfAbsentKeyNotPresent() throws ConcurrentException {\r\n    final ConcurrentInitializer<Integer> init = EasyMock.createMock(ConcurrentInitializer.class);\r\n    final String key = \"testKey\";\r\n    final Integer value = 42;\r\n    EasyMock.expect(init.get()).andReturn(value);\r\n    EasyMock.replay(init);\r\n    final ConcurrentMap<String, Integer> map = new ConcurrentHashMap<>();\r\n    assertEquals(value, ConcurrentUtils.createIfAbsent(map, key, init), \"Wrong result\");\r\n    assertEquals(value, map.get(key), \"Wrong value in map\");\r\n    EasyMock.verify(init);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\concurrent\\ConcurrentUtilsTest.java",
  "methodName" : "testCreateIfAbsentKeyPresent",
  "sourceCode" : "/**\r\n * Tests createIfAbsent() if the key is found in the map.\r\n *\r\n * @throws org.apache.commons.lang3.concurrent.ConcurrentException so we don't have to catch it\r\n */\r\n@Test\r\nvoid testCreateIfAbsentKeyPresent() throws ConcurrentException {\r\n    final ConcurrentInitializer<Integer> init = EasyMock.createMock(ConcurrentInitializer.class);\r\n    EasyMock.replay(init);\r\n    final String key = \"testKey\";\r\n    final Integer value = 42;\r\n    final ConcurrentMap<String, Integer> map = new ConcurrentHashMap<>();\r\n    map.put(key, value);\r\n    assertEquals(value, ConcurrentUtils.createIfAbsent(map, key, init), \"Wrong result\");\r\n    assertEquals(value, map.get(key), \"Wrong value in map\");\r\n    EasyMock.verify(init);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\concurrent\\ConcurrentUtilsTest.java",
  "methodName" : "testCreateIfAbsentNullInit",
  "sourceCode" : "/**\r\n * Tests createIfAbsent() if a null initializer is passed in.\r\n *\r\n * @throws org.apache.commons.lang3.concurrent.ConcurrentException so we don't have to catch it\r\n */\r\n@Test\r\nvoid testCreateIfAbsentNullInit() throws ConcurrentException {\r\n    final ConcurrentMap<String, Integer> map = new ConcurrentHashMap<>();\r\n    final String key = \"testKey\";\r\n    final Integer value = 42;\r\n    map.put(key, value);\r\n    assertNull(ConcurrentUtils.createIfAbsent(map, key, null), \"Wrong result\");\r\n    assertEquals(value, map.get(key), \"Map was changed\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\concurrent\\ConcurrentUtilsTest.java",
  "methodName" : "testCreateIfAbsentNullMap",
  "sourceCode" : "/**\r\n * Tests createIfAbsent() if a null map is passed in.\r\n *\r\n * @throws org.apache.commons.lang3.concurrent.ConcurrentException so we don't have to catch it\r\n */\r\n@Test\r\nvoid testCreateIfAbsentNullMap() throws ConcurrentException {\r\n    final ConcurrentInitializer<Integer> init = EasyMock.createMock(ConcurrentInitializer.class);\r\n    EasyMock.replay(init);\r\n    assertNull(ConcurrentUtils.createIfAbsent(null, \"test\", init), \"Wrong result\");\r\n    EasyMock.verify(init);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\concurrent\\ConcurrentUtilsTest.java",
  "methodName" : "testCreateIfAbsentUncheckedException",
  "sourceCode" : "/**\r\n * Tests createIfAbsentUnchecked() if an exception is thrown.\r\n *\r\n * @throws org.apache.commons.lang3.concurrent.ConcurrentException so we don't have to catch it\r\n */\r\n@Test\r\nvoid testCreateIfAbsentUncheckedException() throws ConcurrentException {\r\n    final ConcurrentInitializer<Integer> init = EasyMock.createMock(ConcurrentInitializer.class);\r\n    final Exception ex = new Exception();\r\n    EasyMock.expect(init.get()).andThrow(new ConcurrentException(ex));\r\n    EasyMock.replay(init);\r\n    final ConcurrentRuntimeException crex = assertThrows(ConcurrentRuntimeException.class, () -> ConcurrentUtils.createIfAbsentUnchecked(new ConcurrentHashMap<>(), \"test\", init));\r\n    assertEquals(ex, crex.getCause(), \"Wrong cause\");\r\n    EasyMock.verify(init);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\concurrent\\ConcurrentUtilsTest.java",
  "methodName" : "testCreateIfAbsentUncheckedSuccess",
  "sourceCode" : "/**\r\n * Tests createIfAbsentUnchecked() if no exception is thrown.\r\n */\r\n@Test\r\nvoid testCreateIfAbsentUncheckedSuccess() {\r\n    final String key = \"testKey\";\r\n    final Integer value = 42;\r\n    final ConcurrentMap<String, Integer> map = new ConcurrentHashMap<>();\r\n    assertEquals(value, ConcurrentUtils.createIfAbsentUnchecked(map, key, new ConstantInitializer<>(value)), \"Wrong result\");\r\n    assertEquals(value, map.get(key), \"Wrong value in map\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\concurrent\\ConcurrentUtilsTest.java",
  "methodName" : "testExtractCauseChecked",
  "sourceCode" : "/**\r\n * Tests extractCause() if the cause is a checked exception.\r\n */\r\n@Test\r\nvoid testExtractCauseChecked() {\r\n    final Exception ex = new Exception(\"Test\");\r\n    final ConcurrentException cex = ConcurrentUtils.extractCause(new ExecutionException(ex));\r\n    assertSame(ex, cex.getCause(), \"Wrong cause\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\concurrent\\ConcurrentUtilsTest.java",
  "methodName" : "testExtractCauseError",
  "sourceCode" : "/**\r\n * Tests extractCause() if the cause is an error.\r\n */\r\n@Test\r\nvoid testExtractCauseError() {\r\n    final Error err = new AssertionError(\"Test\");\r\n    final AssertionError e = assertThrows(AssertionError.class, () -> ConcurrentUtils.extractCause(new ExecutionException(err)));\r\n    assertEquals(err, e, \"Wrong error\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\concurrent\\ConcurrentUtilsTest.java",
  "methodName" : "testExtractCauseNull",
  "sourceCode" : "/**\r\n * Tests extractCause() for a null exception.\r\n */\r\n@Test\r\nvoid testExtractCauseNull() {\r\n    assertNull(ConcurrentUtils.extractCause(null), \"Non null result\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\concurrent\\ConcurrentUtilsTest.java",
  "methodName" : "testExtractCauseNullCause",
  "sourceCode" : "/**\r\n * Tests extractCause() if the cause of the passed in exception is null.\r\n */\r\n@Test\r\nvoid testExtractCauseNullCause() {\r\n    assertNull(ConcurrentUtils.extractCause(new ExecutionException(\"Test\", null)), \"Non null result\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\concurrent\\ConcurrentUtilsTest.java",
  "methodName" : "testExtractCauseUncheckedChecked",
  "sourceCode" : "/**\r\n * Tests extractCauseUnchecked() if the cause is a checked exception.\r\n */\r\n@Test\r\nvoid testExtractCauseUncheckedChecked() {\r\n    final Exception ex = new Exception(\"Test\");\r\n    final ConcurrentRuntimeException cex = ConcurrentUtils.extractCauseUnchecked(new ExecutionException(ex));\r\n    assertSame(ex, cex.getCause(), \"Wrong cause\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\concurrent\\ConcurrentUtilsTest.java",
  "methodName" : "testExtractCauseUncheckedError",
  "sourceCode" : "/**\r\n * Tests extractCauseUnchecked() if the cause is an error.\r\n */\r\n@Test\r\nvoid testExtractCauseUncheckedError() {\r\n    final Error err = new AssertionError(\"Test\");\r\n    final Error e = assertThrows(Error.class, () -> ConcurrentUtils.extractCauseUnchecked(new ExecutionException(err)));\r\n    assertEquals(err, e, \"Wrong error\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\concurrent\\ConcurrentUtilsTest.java",
  "methodName" : "testExtractCauseUncheckedException",
  "sourceCode" : "/**\r\n * Tests extractCause() if the cause is an unchecked exception.\r\n */\r\n@Test\r\nvoid testExtractCauseUncheckedException() {\r\n    final RuntimeException rex = new RuntimeException(\"Test\");\r\n    assertThrows(RuntimeException.class, () -> ConcurrentUtils.extractCause(new ExecutionException(rex)));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\concurrent\\ConcurrentUtilsTest.java",
  "methodName" : "testExtractCauseUncheckedNull",
  "sourceCode" : "/**\r\n * Tests extractCauseUnchecked() for a null exception.\r\n */\r\n@Test\r\nvoid testExtractCauseUncheckedNull() {\r\n    assertNull(ConcurrentUtils.extractCauseUnchecked(null), \"Non null result\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\concurrent\\ConcurrentUtilsTest.java",
  "methodName" : "testExtractCauseUncheckedNullCause",
  "sourceCode" : "/**\r\n * Tests extractCauseUnchecked() if the cause of the passed in exception is null.\r\n */\r\n@Test\r\nvoid testExtractCauseUncheckedNullCause() {\r\n    assertNull(ConcurrentUtils.extractCauseUnchecked(new ExecutionException(\"Test\", null)), \"Non null result\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\concurrent\\ConcurrentUtilsTest.java",
  "methodName" : "testExtractCauseUncheckedUncheckedException",
  "sourceCode" : "/**\r\n * Tests extractCauseUnchecked() if the cause is an unchecked exception.\r\n */\r\n@Test\r\nvoid testExtractCauseUncheckedUncheckedException() {\r\n    final RuntimeException rex = new RuntimeException(\"Test\");\r\n    final RuntimeException r = assertThrows(RuntimeException.class, () -> ConcurrentUtils.extractCauseUnchecked(new ExecutionException(rex)));\r\n    assertEquals(rex, r, \"Wrong exception\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\concurrent\\ConcurrentUtilsTest.java",
  "methodName" : "testHandleCauseChecked",
  "sourceCode" : "/**\r\n * Tests handleCause() if the cause is a checked exception.\r\n */\r\n@Test\r\nvoid testHandleCauseChecked() {\r\n    final Exception ex = new Exception(\"Test\");\r\n    final ConcurrentException cex = assertThrows(ConcurrentException.class, () -> ConcurrentUtils.handleCause(new ExecutionException(ex)));\r\n    assertEquals(ex, cex.getCause(), \"Wrong cause\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\concurrent\\ConcurrentUtilsTest.java",
  "methodName" : "testHandleCauseError",
  "sourceCode" : "/**\r\n * Tests handleCause() if the cause is an error.\r\n */\r\n@Test\r\nvoid testHandleCauseError() {\r\n    final Error err = new AssertionError(\"Test\");\r\n    final Error e = assertThrows(Error.class, () -> ConcurrentUtils.handleCause(new ExecutionException(err)));\r\n    assertEquals(err, e, \"Wrong error\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\concurrent\\ConcurrentUtilsTest.java",
  "methodName" : "testHandleCauseNull",
  "sourceCode" : "/**\r\n * Tests handleCause() for a null parameter or a null cause. In this case the method should do nothing. We can only test\r\n * that no exception is thrown.\r\n *\r\n * @throws org.apache.commons.lang3.concurrent.ConcurrentException so we don't have to catch it\r\n */\r\n@Test\r\nvoid testHandleCauseNull() throws ConcurrentException {\r\n    ConcurrentUtils.handleCause(null);\r\n    ConcurrentUtils.handleCause(new ExecutionException(\"Test\", null));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\concurrent\\ConcurrentUtilsTest.java",
  "methodName" : "testHandleCauseUncheckedChecked",
  "sourceCode" : "/**\r\n * Tests handleCauseUnchecked() if the cause is a checked exception.\r\n */\r\n@Test\r\nvoid testHandleCauseUncheckedChecked() {\r\n    final Exception ex = new Exception(\"Test\");\r\n    final ConcurrentRuntimeException crex = assertThrows(ConcurrentRuntimeException.class, () -> ConcurrentUtils.handleCauseUnchecked(new ExecutionException(ex)));\r\n    assertEquals(ex, crex.getCause(), \"Wrong cause\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\concurrent\\ConcurrentUtilsTest.java",
  "methodName" : "testHandleCauseUncheckedError",
  "sourceCode" : "/**\r\n * Tests handleCauseUnchecked() if the cause is an error.\r\n */\r\n@Test\r\nvoid testHandleCauseUncheckedError() {\r\n    final Error err = new AssertionError(\"Test\");\r\n    final Error e = assertThrows(Error.class, () -> ConcurrentUtils.handleCauseUnchecked(new ExecutionException(err)));\r\n    assertEquals(err, e, \"Wrong error\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\concurrent\\ConcurrentUtilsTest.java",
  "methodName" : "testHandleCauseUncheckedException",
  "sourceCode" : "/**\r\n * Tests handleCause() if the cause is an unchecked exception.\r\n */\r\n@Test\r\nvoid testHandleCauseUncheckedException() {\r\n    final RuntimeException rex = new RuntimeException(\"Test\");\r\n    final RuntimeException r = assertThrows(RuntimeException.class, () -> ConcurrentUtils.handleCause(new ExecutionException(rex)));\r\n    assertEquals(rex, r, \"Wrong exception\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\concurrent\\ConcurrentUtilsTest.java",
  "methodName" : "testHandleCauseUncheckedNull",
  "sourceCode" : "/**\r\n * Tests handleCauseUnchecked() for a null parameter or a null cause. In this case the method should do nothing. We can\r\n * only test that no exception is thrown.\r\n */\r\n@Test\r\nvoid testHandleCauseUncheckedNull() {\r\n    ConcurrentUtils.handleCauseUnchecked(null);\r\n    ConcurrentUtils.handleCauseUnchecked(new ExecutionException(\"Test\", null));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\concurrent\\ConcurrentUtilsTest.java",
  "methodName" : "testHandleCauseUncheckedUncheckedException",
  "sourceCode" : "/**\r\n * Tests handleCauseUnchecked() if the cause is an unchecked exception.\r\n */\r\n@Test\r\nvoid testHandleCauseUncheckedUncheckedException() {\r\n    final RuntimeException rex = new RuntimeException(\"Test\");\r\n    final RuntimeException r = assertThrows(RuntimeException.class, () -> ConcurrentUtils.handleCauseUnchecked(new ExecutionException(rex)));\r\n    assertEquals(rex, r, \"Wrong exception\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\concurrent\\ConcurrentUtilsTest.java",
  "methodName" : "testInitialize",
  "sourceCode" : "/**\r\n * Tests a successful initialize() operation.\r\n *\r\n * @throws org.apache.commons.lang3.concurrent.ConcurrentException so we don't have to catch it\r\n */\r\n@Test\r\nvoid testInitialize() throws ConcurrentException {\r\n    final ConcurrentInitializer<Object> init = EasyMock.createMock(ConcurrentInitializer.class);\r\n    final Object result = new Object();\r\n    EasyMock.expect(init.get()).andReturn(result);\r\n    EasyMock.replay(init);\r\n    assertSame(result, ConcurrentUtils.initialize(init), \"Wrong result object\");\r\n    EasyMock.verify(init);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\concurrent\\ConcurrentUtilsTest.java",
  "methodName" : "testInitializeNull",
  "sourceCode" : "/**\r\n * Tests initialize() for a null argument.\r\n *\r\n * @throws org.apache.commons.lang3.concurrent.ConcurrentException so we don't have to catch it\r\n */\r\n@Test\r\nvoid testInitializeNull() throws ConcurrentException {\r\n    assertNull(ConcurrentUtils.initialize(null), \"Got a result\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\concurrent\\ConcurrentUtilsTest.java",
  "methodName" : "testInitializeUnchecked",
  "sourceCode" : "/**\r\n * Tests a successful initializeUnchecked() operation.\r\n *\r\n * @throws org.apache.commons.lang3.concurrent.ConcurrentException so we don't have to catch it\r\n */\r\n@Test\r\nvoid testInitializeUnchecked() throws ConcurrentException {\r\n    final ConcurrentInitializer<Object> init = EasyMock.createMock(ConcurrentInitializer.class);\r\n    final Object result = new Object();\r\n    EasyMock.expect(init.get()).andReturn(result);\r\n    EasyMock.replay(init);\r\n    assertSame(result, ConcurrentUtils.initializeUnchecked(init), \"Wrong result object\");\r\n    EasyMock.verify(init);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\concurrent\\ConcurrentUtilsTest.java",
  "methodName" : "testInitializeUncheckedEx",
  "sourceCode" : "/**\r\n * Tests whether exceptions are correctly handled by initializeUnchecked().\r\n *\r\n * @throws org.apache.commons.lang3.concurrent.ConcurrentException so we don't have to catch it\r\n */\r\n@Test\r\nvoid testInitializeUncheckedEx() throws ConcurrentException {\r\n    final ConcurrentInitializer<Object> init = EasyMock.createMock(ConcurrentInitializer.class);\r\n    final Exception cause = new Exception();\r\n    EasyMock.expect(init.get()).andThrow(new ConcurrentException(cause));\r\n    EasyMock.replay(init);\r\n    final ConcurrentRuntimeException crex = assertThrows(ConcurrentRuntimeException.class, () -> ConcurrentUtils.initializeUnchecked(init));\r\n    assertSame(cause, crex.getCause(), \"Wrong cause\");\r\n    EasyMock.verify(init);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\concurrent\\ConcurrentUtilsTest.java",
  "methodName" : "testInitializeUncheckedNull",
  "sourceCode" : "/**\r\n * Tests initializeUnchecked() for a null argument.\r\n */\r\n@Test\r\nvoid testInitializeUncheckedNull() {\r\n    assertNull(ConcurrentUtils.initializeUnchecked(null), \"Got a result\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\concurrent\\ConcurrentUtilsTest.java",
  "methodName" : "testPutIfAbsentKeyNotPresent",
  "sourceCode" : "/**\r\n * Tests putIfAbsent() if the map does not contain the key in question.\r\n */\r\n@Test\r\nvoid testPutIfAbsentKeyNotPresent() {\r\n    final String key = \"testKey\";\r\n    final Integer value = 42;\r\n    final ConcurrentMap<String, Integer> map = new ConcurrentHashMap<>();\r\n    assertEquals(value, ConcurrentUtils.putIfAbsent(map, key, value), \"Wrong result\");\r\n    assertEquals(value, map.get(key), \"Wrong value in map\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\concurrent\\ConcurrentUtilsTest.java",
  "methodName" : "testPutIfAbsentKeyPresent",
  "sourceCode" : "/**\r\n * Tests putIfAbsent() if the map contains the key in question.\r\n */\r\n@Test\r\nvoid testPutIfAbsentKeyPresent() {\r\n    final String key = \"testKey\";\r\n    final Integer value = 42;\r\n    final ConcurrentMap<String, Integer> map = new ConcurrentHashMap<>();\r\n    map.put(key, value);\r\n    assertEquals(value, ConcurrentUtils.putIfAbsent(map, key, 0), \"Wrong result\");\r\n    assertEquals(value, map.get(key), \"Wrong value in map\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\concurrent\\ConcurrentUtilsTest.java",
  "methodName" : "testPutIfAbsentNullMap",
  "sourceCode" : "/**\r\n * Tests putIfAbsent() if a null map is passed in.\r\n */\r\n@Test\r\nvoid testPutIfAbsentNullMap() {\r\n    assertNull(ConcurrentUtils.putIfAbsent(null, \"test\", 100), \"Wrong result\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\concurrent\\ConcurrentUtilsTest.java",
  "methodName" : "testUninitializedConcurrentRuntimeException",
  "sourceCode" : "/**\r\n * Tests creating ConcurrentRuntimeException with no arguments.\r\n */\r\n@Test\r\nvoid testUninitializedConcurrentRuntimeException() {\r\n    assertNotNull(new ConcurrentRuntimeException(), \"Error creating empty ConcurrentRuntimeException\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\concurrent\\ConstantInitializerTest.java",
  "methodName" : "testEqualsFalse",
  "sourceCode" : "/**\r\n * Tests equals() if the expected result is false.\r\n */\r\n@Test\r\nvoid testEqualsFalse() {\r\n    ConstantInitializer<Integer> init2 = new ConstantInitializer<>(null);\r\n    checkEquals(init2, false);\r\n    init2 = new ConstantInitializer<>(VALUE + 1);\r\n    checkEquals(init2, false);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\concurrent\\ConstantInitializerTest.java",
  "methodName" : "testEqualsTrue",
  "sourceCode" : "/**\r\n * Tests equals() if the expected result is true.\r\n */\r\n@Test\r\nvoid testEqualsTrue() {\r\n    checkEquals(init, true);\r\n    ConstantInitializer<Integer> init2 = new ConstantInitializer<>(Integer.valueOf(VALUE.intValue()));\r\n    checkEquals(init2, true);\r\n    init = new ConstantInitializer<>(null);\r\n    init2 = new ConstantInitializer<>(null);\r\n    checkEquals(init2, true);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\concurrent\\ConstantInitializerTest.java",
  "methodName" : "testEqualsWithOtherObjects",
  "sourceCode" : "/**\r\n * Tests equals() with objects of other classes.\r\n */\r\n@Test\r\nvoid testEqualsWithOtherObjects() {\r\n    checkEquals(null, false);\r\n    checkEquals(this, false);\r\n    checkEquals(new ConstantInitializer<>(\"Test\"), false);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\concurrent\\ConstantInitializerTest.java",
  "methodName" : "testGet",
  "sourceCode" : "/**\r\n * Tests whether get() returns the correct object.\r\n *\r\n * @throws org.apache.commons.lang3.concurrent.ConcurrentException so we don't have to catch it\r\n */\r\n@Test\r\nvoid testGet() throws ConcurrentException {\r\n    assertEquals(VALUE, init.get(), \"Wrong object\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\concurrent\\ConstantInitializerTest.java",
  "methodName" : "testGetObject",
  "sourceCode" : "/**\r\n * Tests whether the correct object is returned.\r\n */\r\n@Test\r\nvoid testGetObject() {\r\n    assertEquals(VALUE, init.getObject(), \"Wrong object\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\concurrent\\ConstantInitializerTest.java",
  "methodName" : "testisInitialized",
  "sourceCode" : "/**\r\n * Tests a simple invocation of the isInitialized() method.\r\n */\r\n@Test\r\nvoid testisInitialized() {\r\n    assertTrue(init.isInitialized(), \"was not initialized before get()\");\r\n    assertEquals(VALUE, init.getObject(), \"Wrong object\");\r\n    assertTrue(init.isInitialized(), \"was not initialized after get()\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\concurrent\\ConstantInitializerTest.java",
  "methodName" : "testToString",
  "sourceCode" : "/**\r\n * Tests the string representation.\r\n */\r\n@Test\r\nvoid testToString() {\r\n    final String s = init.toString();\r\n    final Pattern pattern = Pattern.compile(\"ConstantInitializer@-?\\\\d+ \\\\[ object = \" + VALUE + \" \\\\]\");\r\n    assertTrue(pattern.matcher(s).matches(), \"Wrong string: \" + s);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\concurrent\\ConstantInitializerTest.java",
  "methodName" : "testToStringNull",
  "sourceCode" : "/**\r\n * Tests the string representation if the managed object is null.\r\n */\r\n@Test\r\nvoid testToStringNull() {\r\n    final String s = new ConstantInitializer<>(null).toString();\r\n    assertTrue(s.indexOf(\"object = null\") > 0, \"Object not found: \" + s);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\concurrent\\EventCountCircuitBreakerTest.java",
  "methodName" : "testAutomaticOpenStartsNewCheckInterval",
  "sourceCode" : "/**\r\n * Tests whether a new check interval is started if the circuit breaker has a\r\n * transition to open state.\r\n */\r\n@Test\r\nvoid testAutomaticOpenStartsNewCheckInterval() {\r\n    final EventCountCircuitBreakerTestImpl breaker = new EventCountCircuitBreakerTestImpl(OPENING_THRESHOLD, 2, TimeUnit.SECONDS, CLOSING_THRESHOLD, 1, TimeUnit.SECONDS);\r\n    long time = 10 * NANO_FACTOR;\r\n    for (int i = 0; i <= OPENING_THRESHOLD; i++) {\r\n        breaker.at(time++).incrementAndCheckState();\r\n    }\r\n    assertTrue(breaker.isOpen(), \"Not open\");\r\n    time += NANO_FACTOR - 1000;\r\n    assertFalse(breaker.at(time).incrementAndCheckState(), \"Already closed\");\r\n    time += 1001;\r\n    assertTrue(breaker.at(time).checkState(), \"Not closed in time interval\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\concurrent\\EventCountCircuitBreakerTest.java",
  "methodName" : "testChangeEvents",
  "sourceCode" : "/**\r\n * Tests whether events are generated when the state is changed.\r\n */\r\n@Test\r\nvoid testChangeEvents() {\r\n    final EventCountCircuitBreaker breaker = new EventCountCircuitBreaker(OPENING_THRESHOLD, 1, TimeUnit.SECONDS);\r\n    final ChangeListener listener = new ChangeListener(breaker);\r\n    breaker.addChangeListener(listener);\r\n    breaker.open();\r\n    breaker.close();\r\n    listener.verify(Boolean.TRUE, Boolean.FALSE);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\concurrent\\EventCountCircuitBreakerTest.java",
  "methodName" : "testChangeEventsGeneratedByAutomaticTransitions",
  "sourceCode" : "/**\r\n * Tests that automatic state transitions generate change events as well.\r\n */\r\n@Test\r\nvoid testChangeEventsGeneratedByAutomaticTransitions() {\r\n    final EventCountCircuitBreakerTestImpl breaker = new EventCountCircuitBreakerTestImpl(OPENING_THRESHOLD, 2, TimeUnit.SECONDS, CLOSING_THRESHOLD, 1, TimeUnit.SECONDS);\r\n    final ChangeListener listener = new ChangeListener(breaker);\r\n    breaker.addChangeListener(listener);\r\n    long time = 0;\r\n    for (int i = 0; i <= OPENING_THRESHOLD; i++, time += 1000) {\r\n        breaker.at(time).incrementAndCheckState();\r\n    }\r\n    breaker.at(NANO_FACTOR + 1).checkState();\r\n    breaker.at(3 * NANO_FACTOR).checkState();\r\n    listener.verify(Boolean.TRUE, Boolean.FALSE);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\concurrent\\EventCountCircuitBreakerTest.java",
  "methodName" : "testClose",
  "sourceCode" : "/**\r\n * Tests whether the circuit breaker can be closed explicitly.\r\n */\r\n@Test\r\nvoid testClose() {\r\n    final EventCountCircuitBreakerTestImpl breaker = new EventCountCircuitBreakerTestImpl(OPENING_THRESHOLD, 2, TimeUnit.SECONDS, CLOSING_THRESHOLD, 1, TimeUnit.SECONDS);\r\n    long time = 0;\r\n    for (int i = 0; i <= OPENING_THRESHOLD; i++, time += 1000) {\r\n        breaker.at(time).incrementAndCheckState();\r\n    }\r\n    assertTrue(breaker.isOpen(), \"Not open\");\r\n    breaker.close();\r\n    assertTrue(breaker.isClosed(), \"Not closed\");\r\n    assertTrue(breaker.at(time + 1000).incrementAndCheckState(), \"Open again\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\concurrent\\EventCountCircuitBreakerTest.java",
  "methodName" : "testClosingWhenThresholdReached",
  "sourceCode" : "/**\r\n * Tests that the circuit breaker closes automatically if the number of events\r\n * received goes under the closing threshold.\r\n */\r\n@Test\r\nvoid testClosingWhenThresholdReached() {\r\n    final EventCountCircuitBreakerTestImpl breaker = new EventCountCircuitBreakerTestImpl(OPENING_THRESHOLD, 10, TimeUnit.SECONDS, CLOSING_THRESHOLD, 1, TimeUnit.SECONDS);\r\n    breaker.open();\r\n    breaker.at(1000).incrementAndCheckState();\r\n    assertFalse(breaker.at(2000).checkState(), \"Already closed\");\r\n    assertFalse(breaker.at(NANO_FACTOR).checkState(), \"Closed at interval end\");\r\n    assertTrue(breaker.at(NANO_FACTOR + 1).checkState(), \"Not closed after interval end\");\r\n    assertTrue(breaker.isClosed(), \"Not closed at end\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\concurrent\\EventCountCircuitBreakerTest.java",
  "methodName" : "testDefaultClosingInterval",
  "sourceCode" : "/**\r\n * Tests that the closing interval is the same as the opening interval if it is not\r\n * specified.\r\n */\r\n@Test\r\nvoid testDefaultClosingInterval() {\r\n    final EventCountCircuitBreaker breaker = new EventCountCircuitBreaker(OPENING_THRESHOLD, 1, TimeUnit.SECONDS, CLOSING_THRESHOLD);\r\n    assertEquals(NANO_FACTOR, breaker.getClosingInterval(), \"Wrong closing interval\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\concurrent\\EventCountCircuitBreakerTest.java",
  "methodName" : "testDefaultClosingThreshold",
  "sourceCode" : "/**\r\n * Tests that the closing threshold is the same as the opening threshold if not\r\n * specified otherwise.\r\n */\r\n@Test\r\nvoid testDefaultClosingThreshold() {\r\n    final EventCountCircuitBreaker breaker = new EventCountCircuitBreaker(OPENING_THRESHOLD, 1, TimeUnit.SECONDS);\r\n    assertEquals(NANO_FACTOR, breaker.getClosingInterval(), \"Wrong closing interval\");\r\n    assertEquals(OPENING_THRESHOLD, breaker.getClosingThreshold(), \"Wrong closing threshold\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\concurrent\\EventCountCircuitBreakerTest.java",
  "methodName" : "testInitiallyClosed",
  "sourceCode" : "/**\r\n * Tests that a circuit breaker is closed after its creation.\r\n */\r\n@Test\r\nvoid testInitiallyClosed() {\r\n    final EventCountCircuitBreaker breaker = new EventCountCircuitBreaker(OPENING_THRESHOLD, 1, TimeUnit.SECONDS);\r\n    assertFalse(breaker.isOpen(), \"Open\");\r\n    assertTrue(breaker.isClosed(), \"Not closed\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\concurrent\\EventCountCircuitBreakerTest.java",
  "methodName" : "testIntervalCalculation",
  "sourceCode" : "/**\r\n * Tests that time units are correctly taken into account by constructors.\r\n */\r\n@Test\r\nvoid testIntervalCalculation() {\r\n    final EventCountCircuitBreaker breaker = new EventCountCircuitBreaker(OPENING_THRESHOLD, 1, TimeUnit.SECONDS, CLOSING_THRESHOLD, 2, TimeUnit.MILLISECONDS);\r\n    assertEquals(NANO_FACTOR, breaker.getOpeningInterval(), \"Wrong opening interval\");\r\n    assertEquals(2 * NANO_FACTOR / 1000, breaker.getClosingInterval(), \"Wrong closing interval\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\concurrent\\EventCountCircuitBreakerTest.java",
  "methodName" : "testNotClosingOverThreshold",
  "sourceCode" : "/**\r\n * Tests that an open circuit breaker does not close itself when the number of events\r\n * received is over the threshold.\r\n */\r\n@Test\r\nvoid testNotClosingOverThreshold() {\r\n    final EventCountCircuitBreakerTestImpl breaker = new EventCountCircuitBreakerTestImpl(OPENING_THRESHOLD, 10, TimeUnit.SECONDS, CLOSING_THRESHOLD, 1, TimeUnit.SECONDS);\r\n    long startTime = 0;\r\n    breaker.open();\r\n    for (int i = 0; i <= CLOSING_THRESHOLD; i++) {\r\n        assertFalse(breaker.at(startTime).incrementAndCheckState(), \"Not open\");\r\n        startTime += 1000;\r\n    }\r\n    assertFalse(breaker.at(startTime + NANO_FACTOR).incrementAndCheckState(), \"Closed in new interval\");\r\n    assertTrue(breaker.isOpen(), \"Not open at end\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\concurrent\\EventCountCircuitBreakerTest.java",
  "methodName" : "testNotOpeningCheckIntervalExceeded",
  "sourceCode" : "/**\r\n * Tests that the circuit breaker stays closed if there are a number of received\r\n * events, but not in a single check interval.\r\n */\r\n@Test\r\nvoid testNotOpeningCheckIntervalExceeded() {\r\n    long startTime = 0L;\r\n    final long timeIncrement = 3 * NANO_FACTOR / (2 * OPENING_THRESHOLD);\r\n    final EventCountCircuitBreakerTestImpl breaker = new EventCountCircuitBreakerTestImpl(OPENING_THRESHOLD, 1, TimeUnit.SECONDS, CLOSING_THRESHOLD, 1, TimeUnit.SECONDS);\r\n    for (int i = 0; i < 5 * OPENING_THRESHOLD; i++) {\r\n        assertTrue(breaker.at(startTime).incrementAndCheckState(), \"In open state\");\r\n        startTime += timeIncrement;\r\n    }\r\n    assertTrue(breaker.isClosed(), \"Not closed\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\concurrent\\EventCountCircuitBreakerTest.java",
  "methodName" : "testNotOpeningUnderThreshold",
  "sourceCode" : "/**\r\n * Tests that the circuit breaker stays closed if the number of received events stays\r\n * below the threshold.\r\n */\r\n@Test\r\nvoid testNotOpeningUnderThreshold() {\r\n    long startTime = 1000;\r\n    final EventCountCircuitBreakerTestImpl breaker = new EventCountCircuitBreakerTestImpl(OPENING_THRESHOLD, 1, TimeUnit.SECONDS, CLOSING_THRESHOLD, 1, TimeUnit.SECONDS);\r\n    for (int i = 0; i < OPENING_THRESHOLD - 1; i++) {\r\n        assertTrue(breaker.at(startTime).incrementAndCheckState(), \"In open state\");\r\n        startTime++;\r\n    }\r\n    assertTrue(breaker.isClosed(), \"Not closed\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\concurrent\\EventCountCircuitBreakerTest.java",
  "methodName" : "testNow",
  "sourceCode" : "/**\r\n * Tests whether the current time is correctly determined.\r\n */\r\n@Test\r\nvoid testNow() {\r\n    final EventCountCircuitBreaker breaker = new EventCountCircuitBreaker(OPENING_THRESHOLD, 1, TimeUnit.SECONDS);\r\n    final long nowNanos = breaker.nanoTime();\r\n    final long deltaNanos = Math.abs(System.nanoTime() - nowNanos);\r\n    assertTrue(deltaNanos < 100_000, String.format(\"Delta %,d ns to current time too large\", deltaNanos));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\concurrent\\EventCountCircuitBreakerTest.java",
  "methodName" : "testOpeningWhenThresholdReached",
  "sourceCode" : "/**\r\n * Tests that the circuit breaker opens if all conditions are met.\r\n */\r\n@Test\r\nvoid testOpeningWhenThresholdReached() {\r\n    long startTime = 0;\r\n    final long timeIncrement = NANO_FACTOR / OPENING_THRESHOLD - 1;\r\n    final EventCountCircuitBreakerTestImpl breaker = new EventCountCircuitBreakerTestImpl(OPENING_THRESHOLD, 1, TimeUnit.SECONDS, CLOSING_THRESHOLD, 1, TimeUnit.SECONDS);\r\n    boolean open = false;\r\n    for (int i = 0; i < OPENING_THRESHOLD + 1; i++) {\r\n        open = !breaker.at(startTime).incrementAndCheckState();\r\n        startTime += timeIncrement;\r\n    }\r\n    assertTrue(open, \"Not open\");\r\n    assertFalse(breaker.isClosed(), \"Closed\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\concurrent\\EventCountCircuitBreakerTest.java",
  "methodName" : "testOpeningWhenThresholdReachedThroughBatch",
  "sourceCode" : "/**\r\n * Tests that the circuit breaker opens if all conditions are met when using\r\n * {@link EventCountCircuitBreaker#incrementAndCheckState(Integer increment)}.\r\n */\r\n@Test\r\nvoid testOpeningWhenThresholdReachedThroughBatch() {\r\n    final long timeIncrement = NANO_FACTOR / OPENING_THRESHOLD - 1;\r\n    final EventCountCircuitBreakerTestImpl breaker = new EventCountCircuitBreakerTestImpl(OPENING_THRESHOLD, 1, TimeUnit.SECONDS, CLOSING_THRESHOLD, 1, TimeUnit.SECONDS);\r\n    final long startTime = timeIncrement * (OPENING_THRESHOLD + 1);\r\n    final boolean open = !breaker.at(startTime).incrementAndCheckState(OPENING_THRESHOLD + 1);\r\n    assertTrue(open, \"Not open\");\r\n    assertFalse(breaker.isClosed(), \"Closed\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\concurrent\\EventCountCircuitBreakerTest.java",
  "methodName" : "testOpenStartsNewCheckInterval",
  "sourceCode" : "/**\r\n * Tests whether an explicit open operation fully initializes the internal check data\r\n * object. Otherwise, the circuit breaker may close itself directly afterwards.\r\n */\r\n@Test\r\nvoid testOpenStartsNewCheckInterval() {\r\n    final EventCountCircuitBreakerTestImpl breaker = new EventCountCircuitBreakerTestImpl(OPENING_THRESHOLD, 2, TimeUnit.SECONDS, CLOSING_THRESHOLD, 1, TimeUnit.SECONDS);\r\n    breaker.at(NANO_FACTOR - 1000).open();\r\n    assertTrue(breaker.isOpen(), \"Not open\");\r\n    assertFalse(breaker.at(NANO_FACTOR + 100).checkState(), \"Already closed\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\concurrent\\EventCountCircuitBreakerTest.java",
  "methodName" : "testRemoveChangeListener",
  "sourceCode" : "/**\r\n * Tests whether a change listener can be removed.\r\n */\r\n@Test\r\nvoid testRemoveChangeListener() {\r\n    final EventCountCircuitBreaker breaker = new EventCountCircuitBreaker(OPENING_THRESHOLD, 1, TimeUnit.SECONDS);\r\n    final ChangeListener listener = new ChangeListener(breaker);\r\n    breaker.addChangeListener(listener);\r\n    breaker.open();\r\n    breaker.removeChangeListener(listener);\r\n    breaker.close();\r\n    listener.verify(Boolean.TRUE);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\concurrent\\EventCountCircuitBreakerTest.java",
  "methodName" : "testStateTransitionGuarded",
  "sourceCode" : "/**\r\n * Tests that a state transition triggered by multiple threads is handled correctly.\r\n * Only the first transition should cause an event to be sent.\r\n */\r\n@Test\r\nvoid testStateTransitionGuarded() throws InterruptedException {\r\n    final EventCountCircuitBreaker breaker = new EventCountCircuitBreaker(OPENING_THRESHOLD, 1, TimeUnit.SECONDS);\r\n    final ChangeListener listener = new ChangeListener(breaker);\r\n    breaker.addChangeListener(listener);\r\n    final int threadCount = 128;\r\n    final CountDownLatch latch = new CountDownLatch(1);\r\n    final Thread[] threads = new Thread[threadCount];\r\n    for (int i = 0; i < threadCount; i++) {\r\n        threads[i] = new Thread() {\r\n\r\n            @Override\r\n            public void run() {\r\n                try {\r\n                    latch.await();\r\n                } catch (final InterruptedException iex) {\r\n                    // ignore\r\n                }\r\n                breaker.open();\r\n            }\r\n        };\r\n        threads[i].start();\r\n    }\r\n    latch.countDown();\r\n    for (final Thread thread : threads) {\r\n        thread.join();\r\n    }\r\n    listener.verify(Boolean.TRUE);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\concurrent\\FutureTasksTest.java",
  "methodName" : "testRun",
  "sourceCode" : "@Test\r\nvoid testRun() throws InterruptedException, ExecutionException {\r\n    final String data = \"Hello\";\r\n    final FutureTask<String> f = FutureTasks.run(() -> data);\r\n    assertTrue(f.isDone());\r\n    assertEquals(data, f.get());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\concurrent\\LazyInitializerAnonClassTest.java",
  "methodName" : "testIsInitialized",
  "sourceCode" : "@Test\r\nvoid testIsInitialized() throws ConcurrentException {\r\n    final LazyInitializer<Object> initializer = createInitializer();\r\n    assertFalse(initializer.isInitialized());\r\n    initializer.get();\r\n    assertTrue(initializer.isInitialized());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\concurrent\\LazyInitializerCloserTest.java",
  "methodName" : "testIsInitialized",
  "sourceCode" : "@Test\r\nvoid testIsInitialized() throws ConcurrentException {\r\n    final LazyInitializer<Object> initializer = createInitializer();\r\n    assertFalse(initializer.isInitialized());\r\n    initializer.get();\r\n    assertTrue(initializer.isInitialized());\r\n    assertFalse(closed.get());\r\n    initializer.close();\r\n    assertTrue(closed.get());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\concurrent\\LazyInitializerFailableCloserTest.java",
  "methodName" : "testIsInitialized",
  "sourceCode" : "@Test\r\nvoid testIsInitialized() throws ConcurrentException {\r\n    final LazyInitializer<Object> initializer = createInitializer();\r\n    assertFalse(initializer.isInitialized());\r\n    initializer.get();\r\n    assertTrue(initializer.isInitialized());\r\n    assertFalse(closed.get());\r\n    initializer.close();\r\n    assertTrue(closed.get());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\concurrent\\LazyInitializerSimpleTest.java",
  "methodName" : "testIsInitialized",
  "sourceCode" : "@Test\r\nvoid testIsInitialized() throws ConcurrentException {\r\n    final LazyInitializer<Object> initializer = createInitializer();\r\n    assertFalse(initializer.isInitialized());\r\n    initializer.get();\r\n    assertTrue(initializer.isInitialized());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\concurrent\\LazyInitializerSingleInstanceTest.java",
  "methodName" : "testIsInitialized",
  "sourceCode" : "@Test\r\nvoid testIsInitialized() throws ConcurrentException {\r\n    final LazyInitializer<Object> initializer = createInitializer();\r\n    assertFalse(initializer.isInitialized());\r\n    initializer.get();\r\n    assertTrue(initializer.isInitialized());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\concurrent\\locks\\LockingVisitorsTest.java",
  "methodName" : "testBuilderLockVisitor",
  "sourceCode" : "@ParameterizedTest\r\n@ValueSource(booleans = { true, false })\r\nvoid testBuilderLockVisitor(final boolean fair) {\r\n    final AtomicInteger obj = new AtomicInteger();\r\n    final ReadWriteLock lock = new ReentrantReadWriteLock(fair);\r\n    // @formatter:off\r\n    final LockVisitor<AtomicInteger, ReadWriteLock> lockVisitor = new LockVisitor.LVBuilder().setObject(obj).setLock(lock).setReadLockSupplier(lock::readLock).setWriteLockSupplier(lock::writeLock).get();\r\n    // @formatter:on\r\n    lockVisitor.acceptReadLocked(AtomicInteger::incrementAndGet);\r\n    assertEquals(1, obj.get());\r\n    lockVisitor.acceptReadLocked(AtomicInteger::incrementAndGet);\r\n    assertEquals(2, obj.get());\r\n}",
  "annotations" : [ "ParameterizedTest" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\concurrent\\locks\\LockingVisitorsTest.java",
  "methodName" : "testBuilderReadWriteLockVisitor",
  "sourceCode" : "@ParameterizedTest\r\n@ValueSource(booleans = { true, false })\r\nvoid testBuilderReadWriteLockVisitor(final boolean fair) {\r\n    final AtomicInteger obj = new AtomicInteger();\r\n    final ReadWriteLock lock = new ReentrantReadWriteLock(fair);\r\n    // @formatter:off\r\n    final LockingVisitors.ReadWriteLockVisitor<AtomicInteger> lockVisitor = ReadWriteLockVisitor.<AtomicInteger>builder().setObject(obj).setLock(lock).get();\r\n    // @formatter:on\r\n    lockVisitor.acceptReadLocked(AtomicInteger::incrementAndGet);\r\n    assertEquals(1, obj.get());\r\n    lockVisitor.acceptReadLocked(AtomicInteger::incrementAndGet);\r\n    assertEquals(2, obj.get());\r\n}",
  "annotations" : [ "ParameterizedTest" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\concurrent\\locks\\LockingVisitorsTest.java",
  "methodName" : "testBuilderReentrantLockVisitor",
  "sourceCode" : "@ParameterizedTest\r\n@ValueSource(booleans = { true, false })\r\nvoid testBuilderReentrantLockVisitor(final boolean fair) {\r\n    final AtomicInteger obj = new AtomicInteger();\r\n    final ReentrantLock lock = new ReentrantLock(fair);\r\n    // @formatter:off\r\n    final LockingVisitors.ReentrantLockVisitor<AtomicInteger> lockVisitor = ReentrantLockVisitor.<AtomicInteger>builder().setObject(obj).setLock(lock).get();\r\n    // @formatter:on\r\n    lockVisitor.acceptReadLocked(AtomicInteger::incrementAndGet);\r\n    assertEquals(1, obj.get());\r\n    lockVisitor.acceptReadLocked(AtomicInteger::incrementAndGet);\r\n    assertEquals(2, obj.get());\r\n}",
  "annotations" : [ "ParameterizedTest" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\concurrent\\locks\\LockingVisitorsTest.java",
  "methodName" : "testBuilderReentrantReadWriteLockVisitor",
  "sourceCode" : "@ParameterizedTest\r\n@ValueSource(booleans = { true, false })\r\nvoid testBuilderReentrantReadWriteLockVisitor(final boolean fair) {\r\n    final AtomicInteger obj = new AtomicInteger();\r\n    final ReentrantReadWriteLock lock = new ReentrantReadWriteLock(fair);\r\n    // @formatter:off\r\n    final LockingVisitors.ReadWriteLockVisitor<AtomicInteger> lockVisitor = ReadWriteLockVisitor.<AtomicInteger>builder().setObject(obj).setLock(lock).get();\r\n    // @formatter:on\r\n    lockVisitor.acceptReadLocked(AtomicInteger::incrementAndGet);\r\n    assertEquals(1, obj.get());\r\n    lockVisitor.acceptReadLocked(AtomicInteger::incrementAndGet);\r\n    assertEquals(2, obj.get());\r\n}",
  "annotations" : [ "ParameterizedTest" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\concurrent\\locks\\LockingVisitorsTest.java",
  "methodName" : "testBuilderReentrantStampedLockVisitor",
  "sourceCode" : "@Test\r\nvoid testBuilderReentrantStampedLockVisitor() {\r\n    final AtomicInteger obj = new AtomicInteger();\r\n    final StampedLock lock = new StampedLock();\r\n    // @formatter:off\r\n    final LockingVisitors.StampedLockVisitor<AtomicInteger> lockVisitor = StampedLockVisitor.<AtomicInteger>builder().setObject(obj).setLock(lock).get();\r\n    // @formatter:on\r\n    lockVisitor.acceptReadLocked(AtomicInteger::incrementAndGet);\r\n    assertEquals(1, obj.get());\r\n    lockVisitor.acceptReadLocked(AtomicInteger::incrementAndGet);\r\n    assertEquals(2, obj.get());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\concurrent\\locks\\LockingVisitorsTest.java",
  "methodName" : "testCreate",
  "sourceCode" : "@Test\r\nvoid testCreate() {\r\n    final AtomicInteger obj = new AtomicInteger();\r\n    final ReadWriteLock lock = new ReentrantReadWriteLock();\r\n    LockingVisitors.create(obj, lock).acceptReadLocked(AtomicInteger::incrementAndGet);\r\n    LockingVisitors.create(obj, lock).acceptReadLocked(null);\r\n    assertEquals(1, obj.get());\r\n    LockingVisitors.create(obj, lock).acceptWriteLocked(AtomicInteger::incrementAndGet);\r\n    LockingVisitors.create(obj, lock).acceptWriteLocked(null);\r\n    assertEquals(2, obj.get());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\concurrent\\locks\\LockingVisitorsTest.java",
  "methodName" : "testDeprecatedConstructor",
  "sourceCode" : "@SuppressWarnings(\"deprecation\")\r\n@Test\r\nvoid testDeprecatedConstructor() {\r\n    assertNotNull(new LockingVisitors().toString());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\concurrent\\locks\\LockingVisitorsTest.java",
  "methodName" : "testReentrantLock",
  "sourceCode" : "@Test\r\nvoid testReentrantLock() throws Exception {\r\n    // If our threads are running concurrently, then we expect to be faster than running one after the other.\r\n    final boolean[] booleanValues = new boolean[10];\r\n    runTest(DELAY, false, millis -> assertTrue(millis < TOTAL_DELAY.toMillis()), booleanValues, LockingVisitors.reentrantLockVisitor(booleanValues));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\concurrent\\locks\\LockingVisitorsTest.java",
  "methodName" : "testReentrantLockFairness",
  "sourceCode" : "@ParameterizedTest\r\n@ValueSource(booleans = { true, false })\r\nvoid testReentrantLockFairness(final boolean fairness) throws Exception {\r\n    // If our threads are running concurrently, then we expect to be faster than running one after the other.\r\n    final boolean[] booleanValues = new boolean[10];\r\n    runTest(DELAY, false, millis -> assertTrue(millis < TOTAL_DELAY.toMillis()), booleanValues, LockingVisitors.create(booleanValues, new ReentrantLock(fairness)));\r\n}",
  "annotations" : [ "ParameterizedTest" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\concurrent\\locks\\LockingVisitorsTest.java",
  "methodName" : "testReentrantReadWriteLockExclusive",
  "sourceCode" : "@Test\r\nvoid testReentrantReadWriteLockExclusive() throws Exception {\r\n    // If our threads are running concurrently, then we expect to be no faster than running one after the other.\r\n    final boolean[] booleanValues = new boolean[10];\r\n    runTest(DELAY, true, millis -> assertTrue(millis >= TOTAL_DELAY.toMillis()), booleanValues, LockingVisitors.reentrantReadWriteLockVisitor(booleanValues));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\concurrent\\locks\\LockingVisitorsTest.java",
  "methodName" : "testReentrantReadWriteLockNotExclusive",
  "sourceCode" : "@Test\r\nvoid testReentrantReadWriteLockNotExclusive() throws Exception {\r\n    // If our threads are running concurrently, then we expect to be faster than running one after the other.\r\n    final boolean[] booleanValues = new boolean[10];\r\n    runTest(DELAY, false, millis -> assertTrue(millis < TOTAL_DELAY.toMillis()), booleanValues, LockingVisitors.reentrantReadWriteLockVisitor(booleanValues));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\concurrent\\locks\\LockingVisitorsTest.java",
  "methodName" : "testResultValidation",
  "sourceCode" : "@Test\r\nvoid testResultValidation() {\r\n    final Object hidden = new Object();\r\n    final StampedLockVisitor<Object> lock = LockingVisitors.stampedLockVisitor(hidden);\r\n    final Object o1 = lock.applyReadLocked(h -> new Object());\r\n    assertNotNull(o1);\r\n    assertNotSame(hidden, o1);\r\n    final Object o2 = lock.applyWriteLocked(h -> new Object());\r\n    assertNotNull(o2);\r\n    assertNotSame(hidden, o2);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\concurrent\\locks\\LockingVisitorsTest.java",
  "methodName" : "testStampedLockExclusive",
  "sourceCode" : "@Test\r\nvoid testStampedLockExclusive() throws Exception {\r\n    // If our threads are running concurrently, then we expect to be no faster than running one after the other.\r\n    final boolean[] booleanValues = new boolean[10];\r\n    runTest(DELAY, true, millis -> assertTrue(millis >= TOTAL_DELAY.toMillis()), booleanValues, LockingVisitors.stampedLockVisitor(booleanValues));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\concurrent\\locks\\LockingVisitorsTest.java",
  "methodName" : "testStampedLockNotExclusive",
  "sourceCode" : "@Test\r\nvoid testStampedLockNotExclusive() throws Exception {\r\n    // If our threads are running concurrently, then we expect to be faster than running one after the other.\r\n    final boolean[] booleanValues = new boolean[10];\r\n    runTest(DELAY, false, millis -> assertTrue(millis < TOTAL_DELAY.toMillis()), booleanValues, LockingVisitors.stampedLockVisitor(booleanValues));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\concurrent\\MemoizerComputableTest.java",
  "methodName" : "testDefaultBehaviourNotToRecalculateExecutionExceptions",
  "sourceCode" : "@Test\r\nvoid testDefaultBehaviourNotToRecalculateExecutionExceptions() throws Exception {\r\n    final Integer input = 1;\r\n    final Memoizer<Integer, Integer> memoizer = new Memoizer<>(computable);\r\n    final InterruptedException interruptedException = new InterruptedException();\r\n    expect(computable.compute(input)).andThrow(interruptedException);\r\n    replay(computable);\r\n    assertThrows(Throwable.class, () -> memoizer.compute(input));\r\n    assertThrows(IllegalStateException.class, () -> memoizer.compute(input));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\concurrent\\MemoizerComputableTest.java",
  "methodName" : "testDoesNotRecalculateWhenSetToFalse",
  "sourceCode" : "@Test\r\nvoid testDoesNotRecalculateWhenSetToFalse() throws Exception {\r\n    final Integer input = 1;\r\n    final Memoizer<Integer, Integer> memoizer = new Memoizer<>(computable, false);\r\n    final InterruptedException interruptedException = new InterruptedException();\r\n    expect(computable.compute(input)).andThrow(interruptedException);\r\n    replay(computable);\r\n    assertThrows(Throwable.class, () -> memoizer.compute(input));\r\n    assertThrows(IllegalStateException.class, () -> memoizer.compute(input));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\concurrent\\MemoizerComputableTest.java",
  "methodName" : "testDoesRecalculateWhenSetToTrue",
  "sourceCode" : "@Test\r\nvoid testDoesRecalculateWhenSetToTrue() throws Exception {\r\n    final Integer input = 1;\r\n    final Integer answer = 3;\r\n    final Memoizer<Integer, Integer> memoizer = new Memoizer<>(computable, true);\r\n    final InterruptedException interruptedException = new InterruptedException();\r\n    expect(computable.compute(input)).andThrow(interruptedException).andReturn(answer);\r\n    replay(computable);\r\n    assertThrows(Throwable.class, () -> memoizer.compute(input));\r\n    assertEquals(answer, memoizer.compute(input));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\concurrent\\MemoizerComputableTest.java",
  "methodName" : "testOnlyCallComputableOnceIfDoesNotThrowException",
  "sourceCode" : "@Test\r\nvoid testOnlyCallComputableOnceIfDoesNotThrowException() throws Exception {\r\n    final Integer input = 1;\r\n    final Memoizer<Integer, Integer> memoizer = new Memoizer<>(computable);\r\n    expect(computable.compute(input)).andReturn(input);\r\n    replay(computable);\r\n    assertEquals(input, memoizer.compute(input), \"Should call computable first time\");\r\n    assertEquals(input, memoizer.compute(input), \"Should not call the computable the second time\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\concurrent\\MemoizerComputableTest.java",
  "methodName" : "testWhenComputableThrowsError",
  "sourceCode" : "@Test\r\nvoid testWhenComputableThrowsError() throws Exception {\r\n    final Integer input = 1;\r\n    final Memoizer<Integer, Integer> memoizer = new Memoizer<>(computable);\r\n    final Error error = new Error();\r\n    expect(computable.compute(input)).andThrow(error);\r\n    replay(computable);\r\n    assertThrows(Error.class, () -> memoizer.compute(input));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\concurrent\\MemoizerComputableTest.java",
  "methodName" : "testWhenComputableThrowsRuntimeException",
  "sourceCode" : "@Test\r\nvoid testWhenComputableThrowsRuntimeException() throws Exception {\r\n    final Integer input = 1;\r\n    final Memoizer<Integer, Integer> memoizer = new Memoizer<>(computable);\r\n    final RuntimeException runtimeException = new RuntimeException(\"Some runtime exception\");\r\n    expect(computable.compute(input)).andThrow(runtimeException);\r\n    replay(computable);\r\n    assertThrows(RuntimeException.class, () -> memoizer.compute(input));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\concurrent\\MemoizerFunctionTest.java",
  "methodName" : "testDefaultBehaviourNotToRecalculateExecutionExceptions",
  "sourceCode" : "@Test\r\nvoid testDefaultBehaviourNotToRecalculateExecutionExceptions() throws Exception {\r\n    final Integer input = 1;\r\n    final Memoizer<Integer, Integer> memoizer = new Memoizer<>(function);\r\n    final IllegalArgumentException interruptedException = new IllegalArgumentException();\r\n    expect(function.apply(input)).andThrow(interruptedException);\r\n    replay(function);\r\n    assertThrows(Throwable.class, () -> memoizer.compute(input));\r\n    assertIllegalArgumentException(() -> memoizer.compute(input));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\concurrent\\MemoizerFunctionTest.java",
  "methodName" : "testDoesNotRecalculateWhenSetToFalse",
  "sourceCode" : "@Test\r\nvoid testDoesNotRecalculateWhenSetToFalse() throws Exception {\r\n    final Integer input = 1;\r\n    final Memoizer<Integer, Integer> memoizer = new Memoizer<>(function, false);\r\n    final IllegalArgumentException interruptedException = new IllegalArgumentException();\r\n    expect(function.apply(input)).andThrow(interruptedException);\r\n    replay(function);\r\n    assertThrows(Throwable.class, () -> memoizer.compute(input));\r\n    assertIllegalArgumentException(() -> memoizer.compute(input));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\concurrent\\MemoizerFunctionTest.java",
  "methodName" : "testDoesRecalculateWhenSetToTrue",
  "sourceCode" : "@Test\r\nvoid testDoesRecalculateWhenSetToTrue() throws Exception {\r\n    final Integer input = 1;\r\n    final Integer answer = 3;\r\n    final Memoizer<Integer, Integer> memoizer = new Memoizer<>(function, true);\r\n    final IllegalArgumentException interruptedException = new IllegalArgumentException();\r\n    expect(function.apply(input)).andThrow(interruptedException).andReturn(answer);\r\n    replay(function);\r\n    assertThrows(Throwable.class, () -> memoizer.compute(input));\r\n    assertEquals(answer, memoizer.compute(input));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\concurrent\\MemoizerFunctionTest.java",
  "methodName" : "testOnlyCallComputableOnceIfDoesNotThrowException",
  "sourceCode" : "@Test\r\nvoid testOnlyCallComputableOnceIfDoesNotThrowException() throws Exception {\r\n    final Integer input = 1;\r\n    final Memoizer<Integer, Integer> memoizer = new Memoizer<>(function);\r\n    expect(function.apply(input)).andReturn(input);\r\n    replay(function);\r\n    assertEquals(input, memoizer.compute(input), \"Should call computable first time\");\r\n    assertEquals(input, memoizer.compute(input), \"Should not call the computable the second time\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\concurrent\\MemoizerFunctionTest.java",
  "methodName" : "testWhenComputableThrowsError",
  "sourceCode" : "@Test\r\nvoid testWhenComputableThrowsError() throws Exception {\r\n    final Integer input = 1;\r\n    final Memoizer<Integer, Integer> memoizer = new Memoizer<>(function);\r\n    final Error error = new Error();\r\n    expect(function.apply(input)).andThrow(error);\r\n    replay(function);\r\n    assertThrows(Error.class, () -> memoizer.compute(input));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\concurrent\\MemoizerFunctionTest.java",
  "methodName" : "testWhenComputableThrowsRuntimeException",
  "sourceCode" : "@Test\r\nvoid testWhenComputableThrowsRuntimeException() throws Exception {\r\n    final Integer input = 1;\r\n    final Memoizer<Integer, Integer> memoizer = new Memoizer<>(function);\r\n    final RuntimeException runtimeException = new RuntimeException(\"Some runtime exception\");\r\n    expect(function.apply(input)).andThrow(runtimeException);\r\n    replay(function);\r\n    assertThrows(RuntimeException.class, () -> memoizer.compute(input));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\concurrent\\MultiBackgroundInitializerSupplierTest.java",
  "methodName" : "testClose",
  "sourceCode" : "/**\r\n * Tests that close() method closes the wrapped object\r\n *\r\n * @throws Exception\r\n */\r\n@Test\r\nvoid testClose() throws ConcurrentException, InterruptedException {\r\n    final AbstractChildBackgroundInitializer childOne = createChildBackgroundInitializer();\r\n    final AbstractChildBackgroundInitializer childTwo = createChildBackgroundInitializer();\r\n    assertFalse(initializer.isInitialized(), \"Initialized without having anything to initialize\");\r\n    initializer.addInitializer(\"child one\", childOne);\r\n    initializer.addInitializer(\"child two\", childTwo);\r\n    assertFalse(childOne.getCloseableCounter().isClosed(), \"child one closed() succeeded before start()\");\r\n    assertFalse(childTwo.getCloseableCounter().isClosed(), \"child two closed() succeeded before start()\");\r\n    initializer.start();\r\n    final long startTime = System.currentTimeMillis();\r\n    final long waitTime = 3000;\r\n    final long endTime = startTime + waitTime;\r\n    //wait for the children to start\r\n    while (!childOne.isStarted() || !childTwo.isStarted()) {\r\n        if (System.currentTimeMillis() > endTime) {\r\n            fail(\"children never started\");\r\n            Thread.sleep(PERIOD_MILLIS);\r\n        }\r\n    }\r\n    assertFalse(childOne.getCloseableCounter().isClosed(), \"child one close() succeeded after start() but before close()\");\r\n    assertFalse(childTwo.getCloseableCounter().isClosed(), \"child two close() succeeded after start() but before close()\");\r\n    // ensure this child finishes initializing\r\n    childOne.get();\r\n    // ensure this child finishes initializing\r\n    childTwo.get();\r\n    assertFalse(childOne.getCloseableCounter().isClosed(), \"child one initializing succeeded after start() but before close()\");\r\n    assertFalse(childTwo.getCloseableCounter().isClosed(), \"child two initializing succeeded after start() but before close()\");\r\n    try {\r\n        initializer.close();\r\n    } catch (final Exception e) {\r\n        fail();\r\n    }\r\n    assertTrue(childOne.getCloseableCounter().isClosed(), \"child one close() did not succeed\");\r\n    assertTrue(childOne.getCloseableCounter().isClosed(), \"child two close() did not succeed\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\concurrent\\MultiBackgroundInitializerSupplierTest.java",
  "methodName" : "testCloseWithCheckedException",
  "sourceCode" : "/**\r\n * Tests that close() wraps a checked exception from a child initializer in an ConcurrentException as the first suppressed under in an ConcurrentException\r\n *\r\n * @throws Exception\r\n */\r\n@Test\r\nvoid testCloseWithCheckedException() throws Exception {\r\n    final AbstractChildBackgroundInitializer childOne = new SupplierChildBackgroundInitializer(ioExceptionConsumer);\r\n    initializer.addInitializer(\"child one\", childOne);\r\n    initializer.start();\r\n    final long startTime = System.currentTimeMillis();\r\n    final long waitTime = 3000;\r\n    final long endTime = startTime + waitTime;\r\n    //wait for the children to start\r\n    while (!childOne.isStarted()) {\r\n        if (System.currentTimeMillis() > endTime) {\r\n            fail(\"children never started\");\r\n            Thread.sleep(PERIOD_MILLIS);\r\n        }\r\n    }\r\n    // ensure the Future has completed.\r\n    childOne.get();\r\n    try {\r\n        initializer.close();\r\n        fail();\r\n    } catch (final Exception e) {\r\n        assertInstanceOf(ConcurrentException.class, e);\r\n        assertSame(ioException, e.getSuppressed()[0]);\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\concurrent\\MultiBackgroundInitializerSupplierTest.java",
  "methodName" : "testCloseWithRuntimeException",
  "sourceCode" : "/**\r\n * Tests that close() wraps a runtime exception from a child initializer as the first suppressed under in an ConcurrentException\r\n *\r\n * @throws Exception\r\n */\r\n@Test\r\nvoid testCloseWithRuntimeException() throws Exception {\r\n    final AbstractChildBackgroundInitializer childOne = new SupplierChildBackgroundInitializer(nullPointerExceptionConsumer);\r\n    initializer.addInitializer(\"child one\", childOne);\r\n    initializer.start();\r\n    final long startTime = System.currentTimeMillis();\r\n    final long waitTime = 3000;\r\n    final long endTime = startTime + waitTime;\r\n    //wait for the children to start\r\n    while (!childOne.isStarted()) {\r\n        if (System.currentTimeMillis() > endTime) {\r\n            fail(\"children never started\");\r\n            Thread.sleep(PERIOD_MILLIS);\r\n        }\r\n    }\r\n    // ensure the Future has completed.\r\n    childOne.get();\r\n    try {\r\n        initializer.close();\r\n        fail();\r\n    } catch (final Exception e) {\r\n        assertInstanceOf(ConcurrentException.class, e);\r\n        assertSame(npe, e.getSuppressed()[0]);\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\concurrent\\MultiBackgroundInitializerSupplierTest.java",
  "methodName" : "testCloseWithTwoExceptions",
  "sourceCode" : "/**\r\n * Tests that calling close() on a MultiBackgroundInitializer with two children that both throw exceptions throws\r\n * an ConcurrentException and both the child exceptions are present\r\n *\r\n * @throws Exception\r\n */\r\n@Test\r\nvoid testCloseWithTwoExceptions() throws ConcurrentException, InterruptedException {\r\n    final AbstractChildBackgroundInitializer childOne = new SupplierChildBackgroundInitializer(ioExceptionConsumer);\r\n    final AbstractChildBackgroundInitializer childTwo = new SupplierChildBackgroundInitializer(nullPointerExceptionConsumer);\r\n    initializer.addInitializer(\"child one\", childOne);\r\n    initializer.addInitializer(\"child two\", childTwo);\r\n    initializer.start();\r\n    final long startTime = System.currentTimeMillis();\r\n    final long waitTime = 3000;\r\n    final long endTime = startTime + waitTime;\r\n    //wait for the children to start\r\n    while (!childOne.isStarted() || !childTwo.isStarted()) {\r\n        if (System.currentTimeMillis() > endTime) {\r\n            fail(\"children never started\");\r\n            Thread.sleep(PERIOD_MILLIS);\r\n        }\r\n    }\r\n    // ensure this child finishes initializing\r\n    childOne.get();\r\n    // ensure this child finishes initializing\r\n    childTwo.get();\r\n    try {\r\n        initializer.close();\r\n        fail();\r\n    } catch (final Exception e) {\r\n        // We don't actually know which order the children will be closed in\r\n        boolean foundChildOneException = false;\r\n        boolean foundChildTwoException = false;\r\n        for (final Throwable t : e.getSuppressed()) {\r\n            if (t.equals(ioException)) {\r\n                foundChildOneException = true;\r\n            }\r\n            if (t.equals(npe)) {\r\n                foundChildTwoException = true;\r\n            }\r\n        }\r\n        assertTrue(foundChildOneException);\r\n        assertTrue(foundChildTwoException);\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\concurrent\\MultiBackgroundInitializerTest.java",
  "methodName" : "testAddInitializerAfterStart",
  "sourceCode" : "/**\r\n * Tries to add another child initializer after the start() method has been\r\n * called. This should not be allowed.\r\n *\r\n * @throws org.apache.commons.lang3.concurrent.ConcurrentException so we don't have to catch it\r\n */\r\n@Test\r\nvoid testAddInitializerAfterStart() throws ConcurrentException {\r\n    initializer.start();\r\n    assertThrows(IllegalStateException.class, () -> initializer.addInitializer(CHILD_INIT, createChildBackgroundInitializer()), \"Could add initializer after start()!\");\r\n    initializer.get();\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\concurrent\\MultiBackgroundInitializerTest.java",
  "methodName" : "testAddInitializerNullInit",
  "sourceCode" : "/**\r\n * Tests addInitializer() if a null initializer is passed in. This should\r\n * cause an exception.\r\n */\r\n@Test\r\nvoid testAddInitializerNullInit() {\r\n    assertNullPointerException(() -> initializer.addInitializer(CHILD_INIT, null));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\concurrent\\MultiBackgroundInitializerTest.java",
  "methodName" : "testAddInitializerNullName",
  "sourceCode" : "/**\r\n * Tests addInitializer() if a null name is passed in. This should cause an\r\n * exception.\r\n */\r\n@Test\r\nvoid testAddInitializerNullName() {\r\n    assertNullPointerException(() -> initializer.addInitializer(null, createChildBackgroundInitializer()));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\concurrent\\MultiBackgroundInitializerTest.java",
  "methodName" : "testInitializeChildWithExecutor",
  "sourceCode" : "/**\r\n * Tests the behavior of initialize() if a child initializer has a specific\r\n * executor service. Then this service should not be overridden.\r\n *\r\n * @throws org.apache.commons.lang3.concurrent.ConcurrentException so we don't have to catch it\r\n */\r\n@Test\r\nvoid testInitializeChildWithExecutor() throws ConcurrentException, InterruptedException {\r\n    final String initExec = \"childInitializerWithExecutor\";\r\n    final ExecutorService exec = Executors.newSingleThreadExecutor();\r\n    try {\r\n        final AbstractChildBackgroundInitializer c1 = createChildBackgroundInitializer();\r\n        final AbstractChildBackgroundInitializer c2 = createChildBackgroundInitializer();\r\n        c2.setExternalExecutor(exec);\r\n        initializer.addInitializer(CHILD_INIT, c1);\r\n        initializer.addInitializer(initExec, c2);\r\n        initializer.start();\r\n        initializer.get();\r\n        checkChild(c1, initializer.getActiveExecutor());\r\n        checkChild(c2, exec);\r\n    } finally {\r\n        exec.shutdown();\r\n        exec.awaitTermination(1, TimeUnit.SECONDS);\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\concurrent\\MultiBackgroundInitializerTest.java",
  "methodName" : "testInitializeEx",
  "sourceCode" : "/**\r\n * Tests the behavior of the initializer if one of the child initializers\r\n * throws a checked exception.\r\n *\r\n * @throws org.apache.commons.lang3.concurrent.ConcurrentException so we don't have to catch it\r\n */\r\n@Test\r\nvoid testInitializeEx() throws ConcurrentException {\r\n    final AbstractChildBackgroundInitializer child = createChildBackgroundInitializer();\r\n    child.ex = new Exception();\r\n    initializer.addInitializer(CHILD_INIT, child);\r\n    initializer.start();\r\n    final MultiBackgroundInitializer.MultiBackgroundInitializerResults res = initializer.get();\r\n    assertTrue(res.isException(CHILD_INIT), \"No exception flag\");\r\n    assertNull(res.getResultObject(CHILD_INIT), \"Got a results object\");\r\n    final ConcurrentException cex = res.getException(CHILD_INIT);\r\n    assertEquals(child.ex, cex.getCause(), \"Wrong cause\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\concurrent\\MultiBackgroundInitializerTest.java",
  "methodName" : "testInitializeExternalExec",
  "sourceCode" : "/**\r\n * Tests background processing if an external executor service is provided.\r\n *\r\n * @throws org.apache.commons.lang3.concurrent.ConcurrentException so we don't have to catch it\r\n */\r\n@Test\r\nvoid testInitializeExternalExec() throws ConcurrentException, InterruptedException {\r\n    final ExecutorService exec = Executors.newCachedThreadPool();\r\n    try {\r\n        initializer = new MultiBackgroundInitializer(exec);\r\n        checkInitialize();\r\n        assertEquals(exec, initializer.getActiveExecutor(), \"Wrong executor\");\r\n        assertFalse(exec.isShutdown(), \"Executor was shutdown\");\r\n    } finally {\r\n        exec.shutdown();\r\n        exec.awaitTermination(1, TimeUnit.SECONDS);\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\concurrent\\MultiBackgroundInitializerTest.java",
  "methodName" : "testInitializeNested",
  "sourceCode" : "/**\r\n * Tests whether MultiBackgroundInitializers can be combined in a nested\r\n * way.\r\n *\r\n * @throws org.apache.commons.lang3.concurrent.ConcurrentException so we don't have to catch it\r\n */\r\n@Test\r\nvoid testInitializeNested() throws ConcurrentException {\r\n    final String nameMulti = \"multiChildInitializer\";\r\n    initializer.addInitializer(CHILD_INIT, createChildBackgroundInitializer());\r\n    final MultiBackgroundInitializer mi2 = new MultiBackgroundInitializer();\r\n    final int count = 3;\r\n    for (int i = 0; i < count; i++) {\r\n        mi2.addInitializer(CHILD_INIT + i, createChildBackgroundInitializer());\r\n    }\r\n    initializer.addInitializer(nameMulti, mi2);\r\n    initializer.start();\r\n    final MultiBackgroundInitializer.MultiBackgroundInitializerResults res = initializer.get();\r\n    final ExecutorService exec = initializer.getActiveExecutor();\r\n    checkChild(res.getInitializer(CHILD_INIT), exec);\r\n    final MultiBackgroundInitializer.MultiBackgroundInitializerResults res2 = (MultiBackgroundInitializer.MultiBackgroundInitializerResults) res.getResultObject(nameMulti);\r\n    assertEquals(count, res2.initializerNames().size(), \"Wrong number of initializers\");\r\n    for (int i = 0; i < count; i++) {\r\n        checkChild(res2.getInitializer(CHILD_INIT + i), exec);\r\n    }\r\n    assertTrue(exec.isShutdown(), \"Executor not shutdown\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\concurrent\\MultiBackgroundInitializerTest.java",
  "methodName" : "testInitializeNoChildren",
  "sourceCode" : "/**\r\n * Tests the background processing if there are no child initializers.\r\n *\r\n * @throws org.apache.commons.lang3.concurrent.ConcurrentException so we don't have to catch it\r\n */\r\n@Test\r\nvoid testInitializeNoChildren() throws ConcurrentException {\r\n    assertTrue(initializer.start(), \"Wrong result of start()\");\r\n    final MultiBackgroundInitializer.MultiBackgroundInitializerResults res = initializer.get();\r\n    assertTrue(res.initializerNames().isEmpty(), \"Got child initializers\");\r\n    assertTrue(initializer.getActiveExecutor().isShutdown(), \"Executor not shutdown\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\concurrent\\MultiBackgroundInitializerTest.java",
  "methodName" : "testInitializeResultsIsSuccessfulFalse",
  "sourceCode" : "/**\r\n * Tests the isSuccessful() method of the result object if at least one\r\n * child initializer has thrown an exception.\r\n *\r\n * @throws org.apache.commons.lang3.concurrent.ConcurrentException so we don't have to catch it\r\n */\r\n@Test\r\nvoid testInitializeResultsIsSuccessfulFalse() throws ConcurrentException {\r\n    final AbstractChildBackgroundInitializer child = createChildBackgroundInitializer();\r\n    child.ex = new Exception();\r\n    initializer.addInitializer(CHILD_INIT, child);\r\n    initializer.start();\r\n    final MultiBackgroundInitializer.MultiBackgroundInitializerResults res = initializer.get();\r\n    assertFalse(res.isSuccessful(), \"Wrong success flag\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\concurrent\\MultiBackgroundInitializerTest.java",
  "methodName" : "testInitializeResultsIsSuccessfulTrue",
  "sourceCode" : "/**\r\n * Tests the isSuccessful() method of the result object if no child\r\n * initializer has thrown an exception.\r\n *\r\n * @throws org.apache.commons.lang3.concurrent.ConcurrentException so we don't have to catch it\r\n */\r\n@Test\r\nvoid testInitializeResultsIsSuccessfulTrue() throws ConcurrentException {\r\n    final AbstractChildBackgroundInitializer child = createChildBackgroundInitializer();\r\n    initializer.addInitializer(CHILD_INIT, child);\r\n    initializer.start();\r\n    final MultiBackgroundInitializer.MultiBackgroundInitializerResults res = initializer.get();\r\n    assertTrue(res.isSuccessful(), \"Wrong success flag\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\concurrent\\MultiBackgroundInitializerTest.java",
  "methodName" : "testInitializeRuntimeEx",
  "sourceCode" : "/**\r\n * Tests the behavior of the initializer if one of the child initializers\r\n * throws a runtime exception.\r\n */\r\n@Test\r\nvoid testInitializeRuntimeEx() {\r\n    final AbstractChildBackgroundInitializer child = createChildBackgroundInitializer();\r\n    child.ex = new RuntimeException();\r\n    initializer.addInitializer(CHILD_INIT, child);\r\n    initializer.start();\r\n    final Exception ex = assertThrows(Exception.class, initializer::get);\r\n    assertEquals(child.ex, ex, \"Wrong exception\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\concurrent\\MultiBackgroundInitializerTest.java",
  "methodName" : "testInitializeTempExec",
  "sourceCode" : "/**\r\n * Tests background processing if a temporary executor is used.\r\n *\r\n * @throws org.apache.commons.lang3.concurrent.ConcurrentException so we don't have to catch it\r\n */\r\n@Test\r\nvoid testInitializeTempExec() throws ConcurrentException {\r\n    checkInitialize();\r\n    assertTrue(initializer.getActiveExecutor().isShutdown(), \"Executor not shutdown\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\concurrent\\MultiBackgroundInitializerTest.java",
  "methodName" : "testIsInitialized",
  "sourceCode" : "@Test\r\nvoid testIsInitialized() throws ConcurrentException, InterruptedException {\r\n    final AbstractChildBackgroundInitializer childOne = createChildBackgroundInitializer();\r\n    final AbstractChildBackgroundInitializer childTwo = createChildBackgroundInitializer();\r\n    childOne.enableLatch();\r\n    childTwo.enableLatch();\r\n    assertFalse(initializer.isInitialized(), \"Initialized without having anything to initialize\");\r\n    initializer.addInitializer(\"child one\", childOne);\r\n    initializer.addInitializer(\"child two\", childTwo);\r\n    initializer.start();\r\n    final long startTime = System.currentTimeMillis();\r\n    final long waitTime = 3000;\r\n    final long endTime = startTime + waitTime;\r\n    //wait for the children to start\r\n    while (!childOne.isStarted() || !childTwo.isStarted()) {\r\n        if (System.currentTimeMillis() > endTime) {\r\n            fail(\"children never started\");\r\n            Thread.sleep(PERIOD_MILLIS);\r\n        }\r\n    }\r\n    assertFalse(initializer.isInitialized(), \"Initialized with two children running\");\r\n    childOne.releaseLatch();\r\n    //ensure this child finishes initializing\r\n    childOne.get();\r\n    assertFalse(initializer.isInitialized(), \"Initialized with one child running\");\r\n    childTwo.releaseLatch();\r\n    //ensure this child finishes initializing\r\n    childTwo.get();\r\n    assertTrue(initializer.isInitialized(), \"Not initialized with no children running\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\concurrent\\MultiBackgroundInitializerTest.java",
  "methodName" : "testResultGetExceptionUnknown",
  "sourceCode" : "/**\r\n * Tries to query the exception of an unknown child initializer from the\r\n * results object. This should cause an exception.\r\n *\r\n * @throws org.apache.commons.lang3.concurrent.ConcurrentException so we don't have to catch it\r\n */\r\n@Test\r\nvoid testResultGetExceptionUnknown() throws ConcurrentException {\r\n    final MultiBackgroundInitializer.MultiBackgroundInitializerResults res = checkInitialize();\r\n    assertThrows(NoSuchElementException.class, () -> res.getException(\"unknown\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\concurrent\\MultiBackgroundInitializerTest.java",
  "methodName" : "testResultGetInitializerUnknown",
  "sourceCode" : "/**\r\n * Tries to query an unknown child initializer from the results object. This\r\n * should cause an exception.\r\n *\r\n * @throws org.apache.commons.lang3.concurrent.ConcurrentException so we don't have to catch it\r\n */\r\n@Test\r\nvoid testResultGetInitializerUnknown() throws ConcurrentException {\r\n    final MultiBackgroundInitializer.MultiBackgroundInitializerResults res = checkInitialize();\r\n    assertThrows(NoSuchElementException.class, () -> res.getInitializer(\"unknown\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\concurrent\\MultiBackgroundInitializerTest.java",
  "methodName" : "testResultGetResultObjectUnknown",
  "sourceCode" : "/**\r\n * Tries to query the results of an unknown child initializer from the\r\n * results object. This should cause an exception.\r\n *\r\n * @throws org.apache.commons.lang3.concurrent.ConcurrentException so we don't have to catch it\r\n */\r\n@Test\r\nvoid testResultGetResultObjectUnknown() throws ConcurrentException {\r\n    final MultiBackgroundInitializer.MultiBackgroundInitializerResults res = checkInitialize();\r\n    assertThrows(NoSuchElementException.class, () -> res.getResultObject(\"unknown\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\concurrent\\MultiBackgroundInitializerTest.java",
  "methodName" : "testResultInitializerNamesModify",
  "sourceCode" : "/**\r\n * Tests that the set with the names of the initializers cannot be modified.\r\n *\r\n * @throws org.apache.commons.lang3.concurrent.ConcurrentException so we don't have to catch it\r\n */\r\n@Test\r\nvoid testResultInitializerNamesModify() throws ConcurrentException {\r\n    checkInitialize();\r\n    final MultiBackgroundInitializer.MultiBackgroundInitializerResults res = initializer.get();\r\n    final Iterator<String> it = res.initializerNames().iterator();\r\n    it.next();\r\n    assertThrows(UnsupportedOperationException.class, it::remove);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\concurrent\\MultiBackgroundInitializerTest.java",
  "methodName" : "testResultIsExceptionUnknown",
  "sourceCode" : "/**\r\n * Tries to query the exception flag of an unknown child initializer from\r\n * the results object. This should cause an exception.\r\n *\r\n * @throws org.apache.commons.lang3.concurrent.ConcurrentException so we don't have to catch it\r\n */\r\n@Test\r\nvoid testResultIsExceptionUnknown() throws ConcurrentException {\r\n    final MultiBackgroundInitializer.MultiBackgroundInitializerResults res = checkInitialize();\r\n    assertThrows(NoSuchElementException.class, () -> res.isException(\"unknown\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\concurrent\\ThresholdCircuitBreakerTest.java",
  "methodName" : "testClosingThresholdCircuitBreaker",
  "sourceCode" : "/**\r\n * Tests that closing a {@code ThresholdCircuitBreaker} resets the internal counter.\r\n */\r\n@Test\r\nvoid testClosingThresholdCircuitBreaker() {\r\n    final ThresholdCircuitBreaker circuit = new ThresholdCircuitBreaker(threshold);\r\n    circuit.incrementAndCheckState(9L);\r\n    circuit.close();\r\n    // now the internal counter is back at zero, not 9 anymore. So it is safe to increment 9 again\r\n    assertTrue(circuit.incrementAndCheckState(9L), \"Internal counter was not reset back to zero\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\concurrent\\ThresholdCircuitBreakerTest.java",
  "methodName" : "testGettingThreshold",
  "sourceCode" : "/**\r\n * Tests that we can get the threshold value correctly.\r\n */\r\n@Test\r\nvoid testGettingThreshold() {\r\n    final ThresholdCircuitBreaker circuit = new ThresholdCircuitBreaker(threshold);\r\n    assertEquals(Long.valueOf(threshold), Long.valueOf(circuit.getThreshold()), \"Wrong value of threshold\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\concurrent\\ThresholdCircuitBreakerTest.java",
  "methodName" : "testThreshold",
  "sourceCode" : "/**\r\n * Tests that the threshold is working as expected when incremented and no exception is thrown.\r\n */\r\n@Test\r\nvoid testThreshold() {\r\n    final ThresholdCircuitBreaker circuit = new ThresholdCircuitBreaker(threshold);\r\n    circuit.incrementAndCheckState(9L);\r\n    assertTrue(circuit.incrementAndCheckState(1L), \"Circuit opened before reaching the threshold\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\concurrent\\ThresholdCircuitBreakerTest.java",
  "methodName" : "testThresholdCircuitBreakingException",
  "sourceCode" : "/**\r\n * Tests that exceeding the threshold raises an exception.\r\n */\r\n@Test\r\nvoid testThresholdCircuitBreakingException() {\r\n    final ThresholdCircuitBreaker circuit = new ThresholdCircuitBreaker(threshold);\r\n    circuit.incrementAndCheckState(9L);\r\n    assertFalse(circuit.incrementAndCheckState(2L), \"The circuit was supposed to be open after increment above the threshold\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\concurrent\\ThresholdCircuitBreakerTest.java",
  "methodName" : "testThresholdEqualsZero",
  "sourceCode" : "/**\r\n * Test that when threshold is zero, the circuit breaker is always open.\r\n */\r\n@Test\r\nvoid testThresholdEqualsZero() {\r\n    final ThresholdCircuitBreaker circuit = new ThresholdCircuitBreaker(zeroThreshold);\r\n    assertFalse(circuit.incrementAndCheckState(0L), \"When the threshold is zero, the circuit is supposed to be always open\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\concurrent\\TimedSemaphoreTest.java",
  "methodName" : "testAcquireLimit",
  "sourceCode" : "/**\r\n * Tests the acquire() method if a limit is set.\r\n *\r\n * @throws InterruptedException so we don't have to catch it\r\n */\r\n@Test\r\nvoid testAcquireLimit() throws InterruptedException {\r\n    final ScheduledExecutorService service = EasyMock.createMock(ScheduledExecutorService.class);\r\n    final ScheduledFuture<?> future = EasyMock.createMock(ScheduledFuture.class);\r\n    prepareStartTimer(service, future);\r\n    EasyMock.replay(service, future);\r\n    final int count = 10;\r\n    final CountDownLatch latch = new CountDownLatch(count - 1);\r\n    final TimedSemaphore semaphore = new TimedSemaphore(service, PERIOD_MILLIS, UNIT, 1);\r\n    final SemaphoreThread t = new SemaphoreThread(semaphore, latch, count, count - 1);\r\n    semaphore.setLimit(count - 1);\r\n    // start a thread that calls the semaphore count times\r\n    t.start();\r\n    latch.await();\r\n    // now the semaphore's limit should be reached and the thread blocked\r\n    assertEquals(count - 1, semaphore.getAcquireCount(), \"Wrong semaphore count\");\r\n    // this wakes up the thread, it should call the semaphore once more\r\n    semaphore.endOfPeriod();\r\n    t.join();\r\n    assertEquals(1, semaphore.getAcquireCount(), \"Wrong semaphore count (2)\");\r\n    assertEquals(count - 1, semaphore.getLastAcquiresPerPeriod(), \"Wrong acquire() count\");\r\n    EasyMock.verify(service, future);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\concurrent\\TimedSemaphoreTest.java",
  "methodName" : "testAcquireMultiplePeriods",
  "sourceCode" : "/**\r\n * Tests a bigger number of invocations that span multiple periods. The\r\n * period is set to a very short time. A background thread calls the\r\n * semaphore a large number of times. While it runs at last one end of a\r\n * period should be reached.\r\n *\r\n * @throws InterruptedException so we don't have to catch it\r\n */\r\n@Test\r\nvoid testAcquireMultiplePeriods() throws InterruptedException {\r\n    final int count = 1000;\r\n    final TimedSemaphoreTestImpl semaphore = new TimedSemaphoreTestImpl(PERIOD_MILLIS / 10, TimeUnit.MILLISECONDS, 1);\r\n    semaphore.setLimit(count / 4);\r\n    final CountDownLatch latch = new CountDownLatch(count);\r\n    final SemaphoreThread t = new SemaphoreThread(semaphore, latch, count, count);\r\n    t.start();\r\n    latch.await();\r\n    semaphore.shutdown();\r\n    assertTrue(semaphore.getPeriodEnds() > 0, \"End of period not reached\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\concurrent\\TimedSemaphoreTest.java",
  "methodName" : "testAcquireMultipleThreads",
  "sourceCode" : "/**\r\n * Tests the acquire() method if more threads are involved than the limit.\r\n * This method starts a number of threads that all invoke the semaphore. The\r\n * semaphore's limit is set to 1, so in each period only a single thread can\r\n * acquire the semaphore.\r\n *\r\n * @throws InterruptedException so we don't have to catch it\r\n */\r\n@Test\r\nvoid testAcquireMultipleThreads() throws InterruptedException {\r\n    final ScheduledExecutorService service = EasyMock.createMock(ScheduledExecutorService.class);\r\n    final ScheduledFuture<?> future = EasyMock.createMock(ScheduledFuture.class);\r\n    prepareStartTimer(service, future);\r\n    EasyMock.replay(service, future);\r\n    final TimedSemaphoreTestImpl semaphore = new TimedSemaphoreTestImpl(service, PERIOD_MILLIS, UNIT, 1);\r\n    semaphore.latch = new CountDownLatch(1);\r\n    final int count = 10;\r\n    final SemaphoreThread[] threads = new SemaphoreThread[count];\r\n    for (int i = 0; i < count; i++) {\r\n        threads[i] = new SemaphoreThread(semaphore, null, 1, 0);\r\n        threads[i].start();\r\n    }\r\n    for (int i = 0; i < count; i++) {\r\n        semaphore.latch.await();\r\n        assertEquals(1, semaphore.getAcquireCount(), \"Wrong count\");\r\n        semaphore.latch = new CountDownLatch(1);\r\n        semaphore.endOfPeriod();\r\n        assertEquals(1, semaphore.getLastAcquiresPerPeriod(), \"Wrong acquire count\");\r\n    }\r\n    for (int i = 0; i < count; i++) {\r\n        threads[i].join();\r\n    }\r\n    EasyMock.verify(service, future);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\concurrent\\TimedSemaphoreTest.java",
  "methodName" : "testAcquireNoLimit",
  "sourceCode" : "/**\r\n * Tests the acquire() method if no limit is set. A test thread is started\r\n * that calls the semaphore a large number of times. Even if the semaphore's\r\n * period does not end, the thread should never block.\r\n *\r\n * @throws InterruptedException so we don't have to catch it\r\n */\r\n@Test\r\nvoid testAcquireNoLimit() throws InterruptedException {\r\n    final ScheduledExecutorService service = EasyMock.createMock(ScheduledExecutorService.class);\r\n    final ScheduledFuture<?> future = EasyMock.createMock(ScheduledFuture.class);\r\n    prepareStartTimer(service, future);\r\n    EasyMock.replay(service, future);\r\n    final TimedSemaphoreTestImpl semaphore = new TimedSemaphoreTestImpl(service, PERIOD_MILLIS, UNIT, TimedSemaphore.NO_LIMIT);\r\n    final int count = 1000;\r\n    final CountDownLatch latch = new CountDownLatch(count);\r\n    final SemaphoreThread t = new SemaphoreThread(semaphore, latch, count, count);\r\n    t.start();\r\n    latch.await();\r\n    EasyMock.verify(service, future);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\concurrent\\TimedSemaphoreTest.java",
  "methodName" : "testGetAvailablePermits",
  "sourceCode" : "/**\r\n * Tests whether the available non-blocking calls can be queried.\r\n *\r\n * @throws InterruptedException so we don't have to catch it\r\n */\r\n@Test\r\nvoid testGetAvailablePermits() throws InterruptedException {\r\n    final ScheduledExecutorService service = EasyMock.createMock(ScheduledExecutorService.class);\r\n    final ScheduledFuture<?> future = EasyMock.createMock(ScheduledFuture.class);\r\n    prepareStartTimer(service, future);\r\n    EasyMock.replay(service, future);\r\n    final TimedSemaphore semaphore = new TimedSemaphore(service, PERIOD_MILLIS, UNIT, LIMIT);\r\n    for (int i = 0; i < LIMIT; i++) {\r\n        assertEquals(LIMIT - i, semaphore.getAvailablePermits(), \"Wrong available count at \" + i);\r\n        semaphore.acquire();\r\n    }\r\n    semaphore.endOfPeriod();\r\n    assertEquals(LIMIT, semaphore.getAvailablePermits(), \"Wrong available count in new period\");\r\n    EasyMock.verify(service, future);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\concurrent\\TimedSemaphoreTest.java",
  "methodName" : "testGetAverageCallsPerPeriod",
  "sourceCode" : "/**\r\n * Tests the methods for statistics.\r\n *\r\n * @throws InterruptedException so we don't have to catch it\r\n */\r\n@Test\r\nvoid testGetAverageCallsPerPeriod() throws InterruptedException {\r\n    final ScheduledExecutorService service = EasyMock.createMock(ScheduledExecutorService.class);\r\n    final ScheduledFuture<?> future = EasyMock.createMock(ScheduledFuture.class);\r\n    prepareStartTimer(service, future);\r\n    EasyMock.replay(service, future);\r\n    final TimedSemaphore semaphore = new TimedSemaphore(service, PERIOD_MILLIS, UNIT, LIMIT);\r\n    semaphore.acquire();\r\n    semaphore.endOfPeriod();\r\n    assertEquals(1.0, semaphore.getAverageCallsPerPeriod(), .005, \"Wrong average (1)\");\r\n    semaphore.acquire();\r\n    semaphore.acquire();\r\n    semaphore.endOfPeriod();\r\n    assertEquals(1.5, semaphore.getAverageCallsPerPeriod(), .005, \"Wrong average (2)\");\r\n    EasyMock.verify(service, future);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\concurrent\\TimedSemaphoreTest.java",
  "methodName" : "testInit",
  "sourceCode" : "/**\r\n * Tests creating a new instance.\r\n */\r\n@Test\r\nvoid testInit() {\r\n    final ScheduledExecutorService service = EasyMock.createMock(ScheduledExecutorService.class);\r\n    EasyMock.replay(service);\r\n    final TimedSemaphore semaphore = new TimedSemaphore(service, PERIOD_MILLIS, UNIT, LIMIT);\r\n    EasyMock.verify(service);\r\n    assertEquals(service, semaphore.getExecutorService(), \"Wrong service\");\r\n    assertEquals(PERIOD_MILLIS, semaphore.getPeriod(), \"Wrong period\");\r\n    assertEquals(UNIT, semaphore.getUnit(), \"Wrong unit\");\r\n    assertEquals(0, semaphore.getLastAcquiresPerPeriod(), \"Statistic available\");\r\n    assertEquals(0.0, semaphore.getAverageCallsPerPeriod(), .05, \"Average available\");\r\n    assertFalse(semaphore.isShutdown(), \"Already shutdown\");\r\n    assertEquals(LIMIT, semaphore.getLimit(), \"Wrong limit\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\concurrent\\TimedSemaphoreTest.java",
  "methodName" : "testInitDefaultService",
  "sourceCode" : "/**\r\n * Tests whether a default executor service is created if no service is\r\n * provided.\r\n */\r\n@Test\r\nvoid testInitDefaultService() {\r\n    final TimedSemaphore semaphore = new TimedSemaphore(PERIOD_MILLIS, UNIT, LIMIT);\r\n    final ScheduledThreadPoolExecutor exec = (ScheduledThreadPoolExecutor) semaphore.getExecutorService();\r\n    assertFalse(exec.getContinueExistingPeriodicTasksAfterShutdownPolicy(), \"Wrong periodic task policy\");\r\n    assertFalse(exec.getExecuteExistingDelayedTasksAfterShutdownPolicy(), \"Wrong delayed task policy\");\r\n    assertFalse(exec.isShutdown(), \"Already shutdown\");\r\n    semaphore.shutdown();\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\concurrent\\TimedSemaphoreTest.java",
  "methodName" : "testInitInvalidPeriod",
  "sourceCode" : "/**\r\n * Tries to create an instance with a negative period. This should cause an\r\n * exception.\r\n */\r\n@Test\r\nvoid testInitInvalidPeriod() {\r\n    assertIllegalArgumentException(() -> new TimedSemaphore(0L, UNIT, LIMIT));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\concurrent\\TimedSemaphoreTest.java",
  "methodName" : "testPassAfterShutdown",
  "sourceCode" : "/**\r\n * Tries to call acquire() after shutdown(). This should cause an exception.\r\n */\r\n@Test\r\nvoid testPassAfterShutdown() {\r\n    final TimedSemaphore semaphore = new TimedSemaphore(PERIOD_MILLIS, UNIT, LIMIT);\r\n    semaphore.shutdown();\r\n    assertThrows(IllegalStateException.class, semaphore::acquire);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\concurrent\\TimedSemaphoreTest.java",
  "methodName" : "testShutdownMultipleTimes",
  "sourceCode" : "/**\r\n * Tests multiple invocations of the shutdown() method.\r\n *\r\n * @throws InterruptedException so we don't have to catch it\r\n */\r\n@Test\r\nvoid testShutdownMultipleTimes() throws InterruptedException {\r\n    final ScheduledExecutorService service = EasyMock.createMock(ScheduledExecutorService.class);\r\n    final ScheduledFuture<?> future = EasyMock.createMock(ScheduledFuture.class);\r\n    prepareStartTimer(service, future);\r\n    EasyMock.expect(Boolean.valueOf(future.cancel(false))).andReturn(Boolean.TRUE);\r\n    EasyMock.replay(service, future);\r\n    final TimedSemaphoreTestImpl semaphore = new TimedSemaphoreTestImpl(service, PERIOD_MILLIS, UNIT, LIMIT);\r\n    semaphore.acquire();\r\n    for (int i = 0; i < 10; i++) {\r\n        semaphore.shutdown();\r\n    }\r\n    EasyMock.verify(service, future);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\concurrent\\TimedSemaphoreTest.java",
  "methodName" : "testShutdownOwnExecutor",
  "sourceCode" : "/**\r\n * Tests the shutdown() method if the executor belongs to the semaphore. In\r\n * this case it has to be shut down.\r\n */\r\n@Test\r\nvoid testShutdownOwnExecutor() {\r\n    final TimedSemaphore semaphore = new TimedSemaphore(PERIOD_MILLIS, UNIT, LIMIT);\r\n    semaphore.shutdown();\r\n    assertTrue(semaphore.isShutdown(), \"Not shutdown\");\r\n    assertTrue(semaphore.getExecutorService().isShutdown(), \"Executor not shutdown\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\concurrent\\TimedSemaphoreTest.java",
  "methodName" : "testShutdownSharedExecutorNoTask",
  "sourceCode" : "/**\r\n * Tests the shutdown() method for a shared executor service before a task\r\n * was started. This should do pretty much nothing.\r\n */\r\n@Test\r\nvoid testShutdownSharedExecutorNoTask() {\r\n    final ScheduledExecutorService service = EasyMock.createMock(ScheduledExecutorService.class);\r\n    EasyMock.replay(service);\r\n    final TimedSemaphore semaphore = new TimedSemaphore(service, PERIOD_MILLIS, UNIT, LIMIT);\r\n    semaphore.shutdown();\r\n    assertTrue(semaphore.isShutdown(), \"Not shutdown\");\r\n    EasyMock.verify(service);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\concurrent\\TimedSemaphoreTest.java",
  "methodName" : "testShutdownSharedExecutorTask",
  "sourceCode" : "/**\r\n * Tests the shutdown() method for a shared executor after the task was\r\n * started. In this case the task must be canceled.\r\n *\r\n * @throws InterruptedException so we don't have to catch it\r\n */\r\n@Test\r\nvoid testShutdownSharedExecutorTask() throws InterruptedException {\r\n    final ScheduledExecutorService service = EasyMock.createMock(ScheduledExecutorService.class);\r\n    final ScheduledFuture<?> future = EasyMock.createMock(ScheduledFuture.class);\r\n    prepareStartTimer(service, future);\r\n    EasyMock.expect(Boolean.valueOf(future.cancel(false))).andReturn(Boolean.TRUE);\r\n    EasyMock.replay(service, future);\r\n    final TimedSemaphoreTestImpl semaphore = new TimedSemaphoreTestImpl(service, PERIOD_MILLIS, UNIT, LIMIT);\r\n    semaphore.acquire();\r\n    semaphore.shutdown();\r\n    assertTrue(semaphore.isShutdown(), \"Not shutdown\");\r\n    EasyMock.verify(service, future);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\concurrent\\TimedSemaphoreTest.java",
  "methodName" : "testStartTimer",
  "sourceCode" : "/**\r\n * Tests starting the timer.\r\n *\r\n * @throws InterruptedException so we don't have to catch it\r\n */\r\n@Test\r\nvoid testStartTimer() throws InterruptedException {\r\n    final TimedSemaphoreTestImpl semaphore = new TimedSemaphoreTestImpl(PERIOD_MILLIS, UNIT, LIMIT);\r\n    final ScheduledFuture<?> future = semaphore.startTimer();\r\n    assertNotNull(future, \"No future returned\");\r\n    ThreadUtils.sleepQuietly(DURATION);\r\n    final int trials = 10;\r\n    int count = 0;\r\n    do {\r\n        Thread.sleep(PERIOD_MILLIS);\r\n        assertFalse(count++ > trials, \"endOfPeriod() not called!\");\r\n    } while (semaphore.getPeriodEnds() <= 0);\r\n    semaphore.shutdown();\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\concurrent\\TimedSemaphoreTest.java",
  "methodName" : "testTryAcquire",
  "sourceCode" : "/**\r\n * Tests the tryAcquire() method. It is checked whether the semaphore can be acquired\r\n * by a bunch of threads the expected number of times and not more.\r\n */\r\n@Test\r\nvoid testTryAcquire() throws InterruptedException {\r\n    final TimedSemaphore semaphore = new TimedSemaphore(PERIOD_MILLIS, TimeUnit.SECONDS, LIMIT);\r\n    final TryAcquireThread[] threads = new TryAcquireThread[3 * LIMIT];\r\n    final CountDownLatch latch = new CountDownLatch(1);\r\n    for (int i = 0; i < threads.length; i++) {\r\n        threads[i] = new TryAcquireThread(semaphore, latch);\r\n        threads[i].start();\r\n    }\r\n    latch.countDown();\r\n    int permits = 0;\r\n    for (final TryAcquireThread t : threads) {\r\n        t.join();\r\n        if (t.acquired) {\r\n            permits++;\r\n        }\r\n    }\r\n    assertEquals(LIMIT, permits, \"Wrong number of permits granted\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\concurrent\\TimedSemaphoreTest.java",
  "methodName" : "testTryAcquireAfterShutdown",
  "sourceCode" : "/**\r\n * Tries to call tryAcquire() after shutdown(). This should cause an exception.\r\n */\r\n@Test\r\nvoid testTryAcquireAfterShutdown() {\r\n    final TimedSemaphore semaphore = new TimedSemaphore(PERIOD_MILLIS, UNIT, LIMIT);\r\n    semaphore.shutdown();\r\n    assertThrows(IllegalStateException.class, semaphore::tryAcquire);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\concurrent\\UncheckedExecutionExceptionTest.java",
  "methodName" : "testConstructWithCause",
  "sourceCode" : "@Test\r\nvoid testConstructWithCause() {\r\n    final Exception e = new Exception();\r\n    assertSame(e, new UncheckedExecutionException(e).getCause());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\concurrent\\UncheckedFutureTest.java",
  "methodName" : "testGetExecutionException",
  "sourceCode" : "@Test\r\nvoid testGetExecutionException() {\r\n    final ExecutionException e = new ExecutionException(new Exception());\r\n    assertThrows(UncheckedExecutionException.class, () -> UncheckedFuture.on(new TestFuture<>(e)).get());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\concurrent\\UncheckedFutureTest.java",
  "methodName" : "testGetInterruptedException",
  "sourceCode" : "@Test\r\nvoid testGetInterruptedException() {\r\n    final InterruptedException e = new InterruptedException();\r\n    assertThrows(UncheckedInterruptedException.class, () -> UncheckedFuture.on(new TestFuture<>(e)).get());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\concurrent\\UncheckedFutureTest.java",
  "methodName" : "testGetLongExecutionException",
  "sourceCode" : "@Test\r\nvoid testGetLongExecutionException() {\r\n    final ExecutionException e = new ExecutionException(new Exception());\r\n    assertThrows(UncheckedExecutionException.class, () -> UncheckedFuture.on(new TestFuture<>(e)).get(1, TimeUnit.MICROSECONDS));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\concurrent\\UncheckedFutureTest.java",
  "methodName" : "testGetLongInterruptedException",
  "sourceCode" : "@Test\r\nvoid testGetLongInterruptedException() {\r\n    final InterruptedException e = new InterruptedException();\r\n    assertThrows(UncheckedInterruptedException.class, () -> UncheckedFuture.on(new TestFuture<>(e)).get(1, TimeUnit.MICROSECONDS));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\concurrent\\UncheckedFutureTest.java",
  "methodName" : "testGetLongTimeoutException",
  "sourceCode" : "@Test\r\nvoid testGetLongTimeoutException() {\r\n    final TimeoutException e = new TimeoutException();\r\n    assertThrows(UncheckedTimeoutException.class, () -> UncheckedFuture.on(new TestFuture<>(e)).get(1, TimeUnit.MICROSECONDS));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\concurrent\\UncheckedFutureTest.java",
  "methodName" : "testMap",
  "sourceCode" : "@Test\r\nvoid testMap() {\r\n    final List<String> expected = Arrays.asList(\"Y\", \"Z\");\r\n    final List<Future<String>> input = Arrays.asList(new TestFuture<>(\"Y\"), new TestFuture<>(\"Z\"));\r\n    assertEquals(expected, UncheckedFuture.map(input).map(UncheckedFuture::get).collect(Collectors.toList()));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\concurrent\\UncheckedFutureTest.java",
  "methodName" : "testOnCollection",
  "sourceCode" : "@Test\r\nvoid testOnCollection() {\r\n    final List<String> expected = Arrays.asList(\"Y\", \"Z\");\r\n    final List<Future<String>> input = Arrays.asList(new TestFuture<>(\"Y\"), new TestFuture<>(\"Z\"));\r\n    assertEquals(expected, UncheckedFuture.on(input).stream().map(UncheckedFuture::get).collect(Collectors.toList()));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\concurrent\\UncheckedFutureTest.java",
  "methodName" : "testOnFuture",
  "sourceCode" : "@Test\r\nvoid testOnFuture() {\r\n    assertEquals(\"Z\", UncheckedFuture.on(new TestFuture<>(\"Z\")).get());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\concurrent\\UncheckedTimeoutExceptionTest.java",
  "methodName" : "testConstructWithCause",
  "sourceCode" : "@Test\r\nvoid testConstructWithCause() {\r\n    final Exception e = new Exception();\r\n    assertSame(e, new UncheckedTimeoutException(e).getCause());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ConversionTest.java",
  "methodName" : "binaryBeMsb0ToHexDigitPosOutsideArray",
  "sourceCode" : "@ParameterizedTest\r\n@ValueSource(ints = { Integer.MIN_VALUE, -1, 8, 9, Integer.MAX_VALUE })\r\npublic void binaryBeMsb0ToHexDigitPosOutsideArray(final int index) {\r\n    assertIndexOutOfBoundsException(() -> Conversion.binaryBeMsb0ToHexDigit(new boolean[8], index));\r\n}",
  "annotations" : [ "ParameterizedTest" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ConversionTest.java",
  "methodName" : "testBinaryBeMsb0ToHexDigit",
  "sourceCode" : "/**\r\n * Tests {@link Conversion#binaryToHexDigit(boolean[])}.\r\n */\r\n@Test\r\nvoid testBinaryBeMsb0ToHexDigit() {\r\n    assertEquals('0', Conversion.binaryBeMsb0ToHexDigit(new boolean[] { false, false, false, false }));\r\n    assertEquals('1', Conversion.binaryBeMsb0ToHexDigit(new boolean[] { false, false, false, true }));\r\n    assertEquals('2', Conversion.binaryBeMsb0ToHexDigit(new boolean[] { false, false, true, false }));\r\n    assertEquals('3', Conversion.binaryBeMsb0ToHexDigit(new boolean[] { false, false, true, true }));\r\n    assertEquals('4', Conversion.binaryBeMsb0ToHexDigit(new boolean[] { false, true, false, false }));\r\n    assertEquals('5', Conversion.binaryBeMsb0ToHexDigit(new boolean[] { false, true, false, true }));\r\n    assertEquals('6', Conversion.binaryBeMsb0ToHexDigit(new boolean[] { false, true, true, false }));\r\n    assertEquals('7', Conversion.binaryBeMsb0ToHexDigit(new boolean[] { false, true, true, true }));\r\n    assertEquals('8', Conversion.binaryBeMsb0ToHexDigit(new boolean[] { true, false, false, false }));\r\n    assertEquals('9', Conversion.binaryBeMsb0ToHexDigit(new boolean[] { true, false, false, true }));\r\n    assertEquals('a', Conversion.binaryBeMsb0ToHexDigit(new boolean[] { true, false, true, false }));\r\n    assertEquals('b', Conversion.binaryBeMsb0ToHexDigit(new boolean[] { true, false, true, true }));\r\n    assertEquals('c', Conversion.binaryBeMsb0ToHexDigit(new boolean[] { true, true, false, false }));\r\n    assertEquals('d', Conversion.binaryBeMsb0ToHexDigit(new boolean[] { true, true, false, true }));\r\n    assertEquals('e', Conversion.binaryBeMsb0ToHexDigit(new boolean[] { true, true, true, false }));\r\n    assertEquals('f', Conversion.binaryBeMsb0ToHexDigit(new boolean[] { true, true, true, true }));\r\n    assertEquals('4', Conversion.binaryBeMsb0ToHexDigit(new boolean[] { true, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false }));\r\n    assertIllegalArgumentException(() -> Conversion.binaryBeMsb0ToHexDigit(new boolean[] {}));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ConversionTest.java",
  "methodName" : "testBinaryBeMsb0ToHexDigit_2args",
  "sourceCode" : "/**\r\n * Tests {@link Conversion#binaryToHexDigit(boolean[], int)}.\r\n */\r\n@Test\r\nvoid testBinaryBeMsb0ToHexDigit_2args() {\r\n    assertEquals('5', Conversion.binaryBeMsb0ToHexDigit(new boolean[] { true, false, false, false, false, false, false, false, false, false, false, true, false, true, false, false }, 2));\r\n    final boolean[] shortArray = { true, true, false };\r\n    assertEquals('6', Conversion.binaryBeMsb0ToHexDigit(shortArray, 0));\r\n    assertEquals('3', Conversion.binaryBeMsb0ToHexDigit(shortArray, 1));\r\n    assertEquals('1', Conversion.binaryBeMsb0ToHexDigit(shortArray, 2));\r\n    final boolean[] shortArray2 = { true, true, true, false, false, true, false, true };\r\n    assertEquals('5', Conversion.binaryBeMsb0ToHexDigit(shortArray2, 0));\r\n    assertEquals('2', Conversion.binaryBeMsb0ToHexDigit(shortArray2, 1));\r\n    assertEquals('9', Conversion.binaryBeMsb0ToHexDigit(shortArray2, 2));\r\n    assertEquals('c', Conversion.binaryBeMsb0ToHexDigit(shortArray2, 3));\r\n    assertEquals('e', Conversion.binaryBeMsb0ToHexDigit(shortArray2, 4));\r\n    assertEquals('7', Conversion.binaryBeMsb0ToHexDigit(shortArray2, 5));\r\n    assertEquals('3', Conversion.binaryBeMsb0ToHexDigit(shortArray2, 6));\r\n    assertEquals('1', Conversion.binaryBeMsb0ToHexDigit(shortArray2, 7));\r\n    final boolean[] multiBytesArray = { true, true, false, false, true, false, true, false, true, true, true, false, false, true, false, true };\r\n    assertEquals('5', Conversion.binaryBeMsb0ToHexDigit(multiBytesArray, 0));\r\n    assertEquals('2', Conversion.binaryBeMsb0ToHexDigit(multiBytesArray, 1));\r\n    assertEquals('9', Conversion.binaryBeMsb0ToHexDigit(multiBytesArray, 2));\r\n    assertEquals('c', Conversion.binaryBeMsb0ToHexDigit(multiBytesArray, 3));\r\n    assertEquals('e', Conversion.binaryBeMsb0ToHexDigit(multiBytesArray, 4));\r\n    assertEquals('7', Conversion.binaryBeMsb0ToHexDigit(multiBytesArray, 5));\r\n    assertEquals('b', Conversion.binaryBeMsb0ToHexDigit(multiBytesArray, 6));\r\n    assertEquals('5', Conversion.binaryBeMsb0ToHexDigit(multiBytesArray, 7));\r\n    assertEquals('a', Conversion.binaryBeMsb0ToHexDigit(multiBytesArray, 8));\r\n    assertEquals('5', Conversion.binaryBeMsb0ToHexDigit(multiBytesArray, 9));\r\n    assertEquals('2', Conversion.binaryBeMsb0ToHexDigit(multiBytesArray, 10));\r\n    assertEquals('9', Conversion.binaryBeMsb0ToHexDigit(multiBytesArray, 11));\r\n    assertEquals('c', Conversion.binaryBeMsb0ToHexDigit(multiBytesArray, 12));\r\n    assertEquals('6', Conversion.binaryBeMsb0ToHexDigit(multiBytesArray, 13));\r\n    assertEquals('3', Conversion.binaryBeMsb0ToHexDigit(multiBytesArray, 14));\r\n    assertEquals('1', Conversion.binaryBeMsb0ToHexDigit(multiBytesArray, 15));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ConversionTest.java",
  "methodName" : "testBinaryToByte",
  "sourceCode" : "/**\r\n * Tests {@link Conversion#binaryToByte(boolean[], int, byte, int, int)}.\r\n */\r\n@Test\r\nvoid testBinaryToByte() {\r\n    final boolean[] src = { false, false, true, true, true, false, true, true, true, true, true, true, true, false, false, false, true, true, true, true, false, false, false, false, false, false, true, true, true, false, false, false, false, false, false, false, true, true, true, true, true, false, false, false, false, true, false, false, true, true, false, false, false, false, true, false, true, false, true, false, false, true, true, false, true, true, true, false, false, false, false, true };\r\n    // conversion of \"CDF1F0C10F12345678\" by HexToBinary\r\n    assertEquals((byte) 0x00, Conversion.binaryToByte(src, 0 * 4, (byte) 0, 0, 0 * 4));\r\n    assertEquals((byte) 0x0C, Conversion.binaryToByte(src, 0 * 4, (byte) 0, 0, 1 * 4));\r\n    assertEquals((byte) 0xDC, Conversion.binaryToByte(src, 0 * 4, (byte) 0, 0, 2 * 4));\r\n    assertEquals((byte) 0xFD, Conversion.binaryToByte(src, 1 * 4, (byte) 0, 0, 2 * 4));\r\n    assertEquals((byte) 0x34, Conversion.binaryToByte(src, 0 * 4, (byte) 0x34, 0, 0 * 4));\r\n    assertEquals((byte) 0x84, Conversion.binaryToByte(src, 17 * 4, (byte) 0x34, 4, 1 * 4));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ConversionTest.java",
  "methodName" : "testBinaryToHexDigit",
  "sourceCode" : "/**\r\n * Tests {@link Conversion#binaryToHexDigit(boolean[])}.\r\n */\r\n@Test\r\nvoid testBinaryToHexDigit() {\r\n    assertEquals('0', Conversion.binaryToHexDigit(new boolean[] { false, false, false, false }));\r\n    assertEquals('1', Conversion.binaryToHexDigit(new boolean[] { true, false, false, false }));\r\n    assertEquals('2', Conversion.binaryToHexDigit(new boolean[] { false, true, false, false }));\r\n    assertEquals('3', Conversion.binaryToHexDigit(new boolean[] { true, true, false, false }));\r\n    assertEquals('4', Conversion.binaryToHexDigit(new boolean[] { false, false, true, false }));\r\n    assertEquals('5', Conversion.binaryToHexDigit(new boolean[] { true, false, true, false }));\r\n    assertEquals('6', Conversion.binaryToHexDigit(new boolean[] { false, true, true, false }));\r\n    assertEquals('7', Conversion.binaryToHexDigit(new boolean[] { true, true, true, false }));\r\n    assertEquals('8', Conversion.binaryToHexDigit(new boolean[] { false, false, false, true }));\r\n    assertEquals('9', Conversion.binaryToHexDigit(new boolean[] { true, false, false, true }));\r\n    assertEquals('a', Conversion.binaryToHexDigit(new boolean[] { false, true, false, true }));\r\n    assertEquals('b', Conversion.binaryToHexDigit(new boolean[] { true, true, false, true }));\r\n    assertEquals('c', Conversion.binaryToHexDigit(new boolean[] { false, false, true, true }));\r\n    assertEquals('d', Conversion.binaryToHexDigit(new boolean[] { true, false, true, true }));\r\n    assertEquals('e', Conversion.binaryToHexDigit(new boolean[] { false, true, true, true }));\r\n    assertEquals('f', Conversion.binaryToHexDigit(new boolean[] { true, true, true, true }));\r\n    assertEquals('1', Conversion.binaryToHexDigit(new boolean[] { true }));\r\n    assertEquals('f', Conversion.binaryToHexDigit(new boolean[] { true, true, true, true, true }));\r\n    assertIllegalArgumentException(() -> Conversion.binaryToHexDigit(new boolean[] {}));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ConversionTest.java",
  "methodName" : "testBinaryToHexDigit_2args",
  "sourceCode" : "/**\r\n * Tests {@link Conversion#binaryBeMsb0ToHexDigit(boolean[], int)}.\r\n */\r\n@Test\r\nvoid testBinaryToHexDigit_2args() {\r\n    final boolean[] shortArray = { false, true, true };\r\n    assertEquals('6', Conversion.binaryToHexDigit(shortArray, 0));\r\n    assertEquals('3', Conversion.binaryToHexDigit(shortArray, 1));\r\n    assertEquals('1', Conversion.binaryToHexDigit(shortArray, 2));\r\n    final boolean[] longArray = { true, false, true, false, false, true, true };\r\n    assertEquals('5', Conversion.binaryToHexDigit(longArray, 0));\r\n    assertEquals('2', Conversion.binaryToHexDigit(longArray, 1));\r\n    assertEquals('9', Conversion.binaryToHexDigit(longArray, 2));\r\n    assertEquals('c', Conversion.binaryToHexDigit(longArray, 3));\r\n    assertEquals('6', Conversion.binaryToHexDigit(longArray, 4));\r\n    assertEquals('3', Conversion.binaryToHexDigit(longArray, 5));\r\n    assertEquals('1', Conversion.binaryToHexDigit(longArray, 6));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ConversionTest.java",
  "methodName" : "testBinaryToHexDigitMsb0_4bits_2args",
  "sourceCode" : "/**\r\n * Tests {@link Conversion#binaryToHexDigitMsb0_4bits(boolean[], int)}.\r\n */\r\n@Test\r\nvoid testBinaryToHexDigitMsb0_4bits_2args() {\r\n    // boolean[] shortArray = new boolean[]{true, true, false};\r\n    // assertEquals('6', Conversion.BinaryToHexDigitMsb0(shortArray, 0));\r\n    // assertEquals('3', Conversion.BinaryToHexDigitMsb0(shortArray, 1));\r\n    // assertEquals('1', Conversion.BinaryToHexDigitMsb0(shortArray, 2));\r\n    final boolean[] shortArray = { true, true, false, true };\r\n    assertEquals('d', Conversion.binaryToHexDigitMsb0_4bits(shortArray, 0));\r\n    final boolean[] longArray = { true, false, true, false, false, true, true };\r\n    assertEquals('a', Conversion.binaryToHexDigitMsb0_4bits(longArray, 0));\r\n    assertEquals('4', Conversion.binaryToHexDigitMsb0_4bits(longArray, 1));\r\n    assertEquals('9', Conversion.binaryToHexDigitMsb0_4bits(longArray, 2));\r\n    assertEquals('3', Conversion.binaryToHexDigitMsb0_4bits(longArray, 3));\r\n    // assertEquals('6', Conversion.BinaryToHexDigitMsb0(longArray, 4));\r\n    // assertEquals('3', Conversion.BinaryToHexDigitMsb0(longArray, 5));\r\n    // assertEquals('1', Conversion.BinaryToHexDigitMsb0(longArray, 6));\r\n    final boolean[] maxLengthArray = { true, false, true, false, false, true, true, true };\r\n    assertEquals('a', Conversion.binaryToHexDigitMsb0_4bits(maxLengthArray, 0));\r\n    assertEquals('4', Conversion.binaryToHexDigitMsb0_4bits(maxLengthArray, 1));\r\n    assertEquals('9', Conversion.binaryToHexDigitMsb0_4bits(maxLengthArray, 2));\r\n    assertEquals('3', Conversion.binaryToHexDigitMsb0_4bits(maxLengthArray, 3));\r\n    assertEquals('7', Conversion.binaryToHexDigitMsb0_4bits(maxLengthArray, 4));\r\n    // assertEquals('7', Conversion.BinaryToHexDigitMsb0(longArray, 5));\r\n    // assertEquals('3', Conversion.BinaryToHexDigitMsb0(longArray, 6));\r\n    // assertEquals('1', Conversion.BinaryToHexDigitMsb0(longArray, 7));\r\n    final boolean[] javaDocCheck = { true, false, false, true, true, false, true, false };\r\n    assertEquals('d', Conversion.binaryToHexDigitMsb0_4bits(javaDocCheck, 3));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ConversionTest.java",
  "methodName" : "testBinaryToHexDigitMsb0_bits",
  "sourceCode" : "/**\r\n * Tests {@link Conversion#binaryToHexDigitMsb0_4bits(boolean[])}.\r\n */\r\n@Test\r\nvoid testBinaryToHexDigitMsb0_bits() {\r\n    assertEquals('0', Conversion.binaryToHexDigitMsb0_4bits(new boolean[] { false, false, false, false }));\r\n    assertEquals('1', Conversion.binaryToHexDigitMsb0_4bits(new boolean[] { false, false, false, true }));\r\n    assertEquals('2', Conversion.binaryToHexDigitMsb0_4bits(new boolean[] { false, false, true, false }));\r\n    assertEquals('3', Conversion.binaryToHexDigitMsb0_4bits(new boolean[] { false, false, true, true }));\r\n    assertEquals('4', Conversion.binaryToHexDigitMsb0_4bits(new boolean[] { false, true, false, false }));\r\n    assertEquals('5', Conversion.binaryToHexDigitMsb0_4bits(new boolean[] { false, true, false, true }));\r\n    assertEquals('6', Conversion.binaryToHexDigitMsb0_4bits(new boolean[] { false, true, true, false }));\r\n    assertEquals('7', Conversion.binaryToHexDigitMsb0_4bits(new boolean[] { false, true, true, true }));\r\n    assertEquals('8', Conversion.binaryToHexDigitMsb0_4bits(new boolean[] { true, false, false, false }));\r\n    assertEquals('9', Conversion.binaryToHexDigitMsb0_4bits(new boolean[] { true, false, false, true }));\r\n    assertEquals('a', Conversion.binaryToHexDigitMsb0_4bits(new boolean[] { true, false, true, false }));\r\n    assertEquals('b', Conversion.binaryToHexDigitMsb0_4bits(new boolean[] { true, false, true, true }));\r\n    assertEquals('c', Conversion.binaryToHexDigitMsb0_4bits(new boolean[] { true, true, false, false }));\r\n    assertEquals('d', Conversion.binaryToHexDigitMsb0_4bits(new boolean[] { true, true, false, true }));\r\n    assertEquals('e', Conversion.binaryToHexDigitMsb0_4bits(new boolean[] { true, true, true, false }));\r\n    assertEquals('f', Conversion.binaryToHexDigitMsb0_4bits(new boolean[] { true, true, true, true }));\r\n    assertIllegalArgumentException(() -> Conversion.binaryToHexDigitMsb0_4bits(new boolean[] {}));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ConversionTest.java",
  "methodName" : "testBinaryToHexDigitReverse",
  "sourceCode" : "@Test\r\nvoid testBinaryToHexDigitReverse() {\r\n    final SplittableRandom rng = new SplittableRandom();\r\n    final boolean[] x = new boolean[8];\r\n    for (int i = 0; i < 100; i++) {\r\n        Conversion.longToBinary(rng.nextLong(), 0, x, 0, 8);\r\n        for (int j = 1; j <= 8; j++) {\r\n            final boolean[] a = Arrays.copyOf(x, j);\r\n            final boolean[] b = a.clone();\r\n            ArrayUtils.reverse(b);\r\n            for (int k = 0; k < j; k++) {\r\n                assertEquals(Conversion.binaryToHexDigit(a, k), Conversion.binaryBeMsb0ToHexDigit(b, k));\r\n            }\r\n        }\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ConversionTest.java",
  "methodName" : "testBinaryToInt",
  "sourceCode" : "/**\r\n * Tests {@link Conversion#binaryToInt(boolean[], int, int, int, int)}.\r\n */\r\n@Test\r\nvoid testBinaryToInt() {\r\n    final boolean[] src = { false, false, true, true, true, false, true, true, true, true, true, true, true, false, false, false, true, true, true, true, false, false, false, false, false, false, true, true, true, false, false, false, false, false, false, false, true, true, true, true, true, false, false, false, false, true, false, false, true, true, false, false, false, false, true, false, true, false, true, false, false, true, true, false, true, true, true, false, false, false, false, true };\r\n    // conversion of \"CDF1F0C10F12345678\" by HexToBinary\r\n    assertEquals(0x00000000, Conversion.binaryToInt(src, 0 * 4, 0, 0, 0 * 4));\r\n    assertEquals(0x0000000C, Conversion.binaryToInt(src, 0 * 4, 0, 0, 1 * 4));\r\n    assertEquals(0x1C0F1FDC, Conversion.binaryToInt(src, 0 * 4, 0, 0, 8 * 4));\r\n    assertEquals(0x01C0F1FD, Conversion.binaryToInt(src, 1 * 4, 0, 0, 8 * 4));\r\n    assertEquals(0x12345679, Conversion.binaryToInt(src, 0 * 4, 0x12345679, 0, 0 * 4));\r\n    assertEquals(0x87645679, Conversion.binaryToInt(src, 15 * 4, 0x12345679, 20, 3 * 4));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ConversionTest.java",
  "methodName" : "testBinaryToLong",
  "sourceCode" : "/**\r\n * Tests {@link Conversion#binaryToLong(boolean[], int, long, int, int)}.\r\n */\r\n@Test\r\nvoid testBinaryToLong() {\r\n    final boolean[] src = { false, false, true, true, true, false, true, true, true, true, true, true, true, false, false, false, true, true, true, true, false, false, false, false, false, false, true, true, true, false, false, false, false, false, false, false, true, true, true, true, true, false, false, false, false, true, false, false, true, true, false, false, false, false, true, false, true, false, true, false, false, true, true, false, true, true, true, false, false, false, false, true };\r\n    // conversion of \"CDF1F0C10F12345678\" by HexToBinary\r\n    assertEquals(0x0000000000000000L, Conversion.binaryToLong(src, 0, 0L, 0, 0));\r\n    assertEquals(0x000000000000000CL, Conversion.binaryToLong(src, 0, 0L, 0, 1 * 4));\r\n    assertEquals(0x000000001C0F1FDCL, Conversion.binaryToLong(src, 0, 0L, 0, 8 * 4));\r\n    assertEquals(0x0000000001C0F1FDL, Conversion.binaryToLong(src, 1 * 4, 0L, 0, 8 * 4));\r\n    assertEquals(0x123456798ABCDEF0L, Conversion.binaryToLong(src, 0, 0x123456798ABCDEF0L, 0, 0));\r\n    assertEquals(0x1234567876BCDEF0L, Conversion.binaryToLong(src, 15 * 4, 0x123456798ABCDEF0L, 24, 3 * 4));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ConversionTest.java",
  "methodName" : "testBinaryToShort",
  "sourceCode" : "/**\r\n * Tests {@link Conversion#binaryToShort(boolean[], int, short, int, int)}.\r\n */\r\n@Test\r\nvoid testBinaryToShort() {\r\n    final boolean[] src = { false, false, true, true, true, false, true, true, true, true, true, true, true, false, false, false, true, true, true, true, false, false, false, false, false, false, true, true, true, false, false, false, false, false, false, false, true, true, true, true, true, false, false, false, false, true, false, false, true, true, false, false, false, false, true, false, true, false, true, false, false, true, true, false, true, true, true, false, false, false, false, true };\r\n    // conversion of \"CDF1F0C10F12345678\" by HexToBinary\r\n    assertEquals((short) 0x0000, Conversion.binaryToShort(src, 0 * 4, (short) 0, 0, 0 * 4));\r\n    assertEquals((short) 0x000C, Conversion.binaryToShort(src, 0 * 4, (short) 0, 0, 1 * 4));\r\n    assertEquals((short) 0x1FDC, Conversion.binaryToShort(src, 0 * 4, (short) 0, 0, 4 * 4));\r\n    assertEquals((short) 0xF1FD, Conversion.binaryToShort(src, 1 * 4, (short) 0, 0, 4 * 4));\r\n    assertEquals((short) 0x1234, Conversion.binaryToShort(src, 0 * 4, (short) 0x1234, 0, 0 * 4));\r\n    assertEquals((short) 0x8764, Conversion.binaryToShort(src, 15 * 4, (short) 0x1234, 4, 3 * 4));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ConversionTest.java",
  "methodName" : "testByteArrayToInt",
  "sourceCode" : "/**\r\n * Tests {@link Conversion#byteArrayToInt(byte[], int, int, int, int)}.\r\n */\r\n@Test\r\nvoid testByteArrayToInt() {\r\n    final byte[] src = { (byte) 0xCD, (byte) 0xF1, (byte) 0xF0, (byte) 0xC1, (byte) 0x0F, (byte) 0x12, (byte) 0x34, (byte) 0x56, (byte) 0x78 };\r\n    assertEquals(0x00000000, Conversion.byteArrayToInt(src, 0, 0, 0, 0));\r\n    assertEquals(0x000000CD, Conversion.byteArrayToInt(src, 0, 0, 0, 1));\r\n    assertEquals(0xC1F0F1CD, Conversion.byteArrayToInt(src, 0, 0, 0, 4));\r\n    assertEquals(0x0FC1F0F1, Conversion.byteArrayToInt(src, 1, 0, 0, 4));\r\n    assertEquals(0x12345678, Conversion.byteArrayToInt(src, 0, 0x12345678, 0, 0));\r\n    assertEquals(0xCD345678, Conversion.byteArrayToInt(src, 0, 0x12345678, 24, 1));\r\n    // assertEquals(0x56341278, Conversion.ByteArrayToInt(src, 5, 0x01234567, 8, 4));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ConversionTest.java",
  "methodName" : "testByteArrayToLong",
  "sourceCode" : "/**\r\n * Tests {@link Conversion#byteArrayToLong(byte[], int, long, int, int)}.\r\n */\r\n@Test\r\nvoid testByteArrayToLong() {\r\n    final byte[] src = { (byte) 0xCD, (byte) 0xF1, (byte) 0xF0, (byte) 0xC1, (byte) 0x0F, (byte) 0x12, (byte) 0x34, (byte) 0x56, (byte) 0x78 };\r\n    assertEquals(0x0000000000000000L, Conversion.byteArrayToLong(src, 0, 0L, 0, 0));\r\n    assertEquals(0x00000000000000CDL, Conversion.byteArrayToLong(src, 0, 0L, 0, 1));\r\n    assertEquals(0x00000000C1F0F1CDL, Conversion.byteArrayToLong(src, 0, 0L, 0, 4));\r\n    assertEquals(0x000000000FC1F0F1L, Conversion.byteArrayToLong(src, 1, 0L, 0, 4));\r\n    assertEquals(0x123456789ABCDEF0L, Conversion.byteArrayToLong(src, 0, 0x123456789ABCDEF0L, 0, 0));\r\n    assertEquals(0x12345678CDBCDEF0L, Conversion.byteArrayToLong(src, 0, 0x123456789ABCDEF0L, 24, 1));\r\n    assertEquals(0x123456789A7856F0L, Conversion.byteArrayToLong(src, 7, 0x123456789ABCDEF0L, 8, 2));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ConversionTest.java",
  "methodName" : "testByteArrayToShort",
  "sourceCode" : "/**\r\n * Tests {@link Conversion#byteArrayToShort(byte[], int, short, int, int)}.\r\n */\r\n@Test\r\nvoid testByteArrayToShort() {\r\n    final byte[] src = { (byte) 0xCD, (byte) 0xF1, (byte) 0xF0, (byte) 0xC1, (byte) 0x0F, (byte) 0x12, (byte) 0x34, (byte) 0x56, (byte) 0x78 };\r\n    assertEquals((short) 0x0000, Conversion.byteArrayToShort(src, 0, (short) 0, 0, 0));\r\n    assertEquals((short) 0x00CD, Conversion.byteArrayToShort(src, 0, (short) 0, 0, 1));\r\n    assertEquals((short) 0xF1CD, Conversion.byteArrayToShort(src, 0, (short) 0, 0, 2));\r\n    assertEquals((short) 0xF0F1, Conversion.byteArrayToShort(src, 1, (short) 0, 0, 2));\r\n    assertEquals((short) 0x1234, Conversion.byteArrayToShort(src, 0, (short) 0x1234, 0, 0));\r\n    assertEquals((short) 0xCD34, Conversion.byteArrayToShort(src, 0, (short) 0x1234, 8, 1));\r\n    // assertEquals((short) 0x5678, Conversion.ByteArrayToShort(src, 7, (short) 0x0123, 8,\r\n    // 2));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ConversionTest.java",
  "methodName" : "testByteArrayToUuid",
  "sourceCode" : "/**\r\n * Tests {@link Conversion#byteArrayToUuid(byte[], int)}.\r\n */\r\n@Test\r\nvoid testByteArrayToUuid() {\r\n    assertEquals(new UUID(0xFFFFFFFFFFFFFFFFL, 0xFFFFFFFFFFFFFFFFL), Conversion.byteArrayToUuid(new byte[] { (byte) 0xff, (byte) 0xff, (byte) 0xff, (byte) 0xff, (byte) 0xff, (byte) 0xff, (byte) 0xff, (byte) 0xff, (byte) 0xff, (byte) 0xff, (byte) 0xff, (byte) 0xff, (byte) 0xff, (byte) 0xff, (byte) 0xff, (byte) 0xff }, 0));\r\n    assertEquals(new UUID(0xFFEEDDCCBBAA9988L, 0x7766554433221100L), Conversion.byteArrayToUuid(new byte[] { (byte) 0x88, (byte) 0x99, (byte) 0xaa, (byte) 0xbb, (byte) 0xcc, (byte) 0xdd, (byte) 0xee, (byte) 0xff, (byte) 0x00, (byte) 0x11, (byte) 0x22, (byte) 0x33, (byte) 0x44, (byte) 0x55, (byte) 0x66, (byte) 0x77 }, 0));\r\n    assertEquals(new UUID(0xFFEEDDCCBBAA9988L, 0x7766554433221100L), Conversion.byteArrayToUuid(new byte[] { 0, 0, (byte) 0x88, (byte) 0x99, (byte) 0xaa, (byte) 0xbb, (byte) 0xcc, (byte) 0xdd, (byte) 0xee, (byte) 0xff, (byte) 0x00, (byte) 0x11, (byte) 0x22, (byte) 0x33, (byte) 0x44, (byte) 0x55, (byte) 0x66, (byte) 0x77 }, 2));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ConversionTest.java",
  "methodName" : "testByteToBinary",
  "sourceCode" : "/**\r\n * Tests {@link Conversion#byteToBinary(byte, int, boolean[], int, int)}.\r\n */\r\n@Test\r\nvoid testByteToBinary() {\r\n    assertArrayEquals(new boolean[] {}, Conversion.byteToBinary((byte) 0x00, 0, new boolean[] {}, 0, 0));\r\n    assertArrayEquals(new boolean[] {}, Conversion.byteToBinary((byte) 0x00, 100, new boolean[] {}, 0, 0));\r\n    assertArrayEquals(new boolean[] {}, Conversion.byteToBinary((byte) 0x00, 0, new boolean[] {}, 100, 0));\r\n    assertArrayEquals(new boolean[69], Conversion.byteToBinary((byte) 0xEF, 0, new boolean[69], 0, 0));\r\n    assertArrayEquals(new boolean[] { true, false, false, false, false, false, false, false, false, false, false, false, false }, Conversion.byteToBinary((byte) 0x95, 0, new boolean[13], 0, 1));\r\n    assertArrayEquals(new boolean[] { true, false, false, false, false, false, false, false, false, false, false, false, false }, Conversion.byteToBinary((byte) 0x95, 0, new boolean[13], 0, 2));\r\n    assertArrayEquals(new boolean[] { true, false, true, false, false, false, false, false, false, false, false, false, false }, Conversion.byteToBinary((byte) 0x95, 0, new boolean[13], 0, 3));\r\n    assertArrayEquals(new boolean[] { true, false, true, false, true, false, false, false, false, false, false, false, false }, Conversion.byteToBinary((byte) 0x95, 0, new boolean[13], 0, 7));\r\n    assertArrayEquals(new boolean[] { true, false, true, false, true, false, false, true, false, false, false, false, false }, Conversion.byteToBinary((byte) 0x95, 0, new boolean[13], 0, 8));\r\n    assertArrayEquals(new boolean[] { false, false, true, false, false, false, false, false, false, false, false, false, false }, Conversion.byteToBinary((byte) 0x95, 0, new boolean[13], 2, 1));\r\n    assertArrayEquals(new boolean[] { false, false, true, false, true, false, true, false, false, true, false, false, false }, Conversion.byteToBinary((byte) 0x95, 0, new boolean[13], 2, 8));\r\n    assertArrayEquals(new boolean[] { false, true, false, true, false, false, true, false, false, false, false, false, false }, Conversion.byteToBinary((byte) 0x95, 1, new boolean[13], 0, 7));\r\n    assertArrayEquals(new boolean[] { true, false, true, false, false, true, false, false, false, false, false, false, false }, Conversion.byteToBinary((byte) 0x95, 2, new boolean[13], 0, 6));\r\n    // assertArrayEquals(new boolean[]{false, false, false, true, true, false, true, true,\r\n    // false, false, false, false, false}, Conversion.byteToBinary((byte) 0x95, 2, new\r\n    // boolean[13], 3, 7)); //rejected by assertion\r\n    assertArrayEquals(new boolean[] { false, false, false, true, false, true, false, false, true, false, false, false, false }, Conversion.byteToBinary((byte) 0x95, 2, new boolean[13], 3, 6));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ConversionTest.java",
  "methodName" : "testByteToHex",
  "sourceCode" : "/**\r\n * Tests {@link Conversion#byteToHex(byte, int, String, int, int)}.\r\n */\r\n@Test\r\nvoid testByteToHex() {\r\n    assertEquals(\"\", Conversion.byteToHex((byte) 0x00, 0, \"\", 0, 0));\r\n    assertEquals(\"\", Conversion.byteToHex((byte) 0x00, 100, \"\", 0, 0));\r\n    assertEquals(\"\", Conversion.byteToHex((byte) 0x00, 0, \"\", 100, 0));\r\n    assertEquals(\"00000\", Conversion.byteToHex((byte) 0xEF, 0, \"00000\", 0, 0));\r\n    assertEquals(\"f0000\", Conversion.byteToHex((byte) 0xEF, 0, \"00000\", 0, 1));\r\n    assertEquals(\"fe000\", Conversion.byteToHex((byte) 0xEF, 0, \"00000\", 0, 2));\r\n    assertEquals(\"000f0\", Conversion.byteToHex((byte) 0xEF, 0, \"00000\", 3, 1));\r\n    assertEquals(\"000fe\", Conversion.byteToHex((byte) 0xEF, 0, \"00000\", 3, 2));\r\n    assertEquals(\"70000\", Conversion.byteToHex((byte) 0xEF, 1, \"00000\", 0, 1));\r\n    assertEquals(\"b0000\", Conversion.byteToHex((byte) 0xEF, 2, \"00000\", 0, 1));\r\n    assertEquals(\"000df\", Conversion.byteToHex((byte) 0xEF, 3, \"00000\", 3, 2));\r\n    // assertEquals(\"00000\", Conversion.byteToHex((byte) 0xEF, 4, \"00000\", 3, 2)); //rejected by\r\n    // assertion\r\n    assertEquals(\"000e0\", Conversion.byteToHex((byte) 0xEF, 4, \"00000\", 3, 1));\r\n    assertEquals(\"fe\", Conversion.byteToHex((byte) 0xEF, 0, \"\", 0, 2));\r\n    assertThrows(StringIndexOutOfBoundsException.class, () -> Conversion.byteToHex((byte) 0xEF, 0, \"\", 1, 2));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ConversionTest.java",
  "methodName" : "testHexDigitMsb0ToBinary",
  "sourceCode" : "/**\r\n * Tests {@link Conversion#hexDigitMsb0ToBinary(char)}.\r\n */\r\n@Test\r\nvoid testHexDigitMsb0ToBinary() {\r\n    assertArrayEquals(new boolean[] { false, false, false, false }, Conversion.hexDigitMsb0ToBinary('0'));\r\n    assertArrayEquals(new boolean[] { false, false, false, true }, Conversion.hexDigitMsb0ToBinary('1'));\r\n    assertArrayEquals(new boolean[] { false, false, true, false }, Conversion.hexDigitMsb0ToBinary('2'));\r\n    assertArrayEquals(new boolean[] { false, false, true, true }, Conversion.hexDigitMsb0ToBinary('3'));\r\n    assertArrayEquals(new boolean[] { false, true, false, false }, Conversion.hexDigitMsb0ToBinary('4'));\r\n    assertArrayEquals(new boolean[] { false, true, false, true }, Conversion.hexDigitMsb0ToBinary('5'));\r\n    assertArrayEquals(new boolean[] { false, true, true, false }, Conversion.hexDigitMsb0ToBinary('6'));\r\n    assertArrayEquals(new boolean[] { false, true, true, true }, Conversion.hexDigitMsb0ToBinary('7'));\r\n    assertArrayEquals(new boolean[] { true, false, false, false }, Conversion.hexDigitMsb0ToBinary('8'));\r\n    assertArrayEquals(new boolean[] { true, false, false, true }, Conversion.hexDigitMsb0ToBinary('9'));\r\n    assertArrayEquals(new boolean[] { true, false, true, false }, Conversion.hexDigitMsb0ToBinary('A'));\r\n    assertArrayEquals(new boolean[] { true, false, true, false }, Conversion.hexDigitMsb0ToBinary('a'));\r\n    assertArrayEquals(new boolean[] { true, false, true, true }, Conversion.hexDigitMsb0ToBinary('B'));\r\n    assertArrayEquals(new boolean[] { true, false, true, true }, Conversion.hexDigitMsb0ToBinary('b'));\r\n    assertArrayEquals(new boolean[] { true, true, false, false }, Conversion.hexDigitMsb0ToBinary('C'));\r\n    assertArrayEquals(new boolean[] { true, true, false, false }, Conversion.hexDigitMsb0ToBinary('c'));\r\n    assertArrayEquals(new boolean[] { true, true, false, true }, Conversion.hexDigitMsb0ToBinary('D'));\r\n    assertArrayEquals(new boolean[] { true, true, false, true }, Conversion.hexDigitMsb0ToBinary('d'));\r\n    assertArrayEquals(new boolean[] { true, true, true, false }, Conversion.hexDigitMsb0ToBinary('E'));\r\n    assertArrayEquals(new boolean[] { true, true, true, false }, Conversion.hexDigitMsb0ToBinary('e'));\r\n    assertArrayEquals(new boolean[] { true, true, true, true }, Conversion.hexDigitMsb0ToBinary('F'));\r\n    assertArrayEquals(new boolean[] { true, true, true, true }, Conversion.hexDigitMsb0ToBinary('f'));\r\n    assertIllegalArgumentException(() -> Conversion.hexDigitMsb0ToBinary('G'));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ConversionTest.java",
  "methodName" : "testHexDigitMsb0ToInt",
  "sourceCode" : "/**\r\n * Tests {@link Conversion#hexDigitMsb0ToInt(char)}.\r\n */\r\n@Test\r\nvoid testHexDigitMsb0ToInt() {\r\n    assertEquals(0x0, Conversion.hexDigitMsb0ToInt('0'));\r\n    assertEquals(0x8, Conversion.hexDigitMsb0ToInt('1'));\r\n    assertEquals(0x4, Conversion.hexDigitMsb0ToInt('2'));\r\n    assertEquals(0xC, Conversion.hexDigitMsb0ToInt('3'));\r\n    assertEquals(0x2, Conversion.hexDigitMsb0ToInt('4'));\r\n    assertEquals(0xA, Conversion.hexDigitMsb0ToInt('5'));\r\n    assertEquals(0x6, Conversion.hexDigitMsb0ToInt('6'));\r\n    assertEquals(0xE, Conversion.hexDigitMsb0ToInt('7'));\r\n    assertEquals(0x1, Conversion.hexDigitMsb0ToInt('8'));\r\n    assertEquals(0x9, Conversion.hexDigitMsb0ToInt('9'));\r\n    assertEquals(0x5, Conversion.hexDigitMsb0ToInt('A'));\r\n    assertEquals(0x5, Conversion.hexDigitMsb0ToInt('a'));\r\n    assertEquals(0xD, Conversion.hexDigitMsb0ToInt('B'));\r\n    assertEquals(0xD, Conversion.hexDigitMsb0ToInt('b'));\r\n    assertEquals(0x3, Conversion.hexDigitMsb0ToInt('C'));\r\n    assertEquals(0x3, Conversion.hexDigitMsb0ToInt('c'));\r\n    assertEquals(0xB, Conversion.hexDigitMsb0ToInt('D'));\r\n    assertEquals(0xB, Conversion.hexDigitMsb0ToInt('d'));\r\n    assertEquals(0x7, Conversion.hexDigitMsb0ToInt('E'));\r\n    assertEquals(0x7, Conversion.hexDigitMsb0ToInt('e'));\r\n    assertEquals(0xF, Conversion.hexDigitMsb0ToInt('F'));\r\n    assertEquals(0xF, Conversion.hexDigitMsb0ToInt('f'));\r\n    assertIllegalArgumentException(() -> Conversion.hexDigitMsb0ToInt('G'));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ConversionTest.java",
  "methodName" : "testHexDigitToBinary",
  "sourceCode" : "/**\r\n * Tests {@link Conversion#hexDigitToBinary(char)}.\r\n */\r\n@Test\r\nvoid testHexDigitToBinary() {\r\n    assertArrayEquals(new boolean[] { false, false, false, false }, Conversion.hexDigitToBinary('0'));\r\n    assertArrayEquals(new boolean[] { true, false, false, false }, Conversion.hexDigitToBinary('1'));\r\n    assertArrayEquals(new boolean[] { false, true, false, false }, Conversion.hexDigitToBinary('2'));\r\n    assertArrayEquals(new boolean[] { true, true, false, false }, Conversion.hexDigitToBinary('3'));\r\n    assertArrayEquals(new boolean[] { false, false, true, false }, Conversion.hexDigitToBinary('4'));\r\n    assertArrayEquals(new boolean[] { true, false, true, false }, Conversion.hexDigitToBinary('5'));\r\n    assertArrayEquals(new boolean[] { false, true, true, false }, Conversion.hexDigitToBinary('6'));\r\n    assertArrayEquals(new boolean[] { true, true, true, false }, Conversion.hexDigitToBinary('7'));\r\n    assertArrayEquals(new boolean[] { false, false, false, true }, Conversion.hexDigitToBinary('8'));\r\n    assertArrayEquals(new boolean[] { true, false, false, true }, Conversion.hexDigitToBinary('9'));\r\n    assertArrayEquals(new boolean[] { false, true, false, true }, Conversion.hexDigitToBinary('A'));\r\n    assertArrayEquals(new boolean[] { false, true, false, true }, Conversion.hexDigitToBinary('a'));\r\n    assertArrayEquals(new boolean[] { true, true, false, true }, Conversion.hexDigitToBinary('B'));\r\n    assertArrayEquals(new boolean[] { true, true, false, true }, Conversion.hexDigitToBinary('b'));\r\n    assertArrayEquals(new boolean[] { false, false, true, true }, Conversion.hexDigitToBinary('C'));\r\n    assertArrayEquals(new boolean[] { false, false, true, true }, Conversion.hexDigitToBinary('c'));\r\n    assertArrayEquals(new boolean[] { true, false, true, true }, Conversion.hexDigitToBinary('D'));\r\n    assertArrayEquals(new boolean[] { true, false, true, true }, Conversion.hexDigitToBinary('d'));\r\n    assertArrayEquals(new boolean[] { false, true, true, true }, Conversion.hexDigitToBinary('E'));\r\n    assertArrayEquals(new boolean[] { false, true, true, true }, Conversion.hexDigitToBinary('e'));\r\n    assertArrayEquals(new boolean[] { true, true, true, true }, Conversion.hexDigitToBinary('F'));\r\n    assertArrayEquals(new boolean[] { true, true, true, true }, Conversion.hexDigitToBinary('f'));\r\n    assertIllegalArgumentException(() -> Conversion.hexDigitToBinary('G'));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ConversionTest.java",
  "methodName" : "testHexDigitToInt",
  "sourceCode" : "/**\r\n * Tests {@link Conversion#hexDigitToInt(char)}.\r\n */\r\n@Test\r\nvoid testHexDigitToInt() {\r\n    assertEquals(0, Conversion.hexDigitToInt('0'));\r\n    assertEquals(1, Conversion.hexDigitToInt('1'));\r\n    assertEquals(2, Conversion.hexDigitToInt('2'));\r\n    assertEquals(3, Conversion.hexDigitToInt('3'));\r\n    assertEquals(4, Conversion.hexDigitToInt('4'));\r\n    assertEquals(5, Conversion.hexDigitToInt('5'));\r\n    assertEquals(6, Conversion.hexDigitToInt('6'));\r\n    assertEquals(7, Conversion.hexDigitToInt('7'));\r\n    assertEquals(8, Conversion.hexDigitToInt('8'));\r\n    assertEquals(9, Conversion.hexDigitToInt('9'));\r\n    assertEquals(10, Conversion.hexDigitToInt('A'));\r\n    assertEquals(10, Conversion.hexDigitToInt('a'));\r\n    assertEquals(11, Conversion.hexDigitToInt('B'));\r\n    assertEquals(11, Conversion.hexDigitToInt('b'));\r\n    assertEquals(12, Conversion.hexDigitToInt('C'));\r\n    assertEquals(12, Conversion.hexDigitToInt('c'));\r\n    assertEquals(13, Conversion.hexDigitToInt('D'));\r\n    assertEquals(13, Conversion.hexDigitToInt('d'));\r\n    assertEquals(14, Conversion.hexDigitToInt('E'));\r\n    assertEquals(14, Conversion.hexDigitToInt('e'));\r\n    assertEquals(15, Conversion.hexDigitToInt('F'));\r\n    assertEquals(15, Conversion.hexDigitToInt('f'));\r\n    assertIllegalArgumentException(() -> Conversion.hexDigitToInt('G'));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ConversionTest.java",
  "methodName" : "testHexToByte",
  "sourceCode" : "/**\r\n * Tests {@link Conversion#hexToByte(String, int, byte, int, int)}.\r\n */\r\n@Test\r\nvoid testHexToByte() {\r\n    final String src = \"CDF1F0C10F12345678\";\r\n    assertEquals((byte) 0x00, Conversion.hexToByte(src, 0, (byte) 0, 0, 0));\r\n    assertEquals((byte) 0x0C, Conversion.hexToByte(src, 0, (byte) 0, 0, 1));\r\n    assertEquals((byte) 0xDC, Conversion.hexToByte(src, 0, (byte) 0, 0, 2));\r\n    assertEquals((byte) 0xFD, Conversion.hexToByte(src, 1, (byte) 0, 0, 2));\r\n    assertEquals((byte) 0x34, Conversion.hexToByte(src, 0, (byte) 0x34, 0, 0));\r\n    assertEquals((byte) 0x84, Conversion.hexToByte(src, 17, (byte) 0x34, 4, 1));\r\n    assertThrows(StringIndexOutOfBoundsException.class, () -> Conversion.hexToByte(src, src.length(), (byte) 0, 0, 1));\r\n    assertThrows(StringIndexOutOfBoundsException.class, () -> Conversion.hexToByte(src, Integer.MIN_VALUE, (byte) 0, 0, 1));\r\n    assertThrows(StringIndexOutOfBoundsException.class, () -> Conversion.hexToByte(src, Integer.MAX_VALUE, (byte) 0, 0, 1));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ConversionTest.java",
  "methodName" : "testHexToInt",
  "sourceCode" : "/**\r\n * Tests {@link Conversion#hexToInt(String, int, int, int, int)}.\r\n */\r\n@Test\r\nvoid testHexToInt() {\r\n    final String src = \"CDF1F0C10F12345678\";\r\n    assertEquals(0x00000000, Conversion.hexToInt(src, 0, 0, 0, 0));\r\n    assertEquals(0x0000000C, Conversion.hexToInt(src, 0, 0, 0, 1));\r\n    assertEquals(0x1C0F1FDC, Conversion.hexToInt(src, 0, 0, 0, 8));\r\n    assertEquals(0x01C0F1FD, Conversion.hexToInt(src, 1, 0, 0, 8));\r\n    assertEquals(0x12345679, Conversion.hexToInt(src, 0, 0x12345679, 0, 0));\r\n    assertEquals(0x87645679, Conversion.hexToInt(src, 15, 0x12345679, 20, 3));\r\n    assertThrows(StringIndexOutOfBoundsException.class, () -> Conversion.hexToInt(src, src.length(), 0, 0, 1));\r\n    assertThrows(StringIndexOutOfBoundsException.class, () -> Conversion.hexToInt(src, Integer.MIN_VALUE, 0, 0, 1));\r\n    assertThrows(StringIndexOutOfBoundsException.class, () -> Conversion.hexToInt(src, Integer.MAX_VALUE, 0, 0, 1));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ConversionTest.java",
  "methodName" : "testHexToLong",
  "sourceCode" : "/**\r\n * Tests {@link Conversion#hexToLong(String, int, long, int, int)}.\r\n */\r\n@Test\r\nvoid testHexToLong() {\r\n    final String src = \"CDF1F0C10F12345678\";\r\n    assertEquals(0x0000000000000000L, Conversion.hexToLong(src, 0, 0L, 0, 0));\r\n    assertEquals(0x000000000000000CL, Conversion.hexToLong(src, 0, 0L, 0, 1));\r\n    assertEquals(0x000000001C0F1FDCL, Conversion.hexToLong(src, 0, 0L, 0, 8));\r\n    assertEquals(0x0000000001C0F1FDL, Conversion.hexToLong(src, 1, 0L, 0, 8));\r\n    assertEquals(0x123456798ABCDEF0L, Conversion.hexToLong(src, 0, 0x123456798ABCDEF0L, 0, 0));\r\n    assertEquals(0x1234567876BCDEF0L, Conversion.hexToLong(src, 15, 0x123456798ABCDEF0L, 24, 3));\r\n    assertThrows(StringIndexOutOfBoundsException.class, () -> Conversion.hexToLong(src, src.length(), 0, 0, 1));\r\n    assertThrows(StringIndexOutOfBoundsException.class, () -> Conversion.hexToLong(src, Integer.MIN_VALUE, 0, 0, 1));\r\n    assertThrows(StringIndexOutOfBoundsException.class, () -> Conversion.hexToLong(src, Integer.MAX_VALUE, 0, 0, 1));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ConversionTest.java",
  "methodName" : "testHexToShort",
  "sourceCode" : "/**\r\n * Tests {@link Conversion#hexToShort(String, int, short, int, int)}.\r\n */\r\n@Test\r\nvoid testHexToShort() {\r\n    final String src = \"CDF1F0C10F12345678\";\r\n    assertEquals((short) 0x0000, Conversion.hexToShort(src, 0, (short) 0, 0, 0));\r\n    assertEquals((short) 0x000C, Conversion.hexToShort(src, 0, (short) 0, 0, 1));\r\n    assertEquals((short) 0x1FDC, Conversion.hexToShort(src, 0, (short) 0, 0, 4));\r\n    assertEquals((short) 0xF1FD, Conversion.hexToShort(src, 1, (short) 0, 0, 4));\r\n    assertEquals((short) 0x1234, Conversion.hexToShort(src, 0, (short) 0x1234, 0, 0));\r\n    assertEquals((short) 0x8764, Conversion.hexToShort(src, 15, (short) 0x1234, 4, 3));\r\n    assertThrows(StringIndexOutOfBoundsException.class, () -> Conversion.hexToShort(src, src.length(), (short) 0, 0, 1));\r\n    assertThrows(StringIndexOutOfBoundsException.class, () -> Conversion.hexToShort(src, Integer.MIN_VALUE, (short) 0, 0, 1));\r\n    assertThrows(StringIndexOutOfBoundsException.class, () -> Conversion.hexToShort(src, Integer.MAX_VALUE, (short) 0, 0, 1));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ConversionTest.java",
  "methodName" : "testIntArrayToLong",
  "sourceCode" : "/**\r\n * Tests {@link Conversion#intArrayToLong(int[], int, long, int, int)}.\r\n */\r\n@Test\r\nvoid testIntArrayToLong() {\r\n    final int[] src = { 0xCDF1F0C1, 0x0F123456, 0x78000000 };\r\n    assertEquals(0x0000000000000000L, Conversion.intArrayToLong(src, 0, 0L, 0, 0));\r\n    assertEquals(0x0000000000000000L, Conversion.intArrayToLong(src, 1, 0L, 0, 0));\r\n    assertEquals(0x00000000CDF1F0C1L, Conversion.intArrayToLong(src, 0, 0L, 0, 1));\r\n    assertEquals(0x0F123456CDF1F0C1L, Conversion.intArrayToLong(src, 0, 0L, 0, 2));\r\n    assertEquals(0x000000000F123456L, Conversion.intArrayToLong(src, 1, 0L, 0, 1));\r\n    assertEquals(0x123456789ABCDEF0L, Conversion.intArrayToLong(src, 0, 0x123456789ABCDEF0L, 0, 0));\r\n    assertEquals(0x1234567878000000L, Conversion.intArrayToLong(src, 2, 0x123456789ABCDEF0L, 0, 1));\r\n    // assertEquals(0x0F12345678000000L, Conversion.intsToLong(src, 1, 0x123456789ABCDEF0L, 32, 2));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ConversionTest.java",
  "methodName" : "testIntToBinary",
  "sourceCode" : "/**\r\n * Tests {@link Conversion#intToBinary(int, int, boolean[], int, int)}.\r\n */\r\n@Test\r\nvoid testIntToBinary() {\r\n    assertArrayEquals(new boolean[] {}, Conversion.intToBinary(0x00000000, 0, new boolean[] {}, 0, 0));\r\n    assertArrayEquals(new boolean[] {}, Conversion.intToBinary(0x00000000, 100, new boolean[] {}, 0, 0));\r\n    assertArrayEquals(new boolean[] {}, Conversion.intToBinary(0x00000000, 0, new boolean[] {}, 100, 0));\r\n    assertArrayEquals(new boolean[69], Conversion.intToBinary(0x90ABCDEF, 0, new boolean[69], 0, 0));\r\n    assertArrayEquals(new boolean[] { true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false }, Conversion.intToBinary(0x90ABCDEF, 0, new boolean[37], 0, 1));\r\n    assertArrayEquals(new boolean[] { true, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false }, Conversion.intToBinary(0x90ABCDEF, 0, new boolean[37], 0, 2));\r\n    assertArrayEquals(new boolean[] { true, true, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false }, Conversion.intToBinary(0x90ABCDEF, 0, new boolean[37], 0, 3));\r\n    assertArrayEquals(new boolean[] { true, true, true, true, false, true, true, true, true, false, true, true, false, false, true, true, true, true, false, true, false, true, false, true, false, false, false, false, true, false, false, false, false, false, false, false, false }, Conversion.intToBinary(0x90ABCDEF, 0, new boolean[37], 0, 31));\r\n    assertArrayEquals(new boolean[] { true, true, true, true, false, true, true, true, true, false, true, true, false, false, true, true, true, true, false, true, false, true, false, true, false, false, false, false, true, false, false, true, false, false, false, false, false }, Conversion.intToBinary(0x90ABCDEF, 0, new boolean[37], 0, 32));\r\n    assertArrayEquals(new boolean[] { false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false }, Conversion.intToBinary(0x90ABCDEF, 0, new boolean[37], 2, 1));\r\n    assertArrayEquals(new boolean[] { false, false, true, true, true, true, false, true, true, true, true, false, true, true, false, false, true, true, true, true, false, true, false, true, false, true, false, false, false, false, true, false, false, true, false, false, false }, Conversion.intToBinary(0x90ABCDEF, 0, new boolean[37], 2, 32));\r\n    assertArrayEquals(new boolean[] { true, true, true, false, true, true, true, true, false, true, true, false, false, true, true, true, true, false, true, false, true, false, true, false, false, false, false, true, false, false, true, false, false, false, false, false, false }, Conversion.intToBinary(0x90ABCDEF, 1, new boolean[37], 0, 31));\r\n    assertArrayEquals(new boolean[] { true, true, false, true, true, true, true, false, true, true, false, false, true, true, true, true, false, true, false, true, false, true, false, false, false, false, true, false, false, true, false, false, false, false, false, false, false }, Conversion.intToBinary(0x90ABCDEF, 2, new boolean[37], 0, 30));\r\n    // assertArrayEquals(new boolean[]{false, false, false, true, true, false, true,\r\n    // true,\r\n    // true, true, false, true, true, false, false, true, true, true, true, false, true,\r\n    // false, true, false, true, false, false, false, false, true, false, false, false,\r\n    // false, false, false, false}, Conversion.intToBinary(0x90ABCDEF, 2, new boolean[37],\r\n    // 3, 31)); //rejected by assertion\r\n    assertArrayEquals(new boolean[] { false, false, false, true, true, false, true, true, true, true, false, true, true, false, false, true, true, true, true, false, true, false, true, false, true, false, false, false, false, true, false, false, true, false, false, false, false }, Conversion.intToBinary(0x90ABCDEF, 2, new boolean[37], 3, 30));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ConversionTest.java",
  "methodName" : "testIntToByteArray",
  "sourceCode" : "/**\r\n * Tests {@link Conversion#intToByteArray(int, int, byte[], int, int)}.\r\n */\r\n@Test\r\nvoid testIntToByteArray() {\r\n    assertArrayEquals(new byte[] {}, Conversion.intToByteArray(0x00000000, 0, new byte[] {}, 0, 0));\r\n    assertArrayEquals(new byte[] {}, Conversion.intToByteArray(0x00000000, 100, new byte[] {}, 0, 0));\r\n    assertArrayEquals(new byte[] {}, Conversion.intToByteArray(0x00000000, 0, new byte[] {}, 100, 0));\r\n    assertArrayEquals(new byte[] { (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF }, Conversion.intToByteArray(0x90ABCDEF, 0, new byte[] { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 }, 0, 0));\r\n    assertArrayEquals(new byte[] { (byte) 0xEF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF }, Conversion.intToByteArray(0x90ABCDEF, 0, new byte[] { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 }, 0, 1));\r\n    assertArrayEquals(new byte[] { (byte) 0xEF, (byte) 0xCD, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF }, Conversion.intToByteArray(0x90ABCDEF, 0, new byte[] { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 }, 0, 2));\r\n    assertArrayEquals(new byte[] { (byte) 0xEF, (byte) 0xCD, (byte) 0xAB, (byte) 0x90, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF }, Conversion.intToByteArray(0x90ABCDEF, 0, new byte[] { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 }, 0, 4));\r\n    assertArrayEquals(new byte[] { (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xEF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF }, Conversion.intToByteArray(0x90ABCDEF, 0, new byte[] { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 }, 3, 1));\r\n    assertArrayEquals(new byte[] { (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xEF, (byte) 0xCD, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF }, Conversion.intToByteArray(0x90ABCDEF, 0, new byte[] { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 }, 3, 2));\r\n    assertArrayEquals(new byte[] { (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xEF, (byte) 0xCD, (byte) 0xAB, (byte) 0x90, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF }, Conversion.intToByteArray(0x90ABCDEF, 0, new byte[] { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 }, 3, 4));\r\n    assertArrayEquals(new byte[] { (byte) 0xF7, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF }, Conversion.intToByteArray(0x90ABCDEF, 1, new byte[] { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 }, 0, 1));\r\n    assertArrayEquals(new byte[] { (byte) 0x7B, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF }, Conversion.intToByteArray(0x90ABCDEF, 2, new byte[] { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 }, 0, 1));\r\n    assertArrayEquals(new byte[] { (byte) 0xFF, (byte) 0x00, (byte) 0xFF, (byte) 0x6F, (byte) 0x5E, (byte) 0x85, (byte) 0xFC, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF }, Conversion.intToByteArray(0x90ABCDEF, 5, new byte[] { -1, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1 }, 3, 4));\r\n    // assertArrayEquals(new\r\n    // byte[]{(byte) 0xFF, (byte) 0x00, (byte) 0xFF, (byte) 0x5E, (byte) 0x85, (byte) 0xFC, (byte) 0x00, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF}, Conversion.intToByteArray(0x90ABCDEF, 13, new\r\n    // byte[]{-1, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1}, 3, 4)); //rejected by assertion\r\n    assertArrayEquals(new byte[] { (byte) 0xFF, (byte) 0x00, (byte) 0xFF, (byte) 0x5E, (byte) 0x85, (byte) 0xFC, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF }, Conversion.intToByteArray(0x90ABCDEF, 13, new byte[] { -1, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1 }, 3, 3));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ConversionTest.java",
  "methodName" : "testIntToHex",
  "sourceCode" : "/**\r\n * Tests {@link Conversion#intToHex(int, int, String, int, int)}.\r\n */\r\n@Test\r\nvoid testIntToHex() {\r\n    assertEquals(\"\", Conversion.intToHex(0x00000000, 0, \"\", 0, 0));\r\n    assertEquals(\"\", Conversion.intToHex(0x00000000, 100, \"\", 0, 0));\r\n    assertEquals(\"\", Conversion.intToHex(0x00000000, 0, \"\", 100, 0));\r\n    assertEquals(\"ffffffffffffffffffffffff\", Conversion.intToHex(0x90ABCDEF, 0, \"ffffffffffffffffffffffff\", 0, 0));\r\n    assertEquals(\"3fffffffffffffffffffffff\", Conversion.intToHex(0x90ABCDE3, 0, \"ffffffffffffffffffffffff\", 0, 1));\r\n    assertEquals(\"feffffffffffffffffffffff\", Conversion.intToHex(0x90ABCDEF, 0, \"ffffffffffffffffffffffff\", 0, 2));\r\n    assertEquals(\"fedcffffffffffffffffffff\", Conversion.intToHex(0x90ABCDEF, 0, \"ffffffffffffffffffffffff\", 0, 4));\r\n    assertEquals(\"fedcba0fffffffffffffffff\", Conversion.intToHex(0x90ABCDEF, 0, \"ffffffffffffffffffffffff\", 0, 7));\r\n    assertEquals(\"fedcba09ffffffffffffffff\", Conversion.intToHex(0x90ABCDEF, 0, \"ffffffffffffffffffffffff\", 0, 8));\r\n    assertEquals(\"fff3ffffffffffffffffffff\", Conversion.intToHex(0x90ABCDE3, 0, \"ffffffffffffffffffffffff\", 3, 1));\r\n    assertEquals(\"ffffefffffffffffffffffff\", Conversion.intToHex(0x90ABCDEF, 0, \"ffffffffffffffffffffffff\", 3, 2));\r\n    assertEquals(\"ffffedcfffffffffffffffff\", Conversion.intToHex(0x90ABCDEF, 0, \"ffffffffffffffffffffffff\", 3, 4));\r\n    assertEquals(\"ffffedcba0ffffffffffffff\", Conversion.intToHex(0x90ABCDEF, 0, \"ffffffffffffffffffffffff\", 3, 7));\r\n    assertEquals(\"ffffedcba09fffffffffffff\", Conversion.intToHex(0x90ABCDEF, 0, \"ffffffffffffffffffffffff\", 3, 8));\r\n    assertEquals(\"7fffffffffffffffffffffff\", Conversion.intToHex(0x90ABCDEF, 1, \"ffffffffffffffffffffffff\", 0, 1));\r\n    assertEquals(\"bfffffffffffffffffffffff\", Conversion.intToHex(0x90ABCDEF, 2, \"ffffffffffffffffffffffff\", 0, 1));\r\n    assertEquals(\"fffdb97512ffffffffffffff\", Conversion.intToHex(0x90ABCDEF, 3, \"ffffffffffffffffffffffff\", 3, 8));\r\n    // assertEquals(\"ffffffffffffffffffffffff\", Conversion.intToHex(0x90ABCDEF,\r\n    // 4, \"ffffffffffffffffffffffff\", 3, 8)); //rejected by assertion\r\n    assertEquals(\"fffedcba09ffffffffffffff\", Conversion.intToHex(0x90ABCDEF, 4, \"ffffffffffffffffffffffff\", 3, 7));\r\n    assertEquals(\"fedcba09\", Conversion.intToHex(0x90ABCDEF, 0, \"\", 0, 8));\r\n    assertThrows(StringIndexOutOfBoundsException.class, () -> Conversion.intToHex(0x90ABCDEF, 0, \"\", 1, 8));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ConversionTest.java",
  "methodName" : "testIntToHexDigit",
  "sourceCode" : "/**\r\n * Tests {@link Conversion#intToHexDigit(int)}.\r\n */\r\n@Test\r\nvoid testIntToHexDigit() {\r\n    assertEquals('0', Conversion.intToHexDigit(0));\r\n    assertEquals('1', Conversion.intToHexDigit(1));\r\n    assertEquals('2', Conversion.intToHexDigit(2));\r\n    assertEquals('3', Conversion.intToHexDigit(3));\r\n    assertEquals('4', Conversion.intToHexDigit(4));\r\n    assertEquals('5', Conversion.intToHexDigit(5));\r\n    assertEquals('6', Conversion.intToHexDigit(6));\r\n    assertEquals('7', Conversion.intToHexDigit(7));\r\n    assertEquals('8', Conversion.intToHexDigit(8));\r\n    assertEquals('9', Conversion.intToHexDigit(9));\r\n    assertEquals('a', Conversion.intToHexDigit(10));\r\n    assertEquals('b', Conversion.intToHexDigit(11));\r\n    assertEquals('c', Conversion.intToHexDigit(12));\r\n    assertEquals('d', Conversion.intToHexDigit(13));\r\n    assertEquals('e', Conversion.intToHexDigit(14));\r\n    assertEquals('f', Conversion.intToHexDigit(15));\r\n    assertIllegalArgumentException(() -> Conversion.intToHexDigit(16));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ConversionTest.java",
  "methodName" : "testIntToHexDigitMsb0",
  "sourceCode" : "/**\r\n * Tests {@link Conversion#intToHexDigitMsb0(int)}.\r\n */\r\n@Test\r\nvoid testIntToHexDigitMsb0() {\r\n    assertEquals('0', Conversion.intToHexDigitMsb0(0));\r\n    assertEquals('8', Conversion.intToHexDigitMsb0(1));\r\n    assertEquals('4', Conversion.intToHexDigitMsb0(2));\r\n    assertEquals('c', Conversion.intToHexDigitMsb0(3));\r\n    assertEquals('2', Conversion.intToHexDigitMsb0(4));\r\n    assertEquals('a', Conversion.intToHexDigitMsb0(5));\r\n    assertEquals('6', Conversion.intToHexDigitMsb0(6));\r\n    assertEquals('e', Conversion.intToHexDigitMsb0(7));\r\n    assertEquals('1', Conversion.intToHexDigitMsb0(8));\r\n    assertEquals('9', Conversion.intToHexDigitMsb0(9));\r\n    assertEquals('5', Conversion.intToHexDigitMsb0(10));\r\n    assertEquals('d', Conversion.intToHexDigitMsb0(11));\r\n    assertEquals('3', Conversion.intToHexDigitMsb0(12));\r\n    assertEquals('b', Conversion.intToHexDigitMsb0(13));\r\n    assertEquals('7', Conversion.intToHexDigitMsb0(14));\r\n    assertEquals('f', Conversion.intToHexDigitMsb0(15));\r\n    assertIllegalArgumentException(() -> Conversion.intToHexDigitMsb0(16));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ConversionTest.java",
  "methodName" : "testIntToShortArray",
  "sourceCode" : "/**\r\n * Tests {@link Conversion#intToShortArray(int, int, short[], int, int)}.\r\n */\r\n@Test\r\nvoid testIntToShortArray() {\r\n    assertArrayEquals(new short[] {}, Conversion.intToShortArray(0x00000000, 0, new short[] {}, 0, 0));\r\n    assertArrayEquals(new short[] {}, Conversion.intToShortArray(0x00000000, 100, new short[] {}, 0, 0));\r\n    assertArrayEquals(new short[] {}, Conversion.intToShortArray(0x00000000, 0, new short[] {}, 100, 0));\r\n    assertArrayEquals(new short[] { (short) 0xFFFF, (short) 0xFFFF, (short) 0xFFFF, (short) 0xFFFF }, Conversion.intToShortArray(0x12345678, 0, new short[] { -1, -1, -1, -1 }, 0, 0));\r\n    assertArrayEquals(new short[] { (short) 0x5678, (short) 0xFFFF, (short) 0xFFFF, (short) 0xFFFF }, Conversion.intToShortArray(0x12345678, 0, new short[] { -1, -1, -1, -1 }, 0, 1));\r\n    assertArrayEquals(new short[] { (short) 0x5678, (short) 0x1234, (short) 0xFFFF, (short) 0xFFFF }, Conversion.intToShortArray(0x12345678, 0, new short[] { -1, -1, -1, -1 }, 0, 2));\r\n    // assertArrayEquals(new\r\n    // short[]{(short) 0x5678, (short) 0x1234, (short) 0x5678, (short) 0xFFFF}, Conversion.intToShortArray(0x12345678,\r\n    // 0, new short[]{-1, -1, -1, -1}, 0, 3)); //rejected by assertion\r\n    // assertArrayEquals(new\r\n    // short[]{(short) 0x5678, (short) 0x1234, (short) 0x5678, (short) 0x1234}, Conversion.intToShortArray(0x12345678,\r\n    // 0, new short[]{-1, -1, -1, -1}, 0, 4));\r\n    // assertArrayEquals(new\r\n    // short[]{(short) 0xFFFF, (short) 0x5678, (short) 0x1234, (short) 0x5678}, Conversion.intToShortArray(0x12345678,\r\n    // 0, new short[]{-1, -1, -1, -1}, 1, 3));\r\n    assertArrayEquals(new short[] { (short) 0xFFFF, (short) 0xFFFF, (short) 0x5678, (short) 0x1234 }, Conversion.intToShortArray(0x12345678, 0, new short[] { -1, -1, -1, -1 }, 2, 2));\r\n    assertArrayEquals(new short[] { (short) 0xFFFF, (short) 0xFFFF, (short) 0x5678, (short) 0xFFFF }, Conversion.intToShortArray(0x12345678, 0, new short[] { -1, -1, -1, -1 }, 2, 1));\r\n    assertArrayEquals(new short[] { (short) 0xFFFF, (short) 0xFFFF, (short) 0xFFFF, (short) 0x5678 }, Conversion.intToShortArray(0x12345678, 0, new short[] { -1, -1, -1, -1 }, 3, 1));\r\n    assertArrayEquals(new short[] { (short) 0xFFFF, (short) 0xFFFF, (short) 0x2B3C, (short) 0xFFFF }, Conversion.intToShortArray(0x12345678, 1, new short[] { -1, -1, -1, -1 }, 2, 1));\r\n    assertArrayEquals(new short[] { (short) 0xFFFF, (short) 0xFFFF, (short) 0x159E, (short) 0xFFFF }, Conversion.intToShortArray(0x12345678, 2, new short[] { -1, -1, -1, -1 }, 2, 1));\r\n    assertArrayEquals(new short[] { (short) 0xFFFF, (short) 0xFFFF, (short) 0x8ACF, (short) 0xFFFF }, Conversion.intToShortArray(0x12345678, 3, new short[] { -1, -1, -1, -1 }, 2, 1));\r\n    assertArrayEquals(new short[] { (short) 0xFFFF, (short) 0xFFFF, (short) 0x4567, (short) 0xFFFF }, Conversion.intToShortArray(0x12345678, 4, new short[] { -1, -1, -1, -1 }, 2, 1));\r\n    // assertArrayEquals(new\r\n    // short[]{(short) 0xE6F7, (short) 0x4855, (short) 0x2B3C, (short) 0x091A}, Conversion.intToShortArray(0x12345678,\r\n    // 1, new short[]{-1, -1, -1, -1}, 0, 4)); //rejected by assertion\r\n    // assertArrayEquals(new\r\n    // short[]{(short) 0x2B3C}, Conversion.intToShortArray(0x12345678, 33, new\r\n    // short[]{0}, 0, 1)); //rejected by assertion\r\n    assertArrayEquals(new short[] { (short) 0x091A }, Conversion.intToShortArray(0x12345678, 17, new short[] { 0 }, 0, 1));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ConversionTest.java",
  "methodName" : "testLongToBinary",
  "sourceCode" : "/**\r\n * Tests {@link Conversion#longToBinary(long, int, boolean[], int, int)}.\r\n */\r\n@Test\r\nvoid testLongToBinary() {\r\n    assertArrayEquals(new boolean[] {}, Conversion.longToBinary(0x0000000000000000L, 0, new boolean[] {}, 0, 0));\r\n    assertArrayEquals(new boolean[] {}, Conversion.longToBinary(0x0000000000000000L, 100, new boolean[] {}, 0, 0));\r\n    assertArrayEquals(new boolean[] {}, Conversion.longToBinary(0x0000000000000000L, 0, new boolean[] {}, 100, 0));\r\n    assertArrayEquals(new boolean[69], Conversion.longToBinary(0x1234567890ABCDEFL, 0, new boolean[69], 0, 0));\r\n    assertArrayEquals(new boolean[] { true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false }, Conversion.longToBinary(0x1234567890ABCDEFL, 0, new boolean[69], 0, 1));\r\n    assertArrayEquals(new boolean[] { true, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false }, Conversion.longToBinary(0x1234567890ABCDEFL, 0, new boolean[69], 0, 2));\r\n    assertArrayEquals(new boolean[] { true, true, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false }, Conversion.longToBinary(0x1234567890ABCDEFL, 0, new boolean[69], 0, 3));\r\n    assertArrayEquals(new boolean[] { true, true, true, true, false, true, true, true, true, false, true, true, false, false, true, true, true, true, false, true, false, true, false, true, false, false, false, false, true, false, false, true, false, false, false, true, true, true, true, false, false, true, true, false, true, false, true, false, false, false, true, false, true, true, false, false, false, true, false, false, true, false, false, false, false, false, false, false, false }, Conversion.longToBinary(0x1234567890ABCDEFL, 0, new boolean[69], 0, 63));\r\n    assertArrayEquals(new boolean[] { true, true, true, true, false, true, true, true, true, false, true, true, false, false, true, true, true, true, false, true, false, true, false, true, false, false, false, false, true, false, false, true, false, false, false, true, true, true, true, false, false, true, true, false, true, false, true, false, false, false, true, false, true, true, false, false, false, true, false, false, true, false, false, false, false, false, false, false, false }, Conversion.longToBinary(0x1234567890ABCDEFL, 0, new boolean[69], 0, 64));\r\n    assertArrayEquals(new boolean[] { false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false }, Conversion.longToBinary(0x1234567890ABCDEFL, 0, new boolean[69], 2, 1));\r\n    assertArrayEquals(new boolean[] { false, false, true, true, true, true, false, true, true, true, true, false, true, true, false, false, true, true, true, true, false, true, false, true, false, true, false, false, false, false, true, false, false, true, false, false, false, true, true, true, true, false, false, true, true, false, true, false, true, false, false, false, true, false, true, true, false, false, false, true, false, false, true, false, false, false, false, false, false }, Conversion.longToBinary(0x1234567890ABCDEFL, 0, new boolean[69], 2, 64));\r\n    assertArrayEquals(new boolean[] { true, true, true, false, true, true, true, true, false, true, true, false, false, true, true, true, true, false, true, false, true, false, true, false, false, false, false, true, false, false, true, false, false, false, true, true, true, true, false, false, true, true, false, true, false, true, false, false, false, true, false, true, true, false, false, false, true, false, false, true, false, false, false, false, false, false, false, false, false }, Conversion.longToBinary(0x1234567890ABCDEFL, 1, new boolean[69], 0, 63));\r\n    assertArrayEquals(new boolean[] { true, true, false, true, true, true, true, false, true, true, false, false, true, true, true, true, false, true, false, true, false, true, false, false, false, false, true, false, false, true, false, false, false, true, true, true, true, false, false, true, true, false, true, false, true, false, false, false, true, false, true, true, false, false, false, true, false, false, true, false, false, false, false, false, false, false, false, false, false }, Conversion.longToBinary(0x1234567890ABCDEFL, 2, new boolean[69], 0, 62));\r\n    // assertArrayEquals(new boolean[]{false, false, false, true, true, false, true, true,\r\n    // true, true, false, true, true, false, false, true, true, true, true, false, true,\r\n    // false, true, false, true, false, false, false, false, true, false, false, true,\r\n    // false, false, false, true, true, true, true, false, false, true, true, false, true,\r\n    // false, true, false, false, false, true, false, true, true, false, false, false, true,\r\n    // false, false, true, false, false, false\r\n    // , false, false, false, false}, Conversion.longToBinary(0x1234567890ABCDEFL, 2, new\r\n    // boolean[69], 3, 63)); //rejected by assertion\r\n    assertArrayEquals(new boolean[] { false, false, false, true, true, false, true, true, true, true, false, true, true, false, false, true, true, true, true, false, true, false, true, false, true, false, false, false, false, true, false, false, true, false, false, false, true, true, true, true, false, false, true, true, false, true, false, true, false, false, false, true, false, true, true, false, false, false, true, false, false, true, false, false, false, false, false, false, false }, Conversion.longToBinary(0x1234567890ABCDEFL, 2, new boolean[69], 3, 62));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ConversionTest.java",
  "methodName" : "testLongToByteArray",
  "sourceCode" : "/**\r\n * Tests {@link Conversion#longToByteArray(long, int, byte[], int, int)}.\r\n */\r\n@Test\r\nvoid testLongToByteArray() {\r\n    assertArrayEquals(new byte[] {}, Conversion.longToByteArray(0x0000000000000000L, 0, new byte[] {}, 0, 0));\r\n    assertArrayEquals(new byte[] {}, Conversion.longToByteArray(0x0000000000000000L, 100, new byte[] {}, 0, 0));\r\n    assertArrayEquals(new byte[] {}, Conversion.longToByteArray(0x0000000000000000L, 0, new byte[] {}, 100, 0));\r\n    assertArrayEquals(new byte[] { (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF }, Conversion.longToByteArray(0x1234567890ABCDEFL, 0, new byte[] { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 }, 0, 0));\r\n    assertArrayEquals(new byte[] { (byte) 0xEF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF }, Conversion.longToByteArray(0x1234567890ABCDEFL, 0, new byte[] { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 }, 0, 1));\r\n    assertArrayEquals(new byte[] { (byte) 0xEF, (byte) 0xCD, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF }, Conversion.longToByteArray(0x1234567890ABCDEFL, 0, new byte[] { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 }, 0, 2));\r\n    assertArrayEquals(new byte[] { (byte) 0xEF, (byte) 0xCD, (byte) 0xAB, (byte) 0x90, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF }, Conversion.longToByteArray(0x1234567890ABCDEFL, 0, new byte[] { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 }, 0, 4));\r\n    assertArrayEquals(new byte[] { (byte) 0xEF, (byte) 0xCD, (byte) 0xAB, (byte) 0x90, (byte) 0x78, (byte) 0x56, (byte) 0x34, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF }, Conversion.longToByteArray(0x1234567890ABCDEFL, 0, new byte[] { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 }, 0, 7));\r\n    assertArrayEquals(new byte[] { (byte) 0xEF, (byte) 0xCD, (byte) 0xAB, (byte) 0x90, (byte) 0x78, (byte) 0x56, (byte) 0x34, (byte) 0x12, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF }, Conversion.longToByteArray(0x1234567890ABCDEFL, 0, new byte[] { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 }, 0, 8));\r\n    assertArrayEquals(new byte[] { (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xEF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF }, Conversion.longToByteArray(0x1234567890ABCDEFL, 0, new byte[] { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 }, 3, 1));\r\n    assertArrayEquals(new byte[] { (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xEF, (byte) 0xCD, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF }, Conversion.longToByteArray(0x1234567890ABCDEFL, 0, new byte[] { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 }, 3, 2));\r\n    assertArrayEquals(new byte[] { (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xEF, (byte) 0xCD, (byte) 0xAB, (byte) 0x90, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF }, Conversion.longToByteArray(0x1234567890ABCDEFL, 0, new byte[] { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 }, 3, 4));\r\n    assertArrayEquals(new byte[] { (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xEF, (byte) 0xCD, (byte) 0xAB, (byte) 0x90, (byte) 0x78, (byte) 0x56, (byte) 0x34, (byte) 0xFF }, Conversion.longToByteArray(0x1234567890ABCDEFL, 0, new byte[] { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 }, 3, 7));\r\n    assertArrayEquals(new byte[] { (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xEF, (byte) 0xCD, (byte) 0xAB, (byte) 0x90, (byte) 0x78, (byte) 0x56, (byte) 0x34, (byte) 0x12 }, Conversion.longToByteArray(0x1234567890ABCDEFL, 0, new byte[] { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 }, 3, 8));\r\n    assertArrayEquals(new byte[] { (byte) 0xF7, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF }, Conversion.longToByteArray(0x1234567890ABCDEFL, 1, new byte[] { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 }, 0, 1));\r\n    assertArrayEquals(new byte[] { (byte) 0x7B, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF }, Conversion.longToByteArray(0x1234567890ABCDEFL, 2, new byte[] { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 }, 0, 1));\r\n    assertArrayEquals(new byte[] { (byte) 0xFF, (byte) 0x00, (byte) 0xFF, (byte) 0x6F, (byte) 0x5E, (byte) 0x85, (byte) 0xC4, (byte) 0xB3, (byte) 0xA2, (byte) 0x91, (byte) 0x00 }, Conversion.longToByteArray(0x1234567890ABCDEFL, 5, new byte[] { -1, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1 }, 3, 8));\r\n    // assertArrayEquals(new\r\n    // byte[]{(byte) 0xFF, (byte) 0x00, (byte) 0xFF, (byte) 0x5E, (byte) 0x85, (byte) 0xC4, (byte) 0xB3, (byte) 0xA2, (byte) 0x91, (byte) 0x00, (byte) 0x00}, Conversion.longToByteArray(0x1234567890ABCDEFL, 13, new\r\n    // byte[]{-1, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1}, 3, 8)); //rejected by assertion\r\n    assertArrayEquals(new byte[] { (byte) 0xFF, (byte) 0x00, (byte) 0xFF, (byte) 0x5E, (byte) 0x85, (byte) 0xC4, (byte) 0xB3, (byte) 0xA2, (byte) 0x91, (byte) 0x00, (byte) 0xFF }, Conversion.longToByteArray(0x1234567890ABCDEFL, 13, new byte[] { -1, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1 }, 3, 7));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ConversionTest.java",
  "methodName" : "testLongToHex",
  "sourceCode" : "/**\r\n * Tests {@link Conversion#longToHex(long, int, String, int, int)}.\r\n */\r\n@Test\r\nvoid testLongToHex() {\r\n    assertEquals(\"\", Conversion.longToHex(0x0000000000000000L, 0, \"\", 0, 0));\r\n    assertEquals(\"\", Conversion.longToHex(0x0000000000000000L, 100, \"\", 0, 0));\r\n    assertEquals(\"\", Conversion.longToHex(0x0000000000000000L, 0, \"\", 100, 0));\r\n    assertEquals(\"ffffffffffffffffffffffff\", Conversion.longToHex(0x1234567890ABCDEFL, 0, \"ffffffffffffffffffffffff\", 0, 0));\r\n    assertEquals(\"3fffffffffffffffffffffff\", Conversion.longToHex(0x1234567890ABCDE3L, 0, \"ffffffffffffffffffffffff\", 0, 1));\r\n    assertEquals(\"feffffffffffffffffffffff\", Conversion.longToHex(0x1234567890ABCDEFL, 0, \"ffffffffffffffffffffffff\", 0, 2));\r\n    assertEquals(\"fedcffffffffffffffffffff\", Conversion.longToHex(0x1234567890ABCDEFL, 0, \"ffffffffffffffffffffffff\", 0, 4));\r\n    assertEquals(\"fedcba098765432fffffffff\", Conversion.longToHex(0x1234567890ABCDEFL, 0, \"ffffffffffffffffffffffff\", 0, 15));\r\n    assertEquals(\"fedcba0987654321ffffffff\", Conversion.longToHex(0x1234567890ABCDEFL, 0, \"ffffffffffffffffffffffff\", 0, 16));\r\n    assertEquals(\"fff3ffffffffffffffffffff\", Conversion.longToHex(0x1234567890ABCDE3L, 0, \"ffffffffffffffffffffffff\", 3, 1));\r\n    assertEquals(\"ffffefffffffffffffffffff\", Conversion.longToHex(0x1234567890ABCDEFL, 0, \"ffffffffffffffffffffffff\", 3, 2));\r\n    assertEquals(\"ffffedcfffffffffffffffff\", Conversion.longToHex(0x1234567890ABCDEFL, 0, \"ffffffffffffffffffffffff\", 3, 4));\r\n    assertEquals(\"ffffedcba098765432ffffff\", Conversion.longToHex(0x1234567890ABCDEFL, 0, \"ffffffffffffffffffffffff\", 3, 15));\r\n    assertEquals(\"ffffedcba0987654321fffff\", Conversion.longToHex(0x1234567890ABCDEFL, 0, \"ffffffffffffffffffffffff\", 3, 16));\r\n    assertEquals(\"7fffffffffffffffffffffff\", Conversion.longToHex(0x1234567890ABCDEFL, 1, \"ffffffffffffffffffffffff\", 0, 1));\r\n    assertEquals(\"bfffffffffffffffffffffff\", Conversion.longToHex(0x1234567890ABCDEFL, 2, \"ffffffffffffffffffffffff\", 0, 1));\r\n    assertEquals(\"fffdb975121fca86420fffff\", Conversion.longToHex(0x1234567890ABCDEFL, 3, \"ffffffffffffffffffffffff\", 3, 16));\r\n    // assertEquals(\"ffffffffffffffffffffffff\", Conversion.longToHex(0x1234567890ABCDEFL, 4, \"ffffffffffffffffffffffff\", 3, 16)); //rejected\r\n    // by assertion\r\n    assertEquals(\"fffedcba0987654321ffffff\", Conversion.longToHex(0x1234567890ABCDEFL, 4, \"ffffffffffffffffffffffff\", 3, 15));\r\n    assertEquals(\"fedcba0987654321\", Conversion.longToHex(0x1234567890ABCDEFL, 0, \"\", 0, 16));\r\n    assertThrows(StringIndexOutOfBoundsException.class, () -> Conversion.longToHex(0x1234567890ABCDEFL, 0, \"\", 1, 8));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ConversionTest.java",
  "methodName" : "testLongToIntArray",
  "sourceCode" : "/**\r\n * Tests {@link Conversion#longToIntArray(long, int, int[], int, int)}.\r\n */\r\n@Test\r\nvoid testLongToIntArray() {\r\n    assertArrayEquals(new int[] {}, Conversion.longToIntArray(0x0000000000000000L, 0, new int[] {}, 0, 0));\r\n    assertArrayEquals(new int[] {}, Conversion.longToIntArray(0x0000000000000000L, 100, new int[] {}, 0, 0));\r\n    assertArrayEquals(new int[] {}, Conversion.longToIntArray(0x0000000000000000L, 0, new int[] {}, 100, 0));\r\n    assertArrayEquals(new int[] { 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF }, Conversion.longToIntArray(0x1234567890ABCDEFL, 0, new int[] { -1, -1, -1, -1 }, 0, 0));\r\n    assertArrayEquals(new int[] { 0x90ABCDEF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF }, Conversion.longToIntArray(0x1234567890ABCDEFL, 0, new int[] { -1, -1, -1, -1 }, 0, 1));\r\n    assertArrayEquals(new int[] { 0x90ABCDEF, 0x12345678, 0xFFFFFFFF, 0xFFFFFFFF }, Conversion.longToIntArray(0x1234567890ABCDEFL, 0, new int[] { -1, -1, -1, -1 }, 0, 2));\r\n    // assertArrayEquals(new\r\n    // int[]{0x90ABCDEF, 0x12345678, 0x90ABCDEF, 0x12345678}, Conversion.longToIntArray(0x1234567890ABCDEFL,\r\n    // 0, new int[]{-1, -1, -1, -1}, 0, 4)); //rejected by assertion\r\n    // assertArrayEquals(new\r\n    // int[]{0xFFFFFFFF, 0x90ABCDEF, 0x12345678, 0x90ABCDEF}, Conversion.longToIntArray(0x1234567890ABCDEFL,\r\n    // 0, new int[]{-1, -1, -1, -1}, 1, 3));\r\n    assertArrayEquals(new int[] { 0xFFFFFFFF, 0xFFFFFFFF, 0x90ABCDEF, 0x12345678 }, Conversion.longToIntArray(0x1234567890ABCDEFL, 0, new int[] { -1, -1, -1, -1 }, 2, 2));\r\n    assertArrayEquals(new int[] { 0xFFFFFFFF, 0xFFFFFFFF, 0x90ABCDEF, 0xFFFFFFFF }, Conversion.longToIntArray(0x1234567890ABCDEFL, 0, new int[] { -1, -1, -1, -1 }, 2, 1));\r\n    assertArrayEquals(new int[] { 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0x90ABCDEF }, Conversion.longToIntArray(0x1234567890ABCDEFL, 0, new int[] { -1, -1, -1, -1 }, 3, 1));\r\n    assertArrayEquals(new int[] { 0xFFFFFFFF, 0xFFFFFFFF, 0x4855E6F7, 0xFFFFFFFF }, Conversion.longToIntArray(0x1234567890ABCDEFL, 1, new int[] { -1, -1, -1, -1 }, 2, 1));\r\n    assertArrayEquals(new int[] { 0xFFFFFFFF, 0xFFFFFFFF, 0x242AF37B, 0xFFFFFFFF }, Conversion.longToIntArray(0x1234567890ABCDEFL, 2, new int[] { -1, -1, -1, -1 }, 2, 1));\r\n    assertArrayEquals(new int[] { 0xFFFFFFFF, 0xFFFFFFFF, 0x121579BD, 0xFFFFFFFF }, Conversion.longToIntArray(0x1234567890ABCDEFL, 3, new int[] { -1, -1, -1, -1 }, 2, 1));\r\n    assertArrayEquals(new int[] { 0xFFFFFFFF, 0xFFFFFFFF, 0x890ABCDE, 0xFFFFFFFF }, Conversion.longToIntArray(0x1234567890ABCDEFL, 4, new int[] { -1, -1, -1, -1 }, 2, 1));\r\n    // assertArrayEquals(new\r\n    // int[]{0x4855E6F7, 0x091A2B3C, 0x4855E6F7, 0x091A2B3C}, Conversion.longToIntArray(0x1234567890ABCDEFL,\r\n    // 1, new int[]{-1, -1, -1, -1}, 0, 4)); //rejected by assertion\r\n    assertArrayEquals(new int[] { 0x091A2B3C }, Conversion.longToIntArray(0x1234567890ABCDEFL, 33, new int[] { 0 }, 0, 1));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ConversionTest.java",
  "methodName" : "testLongToShortArray",
  "sourceCode" : "/**\r\n * Tests {@link Conversion#longToShortArray(long, int, short[], int, int)}.\r\n */\r\n@Test\r\nvoid testLongToShortArray() {\r\n    assertArrayEquals(new short[] {}, Conversion.longToShortArray(0x0000000000000000L, 0, new short[] {}, 0, 0));\r\n    assertArrayEquals(new short[] {}, Conversion.longToShortArray(0x0000000000000000L, 100, new short[] {}, 0, 0));\r\n    assertArrayEquals(new short[] {}, Conversion.longToShortArray(0x0000000000000000L, 0, new short[] {}, 100, 0));\r\n    assertArrayEquals(new short[] { (short) 0xFFFF, (short) 0xFFFF, (short) 0xFFFF, (short) 0xFFFF }, Conversion.longToShortArray(0x1234567890ABCDEFL, 0, new short[] { -1, -1, -1, -1 }, 0, 0));\r\n    assertArrayEquals(new short[] { (short) 0xCDEF, (short) 0xFFFF, (short) 0xFFFF, (short) 0xFFFF }, Conversion.longToShortArray(0x1234567890ABCDEFL, 0, new short[] { -1, -1, -1, -1 }, 0, 1));\r\n    assertArrayEquals(new short[] { (short) 0xCDEF, (short) 0x90AB, (short) 0xFFFF, (short) 0xFFFF }, Conversion.longToShortArray(0x1234567890ABCDEFL, 0, new short[] { -1, -1, -1, -1 }, 0, 2));\r\n    assertArrayEquals(new short[] { (short) 0xCDEF, (short) 0x90AB, (short) 0x5678, (short) 0xFFFF }, Conversion.longToShortArray(0x1234567890ABCDEFL, 0, new short[] { -1, -1, -1, -1 }, 0, 3));\r\n    assertArrayEquals(new short[] { (short) 0xCDEF, (short) 0x90AB, (short) 0x5678, (short) 0x1234 }, Conversion.longToShortArray(0x1234567890ABCDEFL, 0, new short[] { -1, -1, -1, -1 }, 0, 4));\r\n    assertArrayEquals(new short[] { (short) 0xFFFF, (short) 0xCDEF, (short) 0x90AB, (short) 0x5678 }, Conversion.longToShortArray(0x1234567890ABCDEFL, 0, new short[] { -1, -1, -1, -1 }, 1, 3));\r\n    assertArrayEquals(new short[] { (short) 0xFFFF, (short) 0xFFFF, (short) 0xCDEF, (short) 0x90AB }, Conversion.longToShortArray(0x1234567890ABCDEFL, 0, new short[] { -1, -1, -1, -1 }, 2, 2));\r\n    assertArrayEquals(new short[] { (short) 0xFFFF, (short) 0xFFFF, (short) 0xCDEF, (short) 0xFFFF }, Conversion.longToShortArray(0x1234567890ABCDEFL, 0, new short[] { -1, -1, -1, -1 }, 2, 1));\r\n    assertArrayEquals(new short[] { (short) 0xFFFF, (short) 0xFFFF, (short) 0xFFFF, (short) 0xCDEF }, Conversion.longToShortArray(0x1234567890ABCDEFL, 0, new short[] { -1, -1, -1, -1 }, 3, 1));\r\n    assertArrayEquals(new short[] { (short) 0xFFFF, (short) 0xFFFF, (short) 0xE6F7, (short) 0xFFFF }, Conversion.longToShortArray(0x1234567890ABCDEFL, 1, new short[] { -1, -1, -1, -1 }, 2, 1));\r\n    assertArrayEquals(new short[] { (short) 0xFFFF, (short) 0xFFFF, (short) 0xF37B, (short) 0xFFFF }, Conversion.longToShortArray(0x1234567890ABCDEFL, 2, new short[] { -1, -1, -1, -1 }, 2, 1));\r\n    assertArrayEquals(new short[] { (short) 0xFFFF, (short) 0xFFFF, (short) 0x79BD, (short) 0xFFFF }, Conversion.longToShortArray(0x1234567890ABCDEFL, 3, new short[] { -1, -1, -1, -1 }, 2, 1));\r\n    assertArrayEquals(new short[] { (short) 0xFFFF, (short) 0xFFFF, (short) 0xBCDE, (short) 0xFFFF }, Conversion.longToShortArray(0x1234567890ABCDEFL, 4, new short[] { -1, -1, -1, -1 }, 2, 1));\r\n    assertArrayEquals(new short[] { (short) 0xE6F7, (short) 0x4855, (short) 0x2B3C, (short) 0x091A }, Conversion.longToShortArray(0x1234567890ABCDEFL, 1, new short[] { -1, -1, -1, -1 }, 0, 4));\r\n    assertArrayEquals(new short[] { (short) 0x2B3C }, Conversion.longToShortArray(0x1234567890ABCDEFL, 33, new short[] { 0 }, 0, 1));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ConversionTest.java",
  "methodName" : "testShortArrayToInt",
  "sourceCode" : "/**\r\n * Tests {@link Conversion#shortArrayToInt(short[], int, int, int, int)}.\r\n */\r\n@Test\r\nvoid testShortArrayToInt() {\r\n    final short[] src = { (short) 0xCDF1, (short) 0xF0C1, (short) 0x0F12, (short) 0x3456, (short) 0x7800 };\r\n    assertEquals(0x00000000, Conversion.shortArrayToInt(src, 0, 0, 0, 0));\r\n    assertEquals(0x0000CDF1, Conversion.shortArrayToInt(src, 0, 0, 0, 1));\r\n    assertEquals(0xF0C1CDF1, Conversion.shortArrayToInt(src, 0, 0, 0, 2));\r\n    assertEquals(0x0F12F0C1, Conversion.shortArrayToInt(src, 1, 0, 0, 2));\r\n    assertEquals(0x12345678, Conversion.shortArrayToInt(src, 0, 0x12345678, 0, 0));\r\n    assertEquals(0xCDF15678, Conversion.shortArrayToInt(src, 0, 0x12345678, 16, 1));\r\n    // assertEquals(0x34567800, Conversion.ShortArrayToInt(src, 3, 0x12345678, 16, 2));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ConversionTest.java",
  "methodName" : "testShortArrayToLong",
  "sourceCode" : "/**\r\n * Tests {@link Conversion#shortArrayToLong(short[], int, long, int, int)}.\r\n */\r\n@Test\r\nvoid testShortArrayToLong() {\r\n    final short[] src = { (short) 0xCDF1, (short) 0xF0C1, (short) 0x0F12, (short) 0x3456, (short) 0x7800 };\r\n    assertEquals(0x0000000000000000L, Conversion.shortArrayToLong(src, 0, 0L, 0, 0));\r\n    assertEquals(0x000000000000CDF1L, Conversion.shortArrayToLong(src, 0, 0L, 0, 1));\r\n    assertEquals(0x00000000F0C1CDF1L, Conversion.shortArrayToLong(src, 0, 0L, 0, 2));\r\n    assertEquals(0x780034560F12F0C1L, Conversion.shortArrayToLong(src, 1, 0L, 0, 4));\r\n    assertEquals(0x123456789ABCDEF0L, Conversion.shortArrayToLong(src, 0, 0x123456789ABCDEF0L, 0, 0));\r\n    assertEquals(0x123456CDF1BCDEF0L, Conversion.shortArrayToLong(src, 0, 0x123456789ABCDEF0L, 24, 1));\r\n    assertEquals(0x123478003456DEF0L, Conversion.shortArrayToLong(src, 3, 0x123456789ABCDEF0L, 16, 2));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ConversionTest.java",
  "methodName" : "testShortToBinary",
  "sourceCode" : "/**\r\n * Tests {@link Conversion#shortToBinary(short, int, boolean[], int, int)}.\r\n */\r\n@Test\r\nvoid testShortToBinary() {\r\n    assertArrayEquals(new boolean[] {}, Conversion.shortToBinary((short) 0x0000, 0, new boolean[] {}, 0, 0));\r\n    assertArrayEquals(new boolean[] {}, Conversion.shortToBinary((short) 0x0000, 100, new boolean[] {}, 0, 0));\r\n    assertArrayEquals(new boolean[] {}, Conversion.shortToBinary((short) 0x0000, 0, new boolean[] {}, 100, 0));\r\n    assertArrayEquals(new boolean[69], Conversion.shortToBinary((short) 0xCDEF, 0, new boolean[69], 0, 0));\r\n    assertArrayEquals(new boolean[] { true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false }, Conversion.shortToBinary((short) 0xCDEF, 0, new boolean[21], 0, 1));\r\n    assertArrayEquals(new boolean[] { true, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false }, Conversion.shortToBinary((short) 0xCDEF, 0, new boolean[21], 0, 2));\r\n    assertArrayEquals(new boolean[] { true, true, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false }, Conversion.shortToBinary((short) 0xCDEF, 0, new boolean[21], 0, 3));\r\n    assertArrayEquals(new boolean[] { true, true, true, true, false, true, true, true, true, false, true, true, false, false, true, false, false, false, false, false, false }, Conversion.shortToBinary((short) 0xCDEF, 0, new boolean[21], 0, 15));\r\n    assertArrayEquals(new boolean[] { true, true, true, true, false, true, true, true, true, false, true, true, false, false, true, true, false, false, false, false, false }, Conversion.shortToBinary((short) 0xCDEF, 0, new boolean[21], 0, 16));\r\n    assertArrayEquals(new boolean[] { false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false }, Conversion.shortToBinary((short) 0xCDEF, 0, new boolean[21], 2, 1));\r\n    assertArrayEquals(new boolean[] { false, false, true, true, true, true, false, true, true, true, true, false, true, true, false, false, true, true, false, false, false }, Conversion.shortToBinary((short) 0xCDEF, 0, new boolean[21], 2, 16));\r\n    assertArrayEquals(new boolean[] { true, true, true, false, true, true, true, true, false, true, true, false, false, true, true, false, false, false, false, false, false }, Conversion.shortToBinary((short) 0xCDEF, 1, new boolean[21], 0, 15));\r\n    assertArrayEquals(new boolean[] { true, true, false, true, true, true, true, false, true, true, false, false, true, true, false, false, false, false, false, false, false }, Conversion.shortToBinary((short) 0xCDEF, 2, new boolean[21], 0, 14));\r\n    // assertArrayEquals(new boolean[]{false, false, false, true, true, false, true, true,\r\n    // true, true, false, true, true, false, false, true, false, false, false, false,\r\n    // false}, Conversion.shortToBinary((short) 0xCDEF, 2, new boolean[21],\r\n    // 3, 15)); //rejected by\r\n    // assertion\r\n    assertArrayEquals(new boolean[] { false, false, false, true, true, false, true, true, true, true, false, true, true, false, false, true, true, false, false, false, false }, Conversion.shortToBinary((short) 0xCDEF, 2, new boolean[21], 3, 14));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ConversionTest.java",
  "methodName" : "testShortToByteArray",
  "sourceCode" : "/**\r\n * Tests {@link Conversion#shortToByteArray(short, int, byte[], int, int)}.\r\n */\r\n@Test\r\nvoid testShortToByteArray() {\r\n    assertArrayEquals(new byte[] {}, Conversion.shortToByteArray((short) 0x0000, 0, new byte[] {}, 0, 0));\r\n    assertArrayEquals(new byte[] {}, Conversion.shortToByteArray((short) 0x0000, 100, new byte[] {}, 0, 0));\r\n    assertArrayEquals(new byte[] {}, Conversion.shortToByteArray((short) 0x0000, 0, new byte[] {}, 100, 0));\r\n    assertArrayEquals(new byte[] { (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF }, Conversion.shortToByteArray((short) 0xCDEF, 0, new byte[] { -1, -1, -1, -1, -1, -1, -1 }, 0, 0));\r\n    assertArrayEquals(new byte[] { (byte) 0xEF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF }, Conversion.shortToByteArray((short) 0xCDEF, 0, new byte[] { -1, -1, -1, -1, -1, -1, -1 }, 0, 1));\r\n    assertArrayEquals(new byte[] { (byte) 0xEF, (byte) 0xCD, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF }, Conversion.shortToByteArray((short) 0xCDEF, 0, new byte[] { -1, -1, -1, -1, -1, -1, -1 }, 0, 2));\r\n    assertArrayEquals(new byte[] { (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xEF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF }, Conversion.shortToByteArray((short) 0xCDEF, 0, new byte[] { -1, -1, -1, -1, -1, -1, -1 }, 3, 1));\r\n    assertArrayEquals(new byte[] { (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xEF, (byte) 0xCD, (byte) 0xFF, (byte) 0xFF }, Conversion.shortToByteArray((short) 0xCDEF, 0, new byte[] { -1, -1, -1, -1, -1, -1, -1 }, 3, 2));\r\n    assertArrayEquals(new byte[] { (byte) 0xF7, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF }, Conversion.shortToByteArray((short) 0xCDEF, 1, new byte[] { -1, -1, -1, -1, -1, -1, -1 }, 0, 1));\r\n    assertArrayEquals(new byte[] { (byte) 0x7B, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF }, Conversion.shortToByteArray((short) 0xCDEF, 2, new byte[] { -1, -1, -1, -1, -1, -1, -1 }, 0, 1));\r\n    assertArrayEquals(new byte[] { (byte) 0xFF, (byte) 0x00, (byte) 0xFF, (byte) 0x6F, (byte) 0xFE, (byte) 0xFF, (byte) 0xFF }, Conversion.shortToByteArray((short) 0xCDEF, 5, new byte[] { -1, 0, -1, -1, -1, -1, -1 }, 3, 2));\r\n    // assertArrayEquals(new\r\n    // byte[]{(byte) 0xFF, (byte) 0x00, (byte) 0xFF, (byte) 0x5E, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF}, Conversion.shortToByteArray((short) 0xCDEF, 13, new\r\n    // byte[]{-1, 0, -1, -1, -1, -1, -1}, 3, 2)); //rejected by assertion\r\n    assertArrayEquals(new byte[] { (byte) 0xFF, (byte) 0x00, (byte) 0xFF, (byte) 0xFE, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF }, Conversion.shortToByteArray((short) 0xCDEF, 13, new byte[] { -1, 0, -1, -1, -1, -1, -1 }, 3, 1));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ConversionTest.java",
  "methodName" : "testShortToHex",
  "sourceCode" : "/**\r\n * Tests {@link Conversion#shortToHex(short, int, String, int, int)}.\r\n */\r\n@Test\r\nvoid testShortToHex() {\r\n    assertEquals(\"\", Conversion.shortToHex((short) 0x0000, 0, \"\", 0, 0));\r\n    assertEquals(\"\", Conversion.shortToHex((short) 0x0000, 100, \"\", 0, 0));\r\n    assertEquals(\"\", Conversion.shortToHex((short) 0x0000, 0, \"\", 100, 0));\r\n    assertEquals(\"ffffffffffffffffffffffff\", Conversion.shortToHex((short) 0xCDEF, 0, \"ffffffffffffffffffffffff\", 0, 0));\r\n    assertEquals(\"3fffffffffffffffffffffff\", Conversion.shortToHex((short) 0xCDE3, 0, \"ffffffffffffffffffffffff\", 0, 1));\r\n    assertEquals(\"feffffffffffffffffffffff\", Conversion.shortToHex((short) 0xCDEF, 0, \"ffffffffffffffffffffffff\", 0, 2));\r\n    assertEquals(\"fedfffffffffffffffffffff\", Conversion.shortToHex((short) 0xCDEF, 0, \"ffffffffffffffffffffffff\", 0, 3));\r\n    assertEquals(\"fedcffffffffffffffffffff\", Conversion.shortToHex((short) 0xCDEF, 0, \"ffffffffffffffffffffffff\", 0, 4));\r\n    assertEquals(\"fff3ffffffffffffffffffff\", Conversion.shortToHex((short) 0xCDE3, 0, \"ffffffffffffffffffffffff\", 3, 1));\r\n    assertEquals(\"ffffefffffffffffffffffff\", Conversion.shortToHex((short) 0xCDEF, 0, \"ffffffffffffffffffffffff\", 3, 2));\r\n    assertEquals(\"7fffffffffffffffffffffff\", Conversion.shortToHex((short) 0xCDEF, 1, \"ffffffffffffffffffffffff\", 0, 1));\r\n    assertEquals(\"bfffffffffffffffffffffff\", Conversion.shortToHex((short) 0xCDEF, 2, \"ffffffffffffffffffffffff\", 0, 1));\r\n    assertEquals(\"fffdb9ffffffffffffffffff\", Conversion.shortToHex((short) 0xCDEF, 3, \"ffffffffffffffffffffffff\", 3, 4));\r\n    // assertEquals(\"ffffffffffffffffffffffff\", Conversion.shortToHex((short) 0xCDEF,\r\n    // 4, \"ffffffffffffffffffffffff\", 3, 4)); //rejected by assertion\r\n    assertEquals(\"fffedcffffffffffffffffff\", Conversion.shortToHex((short) 0xCDEF, 4, \"ffffffffffffffffffffffff\", 3, 3));\r\n    assertEquals(\"fedc\", Conversion.shortToHex((short) 0xCDEF, 0, \"\", 0, 4));\r\n    assertThrows(StringIndexOutOfBoundsException.class, () -> Conversion.shortToHex((short) 0xCDEF, 0, \"\", 1, 4));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ConversionTest.java",
  "methodName" : "testUuidToByteArray",
  "sourceCode" : "/**\r\n * Tests {@link Conversion#uuidToByteArray(UUID, byte[], int, int)}.\r\n */\r\n@Test\r\nvoid testUuidToByteArray() {\r\n    assertArrayEquals(new byte[] { (byte) 0xff, (byte) 0xff, (byte) 0xff, (byte) 0xff, (byte) 0xff, (byte) 0xff, (byte) 0xff, (byte) 0xff, (byte) 0xff, (byte) 0xff, (byte) 0xff, (byte) 0xff, (byte) 0xff, (byte) 0xff, (byte) 0xff, (byte) 0xff }, Conversion.uuidToByteArray(new UUID(0xFFFFFFFFFFFFFFFFL, 0xFFFFFFFFFFFFFFFFL), new byte[16], 0, 16));\r\n    assertArrayEquals(new byte[] { (byte) 0x88, (byte) 0x99, (byte) 0xaa, (byte) 0xbb, (byte) 0xcc, (byte) 0xdd, (byte) 0xee, (byte) 0xff, (byte) 0x00, (byte) 0x11, (byte) 0x22, (byte) 0x33, (byte) 0x44, (byte) 0x55, (byte) 0x66, (byte) 0x77 }, Conversion.uuidToByteArray(new UUID(0xFFEEDDCCBBAA9988L, 0x7766554433221100L), new byte[16], 0, 16));\r\n    assertArrayEquals(new byte[] { (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x88, (byte) 0x99, (byte) 0xaa, (byte) 0xbb, (byte) 0xcc, (byte) 0xdd, (byte) 0xee, (byte) 0xff, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00 }, Conversion.uuidToByteArray(new UUID(0xFFEEDDCCBBAA9988L, 0x7766554433221100L), new byte[16], 4, 8));\r\n    assertArrayEquals(new byte[] { (byte) 0x00, (byte) 0x00, (byte) 0x88, (byte) 0x99, (byte) 0xaa, (byte) 0xbb, (byte) 0xcc, (byte) 0xdd, (byte) 0xee, (byte) 0xff, (byte) 0x00, (byte) 0x11, (byte) 0x22, (byte) 0x33, (byte) 0x00, (byte) 0x00 }, Conversion.uuidToByteArray(new UUID(0xFFEEDDCCBBAA9988L, 0x7766554433221100L), new byte[16], 2, 12));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\DoubleRangeTest.java",
  "methodName" : "testContainsInt",
  "sourceCode" : "@Test\r\nvoid testContainsInt() {\r\n    assertFalse(range1.contains(null));\r\n    assertTrue(rangeFull.contains(Double.MIN_VALUE));\r\n    assertTrue(rangeFull.contains(Double.MAX_VALUE));\r\n    assertFalse(range1.contains(5d));\r\n    assertTrue(range1.contains(10d));\r\n    assertTrue(range1.contains(15d));\r\n    assertTrue(range1.contains(20d));\r\n    assertFalse(range1.contains(25d));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\DoubleRangeTest.java",
  "methodName" : "testContainsRange",
  "sourceCode" : "@Test\r\nvoid testContainsRange() {\r\n    // null handling\r\n    assertFalse(range1.containsRange(null));\r\n    // easy inside range\r\n    assertTrue(range1.containsRange(Range.of(12d, 18d)));\r\n    assertTrue(range1.containsRange(of(12, 18)));\r\n    // outside range on each side\r\n    assertFalse(range1.containsRange(Range.of(32d, 45d)));\r\n    assertFalse(range1.containsRange(of(32, 45)));\r\n    assertFalse(range1.containsRange(Range.of(2d, 8d)));\r\n    assertFalse(range1.containsRange(of(2, 8)));\r\n    // equals range\r\n    assertTrue(range1.containsRange(Range.of(10d, 20d)));\r\n    assertTrue(range1.containsRange(of(10, 20)));\r\n    // overlaps\r\n    assertFalse(range1.containsRange(Range.of(9d, 14d)));\r\n    assertFalse(range1.containsRange(of(9, 14)));\r\n    assertFalse(range1.containsRange(Range.of(16d, 21d)));\r\n    assertFalse(range1.containsRange(of(16, 21)));\r\n    // touches lower boundary\r\n    assertTrue(range1.containsRange(Range.of(10d, 19d)));\r\n    assertTrue(range1.containsRange(of(10, 19)));\r\n    assertFalse(range1.containsRange(Range.of(10d, 21d)));\r\n    assertFalse(range1.containsRange(of(10, 21)));\r\n    // touches upper boundary\r\n    assertTrue(range1.containsRange(Range.of(11d, 20d)));\r\n    assertTrue(range1.containsRange(of(11, 20)));\r\n    assertFalse(range1.containsRange(Range.of(9d, 20d)));\r\n    assertFalse(range1.containsRange(of(9, 20)));\r\n    // negative\r\n    assertFalse(range1.containsRange(Range.of(-11d, -18d)));\r\n    assertFalse(range1.containsRange(of(-11, -18)));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\DoubleRangeTest.java",
  "methodName" : "testElementCompareTo",
  "sourceCode" : "@Test\r\nvoid testElementCompareTo() {\r\n    assertNullPointerException(() -> range1.elementCompareTo(null));\r\n    assertEquals(-1, range1.elementCompareTo(5d));\r\n    assertEquals(0, range1.elementCompareTo(10d));\r\n    assertEquals(0, range1.elementCompareTo(15d));\r\n    assertEquals(0, range1.elementCompareTo(20d));\r\n    assertEquals(1, range1.elementCompareTo(25d));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\DoubleRangeTest.java",
  "methodName" : "testEqualsObject",
  "sourceCode" : "@Test\r\nvoid testEqualsObject() {\r\n    assertEquals(range1, range1);\r\n    assertEquals(range1, range2);\r\n    assertEquals(range2, range2);\r\n    assertEquals(range1, range1);\r\n    assertEquals(range2, range2);\r\n    assertEquals(range3, range3);\r\n    assertNotEquals(range2, range3);\r\n    assertNotEquals(null, range2);\r\n    assertNotEquals(\"Ni!\", range2);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\DoubleRangeTest.java",
  "methodName" : "testFit",
  "sourceCode" : "@Test\r\nvoid testFit() {\r\n    assertEquals(range1.getMinimum(), range1.fit(Double.MIN_VALUE));\r\n    assertEquals(range1.getMinimum(), range1.fit(range1.getMinimum()));\r\n    assertEquals(range1.getMaximum(), range1.fit(Double.MAX_VALUE));\r\n    assertEquals(range1.getMaximum(), range1.fit(range1.getMaximum()));\r\n    assertEquals(15, range1.fit(15));\r\n    assertEquals(15, range1.fit(15f));\r\n    assertEquals(15, range1.fit(15d));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\DoubleRangeTest.java",
  "methodName" : "testFitNull",
  "sourceCode" : "@Test\r\nvoid testFitNull() {\r\n    assertNullPointerException(() -> {\r\n        range1.fit(null);\r\n    });\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\DoubleRangeTest.java",
  "methodName" : "testGetMaximum",
  "sourceCode" : "@Test\r\nvoid testGetMaximum() {\r\n    assertEquals(20d, range1.getMaximum());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\DoubleRangeTest.java",
  "methodName" : "testGetMinimum",
  "sourceCode" : "@Test\r\nvoid testGetMinimum() {\r\n    assertEquals(10d, range1.getMinimum());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\DoubleRangeTest.java",
  "methodName" : "testHashCode",
  "sourceCode" : "@Test\r\nvoid testHashCode() {\r\n    assertEquals(range1.hashCode(), range2.hashCode());\r\n    assertNotEquals(range1.hashCode(), range3.hashCode());\r\n    assertEquals(range1.hashCode(), range1.hashCode());\r\n    assertTrue(range1.hashCode() != 0);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\DoubleRangeTest.java",
  "methodName" : "testIntersectionWith",
  "sourceCode" : "@Test\r\nvoid testIntersectionWith() {\r\n    assertSame(range1, range1.intersectionWith(range1));\r\n    assertEquals(Range.of(10d, 15d), range1.intersectionWith(Range.of(5d, 15d)));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\DoubleRangeTest.java",
  "methodName" : "testIntersectionWithNonOverlapping",
  "sourceCode" : "@Test\r\nvoid testIntersectionWithNonOverlapping() {\r\n    assertIllegalArgumentException(() -> range1.intersectionWith(Range.of(0d, 9d)));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\DoubleRangeTest.java",
  "methodName" : "testIntersectionWithNull",
  "sourceCode" : "@Test\r\nvoid testIntersectionWithNull() {\r\n    assertIllegalArgumentException(() -> range1.intersectionWith(null));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\DoubleRangeTest.java",
  "methodName" : "testIsAfter",
  "sourceCode" : "@Test\r\nvoid testIsAfter() {\r\n    assertFalse(range1.isAfter(null));\r\n    assertTrue(range1.isAfter(5d));\r\n    assertFalse(range1.isAfter(10d));\r\n    assertFalse(range1.isAfter(15d));\r\n    assertFalse(range1.isAfter(20d));\r\n    assertFalse(range1.isAfter(25d));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\DoubleRangeTest.java",
  "methodName" : "testIsAfterRange",
  "sourceCode" : "@Test\r\nvoid testIsAfterRange() {\r\n    assertFalse(range1.isAfterRange(null));\r\n    assertTrue(range1.isAfterRange(Range.of(5d, 9d)));\r\n    assertFalse(range1.isAfterRange(Range.of(5d, 10d)));\r\n    assertFalse(range1.isAfterRange(Range.of(5d, 20d)));\r\n    assertFalse(range1.isAfterRange(Range.of(5d, 25d)));\r\n    assertFalse(range1.isAfterRange(Range.of(15d, 25d)));\r\n    assertFalse(range1.isAfterRange(Range.of(21d, 25d)));\r\n    assertFalse(range1.isAfterRange(Range.of(10d, 20d)));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\DoubleRangeTest.java",
  "methodName" : "testIsBefore",
  "sourceCode" : "@Test\r\nvoid testIsBefore() {\r\n    assertFalse(range1.isBefore(null));\r\n    assertFalse(range1.isBefore(5d));\r\n    assertFalse(range1.isBefore(10d));\r\n    assertFalse(range1.isBefore(15d));\r\n    assertFalse(range1.isBefore(20d));\r\n    assertTrue(range1.isBefore(25d));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\DoubleRangeTest.java",
  "methodName" : "testIsBeforeIntegerRange",
  "sourceCode" : "@Test\r\nvoid testIsBeforeIntegerRange() {\r\n    assertFalse(range1.isBeforeRange(null));\r\n    assertFalse(range1.isBeforeRange(of(5, 9)));\r\n    assertFalse(range1.isBeforeRange(of(5, 10)));\r\n    assertFalse(range1.isBeforeRange(of(5, 20)));\r\n    assertFalse(range1.isBeforeRange(of(5, 25)));\r\n    assertFalse(range1.isBeforeRange(of(15, 25)));\r\n    assertTrue(range1.isBeforeRange(of(21, 25)));\r\n    assertFalse(range1.isBeforeRange(of(10, 20)));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\DoubleRangeTest.java",
  "methodName" : "testIsBeforeRange",
  "sourceCode" : "@Test\r\nvoid testIsBeforeRange() {\r\n    assertFalse(range1.isBeforeRange(null));\r\n    assertFalse(range1.isBeforeRange(Range.of(5d, 9d)));\r\n    assertFalse(range1.isBeforeRange(Range.of(5d, 10d)));\r\n    assertFalse(range1.isBeforeRange(Range.of(5d, 20d)));\r\n    assertFalse(range1.isBeforeRange(Range.of(5d, 25d)));\r\n    assertFalse(range1.isBeforeRange(Range.of(15d, 25d)));\r\n    assertTrue(range1.isBeforeRange(Range.of(21d, 25d)));\r\n    assertFalse(range1.isBeforeRange(Range.of(10d, 20d)));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\DoubleRangeTest.java",
  "methodName" : "testIsEndedBy",
  "sourceCode" : "@Test\r\nvoid testIsEndedBy() {\r\n    assertFalse(range1.isEndedBy(null));\r\n    assertFalse(range1.isEndedBy(5d));\r\n    assertFalse(range1.isEndedBy(10d));\r\n    assertFalse(range1.isEndedBy(15d));\r\n    assertTrue(range1.isEndedBy(20d));\r\n    assertFalse(range1.isEndedBy(25d));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\DoubleRangeTest.java",
  "methodName" : "testIsOverlappedByIntegerRange",
  "sourceCode" : "@Test\r\nvoid testIsOverlappedByIntegerRange() {\r\n    // null handling\r\n    assertFalse(range1.isOverlappedBy(null));\r\n    // easy inside range\r\n    assertTrue(range1.isOverlappedBy(of(12, 18)));\r\n    // outside range on each side\r\n    assertFalse(range1.isOverlappedBy(of(32, 45)));\r\n    assertFalse(range1.isOverlappedBy(of(2, 8)));\r\n    // equals range\r\n    assertTrue(range1.isOverlappedBy(of(10, 20)));\r\n    // overlaps\r\n    assertTrue(range1.isOverlappedBy(of(9, 14)));\r\n    assertTrue(range1.isOverlappedBy(of(16, 21)));\r\n    // touches lower boundary\r\n    assertTrue(range1.isOverlappedBy(of(10, 19)));\r\n    assertTrue(range1.isOverlappedBy(of(10, 21)));\r\n    // touches upper boundary\r\n    assertTrue(range1.isOverlappedBy(of(11, 20)));\r\n    assertTrue(range1.isOverlappedBy(of(9, 20)));\r\n    // negative\r\n    assertFalse(range1.isOverlappedBy(of(-11, -18)));\r\n    // outside range whole range\r\n    assertTrue(range1.isOverlappedBy(of(9, 21)));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\DoubleRangeTest.java",
  "methodName" : "testIsOverlappedByRange",
  "sourceCode" : "@Test\r\nvoid testIsOverlappedByRange() {\r\n    // null handling\r\n    assertFalse(range1.isOverlappedBy(null));\r\n    // easy inside range\r\n    assertTrue(range1.isOverlappedBy(Range.of(12d, 18d)));\r\n    // outside range on each side\r\n    assertFalse(range1.isOverlappedBy(Range.of(32d, 45d)));\r\n    assertFalse(range1.isOverlappedBy(Range.of(2d, 8d)));\r\n    // equals range\r\n    assertTrue(range1.isOverlappedBy(Range.of(10d, 20d)));\r\n    // overlaps\r\n    assertTrue(range1.isOverlappedBy(Range.of(9d, 14d)));\r\n    assertTrue(range1.isOverlappedBy(Range.of(16d, 21d)));\r\n    // touches lower boundary\r\n    assertTrue(range1.isOverlappedBy(Range.of(10d, 19d)));\r\n    assertTrue(range1.isOverlappedBy(Range.of(10d, 21d)));\r\n    // touches upper boundary\r\n    assertTrue(range1.isOverlappedBy(Range.of(11d, 20d)));\r\n    assertTrue(range1.isOverlappedBy(Range.of(9d, 20d)));\r\n    // negative\r\n    assertFalse(range1.isOverlappedBy(Range.of(-11d, -18d)));\r\n    // outside range whole range\r\n    assertTrue(range1.isOverlappedBy(Range.of(9d, 21d)));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\DoubleRangeTest.java",
  "methodName" : "testIsStartedBy",
  "sourceCode" : "@Test\r\nvoid testIsStartedBy() {\r\n    assertFalse(range1.isStartedBy(null));\r\n    assertFalse(range1.isStartedBy(5d));\r\n    assertTrue(range1.isStartedBy(10d));\r\n    assertFalse(range1.isStartedBy(15d));\r\n    assertFalse(range1.isStartedBy(20d));\r\n    assertFalse(range1.isStartedBy(25d));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\DoubleRangeTest.java",
  "methodName" : "testIsWithCompareRange",
  "sourceCode" : "@Test\r\nvoid testIsWithCompareRange() {\r\n    // all integers are equal\r\n    final Comparator<Integer> c = (o1, o2) -> 0;\r\n    Range<Integer> ri = Range.is(10);\r\n    assertFalse(ri.contains(null), \"should not contain null\");\r\n    assertTrue(ri.contains(10), \"should contain 10\");\r\n    assertFalse(ri.contains(11), \"should not contain 11\");\r\n    ri = Range.is(10, c);\r\n    assertFalse(ri.contains(null), \"should not contain null\");\r\n    assertTrue(ri.contains(10), \"should contain 10\");\r\n    assertTrue(ri.contains(11), \"should contain 11\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\DoubleRangeTest.java",
  "methodName" : "testOfWithContains",
  "sourceCode" : "@Test\r\nvoid testOfWithContains() {\r\n    // all integers are equal\r\n    final DoubleRange rb = of(-10, 20);\r\n    assertFalse(rb.contains(null), \"should not contain null\");\r\n    assertTrue(rb.contains(10d), \"should contain 10\");\r\n    assertTrue(rb.contains(-10d), \"should contain -10\");\r\n    assertFalse(rb.contains(21d), \"should not contain 21\");\r\n    assertFalse(rb.contains(-11d), \"should not contain -11\");\r\n    assertNullPointerException(() -> of(null, null));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\DoubleRangeTest.java",
  "methodName" : "testRangeOfChars",
  "sourceCode" : "@Test\r\nvoid testRangeOfChars() {\r\n    final DoubleRange chars = of('a', 'z');\r\n    assertTrue(chars.contains((double) 'b'));\r\n    assertFalse(chars.contains((double) 'B'));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\DoubleRangeTest.java",
  "methodName" : "testSerializing",
  "sourceCode" : "@Test\r\nvoid testSerializing() {\r\n    SerializationUtils.clone(range1);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\DoubleRangeTest.java",
  "methodName" : "testToString",
  "sourceCode" : "@Test\r\nvoid testToString() {\r\n    assertNotNull(range1.toString());\r\n    final String str = range1.toString();\r\n    assertEquals(\"[10.0..20.0]\", str);\r\n    assertEquals(\"[-20.0..-10.0]\", Range.of(-20d, -10d).toString());\r\n    assertEquals(\"[-20.0..-10.0]\", DoubleRange.of(-20d, -10d).toString());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\DoubleRangeTest.java",
  "methodName" : "testToStringFormat",
  "sourceCode" : "@Test\r\nvoid testToStringFormat() {\r\n    final String str = range1.toString(\"From %1$s to %2$s\");\r\n    assertEquals(\"From 10.0 to 20.0\", str);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\EnumUtilsTest.java",
  "methodName" : "testConstructable",
  "sourceCode" : "@Test\r\nvoid testConstructable() {\r\n    // enforce public constructor\r\n    new EnumUtils();\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\EnumUtilsTest.java",
  "methodName" : "testGenerateBitVector",
  "sourceCode" : "@Test\r\nvoid testGenerateBitVector() {\r\n    assertEquals(0L, EnumUtils.generateBitVector(Traffic.class, EnumSet.noneOf(Traffic.class)));\r\n    assertEquals(1L, EnumUtils.generateBitVector(Traffic.class, EnumSet.of(Traffic.RED)));\r\n    assertEquals(2L, EnumUtils.generateBitVector(Traffic.class, EnumSet.of(Traffic.AMBER)));\r\n    assertEquals(4L, EnumUtils.generateBitVector(Traffic.class, EnumSet.of(Traffic.GREEN)));\r\n    assertEquals(3L, EnumUtils.generateBitVector(Traffic.class, EnumSet.of(Traffic.RED, Traffic.AMBER)));\r\n    assertEquals(5L, EnumUtils.generateBitVector(Traffic.class, EnumSet.of(Traffic.RED, Traffic.GREEN)));\r\n    assertEquals(6L, EnumUtils.generateBitVector(Traffic.class, EnumSet.of(Traffic.AMBER, Traffic.GREEN)));\r\n    assertEquals(7L, EnumUtils.generateBitVector(Traffic.class, EnumSet.of(Traffic.RED, Traffic.AMBER, Traffic.GREEN)));\r\n    // 64 values Enum (to test whether no int<->long jdk conversion issue exists)\r\n    assertEquals(1L << 31, EnumUtils.generateBitVector(Enum64.class, EnumSet.of(Enum64.A31)));\r\n    assertEquals(1L << 32, EnumUtils.generateBitVector(Enum64.class, EnumSet.of(Enum64.A32)));\r\n    assertEquals(1L << 63, EnumUtils.generateBitVector(Enum64.class, EnumSet.of(Enum64.A63)));\r\n    assertEquals(Long.MIN_VALUE, EnumUtils.generateBitVector(Enum64.class, EnumSet.of(Enum64.A63)));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\EnumUtilsTest.java",
  "methodName" : "testGenerateBitVector_longClass",
  "sourceCode" : "@Test\r\nvoid testGenerateBitVector_longClass() {\r\n    assertIllegalArgumentException(() -> EnumUtils.generateBitVector(TooMany.class, EnumSet.of(TooMany.A1)));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\EnumUtilsTest.java",
  "methodName" : "testGenerateBitVector_longClassWithArray",
  "sourceCode" : "@Test\r\nvoid testGenerateBitVector_longClassWithArray() {\r\n    assertIllegalArgumentException(() -> EnumUtils.generateBitVector(TooMany.class, TooMany.A1));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\EnumUtilsTest.java",
  "methodName" : "testGenerateBitVector_nonEnumClass",
  "sourceCode" : "@SuppressWarnings(\"unchecked\")\r\n@Test\r\nvoid testGenerateBitVector_nonEnumClass() {\r\n    @SuppressWarnings(\"rawtypes\")\r\n    final Class rawType = Object.class;\r\n    @SuppressWarnings(\"rawtypes\")\r\n    final List rawList = new ArrayList();\r\n    assertIllegalArgumentException(() -> EnumUtils.generateBitVector(rawType, rawList));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\EnumUtilsTest.java",
  "methodName" : "testGenerateBitVector_nonEnumClassWithArray",
  "sourceCode" : "@SuppressWarnings(\"unchecked\")\r\n@Test\r\nvoid testGenerateBitVector_nonEnumClassWithArray() {\r\n    @SuppressWarnings(\"rawtypes\")\r\n    final Class rawType = Object.class;\r\n    assertIllegalArgumentException(() -> EnumUtils.generateBitVector(rawType));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\EnumUtilsTest.java",
  "methodName" : "testGenerateBitVector_nullArray",
  "sourceCode" : "@Test\r\nvoid testGenerateBitVector_nullArray() {\r\n    assertNullPointerException(() -> EnumUtils.generateBitVector(Traffic.class, (Traffic[]) null));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\EnumUtilsTest.java",
  "methodName" : "testGenerateBitVector_nullArrayElement",
  "sourceCode" : "@Test\r\nvoid testGenerateBitVector_nullArrayElement() {\r\n    assertIllegalArgumentException(() -> EnumUtils.generateBitVector(Traffic.class, Traffic.RED, null));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\EnumUtilsTest.java",
  "methodName" : "testGenerateBitVector_nullClass",
  "sourceCode" : "@Test\r\nvoid testGenerateBitVector_nullClass() {\r\n    assertNullPointerException(() -> EnumUtils.generateBitVector(null, EnumSet.of(Traffic.RED)));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\EnumUtilsTest.java",
  "methodName" : "testGenerateBitVector_nullClassWithArray",
  "sourceCode" : "@Test\r\nvoid testGenerateBitVector_nullClassWithArray() {\r\n    assertNullPointerException(() -> EnumUtils.generateBitVector(null, Traffic.RED));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\EnumUtilsTest.java",
  "methodName" : "testGenerateBitVector_nullElement",
  "sourceCode" : "@Test\r\nvoid testGenerateBitVector_nullElement() {\r\n    assertNullPointerException(() -> EnumUtils.generateBitVector(Traffic.class, Arrays.asList(Traffic.RED, null)));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\EnumUtilsTest.java",
  "methodName" : "testGenerateBitVector_nullIterable",
  "sourceCode" : "@Test\r\nvoid testGenerateBitVector_nullIterable() {\r\n    assertNullPointerException(() -> EnumUtils.generateBitVector(Traffic.class, (Iterable<Traffic>) null));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\EnumUtilsTest.java",
  "methodName" : "testGenerateBitVectorFromArray",
  "sourceCode" : "@Test\r\nvoid testGenerateBitVectorFromArray() {\r\n    assertEquals(0L, EnumUtils.generateBitVector(Traffic.class));\r\n    assertEquals(1L, EnumUtils.generateBitVector(Traffic.class, Traffic.RED));\r\n    assertEquals(2L, EnumUtils.generateBitVector(Traffic.class, Traffic.AMBER));\r\n    assertEquals(4L, EnumUtils.generateBitVector(Traffic.class, Traffic.GREEN));\r\n    assertEquals(3L, EnumUtils.generateBitVector(Traffic.class, Traffic.RED, Traffic.AMBER));\r\n    assertEquals(5L, EnumUtils.generateBitVector(Traffic.class, Traffic.RED, Traffic.GREEN));\r\n    assertEquals(6L, EnumUtils.generateBitVector(Traffic.class, Traffic.AMBER, Traffic.GREEN));\r\n    assertEquals(7L, EnumUtils.generateBitVector(Traffic.class, Traffic.RED, Traffic.AMBER, Traffic.GREEN));\r\n    // gracefully handles duplicates:\r\n    assertEquals(7L, EnumUtils.generateBitVector(Traffic.class, Traffic.RED, Traffic.AMBER, Traffic.GREEN, Traffic.GREEN));\r\n    // 64 values Enum (to test whether no int<->long jdk conversion issue exists)\r\n    assertEquals(1L << 31, EnumUtils.generateBitVector(Enum64.class, Enum64.A31));\r\n    assertEquals(1L << 32, EnumUtils.generateBitVector(Enum64.class, Enum64.A32));\r\n    assertEquals(1L << 63, EnumUtils.generateBitVector(Enum64.class, Enum64.A63));\r\n    assertEquals(Long.MIN_VALUE, EnumUtils.generateBitVector(Enum64.class, Enum64.A63));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\EnumUtilsTest.java",
  "methodName" : "testGenerateBitVectors",
  "sourceCode" : "@Test\r\nvoid testGenerateBitVectors() {\r\n    assertArrayEquals(EnumUtils.generateBitVectors(Traffic.class, EnumSet.noneOf(Traffic.class)), 0L);\r\n    assertArrayEquals(EnumUtils.generateBitVectors(Traffic.class, EnumSet.of(Traffic.RED)), 1L);\r\n    assertArrayEquals(EnumUtils.generateBitVectors(Traffic.class, EnumSet.of(Traffic.AMBER)), 2L);\r\n    assertArrayEquals(EnumUtils.generateBitVectors(Traffic.class, EnumSet.of(Traffic.GREEN)), 4L);\r\n    assertArrayEquals(EnumUtils.generateBitVectors(Traffic.class, EnumSet.of(Traffic.RED, Traffic.AMBER)), 3L);\r\n    assertArrayEquals(EnumUtils.generateBitVectors(Traffic.class, EnumSet.of(Traffic.RED, Traffic.GREEN)), 5L);\r\n    assertArrayEquals(EnumUtils.generateBitVectors(Traffic.class, EnumSet.of(Traffic.AMBER, Traffic.GREEN)), 6L);\r\n    assertArrayEquals(EnumUtils.generateBitVectors(Traffic.class, EnumSet.of(Traffic.RED, Traffic.AMBER, Traffic.GREEN)), 7L);\r\n    // 64 values Enum (to test whether no int<->long jdk conversion issue exists)\r\n    assertArrayEquals(EnumUtils.generateBitVectors(Enum64.class, EnumSet.of(Enum64.A31)), 1L << 31);\r\n    assertArrayEquals(EnumUtils.generateBitVectors(Enum64.class, EnumSet.of(Enum64.A32)), 1L << 32);\r\n    assertArrayEquals(EnumUtils.generateBitVectors(Enum64.class, EnumSet.of(Enum64.A63)), 1L << 63);\r\n    assertArrayEquals(EnumUtils.generateBitVectors(Enum64.class, EnumSet.of(Enum64.A63)), Long.MIN_VALUE);\r\n    // More than 64 values Enum\r\n    assertArrayEquals(EnumUtils.generateBitVectors(TooMany.class, EnumSet.of(TooMany.M2)), 1L, 0L);\r\n    assertArrayEquals(EnumUtils.generateBitVectors(TooMany.class, EnumSet.of(TooMany.L2, TooMany.M2)), 1L, 1L << 63);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\EnumUtilsTest.java",
  "methodName" : "testGenerateBitVectors_nonEnumClass",
  "sourceCode" : "@SuppressWarnings(\"unchecked\")\r\n@Test\r\nvoid testGenerateBitVectors_nonEnumClass() {\r\n    @SuppressWarnings(\"rawtypes\")\r\n    final Class rawType = Object.class;\r\n    @SuppressWarnings(\"rawtypes\")\r\n    final List rawList = new ArrayList();\r\n    assertIllegalArgumentException(() -> EnumUtils.generateBitVectors(rawType, rawList));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\EnumUtilsTest.java",
  "methodName" : "testGenerateBitVectors_nonEnumClassWithArray",
  "sourceCode" : "@SuppressWarnings(\"unchecked\")\r\n@Test\r\nvoid testGenerateBitVectors_nonEnumClassWithArray() {\r\n    @SuppressWarnings(\"rawtypes\")\r\n    final Class rawType = Object.class;\r\n    assertIllegalArgumentException(() -> EnumUtils.generateBitVectors(rawType));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\EnumUtilsTest.java",
  "methodName" : "testGenerateBitVectors_nullArray",
  "sourceCode" : "@Test\r\nvoid testGenerateBitVectors_nullArray() {\r\n    assertNullPointerException(() -> EnumUtils.generateBitVectors(Traffic.class, (Traffic[]) null));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\EnumUtilsTest.java",
  "methodName" : "testGenerateBitVectors_nullArrayElement",
  "sourceCode" : "@Test\r\nvoid testGenerateBitVectors_nullArrayElement() {\r\n    assertIllegalArgumentException(() -> EnumUtils.generateBitVectors(Traffic.class, Traffic.RED, null));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\EnumUtilsTest.java",
  "methodName" : "testGenerateBitVectors_nullClass",
  "sourceCode" : "@Test\r\nvoid testGenerateBitVectors_nullClass() {\r\n    assertNullPointerException(() -> EnumUtils.generateBitVectors(null, EnumSet.of(Traffic.RED)));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\EnumUtilsTest.java",
  "methodName" : "testGenerateBitVectors_nullClassWithArray",
  "sourceCode" : "@Test\r\nvoid testGenerateBitVectors_nullClassWithArray() {\r\n    assertNullPointerException(() -> EnumUtils.generateBitVectors(null, Traffic.RED));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\EnumUtilsTest.java",
  "methodName" : "testGenerateBitVectors_nullElement",
  "sourceCode" : "@Test\r\nvoid testGenerateBitVectors_nullElement() {\r\n    assertNullPointerException(() -> EnumUtils.generateBitVectors(Traffic.class, Arrays.asList(Traffic.RED, null)));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\EnumUtilsTest.java",
  "methodName" : "testGenerateBitVectors_nullIterable",
  "sourceCode" : "@Test\r\nvoid testGenerateBitVectors_nullIterable() {\r\n    assertNullPointerException(() -> EnumUtils.generateBitVectors(null, (Iterable<Traffic>) null));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\EnumUtilsTest.java",
  "methodName" : "testGenerateBitVectorsFromArray",
  "sourceCode" : "@Test\r\nvoid testGenerateBitVectorsFromArray() {\r\n    assertArrayEquals(EnumUtils.generateBitVectors(Traffic.class), 0L);\r\n    assertArrayEquals(EnumUtils.generateBitVectors(Traffic.class, Traffic.RED), 1L);\r\n    assertArrayEquals(EnumUtils.generateBitVectors(Traffic.class, Traffic.AMBER), 2L);\r\n    assertArrayEquals(EnumUtils.generateBitVectors(Traffic.class, Traffic.GREEN), 4L);\r\n    assertArrayEquals(EnumUtils.generateBitVectors(Traffic.class, Traffic.RED, Traffic.AMBER), 3L);\r\n    assertArrayEquals(EnumUtils.generateBitVectors(Traffic.class, Traffic.RED, Traffic.GREEN), 5L);\r\n    assertArrayEquals(EnumUtils.generateBitVectors(Traffic.class, Traffic.AMBER, Traffic.GREEN), 6L);\r\n    assertArrayEquals(EnumUtils.generateBitVectors(Traffic.class, Traffic.RED, Traffic.AMBER, Traffic.GREEN), 7L);\r\n    // gracefully handles duplicates:\r\n    assertArrayEquals(EnumUtils.generateBitVectors(Traffic.class, Traffic.RED, Traffic.AMBER, Traffic.GREEN, Traffic.GREEN), 7L);\r\n    // 64 values Enum (to test whether no int<->long jdk conversion issue exists)\r\n    assertArrayEquals(EnumUtils.generateBitVectors(Enum64.class, Enum64.A31), 1L << 31);\r\n    assertArrayEquals(EnumUtils.generateBitVectors(Enum64.class, Enum64.A32), 1L << 32);\r\n    assertArrayEquals(EnumUtils.generateBitVectors(Enum64.class, Enum64.A63), 1L << 63);\r\n    assertArrayEquals(EnumUtils.generateBitVectors(Enum64.class, Enum64.A63), Long.MIN_VALUE);\r\n    // More than 64 values Enum\r\n    assertArrayEquals(EnumUtils.generateBitVectors(TooMany.class, TooMany.M2), 1L, 0L);\r\n    assertArrayEquals(EnumUtils.generateBitVectors(TooMany.class, TooMany.L2, TooMany.M2), 1L, 1L << 63);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\EnumUtilsTest.java",
  "methodName" : "testGetEnum",
  "sourceCode" : "@Test\r\nvoid testGetEnum() {\r\n    assertEquals(Traffic.RED, EnumUtils.getEnum(Traffic.class, \"RED\"));\r\n    assertEquals(Traffic.AMBER, EnumUtils.getEnum(Traffic.class, \"AMBER\"));\r\n    assertEquals(Traffic.GREEN, EnumUtils.getEnum(Traffic.class, \"GREEN\"));\r\n    assertNull(EnumUtils.getEnum(Traffic.class, \"PURPLE\"));\r\n    assertNull(EnumUtils.getEnum(Traffic.class, null));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\EnumUtilsTest.java",
  "methodName" : "testGetEnum_defaultEnum",
  "sourceCode" : "@Test\r\nvoid testGetEnum_defaultEnum() {\r\n    assertEquals(Traffic.RED, EnumUtils.getEnum(Traffic.class, \"RED\", Traffic.AMBER));\r\n    assertEquals(Traffic.AMBER, EnumUtils.getEnum(Traffic.class, \"AMBER\", Traffic.GREEN));\r\n    assertEquals(Traffic.GREEN, EnumUtils.getEnum(Traffic.class, \"GREEN\", Traffic.RED));\r\n    assertEquals(Traffic.AMBER, EnumUtils.getEnum(Traffic.class, \"PURPLE\", Traffic.AMBER));\r\n    assertEquals(Traffic.GREEN, EnumUtils.getEnum(Traffic.class, \"PURPLE\", Traffic.GREEN));\r\n    assertEquals(Traffic.RED, EnumUtils.getEnum(Traffic.class, \"PURPLE\", Traffic.RED));\r\n    assertEquals(Traffic.AMBER, EnumUtils.getEnum(Traffic.class, null, Traffic.AMBER));\r\n    assertEquals(Traffic.GREEN, EnumUtils.getEnum(Traffic.class, null, Traffic.GREEN));\r\n    assertEquals(Traffic.RED, EnumUtils.getEnum(Traffic.class, null, Traffic.RED));\r\n    assertNull(EnumUtils.getEnum(Traffic.class, \"PURPLE\", null));\r\n    assertEquals(Traffic.AMBER, EnumUtils.getEnum(null, \"RED\", Traffic.AMBER));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\EnumUtilsTest.java",
  "methodName" : "testGetEnum_nonEnumClass",
  "sourceCode" : "/**\r\n * Tests raw type.\r\n */\r\n@SuppressWarnings(\"unchecked\")\r\n@Test\r\nvoid testGetEnum_nonEnumClass() {\r\n    @SuppressWarnings(\"rawtypes\")\r\n    final Class rawType = Object.class;\r\n    assertNull(EnumUtils.getEnum(rawType, \"rawType\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\EnumUtilsTest.java",
  "methodName" : "testGetEnum_nullClass",
  "sourceCode" : "@Test\r\nvoid testGetEnum_nullClass() {\r\n    assertNull(EnumUtils.getEnum((Class<Traffic>) null, \"PURPLE\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\EnumUtilsTest.java",
  "methodName" : "testGetEnumIgnoreCase",
  "sourceCode" : "@Test\r\nvoid testGetEnumIgnoreCase() {\r\n    assertEquals(Traffic.RED, EnumUtils.getEnumIgnoreCase(Traffic.class, \"red\"));\r\n    assertEquals(Traffic.AMBER, EnumUtils.getEnumIgnoreCase(Traffic.class, \"Amber\"));\r\n    assertEquals(Traffic.GREEN, EnumUtils.getEnumIgnoreCase(Traffic.class, \"grEEn\"));\r\n    assertNull(EnumUtils.getEnumIgnoreCase(Traffic.class, \"purple\"));\r\n    assertNull(EnumUtils.getEnumIgnoreCase(Traffic.class, null));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\EnumUtilsTest.java",
  "methodName" : "testGetEnumIgnoreCase_defaultEnum",
  "sourceCode" : "@Test\r\nvoid testGetEnumIgnoreCase_defaultEnum() {\r\n    assertEquals(Traffic.RED, EnumUtils.getEnumIgnoreCase(Traffic.class, \"red\", Traffic.AMBER));\r\n    assertEquals(Traffic.AMBER, EnumUtils.getEnumIgnoreCase(Traffic.class, \"Amber\", Traffic.GREEN));\r\n    assertEquals(Traffic.GREEN, EnumUtils.getEnumIgnoreCase(Traffic.class, \"grEEn\", Traffic.RED));\r\n    assertEquals(Traffic.AMBER, EnumUtils.getEnumIgnoreCase(Traffic.class, \"PURPLE\", Traffic.AMBER));\r\n    assertEquals(Traffic.GREEN, EnumUtils.getEnumIgnoreCase(Traffic.class, \"purple\", Traffic.GREEN));\r\n    assertEquals(Traffic.RED, EnumUtils.getEnumIgnoreCase(Traffic.class, \"pUrPlE\", Traffic.RED));\r\n    assertEquals(Traffic.AMBER, EnumUtils.getEnumIgnoreCase(Traffic.class, null, Traffic.AMBER));\r\n    assertEquals(Traffic.GREEN, EnumUtils.getEnumIgnoreCase(Traffic.class, null, Traffic.GREEN));\r\n    assertEquals(Traffic.RED, EnumUtils.getEnumIgnoreCase(Traffic.class, null, Traffic.RED));\r\n    assertNull(EnumUtils.getEnumIgnoreCase(Traffic.class, \"PURPLE\", null));\r\n    assertNull(EnumUtils.getEnumIgnoreCase(null, \"PURPLE\", null));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\EnumUtilsTest.java",
  "methodName" : "testGetEnumIgnoreCase_nonEnumClass",
  "sourceCode" : "/**\r\n * Tests raw type.\r\n */\r\n@SuppressWarnings(\"unchecked\")\r\n@Test\r\nvoid testGetEnumIgnoreCase_nonEnumClass() {\r\n    @SuppressWarnings(\"rawtypes\")\r\n    final Class rawType = Object.class;\r\n    assertNull(EnumUtils.getEnumIgnoreCase(rawType, \"rawType\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\EnumUtilsTest.java",
  "methodName" : "testGetEnumIgnoreCase_nullClass",
  "sourceCode" : "@Test\r\nvoid testGetEnumIgnoreCase_nullClass() {\r\n    assertNull(EnumUtils.getEnumIgnoreCase((Class<Traffic>) null, \"PURPLE\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\EnumUtilsTest.java",
  "methodName" : "testGetEnumList",
  "sourceCode" : "@Test\r\nvoid testGetEnumList() {\r\n    final List<Traffic> test = EnumUtils.getEnumList(Traffic.class);\r\n    assertEquals(3, test.size());\r\n    assertEquals(Traffic.RED, test.get(0));\r\n    assertEquals(Traffic.AMBER, test.get(1));\r\n    assertEquals(Traffic.GREEN, test.get(2));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\EnumUtilsTest.java",
  "methodName" : "testGetEnumMap",
  "sourceCode" : "@Test\r\nvoid testGetEnumMap() {\r\n    final Map<String, Traffic> test = EnumUtils.getEnumMap(Traffic.class);\r\n    final Map<String, Traffic> expected = new HashMap<>();\r\n    expected.put(\"RED\", Traffic.RED);\r\n    expected.put(\"AMBER\", Traffic.AMBER);\r\n    expected.put(\"GREEN\", Traffic.GREEN);\r\n    assertEquals(expected, test, \"getEnumMap not created correctly\");\r\n    assertEquals(3, test.size());\r\n    assertTrue(test.containsKey(\"RED\"));\r\n    assertEquals(Traffic.RED, test.get(\"RED\"));\r\n    assertTrue(test.containsKey(\"AMBER\"));\r\n    assertEquals(Traffic.AMBER, test.get(\"AMBER\"));\r\n    assertTrue(test.containsKey(\"GREEN\"));\r\n    assertEquals(Traffic.GREEN, test.get(\"GREEN\"));\r\n    assertFalse(test.containsKey(\"PURPLE\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\EnumUtilsTest.java",
  "methodName" : "testGetEnumMap_keyFunction",
  "sourceCode" : "@Test\r\nvoid testGetEnumMap_keyFunction() {\r\n    final Map<Integer, Month> test = EnumUtils.getEnumMap(Month.class, Month::getId);\r\n    final Map<Integer, Month> expected = new HashMap<>();\r\n    expected.put(1, Month.JAN);\r\n    expected.put(2, Month.FEB);\r\n    expected.put(3, Month.MAR);\r\n    expected.put(4, Month.APR);\r\n    expected.put(5, Month.MAY);\r\n    expected.put(6, Month.JUN);\r\n    expected.put(7, Month.JUL);\r\n    expected.put(8, Month.AUG);\r\n    expected.put(9, Month.SEP);\r\n    expected.put(10, Month.OCT);\r\n    expected.put(11, Month.NOV);\r\n    expected.put(12, Month.DEC);\r\n    assertEquals(expected, test, \"getEnumMap not created correctly\");\r\n    assertEquals(12, test.size());\r\n    assertFalse(test.containsKey(0));\r\n    assertTrue(test.containsKey(1));\r\n    assertEquals(Month.JAN, test.get(1));\r\n    assertTrue(test.containsKey(2));\r\n    assertEquals(Month.FEB, test.get(2));\r\n    assertTrue(test.containsKey(3));\r\n    assertEquals(Month.MAR, test.get(3));\r\n    assertTrue(test.containsKey(4));\r\n    assertEquals(Month.APR, test.get(4));\r\n    assertTrue(test.containsKey(5));\r\n    assertEquals(Month.MAY, test.get(5));\r\n    assertTrue(test.containsKey(6));\r\n    assertEquals(Month.JUN, test.get(6));\r\n    assertTrue(test.containsKey(7));\r\n    assertEquals(Month.JUL, test.get(7));\r\n    assertTrue(test.containsKey(8));\r\n    assertEquals(Month.AUG, test.get(8));\r\n    assertTrue(test.containsKey(9));\r\n    assertEquals(Month.SEP, test.get(9));\r\n    assertTrue(test.containsKey(10));\r\n    assertEquals(Month.OCT, test.get(10));\r\n    assertTrue(test.containsKey(11));\r\n    assertEquals(Month.NOV, test.get(11));\r\n    assertTrue(test.containsKey(12));\r\n    assertEquals(Month.DEC, test.get(12));\r\n    assertFalse(test.containsKey(13));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\EnumUtilsTest.java",
  "methodName" : "testGetEnumSystemProperty",
  "sourceCode" : "@Test\r\nvoid testGetEnumSystemProperty() {\r\n    final String key = getClass().getName();\r\n    System.setProperty(key, Traffic.RED.toString());\r\n    try {\r\n        assertEquals(Traffic.RED, EnumUtils.getEnumSystemProperty(Traffic.class, key, null));\r\n        assertEquals(Traffic.RED, EnumUtils.getEnumSystemProperty(Traffic.class, \"?\", Traffic.RED));\r\n        assertEquals(Traffic.RED, EnumUtils.getEnumSystemProperty(null, null, Traffic.RED));\r\n        assertEquals(Traffic.RED, EnumUtils.getEnumSystemProperty(null, \"?\", Traffic.RED));\r\n        assertEquals(Traffic.RED, EnumUtils.getEnumSystemProperty(Traffic.class, null, Traffic.RED));\r\n    } finally {\r\n        System.getProperties().remove(key);\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\EnumUtilsTest.java",
  "methodName" : "testGetFirstEnumIgnoreCase_defaultEnum",
  "sourceCode" : "@Test\r\nvoid testGetFirstEnumIgnoreCase_defaultEnum() {\r\n    final Function<Traffic2, String> f = Traffic2::getLabel;\r\n    assertEquals(Traffic2.RED, EnumUtils.getFirstEnumIgnoreCase(Traffic2.class, \"***red***\", f, Traffic2.AMBER));\r\n    assertEquals(Traffic2.AMBER, EnumUtils.getFirstEnumIgnoreCase(Traffic2.class, \"**Amber**\", f, Traffic2.GREEN));\r\n    assertEquals(Traffic2.GREEN, EnumUtils.getFirstEnumIgnoreCase(Traffic2.class, \"*grEEn*\", f, Traffic2.RED));\r\n    assertEquals(Traffic2.AMBER, EnumUtils.getFirstEnumIgnoreCase(Traffic2.class, \"PURPLE\", f, Traffic2.AMBER));\r\n    assertEquals(Traffic2.GREEN, EnumUtils.getFirstEnumIgnoreCase(Traffic2.class, \"purple\", f, Traffic2.GREEN));\r\n    assertEquals(Traffic2.RED, EnumUtils.getFirstEnumIgnoreCase(Traffic2.class, \"pUrPlE\", f, Traffic2.RED));\r\n    assertEquals(Traffic2.AMBER, EnumUtils.getFirstEnumIgnoreCase(Traffic2.class, null, f, Traffic2.AMBER));\r\n    assertEquals(Traffic2.GREEN, EnumUtils.getFirstEnumIgnoreCase(Traffic2.class, null, f, Traffic2.GREEN));\r\n    assertEquals(Traffic2.RED, EnumUtils.getFirstEnumIgnoreCase(Traffic2.class, null, f, Traffic2.RED));\r\n    assertNull(EnumUtils.getFirstEnumIgnoreCase(Traffic2.class, \"PURPLE\", f, null));\r\n    assertNull(EnumUtils.getFirstEnumIgnoreCase(null, \"PURPLE\", f, null));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\EnumUtilsTest.java",
  "methodName" : "testGetFirstEnumToIntFunction",
  "sourceCode" : "@Test\r\nvoid testGetFirstEnumToIntFunction() {\r\n    final ToIntFunction<Traffic2> f = Traffic2::getValue;\r\n    assertEquals(Traffic2.RED, EnumUtils.getFirstEnum(Traffic2.class, 1, f, Traffic2.AMBER));\r\n    assertEquals(Traffic2.AMBER, EnumUtils.getFirstEnum(Traffic2.class, 2, f, Traffic2.GREEN));\r\n    assertEquals(Traffic2.GREEN, EnumUtils.getFirstEnum(Traffic2.class, 3, f, Traffic2.RED));\r\n    assertEquals(Traffic2.AMBER, EnumUtils.getFirstEnum(Traffic2.class, 4, f, Traffic2.AMBER));\r\n    assertEquals(Traffic2.GREEN, EnumUtils.getFirstEnum(Traffic2.class, 5, f, Traffic2.GREEN));\r\n    assertEquals(Traffic2.RED, EnumUtils.getFirstEnum(Traffic2.class, 6, f, Traffic2.RED));\r\n    assertEquals(Traffic2.AMBER, EnumUtils.getFirstEnum(Traffic2.class, 0, f, Traffic2.AMBER));\r\n    assertEquals(Traffic2.GREEN, EnumUtils.getFirstEnum(Traffic2.class, -1, f, Traffic2.GREEN));\r\n    assertEquals(Traffic2.RED, EnumUtils.getFirstEnum(Traffic2.class, 0, f, Traffic2.RED));\r\n    assertNull(EnumUtils.getFirstEnum(Traffic2.class, 7, f, null));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\EnumUtilsTest.java",
  "methodName" : "testIsValidEnum",
  "sourceCode" : "@Test\r\nvoid testIsValidEnum() {\r\n    assertTrue(EnumUtils.isValidEnum(Traffic.class, \"RED\"));\r\n    assertTrue(EnumUtils.isValidEnum(Traffic.class, \"AMBER\"));\r\n    assertTrue(EnumUtils.isValidEnum(Traffic.class, \"GREEN\"));\r\n    assertFalse(EnumUtils.isValidEnum(Traffic.class, \"PURPLE\"));\r\n    assertFalse(EnumUtils.isValidEnum(Traffic.class, null));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\EnumUtilsTest.java",
  "methodName" : "testIsValidEnum_nullClass",
  "sourceCode" : "@Test\r\nvoid testIsValidEnum_nullClass() {\r\n    assertFalse(EnumUtils.isValidEnum(null, \"PURPLE\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\EnumUtilsTest.java",
  "methodName" : "testIsValidEnumIgnoreCase",
  "sourceCode" : "@Test\r\nvoid testIsValidEnumIgnoreCase() {\r\n    assertTrue(EnumUtils.isValidEnumIgnoreCase(Traffic.class, \"red\"));\r\n    assertTrue(EnumUtils.isValidEnumIgnoreCase(Traffic.class, \"Amber\"));\r\n    assertTrue(EnumUtils.isValidEnumIgnoreCase(Traffic.class, \"grEEn\"));\r\n    assertFalse(EnumUtils.isValidEnumIgnoreCase(Traffic.class, \"purple\"));\r\n    assertFalse(EnumUtils.isValidEnumIgnoreCase(Traffic.class, null));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\EnumUtilsTest.java",
  "methodName" : "testIsValidEnumIgnoreCase_nullClass",
  "sourceCode" : "@Test\r\nvoid testIsValidEnumIgnoreCase_nullClass() {\r\n    assertFalse(EnumUtils.isValidEnumIgnoreCase(null, \"PURPLE\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\EnumUtilsTest.java",
  "methodName" : "testProcessBitVector",
  "sourceCode" : "@Test\r\nvoid testProcessBitVector() {\r\n    assertEquals(EnumSet.noneOf(Traffic.class), EnumUtils.processBitVector(Traffic.class, 0L));\r\n    assertEquals(EnumSet.of(Traffic.RED), EnumUtils.processBitVector(Traffic.class, 1L));\r\n    assertEquals(EnumSet.of(Traffic.AMBER), EnumUtils.processBitVector(Traffic.class, 2L));\r\n    assertEquals(EnumSet.of(Traffic.RED, Traffic.AMBER), EnumUtils.processBitVector(Traffic.class, 3L));\r\n    assertEquals(EnumSet.of(Traffic.GREEN), EnumUtils.processBitVector(Traffic.class, 4L));\r\n    assertEquals(EnumSet.of(Traffic.RED, Traffic.GREEN), EnumUtils.processBitVector(Traffic.class, 5L));\r\n    assertEquals(EnumSet.of(Traffic.AMBER, Traffic.GREEN), EnumUtils.processBitVector(Traffic.class, 6L));\r\n    assertEquals(EnumSet.of(Traffic.RED, Traffic.AMBER, Traffic.GREEN), EnumUtils.processBitVector(Traffic.class, 7L));\r\n    // 64 values Enum (to test whether no int<->long jdk conversion issue exists)\r\n    assertEquals(EnumSet.of(Enum64.A31), EnumUtils.processBitVector(Enum64.class, 1L << 31));\r\n    assertEquals(EnumSet.of(Enum64.A32), EnumUtils.processBitVector(Enum64.class, 1L << 32));\r\n    assertEquals(EnumSet.of(Enum64.A63), EnumUtils.processBitVector(Enum64.class, 1L << 63));\r\n    assertEquals(EnumSet.of(Enum64.A63), EnumUtils.processBitVector(Enum64.class, Long.MIN_VALUE));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\EnumUtilsTest.java",
  "methodName" : "testProcessBitVector_longClass",
  "sourceCode" : "@Test\r\nvoid testProcessBitVector_longClass() {\r\n    assertIllegalArgumentException(() -> EnumUtils.processBitVector(TooMany.class, 0L));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\EnumUtilsTest.java",
  "methodName" : "testProcessBitVector_nullClass",
  "sourceCode" : "@Test\r\nvoid testProcessBitVector_nullClass() {\r\n    final Class<Traffic> empty = null;\r\n    assertNullPointerException(() -> EnumUtils.processBitVector(empty, 0L));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\EnumUtilsTest.java",
  "methodName" : "testProcessBitVectors",
  "sourceCode" : "@Test\r\nvoid testProcessBitVectors() {\r\n    assertEquals(EnumSet.noneOf(Traffic.class), EnumUtils.processBitVectors(Traffic.class, 0L));\r\n    assertEquals(EnumSet.of(Traffic.RED), EnumUtils.processBitVectors(Traffic.class, 1L));\r\n    assertEquals(EnumSet.of(Traffic.AMBER), EnumUtils.processBitVectors(Traffic.class, 2L));\r\n    assertEquals(EnumSet.of(Traffic.RED, Traffic.AMBER), EnumUtils.processBitVectors(Traffic.class, 3L));\r\n    assertEquals(EnumSet.of(Traffic.GREEN), EnumUtils.processBitVectors(Traffic.class, 4L));\r\n    assertEquals(EnumSet.of(Traffic.RED, Traffic.GREEN), EnumUtils.processBitVectors(Traffic.class, 5L));\r\n    assertEquals(EnumSet.of(Traffic.AMBER, Traffic.GREEN), EnumUtils.processBitVectors(Traffic.class, 6L));\r\n    assertEquals(EnumSet.of(Traffic.RED, Traffic.AMBER, Traffic.GREEN), EnumUtils.processBitVectors(Traffic.class, 7L));\r\n    assertEquals(EnumSet.noneOf(Traffic.class), EnumUtils.processBitVectors(Traffic.class, 0L, 0L));\r\n    assertEquals(EnumSet.of(Traffic.RED), EnumUtils.processBitVectors(Traffic.class, 0L, 1L));\r\n    assertEquals(EnumSet.of(Traffic.AMBER), EnumUtils.processBitVectors(Traffic.class, 0L, 2L));\r\n    assertEquals(EnumSet.of(Traffic.RED, Traffic.AMBER), EnumUtils.processBitVectors(Traffic.class, 0L, 3L));\r\n    assertEquals(EnumSet.of(Traffic.GREEN), EnumUtils.processBitVectors(Traffic.class, 0L, 4L));\r\n    assertEquals(EnumSet.of(Traffic.RED, Traffic.GREEN), EnumUtils.processBitVectors(Traffic.class, 0L, 5L));\r\n    assertEquals(EnumSet.of(Traffic.AMBER, Traffic.GREEN), EnumUtils.processBitVectors(Traffic.class, 0L, 6L));\r\n    assertEquals(EnumSet.of(Traffic.RED, Traffic.AMBER, Traffic.GREEN), EnumUtils.processBitVectors(Traffic.class, 0L, 7L));\r\n    // demonstrate tolerance of irrelevant high-order digits:\r\n    assertEquals(EnumSet.noneOf(Traffic.class), EnumUtils.processBitVectors(Traffic.class, 666L, 0L));\r\n    assertEquals(EnumSet.of(Traffic.RED), EnumUtils.processBitVectors(Traffic.class, 666L, 1L));\r\n    assertEquals(EnumSet.of(Traffic.AMBER), EnumUtils.processBitVectors(Traffic.class, 666L, 2L));\r\n    assertEquals(EnumSet.of(Traffic.RED, Traffic.AMBER), EnumUtils.processBitVectors(Traffic.class, 666L, 3L));\r\n    assertEquals(EnumSet.of(Traffic.GREEN), EnumUtils.processBitVectors(Traffic.class, 666L, 4L));\r\n    assertEquals(EnumSet.of(Traffic.RED, Traffic.GREEN), EnumUtils.processBitVectors(Traffic.class, 666L, 5L));\r\n    assertEquals(EnumSet.of(Traffic.AMBER, Traffic.GREEN), EnumUtils.processBitVectors(Traffic.class, 666L, 6L));\r\n    assertEquals(EnumSet.of(Traffic.RED, Traffic.AMBER, Traffic.GREEN), EnumUtils.processBitVectors(Traffic.class, 666L, 7L));\r\n    // 64 values Enum (to test whether no int<->long jdk conversion issue exists)\r\n    assertEquals(EnumSet.of(Enum64.A31), EnumUtils.processBitVectors(Enum64.class, 1L << 31));\r\n    assertEquals(EnumSet.of(Enum64.A32), EnumUtils.processBitVectors(Enum64.class, 1L << 32));\r\n    assertEquals(EnumSet.of(Enum64.A63), EnumUtils.processBitVectors(Enum64.class, 1L << 63));\r\n    assertEquals(EnumSet.of(Enum64.A63), EnumUtils.processBitVectors(Enum64.class, Long.MIN_VALUE));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\EnumUtilsTest.java",
  "methodName" : "testProcessBitVectors_longClass",
  "sourceCode" : "@Test\r\nvoid testProcessBitVectors_longClass() {\r\n    assertEquals(EnumSet.noneOf(TooMany.class), EnumUtils.processBitVectors(TooMany.class, 0L));\r\n    assertEquals(EnumSet.of(TooMany.A), EnumUtils.processBitVectors(TooMany.class, 1L));\r\n    assertEquals(EnumSet.of(TooMany.B), EnumUtils.processBitVectors(TooMany.class, 2L));\r\n    assertEquals(EnumSet.of(TooMany.A, TooMany.B), EnumUtils.processBitVectors(TooMany.class, 3L));\r\n    assertEquals(EnumSet.of(TooMany.C), EnumUtils.processBitVectors(TooMany.class, 4L));\r\n    assertEquals(EnumSet.of(TooMany.A, TooMany.C), EnumUtils.processBitVectors(TooMany.class, 5L));\r\n    assertEquals(EnumSet.of(TooMany.B, TooMany.C), EnumUtils.processBitVectors(TooMany.class, 6L));\r\n    assertEquals(EnumSet.of(TooMany.A, TooMany.B, TooMany.C), EnumUtils.processBitVectors(TooMany.class, 7L));\r\n    assertEquals(EnumSet.noneOf(TooMany.class), EnumUtils.processBitVectors(TooMany.class, 0L, 0L));\r\n    assertEquals(EnumSet.of(TooMany.A), EnumUtils.processBitVectors(TooMany.class, 0L, 1L));\r\n    assertEquals(EnumSet.of(TooMany.B), EnumUtils.processBitVectors(TooMany.class, 0L, 2L));\r\n    assertEquals(EnumSet.of(TooMany.A, TooMany.B), EnumUtils.processBitVectors(TooMany.class, 0L, 3L));\r\n    assertEquals(EnumSet.of(TooMany.C), EnumUtils.processBitVectors(TooMany.class, 0L, 4L));\r\n    assertEquals(EnumSet.of(TooMany.A, TooMany.C), EnumUtils.processBitVectors(TooMany.class, 0L, 5L));\r\n    assertEquals(EnumSet.of(TooMany.B, TooMany.C), EnumUtils.processBitVectors(TooMany.class, 0L, 6L));\r\n    assertEquals(EnumSet.of(TooMany.A, TooMany.B, TooMany.C), EnumUtils.processBitVectors(TooMany.class, 0L, 7L));\r\n    assertEquals(EnumSet.of(TooMany.A, TooMany.B, TooMany.C), EnumUtils.processBitVectors(TooMany.class, 0L, 7L));\r\n    assertEquals(EnumSet.of(TooMany.M2), EnumUtils.processBitVectors(TooMany.class, 1L, 0L));\r\n    assertEquals(EnumSet.of(TooMany.A, TooMany.M2), EnumUtils.processBitVectors(TooMany.class, 1L, 1L));\r\n    assertEquals(EnumSet.of(TooMany.B, TooMany.M2), EnumUtils.processBitVectors(TooMany.class, 1L, 2L));\r\n    assertEquals(EnumSet.of(TooMany.A, TooMany.B, TooMany.M2), EnumUtils.processBitVectors(TooMany.class, 1L, 3L));\r\n    assertEquals(EnumSet.of(TooMany.C, TooMany.M2), EnumUtils.processBitVectors(TooMany.class, 1L, 4L));\r\n    assertEquals(EnumSet.of(TooMany.A, TooMany.C, TooMany.M2), EnumUtils.processBitVectors(TooMany.class, 1L, 5L));\r\n    assertEquals(EnumSet.of(TooMany.B, TooMany.C, TooMany.M2), EnumUtils.processBitVectors(TooMany.class, 1L, 6L));\r\n    assertEquals(EnumSet.of(TooMany.A, TooMany.B, TooMany.C, TooMany.M2), EnumUtils.processBitVectors(TooMany.class, 1L, 7L));\r\n    assertEquals(EnumSet.of(TooMany.A, TooMany.B, TooMany.C, TooMany.M2), EnumUtils.processBitVectors(TooMany.class, 1L, 7L));\r\n    // demonstrate tolerance of irrelevant high-order digits:\r\n    assertEquals(EnumSet.of(TooMany.M2), EnumUtils.processBitVectors(TooMany.class, 9L, 0L));\r\n    assertEquals(EnumSet.of(TooMany.A, TooMany.M2), EnumUtils.processBitVectors(TooMany.class, 9L, 1L));\r\n    assertEquals(EnumSet.of(TooMany.B, TooMany.M2), EnumUtils.processBitVectors(TooMany.class, 9L, 2L));\r\n    assertEquals(EnumSet.of(TooMany.A, TooMany.B, TooMany.M2), EnumUtils.processBitVectors(TooMany.class, 9L, 3L));\r\n    assertEquals(EnumSet.of(TooMany.C, TooMany.M2), EnumUtils.processBitVectors(TooMany.class, 9L, 4L));\r\n    assertEquals(EnumSet.of(TooMany.A, TooMany.C, TooMany.M2), EnumUtils.processBitVectors(TooMany.class, 9L, 5L));\r\n    assertEquals(EnumSet.of(TooMany.B, TooMany.C, TooMany.M2), EnumUtils.processBitVectors(TooMany.class, 9L, 6L));\r\n    assertEquals(EnumSet.of(TooMany.A, TooMany.B, TooMany.C, TooMany.M2), EnumUtils.processBitVectors(TooMany.class, 9L, 7L));\r\n    assertEquals(EnumSet.of(TooMany.A, TooMany.B, TooMany.C, TooMany.M2), EnumUtils.processBitVectors(TooMany.class, 9L, 7L));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\EnumUtilsTest.java",
  "methodName" : "testProcessBitVectors_nullClass",
  "sourceCode" : "@Test\r\nvoid testProcessBitVectors_nullClass() {\r\n    final Class<Traffic> empty = null;\r\n    assertNullPointerException(() -> EnumUtils.processBitVectors(empty, 0L));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\EnumUtilsTest.java",
  "methodName" : "testStream",
  "sourceCode" : "@Test\r\nvoid testStream() {\r\n    assertEquals(7, EnumUtils.stream(TimeUnit.class).count());\r\n    Assertions.assertArrayEquals(TimeUnit.values(), EnumUtils.stream(TimeUnit.class).toArray(TimeUnit[]::new));\r\n    assertEquals(0, EnumUtils.stream(Object.class).count());\r\n    assertEquals(0, EnumUtils.stream(null).count());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\event\\EventListenerSupportTest.java",
  "methodName" : "testAddListenerNoDuplicates",
  "sourceCode" : "@Test\r\nvoid testAddListenerNoDuplicates() {\r\n    final EventListenerSupport<VetoableChangeListener> listenerSupport = EventListenerSupport.create(VetoableChangeListener.class);\r\n    final VetoableChangeListener[] listeners = listenerSupport.getListeners();\r\n    assertEquals(0, listeners.length);\r\n    assertEquals(VetoableChangeListener.class, listeners.getClass().getComponentType());\r\n    final VetoableChangeListener[] empty = listeners;\r\n    // for fun, show that the same empty instance is used\r\n    assertSame(empty, listenerSupport.getListeners());\r\n    final VetoableChangeListener listener1 = EasyMock.createNiceMock(VetoableChangeListener.class);\r\n    listenerSupport.addListener(listener1);\r\n    assertEquals(1, listenerSupport.getListeners().length);\r\n    listenerSupport.addListener(listener1, false);\r\n    assertEquals(1, listenerSupport.getListeners().length);\r\n    listenerSupport.removeListener(listener1);\r\n    assertSame(empty, listenerSupport.getListeners());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\event\\EventListenerSupportTest.java",
  "methodName" : "testAddNullListener",
  "sourceCode" : "@Test\r\nvoid testAddNullListener() {\r\n    final EventListenerSupport<VetoableChangeListener> listenerSupport = EventListenerSupport.create(VetoableChangeListener.class);\r\n    assertNullPointerException(() -> listenerSupport.addListener(null));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\event\\EventListenerSupportTest.java",
  "methodName" : "testCreateWithNonInterfaceParameter",
  "sourceCode" : "@Test\r\nvoid testCreateWithNonInterfaceParameter() {\r\n    assertIllegalArgumentException(() -> EventListenerSupport.create(String.class));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\event\\EventListenerSupportTest.java",
  "methodName" : "testCreateWithNullParameter",
  "sourceCode" : "@Test\r\nvoid testCreateWithNullParameter() {\r\n    assertNullPointerException(() -> EventListenerSupport.create(null));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\event\\EventListenerSupportTest.java",
  "methodName" : "testEventDispatchOrder",
  "sourceCode" : "@Test\r\nvoid testEventDispatchOrder() throws PropertyVetoException {\r\n    final EventListenerSupport<VetoableChangeListener> listenerSupport = EventListenerSupport.create(VetoableChangeListener.class);\r\n    final List<VetoableChangeListener> calledListeners = new ArrayList<>();\r\n    final VetoableChangeListener listener1 = createListener(calledListeners);\r\n    final VetoableChangeListener listener2 = createListener(calledListeners);\r\n    listenerSupport.addListener(listener1);\r\n    listenerSupport.addListener(listener2);\r\n    listenerSupport.fire().vetoableChange(new PropertyChangeEvent(new Date(), \"Day\", 4, 5));\r\n    assertEquals(calledListeners.size(), 2);\r\n    assertSame(calledListeners.get(0), listener1);\r\n    assertSame(calledListeners.get(1), listener2);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\event\\EventListenerSupportTest.java",
  "methodName" : "testGetListeners",
  "sourceCode" : "@Test\r\nvoid testGetListeners() {\r\n    final EventListenerSupport<VetoableChangeListener> listenerSupport = EventListenerSupport.create(VetoableChangeListener.class);\r\n    final VetoableChangeListener[] listeners = listenerSupport.getListeners();\r\n    assertEquals(0, listeners.length);\r\n    assertEquals(VetoableChangeListener.class, listeners.getClass().getComponentType());\r\n    final VetoableChangeListener[] empty = listeners;\r\n    // for fun, show that the same empty instance is used\r\n    assertSame(empty, listenerSupport.getListeners());\r\n    final VetoableChangeListener listener1 = EasyMock.createNiceMock(VetoableChangeListener.class);\r\n    listenerSupport.addListener(listener1);\r\n    assertEquals(1, listenerSupport.getListeners().length);\r\n    final VetoableChangeListener listener2 = EasyMock.createNiceMock(VetoableChangeListener.class);\r\n    listenerSupport.addListener(listener2);\r\n    assertEquals(2, listenerSupport.getListeners().length);\r\n    listenerSupport.removeListener(listener1);\r\n    assertEquals(1, listenerSupport.getListeners().length);\r\n    listenerSupport.removeListener(listener2);\r\n    assertSame(empty, listenerSupport.getListeners());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\event\\EventListenerSupportTest.java",
  "methodName" : "testRemoveListenerDuringEvent",
  "sourceCode" : "@Test\r\nvoid testRemoveListenerDuringEvent() throws PropertyVetoException {\r\n    final EventListenerSupport<VetoableChangeListener> listenerSupport = EventListenerSupport.create(VetoableChangeListener.class);\r\n    for (int i = 0; i < 10; ++i) {\r\n        addDeregisterListener(listenerSupport);\r\n    }\r\n    assertEquals(listenerSupport.getListenerCount(), 10);\r\n    listenerSupport.fire().vetoableChange(new PropertyChangeEvent(new Date(), \"Day\", 4, 5));\r\n    assertEquals(listenerSupport.getListenerCount(), 0);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\event\\EventListenerSupportTest.java",
  "methodName" : "testRemoveNullListener",
  "sourceCode" : "@Test\r\nvoid testRemoveNullListener() {\r\n    final EventListenerSupport<VetoableChangeListener> listenerSupport = EventListenerSupport.create(VetoableChangeListener.class);\r\n    assertNullPointerException(() -> listenerSupport.removeListener(null));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\event\\EventListenerSupportTest.java",
  "methodName" : "testSerialization",
  "sourceCode" : "@Test\r\nvoid testSerialization() throws IOException, ClassNotFoundException, PropertyVetoException {\r\n    final EventListenerSupport<VetoableChangeListener> listenerSupport = EventListenerSupport.create(VetoableChangeListener.class);\r\n    listenerSupport.addListener(Function.identity()::apply);\r\n    listenerSupport.addListener(EasyMock.createNiceMock(VetoableChangeListener.class));\r\n    // serialize:\r\n    final ByteArrayOutputStream outputStream = new ByteArrayOutputStream();\r\n    try (ObjectOutputStream objectOutputStream = new ObjectOutputStream(outputStream)) {\r\n        objectOutputStream.writeObject(listenerSupport);\r\n    }\r\n    // deserialize:\r\n    @SuppressWarnings(\"unchecked\")\r\n    final EventListenerSupport<VetoableChangeListener> deserializedListenerSupport = (EventListenerSupport<VetoableChangeListener>) new ObjectInputStream(new ByteArrayInputStream(outputStream.toByteArray())).readObject();\r\n    // make sure we get a listener array back, of the correct component type, and that it contains only the serializable mock\r\n    final VetoableChangeListener[] listeners = deserializedListenerSupport.getListeners();\r\n    assertEquals(VetoableChangeListener.class, listeners.getClass().getComponentType());\r\n    assertEquals(1, listeners.length);\r\n    // now verify that the mock still receives events; we can infer that the proxy was correctly reconstituted\r\n    final VetoableChangeListener listener = listeners[0];\r\n    final PropertyChangeEvent evt = new PropertyChangeEvent(new Date(), \"Day\", 7, 9);\r\n    listener.vetoableChange(evt);\r\n    EasyMock.replay(listener);\r\n    deserializedListenerSupport.fire().vetoableChange(evt);\r\n    EasyMock.verify(listener);\r\n    // remove listener and verify we get an empty array of listeners\r\n    deserializedListenerSupport.removeListener(listener);\r\n    assertEquals(0, deserializedListenerSupport.getListeners().length);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\event\\EventListenerSupportTest.java",
  "methodName" : "testSubclassInvocationHandling",
  "sourceCode" : "@Test\r\nvoid testSubclassInvocationHandling() throws PropertyVetoException {\r\n    final EventListenerSupport<VetoableChangeListener> eventListenerSupport = new EventListenerSupport<VetoableChangeListener>(VetoableChangeListener.class) {\r\n\r\n        private static final long serialVersionUID = 1L;\r\n\r\n        @Override\r\n        protected java.lang.reflect.InvocationHandler createInvocationHandler() {\r\n            return new ProxyInvocationHandler() {\r\n\r\n                @Override\r\n                public Object invoke(final Object proxy, final Method method, final Object[] args) throws IllegalAccessException, IllegalArgumentException, InvocationTargetException {\r\n                    return \"vetoableChange\".equals(method.getName()) && \"Hour\".equals(((PropertyChangeEvent) args[0]).getPropertyName()) ? null : super.invoke(proxy, method, args);\r\n                }\r\n            };\r\n        }\r\n    };\r\n    final VetoableChangeListener listener = EasyMock.createNiceMock(VetoableChangeListener.class);\r\n    eventListenerSupport.addListener(listener);\r\n    final Object source = new Date();\r\n    final PropertyChangeEvent ignore = new PropertyChangeEvent(source, \"Hour\", 5, 6);\r\n    final PropertyChangeEvent respond = new PropertyChangeEvent(source, \"Day\", 6, 7);\r\n    listener.vetoableChange(respond);\r\n    EasyMock.replay(listener);\r\n    eventListenerSupport.fire().vetoableChange(ignore);\r\n    eventListenerSupport.fire().vetoableChange(respond);\r\n    EasyMock.verify(listener);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\event\\EventListenerSupportTest.java",
  "methodName" : "testThrowingListener",
  "sourceCode" : "/**\r\n * Tests that throwing an exception from a listener stops calling the remaining listeners.\r\n */\r\n@Test\r\nvoid testThrowingListener() {\r\n    final AtomicInteger count = new AtomicInteger();\r\n    final EventListenerSupport<VetoableChangeListener> listenerSupport = EventListenerSupport.create(VetoableChangeListener.class);\r\n    final int vetoLimit = 1;\r\n    final int listenerCount = 10;\r\n    for (int i = 0; i < listenerCount; ++i) {\r\n        listenerSupport.addListener(evt -> {\r\n            if (count.incrementAndGet() > vetoLimit) {\r\n                throw new PropertyVetoException(count.toString(), evt);\r\n            }\r\n        });\r\n    }\r\n    assertEquals(listenerCount, listenerSupport.getListenerCount());\r\n    assertEquals(0, count.get());\r\n    final Exception e = assertThrows(UndeclaredThrowableException.class, () -> listenerSupport.fire().vetoableChange(new PropertyChangeEvent(new Date(), \"Day\", 0, 1)));\r\n    final Throwable rootCause = ExceptionUtils.getRootCause(e);\r\n    assertInstanceOf(PropertyVetoException.class, rootCause);\r\n    assertEquals(vetoLimit + 1, count.get());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\event\\EventListenerSupportTest.java",
  "methodName" : "testThrowingListenerContinues",
  "sourceCode" : "/**\r\n * Tests that throwing an exception from a listener continues calling the remaining listeners.\r\n */\r\n@Test\r\nvoid testThrowingListenerContinues() throws PropertyVetoException {\r\n    final AtomicInteger count = new AtomicInteger();\r\n    final EventListenerSupport<VetoableChangeListener> listenerSupport = new EventListenerSupport<VetoableChangeListener>(VetoableChangeListener.class) {\r\n\r\n        @Override\r\n        protected InvocationHandler createInvocationHandler() {\r\n            return new ProxyInvocationHandler(FailableConsumer.nop());\r\n        }\r\n    };\r\n    final int vetoLimit = 1;\r\n    final int listenerCount = 10;\r\n    for (int i = 0; i < listenerCount; ++i) {\r\n        listenerSupport.addListener(evt -> {\r\n            if (count.incrementAndGet() > vetoLimit) {\r\n                throw new PropertyVetoException(count.toString(), evt);\r\n            }\r\n        });\r\n    }\r\n    assertEquals(listenerCount, listenerSupport.getListenerCount());\r\n    assertEquals(0, count.get());\r\n    listenerSupport.fire().vetoableChange(new PropertyChangeEvent(new Date(), \"Day\", 0, 1));\r\n    assertEquals(listenerCount, count.get());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\event\\EventUtilsTest.java",
  "methodName" : "testAddEventListener",
  "sourceCode" : "@Test\r\nvoid testAddEventListener() {\r\n    final PropertyChangeSource src = new PropertyChangeSource();\r\n    final EventCountingInvocationHandler handler = new EventCountingInvocationHandler();\r\n    final PropertyChangeListener listener = handler.createListener(PropertyChangeListener.class);\r\n    assertEquals(0, handler.getEventCount(\"propertyChange\"));\r\n    EventUtils.addEventListener(src, PropertyChangeListener.class, listener);\r\n    assertEquals(0, handler.getEventCount(\"propertyChange\"));\r\n    src.setProperty(\"newValue\");\r\n    assertEquals(1, handler.getEventCount(\"propertyChange\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\event\\EventUtilsTest.java",
  "methodName" : "testAddEventListenerThrowsException",
  "sourceCode" : "@Test\r\nvoid testAddEventListenerThrowsException() {\r\n    final ExceptionEventSource src = new ExceptionEventSource();\r\n    assertThrows(RuntimeException.class, () -> EventUtils.addEventListener(src, PropertyChangeListener.class, e -> {\r\n        // Do nothing!\r\n    }));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\event\\EventUtilsTest.java",
  "methodName" : "testAddEventListenerWithNoAddMethod",
  "sourceCode" : "@Test\r\nvoid testAddEventListenerWithNoAddMethod() {\r\n    final PropertyChangeSource src = new PropertyChangeSource();\r\n    final EventCountingInvocationHandler handler = new EventCountingInvocationHandler();\r\n    final ObjectChangeListener listener = handler.createListener(ObjectChangeListener.class);\r\n    final IllegalArgumentException e = assertIllegalArgumentException(() -> EventUtils.addEventListener(src, ObjectChangeListener.class, listener));\r\n    assertEquals(\"Unable to add listener for class \" + src.getClass().getName() + \" and public add\" + ObjectChangeListener.class.getSimpleName() + \" method which takes a parameter of type \" + ObjectChangeListener.class.getName() + \".\", e.getMessage());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\event\\EventUtilsTest.java",
  "methodName" : "testAddEventListenerWithPrivateAddMethod",
  "sourceCode" : "@Test\r\nvoid testAddEventListenerWithPrivateAddMethod() {\r\n    final PropertyChangeSource src = new PropertyChangeSource();\r\n    final EventCountingInvocationHandler handler = new EventCountingInvocationHandler();\r\n    final VetoableChangeListener listener = handler.createListener(VetoableChangeListener.class);\r\n    final IllegalArgumentException e = assertIllegalArgumentException(() -> EventUtils.addEventListener(src, VetoableChangeListener.class, listener));\r\n    assertEquals(\"Unable to add listener for class \" + src.getClass().getName() + \" and public add\" + VetoableChangeListener.class.getSimpleName() + \" method which takes a parameter of type \" + VetoableChangeListener.class.getName() + \".\", e.getMessage());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\event\\EventUtilsTest.java",
  "methodName" : "testBindEventsToMethod",
  "sourceCode" : "@Test\r\nvoid testBindEventsToMethod() {\r\n    final PropertyChangeSource src = new PropertyChangeSource();\r\n    final EventCounter counter = new EventCounter();\r\n    EventUtils.bindEventsToMethod(counter, \"eventOccurred\", src, PropertyChangeListener.class);\r\n    assertEquals(0, counter.getCount());\r\n    src.setProperty(\"newValue\");\r\n    assertEquals(1, counter.getCount());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\event\\EventUtilsTest.java",
  "methodName" : "testBindEventsToMethodWithEvent",
  "sourceCode" : "@Test\r\nvoid testBindEventsToMethodWithEvent() {\r\n    final PropertyChangeSource src = new PropertyChangeSource();\r\n    final EventCounterWithEvent counter = new EventCounterWithEvent();\r\n    EventUtils.bindEventsToMethod(counter, \"eventOccurred\", src, PropertyChangeListener.class);\r\n    assertEquals(0, counter.getCount());\r\n    src.setProperty(\"newValue\");\r\n    assertEquals(1, counter.getCount());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\event\\EventUtilsTest.java",
  "methodName" : "testBindFilteredEventsToMethod",
  "sourceCode" : "@Test\r\nvoid testBindFilteredEventsToMethod() {\r\n    final MultipleEventSource src = new MultipleEventSource();\r\n    final EventCounter counter = new EventCounter();\r\n    EventUtils.bindEventsToMethod(counter, \"eventOccurred\", src, MultipleEventListener.class, \"event1\");\r\n    assertEquals(0, counter.getCount());\r\n    src.listeners.fire().event1(new PropertyChangeEvent(new Date(), \"Day\", Integer.valueOf(0), Integer.valueOf(1)));\r\n    assertEquals(1, counter.getCount());\r\n    src.listeners.fire().event2(new PropertyChangeEvent(new Date(), \"Day\", Integer.valueOf(1), Integer.valueOf(2)));\r\n    assertEquals(1, counter.getCount());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\event\\EventUtilsTest.java",
  "methodName" : "testConstructor",
  "sourceCode" : "@Test\r\nvoid testConstructor() {\r\n    assertNotNull(new EventUtils());\r\n    final Constructor<?>[] cons = EventUtils.class.getDeclaredConstructors();\r\n    assertEquals(1, cons.length);\r\n    assertTrue(Modifier.isPublic(cons[0].getModifiers()));\r\n    assertTrue(Modifier.isPublic(EventUtils.class.getModifiers()));\r\n    assertFalse(Modifier.isFinal(EventUtils.class.getModifiers()));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\exception\\AbstractExceptionContextTest.java",
  "methodName" : "testAddContextValue",
  "sourceCode" : "@Test\r\nvoid testAddContextValue() {\r\n    final String message = exceptionContext.getFormattedExceptionMessage(TEST_MESSAGE);\r\n    assertTrue(message.contains(TEST_MESSAGE));\r\n    assertTrue(message.contains(\"test1\"));\r\n    assertTrue(message.contains(\"test2\"));\r\n    assertTrue(message.contains(\"test Date\"));\r\n    assertTrue(message.contains(\"test Nbr\"));\r\n    assertTrue(message.contains(\"some value\"));\r\n    assertTrue(message.contains(\"5\"));\r\n    assertNull(exceptionContext.getFirstContextValue(\"test1\"));\r\n    assertEquals(\"some value\", exceptionContext.getFirstContextValue(\"test2\"));\r\n    assertEquals(5, exceptionContext.getContextLabels().size());\r\n    assertTrue(exceptionContext.getContextLabels().contains(\"test1\"));\r\n    assertTrue(exceptionContext.getContextLabels().contains(\"test2\"));\r\n    assertTrue(exceptionContext.getContextLabels().contains(\"test Date\"));\r\n    assertTrue(exceptionContext.getContextLabels().contains(\"test Nbr\"));\r\n    exceptionContext.addContextValue(\"test2\", \"different value\");\r\n    assertEquals(5, exceptionContext.getContextLabels().size());\r\n    assertTrue(exceptionContext.getContextLabels().contains(\"test2\"));\r\n    final String contextMessage = exceptionContext.getFormattedExceptionMessage(null);\r\n    assertFalse(contextMessage.contains(TEST_MESSAGE));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\exception\\AbstractExceptionContextTest.java",
  "methodName" : "testGetContextEntries",
  "sourceCode" : "@Test\r\nvoid testGetContextEntries() {\r\n    assertEquals(5, exceptionContext.getContextEntries().size());\r\n    exceptionContext.addContextValue(\"test2\", \"different value\");\r\n    final List<Pair<String, Object>> entries = exceptionContext.getContextEntries();\r\n    assertEquals(6, entries.size());\r\n    assertEquals(\"test1\", entries.get(0).getKey());\r\n    assertEquals(\"test2\", entries.get(1).getKey());\r\n    assertEquals(\"test Date\", entries.get(2).getKey());\r\n    assertEquals(\"test Nbr\", entries.get(3).getKey());\r\n    assertEquals(\"test Poorly written obj\", entries.get(4).getKey());\r\n    assertEquals(\"test2\", entries.get(5).getKey());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\exception\\AbstractExceptionContextTest.java",
  "methodName" : "testGetContextLabels",
  "sourceCode" : "@Test\r\nvoid testGetContextLabels() {\r\n    assertEquals(5, exceptionContext.getContextEntries().size());\r\n    exceptionContext.addContextValue(\"test2\", \"different value\");\r\n    final Set<String> labels = exceptionContext.getContextLabels();\r\n    assertEquals(6, exceptionContext.getContextEntries().size());\r\n    assertEquals(5, labels.size());\r\n    assertTrue(labels.contains(\"test1\"));\r\n    assertTrue(labels.contains(\"test2\"));\r\n    assertTrue(labels.contains(\"test Date\"));\r\n    assertTrue(labels.contains(\"test Nbr\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\exception\\AbstractExceptionContextTest.java",
  "methodName" : "testGetContextValues",
  "sourceCode" : "@Test\r\nvoid testGetContextValues() {\r\n    exceptionContext.addContextValue(\"test2\", \"different value\");\r\n    assertEquals(Collections.singletonList(null), exceptionContext.getContextValues(\"test1\"));\r\n    assertEquals(Arrays.asList(\"some value\", \"different value\"), exceptionContext.getContextValues(\"test2\"));\r\n    exceptionContext.setContextValue(\"test2\", \"another\");\r\n    assertEquals(\"another\", exceptionContext.getFirstContextValue(\"test2\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\exception\\AbstractExceptionContextTest.java",
  "methodName" : "testGetFirstContextValue",
  "sourceCode" : "@Test\r\nvoid testGetFirstContextValue() {\r\n    exceptionContext.addContextValue(\"test2\", \"different value\");\r\n    assertNull(exceptionContext.getFirstContextValue(\"test1\"));\r\n    assertEquals(\"some value\", exceptionContext.getFirstContextValue(\"test2\"));\r\n    assertNull(exceptionContext.getFirstContextValue(\"crap\"));\r\n    exceptionContext.setContextValue(\"test2\", \"another\");\r\n    assertEquals(\"another\", exceptionContext.getFirstContextValue(\"test2\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\exception\\AbstractExceptionContextTest.java",
  "methodName" : "testJavaSerialization",
  "sourceCode" : "@Test\r\nvoid testJavaSerialization() {\r\n    exceptionContext.setContextValue(\"test Poorly written obj\", \"serializable replacement\");\r\n    final T clone = SerializationUtils.deserialize(SerializationUtils.serialize(exceptionContext));\r\n    assertEquals(exceptionContext.getFormattedExceptionMessage(null), clone.getFormattedExceptionMessage(null));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\exception\\AbstractExceptionContextTest.java",
  "methodName" : "testSetContextValue",
  "sourceCode" : "@Test\r\nvoid testSetContextValue() {\r\n    exceptionContext.addContextValue(\"test2\", \"different value\");\r\n    exceptionContext.setContextValue(\"test3\", \"3\");\r\n    final String message = exceptionContext.getFormattedExceptionMessage(TEST_MESSAGE);\r\n    assertTrue(message.contains(TEST_MESSAGE));\r\n    assertTrue(message.contains(\"test Poorly written obj\"));\r\n    assertTrue(message.contains(\"Crap\"));\r\n    assertNull(exceptionContext.getFirstContextValue(\"crap\"));\r\n    assertInstanceOf(ObjectWithFaultyToString.class, exceptionContext.getFirstContextValue(\"test Poorly written obj\"));\r\n    assertEquals(7, exceptionContext.getContextEntries().size());\r\n    assertEquals(6, exceptionContext.getContextLabels().size());\r\n    assertTrue(exceptionContext.getContextLabels().contains(\"test Poorly written obj\"));\r\n    assertFalse(exceptionContext.getContextLabels().contains(\"crap\"));\r\n    exceptionContext.setContextValue(\"test Poorly written obj\", \"replacement\");\r\n    assertEquals(7, exceptionContext.getContextEntries().size());\r\n    assertEquals(6, exceptionContext.getContextLabels().size());\r\n    exceptionContext.setContextValue(\"test2\", \"another\");\r\n    assertEquals(6, exceptionContext.getContextEntries().size());\r\n    assertEquals(6, exceptionContext.getContextLabels().size());\r\n    final String contextMessage = exceptionContext.getFormattedExceptionMessage(null);\r\n    assertFalse(contextMessage.contains(TEST_MESSAGE));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\exception\\CloneFailedExceptionTest.java",
  "methodName" : "testThrowingExceptionWithCause",
  "sourceCode" : "@Test\r\nvoid testThrowingExceptionWithCause() {\r\n    assertThrows(CloneFailedException.class, () -> {\r\n        throw new CloneFailedException(generateCause());\r\n    });\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\exception\\CloneFailedExceptionTest.java",
  "methodName" : "testThrowingExceptionWithMessage",
  "sourceCode" : "@Test\r\nvoid testThrowingExceptionWithMessage() {\r\n    assertThrows(CloneFailedException.class, () -> {\r\n        throw new CloneFailedException(EXCEPTION_MESSAGE);\r\n    });\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\exception\\CloneFailedExceptionTest.java",
  "methodName" : "testThrowingInformativeException",
  "sourceCode" : "@Test\r\nvoid testThrowingInformativeException() {\r\n    assertThrows(CloneFailedException.class, () -> {\r\n        throw new CloneFailedException(EXCEPTION_MESSAGE, generateCause());\r\n    });\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\exception\\CloneFailedExceptionTest.java",
  "methodName" : "testWithCauseAndMessage",
  "sourceCode" : "@Test\r\nvoid testWithCauseAndMessage() {\r\n    final Exception exception = new CloneFailedException(EXCEPTION_MESSAGE, generateCause());\r\n    assertNotNull(exception);\r\n    assertEquals(EXCEPTION_MESSAGE, exception.getMessage(), WRONG_EXCEPTION_MESSAGE);\r\n    final Throwable cause = exception.getCause();\r\n    assertNotNull(cause);\r\n    assertEquals(CAUSE_MESSAGE, cause.getMessage(), WRONG_CAUSE_MESSAGE);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\exception\\CloneFailedExceptionTest.java",
  "methodName" : "testWithoutCause",
  "sourceCode" : "@Test\r\nvoid testWithoutCause() {\r\n    final Exception exception = new CloneFailedException(EXCEPTION_MESSAGE);\r\n    assertNotNull(exception);\r\n    assertEquals(EXCEPTION_MESSAGE, exception.getMessage(), WRONG_EXCEPTION_MESSAGE);\r\n    final Throwable cause = exception.getCause();\r\n    assertNull(cause);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\exception\\CloneFailedExceptionTest.java",
  "methodName" : "testWithoutMessage",
  "sourceCode" : "@Test\r\nvoid testWithoutMessage() {\r\n    final Exception exception = new CloneFailedException(generateCause());\r\n    assertNotNull(exception);\r\n    assertNotNull(exception.getMessage());\r\n    final Throwable cause = exception.getCause();\r\n    assertNotNull(cause);\r\n    assertEquals(CAUSE_MESSAGE, cause.getMessage(), WRONG_CAUSE_MESSAGE);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\exception\\ContextedExceptionTest.java",
  "methodName" : "testContextedException",
  "sourceCode" : "@Test\r\nvoid testContextedException() {\r\n    exceptionContext = new ContextedException();\r\n    final String message = exceptionContext.getMessage();\r\n    final String trace = ExceptionUtils.getStackTrace(exceptionContext);\r\n    assertTrue(trace.contains(\"ContextedException\"));\r\n    assertTrue(StringUtils.isEmpty(message));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\exception\\ContextedExceptionTest.java",
  "methodName" : "testContextedExceptionString",
  "sourceCode" : "@Test\r\nvoid testContextedExceptionString() {\r\n    exceptionContext = new ContextedException(TEST_MESSAGE);\r\n    assertEquals(TEST_MESSAGE, exceptionContext.getMessage());\r\n    final String trace = ExceptionUtils.getStackTrace(exceptionContext);\r\n    assertTrue(trace.contains(TEST_MESSAGE));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\exception\\ContextedExceptionTest.java",
  "methodName" : "testContextedExceptionStringThrowable",
  "sourceCode" : "@Test\r\nvoid testContextedExceptionStringThrowable() {\r\n    exceptionContext = new ContextedException(TEST_MESSAGE_2, new Exception(TEST_MESSAGE));\r\n    final String message = exceptionContext.getMessage();\r\n    final String trace = ExceptionUtils.getStackTrace(exceptionContext);\r\n    assertTrue(trace.contains(\"ContextedException\"));\r\n    assertTrue(trace.contains(TEST_MESSAGE));\r\n    assertTrue(trace.contains(TEST_MESSAGE_2));\r\n    assertTrue(message.contains(TEST_MESSAGE_2));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\exception\\ContextedExceptionTest.java",
  "methodName" : "testContextedExceptionStringThrowableContext",
  "sourceCode" : "@Test\r\nvoid testContextedExceptionStringThrowableContext() {\r\n    exceptionContext = new ContextedException(TEST_MESSAGE_2, new Exception(TEST_MESSAGE), new DefaultExceptionContext());\r\n    final String message = exceptionContext.getMessage();\r\n    final String trace = ExceptionUtils.getStackTrace(exceptionContext);\r\n    assertTrue(trace.contains(\"ContextedException\"));\r\n    assertTrue(trace.contains(TEST_MESSAGE));\r\n    assertTrue(trace.contains(TEST_MESSAGE_2));\r\n    assertTrue(message.contains(TEST_MESSAGE_2));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\exception\\ContextedExceptionTest.java",
  "methodName" : "testContextedExceptionThrowable",
  "sourceCode" : "@Test\r\nvoid testContextedExceptionThrowable() {\r\n    exceptionContext = new ContextedException(new Exception(TEST_MESSAGE));\r\n    final String message = exceptionContext.getMessage();\r\n    final String trace = ExceptionUtils.getStackTrace(exceptionContext);\r\n    assertTrue(trace.contains(\"ContextedException\"));\r\n    assertTrue(trace.contains(TEST_MESSAGE));\r\n    assertTrue(message.contains(TEST_MESSAGE));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\exception\\ContextedExceptionTest.java",
  "methodName" : "testNullException",
  "sourceCode" : "@Test\r\nvoid testNullException() {\r\n    assertEquals(\"\", ExceptionUtils.getStackTrace(null), \"Empty response.\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\exception\\ContextedExceptionTest.java",
  "methodName" : "testNullExceptionPassing",
  "sourceCode" : "@Test\r\nvoid testNullExceptionPassing() {\r\n    exceptionContext = new ContextedException(TEST_MESSAGE_2, new Exception(TEST_MESSAGE), null).addContextValue(\"test1\", null).addContextValue(\"test2\", \"some value\").addContextValue(\"test Date\", new Date()).addContextValue(\"test Nbr\", Integer.valueOf(5)).addContextValue(\"test Poorly written obj\", new ObjectWithFaultyToString());\r\n    final String message = exceptionContext.getMessage();\r\n    assertNotNull(message);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\exception\\ContextedExceptionTest.java",
  "methodName" : "testRawMessage",
  "sourceCode" : "@Test\r\nvoid testRawMessage() {\r\n    assertEquals(Exception.class.getName() + \": \" + TEST_MESSAGE, exceptionContext.getRawMessage());\r\n    exceptionContext = new ContextedException(TEST_MESSAGE_2, new Exception(TEST_MESSAGE), new DefaultExceptionContext());\r\n    assertEquals(TEST_MESSAGE_2, exceptionContext.getRawMessage());\r\n    exceptionContext = new ContextedException(null, new Exception(TEST_MESSAGE), new DefaultExceptionContext());\r\n    assertNull(exceptionContext.getRawMessage());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\exception\\ContextedRuntimeExceptionTest.java",
  "methodName" : "testContextedException",
  "sourceCode" : "@Test\r\nvoid testContextedException() {\r\n    exceptionContext = new ContextedRuntimeException();\r\n    final String message = exceptionContext.getMessage();\r\n    final String trace = ExceptionUtils.getStackTrace(exceptionContext);\r\n    assertTrue(trace.contains(\"ContextedException\"));\r\n    assertTrue(StringUtils.isEmpty(message));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\exception\\ContextedRuntimeExceptionTest.java",
  "methodName" : "testContextedExceptionString",
  "sourceCode" : "@Test\r\nvoid testContextedExceptionString() {\r\n    exceptionContext = new ContextedRuntimeException(TEST_MESSAGE);\r\n    assertEquals(TEST_MESSAGE, exceptionContext.getMessage());\r\n    final String trace = ExceptionUtils.getStackTrace(exceptionContext);\r\n    assertTrue(trace.contains(TEST_MESSAGE));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\exception\\ContextedRuntimeExceptionTest.java",
  "methodName" : "testContextedExceptionStringThrowable",
  "sourceCode" : "@Test\r\nvoid testContextedExceptionStringThrowable() {\r\n    exceptionContext = new ContextedRuntimeException(TEST_MESSAGE_2, new Exception(TEST_MESSAGE));\r\n    final String message = exceptionContext.getMessage();\r\n    final String trace = ExceptionUtils.getStackTrace(exceptionContext);\r\n    assertTrue(trace.contains(\"ContextedException\"));\r\n    assertTrue(trace.contains(TEST_MESSAGE));\r\n    assertTrue(trace.contains(TEST_MESSAGE_2));\r\n    assertTrue(message.contains(TEST_MESSAGE_2));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\exception\\ContextedRuntimeExceptionTest.java",
  "methodName" : "testContextedExceptionStringThrowableContext",
  "sourceCode" : "@Test\r\nvoid testContextedExceptionStringThrowableContext() {\r\n    // Use an anonymous subclass to make sure users can provide custom implementations\r\n    exceptionContext = new ContextedRuntimeException(TEST_MESSAGE_2, new Exception(TEST_MESSAGE), new DefaultExceptionContext() {\r\n\r\n        private static final long serialVersionUID = 1L;\r\n    });\r\n    final String message = exceptionContext.getMessage();\r\n    final String trace = ExceptionUtils.getStackTrace(exceptionContext);\r\n    assertTrue(trace.contains(\"ContextedException\"));\r\n    assertTrue(trace.contains(TEST_MESSAGE));\r\n    assertTrue(trace.contains(TEST_MESSAGE_2));\r\n    assertTrue(message.contains(TEST_MESSAGE_2));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\exception\\ContextedRuntimeExceptionTest.java",
  "methodName" : "testContextedExceptionThrowable",
  "sourceCode" : "@Test\r\nvoid testContextedExceptionThrowable() {\r\n    exceptionContext = new ContextedRuntimeException(new Exception(TEST_MESSAGE));\r\n    final String message = exceptionContext.getMessage();\r\n    final String trace = ExceptionUtils.getStackTrace(exceptionContext);\r\n    assertTrue(trace.contains(\"ContextedException\"));\r\n    assertTrue(trace.contains(TEST_MESSAGE));\r\n    assertTrue(message.contains(TEST_MESSAGE));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\exception\\ContextedRuntimeExceptionTest.java",
  "methodName" : "testNullExceptionPassing",
  "sourceCode" : "@Test\r\nvoid testNullExceptionPassing() {\r\n    exceptionContext = new ContextedRuntimeException(TEST_MESSAGE_2, new Exception(TEST_MESSAGE), null).addContextValue(\"test1\", null).addContextValue(\"test2\", \"some value\").addContextValue(\"test Date\", new Date()).addContextValue(\"test Nbr\", Integer.valueOf(5)).addContextValue(\"test Poorly written obj\", new ObjectWithFaultyToString());\r\n    final String message = exceptionContext.getMessage();\r\n    assertNotNull(message);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\exception\\ContextedRuntimeExceptionTest.java",
  "methodName" : "testRawMessage",
  "sourceCode" : "@Test\r\nvoid testRawMessage() {\r\n    assertEquals(Exception.class.getName() + \": \" + TEST_MESSAGE, exceptionContext.getRawMessage());\r\n    exceptionContext = new ContextedRuntimeException(TEST_MESSAGE_2, new Exception(TEST_MESSAGE), new DefaultExceptionContext());\r\n    assertEquals(TEST_MESSAGE_2, exceptionContext.getRawMessage());\r\n    exceptionContext = new ContextedRuntimeException(null, new Exception(TEST_MESSAGE), new DefaultExceptionContext());\r\n    assertNull(exceptionContext.getRawMessage());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\exception\\DefaultExceptionContextTest.java",
  "methodName" : "testFormattedExceptionMessageExceptionHandling",
  "sourceCode" : "@Test\r\nvoid testFormattedExceptionMessageExceptionHandling() {\r\n    exceptionContext = new DefaultExceptionContext();\r\n    final String label1 = \"throws 1\";\r\n    final String label2 = \"throws 2\";\r\n    exceptionContext.addContextValue(label1, new ObjectToStringRuntimeException(label1));\r\n    exceptionContext.addContextValue(label2, new ObjectToStringRuntimeException(label2));\r\n    final String message = exceptionContext.getFormattedExceptionMessage(TEST_MESSAGE);\r\n    assertTrue(message.startsWith(TEST_MESSAGE));\r\n    assertTrue(message.contains(label1));\r\n    assertTrue(message.contains(label2));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\exception\\DefaultExceptionContextTest.java",
  "methodName" : "testFormattedExceptionMessageNull",
  "sourceCode" : "@Test\r\nvoid testFormattedExceptionMessageNull() {\r\n    exceptionContext = new DefaultExceptionContext();\r\n    assertEquals(\"\", exceptionContext.getFormattedExceptionMessage(null));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\exception\\DefaultExceptionContextTest.java",
  "methodName" : "testFormattedExceptionMessageNullValue",
  "sourceCode" : "@Test\r\nvoid testFormattedExceptionMessageNullValue() {\r\n    exceptionContext = new DefaultExceptionContext();\r\n    final String label1 = \"throws 1\";\r\n    final String label2 = \"throws 2\";\r\n    exceptionContext.addContextValue(label1, null);\r\n    exceptionContext.addContextValue(label2, null);\r\n    final String message = exceptionContext.getFormattedExceptionMessage(TEST_MESSAGE);\r\n    assertTrue(message.startsWith(TEST_MESSAGE));\r\n    assertTrue(message.contains(label1));\r\n    assertTrue(message.contains(label2));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\exception\\ExceptionUtilsTest.java",
  "methodName" : "test_getMessage_Throwable",
  "sourceCode" : "@Test\r\nvoid test_getMessage_Throwable() {\r\n    Throwable th = null;\r\n    assertEquals(\"\", ExceptionUtils.getMessage(th));\r\n    th = new IllegalArgumentException(\"Base\");\r\n    assertEquals(\"IllegalArgumentException: Base\", ExceptionUtils.getMessage(th));\r\n    th = new ExceptionWithCause(\"Wrapper\", th);\r\n    assertEquals(\"ExceptionUtilsTest.ExceptionWithCause: Wrapper\", ExceptionUtils.getMessage(th));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\exception\\ExceptionUtilsTest.java",
  "methodName" : "test_getRootCauseMessage_Throwable",
  "sourceCode" : "@Test\r\nvoid test_getRootCauseMessage_Throwable() {\r\n    Throwable th = null;\r\n    assertEquals(\"\", ExceptionUtils.getRootCauseMessage(th));\r\n    th = new IllegalArgumentException(\"Base\");\r\n    assertEquals(\"IllegalArgumentException: Base\", ExceptionUtils.getRootCauseMessage(th));\r\n    th = new ExceptionWithCause(\"Wrapper\", th);\r\n    assertEquals(\"IllegalArgumentException: Base\", ExceptionUtils.getRootCauseMessage(th));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\exception\\ExceptionUtilsTest.java",
  "methodName" : "testAsRuntimeException",
  "sourceCode" : "@Test\r\nvoid testAsRuntimeException() {\r\n    final Exception expected = new InterruptedException();\r\n    assertSame(expected, assertThrows(Exception.class, () -> ExceptionUtils.asRuntimeException(expected)));\r\n    assertNotSame(expected, assertThrows(Exception.class, () -> ExceptionUtils.asRuntimeException(new InterruptedException())));\r\n    // API return typed to compile to Object\r\n    assertThrows(expected.getClass(), () -> {\r\n        @SuppressWarnings(\"unused\")\r\n        final Object retVal = ExceptionUtils.asRuntimeException(expected);\r\n    });\r\n    // API return typed to compile to RuntimeException\r\n    assertThrows(expected.getClass(), () -> {\r\n        @SuppressWarnings(\"unused\")\r\n        final RuntimeException retVal = ExceptionUtils.asRuntimeException(expected);\r\n    });\r\n    // API return typed to compile to RuntimeException subclass\r\n    assertThrows(expected.getClass(), () -> {\r\n        @SuppressWarnings(\"unused\")\r\n        final IllegalStateException retVal = ExceptionUtils.asRuntimeException(expected);\r\n    });\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\exception\\ExceptionUtilsTest.java",
  "methodName" : "testCatchTechniques",
  "sourceCode" : "@Test\r\nvoid testCatchTechniques() {\r\n    IOException ioe = assertThrows(IOException.class, ExceptionUtilsTest::throwsCheckedException);\r\n    assertEquals(1, ExceptionUtils.getThrowableCount(ioe));\r\n    ioe = assertThrows(IOException.class, ExceptionUtilsTest::redeclareCheckedException);\r\n    assertEquals(1, ExceptionUtils.getThrowableCount(ioe));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\exception\\ExceptionUtilsTest.java",
  "methodName" : "testConstructor",
  "sourceCode" : "@Test\r\nvoid testConstructor() {\r\n    assertNotNull(new ExceptionUtils());\r\n    final Constructor<?>[] cons = ExceptionUtils.class.getDeclaredConstructors();\r\n    assertEquals(1, cons.length);\r\n    assertTrue(Modifier.isPublic(cons[0].getModifiers()));\r\n    assertTrue(Modifier.isPublic(ExceptionUtils.class.getModifiers()));\r\n    assertFalse(Modifier.isFinal(ExceptionUtils.class.getModifiers()));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\exception\\ExceptionUtilsTest.java",
  "methodName" : "testForEach_jdkNoCause",
  "sourceCode" : "@Test\r\nvoid testForEach_jdkNoCause() {\r\n    final List<Throwable> throwables = new ArrayList<>();\r\n    ExceptionUtils.forEach(jdkNoCause, throwables::add);\r\n    assertEquals(1, throwables.size());\r\n    assertSame(jdkNoCause, throwables.get(0));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\exception\\ExceptionUtilsTest.java",
  "methodName" : "testForEach_nested",
  "sourceCode" : "@Test\r\nvoid testForEach_nested() {\r\n    final List<Throwable> throwables = new ArrayList<>();\r\n    ExceptionUtils.forEach(nested, throwables::add);\r\n    assertEquals(2, throwables.size());\r\n    assertSame(nested, throwables.get(0));\r\n    assertSame(withoutCause, throwables.get(1));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\exception\\ExceptionUtilsTest.java",
  "methodName" : "testForEach_null",
  "sourceCode" : "@Test\r\nvoid testForEach_null() {\r\n    final List<Throwable> throwables = new ArrayList<>();\r\n    ExceptionUtils.forEach(null, throwables::add);\r\n    assertEquals(0, throwables.size());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\exception\\ExceptionUtilsTest.java",
  "methodName" : "testForEach_recursiveCause",
  "sourceCode" : "@Test\r\nvoid testForEach_recursiveCause() {\r\n    final List<Throwable> throwables = new ArrayList<>();\r\n    ExceptionUtils.forEach(cyclicCause, throwables::add);\r\n    assertEquals(3, throwables.size());\r\n    assertSame(cyclicCause, throwables.get(0));\r\n    assertSame(cyclicCause.getCause(), throwables.get(1));\r\n    assertSame(cyclicCause.getCause().getCause(), throwables.get(2));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\exception\\ExceptionUtilsTest.java",
  "methodName" : "testForEach_withCause",
  "sourceCode" : "@Test\r\nvoid testForEach_withCause() {\r\n    final List<Throwable> throwables = new ArrayList<>();\r\n    ExceptionUtils.forEach(withCause, throwables::add);\r\n    assertEquals(3, throwables.size());\r\n    assertSame(withCause, throwables.get(0));\r\n    assertSame(nested, throwables.get(1));\r\n    assertSame(withoutCause, throwables.get(2));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\exception\\ExceptionUtilsTest.java",
  "methodName" : "testForEach_withoutCause",
  "sourceCode" : "@Test\r\nvoid testForEach_withoutCause() {\r\n    final List<Throwable> throwables = new ArrayList<>();\r\n    ExceptionUtils.forEach(withoutCause, throwables::add);\r\n    assertEquals(1, throwables.size());\r\n    assertSame(withoutCause, throwables.get(0));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\exception\\ExceptionUtilsTest.java",
  "methodName" : "testGetCause_Throwable",
  "sourceCode" : "// Specifically tests the deprecated methods\r\n@SuppressWarnings(\"deprecation\")\r\n@Test\r\nvoid testGetCause_Throwable() {\r\n    assertSame(null, ExceptionUtils.getCause(null));\r\n    assertSame(null, ExceptionUtils.getCause(withoutCause));\r\n    assertSame(withoutCause, ExceptionUtils.getCause(nested));\r\n    assertSame(nested, ExceptionUtils.getCause(withCause));\r\n    assertSame(null, ExceptionUtils.getCause(jdkNoCause));\r\n    assertSame(cyclicCause.getCause(), ExceptionUtils.getCause(cyclicCause));\r\n    assertSame(cyclicCause.getCause().getCause(), ExceptionUtils.getCause(cyclicCause.getCause()));\r\n    assertSame(cyclicCause.getCause(), ExceptionUtils.getCause(cyclicCause.getCause().getCause()));\r\n    assertSame(withoutCause, ExceptionUtils.getCause(notVisibleException));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\exception\\ExceptionUtilsTest.java",
  "methodName" : "testGetCause_ThrowableArray",
  "sourceCode" : "// Specifically tests the deprecated methods\r\n@SuppressWarnings(\"deprecation\")\r\n@Test\r\nvoid testGetCause_ThrowableArray() {\r\n    assertSame(null, ExceptionUtils.getCause(null, null));\r\n    assertSame(null, ExceptionUtils.getCause(null, new String[0]));\r\n    // not known type, so match on supplied method names\r\n    // default names\r\n    assertSame(nested, ExceptionUtils.getCause(withCause, null));\r\n    assertSame(null, ExceptionUtils.getCause(withCause, new String[0]));\r\n    assertSame(null, ExceptionUtils.getCause(withCause, new String[] { null }));\r\n    assertSame(nested, ExceptionUtils.getCause(withCause, new String[] { \"getCause\" }));\r\n    // not known type, so match on supplied method names\r\n    assertSame(null, ExceptionUtils.getCause(withoutCause, null));\r\n    assertSame(null, ExceptionUtils.getCause(withoutCause, new String[0]));\r\n    assertSame(null, ExceptionUtils.getCause(withoutCause, new String[] { null }));\r\n    assertSame(null, ExceptionUtils.getCause(withoutCause, new String[] { \"getCause\" }));\r\n    assertSame(null, ExceptionUtils.getCause(withoutCause, new String[] { \"getTargetException\" }));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\exception\\ExceptionUtilsTest.java",
  "methodName" : "testGetRootCause_Throwable",
  "sourceCode" : "@Test\r\nvoid testGetRootCause_Throwable() {\r\n    assertSame(null, ExceptionUtils.getRootCause(null));\r\n    assertSame(withoutCause, ExceptionUtils.getRootCause(withoutCause));\r\n    assertSame(withoutCause, ExceptionUtils.getRootCause(nested));\r\n    assertSame(withoutCause, ExceptionUtils.getRootCause(withCause));\r\n    assertSame(jdkNoCause, ExceptionUtils.getRootCause(jdkNoCause));\r\n    assertSame(cyclicCause.getCause().getCause(), ExceptionUtils.getRootCause(cyclicCause));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\exception\\ExceptionUtilsTest.java",
  "methodName" : "testGetRootCauseStackTrace_Throwable",
  "sourceCode" : "@Test\r\nvoid testGetRootCauseStackTrace_Throwable() {\r\n    assertEquals(0, ExceptionUtils.getRootCauseStackTrace(null).length);\r\n    final Throwable cause = createExceptionWithCause();\r\n    String[] stackTrace = ExceptionUtils.getRootCauseStackTrace(cause);\r\n    boolean match = false;\r\n    for (final String element : stackTrace) {\r\n        if (element.startsWith(ExceptionUtils.WRAPPED_MARKER)) {\r\n            match = true;\r\n            break;\r\n        }\r\n    }\r\n    assertTrue(match);\r\n    stackTrace = ExceptionUtils.getRootCauseStackTrace(withoutCause);\r\n    match = false;\r\n    for (final String element : stackTrace) {\r\n        if (element.startsWith(ExceptionUtils.WRAPPED_MARKER)) {\r\n            match = true;\r\n            break;\r\n        }\r\n    }\r\n    assertFalse(match);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\exception\\ExceptionUtilsTest.java",
  "methodName" : "testGetRootCauseStackTraceList_Throwable",
  "sourceCode" : "@Test\r\nvoid testGetRootCauseStackTraceList_Throwable() {\r\n    assertEquals(0, ExceptionUtils.getRootCauseStackTraceList(null).size());\r\n    final Throwable cause = createExceptionWithCause();\r\n    List<String> stackTrace = ExceptionUtils.getRootCauseStackTraceList(cause);\r\n    boolean match = false;\r\n    for (final String element : stackTrace) {\r\n        if (element.startsWith(ExceptionUtils.WRAPPED_MARKER)) {\r\n            match = true;\r\n            break;\r\n        }\r\n    }\r\n    assertTrue(match);\r\n    stackTrace = ExceptionUtils.getRootCauseStackTraceList(withoutCause);\r\n    match = false;\r\n    for (final String element : stackTrace) {\r\n        if (element.startsWith(ExceptionUtils.WRAPPED_MARKER)) {\r\n            match = true;\r\n            break;\r\n        }\r\n    }\r\n    assertFalse(match);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\exception\\ExceptionUtilsTest.java",
  "methodName" : "testgetStackFramesHappyPath",
  "sourceCode" : "@Test\r\n@DisplayName(\"getStackFrames returns empty string array when the argument is null\")\r\nvoid testgetStackFramesHappyPath() {\r\n    final String[] actual = ExceptionUtils.getStackFrames(new Throwable() {\r\n\r\n        private static final long serialVersionUID = 1L;\r\n\r\n        // provide static stack trace to make test stable\r\n        @Override\r\n        public void printStackTrace(final PrintWriter s) {\r\n            s.write(\"org.apache.commons.lang3.exception.ExceptionUtilsTest$1\\n\" + \"\\tat org.apache.commons.lang3.exception.ExceptionUtilsTest.testgetStackFramesGappyPath(ExceptionUtilsTest.java:706)\\n\" + \"\\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\\n\" + \"\\tat com.intellij.rt.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:230)\\n\" + \"\\tat com.intellij.rt.junit.JUnitStarter.main(JUnitStarter.java:58)\\n\");\r\n        }\r\n    });\r\n    assertArrayEquals(new String[] { \"org.apache.commons.lang3.exception.ExceptionUtilsTest$1\", \"\\tat org.apache.commons.lang3.exception.ExceptionUtilsTest.testgetStackFramesGappyPath(ExceptionUtilsTest.java:706)\", \"\\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\", \"\\tat com.intellij.rt.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:230)\", \"\\tat com.intellij.rt.junit.JUnitStarter.main(JUnitStarter.java:58)\" }, actual);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\exception\\ExceptionUtilsTest.java",
  "methodName" : "testgetStackFramesNullArg",
  "sourceCode" : "@Test\r\n@DisplayName(\"getStackFrames returns the string array of the stack frames when there is a real exception\")\r\nvoid testgetStackFramesNullArg() {\r\n    final String[] actual = ExceptionUtils.getStackFrames((Throwable) null);\r\n    assertEquals(0, actual.length);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\exception\\ExceptionUtilsTest.java",
  "methodName" : "testGetThrowableCount_Throwable",
  "sourceCode" : "@Test\r\nvoid testGetThrowableCount_Throwable() {\r\n    assertEquals(0, ExceptionUtils.getThrowableCount(null));\r\n    assertEquals(1, ExceptionUtils.getThrowableCount(withoutCause));\r\n    assertEquals(2, ExceptionUtils.getThrowableCount(nested));\r\n    assertEquals(3, ExceptionUtils.getThrowableCount(withCause));\r\n    assertEquals(1, ExceptionUtils.getThrowableCount(jdkNoCause));\r\n    assertEquals(3, ExceptionUtils.getThrowableCount(cyclicCause));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\exception\\ExceptionUtilsTest.java",
  "methodName" : "testGetThrowableList_Throwable_jdkNoCause",
  "sourceCode" : "@Test\r\nvoid testGetThrowableList_Throwable_jdkNoCause() {\r\n    final List<?> throwables = ExceptionUtils.getThrowableList(jdkNoCause);\r\n    assertEquals(1, throwables.size());\r\n    assertSame(jdkNoCause, throwables.get(0));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\exception\\ExceptionUtilsTest.java",
  "methodName" : "testGetThrowableList_Throwable_nested",
  "sourceCode" : "@Test\r\nvoid testGetThrowableList_Throwable_nested() {\r\n    final List<?> throwables = ExceptionUtils.getThrowableList(nested);\r\n    assertEquals(2, throwables.size());\r\n    assertSame(nested, throwables.get(0));\r\n    assertSame(withoutCause, throwables.get(1));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\exception\\ExceptionUtilsTest.java",
  "methodName" : "testGetThrowableList_Throwable_null",
  "sourceCode" : "@Test\r\nvoid testGetThrowableList_Throwable_null() {\r\n    final List<?> throwables = ExceptionUtils.getThrowableList(null);\r\n    assertEquals(0, throwables.size());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\exception\\ExceptionUtilsTest.java",
  "methodName" : "testGetThrowableList_Throwable_recursiveCause",
  "sourceCode" : "@Test\r\nvoid testGetThrowableList_Throwable_recursiveCause() {\r\n    final List<?> throwables = ExceptionUtils.getThrowableList(cyclicCause);\r\n    assertEquals(3, throwables.size());\r\n    assertSame(cyclicCause, throwables.get(0));\r\n    assertSame(cyclicCause.getCause(), throwables.get(1));\r\n    assertSame(cyclicCause.getCause().getCause(), throwables.get(2));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\exception\\ExceptionUtilsTest.java",
  "methodName" : "testGetThrowableList_Throwable_withCause",
  "sourceCode" : "@Test\r\nvoid testGetThrowableList_Throwable_withCause() {\r\n    final List<?> throwables = ExceptionUtils.getThrowableList(withCause);\r\n    assertEquals(3, throwables.size());\r\n    assertSame(withCause, throwables.get(0));\r\n    assertSame(nested, throwables.get(1));\r\n    assertSame(withoutCause, throwables.get(2));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\exception\\ExceptionUtilsTest.java",
  "methodName" : "testGetThrowableList_Throwable_withoutCause",
  "sourceCode" : "@Test\r\nvoid testGetThrowableList_Throwable_withoutCause() {\r\n    final List<?> throwables = ExceptionUtils.getThrowableList(withoutCause);\r\n    assertEquals(1, throwables.size());\r\n    assertSame(withoutCause, throwables.get(0));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\exception\\ExceptionUtilsTest.java",
  "methodName" : "testGetThrowables_Throwable_jdkNoCause",
  "sourceCode" : "@Test\r\nvoid testGetThrowables_Throwable_jdkNoCause() {\r\n    final Throwable[] throwables = ExceptionUtils.getThrowables(jdkNoCause);\r\n    assertEquals(1, throwables.length);\r\n    assertSame(jdkNoCause, throwables[0]);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\exception\\ExceptionUtilsTest.java",
  "methodName" : "testGetThrowables_Throwable_nested",
  "sourceCode" : "@Test\r\nvoid testGetThrowables_Throwable_nested() {\r\n    final Throwable[] throwables = ExceptionUtils.getThrowables(nested);\r\n    assertEquals(2, throwables.length);\r\n    assertSame(nested, throwables[0]);\r\n    assertSame(withoutCause, throwables[1]);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\exception\\ExceptionUtilsTest.java",
  "methodName" : "testGetThrowables_Throwable_null",
  "sourceCode" : "@Test\r\nvoid testGetThrowables_Throwable_null() {\r\n    assertEquals(0, ExceptionUtils.getThrowables(null).length);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\exception\\ExceptionUtilsTest.java",
  "methodName" : "testGetThrowables_Throwable_recursiveCause",
  "sourceCode" : "@Test\r\nvoid testGetThrowables_Throwable_recursiveCause() {\r\n    final Throwable[] throwables = ExceptionUtils.getThrowables(cyclicCause);\r\n    assertEquals(3, throwables.length);\r\n    assertSame(cyclicCause, throwables[0]);\r\n    assertSame(cyclicCause.getCause(), throwables[1]);\r\n    assertSame(cyclicCause.getCause().getCause(), throwables[2]);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\exception\\ExceptionUtilsTest.java",
  "methodName" : "testGetThrowables_Throwable_withCause",
  "sourceCode" : "@Test\r\nvoid testGetThrowables_Throwable_withCause() {\r\n    final Throwable[] throwables = ExceptionUtils.getThrowables(withCause);\r\n    assertEquals(3, throwables.length);\r\n    assertSame(withCause, throwables[0]);\r\n    assertSame(nested, throwables[1]);\r\n    assertSame(withoutCause, throwables[2]);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\exception\\ExceptionUtilsTest.java",
  "methodName" : "testGetThrowables_Throwable_withoutCause",
  "sourceCode" : "@Test\r\nvoid testGetThrowables_Throwable_withoutCause() {\r\n    final Throwable[] throwables = ExceptionUtils.getThrowables(withoutCause);\r\n    assertEquals(1, throwables.length);\r\n    assertSame(withoutCause, throwables[0]);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\exception\\ExceptionUtilsTest.java",
  "methodName" : "testIndexOf_ThrowableClass",
  "sourceCode" : "@Test\r\nvoid testIndexOf_ThrowableClass() {\r\n    assertEquals(-1, ExceptionUtils.indexOfThrowable(null, null));\r\n    assertEquals(-1, ExceptionUtils.indexOfThrowable(null, NestableException.class));\r\n    assertEquals(-1, ExceptionUtils.indexOfThrowable(withoutCause, null));\r\n    assertEquals(-1, ExceptionUtils.indexOfThrowable(withoutCause, ExceptionWithCause.class));\r\n    assertEquals(-1, ExceptionUtils.indexOfThrowable(withoutCause, NestableException.class));\r\n    assertEquals(0, ExceptionUtils.indexOfThrowable(withoutCause, ExceptionWithoutCause.class));\r\n    assertEquals(-1, ExceptionUtils.indexOfThrowable(nested, null));\r\n    assertEquals(-1, ExceptionUtils.indexOfThrowable(nested, ExceptionWithCause.class));\r\n    assertEquals(0, ExceptionUtils.indexOfThrowable(nested, NestableException.class));\r\n    assertEquals(1, ExceptionUtils.indexOfThrowable(nested, ExceptionWithoutCause.class));\r\n    assertEquals(-1, ExceptionUtils.indexOfThrowable(withCause, null));\r\n    assertEquals(0, ExceptionUtils.indexOfThrowable(withCause, ExceptionWithCause.class));\r\n    assertEquals(1, ExceptionUtils.indexOfThrowable(withCause, NestableException.class));\r\n    assertEquals(2, ExceptionUtils.indexOfThrowable(withCause, ExceptionWithoutCause.class));\r\n    assertEquals(-1, ExceptionUtils.indexOfThrowable(withCause, Exception.class));\r\n    assertEquals(-1, ExceptionUtils.indexOfThrowable(withCause, Throwable.class));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\exception\\ExceptionUtilsTest.java",
  "methodName" : "testIndexOf_ThrowableClassInt",
  "sourceCode" : "@Test\r\nvoid testIndexOf_ThrowableClassInt() {\r\n    assertEquals(-1, ExceptionUtils.indexOfThrowable(null, null, 0));\r\n    assertEquals(-1, ExceptionUtils.indexOfThrowable(null, NestableException.class, 0));\r\n    assertEquals(-1, ExceptionUtils.indexOfThrowable(withoutCause, null));\r\n    assertEquals(-1, ExceptionUtils.indexOfThrowable(withoutCause, ExceptionWithCause.class, 0));\r\n    assertEquals(-1, ExceptionUtils.indexOfThrowable(withoutCause, NestableException.class, 0));\r\n    assertEquals(0, ExceptionUtils.indexOfThrowable(withoutCause, ExceptionWithoutCause.class, 0));\r\n    assertEquals(-1, ExceptionUtils.indexOfThrowable(nested, null, 0));\r\n    assertEquals(-1, ExceptionUtils.indexOfThrowable(nested, ExceptionWithCause.class, 0));\r\n    assertEquals(0, ExceptionUtils.indexOfThrowable(nested, NestableException.class, 0));\r\n    assertEquals(1, ExceptionUtils.indexOfThrowable(nested, ExceptionWithoutCause.class, 0));\r\n    assertEquals(-1, ExceptionUtils.indexOfThrowable(withCause, null));\r\n    assertEquals(0, ExceptionUtils.indexOfThrowable(withCause, ExceptionWithCause.class, 0));\r\n    assertEquals(1, ExceptionUtils.indexOfThrowable(withCause, NestableException.class, 0));\r\n    assertEquals(2, ExceptionUtils.indexOfThrowable(withCause, ExceptionWithoutCause.class, 0));\r\n    assertEquals(0, ExceptionUtils.indexOfThrowable(withCause, ExceptionWithCause.class, -1));\r\n    assertEquals(0, ExceptionUtils.indexOfThrowable(withCause, ExceptionWithCause.class, 0));\r\n    assertEquals(-1, ExceptionUtils.indexOfThrowable(withCause, ExceptionWithCause.class, 1));\r\n    assertEquals(-1, ExceptionUtils.indexOfThrowable(withCause, ExceptionWithCause.class, 9));\r\n    assertEquals(-1, ExceptionUtils.indexOfThrowable(withCause, Exception.class, 0));\r\n    assertEquals(-1, ExceptionUtils.indexOfThrowable(withCause, Throwable.class, 0));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\exception\\ExceptionUtilsTest.java",
  "methodName" : "testIndexOfType_ThrowableClass",
  "sourceCode" : "@Test\r\nvoid testIndexOfType_ThrowableClass() {\r\n    assertEquals(-1, ExceptionUtils.indexOfType(null, null));\r\n    assertEquals(-1, ExceptionUtils.indexOfType(null, NestableException.class));\r\n    assertEquals(-1, ExceptionUtils.indexOfType(withoutCause, null));\r\n    assertEquals(-1, ExceptionUtils.indexOfType(withoutCause, ExceptionWithCause.class));\r\n    assertEquals(-1, ExceptionUtils.indexOfType(withoutCause, NestableException.class));\r\n    assertEquals(0, ExceptionUtils.indexOfType(withoutCause, ExceptionWithoutCause.class));\r\n    assertEquals(-1, ExceptionUtils.indexOfType(nested, null));\r\n    assertEquals(-1, ExceptionUtils.indexOfType(nested, ExceptionWithCause.class));\r\n    assertEquals(0, ExceptionUtils.indexOfType(nested, NestableException.class));\r\n    assertEquals(1, ExceptionUtils.indexOfType(nested, ExceptionWithoutCause.class));\r\n    assertEquals(-1, ExceptionUtils.indexOfType(withCause, null));\r\n    assertEquals(0, ExceptionUtils.indexOfType(withCause, ExceptionWithCause.class));\r\n    assertEquals(1, ExceptionUtils.indexOfType(withCause, NestableException.class));\r\n    assertEquals(2, ExceptionUtils.indexOfType(withCause, ExceptionWithoutCause.class));\r\n    assertEquals(0, ExceptionUtils.indexOfType(withCause, Exception.class));\r\n    assertEquals(0, ExceptionUtils.indexOfType(withCause, Throwable.class));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\exception\\ExceptionUtilsTest.java",
  "methodName" : "testIndexOfType_ThrowableClassInt",
  "sourceCode" : "@Test\r\nvoid testIndexOfType_ThrowableClassInt() {\r\n    assertEquals(-1, ExceptionUtils.indexOfType(null, null, 0));\r\n    assertEquals(-1, ExceptionUtils.indexOfType(null, NestableException.class, 0));\r\n    assertEquals(-1, ExceptionUtils.indexOfType(withoutCause, null));\r\n    assertEquals(-1, ExceptionUtils.indexOfType(withoutCause, ExceptionWithCause.class, 0));\r\n    assertEquals(-1, ExceptionUtils.indexOfType(withoutCause, NestableException.class, 0));\r\n    assertEquals(0, ExceptionUtils.indexOfType(withoutCause, ExceptionWithoutCause.class, 0));\r\n    assertEquals(-1, ExceptionUtils.indexOfType(nested, null, 0));\r\n    assertEquals(-1, ExceptionUtils.indexOfType(nested, ExceptionWithCause.class, 0));\r\n    assertEquals(0, ExceptionUtils.indexOfType(nested, NestableException.class, 0));\r\n    assertEquals(1, ExceptionUtils.indexOfType(nested, ExceptionWithoutCause.class, 0));\r\n    assertEquals(-1, ExceptionUtils.indexOfType(withCause, null));\r\n    assertEquals(0, ExceptionUtils.indexOfType(withCause, ExceptionWithCause.class, 0));\r\n    assertEquals(1, ExceptionUtils.indexOfType(withCause, NestableException.class, 0));\r\n    assertEquals(2, ExceptionUtils.indexOfType(withCause, ExceptionWithoutCause.class, 0));\r\n    assertEquals(0, ExceptionUtils.indexOfType(withCause, ExceptionWithCause.class, -1));\r\n    assertEquals(0, ExceptionUtils.indexOfType(withCause, ExceptionWithCause.class, 0));\r\n    assertEquals(-1, ExceptionUtils.indexOfType(withCause, ExceptionWithCause.class, 1));\r\n    assertEquals(-1, ExceptionUtils.indexOfType(withCause, ExceptionWithCause.class, 9));\r\n    assertEquals(0, ExceptionUtils.indexOfType(withCause, Exception.class, 0));\r\n    assertEquals(0, ExceptionUtils.indexOfType(withCause, Throwable.class, 0));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\exception\\ExceptionUtilsTest.java",
  "methodName" : "testIsChecked_checked",
  "sourceCode" : "@Test\r\nvoid testIsChecked_checked() {\r\n    assertTrue(ExceptionUtils.isChecked(new IOException()));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\exception\\ExceptionUtilsTest.java",
  "methodName" : "testIsChecked_error",
  "sourceCode" : "@Test\r\nvoid testIsChecked_error() {\r\n    assertFalse(ExceptionUtils.isChecked(new StackOverflowError()));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\exception\\ExceptionUtilsTest.java",
  "methodName" : "testIsChecked_null",
  "sourceCode" : "@Test\r\nvoid testIsChecked_null() {\r\n    assertFalse(ExceptionUtils.isChecked(null));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\exception\\ExceptionUtilsTest.java",
  "methodName" : "testIsChecked_unchecked",
  "sourceCode" : "@Test\r\nvoid testIsChecked_unchecked() {\r\n    assertFalse(ExceptionUtils.isChecked(new IllegalArgumentException()));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\exception\\ExceptionUtilsTest.java",
  "methodName" : "testIsCheckedCustomThrowable",
  "sourceCode" : "@Test\r\nvoid testIsCheckedCustomThrowable() {\r\n    assertTrue(ExceptionUtils.isChecked(new TestThrowable()));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\exception\\ExceptionUtilsTest.java",
  "methodName" : "testIsUnchecked_checked",
  "sourceCode" : "@Test\r\nvoid testIsUnchecked_checked() {\r\n    assertFalse(ExceptionUtils.isUnchecked(new IOException()));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\exception\\ExceptionUtilsTest.java",
  "methodName" : "testIsUnchecked_error",
  "sourceCode" : "@Test\r\nvoid testIsUnchecked_error() {\r\n    assertTrue(ExceptionUtils.isUnchecked(new StackOverflowError()));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\exception\\ExceptionUtilsTest.java",
  "methodName" : "testIsUnchecked_null",
  "sourceCode" : "@Test\r\nvoid testIsUnchecked_null() {\r\n    assertFalse(ExceptionUtils.isUnchecked(null));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\exception\\ExceptionUtilsTest.java",
  "methodName" : "testIsUnchecked_unchecked",
  "sourceCode" : "@Test\r\nvoid testIsUnchecked_unchecked() {\r\n    assertTrue(ExceptionUtils.isUnchecked(new IllegalArgumentException()));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\exception\\ExceptionUtilsTest.java",
  "methodName" : "testIsUnCheckedCustomThrowable",
  "sourceCode" : "@Test\r\nvoid testIsUnCheckedCustomThrowable() {\r\n    assertFalse(ExceptionUtils.isUnchecked(new TestThrowable()));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\exception\\ExceptionUtilsTest.java",
  "methodName" : "testPrintRootCauseStackTrace_Throwable",
  "sourceCode" : "@Test\r\nvoid testPrintRootCauseStackTrace_Throwable() {\r\n    ExceptionUtils.printRootCauseStackTrace(null);\r\n    // could pipe system.err to a known stream, but not much point as\r\n    // internally this method calls stream method anyway\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\exception\\ExceptionUtilsTest.java",
  "methodName" : "testPrintRootCauseStackTrace_ThrowableStream",
  "sourceCode" : "@Test\r\nvoid testPrintRootCauseStackTrace_ThrowableStream() {\r\n    ByteArrayOutputStream out = new ByteArrayOutputStream(1024);\r\n    ExceptionUtils.printRootCauseStackTrace(null, (PrintStream) null);\r\n    ExceptionUtils.printRootCauseStackTrace(null, new PrintStream(out));\r\n    assertEquals(0, out.toString().length());\r\n    assertNullPointerException(() -> ExceptionUtils.printRootCauseStackTrace(withCause, (PrintStream) null));\r\n    out = new ByteArrayOutputStream(1024);\r\n    final Throwable cause = createExceptionWithCause();\r\n    ExceptionUtils.printRootCauseStackTrace(cause, new PrintStream(out));\r\n    String stackTrace = out.toString();\r\n    assertTrue(stackTrace.contains(ExceptionUtils.WRAPPED_MARKER));\r\n    out = new ByteArrayOutputStream(1024);\r\n    ExceptionUtils.printRootCauseStackTrace(withoutCause, new PrintStream(out));\r\n    stackTrace = out.toString();\r\n    assertFalse(stackTrace.contains(ExceptionUtils.WRAPPED_MARKER));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\exception\\ExceptionUtilsTest.java",
  "methodName" : "testPrintRootCauseStackTrace_ThrowableWriter",
  "sourceCode" : "@Test\r\nvoid testPrintRootCauseStackTrace_ThrowableWriter() {\r\n    StringWriter writer = new StringWriter(1024);\r\n    ExceptionUtils.printRootCauseStackTrace(null, (PrintWriter) null);\r\n    ExceptionUtils.printRootCauseStackTrace(null, new PrintWriter(writer));\r\n    assertEquals(0, writer.getBuffer().length());\r\n    assertNullPointerException(() -> ExceptionUtils.printRootCauseStackTrace(withCause, (PrintWriter) null));\r\n    writer = new StringWriter(1024);\r\n    final Throwable cause = createExceptionWithCause();\r\n    ExceptionUtils.printRootCauseStackTrace(cause, new PrintWriter(writer));\r\n    String stackTrace = writer.toString();\r\n    assertTrue(stackTrace.contains(ExceptionUtils.WRAPPED_MARKER));\r\n    writer = new StringWriter(1024);\r\n    ExceptionUtils.printRootCauseStackTrace(withoutCause, new PrintWriter(writer));\r\n    stackTrace = writer.toString();\r\n    assertFalse(stackTrace.contains(ExceptionUtils.WRAPPED_MARKER));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\exception\\ExceptionUtilsTest.java",
  "methodName" : "testRemoveCommonFrames_ListList",
  "sourceCode" : "@Test\r\nvoid testRemoveCommonFrames_ListList() {\r\n    assertNullPointerException(() -> ExceptionUtils.removeCommonFrames(null, null));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\exception\\ExceptionUtilsTest.java",
  "methodName" : "testRethrow",
  "sourceCode" : "@Test\r\nvoid testRethrow() {\r\n    final Exception expected = new InterruptedException();\r\n    // API return typed to compile to Object\r\n    assertThrows(expected.getClass(), () -> {\r\n        @SuppressWarnings(\"unused\")\r\n        final Object retVal = ExceptionUtils.rethrow(expected);\r\n    });\r\n    // API return typed to compile to Object subclass\r\n    assertThrows(expected.getClass(), () -> {\r\n        @SuppressWarnings(\"unused\")\r\n        final String retVal = ExceptionUtils.rethrow(expected);\r\n    });\r\n    // API return typed to compile to primitive\r\n    assertThrows(expected.getClass(), () -> {\r\n        @SuppressWarnings(\"unused\")\r\n        final int retVal = ExceptionUtils.rethrow(expected);\r\n    });\r\n    //\r\n    assertSame(expected, assertThrows(expected.getClass(), () -> ExceptionUtils.rethrow(expected)));\r\n    assertNotSame(expected, assertThrows(expected.getClass(), () -> ExceptionUtils.rethrow(new InterruptedException())));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\exception\\ExceptionUtilsTest.java",
  "methodName" : "testStream_jdkNoCause",
  "sourceCode" : "@Test\r\nvoid testStream_jdkNoCause() {\r\n    assertEquals(1, ExceptionUtils.stream(jdkNoCause).count());\r\n    assertSame(jdkNoCause, ExceptionUtils.stream(jdkNoCause).toArray()[0]);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\exception\\ExceptionUtilsTest.java",
  "methodName" : "testStream_nested",
  "sourceCode" : "@Test\r\nvoid testStream_nested() {\r\n    assertEquals(2, ExceptionUtils.stream(nested).count());\r\n    final Object[] array = ExceptionUtils.stream(nested).toArray();\r\n    assertSame(nested, array[0]);\r\n    assertSame(withoutCause, array[1]);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\exception\\ExceptionUtilsTest.java",
  "methodName" : "testStream_null",
  "sourceCode" : "@Test\r\nvoid testStream_null() {\r\n    assertEquals(0, ExceptionUtils.stream(null).count());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\exception\\ExceptionUtilsTest.java",
  "methodName" : "testStream_recursiveCause",
  "sourceCode" : "@Test\r\nvoid testStream_recursiveCause() {\r\n    final List<?> throwables = ExceptionUtils.stream(cyclicCause).collect(Collectors.toList());\r\n    assertEquals(3, throwables.size());\r\n    assertSame(cyclicCause, throwables.get(0));\r\n    assertSame(cyclicCause.getCause(), throwables.get(1));\r\n    assertSame(cyclicCause.getCause().getCause(), throwables.get(2));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\exception\\ExceptionUtilsTest.java",
  "methodName" : "testStream_withCause",
  "sourceCode" : "@Test\r\nvoid testStream_withCause() {\r\n    final List<?> throwables = ExceptionUtils.stream(withCause).collect(Collectors.toList());\r\n    assertEquals(3, throwables.size());\r\n    assertSame(withCause, throwables.get(0));\r\n    assertSame(nested, throwables.get(1));\r\n    assertSame(withoutCause, throwables.get(2));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\exception\\ExceptionUtilsTest.java",
  "methodName" : "testStream_withoutCause",
  "sourceCode" : "@Test\r\nvoid testStream_withoutCause() {\r\n    final List<?> throwables = ExceptionUtils.stream(withoutCause).collect(Collectors.toList());\r\n    assertEquals(1, throwables.size());\r\n    assertSame(withoutCause, throwables.get(0));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\exception\\ExceptionUtilsTest.java",
  "methodName" : "testThrowableOf_ThrowableClass",
  "sourceCode" : "@Test\r\nvoid testThrowableOf_ThrowableClass() {\r\n    assertNull(ExceptionUtils.throwableOfThrowable(null, null));\r\n    assertNull(ExceptionUtils.throwableOfThrowable(null, NestableException.class));\r\n    assertNull(ExceptionUtils.throwableOfThrowable(withoutCause, null));\r\n    assertNull(ExceptionUtils.throwableOfThrowable(withoutCause, ExceptionWithCause.class));\r\n    assertNull(ExceptionUtils.throwableOfThrowable(withoutCause, NestableException.class));\r\n    assertEquals(withoutCause, ExceptionUtils.throwableOfThrowable(withoutCause, ExceptionWithoutCause.class));\r\n    assertNull(ExceptionUtils.throwableOfThrowable(nested, null));\r\n    assertNull(ExceptionUtils.throwableOfThrowable(nested, ExceptionWithCause.class));\r\n    assertEquals(nested, ExceptionUtils.throwableOfThrowable(nested, NestableException.class));\r\n    assertEquals(nested.getCause(), ExceptionUtils.throwableOfThrowable(nested, ExceptionWithoutCause.class));\r\n    assertNull(ExceptionUtils.throwableOfThrowable(withCause, null));\r\n    assertEquals(withCause, ExceptionUtils.throwableOfThrowable(withCause, ExceptionWithCause.class));\r\n    assertEquals(withCause.getCause(), ExceptionUtils.throwableOfThrowable(withCause, NestableException.class));\r\n    assertEquals(withCause.getCause().getCause(), ExceptionUtils.throwableOfThrowable(withCause, ExceptionWithoutCause.class));\r\n    assertNull(ExceptionUtils.throwableOfThrowable(withCause, Exception.class));\r\n    assertNull(ExceptionUtils.throwableOfThrowable(withCause, Throwable.class));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\exception\\ExceptionUtilsTest.java",
  "methodName" : "testThrowableOf_ThrowableClassInt",
  "sourceCode" : "@Test\r\nvoid testThrowableOf_ThrowableClassInt() {\r\n    assertNull(ExceptionUtils.throwableOfThrowable(null, null, 0));\r\n    assertNull(ExceptionUtils.throwableOfThrowable(null, NestableException.class, 0));\r\n    assertNull(ExceptionUtils.throwableOfThrowable(withoutCause, null));\r\n    assertNull(ExceptionUtils.throwableOfThrowable(withoutCause, ExceptionWithCause.class, 0));\r\n    assertNull(ExceptionUtils.throwableOfThrowable(withoutCause, NestableException.class, 0));\r\n    assertEquals(withoutCause, ExceptionUtils.throwableOfThrowable(withoutCause, ExceptionWithoutCause.class, 0));\r\n    assertNull(ExceptionUtils.throwableOfThrowable(nested, null, 0));\r\n    assertNull(ExceptionUtils.throwableOfThrowable(nested, ExceptionWithCause.class, 0));\r\n    assertEquals(nested, ExceptionUtils.throwableOfThrowable(nested, NestableException.class, 0));\r\n    assertEquals(nested.getCause(), ExceptionUtils.throwableOfThrowable(nested, ExceptionWithoutCause.class, 0));\r\n    assertNull(ExceptionUtils.throwableOfThrowable(withCause, null));\r\n    assertEquals(withCause, ExceptionUtils.throwableOfThrowable(withCause, ExceptionWithCause.class, 0));\r\n    assertEquals(withCause.getCause(), ExceptionUtils.throwableOfThrowable(withCause, NestableException.class, 0));\r\n    assertEquals(withCause.getCause().getCause(), ExceptionUtils.throwableOfThrowable(withCause, ExceptionWithoutCause.class, 0));\r\n    assertEquals(withCause, ExceptionUtils.throwableOfThrowable(withCause, ExceptionWithCause.class, -1));\r\n    assertEquals(withCause, ExceptionUtils.throwableOfThrowable(withCause, ExceptionWithCause.class, 0));\r\n    assertNull(ExceptionUtils.throwableOfThrowable(withCause, ExceptionWithCause.class, 1));\r\n    assertNull(ExceptionUtils.throwableOfThrowable(withCause, ExceptionWithCause.class, 9));\r\n    assertNull(ExceptionUtils.throwableOfThrowable(withCause, Exception.class, 0));\r\n    assertNull(ExceptionUtils.throwableOfThrowable(withCause, Throwable.class, 0));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\exception\\ExceptionUtilsTest.java",
  "methodName" : "testThrowableOfType_ThrowableClass",
  "sourceCode" : "@Test\r\nvoid testThrowableOfType_ThrowableClass() {\r\n    assertNull(ExceptionUtils.throwableOfType(null, null));\r\n    assertNull(ExceptionUtils.throwableOfType(null, NestableException.class));\r\n    assertNull(ExceptionUtils.throwableOfType(withoutCause, null));\r\n    assertNull(ExceptionUtils.throwableOfType(withoutCause, ExceptionWithCause.class));\r\n    assertNull(ExceptionUtils.throwableOfType(withoutCause, NestableException.class));\r\n    assertEquals(withoutCause, ExceptionUtils.throwableOfType(withoutCause, ExceptionWithoutCause.class));\r\n    assertNull(ExceptionUtils.throwableOfType(nested, null));\r\n    assertNull(ExceptionUtils.throwableOfType(nested, ExceptionWithCause.class));\r\n    assertEquals(nested, ExceptionUtils.throwableOfType(nested, NestableException.class));\r\n    assertEquals(nested.getCause(), ExceptionUtils.throwableOfType(nested, ExceptionWithoutCause.class));\r\n    assertNull(ExceptionUtils.throwableOfType(withCause, null));\r\n    assertEquals(withCause, ExceptionUtils.throwableOfType(withCause, ExceptionWithCause.class));\r\n    assertEquals(withCause.getCause(), ExceptionUtils.throwableOfType(withCause, NestableException.class));\r\n    assertEquals(withCause.getCause().getCause(), ExceptionUtils.throwableOfType(withCause, ExceptionWithoutCause.class));\r\n    assertEquals(withCause, ExceptionUtils.throwableOfType(withCause, Exception.class));\r\n    assertEquals(withCause, ExceptionUtils.throwableOfType(withCause, Throwable.class));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\exception\\ExceptionUtilsTest.java",
  "methodName" : "testThrowableOfType_ThrowableClassInt",
  "sourceCode" : "@Test\r\nvoid testThrowableOfType_ThrowableClassInt() {\r\n    assertNull(ExceptionUtils.throwableOfType(null, null, 0));\r\n    assertNull(ExceptionUtils.throwableOfType(null, NestableException.class, 0));\r\n    assertNull(ExceptionUtils.throwableOfType(withoutCause, null));\r\n    assertNull(ExceptionUtils.throwableOfType(withoutCause, ExceptionWithCause.class, 0));\r\n    assertNull(ExceptionUtils.throwableOfType(withoutCause, NestableException.class, 0));\r\n    assertEquals(withoutCause, ExceptionUtils.throwableOfType(withoutCause, ExceptionWithoutCause.class, 0));\r\n    assertNull(ExceptionUtils.throwableOfType(nested, null, 0));\r\n    assertNull(ExceptionUtils.throwableOfType(nested, ExceptionWithCause.class, 0));\r\n    assertEquals(nested, ExceptionUtils.throwableOfType(nested, NestableException.class, 0));\r\n    assertEquals(nested.getCause(), ExceptionUtils.throwableOfType(nested, ExceptionWithoutCause.class, 0));\r\n    assertNull(ExceptionUtils.throwableOfType(withCause, null));\r\n    assertEquals(withCause, ExceptionUtils.throwableOfType(withCause, ExceptionWithCause.class, 0));\r\n    assertEquals(withCause.getCause(), ExceptionUtils.throwableOfType(withCause, NestableException.class, 0));\r\n    assertEquals(withCause.getCause().getCause(), ExceptionUtils.throwableOfType(withCause, ExceptionWithoutCause.class, 0));\r\n    assertEquals(withCause, ExceptionUtils.throwableOfType(withCause, ExceptionWithCause.class, -1));\r\n    assertEquals(withCause, ExceptionUtils.throwableOfType(withCause, ExceptionWithCause.class, 0));\r\n    assertNull(ExceptionUtils.throwableOfType(withCause, ExceptionWithCause.class, 1));\r\n    assertNull(ExceptionUtils.throwableOfType(withCause, ExceptionWithCause.class, 9));\r\n    assertEquals(withCause, ExceptionUtils.throwableOfType(withCause, Exception.class, 0));\r\n    assertEquals(withCause, ExceptionUtils.throwableOfType(withCause, Throwable.class, 0));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\exception\\ExceptionUtilsTest.java",
  "methodName" : "testWrapAndUnwrapCheckedException",
  "sourceCode" : "@Test\r\nvoid testWrapAndUnwrapCheckedException() {\r\n    final Throwable t = assertThrows(Throwable.class, () -> ExceptionUtils.wrapAndThrow(new IOException()));\r\n    assertTrue(ExceptionUtils.hasCause(t, IOException.class));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\exception\\ExceptionUtilsTest.java",
  "methodName" : "testWrapAndUnwrapError",
  "sourceCode" : "@Test\r\nvoid testWrapAndUnwrapError() {\r\n    final Throwable t = assertThrows(Throwable.class, () -> ExceptionUtils.wrapAndThrow(new OutOfMemoryError()));\r\n    assertTrue(ExceptionUtils.hasCause(t, Error.class));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\exception\\ExceptionUtilsTest.java",
  "methodName" : "testWrapAndUnwrapRuntimeException",
  "sourceCode" : "@Test\r\nvoid testWrapAndUnwrapRuntimeException() {\r\n    final Throwable t = assertThrows(Throwable.class, () -> ExceptionUtils.wrapAndThrow(new IllegalArgumentException()));\r\n    assertTrue(ExceptionUtils.hasCause(t, RuntimeException.class));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\exception\\ExceptionUtilsTest.java",
  "methodName" : "testWrapAndUnwrapThrowable",
  "sourceCode" : "@Test\r\nvoid testWrapAndUnwrapThrowable() {\r\n    final Throwable t = assertThrows(Throwable.class, () -> ExceptionUtils.wrapAndThrow(new TestThrowable()));\r\n    assertTrue(ExceptionUtils.hasCause(t, TestThrowable.class));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\exception\\UncheckedExceptionTest.java",
  "methodName" : "testConstructWithCause",
  "sourceCode" : "@Test\r\nvoid testConstructWithCause() {\r\n    final Exception e = new Exception();\r\n    assertSame(e, new UncheckedException(e).getCause());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\exception\\UncheckedIllegalAccessExceptionTest.java",
  "methodName" : "testConstructWithCause",
  "sourceCode" : "@Test\r\nvoid testConstructWithCause() {\r\n    final Exception e = new Exception();\r\n    assertSame(e, new UncheckedIllegalAccessException(e).getCause());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\exception\\UncheckedInterruptedExceptionTest.java",
  "methodName" : "testConstructWithCause",
  "sourceCode" : "@Test\r\nvoid testConstructWithCause() {\r\n    final Exception e = new Exception();\r\n    assertSame(e, new UncheckedInterruptedException(e).getCause());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\exception\\UncheckedReflectiveOperationExceptionTest.java",
  "methodName" : "testConstructWithCause",
  "sourceCode" : "@Test\r\nvoid testConstructWithCause() {\r\n    final Exception e = new Exception();\r\n    assertSame(e, new UncheckedReflectiveOperationException(e).getCause());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\function\\BooleanConsumerTest.java",
  "methodName" : "testAccept",
  "sourceCode" : "@Test\r\nvoid testAccept() {\r\n    final AtomicBoolean aBool = new AtomicBoolean();\r\n    accept(aBool::lazySet, true);\r\n    assertTrue(aBool.get());\r\n    accept(aBool::lazySet, false);\r\n    assertFalse(aBool.get());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\function\\BooleanConsumerTest.java",
  "methodName" : "testAndThen",
  "sourceCode" : "@Test\r\nvoid testAndThen() throws Throwable {\r\n    final BooleanConsumer nop = BooleanConsumer.nop();\r\n    nop.andThen(nop);\r\n    // Documented in Javadoc edge-case.\r\n    assertNullPointerException(() -> nop.andThen(null));\r\n    final AtomicBoolean aBool1 = new AtomicBoolean();\r\n    final AtomicBoolean aBool2 = new AtomicBoolean();\r\n    final BooleanConsumer bc = aBool1::lazySet;\r\n    final BooleanConsumer composite = bc.andThen(aBool2::lazySet);\r\n    composite.accept(true);\r\n    assertTrue(aBool1.get());\r\n    assertTrue(aBool2.get());\r\n    composite.accept(false);\r\n    assertFalse(aBool1.get());\r\n    assertFalse(aBool2.get());\r\n    // Check order\r\n    final BooleanConsumer bad = value -> {\r\n        throw new IllegalStateException();\r\n    };\r\n    final BooleanConsumer badComposite = bad.andThen(aBool2::lazySet);\r\n    Assertions.assertThrows(IllegalStateException.class, () -> badComposite.accept(true));\r\n    assertFalse(aBool2.get(), \"Second consumer should not be invoked\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\function\\ByteConsumerTest.java",
  "methodName" : "testAccept",
  "sourceCode" : "@Test\r\nvoid testAccept() {\r\n    final AtomicInteger ref = new AtomicInteger();\r\n    accept(v -> ref.lazySet(v), B1);\r\n    assertEquals(1, ref.get());\r\n    accept(v -> ref.lazySet(v), B0);\r\n    assertEquals(0, ref.get());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\function\\ByteConsumerTest.java",
  "methodName" : "testAndThen",
  "sourceCode" : "@Test\r\nvoid testAndThen() throws Throwable {\r\n    final ByteConsumer nop = ByteConsumer.nop();\r\n    nop.andThen(nop);\r\n    // Documented in Javadoc edge-case.\r\n    assertNullPointerException(() -> nop.andThen(null));\r\n    final AtomicInteger ref1 = new AtomicInteger();\r\n    final AtomicInteger ref2 = new AtomicInteger();\r\n    final ByteConsumer bc = ref1::lazySet;\r\n    final ByteConsumer composite = bc.andThen(ref2::lazySet);\r\n    composite.accept(B1);\r\n    assertEquals(1, ref1.get());\r\n    assertEquals(1, ref2.get());\r\n    composite.accept(B0);\r\n    assertEquals(0, ref1.get());\r\n    assertEquals(0, ref2.get());\r\n    // Check order\r\n    final ByteConsumer bad = value -> {\r\n        throw new IllegalStateException();\r\n    };\r\n    final ByteConsumer badComposite = bad.andThen(ref2::lazySet);\r\n    Assertions.assertThrows(IllegalStateException.class, () -> badComposite.accept(B1));\r\n    assertEquals(0, ref2.get(), \"Second consumer should not be invoked\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\function\\ByteSupplierTest.java",
  "methodName" : "testGetAsByte",
  "sourceCode" : "@Test\r\nvoid testGetAsByte() {\r\n    assertEquals(1, new ByteSupplier() {\r\n\r\n        @Override\r\n        public byte getAsByte() {\r\n            return 1;\r\n        }\r\n    }.getAsByte());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\function\\ConsumersTest.java",
  "methodName" : "testAccept",
  "sourceCode" : "/**\r\n * Tests {@link Consumers#accept(Consumer, Object)}.\r\n */\r\n@Test\r\nvoid testAccept() {\r\n    final AtomicBoolean bool = new AtomicBoolean();\r\n    Consumers.accept(bool::set, true);\r\n    assertTrue(bool.get());\r\n    Consumers.accept(null, \"\");\r\n    Consumers.accept(null, null);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\function\\ConsumersTest.java",
  "methodName" : "testNop",
  "sourceCode" : "/**\r\n * Tests {@link Consumers#nop()}.\r\n */\r\n@Test\r\nvoid testNop() {\r\n    Stream.of(\"\").forEach(Consumers.nop());\r\n    //\r\n    final Consumer<?> c1 = Consumers.nop();\r\n    c1.accept(null);\r\n    final Consumer<Object> c2 = Consumers.nop();\r\n    c2.accept(null);\r\n    final Consumer<String> c3 = Consumers.nop();\r\n    c3.accept(null);\r\n    //\r\n    Consumers.nop().accept(null);\r\n    Consumers.nop().accept(\"\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\function\\FailableSupplierTest.java",
  "methodName" : "testNULL",
  "sourceCode" : "@Test\r\nvoid testNULL() throws Throwable {\r\n    assertNull(FailableSupplier.NUL.get());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\function\\FailableSupplierTest.java",
  "methodName" : "testNullSupplierDefaultException",
  "sourceCode" : "@Test\r\nvoid testNullSupplierDefaultException() throws Exception {\r\n    assertNull(FailableSupplier.nul().get());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\function\\FailableSupplierTest.java",
  "methodName" : "testNullSupplierException",
  "sourceCode" : "@Test\r\nvoid testNullSupplierException() throws Exception {\r\n    assertNull(FailableSupplier.<Object, Exception>nul().get());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\function\\FailableSupplierTest.java",
  "methodName" : "testNullSupplierRuntimeException",
  "sourceCode" : "@Test\r\nvoid testNullSupplierRuntimeException() {\r\n    assertNull(FailableSupplier.<Object, RuntimeException>nul().get());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\function\\FailableTest.java",
  "methodName" : "testAcceptBiConsumer",
  "sourceCode" : "@Test\r\nvoid testAcceptBiConsumer() {\r\n    final Testable<?, ?> testable = new Testable<>(null);\r\n    Throwable e = assertThrows(IllegalStateException.class, () -> Failable.accept(Testable::test, testable, ILLEGAL_STATE_EXCEPTION));\r\n    assertSame(ILLEGAL_STATE_EXCEPTION, e);\r\n    e = assertThrows(OutOfMemoryError.class, () -> Failable.accept(Testable::test, testable, ERROR));\r\n    assertSame(ERROR, e);\r\n    final IOException ioe = new IOException(\"Unknown I/O error\");\r\n    testable.setThrowable(ioe);\r\n    e = assertThrows(UncheckedIOException.class, () -> Failable.accept(Testable::test, testable, ioe));\r\n    final Throwable t = e.getCause();\r\n    assertNotNull(t);\r\n    assertSame(ioe, t);\r\n    testable.setThrowable(null);\r\n    Failable.accept(Testable::test, testable, (Throwable) null);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\function\\FailableTest.java",
  "methodName" : "testAcceptConsumer",
  "sourceCode" : "@Test\r\nvoid testAcceptConsumer() {\r\n    final Testable<?, ?> testable = new Testable<>(ILLEGAL_STATE_EXCEPTION);\r\n    Throwable e = assertThrows(IllegalStateException.class, () -> Failable.accept(Testable::test, testable));\r\n    assertSame(ILLEGAL_STATE_EXCEPTION, e);\r\n    testable.setThrowable(ERROR);\r\n    e = assertThrows(OutOfMemoryError.class, () -> Failable.accept(Testable::test, testable));\r\n    assertSame(ERROR, e);\r\n    final IOException ioe = new IOException(\"Unknown I/O error\");\r\n    testable.setThrowable(ioe);\r\n    e = assertThrows(UncheckedIOException.class, () -> Failable.accept(Testable::test, testable));\r\n    final Throwable t = e.getCause();\r\n    assertNotNull(t);\r\n    assertSame(ioe, t);\r\n    testable.setThrowable(null);\r\n    Failable.accept(Testable::test, testable);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\function\\FailableTest.java",
  "methodName" : "testAcceptDoubleConsumer",
  "sourceCode" : "@Test\r\nvoid testAcceptDoubleConsumer() {\r\n    final Testable<?, Double> testable = new Testable<>(ILLEGAL_STATE_EXCEPTION);\r\n    Throwable e = assertThrows(IllegalStateException.class, () -> Failable.accept(testable::testDouble, 1d));\r\n    assertSame(ILLEGAL_STATE_EXCEPTION, e);\r\n    assertNull(testable.getAcceptedPrimitiveObject1());\r\n    testable.setThrowable(ERROR);\r\n    e = assertThrows(OutOfMemoryError.class, () -> Failable.accept(testable::testDouble, 1d));\r\n    assertSame(ERROR, e);\r\n    assertNull(testable.getAcceptedPrimitiveObject1());\r\n    final IOException ioe = new IOException(\"Unknown I/O error\");\r\n    testable.setThrowable(ioe);\r\n    e = assertThrows(UncheckedIOException.class, () -> Failable.accept(testable::testDouble, 1d));\r\n    final Throwable t = e.getCause();\r\n    assertNotNull(t);\r\n    assertSame(ioe, t);\r\n    assertNull(testable.getAcceptedPrimitiveObject1());\r\n    testable.setThrowable(null);\r\n    Failable.accept(testable::testDouble, 1d);\r\n    assertEquals(1, testable.getAcceptedPrimitiveObject1());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\function\\FailableTest.java",
  "methodName" : "testAcceptIntConsumer",
  "sourceCode" : "@Test\r\nvoid testAcceptIntConsumer() {\r\n    final Testable<?, Integer> testable = new Testable<>(ILLEGAL_STATE_EXCEPTION);\r\n    Throwable e = assertThrows(IllegalStateException.class, () -> Failable.accept(testable::testInt, 1));\r\n    assertSame(ILLEGAL_STATE_EXCEPTION, e);\r\n    assertNull(testable.getAcceptedPrimitiveObject1());\r\n    testable.setThrowable(ERROR);\r\n    e = assertThrows(OutOfMemoryError.class, () -> Failable.accept(testable::testInt, 1));\r\n    assertSame(ERROR, e);\r\n    assertNull(testable.getAcceptedPrimitiveObject1());\r\n    final IOException ioe = new IOException(\"Unknown I/O error\");\r\n    testable.setThrowable(ioe);\r\n    e = assertThrows(UncheckedIOException.class, () -> Failable.accept(testable::testInt, 1));\r\n    final Throwable t = e.getCause();\r\n    assertNotNull(t);\r\n    assertSame(ioe, t);\r\n    assertNull(testable.getAcceptedPrimitiveObject1());\r\n    testable.setThrowable(null);\r\n    Failable.accept(testable::testInt, 1);\r\n    assertEquals(1, testable.getAcceptedPrimitiveObject1());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\function\\FailableTest.java",
  "methodName" : "testAcceptLongConsumer",
  "sourceCode" : "@Test\r\nvoid testAcceptLongConsumer() {\r\n    final Testable<?, Long> testable = new Testable<>(ILLEGAL_STATE_EXCEPTION);\r\n    Throwable e = assertThrows(IllegalStateException.class, () -> Failable.accept(testable::testLong, 1L));\r\n    assertSame(ILLEGAL_STATE_EXCEPTION, e);\r\n    assertNull(testable.getAcceptedPrimitiveObject1());\r\n    testable.setThrowable(ERROR);\r\n    e = assertThrows(OutOfMemoryError.class, () -> Failable.accept(testable::testLong, 1L));\r\n    assertSame(ERROR, e);\r\n    assertNull(testable.getAcceptedPrimitiveObject1());\r\n    final IOException ioe = new IOException(\"Unknown I/O error\");\r\n    testable.setThrowable(ioe);\r\n    e = assertThrows(UncheckedIOException.class, () -> Failable.accept(testable::testLong, 1L));\r\n    final Throwable t = e.getCause();\r\n    assertNotNull(t);\r\n    assertSame(ioe, t);\r\n    assertNull(testable.getAcceptedPrimitiveObject1());\r\n    testable.setThrowable(null);\r\n    Failable.accept(testable::testLong, 1L);\r\n    assertEquals(1, testable.getAcceptedPrimitiveObject1());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\function\\FailableTest.java",
  "methodName" : "testAcceptObjDoubleConsumer",
  "sourceCode" : "@Test\r\nvoid testAcceptObjDoubleConsumer() {\r\n    final Testable<String, Double> testable = new Testable<>(ILLEGAL_STATE_EXCEPTION);\r\n    Throwable e = assertThrows(IllegalStateException.class, () -> Failable.accept(testable::testObjDouble, \"X\", 1d));\r\n    assertSame(ILLEGAL_STATE_EXCEPTION, e);\r\n    assertNull(testable.getAcceptedObject());\r\n    assertNull(testable.getAcceptedPrimitiveObject1());\r\n    testable.setThrowable(ERROR);\r\n    e = assertThrows(OutOfMemoryError.class, () -> Failable.accept(testable::testObjDouble, \"X\", 1d));\r\n    assertSame(ERROR, e);\r\n    assertNull(testable.getAcceptedObject());\r\n    assertNull(testable.getAcceptedPrimitiveObject1());\r\n    final IOException ioe = new IOException(\"Unknown I/O error\");\r\n    testable.setThrowable(ioe);\r\n    e = assertThrows(UncheckedIOException.class, () -> Failable.accept(testable::testObjDouble, \"X\", 1d));\r\n    final Throwable t = e.getCause();\r\n    assertNotNull(t);\r\n    assertSame(ioe, t);\r\n    assertNull(testable.getAcceptedObject());\r\n    assertNull(testable.getAcceptedPrimitiveObject1());\r\n    testable.setThrowable(null);\r\n    Failable.accept(testable::testObjDouble, \"X\", 1d);\r\n    assertEquals(\"X\", testable.getAcceptedObject());\r\n    assertEquals(1d, testable.getAcceptedPrimitiveObject1());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\function\\FailableTest.java",
  "methodName" : "testAcceptObjIntConsumer",
  "sourceCode" : "@Test\r\nvoid testAcceptObjIntConsumer() {\r\n    final Testable<String, Integer> testable = new Testable<>(ILLEGAL_STATE_EXCEPTION);\r\n    Throwable e = assertThrows(IllegalStateException.class, () -> Failable.accept(testable::testObjInt, \"X\", 1));\r\n    assertSame(ILLEGAL_STATE_EXCEPTION, e);\r\n    assertNull(testable.getAcceptedObject());\r\n    assertNull(testable.getAcceptedPrimitiveObject1());\r\n    testable.setThrowable(ERROR);\r\n    e = assertThrows(OutOfMemoryError.class, () -> Failable.accept(testable::testObjInt, \"X\", 1));\r\n    assertSame(ERROR, e);\r\n    assertNull(testable.getAcceptedObject());\r\n    assertNull(testable.getAcceptedPrimitiveObject1());\r\n    final IOException ioe = new IOException(\"Unknown I/O error\");\r\n    testable.setThrowable(ioe);\r\n    e = assertThrows(UncheckedIOException.class, () -> Failable.accept(testable::testObjInt, \"X\", 1));\r\n    final Throwable t = e.getCause();\r\n    assertNotNull(t);\r\n    assertSame(ioe, t);\r\n    assertNull(testable.getAcceptedObject());\r\n    assertNull(testable.getAcceptedPrimitiveObject1());\r\n    testable.setThrowable(null);\r\n    Failable.accept(testable::testObjInt, \"X\", 1);\r\n    assertEquals(\"X\", testable.getAcceptedObject());\r\n    assertEquals(1, testable.getAcceptedPrimitiveObject1());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\function\\FailableTest.java",
  "methodName" : "testAcceptObjLongConsumer",
  "sourceCode" : "@Test\r\nvoid testAcceptObjLongConsumer() {\r\n    final Testable<String, Long> testable = new Testable<>(ILLEGAL_STATE_EXCEPTION);\r\n    Throwable e = assertThrows(IllegalStateException.class, () -> Failable.accept(testable::testObjLong, \"X\", 1L));\r\n    assertSame(ILLEGAL_STATE_EXCEPTION, e);\r\n    assertNull(testable.getAcceptedObject());\r\n    assertNull(testable.getAcceptedPrimitiveObject1());\r\n    testable.setThrowable(ERROR);\r\n    e = assertThrows(OutOfMemoryError.class, () -> Failable.accept(testable::testObjLong, \"X\", 1L));\r\n    assertSame(ERROR, e);\r\n    assertNull(testable.getAcceptedObject());\r\n    assertNull(testable.getAcceptedPrimitiveObject1());\r\n    final IOException ioe = new IOException(\"Unknown I/O error\");\r\n    testable.setThrowable(ioe);\r\n    e = assertThrows(UncheckedIOException.class, () -> Failable.accept(testable::testObjLong, \"X\", 1L));\r\n    final Throwable t = e.getCause();\r\n    assertNotNull(t);\r\n    assertSame(ioe, t);\r\n    assertNull(testable.getAcceptedObject());\r\n    assertNull(testable.getAcceptedPrimitiveObject1());\r\n    testable.setThrowable(null);\r\n    Failable.accept(testable::testObjLong, \"X\", 1L);\r\n    assertEquals(\"X\", testable.getAcceptedObject());\r\n    assertEquals(1L, testable.getAcceptedPrimitiveObject1());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\function\\FailableTest.java",
  "methodName" : "testApplyBiFunction",
  "sourceCode" : "@Test\r\nvoid testApplyBiFunction() {\r\n    final Testable<?, ?> testable = new Testable<>(null);\r\n    Throwable e = assertThrows(IllegalStateException.class, () -> Failable.apply(Testable::testAsInteger, testable, ILLEGAL_STATE_EXCEPTION));\r\n    assertSame(ILLEGAL_STATE_EXCEPTION, e);\r\n    e = assertThrows(OutOfMemoryError.class, () -> Failable.apply(Testable::testAsInteger, testable, ERROR));\r\n    assertSame(ERROR, e);\r\n    final IOException ioe = new IOException(\"Unknown I/O error\");\r\n    e = assertThrows(UncheckedIOException.class, () -> Failable.apply(Testable::testAsInteger, testable, ioe));\r\n    final Throwable t = e.getCause();\r\n    assertNotNull(t);\r\n    assertSame(ioe, t);\r\n    final Integer i = Failable.apply(Testable::testAsInteger, testable, (Throwable) null);\r\n    assertNotNull(i);\r\n    assertEquals(0, i.intValue());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\function\\FailableTest.java",
  "methodName" : "testApplyDoubleBinaryOperator",
  "sourceCode" : "@Test\r\nvoid testApplyDoubleBinaryOperator() {\r\n    final Testable<?, Double> testable = new Testable<>(ILLEGAL_STATE_EXCEPTION);\r\n    final Throwable e = assertThrows(IllegalStateException.class, () -> Failable.applyAsDouble(testable::testDoubleDouble, 1d, 2d));\r\n    assertSame(ILLEGAL_STATE_EXCEPTION, e);\r\n    final Testable<?, Double> testable2 = new Testable<>(null);\r\n    final double i = Failable.applyAsDouble(testable2::testDoubleDouble, 1d, 2d);\r\n    assertEquals(3d, i);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\function\\FailableTest.java",
  "methodName" : "testApplyFunction",
  "sourceCode" : "@Test\r\nvoid testApplyFunction() {\r\n    final Testable<?, ?> testable = new Testable<>(ILLEGAL_STATE_EXCEPTION);\r\n    Throwable e = assertThrows(IllegalStateException.class, () -> Failable.apply(Testable::testAsInteger, testable));\r\n    assertSame(ILLEGAL_STATE_EXCEPTION, e);\r\n    testable.setThrowable(ERROR);\r\n    e = assertThrows(OutOfMemoryError.class, () -> Failable.apply(Testable::testAsInteger, testable));\r\n    assertSame(ERROR, e);\r\n    final IOException ioe = new IOException(\"Unknown I/O error\");\r\n    testable.setThrowable(ioe);\r\n    e = assertThrows(UncheckedIOException.class, () -> Failable.apply(Testable::testAsInteger, testable));\r\n    final Throwable t = e.getCause();\r\n    assertNotNull(t);\r\n    assertSame(ioe, t);\r\n    testable.setThrowable(null);\r\n    final Integer i = Failable.apply(Testable::testAsInteger, testable);\r\n    assertNotNull(i);\r\n    assertEquals(0, i.intValue());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\function\\FailableTest.java",
  "methodName" : "testApplyNonNull",
  "sourceCode" : "@Test\r\nvoid testApplyNonNull() throws SomeException {\r\n    // No checked exceptions in signatures\r\n    assertEquals(\"A\", Failable.applyNonNull(\"a\", String::toUpperCase));\r\n    assertNull(Failable.applyNonNull((String) null, String::toUpperCase));\r\n    assertNull(Failable.applyNonNull(\"a\", s -> null));\r\n    assertThrows(NullPointerException.class, () -> Failable.applyNonNull(\"a\", null));\r\n    // Checked exceptions in signatures\r\n    final FailureOnInvocationCount obj1 = new FailureOnInvocationCount(1);\r\n    assertEquals(1, assertThrows(SomeException.class, () -> Failable.applyNonNull(1, obj1::inc)).value);\r\n    assertEquals(2, Failable.applyNonNull(1, obj1::inc));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\function\\FailableTest.java",
  "methodName" : "testApplyNonNull2",
  "sourceCode" : "@Test\r\nvoid testApplyNonNull2() throws SomeException, IOException {\r\n    // No checked exceptions in signatures\r\n    assertEquals(\"A\", Failable.applyNonNull(\" a \", String::toUpperCase, String::trim));\r\n    assertNull(Failable.applyNonNull((String) null, String::toUpperCase, String::trim));\r\n    assertNull(Failable.applyNonNull(\" a \", s -> null, String::trim));\r\n    assertNull(Failable.applyNonNull(\" a \", String::toUpperCase, s -> null));\r\n    assertThrows(NullPointerException.class, () -> Failable.applyNonNull(\" a \", null, String::trim));\r\n    assertThrows(NullPointerException.class, () -> Failable.applyNonNull(\" a \", String::toUpperCase, null));\r\n    // Same checked exceptions in signatures\r\n    final FailureOnInvocationCount obj1 = new FailureOnInvocationCount(1);\r\n    final FailureOnInvocationCount obj2 = new FailureOnInvocationCount(2);\r\n    assertEquals(1, assertThrows(SomeException.class, () -> Failable.applyNonNull(1, obj1::inc, obj1::inc)).value);\r\n    assertEquals(2, assertThrows(SomeException.class, () -> Failable.applyNonNull(1, obj2::inc, obj2::inc)).value);\r\n    assertEquals(3, Failable.applyNonNull(1, obj1::inc, obj1::inc));\r\n    assertEquals(3, Failable.applyNonNull(1, obj2::inc, obj2::inc));\r\n    // Different checked exceptions in signatures\r\n    obj1.reset();\r\n    obj2.reset();\r\n    assertEquals(1, assertThrows(SomeException.class, () -> Failable.applyNonNull(1, obj1::inc, obj1::incIo)).value);\r\n    assertEquals(2, ((SomeException) assertThrows(IOException.class, () -> Failable.applyNonNull(1, obj2::inc, obj2::incIo)).getCause()).value);\r\n    assertEquals(3, Failable.applyNonNull(1, obj1::inc, obj1::incIo));\r\n    assertEquals(3, Failable.applyNonNull(1, obj2::inc, obj2::incIo));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\function\\FailableTest.java",
  "methodName" : "testApplyNonNull3",
  "sourceCode" : "@Test\r\nvoid testApplyNonNull3() throws SomeException, IOException, ClassNotFoundException {\r\n    // No checked exceptions in signatures\r\n    assertEquals(\"CBA\", Failable.applyNonNull(\" abc \", String::toUpperCase, String::trim, StringUtils::reverse));\r\n    assertNull(Failable.applyNonNull((String) null, String::toUpperCase, String::trim, StringUtils::reverse));\r\n    assertNull(Failable.applyNonNull(\" abc \", s -> null, String::trim, StringUtils::reverse));\r\n    assertNull(Failable.applyNonNull(\" abc \", String::toUpperCase, s -> null, StringUtils::reverse));\r\n    assertNull(Failable.applyNonNull(\" abc \", String::toUpperCase, String::trim, s -> null));\r\n    assertThrows(NullPointerException.class, () -> Failable.applyNonNull(\" abc \", null, String::trim, StringUtils::reverse));\r\n    assertThrows(NullPointerException.class, () -> Failable.applyNonNull(\" abc \", String::toUpperCase, null, StringUtils::reverse));\r\n    assertThrows(NullPointerException.class, () -> Failable.applyNonNull(\" abc \", String::toUpperCase, String::trim, null));\r\n    // Same checked exceptions in signatures\r\n    final FailureOnInvocationCount obj1 = new FailureOnInvocationCount(1);\r\n    final FailureOnInvocationCount obj2 = new FailureOnInvocationCount(2);\r\n    final FailureOnInvocationCount obj3 = new FailureOnInvocationCount(3);\r\n    assertEquals(1, assertThrows(SomeException.class, () -> Failable.applyNonNull(1, obj1::inc, obj1::inc, obj1::inc)).value);\r\n    assertEquals(2, assertThrows(SomeException.class, () -> Failable.applyNonNull(1, obj2::inc, obj2::inc, obj2::inc)).value);\r\n    assertEquals(3, assertThrows(SomeException.class, () -> Failable.applyNonNull(1, obj3::inc, obj3::inc, obj3::inc)).value);\r\n    assertEquals(4, Failable.applyNonNull(1, obj1::inc, obj1::inc, obj1::inc));\r\n    assertEquals(4, Failable.applyNonNull(1, obj2::inc, obj2::inc, obj2::inc));\r\n    assertEquals(4, Failable.applyNonNull(1, obj3::inc, obj3::inc, obj3::inc));\r\n    // Different checked exceptions in signatures\r\n    obj1.reset();\r\n    obj2.reset();\r\n    obj3.reset();\r\n    assertEquals(1, assertThrows(SomeException.class, () -> Failable.applyNonNull(1, obj1::inc, obj1::incIo, obj1::incIo)).value);\r\n    assertEquals(2, ((SomeException) assertThrows(IOException.class, () -> Failable.applyNonNull(1, obj2::inc, obj2::incIo, obj2::incIo)).getCause()).value);\r\n    assertEquals(3, ((SomeException) assertThrows(IOException.class, () -> Failable.applyNonNull(1, obj3::inc, obj3::incIo, obj3::incIo)).getCause()).value);\r\n    assertEquals(4, Failable.applyNonNull(1, obj1::inc, obj1::incIo, obj1::incIo));\r\n    assertEquals(4, Failable.applyNonNull(1, obj2::inc, obj2::incIo, obj2::incIo));\r\n    assertEquals(4, Failable.applyNonNull(1, obj3::inc, obj3::incIo, obj3::incIo));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\function\\FailableTest.java",
  "methodName" : "testAsCallable",
  "sourceCode" : "@Test\r\nvoid testAsCallable() {\r\n    FailureOnOddInvocations.invocations = 0;\r\n    final FailableCallable<FailureOnOddInvocations, SomeException> failableCallable = FailureOnOddInvocations::new;\r\n    final Callable<FailureOnOddInvocations> callable = Failable.asCallable(failableCallable);\r\n    final UndeclaredThrowableException e = assertThrows(UndeclaredThrowableException.class, callable::call);\r\n    final Throwable cause = e.getCause();\r\n    assertNotNull(cause);\r\n    assertInstanceOf(SomeException.class, cause);\r\n    assertEquals(\"Odd Invocation: 1\", cause.getMessage());\r\n    final FailureOnOddInvocations instance;\r\n    try {\r\n        instance = callable.call();\r\n    } catch (final Exception ex) {\r\n        throw Failable.rethrow(ex);\r\n    }\r\n    assertNotNull(instance);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\function\\FailableTest.java",
  "methodName" : "testAsConsumer",
  "sourceCode" : "@Test\r\nvoid testAsConsumer() {\r\n    final Testable<?, ?> testable = new Testable<>(ILLEGAL_STATE_EXCEPTION);\r\n    final Consumer<Testable<?, ?>> consumer = Failable.asConsumer(Testable::test);\r\n    Throwable e = assertThrows(IllegalStateException.class, () -> consumer.accept(testable));\r\n    assertSame(ILLEGAL_STATE_EXCEPTION, e);\r\n    testable.setThrowable(ERROR);\r\n    e = assertThrows(OutOfMemoryError.class, () -> consumer.accept(testable));\r\n    assertSame(ERROR, e);\r\n    final IOException ioe = new IOException(\"Unknown I/O error\");\r\n    testable.setThrowable(ioe);\r\n    e = assertThrows(UncheckedIOException.class, () -> consumer.accept(testable));\r\n    final Throwable t = e.getCause();\r\n    assertNotNull(t);\r\n    assertSame(ioe, t);\r\n    testable.setThrowable(null);\r\n    Failable.accept(Testable::test, testable);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\function\\FailableTest.java",
  "methodName" : "testAsRunnable",
  "sourceCode" : "@Test\r\nvoid testAsRunnable() {\r\n    FailureOnOddInvocations.invocations = 0;\r\n    final Runnable runnable = Failable.asRunnable(FailureOnOddInvocations::new);\r\n    final UndeclaredThrowableException e = assertThrows(UndeclaredThrowableException.class, runnable::run);\r\n    final Throwable cause = e.getCause();\r\n    assertNotNull(cause);\r\n    assertInstanceOf(SomeException.class, cause);\r\n    assertEquals(\"Odd Invocation: 1\", cause.getMessage());\r\n    // Even invocations, should not throw an exception\r\n    runnable.run();\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\function\\FailableTest.java",
  "methodName" : "testAsSupplier",
  "sourceCode" : "@Test\r\nvoid testAsSupplier() {\r\n    FailureOnOddInvocations.invocations = 0;\r\n    final FailableSupplier<FailureOnOddInvocations, Throwable> failableSupplier = FailureOnOddInvocations::new;\r\n    final Supplier<FailureOnOddInvocations> supplier = Failable.asSupplier(failableSupplier);\r\n    final UndeclaredThrowableException e = assertThrows(UndeclaredThrowableException.class, supplier::get);\r\n    final Throwable cause = e.getCause();\r\n    assertNotNull(cause);\r\n    assertInstanceOf(SomeException.class, cause);\r\n    assertEquals(\"Odd Invocation: 1\", cause.getMessage());\r\n    assertNotNull(supplier.get());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\function\\FailableTest.java",
  "methodName" : "testBiConsumer",
  "sourceCode" : "@Test\r\nvoid testBiConsumer() throws Throwable {\r\n    final Testable<?, ?> testable = new Testable<>(null);\r\n    final FailableBiConsumer<Testable<?, ?>, Throwable, Throwable> failableBiConsumer = (t, th) -> {\r\n        t.setThrowable(th);\r\n        t.test();\r\n    };\r\n    final BiConsumer<Testable<?, ?>, Throwable> consumer = Failable.asBiConsumer(failableBiConsumer);\r\n    Throwable e = assertThrows(IllegalStateException.class, () -> consumer.accept(testable, ILLEGAL_STATE_EXCEPTION));\r\n    assertSame(ILLEGAL_STATE_EXCEPTION, e);\r\n    e = assertThrows(OutOfMemoryError.class, () -> consumer.accept(testable, ERROR));\r\n    assertSame(ERROR, e);\r\n    e = assertThrows(OutOfMemoryError.class, () -> failableBiConsumer.accept(testable, ERROR));\r\n    assertSame(ERROR, e);\r\n    final IOException ioe = new IOException(\"Unknown I/O error\");\r\n    testable.setThrowable(ioe);\r\n    e = assertThrows(UncheckedIOException.class, () -> consumer.accept(testable, ioe));\r\n    final Throwable t = e.getCause();\r\n    assertNotNull(t);\r\n    assertSame(ioe, t);\r\n    consumer.accept(testable, null);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\function\\FailableTest.java",
  "methodName" : "testBiConsumerAndThen",
  "sourceCode" : "@Test\r\nvoid testBiConsumerAndThen() throws Throwable {\r\n    final Testable<?, ?> testable = new Testable<>(null);\r\n    final FailableBiConsumer<Testable<?, ?>, Throwable, Throwable> failing = (t, th) -> {\r\n        t.setThrowable(th);\r\n        t.test();\r\n    };\r\n    final FailableBiConsumer<Testable<?, ?>, Throwable, Throwable> nop = FailableBiConsumer.nop();\r\n    Throwable e = assertThrows(OutOfMemoryError.class, () -> nop.andThen(failing).accept(testable, ERROR));\r\n    assertSame(ERROR, e);\r\n    e = assertThrows(OutOfMemoryError.class, () -> failing.andThen(nop).accept(testable, ERROR));\r\n    assertSame(ERROR, e);\r\n    // Does not throw\r\n    nop.andThen(nop);\r\n    // Documented in Javadoc edge-case.\r\n    assertNullPointerException(() -> failing.andThen(null));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\function\\FailableTest.java",
  "methodName" : "testBiFunction",
  "sourceCode" : "@Test\r\nvoid testBiFunction() {\r\n    final Testable<?, ?> testable = new Testable<>(ILLEGAL_STATE_EXCEPTION);\r\n    final FailableBiFunction<Testable<?, ?>, Throwable, Integer, Throwable> failableBiFunction = (t, th) -> {\r\n        t.setThrowable(th);\r\n        return t.testAsInteger();\r\n    };\r\n    final BiFunction<Testable<?, ?>, Throwable, Integer> biFunction = Failable.asBiFunction(failableBiFunction);\r\n    Throwable e = assertThrows(IllegalStateException.class, () -> biFunction.apply(testable, ILLEGAL_STATE_EXCEPTION));\r\n    assertSame(ILLEGAL_STATE_EXCEPTION, e);\r\n    testable.setThrowable(ERROR);\r\n    e = assertThrows(OutOfMemoryError.class, () -> biFunction.apply(testable, ERROR));\r\n    assertSame(ERROR, e);\r\n    final IOException ioe = new IOException(\"Unknown I/O error\");\r\n    testable.setThrowable(ioe);\r\n    e = assertThrows(UncheckedIOException.class, () -> biFunction.apply(testable, ioe));\r\n    final Throwable t = e.getCause();\r\n    assertNotNull(t);\r\n    assertSame(ioe, t);\r\n    assertEquals(0, biFunction.apply(testable, null).intValue());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\function\\FailableTest.java",
  "methodName" : "testBiFunctionAndThen",
  "sourceCode" : "@Test\r\nvoid testBiFunctionAndThen() throws IOException {\r\n    // Unchecked usage pattern in JRE\r\n    final BiFunction<Object, Integer, Integer> nopBiFunction = (t, u) -> null;\r\n    final Function<Object, Integer> nopFunction = t -> null;\r\n    nopBiFunction.andThen(nopFunction);\r\n    // Checked usage pattern\r\n    final FailableBiFunction<Object, Integer, Integer, IOException> failingBiFunctionTest = (t, u) -> {\r\n        throw new IOException();\r\n    };\r\n    final FailableFunction<Object, Integer, IOException> failingFunction = t -> {\r\n        throw new IOException();\r\n    };\r\n    final FailableBiFunction<Object, Integer, Integer, IOException> nopFailableBiFunction = FailableBiFunction.nop();\r\n    final FailableFunction<Object, Integer, IOException> nopFailableFunction = FailableFunction.nop();\r\n    //\r\n    assertThrows(IOException.class, () -> failingBiFunctionTest.andThen(failingFunction).apply(null, null));\r\n    assertThrows(IOException.class, () -> failingBiFunctionTest.andThen(nopFailableFunction).apply(null, null));\r\n    //\r\n    assertThrows(IOException.class, () -> nopFailableBiFunction.andThen(failingFunction).apply(null, null));\r\n    nopFailableBiFunction.andThen(nopFailableFunction).apply(null, null);\r\n    // Documented in Javadoc edge-case.\r\n    assertNullPointerException(() -> failingBiFunctionTest.andThen(null));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\function\\FailableTest.java",
  "methodName" : "testBiPredicate",
  "sourceCode" : "@Test\r\n@DisplayName(\"Test that asPredicate(FailableBiPredicate) is converted to -> BiPredicate \")\r\nvoid testBiPredicate() {\r\n    FailureOnOddInvocations.invocations = 0;\r\n    final FailableBiPredicate<Object, Object, Throwable> failableBiPredicate = (t1, t2) -> FailureOnOddInvocations.testGetBool();\r\n    final BiPredicate<?, ?> predicate = Failable.asBiPredicate(failableBiPredicate);\r\n    final UndeclaredThrowableException e = assertThrows(UndeclaredThrowableException.class, () -> predicate.test(null, null));\r\n    final Throwable cause = e.getCause();\r\n    assertNotNull(cause);\r\n    assertInstanceOf(SomeException.class, cause);\r\n    assertEquals(\"Odd Invocation: 1\", cause.getMessage());\r\n    assertTrue(predicate.test(null, null));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\function\\FailableTest.java",
  "methodName" : "testBiPredicateAnd",
  "sourceCode" : "@Test\r\nvoid testBiPredicateAnd() throws Throwable {\r\n    assertTrue(FailableBiPredicate.TRUE.and(FailableBiPredicate.TRUE).test(null, null));\r\n    assertFalse(FailableBiPredicate.TRUE.and(FailableBiPredicate.FALSE).test(null, null));\r\n    assertFalse(FailableBiPredicate.FALSE.and(FailableBiPredicate.TRUE).test(null, null));\r\n    assertFalse(FailableBiPredicate.FALSE.and(FailableBiPredicate.FALSE).test(null, null));\r\n    // null tests\r\n    assertNullPointerException(() -> assertFalse(FailableBiPredicate.falsePredicate().and(null).test(null, null)));\r\n    assertNullPointerException(() -> assertTrue(FailableBiPredicate.truePredicate().and(null).test(null, null)));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\function\\FailableTest.java",
  "methodName" : "testBiPredicateNegate",
  "sourceCode" : "@Test\r\nvoid testBiPredicateNegate() throws Throwable {\r\n    assertFalse(FailableBiPredicate.TRUE.negate().test(null, null));\r\n    assertFalse(FailableBiPredicate.truePredicate().negate().test(null, null));\r\n    assertTrue(FailableBiPredicate.FALSE.negate().test(null, null));\r\n    assertTrue(FailableBiPredicate.falsePredicate().negate().test(null, null));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\function\\FailableTest.java",
  "methodName" : "testBiPredicateOr",
  "sourceCode" : "@Test\r\nvoid testBiPredicateOr() throws Throwable {\r\n    assertTrue(FailableBiPredicate.TRUE.or(FailableBiPredicate.TRUE).test(null, null));\r\n    assertTrue(FailableBiPredicate.TRUE.or(FailableBiPredicate.FALSE).test(null, null));\r\n    assertTrue(FailableBiPredicate.FALSE.or(FailableBiPredicate.TRUE).test(null, null));\r\n    assertFalse(FailableBiPredicate.FALSE.or(FailableBiPredicate.FALSE).test(null, null));\r\n    // null tests\r\n    assertNullPointerException(() -> assertFalse(FailableBiPredicate.falsePredicate().or(null).test(null, null)));\r\n    assertNullPointerException(() -> assertTrue(FailableBiPredicate.truePredicate().or(null).test(null, null)));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\function\\FailableTest.java",
  "methodName" : "testByteConsumerAndThen",
  "sourceCode" : "@Test\r\nvoid testByteConsumerAndThen() throws Throwable {\r\n    final Testable<?, ?> testable = new Testable<>(null);\r\n    final FailableByteConsumer<Throwable> failing = t -> {\r\n        testable.setThrowable(ERROR);\r\n        testable.test();\r\n    };\r\n    final FailableByteConsumer<Throwable> nop = FailableByteConsumer.nop();\r\n    Throwable e = assertThrows(OutOfMemoryError.class, () -> nop.andThen(failing).accept((byte) 0));\r\n    assertSame(ERROR, e);\r\n    e = assertThrows(OutOfMemoryError.class, () -> failing.andThen(nop).accept((byte) 0));\r\n    assertSame(ERROR, e);\r\n    // Does not throw\r\n    nop.andThen(nop);\r\n    // Documented in Javadoc edge-case.\r\n    assertNullPointerException(() -> failing.andThen(null));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\function\\FailableTest.java",
  "methodName" : "testCallable",
  "sourceCode" : "@Test\r\nvoid testCallable() {\r\n    FailureOnOddInvocations.invocations = 0;\r\n    final UndeclaredThrowableException e = assertThrows(UndeclaredThrowableException.class, () -> Failable.run(FailureOnOddInvocations::new));\r\n    final Throwable cause = e.getCause();\r\n    assertNotNull(cause);\r\n    assertInstanceOf(SomeException.class, cause);\r\n    assertEquals(\"Odd Invocation: 1\", cause.getMessage());\r\n    final FailureOnOddInvocations instance = Failable.call(FailureOnOddInvocations::new);\r\n    assertNotNull(instance);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\function\\FailableTest.java",
  "methodName" : "testConsumerAndThen",
  "sourceCode" : "@Test\r\nvoid testConsumerAndThen() throws Throwable {\r\n    final Testable<?, ?> testable = new Testable<>(null);\r\n    final FailableConsumer<Throwable, Throwable> failableConsumer = th -> {\r\n        testable.setThrowable(th);\r\n        testable.test();\r\n    };\r\n    final FailableConsumer<Throwable, Throwable> nop = FailableConsumer.nop();\r\n    final Throwable e = assertThrows(OutOfMemoryError.class, () -> nop.andThen(failableConsumer).accept(ERROR));\r\n    assertSame(ERROR, e);\r\n    // Does not throw\r\n    nop.andThen(nop);\r\n    // Documented in Javadoc edge-case.\r\n    assertNullPointerException(() -> failableConsumer.andThen(null));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\function\\FailableTest.java",
  "methodName" : "testDoubleConsumerAndThen",
  "sourceCode" : "@Test\r\nvoid testDoubleConsumerAndThen() throws Throwable {\r\n    final Testable<?, ?> testable = new Testable<>(null);\r\n    final FailableDoubleConsumer<Throwable> failing = t -> {\r\n        testable.setThrowable(ERROR);\r\n        testable.test();\r\n    };\r\n    final FailableDoubleConsumer<Throwable> nop = FailableDoubleConsumer.nop();\r\n    Throwable e = assertThrows(OutOfMemoryError.class, () -> nop.andThen(failing).accept(0d));\r\n    assertSame(ERROR, e);\r\n    e = assertThrows(OutOfMemoryError.class, () -> failing.andThen(nop).accept(0d));\r\n    assertSame(ERROR, e);\r\n    // Does not throw\r\n    nop.andThen(nop);\r\n    // Documented in Javadoc edge-case.\r\n    assertNullPointerException(() -> failing.andThen(null));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\function\\FailableTest.java",
  "methodName" : "testDoublePredicate",
  "sourceCode" : "@Test\r\nvoid testDoublePredicate() throws Throwable {\r\n    FailureOnOddInvocations.invocations = 0;\r\n    final FailableDoublePredicate<Throwable> failablePredicate = FailureOnOddInvocations::testDouble;\r\n    assertThrows(SomeException.class, () -> failablePredicate.test(1d));\r\n    failablePredicate.test(1d);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\function\\FailableTest.java",
  "methodName" : "testDoublePredicateAnd",
  "sourceCode" : "@Test\r\nvoid testDoublePredicateAnd() throws Throwable {\r\n    assertTrue(FailableDoublePredicate.TRUE.and(FailableDoublePredicate.TRUE).test(0));\r\n    assertFalse(FailableDoublePredicate.TRUE.and(FailableDoublePredicate.FALSE).test(0));\r\n    assertFalse(FailableDoublePredicate.FALSE.and(FailableDoublePredicate.TRUE).test(0));\r\n    assertFalse(FailableDoublePredicate.FALSE.and(FailableDoublePredicate.FALSE).test(0));\r\n    // null tests\r\n    assertNullPointerException(() -> assertFalse(FailableDoublePredicate.falsePredicate().and(null).test(0)));\r\n    assertNullPointerException(() -> assertTrue(FailableDoublePredicate.truePredicate().and(null).test(0)));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\function\\FailableTest.java",
  "methodName" : "testDoublePredicateNegate",
  "sourceCode" : "@Test\r\nvoid testDoublePredicateNegate() throws Throwable {\r\n    assertFalse(FailableDoublePredicate.TRUE.negate().test(0d));\r\n    assertFalse(FailableDoublePredicate.truePredicate().negate().test(0d));\r\n    assertTrue(FailableDoublePredicate.FALSE.negate().test(0d));\r\n    assertTrue(FailableDoublePredicate.falsePredicate().negate().test(0d));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\function\\FailableTest.java",
  "methodName" : "testDoublePredicateOr",
  "sourceCode" : "@Test\r\nvoid testDoublePredicateOr() throws Throwable {\r\n    assertTrue(FailableDoublePredicate.TRUE.or(FailableDoublePredicate.TRUE).test(0));\r\n    assertTrue(FailableDoublePredicate.TRUE.or(FailableDoublePredicate.FALSE).test(0));\r\n    assertTrue(FailableDoublePredicate.FALSE.or(FailableDoublePredicate.TRUE).test(0));\r\n    assertFalse(FailableDoublePredicate.FALSE.or(FailableDoublePredicate.FALSE).test(0));\r\n    // null tests\r\n    assertNullPointerException(() -> assertFalse(FailableDoublePredicate.falsePredicate().or(null).test(0)));\r\n    assertNullPointerException(() -> assertTrue(FailableDoublePredicate.truePredicate().or(null).test(0)));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\function\\FailableTest.java",
  "methodName" : "testDoubleUnaryOperatorAndThen",
  "sourceCode" : "@Test\r\nvoid testDoubleUnaryOperatorAndThen() throws Throwable {\r\n    final Testable<?, ?> testable = new Testable<>(null);\r\n    final FailableDoubleUnaryOperator<Throwable> failing = t -> {\r\n        testable.setThrowable(ERROR);\r\n        testable.test();\r\n        return 0d;\r\n    };\r\n    final FailableDoubleUnaryOperator<Throwable> nop = FailableDoubleUnaryOperator.nop();\r\n    Throwable e = assertThrows(OutOfMemoryError.class, () -> nop.andThen(failing).applyAsDouble(0d));\r\n    assertSame(ERROR, e);\r\n    e = assertThrows(OutOfMemoryError.class, () -> failing.andThen(nop).applyAsDouble(0d));\r\n    assertSame(ERROR, e);\r\n    // Does not throw\r\n    nop.andThen(nop);\r\n    // Documented in Javadoc edge-case.\r\n    assertNullPointerException(() -> failing.andThen(null));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\function\\FailableTest.java",
  "methodName" : "testDoubleUnaryOperatorCompose",
  "sourceCode" : "@Test\r\nvoid testDoubleUnaryOperatorCompose() throws Throwable {\r\n    final Testable<?, ?> testable = new Testable<>(null);\r\n    final FailableDoubleUnaryOperator<Throwable> failing = t -> {\r\n        testable.setThrowable(ERROR);\r\n        testable.test();\r\n        return 0d;\r\n    };\r\n    final FailableDoubleUnaryOperator<Throwable> nop = FailableDoubleUnaryOperator.nop();\r\n    Throwable e = assertThrows(OutOfMemoryError.class, () -> nop.compose(failing).applyAsDouble(0d));\r\n    assertSame(ERROR, e);\r\n    e = assertThrows(OutOfMemoryError.class, () -> failing.compose(nop).applyAsDouble(0d));\r\n    assertSame(ERROR, e);\r\n    // Does not throw\r\n    nop.compose(nop);\r\n    // Documented in Javadoc edge-case.\r\n    assertNullPointerException(() -> failing.compose(null));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\function\\FailableTest.java",
  "methodName" : "testDoubleUnaryOperatorIdentity",
  "sourceCode" : "@Test\r\nvoid testDoubleUnaryOperatorIdentity() throws Throwable {\r\n    final FailableDoubleUnaryOperator<Throwable> nop = FailableDoubleUnaryOperator.identity();\r\n    // Does not throw\r\n    nop.compose(nop);\r\n    // Documented in Javadoc edge-case.\r\n    assertNullPointerException(() -> nop.compose(null));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\function\\FailableTest.java",
  "methodName" : "testFailableBiFunctionNop",
  "sourceCode" : "@Test\r\nvoid testFailableBiFunctionNop() throws Throwable {\r\n    assertNull(FailableBiFunction.nop().apply(\"Foo\", \"Bar\"), \"Expect NOP to return null\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\function\\FailableTest.java",
  "methodName" : "testFailableConsumerNop",
  "sourceCode" : "@Test\r\nvoid testFailableConsumerNop() throws Throwable {\r\n    // Expect nothing thrown\r\n    FailableConsumer.nop().accept(\"Foo\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\function\\FailableTest.java",
  "methodName" : "testFailableDoubleFunctionNop",
  "sourceCode" : "@Test\r\nvoid testFailableDoubleFunctionNop() throws Throwable {\r\n    assertNull(FailableDoubleFunction.nop().apply(Double.MAX_VALUE), \"Expect NOP to return null\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\function\\FailableTest.java",
  "methodName" : "testFailableDoubleToIntFunctionNop",
  "sourceCode" : "@Test\r\nvoid testFailableDoubleToIntFunctionNop() throws Throwable {\r\n    assertEquals(0, FailableDoubleToIntFunction.nop().applyAsInt(Double.MAX_VALUE), \"Expect NOP to return 0\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\function\\FailableTest.java",
  "methodName" : "testFailableDoubleToLongFunctionNop",
  "sourceCode" : "@Test\r\nvoid testFailableDoubleToLongFunctionNop() throws Throwable {\r\n    assertEquals(0, FailableDoubleToLongFunction.nop().applyAsLong(Double.MAX_VALUE), \"Expect NOP to return 0\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\function\\FailableTest.java",
  "methodName" : "testFailableIntFunctionNop",
  "sourceCode" : "@Test\r\nvoid testFailableIntFunctionNop() throws Throwable {\r\n    assertNull(FailableIntFunction.nop().apply(Integer.MAX_VALUE), \"Expect NOP to return null\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\function\\FailableTest.java",
  "methodName" : "testFailableIntToDoubleFunctionNop",
  "sourceCode" : "@Test\r\nvoid testFailableIntToDoubleFunctionNop() throws Throwable {\r\n    assertEquals(0, FailableIntToDoubleFunction.nop().applyAsDouble(Integer.MAX_VALUE), \"Expect NOP to return 0\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\function\\FailableTest.java",
  "methodName" : "testFailableIntToFloatFunctionNop",
  "sourceCode" : "@Test\r\nvoid testFailableIntToFloatFunctionNop() throws Throwable {\r\n    assertEquals(0, FailableIntToFloatFunction.nop().applyAsFloat(Integer.MAX_VALUE), \"Expect NOP to return 0\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\function\\FailableTest.java",
  "methodName" : "testFailableIntToLongFunctionNop",
  "sourceCode" : "@Test\r\nvoid testFailableIntToLongFunctionNop() throws Throwable {\r\n    assertEquals(0, FailableIntToLongFunction.nop().applyAsLong(Integer.MAX_VALUE), \"Expect NOP to return 0\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\function\\FailableTest.java",
  "methodName" : "testFailableLongFunctionNop",
  "sourceCode" : "@Test\r\nvoid testFailableLongFunctionNop() throws Throwable {\r\n    assertNull(FailableLongFunction.nop().apply(Long.MAX_VALUE), \"Expect NOP to return null\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\function\\FailableTest.java",
  "methodName" : "testFailableLongToDoubleFunctionNop",
  "sourceCode" : "@Test\r\nvoid testFailableLongToDoubleFunctionNop() throws Throwable {\r\n    assertEquals(0, FailableLongToDoubleFunction.nop().applyAsDouble(Long.MAX_VALUE), \"Expect NOP to return 0\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\function\\FailableTest.java",
  "methodName" : "testFailableLongToIntFunctionNop",
  "sourceCode" : "@Test\r\nvoid testFailableLongToIntFunctionNop() throws Throwable {\r\n    assertEquals(0, FailableLongToIntFunction.nop().applyAsInt(Long.MAX_VALUE), \"Expect NOP to return 0\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\function\\FailableTest.java",
  "methodName" : "testFailableObjDoubleConsumerNop",
  "sourceCode" : "@Test\r\nvoid testFailableObjDoubleConsumerNop() throws Throwable {\r\n    // Expect nothing thrown\r\n    FailableObjDoubleConsumer.nop().accept(\"Foo\", Double.MAX_VALUE);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\function\\FailableTest.java",
  "methodName" : "testFailableObjIntConsumerNop",
  "sourceCode" : "@Test\r\nvoid testFailableObjIntConsumerNop() throws Throwable {\r\n    // Expect nothing thrown\r\n    FailableObjIntConsumer.nop().accept(\"Foo\", Integer.MAX_VALUE);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\function\\FailableTest.java",
  "methodName" : "testFailableObjLongConsumerNop",
  "sourceCode" : "@Test\r\nvoid testFailableObjLongConsumerNop() throws Throwable {\r\n    // Expect nothing thrown\r\n    FailableObjLongConsumer.nop().accept(\"Foo\", Long.MAX_VALUE);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\function\\FailableTest.java",
  "methodName" : "testFailableToBooleanFunctionNop",
  "sourceCode" : "@Test\r\nvoid testFailableToBooleanFunctionNop() throws Throwable {\r\n    assertEquals(false, FailableToBooleanFunction.nop().applyAsBoolean(\"Foo\"), \"Expect NOP to return false\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\function\\FailableTest.java",
  "methodName" : "testFailableToDoubleBiFunctionNop",
  "sourceCode" : "@Test\r\nvoid testFailableToDoubleBiFunctionNop() throws Throwable {\r\n    assertEquals(0, FailableToDoubleBiFunction.nop().applyAsDouble(\"Foo\", \"Bar\"), \"Expect NOP to return 0\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\function\\FailableTest.java",
  "methodName" : "testFailableToDoubleFunctionNop",
  "sourceCode" : "@Test\r\nvoid testFailableToDoubleFunctionNop() throws Throwable {\r\n    assertEquals(0, FailableToDoubleFunction.nop().applyAsDouble(\"Foo\"), \"Expect NOP to return 0\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\function\\FailableTest.java",
  "methodName" : "testFailableToIntBiFunctionNop",
  "sourceCode" : "@Test\r\nvoid testFailableToIntBiFunctionNop() throws Throwable {\r\n    assertEquals(0, FailableToIntBiFunction.nop().applyAsInt(\"Foo\", \"Bar\"), \"Expect NOP to return 0\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\function\\FailableTest.java",
  "methodName" : "testFailableToIntFunctionNop",
  "sourceCode" : "@Test\r\nvoid testFailableToIntFunctionNop() throws Throwable {\r\n    assertEquals(0, FailableToIntFunction.nop().applyAsInt(\"Foo\"), \"Expect NOP to return 0\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\function\\FailableTest.java",
  "methodName" : "testFailableToLongBiFunctionNop",
  "sourceCode" : "@Test\r\nvoid testFailableToLongBiFunctionNop() throws Throwable {\r\n    assertEquals(0, FailableToLongBiFunction.nop().applyAsLong(\"Foo\", \"Bar\"), \"Expect NOP to return 0\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\function\\FailableTest.java",
  "methodName" : "testFailableToLongFunctionNop",
  "sourceCode" : "@Test\r\nvoid testFailableToLongFunctionNop() throws Throwable {\r\n    assertEquals(0, FailableToLongFunction.nop().applyAsLong(\"Foo\"), \"Expect NOP to return 0\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\function\\FailableTest.java",
  "methodName" : "testFunction",
  "sourceCode" : "@Test\r\nvoid testFunction() {\r\n    final Testable<?, ?> testable = new Testable<>(ILLEGAL_STATE_EXCEPTION);\r\n    final FailableFunction<Throwable, Integer, Throwable> failableFunction = th -> {\r\n        testable.setThrowable(th);\r\n        return testable.testAsInteger();\r\n    };\r\n    final Function<Throwable, Integer> function = Failable.asFunction(failableFunction);\r\n    Throwable e = assertThrows(IllegalStateException.class, () -> function.apply(ILLEGAL_STATE_EXCEPTION));\r\n    assertSame(ILLEGAL_STATE_EXCEPTION, e);\r\n    testable.setThrowable(ERROR);\r\n    e = assertThrows(OutOfMemoryError.class, () -> function.apply(ERROR));\r\n    assertSame(ERROR, e);\r\n    final IOException ioe = new IOException(\"Unknown I/O error\");\r\n    testable.setThrowable(ioe);\r\n    e = assertThrows(UncheckedIOException.class, () -> function.apply(ioe));\r\n    final Throwable t = e.getCause();\r\n    assertNotNull(t);\r\n    assertSame(ioe, t);\r\n    assertEquals(0, function.apply(null).intValue());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\function\\FailableTest.java",
  "methodName" : "testFunctionAndThen",
  "sourceCode" : "@Test\r\nvoid testFunctionAndThen() throws IOException {\r\n    // Unchecked usage pattern in JRE\r\n    final Function<Object, Integer> nopFunction = t -> null;\r\n    nopFunction.andThen(nopFunction);\r\n    // Checked usage pattern\r\n    final FailableFunction<Object, Integer, IOException> failingFunction = t -> {\r\n        throw new IOException();\r\n    };\r\n    final FailableFunction<Object, Integer, IOException> nopFailableFunction = FailableFunction.nop();\r\n    //\r\n    assertThrows(IOException.class, () -> failingFunction.andThen(failingFunction).apply(null));\r\n    assertThrows(IOException.class, () -> failingFunction.andThen(nopFailableFunction).apply(null));\r\n    //\r\n    assertThrows(IOException.class, () -> nopFailableFunction.andThen(failingFunction).apply(null));\r\n    nopFailableFunction.andThen(nopFailableFunction).apply(null);\r\n    // Documented in Javadoc edge-case.\r\n    assertNullPointerException(() -> failingFunction.andThen(null));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\function\\FailableTest.java",
  "methodName" : "testFunctionCompose",
  "sourceCode" : "@Test\r\nvoid testFunctionCompose() throws Throwable {\r\n    final Testable<?, ?> testable = new Testable<>(null);\r\n    final FailableFunction<Object, Integer, Throwable> failing = t -> {\r\n        testable.setThrowable(ERROR);\r\n        testable.test();\r\n        return 0;\r\n    };\r\n    final FailableFunction<Object, Integer, Throwable> nop = FailableFunction.nop();\r\n    Throwable e = assertThrows(OutOfMemoryError.class, () -> nop.compose(failing).apply(0));\r\n    assertSame(ERROR, e);\r\n    e = assertThrows(OutOfMemoryError.class, () -> failing.compose(nop).apply(0));\r\n    assertSame(ERROR, e);\r\n    // Does not throw\r\n    nop.compose(nop);\r\n    // Documented in Javadoc edge-case.\r\n    assertNullPointerException(() -> failing.compose(null));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\function\\FailableTest.java",
  "methodName" : "testFunctionFunction",
  "sourceCode" : "@Test\r\nvoid testFunctionFunction() throws Exception {\r\n    assertEquals(\"foo\", FailableFunction.function(this::throwingFunction).andThen(this::throwingFunction).apply(\"foo\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\function\\FailableTest.java",
  "methodName" : "testFunctionIdentity",
  "sourceCode" : "@Test\r\nvoid testFunctionIdentity() throws Throwable {\r\n    final FailableFunction<Integer, Integer, Throwable> nop = FailableFunction.identity();\r\n    // Does not throw\r\n    nop.compose(nop);\r\n    // Documented in Javadoc edge-case.\r\n    assertNullPointerException(() -> nop.compose(null));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\function\\FailableTest.java",
  "methodName" : "testGetAsBooleanSupplier",
  "sourceCode" : "@Test\r\nvoid testGetAsBooleanSupplier() {\r\n    final Testable<?, ?> testable = new Testable<>(ILLEGAL_STATE_EXCEPTION);\r\n    Throwable e = assertThrows(IllegalStateException.class, () -> Failable.getAsBoolean(testable::testAsBooleanPrimitive));\r\n    assertSame(ILLEGAL_STATE_EXCEPTION, e);\r\n    testable.setThrowable(ERROR);\r\n    e = assertThrows(OutOfMemoryError.class, () -> Failable.getAsBoolean(testable::testAsBooleanPrimitive));\r\n    assertSame(ERROR, e);\r\n    final IOException ioe = new IOException(\"Unknown I/O error\");\r\n    testable.setThrowable(ioe);\r\n    e = assertThrows(UncheckedIOException.class, () -> Failable.getAsBoolean(testable::testAsBooleanPrimitive));\r\n    final Throwable t = e.getCause();\r\n    assertNotNull(t);\r\n    assertSame(ioe, t);\r\n    testable.setThrowable(null);\r\n    assertFalse(Failable.getAsBoolean(testable::testAsBooleanPrimitive));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\function\\FailableTest.java",
  "methodName" : "testGetAsDoubleSupplier",
  "sourceCode" : "@Test\r\nvoid testGetAsDoubleSupplier() {\r\n    final Testable<?, ?> testable = new Testable<>(ILLEGAL_STATE_EXCEPTION);\r\n    Throwable e = assertThrows(IllegalStateException.class, () -> Failable.getAsDouble(testable::testAsDoublePrimitive));\r\n    assertSame(ILLEGAL_STATE_EXCEPTION, e);\r\n    testable.setThrowable(ERROR);\r\n    e = assertThrows(OutOfMemoryError.class, () -> Failable.getAsDouble(testable::testAsDoublePrimitive));\r\n    assertSame(ERROR, e);\r\n    final IOException ioe = new IOException(\"Unknown I/O error\");\r\n    testable.setThrowable(ioe);\r\n    e = assertThrows(UncheckedIOException.class, () -> Failable.getAsDouble(testable::testAsDoublePrimitive));\r\n    final Throwable t = e.getCause();\r\n    assertNotNull(t);\r\n    assertSame(ioe, t);\r\n    testable.setThrowable(null);\r\n    assertEquals(0, Failable.getAsDouble(testable::testAsDoublePrimitive));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\function\\FailableTest.java",
  "methodName" : "testGetAsIntSupplier",
  "sourceCode" : "@Test\r\nvoid testGetAsIntSupplier() {\r\n    final Testable<?, ?> testable = new Testable<>(ILLEGAL_STATE_EXCEPTION);\r\n    Throwable e = assertThrows(IllegalStateException.class, () -> Failable.getAsInt(testable::testAsIntPrimitive));\r\n    assertSame(ILLEGAL_STATE_EXCEPTION, e);\r\n    testable.setThrowable(ERROR);\r\n    e = assertThrows(OutOfMemoryError.class, () -> Failable.getAsInt(testable::testAsIntPrimitive));\r\n    assertSame(ERROR, e);\r\n    final IOException ioe = new IOException(\"Unknown I/O error\");\r\n    testable.setThrowable(ioe);\r\n    e = assertThrows(UncheckedIOException.class, () -> Failable.getAsInt(testable::testAsIntPrimitive));\r\n    final Throwable t = e.getCause();\r\n    assertNotNull(t);\r\n    assertSame(ioe, t);\r\n    testable.setThrowable(null);\r\n    final int i = Failable.getAsInt(testable::testAsInteger);\r\n    assertEquals(0, i);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\function\\FailableTest.java",
  "methodName" : "testGetAsLongSupplier",
  "sourceCode" : "@Test\r\nvoid testGetAsLongSupplier() {\r\n    final Testable<?, ?> testable = new Testable<>(ILLEGAL_STATE_EXCEPTION);\r\n    Throwable e = assertThrows(IllegalStateException.class, () -> Failable.getAsLong(testable::testAsLongPrimitive));\r\n    assertSame(ILLEGAL_STATE_EXCEPTION, e);\r\n    testable.setThrowable(ERROR);\r\n    e = assertThrows(OutOfMemoryError.class, () -> Failable.getAsLong(testable::testAsLongPrimitive));\r\n    assertSame(ERROR, e);\r\n    final IOException ioe = new IOException(\"Unknown I/O error\");\r\n    testable.setThrowable(ioe);\r\n    e = assertThrows(UncheckedIOException.class, () -> Failable.getAsLong(testable::testAsLongPrimitive));\r\n    final Throwable t = e.getCause();\r\n    assertNotNull(t);\r\n    assertSame(ioe, t);\r\n    testable.setThrowable(null);\r\n    final long i = Failable.getAsLong(testable::testAsLongPrimitive);\r\n    assertEquals(0, i);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\function\\FailableTest.java",
  "methodName" : "testGetAsShortSupplier",
  "sourceCode" : "@Test\r\nvoid testGetAsShortSupplier() {\r\n    final Testable<?, ?> testable = new Testable<>(ILLEGAL_STATE_EXCEPTION);\r\n    Throwable e = assertThrows(IllegalStateException.class, () -> Failable.getAsShort(testable::testAsShortPrimitive));\r\n    assertSame(ILLEGAL_STATE_EXCEPTION, e);\r\n    testable.setThrowable(ERROR);\r\n    e = assertThrows(OutOfMemoryError.class, () -> Failable.getAsShort(testable::testAsShortPrimitive));\r\n    assertSame(ERROR, e);\r\n    final IOException ioe = new IOException(\"Unknown I/O error\");\r\n    testable.setThrowable(ioe);\r\n    e = assertThrows(UncheckedIOException.class, () -> Failable.getAsShort(testable::testAsShortPrimitive));\r\n    final Throwable t = e.getCause();\r\n    assertNotNull(t);\r\n    assertSame(ioe, t);\r\n    testable.setThrowable(null);\r\n    final short i = Failable.getAsShort(testable::testAsShortPrimitive);\r\n    assertEquals(0, i);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\function\\FailableTest.java",
  "methodName" : "testGetFromSupplier",
  "sourceCode" : "@Test\r\nvoid testGetFromSupplier() {\r\n    FailureOnOddInvocations.invocations = 0;\r\n    final UndeclaredThrowableException e = assertThrows(UndeclaredThrowableException.class, () -> Failable.run(FailureOnOddInvocations::new));\r\n    final Throwable cause = e.getCause();\r\n    assertNotNull(cause);\r\n    assertInstanceOf(SomeException.class, cause);\r\n    assertEquals(\"Odd Invocation: 1\", cause.getMessage());\r\n    final FailureOnOddInvocations instance = Failable.call(FailureOnOddInvocations::new);\r\n    assertNotNull(instance);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\function\\FailableTest.java",
  "methodName" : "testGetSupplier",
  "sourceCode" : "@Test\r\nvoid testGetSupplier() {\r\n    final Testable<?, ?> testable = new Testable<>(ILLEGAL_STATE_EXCEPTION);\r\n    Throwable e = assertThrows(IllegalStateException.class, () -> Failable.get(testable::testAsInteger));\r\n    assertSame(ILLEGAL_STATE_EXCEPTION, e);\r\n    testable.setThrowable(ERROR);\r\n    e = assertThrows(OutOfMemoryError.class, () -> Failable.get(testable::testAsInteger));\r\n    assertSame(ERROR, e);\r\n    final IOException ioe = new IOException(\"Unknown I/O error\");\r\n    testable.setThrowable(ioe);\r\n    e = assertThrows(UncheckedIOException.class, () -> Failable.get(testable::testAsInteger));\r\n    final Throwable t = e.getCause();\r\n    assertNotNull(t);\r\n    assertSame(ioe, t);\r\n    testable.setThrowable(null);\r\n    final Integer i = Failable.apply(Testable::testAsInteger, testable);\r\n    assertNotNull(i);\r\n    assertEquals(0, i.intValue());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\function\\FailableTest.java",
  "methodName" : "testIntConsumerAndThen",
  "sourceCode" : "@Test\r\nvoid testIntConsumerAndThen() throws Throwable {\r\n    final Testable<?, ?> testable = new Testable<>(null);\r\n    final FailableIntConsumer<Throwable> failing = t -> {\r\n        testable.setThrowable(ERROR);\r\n        testable.test();\r\n    };\r\n    final FailableIntConsumer<Throwable> nop = FailableIntConsumer.nop();\r\n    Throwable e = assertThrows(OutOfMemoryError.class, () -> nop.andThen(failing).accept(0));\r\n    assertSame(ERROR, e);\r\n    e = assertThrows(OutOfMemoryError.class, () -> failing.andThen(nop).accept(0));\r\n    assertSame(ERROR, e);\r\n    // Does not throw\r\n    nop.andThen(nop);\r\n    // Documented in Javadoc edge-case.\r\n    assertNullPointerException(() -> failing.andThen(null));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\function\\FailableTest.java",
  "methodName" : "testIntPredicate",
  "sourceCode" : "@Test\r\nvoid testIntPredicate() throws Throwable {\r\n    FailureOnOddInvocations.invocations = 0;\r\n    final FailableIntPredicate<Throwable> failablePredicate = FailureOnOddInvocations::testInt;\r\n    assertThrows(SomeException.class, () -> failablePredicate.test(1));\r\n    failablePredicate.test(1);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\function\\FailableTest.java",
  "methodName" : "testIntPredicateAnd",
  "sourceCode" : "@Test\r\nvoid testIntPredicateAnd() throws Throwable {\r\n    assertTrue(FailableIntPredicate.TRUE.and(FailableIntPredicate.TRUE).test(0));\r\n    assertFalse(FailableIntPredicate.TRUE.and(FailableIntPredicate.FALSE).test(0));\r\n    assertFalse(FailableIntPredicate.FALSE.and(FailableIntPredicate.TRUE).test(0));\r\n    assertFalse(FailableIntPredicate.FALSE.and(FailableIntPredicate.FALSE).test(0));\r\n    // null tests\r\n    assertNullPointerException(() -> assertFalse(FailableIntPredicate.falsePredicate().and(null).test(0)));\r\n    assertNullPointerException(() -> assertTrue(FailableIntPredicate.truePredicate().and(null).test(0)));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\function\\FailableTest.java",
  "methodName" : "testIntPredicateNegate",
  "sourceCode" : "@Test\r\nvoid testIntPredicateNegate() throws Throwable {\r\n    assertFalse(FailableIntPredicate.TRUE.negate().test(0));\r\n    assertFalse(FailableIntPredicate.truePredicate().negate().test(0));\r\n    assertTrue(FailableIntPredicate.FALSE.negate().test(0));\r\n    assertTrue(FailableIntPredicate.falsePredicate().negate().test(0));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\function\\FailableTest.java",
  "methodName" : "testIntPredicateOr",
  "sourceCode" : "@Test\r\nvoid testIntPredicateOr() throws Throwable {\r\n    assertTrue(FailableIntPredicate.TRUE.or(FailableIntPredicate.TRUE).test(0));\r\n    assertTrue(FailableIntPredicate.TRUE.or(FailableIntPredicate.FALSE).test(0));\r\n    assertTrue(FailableIntPredicate.FALSE.or(FailableIntPredicate.TRUE).test(0));\r\n    assertFalse(FailableIntPredicate.FALSE.or(FailableIntPredicate.FALSE).test(0));\r\n    // null tests\r\n    assertNullPointerException(() -> assertFalse(FailableIntPredicate.falsePredicate().or(null).test(0)));\r\n    assertNullPointerException(() -> assertTrue(FailableIntPredicate.truePredicate().or(null).test(0)));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\function\\FailableTest.java",
  "methodName" : "testIntUnaryOperatorAndThen",
  "sourceCode" : "@Test\r\nvoid testIntUnaryOperatorAndThen() throws Throwable {\r\n    final Testable<?, ?> testable = new Testable<>(null);\r\n    final FailableIntUnaryOperator<Throwable> failing = t -> {\r\n        testable.setThrowable(ERROR);\r\n        testable.test();\r\n        return 0;\r\n    };\r\n    final FailableIntUnaryOperator<Throwable> nop = FailableIntUnaryOperator.nop();\r\n    Throwable e = assertThrows(OutOfMemoryError.class, () -> nop.andThen(failing).applyAsInt(0));\r\n    assertSame(ERROR, e);\r\n    e = assertThrows(OutOfMemoryError.class, () -> failing.andThen(nop).applyAsInt(0));\r\n    assertSame(ERROR, e);\r\n    // Does not throw\r\n    nop.andThen(nop);\r\n    // Documented in Javadoc edge-case.\r\n    assertNullPointerException(() -> failing.andThen(null));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\function\\FailableTest.java",
  "methodName" : "testIntUnaryOperatorCompose",
  "sourceCode" : "@Test\r\nvoid testIntUnaryOperatorCompose() throws Throwable {\r\n    final Testable<?, ?> testable = new Testable<>(null);\r\n    final FailableIntUnaryOperator<Throwable> failing = t -> {\r\n        testable.setThrowable(ERROR);\r\n        testable.test();\r\n        return 0;\r\n    };\r\n    final FailableIntUnaryOperator<Throwable> nop = FailableIntUnaryOperator.nop();\r\n    Throwable e = assertThrows(OutOfMemoryError.class, () -> nop.compose(failing).applyAsInt(0));\r\n    assertSame(ERROR, e);\r\n    e = assertThrows(OutOfMemoryError.class, () -> failing.compose(nop).applyAsInt(0));\r\n    assertSame(ERROR, e);\r\n    // Does not throw\r\n    nop.compose(nop);\r\n    // Documented in Javadoc edge-case.\r\n    assertNullPointerException(() -> failing.compose(null));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\function\\FailableTest.java",
  "methodName" : "testIntUnaryOperatorIdentity",
  "sourceCode" : "@Test\r\nvoid testIntUnaryOperatorIdentity() throws Throwable {\r\n    final FailableIntUnaryOperator<Throwable> nop = FailableIntUnaryOperator.identity();\r\n    // Does not throw\r\n    nop.compose(nop);\r\n    // Documented in Javadoc edge-case.\r\n    assertNullPointerException(() -> nop.compose(null));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\function\\FailableTest.java",
  "methodName" : "testLongConsumerAndThen",
  "sourceCode" : "@Test\r\nvoid testLongConsumerAndThen() throws Throwable {\r\n    final Testable<?, ?> testable = new Testable<>(null);\r\n    final FailableLongConsumer<Throwable> failing = t -> {\r\n        testable.setThrowable(ERROR);\r\n        testable.test();\r\n    };\r\n    final FailableLongConsumer<Throwable> nop = FailableLongConsumer.nop();\r\n    Throwable e = assertThrows(OutOfMemoryError.class, () -> nop.andThen(failing).accept(0L));\r\n    assertSame(ERROR, e);\r\n    e = assertThrows(OutOfMemoryError.class, () -> failing.andThen(nop).accept(0L));\r\n    assertSame(ERROR, e);\r\n    // Does not throw\r\n    nop.andThen(nop);\r\n    // Documented in Javadoc edge-case.\r\n    assertNullPointerException(() -> failing.andThen(null));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\function\\FailableTest.java",
  "methodName" : "testLongPredicate",
  "sourceCode" : "@Test\r\nvoid testLongPredicate() throws Throwable {\r\n    FailureOnOddInvocations.invocations = 0;\r\n    final FailableLongPredicate<Throwable> failablePredicate = FailureOnOddInvocations::testLong;\r\n    assertThrows(SomeException.class, () -> failablePredicate.test(1L));\r\n    failablePredicate.test(1L);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\function\\FailableTest.java",
  "methodName" : "testLongPredicateAnd",
  "sourceCode" : "@Test\r\nvoid testLongPredicateAnd() throws Throwable {\r\n    assertTrue(FailableLongPredicate.TRUE.and(FailableLongPredicate.TRUE).test(0));\r\n    assertFalse(FailableLongPredicate.TRUE.and(FailableLongPredicate.FALSE).test(0));\r\n    assertFalse(FailableLongPredicate.FALSE.and(FailableLongPredicate.TRUE).test(0));\r\n    assertFalse(FailableLongPredicate.FALSE.and(FailableLongPredicate.FALSE).test(0));\r\n    // null tests\r\n    assertNullPointerException(() -> assertFalse(FailableLongPredicate.falsePredicate().and(null).test(0)));\r\n    assertNullPointerException(() -> assertTrue(FailableLongPredicate.truePredicate().and(null).test(0)));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\function\\FailableTest.java",
  "methodName" : "testLongPredicateNegate",
  "sourceCode" : "@Test\r\nvoid testLongPredicateNegate() throws Throwable {\r\n    assertFalse(FailableLongPredicate.TRUE.negate().test(0L));\r\n    assertFalse(FailableLongPredicate.truePredicate().negate().test(0L));\r\n    assertTrue(FailableLongPredicate.FALSE.negate().test(0L));\r\n    assertTrue(FailableLongPredicate.falsePredicate().negate().test(0L));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\function\\FailableTest.java",
  "methodName" : "testLongPredicateOr",
  "sourceCode" : "@Test\r\nvoid testLongPredicateOr() throws Throwable {\r\n    assertTrue(FailableLongPredicate.TRUE.or(FailableLongPredicate.TRUE).test(0));\r\n    assertTrue(FailableLongPredicate.TRUE.or(FailableLongPredicate.FALSE).test(0));\r\n    assertTrue(FailableLongPredicate.FALSE.or(FailableLongPredicate.TRUE).test(0));\r\n    assertFalse(FailableLongPredicate.FALSE.or(FailableLongPredicate.FALSE).test(0));\r\n    // null tests\r\n    assertNullPointerException(() -> assertFalse(FailableLongPredicate.falsePredicate().or(null).test(0)));\r\n    assertNullPointerException(() -> assertTrue(FailableLongPredicate.truePredicate().or(null).test(0)));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\function\\FailableTest.java",
  "methodName" : "testLongUnaryOperatorAndThen",
  "sourceCode" : "@Test\r\nvoid testLongUnaryOperatorAndThen() throws Throwable {\r\n    final Testable<?, ?> testable = new Testable<>(null);\r\n    final FailableLongUnaryOperator<Throwable> failing = t -> {\r\n        testable.setThrowable(ERROR);\r\n        testable.test();\r\n        return 0L;\r\n    };\r\n    final FailableLongUnaryOperator<Throwable> nop = FailableLongUnaryOperator.nop();\r\n    Throwable e = assertThrows(OutOfMemoryError.class, () -> nop.andThen(failing).applyAsLong(0L));\r\n    assertSame(ERROR, e);\r\n    e = assertThrows(OutOfMemoryError.class, () -> failing.andThen(nop).applyAsLong(0L));\r\n    assertSame(ERROR, e);\r\n    // Does not throw\r\n    nop.andThen(nop);\r\n    // Documented in Javadoc edge-case.\r\n    assertNullPointerException(() -> failing.andThen(null));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\function\\FailableTest.java",
  "methodName" : "testLongUnaryOperatorCompose",
  "sourceCode" : "@Test\r\nvoid testLongUnaryOperatorCompose() throws Throwable {\r\n    final Testable<?, ?> testable = new Testable<>(null);\r\n    final FailableLongUnaryOperator<Throwable> failing = t -> {\r\n        testable.setThrowable(ERROR);\r\n        testable.test();\r\n        return 0L;\r\n    };\r\n    final FailableLongUnaryOperator<Throwable> nop = FailableLongUnaryOperator.nop();\r\n    Throwable e = assertThrows(OutOfMemoryError.class, () -> nop.compose(failing).applyAsLong(0L));\r\n    assertSame(ERROR, e);\r\n    e = assertThrows(OutOfMemoryError.class, () -> failing.compose(nop).applyAsLong(0L));\r\n    assertSame(ERROR, e);\r\n    // Does not throw\r\n    nop.compose(nop);\r\n    // Documented in Javadoc edge-case.\r\n    assertNullPointerException(() -> failing.compose(null));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\function\\FailableTest.java",
  "methodName" : "testLongUnaryOperatorIdentity",
  "sourceCode" : "@Test\r\nvoid testLongUnaryOperatorIdentity() throws Throwable {\r\n    final FailableLongUnaryOperator<Throwable> nop = FailableLongUnaryOperator.identity();\r\n    // Does not throw\r\n    nop.compose(nop);\r\n    // Documented in Javadoc edge-case.\r\n    assertNullPointerException(() -> nop.compose(null));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\function\\FailableTest.java",
  "methodName" : "testPredicate",
  "sourceCode" : "@Test\r\n@DisplayName(\"Test that asPredicate(FailablePredicate) is converted to -> Predicate \")\r\nvoid testPredicate() {\r\n    FailureOnOddInvocations.invocations = 0;\r\n    final FailablePredicate<Object, Throwable> failablePredicate = t -> FailureOnOddInvocations.testGetBool();\r\n    final Predicate<?> predicate = Failable.asPredicate(failablePredicate);\r\n    final UndeclaredThrowableException e = assertThrows(UndeclaredThrowableException.class, () -> predicate.test(null));\r\n    final Throwable cause = e.getCause();\r\n    assertNotNull(cause);\r\n    assertInstanceOf(SomeException.class, cause);\r\n    assertEquals(\"Odd Invocation: 1\", cause.getMessage());\r\n    final boolean instance = predicate.test(null);\r\n    assertNotNull(instance);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\function\\FailableTest.java",
  "methodName" : "testPredicateAnd",
  "sourceCode" : "@Test\r\nvoid testPredicateAnd() throws Throwable {\r\n    assertTrue(FailablePredicate.TRUE.and(FailablePredicate.TRUE).test(null));\r\n    assertFalse(FailablePredicate.TRUE.and(FailablePredicate.FALSE).test(null));\r\n    assertFalse(FailablePredicate.FALSE.and(FailablePredicate.TRUE).test(null));\r\n    assertFalse(FailablePredicate.FALSE.and(FailablePredicate.FALSE).test(null));\r\n    // null tests\r\n    assertNullPointerException(() -> assertFalse(FailablePredicate.FALSE.and(null).test(null)));\r\n    assertNullPointerException(() -> assertTrue(FailablePredicate.TRUE.and(null).test(null)));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\function\\FailableTest.java",
  "methodName" : "testPredicateNegate",
  "sourceCode" : "@Test\r\nvoid testPredicateNegate() throws Throwable {\r\n    assertFalse(FailablePredicate.TRUE.negate().test(null));\r\n    assertFalse(FailablePredicate.truePredicate().negate().test(null));\r\n    assertTrue(FailablePredicate.FALSE.negate().test(null));\r\n    assertTrue(FailablePredicate.falsePredicate().negate().test(null));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\function\\FailableTest.java",
  "methodName" : "testPredicateOr",
  "sourceCode" : "@Test\r\nvoid testPredicateOr() throws Throwable {\r\n    assertTrue(FailablePredicate.TRUE.or(FailablePredicate.TRUE).test(null));\r\n    assertTrue(FailablePredicate.TRUE.or(FailablePredicate.FALSE).test(null));\r\n    assertTrue(FailablePredicate.FALSE.or(FailablePredicate.TRUE).test(null));\r\n    assertFalse(FailablePredicate.FALSE.or(FailablePredicate.FALSE).test(null));\r\n    // null tests\r\n    assertNullPointerException(() -> assertFalse(FailablePredicate.FALSE.or(null).test(null)));\r\n    assertNullPointerException(() -> assertTrue(FailablePredicate.TRUE.or(null).test(null)));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\function\\FailableTest.java",
  "methodName" : "testRunnable",
  "sourceCode" : "@Test\r\nvoid testRunnable() {\r\n    FailureOnOddInvocations.invocations = 0;\r\n    final UndeclaredThrowableException e = assertThrows(UndeclaredThrowableException.class, () -> Failable.run(FailureOnOddInvocations::new));\r\n    final Throwable cause = e.getCause();\r\n    assertNotNull(cause);\r\n    assertInstanceOf(SomeException.class, cause);\r\n    assertEquals(\"Odd Invocation: 1\", cause.getMessage());\r\n    // Even invocations, should not throw an exception\r\n    Failable.run(FailureOnOddInvocations::new);\r\n    Failable.run(null);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\function\\FailableTest.java",
  "methodName" : "testThrows_FailableBiConsumer_Object_Throwable",
  "sourceCode" : "/**\r\n * Tests that our failable interface is properly defined to throw any exception using the top level generic types\r\n * Object and Throwable.\r\n */\r\n@Test\r\nvoid testThrows_FailableBiConsumer_Object_Throwable() {\r\n    assertThrows(IOException.class, () -> new FailableBiConsumer<Object, Object, Throwable>() {\r\n\r\n        @Override\r\n        public void accept(final Object object1, final Object object2) throws Throwable {\r\n            throw new IOException(\"test\");\r\n        }\r\n    }.accept(new Object(), new Object()));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\function\\FailableTest.java",
  "methodName" : "testThrows_FailableBiConsumer_String_IOException",
  "sourceCode" : "/**\r\n * Tests that our failable interface is properly defined to throw any exception using String and IOExceptions as\r\n * generic test types.\r\n */\r\n@Test\r\nvoid testThrows_FailableBiConsumer_String_IOException() {\r\n    assertThrows(IOException.class, () -> new FailableBiConsumer<String, String, IOException>() {\r\n\r\n        @Override\r\n        public void accept(final String object1, final String object2) throws IOException {\r\n            throw new IOException(\"test\");\r\n        }\r\n    }.accept(StringUtils.EMPTY, StringUtils.EMPTY));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\function\\FailableTest.java",
  "methodName" : "testThrows_FailableBiFunction_Object_Throwable",
  "sourceCode" : "/**\r\n * Tests that our failable interface is properly defined to throw any exception using the top level generic types\r\n * Object and Throwable.\r\n */\r\n@Test\r\nvoid testThrows_FailableBiFunction_Object_Throwable() {\r\n    assertThrows(IOException.class, () -> new FailableBiFunction<Object, Object, Object, Throwable>() {\r\n\r\n        @Override\r\n        public Object apply(final Object input1, final Object input2) throws Throwable {\r\n            throw new IOException(\"test\");\r\n        }\r\n    }.apply(new Object(), new Object()));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\function\\FailableTest.java",
  "methodName" : "testThrows_FailableBiFunction_String_IOException",
  "sourceCode" : "/**\r\n * Tests that our failable interface is properly defined to throw any exception using String and IOExceptions as\r\n * generic test types.\r\n */\r\n@Test\r\nvoid testThrows_FailableBiFunction_String_IOException() {\r\n    assertThrows(IOException.class, () -> new FailableBiFunction<String, String, String, IOException>() {\r\n\r\n        @Override\r\n        public String apply(final String input1, final String input2) throws IOException {\r\n            throw new IOException(\"test\");\r\n        }\r\n    }.apply(StringUtils.EMPTY, StringUtils.EMPTY));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\function\\FailableTest.java",
  "methodName" : "testThrows_FailableBiPredicate_Object_Throwable",
  "sourceCode" : "/**\r\n * Tests that our failable interface is properly defined to throw any exception using the top level generic types\r\n * Object and Throwable.\r\n */\r\n@Test\r\nvoid testThrows_FailableBiPredicate_Object_Throwable() {\r\n    assertThrows(IOException.class, () -> new FailableBiPredicate<Object, Object, Throwable>() {\r\n\r\n        @Override\r\n        public boolean test(final Object object1, final Object object2) throws Throwable {\r\n            throw new IOException(\"test\");\r\n        }\r\n    }.test(new Object(), new Object()));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\function\\FailableTest.java",
  "methodName" : "testThrows_FailableBiPredicate_String_IOException",
  "sourceCode" : "/**\r\n * Tests that our failable interface is properly defined to throw any exception using String and IOExceptions as\r\n * generic test types.\r\n */\r\n@Test\r\nvoid testThrows_FailableBiPredicate_String_IOException() {\r\n    assertThrows(IOException.class, () -> new FailableBiPredicate<String, String, IOException>() {\r\n\r\n        @Override\r\n        public boolean test(final String object1, final String object2) throws IOException {\r\n            throw new IOException(\"test\");\r\n        }\r\n    }.test(StringUtils.EMPTY, StringUtils.EMPTY));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\function\\FailableTest.java",
  "methodName" : "testThrows_FailableBooleanSupplier_IOException",
  "sourceCode" : "/**\r\n * Tests that our failable interface is properly defined to throw any exception using String and IOExceptions as\r\n * generic test types.\r\n */\r\n@Test\r\nvoid testThrows_FailableBooleanSupplier_IOException() {\r\n    assertThrows(IOException.class, () -> new FailableBooleanSupplier<IOException>() {\r\n\r\n        @Override\r\n        public boolean getAsBoolean() throws IOException {\r\n            throw new IOException(\"test\");\r\n        }\r\n    }.getAsBoolean());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\function\\FailableTest.java",
  "methodName" : "testThrows_FailableBooleanSupplier_Throwable",
  "sourceCode" : "/**\r\n * Tests that our failable interface is properly defined to throw any exception using the top level generic types\r\n * Object and Throwable.\r\n */\r\n@Test\r\nvoid testThrows_FailableBooleanSupplier_Throwable() {\r\n    assertThrows(IOException.class, () -> new FailableBooleanSupplier<Throwable>() {\r\n\r\n        @Override\r\n        public boolean getAsBoolean() throws Throwable {\r\n            throw new IOException(\"test\");\r\n        }\r\n    }.getAsBoolean());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\function\\FailableTest.java",
  "methodName" : "testThrows_FailableByteConsumer_IOException",
  "sourceCode" : "/**\r\n * Tests that our failable interface is properly defined to throw any exception using String and IOExceptions as\r\n * generic test types.\r\n */\r\n@Test\r\nvoid testThrows_FailableByteConsumer_IOException() {\r\n    assertThrows(IOException.class, () -> new FailableByteConsumer<IOException>() {\r\n\r\n        @Override\r\n        public void accept(final byte value) throws IOException {\r\n            throw new IOException(\"test\");\r\n        }\r\n    }.accept((byte) 0));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\function\\FailableTest.java",
  "methodName" : "testThrows_FailableByteConsumer_Throwable",
  "sourceCode" : "/**\r\n * Tests that our failable interface is properly defined to throw any exception using the top level generic types\r\n * Object and Throwable.\r\n */\r\n@Test\r\nvoid testThrows_FailableByteConsumer_Throwable() {\r\n    assertThrows(IOException.class, () -> new FailableByteConsumer<Throwable>() {\r\n\r\n        @Override\r\n        public void accept(final byte value) throws Throwable {\r\n            throw new IOException(\"test\");\r\n        }\r\n    }.accept((byte) 0));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\function\\FailableTest.java",
  "methodName" : "testThrows_FailableByteSupplier_IOException",
  "sourceCode" : "/**\r\n * Tests that our failable interface is properly defined to throw any exception using String and IOExceptions as\r\n * generic test types.\r\n */\r\n@Test\r\nvoid testThrows_FailableByteSupplier_IOException() {\r\n    assertThrows(IOException.class, () -> new FailableByteSupplier<IOException>() {\r\n\r\n        @Override\r\n        public byte getAsByte() throws IOException {\r\n            throw new IOException(\"test\");\r\n        }\r\n    }.getAsByte());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\function\\FailableTest.java",
  "methodName" : "testThrows_FailableByteSupplier_Throwable",
  "sourceCode" : "/**\r\n * Tests that our failable interface is properly defined to throw any exception using the top level generic types\r\n * Object and Throwable.\r\n */\r\n@Test\r\nvoid testThrows_FailableByteSupplier_Throwable() {\r\n    assertThrows(IOException.class, () -> new FailableByteSupplier<Throwable>() {\r\n\r\n        @Override\r\n        public byte getAsByte() throws Throwable {\r\n            throw new IOException(\"test\");\r\n        }\r\n    }.getAsByte());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\function\\FailableTest.java",
  "methodName" : "testThrows_FailableCallable_Object_Throwable",
  "sourceCode" : "/**\r\n * Tests that our failable interface is properly defined to throw any exception using the top level generic types\r\n * Object and Throwable.\r\n */\r\n@Test\r\nvoid testThrows_FailableCallable_Object_Throwable() {\r\n    assertThrows(IOException.class, () -> new FailableCallable<Object, Throwable>() {\r\n\r\n        @Override\r\n        public Object call() throws Throwable {\r\n            throw new IOException(\"test\");\r\n        }\r\n    }.call());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\function\\FailableTest.java",
  "methodName" : "testThrows_FailableCallable_String_IOException",
  "sourceCode" : "/**\r\n * Tests that our failable interface is properly defined to throw any exception using String and IOExceptions as\r\n * generic test types.\r\n */\r\n@Test\r\nvoid testThrows_FailableCallable_String_IOException() {\r\n    assertThrows(IOException.class, () -> new FailableCallable<String, IOException>() {\r\n\r\n        @Override\r\n        public String call() throws IOException {\r\n            throw new IOException(\"test\");\r\n        }\r\n    }.call());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\function\\FailableTest.java",
  "methodName" : "testThrows_FailableConsumer_Object_Throwable",
  "sourceCode" : "/**\r\n * Tests that our failable interface is properly defined to throw any exception using the top level generic types\r\n * Object and Throwable.\r\n */\r\n@Test\r\nvoid testThrows_FailableConsumer_Object_Throwable() {\r\n    assertThrows(IOException.class, () -> new FailableConsumer<Object, Throwable>() {\r\n\r\n        @Override\r\n        public void accept(final Object object) throws Throwable {\r\n            throw new IOException(\"test\");\r\n        }\r\n    }.accept(new Object()));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\function\\FailableTest.java",
  "methodName" : "testThrows_FailableConsumer_String_IOException",
  "sourceCode" : "/**\r\n * Tests that our failable interface is properly defined to throw any exception using String and IOExceptions as\r\n * generic test types.\r\n */\r\n@Test\r\nvoid testThrows_FailableConsumer_String_IOException() {\r\n    assertThrows(IOException.class, () -> new FailableConsumer<String, IOException>() {\r\n\r\n        @Override\r\n        public void accept(final String object) throws IOException {\r\n            throw new IOException(\"test\");\r\n        }\r\n    }.accept(StringUtils.EMPTY));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\function\\FailableTest.java",
  "methodName" : "testThrows_FailableDoubleBinaryOperator_IOException",
  "sourceCode" : "/**\r\n * Tests that our failable interface is properly defined to throw any exception using String and IOExceptions as\r\n * generic test types.\r\n */\r\n@Test\r\nvoid testThrows_FailableDoubleBinaryOperator_IOException() {\r\n    assertThrows(IOException.class, () -> new FailableDoubleBinaryOperator<IOException>() {\r\n\r\n        @Override\r\n        public double applyAsDouble(final double left, final double right) throws IOException {\r\n            throw new IOException(\"test\");\r\n        }\r\n    }.applyAsDouble(0, 0));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\function\\FailableTest.java",
  "methodName" : "testThrows_FailableDoubleBinaryOperator_Throwable",
  "sourceCode" : "/**\r\n * Tests that our failable interface is properly defined to throw any exception using the top level generic types\r\n * Object and Throwable.\r\n */\r\n@Test\r\nvoid testThrows_FailableDoubleBinaryOperator_Throwable() {\r\n    assertThrows(IOException.class, () -> new FailableDoubleBinaryOperator<Throwable>() {\r\n\r\n        @Override\r\n        public double applyAsDouble(final double left, final double right) throws Throwable {\r\n            throw new IOException(\"test\");\r\n        }\r\n    }.applyAsDouble(0, 0));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\function\\FailableTest.java",
  "methodName" : "testThrows_FailableDoubleConsumer_IOException",
  "sourceCode" : "/**\r\n * Tests that our failable interface is properly defined to throw any exception using String and IOExceptions as\r\n * generic test types.\r\n */\r\n@Test\r\nvoid testThrows_FailableDoubleConsumer_IOException() {\r\n    assertThrows(IOException.class, () -> new FailableDoubleConsumer<IOException>() {\r\n\r\n        @Override\r\n        public void accept(final double value) throws IOException {\r\n            throw new IOException(\"test\");\r\n        }\r\n    }.accept(0));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\function\\FailableTest.java",
  "methodName" : "testThrows_FailableDoubleConsumer_Throwable",
  "sourceCode" : "/**\r\n * Tests that our failable interface is properly defined to throw any exception using the top level generic types\r\n * Object and Throwable.\r\n */\r\n@Test\r\nvoid testThrows_FailableDoubleConsumer_Throwable() {\r\n    assertThrows(IOException.class, () -> new FailableDoubleConsumer<Throwable>() {\r\n\r\n        @Override\r\n        public void accept(final double value) throws Throwable {\r\n            throw new IOException(\"test\");\r\n        }\r\n    }.accept(0));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\function\\FailableTest.java",
  "methodName" : "testThrows_FailableDoubleFunction_IOException",
  "sourceCode" : "/**\r\n * Tests that our failable interface is properly defined to throw any exception using String and IOExceptions as\r\n * generic test types.\r\n */\r\n@Test\r\nvoid testThrows_FailableDoubleFunction_IOException() {\r\n    assertThrows(IOException.class, () -> new FailableDoubleFunction<String, IOException>() {\r\n\r\n        @Override\r\n        public String apply(final double input) throws IOException {\r\n            throw new IOException(\"test\");\r\n        }\r\n    }.apply(0));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\function\\FailableTest.java",
  "methodName" : "testThrows_FailableDoubleFunction_Throwable",
  "sourceCode" : "/**\r\n * Tests that our failable interface is properly defined to throw any exception using the top level generic types\r\n * Object and Throwable.\r\n */\r\n@Test\r\nvoid testThrows_FailableDoubleFunction_Throwable() {\r\n    assertThrows(IOException.class, () -> new FailableDoubleFunction<Object, Throwable>() {\r\n\r\n        @Override\r\n        public Object apply(final double input) throws Throwable {\r\n            throw new IOException(\"test\");\r\n        }\r\n    }.apply(0));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\function\\FailableTest.java",
  "methodName" : "testThrows_FailableDoubleSupplier_IOException",
  "sourceCode" : "/**\r\n * Tests that our failable interface is properly defined to throw any exception using String and IOExceptions as\r\n * generic test types.\r\n */\r\n@Test\r\nvoid testThrows_FailableDoubleSupplier_IOException() {\r\n    assertThrows(IOException.class, () -> new FailableDoubleSupplier<IOException>() {\r\n\r\n        @Override\r\n        public double getAsDouble() throws IOException {\r\n            throw new IOException(\"test\");\r\n        }\r\n    }.getAsDouble());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\function\\FailableTest.java",
  "methodName" : "testThrows_FailableDoubleSupplier_Throwable",
  "sourceCode" : "/**\r\n * Tests that our failable interface is properly defined to throw any exception using the top level generic types\r\n * Object and Throwable.\r\n */\r\n@Test\r\nvoid testThrows_FailableDoubleSupplier_Throwable() {\r\n    assertThrows(IOException.class, () -> new FailableDoubleSupplier<Throwable>() {\r\n\r\n        @Override\r\n        public double getAsDouble() throws Throwable {\r\n            throw new IOException(\"test\");\r\n        }\r\n    }.getAsDouble());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\function\\FailableTest.java",
  "methodName" : "testThrows_FailableDoubleToIntFunction_IOException",
  "sourceCode" : "/**\r\n * Tests that our failable interface is properly defined to throw any exception using String and IOExceptions as\r\n * generic test types.\r\n */\r\n@Test\r\nvoid testThrows_FailableDoubleToIntFunction_IOException() {\r\n    assertThrows(IOException.class, () -> new FailableDoubleToIntFunction<IOException>() {\r\n\r\n        @Override\r\n        public int applyAsInt(final double value) throws IOException {\r\n            throw new IOException(\"test\");\r\n        }\r\n    }.applyAsInt(0));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\function\\FailableTest.java",
  "methodName" : "testThrows_FailableDoubleToIntFunction_Throwable",
  "sourceCode" : "/**\r\n * Tests that our failable interface is properly defined to throw any exception using the top level generic types\r\n * Object and Throwable.\r\n */\r\n@Test\r\nvoid testThrows_FailableDoubleToIntFunction_Throwable() {\r\n    assertThrows(IOException.class, () -> new FailableDoubleToIntFunction<Throwable>() {\r\n\r\n        @Override\r\n        public int applyAsInt(final double value) throws Throwable {\r\n            throw new IOException(\"test\");\r\n        }\r\n    }.applyAsInt(0));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\function\\FailableTest.java",
  "methodName" : "testThrows_FailableDoubleToLongFunction_IOException",
  "sourceCode" : "/**\r\n * Tests that our failable interface is properly defined to throw any exception using String and IOExceptions as\r\n * generic test types.\r\n */\r\n@Test\r\nvoid testThrows_FailableDoubleToLongFunction_IOException() {\r\n    assertThrows(IOException.class, () -> new FailableDoubleToLongFunction<IOException>() {\r\n\r\n        @Override\r\n        public int applyAsLong(final double value) throws IOException {\r\n            throw new IOException(\"test\");\r\n        }\r\n    }.applyAsLong(0));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\function\\FailableTest.java",
  "methodName" : "testThrows_FailableDoubleToLongFunction_Throwable",
  "sourceCode" : "/**\r\n * Tests that our failable interface is properly defined to throw any exception using the top level generic types\r\n * Object and Throwable.\r\n */\r\n@Test\r\nvoid testThrows_FailableDoubleToLongFunction_Throwable() {\r\n    assertThrows(IOException.class, () -> new FailableDoubleToLongFunction<Throwable>() {\r\n\r\n        @Override\r\n        public int applyAsLong(final double value) throws Throwable {\r\n            throw new IOException(\"test\");\r\n        }\r\n    }.applyAsLong(0));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\function\\FailableTest.java",
  "methodName" : "testThrows_FailableFunction_Object_Throwable",
  "sourceCode" : "/**\r\n * Tests that our failable interface is properly defined to throw any exception using the top level generic types\r\n * Object and Throwable.\r\n */\r\n@Test\r\nvoid testThrows_FailableFunction_Object_Throwable() {\r\n    assertThrows(IOException.class, () -> new FailableFunction<Object, Object, Throwable>() {\r\n\r\n        @Override\r\n        public Object apply(final Object input) throws Throwable {\r\n            throw new IOException(\"test\");\r\n        }\r\n    }.apply(new Object()));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\function\\FailableTest.java",
  "methodName" : "testThrows_FailableFunction_String_IOException",
  "sourceCode" : "/**\r\n * Tests that our failable interface is properly defined to throw any exception using String and IOExceptions as\r\n * generic test types.\r\n */\r\n@Test\r\nvoid testThrows_FailableFunction_String_IOException() {\r\n    assertThrows(IOException.class, () -> new FailableFunction<String, String, IOException>() {\r\n\r\n        @Override\r\n        public String apply(final String input) throws IOException {\r\n            throw new IOException(\"test\");\r\n        }\r\n    }.apply(StringUtils.EMPTY));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\function\\FailableTest.java",
  "methodName" : "testThrows_FailableIntBinaryOperator_IOException",
  "sourceCode" : "/**\r\n * Tests that our failable interface is properly defined to throw any exception using String and IOExceptions as\r\n * generic test types.\r\n */\r\n@Test\r\nvoid testThrows_FailableIntBinaryOperator_IOException() {\r\n    assertThrows(IOException.class, () -> new FailableIntBinaryOperator<IOException>() {\r\n\r\n        @Override\r\n        public int applyAsInt(final int left, final int right) throws IOException {\r\n            throw new IOException(\"test\");\r\n        }\r\n    }.applyAsInt(0, 0));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\function\\FailableTest.java",
  "methodName" : "testThrows_FailableIntBinaryOperator_Throwable",
  "sourceCode" : "/**\r\n * Tests that our failable interface is properly defined to throw any exception using the top level generic types\r\n * Object and Throwable.\r\n */\r\n@Test\r\nvoid testThrows_FailableIntBinaryOperator_Throwable() {\r\n    assertThrows(IOException.class, () -> new FailableIntBinaryOperator<Throwable>() {\r\n\r\n        @Override\r\n        public int applyAsInt(final int left, final int right) throws Throwable {\r\n            throw new IOException(\"test\");\r\n        }\r\n    }.applyAsInt(0, 0));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\function\\FailableTest.java",
  "methodName" : "testThrows_FailableIntConsumer_IOException",
  "sourceCode" : "/**\r\n * Tests that our failable interface is properly defined to throw any exception using String and IOExceptions as\r\n * generic test types.\r\n */\r\n@Test\r\nvoid testThrows_FailableIntConsumer_IOException() {\r\n    assertThrows(IOException.class, () -> new FailableIntConsumer<IOException>() {\r\n\r\n        @Override\r\n        public void accept(final int value) throws IOException {\r\n            throw new IOException(\"test\");\r\n        }\r\n    }.accept(0));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\function\\FailableTest.java",
  "methodName" : "testThrows_FailableIntConsumer_Throwable",
  "sourceCode" : "/**\r\n * Tests that our failable interface is properly defined to throw any exception using the top level generic types\r\n * Object and Throwable.\r\n */\r\n@Test\r\nvoid testThrows_FailableIntConsumer_Throwable() {\r\n    assertThrows(IOException.class, () -> new FailableIntConsumer<Throwable>() {\r\n\r\n        @Override\r\n        public void accept(final int value) throws Throwable {\r\n            throw new IOException(\"test\");\r\n        }\r\n    }.accept(0));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\function\\FailableTest.java",
  "methodName" : "testThrows_FailableIntFunction_Object_Throwable",
  "sourceCode" : "/**\r\n * Tests that our failable interface is properly defined to throw any exception using the top level generic types\r\n * Object and Throwable.\r\n */\r\n@Test\r\nvoid testThrows_FailableIntFunction_Object_Throwable() {\r\n    assertThrows(IOException.class, () -> new FailableIntFunction<Object, Throwable>() {\r\n\r\n        @Override\r\n        public Object apply(final int input) throws Throwable {\r\n            throw new IOException(\"test\");\r\n        }\r\n    }.apply(0));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\function\\FailableTest.java",
  "methodName" : "testThrows_FailableIntFunction_String_IOException",
  "sourceCode" : "/**\r\n * Tests that our failable interface is properly defined to throw any exception using String and IOExceptions as\r\n * generic test types.\r\n */\r\n@Test\r\nvoid testThrows_FailableIntFunction_String_IOException() {\r\n    assertThrows(IOException.class, () -> new FailableIntFunction<String, IOException>() {\r\n\r\n        @Override\r\n        public String apply(final int input) throws IOException {\r\n            throw new IOException(\"test\");\r\n        }\r\n    }.apply(0));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\function\\FailableTest.java",
  "methodName" : "testThrows_FailableIntSupplier_IOException",
  "sourceCode" : "/**\r\n * Tests that our failable interface is properly defined to throw any exception using String and IOExceptions as\r\n * generic test types.\r\n */\r\n@Test\r\nvoid testThrows_FailableIntSupplier_IOException() {\r\n    assertThrows(IOException.class, () -> new FailableIntSupplier<IOException>() {\r\n\r\n        @Override\r\n        public int getAsInt() throws IOException {\r\n            throw new IOException(\"test\");\r\n        }\r\n    }.getAsInt());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\function\\FailableTest.java",
  "methodName" : "testThrows_FailableIntSupplier_Throwable",
  "sourceCode" : "/**\r\n * Tests that our failable interface is properly defined to throw any exception using the top level generic types\r\n * Object and Throwable.\r\n */\r\n@Test\r\nvoid testThrows_FailableIntSupplier_Throwable() {\r\n    assertThrows(IOException.class, () -> new FailableIntSupplier<Throwable>() {\r\n\r\n        @Override\r\n        public int getAsInt() throws Throwable {\r\n            throw new IOException(\"test\");\r\n        }\r\n    }.getAsInt());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\function\\FailableTest.java",
  "methodName" : "testThrows_FailableIntToDoubleFunction_IOException",
  "sourceCode" : "/**\r\n * Tests that our failable interface is properly defined to throw any exception using String and IOExceptions as\r\n * generic test types.\r\n */\r\n@Test\r\nvoid testThrows_FailableIntToDoubleFunction_IOException() {\r\n    assertThrows(IOException.class, () -> new FailableIntToDoubleFunction<IOException>() {\r\n\r\n        @Override\r\n        public double applyAsDouble(final int value) throws IOException {\r\n            throw new IOException(\"test\");\r\n        }\r\n    }.applyAsDouble(0));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\function\\FailableTest.java",
  "methodName" : "testThrows_FailableIntToDoubleFunction_Throwable",
  "sourceCode" : "/**\r\n * Tests that our failable interface is properly defined to throw any exception using the top level generic types\r\n * Object and Throwable.\r\n */\r\n@Test\r\nvoid testThrows_FailableIntToDoubleFunction_Throwable() {\r\n    assertThrows(IOException.class, () -> new FailableIntToDoubleFunction<Throwable>() {\r\n\r\n        @Override\r\n        public double applyAsDouble(final int value) throws Throwable {\r\n            throw new IOException(\"test\");\r\n        }\r\n    }.applyAsDouble(0));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\function\\FailableTest.java",
  "methodName" : "testThrows_FailableIntToFloatFunction_IOException",
  "sourceCode" : "/**\r\n * Tests that our failable interface is properly defined to throw any exception using String and IOExceptions as\r\n * generic test types.\r\n */\r\n@Test\r\nvoid testThrows_FailableIntToFloatFunction_IOException() {\r\n    assertThrows(IOException.class, () -> new FailableIntToFloatFunction<IOException>() {\r\n\r\n        @Override\r\n        public float applyAsFloat(final int value) throws IOException {\r\n            throw new IOException(\"test\");\r\n        }\r\n    }.applyAsFloat(0));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\function\\FailableTest.java",
  "methodName" : "testThrows_FailableIntToFloatFunction_Throwable",
  "sourceCode" : "/**\r\n * Tests that our failable interface is properly defined to throw any exception using the top level generic types\r\n * Object and Throwable.\r\n */\r\n@Test\r\nvoid testThrows_FailableIntToFloatFunction_Throwable() {\r\n    assertThrows(IOException.class, () -> new FailableIntToFloatFunction<Throwable>() {\r\n\r\n        @Override\r\n        public float applyAsFloat(final int value) throws Throwable {\r\n            throw new IOException(\"test\");\r\n        }\r\n    }.applyAsFloat(0));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\function\\FailableTest.java",
  "methodName" : "testThrows_FailableIntToLongFunction_IOException",
  "sourceCode" : "/**\r\n * Tests that our failable interface is properly defined to throw any exception using String and IOExceptions as\r\n * generic test types.\r\n */\r\n@Test\r\nvoid testThrows_FailableIntToLongFunction_IOException() {\r\n    assertThrows(IOException.class, () -> new FailableIntToLongFunction<IOException>() {\r\n\r\n        @Override\r\n        public long applyAsLong(final int value) throws IOException {\r\n            throw new IOException(\"test\");\r\n        }\r\n    }.applyAsLong(0));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\function\\FailableTest.java",
  "methodName" : "testThrows_FailableIntToLongFunction_Throwable",
  "sourceCode" : "/**\r\n * Tests that our failable interface is properly defined to throw any exception using the top level generic types\r\n * Object and Throwable.\r\n */\r\n@Test\r\nvoid testThrows_FailableIntToLongFunction_Throwable() {\r\n    assertThrows(IOException.class, () -> new FailableIntToLongFunction<Throwable>() {\r\n\r\n        @Override\r\n        public long applyAsLong(final int value) throws Throwable {\r\n            throw new IOException(\"test\");\r\n        }\r\n    }.applyAsLong(0));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\function\\FailableTest.java",
  "methodName" : "testThrows_FailableLongBinaryOperator_IOException",
  "sourceCode" : "/**\r\n * Tests that our failable interface is properly defined to throw any exception using String and IOExceptions as\r\n * generic test types.\r\n */\r\n@Test\r\nvoid testThrows_FailableLongBinaryOperator_IOException() {\r\n    assertThrows(IOException.class, () -> new FailableLongBinaryOperator<IOException>() {\r\n\r\n        @Override\r\n        public long applyAsLong(final long left, final long right) throws IOException {\r\n            throw new IOException(\"test\");\r\n        }\r\n    }.applyAsLong(0, 0));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\function\\FailableTest.java",
  "methodName" : "testThrows_FailableLongBinaryOperator_Throwable",
  "sourceCode" : "/**\r\n * Tests that our failable interface is properly defined to throw any exception using the top level generic types\r\n * Object and Throwable.\r\n */\r\n@Test\r\nvoid testThrows_FailableLongBinaryOperator_Throwable() {\r\n    assertThrows(IOException.class, () -> new FailableLongBinaryOperator<Throwable>() {\r\n\r\n        @Override\r\n        public long applyAsLong(final long left, final long right) throws Throwable {\r\n            throw new IOException(\"test\");\r\n        }\r\n    }.applyAsLong(0, 0));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\function\\FailableTest.java",
  "methodName" : "testThrows_FailableLongConsumer_IOException",
  "sourceCode" : "/**\r\n * Tests that our failable interface is properly defined to throw any exception using String and IOExceptions as\r\n * generic test types.\r\n */\r\n@Test\r\nvoid testThrows_FailableLongConsumer_IOException() {\r\n    assertThrows(IOException.class, () -> new FailableLongConsumer<IOException>() {\r\n\r\n        @Override\r\n        public void accept(final long object) throws IOException {\r\n            throw new IOException(\"test\");\r\n        }\r\n    }.accept(0));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\function\\FailableTest.java",
  "methodName" : "testThrows_FailableLongConsumer_Throwable",
  "sourceCode" : "/**\r\n * Tests that our failable interface is properly defined to throw any exception using the top level generic types\r\n * Object and Throwable.\r\n */\r\n@Test\r\nvoid testThrows_FailableLongConsumer_Throwable() {\r\n    assertThrows(IOException.class, () -> new FailableLongConsumer<Throwable>() {\r\n\r\n        @Override\r\n        public void accept(final long object) throws Throwable {\r\n            throw new IOException(\"test\");\r\n        }\r\n    }.accept(0));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\function\\FailableTest.java",
  "methodName" : "testThrows_FailableLongFunction_IOException",
  "sourceCode" : "/**\r\n * Tests that our failable interface is properly defined to throw any exception using String and IOExceptions as\r\n * generic test types.\r\n */\r\n@Test\r\nvoid testThrows_FailableLongFunction_IOException() {\r\n    assertThrows(IOException.class, () -> new FailableLongFunction<String, IOException>() {\r\n\r\n        @Override\r\n        public String apply(final long input) throws IOException {\r\n            throw new IOException(\"test\");\r\n        }\r\n    }.apply(0));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\function\\FailableTest.java",
  "methodName" : "testThrows_FailableLongFunction_Throwable",
  "sourceCode" : "/**\r\n * Tests that our failable interface is properly defined to throw any exception using the top level generic types\r\n * Object and Throwable.\r\n */\r\n@Test\r\nvoid testThrows_FailableLongFunction_Throwable() {\r\n    assertThrows(IOException.class, () -> new FailableLongFunction<Object, Throwable>() {\r\n\r\n        @Override\r\n        public Object apply(final long input) throws Throwable {\r\n            throw new IOException(\"test\");\r\n        }\r\n    }.apply(0));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\function\\FailableTest.java",
  "methodName" : "testThrows_FailableLongSupplier_IOException",
  "sourceCode" : "/**\r\n * Tests that our failable interface is properly defined to throw any exception using String and IOExceptions as\r\n * generic test types.\r\n */\r\n@Test\r\nvoid testThrows_FailableLongSupplier_IOException() {\r\n    assertThrows(IOException.class, () -> new FailableLongSupplier<IOException>() {\r\n\r\n        @Override\r\n        public long getAsLong() throws IOException {\r\n            throw new IOException(\"test\");\r\n        }\r\n    }.getAsLong());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\function\\FailableTest.java",
  "methodName" : "testThrows_FailableLongSupplier_Throwable",
  "sourceCode" : "/**\r\n * Tests that our failable interface is properly defined to throw any exception using the top level generic types\r\n * Object and Throwable.\r\n */\r\n@Test\r\nvoid testThrows_FailableLongSupplier_Throwable() {\r\n    assertThrows(IOException.class, () -> new FailableLongSupplier<Throwable>() {\r\n\r\n        @Override\r\n        public long getAsLong() throws Throwable {\r\n            throw new IOException(\"test\");\r\n        }\r\n    }.getAsLong());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\function\\FailableTest.java",
  "methodName" : "testThrows_FailableLongToDoubleFunction_IOException",
  "sourceCode" : "/**\r\n * Tests that our failable interface is properly defined to throw any exception using String and IOExceptions as\r\n * generic test types.\r\n */\r\n@Test\r\nvoid testThrows_FailableLongToDoubleFunction_IOException() {\r\n    assertThrows(IOException.class, () -> new FailableLongToDoubleFunction<IOException>() {\r\n\r\n        @Override\r\n        public double applyAsDouble(final long value) throws IOException {\r\n            throw new IOException(\"test\");\r\n        }\r\n    }.applyAsDouble(0));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\function\\FailableTest.java",
  "methodName" : "testThrows_FailableLongToDoubleFunction_Throwable",
  "sourceCode" : "/**\r\n * Tests that our failable interface is properly defined to throw any exception using the top level generic types\r\n * Object and Throwable.\r\n */\r\n@Test\r\nvoid testThrows_FailableLongToDoubleFunction_Throwable() {\r\n    assertThrows(IOException.class, () -> new FailableLongToDoubleFunction<Throwable>() {\r\n\r\n        @Override\r\n        public double applyAsDouble(final long value) throws Throwable {\r\n            throw new IOException(\"test\");\r\n        }\r\n    }.applyAsDouble(0));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\function\\FailableTest.java",
  "methodName" : "testThrows_FailableLongToIntFunction_IOException",
  "sourceCode" : "/**\r\n * Tests that our failable interface is properly defined to throw any exception using String and IOExceptions as\r\n * generic test types.\r\n */\r\n@Test\r\nvoid testThrows_FailableLongToIntFunction_IOException() {\r\n    assertThrows(IOException.class, () -> new FailableLongToIntFunction<IOException>() {\r\n\r\n        @Override\r\n        public int applyAsInt(final long value) throws IOException {\r\n            throw new IOException(\"test\");\r\n        }\r\n    }.applyAsInt(0));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\function\\FailableTest.java",
  "methodName" : "testThrows_FailableLongToIntFunction_Throwable",
  "sourceCode" : "/**\r\n * Tests that our failable interface is properly defined to throw any exception using the top level generic types\r\n * Object and Throwable.\r\n */\r\n@Test\r\nvoid testThrows_FailableLongToIntFunction_Throwable() {\r\n    assertThrows(IOException.class, () -> new FailableLongToIntFunction<Throwable>() {\r\n\r\n        @Override\r\n        public int applyAsInt(final long value) throws Throwable {\r\n            throw new IOException(\"test\");\r\n        }\r\n    }.applyAsInt(0));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\function\\FailableTest.java",
  "methodName" : "testThrows_FailableObjDoubleConsumer_Object_Throwable",
  "sourceCode" : "/**\r\n * Tests that our failable interface is properly defined to throw any exception using the top level generic types\r\n * Object and Throwable.\r\n */\r\n@Test\r\nvoid testThrows_FailableObjDoubleConsumer_Object_Throwable() {\r\n    assertThrows(IOException.class, () -> new FailableObjDoubleConsumer<Object, Throwable>() {\r\n\r\n        @Override\r\n        public void accept(final Object object, final double value) throws Throwable {\r\n            throw new IOException(\"test\");\r\n        }\r\n    }.accept(new Object(), 0));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\function\\FailableTest.java",
  "methodName" : "testThrows_FailableObjDoubleConsumer_String_IOException",
  "sourceCode" : "/**\r\n * Tests that our failable interface is properly defined to throw any exception using String and IOExceptions as\r\n * generic test types.\r\n */\r\n@Test\r\nvoid testThrows_FailableObjDoubleConsumer_String_IOException() {\r\n    assertThrows(IOException.class, () -> new FailableObjDoubleConsumer<String, IOException>() {\r\n\r\n        @Override\r\n        public void accept(final String object, final double value) throws IOException {\r\n            throw new IOException(\"test\");\r\n        }\r\n    }.accept(StringUtils.EMPTY, 0));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\function\\FailableTest.java",
  "methodName" : "testThrows_FailableObjIntConsumer_Object_Throwable",
  "sourceCode" : "/**\r\n * Tests that our failable interface is properly defined to throw any exception using the top level generic types\r\n * Object and Throwable.\r\n */\r\n@Test\r\nvoid testThrows_FailableObjIntConsumer_Object_Throwable() {\r\n    assertThrows(IOException.class, () -> new FailableObjIntConsumer<Object, Throwable>() {\r\n\r\n        @Override\r\n        public void accept(final Object object, final int value) throws Throwable {\r\n            throw new IOException(\"test\");\r\n        }\r\n    }.accept(new Object(), 0));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\function\\FailableTest.java",
  "methodName" : "testThrows_FailableObjIntConsumer_String_IOException",
  "sourceCode" : "/**\r\n * Tests that our failable interface is properly defined to throw any exception using String and IOExceptions as\r\n * generic test types.\r\n */\r\n@Test\r\nvoid testThrows_FailableObjIntConsumer_String_IOException() {\r\n    assertThrows(IOException.class, () -> new FailableObjIntConsumer<String, IOException>() {\r\n\r\n        @Override\r\n        public void accept(final String object, final int value) throws IOException {\r\n            throw new IOException(\"test\");\r\n        }\r\n    }.accept(StringUtils.EMPTY, 0));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\function\\FailableTest.java",
  "methodName" : "testThrows_FailableObjLongConsumer_Object_Throwable",
  "sourceCode" : "/**\r\n * Tests that our failable interface is properly defined to throw any exception using the top level generic types\r\n * Object and Throwable.\r\n */\r\n@Test\r\nvoid testThrows_FailableObjLongConsumer_Object_Throwable() {\r\n    assertThrows(IOException.class, () -> new FailableObjLongConsumer<Object, Throwable>() {\r\n\r\n        @Override\r\n        public void accept(final Object object, final long value) throws Throwable {\r\n            throw new IOException(\"test\");\r\n        }\r\n    }.accept(new Object(), 0));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\function\\FailableTest.java",
  "methodName" : "testThrows_FailableObjLongConsumer_String_IOException",
  "sourceCode" : "/**\r\n * Tests that our failable interface is properly defined to throw any exception using String and IOExceptions as\r\n * generic test types.\r\n */\r\n@Test\r\nvoid testThrows_FailableObjLongConsumer_String_IOException() {\r\n    assertThrows(IOException.class, () -> new FailableObjLongConsumer<String, IOException>() {\r\n\r\n        @Override\r\n        public void accept(final String object, final long value) throws IOException {\r\n            throw new IOException(\"test\");\r\n        }\r\n    }.accept(StringUtils.EMPTY, 0));\r\n    final FailableObjLongConsumer<String, IOException> f = (o, l) -> {\r\n        throw new IOException(\"test\");\r\n    };\r\n    assertThrows(IOException.class, () -> f.accept(StringUtils.EMPTY, 0));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\function\\FailableTest.java",
  "methodName" : "testThrows_FailablePredicate_Object_Throwable",
  "sourceCode" : "/**\r\n * Tests that our failable interface is properly defined to throw any exception using the top level generic types\r\n * Object and Throwable.\r\n */\r\n@Test\r\nvoid testThrows_FailablePredicate_Object_Throwable() {\r\n    assertThrows(IOException.class, () -> new FailablePredicate<Object, Throwable>() {\r\n\r\n        @Override\r\n        public boolean test(final Object object) throws Throwable {\r\n            throw new IOException(\"test\");\r\n        }\r\n    }.test(new Object()));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\function\\FailableTest.java",
  "methodName" : "testThrows_FailablePredicate_String_IOException",
  "sourceCode" : "/**\r\n * Tests that our failable interface is properly defined to throw any exception using String and IOExceptions as\r\n * generic test types.\r\n */\r\n@Test\r\nvoid testThrows_FailablePredicate_String_IOException() {\r\n    assertThrows(IOException.class, () -> new FailablePredicate<String, IOException>() {\r\n\r\n        @Override\r\n        public boolean test(final String object) throws IOException {\r\n            throw new IOException(\"test\");\r\n        }\r\n    }.test(StringUtils.EMPTY));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\function\\FailableTest.java",
  "methodName" : "testThrows_FailableRunnable_IOException",
  "sourceCode" : "/**\r\n * Tests that our failable interface is properly defined to throw any exception using String and IOExceptions as\r\n * generic test types.\r\n */\r\n@Test\r\nvoid testThrows_FailableRunnable_IOException() {\r\n    assertThrows(IOException.class, () -> new FailableRunnable<IOException>() {\r\n\r\n        @Override\r\n        public void run() throws IOException {\r\n            throw new IOException(\"test\");\r\n        }\r\n    }.run());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\function\\FailableTest.java",
  "methodName" : "testThrows_FailableRunnable_Throwable",
  "sourceCode" : "/**\r\n * Tests that our failable interface is properly defined to throw any exception using the top level generic types\r\n * Object and Throwable.\r\n */\r\n@Test\r\nvoid testThrows_FailableRunnable_Throwable() {\r\n    assertThrows(IOException.class, () -> new FailableRunnable<Throwable>() {\r\n\r\n        @Override\r\n        public void run() throws Throwable {\r\n            throw new IOException(\"test\");\r\n        }\r\n    }.run());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\function\\FailableTest.java",
  "methodName" : "testThrows_FailableShortSupplier_IOException",
  "sourceCode" : "/**\r\n * Tests that our failable interface is properly defined to throw any exception using String and IOExceptions as\r\n * generic test types.\r\n */\r\n@Test\r\nvoid testThrows_FailableShortSupplier_IOException() {\r\n    assertThrows(IOException.class, () -> new FailableShortSupplier<IOException>() {\r\n\r\n        @Override\r\n        public short getAsShort() throws IOException {\r\n            throw new IOException(\"test\");\r\n        }\r\n    }.getAsShort());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\function\\FailableTest.java",
  "methodName" : "testThrows_FailableShortSupplier_Throwable",
  "sourceCode" : "/**\r\n * Tests that our failable interface is properly defined to throw any exception using the top level generic types\r\n * Object and Throwable.\r\n */\r\n@Test\r\nvoid testThrows_FailableShortSupplier_Throwable() {\r\n    assertThrows(IOException.class, () -> new FailableShortSupplier<Throwable>() {\r\n\r\n        @Override\r\n        public short getAsShort() throws Throwable {\r\n            throw new IOException(\"test\");\r\n        }\r\n    }.getAsShort());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\function\\FailableTest.java",
  "methodName" : "testThrows_FailableSupplier_Object_Throwable",
  "sourceCode" : "/**\r\n * Tests that our failable interface is properly defined to throw any exception using the top level generic types\r\n * Object and Throwable.\r\n */\r\n@Test\r\nvoid testThrows_FailableSupplier_Object_Throwable() {\r\n    assertThrows(IOException.class, () -> new FailableSupplier<Object, Throwable>() {\r\n\r\n        @Override\r\n        public Object get() throws Throwable {\r\n            throw new IOException(\"test\");\r\n        }\r\n    }.get());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\function\\FailableTest.java",
  "methodName" : "testThrows_FailableSupplier_String_IOException",
  "sourceCode" : "/**\r\n * Tests that our failable interface is properly defined to throw any exception using String and IOExceptions as\r\n * generic test types.\r\n */\r\n@Test\r\nvoid testThrows_FailableSupplier_String_IOException() {\r\n    assertThrows(IOException.class, () -> new FailableSupplier<String, IOException>() {\r\n\r\n        @Override\r\n        public String get() throws IOException {\r\n            throw new IOException(\"test\");\r\n        }\r\n    }.get());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\function\\FailableTest.java",
  "methodName" : "testThrows_FailableToBooleanFunction_Object_Throwable",
  "sourceCode" : "/**\r\n * Tests that our failable interface is properly defined to throw any exception using the top level generic types\r\n * Object and Throwable.\r\n */\r\n@Test\r\nvoid testThrows_FailableToBooleanFunction_Object_Throwable() {\r\n    assertThrows(IOException.class, () -> new FailableToBooleanFunction<Object, Throwable>() {\r\n\r\n        @Override\r\n        public boolean applyAsBoolean(final Object t) throws Throwable {\r\n            throw new IOException(\"test\");\r\n        }\r\n    }.applyAsBoolean(new Object()));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\function\\FailableTest.java",
  "methodName" : "testThrows_FailableToBooleanFunction_String_IOException",
  "sourceCode" : "/**\r\n * Tests that our failable interface is properly defined to throw any exception using String and IOExceptions as\r\n * generic test types.\r\n */\r\n@Test\r\nvoid testThrows_FailableToBooleanFunction_String_IOException() {\r\n    assertThrows(IOException.class, () -> new FailableToBooleanFunction<String, IOException>() {\r\n\r\n        @Override\r\n        public boolean applyAsBoolean(final String t) throws IOException {\r\n            throw new IOException(\"test\");\r\n        }\r\n    }.applyAsBoolean(StringUtils.EMPTY));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\function\\FailableTest.java",
  "methodName" : "testThrows_FailableToDoubleBiFunction_Object_Throwable",
  "sourceCode" : "/**\r\n * Tests that our failable interface is properly defined to throw any exception using the top level generic types\r\n * Object and Throwable.\r\n */\r\n@Test\r\nvoid testThrows_FailableToDoubleBiFunction_Object_Throwable() {\r\n    assertThrows(IOException.class, () -> new FailableToDoubleBiFunction<Object, Object, Throwable>() {\r\n\r\n        @Override\r\n        public double applyAsDouble(final Object t, final Object u) throws Throwable {\r\n            throw new IOException(\"test\");\r\n        }\r\n    }.applyAsDouble(new Object(), new Object()));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\function\\FailableTest.java",
  "methodName" : "testThrows_FailableToDoubleBiFunction_String_IOException",
  "sourceCode" : "/**\r\n * Tests that our failable interface is properly defined to throw any exception using String and IOExceptions as\r\n * generic test types.\r\n */\r\n@Test\r\nvoid testThrows_FailableToDoubleBiFunction_String_IOException() {\r\n    assertThrows(IOException.class, () -> new FailableToDoubleBiFunction<String, String, IOException>() {\r\n\r\n        @Override\r\n        public double applyAsDouble(final String t, final String u) throws IOException {\r\n            throw new IOException(\"test\");\r\n        }\r\n    }.applyAsDouble(StringUtils.EMPTY, StringUtils.EMPTY));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\function\\FailableTest.java",
  "methodName" : "testThrows_FailableToDoubleFunction_Object_Throwable",
  "sourceCode" : "/**\r\n * Tests that our failable interface is properly defined to throw any exception using the top level generic types\r\n * Object and Throwable.\r\n */\r\n@Test\r\nvoid testThrows_FailableToDoubleFunction_Object_Throwable() {\r\n    assertThrows(IOException.class, () -> new FailableToDoubleFunction<Object, Throwable>() {\r\n\r\n        @Override\r\n        public double applyAsDouble(final Object t) throws Throwable {\r\n            throw new IOException(\"test\");\r\n        }\r\n    }.applyAsDouble(new Object()));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\function\\FailableTest.java",
  "methodName" : "testThrows_FailableToDoubleFunction_String_IOException",
  "sourceCode" : "/**\r\n * Tests that our failable interface is properly defined to throw any exception using String and IOExceptions as\r\n * generic test types.\r\n */\r\n@Test\r\nvoid testThrows_FailableToDoubleFunction_String_IOException() {\r\n    assertThrows(IOException.class, () -> new FailableToDoubleFunction<String, IOException>() {\r\n\r\n        @Override\r\n        public double applyAsDouble(final String t) throws IOException {\r\n            throw new IOException(\"test\");\r\n        }\r\n    }.applyAsDouble(StringUtils.EMPTY));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\function\\FailableTest.java",
  "methodName" : "testThrows_FailableToIntBiFunction_Object_Throwable",
  "sourceCode" : "/**\r\n * Tests that our failable interface is properly defined to throw any exception using the top level generic types\r\n * Object and Throwable.\r\n */\r\n@Test\r\nvoid testThrows_FailableToIntBiFunction_Object_Throwable() {\r\n    assertThrows(IOException.class, () -> new FailableToIntBiFunction<Object, Object, Throwable>() {\r\n\r\n        @Override\r\n        public int applyAsInt(final Object t, final Object u) throws Throwable {\r\n            throw new IOException(\"test\");\r\n        }\r\n    }.applyAsInt(new Object(), new Object()));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\function\\FailableTest.java",
  "methodName" : "testThrows_FailableToIntBiFunction_String_IOException",
  "sourceCode" : "/**\r\n * Tests that our failable interface is properly defined to throw any exception using String and IOExceptions as\r\n * generic test types.\r\n */\r\n@Test\r\nvoid testThrows_FailableToIntBiFunction_String_IOException() {\r\n    assertThrows(IOException.class, () -> new FailableToIntBiFunction<String, String, IOException>() {\r\n\r\n        @Override\r\n        public int applyAsInt(final String t, final String u) throws IOException {\r\n            throw new IOException(\"test\");\r\n        }\r\n    }.applyAsInt(StringUtils.EMPTY, StringUtils.EMPTY));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\function\\FailableTest.java",
  "methodName" : "testThrows_FailableToIntFunction_Object_Throwable",
  "sourceCode" : "/**\r\n * Tests that our failable interface is properly defined to throw any exception using the top level generic types\r\n * Object and Throwable.\r\n */\r\n@Test\r\nvoid testThrows_FailableToIntFunction_Object_Throwable() {\r\n    assertThrows(IOException.class, () -> new FailableToIntFunction<Object, Throwable>() {\r\n\r\n        @Override\r\n        public int applyAsInt(final Object t) throws Throwable {\r\n            throw new IOException(\"test\");\r\n        }\r\n    }.applyAsInt(new Object()));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\function\\FailableTest.java",
  "methodName" : "testThrows_FailableToIntFunction_String_IOException",
  "sourceCode" : "/**\r\n * Tests that our failable interface is properly defined to throw any exception using String and IOExceptions as\r\n * generic test types.\r\n */\r\n@Test\r\nvoid testThrows_FailableToIntFunction_String_IOException() {\r\n    assertThrows(IOException.class, () -> new FailableToIntFunction<String, IOException>() {\r\n\r\n        @Override\r\n        public int applyAsInt(final String t) throws IOException {\r\n            throw new IOException(\"test\");\r\n        }\r\n    }.applyAsInt(StringUtils.EMPTY));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\function\\FailableTest.java",
  "methodName" : "testThrows_FailableToLongBiFunction_Object_Throwable",
  "sourceCode" : "/**\r\n * Tests that our failable interface is properly defined to throw any exception using the top level generic types\r\n * Object and Throwable.\r\n */\r\n@Test\r\nvoid testThrows_FailableToLongBiFunction_Object_Throwable() {\r\n    assertThrows(IOException.class, () -> new FailableToLongBiFunction<Object, Object, Throwable>() {\r\n\r\n        @Override\r\n        public long applyAsLong(final Object t, final Object u) throws Throwable {\r\n            throw new IOException(\"test\");\r\n        }\r\n    }.applyAsLong(new Object(), new Object()));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\function\\FailableTest.java",
  "methodName" : "testThrows_FailableToLongBiFunction_String_IOException",
  "sourceCode" : "/**\r\n * Tests that our failable interface is properly defined to throw any exception using String and IOExceptions as\r\n * generic test types.\r\n */\r\n@Test\r\nvoid testThrows_FailableToLongBiFunction_String_IOException() {\r\n    assertThrows(IOException.class, () -> new FailableToLongBiFunction<String, String, IOException>() {\r\n\r\n        @Override\r\n        public long applyAsLong(final String t, final String u) throws IOException {\r\n            throw new IOException(\"test\");\r\n        }\r\n    }.applyAsLong(StringUtils.EMPTY, StringUtils.EMPTY));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\function\\FailableTest.java",
  "methodName" : "testThrows_FailableToLongFunction_Object_Throwable",
  "sourceCode" : "/**\r\n * Tests that our failable interface is properly defined to throw any exception using the top level generic types\r\n * Object and Throwable.\r\n */\r\n@Test\r\nvoid testThrows_FailableToLongFunction_Object_Throwable() {\r\n    assertThrows(IOException.class, () -> new FailableToLongFunction<Object, Throwable>() {\r\n\r\n        @Override\r\n        public long applyAsLong(final Object t) throws Throwable {\r\n            throw new IOException(\"test\");\r\n        }\r\n    }.applyAsLong(new Object()));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\function\\FailableTest.java",
  "methodName" : "testThrows_FailableToLongFunction_String_IOException",
  "sourceCode" : "/**\r\n * Tests that our failable interface is properly defined to throw any exception using String and IOExceptions as\r\n * generic test types.\r\n */\r\n@Test\r\nvoid testThrows_FailableToLongFunction_String_IOException() {\r\n    assertThrows(IOException.class, () -> new FailableToLongFunction<String, IOException>() {\r\n\r\n        @Override\r\n        public long applyAsLong(final String t) throws IOException {\r\n            throw new IOException(\"test\");\r\n        }\r\n    }.applyAsLong(StringUtils.EMPTY));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\function\\FailableTest.java",
  "methodName" : "testTryWithResources",
  "sourceCode" : "@Test\r\nvoid testTryWithResources() {\r\n    final CloseableObject closeable = new CloseableObject();\r\n    final FailableConsumer<Throwable, ? extends Throwable> consumer = closeable::run;\r\n    Throwable e = assertThrows(IllegalStateException.class, () -> Failable.tryWithResources(() -> consumer.accept(ILLEGAL_STATE_EXCEPTION), closeable::close));\r\n    assertSame(ILLEGAL_STATE_EXCEPTION, e);\r\n    assertTrue(closeable.isClosed());\r\n    closeable.reset();\r\n    e = assertThrows(OutOfMemoryError.class, () -> Failable.tryWithResources(() -> consumer.accept(ERROR), closeable::close));\r\n    assertSame(ERROR, e);\r\n    assertTrue(closeable.isClosed());\r\n    closeable.reset();\r\n    final IOException ioe = new IOException(\"Unknown I/O error\");\r\n    final UncheckedIOException uioe = assertThrows(UncheckedIOException.class, () -> Failable.tryWithResources(() -> consumer.accept(ioe), closeable::close));\r\n    final IOException cause = uioe.getCause();\r\n    assertSame(ioe, cause);\r\n    assertTrue(closeable.isClosed());\r\n    closeable.reset();\r\n    Failable.tryWithResources(() -> consumer.accept(null), closeable::close);\r\n    assertTrue(closeable.isClosed());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\function\\FunctionsTest.java",
  "methodName" : "testApply",
  "sourceCode" : "/**\r\n * Tests {@link Functions#apply(Function, Object)}.\r\n */\r\n@Test\r\nvoid testApply() {\r\n    final AtomicBoolean bool = new AtomicBoolean();\r\n    assertFalse(Functions.apply(bool::getAndSet, true));\r\n    assertTrue(bool.get());\r\n    assertNull(Functions.apply(null, \"foo\"));\r\n    assertNull(Functions.apply(null, null));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\function\\FunctionsTest.java",
  "methodName" : "testApplyNonNull",
  "sourceCode" : "@Test\r\nvoid testApplyNonNull() {\r\n    assertEquals(\"A\", Functions.applyNonNull(\"a\", String::toUpperCase));\r\n    assertNull(Functions.applyNonNull((String) null, String::toUpperCase));\r\n    assertNull(Functions.applyNonNull(\"a\", s -> null));\r\n    assertThrows(NullPointerException.class, () -> Functions.applyNonNull(\"a\", null));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\function\\FunctionsTest.java",
  "methodName" : "testApplyNonNull2",
  "sourceCode" : "@Test\r\nvoid testApplyNonNull2() {\r\n    assertEquals(\"A\", Functions.applyNonNull(\" a \", String::toUpperCase, String::trim));\r\n    assertNull(Functions.applyNonNull((String) null, String::toUpperCase, String::trim));\r\n    assertNull(Functions.applyNonNull(\" a \", s -> null, String::trim));\r\n    assertNull(Functions.applyNonNull(\" a \", String::toUpperCase, s -> null));\r\n    assertThrows(NullPointerException.class, () -> Functions.applyNonNull(\" a \", null, String::trim));\r\n    assertThrows(NullPointerException.class, () -> Functions.applyNonNull(\" a \", String::toUpperCase, null));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\function\\FunctionsTest.java",
  "methodName" : "testApplyNonNull3",
  "sourceCode" : "@Test\r\nvoid testApplyNonNull3() {\r\n    assertEquals(\"CBA\", Functions.applyNonNull(\" abc \", String::toUpperCase, String::trim, StringUtils::reverse));\r\n    assertNull(Functions.applyNonNull((String) null, String::toUpperCase, String::trim, StringUtils::reverse));\r\n    assertNull(Functions.applyNonNull(\" abc \", s -> null, String::trim, StringUtils::reverse));\r\n    assertNull(Functions.applyNonNull(\" abc \", String::toUpperCase, s -> null, StringUtils::reverse));\r\n    assertNull(Functions.applyNonNull(\" abc \", String::toUpperCase, String::trim, s -> null));\r\n    assertThrows(NullPointerException.class, () -> Functions.applyNonNull(\" abc \", null, String::trim, StringUtils::reverse));\r\n    assertThrows(NullPointerException.class, () -> Functions.applyNonNull(\" abc \", String::toUpperCase, null, StringUtils::reverse));\r\n    assertThrows(NullPointerException.class, () -> Functions.applyNonNull(\" abc \", String::toUpperCase, String::trim, null));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\function\\FunctionsTest.java",
  "methodName" : "testFunction",
  "sourceCode" : "/**\r\n * Tests {@link Functions#function(Function)}.\r\n */\r\n@Test\r\nvoid testFunction() {\r\n    assertEquals(\"foo\", Functions.function(String::valueOf).andThen(String::toString).apply(\"foo\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\function\\IntToCharFunctionTest.java",
  "methodName" : "test",
  "sourceCode" : "@Test\r\nvoid test() {\r\n    final IntToCharFunction func = i -> (char) i;\r\n    assertEquals('A', func.applyAsChar(65));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\function\\MethodFixtures.java",
  "methodName" : "getString",
  "sourceCode" : "@AnnotationTestFixture\r\npublic String getString() {\r\n    return \"ABC\";\r\n}",
  "annotations" : [ "AnnotationTestFixture" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\function\\MethodFixtures.java",
  "methodName" : "getString2",
  "sourceCode" : "@AnnotationTestFixture\r\npublic String getString2() {\r\n    return \"EFG\";\r\n}",
  "annotations" : [ "AnnotationTestFixture" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\function\\MethodInvokersBiConsumerTest.java",
  "methodName" : "testApply1Arg",
  "sourceCode" : "@Test\r\nvoid testApply1Arg() throws NoSuchMethodException, SecurityException {\r\n    final BiConsumer<Object, Object> biConsumer = MethodInvokers.asBiConsumer(getMethodForSetString1Arg());\r\n    biConsumer.accept(INSTANCE, \"A\");\r\n    assertEquals(\"A\", INSTANCE.getValue1());\r\n    biConsumer.accept(INSTANCE, \"B\");\r\n    assertEquals(\"B\", INSTANCE.getValue1());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\function\\MethodInvokersBiConsumerTest.java",
  "methodName" : "testConstructorForNull",
  "sourceCode" : "@Test\r\nvoid testConstructorForNull() throws SecurityException {\r\n    assertNullPointerException(() -> MethodInvokers.asBiConsumer(null));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\function\\MethodInvokersBiConsumerTest.java",
  "methodName" : "testToString",
  "sourceCode" : "@Test\r\nvoid testToString() throws SecurityException, ReflectiveOperationException {\r\n    // Should not blow up and must return _something_\r\n    final BiConsumer<Object, Object> biConsumer = MethodInvokers.asBiConsumer(getMethodForSetString1Arg());\r\n    assertFalse(biConsumer.toString().isEmpty());\r\n    assertFalse(biConsumer.toString().isEmpty());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\function\\MethodInvokersBiFunctionTest.java",
  "methodName" : "testApply1Arg",
  "sourceCode" : "@Test\r\nvoid testApply1Arg() throws NoSuchMethodException, SecurityException {\r\n    final BiFunction<MethodFixtures, String, String> func = MethodInvokers.asBiFunction(getMethodForGetString1Arg());\r\n    assertEquals(INSTANCE.getString1Arg(\"A\"), func.apply(INSTANCE, \"A\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\function\\MethodInvokersBiFunctionTest.java",
  "methodName" : "testApply1ArgThrowsUnchecked",
  "sourceCode" : "@Test\r\nvoid testApply1ArgThrowsUnchecked() throws NoSuchMethodException, SecurityException {\r\n    final BiFunction<MethodFixtures, String, String> func = MethodInvokers.asBiFunction(getMethodForGetString1ArgThrowsUnchecked());\r\n    assertThrows(CustomUncheckedException.class, () -> func.apply(INSTANCE, \"A\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\function\\MethodInvokersBiFunctionTest.java",
  "methodName" : "testConstructorForNull",
  "sourceCode" : "@Test\r\nvoid testConstructorForNull() throws SecurityException {\r\n    assertNullPointerException(() -> MethodInvokers.asBiFunction(null));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\function\\MethodInvokersBiFunctionTest.java",
  "methodName" : "testFullExample",
  "sourceCode" : "@Test\r\nvoid testFullExample() throws SecurityException, ReflectiveOperationException {\r\n    final Method method = String.class.getMethod(\"charAt\", int.class);\r\n    final BiFunction<String, Integer, Character> function = MethodInvokers.asBiFunction(method);\r\n    assertEquals('C', function.apply(\"ABC\", 2));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\function\\MethodInvokersBiFunctionTest.java",
  "methodName" : "testToString",
  "sourceCode" : "@Test\r\nvoid testToString() throws SecurityException, ReflectiveOperationException {\r\n    // Should not blow up and must return _something_\r\n    assertFalse(MethodInvokers.asBiFunction(getMethodForGetString1Arg()).toString().isEmpty());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\function\\MethodInvokersFailableBiConsumerTest.java",
  "methodName" : "testApply1Arg",
  "sourceCode" : "@Test\r\nvoid testApply1Arg() throws Throwable {\r\n    MethodInvokers.asFailableBiConsumer(getMethodForSetString1Arg()).accept(INSTANCE, \"A\");\r\n    assertEquals(\"A\", INSTANCE.getValue1());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\function\\MethodInvokersFailableBiConsumerTest.java",
  "methodName" : "testApply1ArgThrowsChecked",
  "sourceCode" : "@Test\r\nvoid testApply1ArgThrowsChecked() throws Exception {\r\n    assertThrows(CustomCheckedException.class, () -> MethodInvokers.asFailableBiConsumer(getMethodForSetString1ArgThrowsChecked()).accept(INSTANCE, \"A\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\function\\MethodInvokersFailableBiConsumerTest.java",
  "methodName" : "testApply1ArgThrowsUnchecked",
  "sourceCode" : "@Test\r\nvoid testApply1ArgThrowsUnchecked() throws Exception {\r\n    assertThrows(CustomUncheckedException.class, () -> MethodInvokers.asFailableBiConsumer(getMethodForSetString1ArgThrowsUnchecked()).accept(INSTANCE, \"A\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\function\\MethodInvokersFailableBiConsumerTest.java",
  "methodName" : "testConstructorForNull",
  "sourceCode" : "@Test\r\nvoid testConstructorForNull() throws Exception {\r\n    assertNullPointerException(() -> MethodInvokers.asFailableBiConsumer(null));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\function\\MethodInvokersFailableBiConsumerTest.java",
  "methodName" : "testToString",
  "sourceCode" : "@Test\r\nvoid testToString() throws SecurityException, ReflectiveOperationException {\r\n    // Should not blow up and must return _something_\r\n    assertFalse(MethodInvokers.asFailableBiConsumer(getMethodForSetString1Arg()).toString().isEmpty());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\function\\MethodInvokersFailableBiFunctionTest.java",
  "methodName" : "testApply1Arg",
  "sourceCode" : "@Test\r\nvoid testApply1Arg() throws Throwable {\r\n    // Use a local variable typed to the interface to make sure we compile.\r\n    final FailableBiFunction<MethodFixtures, String, String[], Throwable> func = MethodInvokers.asFailableBiFunction(getMethodForGetString1ArgChecked());\r\n    assertEquals(INSTANCE.getString1ArgChecked(\"A\"), func.apply(INSTANCE, \"A\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\function\\MethodInvokersFailableBiFunctionTest.java",
  "methodName" : "testApply1ArgThrowsChecked",
  "sourceCode" : "@Test\r\nvoid testApply1ArgThrowsChecked() throws NoSuchMethodException, SecurityException {\r\n    // Use a local variable typed to the interface to make sure we compile.\r\n    final FailableBiFunction<MethodFixtures, String, String[], Throwable> func = MethodInvokers.asFailableBiFunction(getMethodForGetString1ArgThrowsChecked());\r\n    assertThrows(CustomCheckedException.class, () -> func.apply(INSTANCE, \"A\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\function\\MethodInvokersFailableBiFunctionTest.java",
  "methodName" : "testApply1ArgThrowsUnchecked",
  "sourceCode" : "@Test\r\nvoid testApply1ArgThrowsUnchecked() throws NoSuchMethodException, SecurityException {\r\n    // Use a local variable typed to the interface to make sure we compile.\r\n    final FailableBiFunction<MethodFixtures, String, String[], Throwable> func = MethodInvokers.asFailableBiFunction(getMethodForGetString1ArgThrowsUnchecked());\r\n    assertThrows(CustomUncheckedException.class, () -> func.apply(INSTANCE, \"A\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\function\\MethodInvokersFailableBiFunctionTest.java",
  "methodName" : "testConstructorForNull",
  "sourceCode" : "@Test\r\nvoid testConstructorForNull() throws SecurityException {\r\n    assertNullPointerException(() -> MethodInvokers.asFailableBiFunction(null));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\function\\MethodInvokersFailableBiFunctionTest.java",
  "methodName" : "testToString",
  "sourceCode" : "@Test\r\nvoid testToString() throws SecurityException, Throwable {\r\n    // Should not blow up and must return _something_\r\n    assertFalse(MethodInvokers.asFailableBiFunction(getMethodForGetString1ArgChecked()).toString().isEmpty());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\function\\MethodInvokersFailableFunctionTest.java",
  "methodName" : "testApply0Arg",
  "sourceCode" : "@Test\r\nvoid testApply0Arg() throws Throwable {\r\n    assertEquals(INSTANCE.getString(), MethodInvokers.asFailableFunction(getMethodForGetString()).apply(INSTANCE));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\function\\MethodInvokersFailableFunctionTest.java",
  "methodName" : "testBuildVarArg",
  "sourceCode" : "@Test\r\nvoid testBuildVarArg() throws SecurityException, NoSuchMethodException {\r\n    MethodInvokers.asFailableFunction(getMethodForGetStringVarStringArgs());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\function\\MethodInvokersFailableFunctionTest.java",
  "methodName" : "testConstructorForNull",
  "sourceCode" : "@Test\r\nvoid testConstructorForNull() throws SecurityException {\r\n    assertNullPointerException(() -> MethodInvokers.asFailableFunction((Method) null));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\function\\MethodInvokersFailableFunctionTest.java",
  "methodName" : "testFindAndInvoke",
  "sourceCode" : "@Test\r\nvoid testFindAndInvoke() throws SecurityException {\r\n    // Finding\r\n    final List<FailableFunction<Object, Object, Throwable>> invokers = Stream.of(MethodFixtures.class.getDeclaredMethods()).filter(m -> m.isAnnotationPresent(AnnotationTestFixture.class)).map(MethodInvokers::asFailableFunction).collect(Collectors.toList());\r\n    assertEquals(2, invokers.size());\r\n    // ...\r\n    // Invoking\r\n    final Set<Object> set = invokers.stream().map(i -> {\r\n        try {\r\n            return i.apply(MethodFixtures.INSTANCE);\r\n        } catch (final Throwable e) {\r\n            throw new UncheckedException(e);\r\n        }\r\n    }).collect(Collectors.toSet());\r\n    assertEquals(new HashSet<>(Arrays.asList(INSTANCE.getString(), INSTANCE.getString2())), set);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\function\\MethodInvokersFailableFunctionTest.java",
  "methodName" : "testThrowsChecked",
  "sourceCode" : "@Test\r\nvoid testThrowsChecked() throws Exception {\r\n    assertThrows(Exception.class, () -> MethodInvokers.asFailableFunction(getMethodForGetStringThrowsChecked()).apply(INSTANCE));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\function\\MethodInvokersFailableFunctionTest.java",
  "methodName" : "testToString",
  "sourceCode" : "@Test\r\nvoid testToString() throws SecurityException, ReflectiveOperationException {\r\n    // Should not blow up and must return _something_\r\n    assertFalse(MethodInvokers.asFailableFunction(getMethodForGetString()).toString().isEmpty());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\function\\MethodInvokersFailableSupplierTest.java",
  "methodName" : "testSupplierStatic",
  "sourceCode" : "@Test\r\nvoid testSupplierStatic() throws Throwable {\r\n    assertEquals(staticGetString(), MethodInvokers.asFailableSupplier(getMethodForStaticGetString()).get());\r\n    assertEquals(staticGetString(), MethodInvokers.asFailableSupplier(getMethodForStaticGetString()).get());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\function\\MethodInvokersFailableSupplierTest.java",
  "methodName" : "testSupplierToString",
  "sourceCode" : "@Test\r\nvoid testSupplierToString() throws SecurityException, ReflectiveOperationException {\r\n    // Should not blow up and must return _something_\r\n    assertFalse(MethodInvokers.asFailableSupplier(getMethodForStaticGetString()).toString().isEmpty());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\function\\MethodInvokersFunctionTest.java",
  "methodName" : "testApply0Arg",
  "sourceCode" : "@Test\r\nvoid testApply0Arg() throws NoSuchMethodException, SecurityException {\r\n    final Function<MethodFixtures, String> func = MethodInvokers.asFunction(getMethodForGetString());\r\n    assertEquals(INSTANCE.getString(), func.apply(INSTANCE));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\function\\MethodInvokersFunctionTest.java",
  "methodName" : "testApply0ArgThrowsUnchecked",
  "sourceCode" : "@Test\r\nvoid testApply0ArgThrowsUnchecked() throws NoSuchMethodException, SecurityException {\r\n    final Function<MethodFixtures, String> func = MethodInvokers.asFunction(getMethodForGetStringThrowsUnchecked());\r\n    assertThrows(CustomUncheckedException.class, () -> func.apply(INSTANCE));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\function\\MethodInvokersFunctionTest.java",
  "methodName" : "testBuildVarArg",
  "sourceCode" : "@Test\r\nvoid testBuildVarArg() throws SecurityException, NoSuchMethodException {\r\n    MethodInvokers.asFunction(getMethodForGetStringVarStringArgs());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\function\\MethodInvokersFunctionTest.java",
  "methodName" : "testConstructorForNull",
  "sourceCode" : "@Test\r\nvoid testConstructorForNull() throws SecurityException {\r\n    assertNullPointerException(() -> MethodInvokers.asFunction(null));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\function\\MethodInvokersFunctionTest.java",
  "methodName" : "testFindAndInvoke",
  "sourceCode" : "@Test\r\nvoid testFindAndInvoke() throws SecurityException {\r\n    // Finding\r\n    final List<Function<Object, Object>> invokers = Stream.of(MethodFixtures.class.getDeclaredMethods()).filter(m -> m.isAnnotationPresent(AnnotationTestFixture.class)).map(MethodInvokers::asFunction).collect(Collectors.toList());\r\n    assertEquals(2, invokers.size());\r\n    // ...\r\n    // Invoking\r\n    final Set<Object> set1 = invokers.stream().map(i -> i.apply(MethodFixtures.INSTANCE)).collect(Collectors.toSet());\r\n    assertEquals(new HashSet<>(Arrays.asList(INSTANCE.getString(), INSTANCE.getString2())), set1);\r\n    final Set<Object> set2 = Stream.of(INSTANCE).map(invokers.get(0)).collect(Collectors.toSet());\r\n    final Set<Object> set3 = Stream.of(INSTANCE).map(invokers.get(1)).collect(Collectors.toSet());\r\n    set2.addAll(set3);\r\n    assertEquals(new HashSet<>(Arrays.asList(INSTANCE.getString(), INSTANCE.getString2())), set2);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\function\\MethodInvokersFunctionTest.java",
  "methodName" : "testFullExample",
  "sourceCode" : "@Test\r\nvoid testFullExample() throws SecurityException, ReflectiveOperationException {\r\n    final Method method = String.class.getMethod(\"length\");\r\n    final Function<String, Integer> function = MethodInvokers.asFunction(method);\r\n    assertEquals(3, function.apply(\"ABC\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\function\\MethodInvokersFunctionTest.java",
  "methodName" : "testMapComputeIfAbsent",
  "sourceCode" : "@Test\r\nvoid testMapComputeIfAbsent() throws NoSuchMethodException, SecurityException {\r\n    final Map<MethodFixtures, String> map = new HashMap<>();\r\n    map.computeIfAbsent(INSTANCE, MethodInvokers.asFunction(getMethodForGetString()));\r\n    assertEquals(INSTANCE.getString(), map.get(INSTANCE));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\function\\MethodInvokersFunctionTest.java",
  "methodName" : "testToString",
  "sourceCode" : "@Test\r\nvoid testToString() throws SecurityException, ReflectiveOperationException {\r\n    // Should not blow up and must return _something_\r\n    assertFalse(MethodInvokers.asFunction(getMethodForGetString()).toString().isEmpty());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\function\\MethodInvokersSupplierTest.java",
  "methodName" : "testSupplierStaticGetMethod",
  "sourceCode" : "@Test\r\nvoid testSupplierStaticGetMethod() throws NoSuchMethodException, SecurityException {\r\n    final Supplier<String> supplier = MethodInvokers.asSupplier(getMethodForStaticGetString());\r\n    assertEquals(staticGetString(), supplier.get());\r\n    assertEquals(staticGetString(), supplier.get());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\function\\MethodInvokersSupplierTest.java",
  "methodName" : "testSupplierStaticGetMethodToString",
  "sourceCode" : "@Test\r\nvoid testSupplierStaticGetMethodToString() throws SecurityException, ReflectiveOperationException {\r\n    // Should not blow up and must return _something_\r\n    final Supplier<Object> supplier = MethodInvokers.asSupplier(getMethodForStaticGetString());\r\n    assertFalse(supplier.toString().isEmpty());\r\n    assertFalse(supplier.toString().isEmpty());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\function\\ObjectsTest.java",
  "methodName" : "testRequireNonNullObject",
  "sourceCode" : "@Test\r\nvoid testRequireNonNullObject() {\r\n    assertSame(\"foo\", Objects.requireNonNull(\"foo\"));\r\n    try {\r\n        Objects.requireNonNull(null);\r\n        fail(\"Expected Exception\");\r\n    } catch (final NullPointerException e) {\r\n        assertEquals(\"The value must not be null.\", e.getMessage());\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\function\\ObjectsTest.java",
  "methodName" : "testRequireNonNullObjectFailableSupplierString",
  "sourceCode" : "@Test\r\nvoid testRequireNonNullObjectFailableSupplierString() {\r\n    final TestableFailableSupplier<String, ?> supplier = new TestableFailableSupplier<>(FailableSupplier.nul());\r\n    assertSame(\"foo\", Objects.requireNonNull(\"foo\", supplier));\r\n    assertFalse(supplier.isInvoked());\r\n    try {\r\n        Objects.requireNonNull(null, supplier);\r\n        fail(\"Expected Exception\");\r\n    } catch (final NullPointerException e) {\r\n        assertEquals(\"The supplier must not return null.\", e.getMessage());\r\n        assertTrue(supplier.isInvoked());\r\n    }\r\n    final TestableFailableSupplier<String, ?> supplier2 = new TestableFailableSupplier<>(FailableSupplier.nul());\r\n    try {\r\n        Objects.requireNonNull(null, supplier2);\r\n        fail(\"Expected Exception\");\r\n    } catch (final NullPointerException e) {\r\n        assertEquals(\"The supplier must not return null.\", e.getMessage());\r\n        assertTrue(supplier2.isInvoked());\r\n    }\r\n    final TestableFailableSupplier<String, ?> supplier3 = new TestableFailableSupplier<>(() -> \"bar\");\r\n    assertSame(\"bar\", Objects.requireNonNull(null, supplier3));\r\n    final RuntimeException rte = new RuntimeException();\r\n    final TestableFailableSupplier<String, ?> supplier4 = new TestableFailableSupplier<>(() -> {\r\n        throw rte;\r\n    });\r\n    try {\r\n        Objects.requireNonNull(null, supplier4);\r\n        fail(\"Expected Exception\");\r\n    } catch (final RuntimeException e) {\r\n        assertSame(rte, e);\r\n        assertTrue(supplier4.isInvoked());\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\function\\ObjectsTest.java",
  "methodName" : "testRequireNonNullObjectString",
  "sourceCode" : "@Test\r\nvoid testRequireNonNullObjectString() {\r\n    assertSame(\"foo\", Objects.requireNonNull(\"foo\", \"bar\"));\r\n    try {\r\n        Objects.requireNonNull(null, \"bar\");\r\n        fail(\"Expected Exception\");\r\n    } catch (final NullPointerException e) {\r\n        assertEquals(\"bar\", e.getMessage());\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\function\\ObjectsTest.java",
  "methodName" : "testRequireNonNullObjectSupplierString",
  "sourceCode" : "@Test\r\nvoid testRequireNonNullObjectSupplierString() {\r\n    final TestableSupplier<String> supplier = new TestableSupplier<>(() -> \"bar\");\r\n    assertSame(\"foo\", Objects.requireNonNull(\"foo\", supplier));\r\n    assertFalse(supplier.isInvoked());\r\n    try {\r\n        Objects.requireNonNull(null, supplier);\r\n        fail(\"Expected Exception\");\r\n    } catch (final NullPointerException e) {\r\n        assertEquals(\"bar\", e.getMessage());\r\n        assertTrue(supplier.isInvoked());\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\function\\PredicatesTest.java",
  "methodName" : "testFalsePredicate",
  "sourceCode" : "@Test\r\nvoid testFalsePredicate() {\r\n    assertFalse(Predicates.falsePredicate().test(null));\r\n    assertFalse(Predicates.falsePredicate().test(new Object()));\r\n    final Predicate<String> stringPredicate = Predicates.falsePredicate();\r\n    assertFalse(stringPredicate.test(null));\r\n    assertFalse(stringPredicate.test(\"\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\function\\PredicatesTest.java",
  "methodName" : "testTruePredicate",
  "sourceCode" : "@Test\r\nvoid testTruePredicate() {\r\n    assertTrue(Predicates.truePredicate().test(null));\r\n    assertTrue(Predicates.truePredicate().test(new Object()));\r\n    final Predicate<String> stringPredicate = Predicates.truePredicate();\r\n    assertTrue(stringPredicate.test(null));\r\n    assertTrue(stringPredicate.test(\"\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\function\\SuppliersTest.java",
  "methodName" : "testGet",
  "sourceCode" : "/**\r\n * Tests {@link Suppliers#get(Supplier)}.\r\n */\r\n@Test\r\nvoid testGet() {\r\n    assertNull(Suppliers.get(null));\r\n    assertNull(Suppliers.get(() -> null));\r\n    assertNull(Suppliers.get(Suppliers.nul()));\r\n    assertEquals(\"foo\", Suppliers.get(() -> \"foo\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\function\\ToBooleanBiFunctionTest.java",
  "methodName" : "test",
  "sourceCode" : "@Test\r\nvoid test() {\r\n    final ToBooleanBiFunction<String, Integer> func = (t, u) -> Integer.valueOf(t).equals(u);\r\n    assertTrue(func.applyAsBoolean(\"1\", 1));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\function\\TriConsumerTest.java",
  "methodName" : "testAccept",
  "sourceCode" : "@Test\r\nvoid testAccept() throws Throwable {\r\n    final AtomicReference<Character> ref1 = new AtomicReference<>();\r\n    final AtomicReference<Short> ref2 = new AtomicReference<>();\r\n    final AtomicReference<String> ref3 = new AtomicReference<>();\r\n    final TriConsumer<AtomicReference<Character>, AtomicReference<Short>, AtomicReference<String>> tri = (t, u, v) -> {\r\n        ref1.set(Character.valueOf('a'));\r\n        ref2.set(Short.valueOf((short) 1));\r\n        ref3.set(\"z\");\r\n    };\r\n    tri.accept(ref1, ref2, ref3);\r\n    assertEquals(Character.valueOf('a'), ref1.get());\r\n    assertEquals(Short.valueOf((short) 1), ref2.get());\r\n    assertEquals(\"z\", ref3.get());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\function\\TriConsumerTest.java",
  "methodName" : "testAndThen",
  "sourceCode" : "@Test\r\nvoid testAndThen() throws Throwable {\r\n    final AtomicReference<Character> ref1 = new AtomicReference<>();\r\n    final AtomicReference<Short> ref2 = new AtomicReference<>();\r\n    final AtomicReference<String> ref3 = new AtomicReference<>();\r\n    final TriConsumer<AtomicReference<Character>, AtomicReference<Short>, AtomicReference<String>> tri = (t, u, v) -> {\r\n        ref1.set(Character.valueOf('a'));\r\n        ref2.set(Short.valueOf((short) 1));\r\n        ref3.set(\"z\");\r\n    };\r\n    final TriConsumer<AtomicReference<Character>, AtomicReference<Short>, AtomicReference<String>> triAfter = (t, u, v) -> {\r\n        ref1.set(Character.valueOf('b'));\r\n        ref2.set(Short.valueOf((short) 2));\r\n        ref3.set(\"zz\");\r\n    };\r\n    tri.andThen(triAfter).accept(ref1, ref2, ref3);\r\n    assertEquals(Character.valueOf('b'), ref1.get());\r\n    assertEquals(Short.valueOf((short) 2), ref2.get());\r\n    assertEquals(\"zz\", ref3.get());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\function\\TriFunctionTest.java",
  "methodName" : "testAccept",
  "sourceCode" : "@Test\r\nvoid testAccept() throws Throwable {\r\n    final AtomicReference<Character> ref1 = new AtomicReference<>();\r\n    final AtomicReference<Short> ref2 = new AtomicReference<>();\r\n    final AtomicReference<String> ref3 = new AtomicReference<>();\r\n    final TriFunction<AtomicReference<Character>, AtomicReference<Short>, AtomicReference<String>, String> tri = (t, u, v) -> {\r\n        ref1.set(Character.valueOf('a'));\r\n        ref2.set(Short.valueOf((short) 1));\r\n        ref3.set(\"z\");\r\n        return \"ABC\";\r\n    };\r\n    assertEquals(\"ABC\", tri.apply(ref1, ref2, ref3));\r\n    assertEquals(Character.valueOf('a'), ref1.get());\r\n    assertEquals(Short.valueOf((short) 1), ref2.get());\r\n    assertEquals(\"z\", ref3.get());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\function\\TriFunctionTest.java",
  "methodName" : "testAndThen",
  "sourceCode" : "@Test\r\nvoid testAndThen() throws Throwable {\r\n    final AtomicReference<Character> ref1 = new AtomicReference<>();\r\n    final AtomicReference<Short> ref2 = new AtomicReference<>();\r\n    final AtomicReference<String> ref3 = new AtomicReference<>();\r\n    final TriFunction<AtomicReference<Character>, AtomicReference<Short>, AtomicReference<String>, String> tri = (t, u, v) -> {\r\n        ref1.set(Character.valueOf('a'));\r\n        ref2.set(Short.valueOf((short) 1));\r\n        ref3.set(\"z\");\r\n        return \"9\";\r\n    };\r\n    final Function<String, BigInteger> after = t -> {\r\n        ref1.set(Character.valueOf('b'));\r\n        ref2.set(Short.valueOf((short) 2));\r\n        ref3.set(\"zz\");\r\n        return BigInteger.valueOf(Long.parseLong(t)).add(BigInteger.ONE);\r\n    };\r\n    assertEquals(BigInteger.TEN, tri.andThen(after).apply(ref1, ref2, ref3));\r\n    assertEquals(Character.valueOf('b'), ref1.get());\r\n    assertEquals(Short.valueOf((short) 2), ref2.get());\r\n    assertEquals(\"zz\", ref3.get());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\FunctionsTest.java",
  "methodName" : "testAcceptBiConsumer",
  "sourceCode" : "@Test\r\nvoid testAcceptBiConsumer() {\r\n    final IllegalStateException ise = new IllegalStateException();\r\n    final Testable<?, ?> testable = new Testable<>(null);\r\n    Throwable e = assertThrows(IllegalStateException.class, () -> Functions.accept(Testable::test, testable, ise));\r\n    assertSame(ise, e);\r\n    final Error error = new OutOfMemoryError();\r\n    e = assertThrows(OutOfMemoryError.class, () -> Functions.accept(Testable::test, testable, error));\r\n    assertSame(error, e);\r\n    final IOException ioe = new IOException(\"Unknown I/O error\");\r\n    testable.setThrowable(ioe);\r\n    e = assertThrows(UncheckedIOException.class, () -> Functions.accept(Testable::test, testable, ioe));\r\n    final Throwable t = e.getCause();\r\n    assertNotNull(t);\r\n    assertSame(ioe, t);\r\n    testable.setThrowable(null);\r\n    Functions.accept(Testable::test, testable, (Throwable) null);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\FunctionsTest.java",
  "methodName" : "testAcceptConsumer",
  "sourceCode" : "@Test\r\nvoid testAcceptConsumer() {\r\n    final IllegalStateException ise = new IllegalStateException();\r\n    final Testable<?, ?> testable = new Testable<>(ise);\r\n    Throwable e = assertThrows(IllegalStateException.class, () -> Functions.accept(Testable::test, testable));\r\n    assertSame(ise, e);\r\n    final Error error = new OutOfMemoryError();\r\n    testable.setThrowable(error);\r\n    e = assertThrows(OutOfMemoryError.class, () -> Functions.accept(Testable::test, testable));\r\n    assertSame(error, e);\r\n    final IOException ioe = new IOException(\"Unknown I/O error\");\r\n    testable.setThrowable(ioe);\r\n    e = assertThrows(UncheckedIOException.class, () -> Functions.accept(Testable::test, testable));\r\n    final Throwable t = e.getCause();\r\n    assertNotNull(t);\r\n    assertSame(ioe, t);\r\n    testable.setThrowable(null);\r\n    Functions.accept(Testable::test, testable);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\FunctionsTest.java",
  "methodName" : "testAcceptDoubleConsumer",
  "sourceCode" : "@Test\r\nvoid testAcceptDoubleConsumer() {\r\n    final IllegalStateException ise = new IllegalStateException();\r\n    final Testable<?, Double> testable = new Testable<>(ise);\r\n    Throwable e = assertThrows(IllegalStateException.class, () -> Functions.accept(testable::testDouble, 1d));\r\n    assertSame(ise, e);\r\n    assertNull(testable.getAcceptedPrimitiveObject1());\r\n    final Error error = new OutOfMemoryError();\r\n    testable.setThrowable(error);\r\n    e = assertThrows(OutOfMemoryError.class, () -> Functions.accept(testable::testDouble, 1d));\r\n    assertSame(error, e);\r\n    assertNull(testable.getAcceptedPrimitiveObject1());\r\n    final IOException ioe = new IOException(\"Unknown I/O error\");\r\n    testable.setThrowable(ioe);\r\n    e = assertThrows(UncheckedIOException.class, () -> Functions.accept(testable::testDouble, 1d));\r\n    final Throwable t = e.getCause();\r\n    assertNotNull(t);\r\n    assertSame(ioe, t);\r\n    assertNull(testable.getAcceptedPrimitiveObject1());\r\n    testable.setThrowable(null);\r\n    Functions.accept(testable::testDouble, 1d);\r\n    assertEquals(1, testable.getAcceptedPrimitiveObject1());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\FunctionsTest.java",
  "methodName" : "testAcceptIntConsumer",
  "sourceCode" : "@Test\r\nvoid testAcceptIntConsumer() {\r\n    final IllegalStateException ise = new IllegalStateException();\r\n    final Testable<?, Integer> testable = new Testable<>(ise);\r\n    Throwable e = assertThrows(IllegalStateException.class, () -> Functions.accept(testable::testInt, 1));\r\n    assertSame(ise, e);\r\n    assertNull(testable.getAcceptedPrimitiveObject1());\r\n    final Error error = new OutOfMemoryError();\r\n    testable.setThrowable(error);\r\n    e = assertThrows(OutOfMemoryError.class, () -> Functions.accept(testable::testInt, 1));\r\n    assertSame(error, e);\r\n    assertNull(testable.getAcceptedPrimitiveObject1());\r\n    final IOException ioe = new IOException(\"Unknown I/O error\");\r\n    testable.setThrowable(ioe);\r\n    e = assertThrows(UncheckedIOException.class, () -> Functions.accept(testable::testInt, 1));\r\n    final Throwable t = e.getCause();\r\n    assertNotNull(t);\r\n    assertSame(ioe, t);\r\n    assertNull(testable.getAcceptedPrimitiveObject1());\r\n    testable.setThrowable(null);\r\n    Functions.accept(testable::testInt, 1);\r\n    assertEquals(1, testable.getAcceptedPrimitiveObject1());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\FunctionsTest.java",
  "methodName" : "testAcceptLongConsumer",
  "sourceCode" : "@Test\r\nvoid testAcceptLongConsumer() {\r\n    final IllegalStateException ise = new IllegalStateException();\r\n    final Testable<?, Long> testable = new Testable<>(ise);\r\n    Throwable e = assertThrows(IllegalStateException.class, () -> Functions.accept(testable::testLong, 1L));\r\n    assertSame(ise, e);\r\n    assertNull(testable.getAcceptedPrimitiveObject1());\r\n    final Error error = new OutOfMemoryError();\r\n    testable.setThrowable(error);\r\n    e = assertThrows(OutOfMemoryError.class, () -> Functions.accept(testable::testLong, 1L));\r\n    assertSame(error, e);\r\n    assertNull(testable.getAcceptedPrimitiveObject1());\r\n    final IOException ioe = new IOException(\"Unknown I/O error\");\r\n    testable.setThrowable(ioe);\r\n    e = assertThrows(UncheckedIOException.class, () -> Functions.accept(testable::testLong, 1L));\r\n    final Throwable t = e.getCause();\r\n    assertNotNull(t);\r\n    assertSame(ioe, t);\r\n    assertNull(testable.getAcceptedPrimitiveObject1());\r\n    testable.setThrowable(null);\r\n    Functions.accept(testable::testLong, 1L);\r\n    assertEquals(1, testable.getAcceptedPrimitiveObject1());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\FunctionsTest.java",
  "methodName" : "testAcceptObjDoubleConsumer",
  "sourceCode" : "@Test\r\nvoid testAcceptObjDoubleConsumer() {\r\n    final IllegalStateException ise = new IllegalStateException();\r\n    final Testable<String, Double> testable = new Testable<>(ise);\r\n    Throwable e = assertThrows(IllegalStateException.class, () -> Functions.accept(testable::testObjDouble, \"X\", 1d));\r\n    assertSame(ise, e);\r\n    assertNull(testable.getAcceptedObject());\r\n    assertNull(testable.getAcceptedPrimitiveObject1());\r\n    final Error error = new OutOfMemoryError();\r\n    testable.setThrowable(error);\r\n    e = assertThrows(OutOfMemoryError.class, () -> Functions.accept(testable::testObjDouble, \"X\", 1d));\r\n    assertSame(error, e);\r\n    assertNull(testable.getAcceptedObject());\r\n    assertNull(testable.getAcceptedPrimitiveObject1());\r\n    final IOException ioe = new IOException(\"Unknown I/O error\");\r\n    testable.setThrowable(ioe);\r\n    e = assertThrows(UncheckedIOException.class, () -> Functions.accept(testable::testObjDouble, \"X\", 1d));\r\n    final Throwable t = e.getCause();\r\n    assertNotNull(t);\r\n    assertSame(ioe, t);\r\n    assertNull(testable.getAcceptedObject());\r\n    assertNull(testable.getAcceptedPrimitiveObject1());\r\n    testable.setThrowable(null);\r\n    Functions.accept(testable::testObjDouble, \"X\", 1d);\r\n    assertEquals(\"X\", testable.getAcceptedObject());\r\n    assertEquals(1d, testable.getAcceptedPrimitiveObject1());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\FunctionsTest.java",
  "methodName" : "testAcceptObjIntConsumer",
  "sourceCode" : "@Test\r\nvoid testAcceptObjIntConsumer() {\r\n    final IllegalStateException ise = new IllegalStateException();\r\n    final Testable<String, Integer> testable = new Testable<>(ise);\r\n    Throwable e = assertThrows(IllegalStateException.class, () -> Functions.accept(testable::testObjInt, \"X\", 1));\r\n    assertSame(ise, e);\r\n    assertNull(testable.getAcceptedObject());\r\n    assertNull(testable.getAcceptedPrimitiveObject1());\r\n    final Error error = new OutOfMemoryError();\r\n    testable.setThrowable(error);\r\n    e = assertThrows(OutOfMemoryError.class, () -> Functions.accept(testable::testObjInt, \"X\", 1));\r\n    assertSame(error, e);\r\n    assertNull(testable.getAcceptedObject());\r\n    assertNull(testable.getAcceptedPrimitiveObject1());\r\n    final IOException ioe = new IOException(\"Unknown I/O error\");\r\n    testable.setThrowable(ioe);\r\n    e = assertThrows(UncheckedIOException.class, () -> Functions.accept(testable::testObjInt, \"X\", 1));\r\n    final Throwable t = e.getCause();\r\n    assertNotNull(t);\r\n    assertSame(ioe, t);\r\n    assertNull(testable.getAcceptedObject());\r\n    assertNull(testable.getAcceptedPrimitiveObject1());\r\n    testable.setThrowable(null);\r\n    Functions.accept(testable::testObjInt, \"X\", 1);\r\n    assertEquals(\"X\", testable.getAcceptedObject());\r\n    assertEquals(1, testable.getAcceptedPrimitiveObject1());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\FunctionsTest.java",
  "methodName" : "testAcceptObjLongConsumer",
  "sourceCode" : "@Test\r\nvoid testAcceptObjLongConsumer() {\r\n    final IllegalStateException ise = new IllegalStateException();\r\n    final Testable<String, Long> testable = new Testable<>(ise);\r\n    Throwable e = assertThrows(IllegalStateException.class, () -> Functions.accept(testable::testObjLong, \"X\", 1L));\r\n    assertSame(ise, e);\r\n    assertNull(testable.getAcceptedObject());\r\n    assertNull(testable.getAcceptedPrimitiveObject1());\r\n    final Error error = new OutOfMemoryError();\r\n    testable.setThrowable(error);\r\n    e = assertThrows(OutOfMemoryError.class, () -> Functions.accept(testable::testObjLong, \"X\", 1L));\r\n    assertSame(error, e);\r\n    assertNull(testable.getAcceptedObject());\r\n    assertNull(testable.getAcceptedPrimitiveObject1());\r\n    final IOException ioe = new IOException(\"Unknown I/O error\");\r\n    testable.setThrowable(ioe);\r\n    e = assertThrows(UncheckedIOException.class, () -> Functions.accept(testable::testObjLong, \"X\", 1L));\r\n    final Throwable t = e.getCause();\r\n    assertNotNull(t);\r\n    assertSame(ioe, t);\r\n    assertNull(testable.getAcceptedObject());\r\n    assertNull(testable.getAcceptedPrimitiveObject1());\r\n    testable.setThrowable(null);\r\n    Functions.accept(testable::testObjLong, \"X\", 1L);\r\n    assertEquals(\"X\", testable.getAcceptedObject());\r\n    assertEquals(1L, testable.getAcceptedPrimitiveObject1());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\FunctionsTest.java",
  "methodName" : "testApplyBiFunction",
  "sourceCode" : "@Test\r\nvoid testApplyBiFunction() {\r\n    final IllegalStateException ise = new IllegalStateException();\r\n    final Testable<?, ?> testable = new Testable<>(null);\r\n    Throwable e = assertThrows(IllegalStateException.class, () -> Functions.apply(Testable::testAsInteger, testable, ise));\r\n    assertSame(ise, e);\r\n    final Error error = new OutOfMemoryError();\r\n    e = assertThrows(OutOfMemoryError.class, () -> Functions.apply(Testable::testAsInteger, testable, error));\r\n    assertSame(error, e);\r\n    final IOException ioe = new IOException(\"Unknown I/O error\");\r\n    e = assertThrows(UncheckedIOException.class, () -> Functions.apply(Testable::testAsInteger, testable, ioe));\r\n    final Throwable t = e.getCause();\r\n    assertNotNull(t);\r\n    assertSame(ioe, t);\r\n    final Integer i = Functions.apply(Testable::testAsInteger, testable, (Throwable) null);\r\n    assertNotNull(i);\r\n    assertEquals(0, i.intValue());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\FunctionsTest.java",
  "methodName" : "testApplyFunction",
  "sourceCode" : "@Test\r\nvoid testApplyFunction() {\r\n    final IllegalStateException ise = new IllegalStateException();\r\n    final Testable<?, ?> testable = new Testable<>(ise);\r\n    Throwable e = assertThrows(IllegalStateException.class, () -> Functions.apply(Testable::testAsInteger, testable));\r\n    assertSame(ise, e);\r\n    final Error error = new OutOfMemoryError();\r\n    testable.setThrowable(error);\r\n    e = assertThrows(OutOfMemoryError.class, () -> Functions.apply(Testable::testAsInteger, testable));\r\n    assertSame(error, e);\r\n    final IOException ioe = new IOException(\"Unknown I/O error\");\r\n    testable.setThrowable(ioe);\r\n    e = assertThrows(UncheckedIOException.class, () -> Functions.apply(Testable::testAsInteger, testable));\r\n    final Throwable t = e.getCause();\r\n    assertNotNull(t);\r\n    assertSame(ioe, t);\r\n    testable.setThrowable(null);\r\n    final Integer i = Functions.apply(Testable::testAsInteger, testable);\r\n    assertNotNull(i);\r\n    assertEquals(0, i.intValue());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\FunctionsTest.java",
  "methodName" : "testAsCallable",
  "sourceCode" : "@Test\r\nvoid testAsCallable() {\r\n    FailureOnOddInvocations.invocations = 0;\r\n    final FailableCallable<FailureOnOddInvocations, SomeException> failableCallable = FailureOnOddInvocations::new;\r\n    final Callable<FailureOnOddInvocations> callable = Functions.asCallable(failableCallable);\r\n    final UndeclaredThrowableException e = assertThrows(UndeclaredThrowableException.class, callable::call);\r\n    final Throwable cause = e.getCause();\r\n    assertNotNull(cause);\r\n    assertInstanceOf(SomeException.class, cause);\r\n    assertEquals(\"Odd Invocation: 1\", cause.getMessage());\r\n    final FailureOnOddInvocations instance;\r\n    try {\r\n        instance = callable.call();\r\n    } catch (final Exception ex) {\r\n        throw Functions.rethrow(ex);\r\n    }\r\n    assertNotNull(instance);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\FunctionsTest.java",
  "methodName" : "testAsConsumer",
  "sourceCode" : "@Test\r\nvoid testAsConsumer() {\r\n    final IllegalStateException ise = new IllegalStateException();\r\n    final Testable<?, ?> testable = new Testable<>(ise);\r\n    final Consumer<Testable<?, ?>> consumer = Functions.asConsumer(Testable::test);\r\n    Throwable e = assertThrows(IllegalStateException.class, () -> consumer.accept(testable));\r\n    assertSame(ise, e);\r\n    final Error error = new OutOfMemoryError();\r\n    testable.setThrowable(error);\r\n    e = assertThrows(OutOfMemoryError.class, () -> consumer.accept(testable));\r\n    assertSame(error, e);\r\n    final IOException ioe = new IOException(\"Unknown I/O error\");\r\n    testable.setThrowable(ioe);\r\n    e = assertThrows(UncheckedIOException.class, () -> consumer.accept(testable));\r\n    final Throwable t = e.getCause();\r\n    assertNotNull(t);\r\n    assertSame(ioe, t);\r\n    testable.setThrowable(null);\r\n    Functions.accept(Testable::test, testable);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\FunctionsTest.java",
  "methodName" : "testAsRunnable",
  "sourceCode" : "@Test\r\nvoid testAsRunnable() {\r\n    FailureOnOddInvocations.invocations = 0;\r\n    final Runnable runnable = Functions.asRunnable(FailureOnOddInvocations::new);\r\n    final UndeclaredThrowableException e = assertThrows(UndeclaredThrowableException.class, runnable::run);\r\n    final Throwable cause = e.getCause();\r\n    assertNotNull(cause);\r\n    assertInstanceOf(SomeException.class, cause);\r\n    assertEquals(\"Odd Invocation: 1\", cause.getMessage());\r\n    // Even invocations, should not throw an exception\r\n    runnable.run();\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\FunctionsTest.java",
  "methodName" : "testAsSupplier",
  "sourceCode" : "@Test\r\nvoid testAsSupplier() {\r\n    FailureOnOddInvocations.invocations = 0;\r\n    final FailableSupplier<FailureOnOddInvocations, Throwable> failableSupplier = FailureOnOddInvocations::new;\r\n    final Supplier<FailureOnOddInvocations> supplier = Functions.asSupplier(failableSupplier);\r\n    final UndeclaredThrowableException e = assertThrows(UndeclaredThrowableException.class, supplier::get);\r\n    final Throwable cause = e.getCause();\r\n    assertNotNull(cause);\r\n    assertInstanceOf(SomeException.class, cause);\r\n    assertEquals(\"Odd Invocation: 1\", cause.getMessage());\r\n    assertNotNull(supplier.get());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\FunctionsTest.java",
  "methodName" : "testBiConsumer",
  "sourceCode" : "@Test\r\nvoid testBiConsumer() {\r\n    final IllegalStateException ise = new IllegalStateException();\r\n    final Testable<?, ?> testable = new Testable<>(null);\r\n    final FailableBiConsumer<Testable<?, ?>, Throwable, Throwable> failableBiConsumer = (t, th) -> {\r\n        t.setThrowable(th);\r\n        t.test();\r\n    };\r\n    final BiConsumer<Testable<?, ?>, Throwable> consumer = Functions.asBiConsumer(failableBiConsumer);\r\n    Throwable e = assertThrows(IllegalStateException.class, () -> consumer.accept(testable, ise));\r\n    assertSame(ise, e);\r\n    final Error error = new OutOfMemoryError();\r\n    e = assertThrows(OutOfMemoryError.class, () -> consumer.accept(testable, error));\r\n    assertSame(error, e);\r\n    final IOException ioe = new IOException(\"Unknown I/O error\");\r\n    testable.setThrowable(ioe);\r\n    e = assertThrows(UncheckedIOException.class, () -> consumer.accept(testable, ioe));\r\n    final Throwable t = e.getCause();\r\n    assertNotNull(t);\r\n    assertSame(ioe, t);\r\n    consumer.accept(testable, null);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\FunctionsTest.java",
  "methodName" : "testBiFunction",
  "sourceCode" : "@Test\r\nvoid testBiFunction() {\r\n    final IllegalStateException ise = new IllegalStateException();\r\n    final Testable<?, ?> testable = new Testable<>(ise);\r\n    final FailableBiFunction<Testable<?, ?>, Throwable, Integer, Throwable> failableBiFunction = (t, th) -> {\r\n        t.setThrowable(th);\r\n        return Integer.valueOf(t.testAsInteger());\r\n    };\r\n    final BiFunction<Testable<?, ?>, Throwable, Integer> biFunction = Functions.asBiFunction(failableBiFunction);\r\n    Throwable e = assertThrows(IllegalStateException.class, () -> biFunction.apply(testable, ise));\r\n    assertSame(ise, e);\r\n    final Error error = new OutOfMemoryError();\r\n    testable.setThrowable(error);\r\n    e = assertThrows(OutOfMemoryError.class, () -> biFunction.apply(testable, error));\r\n    assertSame(error, e);\r\n    final IOException ioe = new IOException(\"Unknown I/O error\");\r\n    testable.setThrowable(ioe);\r\n    e = assertThrows(UncheckedIOException.class, () -> biFunction.apply(testable, ioe));\r\n    final Throwable t = e.getCause();\r\n    assertNotNull(t);\r\n    assertSame(ioe, t);\r\n    assertEquals(0, biFunction.apply(testable, null).intValue());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\FunctionsTest.java",
  "methodName" : "testBiPredicate",
  "sourceCode" : "@Test\r\n@DisplayName(\"Test that asPredicate(FailableBiPredicate) is converted to -> BiPredicate \")\r\nvoid testBiPredicate() {\r\n    FailureOnOddInvocations.invocations = 0;\r\n    final Functions.FailableBiPredicate<Object, Object, Throwable> failableBiPredicate = (t1, t2) -> FailureOnOddInvocations.failingBool();\r\n    final BiPredicate<?, ?> predicate = Functions.asBiPredicate(failableBiPredicate);\r\n    final UndeclaredThrowableException e = assertThrows(UndeclaredThrowableException.class, () -> predicate.test(null, null));\r\n    final Throwable cause = e.getCause();\r\n    assertNotNull(cause);\r\n    assertInstanceOf(SomeException.class, cause);\r\n    assertEquals(\"Odd Invocation: 1\", cause.getMessage());\r\n    final boolean instance = predicate.test(null, null);\r\n    assertNotNull(instance);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\FunctionsTest.java",
  "methodName" : "testCallable",
  "sourceCode" : "@Test\r\nvoid testCallable() {\r\n    FailureOnOddInvocations.invocations = 0;\r\n    final UndeclaredThrowableException e = assertThrows(UndeclaredThrowableException.class, () -> Functions.run(FailureOnOddInvocations::new));\r\n    final Throwable cause = e.getCause();\r\n    assertNotNull(cause);\r\n    assertInstanceOf(SomeException.class, cause);\r\n    assertEquals(\"Odd Invocation: 1\", cause.getMessage());\r\n    final FailureOnOddInvocations instance = Functions.call(FailureOnOddInvocations::new);\r\n    assertNotNull(instance);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\FunctionsTest.java",
  "methodName" : "testConstructor",
  "sourceCode" : "@Test\r\nvoid testConstructor() {\r\n    // We allow this, which must have been an omission to make the ctor private.\r\n    // We could make the ctor private in 4.0.\r\n    new Functions();\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\FunctionsTest.java",
  "methodName" : "testFunction",
  "sourceCode" : "@Test\r\nvoid testFunction() {\r\n    final IllegalStateException ise = new IllegalStateException();\r\n    final Testable<?, ?> testable = new Testable<>(ise);\r\n    final FailableFunction<Throwable, Integer, Throwable> failableFunction = th -> {\r\n        testable.setThrowable(th);\r\n        return Integer.valueOf(testable.testAsInteger());\r\n    };\r\n    final Function<Throwable, Integer> function = Functions.asFunction(failableFunction);\r\n    Throwable e = assertThrows(IllegalStateException.class, () -> function.apply(ise));\r\n    assertSame(ise, e);\r\n    final Error error = new OutOfMemoryError();\r\n    testable.setThrowable(error);\r\n    e = assertThrows(OutOfMemoryError.class, () -> function.apply(error));\r\n    assertSame(error, e);\r\n    final IOException ioe = new IOException(\"Unknown I/O error\");\r\n    testable.setThrowable(ioe);\r\n    e = assertThrows(UncheckedIOException.class, () -> function.apply(ioe));\r\n    final Throwable t = e.getCause();\r\n    assertNotNull(t);\r\n    assertSame(ioe, t);\r\n    assertEquals(0, function.apply(null).intValue());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\FunctionsTest.java",
  "methodName" : "testGetFromSupplier",
  "sourceCode" : "@Test\r\nvoid testGetFromSupplier() {\r\n    FailureOnOddInvocations.invocations = 0;\r\n    final UndeclaredThrowableException e = assertThrows(UndeclaredThrowableException.class, () -> Functions.run(FailureOnOddInvocations::new));\r\n    final Throwable cause = e.getCause();\r\n    assertNotNull(cause);\r\n    assertInstanceOf(SomeException.class, cause);\r\n    assertEquals(\"Odd Invocation: 1\", cause.getMessage());\r\n    final FailureOnOddInvocations instance = Functions.call(FailureOnOddInvocations::new);\r\n    assertNotNull(instance);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\FunctionsTest.java",
  "methodName" : "testGetSupplier",
  "sourceCode" : "@Test\r\nvoid testGetSupplier() {\r\n    final IllegalStateException ise = new IllegalStateException();\r\n    final Testable<?, ?> testable = new Testable<>(ise);\r\n    Throwable e = assertThrows(IllegalStateException.class, () -> Functions.get(testable::testAsInteger));\r\n    assertSame(ise, e);\r\n    final Error error = new OutOfMemoryError();\r\n    testable.setThrowable(error);\r\n    e = assertThrows(OutOfMemoryError.class, () -> Functions.get(testable::testAsInteger));\r\n    assertSame(error, e);\r\n    final IOException ioe = new IOException(\"Unknown I/O error\");\r\n    testable.setThrowable(ioe);\r\n    e = assertThrows(UncheckedIOException.class, () -> Functions.get(testable::testAsInteger));\r\n    final Throwable t = e.getCause();\r\n    assertNotNull(t);\r\n    assertSame(ioe, t);\r\n    testable.setThrowable(null);\r\n    final Integer i = Functions.apply(Testable::testAsInteger, testable);\r\n    assertNotNull(i);\r\n    assertEquals(0, i.intValue());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\FunctionsTest.java",
  "methodName" : "testPredicate",
  "sourceCode" : "@Test\r\n@DisplayName(\"Test that asPredicate(FailablePredicate) is converted to -> Predicate \")\r\nvoid testPredicate() {\r\n    FailureOnOddInvocations.invocations = 0;\r\n    final Functions.FailablePredicate<Object, Throwable> failablePredicate = t -> FailureOnOddInvocations.failingBool();\r\n    final Predicate<?> predicate = Functions.asPredicate(failablePredicate);\r\n    final UndeclaredThrowableException e = assertThrows(UndeclaredThrowableException.class, () -> predicate.test(null));\r\n    final Throwable cause = e.getCause();\r\n    assertNotNull(cause);\r\n    assertInstanceOf(SomeException.class, cause);\r\n    assertEquals(\"Odd Invocation: 1\", cause.getMessage());\r\n    final boolean instance = predicate.test(null);\r\n    assertNotNull(instance);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\FunctionsTest.java",
  "methodName" : "testRunnable",
  "sourceCode" : "@Test\r\nvoid testRunnable() {\r\n    FailureOnOddInvocations.invocations = 0;\r\n    final UndeclaredThrowableException e = assertThrows(UndeclaredThrowableException.class, () -> Functions.run(FailureOnOddInvocations::new));\r\n    final Throwable cause = e.getCause();\r\n    assertNotNull(cause);\r\n    assertInstanceOf(SomeException.class, cause);\r\n    assertEquals(\"Odd Invocation: 1\", cause.getMessage());\r\n    // Even invocations, should not throw an exception\r\n    Functions.run(FailureOnOddInvocations::new);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\FunctionsTest.java",
  "methodName" : "testThrows_FailableBiConsumer_Object_Throwable",
  "sourceCode" : "/**\r\n * Tests that our failable interface is properly defined to throw any exception. using the top level generic types\r\n * Object and Throwable.\r\n */\r\n@Test\r\nvoid testThrows_FailableBiConsumer_Object_Throwable() {\r\n    new Functions.FailableBiConsumer<Object, Object, Throwable>() {\r\n\r\n        @Override\r\n        public void accept(final Object object1, final Object object2) throws Throwable {\r\n            throw new IOException(\"test\");\r\n        }\r\n    };\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\FunctionsTest.java",
  "methodName" : "testThrows_FailableBiConsumer_String_IOException",
  "sourceCode" : "/**\r\n * Tests that our failable interface is properly defined to throw any exception using String and IOExceptions as\r\n * generic test types.\r\n */\r\n@Test\r\nvoid testThrows_FailableBiConsumer_String_IOException() {\r\n    new Functions.FailableBiConsumer<String, String, IOException>() {\r\n\r\n        @Override\r\n        public void accept(final String object1, final String object2) throws IOException {\r\n            throw new IOException(\"test\");\r\n        }\r\n    };\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\FunctionsTest.java",
  "methodName" : "testThrows_FailableBiFunction_Object_Throwable",
  "sourceCode" : "/**\r\n * Tests that our failable interface is properly defined to throw any exception. using the top level generic types\r\n * Object and Throwable.\r\n */\r\n@Test\r\nvoid testThrows_FailableBiFunction_Object_Throwable() {\r\n    new Functions.FailableBiFunction<Object, Object, Object, Throwable>() {\r\n\r\n        @Override\r\n        public Object apply(final Object input1, final Object input2) throws Throwable {\r\n            throw new IOException(\"test\");\r\n        }\r\n    };\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\FunctionsTest.java",
  "methodName" : "testThrows_FailableBiFunction_String_IOException",
  "sourceCode" : "/**\r\n * Tests that our failable interface is properly defined to throw any exception using String and IOExceptions as\r\n * generic test types.\r\n */\r\n@Test\r\nvoid testThrows_FailableBiFunction_String_IOException() {\r\n    new Functions.FailableBiFunction<String, String, String, IOException>() {\r\n\r\n        @Override\r\n        public String apply(final String input1, final String input2) throws IOException {\r\n            throw new IOException(\"test\");\r\n        }\r\n    };\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\FunctionsTest.java",
  "methodName" : "testThrows_FailableBiPredicate_Object_Throwable",
  "sourceCode" : "/**\r\n * Tests that our failable interface is properly defined to throw any exception. using the top level generic types\r\n * Object and Throwable.\r\n */\r\n@Test\r\nvoid testThrows_FailableBiPredicate_Object_Throwable() {\r\n    new Functions.FailableBiPredicate<Object, Object, Throwable>() {\r\n\r\n        @Override\r\n        public boolean test(final Object object1, final Object object2) throws Throwable {\r\n            throw new IOException(\"test\");\r\n        }\r\n    };\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\FunctionsTest.java",
  "methodName" : "testThrows_FailableBiPredicate_String_IOException",
  "sourceCode" : "/**\r\n * Tests that our failable interface is properly defined to throw any exception using String and IOExceptions as\r\n * generic test types.\r\n */\r\n@Test\r\nvoid testThrows_FailableBiPredicate_String_IOException() {\r\n    new Functions.FailableBiPredicate<String, String, IOException>() {\r\n\r\n        @Override\r\n        public boolean test(final String object1, final String object2) throws IOException {\r\n            throw new IOException(\"test\");\r\n        }\r\n    };\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\FunctionsTest.java",
  "methodName" : "testThrows_FailableCallable_Object_Throwable",
  "sourceCode" : "/**\r\n * Tests that our failable interface is properly defined to throw any exception. using the top level generic types\r\n * Object and Throwable.\r\n */\r\n@Test\r\nvoid testThrows_FailableCallable_Object_Throwable() {\r\n    new Functions.FailableCallable<Object, Throwable>() {\r\n\r\n        @Override\r\n        public Object call() throws Throwable {\r\n            throw new IOException(\"test\");\r\n        }\r\n    };\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\FunctionsTest.java",
  "methodName" : "testThrows_FailableCallable_String_IOException",
  "sourceCode" : "/**\r\n * Tests that our failable interface is properly defined to throw any exception using String and IOExceptions as\r\n * generic test types.\r\n */\r\n@Test\r\nvoid testThrows_FailableCallable_String_IOException() {\r\n    new Functions.FailableCallable<String, IOException>() {\r\n\r\n        @Override\r\n        public String call() throws IOException {\r\n            throw new IOException(\"test\");\r\n        }\r\n    };\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\FunctionsTest.java",
  "methodName" : "testThrows_FailableConsumer_Object_Throwable",
  "sourceCode" : "/**\r\n * Tests that our failable interface is properly defined to throw any exception. using the top level generic types\r\n * Object and Throwable.\r\n */\r\n@Test\r\nvoid testThrows_FailableConsumer_Object_Throwable() {\r\n    new Functions.FailableConsumer<Object, Throwable>() {\r\n\r\n        @Override\r\n        public void accept(final Object object) throws Throwable {\r\n            throw new IOException(\"test\");\r\n        }\r\n    };\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\FunctionsTest.java",
  "methodName" : "testThrows_FailableConsumer_String_IOException",
  "sourceCode" : "/**\r\n * Tests that our failable interface is properly defined to throw any exception using String and IOExceptions as\r\n * generic test types.\r\n */\r\n@Test\r\nvoid testThrows_FailableConsumer_String_IOException() {\r\n    new Functions.FailableConsumer<String, IOException>() {\r\n\r\n        @Override\r\n        public void accept(final String object) throws IOException {\r\n            throw new IOException(\"test\");\r\n        }\r\n    };\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\FunctionsTest.java",
  "methodName" : "testThrows_FailableFunction_Object_Throwable",
  "sourceCode" : "/**\r\n * Tests that our failable interface is properly defined to throw any exception. using the top level generic types\r\n * Object and Throwable.\r\n */\r\n@Test\r\nvoid testThrows_FailableFunction_Object_Throwable() {\r\n    new Functions.FailableFunction<Object, Object, Throwable>() {\r\n\r\n        @Override\r\n        public Object apply(final Object input) throws Throwable {\r\n            throw new IOException(\"test\");\r\n        }\r\n    };\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\FunctionsTest.java",
  "methodName" : "testThrows_FailableFunction_String_IOException",
  "sourceCode" : "/**\r\n * Tests that our failable interface is properly defined to throw any exception using String and IOExceptions as\r\n * generic test types.\r\n */\r\n@Test\r\nvoid testThrows_FailableFunction_String_IOException() {\r\n    new Functions.FailableFunction<String, String, IOException>() {\r\n\r\n        @Override\r\n        public String apply(final String input) throws IOException {\r\n            throw new IOException(\"test\");\r\n        }\r\n    };\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\FunctionsTest.java",
  "methodName" : "testThrows_FailablePredicate_Object_Throwable",
  "sourceCode" : "/**\r\n * Tests that our failable interface is properly defined to throw any exception. using the top level generic types\r\n * Object and Throwable.\r\n */\r\n@Test\r\nvoid testThrows_FailablePredicate_Object_Throwable() {\r\n    new Functions.FailablePredicate<Object, Throwable>() {\r\n\r\n        @Override\r\n        public boolean test(final Object object) throws Throwable {\r\n            throw new IOException(\"test\");\r\n        }\r\n    };\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\FunctionsTest.java",
  "methodName" : "testThrows_FailablePredicate_String_IOException",
  "sourceCode" : "/**\r\n * Tests that our failable interface is properly defined to throw any exception using String and IOExceptions as\r\n * generic test types.\r\n */\r\n@Test\r\nvoid testThrows_FailablePredicate_String_IOException() {\r\n    new Functions.FailablePredicate<String, IOException>() {\r\n\r\n        @Override\r\n        public boolean test(final String object) throws IOException {\r\n            throw new IOException(\"test\");\r\n        }\r\n    };\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\FunctionsTest.java",
  "methodName" : "testThrows_FailableRunnable_Object_Throwable",
  "sourceCode" : "/**\r\n * Tests that our failable interface is properly defined to throw any exception. using the top level generic types\r\n * Object and Throwable.\r\n */\r\n@Test\r\nvoid testThrows_FailableRunnable_Object_Throwable() {\r\n    new Functions.FailableRunnable<Throwable>() {\r\n\r\n        @Override\r\n        public void run() throws Throwable {\r\n            throw new IOException(\"test\");\r\n        }\r\n    };\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\FunctionsTest.java",
  "methodName" : "testThrows_FailableRunnable_String_IOException",
  "sourceCode" : "/**\r\n * Tests that our failable interface is properly defined to throw any exception using String and IOExceptions as\r\n * generic test types.\r\n */\r\n@Test\r\nvoid testThrows_FailableRunnable_String_IOException() {\r\n    new Functions.FailableRunnable<IOException>() {\r\n\r\n        @Override\r\n        public void run() throws IOException {\r\n            throw new IOException(\"test\");\r\n        }\r\n    };\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\FunctionsTest.java",
  "methodName" : "testThrows_FailableSupplier_Object_Throwable",
  "sourceCode" : "/**\r\n * Tests that our failable interface is properly defined to throw any exception. using the top level generic types\r\n * Object and Throwable.\r\n */\r\n@Test\r\nvoid testThrows_FailableSupplier_Object_Throwable() {\r\n    new Functions.FailableSupplier<Object, Throwable>() {\r\n\r\n        @Override\r\n        public Object get() throws Throwable {\r\n            throw new IOException(\"test\");\r\n        }\r\n    };\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\FunctionsTest.java",
  "methodName" : "testThrows_FailableSupplier_String_IOException",
  "sourceCode" : "/**\r\n * Tests that our failable interface is properly defined to throw any exception using String and IOExceptions as\r\n * generic test types.\r\n */\r\n@Test\r\nvoid testThrows_FailableSupplier_String_IOException() {\r\n    new Functions.FailableSupplier<String, IOException>() {\r\n\r\n        @Override\r\n        public String get() throws IOException {\r\n            throw new IOException(\"test\");\r\n        }\r\n    };\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\FunctionsTest.java",
  "methodName" : "testTryWithResources",
  "sourceCode" : "@Test\r\nvoid testTryWithResources() {\r\n    final CloseableObject co = new CloseableObject();\r\n    final FailableConsumer<Throwable, ? extends Throwable> consumer = co::run;\r\n    final IllegalStateException ise = new IllegalStateException();\r\n    Throwable e = assertThrows(IllegalStateException.class, () -> Functions.tryWithResources(() -> consumer.accept(ise), co::close));\r\n    assertSame(ise, e);\r\n    assertTrue(co.isClosed());\r\n    co.reset();\r\n    final Error error = new OutOfMemoryError();\r\n    e = assertThrows(OutOfMemoryError.class, () -> Functions.tryWithResources(() -> consumer.accept(error), co::close));\r\n    assertSame(error, e);\r\n    assertTrue(co.isClosed());\r\n    co.reset();\r\n    final IOException ioe = new IOException(\"Unknown I/O error\");\r\n    final UncheckedIOException uioe = assertThrows(UncheckedIOException.class, () -> Functions.tryWithResources(() -> consumer.accept(ioe), co::close));\r\n    final IOException cause = uioe.getCause();\r\n    assertSame(ioe, cause);\r\n    assertTrue(co.isClosed());\r\n    co.reset();\r\n    Functions.tryWithResources(() -> consumer.accept(null), co::close);\r\n    assertTrue(co.isClosed());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\IntegerRangeTest.java",
  "methodName" : "testContainsInt",
  "sourceCode" : "@Test\r\nvoid testContainsInt() {\r\n    assertFalse(range1.contains(null));\r\n    assertTrue(rangeFull.contains(Integer.MIN_VALUE));\r\n    assertTrue(rangeFull.contains(Integer.MAX_VALUE));\r\n    assertFalse(range1.contains(5));\r\n    assertTrue(range1.contains(10));\r\n    assertTrue(range1.contains(15));\r\n    assertTrue(range1.contains(20));\r\n    assertFalse(range1.contains(25));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\IntegerRangeTest.java",
  "methodName" : "testContainsRange",
  "sourceCode" : "@Test\r\nvoid testContainsRange() {\r\n    // null handling\r\n    assertFalse(range1.containsRange(null));\r\n    // easy inside range\r\n    assertTrue(range1.containsRange(Range.of(12, 18)));\r\n    assertTrue(range1.containsRange(of(12, 18)));\r\n    // outside range on each side\r\n    assertFalse(range1.containsRange(Range.of(32, 45)));\r\n    assertFalse(range1.containsRange(of(32, 45)));\r\n    assertFalse(range1.containsRange(Range.of(2, 8)));\r\n    assertFalse(range1.containsRange(of(2, 8)));\r\n    // equals range\r\n    assertTrue(range1.containsRange(Range.of(10, 20)));\r\n    assertTrue(range1.containsRange(of(10, 20)));\r\n    // overlaps\r\n    assertFalse(range1.containsRange(Range.of(9, 14)));\r\n    assertFalse(range1.containsRange(of(9, 14)));\r\n    assertFalse(range1.containsRange(Range.of(16, 21)));\r\n    assertFalse(range1.containsRange(of(16, 21)));\r\n    // touches lower boundary\r\n    assertTrue(range1.containsRange(Range.of(10, 19)));\r\n    assertTrue(range1.containsRange(of(10, 19)));\r\n    assertFalse(range1.containsRange(Range.of(10, 21)));\r\n    assertFalse(range1.containsRange(of(10, 21)));\r\n    // touches upper boundary\r\n    assertTrue(range1.containsRange(Range.of(11, 20)));\r\n    assertTrue(range1.containsRange(of(11, 20)));\r\n    assertFalse(range1.containsRange(Range.of(9, 20)));\r\n    assertFalse(range1.containsRange(of(9, 20)));\r\n    // negative\r\n    assertFalse(range1.containsRange(Range.of(-11, -18)));\r\n    assertFalse(range1.containsRange(of(-11, -18)));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\IntegerRangeTest.java",
  "methodName" : "testElementCompareTo",
  "sourceCode" : "@Test\r\nvoid testElementCompareTo() {\r\n    assertNullPointerException(() -> range1.elementCompareTo(null));\r\n    assertEquals(-1, range1.elementCompareTo(5));\r\n    assertEquals(0, range1.elementCompareTo(10));\r\n    assertEquals(0, range1.elementCompareTo(15));\r\n    assertEquals(0, range1.elementCompareTo(20));\r\n    assertEquals(1, range1.elementCompareTo(25));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\IntegerRangeTest.java",
  "methodName" : "testEqualsObject",
  "sourceCode" : "@Test\r\nvoid testEqualsObject() {\r\n    assertEquals(range1, range1);\r\n    assertEquals(range1, range2);\r\n    assertEquals(range2, range2);\r\n    assertEquals(range1, range1);\r\n    assertEquals(range2, range2);\r\n    assertEquals(range3, range3);\r\n    assertNotEquals(range2, range3);\r\n    assertNotEquals(null, range2);\r\n    assertNotEquals(\"Ni!\", range2);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\IntegerRangeTest.java",
  "methodName" : "testFit",
  "sourceCode" : "@Test\r\nvoid testFit() {\r\n    assertEquals(range1.getMinimum(), range1.fit(Integer.MIN_VALUE));\r\n    assertEquals(range1.getMinimum(), range1.fit(range1.getMinimum()));\r\n    assertEquals(range1.getMaximum(), range1.fit(Integer.MAX_VALUE));\r\n    assertEquals(range1.getMaximum(), range1.fit(range1.getMaximum()));\r\n    assertEquals(15, range1.fit(15));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\IntegerRangeTest.java",
  "methodName" : "testFitNull",
  "sourceCode" : "@Test\r\nvoid testFitNull() {\r\n    assertNullPointerException(() -> {\r\n        range1.fit(null);\r\n    });\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\IntegerRangeTest.java",
  "methodName" : "testGetMaximum",
  "sourceCode" : "@Test\r\nvoid testGetMaximum() {\r\n    assertEquals(20, (int) range1.getMaximum());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\IntegerRangeTest.java",
  "methodName" : "testGetMinimum",
  "sourceCode" : "@Test\r\nvoid testGetMinimum() {\r\n    assertEquals(10, (int) range1.getMinimum());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\IntegerRangeTest.java",
  "methodName" : "testHashCode",
  "sourceCode" : "@Test\r\nvoid testHashCode() {\r\n    assertEquals(range1.hashCode(), range2.hashCode());\r\n    assertNotEquals(range1.hashCode(), range3.hashCode());\r\n    assertEquals(range1.hashCode(), range1.hashCode());\r\n    assertTrue(range1.hashCode() != 0);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\IntegerRangeTest.java",
  "methodName" : "testIntersectionWith",
  "sourceCode" : "@Test\r\nvoid testIntersectionWith() {\r\n    assertSame(range1, range1.intersectionWith(range1));\r\n    assertEquals(Range.of(10, 15), range1.intersectionWith(Range.of(5, 15)));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\IntegerRangeTest.java",
  "methodName" : "testIntersectionWithNonOverlapping",
  "sourceCode" : "@Test\r\nvoid testIntersectionWithNonOverlapping() {\r\n    assertIllegalArgumentException(() -> range1.intersectionWith(Range.of(0, 9)));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\IntegerRangeTest.java",
  "methodName" : "testIntersectionWithNull",
  "sourceCode" : "@Test\r\nvoid testIntersectionWithNull() {\r\n    assertIllegalArgumentException(() -> range1.intersectionWith(null));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\IntegerRangeTest.java",
  "methodName" : "testIsAfter",
  "sourceCode" : "@Test\r\nvoid testIsAfter() {\r\n    assertFalse(range1.isAfter(null));\r\n    assertTrue(range1.isAfter(5));\r\n    assertFalse(range1.isAfter(10));\r\n    assertFalse(range1.isAfter(15));\r\n    assertFalse(range1.isAfter(20));\r\n    assertFalse(range1.isAfter(25));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\IntegerRangeTest.java",
  "methodName" : "testIsAfterRange",
  "sourceCode" : "@Test\r\nvoid testIsAfterRange() {\r\n    assertFalse(range1.isAfterRange(null));\r\n    assertTrue(range1.isAfterRange(Range.of(5, 9)));\r\n    assertFalse(range1.isAfterRange(Range.of(5, 10)));\r\n    assertFalse(range1.isAfterRange(Range.of(5, 20)));\r\n    assertFalse(range1.isAfterRange(Range.of(5, 25)));\r\n    assertFalse(range1.isAfterRange(Range.of(15, 25)));\r\n    assertFalse(range1.isAfterRange(Range.of(21, 25)));\r\n    assertFalse(range1.isAfterRange(Range.of(10, 20)));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\IntegerRangeTest.java",
  "methodName" : "testIsBefore",
  "sourceCode" : "@Test\r\nvoid testIsBefore() {\r\n    assertFalse(range1.isBefore(null));\r\n    assertFalse(range1.isBefore(5));\r\n    assertFalse(range1.isBefore(10));\r\n    assertFalse(range1.isBefore(15));\r\n    assertFalse(range1.isBefore(20));\r\n    assertTrue(range1.isBefore(25));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\IntegerRangeTest.java",
  "methodName" : "testIsBeforeIntegerRange",
  "sourceCode" : "@Test\r\nvoid testIsBeforeIntegerRange() {\r\n    assertFalse(range1.isBeforeRange(null));\r\n    assertFalse(range1.isBeforeRange(of(5, 9)));\r\n    assertFalse(range1.isBeforeRange(of(5, 10)));\r\n    assertFalse(range1.isBeforeRange(of(5, 20)));\r\n    assertFalse(range1.isBeforeRange(of(5, 25)));\r\n    assertFalse(range1.isBeforeRange(of(15, 25)));\r\n    assertTrue(range1.isBeforeRange(of(21, 25)));\r\n    assertFalse(range1.isBeforeRange(of(10, 20)));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\IntegerRangeTest.java",
  "methodName" : "testIsBeforeRange",
  "sourceCode" : "@Test\r\nvoid testIsBeforeRange() {\r\n    assertFalse(range1.isBeforeRange(null));\r\n    assertFalse(range1.isBeforeRange(Range.of(5, 9)));\r\n    assertFalse(range1.isBeforeRange(Range.of(5, 10)));\r\n    assertFalse(range1.isBeforeRange(Range.of(5, 20)));\r\n    assertFalse(range1.isBeforeRange(Range.of(5, 25)));\r\n    assertFalse(range1.isBeforeRange(Range.of(15, 25)));\r\n    assertTrue(range1.isBeforeRange(Range.of(21, 25)));\r\n    assertFalse(range1.isBeforeRange(Range.of(10, 20)));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\IntegerRangeTest.java",
  "methodName" : "testIsEndedBy",
  "sourceCode" : "@Test\r\nvoid testIsEndedBy() {\r\n    assertFalse(range1.isEndedBy(null));\r\n    assertFalse(range1.isEndedBy(5));\r\n    assertFalse(range1.isEndedBy(10));\r\n    assertFalse(range1.isEndedBy(15));\r\n    assertTrue(range1.isEndedBy(20));\r\n    assertFalse(range1.isEndedBy(25));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\IntegerRangeTest.java",
  "methodName" : "testIsOverlappedByIntegerRange",
  "sourceCode" : "@Test\r\nvoid testIsOverlappedByIntegerRange() {\r\n    // null handling\r\n    assertFalse(range1.isOverlappedBy(null));\r\n    // easy inside range\r\n    assertTrue(range1.isOverlappedBy(of(12, 18)));\r\n    // outside range on each side\r\n    assertFalse(range1.isOverlappedBy(of(32, 45)));\r\n    assertFalse(range1.isOverlappedBy(of(2, 8)));\r\n    // equals range\r\n    assertTrue(range1.isOverlappedBy(of(10, 20)));\r\n    // overlaps\r\n    assertTrue(range1.isOverlappedBy(of(9, 14)));\r\n    assertTrue(range1.isOverlappedBy(of(16, 21)));\r\n    // touches lower boundary\r\n    assertTrue(range1.isOverlappedBy(of(10, 19)));\r\n    assertTrue(range1.isOverlappedBy(of(10, 21)));\r\n    // touches upper boundary\r\n    assertTrue(range1.isOverlappedBy(of(11, 20)));\r\n    assertTrue(range1.isOverlappedBy(of(9, 20)));\r\n    // negative\r\n    assertFalse(range1.isOverlappedBy(of(-11, -18)));\r\n    // outside range whole range\r\n    assertTrue(range1.isOverlappedBy(of(9, 21)));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\IntegerRangeTest.java",
  "methodName" : "testIsOverlappedByRange",
  "sourceCode" : "@Test\r\nvoid testIsOverlappedByRange() {\r\n    // null handling\r\n    assertFalse(range1.isOverlappedBy(null));\r\n    // easy inside range\r\n    assertTrue(range1.isOverlappedBy(Range.of(12, 18)));\r\n    // outside range on each side\r\n    assertFalse(range1.isOverlappedBy(Range.of(32, 45)));\r\n    assertFalse(range1.isOverlappedBy(Range.of(2, 8)));\r\n    // equals range\r\n    assertTrue(range1.isOverlappedBy(Range.of(10, 20)));\r\n    // overlaps\r\n    assertTrue(range1.isOverlappedBy(Range.of(9, 14)));\r\n    assertTrue(range1.isOverlappedBy(Range.of(16, 21)));\r\n    // touches lower boundary\r\n    assertTrue(range1.isOverlappedBy(Range.of(10, 19)));\r\n    assertTrue(range1.isOverlappedBy(Range.of(10, 21)));\r\n    // touches upper boundary\r\n    assertTrue(range1.isOverlappedBy(Range.of(11, 20)));\r\n    assertTrue(range1.isOverlappedBy(Range.of(9, 20)));\r\n    // negative\r\n    assertFalse(range1.isOverlappedBy(Range.of(-11, -18)));\r\n    // outside range whole range\r\n    assertTrue(range1.isOverlappedBy(Range.of(9, 21)));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\IntegerRangeTest.java",
  "methodName" : "testIsStartedBy",
  "sourceCode" : "@Test\r\nvoid testIsStartedBy() {\r\n    assertFalse(range1.isStartedBy(null));\r\n    assertFalse(range1.isStartedBy(5));\r\n    assertTrue(range1.isStartedBy(10));\r\n    assertFalse(range1.isStartedBy(15));\r\n    assertFalse(range1.isStartedBy(20));\r\n    assertFalse(range1.isStartedBy(25));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\IntegerRangeTest.java",
  "methodName" : "testIsWithCompareRange",
  "sourceCode" : "@Test\r\nvoid testIsWithCompareRange() {\r\n    // all integers are equal\r\n    final Comparator<Integer> c = (o1, o2) -> 0;\r\n    Range<Integer> ri = Range.is(10);\r\n    assertFalse(ri.contains(null), \"should not contain null\");\r\n    assertTrue(ri.contains(10), \"should contain 10\");\r\n    assertFalse(ri.contains(11), \"should not contain 11\");\r\n    ri = Range.is(10, c);\r\n    assertFalse(ri.contains(null), \"should not contain null\");\r\n    assertTrue(ri.contains(10), \"should contain 10\");\r\n    assertTrue(ri.contains(11), \"should contain 11\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\IntegerRangeTest.java",
  "methodName" : "testOfWithContains",
  "sourceCode" : "@Test\r\nvoid testOfWithContains() {\r\n    // all integers are equal\r\n    final IntegerRange rb = of(-10, 20);\r\n    assertFalse(rb.contains(null), \"should not contain null\");\r\n    assertTrue(rb.contains(10), \"should contain 10\");\r\n    assertTrue(rb.contains(-10), \"should contain -10\");\r\n    assertFalse(rb.contains(21), \"should not contain 21\");\r\n    assertFalse(rb.contains(-11), \"should not contain -11\");\r\n    assertNullPointerException(() -> of(null, null));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\IntegerRangeTest.java",
  "methodName" : "testRangeOfChars",
  "sourceCode" : "@Test\r\nvoid testRangeOfChars() {\r\n    final IntegerRange chars = of('a', 'z');\r\n    assertTrue(chars.contains((int) 'b'));\r\n    assertFalse(chars.contains((int) 'B'));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\IntegerRangeTest.java",
  "methodName" : "testSerializing",
  "sourceCode" : "@Test\r\nvoid testSerializing() {\r\n    SerializationUtils.clone(range1);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\IntegerRangeTest.java",
  "methodName" : "testToIntStream",
  "sourceCode" : "@Test\r\nvoid testToIntStream() {\r\n    try (IntStream stream = range1.toIntStream()) {\r\n        assertEquals(165, stream.sum());\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\IntegerRangeTest.java",
  "methodName" : "testToString",
  "sourceCode" : "@Test\r\nvoid testToString() {\r\n    assertNotNull(range1.toString());\r\n    final String str = range1.toString();\r\n    assertEquals(\"[10..20]\", str);\r\n    assertEquals(\"[-20..-10]\", Range.of(-20, -10).toString());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\IntegerRangeTest.java",
  "methodName" : "testToStringFormat",
  "sourceCode" : "@Test\r\nvoid testToStringFormat() {\r\n    final String str = range1.toString(\"From %1$s to %2$s\");\r\n    assertEquals(\"From 10 to 20\", str);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\JavaVersionTest.java",
  "methodName" : "testAtLeast",
  "sourceCode" : "@Test\r\nvoid testAtLeast() {\r\n    assertFalse(JavaVersion.JAVA_1_2.atLeast(JavaVersion.JAVA_1_5), \"1.2 at least 1.5 passed\");\r\n    assertTrue(JavaVersion.JAVA_1_5.atLeast(JavaVersion.JAVA_1_2), \"1.5 at least 1.2 failed\");\r\n    assertFalse(JavaVersion.JAVA_1_6.atLeast(JavaVersion.JAVA_1_7), \"1.6 at least 1.7 passed\");\r\n    assertTrue(JavaVersion.JAVA_0_9.atLeast(JavaVersion.JAVA_1_5), \"0.9 at least 1.5 failed\");\r\n    assertFalse(JavaVersion.JAVA_0_9.atLeast(JavaVersion.JAVA_1_6), \"0.9 at least 1.6 passed\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\JavaVersionTest.java",
  "methodName" : "testGetJavaVersion",
  "sourceCode" : "@Test\r\nvoid testGetJavaVersion() throws Exception {\r\n    assertEquals(JavaVersion.JAVA_0_9, JavaVersion.get(\"0.9\"), \"0.9 failed\");\r\n    assertEquals(JavaVersion.JAVA_1_1, JavaVersion.get(\"1.1\"), \"1.1 failed\");\r\n    assertEquals(JavaVersion.JAVA_1_2, JavaVersion.get(\"1.2\"), \"1.2 failed\");\r\n    assertEquals(JavaVersion.JAVA_1_3, JavaVersion.get(\"1.3\"), \"1.3 failed\");\r\n    assertEquals(JavaVersion.JAVA_1_4, JavaVersion.get(\"1.4\"), \"1.4 failed\");\r\n    assertEquals(JavaVersion.JAVA_1_5, JavaVersion.get(\"1.5\"), \"1.5 failed\");\r\n    assertEquals(JavaVersion.JAVA_1_6, JavaVersion.get(\"1.6\"), \"1.6 failed\");\r\n    assertEquals(JavaVersion.JAVA_1_7, JavaVersion.get(\"1.7\"), \"1.7 failed\");\r\n    assertEquals(JavaVersion.JAVA_1_8, JavaVersion.get(\"1.8\"), \"1.8 failed\");\r\n    assertEquals(JavaVersion.JAVA_9, JavaVersion.get(\"9\"));\r\n    assertEquals(JavaVersion.JAVA_10, JavaVersion.get(\"10\"));\r\n    assertEquals(JavaVersion.JAVA_11, JavaVersion.get(\"11\"));\r\n    assertEquals(JavaVersion.JAVA_12, JavaVersion.get(\"12\"));\r\n    assertEquals(JavaVersion.JAVA_13, JavaVersion.get(\"13\"));\r\n    assertEquals(JavaVersion.JAVA_14, JavaVersion.get(\"14\"));\r\n    assertEquals(JavaVersion.JAVA_15, JavaVersion.get(\"15\"));\r\n    assertEquals(JavaVersion.JAVA_16, JavaVersion.get(\"16\"));\r\n    assertEquals(JavaVersion.JAVA_17, JavaVersion.get(\"17\"));\r\n    assertEquals(JavaVersion.JAVA_18, JavaVersion.get(\"18\"));\r\n    assertEquals(JavaVersion.JAVA_19, JavaVersion.get(\"19\"));\r\n    assertEquals(JavaVersion.JAVA_20, JavaVersion.get(\"20\"));\r\n    assertEquals(JavaVersion.JAVA_21, JavaVersion.get(\"21\"));\r\n    assertEquals(JavaVersion.JAVA_22, JavaVersion.get(\"22\"));\r\n    assertEquals(JavaVersion.JAVA_23, JavaVersion.get(\"23\"));\r\n    assertEquals(JavaVersion.JAVA_24, JavaVersion.get(\"24\"));\r\n    assertEquals(JavaVersion.JAVA_RECENT, JavaVersion.get(\"1.10\"), \"1.10 failed\");\r\n    // assertNull(\"2.10 unexpectedly worked\", JavaVersion.get(\"2.10\"));\r\n    assertEquals(JavaVersion.get(\"1.5\"), JavaVersion.getJavaVersion(\"1.5\"), \"Wrapper method failed\");\r\n    // LANG-1384\r\n    assertEquals(JavaVersion.JAVA_RECENT, JavaVersion.get(\"25\"), \"Unhandled\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\JavaVersionTest.java",
  "methodName" : "testToString",
  "sourceCode" : "@Test\r\nvoid testToString() {\r\n    assertEquals(\"1.2\", JavaVersion.JAVA_1_2.toString());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\LocaleUtilsTest.java",
  "methodName" : "testAvailableLocaleList",
  "sourceCode" : "/**\r\n * Test availableLocaleList() method.\r\n */\r\n@Test\r\nvoid testAvailableLocaleList() {\r\n    final List<Locale> list = LocaleUtils.availableLocaleList();\r\n    final List<Locale> list2 = LocaleUtils.availableLocaleList();\r\n    assertNotNull(list);\r\n    assertSame(list, list2);\r\n    assertUnmodifiableCollection(list);\r\n    final Locale[] jdkLocaleArray = Locale.getAvailableLocales();\r\n    final List<Locale> jdkLocaleList = Arrays.asList(ArraySorter.sort(jdkLocaleArray, Comparator.comparing(Locale::toString)));\r\n    assertEquals(jdkLocaleList, list);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\LocaleUtilsTest.java",
  "methodName" : "testAvailableLocaleSet",
  "sourceCode" : "/**\r\n * Test availableLocaleSet() method.\r\n */\r\n@Test\r\nvoid testAvailableLocaleSet() {\r\n    final Set<Locale> set = LocaleUtils.availableLocaleSet();\r\n    final Set<Locale> set2 = LocaleUtils.availableLocaleSet();\r\n    assertNotNull(set);\r\n    assertSame(set, set2);\r\n    assertUnmodifiableCollection(set);\r\n    final Locale[] jdkLocaleArray = Locale.getAvailableLocales();\r\n    final List<Locale> jdkLocaleList = Arrays.asList(jdkLocaleArray);\r\n    final Set<Locale> jdkLocaleSet = new HashSet<>(jdkLocaleList);\r\n    assertEquals(jdkLocaleSet, set);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\LocaleUtilsTest.java",
  "methodName" : "testConstructor",
  "sourceCode" : "/**\r\n * Test that constructors are public, and work, etc.\r\n */\r\n@Test\r\nvoid testConstructor() {\r\n    assertNotNull(new LocaleUtils());\r\n    final Constructor<?>[] cons = LocaleUtils.class.getDeclaredConstructors();\r\n    assertEquals(1, cons.length);\r\n    assertTrue(Modifier.isPublic(cons[0].getModifiers()));\r\n    assertTrue(Modifier.isPublic(LocaleUtils.class.getModifiers()));\r\n    assertFalse(Modifier.isFinal(LocaleUtils.class.getModifiers()));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\LocaleUtilsTest.java",
  "methodName" : "testCountriesByLanguage",
  "sourceCode" : "/**\r\n * Test countriesByLanguage() method.\r\n */\r\n@Test\r\nvoid testCountriesByLanguage() {\r\n    assertCountriesByLanguage(null, new String[0]);\r\n    assertCountriesByLanguage(\"de\", new String[] { \"DE\", \"CH\", \"AT\", \"LU\" });\r\n    assertCountriesByLanguage(\"zz\", new String[0]);\r\n    assertCountriesByLanguage(\"it\", new String[] { \"IT\", \"CH\" });\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\LocaleUtilsTest.java",
  "methodName" : "testIsAvailableLocale",
  "sourceCode" : "/**\r\n * Test availableLocaleSet() method.\r\n */\r\n// JUnit4 does not support primitive equality testing apart from long\r\n@SuppressWarnings(\"boxing\")\r\n@Test\r\nvoid testIsAvailableLocale() {\r\n    final Set<Locale> set = LocaleUtils.availableLocaleSet();\r\n    assertEquals(set.contains(LOCALE_EN), LocaleUtils.isAvailableLocale(LOCALE_EN));\r\n    assertEquals(set.contains(LOCALE_EN_US), LocaleUtils.isAvailableLocale(LOCALE_EN_US));\r\n    assertEquals(set.contains(LOCALE_EN_US_ZZZZ), LocaleUtils.isAvailableLocale(LOCALE_EN_US_ZZZZ));\r\n    assertEquals(set.contains(LOCALE_FR), LocaleUtils.isAvailableLocale(LOCALE_FR));\r\n    assertEquals(set.contains(LOCALE_FR_CA), LocaleUtils.isAvailableLocale(LOCALE_FR_CA));\r\n    assertEquals(set.contains(LOCALE_QQ), LocaleUtils.isAvailableLocale(LOCALE_QQ));\r\n    assertEquals(set.contains(LOCALE_QQ_ZZ), LocaleUtils.isAvailableLocale(LOCALE_QQ_ZZ));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\LocaleUtilsTest.java",
  "methodName" : "testIsLanguageUndetermined",
  "sourceCode" : "@Test\r\nvoid testIsLanguageUndetermined() {\r\n    final Set<Locale> set = LocaleUtils.availableLocaleSet();\r\n    // Determined\r\n    assertNotEquals(set.contains(LOCALE_EN), LocaleUtils.isLanguageUndetermined(LOCALE_EN));\r\n    assertNotEquals(set.contains(LOCALE_EN_US), LocaleUtils.isLanguageUndetermined(LOCALE_EN_US));\r\n    assertNotEquals(set.contains(LOCALE_FR), LocaleUtils.isLanguageUndetermined(LOCALE_FR));\r\n    assertNotEquals(set.contains(LOCALE_FR_CA), LocaleUtils.isLanguageUndetermined(LOCALE_FR_CA));\r\n    // Undetermined\r\n    assertEquals(set.contains(LOCALE_EN_US_ZZZZ), LocaleUtils.isLanguageUndetermined(LOCALE_EN_US_ZZZZ));\r\n    assertEquals(set.contains(LOCALE_QQ), LocaleUtils.isLanguageUndetermined(LOCALE_QQ));\r\n    assertEquals(set.contains(LOCALE_QQ_ZZ), LocaleUtils.isLanguageUndetermined(LOCALE_QQ_ZZ));\r\n    //\r\n    assertTrue(LocaleUtils.isLanguageUndetermined(null));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\LocaleUtilsTest.java",
  "methodName" : "testLang328",
  "sourceCode" : "/**\r\n * Tests #LANG-328 - only language+variant\r\n */\r\n@Test\r\nvoid testLang328() {\r\n    assertValidToLocale(\"fr__P\", \"fr\", \"\", \"P\");\r\n    assertValidToLocale(\"fr__POSIX\", \"fr\", \"\", \"POSIX\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\LocaleUtilsTest.java",
  "methodName" : "testLang865",
  "sourceCode" : "/**\r\n * Tests #LANG-865, strings starting with an underscore.\r\n */\r\n@Test\r\nvoid testLang865() {\r\n    assertValidToLocale(\"_GB\", \"\", \"GB\", \"\");\r\n    assertValidToLocale(\"_GB_P\", \"\", \"GB\", \"P\");\r\n    assertValidToLocale(\"_GB_POSIX\", \"\", \"GB\", \"POSIX\");\r\n    assertIllegalArgumentException(() -> LocaleUtils.toLocale(\"_G\"), \"Must be at least 3 chars if starts with underscore\");\r\n    assertIllegalArgumentException(() -> LocaleUtils.toLocale(\"_Gb\"), \"Must be uppercase if starts with underscore\");\r\n    assertIllegalArgumentException(() -> LocaleUtils.toLocale(\"_gB\"), \"Must be uppercase if starts with underscore\");\r\n    assertIllegalArgumentException(() -> LocaleUtils.toLocale(\"_1B\"), \"Must be letter if starts with underscore\");\r\n    assertIllegalArgumentException(() -> LocaleUtils.toLocale(\"_G1\"), \"Must be letter if starts with underscore\");\r\n    assertIllegalArgumentException(() -> LocaleUtils.toLocale(\"_GB_\"), \"Must be at least 5 chars if starts with underscore\");\r\n    assertIllegalArgumentException(() -> LocaleUtils.toLocale(\"_GBAP\"), \"Must have underscore after the country if starts with underscore and is at least 5 chars\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\LocaleUtilsTest.java",
  "methodName" : "testLanguageAndUNM49Numeric3AreaCodeLang1312",
  "sourceCode" : "@Test\r\nvoid testLanguageAndUNM49Numeric3AreaCodeLang1312() {\r\n    assertValidToLocale(\"en_001\", \"en\", \"001\");\r\n    assertValidToLocale(\"en_150\", \"en\", \"150\");\r\n    assertValidToLocale(\"ar_001\", \"ar\", \"001\");\r\n    // LANG-1312\r\n    assertValidToLocale(\"en_001_GB\", \"en\", \"001\", \"GB\");\r\n    assertValidToLocale(\"en_150_US\", \"en\", \"150\", \"US\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\LocaleUtilsTest.java",
  "methodName" : "testLanguagesByCountry",
  "sourceCode" : "/**\r\n * Test languagesByCountry() method.\r\n */\r\n@Test\r\nvoid testLanguagesByCountry() {\r\n    assertLanguageByCountry(null, new String[0]);\r\n    assertLanguageByCountry(\"GB\", new String[] { \"en\" });\r\n    assertLanguageByCountry(\"ZZ\", new String[0]);\r\n    assertLanguageByCountry(\"CH\", new String[] { \"fr\", \"de\", \"it\" });\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\LocaleUtilsTest.java",
  "methodName" : "testLocaleLookupList_Locale",
  "sourceCode" : "/**\r\n * Test localeLookupList() method.\r\n */\r\n@Test\r\nvoid testLocaleLookupList_Locale() {\r\n    assertLocaleLookupList(null, null, new Locale[0]);\r\n    assertLocaleLookupList(LOCALE_QQ, null, new Locale[] { LOCALE_QQ });\r\n    assertLocaleLookupList(LOCALE_EN, null, new Locale[] { LOCALE_EN });\r\n    assertLocaleLookupList(LOCALE_EN, null, new Locale[] { LOCALE_EN });\r\n    assertLocaleLookupList(LOCALE_EN_US, null, new Locale[] { LOCALE_EN_US, LOCALE_EN });\r\n    assertLocaleLookupList(LOCALE_EN_US_ZZZZ, null, new Locale[] { LOCALE_EN_US_ZZZZ, LOCALE_EN_US, LOCALE_EN });\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\LocaleUtilsTest.java",
  "methodName" : "testLocaleLookupList_LocaleLocale",
  "sourceCode" : "/**\r\n * Test localeLookupList() method.\r\n */\r\n@Test\r\nvoid testLocaleLookupList_LocaleLocale() {\r\n    assertLocaleLookupList(LOCALE_QQ, LOCALE_QQ, new Locale[] { LOCALE_QQ });\r\n    assertLocaleLookupList(LOCALE_EN, LOCALE_EN, new Locale[] { LOCALE_EN });\r\n    assertLocaleLookupList(LOCALE_EN_US, LOCALE_EN_US, new Locale[] { LOCALE_EN_US, LOCALE_EN });\r\n    assertLocaleLookupList(LOCALE_EN_US, LOCALE_QQ, new Locale[] { LOCALE_EN_US, LOCALE_EN, LOCALE_QQ });\r\n    assertLocaleLookupList(LOCALE_EN_US, LOCALE_QQ_ZZ, new Locale[] { LOCALE_EN_US, LOCALE_EN, LOCALE_QQ_ZZ });\r\n    assertLocaleLookupList(LOCALE_EN_US_ZZZZ, null, new Locale[] { LOCALE_EN_US_ZZZZ, LOCALE_EN_US, LOCALE_EN });\r\n    assertLocaleLookupList(LOCALE_EN_US_ZZZZ, LOCALE_EN_US_ZZZZ, new Locale[] { LOCALE_EN_US_ZZZZ, LOCALE_EN_US, LOCALE_EN });\r\n    assertLocaleLookupList(LOCALE_EN_US_ZZZZ, LOCALE_QQ, new Locale[] { LOCALE_EN_US_ZZZZ, LOCALE_EN_US, LOCALE_EN, LOCALE_QQ });\r\n    assertLocaleLookupList(LOCALE_EN_US_ZZZZ, LOCALE_QQ_ZZ, new Locale[] { LOCALE_EN_US_ZZZZ, LOCALE_EN_US, LOCALE_EN, LOCALE_QQ_ZZ });\r\n    assertLocaleLookupList(LOCALE_FR_CA, LOCALE_EN, new Locale[] { LOCALE_FR_CA, LOCALE_FR, LOCALE_EN });\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\LocaleUtilsTest.java",
  "methodName" : "testParseAllLocales",
  "sourceCode" : "@ParameterizedTest\r\n@MethodSource(\"java.util.Locale#getAvailableLocales\")\r\nvoid testParseAllLocales(final Locale actualLocale) {\r\n    // Check if it's possible to recreate the Locale using just the standard constructor\r\n    final Locale locale = new Locale(actualLocale.getLanguage(), actualLocale.getCountry(), actualLocale.getVariant());\r\n    if (actualLocale.equals(locale)) {\r\n        // it is possible for LocaleUtils.toLocale to handle these Locales\r\n        final String str = actualLocale.toString();\r\n        // Look for the script/extension suffix\r\n        int suff = str.indexOf(\"_#\");\r\n        if (suff == -1) {\r\n            suff = str.indexOf(\"#\");\r\n        }\r\n        String localeStr = str;\r\n        if (suff >= 0) {\r\n            // we have a suffix\r\n            assertIllegalArgumentException(() -> LocaleUtils.toLocale(str));\r\n            // try without suffix\r\n            localeStr = str.substring(0, suff);\r\n        }\r\n        final Locale loc = LocaleUtils.toLocale(localeStr);\r\n        assertEquals(actualLocale, loc);\r\n    }\r\n}",
  "annotations" : [ "ParameterizedTest" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\LocaleUtilsTest.java",
  "methodName" : "testThreeCharsLocale",
  "sourceCode" : "/**\r\n * Test for 3-chars locale, further details at LANG-915\r\n */\r\n@Test\r\nvoid testThreeCharsLocale() {\r\n    for (final String str : Arrays.asList(\"udm\", \"tet\")) {\r\n        final Locale locale = LocaleUtils.toLocale(str);\r\n        assertNotNull(locale);\r\n        assertEquals(str, locale.getLanguage());\r\n        assertTrue(StringUtils.isBlank(locale.getCountry()));\r\n        assertEquals(new Locale(str), locale);\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\LocaleUtilsTest.java",
  "methodName" : "testToLocale_1Part",
  "sourceCode" : "/**\r\n * Test toLocale(String) method.\r\n */\r\n@Test\r\nvoid testToLocale_1Part() {\r\n    assertNull(LocaleUtils.toLocale((String) null));\r\n    assertValidToLocale(\"us\");\r\n    assertValidToLocale(\"fr\");\r\n    assertValidToLocale(\"de\");\r\n    assertValidToLocale(\"zh\");\r\n    // Valid format but lang doesn't exist, should make instance anyway\r\n    assertValidToLocale(\"qq\");\r\n    // LANG-941: JDK 8 introduced the empty locale as one of the default locales\r\n    assertValidToLocale(\"\");\r\n    assertIllegalArgumentException(() -> LocaleUtils.toLocale(\"Us\"), \"Should fail if not lowercase\");\r\n    assertIllegalArgumentException(() -> LocaleUtils.toLocale(\"uS\"), \"Should fail if not lowercase\");\r\n    assertIllegalArgumentException(() -> LocaleUtils.toLocale(\"u#\"), \"Should fail if not lowercase\");\r\n    assertIllegalArgumentException(() -> LocaleUtils.toLocale(\"u\"), \"Must be 2 chars if less than 5\");\r\n    assertIllegalArgumentException(() -> LocaleUtils.toLocale(\"uu_U\"), \"Must be 2 chars if less than 5\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\LocaleUtilsTest.java",
  "methodName" : "testToLocale_2Part",
  "sourceCode" : "/**\r\n * Test toLocale() method.\r\n */\r\n@Test\r\nvoid testToLocale_2Part() {\r\n    assertValidToLocale(\"us_EN\", \"us\", \"EN\");\r\n    assertValidToLocale(\"us-EN\", \"us\", \"EN\");\r\n    // valid though doesn't exist\r\n    assertValidToLocale(\"us_ZH\", \"us\", \"ZH\");\r\n    assertIllegalArgumentException(() -> LocaleUtils.toLocale(\"us_En\"), \"Should fail second part not uppercase\");\r\n    assertIllegalArgumentException(() -> LocaleUtils.toLocale(\"us_en\"), \"Should fail second part not uppercase\");\r\n    assertIllegalArgumentException(() -> LocaleUtils.toLocale(\"us_eN\"), \"Should fail second part not uppercase\");\r\n    assertIllegalArgumentException(() -> LocaleUtils.toLocale(\"uS_EN\"), \"Should fail first part not lowercase\");\r\n    assertIllegalArgumentException(() -> LocaleUtils.toLocale(\"us_E3\"), \"Should fail second part not uppercase\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\LocaleUtilsTest.java",
  "methodName" : "testToLocale_3Part",
  "sourceCode" : "/**\r\n * Test toLocale() method.\r\n */\r\n@Test\r\nvoid testToLocale_3Part() {\r\n    assertValidToLocale(\"us_EN_A\", \"us\", \"EN\", \"A\");\r\n    assertValidToLocale(\"us-EN-A\", \"us\", \"EN\", \"A\");\r\n    // this isn't pretty, but was caused by a jdk bug it seems\r\n    // https://bugs.java.com/bugdatabase/view_bug.do?bug_id=4210525\r\n    if (SystemUtils.isJavaVersionAtLeast(JAVA_1_4)) {\r\n        assertValidToLocale(\"us_EN_a\", \"us\", \"EN\", \"a\");\r\n        assertValidToLocale(\"us_EN_SFsafdFDsdfF\", \"us\", \"EN\", \"SFsafdFDsdfF\");\r\n    } else {\r\n        assertValidToLocale(\"us_EN_a\", \"us\", \"EN\", \"A\");\r\n        assertValidToLocale(\"us_EN_SFsafdFDsdfF\", \"us\", \"EN\", \"SFSAFDFDSDFF\");\r\n    }\r\n    assertIllegalArgumentException(() -> LocaleUtils.toLocale(\"us_EN-a\"), \"Should fail as no consistent delimiter\");\r\n    assertIllegalArgumentException(() -> LocaleUtils.toLocale(\"uu_UU_\"), \"Must be 3, 5 or 7+ in length\");\r\n    // LANG-1741\r\n    assertEquals(new Locale(\"en\", \"001\", \"US_POSIX\"), LocaleUtils.toLocale(\"en_001_US_POSIX\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\LocaleUtilsTest.java",
  "methodName" : "testToLocale_Locale_defaults",
  "sourceCode" : "/**\r\n * Test toLocale(Locale) method.\r\n */\r\n@Test\r\nvoid testToLocale_Locale_defaults() {\r\n    assertNull(LocaleUtils.toLocale((String) null));\r\n    assertEquals(Locale.getDefault(), LocaleUtils.toLocale((Locale) null));\r\n    assertEquals(Locale.getDefault(), LocaleUtils.toLocale(Locale.getDefault()));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\LocaleUtilsTest.java",
  "methodName" : "testToLocales",
  "sourceCode" : "/**\r\n * Test toLocale(Locale) method.\r\n */\r\n@ParameterizedTest\r\n@MethodSource(\"java.util.Locale#getAvailableLocales\")\r\nvoid testToLocales(final Locale actualLocale) {\r\n    assertEquals(actualLocale, LocaleUtils.toLocale(actualLocale));\r\n}",
  "annotations" : [ "ParameterizedTest" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\LongRangeTest.java",
  "methodName" : "testContainsInt",
  "sourceCode" : "@Test\r\nvoid testContainsInt() {\r\n    assertFalse(range1.contains(null));\r\n    assertFalse(range1.contains(5L));\r\n    assertTrue(range1.contains(10L));\r\n    assertTrue(range1.contains(15L));\r\n    assertTrue(range1.contains(20L));\r\n    assertFalse(range1.contains(25L));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\LongRangeTest.java",
  "methodName" : "testContainsLong",
  "sourceCode" : "@Test\r\nvoid testContainsLong() {\r\n    assertFalse(range1.contains(null));\r\n    assertTrue(rangeFull.contains(Long.MAX_VALUE));\r\n    assertTrue(rangeFull.contains(Long.MIN_VALUE));\r\n    assertTrue(rangeFull.contains((long) Integer.MAX_VALUE + 1));\r\n    assertTrue(rangeFull.contains((long) Integer.MIN_VALUE - 1));\r\n    assertTrue(rangeFull.contains((long) Integer.MAX_VALUE));\r\n    assertTrue(rangeFull.contains((long) Integer.MIN_VALUE));\r\n    assertFalse(range1.contains(5L));\r\n    assertTrue(range1.contains(10L));\r\n    assertTrue(range1.contains(15L));\r\n    assertTrue(range1.contains(20L));\r\n    assertFalse(range1.contains(25L));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\LongRangeTest.java",
  "methodName" : "testContainsRange",
  "sourceCode" : "@Test\r\nvoid testContainsRange() {\r\n    // null handling\r\n    assertFalse(range1.containsRange(null));\r\n    // easy inside range\r\n    assertTrue(range1.containsRange(Range.of(12L, 18L)));\r\n    assertTrue(range1.containsRange(of(12, 18)));\r\n    // outside range on each side\r\n    assertFalse(range1.containsRange(Range.of(32L, 45L)));\r\n    assertFalse(range1.containsRange(of(32, 45)));\r\n    assertFalse(range1.containsRange(Range.of(2L, 8L)));\r\n    assertFalse(range1.containsRange(of(2, 8)));\r\n    // equals range\r\n    assertTrue(range1.containsRange(Range.of(10L, 20L)));\r\n    assertTrue(range1.containsRange(of(10, 20)));\r\n    // overlaps\r\n    assertFalse(range1.containsRange(Range.of(9L, 14L)));\r\n    assertFalse(range1.containsRange(of(9, 14)));\r\n    assertFalse(range1.containsRange(Range.of(16L, 21L)));\r\n    assertFalse(range1.containsRange(of(16, 21)));\r\n    // touches lower boundary\r\n    assertTrue(range1.containsRange(Range.of(10L, 19L)));\r\n    assertTrue(range1.containsRange(of(10, 19)));\r\n    assertFalse(range1.containsRange(Range.of(10L, 21L)));\r\n    assertFalse(range1.containsRange(of(10, 21)));\r\n    // touches upper boundary\r\n    assertTrue(range1.containsRange(Range.of(11L, 20L)));\r\n    assertTrue(range1.containsRange(of(11, 20)));\r\n    assertFalse(range1.containsRange(Range.of(9L, 20L)));\r\n    assertFalse(range1.containsRange(of(9, 20)));\r\n    // negative\r\n    assertFalse(range1.containsRange(Range.of(-11L, -18L)));\r\n    assertFalse(range1.containsRange(of(-11, -18)));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\LongRangeTest.java",
  "methodName" : "testElementCompareTo",
  "sourceCode" : "@Test\r\nvoid testElementCompareTo() {\r\n    assertNullPointerException(() -> range1.elementCompareTo(null));\r\n    assertEquals(-1, range1.elementCompareTo(5L));\r\n    assertEquals(0, range1.elementCompareTo(10L));\r\n    assertEquals(0, range1.elementCompareTo(15L));\r\n    assertEquals(0, range1.elementCompareTo(20L));\r\n    assertEquals(1, range1.elementCompareTo(25L));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\LongRangeTest.java",
  "methodName" : "testEqualsObject",
  "sourceCode" : "@Test\r\nvoid testEqualsObject() {\r\n    assertEquals(range1, range1);\r\n    assertEquals(range1, range2);\r\n    assertEquals(range2, range2);\r\n    assertEquals(range1, range1);\r\n    assertEquals(range2, range2);\r\n    assertEquals(range3, range3);\r\n    assertNotEquals(range2, range3);\r\n    assertNotEquals(null, range2);\r\n    assertNotEquals(\"Ni!\", range2);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\LongRangeTest.java",
  "methodName" : "testFit",
  "sourceCode" : "@Test\r\nvoid testFit() {\r\n    assertEquals(range1.getMinimum(), range1.fit(Integer.MIN_VALUE));\r\n    assertEquals(range1.getMinimum(), range1.fit(range1.getMinimum()));\r\n    assertEquals(range1.getMaximum(), range1.fit(Integer.MAX_VALUE));\r\n    assertEquals(range1.getMaximum(), range1.fit(range1.getMaximum()));\r\n    assertEquals(15, range1.fit(15L));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\LongRangeTest.java",
  "methodName" : "testFitNull",
  "sourceCode" : "@Test\r\nvoid testFitNull() {\r\n    assertNullPointerException(() -> {\r\n        range1.fit(null);\r\n    });\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\LongRangeTest.java",
  "methodName" : "testGetMaximum",
  "sourceCode" : "@Test\r\nvoid testGetMaximum() {\r\n    assertEquals(20, range1.getMaximum());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\LongRangeTest.java",
  "methodName" : "testGetMinimum",
  "sourceCode" : "@Test\r\nvoid testGetMinimum() {\r\n    assertEquals(10, range1.getMinimum());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\LongRangeTest.java",
  "methodName" : "testHashCode",
  "sourceCode" : "@Test\r\nvoid testHashCode() {\r\n    assertEquals(range1.hashCode(), range2.hashCode());\r\n    assertNotEquals(range1.hashCode(), range3.hashCode());\r\n    assertEquals(range1.hashCode(), range1.hashCode());\r\n    assertTrue(range1.hashCode() != 0);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\LongRangeTest.java",
  "methodName" : "testIntersectionWith",
  "sourceCode" : "@Test\r\nvoid testIntersectionWith() {\r\n    assertSame(range1, range1.intersectionWith(range1));\r\n    assertEquals(Range.of(10L, 15L), range1.intersectionWith(Range.of(5L, 15L)));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\LongRangeTest.java",
  "methodName" : "testIntersectionWithNonOverlapping",
  "sourceCode" : "@Test\r\nvoid testIntersectionWithNonOverlapping() {\r\n    assertIllegalArgumentException(() -> range1.intersectionWith(Range.of(0L, 9L)));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\LongRangeTest.java",
  "methodName" : "testIntersectionWithNull",
  "sourceCode" : "@Test\r\nvoid testIntersectionWithNull() {\r\n    assertIllegalArgumentException(() -> range1.intersectionWith(null));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\LongRangeTest.java",
  "methodName" : "testIsAfter",
  "sourceCode" : "@Test\r\nvoid testIsAfter() {\r\n    assertFalse(range1.isAfter(null));\r\n    assertTrue(range1.isAfter(5L));\r\n    assertFalse(range1.isAfter(10L));\r\n    assertFalse(range1.isAfter(15L));\r\n    assertFalse(range1.isAfter(20L));\r\n    assertFalse(range1.isAfter(25L));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\LongRangeTest.java",
  "methodName" : "testIsAfterRange",
  "sourceCode" : "@Test\r\nvoid testIsAfterRange() {\r\n    assertFalse(range1.isAfterRange(null));\r\n    assertTrue(range1.isAfterRange(Range.of(5L, 9L)));\r\n    assertFalse(range1.isAfterRange(Range.of(5L, 10L)));\r\n    assertFalse(range1.isAfterRange(Range.of(5L, 20L)));\r\n    assertFalse(range1.isAfterRange(Range.of(5L, 25L)));\r\n    assertFalse(range1.isAfterRange(Range.of(15L, 25L)));\r\n    assertFalse(range1.isAfterRange(Range.of(21L, 25L)));\r\n    assertFalse(range1.isAfterRange(Range.of(10L, 20L)));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\LongRangeTest.java",
  "methodName" : "testIsBefore",
  "sourceCode" : "@Test\r\nvoid testIsBefore() {\r\n    assertFalse(range1.isBefore(null));\r\n    assertFalse(range1.isBefore(5L));\r\n    assertFalse(range1.isBefore(10L));\r\n    assertFalse(range1.isBefore(15L));\r\n    assertFalse(range1.isBefore(20L));\r\n    assertTrue(range1.isBefore(25L));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\LongRangeTest.java",
  "methodName" : "testIsBeforeIntegerRange",
  "sourceCode" : "@Test\r\nvoid testIsBeforeIntegerRange() {\r\n    assertFalse(range1.isBeforeRange(null));\r\n    assertFalse(range1.isBeforeRange(of(5, 9)));\r\n    assertFalse(range1.isBeforeRange(of(5, 10)));\r\n    assertFalse(range1.isBeforeRange(of(5, 20)));\r\n    assertFalse(range1.isBeforeRange(of(5, 25)));\r\n    assertFalse(range1.isBeforeRange(of(15, 25)));\r\n    assertTrue(range1.isBeforeRange(of(21, 25)));\r\n    assertFalse(range1.isBeforeRange(of(10, 20)));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\LongRangeTest.java",
  "methodName" : "testIsBeforeRange",
  "sourceCode" : "@Test\r\nvoid testIsBeforeRange() {\r\n    assertFalse(range1.isBeforeRange(null));\r\n    assertFalse(range1.isBeforeRange(Range.of(5L, 9L)));\r\n    assertFalse(range1.isBeforeRange(Range.of(5L, 10L)));\r\n    assertFalse(range1.isBeforeRange(Range.of(5L, 20L)));\r\n    assertFalse(range1.isBeforeRange(Range.of(5L, 25L)));\r\n    assertFalse(range1.isBeforeRange(Range.of(15L, 25L)));\r\n    assertTrue(range1.isBeforeRange(Range.of(21L, 25L)));\r\n    assertFalse(range1.isBeforeRange(Range.of(10L, 20L)));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\LongRangeTest.java",
  "methodName" : "testIsEndedBy",
  "sourceCode" : "@Test\r\nvoid testIsEndedBy() {\r\n    assertFalse(range1.isEndedBy(null));\r\n    assertFalse(range1.isEndedBy(5L));\r\n    assertFalse(range1.isEndedBy(10L));\r\n    assertFalse(range1.isEndedBy(15L));\r\n    assertTrue(range1.isEndedBy(20L));\r\n    assertFalse(range1.isEndedBy(25L));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\LongRangeTest.java",
  "methodName" : "testIsOverlappedByIntegerRange",
  "sourceCode" : "@Test\r\nvoid testIsOverlappedByIntegerRange() {\r\n    // null handling\r\n    assertFalse(range1.isOverlappedBy(null));\r\n    // easy inside range\r\n    assertTrue(range1.isOverlappedBy(of(12, 18)));\r\n    // outside range on each side\r\n    assertFalse(range1.isOverlappedBy(of(32, 45)));\r\n    assertFalse(range1.isOverlappedBy(of(2, 8)));\r\n    // equals range\r\n    assertTrue(range1.isOverlappedBy(of(10, 20)));\r\n    // overlaps\r\n    assertTrue(range1.isOverlappedBy(of(9, 14)));\r\n    assertTrue(range1.isOverlappedBy(of(16, 21)));\r\n    // touches lower boundary\r\n    assertTrue(range1.isOverlappedBy(of(10, 19)));\r\n    assertTrue(range1.isOverlappedBy(of(10, 21)));\r\n    // touches upper boundary\r\n    assertTrue(range1.isOverlappedBy(of(11, 20)));\r\n    assertTrue(range1.isOverlappedBy(of(9, 20)));\r\n    // negative\r\n    assertFalse(range1.isOverlappedBy(of(-11, -18)));\r\n    // outside range whole range\r\n    assertTrue(range1.isOverlappedBy(of(9, 21)));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\LongRangeTest.java",
  "methodName" : "testIsOverlappedByRange",
  "sourceCode" : "@Test\r\nvoid testIsOverlappedByRange() {\r\n    // null handling\r\n    assertFalse(range1.isOverlappedBy(null));\r\n    // easy inside range\r\n    assertTrue(range1.isOverlappedBy(Range.of(12L, 18L)));\r\n    // outside range on each side\r\n    assertFalse(range1.isOverlappedBy(Range.of(32L, 45L)));\r\n    assertFalse(range1.isOverlappedBy(Range.of(2L, 8L)));\r\n    // equals range\r\n    assertTrue(range1.isOverlappedBy(Range.of(10L, 20L)));\r\n    // overlaps\r\n    assertTrue(range1.isOverlappedBy(Range.of(9L, 14L)));\r\n    assertTrue(range1.isOverlappedBy(Range.of(16L, 21L)));\r\n    // touches lower boundary\r\n    assertTrue(range1.isOverlappedBy(Range.of(10L, 19L)));\r\n    assertTrue(range1.isOverlappedBy(Range.of(10L, 21L)));\r\n    // touches upper boundary\r\n    assertTrue(range1.isOverlappedBy(Range.of(11L, 20L)));\r\n    assertTrue(range1.isOverlappedBy(Range.of(9L, 20L)));\r\n    // negative\r\n    assertFalse(range1.isOverlappedBy(Range.of(-11L, -18L)));\r\n    // outside range whole range\r\n    assertTrue(range1.isOverlappedBy(Range.of(9L, 21L)));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\LongRangeTest.java",
  "methodName" : "testIsStartedBy",
  "sourceCode" : "@Test\r\nvoid testIsStartedBy() {\r\n    assertFalse(range1.isStartedBy(null));\r\n    assertFalse(range1.isStartedBy(5L));\r\n    assertTrue(range1.isStartedBy(10L));\r\n    assertFalse(range1.isStartedBy(15L));\r\n    assertFalse(range1.isStartedBy(20L));\r\n    assertFalse(range1.isStartedBy(25L));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\LongRangeTest.java",
  "methodName" : "testIsWithCompareRange",
  "sourceCode" : "@Test\r\nvoid testIsWithCompareRange() {\r\n    // all integers are equal\r\n    final Comparator<Integer> c = (o1, o2) -> 0;\r\n    Range<Integer> ri = Range.is(10);\r\n    assertFalse(ri.contains(null), \"should not contain null\");\r\n    assertTrue(ri.contains(10), \"should contain 10\");\r\n    assertFalse(ri.contains(11), \"should not contain 11\");\r\n    ri = Range.is(10, c);\r\n    assertFalse(ri.contains(null), \"should not contain null\");\r\n    assertTrue(ri.contains(10), \"should contain 10\");\r\n    assertTrue(ri.contains(11), \"should contain 11\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\LongRangeTest.java",
  "methodName" : "testOfWithContains",
  "sourceCode" : "@Test\r\nvoid testOfWithContains() {\r\n    // all integers are equal\r\n    final LongRange rb = of(-10, 20);\r\n    assertFalse(rb.contains(null), \"should not contain null\");\r\n    assertTrue(rb.contains(10L), \"should contain 10\");\r\n    assertTrue(rb.contains(-10L), \"should contain -10\");\r\n    assertFalse(rb.contains(21L), \"should not contain 21\");\r\n    assertFalse(rb.contains(-11L), \"should not contain -11\");\r\n    assertNullPointerException(() -> of(null, null));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\LongRangeTest.java",
  "methodName" : "testRangeOfChars",
  "sourceCode" : "@Test\r\nvoid testRangeOfChars() {\r\n    final LongRange chars = of((long) 'a', (long) 'z');\r\n    assertTrue(chars.contains((long) 'b'));\r\n    assertFalse(chars.contains((long) 'B'));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\LongRangeTest.java",
  "methodName" : "testSerializing",
  "sourceCode" : "@Test\r\nvoid testSerializing() {\r\n    SerializationUtils.clone(range1);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\LongRangeTest.java",
  "methodName" : "testToIntStream",
  "sourceCode" : "@Test\r\nvoid testToIntStream() {\r\n    try (LongStream stream = range1.toLongStream()) {\r\n        assertEquals(165, stream.sum());\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\LongRangeTest.java",
  "methodName" : "testToString",
  "sourceCode" : "@Test\r\nvoid testToString() {\r\n    assertNotNull(range1.toString());\r\n    final String str = range1.toString();\r\n    assertEquals(\"[10..20]\", str);\r\n    assertEquals(\"[-20..-10]\", Range.of(-20, -10).toString());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\LongRangeTest.java",
  "methodName" : "testToStringFormat",
  "sourceCode" : "@Test\r\nvoid testToStringFormat() {\r\n    final String str = range1.toString(\"From %1$s to %2$s\");\r\n    assertEquals(\"From 10 to 20\", str);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\math\\FractionTest.java",
  "methodName" : "testAbs",
  "sourceCode" : "@Test\r\nvoid testAbs() {\r\n    Fraction f;\r\n    f = Fraction.getFraction(50, 75);\r\n    f = f.abs();\r\n    assertEquals(50, f.getNumerator());\r\n    assertEquals(75, f.getDenominator());\r\n    f = Fraction.getFraction(-50, 75);\r\n    f = f.abs();\r\n    assertEquals(50, f.getNumerator());\r\n    assertEquals(75, f.getDenominator());\r\n    f = Fraction.getFraction(Integer.MAX_VALUE, 1);\r\n    f = f.abs();\r\n    assertEquals(Integer.MAX_VALUE, f.getNumerator());\r\n    assertEquals(1, f.getDenominator());\r\n    f = Fraction.getFraction(Integer.MAX_VALUE, -1);\r\n    f = f.abs();\r\n    assertEquals(Integer.MAX_VALUE, f.getNumerator());\r\n    assertEquals(1, f.getDenominator());\r\n    assertThrows(ArithmeticException.class, () -> Fraction.getFraction(Integer.MIN_VALUE, 1).abs());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\math\\FractionTest.java",
  "methodName" : "testAdd",
  "sourceCode" : "@Test\r\nvoid testAdd() {\r\n    Fraction f;\r\n    Fraction f1;\r\n    Fraction f2;\r\n    f1 = Fraction.getFraction(3, 5);\r\n    f2 = Fraction.getFraction(1, 5);\r\n    f = f1.add(f2);\r\n    assertEquals(4, f.getNumerator());\r\n    assertEquals(5, f.getDenominator());\r\n    f1 = Fraction.getFraction(3, 5);\r\n    f2 = Fraction.getFraction(2, 5);\r\n    f = f1.add(f2);\r\n    assertEquals(1, f.getNumerator());\r\n    assertEquals(1, f.getDenominator());\r\n    f1 = Fraction.getFraction(3, 5);\r\n    f2 = Fraction.getFraction(3, 5);\r\n    f = f1.add(f2);\r\n    assertEquals(6, f.getNumerator());\r\n    assertEquals(5, f.getDenominator());\r\n    f1 = Fraction.getFraction(3, 5);\r\n    f2 = Fraction.getFraction(-4, 5);\r\n    f = f1.add(f2);\r\n    assertEquals(-1, f.getNumerator());\r\n    assertEquals(5, f.getDenominator());\r\n    f1 = Fraction.getFraction(Integer.MAX_VALUE - 1, 1);\r\n    f2 = Fraction.ONE;\r\n    f = f1.add(f2);\r\n    assertEquals(Integer.MAX_VALUE, f.getNumerator());\r\n    assertEquals(1, f.getDenominator());\r\n    f1 = Fraction.getFraction(3, 5);\r\n    f2 = Fraction.getFraction(1, 2);\r\n    f = f1.add(f2);\r\n    assertEquals(11, f.getNumerator());\r\n    assertEquals(10, f.getDenominator());\r\n    f1 = Fraction.getFraction(3, 8);\r\n    f2 = Fraction.getFraction(1, 6);\r\n    f = f1.add(f2);\r\n    assertEquals(13, f.getNumerator());\r\n    assertEquals(24, f.getDenominator());\r\n    f1 = Fraction.getFraction(0, 5);\r\n    f2 = Fraction.getFraction(1, 5);\r\n    f = f1.add(f2);\r\n    assertSame(f2, f);\r\n    f = f2.add(f1);\r\n    assertSame(f2, f);\r\n    f1 = Fraction.getFraction(-1, 13 * 13 * 2 * 2);\r\n    f2 = Fraction.getFraction(-2, 13 * 17 * 2);\r\n    final Fraction fr = f1.add(f2);\r\n    assertEquals(13 * 13 * 17 * 2 * 2, fr.getDenominator());\r\n    assertEquals(-17 - 2 * 13 * 2, fr.getNumerator());\r\n    assertNullPointerException(() -> fr.add(null));\r\n    // if this fraction is added naively, it will overflow.\r\n    // check that it doesn't.\r\n    f1 = Fraction.getFraction(1, 32768 * 3);\r\n    f2 = Fraction.getFraction(1, 59049);\r\n    f = f1.add(f2);\r\n    assertEquals(52451, f.getNumerator());\r\n    assertEquals(1934917632, f.getDenominator());\r\n    f1 = Fraction.getFraction(Integer.MIN_VALUE, 3);\r\n    f2 = Fraction.ONE_THIRD;\r\n    f = f1.add(f2);\r\n    assertEquals(Integer.MIN_VALUE + 1, f.getNumerator());\r\n    assertEquals(3, f.getDenominator());\r\n    f1 = Fraction.getFraction(Integer.MAX_VALUE - 1, 1);\r\n    f2 = Fraction.ONE;\r\n    f = f1.add(f2);\r\n    assertEquals(Integer.MAX_VALUE, f.getNumerator());\r\n    assertEquals(1, f.getDenominator());\r\n    final Fraction overflower = f;\r\n    // should overflow\r\n    assertThrows(ArithmeticException.class, () -> overflower.add(Fraction.ONE));\r\n    // denominator should not be a multiple of 2 or 3 to trigger overflow\r\n    assertThrows(ArithmeticException.class, () -> Fraction.getFraction(Integer.MIN_VALUE, 5).add(Fraction.getFraction(-1, 5)));\r\n    final Fraction maxValue = Fraction.getFraction(-Integer.MAX_VALUE, 1);\r\n    assertThrows(ArithmeticException.class, () -> maxValue.add(maxValue));\r\n    final Fraction negativeMaxValue = Fraction.getFraction(-Integer.MAX_VALUE, 1);\r\n    assertThrows(ArithmeticException.class, () -> negativeMaxValue.add(negativeMaxValue));\r\n    final Fraction f3 = Fraction.getFraction(3, 327680);\r\n    final Fraction f4 = Fraction.getFraction(2, 59049);\r\n    // should overflow\r\n    assertThrows(ArithmeticException.class, () -> f3.add(f4));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\math\\FractionTest.java",
  "methodName" : "testCompareTo",
  "sourceCode" : "@Test\r\nvoid testCompareTo() {\r\n    final Fraction f1;\r\n    Fraction f2;\r\n    f1 = Fraction.getFraction(3, 5);\r\n    assertEquals(0, f1.compareTo(f1));\r\n    final Fraction fr = f1;\r\n    assertNullPointerException(() -> fr.compareTo(null));\r\n    f2 = Fraction.getFraction(2, 5);\r\n    assertTrue(f1.compareTo(f2) > 0);\r\n    assertEquals(0, f2.compareTo(f2));\r\n    f2 = Fraction.getFraction(4, 5);\r\n    assertTrue(f1.compareTo(f2) < 0);\r\n    assertEquals(0, f2.compareTo(f2));\r\n    f2 = Fraction.getFraction(3, 5);\r\n    assertEquals(0, f1.compareTo(f2));\r\n    assertEquals(0, f2.compareTo(f2));\r\n    f2 = Fraction.getFraction(6, 10);\r\n    assertEquals(0, f1.compareTo(f2));\r\n    assertEquals(0, f2.compareTo(f2));\r\n    f2 = Fraction.getFraction(-1, 1, Integer.MAX_VALUE);\r\n    assertTrue(f1.compareTo(f2) > 0);\r\n    assertEquals(0, f2.compareTo(f2));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\math\\FractionTest.java",
  "methodName" : "testConstants",
  "sourceCode" : "@Test\r\nvoid testConstants() {\r\n    assertEquals(0, Fraction.ZERO.getNumerator());\r\n    assertEquals(1, Fraction.ZERO.getDenominator());\r\n    assertEquals(1, Fraction.ONE.getNumerator());\r\n    assertEquals(1, Fraction.ONE.getDenominator());\r\n    assertEquals(1, Fraction.ONE_HALF.getNumerator());\r\n    assertEquals(2, Fraction.ONE_HALF.getDenominator());\r\n    assertEquals(1, Fraction.ONE_THIRD.getNumerator());\r\n    assertEquals(3, Fraction.ONE_THIRD.getDenominator());\r\n    assertEquals(2, Fraction.TWO_THIRDS.getNumerator());\r\n    assertEquals(3, Fraction.TWO_THIRDS.getDenominator());\r\n    assertEquals(1, Fraction.ONE_QUARTER.getNumerator());\r\n    assertEquals(4, Fraction.ONE_QUARTER.getDenominator());\r\n    assertEquals(2, Fraction.TWO_QUARTERS.getNumerator());\r\n    assertEquals(4, Fraction.TWO_QUARTERS.getDenominator());\r\n    assertEquals(3, Fraction.THREE_QUARTERS.getNumerator());\r\n    assertEquals(4, Fraction.THREE_QUARTERS.getDenominator());\r\n    assertEquals(1, Fraction.ONE_FIFTH.getNumerator());\r\n    assertEquals(5, Fraction.ONE_FIFTH.getDenominator());\r\n    assertEquals(2, Fraction.TWO_FIFTHS.getNumerator());\r\n    assertEquals(5, Fraction.TWO_FIFTHS.getDenominator());\r\n    assertEquals(3, Fraction.THREE_FIFTHS.getNumerator());\r\n    assertEquals(5, Fraction.THREE_FIFTHS.getDenominator());\r\n    assertEquals(4, Fraction.FOUR_FIFTHS.getNumerator());\r\n    assertEquals(5, Fraction.FOUR_FIFTHS.getDenominator());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\math\\FractionTest.java",
  "methodName" : "testConversions",
  "sourceCode" : "@Test\r\nvoid testConversions() {\r\n    final Fraction f;\r\n    f = Fraction.getFraction(3, 7, 8);\r\n    assertEquals(3, f.intValue());\r\n    assertEquals(3L, f.longValue());\r\n    assertEquals(3.875f, f.floatValue(), 0.00001f);\r\n    assertEquals(3.875d, f.doubleValue(), 0.00001d);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\math\\FractionTest.java",
  "methodName" : "testDivide",
  "sourceCode" : "@Test\r\nvoid testDivide() {\r\n    Fraction f;\r\n    Fraction f1;\r\n    Fraction f2;\r\n    f1 = Fraction.getFraction(3, 5);\r\n    f2 = Fraction.getFraction(2, 5);\r\n    f = f1.divideBy(f2);\r\n    assertEquals(3, f.getNumerator());\r\n    assertEquals(2, f.getDenominator());\r\n    assertThrows(ArithmeticException.class, () -> Fraction.getFraction(3, 5).divideBy(Fraction.ZERO));\r\n    f1 = Fraction.getFraction(0, 5);\r\n    f2 = Fraction.getFraction(2, 7);\r\n    f = f1.divideBy(f2);\r\n    assertSame(Fraction.ZERO, f);\r\n    f1 = Fraction.getFraction(2, 7);\r\n    f2 = Fraction.ONE;\r\n    f = f1.divideBy(f2);\r\n    assertEquals(2, f.getNumerator());\r\n    assertEquals(7, f.getDenominator());\r\n    f1 = Fraction.getFraction(1, Integer.MAX_VALUE);\r\n    f = f1.divideBy(f1);\r\n    assertEquals(1, f.getNumerator());\r\n    assertEquals(1, f.getDenominator());\r\n    f1 = Fraction.getFraction(Integer.MIN_VALUE, Integer.MAX_VALUE);\r\n    f2 = Fraction.getFraction(1, Integer.MAX_VALUE);\r\n    final Fraction fr = f1.divideBy(f2);\r\n    assertEquals(Integer.MIN_VALUE, fr.getNumerator());\r\n    assertEquals(1, fr.getDenominator());\r\n    assertNullPointerException(() -> fr.divideBy(null));\r\n    final Fraction smallest = Fraction.getFraction(1, Integer.MAX_VALUE);\r\n    // Should overflow\r\n    assertThrows(ArithmeticException.class, () -> smallest.divideBy(smallest.invert()));\r\n    final Fraction negative = Fraction.getFraction(1, -Integer.MAX_VALUE);\r\n    // Should overflow\r\n    assertThrows(ArithmeticException.class, () -> negative.divideBy(negative.invert()));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\math\\FractionTest.java",
  "methodName" : "testEquals",
  "sourceCode" : "@Test\r\nvoid testEquals() {\r\n    Fraction f1;\r\n    Fraction f2;\r\n    f1 = Fraction.getFraction(3, 5);\r\n    assertNotEquals(null, f1);\r\n    assertNotEquals(f1, new Object());\r\n    assertNotEquals(f1, Integer.valueOf(6));\r\n    f1 = Fraction.getFraction(3, 5);\r\n    f2 = Fraction.getFraction(2, 5);\r\n    assertNotEquals(f1, f2);\r\n    assertEquals(f1, f1);\r\n    assertEquals(f2, f2);\r\n    f2 = Fraction.getFraction(3, 5);\r\n    assertEquals(f1, f2);\r\n    f2 = Fraction.getFraction(6, 10);\r\n    assertNotEquals(f1, f2);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\math\\FractionTest.java",
  "methodName" : "testFactory_double",
  "sourceCode" : "@Test\r\nvoid testFactory_double() {\r\n    assertThrows(ArithmeticException.class, () -> Fraction.getFraction(Double.NaN));\r\n    assertThrows(ArithmeticException.class, () -> Fraction.getFraction(Double.POSITIVE_INFINITY));\r\n    assertThrows(ArithmeticException.class, () -> Fraction.getFraction(Double.NEGATIVE_INFINITY));\r\n    assertThrows(ArithmeticException.class, () -> Fraction.getFraction((double) Integer.MAX_VALUE + 1));\r\n    // zero\r\n    Fraction f = Fraction.getFraction(0.0d);\r\n    assertEquals(0, f.getNumerator());\r\n    assertEquals(1, f.getDenominator());\r\n    // one\r\n    f = Fraction.getFraction(1.0d);\r\n    assertEquals(1, f.getNumerator());\r\n    assertEquals(1, f.getDenominator());\r\n    // one half\r\n    f = Fraction.getFraction(0.5d);\r\n    assertEquals(1, f.getNumerator());\r\n    assertEquals(2, f.getDenominator());\r\n    // negative\r\n    f = Fraction.getFraction(-0.875d);\r\n    assertEquals(-7, f.getNumerator());\r\n    assertEquals(8, f.getDenominator());\r\n    // over 1\r\n    f = Fraction.getFraction(1.25d);\r\n    assertEquals(5, f.getNumerator());\r\n    assertEquals(4, f.getDenominator());\r\n    // two thirds\r\n    f = Fraction.getFraction(0.66666d);\r\n    assertEquals(2, f.getNumerator());\r\n    assertEquals(3, f.getDenominator());\r\n    // small\r\n    f = Fraction.getFraction(1.0d / 10001d);\r\n    assertEquals(0, f.getNumerator());\r\n    assertEquals(1, f.getDenominator());\r\n    // normal\r\n    Fraction f2;\r\n    for (int i = 1; i <= 100; i++) {\r\n        // denominator\r\n        for (int j = 1; j <= i; j++) {\r\n            // numerator\r\n            f = Fraction.getFraction((double) j / (double) i);\r\n            f2 = Fraction.getReducedFraction(j, i);\r\n            assertEquals(f2.getNumerator(), f.getNumerator());\r\n            assertEquals(f2.getDenominator(), f.getDenominator());\r\n        }\r\n    }\r\n    // save time by skipping some tests! (\r\n    for (int i = 1001; i <= 10000; i += SKIP) {\r\n        // denominator\r\n        for (int j = 1; j <= i; j++) {\r\n            // numerator\r\n            f = Fraction.getFraction((double) j / (double) i);\r\n            f2 = Fraction.getReducedFraction(j, i);\r\n            assertEquals(f2.getNumerator(), f.getNumerator());\r\n            assertEquals(f2.getDenominator(), f.getDenominator());\r\n        }\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\math\\FractionTest.java",
  "methodName" : "testFactory_int_int",
  "sourceCode" : "@Test\r\nvoid testFactory_int_int() {\r\n    Fraction f;\r\n    // zero\r\n    f = Fraction.getFraction(0, 1);\r\n    assertEquals(0, f.getNumerator());\r\n    assertEquals(1, f.getDenominator());\r\n    f = Fraction.getFraction(0, 2);\r\n    assertEquals(0, f.getNumerator());\r\n    assertEquals(2, f.getDenominator());\r\n    // normal\r\n    f = Fraction.getFraction(1, 1);\r\n    assertEquals(1, f.getNumerator());\r\n    assertEquals(1, f.getDenominator());\r\n    f = Fraction.getFraction(2, 1);\r\n    assertEquals(2, f.getNumerator());\r\n    assertEquals(1, f.getDenominator());\r\n    f = Fraction.getFraction(23, 345);\r\n    assertEquals(23, f.getNumerator());\r\n    assertEquals(345, f.getDenominator());\r\n    // improper\r\n    f = Fraction.getFraction(22, 7);\r\n    assertEquals(22, f.getNumerator());\r\n    assertEquals(7, f.getDenominator());\r\n    // negatives\r\n    f = Fraction.getFraction(-6, 10);\r\n    assertEquals(-6, f.getNumerator());\r\n    assertEquals(10, f.getDenominator());\r\n    f = Fraction.getFraction(6, -10);\r\n    assertEquals(-6, f.getNumerator());\r\n    assertEquals(10, f.getDenominator());\r\n    f = Fraction.getFraction(-6, -10);\r\n    assertEquals(6, f.getNumerator());\r\n    assertEquals(10, f.getDenominator());\r\n    // zero denominator\r\n    assertThrows(ArithmeticException.class, () -> Fraction.getFraction(1, 0));\r\n    assertThrows(ArithmeticException.class, () -> Fraction.getFraction(2, 0));\r\n    assertThrows(ArithmeticException.class, () -> Fraction.getFraction(-3, 0));\r\n    // very large: can't represent as unsimplified fraction, although\r\n    assertThrows(ArithmeticException.class, () -> Fraction.getFraction(4, Integer.MIN_VALUE));\r\n    assertThrows(ArithmeticException.class, () -> Fraction.getFraction(1, Integer.MIN_VALUE));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\math\\FractionTest.java",
  "methodName" : "testFactory_int_int_int",
  "sourceCode" : "@Test\r\nvoid testFactory_int_int_int() {\r\n    Fraction f;\r\n    // zero\r\n    f = Fraction.getFraction(0, 0, 2);\r\n    assertEquals(0, f.getNumerator());\r\n    assertEquals(2, f.getDenominator());\r\n    f = Fraction.getFraction(2, 0, 2);\r\n    assertEquals(4, f.getNumerator());\r\n    assertEquals(2, f.getDenominator());\r\n    f = Fraction.getFraction(0, 1, 2);\r\n    assertEquals(1, f.getNumerator());\r\n    assertEquals(2, f.getDenominator());\r\n    // normal\r\n    f = Fraction.getFraction(1, 1, 2);\r\n    assertEquals(3, f.getNumerator());\r\n    assertEquals(2, f.getDenominator());\r\n    // negatives\r\n    assertThrows(ArithmeticException.class, () -> Fraction.getFraction(1, -6, -10));\r\n    assertThrows(ArithmeticException.class, () -> Fraction.getFraction(1, -6, -10));\r\n    assertThrows(ArithmeticException.class, () -> Fraction.getFraction(1, -6, -10));\r\n    // negative whole\r\n    f = Fraction.getFraction(-1, 6, 10);\r\n    assertEquals(-16, f.getNumerator());\r\n    assertEquals(10, f.getDenominator());\r\n    assertThrows(ArithmeticException.class, () -> Fraction.getFraction(-1, -6, 10));\r\n    assertThrows(ArithmeticException.class, () -> Fraction.getFraction(-1, 6, -10));\r\n    assertThrows(ArithmeticException.class, () -> Fraction.getFraction(-1, -6, -10));\r\n    // zero denominator\r\n    assertThrows(ArithmeticException.class, () -> Fraction.getFraction(0, 1, 0));\r\n    assertThrows(ArithmeticException.class, () -> Fraction.getFraction(1, 2, 0));\r\n    assertThrows(ArithmeticException.class, () -> Fraction.getFraction(-1, -3, 0));\r\n    assertThrows(ArithmeticException.class, () -> Fraction.getFraction(Integer.MAX_VALUE, 1, 2));\r\n    assertThrows(ArithmeticException.class, () -> Fraction.getFraction(-Integer.MAX_VALUE, 1, 2));\r\n    // very large\r\n    f = Fraction.getFraction(-1, 0, Integer.MAX_VALUE);\r\n    assertEquals(-Integer.MAX_VALUE, f.getNumerator());\r\n    assertEquals(Integer.MAX_VALUE, f.getDenominator());\r\n    // negative denominators not allowed in this constructor.\r\n    assertThrows(ArithmeticException.class, () -> Fraction.getFraction(0, 4, Integer.MIN_VALUE));\r\n    assertThrows(ArithmeticException.class, () -> Fraction.getFraction(1, 1, Integer.MAX_VALUE));\r\n    assertThrows(ArithmeticException.class, () -> Fraction.getFraction(-1, 2, Integer.MAX_VALUE));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\math\\FractionTest.java",
  "methodName" : "testFactory_String",
  "sourceCode" : "@Test\r\nvoid testFactory_String() {\r\n    assertNullPointerException(() -> Fraction.getFraction(null));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\math\\FractionTest.java",
  "methodName" : "testFactory_String_double",
  "sourceCode" : "@Test\r\nvoid testFactory_String_double() {\r\n    Fraction f;\r\n    f = Fraction.getFraction(\"0.0\");\r\n    assertEquals(0, f.getNumerator());\r\n    assertEquals(1, f.getDenominator());\r\n    f = Fraction.getFraction(\"0.2\");\r\n    assertEquals(1, f.getNumerator());\r\n    assertEquals(5, f.getDenominator());\r\n    f = Fraction.getFraction(\"0.5\");\r\n    assertEquals(1, f.getNumerator());\r\n    assertEquals(2, f.getDenominator());\r\n    f = Fraction.getFraction(\"0.66666\");\r\n    assertEquals(2, f.getNumerator());\r\n    assertEquals(3, f.getDenominator());\r\n    assertThrows(NumberFormatException.class, () -> Fraction.getFraction(\"2.3R\"));\r\n    // too big\r\n    assertThrows(NumberFormatException.class, () -> Fraction.getFraction(\"2147483648\"));\r\n    assertThrows(NumberFormatException.class, () -> Fraction.getFraction(\".\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\math\\FractionTest.java",
  "methodName" : "testFactory_String_improper",
  "sourceCode" : "@Test\r\nvoid testFactory_String_improper() {\r\n    Fraction f;\r\n    f = Fraction.getFraction(\"0/1\");\r\n    assertEquals(0, f.getNumerator());\r\n    assertEquals(1, f.getDenominator());\r\n    f = Fraction.getFraction(\"1/5\");\r\n    assertEquals(1, f.getNumerator());\r\n    assertEquals(5, f.getDenominator());\r\n    f = Fraction.getFraction(\"1/2\");\r\n    assertEquals(1, f.getNumerator());\r\n    assertEquals(2, f.getDenominator());\r\n    f = Fraction.getFraction(\"2/3\");\r\n    assertEquals(2, f.getNumerator());\r\n    assertEquals(3, f.getDenominator());\r\n    f = Fraction.getFraction(\"7/3\");\r\n    assertEquals(7, f.getNumerator());\r\n    assertEquals(3, f.getDenominator());\r\n    f = Fraction.getFraction(\"2/4\");\r\n    assertEquals(2, f.getNumerator());\r\n    assertEquals(4, f.getDenominator());\r\n    assertThrows(NumberFormatException.class, () -> Fraction.getFraction(\"2/d\"));\r\n    assertThrows(NumberFormatException.class, () -> Fraction.getFraction(\"2e/3\"));\r\n    assertThrows(NumberFormatException.class, () -> Fraction.getFraction(\"2/\"));\r\n    assertThrows(NumberFormatException.class, () -> Fraction.getFraction(\"/\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\math\\FractionTest.java",
  "methodName" : "testFactory_String_proper",
  "sourceCode" : "@Test\r\nvoid testFactory_String_proper() {\r\n    Fraction f;\r\n    f = Fraction.getFraction(\"0 0/1\");\r\n    assertEquals(0, f.getNumerator());\r\n    assertEquals(1, f.getDenominator());\r\n    f = Fraction.getFraction(\"1 1/5\");\r\n    assertEquals(6, f.getNumerator());\r\n    assertEquals(5, f.getDenominator());\r\n    f = Fraction.getFraction(\"7 1/2\");\r\n    assertEquals(15, f.getNumerator());\r\n    assertEquals(2, f.getDenominator());\r\n    f = Fraction.getFraction(\"1 2/4\");\r\n    assertEquals(6, f.getNumerator());\r\n    assertEquals(4, f.getDenominator());\r\n    f = Fraction.getFraction(\"-7 1/2\");\r\n    assertEquals(-15, f.getNumerator());\r\n    assertEquals(2, f.getDenominator());\r\n    f = Fraction.getFraction(\"-1 2/4\");\r\n    assertEquals(-6, f.getNumerator());\r\n    assertEquals(4, f.getDenominator());\r\n    assertThrows(NumberFormatException.class, () -> Fraction.getFraction(\"2 3\"));\r\n    assertThrows(NumberFormatException.class, () -> Fraction.getFraction(\"a 3\"));\r\n    assertThrows(NumberFormatException.class, () -> Fraction.getFraction(\"2 b/4\"));\r\n    assertThrows(NumberFormatException.class, () -> Fraction.getFraction(\"2 \"));\r\n    assertThrows(NumberFormatException.class, () -> Fraction.getFraction(\" 3\"));\r\n    assertThrows(NumberFormatException.class, () -> Fraction.getFraction(\" \"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\math\\FractionTest.java",
  "methodName" : "testGets",
  "sourceCode" : "@Test\r\nvoid testGets() {\r\n    Fraction f;\r\n    f = Fraction.getFraction(3, 5, 6);\r\n    assertEquals(23, f.getNumerator());\r\n    assertEquals(3, f.getProperWhole());\r\n    assertEquals(5, f.getProperNumerator());\r\n    assertEquals(6, f.getDenominator());\r\n    f = Fraction.getFraction(-3, 5, 6);\r\n    assertEquals(-23, f.getNumerator());\r\n    assertEquals(-3, f.getProperWhole());\r\n    assertEquals(5, f.getProperNumerator());\r\n    assertEquals(6, f.getDenominator());\r\n    f = Fraction.getFraction(Integer.MIN_VALUE, 0, 1);\r\n    assertEquals(Integer.MIN_VALUE, f.getNumerator());\r\n    assertEquals(Integer.MIN_VALUE, f.getProperWhole());\r\n    assertEquals(0, f.getProperNumerator());\r\n    assertEquals(1, f.getDenominator());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\math\\FractionTest.java",
  "methodName" : "testHashCode",
  "sourceCode" : "@Test\r\nvoid testHashCode() {\r\n    final Fraction f1 = Fraction.getFraction(3, 5);\r\n    Fraction f2 = Fraction.getFraction(3, 5);\r\n    assertEquals(f1.hashCode(), f2.hashCode());\r\n    f2 = Fraction.getFraction(2, 5);\r\n    assertTrue(f1.hashCode() != f2.hashCode());\r\n    f2 = Fraction.getFraction(6, 10);\r\n    assertTrue(f1.hashCode() != f2.hashCode());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\math\\FractionTest.java",
  "methodName" : "testHashCodeNotEquals",
  "sourceCode" : "/**\r\n * Tests https://issues.apache.org/jira/browse/LANG-1764\r\n */\r\n@ParameterizedTest\r\n// @formatter:off\r\n@CsvSource({ \"0,          37,         -464320789,  46\", \"0,          37,         -464320788,  9\", \"0,          37,         1857283155,  38\", \"0,          25185704,   1161454280,  1050304\", \"0,          38817068,   1509581512,  18875972\", \"0,          38817068,   -2146369536, 2145078572\", \"1400217380, 128,        2092630052,  150535040\", \"1400217380, 128,        -580400986,  268435638\", \"1400217380, 2147483592, -2147483648, 268435452\", \"1756395909, 4194598,    1174949894,  42860673\" })\r\n// @formatter:on\r\nvoid testHashCodeNotEquals(final int f1n, final int f1d, final int f2n, final int f2d) {\r\n    assertNotEquals(Fraction.getFraction(f1n, f1d), Fraction.getFraction(f2n, f2d));\r\n    assertNotEquals(Fraction.getFraction(f1n, f1d).hashCode(), Fraction.getFraction(f2n, f2d).hashCode());\r\n}",
  "annotations" : [ "ParameterizedTest" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\math\\FractionTest.java",
  "methodName" : "testInvert",
  "sourceCode" : "@Test\r\nvoid testInvert() {\r\n    Fraction f;\r\n    f = Fraction.getFraction(50, 75);\r\n    f = f.invert();\r\n    assertEquals(75, f.getNumerator());\r\n    assertEquals(50, f.getDenominator());\r\n    f = Fraction.getFraction(4, 3);\r\n    f = f.invert();\r\n    assertEquals(3, f.getNumerator());\r\n    assertEquals(4, f.getDenominator());\r\n    f = Fraction.getFraction(-15, 47);\r\n    f = f.invert();\r\n    assertEquals(-47, f.getNumerator());\r\n    assertEquals(15, f.getDenominator());\r\n    assertThrows(ArithmeticException.class, () -> Fraction.getFraction(0, 3).invert());\r\n    assertThrows(ArithmeticException.class, () -> Fraction.getFraction(Integer.MIN_VALUE, 1).invert());\r\n    f = Fraction.getFraction(Integer.MAX_VALUE, 1);\r\n    f = f.invert();\r\n    assertEquals(1, f.getNumerator());\r\n    assertEquals(Integer.MAX_VALUE, f.getDenominator());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\math\\FractionTest.java",
  "methodName" : "testMultiply",
  "sourceCode" : "@Test\r\nvoid testMultiply() {\r\n    Fraction f;\r\n    Fraction f1;\r\n    Fraction f2;\r\n    f1 = Fraction.getFraction(3, 5);\r\n    f2 = Fraction.getFraction(2, 5);\r\n    f = f1.multiplyBy(f2);\r\n    assertEquals(6, f.getNumerator());\r\n    assertEquals(25, f.getDenominator());\r\n    f1 = Fraction.getFraction(6, 10);\r\n    f2 = Fraction.getFraction(6, 10);\r\n    f = f1.multiplyBy(f2);\r\n    assertEquals(9, f.getNumerator());\r\n    assertEquals(25, f.getDenominator());\r\n    f = f.multiplyBy(f2);\r\n    assertEquals(27, f.getNumerator());\r\n    assertEquals(125, f.getDenominator());\r\n    f1 = Fraction.getFraction(3, 5);\r\n    f2 = Fraction.getFraction(-2, 5);\r\n    f = f1.multiplyBy(f2);\r\n    assertEquals(-6, f.getNumerator());\r\n    assertEquals(25, f.getDenominator());\r\n    f1 = Fraction.getFraction(-3, 5);\r\n    f2 = Fraction.getFraction(-2, 5);\r\n    f = f1.multiplyBy(f2);\r\n    assertEquals(6, f.getNumerator());\r\n    assertEquals(25, f.getDenominator());\r\n    f1 = Fraction.getFraction(0, 5);\r\n    f2 = Fraction.getFraction(2, 7);\r\n    f = f1.multiplyBy(f2);\r\n    assertSame(Fraction.ZERO, f);\r\n    f1 = Fraction.getFraction(2, 7);\r\n    f2 = Fraction.ONE;\r\n    f = f1.multiplyBy(f2);\r\n    assertEquals(2, f.getNumerator());\r\n    assertEquals(7, f.getDenominator());\r\n    f1 = Fraction.getFraction(Integer.MAX_VALUE, 1);\r\n    f2 = Fraction.getFraction(Integer.MIN_VALUE, Integer.MAX_VALUE);\r\n    f = f1.multiplyBy(f2);\r\n    assertEquals(Integer.MIN_VALUE, f.getNumerator());\r\n    assertEquals(1, f.getDenominator());\r\n    final Fraction fr = f;\r\n    assertNullPointerException(() -> fr.multiplyBy(null));\r\n    final Fraction fr1 = Fraction.getFraction(1, Integer.MAX_VALUE);\r\n    assertThrows(ArithmeticException.class, () -> fr1.multiplyBy(fr1));\r\n    final Fraction fr2 = Fraction.getFraction(1, -Integer.MAX_VALUE);\r\n    assertThrows(ArithmeticException.class, () -> fr2.multiplyBy(fr2));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\math\\FractionTest.java",
  "methodName" : "testNegate",
  "sourceCode" : "@Test\r\nvoid testNegate() {\r\n    Fraction f;\r\n    f = Fraction.getFraction(50, 75);\r\n    f = f.negate();\r\n    assertEquals(-50, f.getNumerator());\r\n    assertEquals(75, f.getDenominator());\r\n    f = Fraction.getFraction(-50, 75);\r\n    f = f.negate();\r\n    assertEquals(50, f.getNumerator());\r\n    assertEquals(75, f.getDenominator());\r\n    // large values\r\n    f = Fraction.getFraction(Integer.MAX_VALUE - 1, Integer.MAX_VALUE);\r\n    f = f.negate();\r\n    assertEquals(Integer.MIN_VALUE + 2, f.getNumerator());\r\n    assertEquals(Integer.MAX_VALUE, f.getDenominator());\r\n    assertThrows(ArithmeticException.class, () -> Fraction.getFraction(Integer.MIN_VALUE, 1).negate());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\math\\FractionTest.java",
  "methodName" : "testPow",
  "sourceCode" : "@Test\r\nvoid testPow() {\r\n    Fraction f;\r\n    f = Fraction.getFraction(3, 5);\r\n    assertEquals(Fraction.ONE, f.pow(0));\r\n    f = Fraction.getFraction(3, 5);\r\n    assertSame(f, f.pow(1));\r\n    assertEquals(f, f.pow(1));\r\n    f = Fraction.getFraction(3, 5);\r\n    f = f.pow(2);\r\n    assertEquals(9, f.getNumerator());\r\n    assertEquals(25, f.getDenominator());\r\n    f = Fraction.getFraction(3, 5);\r\n    f = f.pow(3);\r\n    assertEquals(27, f.getNumerator());\r\n    assertEquals(125, f.getDenominator());\r\n    f = Fraction.getFraction(3, 5);\r\n    f = f.pow(-1);\r\n    assertEquals(5, f.getNumerator());\r\n    assertEquals(3, f.getDenominator());\r\n    f = Fraction.getFraction(3, 5);\r\n    f = f.pow(-2);\r\n    assertEquals(25, f.getNumerator());\r\n    assertEquals(9, f.getDenominator());\r\n    // check unreduced fractions stay that way.\r\n    f = Fraction.getFraction(6, 10);\r\n    assertEquals(Fraction.ONE, f.pow(0));\r\n    f = Fraction.getFraction(6, 10);\r\n    assertEquals(f, f.pow(1));\r\n    assertNotEquals(f.pow(1), Fraction.getFraction(3, 5));\r\n    f = Fraction.getFraction(6, 10);\r\n    f = f.pow(2);\r\n    assertEquals(9, f.getNumerator());\r\n    assertEquals(25, f.getDenominator());\r\n    f = Fraction.getFraction(6, 10);\r\n    f = f.pow(3);\r\n    assertEquals(27, f.getNumerator());\r\n    assertEquals(125, f.getDenominator());\r\n    f = Fraction.getFraction(6, 10);\r\n    f = f.pow(-1);\r\n    assertEquals(10, f.getNumerator());\r\n    assertEquals(6, f.getDenominator());\r\n    f = Fraction.getFraction(6, 10);\r\n    f = f.pow(-2);\r\n    assertEquals(25, f.getNumerator());\r\n    assertEquals(9, f.getDenominator());\r\n    // zero to any positive power is still zero.\r\n    f = Fraction.getFraction(0, 1231);\r\n    f = f.pow(1);\r\n    assertEquals(0, f.compareTo(Fraction.ZERO));\r\n    assertEquals(0, f.getNumerator());\r\n    assertEquals(1231, f.getDenominator());\r\n    f = f.pow(2);\r\n    assertEquals(0, f.compareTo(Fraction.ZERO));\r\n    assertEquals(0, f.getNumerator());\r\n    assertEquals(1, f.getDenominator());\r\n    // zero to negative powers should throw an exception\r\n    final Fraction fr = f;\r\n    assertThrows(ArithmeticException.class, () -> fr.pow(-1));\r\n    assertThrows(ArithmeticException.class, () -> fr.pow(Integer.MIN_VALUE));\r\n    // one to any power is still one.\r\n    f = Fraction.getFraction(1, 1);\r\n    f = f.pow(0);\r\n    assertEquals(f, Fraction.ONE);\r\n    f = f.pow(1);\r\n    assertEquals(f, Fraction.ONE);\r\n    f = f.pow(-1);\r\n    assertEquals(f, Fraction.ONE);\r\n    f = f.pow(Integer.MAX_VALUE);\r\n    assertEquals(f, Fraction.ONE);\r\n    f = f.pow(Integer.MIN_VALUE);\r\n    assertEquals(f, Fraction.ONE);\r\n    assertThrows(ArithmeticException.class, () -> Fraction.getFraction(Integer.MAX_VALUE, 1).pow(2));\r\n    // Numerator growing too negative during the pow operation.\r\n    assertThrows(ArithmeticException.class, () -> Fraction.getFraction(Integer.MIN_VALUE, 1).pow(3));\r\n    assertThrows(ArithmeticException.class, () -> Fraction.getFraction(65536, 1).pow(2));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\math\\FractionTest.java",
  "methodName" : "testReduce",
  "sourceCode" : "@Test\r\nvoid testReduce() {\r\n    Fraction f;\r\n    f = Fraction.getFraction(50, 75);\r\n    Fraction result = f.reduce();\r\n    assertEquals(2, result.getNumerator());\r\n    assertEquals(3, result.getDenominator());\r\n    f = Fraction.getFraction(-2, -3);\r\n    result = f.reduce();\r\n    assertEquals(2, result.getNumerator());\r\n    assertEquals(3, result.getDenominator());\r\n    f = Fraction.getFraction(2, -3);\r\n    result = f.reduce();\r\n    assertEquals(-2, result.getNumerator());\r\n    assertEquals(3, result.getDenominator());\r\n    f = Fraction.getFraction(-2, 3);\r\n    result = f.reduce();\r\n    assertEquals(-2, result.getNumerator());\r\n    assertEquals(3, result.getDenominator());\r\n    assertSame(f, result);\r\n    f = Fraction.getFraction(2, 3);\r\n    result = f.reduce();\r\n    assertEquals(2, result.getNumerator());\r\n    assertEquals(3, result.getDenominator());\r\n    assertSame(f, result);\r\n    f = Fraction.getFraction(0, 1);\r\n    result = f.reduce();\r\n    assertEquals(0, result.getNumerator());\r\n    assertEquals(1, result.getDenominator());\r\n    assertSame(f, result);\r\n    f = Fraction.getFraction(0, 100);\r\n    result = f.reduce();\r\n    assertEquals(0, result.getNumerator());\r\n    assertEquals(1, result.getDenominator());\r\n    assertSame(result, Fraction.ZERO);\r\n    f = Fraction.getFraction(Integer.MIN_VALUE, 2);\r\n    result = f.reduce();\r\n    assertEquals(Integer.MIN_VALUE / 2, result.getNumerator());\r\n    assertEquals(1, result.getDenominator());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\math\\FractionTest.java",
  "methodName" : "testReducedFactory_int_int",
  "sourceCode" : "@Test\r\nvoid testReducedFactory_int_int() {\r\n    Fraction f;\r\n    // zero\r\n    f = Fraction.getReducedFraction(0, 1);\r\n    assertEquals(0, f.getNumerator());\r\n    assertEquals(1, f.getDenominator());\r\n    // normal\r\n    f = Fraction.getReducedFraction(1, 1);\r\n    assertEquals(1, f.getNumerator());\r\n    assertEquals(1, f.getDenominator());\r\n    f = Fraction.getReducedFraction(2, 1);\r\n    assertEquals(2, f.getNumerator());\r\n    assertEquals(1, f.getDenominator());\r\n    // improper\r\n    f = Fraction.getReducedFraction(22, 7);\r\n    assertEquals(22, f.getNumerator());\r\n    assertEquals(7, f.getDenominator());\r\n    // negatives\r\n    f = Fraction.getReducedFraction(-6, 10);\r\n    assertEquals(-3, f.getNumerator());\r\n    assertEquals(5, f.getDenominator());\r\n    f = Fraction.getReducedFraction(6, -10);\r\n    assertEquals(-3, f.getNumerator());\r\n    assertEquals(5, f.getDenominator());\r\n    f = Fraction.getReducedFraction(-6, -10);\r\n    assertEquals(3, f.getNumerator());\r\n    assertEquals(5, f.getDenominator());\r\n    // zero denominator\r\n    assertThrows(ArithmeticException.class, () -> Fraction.getReducedFraction(1, 0));\r\n    assertThrows(ArithmeticException.class, () -> Fraction.getReducedFraction(2, 0));\r\n    assertThrows(ArithmeticException.class, () -> Fraction.getReducedFraction(-3, 0));\r\n    // reduced\r\n    f = Fraction.getReducedFraction(0, 2);\r\n    assertEquals(0, f.getNumerator());\r\n    assertEquals(1, f.getDenominator());\r\n    f = Fraction.getReducedFraction(2, 2);\r\n    assertEquals(1, f.getNumerator());\r\n    assertEquals(1, f.getDenominator());\r\n    f = Fraction.getReducedFraction(2, 4);\r\n    assertEquals(1, f.getNumerator());\r\n    assertEquals(2, f.getDenominator());\r\n    f = Fraction.getReducedFraction(15, 10);\r\n    assertEquals(3, f.getNumerator());\r\n    assertEquals(2, f.getDenominator());\r\n    f = Fraction.getReducedFraction(121, 22);\r\n    assertEquals(11, f.getNumerator());\r\n    assertEquals(2, f.getDenominator());\r\n    // Extreme values\r\n    // OK, can reduce before negating\r\n    f = Fraction.getReducedFraction(-2, Integer.MIN_VALUE);\r\n    assertEquals(1, f.getNumerator());\r\n    assertEquals(-(Integer.MIN_VALUE / 2), f.getDenominator());\r\n    // Can't reduce, negation will throw\r\n    assertThrows(ArithmeticException.class, () -> Fraction.getReducedFraction(-7, Integer.MIN_VALUE));\r\n    // LANG-662\r\n    f = Fraction.getReducedFraction(Integer.MIN_VALUE, 2);\r\n    assertEquals(Integer.MIN_VALUE / 2, f.getNumerator());\r\n    assertEquals(1, f.getDenominator());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\math\\FractionTest.java",
  "methodName" : "testSubtract",
  "sourceCode" : "@Test\r\nvoid testSubtract() {\r\n    Fraction f;\r\n    Fraction f1;\r\n    Fraction f2;\r\n    f1 = Fraction.getFraction(3, 5);\r\n    f2 = Fraction.getFraction(1, 5);\r\n    f = f1.subtract(f2);\r\n    assertEquals(2, f.getNumerator());\r\n    assertEquals(5, f.getDenominator());\r\n    f1 = Fraction.getFraction(7, 5);\r\n    f2 = Fraction.getFraction(2, 5);\r\n    f = f1.subtract(f2);\r\n    assertEquals(1, f.getNumerator());\r\n    assertEquals(1, f.getDenominator());\r\n    f1 = Fraction.getFraction(3, 5);\r\n    f2 = Fraction.getFraction(3, 5);\r\n    f = f1.subtract(f2);\r\n    assertEquals(0, f.getNumerator());\r\n    assertEquals(1, f.getDenominator());\r\n    f1 = Fraction.getFraction(3, 5);\r\n    f2 = Fraction.getFraction(-4, 5);\r\n    f = f1.subtract(f2);\r\n    assertEquals(7, f.getNumerator());\r\n    assertEquals(5, f.getDenominator());\r\n    f1 = Fraction.getFraction(0, 5);\r\n    f2 = Fraction.getFraction(4, 5);\r\n    f = f1.subtract(f2);\r\n    assertEquals(-4, f.getNumerator());\r\n    assertEquals(5, f.getDenominator());\r\n    f1 = Fraction.getFraction(0, 5);\r\n    f2 = Fraction.getFraction(-4, 5);\r\n    f = f1.subtract(f2);\r\n    assertEquals(4, f.getNumerator());\r\n    assertEquals(5, f.getDenominator());\r\n    f1 = Fraction.getFraction(3, 5);\r\n    f2 = Fraction.getFraction(1, 2);\r\n    f = f1.subtract(f2);\r\n    assertEquals(1, f.getNumerator());\r\n    assertEquals(10, f.getDenominator());\r\n    f1 = Fraction.getFraction(0, 5);\r\n    f2 = Fraction.getFraction(1, 5);\r\n    f = f2.subtract(f1);\r\n    assertSame(f2, f);\r\n    final Fraction fr = f;\r\n    assertNullPointerException(() -> fr.subtract(null));\r\n    // if this fraction is subtracted naively, it will overflow.\r\n    // check that it doesn't.\r\n    f1 = Fraction.getFraction(1, 32768 * 3);\r\n    f2 = Fraction.getFraction(1, 59049);\r\n    f = f1.subtract(f2);\r\n    assertEquals(-13085, f.getNumerator());\r\n    assertEquals(1934917632, f.getDenominator());\r\n    f1 = Fraction.getFraction(Integer.MIN_VALUE, 3);\r\n    f2 = Fraction.ONE_THIRD.negate();\r\n    f = f1.subtract(f2);\r\n    assertEquals(Integer.MIN_VALUE + 1, f.getNumerator());\r\n    assertEquals(3, f.getDenominator());\r\n    f1 = Fraction.getFraction(Integer.MAX_VALUE, 1);\r\n    f2 = Fraction.ONE;\r\n    f = f1.subtract(f2);\r\n    assertEquals(Integer.MAX_VALUE - 1, f.getNumerator());\r\n    assertEquals(1, f.getDenominator());\r\n    // Should overflow\r\n    assertThrows(ArithmeticException.class, () -> Fraction.getFraction(1, Integer.MAX_VALUE).subtract(Fraction.getFraction(1, Integer.MAX_VALUE - 1)));\r\n    // denominator should not be a multiple of 2 or 3 to trigger overflow\r\n    assertThrows(ArithmeticException.class, () -> Fraction.getFraction(Integer.MIN_VALUE, 5).subtract(Fraction.getFraction(1, 5)));\r\n    assertThrows(ArithmeticException.class, () -> Fraction.getFraction(Integer.MIN_VALUE, 1).subtract(Fraction.ONE));\r\n    assertThrows(ArithmeticException.class, () -> Fraction.getFraction(Integer.MAX_VALUE, 1).subtract(Fraction.ONE.negate()));\r\n    // Should overflow\r\n    assertThrows(ArithmeticException.class, () -> Fraction.getFraction(3, 327680).subtract(Fraction.getFraction(2, 59049)));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\math\\FractionTest.java",
  "methodName" : "testToProperString",
  "sourceCode" : "@Test\r\nvoid testToProperString() {\r\n    Fraction f;\r\n    f = Fraction.getFraction(3, 5);\r\n    final String str = f.toProperString();\r\n    assertEquals(\"3/5\", str);\r\n    assertSame(str, f.toProperString());\r\n    f = Fraction.getFraction(7, 5);\r\n    assertEquals(\"1 2/5\", f.toProperString());\r\n    f = Fraction.getFraction(14, 10);\r\n    assertEquals(\"1 4/10\", f.toProperString());\r\n    f = Fraction.getFraction(4, 2);\r\n    assertEquals(\"2\", f.toProperString());\r\n    f = Fraction.getFraction(0, 2);\r\n    assertEquals(\"0\", f.toProperString());\r\n    f = Fraction.getFraction(2, 2);\r\n    assertEquals(\"1\", f.toProperString());\r\n    f = Fraction.getFraction(-7, 5);\r\n    assertEquals(\"-1 2/5\", f.toProperString());\r\n    f = Fraction.getFraction(Integer.MIN_VALUE, 0, 1);\r\n    assertEquals(\"-2147483648\", f.toProperString());\r\n    f = Fraction.getFraction(-1, 1, Integer.MAX_VALUE);\r\n    assertEquals(\"-1 1/2147483647\", f.toProperString());\r\n    assertEquals(\"-1\", Fraction.getFraction(-1).toProperString());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\math\\FractionTest.java",
  "methodName" : "testToString",
  "sourceCode" : "@Test\r\nvoid testToString() {\r\n    Fraction f;\r\n    f = Fraction.getFraction(3, 5);\r\n    final String str = f.toString();\r\n    assertEquals(\"3/5\", str);\r\n    assertSame(str, f.toString());\r\n    f = Fraction.getFraction(7, 5);\r\n    assertEquals(\"7/5\", f.toString());\r\n    f = Fraction.getFraction(4, 2);\r\n    assertEquals(\"4/2\", f.toString());\r\n    f = Fraction.getFraction(0, 2);\r\n    assertEquals(\"0/2\", f.toString());\r\n    f = Fraction.getFraction(2, 2);\r\n    assertEquals(\"2/2\", f.toString());\r\n    f = Fraction.getFraction(Integer.MIN_VALUE, 0, 1);\r\n    assertEquals(\"-2147483648/1\", f.toString());\r\n    f = Fraction.getFraction(-1, 1, Integer.MAX_VALUE);\r\n    assertEquals(\"-2147483648/2147483647\", f.toString());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\math\\IEEE754rUtilsTest.java",
  "methodName" : "testConstructorExists",
  "sourceCode" : "@Test\r\nvoid testConstructorExists() {\r\n    new IEEE754rUtils();\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\math\\IEEE754rUtilsTest.java",
  "methodName" : "testEnforceExceptions",
  "sourceCode" : "@Test\r\nvoid testEnforceExceptions() {\r\n    assertNullPointerException(() -> IEEE754rUtils.min((float[]) null), \"IllegalArgumentException expected for null input\");\r\n    assertIllegalArgumentException(IEEE754rUtils::min, \"IllegalArgumentException expected for empty input\");\r\n    assertNullPointerException(() -> IEEE754rUtils.max((float[]) null), \"IllegalArgumentException expected for null input\");\r\n    assertIllegalArgumentException(IEEE754rUtils::max, \"IllegalArgumentException expected for empty input\");\r\n    assertNullPointerException(() -> IEEE754rUtils.min((double[]) null), \"IllegalArgumentException expected for null input\");\r\n    assertIllegalArgumentException(IEEE754rUtils::min, \"IllegalArgumentException expected for empty input\");\r\n    assertNullPointerException(() -> IEEE754rUtils.max((double[]) null), \"IllegalArgumentException expected for null input\");\r\n    assertIllegalArgumentException(IEEE754rUtils::max, \"IllegalArgumentException expected for empty input\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\math\\IEEE754rUtilsTest.java",
  "methodName" : "testLang381",
  "sourceCode" : "@Test\r\nvoid testLang381() {\r\n    assertEquals(1.2, IEEE754rUtils.min(1.2, 2.5, Double.NaN), 0.01);\r\n    assertEquals(2.5, IEEE754rUtils.max(1.2, 2.5, Double.NaN), 0.01);\r\n    assertTrue(Double.isNaN(IEEE754rUtils.max(Double.NaN, Double.NaN, Double.NaN)));\r\n    assertEquals(1.2f, IEEE754rUtils.min(1.2f, 2.5f, Float.NaN), 0.01);\r\n    assertEquals(2.5f, IEEE754rUtils.max(1.2f, 2.5f, Float.NaN), 0.01);\r\n    assertTrue(Float.isNaN(IEEE754rUtils.max(Float.NaN, Float.NaN, Float.NaN)));\r\n    final double[] a = { 1.2, Double.NaN, 3.7, 27.0, 42.0, Double.NaN };\r\n    assertEquals(42.0, IEEE754rUtils.max(a), 0.01);\r\n    assertEquals(1.2, IEEE754rUtils.min(a), 0.01);\r\n    final double[] b = { Double.NaN, 1.2, Double.NaN, 3.7, 27.0, 42.0, Double.NaN };\r\n    assertEquals(42.0, IEEE754rUtils.max(b), 0.01);\r\n    assertEquals(1.2, IEEE754rUtils.min(b), 0.01);\r\n    final float[] aF = { 1.2f, Float.NaN, 3.7f, 27.0f, 42.0f, Float.NaN };\r\n    assertEquals(1.2f, IEEE754rUtils.min(aF), 0.01);\r\n    assertEquals(42.0f, IEEE754rUtils.max(aF), 0.01);\r\n    final float[] bF = { Float.NaN, 1.2f, Float.NaN, 3.7f, 27.0f, 42.0f, Float.NaN };\r\n    assertEquals(1.2f, IEEE754rUtils.min(bF), 0.01);\r\n    assertEquals(42.0f, IEEE754rUtils.max(bF), 0.01);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\math\\NumberUtilsTest.java",
  "methodName" : "compareByte",
  "sourceCode" : "@Test\r\npublic void compareByte() {\r\n    assertTrue(NumberUtils.compare((byte) -3, (byte) 0) < 0);\r\n    assertEquals(0, NumberUtils.compare((byte) 113, (byte) 113));\r\n    assertTrue(NumberUtils.compare((byte) 123, (byte) 32) > 0);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\math\\NumberUtilsTest.java",
  "methodName" : "compareInt",
  "sourceCode" : "@Test\r\npublic void compareInt() {\r\n    assertTrue(NumberUtils.compare(-3, 0) < 0);\r\n    assertEquals(0, NumberUtils.compare(113, 113));\r\n    assertTrue(NumberUtils.compare(213, 32) > 0);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\math\\NumberUtilsTest.java",
  "methodName" : "compareLong",
  "sourceCode" : "@Test\r\npublic void compareLong() {\r\n    assertTrue(NumberUtils.compare(-3L, 0L) < 0);\r\n    assertEquals(0, NumberUtils.compare(113L, 113L));\r\n    assertTrue(NumberUtils.compare(213L, 32L) > 0);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\math\\NumberUtilsTest.java",
  "methodName" : "compareShort",
  "sourceCode" : "@Test\r\npublic void compareShort() {\r\n    assertTrue(NumberUtils.compare((short) -3, (short) 0) < 0);\r\n    assertEquals(0, NumberUtils.compare((short) 113, (short) 113));\r\n    assertTrue(NumberUtils.compare((short) 213, (short) 32) > 0);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\math\\NumberUtilsTest.java",
  "methodName" : "testBigIntegerToDoubleBigInteger",
  "sourceCode" : "/**\r\n * Test for {@link NumberUtils#toDouble(BigDecimal)}\r\n */\r\n@Test\r\nvoid testBigIntegerToDoubleBigInteger() {\r\n    assertEquals(0.0d, NumberUtils.toDouble((BigDecimal) null), \"toDouble(BigInteger) 1 failed\");\r\n    assertEquals(8.5d, NumberUtils.toDouble(BigDecimal.valueOf(8.5d)), \"toDouble(BigInteger) 2 failed\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\math\\NumberUtilsTest.java",
  "methodName" : "testBigIntegerToDoubleBigIntegerD",
  "sourceCode" : "/**\r\n * Test for {@link NumberUtils#toDouble(BigDecimal, double)}\r\n */\r\n@Test\r\nvoid testBigIntegerToDoubleBigIntegerD() {\r\n    assertEquals(1.1d, NumberUtils.toDouble((BigDecimal) null, 1.1d), \"toDouble(BigInteger) 1 failed\");\r\n    assertEquals(8.5d, NumberUtils.toDouble(BigDecimal.valueOf(8.5d), 1.1d), \"toDouble(BigInteger) 2 failed\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\math\\NumberUtilsTest.java",
  "methodName" : "testCompareDouble",
  "sourceCode" : "// Testing JDK against old Lang functionality\r\n@Test\r\nvoid testCompareDouble() {\r\n    assertEquals(0, Double.compare(Double.NaN, Double.NaN));\r\n    assertEquals(Double.compare(Double.NaN, Double.POSITIVE_INFINITY), +1);\r\n    assertEquals(Double.compare(Double.NaN, Double.MAX_VALUE), +1);\r\n    assertEquals(Double.compare(Double.NaN, 1.2d), +1);\r\n    assertEquals(Double.compare(Double.NaN, 0.0d), +1);\r\n    assertEquals(Double.compare(Double.NaN, -0.0d), +1);\r\n    assertEquals(Double.compare(Double.NaN, -1.2d), +1);\r\n    assertEquals(Double.compare(Double.NaN, -Double.MAX_VALUE), +1);\r\n    assertEquals(Double.compare(Double.NaN, Double.NEGATIVE_INFINITY), +1);\r\n    assertEquals(Double.compare(Double.POSITIVE_INFINITY, Double.NaN), -1);\r\n    assertEquals(0, Double.compare(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY));\r\n    assertEquals(Double.compare(Double.POSITIVE_INFINITY, Double.MAX_VALUE), +1);\r\n    assertEquals(Double.compare(Double.POSITIVE_INFINITY, 1.2d), +1);\r\n    assertEquals(Double.compare(Double.POSITIVE_INFINITY, 0.0d), +1);\r\n    assertEquals(Double.compare(Double.POSITIVE_INFINITY, -0.0d), +1);\r\n    assertEquals(Double.compare(Double.POSITIVE_INFINITY, -1.2d), +1);\r\n    assertEquals(Double.compare(Double.POSITIVE_INFINITY, -Double.MAX_VALUE), +1);\r\n    assertEquals(Double.compare(Double.POSITIVE_INFINITY, Double.NEGATIVE_INFINITY), +1);\r\n    assertEquals(Double.compare(Double.MAX_VALUE, Double.NaN), -1);\r\n    assertEquals(Double.compare(Double.MAX_VALUE, Double.POSITIVE_INFINITY), -1);\r\n    assertEquals(0, Double.compare(Double.MAX_VALUE, Double.MAX_VALUE));\r\n    assertEquals(Double.compare(Double.MAX_VALUE, 1.2d), +1);\r\n    assertEquals(Double.compare(Double.MAX_VALUE, 0.0d), +1);\r\n    assertEquals(Double.compare(Double.MAX_VALUE, -0.0d), +1);\r\n    assertEquals(Double.compare(Double.MAX_VALUE, -1.2d), +1);\r\n    assertEquals(Double.compare(Double.MAX_VALUE, -Double.MAX_VALUE), +1);\r\n    assertEquals(Double.compare(Double.MAX_VALUE, Double.NEGATIVE_INFINITY), +1);\r\n    assertEquals(Double.compare(1.2d, Double.NaN), -1);\r\n    assertEquals(Double.compare(1.2d, Double.POSITIVE_INFINITY), -1);\r\n    assertEquals(Double.compare(1.2d, Double.MAX_VALUE), -1);\r\n    assertEquals(0, Double.compare(1.2d, 1.2d));\r\n    assertEquals(Double.compare(1.2d, 0.0d), +1);\r\n    assertEquals(Double.compare(1.2d, -0.0d), +1);\r\n    assertEquals(Double.compare(1.2d, -1.2d), +1);\r\n    assertEquals(Double.compare(1.2d, -Double.MAX_VALUE), +1);\r\n    assertEquals(Double.compare(1.2d, Double.NEGATIVE_INFINITY), +1);\r\n    assertEquals(Double.compare(0.0d, Double.NaN), -1);\r\n    assertEquals(Double.compare(0.0d, Double.POSITIVE_INFINITY), -1);\r\n    assertEquals(Double.compare(0.0d, Double.MAX_VALUE), -1);\r\n    assertEquals(Double.compare(0.0d, 1.2d), -1);\r\n    assertEquals(0, Double.compare(0.0d, 0.0d));\r\n    assertEquals(Double.compare(0.0d, -0.0d), +1);\r\n    assertEquals(Double.compare(0.0d, -1.2d), +1);\r\n    assertEquals(Double.compare(0.0d, -Double.MAX_VALUE), +1);\r\n    assertEquals(Double.compare(0.0d, Double.NEGATIVE_INFINITY), +1);\r\n    assertEquals(Double.compare(-0.0d, Double.NaN), -1);\r\n    assertEquals(Double.compare(-0.0d, Double.POSITIVE_INFINITY), -1);\r\n    assertEquals(Double.compare(-0.0d, Double.MAX_VALUE), -1);\r\n    assertEquals(Double.compare(-0.0d, 1.2d), -1);\r\n    assertEquals(Double.compare(-0.0d, 0.0d), -1);\r\n    assertEquals(0, Double.compare(-0.0d, -0.0d));\r\n    assertEquals(Double.compare(-0.0d, -1.2d), +1);\r\n    assertEquals(Double.compare(-0.0d, -Double.MAX_VALUE), +1);\r\n    assertEquals(Double.compare(-0.0d, Double.NEGATIVE_INFINITY), +1);\r\n    assertEquals(Double.compare(-1.2d, Double.NaN), -1);\r\n    assertEquals(Double.compare(-1.2d, Double.POSITIVE_INFINITY), -1);\r\n    assertEquals(Double.compare(-1.2d, Double.MAX_VALUE), -1);\r\n    assertEquals(Double.compare(-1.2d, 1.2d), -1);\r\n    assertEquals(Double.compare(-1.2d, 0.0d), -1);\r\n    assertEquals(Double.compare(-1.2d, -0.0d), -1);\r\n    assertEquals(0, Double.compare(-1.2d, -1.2d));\r\n    assertEquals(Double.compare(-1.2d, -Double.MAX_VALUE), +1);\r\n    assertEquals(Double.compare(-1.2d, Double.NEGATIVE_INFINITY), +1);\r\n    assertEquals(Double.compare(-Double.MAX_VALUE, Double.NaN), -1);\r\n    assertEquals(Double.compare(-Double.MAX_VALUE, Double.POSITIVE_INFINITY), -1);\r\n    assertEquals(Double.compare(-Double.MAX_VALUE, Double.MAX_VALUE), -1);\r\n    assertEquals(Double.compare(-Double.MAX_VALUE, 1.2d), -1);\r\n    assertEquals(Double.compare(-Double.MAX_VALUE, 0.0d), -1);\r\n    assertEquals(Double.compare(-Double.MAX_VALUE, -0.0d), -1);\r\n    assertEquals(Double.compare(-Double.MAX_VALUE, -1.2d), -1);\r\n    assertEquals(0, Double.compare(-Double.MAX_VALUE, -Double.MAX_VALUE));\r\n    assertEquals(Double.compare(-Double.MAX_VALUE, Double.NEGATIVE_INFINITY), +1);\r\n    assertEquals(Double.compare(Double.NEGATIVE_INFINITY, Double.NaN), -1);\r\n    assertEquals(Double.compare(Double.NEGATIVE_INFINITY, Double.POSITIVE_INFINITY), -1);\r\n    assertEquals(Double.compare(Double.NEGATIVE_INFINITY, Double.MAX_VALUE), -1);\r\n    assertEquals(Double.compare(Double.NEGATIVE_INFINITY, 1.2d), -1);\r\n    assertEquals(Double.compare(Double.NEGATIVE_INFINITY, 0.0d), -1);\r\n    assertEquals(Double.compare(Double.NEGATIVE_INFINITY, -0.0d), -1);\r\n    assertEquals(Double.compare(Double.NEGATIVE_INFINITY, -1.2d), -1);\r\n    assertEquals(Double.compare(Double.NEGATIVE_INFINITY, -Double.MAX_VALUE), -1);\r\n    assertEquals(0, Double.compare(Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\math\\NumberUtilsTest.java",
  "methodName" : "testCompareFloat",
  "sourceCode" : "@Test\r\nvoid testCompareFloat() {\r\n    assertEquals(0, Float.compare(Float.NaN, Float.NaN));\r\n    assertEquals(Float.compare(Float.NaN, Float.POSITIVE_INFINITY), +1);\r\n    assertEquals(Float.compare(Float.NaN, Float.MAX_VALUE), +1);\r\n    assertEquals(Float.compare(Float.NaN, 1.2f), +1);\r\n    assertEquals(Float.compare(Float.NaN, 0.0f), +1);\r\n    assertEquals(Float.compare(Float.NaN, -0.0f), +1);\r\n    assertEquals(Float.compare(Float.NaN, -1.2f), +1);\r\n    assertEquals(Float.compare(Float.NaN, -Float.MAX_VALUE), +1);\r\n    assertEquals(Float.compare(Float.NaN, Float.NEGATIVE_INFINITY), +1);\r\n    assertEquals(Float.compare(Float.POSITIVE_INFINITY, Float.NaN), -1);\r\n    assertEquals(0, Float.compare(Float.POSITIVE_INFINITY, Float.POSITIVE_INFINITY));\r\n    assertEquals(Float.compare(Float.POSITIVE_INFINITY, Float.MAX_VALUE), +1);\r\n    assertEquals(Float.compare(Float.POSITIVE_INFINITY, 1.2f), +1);\r\n    assertEquals(Float.compare(Float.POSITIVE_INFINITY, 0.0f), +1);\r\n    assertEquals(Float.compare(Float.POSITIVE_INFINITY, -0.0f), +1);\r\n    assertEquals(Float.compare(Float.POSITIVE_INFINITY, -1.2f), +1);\r\n    assertEquals(Float.compare(Float.POSITIVE_INFINITY, -Float.MAX_VALUE), +1);\r\n    assertEquals(Float.compare(Float.POSITIVE_INFINITY, Float.NEGATIVE_INFINITY), +1);\r\n    assertEquals(Float.compare(Float.MAX_VALUE, Float.NaN), -1);\r\n    assertEquals(Float.compare(Float.MAX_VALUE, Float.POSITIVE_INFINITY), -1);\r\n    assertEquals(0, Float.compare(Float.MAX_VALUE, Float.MAX_VALUE));\r\n    assertEquals(Float.compare(Float.MAX_VALUE, 1.2f), +1);\r\n    assertEquals(Float.compare(Float.MAX_VALUE, 0.0f), +1);\r\n    assertEquals(Float.compare(Float.MAX_VALUE, -0.0f), +1);\r\n    assertEquals(Float.compare(Float.MAX_VALUE, -1.2f), +1);\r\n    assertEquals(Float.compare(Float.MAX_VALUE, -Float.MAX_VALUE), +1);\r\n    assertEquals(Float.compare(Float.MAX_VALUE, Float.NEGATIVE_INFINITY), +1);\r\n    assertEquals(Float.compare(1.2f, Float.NaN), -1);\r\n    assertEquals(Float.compare(1.2f, Float.POSITIVE_INFINITY), -1);\r\n    assertEquals(Float.compare(1.2f, Float.MAX_VALUE), -1);\r\n    assertEquals(0, Float.compare(1.2f, 1.2f));\r\n    assertEquals(Float.compare(1.2f, 0.0f), +1);\r\n    assertEquals(Float.compare(1.2f, -0.0f), +1);\r\n    assertEquals(Float.compare(1.2f, -1.2f), +1);\r\n    assertEquals(Float.compare(1.2f, -Float.MAX_VALUE), +1);\r\n    assertEquals(Float.compare(1.2f, Float.NEGATIVE_INFINITY), +1);\r\n    assertEquals(Float.compare(0.0f, Float.NaN), -1);\r\n    assertEquals(Float.compare(0.0f, Float.POSITIVE_INFINITY), -1);\r\n    assertEquals(Float.compare(0.0f, Float.MAX_VALUE), -1);\r\n    assertEquals(Float.compare(0.0f, 1.2f), -1);\r\n    assertEquals(0, Float.compare(0.0f, 0.0f));\r\n    assertEquals(Float.compare(0.0f, -0.0f), +1);\r\n    assertEquals(Float.compare(0.0f, -1.2f), +1);\r\n    assertEquals(Float.compare(0.0f, -Float.MAX_VALUE), +1);\r\n    assertEquals(Float.compare(0.0f, Float.NEGATIVE_INFINITY), +1);\r\n    assertEquals(Float.compare(-0.0f, Float.NaN), -1);\r\n    assertEquals(Float.compare(-0.0f, Float.POSITIVE_INFINITY), -1);\r\n    assertEquals(Float.compare(-0.0f, Float.MAX_VALUE), -1);\r\n    assertEquals(Float.compare(-0.0f, 1.2f), -1);\r\n    assertEquals(Float.compare(-0.0f, 0.0f), -1);\r\n    assertEquals(0, Float.compare(-0.0f, -0.0f));\r\n    assertEquals(Float.compare(-0.0f, -1.2f), +1);\r\n    assertEquals(Float.compare(-0.0f, -Float.MAX_VALUE), +1);\r\n    assertEquals(Float.compare(-0.0f, Float.NEGATIVE_INFINITY), +1);\r\n    assertEquals(Float.compare(-1.2f, Float.NaN), -1);\r\n    assertEquals(Float.compare(-1.2f, Float.POSITIVE_INFINITY), -1);\r\n    assertEquals(Float.compare(-1.2f, Float.MAX_VALUE), -1);\r\n    assertEquals(Float.compare(-1.2f, 1.2f), -1);\r\n    assertEquals(Float.compare(-1.2f, 0.0f), -1);\r\n    assertEquals(Float.compare(-1.2f, -0.0f), -1);\r\n    assertEquals(0, Float.compare(-1.2f, -1.2f));\r\n    assertEquals(Float.compare(-1.2f, -Float.MAX_VALUE), +1);\r\n    assertEquals(Float.compare(-1.2f, Float.NEGATIVE_INFINITY), +1);\r\n    assertEquals(Float.compare(-Float.MAX_VALUE, Float.NaN), -1);\r\n    assertEquals(Float.compare(-Float.MAX_VALUE, Float.POSITIVE_INFINITY), -1);\r\n    assertEquals(Float.compare(-Float.MAX_VALUE, Float.MAX_VALUE), -1);\r\n    assertEquals(Float.compare(-Float.MAX_VALUE, 1.2f), -1);\r\n    assertEquals(Float.compare(-Float.MAX_VALUE, 0.0f), -1);\r\n    assertEquals(Float.compare(-Float.MAX_VALUE, -0.0f), -1);\r\n    assertEquals(Float.compare(-Float.MAX_VALUE, -1.2f), -1);\r\n    assertEquals(0, Float.compare(-Float.MAX_VALUE, -Float.MAX_VALUE));\r\n    assertEquals(Float.compare(-Float.MAX_VALUE, Float.NEGATIVE_INFINITY), +1);\r\n    assertEquals(Float.compare(Float.NEGATIVE_INFINITY, Float.NaN), -1);\r\n    assertEquals(Float.compare(Float.NEGATIVE_INFINITY, Float.POSITIVE_INFINITY), -1);\r\n    assertEquals(Float.compare(Float.NEGATIVE_INFINITY, Float.MAX_VALUE), -1);\r\n    assertEquals(Float.compare(Float.NEGATIVE_INFINITY, 1.2f), -1);\r\n    assertEquals(Float.compare(Float.NEGATIVE_INFINITY, 0.0f), -1);\r\n    assertEquals(Float.compare(Float.NEGATIVE_INFINITY, -0.0f), -1);\r\n    assertEquals(Float.compare(Float.NEGATIVE_INFINITY, -1.2f), -1);\r\n    assertEquals(Float.compare(Float.NEGATIVE_INFINITY, -Float.MAX_VALUE), -1);\r\n    assertEquals(0, Float.compare(Float.NEGATIVE_INFINITY, Float.NEGATIVE_INFINITY));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\math\\NumberUtilsTest.java",
  "methodName" : "testConstants",
  "sourceCode" : "// suppress instanceof warning check\r\n@SuppressWarnings(\"cast\")\r\n@Test\r\nvoid testConstants() {\r\n    assertInstanceOf(Long.class, NumberUtils.LONG_ZERO);\r\n    assertInstanceOf(Long.class, NumberUtils.LONG_ONE);\r\n    assertInstanceOf(Long.class, NumberUtils.LONG_MINUS_ONE);\r\n    assertInstanceOf(Integer.class, NumberUtils.INTEGER_ZERO);\r\n    assertInstanceOf(Integer.class, NumberUtils.INTEGER_ONE);\r\n    assertInstanceOf(Integer.class, NumberUtils.INTEGER_MINUS_ONE);\r\n    assertInstanceOf(Short.class, NumberUtils.SHORT_ZERO);\r\n    assertInstanceOf(Short.class, NumberUtils.SHORT_ONE);\r\n    assertInstanceOf(Short.class, NumberUtils.SHORT_MINUS_ONE);\r\n    assertInstanceOf(Byte.class, NumberUtils.BYTE_ZERO);\r\n    assertInstanceOf(Byte.class, NumberUtils.BYTE_ONE);\r\n    assertInstanceOf(Byte.class, NumberUtils.BYTE_MINUS_ONE);\r\n    assertInstanceOf(Double.class, NumberUtils.DOUBLE_ZERO);\r\n    assertInstanceOf(Double.class, NumberUtils.DOUBLE_ONE);\r\n    assertInstanceOf(Double.class, NumberUtils.DOUBLE_MINUS_ONE);\r\n    assertInstanceOf(Float.class, NumberUtils.FLOAT_ZERO);\r\n    assertInstanceOf(Float.class, NumberUtils.FLOAT_ONE);\r\n    assertInstanceOf(Float.class, NumberUtils.FLOAT_MINUS_ONE);\r\n    assertEquals(0, NumberUtils.LONG_ZERO.longValue());\r\n    assertEquals(1, NumberUtils.LONG_ONE.longValue());\r\n    assertEquals(NumberUtils.LONG_MINUS_ONE.longValue(), -1);\r\n    assertEquals(0, NumberUtils.INTEGER_ZERO.intValue());\r\n    assertEquals(1, NumberUtils.INTEGER_ONE.intValue());\r\n    assertEquals(NumberUtils.INTEGER_MINUS_ONE.intValue(), -1);\r\n    assertEquals(0, NumberUtils.SHORT_ZERO.shortValue());\r\n    assertEquals(1, NumberUtils.SHORT_ONE.shortValue());\r\n    assertEquals(NumberUtils.SHORT_MINUS_ONE.shortValue(), -1);\r\n    assertEquals(0, NumberUtils.BYTE_ZERO.byteValue());\r\n    assertEquals(1, NumberUtils.BYTE_ONE.byteValue());\r\n    assertEquals(NumberUtils.BYTE_MINUS_ONE.byteValue(), -1);\r\n    assertEquals(0.0d, NumberUtils.DOUBLE_ZERO.doubleValue());\r\n    assertEquals(1.0d, NumberUtils.DOUBLE_ONE.doubleValue());\r\n    assertEquals(NumberUtils.DOUBLE_MINUS_ONE.doubleValue(), -1.0d);\r\n    assertEquals(0.0f, NumberUtils.FLOAT_ZERO.floatValue());\r\n    assertEquals(1.0f, NumberUtils.FLOAT_ONE.floatValue());\r\n    assertEquals(NumberUtils.FLOAT_MINUS_ONE.floatValue(), -1.0f);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\math\\NumberUtilsTest.java",
  "methodName" : "testConstructor",
  "sourceCode" : "@Test\r\nvoid testConstructor() {\r\n    assertNotNull(new NumberUtils());\r\n    final Constructor<?>[] cons = NumberUtils.class.getDeclaredConstructors();\r\n    assertEquals(1, cons.length);\r\n    assertTrue(Modifier.isPublic(cons[0].getModifiers()));\r\n    assertTrue(Modifier.isPublic(NumberUtils.class.getModifiers()));\r\n    assertFalse(Modifier.isFinal(NumberUtils.class.getModifiers()));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\math\\NumberUtilsTest.java",
  "methodName" : "testCreateBigDecimal",
  "sourceCode" : "@Test\r\nvoid testCreateBigDecimal() {\r\n    assertEquals(new BigDecimal(\"1234.5\"), NumberUtils.createBigDecimal(\"1234.5\"), \"createBigDecimal(String) failed\");\r\n    assertNull(NumberUtils.createBigDecimal(null), \"createBigDecimal(null) failed\");\r\n    testCreateBigDecimalFailure(\"\");\r\n    testCreateBigDecimalFailure(\" \");\r\n    testCreateBigDecimalFailure(\"\\b\\t\\n\\f\\r\");\r\n    // Funky whitespaces\r\n    testCreateBigDecimalFailure(\"\\u00A0\\uFEFF\\u000B\\u000C\\u001C\\u001D\\u001E\\u001F\");\r\n    // sign alone not valid\r\n    testCreateBigDecimalFailure(\"-\");\r\n    // comment in NumberUtils suggests some implementations may incorrectly allow this\r\n    testCreateBigDecimalFailure(\"--\");\r\n    testCreateBigDecimalFailure(\"--0\");\r\n    // sign alone not valid\r\n    testCreateBigDecimalFailure(\"+\");\r\n    // in case this was also allowed by some JVMs\r\n    testCreateBigDecimalFailure(\"++\");\r\n    testCreateBigDecimalFailure(\"++0\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\math\\NumberUtilsTest.java",
  "methodName" : "testCreateBigInteger",
  "sourceCode" : "@Test\r\nvoid testCreateBigInteger() {\r\n    assertEquals(new BigInteger(\"12345\"), NumberUtils.createBigInteger(\"12345\"), \"createBigInteger(String) failed\");\r\n    assertNull(NumberUtils.createBigInteger(null), \"createBigInteger(null) failed\");\r\n    testCreateBigIntegerFailure(\"\");\r\n    testCreateBigIntegerFailure(\" \");\r\n    testCreateBigIntegerFailure(\"\\b\\t\\n\\f\\r\");\r\n    // Funky whitespaces\r\n    testCreateBigIntegerFailure(\"\\u00A0\\uFEFF\\u000B\\u000C\\u001C\\u001D\\u001E\\u001F\");\r\n    assertEquals(new BigInteger(\"255\"), NumberUtils.createBigInteger(\"0xff\"), \"createBigInteger(String) failed\");\r\n    assertEquals(new BigInteger(\"255\"), NumberUtils.createBigInteger(\"0Xff\"), \"createBigInteger(String) failed\");\r\n    assertEquals(new BigInteger(\"255\"), NumberUtils.createBigInteger(\"#ff\"), \"createBigInteger(String) failed\");\r\n    assertEquals(new BigInteger(\"-255\"), NumberUtils.createBigInteger(\"-0xff\"), \"createBigInteger(String) failed\");\r\n    assertEquals(new BigInteger(\"255\"), NumberUtils.createBigInteger(\"0377\"), \"createBigInteger(String) failed\");\r\n    assertEquals(new BigInteger(\"-255\"), NumberUtils.createBigInteger(\"-0377\"), \"createBigInteger(String) failed\");\r\n    assertEquals(new BigInteger(\"-255\"), NumberUtils.createBigInteger(\"-0377\"), \"createBigInteger(String) failed\");\r\n    assertEquals(new BigInteger(\"-0\"), NumberUtils.createBigInteger(\"-0\"), \"createBigInteger(String) failed\");\r\n    assertEquals(new BigInteger(\"0\"), NumberUtils.createBigInteger(\"0\"), \"createBigInteger(String) failed\");\r\n    testCreateBigIntegerFailure(\"#\");\r\n    testCreateBigIntegerFailure(\"-#\");\r\n    testCreateBigIntegerFailure(\"0x\");\r\n    testCreateBigIntegerFailure(\"-0x\");\r\n    // LANG-1645\r\n    assertEquals(new BigInteger(\"+FFFFFFFFFFFFFFFF\", 16), NumberUtils.createBigInteger(\"+0xFFFFFFFFFFFFFFFF\"));\r\n    assertEquals(new BigInteger(\"+FFFFFFFFFFFFFFFF\", 16), NumberUtils.createBigInteger(\"+#FFFFFFFFFFFFFFFF\"));\r\n    assertEquals(new BigInteger(\"+1234567\", 8), NumberUtils.createBigInteger(\"+01234567\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\math\\NumberUtilsTest.java",
  "methodName" : "testCreateDouble",
  "sourceCode" : "@Test\r\nvoid testCreateDouble() {\r\n    assertEquals(Double.valueOf(\"1234.5\"), NumberUtils.createDouble(\"1234.5\"), \"createDouble(String) failed\");\r\n    assertNull(NumberUtils.createDouble(null), \"createDouble(null) failed\");\r\n    testCreateDoubleFailure(\"\");\r\n    testCreateDoubleFailure(\" \");\r\n    testCreateDoubleFailure(\"\\b\\t\\n\\f\\r\");\r\n    // Funky whitespaces\r\n    testCreateDoubleFailure(\"\\u00A0\\uFEFF\\u000B\\u000C\\u001C\\u001D\\u001E\\u001F\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\math\\NumberUtilsTest.java",
  "methodName" : "testCreateFloat",
  "sourceCode" : "@Test\r\nvoid testCreateFloat() {\r\n    assertEquals(Float.valueOf(\"1234.5\"), NumberUtils.createFloat(\"1234.5\"), \"createFloat(String) failed\");\r\n    assertNull(NumberUtils.createFloat(null), \"createFloat(null) failed\");\r\n    testCreateFloatFailure(\"\");\r\n    testCreateFloatFailure(\" \");\r\n    testCreateFloatFailure(\"\\b\\t\\n\\f\\r\");\r\n    // Funky whitespaces\r\n    testCreateFloatFailure(\"\\u00A0\\uFEFF\\u000B\\u000C\\u001C\\u001D\\u001E\\u001F\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\math\\NumberUtilsTest.java",
  "methodName" : "testCreateInteger",
  "sourceCode" : "@Test\r\nvoid testCreateInteger() {\r\n    assertEquals(Integer.valueOf(\"12345\"), NumberUtils.createInteger(\"12345\"), \"createInteger(String) failed\");\r\n    assertNull(NumberUtils.createInteger(null), \"createInteger(null) failed\");\r\n    testCreateIntegerFailure(\"\");\r\n    testCreateIntegerFailure(\" \");\r\n    testCreateIntegerFailure(\"\\b\\t\\n\\f\\r\");\r\n    // Funky whitespaces\r\n    testCreateIntegerFailure(\"\\u00A0\\uFEFF\\u000B\\u000C\\u001C\\u001D\\u001E\\u001F\");\r\n    // LANG-1645\r\n    assertEquals(Integer.decode(\"+0xF\"), NumberUtils.createInteger(\"+0xF\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\math\\NumberUtilsTest.java",
  "methodName" : "testCreateLong",
  "sourceCode" : "@Test\r\nvoid testCreateLong() {\r\n    assertEquals(Long.valueOf(\"12345\"), NumberUtils.createLong(\"12345\"), \"createLong(String) failed\");\r\n    assertNull(NumberUtils.createLong(null), \"createLong(null) failed\");\r\n    testCreateLongFailure(\"\");\r\n    testCreateLongFailure(\" \");\r\n    testCreateLongFailure(\"\\b\\t\\n\\f\\r\");\r\n    // Funky whitespaces\r\n    testCreateLongFailure(\"\\u00A0\\uFEFF\\u000B\\u000C\\u001C\\u001D\\u001E\\u001F\");\r\n    // LANG-1645\r\n    assertEquals(Long.decode(\"+0xFFFFFFFF\"), NumberUtils.createLong(\"+0xFFFFFFFF\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\math\\NumberUtilsTest.java",
  "methodName" : "testCreateNumber",
  "sourceCode" : "@Test\r\nvoid testCreateNumber() {\r\n    // a lot of things can go wrong\r\n    assertEquals(Float.valueOf(\"1234.5\"), NumberUtils.createNumber(\"1234.5\"), \"createNumber(String) 1 failed\");\r\n    assertEquals(Integer.valueOf(\"12345\"), NumberUtils.createNumber(\"12345\"), \"createNumber(String) 2 failed\");\r\n    assertEquals(Double.valueOf(\"1234.5\"), NumberUtils.createNumber(\"1234.5D\"), \"createNumber(String) 3 failed\");\r\n    assertEquals(Double.valueOf(\"1234.5\"), NumberUtils.createNumber(\"1234.5d\"), \"createNumber(String) 3 failed\");\r\n    assertEquals(Float.valueOf(\"1234.5\"), NumberUtils.createNumber(\"1234.5F\"), \"createNumber(String) 4 failed\");\r\n    assertEquals(Float.valueOf(\"1234.5\"), NumberUtils.createNumber(\"1234.5f\"), \"createNumber(String) 4 failed\");\r\n    assertEquals(Long.valueOf(Integer.MAX_VALUE + 1L), NumberUtils.createNumber(\"\" + (Integer.MAX_VALUE + 1L)), \"createNumber(String) 5 failed\");\r\n    assertEquals(Long.valueOf(12345), NumberUtils.createNumber(\"12345L\"), \"createNumber(String) 6 failed\");\r\n    assertEquals(Long.valueOf(12345), NumberUtils.createNumber(\"12345l\"), \"createNumber(String) 6 failed\");\r\n    assertEquals(Float.valueOf(\"-1234.5\"), NumberUtils.createNumber(\"-1234.5\"), \"createNumber(String) 7 failed\");\r\n    assertEquals(Integer.valueOf(\"-12345\"), NumberUtils.createNumber(\"-12345\"), \"createNumber(String) 8 failed\");\r\n    assertEquals(0xFADE, NumberUtils.createNumber(\"0xFADE\").intValue(), \"createNumber(String) 9a failed\");\r\n    assertEquals(0xFADE, NumberUtils.createNumber(\"0Xfade\").intValue(), \"createNumber(String) 9b failed\");\r\n    assertEquals(-0xFADE, NumberUtils.createNumber(\"-0xFADE\").intValue(), \"createNumber(String) 10a failed\");\r\n    assertEquals(-0xFADE, NumberUtils.createNumber(\"-0Xfade\").intValue(), \"createNumber(String) 10b failed\");\r\n    assertEquals(Double.valueOf(\"1.1E200\"), NumberUtils.createNumber(\"1.1E200\"), \"createNumber(String) 11 failed\");\r\n    assertEquals(Float.valueOf(\"1.1E20\"), NumberUtils.createNumber(\"1.1E20\"), \"createNumber(String) 12 failed\");\r\n    assertEquals(Double.valueOf(\"-1.1E200\"), NumberUtils.createNumber(\"-1.1E200\"), \"createNumber(String) 13 failed\");\r\n    assertEquals(Double.valueOf(\"1.1E-200\"), NumberUtils.createNumber(\"1.1E-200\"), \"createNumber(String) 14 failed\");\r\n    assertNull(NumberUtils.createNumber(null), \"createNumber(null) failed\");\r\n    assertEquals(new BigInteger(\"12345678901234567890\"), NumberUtils.createNumber(\"12345678901234567890L\"), \"createNumber(String) failed\");\r\n    assertEquals(new BigDecimal(\"1.1E-700\"), NumberUtils.createNumber(\"1.1E-700F\"), \"createNumber(String) 15 failed\");\r\n    assertEquals(Long.valueOf(\"10\" + Integer.MAX_VALUE), NumberUtils.createNumber(\"10\" + Integer.MAX_VALUE + \"L\"), \"createNumber(String) 16 failed\");\r\n    assertEquals(Long.valueOf(\"10\" + Integer.MAX_VALUE), NumberUtils.createNumber(\"10\" + Integer.MAX_VALUE), \"createNumber(String) 17 failed\");\r\n    assertEquals(new BigInteger(\"10\" + Long.MAX_VALUE), NumberUtils.createNumber(\"10\" + Long.MAX_VALUE), \"createNumber(String) 18 failed\");\r\n    // LANG-521\r\n    assertEquals(Float.valueOf(\"2.\"), NumberUtils.createNumber(\"2.\"), \"createNumber(String) LANG-521 failed\");\r\n    // LANG-638\r\n    assertFalse(checkCreateNumber(\"1eE\"), \"createNumber(String) succeeded\");\r\n    // LANG-693\r\n    assertEquals(Double.valueOf(Double.MAX_VALUE), NumberUtils.createNumber(\"\" + Double.MAX_VALUE), \"createNumber(String) LANG-693 failed\");\r\n    // LANG-822\r\n    // ensure that the underlying negative number would create a BigDecimal\r\n    final Number bigNum = NumberUtils.createNumber(\"-1.1E-700F\");\r\n    assertNotNull(bigNum);\r\n    assertEquals(BigDecimal.class, bigNum.getClass());\r\n    // LANG-1018\r\n    assertEquals(Double.valueOf(\"-160952.54\"), NumberUtils.createNumber(\"-160952.54\"), \"createNumber(String) LANG-1018 failed\");\r\n    // LANG-1187\r\n    assertEquals(Double.valueOf(\"6264583.33\"), NumberUtils.createNumber(\"6264583.33\"), \"createNumber(String) LANG-1187 failed\");\r\n    // LANG-1215\r\n    assertEquals(Double.valueOf(\"193343.82\"), NumberUtils.createNumber(\"193343.82\"), \"createNumber(String) LANG-1215 failed\");\r\n    // LANG-1060\r\n    assertEquals(Double.valueOf(\"001234.5678\"), NumberUtils.createNumber(\"001234.5678\"), \"createNumber(String) LANG-1060a failed\");\r\n    assertEquals(Double.valueOf(\"+001234.5678\"), NumberUtils.createNumber(\"+001234.5678\"), \"createNumber(String) LANG-1060b failed\");\r\n    assertEquals(Double.valueOf(\"-001234.5678\"), NumberUtils.createNumber(\"-001234.5678\"), \"createNumber(String) LANG-1060c failed\");\r\n    assertEquals(Double.valueOf(\"0000.00000\"), NumberUtils.createNumber(\"0000.00000d\"), \"createNumber(String) LANG-1060d failed\");\r\n    assertEquals(Float.valueOf(\"001234.56\"), NumberUtils.createNumber(\"001234.56\"), \"createNumber(String) LANG-1060e failed\");\r\n    assertEquals(Float.valueOf(\"+001234.56\"), NumberUtils.createNumber(\"+001234.56\"), \"createNumber(String) LANG-1060f failed\");\r\n    assertEquals(Float.valueOf(\"-001234.56\"), NumberUtils.createNumber(\"-001234.56\"), \"createNumber(String) LANG-1060g failed\");\r\n    assertEquals(Float.valueOf(\"0000.10\"), NumberUtils.createNumber(\"0000.10\"), \"createNumber(String) LANG-1060h failed\");\r\n    assertEquals(Float.valueOf(\"001.1E20\"), NumberUtils.createNumber(\"001.1E20\"), \"createNumber(String) LANG-1060i failed\");\r\n    assertEquals(Float.valueOf(\"+001.1E20\"), NumberUtils.createNumber(\"+001.1E20\"), \"createNumber(String) LANG-1060j failed\");\r\n    assertEquals(Float.valueOf(\"-001.1E20\"), NumberUtils.createNumber(\"-001.1E20\"), \"createNumber(String) LANG-1060k failed\");\r\n    assertEquals(Double.valueOf(\"001.1E200\"), NumberUtils.createNumber(\"001.1E200\"), \"createNumber(String) LANG-1060l failed\");\r\n    assertEquals(Double.valueOf(\"+001.1E200\"), NumberUtils.createNumber(\"+001.1E200\"), \"createNumber(String) LANG-1060m failed\");\r\n    assertEquals(Double.valueOf(\"-001.1E200\"), NumberUtils.createNumber(\"-001.1E200\"), \"createNumber(String) LANG-1060n failed\");\r\n    // LANG-1645\r\n    assertEquals(Integer.decode(\"+0xF\"), NumberUtils.createNumber(\"+0xF\"), \"createNumber(String) LANG-1645a failed\");\r\n    assertEquals(Long.decode(\"+0xFFFFFFFF\"), NumberUtils.createNumber(\"+0xFFFFFFFF\"), \"createNumber(String) LANG-1645b failed\");\r\n    assertEquals(new BigInteger(\"+FFFFFFFFFFFFFFFF\", 16), NumberUtils.createNumber(\"+0xFFFFFFFFFFFFFFFF\"), \"createNumber(String) LANG-1645c failed\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\math\\NumberUtilsTest.java",
  "methodName" : "testCreateNumberFailure_1",
  "sourceCode" : "@Test\r\n// Check that the code fails to create a valid number when preceded by -- rather than -\r\nvoid testCreateNumberFailure_1() {\r\n    assertThrows(NumberFormatException.class, () -> NumberUtils.createNumber(\"--1.1E-700F\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\math\\NumberUtilsTest.java",
  "methodName" : "testCreateNumberFailure_2",
  "sourceCode" : "@Test\r\n// Check that the code fails to create a valid number when both e and E are present (with decimal)\r\nvoid testCreateNumberFailure_2() {\r\n    assertThrows(NumberFormatException.class, () -> NumberUtils.createNumber(\"-1.1E+0-7e00\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\math\\NumberUtilsTest.java",
  "methodName" : "testCreateNumberFailure_3",
  "sourceCode" : "@Test\r\n// Check that the code fails to create a valid number when both e and E are present (no decimal)\r\nvoid testCreateNumberFailure_3() {\r\n    assertThrows(NumberFormatException.class, () -> NumberUtils.createNumber(\"-11E+0-7e00\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\math\\NumberUtilsTest.java",
  "methodName" : "testCreateNumberFailure_4",
  "sourceCode" : "@Test\r\n// Check that the code fails to create a valid number when both e and E are present (no decimal)\r\nvoid testCreateNumberFailure_4() {\r\n    assertThrows(NumberFormatException.class, () -> NumberUtils.createNumber(\"1eE+00001\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\math\\NumberUtilsTest.java",
  "methodName" : "testCreateNumberFailure_5",
  "sourceCode" : "@Test\r\n// Check that the code fails to create a valid number when there are multiple trailing 'f' characters (LANG-1205)\r\nvoid testCreateNumberFailure_5() {\r\n    assertThrows(NumberFormatException.class, () -> NumberUtils.createNumber(\"1234.5ff\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\math\\NumberUtilsTest.java",
  "methodName" : "testCreateNumberFailure_6",
  "sourceCode" : "@Test\r\n// Check that the code fails to create a valid number when there are multiple trailing 'F' characters (LANG-1205)\r\nvoid testCreateNumberFailure_6() {\r\n    assertThrows(NumberFormatException.class, () -> NumberUtils.createNumber(\"1234.5FF\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\math\\NumberUtilsTest.java",
  "methodName" : "testCreateNumberFailure_7",
  "sourceCode" : "@Test\r\n// Check that the code fails to create a valid number when there are multiple trailing 'd' characters (LANG-1205)\r\nvoid testCreateNumberFailure_7() {\r\n    assertThrows(NumberFormatException.class, () -> NumberUtils.createNumber(\"1234.5dd\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\math\\NumberUtilsTest.java",
  "methodName" : "testCreateNumberFailure_8",
  "sourceCode" : "@Test\r\n// Check that the code fails to create a valid number when there are multiple trailing 'D' characters (LANG-1205)\r\nvoid testCreateNumberFailure_8() {\r\n    assertThrows(NumberFormatException.class, () -> NumberUtils.createNumber(\"1234.5DD\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\math\\NumberUtilsTest.java",
  "methodName" : "testCreateNumberMagnitude",
  "sourceCode" : "// Tests to show when magnitude causes switch to next Number type\r\n// Will probably need to be adjusted if code is changed to check precision (LANG-693)\r\n@Test\r\nvoid testCreateNumberMagnitude() {\r\n    // Test Float.MAX_VALUE, and same with +1 in final digit to check conversion changes to next Number type\r\n    assertEquals(Float.valueOf(Float.MAX_VALUE), NumberUtils.createNumber(\"3.4028235e+38\"));\r\n    assertEquals(Double.valueOf(3.4028236e+38), NumberUtils.createNumber(\"3.4028236e+38\"));\r\n    // Test Double.MAX_VALUE\r\n    assertEquals(Double.valueOf(Double.MAX_VALUE), NumberUtils.createNumber(\"1.7976931348623157e+308\"));\r\n    // Test with +2 in final digit (+1 does not cause roll-over to BigDecimal)\r\n    assertEquals(new BigDecimal(\"1.7976931348623159e+308\"), NumberUtils.createNumber(\"1.7976931348623159e+308\"));\r\n    // Requested type is parsed as zero but the value is not zero\r\n    final Double nonZero1 = Double.valueOf((double) Float.MIN_VALUE / 2);\r\n    assertEquals(nonZero1, NumberUtils.createNumber(nonZero1.toString()));\r\n    assertEquals(nonZero1, NumberUtils.createNumber(nonZero1 + \"F\"));\r\n    // Smallest double is 4.9e-324.\r\n    // Test a number with zero before and/or after the decimal place to hit edge cases.\r\n    final BigDecimal nonZero2 = new BigDecimal(\"4.9e-325\");\r\n    assertEquals(nonZero2, NumberUtils.createNumber(\"4.9e-325\"));\r\n    assertEquals(nonZero2, NumberUtils.createNumber(\"4.9e-325D\"));\r\n    final BigDecimal nonZero3 = new BigDecimal(\"1e-325\");\r\n    assertEquals(nonZero3, NumberUtils.createNumber(\"1e-325\"));\r\n    assertEquals(nonZero3, NumberUtils.createNumber(\"1e-325D\"));\r\n    final BigDecimal nonZero4 = new BigDecimal(\"0.1e-325\");\r\n    assertEquals(nonZero4, NumberUtils.createNumber(\"0.1e-325\"));\r\n    assertEquals(nonZero4, NumberUtils.createNumber(\"0.1e-325D\"));\r\n    assertEquals(Integer.valueOf(0x12345678), NumberUtils.createNumber(\"0x12345678\"));\r\n    assertEquals(Long.valueOf(0x123456789L), NumberUtils.createNumber(\"0x123456789\"));\r\n    assertEquals(Long.valueOf(0x7fffffffffffffffL), NumberUtils.createNumber(\"0x7fffffffffffffff\"));\r\n    // Does not appear to be a way to create a literal BigInteger of this magnitude\r\n    assertEquals(new BigInteger(\"7fffffffffffffff0\", 16), NumberUtils.createNumber(\"0x7fffffffffffffff0\"));\r\n    assertEquals(Long.valueOf(0x7fffffffffffffffL), NumberUtils.createNumber(\"#7fffffffffffffff\"));\r\n    assertEquals(new BigInteger(\"7fffffffffffffff0\", 16), NumberUtils.createNumber(\"#7fffffffffffffff0\"));\r\n    // 31 bits\r\n    assertEquals(Integer.valueOf(017777777777), NumberUtils.createNumber(\"017777777777\"));\r\n    // 32 bits\r\n    assertEquals(Long.valueOf(037777777777L), NumberUtils.createNumber(\"037777777777\"));\r\n    // 63 bits\r\n    assertEquals(Long.valueOf(0777777777777777777777L), NumberUtils.createNumber(\"0777777777777777777777\"));\r\n    // 64 bits\r\n    assertEquals(new BigInteger(\"1777777777777777777777\", 8), NumberUtils.createNumber(\"01777777777777777777777\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\math\\NumberUtilsTest.java",
  "methodName" : "testCreateNumberZero",
  "sourceCode" : "/**\r\n * LANG-1646: Support the requested Number type (Long, Float, Double) of valid zero input.\r\n */\r\n@Test\r\nvoid testCreateNumberZero() {\r\n    // Handle integers\r\n    assertEquals(Integer.valueOf(0), NumberUtils.createNumber(\"0\"));\r\n    assertEquals(Integer.valueOf(0), NumberUtils.createNumber(\"-0\"));\r\n    assertEquals(Long.valueOf(0), NumberUtils.createNumber(\"0L\"));\r\n    assertEquals(Long.valueOf(0), NumberUtils.createNumber(\"-0L\"));\r\n    // Handle floating-point with optional leading sign, trailing exponent (eX)\r\n    // and format specifier (F or D).\r\n    // This should allow: 0. ; .0 ; 0.0 ; 0 (if exponent or format specifier is present)\r\n    // Exponent does not matter for zero\r\n    final int[] exponents = { -2345, 0, 13 };\r\n    final String[] zeros = { \"0.\", \".0\", \"0.0\", \"0\" };\r\n    final Float f0 = Float.valueOf(0);\r\n    final Float fn0 = Float.valueOf(-0F);\r\n    final Double d0 = Double.valueOf(0);\r\n    final Double dn0 = Double.valueOf(-0D);\r\n    for (final String zero : zeros) {\r\n        // Assume float if no preference.\r\n        // This requires a decimal point if there is no exponent.\r\n        if (zero.indexOf('.') != -1) {\r\n            assertCreateNumberZero(zero, f0, fn0);\r\n        }\r\n        for (final int exp : exponents) {\r\n            assertCreateNumberZero(zero + \"e\" + exp, f0, fn0);\r\n        }\r\n        // Type preference\r\n        assertCreateNumberZero(zero + \"F\", f0, fn0);\r\n        assertCreateNumberZero(zero + \"D\", d0, dn0);\r\n        for (final int exp : exponents) {\r\n            final String number = zero + \"e\" + exp;\r\n            assertCreateNumberZero(number + \"F\", f0, fn0);\r\n            assertCreateNumberZero(number + \"D\", d0, dn0);\r\n        }\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\math\\NumberUtilsTest.java",
  "methodName" : "testInvalidNumber",
  "sourceCode" : "@Test\r\nvoid testInvalidNumber() {\r\n    assertThrows(NumberFormatException.class, () -> NumberUtils.createNumber(\"E123e.3\"));\r\n    assertThrows(NumberFormatException.class, () -> NumberUtils.createNumber(\"-\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\math\\NumberUtilsTest.java",
  "methodName" : "testIsCreatable",
  "sourceCode" : "/**\r\n * Tests isCreatable(String) and tests that createNumber(String) returns a valid number iff isCreatable(String)\r\n * returns false.\r\n */\r\n@Test\r\nvoid testIsCreatable() {\r\n    compareIsCreatableWithCreateNumber(\"12345\", true);\r\n    compareIsCreatableWithCreateNumber(\"1234.5\", true);\r\n    compareIsCreatableWithCreateNumber(\".12345\", true);\r\n    compareIsCreatableWithCreateNumber(\"1234E5\", true);\r\n    compareIsCreatableWithCreateNumber(\"1234E+5\", true);\r\n    compareIsCreatableWithCreateNumber(\"1234E-5\", true);\r\n    compareIsCreatableWithCreateNumber(\"123.4E5\", true);\r\n    compareIsCreatableWithCreateNumber(\"-1234\", true);\r\n    compareIsCreatableWithCreateNumber(\"-1234.5\", true);\r\n    compareIsCreatableWithCreateNumber(\"-.12345\", true);\r\n    compareIsCreatableWithCreateNumber(\"-1234E5\", true);\r\n    compareIsCreatableWithCreateNumber(\"0\", true);\r\n    // LANG-1216\r\n    compareIsCreatableWithCreateNumber(\"0.1\", true);\r\n    compareIsCreatableWithCreateNumber(\"-0\", true);\r\n    compareIsCreatableWithCreateNumber(\"01234\", true);\r\n    compareIsCreatableWithCreateNumber(\"-01234\", true);\r\n    compareIsCreatableWithCreateNumber(\"-0xABC123\", true);\r\n    compareIsCreatableWithCreateNumber(\"-0x0\", true);\r\n    compareIsCreatableWithCreateNumber(\"123.4E21D\", true);\r\n    compareIsCreatableWithCreateNumber(\"-221.23F\", true);\r\n    compareIsCreatableWithCreateNumber(\"22338L\", true);\r\n    compareIsCreatableWithCreateNumber(null, false);\r\n    compareIsCreatableWithCreateNumber(\"\", false);\r\n    compareIsCreatableWithCreateNumber(\" \", false);\r\n    compareIsCreatableWithCreateNumber(\"\\r\\n\\t\", false);\r\n    compareIsCreatableWithCreateNumber(\"--2.3\", false);\r\n    compareIsCreatableWithCreateNumber(\".12.3\", false);\r\n    compareIsCreatableWithCreateNumber(\"-123E\", false);\r\n    compareIsCreatableWithCreateNumber(\"-123E+-212\", false);\r\n    compareIsCreatableWithCreateNumber(\"-123E2.12\", false);\r\n    compareIsCreatableWithCreateNumber(\"0xGF\", false);\r\n    compareIsCreatableWithCreateNumber(\"0xFAE-1\", false);\r\n    compareIsCreatableWithCreateNumber(\".\", false);\r\n    compareIsCreatableWithCreateNumber(\"-0ABC123\", false);\r\n    compareIsCreatableWithCreateNumber(\"123.4E-D\", false);\r\n    compareIsCreatableWithCreateNumber(\"123.4ED\", false);\r\n    compareIsCreatableWithCreateNumber(\"1234E5l\", false);\r\n    compareIsCreatableWithCreateNumber(\"11a\", false);\r\n    compareIsCreatableWithCreateNumber(\"1a\", false);\r\n    compareIsCreatableWithCreateNumber(\"a\", false);\r\n    compareIsCreatableWithCreateNumber(\"11g\", false);\r\n    compareIsCreatableWithCreateNumber(\"11z\", false);\r\n    compareIsCreatableWithCreateNumber(\"11def\", false);\r\n    compareIsCreatableWithCreateNumber(\"11d11\", false);\r\n    compareIsCreatableWithCreateNumber(\"11 11\", false);\r\n    compareIsCreatableWithCreateNumber(\" 1111\", false);\r\n    compareIsCreatableWithCreateNumber(\"1111 \", false);\r\n    // LANG-521\r\n    compareIsCreatableWithCreateNumber(\"2.\", true);\r\n    // LANG-664\r\n    compareIsCreatableWithCreateNumber(\"1.1L\", false);\r\n    // LANG-1645\r\n    compareIsCreatableWithCreateNumber(\"+0xF\", true);\r\n    // LANG-1645\r\n    compareIsCreatableWithCreateNumber(\"+0xFFFFFFFF\", true);\r\n    // LANG-1645\r\n    compareIsCreatableWithCreateNumber(\"+0xFFFFFFFFFFFFFFFF\", true);\r\n    // LANG-1646\r\n    compareIsCreatableWithCreateNumber(\".0\", true);\r\n    // LANG-1646\r\n    compareIsCreatableWithCreateNumber(\"0.\", true);\r\n    // LANG-1646\r\n    compareIsCreatableWithCreateNumber(\"0.D\", true);\r\n    // LANG-1646\r\n    compareIsCreatableWithCreateNumber(\"0e1\", true);\r\n    // LANG-1646\r\n    compareIsCreatableWithCreateNumber(\"0e1D\", true);\r\n    // LANG-1646\r\n    compareIsCreatableWithCreateNumber(\".D\", false);\r\n    // LANG-1646\r\n    compareIsCreatableWithCreateNumber(\".e10\", false);\r\n    // LANG-1646\r\n    compareIsCreatableWithCreateNumber(\".e10D\", false);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\math\\NumberUtilsTest.java",
  "methodName" : "testIsDigits",
  "sourceCode" : "@Test\r\nvoid testIsDigits() {\r\n    assertFalse(NumberUtils.isDigits(null), \"isDigits(null) failed\");\r\n    assertFalse(NumberUtils.isDigits(\"\"), \"isDigits('') failed\");\r\n    assertTrue(NumberUtils.isDigits(\"12345\"), \"isDigits(String) failed\");\r\n    assertFalse(NumberUtils.isDigits(\"1234.5\"), \"isDigits(String) neg 1 failed\");\r\n    assertFalse(NumberUtils.isDigits(\"1ab\"), \"isDigits(String) neg 3 failed\");\r\n    assertFalse(NumberUtils.isDigits(\"abc\"), \"isDigits(String) neg 4 failed\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\math\\NumberUtilsTest.java",
  "methodName" : "testIsNumber",
  "sourceCode" : "/**\r\n * Tests isCreatable(String) and tests that createNumber(String) returns a valid number iff isCreatable(String)\r\n * returns false.\r\n */\r\n@Test\r\nvoid testIsNumber() {\r\n    compareIsNumberWithCreateNumber(\"12345\", true);\r\n    compareIsNumberWithCreateNumber(\"1234.5\", true);\r\n    compareIsNumberWithCreateNumber(\".12345\", true);\r\n    compareIsNumberWithCreateNumber(\"1234E5\", true);\r\n    compareIsNumberWithCreateNumber(\"1234E+5\", true);\r\n    compareIsNumberWithCreateNumber(\"1234E-5\", true);\r\n    compareIsNumberWithCreateNumber(\"123.4E5\", true);\r\n    compareIsNumberWithCreateNumber(\"-1234\", true);\r\n    compareIsNumberWithCreateNumber(\"-1234.5\", true);\r\n    compareIsNumberWithCreateNumber(\"-.12345\", true);\r\n    compareIsNumberWithCreateNumber(\"-0001.12345\", true);\r\n    compareIsNumberWithCreateNumber(\"-000.12345\", true);\r\n    compareIsNumberWithCreateNumber(\"+00.12345\", true);\r\n    compareIsNumberWithCreateNumber(\"+0002.12345\", true);\r\n    compareIsNumberWithCreateNumber(\"-1234E5\", true);\r\n    compareIsNumberWithCreateNumber(\"0\", true);\r\n    compareIsNumberWithCreateNumber(\"-0\", true);\r\n    compareIsNumberWithCreateNumber(\"01234\", true);\r\n    compareIsNumberWithCreateNumber(\"-01234\", true);\r\n    compareIsNumberWithCreateNumber(\"-0xABC123\", true);\r\n    compareIsNumberWithCreateNumber(\"-0x0\", true);\r\n    compareIsNumberWithCreateNumber(\"123.4E21D\", true);\r\n    compareIsNumberWithCreateNumber(\"-221.23F\", true);\r\n    compareIsNumberWithCreateNumber(\"22338L\", true);\r\n    compareIsNumberWithCreateNumber(null, false);\r\n    compareIsNumberWithCreateNumber(\"\", false);\r\n    compareIsNumberWithCreateNumber(\" \", false);\r\n    compareIsNumberWithCreateNumber(\"\\r\\n\\t\", false);\r\n    compareIsNumberWithCreateNumber(\"--2.3\", false);\r\n    compareIsNumberWithCreateNumber(\".12.3\", false);\r\n    compareIsNumberWithCreateNumber(\"-123E\", false);\r\n    compareIsNumberWithCreateNumber(\"-123E+-212\", false);\r\n    compareIsNumberWithCreateNumber(\"-123E2.12\", false);\r\n    compareIsNumberWithCreateNumber(\"0xGF\", false);\r\n    compareIsNumberWithCreateNumber(\"0xFAE-1\", false);\r\n    compareIsNumberWithCreateNumber(\".\", false);\r\n    compareIsNumberWithCreateNumber(\"-0ABC123\", false);\r\n    compareIsNumberWithCreateNumber(\"123.4E-D\", false);\r\n    compareIsNumberWithCreateNumber(\"123.4ED\", false);\r\n    compareIsNumberWithCreateNumber(\"+000E.12345\", false);\r\n    compareIsNumberWithCreateNumber(\"-000E.12345\", false);\r\n    compareIsNumberWithCreateNumber(\"1234E5l\", false);\r\n    compareIsNumberWithCreateNumber(\"11a\", false);\r\n    compareIsNumberWithCreateNumber(\"1a\", false);\r\n    compareIsNumberWithCreateNumber(\"a\", false);\r\n    compareIsNumberWithCreateNumber(\"11g\", false);\r\n    compareIsNumberWithCreateNumber(\"11z\", false);\r\n    compareIsNumberWithCreateNumber(\"11def\", false);\r\n    compareIsNumberWithCreateNumber(\"11d11\", false);\r\n    compareIsNumberWithCreateNumber(\"11 11\", false);\r\n    compareIsNumberWithCreateNumber(\" 1111\", false);\r\n    compareIsNumberWithCreateNumber(\"1111 \", false);\r\n    // LANG-521\r\n    compareIsNumberWithCreateNumber(\"2.\", true);\r\n    // LANG-664\r\n    compareIsNumberWithCreateNumber(\"1.1L\", false);\r\n    // LANG-1645\r\n    compareIsNumberWithCreateNumber(\"+0xF\", true);\r\n    // LANG-1645\r\n    compareIsNumberWithCreateNumber(\"+0xFFFFFFFF\", true);\r\n    // LANG-1645\r\n    compareIsNumberWithCreateNumber(\"+0xFFFFFFFFFFFFFFFF\", true);\r\n    // LANG-1646\r\n    compareIsNumberWithCreateNumber(\".0\", true);\r\n    // LANG-1646\r\n    compareIsNumberWithCreateNumber(\"0.\", true);\r\n    // LANG-1646\r\n    compareIsNumberWithCreateNumber(\"0.D\", true);\r\n    // LANG-1646\r\n    compareIsNumberWithCreateNumber(\"0e1\", true);\r\n    // LANG-1646\r\n    compareIsNumberWithCreateNumber(\"0e1D\", true);\r\n    // LANG-1646\r\n    compareIsNumberWithCreateNumber(\".D\", false);\r\n    // LANG-1646\r\n    compareIsNumberWithCreateNumber(\".e10\", false);\r\n    // LANG-1646\r\n    compareIsNumberWithCreateNumber(\".e10D\", false);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\math\\NumberUtilsTest.java",
  "methodName" : "testIsNumberLANG1252",
  "sourceCode" : "@Test\r\nvoid testIsNumberLANG1252() {\r\n    compareIsNumberWithCreateNumber(\"+2\", true);\r\n    compareIsNumberWithCreateNumber(\"+2.0\", true);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\math\\NumberUtilsTest.java",
  "methodName" : "testIsNumberLANG1385",
  "sourceCode" : "@Test\r\nvoid testIsNumberLANG1385() {\r\n    compareIsNumberWithCreateNumber(\"L\", false);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\math\\NumberUtilsTest.java",
  "methodName" : "testIsNumberLANG971",
  "sourceCode" : "@Test\r\nvoid testIsNumberLANG971() {\r\n    compareIsNumberWithCreateNumber(\"0085\", false);\r\n    compareIsNumberWithCreateNumber(\"085\", false);\r\n    compareIsNumberWithCreateNumber(\"08\", false);\r\n    compareIsNumberWithCreateNumber(\"07\", true);\r\n    compareIsNumberWithCreateNumber(\"00\", true);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\math\\NumberUtilsTest.java",
  "methodName" : "testIsNumberLANG972",
  "sourceCode" : "@Test\r\nvoid testIsNumberLANG972() {\r\n    compareIsNumberWithCreateNumber(\"0xABCD\", true);\r\n    compareIsNumberWithCreateNumber(\"0XABCD\", true);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\math\\NumberUtilsTest.java",
  "methodName" : "testIsNumberLANG992",
  "sourceCode" : "@Test\r\nvoid testIsNumberLANG992() {\r\n    compareIsNumberWithCreateNumber(\"0.0\", true);\r\n    compareIsNumberWithCreateNumber(\"0.4790\", true);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\math\\NumberUtilsTest.java",
  "methodName" : "testIsParsable",
  "sourceCode" : "@Test\r\nvoid testIsParsable() {\r\n    assertFalse(NumberUtils.isParsable(null));\r\n    assertFalse(NumberUtils.isParsable(\"\"));\r\n    assertFalse(NumberUtils.isParsable(\"0xC1AB\"));\r\n    assertFalse(NumberUtils.isParsable(\"65CBA2\"));\r\n    assertFalse(NumberUtils.isParsable(\"pendro\"));\r\n    assertFalse(NumberUtils.isParsable(\"64, 2\"));\r\n    assertFalse(NumberUtils.isParsable(\"64.2.2\"));\r\n    assertFalse(NumberUtils.isParsable(\"64.\"));\r\n    assertFalse(NumberUtils.isParsable(\"64L\"));\r\n    assertFalse(NumberUtils.isParsable(\"-\"));\r\n    assertFalse(NumberUtils.isParsable(\"--2\"));\r\n    assertTrue(NumberUtils.isParsable(\"64.2\"));\r\n    assertTrue(NumberUtils.isParsable(\"64\"));\r\n    assertTrue(NumberUtils.isParsable(\"018\"));\r\n    assertTrue(NumberUtils.isParsable(\".18\"));\r\n    assertTrue(NumberUtils.isParsable(\"-65\"));\r\n    assertTrue(NumberUtils.isParsable(\"-018\"));\r\n    assertTrue(NumberUtils.isParsable(\"-018.2\"));\r\n    assertTrue(NumberUtils.isParsable(\"-.236\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\math\\NumberUtilsTest.java",
  "methodName" : "testLang1087",
  "sourceCode" : "@Test\r\nvoid testLang1087() {\r\n    // no sign cases\r\n    assertEquals(Float.class, NumberUtils.createNumber(\"0.0\").getClass());\r\n    assertEquals(Float.valueOf(\"0.0\"), NumberUtils.createNumber(\"0.0\"));\r\n    // explicit positive sign cases\r\n    assertEquals(Float.class, NumberUtils.createNumber(\"+0.0\").getClass());\r\n    assertEquals(Float.valueOf(\"+0.0\"), NumberUtils.createNumber(\"+0.0\"));\r\n    // negative sign cases\r\n    assertEquals(Float.class, NumberUtils.createNumber(\"-0.0\").getClass());\r\n    assertEquals(Float.valueOf(\"-0.0\"), NumberUtils.createNumber(\"-0.0\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\math\\NumberUtilsTest.java",
  "methodName" : "testLANG1252",
  "sourceCode" : "@Test\r\nvoid testLANG1252() {\r\n    compareIsCreatableWithCreateNumber(\"+2\", true);\r\n    compareIsCreatableWithCreateNumber(\"+2.0\", true);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\math\\NumberUtilsTest.java",
  "methodName" : "testLang1729IsParsableByte",
  "sourceCode" : "@Test\r\nvoid testLang1729IsParsableByte() {\r\n    assertTrue(isParsableByte(\"1\"));\r\n    assertFalse(isParsableByte(\"1 2 3\"));\r\n    assertTrue(isParsableByte(\"１２３\"));\r\n    assertFalse(isParsableByte(\"１ ２ ３\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\math\\NumberUtilsTest.java",
  "methodName" : "testLang1729IsParsableDouble",
  "sourceCode" : "@Test\r\nvoid testLang1729IsParsableDouble() {\r\n    assertTrue(isParsableDouble(\"1\"));\r\n    assertFalse(isParsableDouble(\"1 2 3\"));\r\n    // TODO Expected to be fixed in Java 23\r\n    // assertTrue(isParsableDouble(\"１２３\"));\r\n    assertFalse(isParsableDouble(\"１ ２ ３\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\math\\NumberUtilsTest.java",
  "methodName" : "testLang1729IsParsableFloat",
  "sourceCode" : "@Test\r\nvoid testLang1729IsParsableFloat() {\r\n    assertTrue(isParsableFloat(\"1\"));\r\n    assertFalse(isParsableFloat(\"1 2 3\"));\r\n    // TODO Expected to be fixed in Java 23\r\n    // assertTrue(isParsableFloat(\"１２３\"));\r\n    assertFalse(isParsableFloat(\"１ ２ ３\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\math\\NumberUtilsTest.java",
  "methodName" : "testLang1729IsParsableInteger",
  "sourceCode" : "@Test\r\nvoid testLang1729IsParsableInteger() {\r\n    assertTrue(isParsableInteger(\"1\"));\r\n    assertFalse(isParsableInteger(\"1 2 3\"));\r\n    assertTrue(isParsableInteger(\"１２３\"));\r\n    assertFalse(isParsableInteger(\"１ ２ ３\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\math\\NumberUtilsTest.java",
  "methodName" : "testLang1729IsParsableLong",
  "sourceCode" : "@Test\r\nvoid testLang1729IsParsableLong() {\r\n    assertTrue(isParsableLong(\"1\"));\r\n    assertFalse(isParsableLong(\"1 2 3\"));\r\n    assertTrue(isParsableLong(\"１２３\"));\r\n    assertFalse(isParsableLong(\"１ ２ ３\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\math\\NumberUtilsTest.java",
  "methodName" : "testLang1729IsParsableShort",
  "sourceCode" : "@Test\r\nvoid testLang1729IsParsableShort() {\r\n    assertTrue(isParsableShort(\"1\"));\r\n    assertFalse(isParsableShort(\"1 2 3\"));\r\n    assertTrue(isParsableShort(\"１２３\"));\r\n    assertFalse(isParsableShort(\"１ ２ ３\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\math\\NumberUtilsTest.java",
  "methodName" : "testLang300",
  "sourceCode" : "@Test\r\nvoid testLang300() {\r\n    NumberUtils.createNumber(\"-1l\");\r\n    NumberUtils.createNumber(\"01l\");\r\n    NumberUtils.createNumber(\"1l\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\math\\NumberUtilsTest.java",
  "methodName" : "testLang381",
  "sourceCode" : "@Test\r\nvoid testLang381() {\r\n    assertTrue(Double.isNaN(NumberUtils.min(1.2, 2.5, Double.NaN)));\r\n    assertTrue(Double.isNaN(NumberUtils.max(1.2, 2.5, Double.NaN)));\r\n    assertTrue(Float.isNaN(NumberUtils.min(1.2f, 2.5f, Float.NaN)));\r\n    assertTrue(Float.isNaN(NumberUtils.max(1.2f, 2.5f, Float.NaN)));\r\n    final double[] a = { 1.2, Double.NaN, 3.7, 27.0, 42.0, Double.NaN };\r\n    assertTrue(Double.isNaN(NumberUtils.max(a)));\r\n    assertTrue(Double.isNaN(NumberUtils.min(a)));\r\n    final double[] b = { Double.NaN, 1.2, Double.NaN, 3.7, 27.0, 42.0, Double.NaN };\r\n    assertTrue(Double.isNaN(NumberUtils.max(b)));\r\n    assertTrue(Double.isNaN(NumberUtils.min(b)));\r\n    final float[] aF = { 1.2f, Float.NaN, 3.7f, 27.0f, 42.0f, Float.NaN };\r\n    assertTrue(Float.isNaN(NumberUtils.max(aF)));\r\n    final float[] bF = { Float.NaN, 1.2f, Float.NaN, 3.7f, 27.0f, 42.0f, Float.NaN };\r\n    assertTrue(Float.isNaN(NumberUtils.max(bF)));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\math\\NumberUtilsTest.java",
  "methodName" : "TestLang747",
  "sourceCode" : "@Test\r\npublic void TestLang747() {\r\n    assertEquals(Integer.valueOf(0x8000), NumberUtils.createNumber(\"0x8000\"));\r\n    assertEquals(Integer.valueOf(0x80000), NumberUtils.createNumber(\"0x80000\"));\r\n    assertEquals(Integer.valueOf(0x800000), NumberUtils.createNumber(\"0x800000\"));\r\n    assertEquals(Integer.valueOf(0x8000000), NumberUtils.createNumber(\"0x8000000\"));\r\n    assertEquals(Integer.valueOf(0x7FFFFFFF), NumberUtils.createNumber(\"0x7FFFFFFF\"));\r\n    assertEquals(Long.valueOf(0x80000000L), NumberUtils.createNumber(\"0x80000000\"));\r\n    assertEquals(Long.valueOf(0xFFFFFFFFL), NumberUtils.createNumber(\"0xFFFFFFFF\"));\r\n    // Leading zero tests\r\n    assertEquals(Integer.valueOf(0x8000000), NumberUtils.createNumber(\"0x08000000\"));\r\n    assertEquals(Integer.valueOf(0x7FFFFFFF), NumberUtils.createNumber(\"0x007FFFFFFF\"));\r\n    assertEquals(Long.valueOf(0x80000000L), NumberUtils.createNumber(\"0x080000000\"));\r\n    assertEquals(Long.valueOf(0xFFFFFFFFL), NumberUtils.createNumber(\"0x00FFFFFFFF\"));\r\n    assertEquals(Long.valueOf(0x800000000L), NumberUtils.createNumber(\"0x800000000\"));\r\n    assertEquals(Long.valueOf(0x8000000000L), NumberUtils.createNumber(\"0x8000000000\"));\r\n    assertEquals(Long.valueOf(0x80000000000L), NumberUtils.createNumber(\"0x80000000000\"));\r\n    assertEquals(Long.valueOf(0x800000000000L), NumberUtils.createNumber(\"0x800000000000\"));\r\n    assertEquals(Long.valueOf(0x8000000000000L), NumberUtils.createNumber(\"0x8000000000000\"));\r\n    assertEquals(Long.valueOf(0x80000000000000L), NumberUtils.createNumber(\"0x80000000000000\"));\r\n    assertEquals(Long.valueOf(0x800000000000000L), NumberUtils.createNumber(\"0x800000000000000\"));\r\n    assertEquals(Long.valueOf(0x7FFFFFFFFFFFFFFFL), NumberUtils.createNumber(\"0x7FFFFFFFFFFFFFFF\"));\r\n    // Cannot use a hex constant such as 0x8000000000000000L here as that is interpreted as a negative long\r\n    assertEquals(new BigInteger(\"8000000000000000\", 16), NumberUtils.createNumber(\"0x8000000000000000\"));\r\n    assertEquals(new BigInteger(\"FFFFFFFFFFFFFFFF\", 16), NumberUtils.createNumber(\"0xFFFFFFFFFFFFFFFF\"));\r\n    // Leading zero tests\r\n    assertEquals(Long.valueOf(0x80000000000000L), NumberUtils.createNumber(\"0x00080000000000000\"));\r\n    assertEquals(Long.valueOf(0x800000000000000L), NumberUtils.createNumber(\"0x0800000000000000\"));\r\n    assertEquals(Long.valueOf(0x7FFFFFFFFFFFFFFFL), NumberUtils.createNumber(\"0x07FFFFFFFFFFFFFFF\"));\r\n    // Cannot use a hex constant such as 0x8000000000000000L here as that is interpreted as a negative long\r\n    assertEquals(new BigInteger(\"8000000000000000\", 16), NumberUtils.createNumber(\"0x00008000000000000000\"));\r\n    assertEquals(new BigInteger(\"FFFFFFFFFFFFFFFF\", 16), NumberUtils.createNumber(\"0x0FFFFFFFFFFFFFFFF\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\math\\NumberUtilsTest.java",
  "methodName" : "testLANG971",
  "sourceCode" : "@Test\r\nvoid testLANG971() {\r\n    compareIsCreatableWithCreateNumber(\"0085\", false);\r\n    compareIsCreatableWithCreateNumber(\"085\", false);\r\n    compareIsCreatableWithCreateNumber(\"08\", false);\r\n    compareIsCreatableWithCreateNumber(\"07\", true);\r\n    compareIsCreatableWithCreateNumber(\"00\", true);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\math\\NumberUtilsTest.java",
  "methodName" : "testLANG972",
  "sourceCode" : "@Test\r\nvoid testLANG972() {\r\n    compareIsCreatableWithCreateNumber(\"0xABCD\", true);\r\n    compareIsCreatableWithCreateNumber(\"0XABCD\", true);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\math\\NumberUtilsTest.java",
  "methodName" : "testLANG992",
  "sourceCode" : "@Test\r\nvoid testLANG992() {\r\n    compareIsCreatableWithCreateNumber(\"0.0\", true);\r\n    compareIsCreatableWithCreateNumber(\"0.4790\", true);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\math\\NumberUtilsTest.java",
  "methodName" : "testMaxByte",
  "sourceCode" : "@Test\r\nvoid testMaxByte() {\r\n    assertEquals((byte) 5, NumberUtils.max((byte) 5), \"max(byte[]) failed for array length 1\");\r\n    assertEquals((byte) 9, NumberUtils.max((byte) 6, (byte) 9), \"max(byte[]) failed for array length 2\");\r\n    assertEquals((byte) 10, NumberUtils.max((byte) -10, (byte) -5, (byte) 0, (byte) 5, (byte) 10), \"max(byte[]) failed for array length 5\");\r\n    assertEquals((byte) 10, NumberUtils.max((byte) -10, (byte) -5, (byte) 0, (byte) 5, (byte) 10));\r\n    assertEquals((byte) 10, NumberUtils.max((byte) -5, (byte) 0, (byte) 10, (byte) 5, (byte) -10));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\math\\NumberUtilsTest.java",
  "methodName" : "testMaxByte_emptyArray",
  "sourceCode" : "@Test\r\nvoid testMaxByte_emptyArray() {\r\n    assertIllegalArgumentException(NumberUtils::max);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\math\\NumberUtilsTest.java",
  "methodName" : "testMaxByte_nullArray",
  "sourceCode" : "@Test\r\nvoid testMaxByte_nullArray() {\r\n    assertNullPointerException(() -> NumberUtils.max((byte[]) null));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\math\\NumberUtilsTest.java",
  "methodName" : "testMaxDouble",
  "sourceCode" : "@Test\r\nvoid testMaxDouble() {\r\n    final double[] d = null;\r\n    assertNullPointerException(() -> NumberUtils.max(d), \"No exception was thrown for null input.\");\r\n    assertIllegalArgumentException(NumberUtils::max, \"No exception was thrown for empty input.\");\r\n    assertEquals(5.1f, NumberUtils.max(5.1f), \"max(double[]) failed for array length 1\");\r\n    assertEquals(9.2f, NumberUtils.max(6.3f, 9.2f), \"max(double[]) failed for array length 2\");\r\n    assertEquals(10.4f, NumberUtils.max(-10.5f, -5.6f, 0, 5.7f, 10.4f), \"max(double[]) failed for float length 5\");\r\n    assertEquals(10, NumberUtils.max(-10, -5, 0, 5, 10), 0.0001);\r\n    assertEquals(10, NumberUtils.max(-5, 0, 10, 5, -10), 0.0001);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\math\\NumberUtilsTest.java",
  "methodName" : "testMaxDouble_emptyArray",
  "sourceCode" : "@Test\r\nvoid testMaxDouble_emptyArray() {\r\n    assertIllegalArgumentException(NumberUtils::max);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\math\\NumberUtilsTest.java",
  "methodName" : "testMaxDouble_nullArray",
  "sourceCode" : "@Test\r\nvoid testMaxDouble_nullArray() {\r\n    assertNullPointerException(() -> NumberUtils.max((double[]) null));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\math\\NumberUtilsTest.java",
  "methodName" : "testMaxFloat",
  "sourceCode" : "@Test\r\nvoid testMaxFloat() {\r\n    assertEquals(5.1f, NumberUtils.max(5.1f), \"max(float[]) failed for array length 1\");\r\n    assertEquals(9.2f, NumberUtils.max(6.3f, 9.2f), \"max(float[]) failed for array length 2\");\r\n    assertEquals(10.4f, NumberUtils.max(-10.5f, -5.6f, 0, 5.7f, 10.4f), \"max(float[]) failed for float length 5\");\r\n    assertEquals(10, NumberUtils.max(-10, -5, 0, 5, 10), 0.0001f);\r\n    assertEquals(10, NumberUtils.max(-5, 0, 10, 5, -10), 0.0001f);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\math\\NumberUtilsTest.java",
  "methodName" : "testMaxFloat_emptyArray",
  "sourceCode" : "@Test\r\nvoid testMaxFloat_emptyArray() {\r\n    assertIllegalArgumentException(NumberUtils::max);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\math\\NumberUtilsTest.java",
  "methodName" : "testMaxFloat_nullArray",
  "sourceCode" : "@Test\r\nvoid testMaxFloat_nullArray() {\r\n    assertNullPointerException(() -> NumberUtils.max((float[]) null));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\math\\NumberUtilsTest.java",
  "methodName" : "testMaximumByte",
  "sourceCode" : "@Test\r\nvoid testMaximumByte() {\r\n    final byte low = 123;\r\n    final byte mid = 123 + 1;\r\n    final byte high = 123 + 2;\r\n    assertEquals(high, NumberUtils.max(low, mid, high), \"maximum(byte, byte, byte) 1 failed\");\r\n    assertEquals(high, NumberUtils.max(mid, low, high), \"maximum(byte, byte, byte) 2 failed\");\r\n    assertEquals(high, NumberUtils.max(mid, high, low), \"maximum(byte, byte, byte) 3 failed\");\r\n    assertEquals(high, NumberUtils.max(high, mid, high), \"maximum(byte, byte, byte) 4 failed\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\math\\NumberUtilsTest.java",
  "methodName" : "testMaximumDouble",
  "sourceCode" : "@Test\r\nvoid testMaximumDouble() {\r\n    final double low = 12.3;\r\n    final double mid = 12.3 + 1;\r\n    final double high = 12.3 + 2;\r\n    assertEquals(high, NumberUtils.max(low, mid, high), 0.0001);\r\n    assertEquals(high, NumberUtils.max(mid, low, high), 0.0001);\r\n    assertEquals(high, NumberUtils.max(mid, high, low), 0.0001);\r\n    assertEquals(mid, NumberUtils.max(low, mid, low), 0.0001);\r\n    assertEquals(high, NumberUtils.max(high, mid, high), 0.0001);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\math\\NumberUtilsTest.java",
  "methodName" : "testMaximumFloat",
  "sourceCode" : "@Test\r\nvoid testMaximumFloat() {\r\n    final float low = 12.3f;\r\n    final float mid = 12.3f + 1;\r\n    final float high = 12.3f + 2;\r\n    assertEquals(high, NumberUtils.max(low, mid, high), 0.0001f);\r\n    assertEquals(high, NumberUtils.max(mid, low, high), 0.0001f);\r\n    assertEquals(high, NumberUtils.max(mid, high, low), 0.0001f);\r\n    assertEquals(mid, NumberUtils.max(low, mid, low), 0.0001f);\r\n    assertEquals(high, NumberUtils.max(high, mid, high), 0.0001f);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\math\\NumberUtilsTest.java",
  "methodName" : "testMaximumInt",
  "sourceCode" : "@Test\r\nvoid testMaximumInt() {\r\n    assertEquals(12345, NumberUtils.max(12345, 12345 - 1, 12345 - 2), \"maximum(int, int, int) 1 failed\");\r\n    assertEquals(12345, NumberUtils.max(12345 - 1, 12345, 12345 - 2), \"maximum(int, int, int) 2 failed\");\r\n    assertEquals(12345, NumberUtils.max(12345 - 1, 12345 - 2, 12345), \"maximum(int, int, int) 3 failed\");\r\n    assertEquals(12345, NumberUtils.max(12345 - 1, 12345, 12345), \"maximum(int, int, int) 4 failed\");\r\n    assertEquals(12345, NumberUtils.max(12345, 12345, 12345), \"maximum(int, int, int) 5 failed\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\math\\NumberUtilsTest.java",
  "methodName" : "testMaximumLong",
  "sourceCode" : "@Test\r\nvoid testMaximumLong() {\r\n    assertEquals(12345L, NumberUtils.max(12345L, 12345L - 1L, 12345L - 2L), \"maximum(long, long, long) 1 failed\");\r\n    assertEquals(12345L, NumberUtils.max(12345L - 1L, 12345L, 12345L - 2L), \"maximum(long, long, long) 2 failed\");\r\n    assertEquals(12345L, NumberUtils.max(12345L - 1L, 12345L - 2L, 12345L), \"maximum(long, long, long) 3 failed\");\r\n    assertEquals(12345L, NumberUtils.max(12345L - 1L, 12345L, 12345L), \"maximum(long, long, long) 4 failed\");\r\n    assertEquals(12345L, NumberUtils.max(12345L, 12345L, 12345L), \"maximum(long, long, long) 5 failed\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\math\\NumberUtilsTest.java",
  "methodName" : "testMaximumShort",
  "sourceCode" : "@Test\r\nvoid testMaximumShort() {\r\n    final short low = 1234;\r\n    final short mid = 1234 + 1;\r\n    final short high = 1234 + 2;\r\n    assertEquals(high, NumberUtils.max(low, mid, high), \"maximum(short, short, short) 1 failed\");\r\n    assertEquals(high, NumberUtils.max(mid, low, high), \"maximum(short, short, short) 2 failed\");\r\n    assertEquals(high, NumberUtils.max(mid, high, low), \"maximum(short, short, short) 3 failed\");\r\n    assertEquals(high, NumberUtils.max(high, mid, high), \"maximum(short, short, short) 4 failed\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\math\\NumberUtilsTest.java",
  "methodName" : "testMaxInt",
  "sourceCode" : "@Test\r\nvoid testMaxInt() {\r\n    assertEquals(5, NumberUtils.max(5), \"max(int[]) failed for array length 1\");\r\n    assertEquals(9, NumberUtils.max(6, 9), \"max(int[]) failed for array length 2\");\r\n    assertEquals(10, NumberUtils.max(-10, -5, 0, 5, 10), \"max(int[]) failed for array length 5\");\r\n    assertEquals(10, NumberUtils.max(-10, -5, 0, 5, 10));\r\n    assertEquals(10, NumberUtils.max(-5, 0, 10, 5, -10));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\math\\NumberUtilsTest.java",
  "methodName" : "testMaxInt_emptyArray",
  "sourceCode" : "@Test\r\nvoid testMaxInt_emptyArray() {\r\n    assertIllegalArgumentException(NumberUtils::max);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\math\\NumberUtilsTest.java",
  "methodName" : "testMaxInt_nullArray",
  "sourceCode" : "@Test\r\nvoid testMaxInt_nullArray() {\r\n    assertNullPointerException(() -> NumberUtils.max((int[]) null));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\math\\NumberUtilsTest.java",
  "methodName" : "testMaxLong",
  "sourceCode" : "@Test\r\nvoid testMaxLong() {\r\n    assertEquals(5L, NumberUtils.max(5L), \"max(long[]) failed for array length 1\");\r\n    assertEquals(9L, NumberUtils.max(6L, 9L), \"max(long[]) failed for array length 2\");\r\n    assertEquals(10L, NumberUtils.max(-10L, -5L, 0L, 5L, 10L), \"max(long[]) failed for array length 5\");\r\n    assertEquals(10L, NumberUtils.max(-10L, -5L, 0L, 5L, 10L));\r\n    assertEquals(10L, NumberUtils.max(-5L, 0L, 10L, 5L, -10L));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\math\\NumberUtilsTest.java",
  "methodName" : "testMaxLong_emptyArray",
  "sourceCode" : "@Test\r\nvoid testMaxLong_emptyArray() {\r\n    assertIllegalArgumentException(NumberUtils::max);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\math\\NumberUtilsTest.java",
  "methodName" : "testMaxLong_nullArray",
  "sourceCode" : "@Test\r\nvoid testMaxLong_nullArray() {\r\n    assertNullPointerException(() -> NumberUtils.max((long[]) null));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\math\\NumberUtilsTest.java",
  "methodName" : "testMaxShort",
  "sourceCode" : "@Test\r\nvoid testMaxShort() {\r\n    assertEquals((short) 5, NumberUtils.max((short) 5), \"max(short[]) failed for array length 1\");\r\n    assertEquals((short) 9, NumberUtils.max((short) 6, (short) 9), \"max(short[]) failed for array length 2\");\r\n    assertEquals((short) 10, NumberUtils.max((short) -10, (short) -5, (short) 0, (short) 5, (short) 10), \"max(short[]) failed for array length 5\");\r\n    assertEquals((short) 10, NumberUtils.max((short) -10, (short) -5, (short) 0, (short) 5, (short) 10));\r\n    assertEquals((short) 10, NumberUtils.max((short) -5, (short) 0, (short) 10, (short) 5, (short) -10));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\math\\NumberUtilsTest.java",
  "methodName" : "testMaxShort_emptyArray",
  "sourceCode" : "@Test\r\nvoid testMaxShort_emptyArray() {\r\n    assertIllegalArgumentException(NumberUtils::max);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\math\\NumberUtilsTest.java",
  "methodName" : "testMaxShort_nullArray",
  "sourceCode" : "@Test\r\nvoid testMaxShort_nullArray() {\r\n    assertNullPointerException(() -> NumberUtils.max((short[]) null));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\math\\NumberUtilsTest.java",
  "methodName" : "testMinByte",
  "sourceCode" : "@Test\r\nvoid testMinByte() {\r\n    assertEquals((byte) 5, NumberUtils.min((byte) 5), \"min(byte[]) failed for array length 1\");\r\n    assertEquals((byte) 6, NumberUtils.min((byte) 6, (byte) 9), \"min(byte[]) failed for array length 2\");\r\n    assertEquals((byte) -10, NumberUtils.min((byte) -10, (byte) -5, (byte) 0, (byte) 5, (byte) 10));\r\n    assertEquals((byte) -10, NumberUtils.min((byte) -5, (byte) 0, (byte) -10, (byte) 5, (byte) 10));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\math\\NumberUtilsTest.java",
  "methodName" : "testMinByte_emptyArray",
  "sourceCode" : "@Test\r\nvoid testMinByte_emptyArray() {\r\n    assertIllegalArgumentException(NumberUtils::min);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\math\\NumberUtilsTest.java",
  "methodName" : "testMinByte_nullArray",
  "sourceCode" : "@Test\r\nvoid testMinByte_nullArray() {\r\n    assertNullPointerException(() -> NumberUtils.min((byte[]) null));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\math\\NumberUtilsTest.java",
  "methodName" : "testMinDouble",
  "sourceCode" : "@Test\r\nvoid testMinDouble() {\r\n    assertEquals(5.12, NumberUtils.min(5.12), \"min(double[]) failed for array length 1\");\r\n    assertEquals(6.23, NumberUtils.min(6.23, 9.34), \"min(double[]) failed for array length 2\");\r\n    assertEquals(-10.45, NumberUtils.min(-10.45, -5.56, 0, 5.67, 10.78), \"min(double[]) failed for array length 5\");\r\n    assertEquals(-10, NumberUtils.min(-10, -5, 0, 5, 10), 0.0001);\r\n    assertEquals(-10, NumberUtils.min(-5, 0, -10, 5, 10), 0.0001);\r\n    assertEquals(5.12, NumberUtils.min(6.11, 5.12));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\math\\NumberUtilsTest.java",
  "methodName" : "testMinDouble_emptyArray",
  "sourceCode" : "@Test\r\nvoid testMinDouble_emptyArray() {\r\n    assertIllegalArgumentException(NumberUtils::min);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\math\\NumberUtilsTest.java",
  "methodName" : "testMinDouble_nullArray",
  "sourceCode" : "@Test\r\nvoid testMinDouble_nullArray() {\r\n    assertNullPointerException(() -> NumberUtils.min((double[]) null));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\math\\NumberUtilsTest.java",
  "methodName" : "testMinFloat",
  "sourceCode" : "@Test\r\nvoid testMinFloat() {\r\n    assertEquals(5.9f, NumberUtils.min(5.9f), \"min(float[]) failed for array length 1\");\r\n    assertEquals(6.8f, NumberUtils.min(6.8f, 9.7f), \"min(float[]) failed for array length 2\");\r\n    assertEquals(-10.6f, NumberUtils.min(-10.6f, -5.5f, 0, 5.4f, 10.3f), \"min(float[]) failed for array length 5\");\r\n    assertEquals(-10, NumberUtils.min(-10, -5, 0, 5, 10), 0.0001f);\r\n    assertEquals(-10, NumberUtils.min(-5, 0, -10, 5, 10), 0.0001f);\r\n    assertEquals(Float.NaN, NumberUtils.min(6.8f, Float.NaN));\r\n    assertEquals(3.7f, NumberUtils.min(6.8f, 3.7f));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\math\\NumberUtilsTest.java",
  "methodName" : "testMinFloat_emptyArray",
  "sourceCode" : "@Test\r\nvoid testMinFloat_emptyArray() {\r\n    assertIllegalArgumentException(NumberUtils::min);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\math\\NumberUtilsTest.java",
  "methodName" : "testMinFloat_nullArray",
  "sourceCode" : "@Test\r\nvoid testMinFloat_nullArray() {\r\n    assertNullPointerException(() -> NumberUtils.min((float[]) null));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\math\\NumberUtilsTest.java",
  "methodName" : "testMinimumByte",
  "sourceCode" : "@Test\r\nvoid testMinimumByte() {\r\n    final byte low = 123;\r\n    final byte mid = 123 + 1;\r\n    final byte high = 123 + 2;\r\n    assertEquals(low, NumberUtils.min(low, mid, high), \"minimum(byte, byte, byte) 1 failed\");\r\n    assertEquals(low, NumberUtils.min(mid, low, high), \"minimum(byte, byte, byte) 2 failed\");\r\n    assertEquals(low, NumberUtils.min(mid, high, low), \"minimum(byte, byte, byte) 3 failed\");\r\n    assertEquals(low, NumberUtils.min(low, mid, low), \"minimum(byte, byte, byte) 4 failed\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\math\\NumberUtilsTest.java",
  "methodName" : "testMinimumDouble",
  "sourceCode" : "@Test\r\nvoid testMinimumDouble() {\r\n    final double low = 12.3;\r\n    final double mid = 12.3 + 1;\r\n    final double high = 12.3 + 2;\r\n    assertEquals(low, NumberUtils.min(low, mid, high), 0.0001);\r\n    assertEquals(low, NumberUtils.min(mid, low, high), 0.0001);\r\n    assertEquals(low, NumberUtils.min(mid, high, low), 0.0001);\r\n    assertEquals(low, NumberUtils.min(low, mid, low), 0.0001);\r\n    assertEquals(mid, NumberUtils.min(high, mid, high), 0.0001);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\math\\NumberUtilsTest.java",
  "methodName" : "testMinimumFloat",
  "sourceCode" : "@Test\r\nvoid testMinimumFloat() {\r\n    final float low = 12.3f;\r\n    final float mid = 12.3f + 1;\r\n    final float high = 12.3f + 2;\r\n    assertEquals(low, NumberUtils.min(low, mid, high), 0.0001f);\r\n    assertEquals(low, NumberUtils.min(mid, low, high), 0.0001f);\r\n    assertEquals(low, NumberUtils.min(mid, high, low), 0.0001f);\r\n    assertEquals(low, NumberUtils.min(low, mid, low), 0.0001f);\r\n    assertEquals(mid, NumberUtils.min(high, mid, high), 0.0001f);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\math\\NumberUtilsTest.java",
  "methodName" : "testMinimumInt",
  "sourceCode" : "@Test\r\nvoid testMinimumInt() {\r\n    assertEquals(12345, NumberUtils.min(12345, 12345 + 1, 12345 + 2), \"minimum(int, int, int) 1 failed\");\r\n    assertEquals(12345, NumberUtils.min(12345 + 1, 12345, 12345 + 2), \"minimum(int, int, int) 2 failed\");\r\n    assertEquals(12345, NumberUtils.min(12345 + 1, 12345 + 2, 12345), \"minimum(int, int, int) 3 failed\");\r\n    assertEquals(12345, NumberUtils.min(12345 + 1, 12345, 12345), \"minimum(int, int, int) 4 failed\");\r\n    assertEquals(12345, NumberUtils.min(12345, 12345, 12345), \"minimum(int, int, int) 5 failed\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\math\\NumberUtilsTest.java",
  "methodName" : "testMinimumLong",
  "sourceCode" : "@Test\r\nvoid testMinimumLong() {\r\n    assertEquals(12345L, NumberUtils.min(12345L, 12345L + 1L, 12345L + 2L), \"minimum(long, long, long) 1 failed\");\r\n    assertEquals(12345L, NumberUtils.min(12345L + 1L, 12345L, 12345 + 2L), \"minimum(long, long, long) 2 failed\");\r\n    assertEquals(12345L, NumberUtils.min(12345L + 1L, 12345L + 2L, 12345L), \"minimum(long, long, long) 3 failed\");\r\n    assertEquals(12345L, NumberUtils.min(12345L + 1L, 12345L, 12345L), \"minimum(long, long, long) 4 failed\");\r\n    assertEquals(12345L, NumberUtils.min(12345L, 12345L, 12345L), \"minimum(long, long, long) 5 failed\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\math\\NumberUtilsTest.java",
  "methodName" : "testMinimumShort",
  "sourceCode" : "@Test\r\nvoid testMinimumShort() {\r\n    final short low = 1234;\r\n    final short mid = 1234 + 1;\r\n    final short high = 1234 + 2;\r\n    assertEquals(low, NumberUtils.min(low, mid, high), \"minimum(short, short, short) 1 failed\");\r\n    assertEquals(low, NumberUtils.min(mid, low, high), \"minimum(short, short, short) 2 failed\");\r\n    assertEquals(low, NumberUtils.min(mid, high, low), \"minimum(short, short, short) 3 failed\");\r\n    assertEquals(low, NumberUtils.min(low, mid, low), \"minimum(short, short, short) 4 failed\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\math\\NumberUtilsTest.java",
  "methodName" : "testMinInt",
  "sourceCode" : "@Test\r\nvoid testMinInt() {\r\n    assertEquals(5, NumberUtils.min(5), \"min(int[]) failed for array length 1\");\r\n    assertEquals(6, NumberUtils.min(6, 9), \"min(int[]) failed for array length 2\");\r\n    assertEquals(-10, NumberUtils.min(-10, -5, 0, 5, 10));\r\n    assertEquals(-10, NumberUtils.min(-5, 0, -10, 5, 10));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\math\\NumberUtilsTest.java",
  "methodName" : "testMinInt_emptyArray",
  "sourceCode" : "@Test\r\nvoid testMinInt_emptyArray() {\r\n    assertIllegalArgumentException(NumberUtils::min);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\math\\NumberUtilsTest.java",
  "methodName" : "testMinInt_nullArray",
  "sourceCode" : "@Test\r\nvoid testMinInt_nullArray() {\r\n    assertNullPointerException(() -> NumberUtils.min((int[]) null));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\math\\NumberUtilsTest.java",
  "methodName" : "testMinLong",
  "sourceCode" : "@Test\r\nvoid testMinLong() {\r\n    assertEquals(5L, NumberUtils.min(5L), \"min(long[]) failed for array length 1\");\r\n    assertEquals(6L, NumberUtils.min(6L, 9L), \"min(long[]) failed for array length 2\");\r\n    assertEquals(-10L, NumberUtils.min(-10L, -5L, 0L, 5L, 10L));\r\n    assertEquals(-10L, NumberUtils.min(-5L, 0L, -10L, 5L, 10L));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\math\\NumberUtilsTest.java",
  "methodName" : "testMinLong_emptyArray",
  "sourceCode" : "@Test\r\nvoid testMinLong_emptyArray() {\r\n    assertIllegalArgumentException(NumberUtils::min);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\math\\NumberUtilsTest.java",
  "methodName" : "testMinLong_nullArray",
  "sourceCode" : "@Test\r\nvoid testMinLong_nullArray() {\r\n    assertNullPointerException(() -> NumberUtils.min((long[]) null));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\math\\NumberUtilsTest.java",
  "methodName" : "testMinShort",
  "sourceCode" : "@Test\r\nvoid testMinShort() {\r\n    assertEquals((short) 5, NumberUtils.min((short) 5), \"min(short[]) failed for array length 1\");\r\n    assertEquals((short) 6, NumberUtils.min((short) 6, (short) 9), \"min(short[]) failed for array length 2\");\r\n    assertEquals((short) -10, NumberUtils.min((short) -10, (short) -5, (short) 0, (short) 5, (short) 10));\r\n    assertEquals((short) -10, NumberUtils.min((short) -5, (short) 0, (short) -10, (short) 5, (short) 10));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\math\\NumberUtilsTest.java",
  "methodName" : "testMinShort_emptyArray",
  "sourceCode" : "@Test\r\nvoid testMinShort_emptyArray() {\r\n    assertIllegalArgumentException(NumberUtils::min);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\math\\NumberUtilsTest.java",
  "methodName" : "testMinShort_nullArray",
  "sourceCode" : "@Test\r\nvoid testMinShort_nullArray() {\r\n    assertNullPointerException(() -> NumberUtils.min((short[]) null));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\math\\NumberUtilsTest.java",
  "methodName" : "testStringCreateNumberEnsureNoPrecisionLoss",
  "sourceCode" : "/**\r\n * Test for {(@link NumberUtils#createNumber(String)}\r\n */\r\n@Test\r\nvoid testStringCreateNumberEnsureNoPrecisionLoss() {\r\n    assertInstanceOf(Float.class, NumberUtils.createNumber(\"1.23\"));\r\n    assertInstanceOf(Double.class, NumberUtils.createNumber(\"3.40282354e+38\"));\r\n    assertInstanceOf(BigDecimal.class, NumberUtils.createNumber(\"1.797693134862315759e+308\"));\r\n    // LANG-1060\r\n    assertInstanceOf(Float.class, NumberUtils.createNumber(\"001.12\"));\r\n    assertInstanceOf(Float.class, NumberUtils.createNumber(\"-001.12\"));\r\n    assertInstanceOf(Float.class, NumberUtils.createNumber(\"+001.12\"));\r\n    assertInstanceOf(Double.class, NumberUtils.createNumber(\"003.40282354e+38\"));\r\n    assertInstanceOf(Double.class, NumberUtils.createNumber(\"-003.40282354e+38\"));\r\n    assertInstanceOf(Double.class, NumberUtils.createNumber(\"+003.40282354e+38\"));\r\n    assertInstanceOf(BigDecimal.class, NumberUtils.createNumber(\"0001.797693134862315759e+308\"));\r\n    assertInstanceOf(BigDecimal.class, NumberUtils.createNumber(\"-001.797693134862315759e+308\"));\r\n    assertInstanceOf(BigDecimal.class, NumberUtils.createNumber(\"+001.797693134862315759e+308\"));\r\n    //LANG-1613\r\n    assertInstanceOf(Double.class, NumberUtils.createNumber(\"2.2250738585072014E-308\"));\r\n    assertInstanceOf(Double.class, NumberUtils.createNumber(\"2.2250738585072014E-308D\"));\r\n    assertInstanceOf(Double.class, NumberUtils.createNumber(\"2.2250738585072014E-308F\"));\r\n    assertInstanceOf(Double.class, NumberUtils.createNumber(\"4.9E-324\"));\r\n    assertInstanceOf(Double.class, NumberUtils.createNumber(\"4.9E-324D\"));\r\n    assertInstanceOf(Double.class, NumberUtils.createNumber(\"4.9E-324F\"));\r\n    assertInstanceOf(Double.class, NumberUtils.createNumber(\"1.7976931348623157E308\"));\r\n    assertInstanceOf(Double.class, NumberUtils.createNumber(\"1.7976931348623157E308D\"));\r\n    assertInstanceOf(Double.class, NumberUtils.createNumber(\"1.7976931348623157E308F\"));\r\n    assertInstanceOf(Double.class, NumberUtils.createNumber(\"4.9e-324D\"));\r\n    assertInstanceOf(Double.class, NumberUtils.createNumber(\"4.9e-324F\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\math\\NumberUtilsTest.java",
  "methodName" : "testStringToDoubleString",
  "sourceCode" : "/**\r\n * Test for {@link NumberUtils#toDouble(String)}.\r\n */\r\n@Test\r\nvoid testStringToDoubleString() {\r\n    assertEquals(NumberUtils.toDouble(\"-1.2345\"), -1.2345d, \"toDouble(String) 1 failed\");\r\n    assertEquals(1.2345d, NumberUtils.toDouble(\"1.2345\"), \"toDouble(String) 2 failed\");\r\n    assertEquals(0.0d, NumberUtils.toDouble(\"abc\"), \"toDouble(String) 3 failed\");\r\n    // LANG-1060\r\n    assertEquals(NumberUtils.toDouble(\"-001.2345\"), -1.2345d, \"toDouble(String) 4 failed\");\r\n    assertEquals(1.2345d, NumberUtils.toDouble(\"+001.2345\"), \"toDouble(String) 5 failed\");\r\n    assertEquals(1.2345d, NumberUtils.toDouble(\"001.2345\"), \"toDouble(String) 6 failed\");\r\n    assertEquals(0d, NumberUtils.toDouble(\"000.00000\"), \"toDouble(String) 7 failed\");\r\n    assertEquals(NumberUtils.toDouble(Double.MAX_VALUE + \"\"), Double.MAX_VALUE, \"toDouble(Double.MAX_VALUE) failed\");\r\n    assertEquals(NumberUtils.toDouble(Double.MIN_VALUE + \"\"), Double.MIN_VALUE, \"toDouble(Double.MIN_VALUE) failed\");\r\n    assertEquals(0.0d, NumberUtils.toDouble(\"\"), \"toDouble(empty) failed\");\r\n    assertEquals(0.0d, NumberUtils.toDouble((String) null), \"toDouble(null) failed\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\math\\NumberUtilsTest.java",
  "methodName" : "testStringToDoubleStringD",
  "sourceCode" : "/**\r\n * Test for {@link NumberUtils#toDouble(String, double)}.\r\n */\r\n@Test\r\nvoid testStringToDoubleStringD() {\r\n    assertEquals(1.2345d, NumberUtils.toDouble(\"1.2345\", 5.1d), \"toDouble(String, int) 1 failed\");\r\n    assertEquals(5.0d, NumberUtils.toDouble(\"a\", 5.0d), \"toDouble(String, int) 2 failed\");\r\n    // LANG-1060\r\n    assertEquals(1.2345d, NumberUtils.toDouble(\"001.2345\", 5.1d), \"toDouble(String, int) 3 failed\");\r\n    assertEquals(NumberUtils.toDouble(\"-001.2345\", 5.1d), -1.2345d, \"toDouble(String, int) 4 failed\");\r\n    assertEquals(1.2345d, NumberUtils.toDouble(\"+001.2345\", 5.1d), \"toDouble(String, int) 5 failed\");\r\n    assertEquals(0d, NumberUtils.toDouble(\"000.00\", 5.1d), \"toDouble(String, int) 7 failed\");\r\n    assertEquals(5.1d, NumberUtils.toDouble(\"\", 5.1d));\r\n    assertEquals(5.1d, NumberUtils.toDouble((String) null, 5.1d));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\math\\NumberUtilsTest.java",
  "methodName" : "testToByteString",
  "sourceCode" : "/**\r\n * Test for {@link NumberUtils#toByte(String)}.\r\n */\r\n@Test\r\nvoid testToByteString() {\r\n    assertEquals(123, NumberUtils.toByte(\"123\"), \"toByte(String) 1 failed\");\r\n    assertEquals(0, NumberUtils.toByte(\"abc\"), \"toByte(String) 2 failed\");\r\n    assertEquals(0, NumberUtils.toByte(\"\"), \"toByte(empty) failed\");\r\n    assertEquals(0, NumberUtils.toByte(null), \"toByte(null) failed\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\math\\NumberUtilsTest.java",
  "methodName" : "testToByteStringI",
  "sourceCode" : "/**\r\n * Test for {@link NumberUtils#toByte(String, byte)}.\r\n */\r\n@Test\r\nvoid testToByteStringI() {\r\n    assertEquals(123, NumberUtils.toByte(\"123\", (byte) 5), \"toByte(String, byte) 1 failed\");\r\n    assertEquals(5, NumberUtils.toByte(\"12.3\", (byte) 5), \"toByte(String, byte) 2 failed\");\r\n    assertEquals(5, NumberUtils.toByte(\"\", (byte) 5));\r\n    assertEquals(5, NumberUtils.toByte(null, (byte) 5));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\math\\NumberUtilsTest.java",
  "methodName" : "testToFloatString",
  "sourceCode" : "/**\r\n * Test for {@link NumberUtils#toFloat(String)}.\r\n */\r\n@Test\r\nvoid testToFloatString() {\r\n    assertEquals(NumberUtils.toFloat(\"-1.2345\"), -1.2345f, \"toFloat(String) 1 failed\");\r\n    assertEquals(1.2345f, NumberUtils.toFloat(\"1.2345\"), \"toFloat(String) 2 failed\");\r\n    assertEquals(0.0f, NumberUtils.toFloat(\"abc\"), \"toFloat(String) 3 failed\");\r\n    // LANG-1060\r\n    assertEquals(NumberUtils.toFloat(\"-001.2345\"), -1.2345f, \"toFloat(String) 4 failed\");\r\n    assertEquals(1.2345f, NumberUtils.toFloat(\"+001.2345\"), \"toFloat(String) 5 failed\");\r\n    assertEquals(1.2345f, NumberUtils.toFloat(\"001.2345\"), \"toFloat(String) 6 failed\");\r\n    assertEquals(0f, NumberUtils.toFloat(\"000.00\"), \"toFloat(String) 7 failed\");\r\n    assertEquals(NumberUtils.toFloat(Float.MAX_VALUE + \"\"), Float.MAX_VALUE, \"toFloat(Float.MAX_VALUE) failed\");\r\n    assertEquals(NumberUtils.toFloat(Float.MIN_VALUE + \"\"), Float.MIN_VALUE, \"toFloat(Float.MIN_VALUE) failed\");\r\n    assertEquals(0.0f, NumberUtils.toFloat(\"\"), \"toFloat(empty) failed\");\r\n    assertEquals(0.0f, NumberUtils.toFloat(null), \"toFloat(null) failed\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\math\\NumberUtilsTest.java",
  "methodName" : "testToFloatStringF",
  "sourceCode" : "/**\r\n * Test for {@link NumberUtils#toFloat(String, float)}.\r\n */\r\n@Test\r\nvoid testToFloatStringF() {\r\n    assertEquals(1.2345f, NumberUtils.toFloat(\"1.2345\", 5.1f), \"toFloat(String, int) 1 failed\");\r\n    assertEquals(5.0f, NumberUtils.toFloat(\"a\", 5.0f), \"toFloat(String, int) 2 failed\");\r\n    // LANG-1060\r\n    assertEquals(5.0f, NumberUtils.toFloat(\"-001Z.2345\", 5.0f), \"toFloat(String, int) 3 failed\");\r\n    assertEquals(5.0f, NumberUtils.toFloat(\"+001AB.2345\", 5.0f), \"toFloat(String, int) 4 failed\");\r\n    assertEquals(5.0f, NumberUtils.toFloat(\"001Z.2345\", 5.0f), \"toFloat(String, int) 5 failed\");\r\n    assertEquals(5.0f, NumberUtils.toFloat(\"\", 5.0f));\r\n    assertEquals(5.0f, NumberUtils.toFloat(null, 5.0f));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\math\\NumberUtilsTest.java",
  "methodName" : "testToIntString",
  "sourceCode" : "/**\r\n * Test for {@link NumberUtils#toInt(String)}.\r\n */\r\n@Test\r\nvoid testToIntString() {\r\n    assertEquals(12345, NumberUtils.toInt(\"12345\"), \"toInt(String) 1 failed\");\r\n    assertEquals(0, NumberUtils.toInt(\"abc\"), \"toInt(String) 2 failed\");\r\n    assertEquals(0, NumberUtils.toInt(\"\"), \"toInt(empty) failed\");\r\n    assertEquals(0, NumberUtils.toInt(null), \"toInt(null) failed\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\math\\NumberUtilsTest.java",
  "methodName" : "testToIntStringI",
  "sourceCode" : "/**\r\n * Test for {@link NumberUtils#toInt(String, int)}.\r\n */\r\n@Test\r\nvoid testToIntStringI() {\r\n    assertEquals(12345, NumberUtils.toInt(\"12345\", 5), \"toInt(String, int) 1 failed\");\r\n    assertEquals(5, NumberUtils.toInt(\"1234.5\", 5), \"toInt(String, int) 2 failed\");\r\n    assertEquals(5, NumberUtils.toInt(\"\", 5));\r\n    assertEquals(5, NumberUtils.toInt(null, 5));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\math\\NumberUtilsTest.java",
  "methodName" : "testToLongString",
  "sourceCode" : "/**\r\n * Test for {@link NumberUtils#toLong(String)}.\r\n */\r\n@Test\r\nvoid testToLongString() {\r\n    assertEquals(12345L, NumberUtils.toLong(\"12345\"), \"toLong(String) 1 failed\");\r\n    assertEquals(0L, NumberUtils.toLong(\"abc\"), \"toLong(String) 2 failed\");\r\n    assertEquals(0L, NumberUtils.toLong(\"1L\"), \"toLong(String) 3 failed\");\r\n    assertEquals(0L, NumberUtils.toLong(\"1l\"), \"toLong(String) 4 failed\");\r\n    assertEquals(NumberUtils.toLong(Long.MAX_VALUE + \"\"), Long.MAX_VALUE, \"toLong(Long.MAX_VALUE) failed\");\r\n    assertEquals(NumberUtils.toLong(Long.MIN_VALUE + \"\"), Long.MIN_VALUE, \"toLong(Long.MIN_VALUE) failed\");\r\n    assertEquals(0L, NumberUtils.toLong(\"\"), \"toLong(empty) failed\");\r\n    assertEquals(0L, NumberUtils.toLong(null), \"toLong(null) failed\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\math\\NumberUtilsTest.java",
  "methodName" : "testToLongStringL",
  "sourceCode" : "/**\r\n * Test for {@link NumberUtils#toLong(String, long)}.\r\n */\r\n@Test\r\nvoid testToLongStringL() {\r\n    assertEquals(12345L, NumberUtils.toLong(\"12345\", 5L), \"toLong(String, long) 1 failed\");\r\n    assertEquals(5L, NumberUtils.toLong(\"1234.5\", 5L), \"toLong(String, long) 2 failed\");\r\n    assertEquals(5L, NumberUtils.toLong(\"\", 5L));\r\n    assertEquals(5L, NumberUtils.toLong(null, 5L));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\math\\NumberUtilsTest.java",
  "methodName" : "testToScaledBigDecimalBigDecimal",
  "sourceCode" : "/**\r\n * Test for {@link NumberUtils#toScaledBigDecimal(BigDecimal)}.\r\n */\r\n@Test\r\nvoid testToScaledBigDecimalBigDecimal() {\r\n    assertEquals(NumberUtils.toScaledBigDecimal(BigDecimal.valueOf(123.456)), BigDecimal.valueOf(123.46), \"toScaledBigDecimal(BigDecimal) 1 failed\");\r\n    // Test RoundingMode.HALF_EVEN default rounding.\r\n    assertEquals(NumberUtils.toScaledBigDecimal(BigDecimal.valueOf(23.515)), BigDecimal.valueOf(23.52), \"toScaledBigDecimal(BigDecimal) 2 failed\");\r\n    assertEquals(NumberUtils.toScaledBigDecimal(BigDecimal.valueOf(23.525)), BigDecimal.valueOf(23.52), \"toScaledBigDecimal(BigDecimal) 3 failed\");\r\n    assertEquals(\"2352.00\", NumberUtils.toScaledBigDecimal(BigDecimal.valueOf(23.525)).multiply(BigDecimal.valueOf(100)).toString(), \"toScaledBigDecimal(BigDecimal) 4 failed\");\r\n    assertEquals(NumberUtils.toScaledBigDecimal((BigDecimal) null), BigDecimal.ZERO, \"toScaledBigDecimal(BigDecimal) 5 failed\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\math\\NumberUtilsTest.java",
  "methodName" : "testToScaledBigDecimalBigDecimalIRM",
  "sourceCode" : "/**\r\n * Test for {@link NumberUtils#toScaledBigDecimal(BigDecimal, int, RoundingMode)}.\r\n */\r\n@Test\r\nvoid testToScaledBigDecimalBigDecimalIRM() {\r\n    assertEquals(NumberUtils.toScaledBigDecimal(BigDecimal.valueOf(123.456), 1, RoundingMode.CEILING), BigDecimal.valueOf(123.5), \"toScaledBigDecimal(BigDecimal, int, RoundingMode) 1 failed\");\r\n    assertEquals(NumberUtils.toScaledBigDecimal(BigDecimal.valueOf(23.5159), 3, RoundingMode.FLOOR), BigDecimal.valueOf(23.515), \"toScaledBigDecimal(BigDecimal, int, RoundingMode) 2 failed\");\r\n    assertEquals(NumberUtils.toScaledBigDecimal(BigDecimal.valueOf(23.525), 2, RoundingMode.HALF_UP), BigDecimal.valueOf(23.53), \"toScaledBigDecimal(BigDecimal, int, RoundingMode) 3 failed\");\r\n    assertEquals(\"23521.0000\", NumberUtils.toScaledBigDecimal(BigDecimal.valueOf(23.521), 4, RoundingMode.HALF_EVEN).multiply(BigDecimal.valueOf(1000)).toString(), \"toScaledBigDecimal(BigDecimal, int, RoundingMode) 4 failed\");\r\n    assertEquals(NumberUtils.toScaledBigDecimal((BigDecimal) null, 2, RoundingMode.HALF_UP), BigDecimal.ZERO, \"toScaledBigDecimal(BigDecimal, int, RoundingMode) 5 failed\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\math\\NumberUtilsTest.java",
  "methodName" : "testToScaledBigDecimalDouble",
  "sourceCode" : "/**\r\n * Test for {@link NumberUtils#toScaledBigDecimal(Double)}.\r\n */\r\n@Test\r\nvoid testToScaledBigDecimalDouble() {\r\n    assertEquals(NumberUtils.toScaledBigDecimal(Double.valueOf(123.456d)), BigDecimal.valueOf(123.46), \"toScaledBigDecimal(Double) 1 failed\");\r\n    // Test RoundingMode.HALF_EVEN default rounding.\r\n    assertEquals(NumberUtils.toScaledBigDecimal(Double.valueOf(23.515d)), BigDecimal.valueOf(23.52), \"toScaledBigDecimal(Double) 2 failed\");\r\n    assertEquals(NumberUtils.toScaledBigDecimal(Double.valueOf(23.525d)), BigDecimal.valueOf(23.52), \"toScaledBigDecimal(Double) 3 failed\");\r\n    assertEquals(\"2352.00\", NumberUtils.toScaledBigDecimal(Double.valueOf(23.525d)).multiply(BigDecimal.valueOf(100)).toString(), \"toScaledBigDecimal(Double) 4 failed\");\r\n    assertEquals(NumberUtils.toScaledBigDecimal((Double) null), BigDecimal.ZERO, \"toScaledBigDecimal(Double) 5 failed\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\math\\NumberUtilsTest.java",
  "methodName" : "testToScaledBigDecimalDoubleIRM",
  "sourceCode" : "/**\r\n * Test for {@link NumberUtils#toScaledBigDecimal(Double, int, RoundingMode)}.\r\n */\r\n@Test\r\nvoid testToScaledBigDecimalDoubleIRM() {\r\n    assertEquals(NumberUtils.toScaledBigDecimal(Double.valueOf(123.456d), 1, RoundingMode.CEILING), BigDecimal.valueOf(123.5), \"toScaledBigDecimal(Double, int, RoundingMode) 1 failed\");\r\n    assertEquals(NumberUtils.toScaledBigDecimal(Double.valueOf(23.5159d), 3, RoundingMode.FLOOR), BigDecimal.valueOf(23.515), \"toScaledBigDecimal(Double, int, RoundingMode) 2 failed\");\r\n    assertEquals(NumberUtils.toScaledBigDecimal(Double.valueOf(23.525d), 2, RoundingMode.HALF_UP), BigDecimal.valueOf(23.53), \"toScaledBigDecimal(Double, int, RoundingMode) 3 failed\");\r\n    assertEquals(\"23521.0000\", NumberUtils.toScaledBigDecimal(Double.valueOf(23.521d), 4, RoundingMode.HALF_EVEN).multiply(BigDecimal.valueOf(1000)).toString(), \"toScaledBigDecimal(Double, int, RoundingMode) 4 failed\");\r\n    assertEquals(NumberUtils.toScaledBigDecimal((Double) null, 2, RoundingMode.HALF_UP), BigDecimal.ZERO, \"toScaledBigDecimal(Double, int, RoundingMode) 5 failed\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\math\\NumberUtilsTest.java",
  "methodName" : "testToScaledBigDecimalFloat",
  "sourceCode" : "/**\r\n * Test for {@link NumberUtils#toScaledBigDecimal(Float)}.\r\n */\r\n@Test\r\nvoid testToScaledBigDecimalFloat() {\r\n    assertEquals(NumberUtils.toScaledBigDecimal(Float.valueOf(123.456f)), BigDecimal.valueOf(123.46), \"toScaledBigDecimal(Float) 1 failed\");\r\n    // Test RoundingMode.HALF_EVEN default rounding.\r\n    assertEquals(NumberUtils.toScaledBigDecimal(Float.valueOf(23.515f)), BigDecimal.valueOf(23.51), \"toScaledBigDecimal(Float) 2 failed\");\r\n    // Note. NumberUtils.toScaledBigDecimal(Float.valueOf(23.515f)).equals(BigDecimal.valueOf(23.51))\r\n    // because of roundoff error. It is ok.\r\n    assertEquals(NumberUtils.toScaledBigDecimal(Float.valueOf(23.525f)), BigDecimal.valueOf(23.52), \"toScaledBigDecimal(Float) 3 failed\");\r\n    assertEquals(\"2352.00\", NumberUtils.toScaledBigDecimal(Float.valueOf(23.525f)).multiply(BigDecimal.valueOf(100)).toString(), \"toScaledBigDecimal(Float) 4 failed\");\r\n    assertEquals(NumberUtils.toScaledBigDecimal((Float) null), BigDecimal.ZERO, \"toScaledBigDecimal(Float) 5 failed\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\math\\NumberUtilsTest.java",
  "methodName" : "testToScaledBigDecimalFloatIRM",
  "sourceCode" : "/**\r\n * Test for {@link NumberUtils#toScaledBigDecimal(Float, int, RoundingMode)}.\r\n */\r\n@Test\r\nvoid testToScaledBigDecimalFloatIRM() {\r\n    assertEquals(NumberUtils.toScaledBigDecimal(Float.valueOf(123.456f), 1, RoundingMode.CEILING), BigDecimal.valueOf(123.5), \"toScaledBigDecimal(Float, int, RoundingMode) 1 failed\");\r\n    assertEquals(NumberUtils.toScaledBigDecimal(Float.valueOf(23.5159f), 3, RoundingMode.FLOOR), BigDecimal.valueOf(23.515), \"toScaledBigDecimal(Float, int, RoundingMode) 2 failed\");\r\n    // The following happens due to roundoff error. We're ok with this.\r\n    assertEquals(NumberUtils.toScaledBigDecimal(Float.valueOf(23.525f), 2, RoundingMode.HALF_UP), BigDecimal.valueOf(23.52), \"toScaledBigDecimal(Float, int, RoundingMode) 3 failed\");\r\n    assertEquals(\"23521.0000\", NumberUtils.toScaledBigDecimal(Float.valueOf(23.521f), 4, RoundingMode.HALF_EVEN).multiply(BigDecimal.valueOf(1000)).toString(), \"toScaledBigDecimal(Float, int, RoundingMode) 4 failed\");\r\n    assertEquals(NumberUtils.toScaledBigDecimal((Float) null, 2, RoundingMode.HALF_UP), BigDecimal.ZERO, \"toScaledBigDecimal(Float, int, RoundingMode) 5 failed\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\math\\NumberUtilsTest.java",
  "methodName" : "testToScaledBigDecimalString",
  "sourceCode" : "/**\r\n * Test for {@link NumberUtils#toScaledBigDecimal(Double)}.\r\n */\r\n@Test\r\nvoid testToScaledBigDecimalString() {\r\n    assertEquals(NumberUtils.toScaledBigDecimal(\"123.456\"), BigDecimal.valueOf(123.46), \"toScaledBigDecimal(String) 1 failed\");\r\n    // Test RoundingMode.HALF_EVEN default rounding.\r\n    assertEquals(NumberUtils.toScaledBigDecimal(\"23.515\"), BigDecimal.valueOf(23.52), \"toScaledBigDecimal(String) 2 failed\");\r\n    assertEquals(NumberUtils.toScaledBigDecimal(\"23.525\"), BigDecimal.valueOf(23.52), \"toScaledBigDecimal(String) 3 failed\");\r\n    assertEquals(\"2352.00\", NumberUtils.toScaledBigDecimal(\"23.525\").multiply(BigDecimal.valueOf(100)).toString(), \"toScaledBigDecimal(String) 4 failed\");\r\n    assertEquals(NumberUtils.toScaledBigDecimal((String) null), BigDecimal.ZERO, \"toScaledBigDecimal(String) 5 failed\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\math\\NumberUtilsTest.java",
  "methodName" : "testToScaledBigDecimalStringIRM",
  "sourceCode" : "/**\r\n * Test for {@link NumberUtils#toScaledBigDecimal(Double, int, RoundingMode)}.\r\n */\r\n@Test\r\nvoid testToScaledBigDecimalStringIRM() {\r\n    assertEquals(NumberUtils.toScaledBigDecimal(\"123.456\", 1, RoundingMode.CEILING), BigDecimal.valueOf(123.5), \"toScaledBigDecimal(String, int, RoundingMode) 1 failed\");\r\n    assertEquals(NumberUtils.toScaledBigDecimal(\"23.5159\", 3, RoundingMode.FLOOR), BigDecimal.valueOf(23.515), \"toScaledBigDecimal(String, int, RoundingMode) 2 failed\");\r\n    assertEquals(NumberUtils.toScaledBigDecimal(\"23.525\", 2, RoundingMode.HALF_UP), BigDecimal.valueOf(23.53), \"toScaledBigDecimal(String, int, RoundingMode) 3 failed\");\r\n    assertEquals(\"23521.0000\", NumberUtils.toScaledBigDecimal(\"23.521\", 4, RoundingMode.HALF_EVEN).multiply(BigDecimal.valueOf(1000)).toString(), \"toScaledBigDecimal(String, int, RoundingMode) 4 failed\");\r\n    assertEquals(NumberUtils.toScaledBigDecimal((String) null, 2, RoundingMode.HALF_UP), BigDecimal.ZERO, \"toScaledBigDecimal(String, int, RoundingMode) 5 failed\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\math\\NumberUtilsTest.java",
  "methodName" : "testToShortString",
  "sourceCode" : "/**\r\n * Test for {@link NumberUtils#toShort(String)}.\r\n */\r\n@Test\r\nvoid testToShortString() {\r\n    assertEquals(12345, NumberUtils.toShort(\"12345\"), \"toShort(String) 1 failed\");\r\n    assertEquals(0, NumberUtils.toShort(\"abc\"), \"toShort(String) 2 failed\");\r\n    assertEquals(0, NumberUtils.toShort(\"\"), \"toShort(empty) failed\");\r\n    assertEquals(0, NumberUtils.toShort(null), \"toShort(null) failed\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\math\\NumberUtilsTest.java",
  "methodName" : "testToShortStringI",
  "sourceCode" : "/**\r\n * Test for {@link NumberUtils#toShort(String, short)}.\r\n */\r\n@Test\r\nvoid testToShortStringI() {\r\n    assertEquals(12345, NumberUtils.toShort(\"12345\", (short) 5), \"toShort(String, short) 1 failed\");\r\n    assertEquals(5, NumberUtils.toShort(\"1234.5\", (short) 5), \"toShort(String, short) 2 failed\");\r\n    assertEquals(5, NumberUtils.toShort(\"\", (short) 5));\r\n    assertEquals(5, NumberUtils.toShort(null, (short) 5));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\mutable\\MutableBooleanTest.java",
  "methodName" : "testCompareTo",
  "sourceCode" : "@Test\r\nvoid testCompareTo() {\r\n    final MutableBoolean mutBool = new MutableBoolean(false);\r\n    assertEquals(0, mutBool.compareTo(new MutableBoolean(false)));\r\n    assertEquals(-1, mutBool.compareTo(new MutableBoolean(true)));\r\n    mutBool.setValue(true);\r\n    assertEquals(+1, mutBool.compareTo(new MutableBoolean(false)));\r\n    assertEquals(0, mutBool.compareTo(new MutableBoolean(true)));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\mutable\\MutableBooleanTest.java",
  "methodName" : "testCompareToNull",
  "sourceCode" : "@Test\r\nvoid testCompareToNull() {\r\n    final MutableBoolean mutBool = new MutableBoolean(false);\r\n    assertNullPointerException(() -> mutBool.compareTo(null));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\mutable\\MutableBooleanTest.java",
  "methodName" : "testConstructorNull",
  "sourceCode" : "@Test\r\nvoid testConstructorNull() {\r\n    assertNullPointerException(() -> new MutableBoolean(null));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\mutable\\MutableBooleanTest.java",
  "methodName" : "testConstructors",
  "sourceCode" : "@Test\r\nvoid testConstructors() {\r\n    assertFalse(new MutableBoolean().booleanValue());\r\n    assertTrue(new MutableBoolean(true).booleanValue());\r\n    assertFalse(new MutableBoolean(false).booleanValue());\r\n    assertTrue(new MutableBoolean(Boolean.TRUE).booleanValue());\r\n    assertFalse(new MutableBoolean(Boolean.FALSE).booleanValue());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\mutable\\MutableBooleanTest.java",
  "methodName" : "testEquals",
  "sourceCode" : "@Test\r\nvoid testEquals() {\r\n    final MutableBoolean mutBoolA = new MutableBoolean(false);\r\n    final MutableBoolean mutBoolB = new MutableBoolean(false);\r\n    final MutableBoolean mutBoolC = new MutableBoolean(true);\r\n    assertEquals(mutBoolA, mutBoolA);\r\n    assertEquals(mutBoolA, mutBoolB);\r\n    assertEquals(mutBoolB, mutBoolA);\r\n    assertEquals(mutBoolB, mutBoolB);\r\n    assertNotEquals(mutBoolA, mutBoolC);\r\n    assertNotEquals(mutBoolB, mutBoolC);\r\n    assertEquals(mutBoolC, mutBoolC);\r\n    assertNotEquals(null, mutBoolA);\r\n    assertNotEquals(mutBoolA, Boolean.FALSE);\r\n    assertNotEquals(\"false\", mutBoolA);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\mutable\\MutableBooleanTest.java",
  "methodName" : "testGetSet",
  "sourceCode" : "@Test\r\nvoid testGetSet() {\r\n    assertFalse(new MutableBoolean().booleanValue());\r\n    assertEquals(Boolean.FALSE, new MutableBoolean().get());\r\n    assertEquals(Boolean.FALSE, new MutableBoolean().getValue());\r\n    final MutableBoolean mutBool = new MutableBoolean(false);\r\n    assertEquals(Boolean.FALSE, mutBool.toBoolean());\r\n    assertFalse(mutBool.booleanValue());\r\n    assertTrue(mutBool.isFalse());\r\n    assertFalse(mutBool.isTrue());\r\n    mutBool.setValue(Boolean.TRUE);\r\n    assertEquals(Boolean.TRUE, mutBool.toBoolean());\r\n    assertTrue(mutBool.booleanValue());\r\n    assertFalse(mutBool.isFalse());\r\n    assertTrue(mutBool.isTrue());\r\n    mutBool.setValue(false);\r\n    assertFalse(mutBool.booleanValue());\r\n    mutBool.setValue(true);\r\n    assertTrue(mutBool.booleanValue());\r\n    mutBool.setFalse();\r\n    assertFalse(mutBool.booleanValue());\r\n    mutBool.setTrue();\r\n    assertTrue(mutBool.booleanValue());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\mutable\\MutableBooleanTest.java",
  "methodName" : "testHashCode",
  "sourceCode" : "@Test\r\nvoid testHashCode() {\r\n    final MutableBoolean mutBoolA = new MutableBoolean(false);\r\n    final MutableBoolean mutBoolB = new MutableBoolean(false);\r\n    final MutableBoolean mutBoolC = new MutableBoolean(true);\r\n    assertEquals(mutBoolA.hashCode(), mutBoolA.hashCode());\r\n    assertEquals(mutBoolA.hashCode(), mutBoolB.hashCode());\r\n    assertNotEquals(mutBoolA.hashCode(), mutBoolC.hashCode());\r\n    assertEquals(mutBoolA.hashCode(), Boolean.FALSE.hashCode());\r\n    assertEquals(mutBoolC.hashCode(), Boolean.TRUE.hashCode());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\mutable\\MutableBooleanTest.java",
  "methodName" : "testSetNull",
  "sourceCode" : "@Test\r\nvoid testSetNull() {\r\n    final MutableBoolean mutBool = new MutableBoolean(false);\r\n    assertNullPointerException(() -> mutBool.setValue(null));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\mutable\\MutableBooleanTest.java",
  "methodName" : "testToString",
  "sourceCode" : "@Test\r\nvoid testToString() {\r\n    assertEquals(Boolean.FALSE.toString(), new MutableBoolean(false).toString());\r\n    assertEquals(Boolean.TRUE.toString(), new MutableBoolean(true).toString());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\mutable\\MutableByteTest.java",
  "methodName" : "testAddAndGetValueObject",
  "sourceCode" : "@Test\r\nvoid testAddAndGetValueObject() {\r\n    final MutableByte mutableByte = new MutableByte((byte) 0);\r\n    final byte result = mutableByte.addAndGet(Byte.valueOf((byte) 1));\r\n    assertEquals((byte) 1, result);\r\n    assertEquals((byte) 1, mutableByte.byteValue());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\mutable\\MutableByteTest.java",
  "methodName" : "testAddAndGetValuePrimitive",
  "sourceCode" : "@Test\r\nvoid testAddAndGetValuePrimitive() {\r\n    final MutableByte mutableByte = new MutableByte((byte) 0);\r\n    final byte result = mutableByte.addAndGet((byte) 1);\r\n    assertEquals((byte) 1, result);\r\n    assertEquals((byte) 1, mutableByte.byteValue());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\mutable\\MutableByteTest.java",
  "methodName" : "testAddValueObject",
  "sourceCode" : "@Test\r\nvoid testAddValueObject() {\r\n    final MutableByte mutNum = new MutableByte((byte) 1);\r\n    mutNum.add(Integer.valueOf(1));\r\n    assertEquals((byte) 2, mutNum.byteValue());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\mutable\\MutableByteTest.java",
  "methodName" : "testAddValuePrimitive",
  "sourceCode" : "@Test\r\nvoid testAddValuePrimitive() {\r\n    final MutableByte mutNum = new MutableByte((byte) 1);\r\n    mutNum.add((byte) 1);\r\n    assertEquals((byte) 2, mutNum.byteValue());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\mutable\\MutableByteTest.java",
  "methodName" : "testCompareTo",
  "sourceCode" : "@Test\r\nvoid testCompareTo() {\r\n    final MutableByte mutNum = new MutableByte((byte) 0);\r\n    assertEquals((byte) 0, mutNum.compareTo(new MutableByte((byte) 0)));\r\n    assertEquals((byte) +1, mutNum.compareTo(new MutableByte((byte) -1)));\r\n    assertEquals((byte) -1, mutNum.compareTo(new MutableByte((byte) 1)));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\mutable\\MutableByteTest.java",
  "methodName" : "testCompareToNull",
  "sourceCode" : "@Test\r\nvoid testCompareToNull() {\r\n    final MutableByte mutNum = new MutableByte((byte) 0);\r\n    assertNullPointerException(() -> mutNum.compareTo(null));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\mutable\\MutableByteTest.java",
  "methodName" : "testConstructorNull",
  "sourceCode" : "@Test\r\nvoid testConstructorNull() {\r\n    assertNullPointerException(() -> new MutableByte((Number) null));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\mutable\\MutableByteTest.java",
  "methodName" : "testConstructors",
  "sourceCode" : "@Test\r\nvoid testConstructors() {\r\n    assertEquals((byte) 0, new MutableByte().byteValue());\r\n    assertEquals((byte) 1, new MutableByte((byte) 1).byteValue());\r\n    assertEquals((byte) 2, new MutableByte(Byte.valueOf((byte) 2)).byteValue());\r\n    assertEquals((byte) 3, new MutableByte(new MutableByte((byte) 3)).byteValue());\r\n    assertEquals((byte) 2, new MutableByte(\"2\").byteValue());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\mutable\\MutableByteTest.java",
  "methodName" : "testDecrement",
  "sourceCode" : "@Test\r\nvoid testDecrement() {\r\n    final MutableByte mutNum = new MutableByte((byte) 1);\r\n    mutNum.decrement();\r\n    assertEquals(0, mutNum.intValue());\r\n    assertEquals(0L, mutNum.longValue());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\mutable\\MutableByteTest.java",
  "methodName" : "testDecrementAndGet",
  "sourceCode" : "@Test\r\nvoid testDecrementAndGet() {\r\n    final MutableByte mutNum = new MutableByte((byte) 1);\r\n    final byte result = mutNum.decrementAndGet();\r\n    assertEquals(0, result);\r\n    assertEquals(0, mutNum.intValue());\r\n    assertEquals(0L, mutNum.longValue());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\mutable\\MutableByteTest.java",
  "methodName" : "testEquals",
  "sourceCode" : "@Test\r\nvoid testEquals() {\r\n    final MutableByte mutNumA = new MutableByte((byte) 0);\r\n    final MutableByte mutNumB = new MutableByte((byte) 0);\r\n    final MutableByte mutNumC = new MutableByte((byte) 1);\r\n    assertEquals(mutNumA, mutNumA);\r\n    assertEquals(mutNumA, mutNumB);\r\n    assertEquals(mutNumB, mutNumA);\r\n    assertEquals(mutNumB, mutNumB);\r\n    assertNotEquals(mutNumA, mutNumC);\r\n    assertNotEquals(mutNumB, mutNumC);\r\n    assertEquals(mutNumC, mutNumC);\r\n    assertNotEquals(null, mutNumA);\r\n    assertNotEquals(mutNumA, Byte.valueOf((byte) 0));\r\n    assertNotEquals(\"0\", mutNumA);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\mutable\\MutableByteTest.java",
  "methodName" : "testGetAndAddValueObject",
  "sourceCode" : "@Test\r\nvoid testGetAndAddValueObject() {\r\n    final MutableByte mutableByte = new MutableByte((byte) 0);\r\n    final byte result = mutableByte.getAndAdd(Byte.valueOf((byte) 1));\r\n    assertEquals((byte) 0, result);\r\n    assertEquals((byte) 1, mutableByte.byteValue());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\mutable\\MutableByteTest.java",
  "methodName" : "testGetAndAddValuePrimitive",
  "sourceCode" : "@Test\r\nvoid testGetAndAddValuePrimitive() {\r\n    final MutableByte mutableByte = new MutableByte((byte) 0);\r\n    final byte result = mutableByte.getAndAdd((byte) 1);\r\n    assertEquals((byte) 0, result);\r\n    assertEquals((byte) 1, mutableByte.byteValue());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\mutable\\MutableByteTest.java",
  "methodName" : "testGetAndDecrement",
  "sourceCode" : "@Test\r\nvoid testGetAndDecrement() {\r\n    final MutableByte mutNum = new MutableByte((byte) 1);\r\n    final byte result = mutNum.getAndDecrement();\r\n    assertEquals(1, result);\r\n    assertEquals(0, mutNum.intValue());\r\n    assertEquals(0L, mutNum.longValue());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\mutable\\MutableByteTest.java",
  "methodName" : "testGetAndIncrement",
  "sourceCode" : "@Test\r\nvoid testGetAndIncrement() {\r\n    final MutableByte mutNum = new MutableByte((byte) 1);\r\n    final byte result = mutNum.getAndIncrement();\r\n    assertEquals(1, result);\r\n    assertEquals(2, mutNum.intValue());\r\n    assertEquals(2L, mutNum.longValue());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\mutable\\MutableByteTest.java",
  "methodName" : "testGetSet",
  "sourceCode" : "@Test\r\nvoid testGetSet() {\r\n    final MutableByte mutNum = new MutableByte((byte) 0);\r\n    assertEquals((byte) 0, new MutableByte().byteValue());\r\n    assertEquals(Byte.valueOf((byte) 0), new MutableByte().get());\r\n    assertEquals(Byte.valueOf((byte) 0), new MutableByte().getValue());\r\n    mutNum.setValue((byte) 1);\r\n    assertEquals((byte) 1, mutNum.byteValue());\r\n    assertEquals(Byte.valueOf((byte) 1), mutNum.get());\r\n    assertEquals(Byte.valueOf((byte) 1), mutNum.getValue());\r\n    mutNum.setValue(Byte.valueOf((byte) 2));\r\n    assertEquals((byte) 2, mutNum.byteValue());\r\n    assertEquals(Byte.valueOf((byte) 2), mutNum.get());\r\n    assertEquals(Byte.valueOf((byte) 2), mutNum.getValue());\r\n    mutNum.setValue(new MutableByte((byte) 3));\r\n    assertEquals((byte) 3, mutNum.byteValue());\r\n    assertEquals(Byte.valueOf((byte) 3), mutNum.get());\r\n    assertEquals(Byte.valueOf((byte) 3), mutNum.getValue());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\mutable\\MutableByteTest.java",
  "methodName" : "testHashCode",
  "sourceCode" : "@Test\r\nvoid testHashCode() {\r\n    final MutableByte mutNumA = new MutableByte((byte) 0);\r\n    final MutableByte mutNumB = new MutableByte((byte) 0);\r\n    final MutableByte mutNumC = new MutableByte((byte) 1);\r\n    assertEquals(mutNumA.hashCode(), mutNumA.hashCode());\r\n    assertEquals(mutNumA.hashCode(), mutNumB.hashCode());\r\n    assertNotEquals(mutNumA.hashCode(), mutNumC.hashCode());\r\n    assertEquals(mutNumA.hashCode(), Byte.valueOf((byte) 0).hashCode());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\mutable\\MutableByteTest.java",
  "methodName" : "testIncrement",
  "sourceCode" : "@Test\r\nvoid testIncrement() {\r\n    final MutableByte mutNum = new MutableByte((byte) 1);\r\n    mutNum.increment();\r\n    assertEquals(2, mutNum.intValue());\r\n    assertEquals(2L, mutNum.longValue());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\mutable\\MutableByteTest.java",
  "methodName" : "testIncrementAndGet",
  "sourceCode" : "@Test\r\nvoid testIncrementAndGet() {\r\n    final MutableByte mutNum = new MutableByte((byte) 1);\r\n    final byte result = mutNum.incrementAndGet();\r\n    assertEquals(2, result);\r\n    assertEquals(2, mutNum.intValue());\r\n    assertEquals(2L, mutNum.longValue());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\mutable\\MutableByteTest.java",
  "methodName" : "testPrimitiveValues",
  "sourceCode" : "@Test\r\nvoid testPrimitiveValues() {\r\n    final MutableByte mutNum = new MutableByte((byte) 1);\r\n    assertEquals(1.0F, mutNum.floatValue());\r\n    assertEquals(1.0, mutNum.doubleValue());\r\n    assertEquals((byte) 1, mutNum.byteValue());\r\n    assertEquals((short) 1, mutNum.shortValue());\r\n    assertEquals(1, mutNum.intValue());\r\n    assertEquals(1L, mutNum.longValue());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\mutable\\MutableByteTest.java",
  "methodName" : "testSetNull",
  "sourceCode" : "@Test\r\nvoid testSetNull() {\r\n    final MutableByte mutNum = new MutableByte((byte) 0);\r\n    assertNullPointerException(() -> mutNum.setValue(null));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\mutable\\MutableByteTest.java",
  "methodName" : "testSubtractValueObject",
  "sourceCode" : "@Test\r\nvoid testSubtractValueObject() {\r\n    final MutableByte mutNum = new MutableByte((byte) 1);\r\n    mutNum.subtract(Integer.valueOf(1));\r\n    assertEquals((byte) 0, mutNum.byteValue());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\mutable\\MutableByteTest.java",
  "methodName" : "testSubtractValuePrimitive",
  "sourceCode" : "@Test\r\nvoid testSubtractValuePrimitive() {\r\n    final MutableByte mutNum = new MutableByte((byte) 1);\r\n    mutNum.subtract((byte) 1);\r\n    assertEquals((byte) 0, mutNum.byteValue());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\mutable\\MutableByteTest.java",
  "methodName" : "testToByte",
  "sourceCode" : "@Test\r\nvoid testToByte() {\r\n    assertEquals(Byte.valueOf((byte) 0), new MutableByte((byte) 0).toByte());\r\n    assertEquals(Byte.valueOf((byte) 123), new MutableByte((byte) 123).toByte());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\mutable\\MutableByteTest.java",
  "methodName" : "testToString",
  "sourceCode" : "@Test\r\nvoid testToString() {\r\n    assertEquals(\"0\", new MutableByte((byte) 0).toString());\r\n    assertEquals(\"10\", new MutableByte((byte) 10).toString());\r\n    assertEquals(\"-123\", new MutableByte((byte) -123).toString());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\mutable\\MutableDoubleTest.java",
  "methodName" : "testAddAndGetValueObject",
  "sourceCode" : "@Test\r\nvoid testAddAndGetValueObject() {\r\n    final MutableDouble mutableDouble = new MutableDouble(7.5d);\r\n    final double result = mutableDouble.addAndGet(Double.valueOf(-2.5d));\r\n    assertEquals(5d, result, 0.01d);\r\n    assertEquals(5d, mutableDouble.doubleValue(), 0.01d);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\mutable\\MutableDoubleTest.java",
  "methodName" : "testAddAndGetValuePrimitive",
  "sourceCode" : "@Test\r\nvoid testAddAndGetValuePrimitive() {\r\n    final MutableDouble mutableDouble = new MutableDouble(10.5d);\r\n    final double result = mutableDouble.addAndGet(-0.5d);\r\n    assertEquals(10d, result, 0.01d);\r\n    assertEquals(10d, mutableDouble.doubleValue(), 0.01d);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\mutable\\MutableDoubleTest.java",
  "methodName" : "testAddValueObject",
  "sourceCode" : "@Test\r\nvoid testAddValueObject() {\r\n    final MutableDouble mutNum = new MutableDouble(1);\r\n    mutNum.add(Double.valueOf(1.1d));\r\n    assertEquals(2.1d, mutNum.doubleValue(), 0.01d);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\mutable\\MutableDoubleTest.java",
  "methodName" : "testAddValuePrimitive",
  "sourceCode" : "@Test\r\nvoid testAddValuePrimitive() {\r\n    final MutableDouble mutNum = new MutableDouble(1);\r\n    mutNum.add(1.1d);\r\n    assertEquals(2.1d, mutNum.doubleValue(), 0.01d);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\mutable\\MutableDoubleTest.java",
  "methodName" : "testCompareTo",
  "sourceCode" : "@Test\r\nvoid testCompareTo() {\r\n    final MutableDouble mutNum = new MutableDouble(0d);\r\n    assertEquals(0, mutNum.compareTo(new MutableDouble(0d)));\r\n    assertEquals(+1, mutNum.compareTo(new MutableDouble(-1d)));\r\n    assertEquals(-1, mutNum.compareTo(new MutableDouble(1d)));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\mutable\\MutableDoubleTest.java",
  "methodName" : "testCompareToNull",
  "sourceCode" : "@Test\r\nvoid testCompareToNull() {\r\n    final MutableDouble mutNum = new MutableDouble(0d);\r\n    assertNullPointerException(() -> mutNum.compareTo(null));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\mutable\\MutableDoubleTest.java",
  "methodName" : "testConstructorNull",
  "sourceCode" : "@Test\r\nvoid testConstructorNull() {\r\n    assertNullPointerException(() -> new MutableDouble((Number) null));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\mutable\\MutableDoubleTest.java",
  "methodName" : "testConstructors",
  "sourceCode" : "@Test\r\nvoid testConstructors() {\r\n    assertEquals(0d, new MutableDouble().doubleValue(), 0.0001d);\r\n    assertEquals(1d, new MutableDouble(1d).doubleValue(), 0.0001d);\r\n    assertEquals(2d, new MutableDouble(Double.valueOf(2d)).doubleValue(), 0.0001d);\r\n    assertEquals(3d, new MutableDouble(new MutableDouble(3d)).doubleValue(), 0.0001d);\r\n    assertEquals(2d, new MutableDouble(\"2.0\").doubleValue(), 0.0001d);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\mutable\\MutableDoubleTest.java",
  "methodName" : "testDecrement",
  "sourceCode" : "@Test\r\nvoid testDecrement() {\r\n    final MutableDouble mutNum = new MutableDouble(1);\r\n    mutNum.decrement();\r\n    assertEquals(0, mutNum.intValue());\r\n    assertEquals(0L, mutNum.longValue());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\mutable\\MutableDoubleTest.java",
  "methodName" : "testDecrementAndGet",
  "sourceCode" : "@Test\r\nvoid testDecrementAndGet() {\r\n    final MutableDouble mutNum = new MutableDouble(1d);\r\n    final double result = mutNum.decrementAndGet();\r\n    assertEquals(0d, result, 0.01d);\r\n    assertEquals(0, mutNum.intValue());\r\n    assertEquals(0L, mutNum.longValue());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\mutable\\MutableDoubleTest.java",
  "methodName" : "testEquals",
  "sourceCode" : "@Test\r\nvoid testEquals() {\r\n    final MutableDouble mutNumA = new MutableDouble(0d);\r\n    final MutableDouble mutNumB = new MutableDouble(0d);\r\n    final MutableDouble mutNumC = new MutableDouble(1d);\r\n    assertEquals(mutNumA, mutNumA);\r\n    assertEquals(mutNumA, mutNumB);\r\n    assertEquals(mutNumB, mutNumA);\r\n    assertEquals(mutNumB, mutNumB);\r\n    assertNotEquals(mutNumA, mutNumC);\r\n    assertNotEquals(mutNumB, mutNumC);\r\n    assertEquals(mutNumC, mutNumC);\r\n    assertNotEquals(null, mutNumA);\r\n    assertNotEquals(mutNumA, Double.valueOf(0d));\r\n    assertNotEquals(\"0\", mutNumA);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\mutable\\MutableDoubleTest.java",
  "methodName" : "testGetAndAddValueObject",
  "sourceCode" : "@Test\r\nvoid testGetAndAddValueObject() {\r\n    final MutableDouble mutableDouble = new MutableDouble(0.5d);\r\n    final double result = mutableDouble.getAndAdd(Double.valueOf(2d));\r\n    assertEquals(0.5d, result, 0.01d);\r\n    assertEquals(2.5d, mutableDouble.doubleValue(), 0.01d);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\mutable\\MutableDoubleTest.java",
  "methodName" : "testGetAndAddValuePrimitive",
  "sourceCode" : "@Test\r\nvoid testGetAndAddValuePrimitive() {\r\n    final MutableDouble mutableDouble = new MutableDouble(0.5d);\r\n    final double result = mutableDouble.getAndAdd(1d);\r\n    assertEquals(0.5d, result, 0.01d);\r\n    assertEquals(1.5d, mutableDouble.doubleValue(), 0.01d);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\mutable\\MutableDoubleTest.java",
  "methodName" : "testGetAndDecrement",
  "sourceCode" : "@Test\r\nvoid testGetAndDecrement() {\r\n    final MutableDouble mutNum = new MutableDouble(1d);\r\n    final double result = mutNum.getAndDecrement();\r\n    assertEquals(1d, result, 0.01d);\r\n    assertEquals(0, mutNum.intValue());\r\n    assertEquals(0L, mutNum.longValue());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\mutable\\MutableDoubleTest.java",
  "methodName" : "testGetAndIncrement",
  "sourceCode" : "@Test\r\nvoid testGetAndIncrement() {\r\n    final MutableDouble mutNum = new MutableDouble(1d);\r\n    final double result = mutNum.getAndIncrement();\r\n    assertEquals(1d, result, 0.01d);\r\n    assertEquals(2, mutNum.intValue());\r\n    assertEquals(2L, mutNum.longValue());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\mutable\\MutableDoubleTest.java",
  "methodName" : "testGetSet",
  "sourceCode" : "@Test\r\nvoid testGetSet() {\r\n    final MutableDouble mutNum = new MutableDouble(0d);\r\n    assertEquals(0d, new MutableDouble().doubleValue(), 0.0001d);\r\n    assertEquals(Double.valueOf(0), new MutableDouble().get());\r\n    assertEquals(Double.valueOf(0), new MutableDouble().getValue());\r\n    mutNum.setValue(1);\r\n    assertEquals(1d, mutNum.doubleValue(), 0.0001d);\r\n    assertEquals(Double.valueOf(1d), mutNum.get());\r\n    assertEquals(Double.valueOf(1d), mutNum.getValue());\r\n    mutNum.setValue(Double.valueOf(2d));\r\n    assertEquals(2d, mutNum.doubleValue(), 0.0001d);\r\n    assertEquals(Double.valueOf(2d), mutNum.get());\r\n    assertEquals(Double.valueOf(2d), mutNum.getValue());\r\n    mutNum.setValue(new MutableDouble(3d));\r\n    assertEquals(3d, mutNum.doubleValue(), 0.0001d);\r\n    assertEquals(Double.valueOf(3d), mutNum.get());\r\n    assertEquals(Double.valueOf(3d), mutNum.getValue());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\mutable\\MutableDoubleTest.java",
  "methodName" : "testHashCode",
  "sourceCode" : "@Test\r\nvoid testHashCode() {\r\n    final MutableDouble mutNumA = new MutableDouble(0d);\r\n    final MutableDouble mutNumB = new MutableDouble(0d);\r\n    final MutableDouble mutNumC = new MutableDouble(1d);\r\n    assertEquals(mutNumA.hashCode(), mutNumA.hashCode());\r\n    assertEquals(mutNumA.hashCode(), mutNumB.hashCode());\r\n    assertNotEquals(mutNumA.hashCode(), mutNumC.hashCode());\r\n    assertEquals(mutNumA.hashCode(), Double.valueOf(0d).hashCode());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\mutable\\MutableDoubleTest.java",
  "methodName" : "testIncrement",
  "sourceCode" : "@Test\r\nvoid testIncrement() {\r\n    final MutableDouble mutNum = new MutableDouble(1);\r\n    mutNum.increment();\r\n    assertEquals(2, mutNum.intValue());\r\n    assertEquals(2L, mutNum.longValue());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\mutable\\MutableDoubleTest.java",
  "methodName" : "testIncrementAndGet",
  "sourceCode" : "@Test\r\nvoid testIncrementAndGet() {\r\n    final MutableDouble mutNum = new MutableDouble(1d);\r\n    final double result = mutNum.incrementAndGet();\r\n    assertEquals(2d, result, 0.01d);\r\n    assertEquals(2, mutNum.intValue());\r\n    assertEquals(2L, mutNum.longValue());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\mutable\\MutableDoubleTest.java",
  "methodName" : "testNanInfinite",
  "sourceCode" : "@Test\r\nvoid testNanInfinite() {\r\n    MutableDouble mutNum = new MutableDouble(Double.NaN);\r\n    assertTrue(mutNum.isNaN());\r\n    mutNum = new MutableDouble(Double.POSITIVE_INFINITY);\r\n    assertTrue(mutNum.isInfinite());\r\n    mutNum = new MutableDouble(Double.NEGATIVE_INFINITY);\r\n    assertTrue(mutNum.isInfinite());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\mutable\\MutableDoubleTest.java",
  "methodName" : "testPrimitiveValues",
  "sourceCode" : "@Test\r\nvoid testPrimitiveValues() {\r\n    final MutableDouble mutNum = new MutableDouble(1.7);\r\n    assertEquals(1.7F, mutNum.floatValue());\r\n    assertEquals(1.7, mutNum.doubleValue());\r\n    assertEquals((byte) 1, mutNum.byteValue());\r\n    assertEquals((short) 1, mutNum.shortValue());\r\n    assertEquals(1, mutNum.intValue());\r\n    assertEquals(1L, mutNum.longValue());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\mutable\\MutableDoubleTest.java",
  "methodName" : "testSetNull",
  "sourceCode" : "@Test\r\nvoid testSetNull() {\r\n    final MutableDouble mutNum = new MutableDouble(0d);\r\n    assertNullPointerException(() -> mutNum.setValue(null));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\mutable\\MutableDoubleTest.java",
  "methodName" : "testSubtractValueObject",
  "sourceCode" : "@Test\r\nvoid testSubtractValueObject() {\r\n    final MutableDouble mutNum = new MutableDouble(1);\r\n    mutNum.subtract(Double.valueOf(0.9d));\r\n    assertEquals(0.1d, mutNum.doubleValue(), 0.01d);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\mutable\\MutableDoubleTest.java",
  "methodName" : "testSubtractValuePrimitive",
  "sourceCode" : "@Test\r\nvoid testSubtractValuePrimitive() {\r\n    final MutableDouble mutNum = new MutableDouble(1);\r\n    mutNum.subtract(0.9d);\r\n    assertEquals(0.1d, mutNum.doubleValue(), 0.01d);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\mutable\\MutableDoubleTest.java",
  "methodName" : "testToDouble",
  "sourceCode" : "@Test\r\nvoid testToDouble() {\r\n    assertEquals(Double.valueOf(0d), new MutableDouble(0d).toDouble());\r\n    assertEquals(Double.valueOf(12.3d), new MutableDouble(12.3d).toDouble());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\mutable\\MutableDoubleTest.java",
  "methodName" : "testToString",
  "sourceCode" : "@Test\r\nvoid testToString() {\r\n    assertEquals(\"0.0\", new MutableDouble(0d).toString());\r\n    assertEquals(\"10.0\", new MutableDouble(10d).toString());\r\n    assertEquals(\"-123.0\", new MutableDouble(-123d).toString());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\mutable\\MutableFloatTest.java",
  "methodName" : "testAddAndGetValueObject",
  "sourceCode" : "@Test\r\nvoid testAddAndGetValueObject() {\r\n    final MutableFloat mutableFloat = new MutableFloat(5f);\r\n    final float result = mutableFloat.addAndGet(Float.valueOf(2.5f));\r\n    assertEquals(7.5f, result, 0.01f);\r\n    assertEquals(7.5f, mutableFloat.floatValue(), 0.01f);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\mutable\\MutableFloatTest.java",
  "methodName" : "testAddAndGetValuePrimitive",
  "sourceCode" : "@Test\r\nvoid testAddAndGetValuePrimitive() {\r\n    final MutableFloat mutableFloat = new MutableFloat(0.5f);\r\n    final float result = mutableFloat.addAndGet(1f);\r\n    assertEquals(1.5f, result, 0.01f);\r\n    assertEquals(1.5f, mutableFloat.floatValue(), 0.01f);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\mutable\\MutableFloatTest.java",
  "methodName" : "testAddValueObject",
  "sourceCode" : "@Test\r\nvoid testAddValueObject() {\r\n    final MutableFloat mutNum = new MutableFloat(1);\r\n    mutNum.add(Float.valueOf(1.1f));\r\n    assertEquals(2.1f, mutNum.floatValue(), 0.01f);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\mutable\\MutableFloatTest.java",
  "methodName" : "testAddValuePrimitive",
  "sourceCode" : "@Test\r\nvoid testAddValuePrimitive() {\r\n    final MutableFloat mutNum = new MutableFloat(1);\r\n    mutNum.add(1.1f);\r\n    assertEquals(2.1f, mutNum.floatValue(), 0.01f);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\mutable\\MutableFloatTest.java",
  "methodName" : "testCompareTo",
  "sourceCode" : "@Test\r\nvoid testCompareTo() {\r\n    final MutableFloat mutNum = new MutableFloat(0f);\r\n    assertEquals(0, mutNum.compareTo(new MutableFloat(0f)));\r\n    assertEquals(+1, mutNum.compareTo(new MutableFloat(-1f)));\r\n    assertEquals(-1, mutNum.compareTo(new MutableFloat(1f)));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\mutable\\MutableFloatTest.java",
  "methodName" : "testCompareToNull",
  "sourceCode" : "@Test\r\nvoid testCompareToNull() {\r\n    final MutableFloat mutNum = new MutableFloat(0f);\r\n    assertNullPointerException(() -> mutNum.compareTo(null));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\mutable\\MutableFloatTest.java",
  "methodName" : "testConstructorNull",
  "sourceCode" : "@Test\r\nvoid testConstructorNull() {\r\n    assertNullPointerException(() -> new MutableFloat((Number) null));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\mutable\\MutableFloatTest.java",
  "methodName" : "testConstructors",
  "sourceCode" : "@Test\r\nvoid testConstructors() {\r\n    assertEquals(0f, new MutableFloat().floatValue(), 0.0001f);\r\n    assertEquals(1f, new MutableFloat(1f).floatValue(), 0.0001f);\r\n    assertEquals(2f, new MutableFloat(Float.valueOf(2f)).floatValue(), 0.0001f);\r\n    assertEquals(3f, new MutableFloat(new MutableFloat(3f)).floatValue(), 0.0001f);\r\n    assertEquals(2f, new MutableFloat(\"2.0\").floatValue(), 0.0001f);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\mutable\\MutableFloatTest.java",
  "methodName" : "testDecrement",
  "sourceCode" : "@Test\r\nvoid testDecrement() {\r\n    final MutableFloat mutNum = new MutableFloat(1);\r\n    mutNum.decrement();\r\n    assertEquals(0, mutNum.intValue());\r\n    assertEquals(0L, mutNum.longValue());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\mutable\\MutableFloatTest.java",
  "methodName" : "testDecrementAndGet",
  "sourceCode" : "@Test\r\nvoid testDecrementAndGet() {\r\n    final MutableFloat mutNum = new MutableFloat(1f);\r\n    final float result = mutNum.decrementAndGet();\r\n    assertEquals(0f, result, 0.01f);\r\n    assertEquals(0, mutNum.intValue());\r\n    assertEquals(0L, mutNum.longValue());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\mutable\\MutableFloatTest.java",
  "methodName" : "testEquals",
  "sourceCode" : "@Test\r\nvoid testEquals() {\r\n    final MutableFloat mutNumA = new MutableFloat(0f);\r\n    final MutableFloat mutNumB = new MutableFloat(0f);\r\n    final MutableFloat mutNumC = new MutableFloat(1f);\r\n    assertEquals(mutNumA, mutNumA);\r\n    assertEquals(mutNumA, mutNumB);\r\n    assertEquals(mutNumB, mutNumA);\r\n    assertEquals(mutNumB, mutNumB);\r\n    assertNotEquals(mutNumA, mutNumC);\r\n    assertNotEquals(mutNumB, mutNumC);\r\n    assertEquals(mutNumC, mutNumC);\r\n    assertNotEquals(null, mutNumA);\r\n    assertNotEquals(mutNumA, Float.valueOf(0f));\r\n    assertNotEquals(\"0\", mutNumA);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\mutable\\MutableFloatTest.java",
  "methodName" : "testGetAndAddValueObject",
  "sourceCode" : "@Test\r\nvoid testGetAndAddValueObject() {\r\n    final MutableFloat mutableFloat = new MutableFloat(7.75f);\r\n    final float result = mutableFloat.getAndAdd(Float.valueOf(2.25f));\r\n    assertEquals(7.75f, result, 0.01f);\r\n    assertEquals(10f, mutableFloat.floatValue(), 0.01f);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\mutable\\MutableFloatTest.java",
  "methodName" : "testGetAndAddValuePrimitive",
  "sourceCode" : "@Test\r\nvoid testGetAndAddValuePrimitive() {\r\n    final MutableFloat mutableFloat = new MutableFloat(1.25f);\r\n    final float result = mutableFloat.getAndAdd(0.75f);\r\n    assertEquals(1.25f, result, 0.01f);\r\n    assertEquals(2f, mutableFloat.floatValue(), 0.01f);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\mutable\\MutableFloatTest.java",
  "methodName" : "testGetAndDecrement",
  "sourceCode" : "@Test\r\nvoid testGetAndDecrement() {\r\n    final MutableFloat mutNum = new MutableFloat(1f);\r\n    final float result = mutNum.getAndDecrement();\r\n    assertEquals(1f, result, 0.01f);\r\n    assertEquals(0, mutNum.intValue());\r\n    assertEquals(0L, mutNum.longValue());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\mutable\\MutableFloatTest.java",
  "methodName" : "testGetAndIncrement",
  "sourceCode" : "@Test\r\nvoid testGetAndIncrement() {\r\n    final MutableFloat mutNum = new MutableFloat(1f);\r\n    final float result = mutNum.getAndIncrement();\r\n    assertEquals(1f, result, 0.01f);\r\n    assertEquals(2, mutNum.intValue());\r\n    assertEquals(2L, mutNum.longValue());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\mutable\\MutableFloatTest.java",
  "methodName" : "testGetSet",
  "sourceCode" : "@Test\r\nvoid testGetSet() {\r\n    final MutableFloat mutNum = new MutableFloat(0f);\r\n    assertEquals(0f, new MutableFloat().floatValue(), 0.0001f);\r\n    assertEquals(Float.valueOf(0), new MutableFloat().get());\r\n    assertEquals(Float.valueOf(0), new MutableFloat().getValue());\r\n    mutNum.setValue(1);\r\n    assertEquals(1f, mutNum.floatValue(), 0.0001f);\r\n    assertEquals(Float.valueOf(1f), mutNum.get());\r\n    assertEquals(Float.valueOf(1f), mutNum.getValue());\r\n    mutNum.setValue(Float.valueOf(2f));\r\n    assertEquals(2f, mutNum.floatValue(), 0.0001f);\r\n    assertEquals(Float.valueOf(2f), mutNum.get());\r\n    assertEquals(Float.valueOf(2f), mutNum.getValue());\r\n    mutNum.setValue(new MutableFloat(3f));\r\n    assertEquals(3f, mutNum.floatValue(), 0.0001f);\r\n    assertEquals(Float.valueOf(3f), mutNum.get());\r\n    assertEquals(Float.valueOf(3f), mutNum.getValue());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\mutable\\MutableFloatTest.java",
  "methodName" : "testHashCode",
  "sourceCode" : "@Test\r\nvoid testHashCode() {\r\n    final MutableFloat mutNumA = new MutableFloat(0f);\r\n    final MutableFloat mutNumB = new MutableFloat(0f);\r\n    final MutableFloat mutNumC = new MutableFloat(1f);\r\n    assertEquals(mutNumA.hashCode(), mutNumA.hashCode());\r\n    assertEquals(mutNumA.hashCode(), mutNumB.hashCode());\r\n    assertNotEquals(mutNumA.hashCode(), mutNumC.hashCode());\r\n    assertEquals(mutNumA.hashCode(), Float.valueOf(0f).hashCode());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\mutable\\MutableFloatTest.java",
  "methodName" : "testIncrement",
  "sourceCode" : "@Test\r\nvoid testIncrement() {\r\n    final MutableFloat mutNum = new MutableFloat(1);\r\n    mutNum.increment();\r\n    assertEquals(2, mutNum.intValue());\r\n    assertEquals(2L, mutNum.longValue());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\mutable\\MutableFloatTest.java",
  "methodName" : "testIncrementAndGet",
  "sourceCode" : "@Test\r\nvoid testIncrementAndGet() {\r\n    final MutableFloat mutNum = new MutableFloat(1f);\r\n    final float result = mutNum.incrementAndGet();\r\n    assertEquals(2f, result, 0.01f);\r\n    assertEquals(2, mutNum.intValue());\r\n    assertEquals(2L, mutNum.longValue());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\mutable\\MutableFloatTest.java",
  "methodName" : "testNanInfinite",
  "sourceCode" : "@Test\r\nvoid testNanInfinite() {\r\n    MutableFloat mutNum = new MutableFloat(Float.NaN);\r\n    assertTrue(mutNum.isNaN());\r\n    mutNum = new MutableFloat(Float.POSITIVE_INFINITY);\r\n    assertTrue(mutNum.isInfinite());\r\n    mutNum = new MutableFloat(Float.NEGATIVE_INFINITY);\r\n    assertTrue(mutNum.isInfinite());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\mutable\\MutableFloatTest.java",
  "methodName" : "testPrimitiveValues",
  "sourceCode" : "@Test\r\nvoid testPrimitiveValues() {\r\n    final MutableFloat mutNum = new MutableFloat(1.7F);\r\n    assertEquals(1, mutNum.intValue());\r\n    assertEquals(1.7, mutNum.doubleValue(), 0.00001);\r\n    assertEquals((byte) 1, mutNum.byteValue());\r\n    assertEquals((short) 1, mutNum.shortValue());\r\n    assertEquals(1, mutNum.intValue());\r\n    assertEquals(1L, mutNum.longValue());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\mutable\\MutableFloatTest.java",
  "methodName" : "testSetNull",
  "sourceCode" : "@Test\r\nvoid testSetNull() {\r\n    final MutableFloat mutNum = new MutableFloat(0f);\r\n    assertNullPointerException(() -> mutNum.setValue(null));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\mutable\\MutableFloatTest.java",
  "methodName" : "testSubtractValueObject",
  "sourceCode" : "@Test\r\nvoid testSubtractValueObject() {\r\n    final MutableFloat mutNum = new MutableFloat(1);\r\n    mutNum.subtract(Float.valueOf(0.9f));\r\n    assertEquals(0.1f, mutNum.floatValue(), 0.01f);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\mutable\\MutableFloatTest.java",
  "methodName" : "testSubtractValuePrimitive",
  "sourceCode" : "@Test\r\nvoid testSubtractValuePrimitive() {\r\n    final MutableFloat mutNum = new MutableFloat(1);\r\n    mutNum.subtract(0.9f);\r\n    assertEquals(0.1f, mutNum.floatValue(), 0.01f);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\mutable\\MutableFloatTest.java",
  "methodName" : "testToFloat",
  "sourceCode" : "@Test\r\nvoid testToFloat() {\r\n    assertEquals(Float.valueOf(0f), new MutableFloat(0f).toFloat());\r\n    assertEquals(Float.valueOf(12.3f), new MutableFloat(12.3f).toFloat());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\mutable\\MutableFloatTest.java",
  "methodName" : "testToString",
  "sourceCode" : "@Test\r\nvoid testToString() {\r\n    assertEquals(\"0.0\", new MutableFloat(0f).toString());\r\n    assertEquals(\"10.0\", new MutableFloat(10f).toString());\r\n    assertEquals(\"-123.0\", new MutableFloat(-123f).toString());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\mutable\\MutableIntTest.java",
  "methodName" : "testAddAndGetValueObject",
  "sourceCode" : "@Test\r\nvoid testAddAndGetValueObject() {\r\n    final MutableInt mutableInteger = new MutableInt(0);\r\n    final int result = mutableInteger.addAndGet(Integer.valueOf(1));\r\n    assertEquals(1, result);\r\n    assertEquals(1, mutableInteger.intValue());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\mutable\\MutableIntTest.java",
  "methodName" : "testAddAndGetValuePrimitive",
  "sourceCode" : "@Test\r\nvoid testAddAndGetValuePrimitive() {\r\n    final MutableInt mutableInteger = new MutableInt(0);\r\n    final int result = mutableInteger.addAndGet(1);\r\n    assertEquals(1, result);\r\n    assertEquals(1, mutableInteger.intValue());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\mutable\\MutableIntTest.java",
  "methodName" : "testAddValueObject",
  "sourceCode" : "@Test\r\nvoid testAddValueObject() {\r\n    final MutableInt mutNum = new MutableInt(1);\r\n    mutNum.add(Integer.valueOf(1));\r\n    assertEquals(2, mutNum.intValue());\r\n    assertEquals(2L, mutNum.longValue());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\mutable\\MutableIntTest.java",
  "methodName" : "testAddValuePrimitive",
  "sourceCode" : "@Test\r\nvoid testAddValuePrimitive() {\r\n    final MutableInt mutNum = new MutableInt(1);\r\n    mutNum.add(1);\r\n    assertEquals(2, mutNum.intValue());\r\n    assertEquals(2L, mutNum.longValue());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\mutable\\MutableIntTest.java",
  "methodName" : "testCompareTo",
  "sourceCode" : "@Test\r\nvoid testCompareTo() {\r\n    final MutableInt mutNum = new MutableInt(0);\r\n    assertEquals(0, mutNum.compareTo(new MutableInt(0)));\r\n    assertEquals(+1, mutNum.compareTo(new MutableInt(-1)));\r\n    assertEquals(-1, mutNum.compareTo(new MutableInt(1)));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\mutable\\MutableIntTest.java",
  "methodName" : "testCompareToNull",
  "sourceCode" : "@Test\r\nvoid testCompareToNull() {\r\n    final MutableInt mutNum = new MutableInt(0);\r\n    assertNullPointerException(() -> mutNum.compareTo(null));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\mutable\\MutableIntTest.java",
  "methodName" : "testConstructorNull",
  "sourceCode" : "@Test\r\nvoid testConstructorNull() {\r\n    assertNullPointerException(() -> new MutableInt((Number) null));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\mutable\\MutableIntTest.java",
  "methodName" : "testConstructors",
  "sourceCode" : "@Test\r\nvoid testConstructors() {\r\n    assertEquals(0, new MutableInt().intValue());\r\n    assertEquals(1, new MutableInt(1).intValue());\r\n    assertEquals(2, new MutableInt(Integer.valueOf(2)).intValue());\r\n    assertEquals(3, new MutableInt(new MutableLong(3)).intValue());\r\n    assertEquals(2, new MutableInt(\"2\").intValue());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\mutable\\MutableIntTest.java",
  "methodName" : "testDecrement",
  "sourceCode" : "@Test\r\nvoid testDecrement() {\r\n    final MutableInt mutNum = new MutableInt(1);\r\n    mutNum.decrement();\r\n    assertEquals(0, mutNum.intValue());\r\n    assertEquals(0L, mutNum.longValue());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\mutable\\MutableIntTest.java",
  "methodName" : "testDecrementAndGet",
  "sourceCode" : "@Test\r\nvoid testDecrementAndGet() {\r\n    final MutableInt mutNum = new MutableInt(1);\r\n    final int result = mutNum.decrementAndGet();\r\n    assertEquals(0, result);\r\n    assertEquals(0, mutNum.intValue());\r\n    assertEquals(0L, mutNum.longValue());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\mutable\\MutableIntTest.java",
  "methodName" : "testEquals",
  "sourceCode" : "@Test\r\nvoid testEquals() {\r\n    this.testEquals(new MutableInt(0), new MutableInt(0), new MutableInt(1));\r\n    // Should Numbers be supported? GaryG July-21-2005.\r\n    //this.testEquals(mutNumA, Integer.valueOf(0), mutNumC);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\mutable\\MutableIntTest.java",
  "methodName" : "testGetAndAddValueObject",
  "sourceCode" : "@Test\r\nvoid testGetAndAddValueObject() {\r\n    final MutableInt mutableInteger = new MutableInt(0);\r\n    final int result = mutableInteger.getAndAdd(Integer.valueOf(1));\r\n    assertEquals(0, result);\r\n    assertEquals(1, mutableInteger.intValue());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\mutable\\MutableIntTest.java",
  "methodName" : "testGetAndAddValuePrimitive",
  "sourceCode" : "@Test\r\nvoid testGetAndAddValuePrimitive() {\r\n    final MutableInt mutableInteger = new MutableInt(0);\r\n    final int result = mutableInteger.getAndAdd(1);\r\n    assertEquals(0, result);\r\n    assertEquals(1, mutableInteger.intValue());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\mutable\\MutableIntTest.java",
  "methodName" : "testGetAndDecrement",
  "sourceCode" : "@Test\r\nvoid testGetAndDecrement() {\r\n    final MutableInt mutNum = new MutableInt(1);\r\n    final int result = mutNum.getAndDecrement();\r\n    assertEquals(1, result);\r\n    assertEquals(0, mutNum.intValue());\r\n    assertEquals(0L, mutNum.longValue());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\mutable\\MutableIntTest.java",
  "methodName" : "testGetAndIncrement",
  "sourceCode" : "@Test\r\nvoid testGetAndIncrement() {\r\n    final MutableInt mutNum = new MutableInt(1);\r\n    final int result = mutNum.getAndIncrement();\r\n    assertEquals(1, result);\r\n    assertEquals(2, mutNum.intValue());\r\n    assertEquals(2L, mutNum.longValue());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\mutable\\MutableIntTest.java",
  "methodName" : "testGetSet",
  "sourceCode" : "@Test\r\nvoid testGetSet() {\r\n    final MutableInt mutNum = new MutableInt(0);\r\n    assertEquals(0, new MutableInt().intValue());\r\n    assertEquals(Integer.valueOf(0), new MutableInt().get());\r\n    assertEquals(Integer.valueOf(0), new MutableInt().getValue());\r\n    mutNum.setValue(1);\r\n    assertEquals(1, mutNum.intValue());\r\n    assertEquals(Integer.valueOf(1), mutNum.get());\r\n    assertEquals(Integer.valueOf(1), mutNum.getValue());\r\n    mutNum.setValue(Integer.valueOf(2));\r\n    assertEquals(2, mutNum.intValue());\r\n    assertEquals(Integer.valueOf(2), mutNum.get());\r\n    assertEquals(Integer.valueOf(2), mutNum.getValue());\r\n    mutNum.setValue(new MutableLong(3));\r\n    assertEquals(3, mutNum.intValue());\r\n    assertEquals(Integer.valueOf(3), mutNum.get());\r\n    assertEquals(Integer.valueOf(3), mutNum.getValue());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\mutable\\MutableIntTest.java",
  "methodName" : "testHashCode",
  "sourceCode" : "@Test\r\nvoid testHashCode() {\r\n    final MutableInt mutNumA = new MutableInt(0);\r\n    final MutableInt mutNumB = new MutableInt(0);\r\n    final MutableInt mutNumC = new MutableInt(1);\r\n    assertEquals(mutNumA.hashCode(), mutNumA.hashCode());\r\n    assertEquals(mutNumA.hashCode(), mutNumB.hashCode());\r\n    assertNotEquals(mutNumA.hashCode(), mutNumC.hashCode());\r\n    assertEquals(mutNumA.hashCode(), Integer.valueOf(0).hashCode());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\mutable\\MutableIntTest.java",
  "methodName" : "testIncrement",
  "sourceCode" : "@Test\r\nvoid testIncrement() {\r\n    final MutableInt mutNum = new MutableInt(1);\r\n    mutNum.increment();\r\n    assertEquals(2, mutNum.intValue());\r\n    assertEquals(2L, mutNum.longValue());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\mutable\\MutableIntTest.java",
  "methodName" : "testIncrementAndGet",
  "sourceCode" : "@Test\r\nvoid testIncrementAndGet() {\r\n    final MutableInt mutNum = new MutableInt(1);\r\n    final int result = mutNum.incrementAndGet();\r\n    assertEquals(2, result);\r\n    assertEquals(2, mutNum.intValue());\r\n    assertEquals(2L, mutNum.longValue());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\mutable\\MutableIntTest.java",
  "methodName" : "testPrimitiveValues",
  "sourceCode" : "@Test\r\nvoid testPrimitiveValues() {\r\n    final MutableInt mutNum = new MutableInt(1);\r\n    assertEquals((byte) 1, mutNum.byteValue());\r\n    assertEquals((short) 1, mutNum.shortValue());\r\n    assertEquals(1.0F, mutNum.floatValue());\r\n    assertEquals(1.0, mutNum.doubleValue());\r\n    assertEquals(1L, mutNum.longValue());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\mutable\\MutableIntTest.java",
  "methodName" : "testSetNull",
  "sourceCode" : "@Test\r\nvoid testSetNull() {\r\n    final MutableInt mutNum = new MutableInt(0);\r\n    assertNullPointerException(() -> mutNum.setValue(null));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\mutable\\MutableIntTest.java",
  "methodName" : "testSubtractValueObject",
  "sourceCode" : "@Test\r\nvoid testSubtractValueObject() {\r\n    final MutableInt mutNum = new MutableInt(1);\r\n    mutNum.subtract(Integer.valueOf(1));\r\n    assertEquals(0, mutNum.intValue());\r\n    assertEquals(0L, mutNum.longValue());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\mutable\\MutableIntTest.java",
  "methodName" : "testSubtractValuePrimitive",
  "sourceCode" : "@Test\r\nvoid testSubtractValuePrimitive() {\r\n    final MutableInt mutNum = new MutableInt(1);\r\n    mutNum.subtract(1);\r\n    assertEquals(0, mutNum.intValue());\r\n    assertEquals(0L, mutNum.longValue());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\mutable\\MutableIntTest.java",
  "methodName" : "testToInteger",
  "sourceCode" : "@Test\r\nvoid testToInteger() {\r\n    assertEquals(Integer.valueOf(0), new MutableInt(0).toInteger());\r\n    assertEquals(Integer.valueOf(123), new MutableInt(123).toInteger());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\mutable\\MutableIntTest.java",
  "methodName" : "testToString",
  "sourceCode" : "@Test\r\nvoid testToString() {\r\n    assertEquals(\"0\", new MutableInt(0).toString());\r\n    assertEquals(\"10\", new MutableInt(10).toString());\r\n    assertEquals(\"-123\", new MutableInt(-123).toString());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\mutable\\MutableLongTest.java",
  "methodName" : "testAddAndGetValueObject",
  "sourceCode" : "@Test\r\nvoid testAddAndGetValueObject() {\r\n    final MutableLong mutableLong = new MutableLong(0L);\r\n    final long result = mutableLong.addAndGet(Long.valueOf(1L));\r\n    assertEquals(1L, result);\r\n    assertEquals(1L, mutableLong.longValue());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\mutable\\MutableLongTest.java",
  "methodName" : "testAddAndGetValuePrimitive",
  "sourceCode" : "@Test\r\nvoid testAddAndGetValuePrimitive() {\r\n    final MutableLong mutableLong = new MutableLong(0L);\r\n    final long result = mutableLong.addAndGet(1L);\r\n    assertEquals(1L, result);\r\n    assertEquals(1L, mutableLong.longValue());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\mutable\\MutableLongTest.java",
  "methodName" : "testAddValueObject",
  "sourceCode" : "@Test\r\nvoid testAddValueObject() {\r\n    final MutableLong mutNum = new MutableLong(1);\r\n    mutNum.add(Long.valueOf(1));\r\n    assertEquals(2, mutNum.intValue());\r\n    assertEquals(2L, mutNum.longValue());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\mutable\\MutableLongTest.java",
  "methodName" : "testAddValuePrimitive",
  "sourceCode" : "@Test\r\nvoid testAddValuePrimitive() {\r\n    final MutableLong mutNum = new MutableLong(1);\r\n    mutNum.add(1);\r\n    assertEquals(2, mutNum.intValue());\r\n    assertEquals(2L, mutNum.longValue());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\mutable\\MutableLongTest.java",
  "methodName" : "testCompareTo",
  "sourceCode" : "@Test\r\nvoid testCompareTo() {\r\n    final MutableLong mutNum = new MutableLong(0);\r\n    assertEquals(0, mutNum.compareTo(new MutableLong(0)));\r\n    assertEquals(+1, mutNum.compareTo(new MutableLong(-1)));\r\n    assertEquals(-1, mutNum.compareTo(new MutableLong(1)));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\mutable\\MutableLongTest.java",
  "methodName" : "testCompareToNull",
  "sourceCode" : "@Test\r\nvoid testCompareToNull() {\r\n    final MutableLong mutNum = new MutableLong(0);\r\n    assertNullPointerException(() -> mutNum.compareTo(null));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\mutable\\MutableLongTest.java",
  "methodName" : "testConstructorNull",
  "sourceCode" : "@Test\r\nvoid testConstructorNull() {\r\n    assertNullPointerException(() -> new MutableLong((Number) null));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\mutable\\MutableLongTest.java",
  "methodName" : "testConstructors",
  "sourceCode" : "@Test\r\nvoid testConstructors() {\r\n    assertEquals(0, new MutableLong().longValue());\r\n    assertEquals(1, new MutableLong(1).longValue());\r\n    assertEquals(2, new MutableLong(Long.valueOf(2)).longValue());\r\n    assertEquals(3, new MutableLong(new MutableLong(3)).longValue());\r\n    assertEquals(2, new MutableLong(\"2\").longValue());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\mutable\\MutableLongTest.java",
  "methodName" : "testDecrement",
  "sourceCode" : "@Test\r\nvoid testDecrement() {\r\n    final MutableLong mutNum = new MutableLong(1);\r\n    mutNum.decrement();\r\n    assertEquals(0, mutNum.intValue());\r\n    assertEquals(0L, mutNum.longValue());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\mutable\\MutableLongTest.java",
  "methodName" : "testDecrementAndGet",
  "sourceCode" : "@Test\r\nvoid testDecrementAndGet() {\r\n    final MutableLong mutNum = new MutableLong(1L);\r\n    final long result = mutNum.decrementAndGet();\r\n    assertEquals(0, result);\r\n    assertEquals(0, mutNum.intValue());\r\n    assertEquals(0L, mutNum.longValue());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\mutable\\MutableLongTest.java",
  "methodName" : "testEquals",
  "sourceCode" : "@Test\r\nvoid testEquals() {\r\n    final MutableLong mutNumA = new MutableLong(0);\r\n    final MutableLong mutNumB = new MutableLong(0);\r\n    final MutableLong mutNumC = new MutableLong(1);\r\n    assertEquals(mutNumA, mutNumA);\r\n    assertEquals(mutNumA, mutNumB);\r\n    assertEquals(mutNumB, mutNumA);\r\n    assertEquals(mutNumB, mutNumB);\r\n    assertNotEquals(mutNumA, mutNumC);\r\n    assertNotEquals(mutNumB, mutNumC);\r\n    assertEquals(mutNumC, mutNumC);\r\n    assertNotEquals(null, mutNumA);\r\n    assertNotEquals(mutNumA, Long.valueOf(0));\r\n    assertNotEquals(\"0\", mutNumA);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\mutable\\MutableLongTest.java",
  "methodName" : "testGetAndAddValueObject",
  "sourceCode" : "@Test\r\nvoid testGetAndAddValueObject() {\r\n    final MutableLong mutableLong = new MutableLong(0L);\r\n    final long result = mutableLong.getAndAdd(Long.valueOf(1L));\r\n    assertEquals(0L, result);\r\n    assertEquals(1L, mutableLong.longValue());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\mutable\\MutableLongTest.java",
  "methodName" : "testGetAndAddValuePrimitive",
  "sourceCode" : "@Test\r\nvoid testGetAndAddValuePrimitive() {\r\n    final MutableLong mutableLong = new MutableLong(0L);\r\n    final long result = mutableLong.getAndAdd(1L);\r\n    assertEquals(0L, result);\r\n    assertEquals(1L, mutableLong.longValue());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\mutable\\MutableLongTest.java",
  "methodName" : "testGetAndDecrement",
  "sourceCode" : "@Test\r\nvoid testGetAndDecrement() {\r\n    final MutableLong mutNum = new MutableLong(1L);\r\n    final long result = mutNum.getAndDecrement();\r\n    assertEquals(1, result);\r\n    assertEquals(0, mutNum.intValue());\r\n    assertEquals(0L, mutNum.longValue());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\mutable\\MutableLongTest.java",
  "methodName" : "testGetAndIncrement",
  "sourceCode" : "@Test\r\nvoid testGetAndIncrement() {\r\n    final MutableLong mutNum = new MutableLong(1L);\r\n    final long result = mutNum.getAndIncrement();\r\n    assertEquals(1, result);\r\n    assertEquals(2, mutNum.intValue());\r\n    assertEquals(2L, mutNum.longValue());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\mutable\\MutableLongTest.java",
  "methodName" : "testGetSet",
  "sourceCode" : "@Test\r\nvoid testGetSet() {\r\n    final MutableLong mutNum = new MutableLong(0);\r\n    assertEquals(0, new MutableLong().longValue());\r\n    assertEquals(Long.valueOf(0), new MutableLong().get());\r\n    assertEquals(Long.valueOf(0), new MutableLong().getValue());\r\n    mutNum.setValue(1);\r\n    assertEquals(1, mutNum.longValue());\r\n    assertEquals(Long.valueOf(1), mutNum.get());\r\n    assertEquals(Long.valueOf(1), mutNum.getValue());\r\n    mutNum.setValue(Long.valueOf(2));\r\n    assertEquals(2, mutNum.longValue());\r\n    assertEquals(Long.valueOf(2), mutNum.get());\r\n    assertEquals(Long.valueOf(2), mutNum.getValue());\r\n    mutNum.setValue(new MutableLong(3));\r\n    assertEquals(3, mutNum.longValue());\r\n    assertEquals(Long.valueOf(3), mutNum.get());\r\n    assertEquals(Long.valueOf(3), mutNum.getValue());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\mutable\\MutableLongTest.java",
  "methodName" : "testHashCode",
  "sourceCode" : "@Test\r\nvoid testHashCode() {\r\n    final MutableLong mutNumA = new MutableLong(0);\r\n    final MutableLong mutNumB = new MutableLong(0);\r\n    final MutableLong mutNumC = new MutableLong(1);\r\n    assertEquals(mutNumA.hashCode(), mutNumA.hashCode());\r\n    assertEquals(mutNumA.hashCode(), mutNumB.hashCode());\r\n    assertNotEquals(mutNumA.hashCode(), mutNumC.hashCode());\r\n    assertEquals(mutNumA.hashCode(), Long.valueOf(0).hashCode());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\mutable\\MutableLongTest.java",
  "methodName" : "testIncrement",
  "sourceCode" : "@Test\r\nvoid testIncrement() {\r\n    final MutableLong mutNum = new MutableLong(1);\r\n    mutNum.increment();\r\n    assertEquals(2, mutNum.intValue());\r\n    assertEquals(2L, mutNum.longValue());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\mutable\\MutableLongTest.java",
  "methodName" : "testIncrementAndGet",
  "sourceCode" : "@Test\r\nvoid testIncrementAndGet() {\r\n    final MutableLong mutNum = new MutableLong(1L);\r\n    final long result = mutNum.incrementAndGet();\r\n    assertEquals(2, result);\r\n    assertEquals(2, mutNum.intValue());\r\n    assertEquals(2L, mutNum.longValue());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\mutable\\MutableLongTest.java",
  "methodName" : "testPrimitiveValues",
  "sourceCode" : "@Test\r\nvoid testPrimitiveValues() {\r\n    final MutableLong mutNum = new MutableLong(1L);\r\n    assertEquals(1.0F, mutNum.floatValue());\r\n    assertEquals(1.0, mutNum.doubleValue());\r\n    assertEquals((byte) 1, mutNum.byteValue());\r\n    assertEquals((short) 1, mutNum.shortValue());\r\n    assertEquals(1, mutNum.intValue());\r\n    assertEquals(1L, mutNum.longValue());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\mutable\\MutableLongTest.java",
  "methodName" : "testSetNull",
  "sourceCode" : "@Test\r\nvoid testSetNull() {\r\n    final MutableLong mutNum = new MutableLong(0);\r\n    assertNullPointerException(() -> mutNum.setValue(null));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\mutable\\MutableLongTest.java",
  "methodName" : "testSubtractValueObject",
  "sourceCode" : "@Test\r\nvoid testSubtractValueObject() {\r\n    final MutableLong mutNum = new MutableLong(1);\r\n    mutNum.subtract(Long.valueOf(1));\r\n    assertEquals(0, mutNum.intValue());\r\n    assertEquals(0L, mutNum.longValue());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\mutable\\MutableLongTest.java",
  "methodName" : "testSubtractValuePrimitive",
  "sourceCode" : "@Test\r\nvoid testSubtractValuePrimitive() {\r\n    final MutableLong mutNum = new MutableLong(1);\r\n    mutNum.subtract(1);\r\n    assertEquals(0, mutNum.intValue());\r\n    assertEquals(0L, mutNum.longValue());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\mutable\\MutableLongTest.java",
  "methodName" : "testToLong",
  "sourceCode" : "@Test\r\nvoid testToLong() {\r\n    assertEquals(Long.valueOf(0L), new MutableLong(0L).toLong());\r\n    assertEquals(Long.valueOf(123L), new MutableLong(123L).toLong());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\mutable\\MutableLongTest.java",
  "methodName" : "testToString",
  "sourceCode" : "@Test\r\nvoid testToString() {\r\n    assertEquals(\"0\", new MutableLong(0).toString());\r\n    assertEquals(\"10\", new MutableLong(10).toString());\r\n    assertEquals(\"-123\", new MutableLong(-123).toString());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\mutable\\MutableObjectTest.java",
  "methodName" : "testConstructors",
  "sourceCode" : "@Test\r\nvoid testConstructors() {\r\n    assertNull(new MutableObject<String>().get());\r\n    final Integer i = Integer.valueOf(6);\r\n    assertSame(i, new MutableObject<>(i).get());\r\n    assertSame(\"HI\", new MutableObject<>(\"HI\").get());\r\n    assertSame(null, new MutableObject<>(null).get());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\mutable\\MutableObjectTest.java",
  "methodName" : "testEquals",
  "sourceCode" : "@Test\r\nvoid testEquals() {\r\n    final MutableObject<String> mutNumA = new MutableObject<>(\"ALPHA\");\r\n    final MutableObject<String> mutNumB = new MutableObject<>(\"ALPHA\");\r\n    final MutableObject<String> mutNumC = new MutableObject<>(\"BETA\");\r\n    final MutableObject<String> mutNumNull1 = new MutableObject<>(null);\r\n    final MutableObject<String> mutNumNull2 = new MutableObject<>(null);\r\n    assertFalse(mutNumA.equals(null));\r\n    assertEquals(mutNumA, mutNumA);\r\n    assertEquals(mutNumA, mutNumB);\r\n    assertEquals(mutNumB, mutNumA);\r\n    assertEquals(mutNumB, mutNumB);\r\n    assertNotEquals(mutNumA, mutNumC);\r\n    assertNotEquals(mutNumB, mutNumC);\r\n    assertEquals(mutNumC, mutNumC);\r\n    assertNotEquals(mutNumA, mutNumNull1);\r\n    assertEquals(mutNumNull1, mutNumNull1);\r\n    assertEquals(mutNumNull1, mutNumNull2);\r\n    assertEquals(mutNumNull2, mutNumNull1);\r\n    assertNotEquals(null, mutNumA);\r\n    assertNotEquals(mutNumA, new Object());\r\n    assertNotEquals(\"0\", mutNumA);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\mutable\\MutableObjectTest.java",
  "methodName" : "testGetSet",
  "sourceCode" : "@Test\r\nvoid testGetSet() {\r\n    final MutableObject<String> mutNum = new MutableObject<>();\r\n    assertNull(new MutableObject<>().get());\r\n    assertNull(new MutableObject<>().getValue());\r\n    mutNum.setValue(\"HELLO\");\r\n    assertSame(\"HELLO\", mutNum.get());\r\n    assertSame(\"HELLO\", mutNum.getValue());\r\n    mutNum.setValue(null);\r\n    assertSame(null, mutNum.get());\r\n    assertSame(null, mutNum.getValue());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\mutable\\MutableObjectTest.java",
  "methodName" : "testHashCode",
  "sourceCode" : "@Test\r\nvoid testHashCode() {\r\n    final MutableObject<String> mutNumA = new MutableObject<>(\"ALPHA\");\r\n    final MutableObject<String> mutNumB = new MutableObject<>(\"ALPHA\");\r\n    final MutableObject<String> mutNumC = new MutableObject<>(\"BETA\");\r\n    final MutableObject<String> mutNumD = new MutableObject<>(null);\r\n    assertEquals(mutNumA.hashCode(), mutNumA.hashCode());\r\n    assertEquals(mutNumA.hashCode(), mutNumB.hashCode());\r\n    assertNotEquals(mutNumA.hashCode(), mutNumC.hashCode());\r\n    assertNotEquals(mutNumA.hashCode(), mutNumD.hashCode());\r\n    assertEquals(mutNumA.hashCode(), \"ALPHA\".hashCode());\r\n    assertEquals(0, mutNumD.hashCode());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\mutable\\MutableObjectTest.java",
  "methodName" : "testToString",
  "sourceCode" : "@Test\r\nvoid testToString() {\r\n    assertEquals(\"HI\", new MutableObject<>(\"HI\").toString());\r\n    assertEquals(\"10.0\", new MutableObject<>(Double.valueOf(10)).toString());\r\n    assertEquals(\"null\", new MutableObject<>(null).toString());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\mutable\\MutableShortTest.java",
  "methodName" : "testAddAndGetValueObject",
  "sourceCode" : "@Test\r\nvoid testAddAndGetValueObject() {\r\n    final MutableShort mutableShort = new MutableShort((short) 0);\r\n    final short result = mutableShort.addAndGet(Short.valueOf((short) 1));\r\n    assertEquals((short) 1, result);\r\n    assertEquals((short) 1, mutableShort.shortValue());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\mutable\\MutableShortTest.java",
  "methodName" : "testAddAndGetValuePrimitive",
  "sourceCode" : "@Test\r\nvoid testAddAndGetValuePrimitive() {\r\n    final MutableShort mutableShort = new MutableShort((short) 0);\r\n    final short result = mutableShort.addAndGet((short) 1);\r\n    assertEquals((short) 1, result);\r\n    assertEquals((short) 1, mutableShort.shortValue());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\mutable\\MutableShortTest.java",
  "methodName" : "testAddValueObject",
  "sourceCode" : "@Test\r\nvoid testAddValueObject() {\r\n    final MutableShort mutNum = new MutableShort((short) 1);\r\n    mutNum.add(Short.valueOf((short) 1));\r\n    assertEquals((short) 2, mutNum.shortValue());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\mutable\\MutableShortTest.java",
  "methodName" : "testAddValuePrimitive",
  "sourceCode" : "@Test\r\nvoid testAddValuePrimitive() {\r\n    final MutableShort mutNum = new MutableShort((short) 1);\r\n    mutNum.add((short) 1);\r\n    assertEquals((short) 2, mutNum.shortValue());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\mutable\\MutableShortTest.java",
  "methodName" : "testCompareTo",
  "sourceCode" : "@Test\r\nvoid testCompareTo() {\r\n    final MutableShort mutNum = new MutableShort((short) 0);\r\n    assertEquals((short) 0, mutNum.compareTo(new MutableShort((short) 0)));\r\n    assertEquals((short) +1, mutNum.compareTo(new MutableShort((short) -1)));\r\n    assertEquals((short) -1, mutNum.compareTo(new MutableShort((short) 1)));\r\n    assertNullPointerException(() -> mutNum.compareTo(null));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\mutable\\MutableShortTest.java",
  "methodName" : "testConstructors",
  "sourceCode" : "@Test\r\nvoid testConstructors() {\r\n    assertEquals((short) 0, new MutableShort().shortValue());\r\n    assertEquals((short) 1, new MutableShort((short) 1).shortValue());\r\n    assertEquals((short) 2, new MutableShort(Short.valueOf((short) 2)).shortValue());\r\n    assertEquals((short) 3, new MutableShort(new MutableShort((short) 3)).shortValue());\r\n    assertEquals((short) 2, new MutableShort(\"2\").shortValue());\r\n    assertNullPointerException(() -> new MutableShort((Number) null));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\mutable\\MutableShortTest.java",
  "methodName" : "testDecrement",
  "sourceCode" : "@Test\r\nvoid testDecrement() {\r\n    final MutableShort mutNum = new MutableShort((short) 1);\r\n    mutNum.decrement();\r\n    assertEquals(0, mutNum.intValue());\r\n    assertEquals(0L, mutNum.longValue());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\mutable\\MutableShortTest.java",
  "methodName" : "testDecrementAndGet",
  "sourceCode" : "@Test\r\nvoid testDecrementAndGet() {\r\n    final MutableShort mutNum = new MutableShort((short) 1);\r\n    final short result = mutNum.decrementAndGet();\r\n    assertEquals(0, result);\r\n    assertEquals(0, mutNum.intValue());\r\n    assertEquals(0L, mutNum.longValue());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\mutable\\MutableShortTest.java",
  "methodName" : "testEquals",
  "sourceCode" : "@Test\r\nvoid testEquals() {\r\n    final MutableShort mutNumA = new MutableShort((short) 0);\r\n    final MutableShort mutNumB = new MutableShort((short) 0);\r\n    final MutableShort mutNumC = new MutableShort((short) 1);\r\n    assertEquals(mutNumA, mutNumA);\r\n    assertEquals(mutNumA, mutNumB);\r\n    assertEquals(mutNumB, mutNumA);\r\n    assertEquals(mutNumB, mutNumB);\r\n    assertNotEquals(mutNumA, mutNumC);\r\n    assertNotEquals(mutNumB, mutNumC);\r\n    assertEquals(mutNumC, mutNumC);\r\n    assertNotEquals(null, mutNumA);\r\n    assertNotEquals(mutNumA, Short.valueOf((short) 0));\r\n    assertNotEquals(\"0\", mutNumA);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\mutable\\MutableShortTest.java",
  "methodName" : "testGetAndAddValueObject",
  "sourceCode" : "@Test\r\nvoid testGetAndAddValueObject() {\r\n    final MutableShort mutableShort = new MutableShort((short) 0);\r\n    final short result = mutableShort.getAndAdd(Short.valueOf((short) 1));\r\n    assertEquals((short) 0, result);\r\n    assertEquals((short) 1, mutableShort.shortValue());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\mutable\\MutableShortTest.java",
  "methodName" : "testGetAndAddValuePrimitive",
  "sourceCode" : "@Test\r\nvoid testGetAndAddValuePrimitive() {\r\n    final MutableShort mutableShort = new MutableShort((short) 0);\r\n    final short result = mutableShort.getAndAdd((short) 1);\r\n    assertEquals((short) 0, result);\r\n    assertEquals((short) 1, mutableShort.shortValue());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\mutable\\MutableShortTest.java",
  "methodName" : "testGetAndDecrement",
  "sourceCode" : "@Test\r\nvoid testGetAndDecrement() {\r\n    final MutableShort mutNum = new MutableShort((short) 1);\r\n    final short result = mutNum.getAndDecrement();\r\n    assertEquals(1, result);\r\n    assertEquals(0, mutNum.intValue());\r\n    assertEquals(0L, mutNum.longValue());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\mutable\\MutableShortTest.java",
  "methodName" : "testGetAndIncrement",
  "sourceCode" : "@Test\r\nvoid testGetAndIncrement() {\r\n    final MutableShort mutNum = new MutableShort((short) 1);\r\n    final short result = mutNum.getAndIncrement();\r\n    assertEquals(1, result);\r\n    assertEquals(2, mutNum.intValue());\r\n    assertEquals(2L, mutNum.longValue());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\mutable\\MutableShortTest.java",
  "methodName" : "testGetSet",
  "sourceCode" : "@Test\r\nvoid testGetSet() {\r\n    final MutableShort mutNum = new MutableShort((short) 0);\r\n    assertEquals((short) 0, new MutableShort().shortValue());\r\n    assertEquals(Short.valueOf((short) 0), new MutableShort().get());\r\n    assertEquals(Short.valueOf((short) 0), new MutableShort().getValue());\r\n    mutNum.setValue((short) 1);\r\n    assertEquals((short) 1, mutNum.shortValue());\r\n    assertEquals(Short.valueOf((short) 1), mutNum.get());\r\n    assertEquals(Short.valueOf((short) 1), mutNum.getValue());\r\n    mutNum.setValue(Short.valueOf((short) 2));\r\n    assertEquals((short) 2, mutNum.shortValue());\r\n    assertEquals(Short.valueOf((short) 2), mutNum.get());\r\n    assertEquals(Short.valueOf((short) 2), mutNum.getValue());\r\n    mutNum.setValue(new MutableShort((short) 3));\r\n    assertEquals((short) 3, mutNum.shortValue());\r\n    assertEquals(Short.valueOf((short) 3), mutNum.get());\r\n    assertEquals(Short.valueOf((short) 3), mutNum.getValue());\r\n    assertNullPointerException(() -> mutNum.setValue(null));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\mutable\\MutableShortTest.java",
  "methodName" : "testHashCode",
  "sourceCode" : "@Test\r\nvoid testHashCode() {\r\n    final MutableShort mutNumA = new MutableShort((short) 0);\r\n    final MutableShort mutNumB = new MutableShort((short) 0);\r\n    final MutableShort mutNumC = new MutableShort((short) 1);\r\n    assertEquals(mutNumA.hashCode(), mutNumA.hashCode());\r\n    assertEquals(mutNumA.hashCode(), mutNumB.hashCode());\r\n    assertNotEquals(mutNumA.hashCode(), mutNumC.hashCode());\r\n    assertEquals(mutNumA.hashCode(), Short.valueOf((short) 0).hashCode());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\mutable\\MutableShortTest.java",
  "methodName" : "testIncrement",
  "sourceCode" : "@Test\r\nvoid testIncrement() {\r\n    final MutableShort mutNum = new MutableShort((short) 1);\r\n    mutNum.increment();\r\n    assertEquals(2, mutNum.intValue());\r\n    assertEquals(2L, mutNum.longValue());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\mutable\\MutableShortTest.java",
  "methodName" : "testIncrementAndGet",
  "sourceCode" : "@Test\r\nvoid testIncrementAndGet() {\r\n    final MutableShort mutNum = new MutableShort((short) 1);\r\n    final short result = mutNum.incrementAndGet();\r\n    assertEquals(2, result);\r\n    assertEquals(2, mutNum.intValue());\r\n    assertEquals(2L, mutNum.longValue());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\mutable\\MutableShortTest.java",
  "methodName" : "testPrimitiveValues",
  "sourceCode" : "@Test\r\nvoid testPrimitiveValues() {\r\n    final MutableShort mutNum = new MutableShort((short) 1);\r\n    assertEquals(1.0F, mutNum.floatValue());\r\n    assertEquals(1.0, mutNum.doubleValue());\r\n    assertEquals((byte) 1, mutNum.byteValue());\r\n    assertEquals((short) 1, mutNum.shortValue());\r\n    assertEquals(1, mutNum.intValue());\r\n    assertEquals(1L, mutNum.longValue());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\mutable\\MutableShortTest.java",
  "methodName" : "testSubtractValueObject",
  "sourceCode" : "@Test\r\nvoid testSubtractValueObject() {\r\n    final MutableShort mutNum = new MutableShort((short) 1);\r\n    mutNum.subtract(Short.valueOf((short) 1));\r\n    assertEquals((short) 0, mutNum.shortValue());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\mutable\\MutableShortTest.java",
  "methodName" : "testSubtractValuePrimitive",
  "sourceCode" : "@Test\r\nvoid testSubtractValuePrimitive() {\r\n    final MutableShort mutNum = new MutableShort((short) 1);\r\n    mutNum.subtract((short) 1);\r\n    assertEquals((short) 0, mutNum.shortValue());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\mutable\\MutableShortTest.java",
  "methodName" : "testToShort",
  "sourceCode" : "@Test\r\nvoid testToShort() {\r\n    assertEquals(Short.valueOf((short) 0), new MutableShort((short) 0).toShort());\r\n    assertEquals(Short.valueOf((short) 123), new MutableShort((short) 123).toShort());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\mutable\\MutableShortTest.java",
  "methodName" : "testToString",
  "sourceCode" : "@Test\r\nvoid testToString() {\r\n    assertEquals(\"0\", new MutableShort((short) 0).toString());\r\n    assertEquals(\"10\", new MutableShort((short) 10).toString());\r\n    assertEquals(\"-123\", new MutableShort((short) -123).toString());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\NotImplementedExceptionTest.java",
  "methodName" : "testConstructors",
  "sourceCode" : "@Test\r\nvoid testConstructors() {\r\n    final Throwable nested = new RuntimeException();\r\n    final String message = \"Not Implemented\";\r\n    final String code = \"CODE\";\r\n    NotImplementedException nie = new NotImplementedException(message);\r\n    assertCorrect(\"Issue in (String)\", nie, message, null, null);\r\n    nie = new NotImplementedException(nested);\r\n    assertCorrect(\"Issue in (Throwable)\", nie, nested.toString(), nested, null);\r\n    nie = new NotImplementedException(message, nested);\r\n    assertCorrect(\"Issue in (String, Throwable)\", nie, message, nested, null);\r\n    nie = new NotImplementedException(message, code);\r\n    assertCorrect(\"Issue in (String, String)\", nie, message, null, code);\r\n    nie = new NotImplementedException(nested, code);\r\n    assertCorrect(\"Issue in (Throwable, String)\", nie, nested.toString(), nested, code);\r\n    nie = new NotImplementedException(message, nested, code);\r\n    assertCorrect(\"Issue in (String, Throwable, String)\", nie, message, nested, code);\r\n    assertNull(new NotImplementedException().getCode());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ObjectUtilsTest.java",
  "methodName" : "testAllNotNull",
  "sourceCode" : "/**\r\n * Tests {@link ObjectUtils#allNotNull(Object...)}.\r\n */\r\n@Test\r\nvoid testAllNotNull() {\r\n    assertFalse(ObjectUtils.allNotNull((Object) null));\r\n    assertFalse(ObjectUtils.allNotNull((Object[]) null));\r\n    assertFalse(ObjectUtils.allNotNull(null, null, null));\r\n    assertFalse(ObjectUtils.allNotNull(null, FOO, BAR));\r\n    assertFalse(ObjectUtils.allNotNull(FOO, BAR, null));\r\n    assertFalse(ObjectUtils.allNotNull(FOO, BAR, null, FOO, BAR));\r\n    assertTrue(ObjectUtils.allNotNull());\r\n    assertTrue(ObjectUtils.allNotNull(FOO));\r\n    assertTrue(ObjectUtils.allNotNull(FOO, BAR, 1, Boolean.TRUE, new Object(), new Object[] {}));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ObjectUtilsTest.java",
  "methodName" : "testAllNull",
  "sourceCode" : "/**\r\n * Tests {@link ObjectUtils#allNull(Object...)}.\r\n */\r\n@Test\r\nvoid testAllNull() {\r\n    assertTrue(ObjectUtils.allNull());\r\n    assertTrue(ObjectUtils.allNull((Object) null));\r\n    assertTrue(ObjectUtils.allNull((Object[]) null));\r\n    assertTrue(ObjectUtils.allNull(null, null, null));\r\n    assertFalse(ObjectUtils.allNull(FOO));\r\n    assertFalse(ObjectUtils.allNull(null, FOO, null));\r\n    assertFalse(ObjectUtils.allNull(null, null, null, null, FOO, BAR));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ObjectUtilsTest.java",
  "methodName" : "testAnyNotNull",
  "sourceCode" : "/**\r\n * Tests {@link ObjectUtils#anyNotNull(Object...)}.\r\n */\r\n@Test\r\nvoid testAnyNotNull() {\r\n    assertFalse(ObjectUtils.anyNotNull());\r\n    assertFalse(ObjectUtils.anyNotNull((Object) null));\r\n    assertFalse(ObjectUtils.anyNotNull((Object[]) null));\r\n    assertFalse(ObjectUtils.anyNotNull(null, null, null));\r\n    assertTrue(ObjectUtils.anyNotNull(FOO));\r\n    assertTrue(ObjectUtils.anyNotNull(null, FOO, null));\r\n    assertTrue(ObjectUtils.anyNotNull(null, null, null, null, FOO, BAR));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ObjectUtilsTest.java",
  "methodName" : "testAnyNull",
  "sourceCode" : "/**\r\n * Tests {@link ObjectUtils#anyNull(Object...)}.\r\n */\r\n@Test\r\nvoid testAnyNull() {\r\n    assertTrue(ObjectUtils.anyNull((Object) null));\r\n    assertTrue(ObjectUtils.anyNull(null, null, null));\r\n    assertTrue(ObjectUtils.anyNull(null, FOO, BAR));\r\n    assertTrue(ObjectUtils.anyNull(FOO, BAR, null));\r\n    assertTrue(ObjectUtils.anyNull(FOO, BAR, null, FOO, BAR));\r\n    assertFalse(ObjectUtils.anyNull());\r\n    assertFalse(ObjectUtils.anyNull(FOO));\r\n    assertFalse(ObjectUtils.anyNull(FOO, BAR, 1, Boolean.TRUE, new Object(), new Object[] {}));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ObjectUtilsTest.java",
  "methodName" : "testArray",
  "sourceCode" : "/**\r\n * Test for {@link ObjectUtils#isArray(Object)}.\r\n */\r\n@Test\r\nvoid testArray() {\r\n    assertFalse(ObjectUtils.isArray(null));\r\n    assertFalse(ObjectUtils.isArray(\"\"));\r\n    assertFalse(ObjectUtils.isArray(\"abg\"));\r\n    assertFalse(ObjectUtils.isArray(123));\r\n    assertTrue(ObjectUtils.isArray(NON_EMPTY_ARRAY));\r\n    assertTrue(ObjectUtils.isArray(new int[] { 1, 2, 3 }));\r\n    assertTrue(ObjectUtils.isArray(ArrayUtils.EMPTY_BOOLEAN_ARRAY));\r\n    assertTrue(ObjectUtils.isArray(ArrayUtils.EMPTY_BOOLEAN_ARRAY));\r\n    assertTrue(ObjectUtils.isArray(ArrayUtils.EMPTY_BOOLEAN_OBJECT_ARRAY));\r\n    assertTrue(ObjectUtils.isArray(ArrayUtils.EMPTY_BYTE_ARRAY));\r\n    assertTrue(ObjectUtils.isArray(ArrayUtils.EMPTY_BYTE_OBJECT_ARRAY));\r\n    assertTrue(ObjectUtils.isArray(ArrayUtils.EMPTY_CHAR_ARRAY));\r\n    assertTrue(ObjectUtils.isArray(ArrayUtils.EMPTY_CHARACTER_OBJECT_ARRAY));\r\n    assertTrue(ObjectUtils.isArray(ArrayUtils.EMPTY_CLASS_ARRAY));\r\n    assertTrue(ObjectUtils.isArray(ArrayUtils.EMPTY_DOUBLE_ARRAY));\r\n    assertTrue(ObjectUtils.isArray(ArrayUtils.EMPTY_DOUBLE_OBJECT_ARRAY));\r\n    assertTrue(ObjectUtils.isArray(ArrayUtils.EMPTY_FIELD_ARRAY));\r\n    assertTrue(ObjectUtils.isArray(ArrayUtils.EMPTY_FLOAT_ARRAY));\r\n    assertTrue(ObjectUtils.isArray(ArrayUtils.EMPTY_FLOAT_OBJECT_ARRAY));\r\n    assertTrue(ObjectUtils.isArray(ArrayUtils.EMPTY_INT_ARRAY));\r\n    assertTrue(ObjectUtils.isArray(ArrayUtils.EMPTY_INTEGER_OBJECT_ARRAY));\r\n    assertTrue(ObjectUtils.isArray(ArrayUtils.EMPTY_LONG_ARRAY));\r\n    assertTrue(ObjectUtils.isArray(ArrayUtils.EMPTY_LONG_OBJECT_ARRAY));\r\n    assertTrue(ObjectUtils.isArray(ArrayUtils.EMPTY_METHOD_ARRAY));\r\n    assertTrue(ObjectUtils.isArray(ArrayUtils.EMPTY_OBJECT_ARRAY));\r\n    assertTrue(ObjectUtils.isArray(ArrayUtils.EMPTY_SHORT_ARRAY));\r\n    assertTrue(ObjectUtils.isArray(ArrayUtils.EMPTY_SHORT_OBJECT_ARRAY));\r\n    assertTrue(ObjectUtils.isArray(ArrayUtils.EMPTY_STRING_ARRAY));\r\n    assertTrue(ObjectUtils.isArray(ArrayUtils.EMPTY_THROWABLE_ARRAY));\r\n    assertTrue(ObjectUtils.isArray(ArrayUtils.EMPTY_TYPE_ARRAY));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ObjectUtilsTest.java",
  "methodName" : "testCloneOfCloneable",
  "sourceCode" : "/**\r\n * Tests {@link ObjectUtils#clone(Object)} with a cloneable object.\r\n */\r\n@Test\r\nvoid testCloneOfCloneable() {\r\n    final CloneableString string = new CloneableString(\"apache\");\r\n    final CloneableString stringClone = ObjectUtils.clone(string);\r\n    assertEquals(\"apache\", stringClone.get());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ObjectUtilsTest.java",
  "methodName" : "testCloneOfNotCloneable",
  "sourceCode" : "/**\r\n * Tests {@link ObjectUtils#clone(Object)} with a not cloneable object.\r\n */\r\n@Test\r\nvoid testCloneOfNotCloneable() {\r\n    final String string = \"apache\";\r\n    assertNull(ObjectUtils.clone(string));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ObjectUtilsTest.java",
  "methodName" : "testCloneOfPrimitiveArray",
  "sourceCode" : "/**\r\n * Tests {@link ObjectUtils#clone(Object)} with an array of primitives.\r\n */\r\n@Test\r\nvoid testCloneOfPrimitiveArray() {\r\n    assertArrayEquals(new int[] { 1 }, ObjectUtils.clone(new int[] { 1 }));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ObjectUtilsTest.java",
  "methodName" : "testCloneOfStringArray",
  "sourceCode" : "/**\r\n * Tests {@link ObjectUtils#clone(Object)} with an object array.\r\n */\r\n@Test\r\nvoid testCloneOfStringArray() {\r\n    assertTrue(Arrays.deepEquals(new String[] { \"string\" }, ObjectUtils.clone(new String[] { \"string\" })));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ObjectUtilsTest.java",
  "methodName" : "testCloneOfUncloneable",
  "sourceCode" : "/**\r\n * Tests {@link ObjectUtils#clone(Object)} with an uncloneable object.\r\n */\r\n@Test\r\nvoid testCloneOfUncloneable() {\r\n    final UncloneableString string = new UncloneableString(\"apache\");\r\n    final CloneFailedException e = assertThrows(CloneFailedException.class, () -> ObjectUtils.clone(string));\r\n    assertNotNull(e);\r\n    assertNotNull(e.getCause());\r\n    assertEquals(NoSuchMethodException.class, e.getCause().getClass());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ObjectUtilsTest.java",
  "methodName" : "testComparatorMedian",
  "sourceCode" : "@Test\r\nvoid testComparatorMedian() {\r\n    final CharSequenceComparator cmp = new CharSequenceComparator();\r\n    final NonComparableCharSequence foo = new NonComparableCharSequence(\"foo\");\r\n    final NonComparableCharSequence bar = new NonComparableCharSequence(\"bar\");\r\n    final NonComparableCharSequence baz = new NonComparableCharSequence(\"baz\");\r\n    final NonComparableCharSequence blah = new NonComparableCharSequence(\"blah\");\r\n    final NonComparableCharSequence wah = new NonComparableCharSequence(\"wah\");\r\n    assertSame(foo, ObjectUtils.median(cmp, foo));\r\n    assertSame(bar, ObjectUtils.median(cmp, foo, bar));\r\n    assertSame(baz, ObjectUtils.median(cmp, foo, bar, baz));\r\n    assertSame(baz, ObjectUtils.median(cmp, foo, bar, baz, blah));\r\n    assertSame(blah, ObjectUtils.median(cmp, foo, bar, baz, blah, wah));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ObjectUtilsTest.java",
  "methodName" : "testComparatorMedian_emptyItems",
  "sourceCode" : "@Test\r\nvoid testComparatorMedian_emptyItems() {\r\n    assertIllegalArgumentException(() -> ObjectUtils.median(new CharSequenceComparator()));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ObjectUtilsTest.java",
  "methodName" : "testComparatorMedian_nullComparator",
  "sourceCode" : "@Test\r\nvoid testComparatorMedian_nullComparator() {\r\n    assertNullPointerException(() -> ObjectUtils.median((Comparator<CharSequence>) null, new NonComparableCharSequence(\"foo\")));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ObjectUtilsTest.java",
  "methodName" : "testComparatorMedian_nullItems",
  "sourceCode" : "@Test\r\nvoid testComparatorMedian_nullItems() {\r\n    assertNullPointerException(() -> ObjectUtils.median(new CharSequenceComparator(), (CharSequence[]) null));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ObjectUtilsTest.java",
  "methodName" : "testCompare",
  "sourceCode" : "/**\r\n * Tests {@link ObjectUtils#compare(Comparable, Comparable, boolean)}.\r\n */\r\n@Test\r\nvoid testCompare() {\r\n    final Integer one = Integer.valueOf(1);\r\n    final Integer two = Integer.valueOf(2);\r\n    final Integer nullValue = null;\r\n    assertEquals(0, ObjectUtils.compare(nullValue, nullValue), \"Null Null false\");\r\n    assertEquals(0, ObjectUtils.compare(nullValue, nullValue, true), \"Null Null true\");\r\n    assertEquals(-1, ObjectUtils.compare(nullValue, one), \"Null one false\");\r\n    assertEquals(1, ObjectUtils.compare(nullValue, one, true), \"Null one true\");\r\n    assertEquals(1, ObjectUtils.compare(one, nullValue), \"one Null false\");\r\n    assertEquals(-1, ObjectUtils.compare(one, nullValue, true), \"one Null true\");\r\n    assertEquals(-1, ObjectUtils.compare(one, two), \"one two false\");\r\n    assertEquals(-1, ObjectUtils.compare(one, two, true), \"one two true\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ObjectUtilsTest.java",
  "methodName" : "testConstMethods",
  "sourceCode" : "@Test\r\nvoid testConstMethods() {\r\n    // To truly test the CONST() method, we'd want to look in the\r\n    // bytecode to see if the literals were folded into the\r\n    // class, or if the bytecode kept the method call.\r\n    assertTrue(ObjectUtils.CONST(true), \"CONST(boolean)\");\r\n    assertEquals((byte) 3, ObjectUtils.CONST((byte) 3), \"CONST(byte)\");\r\n    assertEquals((char) 3, ObjectUtils.CONST((char) 3), \"CONST(char)\");\r\n    assertEquals((short) 3, ObjectUtils.CONST((short) 3), \"CONST(short)\");\r\n    assertEquals(3, ObjectUtils.CONST(3), \"CONST(int)\");\r\n    assertEquals(3L, ObjectUtils.CONST(3L), \"CONST(long)\");\r\n    assertEquals(3f, ObjectUtils.CONST(3f), \"CONST(float)\");\r\n    assertEquals(3.0, ObjectUtils.CONST(3.0), \"CONST(double)\");\r\n    assertEquals(\"abc\", ObjectUtils.CONST(\"abc\"), \"CONST(Object)\");\r\n    // Make sure documentation examples from Javadoc all work\r\n    // (this fixed a lot of my bugs when I these!)\r\n    //\r\n    // My bugs should be in a software engineering textbook\r\n    // for \"Can you screw this up?\" The answer is, yes,\r\n    // you can even screw this up. (When you == Julius)\r\n    // .\r\n    final boolean MAGIC_FLAG = ObjectUtils.CONST(true);\r\n    final byte MAGIC_BYTE1 = ObjectUtils.CONST((byte) 127);\r\n    final byte MAGIC_BYTE2 = ObjectUtils.CONST_BYTE(127);\r\n    final char MAGIC_CHAR = ObjectUtils.CONST('a');\r\n    final short MAGIC_SHORT1 = ObjectUtils.CONST((short) 123);\r\n    final short MAGIC_SHORT2 = ObjectUtils.CONST_SHORT(127);\r\n    final int MAGIC_INT = ObjectUtils.CONST(123);\r\n    final long MAGIC_LONG1 = ObjectUtils.CONST(123L);\r\n    final long MAGIC_LONG2 = ObjectUtils.CONST(3);\r\n    final float MAGIC_FLOAT = ObjectUtils.CONST(1.0f);\r\n    final double MAGIC_DOUBLE = ObjectUtils.CONST(1.0);\r\n    final String MAGIC_STRING = ObjectUtils.CONST(\"abc\");\r\n    assertTrue(MAGIC_FLAG);\r\n    assertEquals(127, MAGIC_BYTE1);\r\n    assertEquals(127, MAGIC_BYTE2);\r\n    assertEquals('a', MAGIC_CHAR);\r\n    assertEquals(123, MAGIC_SHORT1);\r\n    assertEquals(127, MAGIC_SHORT2);\r\n    assertEquals(123, MAGIC_INT);\r\n    assertEquals(123, MAGIC_LONG1);\r\n    assertEquals(3, MAGIC_LONG2);\r\n    assertEquals(1.0f, MAGIC_FLOAT);\r\n    assertEquals(1.0, MAGIC_DOUBLE);\r\n    assertEquals(\"abc\", MAGIC_STRING);\r\n    assertIllegalArgumentException(() -> ObjectUtils.CONST_BYTE(-129), \"CONST_BYTE(-129): IllegalArgumentException should have been thrown.\");\r\n    assertIllegalArgumentException(() -> ObjectUtils.CONST_BYTE(128), \"CONST_BYTE(128): IllegalArgumentException should have been thrown.\");\r\n    assertIllegalArgumentException(() -> ObjectUtils.CONST_SHORT(-32769), \"CONST_SHORT(-32769): IllegalArgumentException should have been thrown.\");\r\n    assertIllegalArgumentException(() -> ObjectUtils.CONST_BYTE(32768), \"CONST_SHORT(32768): IllegalArgumentException should have been thrown.\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ObjectUtilsTest.java",
  "methodName" : "testConstructor",
  "sourceCode" : "@Test\r\nvoid testConstructor() {\r\n    assertNotNull(new ObjectUtils());\r\n    final Constructor<?>[] cons = ObjectUtils.class.getDeclaredConstructors();\r\n    assertEquals(1, cons.length);\r\n    assertTrue(Modifier.isPublic(cons[0].getModifiers()));\r\n    assertTrue(Modifier.isPublic(ObjectUtils.class.getModifiers()));\r\n    assertFalse(Modifier.isFinal(ObjectUtils.class.getModifiers()));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ObjectUtilsTest.java",
  "methodName" : "testDefaultIfNull",
  "sourceCode" : "@Test\r\nvoid testDefaultIfNull() {\r\n    final Object o = FOO;\r\n    final Object dflt = BAR;\r\n    assertSame(dflt, ObjectUtils.defaultIfNull(null, dflt), \"dflt was not returned when o was null\");\r\n    assertSame(o, ObjectUtils.defaultIfNull(o, dflt), \"dflt was returned when o was not null\");\r\n    assertSame(dflt, ObjectUtils.getIfNull(null, () -> dflt), \"dflt was not returned when o was null\");\r\n    assertSame(o, ObjectUtils.getIfNull(o, () -> dflt), \"dflt was returned when o was not null\");\r\n    assertSame(o, ObjectUtils.getIfNull(FOO, () -> dflt), \"dflt was returned when o was not null\");\r\n    assertSame(o, ObjectUtils.getIfNull(\"foo\", () -> dflt), \"dflt was returned when o was not null\");\r\n    final MutableInt callsCounter = new MutableInt(0);\r\n    final Supplier<Object> countingDefaultSupplier = () -> {\r\n        callsCounter.increment();\r\n        return dflt;\r\n    };\r\n    ObjectUtils.getIfNull(o, countingDefaultSupplier);\r\n    assertEquals(0, callsCounter.get());\r\n    ObjectUtils.getIfNull(null, countingDefaultSupplier);\r\n    assertEquals(1, callsCounter.get());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ObjectUtilsTest.java",
  "methodName" : "testEquals",
  "sourceCode" : "@Test\r\nvoid testEquals() {\r\n    assertTrue(ObjectUtils.equals(null, null), \"ObjectUtils.equals(null, null) returned false\");\r\n    assertFalse(ObjectUtils.equals(FOO, null), \"ObjectUtils.equals(\\\"foo\\\", null) returned true\");\r\n    assertFalse(ObjectUtils.equals(null, BAR), \"ObjectUtils.equals(null, \\\"bar\\\") returned true\");\r\n    assertFalse(ObjectUtils.equals(FOO, BAR), \"ObjectUtils.equals(\\\"foo\\\", \\\"bar\\\") returned true\");\r\n    assertTrue(ObjectUtils.equals(FOO, FOO), \"ObjectUtils.equals(\\\"foo\\\", \\\"foo\\\") returned false\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ObjectUtilsTest.java",
  "methodName" : "testFirstNonNull",
  "sourceCode" : "@Test\r\nvoid testFirstNonNull() {\r\n    assertEquals(\"\", ObjectUtils.firstNonNull(null, \"\"));\r\n    final String firstNonNullGenerics = ObjectUtils.firstNonNull(null, null, \"123\", \"456\");\r\n    assertEquals(\"123\", firstNonNullGenerics);\r\n    assertEquals(\"123\", ObjectUtils.firstNonNull(\"123\", null, \"456\", null));\r\n    assertSame(Boolean.TRUE, ObjectUtils.firstNonNull(Boolean.TRUE));\r\n    // Explicitly pass in an empty array of Object type to ensure compiler doesn't complain of unchecked generic array creation\r\n    assertNull(ObjectUtils.firstNonNull());\r\n    // Cast to Object in line below ensures compiler doesn't complain of unchecked generic array creation\r\n    assertNull(ObjectUtils.firstNonNull(null, null));\r\n    assertNull(ObjectUtils.firstNonNull((Object) null));\r\n    assertNull(ObjectUtils.firstNonNull((Object[]) null));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ObjectUtilsTest.java",
  "methodName" : "testGetClass",
  "sourceCode" : "@Test\r\nvoid testGetClass() {\r\n    final String[] newArray = ArrayUtils.EMPTY_STRING_ARRAY;\r\n    // No type-cast required.\r\n    final Class<String[]> cls = ObjectUtils.getClass(newArray);\r\n    assertEquals(String[].class, cls);\r\n    assertNull(ObjectUtils.getClass(null));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ObjectUtilsTest.java",
  "methodName" : "testGetFirstNonNull",
  "sourceCode" : "@Test\r\nvoid testGetFirstNonNull() {\r\n    // first non-null\r\n    assertEquals(\"\", ObjectUtils.getFirstNonNull(null, () -> \"\"));\r\n    assertEquals(\"\", ObjectUtils.getFirstNonNull(Suppliers.nul(), () -> \"\"));\r\n    // first encountered value is used\r\n    assertEquals(\"1\", ObjectUtils.getFirstNonNull(Suppliers.nul(), () -> \"1\", () -> \"2\", Suppliers.nul()));\r\n    assertEquals(\"123\", ObjectUtils.getFirstNonNull(() -> \"123\", Suppliers.nul(), () -> \"456\"));\r\n    // don't evaluate suppliers after first value is found\r\n    assertEquals(\"123\", ObjectUtils.getFirstNonNull(Suppliers.nul(), () -> \"123\", () -> fail(\"Supplier after first non-null value should not be evaluated\")));\r\n    // supplier returning null and null supplier both result in null\r\n    assertNull(ObjectUtils.getFirstNonNull(null, Suppliers.nul()));\r\n    // Explicitly pass in an empty array of Object type to ensure compiler doesn't complain of unchecked generic array creation\r\n    assertNull(ObjectUtils.getFirstNonNull());\r\n    // supplier is null\r\n    assertNull(ObjectUtils.getFirstNonNull((Supplier<Object>) null));\r\n    // varargs array itself is null\r\n    assertNull(ObjectUtils.getFirstNonNull((Supplier<Object>[]) null));\r\n    // test different types\r\n    assertEquals(1, ObjectUtils.getFirstNonNull(Suppliers.nul(), () -> 1));\r\n    assertEquals(Boolean.TRUE, ObjectUtils.getFirstNonNull(Suppliers.nul(), () -> Boolean.TRUE));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ObjectUtilsTest.java",
  "methodName" : "testGetIfNullObject",
  "sourceCode" : "@Test\r\nvoid testGetIfNullObject() {\r\n    final Object o = FOO;\r\n    final Object defaultObject = BAR;\r\n    assertNull(ObjectUtils.getIfNull(null, (Object) null));\r\n    assertSame(defaultObject, ObjectUtils.getIfNull(null, defaultObject), \"dflt was not returned when o was null\");\r\n    assertSame(o, ObjectUtils.getIfNull(o, defaultObject), \"dflt was returned when o was not null\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ObjectUtilsTest.java",
  "methodName" : "testGetIfNullSupplier",
  "sourceCode" : "@Test\r\nvoid testGetIfNullSupplier() {\r\n    final Object o = FOO;\r\n    final Object defaultObject = BAR;\r\n    assertNull(ObjectUtils.getIfNull(null, (Supplier<Object>) null));\r\n    assertSame(defaultObject, ObjectUtils.getIfNull(null, () -> defaultObject), \"dflt was not returned when o was null\");\r\n    assertSame(o, ObjectUtils.getIfNull(o, () -> defaultObject), \"dflt was returned when o was not null\");\r\n    assertSame(o, ObjectUtils.getIfNull(FOO, () -> defaultObject), \"dflt was returned when o was not null\");\r\n    assertSame(o, ObjectUtils.getIfNull(\"foo\", () -> defaultObject), \"dflt was returned when o was not null\");\r\n    final MutableInt callsCounter = new MutableInt(0);\r\n    final Supplier<Object> countingDefaultSupplier = () -> {\r\n        callsCounter.increment();\r\n        return defaultObject;\r\n    };\r\n    ObjectUtils.getIfNull(o, countingDefaultSupplier);\r\n    assertEquals(0, callsCounter.get());\r\n    ObjectUtils.getIfNull(null, countingDefaultSupplier);\r\n    assertEquals(1, callsCounter.get());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ObjectUtilsTest.java",
  "methodName" : "testHashCode",
  "sourceCode" : "@Test\r\nvoid testHashCode() {\r\n    assertEquals(0, ObjectUtils.hashCode(null));\r\n    assertEquals(\"a\".hashCode(), ObjectUtils.hashCode(\"a\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ObjectUtilsTest.java",
  "methodName" : "testHashCodeHex",
  "sourceCode" : "@Test\r\nvoid testHashCodeHex() {\r\n    final Integer i = Integer.valueOf(90);\r\n    assertEquals(Integer.toHexString(Objects.hashCode(i)), ObjectUtils.hashCodeHex(i));\r\n    final Integer zero = Integer.valueOf(0);\r\n    assertEquals(Integer.toHexString(Objects.hashCode(zero)), ObjectUtils.hashCodeHex(zero));\r\n    assertEquals(Integer.toHexString(Objects.hashCode(null)), ObjectUtils.hashCodeHex(null));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ObjectUtilsTest.java",
  "methodName" : "testHashCodeMulti_multiple_emptyArray",
  "sourceCode" : "@Test\r\nvoid testHashCodeMulti_multiple_emptyArray() {\r\n    final Object[] array = {};\r\n    assertEquals(1, ObjectUtils.hashCodeMulti(array));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ObjectUtilsTest.java",
  "methodName" : "testHashCodeMulti_multiple_likeList",
  "sourceCode" : "@Test\r\nvoid testHashCodeMulti_multiple_likeList() {\r\n    final List<Object> list0 = new ArrayList<>(Collections.emptyList());\r\n    assertEquals(list0.hashCode(), ObjectUtils.hashCodeMulti());\r\n    final List<Object> list1 = new ArrayList<>(Collections.singletonList(\"a\"));\r\n    assertEquals(list1.hashCode(), ObjectUtils.hashCodeMulti(\"a\"));\r\n    final List<Object> list2 = new ArrayList<>(Arrays.asList(\"a\", \"b\"));\r\n    assertEquals(list2.hashCode(), ObjectUtils.hashCodeMulti(\"a\", \"b\"));\r\n    final List<Object> list3 = new ArrayList<>(Arrays.asList(\"a\", \"b\", \"c\"));\r\n    assertEquals(list3.hashCode(), ObjectUtils.hashCodeMulti(\"a\", \"b\", \"c\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ObjectUtilsTest.java",
  "methodName" : "testHashCodeMulti_multiple_nullArray",
  "sourceCode" : "@Test\r\nvoid testHashCodeMulti_multiple_nullArray() {\r\n    final Object[] array = null;\r\n    assertEquals(1, ObjectUtils.hashCodeMulti(array));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ObjectUtilsTest.java",
  "methodName" : "testIdentityHashCodeHex",
  "sourceCode" : "@Test\r\nvoid testIdentityHashCodeHex() {\r\n    final Integer i = Integer.valueOf(90);\r\n    assertEquals(Integer.toHexString(System.identityHashCode(i)), ObjectUtils.identityHashCodeHex(i));\r\n    final Integer zero = Integer.valueOf(0);\r\n    assertEquals(Integer.toHexString(System.identityHashCode(zero)), ObjectUtils.identityHashCodeHex(zero));\r\n    assertEquals(Integer.toHexString(System.identityHashCode(null)), ObjectUtils.identityHashCodeHex(null));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ObjectUtilsTest.java",
  "methodName" : "testIdentityToStringAppendable",
  "sourceCode" : "@Test\r\nvoid testIdentityToStringAppendable() throws IOException {\r\n    final Integer i = Integer.valueOf(121);\r\n    final String expected = \"java.lang.Integer@\" + Integer.toHexString(System.identityHashCode(i));\r\n    final Appendable appendable = new StringBuilder();\r\n    ObjectUtils.identityToString(appendable, i);\r\n    assertEquals(expected, appendable.toString());\r\n    assertNullPointerException(() -> ObjectUtils.identityToString((Appendable) null, \"tmp\"));\r\n    assertNullPointerException(() -> ObjectUtils.identityToString((Appendable) new StringBuilder(), null));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ObjectUtilsTest.java",
  "methodName" : "testIdentityToStringInteger",
  "sourceCode" : "@Test\r\nvoid testIdentityToStringInteger() {\r\n    final Integer i = Integer.valueOf(90);\r\n    final String expected = \"java.lang.Integer@\" + Integer.toHexString(System.identityHashCode(i));\r\n    assertEquals(expected, ObjectUtils.identityToString(i));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ObjectUtilsTest.java",
  "methodName" : "testIdentityToStringObjectNull",
  "sourceCode" : "@Test\r\nvoid testIdentityToStringObjectNull() {\r\n    assertNull(ObjectUtils.identityToString(null));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ObjectUtilsTest.java",
  "methodName" : "testIdentityToStringStrBuilder",
  "sourceCode" : "@Test\r\nvoid testIdentityToStringStrBuilder() {\r\n    final Integer i = Integer.valueOf(102);\r\n    final String expected = \"java.lang.Integer@\" + Integer.toHexString(System.identityHashCode(i));\r\n    final StrBuilder builder = new StrBuilder();\r\n    ObjectUtils.identityToString(builder, i);\r\n    assertEquals(expected, builder.toString());\r\n    assertNullPointerException(() -> ObjectUtils.identityToString((StrBuilder) null, \"tmp\"));\r\n    assertNullPointerException(() -> ObjectUtils.identityToString(new StrBuilder(), null));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ObjectUtilsTest.java",
  "methodName" : "testIdentityToStringString",
  "sourceCode" : "@Test\r\nvoid testIdentityToStringString() {\r\n    assertEquals(\"java.lang.String@\" + Integer.toHexString(System.identityHashCode(FOO)), ObjectUtils.identityToString(FOO));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ObjectUtilsTest.java",
  "methodName" : "testIdentityToStringStringBuffer",
  "sourceCode" : "@Test\r\nvoid testIdentityToStringStringBuffer() {\r\n    final Integer i = Integer.valueOf(45);\r\n    final String expected = \"java.lang.Integer@\" + Integer.toHexString(System.identityHashCode(i));\r\n    final StringBuffer buffer = new StringBuffer();\r\n    ObjectUtils.identityToString(buffer, i);\r\n    assertEquals(expected, buffer.toString());\r\n    assertNullPointerException(() -> ObjectUtils.identityToString((StringBuffer) null, \"tmp\"));\r\n    assertNullPointerException(() -> ObjectUtils.identityToString(new StringBuffer(), null));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ObjectUtilsTest.java",
  "methodName" : "testIdentityToStringStringBuilder",
  "sourceCode" : "@Test\r\nvoid testIdentityToStringStringBuilder() {\r\n    final Integer i = Integer.valueOf(90);\r\n    final String expected = \"java.lang.Integer@\" + Integer.toHexString(System.identityHashCode(i));\r\n    final StringBuilder builder = new StringBuilder();\r\n    ObjectUtils.identityToString(builder, i);\r\n    assertEquals(expected, builder.toString());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ObjectUtilsTest.java",
  "methodName" : "testIdentityToStringStringBuilderInUse",
  "sourceCode" : "@Test\r\nvoid testIdentityToStringStringBuilderInUse() {\r\n    final Integer i = Integer.valueOf(90);\r\n    final String expected = \"ABC = java.lang.Integer@\" + Integer.toHexString(System.identityHashCode(i));\r\n    final StringBuilder builder = new StringBuilder(\"ABC = \");\r\n    ObjectUtils.identityToString(builder, i);\r\n    assertEquals(expected, builder.toString());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ObjectUtilsTest.java",
  "methodName" : "testIdentityToStringStringBuilderNullStringBuilder",
  "sourceCode" : "@Test\r\npublic void testIdentityToStringStringBuilderNullStringBuilder() {\r\n    assertNullPointerException(() -> ObjectUtils.identityToString((StringBuilder) null, \"tmp\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ObjectUtilsTest.java",
  "methodName" : "testIdentityToStringStringBuilderNullValue",
  "sourceCode" : "@Test\r\nvoid testIdentityToStringStringBuilderNullValue() {\r\n    assertNullPointerException(() -> ObjectUtils.identityToString(new StringBuilder(), null));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ObjectUtilsTest.java",
  "methodName" : "testIsEmpty",
  "sourceCode" : "@Test\r\nvoid testIsEmpty() {\r\n    assertTrue(ObjectUtils.isEmpty(null));\r\n    assertTrue(ObjectUtils.isEmpty(\"\"));\r\n    assertTrue(ObjectUtils.isEmpty(new int[] {}));\r\n    assertTrue(ObjectUtils.isEmpty(Collections.emptyList()));\r\n    assertTrue(ObjectUtils.isEmpty(Collections.emptySet()));\r\n    assertTrue(ObjectUtils.isEmpty(Collections.emptyMap()));\r\n    assertTrue(ObjectUtils.isEmpty(Optional.empty()));\r\n    assertTrue(ObjectUtils.isEmpty(Optional.ofNullable(null)));\r\n    assertFalse(ObjectUtils.isEmpty(\"  \"));\r\n    assertFalse(ObjectUtils.isEmpty(\"ab\"));\r\n    assertFalse(ObjectUtils.isEmpty(NON_EMPTY_ARRAY));\r\n    assertFalse(ObjectUtils.isEmpty(NON_EMPTY_LIST));\r\n    assertFalse(ObjectUtils.isEmpty(NON_EMPTY_SET));\r\n    assertFalse(ObjectUtils.isEmpty(NON_EMPTY_MAP));\r\n    assertFalse(ObjectUtils.isEmpty(Optional.of(new Object())));\r\n    assertFalse(ObjectUtils.isEmpty(Optional.ofNullable(new Object())));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ObjectUtilsTest.java",
  "methodName" : "testIsNotEmpty",
  "sourceCode" : "@Test\r\nvoid testIsNotEmpty() {\r\n    assertFalse(ObjectUtils.isNotEmpty(null));\r\n    assertFalse(ObjectUtils.isNotEmpty(\"\"));\r\n    assertFalse(ObjectUtils.isNotEmpty(new int[] {}));\r\n    assertFalse(ObjectUtils.isNotEmpty(Collections.emptyList()));\r\n    assertFalse(ObjectUtils.isNotEmpty(Collections.emptySet()));\r\n    assertFalse(ObjectUtils.isNotEmpty(Collections.emptyMap()));\r\n    assertFalse(ObjectUtils.isNotEmpty(Optional.empty()));\r\n    assertFalse(ObjectUtils.isNotEmpty(Optional.ofNullable(null)));\r\n    assertTrue(ObjectUtils.isNotEmpty(\"  \"));\r\n    assertTrue(ObjectUtils.isNotEmpty(\"ab\"));\r\n    assertTrue(ObjectUtils.isNotEmpty(NON_EMPTY_ARRAY));\r\n    assertTrue(ObjectUtils.isNotEmpty(NON_EMPTY_LIST));\r\n    assertTrue(ObjectUtils.isNotEmpty(NON_EMPTY_SET));\r\n    assertTrue(ObjectUtils.isNotEmpty(NON_EMPTY_MAP));\r\n    assertTrue(ObjectUtils.isNotEmpty(Optional.of(new Object())));\r\n    assertTrue(ObjectUtils.isNotEmpty(Optional.ofNullable(new Object())));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ObjectUtilsTest.java",
  "methodName" : "testMax",
  "sourceCode" : "@Test\r\nvoid testMax() {\r\n    final Calendar calendar = Calendar.getInstance();\r\n    final Date nonNullComparable1 = calendar.getTime();\r\n    final Date nonNullComparable2 = calendar.getTime();\r\n    final String[] nullArray = null;\r\n    calendar.set(Calendar.YEAR, calendar.get(Calendar.YEAR) - 1);\r\n    final Date minComparable = calendar.getTime();\r\n    assertNotSame(nonNullComparable1, nonNullComparable2);\r\n    assertNull(ObjectUtils.max((String) null));\r\n    assertNull(ObjectUtils.max(nullArray));\r\n    assertSame(nonNullComparable1, ObjectUtils.max(null, nonNullComparable1));\r\n    assertSame(nonNullComparable1, ObjectUtils.max(nonNullComparable1, null));\r\n    assertSame(nonNullComparable1, ObjectUtils.max(null, nonNullComparable1, null));\r\n    assertSame(nonNullComparable1, ObjectUtils.max(nonNullComparable1, nonNullComparable2));\r\n    assertSame(nonNullComparable2, ObjectUtils.max(nonNullComparable2, nonNullComparable1));\r\n    assertSame(nonNullComparable1, ObjectUtils.max(nonNullComparable1, minComparable));\r\n    assertSame(nonNullComparable1, ObjectUtils.max(minComparable, nonNullComparable1));\r\n    assertSame(nonNullComparable1, ObjectUtils.max(null, minComparable, null, nonNullComparable1));\r\n    assertNull(ObjectUtils.max(null, null));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ObjectUtilsTest.java",
  "methodName" : "testMedian",
  "sourceCode" : "@Test\r\nvoid testMedian() {\r\n    assertEquals(\"foo\", ObjectUtils.median(\"foo\"));\r\n    assertEquals(\"bar\", ObjectUtils.median(\"foo\", \"bar\"));\r\n    assertEquals(\"baz\", ObjectUtils.median(\"foo\", \"bar\", \"baz\"));\r\n    assertEquals(\"baz\", ObjectUtils.median(\"foo\", \"bar\", \"baz\", \"blah\"));\r\n    assertEquals(\"blah\", ObjectUtils.median(\"foo\", \"bar\", \"baz\", \"blah\", \"wah\"));\r\n    assertEquals(Integer.valueOf(5), ObjectUtils.median(Integer.valueOf(1), Integer.valueOf(5), Integer.valueOf(10)));\r\n    assertEquals(Integer.valueOf(7), ObjectUtils.median(Integer.valueOf(5), Integer.valueOf(6), Integer.valueOf(7), Integer.valueOf(8), Integer.valueOf(9)));\r\n    assertEquals(Integer.valueOf(6), ObjectUtils.median(Integer.valueOf(5), Integer.valueOf(6), Integer.valueOf(7), Integer.valueOf(8)));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ObjectUtilsTest.java",
  "methodName" : "testMedian_emptyItems",
  "sourceCode" : "@Test\r\nvoid testMedian_emptyItems() {\r\n    assertIllegalArgumentException(ObjectUtils::<String>median);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ObjectUtilsTest.java",
  "methodName" : "testMedian_nullItems",
  "sourceCode" : "@Test\r\nvoid testMedian_nullItems() {\r\n    assertNullPointerException(() -> ObjectUtils.median((String[]) null));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ObjectUtilsTest.java",
  "methodName" : "testMin",
  "sourceCode" : "@Test\r\nvoid testMin() {\r\n    final Calendar calendar = Calendar.getInstance();\r\n    final Date nonNullComparable1 = calendar.getTime();\r\n    final Date nonNullComparable2 = calendar.getTime();\r\n    final String[] nullArray = null;\r\n    calendar.set(Calendar.YEAR, calendar.get(Calendar.YEAR) - 1);\r\n    final Date minComparable = calendar.getTime();\r\n    assertNotSame(nonNullComparable1, nonNullComparable2);\r\n    assertNull(ObjectUtils.min((String) null));\r\n    assertNull(ObjectUtils.min(nullArray));\r\n    assertSame(nonNullComparable1, ObjectUtils.min(null, nonNullComparable1));\r\n    assertSame(nonNullComparable1, ObjectUtils.min(nonNullComparable1, null));\r\n    assertSame(nonNullComparable1, ObjectUtils.min(null, nonNullComparable1, null));\r\n    assertSame(nonNullComparable1, ObjectUtils.min(nonNullComparable1, nonNullComparable2));\r\n    assertSame(nonNullComparable2, ObjectUtils.min(nonNullComparable2, nonNullComparable1));\r\n    assertSame(minComparable, ObjectUtils.min(nonNullComparable1, minComparable));\r\n    assertSame(minComparable, ObjectUtils.min(minComparable, nonNullComparable1));\r\n    assertSame(minComparable, ObjectUtils.min(null, nonNullComparable1, null, minComparable));\r\n    assertNull(ObjectUtils.min(null, null));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ObjectUtilsTest.java",
  "methodName" : "testMode",
  "sourceCode" : "@Test\r\nvoid testMode() {\r\n    assertNull(ObjectUtils.mode((Object[]) null));\r\n    assertNull(ObjectUtils.mode());\r\n    assertNull(ObjectUtils.mode(\"foo\", \"bar\", \"baz\"));\r\n    assertNull(ObjectUtils.mode(\"foo\", \"bar\", \"baz\", \"foo\", \"bar\"));\r\n    assertEquals(\"foo\", ObjectUtils.mode(\"foo\", \"bar\", \"baz\", \"foo\"));\r\n    assertEquals(Integer.valueOf(9), ObjectUtils.mode(\"foo\", \"bar\", \"baz\", Integer.valueOf(9), Integer.valueOf(10), Integer.valueOf(9)));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ObjectUtilsTest.java",
  "methodName" : "testNotEqual",
  "sourceCode" : "@Test\r\nvoid testNotEqual() {\r\n    assertFalse(ObjectUtils.notEqual(null, null), \"ObjectUtils.notEqual(null, null) returned false\");\r\n    assertTrue(ObjectUtils.notEqual(FOO, null), \"ObjectUtils.notEqual(\\\"foo\\\", null) returned true\");\r\n    assertTrue(ObjectUtils.notEqual(null, BAR), \"ObjectUtils.notEqual(null, \\\"bar\\\") returned true\");\r\n    assertTrue(ObjectUtils.notEqual(FOO, BAR), \"ObjectUtils.notEqual(\\\"foo\\\", \\\"bar\\\") returned true\");\r\n    assertFalse(ObjectUtils.notEqual(FOO, FOO), \"ObjectUtils.notEqual(\\\"foo\\\", \\\"foo\\\") returned false\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ObjectUtilsTest.java",
  "methodName" : "testNull",
  "sourceCode" : "// 1 OK, because we are checking for code change\r\n@SuppressWarnings(\"cast\")\r\n@Test\r\nvoid testNull() {\r\n    assertNotNull(ObjectUtils.NULL);\r\n    // 1 Check that NULL really is a Null i.e. the definition has not been changed\r\n    assertInstanceOf(ObjectUtils.Null.class, ObjectUtils.NULL);\r\n    assertSame(ObjectUtils.NULL, SerializationUtils.clone(ObjectUtils.NULL));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ObjectUtilsTest.java",
  "methodName" : "testPossibleCloneOfCloneable",
  "sourceCode" : "/**\r\n * Tests {@link ObjectUtils#cloneIfPossible(Object)} with a cloneable object.\r\n */\r\n@Test\r\nvoid testPossibleCloneOfCloneable() {\r\n    final CloneableString string = new CloneableString(\"apache\");\r\n    final CloneableString stringClone = ObjectUtils.cloneIfPossible(string);\r\n    assertEquals(\"apache\", stringClone.get());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ObjectUtilsTest.java",
  "methodName" : "testPossibleCloneOfNotCloneable",
  "sourceCode" : "/**\r\n * Tests {@link ObjectUtils#cloneIfPossible(Object)} with a not cloneable object.\r\n */\r\n@Test\r\nvoid testPossibleCloneOfNotCloneable() {\r\n    final String string = \"apache\";\r\n    assertSame(string, ObjectUtils.cloneIfPossible(string));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ObjectUtilsTest.java",
  "methodName" : "testPossibleCloneOfUncloneable",
  "sourceCode" : "/**\r\n * Tests {@link ObjectUtils#cloneIfPossible(Object)} with an uncloneable object.\r\n */\r\n@Test\r\nvoid testPossibleCloneOfUncloneable() {\r\n    final UncloneableString string = new UncloneableString(\"apache\");\r\n    final CloneFailedException e = assertThrows(CloneFailedException.class, () -> ObjectUtils.cloneIfPossible(string));\r\n    assertNotNull(e);\r\n    assertNotNull(e.getCause());\r\n    assertEquals(NoSuchMethodException.class, e.getCause().getClass());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ObjectUtilsTest.java",
  "methodName" : "testRequireNonEmpty",
  "sourceCode" : "@Test\r\nvoid testRequireNonEmpty() {\r\n    assertEquals(\"foo\", ObjectUtils.requireNonEmpty(\"foo\"));\r\n    assertEquals(\"foo\", ObjectUtils.requireNonEmpty(\"foo\", \"foo\"));\r\n    //\r\n    assertNullPointerException(() -> ObjectUtils.requireNonEmpty(null));\r\n    assertNullPointerException(() -> ObjectUtils.requireNonEmpty(null, \"foo\"));\r\n    //\r\n    assertIllegalArgumentException(() -> ObjectUtils.requireNonEmpty(\"\"));\r\n    assertIllegalArgumentException(() -> ObjectUtils.requireNonEmpty(\"\", \"foo\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ObjectUtilsTest.java",
  "methodName" : "testToString_Object",
  "sourceCode" : "@Test\r\nvoid testToString_Object() {\r\n    assertEquals(\"\", ObjectUtils.toString(null));\r\n    assertEquals(Boolean.TRUE.toString(), ObjectUtils.toString(Boolean.TRUE));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ObjectUtilsTest.java",
  "methodName" : "testToString_Object_String",
  "sourceCode" : "@Test\r\nvoid testToString_Object_String() {\r\n    assertEquals(BAR, ObjectUtils.toString(null, BAR));\r\n    assertEquals(Boolean.TRUE.toString(), ObjectUtils.toString(Boolean.TRUE, BAR));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ObjectUtilsTest.java",
  "methodName" : "testToString_String_Supplier",
  "sourceCode" : "@Test\r\nvoid testToString_String_Supplier() {\r\n    assertNull(ObjectUtils.toString(null, (Supplier<String>) null));\r\n    assertNull(ObjectUtils.toString(null, Suppliers.nul()));\r\n    // Pretend computing BAR is expensive.\r\n    assertEquals(BAR, ObjectUtils.toString(null, () -> BAR));\r\n    assertEquals(Boolean.TRUE.toString(), ObjectUtils.toString(Boolean.TRUE, () -> BAR));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ObjectUtilsTest.java",
  "methodName" : "testToString_Supplier_Supplier",
  "sourceCode" : "@Test\r\nvoid testToString_Supplier_Supplier() {\r\n    assertNull(ObjectUtils.toString(NULL_SUPPLIER, (Supplier<String>) null));\r\n    assertNull(ObjectUtils.toString(Suppliers.nul(), (Supplier<String>) null));\r\n    assertNull(ObjectUtils.toString(NULL_SUPPLIER, Suppliers.nul()));\r\n    assertNull(ObjectUtils.toString(Suppliers.nul(), Suppliers.nul()));\r\n    // Pretend computing BAR is expensive.\r\n    assertEquals(BAR, ObjectUtils.toString(NULL_SUPPLIER, () -> BAR));\r\n    assertEquals(BAR, ObjectUtils.toString(Suppliers.nul(), () -> BAR));\r\n    assertEquals(Boolean.TRUE.toString(), ObjectUtils.toString(() -> Boolean.TRUE, () -> BAR));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ObjectUtilsTest.java",
  "methodName" : "testWaitDuration",
  "sourceCode" : "@Test\r\nvoid testWaitDuration() {\r\n    assertThrows(IllegalMonitorStateException.class, () -> ObjectUtils.wait(new Object(), Duration.ZERO));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\RandomStringUtilsTest.java",
  "methodName" : "testCharOverflow",
  "sourceCode" : "/**\r\n * Test for LANG-1286. Creates situation where old code would overflow a char and result in a code point outside the specified range.\r\n */\r\n@Test\r\nvoid testCharOverflow() {\r\n    final int start = Character.MAX_VALUE;\r\n    final int end = Integer.MAX_VALUE;\r\n    @SuppressWarnings(\"serial\")\r\n    final Random fixedRandom = new Random() {\r\n\r\n        @Override\r\n        public int nextInt(final int n) {\r\n            // Prevents selection of 'start' as the character\r\n            return super.nextInt(n - 1) + 1;\r\n        }\r\n    };\r\n    final String result = RandomStringUtils.random(2, start, end, false, false, null, fixedRandom);\r\n    final int c = result.codePointAt(0);\r\n    assertTrue(c >= start && c < end, String.format(\"Character '%d' not in range [%d,%d).\", c, start, end));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\RandomStringUtilsTest.java",
  "methodName" : "testConstructor",
  "sourceCode" : "@Test\r\nvoid testConstructor() {\r\n    assertNotNull(new RandomStringUtils());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\RandomStringUtilsTest.java",
  "methodName" : "testExceptionsRandom",
  "sourceCode" : "@Test\r\nvoid testExceptionsRandom() {\r\n    assertIllegalArgumentException(() -> RandomStringUtils.random(-1));\r\n    assertIllegalArgumentException(() -> RandomStringUtils.random(-1, true, true));\r\n    assertIllegalArgumentException(() -> RandomStringUtils.random(-1, new char[] { 'a' }));\r\n    assertIllegalArgumentException(() -> RandomStringUtils.random(1, new char[0]));\r\n    assertIllegalArgumentException(() -> RandomStringUtils.random(-1, \"\"));\r\n    assertIllegalArgumentException(() -> RandomStringUtils.random(-1, (String) null));\r\n    assertIllegalArgumentException(() -> RandomStringUtils.random(-1, 'a', 'z', false, false));\r\n    assertIllegalArgumentException(() -> RandomStringUtils.random(-1, 'a', 'z', false, false, new char[] { 'a' }));\r\n    assertIllegalArgumentException(() -> RandomStringUtils.random(-1, 'a', 'z', false, false, new char[] { 'a' }, new Random()));\r\n    assertIllegalArgumentException(() -> RandomStringUtils.random(8, 32, 48, false, true));\r\n    assertIllegalArgumentException(() -> RandomStringUtils.random(8, 32, 65, true, false));\r\n    assertIllegalArgumentException(() -> RandomStringUtils.random(1, Integer.MIN_VALUE, -10, false, false, null));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\RandomStringUtilsTest.java",
  "methodName" : "testExceptionsRandom",
  "sourceCode" : "@ParameterizedTest\r\n@MethodSource(\"randomProvider\")\r\nvoid testExceptionsRandom(final RandomStringUtils rsu) {\r\n    assertIllegalArgumentException(() -> rsu.next(-1));\r\n    assertIllegalArgumentException(() -> rsu.next(-1, true, true));\r\n    assertIllegalArgumentException(() -> rsu.next(-1, new char[] { 'a' }));\r\n    assertIllegalArgumentException(() -> rsu.next(1, new char[0]));\r\n    assertIllegalArgumentException(() -> rsu.next(-1, \"\"));\r\n    assertIllegalArgumentException(() -> rsu.next(-1, (String) null));\r\n    assertIllegalArgumentException(() -> rsu.next(-1, 'a', 'z', false, false));\r\n    assertIllegalArgumentException(() -> rsu.next(-1, 'a', 'z', false, false, new char[] { 'a' }));\r\n    assertIllegalArgumentException(() -> rsu.next(8, 32, 48, false, true));\r\n    assertIllegalArgumentException(() -> rsu.next(8, 32, 65, true, false));\r\n    assertIllegalArgumentException(() -> rsu.next(1, Integer.MIN_VALUE, -10, false, false, null));\r\n}",
  "annotations" : [ "ParameterizedTest" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\RandomStringUtilsTest.java",
  "methodName" : "testExceptionsRandomAlphabetic",
  "sourceCode" : "@Test\r\nvoid testExceptionsRandomAlphabetic() {\r\n    assertIllegalArgumentException(() -> RandomStringUtils.randomAlphabetic(-1));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\RandomStringUtilsTest.java",
  "methodName" : "testExceptionsRandomAlphabetic",
  "sourceCode" : "@ParameterizedTest\r\n@MethodSource(\"randomProvider\")\r\nvoid testExceptionsRandomAlphabetic(final RandomStringUtils rsu) {\r\n    assertIllegalArgumentException(() -> rsu.nextAlphabetic(-1));\r\n}",
  "annotations" : [ "ParameterizedTest" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\RandomStringUtilsTest.java",
  "methodName" : "testExceptionsRandomAscii",
  "sourceCode" : "@Test\r\nvoid testExceptionsRandomAscii() {\r\n    assertIllegalArgumentException(() -> RandomStringUtils.randomAscii(-1));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\RandomStringUtilsTest.java",
  "methodName" : "testExceptionsRandomAscii",
  "sourceCode" : "@ParameterizedTest\r\n@MethodSource(\"randomProvider\")\r\nvoid testExceptionsRandomAscii(final RandomStringUtils rsu) {\r\n    assertIllegalArgumentException(() -> rsu.nextAscii(-1));\r\n}",
  "annotations" : [ "ParameterizedTest" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\RandomStringUtilsTest.java",
  "methodName" : "testExceptionsRandomGraph",
  "sourceCode" : "@Test\r\nvoid testExceptionsRandomGraph() {\r\n    assertIllegalArgumentException(() -> RandomStringUtils.randomGraph(-1));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\RandomStringUtilsTest.java",
  "methodName" : "testExceptionsRandomGraph",
  "sourceCode" : "@ParameterizedTest\r\n@MethodSource(\"randomProvider\")\r\nvoid testExceptionsRandomGraph(final RandomStringUtils rsu) {\r\n    assertIllegalArgumentException(() -> rsu.nextGraph(-1));\r\n}",
  "annotations" : [ "ParameterizedTest" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\RandomStringUtilsTest.java",
  "methodName" : "testExceptionsRandomNumeric",
  "sourceCode" : "@Test\r\nvoid testExceptionsRandomNumeric() {\r\n    assertIllegalArgumentException(() -> RandomStringUtils.randomNumeric(-1));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\RandomStringUtilsTest.java",
  "methodName" : "testExceptionsRandomNumeric",
  "sourceCode" : "@ParameterizedTest\r\n@MethodSource(\"randomProvider\")\r\nvoid testExceptionsRandomNumeric(final RandomStringUtils rsu) {\r\n    assertIllegalArgumentException(() -> rsu.nextNumeric(-1));\r\n}",
  "annotations" : [ "ParameterizedTest" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\RandomStringUtilsTest.java",
  "methodName" : "testExceptionsRandomPrint",
  "sourceCode" : "@Test\r\nvoid testExceptionsRandomPrint() {\r\n    assertIllegalArgumentException(() -> RandomStringUtils.randomPrint(-1));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\RandomStringUtilsTest.java",
  "methodName" : "testExceptionsRandomPrint",
  "sourceCode" : "@ParameterizedTest\r\n@MethodSource(\"randomProvider\")\r\nvoid testExceptionsRandomPrint(final RandomStringUtils rsu) {\r\n    assertIllegalArgumentException(() -> rsu.nextPrint(-1));\r\n}",
  "annotations" : [ "ParameterizedTest" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\RandomStringUtilsTest.java",
  "methodName" : "testHomogeneity",
  "sourceCode" : "/**\r\n * Test homogeneity of random strings generated -- i.e., test that characters show up with expected frequencies in generated strings. Will fail randomly\r\n * about 1 in 100,000 times. Repeated failures indicate a problem.\r\n *\r\n * @param rsu the instance to test.\r\n */\r\n@ParameterizedTest\r\n@MethodSource(\"randomProvider\")\r\nvoid testHomogeneity(final RandomStringUtils rsu) {\r\n    final String set = \"abc\";\r\n    final char[] chars = set.toCharArray();\r\n    final int[] counts = { 0, 0, 0 };\r\n    final int[] expected = { 200, 200, 200 };\r\n    for (int i = 0; i < 100; i++) {\r\n        final String gen = rsu.next(6, chars);\r\n        for (int j = 0; j < 6; j++) {\r\n            switch(gen.charAt(j)) {\r\n                case 'a':\r\n                    {\r\n                        counts[0]++;\r\n                        break;\r\n                    }\r\n                case 'b':\r\n                    {\r\n                        counts[1]++;\r\n                        break;\r\n                    }\r\n                case 'c':\r\n                    {\r\n                        counts[2]++;\r\n                        break;\r\n                    }\r\n                default:\r\n                    {\r\n                        fail(\"generated character not in set\");\r\n                    }\r\n            }\r\n        }\r\n    }\r\n    // Perform chi-square test with degrees of freedom = 3-1 = 2, testing at 1e-5 level.\r\n    // This expects a failure rate of 1 in 100,000.\r\n    // critical value: from scipy.stats import chi2; chi2(2).isf(1e-5)\r\n    assertTrue(chiSquare(expected, counts) < 23.025850929940457d, \"test homogeneity -- will fail about 1 in 100,000 times\");\r\n}",
  "annotations" : [ "ParameterizedTest" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\RandomStringUtilsTest.java",
  "methodName" : "testHugeStrings",
  "sourceCode" : "@ParameterizedTest\r\n@ValueSource(ints = { MAX_SAFE_COUNT, MAX_SAFE_COUNT + 1 })\r\n@EnabledIfSystemProperty(named = \"test.large.heap\", matches = \"true\")\r\nvoid testHugeStrings(final int expectedLength) {\r\n    final String hugeString = RandomStringUtils.random(expectedLength);\r\n    assertEquals(expectedLength, hugeString.length(), \"hugeString.length() == expectedLength\");\r\n}",
  "annotations" : [ "ParameterizedTest" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\RandomStringUtilsTest.java",
  "methodName" : "testLang100",
  "sourceCode" : "/**\r\n * Checks if the string got by {@link RandomStringUtils#random(int)} can be converted to UTF-8 and back without loss.\r\n *\r\n * @see <a href=\"https://issues.apache.org/jira/browse/LANG-100\">LANG-100</a>\r\n */\r\n@Test\r\nvoid testLang100() {\r\n    final int size = 5000;\r\n    final Charset charset = StandardCharsets.UTF_8;\r\n    final String orig = RandomStringUtils.random(size);\r\n    final byte[] bytes = orig.getBytes(charset);\r\n    final String copy = new String(bytes, charset);\r\n    // for a verbose compare:\r\n    for (int i = 0; i < orig.length() && i < copy.length(); i++) {\r\n        final char o = orig.charAt(i);\r\n        final char c = copy.charAt(i);\r\n        assertEquals(o, c, \"differs at \" + i + \"(\" + Integer.toHexString(Character.valueOf(o).hashCode()) + \",\" + Integer.toHexString(Character.valueOf(c).hashCode()) + \")\");\r\n    }\r\n    // compare length also\r\n    assertEquals(orig.length(), copy.length());\r\n    // just to be complete\r\n    assertEquals(orig, copy);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\RandomStringUtilsTest.java",
  "methodName" : "testLang100",
  "sourceCode" : "/**\r\n * Checks if the string got by {@link RandomStringUtils#random(int)} can be converted to UTF-8 and back without loss.\r\n *\r\n * @param rsu the instance to test\r\n * @see <a href=\"https://issues.apache.org/jira/browse/LANG-100\">LANG-100</a>\r\n */\r\n@ParameterizedTest\r\n@MethodSource(\"randomProvider\")\r\nvoid testLang100(final RandomStringUtils rsu) {\r\n    final int size = 5000;\r\n    final Charset charset = StandardCharsets.UTF_8;\r\n    final String orig = rsu.next(size);\r\n    final byte[] bytes = orig.getBytes(charset);\r\n    final String copy = new String(bytes, charset);\r\n    // for a verbose compare:\r\n    for (int i = 0; i < orig.length() && i < copy.length(); i++) {\r\n        final char o = orig.charAt(i);\r\n        final char c = copy.charAt(i);\r\n        assertEquals(o, c, \"differs at \" + i + \"(\" + Integer.toHexString(Character.valueOf(o).hashCode()) + \",\" + Integer.toHexString(Character.valueOf(c).hashCode()) + \")\");\r\n    }\r\n    // compare length also\r\n    assertEquals(orig.length(), copy.length());\r\n    // just to be complete\r\n    assertEquals(orig, copy);\r\n}",
  "annotations" : [ "ParameterizedTest" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\RandomStringUtilsTest.java",
  "methodName" : "testLANG805",
  "sourceCode" : "@Test\r\nvoid testLANG805() {\r\n    final long seedMillis = System.currentTimeMillis();\r\n    assertEquals(\"aaa\", RandomStringUtils.random(3, 0, 0, false, false, new char[] { 'a' }, new Random(seedMillis)));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\RandomStringUtilsTest.java",
  "methodName" : "testLANG807",
  "sourceCode" : "@ParameterizedTest\r\n@MethodSource(\"randomProvider\")\r\nvoid testLANG807(final RandomStringUtils rsu) {\r\n    final IllegalArgumentException ex = assertIllegalArgumentException(() -> rsu.next(3, 5, 5, false, false));\r\n    final String msg = ex.getMessage();\r\n    assertTrue(msg.contains(\"start\"), \"Message (\" + msg + \") must contain 'start'\");\r\n    assertTrue(msg.contains(\"end\"), \"Message (\" + msg + \") must contain 'end'\");\r\n}",
  "annotations" : [ "ParameterizedTest" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\RandomStringUtilsTest.java",
  "methodName" : "testNonASCIILetters",
  "sourceCode" : "/**\r\n * Test {@code RandomStringUtils.random} works appropriately when letters=true\r\n * and the range does not only include ASCII letters.\r\n * Fails with probability less than 2^-40 (in practice this never happens).\r\n */\r\n@ParameterizedTest\r\n@MethodSource(\"randomProvider\")\r\nvoid testNonASCIILetters(final RandomStringUtils rsu) {\r\n    // Check that the following create a string with 10 characters 0x4e00 (a non-ASCII letter)\r\n    String r1 = rsu.next(10, 0x4e00, 0x4e01, true, false);\r\n    assertEquals(10, r1.length(), \"wrong length\");\r\n    for (int i = 0; i < r1.length(); i++) {\r\n        assertEquals(0x4e00, r1.charAt(i), \"characters not all equal to 0x4e00\");\r\n    }\r\n    // Same with both letters=true and numbers=true\r\n    r1 = rsu.next(10, 0x4e00, 0x4e01, true, true);\r\n    assertEquals(10, r1.length(), \"wrong length\");\r\n    for (int i = 0; i < r1.length(); i++) {\r\n        assertEquals(0x4e00, r1.charAt(i), \"characters not all equal to 0x4e00\");\r\n    }\r\n    // Check that at least one letter is not ASCII\r\n    boolean found = false;\r\n    r1 = rsu.next(40, 'F', 0x3000, true, false);\r\n    assertEquals(40, r1.length(), \"wrong length\");\r\n    for (int i = 0; i < r1.length(); i++) {\r\n        assertTrue(Character.isLetter(r1.charAt(i)), \"characters not all letters\");\r\n        if (r1.charAt(i) > 0x7f) {\r\n            found = true;\r\n        }\r\n    }\r\n    assertTrue(found, \"no non-ASCII letter generated\");\r\n}",
  "annotations" : [ "ParameterizedTest" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\RandomStringUtilsTest.java",
  "methodName" : "testNonASCIINumbers",
  "sourceCode" : "/**\r\n * Test {@code RandomStringUtils.random} works appropriately when numbers=true\r\n * and the range does not only include ASCII numbers/digits.\r\n * Fails with probability less than 2^-40 (in practice this never happens).\r\n */\r\n@ParameterizedTest\r\n@MethodSource(\"randomProvider\")\r\nvoid testNonASCIINumbers(final RandomStringUtils rsu) {\r\n    // Check that the following create a string with 10 characters 0x0660 (a non-ASCII digit)\r\n    String r1 = rsu.next(10, 0x0660, 0x0661, false, true);\r\n    assertEquals(10, r1.length(), \"wrong length\");\r\n    for (int i = 0; i < r1.length(); i++) {\r\n        assertEquals(0x0660, r1.charAt(i), \"characters not all equal to 0x0660\");\r\n    }\r\n    // Same with both letters=true and numbers=true\r\n    r1 = rsu.next(10, 0x0660, 0x0661, true, true);\r\n    assertEquals(10, r1.length(), \"wrong length\");\r\n    for (int i = 0; i < r1.length(); i++) {\r\n        assertEquals(0x0660, r1.charAt(i), \"characters not all equal to 0x0660\");\r\n    }\r\n    // Check that at least one letter is not ASCII\r\n    boolean found = false;\r\n    r1 = rsu.next(40, 'F', 0x3000, false, true);\r\n    assertEquals(40, r1.length(), \"wrong length\");\r\n    for (int i = 0; i < r1.length(); i++) {\r\n        assertTrue(Character.isDigit(r1.charAt(i)), \"characters not all numbers\");\r\n        if (r1.charAt(i) > 0x7f) {\r\n            found = true;\r\n        }\r\n    }\r\n    assertTrue(found, \"no non-ASCII number generated\");\r\n}",
  "annotations" : [ "ParameterizedTest" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\RandomStringUtilsTest.java",
  "methodName" : "testRandomAlphabetic",
  "sourceCode" : "/**\r\n * Make sure boundary alpha characters are generated by randomAlphabetic This test will fail randomly with probability = 4 * (51/52)**1000 ~ 1.58E-8\r\n */\r\n@Test\r\nvoid testRandomAlphabetic() {\r\n    final char[] testChars = { 'a', 'z', 'A', 'Z' };\r\n    final boolean[] found = { false, false, false, false };\r\n    for (int i = 0; i < LOOP_COUNT; i++) {\r\n        final String randString = RandomStringUtils.randomAlphabetic(10);\r\n        for (int j = 0; j < testChars.length; j++) {\r\n            if (randString.indexOf(testChars[j]) > 0) {\r\n                found[j] = true;\r\n            }\r\n        }\r\n    }\r\n    for (int i = 0; i < testChars.length; i++) {\r\n        assertTrue(found[i], \"alphanumeric character not generated in 1000 attempts: \" + testChars[i] + \" -- repeated failures indicate a problem \");\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\RandomStringUtilsTest.java",
  "methodName" : "testRandomAlphabetic",
  "sourceCode" : "/**\r\n * Make sure boundary alpha characters are generated by randomAlphabetic This test will fail randomly with probability = 4 * (51/52)**1000 ~ 1.58E-8\r\n *\r\n * @param rsu the instance to test\r\n */\r\n@ParameterizedTest\r\n@MethodSource(\"randomProvider\")\r\nvoid testRandomAlphabetic(final RandomStringUtils rsu) {\r\n    final char[] testChars = { 'a', 'z', 'A', 'Z' };\r\n    final boolean[] found = { false, false, false, false };\r\n    for (int i = 0; i < LOOP_COUNT; i++) {\r\n        final String randString = rsu.nextAlphabetic(10);\r\n        for (int j = 0; j < testChars.length; j++) {\r\n            if (randString.indexOf(testChars[j]) > 0) {\r\n                found[j] = true;\r\n            }\r\n        }\r\n    }\r\n    for (int i = 0; i < testChars.length; i++) {\r\n        assertTrue(found[i], \"alphanumeric character not generated in 1000 attempts: \" + testChars[i] + \" -- repeated failures indicate a problem \");\r\n    }\r\n}",
  "annotations" : [ "ParameterizedTest" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\RandomStringUtilsTest.java",
  "methodName" : "testRandomAlphabeticRange",
  "sourceCode" : "@Test\r\nvoid testRandomAlphabeticRange() {\r\n    final int expectedMinLengthInclusive = 1;\r\n    final int expectedMaxLengthExclusive = 11;\r\n    final String pattern = \"^\\\\p{Alpha}{\" + expectedMinLengthInclusive + ',' + expectedMaxLengthExclusive + \"}$\";\r\n    int maxCreatedLength = expectedMinLengthInclusive;\r\n    int minCreatedLength = expectedMaxLengthExclusive - 1;\r\n    for (int i = 0; i < LOOP_COUNT; i++) {\r\n        final String s = RandomStringUtils.randomAlphabetic(expectedMinLengthInclusive, expectedMaxLengthExclusive);\r\n        assertTrue(s.length() >= expectedMinLengthInclusive, \"within range\");\r\n        assertTrue(s.length() <= expectedMaxLengthExclusive - 1, \"within range\");\r\n        assertTrue(s.matches(pattern), s);\r\n        if (s.length() < minCreatedLength) {\r\n            minCreatedLength = s.length();\r\n        }\r\n        if (s.length() > maxCreatedLength) {\r\n            maxCreatedLength = s.length();\r\n        }\r\n    }\r\n    assertEquals(expectedMinLengthInclusive, minCreatedLength, \"min generated, may fail randomly rarely\");\r\n    assertEquals(expectedMaxLengthExclusive - 1, maxCreatedLength, \"max generated, may fail randomly rarely\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\RandomStringUtilsTest.java",
  "methodName" : "testRandomAlphabeticRange",
  "sourceCode" : "@ParameterizedTest\r\n@MethodSource(\"randomProvider\")\r\nvoid testRandomAlphabeticRange(final RandomStringUtils rsu) {\r\n    final int expectedMinLengthInclusive = 1;\r\n    final int expectedMaxLengthExclusive = 11;\r\n    final String pattern = \"^\\\\p{Alpha}{\" + expectedMinLengthInclusive + ',' + expectedMaxLengthExclusive + \"}$\";\r\n    int maxCreatedLength = expectedMinLengthInclusive;\r\n    int minCreatedLength = expectedMaxLengthExclusive - 1;\r\n    for (int i = 0; i < LOOP_COUNT; i++) {\r\n        final String s = rsu.nextAlphabetic(expectedMinLengthInclusive, expectedMaxLengthExclusive);\r\n        assertTrue(s.length() >= expectedMinLengthInclusive, \"within range\");\r\n        assertTrue(s.length() <= expectedMaxLengthExclusive - 1, \"within range\");\r\n        assertTrue(s.matches(pattern), s);\r\n        if (s.length() < minCreatedLength) {\r\n            minCreatedLength = s.length();\r\n        }\r\n        if (s.length() > maxCreatedLength) {\r\n            maxCreatedLength = s.length();\r\n        }\r\n    }\r\n    assertEquals(expectedMinLengthInclusive, minCreatedLength, \"min generated, may fail randomly rarely\");\r\n    assertEquals(expectedMaxLengthExclusive - 1, maxCreatedLength, \"max generated, may fail randomly rarely\");\r\n}",
  "annotations" : [ "ParameterizedTest" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\RandomStringUtilsTest.java",
  "methodName" : "testRandomAlphaNumeric",
  "sourceCode" : "/**\r\n * Make sure boundary alphanumeric characters are generated by randomAlphaNumeric This test will fail randomly with probability = 6 * (61/62)**1000 ~ 5.2E-7\r\n */\r\n@Test\r\nvoid testRandomAlphaNumeric() {\r\n    final char[] testChars = { 'a', 'z', 'A', 'Z', '0', '9' };\r\n    final boolean[] found = { false, false, false, false, false, false };\r\n    for (int i = 0; i < LOOP_COUNT; i++) {\r\n        final String randString = RandomStringUtils.randomAlphanumeric(10);\r\n        for (int j = 0; j < testChars.length; j++) {\r\n            if (randString.indexOf(testChars[j]) > 0) {\r\n                found[j] = true;\r\n            }\r\n        }\r\n    }\r\n    for (int i = 0; i < testChars.length; i++) {\r\n        assertTrue(found[i], \"alphanumeric character not generated in 1000 attempts: \" + testChars[i] + \" -- repeated failures indicate a problem \");\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\RandomStringUtilsTest.java",
  "methodName" : "testRandomAlphaNumeric",
  "sourceCode" : "/**\r\n * Make sure boundary alphanumeric characters are generated by randomAlphaNumeric This test will fail randomly with probability = 6 * (61/62)**1000 ~ 5.2E-7\r\n *\r\n * @param rsu the instance to test\r\n */\r\n@ParameterizedTest\r\n@MethodSource(\"randomProvider\")\r\nvoid testRandomAlphaNumeric(final RandomStringUtils rsu) {\r\n    final char[] testChars = { 'a', 'z', 'A', 'Z', '0', '9' };\r\n    final boolean[] found = { false, false, false, false, false, false };\r\n    for (int i = 0; i < LOOP_COUNT; i++) {\r\n        final String randString = rsu.nextAlphanumeric(10);\r\n        for (int j = 0; j < testChars.length; j++) {\r\n            if (randString.indexOf(testChars[j]) > 0) {\r\n                found[j] = true;\r\n            }\r\n        }\r\n    }\r\n    for (int i = 0; i < testChars.length; i++) {\r\n        assertTrue(found[i], \"alphanumeric character not generated in 1000 attempts: \" + testChars[i] + \" -- repeated failures indicate a problem \");\r\n    }\r\n}",
  "annotations" : [ "ParameterizedTest" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\RandomStringUtilsTest.java",
  "methodName" : "testRandomAlphanumericRange",
  "sourceCode" : "@Test\r\nvoid testRandomAlphanumericRange() {\r\n    final int expectedMinLengthInclusive = 1;\r\n    final int expectedMaxLengthExclusive = 11;\r\n    final String pattern = \"^\\\\p{Alnum}{\" + expectedMinLengthInclusive + ',' + expectedMaxLengthExclusive + \"}$\";\r\n    int maxCreatedLength = expectedMinLengthInclusive;\r\n    int minCreatedLength = expectedMaxLengthExclusive - 1;\r\n    for (int i = 0; i < LOOP_COUNT; i++) {\r\n        final String s = RandomStringUtils.randomAlphanumeric(expectedMinLengthInclusive, expectedMaxLengthExclusive);\r\n        assertTrue(s.length() >= expectedMinLengthInclusive, \"within range\");\r\n        assertTrue(s.length() <= expectedMaxLengthExclusive - 1, \"within range\");\r\n        assertTrue(s.matches(pattern), s);\r\n        if (s.length() < minCreatedLength) {\r\n            minCreatedLength = s.length();\r\n        }\r\n        if (s.length() > maxCreatedLength) {\r\n            maxCreatedLength = s.length();\r\n        }\r\n    }\r\n    assertEquals(expectedMinLengthInclusive, minCreatedLength, \"min generated, may fail randomly rarely\");\r\n    assertEquals(expectedMaxLengthExclusive - 1, maxCreatedLength, \"max generated, may fail randomly rarely\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\RandomStringUtilsTest.java",
  "methodName" : "testRandomApis",
  "sourceCode" : "/**\r\n * Test the implementation\r\n *\r\n * @param rsu the instance to test.\r\n */\r\n@ParameterizedTest\r\n@MethodSource(\"randomProvider\")\r\nvoid testRandomApis(final RandomStringUtils rsu) {\r\n    String r1 = rsu.next(50);\r\n    assertEquals(50, r1.length(), \"random(50) length\");\r\n    String r2 = rsu.next(50);\r\n    assertEquals(50, r2.length(), \"random(50) length\");\r\n    assertNotEquals(r1, r2, \"!r1.equals(r2)\");\r\n    r1 = rsu.nextAscii(50);\r\n    assertEquals(50, r1.length(), \"randomAscii(50) length\");\r\n    for (int i = 0; i < r1.length(); i++) {\r\n        final int ch = r1.charAt(i);\r\n        assertTrue(ch >= 32, \"char >= 32\");\r\n        assertTrue(ch <= 127, \"char <= 127\");\r\n    }\r\n    r2 = rsu.nextAscii(50);\r\n    assertNotEquals(r1, r2, \"!r1.equals(r2)\");\r\n    r1 = rsu.nextAlphabetic(50);\r\n    assertEquals(50, r1.length(), \"randomAlphabetic(50)\");\r\n    for (int i = 0; i < r1.length(); i++) {\r\n        assertTrue(Character.isLetter(r1.charAt(i)) && !Character.isDigit(r1.charAt(i)), \"r1 contains alphabetic\");\r\n    }\r\n    r2 = rsu.nextAlphabetic(50);\r\n    assertNotEquals(r1, r2, \"!r1.equals(r2)\");\r\n    r1 = rsu.nextAlphanumeric(50);\r\n    assertEquals(50, r1.length(), \"randomAlphanumeric(50)\");\r\n    for (int i = 0; i < r1.length(); i++) {\r\n        assertTrue(Character.isLetterOrDigit(r1.charAt(i)), \"r1 contains alphanumeric\");\r\n    }\r\n    r2 = rsu.nextAlphabetic(50);\r\n    assertNotEquals(r1, r2, \"!r1.equals(r2)\");\r\n    r1 = rsu.nextGraph(50);\r\n    assertEquals(50, r1.length(), \"randomGraph(50) length\");\r\n    for (int i = 0; i < r1.length(); i++) {\r\n        assertTrue(r1.charAt(i) >= 33 && r1.charAt(i) <= 126, \"char between 33 and 126\");\r\n    }\r\n    r2 = rsu.nextGraph(50);\r\n    assertNotEquals(r1, r2, \"!r1.equals(r2)\");\r\n    r1 = rsu.nextNumeric(50);\r\n    assertEquals(50, r1.length(), \"randomNumeric(50)\");\r\n    for (int i = 0; i < r1.length(); i++) {\r\n        assertTrue(Character.isDigit(r1.charAt(i)) && !Character.isLetter(r1.charAt(i)), \"r1 contains numeric\");\r\n    }\r\n    r2 = rsu.nextNumeric(50);\r\n    assertNotEquals(r1, r2, \"!r1.equals(r2)\");\r\n    r1 = rsu.nextPrint(50);\r\n    assertEquals(50, r1.length(), \"randomPrint(50) length\");\r\n    for (int i = 0; i < r1.length(); i++) {\r\n        assertTrue(r1.charAt(i) >= 32 && r1.charAt(i) <= 126, \"char between 32 and 126\");\r\n    }\r\n    r2 = rsu.nextPrint(50);\r\n    assertNotEquals(r1, r2, \"!r1.equals(r2)\");\r\n    String set = \"abcdefg\";\r\n    r1 = rsu.next(50, set);\r\n    assertEquals(50, r1.length(), \"random(50, \\\"abcdefg\\\")\");\r\n    for (int i = 0; i < r1.length(); i++) {\r\n        assertTrue(set.indexOf(r1.charAt(i)) > -1, \"random char in set\");\r\n    }\r\n    r2 = rsu.next(50, set);\r\n    assertNotEquals(r1, r2, \"!r1.equals(r2)\");\r\n    r1 = rsu.next(50, (String) null);\r\n    assertEquals(50, r1.length(), \"random(50) length\");\r\n    r2 = rsu.next(50, (String) null);\r\n    assertEquals(50, r2.length(), \"random(50) length\");\r\n    assertNotEquals(r1, r2, \"!r1.equals(r2)\");\r\n    set = \"stuvwxyz\";\r\n    r1 = rsu.next(50, set.toCharArray());\r\n    assertEquals(50, r1.length(), \"random(50, \\\"stuvwxyz\\\")\");\r\n    for (int i = 0; i < r1.length(); i++) {\r\n        assertTrue(set.indexOf(r1.charAt(i)) > -1, \"random char in set\");\r\n    }\r\n    r2 = rsu.next(50, set);\r\n    assertNotEquals(r1, r2, \"!r1.equals(r2)\");\r\n    r1 = rsu.next(50, (char[]) null);\r\n    assertEquals(50, r1.length(), \"random(50) length\");\r\n    r2 = rsu.next(50, (char[]) null);\r\n    assertEquals(50, r2.length(), \"random(50) length\");\r\n    assertNotEquals(r1, r2, \"!r1.equals(r2)\");\r\n    r1 = rsu.next(0);\r\n    assertEquals(\"\", r1, \"random(0).equals(\\\"\\\")\");\r\n}",
  "annotations" : [ "ParameterizedTest" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\RandomStringUtilsTest.java",
  "methodName" : "testRandomAscii",
  "sourceCode" : "/**\r\n * Make sure 32 and 127 are generated by randomNumeric This test will fail randomly with probability = 2*(95/96)**1000 ~ 5.7E-5\r\n *\r\n * @param rsu the instance to test\r\n */\r\n@ParameterizedTest\r\n@MethodSource(\"randomProvider\")\r\nvoid testRandomAscii(final RandomStringUtils rsu) {\r\n    final char[] testChars = { (char) 32, (char) 126 };\r\n    final boolean[] found = { false, false };\r\n    // Test failures have been observed on GitHub builds with a 100 limit.\r\n    for (int i = 0; i < LOOP_COUNT; i++) {\r\n        final String randString = rsu.nextAscii(10);\r\n        for (int j = 0; j < testChars.length; j++) {\r\n            if (randString.indexOf(testChars[j]) > 0) {\r\n                found[j] = true;\r\n            }\r\n        }\r\n    }\r\n    for (int i = 0; i < testChars.length; i++) {\r\n        assertTrue(found[i], \"ascii character not generated in 1000 attempts: \" + (int) testChars[i] + \" -- repeated failures indicate a problem\");\r\n    }\r\n}",
  "annotations" : [ "ParameterizedTest" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\RandomStringUtilsTest.java",
  "methodName" : "testRandomAsciiRange",
  "sourceCode" : "@ParameterizedTest\r\n@MethodSource(\"randomProvider\")\r\nvoid testRandomAsciiRange(final RandomStringUtils rsu) {\r\n    final int expectedMinLengthInclusive = 1;\r\n    final int expectedMaxLengthExclusive = 11;\r\n    final String pattern = \"^\\\\p{ASCII}{\" + expectedMinLengthInclusive + ',' + expectedMaxLengthExclusive + \"}$\";\r\n    int maxCreatedLength = expectedMinLengthInclusive;\r\n    int minCreatedLength = expectedMaxLengthExclusive - 1;\r\n    for (int i = 0; i < LOOP_COUNT; i++) {\r\n        final String s = rsu.nextAscii(expectedMinLengthInclusive, expectedMaxLengthExclusive);\r\n        assertTrue(s.length() >= expectedMinLengthInclusive, \"within range\");\r\n        assertTrue(s.length() <= expectedMaxLengthExclusive - 1, \"within range\");\r\n        assertTrue(s.matches(pattern), s);\r\n        if (s.length() < minCreatedLength) {\r\n            minCreatedLength = s.length();\r\n        }\r\n        if (s.length() > maxCreatedLength) {\r\n            maxCreatedLength = s.length();\r\n        }\r\n    }\r\n    assertEquals(expectedMinLengthInclusive, minCreatedLength, \"min generated, may fail randomly rarely\");\r\n    assertEquals(expectedMaxLengthExclusive - 1, maxCreatedLength, \"max generated, may fail randomly rarely\");\r\n}",
  "annotations" : [ "ParameterizedTest" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\RandomStringUtilsTest.java",
  "methodName" : "testRandomGraphRange",
  "sourceCode" : "@ParameterizedTest\r\n@MethodSource(\"randomProvider\")\r\nvoid testRandomGraphRange(final RandomStringUtils rsu) {\r\n    final int expectedMinLengthInclusive = 1;\r\n    final int expectedMaxLengthExclusive = 11;\r\n    final String pattern = \"^\\\\p{Graph}{\" + expectedMinLengthInclusive + ',' + expectedMaxLengthExclusive + \"}$\";\r\n    int maxCreatedLength = expectedMinLengthInclusive;\r\n    int minCreatedLength = expectedMaxLengthExclusive - 1;\r\n    for (int i = 0; i < LOOP_COUNT; i++) {\r\n        final String s = rsu.nextGraph(expectedMinLengthInclusive, expectedMaxLengthExclusive);\r\n        assertTrue(s.length() >= expectedMinLengthInclusive, \"within range\");\r\n        assertTrue(s.length() <= expectedMaxLengthExclusive - 1, \"within range\");\r\n        assertTrue(s.matches(pattern), s);\r\n        if (s.length() < minCreatedLength) {\r\n            minCreatedLength = s.length();\r\n        }\r\n        if (s.length() > maxCreatedLength) {\r\n            maxCreatedLength = s.length();\r\n        }\r\n    }\r\n    assertEquals(expectedMinLengthInclusive, minCreatedLength, \"min generated, may fail randomly rarely\");\r\n    assertEquals(expectedMaxLengthExclusive - 1, maxCreatedLength, \"max generated, may fail randomly rarely\");\r\n}",
  "annotations" : [ "ParameterizedTest" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\RandomStringUtilsTest.java",
  "methodName" : "testRandomNumeric",
  "sourceCode" : "/**\r\n * Make sure '0' and '9' are generated by randomNumeric This test will fail randomly with probability = 2 * (9/10)**1000 ~ 3.5E-46\r\n *\r\n * @param rsu the instance to test\r\n */\r\n@ParameterizedTest\r\n@MethodSource(\"randomProvider\")\r\nvoid testRandomNumeric(final RandomStringUtils rsu) {\r\n    final char[] testChars = { '0', '9' };\r\n    final boolean[] found = { false, false };\r\n    for (int i = 0; i < LOOP_COUNT; i++) {\r\n        final String randString = rsu.nextNumeric(10);\r\n        for (int j = 0; j < testChars.length; j++) {\r\n            if (randString.indexOf(testChars[j]) > 0) {\r\n                found[j] = true;\r\n            }\r\n        }\r\n    }\r\n    for (int i = 0; i < testChars.length; i++) {\r\n        assertTrue(found[i], \"digit not generated in 1000 attempts: \" + testChars[i] + \" -- repeated failures indicate a problem \");\r\n    }\r\n}",
  "annotations" : [ "ParameterizedTest" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\RandomStringUtilsTest.java",
  "methodName" : "testRandomNumericRange",
  "sourceCode" : "@ParameterizedTest\r\n@MethodSource(\"randomProvider\")\r\nvoid testRandomNumericRange(final RandomStringUtils rsu) {\r\n    final int expectedMinLengthInclusive = 1;\r\n    final int expectedMaxLengthExclusive = 11;\r\n    final String pattern = \"^\\\\p{Digit}{\" + expectedMinLengthInclusive + ',' + expectedMaxLengthExclusive + \"}$\";\r\n    int maxCreatedLength = expectedMinLengthInclusive;\r\n    int minCreatedLength = expectedMaxLengthExclusive - 1;\r\n    for (int i = 0; i < LOOP_COUNT; i++) {\r\n        final String s = rsu.nextNumeric(expectedMinLengthInclusive, expectedMaxLengthExclusive);\r\n        assertTrue(s.length() >= expectedMinLengthInclusive, \"within range\");\r\n        assertTrue(s.length() <= expectedMaxLengthExclusive - 1, \"within range\");\r\n        assertTrue(s.matches(pattern), s);\r\n        if (s.length() < minCreatedLength) {\r\n            minCreatedLength = s.length();\r\n        }\r\n        if (s.length() > maxCreatedLength) {\r\n            maxCreatedLength = s.length();\r\n        }\r\n    }\r\n    assertEquals(expectedMinLengthInclusive, minCreatedLength, \"min generated, may fail randomly rarely\");\r\n    assertEquals(expectedMaxLengthExclusive - 1, maxCreatedLength, \"max generated, may fail randomly rarely\");\r\n}",
  "annotations" : [ "ParameterizedTest" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\RandomStringUtilsTest.java",
  "methodName" : "testRandomParameter",
  "sourceCode" : "@Test\r\nvoid testRandomParameter() {\r\n    final long seedMillis = System.currentTimeMillis();\r\n    final String r1 = RandomStringUtils.random(50, 0, 0, true, true, null, new Random(seedMillis));\r\n    final String r2 = RandomStringUtils.random(50, 0, 0, true, true, null, new Random(seedMillis));\r\n    assertEquals(r1, r2, \"r1.equals(r2)\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\RandomStringUtilsTest.java",
  "methodName" : "testRandomPrintRange",
  "sourceCode" : "@ParameterizedTest\r\n@MethodSource(\"randomProvider\")\r\nvoid testRandomPrintRange(final RandomStringUtils rsu) {\r\n    final int expectedMinLengthInclusive = 1;\r\n    final int expectedMaxLengthExclusive = 11;\r\n    final String pattern = \"^\\\\p{Print}{\" + expectedMinLengthInclusive + ',' + expectedMaxLengthExclusive + \"}$\";\r\n    int maxCreatedLength = expectedMinLengthInclusive;\r\n    int minCreatedLength = expectedMaxLengthExclusive - 1;\r\n    for (int i = 0; i < LOOP_COUNT; i++) {\r\n        final String s = rsu.nextPrint(expectedMinLengthInclusive, expectedMaxLengthExclusive);\r\n        assertTrue(s.length() >= expectedMinLengthInclusive, \"within range\");\r\n        assertTrue(s.length() <= expectedMaxLengthExclusive - 1, \"within range\");\r\n        assertTrue(s.matches(pattern), s);\r\n        if (s.length() < minCreatedLength) {\r\n            minCreatedLength = s.length();\r\n        }\r\n        if (s.length() > maxCreatedLength) {\r\n            maxCreatedLength = s.length();\r\n        }\r\n    }\r\n    assertEquals(expectedMinLengthInclusive, minCreatedLength, \"min generated, may fail randomly rarely\");\r\n    assertEquals(expectedMaxLengthExclusive - 1, maxCreatedLength, \"max generated, may fail randomly rarely\");\r\n}",
  "annotations" : [ "ParameterizedTest" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\RandomStringUtilsTest.java",
  "methodName" : "testRandomWithChars",
  "sourceCode" : "/**\r\n * Test {@code RandomStringUtils.random} works appropriately when chars specified.\r\n *\r\n * @param rsu the instance to test.\r\n */\r\n@ParameterizedTest\r\n@MethodSource(\"randomProvider\")\r\nvoid testRandomWithChars(final RandomStringUtils rsu) {\r\n    final char[] digitChars = { '0', '1', '2', '3', '4', '5', '6', '7', '8', '9' };\r\n    final String r1 = rsu.next(50, 0, 0, true, true, digitChars);\r\n    assertEquals(50, r1.length(), \"randomNumeric(50)\");\r\n    for (int i = 0; i < r1.length(); i++) {\r\n        assertTrue(Character.isDigit(r1.charAt(i)) && !Character.isLetter(r1.charAt(i)), \"r1 contains numeric\");\r\n    }\r\n    final String r2 = rsu.nextNumeric(50);\r\n    assertNotEquals(r1, r2);\r\n    final String r3 = rsu.next(50, 0, 0, true, true, digitChars);\r\n    assertNotEquals(r1, r3);\r\n    assertNotEquals(r2, r3);\r\n}",
  "annotations" : [ "ParameterizedTest" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\RandomUtilsTest.java",
  "methodName" : "testBoolean",
  "sourceCode" : "/**\r\n * Tests next boolean\r\n */\r\n@Test\r\nvoid testBoolean() {\r\n    final boolean result = RandomUtils.nextBoolean();\r\n    assertTrue(result || !result);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\RandomUtilsTest.java",
  "methodName" : "testBoolean",
  "sourceCode" : "@ParameterizedTest\r\n@MethodSource(\"randomProvider\")\r\nvoid testBoolean(final RandomUtils ru) {\r\n    final boolean result = ru.randomBoolean();\r\n    assertTrue(result || !result);\r\n}",
  "annotations" : [ "ParameterizedTest" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\RandomUtilsTest.java",
  "methodName" : "testConstructor",
  "sourceCode" : "@Test\r\nvoid testConstructor() {\r\n    assertNotNull(new RandomUtils());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\RandomUtilsTest.java",
  "methodName" : "testExtremeRangeDouble",
  "sourceCode" : "/**\r\n * Tests extreme range.\r\n */\r\n@Test\r\nvoid testExtremeRangeDouble() {\r\n    final double result = RandomUtils.nextDouble(0, Double.MAX_VALUE);\r\n    // TODO: should be <max?\r\n    assertTrue(result >= 0 && result <= Double.MAX_VALUE);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\RandomUtilsTest.java",
  "methodName" : "testExtremeRangeDouble",
  "sourceCode" : "@ParameterizedTest\r\n@MethodSource(\"randomProvider\")\r\nvoid testExtremeRangeDouble(final RandomUtils ru) {\r\n    final double result = ru.randomDouble(0, Double.MAX_VALUE);\r\n    // TODO: should be <max?\r\n    assertTrue(result >= 0 && result <= Double.MAX_VALUE);\r\n}",
  "annotations" : [ "ParameterizedTest" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\RandomUtilsTest.java",
  "methodName" : "testExtremeRangeFloat",
  "sourceCode" : "/**\r\n * Tests extreme range.\r\n */\r\n@Test\r\nvoid testExtremeRangeFloat() {\r\n    final float result = RandomUtils.nextFloat(0, Float.MAX_VALUE);\r\n    // TODO: should be <max?\r\n    assertTrue(result >= 0f && result <= Float.MAX_VALUE);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\RandomUtilsTest.java",
  "methodName" : "testExtremeRangeFloat",
  "sourceCode" : "/**\r\n * Tests extreme range.\r\n */\r\n@ParameterizedTest\r\n@MethodSource(\"randomProvider\")\r\nvoid testExtremeRangeFloat(final RandomUtils ru) {\r\n    final float result = ru.randomFloat(0, Float.MAX_VALUE);\r\n    // TODO: should be <max?\r\n    assertTrue(result >= 0f && result <= Float.MAX_VALUE);\r\n}",
  "annotations" : [ "ParameterizedTest" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\RandomUtilsTest.java",
  "methodName" : "testExtremeRangeInt",
  "sourceCode" : "/**\r\n * Tests extreme range.\r\n */\r\n@Test\r\nvoid testExtremeRangeInt() {\r\n    final int result = RandomUtils.nextInt(0, Integer.MAX_VALUE);\r\n    assertTrue(result >= 0);\r\n    assertTrue(result < Integer.MAX_VALUE);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\RandomUtilsTest.java",
  "methodName" : "testExtremeRangeInt",
  "sourceCode" : "/**\r\n * Tests extreme range.\r\n */\r\n@ParameterizedTest\r\n@MethodSource(\"randomProvider\")\r\nvoid testExtremeRangeInt(final RandomUtils ru) {\r\n    final int result = ru.randomInt(0, Integer.MAX_VALUE);\r\n    assertTrue(result >= 0);\r\n    assertTrue(result < Integer.MAX_VALUE);\r\n}",
  "annotations" : [ "ParameterizedTest" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\RandomUtilsTest.java",
  "methodName" : "testExtremeRangeLong",
  "sourceCode" : "/**\r\n * Tests extreme range.\r\n */\r\n@Test\r\nvoid testExtremeRangeLong() {\r\n    final long result = RandomUtils.nextLong(0, Long.MAX_VALUE);\r\n    assertTrue(result >= 0);\r\n    assertTrue(result < Long.MAX_VALUE);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\RandomUtilsTest.java",
  "methodName" : "testExtremeRangeLong",
  "sourceCode" : "/**\r\n * Tests extreme range.\r\n */\r\n@ParameterizedTest\r\n@MethodSource(\"randomProvider\")\r\nvoid testExtremeRangeLong(final RandomUtils ru) {\r\n    final long result = ru.randomLong(0, Long.MAX_VALUE);\r\n    assertTrue(result >= 0);\r\n    assertTrue(result < Long.MAX_VALUE);\r\n}",
  "annotations" : [ "ParameterizedTest" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\RandomUtilsTest.java",
  "methodName" : "testLargeValueRangeLong",
  "sourceCode" : "/**\r\n * Test a large value for long. A previous implementation using\r\n * {@link RandomUtils#nextDouble(double, double)} could generate a value equal\r\n * to the upper limit.\r\n *\r\n * <pre>\r\n * return (long) nextDouble(startInclusive, endExclusive);\r\n * </pre>\r\n *\r\n * <p>See LANG-1592.</p>\r\n */\r\n@Test\r\nvoid testLargeValueRangeLong() {\r\n    final long startInclusive = 12900000000001L;\r\n    final long endExclusive = 12900000000016L;\r\n    // Note: The method using 'return (long) nextDouble(startInclusive, endExclusive)'\r\n    // takes thousands of calls to generate an error. This size loop fails most\r\n    // of the time with the previous method.\r\n    final int n = (int) (endExclusive - startInclusive) * 1000;\r\n    for (int i = 0; i < n; i++) {\r\n        assertNotEquals(endExclusive, RandomUtils.nextLong(startInclusive, endExclusive));\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\RandomUtilsTest.java",
  "methodName" : "testLargeValueRangeLong",
  "sourceCode" : "/**\r\n * Test a large value for long. A previous implementation using\r\n * {@link RandomUtils#nextDouble(double, double)} could generate a value equal\r\n * to the upper limit.\r\n *\r\n * <pre>\r\n * return (long) nextDouble(startInclusive, endExclusive);\r\n * </pre>\r\n *\r\n * <p>See LANG-1592.</p>\r\n */\r\n@ParameterizedTest\r\n@MethodSource(\"randomProvider\")\r\nvoid testLargeValueRangeLong(final RandomUtils ru) {\r\n    final long startInclusive = 12900000000001L;\r\n    final long endExclusive = 12900000000016L;\r\n    // Note: The method using 'return (long) nextDouble(startInclusive, endExclusive)'\r\n    // takes thousands of calls to generate an error. This size loop fails most\r\n    // of the time with the previous method.\r\n    final int n = (int) (endExclusive - startInclusive) * 1000;\r\n    for (int i = 0; i < n; i++) {\r\n        assertNotEquals(endExclusive, ru.randomLong(startInclusive, endExclusive));\r\n    }\r\n}",
  "annotations" : [ "ParameterizedTest" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\RandomUtilsTest.java",
  "methodName" : "testNextBytes",
  "sourceCode" : "/**\r\n * Tests random byte array.\r\n */\r\n@Test\r\nvoid testNextBytes() {\r\n    final byte[] result = RandomUtils.nextBytes(20);\r\n    assertEquals(20, result.length);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\RandomUtilsTest.java",
  "methodName" : "testNextBytes",
  "sourceCode" : "/**\r\n * Tests random byte array.\r\n */\r\n@ParameterizedTest\r\n@MethodSource(\"randomProvider\")\r\nvoid testNextBytes(final RandomUtils ru) {\r\n    final byte[] result = ru.randomBytes(20);\r\n    assertEquals(20, result.length);\r\n}",
  "annotations" : [ "ParameterizedTest" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\RandomUtilsTest.java",
  "methodName" : "testNextBytesNegative",
  "sourceCode" : "@Test\r\nvoid testNextBytesNegative() {\r\n    assertIllegalArgumentException(() -> RandomUtils.nextBytes(-1));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\RandomUtilsTest.java",
  "methodName" : "testNextBytesNegative",
  "sourceCode" : "@ParameterizedTest\r\n@MethodSource(\"randomProvider\")\r\nvoid testNextBytesNegative(final RandomUtils ru) {\r\n    assertIllegalArgumentException(() -> ru.randomBytes(-1));\r\n}",
  "annotations" : [ "ParameterizedTest" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\RandomUtilsTest.java",
  "methodName" : "testNextDouble",
  "sourceCode" : "/**\r\n * Tests next double range.\r\n */\r\n@Test\r\nvoid testNextDouble() {\r\n    final double result = RandomUtils.nextDouble(33d, 42d);\r\n    assertTrue(result >= 33d);\r\n    assertTrue(result < 42d);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\RandomUtilsTest.java",
  "methodName" : "testNextDouble",
  "sourceCode" : "/**\r\n * Tests next double range.\r\n */\r\n@ParameterizedTest\r\n@MethodSource(\"randomProvider\")\r\nvoid testNextDouble(final RandomUtils ru) {\r\n    final double result = ru.randomDouble(33d, 42d);\r\n    assertTrue(result >= 33d);\r\n    assertTrue(result < 42d);\r\n}",
  "annotations" : [ "ParameterizedTest" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\RandomUtilsTest.java",
  "methodName" : "testNextDoubleLowerGreaterUpper",
  "sourceCode" : "@Test\r\nvoid testNextDoubleLowerGreaterUpper() {\r\n    assertIllegalArgumentException(() -> RandomUtils.nextDouble(2, 1));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\RandomUtilsTest.java",
  "methodName" : "testNextDoubleLowerGreaterUpper",
  "sourceCode" : "@ParameterizedTest\r\n@MethodSource(\"randomProvider\")\r\nvoid testNextDoubleLowerGreaterUpper(final RandomUtils ru) {\r\n    assertIllegalArgumentException(() -> ru.randomDouble(2, 1));\r\n}",
  "annotations" : [ "ParameterizedTest" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\RandomUtilsTest.java",
  "methodName" : "testNextDoubleMinimalRange",
  "sourceCode" : "/**\r\n * Test next double range with minimal range.\r\n */\r\n@Test\r\nvoid testNextDoubleMinimalRange() {\r\n    assertEquals(42.1, RandomUtils.nextDouble(42.1, 42.1), DELTA);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\RandomUtilsTest.java",
  "methodName" : "testNextDoubleMinimalRange",
  "sourceCode" : "/**\r\n * Test next double range with minimal range.\r\n */\r\n@ParameterizedTest\r\n@MethodSource(\"randomProvider\")\r\nvoid testNextDoubleMinimalRange(final RandomUtils ru) {\r\n    assertEquals(42.1, ru.randomDouble(42.1, 42.1), DELTA);\r\n}",
  "annotations" : [ "ParameterizedTest" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\RandomUtilsTest.java",
  "methodName" : "testNextDoubleNegative",
  "sourceCode" : "@Test\r\nvoid testNextDoubleNegative() {\r\n    assertIllegalArgumentException(() -> RandomUtils.nextDouble(-1, 1));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\RandomUtilsTest.java",
  "methodName" : "testNextDoubleNegative",
  "sourceCode" : "@ParameterizedTest\r\n@MethodSource(\"randomProvider\")\r\nvoid testNextDoubleNegative(final RandomUtils ru) {\r\n    assertIllegalArgumentException(() -> ru.randomDouble(-1, 1));\r\n}",
  "annotations" : [ "ParameterizedTest" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\RandomUtilsTest.java",
  "methodName" : "testNextDoubleRandomResult",
  "sourceCode" : "/**\r\n * Tests next double range, random result.\r\n */\r\n@Test\r\nvoid testNextDoubleRandomResult() {\r\n    final double result = RandomUtils.nextDouble();\r\n    assertTrue(result >= 0d);\r\n    assertTrue(result < Double.MAX_VALUE);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\RandomUtilsTest.java",
  "methodName" : "testNextDoubleRandomResult",
  "sourceCode" : "/**\r\n * Tests next double range, random result.\r\n */\r\n@ParameterizedTest\r\n@MethodSource(\"randomProvider\")\r\nvoid testNextDoubleRandomResult(final RandomUtils ru) {\r\n    final double result = ru.randomDouble();\r\n    assertTrue(result >= 0d);\r\n    assertTrue(result < Double.MAX_VALUE);\r\n}",
  "annotations" : [ "ParameterizedTest" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\RandomUtilsTest.java",
  "methodName" : "testNextFloat",
  "sourceCode" : "/**\r\n * Tests next float range.\r\n */\r\n@Test\r\nvoid testNextFloat() {\r\n    final float result = RandomUtils.nextFloat(33f, 42f);\r\n    assertTrue(result >= 33f);\r\n    assertTrue(result < 42f);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\RandomUtilsTest.java",
  "methodName" : "testNextFloat",
  "sourceCode" : "/**\r\n * Tests next float range.\r\n */\r\n@ParameterizedTest\r\n@MethodSource(\"randomProvider\")\r\nvoid testNextFloat(final RandomUtils ru) {\r\n    final float result = ru.randomFloat(33f, 42f);\r\n    assertTrue(result >= 33f);\r\n    assertTrue(result < 42f);\r\n}",
  "annotations" : [ "ParameterizedTest" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\RandomUtilsTest.java",
  "methodName" : "testNextFloatLowerGreaterUpper",
  "sourceCode" : "@Test\r\nvoid testNextFloatLowerGreaterUpper() {\r\n    assertIllegalArgumentException(() -> RandomUtils.nextFloat(2, 1));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\RandomUtilsTest.java",
  "methodName" : "testNextFloatLowerGreaterUpper",
  "sourceCode" : "@ParameterizedTest\r\n@MethodSource(\"randomProvider\")\r\nvoid testNextFloatLowerGreaterUpper(final RandomUtils ru) {\r\n    assertIllegalArgumentException(() -> ru.randomFloat(2, 1));\r\n}",
  "annotations" : [ "ParameterizedTest" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\RandomUtilsTest.java",
  "methodName" : "testNextFloatMinimalRange",
  "sourceCode" : "/**\r\n * Test next float range with minimal range.\r\n */\r\n@Test\r\nvoid testNextFloatMinimalRange() {\r\n    assertEquals(42.1f, RandomUtils.nextFloat(42.1f, 42.1f), DELTA);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\RandomUtilsTest.java",
  "methodName" : "testNextFloatMinimalRange",
  "sourceCode" : "/**\r\n * Test next float range with minimal range.\r\n */\r\n@ParameterizedTest\r\n@MethodSource(\"randomProvider\")\r\nvoid testNextFloatMinimalRange(final RandomUtils ru) {\r\n    assertEquals(42.1f, ru.randomFloat(42.1f, 42.1f), DELTA);\r\n}",
  "annotations" : [ "ParameterizedTest" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\RandomUtilsTest.java",
  "methodName" : "testNextFloatNegative",
  "sourceCode" : "@Test\r\nvoid testNextFloatNegative() {\r\n    assertIllegalArgumentException(() -> RandomUtils.nextFloat(-1, 1));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\RandomUtilsTest.java",
  "methodName" : "testNextFloatNegative",
  "sourceCode" : "@ParameterizedTest\r\n@MethodSource(\"randomProvider\")\r\nvoid testNextFloatNegative(final RandomUtils ru) {\r\n    assertIllegalArgumentException(() -> ru.randomFloat(-1, 1));\r\n}",
  "annotations" : [ "ParameterizedTest" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\RandomUtilsTest.java",
  "methodName" : "testNextFloatRandomResult",
  "sourceCode" : "/**\r\n * Tests next float range, random result.\r\n */\r\n@Test\r\nvoid testNextFloatRandomResult() {\r\n    final float result = RandomUtils.nextFloat();\r\n    assertTrue(result >= 0f);\r\n    assertTrue(result < Float.MAX_VALUE);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\RandomUtilsTest.java",
  "methodName" : "testNextFloatRandomResult",
  "sourceCode" : "/**\r\n * Tests next float range, random result.\r\n */\r\n@ParameterizedTest\r\n@MethodSource(\"randomProvider\")\r\nvoid testNextFloatRandomResult(final RandomUtils ru) {\r\n    final float result = ru.randomFloat();\r\n    assertTrue(result >= 0f);\r\n    assertTrue(result < Float.MAX_VALUE);\r\n}",
  "annotations" : [ "ParameterizedTest" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\RandomUtilsTest.java",
  "methodName" : "testNextInt",
  "sourceCode" : "/**\r\n * Tests next int range.\r\n */\r\n@Test\r\nvoid testNextInt() {\r\n    final int result = RandomUtils.nextInt(33, 42);\r\n    assertTrue(result >= 33);\r\n    assertTrue(result < 42);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\RandomUtilsTest.java",
  "methodName" : "testNextInt",
  "sourceCode" : "/**\r\n * Tests next int range.\r\n */\r\n@ParameterizedTest\r\n@MethodSource(\"randomProvider\")\r\nvoid testNextInt(final RandomUtils ru) {\r\n    final int result = ru.randomInt(33, 42);\r\n    assertTrue(result >= 33);\r\n    assertTrue(result < 42);\r\n}",
  "annotations" : [ "ParameterizedTest" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\RandomUtilsTest.java",
  "methodName" : "testNextIntLowerGreaterUpper",
  "sourceCode" : "@Test\r\nvoid testNextIntLowerGreaterUpper() {\r\n    assertIllegalArgumentException(() -> RandomUtils.nextInt(2, 1));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\RandomUtilsTest.java",
  "methodName" : "testNextIntLowerGreaterUpper",
  "sourceCode" : "@ParameterizedTest\r\n@MethodSource(\"randomProvider\")\r\nvoid testNextIntLowerGreaterUpper(final RandomUtils ru) {\r\n    assertIllegalArgumentException(() -> ru.randomInt(2, 1));\r\n}",
  "annotations" : [ "ParameterizedTest" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\RandomUtilsTest.java",
  "methodName" : "testNextIntMinimalRange",
  "sourceCode" : "/**\r\n * Test next int range with minimal range.\r\n */\r\n@Test\r\nvoid testNextIntMinimalRange() {\r\n    assertEquals(42, RandomUtils.nextInt(42, 42));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\RandomUtilsTest.java",
  "methodName" : "testNextIntMinimalRange",
  "sourceCode" : "/**\r\n * Test next int range with minimal range.\r\n */\r\n@ParameterizedTest\r\n@MethodSource(\"randomProvider\")\r\nvoid testNextIntMinimalRange(final RandomUtils ru) {\r\n    assertEquals(42, ru.randomInt(42, 42));\r\n}",
  "annotations" : [ "ParameterizedTest" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\RandomUtilsTest.java",
  "methodName" : "testNextIntNegative",
  "sourceCode" : "@Test\r\nvoid testNextIntNegative() {\r\n    assertIllegalArgumentException(() -> RandomUtils.nextInt(-1, 1));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\RandomUtilsTest.java",
  "methodName" : "testNextIntNegative",
  "sourceCode" : "@ParameterizedTest\r\n@MethodSource(\"randomProvider\")\r\nvoid testNextIntNegative(final RandomUtils ru) {\r\n    assertIllegalArgumentException(() -> ru.randomInt(-1, 1));\r\n}",
  "annotations" : [ "ParameterizedTest" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\RandomUtilsTest.java",
  "methodName" : "testNextIntRandomResult",
  "sourceCode" : "/**\r\n * Tests next int range, random result.\r\n */\r\n@Test\r\nvoid testNextIntRandomResult() {\r\n    final int randomResult = RandomUtils.nextInt();\r\n    assertTrue(randomResult > 0);\r\n    assertTrue(randomResult < Integer.MAX_VALUE);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\RandomUtilsTest.java",
  "methodName" : "testNextIntRandomResult",
  "sourceCode" : "/**\r\n * Tests next int range, random result.\r\n */\r\n@ParameterizedTest\r\n@MethodSource(\"randomProvider\")\r\nvoid testNextIntRandomResult(final RandomUtils ru) {\r\n    final int randomResult = ru.randomInt();\r\n    assertTrue(randomResult > 0);\r\n    assertTrue(randomResult < Integer.MAX_VALUE);\r\n}",
  "annotations" : [ "ParameterizedTest" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\RandomUtilsTest.java",
  "methodName" : "testNextLong",
  "sourceCode" : "/**\r\n * Tests next long range.\r\n */\r\n@Test\r\nvoid testNextLong() {\r\n    final long result = RandomUtils.nextLong(33L, 42L);\r\n    assertTrue(result >= 33L);\r\n    assertTrue(result < 42L);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\RandomUtilsTest.java",
  "methodName" : "testNextLong",
  "sourceCode" : "/**\r\n * Tests next long range.\r\n */\r\n@ParameterizedTest\r\n@MethodSource(\"randomProvider\")\r\nvoid testNextLong(final RandomUtils ru) {\r\n    final long result = ru.randomLong(33L, 42L);\r\n    assertTrue(result >= 33L);\r\n    assertTrue(result < 42L);\r\n}",
  "annotations" : [ "ParameterizedTest" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\RandomUtilsTest.java",
  "methodName" : "testNextLongLowerGreaterUpper",
  "sourceCode" : "@Test\r\nvoid testNextLongLowerGreaterUpper() {\r\n    assertIllegalArgumentException(() -> RandomUtils.nextLong(2, 1));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\RandomUtilsTest.java",
  "methodName" : "testNextLongLowerGreaterUpper",
  "sourceCode" : "@ParameterizedTest\r\n@MethodSource(\"randomProvider\")\r\nvoid testNextLongLowerGreaterUpper(final RandomUtils ru) {\r\n    assertIllegalArgumentException(() -> ru.randomLong(2, 1));\r\n}",
  "annotations" : [ "ParameterizedTest" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\RandomUtilsTest.java",
  "methodName" : "testNextLongMinimalRange",
  "sourceCode" : "/**\r\n * Test next long range with minimal range.\r\n */\r\n@Test\r\nvoid testNextLongMinimalRange() {\r\n    assertEquals(42L, RandomUtils.nextLong(42L, 42L));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\RandomUtilsTest.java",
  "methodName" : "testNextLongMinimalRange",
  "sourceCode" : "/**\r\n * Test next long range with minimal range.\r\n */\r\n@ParameterizedTest\r\n@MethodSource(\"randomProvider\")\r\nvoid testNextLongMinimalRange(final RandomUtils ru) {\r\n    assertEquals(42L, ru.randomLong(42L, 42L));\r\n}",
  "annotations" : [ "ParameterizedTest" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\RandomUtilsTest.java",
  "methodName" : "testNextLongNegative",
  "sourceCode" : "@Test\r\nvoid testNextLongNegative() {\r\n    assertIllegalArgumentException(() -> RandomUtils.nextLong(-1, 1));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\RandomUtilsTest.java",
  "methodName" : "testNextLongNegative",
  "sourceCode" : "@ParameterizedTest\r\n@MethodSource(\"randomProvider\")\r\nvoid testNextLongNegative(final RandomUtils ru) {\r\n    assertIllegalArgumentException(() -> ru.randomLong(-1, 1));\r\n}",
  "annotations" : [ "ParameterizedTest" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\RandomUtilsTest.java",
  "methodName" : "testNextLongRandomResult",
  "sourceCode" : "/**\r\n * Tests next long range, random result.\r\n */\r\n@Test\r\nvoid testNextLongRandomResult() {\r\n    final long result = RandomUtils.nextLong();\r\n    assertTrue(result >= 0L);\r\n    assertTrue(result < Long.MAX_VALUE);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\RandomUtilsTest.java",
  "methodName" : "testNextLongRandomResult",
  "sourceCode" : "/**\r\n * Tests next long range, random result.\r\n */\r\n@ParameterizedTest\r\n@MethodSource(\"randomProvider\")\r\nvoid testNextLongRandomResult(final RandomUtils ru) {\r\n    final long result = ru.randomLong();\r\n    assertTrue(result >= 0L);\r\n    assertTrue(result < Long.MAX_VALUE);\r\n}",
  "annotations" : [ "ParameterizedTest" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\RandomUtilsTest.java",
  "methodName" : "testZeroLengthNextBytes",
  "sourceCode" : "/**\r\n * Tests a zero byte array length.\r\n */\r\n@Test\r\nvoid testZeroLengthNextBytes() {\r\n    assertArrayEquals(new byte[0], RandomUtils.nextBytes(0));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\RandomUtilsTest.java",
  "methodName" : "testZeroLengthNextBytes",
  "sourceCode" : "/**\r\n * Tests a zero byte array length.\r\n */\r\n@ParameterizedTest\r\n@MethodSource(\"randomProvider\")\r\nvoid testZeroLengthNextBytes(final RandomUtils ru) {\r\n    assertArrayEquals(new byte[0], ru.randomBytes(0));\r\n}",
  "annotations" : [ "ParameterizedTest" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\RangeTest.java",
  "methodName" : "testBetweenWithCompare",
  "sourceCode" : "@Test\r\nvoid testBetweenWithCompare() {\r\n    // all integers are equal\r\n    final Comparator<Integer> c = (o1, o2) -> 0;\r\n    final Comparator<String> lengthComp = Comparator.comparingInt(String::length);\r\n    Range<Integer> rb = Range.between(-10, 20);\r\n    assertFalse(rb.contains(null), \"should not contain null\");\r\n    assertTrue(rb.contains(10), \"should contain 10\");\r\n    assertTrue(rb.contains(-10), \"should contain -10\");\r\n    assertFalse(rb.contains(21), \"should not contain 21\");\r\n    assertFalse(rb.contains(-11), \"should not contain -11\");\r\n    rb = Range.between(-10, 20, c);\r\n    assertFalse(rb.contains(null), \"should not contain null\");\r\n    assertTrue(rb.contains(10), \"should contain 10\");\r\n    assertTrue(rb.contains(-10), \"should contain -10\");\r\n    assertTrue(rb.contains(21), \"should contain 21\");\r\n    assertTrue(rb.contains(-11), \"should contain -11\");\r\n    Range<String> rbstr = Range.between(\"house\", \"i\");\r\n    assertFalse(rbstr.contains(null), \"should not contain null\");\r\n    assertTrue(rbstr.contains(\"house\"), \"should contain house\");\r\n    assertTrue(rbstr.contains(\"i\"), \"should contain i\");\r\n    assertFalse(rbstr.contains(\"hose\"), \"should not contain hose\");\r\n    assertFalse(rbstr.contains(\"ice\"), \"should not contain ice\");\r\n    rbstr = Range.between(\"house\", \"i\", lengthComp);\r\n    assertFalse(rbstr.contains(null), \"should not contain null\");\r\n    assertTrue(rbstr.contains(\"house\"), \"should contain house\");\r\n    assertTrue(rbstr.contains(\"i\"), \"should contain i\");\r\n    assertFalse(rbstr.contains(\"houses\"), \"should not contain houses\");\r\n    assertFalse(rbstr.contains(\"\"), \"should not contain ''\");\r\n    assertNullPointerException(() -> Range.between(null, null, lengthComp));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\RangeTest.java",
  "methodName" : "testComparableConstructors",
  "sourceCode" : "@SuppressWarnings({ \"rawtypes\", \"unchecked\" })\r\n@Test\r\nvoid testComparableConstructors() {\r\n    final Comparable c = other -> 1;\r\n    final Range r1 = Range.is(c);\r\n    final Range r2 = Range.between(c, c);\r\n    assertTrue(r1.isNaturalOrdering());\r\n    assertTrue(r2.isNaturalOrdering());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\RangeTest.java",
  "methodName" : "testConstructorSignatureWithAbstractComparableClasses",
  "sourceCode" : "@Test\r\nvoid testConstructorSignatureWithAbstractComparableClasses() {\r\n    final DerivedComparableA derivedComparableA = new DerivedComparableA();\r\n    final DerivedComparableB derivedComparableB = new DerivedComparableB();\r\n    final Range<AbstractComparable> mixed = Range.between(derivedComparableA, derivedComparableB, null);\r\n    assertTrue(mixed.contains(derivedComparableA));\r\n    final Range<AbstractComparable> same = Range.between(derivedComparableA, derivedComparableA, null);\r\n    assertTrue(same.contains(derivedComparableA));\r\n    final Range<DerivedComparableA> rangeA = Range.between(derivedComparableA, derivedComparableA, null);\r\n    assertTrue(rangeA.contains(derivedComparableA));\r\n    final Range<DerivedComparableB> rangeB = Range.is(derivedComparableB, null);\r\n    assertTrue(rangeB.contains(derivedComparableB));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\RangeTest.java",
  "methodName" : "testContains",
  "sourceCode" : "@Test\r\nvoid testContains() {\r\n    assertFalse(intRange.contains(null));\r\n    assertFalse(intRange.contains(5));\r\n    assertTrue(intRange.contains(10));\r\n    assertTrue(intRange.contains(15));\r\n    assertTrue(intRange.contains(20));\r\n    assertFalse(intRange.contains(25));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\RangeTest.java",
  "methodName" : "testContainsRange",
  "sourceCode" : "@Test\r\nvoid testContainsRange() {\r\n    // null handling\r\n    assertFalse(intRange.containsRange(null));\r\n    // easy inside range\r\n    assertTrue(intRange.containsRange(Range.between(12, 18)));\r\n    // outside range on each side\r\n    assertFalse(intRange.containsRange(Range.between(32, 45)));\r\n    assertFalse(intRange.containsRange(Range.between(2, 8)));\r\n    // equals range\r\n    assertTrue(intRange.containsRange(Range.between(10, 20)));\r\n    // overlaps\r\n    assertFalse(intRange.containsRange(Range.between(9, 14)));\r\n    assertFalse(intRange.containsRange(Range.between(16, 21)));\r\n    // touches lower boundary\r\n    assertTrue(intRange.containsRange(Range.between(10, 19)));\r\n    assertFalse(intRange.containsRange(Range.between(10, 21)));\r\n    // touches upper boundary\r\n    assertTrue(intRange.containsRange(Range.between(11, 20)));\r\n    assertFalse(intRange.containsRange(Range.between(9, 20)));\r\n    // negative\r\n    assertFalse(intRange.containsRange(Range.between(-11, -18)));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\RangeTest.java",
  "methodName" : "testElementCompareTo",
  "sourceCode" : "@Test\r\nvoid testElementCompareTo() {\r\n    assertNullPointerException(() -> intRange.elementCompareTo(null));\r\n    assertEquals(-1, intRange.elementCompareTo(5));\r\n    assertEquals(0, intRange.elementCompareTo(10));\r\n    assertEquals(0, intRange.elementCompareTo(15));\r\n    assertEquals(0, intRange.elementCompareTo(20));\r\n    assertEquals(1, intRange.elementCompareTo(25));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\RangeTest.java",
  "methodName" : "testEqualsObject",
  "sourceCode" : "@Test\r\nvoid testEqualsObject() {\r\n    assertEquals(byteRange, byteRange);\r\n    assertEquals(byteRange, byteRange2);\r\n    assertEquals(byteRange2, byteRange2);\r\n    assertEquals(byteRange, byteRange);\r\n    assertEquals(byteRange2, byteRange2);\r\n    assertEquals(byteRange3, byteRange3);\r\n    assertNotEquals(byteRange2, byteRange3);\r\n    assertNotEquals(null, byteRange2);\r\n    assertNotEquals(\"Ni!\", byteRange2);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\RangeTest.java",
  "methodName" : "testFit",
  "sourceCode" : "@Test\r\nvoid testFit() {\r\n    assertEquals(intRange.getMinimum(), intRange.fit(Integer.MIN_VALUE));\r\n    assertEquals(intRange.getMinimum(), intRange.fit(intRange.getMinimum()));\r\n    assertEquals(intRange.getMaximum(), intRange.fit(Integer.MAX_VALUE));\r\n    assertEquals(intRange.getMaximum(), intRange.fit(intRange.getMaximum()));\r\n    assertEquals(15, intRange.fit(15));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\RangeTest.java",
  "methodName" : "testFitNull",
  "sourceCode" : "@Test\r\nvoid testFitNull() {\r\n    assertNullPointerException(() -> {\r\n        intRange.fit(null);\r\n    });\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\RangeTest.java",
  "methodName" : "testGetMaximum",
  "sourceCode" : "@Test\r\nvoid testGetMaximum() {\r\n    assertEquals(20, (int) intRange.getMaximum());\r\n    assertEquals(20L, (long) longRange.getMaximum());\r\n    assertEquals(20f, floatRange.getMaximum(), 0.00001f);\r\n    assertEquals(20d, doubleRange.getMaximum(), 0.00001d);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\RangeTest.java",
  "methodName" : "testGetMinimum",
  "sourceCode" : "@Test\r\nvoid testGetMinimum() {\r\n    assertEquals(10, (int) intRange.getMinimum());\r\n    assertEquals(10L, (long) longRange.getMinimum());\r\n    assertEquals(10f, floatRange.getMinimum(), 0.00001f);\r\n    assertEquals(10d, doubleRange.getMinimum(), 0.00001d);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\RangeTest.java",
  "methodName" : "testHashCode",
  "sourceCode" : "@Test\r\nvoid testHashCode() {\r\n    assertEquals(byteRange.hashCode(), byteRange2.hashCode());\r\n    assertNotEquals(byteRange.hashCode(), byteRange3.hashCode());\r\n    assertEquals(intRange.hashCode(), intRange.hashCode());\r\n    assertTrue(intRange.hashCode() != 0);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\RangeTest.java",
  "methodName" : "testIntersectionWith",
  "sourceCode" : "@Test\r\nvoid testIntersectionWith() {\r\n    assertSame(intRange, intRange.intersectionWith(intRange));\r\n    assertSame(byteRange, byteRange.intersectionWith(byteRange));\r\n    assertSame(longRange, longRange.intersectionWith(longRange));\r\n    assertSame(floatRange, floatRange.intersectionWith(floatRange));\r\n    assertSame(doubleRange, doubleRange.intersectionWith(doubleRange));\r\n    assertEquals(Range.between(10, 15), intRange.intersectionWith(Range.between(5, 15)));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\RangeTest.java",
  "methodName" : "testIntersectionWithNonOverlapping",
  "sourceCode" : "@Test\r\nvoid testIntersectionWithNonOverlapping() {\r\n    assertIllegalArgumentException(() -> intRange.intersectionWith(Range.between(0, 9)));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\RangeTest.java",
  "methodName" : "testIntersectionWithNull",
  "sourceCode" : "@Test\r\nvoid testIntersectionWithNull() {\r\n    assertIllegalArgumentException(() -> intRange.intersectionWith(null));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\RangeTest.java",
  "methodName" : "testIsAfter",
  "sourceCode" : "@Test\r\nvoid testIsAfter() {\r\n    assertFalse(intRange.isAfter(null));\r\n    assertTrue(intRange.isAfter(5));\r\n    assertFalse(intRange.isAfter(10));\r\n    assertFalse(intRange.isAfter(15));\r\n    assertFalse(intRange.isAfter(20));\r\n    assertFalse(intRange.isAfter(25));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\RangeTest.java",
  "methodName" : "testIsAfterRange",
  "sourceCode" : "@Test\r\nvoid testIsAfterRange() {\r\n    assertFalse(intRange.isAfterRange(null));\r\n    assertTrue(intRange.isAfterRange(Range.between(5, 9)));\r\n    assertFalse(intRange.isAfterRange(Range.between(5, 10)));\r\n    assertFalse(intRange.isAfterRange(Range.between(5, 20)));\r\n    assertFalse(intRange.isAfterRange(Range.between(5, 25)));\r\n    assertFalse(intRange.isAfterRange(Range.between(15, 25)));\r\n    assertFalse(intRange.isAfterRange(Range.between(21, 25)));\r\n    assertFalse(intRange.isAfterRange(Range.between(10, 20)));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\RangeTest.java",
  "methodName" : "testIsBefore",
  "sourceCode" : "@Test\r\nvoid testIsBefore() {\r\n    assertFalse(intRange.isBefore(null));\r\n    assertFalse(intRange.isBefore(5));\r\n    assertFalse(intRange.isBefore(10));\r\n    assertFalse(intRange.isBefore(15));\r\n    assertFalse(intRange.isBefore(20));\r\n    assertTrue(intRange.isBefore(25));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\RangeTest.java",
  "methodName" : "testIsBeforeRange",
  "sourceCode" : "@Test\r\nvoid testIsBeforeRange() {\r\n    assertFalse(intRange.isBeforeRange(null));\r\n    assertFalse(intRange.isBeforeRange(Range.between(5, 9)));\r\n    assertFalse(intRange.isBeforeRange(Range.between(5, 10)));\r\n    assertFalse(intRange.isBeforeRange(Range.between(5, 20)));\r\n    assertFalse(intRange.isBeforeRange(Range.between(5, 25)));\r\n    assertFalse(intRange.isBeforeRange(Range.between(15, 25)));\r\n    assertTrue(intRange.isBeforeRange(Range.between(21, 25)));\r\n    assertFalse(intRange.isBeforeRange(Range.between(10, 20)));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\RangeTest.java",
  "methodName" : "testIsEndedBy",
  "sourceCode" : "@Test\r\nvoid testIsEndedBy() {\r\n    assertFalse(intRange.isEndedBy(null));\r\n    assertFalse(intRange.isEndedBy(5));\r\n    assertFalse(intRange.isEndedBy(10));\r\n    assertFalse(intRange.isEndedBy(15));\r\n    assertTrue(intRange.isEndedBy(20));\r\n    assertFalse(intRange.isEndedBy(25));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\RangeTest.java",
  "methodName" : "testIsOverlappedBy",
  "sourceCode" : "@Test\r\nvoid testIsOverlappedBy() {\r\n    // null handling\r\n    assertFalse(intRange.isOverlappedBy(null));\r\n    // easy inside range\r\n    assertTrue(intRange.isOverlappedBy(Range.between(12, 18)));\r\n    // outside range on each side\r\n    assertFalse(intRange.isOverlappedBy(Range.between(32, 45)));\r\n    assertFalse(intRange.isOverlappedBy(Range.between(2, 8)));\r\n    // equals range\r\n    assertTrue(intRange.isOverlappedBy(Range.between(10, 20)));\r\n    // overlaps\r\n    assertTrue(intRange.isOverlappedBy(Range.between(9, 14)));\r\n    assertTrue(intRange.isOverlappedBy(Range.between(16, 21)));\r\n    // touches lower boundary\r\n    assertTrue(intRange.isOverlappedBy(Range.between(10, 19)));\r\n    assertTrue(intRange.isOverlappedBy(Range.between(10, 21)));\r\n    // touches upper boundary\r\n    assertTrue(intRange.isOverlappedBy(Range.between(11, 20)));\r\n    assertTrue(intRange.isOverlappedBy(Range.between(9, 20)));\r\n    // negative\r\n    assertFalse(intRange.isOverlappedBy(Range.between(-11, -18)));\r\n    // outside range whole range\r\n    assertTrue(intRange.isOverlappedBy(Range.between(9, 21)));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\RangeTest.java",
  "methodName" : "testIsStartedBy",
  "sourceCode" : "@Test\r\nvoid testIsStartedBy() {\r\n    assertFalse(intRange.isStartedBy(null));\r\n    assertFalse(intRange.isStartedBy(5));\r\n    assertTrue(intRange.isStartedBy(10));\r\n    assertFalse(intRange.isStartedBy(15));\r\n    assertFalse(intRange.isStartedBy(20));\r\n    assertFalse(intRange.isStartedBy(25));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\RangeTest.java",
  "methodName" : "testIsWithCompare",
  "sourceCode" : "@Test\r\nvoid testIsWithCompare() {\r\n    // all integers are equal\r\n    final Comparator<Integer> c = (o1, o2) -> 0;\r\n    Range<Integer> ri = Range.is(10);\r\n    assertFalse(ri.contains(null), \"should not contain null\");\r\n    assertTrue(ri.contains(10), \"should contain 10\");\r\n    assertFalse(ri.contains(11), \"should not contain 11\");\r\n    ri = Range.is(10, c);\r\n    assertFalse(ri.contains(null), \"should not contain null\");\r\n    assertTrue(ri.contains(10), \"should contain 10\");\r\n    assertTrue(ri.contains(11), \"should contain 11\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\RangeTest.java",
  "methodName" : "testOfWithCompare",
  "sourceCode" : "@Test\r\nvoid testOfWithCompare() {\r\n    // all integers are equal\r\n    final Comparator<Integer> c = (o1, o2) -> 0;\r\n    final Comparator<String> lengthComp = Comparator.comparingInt(String::length);\r\n    Range<Integer> rb = Range.of(-10, 20);\r\n    assertFalse(rb.contains(null), \"should not contain null\");\r\n    assertTrue(rb.contains(10), \"should contain 10\");\r\n    assertTrue(rb.contains(-10), \"should contain -10\");\r\n    assertFalse(rb.contains(21), \"should not contain 21\");\r\n    assertFalse(rb.contains(-11), \"should not contain -11\");\r\n    rb = Range.of(-10, 20, c);\r\n    assertFalse(rb.contains(null), \"should not contain null\");\r\n    assertTrue(rb.contains(10), \"should contain 10\");\r\n    assertTrue(rb.contains(-10), \"should contain -10\");\r\n    assertTrue(rb.contains(21), \"should contain 21\");\r\n    assertTrue(rb.contains(-11), \"should contain -11\");\r\n    Range<String> rbstr = Range.of(\"house\", \"i\");\r\n    assertFalse(rbstr.contains(null), \"should not contain null\");\r\n    assertTrue(rbstr.contains(\"house\"), \"should contain house\");\r\n    assertTrue(rbstr.contains(\"i\"), \"should contain i\");\r\n    assertFalse(rbstr.contains(\"hose\"), \"should not contain hose\");\r\n    assertFalse(rbstr.contains(\"ice\"), \"should not contain ice\");\r\n    rbstr = Range.of(\"house\", \"i\", lengthComp);\r\n    assertFalse(rbstr.contains(null), \"should not contain null\");\r\n    assertTrue(rbstr.contains(\"house\"), \"should contain house\");\r\n    assertTrue(rbstr.contains(\"i\"), \"should contain i\");\r\n    assertFalse(rbstr.contains(\"houses\"), \"should not contain houses\");\r\n    assertFalse(rbstr.contains(\"\"), \"should not contain ''\");\r\n    assertNullPointerException(() -> Range.of(null, null, lengthComp));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\RangeTest.java",
  "methodName" : "testRangeOfChars",
  "sourceCode" : "@Test\r\nvoid testRangeOfChars() {\r\n    final Range<Character> chars = Range.between('a', 'z');\r\n    assertTrue(chars.contains('b'));\r\n    assertFalse(chars.contains('B'));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\RangeTest.java",
  "methodName" : "testSerializing",
  "sourceCode" : "@Test\r\nvoid testSerializing() {\r\n    SerializationUtils.clone(intRange);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\RangeTest.java",
  "methodName" : "testToString",
  "sourceCode" : "@Test\r\nvoid testToString() {\r\n    assertNotNull(byteRange.toString());\r\n    final String str = intRange.toString();\r\n    assertEquals(\"[10..20]\", str);\r\n    assertEquals(\"[-20..-10]\", Range.between(-20, -10).toString());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\RangeTest.java",
  "methodName" : "testToStringFormat",
  "sourceCode" : "@Test\r\nvoid testToStringFormat() {\r\n    final String str = intRange.toString(\"From %1$s to %2$s\");\r\n    assertEquals(\"From 10 to 20\", str);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\reflect\\ConstructorUtilsTest.java",
  "methodName" : "testConstructor",
  "sourceCode" : "@Test\r\nvoid testConstructor() throws Exception {\r\n    assertNotNull(MethodUtils.class.getConstructor().newInstance());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\reflect\\ConstructorUtilsTest.java",
  "methodName" : "testGetAccessibleConstructor",
  "sourceCode" : "@Test\r\nvoid testGetAccessibleConstructor() throws Exception {\r\n    assertNotNull(ConstructorUtils.getAccessibleConstructor(Object.class.getConstructor(ArrayUtils.EMPTY_CLASS_ARRAY)));\r\n    assertNull(ConstructorUtils.getAccessibleConstructor(PrivateClass.class.getConstructor(ArrayUtils.EMPTY_CLASS_ARRAY)));\r\n    assertNull(ConstructorUtils.getAccessibleConstructor(PrivateClass.PublicInnerClass.class));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\reflect\\ConstructorUtilsTest.java",
  "methodName" : "testGetAccessibleConstructorFromDescription",
  "sourceCode" : "@Test\r\nvoid testGetAccessibleConstructorFromDescription() {\r\n    assertNotNull(ConstructorUtils.getAccessibleConstructor(Object.class, ArrayUtils.EMPTY_CLASS_ARRAY));\r\n    assertNull(ConstructorUtils.getAccessibleConstructor(PrivateClass.class, ArrayUtils.EMPTY_CLASS_ARRAY));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\reflect\\ConstructorUtilsTest.java",
  "methodName" : "testGetMatchingAccessibleMethod",
  "sourceCode" : "@Test\r\nvoid testGetMatchingAccessibleMethod() {\r\n    expectMatchingAccessibleConstructorParameterTypes(TestBean.class, ArrayUtils.EMPTY_CLASS_ARRAY, ArrayUtils.EMPTY_CLASS_ARRAY);\r\n    expectMatchingAccessibleConstructorParameterTypes(TestBean.class, null, ArrayUtils.EMPTY_CLASS_ARRAY);\r\n    expectMatchingAccessibleConstructorParameterTypes(TestBean.class, singletonArray(String.class), singletonArray(String.class));\r\n    expectMatchingAccessibleConstructorParameterTypes(TestBean.class, singletonArray(Object.class), singletonArray(Object.class));\r\n    expectMatchingAccessibleConstructorParameterTypes(TestBean.class, singletonArray(Boolean.class), singletonArray(Object.class));\r\n    expectMatchingAccessibleConstructorParameterTypes(TestBean.class, singletonArray(Byte.class), singletonArray(Integer.TYPE));\r\n    expectMatchingAccessibleConstructorParameterTypes(TestBean.class, singletonArray(Byte.TYPE), singletonArray(Integer.TYPE));\r\n    expectMatchingAccessibleConstructorParameterTypes(TestBean.class, singletonArray(Short.class), singletonArray(Integer.TYPE));\r\n    expectMatchingAccessibleConstructorParameterTypes(TestBean.class, singletonArray(Short.TYPE), singletonArray(Integer.TYPE));\r\n    expectMatchingAccessibleConstructorParameterTypes(TestBean.class, singletonArray(Character.class), singletonArray(Integer.TYPE));\r\n    expectMatchingAccessibleConstructorParameterTypes(TestBean.class, singletonArray(Character.TYPE), singletonArray(Integer.TYPE));\r\n    expectMatchingAccessibleConstructorParameterTypes(TestBean.class, singletonArray(Integer.class), singletonArray(Integer.class));\r\n    expectMatchingAccessibleConstructorParameterTypes(TestBean.class, singletonArray(Integer.TYPE), singletonArray(Integer.TYPE));\r\n    expectMatchingAccessibleConstructorParameterTypes(TestBean.class, singletonArray(Long.class), singletonArray(Double.TYPE));\r\n    expectMatchingAccessibleConstructorParameterTypes(TestBean.class, singletonArray(Long.TYPE), singletonArray(Double.TYPE));\r\n    expectMatchingAccessibleConstructorParameterTypes(TestBean.class, singletonArray(Float.class), singletonArray(Double.TYPE));\r\n    expectMatchingAccessibleConstructorParameterTypes(TestBean.class, singletonArray(Float.TYPE), singletonArray(Double.TYPE));\r\n    expectMatchingAccessibleConstructorParameterTypes(TestBean.class, singletonArray(Double.class), singletonArray(Double.TYPE));\r\n    expectMatchingAccessibleConstructorParameterTypes(TestBean.class, singletonArray(Double.TYPE), singletonArray(Double.TYPE));\r\n    expectMatchingAccessibleConstructorParameterTypes(TestBean.class, new Class<?>[] { SubClass.class, String[].class }, new Class<?>[] { BaseClass.class, String[].class });\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\reflect\\ConstructorUtilsTest.java",
  "methodName" : "testInvokeConstructor",
  "sourceCode" : "@Test\r\nvoid testInvokeConstructor() throws Exception {\r\n    assertEquals(\"()\", ConstructorUtils.invokeConstructor(TestBean.class, (Object[]) ArrayUtils.EMPTY_CLASS_ARRAY).toString());\r\n    assertEquals(\"()\", ConstructorUtils.invokeConstructor(TestBean.class, (Object[]) null).toString());\r\n    assertEquals(\"()\", ConstructorUtils.invokeConstructor(TestBean.class).toString());\r\n    assertEquals(\"(String)\", ConstructorUtils.invokeConstructor(TestBean.class, \"\").toString());\r\n    assertEquals(\"(Object)\", ConstructorUtils.invokeConstructor(TestBean.class, new Object()).toString());\r\n    assertEquals(\"(Object)\", ConstructorUtils.invokeConstructor(TestBean.class, Boolean.TRUE).toString());\r\n    assertEquals(\"(Integer)\", ConstructorUtils.invokeConstructor(TestBean.class, NumberUtils.INTEGER_ONE).toString());\r\n    assertEquals(\"(int)\", ConstructorUtils.invokeConstructor(TestBean.class, NumberUtils.BYTE_ONE).toString());\r\n    assertEquals(\"(double)\", ConstructorUtils.invokeConstructor(TestBean.class, NumberUtils.LONG_ONE).toString());\r\n    assertEquals(\"(double)\", ConstructorUtils.invokeConstructor(TestBean.class, NumberUtils.DOUBLE_ONE).toString());\r\n    ConstructorUtils.invokeConstructor(TestBean.class, NumberUtils.INTEGER_ONE).verify(\"(Integer)\", null);\r\n    ConstructorUtils.invokeConstructor(TestBean.class, \"a\", \"b\").verify(\"(String...)\", new String[] { \"a\", \"b\" });\r\n    ConstructorUtils.invokeConstructor(TestBean.class, NumberUtils.INTEGER_ONE, \"a\", \"b\").verify(\"(Integer, String...)\", new String[] { \"a\", \"b\" });\r\n    ConstructorUtils.invokeConstructor(TestBean.class, new SubClass(), new String[] { \"a\", \"b\" }).verify(\"(BaseClass, String...)\", new String[] { \"a\", \"b\" });\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\reflect\\ConstructorUtilsTest.java",
  "methodName" : "testInvokeExactConstructor",
  "sourceCode" : "@Test\r\nvoid testInvokeExactConstructor() throws Exception {\r\n    assertEquals(\"()\", ConstructorUtils.invokeExactConstructor(TestBean.class, (Object[]) ArrayUtils.EMPTY_CLASS_ARRAY).toString());\r\n    assertEquals(\"()\", ConstructorUtils.invokeExactConstructor(TestBean.class, (Object[]) null).toString());\r\n    assertEquals(\"(String)\", ConstructorUtils.invokeExactConstructor(TestBean.class, \"\").toString());\r\n    assertEquals(\"(Object)\", ConstructorUtils.invokeExactConstructor(TestBean.class, new Object()).toString());\r\n    assertEquals(\"(Integer)\", ConstructorUtils.invokeExactConstructor(TestBean.class, NumberUtils.INTEGER_ONE).toString());\r\n    assertEquals(\"(double)\", ConstructorUtils.invokeExactConstructor(TestBean.class, new Object[] { NumberUtils.DOUBLE_ONE }, new Class[] { Double.TYPE }).toString());\r\n    assertThrows(NoSuchMethodException.class, () -> ConstructorUtils.invokeExactConstructor(TestBean.class, NumberUtils.BYTE_ONE));\r\n    assertThrows(NoSuchMethodException.class, () -> ConstructorUtils.invokeExactConstructor(TestBean.class, NumberUtils.LONG_ONE));\r\n    assertThrows(NoSuchMethodException.class, () -> ConstructorUtils.invokeExactConstructor(TestBean.class, Boolean.TRUE));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\reflect\\ConstructorUtilsTest.java",
  "methodName" : "testNullArgument",
  "sourceCode" : "@Test\r\nvoid testNullArgument() {\r\n    expectMatchingAccessibleConstructorParameterTypes(MutableObject.class, singletonArray(null), singletonArray(Object.class));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\reflect\\ConstructorUtilsTest.java",
  "methodName" : "testVarArgsUnboxing",
  "sourceCode" : "@Test\r\nvoid testVarArgsUnboxing() throws Exception {\r\n    final TestBean testBean = ConstructorUtils.invokeConstructor(TestBean.class, Integer.valueOf(1), Integer.valueOf(2), Integer.valueOf(3));\r\n    assertArrayEquals(new String[] { \"2\", \"3\" }, testBean.varArgs);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\reflect\\FieldUtilsTest.java",
  "methodName" : "testAmbig",
  "sourceCode" : "@Test\r\nvoid testAmbig() {\r\n    assertIllegalArgumentException(() -> FieldUtils.getField(Ambig.class, \"VALUE\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\reflect\\FieldUtilsTest.java",
  "methodName" : "testConstructor",
  "sourceCode" : "@Test\r\nvoid testConstructor() {\r\n    assertNotNull(new FieldUtils());\r\n    final Constructor<?>[] cons = FieldUtils.class.getDeclaredConstructors();\r\n    assertEquals(1, cons.length);\r\n    assertTrue(Modifier.isPublic(cons[0].getModifiers()));\r\n    assertTrue(Modifier.isPublic(FieldUtils.class.getModifiers()));\r\n    assertFalse(Modifier.isFinal(FieldUtils.class.getModifiers()));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\reflect\\FieldUtilsTest.java",
  "methodName" : "testGetAllFieldListsNullPointerException",
  "sourceCode" : "@Test\r\nvoid testGetAllFieldListsNullPointerException() {\r\n    assertNullPointerException(() -> FieldUtils.getAllFieldsList(null));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\reflect\\FieldUtilsTest.java",
  "methodName" : "testGetAllFields",
  "sourceCode" : "@Test\r\nvoid testGetAllFields() {\r\n    assertArrayEquals(new Field[0], FieldUtils.getAllFields(Object.class));\r\n    final Field[] fieldsNumber = sort(Number.class.getDeclaredFields());\r\n    assertArrayEquals(fieldsNumber, sort(FieldUtils.getAllFields(Number.class)));\r\n    final Field[] fieldsInteger = Integer.class.getDeclaredFields();\r\n    assertArrayEquals(sort(ArrayUtils.addAll(fieldsInteger, fieldsNumber)), sort(FieldUtils.getAllFields(Integer.class)));\r\n    final Field[] allFields = FieldUtils.getAllFields(PublicChild.class);\r\n    // Under Jacoco,0.8.1 and Java 10, the field count is 7.\r\n    int expected = 5;\r\n    for (final Field field : allFields) {\r\n        if (field.getName().equals(JACOCO_DATA_FIELD_NAME)) {\r\n            expected++;\r\n        }\r\n    }\r\n    assertEquals(expected, allFields.length, Arrays.toString(allFields));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\reflect\\FieldUtilsTest.java",
  "methodName" : "testGetAllFieldsList",
  "sourceCode" : "@Test\r\nvoid testGetAllFieldsList() {\r\n    assertEquals(0, FieldUtils.getAllFieldsList(Object.class).size());\r\n    final List<Field> fieldsNumber = Arrays.asList(Number.class.getDeclaredFields());\r\n    assertEquals(fieldsNumber, FieldUtils.getAllFieldsList(Number.class));\r\n    final List<Field> fieldsInteger = Arrays.asList(Integer.class.getDeclaredFields());\r\n    final List<Field> allFieldsInteger = new ArrayList<>(fieldsInteger);\r\n    allFieldsInteger.addAll(fieldsNumber);\r\n    assertEquals(new HashSet<>(allFieldsInteger), new HashSet<>(FieldUtils.getAllFieldsList(Integer.class)));\r\n    final List<Field> allFields = FieldUtils.getAllFieldsList(PublicChild.class);\r\n    // Under Jacoco,0.8.1 and Java 10, the field count is 7.\r\n    int expected = 5;\r\n    for (final Field field : allFields) {\r\n        if (field.getName().equals(JACOCO_DATA_FIELD_NAME)) {\r\n            expected++;\r\n        }\r\n    }\r\n    assertEquals(expected, allFields.size(), allFields.toString());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\reflect\\FieldUtilsTest.java",
  "methodName" : "testGetAllFieldsNullPointerException",
  "sourceCode" : "@Test\r\nvoid testGetAllFieldsNullPointerException() {\r\n    assertNullPointerException(() -> FieldUtils.getAllFields(null));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\reflect\\FieldUtilsTest.java",
  "methodName" : "testGetDeclaredField",
  "sourceCode" : "@Test\r\nvoid testGetDeclaredField() {\r\n    assertNull(FieldUtils.getDeclaredField(PublicChild.class, \"VALUE\"));\r\n    assertNull(FieldUtils.getDeclaredField(PublicChild.class, \"s\"));\r\n    assertNull(FieldUtils.getDeclaredField(PublicChild.class, \"b\"));\r\n    assertNull(FieldUtils.getDeclaredField(PublicChild.class, \"i\"));\r\n    assertNull(FieldUtils.getDeclaredField(PublicChild.class, \"d\"));\r\n    assertNull(FieldUtils.getDeclaredField(PubliclyShadowedChild.class, \"VALUE\"));\r\n    assertEquals(PubliclyShadowedChild.class, FieldUtils.getDeclaredField(PubliclyShadowedChild.class, \"s\").getDeclaringClass());\r\n    assertEquals(PubliclyShadowedChild.class, FieldUtils.getDeclaredField(PubliclyShadowedChild.class, \"b\").getDeclaringClass());\r\n    assertEquals(PubliclyShadowedChild.class, FieldUtils.getDeclaredField(PubliclyShadowedChild.class, \"i\").getDeclaringClass());\r\n    assertEquals(PubliclyShadowedChild.class, FieldUtils.getDeclaredField(PubliclyShadowedChild.class, \"d\").getDeclaringClass());\r\n    assertNull(FieldUtils.getDeclaredField(PrivatelyShadowedChild.class, \"VALUE\"));\r\n    assertNull(FieldUtils.getDeclaredField(PrivatelyShadowedChild.class, \"s\"));\r\n    assertNull(FieldUtils.getDeclaredField(PrivatelyShadowedChild.class, \"b\"));\r\n    assertNull(FieldUtils.getDeclaredField(PrivatelyShadowedChild.class, \"i\"));\r\n    assertNull(FieldUtils.getDeclaredField(PrivatelyShadowedChild.class, \"d\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\reflect\\FieldUtilsTest.java",
  "methodName" : "testGetDeclaredFieldAccessIllegalArgumentException1",
  "sourceCode" : "@Test\r\nvoid testGetDeclaredFieldAccessIllegalArgumentException1() {\r\n    assertIllegalArgumentException(() -> FieldUtils.getDeclaredField(PublicChild.class, null));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\reflect\\FieldUtilsTest.java",
  "methodName" : "testGetDeclaredFieldAccessIllegalArgumentException2",
  "sourceCode" : "@Test\r\nvoid testGetDeclaredFieldAccessIllegalArgumentException2() {\r\n    assertIllegalArgumentException(() -> FieldUtils.getDeclaredField(PublicChild.class, \"\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\reflect\\FieldUtilsTest.java",
  "methodName" : "testGetDeclaredFieldAccessIllegalArgumentException3",
  "sourceCode" : "@Test\r\nvoid testGetDeclaredFieldAccessIllegalArgumentException3() {\r\n    assertIllegalArgumentException(() -> FieldUtils.getDeclaredField(PublicChild.class, \" \"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\reflect\\FieldUtilsTest.java",
  "methodName" : "testGetDeclaredFieldAccessNullPointerException",
  "sourceCode" : "@Test\r\nvoid testGetDeclaredFieldAccessNullPointerException() {\r\n    assertNullPointerException(() -> FieldUtils.getDeclaredField(null, \"none\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\reflect\\FieldUtilsTest.java",
  "methodName" : "testGetDeclaredFieldForceAccess",
  "sourceCode" : "@Test\r\nvoid testGetDeclaredFieldForceAccess() {\r\n    assertEquals(PublicChild.class, FieldUtils.getDeclaredField(PublicChild.class, \"VALUE\", true).getDeclaringClass());\r\n    assertNull(FieldUtils.getDeclaredField(PublicChild.class, \"s\", true));\r\n    assertNull(FieldUtils.getDeclaredField(PublicChild.class, \"b\", true));\r\n    assertNull(FieldUtils.getDeclaredField(PublicChild.class, \"i\", true));\r\n    assertNull(FieldUtils.getDeclaredField(PublicChild.class, \"d\", true));\r\n    assertNull(FieldUtils.getDeclaredField(PubliclyShadowedChild.class, \"VALUE\", true));\r\n    assertEquals(PubliclyShadowedChild.class, FieldUtils.getDeclaredField(PubliclyShadowedChild.class, \"s\", true).getDeclaringClass());\r\n    assertEquals(PubliclyShadowedChild.class, FieldUtils.getDeclaredField(PubliclyShadowedChild.class, \"b\", true).getDeclaringClass());\r\n    assertEquals(PubliclyShadowedChild.class, FieldUtils.getDeclaredField(PubliclyShadowedChild.class, \"i\", true).getDeclaringClass());\r\n    assertEquals(PubliclyShadowedChild.class, FieldUtils.getDeclaredField(PubliclyShadowedChild.class, \"d\", true).getDeclaringClass());\r\n    assertNull(FieldUtils.getDeclaredField(PrivatelyShadowedChild.class, \"VALUE\", true));\r\n    assertEquals(PrivatelyShadowedChild.class, FieldUtils.getDeclaredField(PrivatelyShadowedChild.class, \"s\", true).getDeclaringClass());\r\n    assertEquals(PrivatelyShadowedChild.class, FieldUtils.getDeclaredField(PrivatelyShadowedChild.class, \"b\", true).getDeclaringClass());\r\n    assertEquals(PrivatelyShadowedChild.class, FieldUtils.getDeclaredField(PrivatelyShadowedChild.class, \"i\", true).getDeclaringClass());\r\n    assertEquals(PrivatelyShadowedChild.class, FieldUtils.getDeclaredField(PrivatelyShadowedChild.class, \"d\", true).getDeclaringClass());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\reflect\\FieldUtilsTest.java",
  "methodName" : "testGetDeclaredFieldForceAccessIllegalArgumentException1",
  "sourceCode" : "@Test\r\nvoid testGetDeclaredFieldForceAccessIllegalArgumentException1() {\r\n    assertIllegalArgumentException(() -> FieldUtils.getDeclaredField(PublicChild.class, null, true));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\reflect\\FieldUtilsTest.java",
  "methodName" : "testGetDeclaredFieldForceAccessIllegalArgumentException2",
  "sourceCode" : "@Test\r\nvoid testGetDeclaredFieldForceAccessIllegalArgumentException2() {\r\n    assertIllegalArgumentException(() -> FieldUtils.getDeclaredField(PublicChild.class, \"\", true));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\reflect\\FieldUtilsTest.java",
  "methodName" : "testGetDeclaredFieldForceAccessIllegalArgumentException3",
  "sourceCode" : "@Test\r\nvoid testGetDeclaredFieldForceAccessIllegalArgumentException3() {\r\n    assertIllegalArgumentException(() -> FieldUtils.getDeclaredField(PublicChild.class, \" \", true));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\reflect\\FieldUtilsTest.java",
  "methodName" : "testGetDeclaredFieldForceAccessNullPointerException",
  "sourceCode" : "@Test\r\nvoid testGetDeclaredFieldForceAccessNullPointerException() {\r\n    assertNullPointerException(() -> FieldUtils.getDeclaredField(null, \"none\", true));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\reflect\\FieldUtilsTest.java",
  "methodName" : "testGetField",
  "sourceCode" : "@Test\r\nvoid testGetField() {\r\n    assertEquals(Foo.class, FieldUtils.getField(PublicChild.class, \"VALUE\").getDeclaringClass());\r\n    assertEquals(parentClass, FieldUtils.getField(PublicChild.class, \"s\").getDeclaringClass());\r\n    assertNull(FieldUtils.getField(PublicChild.class, \"b\"));\r\n    assertNull(FieldUtils.getField(PublicChild.class, \"i\"));\r\n    assertNull(FieldUtils.getField(PublicChild.class, \"d\"));\r\n    assertEquals(Foo.class, FieldUtils.getField(PubliclyShadowedChild.class, \"VALUE\").getDeclaringClass());\r\n    assertEquals(PubliclyShadowedChild.class, FieldUtils.getField(PubliclyShadowedChild.class, \"s\").getDeclaringClass());\r\n    assertEquals(PubliclyShadowedChild.class, FieldUtils.getField(PubliclyShadowedChild.class, \"b\").getDeclaringClass());\r\n    assertEquals(PubliclyShadowedChild.class, FieldUtils.getField(PubliclyShadowedChild.class, \"i\").getDeclaringClass());\r\n    assertEquals(PubliclyShadowedChild.class, FieldUtils.getField(PubliclyShadowedChild.class, \"d\").getDeclaringClass());\r\n    assertEquals(Foo.class, FieldUtils.getField(PrivatelyShadowedChild.class, \"VALUE\").getDeclaringClass());\r\n    assertEquals(parentClass, FieldUtils.getField(PrivatelyShadowedChild.class, \"s\").getDeclaringClass());\r\n    assertNull(FieldUtils.getField(PrivatelyShadowedChild.class, \"b\"));\r\n    assertNull(FieldUtils.getField(PrivatelyShadowedChild.class, \"i\"));\r\n    assertNull(FieldUtils.getField(PrivatelyShadowedChild.class, \"d\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\reflect\\FieldUtilsTest.java",
  "methodName" : "testGetFieldForceAccess",
  "sourceCode" : "@Test\r\nvoid testGetFieldForceAccess() {\r\n    assertEquals(PublicChild.class, FieldUtils.getField(PublicChild.class, \"VALUE\", true).getDeclaringClass());\r\n    assertEquals(parentClass, FieldUtils.getField(PublicChild.class, \"s\", true).getDeclaringClass());\r\n    assertEquals(parentClass, FieldUtils.getField(PublicChild.class, \"b\", true).getDeclaringClass());\r\n    assertEquals(parentClass, FieldUtils.getField(PublicChild.class, \"i\", true).getDeclaringClass());\r\n    assertEquals(parentClass, FieldUtils.getField(PublicChild.class, \"d\", true).getDeclaringClass());\r\n    assertEquals(Foo.class, FieldUtils.getField(PubliclyShadowedChild.class, \"VALUE\", true).getDeclaringClass());\r\n    assertEquals(PubliclyShadowedChild.class, FieldUtils.getField(PubliclyShadowedChild.class, \"s\", true).getDeclaringClass());\r\n    assertEquals(PubliclyShadowedChild.class, FieldUtils.getField(PubliclyShadowedChild.class, \"b\", true).getDeclaringClass());\r\n    assertEquals(PubliclyShadowedChild.class, FieldUtils.getField(PubliclyShadowedChild.class, \"i\", true).getDeclaringClass());\r\n    assertEquals(PubliclyShadowedChild.class, FieldUtils.getField(PubliclyShadowedChild.class, \"d\", true).getDeclaringClass());\r\n    assertEquals(Foo.class, FieldUtils.getField(PrivatelyShadowedChild.class, \"VALUE\", true).getDeclaringClass());\r\n    assertEquals(PrivatelyShadowedChild.class, FieldUtils.getField(PrivatelyShadowedChild.class, \"s\", true).getDeclaringClass());\r\n    assertEquals(PrivatelyShadowedChild.class, FieldUtils.getField(PrivatelyShadowedChild.class, \"b\", true).getDeclaringClass());\r\n    assertEquals(PrivatelyShadowedChild.class, FieldUtils.getField(PrivatelyShadowedChild.class, \"i\", true).getDeclaringClass());\r\n    assertEquals(PrivatelyShadowedChild.class, FieldUtils.getField(PrivatelyShadowedChild.class, \"d\", true).getDeclaringClass());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\reflect\\FieldUtilsTest.java",
  "methodName" : "testGetFieldForceAccessIllegalArgumentException1",
  "sourceCode" : "@Test\r\nvoid testGetFieldForceAccessIllegalArgumentException1() {\r\n    assertIllegalArgumentException(() -> FieldUtils.getField(PublicChild.class, null, true));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\reflect\\FieldUtilsTest.java",
  "methodName" : "testGetFieldForceAccessIllegalArgumentException2",
  "sourceCode" : "@Test\r\nvoid testGetFieldForceAccessIllegalArgumentException2() {\r\n    assertIllegalArgumentException(() -> FieldUtils.getField(PublicChild.class, \"\", true));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\reflect\\FieldUtilsTest.java",
  "methodName" : "testGetFieldForceAccessIllegalArgumentException3",
  "sourceCode" : "@Test\r\nvoid testGetFieldForceAccessIllegalArgumentException3() {\r\n    assertIllegalArgumentException(() -> FieldUtils.getField(PublicChild.class, \" \", true));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\reflect\\FieldUtilsTest.java",
  "methodName" : "testGetFieldForceAccessNullPointerException",
  "sourceCode" : "@Test\r\nvoid testGetFieldForceAccessNullPointerException() {\r\n    assertNullPointerException(() -> FieldUtils.getField(null, \"none\", true));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\reflect\\FieldUtilsTest.java",
  "methodName" : "testGetFieldIllegalArgumentException1",
  "sourceCode" : "@Test\r\nvoid testGetFieldIllegalArgumentException1() {\r\n    assertIllegalArgumentException(() -> FieldUtils.getField(PublicChild.class, null));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\reflect\\FieldUtilsTest.java",
  "methodName" : "testGetFieldIllegalArgumentException2",
  "sourceCode" : "@Test\r\nvoid testGetFieldIllegalArgumentException2() {\r\n    assertIllegalArgumentException(() -> FieldUtils.getField(PublicChild.class, \"\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\reflect\\FieldUtilsTest.java",
  "methodName" : "testGetFieldIllegalArgumentException3",
  "sourceCode" : "@Test\r\nvoid testGetFieldIllegalArgumentException3() {\r\n    assertIllegalArgumentException(() -> FieldUtils.getField(PublicChild.class, \" \"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\reflect\\FieldUtilsTest.java",
  "methodName" : "testGetFieldNullPointerException",
  "sourceCode" : "@Test\r\nvoid testGetFieldNullPointerException() {\r\n    assertNullPointerException(() -> FieldUtils.getField(null, \"none\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\reflect\\FieldUtilsTest.java",
  "methodName" : "testGetFieldsListWithAnnotation",
  "sourceCode" : "@Test\r\nvoid testGetFieldsListWithAnnotation() throws NoSuchFieldException {\r\n    assertEquals(0, FieldUtils.getFieldsListWithAnnotation(Object.class, Annotated.class).size());\r\n    final List<Field> annotatedFields = Arrays.asList(FieldUtilsTest.class.getDeclaredField(\"publicChild\"), FieldUtilsTest.class.getDeclaredField(\"privatelyShadowedChild\"));\r\n    final List<Field> fieldUtilsTestAnnotatedFields = FieldUtils.getFieldsListWithAnnotation(FieldUtilsTest.class, Annotated.class);\r\n    assertEquals(annotatedFields.size(), fieldUtilsTestAnnotatedFields.size());\r\n    assertTrue(fieldUtilsTestAnnotatedFields.contains(annotatedFields.get(0)));\r\n    assertTrue(fieldUtilsTestAnnotatedFields.contains(annotatedFields.get(1)));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\reflect\\FieldUtilsTest.java",
  "methodName" : "testGetFieldsListWithAnnotationNullPointerException",
  "sourceCode" : "@Test\r\nvoid testGetFieldsListWithAnnotationNullPointerException() {\r\n    assertNullPointerException(() -> FieldUtils.getFieldsListWithAnnotation(FieldUtilsTest.class, null));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\reflect\\FieldUtilsTest.java",
  "methodName" : "testGetFieldsListWithAnnotationNullPointerException2",
  "sourceCode" : "@Test\r\nvoid testGetFieldsListWithAnnotationNullPointerException2() {\r\n    assertNullPointerException(() -> FieldUtils.getFieldsListWithAnnotation(null, Annotated.class));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\reflect\\FieldUtilsTest.java",
  "methodName" : "testGetFieldsListWithAnnotationNullPointerException3",
  "sourceCode" : "@Test\r\nvoid testGetFieldsListWithAnnotationNullPointerException3() {\r\n    assertNullPointerException(() -> FieldUtils.getFieldsListWithAnnotation(null, null));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\reflect\\FieldUtilsTest.java",
  "methodName" : "testGetFieldsWithAnnotation",
  "sourceCode" : "@Test\r\nvoid testGetFieldsWithAnnotation() throws NoSuchFieldException {\r\n    assertArrayEquals(new Field[0], FieldUtils.getFieldsWithAnnotation(Object.class, Annotated.class));\r\n    final Field[] annotatedFields = sort(new Field[] { FieldUtilsTest.class.getDeclaredField(\"publicChild\"), FieldUtilsTest.class.getDeclaredField(\"privatelyShadowedChild\") });\r\n    assertArrayEquals(annotatedFields, sort(FieldUtils.getFieldsWithAnnotation(FieldUtilsTest.class, Annotated.class)));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\reflect\\FieldUtilsTest.java",
  "methodName" : "testGetFieldsWithAnnotationNullPointerException1",
  "sourceCode" : "@Test\r\nvoid testGetFieldsWithAnnotationNullPointerException1() {\r\n    assertNullPointerException(() -> FieldUtils.getFieldsWithAnnotation(FieldUtilsTest.class, null));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\reflect\\FieldUtilsTest.java",
  "methodName" : "testGetFieldsWithAnnotationNullPointerException2",
  "sourceCode" : "@Test\r\nvoid testGetFieldsWithAnnotationNullPointerException2() {\r\n    assertNullPointerException(() -> FieldUtils.getFieldsWithAnnotation(null, Annotated.class));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\reflect\\FieldUtilsTest.java",
  "methodName" : "testGetFieldsWithAnnotationNullPointerException3",
  "sourceCode" : "@Test\r\nvoid testGetFieldsWithAnnotationNullPointerException3() {\r\n    assertNullPointerException(() -> FieldUtils.getFieldsWithAnnotation(null, null));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\reflect\\FieldUtilsTest.java",
  "methodName" : "testReadDeclaredNamedField",
  "sourceCode" : "@Test\r\nvoid testReadDeclaredNamedField() throws Exception {\r\n    assertIllegalArgumentException(() -> FieldUtils.readDeclaredField(publicChild, null), \"a null field name should cause an IllegalArgumentException\");\r\n    assertIllegalArgumentException(() -> FieldUtils.readDeclaredField(publicChild, \"\"), \"an empty field name should cause an IllegalArgumentException\");\r\n    assertIllegalArgumentException(() -> FieldUtils.readDeclaredField(publicChild, \" \"), \"a blank field name should cause an IllegalArgumentException\");\r\n    assertNullPointerException(() -> FieldUtils.readDeclaredField(null, \"none\"), \"a null target should cause an NullPointerException\");\r\n    assertIllegalArgumentException(() -> FieldUtils.readDeclaredField(publicChild, \"s\"));\r\n    assertEquals(\"ss\", FieldUtils.readDeclaredField(publiclyShadowedChild, \"s\"));\r\n    assertIllegalArgumentException(() -> FieldUtils.readDeclaredField(privatelyShadowedChild, \"s\"));\r\n    assertIllegalArgumentException(() -> FieldUtils.readDeclaredField(publicChild, \"b\"));\r\n    assertEquals(Boolean.TRUE, FieldUtils.readDeclaredField(publiclyShadowedChild, \"b\"));\r\n    assertIllegalArgumentException(() -> FieldUtils.readDeclaredField(privatelyShadowedChild, \"b\"));\r\n    assertIllegalArgumentException(() -> FieldUtils.readDeclaredField(publicChild, \"i\"));\r\n    assertEquals(I1, FieldUtils.readDeclaredField(publiclyShadowedChild, \"i\"));\r\n    assertIllegalArgumentException(() -> FieldUtils.readDeclaredField(privatelyShadowedChild, \"i\"));\r\n    assertIllegalArgumentException(() -> FieldUtils.readDeclaredField(publicChild, \"d\"));\r\n    assertEquals(D1, FieldUtils.readDeclaredField(publiclyShadowedChild, \"d\"));\r\n    assertIllegalArgumentException(() -> FieldUtils.readDeclaredField(privatelyShadowedChild, \"d\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\reflect\\FieldUtilsTest.java",
  "methodName" : "testReadDeclaredNamedFieldForceAccess",
  "sourceCode" : "@Test\r\nvoid testReadDeclaredNamedFieldForceAccess() throws Exception {\r\n    assertIllegalArgumentException(() -> FieldUtils.readDeclaredField(publicChild, null, true), \"a null field name should cause an IllegalArgumentException\");\r\n    assertIllegalArgumentException(() -> FieldUtils.readDeclaredField(publicChild, \"\", true), \"an empty field name should cause an IllegalArgumentException\");\r\n    assertIllegalArgumentException(() -> FieldUtils.readDeclaredField(publicChild, \" \", true), \"a blank field name should cause an IllegalArgumentException\");\r\n    assertNullPointerException(() -> FieldUtils.readDeclaredField(null, \"none\", true), \"a null target should cause an NullPointerException\");\r\n    assertIllegalArgumentException(() -> FieldUtils.readDeclaredField(publicChild, \"s\", true));\r\n    assertEquals(\"ss\", FieldUtils.readDeclaredField(publiclyShadowedChild, \"s\", true));\r\n    assertEquals(\"ss\", FieldUtils.readDeclaredField(privatelyShadowedChild, \"s\", true));\r\n    assertIllegalArgumentException(() -> FieldUtils.readDeclaredField(publicChild, \"b\", true));\r\n    assertEquals(Boolean.TRUE, FieldUtils.readDeclaredField(publiclyShadowedChild, \"b\", true));\r\n    assertEquals(Boolean.TRUE, FieldUtils.readDeclaredField(privatelyShadowedChild, \"b\", true));\r\n    assertIllegalArgumentException(() -> FieldUtils.readDeclaredField(publicChild, \"i\", true));\r\n    assertEquals(I1, FieldUtils.readDeclaredField(publiclyShadowedChild, \"i\", true));\r\n    assertEquals(I1, FieldUtils.readDeclaredField(privatelyShadowedChild, \"i\", true));\r\n    assertIllegalArgumentException(() -> FieldUtils.readDeclaredField(publicChild, \"d\", true));\r\n    assertEquals(D1, FieldUtils.readDeclaredField(publiclyShadowedChild, \"d\", true));\r\n    assertEquals(D1, FieldUtils.readDeclaredField(privatelyShadowedChild, \"d\", true));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\reflect\\FieldUtilsTest.java",
  "methodName" : "testReadDeclaredNamedStaticField",
  "sourceCode" : "@Test\r\nvoid testReadDeclaredNamedStaticField() throws Exception {\r\n    assertNullPointerException(() -> FieldUtils.readDeclaredStaticField(AnotherParent.class, \"doesNotExist\"));\r\n    assertEquals(Foo.VALUE, FieldUtils.readDeclaredStaticField(Foo.class, \"VALUE\"));\r\n    assertNullPointerException(() -> FieldUtils.readDeclaredField(null, \"VALUE\"));\r\n    assertNullPointerException(() -> FieldUtils.readDeclaredStaticField(PublicChild.class, \"VALUE\"));\r\n    assertNullPointerException(() -> FieldUtils.readDeclaredStaticField(PubliclyShadowedChild.class, \"VALUE\"));\r\n    assertNullPointerException(() -> FieldUtils.readDeclaredStaticField(PrivatelyShadowedChild.class, \"VALUE\"));\r\n    assertIllegalArgumentException(() -> FieldUtils.readDeclaredStaticField(PublicChild.class, null));\r\n    assertIllegalArgumentException(() -> FieldUtils.readDeclaredStaticField(PublicChild.class, \"\"));\r\n    assertIllegalArgumentException(() -> FieldUtils.readDeclaredStaticField(PublicChild.class, \" \"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\reflect\\FieldUtilsTest.java",
  "methodName" : "testReadDeclaredNamedStaticFieldForceAccess",
  "sourceCode" : "@Test\r\nvoid testReadDeclaredNamedStaticFieldForceAccess() throws Exception {\r\n    assertEquals(Foo.VALUE, FieldUtils.readDeclaredStaticField(Foo.class, \"VALUE\", true));\r\n    assertEquals(\"child\", FieldUtils.readDeclaredStaticField(PublicChild.class, \"VALUE\", true));\r\n    assertNullPointerException(() -> FieldUtils.readDeclaredStaticField(PubliclyShadowedChild.class, \"VALUE\", true));\r\n    assertNullPointerException(() -> FieldUtils.readDeclaredStaticField(PrivatelyShadowedChild.class, \"VALUE\", true));\r\n    assertIllegalArgumentException(() -> FieldUtils.readDeclaredStaticField(PrivatelyShadowedChild.class, null, true));\r\n    assertIllegalArgumentException(() -> FieldUtils.readDeclaredStaticField(PrivatelyShadowedChild.class, \"\", true));\r\n    assertIllegalArgumentException(() -> FieldUtils.readDeclaredStaticField(PrivatelyShadowedChild.class, \" \", true));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\reflect\\FieldUtilsTest.java",
  "methodName" : "testReadField",
  "sourceCode" : "@Test\r\nvoid testReadField() throws Exception {\r\n    final Field parentS = FieldUtils.getDeclaredField(parentClass, \"s\");\r\n    assertEquals(\"s\", FieldUtils.readField(parentS, publicChild));\r\n    assertEquals(\"s\", FieldUtils.readField(parentS, publiclyShadowedChild));\r\n    assertEquals(\"s\", FieldUtils.readField(parentS, privatelyShadowedChild));\r\n    final Field parentB = FieldUtils.getDeclaredField(parentClass, \"b\", true);\r\n    assertEquals(Boolean.FALSE, FieldUtils.readField(parentB, publicChild));\r\n    assertEquals(Boolean.FALSE, FieldUtils.readField(parentB, publiclyShadowedChild));\r\n    assertEquals(Boolean.FALSE, FieldUtils.readField(parentB, privatelyShadowedChild));\r\n    final Field parentI = FieldUtils.getDeclaredField(parentClass, \"i\", true);\r\n    assertEquals(I0, FieldUtils.readField(parentI, publicChild));\r\n    assertEquals(I0, FieldUtils.readField(parentI, publiclyShadowedChild));\r\n    assertEquals(I0, FieldUtils.readField(parentI, privatelyShadowedChild));\r\n    final Field parentD = FieldUtils.getDeclaredField(parentClass, \"d\", true);\r\n    assertEquals(D0, FieldUtils.readField(parentD, publicChild));\r\n    assertEquals(D0, FieldUtils.readField(parentD, publiclyShadowedChild));\r\n    assertEquals(D0, FieldUtils.readField(parentD, privatelyShadowedChild));\r\n    assertNullPointerException(() -> FieldUtils.readField(null, publicChild), \"a null field should cause an NullPointerException\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\reflect\\FieldUtilsTest.java",
  "methodName" : "testReadFieldForceAccess",
  "sourceCode" : "@Test\r\nvoid testReadFieldForceAccess() throws Exception {\r\n    final Field parentS = FieldUtils.getDeclaredField(parentClass, \"s\");\r\n    parentS.setAccessible(false);\r\n    assertEquals(\"s\", FieldUtils.readField(parentS, publicChild, true));\r\n    assertEquals(\"s\", FieldUtils.readField(parentS, publiclyShadowedChild, true));\r\n    assertEquals(\"s\", FieldUtils.readField(parentS, privatelyShadowedChild, true));\r\n    final Field parentB = FieldUtils.getDeclaredField(parentClass, \"b\", true);\r\n    parentB.setAccessible(false);\r\n    assertEquals(Boolean.FALSE, FieldUtils.readField(parentB, publicChild, true));\r\n    assertEquals(Boolean.FALSE, FieldUtils.readField(parentB, publiclyShadowedChild, true));\r\n    assertEquals(Boolean.FALSE, FieldUtils.readField(parentB, privatelyShadowedChild, true));\r\n    final Field parentI = FieldUtils.getDeclaredField(parentClass, \"i\", true);\r\n    parentI.setAccessible(false);\r\n    assertEquals(I0, FieldUtils.readField(parentI, publicChild, true));\r\n    assertEquals(I0, FieldUtils.readField(parentI, publiclyShadowedChild, true));\r\n    assertEquals(I0, FieldUtils.readField(parentI, privatelyShadowedChild, true));\r\n    final Field parentD = FieldUtils.getDeclaredField(parentClass, \"d\", true);\r\n    parentD.setAccessible(false);\r\n    assertEquals(D0, FieldUtils.readField(parentD, publicChild, true));\r\n    assertEquals(D0, FieldUtils.readField(parentD, publiclyShadowedChild, true));\r\n    assertEquals(D0, FieldUtils.readField(parentD, privatelyShadowedChild, true));\r\n    assertNullPointerException(() -> FieldUtils.readField(null, publicChild, true), \"a null field should cause an NullPointerException\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\reflect\\FieldUtilsTest.java",
  "methodName" : "testReadNamedField",
  "sourceCode" : "@Test\r\nvoid testReadNamedField() throws Exception {\r\n    assertEquals(\"s\", FieldUtils.readField(publicChild, \"s\"));\r\n    assertEquals(\"ss\", FieldUtils.readField(publiclyShadowedChild, \"s\"));\r\n    assertEquals(\"s\", FieldUtils.readField(privatelyShadowedChild, \"s\"));\r\n    assertIllegalArgumentException(() -> FieldUtils.readField(publicChild, null), \"a null field name should cause an IllegalArgumentException\");\r\n    assertIllegalArgumentException(() -> FieldUtils.readField(publicChild, \"\"), \"an empty field name should cause an IllegalArgumentException\");\r\n    assertIllegalArgumentException(() -> FieldUtils.readField(publicChild, \" \"), \"a blank field name should cause an IllegalArgumentException\");\r\n    assertNullPointerException(() -> FieldUtils.readField((Object) null, \"none\"), \"a null target should cause an NullPointerException\");\r\n    assertIllegalArgumentException(() -> FieldUtils.readField(publicChild, \"b\"));\r\n    assertEquals(Boolean.TRUE, FieldUtils.readField(publiclyShadowedChild, \"b\"));\r\n    assertIllegalArgumentException(() -> FieldUtils.readField(privatelyShadowedChild, \"b\"));\r\n    assertIllegalArgumentException(() -> FieldUtils.readField(publicChild, \"i\"));\r\n    assertEquals(I1, FieldUtils.readField(publiclyShadowedChild, \"i\"));\r\n    assertIllegalArgumentException(() -> FieldUtils.readField(privatelyShadowedChild, \"i\"));\r\n    assertIllegalArgumentException(() -> FieldUtils.readField(publicChild, \"d\"));\r\n    assertEquals(D1, FieldUtils.readField(publiclyShadowedChild, \"d\"));\r\n    assertIllegalArgumentException(() -> FieldUtils.readField(privatelyShadowedChild, \"d\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\reflect\\FieldUtilsTest.java",
  "methodName" : "testReadNamedFieldForceAccess",
  "sourceCode" : "@Test\r\nvoid testReadNamedFieldForceAccess() throws Exception {\r\n    assertEquals(\"s\", FieldUtils.readField(publicChild, \"s\", true));\r\n    assertEquals(\"ss\", FieldUtils.readField(publiclyShadowedChild, \"s\", true));\r\n    assertEquals(\"ss\", FieldUtils.readField(privatelyShadowedChild, \"s\", true));\r\n    assertEquals(Boolean.FALSE, FieldUtils.readField(publicChild, \"b\", true));\r\n    assertEquals(Boolean.TRUE, FieldUtils.readField(publiclyShadowedChild, \"b\", true));\r\n    assertEquals(Boolean.TRUE, FieldUtils.readField(privatelyShadowedChild, \"b\", true));\r\n    assertEquals(I0, FieldUtils.readField(publicChild, \"i\", true));\r\n    assertEquals(I1, FieldUtils.readField(publiclyShadowedChild, \"i\", true));\r\n    assertEquals(I1, FieldUtils.readField(privatelyShadowedChild, \"i\", true));\r\n    assertEquals(D0, FieldUtils.readField(publicChild, \"d\", true));\r\n    assertEquals(D1, FieldUtils.readField(publiclyShadowedChild, \"d\", true));\r\n    assertEquals(D1, FieldUtils.readField(privatelyShadowedChild, \"d\", true));\r\n    assertIllegalArgumentException(() -> FieldUtils.readField(publicChild, null, true), \"a null field name should cause an IllegalArgumentException\");\r\n    assertIllegalArgumentException(() -> FieldUtils.readField(publicChild, \"\", true), \"an empty field name should cause an IllegalArgumentException\");\r\n    assertIllegalArgumentException(() -> FieldUtils.readField(publicChild, \" \", true), \"a blank field name should cause an IllegalArgumentException\");\r\n    assertNullPointerException(() -> FieldUtils.readField((Object) null, \"none\", true), \"a null target should cause an NullPointerException\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\reflect\\FieldUtilsTest.java",
  "methodName" : "testReadNamedStaticField",
  "sourceCode" : "@Test\r\nvoid testReadNamedStaticField() throws Exception {\r\n    assertEquals(Foo.VALUE, FieldUtils.readStaticField(Foo.class, \"VALUE\"));\r\n    assertEquals(Foo.VALUE, FieldUtils.readStaticField(PubliclyShadowedChild.class, \"VALUE\"));\r\n    assertEquals(Foo.VALUE, FieldUtils.readStaticField(PrivatelyShadowedChild.class, \"VALUE\"));\r\n    assertEquals(Foo.VALUE, FieldUtils.readStaticField(PublicChild.class, \"VALUE\"));\r\n    assertNullPointerException(() -> FieldUtils.readStaticField(null, \"none\"), \"null class should cause an NullPointerException\");\r\n    assertIllegalArgumentException(() -> FieldUtils.readStaticField(Foo.class, null), \"null field name should cause an IllegalArgumentException\");\r\n    assertIllegalArgumentException(() -> FieldUtils.readStaticField(Foo.class, \"\"), \"empty field name should cause an IllegalArgumentException\");\r\n    assertIllegalArgumentException(() -> FieldUtils.readStaticField(Foo.class, \" \"), \"blank field name should cause an IllegalArgumentException\");\r\n    assertNullPointerException(() -> FieldUtils.readStaticField(Foo.class, \"does_not_exist\"), \"a field that doesn't exist should cause an NullPointerException\");\r\n    assertIllegalArgumentException(() -> FieldUtils.readStaticField(PublicChild.class, \"s\"), \"non-static field should cause an IllegalArgumentException\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\reflect\\FieldUtilsTest.java",
  "methodName" : "testReadNamedStaticFieldForceAccess",
  "sourceCode" : "@Test\r\nvoid testReadNamedStaticFieldForceAccess() throws Exception {\r\n    assertEquals(Foo.VALUE, FieldUtils.readStaticField(Foo.class, \"VALUE\", true));\r\n    assertEquals(Foo.VALUE, FieldUtils.readStaticField(PubliclyShadowedChild.class, \"VALUE\", true));\r\n    assertEquals(Foo.VALUE, FieldUtils.readStaticField(PrivatelyShadowedChild.class, \"VALUE\", true));\r\n    assertEquals(\"child\", FieldUtils.readStaticField(PublicChild.class, \"VALUE\", true));\r\n    assertNullPointerException(() -> FieldUtils.readStaticField(null, \"none\", true), \"null class should cause an NullPointerException\");\r\n    assertIllegalArgumentException(() -> FieldUtils.readStaticField(Foo.class, null, true), \"null field name should cause an IllegalArgumentException\");\r\n    assertIllegalArgumentException(() -> FieldUtils.readStaticField(Foo.class, \"\", true), \"empty field name should cause an IllegalArgumentException\");\r\n    assertIllegalArgumentException(() -> FieldUtils.readStaticField(Foo.class, \" \", true), \"blank field name should cause an IllegalArgumentException\");\r\n    assertNullPointerException(() -> FieldUtils.readStaticField(Foo.class, \"does_not_exist\", true), \"a field that doesn't exist should cause an NullPointerException\");\r\n    assertIllegalArgumentException(() -> FieldUtils.readStaticField(PublicChild.class, \"s\", false), \"non-static field should cause an IllegalArgumentException\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\reflect\\FieldUtilsTest.java",
  "methodName" : "testReadStaticField",
  "sourceCode" : "@Test\r\nvoid testReadStaticField() throws Exception {\r\n    assertEquals(Foo.VALUE, FieldUtils.readStaticField(FieldUtils.getField(Foo.class, \"VALUE\")));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\reflect\\FieldUtilsTest.java",
  "methodName" : "testReadStaticFieldForceAccess",
  "sourceCode" : "@Test\r\nvoid testReadStaticFieldForceAccess() throws Exception {\r\n    assertEquals(Foo.VALUE, FieldUtils.readStaticField(FieldUtils.getField(Foo.class, \"VALUE\")));\r\n    assertEquals(Foo.VALUE, FieldUtils.readStaticField(FieldUtils.getField(PublicChild.class, \"VALUE\")));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\reflect\\FieldUtilsTest.java",
  "methodName" : "testReadStaticFieldForceAccessIllegalArgumentException",
  "sourceCode" : "@Test\r\nvoid testReadStaticFieldForceAccessIllegalArgumentException() {\r\n    final Field nonStaticField = FieldUtils.getField(PublicChild.class, \"s\", true);\r\n    assumeTrue(nonStaticField != null);\r\n    assertIllegalArgumentException(() -> FieldUtils.readStaticField(nonStaticField, true));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\reflect\\FieldUtilsTest.java",
  "methodName" : "testReadStaticFieldForceAccessNullPointerException",
  "sourceCode" : "@Test\r\nvoid testReadStaticFieldForceAccessNullPointerException() {\r\n    assertNullPointerException(() -> FieldUtils.readStaticField(null, true));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\reflect\\FieldUtilsTest.java",
  "methodName" : "testReadStaticFieldIllegalArgumentException",
  "sourceCode" : "@Test\r\nvoid testReadStaticFieldIllegalArgumentException() throws Exception {\r\n    assertEquals(Foo.VALUE, FieldUtils.readStaticField(FieldUtils.getField(Foo.class, \"VALUE\")));\r\n    final Field nonStaticField = FieldUtils.getField(PublicChild.class, \"s\");\r\n    assumeTrue(nonStaticField != null);\r\n    assertIllegalArgumentException(() -> FieldUtils.readStaticField(nonStaticField));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\reflect\\FieldUtilsTest.java",
  "methodName" : "testReadStaticFieldNullPointerException",
  "sourceCode" : "@Test\r\nvoid testReadStaticFieldNullPointerException() {\r\n    assertNullPointerException(() -> FieldUtils.readStaticField(null));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\reflect\\FieldUtilsTest.java",
  "methodName" : "testRemoveFinalModifier",
  "sourceCode" : "@Test\r\nvoid testRemoveFinalModifier() throws Exception {\r\n    final Field field = StaticContainer.class.getDeclaredField(\"IMMUTABLE_PRIVATE_2\");\r\n    assertFalse(field.isAccessible());\r\n    assertTrue(Modifier.isFinal(field.getModifiers()));\r\n    callRemoveFinalModifierCheckForException(field, true);\r\n    if (SystemUtils.isJavaVersionAtMost(JavaVersion.JAVA_11)) {\r\n        assertFalse(Modifier.isFinal(field.getModifiers()));\r\n        assertFalse(field.isAccessible());\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\reflect\\FieldUtilsTest.java",
  "methodName" : "testRemoveFinalModifierAccessNotNeeded",
  "sourceCode" : "@Test\r\nvoid testRemoveFinalModifierAccessNotNeeded() throws Exception {\r\n    final Field field = StaticContainer.class.getDeclaredField(\"IMMUTABLE_PACKAGE\");\r\n    assertFalse(field.isAccessible());\r\n    assertTrue(Modifier.isFinal(field.getModifiers()));\r\n    callRemoveFinalModifierCheckForException(field, false);\r\n    if (SystemUtils.isJavaVersionAtMost(JavaVersion.JAVA_11)) {\r\n        assertTrue(Modifier.isFinal(field.getModifiers()));\r\n        assertFalse(field.isAccessible());\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\reflect\\FieldUtilsTest.java",
  "methodName" : "testRemoveFinalModifierNullPointerException",
  "sourceCode" : "@Test\r\nvoid testRemoveFinalModifierNullPointerException() {\r\n    assertNullPointerException(() -> FieldUtils.removeFinalModifier(null));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\reflect\\FieldUtilsTest.java",
  "methodName" : "testRemoveFinalModifierWithAccess",
  "sourceCode" : "@Test\r\nvoid testRemoveFinalModifierWithAccess() throws Exception {\r\n    final Field field = StaticContainer.class.getDeclaredField(\"IMMUTABLE_PRIVATE_2\");\r\n    assertFalse(field.isAccessible());\r\n    assertTrue(Modifier.isFinal(field.getModifiers()));\r\n    callRemoveFinalModifierCheckForException(field, true);\r\n    if (SystemUtils.isJavaVersionAtMost(JavaVersion.JAVA_11)) {\r\n        assertFalse(Modifier.isFinal(field.getModifiers()));\r\n        assertFalse(field.isAccessible());\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\reflect\\FieldUtilsTest.java",
  "methodName" : "testRemoveFinalModifierWithAccessNullPointerException",
  "sourceCode" : "@Test\r\nvoid testRemoveFinalModifierWithAccessNullPointerException() {\r\n    assertNullPointerException(() -> FieldUtils.removeFinalModifier(null, true));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\reflect\\FieldUtilsTest.java",
  "methodName" : "testRemoveFinalModifierWithoutAccess",
  "sourceCode" : "@Test\r\nvoid testRemoveFinalModifierWithoutAccess() throws Exception {\r\n    final Field field = StaticContainer.class.getDeclaredField(\"IMMUTABLE_PRIVATE_2\");\r\n    assertFalse(field.isAccessible());\r\n    assertTrue(Modifier.isFinal(field.getModifiers()));\r\n    callRemoveFinalModifierCheckForException(field, false);\r\n    if (SystemUtils.isJavaVersionAtMost(JavaVersion.JAVA_11)) {\r\n        assertTrue(Modifier.isFinal(field.getModifiers()));\r\n        assertFalse(field.isAccessible());\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\reflect\\FieldUtilsTest.java",
  "methodName" : "testWriteDeclaredNamedField",
  "sourceCode" : "@Test\r\nvoid testWriteDeclaredNamedField() throws Exception {\r\n    assertIllegalArgumentException(() -> FieldUtils.writeDeclaredField(publicChild, \"s\", \"S\"));\r\n    assertIllegalArgumentException(() -> FieldUtils.writeDeclaredField(publicChild, \"b\", Boolean.TRUE));\r\n    assertIllegalArgumentException(() -> FieldUtils.writeDeclaredField(publicChild, \"i\", Integer.valueOf(1)));\r\n    assertIllegalArgumentException(() -> FieldUtils.writeDeclaredField(publicChild, \"d\", Double.valueOf(1.0)));\r\n    FieldUtils.writeDeclaredField(publiclyShadowedChild, \"s\", \"S\");\r\n    assertEquals(\"S\", FieldUtils.readDeclaredField(publiclyShadowedChild, \"s\"));\r\n    FieldUtils.writeDeclaredField(publiclyShadowedChild, \"b\", Boolean.FALSE);\r\n    assertEquals(Boolean.FALSE, FieldUtils.readDeclaredField(publiclyShadowedChild, \"b\"));\r\n    FieldUtils.writeDeclaredField(publiclyShadowedChild, \"i\", Integer.valueOf(0));\r\n    assertEquals(Integer.valueOf(0), FieldUtils.readDeclaredField(publiclyShadowedChild, \"i\"));\r\n    FieldUtils.writeDeclaredField(publiclyShadowedChild, \"d\", Double.valueOf(0.0));\r\n    assertEquals(Double.valueOf(0.0), FieldUtils.readDeclaredField(publiclyShadowedChild, \"d\"));\r\n    assertIllegalArgumentException(() -> FieldUtils.writeDeclaredField(privatelyShadowedChild, \"s\", \"S\"));\r\n    assertIllegalArgumentException(() -> FieldUtils.writeDeclaredField(privatelyShadowedChild, \"b\", Boolean.TRUE));\r\n    assertIllegalArgumentException(() -> FieldUtils.writeDeclaredField(privatelyShadowedChild, \"i\", Integer.valueOf(1)));\r\n    assertIllegalArgumentException(() -> FieldUtils.writeDeclaredField(privatelyShadowedChild, \"d\", Double.valueOf(1.0)));\r\n    assertNullPointerException(() -> FieldUtils.writeDeclaredField(null, \"s\", \"S\"));\r\n    assertIllegalArgumentException(() -> FieldUtils.writeDeclaredField(publicChild, \"null\", \"S\"));\r\n    assertIllegalArgumentException(() -> FieldUtils.writeDeclaredField(publicChild, \"\", \"S\"));\r\n    assertIllegalArgumentException(() -> FieldUtils.writeDeclaredField(publicChild, \" \", \"S\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\reflect\\FieldUtilsTest.java",
  "methodName" : "testWriteDeclaredNamedFieldForceAccess",
  "sourceCode" : "@Test\r\nvoid testWriteDeclaredNamedFieldForceAccess() throws Exception {\r\n    assertIllegalArgumentException(() -> FieldUtils.writeDeclaredField(publicChild, \"s\", \"S\", true));\r\n    assertIllegalArgumentException(() -> FieldUtils.writeDeclaredField(publicChild, \"b\", Boolean.TRUE, true));\r\n    assertIllegalArgumentException(() -> FieldUtils.writeDeclaredField(publicChild, \"i\", Integer.valueOf(1), true));\r\n    assertIllegalArgumentException(() -> FieldUtils.writeDeclaredField(publicChild, \"d\", Double.valueOf(1.0), true));\r\n    FieldUtils.writeDeclaredField(publiclyShadowedChild, \"s\", \"S\", true);\r\n    assertEquals(\"S\", FieldUtils.readDeclaredField(publiclyShadowedChild, \"s\", true));\r\n    FieldUtils.writeDeclaredField(publiclyShadowedChild, \"b\", Boolean.FALSE, true);\r\n    assertEquals(Boolean.FALSE, FieldUtils.readDeclaredField(publiclyShadowedChild, \"b\", true));\r\n    FieldUtils.writeDeclaredField(publiclyShadowedChild, \"i\", Integer.valueOf(0), true);\r\n    assertEquals(Integer.valueOf(0), FieldUtils.readDeclaredField(publiclyShadowedChild, \"i\", true));\r\n    FieldUtils.writeDeclaredField(publiclyShadowedChild, \"d\", Double.valueOf(0.0), true);\r\n    assertEquals(Double.valueOf(0.0), FieldUtils.readDeclaredField(publiclyShadowedChild, \"d\", true));\r\n    FieldUtils.writeDeclaredField(privatelyShadowedChild, \"s\", \"S\", true);\r\n    assertEquals(\"S\", FieldUtils.readDeclaredField(privatelyShadowedChild, \"s\", true));\r\n    FieldUtils.writeDeclaredField(privatelyShadowedChild, \"b\", Boolean.FALSE, true);\r\n    assertEquals(Boolean.FALSE, FieldUtils.readDeclaredField(privatelyShadowedChild, \"b\", true));\r\n    FieldUtils.writeDeclaredField(privatelyShadowedChild, \"i\", Integer.valueOf(0), true);\r\n    assertEquals(Integer.valueOf(0), FieldUtils.readDeclaredField(privatelyShadowedChild, \"i\", true));\r\n    FieldUtils.writeDeclaredField(privatelyShadowedChild, \"d\", Double.valueOf(0.0), true);\r\n    assertEquals(Double.valueOf(0.0), FieldUtils.readDeclaredField(privatelyShadowedChild, \"d\", true));\r\n    assertNullPointerException(() -> FieldUtils.writeDeclaredField(null, \"s\", \"S\", true));\r\n    assertIllegalArgumentException(() -> FieldUtils.writeDeclaredField(publicChild, \"null\", \"S\", true));\r\n    assertIllegalArgumentException(() -> FieldUtils.writeDeclaredField(publicChild, \"\", \"S\", true));\r\n    assertIllegalArgumentException(() -> FieldUtils.writeDeclaredField(publicChild, \" \", \"S\", true));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\reflect\\FieldUtilsTest.java",
  "methodName" : "testWriteDeclaredNamedStaticField",
  "sourceCode" : "@Test\r\nvoid testWriteDeclaredNamedStaticField() throws Exception {\r\n    FieldUtils.writeStaticField(StaticContainer.class, \"mutablePublic\", \"new\");\r\n    assertEquals(\"new\", StaticContainer.mutablePublic);\r\n    assertNullPointerException(() -> FieldUtils.writeDeclaredStaticField(StaticContainer.class, \"mutableProtected\", \"new\"));\r\n    assertNullPointerException(() -> FieldUtils.writeDeclaredStaticField(StaticContainer.class, \"mutablePackage\", \"new\"));\r\n    assertNullPointerException(() -> FieldUtils.writeDeclaredStaticField(StaticContainer.class, \"mutablePrivate\", \"new\"));\r\n    assertThrows(IllegalAccessException.class, () -> FieldUtils.writeDeclaredStaticField(StaticContainer.class, \"IMMUTABLE_PUBLIC\", \"new\"));\r\n    assertNullPointerException(() -> FieldUtils.writeDeclaredStaticField(StaticContainer.class, \"IMMUTABLE_PROTECTED\", \"new\"));\r\n    assertNullPointerException(() -> FieldUtils.writeDeclaredStaticField(StaticContainer.class, \"IMMUTABLE_PACKAGE\", \"new\"));\r\n    assertNullPointerException(() -> FieldUtils.writeDeclaredStaticField(StaticContainer.class, \"IMMUTABLE_PRIVATE\", \"new\"));\r\n    assertNullPointerException(() -> FieldUtils.writeDeclaredStaticField(null, \"mutablePublic\", \"new\"));\r\n    assertIllegalArgumentException(() -> FieldUtils.writeDeclaredStaticField(StaticContainer.class, null, \"new\"));\r\n    assertIllegalArgumentException(() -> FieldUtils.writeDeclaredStaticField(StaticContainer.class, \"\", \"new\"));\r\n    assertIllegalArgumentException(() -> FieldUtils.writeDeclaredStaticField(StaticContainer.class, \" \", \"new\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\reflect\\FieldUtilsTest.java",
  "methodName" : "testWriteDeclaredNamedStaticFieldForceAccess",
  "sourceCode" : "@Test\r\nvoid testWriteDeclaredNamedStaticFieldForceAccess() throws Exception {\r\n    FieldUtils.writeDeclaredStaticField(StaticContainer.class, \"mutablePublic\", \"new\", true);\r\n    assertEquals(\"new\", StaticContainer.mutablePublic);\r\n    FieldUtils.writeDeclaredStaticField(StaticContainer.class, \"mutableProtected\", \"new\", true);\r\n    assertEquals(\"new\", StaticContainer.getMutableProtected());\r\n    FieldUtils.writeDeclaredStaticField(StaticContainer.class, \"mutablePackage\", \"new\", true);\r\n    assertEquals(\"new\", StaticContainer.getMutablePackage());\r\n    FieldUtils.writeDeclaredStaticField(StaticContainer.class, \"mutablePrivate\", \"new\", true);\r\n    assertEquals(\"new\", StaticContainer.getMutablePrivate());\r\n    assertThrows(IllegalAccessException.class, () -> FieldUtils.writeDeclaredStaticField(StaticContainer.class, \"IMMUTABLE_PUBLIC\", \"new\", true));\r\n    assertThrows(IllegalAccessException.class, () -> FieldUtils.writeDeclaredStaticField(StaticContainer.class, \"IMMUTABLE_PROTECTED\", \"new\", true));\r\n    assertThrows(IllegalAccessException.class, () -> FieldUtils.writeDeclaredStaticField(StaticContainer.class, \"IMMUTABLE_PACKAGE\", \"new\", true));\r\n    assertThrows(IllegalAccessException.class, () -> FieldUtils.writeDeclaredStaticField(StaticContainer.class, \"IMMUTABLE_PRIVATE\", \"new\", true));\r\n    assertNullPointerException(() -> FieldUtils.writeDeclaredStaticField(null, \"mutablePublic\", \"new\", true));\r\n    assertIllegalArgumentException(() -> FieldUtils.writeDeclaredStaticField(StaticContainer.class, null, \"new\", true));\r\n    assertIllegalArgumentException(() -> FieldUtils.writeDeclaredStaticField(StaticContainer.class, \"\", \"new\", true));\r\n    assertIllegalArgumentException(() -> FieldUtils.writeDeclaredStaticField(StaticContainer.class, \" \", \"new\", true));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\reflect\\FieldUtilsTest.java",
  "methodName" : "testWriteField",
  "sourceCode" : "@Test\r\nvoid testWriteField() throws Exception {\r\n    final Field field = parentClass.getDeclaredField(\"s\");\r\n    FieldUtils.writeField(field, publicChild, \"S\");\r\n    assertEquals(\"S\", field.get(publicChild));\r\n    assertThrows(IllegalAccessException.class, () -> FieldUtils.writeField(parentClass.getDeclaredField(\"b\"), publicChild, Boolean.TRUE));\r\n    assertThrows(IllegalAccessException.class, () -> FieldUtils.writeField(parentClass.getDeclaredField(\"i\"), publicChild, Integer.valueOf(Integer.MAX_VALUE)));\r\n    assertThrows(IllegalAccessException.class, () -> FieldUtils.writeField(parentClass.getDeclaredField(\"d\"), publicChild, Double.valueOf(Double.MAX_VALUE)));\r\n    assertNullPointerException(() -> FieldUtils.writeField(null, publicChild, \"S\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\reflect\\FieldUtilsTest.java",
  "methodName" : "testWriteFieldForceAccess",
  "sourceCode" : "@Test\r\nvoid testWriteFieldForceAccess() throws Exception {\r\n    Field field = parentClass.getDeclaredField(\"s\");\r\n    FieldUtils.writeField(field, publicChild, \"S\", true);\r\n    assertEquals(\"S\", field.get(publicChild));\r\n    field = parentClass.getDeclaredField(\"b\");\r\n    FieldUtils.writeField(field, publicChild, Boolean.TRUE, true);\r\n    assertEquals(Boolean.TRUE, field.get(publicChild));\r\n    field = parentClass.getDeclaredField(\"i\");\r\n    FieldUtils.writeField(field, publicChild, Integer.valueOf(Integer.MAX_VALUE), true);\r\n    assertEquals(Integer.valueOf(Integer.MAX_VALUE), field.get(publicChild));\r\n    field = parentClass.getDeclaredField(\"d\");\r\n    FieldUtils.writeField(field, publicChild, Double.valueOf(Double.MAX_VALUE), true);\r\n    assertEquals(Double.valueOf(Double.MAX_VALUE), field.get(publicChild));\r\n    assertNullPointerException(() -> FieldUtils.writeField(null, publicChild, \"S\", true));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\reflect\\FieldUtilsTest.java",
  "methodName" : "testWriteNamedField",
  "sourceCode" : "@Test\r\nvoid testWriteNamedField() throws Exception {\r\n    FieldUtils.writeField(publicChild, \"s\", \"S\");\r\n    assertEquals(\"S\", FieldUtils.readField(publicChild, \"s\"));\r\n    assertIllegalArgumentException(() -> FieldUtils.writeField(publicChild, \"b\", Boolean.TRUE));\r\n    assertIllegalArgumentException(() -> FieldUtils.writeField(publicChild, \"i\", Integer.valueOf(1)));\r\n    assertIllegalArgumentException(() -> FieldUtils.writeField(publicChild, \"d\", Double.valueOf(1.0)));\r\n    FieldUtils.writeField(publiclyShadowedChild, \"s\", \"S\");\r\n    assertEquals(\"S\", FieldUtils.readField(publiclyShadowedChild, \"s\"));\r\n    FieldUtils.writeField(publiclyShadowedChild, \"b\", Boolean.FALSE);\r\n    assertEquals(Boolean.FALSE, FieldUtils.readField(publiclyShadowedChild, \"b\"));\r\n    FieldUtils.writeField(publiclyShadowedChild, \"i\", Integer.valueOf(0));\r\n    assertEquals(Integer.valueOf(0), FieldUtils.readField(publiclyShadowedChild, \"i\"));\r\n    FieldUtils.writeField(publiclyShadowedChild, \"d\", Double.valueOf(0.0));\r\n    assertEquals(Double.valueOf(0.0), FieldUtils.readField(publiclyShadowedChild, \"d\"));\r\n    FieldUtils.writeField(privatelyShadowedChild, \"s\", \"S\");\r\n    assertEquals(\"S\", FieldUtils.readField(privatelyShadowedChild, \"s\"));\r\n    assertIllegalArgumentException(() -> FieldUtils.writeField(privatelyShadowedChild, \"b\", Boolean.TRUE));\r\n    assertIllegalArgumentException(() -> FieldUtils.writeField(privatelyShadowedChild, \"i\", Integer.valueOf(1)));\r\n    assertIllegalArgumentException(() -> FieldUtils.writeField(privatelyShadowedChild, \"d\", Double.valueOf(1.0)));\r\n    assertNullPointerException(() -> FieldUtils.writeField((Object) null, \"s\", \"s\"));\r\n    assertIllegalArgumentException(() -> FieldUtils.writeField(publicChild, null, \"s\"));\r\n    assertIllegalArgumentException(() -> FieldUtils.writeField(publicChild, \"\", \"s\"));\r\n    assertIllegalArgumentException(() -> FieldUtils.writeField(publicChild, \" \", \"s\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\reflect\\FieldUtilsTest.java",
  "methodName" : "testWriteNamedFieldForceAccess",
  "sourceCode" : "@Test\r\nvoid testWriteNamedFieldForceAccess() throws Exception {\r\n    FieldUtils.writeField(publicChild, \"s\", \"S\", true);\r\n    assertEquals(\"S\", FieldUtils.readField(publicChild, \"s\", true));\r\n    FieldUtils.writeField(publicChild, \"b\", Boolean.TRUE, true);\r\n    assertEquals(Boolean.TRUE, FieldUtils.readField(publicChild, \"b\", true));\r\n    FieldUtils.writeField(publicChild, \"i\", Integer.valueOf(1), true);\r\n    assertEquals(Integer.valueOf(1), FieldUtils.readField(publicChild, \"i\", true));\r\n    FieldUtils.writeField(publicChild, \"d\", Double.valueOf(1.0), true);\r\n    assertEquals(Double.valueOf(1.0), FieldUtils.readField(publicChild, \"d\", true));\r\n    FieldUtils.writeField(publiclyShadowedChild, \"s\", \"S\", true);\r\n    assertEquals(\"S\", FieldUtils.readField(publiclyShadowedChild, \"s\", true));\r\n    FieldUtils.writeField(publiclyShadowedChild, \"b\", Boolean.FALSE, true);\r\n    assertEquals(Boolean.FALSE, FieldUtils.readField(publiclyShadowedChild, \"b\", true));\r\n    FieldUtils.writeField(publiclyShadowedChild, \"i\", Integer.valueOf(0), true);\r\n    assertEquals(Integer.valueOf(0), FieldUtils.readField(publiclyShadowedChild, \"i\", true));\r\n    FieldUtils.writeField(publiclyShadowedChild, \"d\", Double.valueOf(0.0), true);\r\n    assertEquals(Double.valueOf(0.0), FieldUtils.readField(publiclyShadowedChild, \"d\", true));\r\n    FieldUtils.writeField(privatelyShadowedChild, \"s\", \"S\", true);\r\n    assertEquals(\"S\", FieldUtils.readField(privatelyShadowedChild, \"s\", true));\r\n    FieldUtils.writeField(privatelyShadowedChild, \"b\", Boolean.FALSE, true);\r\n    assertEquals(Boolean.FALSE, FieldUtils.readField(privatelyShadowedChild, \"b\", true));\r\n    FieldUtils.writeField(privatelyShadowedChild, \"i\", Integer.valueOf(0), true);\r\n    assertEquals(Integer.valueOf(0), FieldUtils.readField(privatelyShadowedChild, \"i\", true));\r\n    FieldUtils.writeField(privatelyShadowedChild, \"d\", Double.valueOf(0.0), true);\r\n    assertEquals(Double.valueOf(0.0), FieldUtils.readField(privatelyShadowedChild, \"d\", true));\r\n    assertNullPointerException(() -> FieldUtils.writeField((Object) null, \"s\", \"s\", true));\r\n    assertIllegalArgumentException(() -> FieldUtils.writeField(publicChild, null, \"s\", true));\r\n    assertIllegalArgumentException(() -> FieldUtils.writeField(publicChild, \"\", \"s\", true));\r\n    assertIllegalArgumentException(() -> FieldUtils.writeField(publicChild, \" \", \"s\", true));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\reflect\\FieldUtilsTest.java",
  "methodName" : "testWriteNamedStaticField",
  "sourceCode" : "@Test\r\nvoid testWriteNamedStaticField() throws Exception {\r\n    FieldUtils.writeStaticField(StaticContainerChild.class, \"mutablePublic\", \"new\");\r\n    assertEquals(\"new\", StaticContainer.mutablePublic);\r\n    assertNullPointerException(() -> FieldUtils.writeStaticField(StaticContainerChild.class, \"mutableProtected\", \"new\"));\r\n    assertNullPointerException(() -> FieldUtils.writeStaticField(StaticContainerChild.class, \"mutablePackage\", \"new\"));\r\n    assertNullPointerException(() -> FieldUtils.writeStaticField(StaticContainerChild.class, \"mutablePrivate\", \"new\"));\r\n    assertThrows(IllegalAccessException.class, () -> FieldUtils.writeStaticField(StaticContainerChild.class, \"IMMUTABLE_PUBLIC\", \"new\"));\r\n    assertNullPointerException(() -> FieldUtils.writeStaticField(StaticContainerChild.class, \"IMMUTABLE_PROTECTED\", \"new\"));\r\n    assertNullPointerException(() -> FieldUtils.writeStaticField(StaticContainerChild.class, \"IMMUTABLE_PACKAGE\", \"new\"));\r\n    assertNullPointerException(() -> FieldUtils.writeStaticField(StaticContainerChild.class, \"IMMUTABLE_PRIVATE\", \"new\"));\r\n    assertNullPointerException(() -> FieldUtils.writeStaticField(null, \"IMMUTABLE_PRIVATE\", \"new\"));\r\n    assertIllegalArgumentException(() -> FieldUtils.writeStaticField(StaticContainerChild.class, null, \"new\"));\r\n    assertIllegalArgumentException(() -> FieldUtils.writeStaticField(StaticContainerChild.class, \"\", \"new\"));\r\n    assertIllegalArgumentException(() -> FieldUtils.writeStaticField(StaticContainerChild.class, \" \", \"new\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\reflect\\FieldUtilsTest.java",
  "methodName" : "testWriteNamedStaticFieldForceAccess",
  "sourceCode" : "@Test\r\nvoid testWriteNamedStaticFieldForceAccess() throws Exception {\r\n    FieldUtils.writeStaticField(StaticContainerChild.class, \"mutablePublic\", \"new\", true);\r\n    assertEquals(\"new\", StaticContainer.mutablePublic);\r\n    FieldUtils.writeStaticField(StaticContainerChild.class, \"mutableProtected\", \"new\", true);\r\n    assertEquals(\"new\", StaticContainer.getMutableProtected());\r\n    FieldUtils.writeStaticField(StaticContainerChild.class, \"mutablePackage\", \"new\", true);\r\n    assertEquals(\"new\", StaticContainer.getMutablePackage());\r\n    FieldUtils.writeStaticField(StaticContainerChild.class, \"mutablePrivate\", \"new\", true);\r\n    assertEquals(\"new\", StaticContainer.getMutablePrivate());\r\n    assertThrows(IllegalAccessException.class, () -> FieldUtils.writeStaticField(StaticContainerChild.class, \"IMMUTABLE_PUBLIC\", \"new\", true));\r\n    assertThrows(IllegalAccessException.class, () -> FieldUtils.writeStaticField(StaticContainerChild.class, \"IMMUTABLE_PROTECTED\", \"new\", true));\r\n    assertThrows(IllegalAccessException.class, () -> FieldUtils.writeStaticField(StaticContainerChild.class, \"IMMUTABLE_PACKAGE\", \"new\", true));\r\n    assertThrows(IllegalAccessException.class, () -> FieldUtils.writeStaticField(StaticContainerChild.class, \"IMMUTABLE_PRIVATE\", \"new\", true));\r\n    assertNullPointerException(() -> FieldUtils.writeStaticField(null, \"IMMUTABLE_PRIVATE\", \"new\", true));\r\n    assertIllegalArgumentException(() -> FieldUtils.writeStaticField(StaticContainerChild.class, null, \"new\", true));\r\n    assertIllegalArgumentException(() -> FieldUtils.writeStaticField(StaticContainerChild.class, \"\", \"new\", true));\r\n    assertIllegalArgumentException(() -> FieldUtils.writeStaticField(StaticContainerChild.class, \" \", \"new\", true));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\reflect\\FieldUtilsTest.java",
  "methodName" : "testWriteStaticField",
  "sourceCode" : "@Test\r\nvoid testWriteStaticField() throws Exception {\r\n    final Field field = StaticContainer.class.getDeclaredField(\"mutablePublic\");\r\n    FieldUtils.writeStaticField(field, \"new\");\r\n    assertEquals(\"new\", StaticContainer.mutablePublic);\r\n    assertThrows(IllegalAccessException.class, () -> FieldUtils.writeStaticField(StaticContainer.class.getDeclaredField(\"mutableProtected\"), \"new\"));\r\n    assertThrows(IllegalAccessException.class, () -> FieldUtils.writeStaticField(StaticContainer.class.getDeclaredField(\"mutablePackage\"), \"new\"));\r\n    assertThrows(IllegalAccessException.class, () -> FieldUtils.writeStaticField(StaticContainer.class.getDeclaredField(\"mutablePrivate\"), \"new\"));\r\n    assertThrows(IllegalAccessException.class, () -> FieldUtils.writeStaticField(StaticContainer.class.getDeclaredField(\"IMMUTABLE_PUBLIC\"), \"new\"));\r\n    assertThrows(IllegalAccessException.class, () -> FieldUtils.writeStaticField(StaticContainer.class.getDeclaredField(\"IMMUTABLE_PROTECTED\"), \"new\"));\r\n    assertThrows(IllegalAccessException.class, () -> FieldUtils.writeStaticField(StaticContainer.class.getDeclaredField(\"IMMUTABLE_PACKAGE\"), \"new\"));\r\n    assertThrows(IllegalAccessException.class, () -> FieldUtils.writeStaticField(StaticContainer.class.getDeclaredField(\"IMMUTABLE_PRIVATE\"), \"new\"));\r\n    assertNullPointerException(() -> FieldUtils.writeStaticField(null, \"new\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\reflect\\FieldUtilsTest.java",
  "methodName" : "testWriteStaticFieldForceAccess",
  "sourceCode" : "@Test\r\nvoid testWriteStaticFieldForceAccess() throws Exception {\r\n    Field field = StaticContainer.class.getDeclaredField(\"mutablePublic\");\r\n    FieldUtils.writeStaticField(field, \"new\", true);\r\n    assertEquals(\"new\", StaticContainer.mutablePublic);\r\n    field = StaticContainer.class.getDeclaredField(\"mutableProtected\");\r\n    FieldUtils.writeStaticField(field, \"new\", true);\r\n    assertEquals(\"new\", StaticContainer.getMutableProtected());\r\n    field = StaticContainer.class.getDeclaredField(\"mutablePackage\");\r\n    FieldUtils.writeStaticField(field, \"new\", true);\r\n    assertEquals(\"new\", StaticContainer.getMutablePackage());\r\n    field = StaticContainer.class.getDeclaredField(\"mutablePrivate\");\r\n    FieldUtils.writeStaticField(field, \"new\", true);\r\n    assertEquals(\"new\", StaticContainer.getMutablePrivate());\r\n    assertThrows(IllegalAccessException.class, () -> FieldUtils.writeStaticField(StaticContainer.class.getDeclaredField(\"IMMUTABLE_PUBLIC\"), \"new\", true));\r\n    assertThrows(IllegalAccessException.class, () -> FieldUtils.writeStaticField(StaticContainer.class.getDeclaredField(\"IMMUTABLE_PROTECTED\"), \"new\", true));\r\n    assertThrows(IllegalAccessException.class, () -> FieldUtils.writeStaticField(StaticContainer.class.getDeclaredField(\"IMMUTABLE_PACKAGE\"), \"new\", true));\r\n    assertThrows(IllegalAccessException.class, () -> FieldUtils.writeStaticField(StaticContainer.class.getDeclaredField(\"IMMUTABLE_PRIVATE\"), \"new\", true));\r\n    assertNullPointerException(() -> FieldUtils.writeStaticField(null, \"new\", true));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\reflect\\InheritanceUtilsTest.java",
  "methodName" : "testConstructor",
  "sourceCode" : "@Test\r\nvoid testConstructor() throws Exception {\r\n    assertNotNull(InheritanceUtils.class.getConstructor().newInstance());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\reflect\\InheritanceUtilsTest.java",
  "methodName" : "testDistanceDisjoint",
  "sourceCode" : "@Test\r\nvoid testDistanceDisjoint() {\r\n    assertEquals(-1, InheritanceUtils.distance(Boolean.class, String.class));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\reflect\\InheritanceUtilsTest.java",
  "methodName" : "testDistanceEqual",
  "sourceCode" : "@Test\r\nvoid testDistanceEqual() {\r\n    assertEquals(0, InheritanceUtils.distance(AnotherChild.class, AnotherChild.class));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\reflect\\InheritanceUtilsTest.java",
  "methodName" : "testDistanceEqualObject",
  "sourceCode" : "@Test\r\nvoid testDistanceEqualObject() {\r\n    assertEquals(0, InheritanceUtils.distance(Object.class, Object.class));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\reflect\\InheritanceUtilsTest.java",
  "methodName" : "testDistanceGreaterThanZero",
  "sourceCode" : "@Test\r\nvoid testDistanceGreaterThanZero() {\r\n    assertEquals(1, InheritanceUtils.distance(AnotherChild.class, AnotherParent.class));\r\n    assertEquals(1, InheritanceUtils.distance(Grandchild.class, AnotherChild.class));\r\n    assertEquals(2, InheritanceUtils.distance(Grandchild.class, AnotherParent.class));\r\n    assertEquals(3, InheritanceUtils.distance(Grandchild.class, Object.class));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\reflect\\InheritanceUtilsTest.java",
  "methodName" : "testDistanceNullChild",
  "sourceCode" : "@Test\r\nvoid testDistanceNullChild() {\r\n    assertEquals(-1, InheritanceUtils.distance(null, Object.class));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\reflect\\InheritanceUtilsTest.java",
  "methodName" : "testDistanceNullParent",
  "sourceCode" : "@Test\r\nvoid testDistanceNullParent() {\r\n    assertEquals(-1, InheritanceUtils.distance(Object.class, null));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\reflect\\InheritanceUtilsTest.java",
  "methodName" : "testDistanceNullParentNullChild",
  "sourceCode" : "@Test\r\nvoid testDistanceNullParentNullChild() {\r\n    assertEquals(-1, InheritanceUtils.distance(null, null));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\reflect\\InheritanceUtilsTest.java",
  "methodName" : "testDistanceReverseParentChild",
  "sourceCode" : "@Test\r\nvoid testDistanceReverseParentChild() {\r\n    assertEquals(-1, InheritanceUtils.distance(Object.class, Grandchild.class));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\reflect\\Lang1703Test.java",
  "methodName" : "testStackOverflowError",
  "sourceCode" : "@Test\r\nvoid testStackOverflowError() {\r\n    // causes a java.lang.StackOverflowError\r\n    TypeUtils.toString(Lang1703Test.class);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\reflect\\MethodUtilsTest.java",
  "methodName" : "testConstructor",
  "sourceCode" : "@Test\r\nvoid testConstructor() throws Exception {\r\n    assertNotNull(MethodUtils.class.getConstructor().newInstance());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\reflect\\MethodUtilsTest.java",
  "methodName" : "testDistance",
  "sourceCode" : "@Test\r\nvoid testDistance() throws Exception {\r\n    final Method distanceMethod = MethodUtils.getMatchingMethod(MethodUtils.class, \"distance\", Class[].class, Class[].class);\r\n    distanceMethod.setAccessible(true);\r\n    assertEquals(-1, distanceMethod.invoke(null, new Class[] { String.class }, new Class[] { Date.class }));\r\n    assertEquals(0, distanceMethod.invoke(null, new Class[] { Date.class }, new Class[] { Date.class }));\r\n    assertEquals(1, distanceMethod.invoke(null, new Class[] { Integer.class }, new Class[] { ClassUtils.wrapperToPrimitive(Integer.class) }));\r\n    assertEquals(2, distanceMethod.invoke(null, new Class[] { Integer.class }, new Class[] { Object.class }));\r\n    distanceMethod.setAccessible(false);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\reflect\\MethodUtilsTest.java",
  "methodName" : "testGetAccessibleInterfaceMethod",
  "sourceCode" : "@ParameterizedTest\r\n@ValueSource(classes = { TestMutable.class, TestMutableSubclass.class })\r\nvoid testGetAccessibleInterfaceMethod(final Class<?> clazz) throws Exception {\r\n    final Class<?>[][] p = { ArrayUtils.EMPTY_CLASS_ARRAY, null };\r\n    for (final Class<?>[] element : p) {\r\n        final Method method = clazz.getMethod(\"getValue\", element);\r\n        final Method accessibleMethod = MethodUtils.getAccessibleMethod(method);\r\n        assertNotSame(accessibleMethod, method);\r\n        assertSame(Mutable.class, accessibleMethod.getDeclaringClass());\r\n        final Method accessibleMethod2 = MethodUtils.getAccessibleMethod(clazz, method);\r\n        assertNotSame(accessibleMethod2, method);\r\n        assertSame(Mutable.class, accessibleMethod2.getDeclaringClass());\r\n    }\r\n}",
  "annotations" : [ "ParameterizedTest" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\reflect\\MethodUtilsTest.java",
  "methodName" : "testGetAccessibleInterfaceMethodFromDescription",
  "sourceCode" : "@ParameterizedTest\r\n@ValueSource(classes = { TestMutable.class, TestMutableSubclass.class })\r\nvoid testGetAccessibleInterfaceMethodFromDescription(final Class<?> clazz) {\r\n    final Class<?>[][] p = { ArrayUtils.EMPTY_CLASS_ARRAY, null };\r\n    for (final Class<?>[] element : p) {\r\n        final Method accessibleMethod = MethodUtils.getAccessibleMethod(clazz, \"getValue\", element);\r\n        assertSame(Mutable.class, accessibleMethod.getDeclaringClass());\r\n    }\r\n}",
  "annotations" : [ "ParameterizedTest" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\reflect\\MethodUtilsTest.java",
  "methodName" : "testGetAccessibleMethodInaccessible",
  "sourceCode" : "@Test\r\nvoid testGetAccessibleMethodInaccessible() throws Exception {\r\n    assertNull(MethodUtils.getAccessibleMethod(TestBean.class.getDeclaredMethod(\"privateStuff\")));\r\n    assertNull(MethodUtils.getAccessibleMethod(TestBean.class, TestBean.class.getDeclaredMethod(\"privateStuff\")));\r\n    assertNull(MethodUtils.getAccessibleMethod(TestBeanSubclass.class, TestBean.class.getDeclaredMethod(\"privateStuff\")));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\reflect\\MethodUtilsTest.java",
  "methodName" : "testGetAccessibleMethodPrivateInterface",
  "sourceCode" : "@Test\r\nvoid testGetAccessibleMethodPrivateInterface() throws Exception {\r\n    final Method expected = TestBeanWithInterfaces.class.getMethod(\"foo\");\r\n    assertNotNull(expected);\r\n    final Method actual = MethodUtils.getAccessibleMethod(TestBeanWithInterfaces.class, \"foo\");\r\n    assertNull(actual);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\reflect\\MethodUtilsTest.java",
  "methodName" : "testGetAccessibleMethodPublicSub",
  "sourceCode" : "@Test\r\nvoid testGetAccessibleMethodPublicSub() throws Exception {\r\n    // PackageBean class is package-private\r\n    final int modifiers = PackageBean.class.getModifiers();\r\n    assertFalse(Modifier.isPrivate(modifiers));\r\n    assertFalse(Modifier.isProtected(modifiers));\r\n    assertFalse(Modifier.isPublic(modifiers));\r\n    // make sure that bean does what it should: compile\r\n    new PublicSubBean().setBar(\"\");\r\n    // make sure that bean does what it should\r\n    final PublicSubBean bean = new PublicSubBean();\r\n    assertEquals(bean.getFoo(), \"This is foo\", \"Start value (foo)\");\r\n    assertEquals(bean.getBar(), \"This is bar\", \"Start value (bar)\");\r\n    bean.setFoo(\"new foo\");\r\n    bean.setBar(\"new bar\");\r\n    assertEquals(bean.getFoo(), \"new foo\", \"Set value (foo)\");\r\n    assertEquals(bean.getBar(), \"new bar\", \"Set value (bar)\");\r\n    // see if we can access public methods in a default access superclass\r\n    // from a public access subclass instance\r\n    MethodUtils.invokeExactMethod(bean, \"setFoo\", \"alpha\");\r\n    assertEquals(bean.getFoo(), \"alpha\", \"Set value (foo:2)\");\r\n    MethodUtils.invokeExactMethod(bean, \"setBar\", \"beta\");\r\n    assertEquals(bean.getBar(), \"beta\", \"Set value (bar:2)\");\r\n    // PublicSubBean.setFoo(String)\r\n    Method method = MethodUtils.getAccessibleMethod(PublicSubBean.class, \"setFoo\", String.class);\r\n    assertNotNull(method, \"getAccessibleMethod() setFoo is Null\");\r\n    method.invoke(bean, \"1111\");\r\n    assertEquals(\"1111\", bean.getFoo(), \"Set value (foo:3)\");\r\n    // PublicSubBean.setBar(String)\r\n    method = MethodUtils.getAccessibleMethod(PublicSubBean.class, \"setBar\", String.class);\r\n    assertNotNull(method, \"getAccessibleMethod() setBar is Null\");\r\n    method.invoke(bean, \"2222\");\r\n    assertEquals(\"2222\", bean.getBar(), \"Set value (bar:3)\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\reflect\\MethodUtilsTest.java",
  "methodName" : "testGetAccessibleMethodPublicSubOtherPackage",
  "sourceCode" : "@Test\r\nvoid testGetAccessibleMethodPublicSubOtherPackage() throws Exception {\r\n    // PackageBeanOtherPackage class is package-private\r\n    final int modifiers = Class.forName(\"org.apache.commons.lang3.reflect.testbed.PackageBeanOtherPackage\").getModifiers();\r\n    assertFalse(Modifier.isPrivate(modifiers));\r\n    assertFalse(Modifier.isProtected(modifiers));\r\n    assertFalse(Modifier.isPublic(modifiers));\r\n    // make sure that bean does what it should: compile\r\n    new PublicSubBeanOtherPackage().setBar(\"\");\r\n    // make sure that bean does what it should\r\n    final PublicSubBeanOtherPackage bean = new PublicSubBeanOtherPackage();\r\n    assertEquals(bean.getFoo(), \"This is foo\", \"Start value (foo)\");\r\n    assertEquals(bean.getBar(), \"This is bar\", \"Start value (bar)\");\r\n    bean.setFoo(\"new foo\");\r\n    bean.setBar(\"new bar\");\r\n    assertEquals(bean.getFoo(), \"new foo\", \"Set value (foo)\");\r\n    assertEquals(bean.getBar(), \"new bar\", \"Set value (bar)\");\r\n    // see if we can access public methods in a default access superclass\r\n    // from a public access subclass instance\r\n    MethodUtils.invokeExactMethod(bean, \"setFoo\", \"alpha\");\r\n    assertEquals(bean.getFoo(), \"alpha\", \"Set value (foo:2)\");\r\n    MethodUtils.invokeExactMethod(bean, \"setBar\", \"beta\");\r\n    assertEquals(bean.getBar(), \"beta\", \"Set value (bar:2)\");\r\n    // PublicSubBean.setFoo(String)\r\n    Method method = MethodUtils.getAccessibleMethod(PublicSubBeanOtherPackage.class, \"setFoo\", String.class);\r\n    assertNotNull(method, \"getAccessibleMethod() setFoo is Null\");\r\n    method.invoke(bean, \"1111\");\r\n    assertEquals(\"1111\", bean.getFoo(), \"Set value (foo:3)\");\r\n    // PublicSubBean.setBar(String)\r\n    method = MethodUtils.getAccessibleMethod(PublicSubBeanOtherPackage.class, \"setBar\", String.class);\r\n    assertNotNull(method, \"getAccessibleMethod() setBar is Null\");\r\n    method.invoke(bean, \"2222\");\r\n    assertEquals(\"2222\", bean.getBar(), \"Set value (bar:3)\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\reflect\\MethodUtilsTest.java",
  "methodName" : "testGetAccessiblePublicMethod",
  "sourceCode" : "@Test\r\nvoid testGetAccessiblePublicMethod() throws Exception {\r\n    assertSame(MutableObject.class, MethodUtils.getAccessibleMethod(MutableObject.class.getMethod(\"getValue\", ArrayUtils.EMPTY_CLASS_ARRAY)).getDeclaringClass());\r\n    assertSame(MutableObject.class, MethodUtils.getAccessibleMethod(MutableObject.class, MutableObject.class.getMethod(\"getValue\", ArrayUtils.EMPTY_CLASS_ARRAY)).getDeclaringClass());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\reflect\\MethodUtilsTest.java",
  "methodName" : "testGetAccessiblePublicMethodFromDescription",
  "sourceCode" : "@Test\r\nvoid testGetAccessiblePublicMethodFromDescription() {\r\n    assertSame(MutableObject.class, MethodUtils.getAccessibleMethod(MutableObject.class, \"getValue\", ArrayUtils.EMPTY_CLASS_ARRAY).getDeclaringClass());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\reflect\\MethodUtilsTest.java",
  "methodName" : "testGetAnnotationIllegalArgumentException1",
  "sourceCode" : "@Test\r\nvoid testGetAnnotationIllegalArgumentException1() {\r\n    assertNullPointerException(() -> MethodUtils.getAnnotation(FieldUtilsTest.class.getDeclaredMethods()[0], null, true, true));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\reflect\\MethodUtilsTest.java",
  "methodName" : "testGetAnnotationIllegalArgumentException2",
  "sourceCode" : "@Test\r\nvoid testGetAnnotationIllegalArgumentException2() {\r\n    assertNullPointerException(() -> MethodUtils.getAnnotation(null, Annotated.class, true, true));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\reflect\\MethodUtilsTest.java",
  "methodName" : "testGetAnnotationIllegalArgumentException3",
  "sourceCode" : "@Test\r\nvoid testGetAnnotationIllegalArgumentException3() {\r\n    assertNullPointerException(() -> MethodUtils.getAnnotation(null, null, true, true));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\reflect\\MethodUtilsTest.java",
  "methodName" : "testGetAnnotationNotSearchSupersAndNotIgnoreAccess",
  "sourceCode" : "@Test\r\nvoid testGetAnnotationNotSearchSupersAndNotIgnoreAccess() throws NoSuchMethodException {\r\n    assertNull(MethodUtils.getAnnotation(PublicChild.class.getMethod(\"parentNotAnnotatedMethod\"), Annotated.class, false, false));\r\n    assertNull(MethodUtils.getAnnotation(PublicChild.class.getMethod(\"doIt\"), Annotated.class, false, false));\r\n    assertNull(MethodUtils.getAnnotation(PublicChild.class.getMethod(\"parentProtectedAnnotatedMethod\"), Annotated.class, false, false));\r\n    assertNull(MethodUtils.getAnnotation(PublicChild.class.getDeclaredMethod(\"privateAnnotatedMethod\"), Annotated.class, false, false));\r\n    assertNotNull(MethodUtils.getAnnotation(PublicChild.class.getMethod(\"publicAnnotatedMethod\"), Annotated.class, false, false));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\reflect\\MethodUtilsTest.java",
  "methodName" : "testGetAnnotationNotSearchSupersButIgnoreAccess",
  "sourceCode" : "@Test\r\nvoid testGetAnnotationNotSearchSupersButIgnoreAccess() throws NoSuchMethodException {\r\n    assertNull(MethodUtils.getAnnotation(PublicChild.class.getMethod(\"parentNotAnnotatedMethod\"), Annotated.class, false, true));\r\n    assertNull(MethodUtils.getAnnotation(PublicChild.class.getMethod(\"doIt\"), Annotated.class, false, true));\r\n    assertNull(MethodUtils.getAnnotation(PublicChild.class.getMethod(\"parentProtectedAnnotatedMethod\"), Annotated.class, false, true));\r\n    assertNotNull(MethodUtils.getAnnotation(PublicChild.class.getDeclaredMethod(\"privateAnnotatedMethod\"), Annotated.class, false, true));\r\n    assertNotNull(MethodUtils.getAnnotation(PublicChild.class.getMethod(\"publicAnnotatedMethod\"), Annotated.class, false, true));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\reflect\\MethodUtilsTest.java",
  "methodName" : "testGetAnnotationSearchSupersAndIgnoreAccess",
  "sourceCode" : "@Test\r\nvoid testGetAnnotationSearchSupersAndIgnoreAccess() throws NoSuchMethodException {\r\n    assertNull(MethodUtils.getAnnotation(PublicChild.class.getMethod(\"parentNotAnnotatedMethod\"), Annotated.class, true, true));\r\n    assertNotNull(MethodUtils.getAnnotation(PublicChild.class.getMethod(\"doIt\"), Annotated.class, true, true));\r\n    assertNotNull(MethodUtils.getAnnotation(PublicChild.class.getMethod(\"parentProtectedAnnotatedMethod\"), Annotated.class, true, true));\r\n    assertNotNull(MethodUtils.getAnnotation(PublicChild.class.getDeclaredMethod(\"privateAnnotatedMethod\"), Annotated.class, true, true));\r\n    assertNotNull(MethodUtils.getAnnotation(PublicChild.class.getMethod(\"publicAnnotatedMethod\"), Annotated.class, true, true));\r\n    assertNull(MethodUtils.getAnnotation(StringParameterizedChild.class.getMethod(\"parentNotAnnotatedMethod\", String.class), Annotated.class, true, true));\r\n    assertNotNull(MethodUtils.getAnnotation(StringParameterizedChild.class.getMethod(\"parentProtectedAnnotatedMethod\", String.class), Annotated.class, true, true));\r\n    assertNotNull(MethodUtils.getAnnotation(StringParameterizedChild.class.getDeclaredMethod(\"privateAnnotatedMethod\", String.class), Annotated.class, true, true));\r\n    assertNotNull(MethodUtils.getAnnotation(StringParameterizedChild.class.getMethod(\"publicAnnotatedMethod\", String.class), Annotated.class, true, true));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\reflect\\MethodUtilsTest.java",
  "methodName" : "testGetAnnotationSearchSupersButNotIgnoreAccess",
  "sourceCode" : "@Test\r\nvoid testGetAnnotationSearchSupersButNotIgnoreAccess() throws NoSuchMethodException {\r\n    assertNull(MethodUtils.getAnnotation(PublicChild.class.getMethod(\"parentNotAnnotatedMethod\"), Annotated.class, true, false));\r\n    assertNull(MethodUtils.getAnnotation(PublicChild.class.getMethod(\"doIt\"), Annotated.class, true, false));\r\n    assertNull(MethodUtils.getAnnotation(PublicChild.class.getMethod(\"parentProtectedAnnotatedMethod\"), Annotated.class, true, false));\r\n    assertNull(MethodUtils.getAnnotation(PublicChild.class.getDeclaredMethod(\"privateAnnotatedMethod\"), Annotated.class, true, false));\r\n    assertNotNull(MethodUtils.getAnnotation(PublicChild.class.getMethod(\"publicAnnotatedMethod\"), Annotated.class, true, false));\r\n    assertNull(MethodUtils.getAnnotation(StringParameterizedChild.class.getMethod(\"parentNotAnnotatedMethod\", String.class), Annotated.class, true, false));\r\n    assertNull(MethodUtils.getAnnotation(StringParameterizedChild.class.getMethod(\"parentProtectedAnnotatedMethod\", String.class), Annotated.class, true, false));\r\n    assertNull(MethodUtils.getAnnotation(StringParameterizedChild.class.getDeclaredMethod(\"privateAnnotatedMethod\", String.class), Annotated.class, true, false));\r\n    assertNotNull(MethodUtils.getAnnotation(StringParameterizedChild.class.getMethod(\"publicAnnotatedMethod\", String.class), Annotated.class, true, false));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\reflect\\MethodUtilsTest.java",
  "methodName" : "testGetMatchingAccessibleMethod",
  "sourceCode" : "@Test\r\nvoid testGetMatchingAccessibleMethod() {\r\n    expectMatchingAccessibleMethodParameterTypes(TestBean.class, \"foo\", ArrayUtils.EMPTY_CLASS_ARRAY, ArrayUtils.EMPTY_CLASS_ARRAY);\r\n    expectMatchingAccessibleMethodParameterTypes(TestBean.class, \"foo\", null, ArrayUtils.EMPTY_CLASS_ARRAY);\r\n    expectMatchingAccessibleMethodParameterTypes(TestBean.class, \"foo\", singletonArray(String.class), singletonArray(String.class));\r\n    expectMatchingAccessibleMethodParameterTypes(TestBean.class, \"foo\", singletonArray(Object.class), singletonArray(Object.class));\r\n    expectMatchingAccessibleMethodParameterTypes(TestBean.class, \"foo\", singletonArray(Boolean.class), singletonArray(Object.class));\r\n    expectMatchingAccessibleMethodParameterTypes(TestBean.class, \"foo\", singletonArray(Byte.class), singletonArray(Integer.TYPE));\r\n    expectMatchingAccessibleMethodParameterTypes(TestBean.class, \"foo\", singletonArray(Byte.TYPE), singletonArray(Integer.TYPE));\r\n    expectMatchingAccessibleMethodParameterTypes(TestBean.class, \"foo\", singletonArray(Short.class), singletonArray(Integer.TYPE));\r\n    expectMatchingAccessibleMethodParameterTypes(TestBean.class, \"foo\", singletonArray(Short.TYPE), singletonArray(Integer.TYPE));\r\n    expectMatchingAccessibleMethodParameterTypes(TestBean.class, \"foo\", singletonArray(Character.class), singletonArray(Integer.TYPE));\r\n    expectMatchingAccessibleMethodParameterTypes(TestBean.class, \"foo\", singletonArray(Character.TYPE), singletonArray(Integer.TYPE));\r\n    expectMatchingAccessibleMethodParameterTypes(TestBean.class, \"foo\", singletonArray(Integer.class), singletonArray(Integer.class));\r\n    expectMatchingAccessibleMethodParameterTypes(TestBean.class, \"foo\", singletonArray(Integer.TYPE), singletonArray(Integer.TYPE));\r\n    expectMatchingAccessibleMethodParameterTypes(TestBean.class, \"foo\", singletonArray(Long.class), singletonArray(Long.TYPE));\r\n    expectMatchingAccessibleMethodParameterTypes(TestBean.class, \"foo\", singletonArray(Long.TYPE), singletonArray(Long.TYPE));\r\n    expectMatchingAccessibleMethodParameterTypes(TestBean.class, \"foo\", singletonArray(Float.class), singletonArray(Double.TYPE));\r\n    expectMatchingAccessibleMethodParameterTypes(TestBean.class, \"foo\", singletonArray(Float.TYPE), singletonArray(Double.TYPE));\r\n    expectMatchingAccessibleMethodParameterTypes(TestBean.class, \"foo\", singletonArray(Double.class), singletonArray(Double.TYPE));\r\n    expectMatchingAccessibleMethodParameterTypes(TestBean.class, \"foo\", singletonArray(Double.TYPE), singletonArray(Double.TYPE));\r\n    expectMatchingAccessibleMethodParameterTypes(TestBean.class, \"foo\", singletonArray(Double.TYPE), singletonArray(Double.TYPE));\r\n    expectMatchingAccessibleMethodParameterTypes(TestBean.class, \"foo\", new Class[] { String.class, String.class }, new Class[] { String[].class });\r\n    expectMatchingAccessibleMethodParameterTypes(TestBean.class, \"foo\", new Class[] { Integer.TYPE, String.class, String.class }, new Class[] { Integer.class, String[].class });\r\n    expectMatchingAccessibleMethodParameterTypes(InheritanceBean.class, \"testOne\", singletonArray(ParentObject.class), singletonArray(ParentObject.class));\r\n    expectMatchingAccessibleMethodParameterTypes(InheritanceBean.class, \"testOne\", singletonArray(ChildObject.class), singletonArray(ParentObject.class));\r\n    expectMatchingAccessibleMethodParameterTypes(InheritanceBean.class, \"testTwo\", singletonArray(ParentObject.class), singletonArray(GrandParentObject.class));\r\n    expectMatchingAccessibleMethodParameterTypes(InheritanceBean.class, \"testTwo\", singletonArray(ChildObject.class), singletonArray(PackagePrivateEmptyInterface.class));\r\n    // LANG-1757\r\n    expectMatchingAccessibleMethodParameterTypes(Files.class, \"exists\", singletonArray(Path.class), new Class[] { Path.class, LinkOption[].class });\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\reflect\\MethodUtilsTest.java",
  "methodName" : "testGetMatchingMethod",
  "sourceCode" : "@Test\r\nvoid testGetMatchingMethod() throws NoSuchMethodException {\r\n    assertEquals(MethodUtils.getMatchingMethod(GetMatchingMethodClass.class, \"testMethod\"), GetMatchingMethodClass.class.getMethod(\"testMethod\"));\r\n    assertEquals(MethodUtils.getMatchingMethod(GetMatchingMethodClass.class, \"testMethod\", Long.TYPE), GetMatchingMethodClass.class.getMethod(\"testMethod\", Long.TYPE));\r\n    assertEquals(MethodUtils.getMatchingMethod(GetMatchingMethodClass.class, \"testMethod\", Long.class), GetMatchingMethodClass.class.getMethod(\"testMethod\", Long.class));\r\n    assertEquals(MethodUtils.getMatchingMethod(GetMatchingMethodClass.class, \"testMethod\", (Class<?>) null), GetMatchingMethodClass.class.getMethod(\"testMethod\", Long.class));\r\n    assertThrows(IllegalStateException.class, () -> MethodUtils.getMatchingMethod(GetMatchingMethodClass.class, \"testMethod2\", (Class<?>) null));\r\n    assertEquals(MethodUtils.getMatchingMethod(GetMatchingMethodClass.class, \"testMethod3\", Long.TYPE, Long.class), GetMatchingMethodClass.class.getMethod(\"testMethod3\", Long.TYPE, Long.class));\r\n    assertEquals(MethodUtils.getMatchingMethod(GetMatchingMethodClass.class, \"testMethod3\", Long.class, Long.TYPE), GetMatchingMethodClass.class.getMethod(\"testMethod3\", Long.class, Long.TYPE));\r\n    assertEquals(MethodUtils.getMatchingMethod(GetMatchingMethodClass.class, \"testMethod3\", null, Long.TYPE), GetMatchingMethodClass.class.getMethod(\"testMethod3\", Long.class, Long.TYPE));\r\n    assertEquals(MethodUtils.getMatchingMethod(GetMatchingMethodClass.class, \"testMethod3\", Long.TYPE, null), GetMatchingMethodClass.class.getMethod(\"testMethod3\", Long.TYPE, Long.class));\r\n    assertThrows(IllegalStateException.class, () -> MethodUtils.getMatchingMethod(GetMatchingMethodClass.class, \"testMethod4\", null, null));\r\n    assertEquals(MethodUtils.getMatchingMethod(GetMatchingMethodImpl.class, \"testMethod5\", RuntimeException.class), GetMatchingMethodImpl.class.getMethod(\"testMethod5\", Exception.class));\r\n    assertEquals(GetMatchingMethodImpl.class.getMethod(\"testMethod6\"), MethodUtils.getMatchingMethod(GetMatchingMethodImpl.class, \"testMethod6\"));\r\n    assertNullPointerException(() -> MethodUtils.getMatchingMethod(null, \"testMethod5\", RuntimeException.class));\r\n    Method testMethod6 = MethodUtils.getMatchingMethod(ConcreteGetMatchingMethod2.class, \"testMethod6\");\r\n    assertNotNull(testMethod6);\r\n    assertEquals(AbstractGetMatchingMethod2.class, testMethod6.getDeclaringClass());\r\n    testMethod6 = MethodUtils.getMatchingMethod(ConcreteGetMatchingMethod22.class, \"testMethod6\");\r\n    assertNotNull(testMethod6);\r\n    assertEquals(ConcreteGetMatchingMethod22.class, testMethod6.getDeclaringClass());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\reflect\\MethodUtilsTest.java",
  "methodName" : "testGetMethodObject",
  "sourceCode" : "@Test\r\nvoid testGetMethodObject() throws Exception {\r\n    assertEquals(MutableObject.class.getMethod(\"getValue\", ArrayUtils.EMPTY_CLASS_ARRAY), MethodUtils.getMethodObject(MutableObject.class, \"getValue\", ArrayUtils.EMPTY_CLASS_ARRAY));\r\n    assertNull(MethodUtils.getMethodObject(MutableObject.class, \"does not exist, at all\", ArrayUtils.EMPTY_CLASS_ARRAY));\r\n    assertNull(MethodUtils.getMethodObject(null, \"does not exist, at all\", ArrayUtils.EMPTY_CLASS_ARRAY));\r\n    assertNull(MethodUtils.getMethodObject(null, null, ArrayUtils.EMPTY_CLASS_ARRAY));\r\n    assertNull(MethodUtils.getMethodObject(MutableObject.class, null, ArrayUtils.EMPTY_CLASS_ARRAY));\r\n    // 0 args\r\n    assertNull(MethodUtils.getMethodObject(MutableObject.class, \"getValue\", new Class[] { null }));\r\n    // 1 args\r\n    assertNull(MethodUtils.getMethodObject(MutableObject.class, \"equals\", new Class[] { null }));\r\n    assertNull(MethodUtils.getMethodObject(MutableObject.class, \"equals\", new Class[] { String.class, null, String.class }));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\reflect\\MethodUtilsTest.java",
  "methodName" : "testGetMethodsListWithAnnotation",
  "sourceCode" : "/**\r\n * Tests a {@code public} method.\r\n */\r\n@Test\r\n@Annotated\r\npublic void testGetMethodsListWithAnnotation() throws NoSuchMethodException {\r\n    assertEquals(0, MethodUtils.getMethodsListWithAnnotation(Object.class, Annotated.class).size());\r\n    final List<Method> methodWithAnnotation = MethodUtils.getMethodsListWithAnnotation(MethodUtilsTest.class, Annotated.class);\r\n    assertEquals(2, methodWithAnnotation.size());\r\n    assertTrue(methodWithAnnotation.contains(MethodUtilsTest.class.getMethod(\"testGetMethodsWithAnnotation\")));\r\n    assertTrue(methodWithAnnotation.contains(MethodUtilsTest.class.getMethod(\"testGetMethodsListWithAnnotation\")));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\reflect\\MethodUtilsTest.java",
  "methodName" : "testGetMethodsListWithAnnotationNullPointerException1",
  "sourceCode" : "@Test\r\nvoid testGetMethodsListWithAnnotationNullPointerException1() {\r\n    assertNullPointerException(() -> MethodUtils.getMethodsListWithAnnotation(FieldUtilsTest.class, null));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\reflect\\MethodUtilsTest.java",
  "methodName" : "testGetMethodsListWithAnnotationNullPointerException2",
  "sourceCode" : "@Test\r\nvoid testGetMethodsListWithAnnotationNullPointerException2() {\r\n    assertNullPointerException(() -> MethodUtils.getMethodsListWithAnnotation(null, Annotated.class));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\reflect\\MethodUtilsTest.java",
  "methodName" : "testGetMethodsListWithAnnotationNullPointerException3",
  "sourceCode" : "@Test\r\nvoid testGetMethodsListWithAnnotationNullPointerException3() {\r\n    assertNullPointerException(() -> MethodUtils.getMethodsListWithAnnotation(null, null));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\reflect\\MethodUtilsTest.java",
  "methodName" : "testGetMethodsWithAnnotation",
  "sourceCode" : "@Test\r\n@Annotated\r\npublic void testGetMethodsWithAnnotation() throws NoSuchMethodException {\r\n    assertArrayEquals(new Method[0], MethodUtils.getMethodsWithAnnotation(Object.class, Annotated.class));\r\n    final Method[] methodsWithAnnotation = MethodUtils.getMethodsWithAnnotation(MethodUtilsTest.class, Annotated.class);\r\n    assertEquals(2, methodsWithAnnotation.length);\r\n    assertTrue(ArrayUtils.contains(methodsWithAnnotation, MethodUtilsTest.class.getMethod(\"testGetMethodsWithAnnotation\")));\r\n    assertTrue(ArrayUtils.contains(methodsWithAnnotation, MethodUtilsTest.class.getMethod(\"testGetMethodsListWithAnnotation\")));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\reflect\\MethodUtilsTest.java",
  "methodName" : "testGetMethodsWithAnnotationIllegalArgumentException1",
  "sourceCode" : "@Test\r\nvoid testGetMethodsWithAnnotationIllegalArgumentException1() {\r\n    assertNullPointerException(() -> MethodUtils.getMethodsWithAnnotation(FieldUtilsTest.class, null));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\reflect\\MethodUtilsTest.java",
  "methodName" : "testGetMethodsWithAnnotationIllegalArgumentException2",
  "sourceCode" : "@Test\r\nvoid testGetMethodsWithAnnotationIllegalArgumentException2() {\r\n    assertNullPointerException(() -> MethodUtils.getMethodsWithAnnotation(null, Annotated.class));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\reflect\\MethodUtilsTest.java",
  "methodName" : "testGetMethodsWithAnnotationIllegalArgumentException3",
  "sourceCode" : "@Test\r\nvoid testGetMethodsWithAnnotationIllegalArgumentException3() {\r\n    assertNullPointerException(() -> MethodUtils.getMethodsWithAnnotation(null, null));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\reflect\\MethodUtilsTest.java",
  "methodName" : "testGetMethodsWithAnnotationNotSearchSupersAndNotIgnoreAccess",
  "sourceCode" : "@Test\r\nvoid testGetMethodsWithAnnotationNotSearchSupersAndNotIgnoreAccess() {\r\n    assertArrayEquals(new Method[0], MethodUtils.getMethodsWithAnnotation(Object.class, Annotated.class, false, false));\r\n    final Method[] methodsWithAnnotation = MethodUtils.getMethodsWithAnnotation(PublicChild.class, Annotated.class, false, false);\r\n    assertEquals(1, methodsWithAnnotation.length);\r\n    assertEquals(\"PublicChild.publicAnnotatedMethod\", methodsWithAnnotation[0].getDeclaringClass().getSimpleName() + '.' + methodsWithAnnotation[0].getName());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\reflect\\MethodUtilsTest.java",
  "methodName" : "testGetMethodsWithAnnotationNotSearchSupersButIgnoreAccess",
  "sourceCode" : "@Test\r\nvoid testGetMethodsWithAnnotationNotSearchSupersButIgnoreAccess() {\r\n    assertArrayEquals(new Method[0], MethodUtils.getMethodsWithAnnotation(Object.class, Annotated.class, false, true));\r\n    final Method[] methodsWithAnnotation = MethodUtils.getMethodsWithAnnotation(PublicChild.class, Annotated.class, false, true);\r\n    assertEquals(2, methodsWithAnnotation.length);\r\n    assertEquals(\"PublicChild\", methodsWithAnnotation[0].getDeclaringClass().getSimpleName());\r\n    assertEquals(\"PublicChild\", methodsWithAnnotation[1].getDeclaringClass().getSimpleName());\r\n    assertTrue(methodsWithAnnotation[0].getName().endsWith(\"AnnotatedMethod\"));\r\n    assertTrue(methodsWithAnnotation[1].getName().endsWith(\"AnnotatedMethod\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\reflect\\MethodUtilsTest.java",
  "methodName" : "testGetMethodsWithAnnotationSearchSupersAndIgnoreAccess",
  "sourceCode" : "@Test\r\nvoid testGetMethodsWithAnnotationSearchSupersAndIgnoreAccess() {\r\n    assertArrayEquals(new Method[0], MethodUtils.getMethodsWithAnnotation(Object.class, Annotated.class, true, true));\r\n    final Method[] methodsWithAnnotation = MethodUtils.getMethodsWithAnnotation(PublicChild.class, Annotated.class, true, true);\r\n    assertEquals(4, methodsWithAnnotation.length);\r\n    assertEquals(\"PublicChild\", methodsWithAnnotation[0].getDeclaringClass().getSimpleName());\r\n    assertEquals(\"PublicChild\", methodsWithAnnotation[1].getDeclaringClass().getSimpleName());\r\n    assertTrue(methodsWithAnnotation[0].getName().endsWith(\"AnnotatedMethod\"));\r\n    assertTrue(methodsWithAnnotation[1].getName().endsWith(\"AnnotatedMethod\"));\r\n    assertEquals(\"Foo.doIt\", methodsWithAnnotation[2].getDeclaringClass().getSimpleName() + '.' + methodsWithAnnotation[2].getName());\r\n    assertEquals(\"Parent.parentProtectedAnnotatedMethod\", methodsWithAnnotation[3].getDeclaringClass().getSimpleName() + '.' + methodsWithAnnotation[3].getName());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\reflect\\MethodUtilsTest.java",
  "methodName" : "testGetMethodsWithAnnotationSearchSupersButNotIgnoreAccess",
  "sourceCode" : "@Test\r\nvoid testGetMethodsWithAnnotationSearchSupersButNotIgnoreAccess() {\r\n    assertArrayEquals(new Method[0], MethodUtils.getMethodsWithAnnotation(Object.class, Annotated.class, true, false));\r\n    final Method[] methodsWithAnnotation = MethodUtils.getMethodsWithAnnotation(PublicChild.class, Annotated.class, true, false);\r\n    assertEquals(2, methodsWithAnnotation.length);\r\n    assertEquals(\"PublicChild.publicAnnotatedMethod\", methodsWithAnnotation[0].getDeclaringClass().getSimpleName() + '.' + methodsWithAnnotation[0].getName());\r\n    assertEquals(\"Foo.doIt\", methodsWithAnnotation[1].getDeclaringClass().getSimpleName() + '.' + methodsWithAnnotation[1].getName());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\reflect\\MethodUtilsTest.java",
  "methodName" : "testGetOverrideHierarchyExcludingInterfaces",
  "sourceCode" : "@Test\r\nvoid testGetOverrideHierarchyExcludingInterfaces() {\r\n    final Method method = MethodUtils.getAccessibleMethod(StringParameterizedChild.class, \"consume\", String.class);\r\n    final Iterator<MethodDescriptor> expected = Arrays.asList(new MethodDescriptor(StringParameterizedChild.class, \"consume\", String.class), new MethodDescriptor(GenericParent.class, \"consume\", GenericParent.class.getTypeParameters()[0])).iterator();\r\n    for (final Method m : MethodUtils.getOverrideHierarchy(method, Interfaces.EXCLUDE)) {\r\n        assertTrue(expected.hasNext());\r\n        final MethodDescriptor md = expected.next();\r\n        assertEquals(md.declaringClass, m.getDeclaringClass());\r\n        assertEquals(md.name, m.getName());\r\n        assertEquals(md.parameterTypes.length, m.getParameterTypes().length);\r\n        for (int i = 0; i < md.parameterTypes.length; i++) {\r\n            assertTrue(TypeUtils.equals(md.parameterTypes[i], m.getGenericParameterTypes()[i]));\r\n        }\r\n    }\r\n    assertFalse(expected.hasNext());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\reflect\\MethodUtilsTest.java",
  "methodName" : "testGetOverrideHierarchyIncludingInterfaces",
  "sourceCode" : "@Test\r\nvoid testGetOverrideHierarchyIncludingInterfaces() {\r\n    final Method method = MethodUtils.getAccessibleMethod(StringParameterizedChild.class, \"consume\", String.class);\r\n    final Iterator<MethodDescriptor> expected = Arrays.asList(new MethodDescriptor(StringParameterizedChild.class, \"consume\", String.class), new MethodDescriptor(GenericParent.class, \"consume\", GenericParent.class.getTypeParameters()[0]), new MethodDescriptor(GenericConsumer.class, \"consume\", GenericConsumer.class.getTypeParameters()[0])).iterator();\r\n    for (final Method m : MethodUtils.getOverrideHierarchy(method, Interfaces.INCLUDE)) {\r\n        assertTrue(expected.hasNext());\r\n        final MethodDescriptor md = expected.next();\r\n        assertEquals(md.declaringClass, m.getDeclaringClass());\r\n        assertEquals(md.name, m.getName());\r\n        assertEquals(md.parameterTypes.length, m.getParameterTypes().length);\r\n        for (int i = 0; i < md.parameterTypes.length; i++) {\r\n            assertTrue(TypeUtils.equals(md.parameterTypes[i], m.getGenericParameterTypes()[i]));\r\n        }\r\n    }\r\n    assertFalse(expected.hasNext());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\reflect\\MethodUtilsTest.java",
  "methodName" : "testInvokeExactMethod",
  "sourceCode" : "@Test\r\nvoid testInvokeExactMethod() throws Exception {\r\n    assertEquals(\"foo()\", MethodUtils.invokeExactMethod(testBean, \"foo\", (Object[]) ArrayUtils.EMPTY_CLASS_ARRAY));\r\n    assertEquals(\"foo()\", MethodUtils.invokeExactMethod(testBean, \"foo\"));\r\n    assertEquals(\"foo()\", MethodUtils.invokeExactMethod(testBean, \"foo\", (Object[]) null));\r\n    assertEquals(\"foo()\", MethodUtils.invokeExactMethod(testBean, \"foo\", null, null));\r\n    assertEquals(\"foo(String)\", MethodUtils.invokeExactMethod(testBean, \"foo\", \"\"));\r\n    assertEquals(\"foo(Object)\", MethodUtils.invokeExactMethod(testBean, \"foo\", new Object()));\r\n    assertEquals(\"foo(Integer)\", MethodUtils.invokeExactMethod(testBean, \"foo\", NumberUtils.INTEGER_ONE));\r\n    assertEquals(\"foo(double)\", MethodUtils.invokeExactMethod(testBean, \"foo\", new Object[] { NumberUtils.DOUBLE_ONE }, new Class[] { Double.TYPE }));\r\n    assertThrows(NoSuchMethodException.class, () -> MethodUtils.invokeExactMethod(testBean, \"foo\", NumberUtils.BYTE_ONE));\r\n    assertThrows(NoSuchMethodException.class, () -> MethodUtils.invokeExactMethod(testBean, \"foo\", NumberUtils.LONG_ONE));\r\n    assertThrows(NoSuchMethodException.class, () -> MethodUtils.invokeExactMethod(testBean, \"foo\", Boolean.TRUE));\r\n    assertThrows(NullPointerException.class, () -> MethodUtils.invokeExactMethod(null, \"foo\", NumberUtils.BYTE_ONE));\r\n    assertThrows(NoSuchMethodException.class, () -> MethodUtils.invokeExactMethod(testBean, null, NumberUtils.BYTE_ONE));\r\n    assertThrows(NullPointerException.class, () -> MethodUtils.invokeExactMethod(null, \"foo\", new Object[] { NumberUtils.DOUBLE_ONE }, new Class[] { Double.TYPE }));\r\n    assertThrows(NoSuchMethodException.class, () -> MethodUtils.invokeExactMethod(testBean, null, new Object[] { NumberUtils.DOUBLE_ONE }, new Class[] { Double.TYPE }));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\reflect\\MethodUtilsTest.java",
  "methodName" : "testInvokeExactStaticMethod",
  "sourceCode" : "@Test\r\nvoid testInvokeExactStaticMethod() throws Exception {\r\n    assertEquals(\"bar()\", MethodUtils.invokeExactStaticMethod(TestBean.class, \"bar\", (Object[]) ArrayUtils.EMPTY_CLASS_ARRAY));\r\n    assertEquals(\"bar()\", MethodUtils.invokeExactStaticMethod(TestBean.class, \"bar\", (Object[]) null));\r\n    assertEquals(\"bar()\", MethodUtils.invokeExactStaticMethod(TestBean.class, \"bar\", null, null));\r\n    assertEquals(\"bar(String)\", MethodUtils.invokeExactStaticMethod(TestBean.class, \"bar\", \"\"));\r\n    assertEquals(\"bar(Object)\", MethodUtils.invokeExactStaticMethod(TestBean.class, \"bar\", new Object()));\r\n    assertEquals(\"bar(Integer)\", MethodUtils.invokeExactStaticMethod(TestBean.class, \"bar\", NumberUtils.INTEGER_ONE));\r\n    assertEquals(\"bar(double)\", MethodUtils.invokeExactStaticMethod(TestBean.class, \"bar\", new Object[] { NumberUtils.DOUBLE_ONE }, new Class[] { Double.TYPE }));\r\n    assertThrows(NoSuchMethodException.class, () -> MethodUtils.invokeExactStaticMethod(TestBean.class, \"bar\", NumberUtils.BYTE_ONE));\r\n    assertThrows(NoSuchMethodException.class, () -> MethodUtils.invokeExactStaticMethod(TestBean.class, \"bar\", NumberUtils.LONG_ONE));\r\n    assertThrows(NoSuchMethodException.class, () -> MethodUtils.invokeExactStaticMethod(TestBean.class, \"bar\", Boolean.TRUE));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\reflect\\MethodUtilsTest.java",
  "methodName" : "testInvokeJavaVarArgsOverloadingResolution",
  "sourceCode" : "@Test\r\nvoid testInvokeJavaVarArgsOverloadingResolution() throws Exception {\r\n    // Primitive wrappers\r\n    assertEquals(\"Byte...\", MethodUtils.invokeStaticMethod(TestBean.class, \"varOverload\", (byte) 1, (byte) 2));\r\n    assertEquals(\"Short...\", MethodUtils.invokeStaticMethod(TestBean.class, \"varOverload\", (short) 1, (short) 2));\r\n    assertEquals(\"Integer...\", MethodUtils.invokeStaticMethod(TestBean.class, \"varOverload\", 1, 2));\r\n    assertEquals(\"Long...\", MethodUtils.invokeStaticMethod(TestBean.class, \"varOverload\", 1L, 2L));\r\n    assertEquals(\"Float...\", MethodUtils.invokeStaticMethod(TestBean.class, \"varOverload\", 1f, 2f));\r\n    assertEquals(\"Double...\", MethodUtils.invokeStaticMethod(TestBean.class, \"varOverload\", 1d, 2d));\r\n    assertEquals(\"Boolean...\", MethodUtils.invokeStaticMethod(TestBean.class, \"varOverload\", true, false));\r\n    // Number\r\n    assertEquals(\"Number...\", MethodUtils.invokeStaticMethod(TestBean.class, \"varOverload\", 1, 1.1));\r\n    assertEquals(\"Number...\", MethodUtils.invokeStaticMethod(TestBean.class, \"varOverload\", 1, 1L));\r\n    assertEquals(\"Number...\", MethodUtils.invokeStaticMethod(TestBean.class, \"varOverload\", 1d, 1f));\r\n    assertEquals(\"Number...\", MethodUtils.invokeStaticMethod(TestBean.class, \"varOverload\", (short) 1, (byte) 1));\r\n    assertEquals(\"Number...\", MethodUtils.invokeStaticMethod(TestBean.class, \"numOverload\", ArrayUtils.EMPTY_OBJECT_ARRAY));\r\n    assertEquals(\"Number...\", MethodUtils.invokeStaticMethod(TestBean.class, \"numOverload\", (Object[]) ArrayUtils.EMPTY_CLASS_ARRAY));\r\n    assertEquals(\"Number...\", MethodUtils.invokeStaticMethod(TestBean.class, \"numOverload\", (Object[]) ArrayUtils.EMPTY_INTEGER_OBJECT_ARRAY));\r\n    // Object\r\n    assertEquals(\"Object...\", MethodUtils.invokeStaticMethod(TestBean.class, \"varOverload\", 1, \"s\"));\r\n    assertEquals(\"Object...\", MethodUtils.invokeStaticMethod(TestBean.class, \"varOverload\", 1, true));\r\n    assertEquals(\"Object...\", MethodUtils.invokeStaticMethod(TestBean.class, \"varOverload\", 1.1, true));\r\n    assertEquals(\"Object...\", MethodUtils.invokeStaticMethod(TestBean.class, \"varOverload\", 'c', true));\r\n    assertEquals(\"Object...\", MethodUtils.invokeStaticMethod(TestBean.class, \"varOverload\", 1, 'c'));\r\n    assertEquals(\"Object...\", MethodUtils.invokeStaticMethod(TestBean.class, \"varOverload\", 'c', \"s\"));\r\n    assertEquals(\"Object...\", MethodUtils.invokeStaticMethod(TestBean.class, \"varOverload\", ArrayUtils.EMPTY_OBJECT_ARRAY));\r\n    assertEquals(\"Object...\", MethodUtils.invokeStaticMethod(TestBean.class, \"varOverload\", (Object[]) ArrayUtils.EMPTY_CLASS_ARRAY));\r\n    assertEquals(\"Object...\", MethodUtils.invokeStaticMethod(TestBean.class, \"varOverload\", (Object[]) ArrayUtils.EMPTY_INTEGER_OBJECT_ARRAY));\r\n    assertEquals(\"Object...\", MethodUtils.invokeStaticMethod(TestBean.class, \"varOverload\"));\r\n    // Other\r\n    assertEquals(\"String...\", MethodUtils.invokeStaticMethod(TestBean.class, \"varOverload\", \"a\", \"b\"));\r\n    assertEquals(\"Character...\", MethodUtils.invokeStaticMethod(TestBean.class, \"varOverload\", 'a', 'b'));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\reflect\\MethodUtilsTest.java",
  "methodName" : "testInvokeMethod",
  "sourceCode" : "@Test\r\nvoid testInvokeMethod() throws Exception {\r\n    assertEquals(\"foo()\", MethodUtils.invokeMethod(testBean, \"foo\", (Object[]) ArrayUtils.EMPTY_CLASS_ARRAY));\r\n    assertEquals(\"foo()\", MethodUtils.invokeMethod(testBean, \"foo\"));\r\n    assertEquals(\"foo()\", MethodUtils.invokeMethod(testBean, \"foo\", (Object[]) null));\r\n    assertEquals(\"foo()\", MethodUtils.invokeMethod(testBean, \"foo\", null, null));\r\n    assertEquals(\"foo(String)\", MethodUtils.invokeMethod(testBean, \"foo\", \"\"));\r\n    assertEquals(\"foo(Object)\", MethodUtils.invokeMethod(testBean, \"foo\", new Object()));\r\n    assertEquals(\"foo(Object)\", MethodUtils.invokeMethod(testBean, \"foo\", Boolean.TRUE));\r\n    assertEquals(\"foo(Integer)\", MethodUtils.invokeMethod(testBean, \"foo\", NumberUtils.INTEGER_ONE));\r\n    assertEquals(\"foo(int)\", MethodUtils.invokeMethod(testBean, \"foo\", NumberUtils.BYTE_ONE));\r\n    assertEquals(\"foo(long)\", MethodUtils.invokeMethod(testBean, \"foo\", NumberUtils.LONG_ONE));\r\n    assertEquals(\"foo(double)\", MethodUtils.invokeMethod(testBean, \"foo\", NumberUtils.DOUBLE_ONE));\r\n    assertEquals(\"foo(String...)\", MethodUtils.invokeMethod(testBean, \"foo\", \"a\", \"b\", \"c\"));\r\n    assertEquals(\"foo(String...)\", MethodUtils.invokeMethod(testBean, \"foo\", \"a\", \"b\", \"c\"));\r\n    assertEquals(\"foo(int, String...)\", MethodUtils.invokeMethod(testBean, \"foo\", 5, \"a\", \"b\", \"c\"));\r\n    assertEquals(\"foo(long...)\", MethodUtils.invokeMethod(testBean, \"foo\", 1L, 2L));\r\n    assertEquals(\"foo(long...)\", MethodUtils.invokeMethod(testBean, \"foo\", 1, 2));\r\n    // widen\r\n    assertEquals(\"foo(long...)\", MethodUtils.invokeMethod(testBean, \"foo\", (byte) 1, (byte) 2));\r\n    // widen\r\n    assertEquals(\"foo(long...)\", MethodUtils.invokeMethod(testBean, \"foo\", (short) 1, (short) 2));\r\n    // widen\r\n    assertEquals(\"foo(long...)\", MethodUtils.invokeMethod(testBean, \"foo\", (char) 1, (char) 2));\r\n    TestBean.verify(new ImmutablePair<>(\"String...\", new String[] { \"x\", \"y\" }), MethodUtils.invokeMethod(testBean, \"varOverloadEcho\", \"x\", \"y\"));\r\n    TestBean.verify(new ImmutablePair<>(\"Number...\", new Number[] { 17, 23, 42 }), MethodUtils.invokeMethod(testBean, \"varOverloadEcho\", 17, 23, 42));\r\n    TestBean.verify(new ImmutablePair<>(\"String...\", new String[] { \"x\", \"y\" }), MethodUtils.invokeMethod(testBean, \"varOverloadEcho\", \"x\", \"y\"));\r\n    TestBean.verify(new ImmutablePair<>(\"Number...\", new Number[] { 17, 23, 42 }), MethodUtils.invokeMethod(testBean, \"varOverloadEcho\", 17, 23, 42));\r\n    assertNullPointerException(() -> MethodUtils.invokeMethod(null, \"foo\", 1, 2));\r\n    assertThrows(NoSuchMethodException.class, () -> MethodUtils.invokeMethod(testBean, null, 1, 2));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\reflect\\MethodUtilsTest.java",
  "methodName" : "testInvokeMethod_VarArgsWithNullValues",
  "sourceCode" : "@Test\r\nvoid testInvokeMethod_VarArgsWithNullValues() throws Exception {\r\n    assertEquals(\"String...\", MethodUtils.invokeMethod(testBean, \"varOverload\", \"a\", null, \"c\"));\r\n    assertEquals(\"String...\", MethodUtils.invokeMethod(testBean, \"varOverload\", \"a\", \"b\", null));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\reflect\\MethodUtilsTest.java",
  "methodName" : "testInvokeMethod1PlusVarArgs",
  "sourceCode" : "@Test\r\nvoid testInvokeMethod1PlusVarArgs() throws Exception {\r\n    // intStringVarArg\r\n    assertEquals(\"int, String...\", MethodUtils.invokeMethod(testBean, \"intStringVarArg\", 1));\r\n    assertEquals(\"int, String...\", MethodUtils.invokeMethod(testBean, \"intStringVarArg\", 1, \"s\"));\r\n    assertEquals(\"int, String...\", MethodUtils.invokeMethod(testBean, \"intStringVarArg\", 1, \"s1\", \"s2\"));\r\n    assertThrows(NoSuchMethodException.class, () -> MethodUtils.invokeMethod(testBean, \"intStringVarArg\", 1, \"s1\", 5));\r\n    // intLongVarArg\r\n    assertEquals(\"int, long...\", MethodUtils.invokeMethod(testBean, \"intLongVarArg\", 1));\r\n    assertEquals(\"int, long...\", MethodUtils.invokeMethod(testBean, \"intLongVarArg\", 1, 2L));\r\n    assertEquals(\"int, long...\", MethodUtils.invokeMethod(testBean, \"intLongVarArg\", 1, 2L, 3L));\r\n    assertThrows(NoSuchMethodException.class, () -> MethodUtils.invokeMethod(testBean, \"intLongVarArg\", 1, \"s1\", 5));\r\n    // intIntVarArg\r\n    assertEquals(\"int, int...\", MethodUtils.invokeMethod(testBean, \"intIntVarArg\", 1));\r\n    assertEquals(\"int, int...\", MethodUtils.invokeMethod(testBean, \"intIntVarArg\", 1, 2));\r\n    assertEquals(\"int, int...\", MethodUtils.invokeMethod(testBean, \"intIntVarArg\", 1, 2, 3));\r\n    assertThrows(NoSuchMethodException.class, () -> MethodUtils.invokeMethod(testBean, \"intLongVarArg\", 1, \"s1\", 5));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\reflect\\MethodUtilsTest.java",
  "methodName" : "testInvokeMethodForceAccessNoArgs",
  "sourceCode" : "@Test\r\nvoid testInvokeMethodForceAccessNoArgs() throws Exception {\r\n    assertEquals(\"privateStringStuff()\", MethodUtils.invokeMethod(testBean, true, \"privateStringStuff\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\reflect\\MethodUtilsTest.java",
  "methodName" : "testInvokeMethodForceAccessWithArgs",
  "sourceCode" : "@Test\r\nvoid testInvokeMethodForceAccessWithArgs() throws Exception {\r\n    assertEquals(\"privateStringStuff(Integer)\", MethodUtils.invokeMethod(testBean, true, \"privateStringStuff\", 5));\r\n    assertEquals(\"privateStringStuff(double)\", MethodUtils.invokeMethod(testBean, true, \"privateStringStuff\", 5.0d));\r\n    assertEquals(\"privateStringStuff(String)\", MethodUtils.invokeMethod(testBean, true, \"privateStringStuff\", \"Hi There\"));\r\n    assertEquals(\"privateStringStuff(Object)\", MethodUtils.invokeMethod(testBean, true, \"privateStringStuff\", new Date()));\r\n    assertNullPointerException(() -> MethodUtils.invokeMethod(null, true, \"privateStringStuff\", \"Hi There\"));\r\n    assertNullPointerException(() -> MethodUtils.invokeMethod(testBean, true, null, \"Hi There\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\reflect\\MethodUtilsTest.java",
  "methodName" : "testInvokeMethodVarArgsNotUniqueResolvable",
  "sourceCode" : "@Test\r\nvoid testInvokeMethodVarArgsNotUniqueResolvable() throws Exception {\r\n    assertEquals(\"Boolean...\", MethodUtils.invokeMethod(testBean, \"varOverload\", new Object[] { null }));\r\n    assertEquals(\"Object...\", MethodUtils.invokeMethod(testBean, \"varOverload\", (Object[]) null));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\reflect\\MethodUtilsTest.java",
  "methodName" : "testInvokeMethodVarArgsOfInterface",
  "sourceCode" : "@Test\r\nvoid testInvokeMethodVarArgsOfInterface() throws Exception {\r\n    // packagePrivateEmptyInterface\r\n    assertEquals(\"PackagePrivateEmptyInterface...\", MethodUtils.invokeMethod(testBean, \"packagePrivateEmptyInterface\", new PublicImpl1OfPackagePrivateEmptyInterface(), new PublicImpl2OfPackagePrivateEmptyInterface()));\r\n    assertEquals(\"PackagePrivateEmptyInterface...\", MethodUtils.invokeMethod(testBean, \"packagePrivateEmptyInterface\", new PackagePrivateEmptyInterface() {\r\n    }, new PackagePrivateEmptyInterface() {\r\n    }));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\reflect\\MethodUtilsTest.java",
  "methodName" : "testInvokeMethodVarArgsUnboxingBooleanArray",
  "sourceCode" : "@Test\r\nvoid testInvokeMethodVarArgsUnboxingBooleanArray() throws Exception {\r\n    final TestBean testBean = new TestBean();\r\n    final boolean[] actual = (boolean[]) MethodUtils.invokeMethod(testBean, \"unboxing\", Boolean.TRUE, Boolean.FALSE);\r\n    assertArrayEquals(new boolean[] { true, false }, actual);\r\n    assertTrue(testBean.unboxBooleanArray);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\reflect\\MethodUtilsTest.java",
  "methodName" : "testInvokeMethodVarArgsUnboxingByteArray",
  "sourceCode" : "@Test\r\nvoid testInvokeMethodVarArgsUnboxingByteArray() throws Exception {\r\n    final TestBean testBean = new TestBean();\r\n    final byte[] actual = (byte[]) MethodUtils.invokeMethod(testBean, \"unboxing\", Byte.valueOf((byte) 1), Byte.valueOf((byte) 2));\r\n    assertArrayEquals(new byte[] { 1, 2 }, actual);\r\n    assertTrue(testBean.unboxByteArray);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\reflect\\MethodUtilsTest.java",
  "methodName" : "testInvokeMethodVarArgsUnboxingCharArray",
  "sourceCode" : "@Test\r\nvoid testInvokeMethodVarArgsUnboxingCharArray() throws Exception {\r\n    final TestBean testBean = new TestBean();\r\n    final char[] actual = (char[]) MethodUtils.invokeMethod(testBean, \"unboxing\", Character.valueOf((char) 1), Character.valueOf((char) 2));\r\n    assertArrayEquals(new char[] { 1, 2 }, actual);\r\n    assertTrue(testBean.unboxCharArray);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\reflect\\MethodUtilsTest.java",
  "methodName" : "testInvokeMethodVarArgsUnboxingDoubleArray",
  "sourceCode" : "@Test\r\nvoid testInvokeMethodVarArgsUnboxingDoubleArray() throws Exception {\r\n    final TestBean testBean = new TestBean();\r\n    final double[] actual = (double[]) MethodUtils.invokeMethod(testBean, \"unboxing\", Double.valueOf(1), Double.valueOf(2));\r\n    assertArrayEquals(new double[] { 1, 2 }, actual);\r\n    assertTrue(testBean.unboxDoubleArray);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\reflect\\MethodUtilsTest.java",
  "methodName" : "testInvokeMethodVarArgsUnboxingFloatArray",
  "sourceCode" : "@Test\r\nvoid testInvokeMethodVarArgsUnboxingFloatArray() throws Exception {\r\n    final TestBean testBean = new TestBean();\r\n    final float[] actual = (float[]) MethodUtils.invokeMethod(testBean, \"unboxing\", Float.valueOf(1), Float.valueOf(2));\r\n    assertArrayEquals(new float[] { 1, 2 }, actual);\r\n    assertTrue(testBean.unboxFloatArray);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\reflect\\MethodUtilsTest.java",
  "methodName" : "testInvokeMethodVarArgsUnboxingIntArray",
  "sourceCode" : "@Test\r\nvoid testInvokeMethodVarArgsUnboxingIntArray() throws Exception {\r\n    final TestBean testBean = new TestBean();\r\n    final int[] actual = (int[]) MethodUtils.invokeMethod(testBean, \"unboxing\", Integer.valueOf(1), Integer.valueOf(2));\r\n    assertArrayEquals(new int[] { 1, 2 }, actual);\r\n    assertTrue(testBean.unboxIntArray);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\reflect\\MethodUtilsTest.java",
  "methodName" : "testInvokeMethodVarArgsUnboxingLongArray",
  "sourceCode" : "@Test\r\nvoid testInvokeMethodVarArgsUnboxingLongArray() throws Exception {\r\n    final TestBean testBean = new TestBean();\r\n    final long[] actual = (long[]) MethodUtils.invokeMethod(testBean, \"unboxing\", Long.valueOf(1), Long.valueOf(2));\r\n    assertArrayEquals(new long[] { 1, 2 }, actual);\r\n    assertTrue(testBean.unboxLongArray);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\reflect\\MethodUtilsTest.java",
  "methodName" : "testInvokeMethodVarArgsUnboxingShortArray",
  "sourceCode" : "@Test\r\nvoid testInvokeMethodVarArgsUnboxingShortArray() throws Exception {\r\n    final TestBean testBean = new TestBean();\r\n    final short[] actual = (short[]) MethodUtils.invokeMethod(testBean, \"unboxing\", Short.valueOf((short) 1), Short.valueOf((short) 2));\r\n    assertArrayEquals(new short[] { 1, 2 }, actual);\r\n    assertTrue(testBean.unboxShortArray);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\reflect\\MethodUtilsTest.java",
  "methodName" : "testInvokeStaticMethod",
  "sourceCode" : "@Test\r\nvoid testInvokeStaticMethod() throws Exception {\r\n    assertEquals(\"bar()\", MethodUtils.invokeStaticMethod(TestBean.class, \"bar\"));\r\n    assertEquals(\"bar()\", MethodUtils.invokeStaticMethod(TestBean.class, \"bar\", (Object[]) ArrayUtils.EMPTY_CLASS_ARRAY));\r\n    assertEquals(\"bar()\", MethodUtils.invokeStaticMethod(TestBean.class, \"bar\", (Object[]) null));\r\n    assertEquals(\"bar()\", MethodUtils.invokeStaticMethod(TestBean.class, \"bar\", null, null));\r\n    assertEquals(\"bar(String)\", MethodUtils.invokeStaticMethod(TestBean.class, \"bar\", \"\"));\r\n    assertEquals(\"bar(Object)\", MethodUtils.invokeStaticMethod(TestBean.class, \"bar\", new Object()));\r\n    assertEquals(\"bar(Object)\", MethodUtils.invokeStaticMethod(TestBean.class, \"bar\", Boolean.TRUE));\r\n    assertEquals(\"bar(Integer)\", MethodUtils.invokeStaticMethod(TestBean.class, \"bar\", NumberUtils.INTEGER_ONE));\r\n    assertEquals(\"bar(int)\", MethodUtils.invokeStaticMethod(TestBean.class, \"bar\", NumberUtils.BYTE_ONE));\r\n    assertEquals(\"static int\", MethodUtils.invokeStaticMethod(TestBean.class, \"staticInt\", NumberUtils.BYTE_ONE));\r\n    assertEquals(\"static int\", MethodUtils.invokeStaticMethod(TestBean.class, \"staticInt\", NumberUtils.SHORT_ONE));\r\n    assertEquals(\"static int\", MethodUtils.invokeStaticMethod(TestBean.class, \"staticInt\", NumberUtils.INTEGER_ONE));\r\n    assertEquals(\"static int\", MethodUtils.invokeStaticMethod(TestBean.class, \"staticInt\", 'a'));\r\n    assertEquals(\"bar(double)\", MethodUtils.invokeStaticMethod(TestBean.class, \"bar\", NumberUtils.DOUBLE_ONE));\r\n    assertEquals(\"bar(String...)\", MethodUtils.invokeStaticMethod(TestBean.class, \"bar\", \"a\", \"b\"));\r\n    assertEquals(\"bar(long...)\", MethodUtils.invokeStaticMethod(TestBean.class, \"bar\", 1L, 2L));\r\n    // widen\r\n    assertEquals(\"bar(long...)\", MethodUtils.invokeStaticMethod(TestBean.class, \"bar\", (byte) 1, (byte) 2));\r\n    // widen\r\n    assertEquals(\"bar(long...)\", MethodUtils.invokeStaticMethod(TestBean.class, \"bar\", (short) 1, (short) 2));\r\n    // widen\r\n    assertEquals(\"bar(long...)\", MethodUtils.invokeStaticMethod(TestBean.class, \"bar\", 1, 2));\r\n    assertEquals(\"bar(Integer, String...)\", MethodUtils.invokeStaticMethod(TestBean.class, \"bar\", NumberUtils.INTEGER_ONE, \"a\", \"b\"));\r\n    // You cannot widen a Short to an Integer in Java source, but you can a short to an int but this API declares an Integer, not an int.\r\n    assertThrows(NoSuchMethodException.class, // widen\r\n    () -> assertEquals(\"bar(Integer, String...)\", MethodUtils.invokeStaticMethod(TestBean.class, \"bar\", NumberUtils.SHORT_ONE, \"a\", \"b\")));\r\n    TestBean.verify(new ImmutablePair<>(\"String...\", new String[] { \"x\", \"y\" }), MethodUtils.invokeStaticMethod(TestBean.class, \"varOverloadEchoStatic\", \"x\", \"y\"));\r\n    TestBean.verify(new ImmutablePair<>(\"Number...\", new Number[] { 17, 23, 42 }), MethodUtils.invokeStaticMethod(TestBean.class, \"varOverloadEchoStatic\", 17, 23, 42));\r\n    TestBean.verify(new ImmutablePair<>(\"String...\", new String[] { \"x\", \"y\" }), MethodUtils.invokeStaticMethod(TestBean.class, \"varOverloadEchoStatic\", \"x\", \"y\"));\r\n    TestBean.verify(new ImmutablePair<>(\"Number...\", new Number[] { 17, 23, 42 }), MethodUtils.invokeStaticMethod(TestBean.class, \"varOverloadEchoStatic\", 17, 23, 42));\r\n    assertThrows(NoSuchMethodException.class, () -> MethodUtils.invokeStaticMethod(TestBean.class, \"does_not_exist\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\reflect\\MethodUtilsTest.java",
  "methodName" : "testInvokeStaticMethod1PlusVarArgs",
  "sourceCode" : "@Test\r\nvoid testInvokeStaticMethod1PlusVarArgs() throws Exception {\r\n    // staticIntStringVarArg\r\n    assertEquals(\"static int, String...\", MethodUtils.invokeStaticMethod(TestBean.class, \"staticIntStringVarArg\", 1));\r\n    assertEquals(\"static int, String...\", MethodUtils.invokeStaticMethod(TestBean.class, \"staticIntStringVarArg\", 1, \"s\"));\r\n    assertEquals(\"static int, String...\", MethodUtils.invokeStaticMethod(TestBean.class, \"staticIntStringVarArg\", 1, \"s1\", \"s2\"));\r\n    assertThrows(NoSuchMethodException.class, () -> MethodUtils.invokeStaticMethod(TestBean.class, \"staticIntStringVarArg\", 1, \"s1\", 5));\r\n    // staticIntLongVarArg\r\n    assertEquals(\"static int, long...\", MethodUtils.invokeMethod(testBean, \"staticIntLongVarArg\", 1));\r\n    assertEquals(\"static int, long...\", MethodUtils.invokeMethod(testBean, \"staticIntLongVarArg\", 1, 2L));\r\n    assertEquals(\"static int, long...\", MethodUtils.invokeMethod(testBean, \"staticIntLongVarArg\", 1, 2L, 3L));\r\n    assertThrows(NoSuchMethodException.class, () -> MethodUtils.invokeMethod(testBean, \"staticIntLongVarArg\", 1, \"s1\", 5));\r\n    // staticIntIntVarArg\r\n    assertEquals(\"static int, int...\", MethodUtils.invokeMethod(testBean, \"staticIntIntVarArg\", 1));\r\n    assertEquals(\"static int, int...\", MethodUtils.invokeMethod(testBean, \"staticIntIntVarArg\", 1, 2));\r\n    assertEquals(\"static int, int...\", MethodUtils.invokeMethod(testBean, \"staticIntIntVarArg\", 1, 2, 3));\r\n    assertThrows(NoSuchMethodException.class, () -> MethodUtils.invokeMethod(testBean, \"staticIntIntVarArg\", 1, \"s1\", 5));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\reflect\\MethodUtilsTest.java",
  "methodName" : "testInvokeStaticMethodVarArgsOfInterface",
  "sourceCode" : "@Test\r\nvoid testInvokeStaticMethodVarArgsOfInterface() throws Exception {\r\n    // staticPackagePrivateEmptyInterface\r\n    assertEquals(\"static PackagePrivateEmptyInterface...\", MethodUtils.invokeStaticMethod(TestBean.class, \"staticPackagePrivateEmptyInterface\", new PublicImpl1OfPackagePrivateEmptyInterface(), new PublicImpl2OfPackagePrivateEmptyInterface()));\r\n    assertEquals(\"static PackagePrivateEmptyInterface...\", MethodUtils.invokeStaticMethod(TestBean.class, \"staticPackagePrivateEmptyInterface\", new PackagePrivateEmptyInterface() {\r\n    }, new PackagePrivateEmptyInterface() {\r\n    }));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\reflect\\MethodUtilsTest.java",
  "methodName" : "testNullArgument",
  "sourceCode" : "@Test\r\nvoid testNullArgument() {\r\n    expectMatchingAccessibleMethodParameterTypes(TestBean.class, \"oneParameter\", singletonArray(null), singletonArray(String.class));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\reflect\\MethodUtilsTest.java",
  "methodName" : "testVarargsOverloadingResolution",
  "sourceCode" : "@Test\r\nvoid testVarargsOverloadingResolution() {\r\n    // This code is not a test of MethodUtils.\r\n    // Rather it makes explicit the behavior of the Java specification for\r\n    // various cases of overload resolution.\r\n    assertEquals(\"Byte...\", TestBean.varOverload((byte) 1, (byte) 2));\r\n    assertEquals(\"Short...\", TestBean.varOverload((short) 1, (short) 2));\r\n    assertEquals(\"Integer...\", TestBean.varOverload(1, 2));\r\n    assertEquals(\"Long...\", TestBean.varOverload(1L, 2L));\r\n    assertEquals(\"Float...\", TestBean.varOverload(1f, 2f));\r\n    assertEquals(\"Double...\", TestBean.varOverload(1d, 2d));\r\n    assertEquals(\"Character...\", TestBean.varOverload('a', 'b'));\r\n    assertEquals(\"String...\", TestBean.varOverload(\"a\", \"b\"));\r\n    assertEquals(\"Boolean...\", TestBean.varOverload(true, false));\r\n    assertEquals(\"Object...\", TestBean.varOverload(1, \"s\"));\r\n    assertEquals(\"Object...\", TestBean.varOverload(1, true));\r\n    assertEquals(\"Object...\", TestBean.varOverload(1.1, true));\r\n    assertEquals(\"Object...\", TestBean.varOverload('c', true));\r\n    assertEquals(\"Number...\", TestBean.varOverload(1, 1.1));\r\n    assertEquals(\"Number...\", TestBean.varOverload(1, 1L));\r\n    assertEquals(\"Number...\", TestBean.varOverload(1d, 1f));\r\n    assertEquals(\"Number...\", TestBean.varOverload((short) 1, (byte) 1));\r\n    assertEquals(\"Object...\", TestBean.varOverload(1, 'c'));\r\n    assertEquals(\"Object...\", TestBean.varOverload('c', \"s\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\reflect\\TypeLiteralTest.java",
  "methodName" : "testBasic",
  "sourceCode" : "@Test\r\nvoid testBasic() {\r\n    assertTrue(TypeUtils.equals(String.class, new TypeLiteral<String>() {\r\n    }.value));\r\n    assertTrue(TypeUtils.equals(TypeUtils.parameterize(List.class, String.class), new TypeLiteral<List<String>>() {\r\n    }.value));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\reflect\\TypeLiteralTest.java",
  "methodName" : "testEquals",
  "sourceCode" : "@Test\r\nvoid testEquals() {\r\n    assertEquals(new TypeLiteral<String>() {\r\n    }, new TypeLiteral<String>() {\r\n    });\r\n    assertEquals(new TypeLiteral<List<String>>() {\r\n    }, new TypeLiteral<List<String>>() {\r\n    });\r\n    assertNotEquals(new TypeLiteral<String>() {\r\n    }, new TypeLiteral<List<String>>() {\r\n    });\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\reflect\\TypeLiteralTest.java",
  "methodName" : "testRaw",
  "sourceCode" : "@SuppressWarnings(\"rawtypes\")\r\n@Test\r\nvoid testRaw() {\r\n    assertNullPointerException(() -> new TypeLiteral() {\r\n    });\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\reflect\\TypeLiteralTest.java",
  "methodName" : "testTyped",
  "sourceCode" : "@Test\r\nvoid testTyped() {\r\n    final Typed<String> stringType = new TypeLiteral<String>() {\r\n    };\r\n    assertTrue(TypeUtils.equals(String.class, stringType.getType()));\r\n    final Typed<List<String>> listOfStringType = new TypeLiteral<List<String>>() {\r\n    };\r\n    assertTrue(TypeUtils.equals(TypeUtils.parameterize(List.class, String.class), listOfStringType.getType()));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\reflect\\TypeUtilsTest.java",
  "methodName" : "test_LANG_1114",
  "sourceCode" : "@Test\r\nvoid test_LANG_1114() throws NoSuchFieldException {\r\n    final Type nonWildcardType = getClass().getDeclaredField(\"wildcardComparable\").getGenericType();\r\n    final Type wildcardType = ((ParameterizedType) nonWildcardType).getActualTypeArguments()[0];\r\n    assertFalse(TypeUtils.equals(wildcardType, nonWildcardType));\r\n    assertFalse(TypeUtils.equals(nonWildcardType, wildcardType));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\reflect\\TypeUtilsTest.java",
  "methodName" : "test_LANG_1190",
  "sourceCode" : "@Test\r\nvoid test_LANG_1190() throws NoSuchMethodException {\r\n    final Type fromType = ClassWithSuperClassWithGenericType.class.getDeclaredMethod(\"methodWithGenericReturnType\").getGenericReturnType();\r\n    final Type failingToType = TypeUtils.wildcardType().withLowerBounds(ClassWithSuperClassWithGenericType.class).build();\r\n    assertTrue(TypeUtils.isAssignable(fromType, failingToType));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\reflect\\TypeUtilsTest.java",
  "methodName" : "test_LANG_1348",
  "sourceCode" : "@Test\r\nvoid test_LANG_1348() throws NoSuchMethodException {\r\n    final Method method = Enum.class.getMethod(\"valueOf\", Class.class, String.class);\r\n    assertEquals(\"T extends java.lang.Enum<T>\", TypeUtils.toString(method.getGenericReturnType()));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\reflect\\TypeUtilsTest.java",
  "methodName" : "test_LANG_1524",
  "sourceCode" : "@Test\r\nvoid test_LANG_1524() {\r\n    assertEquals(\"AAAAClass(cycle).BBBBClass.CCCClass\", TypeUtils.toString(AAAAClass.BBBBClass.CCCClass.class));\r\n    assertEquals(\"AAAAClass(cycle).BBBBClass\", TypeUtils.toString(AAAAClass.BBBBClass.class));\r\n    assertEquals(\"AAAAClass(cycle)\", TypeUtils.toString(AAAAClass.class));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\reflect\\TypeUtilsTest.java",
  "methodName" : "test_LANG_1698",
  "sourceCode" : "/**\r\n * Tests https://issues.apache.org/jira/projects/LANG/issues/LANG-1698\r\n *\r\n * <pre>{@code\r\n * java.lang.StackOverflowError\r\n *    at org.apache.commons.lang3.reflect.TypeUtils.typeVariableToString(TypeUtils.java:1785)\r\n *    at org.apache.commons.lang3.reflect.TypeUtils.toString(TypeUtils.java:1737)\r\n *    at org.apache.commons.lang3.reflect.TypeUtils.toString(TypeUtils.java:1714)\r\n *    at org.apache.commons.lang3.reflect.TypeUtils.appendAllTo(TypeUtils.java:302)\r\n *    at org.apache.commons.lang3.reflect.TypeUtils.wildcardTypeToString(TypeUtils.java:1902)\r\n *    at org.apache.commons.lang3.reflect.TypeUtils.toString(TypeUtils.java:1734)\r\n *    at org.apache.commons.lang3.reflect.TypeUtils.toString(TypeUtils.java:1714)\r\n *    at org.apache.commons.lang3.reflect.TypeUtils.appendAllTo(TypeUtils.java:302)\r\n *    at org.apache.commons.lang3.reflect.TypeUtils.parameterizedTypeToString(TypeUtils.java:1604)\r\n *    at org.apache.commons.lang3.reflect.TypeUtils.toString(TypeUtils.java:1731)\r\n *    at org.apache.commons.lang3.reflect.TypeUtils.toString(TypeUtils.java:1714)\r\n *    at org.apache.commons.lang3.reflect.TypeUtils.appendAllTo(TypeUtils.java:302)\r\n *    at org.apache.commons.lang3.reflect.TypeUtils.typeVariableToString(TypeUtils.java:1789)\r\n * }\r\n * </pre>\r\n */\r\n@Test\r\nvoid test_LANG_1698() {\r\n    final ParameterizedType comparing = (ParameterizedType) Arrays.stream(Comparator.class.getDeclaredMethods()).filter(k -> k.getName().equals(\"comparing\")).findFirst().orElse(Comparator.class.getDeclaredMethods()[0]).getGenericParameterTypes()[0];\r\n    final String typeName = TypeUtils.parameterize((Class<?>) comparing.getRawType(), comparing.getActualTypeArguments()).getTypeName();\r\n    assertEquals(\"java.util.function.Function<? super T, ? extends U>\", typeName);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\reflect\\TypeUtilsTest.java",
  "methodName" : "test_LANG_1702",
  "sourceCode" : "@Test\r\nvoid test_LANG_1702() throws NoSuchMethodException, SecurityException {\r\n    final Type type = TypeUtilsTest.class.getDeclaredMethod(\"aMethod\").getGenericReturnType();\r\n    // any map will do\r\n    final Map<TypeVariable<?>, Type> typeArguments = Collections.emptyMap();\r\n    // this fails with a stack overflow\r\n    final Type unrolledType = TypeUtils.unrollVariables(typeArguments, type);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\reflect\\TypeUtilsTest.java",
  "methodName" : "testContainsTypeVariables",
  "sourceCode" : "@Test\r\nvoid testContainsTypeVariables() throws NoSuchMethodException {\r\n    assertFalse(TypeUtils.containsTypeVariables(Test1.class.getMethod(\"m0\").getGenericReturnType()));\r\n    assertFalse(TypeUtils.containsTypeVariables(Test1.class.getMethod(\"m1\").getGenericReturnType()));\r\n    assertTrue(TypeUtils.containsTypeVariables(Test1.class.getMethod(\"m2\").getGenericReturnType()));\r\n    assertTrue(TypeUtils.containsTypeVariables(Test1.class.getMethod(\"m3\").getGenericReturnType()));\r\n    assertTrue(TypeUtils.containsTypeVariables(Test1.class.getMethod(\"m4\").getGenericReturnType()));\r\n    assertFalse(TypeUtils.containsTypeVariables(Test1.class.getMethod(\"m5\").getGenericReturnType()));\r\n    assertFalse(TypeUtils.containsTypeVariables(Test1.class.getMethod(\"m6\").getGenericReturnType()));\r\n    assertFalse(TypeUtils.containsTypeVariables(Test1.class.getMethod(\"m7\").getGenericReturnType()));\r\n    assertFalse(TypeUtils.containsTypeVariables(Test1.class.getMethod(\"m8\").getGenericReturnType()));\r\n    assertTrue(TypeUtils.containsTypeVariables(Test1.class.getMethod(\"m9\").getGenericReturnType()));\r\n    assertTrue(TypeUtils.containsTypeVariables(Test1.class.getMethod(\"m10\").getGenericReturnType()));\r\n    assertTrue(TypeUtils.containsTypeVariables(Test1.class.getMethod(\"m11\").getGenericReturnType()));\r\n    assertTrue(TypeUtils.containsTypeVariables(Test1.class.getMethod(\"m12\").getGenericReturnType()));\r\n    assertTrue(TypeUtils.containsTypeVariables(Test1.class.getMethod(\"m13\").getGenericReturnType()));\r\n    assertFalse(TypeUtils.containsTypeVariables(Test1.class.getMethod(\"m14\").getGenericReturnType()));\r\n    assertTrue(TypeUtils.containsTypeVariables(Test1.class.getMethod(\"m15\").getGenericReturnType()));\r\n    assertTrue(TypeUtils.containsTypeVariables(Test1.class.getMethod(\"m16\").getGenericReturnType()));\r\n    assertTrue(TypeUtils.containsTypeVariables(Test1.class.getMethod(\"m17\").getGenericReturnType()));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\reflect\\TypeUtilsTest.java",
  "methodName" : "testContainsTypeVariablesPr437",
  "sourceCode" : "@Test\r\nvoid testContainsTypeVariablesPr437() throws Exception {\r\n    abstract class Test2<G> {\r\n\r\n        public abstract Object m0();\r\n\r\n        public abstract String[] m1();\r\n\r\n        public abstract <K, V> Map<? extends K, V[]> m10();\r\n\r\n        public abstract <K, V> Map<? extends K, List<V[]>> m11();\r\n\r\n        public abstract List m12();\r\n\r\n        public abstract Map m13();\r\n\r\n        public abstract Properties m14();\r\n\r\n        public abstract G m15();\r\n\r\n        public abstract List<G> m16();\r\n\r\n        public abstract Enum m17();\r\n\r\n        public abstract <E> E[] m2();\r\n\r\n        public abstract <E> List<? extends E> m3();\r\n\r\n        public abstract <E extends Enum<E>> List<? extends Enum<E>> m4();\r\n\r\n        public abstract List<? extends Enum<?>> m5();\r\n\r\n        public abstract List<? super Enum<?>> m6();\r\n\r\n        public abstract List<?> m7();\r\n\r\n        public abstract Map<? extends Enum<?>, ? super Enum<?>> m8();\r\n\r\n        public abstract <K, V> Map<? extends K, ? super V[]> m9();\r\n    }\r\n    assertFalse(TypeUtils.containsTypeVariables(Test2.class.getMethod(\"m0\").getGenericReturnType()));\r\n    assertFalse(TypeUtils.containsTypeVariables(Test2.class.getMethod(\"m1\").getGenericReturnType()));\r\n    assertTrue(TypeUtils.containsTypeVariables(Test2.class.getMethod(\"m2\").getGenericReturnType()));\r\n    assertTrue(TypeUtils.containsTypeVariables(Test2.class.getMethod(\"m3\").getGenericReturnType()));\r\n    assertTrue(TypeUtils.containsTypeVariables(Test2.class.getMethod(\"m4\").getGenericReturnType()));\r\n    assertFalse(TypeUtils.containsTypeVariables(Test2.class.getMethod(\"m5\").getGenericReturnType()));\r\n    assertFalse(TypeUtils.containsTypeVariables(Test2.class.getMethod(\"m6\").getGenericReturnType()));\r\n    assertFalse(TypeUtils.containsTypeVariables(Test2.class.getMethod(\"m7\").getGenericReturnType()));\r\n    assertFalse(TypeUtils.containsTypeVariables(Test2.class.getMethod(\"m8\").getGenericReturnType()));\r\n    assertTrue(TypeUtils.containsTypeVariables(Test2.class.getMethod(\"m9\").getGenericReturnType()));\r\n    assertTrue(TypeUtils.containsTypeVariables(Test2.class.getMethod(\"m10\").getGenericReturnType()));\r\n    assertTrue(TypeUtils.containsTypeVariables(Test2.class.getMethod(\"m11\").getGenericReturnType()));\r\n    assertTrue(TypeUtils.containsTypeVariables(Test2.class.getMethod(\"m12\").getGenericReturnType()));\r\n    assertTrue(TypeUtils.containsTypeVariables(Test2.class.getMethod(\"m13\").getGenericReturnType()));\r\n    assertFalse(TypeUtils.containsTypeVariables(Test2.class.getMethod(\"m14\").getGenericReturnType()));\r\n    assertTrue(TypeUtils.containsTypeVariables(Test2.class.getMethod(\"m15\").getGenericReturnType()));\r\n    assertTrue(TypeUtils.containsTypeVariables(Test2.class.getMethod(\"m16\").getGenericReturnType()));\r\n    assertTrue(TypeUtils.containsTypeVariables(Test2.class.getMethod(\"m17\").getGenericReturnType()));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\reflect\\TypeUtilsTest.java",
  "methodName" : "testDeprecatedConstructor",
  "sourceCode" : "@Test\r\nvoid testDeprecatedConstructor() {\r\n    assertNotNull(new TypeUtils().toString());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\reflect\\TypeUtilsTest.java",
  "methodName" : "testDetermineTypeArguments",
  "sourceCode" : "@Test\r\nvoid testDetermineTypeArguments() throws NoSuchFieldException {\r\n    final ParameterizedType iterableType = (ParameterizedType) getClass().getField(\"iterable\").getGenericType();\r\n    assertNull(TypeUtils.determineTypeArguments(Object.class, iterableType));\r\n    final Map<TypeVariable<?>, Type> typeVarAssigns = TypeUtils.determineTypeArguments(TreeSet.class, iterableType);\r\n    final TypeVariable<?> treeSetTypeVar = TreeSet.class.getTypeParameters()[0];\r\n    assertTrue(typeVarAssigns.containsKey(treeSetTypeVar));\r\n    assertEquals(iterableType.getActualTypeArguments()[0], typeVarAssigns.get(treeSetTypeVar));\r\n    assertNullPointerException(() -> TypeUtils.determineTypeArguments(TreeSet.class, null));\r\n    assertNullPointerException(() -> TypeUtils.determineTypeArguments(null, iterableType));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\reflect\\TypeUtilsTest.java",
  "methodName" : "testEquals",
  "sourceCode" : "@Test\r\nvoid testEquals() throws NoSuchFieldException {\r\n    final Type expected = getClass().getField(\"intWildcardComparable\").getGenericType();\r\n    final GenericArrayType gat1 = TypeUtils.genericArrayType(TypeUtils.parameterize(Comparable.class, TypeUtils.wildcardType().withUpperBounds(Integer.class).build()));\r\n    final GenericArrayType gat2 = TypeUtils.genericArrayType(TypeUtils.parameterize(Comparable.class, TypeUtils.wildcardType().withUpperBounds(Integer.class).build()));\r\n    assertTrue(TypeUtils.equals(gat1, gat1));\r\n    assertTrue(TypeUtils.equals(gat1, gat2));\r\n    assertFalse(TypeUtils.equals(gat1, null));\r\n    assertFalse(TypeUtils.equals(null, gat1));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\reflect\\TypeUtilsTest.java",
  "methodName" : "testGenericArrayType",
  "sourceCode" : "@SuppressWarnings(\"unlikely-arg-type\")\r\n@Test\r\nvoid testGenericArrayType() throws NoSuchFieldException {\r\n    final Type expected = getClass().getField(\"intWildcardComparable\").getGenericType();\r\n    final GenericArrayType actual = TypeUtils.genericArrayType(TypeUtils.parameterize(Comparable.class, TypeUtils.wildcardType().withUpperBounds(Integer.class).build()));\r\n    assertTrue(TypeUtils.equals(expected, actual));\r\n    assertEquals(\"java.lang.Comparable<? extends java.lang.Integer>[]\", actual.toString());\r\n    assertNotEquals(0, actual.hashCode());\r\n    assertEquals(actual, actual);\r\n    assertFalse(actual.equals(null));\r\n    assertFalse(actual.equals(TypeUtils.wildcardType().build()));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\reflect\\TypeUtilsTest.java",
  "methodName" : "testGetArrayComponentType",
  "sourceCode" : "@Test\r\nvoid testGetArrayComponentType() throws NoSuchFieldException {\r\n    final Type rawListType = GenericTypeHolder.class.getDeclaredField(\"rawList\").getGenericType();\r\n    final Type objectListType = GenericTypeHolder.class.getDeclaredField(\"objectList\").getGenericType();\r\n    final Type unboundListType = GenericTypeHolder.class.getDeclaredField(\"unboundList\").getGenericType();\r\n    final Type superObjectListType = GenericTypeHolder.class.getDeclaredField(\"superObjectList\").getGenericType();\r\n    final Type stringListType = GenericTypeHolder.class.getDeclaredField(\"stringList\").getGenericType();\r\n    final Type subStringListType = GenericTypeHolder.class.getDeclaredField(\"subStringList\").getGenericType();\r\n    final Type superStringListType = GenericTypeHolder.class.getDeclaredField(\"superStringList\").getGenericType();\r\n    assertNull(TypeUtils.getArrayComponentType(rawListType));\r\n    assertNull(TypeUtils.getArrayComponentType(objectListType));\r\n    assertNull(TypeUtils.getArrayComponentType(unboundListType));\r\n    assertNull(TypeUtils.getArrayComponentType(superObjectListType));\r\n    assertNull(TypeUtils.getArrayComponentType(stringListType));\r\n    assertNull(TypeUtils.getArrayComponentType(subStringListType));\r\n    assertNull(TypeUtils.getArrayComponentType(superStringListType));\r\n    final Type rawListTypeArray = GenericTypeHolder.class.getDeclaredField(\"rawListArray\").getGenericType();\r\n    final Type objectListTypeArray = GenericTypeHolder.class.getDeclaredField(\"objectListArray\").getGenericType();\r\n    final Type unboundListTypeArray = GenericTypeHolder.class.getDeclaredField(\"unboundListArray\").getGenericType();\r\n    final Type superObjectListTypeArray = GenericTypeHolder.class.getDeclaredField(\"superObjectListArray\").getGenericType();\r\n    final Type stringListTypeArray = GenericTypeHolder.class.getDeclaredField(\"stringListArray\").getGenericType();\r\n    final Type subStringListTypeArray = GenericTypeHolder.class.getDeclaredField(\"subStringListArray\").getGenericType();\r\n    final Type superStringListTypeArray = GenericTypeHolder.class.getDeclaredField(\"superStringListArray\").getGenericType();\r\n    assertEquals(rawListType, TypeUtils.getArrayComponentType(rawListTypeArray));\r\n    assertEquals(objectListType, TypeUtils.getArrayComponentType(objectListTypeArray));\r\n    assertEquals(unboundListType, TypeUtils.getArrayComponentType(unboundListTypeArray));\r\n    assertEquals(superObjectListType, TypeUtils.getArrayComponentType(superObjectListTypeArray));\r\n    assertEquals(stringListType, TypeUtils.getArrayComponentType(stringListTypeArray));\r\n    assertEquals(subStringListType, TypeUtils.getArrayComponentType(subStringListTypeArray));\r\n    assertEquals(superStringListType, TypeUtils.getArrayComponentType(superStringListTypeArray));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\reflect\\TypeUtilsTest.java",
  "methodName" : "testGetPrimitiveArrayComponentType",
  "sourceCode" : "@Test\r\nvoid testGetPrimitiveArrayComponentType() {\r\n    assertEquals(boolean.class, TypeUtils.getArrayComponentType(boolean[].class));\r\n    assertEquals(byte.class, TypeUtils.getArrayComponentType(byte[].class));\r\n    assertEquals(short.class, TypeUtils.getArrayComponentType(short[].class));\r\n    assertEquals(int.class, TypeUtils.getArrayComponentType(int[].class));\r\n    assertEquals(char.class, TypeUtils.getArrayComponentType(char[].class));\r\n    assertEquals(long.class, TypeUtils.getArrayComponentType(long[].class));\r\n    assertEquals(float.class, TypeUtils.getArrayComponentType(float[].class));\r\n    assertEquals(double.class, TypeUtils.getArrayComponentType(double[].class));\r\n    assertNull(TypeUtils.getArrayComponentType(boolean.class));\r\n    assertNull(TypeUtils.getArrayComponentType(byte.class));\r\n    assertNull(TypeUtils.getArrayComponentType(short.class));\r\n    assertNull(TypeUtils.getArrayComponentType(int.class));\r\n    assertNull(TypeUtils.getArrayComponentType(char.class));\r\n    assertNull(TypeUtils.getArrayComponentType(long.class));\r\n    assertNull(TypeUtils.getArrayComponentType(float.class));\r\n    assertNull(TypeUtils.getArrayComponentType(double.class));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\reflect\\TypeUtilsTest.java",
  "methodName" : "testGetRawType",
  "sourceCode" : "@Test\r\nvoid testGetRawType() throws NoSuchFieldException {\r\n    final Type stringParentFieldType = GenericTypeHolder.class.getDeclaredField(\"stringParent\").getGenericType();\r\n    final Type integerParentFieldType = GenericTypeHolder.class.getDeclaredField(\"integerParent\").getGenericType();\r\n    final Type foosFieldType = GenericTypeHolder.class.getDeclaredField(\"foos\").getGenericType();\r\n    final Type genericParentT = GenericParent.class.getTypeParameters()[0];\r\n    assertEquals(GenericParent.class, TypeUtils.getRawType(stringParentFieldType, null));\r\n    assertEquals(GenericParent.class, TypeUtils.getRawType(integerParentFieldType, null));\r\n    assertEquals(List.class, TypeUtils.getRawType(foosFieldType, null));\r\n    assertEquals(String.class, TypeUtils.getRawType(genericParentT, StringParameterizedChild.class));\r\n    assertEquals(String.class, TypeUtils.getRawType(genericParentT, stringParentFieldType));\r\n    assertEquals(Foo.class, TypeUtils.getRawType(Iterable.class.getTypeParameters()[0], foosFieldType));\r\n    assertEquals(Foo.class, TypeUtils.getRawType(List.class.getTypeParameters()[0], foosFieldType));\r\n    assertNull(TypeUtils.getRawType(genericParentT, GenericParent.class));\r\n    assertEquals(GenericParent[].class, TypeUtils.getRawType(GenericTypeHolder.class.getDeclaredField(\"barParents\").getGenericType(), null));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\reflect\\TypeUtilsTest.java",
  "methodName" : "testGetRawType_LANG_1697",
  "sourceCode" : "/**\r\n * Tests https://issues.apache.org/jira/browse/LANG-1697\r\n */\r\n@Test\r\nvoid testGetRawType_LANG_1697() {\r\n    assertEquals(int[].class, TypeUtils.getRawType(TypeUtils.genericArrayType(Integer.TYPE), Integer.TYPE));\r\n    // LANG-1697:\r\n    assertNull(TypeUtils.getRawType(TypeUtils.genericArrayType(TypeUtils.WILDCARD_ALL), null));\r\n    // TODO: Is this correct?\r\n    assertNull(TypeUtils.getRawType(TypeUtils.genericArrayType(TypeUtils.WILDCARD_ALL), TypeUtils.WILDCARD_ALL));\r\n    // TODO: Is this correct?\r\n    assertNull(TypeUtils.getRawType(TypeUtils.genericArrayType(TypeUtils.WILDCARD_ALL), Integer.TYPE));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\reflect\\TypeUtilsTest.java",
  "methodName" : "testGetTypeArguments",
  "sourceCode" : "@Test\r\nvoid testGetTypeArguments() {\r\n    Map<TypeVariable<?>, Type> typeVarAssigns;\r\n    TypeVariable<?> treeSetTypeVar;\r\n    Type typeArg;\r\n    typeVarAssigns = TypeUtils.getTypeArguments(Integer.class, Comparable.class);\r\n    treeSetTypeVar = Comparable.class.getTypeParameters()[0];\r\n    assertTrue(typeVarAssigns.containsKey(treeSetTypeVar), \"Type var assigns for Comparable from Integer: \" + typeVarAssigns);\r\n    typeArg = typeVarAssigns.get(treeSetTypeVar);\r\n    assertEquals(Integer.class, typeVarAssigns.get(treeSetTypeVar), \"Type argument of Comparable from Integer: \" + typeArg);\r\n    typeVarAssigns = TypeUtils.getTypeArguments(int.class, Comparable.class);\r\n    treeSetTypeVar = Comparable.class.getTypeParameters()[0];\r\n    assertTrue(typeVarAssigns.containsKey(treeSetTypeVar), \"Type var assigns for Comparable from int: \" + typeVarAssigns);\r\n    typeArg = typeVarAssigns.get(treeSetTypeVar);\r\n    assertEquals(Integer.class, typeVarAssigns.get(treeSetTypeVar), \"Type argument of Comparable from int: \" + typeArg);\r\n    final Collection<Integer> col = Collections.emptyList();\r\n    typeVarAssigns = TypeUtils.getTypeArguments(List.class, Collection.class);\r\n    treeSetTypeVar = Comparable.class.getTypeParameters()[0];\r\n    assertFalse(typeVarAssigns.containsKey(treeSetTypeVar), \"Type var assigns for Collection from List: \" + typeVarAssigns);\r\n    typeVarAssigns = TypeUtils.getTypeArguments(AAAClass.BBBClass.class, AAClass.BBClass.class);\r\n    assertEquals(2, typeVarAssigns.size());\r\n    assertEquals(String.class, typeVarAssigns.get(AAClass.class.getTypeParameters()[0]));\r\n    assertEquals(String.class, typeVarAssigns.get(AAClass.BBClass.class.getTypeParameters()[0]));\r\n    typeVarAssigns = TypeUtils.getTypeArguments(Other.class, This.class);\r\n    assertEquals(2, typeVarAssigns.size());\r\n    assertEquals(String.class, typeVarAssigns.get(This.class.getTypeParameters()[0]));\r\n    assertEquals(Other.class.getTypeParameters()[0], typeVarAssigns.get(This.class.getTypeParameters()[1]));\r\n    typeVarAssigns = TypeUtils.getTypeArguments(And.class, This.class);\r\n    assertEquals(2, typeVarAssigns.size());\r\n    assertEquals(Number.class, typeVarAssigns.get(This.class.getTypeParameters()[0]));\r\n    assertEquals(Number.class, typeVarAssigns.get(This.class.getTypeParameters()[1]));\r\n    typeVarAssigns = TypeUtils.getTypeArguments(Thing.class, Other.class);\r\n    assertEquals(2, typeVarAssigns.size());\r\n    assertEquals(getClass().getTypeParameters()[0], typeVarAssigns.get(getClass().getTypeParameters()[0]));\r\n    assertEquals(getClass().getTypeParameters()[0], typeVarAssigns.get(Other.class.getTypeParameters()[0]));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\reflect\\TypeUtilsTest.java",
  "methodName" : "testIsArrayGenericTypes",
  "sourceCode" : "@Test\r\nvoid testIsArrayGenericTypes() throws NoSuchFieldException {\r\n    final Type rawListType = GenericTypeHolder.class.getDeclaredField(\"rawList\").getGenericType();\r\n    final Type objectListType = GenericTypeHolder.class.getDeclaredField(\"objectList\").getGenericType();\r\n    final Type unboundListType = GenericTypeHolder.class.getDeclaredField(\"unboundList\").getGenericType();\r\n    final Type superObjectListType = GenericTypeHolder.class.getDeclaredField(\"superObjectList\").getGenericType();\r\n    final Type stringListType = GenericTypeHolder.class.getDeclaredField(\"stringList\").getGenericType();\r\n    final Type subStringListType = GenericTypeHolder.class.getDeclaredField(\"subStringList\").getGenericType();\r\n    final Type superStringListType = GenericTypeHolder.class.getDeclaredField(\"superStringList\").getGenericType();\r\n    assertFalse(TypeUtils.isArrayType(rawListType));\r\n    assertFalse(TypeUtils.isArrayType(objectListType));\r\n    assertFalse(TypeUtils.isArrayType(unboundListType));\r\n    assertFalse(TypeUtils.isArrayType(superObjectListType));\r\n    assertFalse(TypeUtils.isArrayType(stringListType));\r\n    assertFalse(TypeUtils.isArrayType(subStringListType));\r\n    assertFalse(TypeUtils.isArrayType(superStringListType));\r\n    final Type rawListTypeArray = GenericTypeHolder.class.getDeclaredField(\"rawListArray\").getGenericType();\r\n    final Type objectListTypeArray = GenericTypeHolder.class.getDeclaredField(\"objectListArray\").getGenericType();\r\n    final Type unboundListTypeArray = GenericTypeHolder.class.getDeclaredField(\"unboundListArray\").getGenericType();\r\n    final Type superObjectListTypeArray = GenericTypeHolder.class.getDeclaredField(\"superObjectListArray\").getGenericType();\r\n    final Type stringListTypeArray = GenericTypeHolder.class.getDeclaredField(\"stringListArray\").getGenericType();\r\n    final Type subStringListTypeArray = GenericTypeHolder.class.getDeclaredField(\"subStringListArray\").getGenericType();\r\n    final Type superStringListTypeArray = GenericTypeHolder.class.getDeclaredField(\"superStringListArray\").getGenericType();\r\n    assertTrue(TypeUtils.isArrayType(rawListTypeArray));\r\n    assertTrue(TypeUtils.isArrayType(objectListTypeArray));\r\n    assertTrue(TypeUtils.isArrayType(unboundListTypeArray));\r\n    assertTrue(TypeUtils.isArrayType(superObjectListTypeArray));\r\n    assertTrue(TypeUtils.isArrayType(stringListTypeArray));\r\n    assertTrue(TypeUtils.isArrayType(subStringListTypeArray));\r\n    assertTrue(TypeUtils.isArrayType(superStringListTypeArray));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\reflect\\TypeUtilsTest.java",
  "methodName" : "testIsArrayTypeClasses",
  "sourceCode" : "@Test\r\nvoid testIsArrayTypeClasses() {\r\n    assertTrue(TypeUtils.isArrayType(boolean[].class));\r\n    assertTrue(TypeUtils.isArrayType(byte[].class));\r\n    assertTrue(TypeUtils.isArrayType(short[].class));\r\n    assertTrue(TypeUtils.isArrayType(int[].class));\r\n    assertTrue(TypeUtils.isArrayType(char[].class));\r\n    assertTrue(TypeUtils.isArrayType(long[].class));\r\n    assertTrue(TypeUtils.isArrayType(float[].class));\r\n    assertTrue(TypeUtils.isArrayType(double[].class));\r\n    assertTrue(TypeUtils.isArrayType(Object[].class));\r\n    assertTrue(TypeUtils.isArrayType(String[].class));\r\n    assertFalse(TypeUtils.isArrayType(boolean.class));\r\n    assertFalse(TypeUtils.isArrayType(byte.class));\r\n    assertFalse(TypeUtils.isArrayType(short.class));\r\n    assertFalse(TypeUtils.isArrayType(int.class));\r\n    assertFalse(TypeUtils.isArrayType(char.class));\r\n    assertFalse(TypeUtils.isArrayType(long.class));\r\n    assertFalse(TypeUtils.isArrayType(float.class));\r\n    assertFalse(TypeUtils.isArrayType(double.class));\r\n    assertFalse(TypeUtils.isArrayType(Object.class));\r\n    assertFalse(TypeUtils.isArrayType(String.class));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\reflect\\TypeUtilsTest.java",
  "methodName" : "testIsAssignableClasses",
  "sourceCode" : "@Test\r\nvoid testIsAssignableClasses() {\r\n    assertTrue(TypeUtils.isAssignable(char.class, double.class));\r\n    assertTrue(TypeUtils.isAssignable(byte.class, double.class));\r\n    assertTrue(TypeUtils.isAssignable(short.class, double.class));\r\n    assertTrue(TypeUtils.isAssignable(int.class, double.class));\r\n    assertTrue(TypeUtils.isAssignable(long.class, double.class));\r\n    assertTrue(TypeUtils.isAssignable(float.class, double.class));\r\n    assertTrue(TypeUtils.isAssignable(int.class, long.class));\r\n    assertTrue(TypeUtils.isAssignable(Integer.class, long.class));\r\n    assertFalse(TypeUtils.isAssignable(int.class, Long.class));\r\n    assertFalse(TypeUtils.isAssignable(Integer.class, Long.class));\r\n    assertTrue(TypeUtils.isAssignable(Integer.class, int.class));\r\n    assertTrue(TypeUtils.isAssignable(int.class, Integer.class));\r\n    assertTrue(TypeUtils.isAssignable(int.class, Number.class));\r\n    assertTrue(TypeUtils.isAssignable(int.class, Object.class));\r\n    assertTrue(TypeUtils.isAssignable(int.class, Comparable.class));\r\n    assertTrue(TypeUtils.isAssignable(int.class, Serializable.class));\r\n    assertFalse(TypeUtils.isAssignable(int[].class, long[].class));\r\n    assertFalse(TypeUtils.isAssignable(Integer[].class, int[].class));\r\n    assertFalse(TypeUtils.isAssignable(int[].class, Object[].class));\r\n    assertTrue(TypeUtils.isAssignable(Integer[].class, Object[].class));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\reflect\\TypeUtilsTest.java",
  "methodName" : "testIsAssignableDirectClassHierarchy",
  "sourceCode" : "@Test\r\nvoid testIsAssignableDirectClassHierarchy() throws NoSuchFieldException {\r\n    // B is superclass\r\n    final Type bClassType = AClass.class.getField(\"bClass\").getGenericType();\r\n    // C subclass of B\r\n    final Type cClassType = AClass.class.getField(\"cClass\").getGenericType();\r\n    // D subclass of C\r\n    final Type dClassType = AClass.class.getField(\"dClass\").getGenericType();\r\n    // E subclass of D\r\n    final Type eClassType = AClass.class.getField(\"eClass\").getGenericType();\r\n    // F subclass of E\r\n    final Type fClassType = AClass.class.getField(\"fClass\").getGenericType();\r\n    assertTrue(TypeUtils.isAssignable(cClassType, bClassType));\r\n    assertTrue(TypeUtils.isAssignable(dClassType, bClassType));\r\n    assertTrue(TypeUtils.isAssignable(eClassType, bClassType));\r\n    assertTrue(TypeUtils.isAssignable(fClassType, bClassType));\r\n    assertTrue(TypeUtils.isAssignable(dClassType, cClassType));\r\n    assertTrue(TypeUtils.isAssignable(eClassType, cClassType));\r\n    assertTrue(TypeUtils.isAssignable(fClassType, cClassType));\r\n    assertTrue(TypeUtils.isAssignable(eClassType, dClassType));\r\n    assertTrue(TypeUtils.isAssignable(fClassType, dClassType));\r\n    assertTrue(TypeUtils.isAssignable(fClassType, eClassType));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\reflect\\TypeUtilsTest.java",
  "methodName" : "testIsAssignableGenericArrayTypeToObject",
  "sourceCode" : "@Test\r\nvoid testIsAssignableGenericArrayTypeToObject() {\r\n    final Class<Constructor> rawClass = Constructor.class;\r\n    final Class<Insets> typeArgClass = Insets.class;\r\n    // Builds a ParameterizedType for Constructor<Insets>\r\n    final ParameterizedType paramType = TypeUtils.parameterize(rawClass, typeArgClass);\r\n    assertEquals(rawClass, paramType.getRawType());\r\n    assertEquals(typeArgClass, paramType.getActualTypeArguments()[0]);\r\n    assertTrue(Object.class.isAssignableFrom(paramType.getClass()));\r\n    assertFalse(paramType.getClass().isAssignableFrom(Object.class));\r\n    final Type testType = Object.class;\r\n    assertTrue(TypeUtils.isAssignable(paramType, testType), () -> String.format(\"TypeUtils.isAssignable(%s, %s)\", paramType, testType));\r\n    assertFalse(TypeUtils.isAssignable(testType, paramType), () -> String.format(\"TypeUtils.isAssignable(%s, %s)\", testType, paramType));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\reflect\\TypeUtilsTest.java",
  "methodName" : "testIsAssignableGenericArrayTypeToParameterizedType",
  "sourceCode" : "@Test\r\nvoid testIsAssignableGenericArrayTypeToParameterizedType() {\r\n    final Class<Constructor> rawClass = Constructor.class;\r\n    final Class<Insets> typeArgClass = Insets.class;\r\n    // Builds a ParameterizedType for Constructor<Insets>\r\n    final ParameterizedType paramType = TypeUtils.parameterize(rawClass, typeArgClass);\r\n    assertEquals(rawClass, paramType.getRawType());\r\n    assertEquals(typeArgClass, paramType.getActualTypeArguments()[0]);\r\n    assertFalse(GenericArrayType.class.isAssignableFrom(paramType.getClass()));\r\n    assertFalse(paramType.getClass().isAssignableFrom(GenericArrayType.class));\r\n    final GenericArrayType testType = TypeUtils.genericArrayType(paramType);\r\n    assertFalse(TypeUtils.isAssignable(paramType, testType), () -> String.format(\"TypeUtils.isAssignable(%s, %s)\", paramType, testType));\r\n    assertFalse(TypeUtils.isAssignable(testType, paramType), () -> String.format(\"TypeUtils.isAssignable(%s, %s)\", testType, paramType));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\reflect\\TypeUtilsTest.java",
  "methodName" : "testIsAssignableGenericArrayTypeToWildcardType",
  "sourceCode" : "@Test\r\n@Disabled(\"TODO\")\r\nvoid testIsAssignableGenericArrayTypeToWildcardType() {\r\n    final Class<Constructor> rawClass = Constructor.class;\r\n    final Class<Insets> typeArgClass = Insets.class;\r\n    // Builds a ParameterizedType for Constructor<Insets>\r\n    final ParameterizedType paramType = TypeUtils.parameterize(rawClass, typeArgClass);\r\n    assertEquals(rawClass, paramType.getRawType());\r\n    assertEquals(typeArgClass, paramType.getActualTypeArguments()[0]);\r\n    assertFalse(WildcardType.class.isAssignableFrom(paramType.getClass()));\r\n    assertFalse(paramType.getClass().isAssignableFrom(WildcardType.class));\r\n    final WildcardType testType = TypeUtils.WILDCARD_ALL;\r\n    // TODO This test returns true unlike the test above.\r\n    // Is this a bug in this test or in the main code?\r\n    assertFalse(TypeUtils.isAssignable(paramType, testType), () -> String.format(\"TypeUtils.isAssignable(%s, %s)\", paramType, testType));\r\n    assertFalse(TypeUtils.isAssignable(testType, paramType), () -> String.format(\"TypeUtils.isAssignable(%s, %s)\", testType, paramType));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\reflect\\TypeUtilsTest.java",
  "methodName" : "testIsAssignableGenericClassHierarchy",
  "sourceCode" : "@Test\r\nvoid testIsAssignableGenericClassHierarchy() throws NoSuchFieldException {\r\n    /*\r\n         *            <<This>>\r\n         *      /      /     \\     \\\r\n         * <<And>>   That   Other   Tester\r\n         *      \\   /         |\r\n         *       The        Thing\r\n         */\r\n    // This is superinterface\r\n    final Type disType = getClass().getField(\"dis\").getGenericType();\r\n    // That implements This\r\n    final Type datType = getClass().getField(\"dat\").getGenericType();\r\n    final Type dat2Type = getClass().getField(\"dat2\").getGenericType();\r\n    final Type dat3Type = getClass().getField(\"dat3\").getGenericType();\r\n    // The extends That and implements And\r\n    final Type daType = getClass().getField(\"da\").getGenericType();\r\n    // Other implements This\r\n    final Type uhderType = getClass().getField(\"uhder\").getGenericType();\r\n    // Thing extends Other\r\n    final Type dingType = getClass().getField(\"ding\").getGenericType();\r\n    // Tester implements This\r\n    final Type testerType = getClass().getField(\"tester\").getGenericType();\r\n    final Type tester2Type = getClass().getField(\"tester2\").getGenericType();\r\n    assertTrue(TypeUtils.isAssignable(datType, disType));\r\n    assertFalse(TypeUtils.isAssignable(daType, disType));\r\n    assertTrue(TypeUtils.isAssignable(uhderType, disType));\r\n    assertFalse(TypeUtils.isAssignable(dingType, disType));\r\n    assertTrue(TypeUtils.isAssignable(testerType, disType));\r\n    assertFalse(TypeUtils.isAssignable(tester2Type, disType));\r\n    assertFalse(TypeUtils.isAssignable(dat2Type, datType));\r\n    assertFalse(TypeUtils.isAssignable(datType, dat2Type));\r\n    assertFalse(TypeUtils.isAssignable(dat3Type, datType));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\reflect\\TypeUtilsTest.java",
  "methodName" : "testIsAssignableGenericComparableTypes",
  "sourceCode" : "@Test\r\nvoid testIsAssignableGenericComparableTypes() throws NoSuchFieldException {\r\n    final Type intComparableType = getClass().getField(\"intComparable\").getGenericType();\r\n    assertTrue(TypeUtils.isAssignable(int.class, intComparableType));\r\n    final Type longComparableType = getClass().getField(\"longComparable\").getGenericType();\r\n    assertFalse(TypeUtils.isAssignable(int.class, longComparableType));\r\n    assertFalse(TypeUtils.isAssignable(Integer.class, longComparableType));\r\n    final Type intComparableArrayType = getClass().getField(\"intWildcardComparable\").getGenericType();\r\n    assertTrue(TypeUtils.isAssignable(Integer[].class, intComparableArrayType));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\reflect\\TypeUtilsTest.java",
  "methodName" : "testIsAssignableGenericListArrays",
  "sourceCode" : "@Test\r\nvoid testIsAssignableGenericListArrays() throws NoSuchFieldException {\r\n    final Type rawListTypeArray = GenericTypeHolder.class.getDeclaredField(\"rawListArray\").getGenericType();\r\n    final Type objectListTypeArray = GenericTypeHolder.class.getDeclaredField(\"objectListArray\").getGenericType();\r\n    final Type unboundListTypeArray = GenericTypeHolder.class.getDeclaredField(\"unboundListArray\").getGenericType();\r\n    final Type superObjectListTypeArray = GenericTypeHolder.class.getDeclaredField(\"superObjectListArray\").getGenericType();\r\n    final Type stringListTypeArray = GenericTypeHolder.class.getDeclaredField(\"stringListArray\").getGenericType();\r\n    final Type subStringListTypeArray = GenericTypeHolder.class.getDeclaredField(\"subStringListArray\").getGenericType();\r\n    final Type superStringListTypeArray = GenericTypeHolder.class.getDeclaredField(\"superStringListArray\").getGenericType();\r\n    assertTrue(TypeUtils.isAssignable(rawListTypeArray, rawListTypeArray));\r\n    assertTrue(TypeUtils.isAssignable(rawListTypeArray, objectListTypeArray));\r\n    assertTrue(TypeUtils.isAssignable(objectListTypeArray, rawListTypeArray));\r\n    assertTrue(TypeUtils.isAssignable(rawListTypeArray, unboundListTypeArray));\r\n    assertTrue(TypeUtils.isAssignable(unboundListTypeArray, rawListTypeArray));\r\n    assertTrue(TypeUtils.isAssignable(rawListTypeArray, superObjectListTypeArray));\r\n    assertTrue(TypeUtils.isAssignable(superObjectListTypeArray, rawListTypeArray));\r\n    assertTrue(TypeUtils.isAssignable(rawListTypeArray, stringListTypeArray));\r\n    assertTrue(TypeUtils.isAssignable(stringListTypeArray, rawListTypeArray));\r\n    assertTrue(TypeUtils.isAssignable(rawListTypeArray, subStringListTypeArray));\r\n    assertTrue(TypeUtils.isAssignable(subStringListTypeArray, rawListTypeArray));\r\n    assertTrue(TypeUtils.isAssignable(rawListTypeArray, superStringListTypeArray));\r\n    assertTrue(TypeUtils.isAssignable(superStringListTypeArray, rawListTypeArray));\r\n    assertTrue(TypeUtils.isAssignable(objectListTypeArray, objectListTypeArray));\r\n    assertTrue(TypeUtils.isAssignable(objectListTypeArray, unboundListTypeArray));\r\n    assertFalse(TypeUtils.isAssignable(unboundListTypeArray, objectListTypeArray));\r\n    assertTrue(TypeUtils.isAssignable(objectListTypeArray, superObjectListTypeArray));\r\n    assertFalse(TypeUtils.isAssignable(superObjectListTypeArray, objectListTypeArray));\r\n    assertFalse(TypeUtils.isAssignable(objectListTypeArray, stringListTypeArray));\r\n    assertFalse(TypeUtils.isAssignable(stringListTypeArray, objectListTypeArray));\r\n    assertFalse(TypeUtils.isAssignable(objectListTypeArray, subStringListTypeArray));\r\n    assertFalse(TypeUtils.isAssignable(subStringListTypeArray, objectListTypeArray));\r\n    assertTrue(TypeUtils.isAssignable(objectListTypeArray, superStringListTypeArray));\r\n    assertFalse(TypeUtils.isAssignable(superStringListTypeArray, objectListTypeArray));\r\n    assertTrue(TypeUtils.isAssignable(unboundListTypeArray, unboundListTypeArray));\r\n    assertFalse(TypeUtils.isAssignable(unboundListTypeArray, superObjectListTypeArray));\r\n    assertTrue(TypeUtils.isAssignable(superObjectListTypeArray, unboundListTypeArray));\r\n    assertFalse(TypeUtils.isAssignable(unboundListTypeArray, stringListTypeArray));\r\n    assertTrue(TypeUtils.isAssignable(stringListTypeArray, unboundListTypeArray));\r\n    assertFalse(TypeUtils.isAssignable(unboundListTypeArray, subStringListTypeArray));\r\n    assertTrue(TypeUtils.isAssignable(subStringListTypeArray, unboundListTypeArray));\r\n    assertFalse(TypeUtils.isAssignable(unboundListTypeArray, superStringListTypeArray));\r\n    assertTrue(TypeUtils.isAssignable(superStringListTypeArray, unboundListTypeArray));\r\n    assertTrue(TypeUtils.isAssignable(superObjectListTypeArray, superObjectListTypeArray));\r\n    assertFalse(TypeUtils.isAssignable(superObjectListTypeArray, stringListTypeArray));\r\n    assertFalse(TypeUtils.isAssignable(stringListTypeArray, superObjectListTypeArray));\r\n    assertFalse(TypeUtils.isAssignable(superObjectListTypeArray, subStringListTypeArray));\r\n    assertFalse(TypeUtils.isAssignable(subStringListTypeArray, superObjectListTypeArray));\r\n    assertTrue(TypeUtils.isAssignable(superObjectListTypeArray, superStringListTypeArray));\r\n    assertFalse(TypeUtils.isAssignable(superStringListTypeArray, superObjectListTypeArray));\r\n    assertTrue(TypeUtils.isAssignable(stringListTypeArray, stringListTypeArray));\r\n    assertTrue(TypeUtils.isAssignable(stringListTypeArray, subStringListTypeArray));\r\n    assertFalse(TypeUtils.isAssignable(subStringListTypeArray, stringListTypeArray));\r\n    assertTrue(TypeUtils.isAssignable(stringListTypeArray, superStringListTypeArray));\r\n    assertFalse(TypeUtils.isAssignable(superStringListTypeArray, stringListTypeArray));\r\n    assertTrue(TypeUtils.isAssignable(subStringListTypeArray, subStringListTypeArray));\r\n    assertFalse(TypeUtils.isAssignable(subStringListTypeArray, superStringListTypeArray));\r\n    assertFalse(TypeUtils.isAssignable(superStringListTypeArray, subStringListTypeArray));\r\n    assertTrue(TypeUtils.isAssignable(superStringListTypeArray, superStringListTypeArray));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\reflect\\TypeUtilsTest.java",
  "methodName" : "testIsAssignableGenericListTypes",
  "sourceCode" : "@Test\r\nvoid testIsAssignableGenericListTypes() throws NoSuchFieldException {\r\n    final Type rawListType = GenericTypeHolder.class.getDeclaredField(\"rawList\").getGenericType();\r\n    final Type objectListType = GenericTypeHolder.class.getDeclaredField(\"objectList\").getGenericType();\r\n    final Type unboundListType = GenericTypeHolder.class.getDeclaredField(\"unboundList\").getGenericType();\r\n    final Type superObjectListType = GenericTypeHolder.class.getDeclaredField(\"superObjectList\").getGenericType();\r\n    final Type stringListType = GenericTypeHolder.class.getDeclaredField(\"stringList\").getGenericType();\r\n    final Type subStringListType = GenericTypeHolder.class.getDeclaredField(\"subStringList\").getGenericType();\r\n    final Type superStringListType = GenericTypeHolder.class.getDeclaredField(\"superStringList\").getGenericType();\r\n    assertTrue(TypeUtils.isAssignable(rawListType, rawListType));\r\n    assertTrue(TypeUtils.isAssignable(rawListType, objectListType));\r\n    assertTrue(TypeUtils.isAssignable(objectListType, rawListType));\r\n    assertTrue(TypeUtils.isAssignable(rawListType, unboundListType));\r\n    assertTrue(TypeUtils.isAssignable(unboundListType, rawListType));\r\n    assertTrue(TypeUtils.isAssignable(rawListType, superObjectListType));\r\n    assertTrue(TypeUtils.isAssignable(superObjectListType, rawListType));\r\n    assertTrue(TypeUtils.isAssignable(rawListType, stringListType));\r\n    assertTrue(TypeUtils.isAssignable(stringListType, rawListType));\r\n    assertTrue(TypeUtils.isAssignable(rawListType, subStringListType));\r\n    assertTrue(TypeUtils.isAssignable(subStringListType, rawListType));\r\n    assertTrue(TypeUtils.isAssignable(rawListType, superStringListType));\r\n    assertTrue(TypeUtils.isAssignable(superStringListType, rawListType));\r\n    assertTrue(TypeUtils.isAssignable(objectListType, objectListType));\r\n    assertTrue(TypeUtils.isAssignable(objectListType, unboundListType));\r\n    assertFalse(TypeUtils.isAssignable(unboundListType, objectListType));\r\n    assertTrue(TypeUtils.isAssignable(objectListType, superObjectListType));\r\n    assertFalse(TypeUtils.isAssignable(superObjectListType, objectListType));\r\n    assertFalse(TypeUtils.isAssignable(objectListType, stringListType));\r\n    assertFalse(TypeUtils.isAssignable(stringListType, objectListType));\r\n    assertFalse(TypeUtils.isAssignable(objectListType, subStringListType));\r\n    assertFalse(TypeUtils.isAssignable(subStringListType, objectListType));\r\n    assertTrue(TypeUtils.isAssignable(objectListType, superStringListType));\r\n    assertFalse(TypeUtils.isAssignable(superStringListType, objectListType));\r\n    assertTrue(TypeUtils.isAssignable(unboundListType, unboundListType));\r\n    assertFalse(TypeUtils.isAssignable(unboundListType, superObjectListType));\r\n    assertTrue(TypeUtils.isAssignable(superObjectListType, unboundListType));\r\n    assertFalse(TypeUtils.isAssignable(unboundListType, stringListType));\r\n    assertTrue(TypeUtils.isAssignable(stringListType, unboundListType));\r\n    assertFalse(TypeUtils.isAssignable(unboundListType, subStringListType));\r\n    assertTrue(TypeUtils.isAssignable(subStringListType, unboundListType));\r\n    assertFalse(TypeUtils.isAssignable(unboundListType, superStringListType));\r\n    assertTrue(TypeUtils.isAssignable(superStringListType, unboundListType));\r\n    assertTrue(TypeUtils.isAssignable(superObjectListType, superObjectListType));\r\n    assertFalse(TypeUtils.isAssignable(superObjectListType, stringListType));\r\n    assertFalse(TypeUtils.isAssignable(stringListType, superObjectListType));\r\n    assertFalse(TypeUtils.isAssignable(superObjectListType, subStringListType));\r\n    assertFalse(TypeUtils.isAssignable(subStringListType, superObjectListType));\r\n    assertTrue(TypeUtils.isAssignable(superObjectListType, superStringListType));\r\n    assertFalse(TypeUtils.isAssignable(superStringListType, superObjectListType));\r\n    assertTrue(TypeUtils.isAssignable(stringListType, stringListType));\r\n    assertTrue(TypeUtils.isAssignable(stringListType, subStringListType));\r\n    assertFalse(TypeUtils.isAssignable(subStringListType, stringListType));\r\n    assertTrue(TypeUtils.isAssignable(stringListType, superStringListType));\r\n    assertFalse(TypeUtils.isAssignable(superStringListType, stringListType));\r\n    assertTrue(TypeUtils.isAssignable(subStringListType, subStringListType));\r\n    assertFalse(TypeUtils.isAssignable(subStringListType, superStringListType));\r\n    assertFalse(TypeUtils.isAssignable(superStringListType, subStringListType));\r\n    assertTrue(TypeUtils.isAssignable(superStringListType, superStringListType));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\reflect\\TypeUtilsTest.java",
  "methodName" : "testIsInstance",
  "sourceCode" : "// boxing is deliberate here\r\n@SuppressWarnings(\"boxing\")\r\n@Test\r\nvoid testIsInstance() throws NoSuchFieldException {\r\n    assertFalse(TypeUtils.isInstance(1, null));\r\n    final Type intComparableType = getClass().getField(\"intComparable\").getGenericType();\r\n    final Type uriComparableType = getClass().getField(\"uriComparable\").getGenericType();\r\n    assertTrue(TypeUtils.isInstance(1, intComparableType));\r\n    assertFalse(TypeUtils.isInstance(1, uriComparableType));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\reflect\\TypeUtilsTest.java",
  "methodName" : "testLowerBoundedWildcardType",
  "sourceCode" : "@Test\r\nvoid testLowerBoundedWildcardType() {\r\n    final WildcardType lowerBounded = TypeUtils.wildcardType().withLowerBounds(java.sql.Date.class).build();\r\n    assertEquals(String.format(\"? super %s\", java.sql.Date.class.getName()), TypeUtils.toString(lowerBounded));\r\n    assertEquals(String.format(\"? super %s\", java.sql.Date.class.getName()), lowerBounded.toString());\r\n    final TypeVariable<Class<Iterable>> iterableT0 = Iterable.class.getTypeParameters()[0];\r\n    final WildcardType lowerTypeVariable = TypeUtils.wildcardType().withLowerBounds(iterableT0).build();\r\n    assertEquals(String.format(\"? super %s\", iterableT0.getName()), TypeUtils.toString(lowerTypeVariable));\r\n    assertEquals(String.format(\"? super %s\", iterableT0.getName()), lowerTypeVariable.toString());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\reflect\\TypeUtilsTest.java",
  "methodName" : "testNormalizeUpperBounds",
  "sourceCode" : "@Test\r\nvoid testNormalizeUpperBounds() {\r\n    final Type[] typeArray = { Collection.class, List.class };\r\n    final Type[] expectedArray = { List.class };\r\n    assertArrayEquals(expectedArray, TypeUtils.normalizeUpperBounds(typeArray));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\reflect\\TypeUtilsTest.java",
  "methodName" : "testNormalizeUpperBounds_LANG_820",
  "sourceCode" : "@Test\r\nvoid testNormalizeUpperBounds_LANG_820() {\r\n    final Type[] typeArray = { String.class, String.class };\r\n    final Type[] expectedArray = { String.class };\r\n    assertArrayEquals(expectedArray, TypeUtils.normalizeUpperBounds(typeArray));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\reflect\\TypeUtilsTest.java",
  "methodName" : "testParameterizeMapArg",
  "sourceCode" : "@Test\r\nvoid testParameterizeMapArg() throws NoSuchFieldException {\r\n    final Map<TypeVariable<?>, Type> typeVariableMap = new HashMap<>();\r\n    typeVariableMap.put(Comparable.class.getTypeParameters()[0], String.class);\r\n    final ParameterizedType stringComparableType = TypeUtils.parameterize(Comparable.class, typeVariableMap);\r\n    assertTrue(TypeUtils.equals(getClass().getField(\"stringComparable\").getGenericType(), stringComparableType));\r\n    assertEquals(\"java.lang.Comparable<java.lang.String>\", stringComparableType.toString());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\reflect\\TypeUtilsTest.java",
  "methodName" : "testParameterizeNarrowerTypeArray",
  "sourceCode" : "@Test\r\nvoid testParameterizeNarrowerTypeArray() {\r\n    final TypeVariable<?>[] variables = ArrayList.class.getTypeParameters();\r\n    final ParameterizedType parameterizedType = TypeUtils.parameterize(ArrayList.class, variables);\r\n    final Map<TypeVariable<?>, Type> mapping = Collections.<TypeVariable<?>, Type>singletonMap(variables[0], String.class);\r\n    final Type unrolled = TypeUtils.unrollVariables(mapping, parameterizedType);\r\n    assertEquals(TypeUtils.parameterize(ArrayList.class, String.class), unrolled);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\reflect\\TypeUtilsTest.java",
  "methodName" : "testParameterizeNullPointerException",
  "sourceCode" : "@Test\r\nvoid testParameterizeNullPointerException() {\r\n    assertNullPointerException(() -> TypeUtils.parameterize(null, Collections.emptyMap()));\r\n    final Map<TypeVariable<?>, Type> nullTypeVariableMap = null;\r\n    assertNullPointerException(() -> TypeUtils.parameterize(String.class, nullTypeVariableMap));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\reflect\\TypeUtilsTest.java",
  "methodName" : "testParameterizeVarArgs",
  "sourceCode" : "@Test\r\nvoid testParameterizeVarArgs() throws NoSuchFieldException {\r\n    final ParameterizedType stringComparableType = TypeUtils.parameterize(Comparable.class, String.class);\r\n    assertTrue(TypeUtils.equals(getClass().getField(\"stringComparable\").getGenericType(), stringComparableType));\r\n    assertEquals(\"java.lang.Comparable<java.lang.String>\", stringComparableType.toString());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\reflect\\TypeUtilsTest.java",
  "methodName" : "testParameterizeVarArgsNullPointerException",
  "sourceCode" : "@Test\r\nvoid testParameterizeVarArgsNullPointerException() {\r\n    assertNullPointerException(() -> TypeUtils.parameterize(null));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\reflect\\TypeUtilsTest.java",
  "methodName" : "testParameterizeWithOwner",
  "sourceCode" : "@SuppressWarnings(\"unlikely-arg-type\")\r\n@Test\r\nvoid testParameterizeWithOwner() throws NoSuchFieldException {\r\n    final Type owner = TypeUtils.parameterize(TypeUtilsTest.class, String.class);\r\n    final ParameterizedType dat2Type1 = TypeUtils.parameterizeWithOwner(owner, That.class, String.class, String.class);\r\n    assertTrue(TypeUtils.equals(getClass().getField(\"dat2\").getGenericType(), dat2Type1));\r\n    assertNotEquals(0, dat2Type1.hashCode());\r\n    assertEquals(dat2Type1, dat2Type1);\r\n    final ParameterizedType dat2Type2 = TypeUtils.parameterizeWithOwner(null, That.class, String.class, String.class);\r\n    assertEquals(That.class, dat2Type2.getRawType());\r\n    assertNotEquals(0, dat2Type2.hashCode());\r\n    assertEquals(dat2Type2, dat2Type2);\r\n    assertNotEquals(dat2Type2, dat2Type1);\r\n    assertFalse(dat2Type1.equals(null));\r\n    assertFalse(dat2Type1.equals(TypeUtils.genericArrayType(String.class)));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\reflect\\TypeUtilsTest.java",
  "methodName" : "testParameterizeWithOwner3ArgsNullPointerException",
  "sourceCode" : "@Test\r\nvoid testParameterizeWithOwner3ArgsNullPointerException() {\r\n    final Type owner = TypeUtils.parameterize(TypeUtilsTest.class, String.class);\r\n    assertNullPointerException(() -> TypeUtils.parameterizeWithOwner(owner, null, String.class));\r\n    final Map<TypeVariable<?>, Type> nullTypeVariableMap = null;\r\n    assertNullPointerException(() -> TypeUtils.parameterizeWithOwner(owner, That.class, nullTypeVariableMap));\r\n    final Map<TypeVariable<?>, Type> typeVariableMap1 = new HashMap<>();\r\n    typeVariableMap1.put(Comparable.class.getTypeParameters()[0], String.class);\r\n    assertEquals(Comparable.class, TypeUtils.parameterizeWithOwner(null, Comparable.class, typeVariableMap1).getRawType());\r\n    final Map<TypeVariable<?>, Type> typeVariableMap2 = new HashMap<>();\r\n    typeVariableMap2.put(MyInnerClass.class.getTypeParameters()[0], String.class);\r\n    assertEquals(MyInnerClass.class, TypeUtils.parameterizeWithOwner(null, MyInnerClass.class, typeVariableMap2).getRawType());\r\n    assertEquals(MyInnerClass.class, TypeUtils.parameterizeWithOwner(owner, MyInnerClass.class, typeVariableMap2).getRawType());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\reflect\\TypeUtilsTest.java",
  "methodName" : "testParameterizeWithOwnerVarArgsNullPointerException",
  "sourceCode" : "@Test\r\nvoid testParameterizeWithOwnerVarArgsNullPointerException() {\r\n    final Type owner = TypeUtils.parameterize(TypeUtilsTest.class, String.class);\r\n    assertNullPointerException(() -> TypeUtils.parameterizeWithOwner(owner, null));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\reflect\\TypeUtilsTest.java",
  "methodName" : "testToLongString",
  "sourceCode" : "@Test\r\nvoid testToLongString() {\r\n    assertNullPointerException(() -> TypeUtils.toLongString(null));\r\n    assertEquals(getClass().getName() + \":B\", TypeUtils.toLongString(getClass().getTypeParameters()[0]));\r\n    assertEquals(getClass().getName() + \".MyInnerClass:T\", TypeUtils.toLongString(MyInnerClass.class.getTypeParameters()[0]));\r\n    assertEquals(getClass().getName() + \".That:K\", TypeUtils.toLongString(That.class.getTypeParameters()[0]));\r\n    assertEquals(getClass().getName() + \".The:K\", TypeUtils.toLongString(The.class.getTypeParameters()[0]));\r\n    assertEquals(getClass().getName() + \".MyInnerClass.MyInnerClass2:X\", TypeUtils.toLongString(MyInnerClass.MyInnerClass2.class.getTypeParameters()[0]));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\reflect\\TypeUtilsTest.java",
  "methodName" : "testToString",
  "sourceCode" : "@Test\r\nvoid testToString() {\r\n    assertNullPointerException(() -> TypeUtils.toString(null));\r\n    assertIllegalArgumentException(() -> TypeUtils.toString(new Type() {\r\n    }));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\reflect\\TypeUtilsTest.java",
  "methodName" : "testToString_LANG_1311",
  "sourceCode" : "@Test\r\nvoid testToString_LANG_1311() {\r\n    assertEquals(\"int[]\", TypeUtils.toString(int[].class));\r\n    assertEquals(\"java.lang.Integer[]\", TypeUtils.toString(Integer[].class));\r\n    final Field stringListField = FieldUtils.getDeclaredField(getClass(), \"stringListArray\");\r\n    assertEquals(\"java.util.List<java.lang.String>[]\", TypeUtils.toString(stringListField.getGenericType()));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\reflect\\TypeUtilsTest.java",
  "methodName" : "testTypesSatisfyVariables",
  "sourceCode" : "@Test\r\nvoid testTypesSatisfyVariables() throws NoSuchMethodException {\r\n    final Map<TypeVariable<?>, Type> typeVarAssigns = new HashMap<>();\r\n    final Integer max = TypeUtilsTest.<Integer>stub();\r\n    typeVarAssigns.put(getClass().getMethod(\"stub\").getTypeParameters()[0], Integer.class);\r\n    assertTrue(TypeUtils.typesSatisfyVariables(typeVarAssigns));\r\n    typeVarAssigns.clear();\r\n    typeVarAssigns.put(getClass().getMethod(\"stub2\").getTypeParameters()[0], Integer.class);\r\n    assertTrue(TypeUtils.typesSatisfyVariables(typeVarAssigns));\r\n    typeVarAssigns.clear();\r\n    typeVarAssigns.put(getClass().getMethod(\"stub3\").getTypeParameters()[0], Integer.class);\r\n    assertTrue(TypeUtils.typesSatisfyVariables(typeVarAssigns));\r\n    assertNullPointerException(() -> TypeUtils.typesSatisfyVariables(null));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\reflect\\TypeUtilsTest.java",
  "methodName" : "testTypeToString",
  "sourceCode" : "@ParameterizedTest\r\n@MethodSource\r\nvoid testTypeToString(final Type type) {\r\n    // No stack overflow\r\n    assertNotNull(TypeUtils.toString(type));\r\n}",
  "annotations" : [ "ParameterizedTest" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\reflect\\TypeUtilsTest.java",
  "methodName" : "testUnboundedWildcardType",
  "sourceCode" : "@Test\r\nvoid testUnboundedWildcardType() {\r\n    final WildcardType unbounded = TypeUtils.wildcardType().withLowerBounds((Type) null).withUpperBounds().build();\r\n    assertTrue(TypeUtils.equals(TypeUtils.WILDCARD_ALL, unbounded));\r\n    assertArrayEquals(new Type[] { Object.class }, TypeUtils.getImplicitUpperBounds(unbounded));\r\n    assertArrayEquals(new Type[] { null }, TypeUtils.getImplicitLowerBounds(unbounded));\r\n    assertEquals(\"?\", TypeUtils.toString(unbounded));\r\n    assertEquals(\"?\", unbounded.toString());\r\n    assertNullPointerException(() -> TypeUtils.getImplicitLowerBounds(null));\r\n    assertNullPointerException(() -> TypeUtils.getImplicitUpperBounds(null));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\reflect\\TypeUtilsTest.java",
  "methodName" : "testUnrollVariables",
  "sourceCode" : "@Test\r\nvoid testUnrollVariables() {\r\n    final TypeVariable<?>[] variables = ArrayList.class.getTypeParameters();\r\n    final ParameterizedType parameterizedType = TypeUtils.parameterize(ArrayList.class, variables);\r\n    assertEquals(\"java.util.ArrayList<E>\", TypeUtils.unrollVariables(null, parameterizedType).getTypeName());\r\n    final Map<TypeVariable<?>, Type> mapping = Collections.<TypeVariable<?>, Type>singletonMap(variables[0], String.class);\r\n    assertEquals(\"java.util.ArrayList<java.lang.String>\", TypeUtils.unrollVariables(mapping, parameterizedType).getTypeName());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\reflect\\TypeUtilsTest.java",
  "methodName" : "testWildcardType",
  "sourceCode" : "@SuppressWarnings(\"unlikely-arg-type\")\r\n@Test\r\nvoid testWildcardType() throws NoSuchFieldException {\r\n    final WildcardType simpleWildcard = TypeUtils.wildcardType().withUpperBounds(String.class).build();\r\n    final Field cClass = AClass.class.getField(\"cClass\");\r\n    assertTrue(TypeUtils.equals(((ParameterizedType) cClass.getGenericType()).getActualTypeArguments()[0], simpleWildcard));\r\n    assertEquals(String.format(\"? extends %s\", String.class.getName()), TypeUtils.toString(simpleWildcard));\r\n    assertEquals(String.format(\"? extends %s\", String.class.getName()), simpleWildcard.toString());\r\n    assertNotEquals(0, simpleWildcard.hashCode());\r\n    assertEquals(simpleWildcard, simpleWildcard);\r\n    assertFalse(simpleWildcard.equals(null));\r\n    assertFalse(simpleWildcard.equals(TypeUtils.genericArrayType(String.class)));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\reflect\\TypeUtilsTest.java",
  "methodName" : "testWrap",
  "sourceCode" : "@Test\r\nvoid testWrap() {\r\n    final Type t = getClass().getTypeParameters()[0];\r\n    assertTrue(TypeUtils.equals(t, TypeUtils.wrap(t).getType()));\r\n    assertEquals(String.class, TypeUtils.wrap(String.class).getType());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\RegExUtilsTest.java",
  "methodName" : "testDotAll",
  "sourceCode" : "@Test\r\nvoid testDotAll() {\r\n    assertTrue(RegExUtils.dotAll(\"<A>.*</A>\").matcher(\"<A>\\nxy\\n</A>\").matches());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\RegExUtilsTest.java",
  "methodName" : "testDotAllMatcher",
  "sourceCode" : "@Test\r\nvoid testDotAllMatcher() {\r\n    assertTrue(RegExUtils.dotAllMatcher(\"<A>.*</A>\", (CharSequence) \"<A>\\nxy\\n</A>\").matches());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\RegExUtilsTest.java",
  "methodName" : "testDotAllMatcherDeprecated",
  "sourceCode" : "@SuppressWarnings(\"deprecation\")\r\n@Test\r\nvoid testDotAllMatcherDeprecated() {\r\n    assertTrue(RegExUtils.dotAllMatcher(\"<A>.*</A>\", \"<A>\\nxy\\n</A>\").matches());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\RegExUtilsTest.java",
  "methodName" : "testRemoveAll",
  "sourceCode" : "@Test\r\nvoid testRemoveAll() {\r\n    assertNull(RegExUtils.removeAll((CharSequence) null, Pattern.compile(\"\")));\r\n    assertEquals(\"any\", RegExUtils.removeAll((CharSequence) \"any\", (Pattern) null));\r\n    assertEquals(\"any\", RegExUtils.removeAll((CharSequence) \"any\", Pattern.compile(\"\")));\r\n    assertEquals(\"\", RegExUtils.removeAll((CharSequence) \"any\", Pattern.compile(\".*\")));\r\n    assertEquals(\"\", RegExUtils.removeAll((CharSequence) \"any\", Pattern.compile(\".+\")));\r\n    assertEquals(\"\", RegExUtils.removeAll((CharSequence) \"any\", Pattern.compile(\".?\")));\r\n    assertEquals(\"A\\nB\", RegExUtils.removeAll((CharSequence) \"A<__>\\n<__>B\", Pattern.compile(\"<.*>\")));\r\n    assertEquals(\"AB\", RegExUtils.removeAll((CharSequence) \"A<__>\\n<__>B\", Pattern.compile(\"(?s)<.*>\")));\r\n    assertEquals(\"ABC123\", RegExUtils.removeAll((CharSequence) \"ABCabc123abc\", Pattern.compile(\"[a-z]\")));\r\n    assertEquals(\"AB\", RegExUtils.removeAll((CharSequence) \"A<__>\\n<__>B\", Pattern.compile(\"<.*>\", Pattern.DOTALL)));\r\n    assertEquals(\"AB\", RegExUtils.removeAll((CharSequence) \"A<__>\\\\n<__>B\", Pattern.compile(\"<.*>\")));\r\n    assertEquals(\"\", RegExUtils.removeAll((CharSequence) \"<A>x\\\\ny</A>\", Pattern.compile(\"<A>.*</A>\")));\r\n    assertEquals(\"\", RegExUtils.removeAll((CharSequence) \"<A>\\nxy\\n</A>\", Pattern.compile(\"<A>.*</A>\", Pattern.DOTALL)));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\RegExUtilsTest.java",
  "methodName" : "testRemoveAll_StringString",
  "sourceCode" : "@Test\r\nvoid testRemoveAll_StringString() {\r\n    assertNull(RegExUtils.removeAll(null, \"\"));\r\n    assertEquals(\"any\", RegExUtils.removeAll(\"any\", (String) null));\r\n    assertEquals(\"any\", RegExUtils.removeAll(\"any\", \"\"));\r\n    assertEquals(\"\", RegExUtils.removeAll(\"any\", \".*\"));\r\n    assertEquals(\"\", RegExUtils.removeAll(\"any\", \".+\"));\r\n    assertEquals(\"\", RegExUtils.removeAll(\"any\", \".?\"));\r\n    assertEquals(\"A\\nB\", RegExUtils.removeAll(\"A<__>\\n<__>B\", \"<.*>\"));\r\n    assertEquals(\"AB\", RegExUtils.removeAll(\"A<__>\\n<__>B\", \"(?s)<.*>\"));\r\n    assertEquals(\"ABC123\", RegExUtils.removeAll(\"ABCabc123abc\", \"[a-z]\"));\r\n    assertThrows(PatternSyntaxException.class, () -> RegExUtils.removeAll(\"any\", \"{badRegexSyntax}\"), \"RegExUtils.removeAll expecting PatternSyntaxException\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\RegExUtilsTest.java",
  "methodName" : "testRemoveAllDeprecated",
  "sourceCode" : "@Test\r\nvoid testRemoveAllDeprecated() {\r\n    assertNull(RegExUtils.removeAll(null, Pattern.compile(\"\")));\r\n    assertEquals(\"any\", RegExUtils.removeAll(\"any\", (Pattern) null));\r\n    assertEquals(\"any\", RegExUtils.removeAll(\"any\", Pattern.compile(\"\")));\r\n    assertEquals(\"\", RegExUtils.removeAll(\"any\", Pattern.compile(\".*\")));\r\n    assertEquals(\"\", RegExUtils.removeAll(\"any\", Pattern.compile(\".+\")));\r\n    assertEquals(\"\", RegExUtils.removeAll(\"any\", Pattern.compile(\".?\")));\r\n    assertEquals(\"A\\nB\", RegExUtils.removeAll(\"A<__>\\n<__>B\", Pattern.compile(\"<.*>\")));\r\n    assertEquals(\"AB\", RegExUtils.removeAll(\"A<__>\\n<__>B\", Pattern.compile(\"(?s)<.*>\")));\r\n    assertEquals(\"ABC123\", RegExUtils.removeAll(\"ABCabc123abc\", Pattern.compile(\"[a-z]\")));\r\n    assertEquals(\"AB\", RegExUtils.removeAll(\"A<__>\\n<__>B\", Pattern.compile(\"<.*>\", Pattern.DOTALL)));\r\n    assertEquals(\"AB\", RegExUtils.removeAll(\"A<__>\\\\n<__>B\", Pattern.compile(\"<.*>\")));\r\n    assertEquals(\"\", RegExUtils.removeAll(\"<A>x\\\\ny</A>\", Pattern.compile(\"<A>.*</A>\")));\r\n    assertEquals(\"\", RegExUtils.removeAll(\"<A>\\nxy\\n</A>\", Pattern.compile(\"<A>.*</A>\", Pattern.DOTALL)));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\RegExUtilsTest.java",
  "methodName" : "testRemoveFirst",
  "sourceCode" : "@Test\r\nvoid testRemoveFirst() {\r\n    assertNull(RegExUtils.removeFirst((CharSequence) null, Pattern.compile(\"\")));\r\n    assertEquals(\"any\", RegExUtils.removeFirst((CharSequence) \"any\", (Pattern) null));\r\n    assertEquals(\"any\", RegExUtils.removeFirst((CharSequence) \"any\", Pattern.compile(\"\")));\r\n    assertEquals(\"\", RegExUtils.removeFirst((CharSequence) \"any\", Pattern.compile(\".*\")));\r\n    assertEquals(\"\", RegExUtils.removeFirst((CharSequence) \"any\", Pattern.compile(\".+\")));\r\n    assertEquals(\"bc\", RegExUtils.removeFirst((CharSequence) \"abc\", Pattern.compile(\".?\")));\r\n    assertEquals(\"A\\n<__>B\", RegExUtils.removeFirst((CharSequence) \"A<__>\\n<__>B\", Pattern.compile(\"<.*>\")));\r\n    assertEquals(\"AB\", RegExUtils.removeFirst((CharSequence) \"A<__>\\n<__>B\", Pattern.compile(\"(?s)<.*>\")));\r\n    assertEquals(\"ABCbc123\", RegExUtils.removeFirst((CharSequence) \"ABCabc123\", Pattern.compile(\"[a-z]\")));\r\n    assertEquals(\"ABC123abc\", RegExUtils.removeFirst((CharSequence) \"ABCabc123abc\", Pattern.compile(\"[a-z]+\")));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\RegExUtilsTest.java",
  "methodName" : "testRemoveFirst_StringString",
  "sourceCode" : "@Test\r\nvoid testRemoveFirst_StringString() {\r\n    assertNull(RegExUtils.removeFirst(null, \"\"));\r\n    assertEquals(\"any\", RegExUtils.removeFirst(\"any\", (String) null));\r\n    assertEquals(\"any\", RegExUtils.removeFirst(\"any\", \"\"));\r\n    assertEquals(\"\", RegExUtils.removeFirst(\"any\", \".*\"));\r\n    assertEquals(\"\", RegExUtils.removeFirst(\"any\", \".+\"));\r\n    assertEquals(\"bc\", RegExUtils.removeFirst(\"abc\", \".?\"));\r\n    assertEquals(\"A\\n<__>B\", RegExUtils.removeFirst(\"A<__>\\n<__>B\", \"<.*>\"));\r\n    assertEquals(\"AB\", RegExUtils.removeFirst(\"A<__>\\n<__>B\", \"(?s)<.*>\"));\r\n    assertEquals(\"ABCbc123\", RegExUtils.removeFirst(\"ABCabc123\", \"[a-z]\"));\r\n    assertEquals(\"ABC123abc\", RegExUtils.removeFirst(\"ABCabc123abc\", \"[a-z]+\"));\r\n    assertThrows(PatternSyntaxException.class, () -> RegExUtils.removeFirst(\"any\", \"{badRegexSyntax}\"), \"RegExUtils.removeFirst expecting PatternSyntaxException\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\RegExUtilsTest.java",
  "methodName" : "testRemoveFirstDeprecated",
  "sourceCode" : "@Test\r\nvoid testRemoveFirstDeprecated() {\r\n    assertNull(RegExUtils.removeFirst(null, Pattern.compile(\"\")));\r\n    assertEquals(\"any\", RegExUtils.removeFirst(\"any\", (Pattern) null));\r\n    assertEquals(\"any\", RegExUtils.removeFirst(\"any\", Pattern.compile(\"\")));\r\n    assertEquals(\"\", RegExUtils.removeFirst(\"any\", Pattern.compile(\".*\")));\r\n    assertEquals(\"\", RegExUtils.removeFirst(\"any\", Pattern.compile(\".+\")));\r\n    assertEquals(\"bc\", RegExUtils.removeFirst(\"abc\", Pattern.compile(\".?\")));\r\n    assertEquals(\"A\\n<__>B\", RegExUtils.removeFirst(\"A<__>\\n<__>B\", Pattern.compile(\"<.*>\")));\r\n    assertEquals(\"AB\", RegExUtils.removeFirst(\"A<__>\\n<__>B\", Pattern.compile(\"(?s)<.*>\")));\r\n    assertEquals(\"ABCbc123\", RegExUtils.removeFirst(\"ABCabc123\", Pattern.compile(\"[a-z]\")));\r\n    assertEquals(\"ABC123abc\", RegExUtils.removeFirst(\"ABCabc123abc\", Pattern.compile(\"[a-z]+\")));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\RegExUtilsTest.java",
  "methodName" : "testRemovePattern",
  "sourceCode" : "@Test\r\nvoid testRemovePattern() {\r\n    assertNull(RegExUtils.removePattern((CharSequence) null, \"\"));\r\n    assertEquals(\"any\", RegExUtils.removePattern((CharSequence) \"any\", (String) null));\r\n    assertEquals(\"\", RegExUtils.removePattern((CharSequence) \"\", \"\"));\r\n    assertEquals(\"\", RegExUtils.removePattern((CharSequence) \"\", \".*\"));\r\n    assertEquals(\"\", RegExUtils.removePattern((CharSequence) \"\", \".+\"));\r\n    assertEquals(\"AB\", RegExUtils.removePattern((CharSequence) \"A<__>\\n<__>B\", \"<.*>\"));\r\n    assertEquals(\"AB\", RegExUtils.removePattern((CharSequence) \"A<__>\\\\n<__>B\", \"<.*>\"));\r\n    assertEquals(\"\", RegExUtils.removePattern((CharSequence) \"<A>x\\\\ny</A>\", \"<A>.*</A>\"));\r\n    assertEquals(\"\", RegExUtils.removePattern((CharSequence) \"<A>\\nxy\\n</A>\", \"<A>.*</A>\"));\r\n    assertEquals(\"ABC123\", RegExUtils.removePattern((CharSequence) \"ABCabc123\", \"[a-z]\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\RegExUtilsTest.java",
  "methodName" : "testRemovePatternDeprecated",
  "sourceCode" : "@Test\r\nvoid testRemovePatternDeprecated() {\r\n    assertNull(RegExUtils.removePattern(null, \"\"));\r\n    assertEquals(\"any\", RegExUtils.removePattern(\"any\", (String) null));\r\n    assertEquals(\"\", RegExUtils.removePattern(\"\", \"\"));\r\n    assertEquals(\"\", RegExUtils.removePattern(\"\", \".*\"));\r\n    assertEquals(\"\", RegExUtils.removePattern(\"\", \".+\"));\r\n    assertEquals(\"AB\", RegExUtils.removePattern(\"A<__>\\n<__>B\", \"<.*>\"));\r\n    assertEquals(\"AB\", RegExUtils.removePattern(\"A<__>\\\\n<__>B\", \"<.*>\"));\r\n    assertEquals(\"\", RegExUtils.removePattern(\"<A>x\\\\ny</A>\", \"<A>.*</A>\"));\r\n    assertEquals(\"\", RegExUtils.removePattern(\"<A>\\nxy\\n</A>\", \"<A>.*</A>\"));\r\n    assertEquals(\"ABC123\", RegExUtils.removePattern(\"ABCabc123\", \"[a-z]\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\RegExUtilsTest.java",
  "methodName" : "testReplaceAll",
  "sourceCode" : "@Test\r\nvoid testReplaceAll() {\r\n    assertNull(RegExUtils.replaceAll((CharSequence) null, Pattern.compile(\"\"), \"\"));\r\n    assertEquals(\"any\", RegExUtils.replaceAll((CharSequence) \"any\", (Pattern) null, \"\"));\r\n    assertEquals(\"any\", RegExUtils.replaceAll((CharSequence) \"any\", Pattern.compile(\"\"), null));\r\n    assertEquals(\"zzz\", RegExUtils.replaceAll((CharSequence) \"\", Pattern.compile(\"\"), \"zzz\"));\r\n    assertEquals(\"zzz\", RegExUtils.replaceAll((CharSequence) \"\", Pattern.compile(\".*\"), \"zzz\"));\r\n    assertEquals(\"\", RegExUtils.replaceAll((CharSequence) \"\", Pattern.compile(\".+\"), \"zzz\"));\r\n    assertEquals(\"ZZaZZbZZcZZ\", RegExUtils.replaceAll((CharSequence) \"abc\", Pattern.compile(\"\"), \"ZZ\"));\r\n    assertEquals(\"z\\nz\", RegExUtils.replaceAll((CharSequence) \"<__>\\n<__>\", Pattern.compile(\"<.*>\"), \"z\"));\r\n    assertEquals(\"z\", RegExUtils.replaceAll((CharSequence) \"<__>\\n<__>\", Pattern.compile(\"(?s)<.*>\"), \"z\"));\r\n    assertEquals(\"z\", RegExUtils.replaceAll((CharSequence) \"<__>\\n<__>\", Pattern.compile(\"<.*>\", Pattern.DOTALL), \"z\"));\r\n    assertEquals(\"z\", RegExUtils.replaceAll((CharSequence) \"<__>\\\\n<__>\", Pattern.compile(\"<.*>\"), \"z\"));\r\n    assertEquals(\"X\", RegExUtils.replaceAll((CharSequence) \"<A>\\nxy\\n</A>\", Pattern.compile(\"<A>.*</A>\", Pattern.DOTALL), \"X\"));\r\n    assertEquals(\"ABC___123\", RegExUtils.replaceAll((CharSequence) \"ABCabc123\", Pattern.compile(\"[a-z]\"), \"_\"));\r\n    assertEquals(\"ABC_123\", RegExUtils.replaceAll((CharSequence) \"ABCabc123\", Pattern.compile(\"[^A-Z0-9]+\"), \"_\"));\r\n    assertEquals(\"ABC123\", RegExUtils.replaceAll((CharSequence) \"ABCabc123\", Pattern.compile(\"[^A-Z0-9]+\"), \"\"));\r\n    assertEquals(\"Lorem_ipsum_dolor_sit\", RegExUtils.replaceAll((CharSequence) \"Lorem ipsum  dolor   sit\", Pattern.compile(\"( +)([a-z]+)\"), \"_$2\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\RegExUtilsTest.java",
  "methodName" : "testReplaceAll_StringStringString",
  "sourceCode" : "@Test\r\nvoid testReplaceAll_StringStringString() {\r\n    assertNull(RegExUtils.replaceAll(null, \"\", \"\"));\r\n    assertEquals(\"any\", RegExUtils.replaceAll(\"any\", (String) null, \"\"));\r\n    assertEquals(\"any\", RegExUtils.replaceAll(\"any\", \"\", null));\r\n    assertEquals(\"zzz\", RegExUtils.replaceAll(\"\", \"\", \"zzz\"));\r\n    assertEquals(\"zzz\", RegExUtils.replaceAll(\"\", \".*\", \"zzz\"));\r\n    assertEquals(\"\", RegExUtils.replaceAll(\"\", \".+\", \"zzz\"));\r\n    assertEquals(\"ZZaZZbZZcZZ\", RegExUtils.replaceAll(\"abc\", \"\", \"ZZ\"));\r\n    assertEquals(\"z\\nz\", RegExUtils.replaceAll(\"<__>\\n<__>\", \"<.*>\", \"z\"));\r\n    assertEquals(\"z\", RegExUtils.replaceAll(\"<__>\\n<__>\", \"(?s)<.*>\", \"z\"));\r\n    assertEquals(\"ABC___123\", RegExUtils.replaceAll(\"ABCabc123\", \"[a-z]\", \"_\"));\r\n    assertEquals(\"ABC_123\", RegExUtils.replaceAll(\"ABCabc123\", \"[^A-Z0-9]+\", \"_\"));\r\n    assertEquals(\"ABC123\", RegExUtils.replaceAll(\"ABCabc123\", \"[^A-Z0-9]+\", \"\"));\r\n    assertEquals(\"Lorem_ipsum_dolor_sit\", RegExUtils.replaceAll(\"Lorem ipsum  dolor   sit\", \"( +)([a-z]+)\", \"_$2\"));\r\n    assertThrows(PatternSyntaxException.class, () -> RegExUtils.replaceAll(\"any\", \"{badRegexSyntax}\", \"\"), \"RegExUtils.replaceAll expecting PatternSyntaxException\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\RegExUtilsTest.java",
  "methodName" : "testReplaceAllDeprecated",
  "sourceCode" : "@Test\r\nvoid testReplaceAllDeprecated() {\r\n    assertNull(RegExUtils.replaceAll(null, Pattern.compile(\"\"), \"\"));\r\n    assertEquals(\"any\", RegExUtils.replaceAll(\"any\", (Pattern) null, \"\"));\r\n    assertEquals(\"any\", RegExUtils.replaceAll(\"any\", Pattern.compile(\"\"), null));\r\n    assertEquals(\"zzz\", RegExUtils.replaceAll(\"\", Pattern.compile(\"\"), \"zzz\"));\r\n    assertEquals(\"zzz\", RegExUtils.replaceAll(\"\", Pattern.compile(\".*\"), \"zzz\"));\r\n    assertEquals(\"\", RegExUtils.replaceAll(\"\", Pattern.compile(\".+\"), \"zzz\"));\r\n    assertEquals(\"ZZaZZbZZcZZ\", RegExUtils.replaceAll(\"abc\", Pattern.compile(\"\"), \"ZZ\"));\r\n    assertEquals(\"z\\nz\", RegExUtils.replaceAll(\"<__>\\n<__>\", Pattern.compile(\"<.*>\"), \"z\"));\r\n    assertEquals(\"z\", RegExUtils.replaceAll(\"<__>\\n<__>\", Pattern.compile(\"(?s)<.*>\"), \"z\"));\r\n    assertEquals(\"z\", RegExUtils.replaceAll(\"<__>\\n<__>\", Pattern.compile(\"<.*>\", Pattern.DOTALL), \"z\"));\r\n    assertEquals(\"z\", RegExUtils.replaceAll(\"<__>\\\\n<__>\", Pattern.compile(\"<.*>\"), \"z\"));\r\n    assertEquals(\"X\", RegExUtils.replaceAll(\"<A>\\nxy\\n</A>\", Pattern.compile(\"<A>.*</A>\", Pattern.DOTALL), \"X\"));\r\n    assertEquals(\"ABC___123\", RegExUtils.replaceAll(\"ABCabc123\", Pattern.compile(\"[a-z]\"), \"_\"));\r\n    assertEquals(\"ABC_123\", RegExUtils.replaceAll(\"ABCabc123\", Pattern.compile(\"[^A-Z0-9]+\"), \"_\"));\r\n    assertEquals(\"ABC123\", RegExUtils.replaceAll(\"ABCabc123\", Pattern.compile(\"[^A-Z0-9]+\"), \"\"));\r\n    assertEquals(\"Lorem_ipsum_dolor_sit\", RegExUtils.replaceAll(\"Lorem ipsum  dolor   sit\", Pattern.compile(\"( +)([a-z]+)\"), \"_$2\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\RegExUtilsTest.java",
  "methodName" : "testReplaceFirst",
  "sourceCode" : "@Test\r\nvoid testReplaceFirst() {\r\n    assertNull(RegExUtils.replaceFirst((CharSequence) null, Pattern.compile(\"\"), \"\"));\r\n    assertEquals(\"any\", RegExUtils.replaceFirst((CharSequence) \"any\", (Pattern) null, \"\"));\r\n    assertEquals(\"any\", RegExUtils.replaceFirst((CharSequence) \"any\", Pattern.compile(\"\"), null));\r\n    assertEquals(\"zzz\", RegExUtils.replaceFirst((CharSequence) \"\", Pattern.compile(\"\"), \"zzz\"));\r\n    assertEquals(\"zzz\", RegExUtils.replaceFirst((CharSequence) \"\", Pattern.compile(\".*\"), \"zzz\"));\r\n    assertEquals(\"\", RegExUtils.replaceFirst((CharSequence) \"\", Pattern.compile(\".+\"), \"zzz\"));\r\n    assertEquals(\"ZZabc\", RegExUtils.replaceFirst((CharSequence) \"abc\", Pattern.compile(\"\"), \"ZZ\"));\r\n    assertEquals(\"z\\n<__>\", RegExUtils.replaceFirst((CharSequence) \"<__>\\n<__>\", Pattern.compile(\"<.*>\"), \"z\"));\r\n    assertEquals(\"z\", RegExUtils.replaceFirst((CharSequence) \"<__>\\n<__>\", Pattern.compile(\"(?s)<.*>\"), \"z\"));\r\n    assertEquals(\"ABC_bc123\", RegExUtils.replaceFirst((CharSequence) \"ABCabc123\", Pattern.compile(\"[a-z]\"), \"_\"));\r\n    assertEquals(\"ABC_123abc\", RegExUtils.replaceFirst((CharSequence) \"ABCabc123abc\", Pattern.compile(\"[^A-Z0-9]+\"), \"_\"));\r\n    assertEquals(\"ABC123abc\", RegExUtils.replaceFirst((CharSequence) \"ABCabc123abc\", Pattern.compile(\"[^A-Z0-9]+\"), \"\"));\r\n    assertEquals(\"Lorem_ipsum  dolor   sit\", RegExUtils.replaceFirst((CharSequence) \"Lorem ipsum  dolor   sit\", Pattern.compile(\"( +)([a-z]+)\"), \"_$2\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\RegExUtilsTest.java",
  "methodName" : "testReplaceFirst_StringStringString",
  "sourceCode" : "@Test\r\nvoid testReplaceFirst_StringStringString() {\r\n    assertNull(RegExUtils.replaceFirst(null, \"\", \"\"));\r\n    assertEquals(\"any\", RegExUtils.replaceFirst(\"any\", (String) null, \"\"));\r\n    assertEquals(\"any\", RegExUtils.replaceFirst(\"any\", \"\", null));\r\n    assertEquals(\"zzz\", RegExUtils.replaceFirst(\"\", \"\", \"zzz\"));\r\n    assertEquals(\"zzz\", RegExUtils.replaceFirst(\"\", \".*\", \"zzz\"));\r\n    assertEquals(\"\", RegExUtils.replaceFirst(\"\", \".+\", \"zzz\"));\r\n    assertEquals(\"ZZabc\", RegExUtils.replaceFirst(\"abc\", \"\", \"ZZ\"));\r\n    assertEquals(\"z\\n<__>\", RegExUtils.replaceFirst(\"<__>\\n<__>\", \"<.*>\", \"z\"));\r\n    assertEquals(\"z\", RegExUtils.replaceFirst(\"<__>\\n<__>\", \"(?s)<.*>\", \"z\"));\r\n    assertEquals(\"ABC_bc123\", RegExUtils.replaceFirst(\"ABCabc123\", \"[a-z]\", \"_\"));\r\n    assertEquals(\"ABC_123abc\", RegExUtils.replaceFirst(\"ABCabc123abc\", \"[^A-Z0-9]+\", \"_\"));\r\n    assertEquals(\"ABC123abc\", RegExUtils.replaceFirst(\"ABCabc123abc\", \"[^A-Z0-9]+\", \"\"));\r\n    assertEquals(\"Lorem_ipsum  dolor   sit\", RegExUtils.replaceFirst(\"Lorem ipsum  dolor   sit\", \"( +)([a-z]+)\", \"_$2\"));\r\n    assertThrows(PatternSyntaxException.class, () -> RegExUtils.replaceFirst(\"any\", \"{badRegexSyntax}\", \"\"), \"RegExUtils.replaceFirst expecting PatternSyntaxException\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\RegExUtilsTest.java",
  "methodName" : "testReplaceFirstDeprecated",
  "sourceCode" : "@Test\r\nvoid testReplaceFirstDeprecated() {\r\n    assertNull(RegExUtils.replaceFirst(null, Pattern.compile(\"\"), \"\"));\r\n    assertEquals(\"any\", RegExUtils.replaceFirst(\"any\", (Pattern) null, \"\"));\r\n    assertEquals(\"any\", RegExUtils.replaceFirst(\"any\", Pattern.compile(\"\"), null));\r\n    assertEquals(\"zzz\", RegExUtils.replaceFirst(\"\", Pattern.compile(\"\"), \"zzz\"));\r\n    assertEquals(\"zzz\", RegExUtils.replaceFirst(\"\", Pattern.compile(\".*\"), \"zzz\"));\r\n    assertEquals(\"\", RegExUtils.replaceFirst(\"\", Pattern.compile(\".+\"), \"zzz\"));\r\n    assertEquals(\"ZZabc\", RegExUtils.replaceFirst(\"abc\", Pattern.compile(\"\"), \"ZZ\"));\r\n    assertEquals(\"z\\n<__>\", RegExUtils.replaceFirst(\"<__>\\n<__>\", Pattern.compile(\"<.*>\"), \"z\"));\r\n    assertEquals(\"z\", RegExUtils.replaceFirst(\"<__>\\n<__>\", Pattern.compile(\"(?s)<.*>\"), \"z\"));\r\n    assertEquals(\"ABC_bc123\", RegExUtils.replaceFirst(\"ABCabc123\", Pattern.compile(\"[a-z]\"), \"_\"));\r\n    assertEquals(\"ABC_123abc\", RegExUtils.replaceFirst(\"ABCabc123abc\", Pattern.compile(\"[^A-Z0-9]+\"), \"_\"));\r\n    assertEquals(\"ABC123abc\", RegExUtils.replaceFirst(\"ABCabc123abc\", Pattern.compile(\"[^A-Z0-9]+\"), \"\"));\r\n    assertEquals(\"Lorem_ipsum  dolor   sit\", RegExUtils.replaceFirst(\"Lorem ipsum  dolor   sit\", Pattern.compile(\"( +)([a-z]+)\"), \"_$2\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\RegExUtilsTest.java",
  "methodName" : "testReplacePattern",
  "sourceCode" : "@Test\r\nvoid testReplacePattern() {\r\n    assertNull(RegExUtils.replacePattern((CharSequence) null, \"\", \"\"));\r\n    assertEquals(\"any\", RegExUtils.replacePattern((CharSequence) \"any\", (String) null, \"\"));\r\n    assertEquals(\"any\", RegExUtils.replacePattern((CharSequence) \"any\", \"\", null));\r\n    assertEquals(\"zzz\", RegExUtils.replacePattern((CharSequence) \"\", \"\", \"zzz\"));\r\n    assertEquals(\"zzz\", RegExUtils.replacePattern((CharSequence) \"\", \".*\", \"zzz\"));\r\n    assertEquals(\"\", RegExUtils.replacePattern((CharSequence) \"\", \".+\", \"zzz\"));\r\n    assertEquals(\"z\", RegExUtils.replacePattern((CharSequence) \"<__>\\n<__>\", \"<.*>\", \"z\"));\r\n    assertEquals(\"z\", RegExUtils.replacePattern((CharSequence) \"<__>\\\\n<__>\", \"<.*>\", \"z\"));\r\n    assertEquals(\"X\", RegExUtils.replacePattern((CharSequence) \"<A>\\nxy\\n</A>\", \"<A>.*</A>\", \"X\"));\r\n    assertEquals(\"ABC___123\", RegExUtils.replacePattern((CharSequence) \"ABCabc123\", \"[a-z]\", \"_\"));\r\n    assertEquals(\"ABC_123\", RegExUtils.replacePattern((CharSequence) \"ABCabc123\", \"[^A-Z0-9]+\", \"_\"));\r\n    assertEquals(\"ABC123\", RegExUtils.replacePattern((CharSequence) \"ABCabc123\", \"[^A-Z0-9]+\", \"\"));\r\n    assertEquals(\"Lorem_ipsum_dolor_sit\", RegExUtils.replacePattern((CharSequence) \"Lorem ipsum  dolor   sit\", \"( +)([a-z]+)\", \"_$2\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\RegExUtilsTest.java",
  "methodName" : "testReplacePatternDeprecated",
  "sourceCode" : "@Test\r\nvoid testReplacePatternDeprecated() {\r\n    assertNull(RegExUtils.replacePattern(null, \"\", \"\"));\r\n    assertEquals(\"any\", RegExUtils.replacePattern(\"any\", (String) null, \"\"));\r\n    assertEquals(\"any\", RegExUtils.replacePattern(\"any\", \"\", null));\r\n    assertEquals(\"zzz\", RegExUtils.replacePattern(\"\", \"\", \"zzz\"));\r\n    assertEquals(\"zzz\", RegExUtils.replacePattern(\"\", \".*\", \"zzz\"));\r\n    assertEquals(\"\", RegExUtils.replacePattern(\"\", \".+\", \"zzz\"));\r\n    assertEquals(\"z\", RegExUtils.replacePattern(\"<__>\\n<__>\", \"<.*>\", \"z\"));\r\n    assertEquals(\"z\", RegExUtils.replacePattern(\"<__>\\\\n<__>\", \"<.*>\", \"z\"));\r\n    assertEquals(\"X\", RegExUtils.replacePattern(\"<A>\\nxy\\n</A>\", \"<A>.*</A>\", \"X\"));\r\n    assertEquals(\"ABC___123\", RegExUtils.replacePattern(\"ABCabc123\", \"[a-z]\", \"_\"));\r\n    assertEquals(\"ABC_123\", RegExUtils.replacePattern(\"ABCabc123\", \"[^A-Z0-9]+\", \"_\"));\r\n    assertEquals(\"ABC123\", RegExUtils.replacePattern(\"ABCabc123\", \"[^A-Z0-9]+\", \"\"));\r\n    assertEquals(\"Lorem_ipsum_dolor_sit\", RegExUtils.replacePattern(\"Lorem ipsum  dolor   sit\", \"( +)([a-z]+)\", \"_$2\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\RuntimeEnvironmentTest.java",
  "methodName" : "testIsContainer",
  "sourceCode" : "@ParameterizedTest\r\n@MethodSource\r\nvoid testIsContainer(final String label, final String environ, final String fileToCreate, final boolean expected) throws IOException {\r\n    assertEquals(expected, doTestInContainer(environ, fileToCreate), label);\r\n}",
  "annotations" : [ "ParameterizedTest" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\SerializationUtilsTest.java",
  "methodName" : "testClone",
  "sourceCode" : "@Test\r\nvoid testClone() {\r\n    final Object test = SerializationUtils.clone(iMap);\r\n    assertNotNull(test);\r\n    assertInstanceOf(HashMap.class, test);\r\n    assertNotSame(test, iMap);\r\n    final HashMap<?, ?> testMap = (HashMap<?, ?>) test;\r\n    assertEquals(iString, testMap.get(\"FOO\"));\r\n    assertNotSame(iString, testMap.get(\"FOO\"));\r\n    assertEquals(iInteger, testMap.get(\"BAR\"));\r\n    assertNotSame(iInteger, testMap.get(\"BAR\"));\r\n    assertEquals(iMap, testMap);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\SerializationUtilsTest.java",
  "methodName" : "testCloneNull",
  "sourceCode" : "@Test\r\nvoid testCloneNull() {\r\n    final Object test = SerializationUtils.clone(null);\r\n    assertNull(test);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\SerializationUtilsTest.java",
  "methodName" : "testCloneSerializableSupplier",
  "sourceCode" : "@Test\r\nvoid testCloneSerializableSupplier() {\r\n    final SerializableSupplier<String> supplier = () -> \"test\";\r\n    assertEquals(\"test\", supplier.get());\r\n    final SerializableSupplier<String> clone = SerializationUtils.clone(supplier);\r\n    assertEquals(\"test\", clone.get());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\SerializationUtilsTest.java",
  "methodName" : "testCloneUnserializable",
  "sourceCode" : "@Test\r\nvoid testCloneUnserializable() {\r\n    iMap.put(new Object(), new Object());\r\n    assertThrows(SerializationException.class, () -> SerializationUtils.clone(iMap));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\SerializationUtilsTest.java",
  "methodName" : "testConstructor",
  "sourceCode" : "@Test\r\nvoid testConstructor() {\r\n    assertNotNull(new SerializationUtils());\r\n    final Constructor<?>[] cons = SerializationUtils.class.getDeclaredConstructors();\r\n    assertEquals(1, cons.length);\r\n    assertTrue(Modifier.isPublic(cons[0].getModifiers()));\r\n    assertTrue(Modifier.isPublic(SerializationUtils.class.getModifiers()));\r\n    assertFalse(Modifier.isFinal(SerializationUtils.class.getModifiers()));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\SerializationUtilsTest.java",
  "methodName" : "testDeserializeBytes",
  "sourceCode" : "@Test\r\nvoid testDeserializeBytes() throws Exception {\r\n    final ByteArrayOutputStream streamReal = new ByteArrayOutputStream();\r\n    try (ObjectOutputStream oos = new ObjectOutputStream(streamReal)) {\r\n        oos.writeObject(iMap);\r\n        oos.flush();\r\n    }\r\n    final Object test = SerializationUtils.deserialize(streamReal.toByteArray());\r\n    assertNotNull(test);\r\n    assertInstanceOf(HashMap.class, test);\r\n    assertNotSame(test, iMap);\r\n    final HashMap<?, ?> testMap = (HashMap<?, ?>) test;\r\n    assertEquals(iString, testMap.get(\"FOO\"));\r\n    assertNotSame(iString, testMap.get(\"FOO\"));\r\n    assertEquals(iInteger, testMap.get(\"BAR\"));\r\n    assertNotSame(iInteger, testMap.get(\"BAR\"));\r\n    assertEquals(iMap, testMap);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\SerializationUtilsTest.java",
  "methodName" : "testDeserializeBytesBadStream",
  "sourceCode" : "@Test\r\nvoid testDeserializeBytesBadStream() {\r\n    assertThrows(SerializationException.class, () -> SerializationUtils.deserialize(new byte[0]));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\SerializationUtilsTest.java",
  "methodName" : "testDeserializeBytesNull",
  "sourceCode" : "@Test\r\nvoid testDeserializeBytesNull() {\r\n    assertNullPointerException(() -> SerializationUtils.deserialize((byte[]) null));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\SerializationUtilsTest.java",
  "methodName" : "testDeserializeBytesOfNull",
  "sourceCode" : "@Test\r\nvoid testDeserializeBytesOfNull() throws Exception {\r\n    final ByteArrayOutputStream streamReal = new ByteArrayOutputStream();\r\n    try (ObjectOutputStream oos = new ObjectOutputStream(streamReal)) {\r\n        oos.writeObject(null);\r\n        oos.flush();\r\n    }\r\n    final Object test = SerializationUtils.deserialize(streamReal.toByteArray());\r\n    assertNull(test);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\SerializationUtilsTest.java",
  "methodName" : "testDeserializeClassCastException",
  "sourceCode" : "@Test\r\nvoid testDeserializeClassCastException() {\r\n    final String value = \"Hello\";\r\n    final byte[] serialized = SerializationUtils.serialize(value);\r\n    assertEquals(value, SerializationUtils.deserialize(serialized));\r\n    assertThrows(ClassCastException.class, () -> {\r\n        // Causes ClassCastException in call site, not in SerializationUtils.deserialize\r\n        // needed to cause Exception\r\n        @SuppressWarnings(\"unused\")\r\n        final Integer i = SerializationUtils.deserialize(serialized);\r\n    });\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\SerializationUtilsTest.java",
  "methodName" : "testDeserializeStream",
  "sourceCode" : "@Test\r\nvoid testDeserializeStream() throws Exception {\r\n    final ByteArrayOutputStream streamReal = new ByteArrayOutputStream();\r\n    try (ObjectOutputStream oos = new ObjectOutputStream(streamReal)) {\r\n        oos.writeObject(iMap);\r\n        oos.flush();\r\n    }\r\n    final ByteArrayInputStream inTest = new ByteArrayInputStream(streamReal.toByteArray());\r\n    final Object test = SerializationUtils.deserialize(inTest);\r\n    assertNotNull(test);\r\n    assertInstanceOf(HashMap.class, test);\r\n    assertNotSame(test, iMap);\r\n    final HashMap<?, ?> testMap = (HashMap<?, ?>) test;\r\n    assertEquals(iString, testMap.get(\"FOO\"));\r\n    assertNotSame(iString, testMap.get(\"FOO\"));\r\n    assertEquals(iInteger, testMap.get(\"BAR\"));\r\n    assertNotSame(iInteger, testMap.get(\"BAR\"));\r\n    assertEquals(iMap, testMap);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\SerializationUtilsTest.java",
  "methodName" : "testDeserializeStreamBadStream",
  "sourceCode" : "@Test\r\nvoid testDeserializeStreamBadStream() {\r\n    assertThrows(SerializationException.class, () -> SerializationUtils.deserialize(new ByteArrayInputStream(new byte[0])));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\SerializationUtilsTest.java",
  "methodName" : "testDeserializeStreamClassNotFound",
  "sourceCode" : "@Test\r\nvoid testDeserializeStreamClassNotFound() throws Exception {\r\n    final ByteArrayOutputStream streamReal = new ByteArrayOutputStream();\r\n    try (ObjectOutputStream oos = new ObjectOutputStream(streamReal)) {\r\n        oos.writeObject(new ClassNotFoundSerialization());\r\n        oos.flush();\r\n    }\r\n    final ByteArrayInputStream inTest = new ByteArrayInputStream(streamReal.toByteArray());\r\n    final SerializationException se = assertThrows(SerializationException.class, () -> SerializationUtils.deserialize(inTest));\r\n    assertEquals(\"java.lang.ClassNotFoundException: \" + CLASS_NOT_FOUND_MESSAGE, se.getMessage());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\SerializationUtilsTest.java",
  "methodName" : "testDeserializeStreamNull",
  "sourceCode" : "@Test\r\nvoid testDeserializeStreamNull() {\r\n    assertNullPointerException(() -> SerializationUtils.deserialize((InputStream) null));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\SerializationUtilsTest.java",
  "methodName" : "testDeserializeStreamOfNull",
  "sourceCode" : "@Test\r\nvoid testDeserializeStreamOfNull() throws Exception {\r\n    final ByteArrayOutputStream streamReal = new ByteArrayOutputStream();\r\n    try (ObjectOutputStream oos = new ObjectOutputStream(streamReal)) {\r\n        oos.writeObject(null);\r\n        oos.flush();\r\n    }\r\n    final ByteArrayInputStream inTest = new ByteArrayInputStream(streamReal.toByteArray());\r\n    final Object test = SerializationUtils.deserialize(inTest);\r\n    assertNull(test);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\SerializationUtilsTest.java",
  "methodName" : "testException",
  "sourceCode" : "@Test\r\nvoid testException() {\r\n    SerializationException serEx;\r\n    final Exception ex = new Exception();\r\n    serEx = new SerializationException();\r\n    assertSame(null, serEx.getMessage());\r\n    assertSame(null, serEx.getCause());\r\n    serEx = new SerializationException(\"Message\");\r\n    assertSame(\"Message\", serEx.getMessage());\r\n    assertSame(null, serEx.getCause());\r\n    serEx = new SerializationException(ex);\r\n    assertEquals(\"java.lang.Exception\", serEx.getMessage());\r\n    assertSame(ex, serEx.getCause());\r\n    serEx = new SerializationException(\"Message\", ex);\r\n    assertSame(\"Message\", serEx.getMessage());\r\n    assertSame(ex, serEx.getCause());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\SerializationUtilsTest.java",
  "methodName" : "testNegativeByteArray",
  "sourceCode" : "@Test\r\nvoid testNegativeByteArray() {\r\n    final byte[] byteArray = { (byte) -84, (byte) -19, (byte) 0, (byte) 5, (byte) 125, (byte) -19, (byte) 0, (byte) 5, (byte) 115, (byte) 114, (byte) -1, (byte) 97, (byte) 122, (byte) -48, (byte) -65 };\r\n    assertThrows(SerializationException.class, () -> SerializationUtils.deserialize(new ByteArrayInputStream(byteArray)));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\SerializationUtilsTest.java",
  "methodName" : "testPrimitiveTypeClassSerialization",
  "sourceCode" : "@Test\r\nvoid testPrimitiveTypeClassSerialization() {\r\n    final Class<?>[] primitiveTypes = { byte.class, short.class, int.class, long.class, float.class, double.class, boolean.class, char.class, void.class };\r\n    for (final Class<?> primitiveType : primitiveTypes) {\r\n        final Class<?> clone = SerializationUtils.clone(primitiveType);\r\n        assertEquals(primitiveType, clone);\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\SerializationUtilsTest.java",
  "methodName" : "testRoundtrip",
  "sourceCode" : "@Test\r\nvoid testRoundtrip() {\r\n    final HashMap<Object, Object> newMap = SerializationUtils.roundtrip(iMap);\r\n    assertEquals(iMap, newMap);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\SerializationUtilsTest.java",
  "methodName" : "testSerializeBytes",
  "sourceCode" : "@Test\r\nvoid testSerializeBytes() throws Exception {\r\n    final byte[] testBytes = SerializationUtils.serialize(iMap);\r\n    final ByteArrayOutputStream streamReal = new ByteArrayOutputStream();\r\n    try (ObjectOutputStream oos = new ObjectOutputStream(streamReal)) {\r\n        oos.writeObject(iMap);\r\n        oos.flush();\r\n    }\r\n    final byte[] realBytes = streamReal.toByteArray();\r\n    assertEquals(testBytes.length, realBytes.length);\r\n    assertArrayEquals(realBytes, testBytes);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\SerializationUtilsTest.java",
  "methodName" : "testSerializeBytesNull",
  "sourceCode" : "@Test\r\nvoid testSerializeBytesNull() throws Exception {\r\n    final byte[] testBytes = SerializationUtils.serialize(null);\r\n    final ByteArrayOutputStream streamReal = new ByteArrayOutputStream();\r\n    try (ObjectOutputStream oos = new ObjectOutputStream(streamReal)) {\r\n        oos.writeObject(null);\r\n        oos.flush();\r\n    }\r\n    final byte[] realBytes = streamReal.toByteArray();\r\n    assertEquals(testBytes.length, realBytes.length);\r\n    assertArrayEquals(realBytes, testBytes);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\SerializationUtilsTest.java",
  "methodName" : "testSerializeBytesUnserializable",
  "sourceCode" : "@Test\r\nvoid testSerializeBytesUnserializable() {\r\n    iMap.put(new Object(), new Object());\r\n    assertThrows(SerializationException.class, () -> SerializationUtils.serialize(iMap));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\SerializationUtilsTest.java",
  "methodName" : "testSerializeIOException",
  "sourceCode" : "@Test\r\nvoid testSerializeIOException() {\r\n    // forces an IOException when the ObjectOutputStream is created, to test not closing the stream\r\n    // in the finally block\r\n    final OutputStream streamTest = new OutputStream() {\r\n\r\n        @Override\r\n        public void write(final int arg0) throws IOException {\r\n            throw new IOException(SERIALIZE_IO_EXCEPTION_MESSAGE);\r\n        }\r\n    };\r\n    final SerializationException e = assertThrows(SerializationException.class, () -> SerializationUtils.serialize(iMap, streamTest));\r\n    assertEquals(\"java.io.IOException: \" + SERIALIZE_IO_EXCEPTION_MESSAGE, e.getMessage());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\SerializationUtilsTest.java",
  "methodName" : "testSerializeStream",
  "sourceCode" : "@Test\r\nvoid testSerializeStream() throws Exception {\r\n    final ByteArrayOutputStream streamTest = new ByteArrayOutputStream();\r\n    SerializationUtils.serialize(iMap, streamTest);\r\n    final ByteArrayOutputStream streamReal = new ByteArrayOutputStream();\r\n    try (ObjectOutputStream oos = new ObjectOutputStream(streamReal)) {\r\n        oos.writeObject(iMap);\r\n        oos.flush();\r\n    }\r\n    final byte[] testBytes = streamTest.toByteArray();\r\n    final byte[] realBytes = streamReal.toByteArray();\r\n    assertEquals(testBytes.length, realBytes.length);\r\n    assertArrayEquals(realBytes, testBytes);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\SerializationUtilsTest.java",
  "methodName" : "testSerializeStreamNullNull",
  "sourceCode" : "@Test\r\nvoid testSerializeStreamNullNull() {\r\n    assertNullPointerException(() -> SerializationUtils.serialize(null, null));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\SerializationUtilsTest.java",
  "methodName" : "testSerializeStreamNullObj",
  "sourceCode" : "@Test\r\nvoid testSerializeStreamNullObj() throws Exception {\r\n    final ByteArrayOutputStream streamTest = new ByteArrayOutputStream();\r\n    SerializationUtils.serialize(null, streamTest);\r\n    final ByteArrayOutputStream streamReal = new ByteArrayOutputStream();\r\n    try (ObjectOutputStream oos = new ObjectOutputStream(streamReal)) {\r\n        oos.writeObject(null);\r\n        oos.flush();\r\n    }\r\n    final byte[] testBytes = streamTest.toByteArray();\r\n    final byte[] realBytes = streamReal.toByteArray();\r\n    assertEquals(testBytes.length, realBytes.length);\r\n    assertArrayEquals(realBytes, testBytes);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\SerializationUtilsTest.java",
  "methodName" : "testSerializeStreamObjNull",
  "sourceCode" : "@Test\r\nvoid testSerializeStreamObjNull() {\r\n    assertNullPointerException(() -> SerializationUtils.serialize(iMap, null));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\SerializationUtilsTest.java",
  "methodName" : "testSerializeStreamUnserializable",
  "sourceCode" : "@Test\r\nvoid testSerializeStreamUnserializable() {\r\n    final ByteArrayOutputStream streamTest = new ByteArrayOutputStream();\r\n    iMap.put(new Object(), new Object());\r\n    assertThrows(SerializationException.class, () -> SerializationUtils.serialize(iMap, streamTest));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\stream\\FailableStreamTest.java",
  "methodName" : "testFailableStreamOfArray",
  "sourceCode" : "@Test\r\nvoid testFailableStreamOfArray() {\r\n    assertArrayEquals(new String[] {}, toArray());\r\n    assertArrayEquals(new String[] { \"a\" }, toArray(\"A\"));\r\n    assertArrayEquals(new String[] { \"a\", \"b\" }, toArray(\"A\", \"B\"));\r\n    assertArrayEquals(new String[] { \"a\", \"b\", \"c\" }, toArray(\"A\", \"B\", \"C\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\stream\\FailableStreamTest.java",
  "methodName" : "testFailableStreamOfCollection",
  "sourceCode" : "@Test\r\nvoid testFailableStreamOfCollection() {\r\n    assertArrayEquals(new String[] {}, toArray());\r\n    assertArrayEquals(new String[] { \"a\" }, toArray(Arrays.asList(\"A\")));\r\n    assertArrayEquals(new String[] { \"a\", \"b\" }, toArray(Arrays.asList(\"A\", \"B\")));\r\n    assertArrayEquals(new String[] { \"a\", \"b\", \"c\" }, toArray(Arrays.asList(\"A\", \"B\", \"C\")));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\stream\\FailableStreamTest.java",
  "methodName" : "testFailableStreamOfMap",
  "sourceCode" : "@Test\r\nvoid testFailableStreamOfMap() {\r\n    final Map<String, AtomicInteger> map = new LinkedHashMap<>();\r\n    assertArrayEquals(new Integer[] {}, toArrayMap(map));\r\n    map.put(\"a\", new AtomicInteger(1));\r\n    assertArrayEquals(new Integer[] { 2 }, toArrayMap(map));\r\n    map.put(\"b\", new AtomicInteger(2));\r\n    assertArrayEquals(new Integer[] { 3, 3 }, toArrayMap(map));\r\n    map.put(\"c\", new AtomicInteger(3));\r\n    assertArrayEquals(new Integer[] { 4, 4, 4 }, toArrayMap(map));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\stream\\IntStreamsTest.java",
  "methodName" : "testDeprecatedConstructor",
  "sourceCode" : "@SuppressWarnings(\"deprecation\")\r\n@Test\r\nvoid testDeprecatedConstructor() {\r\n    assertNotNull(new IntStreams().toString());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\stream\\IntStreamsTest.java",
  "methodName" : "testOfArray",
  "sourceCode" : "@Test\r\nvoid testOfArray() {\r\n    assertEquals(0, IntStreams.of((int[]) null).count());\r\n    assertEquals(1, IntStreams.of(1).count());\r\n    assertEquals(2, IntStreams.of(1, 2).count());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\stream\\IntStreamsTest.java",
  "methodName" : "testRange",
  "sourceCode" : "@Test\r\nvoid testRange() {\r\n    assertArrayEquals(new int[] { 0, 1 }, IntStreams.range(2).toArray());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\stream\\IntStreamsTest.java",
  "methodName" : "testRangeClosed",
  "sourceCode" : "@Test\r\nvoid testRangeClosed() {\r\n    assertArrayEquals(new int[] { 0, 1, 2 }, IntStreams.rangeClosed(2).toArray());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\stream\\LangCollectorsTest.java",
  "methodName" : "testCollectStrings1Arg",
  "sourceCode" : "@Test\r\nvoid testCollectStrings1Arg() {\r\n    assertEquals(\"\", join1());\r\n    assertEquals(\"1\", join1(\"1\"));\r\n    assertEquals(\"1-2\", join1(\"1\", \"2\"));\r\n    assertEquals(\"1-2-3\", join1(\"1\", \"2\", \"3\"));\r\n    assertEquals(\"1-null-3\", join1(\"1\", null, \"3\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\stream\\LangCollectorsTest.java",
  "methodName" : "testJoinCollectNonStrings0Arg",
  "sourceCode" : "@Test\r\nvoid testJoinCollectNonStrings0Arg() {\r\n    assertEquals(\"\", join0());\r\n    assertEquals(\"1\", join0(_1L));\r\n    assertEquals(\"12\", join0(_1L, _2L));\r\n    assertEquals(\"123\", join0(_1L, _2L, _3L));\r\n    assertEquals(\"1null3\", join0(_1L, null, _3L));\r\n    assertEquals(\"12\", join0(new AtomicLong(1), new AtomicLong(2)));\r\n    assertEquals(\"12\", join0(new Fixture(1), new Fixture(2)));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\stream\\LangCollectorsTest.java",
  "methodName" : "testJoinCollectNonStrings1Arg",
  "sourceCode" : "@Test\r\nvoid testJoinCollectNonStrings1Arg() {\r\n    assertEquals(\"\", join1());\r\n    assertEquals(\"1\", join1(_1L));\r\n    assertEquals(\"1-2\", join1(_1L, _2L));\r\n    assertEquals(\"1-2-3\", join1(_1L, _2L, _3L));\r\n    assertEquals(\"1-null-3\", join1(_1L, null, _3L));\r\n    assertEquals(\"1-2\", join1(new AtomicLong(1), new AtomicLong(2)));\r\n    assertEquals(\"1-2\", join1(new Fixture(1), new Fixture(2)));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\stream\\LangCollectorsTest.java",
  "methodName" : "testJoinCollectNonStrings3Args",
  "sourceCode" : "@Test\r\nvoid testJoinCollectNonStrings3Args() {\r\n    assertEquals(\"<>\", join3());\r\n    assertEquals(\"<1>\", join3(_1L));\r\n    assertEquals(\"<1-2>\", join3(_1L, _2L));\r\n    assertEquals(\"<1-2-3>\", join3(_1L, _2L, _3L));\r\n    assertEquals(\"<1-null-3>\", join3(_1L, null, _3L));\r\n    assertEquals(\"<1-2>\", join3(new AtomicLong(1), new AtomicLong(2)));\r\n    assertEquals(\"<1-2>\", join3(new Fixture(1), new Fixture(2)));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\stream\\LangCollectorsTest.java",
  "methodName" : "testJoinCollectNonStrings4Args",
  "sourceCode" : "@Test\r\nvoid testJoinCollectNonStrings4Args() {\r\n    assertEquals(\"<>\", join4());\r\n    assertEquals(\"<1>\", join4(_1L));\r\n    assertEquals(\"<1-2>\", join4(_1L, _2L));\r\n    assertEquals(\"<1-2-3>\", join4(_1L, _2L, _3L));\r\n    assertEquals(\"<1-null-3>\", join4(_1L, null, _3L));\r\n    assertEquals(\"<1-NUL-3>\", join4NullToString(_1L, null, _3L));\r\n    assertEquals(\"<1-2>\", join4(new AtomicLong(1), new AtomicLong(2)));\r\n    assertEquals(\"<1-2>\", join4(new Fixture(1), new Fixture(2)));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\stream\\LangCollectorsTest.java",
  "methodName" : "testJoinCollectNullArgs",
  "sourceCode" : "@Test\r\nvoid testJoinCollectNullArgs() {\r\n    assertEquals(\"\", join0((Object[]) null));\r\n    assertEquals(\"\", join1((Object[]) null));\r\n    assertEquals(\"<>\", join3((Object[]) null));\r\n    assertEquals(\"<>\", join4NullToString((Object[]) null));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\stream\\LangCollectorsTest.java",
  "methodName" : "testJoinCollectStrings0Arg",
  "sourceCode" : "@Test\r\nvoid testJoinCollectStrings0Arg() {\r\n    assertEquals(\"\", join0());\r\n    assertEquals(\"1\", join0(\"1\"));\r\n    assertEquals(\"12\", join0(\"1\", \"2\"));\r\n    assertEquals(\"123\", join0(\"1\", \"2\", \"3\"));\r\n    assertEquals(\"1null3\", join0(\"1\", null, \"3\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\stream\\LangCollectorsTest.java",
  "methodName" : "testJoinCollectStrings3Args",
  "sourceCode" : "@Test\r\nvoid testJoinCollectStrings3Args() {\r\n    assertEquals(\"<>\", join3());\r\n    assertEquals(\"<1>\", join3(\"1\"));\r\n    assertEquals(\"<1-2>\", join3(\"1\", \"2\"));\r\n    assertEquals(\"<1-2-3>\", join3(\"1\", \"2\", \"3\"));\r\n    assertEquals(\"<1-null-3>\", join3(\"1\", null, \"3\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\stream\\LangCollectorsTest.java",
  "methodName" : "testJoinCollectStrings4Args",
  "sourceCode" : "@Test\r\nvoid testJoinCollectStrings4Args() {\r\n    assertEquals(\"<>\", join4());\r\n    assertEquals(\"<1>\", join4(\"1\"));\r\n    assertEquals(\"<1-2>\", join4(\"1\", \"2\"));\r\n    assertEquals(\"<1-2-3>\", join4(\"1\", \"2\", \"3\"));\r\n    assertEquals(\"<1-null-3>\", join4(\"1\", null, \"3\"));\r\n    assertEquals(\"<1-NUL-3>\", join4NullToString(\"1\", null, \"3\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\stream\\LangCollectorsTest.java",
  "methodName" : "testJoiningNonStrings0Arg",
  "sourceCode" : "@Test\r\nvoid testJoiningNonStrings0Arg() {\r\n    // Stream.of()\r\n    assertEquals(\"\", Stream.of().collect(JOINING_0));\r\n    assertEquals(\"1\", Stream.of(_1L).collect(JOINING_0));\r\n    assertEquals(\"12\", Stream.of(_1L, _2L).collect(JOINING_0));\r\n    assertEquals(\"123\", Stream.of(_1L, _2L, _3L).collect(JOINING_0));\r\n    assertEquals(\"1null3\", Stream.of(_1L, null, _3L).collect(JOINING_0));\r\n    assertEquals(\"12\", Stream.of(new AtomicLong(1), new AtomicLong(2)).collect(JOINING_0));\r\n    assertEquals(\"12\", Stream.of(new Fixture(1), new Fixture(2)).collect(JOINING_0));\r\n    // Arrays.stream()\r\n    assertEquals(\"\", Arrays.stream(new Object[] {}).collect(JOINING_0));\r\n    assertEquals(\"1\", Arrays.stream(new Long[] { _1L }).collect(JOINING_0));\r\n    assertEquals(\"12\", Arrays.stream(new Long[] { _1L, _2L }).collect(JOINING_0));\r\n    assertEquals(\"123\", Arrays.stream(new Long[] { _1L, _2L, _3L }).collect(JOINING_0));\r\n    assertEquals(\"1null3\", Arrays.stream(new Long[] { _1L, null, _3L }).collect(JOINING_0));\r\n    assertEquals(\"12\", Arrays.stream(new AtomicLong[] { new AtomicLong(1), new AtomicLong(2) }).collect(JOINING_0));\r\n    assertEquals(\"12\", Arrays.stream(new Fixture[] { new Fixture(1), new Fixture(2) }).collect(JOINING_0));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\stream\\LangCollectorsTest.java",
  "methodName" : "testJoiningNonStrings1Arg",
  "sourceCode" : "@Test\r\nvoid testJoiningNonStrings1Arg() {\r\n    // Stream.of()\r\n    assertEquals(\"\", Stream.of().collect(JOINING_1));\r\n    assertEquals(\"1\", Stream.of(_1L).collect(JOINING_1));\r\n    assertEquals(\"1-2\", Stream.of(_1L, _2L).collect(JOINING_1));\r\n    assertEquals(\"1-2-3\", Stream.of(_1L, _2L, _3L).collect(JOINING_1));\r\n    assertEquals(\"1-null-3\", Stream.of(_1L, null, _3L).collect(JOINING_1));\r\n    assertEquals(\"1-2\", Stream.of(new AtomicLong(1), new AtomicLong(2)).collect(JOINING_1));\r\n    assertEquals(\"1-2\", Stream.of(new Fixture(1), new Fixture(2)).collect(JOINING_1));\r\n    // Arrays.stream()\r\n    assertEquals(\"\", Arrays.stream(new Object[] {}).collect(JOINING_1));\r\n    assertEquals(\"1\", Arrays.stream(new Long[] { _1L }).collect(JOINING_1));\r\n    assertEquals(\"1-2\", Arrays.stream(new Long[] { _1L, _2L }).collect(JOINING_1));\r\n    assertEquals(\"1-2-3\", Arrays.stream(new Long[] { _1L, _2L, _3L }).collect(JOINING_1));\r\n    assertEquals(\"1-null-3\", Arrays.stream(new Long[] { _1L, null, _3L }).collect(JOINING_1));\r\n    assertEquals(\"1-2\", Arrays.stream(new AtomicLong[] { new AtomicLong(1), new AtomicLong(2) }).collect(JOINING_1));\r\n    assertEquals(\"1-2\", Arrays.stream(new Fixture[] { new Fixture(1), new Fixture(2) }).collect(JOINING_1));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\stream\\LangCollectorsTest.java",
  "methodName" : "testJoiningNonStrings3Args",
  "sourceCode" : "@Test\r\nvoid testJoiningNonStrings3Args() {\r\n    assertEquals(\"<>\", Stream.of().collect(JOINING_3));\r\n    assertEquals(\"<1>\", Stream.of(_1L).collect(JOINING_3));\r\n    assertEquals(\"<1-2>\", Stream.of(_1L, _2L).collect(JOINING_3));\r\n    assertEquals(\"<1-2-3>\", Stream.of(_1L, _2L, _3L).collect(JOINING_3));\r\n    assertEquals(\"<1-null-3>\", Stream.of(_1L, null, _3L).collect(JOINING_3));\r\n    assertEquals(\"<1-2>\", Stream.of(new AtomicLong(1), new AtomicLong(2)).collect(JOINING_3));\r\n    assertEquals(\"<1-2>\", Stream.of(new Fixture(1), new Fixture(2)).collect(JOINING_3));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\stream\\LangCollectorsTest.java",
  "methodName" : "testJoiningNonStrings4Args",
  "sourceCode" : "@Test\r\nvoid testJoiningNonStrings4Args() {\r\n    assertEquals(\"<>\", Stream.of().collect(JOINING_4));\r\n    assertEquals(\"<1>\", Stream.of(_1L).collect(JOINING_4));\r\n    assertEquals(\"<1-2>\", Stream.of(_1L, _2L).collect(JOINING_4));\r\n    assertEquals(\"<1-2-3>\", Stream.of(_1L, _2L, _3L).collect(JOINING_4));\r\n    assertEquals(\"<1-null-3>\", Stream.of(_1L, null, _3L).collect(JOINING_4));\r\n    assertEquals(\"<1-NUL-3>\", Stream.of(_1L, null, _3L).collect(JOINING_4_NUL));\r\n    assertEquals(\"<1-2>\", Stream.of(new AtomicLong(1), new AtomicLong(2)).collect(JOINING_4));\r\n    assertEquals(\"<1-2>\", Stream.of(new Fixture(1), new Fixture(2)).collect(JOINING_4));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\stream\\LangCollectorsTest.java",
  "methodName" : "testJoiningStrings0Arg",
  "sourceCode" : "@Test\r\nvoid testJoiningStrings0Arg() {\r\n    assertEquals(\"\", Stream.of().collect(JOINING_0));\r\n    assertEquals(\"1\", Stream.of(\"1\").collect(JOINING_0));\r\n    assertEquals(\"12\", Stream.of(\"1\", \"2\").collect(JOINING_0));\r\n    assertEquals(\"123\", Stream.of(\"1\", \"2\", \"3\").collect(JOINING_0));\r\n    assertEquals(\"1null3\", Stream.of(\"1\", null, \"3\").collect(JOINING_0));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\stream\\LangCollectorsTest.java",
  "methodName" : "testJoiningStrings1Arg",
  "sourceCode" : "@Test\r\nvoid testJoiningStrings1Arg() {\r\n    assertEquals(\"\", Stream.of().collect(JOINING_1));\r\n    assertEquals(\"1\", Stream.of(\"1\").collect(JOINING_1));\r\n    assertEquals(\"1-2\", Stream.of(\"1\", \"2\").collect(JOINING_1));\r\n    assertEquals(\"1-2-3\", Stream.of(\"1\", \"2\", \"3\").collect(JOINING_1));\r\n    assertEquals(\"1-null-3\", Stream.of(\"1\", null, \"3\").collect(JOINING_1));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\stream\\LangCollectorsTest.java",
  "methodName" : "testJoiningStrings3Args",
  "sourceCode" : "@Test\r\nvoid testJoiningStrings3Args() {\r\n    assertEquals(\"<>\", Stream.of().collect(JOINING_3));\r\n    assertEquals(\"<1>\", Stream.of(\"1\").collect(JOINING_3));\r\n    assertEquals(\"<1-2>\", Stream.of(\"1\", \"2\").collect(JOINING_3));\r\n    assertEquals(\"<1-2-3>\", Stream.of(\"1\", \"2\", \"3\").collect(JOINING_3));\r\n    assertEquals(\"<1-null-3>\", Stream.of(\"1\", null, \"3\").collect(JOINING_3));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\stream\\LangCollectorsTest.java",
  "methodName" : "testJoiningStrings4Args",
  "sourceCode" : "@Test\r\nvoid testJoiningStrings4Args() {\r\n    assertEquals(\"<>\", Stream.of().collect(JOINING_4));\r\n    assertEquals(\"<1>\", Stream.of(\"1\").collect(JOINING_4));\r\n    assertEquals(\"<1-2>\", Stream.of(\"1\", \"2\").collect(JOINING_4));\r\n    assertEquals(\"<1-2-3>\", Stream.of(\"1\", \"2\", \"3\").collect(JOINING_4));\r\n    assertEquals(\"<1-null-3>\", Stream.of(\"1\", null, \"3\").collect(JOINING_4));\r\n    assertEquals(\"<1-NUL-3>\", Stream.of(\"1\", null, \"3\").collect(JOINING_4_NUL));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\stream\\StreamsTest.java",
  "methodName" : "simpleStreamFilterFailing",
  "sourceCode" : "@TestFactory\r\npublic Stream<DynamicTest> simpleStreamFilterFailing() {\r\n    final List<String> input = Arrays.asList(\"1\", \"2\", \"3\", \"4\", \"5\", \"6\");\r\n    final List<Integer> output = Failable.stream(input).map(Integer::valueOf).filter(asIntPredicate(null)).collect(Collectors.toList());\r\n    assertEvenNumbers(output);\r\n    return Stream.of(dynamicTest(\"IllegalArgumentException\", () -> {\r\n        final IllegalArgumentException iae = new IllegalArgumentException(\"Invalid argument: \" + 5);\r\n        final Executable testMethod = () -> Failable.stream(input).map(Integer::valueOf).filter(asIntPredicate(iae)).collect(Collectors.toList());\r\n        final IllegalArgumentException thrown = assertIllegalArgumentException(testMethod);\r\n        assertEquals(\"Invalid argument: \" + 5, thrown.getMessage());\r\n    }), dynamicTest(\"OutOfMemoryError\", () -> {\r\n        final OutOfMemoryError oome = new OutOfMemoryError();\r\n        final Executable testMethod = () -> Failable.stream(input).map(Integer::valueOf).filter(asIntPredicate(oome)).collect(Collectors.toList());\r\n        final OutOfMemoryError thrown = assertThrows(OutOfMemoryError.class, testMethod);\r\n        assertNull(thrown.getMessage());\r\n    }), dynamicTest(\"SAXException\", () -> {\r\n        final SAXException se = new SAXException();\r\n        final Executable testMethod = () -> Failable.stream(input).map(Integer::valueOf).filter(asIntPredicate(se)).collect(Collectors.toList());\r\n        final UndeclaredThrowableException thrown = assertThrows(UndeclaredThrowableException.class, testMethod);\r\n        assertNull(thrown.getMessage());\r\n        assertEquals(se, thrown.getCause());\r\n    }));\r\n}",
  "annotations" : [ "TestFactory" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\stream\\StreamsTest.java",
  "methodName" : "simpleStreamForEachFailing",
  "sourceCode" : "@TestFactory\r\npublic Stream<DynamicTest> simpleStreamForEachFailing() {\r\n    final List<String> input = Arrays.asList(\"1\", \"2\", \"3\", \"4\", \"5\", \"6\");\r\n    return Stream.of(dynamicTest(\"IllegalArgumentException\", () -> {\r\n        final IllegalArgumentException ise = new IllegalArgumentException();\r\n        final Executable testMethod = () -> Failable.stream(input).forEach(asIntConsumer(ise));\r\n        final IllegalArgumentException thrown = assertIllegalArgumentException(testMethod);\r\n        assertNull(thrown.getMessage());\r\n    }), dynamicTest(\"OutOfMemoryError\", () -> {\r\n        final OutOfMemoryError oome = new OutOfMemoryError();\r\n        final Executable oomeTestMethod = () -> Failable.stream(input).forEach(asIntConsumer(oome));\r\n        final OutOfMemoryError oomeThrown = assertThrows(OutOfMemoryError.class, oomeTestMethod);\r\n        assertNull(oomeThrown.getMessage());\r\n    }), dynamicTest(\"SAXException\", () -> {\r\n        final SAXException se = new SAXException();\r\n        final Executable seTestMethod = () -> Failable.stream(input).forEach(asIntConsumer(se));\r\n        final UndeclaredThrowableException seThrown = assertThrows(UndeclaredThrowableException.class, seTestMethod);\r\n        assertNull(seThrown.getMessage());\r\n        assertEquals(se, seThrown.getCause());\r\n    }));\r\n}",
  "annotations" : [ "TestFactory" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\stream\\StreamsTest.java",
  "methodName" : "testArrayCollectorCombiner",
  "sourceCode" : "@Test\r\nvoid testArrayCollectorCombiner() {\r\n    final String[] expected = { \"A1\", \"B1\" };\r\n    assertArrayEquals(expected, Stream.of(\"A\", \"B\").collect(Collectors.mapping(s -> s + \"1\", Streams.toArray(String.class))));\r\n    assertArrayEquals(expected, Streams.failableStream(\"A\", \"B\").collect(Collectors.mapping(s -> s + \"1\", Streams.toArray(String.class))));\r\n    final List<String> left = new ArrayList<>();\r\n    left.add(\"a\");\r\n    assertEquals(Arrays.asList(\"a\", \"b\", \"c\"), Streams.toArray(String.class).combiner().apply(left, Arrays.asList(\"b\", \"c\")));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\stream\\StreamsTest.java",
  "methodName" : "testAssertNotTerminated",
  "sourceCode" : "@Test\r\nvoid testAssertNotTerminated() {\r\n    final FailableStream<String> stream = Streams.failableStream(\"A\", \"B\");\r\n    assertTrue(stream.allMatch(s -> s.length() == 1));\r\n    assertThrows(IllegalStateException.class, () -> stream.allMatch(null));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\stream\\StreamsTest.java",
  "methodName" : "testDeprefcatedCopnstructor",
  "sourceCode" : "@SuppressWarnings(\"deprecation\")\r\n@Test\r\nvoid testDeprefcatedCopnstructor() {\r\n    assertNotNull(new Streams().toString());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\stream\\StreamsTest.java",
  "methodName" : "testFailableAllMatch",
  "sourceCode" : "@Test\r\nvoid testFailableAllMatch() {\r\n    assertTrue(Streams.failableStream(\"A\", \"B\").allMatch(s -> s.length() == 1));\r\n    assertFalse(Streams.failableStream(\"A\", \"B\").allMatch(s -> s.length() == 2));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\stream\\StreamsTest.java",
  "methodName" : "testFailableAnyMatch",
  "sourceCode" : "@Test\r\nvoid testFailableAnyMatch() {\r\n    assertTrue(Streams.failableStream(\"A\", \"B\").anyMatch(s -> s.length() == 1));\r\n    assertTrue(Streams.failableStream(\"A\", \"BC\").anyMatch(s -> s.length() == 1));\r\n    assertFalse(Streams.failableStream(\"A\", \"B\").anyMatch(s -> s.length() == 2));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\stream\\StreamsTest.java",
  "methodName" : "testFailableCollect",
  "sourceCode" : "@Test\r\nvoid testFailableCollect() {\r\n    assertEquals(Arrays.asList(\"A\", \"B\"), Streams.failableStream(\"A\", \"B\").collect(ArrayList::new, ArrayList::add, ArrayList::addAll));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\stream\\StreamsTest.java",
  "methodName" : "testFailableReduce",
  "sourceCode" : "@Test\r\nvoid testFailableReduce() {\r\n    assertEquals(3, Streams.failableStream(1, 2).reduce(0, (a, b) -> a + b));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\stream\\StreamsTest.java",
  "methodName" : "testFailableStream",
  "sourceCode" : "@Test\r\nvoid testFailableStream() {\r\n    assertEquals(1, Streams.failableStream(1).collect(Collectors.toList()).size());\r\n    assertEquals(0, Streams.failableStream(Stream.empty()).collect(Collectors.toList()).size());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\stream\\StreamsTest.java",
  "methodName" : "testInstanceOfStream",
  "sourceCode" : "@Test\r\nvoid testInstanceOfStream() {\r\n    assertEquals(2, Streams.instancesOf(String.class, Arrays.asList(\"A\", \"B\")).collect(Collectors.toList()).size());\r\n    assertEquals(2, Streams.instancesOf(String.class, Arrays.asList(null, \"A\", null, \"B\", null)).collect(Collectors.toList()).size());\r\n    assertEquals(0, Streams.instancesOf(String.class, Arrays.asList(null, null)).collect(Collectors.toList()).size());\r\n    //\r\n    final List<Object> objects = Arrays.asList(\"A\", \"B\");\r\n    assertEquals(2, Streams.instancesOf(String.class, objects).collect(Collectors.toList()).size());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\stream\\StreamsTest.java",
  "methodName" : "testNonNull",
  "sourceCode" : "@Test\r\nvoid testNonNull() {\r\n    assertEquals(0, Streams.nonNull().collect(Collectors.toList()).size());\r\n    assertEquals(0, Streams.nonNull((Stream<?>) null).collect(Collectors.toList()).size());\r\n    assertEquals(1, Streams.nonNull(\"A\").collect(Collectors.toList()).size());\r\n    assertEquals(1, Streams.nonNull(\"A\", null).collect(Collectors.toList()).size());\r\n    assertEquals(1, Streams.nonNull(null, \"A\").collect(Collectors.toList()).size());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\stream\\StreamsTest.java",
  "methodName" : "testNullSafeStreamNotNull",
  "sourceCode" : "@Test\r\nvoid testNullSafeStreamNotNull() {\r\n    assertEquals(2, Streams.nonNull(Arrays.asList(\"A\", \"B\")).collect(Collectors.toList()).size());\r\n    assertEquals(2, Streams.nonNull(Arrays.asList(null, \"A\", null, \"B\", null)).collect(Collectors.toList()).size());\r\n    assertEquals(0, Streams.nonNull(Arrays.asList(null, null)).collect(Collectors.toList()).size());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\stream\\StreamsTest.java",
  "methodName" : "testNullSafeStreamNull",
  "sourceCode" : "@Test\r\nvoid testNullSafeStreamNull() {\r\n    final List<String> input = null;\r\n    assertEquals(0, Streams.nonNull(input).collect(Collectors.toList()).size());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\stream\\StreamsTest.java",
  "methodName" : "testOfArray",
  "sourceCode" : "@Test\r\nvoid testOfArray() {\r\n    assertEquals(0, Streams.of((Object[]) null).count());\r\n    assertEquals(1, Streams.of(\"foo\").count());\r\n    assertEquals(2, Streams.of(\"foo\", \"bar\").count());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\stream\\StreamsTest.java",
  "methodName" : "testOfCollectionNotNull",
  "sourceCode" : "@Test\r\nvoid testOfCollectionNotNull() {\r\n    assertEquals(2, Streams.of(Arrays.asList(\"A\", \"B\")).collect(Collectors.toList()).size());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\stream\\StreamsTest.java",
  "methodName" : "testOfCollectionNull",
  "sourceCode" : "@Test\r\nvoid testOfCollectionNull() {\r\n    final List<String> input = null;\r\n    assertEquals(0, Streams.of(input).collect(Collectors.toList()).size());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\stream\\StreamsTest.java",
  "methodName" : "testOfEnumeration",
  "sourceCode" : "@Test\r\nvoid testOfEnumeration() {\r\n    final Hashtable<String, Integer> table = new Hashtable<>();\r\n    assertEquals(0, Streams.of(table.elements()).count());\r\n    table.put(\"One\", 1);\r\n    assertEquals(1, Streams.of(table.elements()).count());\r\n    table.put(\"Two\", 2);\r\n    assertEquals(2, Streams.of(table.elements()).count());\r\n    final List<String> collect = Streams.of(table.keys()).collect(Collectors.toList());\r\n    assertTrue(collect.contains(\"One\"));\r\n    assertTrue(collect.contains(\"Two\"));\r\n    assertEquals(2, collect.size());\r\n    assertFalse(Streams.of(table.keys()).filter(String::isEmpty).findFirst().isPresent());\r\n    assertEquals(Arrays.asList(\"OneOne\", \"TwoTwo\"), Streams.of(table.keys()).map(s -> s + s).collect(Collectors.toList()));\r\n    assertFalse(Streams.of(new Hashtable<String, Object>().keys()).filter(String::isEmpty).findFirst().isPresent());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\stream\\StreamsTest.java",
  "methodName" : "testOfIterableNotNull",
  "sourceCode" : "@Test\r\nvoid testOfIterableNotNull() {\r\n    assertEquals(2, Streams.of((Iterable<String>) Arrays.asList(\"A\", \"B\")).collect(Collectors.toList()).size());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\stream\\StreamsTest.java",
  "methodName" : "testOfIterableNull",
  "sourceCode" : "@Test\r\nvoid testOfIterableNull() {\r\n    final Iterable<String> input = null;\r\n    assertEquals(0, Streams.of(input).collect(Collectors.toList()).size());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\stream\\StreamsTest.java",
  "methodName" : "testOfIteratorNotNull",
  "sourceCode" : "@Test\r\nvoid testOfIteratorNotNull() {\r\n    assertEquals(2, Streams.of(Arrays.asList(\"A\", \"B\").iterator()).collect(Collectors.toList()).size());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\stream\\StreamsTest.java",
  "methodName" : "testOfIteratorNull",
  "sourceCode" : "@Test\r\nvoid testOfIteratorNull() {\r\n    final Iterator<String> input = null;\r\n    assertEquals(0, Streams.of(input).collect(Collectors.toList()).size());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\stream\\StreamsTest.java",
  "methodName" : "testOfVarArg",
  "sourceCode" : "@Test\r\nvoid testOfVarArg() {\r\n    assertEquals(1, Streams.of(1).collect(Collectors.toList()).size());\r\n    assertEquals(2, Streams.of(1, 2).collect(Collectors.toList()).size());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\stream\\StreamsTest.java",
  "methodName" : "testSimpleStreamFilter",
  "sourceCode" : "@Test\r\nvoid testSimpleStreamFilter() {\r\n    final List<String> input = Arrays.asList(\"1\", \"2\", \"3\", \"4\", \"5\", \"6\");\r\n    final List<Integer> output = Failable.stream(input).map(Integer::valueOf).filter(i -> i.intValue() % 2 == 0).collect(Collectors.toList());\r\n    assertEvenNumbers(output);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\stream\\StreamsTest.java",
  "methodName" : "testSimpleStreamForEach",
  "sourceCode" : "@Test\r\nvoid testSimpleStreamForEach() {\r\n    final List<String> input = Arrays.asList(\"1\", \"2\", \"3\", \"4\", \"5\", \"6\");\r\n    final List<Integer> output = new ArrayList<>();\r\n    Failable.stream(input).forEach(s -> output.add(Integer.valueOf(s)));\r\n    assertEquals(6, output.size());\r\n    for (int i = 0; i < 6; i++) {\r\n        assertEquals(i + 1, output.get(i).intValue());\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\stream\\StreamsTest.java",
  "methodName" : "testSimpleStreamMap",
  "sourceCode" : "@Test\r\nvoid testSimpleStreamMap() {\r\n    final List<String> input = Arrays.asList(\"1\", \"2\", \"3\", \"4\", \"5\", \"6\");\r\n    final List<Integer> output = Failable.stream(input).map(Integer::valueOf).collect(Collectors.toList());\r\n    assertEquals(6, output.size());\r\n    for (int i = 0; i < 6; i++) {\r\n        assertEquals(i + 1, output.get(i).intValue());\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\stream\\StreamsTest.java",
  "methodName" : "testSimpleStreamMapFailing",
  "sourceCode" : "@Test\r\nvoid testSimpleStreamMapFailing() {\r\n    final List<String> input = Arrays.asList(\"1\", \"2\", \"3\", \"4 \", \"5\", \"6\");\r\n    final Executable testMethod = () -> Failable.stream(input).map(Integer::valueOf).collect(Collectors.toList());\r\n    final NumberFormatException thrown = assertThrows(NumberFormatException.class, testMethod);\r\n    assertEquals(\"For input string: \\\"4 \\\"\", thrown.getMessage());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\stream\\StreamsTest.java",
  "methodName" : "testStream",
  "sourceCode" : "@SuppressWarnings(\"deprecation\")\r\n@Test\r\nvoid testStream() {\r\n    assertEquals(0, Streams.stream(Stream.empty()).collect(Collectors.toList()).size());\r\n    assertEquals(1, Streams.stream(Stream.of(\"\")).collect(Collectors.toList()).size());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\stream\\StreamsTest.java",
  "methodName" : "testStreamCollection",
  "sourceCode" : "@Test\r\nvoid testStreamCollection() {\r\n    final List<String> input = Arrays.asList(\"1\", \"2\", \"3\", \"4\", \"5\", \"6\");\r\n    assertEquals(6, Streams.stream(input).collect(Collectors.toList()).size());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\stream\\StreamsTest.java",
  "methodName" : "testStreamCollectionNull",
  "sourceCode" : "@Test\r\nvoid testStreamCollectionNull() {\r\n    final List<String> input = null;\r\n    assertEquals(0, Streams.stream(input).collect(Collectors.toList()).size());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\stream\\StreamsTest.java",
  "methodName" : "testToArray",
  "sourceCode" : "@Test\r\nvoid testToArray() {\r\n    final String[] array = Arrays.asList(\"2\", \"3\", \"1\").stream().collect(Streams.toArray(String.class));\r\n    assertNotNull(array);\r\n    assertEquals(3, array.length);\r\n    assertEquals(\"2\", array[0]);\r\n    assertEquals(\"3\", array[1]);\r\n    assertEquals(\"1\", array[2]);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\StreamsTest.java",
  "methodName" : "simpleStreamFilterFailing",
  "sourceCode" : "@TestFactory\r\npublic Stream<DynamicTest> simpleStreamFilterFailing() {\r\n    final List<String> input = Arrays.asList(\"1\", \"2\", \"3\", \"4\", \"5\", \"6\");\r\n    final List<Integer> output = Functions.stream(input).map(Integer::valueOf).filter(asIntPredicate(null)).collect(Collectors.toList());\r\n    assertEvenNumbers(output);\r\n    return Stream.of(dynamicTest(\"IllegalArgumentException\", () -> {\r\n        final IllegalArgumentException iae = new IllegalArgumentException(\"Invalid argument: \" + 5);\r\n        final Executable testMethod = () -> Functions.stream(input).map(Integer::valueOf).filter(asIntPredicate(iae)).collect(Collectors.toList());\r\n        final IllegalArgumentException thrown = assertIllegalArgumentException(testMethod);\r\n        assertEquals(\"Invalid argument: \" + 5, thrown.getMessage());\r\n    }), dynamicTest(\"OutOfMemoryError\", () -> {\r\n        final OutOfMemoryError oome = new OutOfMemoryError();\r\n        final Executable testMethod = () -> Functions.stream(input).map(Integer::valueOf).filter(asIntPredicate(oome)).collect(Collectors.toList());\r\n        final OutOfMemoryError thrown = assertThrows(OutOfMemoryError.class, testMethod);\r\n        assertNull(thrown.getMessage());\r\n    }), dynamicTest(\"SAXException\", () -> {\r\n        final SAXException se = new SAXException();\r\n        final Executable testMethod = () -> Functions.stream(input).map(Integer::valueOf).filter(asIntPredicate(se)).collect(Collectors.toList());\r\n        final UndeclaredThrowableException thrown = assertThrows(UndeclaredThrowableException.class, testMethod);\r\n        assertNull(thrown.getMessage());\r\n        assertEquals(se, thrown.getCause());\r\n    }));\r\n}",
  "annotations" : [ "TestFactory" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\StreamsTest.java",
  "methodName" : "simpleStreamForEachFailing",
  "sourceCode" : "@TestFactory\r\npublic Stream<DynamicTest> simpleStreamForEachFailing() {\r\n    final List<String> input = Arrays.asList(\"1\", \"2\", \"3\", \"4\", \"5\", \"6\");\r\n    return Stream.of(dynamicTest(\"IllegalArgumentException\", () -> {\r\n        final IllegalArgumentException ise = new IllegalArgumentException();\r\n        final Executable testMethod = () -> Functions.stream(input).forEach(asIntConsumer(ise));\r\n        final IllegalArgumentException thrown = assertIllegalArgumentException(testMethod);\r\n        assertNull(thrown.getMessage());\r\n    }), dynamicTest(\"OutOfMemoryError\", () -> {\r\n        final OutOfMemoryError oome = new OutOfMemoryError();\r\n        final Executable oomeTestMethod = () -> Functions.stream(input).forEach(asIntConsumer(oome));\r\n        final OutOfMemoryError oomeThrown = assertThrows(OutOfMemoryError.class, oomeTestMethod);\r\n        assertNull(oomeThrown.getMessage());\r\n    }), dynamicTest(\"SAXException\", () -> {\r\n        final SAXException se = new SAXException();\r\n        final Executable seTestMethod = () -> Functions.stream(input).forEach(asIntConsumer(se));\r\n        final UndeclaredThrowableException seThrown = assertThrows(UndeclaredThrowableException.class, seTestMethod);\r\n        assertNull(seThrown.getMessage());\r\n        assertEquals(se, seThrown.getCause());\r\n    }));\r\n}",
  "annotations" : [ "TestFactory" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\StreamsTest.java",
  "methodName" : "testSimpleStreamFilter",
  "sourceCode" : "@Test\r\nvoid testSimpleStreamFilter() {\r\n    final List<String> input = Arrays.asList(\"1\", \"2\", \"3\", \"4\", \"5\", \"6\");\r\n    final List<Integer> output = Functions.stream(input).map(Integer::valueOf).filter(i -> i.intValue() % 2 == 0).collect(Collectors.toList());\r\n    assertEvenNumbers(output);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\StreamsTest.java",
  "methodName" : "testSimpleStreamForEach",
  "sourceCode" : "@Test\r\nvoid testSimpleStreamForEach() {\r\n    final List<String> input = Arrays.asList(\"1\", \"2\", \"3\", \"4\", \"5\", \"6\");\r\n    final List<Integer> output = new ArrayList<>();\r\n    Functions.stream(input).forEach(s -> output.add(Integer.valueOf(s)));\r\n    assertEquals(6, output.size());\r\n    for (int i = 0; i < 6; i++) {\r\n        assertEquals(i + 1, output.get(i).intValue());\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\StreamsTest.java",
  "methodName" : "testSimpleStreamMap",
  "sourceCode" : "@Test\r\nvoid testSimpleStreamMap() {\r\n    final List<String> input = Arrays.asList(\"1\", \"2\", \"3\", \"4\", \"5\", \"6\");\r\n    final List<Integer> output = Functions.stream(input).map(Integer::valueOf).collect(Collectors.toList());\r\n    assertEquals(6, output.size());\r\n    for (int i = 0; i < 6; i++) {\r\n        assertEquals(i + 1, output.get(i).intValue());\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\StreamsTest.java",
  "methodName" : "testSimpleStreamMapFailing",
  "sourceCode" : "@Test\r\nvoid testSimpleStreamMapFailing() {\r\n    final List<String> input = Arrays.asList(\"1\", \"2\", \"3\", \"4 \", \"5\", \"6\");\r\n    final Executable testMethod = () -> Functions.stream(input).map(Integer::valueOf).collect(Collectors.toList());\r\n    final NumberFormatException thrown = assertThrows(NumberFormatException.class, testMethod);\r\n    assertEquals(\"For input string: \\\"4 \\\"\", thrown.getMessage());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\StreamsTest.java",
  "methodName" : "testToArray",
  "sourceCode" : "@Test\r\nvoid testToArray() {\r\n    final String[] array = Arrays.asList(\"2\", \"3\", \"1\").stream().collect(Streams.toArray(String.class));\r\n    assertNotNull(array);\r\n    assertEquals(3, array.length);\r\n    assertEquals(\"2\", array[0]);\r\n    assertEquals(\"3\", array[1]);\r\n    assertEquals(\"1\", array[2]);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\StringEscapeUtilsTest.java",
  "methodName" : "testConstructor",
  "sourceCode" : "@Test\r\nvoid testConstructor() {\r\n    assertNotNull(new StringEscapeUtils());\r\n    final Constructor<?>[] cons = StringEscapeUtils.class.getDeclaredConstructors();\r\n    assertEquals(1, cons.length);\r\n    assertTrue(Modifier.isPublic(cons[0].getModifiers()));\r\n    assertTrue(Modifier.isPublic(StringEscapeUtils.class.getModifiers()));\r\n    assertFalse(Modifier.isFinal(StringEscapeUtils.class.getModifiers()));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\StringEscapeUtilsTest.java",
  "methodName" : "testEscapeCsvIllegalStateException",
  "sourceCode" : "@Test\r\nvoid testEscapeCsvIllegalStateException() {\r\n    final StringWriter writer = new StringWriter();\r\n    assertThrows(IllegalStateException.class, () -> StringEscapeUtils.ESCAPE_CSV.translate(\"foo\", -1, writer));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\StringEscapeUtilsTest.java",
  "methodName" : "testEscapeCsvString",
  "sourceCode" : "@Test\r\nvoid testEscapeCsvString() {\r\n    assertEquals(\"foo.bar\", StringEscapeUtils.escapeCsv(\"foo.bar\"));\r\n    assertEquals(\"\\\"foo,bar\\\"\", StringEscapeUtils.escapeCsv(\"foo,bar\"));\r\n    assertEquals(\"\\\"foo\\nbar\\\"\", StringEscapeUtils.escapeCsv(\"foo\\nbar\"));\r\n    assertEquals(\"\\\"foo\\rbar\\\"\", StringEscapeUtils.escapeCsv(\"foo\\rbar\"));\r\n    assertEquals(\"\\\"foo\\\"\\\"bar\\\"\", StringEscapeUtils.escapeCsv(\"foo\\\"bar\"));\r\n    assertEquals(\"foo\\uD84C\\uDFB4bar\", StringEscapeUtils.escapeCsv(\"foo\\uD84C\\uDFB4bar\"));\r\n    assertEquals(\"\", StringEscapeUtils.escapeCsv(\"\"));\r\n    assertNull(StringEscapeUtils.escapeCsv(null));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\StringEscapeUtilsTest.java",
  "methodName" : "testEscapeCsvWriter",
  "sourceCode" : "@Test\r\nvoid testEscapeCsvWriter() throws Exception {\r\n    checkCsvEscapeWriter(\"foo.bar\", \"foo.bar\");\r\n    checkCsvEscapeWriter(\"\\\"foo,bar\\\"\", \"foo,bar\");\r\n    checkCsvEscapeWriter(\"\\\"foo\\nbar\\\"\", \"foo\\nbar\");\r\n    checkCsvEscapeWriter(\"\\\"foo\\rbar\\\"\", \"foo\\rbar\");\r\n    checkCsvEscapeWriter(\"\\\"foo\\\"\\\"bar\\\"\", \"foo\\\"bar\");\r\n    checkCsvEscapeWriter(\"foo\\uD84C\\uDFB4bar\", \"foo\\uD84C\\uDFB4bar\");\r\n    checkCsvEscapeWriter(\"\", null);\r\n    checkCsvEscapeWriter(\"\", \"\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\StringEscapeUtilsTest.java",
  "methodName" : "testEscapeEcmaScript",
  "sourceCode" : "@Test\r\nvoid testEscapeEcmaScript() {\r\n    assertNull(StringEscapeUtils.escapeEcmaScript(null));\r\n    assertNullPointerException(() -> StringEscapeUtils.ESCAPE_ECMASCRIPT.translate(null, null));\r\n    assertNullPointerException(() -> StringEscapeUtils.ESCAPE_ECMASCRIPT.translate(\"\", null));\r\n    assertEquals(\"He didn\\\\'t say, \\\\\\\"stop!\\\\\\\"\", StringEscapeUtils.escapeEcmaScript(\"He didn't say, \\\"stop!\\\"\"));\r\n    assertEquals(\"document.getElementById(\\\\\\\"test\\\\\\\").value = \\\\'<script>alert(\\\\'aaa\\\\');<\\\\/script>\\\\';\", StringEscapeUtils.escapeEcmaScript(\"document.getElementById(\\\"test\\\").value = '<script>alert('aaa');</script>';\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\StringEscapeUtilsTest.java",
  "methodName" : "testEscapeHiragana",
  "sourceCode" : "/**\r\n * Tests https://issues.apache.org/jira/browse/LANG-339\r\n */\r\n@Test\r\nvoid testEscapeHiragana() {\r\n    // Some random Japanese Unicode characters\r\n    final String original = \"\\u304B\\u304C\\u3068\";\r\n    final String escaped = StringEscapeUtils.escapeHtml4(original);\r\n    assertEquals(original, escaped, \"Hiragana character Unicode behavior should not be being escaped by escapeHtml4\");\r\n    final String unescaped = StringEscapeUtils.unescapeHtml4(escaped);\r\n    assertEquals(escaped, unescaped, \"Hiragana character Unicode behavior has changed - expected no unescaping\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\StringEscapeUtilsTest.java",
  "methodName" : "testEscapeHtml",
  "sourceCode" : "@Test\r\nvoid testEscapeHtml() throws IOException {\r\n    for (final String[] element : HTML_ESCAPES) {\r\n        final String message = element[0];\r\n        final String expected = element[1];\r\n        final String original = element[2];\r\n        assertEquals(expected, StringEscapeUtils.escapeHtml4(original), message);\r\n        final StringWriter sw = new StringWriter();\r\n        StringEscapeUtils.ESCAPE_HTML4.translate(original, sw);\r\n        final String actual = original == null ? null : sw.toString();\r\n        assertEquals(expected, actual, message);\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\StringEscapeUtilsTest.java",
  "methodName" : "testEscapeHtmlHighUnicode",
  "sourceCode" : "/**\r\n * Tests // https://issues.apache.org/jira/browse/LANG-480\r\n */\r\n@Test\r\nvoid testEscapeHtmlHighUnicode() {\r\n    // this is the utf8 representation of the character:\r\n    // COUNTING ROD UNIT DIGIT THREE\r\n    // in Unicode\r\n    // code point: U+1D362\r\n    final byte[] data = { (byte) 0xF0, (byte) 0x9D, (byte) 0x8D, (byte) 0xA2 };\r\n    final String original = new String(data, StandardCharsets.UTF_8);\r\n    final String escaped = StringEscapeUtils.escapeHtml4(original);\r\n    assertEquals(original, escaped, \"High Unicode should not have been escaped\");\r\n    final String unescaped = StringEscapeUtils.unescapeHtml4(escaped);\r\n    assertEquals(original, unescaped, \"High Unicode should have been unchanged\");\r\n    // TODO: I think this should hold, needs further investigation\r\n    //        String unescapedFromEntity = StringEscapeUtils.unescapeHtml4(\"&#119650;\");\r\n    //        assertEquals(\"High Unicode should have been unescaped\", original, unescapedFromEntity);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\StringEscapeUtilsTest.java",
  "methodName" : "testEscapeHtmlVersions",
  "sourceCode" : "@Test\r\nvoid testEscapeHtmlVersions() {\r\n    assertEquals(\"&Beta;\", StringEscapeUtils.escapeHtml4(\"\\u0392\"));\r\n    assertEquals(\"\\u0392\", StringEscapeUtils.unescapeHtml4(\"&Beta;\"));\r\n    // TODO: refine API for escaping/unescaping specific HTML versions\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\StringEscapeUtilsTest.java",
  "methodName" : "testEscapeJava",
  "sourceCode" : "@Test\r\nvoid testEscapeJava() throws IOException {\r\n    assertNull(StringEscapeUtils.escapeJava(null));\r\n    assertNullPointerException(() -> StringEscapeUtils.ESCAPE_JAVA.translate(null, null));\r\n    assertNullPointerException(() -> StringEscapeUtils.ESCAPE_JAVA.translate(\"\", null));\r\n    assertEscapeJava(\"empty string\", \"\", \"\");\r\n    assertEscapeJava(FOO, FOO);\r\n    assertEscapeJava(\"tab\", \"\\\\t\", \"\\t\");\r\n    assertEscapeJava(\"backslash\", \"\\\\\\\\\", \"\\\\\");\r\n    assertEscapeJava(\"single quote should not be escaped\", \"'\", \"'\");\r\n    assertEscapeJava(\"\\\\\\\\\\\\b\\\\t\\\\r\", \"\\\\\\b\\t\\r\");\r\n    assertEscapeJava(\"\\\\u1234\", \"\\u1234\");\r\n    assertEscapeJava(\"\\\\u0234\", \"\\u0234\");\r\n    assertEscapeJava(\"\\\\u00EF\", \"\\u00ef\");\r\n    assertEscapeJava(\"\\\\u0001\", \"\\u0001\");\r\n    assertEscapeJava(\"Should use capitalized Unicode hex\", \"\\\\uABCD\", \"\\uabcd\");\r\n    assertEscapeJava(\"He didn't say, \\\\\\\"stop!\\\\\\\"\", \"He didn't say, \\\"stop!\\\"\");\r\n    assertEscapeJava(\"non-breaking space\", \"This space is non-breaking:\\\\u00A0\", \"This space is non-breaking:\\u00a0\");\r\n    assertEscapeJava(\"\\\\uABCD\\\\u1234\\\\u012C\", \"\\uABCD\\u1234\\u012C\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\StringEscapeUtilsTest.java",
  "methodName" : "testEscapeJavaWithSlash",
  "sourceCode" : "/**\r\n * Tests https://issues.apache.org/jira/browse/LANG-421\r\n */\r\n@Test\r\nvoid testEscapeJavaWithSlash() {\r\n    final String input = \"String with a slash (/) in it\";\r\n    final String expected = input;\r\n    final String actual = StringEscapeUtils.escapeJava(input);\r\n    /*\r\n         * In 2.4 StringEscapeUtils.escapeJava(String) escapes '/' characters, which are not a valid character to escape in a Java string.\r\n         */\r\n    assertEquals(expected, actual);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\StringEscapeUtilsTest.java",
  "methodName" : "testEscapeJson",
  "sourceCode" : "@Test\r\nvoid testEscapeJson() {\r\n    assertNull(StringEscapeUtils.escapeJson(null));\r\n    assertNullPointerException(() -> StringEscapeUtils.ESCAPE_JSON.translate(null, null));\r\n    assertNullPointerException(() -> StringEscapeUtils.ESCAPE_JSON.translate(\"\", null));\r\n    assertEquals(\"He didn't say, \\\\\\\"stop!\\\\\\\"\", StringEscapeUtils.escapeJson(\"He didn't say, \\\"stop!\\\"\"));\r\n    final String expected = \"\\\\\\\"foo\\\\\\\" isn't \\\\\\\"bar\\\\\\\". specials: \\\\b\\\\r\\\\n\\\\f\\\\t\\\\\\\\\\\\/\";\r\n    final String input = \"\\\"foo\\\" isn't \\\"bar\\\". specials: \\b\\r\\n\\f\\t\\\\/\";\r\n    assertEquals(expected, StringEscapeUtils.escapeJson(input));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\StringEscapeUtilsTest.java",
  "methodName" : "testEscapeXml",
  "sourceCode" : "@Test\r\nvoid testEscapeXml() throws Exception {\r\n    assertEquals(\"&lt;abc&gt;\", StringEscapeUtils.escapeXml(\"<abc>\"));\r\n    assertEquals(\"<abc>\", StringEscapeUtils.unescapeXml(\"&lt;abc&gt;\"));\r\n    assertEquals(\"\\u00A1\", StringEscapeUtils.escapeXml(\"\\u00A1\"), \"XML should not escape >0x7f values\");\r\n    assertEquals(\"\\u00A0\", StringEscapeUtils.unescapeXml(\"&#160;\"), \"XML should be able to unescape >0x7f values\");\r\n    assertEquals(\"\\u00A0\", StringEscapeUtils.unescapeXml(\"&#0160;\"), \"XML should be able to unescape >0x7f values with one leading 0\");\r\n    assertEquals(\"\\u00A0\", StringEscapeUtils.unescapeXml(\"&#00160;\"), \"XML should be able to unescape >0x7f values with two leading 0s\");\r\n    assertEquals(\"\\u00A0\", StringEscapeUtils.unescapeXml(\"&#000160;\"), \"XML should be able to unescape >0x7f values with three leading 0s\");\r\n    assertEquals(\"ain't\", StringEscapeUtils.unescapeXml(\"ain&apos;t\"));\r\n    assertEquals(\"ain&apos;t\", StringEscapeUtils.escapeXml(\"ain't\"));\r\n    assertEquals(\"\", StringEscapeUtils.escapeXml(\"\"));\r\n    assertNull(StringEscapeUtils.escapeXml(null));\r\n    assertNull(StringEscapeUtils.unescapeXml(null));\r\n    StringWriter sw = new StringWriter();\r\n    StringEscapeUtils.ESCAPE_XML.translate(\"<abc>\", sw);\r\n    assertEquals(\"&lt;abc&gt;\", sw.toString(), \"XML was escaped incorrectly\");\r\n    sw = new StringWriter();\r\n    StringEscapeUtils.UNESCAPE_XML.translate(\"&lt;abc&gt;\", sw);\r\n    assertEquals(\"<abc>\", sw.toString(), \"XML was unescaped incorrectly\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\StringEscapeUtilsTest.java",
  "methodName" : "testEscapeXml10",
  "sourceCode" : "@Test\r\nvoid testEscapeXml10() {\r\n    assertEquals(\"a&lt;b&gt;c&quot;d&apos;e&amp;f\", StringEscapeUtils.escapeXml10(\"a<b>c\\\"d'e&f\"));\r\n    assertEquals(\"a\\tb\\rc\\nd\", StringEscapeUtils.escapeXml10(\"a\\tb\\rc\\nd\"), \"XML 1.0 should not escape \\t \\n \\r\");\r\n    assertEquals(\"ab\", StringEscapeUtils.escapeXml10(\"a\\u0000\\u0001\\u0008\\u000b\\u000c\\u000e\\u001fb\"), \"XML 1.0 should omit most #x0-x8 | #xb | #xc | #xe-#x19\");\r\n    assertEquals(\"a\\ud7ff  \\ue000b\", StringEscapeUtils.escapeXml10(\"a\\ud7ff\\ud800 \\udfff \\ue000b\"), \"XML 1.0 should omit #xd800-#xdfff\");\r\n    assertEquals(\"a\\ufffdb\", StringEscapeUtils.escapeXml10(\"a\\ufffd\\ufffe\\uffffb\"), \"XML 1.0 should omit #xfffe | #xffff\");\r\n    assertEquals(\"a\\u007e&#127;&#132;\\u0085&#134;&#159;\\u00a0b\", StringEscapeUtils.escapeXml10(\"a\\u007e\\u007f\\u0084\\u0085\\u0086\\u009f\\u00a0b\"), \"XML 1.0 should escape #x7f-#x84 | #x86 - #x9f, for XML 1.1 compatibility\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\StringEscapeUtilsTest.java",
  "methodName" : "testEscapeXml11",
  "sourceCode" : "@Test\r\nvoid testEscapeXml11() {\r\n    assertEquals(\"a&lt;b&gt;c&quot;d&apos;e&amp;f\", StringEscapeUtils.escapeXml11(\"a<b>c\\\"d'e&f\"));\r\n    assertEquals(\"a\\tb\\rc\\nd\", StringEscapeUtils.escapeXml11(\"a\\tb\\rc\\nd\"), \"XML 1.1 should not escape \\t \\n \\r\");\r\n    assertEquals(\"ab\", StringEscapeUtils.escapeXml11(\"a\\u0000b\"), \"XML 1.1 should omit #x0\");\r\n    assertEquals(\"a&#1;&#8;&#11;&#12;&#14;&#31;b\", StringEscapeUtils.escapeXml11(\"a\\u0001\\u0008\\u000b\\u000c\\u000e\\u001fb\"), \"XML 1.1 should escape #x1-x8 | #xb | #xc | #xe-#x19\");\r\n    assertEquals(\"a\\u007e&#127;&#132;\\u0085&#134;&#159;\\u00a0b\", StringEscapeUtils.escapeXml11(\"a\\u007e\\u007f\\u0084\\u0085\\u0086\\u009f\\u00a0b\"), \"XML 1.1 should escape #x7F-#x84 | #x86-#x9F\");\r\n    assertEquals(\"a\\ud7ff  \\ue000b\", StringEscapeUtils.escapeXml11(\"a\\ud7ff\\ud800 \\udfff \\ue000b\"), \"XML 1.1 should omit #xd800-#xdfff\");\r\n    assertEquals(\"a\\ufffdb\", StringEscapeUtils.escapeXml11(\"a\\ufffd\\ufffe\\uffffb\"), \"XML 1.1 should omit #xfffe | #xffff\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\StringEscapeUtilsTest.java",
  "methodName" : "testEscapeXmlAllCharacters",
  "sourceCode" : "@Test\r\nvoid testEscapeXmlAllCharacters() {\r\n    // https://www.w3.org/TR/xml/#charsets says:\r\n    // Char ::= #x9 | #xA | #xD | [#x20-#xD7FF] | [#xE000-#xFFFD] | [#x10000-#x10FFFF] /* any Unicode character,\r\n    // excluding the surrogate blocks, FFFE, and FFFF. */\r\n    final CharSequenceTranslator escapeXml = StringEscapeUtils.ESCAPE_XML.with(NumericEntityEscaper.below(9), NumericEntityEscaper.between(0xB, 0xC), NumericEntityEscaper.between(0xE, 0x19), NumericEntityEscaper.between(0xD800, 0xDFFF), NumericEntityEscaper.between(0xFFFE, 0xFFFF), NumericEntityEscaper.above(0x110000));\r\n    assertEquals(\"&#0;&#1;&#2;&#3;&#4;&#5;&#6;&#7;&#8;\", escapeXml.translate(\"\\u0000\\u0001\\u0002\\u0003\\u0004\\u0005\\u0006\\u0007\\u0008\"));\r\n    // 0x9\r\n    assertEquals(\"\\t\", escapeXml.translate(\"\\t\"));\r\n    // 0xA\r\n    assertEquals(\"\\n\", escapeXml.translate(\"\\n\"));\r\n    assertEquals(\"&#11;&#12;\", escapeXml.translate(\"\\u000B\\u000C\"));\r\n    // 0xD\r\n    assertEquals(\"\\r\", escapeXml.translate(\"\\r\"));\r\n    assertEquals(\"Hello World! Ain&apos;t this great?\", escapeXml.translate(\"Hello World! Ain't this great?\"));\r\n    assertEquals(\"&#14;&#15;&#24;&#25;\", escapeXml.translate(\"\\u000E\\u000F\\u0018\\u0019\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\StringEscapeUtilsTest.java",
  "methodName" : "testEscapeXmlSupplementaryCharacters",
  "sourceCode" : "/**\r\n * Tests Supplementary characters.\r\n * <p>\r\n * From https://www.w3.org/International/questions/qa-escapes\r\n * </p>\r\n * <blockquote> Supplementary characters are those Unicode characters that have code points higher than the characters in the Basic Multilingual Plane\r\n * (BMP). In UTF-16 a supplementary character is encoded using two 16-bit surrogate code points from the BMP. Because of this, some people think that\r\n * supplementary characters need to be represented using two escapes, but this is incorrect - you must use the single, code point value for that character.\r\n * For example, use &amp;&#35;x233B4&#59; rather than &amp;&#35;xD84C&#59;&amp;&#35;xDFB4&#59;. </blockquote>\r\n *\r\n * @see <a href=\"https://www.w3.org/International/questions/qa-escapes\">Using character escapes in markup and CSS</a>\r\n * @see <a href=\"https://issues.apache.org/jira/browse/LANG-728\">LANG-728</a>\r\n */\r\n@Test\r\nvoid testEscapeXmlSupplementaryCharacters() {\r\n    final CharSequenceTranslator escapeXml = StringEscapeUtils.ESCAPE_XML.with(NumericEntityEscaper.between(0x7f, Integer.MAX_VALUE));\r\n    assertEquals(\"&#144308;\", escapeXml.translate(\"\\uD84C\\uDFB4\"), \"Supplementary character must be represented using a single escape\");\r\n    assertEquals(\"a b c &#144308;\", escapeXml.translate(\"a b c \\uD84C\\uDFB4\"), \"Supplementary characters mixed with basic characters should be encoded correctly\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\StringEscapeUtilsTest.java",
  "methodName" : "testLang313",
  "sourceCode" : "@Test\r\nvoid testLang313() {\r\n    assertEquals(\"& &\", StringEscapeUtils.unescapeHtml4(\"& &amp;\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\StringEscapeUtilsTest.java",
  "methodName" : "testLang708",
  "sourceCode" : "/**\r\n * Tests https://issues.apache.org/jira/browse/LANG-708\r\n *\r\n * @throws IOException if an I/O error occurs\r\n */\r\n@Test\r\nvoid testLang708() throws IOException {\r\n    final byte[] inputBytes = Files.readAllBytes(Paths.get(\"src/test/resources/lang-708-input.txt\"));\r\n    final String input = new String(inputBytes, StandardCharsets.UTF_8);\r\n    final String escaped = StringEscapeUtils.escapeEcmaScript(input);\r\n    // just the end:\r\n    assertTrue(escaped.endsWith(\"}]\"), escaped);\r\n    // a little more:\r\n    assertTrue(escaped.endsWith(\"\\\"valueCode\\\\\\\":\\\\\\\"\\\\\\\"}]\"), escaped);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\StringEscapeUtilsTest.java",
  "methodName" : "testLang720",
  "sourceCode" : "/**\r\n * Tests https://issues.apache.org/jira/browse/LANG-720\r\n */\r\n@Test\r\nvoid testLang720() {\r\n    final String input = \"\\ud842\\udfb7\" + \"A\";\r\n    final String escaped = StringEscapeUtils.escapeXml(input);\r\n    assertEquals(input, escaped);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\StringEscapeUtilsTest.java",
  "methodName" : "testLang911",
  "sourceCode" : "/**\r\n * Tests https://issues.apache.org/jira/browse/LANG-911\r\n */\r\n@Test\r\nvoid testLang911() {\r\n    final String bellsTest = \"\\ud83d\\udc80\\ud83d\\udd14\";\r\n    final String value = StringEscapeUtils.escapeJava(bellsTest);\r\n    final String valueTest = StringEscapeUtils.unescapeJava(value);\r\n    assertEquals(bellsTest, valueTest);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\StringEscapeUtilsTest.java",
  "methodName" : "testStandaloneAmphersand",
  "sourceCode" : "// Tests issue LANG-150\r\n// https://issues.apache.org/jira/browse/LANG-150\r\n@Test\r\nvoid testStandaloneAmphersand() {\r\n    assertEquals(\"<P&O>\", StringEscapeUtils.unescapeHtml4(\"&lt;P&O&gt;\"));\r\n    assertEquals(\"test & <\", StringEscapeUtils.unescapeHtml4(\"test & &lt;\"));\r\n    assertEquals(\"<P&O>\", StringEscapeUtils.unescapeXml(\"&lt;P&O&gt;\"));\r\n    assertEquals(\"test & <\", StringEscapeUtils.unescapeXml(\"test & &lt;\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\StringEscapeUtilsTest.java",
  "methodName" : "testUnescapeCsvIllegalStateException",
  "sourceCode" : "@Test\r\nvoid testUnescapeCsvIllegalStateException() {\r\n    final StringWriter writer = new StringWriter();\r\n    assertThrows(IllegalStateException.class, () -> StringEscapeUtils.UNESCAPE_CSV.translate(\"foo\", -1, writer));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\StringEscapeUtilsTest.java",
  "methodName" : "testUnescapeCsvString",
  "sourceCode" : "@Test\r\nvoid testUnescapeCsvString() {\r\n    assertEquals(\"foo.bar\", StringEscapeUtils.unescapeCsv(\"foo.bar\"));\r\n    assertEquals(\"foo,bar\", StringEscapeUtils.unescapeCsv(\"\\\"foo,bar\\\"\"));\r\n    assertEquals(\"foo\\nbar\", StringEscapeUtils.unescapeCsv(\"\\\"foo\\nbar\\\"\"));\r\n    assertEquals(\"foo\\rbar\", StringEscapeUtils.unescapeCsv(\"\\\"foo\\rbar\\\"\"));\r\n    assertEquals(\"foo\\\"bar\", StringEscapeUtils.unescapeCsv(\"\\\"foo\\\"\\\"bar\\\"\"));\r\n    assertEquals(\"foo\\uD84C\\uDFB4bar\", StringEscapeUtils.unescapeCsv(\"foo\\uD84C\\uDFB4bar\"));\r\n    assertEquals(\"\", StringEscapeUtils.unescapeCsv(\"\"));\r\n    assertNull(StringEscapeUtils.unescapeCsv(null));\r\n    assertEquals(\"\\\"foo.bar\\\"\", StringEscapeUtils.unescapeCsv(\"\\\"foo.bar\\\"\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\StringEscapeUtilsTest.java",
  "methodName" : "testUnescapeCsvWriter",
  "sourceCode" : "@Test\r\nvoid testUnescapeCsvWriter() throws Exception {\r\n    checkCsvUnescapeWriter(\"foo.bar\", \"foo.bar\");\r\n    checkCsvUnescapeWriter(\"foo,bar\", \"\\\"foo,bar\\\"\");\r\n    checkCsvUnescapeWriter(\"foo\\nbar\", \"\\\"foo\\nbar\\\"\");\r\n    checkCsvUnescapeWriter(\"foo\\rbar\", \"\\\"foo\\rbar\\\"\");\r\n    checkCsvUnescapeWriter(\"foo\\\"bar\", \"\\\"foo\\\"\\\"bar\\\"\");\r\n    checkCsvUnescapeWriter(\"foo\\uD84C\\uDFB4bar\", \"foo\\uD84C\\uDFB4bar\");\r\n    checkCsvUnescapeWriter(\"\", null);\r\n    checkCsvUnescapeWriter(\"\", \"\");\r\n    checkCsvUnescapeWriter(\"\\\"foo.bar\\\"\", \"\\\"foo.bar\\\"\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\StringEscapeUtilsTest.java",
  "methodName" : "testUnescapeEcmaScript",
  "sourceCode" : "@Test\r\nvoid testUnescapeEcmaScript() {\r\n    assertNull(StringEscapeUtils.escapeEcmaScript(null));\r\n    assertNullPointerException(() -> StringEscapeUtils.UNESCAPE_ECMASCRIPT.translate(null, null));\r\n    assertNullPointerException(() -> StringEscapeUtils.UNESCAPE_ECMASCRIPT.translate(\"\", null));\r\n    assertEquals(\"He didn't say, \\\"stop!\\\"\", StringEscapeUtils.unescapeEcmaScript(\"He didn\\\\'t say, \\\\\\\"stop!\\\\\\\"\"));\r\n    assertEquals(\"document.getElementById(\\\"test\\\").value = '<script>alert('aaa');</script>';\", StringEscapeUtils.unescapeEcmaScript(\"document.getElementById(\\\\\\\"test\\\\\\\").value = \\\\'<script>alert(\\\\'aaa\\\\');<\\\\/script>\\\\';\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\StringEscapeUtilsTest.java",
  "methodName" : "testUnescapeHexCharsHtml",
  "sourceCode" : "@Test\r\nvoid testUnescapeHexCharsHtml() {\r\n    // Simple easy to grok test\r\n    assertEquals(\"\\u0080\\u009F\", StringEscapeUtils.unescapeHtml4(\"&#x80;&#x9F;\"), \"hex number unescape\");\r\n    assertEquals(\"\\u0080\\u009F\", StringEscapeUtils.unescapeHtml4(\"&#X80;&#X9F;\"), \"hex number unescape\");\r\n    // Test all Character values:\r\n    for (char i = Character.MIN_VALUE; i < Character.MAX_VALUE; i++) {\r\n        final Character c1 = Character.valueOf(i);\r\n        final Character c2 = Character.valueOf((char) (i + 1));\r\n        final String expected = c1.toString() + c2;\r\n        final String escapedC1 = \"&#x\" + Integer.toHexString(c1.charValue()) + \";\";\r\n        final String escapedC2 = \"&#x\" + Integer.toHexString(c2.charValue()) + \";\";\r\n        assertEquals(expected, StringEscapeUtils.unescapeHtml4(escapedC1 + escapedC2), \"hex number unescape index \" + (int) i);\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\StringEscapeUtilsTest.java",
  "methodName" : "testUnescapeHtml4",
  "sourceCode" : "@Test\r\nvoid testUnescapeHtml4() throws IOException {\r\n    for (final String[] element : HTML_ESCAPES) {\r\n        final String message = element[0];\r\n        final String expected = element[2];\r\n        final String original = element[1];\r\n        assertEquals(expected, StringEscapeUtils.unescapeHtml4(original), message);\r\n        final StringWriter sw = new StringWriter();\r\n        StringEscapeUtils.UNESCAPE_HTML4.translate(original, sw);\r\n        final String actual = original == null ? null : sw.toString();\r\n        assertEquals(expected, actual, message);\r\n    }\r\n    // \\u00E7 is a cedilla (c with wiggle under)\r\n    // note that the test string must be 7-bit-clean (Unicode escaped) or else it will compile incorrectly\r\n    // on some locales\r\n    assertEquals(\"Fran\\u00E7ais\", StringEscapeUtils.unescapeHtml4(\"Fran\\u00E7ais\"), \"funny chars pass through OK\");\r\n    assertEquals(\"Hello&;World\", StringEscapeUtils.unescapeHtml4(\"Hello&;World\"));\r\n    assertEquals(\"Hello&#;World\", StringEscapeUtils.unescapeHtml4(\"Hello&#;World\"));\r\n    assertEquals(\"Hello&# ;World\", StringEscapeUtils.unescapeHtml4(\"Hello&# ;World\"));\r\n    assertEquals(\"Hello&##;World\", StringEscapeUtils.unescapeHtml4(\"Hello&##;World\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\StringEscapeUtilsTest.java",
  "methodName" : "testUnescapeJava",
  "sourceCode" : "@Test\r\nvoid testUnescapeJava() throws IOException {\r\n    assertNull(StringEscapeUtils.unescapeJava(null));\r\n    assertNullPointerException(() -> StringEscapeUtils.UNESCAPE_JAVA.translate(null, null));\r\n    assertNullPointerException(() -> StringEscapeUtils.UNESCAPE_JAVA.translate(\"\", null));\r\n    assertThrows(RuntimeException.class, () -> StringEscapeUtils.unescapeJava(\"\\\\u02-3\"));\r\n    assertUnescapeJava(\"\", \"\");\r\n    assertUnescapeJava(\"test\", \"test\");\r\n    assertUnescapeJava(\"\\ntest\\b\", \"\\\\ntest\\\\b\");\r\n    assertUnescapeJava(\"\\u123425foo\\ntest\\b\", \"\\\\u123425foo\\\\ntest\\\\b\");\r\n    assertUnescapeJava(\"'\\foo\\teste\\r\", \"\\\\'\\\\foo\\\\teste\\\\r\");\r\n    assertUnescapeJava(\"\", \"\\\\\");\r\n    // foo\r\n    assertUnescapeJava(\"lowercase Unicode\", \"\\uABCDx\", \"\\\\uabcdx\");\r\n    assertUnescapeJava(\"uppercase Unicode\", \"\\uABCDx\", \"\\\\uABCDx\");\r\n    assertUnescapeJava(\"Unicode as final character\", \"\\uABCD\", \"\\\\uabcd\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\StringEscapeUtilsTest.java",
  "methodName" : "testUnescapeJson",
  "sourceCode" : "@Test\r\nvoid testUnescapeJson() {\r\n    assertNull(StringEscapeUtils.unescapeJson(null));\r\n    assertNullPointerException(() -> StringEscapeUtils.UNESCAPE_JSON.translate(null, null));\r\n    assertNullPointerException(() -> StringEscapeUtils.UNESCAPE_JSON.translate(\"\", null));\r\n    assertEquals(\"He didn't say, \\\"stop!\\\"\", StringEscapeUtils.unescapeJson(\"He didn't say, \\\\\\\"stop!\\\\\\\"\"));\r\n    final String expected = \"\\\"foo\\\" isn't \\\"bar\\\". specials: \\b\\r\\n\\f\\t\\\\/\";\r\n    final String input = \"\\\\\\\"foo\\\\\\\" isn't \\\\\\\"bar\\\\\\\". specials: \\\\b\\\\r\\\\n\\\\f\\\\t\\\\\\\\\\\\/\";\r\n    assertEquals(expected, StringEscapeUtils.unescapeJson(input));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\StringEscapeUtilsTest.java",
  "methodName" : "testUnescapeUnknownEntity",
  "sourceCode" : "@Test\r\nvoid testUnescapeUnknownEntity() {\r\n    assertEquals(\"&zzzz;\", StringEscapeUtils.unescapeHtml4(\"&zzzz;\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\StringEscapeUtilsTest.java",
  "methodName" : "testUnescapeXmlSupplementaryCharacters",
  "sourceCode" : "/**\r\n * Reverse of the above.\r\n *\r\n * @see <a href=\"https://issues.apache.org/jira/browse/LANG-729\">LANG-729</a>\r\n */\r\n@Test\r\nvoid testUnescapeXmlSupplementaryCharacters() {\r\n    assertEquals(\"\\uD84C\\uDFB4\", StringEscapeUtils.unescapeXml(\"&#144308;\"), \"Supplementary character must be represented using a single escape\");\r\n    assertEquals(\"a b c \\uD84C\\uDFB4\", StringEscapeUtils.unescapeXml(\"a b c &#144308;\"), \"Supplementary characters mixed with basic characters should be decoded correctly\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\StringsTest.java",
  "methodName" : "testBuilder",
  "sourceCode" : "@Test\r\nvoid testBuilder() {\r\n    assertTrue(Strings.builder().setIgnoreCase(false).get().isCaseSensitive());\r\n    assertFalse(Strings.builder().setIgnoreCase(true).get().isCaseSensitive());\r\n    //\r\n    assertTrue(Strings.builder().setNullIsLess(false).get().isCaseSensitive());\r\n    assertTrue(Strings.builder().setNullIsLess(true).get().isCaseSensitive());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\StringsTest.java",
  "methodName" : "testBuilderDefaults",
  "sourceCode" : "@Test\r\nvoid testBuilderDefaults() {\r\n    final Strings strings = Strings.builder().get();\r\n    assertTrue(strings.isCaseSensitive());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\StringsTest.java",
  "methodName" : "testCaseInsensitiveConstant",
  "sourceCode" : "@Test\r\nvoid testCaseInsensitiveConstant() {\r\n    assertNotNull(Strings.CI);\r\n    assertFalse(Strings.CI.isCaseSensitive());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\StringsTest.java",
  "methodName" : "testCaseInsensitiveStartsWithAny",
  "sourceCode" : "/**\r\n * Expanding the existing test group {@link StringUtilsStartsEndsWithTest#testStartsWithAny()} to include case-insensitive cases\r\n */\r\n@Test\r\nvoid testCaseInsensitiveStartsWithAny() {\r\n    // LANG-1682\r\n    assertFalse(Strings.CI.startsWithAny(null, (String[]) null));\r\n    assertFalse(Strings.CI.startsWithAny(null, \"aBc\"));\r\n    assertFalse(Strings.CI.startsWithAny(\"AbCxYz\", (String[]) null));\r\n    assertFalse(Strings.CI.startsWithAny(\"AbCxYz\"));\r\n    assertTrue(Strings.CI.startsWithAny(\"AbCxYz\", \"aBc\"));\r\n    assertTrue(Strings.CI.startsWithAny(\"AbCxYz\", null, \"XyZ\", \"aBc\"));\r\n    assertFalse(Strings.CI.startsWithAny(\"AbCxYz\", null, \"XyZ\", \"aBcD\"));\r\n    assertTrue(Strings.CI.startsWithAny(\"AbCxYz\", \"\"));\r\n    assertTrue(Strings.CI.startsWithAny(\"abcxyz\", null, \"XyZ\", \"ABCX\"));\r\n    assertTrue(Strings.CI.startsWithAny(\"ABCXYZ\", null, \"XyZ\", \"abc\"));\r\n    assertTrue(Strings.CI.startsWithAny(\"AbCxYz\", new StringBuilder(\"XyZ\"), new StringBuffer(\"aBc\")));\r\n    assertTrue(Strings.CI.startsWithAny(new StringBuffer(\"AbCxYz\"), new StringBuilder(\"XyZ\"), new StringBuffer(\"abc\")));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\StringsTest.java",
  "methodName" : "testCaseSensitiveConstant",
  "sourceCode" : "@Test\r\nvoid testCaseSensitiveConstant() {\r\n    assertNotNull(Strings.CS);\r\n    assertTrue(Strings.CS.isCaseSensitive());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\StringsTest.java",
  "methodName" : "testEqualsCharSequence",
  "sourceCode" : "@ParameterizedTest\r\n@MethodSource(\"stringsFactory\")\r\nvoid testEqualsCharSequence(final Strings strings) {\r\n    final CharSequence nullCharSequence = null;\r\n    assertTrue(strings.equals(nullCharSequence, nullCharSequence));\r\n    assertFalse(strings.equals(nullCharSequence, \"\"));\r\n    assertFalse(strings.equals(\"\", nullCharSequence));\r\n}",
  "annotations" : [ "ParameterizedTest" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\StringsTest.java",
  "methodName" : "testEqualsStrings",
  "sourceCode" : "@ParameterizedTest\r\n@MethodSource(\"stringsFactory\")\r\nvoid testEqualsStrings(final Strings strings) {\r\n    final String nullStr = null;\r\n    assertTrue(strings.equals(nullStr, nullStr));\r\n    assertFalse(strings.equals(nullStr, \"\"));\r\n    assertFalse(strings.equals(\"\", nullStr));\r\n}",
  "annotations" : [ "ParameterizedTest" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\StringUtilsAbbreviateTest.java",
  "methodName" : "testAbbreviate_StringInt",
  "sourceCode" : "@Test\r\nvoid testAbbreviate_StringInt() {\r\n    assertNull(StringUtils.abbreviate(null, 10));\r\n    assertEquals(\"\", StringUtils.abbreviate(\"\", 10));\r\n    assertEquals(\"short\", StringUtils.abbreviate(\"short\", 10));\r\n    assertEquals(\"Now is ...\", StringUtils.abbreviate(\"Now is the time for all good men to come to the aid of their party.\", 10));\r\n    final String raspberry = \"raspberry peach\";\r\n    assertEquals(\"raspberry p...\", StringUtils.abbreviate(raspberry, 14));\r\n    assertEquals(\"raspberry peach\", StringUtils.abbreviate(\"raspberry peach\", 15));\r\n    assertEquals(\"raspberry peach\", StringUtils.abbreviate(\"raspberry peach\", 16));\r\n    assertEquals(\"abc...\", StringUtils.abbreviate(\"abcdefg\", 6));\r\n    assertEquals(\"abcdefg\", StringUtils.abbreviate(\"abcdefg\", 7));\r\n    assertEquals(\"abcdefg\", StringUtils.abbreviate(\"abcdefg\", 8));\r\n    assertEquals(\"a...\", StringUtils.abbreviate(\"abcdefg\", 4));\r\n    assertEquals(\"\", StringUtils.abbreviate(\"\", 4));\r\n    assertIllegalArgumentException(() -> StringUtils.abbreviate(\"abc\", 3), \"StringUtils.abbreviate expecting IllegalArgumentException\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\StringUtilsAbbreviateTest.java",
  "methodName" : "testAbbreviate_StringIntInt",
  "sourceCode" : "@Test\r\nvoid testAbbreviate_StringIntInt() {\r\n    assertNull(StringUtils.abbreviate(null, 10, 12));\r\n    assertEquals(\"\", StringUtils.abbreviate(\"\", 0, 10));\r\n    assertEquals(\"\", StringUtils.abbreviate(\"\", 2, 10));\r\n    assertIllegalArgumentException(() -> StringUtils.abbreviate(\"abcdefghij\", 0, 3), \"StringUtils.abbreviate expecting IllegalArgumentException\");\r\n    assertIllegalArgumentException(() -> StringUtils.abbreviate(\"abcdefghij\", 5, 6), \"StringUtils.abbreviate expecting IllegalArgumentException\");\r\n    final String raspberry = \"raspberry peach\";\r\n    assertEquals(\"raspberry peach\", StringUtils.abbreviate(raspberry, 11, 15));\r\n    assertNull(StringUtils.abbreviate(null, 7, 14));\r\n    assertAbbreviateWithOffset(\"abcdefg...\", -1, 10);\r\n    assertAbbreviateWithOffset(\"abcdefg...\", 0, 10);\r\n    assertAbbreviateWithOffset(\"abcdefg...\", 1, 10);\r\n    assertAbbreviateWithOffset(\"abcdefg...\", 2, 10);\r\n    assertAbbreviateWithOffset(\"abcdefg...\", 3, 10);\r\n    assertAbbreviateWithOffset(\"abcdefg...\", 4, 10);\r\n    assertAbbreviateWithOffset(\"...fghi...\", 5, 10);\r\n    assertAbbreviateWithOffset(\"...ghij...\", 6, 10);\r\n    assertAbbreviateWithOffset(\"...hijk...\", 7, 10);\r\n    assertAbbreviateWithOffset(\"...ijklmno\", 8, 10);\r\n    assertAbbreviateWithOffset(\"...ijklmno\", 9, 10);\r\n    assertAbbreviateWithOffset(\"...ijklmno\", 10, 10);\r\n    assertAbbreviateWithOffset(\"...ijklmno\", 11, 10);\r\n    assertAbbreviateWithOffset(\"...ijklmno\", 12, 10);\r\n    assertAbbreviateWithOffset(\"...ijklmno\", 13, 10);\r\n    assertAbbreviateWithOffset(\"...ijklmno\", 14, 10);\r\n    assertAbbreviateWithOffset(\"...ijklmno\", 15, 10);\r\n    assertAbbreviateWithOffset(\"...ijklmno\", 16, 10);\r\n    assertAbbreviateWithOffset(\"...ijklmno\", Integer.MAX_VALUE, 10);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\StringUtilsAbbreviateTest.java",
  "methodName" : "testAbbreviate_StringStringInt",
  "sourceCode" : "@Test\r\nvoid testAbbreviate_StringStringInt() {\r\n    assertNull(StringUtils.abbreviate(null, null, 10));\r\n    assertNull(StringUtils.abbreviate(null, \"...\", 10));\r\n    assertEquals(\"paranaguacu\", StringUtils.abbreviate(\"paranaguacu\", null, 10));\r\n    assertEquals(\"\", StringUtils.abbreviate(\"\", \"...\", 2));\r\n    assertEquals(\"wai**\", StringUtils.abbreviate(\"waiheke\", \"**\", 5));\r\n    assertEquals(\"And af,,,,\", StringUtils.abbreviate(\"And after a long time, he finally met his son.\", \",,,,\", 10));\r\n    final String raspberry = \"raspberry peach\";\r\n    assertEquals(\"raspberry pe..\", StringUtils.abbreviate(raspberry, \"..\", 14));\r\n    assertEquals(\"raspberry peach\", StringUtils.abbreviate(\"raspberry peach\", \"---*---\", 15));\r\n    assertEquals(\"raspberry peach\", StringUtils.abbreviate(\"raspberry peach\", \".\", 16));\r\n    assertEquals(\"abc()(\", StringUtils.abbreviate(\"abcdefg\", \"()(\", 6));\r\n    assertEquals(\"abcdefg\", StringUtils.abbreviate(\"abcdefg\", \";\", 7));\r\n    assertEquals(\"abcdefg\", StringUtils.abbreviate(\"abcdefg\", \"_-\", 8));\r\n    assertEquals(\"abc.\", StringUtils.abbreviate(\"abcdefg\", \".\", 4));\r\n    assertEquals(\"\", StringUtils.abbreviate(\"\", 4));\r\n    assertIllegalArgumentException(() -> StringUtils.abbreviate(\"abcdefghij\", \"...\", 3), \"StringUtils.abbreviate expecting IllegalArgumentException\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\StringUtilsAbbreviateTest.java",
  "methodName" : "testAbbreviate_StringStringIntInt",
  "sourceCode" : "@Test\r\nvoid testAbbreviate_StringStringIntInt() {\r\n    assertNull(StringUtils.abbreviate(null, null, 10, 12));\r\n    assertNull(StringUtils.abbreviate(null, \"...\", 10, 12));\r\n    assertEquals(\"\", StringUtils.abbreviate(\"\", null, 0, 10));\r\n    assertEquals(\"\", StringUtils.abbreviate(\"\", \"...\", 2, 10));\r\n    assertIllegalArgumentException(() -> StringUtils.abbreviate(\"abcdefghij\", \"::\", 0, 2), \"StringUtils.abbreviate expecting IllegalArgumentException\");\r\n    assertIllegalArgumentException(() -> StringUtils.abbreviate(\"abcdefghij\", \"!!!\", 5, 6), \"StringUtils.abbreviate expecting IllegalArgumentException\");\r\n    final String raspberry = \"raspberry peach\";\r\n    assertEquals(\"raspberry peach\", StringUtils.abbreviate(raspberry, \"--\", 12, 15));\r\n    assertNull(StringUtils.abbreviate(null, \";\", 7, 14));\r\n    assertAbbreviateWithAbbrevMarkerAndOffset(\"abcdefgh;;\", \";;\", -1, 10);\r\n    assertAbbreviateWithAbbrevMarkerAndOffset(\"abcdefghi.\", \".\", 0, 10);\r\n    assertAbbreviateWithAbbrevMarkerAndOffset(\"abcdefgh++\", \"++\", 1, 10);\r\n    assertAbbreviateWithAbbrevMarkerAndOffset(\"abcdefghi*\", \"*\", 2, 10);\r\n    assertAbbreviateWithAbbrevMarkerAndOffset(\"abcdef{{{{\", \"{{{{\", 4, 10);\r\n    assertAbbreviateWithAbbrevMarkerAndOffset(\"abcdef____\", \"____\", 5, 10);\r\n    assertAbbreviateWithAbbrevMarkerAndOffset(\"==fghijk==\", \"==\", 5, 10);\r\n    assertAbbreviateWithAbbrevMarkerAndOffset(\"___ghij___\", \"___\", 6, 10);\r\n    assertAbbreviateWithAbbrevMarkerAndOffset(\"/ghijklmno\", \"/\", 7, 10);\r\n    assertAbbreviateWithAbbrevMarkerAndOffset(\"/ghijklmno\", \"/\", 8, 10);\r\n    assertAbbreviateWithAbbrevMarkerAndOffset(\"/ghijklmno\", \"/\", 9, 10);\r\n    assertAbbreviateWithAbbrevMarkerAndOffset(\"///ijklmno\", \"///\", 10, 10);\r\n    assertAbbreviateWithAbbrevMarkerAndOffset(\"//hijklmno\", \"//\", 10, 10);\r\n    assertAbbreviateWithAbbrevMarkerAndOffset(\"//hijklmno\", \"//\", 11, 10);\r\n    assertAbbreviateWithAbbrevMarkerAndOffset(\"...ijklmno\", \"...\", 12, 10);\r\n    assertAbbreviateWithAbbrevMarkerAndOffset(\"/ghijklmno\", \"/\", 13, 10);\r\n    assertAbbreviateWithAbbrevMarkerAndOffset(\"/ghijklmno\", \"/\", 14, 10);\r\n    assertAbbreviateWithAbbrevMarkerAndOffset(\"999ijklmno\", \"999\", 15, 10);\r\n    assertAbbreviateWithAbbrevMarkerAndOffset(\"_ghijklmno\", \"_\", 16, 10);\r\n    assertAbbreviateWithAbbrevMarkerAndOffset(\"+ghijklmno\", \"+\", Integer.MAX_VALUE, 10);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\StringUtilsAbbreviateTest.java",
  "methodName" : "testAbbreviateMarkerWithEmptyString",
  "sourceCode" : "// Fixed LANG-1463\r\n@Test\r\nvoid testAbbreviateMarkerWithEmptyString() {\r\n    final String greaterThanMaxTest = \"much too long text\";\r\n    assertEquals(\"much too long\", StringUtils.abbreviate(greaterThanMaxTest, \"\", 13));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\StringUtilsAbbreviateTest.java",
  "methodName" : "testAbbreviateMiddle",
  "sourceCode" : "@Test\r\nvoid testAbbreviateMiddle() {\r\n    // javadoc examples\r\n    assertNull(StringUtils.abbreviateMiddle(null, null, 0));\r\n    assertEquals(\"abc\", StringUtils.abbreviateMiddle(\"abc\", null, 0));\r\n    assertEquals(\"abc\", StringUtils.abbreviateMiddle(\"abc\", \".\", 0));\r\n    assertEquals(\"abc\", StringUtils.abbreviateMiddle(\"abc\", \".\", 3));\r\n    assertEquals(\"ab.f\", StringUtils.abbreviateMiddle(\"abcdef\", \".\", 4));\r\n    // JIRA issue (LANG-405) example (slightly different than actual expected result)\r\n    assertEquals(\"A very long text with un...f the text is complete.\", StringUtils.abbreviateMiddle(\"A very long text with unimportant stuff in the middle but interesting start and end to see if the text is complete.\", \"...\", 50));\r\n    // Test a much longer text :)\r\n    final String longText = \"Start text\" + StringUtils.repeat(\"x\", 10000) + \"Close text\";\r\n    assertEquals(\"Start text->Close text\", StringUtils.abbreviateMiddle(longText, \"->\", 22));\r\n    // Test negative length\r\n    assertEquals(\"abc\", StringUtils.abbreviateMiddle(\"abc\", \".\", -1));\r\n    // Test boundaries\r\n    // Fails to change anything as method ensures first and last char are kept\r\n    assertEquals(\"abc\", StringUtils.abbreviateMiddle(\"abc\", \".\", 1));\r\n    assertEquals(\"abc\", StringUtils.abbreviateMiddle(\"abc\", \".\", 2));\r\n    // Test length of n=1\r\n    assertEquals(\"a\", StringUtils.abbreviateMiddle(\"a\", \".\", 1));\r\n    // Test smallest length that can lead to success\r\n    assertEquals(\"a.d\", StringUtils.abbreviateMiddle(\"abcd\", \".\", 3));\r\n    // More from LANG-405\r\n    assertEquals(\"a..f\", StringUtils.abbreviateMiddle(\"abcdef\", \"..\", 4));\r\n    assertEquals(\"ab.ef\", StringUtils.abbreviateMiddle(\"abcdef\", \".\", 5));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\StringUtilsAbbreviateTest.java",
  "methodName" : "testEmoji",
  "sourceCode" : "/**\r\n * Tests <a href=\"LANG-1770\">https://issues.apache.org/jira/projects/LANG/issues/LANG-1770</a>.\r\n */\r\n@Test\r\nvoid testEmoji() {\r\n    // @formatter:off\r\n    final String[] expectedResultsFox = { // 4\r\n    \"\uD83E\uDD8A...\", \"\uD83E\uDD8A\uD83E\uDD8A...\", \"\uD83E\uDD8A\uD83E\uDD8A\uD83E\uDD8A...\", \"\uD83E\uDD8A\uD83E\uDD8A\uD83E\uDD8A\uD83E\uDD8A...\", \"\uD83E\uDD8A\uD83E\uDD8A\uD83E\uDD8A\uD83E\uDD8A\uD83E\uDD8A...\", \"\uD83E\uDD8A\uD83E\uDD8A\uD83E\uDD8A\uD83E\uDD8A\uD83E\uDD8A\uD83E\uDD8A...\", // 10\r\n    \"\uD83E\uDD8A\uD83E\uDD8A\uD83E\uDD8A\uD83E\uDD8A\uD83E\uDD8A\uD83E\uDD8A\uD83E\uDD8A...\" };\r\n    final String[] expectedResultsFamilyWithCodepoints = { \"\uD83D\uDC69...\", \"\uD83D\uDC69\uD83C\uDFFB...\", // zero width joiner\r\n    \"\uD83D\uDC69\uD83C\uDFFB‍...\", \"\uD83D\uDC69\uD83C\uDFFB‍\uD83D\uDC68...\", \"\uD83D\uDC69\uD83C\uDFFB‍\uD83D\uDC68\uD83C\uDFFB...\", \"\uD83D\uDC69\uD83C\uDFFB‍\uD83D\uDC68\uD83C\uDFFB‍...\", \"\uD83D\uDC69\uD83C\uDFFB‍\uD83D\uDC68\uD83C\uDFFB‍\uD83D\uDC66...\" };\r\n    final String[] expectedResultsFamilyWithGrapheme = { // 4\r\n    \"\uD83D\uDC69\uD83C\uDFFB‍\uD83D\uDC68\uD83C\uDFFB‍\uD83D\uDC66\uD83C\uDFFB‍\uD83D\uDC66\uD83C\uDFFB...\", \"\uD83D\uDC69\uD83C\uDFFB‍\uD83D\uDC68\uD83C\uDFFB‍\uD83D\uDC66\uD83C\uDFFB‍\uD83D\uDC66\uD83C\uDFFB\uD83D\uDC69\uD83C\uDFFC‍\uD83D\uDC68\uD83C\uDFFC‍\uD83D\uDC66\uD83C\uDFFC‍\uD83D\uDC66\uD83C\uDFFC...\", \"\uD83D\uDC69\uD83C\uDFFB‍\uD83D\uDC68\uD83C\uDFFB‍\uD83D\uDC66\uD83C\uDFFB‍\uD83D\uDC66\uD83C\uDFFB\uD83D\uDC69\uD83C\uDFFC‍\uD83D\uDC68\uD83C\uDFFC‍\uD83D\uDC66\uD83C\uDFFC‍\uD83D\uDC66\uD83C\uDFFC\uD83D\uDC69\uD83C\uDFFD‍\uD83D\uDC68\uD83C\uDFFD‍\uD83D\uDC66\uD83C\uDFFD‍\uD83D\uDC66\uD83C\uDFFD...\", \"\uD83D\uDC69\uD83C\uDFFB‍\uD83D\uDC68\uD83C\uDFFB‍\uD83D\uDC66\uD83C\uDFFB‍\uD83D\uDC66\uD83C\uDFFB\uD83D\uDC69\uD83C\uDFFC‍\uD83D\uDC68\uD83C\uDFFC‍\uD83D\uDC66\uD83C\uDFFC‍\uD83D\uDC66\uD83C\uDFFC\uD83D\uDC69\uD83C\uDFFD‍\uD83D\uDC68\uD83C\uDFFD‍\uD83D\uDC66\uD83C\uDFFD‍\uD83D\uDC66\uD83C\uDFFD\uD83D\uDC69\uD83C\uDFFE‍\uD83D\uDC68\uD83C\uDFFE‍\uD83D\uDC66\uD83C\uDFFE‍\uD83D\uDC66\uD83C\uDFFE...\", \"\uD83D\uDC69\uD83C\uDFFB‍\uD83D\uDC68\uD83C\uDFFB‍\uD83D\uDC66\uD83C\uDFFB‍\uD83D\uDC66\uD83C\uDFFB\uD83D\uDC69\uD83C\uDFFC‍\uD83D\uDC68\uD83C\uDFFC‍\uD83D\uDC66\uD83C\uDFFC‍\uD83D\uDC66\uD83C\uDFFC\uD83D\uDC69\uD83C\uDFFD‍\uD83D\uDC68\uD83C\uDFFD‍\uD83D\uDC66\uD83C\uDFFD‍\uD83D\uDC66\uD83C\uDFFD\uD83D\uDC69\uD83C\uDFFE‍\uD83D\uDC68\uD83C\uDFFE‍\uD83D\uDC66\uD83C\uDFFE‍\uD83D\uDC66\uD83C\uDFFE\uD83D\uDC69\uD83C\uDFFF‍\uD83D\uDC68\uD83C\uDFFF‍\uD83D\uDC66\uD83C\uDFFF‍\uD83D\uDC66\uD83C\uDFFF...\", \"\uD83D\uDC69\uD83C\uDFFB‍\uD83D\uDC68\uD83C\uDFFB‍\uD83D\uDC66\uD83C\uDFFB‍\uD83D\uDC66\uD83C\uDFFB\uD83D\uDC69\uD83C\uDFFC‍\uD83D\uDC68\uD83C\uDFFC‍\uD83D\uDC66\uD83C\uDFFC‍\uD83D\uDC66\uD83C\uDFFC\uD83D\uDC69\uD83C\uDFFD‍\uD83D\uDC68\uD83C\uDFFD‍\uD83D\uDC66\uD83C\uDFFD‍\uD83D\uDC66\uD83C\uDFFD\uD83D\uDC69\uD83C\uDFFE‍\uD83D\uDC68\uD83C\uDFFE‍\uD83D\uDC66\uD83C\uDFFE‍\uD83D\uDC66\uD83C\uDFFE\uD83D\uDC69\uD83C\uDFFF‍\uD83D\uDC68\uD83C\uDFFF‍\uD83D\uDC66\uD83C\uDFFF‍\uD83D\uDC66\uD83C\uDFFF\uD83D\uDC69\uD83C\uDFFB‍\uD83D\uDC68\uD83C\uDFFB‍\uD83D\uDC66\uD83C\uDFFB‍\uD83D\uDC66\uD83C\uDFFB...\", // 10\r\n    \"\uD83D\uDC69\uD83C\uDFFB‍\uD83D\uDC68\uD83C\uDFFB‍\uD83D\uDC66\uD83C\uDFFB‍\uD83D\uDC66\uD83C\uDFFB\uD83D\uDC69\uD83C\uDFFC‍\uD83D\uDC68\uD83C\uDFFC‍\uD83D\uDC66\uD83C\uDFFC‍\uD83D\uDC66\uD83C\uDFFC\uD83D\uDC69\uD83C\uDFFD‍\uD83D\uDC68\uD83C\uDFFD‍\uD83D\uDC66\uD83C\uDFFD‍\uD83D\uDC66\uD83C\uDFFD\uD83D\uDC69\uD83C\uDFFE‍\uD83D\uDC68\uD83C\uDFFE‍\uD83D\uDC66\uD83C\uDFFE‍\uD83D\uDC66\uD83C\uDFFE\uD83D\uDC69\uD83C\uDFFF‍\uD83D\uDC68\uD83C\uDFFF‍\uD83D\uDC66\uD83C\uDFFF‍\uD83D\uDC66\uD83C\uDFFF\uD83D\uDC69\uD83C\uDFFB‍\uD83D\uDC68\uD83C\uDFFB‍\uD83D\uDC66\uD83C\uDFFB‍\uD83D\uDC66\uD83C\uDFFB\uD83D\uDC69\uD83C\uDFFC‍\uD83D\uDC68\uD83C\uDFFC‍\uD83D\uDC66\uD83C\uDFFC‍\uD83D\uDC66\uD83C\uDFFC...\" };\r\n    // @formatter:on\r\n    for (int i = 4; i <= 10; i++) {\r\n        final String abbreviateResult = StringUtils.abbreviate(\"\uD83E\uDD8A\uD83E\uDD8A\uD83E\uDD8A\uD83E\uDD8A\uD83E\uDD8A\uD83E\uDD8A\uD83E\uDD8A\uD83E\uDD8A\uD83E\uDD8A\uD83E\uDD8A\uD83E\uDD8A\uD83E\uDD8A\uD83E\uDD8A\uD83E\uDD8A\", i);\r\n        assertNotNull(abbreviateResult);\r\n        // assertEquals(expectedResultsFox[i - 4], abbreviateResult);\r\n    }\r\n    for (int i = 4; i <= 10; i++) {\r\n        final String abbreviateResult = StringUtils.abbreviate(\"\uD83D\uDC69\uD83C\uDFFB‍\uD83D\uDC68\uD83C\uDFFB‍\uD83D\uDC66\uD83C\uDFFB‍\uD83D\uDC66\uD83C\uDFFB\uD83D\uDC69\uD83C\uDFFC‍\uD83D\uDC68\uD83C\uDFFC‍\uD83D\uDC66\uD83C\uDFFC‍\uD83D\uDC66\uD83C\uDFFC\uD83D\uDC69\uD83C\uDFFD‍\uD83D\uDC68\uD83C\uDFFD‍\uD83D\uDC66\uD83C\uDFFD‍\uD83D\uDC66\uD83C\uDFFD\uD83D\uDC69\uD83C\uDFFE‍\uD83D\uDC68\uD83C\uDFFE‍\uD83D\uDC66\uD83C\uDFFE‍\uD83D\uDC66\uD83C\uDFFE\uD83D\uDC69\uD83C\uDFFF‍\uD83D\uDC68\uD83C\uDFFF‍\uD83D\uDC66\uD83C\uDFFF‍\uD83D\uDC66\uD83C\uDFFF\uD83D\uDC69\uD83C\uDFFB‍\uD83D\uDC68\uD83C\uDFFB‍\uD83D\uDC66\uD83C\uDFFB‍\uD83D\uDC66\uD83C\uDFFB\uD83D\uDC69\uD83C\uDFFC‍\uD83D\uDC68\uD83C\uDFFC‍\uD83D\uDC66\uD83C\uDFFC‍\uD83D\uDC66\uD83C\uDFFC\uD83D\uDC69\uD83C\uDFFD‍\uD83D\uDC68\uD83C\uDFFD‍\uD83D\uDC66\uD83C\uDFFD‍\uD83D\uDC66\uD83C\uDFFD\uD83D\uDC69\uD83C\uDFFE‍\uD83D\uDC68\uD83C\uDFFE‍\uD83D\uDC66\uD83C\uDFFE‍\uD83D\uDC66\uD83C\uDFFE\uD83D\uDC69\uD83C\uDFFF‍\uD83D\uDC68\uD83C\uDFFF‍\uD83D\uDC66\uD83C\uDFFF‍\uD83D\uDC66\uD83C\uDFFF\", i);\r\n        assertNotNull(abbreviateResult);\r\n        // assertEquals(expectedResultsFamilyWithCodepoints[i - 4], abbreviateResult);\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\StringUtilsContainsTest.java",
  "methodName" : "testContains_Char",
  "sourceCode" : "@Test\r\nvoid testContains_Char() {\r\n    assertFalse(StringUtils.contains(null, ' '));\r\n    assertFalse(StringUtils.contains(\"\", ' '));\r\n    assertFalse(StringUtils.contains(\"\", null));\r\n    assertFalse(StringUtils.contains(null, null));\r\n    assertTrue(StringUtils.contains(\"abc\", 'a'));\r\n    assertTrue(StringUtils.contains(\"abc\", 'b'));\r\n    assertTrue(StringUtils.contains(\"abc\", 'c'));\r\n    assertFalse(StringUtils.contains(\"abc\", 'z'));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\StringUtilsContainsTest.java",
  "methodName" : "testContains_String",
  "sourceCode" : "@Test\r\nvoid testContains_String() {\r\n    assertFalse(StringUtils.contains(null, null));\r\n    assertFalse(StringUtils.contains(null, \"\"));\r\n    assertFalse(StringUtils.contains(null, \"a\"));\r\n    assertFalse(StringUtils.contains(\"\", null));\r\n    assertTrue(StringUtils.contains(\"\", \"\"));\r\n    assertFalse(StringUtils.contains(\"\", \"a\"));\r\n    assertTrue(StringUtils.contains(\"abc\", \"a\"));\r\n    assertTrue(StringUtils.contains(\"abc\", \"b\"));\r\n    assertTrue(StringUtils.contains(\"abc\", \"c\"));\r\n    assertTrue(StringUtils.contains(\"abc\", \"abc\"));\r\n    assertFalse(StringUtils.contains(\"abc\", \"z\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\StringUtilsContainsTest.java",
  "methodName" : "testContains_StringWithBadSupplementaryChars",
  "sourceCode" : "/**\r\n * See https://www.oracle.com/technical-resources/articles/javase/supplementary.html\r\n */\r\n@Test\r\nvoid testContains_StringWithBadSupplementaryChars() {\r\n    // Test edge case: 1/2 of a (broken) supplementary char\r\n    assertFalse(StringUtils.contains(CharUSuppCharLow, CharU20001));\r\n    assertFalse(StringUtils.contains(CharUSuppCharHigh, CharU20001));\r\n    assertFalse(StringUtils.contains(CharU20001, CharUSuppCharLow));\r\n    assertEquals(0, CharU20001.indexOf(CharUSuppCharHigh));\r\n    assertTrue(StringUtils.contains(CharU20001, CharUSuppCharHigh));\r\n    assertTrue(StringUtils.contains(CharU20001 + CharUSuppCharHigh + \"a\", \"a\"));\r\n    assertTrue(StringUtils.contains(CharU20001 + CharUSuppCharLow + \"a\", \"a\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\StringUtilsContainsTest.java",
  "methodName" : "testContains_StringWithSupplementaryChars",
  "sourceCode" : "/**\r\n * See https://www.oracle.com/technical-resources/articles/javase/supplementary.html\r\n */\r\n@Test\r\nvoid testContains_StringWithSupplementaryChars() {\r\n    assertTrue(StringUtils.contains(CharU20000 + CharU20001, CharU20000));\r\n    assertTrue(StringUtils.contains(CharU20000 + CharU20001, CharU20001));\r\n    assertTrue(StringUtils.contains(CharU20000, CharU20000));\r\n    assertFalse(StringUtils.contains(CharU20000, CharU20001));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\StringUtilsContainsTest.java",
  "methodName" : "testContainsAny_StringCharArray",
  "sourceCode" : "@Test\r\nvoid testContainsAny_StringCharArray() {\r\n    assertFalse(StringUtils.containsAny(null, (char[]) null));\r\n    assertFalse(StringUtils.containsAny(null, new char[0]));\r\n    assertFalse(StringUtils.containsAny(null, 'a', 'b'));\r\n    assertFalse(StringUtils.containsAny(\"\", (char[]) null));\r\n    assertFalse(StringUtils.containsAny(\"\", new char[0]));\r\n    assertFalse(StringUtils.containsAny(\"\", 'a', 'b'));\r\n    assertFalse(StringUtils.containsAny(\"zzabyycdxx\", (char[]) null));\r\n    assertFalse(StringUtils.containsAny(\"zzabyycdxx\", new char[0]));\r\n    assertTrue(StringUtils.containsAny(\"zzabyycdxx\", 'z', 'a'));\r\n    assertTrue(StringUtils.containsAny(\"zzabyycdxx\", 'b', 'y'));\r\n    assertTrue(StringUtils.containsAny(\"zzabyycdxx\", 'z', 'y'));\r\n    assertFalse(StringUtils.containsAny(\"ab\", 'z'));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\StringUtilsContainsTest.java",
  "methodName" : "testContainsAny_StringCharArrayWithBadSupplementaryChars",
  "sourceCode" : "/**\r\n * See https://www.oracle.com/technical-resources/articles/javase/supplementary.html\r\n */\r\n@Test\r\nvoid testContainsAny_StringCharArrayWithBadSupplementaryChars() {\r\n    // Test edge case: 1/2 of a (broken) supplementary char\r\n    assertFalse(StringUtils.containsAny(CharUSuppCharLow, CharU20001.toCharArray()));\r\n    assertFalse(StringUtils.containsAny(\"abc\" + CharUSuppCharLow + \"xyz\", CharU20001.toCharArray()));\r\n    assertEquals(-1, CharUSuppCharHigh.indexOf(CharU20001));\r\n    assertFalse(StringUtils.containsAny(CharUSuppCharHigh, CharU20001.toCharArray()));\r\n    assertFalse(StringUtils.containsAny(CharU20001, CharUSuppCharLow.toCharArray()));\r\n    assertEquals(0, CharU20001.indexOf(CharUSuppCharHigh));\r\n    assertTrue(StringUtils.containsAny(CharU20001, CharUSuppCharHigh.toCharArray()));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\StringUtilsContainsTest.java",
  "methodName" : "testContainsAny_StringCharArrayWithSupplementaryChars",
  "sourceCode" : "/**\r\n * See https://www.oracle.com/technical-resources/articles/javase/supplementary.html\r\n */\r\n@Test\r\nvoid testContainsAny_StringCharArrayWithSupplementaryChars() {\r\n    assertTrue(StringUtils.containsAny(CharU20000 + CharU20001, CharU20000.toCharArray()));\r\n    assertTrue(StringUtils.containsAny(\"a\" + CharU20000 + CharU20001, \"a\".toCharArray()));\r\n    assertTrue(StringUtils.containsAny(CharU20000 + \"a\" + CharU20001, \"a\".toCharArray()));\r\n    assertTrue(StringUtils.containsAny(CharU20000 + CharU20001 + \"a\", \"a\".toCharArray()));\r\n    assertTrue(StringUtils.containsAny(CharU20000 + CharU20001, CharU20001.toCharArray()));\r\n    assertTrue(StringUtils.containsAny(CharU20000, CharU20000.toCharArray()));\r\n    // Sanity check:\r\n    assertEquals(-1, CharU20000.indexOf(CharU20001));\r\n    assertEquals(0, CharU20000.indexOf(CharU20001.charAt(0)));\r\n    assertEquals(-1, CharU20000.indexOf(CharU20001.charAt(1)));\r\n    // Test:\r\n    assertFalse(StringUtils.containsAny(CharU20000, CharU20001.toCharArray()));\r\n    assertFalse(StringUtils.containsAny(CharU20001, CharU20000.toCharArray()));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\StringUtilsContainsTest.java",
  "methodName" : "testContainsAny_StringString",
  "sourceCode" : "@Test\r\nvoid testContainsAny_StringString() {\r\n    assertFalse(StringUtils.containsAny(null, (String) null));\r\n    assertFalse(StringUtils.containsAny(null, \"\"));\r\n    assertFalse(StringUtils.containsAny(null, \"ab\"));\r\n    assertFalse(StringUtils.containsAny(\"\", (String) null));\r\n    assertFalse(StringUtils.containsAny(\"\", \"\"));\r\n    assertFalse(StringUtils.containsAny(\"\", \"ab\"));\r\n    assertFalse(StringUtils.containsAny(\"zzabyycdxx\", (String) null));\r\n    assertFalse(StringUtils.containsAny(\"zzabyycdxx\", \"\"));\r\n    assertTrue(StringUtils.containsAny(\"zzabyycdxx\", \"za\"));\r\n    assertTrue(StringUtils.containsAny(\"zzabyycdxx\", \"by\"));\r\n    assertTrue(StringUtils.containsAny(\"zzabyycdxx\", \"zy\"));\r\n    assertFalse(StringUtils.containsAny(\"ab\", \"z\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\StringUtilsContainsTest.java",
  "methodName" : "testContainsAny_StringStringArray",
  "sourceCode" : "@Test\r\nvoid testContainsAny_StringStringArray() {\r\n    assertFalse(StringUtils.containsAny(null, (String[]) null));\r\n    assertFalse(StringUtils.containsAny(null, new String[0]));\r\n    assertFalse(StringUtils.containsAny(null, new String[] { \"hello\" }));\r\n    assertFalse(StringUtils.containsAny(\"\", (String[]) null));\r\n    assertFalse(StringUtils.containsAny(\"\", new String[0]));\r\n    assertFalse(StringUtils.containsAny(\"\", new String[] { \"hello\" }));\r\n    assertFalse(StringUtils.containsAny(\"hello, goodbye\", (String[]) null));\r\n    assertFalse(StringUtils.containsAny(\"hello, goodbye\", new String[0]));\r\n    assertTrue(StringUtils.containsAny(\"hello, goodbye\", new String[] { \"hello\", \"goodbye\" }));\r\n    assertTrue(StringUtils.containsAny(\"hello, goodbye\", new String[] { \"hello\", \"Goodbye\" }));\r\n    assertFalse(StringUtils.containsAny(\"hello, goodbye\", new String[] { \"Hello\", \"Goodbye\" }));\r\n    assertFalse(StringUtils.containsAny(\"hello, goodbye\", new String[] { \"Hello\", null }));\r\n    assertFalse(StringUtils.containsAny(\"hello, null\", new String[] { \"Hello\", null }));\r\n    // Javadoc examples:\r\n    assertTrue(StringUtils.containsAny(\"abcd\", \"ab\", null));\r\n    assertTrue(StringUtils.containsAny(\"abcd\", \"ab\", \"cd\"));\r\n    assertTrue(StringUtils.containsAny(\"abc\", \"d\", \"abc\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\StringUtilsContainsTest.java",
  "methodName" : "testContainsAny_StringWithBadSupplementaryChars",
  "sourceCode" : "/**\r\n * See https://www.oracle.com/technical-resources/articles/javase/supplementary.html\r\n */\r\n@Test\r\nvoid testContainsAny_StringWithBadSupplementaryChars() {\r\n    // Test edge case: 1/2 of a (broken) supplementary char\r\n    assertFalse(StringUtils.containsAny(CharUSuppCharLow, CharU20001));\r\n    assertEquals(-1, CharUSuppCharHigh.indexOf(CharU20001));\r\n    assertFalse(StringUtils.containsAny(CharUSuppCharHigh, CharU20001));\r\n    assertFalse(StringUtils.containsAny(CharU20001, CharUSuppCharLow));\r\n    assertEquals(0, CharU20001.indexOf(CharUSuppCharHigh));\r\n    assertTrue(StringUtils.containsAny(CharU20001, CharUSuppCharHigh));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\StringUtilsContainsTest.java",
  "methodName" : "testContainsAny_StringWithSupplementaryChars",
  "sourceCode" : "/**\r\n * See https://www.oracle.com/technical-resources/articles/javase/supplementary.html\r\n */\r\n@Test\r\nvoid testContainsAny_StringWithSupplementaryChars() {\r\n    assertTrue(StringUtils.containsAny(CharU20000 + CharU20001, CharU20000));\r\n    assertTrue(StringUtils.containsAny(CharU20000 + CharU20001, CharU20001));\r\n    assertTrue(StringUtils.containsAny(CharU20000, CharU20000));\r\n    // Sanity check:\r\n    assertEquals(-1, CharU20000.indexOf(CharU20001));\r\n    assertEquals(0, CharU20000.indexOf(CharU20001.charAt(0)));\r\n    assertEquals(-1, CharU20000.indexOf(CharU20001.charAt(1)));\r\n    // Test:\r\n    assertFalse(StringUtils.containsAny(CharU20000, CharU20001));\r\n    assertFalse(StringUtils.containsAny(CharU20001, CharU20000));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\StringUtilsContainsTest.java",
  "methodName" : "testContainsAnyIgnoreCase_StringStringArray",
  "sourceCode" : "@Test\r\nvoid testContainsAnyIgnoreCase_StringStringArray() {\r\n    assertFalse(StringUtils.containsAnyIgnoreCase(null, (String[]) null));\r\n    assertFalse(StringUtils.containsAnyIgnoreCase(null, new String[0]));\r\n    assertFalse(StringUtils.containsAnyIgnoreCase(null, new String[] { \"hello\" }));\r\n    assertFalse(StringUtils.containsAnyIgnoreCase(\"\", (String[]) null));\r\n    assertFalse(StringUtils.containsAnyIgnoreCase(\"\", new String[0]));\r\n    assertFalse(StringUtils.containsAnyIgnoreCase(\"\", new String[] { \"hello\" }));\r\n    assertFalse(StringUtils.containsAnyIgnoreCase(\"hello, goodbye\", (String[]) null));\r\n    assertFalse(StringUtils.containsAnyIgnoreCase(\"hello, goodbye\", new String[0]));\r\n    assertTrue(StringUtils.containsAnyIgnoreCase(\"hello, goodbye\", new String[] { \"hello\", \"goodbye\" }));\r\n    assertTrue(StringUtils.containsAnyIgnoreCase(\"hello, goodbye\", new String[] { \"hello\", \"Goodbye\" }));\r\n    assertTrue(StringUtils.containsAnyIgnoreCase(\"hello, goodbye\", new String[] { \"Hello\", \"Goodbye\" }));\r\n    assertTrue(StringUtils.containsAnyIgnoreCase(\"hello, goodbye\", new String[] { \"Hello\", null }));\r\n    assertTrue(StringUtils.containsAnyIgnoreCase(\"hello, null\", new String[] { \"Hello\", null }));\r\n    // Javadoc examples:\r\n    assertTrue(StringUtils.containsAnyIgnoreCase(\"abcd\", \"ab\", null));\r\n    assertTrue(StringUtils.containsAnyIgnoreCase(\"abcd\", \"ab\", \"cd\"));\r\n    assertTrue(StringUtils.containsAnyIgnoreCase(\"abc\", \"d\", \"abc\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\StringUtilsContainsTest.java",
  "methodName" : "testContainsIgnoreCase_LocaleIndependence",
  "sourceCode" : "@Test\r\n@DefaultLocale(language = \"de\", country = \"DE\")\r\n@ReadsDefaultLocale\r\n@WritesDefaultLocale\r\nvoid testContainsIgnoreCase_LocaleIndependence() {\r\n    final Locale[] locales = { Locale.ENGLISH, new Locale(\"tr\"), Locale.getDefault() };\r\n    final String[][] tdata = { { \"i\", \"I\" }, { \"I\", \"i\" }, { \"\\u03C2\", \"\\u03C3\" }, { \"\\u03A3\", \"\\u03C2\" }, { \"\\u03A3\", \"\\u03C3\" } };\r\n    final String[][] fdata = { { \"\\u00DF\", \"SS\" } };\r\n    for (final Locale testLocale : locales) {\r\n        Locale.setDefault(testLocale);\r\n        for (int j = 0; j < tdata.length; j++) {\r\n            assertTrue(StringUtils.containsIgnoreCase(tdata[j][0], tdata[j][1]), Locale.getDefault() + \": \" + j + \" \" + tdata[j][0] + \" \" + tdata[j][1]);\r\n        }\r\n        for (int j = 0; j < fdata.length; j++) {\r\n            assertFalse(StringUtils.containsIgnoreCase(fdata[j][0], fdata[j][1]), Locale.getDefault() + \": \" + j + \" \" + fdata[j][0] + \" \" + fdata[j][1]);\r\n        }\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\StringUtilsContainsTest.java",
  "methodName" : "testContainsIgnoreCase_StringString",
  "sourceCode" : "@Test\r\nvoid testContainsIgnoreCase_StringString() {\r\n    assertFalse(StringUtils.containsIgnoreCase(null, null));\r\n    // Null tests\r\n    assertFalse(StringUtils.containsIgnoreCase(null, \"\"));\r\n    assertFalse(StringUtils.containsIgnoreCase(null, \"a\"));\r\n    assertFalse(StringUtils.containsIgnoreCase(null, \"abc\"));\r\n    assertFalse(StringUtils.containsIgnoreCase(\"\", null));\r\n    assertFalse(StringUtils.containsIgnoreCase(\"a\", null));\r\n    assertFalse(StringUtils.containsIgnoreCase(\"abc\", null));\r\n    // Match len = 0\r\n    assertTrue(StringUtils.containsIgnoreCase(\"\", \"\"));\r\n    assertTrue(StringUtils.containsIgnoreCase(\"a\", \"\"));\r\n    assertTrue(StringUtils.containsIgnoreCase(\"abc\", \"\"));\r\n    // Match len = 1\r\n    assertFalse(StringUtils.containsIgnoreCase(\"\", \"a\"));\r\n    assertTrue(StringUtils.containsIgnoreCase(\"a\", \"a\"));\r\n    assertTrue(StringUtils.containsIgnoreCase(\"abc\", \"a\"));\r\n    assertFalse(StringUtils.containsIgnoreCase(\"\", \"A\"));\r\n    assertTrue(StringUtils.containsIgnoreCase(\"a\", \"A\"));\r\n    assertTrue(StringUtils.containsIgnoreCase(\"abc\", \"A\"));\r\n    // Match len > 1\r\n    assertFalse(StringUtils.containsIgnoreCase(\"\", \"abc\"));\r\n    assertFalse(StringUtils.containsIgnoreCase(\"a\", \"abc\"));\r\n    assertTrue(StringUtils.containsIgnoreCase(\"xabcz\", \"abc\"));\r\n    assertFalse(StringUtils.containsIgnoreCase(\"\", \"ABC\"));\r\n    assertFalse(StringUtils.containsIgnoreCase(\"a\", \"ABC\"));\r\n    assertTrue(StringUtils.containsIgnoreCase(\"xabcz\", \"ABC\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\StringUtilsContainsTest.java",
  "methodName" : "testContainsNone_CharArray",
  "sourceCode" : "@Test\r\nvoid testContainsNone_CharArray() {\r\n    final String str1 = \"a\";\r\n    final String str2 = \"b\";\r\n    final String str3 = \"ab.\";\r\n    final char[] chars1 = { 'b' };\r\n    final char[] chars2 = { '.' };\r\n    final char[] chars3 = { 'c', 'd' };\r\n    final char[] emptyChars = {};\r\n    assertTrue(StringUtils.containsNone(null, (char[]) null));\r\n    assertTrue(StringUtils.containsNone(\"\", (char[]) null));\r\n    assertTrue(StringUtils.containsNone(null, emptyChars));\r\n    assertTrue(StringUtils.containsNone(str1, emptyChars));\r\n    assertTrue(StringUtils.containsNone(\"\", emptyChars));\r\n    assertTrue(StringUtils.containsNone(\"\", chars1));\r\n    assertTrue(StringUtils.containsNone(str1, chars1));\r\n    assertTrue(StringUtils.containsNone(str1, chars2));\r\n    assertTrue(StringUtils.containsNone(str1, chars3));\r\n    assertFalse(StringUtils.containsNone(str2, chars1));\r\n    assertTrue(StringUtils.containsNone(str2, chars2));\r\n    assertTrue(StringUtils.containsNone(str2, chars3));\r\n    assertFalse(StringUtils.containsNone(str3, chars1));\r\n    assertFalse(StringUtils.containsNone(str3, chars2));\r\n    assertTrue(StringUtils.containsNone(str3, chars3));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\StringUtilsContainsTest.java",
  "methodName" : "testContainsNone_CharArrayWithBadSupplementaryChars",
  "sourceCode" : "/**\r\n * See https://www.oracle.com/technical-resources/articles/javase/supplementary.html\r\n */\r\n@Test\r\nvoid testContainsNone_CharArrayWithBadSupplementaryChars() {\r\n    // Test edge case: 1/2 of a (broken) supplementary char\r\n    assertTrue(StringUtils.containsNone(CharUSuppCharLow, CharU20001.toCharArray()));\r\n    assertEquals(-1, CharUSuppCharHigh.indexOf(CharU20001));\r\n    assertTrue(StringUtils.containsNone(CharUSuppCharHigh, CharU20001.toCharArray()));\r\n    assertEquals(-1, CharU20001.indexOf(CharUSuppCharLow));\r\n    assertTrue(StringUtils.containsNone(CharU20001, CharUSuppCharLow.toCharArray()));\r\n    assertEquals(0, CharU20001.indexOf(CharUSuppCharHigh));\r\n    assertFalse(StringUtils.containsNone(CharU20001, CharUSuppCharHigh.toCharArray()));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\StringUtilsContainsTest.java",
  "methodName" : "testContainsNone_CharArrayWithSupplementaryChars",
  "sourceCode" : "/**\r\n * See https://www.oracle.com/technical-resources/articles/javase/supplementary.html\r\n */\r\n@Test\r\nvoid testContainsNone_CharArrayWithSupplementaryChars() {\r\n    assertFalse(StringUtils.containsNone(CharU20000 + CharU20001, CharU20000.toCharArray()));\r\n    assertFalse(StringUtils.containsNone(CharU20000 + CharU20001, CharU20001.toCharArray()));\r\n    assertFalse(StringUtils.containsNone(CharU20000, CharU20000.toCharArray()));\r\n    // Sanity check:\r\n    assertEquals(-1, CharU20000.indexOf(CharU20001));\r\n    assertEquals(0, CharU20000.indexOf(CharU20001.charAt(0)));\r\n    assertEquals(-1, CharU20000.indexOf(CharU20001.charAt(1)));\r\n    // Test:\r\n    assertTrue(StringUtils.containsNone(CharU20000, CharU20001.toCharArray()));\r\n    assertTrue(StringUtils.containsNone(CharU20001, CharU20000.toCharArray()));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\StringUtilsContainsTest.java",
  "methodName" : "testContainsNone_String",
  "sourceCode" : "@Test\r\nvoid testContainsNone_String() {\r\n    final String str1 = \"a\";\r\n    final String str2 = \"b\";\r\n    final String str3 = \"ab.\";\r\n    final String chars1 = \"b\";\r\n    final String chars2 = \".\";\r\n    final String chars3 = \"cd\";\r\n    assertTrue(StringUtils.containsNone(null, (String) null));\r\n    assertTrue(StringUtils.containsNone(\"\", (String) null));\r\n    assertTrue(StringUtils.containsNone(null, \"\"));\r\n    assertTrue(StringUtils.containsNone(str1, \"\"));\r\n    assertTrue(StringUtils.containsNone(\"\", \"\"));\r\n    assertTrue(StringUtils.containsNone(\"\", chars1));\r\n    assertTrue(StringUtils.containsNone(str1, chars1));\r\n    assertTrue(StringUtils.containsNone(str1, chars2));\r\n    assertTrue(StringUtils.containsNone(str1, chars3));\r\n    assertFalse(StringUtils.containsNone(str2, chars1));\r\n    assertTrue(StringUtils.containsNone(str2, chars2));\r\n    assertTrue(StringUtils.containsNone(str2, chars3));\r\n    assertFalse(StringUtils.containsNone(str3, chars1));\r\n    assertFalse(StringUtils.containsNone(str3, chars2));\r\n    assertTrue(StringUtils.containsNone(str3, chars3));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\StringUtilsContainsTest.java",
  "methodName" : "testContainsNone_StringWithBadSupplementaryChars",
  "sourceCode" : "/**\r\n * See https://www.oracle.com/technical-resources/articles/javase/supplementary.html\r\n */\r\n@Test\r\nvoid testContainsNone_StringWithBadSupplementaryChars() {\r\n    // Test edge case: 1/2 of a (broken) supplementary char\r\n    assertTrue(StringUtils.containsNone(CharUSuppCharLow, CharU20001));\r\n    assertEquals(-1, CharUSuppCharHigh.indexOf(CharU20001));\r\n    assertTrue(StringUtils.containsNone(CharUSuppCharHigh, CharU20001));\r\n    assertEquals(-1, CharU20001.indexOf(CharUSuppCharLow));\r\n    assertTrue(StringUtils.containsNone(CharU20001, CharUSuppCharLow));\r\n    assertEquals(0, CharU20001.indexOf(CharUSuppCharHigh));\r\n    assertFalse(StringUtils.containsNone(CharU20001, CharUSuppCharHigh));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\StringUtilsContainsTest.java",
  "methodName" : "testContainsNone_StringWithSupplementaryChars",
  "sourceCode" : "/**\r\n * See https://www.oracle.com/technical-resources/articles/javase/supplementary.html\r\n */\r\n@Test\r\nvoid testContainsNone_StringWithSupplementaryChars() {\r\n    assertFalse(StringUtils.containsNone(CharU20000 + CharU20001, CharU20000));\r\n    assertFalse(StringUtils.containsNone(CharU20000 + CharU20001, CharU20001));\r\n    assertFalse(StringUtils.containsNone(CharU20000, CharU20000));\r\n    // Sanity check:\r\n    assertEquals(-1, CharU20000.indexOf(CharU20001));\r\n    assertEquals(0, CharU20000.indexOf(CharU20001.charAt(0)));\r\n    assertEquals(-1, CharU20000.indexOf(CharU20001.charAt(1)));\r\n    // Test:\r\n    assertTrue(StringUtils.containsNone(CharU20000, CharU20001));\r\n    assertTrue(StringUtils.containsNone(CharU20001, CharU20000));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\StringUtilsContainsTest.java",
  "methodName" : "testContainsOnly_CharArray",
  "sourceCode" : "@Test\r\nvoid testContainsOnly_CharArray() {\r\n    final String str1 = \"a\";\r\n    final String str2 = \"b\";\r\n    final String str3 = \"ab\";\r\n    final char[] chars1 = { 'b' };\r\n    final char[] chars2 = { 'a' };\r\n    final char[] chars3 = { 'a', 'b' };\r\n    final char[] emptyChars = {};\r\n    assertFalse(StringUtils.containsOnly(null, (char[]) null));\r\n    assertFalse(StringUtils.containsOnly(\"\", (char[]) null));\r\n    assertFalse(StringUtils.containsOnly(null, emptyChars));\r\n    assertFalse(StringUtils.containsOnly(str1, emptyChars));\r\n    assertTrue(StringUtils.containsOnly(\"\", emptyChars));\r\n    assertTrue(StringUtils.containsOnly(\"\", chars1));\r\n    assertFalse(StringUtils.containsOnly(str1, chars1));\r\n    assertTrue(StringUtils.containsOnly(str1, chars2));\r\n    assertTrue(StringUtils.containsOnly(str1, chars3));\r\n    assertTrue(StringUtils.containsOnly(str2, chars1));\r\n    assertFalse(StringUtils.containsOnly(str2, chars2));\r\n    assertTrue(StringUtils.containsOnly(str2, chars3));\r\n    assertFalse(StringUtils.containsOnly(str3, chars1));\r\n    assertFalse(StringUtils.containsOnly(str3, chars2));\r\n    assertTrue(StringUtils.containsOnly(str3, chars3));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\StringUtilsContainsTest.java",
  "methodName" : "testContainsOnly_String",
  "sourceCode" : "@Test\r\nvoid testContainsOnly_String() {\r\n    final String str1 = \"a\";\r\n    final String str2 = \"b\";\r\n    final String str3 = \"ab\";\r\n    final String chars1 = \"b\";\r\n    final String chars2 = \"a\";\r\n    final String chars3 = \"ab\";\r\n    assertFalse(StringUtils.containsOnly(null, (String) null));\r\n    assertFalse(StringUtils.containsOnly(\"\", (String) null));\r\n    assertFalse(StringUtils.containsOnly(null, \"\"));\r\n    assertFalse(StringUtils.containsOnly(str1, \"\"));\r\n    assertTrue(StringUtils.containsOnly(\"\", \"\"));\r\n    assertTrue(StringUtils.containsOnly(\"\", chars1));\r\n    assertFalse(StringUtils.containsOnly(str1, chars1));\r\n    assertTrue(StringUtils.containsOnly(str1, chars2));\r\n    assertTrue(StringUtils.containsOnly(str1, chars3));\r\n    assertTrue(StringUtils.containsOnly(str2, chars1));\r\n    assertFalse(StringUtils.containsOnly(str2, chars2));\r\n    assertTrue(StringUtils.containsOnly(str2, chars3));\r\n    assertFalse(StringUtils.containsOnly(str3, chars1));\r\n    assertFalse(StringUtils.containsOnly(str3, chars2));\r\n    assertTrue(StringUtils.containsOnly(str3, chars3));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\StringUtilsContainsTest.java",
  "methodName" : "testContainsWhitespace",
  "sourceCode" : "@Test\r\nvoid testContainsWhitespace() {\r\n    assertFalse(StringUtils.containsWhitespace(\"\"));\r\n    assertTrue(StringUtils.containsWhitespace(\" \"));\r\n    assertFalse(StringUtils.containsWhitespace(\"a\"));\r\n    assertTrue(StringUtils.containsWhitespace(\"a \"));\r\n    assertTrue(StringUtils.containsWhitespace(\" a\"));\r\n    assertTrue(StringUtils.containsWhitespace(\"a\\t\"));\r\n    assertTrue(StringUtils.containsWhitespace(\"\\n\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\StringUtilsEmptyBlankTest.java",
  "methodName" : "testFirstNonBlank",
  "sourceCode" : "@Test\r\nvoid testFirstNonBlank() {\r\n    assertNull(StringUtils.firstNonBlank());\r\n    assertNull(StringUtils.firstNonBlank((String[]) null));\r\n    assertNull(StringUtils.firstNonBlank(null, null, null));\r\n    assertNull(StringUtils.firstNonBlank(null, \"\", \" \"));\r\n    assertNull(StringUtils.firstNonBlank(null, null, \" \"));\r\n    assertEquals(\"a\", StringUtils.firstNonBlank(null, \"a\"));\r\n    assertEquals(\"zz\", StringUtils.firstNonBlank(null, \"zz\"));\r\n    assertEquals(\"abc\", StringUtils.firstNonBlank(\"abc\"));\r\n    assertEquals(\"xyz\", StringUtils.firstNonBlank(null, \"xyz\"));\r\n    assertEquals(\"xyz\", StringUtils.firstNonBlank(null, \"xyz\", \"abc\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\StringUtilsEmptyBlankTest.java",
  "methodName" : "testFirstNonEmpty",
  "sourceCode" : "@Test\r\nvoid testFirstNonEmpty() {\r\n    assertNull(StringUtils.firstNonEmpty());\r\n    assertNull(StringUtils.firstNonEmpty((String[]) null));\r\n    assertNull(StringUtils.firstNonEmpty(null, null, null));\r\n    assertEquals(\" \", StringUtils.firstNonEmpty(null, \"\", \" \"));\r\n    assertNull(StringUtils.firstNonEmpty(null, null, \"\"));\r\n    assertEquals(\"a\", StringUtils.firstNonEmpty(null, \"a\"));\r\n    assertEquals(\"zz\", StringUtils.firstNonEmpty(null, \"zz\"));\r\n    assertEquals(\"abc\", StringUtils.firstNonEmpty(\"abc\"));\r\n    assertEquals(\"xyz\", StringUtils.firstNonEmpty(null, \"xyz\"));\r\n    assertEquals(\"xyz\", StringUtils.firstNonEmpty(null, \"xyz\", \"abc\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\StringUtilsEmptyBlankTest.java",
  "methodName" : "testIsAllBlank",
  "sourceCode" : "@Test\r\nvoid testIsAllBlank() {\r\n    assertTrue(StringUtils.isAllBlank((String) null));\r\n    assertTrue(StringUtils.isAllBlank((String[]) null));\r\n    assertTrue(StringUtils.isAllBlank(null, null));\r\n    assertTrue(StringUtils.isAllBlank(null, \" \"));\r\n    assertFalse(StringUtils.isAllBlank(null, \"foo\"));\r\n    assertFalse(StringUtils.isAllBlank(null, \"a\"));\r\n    assertFalse(StringUtils.isAllBlank(\"\", \"bar\"));\r\n    assertFalse(StringUtils.isAllBlank(\"bob\", \"\"));\r\n    assertFalse(StringUtils.isAllBlank(\"  bob  \", null));\r\n    assertFalse(StringUtils.isAllBlank(\" \", \"bar\"));\r\n    assertFalse(StringUtils.isAllBlank(\"foo\", \"bar\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\StringUtilsEmptyBlankTest.java",
  "methodName" : "testIsAllEmpty",
  "sourceCode" : "@Test\r\nvoid testIsAllEmpty() {\r\n    assertTrue(StringUtils.isAllEmpty());\r\n    assertTrue(StringUtils.isAllEmpty());\r\n    assertTrue(StringUtils.isAllEmpty((String) null));\r\n    assertTrue(StringUtils.isAllEmpty((String[]) null));\r\n    assertFalse(StringUtils.isAllEmpty(null, \"foo\"));\r\n    assertFalse(StringUtils.isAllEmpty(null, \"a\"));\r\n    assertFalse(StringUtils.isAllEmpty(\"\", \"bar\"));\r\n    assertFalse(StringUtils.isAllEmpty(\"bob\", \"\"));\r\n    assertFalse(StringUtils.isAllEmpty(\"  bob  \", null));\r\n    assertFalse(StringUtils.isAllEmpty(\" \", \"bar\"));\r\n    assertFalse(StringUtils.isAllEmpty(\"foo\", \"bar\"));\r\n    assertTrue(StringUtils.isAllEmpty(\"\", null));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\StringUtilsEmptyBlankTest.java",
  "methodName" : "testIsAnyBlank",
  "sourceCode" : "@Test\r\nvoid testIsAnyBlank() {\r\n    assertTrue(StringUtils.isAnyBlank((String) null));\r\n    assertFalse(StringUtils.isAnyBlank((String[]) null));\r\n    assertTrue(StringUtils.isAnyBlank(null, \"foo\"));\r\n    assertTrue(StringUtils.isAnyBlank(null, null));\r\n    assertTrue(StringUtils.isAnyBlank(\"\", \"bar\"));\r\n    assertTrue(StringUtils.isAnyBlank(\"bob\", \"\"));\r\n    assertTrue(StringUtils.isAnyBlank(\"  bob  \", null));\r\n    assertTrue(StringUtils.isAnyBlank(\" \", \"bar\"));\r\n    assertFalse(StringUtils.isAnyBlank(\"foo\", \"bar\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\StringUtilsEmptyBlankTest.java",
  "methodName" : "testIsAnyEmpty",
  "sourceCode" : "@Test\r\nvoid testIsAnyEmpty() {\r\n    assertTrue(StringUtils.isAnyEmpty((String) null));\r\n    assertFalse(StringUtils.isAnyEmpty((String[]) null));\r\n    assertTrue(StringUtils.isAnyEmpty(null, \"foo\"));\r\n    assertTrue(StringUtils.isAnyEmpty(null, \"a\"));\r\n    assertTrue(StringUtils.isAnyEmpty(\"\", \"bar\"));\r\n    assertTrue(StringUtils.isAnyEmpty(\"bob\", \"\"));\r\n    assertTrue(StringUtils.isAnyEmpty(\"  bob  \", null));\r\n    assertFalse(StringUtils.isAnyEmpty(\" \", \"bar\"));\r\n    assertFalse(StringUtils.isAnyEmpty(\"foo\", \"bar\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\StringUtilsEmptyBlankTest.java",
  "methodName" : "testIsBlank",
  "sourceCode" : "@Test\r\nvoid testIsBlank() {\r\n    assertTrue(StringUtils.isBlank(null));\r\n    assertTrue(StringUtils.isBlank(\"\"));\r\n    assertTrue(StringUtils.isBlank(StringUtilsTest.WHITESPACE));\r\n    assertFalse(StringUtils.isBlank(\"a\"));\r\n    assertFalse(StringUtils.isBlank(\"foo\"));\r\n    assertFalse(StringUtils.isBlank(\"  foo  \"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\StringUtilsEmptyBlankTest.java",
  "methodName" : "testIsEmpty",
  "sourceCode" : "@Test\r\nvoid testIsEmpty() {\r\n    assertTrue(StringUtils.isEmpty(null));\r\n    assertTrue(StringUtils.isEmpty(\"\"));\r\n    assertFalse(StringUtils.isEmpty(\" \"));\r\n    assertFalse(StringUtils.isEmpty(\"a\"));\r\n    assertFalse(StringUtils.isEmpty(\"foo\"));\r\n    assertFalse(StringUtils.isEmpty(\"  foo  \"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\StringUtilsEmptyBlankTest.java",
  "methodName" : "testIsNoneBlank",
  "sourceCode" : "@Test\r\nvoid testIsNoneBlank() {\r\n    assertFalse(StringUtils.isNoneBlank((String) null));\r\n    assertTrue(StringUtils.isNoneBlank((String[]) null));\r\n    assertFalse(StringUtils.isNoneBlank(null, \"a\"));\r\n    assertFalse(StringUtils.isNoneBlank(null, \"foo\"));\r\n    assertFalse(StringUtils.isNoneBlank(null, null));\r\n    assertFalse(StringUtils.isNoneBlank(\"\", \"bar\"));\r\n    assertFalse(StringUtils.isNoneBlank(\"a\", \"\"));\r\n    assertFalse(StringUtils.isNoneBlank(\"bob\", \"\"));\r\n    assertFalse(StringUtils.isNoneBlank(\"  bob  \", null));\r\n    assertFalse(StringUtils.isNoneBlank(\" \", \"bar\"));\r\n    assertTrue(StringUtils.isNoneBlank(\"foo\", \"bar\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\StringUtilsEmptyBlankTest.java",
  "methodName" : "testIsNoneEmpty",
  "sourceCode" : "@Test\r\nvoid testIsNoneEmpty() {\r\n    assertFalse(StringUtils.isNoneEmpty((String) null));\r\n    assertTrue(StringUtils.isNoneEmpty((String[]) null));\r\n    assertFalse(StringUtils.isNoneEmpty(null, \"a\"));\r\n    assertFalse(StringUtils.isNoneEmpty(null, \"foo\"));\r\n    assertFalse(StringUtils.isNoneEmpty(\"\", \"bar\"));\r\n    assertFalse(StringUtils.isNoneEmpty(\"bob\", \"\"));\r\n    assertFalse(StringUtils.isNoneEmpty(\"a\", \"\"));\r\n    assertFalse(StringUtils.isNoneEmpty(\"  bob  \", null));\r\n    assertTrue(StringUtils.isNoneEmpty(\" \", \"bar\"));\r\n    assertTrue(StringUtils.isNoneEmpty(\"foo\", \"bar\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\StringUtilsEmptyBlankTest.java",
  "methodName" : "testIsNotBlank",
  "sourceCode" : "@Test\r\nvoid testIsNotBlank() {\r\n    assertFalse(StringUtils.isNotBlank(null));\r\n    assertFalse(StringUtils.isNotBlank(\"\"));\r\n    assertFalse(StringUtils.isNotBlank(StringUtilsTest.WHITESPACE));\r\n    assertTrue(StringUtils.isNotBlank(\"a\"));\r\n    assertTrue(StringUtils.isNotBlank(\"foo\"));\r\n    assertTrue(StringUtils.isNotBlank(\"  foo  \"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\StringUtilsEmptyBlankTest.java",
  "methodName" : "testIsNotEmpty",
  "sourceCode" : "@Test\r\nvoid testIsNotEmpty() {\r\n    assertFalse(StringUtils.isNotEmpty(null));\r\n    assertFalse(StringUtils.isNotEmpty(\"\"));\r\n    assertTrue(StringUtils.isNotEmpty(\" \"));\r\n    assertTrue(StringUtils.isNotEmpty(\"a\"));\r\n    assertTrue(StringUtils.isNotEmpty(\"foo\"));\r\n    assertTrue(StringUtils.isNotEmpty(\"  foo  \"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\StringUtilsEqualsIndexOfTest.java",
  "methodName" : "testCompare_StringString",
  "sourceCode" : "@Test\r\nvoid testCompare_StringString() {\r\n    assertEquals(0, StringUtils.compare(null, null));\r\n    assertTrue(StringUtils.compare(null, \"a\") < 0);\r\n    assertTrue(StringUtils.compare(\"a\", null) > 0);\r\n    assertEquals(0, StringUtils.compare(\"abc\", \"abc\"));\r\n    assertTrue(StringUtils.compare(\"a\", \"b\") < 0);\r\n    assertTrue(StringUtils.compare(\"b\", \"a\") > 0);\r\n    assertTrue(StringUtils.compare(\"a\", \"B\") > 0);\r\n    assertTrue(StringUtils.compare(\"abc\", \"abd\") < 0);\r\n    assertTrue(StringUtils.compare(\"ab\", \"abc\") < 0);\r\n    assertTrue(StringUtils.compare(\"ab\", \"ab \") < 0);\r\n    assertTrue(StringUtils.compare(\"abc\", \"ab \") > 0);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\StringUtilsEqualsIndexOfTest.java",
  "methodName" : "testCompare_StringStringBoolean",
  "sourceCode" : "@Test\r\nvoid testCompare_StringStringBoolean() {\r\n    assertEquals(0, StringUtils.compare(null, null, false));\r\n    assertTrue(StringUtils.compare(null, \"a\", true) < 0);\r\n    assertTrue(StringUtils.compare(null, \"a\", false) > 0);\r\n    assertTrue(StringUtils.compare(\"a\", null, true) > 0);\r\n    assertTrue(StringUtils.compare(\"a\", null, false) < 0);\r\n    assertEquals(0, StringUtils.compare(\"abc\", \"abc\", false));\r\n    assertTrue(StringUtils.compare(\"a\", \"b\", false) < 0);\r\n    assertTrue(StringUtils.compare(\"b\", \"a\", false) > 0);\r\n    assertTrue(StringUtils.compare(\"a\", \"B\", false) > 0);\r\n    assertTrue(StringUtils.compare(\"abc\", \"abd\", false) < 0);\r\n    assertTrue(StringUtils.compare(\"ab\", \"abc\", false) < 0);\r\n    assertTrue(StringUtils.compare(\"ab\", \"ab \", false) < 0);\r\n    assertTrue(StringUtils.compare(\"abc\", \"ab \", false) > 0);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\StringUtilsEqualsIndexOfTest.java",
  "methodName" : "testCompareIgnoreCase_StringString",
  "sourceCode" : "@Test\r\nvoid testCompareIgnoreCase_StringString() {\r\n    assertEquals(0, StringUtils.compareIgnoreCase(null, null));\r\n    assertTrue(StringUtils.compareIgnoreCase(null, \"a\") < 0);\r\n    assertTrue(StringUtils.compareIgnoreCase(\"a\", null) > 0);\r\n    assertEquals(0, StringUtils.compareIgnoreCase(\"abc\", \"abc\"));\r\n    assertEquals(0, StringUtils.compareIgnoreCase(\"abc\", \"ABC\"));\r\n    assertTrue(StringUtils.compareIgnoreCase(\"a\", \"b\") < 0);\r\n    assertTrue(StringUtils.compareIgnoreCase(\"b\", \"a\") > 0);\r\n    assertTrue(StringUtils.compareIgnoreCase(\"a\", \"B\") < 0);\r\n    assertTrue(StringUtils.compareIgnoreCase(\"A\", \"b\") < 0);\r\n    assertTrue(StringUtils.compareIgnoreCase(\"abc\", \"ABD\") < 0);\r\n    assertTrue(StringUtils.compareIgnoreCase(\"ab\", \"ABC\") < 0);\r\n    assertTrue(StringUtils.compareIgnoreCase(\"ab\", \"AB \") < 0);\r\n    assertTrue(StringUtils.compareIgnoreCase(\"abc\", \"AB \") > 0);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\StringUtilsEqualsIndexOfTest.java",
  "methodName" : "testCompareIgnoreCase_StringStringBoolean",
  "sourceCode" : "@Test\r\nvoid testCompareIgnoreCase_StringStringBoolean() {\r\n    assertEquals(0, StringUtils.compareIgnoreCase(null, null, false));\r\n    assertTrue(StringUtils.compareIgnoreCase(null, \"a\", true) < 0);\r\n    assertTrue(StringUtils.compareIgnoreCase(null, \"a\", false) > 0);\r\n    assertTrue(StringUtils.compareIgnoreCase(\"a\", null, true) > 0);\r\n    assertTrue(StringUtils.compareIgnoreCase(\"a\", null, false) < 0);\r\n    assertEquals(0, StringUtils.compareIgnoreCase(\"abc\", \"abc\", false));\r\n    assertEquals(0, StringUtils.compareIgnoreCase(\"abc\", \"ABC\", false));\r\n    assertTrue(StringUtils.compareIgnoreCase(\"a\", \"b\", false) < 0);\r\n    assertTrue(StringUtils.compareIgnoreCase(\"b\", \"a\", false) > 0);\r\n    assertTrue(StringUtils.compareIgnoreCase(\"a\", \"B\", false) < 0);\r\n    assertTrue(StringUtils.compareIgnoreCase(\"A\", \"b\", false) < 0);\r\n    assertTrue(StringUtils.compareIgnoreCase(\"abc\", \"ABD\", false) < 0);\r\n    assertTrue(StringUtils.compareIgnoreCase(\"ab\", \"ABC\", false) < 0);\r\n    assertTrue(StringUtils.compareIgnoreCase(\"ab\", \"AB \", false) < 0);\r\n    assertTrue(StringUtils.compareIgnoreCase(\"abc\", \"AB \", false) > 0);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\StringUtilsEqualsIndexOfTest.java",
  "methodName" : "testCustomCharSequence",
  "sourceCode" : "@Test\r\nvoid testCustomCharSequence() {\r\n    assertNotEquals(FOO, new CustomCharSequence(FOO));\r\n    assertNotEquals(new CustomCharSequence(FOO), FOO);\r\n    assertEquals(new CustomCharSequence(FOO), new CustomCharSequence(FOO));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\StringUtilsEqualsIndexOfTest.java",
  "methodName" : "testEquals",
  "sourceCode" : "@Test\r\nvoid testEquals() {\r\n    final CharSequence fooCs = new StringBuilder(FOO);\r\n    final CharSequence barCs = new StringBuilder(BAR);\r\n    final CharSequence foobarCs = new StringBuilder(FOOBAR);\r\n    assertTrue(StringUtils.equals(null, null));\r\n    assertTrue(StringUtils.equals(fooCs, fooCs));\r\n    assertTrue(StringUtils.equals(fooCs, new StringBuilder(FOO)));\r\n    assertTrue(StringUtils.equals(fooCs, new String(new char[] { 'f', 'o', 'o' })));\r\n    assertTrue(StringUtils.equals(fooCs, new CustomCharSequence(FOO)));\r\n    assertTrue(StringUtils.equals(new CustomCharSequence(FOO), fooCs));\r\n    assertFalse(StringUtils.equals(fooCs, new String(new char[] { 'f', 'O', 'O' })));\r\n    assertFalse(StringUtils.equals(fooCs, barCs));\r\n    assertFalse(StringUtils.equals(fooCs, null));\r\n    assertFalse(StringUtils.equals(null, fooCs));\r\n    assertFalse(StringUtils.equals(fooCs, foobarCs));\r\n    assertFalse(StringUtils.equals(foobarCs, fooCs));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\StringUtilsEqualsIndexOfTest.java",
  "methodName" : "testEqualsAny",
  "sourceCode" : "@Test\r\nvoid testEqualsAny() {\r\n    assertFalse(StringUtils.equalsAny(FOO));\r\n    assertFalse(StringUtils.equalsAny(FOO, new String[] {}));\r\n    assertTrue(StringUtils.equalsAny(FOO, FOO));\r\n    assertTrue(StringUtils.equalsAny(FOO, BAR, new String(new char[] { 'f', 'o', 'o' })));\r\n    assertFalse(StringUtils.equalsAny(FOO, BAR, new String(new char[] { 'f', 'O', 'O' })));\r\n    assertFalse(StringUtils.equalsAny(FOO, BAR));\r\n    assertFalse(StringUtils.equalsAny(FOO, BAR, null));\r\n    assertFalse(StringUtils.equalsAny(null, FOO));\r\n    assertFalse(StringUtils.equalsAny(FOO, FOOBAR));\r\n    assertFalse(StringUtils.equalsAny(FOOBAR, FOO));\r\n    assertTrue(StringUtils.equalsAny(null, null, null));\r\n    assertFalse(StringUtils.equalsAny(null, FOO, BAR, FOOBAR));\r\n    assertFalse(StringUtils.equalsAny(FOO, null, BAR));\r\n    assertTrue(StringUtils.equalsAny(FOO, BAR, null, \"\", FOO, BAR));\r\n    assertFalse(StringUtils.equalsAny(FOO, FOO.toUpperCase(Locale.ROOT)));\r\n    assertFalse(StringUtils.equalsAny(null, (CharSequence[]) null));\r\n    assertTrue(StringUtils.equalsAny(FOO, new CustomCharSequence(\"foo\")));\r\n    assertTrue(StringUtils.equalsAny(FOO, new StringBuilder(\"foo\")));\r\n    assertFalse(StringUtils.equalsAny(FOO, new CustomCharSequence(\"fOo\")));\r\n    assertFalse(StringUtils.equalsAny(FOO, new StringBuilder(\"fOo\")));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\StringUtilsEqualsIndexOfTest.java",
  "methodName" : "testEqualsAnyIgnoreCase",
  "sourceCode" : "@Test\r\nvoid testEqualsAnyIgnoreCase() {\r\n    assertFalse(StringUtils.equalsAnyIgnoreCase(FOO));\r\n    assertFalse(StringUtils.equalsAnyIgnoreCase(FOO, new String[] {}));\r\n    assertTrue(StringUtils.equalsAnyIgnoreCase(FOO, FOO));\r\n    assertTrue(StringUtils.equalsAnyIgnoreCase(FOO, FOO.toUpperCase(Locale.ROOT)));\r\n    assertTrue(StringUtils.equalsAnyIgnoreCase(FOO, FOO, new String(new char[] { 'f', 'o', 'o' })));\r\n    assertTrue(StringUtils.equalsAnyIgnoreCase(FOO, BAR, new String(new char[] { 'f', 'O', 'O' })));\r\n    assertFalse(StringUtils.equalsAnyIgnoreCase(FOO, BAR));\r\n    assertFalse(StringUtils.equalsAnyIgnoreCase(FOO, BAR, null));\r\n    assertFalse(StringUtils.equalsAnyIgnoreCase(null, FOO));\r\n    assertFalse(StringUtils.equalsAnyIgnoreCase(FOO, FOOBAR));\r\n    assertFalse(StringUtils.equalsAnyIgnoreCase(FOOBAR, FOO));\r\n    assertTrue(StringUtils.equalsAnyIgnoreCase(null, null, null));\r\n    assertFalse(StringUtils.equalsAnyIgnoreCase(null, FOO, BAR, FOOBAR));\r\n    assertFalse(StringUtils.equalsAnyIgnoreCase(FOO, null, BAR));\r\n    assertTrue(StringUtils.equalsAnyIgnoreCase(FOO, BAR, null, \"\", FOO.toUpperCase(Locale.ROOT), BAR));\r\n    assertTrue(StringUtils.equalsAnyIgnoreCase(FOO, FOO.toUpperCase(Locale.ROOT)));\r\n    assertFalse(StringUtils.equalsAnyIgnoreCase(null, (CharSequence[]) null));\r\n    assertTrue(StringUtils.equalsAnyIgnoreCase(FOO, new CustomCharSequence(\"fOo\")));\r\n    assertTrue(StringUtils.equalsAnyIgnoreCase(FOO, new StringBuilder(\"fOo\")));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\StringUtilsEqualsIndexOfTest.java",
  "methodName" : "testEqualsIgnoreCase",
  "sourceCode" : "@Test\r\nvoid testEqualsIgnoreCase() {\r\n    assertTrue(StringUtils.equalsIgnoreCase(null, null));\r\n    assertTrue(StringUtils.equalsIgnoreCase(FOO, FOO));\r\n    assertTrue(StringUtils.equalsIgnoreCase(FOO, new String(new char[] { 'f', 'o', 'o' })));\r\n    assertTrue(StringUtils.equalsIgnoreCase(FOO, new String(new char[] { 'f', 'O', 'O' })));\r\n    assertFalse(StringUtils.equalsIgnoreCase(FOO, BAR));\r\n    assertFalse(StringUtils.equalsIgnoreCase(FOO, null));\r\n    assertFalse(StringUtils.equalsIgnoreCase(null, FOO));\r\n    assertTrue(StringUtils.equalsIgnoreCase(\"\", \"\"));\r\n    assertFalse(StringUtils.equalsIgnoreCase(\"abcd\", \"abcd \"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\StringUtilsEqualsIndexOfTest.java",
  "methodName" : "testEqualsOnStrings",
  "sourceCode" : "@Test\r\nvoid testEqualsOnStrings() {\r\n    assertTrue(StringUtils.equals(null, null));\r\n    assertTrue(StringUtils.equals(FOO, FOO));\r\n    assertTrue(StringUtils.equals(FOO, new String(new char[] { 'f', 'o', 'o' })));\r\n    assertFalse(StringUtils.equals(FOO, new String(new char[] { 'f', 'O', 'O' })));\r\n    assertFalse(StringUtils.equals(FOO, BAR));\r\n    assertFalse(StringUtils.equals(FOO, null));\r\n    assertFalse(StringUtils.equals(null, FOO));\r\n    assertFalse(StringUtils.equals(FOO, FOOBAR));\r\n    assertFalse(StringUtils.equals(FOOBAR, FOO));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\StringUtilsEqualsIndexOfTest.java",
  "methodName" : "testIndexOf_char",
  "sourceCode" : "@Test\r\nvoid testIndexOf_char() {\r\n    assertEquals(-1, StringUtils.indexOf(null, ' '));\r\n    assertEquals(-1, StringUtils.indexOf(\"\", ' '));\r\n    assertEquals(0, StringUtils.indexOf(\"aabaabaa\", 'a'));\r\n    assertEquals(2, StringUtils.indexOf(\"aabaabaa\", 'b'));\r\n    assertEquals(2, StringUtils.indexOf(new StringBuilder(\"aabaabaa\"), 'b'));\r\n    assertEquals(StringUtils.INDEX_NOT_FOUND, StringUtils.indexOf(new StringBuilder(\"aabaabaa\"), -1738));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\StringUtilsEqualsIndexOfTest.java",
  "methodName" : "testIndexOf_charInt",
  "sourceCode" : "@Test\r\nvoid testIndexOf_charInt() {\r\n    assertEquals(-1, StringUtils.indexOf(null, ' ', 0));\r\n    assertEquals(-1, StringUtils.indexOf(null, ' ', -1));\r\n    assertEquals(-1, StringUtils.indexOf(\"\", ' ', 0));\r\n    assertEquals(-1, StringUtils.indexOf(\"\", ' ', -1));\r\n    assertEquals(0, StringUtils.indexOf(\"aabaabaa\", 'a', 0));\r\n    assertEquals(2, StringUtils.indexOf(\"aabaabaa\", 'b', 0));\r\n    assertEquals(5, StringUtils.indexOf(\"aabaabaa\", 'b', 3));\r\n    assertEquals(-1, StringUtils.indexOf(\"aabaabaa\", 'b', 9));\r\n    assertEquals(2, StringUtils.indexOf(\"aabaabaa\", 'b', -1));\r\n    assertEquals(5, StringUtils.indexOf(new StringBuilder(\"aabaabaa\"), 'b', 3));\r\n    //LANG-1300 tests go here\r\n    final int CODE_POINT = 0x2070E;\r\n    StringBuilder builder = new StringBuilder();\r\n    builder.appendCodePoint(CODE_POINT);\r\n    assertEquals(0, StringUtils.indexOf(builder, CODE_POINT, 0));\r\n    assertEquals(0, StringUtils.indexOf(builder.toString(), CODE_POINT, 0));\r\n    builder.appendCodePoint(CODE_POINT);\r\n    assertEquals(2, StringUtils.indexOf(builder, CODE_POINT, 1));\r\n    assertEquals(2, StringUtils.indexOf(builder.toString(), CODE_POINT, 1));\r\n    // inner branch on the supplementary character block\r\n    final char[] tmp = { (char) 55361 };\r\n    builder = new StringBuilder();\r\n    builder.append(tmp);\r\n    assertEquals(-1, StringUtils.indexOf(builder, CODE_POINT, 0));\r\n    assertEquals(-1, StringUtils.indexOf(builder.toString(), CODE_POINT, 0));\r\n    builder.appendCodePoint(CODE_POINT);\r\n    assertEquals(1, StringUtils.indexOf(builder, CODE_POINT, 0));\r\n    assertEquals(1, StringUtils.indexOf(builder.toString(), CODE_POINT, 0));\r\n    assertEquals(-1, StringUtils.indexOf(builder, CODE_POINT, 2));\r\n    assertEquals(-1, StringUtils.indexOf(builder.toString(), CODE_POINT, 2));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\StringUtilsEqualsIndexOfTest.java",
  "methodName" : "testIndexOf_String",
  "sourceCode" : "@Test\r\nvoid testIndexOf_String() {\r\n    assertEquals(-1, StringUtils.indexOf(null, null));\r\n    assertEquals(-1, StringUtils.indexOf(\"\", null));\r\n    assertEquals(0, StringUtils.indexOf(\"\", \"\"));\r\n    assertEquals(0, StringUtils.indexOf(\"aabaabaa\", \"a\"));\r\n    assertEquals(2, StringUtils.indexOf(\"aabaabaa\", \"b\"));\r\n    assertEquals(1, StringUtils.indexOf(\"aabaabaa\", \"ab\"));\r\n    assertEquals(0, StringUtils.indexOf(\"aabaabaa\", \"\"));\r\n    assertEquals(2, StringUtils.indexOf(new StringBuilder(\"aabaabaa\"), \"b\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\StringUtilsEqualsIndexOfTest.java",
  "methodName" : "testIndexOf_StringInt",
  "sourceCode" : "@Test\r\nvoid testIndexOf_StringInt() {\r\n    assertEquals(-1, StringUtils.indexOf(null, null, 0));\r\n    assertEquals(-1, StringUtils.indexOf(null, null, -1));\r\n    assertEquals(-1, StringUtils.indexOf(null, \"\", 0));\r\n    assertEquals(-1, StringUtils.indexOf(null, \"\", -1));\r\n    assertEquals(-1, StringUtils.indexOf(\"\", null, 0));\r\n    assertEquals(-1, StringUtils.indexOf(\"\", null, -1));\r\n    assertEquals(0, StringUtils.indexOf(\"\", \"\", 0));\r\n    assertEquals(0, StringUtils.indexOf(\"\", \"\", -1));\r\n    assertEquals(0, StringUtils.indexOf(\"\", \"\", 9));\r\n    assertEquals(0, StringUtils.indexOf(\"abc\", \"\", 0));\r\n    assertEquals(0, StringUtils.indexOf(\"abc\", \"\", -1));\r\n    assertEquals(3, StringUtils.indexOf(\"abc\", \"\", 9));\r\n    assertEquals(3, StringUtils.indexOf(\"abc\", \"\", 3));\r\n    assertEquals(0, StringUtils.indexOf(\"aabaabaa\", \"a\", 0));\r\n    assertEquals(2, StringUtils.indexOf(\"aabaabaa\", \"b\", 0));\r\n    assertEquals(1, StringUtils.indexOf(\"aabaabaa\", \"ab\", 0));\r\n    assertEquals(5, StringUtils.indexOf(\"aabaabaa\", \"b\", 3));\r\n    assertEquals(-1, StringUtils.indexOf(\"aabaabaa\", \"b\", 9));\r\n    assertEquals(2, StringUtils.indexOf(\"aabaabaa\", \"b\", -1));\r\n    assertEquals(2, StringUtils.indexOf(\"aabaabaa\", \"\", 2));\r\n    // Test that startIndex works correctly, i.e. cannot match before startIndex\r\n    assertEquals(7, StringUtils.indexOf(\"12345678\", \"8\", 5));\r\n    assertEquals(7, StringUtils.indexOf(\"12345678\", \"8\", 6));\r\n    // 7 is last index\r\n    assertEquals(7, StringUtils.indexOf(\"12345678\", \"8\", 7));\r\n    assertEquals(-1, StringUtils.indexOf(\"12345678\", \"8\", 8));\r\n    assertEquals(5, StringUtils.indexOf(new StringBuilder(\"aabaabaa\"), \"b\", 3));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\StringUtilsEqualsIndexOfTest.java",
  "methodName" : "testIndexOfAny_StringCharArray",
  "sourceCode" : "@Test\r\nvoid testIndexOfAny_StringCharArray() {\r\n    assertEquals(-1, StringUtils.indexOfAny(null, (char[]) null));\r\n    assertEquals(-1, StringUtils.indexOfAny(null, new char[0]));\r\n    assertEquals(-1, StringUtils.indexOfAny(null, 'a', 'b'));\r\n    assertEquals(-1, StringUtils.indexOfAny(\"\", (char[]) null));\r\n    assertEquals(-1, StringUtils.indexOfAny(\"\", new char[0]));\r\n    assertEquals(-1, StringUtils.indexOfAny(\"\", 'a', 'b'));\r\n    assertEquals(-1, StringUtils.indexOfAny(\"zzabyycdxx\", (char[]) null));\r\n    assertEquals(-1, StringUtils.indexOfAny(\"zzabyycdxx\", new char[0]));\r\n    assertEquals(0, StringUtils.indexOfAny(\"zzabyycdxx\", 'z', 'a'));\r\n    assertEquals(3, StringUtils.indexOfAny(\"zzabyycdxx\", 'b', 'y'));\r\n    assertEquals(-1, StringUtils.indexOfAny(\"ab\", 'z'));\r\n    // if more than one search char is present, the order of the search chars matters:\r\n    assertEquals(0, StringUtils.indexOfAny(\"abcd\", 'a', 'b', 'c', 'd'));\r\n    assertEquals(0, StringUtils.indexOfAny(\"bcda\", 'a', 'b', 'c', 'd'));\r\n    assertEquals(0, StringUtils.indexOfAny(\"cbda\", 'a', 'b', 'c', 'd'));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\StringUtilsEqualsIndexOfTest.java",
  "methodName" : "testIndexOfAny_StringCharArrayWithSupplementaryChars",
  "sourceCode" : "/**\r\n * See https://www.oracle.com/technical-resources/articles/javase/supplementary.html\r\n */\r\n@Test\r\nvoid testIndexOfAny_StringCharArrayWithSupplementaryChars() {\r\n    assertEquals(0, StringUtils.indexOfAny(CharU20000 + CharU20001, CharU20000.toCharArray()));\r\n    assertEquals(2, StringUtils.indexOfAny(CharU20000 + CharU20001, CharU20001.toCharArray()));\r\n    assertEquals(0, StringUtils.indexOfAny(CharU20000, CharU20000.toCharArray()));\r\n    assertEquals(-1, StringUtils.indexOfAny(CharU20000, CharU20001.toCharArray()));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\StringUtilsEqualsIndexOfTest.java",
  "methodName" : "testIndexOfAny_StringIntCharArray",
  "sourceCode" : "@Test\r\nvoid testIndexOfAny_StringIntCharArray() {\r\n    // default cases\r\n    assertEquals(-1, StringUtils.indexOfAny(null, 0, (char[]) null));\r\n    assertEquals(-1, StringUtils.indexOfAny(null, 0, new char[0]));\r\n    assertEquals(-1, StringUtils.indexOfAny(null, 0, 'a', 'b'));\r\n    assertEquals(-1, StringUtils.indexOfAny(\"\", 0, (char[]) null));\r\n    assertEquals(-1, StringUtils.indexOfAny(\"\", 0, new char[0]));\r\n    assertEquals(-1, StringUtils.indexOfAny(\"\", 0, 'a', 'b'));\r\n    assertEquals(-1, StringUtils.indexOfAny(\"zzabyycdxx\", 0, (char[]) null));\r\n    assertEquals(-1, StringUtils.indexOfAny(\"zzabyycdxx\", 0, new char[0]));\r\n    assertEquals(0, StringUtils.indexOfAny(\"zzabyycdxx\", 0, 'z', 'a'));\r\n    assertEquals(3, StringUtils.indexOfAny(\"zzabyycdxx\", 0, 'b', 'y'));\r\n    assertEquals(-1, StringUtils.indexOfAny(\"ab\", 0, 'z'));\r\n    // if more than one search char is present, the order of the search chars matters:\r\n    assertEquals(0, StringUtils.indexOfAny(\"abcd\", 0, 'a', 'b', 'c', 'd'));\r\n    assertEquals(0, StringUtils.indexOfAny(\"bcda\", 0, 'a', 'b', 'c', 'd'));\r\n    assertEquals(0, StringUtils.indexOfAny(\"cbda\", 0, 'a', 'b', 'c', 'd'));\r\n    // Actually use the index\r\n    assertEquals(-1, StringUtils.indexOfAny(null, 1, (char[]) null));\r\n    assertEquals(-1, StringUtils.indexOfAny(null, 1, new char[0]));\r\n    assertEquals(-1, StringUtils.indexOfAny(null, 1, 'a', 'b'));\r\n    assertEquals(-1, StringUtils.indexOfAny(\"\", 1, (char[]) null));\r\n    assertEquals(-1, StringUtils.indexOfAny(\"\", 1, new char[0]));\r\n    assertEquals(-1, StringUtils.indexOfAny(\"\", 1, 'a', 'b'));\r\n    assertEquals(-1, StringUtils.indexOfAny(\"zzabyycdxx\", 1, (char[]) null));\r\n    assertEquals(-1, StringUtils.indexOfAny(\"zzabyycdxx\", 1, new char[0]));\r\n    assertEquals(1, StringUtils.indexOfAny(\"zzabyycdxx\", 1, 'z', 'a'));\r\n    assertEquals(3, StringUtils.indexOfAny(\"zzabyycdxx\", 1, 'b', 'y'));\r\n    assertEquals(-1, StringUtils.indexOfAny(\"ab\", 1, 'z'));\r\n    // if more than one search char is present, the order of the search chars matters:\r\n    assertEquals(1, StringUtils.indexOfAny(\"abcd\", 1, 'a', 'b', 'c', 'd'));\r\n    assertEquals(1, StringUtils.indexOfAny(\"bcda\", 1, 'a', 'b', 'c', 'd'));\r\n    assertEquals(1, StringUtils.indexOfAny(\"cbda\", 1, 'a', 'b', 'c', 'd'));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\StringUtilsEqualsIndexOfTest.java",
  "methodName" : "testIndexOfAny_StringString",
  "sourceCode" : "@Test\r\nvoid testIndexOfAny_StringString() {\r\n    assertEquals(-1, StringUtils.indexOfAny(null, (String) null));\r\n    assertEquals(-1, StringUtils.indexOfAny(null, \"\"));\r\n    assertEquals(-1, StringUtils.indexOfAny(null, \"ab\"));\r\n    assertEquals(-1, StringUtils.indexOfAny(\"\", (String) null));\r\n    assertEquals(-1, StringUtils.indexOfAny(\"\", \"\"));\r\n    assertEquals(-1, StringUtils.indexOfAny(\"\", \"ab\"));\r\n    assertEquals(-1, StringUtils.indexOfAny(\"zzabyycdxx\", (String) null));\r\n    assertEquals(-1, StringUtils.indexOfAny(\"zzabyycdxx\", \"\"));\r\n    assertEquals(0, StringUtils.indexOfAny(\"zzabyycdxx\", \"za\"));\r\n    assertEquals(3, StringUtils.indexOfAny(\"zzabyycdxx\", \"by\"));\r\n    assertEquals(-1, StringUtils.indexOfAny(\"ab\", \"z\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\StringUtilsEqualsIndexOfTest.java",
  "methodName" : "testIndexOfAny_StringStringArray",
  "sourceCode" : "@Test\r\nvoid testIndexOfAny_StringStringArray() {\r\n    assertEquals(-1, StringUtils.indexOfAny(null, (String[]) null));\r\n    assertEquals(-1, StringUtils.indexOfAny(null, FOOBAR_SUB_ARRAY));\r\n    assertEquals(-1, StringUtils.indexOfAny(FOOBAR, (String[]) null));\r\n    assertEquals(2, StringUtils.indexOfAny(FOOBAR, FOOBAR_SUB_ARRAY));\r\n    assertEquals(-1, StringUtils.indexOfAny(FOOBAR, new String[0]));\r\n    assertEquals(-1, StringUtils.indexOfAny(null, new String[0]));\r\n    assertEquals(-1, StringUtils.indexOfAny(\"\", new String[0]));\r\n    assertEquals(-1, StringUtils.indexOfAny(FOOBAR, new String[] { \"llll\" }));\r\n    assertEquals(0, StringUtils.indexOfAny(FOOBAR, new String[] { \"\" }));\r\n    assertEquals(0, StringUtils.indexOfAny(\"\", new String[] { \"\" }));\r\n    assertEquals(-1, StringUtils.indexOfAny(\"\", new String[] { \"a\" }));\r\n    assertEquals(-1, StringUtils.indexOfAny(\"\", new String[] { null }));\r\n    assertEquals(-1, StringUtils.indexOfAny(FOOBAR, new String[] { null }));\r\n    assertEquals(-1, StringUtils.indexOfAny(null, new String[] { null }));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\StringUtilsEqualsIndexOfTest.java",
  "methodName" : "testIndexOfAny_StringStringWithSupplementaryChars",
  "sourceCode" : "/**\r\n * See https://www.oracle.com/technical-resources/articles/javase/supplementary.html\r\n */\r\n@Test\r\nvoid testIndexOfAny_StringStringWithSupplementaryChars() {\r\n    assertEquals(0, StringUtils.indexOfAny(CharU20000 + CharU20001, CharU20000));\r\n    assertEquals(2, StringUtils.indexOfAny(CharU20000 + CharU20001, CharU20001));\r\n    assertEquals(0, StringUtils.indexOfAny(CharU20000, CharU20000));\r\n    assertEquals(-1, StringUtils.indexOfAny(CharU20000, CharU20001));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\StringUtilsEqualsIndexOfTest.java",
  "methodName" : "testIndexOfAnyBut_StringCharArray",
  "sourceCode" : "@Test\r\nvoid testIndexOfAnyBut_StringCharArray() {\r\n    assertEquals(-1, StringUtils.indexOfAnyBut(null, (char[]) null));\r\n    assertEquals(-1, StringUtils.indexOfAnyBut(null));\r\n    assertEquals(-1, StringUtils.indexOfAnyBut(null, 'a', 'b'));\r\n    assertEquals(-1, StringUtils.indexOfAnyBut(\"\", (char[]) null));\r\n    assertEquals(-1, StringUtils.indexOfAnyBut(\"\"));\r\n    assertEquals(-1, StringUtils.indexOfAnyBut(\"\", 'a', 'b'));\r\n    assertEquals(-1, StringUtils.indexOfAnyBut(\"zzabyycdxx\", (char[]) null));\r\n    assertEquals(-1, StringUtils.indexOfAnyBut(\"zzabyycdxx\"));\r\n    assertEquals(3, StringUtils.indexOfAnyBut(\"zzabyycdxx\", 'z', 'a'));\r\n    assertEquals(0, StringUtils.indexOfAnyBut(\"zzabyycdxx\", 'b', 'y'));\r\n    assertEquals(-1, StringUtils.indexOfAnyBut(\"aba\", 'a', 'b'));\r\n    assertEquals(0, StringUtils.indexOfAnyBut(\"aba\", 'z'));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\StringUtilsEqualsIndexOfTest.java",
  "methodName" : "testIndexOfAnyBut_StringCharArrayWithSurrogateChars",
  "sourceCode" : "@ParameterizedTest\r\n@MethodSource(\"indexOfAnyBut_withSurrogateChars\")\r\nvoid testIndexOfAnyBut_StringCharArrayWithSurrogateChars(final CharSequence seq, final String searchChars, final int expected) {\r\n    assertEquals(expected, StringUtils.indexOfAnyBut(seq, searchChars.toCharArray()));\r\n}",
  "annotations" : [ "ParameterizedTest" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\StringUtilsEqualsIndexOfTest.java",
  "methodName" : "testIndexOfAnyBut_StringString",
  "sourceCode" : "@Test\r\nvoid testIndexOfAnyBut_StringString() {\r\n    assertEquals(-1, StringUtils.indexOfAnyBut(null, (String) null));\r\n    assertEquals(-1, StringUtils.indexOfAnyBut(null, \"\"));\r\n    assertEquals(-1, StringUtils.indexOfAnyBut(null, \"ab\"));\r\n    assertEquals(-1, StringUtils.indexOfAnyBut(\"\", (String) null));\r\n    assertEquals(-1, StringUtils.indexOfAnyBut(\"\", \"\"));\r\n    assertEquals(-1, StringUtils.indexOfAnyBut(\"\", \"ab\"));\r\n    assertEquals(-1, StringUtils.indexOfAnyBut(\"zzabyycdxx\", (String) null));\r\n    assertEquals(-1, StringUtils.indexOfAnyBut(\"zzabyycdxx\", \"\"));\r\n    assertEquals(3, StringUtils.indexOfAnyBut(\"zzabyycdxx\", \"za\"));\r\n    assertEquals(0, StringUtils.indexOfAnyBut(\"zzabyycdxx\", \"by\"));\r\n    assertEquals(0, StringUtils.indexOfAnyBut(\"ab\", \"z\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\StringUtilsEqualsIndexOfTest.java",
  "methodName" : "testIndexOfAnyBut_StringStringWithSurrogateChars",
  "sourceCode" : "@ParameterizedTest\r\n@MethodSource(\"indexOfAnyBut_withSurrogateChars\")\r\nvoid testIndexOfAnyBut_StringStringWithSurrogateChars(final CharSequence seq, final CharSequence searchChars, final int expected) {\r\n    assertEquals(expected, StringUtils.indexOfAnyBut(seq, searchChars));\r\n}",
  "annotations" : [ "ParameterizedTest" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\StringUtilsEqualsIndexOfTest.java",
  "methodName" : "testIndexOfIgnoreCase_String",
  "sourceCode" : "@Test\r\nvoid testIndexOfIgnoreCase_String() {\r\n    assertEquals(-1, StringUtils.indexOfIgnoreCase(null, null));\r\n    assertEquals(-1, StringUtils.indexOfIgnoreCase(null, \"\"));\r\n    assertEquals(-1, StringUtils.indexOfIgnoreCase(\"\", null));\r\n    assertEquals(0, StringUtils.indexOfIgnoreCase(\"\", \"\"));\r\n    assertEquals(0, StringUtils.indexOfIgnoreCase(\"aabaabaa\", \"a\"));\r\n    assertEquals(0, StringUtils.indexOfIgnoreCase(\"aabaabaa\", \"A\"));\r\n    assertEquals(2, StringUtils.indexOfIgnoreCase(\"aabaabaa\", \"b\"));\r\n    assertEquals(2, StringUtils.indexOfIgnoreCase(\"aabaabaa\", \"B\"));\r\n    assertEquals(1, StringUtils.indexOfIgnoreCase(\"aabaabaa\", \"ab\"));\r\n    assertEquals(1, StringUtils.indexOfIgnoreCase(\"aabaabaa\", \"AB\"));\r\n    assertEquals(0, StringUtils.indexOfIgnoreCase(\"aabaabaa\", \"\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\StringUtilsEqualsIndexOfTest.java",
  "methodName" : "testIndexOfIgnoreCase_StringInt",
  "sourceCode" : "@Test\r\nvoid testIndexOfIgnoreCase_StringInt() {\r\n    assertEquals(1, StringUtils.indexOfIgnoreCase(\"aabaabaa\", \"AB\", -1));\r\n    assertEquals(1, StringUtils.indexOfIgnoreCase(\"aabaabaa\", \"AB\", 0));\r\n    assertEquals(1, StringUtils.indexOfIgnoreCase(\"aabaabaa\", \"AB\", 1));\r\n    assertEquals(4, StringUtils.indexOfIgnoreCase(\"aabaabaa\", \"AB\", 2));\r\n    assertEquals(4, StringUtils.indexOfIgnoreCase(\"aabaabaa\", \"AB\", 3));\r\n    assertEquals(4, StringUtils.indexOfIgnoreCase(\"aabaabaa\", \"AB\", 4));\r\n    assertEquals(-1, StringUtils.indexOfIgnoreCase(\"aabaabaa\", \"AB\", 5));\r\n    assertEquals(-1, StringUtils.indexOfIgnoreCase(\"aabaabaa\", \"AB\", 6));\r\n    assertEquals(-1, StringUtils.indexOfIgnoreCase(\"aabaabaa\", \"AB\", 7));\r\n    assertEquals(-1, StringUtils.indexOfIgnoreCase(\"aabaabaa\", \"AB\", 8));\r\n    assertEquals(1, StringUtils.indexOfIgnoreCase(\"aab\", \"AB\", 1));\r\n    assertEquals(5, StringUtils.indexOfIgnoreCase(\"aabaabaa\", \"\", 5));\r\n    assertEquals(-1, StringUtils.indexOfIgnoreCase(\"ab\", \"AAB\", 0));\r\n    assertEquals(-1, StringUtils.indexOfIgnoreCase(\"aab\", \"AAB\", 1));\r\n    assertEquals(-1, StringUtils.indexOfIgnoreCase(\"abc\", \"\", 9));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\StringUtilsEqualsIndexOfTest.java",
  "methodName" : "testLANG1193",
  "sourceCode" : "@Test\r\nvoid testLANG1193() {\r\n    assertEquals(0, StringUtils.ordinalIndexOf(\"abc\", \"ab\", 1));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\StringUtilsEqualsIndexOfTest.java",
  "methodName" : "testLANG1241_1",
  "sourceCode" : "@Test\r\n// Non-overlapping test\r\nvoid testLANG1241_1() {\r\n    //                                          0  3  6\r\n    assertEquals(0, StringUtils.ordinalIndexOf(\"abaabaab\", \"ab\", 1));\r\n    assertEquals(3, StringUtils.ordinalIndexOf(\"abaabaab\", \"ab\", 2));\r\n    assertEquals(6, StringUtils.ordinalIndexOf(\"abaabaab\", \"ab\", 3));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\StringUtilsEqualsIndexOfTest.java",
  "methodName" : "testLANG1241_2",
  "sourceCode" : "@Test\r\n// Overlapping matching test\r\nvoid testLANG1241_2() {\r\n    //                                          0 2 4\r\n    assertEquals(0, StringUtils.ordinalIndexOf(\"abababa\", \"aba\", 1));\r\n    assertEquals(2, StringUtils.ordinalIndexOf(\"abababa\", \"aba\", 2));\r\n    assertEquals(4, StringUtils.ordinalIndexOf(\"abababa\", \"aba\", 3));\r\n    assertEquals(0, StringUtils.ordinalIndexOf(\"abababab\", \"abab\", 1));\r\n    assertEquals(2, StringUtils.ordinalIndexOf(\"abababab\", \"abab\", 2));\r\n    assertEquals(4, StringUtils.ordinalIndexOf(\"abababab\", \"abab\", 3));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\StringUtilsEqualsIndexOfTest.java",
  "methodName" : "testLastIndexOf_char",
  "sourceCode" : "@Test\r\nvoid testLastIndexOf_char() {\r\n    assertEquals(-1, StringUtils.lastIndexOf(null, ' '));\r\n    assertEquals(-1, StringUtils.lastIndexOf(\"\", ' '));\r\n    assertEquals(7, StringUtils.lastIndexOf(\"aabaabaa\", 'a'));\r\n    assertEquals(5, StringUtils.lastIndexOf(\"aabaabaa\", 'b'));\r\n    assertEquals(5, StringUtils.lastIndexOf(new StringBuilder(\"aabaabaa\"), 'b'));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\StringUtilsEqualsIndexOfTest.java",
  "methodName" : "testLastIndexOf_charInt",
  "sourceCode" : "@Test\r\nvoid testLastIndexOf_charInt() {\r\n    assertEquals(-1, StringUtils.lastIndexOf(null, ' ', 0));\r\n    assertEquals(-1, StringUtils.lastIndexOf(null, ' ', -1));\r\n    assertEquals(-1, StringUtils.lastIndexOf(\"\", ' ', 0));\r\n    assertEquals(-1, StringUtils.lastIndexOf(\"\", ' ', -1));\r\n    assertEquals(7, StringUtils.lastIndexOf(\"aabaabaa\", 'a', 8));\r\n    assertEquals(5, StringUtils.lastIndexOf(\"aabaabaa\", 'b', 8));\r\n    assertEquals(2, StringUtils.lastIndexOf(\"aabaabaa\", 'b', 3));\r\n    assertEquals(5, StringUtils.lastIndexOf(\"aabaabaa\", 'b', 9));\r\n    assertEquals(-1, StringUtils.lastIndexOf(\"aabaabaa\", 'b', -1));\r\n    assertEquals(0, StringUtils.lastIndexOf(\"aabaabaa\", 'a', 0));\r\n    assertEquals(2, StringUtils.lastIndexOf(new StringBuilder(\"aabaabaa\"), 'b', 2));\r\n    //LANG-1300 addition test\r\n    final int CODE_POINT = 0x2070E;\r\n    StringBuilder builder = new StringBuilder();\r\n    builder.appendCodePoint(CODE_POINT);\r\n    assertEquals(0, StringUtils.lastIndexOf(builder, CODE_POINT, 0));\r\n    builder.appendCodePoint(CODE_POINT);\r\n    assertEquals(0, StringUtils.lastIndexOf(builder, CODE_POINT, 0));\r\n    assertEquals(0, StringUtils.lastIndexOf(builder, CODE_POINT, 1));\r\n    assertEquals(2, StringUtils.lastIndexOf(builder, CODE_POINT, 2));\r\n    builder.append(\"aaaaa\");\r\n    assertEquals(2, StringUtils.lastIndexOf(builder, CODE_POINT, 4));\r\n    // inner branch on the supplementary character block\r\n    final char[] tmp = { (char) 55361 };\r\n    builder = new StringBuilder();\r\n    builder.append(tmp);\r\n    assertEquals(-1, StringUtils.lastIndexOf(builder, CODE_POINT, 0));\r\n    builder.appendCodePoint(CODE_POINT);\r\n    assertEquals(-1, StringUtils.lastIndexOf(builder, CODE_POINT, 0));\r\n    assertEquals(1, StringUtils.lastIndexOf(builder, CODE_POINT, 1));\r\n    assertEquals(-1, StringUtils.lastIndexOf(builder.toString(), CODE_POINT, 0));\r\n    assertEquals(1, StringUtils.lastIndexOf(builder.toString(), CODE_POINT, 1));\r\n    assertEquals(StringUtils.INDEX_NOT_FOUND, StringUtils.lastIndexOf(CharBuffer.wrap(\"[%{.c.0rro\"), -1738, 982));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\StringUtilsEqualsIndexOfTest.java",
  "methodName" : "testLastIndexOf_String",
  "sourceCode" : "@Test\r\nvoid testLastIndexOf_String() {\r\n    assertEquals(-1, StringUtils.lastIndexOf(null, null));\r\n    assertEquals(-1, StringUtils.lastIndexOf(\"\", null));\r\n    assertEquals(-1, StringUtils.lastIndexOf(\"\", \"a\"));\r\n    assertEquals(0, StringUtils.lastIndexOf(\"\", \"\"));\r\n    assertEquals(8, StringUtils.lastIndexOf(\"aabaabaa\", \"\"));\r\n    assertEquals(7, StringUtils.lastIndexOf(\"aabaabaa\", \"a\"));\r\n    assertEquals(5, StringUtils.lastIndexOf(\"aabaabaa\", \"b\"));\r\n    assertEquals(4, StringUtils.lastIndexOf(\"aabaabaa\", \"ab\"));\r\n    assertEquals(4, StringUtils.lastIndexOf(new StringBuilder(\"aabaabaa\"), \"ab\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\StringUtilsEqualsIndexOfTest.java",
  "methodName" : "testLastIndexOf_StringInt",
  "sourceCode" : "@Test\r\nvoid testLastIndexOf_StringInt() {\r\n    assertEquals(-1, StringUtils.lastIndexOf(null, null, 0));\r\n    assertEquals(-1, StringUtils.lastIndexOf(null, null, -1));\r\n    assertEquals(-1, StringUtils.lastIndexOf(null, \"\", 0));\r\n    assertEquals(-1, StringUtils.lastIndexOf(null, \"\", -1));\r\n    assertEquals(-1, StringUtils.lastIndexOf(\"\", null, 0));\r\n    assertEquals(-1, StringUtils.lastIndexOf(\"\", null, -1));\r\n    assertEquals(0, StringUtils.lastIndexOf(\"\", \"\", 0));\r\n    assertEquals(-1, StringUtils.lastIndexOf(\"\", \"\", -1));\r\n    assertEquals(0, StringUtils.lastIndexOf(\"\", \"\", 9));\r\n    assertEquals(0, StringUtils.lastIndexOf(\"abc\", \"\", 0));\r\n    assertEquals(-1, StringUtils.lastIndexOf(\"abc\", \"\", -1));\r\n    assertEquals(3, StringUtils.lastIndexOf(\"abc\", \"\", 9));\r\n    assertEquals(7, StringUtils.lastIndexOf(\"aabaabaa\", \"a\", 8));\r\n    assertEquals(5, StringUtils.lastIndexOf(\"aabaabaa\", \"b\", 8));\r\n    assertEquals(4, StringUtils.lastIndexOf(\"aabaabaa\", \"ab\", 8));\r\n    assertEquals(2, StringUtils.lastIndexOf(\"aabaabaa\", \"b\", 3));\r\n    assertEquals(5, StringUtils.lastIndexOf(\"aabaabaa\", \"b\", 9));\r\n    assertEquals(-1, StringUtils.lastIndexOf(\"aabaabaa\", \"b\", -1));\r\n    assertEquals(-1, StringUtils.lastIndexOf(\"aabaabaa\", \"b\", 0));\r\n    assertEquals(0, StringUtils.lastIndexOf(\"aabaabaa\", \"a\", 0));\r\n    assertEquals(-1, StringUtils.lastIndexOf(\"aabaabaa\", \"a\", -1));\r\n    // Test that fromIndex works correctly, i.e. cannot match after fromIndex\r\n    assertEquals(7, StringUtils.lastIndexOf(\"12345678\", \"8\", 9));\r\n    assertEquals(7, StringUtils.lastIndexOf(\"12345678\", \"8\", 8));\r\n    // 7 is last index\r\n    assertEquals(7, StringUtils.lastIndexOf(\"12345678\", \"8\", 7));\r\n    assertEquals(-1, StringUtils.lastIndexOf(\"12345678\", \"8\", 6));\r\n    assertEquals(-1, StringUtils.lastIndexOf(\"aabaabaa\", \"b\", 1));\r\n    assertEquals(2, StringUtils.lastIndexOf(\"aabaabaa\", \"b\", 2));\r\n    assertEquals(2, StringUtils.lastIndexOf(\"aabaabaa\", \"ba\", 2));\r\n    assertEquals(2, StringUtils.lastIndexOf(\"aabaabaa\", \"ba\", 3));\r\n    assertEquals(2, StringUtils.lastIndexOf(new StringBuilder(\"aabaabaa\"), \"b\", 3));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\StringUtilsEqualsIndexOfTest.java",
  "methodName" : "testLastIndexOfAny_StringStringArray",
  "sourceCode" : "@Test\r\nvoid testLastIndexOfAny_StringStringArray() {\r\n    // test both types of ...\r\n    assertEquals(-1, StringUtils.lastIndexOfAny(null, (CharSequence) null));\r\n    // ... varargs invocation\r\n    assertEquals(-1, StringUtils.lastIndexOfAny(null, (CharSequence[]) null));\r\n    // Missing varag\r\n    assertEquals(-1, StringUtils.lastIndexOfAny(null));\r\n    assertEquals(-1, StringUtils.lastIndexOfAny(null, FOOBAR_SUB_ARRAY));\r\n    // test both types of ...\r\n    assertEquals(-1, StringUtils.lastIndexOfAny(FOOBAR, (CharSequence) null));\r\n    // ... varargs invocation\r\n    assertEquals(-1, StringUtils.lastIndexOfAny(FOOBAR, (CharSequence[]) null));\r\n    // Missing vararg\r\n    assertEquals(-1, StringUtils.lastIndexOfAny(FOOBAR));\r\n    assertEquals(3, StringUtils.lastIndexOfAny(FOOBAR, FOOBAR_SUB_ARRAY));\r\n    assertEquals(-1, StringUtils.lastIndexOfAny(FOOBAR, new String[0]));\r\n    assertEquals(-1, StringUtils.lastIndexOfAny(null, new String[0]));\r\n    assertEquals(-1, StringUtils.lastIndexOfAny(\"\", new String[0]));\r\n    assertEquals(-1, StringUtils.lastIndexOfAny(FOOBAR, new String[] { \"llll\" }));\r\n    assertEquals(6, StringUtils.lastIndexOfAny(FOOBAR, new String[] { \"\" }));\r\n    assertEquals(0, StringUtils.lastIndexOfAny(\"\", new String[] { \"\" }));\r\n    assertEquals(-1, StringUtils.lastIndexOfAny(\"\", new String[] { \"a\" }));\r\n    assertEquals(-1, StringUtils.lastIndexOfAny(\"\", new String[] { null }));\r\n    assertEquals(-1, StringUtils.lastIndexOfAny(FOOBAR, new String[] { null }));\r\n    assertEquals(-1, StringUtils.lastIndexOfAny(null, new String[] { null }));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\StringUtilsEqualsIndexOfTest.java",
  "methodName" : "testLastIndexOfIgnoreCase_String",
  "sourceCode" : "@Test\r\nvoid testLastIndexOfIgnoreCase_String() {\r\n    assertEquals(-1, StringUtils.lastIndexOfIgnoreCase(null, null));\r\n    assertEquals(-1, StringUtils.lastIndexOfIgnoreCase(\"\", null));\r\n    assertEquals(-1, StringUtils.lastIndexOfIgnoreCase(null, \"\"));\r\n    assertEquals(-1, StringUtils.lastIndexOfIgnoreCase(\"\", \"a\"));\r\n    assertEquals(0, StringUtils.lastIndexOfIgnoreCase(\"\", \"\"));\r\n    assertEquals(8, StringUtils.lastIndexOfIgnoreCase(\"aabaabaa\", \"\"));\r\n    assertEquals(7, StringUtils.lastIndexOfIgnoreCase(\"aabaabaa\", \"a\"));\r\n    assertEquals(7, StringUtils.lastIndexOfIgnoreCase(\"aabaabaa\", \"A\"));\r\n    assertEquals(5, StringUtils.lastIndexOfIgnoreCase(\"aabaabaa\", \"b\"));\r\n    assertEquals(5, StringUtils.lastIndexOfIgnoreCase(\"aabaabaa\", \"B\"));\r\n    assertEquals(4, StringUtils.lastIndexOfIgnoreCase(\"aabaabaa\", \"ab\"));\r\n    assertEquals(4, StringUtils.lastIndexOfIgnoreCase(\"aabaabaa\", \"AB\"));\r\n    assertEquals(-1, StringUtils.lastIndexOfIgnoreCase(\"ab\", \"AAB\"));\r\n    assertEquals(0, StringUtils.lastIndexOfIgnoreCase(\"aab\", \"AAB\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\StringUtilsEqualsIndexOfTest.java",
  "methodName" : "testLastIndexOfIgnoreCase_StringInt",
  "sourceCode" : "@Test\r\nvoid testLastIndexOfIgnoreCase_StringInt() {\r\n    assertEquals(-1, StringUtils.lastIndexOfIgnoreCase(null, null, 0));\r\n    assertEquals(-1, StringUtils.lastIndexOfIgnoreCase(null, null, -1));\r\n    assertEquals(-1, StringUtils.lastIndexOfIgnoreCase(null, \"\", 0));\r\n    assertEquals(-1, StringUtils.lastIndexOfIgnoreCase(null, \"\", -1));\r\n    assertEquals(-1, StringUtils.lastIndexOfIgnoreCase(\"\", null, 0));\r\n    assertEquals(-1, StringUtils.lastIndexOfIgnoreCase(\"\", null, -1));\r\n    assertEquals(0, StringUtils.lastIndexOfIgnoreCase(\"\", \"\", 0));\r\n    assertEquals(-1, StringUtils.lastIndexOfIgnoreCase(\"\", \"\", -1));\r\n    assertEquals(0, StringUtils.lastIndexOfIgnoreCase(\"\", \"\", 9));\r\n    assertEquals(0, StringUtils.lastIndexOfIgnoreCase(\"abc\", \"\", 0));\r\n    assertEquals(-1, StringUtils.lastIndexOfIgnoreCase(\"abc\", \"\", -1));\r\n    assertEquals(3, StringUtils.lastIndexOfIgnoreCase(\"abc\", \"\", 9));\r\n    assertEquals(7, StringUtils.lastIndexOfIgnoreCase(\"aabaabaa\", \"A\", 8));\r\n    assertEquals(5, StringUtils.lastIndexOfIgnoreCase(\"aabaabaa\", \"B\", 8));\r\n    assertEquals(4, StringUtils.lastIndexOfIgnoreCase(\"aabaabaa\", \"AB\", 8));\r\n    assertEquals(2, StringUtils.lastIndexOfIgnoreCase(\"aabaabaa\", \"B\", 3));\r\n    assertEquals(5, StringUtils.lastIndexOfIgnoreCase(\"aabaabaa\", \"B\", 9));\r\n    assertEquals(-1, StringUtils.lastIndexOfIgnoreCase(\"aabaabaa\", \"B\", -1));\r\n    assertEquals(-1, StringUtils.lastIndexOfIgnoreCase(\"aabaabaa\", \"B\", 0));\r\n    assertEquals(0, StringUtils.lastIndexOfIgnoreCase(\"aabaabaa\", \"A\", 0));\r\n    assertEquals(1, StringUtils.lastIndexOfIgnoreCase(\"aab\", \"AB\", 1));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\StringUtilsEqualsIndexOfTest.java",
  "methodName" : "testLastOrdinalIndexOf",
  "sourceCode" : "@Test\r\nvoid testLastOrdinalIndexOf() {\r\n    assertEquals(-1, StringUtils.lastOrdinalIndexOf(null, \"*\", 42));\r\n    assertEquals(-1, StringUtils.lastOrdinalIndexOf(\"*\", null, 42));\r\n    assertEquals(0, StringUtils.lastOrdinalIndexOf(\"\", \"\", 42));\r\n    assertEquals(7, StringUtils.lastOrdinalIndexOf(\"aabaabaa\", \"a\", 1));\r\n    assertEquals(6, StringUtils.lastOrdinalIndexOf(\"aabaabaa\", \"a\", 2));\r\n    assertEquals(5, StringUtils.lastOrdinalIndexOf(\"aabaabaa\", \"b\", 1));\r\n    assertEquals(2, StringUtils.lastOrdinalIndexOf(\"aabaabaa\", \"b\", 2));\r\n    assertEquals(4, StringUtils.lastOrdinalIndexOf(\"aabaabaa\", \"ab\", 1));\r\n    assertEquals(1, StringUtils.lastOrdinalIndexOf(\"aabaabaa\", \"ab\", 2));\r\n    assertEquals(8, StringUtils.lastOrdinalIndexOf(\"aabaabaa\", \"\", 1));\r\n    assertEquals(8, StringUtils.lastOrdinalIndexOf(\"aabaabaa\", \"\", 2));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\StringUtilsEqualsIndexOfTest.java",
  "methodName" : "testOrdinalIndexOf",
  "sourceCode" : "@Test\r\nvoid testOrdinalIndexOf() {\r\n    assertEquals(-1, StringUtils.ordinalIndexOf(null, null, Integer.MIN_VALUE));\r\n    assertEquals(-1, StringUtils.ordinalIndexOf(\"\", null, Integer.MIN_VALUE));\r\n    assertEquals(-1, StringUtils.ordinalIndexOf(\"\", \"\", Integer.MIN_VALUE));\r\n    assertEquals(-1, StringUtils.ordinalIndexOf(\"aabaabaa\", \"a\", Integer.MIN_VALUE));\r\n    assertEquals(-1, StringUtils.ordinalIndexOf(\"aabaabaa\", \"b\", Integer.MIN_VALUE));\r\n    assertEquals(-1, StringUtils.ordinalIndexOf(\"aabaabaa\", \"ab\", Integer.MIN_VALUE));\r\n    assertEquals(-1, StringUtils.ordinalIndexOf(\"aabaabaa\", \"\", Integer.MIN_VALUE));\r\n    assertEquals(-1, StringUtils.ordinalIndexOf(null, null, -1));\r\n    assertEquals(-1, StringUtils.ordinalIndexOf(\"\", null, -1));\r\n    assertEquals(-1, StringUtils.ordinalIndexOf(\"\", \"\", -1));\r\n    assertEquals(-1, StringUtils.ordinalIndexOf(\"aabaabaa\", \"a\", -1));\r\n    assertEquals(-1, StringUtils.ordinalIndexOf(\"aabaabaa\", \"b\", -1));\r\n    assertEquals(-1, StringUtils.ordinalIndexOf(\"aabaabaa\", \"ab\", -1));\r\n    assertEquals(-1, StringUtils.ordinalIndexOf(\"aabaabaa\", \"\", -1));\r\n    assertEquals(-1, StringUtils.ordinalIndexOf(null, null, 0));\r\n    assertEquals(-1, StringUtils.ordinalIndexOf(\"\", null, 0));\r\n    assertEquals(-1, StringUtils.ordinalIndexOf(\"\", \"\", 0));\r\n    assertEquals(-1, StringUtils.ordinalIndexOf(\"aabaabaa\", \"a\", 0));\r\n    assertEquals(-1, StringUtils.ordinalIndexOf(\"aabaabaa\", \"b\", 0));\r\n    assertEquals(-1, StringUtils.ordinalIndexOf(\"aabaabaa\", \"ab\", 0));\r\n    assertEquals(-1, StringUtils.ordinalIndexOf(\"aabaabaa\", \"\", 0));\r\n    assertEquals(-1, StringUtils.ordinalIndexOf(null, null, 1));\r\n    assertEquals(-1, StringUtils.ordinalIndexOf(\"\", null, 1));\r\n    assertEquals(0, StringUtils.ordinalIndexOf(\"\", \"\", 1));\r\n    assertEquals(0, StringUtils.ordinalIndexOf(\"aabaabaa\", \"a\", 1));\r\n    assertEquals(2, StringUtils.ordinalIndexOf(\"aabaabaa\", \"b\", 1));\r\n    assertEquals(1, StringUtils.ordinalIndexOf(\"aabaabaa\", \"ab\", 1));\r\n    assertEquals(0, StringUtils.ordinalIndexOf(\"aabaabaa\", \"\", 1));\r\n    assertEquals(-1, StringUtils.ordinalIndexOf(null, null, 2));\r\n    assertEquals(-1, StringUtils.ordinalIndexOf(\"\", null, 2));\r\n    assertEquals(0, StringUtils.ordinalIndexOf(\"\", \"\", 2));\r\n    assertEquals(1, StringUtils.ordinalIndexOf(\"aabaabaa\", \"a\", 2));\r\n    assertEquals(5, StringUtils.ordinalIndexOf(\"aabaabaa\", \"b\", 2));\r\n    assertEquals(4, StringUtils.ordinalIndexOf(\"aabaabaa\", \"ab\", 2));\r\n    assertEquals(0, StringUtils.ordinalIndexOf(\"aabaabaa\", \"\", 2));\r\n    assertEquals(-1, StringUtils.ordinalIndexOf(null, null, Integer.MAX_VALUE));\r\n    assertEquals(-1, StringUtils.ordinalIndexOf(\"\", null, Integer.MAX_VALUE));\r\n    assertEquals(0, StringUtils.ordinalIndexOf(\"\", \"\", Integer.MAX_VALUE));\r\n    assertEquals(-1, StringUtils.ordinalIndexOf(\"aabaabaa\", \"a\", Integer.MAX_VALUE));\r\n    assertEquals(-1, StringUtils.ordinalIndexOf(\"aabaabaa\", \"b\", Integer.MAX_VALUE));\r\n    assertEquals(-1, StringUtils.ordinalIndexOf(\"aabaabaa\", \"ab\", Integer.MAX_VALUE));\r\n    assertEquals(0, StringUtils.ordinalIndexOf(\"aabaabaa\", \"\", Integer.MAX_VALUE));\r\n    assertEquals(-1, StringUtils.ordinalIndexOf(\"aaaaaaaaa\", \"a\", 0));\r\n    assertEquals(0, StringUtils.ordinalIndexOf(\"aaaaaaaaa\", \"a\", 1));\r\n    assertEquals(1, StringUtils.ordinalIndexOf(\"aaaaaaaaa\", \"a\", 2));\r\n    assertEquals(2, StringUtils.ordinalIndexOf(\"aaaaaaaaa\", \"a\", 3));\r\n    assertEquals(3, StringUtils.ordinalIndexOf(\"aaaaaaaaa\", \"a\", 4));\r\n    assertEquals(4, StringUtils.ordinalIndexOf(\"aaaaaaaaa\", \"a\", 5));\r\n    assertEquals(5, StringUtils.ordinalIndexOf(\"aaaaaaaaa\", \"a\", 6));\r\n    assertEquals(6, StringUtils.ordinalIndexOf(\"aaaaaaaaa\", \"a\", 7));\r\n    assertEquals(7, StringUtils.ordinalIndexOf(\"aaaaaaaaa\", \"a\", 8));\r\n    assertEquals(8, StringUtils.ordinalIndexOf(\"aaaaaaaaa\", \"a\", 9));\r\n    assertEquals(-1, StringUtils.ordinalIndexOf(\"aaaaaaaaa\", \"a\", 10));\r\n    // match at each possible position\r\n    assertEquals(0, StringUtils.ordinalIndexOf(\"aaaaaa\", \"aa\", 1));\r\n    assertEquals(1, StringUtils.ordinalIndexOf(\"aaaaaa\", \"aa\", 2));\r\n    assertEquals(2, StringUtils.ordinalIndexOf(\"aaaaaa\", \"aa\", 3));\r\n    assertEquals(3, StringUtils.ordinalIndexOf(\"aaaaaa\", \"aa\", 4));\r\n    assertEquals(4, StringUtils.ordinalIndexOf(\"aaaaaa\", \"aa\", 5));\r\n    assertEquals(-1, StringUtils.ordinalIndexOf(\"aaaaaa\", \"aa\", 6));\r\n    assertEquals(0, StringUtils.ordinalIndexOf(\"ababab\", \"aba\", 1));\r\n    assertEquals(2, StringUtils.ordinalIndexOf(\"ababab\", \"aba\", 2));\r\n    assertEquals(-1, StringUtils.ordinalIndexOf(\"ababab\", \"aba\", 3));\r\n    assertEquals(0, StringUtils.ordinalIndexOf(\"abababab\", \"abab\", 1));\r\n    assertEquals(2, StringUtils.ordinalIndexOf(\"abababab\", \"abab\", 2));\r\n    assertEquals(4, StringUtils.ordinalIndexOf(\"abababab\", \"abab\", 3));\r\n    assertEquals(-1, StringUtils.ordinalIndexOf(\"abababab\", \"abab\", 4));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\StringUtilsIsTest.java",
  "methodName" : "testIsAlpha",
  "sourceCode" : "@Test\r\nvoid testIsAlpha() {\r\n    assertFalse(StringUtils.isAlpha(null));\r\n    assertFalse(StringUtils.isAlpha(\"\"));\r\n    assertFalse(StringUtils.isAlpha(\" \"));\r\n    assertTrue(StringUtils.isAlpha(\"a\"));\r\n    assertTrue(StringUtils.isAlpha(\"A\"));\r\n    assertTrue(StringUtils.isAlpha(\"kgKgKgKgkgkGkjkjlJlOKLgHdGdHgl\"));\r\n    assertFalse(StringUtils.isAlpha(\"ham kso\"));\r\n    assertFalse(StringUtils.isAlpha(\"1\"));\r\n    assertFalse(StringUtils.isAlpha(\"hkHKHik6iUGHKJgU7tUJgKJGI87GIkug\"));\r\n    assertFalse(StringUtils.isAlpha(\"_\"));\r\n    assertFalse(StringUtils.isAlpha(\"hkHKHik*khbkuh\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\StringUtilsIsTest.java",
  "methodName" : "testIsAlphanumeric",
  "sourceCode" : "@Test\r\nvoid testIsAlphanumeric() {\r\n    assertFalse(StringUtils.isAlphanumeric(null));\r\n    assertFalse(StringUtils.isAlphanumeric(\"\"));\r\n    assertFalse(StringUtils.isAlphanumeric(\" \"));\r\n    assertTrue(StringUtils.isAlphanumeric(\"a\"));\r\n    assertTrue(StringUtils.isAlphanumeric(\"A\"));\r\n    assertTrue(StringUtils.isAlphanumeric(\"kgKgKgKgkgkGkjkjlJlOKLgHdGdHgl\"));\r\n    assertFalse(StringUtils.isAlphanumeric(\"ham kso\"));\r\n    assertTrue(StringUtils.isAlphanumeric(\"1\"));\r\n    assertTrue(StringUtils.isAlphanumeric(\"hkHKHik6iUGHKJgU7tUJgKJGI87GIkug\"));\r\n    assertFalse(StringUtils.isAlphanumeric(\"_\"));\r\n    assertFalse(StringUtils.isAlphanumeric(\"hkHKHik*khbkuh\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\StringUtilsIsTest.java",
  "methodName" : "testIsAlphanumericSpace",
  "sourceCode" : "@Test\r\nvoid testIsAlphanumericSpace() {\r\n    assertFalse(StringUtils.isAlphanumericSpace(null));\r\n    assertTrue(StringUtils.isAlphanumericSpace(\"\"));\r\n    assertTrue(StringUtils.isAlphanumericSpace(\" \"));\r\n    assertTrue(StringUtils.isAlphanumericSpace(\"a\"));\r\n    assertTrue(StringUtils.isAlphanumericSpace(\"A\"));\r\n    assertTrue(StringUtils.isAlphanumericSpace(\"kgKgKgKgkgkGkjkjlJlOKLgHdGdHgl\"));\r\n    assertTrue(StringUtils.isAlphanumericSpace(\"ham kso\"));\r\n    assertTrue(StringUtils.isAlphanumericSpace(\"1\"));\r\n    assertTrue(StringUtils.isAlphanumericSpace(\"hkHKHik6iUGHKJgU7tUJgKJGI87GIkug\"));\r\n    assertFalse(StringUtils.isAlphanumericSpace(\"_\"));\r\n    assertFalse(StringUtils.isAlphanumericSpace(\"hkHKHik*khbkuh\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\StringUtilsIsTest.java",
  "methodName" : "testIsAlphaspace",
  "sourceCode" : "@Test\r\nvoid testIsAlphaspace() {\r\n    assertFalse(StringUtils.isAlphaSpace(null));\r\n    assertTrue(StringUtils.isAlphaSpace(\"\"));\r\n    assertTrue(StringUtils.isAlphaSpace(\" \"));\r\n    assertTrue(StringUtils.isAlphaSpace(\"a\"));\r\n    assertTrue(StringUtils.isAlphaSpace(\"A\"));\r\n    assertTrue(StringUtils.isAlphaSpace(\"kgKgKgKgkgkGkjkjlJlOKLgHdGdHgl\"));\r\n    assertTrue(StringUtils.isAlphaSpace(\"ham kso\"));\r\n    assertFalse(StringUtils.isAlphaSpace(\"1\"));\r\n    assertFalse(StringUtils.isAlphaSpace(\"hkHKHik6iUGHKJgU7tUJgKJGI87GIkug\"));\r\n    assertFalse(StringUtils.isAlphaSpace(\"_\"));\r\n    assertFalse(StringUtils.isAlphaSpace(\"hkHKHik*khbkuh\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\StringUtilsIsTest.java",
  "methodName" : "testIsAsciiPrintable_String",
  "sourceCode" : "@Test\r\nvoid testIsAsciiPrintable_String() {\r\n    assertFalse(StringUtils.isAsciiPrintable(null));\r\n    assertTrue(StringUtils.isAsciiPrintable(\"\"));\r\n    assertTrue(StringUtils.isAsciiPrintable(\" \"));\r\n    assertTrue(StringUtils.isAsciiPrintable(\"a\"));\r\n    assertTrue(StringUtils.isAsciiPrintable(\"A\"));\r\n    assertTrue(StringUtils.isAsciiPrintable(\"1\"));\r\n    assertTrue(StringUtils.isAsciiPrintable(\"Ceki\"));\r\n    assertTrue(StringUtils.isAsciiPrintable(\"!ab2c~\"));\r\n    assertTrue(StringUtils.isAsciiPrintable(\"1000\"));\r\n    assertTrue(StringUtils.isAsciiPrintable(\"10 00\"));\r\n    assertFalse(StringUtils.isAsciiPrintable(\"10\\t00\"));\r\n    assertTrue(StringUtils.isAsciiPrintable(\"10.00\"));\r\n    assertTrue(StringUtils.isAsciiPrintable(\"10,00\"));\r\n    assertTrue(StringUtils.isAsciiPrintable(\"!ab-c~\"));\r\n    assertTrue(StringUtils.isAsciiPrintable(\"hkHK=Hik6i?UGH_KJgU7.tUJgKJ*GI87GI,kug\"));\r\n    assertTrue(StringUtils.isAsciiPrintable(\"\\u0020\"));\r\n    assertTrue(StringUtils.isAsciiPrintable(\"\\u0021\"));\r\n    assertTrue(StringUtils.isAsciiPrintable(\"\\u007e\"));\r\n    assertFalse(StringUtils.isAsciiPrintable(\"\\u007f\"));\r\n    assertTrue(StringUtils.isAsciiPrintable(\"G?lc?\"));\r\n    assertTrue(StringUtils.isAsciiPrintable(\"=?iso-8859-1?Q?G=FClc=FC?=\"));\r\n    assertFalse(StringUtils.isAsciiPrintable(\"G\\u00fclc\\u00fc\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\StringUtilsIsTest.java",
  "methodName" : "testIsNumeric",
  "sourceCode" : "@Test\r\nvoid testIsNumeric() {\r\n    assertFalse(StringUtils.isNumeric(null));\r\n    assertFalse(StringUtils.isNumeric(\"\"));\r\n    assertFalse(StringUtils.isNumeric(\" \"));\r\n    assertFalse(StringUtils.isNumeric(\"a\"));\r\n    assertFalse(StringUtils.isNumeric(\"A\"));\r\n    assertFalse(StringUtils.isNumeric(\"kgKgKgKgkgkGkjkjlJlOKLgHdGdHgl\"));\r\n    assertFalse(StringUtils.isNumeric(\"ham kso\"));\r\n    assertTrue(StringUtils.isNumeric(\"1\"));\r\n    assertTrue(StringUtils.isNumeric(\"1000\"));\r\n    assertTrue(StringUtils.isNumeric(\"\\u0967\\u0968\\u0969\"));\r\n    assertFalse(StringUtils.isNumeric(\"\\u0967\\u0968 \\u0969\"));\r\n    assertFalse(StringUtils.isNumeric(\"2.3\"));\r\n    assertFalse(StringUtils.isNumeric(\"10 00\"));\r\n    assertFalse(StringUtils.isNumeric(\"hkHKHik6iUGHKJgU7tUJgKJGI87GIkug\"));\r\n    assertFalse(StringUtils.isNumeric(\"_\"));\r\n    assertFalse(StringUtils.isNumeric(\"hkHKHik*khbkuh\"));\r\n    assertFalse(StringUtils.isNumeric(\"+123\"));\r\n    assertFalse(StringUtils.isNumeric(\"-123\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\StringUtilsIsTest.java",
  "methodName" : "testIsNumericSpace",
  "sourceCode" : "@Test\r\nvoid testIsNumericSpace() {\r\n    assertFalse(StringUtils.isNumericSpace(null));\r\n    assertTrue(StringUtils.isNumericSpace(\"\"));\r\n    assertTrue(StringUtils.isNumericSpace(\" \"));\r\n    assertFalse(StringUtils.isNumericSpace(\"a\"));\r\n    assertFalse(StringUtils.isNumericSpace(\"A\"));\r\n    assertFalse(StringUtils.isNumericSpace(\"kgKgKgKgkgkGkjkjlJlOKLgHdGdHgl\"));\r\n    assertFalse(StringUtils.isNumericSpace(\"ham kso\"));\r\n    assertTrue(StringUtils.isNumericSpace(\"1\"));\r\n    assertTrue(StringUtils.isNumericSpace(\"1000\"));\r\n    assertFalse(StringUtils.isNumericSpace(\"2.3\"));\r\n    assertTrue(StringUtils.isNumericSpace(\"10 00\"));\r\n    assertTrue(StringUtils.isNumericSpace(\"\\u0967\\u0968\\u0969\"));\r\n    assertTrue(StringUtils.isNumericSpace(\"\\u0967\\u0968 \\u0969\"));\r\n    assertFalse(StringUtils.isNumericSpace(\"hkHKHik6iUGHKJgU7tUJgKJGI87GIkug\"));\r\n    assertFalse(StringUtils.isNumericSpace(\"_\"));\r\n    assertFalse(StringUtils.isNumericSpace(\"hkHKHik*khbkuh\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\StringUtilsIsTest.java",
  "methodName" : "testIsWhitespace",
  "sourceCode" : "@Test\r\nvoid testIsWhitespace() {\r\n    assertFalse(StringUtils.isWhitespace(null));\r\n    assertTrue(StringUtils.isWhitespace(\"\"));\r\n    assertTrue(StringUtils.isWhitespace(\" \"));\r\n    assertTrue(StringUtils.isWhitespace(\"\\t \\n \\t\"));\r\n    assertFalse(StringUtils.isWhitespace(\"\\t aa\\n \\t\"));\r\n    assertTrue(StringUtils.isWhitespace(\" \"));\r\n    assertFalse(StringUtils.isWhitespace(\" a \"));\r\n    assertFalse(StringUtils.isWhitespace(\"a  \"));\r\n    assertFalse(StringUtils.isWhitespace(\"  a\"));\r\n    assertFalse(StringUtils.isWhitespace(\"aba\"));\r\n    assertFalse(StringUtils.isWhitespace(\"a\"));\r\n    assertTrue(StringUtils.isWhitespace(StringUtilsTest.WHITESPACE));\r\n    assertFalse(StringUtils.isWhitespace(StringUtilsTest.NON_WHITESPACE));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\StringUtilsStartsEndsWithTest.java",
  "methodName" : "testEndsWith",
  "sourceCode" : "/**\r\n * Test StringUtils.endsWith()\r\n */\r\n@Test\r\nvoid testEndsWith() {\r\n    assertTrue(StringUtils.endsWith(null, null), \"endsWith(null, null)\");\r\n    assertFalse(StringUtils.endsWith(FOOBAR, null), \"endsWith(FOOBAR, null)\");\r\n    assertFalse(StringUtils.endsWith(null, FOO), \"endsWith(null, FOO)\");\r\n    assertTrue(StringUtils.endsWith(FOOBAR, \"\"), \"endsWith(FOOBAR, \\\"\\\")\");\r\n    assertFalse(StringUtils.endsWith(foobar, foo), \"endsWith(foobar, foo)\");\r\n    assertFalse(StringUtils.endsWith(FOOBAR, FOO), \"endsWith(FOOBAR, FOO)\");\r\n    assertFalse(StringUtils.endsWith(foobar, FOO), \"endsWith(foobar, FOO)\");\r\n    assertFalse(StringUtils.endsWith(FOOBAR, foo), \"endsWith(FOOBAR, foo)\");\r\n    assertFalse(StringUtils.endsWith(foo, foobar), \"endsWith(foo, foobar)\");\r\n    assertFalse(StringUtils.endsWith(bar, foobar), \"endsWith(foo, foobar)\");\r\n    assertTrue(StringUtils.endsWith(foobar, bar), \"endsWith(foobar, bar)\");\r\n    assertTrue(StringUtils.endsWith(FOOBAR, BAR), \"endsWith(FOOBAR, BAR)\");\r\n    assertFalse(StringUtils.endsWith(foobar, BAR), \"endsWith(foobar, BAR)\");\r\n    assertFalse(StringUtils.endsWith(FOOBAR, bar), \"endsWith(FOOBAR, bar)\");\r\n    // \"alpha, beta, gamma, delta\".endsWith(\"delta\")\r\n    assertTrue(StringUtils.endsWith(\"\\u03B1\\u03B2\\u03B3\\u03B4\", \"\\u03B4\"), \"endsWith(\\u03B1\\u03B2\\u03B3\\u03B4, \\u03B4)\");\r\n    // \"alpha, beta, gamma, delta\".endsWith(\"gamma, DELTA\")\r\n    assertFalse(StringUtils.endsWith(\"\\u03B1\\u03B2\\u03B3\\u03B4\", \"\\u03B3\\u0394\"), \"endsWith(\\u03B1\\u03B2\\u03B3\\u03B4, \\u03B3\\u0394)\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\StringUtilsStartsEndsWithTest.java",
  "methodName" : "testEndsWithAny",
  "sourceCode" : "@Test\r\nvoid testEndsWithAny() {\r\n    assertFalse(StringUtils.endsWithAny(null, (String) null), \"StringUtils.endsWithAny(null, null)\");\r\n    assertFalse(StringUtils.endsWithAny(null, \"abc\"), \"StringUtils.endsWithAny(null, new String[] {abc})\");\r\n    assertFalse(StringUtils.endsWithAny(\"abcxyz\", (String) null), \"StringUtils.endsWithAny(abcxyz, null)\");\r\n    assertTrue(StringUtils.endsWithAny(\"abcxyz\", \"\"), \"StringUtils.endsWithAny(abcxyz, new String[] {\\\"\\\"})\");\r\n    assertTrue(StringUtils.endsWithAny(\"abcxyz\", \"xyz\"), \"StringUtils.endsWithAny(abcxyz, new String[] {xyz})\");\r\n    assertTrue(StringUtils.endsWithAny(\"abcxyz\", null, \"xyz\", \"abc\"), \"StringUtils.endsWithAny(abcxyz, new String[] {null, xyz, abc})\");\r\n    assertFalse(StringUtils.endsWithAny(\"defg\", null, \"xyz\", \"abc\"), \"StringUtils.endsWithAny(defg, new String[] {null, xyz, abc})\");\r\n    assertTrue(StringUtils.endsWithAny(\"abcXYZ\", \"def\", \"XYZ\"));\r\n    assertFalse(StringUtils.endsWithAny(\"abcXYZ\", \"def\", \"xyz\"));\r\n    assertTrue(StringUtils.endsWithAny(\"abcXYZ\", \"def\", \"YZ\"));\r\n    /*\r\n         * Type null of the last argument to method endsWithAny(CharSequence, CharSequence...)\r\n         * doesn't exactly match the vararg parameter type.\r\n         * Cast to CharSequence[] to confirm the non-varargs invocation,\r\n         * or pass individual arguments of type CharSequence for a varargs invocation.\r\n         *\r\n         * assertFalse(StringUtils.endsWithAny(\"abcXYZ\", null)); // replace with specific types to avoid warning\r\n         */\r\n    assertFalse(StringUtils.endsWithAny(\"abcXYZ\", (CharSequence) null));\r\n    assertFalse(StringUtils.endsWithAny(\"abcXYZ\", (CharSequence[]) null));\r\n    assertTrue(StringUtils.endsWithAny(\"abcXYZ\", \"\"));\r\n    assertTrue(StringUtils.endsWithAny(\"abcxyz\", new StringBuilder(\"abc\"), new StringBuffer(\"xyz\")), \"StringUtils.endsWithAny(abcxyz, StringBuilder(abc), StringBuffer(xyz))\");\r\n    assertTrue(StringUtils.endsWithAny(new StringBuffer(\"abcxyz\"), new StringBuilder(\"abc\"), new StringBuffer(\"xyz\")), \"StringUtils.endsWithAny(StringBuffer(abcxyz), StringBuilder(abc), StringBuffer(xyz))\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\StringUtilsStartsEndsWithTest.java",
  "methodName" : "testEndsWithIgnoreCase",
  "sourceCode" : "/**\r\n * Test StringUtils.endsWithIgnoreCase()\r\n */\r\n@Test\r\nvoid testEndsWithIgnoreCase() {\r\n    assertTrue(StringUtils.endsWithIgnoreCase(null, null), \"endsWithIgnoreCase(null, null)\");\r\n    assertFalse(StringUtils.endsWithIgnoreCase(FOOBAR, null), \"endsWithIgnoreCase(FOOBAR, null)\");\r\n    assertFalse(StringUtils.endsWithIgnoreCase(null, FOO), \"endsWithIgnoreCase(null, FOO)\");\r\n    assertTrue(StringUtils.endsWithIgnoreCase(FOOBAR, \"\"), \"endsWithIgnoreCase(FOOBAR, \\\"\\\")\");\r\n    assertFalse(StringUtils.endsWithIgnoreCase(foobar, foo), \"endsWithIgnoreCase(foobar, foo)\");\r\n    assertFalse(StringUtils.endsWithIgnoreCase(FOOBAR, FOO), \"endsWithIgnoreCase(FOOBAR, FOO)\");\r\n    assertFalse(StringUtils.endsWithIgnoreCase(foobar, FOO), \"endsWithIgnoreCase(foobar, FOO)\");\r\n    assertFalse(StringUtils.endsWithIgnoreCase(FOOBAR, foo), \"endsWithIgnoreCase(FOOBAR, foo)\");\r\n    assertFalse(StringUtils.endsWithIgnoreCase(foo, foobar), \"endsWithIgnoreCase(foo, foobar)\");\r\n    assertFalse(StringUtils.endsWithIgnoreCase(bar, foobar), \"endsWithIgnoreCase(foo, foobar)\");\r\n    assertTrue(StringUtils.endsWithIgnoreCase(foobar, bar), \"endsWithIgnoreCase(foobar, bar)\");\r\n    assertTrue(StringUtils.endsWithIgnoreCase(FOOBAR, BAR), \"endsWithIgnoreCase(FOOBAR, BAR)\");\r\n    assertTrue(StringUtils.endsWithIgnoreCase(foobar, BAR), \"endsWithIgnoreCase(foobar, BAR)\");\r\n    assertTrue(StringUtils.endsWithIgnoreCase(FOOBAR, bar), \"endsWithIgnoreCase(FOOBAR, bar)\");\r\n    // javadoc\r\n    assertTrue(StringUtils.endsWithIgnoreCase(\"abcdef\", \"def\"));\r\n    assertTrue(StringUtils.endsWithIgnoreCase(\"ABCDEF\", \"def\"));\r\n    assertFalse(StringUtils.endsWithIgnoreCase(\"ABCDEF\", \"cde\"));\r\n    // \"alpha, beta, gamma, delta\".endsWith(\"DELTA\")\r\n    assertTrue(StringUtils.endsWithIgnoreCase(\"\\u03B1\\u03B2\\u03B3\\u03B4\", \"\\u0394\"), \"endsWith(\\u03B1\\u03B2\\u03B3\\u03B4, \\u0394)\");\r\n    // \"alpha, beta, gamma, delta\".endsWith(\"GAMMA\")\r\n    assertFalse(StringUtils.endsWithIgnoreCase(\"\\u03B1\\u03B2\\u03B3\\u03B4\", \"\\u0393\"), \"endsWith(\\u03B1\\u03B2\\u03B3\\u03B4, \\u0393)\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\StringUtilsStartsEndsWithTest.java",
  "methodName" : "testStartsWith",
  "sourceCode" : "/**\r\n * Test StringUtils.startsWith()\r\n */\r\n@Test\r\nvoid testStartsWith() {\r\n    assertTrue(StringUtils.startsWith(null, null), \"startsWith(null, null)\");\r\n    assertFalse(StringUtils.startsWith(FOOBAR, null), \"startsWith(FOOBAR, null)\");\r\n    assertFalse(StringUtils.startsWith(null, FOO), \"startsWith(null, FOO)\");\r\n    assertTrue(StringUtils.startsWith(FOOBAR, \"\"), \"startsWith(FOOBAR, \\\"\\\")\");\r\n    assertTrue(StringUtils.startsWith(foobar, foo), \"startsWith(foobar, foo)\");\r\n    assertTrue(StringUtils.startsWith(FOOBAR, FOO), \"startsWith(FOOBAR, FOO)\");\r\n    assertFalse(StringUtils.startsWith(foobar, FOO), \"startsWith(foobar, FOO)\");\r\n    assertFalse(StringUtils.startsWith(FOOBAR, foo), \"startsWith(FOOBAR, foo)\");\r\n    assertFalse(StringUtils.startsWith(foo, foobar), \"startsWith(foo, foobar)\");\r\n    assertFalse(StringUtils.startsWith(bar, foobar), \"startsWith(foo, foobar)\");\r\n    assertFalse(StringUtils.startsWith(foobar, bar), \"startsWith(foobar, bar)\");\r\n    assertFalse(StringUtils.startsWith(FOOBAR, BAR), \"startsWith(FOOBAR, BAR)\");\r\n    assertFalse(StringUtils.startsWith(foobar, BAR), \"startsWith(foobar, BAR)\");\r\n    assertFalse(StringUtils.startsWith(FOOBAR, bar), \"startsWith(FOOBAR, bar)\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\StringUtilsStartsEndsWithTest.java",
  "methodName" : "testStartsWithAny",
  "sourceCode" : "@Test\r\nvoid testStartsWithAny() {\r\n    assertFalse(StringUtils.startsWithAny(null, (String[]) null));\r\n    assertFalse(StringUtils.startsWithAny(null, \"abc\"));\r\n    assertFalse(StringUtils.startsWithAny(\"abcxyz\", (String[]) null));\r\n    assertFalse(StringUtils.startsWithAny(\"abcxyz\"));\r\n    assertTrue(StringUtils.startsWithAny(\"abcxyz\", \"abc\"));\r\n    assertTrue(StringUtils.startsWithAny(\"abcxyz\", null, \"xyz\", \"abc\"));\r\n    assertFalse(StringUtils.startsWithAny(\"abcxyz\", null, \"xyz\", \"abcd\"));\r\n    assertTrue(StringUtils.startsWithAny(\"abcxyz\", \"\"));\r\n    assertFalse(StringUtils.startsWithAny(\"abcxyz\", null, \"xyz\", \"ABCX\"));\r\n    assertFalse(StringUtils.startsWithAny(\"ABCXYZ\", null, \"xyz\", \"abc\"));\r\n    assertTrue(StringUtils.startsWithAny(\"abcxyz\", new StringBuilder(\"xyz\"), new StringBuffer(\"abc\")), \"StringUtils.startsWithAny(abcxyz, StringBuilder(xyz), StringBuffer(abc))\");\r\n    assertTrue(StringUtils.startsWithAny(new StringBuffer(\"abcxyz\"), new StringBuilder(\"xyz\"), new StringBuffer(\"abc\")), \"StringUtils.startsWithAny(StringBuffer(abcxyz), StringBuilder(xyz), StringBuffer(abc))\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\StringUtilsStartsEndsWithTest.java",
  "methodName" : "testStartsWithIgnoreCase",
  "sourceCode" : "/**\r\n * Test StringUtils.testStartsWithIgnoreCase()\r\n */\r\n@Test\r\nvoid testStartsWithIgnoreCase() {\r\n    assertTrue(StringUtils.startsWithIgnoreCase(null, null), \"startsWithIgnoreCase(null, null)\");\r\n    assertFalse(StringUtils.startsWithIgnoreCase(FOOBAR, null), \"startsWithIgnoreCase(FOOBAR, null)\");\r\n    assertFalse(StringUtils.startsWithIgnoreCase(null, FOO), \"startsWithIgnoreCase(null, FOO)\");\r\n    assertTrue(StringUtils.startsWithIgnoreCase(FOOBAR, \"\"), \"startsWithIgnoreCase(FOOBAR, \\\"\\\")\");\r\n    assertTrue(StringUtils.startsWithIgnoreCase(foobar, foo), \"startsWithIgnoreCase(foobar, foo)\");\r\n    assertTrue(StringUtils.startsWithIgnoreCase(FOOBAR, FOO), \"startsWithIgnoreCase(FOOBAR, FOO)\");\r\n    assertTrue(StringUtils.startsWithIgnoreCase(foobar, FOO), \"startsWithIgnoreCase(foobar, FOO)\");\r\n    assertTrue(StringUtils.startsWithIgnoreCase(FOOBAR, foo), \"startsWithIgnoreCase(FOOBAR, foo)\");\r\n    assertFalse(StringUtils.startsWithIgnoreCase(foo, foobar), \"startsWithIgnoreCase(foo, foobar)\");\r\n    assertFalse(StringUtils.startsWithIgnoreCase(bar, foobar), \"startsWithIgnoreCase(foo, foobar)\");\r\n    assertFalse(StringUtils.startsWithIgnoreCase(foobar, bar), \"startsWithIgnoreCase(foobar, bar)\");\r\n    assertFalse(StringUtils.startsWithIgnoreCase(FOOBAR, BAR), \"startsWithIgnoreCase(FOOBAR, BAR)\");\r\n    assertFalse(StringUtils.startsWithIgnoreCase(foobar, BAR), \"startsWithIgnoreCase(foobar, BAR)\");\r\n    assertFalse(StringUtils.startsWithIgnoreCase(FOOBAR, bar), \"startsWithIgnoreCase(FOOBAR, bar)\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\StringUtilsSubstringTest.java",
  "methodName" : "testCountMatches_char",
  "sourceCode" : "@Test\r\nvoid testCountMatches_char() {\r\n    assertEquals(0, StringUtils.countMatches(null, 'D'));\r\n    assertEquals(5, StringUtils.countMatches(\"one long someone sentence of one\", ' '));\r\n    assertEquals(6, StringUtils.countMatches(\"one long someone sentence of one\", 'o'));\r\n    assertEquals(4, StringUtils.countMatches(\"oooooooooooo\", \"ooo\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\StringUtilsSubstringTest.java",
  "methodName" : "testCountMatches_String",
  "sourceCode" : "@Test\r\nvoid testCountMatches_String() {\r\n    assertEquals(0, StringUtils.countMatches(null, null));\r\n    assertEquals(0, StringUtils.countMatches(\"blah\", null));\r\n    assertEquals(0, StringUtils.countMatches(null, \"DD\"));\r\n    assertEquals(0, StringUtils.countMatches(\"x\", \"\"));\r\n    assertEquals(0, StringUtils.countMatches(\"\", \"\"));\r\n    assertEquals(3, StringUtils.countMatches(\"one long someone sentence of one\", \"one\"));\r\n    assertEquals(0, StringUtils.countMatches(\"one long someone sentence of one\", \"two\"));\r\n    assertEquals(4, StringUtils.countMatches(\"oooooooooooo\", \"ooo\"));\r\n    assertEquals(0, StringUtils.countMatches(null, \"?\"));\r\n    assertEquals(0, StringUtils.countMatches(\"\", \"?\"));\r\n    assertEquals(0, StringUtils.countMatches(\"abba\", null));\r\n    assertEquals(0, StringUtils.countMatches(\"abba\", \"\"));\r\n    assertEquals(2, StringUtils.countMatches(\"abba\", \"a\"));\r\n    assertEquals(1, StringUtils.countMatches(\"abba\", \"ab\"));\r\n    assertEquals(0, StringUtils.countMatches(\"abba\", \"xxx\"));\r\n    assertEquals(1, StringUtils.countMatches(\"ababa\", \"aba\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\StringUtilsSubstringTest.java",
  "methodName" : "testLeft_String",
  "sourceCode" : "@Test\r\nvoid testLeft_String() {\r\n    assertSame(null, StringUtils.left(null, -1));\r\n    assertSame(null, StringUtils.left(null, 0));\r\n    assertSame(null, StringUtils.left(null, 2));\r\n    assertEquals(\"\", StringUtils.left(\"\", -1));\r\n    assertEquals(\"\", StringUtils.left(\"\", 0));\r\n    assertEquals(\"\", StringUtils.left(\"\", 2));\r\n    assertEquals(\"\", StringUtils.left(FOOBAR, -1));\r\n    assertEquals(\"\", StringUtils.left(FOOBAR, 0));\r\n    assertEquals(FOO, StringUtils.left(FOOBAR, 3));\r\n    assertSame(FOOBAR, StringUtils.left(FOOBAR, 80));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\StringUtilsSubstringTest.java",
  "methodName" : "testMid_String",
  "sourceCode" : "@Test\r\nvoid testMid_String() {\r\n    assertSame(null, StringUtils.mid(null, -1, 0));\r\n    assertSame(null, StringUtils.mid(null, 0, -1));\r\n    assertSame(null, StringUtils.mid(null, 3, 0));\r\n    assertSame(null, StringUtils.mid(null, 3, 2));\r\n    assertEquals(\"\", StringUtils.mid(\"\", 0, -1));\r\n    assertEquals(\"\", StringUtils.mid(\"\", 0, 0));\r\n    assertEquals(\"\", StringUtils.mid(\"\", 0, 2));\r\n    assertEquals(\"\", StringUtils.mid(FOOBAR, 3, -1));\r\n    assertEquals(\"\", StringUtils.mid(FOOBAR, 3, 0));\r\n    assertEquals(\"b\", StringUtils.mid(FOOBAR, 3, 1));\r\n    assertEquals(FOO, StringUtils.mid(FOOBAR, 0, 3));\r\n    assertEquals(BAR, StringUtils.mid(FOOBAR, 3, 3));\r\n    assertEquals(FOOBAR, StringUtils.mid(FOOBAR, 0, 80));\r\n    assertEquals(BAR, StringUtils.mid(FOOBAR, 3, 80));\r\n    assertEquals(\"\", StringUtils.mid(FOOBAR, 9, 3));\r\n    assertEquals(FOO, StringUtils.mid(FOOBAR, -1, 3));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\StringUtilsSubstringTest.java",
  "methodName" : "testRight_String",
  "sourceCode" : "@Test\r\nvoid testRight_String() {\r\n    assertSame(null, StringUtils.right(null, -1));\r\n    assertSame(null, StringUtils.right(null, 0));\r\n    assertSame(null, StringUtils.right(null, 2));\r\n    assertEquals(\"\", StringUtils.right(\"\", -1));\r\n    assertEquals(\"\", StringUtils.right(\"\", 0));\r\n    assertEquals(\"\", StringUtils.right(\"\", 2));\r\n    assertEquals(\"\", StringUtils.right(FOOBAR, -1));\r\n    assertEquals(\"\", StringUtils.right(FOOBAR, 0));\r\n    assertEquals(BAR, StringUtils.right(FOOBAR, 3));\r\n    assertSame(FOOBAR, StringUtils.right(FOOBAR, 80));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\StringUtilsSubstringTest.java",
  "methodName" : "testSubstring_StringInt",
  "sourceCode" : "@Test\r\nvoid testSubstring_StringInt() {\r\n    assertNull(StringUtils.substring(null, 0));\r\n    assertEquals(\"\", StringUtils.substring(\"\", 0));\r\n    assertEquals(\"\", StringUtils.substring(\"\", 2));\r\n    assertEquals(\"\", StringUtils.substring(SENTENCE, 80));\r\n    assertEquals(BAZ, StringUtils.substring(SENTENCE, 8));\r\n    assertEquals(BAZ, StringUtils.substring(SENTENCE, -3));\r\n    assertEquals(SENTENCE, StringUtils.substring(SENTENCE, 0));\r\n    assertEquals(\"abc\", StringUtils.substring(\"abc\", -4));\r\n    assertEquals(\"abc\", StringUtils.substring(\"abc\", -3));\r\n    assertEquals(\"bc\", StringUtils.substring(\"abc\", -2));\r\n    assertEquals(\"c\", StringUtils.substring(\"abc\", -1));\r\n    assertEquals(\"abc\", StringUtils.substring(\"abc\", 0));\r\n    assertEquals(\"bc\", StringUtils.substring(\"abc\", 1));\r\n    assertEquals(\"c\", StringUtils.substring(\"abc\", 2));\r\n    assertEquals(\"\", StringUtils.substring(\"abc\", 3));\r\n    assertEquals(\"\", StringUtils.substring(\"abc\", 4));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\StringUtilsSubstringTest.java",
  "methodName" : "testSubstring_StringIntInt",
  "sourceCode" : "@Test\r\nvoid testSubstring_StringIntInt() {\r\n    assertNull(StringUtils.substring(null, 0, 0));\r\n    assertNull(StringUtils.substring(null, 1, 2));\r\n    assertEquals(\"\", StringUtils.substring(\"\", 0, 0));\r\n    assertEquals(\"\", StringUtils.substring(\"\", 1, 2));\r\n    assertEquals(\"\", StringUtils.substring(\"\", -2, -1));\r\n    assertEquals(\"\", StringUtils.substring(SENTENCE, 8, 6));\r\n    assertEquals(FOO, StringUtils.substring(SENTENCE, 0, 3));\r\n    assertEquals(\"o\", StringUtils.substring(SENTENCE, -9, 3));\r\n    assertEquals(FOO, StringUtils.substring(SENTENCE, 0, -8));\r\n    assertEquals(\"o\", StringUtils.substring(SENTENCE, -9, -8));\r\n    assertEquals(SENTENCE, StringUtils.substring(SENTENCE, 0, 80));\r\n    assertEquals(\"\", StringUtils.substring(SENTENCE, 2, 2));\r\n    assertEquals(\"b\", StringUtils.substring(\"abc\", -2, -1));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\StringUtilsSubstringTest.java",
  "methodName" : "testSubstringAfter_StringInt",
  "sourceCode" : "@Test\r\nvoid testSubstringAfter_StringInt() {\r\n    assertNull(StringUtils.substringAfter(null, 0));\r\n    assertNull(StringUtils.substringAfter(null, 'X'));\r\n    assertEquals(\"\", StringUtils.substringAfter(\"\", 0));\r\n    assertEquals(\"\", StringUtils.substringAfter(\"\", 'X'));\r\n    assertEquals(\"\", StringUtils.substringAfter(\"foo\", 0));\r\n    assertEquals(\"ot\", StringUtils.substringAfter(\"foot\", 'o'));\r\n    assertEquals(\"bc\", StringUtils.substringAfter(\"abc\", 'a'));\r\n    assertEquals(\"cba\", StringUtils.substringAfter(\"abcba\", 'b'));\r\n    assertEquals(\"\", StringUtils.substringAfter(\"abc\", 'c'));\r\n    assertEquals(\"\", StringUtils.substringAfter(\"abc\", 'd'));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\StringUtilsSubstringTest.java",
  "methodName" : "testSubstringAfter_StringString",
  "sourceCode" : "@Test\r\nvoid testSubstringAfter_StringString() {\r\n    assertEquals(\"barXXbaz\", StringUtils.substringAfter(\"fooXXbarXXbaz\", \"XX\"));\r\n    assertNull(StringUtils.substringAfter(null, null));\r\n    assertNull(StringUtils.substringAfter(null, \"\"));\r\n    assertNull(StringUtils.substringAfter(null, \"XX\"));\r\n    assertEquals(\"\", StringUtils.substringAfter(\"\", null));\r\n    assertEquals(\"\", StringUtils.substringAfter(\"\", \"\"));\r\n    assertEquals(\"\", StringUtils.substringAfter(\"\", \"XX\"));\r\n    assertEquals(\"\", StringUtils.substringAfter(\"foo\", null));\r\n    assertEquals(\"ot\", StringUtils.substringAfter(\"foot\", \"o\"));\r\n    assertEquals(\"bc\", StringUtils.substringAfter(\"abc\", \"a\"));\r\n    assertEquals(\"cba\", StringUtils.substringAfter(\"abcba\", \"b\"));\r\n    assertEquals(\"\", StringUtils.substringAfter(\"abc\", \"c\"));\r\n    assertEquals(\"abc\", StringUtils.substringAfter(\"abc\", \"\"));\r\n    assertEquals(\"\", StringUtils.substringAfter(\"abc\", \"d\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\StringUtilsSubstringTest.java",
  "methodName" : "testSubstringAfterLast_StringInt",
  "sourceCode" : "@Test\r\nvoid testSubstringAfterLast_StringInt() {\r\n    assertNull(StringUtils.substringAfterLast(null, 0));\r\n    assertNull(StringUtils.substringAfterLast(null, 'X'));\r\n    assertEquals(\"\", StringUtils.substringAfterLast(\"\", 0));\r\n    assertEquals(\"\", StringUtils.substringAfterLast(\"\", 'a'));\r\n    assertEquals(\"\", StringUtils.substringAfterLast(\"foo\", 0));\r\n    assertEquals(\"\", StringUtils.substringAfterLast(\"foo\", 'b'));\r\n    assertEquals(\"t\", StringUtils.substringAfterLast(\"foot\", 'o'));\r\n    assertEquals(\"bc\", StringUtils.substringAfterLast(\"abc\", 'a'));\r\n    assertEquals(\"a\", StringUtils.substringAfterLast(\"abcba\", 'b'));\r\n    assertEquals(\"\", StringUtils.substringAfterLast(\"abc\", 'c'));\r\n    assertEquals(\"\", StringUtils.substringAfterLast(\"\", 'd'));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\StringUtilsSubstringTest.java",
  "methodName" : "testSubstringAfterLast_StringString",
  "sourceCode" : "@Test\r\nvoid testSubstringAfterLast_StringString() {\r\n    assertEquals(\"baz\", StringUtils.substringAfterLast(\"fooXXbarXXbaz\", \"XX\"));\r\n    assertNull(StringUtils.substringAfterLast(null, null));\r\n    assertNull(StringUtils.substringAfterLast(null, \"\"));\r\n    assertNull(StringUtils.substringAfterLast(null, \"XX\"));\r\n    assertEquals(\"\", StringUtils.substringAfterLast(\"\", null));\r\n    assertEquals(\"\", StringUtils.substringAfterLast(\"\", \"\"));\r\n    assertEquals(\"\", StringUtils.substringAfterLast(\"\", \"a\"));\r\n    assertEquals(\"\", StringUtils.substringAfterLast(\"foo\", null));\r\n    assertEquals(\"\", StringUtils.substringAfterLast(\"foo\", \"b\"));\r\n    assertEquals(\"t\", StringUtils.substringAfterLast(\"foot\", \"o\"));\r\n    assertEquals(\"bc\", StringUtils.substringAfterLast(\"abc\", \"a\"));\r\n    assertEquals(\"a\", StringUtils.substringAfterLast(\"abcba\", \"b\"));\r\n    assertEquals(\"\", StringUtils.substringAfterLast(\"abc\", \"c\"));\r\n    assertEquals(\"\", StringUtils.substringAfterLast(\"\", \"d\"));\r\n    assertEquals(\"\", StringUtils.substringAfterLast(\"abc\", \"\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\StringUtilsSubstringTest.java",
  "methodName" : "testSubstringBefore_StringInt",
  "sourceCode" : "@Test\r\nvoid testSubstringBefore_StringInt() {\r\n    assertEquals(\"foo\", StringUtils.substringBefore(\"fooXXbarXXbaz\", 'X'));\r\n    assertNull(StringUtils.substringBefore(null, 0));\r\n    assertNull(StringUtils.substringBefore(null, 'X'));\r\n    assertEquals(\"\", StringUtils.substringBefore(\"\", 0));\r\n    assertEquals(\"\", StringUtils.substringBefore(\"\", 'X'));\r\n    assertEquals(\"foo\", StringUtils.substringBefore(\"foo\", 0));\r\n    assertEquals(\"foo\", StringUtils.substringBefore(\"foo\", 'b'));\r\n    assertEquals(\"f\", StringUtils.substringBefore(\"foot\", 'o'));\r\n    assertEquals(\"\", StringUtils.substringBefore(\"abc\", 'a'));\r\n    assertEquals(\"a\", StringUtils.substringBefore(\"abcba\", 'b'));\r\n    assertEquals(\"ab\", StringUtils.substringBefore(\"abc\", 'c'));\r\n    assertEquals(\"abc\", StringUtils.substringBefore(\"abc\", 0));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\StringUtilsSubstringTest.java",
  "methodName" : "testSubstringBefore_StringString",
  "sourceCode" : "@Test\r\nvoid testSubstringBefore_StringString() {\r\n    assertEquals(\"foo\", StringUtils.substringBefore(\"fooXXbarXXbaz\", \"XX\"));\r\n    assertNull(StringUtils.substringBefore(null, null));\r\n    assertNull(StringUtils.substringBefore(null, \"\"));\r\n    assertNull(StringUtils.substringBefore(null, \"XX\"));\r\n    assertEquals(\"\", StringUtils.substringBefore(\"\", null));\r\n    assertEquals(\"\", StringUtils.substringBefore(\"\", \"\"));\r\n    assertEquals(\"\", StringUtils.substringBefore(\"\", \"XX\"));\r\n    assertEquals(\"foo\", StringUtils.substringBefore(\"foo\", null));\r\n    assertEquals(\"foo\", StringUtils.substringBefore(\"foo\", \"b\"));\r\n    assertEquals(\"f\", StringUtils.substringBefore(\"foot\", \"o\"));\r\n    assertEquals(\"\", StringUtils.substringBefore(\"abc\", \"a\"));\r\n    assertEquals(\"a\", StringUtils.substringBefore(\"abcba\", \"b\"));\r\n    assertEquals(\"ab\", StringUtils.substringBefore(\"abc\", \"c\"));\r\n    assertEquals(\"\", StringUtils.substringBefore(\"abc\", \"\"));\r\n    assertEquals(\"abc\", StringUtils.substringBefore(\"abc\", \"X\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\StringUtilsSubstringTest.java",
  "methodName" : "testSubstringBeforeLast_StringString",
  "sourceCode" : "@Test\r\nvoid testSubstringBeforeLast_StringString() {\r\n    assertEquals(\"fooXXbar\", StringUtils.substringBeforeLast(\"fooXXbarXXbaz\", \"XX\"));\r\n    assertNull(StringUtils.substringBeforeLast(null, null));\r\n    assertNull(StringUtils.substringBeforeLast(null, \"\"));\r\n    assertNull(StringUtils.substringBeforeLast(null, \"XX\"));\r\n    assertEquals(\"\", StringUtils.substringBeforeLast(\"\", null));\r\n    assertEquals(\"\", StringUtils.substringBeforeLast(\"\", \"\"));\r\n    assertEquals(\"\", StringUtils.substringBeforeLast(\"\", \"XX\"));\r\n    assertEquals(\"foo\", StringUtils.substringBeforeLast(\"foo\", null));\r\n    assertEquals(\"foo\", StringUtils.substringBeforeLast(\"foo\", \"b\"));\r\n    assertEquals(\"fo\", StringUtils.substringBeforeLast(\"foo\", \"o\"));\r\n    assertEquals(\"abc\\r\\n\", StringUtils.substringBeforeLast(\"abc\\r\\n\", \"d\"));\r\n    assertEquals(\"abc\", StringUtils.substringBeforeLast(\"abcdabc\", \"d\"));\r\n    assertEquals(\"abcdabc\", StringUtils.substringBeforeLast(\"abcdabcd\", \"d\"));\r\n    assertEquals(\"a\", StringUtils.substringBeforeLast(\"abc\", \"b\"));\r\n    assertEquals(\"abc \", StringUtils.substringBeforeLast(\"abc \\n\", \"\\n\"));\r\n    assertEquals(\"a\", StringUtils.substringBeforeLast(\"a\", null));\r\n    assertEquals(\"a\", StringUtils.substringBeforeLast(\"a\", \"\"));\r\n    assertEquals(\"\", StringUtils.substringBeforeLast(\"a\", \"a\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\StringUtilsSubstringTest.java",
  "methodName" : "testSubstringBetween_StringString",
  "sourceCode" : "@Test\r\nvoid testSubstringBetween_StringString() {\r\n    assertNull(StringUtils.substringBetween(null, \"tag\"));\r\n    assertEquals(\"\", StringUtils.substringBetween(\"\", \"\"));\r\n    assertNull(StringUtils.substringBetween(\"\", \"abc\"));\r\n    assertEquals(\"\", StringUtils.substringBetween(\"    \", \" \"));\r\n    assertNull(StringUtils.substringBetween(\"abc\", null));\r\n    assertEquals(\"\", StringUtils.substringBetween(\"abc\", \"\"));\r\n    assertNull(StringUtils.substringBetween(\"abc\", \"a\"));\r\n    assertEquals(\"bc\", StringUtils.substringBetween(\"abca\", \"a\"));\r\n    assertEquals(\"bc\", StringUtils.substringBetween(\"abcabca\", \"a\"));\r\n    assertEquals(\"bar\", StringUtils.substringBetween(\"\\nbar\\n\", \"\\n\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\StringUtilsSubstringTest.java",
  "methodName" : "testSubstringBetween_StringStringString",
  "sourceCode" : "@Test\r\nvoid testSubstringBetween_StringStringString() {\r\n    assertNull(StringUtils.substringBetween(null, \"\", \"\"));\r\n    assertNull(StringUtils.substringBetween(\"\", null, \"\"));\r\n    assertNull(StringUtils.substringBetween(\"\", \"\", null));\r\n    assertEquals(\"\", StringUtils.substringBetween(\"\", \"\", \"\"));\r\n    assertEquals(\"\", StringUtils.substringBetween(\"foo\", \"\", \"\"));\r\n    assertNull(StringUtils.substringBetween(\"foo\", \"\", \"]\"));\r\n    assertNull(StringUtils.substringBetween(\"foo\", \"[\", \"]\"));\r\n    assertEquals(\"\", StringUtils.substringBetween(\"    \", \" \", \"  \"));\r\n    assertEquals(\"bar\", StringUtils.substringBetween(\"<foo>bar</foo>\", \"<foo>\", \"</foo>\"));\r\n    assertEquals(\"abc\", StringUtils.substringBetween(\"yabczyabcz\", \"y\", \"z\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\StringUtilsSubstringTest.java",
  "methodName" : "testSubstringsBetween_StringStringString",
  "sourceCode" : "/**\r\n * Tests the substringsBetween method that returns a String Array of substrings.\r\n */\r\n@Test\r\nvoid testSubstringsBetween_StringStringString() {\r\n    String[] results = StringUtils.substringsBetween(\"[one], [two], [three]\", \"[\", \"]\");\r\n    assertEquals(3, results.length);\r\n    assertEquals(\"one\", results[0]);\r\n    assertEquals(\"two\", results[1]);\r\n    assertEquals(\"three\", results[2]);\r\n    results = StringUtils.substringsBetween(\"[one], [two], three\", \"[\", \"]\");\r\n    assertEquals(2, results.length);\r\n    assertEquals(\"one\", results[0]);\r\n    assertEquals(\"two\", results[1]);\r\n    results = StringUtils.substringsBetween(\"[one], [two], three]\", \"[\", \"]\");\r\n    assertEquals(2, results.length);\r\n    assertEquals(\"one\", results[0]);\r\n    assertEquals(\"two\", results[1]);\r\n    results = StringUtils.substringsBetween(\"[one], two], three]\", \"[\", \"]\");\r\n    assertEquals(1, results.length);\r\n    assertEquals(\"one\", results[0]);\r\n    results = StringUtils.substringsBetween(\"one], two], [three]\", \"[\", \"]\");\r\n    assertEquals(1, results.length);\r\n    assertEquals(\"three\", results[0]);\r\n    // 'ab hello ba' will match, but 'ab non ba' won't\r\n    // this is because the 'a' is shared between the two and can't be matched twice\r\n    results = StringUtils.substringsBetween(\"aabhellobabnonba\", \"ab\", \"ba\");\r\n    assertEquals(1, results.length);\r\n    assertEquals(\"hello\", results[0]);\r\n    results = StringUtils.substringsBetween(\"one, two, three\", \"[\", \"]\");\r\n    assertNull(results);\r\n    results = StringUtils.substringsBetween(\"[one, two, three\", \"[\", \"]\");\r\n    assertNull(results);\r\n    results = StringUtils.substringsBetween(\"one, two, three]\", \"[\", \"]\");\r\n    assertNull(results);\r\n    results = StringUtils.substringsBetween(\"[one], [two], [three]\", \"[\", null);\r\n    assertNull(results);\r\n    results = StringUtils.substringsBetween(\"[one], [two], [three]\", null, \"]\");\r\n    assertNull(results);\r\n    results = StringUtils.substringsBetween(\"[one], [two], [three]\", \"\", \"\");\r\n    assertNull(results);\r\n    results = StringUtils.substringsBetween(null, \"[\", \"]\");\r\n    assertNull(results);\r\n    results = StringUtils.substringsBetween(\"\", \"[\", \"]\");\r\n    assertEquals(0, results.length);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\StringUtilsTest.java",
  "methodName" : "testAppendIfMissing",
  "sourceCode" : "/**\r\n * Tests {@code appendIfMissing}.\r\n */\r\n@Test\r\nvoid testAppendIfMissing() {\r\n    assertNull(StringUtils.appendIfMissing(null, null), \"appendIfMissing(null,null)\");\r\n    assertEquals(\"abc\", StringUtils.appendIfMissing(\"abc\", null), \"appendIfMissing(abc,null)\");\r\n    assertEquals(\"xyz\", StringUtils.appendIfMissing(\"\", \"xyz\"), \"appendIfMissing(\\\"\\\",xyz)\");\r\n    assertEquals(\"abcxyz\", StringUtils.appendIfMissing(\"abc\", \"xyz\"), \"appendIfMissing(abc,xyz)\");\r\n    assertEquals(\"abcxyz\", StringUtils.appendIfMissing(\"abcxyz\", \"xyz\"), \"appendIfMissing(abcxyz,xyz)\");\r\n    assertEquals(\"aXYZxyz\", StringUtils.appendIfMissing(\"aXYZ\", \"xyz\"), \"appendIfMissing(aXYZ,xyz)\");\r\n    assertNull(StringUtils.appendIfMissing(null, null, (CharSequence[]) null), \"appendIfMissing(null,null,null)\");\r\n    assertEquals(\"abc\", StringUtils.appendIfMissing(\"abc\", null, (CharSequence[]) null), \"appendIfMissing(abc,null,null)\");\r\n    assertEquals(\"xyz\", StringUtils.appendIfMissing(\"\", \"xyz\", (CharSequence[]) null), \"appendIfMissing(\\\"\\\",xyz,null))\");\r\n    assertEquals(\"abcxyz\", StringUtils.appendIfMissing(\"abc\", \"xyz\", (CharSequence) null), \"appendIfMissing(abc,xyz,{null})\");\r\n    assertEquals(\"abc\", StringUtils.appendIfMissing(\"abc\", \"xyz\", \"\"), \"appendIfMissing(abc,xyz,\\\"\\\")\");\r\n    assertEquals(\"abcxyz\", StringUtils.appendIfMissing(\"abc\", \"xyz\", \"mno\"), \"appendIfMissing(abc,xyz,mno)\");\r\n    assertEquals(\"abcxyz\", StringUtils.appendIfMissing(\"abcxyz\", \"xyz\", \"mno\"), \"appendIfMissing(abcxyz,xyz,mno)\");\r\n    assertEquals(\"abcmno\", StringUtils.appendIfMissing(\"abcmno\", \"xyz\", \"mno\"), \"appendIfMissing(abcmno,xyz,mno)\");\r\n    assertEquals(\"abcXYZxyz\", StringUtils.appendIfMissing(\"abcXYZ\", \"xyz\", \"mno\"), \"appendIfMissing(abcXYZ,xyz,mno)\");\r\n    assertEquals(\"abcMNOxyz\", StringUtils.appendIfMissing(\"abcMNO\", \"xyz\", \"mno\"), \"appendIfMissing(abcMNO,xyz,mno)\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\StringUtilsTest.java",
  "methodName" : "testAppendIfMissingIgnoreCase",
  "sourceCode" : "/**\r\n * Tests {@code appendIfMissingIgnoreCase}.\r\n */\r\n@Test\r\nvoid testAppendIfMissingIgnoreCase() {\r\n    assertNull(StringUtils.appendIfMissingIgnoreCase(null, null), \"appendIfMissingIgnoreCase(null,null)\");\r\n    assertEquals(\"abc\", StringUtils.appendIfMissingIgnoreCase(\"abc\", null), \"appendIfMissingIgnoreCase(abc,null)\");\r\n    assertEquals(\"xyz\", StringUtils.appendIfMissingIgnoreCase(\"\", \"xyz\"), \"appendIfMissingIgnoreCase(\\\"\\\",xyz)\");\r\n    assertEquals(\"abcxyz\", StringUtils.appendIfMissingIgnoreCase(\"abc\", \"xyz\"), \"appendIfMissingIgnoreCase(abc,xyz)\");\r\n    assertEquals(\"abcxyz\", StringUtils.appendIfMissingIgnoreCase(\"abcxyz\", \"xyz\"), \"appendIfMissingIgnoreCase(abcxyz,xyz)\");\r\n    assertEquals(\"abcXYZ\", StringUtils.appendIfMissingIgnoreCase(\"abcXYZ\", \"xyz\"), \"appendIfMissingIgnoreCase(abcXYZ,xyz)\");\r\n    assertNull(StringUtils.appendIfMissingIgnoreCase(null, null, (CharSequence[]) null), \"appendIfMissingIgnoreCase(null,null,null)\");\r\n    assertEquals(\"abc\", StringUtils.appendIfMissingIgnoreCase(\"abc\", null, (CharSequence[]) null), \"appendIfMissingIgnoreCase(abc,null,null)\");\r\n    assertEquals(\"xyz\", StringUtils.appendIfMissingIgnoreCase(\"\", \"xyz\", (CharSequence[]) null), \"appendIfMissingIgnoreCase(\\\"\\\",xyz,null)\");\r\n    assertEquals(\"abcxyz\", StringUtils.appendIfMissingIgnoreCase(\"abc\", \"xyz\", (CharSequence) null), \"appendIfMissingIgnoreCase(abc,xyz,{null})\");\r\n    assertEquals(\"abc\", StringUtils.appendIfMissingIgnoreCase(\"abc\", \"xyz\", \"\"), \"appendIfMissingIgnoreCase(abc,xyz,\\\"\\\")\");\r\n    assertEquals(\"abcxyz\", StringUtils.appendIfMissingIgnoreCase(\"abc\", \"xyz\", \"mno\"), \"appendIfMissingIgnoreCase(abc,xyz,mno)\");\r\n    assertEquals(\"abcxyz\", StringUtils.appendIfMissingIgnoreCase(\"abcxyz\", \"xyz\", \"mno\"), \"appendIfMissingIgnoreCase(abcxyz,xyz,mno)\");\r\n    assertEquals(\"abcmno\", StringUtils.appendIfMissingIgnoreCase(\"abcmno\", \"xyz\", \"mno\"), \"appendIfMissingIgnoreCase(abcmno,xyz,mno)\");\r\n    assertEquals(\"abcXYZ\", StringUtils.appendIfMissingIgnoreCase(\"abcXYZ\", \"xyz\", \"mno\"), \"appendIfMissingIgnoreCase(abcXYZ,xyz,mno)\");\r\n    assertEquals(\"abcMNO\", StringUtils.appendIfMissingIgnoreCase(\"abcMNO\", \"xyz\", \"mno\"), \"appendIfMissingIgnoreCase(abcMNO,xyz,mno)\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\StringUtilsTest.java",
  "methodName" : "testCapitalize",
  "sourceCode" : "@Test\r\nvoid testCapitalize() {\r\n    assertNull(StringUtils.capitalize(null));\r\n    assertEquals(\"\", StringUtils.capitalize(\"\"), \"capitalize(empty-string) failed\");\r\n    assertEquals(\"X\", StringUtils.capitalize(\"x\"), \"capitalize(single-char-string) failed\");\r\n    assertEquals(FOO_CAP, StringUtils.capitalize(FOO_CAP), \"capitalize(String) failed\");\r\n    assertEquals(FOO_CAP, StringUtils.capitalize(FOO_UNCAP), \"capitalize(string) failed\");\r\n    assertEquals(\"\\u01C8\", StringUtils.capitalize(\"\\u01C9\"), \"capitalize(String) is not using TitleCase\");\r\n    // Javadoc examples\r\n    assertNull(StringUtils.capitalize(null));\r\n    assertEquals(\"\", StringUtils.capitalize(\"\"));\r\n    assertEquals(\"Cat\", StringUtils.capitalize(\"cat\"));\r\n    assertEquals(\"CAt\", StringUtils.capitalize(\"cAt\"));\r\n    assertEquals(\"'cat'\", StringUtils.capitalize(\"'cat'\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\StringUtilsTest.java",
  "methodName" : "testCenter_StringInt",
  "sourceCode" : "@Test\r\nvoid testCenter_StringInt() {\r\n    assertNull(StringUtils.center(null, -1));\r\n    assertNull(StringUtils.center(null, 4));\r\n    assertEquals(\"    \", StringUtils.center(\"\", 4));\r\n    assertEquals(\"ab\", StringUtils.center(\"ab\", 0));\r\n    assertEquals(\"ab\", StringUtils.center(\"ab\", -1));\r\n    assertEquals(\"ab\", StringUtils.center(\"ab\", 1));\r\n    assertEquals(\"    \", StringUtils.center(\"\", 4));\r\n    assertEquals(\" ab \", StringUtils.center(\"ab\", 4));\r\n    assertEquals(\"abcd\", StringUtils.center(\"abcd\", 2));\r\n    assertEquals(\" a  \", StringUtils.center(\"a\", 4));\r\n    assertEquals(\"  a  \", StringUtils.center(\"a\", 5));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\StringUtilsTest.java",
  "methodName" : "testCenter_StringIntChar",
  "sourceCode" : "@Test\r\nvoid testCenter_StringIntChar() {\r\n    assertNull(StringUtils.center(null, -1, ' '));\r\n    assertNull(StringUtils.center(null, 4, ' '));\r\n    assertEquals(\"    \", StringUtils.center(\"\", 4, ' '));\r\n    assertEquals(\"ab\", StringUtils.center(\"ab\", 0, ' '));\r\n    assertEquals(\"ab\", StringUtils.center(\"ab\", -1, ' '));\r\n    assertEquals(\"ab\", StringUtils.center(\"ab\", 1, ' '));\r\n    assertEquals(\"    \", StringUtils.center(\"\", 4, ' '));\r\n    assertEquals(\" ab \", StringUtils.center(\"ab\", 4, ' '));\r\n    assertEquals(\"abcd\", StringUtils.center(\"abcd\", 2, ' '));\r\n    assertEquals(\" a  \", StringUtils.center(\"a\", 4, ' '));\r\n    assertEquals(\"  a  \", StringUtils.center(\"a\", 5, ' '));\r\n    assertEquals(\"xxaxx\", StringUtils.center(\"a\", 5, 'x'));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\StringUtilsTest.java",
  "methodName" : "testCenter_StringIntString",
  "sourceCode" : "@Test\r\nvoid testCenter_StringIntString() {\r\n    assertNull(StringUtils.center(null, 4, null));\r\n    assertNull(StringUtils.center(null, -1, \" \"));\r\n    assertNull(StringUtils.center(null, 4, \" \"));\r\n    assertEquals(\"    \", StringUtils.center(\"\", 4, \" \"));\r\n    assertEquals(\"ab\", StringUtils.center(\"ab\", 0, \" \"));\r\n    assertEquals(\"ab\", StringUtils.center(\"ab\", -1, \" \"));\r\n    assertEquals(\"ab\", StringUtils.center(\"ab\", 1, \" \"));\r\n    assertEquals(\"    \", StringUtils.center(\"\", 4, \" \"));\r\n    assertEquals(\" ab \", StringUtils.center(\"ab\", 4, \" \"));\r\n    assertEquals(\"abcd\", StringUtils.center(\"abcd\", 2, \" \"));\r\n    assertEquals(\" a  \", StringUtils.center(\"a\", 4, \" \"));\r\n    assertEquals(\"yayz\", StringUtils.center(\"a\", 4, \"yz\"));\r\n    assertEquals(\"yzyayzy\", StringUtils.center(\"a\", 7, \"yz\"));\r\n    assertEquals(\"  abc  \", StringUtils.center(\"abc\", 7, null));\r\n    assertEquals(\"  abc  \", StringUtils.center(\"abc\", 7, \"\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\StringUtilsTest.java",
  "methodName" : "testChomp",
  "sourceCode" : "@Test\r\nvoid testChomp() {\r\n    final String[][] chompCases = { { FOO_UNCAP + \"\\r\\n\", FOO_UNCAP }, { FOO_UNCAP + \"\\n\", FOO_UNCAP }, { FOO_UNCAP + \"\\r\", FOO_UNCAP }, { FOO_UNCAP + \" \\r\", FOO_UNCAP + \" \" }, { FOO_UNCAP, FOO_UNCAP }, { FOO_UNCAP + \"\\n\\n\", FOO_UNCAP + \"\\n\" }, { FOO_UNCAP + \"\\r\\n\\r\\n\", FOO_UNCAP + \"\\r\\n\" }, { \"foo\\nfoo\", \"foo\\nfoo\" }, { \"foo\\n\\rfoo\", \"foo\\n\\rfoo\" }, { \"\\n\", \"\" }, { \"\\r\", \"\" }, { \"a\", \"a\" }, { \"\\r\\n\", \"\" }, { \"\", \"\" }, { null, null }, { FOO_UNCAP + \"\\n\\r\", FOO_UNCAP + \"\\n\" } };\r\n    for (final String[] chompCase : chompCases) {\r\n        final String original = chompCase[0];\r\n        final String expectedResult = chompCase[1];\r\n        assertEquals(expectedResult, StringUtils.chomp(original), \"chomp(String) failed\");\r\n    }\r\n    assertEquals(\"foo\", StringUtils.chomp(\"foobar\", \"bar\"), \"chomp(String, String) failed\");\r\n    assertEquals(\"foobar\", StringUtils.chomp(\"foobar\", \"baz\"), \"chomp(String, String) failed\");\r\n    assertEquals(\"foo\", StringUtils.chomp(\"foo\", \"foooo\"), \"chomp(String, String) failed\");\r\n    assertEquals(\"foobar\", StringUtils.chomp(\"foobar\", \"\"), \"chomp(String, String) failed\");\r\n    assertEquals(\"foobar\", StringUtils.chomp(\"foobar\", null), \"chomp(String, String) failed\");\r\n    assertEquals(\"\", StringUtils.chomp(\"\", \"foo\"), \"chomp(String, String) failed\");\r\n    assertEquals(\"\", StringUtils.chomp(\"\", null), \"chomp(String, String) failed\");\r\n    assertEquals(\"\", StringUtils.chomp(\"\", \"\"), \"chomp(String, String) failed\");\r\n    assertNull(StringUtils.chomp(null, \"foo\"), \"chomp(String, String) failed\");\r\n    assertNull(StringUtils.chomp(null, null), \"chomp(String, String) failed\");\r\n    assertNull(StringUtils.chomp(null, \"\"), \"chomp(String, String) failed\");\r\n    assertEquals(\"\", StringUtils.chomp(\"foo\", \"foo\"), \"chomp(String, String) failed\");\r\n    assertEquals(\" \", StringUtils.chomp(\" foo\", \"foo\"), \"chomp(String, String) failed\");\r\n    assertEquals(\"foo \", StringUtils.chomp(\"foo \", \"foo\"), \"chomp(String, String) failed\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\StringUtilsTest.java",
  "methodName" : "testChop",
  "sourceCode" : "@Test\r\nvoid testChop() {\r\n    final String[][] chopCases = { { FOO_UNCAP + \"\\r\\n\", FOO_UNCAP }, { FOO_UNCAP + \"\\n\", FOO_UNCAP }, { FOO_UNCAP + \"\\r\", FOO_UNCAP }, { FOO_UNCAP + \" \\r\", FOO_UNCAP + \" \" }, { \"foo\", \"fo\" }, { \"foo\\nfoo\", \"foo\\nfo\" }, { \"\\n\", \"\" }, { \"\\r\", \"\" }, { \"\\r\\n\", \"\" }, { null, null }, { \"\", \"\" }, { \"a\", \"\" } };\r\n    for (final String[] chopCase : chopCases) {\r\n        final String original = chopCase[0];\r\n        final String expectedResult = chopCase[1];\r\n        assertEquals(expectedResult, StringUtils.chop(original), \"chop(String) failed\");\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\StringUtilsTest.java",
  "methodName" : "testConstructor",
  "sourceCode" : "@Test\r\nvoid testConstructor() {\r\n    assertNotNull(new StringUtils());\r\n    final Constructor<?>[] cons = StringUtils.class.getDeclaredConstructors();\r\n    assertEquals(1, cons.length);\r\n    assertTrue(Modifier.isPublic(cons[0].getModifiers()));\r\n    assertTrue(Modifier.isPublic(StringUtils.class.getModifiers()));\r\n    assertFalse(Modifier.isFinal(StringUtils.class.getModifiers()));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\StringUtilsTest.java",
  "methodName" : "testDefault_String",
  "sourceCode" : "@Test\r\nvoid testDefault_String() {\r\n    assertEquals(\"\", StringUtils.defaultString(null));\r\n    assertEquals(\"\", StringUtils.defaultString(\"\"));\r\n    assertEquals(\"abc\", StringUtils.defaultString(\"abc\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\StringUtilsTest.java",
  "methodName" : "testDefault_StringString",
  "sourceCode" : "@Test\r\nvoid testDefault_StringString() {\r\n    assertEquals(\"NULL\", StringUtils.defaultString(null, \"NULL\"));\r\n    assertEquals(\"\", StringUtils.defaultString(\"\", \"NULL\"));\r\n    assertEquals(\"abc\", StringUtils.defaultString(\"abc\", \"NULL\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\StringUtilsTest.java",
  "methodName" : "testDefaultIfBlank_CharBuffers",
  "sourceCode" : "@Test\r\nvoid testDefaultIfBlank_CharBuffers() {\r\n    assertEquals(\"NULL\", StringUtils.defaultIfBlank(CharBuffer.wrap(\"\"), CharBuffer.wrap(\"NULL\")).toString());\r\n    assertEquals(\"NULL\", StringUtils.defaultIfBlank(CharBuffer.wrap(\" \"), CharBuffer.wrap(\"NULL\")).toString());\r\n    assertEquals(\"abc\", StringUtils.defaultIfBlank(CharBuffer.wrap(\"abc\"), CharBuffer.wrap(\"NULL\")).toString());\r\n    assertNull(StringUtils.defaultIfBlank(CharBuffer.wrap(\"\"), (CharBuffer) null));\r\n    // Tests compatibility for the API return type\r\n    final CharBuffer s = StringUtils.defaultIfBlank(CharBuffer.wrap(\"abc\"), CharBuffer.wrap(\"NULL\"));\r\n    assertEquals(\"abc\", s.toString());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\StringUtilsTest.java",
  "methodName" : "testDefaultIfBlank_StringBuffers",
  "sourceCode" : "@Test\r\nvoid testDefaultIfBlank_StringBuffers() {\r\n    assertEquals(\"NULL\", StringUtils.defaultIfBlank(new StringBuffer(\"\"), new StringBuffer(\"NULL\")).toString());\r\n    assertEquals(\"NULL\", StringUtils.defaultIfBlank(new StringBuffer(\" \"), new StringBuffer(\"NULL\")).toString());\r\n    assertEquals(\"abc\", StringUtils.defaultIfBlank(new StringBuffer(\"abc\"), new StringBuffer(\"NULL\")).toString());\r\n    assertNull(StringUtils.defaultIfBlank(new StringBuffer(\"\"), (StringBuffer) null));\r\n    // Tests compatibility for the API return type\r\n    final StringBuffer s = StringUtils.defaultIfBlank(new StringBuffer(\"abc\"), new StringBuffer(\"NULL\"));\r\n    assertEquals(\"abc\", s.toString());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\StringUtilsTest.java",
  "methodName" : "testDefaultIfBlank_StringBuilders",
  "sourceCode" : "@Test\r\nvoid testDefaultIfBlank_StringBuilders() {\r\n    assertEquals(\"NULL\", StringUtils.defaultIfBlank(new StringBuilder(\"\"), new StringBuilder(\"NULL\")).toString());\r\n    assertEquals(\"NULL\", StringUtils.defaultIfBlank(new StringBuilder(\" \"), new StringBuilder(\"NULL\")).toString());\r\n    assertEquals(\"abc\", StringUtils.defaultIfBlank(new StringBuilder(\"abc\"), new StringBuilder(\"NULL\")).toString());\r\n    assertNull(StringUtils.defaultIfBlank(new StringBuilder(\"\"), (StringBuilder) null));\r\n    // Tests compatibility for the API return type\r\n    final StringBuilder s = StringUtils.defaultIfBlank(new StringBuilder(\"abc\"), new StringBuilder(\"NULL\"));\r\n    assertEquals(\"abc\", s.toString());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\StringUtilsTest.java",
  "methodName" : "testDefaultIfBlank_StringString",
  "sourceCode" : "@Test\r\nvoid testDefaultIfBlank_StringString() {\r\n    assertEquals(\"NULL\", StringUtils.defaultIfBlank(null, \"NULL\"));\r\n    assertEquals(\"NULL\", StringUtils.defaultIfBlank(\"\", \"NULL\"));\r\n    assertEquals(\"NULL\", StringUtils.defaultIfBlank(\" \", \"NULL\"));\r\n    assertEquals(\"abc\", StringUtils.defaultIfBlank(\"abc\", \"NULL\"));\r\n    assertNull(StringUtils.defaultIfBlank(\"\", (String) null));\r\n    // Tests compatibility for the API return type\r\n    final String s = StringUtils.defaultIfBlank(\"abc\", \"NULL\");\r\n    assertEquals(\"abc\", s);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\StringUtilsTest.java",
  "methodName" : "testDefaultIfEmpty_CharBuffers",
  "sourceCode" : "@Test\r\nvoid testDefaultIfEmpty_CharBuffers() {\r\n    assertEquals(\"NULL\", StringUtils.defaultIfEmpty(CharBuffer.wrap(\"\"), CharBuffer.wrap(\"NULL\")).toString());\r\n    assertEquals(\"abc\", StringUtils.defaultIfEmpty(CharBuffer.wrap(\"abc\"), CharBuffer.wrap(\"NULL\")).toString());\r\n    assertNull(StringUtils.defaultIfEmpty(CharBuffer.wrap(\"\"), (CharBuffer) null));\r\n    // Tests compatibility for the API return type\r\n    final CharBuffer s = StringUtils.defaultIfEmpty(CharBuffer.wrap(\"abc\"), CharBuffer.wrap(\"NULL\"));\r\n    assertEquals(\"abc\", s.toString());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\StringUtilsTest.java",
  "methodName" : "testDefaultIfEmpty_StringBuffers",
  "sourceCode" : "@Test\r\nvoid testDefaultIfEmpty_StringBuffers() {\r\n    assertEquals(\"NULL\", StringUtils.defaultIfEmpty(new StringBuffer(\"\"), new StringBuffer(\"NULL\")).toString());\r\n    assertEquals(\"abc\", StringUtils.defaultIfEmpty(new StringBuffer(\"abc\"), new StringBuffer(\"NULL\")).toString());\r\n    assertNull(StringUtils.defaultIfEmpty(new StringBuffer(\"\"), (StringBuffer) null));\r\n    // Tests compatibility for the API return type\r\n    final StringBuffer s = StringUtils.defaultIfEmpty(new StringBuffer(\"abc\"), new StringBuffer(\"NULL\"));\r\n    assertEquals(\"abc\", s.toString());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\StringUtilsTest.java",
  "methodName" : "testDefaultIfEmpty_StringBuilders",
  "sourceCode" : "@Test\r\nvoid testDefaultIfEmpty_StringBuilders() {\r\n    assertEquals(\"NULL\", StringUtils.defaultIfEmpty(new StringBuilder(\"\"), new StringBuilder(\"NULL\")).toString());\r\n    assertEquals(\"abc\", StringUtils.defaultIfEmpty(new StringBuilder(\"abc\"), new StringBuilder(\"NULL\")).toString());\r\n    assertNull(StringUtils.defaultIfEmpty(new StringBuilder(\"\"), (StringBuilder) null));\r\n    // Tests compatibility for the API return type\r\n    final StringBuilder s = StringUtils.defaultIfEmpty(new StringBuilder(\"abc\"), new StringBuilder(\"NULL\"));\r\n    assertEquals(\"abc\", s.toString());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\StringUtilsTest.java",
  "methodName" : "testDefaultIfEmpty_StringString",
  "sourceCode" : "@Test\r\nvoid testDefaultIfEmpty_StringString() {\r\n    assertEquals(\"NULL\", StringUtils.defaultIfEmpty(null, \"NULL\"));\r\n    assertEquals(\"NULL\", StringUtils.defaultIfEmpty(\"\", \"NULL\"));\r\n    assertEquals(\"abc\", StringUtils.defaultIfEmpty(\"abc\", \"NULL\"));\r\n    assertNull(StringUtils.getIfEmpty(\"\", null));\r\n    // Tests compatibility for the API return type\r\n    final String s = StringUtils.defaultIfEmpty(\"abc\", \"NULL\");\r\n    assertEquals(\"abc\", s);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\StringUtilsTest.java",
  "methodName" : "testDeleteWhitespace_String",
  "sourceCode" : "@Test\r\nvoid testDeleteWhitespace_String() {\r\n    assertNull(StringUtils.deleteWhitespace(null));\r\n    assertEquals(\"\", StringUtils.deleteWhitespace(\"\"));\r\n    assertEquals(\"\", StringUtils.deleteWhitespace(\"  \\u000C  \\t\\t\\u001F\\n\\n \\u000B  \"));\r\n    assertEquals(\"\", StringUtils.deleteWhitespace(StringUtilsTest.WHITESPACE));\r\n    assertEquals(StringUtilsTest.NON_WHITESPACE, StringUtils.deleteWhitespace(StringUtilsTest.NON_WHITESPACE));\r\n    // Note: u-2007 and u-000A both cause problems in the source code\r\n    // it should ignore 2007 but delete 000A\r\n    assertEquals(\"\\u00A0\\u202F\", StringUtils.deleteWhitespace(\"  \\u00A0  \\t\\t\\n\\n \\u202F  \"));\r\n    assertEquals(\"\\u00A0\\u202F\", StringUtils.deleteWhitespace(\"\\u00A0\\u202F\"));\r\n    assertEquals(\"test\", StringUtils.deleteWhitespace(\"\\u000Bt  \\t\\n\\u0009e\\rs\\n\\n   \\tt\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\StringUtilsTest.java",
  "methodName" : "testDifference_StringString",
  "sourceCode" : "@Test\r\nvoid testDifference_StringString() {\r\n    assertNull(StringUtils.difference(null, null));\r\n    assertEquals(\"\", StringUtils.difference(\"\", \"\"));\r\n    assertEquals(\"abc\", StringUtils.difference(\"\", \"abc\"));\r\n    assertEquals(\"\", StringUtils.difference(\"abc\", \"\"));\r\n    assertEquals(\"i am a robot\", StringUtils.difference(null, \"i am a robot\"));\r\n    assertEquals(\"i am a machine\", StringUtils.difference(\"i am a machine\", null));\r\n    assertEquals(\"robot\", StringUtils.difference(\"i am a machine\", \"i am a robot\"));\r\n    assertEquals(\"\", StringUtils.difference(\"abc\", \"abc\"));\r\n    assertEquals(\"you are a robot\", StringUtils.difference(\"i am a robot\", \"you are a robot\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\StringUtilsTest.java",
  "methodName" : "testDifferenceAt_StringArray",
  "sourceCode" : "@Test\r\nvoid testDifferenceAt_StringArray() {\r\n    assertEquals(-1, StringUtils.indexOfDifference((String[]) null));\r\n    assertEquals(-1, StringUtils.indexOfDifference());\r\n    assertEquals(-1, StringUtils.indexOfDifference(\"abc\"));\r\n    assertEquals(-1, StringUtils.indexOfDifference(null, null));\r\n    assertEquals(-1, StringUtils.indexOfDifference(\"\", \"\"));\r\n    assertEquals(0, StringUtils.indexOfDifference(\"\", null));\r\n    assertEquals(0, StringUtils.indexOfDifference(\"abc\", null, null));\r\n    assertEquals(0, StringUtils.indexOfDifference(null, null, \"abc\"));\r\n    assertEquals(0, StringUtils.indexOfDifference(\"\", \"abc\"));\r\n    assertEquals(0, StringUtils.indexOfDifference(\"abc\", \"\"));\r\n    assertEquals(-1, StringUtils.indexOfDifference(\"abc\", \"abc\"));\r\n    assertEquals(1, StringUtils.indexOfDifference(\"abc\", \"a\"));\r\n    assertEquals(2, StringUtils.indexOfDifference(\"ab\", \"abxyz\"));\r\n    assertEquals(2, StringUtils.indexOfDifference(\"abcde\", \"abxyz\"));\r\n    assertEquals(0, StringUtils.indexOfDifference(\"abcde\", \"xyz\"));\r\n    assertEquals(0, StringUtils.indexOfDifference(\"xyz\", \"abcde\"));\r\n    assertEquals(7, StringUtils.indexOfDifference(\"i am a machine\", \"i am a robot\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\StringUtilsTest.java",
  "methodName" : "testDifferenceAt_StringString",
  "sourceCode" : "@Test\r\nvoid testDifferenceAt_StringString() {\r\n    assertEquals(-1, StringUtils.indexOfDifference(null, null));\r\n    assertEquals(0, StringUtils.indexOfDifference(null, \"i am a robot\"));\r\n    assertEquals(-1, StringUtils.indexOfDifference(\"\", \"\"));\r\n    assertEquals(0, StringUtils.indexOfDifference(\"\", \"abc\"));\r\n    assertEquals(0, StringUtils.indexOfDifference(\"abc\", \"\"));\r\n    assertEquals(0, StringUtils.indexOfDifference(\"i am a machine\", null));\r\n    assertEquals(7, StringUtils.indexOfDifference(\"i am a machine\", \"i am a robot\"));\r\n    assertEquals(-1, StringUtils.indexOfDifference(\"foo\", \"foo\"));\r\n    assertEquals(0, StringUtils.indexOfDifference(\"i am a robot\", \"you are a robot\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\StringUtilsTest.java",
  "methodName" : "testEMPTY",
  "sourceCode" : "/**\r\n * A sanity check for {@link StringUtils#EMPTY}.\r\n */\r\n@Test\r\nvoid testEMPTY() {\r\n    assertNotNull(StringUtils.EMPTY);\r\n    assertEquals(\"\", StringUtils.EMPTY);\r\n    assertEquals(0, StringUtils.EMPTY.length());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\StringUtilsTest.java",
  "methodName" : "testEscapeSurrogatePairs",
  "sourceCode" : "@Test\r\nvoid testEscapeSurrogatePairs() {\r\n    assertEquals(\"\\uD83D\\uDE30\", StringEscapeUtils.escapeCsv(\"\\uD83D\\uDE30\"));\r\n    // Examples from https://en.wikipedia.org/wiki/UTF-16\r\n    assertEquals(\"\\uD800\\uDC00\", StringEscapeUtils.escapeCsv(\"\\uD800\\uDC00\"));\r\n    assertEquals(\"\\uD834\\uDD1E\", StringEscapeUtils.escapeCsv(\"\\uD834\\uDD1E\"));\r\n    assertEquals(\"\\uDBFF\\uDFFD\", StringEscapeUtils.escapeCsv(\"\\uDBFF\\uDFFD\"));\r\n    assertEquals(\"\\uDBFF\\uDFFD\", StringEscapeUtils.escapeHtml3(\"\\uDBFF\\uDFFD\"));\r\n    assertEquals(\"\\uDBFF\\uDFFD\", StringEscapeUtils.escapeHtml4(\"\\uDBFF\\uDFFD\"));\r\n    assertEquals(\"\\uDBFF\\uDFFD\", StringEscapeUtils.escapeXml(\"\\uDBFF\\uDFFD\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\StringUtilsTest.java",
  "methodName" : "testEscapeSurrogatePairsLang858",
  "sourceCode" : "/**\r\n * Tests LANG-858.\r\n */\r\n@Test\r\nvoid testEscapeSurrogatePairsLang858() {\r\n    //fail LANG-858\r\n    assertEquals(\"\\\\uDBFF\\\\uDFFD\", StringEscapeUtils.escapeJava(\"\\uDBFF\\uDFFD\"));\r\n    //fail LANG-858\r\n    assertEquals(\"\\\\uDBFF\\\\uDFFD\", StringEscapeUtils.escapeEcmaScript(\"\\uDBFF\\uDFFD\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\StringUtilsTest.java",
  "methodName" : "testGeorgianSample",
  "sourceCode" : "@Test\r\nvoid testGeorgianSample() {\r\n    final char[] arrayI = { //Latin Small Letter dotless I\r\n    (char) 0x0131, //Greek Capital Letter Theta\r\n    (char) 0x03F4 };\r\n    final char[] arrayJ = { //Latin Capital Letter I with dot above\r\n    (char) 0x0130, //Greek Theta Symbol\r\n    (char) 0x03D1 };\r\n    for (final char i : arrayI) {\r\n        for (final char j : arrayJ) {\r\n            final String si = String.valueOf(i);\r\n            final String sj = String.valueOf(j);\r\n            final boolean res1 = si.equalsIgnoreCase(sj);\r\n            final CharSequence ci = new StringBuilder(si);\r\n            final CharSequence cj = new StringBuilder(sj);\r\n            boolean res2 = StringUtils.startsWithIgnoreCase(ci, cj);\r\n            assertEquals(res1, res2, \"si : \" + si + \" sj : \" + sj);\r\n            res2 = StringUtils.endsWithIgnoreCase(ci, cj);\r\n            assertEquals(res1, res2, \"si : \" + si + \" sj : \" + sj);\r\n            res2 = StringUtils.compareIgnoreCase(ci.toString(), cj.toString()) == 0;\r\n            assertEquals(res1, res2, \"si : \" + si + \" sj : \" + sj);\r\n            res2 = StringUtils.indexOfIgnoreCase(ci.toString(), cj.toString()) == 0;\r\n            assertEquals(res1, res2, \"si : \" + si + \" sj : \" + sj);\r\n            res2 = StringUtils.lastIndexOfIgnoreCase(ci.toString(), cj.toString()) == 0;\r\n            assertEquals(res1, res2, \"si : \" + si + \" sj : \" + sj);\r\n        }\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\StringUtilsTest.java",
  "methodName" : "testGetBytes_Charset",
  "sourceCode" : "@Test\r\nvoid testGetBytes_Charset() {\r\n    assertEquals(ArrayUtils.EMPTY_BYTE_ARRAY, StringUtils.getBytes(null, (Charset) null));\r\n    assertArrayEquals(StringUtils.EMPTY.getBytes(), StringUtils.getBytes(StringUtils.EMPTY, (Charset) null));\r\n    assertArrayEquals(StringUtils.EMPTY.getBytes(StandardCharsets.US_ASCII), StringUtils.getBytes(StringUtils.EMPTY, StandardCharsets.US_ASCII));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\StringUtilsTest.java",
  "methodName" : "testGetBytes_String",
  "sourceCode" : "@Test\r\nvoid testGetBytes_String() throws UnsupportedEncodingException {\r\n    assertEquals(ArrayUtils.EMPTY_BYTE_ARRAY, StringUtils.getBytes(null, (String) null));\r\n    assertArrayEquals(StringUtils.EMPTY.getBytes(), StringUtils.getBytes(StringUtils.EMPTY, (String) null));\r\n    assertArrayEquals(StringUtils.EMPTY.getBytes(StandardCharsets.US_ASCII.name()), StringUtils.getBytes(StringUtils.EMPTY, StandardCharsets.US_ASCII.name()));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\StringUtilsTest.java",
  "methodName" : "testGetCommonPrefix_StringArray",
  "sourceCode" : "@Test\r\nvoid testGetCommonPrefix_StringArray() {\r\n    assertEquals(\"\", StringUtils.getCommonPrefix((String[]) null));\r\n    assertEquals(\"\", StringUtils.getCommonPrefix());\r\n    assertEquals(\"abc\", StringUtils.getCommonPrefix(\"abc\"));\r\n    assertEquals(\"\", StringUtils.getCommonPrefix(null, null));\r\n    assertEquals(\"\", StringUtils.getCommonPrefix(\"\", \"\"));\r\n    assertEquals(\"\", StringUtils.getCommonPrefix(\"\", null));\r\n    assertEquals(\"\", StringUtils.getCommonPrefix(\"abc\", null, null));\r\n    assertEquals(\"\", StringUtils.getCommonPrefix(null, null, \"abc\"));\r\n    assertEquals(\"\", StringUtils.getCommonPrefix(\"\", \"abc\"));\r\n    assertEquals(\"\", StringUtils.getCommonPrefix(\"abc\", \"\"));\r\n    assertEquals(\"abc\", StringUtils.getCommonPrefix(\"abc\", \"abc\"));\r\n    assertEquals(\"a\", StringUtils.getCommonPrefix(\"abc\", \"a\"));\r\n    assertEquals(\"ab\", StringUtils.getCommonPrefix(\"ab\", \"abxyz\"));\r\n    assertEquals(\"ab\", StringUtils.getCommonPrefix(\"abcde\", \"abxyz\"));\r\n    assertEquals(\"\", StringUtils.getCommonPrefix(\"abcde\", \"xyz\"));\r\n    assertEquals(\"\", StringUtils.getCommonPrefix(\"xyz\", \"abcde\"));\r\n    assertEquals(\"i am a \", StringUtils.getCommonPrefix(\"i am a machine\", \"i am a robot\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\StringUtilsTest.java",
  "methodName" : "testGetDigits",
  "sourceCode" : "@Test\r\nvoid testGetDigits() {\r\n    assertNull(StringUtils.getDigits(null));\r\n    assertEquals(\"\", StringUtils.getDigits(\"\"));\r\n    assertEquals(\"\", StringUtils.getDigits(\"abc\"));\r\n    assertEquals(\"1000\", StringUtils.getDigits(\"1000$\"));\r\n    assertEquals(\"12345\", StringUtils.getDigits(\"123password45\"));\r\n    assertEquals(\"5417543010\", StringUtils.getDigits(\"(541) 754-3010\"));\r\n    assertEquals(\"\\u0967\\u0968\\u0969\", StringUtils.getDigits(\"\\u0967\\u0968\\u0969\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\StringUtilsTest.java",
  "methodName" : "testGetFuzzyDistance",
  "sourceCode" : "@Test\r\nvoid testGetFuzzyDistance() {\r\n    assertEquals(0, StringUtils.getFuzzyDistance(\"\", \"\", Locale.ENGLISH));\r\n    assertEquals(0, StringUtils.getFuzzyDistance(\"Workshop\", \"b\", Locale.ENGLISH));\r\n    assertEquals(1, StringUtils.getFuzzyDistance(\"Room\", \"o\", Locale.ENGLISH));\r\n    assertEquals(1, StringUtils.getFuzzyDistance(\"Workshop\", \"w\", Locale.ENGLISH));\r\n    assertEquals(2, StringUtils.getFuzzyDistance(\"Workshop\", \"ws\", Locale.ENGLISH));\r\n    assertEquals(4, StringUtils.getFuzzyDistance(\"Workshop\", \"wo\", Locale.ENGLISH));\r\n    assertEquals(3, StringUtils.getFuzzyDistance(\"Apache Software Foundation\", \"asf\", Locale.ENGLISH));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\StringUtilsTest.java",
  "methodName" : "testGetFuzzyDistance_NullNullNull",
  "sourceCode" : "@Test\r\nvoid testGetFuzzyDistance_NullNullNull() {\r\n    assertIllegalArgumentException(() -> StringUtils.getFuzzyDistance(null, null, null));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\StringUtilsTest.java",
  "methodName" : "testGetFuzzyDistance_NullStringLocale",
  "sourceCode" : "@Test\r\nvoid testGetFuzzyDistance_NullStringLocale() {\r\n    assertIllegalArgumentException(() -> StringUtils.getFuzzyDistance(null, \"clear\", Locale.ENGLISH));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\StringUtilsTest.java",
  "methodName" : "testGetFuzzyDistance_StringNullLoclae",
  "sourceCode" : "@Test\r\nvoid testGetFuzzyDistance_StringNullLoclae() {\r\n    assertIllegalArgumentException(() -> StringUtils.getFuzzyDistance(\" \", null, Locale.ENGLISH));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\StringUtilsTest.java",
  "methodName" : "testGetFuzzyDistance_StringStringNull",
  "sourceCode" : "@Test\r\nvoid testGetFuzzyDistance_StringStringNull() {\r\n    assertIllegalArgumentException(() -> StringUtils.getFuzzyDistance(\" \", \"clear\", null));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\StringUtilsTest.java",
  "methodName" : "testGetIfBlank_StringStringSupplier",
  "sourceCode" : "@Test\r\nvoid testGetIfBlank_StringStringSupplier() {\r\n    assertEquals(\"NULL\", StringUtils.getIfBlank(null, () -> \"NULL\"));\r\n    assertEquals(\"NULL\", StringUtils.getIfBlank(\"\", () -> \"NULL\"));\r\n    assertEquals(\"NULL\", StringUtils.getIfBlank(\" \", () -> \"NULL\"));\r\n    assertEquals(\"abc\", StringUtils.getIfBlank(\"abc\", () -> \"NULL\"));\r\n    assertNull(StringUtils.getIfBlank(\"\", Suppliers.nul()));\r\n    assertNull(StringUtils.defaultIfBlank(\"\", (String) null));\r\n    // Tests compatibility for the API return type\r\n    final String s = StringUtils.getIfBlank(\"abc\", () -> \"NULL\");\r\n    assertEquals(\"abc\", s);\r\n    //Checking that default value supplied only on demand\r\n    final MutableInt numberOfCalls = new MutableInt(0);\r\n    final Supplier<String> countingDefaultSupplier = () -> {\r\n        numberOfCalls.increment();\r\n        return \"NULL\";\r\n    };\r\n    StringUtils.getIfBlank(\"abc\", countingDefaultSupplier);\r\n    assertEquals(0, numberOfCalls.get());\r\n    StringUtils.getIfBlank(\"\", countingDefaultSupplier);\r\n    assertEquals(1, numberOfCalls.get());\r\n    StringUtils.getIfBlank(\" \", countingDefaultSupplier);\r\n    assertEquals(2, numberOfCalls.get());\r\n    StringUtils.getIfBlank(null, countingDefaultSupplier);\r\n    assertEquals(3, numberOfCalls.get());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\StringUtilsTest.java",
  "methodName" : "testGetIfEmpty_StringStringSupplier",
  "sourceCode" : "@Test\r\nvoid testGetIfEmpty_StringStringSupplier() {\r\n    assertEquals(\"NULL\", StringUtils.getIfEmpty((String) null, () -> \"NULL\"));\r\n    assertEquals(\"NULL\", StringUtils.getIfEmpty(\"\", () -> \"NULL\"));\r\n    assertEquals(\"abc\", StringUtils.getIfEmpty(\"abc\", () -> \"NULL\"));\r\n    assertNull(StringUtils.getIfEmpty(\"\", Suppliers.nul()));\r\n    assertNull(StringUtils.defaultIfEmpty(\"\", (String) null));\r\n    // Tests compatibility for the API return type\r\n    final String s = StringUtils.getIfEmpty(\"abc\", () -> \"NULL\");\r\n    assertEquals(\"abc\", s);\r\n    //Checking that default value supplied only on demand\r\n    final MutableInt numberOfCalls = new MutableInt(0);\r\n    final Supplier<String> countingDefaultSupplier = () -> {\r\n        numberOfCalls.increment();\r\n        return \"NULL\";\r\n    };\r\n    StringUtils.getIfEmpty(\"abc\", countingDefaultSupplier);\r\n    assertEquals(0, numberOfCalls.get());\r\n    StringUtils.getIfEmpty(\"\", countingDefaultSupplier);\r\n    assertEquals(1, numberOfCalls.get());\r\n    StringUtils.getIfEmpty(null, countingDefaultSupplier);\r\n    assertEquals(2, numberOfCalls.get());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\StringUtilsTest.java",
  "methodName" : "testGetJaroWinklerDistance_NullNull",
  "sourceCode" : "@Test\r\nvoid testGetJaroWinklerDistance_NullNull() {\r\n    assertIllegalArgumentException(() -> StringUtils.getJaroWinklerDistance(null, null));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\StringUtilsTest.java",
  "methodName" : "testGetJaroWinklerDistance_NullString",
  "sourceCode" : "@Test\r\nvoid testGetJaroWinklerDistance_NullString() {\r\n    assertIllegalArgumentException(() -> StringUtils.getJaroWinklerDistance(null, \"clear\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\StringUtilsTest.java",
  "methodName" : "testGetJaroWinklerDistance_StringNull",
  "sourceCode" : "@Test\r\nvoid testGetJaroWinklerDistance_StringNull() {\r\n    assertIllegalArgumentException(() -> StringUtils.getJaroWinklerDistance(\" \", null));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\StringUtilsTest.java",
  "methodName" : "testGetJaroWinklerDistance_StringString",
  "sourceCode" : "@Test\r\nvoid testGetJaroWinklerDistance_StringString() {\r\n    assertEquals(0.93d, StringUtils.getJaroWinklerDistance(\"frog\", \"fog\"));\r\n    assertEquals(0.0d, StringUtils.getJaroWinklerDistance(\"fly\", \"ant\"));\r\n    assertEquals(0.44d, StringUtils.getJaroWinklerDistance(\"elephant\", \"hippo\"));\r\n    assertEquals(0.84d, StringUtils.getJaroWinklerDistance(\"dwayne\", \"duane\"));\r\n    assertEquals(0.93d, StringUtils.getJaroWinklerDistance(\"ABC Corporation\", \"ABC Corp\"));\r\n    assertEquals(0.95d, StringUtils.getJaroWinklerDistance(\"D N H Enterprises Inc\", \"D & H Enterprises, Inc.\"));\r\n    assertEquals(0.92d, StringUtils.getJaroWinklerDistance(\"My Gym Children's Fitness Center\", \"My Gym. Childrens Fitness\"));\r\n    assertEquals(0.88d, StringUtils.getJaroWinklerDistance(\"PENNSYLVANIA\", \"PENNCISYLVNIA\"));\r\n    assertEquals(0.63d, StringUtils.getJaroWinklerDistance(\"Haus Ingeborg\", \"Ingeborg Esser\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\StringUtilsTest.java",
  "methodName" : "testGetLevenshteinDistance_NullString",
  "sourceCode" : "@Test\r\nvoid testGetLevenshteinDistance_NullString() {\r\n    assertIllegalArgumentException(() -> StringUtils.getLevenshteinDistance(\"a\", null));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\StringUtilsTest.java",
  "methodName" : "testGetLevenshteinDistance_NullStringInt",
  "sourceCode" : "@Test\r\nvoid testGetLevenshteinDistance_NullStringInt() {\r\n    assertIllegalArgumentException(() -> StringUtils.getLevenshteinDistance(null, \"a\", 0));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\StringUtilsTest.java",
  "methodName" : "testGetLevenshteinDistance_StringNull",
  "sourceCode" : "@Test\r\nvoid testGetLevenshteinDistance_StringNull() {\r\n    assertIllegalArgumentException(() -> StringUtils.getLevenshteinDistance(null, \"a\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\StringUtilsTest.java",
  "methodName" : "testGetLevenshteinDistance_StringNullInt",
  "sourceCode" : "@Test\r\nvoid testGetLevenshteinDistance_StringNullInt() {\r\n    assertIllegalArgumentException(() -> StringUtils.getLevenshteinDistance(\"a\", null, 0));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\StringUtilsTest.java",
  "methodName" : "testGetLevenshteinDistance_StringString",
  "sourceCode" : "@Test\r\nvoid testGetLevenshteinDistance_StringString() {\r\n    assertEquals(0, StringUtils.getLevenshteinDistance(\"\", \"\"));\r\n    assertEquals(1, StringUtils.getLevenshteinDistance(\"\", \"a\"));\r\n    assertEquals(7, StringUtils.getLevenshteinDistance(\"aaapppp\", \"\"));\r\n    assertEquals(1, StringUtils.getLevenshteinDistance(\"frog\", \"fog\"));\r\n    assertEquals(3, StringUtils.getLevenshteinDistance(\"fly\", \"ant\"));\r\n    assertEquals(7, StringUtils.getLevenshteinDistance(\"elephant\", \"hippo\"));\r\n    assertEquals(7, StringUtils.getLevenshteinDistance(\"hippo\", \"elephant\"));\r\n    assertEquals(8, StringUtils.getLevenshteinDistance(\"hippo\", \"zzzzzzzz\"));\r\n    assertEquals(8, StringUtils.getLevenshteinDistance(\"zzzzzzzz\", \"hippo\"));\r\n    assertEquals(1, StringUtils.getLevenshteinDistance(\"hello\", \"hallo\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\StringUtilsTest.java",
  "methodName" : "testGetLevenshteinDistance_StringStringInt",
  "sourceCode" : "@Test\r\nvoid testGetLevenshteinDistance_StringStringInt() {\r\n    // empty strings\r\n    assertEquals(0, StringUtils.getLevenshteinDistance(\"\", \"\", 0));\r\n    assertEquals(7, StringUtils.getLevenshteinDistance(\"aaapppp\", \"\", 8));\r\n    assertEquals(7, StringUtils.getLevenshteinDistance(\"aaapppp\", \"\", 7));\r\n    assertEquals(-1, StringUtils.getLevenshteinDistance(\"aaapppp\", \"\", 6));\r\n    // unequal strings, zero threshold\r\n    assertEquals(-1, StringUtils.getLevenshteinDistance(\"b\", \"a\", 0));\r\n    assertEquals(-1, StringUtils.getLevenshteinDistance(\"a\", \"b\", 0));\r\n    // equal strings\r\n    assertEquals(0, StringUtils.getLevenshteinDistance(\"aa\", \"aa\", 0));\r\n    assertEquals(0, StringUtils.getLevenshteinDistance(\"aa\", \"aa\", 2));\r\n    // same length\r\n    assertEquals(-1, StringUtils.getLevenshteinDistance(\"aaa\", \"bbb\", 2));\r\n    assertEquals(3, StringUtils.getLevenshteinDistance(\"aaa\", \"bbb\", 3));\r\n    // big stripe\r\n    assertEquals(6, StringUtils.getLevenshteinDistance(\"aaaaaa\", \"b\", 10));\r\n    // distance less than threshold\r\n    assertEquals(7, StringUtils.getLevenshteinDistance(\"aaapppp\", \"b\", 8));\r\n    assertEquals(3, StringUtils.getLevenshteinDistance(\"a\", \"bbb\", 4));\r\n    // distance equal to threshold\r\n    assertEquals(7, StringUtils.getLevenshteinDistance(\"aaapppp\", \"b\", 7));\r\n    assertEquals(3, StringUtils.getLevenshteinDistance(\"a\", \"bbb\", 3));\r\n    // distance greater than threshold\r\n    assertEquals(-1, StringUtils.getLevenshteinDistance(\"a\", \"bbb\", 2));\r\n    assertEquals(-1, StringUtils.getLevenshteinDistance(\"bbb\", \"a\", 2));\r\n    assertEquals(-1, StringUtils.getLevenshteinDistance(\"aaapppp\", \"b\", 6));\r\n    // stripe runs off array, strings not similar\r\n    assertEquals(-1, StringUtils.getLevenshteinDistance(\"a\", \"bbb\", 1));\r\n    assertEquals(-1, StringUtils.getLevenshteinDistance(\"bbb\", \"a\", 1));\r\n    // stripe runs off array, strings are similar\r\n    assertEquals(-1, StringUtils.getLevenshteinDistance(\"12345\", \"1234567\", 1));\r\n    assertEquals(-1, StringUtils.getLevenshteinDistance(\"1234567\", \"12345\", 1));\r\n    // old getLevenshteinDistance test cases\r\n    assertEquals(1, StringUtils.getLevenshteinDistance(\"frog\", \"fog\", 1));\r\n    assertEquals(3, StringUtils.getLevenshteinDistance(\"fly\", \"ant\", 3));\r\n    assertEquals(7, StringUtils.getLevenshteinDistance(\"elephant\", \"hippo\", 7));\r\n    assertEquals(-1, StringUtils.getLevenshteinDistance(\"elephant\", \"hippo\", 6));\r\n    assertEquals(7, StringUtils.getLevenshteinDistance(\"hippo\", \"elephant\", 7));\r\n    assertEquals(-1, StringUtils.getLevenshteinDistance(\"hippo\", \"elephant\", 6));\r\n    assertEquals(8, StringUtils.getLevenshteinDistance(\"hippo\", \"zzzzzzzz\", 8));\r\n    assertEquals(8, StringUtils.getLevenshteinDistance(\"zzzzzzzz\", \"hippo\", 8));\r\n    assertEquals(1, StringUtils.getLevenshteinDistance(\"hello\", \"hallo\", 1));\r\n    assertEquals(1, StringUtils.getLevenshteinDistance(\"frog\", \"fog\", Integer.MAX_VALUE));\r\n    assertEquals(3, StringUtils.getLevenshteinDistance(\"fly\", \"ant\", Integer.MAX_VALUE));\r\n    assertEquals(7, StringUtils.getLevenshteinDistance(\"elephant\", \"hippo\", Integer.MAX_VALUE));\r\n    assertEquals(7, StringUtils.getLevenshteinDistance(\"hippo\", \"elephant\", Integer.MAX_VALUE));\r\n    assertEquals(8, StringUtils.getLevenshteinDistance(\"hippo\", \"zzzzzzzz\", Integer.MAX_VALUE));\r\n    assertEquals(8, StringUtils.getLevenshteinDistance(\"zzzzzzzz\", \"hippo\", Integer.MAX_VALUE));\r\n    assertEquals(1, StringUtils.getLevenshteinDistance(\"hello\", \"hallo\", Integer.MAX_VALUE));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\StringUtilsTest.java",
  "methodName" : "testGetLevenshteinDistance_StringStringNegativeInt",
  "sourceCode" : "@Test\r\nvoid testGetLevenshteinDistance_StringStringNegativeInt() {\r\n    assertIllegalArgumentException(() -> StringUtils.getLevenshteinDistance(\"a\", \"a\", -1));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\StringUtilsTest.java",
  "methodName" : "testIsAllLowerCase",
  "sourceCode" : "/**\r\n * Test for {@link StringUtils#isAllLowerCase(CharSequence)}.\r\n */\r\n@Test\r\nvoid testIsAllLowerCase() {\r\n    assertFalse(StringUtils.isAllLowerCase(null));\r\n    assertFalse(StringUtils.isAllLowerCase(StringUtils.EMPTY));\r\n    assertFalse(StringUtils.isAllLowerCase(\"  \"));\r\n    assertTrue(StringUtils.isAllLowerCase(\"abc\"));\r\n    assertFalse(StringUtils.isAllLowerCase(\"abc \"));\r\n    assertFalse(StringUtils.isAllLowerCase(\"abc\\n\"));\r\n    assertFalse(StringUtils.isAllLowerCase(\"abC\"));\r\n    assertFalse(StringUtils.isAllLowerCase(\"ab c\"));\r\n    assertFalse(StringUtils.isAllLowerCase(\"ab1c\"));\r\n    assertFalse(StringUtils.isAllLowerCase(\"ab/c\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\StringUtilsTest.java",
  "methodName" : "testIsAllUpperCase",
  "sourceCode" : "/**\r\n * Test for {@link StringUtils#isAllUpperCase(CharSequence)}.\r\n */\r\n@Test\r\nvoid testIsAllUpperCase() {\r\n    assertFalse(StringUtils.isAllUpperCase(null));\r\n    assertFalse(StringUtils.isAllUpperCase(StringUtils.EMPTY));\r\n    assertFalse(StringUtils.isAllUpperCase(\"  \"));\r\n    assertTrue(StringUtils.isAllUpperCase(\"ABC\"));\r\n    assertFalse(StringUtils.isAllUpperCase(\"ABC \"));\r\n    assertFalse(StringUtils.isAllUpperCase(\"ABC\\n\"));\r\n    assertFalse(StringUtils.isAllUpperCase(\"aBC\"));\r\n    assertFalse(StringUtils.isAllUpperCase(\"A C\"));\r\n    assertFalse(StringUtils.isAllUpperCase(\"A1C\"));\r\n    assertFalse(StringUtils.isAllUpperCase(\"A/C\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\StringUtilsTest.java",
  "methodName" : "testIsMixedCase",
  "sourceCode" : "/**\r\n * Test for {@link StringUtils#isMixedCase(CharSequence)}.\r\n */\r\n@Test\r\nvoid testIsMixedCase() {\r\n    assertFalse(StringUtils.isMixedCase(null));\r\n    assertFalse(StringUtils.isMixedCase(StringUtils.EMPTY));\r\n    assertFalse(StringUtils.isMixedCase(\" \"));\r\n    assertFalse(StringUtils.isMixedCase(\"A\"));\r\n    assertFalse(StringUtils.isMixedCase(\"a\"));\r\n    assertFalse(StringUtils.isMixedCase(\"/\"));\r\n    assertFalse(StringUtils.isMixedCase(\"A/\"));\r\n    assertFalse(StringUtils.isMixedCase(\"/b\"));\r\n    assertFalse(StringUtils.isMixedCase(\"abc\"));\r\n    assertFalse(StringUtils.isMixedCase(\"ABC\"));\r\n    assertTrue(StringUtils.isMixedCase(\"aBc\"));\r\n    assertTrue(StringUtils.isMixedCase(\"aBc \"));\r\n    assertTrue(StringUtils.isMixedCase(\"A c\"));\r\n    assertTrue(StringUtils.isMixedCase(\"aBc\\n\"));\r\n    assertTrue(StringUtils.isMixedCase(\"A1c\"));\r\n    assertTrue(StringUtils.isMixedCase(\"a/C\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\StringUtilsTest.java",
  "methodName" : "testJoin_ArrayCharSeparator",
  "sourceCode" : "@Test\r\nvoid testJoin_ArrayCharSeparator() {\r\n    assertNull(StringUtils.join((Object[]) null, ','));\r\n    assertEquals(TEXT_LIST_CHAR, StringUtils.join(ARRAY_LIST, SEPARATOR_CHAR));\r\n    assertEquals(\"\", StringUtils.join(EMPTY_ARRAY_LIST, SEPARATOR_CHAR));\r\n    assertEquals(\";;foo\", StringUtils.join(MIXED_ARRAY_LIST, SEPARATOR_CHAR));\r\n    assertEquals(\"foo;2\", StringUtils.join(MIXED_TYPE_LIST, SEPARATOR_CHAR));\r\n    assertNull(StringUtils.join((Object[]) null, ',', 0, 1));\r\n    assertEquals(\"/\", StringUtils.join(MIXED_ARRAY_LIST, '/', 0, MIXED_ARRAY_LIST.length - 1));\r\n    assertEquals(\"foo\", StringUtils.join(MIXED_TYPE_LIST, '/', 0, 1));\r\n    assertEquals(\"null\", StringUtils.join(NULL_TO_STRING_LIST, '/', 0, 1));\r\n    assertEquals(\"foo/2\", StringUtils.join(MIXED_TYPE_LIST, '/', 0, 2));\r\n    assertEquals(\"2\", StringUtils.join(MIXED_TYPE_LIST, '/', 1, 2));\r\n    assertEquals(\"\", StringUtils.join(MIXED_TYPE_LIST, '/', 2, 1));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\StringUtilsTest.java",
  "methodName" : "testJoin_ArrayOfBooleans",
  "sourceCode" : "@Test\r\nvoid testJoin_ArrayOfBooleans() {\r\n    assertNull(StringUtils.join((boolean[]) null, COMMA_SEPARATOR_CHAR));\r\n    assertEquals(\"false;false\", StringUtils.join(ARRAY_FALSE_FALSE, SEPARATOR_CHAR));\r\n    assertEquals(\"\", StringUtils.join(EMPTY, SEPARATOR_CHAR));\r\n    assertEquals(\"false,true,false\", StringUtils.join(ARRAY_FALSE_TRUE_FALSE, COMMA_SEPARATOR_CHAR));\r\n    assertEquals(\"true\", StringUtils.join(ARRAY_FALSE_TRUE, SEPARATOR_CHAR, 1, 2));\r\n    assertNull(StringUtils.join((boolean[]) null, SEPARATOR_CHAR, 0, 1));\r\n    assertEquals(StringUtils.EMPTY, StringUtils.join(ARRAY_FALSE_FALSE, SEPARATOR_CHAR, 0, 0));\r\n    assertEquals(StringUtils.EMPTY, StringUtils.join(ARRAY_FALSE_TRUE_FALSE, SEPARATOR_CHAR, 1, 0));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\StringUtilsTest.java",
  "methodName" : "testJoin_ArrayOfBytes",
  "sourceCode" : "@Test\r\nvoid testJoin_ArrayOfBytes() {\r\n    assertNull(StringUtils.join((byte[]) null, ','));\r\n    assertEquals(\"1;2\", StringUtils.join(BYTE_PRIM_LIST, SEPARATOR_CHAR));\r\n    assertEquals(\"2\", StringUtils.join(BYTE_PRIM_LIST, SEPARATOR_CHAR, 1, 2));\r\n    assertNull(StringUtils.join((byte[]) null, SEPARATOR_CHAR, 0, 1));\r\n    assertEquals(StringUtils.EMPTY, StringUtils.join(BYTE_PRIM_LIST, SEPARATOR_CHAR, 0, 0));\r\n    assertEquals(StringUtils.EMPTY, StringUtils.join(BYTE_PRIM_LIST, SEPARATOR_CHAR, 1, 0));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\StringUtilsTest.java",
  "methodName" : "testJoin_ArrayOfChars",
  "sourceCode" : "@Test\r\nvoid testJoin_ArrayOfChars() {\r\n    assertNull(StringUtils.join((char[]) null, ','));\r\n    assertEquals(\"1;2\", StringUtils.join(CHAR_PRIM_LIST, SEPARATOR_CHAR));\r\n    assertEquals(\"2\", StringUtils.join(CHAR_PRIM_LIST, SEPARATOR_CHAR, 1, 2));\r\n    assertNull(StringUtils.join((char[]) null, SEPARATOR_CHAR, 0, 1));\r\n    assertEquals(StringUtils.EMPTY, StringUtils.join(CHAR_PRIM_LIST, SEPARATOR_CHAR, 0, 0));\r\n    assertEquals(StringUtils.EMPTY, StringUtils.join(CHAR_PRIM_LIST, SEPARATOR_CHAR, 1, 0));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\StringUtilsTest.java",
  "methodName" : "testJoin_ArrayOfDoubles",
  "sourceCode" : "@Test\r\nvoid testJoin_ArrayOfDoubles() {\r\n    assertNull(StringUtils.join((double[]) null, ','));\r\n    assertEquals(\"1.0;2.0\", StringUtils.join(DOUBLE_PRIM_LIST, SEPARATOR_CHAR));\r\n    assertEquals(\"2.0\", StringUtils.join(DOUBLE_PRIM_LIST, SEPARATOR_CHAR, 1, 2));\r\n    assertNull(StringUtils.join((double[]) null, SEPARATOR_CHAR, 0, 1));\r\n    assertEquals(StringUtils.EMPTY, StringUtils.join(DOUBLE_PRIM_LIST, SEPARATOR_CHAR, 0, 0));\r\n    assertEquals(StringUtils.EMPTY, StringUtils.join(DOUBLE_PRIM_LIST, SEPARATOR_CHAR, 1, 0));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\StringUtilsTest.java",
  "methodName" : "testJoin_ArrayOfFloats",
  "sourceCode" : "@Test\r\nvoid testJoin_ArrayOfFloats() {\r\n    assertNull(StringUtils.join((float[]) null, ','));\r\n    assertEquals(\"1.0;2.0\", StringUtils.join(FLOAT_PRIM_LIST, SEPARATOR_CHAR));\r\n    assertEquals(\"2.0\", StringUtils.join(FLOAT_PRIM_LIST, SEPARATOR_CHAR, 1, 2));\r\n    assertNull(StringUtils.join((float[]) null, SEPARATOR_CHAR, 0, 1));\r\n    assertEquals(StringUtils.EMPTY, StringUtils.join(FLOAT_PRIM_LIST, SEPARATOR_CHAR, 0, 0));\r\n    assertEquals(StringUtils.EMPTY, StringUtils.join(FLOAT_PRIM_LIST, SEPARATOR_CHAR, 1, 0));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\StringUtilsTest.java",
  "methodName" : "testJoin_ArrayOfInts",
  "sourceCode" : "@Test\r\nvoid testJoin_ArrayOfInts() {\r\n    assertNull(StringUtils.join((int[]) null, ','));\r\n    assertEquals(\"1;2\", StringUtils.join(INT_PRIM_LIST, SEPARATOR_CHAR));\r\n    assertEquals(\"2\", StringUtils.join(INT_PRIM_LIST, SEPARATOR_CHAR, 1, 2));\r\n    assertNull(StringUtils.join((int[]) null, SEPARATOR_CHAR, 0, 1));\r\n    assertEquals(StringUtils.EMPTY, StringUtils.join(INT_PRIM_LIST, SEPARATOR_CHAR, 0, 0));\r\n    assertEquals(StringUtils.EMPTY, StringUtils.join(INT_PRIM_LIST, SEPARATOR_CHAR, 1, 0));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\StringUtilsTest.java",
  "methodName" : "testJoin_ArrayOfLongs",
  "sourceCode" : "@Test\r\nvoid testJoin_ArrayOfLongs() {\r\n    assertNull(StringUtils.join((long[]) null, ','));\r\n    assertEquals(\"1;2\", StringUtils.join(LONG_PRIM_LIST, SEPARATOR_CHAR));\r\n    assertEquals(\"2\", StringUtils.join(LONG_PRIM_LIST, SEPARATOR_CHAR, 1, 2));\r\n    assertNull(StringUtils.join((long[]) null, SEPARATOR_CHAR, 0, 1));\r\n    assertEquals(StringUtils.EMPTY, StringUtils.join(LONG_PRIM_LIST, SEPARATOR_CHAR, 0, 0));\r\n    assertEquals(StringUtils.EMPTY, StringUtils.join(LONG_PRIM_LIST, SEPARATOR_CHAR, 1, 0));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\StringUtilsTest.java",
  "methodName" : "testJoin_ArrayOfShorts",
  "sourceCode" : "@Test\r\nvoid testJoin_ArrayOfShorts() {\r\n    assertNull(StringUtils.join((short[]) null, ','));\r\n    assertEquals(\"1;2\", StringUtils.join(SHORT_PRIM_LIST, SEPARATOR_CHAR));\r\n    assertEquals(\"2\", StringUtils.join(SHORT_PRIM_LIST, SEPARATOR_CHAR, 1, 2));\r\n    assertNull(StringUtils.join((short[]) null, SEPARATOR_CHAR, 0, 1));\r\n    assertEquals(StringUtils.EMPTY, StringUtils.join(SHORT_PRIM_LIST, SEPARATOR_CHAR, 0, 0));\r\n    assertEquals(StringUtils.EMPTY, StringUtils.join(SHORT_PRIM_LIST, SEPARATOR_CHAR, 1, 0));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\StringUtilsTest.java",
  "methodName" : "testJoin_ArrayString_EmptyDelimiter",
  "sourceCode" : "@Test\r\nvoid testJoin_ArrayString_EmptyDelimiter() {\r\n    assertNull(StringUtils.join((Object[]) null, null));\r\n    assertEquals(TEXT_LIST_NOSEP, StringUtils.join(ARRAY_LIST, null));\r\n    assertEquals(TEXT_LIST_NOSEP, StringUtils.join(ARRAY_LIST, \"\"));\r\n    assertEquals(\"\", StringUtils.join(NULL_ARRAY_LIST, null));\r\n    assertEquals(\"\", StringUtils.join(EMPTY_ARRAY_LIST, null));\r\n    assertEquals(\"\", StringUtils.join(EMPTY_ARRAY_LIST, \"\"));\r\n    assertEquals(\"\", StringUtils.join(MIXED_ARRAY_LIST, \"\", 0, MIXED_ARRAY_LIST.length - 1));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\StringUtilsTest.java",
  "methodName" : "testJoin_ArrayString_NonEmptyDelimiter",
  "sourceCode" : "@ParameterizedTest\r\n@ValueSource(strings = { \",\", \";\", Supplementary.CharU20000, Supplementary.CharU20001 })\r\nvoid testJoin_ArrayString_NonEmptyDelimiter(final String delimiter) {\r\n    assertEquals(\"\", StringUtils.join(EMPTY_ARRAY_LIST, delimiter));\r\n    assertEquals(String.join(delimiter, ARRAY_LIST), StringUtils.join(ARRAY_LIST, delimiter));\r\n    assertEquals(delimiter + delimiter + \"foo\", StringUtils.join(MIXED_ARRAY_LIST, delimiter));\r\n    assertEquals(String.join(delimiter, \"foo\", \"2\"), StringUtils.join(MIXED_TYPE_LIST, delimiter));\r\n    assertEquals(delimiter, StringUtils.join(MIXED_ARRAY_LIST, delimiter, 0, MIXED_ARRAY_LIST.length - 1));\r\n    assertEquals(\"foo\", StringUtils.join(MIXED_TYPE_LIST, delimiter, 0, 1));\r\n    assertEquals(String.join(delimiter, \"foo\", \"2\"), StringUtils.join(MIXED_TYPE_LIST, delimiter, 0, 2));\r\n    assertEquals(\"2\", StringUtils.join(MIXED_TYPE_LIST, delimiter, 1, 2));\r\n    assertEquals(\"\", StringUtils.join(MIXED_TYPE_LIST, delimiter, 2, 1));\r\n}",
  "annotations" : [ "ParameterizedTest" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\StringUtilsTest.java",
  "methodName" : "testJoin_IterableChar",
  "sourceCode" : "@Test\r\nvoid testJoin_IterableChar() {\r\n    assertNull(StringUtils.join((Iterable<?>) null, ','));\r\n    assertEquals(TEXT_LIST_CHAR, StringUtils.join(Arrays.asList(ARRAY_LIST), SEPARATOR_CHAR));\r\n    assertEquals(\"\", StringUtils.join(Arrays.asList(NULL_ARRAY_LIST), SEPARATOR_CHAR));\r\n    assertEquals(\"\", StringUtils.join(Arrays.asList(EMPTY_ARRAY_LIST), SEPARATOR_CHAR));\r\n    assertEquals(\"foo\", StringUtils.join(Collections.singleton(\"foo\"), 'x'));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\StringUtilsTest.java",
  "methodName" : "testJoin_IterableString",
  "sourceCode" : "@Test\r\nvoid testJoin_IterableString() {\r\n    assertNull(StringUtils.join((Iterable<?>) null, null));\r\n    assertEquals(TEXT_LIST_NOSEP, StringUtils.join(Arrays.asList(ARRAY_LIST), null));\r\n    assertEquals(TEXT_LIST_NOSEP, StringUtils.join(Arrays.asList(ARRAY_LIST), \"\"));\r\n    assertEquals(\"foo\", StringUtils.join(Collections.singleton(\"foo\"), \"x\"));\r\n    assertEquals(\"foo\", StringUtils.join(Collections.singleton(\"foo\"), null));\r\n    assertEquals(\"\", StringUtils.join(Arrays.asList(NULL_ARRAY_LIST), null));\r\n    assertEquals(\"\", StringUtils.join(Arrays.asList(EMPTY_ARRAY_LIST), null));\r\n    assertEquals(\"\", StringUtils.join(Arrays.asList(EMPTY_ARRAY_LIST), \"\"));\r\n    assertEquals(\"\", StringUtils.join(Arrays.asList(EMPTY_ARRAY_LIST), SEPARATOR));\r\n    assertEquals(TEXT_LIST, StringUtils.join(Arrays.asList(ARRAY_LIST), SEPARATOR));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\StringUtilsTest.java",
  "methodName" : "testJoin_IteratorChar",
  "sourceCode" : "@Test\r\nvoid testJoin_IteratorChar() {\r\n    assertNull(StringUtils.join((Iterator<?>) null, ','));\r\n    assertEquals(TEXT_LIST_CHAR, StringUtils.join(Arrays.asList(ARRAY_LIST).iterator(), SEPARATOR_CHAR));\r\n    assertEquals(\"\", StringUtils.join(Arrays.asList(NULL_ARRAY_LIST).iterator(), SEPARATOR_CHAR));\r\n    assertEquals(\"\", StringUtils.join(Arrays.asList(EMPTY_ARRAY_LIST).iterator(), SEPARATOR_CHAR));\r\n    assertEquals(\"foo\", StringUtils.join(Collections.singleton(\"foo\").iterator(), 'x'));\r\n    assertEquals(\"null\", StringUtils.join(Arrays.asList(NULL_TO_STRING_LIST).iterator(), SEPARATOR_CHAR));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\StringUtilsTest.java",
  "methodName" : "testJoin_IteratorString",
  "sourceCode" : "@Test\r\nvoid testJoin_IteratorString() {\r\n    assertNull(StringUtils.join((Iterator<?>) null, null));\r\n    assertEquals(TEXT_LIST_NOSEP, StringUtils.join(Arrays.asList(ARRAY_LIST).iterator(), null));\r\n    assertEquals(TEXT_LIST_NOSEP, StringUtils.join(Arrays.asList(ARRAY_LIST).iterator(), \"\"));\r\n    assertEquals(\"foo\", StringUtils.join(Collections.singleton(\"foo\").iterator(), \"x\"));\r\n    assertEquals(\"foo\", StringUtils.join(Collections.singleton(\"foo\").iterator(), null));\r\n    assertEquals(\"\", StringUtils.join(Arrays.asList(NULL_ARRAY_LIST).iterator(), null));\r\n    assertEquals(\"\", StringUtils.join(Arrays.asList(EMPTY_ARRAY_LIST).iterator(), null));\r\n    assertEquals(\"\", StringUtils.join(Arrays.asList(EMPTY_ARRAY_LIST).iterator(), \"\"));\r\n    assertEquals(\"\", StringUtils.join(Arrays.asList(EMPTY_ARRAY_LIST).iterator(), SEPARATOR));\r\n    assertEquals(TEXT_LIST, StringUtils.join(Arrays.asList(ARRAY_LIST).iterator(), SEPARATOR));\r\n    assertEquals(\"null\", StringUtils.join(Arrays.asList(NULL_TO_STRING_LIST).iterator(), SEPARATOR));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\StringUtilsTest.java",
  "methodName" : "testJoin_List_CharDelimiter",
  "sourceCode" : "@Test\r\nvoid testJoin_List_CharDelimiter() {\r\n    assertEquals(\"/\", StringUtils.join(MIXED_STRING_LIST, '/', 0, MIXED_STRING_LIST.size() - 1));\r\n    assertEquals(\"foo\", StringUtils.join(MIXED_TYPE_OBJECT_LIST, '/', 0, 1));\r\n    assertEquals(\"foo/2\", StringUtils.join(MIXED_TYPE_OBJECT_LIST, '/', 0, 2));\r\n    assertEquals(\"2\", StringUtils.join(MIXED_TYPE_OBJECT_LIST, '/', 1, 2));\r\n    assertEquals(\"\", StringUtils.join(MIXED_TYPE_OBJECT_LIST, '/', 2, 1));\r\n    assertNull(null, StringUtils.join((List<?>) null, '/', 0, 1));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\StringUtilsTest.java",
  "methodName" : "testJoin_List_EmptyDelimiter",
  "sourceCode" : "@Test\r\nvoid testJoin_List_EmptyDelimiter() {\r\n    assertNull(StringUtils.join((List<String>) null, null));\r\n    assertEquals(TEXT_LIST_NOSEP, StringUtils.join(STRING_LIST, null));\r\n    assertEquals(TEXT_LIST_NOSEP, StringUtils.join(STRING_LIST, \"\"));\r\n    assertEquals(\"\", StringUtils.join(NULL_STRING_LIST, null));\r\n    assertEquals(\"\", StringUtils.join(EMPTY_STRING_LIST, null));\r\n    assertEquals(\"\", StringUtils.join(EMPTY_STRING_LIST, \"\"));\r\n    assertEquals(\"\", StringUtils.join(MIXED_STRING_LIST, \"\", 0, MIXED_STRING_LIST.size() - 1));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\StringUtilsTest.java",
  "methodName" : "testJoin_List_NonEmptyDelimiter",
  "sourceCode" : "@ParameterizedTest\r\n@ValueSource(strings = { \",\", \";\", Supplementary.CharU20000, Supplementary.CharU20001 })\r\nvoid testJoin_List_NonEmptyDelimiter(final String delimiter) {\r\n    assertEquals(\"\", StringUtils.join(EMPTY_STRING_LIST, delimiter));\r\n    assertEquals(String.join(delimiter, STRING_LIST), StringUtils.join(STRING_LIST, delimiter));\r\n    assertEquals(delimiter + delimiter + \"foo\", StringUtils.join(MIXED_STRING_LIST, delimiter));\r\n    assertEquals(String.join(delimiter, \"foo\", \"2\"), StringUtils.join(MIXED_TYPE_OBJECT_LIST, delimiter));\r\n    assertEquals(delimiter, StringUtils.join(MIXED_STRING_LIST, delimiter, 0, MIXED_STRING_LIST.size() - 1));\r\n    assertEquals(\"foo\", StringUtils.join(MIXED_TYPE_OBJECT_LIST, delimiter, 0, 1));\r\n    assertEquals(String.join(delimiter, \"foo\", \"2\"), StringUtils.join(MIXED_TYPE_OBJECT_LIST, delimiter, 0, 2));\r\n    assertEquals(\"2\", StringUtils.join(MIXED_TYPE_OBJECT_LIST, delimiter, 1, 2));\r\n    assertEquals(\"\", StringUtils.join(MIXED_TYPE_OBJECT_LIST, delimiter, 2, 1));\r\n    assertNull(null, StringUtils.join((List<?>) null, delimiter, 0, 1));\r\n}",
  "annotations" : [ "ParameterizedTest" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\StringUtilsTest.java",
  "methodName" : "testJoin_Objectarray",
  "sourceCode" : "@Test\r\nvoid testJoin_Objectarray() {\r\n    //        assertNull(StringUtils.join(null)); // generates warning\r\n    // equivalent explicit cast\r\n    assertNull(StringUtils.join((Object[]) null));\r\n    // test additional varargs calls\r\n    // empty array\r\n    assertEquals(\"\", StringUtils.join());\r\n    // => new Object[]{null}\r\n    assertEquals(\"\", StringUtils.join((Object) null));\r\n    assertEquals(\"\", StringUtils.join(EMPTY_ARRAY_LIST));\r\n    assertEquals(\"\", StringUtils.join(NULL_ARRAY_LIST));\r\n    assertEquals(\"null\", StringUtils.join(NULL_TO_STRING_LIST));\r\n    assertEquals(\"abc\", StringUtils.join(\"a\", \"b\", \"c\"));\r\n    assertEquals(\"a\", StringUtils.join(null, \"a\", \"\"));\r\n    assertEquals(\"foo\", StringUtils.join(MIXED_ARRAY_LIST));\r\n    assertEquals(\"foo2\", StringUtils.join(MIXED_TYPE_LIST));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\StringUtilsTest.java",
  "methodName" : "testJoin_Objects",
  "sourceCode" : "@Test\r\nvoid testJoin_Objects() {\r\n    assertEquals(\"abc\", StringUtils.join(\"a\", \"b\", \"c\"));\r\n    assertEquals(\"a\", StringUtils.join(null, \"\", \"a\"));\r\n    assertNull(StringUtils.join((Object[]) null));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\StringUtilsTest.java",
  "methodName" : "testJoinWith",
  "sourceCode" : "@ParameterizedTest\r\n@ValueSource(strings = { \",\", \";\", Supplementary.CharU20000, Supplementary.CharU20001 })\r\nvoid testJoinWith(final String delimiter) {\r\n    // empty array\r\n    assertEquals(\"\", StringUtils.joinWith(delimiter));\r\n    assertEquals(\"\", StringUtils.joinWith(delimiter, (Object[]) NULL_ARRAY_LIST));\r\n    // toString method prints 'null'\r\n    assertEquals(\"null\", StringUtils.joinWith(delimiter, NULL_TO_STRING_LIST));\r\n    assertEquals(String.join(delimiter, \"a\", \"b\", \"c\"), StringUtils.joinWith(delimiter, \"a\", \"b\", \"c\"));\r\n    assertEquals(String.join(delimiter, \"\", \"a\", \"\"), StringUtils.joinWith(delimiter, null, \"a\", \"\"));\r\n    assertEquals(String.join(delimiter, \"\", \"a\", \"\"), StringUtils.joinWith(delimiter, \"\", \"a\", \"\"));\r\n    assertEquals(\"ab\", StringUtils.joinWith(null, \"a\", \"b\"));\r\n}",
  "annotations" : [ "ParameterizedTest" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\StringUtilsTest.java",
  "methodName" : "testJoinWithThrowsException",
  "sourceCode" : "@Test\r\nvoid testJoinWithThrowsException() {\r\n    assertIllegalArgumentException(() -> StringUtils.joinWith(\",\", (Object[]) null));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\StringUtilsTest.java",
  "methodName" : "testLang1593",
  "sourceCode" : "@Disabled\r\n@Test\r\nvoid testLang1593() {\r\n    final int[] arr = { 1, 2, 3, 4, 5, 6, 7 };\r\n    final String expected = StringUtils.join(arr, '-');\r\n    final String actual = StringUtils.join(arr, \"-\");\r\n    assertEquals(expected, actual);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\StringUtilsTest.java",
  "methodName" : "testLang623",
  "sourceCode" : "@Test\r\nvoid testLang623() {\r\n    assertEquals(\"t\", StringUtils.replaceChars(\"\\u00DE\", '\\u00DE', 't'));\r\n    assertEquals(\"t\", StringUtils.replaceChars(\"\\u00FE\", '\\u00FE', 't'));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\StringUtilsTest.java",
  "methodName" : "testLANG666",
  "sourceCode" : "@Test\r\nvoid testLANG666() {\r\n    assertEquals(\"12\", StringUtils.stripEnd(\"120.00\", \".0\"));\r\n    assertEquals(\"121\", StringUtils.stripEnd(\"121.00\", \".0\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\StringUtilsTest.java",
  "methodName" : "testLeftPad_StringInt",
  "sourceCode" : "@Test\r\nvoid testLeftPad_StringInt() {\r\n    assertNull(StringUtils.leftPad(null, 5));\r\n    assertEquals(\"     \", StringUtils.leftPad(\"\", 5));\r\n    assertEquals(\"  abc\", StringUtils.leftPad(\"abc\", 5));\r\n    assertEquals(\"abc\", StringUtils.leftPad(\"abc\", 2));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\StringUtilsTest.java",
  "methodName" : "testLeftPad_StringIntChar",
  "sourceCode" : "@Test\r\nvoid testLeftPad_StringIntChar() {\r\n    assertNull(StringUtils.leftPad(null, 5, ' '));\r\n    assertEquals(\"     \", StringUtils.leftPad(\"\", 5, ' '));\r\n    assertEquals(\"  abc\", StringUtils.leftPad(\"abc\", 5, ' '));\r\n    assertEquals(\"xxabc\", StringUtils.leftPad(\"abc\", 5, 'x'));\r\n    assertEquals(\"\\uffff\\uffffabc\", StringUtils.leftPad(\"abc\", 5, '\\uffff'));\r\n    assertEquals(\"abc\", StringUtils.leftPad(\"abc\", 2, ' '));\r\n    // bigger than pad length\r\n    final String str = StringUtils.leftPad(\"aaa\", 10000, 'a');\r\n    assertEquals(10000, str.length());\r\n    assertTrue(StringUtils.containsOnly(str, 'a'));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\StringUtilsTest.java",
  "methodName" : "testLeftPad_StringIntString",
  "sourceCode" : "@Test\r\nvoid testLeftPad_StringIntString() {\r\n    assertNull(StringUtils.leftPad(null, 5, \"-+\"));\r\n    assertNull(StringUtils.leftPad(null, 5, null));\r\n    assertEquals(\"     \", StringUtils.leftPad(\"\", 5, \" \"));\r\n    assertEquals(\"-+-+abc\", StringUtils.leftPad(\"abc\", 7, \"-+\"));\r\n    assertEquals(\"-+~abc\", StringUtils.leftPad(\"abc\", 6, \"-+~\"));\r\n    assertEquals(\"-+abc\", StringUtils.leftPad(\"abc\", 5, \"-+~\"));\r\n    assertEquals(\"abc\", StringUtils.leftPad(\"abc\", 2, \" \"));\r\n    assertEquals(\"abc\", StringUtils.leftPad(\"abc\", -1, \" \"));\r\n    assertEquals(\"  abc\", StringUtils.leftPad(\"abc\", 5, null));\r\n    assertEquals(\"  abc\", StringUtils.leftPad(\"abc\", 5, \"\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\StringUtilsTest.java",
  "methodName" : "testLength_CharBuffer",
  "sourceCode" : "@Test\r\nvoid testLength_CharBuffer() {\r\n    assertEquals(0, StringUtils.length(CharBuffer.wrap(\"\")));\r\n    assertEquals(1, StringUtils.length(CharBuffer.wrap(\"A\")));\r\n    assertEquals(1, StringUtils.length(CharBuffer.wrap(\" \")));\r\n    assertEquals(8, StringUtils.length(CharBuffer.wrap(\"ABCDEFGH\")));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\StringUtilsTest.java",
  "methodName" : "testLengthString",
  "sourceCode" : "@Test\r\nvoid testLengthString() {\r\n    assertEquals(0, StringUtils.length(null));\r\n    assertEquals(0, StringUtils.length(\"\"));\r\n    assertEquals(0, StringUtils.length(StringUtils.EMPTY));\r\n    assertEquals(1, StringUtils.length(\"A\"));\r\n    assertEquals(1, StringUtils.length(\" \"));\r\n    assertEquals(8, StringUtils.length(\"ABCDEFGH\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\StringUtilsTest.java",
  "methodName" : "testLengthStringBuffer",
  "sourceCode" : "@Test\r\nvoid testLengthStringBuffer() {\r\n    assertEquals(0, StringUtils.length(new StringBuffer(\"\")));\r\n    assertEquals(0, StringUtils.length(new StringBuffer(StringUtils.EMPTY)));\r\n    assertEquals(1, StringUtils.length(new StringBuffer(\"A\")));\r\n    assertEquals(1, StringUtils.length(new StringBuffer(\" \")));\r\n    assertEquals(8, StringUtils.length(new StringBuffer(\"ABCDEFGH\")));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\StringUtilsTest.java",
  "methodName" : "testLengthStringBuilder",
  "sourceCode" : "@Test\r\nvoid testLengthStringBuilder() {\r\n    assertEquals(0, StringUtils.length(new StringBuilder(\"\")));\r\n    assertEquals(0, StringUtils.length(new StringBuilder(StringUtils.EMPTY)));\r\n    assertEquals(1, StringUtils.length(new StringBuilder(\"A\")));\r\n    assertEquals(1, StringUtils.length(new StringBuilder(\" \")));\r\n    assertEquals(8, StringUtils.length(new StringBuilder(\"ABCDEFGH\")));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\StringUtilsTest.java",
  "methodName" : "testLowerCase",
  "sourceCode" : "@Test\r\nvoid testLowerCase() {\r\n    assertNull(StringUtils.lowerCase(null));\r\n    assertNull(StringUtils.lowerCase(null, Locale.ENGLISH));\r\n    assertEquals(\"foo test thing\", StringUtils.lowerCase(\"fOo test THING\"), \"lowerCase(String) failed\");\r\n    assertEquals(\"\", StringUtils.lowerCase(\"\"), \"lowerCase(empty-string) failed\");\r\n    assertEquals(\"foo test thing\", StringUtils.lowerCase(\"fOo test THING\", Locale.ENGLISH), \"lowerCase(String, Locale) failed\");\r\n    assertEquals(\"\", StringUtils.lowerCase(\"\", Locale.ENGLISH), \"lowerCase(empty-string, Locale) failed\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\StringUtilsTest.java",
  "methodName" : "testNormalizeSpace",
  "sourceCode" : "@Test\r\nvoid testNormalizeSpace() {\r\n    // Java says a non-breaking whitespace is not a whitespace.\r\n    assertFalse(Character.isWhitespace('\\u00A0'));\r\n    //\r\n    assertNull(StringUtils.normalizeSpace(null));\r\n    assertEquals(\"\", StringUtils.normalizeSpace(\"\"));\r\n    assertEquals(\"\", StringUtils.normalizeSpace(\" \"));\r\n    assertEquals(\"\", StringUtils.normalizeSpace(\"\\t\"));\r\n    assertEquals(\"\", StringUtils.normalizeSpace(\"\\n\"));\r\n    assertEquals(\"\", StringUtils.normalizeSpace(\"\\u0009\"));\r\n    assertEquals(\"\", StringUtils.normalizeSpace(\"\\u000B\"));\r\n    assertEquals(\"\", StringUtils.normalizeSpace(\"\\u000C\"));\r\n    assertEquals(\"\", StringUtils.normalizeSpace(\"\\u001C\"));\r\n    assertEquals(\"\", StringUtils.normalizeSpace(\"\\u001D\"));\r\n    assertEquals(\"\", StringUtils.normalizeSpace(\"\\u001E\"));\r\n    assertEquals(\"\", StringUtils.normalizeSpace(\"\\u001F\"));\r\n    assertEquals(\"\", StringUtils.normalizeSpace(\"\\f\"));\r\n    assertEquals(\"\", StringUtils.normalizeSpace(\"\\r\"));\r\n    assertEquals(\"a\", StringUtils.normalizeSpace(\"  a  \"));\r\n    assertEquals(\"a b c\", StringUtils.normalizeSpace(\"  a  b   c  \"));\r\n    assertEquals(\"a b c\", StringUtils.normalizeSpace(\"a\\t\\f\\r  b\\u000B   c\\n\"));\r\n    assertEquals(\"a   b c\", StringUtils.normalizeSpace(\"a\\t\\f\\r  \" + HARD_SPACE + HARD_SPACE + \"b\\u000B   c\\n\"));\r\n    assertEquals(\"b\", StringUtils.normalizeSpace(\"\\u0000b\"));\r\n    assertEquals(\"b\", StringUtils.normalizeSpace(\"b\\u0000\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\StringUtilsTest.java",
  "methodName" : "testOverlay_StringStringIntInt",
  "sourceCode" : "@Test\r\nvoid testOverlay_StringStringIntInt() {\r\n    assertNull(StringUtils.overlay(null, null, 2, 4));\r\n    assertNull(StringUtils.overlay(null, null, -2, -4));\r\n    assertEquals(\"\", StringUtils.overlay(\"\", null, 0, 0));\r\n    assertEquals(\"\", StringUtils.overlay(\"\", \"\", 0, 0));\r\n    assertEquals(\"zzzz\", StringUtils.overlay(\"\", \"zzzz\", 0, 0));\r\n    assertEquals(\"zzzz\", StringUtils.overlay(\"\", \"zzzz\", 2, 4));\r\n    assertEquals(\"zzzz\", StringUtils.overlay(\"\", \"zzzz\", -2, -4));\r\n    assertEquals(\"abef\", StringUtils.overlay(\"abcdef\", null, 2, 4));\r\n    assertEquals(\"abef\", StringUtils.overlay(\"abcdef\", null, 4, 2));\r\n    assertEquals(\"abef\", StringUtils.overlay(\"abcdef\", \"\", 2, 4));\r\n    assertEquals(\"abef\", StringUtils.overlay(\"abcdef\", \"\", 4, 2));\r\n    assertEquals(\"abzzzzef\", StringUtils.overlay(\"abcdef\", \"zzzz\", 2, 4));\r\n    assertEquals(\"abzzzzef\", StringUtils.overlay(\"abcdef\", \"zzzz\", 4, 2));\r\n    assertEquals(\"zzzzef\", StringUtils.overlay(\"abcdef\", \"zzzz\", -1, 4));\r\n    assertEquals(\"zzzzef\", StringUtils.overlay(\"abcdef\", \"zzzz\", 4, -1));\r\n    assertEquals(\"zzzzabcdef\", StringUtils.overlay(\"abcdef\", \"zzzz\", -2, -1));\r\n    assertEquals(\"zzzzabcdef\", StringUtils.overlay(\"abcdef\", \"zzzz\", -1, -2));\r\n    assertEquals(\"abcdzzzz\", StringUtils.overlay(\"abcdef\", \"zzzz\", 4, 10));\r\n    assertEquals(\"abcdzzzz\", StringUtils.overlay(\"abcdef\", \"zzzz\", 10, 4));\r\n    assertEquals(\"abcdefzzzz\", StringUtils.overlay(\"abcdef\", \"zzzz\", 8, 10));\r\n    assertEquals(\"abcdefzzzz\", StringUtils.overlay(\"abcdef\", \"zzzz\", 10, 8));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\StringUtilsTest.java",
  "methodName" : "testPrependIfMissing",
  "sourceCode" : "/**\r\n * Tests {@code prependIfMissing}.\r\n */\r\n@Test\r\nvoid testPrependIfMissing() {\r\n    assertNull(StringUtils.prependIfMissing(null, null), \"prependIfMissing(null,null)\");\r\n    assertEquals(\"abc\", StringUtils.prependIfMissing(\"abc\", null), \"prependIfMissing(abc,null)\");\r\n    assertEquals(\"xyz\", StringUtils.prependIfMissing(\"\", \"xyz\"), \"prependIfMissing(\\\"\\\",xyz)\");\r\n    assertEquals(\"xyzabc\", StringUtils.prependIfMissing(\"abc\", \"xyz\"), \"prependIfMissing(abc,xyz)\");\r\n    assertEquals(\"xyzabc\", StringUtils.prependIfMissing(\"xyzabc\", \"xyz\"), \"prependIfMissing(xyzabc,xyz)\");\r\n    assertEquals(\"xyzXYZabc\", StringUtils.prependIfMissing(\"XYZabc\", \"xyz\"), \"prependIfMissing(XYZabc,xyz)\");\r\n    assertNull(StringUtils.prependIfMissing(null, null, (CharSequence[]) null), \"prependIfMissing(null,null null)\");\r\n    assertEquals(\"abc\", StringUtils.prependIfMissing(\"abc\", null, (CharSequence[]) null), \"prependIfMissing(abc,null,null)\");\r\n    assertEquals(\"xyz\", StringUtils.prependIfMissing(\"\", \"xyz\", (CharSequence[]) null), \"prependIfMissing(\\\"\\\",xyz,null)\");\r\n    assertEquals(\"xyzabc\", StringUtils.prependIfMissing(\"abc\", \"xyz\", (CharSequence) null), \"prependIfMissing(abc,xyz,{null})\");\r\n    assertEquals(\"abc\", StringUtils.prependIfMissing(\"abc\", \"xyz\", \"\"), \"prependIfMissing(abc,xyz,\\\"\\\")\");\r\n    assertEquals(\"xyzabc\", StringUtils.prependIfMissing(\"abc\", \"xyz\", \"mno\"), \"prependIfMissing(abc,xyz,mno)\");\r\n    assertEquals(\"xyzabc\", StringUtils.prependIfMissing(\"xyzabc\", \"xyz\", \"mno\"), \"prependIfMissing(xyzabc,xyz,mno)\");\r\n    assertEquals(\"mnoabc\", StringUtils.prependIfMissing(\"mnoabc\", \"xyz\", \"mno\"), \"prependIfMissing(mnoabc,xyz,mno)\");\r\n    assertEquals(\"xyzXYZabc\", StringUtils.prependIfMissing(\"XYZabc\", \"xyz\", \"mno\"), \"prependIfMissing(XYZabc,xyz,mno)\");\r\n    assertEquals(\"xyzMNOabc\", StringUtils.prependIfMissing(\"MNOabc\", \"xyz\", \"mno\"), \"prependIfMissing(MNOabc,xyz,mno)\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\StringUtilsTest.java",
  "methodName" : "testPrependIfMissingIgnoreCase",
  "sourceCode" : "/**\r\n * Tests {@code prependIfMissingIgnoreCase}.\r\n */\r\n@Test\r\nvoid testPrependIfMissingIgnoreCase() {\r\n    assertNull(StringUtils.prependIfMissingIgnoreCase(null, null), \"prependIfMissingIgnoreCase(null,null)\");\r\n    assertEquals(\"abc\", StringUtils.prependIfMissingIgnoreCase(\"abc\", null), \"prependIfMissingIgnoreCase(abc,null)\");\r\n    assertEquals(\"xyz\", StringUtils.prependIfMissingIgnoreCase(\"\", \"xyz\"), \"prependIfMissingIgnoreCase(\\\"\\\",xyz)\");\r\n    assertEquals(\"xyzabc\", StringUtils.prependIfMissingIgnoreCase(\"abc\", \"xyz\"), \"prependIfMissingIgnoreCase(abc,xyz)\");\r\n    assertEquals(\"xyzabc\", StringUtils.prependIfMissingIgnoreCase(\"xyzabc\", \"xyz\"), \"prependIfMissingIgnoreCase(xyzabc,xyz)\");\r\n    assertEquals(\"XYZabc\", StringUtils.prependIfMissingIgnoreCase(\"XYZabc\", \"xyz\"), \"prependIfMissingIgnoreCase(XYZabc,xyz)\");\r\n    assertNull(StringUtils.prependIfMissingIgnoreCase(null, null, (CharSequence[]) null), \"prependIfMissingIgnoreCase(null,null null)\");\r\n    assertEquals(\"abc\", StringUtils.prependIfMissingIgnoreCase(\"abc\", null, (CharSequence[]) null), \"prependIfMissingIgnoreCase(abc,null,null)\");\r\n    assertEquals(\"xyz\", StringUtils.prependIfMissingIgnoreCase(\"\", \"xyz\", (CharSequence[]) null), \"prependIfMissingIgnoreCase(\\\"\\\",xyz,null)\");\r\n    assertEquals(\"xyzabc\", StringUtils.prependIfMissingIgnoreCase(\"abc\", \"xyz\", (CharSequence) null), \"prependIfMissingIgnoreCase(abc,xyz,{null})\");\r\n    assertEquals(\"abc\", StringUtils.prependIfMissingIgnoreCase(\"abc\", \"xyz\", \"\"), \"prependIfMissingIgnoreCase(abc,xyz,\\\"\\\")\");\r\n    assertEquals(\"xyzabc\", StringUtils.prependIfMissingIgnoreCase(\"abc\", \"xyz\", \"mno\"), \"prependIfMissingIgnoreCase(abc,xyz,mno)\");\r\n    assertEquals(\"xyzabc\", StringUtils.prependIfMissingIgnoreCase(\"xyzabc\", \"xyz\", \"mno\"), \"prependIfMissingIgnoreCase(xyzabc,xyz,mno)\");\r\n    assertEquals(\"mnoabc\", StringUtils.prependIfMissingIgnoreCase(\"mnoabc\", \"xyz\", \"mno\"), \"prependIfMissingIgnoreCase(mnoabc,xyz,mno)\");\r\n    assertEquals(\"XYZabc\", StringUtils.prependIfMissingIgnoreCase(\"XYZabc\", \"xyz\", \"mno\"), \"prependIfMissingIgnoreCase(XYZabc,xyz,mno)\");\r\n    assertEquals(\"MNOabc\", StringUtils.prependIfMissingIgnoreCase(\"MNOabc\", \"xyz\", \"mno\"), \"prependIfMissingIgnoreCase(MNOabc,xyz,mno)\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\StringUtilsTest.java",
  "methodName" : "testReCapitalize",
  "sourceCode" : "@Test\r\nvoid testReCapitalize() {\r\n    // reflection type of tests: Sentences.\r\n    assertEquals(SENTENCE_UNCAP, StringUtils.uncapitalize(StringUtils.capitalize(SENTENCE_UNCAP)), \"uncapitalize(capitalize(String)) failed\");\r\n    assertEquals(SENTENCE_CAP, StringUtils.capitalize(StringUtils.uncapitalize(SENTENCE_CAP)), \"capitalize(uncapitalize(String)) failed\");\r\n    // reflection type of tests: One word.\r\n    assertEquals(FOO_UNCAP, StringUtils.uncapitalize(StringUtils.capitalize(FOO_UNCAP)), \"uncapitalize(capitalize(String)) failed\");\r\n    assertEquals(FOO_CAP, StringUtils.capitalize(StringUtils.uncapitalize(FOO_CAP)), \"capitalize(uncapitalize(String)) failed\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\StringUtilsTest.java",
  "methodName" : "testRemove_char",
  "sourceCode" : "@Test\r\nvoid testRemove_char() {\r\n    // StringUtils.remove(null, *)       = null\r\n    assertNull(StringUtils.remove(null, null));\r\n    assertNull(StringUtils.remove(null, 'a'));\r\n    // StringUtils.remove(\"\", *)          = \"\"\r\n    assertEquals(\"\", StringUtils.remove(\"\", null));\r\n    assertEquals(\"\", StringUtils.remove(\"\", 'a'));\r\n    // StringUtils.remove(\"queued\", 'u') = \"qeed\"\r\n    assertEquals(\"qeed\", StringUtils.remove(\"queued\", 'u'));\r\n    // StringUtils.remove(\"queued\", 'z') = \"queued\"\r\n    assertEquals(\"queued\", StringUtils.remove(\"queued\", 'z'));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\StringUtilsTest.java",
  "methodName" : "testRemove_String",
  "sourceCode" : "@Test\r\nvoid testRemove_String() {\r\n    // StringUtils.remove(null, *)        = null\r\n    assertNull(StringUtils.remove(null, null));\r\n    assertNull(StringUtils.remove(null, \"\"));\r\n    assertNull(StringUtils.remove(null, \"a\"));\r\n    // StringUtils.remove(\"\", *)          = \"\"\r\n    assertEquals(\"\", StringUtils.remove(\"\", null));\r\n    assertEquals(\"\", StringUtils.remove(\"\", \"\"));\r\n    assertEquals(\"\", StringUtils.remove(\"\", \"a\"));\r\n    // StringUtils.remove(*, null)        = *\r\n    assertNull(StringUtils.remove(null, null));\r\n    assertEquals(\"\", StringUtils.remove(\"\", null));\r\n    assertEquals(\"a\", StringUtils.remove(\"a\", null));\r\n    // StringUtils.remove(*, \"\")          = *\r\n    assertNull(StringUtils.remove(null, \"\"));\r\n    assertEquals(\"\", StringUtils.remove(\"\", \"\"));\r\n    assertEquals(\"a\", StringUtils.remove(\"a\", \"\"));\r\n    // StringUtils.remove(\"queued\", \"ue\") = \"qd\"\r\n    assertEquals(\"qd\", StringUtils.remove(\"queued\", \"ue\"));\r\n    // StringUtils.remove(\"queued\", \"zz\") = \"queued\"\r\n    assertEquals(\"queued\", StringUtils.remove(\"queued\", \"zz\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\StringUtilsTest.java",
  "methodName" : "testRemoveAll_StringString",
  "sourceCode" : "@Test\r\nvoid testRemoveAll_StringString() {\r\n    assertNull(StringUtils.removeAll(null, \"\"));\r\n    assertEquals(\"any\", StringUtils.removeAll(\"any\", null));\r\n    assertEquals(\"any\", StringUtils.removeAll(\"any\", \"\"));\r\n    assertEquals(\"\", StringUtils.removeAll(\"any\", \".*\"));\r\n    assertEquals(\"\", StringUtils.removeAll(\"any\", \".+\"));\r\n    assertEquals(\"\", StringUtils.removeAll(\"any\", \".?\"));\r\n    assertEquals(\"A\\nB\", StringUtils.removeAll(\"A<__>\\n<__>B\", \"<.*>\"));\r\n    assertEquals(\"AB\", StringUtils.removeAll(\"A<__>\\n<__>B\", \"(?s)<.*>\"));\r\n    assertEquals(\"ABC123\", StringUtils.removeAll(\"ABCabc123abc\", \"[a-z]\"));\r\n    assertThrows(PatternSyntaxException.class, () -> StringUtils.removeAll(\"any\", \"{badRegexSyntax}\"), \"StringUtils.removeAll expecting PatternSyntaxException\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\StringUtilsTest.java",
  "methodName" : "testRemoveEnd",
  "sourceCode" : "@Test\r\nvoid testRemoveEnd() {\r\n    // StringUtils.removeEnd(\"\", *)        = \"\"\r\n    assertNull(StringUtils.removeEnd(null, null));\r\n    assertNull(StringUtils.removeEnd(null, \"\"));\r\n    assertNull(StringUtils.removeEnd(null, \"a\"));\r\n    // StringUtils.removeEnd(*, null)      = *\r\n    assertEquals(StringUtils.removeEnd(\"\", null), \"\");\r\n    assertEquals(StringUtils.removeEnd(\"\", \"\"), \"\");\r\n    assertEquals(StringUtils.removeEnd(\"\", \"a\"), \"\");\r\n    // All others:\r\n    assertEquals(StringUtils.removeEnd(\"www.domain.com.\", \".com\"), \"www.domain.com.\");\r\n    assertEquals(StringUtils.removeEnd(\"www.domain.com\", \".com\"), \"www.domain\");\r\n    assertEquals(StringUtils.removeEnd(\"www.domain\", \".com\"), \"www.domain\");\r\n    assertEquals(StringUtils.removeEnd(\"domain.com\", \"\"), \"domain.com\");\r\n    assertEquals(StringUtils.removeEnd(\"domain.com\", null), \"domain.com\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\StringUtilsTest.java",
  "methodName" : "testRemoveEndIgnoreCase",
  "sourceCode" : "@Test\r\nvoid testRemoveEndIgnoreCase() {\r\n    // StringUtils.removeEndIgnoreCase(\"\", *)        = \"\"\r\n    assertNull(StringUtils.removeEndIgnoreCase(null, null), \"removeEndIgnoreCase(null, null)\");\r\n    assertNull(StringUtils.removeEndIgnoreCase(null, \"\"), \"removeEndIgnoreCase(null, \\\"\\\")\");\r\n    assertNull(StringUtils.removeEndIgnoreCase(null, \"a\"), \"removeEndIgnoreCase(null, \\\"a\\\")\");\r\n    // StringUtils.removeEnd(*, null)      = *\r\n    assertEquals(StringUtils.removeEndIgnoreCase(\"\", null), \"\", \"removeEndIgnoreCase(\\\"\\\", null)\");\r\n    assertEquals(StringUtils.removeEndIgnoreCase(\"\", \"\"), \"\", \"removeEndIgnoreCase(\\\"\\\", \\\"\\\")\");\r\n    assertEquals(StringUtils.removeEndIgnoreCase(\"\", \"a\"), \"\", \"removeEndIgnoreCase(\\\"\\\", \\\"a\\\")\");\r\n    // All others:\r\n    assertEquals(StringUtils.removeEndIgnoreCase(\"www.domain.com.\", \".com\"), \"www.domain.com.\", \"removeEndIgnoreCase(\\\"www.domain.com.\\\", \\\".com\\\")\");\r\n    assertEquals(StringUtils.removeEndIgnoreCase(\"www.domain.com\", \".com\"), \"www.domain\", \"removeEndIgnoreCase(\\\"www.domain.com\\\", \\\".com\\\")\");\r\n    assertEquals(StringUtils.removeEndIgnoreCase(\"www.domain\", \".com\"), \"www.domain\", \"removeEndIgnoreCase(\\\"www.domain\\\", \\\".com\\\")\");\r\n    assertEquals(StringUtils.removeEndIgnoreCase(\"domain.com\", \"\"), \"domain.com\", \"removeEndIgnoreCase(\\\"domain.com\\\", \\\"\\\")\");\r\n    assertEquals(StringUtils.removeEndIgnoreCase(\"domain.com\", null), \"domain.com\", \"removeEndIgnoreCase(\\\"domain.com\\\", null)\");\r\n    // Case-insensitive:\r\n    assertEquals(StringUtils.removeEndIgnoreCase(\"www.domain.com\", \".COM\"), \"www.domain\", \"removeEndIgnoreCase(\\\"www.domain.com\\\", \\\".COM\\\")\");\r\n    assertEquals(StringUtils.removeEndIgnoreCase(\"www.domain.COM\", \".com\"), \"www.domain\", \"removeEndIgnoreCase(\\\"www.domain.COM\\\", \\\".com\\\")\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\StringUtilsTest.java",
  "methodName" : "testRemoveFirst_StringString",
  "sourceCode" : "@Test\r\nvoid testRemoveFirst_StringString() {\r\n    assertNull(StringUtils.removeFirst(null, \"\"));\r\n    assertEquals(\"any\", StringUtils.removeFirst(\"any\", null));\r\n    assertEquals(\"any\", StringUtils.removeFirst(\"any\", \"\"));\r\n    assertEquals(\"\", StringUtils.removeFirst(\"any\", \".*\"));\r\n    assertEquals(\"\", StringUtils.removeFirst(\"any\", \".+\"));\r\n    assertEquals(\"bc\", StringUtils.removeFirst(\"abc\", \".?\"));\r\n    assertEquals(\"A\\n<__>B\", StringUtils.removeFirst(\"A<__>\\n<__>B\", \"<.*>\"));\r\n    assertEquals(\"AB\", StringUtils.removeFirst(\"A<__>\\n<__>B\", \"(?s)<.*>\"));\r\n    assertEquals(\"ABCbc123\", StringUtils.removeFirst(\"ABCabc123\", \"[a-z]\"));\r\n    assertEquals(\"ABC123abc\", StringUtils.removeFirst(\"ABCabc123abc\", \"[a-z]+\"));\r\n    assertThrows(PatternSyntaxException.class, () -> StringUtils.removeFirst(\"any\", \"{badRegexSyntax}\"), \"StringUtils.removeFirst expecting PatternSyntaxException\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\StringUtilsTest.java",
  "methodName" : "testRemoveIgnoreCase_String",
  "sourceCode" : "@Test\r\nvoid testRemoveIgnoreCase_String() {\r\n    // StringUtils.removeIgnoreCase(null, *) = null\r\n    assertNull(StringUtils.removeIgnoreCase(null, null));\r\n    assertNull(StringUtils.removeIgnoreCase(null, \"\"));\r\n    assertNull(StringUtils.removeIgnoreCase(null, \"a\"));\r\n    // StringUtils.removeIgnoreCase(\"\", *) = \"\"\r\n    assertEquals(\"\", StringUtils.removeIgnoreCase(\"\", null));\r\n    assertEquals(\"\", StringUtils.removeIgnoreCase(\"\", \"\"));\r\n    assertEquals(\"\", StringUtils.removeIgnoreCase(\"\", \"a\"));\r\n    // StringUtils.removeIgnoreCase(*, null) = *\r\n    assertNull(StringUtils.removeIgnoreCase(null, null));\r\n    assertEquals(\"\", StringUtils.removeIgnoreCase(\"\", null));\r\n    assertEquals(\"a\", StringUtils.removeIgnoreCase(\"a\", null));\r\n    // StringUtils.removeIgnoreCase(*, \"\") = *\r\n    assertNull(StringUtils.removeIgnoreCase(null, \"\"));\r\n    assertEquals(\"\", StringUtils.removeIgnoreCase(\"\", \"\"));\r\n    assertEquals(\"a\", StringUtils.removeIgnoreCase(\"a\", \"\"));\r\n    // StringUtils.removeIgnoreCase(\"queued\", \"ue\") = \"qd\"\r\n    assertEquals(\"qd\", StringUtils.removeIgnoreCase(\"queued\", \"ue\"));\r\n    // StringUtils.removeIgnoreCase(\"queued\", \"zz\") = \"queued\"\r\n    assertEquals(\"queued\", StringUtils.removeIgnoreCase(\"queued\", \"zz\"));\r\n    // IgnoreCase\r\n    // StringUtils.removeIgnoreCase(\"quEUed\", \"UE\") = \"qd\"\r\n    assertEquals(\"qd\", StringUtils.removeIgnoreCase(\"quEUed\", \"UE\"));\r\n    // StringUtils.removeIgnoreCase(\"queued\", \"zZ\") = \"queued\"\r\n    assertEquals(\"queued\", StringUtils.removeIgnoreCase(\"queued\", \"zZ\"));\r\n    // StringUtils.removeIgnoreCase(\"\\u0130x\", \"x\") = \"\\u0130\"\r\n    assertEquals(\"\\u0130\", StringUtils.removeIgnoreCase(\"\\u0130x\", \"x\"));\r\n    // LANG-1453\r\n    StringUtils.removeIgnoreCase(\"İa\", \"a\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\StringUtilsTest.java",
  "methodName" : "testRemovePattern_StringString",
  "sourceCode" : "@Test\r\nvoid testRemovePattern_StringString() {\r\n    assertNull(StringUtils.removePattern(null, \"\"));\r\n    assertEquals(\"any\", StringUtils.removePattern(\"any\", null));\r\n    assertEquals(\"\", StringUtils.removePattern(\"\", \"\"));\r\n    assertEquals(\"\", StringUtils.removePattern(\"\", \".*\"));\r\n    assertEquals(\"\", StringUtils.removePattern(\"\", \".+\"));\r\n    assertEquals(\"AB\", StringUtils.removePattern(\"A<__>\\n<__>B\", \"<.*>\"));\r\n    assertEquals(\"AB\", StringUtils.removePattern(\"A<__>\\\\n<__>B\", \"<.*>\"));\r\n    assertEquals(\"\", StringUtils.removePattern(\"<A>x\\\\ny</A>\", \"<A>.*</A>\"));\r\n    assertEquals(\"\", StringUtils.removePattern(\"<A>\\nxy\\n</A>\", \"<A>.*</A>\"));\r\n    assertEquals(\"ABC123\", StringUtils.removePattern(\"ABCabc123\", \"[a-z]\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\StringUtilsTest.java",
  "methodName" : "testRemoveStartChar",
  "sourceCode" : "@Test\r\nvoid testRemoveStartChar() {\r\n    // StringUtils.removeStart(\"\", *)        = \"\"\r\n    assertNull(StringUtils.removeStart(null, '\\0'));\r\n    assertNull(StringUtils.removeStart(null, 'a'));\r\n    // StringUtils.removeStart(*, null)      = *\r\n    assertEquals(StringUtils.removeStart(\"\", '\\0'), \"\");\r\n    assertEquals(StringUtils.removeStart(\"\", 'a'), \"\");\r\n    // All others:\r\n    assertEquals(StringUtils.removeStart(\"/path\", '/'), \"path\");\r\n    assertEquals(StringUtils.removeStart(\"path\", '/'), \"path\");\r\n    assertEquals(StringUtils.removeStart(\"path\", '\\0'), \"path\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\StringUtilsTest.java",
  "methodName" : "testRemoveStartIgnoreCase",
  "sourceCode" : "@Test\r\nvoid testRemoveStartIgnoreCase() {\r\n    // StringUtils.removeStart(\"\", *)        = \"\"\r\n    assertNull(StringUtils.removeStartIgnoreCase(null, null), \"removeStartIgnoreCase(null, null)\");\r\n    assertNull(StringUtils.removeStartIgnoreCase(null, \"\"), \"removeStartIgnoreCase(null, \\\"\\\")\");\r\n    assertNull(StringUtils.removeStartIgnoreCase(null, \"a\"), \"removeStartIgnoreCase(null, \\\"a\\\")\");\r\n    // StringUtils.removeStart(*, null)      = *\r\n    assertEquals(StringUtils.removeStartIgnoreCase(\"\", null), \"\", \"removeStartIgnoreCase(\\\"\\\", null)\");\r\n    assertEquals(StringUtils.removeStartIgnoreCase(\"\", \"\"), \"\", \"removeStartIgnoreCase(\\\"\\\", \\\"\\\")\");\r\n    assertEquals(StringUtils.removeStartIgnoreCase(\"\", \"a\"), \"\", \"removeStartIgnoreCase(\\\"\\\", \\\"a\\\")\");\r\n    // All others:\r\n    assertEquals(StringUtils.removeStartIgnoreCase(\"www.domain.com\", \"www.\"), \"domain.com\", \"removeStartIgnoreCase(\\\"www.domain.com\\\", \\\"www.\\\")\");\r\n    assertEquals(StringUtils.removeStartIgnoreCase(\"domain.com\", \"www.\"), \"domain.com\", \"removeStartIgnoreCase(\\\"domain.com\\\", \\\"www.\\\")\");\r\n    assertEquals(StringUtils.removeStartIgnoreCase(\"domain.com\", \"\"), \"domain.com\", \"removeStartIgnoreCase(\\\"domain.com\\\", \\\"\\\")\");\r\n    assertEquals(StringUtils.removeStartIgnoreCase(\"domain.com\", null), \"domain.com\", \"removeStartIgnoreCase(\\\"domain.com\\\", null)\");\r\n    // Case-insensitive:\r\n    assertEquals(StringUtils.removeStartIgnoreCase(\"www.domain.com\", \"WWW.\"), \"domain.com\", \"removeStartIgnoreCase(\\\"www.domain.com\\\", \\\"WWW.\\\")\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\StringUtilsTest.java",
  "methodName" : "testRemoveStartString",
  "sourceCode" : "@Test\r\nvoid testRemoveStartString() {\r\n    // StringUtils.removeStart(\"\", *)        = \"\"\r\n    assertNull(StringUtils.removeStart(null, null));\r\n    assertNull(StringUtils.removeStart(null, \"\"));\r\n    assertNull(StringUtils.removeStart(null, \"a\"));\r\n    // StringUtils.removeStart(*, null)      = *\r\n    assertEquals(StringUtils.removeStart(\"\", null), \"\");\r\n    assertEquals(StringUtils.removeStart(\"\", \"\"), \"\");\r\n    assertEquals(StringUtils.removeStart(\"\", \"a\"), \"\");\r\n    // All others:\r\n    assertEquals(StringUtils.removeStart(\"www.domain.com\", \"www.\"), \"domain.com\");\r\n    assertEquals(StringUtils.removeStart(\"domain.com\", \"www.\"), \"domain.com\");\r\n    assertEquals(StringUtils.removeStart(\"domain.com\", \"\"), \"domain.com\");\r\n    assertEquals(StringUtils.removeStart(\"domain.com\", null), \"domain.com\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\StringUtilsTest.java",
  "methodName" : "testRepeat_CharInt",
  "sourceCode" : "@Test\r\nvoid testRepeat_CharInt() {\r\n    assertEquals(\"zzz\", StringUtils.repeat('z', 3));\r\n    assertEquals(\"\", StringUtils.repeat('z', 0));\r\n    assertEquals(\"\", StringUtils.repeat('z', -2));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\StringUtilsTest.java",
  "methodName" : "testRepeat_StringInt",
  "sourceCode" : "@Test\r\nvoid testRepeat_StringInt() {\r\n    assertNull(StringUtils.repeat(null, 2));\r\n    assertEquals(\"\", StringUtils.repeat(\"ab\", 0));\r\n    assertEquals(\"\", StringUtils.repeat(\"\", 3));\r\n    assertEquals(\"aaa\", StringUtils.repeat(\"a\", 3));\r\n    assertEquals(\"\", StringUtils.repeat(\"a\", -2));\r\n    assertEquals(\"ababab\", StringUtils.repeat(\"ab\", 3));\r\n    assertEquals(\"abcabcabc\", StringUtils.repeat(\"abc\", 3));\r\n    // bigger than pad limit\r\n    final String str = StringUtils.repeat(\"a\", 10000);\r\n    assertEquals(10000, str.length());\r\n    assertTrue(StringUtils.containsOnly(str, 'a'));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\StringUtilsTest.java",
  "methodName" : "testRepeat_StringStringInt",
  "sourceCode" : "@Test\r\nvoid testRepeat_StringStringInt() {\r\n    assertNull(StringUtils.repeat(null, null, 2));\r\n    assertNull(StringUtils.repeat(null, \"x\", 2));\r\n    assertEquals(\"\", StringUtils.repeat(\"\", null, 2));\r\n    assertEquals(\"\", StringUtils.repeat(\"ab\", \"\", 0));\r\n    assertEquals(\"\", StringUtils.repeat(\"\", \"\", 2));\r\n    assertEquals(\"xx\", StringUtils.repeat(\"\", \"x\", 3));\r\n    assertEquals(\"?, ?, ?\", StringUtils.repeat(\"?\", \", \", 3));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\StringUtilsTest.java",
  "methodName" : "testReplace_StringStringArrayStringArray",
  "sourceCode" : "/**\r\n * Test method for 'StringUtils.replaceEach(String, String[], String[])'\r\n */\r\n@Test\r\nvoid testReplace_StringStringArrayStringArray() {\r\n    //JAVADOC TESTS START\r\n    assertNull(StringUtils.replaceEach(null, new String[] { \"a\" }, new String[] { \"b\" }));\r\n    assertEquals(StringUtils.replaceEach(\"\", new String[] { \"a\" }, new String[] { \"b\" }), \"\");\r\n    assertEquals(StringUtils.replaceEach(\"aba\", null, null), \"aba\");\r\n    assertEquals(StringUtils.replaceEach(\"aba\", new String[0], null), \"aba\");\r\n    assertEquals(StringUtils.replaceEach(\"aba\", null, new String[0]), \"aba\");\r\n    assertEquals(StringUtils.replaceEach(\"aba\", new String[] { \"a\" }, null), \"aba\");\r\n    assertEquals(StringUtils.replaceEach(\"aba\", new String[] { \"a\" }, new String[] { \"\" }), \"b\");\r\n    assertEquals(StringUtils.replaceEach(\"aba\", new String[] { null }, new String[] { \"a\" }), \"aba\");\r\n    assertEquals(StringUtils.replaceEach(\"abcde\", new String[] { \"ab\", \"d\" }, new String[] { \"w\", \"t\" }), \"wcte\");\r\n    assertEquals(StringUtils.replaceEach(\"abcde\", new String[] { \"ab\", \"d\" }, new String[] { \"d\", \"t\" }), \"dcte\");\r\n    //JAVADOC TESTS END\r\n    assertEquals(\"bcc\", StringUtils.replaceEach(\"abc\", new String[] { \"a\", \"b\" }, new String[] { \"b\", \"c\" }));\r\n    assertEquals(\"q651.506bera\", StringUtils.replaceEach(\"d216.102oren\", new String[] { \"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\", \"A\", \"B\", \"C\", \"D\", \"E\", \"F\", \"G\", \"H\", \"I\", \"J\", \"K\", \"L\", \"M\", \"N\", \"O\", \"P\", \"Q\", \"R\", \"S\", \"T\", \"U\", \"V\", \"W\", \"X\", \"Y\", \"Z\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\" }, new String[] { \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\", \"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"N\", \"O\", \"P\", \"Q\", \"R\", \"S\", \"T\", \"U\", \"V\", \"W\", \"X\", \"Y\", \"Z\", \"A\", \"B\", \"C\", \"D\", \"E\", \"F\", \"G\", \"H\", \"I\", \"J\", \"K\", \"L\", \"M\", \"5\", \"6\", \"7\", \"8\", \"9\", \"1\", \"2\", \"3\", \"4\" }));\r\n    // Test null safety inside arrays - LANG-552\r\n    assertEquals(StringUtils.replaceEach(\"aba\", new String[] { \"a\" }, new String[] { null }), \"aba\");\r\n    assertEquals(StringUtils.replaceEach(\"aba\", new String[] { \"a\", \"b\" }, new String[] { \"c\", null }), \"cbc\");\r\n    assertIllegalArgumentException(() -> StringUtils.replaceEach(\"abba\", new String[] { \"a\" }, new String[] { \"b\", \"a\" }), \"StringUtils.replaceEach(String, String[], String[]) expecting IllegalArgumentException\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\StringUtilsTest.java",
  "methodName" : "testReplace_StringStringArrayStringArrayBoolean",
  "sourceCode" : "/**\r\n * Test method for 'StringUtils.replaceEachRepeatedly(String, String[], String[])'\r\n */\r\n@Test\r\nvoid testReplace_StringStringArrayStringArrayBoolean() {\r\n    //JAVADOC TESTS START\r\n    assertNull(StringUtils.replaceEachRepeatedly(null, new String[] { \"a\" }, new String[] { \"b\" }));\r\n    assertEquals(\"\", StringUtils.replaceEachRepeatedly(\"\", new String[] { \"a\" }, new String[] { \"b\" }));\r\n    assertEquals(\"aba\", StringUtils.replaceEachRepeatedly(\"aba\", null, null));\r\n    assertEquals(\"aba\", StringUtils.replaceEachRepeatedly(\"aba\", new String[0], null));\r\n    assertEquals(\"aba\", StringUtils.replaceEachRepeatedly(\"aba\", null, new String[0]));\r\n    assertEquals(\"aba\", StringUtils.replaceEachRepeatedly(\"aba\", new String[0], null));\r\n    assertEquals(\"b\", StringUtils.replaceEachRepeatedly(\"aba\", new String[] { \"a\" }, new String[] { \"\" }));\r\n    assertEquals(\"aba\", StringUtils.replaceEachRepeatedly(\"aba\", new String[] { null }, new String[] { \"a\" }));\r\n    assertEquals(\"wcte\", StringUtils.replaceEachRepeatedly(\"abcde\", new String[] { \"ab\", \"d\" }, new String[] { \"w\", \"t\" }));\r\n    assertEquals(\"tcte\", StringUtils.replaceEachRepeatedly(\"abcde\", new String[] { \"ab\", \"d\" }, new String[] { \"d\", \"t\" }));\r\n    // Test recursive replacement - LANG-1528 & LANG-1753\r\n    assertEquals(\"blaan\", StringUtils.replaceEachRepeatedly(\"blllaan\", new String[] { \"llaan\" }, new String[] { \"laan\" }));\r\n    assertEquals(\"blaan\", StringUtils.replaceEachRepeatedly(\"bllllaan\", new String[] { \"llaan\" }, new String[] { \"laan\" }));\r\n    // Test default TTL for smaller search lists. 32 characters reduced to 16, then 8, 4, 2, 1.\r\n    assertEquals(\"a\", StringUtils.replaceEachRepeatedly(\"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\", new String[] { \"aa\" }, new String[] { \"a\" }));\r\n    // Test default TTL exceeded. 33 characters reduced to 17, then 9, 5, 3, 2 (still found).\r\n    assertThrows(IllegalStateException.class, () -> StringUtils.replaceEachRepeatedly(\"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\", new String[] { \"aa\" }, new String[] { \"a\" }), \"Cannot be resolved within the default time-to-live limit\");\r\n    // Test larger TTL for larger search lists. Replace repeatedly until there are no more possible replacements.\r\n    assertEquals(\"000000000\", StringUtils.replaceEachRepeatedly(\"aA0aA0aA0\", new String[] { \"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\", \"A\", \"B\", \"C\", \"D\", \"E\", \"F\", \"G\", \"H\", \"I\", \"J\", \"K\", \"L\", \"M\", \"N\", \"O\", \"P\", \"Q\", \"R\", \"S\", \"T\", \"U\", \"V\", \"W\", \"X\", \"Y\", \"Z\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\" }, new String[] { \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\", \"A\", \"B\", \"C\", \"D\", \"E\", \"F\", \"G\", \"H\", \"I\", \"J\", \"K\", \"L\", \"M\", \"N\", \"O\", \"P\", \"Q\", \"R\", \"S\", \"T\", \"U\", \"V\", \"W\", \"X\", \"Y\", \"Z\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"0\" }));\r\n    // Test long infinite cycle: a -> b -> ... -> 9 -> 0 -> a -> b -> ...\r\n    assertThrows(IllegalStateException.class, () -> StringUtils.replaceEachRepeatedly(\"a\", new String[] { \"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\", \"A\", \"B\", \"C\", \"D\", \"E\", \"F\", \"G\", \"H\", \"I\", \"J\", \"K\", \"L\", \"M\", \"N\", \"O\", \"P\", \"Q\", \"R\", \"S\", \"T\", \"U\", \"V\", \"W\", \"X\", \"Y\", \"Z\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"0\" }, new String[] { \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\", \"A\", \"B\", \"C\", \"D\", \"E\", \"F\", \"G\", \"H\", \"I\", \"J\", \"K\", \"L\", \"M\", \"N\", \"O\", \"P\", \"Q\", \"R\", \"S\", \"T\", \"U\", \"V\", \"W\", \"X\", \"Y\", \"Z\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"0\", \"a\" }), \"Should be a circular reference\");\r\n    assertThrows(IllegalStateException.class, () -> StringUtils.replaceEachRepeatedly(\"%{key1}\", new String[] { \"%{key1}\", \"%{key2}\", \"%{key3}\" }, new String[] { \"Key1 %{key2}\", \"Key2 %{key3}\", \"Key3 %{key1}\" }), \"Should be a circular reference\");\r\n    assertThrows(IllegalStateException.class, () -> StringUtils.replaceEachRepeatedly(\"abcde\", new String[] { \"ab\", \"d\" }, new String[] { \"d\", \"ab\" }), \"Should be a circular reference\");\r\n    //JAVADOC TESTS END\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\StringUtilsTest.java",
  "methodName" : "testReplace_StringStringString",
  "sourceCode" : "@Test\r\nvoid testReplace_StringStringString() {\r\n    assertNull(StringUtils.replace(null, null, null));\r\n    assertNull(StringUtils.replace(null, null, \"any\"));\r\n    assertNull(StringUtils.replace(null, \"any\", null));\r\n    assertNull(StringUtils.replace(null, \"any\", \"any\"));\r\n    assertEquals(\"\", StringUtils.replace(\"\", null, null));\r\n    assertEquals(\"\", StringUtils.replace(\"\", null, \"any\"));\r\n    assertEquals(\"\", StringUtils.replace(\"\", \"any\", null));\r\n    assertEquals(\"\", StringUtils.replace(\"\", \"any\", \"any\"));\r\n    assertEquals(\"FOO\", StringUtils.replace(\"FOO\", \"\", \"any\"));\r\n    assertEquals(\"FOO\", StringUtils.replace(\"FOO\", null, \"any\"));\r\n    assertEquals(\"FOO\", StringUtils.replace(\"FOO\", \"F\", null));\r\n    assertEquals(\"FOO\", StringUtils.replace(\"FOO\", null, null));\r\n    assertEquals(\"\", StringUtils.replace(\"foofoofoo\", \"foo\", \"\"));\r\n    assertEquals(\"barbarbar\", StringUtils.replace(\"foofoofoo\", \"foo\", \"bar\"));\r\n    assertEquals(\"farfarfar\", StringUtils.replace(\"foofoofoo\", \"oo\", \"ar\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\StringUtilsTest.java",
  "methodName" : "testReplace_StringStringStringInt",
  "sourceCode" : "@Test\r\nvoid testReplace_StringStringStringInt() {\r\n    assertNull(StringUtils.replace(null, null, null, 2));\r\n    assertNull(StringUtils.replace(null, null, \"any\", 2));\r\n    assertNull(StringUtils.replace(null, \"any\", null, 2));\r\n    assertNull(StringUtils.replace(null, \"any\", \"any\", 2));\r\n    assertEquals(\"\", StringUtils.replace(\"\", null, null, 2));\r\n    assertEquals(\"\", StringUtils.replace(\"\", null, \"any\", 2));\r\n    assertEquals(\"\", StringUtils.replace(\"\", \"any\", null, 2));\r\n    assertEquals(\"\", StringUtils.replace(\"\", \"any\", \"any\", 2));\r\n    final String str = new String(new char[] { 'o', 'o', 'f', 'o', 'o' });\r\n    assertSame(str, StringUtils.replace(str, \"x\", \"\", -1));\r\n    assertEquals(\"f\", StringUtils.replace(\"oofoo\", \"o\", \"\", -1));\r\n    assertEquals(\"oofoo\", StringUtils.replace(\"oofoo\", \"o\", \"\", 0));\r\n    assertEquals(\"ofoo\", StringUtils.replace(\"oofoo\", \"o\", \"\", 1));\r\n    assertEquals(\"foo\", StringUtils.replace(\"oofoo\", \"o\", \"\", 2));\r\n    assertEquals(\"fo\", StringUtils.replace(\"oofoo\", \"o\", \"\", 3));\r\n    assertEquals(\"f\", StringUtils.replace(\"oofoo\", \"o\", \"\", 4));\r\n    assertEquals(\"f\", StringUtils.replace(\"oofoo\", \"o\", \"\", -5));\r\n    assertEquals(\"f\", StringUtils.replace(\"oofoo\", \"o\", \"\", 1000));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\StringUtilsTest.java",
  "methodName" : "testReplaceAll_StringStringString",
  "sourceCode" : "@Test\r\nvoid testReplaceAll_StringStringString() {\r\n    assertNull(StringUtils.replaceAll(null, \"\", \"\"));\r\n    assertEquals(\"any\", StringUtils.replaceAll(\"any\", null, \"\"));\r\n    assertEquals(\"any\", StringUtils.replaceAll(\"any\", \"\", null));\r\n    assertEquals(\"zzz\", StringUtils.replaceAll(\"\", \"\", \"zzz\"));\r\n    assertEquals(\"zzz\", StringUtils.replaceAll(\"\", \".*\", \"zzz\"));\r\n    assertEquals(\"\", StringUtils.replaceAll(\"\", \".+\", \"zzz\"));\r\n    assertEquals(\"ZZaZZbZZcZZ\", StringUtils.replaceAll(\"abc\", \"\", \"ZZ\"));\r\n    assertEquals(\"z\\nz\", StringUtils.replaceAll(\"<__>\\n<__>\", \"<.*>\", \"z\"));\r\n    assertEquals(\"z\", StringUtils.replaceAll(\"<__>\\n<__>\", \"(?s)<.*>\", \"z\"));\r\n    assertEquals(\"ABC___123\", StringUtils.replaceAll(\"ABCabc123\", \"[a-z]\", \"_\"));\r\n    assertEquals(\"ABC_123\", StringUtils.replaceAll(\"ABCabc123\", \"[^A-Z0-9]+\", \"_\"));\r\n    assertEquals(\"ABC123\", StringUtils.replaceAll(\"ABCabc123\", \"[^A-Z0-9]+\", \"\"));\r\n    assertEquals(\"Lorem_ipsum_dolor_sit\", StringUtils.replaceAll(\"Lorem ipsum  dolor   sit\", \"( +)([a-z]+)\", \"_$2\"));\r\n    assertThrows(PatternSyntaxException.class, () -> StringUtils.replaceAll(\"any\", \"{badRegexSyntax}\", \"\"), \"StringUtils.replaceAll expecting PatternSyntaxException\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\StringUtilsTest.java",
  "methodName" : "testReplaceChars_StringCharChar",
  "sourceCode" : "@Test\r\nvoid testReplaceChars_StringCharChar() {\r\n    assertNull(StringUtils.replaceChars(null, 'b', 'z'));\r\n    assertEquals(\"\", StringUtils.replaceChars(\"\", 'b', 'z'));\r\n    assertEquals(\"azcza\", StringUtils.replaceChars(\"abcba\", 'b', 'z'));\r\n    assertEquals(\"abcba\", StringUtils.replaceChars(\"abcba\", 'x', 'z'));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\StringUtilsTest.java",
  "methodName" : "testReplaceChars_StringStringString",
  "sourceCode" : "@Test\r\nvoid testReplaceChars_StringStringString() {\r\n    assertNull(StringUtils.replaceChars(null, null, null));\r\n    assertNull(StringUtils.replaceChars(null, \"\", null));\r\n    assertNull(StringUtils.replaceChars(null, \"a\", null));\r\n    assertNull(StringUtils.replaceChars(null, null, \"\"));\r\n    assertNull(StringUtils.replaceChars(null, null, \"x\"));\r\n    assertEquals(\"\", StringUtils.replaceChars(\"\", null, null));\r\n    assertEquals(\"\", StringUtils.replaceChars(\"\", \"\", null));\r\n    assertEquals(\"\", StringUtils.replaceChars(\"\", \"a\", null));\r\n    assertEquals(\"\", StringUtils.replaceChars(\"\", null, \"\"));\r\n    assertEquals(\"\", StringUtils.replaceChars(\"\", null, \"x\"));\r\n    assertEquals(\"abc\", StringUtils.replaceChars(\"abc\", null, null));\r\n    assertEquals(\"abc\", StringUtils.replaceChars(\"abc\", null, \"\"));\r\n    assertEquals(\"abc\", StringUtils.replaceChars(\"abc\", null, \"x\"));\r\n    assertEquals(\"abc\", StringUtils.replaceChars(\"abc\", \"\", null));\r\n    assertEquals(\"abc\", StringUtils.replaceChars(\"abc\", \"\", \"\"));\r\n    assertEquals(\"abc\", StringUtils.replaceChars(\"abc\", \"\", \"x\"));\r\n    assertEquals(\"ac\", StringUtils.replaceChars(\"abc\", \"b\", null));\r\n    assertEquals(\"ac\", StringUtils.replaceChars(\"abc\", \"b\", \"\"));\r\n    assertEquals(\"axc\", StringUtils.replaceChars(\"abc\", \"b\", \"x\"));\r\n    assertEquals(\"ayzya\", StringUtils.replaceChars(\"abcba\", \"bc\", \"yz\"));\r\n    assertEquals(\"ayya\", StringUtils.replaceChars(\"abcba\", \"bc\", \"y\"));\r\n    assertEquals(\"ayzya\", StringUtils.replaceChars(\"abcba\", \"bc\", \"yzx\"));\r\n    assertEquals(\"abcba\", StringUtils.replaceChars(\"abcba\", \"z\", \"w\"));\r\n    assertSame(\"abcba\", StringUtils.replaceChars(\"abcba\", \"z\", \"w\"));\r\n    // Javadoc examples:\r\n    assertEquals(\"jelly\", StringUtils.replaceChars(\"hello\", \"ho\", \"jy\"));\r\n    assertEquals(\"ayzya\", StringUtils.replaceChars(\"abcba\", \"bc\", \"yz\"));\r\n    assertEquals(\"ayya\", StringUtils.replaceChars(\"abcba\", \"bc\", \"y\"));\r\n    assertEquals(\"ayzya\", StringUtils.replaceChars(\"abcba\", \"bc\", \"yzx\"));\r\n    // From https://issues.apache.org/bugzilla/show_bug.cgi?id=25454\r\n    assertEquals(\"bcc\", StringUtils.replaceChars(\"abc\", \"ab\", \"bc\"));\r\n    assertEquals(\"q651.506bera\", StringUtils.replaceChars(\"d216.102oren\", \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ123456789\", \"nopqrstuvwxyzabcdefghijklmNOPQRSTUVWXYZABCDEFGHIJKLM567891234\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\StringUtilsTest.java",
  "methodName" : "testReplaceFirst_StringStringString",
  "sourceCode" : "@Test\r\nvoid testReplaceFirst_StringStringString() {\r\n    assertNull(StringUtils.replaceFirst(null, \"\", \"\"));\r\n    assertEquals(\"any\", StringUtils.replaceFirst(\"any\", null, \"\"));\r\n    assertEquals(\"any\", StringUtils.replaceFirst(\"any\", \"\", null));\r\n    assertEquals(\"zzz\", StringUtils.replaceFirst(\"\", \"\", \"zzz\"));\r\n    assertEquals(\"zzz\", StringUtils.replaceFirst(\"\", \".*\", \"zzz\"));\r\n    assertEquals(\"\", StringUtils.replaceFirst(\"\", \".+\", \"zzz\"));\r\n    assertEquals(\"ZZabc\", StringUtils.replaceFirst(\"abc\", \"\", \"ZZ\"));\r\n    assertEquals(\"z\\n<__>\", StringUtils.replaceFirst(\"<__>\\n<__>\", \"<.*>\", \"z\"));\r\n    assertEquals(\"z\", StringUtils.replaceFirst(\"<__>\\n<__>\", \"(?s)<.*>\", \"z\"));\r\n    assertEquals(\"ABC_bc123\", StringUtils.replaceFirst(\"ABCabc123\", \"[a-z]\", \"_\"));\r\n    assertEquals(\"ABC_123abc\", StringUtils.replaceFirst(\"ABCabc123abc\", \"[^A-Z0-9]+\", \"_\"));\r\n    assertEquals(\"ABC123abc\", StringUtils.replaceFirst(\"ABCabc123abc\", \"[^A-Z0-9]+\", \"\"));\r\n    assertEquals(\"Lorem_ipsum  dolor   sit\", StringUtils.replaceFirst(\"Lorem ipsum  dolor   sit\", \"( +)([a-z]+)\", \"_$2\"));\r\n    assertThrows(PatternSyntaxException.class, () -> StringUtils.replaceFirst(\"any\", \"{badRegexSyntax}\", \"\"), \"StringUtils.replaceFirst expecting PatternSyntaxException\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\StringUtilsTest.java",
  "methodName" : "testReplaceIgnoreCase_StringStringString",
  "sourceCode" : "@Test\r\nvoid testReplaceIgnoreCase_StringStringString() {\r\n    assertNull(StringUtils.replaceIgnoreCase(null, null, null));\r\n    assertNull(StringUtils.replaceIgnoreCase(null, null, \"any\"));\r\n    assertNull(StringUtils.replaceIgnoreCase(null, \"any\", null));\r\n    assertNull(StringUtils.replaceIgnoreCase(null, \"any\", \"any\"));\r\n    assertEquals(\"\", StringUtils.replaceIgnoreCase(\"\", null, null));\r\n    assertEquals(\"\", StringUtils.replaceIgnoreCase(\"\", null, \"any\"));\r\n    assertEquals(\"\", StringUtils.replaceIgnoreCase(\"\", \"any\", null));\r\n    assertEquals(\"\", StringUtils.replaceIgnoreCase(\"\", \"any\", \"any\"));\r\n    assertEquals(\"FOO\", StringUtils.replaceIgnoreCase(\"FOO\", \"\", \"any\"));\r\n    assertEquals(\"FOO\", StringUtils.replaceIgnoreCase(\"FOO\", null, \"any\"));\r\n    assertEquals(\"FOO\", StringUtils.replaceIgnoreCase(\"FOO\", \"F\", null));\r\n    assertEquals(\"FOO\", StringUtils.replaceIgnoreCase(\"FOO\", null, null));\r\n    assertEquals(\"\", StringUtils.replaceIgnoreCase(\"foofoofoo\", \"foo\", \"\"));\r\n    assertEquals(\"barbarbar\", StringUtils.replaceIgnoreCase(\"foofoofoo\", \"foo\", \"bar\"));\r\n    assertEquals(\"farfarfar\", StringUtils.replaceIgnoreCase(\"foofoofoo\", \"oo\", \"ar\"));\r\n    // IgnoreCase\r\n    assertEquals(\"\", StringUtils.replaceIgnoreCase(\"foofoofoo\", \"FOO\", \"\"));\r\n    assertEquals(\"barbarbar\", StringUtils.replaceIgnoreCase(\"fooFOOfoo\", \"foo\", \"bar\"));\r\n    assertEquals(\"farfarfar\", StringUtils.replaceIgnoreCase(\"foofOOfoo\", \"OO\", \"ar\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\StringUtilsTest.java",
  "methodName" : "testReplaceIgnoreCase_StringStringStringInt",
  "sourceCode" : "@Test\r\nvoid testReplaceIgnoreCase_StringStringStringInt() {\r\n    assertNull(StringUtils.replaceIgnoreCase(null, null, null, 2));\r\n    assertNull(StringUtils.replaceIgnoreCase(null, null, \"any\", 2));\r\n    assertNull(StringUtils.replaceIgnoreCase(null, \"any\", null, 2));\r\n    assertNull(StringUtils.replaceIgnoreCase(null, \"any\", \"any\", 2));\r\n    assertEquals(\"\", StringUtils.replaceIgnoreCase(\"\", null, null, 2));\r\n    assertEquals(\"\", StringUtils.replaceIgnoreCase(\"\", null, \"any\", 2));\r\n    assertEquals(\"\", StringUtils.replaceIgnoreCase(\"\", \"any\", null, 2));\r\n    assertEquals(\"\", StringUtils.replaceIgnoreCase(\"\", \"any\", \"any\", 2));\r\n    final String str = new String(new char[] { 'o', 'o', 'f', 'o', 'o' });\r\n    assertSame(str, StringUtils.replaceIgnoreCase(str, \"x\", \"\", -1));\r\n    assertEquals(\"f\", StringUtils.replaceIgnoreCase(\"oofoo\", \"o\", \"\", -1));\r\n    assertEquals(\"oofoo\", StringUtils.replaceIgnoreCase(\"oofoo\", \"o\", \"\", 0));\r\n    assertEquals(\"ofoo\", StringUtils.replaceIgnoreCase(\"oofoo\", \"o\", \"\", 1));\r\n    assertEquals(\"foo\", StringUtils.replaceIgnoreCase(\"oofoo\", \"o\", \"\", 2));\r\n    assertEquals(\"fo\", StringUtils.replaceIgnoreCase(\"oofoo\", \"o\", \"\", 3));\r\n    assertEquals(\"f\", StringUtils.replaceIgnoreCase(\"oofoo\", \"o\", \"\", 4));\r\n    assertEquals(\"f\", StringUtils.replaceIgnoreCase(\"oofoo\", \"o\", \"\", -5));\r\n    assertEquals(\"f\", StringUtils.replaceIgnoreCase(\"oofoo\", \"o\", \"\", 1000));\r\n    // IgnoreCase\r\n    assertEquals(\"f\", StringUtils.replaceIgnoreCase(\"oofoo\", \"O\", \"\", -1));\r\n    assertEquals(\"oofoo\", StringUtils.replaceIgnoreCase(\"oofoo\", \"O\", \"\", 0));\r\n    assertEquals(\"ofoo\", StringUtils.replaceIgnoreCase(\"oofoo\", \"O\", \"\", 1));\r\n    assertEquals(\"foo\", StringUtils.replaceIgnoreCase(\"oofoo\", \"O\", \"\", 2));\r\n    assertEquals(\"fo\", StringUtils.replaceIgnoreCase(\"oofoo\", \"O\", \"\", 3));\r\n    assertEquals(\"f\", StringUtils.replaceIgnoreCase(\"oofoo\", \"O\", \"\", 4));\r\n    assertEquals(\"f\", StringUtils.replaceIgnoreCase(\"oofoo\", \"O\", \"\", -5));\r\n    assertEquals(\"f\", StringUtils.replaceIgnoreCase(\"oofoo\", \"O\", \"\", 1000));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\StringUtilsTest.java",
  "methodName" : "testReplaceOnce_StringStringString",
  "sourceCode" : "@Test\r\nvoid testReplaceOnce_StringStringString() {\r\n    assertNull(StringUtils.replaceOnce(null, null, null));\r\n    assertNull(StringUtils.replaceOnce(null, null, \"any\"));\r\n    assertNull(StringUtils.replaceOnce(null, \"any\", null));\r\n    assertNull(StringUtils.replaceOnce(null, \"any\", \"any\"));\r\n    assertEquals(\"\", StringUtils.replaceOnce(\"\", null, null));\r\n    assertEquals(\"\", StringUtils.replaceOnce(\"\", null, \"any\"));\r\n    assertEquals(\"\", StringUtils.replaceOnce(\"\", \"any\", null));\r\n    assertEquals(\"\", StringUtils.replaceOnce(\"\", \"any\", \"any\"));\r\n    assertEquals(\"FOO\", StringUtils.replaceOnce(\"FOO\", \"\", \"any\"));\r\n    assertEquals(\"FOO\", StringUtils.replaceOnce(\"FOO\", null, \"any\"));\r\n    assertEquals(\"FOO\", StringUtils.replaceOnce(\"FOO\", \"F\", null));\r\n    assertEquals(\"FOO\", StringUtils.replaceOnce(\"FOO\", null, null));\r\n    assertEquals(\"foofoo\", StringUtils.replaceOnce(\"foofoofoo\", \"foo\", \"\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\StringUtilsTest.java",
  "methodName" : "testReplaceOnceIgnoreCase_StringStringString",
  "sourceCode" : "@Test\r\nvoid testReplaceOnceIgnoreCase_StringStringString() {\r\n    assertNull(StringUtils.replaceOnceIgnoreCase(null, null, null));\r\n    assertNull(StringUtils.replaceOnceIgnoreCase(null, null, \"any\"));\r\n    assertNull(StringUtils.replaceOnceIgnoreCase(null, \"any\", null));\r\n    assertNull(StringUtils.replaceOnceIgnoreCase(null, \"any\", \"any\"));\r\n    assertEquals(\"\", StringUtils.replaceOnceIgnoreCase(\"\", null, null));\r\n    assertEquals(\"\", StringUtils.replaceOnceIgnoreCase(\"\", null, \"any\"));\r\n    assertEquals(\"\", StringUtils.replaceOnceIgnoreCase(\"\", \"any\", null));\r\n    assertEquals(\"\", StringUtils.replaceOnceIgnoreCase(\"\", \"any\", \"any\"));\r\n    assertEquals(\"FOO\", StringUtils.replaceOnceIgnoreCase(\"FOO\", \"\", \"any\"));\r\n    assertEquals(\"FOO\", StringUtils.replaceOnceIgnoreCase(\"FOO\", null, \"any\"));\r\n    assertEquals(\"FOO\", StringUtils.replaceOnceIgnoreCase(\"FOO\", \"F\", null));\r\n    assertEquals(\"FOO\", StringUtils.replaceOnceIgnoreCase(\"FOO\", null, null));\r\n    assertEquals(\"foofoo\", StringUtils.replaceOnceIgnoreCase(\"foofoofoo\", \"foo\", \"\"));\r\n    // Ignore Case\r\n    assertEquals(\"Foofoo\", StringUtils.replaceOnceIgnoreCase(\"FoOFoofoo\", \"foo\", \"\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\StringUtilsTest.java",
  "methodName" : "testReplacePattern_StringStringString",
  "sourceCode" : "@Test\r\nvoid testReplacePattern_StringStringString() {\r\n    assertNull(StringUtils.replacePattern(null, \"\", \"\"));\r\n    assertEquals(\"any\", StringUtils.replacePattern(\"any\", null, \"\"));\r\n    assertEquals(\"any\", StringUtils.replacePattern(\"any\", \"\", null));\r\n    assertEquals(\"zzz\", StringUtils.replacePattern(\"\", \"\", \"zzz\"));\r\n    assertEquals(\"zzz\", StringUtils.replacePattern(\"\", \".*\", \"zzz\"));\r\n    assertEquals(\"\", StringUtils.replacePattern(\"\", \".+\", \"zzz\"));\r\n    assertEquals(\"z\", StringUtils.replacePattern(\"<__>\\n<__>\", \"<.*>\", \"z\"));\r\n    assertEquals(\"z\", StringUtils.replacePattern(\"<__>\\\\n<__>\", \"<.*>\", \"z\"));\r\n    assertEquals(\"X\", StringUtils.replacePattern(\"<A>\\nxy\\n</A>\", \"<A>.*</A>\", \"X\"));\r\n    assertEquals(\"ABC___123\", StringUtils.replacePattern(\"ABCabc123\", \"[a-z]\", \"_\"));\r\n    assertEquals(\"ABC_123\", StringUtils.replacePattern(\"ABCabc123\", \"[^A-Z0-9]+\", \"_\"));\r\n    assertEquals(\"ABC123\", StringUtils.replacePattern(\"ABCabc123\", \"[^A-Z0-9]+\", \"\"));\r\n    assertEquals(\"Lorem_ipsum_dolor_sit\", StringUtils.replacePattern(\"Lorem ipsum  dolor   sit\", \"( +)([a-z]+)\", \"_$2\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\StringUtilsTest.java",
  "methodName" : "testReverse_String",
  "sourceCode" : "@Test\r\nvoid testReverse_String() {\r\n    assertNull(StringUtils.reverse(null));\r\n    assertEquals(\"\", StringUtils.reverse(\"\"));\r\n    assertEquals(\"sdrawkcab\", StringUtils.reverse(\"backwards\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\StringUtilsTest.java",
  "methodName" : "testReverseDelimited_StringChar",
  "sourceCode" : "@Test\r\nvoid testReverseDelimited_StringChar() {\r\n    assertNull(StringUtils.reverseDelimited(null, '.'));\r\n    assertEquals(\"\", StringUtils.reverseDelimited(\"\", '.'));\r\n    assertEquals(\"c.b.a\", StringUtils.reverseDelimited(\"a.b.c\", '.'));\r\n    assertEquals(\"a b c\", StringUtils.reverseDelimited(\"a b c\", '.'));\r\n    assertEquals(\"\", StringUtils.reverseDelimited(\"\", '.'));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\StringUtilsTest.java",
  "methodName" : "testRightPad_StringInt",
  "sourceCode" : "@Test\r\nvoid testRightPad_StringInt() {\r\n    assertNull(StringUtils.rightPad(null, 5));\r\n    assertEquals(\"     \", StringUtils.rightPad(\"\", 5));\r\n    assertEquals(\"abc  \", StringUtils.rightPad(\"abc\", 5));\r\n    assertEquals(\"abc\", StringUtils.rightPad(\"abc\", 2));\r\n    assertEquals(\"abc\", StringUtils.rightPad(\"abc\", -1));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\StringUtilsTest.java",
  "methodName" : "testRightPad_StringIntChar",
  "sourceCode" : "@Test\r\nvoid testRightPad_StringIntChar() {\r\n    assertNull(StringUtils.rightPad(null, 5, ' '));\r\n    assertEquals(\"     \", StringUtils.rightPad(\"\", 5, ' '));\r\n    assertEquals(\"abc  \", StringUtils.rightPad(\"abc\", 5, ' '));\r\n    assertEquals(\"abc\", StringUtils.rightPad(\"abc\", 2, ' '));\r\n    assertEquals(\"abc\", StringUtils.rightPad(\"abc\", -1, ' '));\r\n    assertEquals(\"abcxx\", StringUtils.rightPad(\"abc\", 5, 'x'));\r\n    // bigger than pad length\r\n    final String str = StringUtils.rightPad(\"aaa\", 10000, 'a');\r\n    assertEquals(10000, str.length());\r\n    assertTrue(StringUtils.containsOnly(str, 'a'));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\StringUtilsTest.java",
  "methodName" : "testRightPad_StringIntString",
  "sourceCode" : "@Test\r\nvoid testRightPad_StringIntString() {\r\n    assertNull(StringUtils.rightPad(null, 5, \"-+\"));\r\n    assertEquals(\"     \", StringUtils.rightPad(\"\", 5, \" \"));\r\n    assertNull(StringUtils.rightPad(null, 8, null));\r\n    assertEquals(\"abc-+-+\", StringUtils.rightPad(\"abc\", 7, \"-+\"));\r\n    assertEquals(\"abc-+~\", StringUtils.rightPad(\"abc\", 6, \"-+~\"));\r\n    assertEquals(\"abc-+\", StringUtils.rightPad(\"abc\", 5, \"-+~\"));\r\n    assertEquals(\"abc\", StringUtils.rightPad(\"abc\", 2, \" \"));\r\n    assertEquals(\"abc\", StringUtils.rightPad(\"abc\", -1, \" \"));\r\n    assertEquals(\"abc  \", StringUtils.rightPad(\"abc\", 5, null));\r\n    assertEquals(\"abc  \", StringUtils.rightPad(\"abc\", 5, \"\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\StringUtilsTest.java",
  "methodName" : "testRotate_StringInt",
  "sourceCode" : "@Test\r\nvoid testRotate_StringInt() {\r\n    assertNull(StringUtils.rotate(null, 1));\r\n    assertEquals(\"\", StringUtils.rotate(\"\", 1));\r\n    assertEquals(\"abcdefg\", StringUtils.rotate(\"abcdefg\", 0));\r\n    assertEquals(\"fgabcde\", StringUtils.rotate(\"abcdefg\", 2));\r\n    assertEquals(\"cdefgab\", StringUtils.rotate(\"abcdefg\", -2));\r\n    assertEquals(\"abcdefg\", StringUtils.rotate(\"abcdefg\", 7));\r\n    assertEquals(\"abcdefg\", StringUtils.rotate(\"abcdefg\", -7));\r\n    assertEquals(\"fgabcde\", StringUtils.rotate(\"abcdefg\", 9));\r\n    assertEquals(\"cdefgab\", StringUtils.rotate(\"abcdefg\", -9));\r\n    assertEquals(\"efgabcd\", StringUtils.rotate(\"abcdefg\", 17));\r\n    assertEquals(\"defgabc\", StringUtils.rotate(\"abcdefg\", -17));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\StringUtilsTest.java",
  "methodName" : "testSplit_String",
  "sourceCode" : "@Test\r\nvoid testSplit_String() {\r\n    assertNull(StringUtils.split(null));\r\n    assertEquals(0, StringUtils.split(\"\").length);\r\n    String str = \"a b  .c\";\r\n    String[] res = StringUtils.split(str);\r\n    assertEquals(3, res.length);\r\n    assertEquals(\"a\", res[0]);\r\n    assertEquals(\"b\", res[1]);\r\n    assertEquals(\".c\", res[2]);\r\n    str = \" a \";\r\n    res = StringUtils.split(str);\r\n    assertEquals(1, res.length);\r\n    assertEquals(\"a\", res[0]);\r\n    str = \"a\" + WHITESPACE + \"b\" + NON_WHITESPACE + \"c\";\r\n    res = StringUtils.split(str);\r\n    assertEquals(2, res.length);\r\n    assertEquals(\"a\", res[0]);\r\n    assertEquals(\"b\" + NON_WHITESPACE + \"c\", res[1]);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\StringUtilsTest.java",
  "methodName" : "testSplit_StringChar",
  "sourceCode" : "@Test\r\nvoid testSplit_StringChar() {\r\n    assertNull(StringUtils.split(null, '.'));\r\n    assertEquals(0, StringUtils.split(\"\", '.').length);\r\n    String str = \"a.b.. c\";\r\n    String[] res = StringUtils.split(str, '.');\r\n    assertEquals(3, res.length);\r\n    assertEquals(\"a\", res[0]);\r\n    assertEquals(\"b\", res[1]);\r\n    assertEquals(\" c\", res[2]);\r\n    str = \".a.\";\r\n    res = StringUtils.split(str, '.');\r\n    assertEquals(1, res.length);\r\n    assertEquals(\"a\", res[0]);\r\n    str = \"a b c\";\r\n    res = StringUtils.split(str, ' ');\r\n    assertEquals(3, res.length);\r\n    assertEquals(\"a\", res[0]);\r\n    assertEquals(\"b\", res[1]);\r\n    assertEquals(\"c\", res[2]);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\StringUtilsTest.java",
  "methodName" : "testSplit_StringString_StringStringInt",
  "sourceCode" : "@Test\r\nvoid testSplit_StringString_StringStringInt() {\r\n    assertNull(StringUtils.split(null, \".\"));\r\n    assertNull(StringUtils.split(null, \".\", 3));\r\n    assertEquals(0, StringUtils.split(\"\", \".\").length);\r\n    assertEquals(0, StringUtils.split(\"\", \".\", 3).length);\r\n    innerTestSplit('.', \".\", ' ');\r\n    innerTestSplit('.', \".\", ',');\r\n    innerTestSplit('.', \".,\", 'x');\r\n    for (int i = 0; i < WHITESPACE.length(); i++) {\r\n        for (int j = 0; j < NON_WHITESPACE.length(); j++) {\r\n            innerTestSplit(WHITESPACE.charAt(i), null, NON_WHITESPACE.charAt(j));\r\n            innerTestSplit(WHITESPACE.charAt(i), String.valueOf(WHITESPACE.charAt(i)), NON_WHITESPACE.charAt(j));\r\n        }\r\n    }\r\n    String[] results;\r\n    final String[] expectedResults = { \"ab\", \"de fg\" };\r\n    results = StringUtils.split(\"ab   de fg\", null, 2);\r\n    assertEquals(expectedResults.length, results.length);\r\n    for (int i = 0; i < expectedResults.length; i++) {\r\n        assertEquals(expectedResults[i], results[i]);\r\n    }\r\n    final String[] expectedResults2 = { \"ab\", \"cd:ef\" };\r\n    results = StringUtils.split(\"ab:cd:ef\", \":\", 2);\r\n    assertEquals(expectedResults2.length, results.length);\r\n    for (int i = 0; i < expectedResults2.length; i++) {\r\n        assertEquals(expectedResults2[i], results[i]);\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\StringUtilsTest.java",
  "methodName" : "testSplitByCharacterType",
  "sourceCode" : "@Test\r\nvoid testSplitByCharacterType() {\r\n    assertNull(StringUtils.splitByCharacterType(null));\r\n    assertEquals(0, StringUtils.splitByCharacterType(\"\").length);\r\n    assertTrue(Objects.deepEquals(new String[] { \"ab\", \" \", \"de\", \" \", \"fg\" }, StringUtils.splitByCharacterType(\"ab de fg\")));\r\n    assertTrue(Objects.deepEquals(new String[] { \"ab\", \"   \", \"de\", \" \", \"fg\" }, StringUtils.splitByCharacterType(\"ab   de fg\")));\r\n    assertTrue(Objects.deepEquals(new String[] { \"ab\", \":\", \"cd\", \":\", \"ef\" }, StringUtils.splitByCharacterType(\"ab:cd:ef\")));\r\n    assertTrue(Objects.deepEquals(new String[] { \"number\", \"5\" }, StringUtils.splitByCharacterType(\"number5\")));\r\n    assertTrue(Objects.deepEquals(new String[] { \"foo\", \"B\", \"ar\" }, StringUtils.splitByCharacterType(\"fooBar\")));\r\n    assertTrue(Objects.deepEquals(new String[] { \"foo\", \"200\", \"B\", \"ar\" }, StringUtils.splitByCharacterType(\"foo200Bar\")));\r\n    assertTrue(Objects.deepEquals(new String[] { \"ASFR\", \"ules\" }, StringUtils.splitByCharacterType(\"ASFRules\")));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\StringUtilsTest.java",
  "methodName" : "testSplitByCharacterTypeCamelCase",
  "sourceCode" : "@Test\r\nvoid testSplitByCharacterTypeCamelCase() {\r\n    assertNull(StringUtils.splitByCharacterTypeCamelCase(null));\r\n    assertEquals(0, StringUtils.splitByCharacterTypeCamelCase(\"\").length);\r\n    assertTrue(Objects.deepEquals(new String[] { \"ab\", \" \", \"de\", \" \", \"fg\" }, StringUtils.splitByCharacterTypeCamelCase(\"ab de fg\")));\r\n    assertTrue(Objects.deepEquals(new String[] { \"ab\", \"   \", \"de\", \" \", \"fg\" }, StringUtils.splitByCharacterTypeCamelCase(\"ab   de fg\")));\r\n    assertTrue(Objects.deepEquals(new String[] { \"ab\", \":\", \"cd\", \":\", \"ef\" }, StringUtils.splitByCharacterTypeCamelCase(\"ab:cd:ef\")));\r\n    assertTrue(Objects.deepEquals(new String[] { \"number\", \"5\" }, StringUtils.splitByCharacterTypeCamelCase(\"number5\")));\r\n    assertTrue(Objects.deepEquals(new String[] { \"foo\", \"Bar\" }, StringUtils.splitByCharacterTypeCamelCase(\"fooBar\")));\r\n    assertTrue(Objects.deepEquals(new String[] { \"foo\", \"200\", \"Bar\" }, StringUtils.splitByCharacterTypeCamelCase(\"foo200Bar\")));\r\n    assertTrue(Objects.deepEquals(new String[] { \"ASF\", \"Rules\" }, StringUtils.splitByCharacterTypeCamelCase(\"ASFRules\")));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\StringUtilsTest.java",
  "methodName" : "testSplitByWholeSeparatorPreserveAllTokens_StringString",
  "sourceCode" : "@Test\r\nvoid testSplitByWholeSeparatorPreserveAllTokens_StringString() {\r\n    assertArrayEquals(null, StringUtils.splitByWholeSeparatorPreserveAllTokens(null, \".\"));\r\n    assertEquals(0, StringUtils.splitByWholeSeparatorPreserveAllTokens(\"\", \".\").length);\r\n    // test whitespace\r\n    String input = \"ab   de fg\";\r\n    String[] expected = { \"ab\", \"\", \"\", \"de\", \"fg\" };\r\n    String[] actual = StringUtils.splitByWholeSeparatorPreserveAllTokens(input, null);\r\n    assertEquals(expected.length, actual.length);\r\n    for (int i = 0; i < actual.length; i += 1) {\r\n        assertEquals(expected[i], actual[i]);\r\n    }\r\n    // test delimiter singlechar\r\n    input = \"1::2:::3::::4\";\r\n    expected = new String[] { \"1\", \"\", \"2\", \"\", \"\", \"3\", \"\", \"\", \"\", \"4\" };\r\n    actual = StringUtils.splitByWholeSeparatorPreserveAllTokens(input, \":\");\r\n    assertEquals(expected.length, actual.length);\r\n    for (int i = 0; i < actual.length; i += 1) {\r\n        assertEquals(expected[i], actual[i]);\r\n    }\r\n    // test delimiter multichar\r\n    input = \"1::2:::3::::4\";\r\n    expected = new String[] { \"1\", \"2\", \":3\", \"\", \"4\" };\r\n    actual = StringUtils.splitByWholeSeparatorPreserveAllTokens(input, \"::\");\r\n    assertEquals(expected.length, actual.length);\r\n    for (int i = 0; i < actual.length; i += 1) {\r\n        assertEquals(expected[i], actual[i]);\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\StringUtilsTest.java",
  "methodName" : "testSplitByWholeSeparatorPreserveAllTokens_StringStringInt",
  "sourceCode" : "@Test\r\nvoid testSplitByWholeSeparatorPreserveAllTokens_StringStringInt() {\r\n    assertArrayEquals(null, StringUtils.splitByWholeSeparatorPreserveAllTokens(null, \".\", -1));\r\n    assertEquals(0, StringUtils.splitByWholeSeparatorPreserveAllTokens(\"\", \".\", -1).length);\r\n    // test whitespace\r\n    String input = \"ab   de fg\";\r\n    String[] expected = { \"ab\", \"\", \"\", \"de\", \"fg\" };\r\n    String[] actual = StringUtils.splitByWholeSeparatorPreserveAllTokens(input, null, -1);\r\n    assertEquals(expected.length, actual.length);\r\n    for (int i = 0; i < actual.length; i += 1) {\r\n        assertEquals(expected[i], actual[i]);\r\n    }\r\n    // test delimiter singlechar\r\n    input = \"1::2:::3::::4\";\r\n    expected = new String[] { \"1\", \"\", \"2\", \"\", \"\", \"3\", \"\", \"\", \"\", \"4\" };\r\n    actual = StringUtils.splitByWholeSeparatorPreserveAllTokens(input, \":\", -1);\r\n    assertEquals(expected.length, actual.length);\r\n    for (int i = 0; i < actual.length; i += 1) {\r\n        assertEquals(expected[i], actual[i]);\r\n    }\r\n    // test delimiter multichar\r\n    input = \"1::2:::3::::4\";\r\n    expected = new String[] { \"1\", \"2\", \":3\", \"\", \"4\" };\r\n    actual = StringUtils.splitByWholeSeparatorPreserveAllTokens(input, \"::\", -1);\r\n    assertEquals(expected.length, actual.length);\r\n    for (int i = 0; i < actual.length; i += 1) {\r\n        assertEquals(expected[i], actual[i]);\r\n    }\r\n    // test delimiter char with max\r\n    input = \"1::2::3:4\";\r\n    expected = new String[] { \"1\", \"\", \"2\", \":3:4\" };\r\n    actual = StringUtils.splitByWholeSeparatorPreserveAllTokens(input, \":\", 4);\r\n    assertEquals(expected.length, actual.length);\r\n    for (int i = 0; i < actual.length; i += 1) {\r\n        assertEquals(expected[i], actual[i]);\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\StringUtilsTest.java",
  "methodName" : "testSplitByWholeString_StringStringBoolean",
  "sourceCode" : "@Test\r\nvoid testSplitByWholeString_StringStringBoolean() {\r\n    assertArrayEquals(null, StringUtils.splitByWholeSeparator(null, \".\"));\r\n    assertEquals(0, StringUtils.splitByWholeSeparator(\"\", \".\").length);\r\n    final String stringToSplitOnNulls = \"ab   de fg\";\r\n    final String[] splitOnNullExpectedResults = { \"ab\", \"de\", \"fg\" };\r\n    final String[] splitOnNullResults = StringUtils.splitByWholeSeparator(stringToSplitOnNulls, null);\r\n    assertEquals(splitOnNullExpectedResults.length, splitOnNullResults.length);\r\n    for (int i = 0; i < splitOnNullExpectedResults.length; i += 1) {\r\n        assertEquals(splitOnNullExpectedResults[i], splitOnNullResults[i]);\r\n    }\r\n    final String stringToSplitOnCharactersAndString = \"abstemiouslyaeiouyabstemiously\";\r\n    final String[] splitOnStringExpectedResults = { \"abstemiously\", \"abstemiously\" };\r\n    final String[] splitOnStringResults = StringUtils.splitByWholeSeparator(stringToSplitOnCharactersAndString, \"aeiouy\");\r\n    assertEquals(splitOnStringExpectedResults.length, splitOnStringResults.length);\r\n    for (int i = 0; i < splitOnStringExpectedResults.length; i += 1) {\r\n        assertEquals(splitOnStringExpectedResults[i], splitOnStringResults[i]);\r\n    }\r\n    final String[] splitWithMultipleSeparatorExpectedResults = { \"ab\", \"cd\", \"ef\" };\r\n    final String[] splitWithMultipleSeparator = StringUtils.splitByWholeSeparator(\"ab:cd::ef\", \":\");\r\n    assertEquals(splitWithMultipleSeparatorExpectedResults.length, splitWithMultipleSeparator.length);\r\n    for (int i = 0; i < splitWithMultipleSeparatorExpectedResults.length; i++) {\r\n        assertEquals(splitWithMultipleSeparatorExpectedResults[i], splitWithMultipleSeparator[i]);\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\StringUtilsTest.java",
  "methodName" : "testSplitByWholeString_StringStringBooleanInt",
  "sourceCode" : "@Test\r\nvoid testSplitByWholeString_StringStringBooleanInt() {\r\n    assertArrayEquals(null, StringUtils.splitByWholeSeparator(null, \".\", 3));\r\n    assertEquals(0, StringUtils.splitByWholeSeparator(\"\", \".\", 3).length);\r\n    final String stringToSplitOnNulls = \"ab   de fg\";\r\n    final String[] splitOnNullExpectedResults = { \"ab\", \"de fg\" };\r\n    //String[] splitOnNullExpectedResults = { \"ab\", \"de\" } ;\r\n    final String[] splitOnNullResults = StringUtils.splitByWholeSeparator(stringToSplitOnNulls, null, 2);\r\n    assertEquals(splitOnNullExpectedResults.length, splitOnNullResults.length);\r\n    for (int i = 0; i < splitOnNullExpectedResults.length; i += 1) {\r\n        assertEquals(splitOnNullExpectedResults[i], splitOnNullResults[i]);\r\n    }\r\n    final String stringToSplitOnCharactersAndString = \"abstemiouslyaeiouyabstemiouslyaeiouyabstemiously\";\r\n    final String[] splitOnStringExpectedResults = { \"abstemiously\", \"abstemiouslyaeiouyabstemiously\" };\r\n    //String[] splitOnStringExpectedResults = { \"abstemiously\", \"abstemiously\" } ;\r\n    final String[] splitOnStringResults = StringUtils.splitByWholeSeparator(stringToSplitOnCharactersAndString, \"aeiouy\", 2);\r\n    assertEquals(splitOnStringExpectedResults.length, splitOnStringResults.length);\r\n    for (int i = 0; i < splitOnStringExpectedResults.length; i++) {\r\n        assertEquals(splitOnStringExpectedResults[i], splitOnStringResults[i]);\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\StringUtilsTest.java",
  "methodName" : "testSplitPreserveAllTokens_String",
  "sourceCode" : "@Test\r\nvoid testSplitPreserveAllTokens_String() {\r\n    assertNull(StringUtils.splitPreserveAllTokens(null));\r\n    assertEquals(0, StringUtils.splitPreserveAllTokens(\"\").length);\r\n    String str = \"abc def\";\r\n    String[] res = StringUtils.splitPreserveAllTokens(str);\r\n    assertEquals(2, res.length);\r\n    assertEquals(\"abc\", res[0]);\r\n    assertEquals(\"def\", res[1]);\r\n    str = \"abc  def\";\r\n    res = StringUtils.splitPreserveAllTokens(str);\r\n    assertEquals(3, res.length);\r\n    assertEquals(\"abc\", res[0]);\r\n    assertEquals(\"\", res[1]);\r\n    assertEquals(\"def\", res[2]);\r\n    str = \" abc \";\r\n    res = StringUtils.splitPreserveAllTokens(str);\r\n    assertEquals(3, res.length);\r\n    assertEquals(\"\", res[0]);\r\n    assertEquals(\"abc\", res[1]);\r\n    assertEquals(\"\", res[2]);\r\n    str = \"a b .c\";\r\n    res = StringUtils.splitPreserveAllTokens(str);\r\n    assertEquals(3, res.length);\r\n    assertEquals(\"a\", res[0]);\r\n    assertEquals(\"b\", res[1]);\r\n    assertEquals(\".c\", res[2]);\r\n    str = \" a b .c\";\r\n    res = StringUtils.splitPreserveAllTokens(str);\r\n    assertEquals(4, res.length);\r\n    assertEquals(\"\", res[0]);\r\n    assertEquals(\"a\", res[1]);\r\n    assertEquals(\"b\", res[2]);\r\n    assertEquals(\".c\", res[3]);\r\n    str = \"a  b  .c\";\r\n    res = StringUtils.splitPreserveAllTokens(str);\r\n    assertEquals(5, res.length);\r\n    assertEquals(\"a\", res[0]);\r\n    assertEquals(\"\", res[1]);\r\n    assertEquals(\"b\", res[2]);\r\n    assertEquals(\"\", res[3]);\r\n    assertEquals(\".c\", res[4]);\r\n    str = \" a  \";\r\n    res = StringUtils.splitPreserveAllTokens(str);\r\n    assertEquals(4, res.length);\r\n    assertEquals(\"\", res[0]);\r\n    assertEquals(\"a\", res[1]);\r\n    assertEquals(\"\", res[2]);\r\n    assertEquals(\"\", res[3]);\r\n    str = \" a  b\";\r\n    res = StringUtils.splitPreserveAllTokens(str);\r\n    assertEquals(4, res.length);\r\n    assertEquals(\"\", res[0]);\r\n    assertEquals(\"a\", res[1]);\r\n    assertEquals(\"\", res[2]);\r\n    assertEquals(\"b\", res[3]);\r\n    str = \"a\" + WHITESPACE + \"b\" + NON_WHITESPACE + \"c\";\r\n    res = StringUtils.splitPreserveAllTokens(str);\r\n    assertEquals(WHITESPACE.length() + 1, res.length);\r\n    assertEquals(\"a\", res[0]);\r\n    for (int i = 1; i < WHITESPACE.length() - 1; i++) {\r\n        assertEquals(\"\", res[i]);\r\n    }\r\n    assertEquals(\"b\" + NON_WHITESPACE + \"c\", res[WHITESPACE.length()]);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\StringUtilsTest.java",
  "methodName" : "testSplitPreserveAllTokens_StringChar",
  "sourceCode" : "@Test\r\nvoid testSplitPreserveAllTokens_StringChar() {\r\n    assertNull(StringUtils.splitPreserveAllTokens(null, '.'));\r\n    assertEquals(0, StringUtils.splitPreserveAllTokens(\"\", '.').length);\r\n    String str = \"a.b. c\";\r\n    String[] res = StringUtils.splitPreserveAllTokens(str, '.');\r\n    assertEquals(3, res.length);\r\n    assertEquals(\"a\", res[0]);\r\n    assertEquals(\"b\", res[1]);\r\n    assertEquals(\" c\", res[2]);\r\n    str = \"a.b.. c\";\r\n    res = StringUtils.splitPreserveAllTokens(str, '.');\r\n    assertEquals(4, res.length);\r\n    assertEquals(\"a\", res[0]);\r\n    assertEquals(\"b\", res[1]);\r\n    assertEquals(\"\", res[2]);\r\n    assertEquals(\" c\", res[3]);\r\n    str = \".a.\";\r\n    res = StringUtils.splitPreserveAllTokens(str, '.');\r\n    assertEquals(3, res.length);\r\n    assertEquals(\"\", res[0]);\r\n    assertEquals(\"a\", res[1]);\r\n    assertEquals(\"\", res[2]);\r\n    str = \".a..\";\r\n    res = StringUtils.splitPreserveAllTokens(str, '.');\r\n    assertEquals(4, res.length);\r\n    assertEquals(\"\", res[0]);\r\n    assertEquals(\"a\", res[1]);\r\n    assertEquals(\"\", res[2]);\r\n    assertEquals(\"\", res[3]);\r\n    str = \"..a.\";\r\n    res = StringUtils.splitPreserveAllTokens(str, '.');\r\n    assertEquals(4, res.length);\r\n    assertEquals(\"\", res[0]);\r\n    assertEquals(\"\", res[1]);\r\n    assertEquals(\"a\", res[2]);\r\n    assertEquals(\"\", res[3]);\r\n    str = \"..a\";\r\n    res = StringUtils.splitPreserveAllTokens(str, '.');\r\n    assertEquals(3, res.length);\r\n    assertEquals(\"\", res[0]);\r\n    assertEquals(\"\", res[1]);\r\n    assertEquals(\"a\", res[2]);\r\n    str = \"a b c\";\r\n    res = StringUtils.splitPreserveAllTokens(str, ' ');\r\n    assertEquals(3, res.length);\r\n    assertEquals(\"a\", res[0]);\r\n    assertEquals(\"b\", res[1]);\r\n    assertEquals(\"c\", res[2]);\r\n    str = \"a  b  c\";\r\n    res = StringUtils.splitPreserveAllTokens(str, ' ');\r\n    assertEquals(5, res.length);\r\n    assertEquals(\"a\", res[0]);\r\n    assertEquals(\"\", res[1]);\r\n    assertEquals(\"b\", res[2]);\r\n    assertEquals(\"\", res[3]);\r\n    assertEquals(\"c\", res[4]);\r\n    str = \" a b c\";\r\n    res = StringUtils.splitPreserveAllTokens(str, ' ');\r\n    assertEquals(4, res.length);\r\n    assertEquals(\"\", res[0]);\r\n    assertEquals(\"a\", res[1]);\r\n    assertEquals(\"b\", res[2]);\r\n    assertEquals(\"c\", res[3]);\r\n    str = \"  a b c\";\r\n    res = StringUtils.splitPreserveAllTokens(str, ' ');\r\n    assertEquals(5, res.length);\r\n    assertEquals(\"\", res[0]);\r\n    assertEquals(\"\", res[1]);\r\n    assertEquals(\"a\", res[2]);\r\n    assertEquals(\"b\", res[3]);\r\n    assertEquals(\"c\", res[4]);\r\n    str = \"a b c \";\r\n    res = StringUtils.splitPreserveAllTokens(str, ' ');\r\n    assertEquals(4, res.length);\r\n    assertEquals(\"a\", res[0]);\r\n    assertEquals(\"b\", res[1]);\r\n    assertEquals(\"c\", res[2]);\r\n    assertEquals(\"\", res[3]);\r\n    str = \"a b c  \";\r\n    res = StringUtils.splitPreserveAllTokens(str, ' ');\r\n    assertEquals(5, res.length);\r\n    assertEquals(\"a\", res[0]);\r\n    assertEquals(\"b\", res[1]);\r\n    assertEquals(\"c\", res[2]);\r\n    assertEquals(\"\", res[3]);\r\n    assertEquals(\"\", res[4]);\r\n    // Match example in javadoc\r\n    {\r\n        final String[] results;\r\n        final String[] expectedResults = { \"a\", \"\", \"b\", \"c\" };\r\n        results = StringUtils.splitPreserveAllTokens(\"a..b.c\", '.');\r\n        assertEquals(expectedResults.length, results.length);\r\n        for (int i = 0; i < expectedResults.length; i++) {\r\n            assertEquals(expectedResults[i], results[i]);\r\n        }\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\StringUtilsTest.java",
  "methodName" : "testSplitPreserveAllTokens_StringString_StringStringInt",
  "sourceCode" : "@Test\r\nvoid testSplitPreserveAllTokens_StringString_StringStringInt() {\r\n    assertNull(StringUtils.splitPreserveAllTokens(null, \".\"));\r\n    assertNull(StringUtils.splitPreserveAllTokens(null, \".\", 3));\r\n    assertEquals(0, StringUtils.splitPreserveAllTokens(\"\", \".\").length);\r\n    assertEquals(0, StringUtils.splitPreserveAllTokens(\"\", \".\", 3).length);\r\n    innerTestSplitPreserveAllTokens('.', \".\", ' ');\r\n    innerTestSplitPreserveAllTokens('.', \".\", ',');\r\n    innerTestSplitPreserveAllTokens('.', \".,\", 'x');\r\n    for (int i = 0; i < WHITESPACE.length(); i++) {\r\n        for (int j = 0; j < NON_WHITESPACE.length(); j++) {\r\n            innerTestSplitPreserveAllTokens(WHITESPACE.charAt(i), null, NON_WHITESPACE.charAt(j));\r\n            innerTestSplitPreserveAllTokens(WHITESPACE.charAt(i), String.valueOf(WHITESPACE.charAt(i)), NON_WHITESPACE.charAt(j));\r\n        }\r\n    }\r\n    {\r\n        final String[] results;\r\n        final String[] expectedResults = { \"ab\", \"de fg\" };\r\n        results = StringUtils.splitPreserveAllTokens(\"ab de fg\", null, 2);\r\n        assertEquals(expectedResults.length, results.length);\r\n        for (int i = 0; i < expectedResults.length; i++) {\r\n            assertEquals(expectedResults[i], results[i]);\r\n        }\r\n    }\r\n    {\r\n        final String[] results;\r\n        final String[] expectedResults = { \"ab\", \"  de fg\" };\r\n        results = StringUtils.splitPreserveAllTokens(\"ab   de fg\", null, 2);\r\n        assertEquals(expectedResults.length, results.length);\r\n        for (int i = 0; i < expectedResults.length; i++) {\r\n            assertEquals(expectedResults[i], results[i]);\r\n        }\r\n    }\r\n    {\r\n        final String[] results;\r\n        final String[] expectedResults = { \"ab\", \"::de:fg\" };\r\n        results = StringUtils.splitPreserveAllTokens(\"ab:::de:fg\", \":\", 2);\r\n        assertEquals(expectedResults.length, results.length);\r\n        for (int i = 0; i < expectedResults.length; i++) {\r\n            assertEquals(expectedResults[i], results[i]);\r\n        }\r\n    }\r\n    {\r\n        final String[] results;\r\n        final String[] expectedResults = { \"ab\", \"\", \" de fg\" };\r\n        results = StringUtils.splitPreserveAllTokens(\"ab   de fg\", null, 3);\r\n        assertEquals(expectedResults.length, results.length);\r\n        for (int i = 0; i < expectedResults.length; i++) {\r\n            assertEquals(expectedResults[i], results[i]);\r\n        }\r\n    }\r\n    {\r\n        final String[] results;\r\n        final String[] expectedResults = { \"ab\", \"\", \"\", \"de fg\" };\r\n        results = StringUtils.splitPreserveAllTokens(\"ab   de fg\", null, 4);\r\n        assertEquals(expectedResults.length, results.length);\r\n        for (int i = 0; i < expectedResults.length; i++) {\r\n            assertEquals(expectedResults[i], results[i]);\r\n        }\r\n    }\r\n    {\r\n        final String[] expectedResults = { \"ab\", \"cd:ef\" };\r\n        final String[] results;\r\n        results = StringUtils.splitPreserveAllTokens(\"ab:cd:ef\", \":\", 2);\r\n        assertEquals(expectedResults.length, results.length);\r\n        for (int i = 0; i < expectedResults.length; i++) {\r\n            assertEquals(expectedResults[i], results[i]);\r\n        }\r\n    }\r\n    {\r\n        final String[] results;\r\n        final String[] expectedResults = { \"ab\", \":cd:ef\" };\r\n        results = StringUtils.splitPreserveAllTokens(\"ab::cd:ef\", \":\", 2);\r\n        assertEquals(expectedResults.length, results.length);\r\n        for (int i = 0; i < expectedResults.length; i++) {\r\n            assertEquals(expectedResults[i], results[i]);\r\n        }\r\n    }\r\n    {\r\n        final String[] results;\r\n        final String[] expectedResults = { \"ab\", \"\", \":cd:ef\" };\r\n        results = StringUtils.splitPreserveAllTokens(\"ab:::cd:ef\", \":\", 3);\r\n        assertEquals(expectedResults.length, results.length);\r\n        for (int i = 0; i < expectedResults.length; i++) {\r\n            assertEquals(expectedResults[i], results[i]);\r\n        }\r\n    }\r\n    {\r\n        final String[] results;\r\n        final String[] expectedResults = { \"ab\", \"\", \"\", \"cd:ef\" };\r\n        results = StringUtils.splitPreserveAllTokens(\"ab:::cd:ef\", \":\", 4);\r\n        assertEquals(expectedResults.length, results.length);\r\n        for (int i = 0; i < expectedResults.length; i++) {\r\n            assertEquals(expectedResults[i], results[i]);\r\n        }\r\n    }\r\n    {\r\n        final String[] results;\r\n        final String[] expectedResults = { \"\", \"ab\", \"\", \"\", \"cd:ef\" };\r\n        results = StringUtils.splitPreserveAllTokens(\":ab:::cd:ef\", \":\", 5);\r\n        assertEquals(expectedResults.length, results.length);\r\n        for (int i = 0; i < expectedResults.length; i++) {\r\n            assertEquals(expectedResults[i], results[i]);\r\n        }\r\n    }\r\n    {\r\n        final String[] results;\r\n        final String[] expectedResults = { \"\", \"\", \"ab\", \"\", \"\", \"cd:ef\" };\r\n        results = StringUtils.splitPreserveAllTokens(\"::ab:::cd:ef\", \":\", 6);\r\n        assertEquals(expectedResults.length, results.length);\r\n        for (int i = 0; i < expectedResults.length; i++) {\r\n            assertEquals(expectedResults[i], results[i]);\r\n        }\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\StringUtilsTest.java",
  "methodName" : "testStringUtilsCharSequenceContract",
  "sourceCode" : "// Methods on StringUtils that are immutable in spirit (i.e. calculate the length)\r\n// should take a CharSequence parameter. Methods that are mutable in spirit (i.e. capitalize)\r\n// should take a String or String[] parameter and return String or String[].\r\n// This test enforces that this is done.\r\n@Test\r\nvoid testStringUtilsCharSequenceContract() {\r\n    final Class<StringUtils> c = StringUtils.class;\r\n    // Methods that are expressly excluded from testStringUtilsCharSequenceContract()\r\n    final String[] excludeMethods = { \"public static int org.apache.commons.lang3.StringUtils.compare(java.lang.String,java.lang.String)\", \"public static int org.apache.commons.lang3.StringUtils.compare(java.lang.String,java.lang.String,boolean)\", \"public static int org.apache.commons.lang3.StringUtils.compareIgnoreCase(java.lang.String,java.lang.String)\", \"public static int org.apache.commons.lang3.StringUtils.compareIgnoreCase(java.lang.String,java.lang.String,boolean)\", \"public static byte[] org.apache.commons.lang3.StringUtils.getBytes(java.lang.String,java.nio.charset.Charset)\", \"public static byte[] org.apache.commons.lang3.StringUtils.getBytes(java.lang.String,java.lang.String) throws java.io.UnsupportedEncodingException\" };\r\n    final Method[] methods = c.getMethods();\r\n    for (final Method m : methods) {\r\n        final String methodStr = m.toString();\r\n        if (m.getReturnType() == String.class || m.getReturnType() == String[].class) {\r\n            // Assume this is mutable and ensure the first parameter is not CharSequence.\r\n            // It may be String or it may be something else (String[], Object, Object[]) so\r\n            // don't actively test for that.\r\n            final Class<?>[] params = m.getParameterTypes();\r\n            if (params.length > 0 && (params[0] == CharSequence.class || params[0] == CharSequence[].class)) {\r\n                assertFalse(ArrayUtils.contains(excludeMethods, methodStr), \"The method \\\"\" + methodStr + \"\\\" appears to be mutable in spirit and therefore must not accept a CharSequence\");\r\n            }\r\n        } else {\r\n            // Assume this is immutable in spirit and ensure the first parameter is not String.\r\n            // As above, it may be something other than CharSequence.\r\n            final Class<?>[] params = m.getParameterTypes();\r\n            if (params.length > 0 && (params[0] == String.class || params[0] == String[].class)) {\r\n                assertTrue(ArrayUtils.contains(excludeMethods, methodStr), \"The method \\\"\" + methodStr + \"\\\" appears to be immutable in spirit and therefore must not accept a String\");\r\n            }\r\n        }\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\StringUtilsTest.java",
  "methodName" : "testSwapCase_String",
  "sourceCode" : "@Test\r\nvoid testSwapCase_String() {\r\n    assertNull(StringUtils.swapCase(null));\r\n    assertEquals(\"\", StringUtils.swapCase(\"\"));\r\n    assertEquals(\"  \", StringUtils.swapCase(\"  \"));\r\n    assertEquals(\"i\", WordUtils.swapCase(\"I\"));\r\n    assertEquals(\"I\", WordUtils.swapCase(\"i\"));\r\n    assertEquals(\"I AM HERE 123\", StringUtils.swapCase(\"i am here 123\"));\r\n    assertEquals(\"i aM hERE 123\", StringUtils.swapCase(\"I Am Here 123\"));\r\n    assertEquals(\"I AM here 123\", StringUtils.swapCase(\"i am HERE 123\"));\r\n    assertEquals(\"i am here 123\", StringUtils.swapCase(\"I AM HERE 123\"));\r\n    final String test = \"This String contains a TitleCase character: \\u01C8\";\r\n    final String expect = \"tHIS sTRING CONTAINS A tITLEcASE CHARACTER: \\u01C9\";\r\n    assertEquals(expect, WordUtils.swapCase(test));\r\n    assertEquals(expect, StringUtils.swapCase(test));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\StringUtilsTest.java",
  "methodName" : "testToCodePoints",
  "sourceCode" : "@Test\r\nvoid testToCodePoints() {\r\n    final int orphanedHighSurrogate = 0xD801;\r\n    final int orphanedLowSurrogate = 0xDC00;\r\n    final int supplementary = 0x2070E;\r\n    final int[] codePoints = { 'a', orphanedHighSurrogate, 'b', 'c', supplementary, 'd', orphanedLowSurrogate, 'e' };\r\n    final String s = new String(codePoints, 0, codePoints.length);\r\n    assertArrayEquals(codePoints, StringUtils.toCodePoints(s));\r\n    assertNull(StringUtils.toCodePoints(null));\r\n    assertArrayEquals(ArrayUtils.EMPTY_INT_ARRAY, StringUtils.toCodePoints(\"\"));\r\n    assertArrayEquals(new int[] { 'a' }, StringUtils.toCodePoints(\"a\"));\r\n    assertArrayEquals(new int[] { 'a', 'b' }, StringUtils.toCodePoints(\"ab\"));\r\n    assertArrayEquals(new int[] { 'a', 'b', 'c' }, StringUtils.toCodePoints(\"abc\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\StringUtilsTest.java",
  "methodName" : "testToCodePointsEmoji",
  "sourceCode" : "@Test\r\nvoid testToCodePointsEmoji() {\r\n    assertArrayEquals(ArrayFill.fill(new int[14], 129418), StringUtils.toCodePoints(\"\uD83E\uDD8A\uD83E\uDD8A\uD83E\uDD8A\uD83E\uDD8A\uD83E\uDD8A\uD83E\uDD8A\uD83E\uDD8A\uD83E\uDD8A\uD83E\uDD8A\uD83E\uDD8A\uD83E\uDD8A\uD83E\uDD8A\uD83E\uDD8A\uD83E\uDD8A\"));\r\n    assertArrayEquals(new int[] { 128105, 127995, 8205, 128104, 127995, 8205, 128102, 127995, 8205, 128102, 127995, 128105, 127996, 8205, 128104, 127996, 8205, 128102, 127996, 8205, 128102, 127996, 128105, 127997, 8205, 128104, 127997, 8205, 128102, 127997, 8205, 128102, 127997, 128105, 127998, 8205, 128104, 127998, 8205, 128102, 127998, 8205, 128102, 127998, 128105, 127999, 8205, 128104, 127999, 8205, 128102, 127999, 8205, 128102, 127999, 128105, 127995, 8205, 128104, 127995, 8205, 128102, 127995, 8205, 128102, 127995, 128105, 127996, 8205, 128104, 127996, 8205, 128102, 127996, 8205, 128102, 127996, 128105, 127997, 8205, 128104, 127997, 8205, 128102, 127997, 8205, 128102, 127997, 128105, 127998, 8205, 128104, 127998, 8205, 128102, 127998, 8205, 128102, 127998, 128105, 127999, 8205, 128104, 127999, 8205, 128102, 127999, 8205, 128102, 127999 }, StringUtils.toCodePoints(\"\uD83D\uDC69\uD83C\uDFFB‍\uD83D\uDC68\uD83C\uDFFB‍\uD83D\uDC66\uD83C\uDFFB‍\uD83D\uDC66\uD83C\uDFFB\uD83D\uDC69\uD83C\uDFFC‍\uD83D\uDC68\uD83C\uDFFC‍\uD83D\uDC66\uD83C\uDFFC‍\uD83D\uDC66\uD83C\uDFFC\uD83D\uDC69\uD83C\uDFFD‍\uD83D\uDC68\uD83C\uDFFD‍\uD83D\uDC66\uD83C\uDFFD‍\uD83D\uDC66\uD83C\uDFFD\uD83D\uDC69\uD83C\uDFFE‍\uD83D\uDC68\uD83C\uDFFE‍\uD83D\uDC66\uD83C\uDFFE‍\uD83D\uDC66\uD83C\uDFFE\uD83D\uDC69\uD83C\uDFFF‍\uD83D\uDC68\uD83C\uDFFF‍\uD83D\uDC66\uD83C\uDFFF‍\uD83D\uDC66\uD83C\uDFFF\uD83D\uDC69\uD83C\uDFFB‍\uD83D\uDC68\uD83C\uDFFB‍\uD83D\uDC66\uD83C\uDFFB‍\uD83D\uDC66\uD83C\uDFFB\uD83D\uDC69\uD83C\uDFFC‍\uD83D\uDC68\uD83C\uDFFC‍\uD83D\uDC66\uD83C\uDFFC‍\uD83D\uDC66\uD83C\uDFFC\uD83D\uDC69\uD83C\uDFFD‍\uD83D\uDC68\uD83C\uDFFD‍\uD83D\uDC66\uD83C\uDFFD‍\uD83D\uDC66\uD83C\uDFFD\uD83D\uDC69\uD83C\uDFFE‍\uD83D\uDC68\uD83C\uDFFE‍\uD83D\uDC66\uD83C\uDFFE‍\uD83D\uDC66\uD83C\uDFFE\uD83D\uDC69\uD83C\uDFFF‍\uD83D\uDC68\uD83C\uDFFF‍\uD83D\uDC66\uD83C\uDFFF‍\uD83D\uDC66\uD83C\uDFFF\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\StringUtilsTest.java",
  "methodName" : "testToEncodedString",
  "sourceCode" : "/**\r\n * Tests {@link StringUtils#toEncodedString(byte[], Charset)}\r\n *\r\n * @see StringUtils#toEncodedString(byte[], Charset)\r\n */\r\n@Test\r\nvoid testToEncodedString() {\r\n    final String expectedString = \"The quick brown fox jumps over the lazy dog.\";\r\n    String encoding = SystemUtils.FILE_ENCODING;\r\n    byte[] expectedBytes = expectedString.getBytes(Charset.defaultCharset());\r\n    // sanity check start\r\n    assertArrayEquals(expectedBytes, expectedString.getBytes());\r\n    // sanity check end\r\n    assertEquals(expectedString, StringUtils.toEncodedString(expectedBytes, Charset.defaultCharset()));\r\n    assertEquals(expectedString, StringUtils.toEncodedString(expectedBytes, Charset.forName(encoding)));\r\n    encoding = StandardCharsets.UTF_16.name();\r\n    expectedBytes = expectedString.getBytes(Charset.forName(encoding));\r\n    assertEquals(expectedString, StringUtils.toEncodedString(expectedBytes, Charset.forName(encoding)));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\StringUtilsTest.java",
  "methodName" : "testToRootLowerCase",
  "sourceCode" : "@Test\r\n@ReadsDefaultLocale\r\n@WritesDefaultLocale\r\nvoid testToRootLowerCase() {\r\n    assertNull(StringUtils.toRootLowerCase(null));\r\n    assertEquals(\"a\", StringUtils.toRootLowerCase(\"A\"));\r\n    assertEquals(\"a\", StringUtils.toRootLowerCase(\"a\"));\r\n    final Locale TURKISH = Locale.forLanguageTag(\"tr\");\r\n    // Sanity checks:\r\n    assertNotEquals(\"title\", \"TITLE\".toLowerCase(TURKISH));\r\n    assertEquals(\"title\", \"TITLE\".toLowerCase(Locale.ROOT));\r\n    assertEquals(\"title\", StringUtils.toRootLowerCase(\"TITLE\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\StringUtilsTest.java",
  "methodName" : "testToRootLowerCaseTurkish",
  "sourceCode" : "@Test\r\n@DefaultLocale(\"tr\")\r\n@ReadsDefaultLocale\r\nvoid testToRootLowerCaseTurkish() {\r\n    assertEquals(\"title\", StringUtils.toRootLowerCase(\"TITLE\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\StringUtilsTest.java",
  "methodName" : "testToRootUpperCase",
  "sourceCode" : "@Test\r\n@ReadsDefaultLocale\r\n@WritesDefaultLocale\r\nvoid testToRootUpperCase() {\r\n    assertNull(StringUtils.toRootUpperCase(null));\r\n    assertEquals(\"A\", StringUtils.toRootUpperCase(\"a\"));\r\n    assertEquals(\"A\", StringUtils.toRootUpperCase(\"A\"));\r\n    final Locale TURKISH = Locale.forLanguageTag(\"tr\");\r\n    // Sanity checks:\r\n    assertNotEquals(\"TITLE\", \"title\".toUpperCase(TURKISH));\r\n    assertEquals(\"TITLE\", \"title\".toUpperCase(Locale.ROOT));\r\n    assertEquals(\"TITLE\", StringUtils.toRootUpperCase(\"title\"));\r\n    // Make sure we are not using the default Locale:\r\n    final Locale defaultLocale = Locale.getDefault();\r\n    try {\r\n        Locale.setDefault(TURKISH);\r\n        assertEquals(\"TITLE\", StringUtils.toRootUpperCase(\"title\"));\r\n    } finally {\r\n        Locale.setDefault(defaultLocale);\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\StringUtilsTest.java",
  "methodName" : "testToString",
  "sourceCode" : "/**\r\n * Tests {@link StringUtils#toString(byte[], String)}\r\n *\r\n * @throws java.io.UnsupportedEncodingException because the method under test max throw it\r\n * @see StringUtils#toString(byte[], String)\r\n */\r\n@Test\r\nvoid testToString() throws UnsupportedEncodingException {\r\n    final String expectedString = \"The quick brown fox jumps over the lazy dog.\";\r\n    byte[] expectedBytes = expectedString.getBytes(Charset.defaultCharset());\r\n    // sanity check start\r\n    assertArrayEquals(expectedBytes, expectedString.getBytes());\r\n    // sanity check end\r\n    assertEquals(expectedString, StringUtils.toString(expectedBytes, null));\r\n    assertEquals(expectedString, StringUtils.toString(expectedBytes, SystemUtils.FILE_ENCODING));\r\n    final String encoding = StandardCharsets.UTF_16.name();\r\n    expectedBytes = expectedString.getBytes(Charset.forName(encoding));\r\n    assertEquals(expectedString, StringUtils.toString(expectedBytes, encoding));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\StringUtilsTest.java",
  "methodName" : "testTruncate_StringInt",
  "sourceCode" : "@Test\r\nvoid testTruncate_StringInt() {\r\n    assertNull(StringUtils.truncate(null, 12));\r\n    assertIllegalArgumentException(() -> StringUtils.truncate(null, -1), \"maxWith cannot be negative\");\r\n    assertIllegalArgumentException(() -> StringUtils.truncate(null, -10), \"maxWith cannot be negative\");\r\n    assertIllegalArgumentException(() -> StringUtils.truncate(null, Integer.MIN_VALUE), \"maxWith cannot be negative\");\r\n    assertEquals(\"\", StringUtils.truncate(\"\", 10));\r\n    assertEquals(\"abc\", StringUtils.truncate(\"abcdefghij\", 3));\r\n    assertEquals(\"abcdef\", StringUtils.truncate(\"abcdefghij\", 6));\r\n    assertEquals(\"\", StringUtils.truncate(\"abcdefghij\", 0));\r\n    assertIllegalArgumentException(() -> StringUtils.truncate(\"abcdefghij\", -1), \"maxWith cannot be negative\");\r\n    assertIllegalArgumentException(() -> StringUtils.truncate(\"abcdefghij\", -100), \"maxWith cannot be negative\");\r\n    assertIllegalArgumentException(() -> StringUtils.truncate(\"abcdefghij\", Integer.MIN_VALUE), \"maxWith cannot be negative\");\r\n    assertEquals(\"abcdefghij\", StringUtils.truncate(\"abcdefghijklmno\", 10));\r\n    assertEquals(\"abcdefghijklmno\", StringUtils.truncate(\"abcdefghijklmno\", Integer.MAX_VALUE));\r\n    assertEquals(\"abcde\", StringUtils.truncate(\"abcdefghijklmno\", 5));\r\n    assertEquals(\"abc\", StringUtils.truncate(\"abcdefghijklmno\", 3));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\StringUtilsTest.java",
  "methodName" : "testTruncate_StringIntInt",
  "sourceCode" : "@Test\r\nvoid testTruncate_StringIntInt() {\r\n    assertNull(StringUtils.truncate(null, 0, 12));\r\n    assertIllegalArgumentException(() -> StringUtils.truncate(null, -1, 0), \"offset cannot be negative\");\r\n    assertIllegalArgumentException(() -> StringUtils.truncate(null, -10, -4), \"offset cannot be negative\");\r\n    assertIllegalArgumentException(() -> StringUtils.truncate(null, Integer.MIN_VALUE, Integer.MIN_VALUE), \"offset cannot be negative\");\r\n    assertNull(StringUtils.truncate(null, 10, 12));\r\n    assertEquals(\"\", StringUtils.truncate(\"\", 0, 10));\r\n    assertEquals(\"\", StringUtils.truncate(\"\", 2, 10));\r\n    assertEquals(\"abc\", StringUtils.truncate(\"abcdefghij\", 0, 3));\r\n    assertEquals(\"fghij\", StringUtils.truncate(\"abcdefghij\", 5, 6));\r\n    assertEquals(\"\", StringUtils.truncate(\"abcdefghij\", 0, 0));\r\n    assertIllegalArgumentException(() -> StringUtils.truncate(\"abcdefghij\", 0, -1), \"maxWith cannot be negative\");\r\n    assertIllegalArgumentException(() -> StringUtils.truncate(\"abcdefghij\", 0, -10), \"maxWith cannot be negative\");\r\n    assertIllegalArgumentException(() -> StringUtils.truncate(\"abcdefghij\", 0, -100), \"maxWith cannot be negative\");\r\n    assertIllegalArgumentException(() -> StringUtils.truncate(\"abcdefghij\", 1, -100), \"maxWith cannot be negative\");\r\n    assertIllegalArgumentException(() -> StringUtils.truncate(\"abcdefghij\", 0, Integer.MIN_VALUE), \"maxWith cannot be negative\");\r\n    assertIllegalArgumentException(() -> StringUtils.truncate(\"abcdefghij\", -1, 0), \"offset cannot be negative\");\r\n    assertIllegalArgumentException(() -> StringUtils.truncate(\"abcdefghij\", -10, 0), \"offset cannot be negative\");\r\n    assertIllegalArgumentException(() -> StringUtils.truncate(\"abcdefghij\", -100, 1), \"offset cannot be negative\");\r\n    assertIllegalArgumentException(() -> StringUtils.truncate(\"abcdefghij\", Integer.MIN_VALUE, 0), \"offset cannot be negative\");\r\n    assertIllegalArgumentException(() -> StringUtils.truncate(\"abcdefghij\", -1, -1), \"offset cannot be negative\");\r\n    assertIllegalArgumentException(() -> StringUtils.truncate(\"abcdefghij\", -10, -10), \"offset cannot be negative\");\r\n    assertIllegalArgumentException(() -> StringUtils.truncate(\"abcdefghij\", -100, -100), \"offset cannot be negative\");\r\n    assertIllegalArgumentException(() -> StringUtils.truncate(\"abcdefghij\", Integer.MIN_VALUE, Integer.MIN_VALUE), \"offset cannot be negative\");\r\n    final String raspberry = \"raspberry peach\";\r\n    assertEquals(\"peach\", StringUtils.truncate(raspberry, 10, 15));\r\n    assertEquals(\"abcdefghij\", StringUtils.truncate(\"abcdefghijklmno\", 0, 10));\r\n    assertEquals(\"abcdefghijklmno\", StringUtils.truncate(\"abcdefghijklmno\", 0, Integer.MAX_VALUE));\r\n    assertEquals(\"bcdefghijk\", StringUtils.truncate(\"abcdefghijklmno\", 1, 10));\r\n    assertEquals(\"cdefghijkl\", StringUtils.truncate(\"abcdefghijklmno\", 2, 10));\r\n    assertEquals(\"defghijklm\", StringUtils.truncate(\"abcdefghijklmno\", 3, 10));\r\n    assertEquals(\"efghijklmn\", StringUtils.truncate(\"abcdefghijklmno\", 4, 10));\r\n    assertEquals(\"fghijklmno\", StringUtils.truncate(\"abcdefghijklmno\", 5, 10));\r\n    assertEquals(\"fghij\", StringUtils.truncate(\"abcdefghijklmno\", 5, 5));\r\n    assertEquals(\"fgh\", StringUtils.truncate(\"abcdefghijklmno\", 5, 3));\r\n    assertEquals(\"klm\", StringUtils.truncate(\"abcdefghijklmno\", 10, 3));\r\n    assertEquals(\"klmno\", StringUtils.truncate(\"abcdefghijklmno\", 10, Integer.MAX_VALUE));\r\n    assertEquals(\"n\", StringUtils.truncate(\"abcdefghijklmno\", 13, 1));\r\n    assertEquals(\"no\", StringUtils.truncate(\"abcdefghijklmno\", 13, Integer.MAX_VALUE));\r\n    assertEquals(\"o\", StringUtils.truncate(\"abcdefghijklmno\", 14, 1));\r\n    assertEquals(\"o\", StringUtils.truncate(\"abcdefghijklmno\", 14, Integer.MAX_VALUE));\r\n    assertEquals(\"\", StringUtils.truncate(\"abcdefghijklmno\", 15, 1));\r\n    assertEquals(\"\", StringUtils.truncate(\"abcdefghijklmno\", 15, Integer.MAX_VALUE));\r\n    assertEquals(\"\", StringUtils.truncate(\"abcdefghijklmno\", Integer.MAX_VALUE, Integer.MAX_VALUE));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\StringUtilsTest.java",
  "methodName" : "testUnCapitalize",
  "sourceCode" : "@Test\r\nvoid testUnCapitalize() {\r\n    assertNull(StringUtils.uncapitalize(null));\r\n    assertEquals(FOO_UNCAP, StringUtils.uncapitalize(FOO_CAP), \"uncapitalize(String) failed\");\r\n    assertEquals(FOO_UNCAP, StringUtils.uncapitalize(FOO_UNCAP), \"uncapitalize(string) failed\");\r\n    assertEquals(\"\", StringUtils.uncapitalize(\"\"), \"uncapitalize(empty-string) failed\");\r\n    assertEquals(\"x\", StringUtils.uncapitalize(\"X\"), \"uncapitalize(single-char-string) failed\");\r\n    // Examples from uncapitalize Javadoc\r\n    assertEquals(\"cat\", StringUtils.uncapitalize(\"cat\"));\r\n    assertEquals(\"cat\", StringUtils.uncapitalize(\"Cat\"));\r\n    assertEquals(\"cAT\", StringUtils.uncapitalize(\"CAT\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\StringUtilsTest.java",
  "methodName" : "testUnescapeSurrogatePairs",
  "sourceCode" : "@Test\r\nvoid testUnescapeSurrogatePairs() {\r\n    assertEquals(\"\\uD83D\\uDE30\", StringEscapeUtils.unescapeCsv(\"\\uD83D\\uDE30\"));\r\n    // Examples from https://en.wikipedia.org/wiki/UTF-16\r\n    assertEquals(\"\\uD800\\uDC00\", StringEscapeUtils.unescapeCsv(\"\\uD800\\uDC00\"));\r\n    assertEquals(\"\\uD834\\uDD1E\", StringEscapeUtils.unescapeCsv(\"\\uD834\\uDD1E\"));\r\n    assertEquals(\"\\uDBFF\\uDFFD\", StringEscapeUtils.unescapeCsv(\"\\uDBFF\\uDFFD\"));\r\n    assertEquals(\"\\uDBFF\\uDFFD\", StringEscapeUtils.unescapeHtml3(\"\\uDBFF\\uDFFD\"));\r\n    assertEquals(\"\\uDBFF\\uDFFD\", StringEscapeUtils.unescapeHtml4(\"\\uDBFF\\uDFFD\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\StringUtilsTest.java",
  "methodName" : "testUnwrap_StringChar",
  "sourceCode" : "@Test\r\nvoid testUnwrap_StringChar() {\r\n    assertNull(StringUtils.unwrap(null, null));\r\n    assertNull(StringUtils.unwrap(null, CharUtils.NUL));\r\n    assertNull(StringUtils.unwrap(null, '1'));\r\n    assertEquals(\"abc\", StringUtils.unwrap(\"abc\", null));\r\n    assertEquals(\"a\", StringUtils.unwrap(\"a\", \"a\"));\r\n    assertEquals(\"\", StringUtils.unwrap(\"aa\", \"a\"));\r\n    assertEquals(\"abc\", StringUtils.unwrap(\"\\'abc\\'\", '\\''));\r\n    assertEquals(\"abc\", StringUtils.unwrap(\"AabcA\", 'A'));\r\n    assertEquals(\"AabcA\", StringUtils.unwrap(\"AAabcAA\", 'A'));\r\n    assertEquals(\"abc\", StringUtils.unwrap(\"abc\", 'b'));\r\n    assertEquals(\"#A\", StringUtils.unwrap(\"#A\", '#'));\r\n    assertEquals(\"A#\", StringUtils.unwrap(\"A#\", '#'));\r\n    assertEquals(\"ABA\", StringUtils.unwrap(\"AABAA\", 'A'));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\StringUtilsTest.java",
  "methodName" : "testUnwrap_StringString",
  "sourceCode" : "@Test\r\nvoid testUnwrap_StringString() {\r\n    assertNull(StringUtils.unwrap(null, null));\r\n    assertNull(StringUtils.unwrap(null, \"\"));\r\n    assertNull(StringUtils.unwrap(null, \"1\"));\r\n    assertEquals(\"abc\", StringUtils.unwrap(\"abc\", null));\r\n    assertEquals(\"abc\", StringUtils.unwrap(\"abc\", \"\"));\r\n    assertEquals(\"a\", StringUtils.unwrap(\"a\", \"a\"));\r\n    assertEquals(\"ababa\", StringUtils.unwrap(\"ababa\", \"aba\"));\r\n    assertEquals(\"\", StringUtils.unwrap(\"aa\", \"a\"));\r\n    assertEquals(\"abc\", StringUtils.unwrap(\"\\'abc\\'\", \"\\'\"));\r\n    assertEquals(\"abc\", StringUtils.unwrap(\"\\\"abc\\\"\", \"\\\"\"));\r\n    assertEquals(\"abc\\\"xyz\", StringUtils.unwrap(\"\\\"abc\\\"xyz\\\"\", \"\\\"\"));\r\n    assertEquals(\"abc\\\"xyz\\\"\", StringUtils.unwrap(\"\\\"abc\\\"xyz\\\"\\\"\", \"\\\"\"));\r\n    assertEquals(\"abc\\'xyz\\'\", StringUtils.unwrap(\"\\\"abc\\'xyz\\'\\\"\", \"\\\"\"));\r\n    assertEquals(\"\\\"abc\\'xyz\\'\\\"\", StringUtils.unwrap(\"AA\\\"abc\\'xyz\\'\\\"AA\", \"AA\"));\r\n    assertEquals(\"\\\"abc\\'xyz\\'\\\"\", StringUtils.unwrap(\"123\\\"abc\\'xyz\\'\\\"123\", \"123\"));\r\n    assertEquals(\"AA\\\"abc\\'xyz\\'\\\"\", StringUtils.unwrap(\"AA\\\"abc\\'xyz\\'\\\"\", \"AA\"));\r\n    assertEquals(\"AA\\\"abc\\'xyz\\'\\\"AA\", StringUtils.unwrap(\"AAA\\\"abc\\'xyz\\'\\\"AAA\", \"A\"));\r\n    assertEquals(\"\\\"abc\\'xyz\\'\\\"AA\", StringUtils.unwrap(\"\\\"abc\\'xyz\\'\\\"AA\", \"AA\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\StringUtilsTest.java",
  "methodName" : "testUpperCase",
  "sourceCode" : "@Test\r\nvoid testUpperCase() {\r\n    assertNull(StringUtils.upperCase(null));\r\n    assertNull(StringUtils.upperCase(null, Locale.ENGLISH));\r\n    assertEquals(\"FOO TEST THING\", StringUtils.upperCase(\"fOo test THING\"), \"upperCase(String) failed\");\r\n    assertEquals(\"\", StringUtils.upperCase(\"\"), \"upperCase(empty-string) failed\");\r\n    assertEquals(\"FOO TEST THING\", StringUtils.upperCase(\"fOo test THING\", Locale.ENGLISH), \"upperCase(String, Locale) failed\");\r\n    assertEquals(\"\", StringUtils.upperCase(\"\", Locale.ENGLISH), \"upperCase(empty-string, Locale) failed\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\StringUtilsTest.java",
  "methodName" : "testWrap_StringChar",
  "sourceCode" : "@Test\r\nvoid testWrap_StringChar() {\r\n    assertNull(StringUtils.wrap(null, CharUtils.NUL));\r\n    assertNull(StringUtils.wrap(null, '1'));\r\n    assertEquals(\"\", StringUtils.wrap(\"\", CharUtils.NUL));\r\n    assertEquals(\"xabx\", StringUtils.wrap(\"ab\", 'x'));\r\n    assertEquals(\"\\\"ab\\\"\", StringUtils.wrap(\"ab\", '\\\"'));\r\n    assertEquals(\"\\\"\\\"ab\\\"\\\"\", StringUtils.wrap(\"\\\"ab\\\"\", '\\\"'));\r\n    assertEquals(\"'ab'\", StringUtils.wrap(\"ab\", '\\''));\r\n    assertEquals(\"''abcd''\", StringUtils.wrap(\"'abcd'\", '\\''));\r\n    assertEquals(\"'\\\"abcd\\\"'\", StringUtils.wrap(\"\\\"abcd\\\"\", '\\''));\r\n    assertEquals(\"\\\"'abcd'\\\"\", StringUtils.wrap(\"'abcd'\", '\\\"'));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\StringUtilsTest.java",
  "methodName" : "testWrap_StringString",
  "sourceCode" : "@Test\r\nvoid testWrap_StringString() {\r\n    assertNull(StringUtils.wrap(null, null));\r\n    assertNull(StringUtils.wrap(null, \"\"));\r\n    assertNull(StringUtils.wrap(null, \"1\"));\r\n    assertNull(StringUtils.wrap(null, null));\r\n    assertEquals(\"\", StringUtils.wrap(\"\", \"\"));\r\n    assertEquals(\"ab\", StringUtils.wrap(\"ab\", null));\r\n    assertEquals(\"xabx\", StringUtils.wrap(\"ab\", \"x\"));\r\n    assertEquals(\"\\\"ab\\\"\", StringUtils.wrap(\"ab\", \"\\\"\"));\r\n    assertEquals(\"\\\"\\\"ab\\\"\\\"\", StringUtils.wrap(\"\\\"ab\\\"\", \"\\\"\"));\r\n    assertEquals(\"'ab'\", StringUtils.wrap(\"ab\", \"'\"));\r\n    assertEquals(\"''abcd''\", StringUtils.wrap(\"'abcd'\", \"'\"));\r\n    assertEquals(\"'\\\"abcd\\\"'\", StringUtils.wrap(\"\\\"abcd\\\"\", \"'\"));\r\n    assertEquals(\"\\\"'abcd'\\\"\", StringUtils.wrap(\"'abcd'\", \"\\\"\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\StringUtilsTest.java",
  "methodName" : "testWrapIfMissing_StringChar",
  "sourceCode" : "@Test\r\nvoid testWrapIfMissing_StringChar() {\r\n    assertNull(StringUtils.wrapIfMissing(null, CharUtils.NUL));\r\n    assertNull(StringUtils.wrapIfMissing(null, '1'));\r\n    assertEquals(\"\", StringUtils.wrapIfMissing(\"\", CharUtils.NUL));\r\n    assertEquals(\"xabx\", StringUtils.wrapIfMissing(\"ab\", 'x'));\r\n    assertEquals(\"\\\"ab\\\"\", StringUtils.wrapIfMissing(\"ab\", '\\\"'));\r\n    assertEquals(\"\\\"ab\\\"\", StringUtils.wrapIfMissing(\"\\\"ab\\\"\", '\\\"'));\r\n    assertEquals(\"'ab'\", StringUtils.wrapIfMissing(\"ab\", '\\''));\r\n    assertEquals(\"'abcd'\", StringUtils.wrapIfMissing(\"'abcd'\", '\\''));\r\n    assertEquals(\"'\\\"abcd\\\"'\", StringUtils.wrapIfMissing(\"\\\"abcd\\\"\", '\\''));\r\n    assertEquals(\"\\\"'abcd'\\\"\", StringUtils.wrapIfMissing(\"'abcd'\", '\\\"'));\r\n    assertEquals(\"/x/\", StringUtils.wrapIfMissing(\"x\", '/'));\r\n    assertEquals(\"/x/y/z/\", StringUtils.wrapIfMissing(\"x/y/z\", '/'));\r\n    assertEquals(\"/x/y/z/\", StringUtils.wrapIfMissing(\"/x/y/z\", '/'));\r\n    assertEquals(\"/x/y/z/\", StringUtils.wrapIfMissing(\"x/y/z/\", '/'));\r\n    assertSame(\"/\", StringUtils.wrapIfMissing(\"/\", '/'));\r\n    assertSame(\"/x/\", StringUtils.wrapIfMissing(\"/x/\", '/'));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\StringUtilsTest.java",
  "methodName" : "testWrapIfMissing_StringString",
  "sourceCode" : "@Test\r\nvoid testWrapIfMissing_StringString() {\r\n    assertNull(StringUtils.wrapIfMissing(null, \"\\0\"));\r\n    assertNull(StringUtils.wrapIfMissing(null, \"1\"));\r\n    assertEquals(\"\", StringUtils.wrapIfMissing(\"\", \"\\0\"));\r\n    assertEquals(\"xabx\", StringUtils.wrapIfMissing(\"ab\", \"x\"));\r\n    assertEquals(\"\\\"ab\\\"\", StringUtils.wrapIfMissing(\"ab\", \"\\\"\"));\r\n    assertEquals(\"\\\"ab\\\"\", StringUtils.wrapIfMissing(\"\\\"ab\\\"\", \"\\\"\"));\r\n    assertEquals(\"'ab'\", StringUtils.wrapIfMissing(\"ab\", \"\\'\"));\r\n    assertEquals(\"'abcd'\", StringUtils.wrapIfMissing(\"'abcd'\", \"\\'\"));\r\n    assertEquals(\"'\\\"abcd\\\"'\", StringUtils.wrapIfMissing(\"\\\"abcd\\\"\", \"\\'\"));\r\n    assertEquals(\"\\\"'abcd'\\\"\", StringUtils.wrapIfMissing(\"'abcd'\", \"\\\"\"));\r\n    assertEquals(\"/x/\", StringUtils.wrapIfMissing(\"x\", \"/\"));\r\n    assertEquals(\"/x/y/z/\", StringUtils.wrapIfMissing(\"x/y/z\", \"/\"));\r\n    assertEquals(\"/x/y/z/\", StringUtils.wrapIfMissing(\"/x/y/z\", \"/\"));\r\n    assertEquals(\"/x/y/z/\", StringUtils.wrapIfMissing(\"x/y/z/\", \"/\"));\r\n    assertEquals(\"/\", StringUtils.wrapIfMissing(\"/\", \"/\"));\r\n    assertEquals(\"ab/ab\", StringUtils.wrapIfMissing(\"/\", \"ab\"));\r\n    assertSame(\"ab/ab\", StringUtils.wrapIfMissing(\"ab/ab\", \"ab\"));\r\n    assertSame(\"//x//\", StringUtils.wrapIfMissing(\"//x//\", \"//\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\StringUtilsTrimStripTest.java",
  "methodName" : "testStripAccents",
  "sourceCode" : "@Test\r\nvoid testStripAccents() {\r\n    final String cue = \"\\u00C7\\u00FA\\u00EA\";\r\n    assertEquals(\"Cue\", StringUtils.stripAccents(cue), \"Failed to strip accents from \" + cue);\r\n    final String lots = \"\\u00C0\\u00C1\\u00C2\\u00C3\\u00C4\\u00C5\\u00C7\\u00C8\\u00C9\\u00CA\\u00CB\\u00CC\\u00CD\\u00CE\\u00CF\\u00D1\\u00D2\\u00D3\" + \"\\u00D4\\u00D5\\u00D6\\u00D9\\u00DA\\u00DB\\u00DC\\u00DD\";\r\n    assertEquals(\"AAAAAACEEEEIIIINOOOOOUUUUY\", StringUtils.stripAccents(lots), \"Failed to strip accents from \" + lots);\r\n    assertNull(StringUtils.stripAccents(null), \"Failed null safety\");\r\n    assertEquals(\"\", StringUtils.stripAccents(\"\"), \"Failed empty String\");\r\n    assertEquals(\"control\", StringUtils.stripAccents(\"control\"), \"Failed to handle non-accented text\");\r\n    assertEquals(\"eclair\", StringUtils.stripAccents(\"\\u00E9clair\"), \"Failed to handle easy example\");\r\n    assertEquals(\"ALOSZZCND aloszzcnd\", StringUtils.stripAccents(\"\\u0104\\u0141\\u00D3\\u015A\\u017B\\u0179\\u0106\\u0143\\u0110 \\u0105\\u0142\\u00F3\\u015B\\u017C\\u017A\\u0107\\u0144\\u0111\"));\r\n    assertEquals(\"The cafe\\u2019s pinata gave me deja vu.\", StringUtils.stripAccents(\"The caf\\u00e9\\u2019s pi\\u00f1ata gave me d\\u00e9j\\u00e0 vu.\"), \"Failed to handle accented text\");\r\n    assertEquals(\"fluid quest\", StringUtils.stripAccents(\"\\ufb02uid que\\ufb06\"), \"Failed to handle ligatures\");\r\n    assertEquals(\"a b c 1 2 3\", StringUtils.stripAccents(\"\\u1d43 \\u1d47 \\u1d9c \\u00b9 \\u00b2 \\u00b3\"), \"Failed to handle superscript text\");\r\n    assertEquals(\"math italic\", StringUtils.stripAccents(\"\\uD835\\uDC5A\\uD835\\uDC4E\\uD835\\uDC61\\u210E \\uD835\\uDC56\\uD835\\uDC61\\uD835\\uDC4E\\uD835\\uDC59\\uD835\\uDC56\\uD835\\uDC50\"), \"Failed to handle UTF32 example\");\r\n    assertEquals(\"\\uD83D\\uDF01 \\uD83D\\uDF02 \\uD83D\\uDF03 \\uD83D\\uDF04\", StringUtils.stripAccents(\"\\uD83D\\uDF01 \\uD83D\\uDF02 \\uD83D\\uDF03 \\uD83D\\uDF04\"), \"Failed to handle non-accented text\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\StringUtilsTrimStripTest.java",
  "methodName" : "testStripAccentsIWithBar",
  "sourceCode" : "@Test\r\nvoid testStripAccentsIWithBar() {\r\n    assertEquals(\"I i I i I\", StringUtils.stripAccents(\"\\u0197 \\u0268 \\u1D7B \\u1DA4 \\u1DA7\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\StringUtilsTrimStripTest.java",
  "methodName" : "testStripAccentsKorean",
  "sourceCode" : "@Test\r\n@Disabled\r\nvoid testStripAccentsKorean() {\r\n    // LANG-1655\r\n    final String input = \"\\uC78A\\uC9C0\\uB9C8 \\uB10C \\uD750\\uB9B0 \\uC5B4\\uB460\\uC0AC\\uC774 \\uC67C\\uC190\\uC73C\\uB85C \\uADF8\\uB9B0 \\uBCC4 \\uD558\\uB098\";\r\n    assertEquals(input, StringUtils.stripAccents(input), \"Failed to handle Korean text\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\StringUtilsTrimStripTest.java",
  "methodName" : "testStripAccentsTWithStroke",
  "sourceCode" : "@Test\r\nvoid testStripAccentsTWithStroke() {\r\n    assertEquals(\"T t\", StringUtils.stripAccents(\"\\u0166 \\u0167\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\StringUtilsTrimStripTest.java",
  "methodName" : "testStripAccentsUnicodeVulgarFractions",
  "sourceCode" : "/**\r\n * Tests Unicode vulgar fractions.\r\n */\r\n@Test\r\nvoid testStripAccentsUnicodeVulgarFractions() {\r\n    // 1/4, note \"⁄\", not \"/\".\r\n    assertEquals(\"1⁄4\", StringUtils.stripAccents(\"\\u00BC\"));\r\n    // 1/2, note \"⁄\", not \"/\".\r\n    assertEquals(\"1⁄2\", StringUtils.stripAccents(\"\\u00BD\"));\r\n    // 3/4, note \"⁄\", not \"/\".\r\n    assertEquals(\"3⁄4\", StringUtils.stripAccents(\"\\u00BE\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\StringUtilsTrimStripTest.java",
  "methodName" : "testStripAccentsUWithBar",
  "sourceCode" : "@Test\r\nvoid testStripAccentsUWithBar() {\r\n    assertEquals(\"U u U u\", StringUtils.stripAccents(\"\\u0244 \\u0289 \\u1D7E \\u1DB6\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\StringUtilsTrimStripTest.java",
  "methodName" : "testStripAll",
  "sourceCode" : "@Test\r\nvoid testStripAll() {\r\n    // test stripAll method, merely an array version of the above strip\r\n    final String[] empty = {};\r\n    final String[] fooSpace = { \"  \" + FOO + \"  \", \"  \" + FOO, FOO + \"  \" };\r\n    final String[] fooDots = { \"..\" + FOO + \"..\", \"..\" + FOO, FOO + \"..\" };\r\n    final String[] foo = { FOO, FOO, FOO };\r\n    assertNull(StringUtils.stripAll((String[]) null));\r\n    // Additional varargs tests\r\n    // empty array\r\n    assertArrayEquals(empty, StringUtils.stripAll());\r\n    // == new String[]{null}\r\n    assertArrayEquals(new String[] { null }, StringUtils.stripAll((String) null));\r\n    assertArrayEquals(empty, StringUtils.stripAll(empty));\r\n    assertArrayEquals(foo, StringUtils.stripAll(fooSpace));\r\n    assertNull(StringUtils.stripAll(null, null));\r\n    assertArrayEquals(foo, StringUtils.stripAll(fooSpace, null));\r\n    assertArrayEquals(foo, StringUtils.stripAll(fooDots, \".\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\StringUtilsTrimStripTest.java",
  "methodName" : "testStripEndStringString",
  "sourceCode" : "@Test\r\nvoid testStripEndStringString() {\r\n    // null stripEnd\r\n    assertNull(StringUtils.stripEnd(null, null));\r\n    assertEquals(\"\", StringUtils.stripEnd(\"\", null));\r\n    assertEquals(\"\", StringUtils.stripEnd(\"        \", null));\r\n    assertEquals(\"  abc\", StringUtils.stripEnd(\"  abc  \", null));\r\n    assertEquals(StringUtilsTest.WHITESPACE + StringUtilsTest.NON_WHITESPACE, StringUtils.stripEnd(StringUtilsTest.WHITESPACE + StringUtilsTest.NON_WHITESPACE + StringUtilsTest.WHITESPACE, null));\r\n    // \"\" stripEnd\r\n    assertNull(StringUtils.stripEnd(null, \"\"));\r\n    assertEquals(\"\", StringUtils.stripEnd(\"\", \"\"));\r\n    assertEquals(\"        \", StringUtils.stripEnd(\"        \", \"\"));\r\n    assertEquals(\"  abc  \", StringUtils.stripEnd(\"  abc  \", \"\"));\r\n    assertEquals(StringUtilsTest.WHITESPACE, StringUtils.stripEnd(StringUtilsTest.WHITESPACE, \"\"));\r\n    // \" \" stripEnd\r\n    assertNull(StringUtils.stripEnd(null, \" \"));\r\n    assertEquals(\"\", StringUtils.stripEnd(\"\", \" \"));\r\n    assertEquals(\"\", StringUtils.stripEnd(\"        \", \" \"));\r\n    assertEquals(\"  abc\", StringUtils.stripEnd(\"  abc  \", \" \"));\r\n    // \"ab\" stripEnd\r\n    assertNull(StringUtils.stripEnd(null, \"ab\"));\r\n    assertEquals(\"\", StringUtils.stripEnd(\"\", \"ab\"));\r\n    assertEquals(\"        \", StringUtils.stripEnd(\"        \", \"ab\"));\r\n    assertEquals(\"  abc  \", StringUtils.stripEnd(\"  abc  \", \"ab\"));\r\n    assertEquals(\"abc\", StringUtils.stripEnd(\"abcabab\", \"ab\"));\r\n    assertEquals(StringUtilsTest.WHITESPACE, StringUtils.stripEnd(StringUtilsTest.WHITESPACE, \"\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\StringUtilsTrimStripTest.java",
  "methodName" : "testStripStartStringString",
  "sourceCode" : "@Test\r\nvoid testStripStartStringString() {\r\n    // null stripStart\r\n    assertNull(StringUtils.stripStart(null, null));\r\n    assertEquals(\"\", StringUtils.stripStart(\"\", null));\r\n    assertEquals(\"\", StringUtils.stripStart(\"        \", null));\r\n    assertEquals(\"abc  \", StringUtils.stripStart(\"  abc  \", null));\r\n    assertEquals(StringUtilsTest.NON_WHITESPACE + StringUtilsTest.WHITESPACE, StringUtils.stripStart(StringUtilsTest.WHITESPACE + StringUtilsTest.NON_WHITESPACE + StringUtilsTest.WHITESPACE, null));\r\n    // \"\" stripStart\r\n    assertNull(StringUtils.stripStart(null, \"\"));\r\n    assertEquals(\"\", StringUtils.stripStart(\"\", \"\"));\r\n    assertEquals(\"        \", StringUtils.stripStart(\"        \", \"\"));\r\n    assertEquals(\"  abc  \", StringUtils.stripStart(\"  abc  \", \"\"));\r\n    assertEquals(StringUtilsTest.WHITESPACE, StringUtils.stripStart(StringUtilsTest.WHITESPACE, \"\"));\r\n    // \" \" stripStart\r\n    assertNull(StringUtils.stripStart(null, \" \"));\r\n    assertEquals(\"\", StringUtils.stripStart(\"\", \" \"));\r\n    assertEquals(\"\", StringUtils.stripStart(\"        \", \" \"));\r\n    assertEquals(\"abc  \", StringUtils.stripStart(\"  abc  \", \" \"));\r\n    // \"ab\" stripStart\r\n    assertNull(StringUtils.stripStart(null, \"ab\"));\r\n    assertEquals(\"\", StringUtils.stripStart(\"\", \"ab\"));\r\n    assertEquals(\"        \", StringUtils.stripStart(\"        \", \"ab\"));\r\n    assertEquals(\"  abc  \", StringUtils.stripStart(\"  abc  \", \"ab\"));\r\n    assertEquals(\"cabab\", StringUtils.stripStart(\"abcabab\", \"ab\"));\r\n    assertEquals(StringUtilsTest.WHITESPACE, StringUtils.stripStart(StringUtilsTest.WHITESPACE, \"\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\StringUtilsTrimStripTest.java",
  "methodName" : "testStripString",
  "sourceCode" : "@Test\r\nvoid testStripString() {\r\n    assertNull(StringUtils.strip(null));\r\n    assertEquals(\"\", StringUtils.strip(\"\"));\r\n    assertEquals(\"\", StringUtils.strip(\"        \"));\r\n    assertEquals(\"abc\", StringUtils.strip(\"  abc  \"));\r\n    assertEquals(StringUtilsTest.NON_WHITESPACE, StringUtils.strip(StringUtilsTest.WHITESPACE + StringUtilsTest.NON_WHITESPACE + StringUtilsTest.WHITESPACE));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\StringUtilsTrimStripTest.java",
  "methodName" : "testStripStringString",
  "sourceCode" : "@Test\r\nvoid testStripStringString() {\r\n    // null strip\r\n    assertNull(StringUtils.strip(null, null));\r\n    assertEquals(\"\", StringUtils.strip(\"\", null));\r\n    assertEquals(\"\", StringUtils.strip(\"        \", null));\r\n    assertEquals(\"abc\", StringUtils.strip(\"  abc  \", null));\r\n    assertEquals(StringUtilsTest.NON_WHITESPACE, StringUtils.strip(StringUtilsTest.WHITESPACE + StringUtilsTest.NON_WHITESPACE + StringUtilsTest.WHITESPACE, null));\r\n    // \"\" strip\r\n    assertNull(StringUtils.strip(null, \"\"));\r\n    assertEquals(\"\", StringUtils.strip(\"\", \"\"));\r\n    assertEquals(\"        \", StringUtils.strip(\"        \", \"\"));\r\n    assertEquals(\"  abc  \", StringUtils.strip(\"  abc  \", \"\"));\r\n    assertEquals(StringUtilsTest.WHITESPACE, StringUtils.strip(StringUtilsTest.WHITESPACE, \"\"));\r\n    // \" \" strip\r\n    assertNull(StringUtils.strip(null, \" \"));\r\n    assertEquals(\"\", StringUtils.strip(\"\", \" \"));\r\n    assertEquals(\"\", StringUtils.strip(\"        \", \" \"));\r\n    assertEquals(\"abc\", StringUtils.strip(\"  abc  \", \" \"));\r\n    // \"ab\" strip\r\n    assertNull(StringUtils.strip(null, \"ab\"));\r\n    assertEquals(\"\", StringUtils.strip(\"\", \"ab\"));\r\n    assertEquals(\"        \", StringUtils.strip(\"        \", \"ab\"));\r\n    assertEquals(\"  abc  \", StringUtils.strip(\"  abc  \", \"ab\"));\r\n    assertEquals(\"c\", StringUtils.strip(\"abcabab\", \"ab\"));\r\n    assertEquals(StringUtilsTest.WHITESPACE, StringUtils.strip(StringUtilsTest.WHITESPACE, \"\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\StringUtilsTrimStripTest.java",
  "methodName" : "testStripToEmptyString",
  "sourceCode" : "@Test\r\nvoid testStripToEmptyString() {\r\n    assertEquals(\"\", StringUtils.stripToEmpty(null));\r\n    assertEquals(\"\", StringUtils.stripToEmpty(\"\"));\r\n    assertEquals(\"\", StringUtils.stripToEmpty(\"        \"));\r\n    assertEquals(\"\", StringUtils.stripToEmpty(StringUtilsTest.WHITESPACE));\r\n    assertEquals(\"ab c\", StringUtils.stripToEmpty(\"  ab c  \"));\r\n    assertEquals(StringUtilsTest.NON_WHITESPACE, StringUtils.stripToEmpty(StringUtilsTest.WHITESPACE + StringUtilsTest.NON_WHITESPACE + StringUtilsTest.WHITESPACE));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\StringUtilsTrimStripTest.java",
  "methodName" : "testStripToNullString",
  "sourceCode" : "@Test\r\nvoid testStripToNullString() {\r\n    assertNull(StringUtils.stripToNull(null));\r\n    assertNull(StringUtils.stripToNull(\"\"));\r\n    assertNull(StringUtils.stripToNull(\"        \"));\r\n    assertNull(StringUtils.stripToNull(StringUtilsTest.WHITESPACE));\r\n    assertEquals(\"ab c\", StringUtils.stripToNull(\"  ab c  \"));\r\n    assertEquals(StringUtilsTest.NON_WHITESPACE, StringUtils.stripToNull(StringUtilsTest.WHITESPACE + StringUtilsTest.NON_WHITESPACE + StringUtilsTest.WHITESPACE));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\StringUtilsTrimStripTest.java",
  "methodName" : "testTrim",
  "sourceCode" : "@Test\r\nvoid testTrim() {\r\n    assertEquals(FOO, StringUtils.trim(FOO + \"  \"));\r\n    assertEquals(FOO, StringUtils.trim(\" \" + FOO + \"  \"));\r\n    assertEquals(FOO, StringUtils.trim(\" \" + FOO));\r\n    assertEquals(FOO, StringUtils.trim(FOO + \"\"));\r\n    assertEquals(\"\", StringUtils.trim(\" \\t\\r\\n\\b \"));\r\n    assertEquals(\"\", StringUtils.trim(StringUtilsTest.TRIMMABLE));\r\n    assertEquals(StringUtilsTest.NON_TRIMMABLE, StringUtils.trim(StringUtilsTest.NON_TRIMMABLE));\r\n    assertEquals(\"\", StringUtils.trim(\"\"));\r\n    assertNull(StringUtils.trim(null));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\StringUtilsTrimStripTest.java",
  "methodName" : "testTrimToEmpty",
  "sourceCode" : "@Test\r\nvoid testTrimToEmpty() {\r\n    assertEquals(FOO, StringUtils.trimToEmpty(FOO + \"  \"));\r\n    assertEquals(FOO, StringUtils.trimToEmpty(\" \" + FOO + \"  \"));\r\n    assertEquals(FOO, StringUtils.trimToEmpty(\" \" + FOO));\r\n    assertEquals(FOO, StringUtils.trimToEmpty(FOO + \"\"));\r\n    assertEquals(\"\", StringUtils.trimToEmpty(\" \\t\\r\\n\\b \"));\r\n    assertEquals(\"\", StringUtils.trimToEmpty(StringUtilsTest.TRIMMABLE));\r\n    assertEquals(StringUtilsTest.NON_TRIMMABLE, StringUtils.trimToEmpty(StringUtilsTest.NON_TRIMMABLE));\r\n    assertEquals(\"\", StringUtils.trimToEmpty(\"\"));\r\n    assertEquals(\"\", StringUtils.trimToEmpty(null));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\StringUtilsTrimStripTest.java",
  "methodName" : "testTrimToNull",
  "sourceCode" : "@Test\r\nvoid testTrimToNull() {\r\n    assertEquals(FOO, StringUtils.trimToNull(FOO + \"  \"));\r\n    assertEquals(FOO, StringUtils.trimToNull(\" \" + FOO + \"  \"));\r\n    assertEquals(FOO, StringUtils.trimToNull(\" \" + FOO));\r\n    assertEquals(FOO, StringUtils.trimToNull(FOO + \"\"));\r\n    assertNull(StringUtils.trimToNull(\" \\t\\r\\n\\b \"));\r\n    assertNull(StringUtils.trimToNull(StringUtilsTest.TRIMMABLE));\r\n    assertEquals(StringUtilsTest.NON_TRIMMABLE, StringUtils.trimToNull(StringUtilsTest.NON_TRIMMABLE));\r\n    assertNull(StringUtils.trimToNull(\"\"));\r\n    assertNull(StringUtils.trimToNull(null));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\StringUtilsValueOfTest.java",
  "methodName" : "testValueOfChar",
  "sourceCode" : "@Test\r\nvoid testValueOfChar() {\r\n    Assertions.assertEquals(\"ABC\", StringUtils.valueOf(new char[] { 'A', 'B', 'C' }));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\StringUtilsValueOfTest.java",
  "methodName" : "testValueOfCharEmpty",
  "sourceCode" : "@Test\r\nvoid testValueOfCharEmpty() {\r\n    Assertions.assertEquals(StringUtils.EMPTY, StringUtils.valueOf(ArrayUtils.EMPTY_CHAR_ARRAY));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\StringUtilsValueOfTest.java",
  "methodName" : "testValueOfCharNull",
  "sourceCode" : "@Test\r\nvoid testValueOfCharNull() {\r\n    Assertions.assertNull(StringUtils.valueOf(null));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\SystemPropertiesTest.java",
  "methodName" : "testActualKeys",
  "sourceCode" : "@Test\r\nvoid testActualKeys() {\r\n    basicKeyCheck(SystemProperties.APPLE_AWT_ENABLE_TEMPLATE_IMAGES);\r\n    basicKeyCheck(SystemProperties.AWT_TOOLKIT);\r\n    basicKeyCheck(SystemProperties.COM_SUN_JNDI_LDAP_OBJECT_TRUST_SERIAL_DATA);\r\n    basicKeyCheck(SystemProperties.COM_SUN_NET_HTTP_SERVER_HTTP_SERVER_PROVIDER);\r\n    basicKeyCheck(SystemProperties.FILE_ENCODING);\r\n    basicKeyCheck(SystemProperties.FILE_SEPARATOR);\r\n    basicKeyCheck(SystemProperties.FTP_NON_PROXY_HOST);\r\n    basicKeyCheck(SystemProperties.FTP_PROXY_HOST);\r\n    basicKeyCheck(SystemProperties.FTP_PROXY_PORT);\r\n    basicKeyCheck(SystemProperties.HTTP_AGENT);\r\n    basicKeyCheck(SystemProperties.HTTP_AUTH_DIGEST_CNONCE_REPEAT);\r\n    basicKeyCheck(SystemProperties.HTTP_AUTH_DIGEST_RE_ENABLED_ALGORITHMS);\r\n    basicKeyCheck(SystemProperties.HTTP_AUTH_DIGEST_VALIDATE_PROXY);\r\n    basicKeyCheck(SystemProperties.HTTP_AUTH_DIGEST_VALIDATE_SERVER);\r\n    basicKeyCheck(SystemProperties.HTTP_AUTH_NTLM_DOMAIN);\r\n    basicKeyCheck(SystemProperties.HTTP_KEEP_ALIVE);\r\n    basicKeyCheck(SystemProperties.HTTP_KEEP_ALIVE_TIME_PROXY);\r\n    basicKeyCheck(SystemProperties.HTTP_KEEP_ALIVE_TIME_SERVER);\r\n    basicKeyCheck(SystemProperties.HTTP_MAX_CONNECTIONS);\r\n    basicKeyCheck(SystemProperties.HTTP_MAX_REDIRECTS);\r\n    basicKeyCheck(SystemProperties.HTTP_NON_PROXY_HOSTS);\r\n    basicKeyCheck(SystemProperties.HTTP_PROXY_HOST);\r\n    basicKeyCheck(SystemProperties.HTTP_PROXY_PORT);\r\n    basicKeyCheck(SystemProperties.HTTPS_PROXY_HOST);\r\n    basicKeyCheck(SystemProperties.HTTPS_PROXY_PORT);\r\n    basicKeyCheck(SystemProperties.JAVA_AWT_FONTS);\r\n    basicKeyCheck(SystemProperties.JAVA_AWT_GRAPHICSENV);\r\n    basicKeyCheck(SystemProperties.JAVA_AWT_HEADLESS);\r\n    basicKeyCheck(SystemProperties.JAVA_AWT_PRINTERJOB);\r\n    basicKeyCheck(SystemProperties.JAVA_CLASS_PATH);\r\n    basicKeyCheck(SystemProperties.JAVA_CLASS_VERSION);\r\n    basicKeyCheck(SystemProperties.JAVA_COMPILER);\r\n    basicKeyCheck(SystemProperties.JAVA_CONTENT_HANDLER_PKGS);\r\n    basicKeyCheck(SystemProperties.JAVA_ENDORSED_DIRS);\r\n    basicKeyCheck(SystemProperties.JAVA_EXT_DIRS);\r\n    basicKeyCheck(SystemProperties.JAVA_HOME);\r\n    basicKeyCheck(SystemProperties.JAVA_IO_TMPDIR);\r\n    basicKeyCheck(SystemProperties.JAVA_LIBRARY_PATH);\r\n    basicKeyCheck(SystemProperties.JAVA_LOCALE_PROVIDERS);\r\n    basicKeyCheck(SystemProperties.JAVA_LOCALE_USE_OLD_ISO_CODES);\r\n    basicKeyCheck(SystemProperties.JAVA_NET_PREFER_IPV4_STACK);\r\n    basicKeyCheck(SystemProperties.JAVA_NET_PREFER_IPV6_ADDRESSES);\r\n    basicKeyCheck(SystemProperties.JAVA_NET_SOCKS_PASSWORD);\r\n    basicKeyCheck(SystemProperties.JAVA_NET_SOCKS_USER_NAME);\r\n    basicKeyCheck(SystemProperties.JAVA_NET_USE_SYSTEM_PROXIES);\r\n    basicKeyCheck(SystemProperties.JAVA_NIO_CHANNELS_DEFAULT_THREAD_POOL_INITIAL_SIZE);\r\n    basicKeyCheck(SystemProperties.JAVA_NIO_CHANNELS_DEFAULT_THREAD_POOL_THREAD_FACTORY);\r\n    basicKeyCheck(SystemProperties.JAVA_NIO_CHANNELS_SPI_ASYNCHRONOUS_CHANNEL_PROVIDER);\r\n    basicKeyCheck(SystemProperties.JAVA_NIO_CHANNELS_SPI_SELECTOR_PROVIDER);\r\n    basicKeyCheck(SystemProperties.JAVA_NIO_FILE_SPI_DEFAULT_FILE_SYSTEM_PROVIDER);\r\n    basicKeyCheck(SystemProperties.JAVA_PROPERTIES_DATE);\r\n    basicKeyCheck(SystemProperties.JAVA_PROTOCOL_HANDLER_PKGS);\r\n    basicKeyCheck(SystemProperties.JAVA_RMI_SERVER_CODEBASE);\r\n    basicKeyCheck(SystemProperties.JAVA_RMI_SERVER_HOST_NAME);\r\n    basicKeyCheck(SystemProperties.JAVA_RMI_SERVER_RANDOM_IDS);\r\n    basicKeyCheck(SystemProperties.JAVA_RMI_SERVER_RMI_CLASS_LOADER_SPI);\r\n    basicKeyCheck(SystemProperties.JAVA_RUNTIME_NAME);\r\n    basicKeyCheck(SystemProperties.JAVA_RUNTIME_VERSION);\r\n    basicKeyCheck(SystemProperties.JAVA_SECURITY_AUTH_LOGIN_CONFIG);\r\n    basicKeyCheck(SystemProperties.JAVA_SECURITY_KERBEROS_CONF);\r\n    basicKeyCheck(SystemProperties.JAVA_SECURITY_KERBEROS_KDC);\r\n    basicKeyCheck(SystemProperties.JAVA_SECURITY_KERBEROS_REALM);\r\n    basicKeyCheck(SystemProperties.JAVA_SECURITY_DEBUG);\r\n    basicKeyCheck(SystemProperties.JAVA_SECURITY_MANAGER);\r\n    basicKeyCheck(SystemProperties.JAVA_SPECIFICATION_MAINTENANCE_VERSION);\r\n    basicKeyCheck(SystemProperties.JAVA_SPECIFICATION_NAME);\r\n    basicKeyCheck(SystemProperties.JAVA_SPECIFICATION_VENDOR);\r\n    basicKeyCheck(SystemProperties.JAVA_SPECIFICATION_VERSION);\r\n    basicKeyCheck(SystemProperties.JAVA_SYSTEM_CLASS_LOADER);\r\n    basicKeyCheck(SystemProperties.JAVA_TIME_ZONE_DEFAULT_ZONE_RULES_PROVIDER);\r\n    basicKeyCheck(SystemProperties.JAVA_UTIL_CONCURRENT_FORK_JOIN_POOL_COMMON_EXCEPTION_HANDLER);\r\n    basicKeyCheck(SystemProperties.JAVA_UTIL_CONCURRENT_FORK_JOIN_POOL_COMMON_MAXIMUM_SPARES);\r\n    basicKeyCheck(SystemProperties.JAVA_UTIL_CONCURRENT_FORK_JOIN_POOL_COMMON_PARALLELISM);\r\n    basicKeyCheck(SystemProperties.JAVA_UTIL_CONCURRENT_FORK_JOIN_POOL_COMMON_THREAD_FACTORY);\r\n    basicKeyCheck(SystemProperties.JAVA_UTIL_CURRENCY_DATA);\r\n    basicKeyCheck(SystemProperties.JAVA_UTIL_LOGGING_CONFIG_CLASS);\r\n    basicKeyCheck(SystemProperties.JAVA_UTIL_LOGGING_CONFIG_FILE);\r\n    basicKeyCheck(SystemProperties.JAVA_UTIL_LOGGING_SIMPLE_FORMATTER_FORMAT);\r\n    basicKeyCheck(SystemProperties.JAVA_UTIL_PREFS_PREFERENCES_FACTORY);\r\n    basicKeyCheck(SystemProperties.JAVA_UTIL_PROPERTY_RESOURCE_BUNDLE_ENCODING);\r\n    basicKeyCheck(SystemProperties.JAVA_VENDOR);\r\n    basicKeyCheck(SystemProperties.JAVA_VENDOR_URL);\r\n    basicKeyCheck(SystemProperties.JAVA_VENDOR_VERSION);\r\n    basicKeyCheck(SystemProperties.JAVA_VERSION);\r\n    basicKeyCheck(SystemProperties.JAVA_VERSION_DATE);\r\n    basicKeyCheck(SystemProperties.JAVA_VM_INFO);\r\n    basicKeyCheck(SystemProperties.JAVA_VM_NAME);\r\n    basicKeyCheck(SystemProperties.JAVA_VM_SPECIFICATION_NAME);\r\n    basicKeyCheck(SystemProperties.JAVA_VM_SPECIFICATION_VENDOR);\r\n    basicKeyCheck(SystemProperties.JAVA_VM_SPECIFICATION_VERSION);\r\n    basicKeyCheck(SystemProperties.JAVA_VM_VENDOR);\r\n    basicKeyCheck(SystemProperties.JAVA_VM_VERSION);\r\n    basicKeyCheck(SystemProperties.JAVA_XML_CONFIG_FILE);\r\n    basicKeyCheck(SystemProperties.JAVAX_ACCESSIBILITY_ASSISTIVE_TECHNOLOGIES);\r\n    basicKeyCheck(SystemProperties.JAVAX_NET_SSL_SESSION_CACHE_SIZE);\r\n    basicKeyCheck(SystemProperties.JAVAX_RMI_SSL_CLIENT_ENABLED_CIPHER_SUITES);\r\n    basicKeyCheck(SystemProperties.JAVAX_RMI_SSL_CLIENT_ENABLED_PROTOCOLS);\r\n    basicKeyCheck(SystemProperties.JAVAX_SECURITY_AUTH_USE_SUBJECT_CREDS_ONLY);\r\n    basicKeyCheck(SystemProperties.JAVAX_SMART_CARD_IO_TERMINAL_FACTORY_DEFAULT_TYPE);\r\n    basicKeyCheck(SystemProperties.JDBC_DRIVERS);\r\n    basicKeyCheck(SystemProperties.JDK_HTTP_AUTH_PROXYING_DISABLED_SCHEMES);\r\n    basicKeyCheck(SystemProperties.JDK_HTTP_AUTH_TUNNELING_DISABLED_SCHEMES);\r\n    basicKeyCheck(SystemProperties.JDK_HTTP_CLIENT_ALLOW_RESTRICTED_HEADERS);\r\n    basicKeyCheck(SystemProperties.JDK_HTTP_CLIENT_AUTH_RETRY_LIMIT);\r\n    basicKeyCheck(SystemProperties.JDK_HTTP_CLIENT_BUF_SIZE);\r\n    basicKeyCheck(SystemProperties.JDK_HTTP_CLIENT_CONNECTION_POOL_SIZE);\r\n    basicKeyCheck(SystemProperties.JDK_HTTP_CLIENT_CONNECTION_WINDOW_SIZE);\r\n    basicKeyCheck(SystemProperties.JDK_HTTP_CLIENT_DISABLE_RETRY_CONNECT);\r\n    basicKeyCheck(SystemProperties.JDK_HTTP_CLIENT_ENABLE_ALL_METHOD_RETRY);\r\n    basicKeyCheck(SystemProperties.JDK_HTTP_CLIENT_ENABLE_PUSH);\r\n    basicKeyCheck(SystemProperties.JDK_HTTP_CLIENT_HPACK_MAX_HEADER_TABLE_SIZE);\r\n    basicKeyCheck(SystemProperties.JDK_HTTP_CLIENT_HTTP_CLIENT_LOG);\r\n    basicKeyCheck(SystemProperties.JDK_HTTP_CLIENT_KEEP_ALIVE_TIMEOUT);\r\n    basicKeyCheck(SystemProperties.JDK_HTTP_CLIENT_KEEP_ALIVE_TIMEOUT_H2);\r\n    basicKeyCheck(SystemProperties.JDK_HTTP_CLIENT_MAX_FRAME_SIZE);\r\n    basicKeyCheck(SystemProperties.JDK_HTTP_CLIENT_MAX_STREAMS);\r\n    basicKeyCheck(SystemProperties.JDK_HTTP_CLIENT_RECEIVE_BUFFER_SIZE);\r\n    basicKeyCheck(SystemProperties.JDK_HTTP_CLIENT_REDIRECTS_RETRY_LIMIT);\r\n    basicKeyCheck(SystemProperties.JDK_HTTP_CLIENT_SEND_BUFFER_SIZE);\r\n    basicKeyCheck(SystemProperties.JDK_HTTP_CLIENT_WEB_SOCKET_WRITE_BUFFER_SIZE);\r\n    basicKeyCheck(SystemProperties.JDK_HTTP_CLIENT_WINDOW_SIZE);\r\n    basicKeyCheck(SystemProperties.JDK_HTTPS_NEGOTIATE_CBT);\r\n    basicKeyCheck(SystemProperties.JDK_HTTP_SERVER_MAX_CONNECTIONS);\r\n    basicKeyCheck(SystemProperties.JDK_INCLUDE_IN_EXCEPTIONS);\r\n    basicKeyCheck(SystemProperties.JDK_INTERNAL_HTTP_CLIENT_DISABLE_HOST_NAME_VERIFICATION);\r\n    basicKeyCheck(SystemProperties.JDK_IO_PERMISSIONS_USE_CANONICAL_PATH);\r\n    basicKeyCheck(SystemProperties.JDK_JNDI_LDAP_OBJECT_FACTORIES_FILTER);\r\n    basicKeyCheck(SystemProperties.JDK_JNDI_OBJECT_FACTORIES_FILTER);\r\n    basicKeyCheck(SystemProperties.JDK_JNDI_RMI_OBJECT_FACTORIES_FILTER);\r\n    basicKeyCheck(SystemProperties.JDK_MODULE_MAIN);\r\n    basicKeyCheck(SystemProperties.JDK_MODULE_MAIN_CLASS);\r\n    basicKeyCheck(SystemProperties.JDK_MODULE_PATH);\r\n    basicKeyCheck(SystemProperties.JDK_MODULE_UPGRADE_PATH);\r\n    basicKeyCheck(SystemProperties.JDK_NET_UNIX_DOMAIN_TMPDIR);\r\n    basicKeyCheck(SystemProperties.JDK_NET_URL_CLASS_PATH_SHOW_IGNORED_CLASS_PATH_ENTRIES);\r\n    basicKeyCheck(SystemProperties.JDK_SERIAL_FILTER);\r\n    basicKeyCheck(SystemProperties.JDK_SERIAL_FILTER_FACTORY);\r\n    basicKeyCheck(SystemProperties.JDK_TLS_CLIENT_SIGNATURE_SCHEMES);\r\n    basicKeyCheck(SystemProperties.JDK_TLS_NAMED_GROUPS);\r\n    basicKeyCheck(SystemProperties.JDK_TLS_SERVER_SIGNATURE_SCHEMES);\r\n    basicKeyCheck(SystemProperties.JDK_VIRTUAL_THREAD_SCHEDULER_MAXPOOLSIZE);\r\n    basicKeyCheck(SystemProperties.JDK_VIRTUAL_THREAD_SCHEDULER_PARALLELISM);\r\n    basicKeyCheck(SystemProperties.JDK_XML_CDATA_CHUNK_SIZE);\r\n    basicKeyCheck(SystemProperties.JDK_XML_DTD_SUPPORT);\r\n    basicKeyCheck(SystemProperties.JDK_XML_ELEMENT_ATTRIBUTE_LIMIT);\r\n    basicKeyCheck(SystemProperties.JDK_XML_ENABLE_EXTENSION_FUNCTIONS);\r\n    basicKeyCheck(SystemProperties.JDK_XML_ENTITY_EXPANSION_LIMIT);\r\n    basicKeyCheck(SystemProperties.JDK_XML_ENTITY_REPLACEMENT_LIMIT);\r\n    basicKeyCheck(SystemProperties.JDK_XML_IS_STANDALONE);\r\n    basicKeyCheck(SystemProperties.JDK_XML_JDK_CATALOG_RESOLVE);\r\n    basicKeyCheck(SystemProperties.JDK_XML_MAX_ELEMENT_DEPTH);\r\n    basicKeyCheck(SystemProperties.JDK_XML_MAX_GENERAL_ENTITY_SIZE_LIMIT);\r\n    basicKeyCheck(SystemProperties.JDK_XML_MAX_OCCUR_LIMIT);\r\n    basicKeyCheck(SystemProperties.JDK_XML_MAX_PARAMETER_ENTITY_SIZE_LIMIT);\r\n    basicKeyCheck(SystemProperties.JDK_XML_MAX_XML_NAME_LIMIT);\r\n    basicKeyCheck(SystemProperties.JDK_XML_OVERRIDE_DEFAULT_PARSER);\r\n    basicKeyCheck(SystemProperties.JDK_XML_RESET_SYMBOL_TABLE);\r\n    basicKeyCheck(SystemProperties.JDK_XML_TOTAL_ENTITY_SIZE_LIMIT);\r\n    basicKeyCheck(SystemProperties.JDK_XML_XSLTC_IS_STANDALONE);\r\n    basicKeyCheck(SystemProperties.LINE_SEPARATOR);\r\n    basicKeyCheck(SystemProperties.NATIVE_ENCODING);\r\n    basicKeyCheck(SystemProperties.NETWORK_ADDRESS_CACHE_NEGATIVE_TTL);\r\n    basicKeyCheck(SystemProperties.NETWORK_ADDRESS_CACHE_STALE_TTL);\r\n    basicKeyCheck(SystemProperties.NETWORK_ADDRESS_CACHE_TTL);\r\n    basicKeyCheck(SystemProperties.ORG_JCP_XML_DSIG_SECURE_VALIDATION);\r\n    basicKeyCheck(SystemProperties.ORG_OPENJDK_JAVA_UTIL_STREAM_TRIPWIRE);\r\n    basicKeyCheck(SystemProperties.OS_ARCH);\r\n    basicKeyCheck(SystemProperties.OS_NAME);\r\n    basicKeyCheck(SystemProperties.OS_VERSION);\r\n    basicKeyCheck(SystemProperties.PATH_SEPARATOR);\r\n    basicKeyCheck(SystemProperties.SOCKS_PROXY_HOST);\r\n    basicKeyCheck(SystemProperties.SOCKS_PROXY_PORT);\r\n    basicKeyCheck(SystemProperties.SOCKS_PROXY_VERSION);\r\n    basicKeyCheck(SystemProperties.STDERR_ENCODING);\r\n    basicKeyCheck(SystemProperties.STDOUT_ENCODING);\r\n    basicKeyCheck(SystemProperties.SUN_NET_HTTP_SERVER_DRAIN_AMOUNT);\r\n    basicKeyCheck(SystemProperties.SUN_NET_HTTP_SERVER_IDLE_INTERVAL);\r\n    basicKeyCheck(SystemProperties.SUN_NET_HTTP_SERVER_MAX_IDLE_CONNECTIONS);\r\n    basicKeyCheck(SystemProperties.SUN_NET_HTTP_SERVER_MAX_REQ_HEADERS);\r\n    basicKeyCheck(SystemProperties.SUN_NET_HTTP_SERVER_MAX_REQ_TIME);\r\n    basicKeyCheck(SystemProperties.SUN_NET_HTTP_SERVER_MAX_RSP_TIME);\r\n    basicKeyCheck(SystemProperties.SUN_NET_HTTP_SERVER_NO_DELAY);\r\n    basicKeyCheck(SystemProperties.SUN_SECURITY_KRB5_PRINCIPAL);\r\n    basicKeyCheck(SystemProperties.USER_COUNTRY);\r\n    basicKeyCheck(SystemProperties.USER_DIR);\r\n    basicKeyCheck(SystemProperties.USER_EXTENSIONS);\r\n    basicKeyCheck(SystemProperties.USER_HOME);\r\n    basicKeyCheck(SystemProperties.USER_LANGUAGE);\r\n    basicKeyCheck(SystemProperties.USER_NAME);\r\n    basicKeyCheck(SystemProperties.USER_REGION);\r\n    basicKeyCheck(SystemProperties.USER_SCRIPT);\r\n    basicKeyCheck(SystemProperties.USER_TIMEZONE);\r\n    basicKeyCheck(SystemProperties.USER_VARIANT);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\SystemPropertiesTest.java",
  "methodName" : "testGetAwtToolkit",
  "sourceCode" : "@Test\r\nvoid testGetAwtToolkit() {\r\n    assertDoesNotThrow(SystemProperties::getAwtToolkit);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\SystemPropertiesTest.java",
  "methodName" : "testGetBoolean",
  "sourceCode" : "@Test\r\nvoid testGetBoolean() {\r\n    final String key = RandomStringUtils.insecure().next(10);\r\n    final String absentKey = RandomStringUtils.insecure().next(10);\r\n    assertNull(System.getProperty(absentKey));\r\n    try {\r\n        System.setProperty(key, Boolean.toString(Boolean.TRUE));\r\n        assertEquals(Boolean.TRUE, SystemProperties.getBoolean(key, () -> false));\r\n        assertEquals(Boolean.TRUE, SystemProperties.getBoolean(absentKey, () -> Boolean.TRUE));\r\n        assertFalse(SystemProperties.getBoolean(absentKey, () -> false));\r\n        assertFalse(SystemProperties.getBoolean(absentKey, null));\r\n    } finally {\r\n        System.clearProperty(key);\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\SystemPropertiesTest.java",
  "methodName" : "testGetBooleanClass",
  "sourceCode" : "@Test\r\nvoid testGetBooleanClass() {\r\n    final String key = RandomStringUtils.insecure().next(10);\r\n    final String absentKey = RandomStringUtils.insecure().next(10);\r\n    final String keyFull = SIMPLE_NAME + \".\" + key;\r\n    final String absentKeyFull = SIMPLE_NAME + \".\" + absentKey;\r\n    assertNull(System.getProperty(absentKeyFull));\r\n    try {\r\n        System.setProperty(keyFull, Boolean.TRUE.toString());\r\n        assertTrue(SystemProperties.getBoolean(SystemPropertiesTest.class, key, () -> false));\r\n        assertTrue(SystemProperties.getBoolean(SystemPropertiesTest.class, absentKey, () -> true));\r\n        assertFalse(SystemProperties.getBoolean(SystemPropertiesTest.class, absentKey, () -> false));\r\n        assertTrue(SystemProperties.getBoolean(SystemPropertiesTest.class, absentKey, () -> true));\r\n    } finally {\r\n        System.clearProperty(keyFull);\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\SystemPropertiesTest.java",
  "methodName" : "testGetDoesNotThrow",
  "sourceCode" : "@Test\r\nvoid testGetDoesNotThrow() {\r\n    assertDoesNotThrow(SystemProperties::getAppleAwtEnableTemplateImages);\r\n    assertDoesNotThrow(SystemProperties::getAwtToolkit);\r\n    assertDoesNotThrow(SystemProperties::getComSunJndiLdapObjectTrustSerialData);\r\n    assertDoesNotThrow(SystemProperties::getComSunNetHttpServerHttpServerProvider);\r\n    assertDoesNotThrow(SystemProperties::getFileEncoding);\r\n    assertDoesNotThrow(SystemProperties::getFileSeparator);\r\n    assertDoesNotThrow(SystemProperties::getFtpNonProxyHost);\r\n    assertDoesNotThrow(SystemProperties::getFtpProxyHost);\r\n    assertDoesNotThrow(SystemProperties::getFtpProxyPort);\r\n    assertDoesNotThrow(SystemProperties::getHttpAgent);\r\n    assertDoesNotThrow(SystemProperties::getHttpAuthDigestCnonceRepeat);\r\n    assertDoesNotThrow(SystemProperties::getHttpAuthDigestReenabledAlgorithms);\r\n    assertDoesNotThrow(SystemProperties::getHttpAuthDigestValidateProxy);\r\n    assertDoesNotThrow(SystemProperties::getHttpAuthDigestValidateServer);\r\n    assertDoesNotThrow(SystemProperties::getHttpAuthNtlmDomain);\r\n    assertDoesNotThrow(SystemProperties::getHttpKeepAlive);\r\n    assertDoesNotThrow(SystemProperties::getHttpKeepAliveTimeProxy);\r\n    assertDoesNotThrow(SystemProperties::getHttpKeepAliveTimeServer);\r\n    assertDoesNotThrow(SystemProperties::getHttpMaxConnections);\r\n    assertDoesNotThrow(SystemProperties::getHttpMaxRedirects);\r\n    assertDoesNotThrow(SystemProperties::getHttpNonProxyHosts);\r\n    assertDoesNotThrow(SystemProperties::getHttpProxyHost);\r\n    assertDoesNotThrow(SystemProperties::getHttpProxyPort);\r\n    assertDoesNotThrow(SystemProperties::getHttpsProxyHost);\r\n    assertDoesNotThrow(SystemProperties::getHttpsProxyPort);\r\n    assertDoesNotThrow(SystemProperties::getJavaAwtFonts);\r\n    assertDoesNotThrow(SystemProperties::getJavaAwtGraphicsenv);\r\n    assertDoesNotThrow(SystemProperties::getJavaAwtHeadless);\r\n    assertDoesNotThrow(SystemProperties::getJavaAwtPrinterjob);\r\n    assertDoesNotThrow(SystemProperties::getJavaClassPath);\r\n    assertDoesNotThrow(SystemProperties::getJavaClassVersion);\r\n    assertDoesNotThrow(SystemProperties::getJavaCompiler);\r\n    assertDoesNotThrow(SystemProperties::getJavaContentHandlerPkgs);\r\n    assertDoesNotThrow(SystemProperties::getJavaEndorsedDirs);\r\n    assertDoesNotThrow(SystemProperties::getJavaExtDirs);\r\n    assertDoesNotThrow(SystemProperties::getJavaHome);\r\n    assertDoesNotThrow(SystemProperties::getJavaIoTmpdir);\r\n    assertDoesNotThrow(SystemProperties::getJavaLibraryPath);\r\n    assertDoesNotThrow(SystemProperties::getJavaLocaleProviders);\r\n    assertDoesNotThrow(SystemProperties::getJavaLocaleUseOldIsoCodes);\r\n    assertDoesNotThrow(SystemProperties::getJavaNetPreferIpv4Stack);\r\n    assertDoesNotThrow(SystemProperties::getJavaNetPreferIpv6Addresses);\r\n    assertDoesNotThrow(SystemProperties::getJavaNetSocksPassword);\r\n    assertDoesNotThrow(SystemProperties::getJavaNetSocksUserName);\r\n    assertDoesNotThrow(SystemProperties::getJavaNetUseSystemProxies);\r\n    assertDoesNotThrow(SystemProperties::getJavaNioChannelsDefaultThreadPoolInitialSize);\r\n    assertDoesNotThrow(SystemProperties::getJavaNioChannelsDefaultThreadPoolThreadFactory);\r\n    assertDoesNotThrow(SystemProperties::getJavaNioChannelsSpiAsynchronousChannelProvider);\r\n    assertDoesNotThrow(SystemProperties::getJavaNioChannelsSpiSelectorProvider);\r\n    assertDoesNotThrow(SystemProperties::getJavaNioFileSpiDefaultFileSystemProvider);\r\n    assertDoesNotThrow(SystemProperties::getJavaPropertiesDate);\r\n    assertDoesNotThrow(SystemProperties::getJavaProtocolHandlerPkgs);\r\n    assertDoesNotThrow(SystemProperties::getJavaRmiServerCodebase);\r\n    assertDoesNotThrow(SystemProperties::getJavaRmiServerHostName);\r\n    assertDoesNotThrow(SystemProperties::getJavaRmiServerRandomIds);\r\n    assertDoesNotThrow(SystemProperties::getJavaRmiServerRmiClassLoaderSpi);\r\n    assertDoesNotThrow(SystemProperties::getJavaRuntimeName);\r\n    assertDoesNotThrow(SystemProperties::getJavaRuntimeVersion);\r\n    assertDoesNotThrow(SystemProperties::getJavaSecurityAuthLoginConfig);\r\n    assertDoesNotThrow(SystemProperties::getJavaSecurityManager);\r\n    assertDoesNotThrow(SystemProperties::getJavaSpecificationMaintenanceVersion);\r\n    assertDoesNotThrow(SystemProperties::getJavaSpecificationName);\r\n    assertDoesNotThrow(SystemProperties::getJavaSpecificationVendor);\r\n    assertDoesNotThrow((ThrowingSupplier<String>) SystemProperties::getJavaSpecificationVersion);\r\n    assertDoesNotThrow(SystemProperties::getJavaSystemClassLoader);\r\n    assertDoesNotThrow(SystemProperties::getJavaTimeZoneDefaultZoneRulesProvider);\r\n    assertDoesNotThrow(SystemProperties::getJavaUtilConcurrentForkJoinPoolCommonExceptionHandler);\r\n    assertDoesNotThrow(SystemProperties::getJavaUtilConcurrentForkJoinPoolCommonMaximumSpares);\r\n    assertDoesNotThrow(SystemProperties::getJavaUtilConcurrentForkJoinPoolCommonParallelism);\r\n    assertDoesNotThrow(SystemProperties::getJavaUtilConcurrentForkJoinPoolCommonThreadFactory);\r\n    assertDoesNotThrow(SystemProperties::getJavaUtilCurrencyData);\r\n    assertDoesNotThrow(SystemProperties::getJavaUtilLoggingConfigClass);\r\n    assertDoesNotThrow(SystemProperties::getJavaUtilLoggingConfigFile);\r\n    assertDoesNotThrow(SystemProperties::getJavaUtilLoggingSimpleFormatterFormat);\r\n    assertDoesNotThrow(SystemProperties::getJavaUtilPrefsPreferencesFactory);\r\n    assertDoesNotThrow(SystemProperties::getJavaUtilPropertyResourceBundleEncoding);\r\n    assertDoesNotThrow(SystemProperties::getJavaVendor);\r\n    assertDoesNotThrow(SystemProperties::getJavaVendorUrl);\r\n    assertDoesNotThrow(SystemProperties::getJavaVendorVersion);\r\n    assertDoesNotThrow(SystemProperties::getJavaVersion);\r\n    assertDoesNotThrow(SystemProperties::getJavaVersionDate);\r\n    assertDoesNotThrow(SystemProperties::getJavaVmInfo);\r\n    assertDoesNotThrow(SystemProperties::getJavaVmName);\r\n    assertDoesNotThrow(SystemProperties::getJavaVmSpecificationName);\r\n    assertDoesNotThrow(SystemProperties::getJavaVmSpecificationVendor);\r\n    assertDoesNotThrow(SystemProperties::getJavaVmSpecificationVersion);\r\n    assertDoesNotThrow(SystemProperties::getJavaVmVendor);\r\n    assertDoesNotThrow(SystemProperties::getJavaVmVersion);\r\n    assertDoesNotThrow(SystemProperties::getJavaxAccessibilityAssistiveTechnologies);\r\n    assertDoesNotThrow(SystemProperties::getJavaXmlConfigFile);\r\n    assertDoesNotThrow(SystemProperties::getJavaxNetSslSessionCacheSize);\r\n    assertDoesNotThrow(SystemProperties::getJavaxRmiSslClientEnabledCipherSuites);\r\n    assertDoesNotThrow(SystemProperties::getJavaxRmiSslClientEnabledProtocols);\r\n    assertDoesNotThrow(SystemProperties::getJavaxSecurityAuthUseSubjectCredsOnly);\r\n    assertDoesNotThrow(SystemProperties::getJavaxSmartCardIoTerminalFactoryDefaultType);\r\n    assertDoesNotThrow(SystemProperties::getJdbcDrivers);\r\n    assertDoesNotThrow(SystemProperties::getJdkHttpAuthProxyingDisabledSchemes);\r\n    assertDoesNotThrow(SystemProperties::getJdkHttpAuthTunnelingDisabledSchemes);\r\n    assertDoesNotThrow(SystemProperties::getJdkHttpClientAllowRestrictedHeaders);\r\n    assertDoesNotThrow(SystemProperties::getJdkHttpClientAuthRetryLimit);\r\n    assertDoesNotThrow(SystemProperties::getJdkHttpClientBufSize);\r\n    assertDoesNotThrow(SystemProperties::getJdkHttpClientConnectionPoolSize);\r\n    assertDoesNotThrow(SystemProperties::getJdkHttpClientConnectionWindowSize);\r\n    assertDoesNotThrow(SystemProperties::getJdkHttpClientDisableRetryConnect);\r\n    assertDoesNotThrow(SystemProperties::getJdkHttpClientEnableAllMethodRetry);\r\n    assertDoesNotThrow(SystemProperties::getJdkHttpClientEnablePush);\r\n    assertDoesNotThrow(SystemProperties::getJdkHttpClientHpackMaxHeaderTableSize);\r\n    assertDoesNotThrow(SystemProperties::getJdkHttpClientHttpClientLog);\r\n    assertDoesNotThrow(SystemProperties::getJdkHttpClientKeepAliveTimeout);\r\n    assertDoesNotThrow(SystemProperties::getJdkHttpClientKeepAliveTimeoutH2);\r\n    assertDoesNotThrow(SystemProperties::getJdkHttpClientMaxFrameSize);\r\n    assertDoesNotThrow(SystemProperties::getJdkHttpClientMaxStreams);\r\n    assertDoesNotThrow(SystemProperties::getJdkHttpClientReceiveBufferSize);\r\n    assertDoesNotThrow(SystemProperties::getJdkHttpClientRedirectsRetryLimit);\r\n    assertDoesNotThrow(SystemProperties::getJdkHttpClientSendBufferSize);\r\n    assertDoesNotThrow(SystemProperties::getJdkHttpClientWebSocketWriteBufferSize);\r\n    assertDoesNotThrow(SystemProperties::getJdkHttpClientWindowSize);\r\n    assertDoesNotThrow(SystemProperties::getJdkHttpServerMaxConnections);\r\n    assertDoesNotThrow(SystemProperties::getJdkHttpsNegotiateCbt);\r\n    assertDoesNotThrow(SystemProperties::getJdkIncludeInExceptions);\r\n    assertDoesNotThrow(SystemProperties::getJdkInternalHttpClientDisableHostNameVerification);\r\n    assertDoesNotThrow(SystemProperties::getJdkIoPermissionsUseCanonicalPath);\r\n    assertDoesNotThrow(SystemProperties::getJdkJndiLdapObjectFactoriesFilter);\r\n    assertDoesNotThrow(SystemProperties::getJdkJndiObjectFactoriesFilter);\r\n    assertDoesNotThrow(SystemProperties::getJdkJndiRmiObjectFactoriesFilter);\r\n    assertDoesNotThrow(SystemProperties::getJdkModuleMain);\r\n    assertDoesNotThrow(SystemProperties::getJdkModuleMainClass);\r\n    assertDoesNotThrow(SystemProperties::getJdkModulePath);\r\n    assertDoesNotThrow(SystemProperties::getJdkModuleUpgradePath);\r\n    assertDoesNotThrow(SystemProperties::getJdkNetUnixDomainTmpDir);\r\n    assertDoesNotThrow(SystemProperties::getJdkNetUrlClassPathShowIgnoredClassPathEntries);\r\n    assertDoesNotThrow(SystemProperties::getJdkSerialFilter);\r\n    assertDoesNotThrow(SystemProperties::getJdkSerialFilterFactory);\r\n    assertDoesNotThrow(SystemProperties::getJdkTlsClientSignatureSchemes);\r\n    assertDoesNotThrow(SystemProperties::getJdkTlsNamedGroups);\r\n    assertDoesNotThrow(SystemProperties::getJdkTlsServerSignatureSchemes);\r\n    assertDoesNotThrow(SystemProperties::getJdkVirtualThreadSchedulerMaxPoolSize);\r\n    assertDoesNotThrow(SystemProperties::getJdkVirtualThreadSchedulerParallelism);\r\n    assertDoesNotThrow(SystemProperties::getJdkXmlCdataChunkSize);\r\n    assertDoesNotThrow(SystemProperties::getJdkXmlDtdSupport);\r\n    assertDoesNotThrow(SystemProperties::getJdkXmlElementAttributeLimit);\r\n    assertDoesNotThrow(SystemProperties::getJdkXmlEnableExtensionFunctions);\r\n    assertDoesNotThrow(SystemProperties::getJdkXmlEntityExpansionLimit);\r\n    assertDoesNotThrow(SystemProperties::getJdkXmlEntityReplacementLimit);\r\n    assertDoesNotThrow(SystemProperties::getJdkXmlIsStandalone);\r\n    assertDoesNotThrow(SystemProperties::getJdkXmlJdkCatalogResolve);\r\n    assertDoesNotThrow(SystemProperties::getJdkXmlMaxElementDepth);\r\n    assertDoesNotThrow(SystemProperties::getJdkXmlMaxGeneralEntitySizeLimit);\r\n    assertDoesNotThrow(SystemProperties::getJdkXmlMaxOccurLimit);\r\n    assertDoesNotThrow(SystemProperties::getJdkXmlMaxParameterEntitySizeLimit);\r\n    assertDoesNotThrow(SystemProperties::getJdkXmlMaxXmlNameLimit);\r\n    assertDoesNotThrow(SystemProperties::getJdkXmlOverrideDefaultParser);\r\n    assertDoesNotThrow(SystemProperties::getJdkXmlResetSymbolTable);\r\n    assertDoesNotThrow(SystemProperties::getJdkXmlTotalEntitySizeLimit);\r\n    assertDoesNotThrow(SystemProperties::getJdkXmlXsltcIsStandalone);\r\n    assertDoesNotThrow((ThrowingSupplier<String>) SystemProperties::getLineSeparator);\r\n    assertDoesNotThrow(SystemProperties::getNativeEncoding);\r\n    assertDoesNotThrow(SystemProperties::getNetworkAddressCacheNegativeTtl);\r\n    assertDoesNotThrow(SystemProperties::getNetworkAddressCacheStaleTtl);\r\n    assertDoesNotThrow(SystemProperties::getNetworkAddressCacheTtl);\r\n    assertDoesNotThrow(SystemProperties::getOrgJcpXmlDsigSecureValidation);\r\n    assertDoesNotThrow(SystemProperties::getOrgOpenJdkJavaUtilStreamTripwire);\r\n    assertDoesNotThrow(SystemProperties::getOsArch);\r\n    assertDoesNotThrow(SystemProperties::getOsName);\r\n    assertDoesNotThrow(SystemProperties::getOsVersion);\r\n    assertDoesNotThrow(SystemProperties::getPathSeparator);\r\n    assertDoesNotThrow(SystemProperties::getSocksProxyHost);\r\n    assertDoesNotThrow(SystemProperties::getSocksProxyPort);\r\n    assertDoesNotThrow(SystemProperties::getSocksProxyVersion);\r\n    assertDoesNotThrow(SystemProperties::getStdErrEncoding);\r\n    assertDoesNotThrow(SystemProperties::getStdOutEncoding);\r\n    assertDoesNotThrow(SystemProperties::getSunNetHttpServerDrainAmount);\r\n    assertDoesNotThrow(SystemProperties::getSunNetHttpServerIdleInterval);\r\n    assertDoesNotThrow(SystemProperties::getSunNetHttpServerMaxIdleConnections);\r\n    assertDoesNotThrow(SystemProperties::getSunNetHttpServerMaxReqHeaders);\r\n    assertDoesNotThrow(SystemProperties::getSunNetHttpServerMaxReqTime);\r\n    assertDoesNotThrow(SystemProperties::getSunNetHttpServerMaxRspTime);\r\n    assertDoesNotThrow(SystemProperties::getSunNetHttpServerNoDelay);\r\n    assertDoesNotThrow(SystemProperties::getSunSecurityKrb5Principal);\r\n    assertDoesNotThrow(SystemProperties::getUserCountry);\r\n    assertDoesNotThrow(SystemProperties::getUserDir);\r\n    assertDoesNotThrow(SystemProperties::getUserExtensions);\r\n    assertDoesNotThrow(SystemProperties::getUserHome);\r\n    assertDoesNotThrow(SystemProperties::getUserLanguage);\r\n    assertDoesNotThrow((ThrowingSupplier<String>) SystemProperties::getUserName);\r\n    assertDoesNotThrow(SystemProperties::getUserRegion);\r\n    assertDoesNotThrow(SystemProperties::getUserScript);\r\n    assertDoesNotThrow(SystemProperties::getUserTimezone);\r\n    assertDoesNotThrow(SystemProperties::getUserVariant);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\SystemPropertiesTest.java",
  "methodName" : "testGetFileEncoding",
  "sourceCode" : "@Test\r\nvoid testGetFileEncoding() {\r\n    basicKeyCheck(SystemProperties.getFileEncoding());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\SystemPropertiesTest.java",
  "methodName" : "testGetFileSeparator",
  "sourceCode" : "@Test\r\nvoid testGetFileSeparator() {\r\n    assertNotNull(SystemProperties.getFileSeparator());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\SystemPropertiesTest.java",
  "methodName" : "testGetInt",
  "sourceCode" : "@Test\r\nvoid testGetInt() {\r\n    final String key = RandomStringUtils.insecure().next(10);\r\n    final String absentKey = RandomStringUtils.insecure().next(10);\r\n    assertNull(System.getProperty(absentKey));\r\n    try {\r\n        System.setProperty(key, Integer.toString(Integer.MAX_VALUE));\r\n        assertEquals(Integer.MAX_VALUE, SystemProperties.getInt(key, () -> 0));\r\n        assertEquals(Integer.MAX_VALUE, SystemProperties.getInt(absentKey, () -> Integer.MAX_VALUE));\r\n        assertEquals(0, SystemProperties.getInt(absentKey, () -> 0));\r\n        assertEquals(0, SystemProperties.getInt(absentKey, null));\r\n    } finally {\r\n        System.clearProperty(key);\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\SystemPropertiesTest.java",
  "methodName" : "testGetIntClass",
  "sourceCode" : "@Test\r\nvoid testGetIntClass() {\r\n    final String key = RandomStringUtils.insecure().next(10);\r\n    final String absentKey = RandomStringUtils.insecure().next(10);\r\n    final String keyFull = SIMPLE_NAME + \".\" + key;\r\n    final String absentKeyFull = SIMPLE_NAME + \".\" + absentKey;\r\n    assertNull(System.getProperty(absentKeyFull));\r\n    try {\r\n        System.setProperty(keyFull, Long.toString(Integer.MAX_VALUE));\r\n        assertEquals(Integer.MAX_VALUE, SystemProperties.getInt(SystemPropertiesTest.class, key, () -> 0));\r\n        assertEquals(Integer.MAX_VALUE, SystemProperties.getInt(SystemPropertiesTest.class, absentKey, () -> Integer.MAX_VALUE));\r\n        assertEquals(0, SystemProperties.getInt(SystemPropertiesTest.class, absentKey, () -> 0));\r\n        assertEquals(1, SystemProperties.getInt(SystemPropertiesTest.class, absentKey, () -> 1));\r\n    } finally {\r\n        System.clearProperty(keyFull);\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\SystemPropertiesTest.java",
  "methodName" : "testGetJavaAwtFonts",
  "sourceCode" : "@Test\r\nvoid testGetJavaAwtFonts() {\r\n    assertNull(SystemProperties.getJavaAwtFonts());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\SystemPropertiesTest.java",
  "methodName" : "testGetJavaAwtGraphicsenv",
  "sourceCode" : "@Test\r\nvoid testGetJavaAwtGraphicsenv() {\r\n    assertDoesNotThrow(SystemProperties::getJavaAwtGraphicsenv);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\SystemPropertiesTest.java",
  "methodName" : "testGetJavaAwtHeadless",
  "sourceCode" : "@Test\r\nvoid testGetJavaAwtHeadless() {\r\n    assertNull(SystemProperties.getJavaAwtHeadless());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\SystemPropertiesTest.java",
  "methodName" : "testGetJavaAwtPrinterjob",
  "sourceCode" : "@Test\r\nvoid testGetJavaAwtPrinterjob() {\r\n    assertDoesNotThrow(SystemProperties::getJavaAwtPrinterjob);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\SystemPropertiesTest.java",
  "methodName" : "testGetJavaClassPath",
  "sourceCode" : "@Test\r\nvoid testGetJavaClassPath() {\r\n    assertNotNull(SystemProperties.getJavaClassPath());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\SystemPropertiesTest.java",
  "methodName" : "testGetJavaClassVersion",
  "sourceCode" : "@Test\r\nvoid testGetJavaClassVersion() {\r\n    assertNotNull(SystemProperties.getJavaClassVersion());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\SystemPropertiesTest.java",
  "methodName" : "testGetJavaCompiler",
  "sourceCode" : "@Test\r\nvoid testGetJavaCompiler() {\r\n    if (SystemUtils.IS_JAVA_14) {\r\n        // Not in Java 11\r\n        assertNotNull(SystemProperties.getJavaCompiler());\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\SystemPropertiesTest.java",
  "methodName" : "testGetJavaEndorsedDirs",
  "sourceCode" : "@Test\r\nvoid testGetJavaEndorsedDirs() {\r\n    if (isJava11OrGreater()) {\r\n        // Not in Java 11\r\n        assertNull(SystemProperties.getJavaEndorsedDirs());\r\n    } else {\r\n        assertNotNull(SystemProperties.getJavaExtDirs());\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\SystemPropertiesTest.java",
  "methodName" : "testGetJavaExtDirs",
  "sourceCode" : "@Test\r\nvoid testGetJavaExtDirs() {\r\n    if (isJava11OrGreater()) {\r\n        // Not in Java 11\r\n        assertNull(SystemProperties.getJavaExtDirs());\r\n    } else {\r\n        assertNotNull(SystemProperties.getJavaExtDirs());\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\SystemPropertiesTest.java",
  "methodName" : "testGetJavaHome",
  "sourceCode" : "@Test\r\nvoid testGetJavaHome() {\r\n    assertNotNull(SystemProperties.getJavaHome());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\SystemPropertiesTest.java",
  "methodName" : "testGetJavaIoTmpdir",
  "sourceCode" : "@Test\r\nvoid testGetJavaIoTmpdir() {\r\n    assertNotNull(SystemProperties.getJavaIoTmpdir());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\SystemPropertiesTest.java",
  "methodName" : "testGetJavaLibraryPath",
  "sourceCode" : "@Test\r\nvoid testGetJavaLibraryPath() {\r\n    assertNotNull(SystemProperties.getJavaLibraryPath());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\SystemPropertiesTest.java",
  "methodName" : "testGetJavaLocaleProviders",
  "sourceCode" : "@Test\r\nvoid testGetJavaLocaleProviders() {\r\n    assumeTrue(SystemUtils.isJavaVersionAtLeast(JavaVersion.JAVA_9));\r\n    // default is null\r\n    assertNull(SystemProperties.getJavaLocaleProviders(), SystemProperties.getJavaVersion());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\SystemPropertiesTest.java",
  "methodName" : "testGetJavaRuntimeName",
  "sourceCode" : "@Test\r\nvoid testGetJavaRuntimeName() {\r\n    assertNotNull(SystemProperties.getJavaRuntimeName());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\SystemPropertiesTest.java",
  "methodName" : "testGetJavaRuntimeVersion",
  "sourceCode" : "@Test\r\nvoid testGetJavaRuntimeVersion() {\r\n    assertNotNull(SystemProperties.getJavaRuntimeVersion());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\SystemPropertiesTest.java",
  "methodName" : "testGetJavaSpecificationName",
  "sourceCode" : "@Test\r\nvoid testGetJavaSpecificationName() {\r\n    assertNotNull(SystemProperties.getJavaSpecificationName());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\SystemPropertiesTest.java",
  "methodName" : "testGetJavaSpecificationVendor",
  "sourceCode" : "@Test\r\nvoid testGetJavaSpecificationVendor() {\r\n    assertNotNull(SystemProperties.getJavaSpecificationVendor());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\SystemPropertiesTest.java",
  "methodName" : "testGetJavaSpecificationVersion",
  "sourceCode" : "@Test\r\nvoid testGetJavaSpecificationVersion() {\r\n    assertNotNull(SystemProperties.getJavaSpecificationVersion());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\SystemPropertiesTest.java",
  "methodName" : "testGetJavaSpecificationVersionSupplier",
  "sourceCode" : "@Test\r\nvoid testGetJavaSpecificationVersionSupplier() {\r\n    assertNotNull(SystemProperties.getJavaSpecificationVersion(\"99.0\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\SystemPropertiesTest.java",
  "methodName" : "testGetJavaUtilPrefsPreferencesFactory",
  "sourceCode" : "@Test\r\nvoid testGetJavaUtilPrefsPreferencesFactory() {\r\n    assertNull(SystemProperties.getJavaUtilPrefsPreferencesFactory());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\SystemPropertiesTest.java",
  "methodName" : "testGetJavaVendor",
  "sourceCode" : "@Test\r\nvoid testGetJavaVendor() {\r\n    assertNotNull(SystemProperties.getJavaVendor());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\SystemPropertiesTest.java",
  "methodName" : "testGetJavaVendorUrl",
  "sourceCode" : "@Test\r\nvoid testGetJavaVendorUrl() {\r\n    assertNotNull(SystemProperties.getJavaVendorUrl());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\SystemPropertiesTest.java",
  "methodName" : "testGetJavaVersion",
  "sourceCode" : "@Test\r\nvoid testGetJavaVersion() {\r\n    assertNotNull(SystemProperties.getJavaVersion());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\SystemPropertiesTest.java",
  "methodName" : "testGetJavaVmInfo",
  "sourceCode" : "@Test\r\nvoid testGetJavaVmInfo() {\r\n    assertNotNull(SystemProperties.getJavaVmInfo());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\SystemPropertiesTest.java",
  "methodName" : "testGetJavaVmName",
  "sourceCode" : "@Test\r\nvoid testGetJavaVmName() {\r\n    assertNotNull(SystemProperties.getJavaVmName());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\SystemPropertiesTest.java",
  "methodName" : "testGetJavaVmSpecificationName",
  "sourceCode" : "@Test\r\nvoid testGetJavaVmSpecificationName() {\r\n    assertNotNull(SystemProperties.getJavaVmSpecificationName());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\SystemPropertiesTest.java",
  "methodName" : "testGetJavaVmSpecificationVendor",
  "sourceCode" : "@Test\r\nvoid testGetJavaVmSpecificationVendor() {\r\n    assertNotNull(SystemProperties.getJavaVmSpecificationVendor());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\SystemPropertiesTest.java",
  "methodName" : "testGetJavaVmSpecificationVersion",
  "sourceCode" : "@Test\r\nvoid testGetJavaVmSpecificationVersion() {\r\n    assertNotNull(SystemProperties.getJavaVmSpecificationVersion());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\SystemPropertiesTest.java",
  "methodName" : "testGetJavaVmVendor",
  "sourceCode" : "@Test\r\nvoid testGetJavaVmVendor() {\r\n    assertNotNull(SystemProperties.getJavaVmVendor());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\SystemPropertiesTest.java",
  "methodName" : "testGetJavaVmVersion",
  "sourceCode" : "@Test\r\nvoid testGetJavaVmVersion() {\r\n    assertNotNull(SystemProperties.getJavaVmVersion());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\SystemPropertiesTest.java",
  "methodName" : "testGetLineSeparator",
  "sourceCode" : "@Test\r\nvoid testGetLineSeparator() {\r\n    assertNotNull(SystemProperties.getLineSeparator());\r\n    assertNotNull(SystemProperties.getLineSeparator(null));\r\n    assertNotNull(SystemProperties.getLineSeparator(() -> \"\"));\r\n    assertNotNull(SystemProperties.getLineSeparator(() -> \"\\n\"));\r\n    assertNotNull(SystemProperties.getLineSeparator(() -> null));\r\n    assertNotNull(SystemProperties.getLineSeparator(null));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\SystemPropertiesTest.java",
  "methodName" : "testGetLong",
  "sourceCode" : "@Test\r\nvoid testGetLong() {\r\n    final String key = RandomStringUtils.insecure().next(10);\r\n    final String absentKey = RandomStringUtils.insecure().next(10);\r\n    assertNull(System.getProperty(absentKey));\r\n    try {\r\n        System.setProperty(key, Long.toString(Long.MAX_VALUE));\r\n        assertEquals(Long.MAX_VALUE, SystemProperties.getLong(key, () -> 0));\r\n        assertEquals(Long.MAX_VALUE, SystemProperties.getLong(absentKey, () -> Long.MAX_VALUE));\r\n        assertEquals(0, SystemProperties.getLong(absentKey, () -> 0));\r\n        assertEquals(0, SystemProperties.getLong(absentKey, null));\r\n    } finally {\r\n        System.clearProperty(key);\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\SystemPropertiesTest.java",
  "methodName" : "testGetLongClass",
  "sourceCode" : "@Test\r\nvoid testGetLongClass() {\r\n    final String key = RandomStringUtils.insecure().next(10);\r\n    final String absentKey = RandomStringUtils.insecure().next(10);\r\n    final String keyFull = SIMPLE_NAME + \".\" + key;\r\n    final String absentKeyFull = SIMPLE_NAME + \".\" + absentKey;\r\n    assertNull(System.getProperty(absentKeyFull));\r\n    try {\r\n        System.setProperty(keyFull, Long.toString(Long.MAX_VALUE));\r\n        assertEquals(Long.MAX_VALUE, SystemProperties.getLong(SystemPropertiesTest.class, key, () -> 0));\r\n        assertEquals(Long.MAX_VALUE, SystemProperties.getLong(SystemPropertiesTest.class, absentKey, () -> Long.MAX_VALUE));\r\n        assertEquals(0, SystemProperties.getLong(SystemPropertiesTest.class, absentKey, () -> 0));\r\n        assertEquals(1, SystemProperties.getLong(SystemPropertiesTest.class, absentKey, () -> 1));\r\n    } finally {\r\n        System.clearProperty(keyFull);\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\SystemPropertiesTest.java",
  "methodName" : "testGetOsArch",
  "sourceCode" : "@Test\r\nvoid testGetOsArch() {\r\n    assertNotNull(SystemProperties.getOsArch());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\SystemPropertiesTest.java",
  "methodName" : "testGetOsName",
  "sourceCode" : "@Test\r\nvoid testGetOsName() {\r\n    assertNotNull(SystemProperties.getOsName());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\SystemPropertiesTest.java",
  "methodName" : "testGetOsVersion",
  "sourceCode" : "@Test\r\nvoid testGetOsVersion() {\r\n    assertNotNull(SystemProperties.getOsVersion());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\SystemPropertiesTest.java",
  "methodName" : "testGetPathSeparator",
  "sourceCode" : "@Test\r\nvoid testGetPathSeparator() {\r\n    assertNotNull(SystemProperties.getPathSeparator());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\SystemPropertiesTest.java",
  "methodName" : "testGetProperty",
  "sourceCode" : "@Test\r\nvoid testGetProperty() {\r\n    assertNull(SystemProperties.getProperty(null));\r\n    assertNull(SystemProperties.getProperty(StringUtils.EMPTY));\r\n    assertEquals(\"value1\", SystemProperties.getProperty(KEY_SPACE_1));\r\n    assertEquals(\"value2\", SystemProperties.getProperty(KEY_TAB_1));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\SystemPropertiesTest.java",
  "methodName" : "testGetPropertyStringString",
  "sourceCode" : "@Test\r\nvoid testGetPropertyStringString() {\r\n    assertNull(SystemProperties.getProperty(null, StringUtils.NULL));\r\n    assertNull(SystemProperties.getProperty(StringUtils.EMPTY, StringUtils.NULL));\r\n    assertEquals(\"value1\", SystemProperties.getProperty(KEY_SPACE_1, StringUtils.NULL));\r\n    assertEquals(\"value2\", SystemProperties.getProperty(\"\\t\", StringUtils.NULL));\r\n    assertEquals(\"x\", SystemProperties.getProperty(null, \"x\"));\r\n    assertEquals(\"x\", SystemProperties.getProperty(StringUtils.EMPTY, \"x\"));\r\n    assertEquals(\"value1\", SystemProperties.getProperty(KEY_SPACE_1, \"v\"));\r\n    assertEquals(\"value2\", SystemProperties.getProperty(\"\\t\", \"v\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\SystemPropertiesTest.java",
  "methodName" : "testGetPropertyStringSupplier",
  "sourceCode" : "@Test\r\nvoid testGetPropertyStringSupplier() {\r\n    assertNull(SystemProperties.getProperty(null, (Supplier<String>) null));\r\n    assertNull(SystemProperties.getProperty(StringUtils.EMPTY, (Supplier<String>) null));\r\n    assertEquals(\"value1\", SystemProperties.getProperty(KEY_SPACE_1, (Supplier<String>) null));\r\n    assertEquals(\"value2\", SystemProperties.getProperty(\"\\t\", (Supplier<String>) null));\r\n    assertEquals(\"x\", SystemProperties.getProperty(null, () -> \"x\"));\r\n    assertEquals(\"x\", SystemProperties.getProperty(StringUtils.EMPTY, () -> \"x\"));\r\n    assertEquals(\"value1\", SystemProperties.getProperty(KEY_SPACE_1, () -> \"v\"));\r\n    assertEquals(\"value2\", SystemProperties.getProperty(\"\\t\", () -> \"v\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\SystemPropertiesTest.java",
  "methodName" : "testGetUserCountry",
  "sourceCode" : "@Test\r\nvoid testGetUserCountry() {\r\n    assertDoesNotThrow(SystemProperties::getUserCountry);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\SystemPropertiesTest.java",
  "methodName" : "testGetUserDir",
  "sourceCode" : "@Test\r\nvoid testGetUserDir() {\r\n    assertNotNull(SystemProperties.getUserDir());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\SystemPropertiesTest.java",
  "methodName" : "testGetUserHome",
  "sourceCode" : "@Test\r\nvoid testGetUserHome() {\r\n    assertNotNull(SystemProperties.getUserHome());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\SystemPropertiesTest.java",
  "methodName" : "testGetUserLanguage",
  "sourceCode" : "@Test\r\nvoid testGetUserLanguage() {\r\n    assertNotNull(SystemProperties.getUserLanguage());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\SystemPropertiesTest.java",
  "methodName" : "testGetUserName",
  "sourceCode" : "@Test\r\nvoid testGetUserName() {\r\n    assertNotNull(SystemProperties.getUserName());\r\n    assertNotNull(SystemProperties.getUserName(\"\"));\r\n    assertNotNull(SystemProperties.getUserName(\"User\"));\r\n    assertNotNull(SystemProperties.getUserName(null));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\SystemPropertiesTest.java",
  "methodName" : "testGetUserTimezone",
  "sourceCode" : "@Test\r\nvoid testGetUserTimezone() {\r\n    assertDoesNotThrow(SystemProperties::getUserTimezone);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\SystemPropertiesTest.java",
  "methodName" : "testIsPropertySet",
  "sourceCode" : "@ParameterizedTest\r\n@ValueSource(strings = { KEY_SPACE_1, KEY_TAB_1 })\r\nvoid testIsPropertySet(final String property) {\r\n    assertTrue(SystemProperties.isPropertySet(property));\r\n}",
  "annotations" : [ "ParameterizedTest" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\SystemPropertiesTest.java",
  "methodName" : "testIsPropertySetEdges",
  "sourceCode" : "@Test\r\nvoid testIsPropertySetEdges() {\r\n    assertFalse(SystemProperties.isPropertySet(StringUtils.NULL));\r\n    assertFalse(SystemProperties.isPropertySet(StringUtils.EMPTY));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\SystemUtilsTest.java",
  "methodName" : "test_IS_JAVA",
  "sourceCode" : "@Test\r\n@SuppressWarnings(\"deprecation\")\r\nvoid test_IS_JAVA() throws Exception {\r\n    final String javaVersion = SystemUtils.JAVA_VERSION;\r\n    final int lastSupportedVersion = getLastSupportedJavaVersion();\r\n    if (javaVersion == null) {\r\n        assertFalse(SystemUtils.IS_JAVA_1_1);\r\n        assertFalse(SystemUtils.IS_JAVA_1_2);\r\n        assertFalse(SystemUtils.IS_JAVA_1_3);\r\n        assertFalse(SystemUtils.IS_JAVA_1_4);\r\n        assertFalse(SystemUtils.IS_JAVA_1_5);\r\n        assertFalse(SystemUtils.IS_JAVA_1_6);\r\n        assertFalse(SystemUtils.IS_JAVA_1_7);\r\n        assertFalse(SystemUtils.IS_JAVA_1_8);\r\n        assertFalse(SystemUtils.IS_JAVA_1_9);\r\n        assertFalse(SystemUtils.IS_JAVA_10);\r\n        assertFalse(SystemUtils.IS_JAVA_11);\r\n        assertFalse(SystemUtils.IS_JAVA_12);\r\n        assertFalse(SystemUtils.IS_JAVA_13);\r\n        assertFalse(SystemUtils.IS_JAVA_14);\r\n        assertFalse(SystemUtils.IS_JAVA_15);\r\n        assertFalse(SystemUtils.IS_JAVA_16);\r\n        assertFalse(SystemUtils.IS_JAVA_17);\r\n        assertFalse(SystemUtils.IS_JAVA_18);\r\n        assertFalse(SystemUtils.IS_JAVA_19);\r\n        assertFalse(SystemUtils.IS_JAVA_20);\r\n        assertFalse(SystemUtils.IS_JAVA_21);\r\n        assertFalse(SystemUtils.IS_JAVA_22);\r\n        assertFalse(SystemUtils.IS_JAVA_23);\r\n        for (int version = 9; version <= lastSupportedVersion; version++) {\r\n            assertFalse(getIS_JAVA(version));\r\n        }\r\n    } else if (javaVersion.startsWith(\"1.8\")) {\r\n        assertFalse(SystemUtils.IS_JAVA_1_1);\r\n        assertFalse(SystemUtils.IS_JAVA_1_2);\r\n        assertFalse(SystemUtils.IS_JAVA_1_3);\r\n        assertFalse(SystemUtils.IS_JAVA_1_4);\r\n        assertFalse(SystemUtils.IS_JAVA_1_5);\r\n        assertFalse(SystemUtils.IS_JAVA_1_6);\r\n        assertFalse(SystemUtils.IS_JAVA_1_7);\r\n        assertTrue(SystemUtils.IS_JAVA_1_8);\r\n        assertFalse(SystemUtils.IS_JAVA_1_9);\r\n        assertFalse(SystemUtils.IS_JAVA_10);\r\n        assertFalse(SystemUtils.IS_JAVA_11);\r\n        assertFalse(SystemUtils.IS_JAVA_12);\r\n        assertFalse(SystemUtils.IS_JAVA_13);\r\n        assertFalse(SystemUtils.IS_JAVA_14);\r\n        assertFalse(SystemUtils.IS_JAVA_15);\r\n        assertFalse(SystemUtils.IS_JAVA_16);\r\n        assertFalse(SystemUtils.IS_JAVA_17);\r\n        assertFalse(SystemUtils.IS_JAVA_18);\r\n        assertFalse(SystemUtils.IS_JAVA_19);\r\n        assertFalse(SystemUtils.IS_JAVA_20);\r\n        assertFalse(SystemUtils.IS_JAVA_21);\r\n        assertFalse(SystemUtils.IS_JAVA_22);\r\n        assertFalse(SystemUtils.IS_JAVA_23);\r\n        for (int version = 9; version <= lastSupportedVersion; version++) {\r\n            assertFalse(getIS_JAVA(version));\r\n        }\r\n    } else if (!javaVersion.startsWith(\"1.\")) {\r\n        assertFalse(SystemUtils.IS_JAVA_1_1);\r\n        assertFalse(SystemUtils.IS_JAVA_1_2);\r\n        assertFalse(SystemUtils.IS_JAVA_1_3);\r\n        assertFalse(SystemUtils.IS_JAVA_1_4);\r\n        assertFalse(SystemUtils.IS_JAVA_1_5);\r\n        assertFalse(SystemUtils.IS_JAVA_1_6);\r\n        assertFalse(SystemUtils.IS_JAVA_1_7);\r\n        assertFalse(SystemUtils.IS_JAVA_1_8);\r\n        assertEquals(javaVersion.startsWith(\"9\"), SystemUtils.IS_JAVA_1_9);\r\n        for (int version = 9; version <= lastSupportedVersion; version++) {\r\n            assertEquals(javaVersion.startsWith(\"\" + version), getIS_JAVA(version));\r\n        }\r\n    } else {\r\n        System.out.println(\"Can't test IS_JAVA value: \" + javaVersion);\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\SystemUtilsTest.java",
  "methodName" : "test_IS_OS",
  "sourceCode" : "@Test\r\nvoid test_IS_OS() {\r\n    final String osName = System.getProperty(\"os.name\");\r\n    if (osName == null) {\r\n        assertFalse(SystemUtils.IS_OS_WINDOWS);\r\n        assertFalse(SystemUtils.IS_OS_UNIX);\r\n        assertFalse(SystemUtils.IS_OS_SOLARIS);\r\n        assertFalse(SystemUtils.IS_OS_LINUX);\r\n        assertFalse(SystemUtils.IS_OS_MAC_OSX);\r\n        assertFalse(SystemUtils.IS_OS_NETWARE);\r\n    } else if (osName.startsWith(\"Windows\")) {\r\n        assertTrue(SystemUtils.IS_OS_WINDOWS);\r\n        assertFalse(SystemUtils.IS_OS_ANDROID);\r\n        assertFalse(SystemUtils.IS_OS_UNIX);\r\n        assertFalse(SystemUtils.IS_OS_NETWARE);\r\n    } else if (osName.startsWith(\"Solaris\")) {\r\n        assertTrue(SystemUtils.IS_OS_SOLARIS);\r\n        assertTrue(SystemUtils.IS_OS_UNIX);\r\n        assertFalse(SystemUtils.IS_OS_ANDROID);\r\n        assertFalse(SystemUtils.IS_OS_WINDOWS);\r\n        assertFalse(SystemUtils.IS_OS_NETWARE);\r\n    } else if (osName.toLowerCase(Locale.ENGLISH).startsWith(\"linux\")) {\r\n        assertTrue(SystemUtils.IS_OS_LINUX);\r\n        assertTrue(SystemUtils.IS_OS_UNIX);\r\n        assertFalse(SystemUtils.IS_OS_WINDOWS);\r\n        assertFalse(SystemUtils.IS_OS_NETWARE);\r\n    } else if (osName.startsWith(\"Mac OS X\")) {\r\n        assertTrue(SystemUtils.IS_OS_MAC_OSX);\r\n        assertTrue(SystemUtils.IS_OS_UNIX);\r\n        assertFalse(SystemUtils.IS_OS_ANDROID);\r\n        assertFalse(SystemUtils.IS_OS_WINDOWS);\r\n        assertFalse(SystemUtils.IS_OS_NETWARE);\r\n        // @formatter:off\r\n        final boolean[] macOsValues = { SystemUtils.IS_OS_MAC_OSX_BIG_SUR, SystemUtils.IS_OS_MAC_OSX_CATALINA, SystemUtils.IS_OS_MAC_OSX_CHEETAH, SystemUtils.IS_OS_MAC_OSX_EL_CAPITAN, SystemUtils.IS_OS_MAC_OSX_HIGH_SIERRA, SystemUtils.IS_OS_MAC_OSX_JAGUAR, SystemUtils.IS_OS_MAC_OSX_LEOPARD, SystemUtils.IS_OS_MAC_OSX_LION, SystemUtils.IS_OS_MAC_OSX_MAVERICKS, SystemUtils.IS_OS_MAC_OSX_MOJAVE, SystemUtils.IS_OS_MAC_OSX_MONTEREY, SystemUtils.IS_OS_MAC_OSX_MOUNTAIN_LION, SystemUtils.IS_OS_MAC_OSX_PANTHER, SystemUtils.IS_OS_MAC_OSX_PUMA, SystemUtils.IS_OS_MAC_OSX_SEQUOIA, SystemUtils.IS_OS_MAC_OSX_SIERRA, SystemUtils.IS_OS_MAC_OSX_SNOW_LEOPARD, SystemUtils.IS_OS_MAC_OSX_SONOMA, SystemUtils.IS_OS_MAC_OSX_TIGER, SystemUtils.IS_OS_MAC_OSX_VENTURA, SystemUtils.IS_OS_MAC_OSX_YOSEMITE };\r\n        // @formatter:on\r\n        if (BooleanUtils.or(macOsValues)) {\r\n            // If one is true, then only one should be true.\r\n            assertTrue(BooleanUtils.xor(macOsValues));\r\n        }\r\n    } else if (osName.startsWith(\"OS/2\")) {\r\n        assertTrue(SystemUtils.IS_OS_OS2);\r\n        assertFalse(SystemUtils.IS_OS_UNIX);\r\n        assertFalse(SystemUtils.IS_OS_ANDROID);\r\n        assertFalse(SystemUtils.IS_OS_WINDOWS);\r\n        assertFalse(SystemUtils.IS_OS_NETWARE);\r\n    } else if (osName.startsWith(\"SunOS\")) {\r\n        assertTrue(SystemUtils.IS_OS_SUN_OS);\r\n        assertTrue(SystemUtils.IS_OS_UNIX);\r\n        assertFalse(SystemUtils.IS_OS_ANDROID);\r\n        assertFalse(SystemUtils.IS_OS_WINDOWS);\r\n        assertFalse(SystemUtils.IS_OS_NETWARE);\r\n    } else if (osName.startsWith(\"FreeBSD\")) {\r\n        assertTrue(SystemUtils.IS_OS_FREE_BSD);\r\n        assertTrue(SystemUtils.IS_OS_UNIX);\r\n        assertFalse(SystemUtils.IS_OS_ANDROID);\r\n        assertFalse(SystemUtils.IS_OS_WINDOWS);\r\n        assertFalse(SystemUtils.IS_OS_NETWARE);\r\n    } else {\r\n        System.err.println(\"Can't test IS_OS_ value: \" + osName);\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\SystemUtilsTest.java",
  "methodName" : "test_IS_zOS",
  "sourceCode" : "@Test\r\nvoid test_IS_zOS() {\r\n    final String osName = System.getProperty(\"os.name\");\r\n    if (osName == null) {\r\n        assertFalse(SystemUtils.IS_OS_ZOS);\r\n    } else if (osName.contains(\"z/OS\")) {\r\n        assertFalse(SystemUtils.IS_OS_WINDOWS);\r\n        assertTrue(SystemUtils.IS_OS_ZOS);\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\SystemUtilsTest.java",
  "methodName" : "test_USER_NAME",
  "sourceCode" : "/**\r\n * Assumes no security manager exists.\r\n */\r\n@Test\r\nvoid test_USER_NAME() {\r\n    assertEquals(System.getProperty(\"user.name\"), SystemUtils.USER_NAME);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\SystemUtilsTest.java",
  "methodName" : "testConstructor",
  "sourceCode" : "@Test\r\nvoid testConstructor() {\r\n    assertNotNull(new SystemUtils());\r\n    final Constructor<?>[] cons = SystemUtils.class.getDeclaredConstructors();\r\n    assertEquals(1, cons.length);\r\n    assertTrue(Modifier.isPublic(cons[0].getModifiers()));\r\n    assertTrue(Modifier.isPublic(SystemUtils.class.getModifiers()));\r\n    assertFalse(Modifier.isFinal(SystemUtils.class.getModifiers()));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\SystemUtilsTest.java",
  "methodName" : "testGetEnvironmentVariableAbsent",
  "sourceCode" : "@Test\r\nvoid testGetEnvironmentVariableAbsent() {\r\n    final String name = \"THIS_ENV_VAR_SHOULD_NOT_EXIST_FOR_THIS_TEST_TO_PASS\";\r\n    final String expected = System.getenv(name);\r\n    assertNull(expected);\r\n    final String value = SystemUtils.getEnvironmentVariable(name, \"DEFAULT\");\r\n    assertEquals(\"DEFAULT\", value);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\SystemUtilsTest.java",
  "methodName" : "testGetEnvironmentVariablePresent",
  "sourceCode" : "@Test\r\nvoid testGetEnvironmentVariablePresent() {\r\n    final String name = \"PATH\";\r\n    final String expected = System.getenv(name);\r\n    final String value = SystemUtils.getEnvironmentVariable(name, null);\r\n    assertEquals(expected, value);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\SystemUtilsTest.java",
  "methodName" : "testGetHostName",
  "sourceCode" : "@Test\r\nvoid testGetHostName() {\r\n    final String hostName = SystemUtils.getHostName();\r\n    final String expected = SystemUtils.IS_OS_WINDOWS ? System.getenv(\"COMPUTERNAME\") : System.getenv(\"HOSTNAME\");\r\n    assertEquals(expected, hostName);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\SystemUtilsTest.java",
  "methodName" : "testGetJavaHome",
  "sourceCode" : "/**\r\n * Assumes no security manager exists.\r\n */\r\n@Test\r\nvoid testGetJavaHome() {\r\n    final File dir = SystemUtils.getJavaHome();\r\n    assertNotNull(dir);\r\n    assertTrue(dir.exists());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\SystemUtilsTest.java",
  "methodName" : "testGetJavaHomePath",
  "sourceCode" : "/**\r\n * Assumes no security manager exists.\r\n */\r\n@Test\r\nvoid testGetJavaHomePath() {\r\n    final Path dir = SystemUtils.getJavaHomePath();\r\n    assertNotNull(dir);\r\n    assertTrue(Files.exists(dir));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\SystemUtilsTest.java",
  "methodName" : "testGetJavaIoTmpDir",
  "sourceCode" : "/**\r\n * Assumes no security manager exists.\r\n */\r\n@Test\r\nvoid testGetJavaIoTmpDir() {\r\n    final File dir = SystemUtils.getJavaIoTmpDir();\r\n    assertNotNull(dir);\r\n    assertTrue(dir.exists());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\SystemUtilsTest.java",
  "methodName" : "testGetJavaIoTmpDirPath",
  "sourceCode" : "/**\r\n * Assumes no security manager exists.\r\n */\r\n@Test\r\nvoid testGetJavaIoTmpDirPath() {\r\n    final Path dir = SystemUtils.getJavaIoTmpDirPath();\r\n    assertNotNull(dir);\r\n    assertTrue(Files.exists(dir));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\SystemUtilsTest.java",
  "methodName" : "testGetUserDir",
  "sourceCode" : "/**\r\n * Assumes no security manager exists.\r\n */\r\n@Test\r\nvoid testGetUserDir() {\r\n    final File dir = SystemUtils.getUserDir();\r\n    assertNotNull(dir);\r\n    assertTrue(dir.exists());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\SystemUtilsTest.java",
  "methodName" : "testGetUserDirPath",
  "sourceCode" : "/**\r\n * Assumes no security manager exists.\r\n */\r\n@Test\r\nvoid testGetUserDirPath() {\r\n    final Path dir = SystemUtils.getUserDirPath();\r\n    assertNotNull(dir);\r\n    assertTrue(Files.exists(dir));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\SystemUtilsTest.java",
  "methodName" : "testGetUserHome",
  "sourceCode" : "/**\r\n * Assumes no security manager exists.\r\n */\r\n@Test\r\nvoid testGetUserHome() {\r\n    final File dir = SystemUtils.getUserHome();\r\n    assertNotNull(dir);\r\n    assertTrue(dir.exists());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\SystemUtilsTest.java",
  "methodName" : "testGetUserHomePath",
  "sourceCode" : "/**\r\n * Assumes no security manager exists.\r\n */\r\n@Test\r\nvoid testGetUserHomePath() {\r\n    final Path dir = SystemUtils.getUserHomePath();\r\n    assertNotNull(dir);\r\n    assertTrue(Files.exists(dir));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\SystemUtilsTest.java",
  "methodName" : "testGetUserName",
  "sourceCode" : "/**\r\n * Assumes no security manager exists.\r\n */\r\n@Test\r\nvoid testGetUserName() {\r\n    assertEquals(System.getProperty(\"user.name\"), SystemUtils.getUserName());\r\n    // Don't overwrite the system property in this test in case something goes awfully wrong.\r\n    assertEquals(System.getProperty(\"user.name\", \"foo\"), SystemUtils.getUserName(\"foo\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\SystemUtilsTest.java",
  "methodName" : "testIsJavaVersionAtLeast",
  "sourceCode" : "@Test\r\nvoid testIsJavaVersionAtLeast() {\r\n    if (SystemUtils.IS_JAVA_1_8) {\r\n        assertTrue(SystemUtils.isJavaVersionAtLeast(JavaVersion.JAVA_1_1));\r\n        assertTrue(SystemUtils.isJavaVersionAtLeast(JavaVersion.JAVA_1_2));\r\n        assertTrue(SystemUtils.isJavaVersionAtLeast(JavaVersion.JAVA_1_3));\r\n        assertTrue(SystemUtils.isJavaVersionAtLeast(JavaVersion.JAVA_1_4));\r\n        assertTrue(SystemUtils.isJavaVersionAtLeast(JavaVersion.JAVA_1_5));\r\n        assertTrue(SystemUtils.isJavaVersionAtLeast(JavaVersion.JAVA_1_6));\r\n        assertTrue(SystemUtils.isJavaVersionAtLeast(JavaVersion.JAVA_1_7));\r\n        assertTrue(SystemUtils.isJavaVersionAtLeast(JavaVersion.JAVA_1_8));\r\n        assertFalse(SystemUtils.isJavaVersionAtLeast(JavaVersion.JAVA_9));\r\n        assertFalse(SystemUtils.isJavaVersionAtLeast(JavaVersion.JAVA_10));\r\n        assertFalse(SystemUtils.isJavaVersionAtLeast(JavaVersion.JAVA_11));\r\n        assertFalse(SystemUtils.isJavaVersionAtLeast(JavaVersion.JAVA_12));\r\n        assertFalse(SystemUtils.isJavaVersionAtLeast(JavaVersion.JAVA_13));\r\n        assertFalse(SystemUtils.isJavaVersionAtLeast(JavaVersion.JAVA_14));\r\n        assertFalse(SystemUtils.isJavaVersionAtLeast(JavaVersion.JAVA_15));\r\n        assertFalse(SystemUtils.isJavaVersionAtLeast(JavaVersion.JAVA_16));\r\n        assertFalse(SystemUtils.isJavaVersionAtLeast(JavaVersion.JAVA_17));\r\n        assertFalse(SystemUtils.isJavaVersionAtLeast(JavaVersion.JAVA_18));\r\n        assertFalse(SystemUtils.isJavaVersionAtLeast(JavaVersion.JAVA_19));\r\n        assertFalse(SystemUtils.isJavaVersionAtLeast(JavaVersion.JAVA_20));\r\n        assertFalse(SystemUtils.isJavaVersionAtLeast(JavaVersion.JAVA_21));\r\n        assertFalse(SystemUtils.isJavaVersionAtLeast(JavaVersion.JAVA_22));\r\n        assertFalse(SystemUtils.isJavaVersionAtLeast(JavaVersion.JAVA_23));\r\n        assertFalse(SystemUtils.isJavaVersionAtLeast(JavaVersion.JAVA_24));\r\n    } else if (SystemUtils.IS_JAVA_9) {\r\n        assertTrue(SystemUtils.isJavaVersionAtLeast(JavaVersion.JAVA_1_1));\r\n        assertTrue(SystemUtils.isJavaVersionAtLeast(JavaVersion.JAVA_1_2));\r\n        assertTrue(SystemUtils.isJavaVersionAtLeast(JavaVersion.JAVA_1_3));\r\n        assertTrue(SystemUtils.isJavaVersionAtLeast(JavaVersion.JAVA_1_4));\r\n        assertTrue(SystemUtils.isJavaVersionAtLeast(JavaVersion.JAVA_1_5));\r\n        assertTrue(SystemUtils.isJavaVersionAtLeast(JavaVersion.JAVA_1_6));\r\n        assertTrue(SystemUtils.isJavaVersionAtLeast(JavaVersion.JAVA_1_7));\r\n        assertTrue(SystemUtils.isJavaVersionAtLeast(JavaVersion.JAVA_1_8));\r\n        assertTrue(SystemUtils.isJavaVersionAtLeast(JavaVersion.JAVA_9));\r\n        assertFalse(SystemUtils.isJavaVersionAtLeast(JavaVersion.JAVA_10));\r\n        assertFalse(SystemUtils.isJavaVersionAtLeast(JavaVersion.JAVA_11));\r\n        assertFalse(SystemUtils.isJavaVersionAtLeast(JavaVersion.JAVA_12));\r\n        assertFalse(SystemUtils.isJavaVersionAtLeast(JavaVersion.JAVA_13));\r\n        assertFalse(SystemUtils.isJavaVersionAtLeast(JavaVersion.JAVA_14));\r\n        assertFalse(SystemUtils.isJavaVersionAtLeast(JavaVersion.JAVA_15));\r\n        assertFalse(SystemUtils.isJavaVersionAtLeast(JavaVersion.JAVA_16));\r\n        assertFalse(SystemUtils.isJavaVersionAtLeast(JavaVersion.JAVA_17));\r\n        assertFalse(SystemUtils.isJavaVersionAtLeast(JavaVersion.JAVA_18));\r\n        assertFalse(SystemUtils.isJavaVersionAtLeast(JavaVersion.JAVA_19));\r\n        assertFalse(SystemUtils.isJavaVersionAtLeast(JavaVersion.JAVA_20));\r\n        assertFalse(SystemUtils.isJavaVersionAtLeast(JavaVersion.JAVA_21));\r\n        assertFalse(SystemUtils.isJavaVersionAtLeast(JavaVersion.JAVA_22));\r\n        assertFalse(SystemUtils.isJavaVersionAtLeast(JavaVersion.JAVA_23));\r\n        assertFalse(SystemUtils.isJavaVersionAtLeast(JavaVersion.JAVA_24));\r\n    } else if (SystemUtils.IS_JAVA_10) {\r\n        assertTrue(SystemUtils.isJavaVersionAtLeast(JavaVersion.JAVA_1_1));\r\n        assertTrue(SystemUtils.isJavaVersionAtLeast(JavaVersion.JAVA_1_2));\r\n        assertTrue(SystemUtils.isJavaVersionAtLeast(JavaVersion.JAVA_1_3));\r\n        assertTrue(SystemUtils.isJavaVersionAtLeast(JavaVersion.JAVA_1_4));\r\n        assertTrue(SystemUtils.isJavaVersionAtLeast(JavaVersion.JAVA_1_5));\r\n        assertTrue(SystemUtils.isJavaVersionAtLeast(JavaVersion.JAVA_1_6));\r\n        assertTrue(SystemUtils.isJavaVersionAtLeast(JavaVersion.JAVA_1_7));\r\n        assertTrue(SystemUtils.isJavaVersionAtLeast(JavaVersion.JAVA_1_8));\r\n        assertTrue(SystemUtils.isJavaVersionAtLeast(JavaVersion.JAVA_9));\r\n        assertTrue(SystemUtils.isJavaVersionAtLeast(JavaVersion.JAVA_10));\r\n        assertFalse(SystemUtils.isJavaVersionAtLeast(JavaVersion.JAVA_11));\r\n        assertFalse(SystemUtils.isJavaVersionAtLeast(JavaVersion.JAVA_12));\r\n        assertFalse(SystemUtils.isJavaVersionAtLeast(JavaVersion.JAVA_13));\r\n        assertFalse(SystemUtils.isJavaVersionAtLeast(JavaVersion.JAVA_14));\r\n        assertFalse(SystemUtils.isJavaVersionAtLeast(JavaVersion.JAVA_15));\r\n        assertFalse(SystemUtils.isJavaVersionAtLeast(JavaVersion.JAVA_16));\r\n        assertFalse(SystemUtils.isJavaVersionAtLeast(JavaVersion.JAVA_17));\r\n        assertFalse(SystemUtils.isJavaVersionAtLeast(JavaVersion.JAVA_18));\r\n        assertFalse(SystemUtils.isJavaVersionAtLeast(JavaVersion.JAVA_19));\r\n        assertFalse(SystemUtils.isJavaVersionAtLeast(JavaVersion.JAVA_20));\r\n        assertFalse(SystemUtils.isJavaVersionAtLeast(JavaVersion.JAVA_21));\r\n        assertFalse(SystemUtils.isJavaVersionAtLeast(JavaVersion.JAVA_22));\r\n        assertFalse(SystemUtils.isJavaVersionAtLeast(JavaVersion.JAVA_23));\r\n        assertFalse(SystemUtils.isJavaVersionAtLeast(JavaVersion.JAVA_24));\r\n    } else if (SystemUtils.IS_JAVA_11) {\r\n        assertTrue(SystemUtils.isJavaVersionAtLeast(JavaVersion.JAVA_1_1));\r\n        assertTrue(SystemUtils.isJavaVersionAtLeast(JavaVersion.JAVA_1_2));\r\n        assertTrue(SystemUtils.isJavaVersionAtLeast(JavaVersion.JAVA_1_3));\r\n        assertTrue(SystemUtils.isJavaVersionAtLeast(JavaVersion.JAVA_1_4));\r\n        assertTrue(SystemUtils.isJavaVersionAtLeast(JavaVersion.JAVA_1_5));\r\n        assertTrue(SystemUtils.isJavaVersionAtLeast(JavaVersion.JAVA_1_6));\r\n        assertTrue(SystemUtils.isJavaVersionAtLeast(JavaVersion.JAVA_1_7));\r\n        assertTrue(SystemUtils.isJavaVersionAtLeast(JavaVersion.JAVA_1_8));\r\n        assertTrue(SystemUtils.isJavaVersionAtLeast(JavaVersion.JAVA_9));\r\n        assertTrue(SystemUtils.isJavaVersionAtLeast(JavaVersion.JAVA_10));\r\n        assertTrue(SystemUtils.isJavaVersionAtLeast(JavaVersion.JAVA_11));\r\n        assertFalse(SystemUtils.isJavaVersionAtLeast(JavaVersion.JAVA_12));\r\n        assertFalse(SystemUtils.isJavaVersionAtLeast(JavaVersion.JAVA_13));\r\n        assertFalse(SystemUtils.isJavaVersionAtLeast(JavaVersion.JAVA_14));\r\n        assertFalse(SystemUtils.isJavaVersionAtLeast(JavaVersion.JAVA_15));\r\n        assertFalse(SystemUtils.isJavaVersionAtLeast(JavaVersion.JAVA_16));\r\n        assertFalse(SystemUtils.isJavaVersionAtLeast(JavaVersion.JAVA_17));\r\n        assertFalse(SystemUtils.isJavaVersionAtLeast(JavaVersion.JAVA_18));\r\n        assertFalse(SystemUtils.isJavaVersionAtLeast(JavaVersion.JAVA_19));\r\n        assertFalse(SystemUtils.isJavaVersionAtLeast(JavaVersion.JAVA_20));\r\n        assertFalse(SystemUtils.isJavaVersionAtLeast(JavaVersion.JAVA_21));\r\n        assertFalse(SystemUtils.isJavaVersionAtLeast(JavaVersion.JAVA_22));\r\n        assertFalse(SystemUtils.isJavaVersionAtLeast(JavaVersion.JAVA_23));\r\n        assertFalse(SystemUtils.isJavaVersionAtLeast(JavaVersion.JAVA_24));\r\n    } else if (SystemUtils.IS_JAVA_12) {\r\n        assertTrue(SystemUtils.isJavaVersionAtLeast(JavaVersion.JAVA_1_1));\r\n        assertTrue(SystemUtils.isJavaVersionAtLeast(JavaVersion.JAVA_1_2));\r\n        assertTrue(SystemUtils.isJavaVersionAtLeast(JavaVersion.JAVA_1_3));\r\n        assertTrue(SystemUtils.isJavaVersionAtLeast(JavaVersion.JAVA_1_4));\r\n        assertTrue(SystemUtils.isJavaVersionAtLeast(JavaVersion.JAVA_1_5));\r\n        assertTrue(SystemUtils.isJavaVersionAtLeast(JavaVersion.JAVA_1_6));\r\n        assertTrue(SystemUtils.isJavaVersionAtLeast(JavaVersion.JAVA_1_7));\r\n        assertTrue(SystemUtils.isJavaVersionAtLeast(JavaVersion.JAVA_1_8));\r\n        assertTrue(SystemUtils.isJavaVersionAtLeast(JavaVersion.JAVA_9));\r\n        assertTrue(SystemUtils.isJavaVersionAtLeast(JavaVersion.JAVA_10));\r\n        assertTrue(SystemUtils.isJavaVersionAtLeast(JavaVersion.JAVA_11));\r\n        assertTrue(SystemUtils.isJavaVersionAtLeast(JavaVersion.JAVA_12));\r\n        assertFalse(SystemUtils.isJavaVersionAtLeast(JavaVersion.JAVA_13));\r\n        assertFalse(SystemUtils.isJavaVersionAtLeast(JavaVersion.JAVA_14));\r\n        assertFalse(SystemUtils.isJavaVersionAtLeast(JavaVersion.JAVA_15));\r\n        assertFalse(SystemUtils.isJavaVersionAtLeast(JavaVersion.JAVA_16));\r\n        assertFalse(SystemUtils.isJavaVersionAtLeast(JavaVersion.JAVA_17));\r\n        assertFalse(SystemUtils.isJavaVersionAtLeast(JavaVersion.JAVA_18));\r\n        assertFalse(SystemUtils.isJavaVersionAtLeast(JavaVersion.JAVA_19));\r\n        assertFalse(SystemUtils.isJavaVersionAtLeast(JavaVersion.JAVA_20));\r\n        assertFalse(SystemUtils.isJavaVersionAtLeast(JavaVersion.JAVA_21));\r\n        assertFalse(SystemUtils.isJavaVersionAtLeast(JavaVersion.JAVA_22));\r\n        assertFalse(SystemUtils.isJavaVersionAtLeast(JavaVersion.JAVA_23));\r\n        assertFalse(SystemUtils.isJavaVersionAtLeast(JavaVersion.JAVA_24));\r\n    } else if (SystemUtils.IS_JAVA_13) {\r\n        assertTrue(SystemUtils.isJavaVersionAtLeast(JavaVersion.JAVA_1_1));\r\n        assertTrue(SystemUtils.isJavaVersionAtLeast(JavaVersion.JAVA_1_2));\r\n        assertTrue(SystemUtils.isJavaVersionAtLeast(JavaVersion.JAVA_1_3));\r\n        assertTrue(SystemUtils.isJavaVersionAtLeast(JavaVersion.JAVA_1_4));\r\n        assertTrue(SystemUtils.isJavaVersionAtLeast(JavaVersion.JAVA_1_5));\r\n        assertTrue(SystemUtils.isJavaVersionAtLeast(JavaVersion.JAVA_1_6));\r\n        assertTrue(SystemUtils.isJavaVersionAtLeast(JavaVersion.JAVA_1_7));\r\n        assertTrue(SystemUtils.isJavaVersionAtLeast(JavaVersion.JAVA_1_8));\r\n        assertTrue(SystemUtils.isJavaVersionAtLeast(JavaVersion.JAVA_9));\r\n        assertTrue(SystemUtils.isJavaVersionAtLeast(JavaVersion.JAVA_10));\r\n        assertTrue(SystemUtils.isJavaVersionAtLeast(JavaVersion.JAVA_11));\r\n        assertTrue(SystemUtils.isJavaVersionAtLeast(JavaVersion.JAVA_12));\r\n        assertTrue(SystemUtils.isJavaVersionAtLeast(JavaVersion.JAVA_13));\r\n        assertFalse(SystemUtils.isJavaVersionAtLeast(JavaVersion.JAVA_14));\r\n        assertFalse(SystemUtils.isJavaVersionAtLeast(JavaVersion.JAVA_15));\r\n        assertFalse(SystemUtils.isJavaVersionAtLeast(JavaVersion.JAVA_16));\r\n        assertFalse(SystemUtils.isJavaVersionAtLeast(JavaVersion.JAVA_17));\r\n        assertFalse(SystemUtils.isJavaVersionAtLeast(JavaVersion.JAVA_18));\r\n        assertFalse(SystemUtils.isJavaVersionAtLeast(JavaVersion.JAVA_19));\r\n        assertFalse(SystemUtils.isJavaVersionAtLeast(JavaVersion.JAVA_20));\r\n        assertFalse(SystemUtils.isJavaVersionAtLeast(JavaVersion.JAVA_21));\r\n        assertFalse(SystemUtils.isJavaVersionAtLeast(JavaVersion.JAVA_22));\r\n        assertFalse(SystemUtils.isJavaVersionAtLeast(JavaVersion.JAVA_23));\r\n    } else if (SystemUtils.IS_JAVA_14) {\r\n        assertTrue(SystemUtils.isJavaVersionAtLeast(JavaVersion.JAVA_1_1));\r\n        assertTrue(SystemUtils.isJavaVersionAtLeast(JavaVersion.JAVA_1_2));\r\n        assertTrue(SystemUtils.isJavaVersionAtLeast(JavaVersion.JAVA_1_3));\r\n        assertTrue(SystemUtils.isJavaVersionAtLeast(JavaVersion.JAVA_1_4));\r\n        assertTrue(SystemUtils.isJavaVersionAtLeast(JavaVersion.JAVA_1_5));\r\n        assertTrue(SystemUtils.isJavaVersionAtLeast(JavaVersion.JAVA_1_6));\r\n        assertTrue(SystemUtils.isJavaVersionAtLeast(JavaVersion.JAVA_1_7));\r\n        assertTrue(SystemUtils.isJavaVersionAtLeast(JavaVersion.JAVA_1_8));\r\n        assertTrue(SystemUtils.isJavaVersionAtLeast(JavaVersion.JAVA_9));\r\n        assertTrue(SystemUtils.isJavaVersionAtLeast(JavaVersion.JAVA_10));\r\n        assertTrue(SystemUtils.isJavaVersionAtLeast(JavaVersion.JAVA_11));\r\n        assertTrue(SystemUtils.isJavaVersionAtLeast(JavaVersion.JAVA_12));\r\n        assertTrue(SystemUtils.isJavaVersionAtLeast(JavaVersion.JAVA_13));\r\n        assertTrue(SystemUtils.isJavaVersionAtLeast(JavaVersion.JAVA_14));\r\n        assertFalse(SystemUtils.isJavaVersionAtLeast(JavaVersion.JAVA_15));\r\n        assertFalse(SystemUtils.isJavaVersionAtLeast(JavaVersion.JAVA_16));\r\n        assertFalse(SystemUtils.isJavaVersionAtLeast(JavaVersion.JAVA_17));\r\n        assertFalse(SystemUtils.isJavaVersionAtLeast(JavaVersion.JAVA_18));\r\n        assertFalse(SystemUtils.isJavaVersionAtLeast(JavaVersion.JAVA_19));\r\n        assertFalse(SystemUtils.isJavaVersionAtLeast(JavaVersion.JAVA_20));\r\n        assertFalse(SystemUtils.isJavaVersionAtLeast(JavaVersion.JAVA_21));\r\n        assertFalse(SystemUtils.isJavaVersionAtLeast(JavaVersion.JAVA_22));\r\n        assertFalse(SystemUtils.isJavaVersionAtLeast(JavaVersion.JAVA_23));\r\n        assertFalse(SystemUtils.isJavaVersionAtLeast(JavaVersion.JAVA_24));\r\n    } else if (SystemUtils.IS_JAVA_15) {\r\n        assertTrue(SystemUtils.isJavaVersionAtLeast(JavaVersion.JAVA_1_1));\r\n        assertTrue(SystemUtils.isJavaVersionAtLeast(JavaVersion.JAVA_1_2));\r\n        assertTrue(SystemUtils.isJavaVersionAtLeast(JavaVersion.JAVA_1_3));\r\n        assertTrue(SystemUtils.isJavaVersionAtLeast(JavaVersion.JAVA_1_4));\r\n        assertTrue(SystemUtils.isJavaVersionAtLeast(JavaVersion.JAVA_1_5));\r\n        assertTrue(SystemUtils.isJavaVersionAtLeast(JavaVersion.JAVA_1_6));\r\n        assertTrue(SystemUtils.isJavaVersionAtLeast(JavaVersion.JAVA_1_7));\r\n        assertTrue(SystemUtils.isJavaVersionAtLeast(JavaVersion.JAVA_1_8));\r\n        assertTrue(SystemUtils.isJavaVersionAtLeast(JavaVersion.JAVA_9));\r\n        assertTrue(SystemUtils.isJavaVersionAtLeast(JavaVersion.JAVA_10));\r\n        assertTrue(SystemUtils.isJavaVersionAtLeast(JavaVersion.JAVA_11));\r\n        assertTrue(SystemUtils.isJavaVersionAtLeast(JavaVersion.JAVA_12));\r\n        assertTrue(SystemUtils.isJavaVersionAtLeast(JavaVersion.JAVA_13));\r\n        assertTrue(SystemUtils.isJavaVersionAtLeast(JavaVersion.JAVA_14));\r\n        assertTrue(SystemUtils.isJavaVersionAtLeast(JavaVersion.JAVA_15));\r\n        assertFalse(SystemUtils.isJavaVersionAtLeast(JavaVersion.JAVA_16));\r\n        assertFalse(SystemUtils.isJavaVersionAtLeast(JavaVersion.JAVA_17));\r\n        assertFalse(SystemUtils.isJavaVersionAtLeast(JavaVersion.JAVA_18));\r\n        assertFalse(SystemUtils.isJavaVersionAtLeast(JavaVersion.JAVA_19));\r\n        assertFalse(SystemUtils.isJavaVersionAtLeast(JavaVersion.JAVA_20));\r\n        assertFalse(SystemUtils.isJavaVersionAtLeast(JavaVersion.JAVA_21));\r\n        assertFalse(SystemUtils.isJavaVersionAtLeast(JavaVersion.JAVA_22));\r\n        assertFalse(SystemUtils.isJavaVersionAtLeast(JavaVersion.JAVA_23));\r\n        assertFalse(SystemUtils.isJavaVersionAtLeast(JavaVersion.JAVA_24));\r\n    } else if (SystemUtils.IS_JAVA_16) {\r\n        assertTrue(SystemUtils.isJavaVersionAtLeast(JavaVersion.JAVA_1_1));\r\n        assertTrue(SystemUtils.isJavaVersionAtLeast(JavaVersion.JAVA_1_2));\r\n        assertTrue(SystemUtils.isJavaVersionAtLeast(JavaVersion.JAVA_1_3));\r\n        assertTrue(SystemUtils.isJavaVersionAtLeast(JavaVersion.JAVA_1_4));\r\n        assertTrue(SystemUtils.isJavaVersionAtLeast(JavaVersion.JAVA_1_5));\r\n        assertTrue(SystemUtils.isJavaVersionAtLeast(JavaVersion.JAVA_1_6));\r\n        assertTrue(SystemUtils.isJavaVersionAtLeast(JavaVersion.JAVA_1_7));\r\n        assertTrue(SystemUtils.isJavaVersionAtLeast(JavaVersion.JAVA_1_8));\r\n        assertTrue(SystemUtils.isJavaVersionAtLeast(JavaVersion.JAVA_9));\r\n        assertTrue(SystemUtils.isJavaVersionAtLeast(JavaVersion.JAVA_10));\r\n        assertTrue(SystemUtils.isJavaVersionAtLeast(JavaVersion.JAVA_11));\r\n        assertTrue(SystemUtils.isJavaVersionAtLeast(JavaVersion.JAVA_12));\r\n        assertTrue(SystemUtils.isJavaVersionAtLeast(JavaVersion.JAVA_13));\r\n        assertTrue(SystemUtils.isJavaVersionAtLeast(JavaVersion.JAVA_14));\r\n        assertTrue(SystemUtils.isJavaVersionAtLeast(JavaVersion.JAVA_15));\r\n        assertTrue(SystemUtils.isJavaVersionAtLeast(JavaVersion.JAVA_16));\r\n        assertFalse(SystemUtils.isJavaVersionAtLeast(JavaVersion.JAVA_17));\r\n        assertFalse(SystemUtils.isJavaVersionAtLeast(JavaVersion.JAVA_18));\r\n        assertFalse(SystemUtils.isJavaVersionAtLeast(JavaVersion.JAVA_19));\r\n        assertFalse(SystemUtils.isJavaVersionAtLeast(JavaVersion.JAVA_20));\r\n        assertFalse(SystemUtils.isJavaVersionAtLeast(JavaVersion.JAVA_21));\r\n        assertFalse(SystemUtils.isJavaVersionAtLeast(JavaVersion.JAVA_22));\r\n        assertFalse(SystemUtils.isJavaVersionAtLeast(JavaVersion.JAVA_23));\r\n        assertFalse(SystemUtils.isJavaVersionAtLeast(JavaVersion.JAVA_24));\r\n    } else if (SystemUtils.IS_JAVA_17) {\r\n        assertTrue(SystemUtils.isJavaVersionAtLeast(JavaVersion.JAVA_1_1));\r\n        assertTrue(SystemUtils.isJavaVersionAtLeast(JavaVersion.JAVA_1_2));\r\n        assertTrue(SystemUtils.isJavaVersionAtLeast(JavaVersion.JAVA_1_3));\r\n        assertTrue(SystemUtils.isJavaVersionAtLeast(JavaVersion.JAVA_1_4));\r\n        assertTrue(SystemUtils.isJavaVersionAtLeast(JavaVersion.JAVA_1_5));\r\n        assertTrue(SystemUtils.isJavaVersionAtLeast(JavaVersion.JAVA_1_6));\r\n        assertTrue(SystemUtils.isJavaVersionAtLeast(JavaVersion.JAVA_1_7));\r\n        assertTrue(SystemUtils.isJavaVersionAtLeast(JavaVersion.JAVA_1_8));\r\n        assertTrue(SystemUtils.isJavaVersionAtLeast(JavaVersion.JAVA_9));\r\n        assertTrue(SystemUtils.isJavaVersionAtLeast(JavaVersion.JAVA_10));\r\n        assertTrue(SystemUtils.isJavaVersionAtLeast(JavaVersion.JAVA_11));\r\n        assertTrue(SystemUtils.isJavaVersionAtLeast(JavaVersion.JAVA_12));\r\n        assertTrue(SystemUtils.isJavaVersionAtLeast(JavaVersion.JAVA_13));\r\n        assertTrue(SystemUtils.isJavaVersionAtLeast(JavaVersion.JAVA_14));\r\n        assertTrue(SystemUtils.isJavaVersionAtLeast(JavaVersion.JAVA_15));\r\n        assertTrue(SystemUtils.isJavaVersionAtLeast(JavaVersion.JAVA_16));\r\n        assertTrue(SystemUtils.isJavaVersionAtLeast(JavaVersion.JAVA_17));\r\n        assertFalse(SystemUtils.isJavaVersionAtLeast(JavaVersion.JAVA_18));\r\n        assertFalse(SystemUtils.isJavaVersionAtLeast(JavaVersion.JAVA_19));\r\n        assertFalse(SystemUtils.isJavaVersionAtLeast(JavaVersion.JAVA_20));\r\n        assertFalse(SystemUtils.isJavaVersionAtLeast(JavaVersion.JAVA_21));\r\n        assertFalse(SystemUtils.isJavaVersionAtLeast(JavaVersion.JAVA_22));\r\n        assertFalse(SystemUtils.isJavaVersionAtLeast(JavaVersion.JAVA_23));\r\n        assertFalse(SystemUtils.isJavaVersionAtLeast(JavaVersion.JAVA_24));\r\n    } else if (SystemUtils.IS_JAVA_18) {\r\n        assertTrue(SystemUtils.isJavaVersionAtLeast(JavaVersion.JAVA_1_1));\r\n        assertTrue(SystemUtils.isJavaVersionAtLeast(JavaVersion.JAVA_1_2));\r\n        assertTrue(SystemUtils.isJavaVersionAtLeast(JavaVersion.JAVA_1_3));\r\n        assertTrue(SystemUtils.isJavaVersionAtLeast(JavaVersion.JAVA_1_4));\r\n        assertTrue(SystemUtils.isJavaVersionAtLeast(JavaVersion.JAVA_1_5));\r\n        assertTrue(SystemUtils.isJavaVersionAtLeast(JavaVersion.JAVA_1_6));\r\n        assertTrue(SystemUtils.isJavaVersionAtLeast(JavaVersion.JAVA_1_7));\r\n        assertTrue(SystemUtils.isJavaVersionAtLeast(JavaVersion.JAVA_1_8));\r\n        assertTrue(SystemUtils.isJavaVersionAtLeast(JavaVersion.JAVA_9));\r\n        assertTrue(SystemUtils.isJavaVersionAtLeast(JavaVersion.JAVA_10));\r\n        assertTrue(SystemUtils.isJavaVersionAtLeast(JavaVersion.JAVA_11));\r\n        assertTrue(SystemUtils.isJavaVersionAtLeast(JavaVersion.JAVA_12));\r\n        assertTrue(SystemUtils.isJavaVersionAtLeast(JavaVersion.JAVA_13));\r\n        assertTrue(SystemUtils.isJavaVersionAtLeast(JavaVersion.JAVA_14));\r\n        assertTrue(SystemUtils.isJavaVersionAtLeast(JavaVersion.JAVA_15));\r\n        assertTrue(SystemUtils.isJavaVersionAtLeast(JavaVersion.JAVA_16));\r\n        assertTrue(SystemUtils.isJavaVersionAtLeast(JavaVersion.JAVA_17));\r\n        assertTrue(SystemUtils.isJavaVersionAtLeast(JavaVersion.JAVA_18));\r\n        assertFalse(SystemUtils.isJavaVersionAtLeast(JavaVersion.JAVA_19));\r\n        assertFalse(SystemUtils.isJavaVersionAtLeast(JavaVersion.JAVA_20));\r\n        assertFalse(SystemUtils.isJavaVersionAtLeast(JavaVersion.JAVA_21));\r\n        assertFalse(SystemUtils.isJavaVersionAtLeast(JavaVersion.JAVA_22));\r\n        assertFalse(SystemUtils.isJavaVersionAtLeast(JavaVersion.JAVA_23));\r\n        assertFalse(SystemUtils.isJavaVersionAtLeast(JavaVersion.JAVA_24));\r\n    } else if (SystemUtils.IS_JAVA_19) {\r\n        assertTrue(SystemUtils.isJavaVersionAtLeast(JavaVersion.JAVA_1_1));\r\n        assertTrue(SystemUtils.isJavaVersionAtLeast(JavaVersion.JAVA_1_2));\r\n        assertTrue(SystemUtils.isJavaVersionAtLeast(JavaVersion.JAVA_1_3));\r\n        assertTrue(SystemUtils.isJavaVersionAtLeast(JavaVersion.JAVA_1_4));\r\n        assertTrue(SystemUtils.isJavaVersionAtLeast(JavaVersion.JAVA_1_5));\r\n        assertTrue(SystemUtils.isJavaVersionAtLeast(JavaVersion.JAVA_1_6));\r\n        assertTrue(SystemUtils.isJavaVersionAtLeast(JavaVersion.JAVA_1_7));\r\n        assertTrue(SystemUtils.isJavaVersionAtLeast(JavaVersion.JAVA_1_8));\r\n        assertTrue(SystemUtils.isJavaVersionAtLeast(JavaVersion.JAVA_9));\r\n        assertTrue(SystemUtils.isJavaVersionAtLeast(JavaVersion.JAVA_10));\r\n        assertTrue(SystemUtils.isJavaVersionAtLeast(JavaVersion.JAVA_11));\r\n        assertTrue(SystemUtils.isJavaVersionAtLeast(JavaVersion.JAVA_12));\r\n        assertTrue(SystemUtils.isJavaVersionAtLeast(JavaVersion.JAVA_13));\r\n        assertTrue(SystemUtils.isJavaVersionAtLeast(JavaVersion.JAVA_14));\r\n        assertTrue(SystemUtils.isJavaVersionAtLeast(JavaVersion.JAVA_15));\r\n        assertTrue(SystemUtils.isJavaVersionAtLeast(JavaVersion.JAVA_16));\r\n        assertTrue(SystemUtils.isJavaVersionAtLeast(JavaVersion.JAVA_17));\r\n        assertTrue(SystemUtils.isJavaVersionAtLeast(JavaVersion.JAVA_18));\r\n        assertTrue(SystemUtils.isJavaVersionAtLeast(JavaVersion.JAVA_19));\r\n        assertFalse(SystemUtils.isJavaVersionAtLeast(JavaVersion.JAVA_20));\r\n        assertFalse(SystemUtils.isJavaVersionAtLeast(JavaVersion.JAVA_21));\r\n        assertFalse(SystemUtils.isJavaVersionAtLeast(JavaVersion.JAVA_22));\r\n        assertFalse(SystemUtils.isJavaVersionAtLeast(JavaVersion.JAVA_23));\r\n        assertFalse(SystemUtils.isJavaVersionAtLeast(JavaVersion.JAVA_24));\r\n    } else if (SystemUtils.IS_JAVA_20) {\r\n        assertTrue(SystemUtils.isJavaVersionAtLeast(JavaVersion.JAVA_1_1));\r\n        assertTrue(SystemUtils.isJavaVersionAtLeast(JavaVersion.JAVA_1_2));\r\n        assertTrue(SystemUtils.isJavaVersionAtLeast(JavaVersion.JAVA_1_3));\r\n        assertTrue(SystemUtils.isJavaVersionAtLeast(JavaVersion.JAVA_1_4));\r\n        assertTrue(SystemUtils.isJavaVersionAtLeast(JavaVersion.JAVA_1_5));\r\n        assertTrue(SystemUtils.isJavaVersionAtLeast(JavaVersion.JAVA_1_6));\r\n        assertTrue(SystemUtils.isJavaVersionAtLeast(JavaVersion.JAVA_1_7));\r\n        assertTrue(SystemUtils.isJavaVersionAtLeast(JavaVersion.JAVA_1_8));\r\n        assertTrue(SystemUtils.isJavaVersionAtLeast(JavaVersion.JAVA_9));\r\n        assertTrue(SystemUtils.isJavaVersionAtLeast(JavaVersion.JAVA_10));\r\n        assertTrue(SystemUtils.isJavaVersionAtLeast(JavaVersion.JAVA_11));\r\n        assertTrue(SystemUtils.isJavaVersionAtLeast(JavaVersion.JAVA_12));\r\n        assertTrue(SystemUtils.isJavaVersionAtLeast(JavaVersion.JAVA_13));\r\n        assertTrue(SystemUtils.isJavaVersionAtLeast(JavaVersion.JAVA_14));\r\n        assertTrue(SystemUtils.isJavaVersionAtLeast(JavaVersion.JAVA_15));\r\n        assertTrue(SystemUtils.isJavaVersionAtLeast(JavaVersion.JAVA_16));\r\n        assertTrue(SystemUtils.isJavaVersionAtLeast(JavaVersion.JAVA_17));\r\n        assertTrue(SystemUtils.isJavaVersionAtLeast(JavaVersion.JAVA_18));\r\n        assertTrue(SystemUtils.isJavaVersionAtLeast(JavaVersion.JAVA_19));\r\n        assertTrue(SystemUtils.isJavaVersionAtLeast(JavaVersion.JAVA_20));\r\n        assertFalse(SystemUtils.isJavaVersionAtLeast(JavaVersion.JAVA_21));\r\n        assertFalse(SystemUtils.isJavaVersionAtLeast(JavaVersion.JAVA_22));\r\n        assertFalse(SystemUtils.isJavaVersionAtLeast(JavaVersion.JAVA_23));\r\n        assertFalse(SystemUtils.isJavaVersionAtLeast(JavaVersion.JAVA_24));\r\n    } else if (SystemUtils.IS_JAVA_21) {\r\n        assertTrue(SystemUtils.isJavaVersionAtLeast(JavaVersion.JAVA_1_1));\r\n        assertTrue(SystemUtils.isJavaVersionAtLeast(JavaVersion.JAVA_1_2));\r\n        assertTrue(SystemUtils.isJavaVersionAtLeast(JavaVersion.JAVA_1_3));\r\n        assertTrue(SystemUtils.isJavaVersionAtLeast(JavaVersion.JAVA_1_4));\r\n        assertTrue(SystemUtils.isJavaVersionAtLeast(JavaVersion.JAVA_1_5));\r\n        assertTrue(SystemUtils.isJavaVersionAtLeast(JavaVersion.JAVA_1_6));\r\n        assertTrue(SystemUtils.isJavaVersionAtLeast(JavaVersion.JAVA_1_7));\r\n        assertTrue(SystemUtils.isJavaVersionAtLeast(JavaVersion.JAVA_1_8));\r\n        assertTrue(SystemUtils.isJavaVersionAtLeast(JavaVersion.JAVA_9));\r\n        assertTrue(SystemUtils.isJavaVersionAtLeast(JavaVersion.JAVA_10));\r\n        assertTrue(SystemUtils.isJavaVersionAtLeast(JavaVersion.JAVA_11));\r\n        assertTrue(SystemUtils.isJavaVersionAtLeast(JavaVersion.JAVA_12));\r\n        assertTrue(SystemUtils.isJavaVersionAtLeast(JavaVersion.JAVA_13));\r\n        assertTrue(SystemUtils.isJavaVersionAtLeast(JavaVersion.JAVA_14));\r\n        assertTrue(SystemUtils.isJavaVersionAtLeast(JavaVersion.JAVA_15));\r\n        assertTrue(SystemUtils.isJavaVersionAtLeast(JavaVersion.JAVA_16));\r\n        assertTrue(SystemUtils.isJavaVersionAtLeast(JavaVersion.JAVA_17));\r\n        assertTrue(SystemUtils.isJavaVersionAtLeast(JavaVersion.JAVA_18));\r\n        assertTrue(SystemUtils.isJavaVersionAtLeast(JavaVersion.JAVA_19));\r\n        assertTrue(SystemUtils.isJavaVersionAtLeast(JavaVersion.JAVA_20));\r\n        assertTrue(SystemUtils.isJavaVersionAtLeast(JavaVersion.JAVA_21));\r\n        assertFalse(SystemUtils.isJavaVersionAtLeast(JavaVersion.JAVA_22));\r\n        assertFalse(SystemUtils.isJavaVersionAtLeast(JavaVersion.JAVA_23));\r\n        assertFalse(SystemUtils.isJavaVersionAtLeast(JavaVersion.JAVA_24));\r\n    } else if (SystemUtils.IS_JAVA_22) {\r\n        assertTrue(SystemUtils.isJavaVersionAtLeast(JavaVersion.JAVA_1_1));\r\n        assertTrue(SystemUtils.isJavaVersionAtLeast(JavaVersion.JAVA_1_2));\r\n        assertTrue(SystemUtils.isJavaVersionAtLeast(JavaVersion.JAVA_1_3));\r\n        assertTrue(SystemUtils.isJavaVersionAtLeast(JavaVersion.JAVA_1_4));\r\n        assertTrue(SystemUtils.isJavaVersionAtLeast(JavaVersion.JAVA_1_5));\r\n        assertTrue(SystemUtils.isJavaVersionAtLeast(JavaVersion.JAVA_1_6));\r\n        assertTrue(SystemUtils.isJavaVersionAtLeast(JavaVersion.JAVA_1_7));\r\n        assertTrue(SystemUtils.isJavaVersionAtLeast(JavaVersion.JAVA_1_8));\r\n        assertTrue(SystemUtils.isJavaVersionAtLeast(JavaVersion.JAVA_9));\r\n        assertTrue(SystemUtils.isJavaVersionAtLeast(JavaVersion.JAVA_10));\r\n        assertTrue(SystemUtils.isJavaVersionAtLeast(JavaVersion.JAVA_11));\r\n        assertTrue(SystemUtils.isJavaVersionAtLeast(JavaVersion.JAVA_12));\r\n        assertTrue(SystemUtils.isJavaVersionAtLeast(JavaVersion.JAVA_13));\r\n        assertTrue(SystemUtils.isJavaVersionAtLeast(JavaVersion.JAVA_14));\r\n        assertTrue(SystemUtils.isJavaVersionAtLeast(JavaVersion.JAVA_15));\r\n        assertTrue(SystemUtils.isJavaVersionAtLeast(JavaVersion.JAVA_16));\r\n        assertTrue(SystemUtils.isJavaVersionAtLeast(JavaVersion.JAVA_17));\r\n        assertTrue(SystemUtils.isJavaVersionAtLeast(JavaVersion.JAVA_18));\r\n        assertTrue(SystemUtils.isJavaVersionAtLeast(JavaVersion.JAVA_19));\r\n        assertTrue(SystemUtils.isJavaVersionAtLeast(JavaVersion.JAVA_20));\r\n        assertTrue(SystemUtils.isJavaVersionAtLeast(JavaVersion.JAVA_21));\r\n        assertTrue(SystemUtils.isJavaVersionAtLeast(JavaVersion.JAVA_22));\r\n        assertFalse(SystemUtils.isJavaVersionAtLeast(JavaVersion.JAVA_23));\r\n        assertFalse(SystemUtils.isJavaVersionAtLeast(JavaVersion.JAVA_24));\r\n    } else if (SystemUtils.IS_JAVA_23) {\r\n        assertTrue(SystemUtils.isJavaVersionAtLeast(JavaVersion.JAVA_1_1));\r\n        assertTrue(SystemUtils.isJavaVersionAtLeast(JavaVersion.JAVA_1_2));\r\n        assertTrue(SystemUtils.isJavaVersionAtLeast(JavaVersion.JAVA_1_3));\r\n        assertTrue(SystemUtils.isJavaVersionAtLeast(JavaVersion.JAVA_1_4));\r\n        assertTrue(SystemUtils.isJavaVersionAtLeast(JavaVersion.JAVA_1_5));\r\n        assertTrue(SystemUtils.isJavaVersionAtLeast(JavaVersion.JAVA_1_6));\r\n        assertTrue(SystemUtils.isJavaVersionAtLeast(JavaVersion.JAVA_1_7));\r\n        assertTrue(SystemUtils.isJavaVersionAtLeast(JavaVersion.JAVA_1_8));\r\n        assertTrue(SystemUtils.isJavaVersionAtLeast(JavaVersion.JAVA_9));\r\n        assertTrue(SystemUtils.isJavaVersionAtLeast(JavaVersion.JAVA_10));\r\n        assertTrue(SystemUtils.isJavaVersionAtLeast(JavaVersion.JAVA_11));\r\n        assertTrue(SystemUtils.isJavaVersionAtLeast(JavaVersion.JAVA_12));\r\n        assertTrue(SystemUtils.isJavaVersionAtLeast(JavaVersion.JAVA_13));\r\n        assertTrue(SystemUtils.isJavaVersionAtLeast(JavaVersion.JAVA_14));\r\n        assertTrue(SystemUtils.isJavaVersionAtLeast(JavaVersion.JAVA_15));\r\n        assertTrue(SystemUtils.isJavaVersionAtLeast(JavaVersion.JAVA_16));\r\n        assertTrue(SystemUtils.isJavaVersionAtLeast(JavaVersion.JAVA_17));\r\n        assertTrue(SystemUtils.isJavaVersionAtLeast(JavaVersion.JAVA_18));\r\n        assertTrue(SystemUtils.isJavaVersionAtLeast(JavaVersion.JAVA_19));\r\n        assertTrue(SystemUtils.isJavaVersionAtLeast(JavaVersion.JAVA_20));\r\n        assertTrue(SystemUtils.isJavaVersionAtLeast(JavaVersion.JAVA_21));\r\n        assertTrue(SystemUtils.isJavaVersionAtLeast(JavaVersion.JAVA_22));\r\n        assertTrue(SystemUtils.isJavaVersionAtLeast(JavaVersion.JAVA_23));\r\n        assertFalse(SystemUtils.isJavaVersionAtLeast(JavaVersion.JAVA_24));\r\n    } else if (SystemUtils.IS_JAVA_24) {\r\n        assertTrue(SystemUtils.isJavaVersionAtLeast(JavaVersion.JAVA_1_1));\r\n        assertTrue(SystemUtils.isJavaVersionAtLeast(JavaVersion.JAVA_1_2));\r\n        assertTrue(SystemUtils.isJavaVersionAtLeast(JavaVersion.JAVA_1_3));\r\n        assertTrue(SystemUtils.isJavaVersionAtLeast(JavaVersion.JAVA_1_4));\r\n        assertTrue(SystemUtils.isJavaVersionAtLeast(JavaVersion.JAVA_1_5));\r\n        assertTrue(SystemUtils.isJavaVersionAtLeast(JavaVersion.JAVA_1_6));\r\n        assertTrue(SystemUtils.isJavaVersionAtLeast(JavaVersion.JAVA_1_7));\r\n        assertTrue(SystemUtils.isJavaVersionAtLeast(JavaVersion.JAVA_1_8));\r\n        assertTrue(SystemUtils.isJavaVersionAtLeast(JavaVersion.JAVA_9));\r\n        assertTrue(SystemUtils.isJavaVersionAtLeast(JavaVersion.JAVA_10));\r\n        assertTrue(SystemUtils.isJavaVersionAtLeast(JavaVersion.JAVA_11));\r\n        assertTrue(SystemUtils.isJavaVersionAtLeast(JavaVersion.JAVA_12));\r\n        assertTrue(SystemUtils.isJavaVersionAtLeast(JavaVersion.JAVA_13));\r\n        assertTrue(SystemUtils.isJavaVersionAtLeast(JavaVersion.JAVA_14));\r\n        assertTrue(SystemUtils.isJavaVersionAtLeast(JavaVersion.JAVA_15));\r\n        assertTrue(SystemUtils.isJavaVersionAtLeast(JavaVersion.JAVA_16));\r\n        assertTrue(SystemUtils.isJavaVersionAtLeast(JavaVersion.JAVA_17));\r\n        assertTrue(SystemUtils.isJavaVersionAtLeast(JavaVersion.JAVA_18));\r\n        assertTrue(SystemUtils.isJavaVersionAtLeast(JavaVersion.JAVA_19));\r\n        assertTrue(SystemUtils.isJavaVersionAtLeast(JavaVersion.JAVA_20));\r\n        assertTrue(SystemUtils.isJavaVersionAtLeast(JavaVersion.JAVA_21));\r\n        assertTrue(SystemUtils.isJavaVersionAtLeast(JavaVersion.JAVA_22));\r\n        assertTrue(SystemUtils.isJavaVersionAtLeast(JavaVersion.JAVA_23));\r\n        assertTrue(SystemUtils.isJavaVersionAtLeast(JavaVersion.JAVA_24));\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\SystemUtilsTest.java",
  "methodName" : "testIsJavaVersionAtMost",
  "sourceCode" : "@Test\r\nvoid testIsJavaVersionAtMost() {\r\n    if (SystemUtils.IS_JAVA_1_8) {\r\n        assertFalse(SystemUtils.isJavaVersionAtMost(JavaVersion.JAVA_1_1));\r\n        assertFalse(SystemUtils.isJavaVersionAtMost(JavaVersion.JAVA_1_2));\r\n        assertFalse(SystemUtils.isJavaVersionAtMost(JavaVersion.JAVA_1_3));\r\n        assertFalse(SystemUtils.isJavaVersionAtMost(JavaVersion.JAVA_1_4));\r\n        assertFalse(SystemUtils.isJavaVersionAtMost(JavaVersion.JAVA_1_5));\r\n        assertFalse(SystemUtils.isJavaVersionAtMost(JavaVersion.JAVA_1_6));\r\n        assertFalse(SystemUtils.isJavaVersionAtMost(JavaVersion.JAVA_1_7));\r\n        assertTrue(SystemUtils.isJavaVersionAtMost(JavaVersion.JAVA_1_8));\r\n        assertTrue(SystemUtils.isJavaVersionAtMost(JavaVersion.JAVA_9));\r\n        assertTrue(SystemUtils.isJavaVersionAtMost(JavaVersion.JAVA_10));\r\n        assertTrue(SystemUtils.isJavaVersionAtMost(JavaVersion.JAVA_11));\r\n        assertTrue(SystemUtils.isJavaVersionAtMost(JavaVersion.JAVA_12));\r\n        assertTrue(SystemUtils.isJavaVersionAtMost(JavaVersion.JAVA_13));\r\n        assertTrue(SystemUtils.isJavaVersionAtMost(JavaVersion.JAVA_14));\r\n        assertTrue(SystemUtils.isJavaVersionAtMost(JavaVersion.JAVA_15));\r\n        assertTrue(SystemUtils.isJavaVersionAtMost(JavaVersion.JAVA_16));\r\n        assertTrue(SystemUtils.isJavaVersionAtMost(JavaVersion.JAVA_17));\r\n        assertTrue(SystemUtils.isJavaVersionAtMost(JavaVersion.JAVA_18));\r\n        assertTrue(SystemUtils.isJavaVersionAtMost(JavaVersion.JAVA_19));\r\n        assertTrue(SystemUtils.isJavaVersionAtMost(JavaVersion.JAVA_20));\r\n        assertTrue(SystemUtils.isJavaVersionAtMost(JavaVersion.JAVA_21));\r\n        assertTrue(SystemUtils.isJavaVersionAtMost(JavaVersion.JAVA_22));\r\n        assertTrue(SystemUtils.isJavaVersionAtMost(JavaVersion.JAVA_23));\r\n        assertTrue(SystemUtils.isJavaVersionAtMost(JavaVersion.JAVA_24));\r\n    } else if (SystemUtils.IS_JAVA_9) {\r\n        assertFalse(SystemUtils.isJavaVersionAtMost(JavaVersion.JAVA_1_1));\r\n        assertFalse(SystemUtils.isJavaVersionAtMost(JavaVersion.JAVA_1_2));\r\n        assertFalse(SystemUtils.isJavaVersionAtMost(JavaVersion.JAVA_1_3));\r\n        assertFalse(SystemUtils.isJavaVersionAtMost(JavaVersion.JAVA_1_4));\r\n        assertFalse(SystemUtils.isJavaVersionAtMost(JavaVersion.JAVA_1_5));\r\n        assertFalse(SystemUtils.isJavaVersionAtMost(JavaVersion.JAVA_1_6));\r\n        assertFalse(SystemUtils.isJavaVersionAtMost(JavaVersion.JAVA_1_7));\r\n        assertFalse(SystemUtils.isJavaVersionAtMost(JavaVersion.JAVA_1_8));\r\n        assertTrue(SystemUtils.isJavaVersionAtMost(JavaVersion.JAVA_9));\r\n        assertTrue(SystemUtils.isJavaVersionAtMost(JavaVersion.JAVA_10));\r\n        assertTrue(SystemUtils.isJavaVersionAtMost(JavaVersion.JAVA_11));\r\n        assertTrue(SystemUtils.isJavaVersionAtMost(JavaVersion.JAVA_12));\r\n        assertTrue(SystemUtils.isJavaVersionAtMost(JavaVersion.JAVA_13));\r\n        assertTrue(SystemUtils.isJavaVersionAtMost(JavaVersion.JAVA_14));\r\n        assertTrue(SystemUtils.isJavaVersionAtMost(JavaVersion.JAVA_15));\r\n        assertTrue(SystemUtils.isJavaVersionAtMost(JavaVersion.JAVA_16));\r\n        assertTrue(SystemUtils.isJavaVersionAtMost(JavaVersion.JAVA_17));\r\n        assertTrue(SystemUtils.isJavaVersionAtMost(JavaVersion.JAVA_18));\r\n        assertTrue(SystemUtils.isJavaVersionAtMost(JavaVersion.JAVA_19));\r\n        assertTrue(SystemUtils.isJavaVersionAtMost(JavaVersion.JAVA_20));\r\n        assertTrue(SystemUtils.isJavaVersionAtMost(JavaVersion.JAVA_21));\r\n        assertTrue(SystemUtils.isJavaVersionAtMost(JavaVersion.JAVA_22));\r\n        assertTrue(SystemUtils.isJavaVersionAtMost(JavaVersion.JAVA_23));\r\n        assertTrue(SystemUtils.isJavaVersionAtMost(JavaVersion.JAVA_24));\r\n    } else if (SystemUtils.IS_JAVA_10) {\r\n        assertFalse(SystemUtils.isJavaVersionAtMost(JavaVersion.JAVA_1_1));\r\n        assertFalse(SystemUtils.isJavaVersionAtMost(JavaVersion.JAVA_1_2));\r\n        assertFalse(SystemUtils.isJavaVersionAtMost(JavaVersion.JAVA_1_3));\r\n        assertFalse(SystemUtils.isJavaVersionAtMost(JavaVersion.JAVA_1_4));\r\n        assertFalse(SystemUtils.isJavaVersionAtMost(JavaVersion.JAVA_1_5));\r\n        assertFalse(SystemUtils.isJavaVersionAtMost(JavaVersion.JAVA_1_6));\r\n        assertFalse(SystemUtils.isJavaVersionAtMost(JavaVersion.JAVA_1_7));\r\n        assertFalse(SystemUtils.isJavaVersionAtMost(JavaVersion.JAVA_1_8));\r\n        assertFalse(SystemUtils.isJavaVersionAtMost(JavaVersion.JAVA_9));\r\n        assertTrue(SystemUtils.isJavaVersionAtMost(JavaVersion.JAVA_10));\r\n        assertTrue(SystemUtils.isJavaVersionAtMost(JavaVersion.JAVA_11));\r\n        assertTrue(SystemUtils.isJavaVersionAtMost(JavaVersion.JAVA_12));\r\n        assertTrue(SystemUtils.isJavaVersionAtMost(JavaVersion.JAVA_13));\r\n        assertTrue(SystemUtils.isJavaVersionAtMost(JavaVersion.JAVA_14));\r\n        assertTrue(SystemUtils.isJavaVersionAtMost(JavaVersion.JAVA_15));\r\n        assertTrue(SystemUtils.isJavaVersionAtMost(JavaVersion.JAVA_16));\r\n        assertTrue(SystemUtils.isJavaVersionAtMost(JavaVersion.JAVA_17));\r\n        assertTrue(SystemUtils.isJavaVersionAtMost(JavaVersion.JAVA_18));\r\n        assertTrue(SystemUtils.isJavaVersionAtMost(JavaVersion.JAVA_19));\r\n        assertTrue(SystemUtils.isJavaVersionAtMost(JavaVersion.JAVA_20));\r\n        assertTrue(SystemUtils.isJavaVersionAtMost(JavaVersion.JAVA_21));\r\n        assertTrue(SystemUtils.isJavaVersionAtMost(JavaVersion.JAVA_22));\r\n        assertTrue(SystemUtils.isJavaVersionAtMost(JavaVersion.JAVA_23));\r\n        assertTrue(SystemUtils.isJavaVersionAtMost(JavaVersion.JAVA_24));\r\n    } else if (SystemUtils.IS_JAVA_11) {\r\n        assertFalse(SystemUtils.isJavaVersionAtMost(JavaVersion.JAVA_1_1));\r\n        assertFalse(SystemUtils.isJavaVersionAtMost(JavaVersion.JAVA_1_2));\r\n        assertFalse(SystemUtils.isJavaVersionAtMost(JavaVersion.JAVA_1_3));\r\n        assertFalse(SystemUtils.isJavaVersionAtMost(JavaVersion.JAVA_1_4));\r\n        assertFalse(SystemUtils.isJavaVersionAtMost(JavaVersion.JAVA_1_5));\r\n        assertFalse(SystemUtils.isJavaVersionAtMost(JavaVersion.JAVA_1_6));\r\n        assertFalse(SystemUtils.isJavaVersionAtMost(JavaVersion.JAVA_1_7));\r\n        assertFalse(SystemUtils.isJavaVersionAtMost(JavaVersion.JAVA_1_8));\r\n        assertFalse(SystemUtils.isJavaVersionAtMost(JavaVersion.JAVA_9));\r\n        assertFalse(SystemUtils.isJavaVersionAtMost(JavaVersion.JAVA_10));\r\n        assertTrue(SystemUtils.isJavaVersionAtMost(JavaVersion.JAVA_11));\r\n        assertTrue(SystemUtils.isJavaVersionAtMost(JavaVersion.JAVA_12));\r\n        assertTrue(SystemUtils.isJavaVersionAtMost(JavaVersion.JAVA_13));\r\n        assertTrue(SystemUtils.isJavaVersionAtMost(JavaVersion.JAVA_14));\r\n        assertTrue(SystemUtils.isJavaVersionAtMost(JavaVersion.JAVA_15));\r\n        assertTrue(SystemUtils.isJavaVersionAtMost(JavaVersion.JAVA_16));\r\n        assertTrue(SystemUtils.isJavaVersionAtMost(JavaVersion.JAVA_17));\r\n        assertTrue(SystemUtils.isJavaVersionAtMost(JavaVersion.JAVA_18));\r\n        assertTrue(SystemUtils.isJavaVersionAtMost(JavaVersion.JAVA_19));\r\n        assertTrue(SystemUtils.isJavaVersionAtMost(JavaVersion.JAVA_20));\r\n        assertTrue(SystemUtils.isJavaVersionAtMost(JavaVersion.JAVA_21));\r\n        assertTrue(SystemUtils.isJavaVersionAtMost(JavaVersion.JAVA_22));\r\n        assertTrue(SystemUtils.isJavaVersionAtMost(JavaVersion.JAVA_23));\r\n        assertTrue(SystemUtils.isJavaVersionAtMost(JavaVersion.JAVA_24));\r\n    } else if (SystemUtils.IS_JAVA_12) {\r\n        assertFalse(SystemUtils.isJavaVersionAtMost(JavaVersion.JAVA_1_1));\r\n        assertFalse(SystemUtils.isJavaVersionAtMost(JavaVersion.JAVA_1_2));\r\n        assertFalse(SystemUtils.isJavaVersionAtMost(JavaVersion.JAVA_1_3));\r\n        assertFalse(SystemUtils.isJavaVersionAtMost(JavaVersion.JAVA_1_4));\r\n        assertFalse(SystemUtils.isJavaVersionAtMost(JavaVersion.JAVA_1_5));\r\n        assertFalse(SystemUtils.isJavaVersionAtMost(JavaVersion.JAVA_1_6));\r\n        assertFalse(SystemUtils.isJavaVersionAtMost(JavaVersion.JAVA_1_7));\r\n        assertFalse(SystemUtils.isJavaVersionAtMost(JavaVersion.JAVA_1_8));\r\n        assertFalse(SystemUtils.isJavaVersionAtMost(JavaVersion.JAVA_9));\r\n        assertFalse(SystemUtils.isJavaVersionAtMost(JavaVersion.JAVA_10));\r\n        assertFalse(SystemUtils.isJavaVersionAtMost(JavaVersion.JAVA_11));\r\n        assertTrue(SystemUtils.isJavaVersionAtMost(JavaVersion.JAVA_12));\r\n        assertTrue(SystemUtils.isJavaVersionAtMost(JavaVersion.JAVA_13));\r\n        assertTrue(SystemUtils.isJavaVersionAtMost(JavaVersion.JAVA_14));\r\n        assertTrue(SystemUtils.isJavaVersionAtMost(JavaVersion.JAVA_15));\r\n        assertTrue(SystemUtils.isJavaVersionAtMost(JavaVersion.JAVA_16));\r\n        assertTrue(SystemUtils.isJavaVersionAtMost(JavaVersion.JAVA_17));\r\n        assertTrue(SystemUtils.isJavaVersionAtMost(JavaVersion.JAVA_18));\r\n        assertTrue(SystemUtils.isJavaVersionAtMost(JavaVersion.JAVA_19));\r\n        assertTrue(SystemUtils.isJavaVersionAtMost(JavaVersion.JAVA_20));\r\n        assertTrue(SystemUtils.isJavaVersionAtMost(JavaVersion.JAVA_21));\r\n        assertTrue(SystemUtils.isJavaVersionAtMost(JavaVersion.JAVA_22));\r\n        assertTrue(SystemUtils.isJavaVersionAtMost(JavaVersion.JAVA_23));\r\n        assertTrue(SystemUtils.isJavaVersionAtMost(JavaVersion.JAVA_24));\r\n    } else if (SystemUtils.IS_JAVA_13) {\r\n        assertFalse(SystemUtils.isJavaVersionAtMost(JavaVersion.JAVA_1_1));\r\n        assertFalse(SystemUtils.isJavaVersionAtMost(JavaVersion.JAVA_1_2));\r\n        assertFalse(SystemUtils.isJavaVersionAtMost(JavaVersion.JAVA_1_3));\r\n        assertFalse(SystemUtils.isJavaVersionAtMost(JavaVersion.JAVA_1_4));\r\n        assertFalse(SystemUtils.isJavaVersionAtMost(JavaVersion.JAVA_1_5));\r\n        assertFalse(SystemUtils.isJavaVersionAtMost(JavaVersion.JAVA_1_6));\r\n        assertFalse(SystemUtils.isJavaVersionAtMost(JavaVersion.JAVA_1_7));\r\n        assertFalse(SystemUtils.isJavaVersionAtMost(JavaVersion.JAVA_1_8));\r\n        assertFalse(SystemUtils.isJavaVersionAtMost(JavaVersion.JAVA_9));\r\n        assertFalse(SystemUtils.isJavaVersionAtMost(JavaVersion.JAVA_10));\r\n        assertFalse(SystemUtils.isJavaVersionAtMost(JavaVersion.JAVA_11));\r\n        assertFalse(SystemUtils.isJavaVersionAtMost(JavaVersion.JAVA_12));\r\n        assertTrue(SystemUtils.isJavaVersionAtMost(JavaVersion.JAVA_13));\r\n        assertTrue(SystemUtils.isJavaVersionAtMost(JavaVersion.JAVA_14));\r\n        assertTrue(SystemUtils.isJavaVersionAtMost(JavaVersion.JAVA_15));\r\n        assertTrue(SystemUtils.isJavaVersionAtMost(JavaVersion.JAVA_16));\r\n        assertTrue(SystemUtils.isJavaVersionAtMost(JavaVersion.JAVA_17));\r\n        assertTrue(SystemUtils.isJavaVersionAtMost(JavaVersion.JAVA_18));\r\n        assertTrue(SystemUtils.isJavaVersionAtMost(JavaVersion.JAVA_19));\r\n        assertTrue(SystemUtils.isJavaVersionAtMost(JavaVersion.JAVA_20));\r\n        assertTrue(SystemUtils.isJavaVersionAtMost(JavaVersion.JAVA_21));\r\n        assertTrue(SystemUtils.isJavaVersionAtMost(JavaVersion.JAVA_22));\r\n        assertTrue(SystemUtils.isJavaVersionAtMost(JavaVersion.JAVA_23));\r\n        assertTrue(SystemUtils.isJavaVersionAtMost(JavaVersion.JAVA_24));\r\n    } else if (SystemUtils.IS_JAVA_14) {\r\n        assertFalse(SystemUtils.isJavaVersionAtMost(JavaVersion.JAVA_1_1));\r\n        assertFalse(SystemUtils.isJavaVersionAtMost(JavaVersion.JAVA_1_2));\r\n        assertFalse(SystemUtils.isJavaVersionAtMost(JavaVersion.JAVA_1_3));\r\n        assertFalse(SystemUtils.isJavaVersionAtMost(JavaVersion.JAVA_1_4));\r\n        assertFalse(SystemUtils.isJavaVersionAtMost(JavaVersion.JAVA_1_5));\r\n        assertFalse(SystemUtils.isJavaVersionAtMost(JavaVersion.JAVA_1_6));\r\n        assertFalse(SystemUtils.isJavaVersionAtMost(JavaVersion.JAVA_1_7));\r\n        assertFalse(SystemUtils.isJavaVersionAtMost(JavaVersion.JAVA_1_8));\r\n        assertFalse(SystemUtils.isJavaVersionAtMost(JavaVersion.JAVA_9));\r\n        assertFalse(SystemUtils.isJavaVersionAtMost(JavaVersion.JAVA_10));\r\n        assertFalse(SystemUtils.isJavaVersionAtMost(JavaVersion.JAVA_11));\r\n        assertFalse(SystemUtils.isJavaVersionAtMost(JavaVersion.JAVA_12));\r\n        assertFalse(SystemUtils.isJavaVersionAtMost(JavaVersion.JAVA_13));\r\n        assertTrue(SystemUtils.isJavaVersionAtMost(JavaVersion.JAVA_14));\r\n        assertTrue(SystemUtils.isJavaVersionAtMost(JavaVersion.JAVA_15));\r\n        assertTrue(SystemUtils.isJavaVersionAtMost(JavaVersion.JAVA_16));\r\n        assertTrue(SystemUtils.isJavaVersionAtMost(JavaVersion.JAVA_17));\r\n        assertTrue(SystemUtils.isJavaVersionAtMost(JavaVersion.JAVA_18));\r\n        assertTrue(SystemUtils.isJavaVersionAtMost(JavaVersion.JAVA_19));\r\n        assertTrue(SystemUtils.isJavaVersionAtMost(JavaVersion.JAVA_20));\r\n        assertTrue(SystemUtils.isJavaVersionAtMost(JavaVersion.JAVA_21));\r\n        assertTrue(SystemUtils.isJavaVersionAtMost(JavaVersion.JAVA_22));\r\n        assertTrue(SystemUtils.isJavaVersionAtMost(JavaVersion.JAVA_23));\r\n        assertTrue(SystemUtils.isJavaVersionAtMost(JavaVersion.JAVA_24));\r\n    } else if (SystemUtils.IS_JAVA_15) {\r\n        assertFalse(SystemUtils.isJavaVersionAtMost(JavaVersion.JAVA_1_1));\r\n        assertFalse(SystemUtils.isJavaVersionAtMost(JavaVersion.JAVA_1_2));\r\n        assertFalse(SystemUtils.isJavaVersionAtMost(JavaVersion.JAVA_1_3));\r\n        assertFalse(SystemUtils.isJavaVersionAtMost(JavaVersion.JAVA_1_4));\r\n        assertFalse(SystemUtils.isJavaVersionAtMost(JavaVersion.JAVA_1_5));\r\n        assertFalse(SystemUtils.isJavaVersionAtMost(JavaVersion.JAVA_1_6));\r\n        assertFalse(SystemUtils.isJavaVersionAtMost(JavaVersion.JAVA_1_7));\r\n        assertFalse(SystemUtils.isJavaVersionAtMost(JavaVersion.JAVA_1_8));\r\n        assertFalse(SystemUtils.isJavaVersionAtMost(JavaVersion.JAVA_9));\r\n        assertFalse(SystemUtils.isJavaVersionAtMost(JavaVersion.JAVA_10));\r\n        assertFalse(SystemUtils.isJavaVersionAtMost(JavaVersion.JAVA_11));\r\n        assertFalse(SystemUtils.isJavaVersionAtMost(JavaVersion.JAVA_12));\r\n        assertFalse(SystemUtils.isJavaVersionAtMost(JavaVersion.JAVA_13));\r\n        assertFalse(SystemUtils.isJavaVersionAtMost(JavaVersion.JAVA_14));\r\n        assertTrue(SystemUtils.isJavaVersionAtMost(JavaVersion.JAVA_15));\r\n        assertTrue(SystemUtils.isJavaVersionAtMost(JavaVersion.JAVA_16));\r\n        assertTrue(SystemUtils.isJavaVersionAtMost(JavaVersion.JAVA_17));\r\n        assertTrue(SystemUtils.isJavaVersionAtMost(JavaVersion.JAVA_18));\r\n        assertTrue(SystemUtils.isJavaVersionAtMost(JavaVersion.JAVA_19));\r\n        assertTrue(SystemUtils.isJavaVersionAtMost(JavaVersion.JAVA_20));\r\n        assertTrue(SystemUtils.isJavaVersionAtMost(JavaVersion.JAVA_21));\r\n        assertTrue(SystemUtils.isJavaVersionAtMost(JavaVersion.JAVA_22));\r\n        assertTrue(SystemUtils.isJavaVersionAtMost(JavaVersion.JAVA_23));\r\n        assertTrue(SystemUtils.isJavaVersionAtMost(JavaVersion.JAVA_24));\r\n    } else if (SystemUtils.IS_JAVA_16) {\r\n        assertFalse(SystemUtils.isJavaVersionAtMost(JavaVersion.JAVA_1_1));\r\n        assertFalse(SystemUtils.isJavaVersionAtMost(JavaVersion.JAVA_1_2));\r\n        assertFalse(SystemUtils.isJavaVersionAtMost(JavaVersion.JAVA_1_3));\r\n        assertFalse(SystemUtils.isJavaVersionAtMost(JavaVersion.JAVA_1_4));\r\n        assertFalse(SystemUtils.isJavaVersionAtMost(JavaVersion.JAVA_1_5));\r\n        assertFalse(SystemUtils.isJavaVersionAtMost(JavaVersion.JAVA_1_6));\r\n        assertFalse(SystemUtils.isJavaVersionAtMost(JavaVersion.JAVA_1_7));\r\n        assertFalse(SystemUtils.isJavaVersionAtMost(JavaVersion.JAVA_1_8));\r\n        assertFalse(SystemUtils.isJavaVersionAtMost(JavaVersion.JAVA_9));\r\n        assertFalse(SystemUtils.isJavaVersionAtMost(JavaVersion.JAVA_10));\r\n        assertFalse(SystemUtils.isJavaVersionAtMost(JavaVersion.JAVA_11));\r\n        assertFalse(SystemUtils.isJavaVersionAtMost(JavaVersion.JAVA_12));\r\n        assertFalse(SystemUtils.isJavaVersionAtMost(JavaVersion.JAVA_13));\r\n        assertFalse(SystemUtils.isJavaVersionAtMost(JavaVersion.JAVA_14));\r\n        assertFalse(SystemUtils.isJavaVersionAtMost(JavaVersion.JAVA_15));\r\n        assertTrue(SystemUtils.isJavaVersionAtMost(JavaVersion.JAVA_16));\r\n        assertTrue(SystemUtils.isJavaVersionAtMost(JavaVersion.JAVA_17));\r\n        assertTrue(SystemUtils.isJavaVersionAtMost(JavaVersion.JAVA_18));\r\n        assertTrue(SystemUtils.isJavaVersionAtMost(JavaVersion.JAVA_19));\r\n        assertTrue(SystemUtils.isJavaVersionAtMost(JavaVersion.JAVA_20));\r\n        assertTrue(SystemUtils.isJavaVersionAtMost(JavaVersion.JAVA_21));\r\n        assertTrue(SystemUtils.isJavaVersionAtMost(JavaVersion.JAVA_22));\r\n        assertTrue(SystemUtils.isJavaVersionAtMost(JavaVersion.JAVA_23));\r\n        assertTrue(SystemUtils.isJavaVersionAtMost(JavaVersion.JAVA_24));\r\n    } else if (SystemUtils.IS_JAVA_17) {\r\n        assertFalse(SystemUtils.isJavaVersionAtMost(JavaVersion.JAVA_1_1));\r\n        assertFalse(SystemUtils.isJavaVersionAtMost(JavaVersion.JAVA_1_2));\r\n        assertFalse(SystemUtils.isJavaVersionAtMost(JavaVersion.JAVA_1_3));\r\n        assertFalse(SystemUtils.isJavaVersionAtMost(JavaVersion.JAVA_1_4));\r\n        assertFalse(SystemUtils.isJavaVersionAtMost(JavaVersion.JAVA_1_5));\r\n        assertFalse(SystemUtils.isJavaVersionAtMost(JavaVersion.JAVA_1_6));\r\n        assertFalse(SystemUtils.isJavaVersionAtMost(JavaVersion.JAVA_1_7));\r\n        assertFalse(SystemUtils.isJavaVersionAtMost(JavaVersion.JAVA_1_8));\r\n        assertFalse(SystemUtils.isJavaVersionAtMost(JavaVersion.JAVA_9));\r\n        assertFalse(SystemUtils.isJavaVersionAtMost(JavaVersion.JAVA_10));\r\n        assertFalse(SystemUtils.isJavaVersionAtMost(JavaVersion.JAVA_11));\r\n        assertFalse(SystemUtils.isJavaVersionAtMost(JavaVersion.JAVA_12));\r\n        assertFalse(SystemUtils.isJavaVersionAtMost(JavaVersion.JAVA_13));\r\n        assertFalse(SystemUtils.isJavaVersionAtMost(JavaVersion.JAVA_14));\r\n        assertFalse(SystemUtils.isJavaVersionAtMost(JavaVersion.JAVA_15));\r\n        assertFalse(SystemUtils.isJavaVersionAtMost(JavaVersion.JAVA_16));\r\n        assertTrue(SystemUtils.isJavaVersionAtMost(JavaVersion.JAVA_17));\r\n        assertTrue(SystemUtils.isJavaVersionAtMost(JavaVersion.JAVA_18));\r\n        assertTrue(SystemUtils.isJavaVersionAtMost(JavaVersion.JAVA_19));\r\n        assertTrue(SystemUtils.isJavaVersionAtMost(JavaVersion.JAVA_20));\r\n        assertTrue(SystemUtils.isJavaVersionAtMost(JavaVersion.JAVA_21));\r\n        assertTrue(SystemUtils.isJavaVersionAtMost(JavaVersion.JAVA_22));\r\n        assertTrue(SystemUtils.isJavaVersionAtMost(JavaVersion.JAVA_23));\r\n        assertTrue(SystemUtils.isJavaVersionAtMost(JavaVersion.JAVA_24));\r\n    } else if (SystemUtils.IS_JAVA_18) {\r\n        assertFalse(SystemUtils.isJavaVersionAtMost(JavaVersion.JAVA_1_1));\r\n        assertFalse(SystemUtils.isJavaVersionAtMost(JavaVersion.JAVA_1_2));\r\n        assertFalse(SystemUtils.isJavaVersionAtMost(JavaVersion.JAVA_1_3));\r\n        assertFalse(SystemUtils.isJavaVersionAtMost(JavaVersion.JAVA_1_4));\r\n        assertFalse(SystemUtils.isJavaVersionAtMost(JavaVersion.JAVA_1_5));\r\n        assertFalse(SystemUtils.isJavaVersionAtMost(JavaVersion.JAVA_1_6));\r\n        assertFalse(SystemUtils.isJavaVersionAtMost(JavaVersion.JAVA_1_7));\r\n        assertFalse(SystemUtils.isJavaVersionAtMost(JavaVersion.JAVA_1_8));\r\n        assertFalse(SystemUtils.isJavaVersionAtMost(JavaVersion.JAVA_9));\r\n        assertFalse(SystemUtils.isJavaVersionAtMost(JavaVersion.JAVA_10));\r\n        assertFalse(SystemUtils.isJavaVersionAtMost(JavaVersion.JAVA_11));\r\n        assertFalse(SystemUtils.isJavaVersionAtMost(JavaVersion.JAVA_12));\r\n        assertFalse(SystemUtils.isJavaVersionAtMost(JavaVersion.JAVA_13));\r\n        assertFalse(SystemUtils.isJavaVersionAtMost(JavaVersion.JAVA_14));\r\n        assertFalse(SystemUtils.isJavaVersionAtMost(JavaVersion.JAVA_15));\r\n        assertFalse(SystemUtils.isJavaVersionAtMost(JavaVersion.JAVA_16));\r\n        assertFalse(SystemUtils.isJavaVersionAtMost(JavaVersion.JAVA_17));\r\n        assertTrue(SystemUtils.isJavaVersionAtMost(JavaVersion.JAVA_18));\r\n        assertTrue(SystemUtils.isJavaVersionAtMost(JavaVersion.JAVA_19));\r\n        assertTrue(SystemUtils.isJavaVersionAtMost(JavaVersion.JAVA_20));\r\n        assertTrue(SystemUtils.isJavaVersionAtMost(JavaVersion.JAVA_21));\r\n        assertTrue(SystemUtils.isJavaVersionAtMost(JavaVersion.JAVA_22));\r\n        assertTrue(SystemUtils.isJavaVersionAtMost(JavaVersion.JAVA_23));\r\n        assertTrue(SystemUtils.isJavaVersionAtMost(JavaVersion.JAVA_24));\r\n    } else if (SystemUtils.IS_JAVA_19) {\r\n        assertFalse(SystemUtils.isJavaVersionAtMost(JavaVersion.JAVA_1_1));\r\n        assertFalse(SystemUtils.isJavaVersionAtMost(JavaVersion.JAVA_1_2));\r\n        assertFalse(SystemUtils.isJavaVersionAtMost(JavaVersion.JAVA_1_3));\r\n        assertFalse(SystemUtils.isJavaVersionAtMost(JavaVersion.JAVA_1_4));\r\n        assertFalse(SystemUtils.isJavaVersionAtMost(JavaVersion.JAVA_1_5));\r\n        assertFalse(SystemUtils.isJavaVersionAtMost(JavaVersion.JAVA_1_6));\r\n        assertFalse(SystemUtils.isJavaVersionAtMost(JavaVersion.JAVA_1_7));\r\n        assertFalse(SystemUtils.isJavaVersionAtMost(JavaVersion.JAVA_1_8));\r\n        assertFalse(SystemUtils.isJavaVersionAtMost(JavaVersion.JAVA_9));\r\n        assertFalse(SystemUtils.isJavaVersionAtMost(JavaVersion.JAVA_10));\r\n        assertFalse(SystemUtils.isJavaVersionAtMost(JavaVersion.JAVA_11));\r\n        assertFalse(SystemUtils.isJavaVersionAtMost(JavaVersion.JAVA_12));\r\n        assertFalse(SystemUtils.isJavaVersionAtMost(JavaVersion.JAVA_13));\r\n        assertFalse(SystemUtils.isJavaVersionAtMost(JavaVersion.JAVA_14));\r\n        assertFalse(SystemUtils.isJavaVersionAtMost(JavaVersion.JAVA_15));\r\n        assertFalse(SystemUtils.isJavaVersionAtMost(JavaVersion.JAVA_16));\r\n        assertFalse(SystemUtils.isJavaVersionAtMost(JavaVersion.JAVA_17));\r\n        assertFalse(SystemUtils.isJavaVersionAtMost(JavaVersion.JAVA_18));\r\n        assertTrue(SystemUtils.isJavaVersionAtMost(JavaVersion.JAVA_19));\r\n        assertTrue(SystemUtils.isJavaVersionAtMost(JavaVersion.JAVA_20));\r\n        assertTrue(SystemUtils.isJavaVersionAtMost(JavaVersion.JAVA_21));\r\n        assertTrue(SystemUtils.isJavaVersionAtMost(JavaVersion.JAVA_22));\r\n        assertTrue(SystemUtils.isJavaVersionAtMost(JavaVersion.JAVA_23));\r\n        assertTrue(SystemUtils.isJavaVersionAtMost(JavaVersion.JAVA_24));\r\n    } else if (SystemUtils.IS_JAVA_20) {\r\n        assertFalse(SystemUtils.isJavaVersionAtMost(JavaVersion.JAVA_1_1));\r\n        assertFalse(SystemUtils.isJavaVersionAtMost(JavaVersion.JAVA_1_2));\r\n        assertFalse(SystemUtils.isJavaVersionAtMost(JavaVersion.JAVA_1_3));\r\n        assertFalse(SystemUtils.isJavaVersionAtMost(JavaVersion.JAVA_1_4));\r\n        assertFalse(SystemUtils.isJavaVersionAtMost(JavaVersion.JAVA_1_5));\r\n        assertFalse(SystemUtils.isJavaVersionAtMost(JavaVersion.JAVA_1_6));\r\n        assertFalse(SystemUtils.isJavaVersionAtMost(JavaVersion.JAVA_1_7));\r\n        assertFalse(SystemUtils.isJavaVersionAtMost(JavaVersion.JAVA_1_8));\r\n        assertFalse(SystemUtils.isJavaVersionAtMost(JavaVersion.JAVA_9));\r\n        assertFalse(SystemUtils.isJavaVersionAtMost(JavaVersion.JAVA_10));\r\n        assertFalse(SystemUtils.isJavaVersionAtMost(JavaVersion.JAVA_11));\r\n        assertFalse(SystemUtils.isJavaVersionAtMost(JavaVersion.JAVA_12));\r\n        assertFalse(SystemUtils.isJavaVersionAtMost(JavaVersion.JAVA_13));\r\n        assertFalse(SystemUtils.isJavaVersionAtMost(JavaVersion.JAVA_14));\r\n        assertFalse(SystemUtils.isJavaVersionAtMost(JavaVersion.JAVA_15));\r\n        assertFalse(SystemUtils.isJavaVersionAtMost(JavaVersion.JAVA_16));\r\n        assertFalse(SystemUtils.isJavaVersionAtMost(JavaVersion.JAVA_17));\r\n        assertFalse(SystemUtils.isJavaVersionAtMost(JavaVersion.JAVA_18));\r\n        assertFalse(SystemUtils.isJavaVersionAtMost(JavaVersion.JAVA_19));\r\n        assertTrue(SystemUtils.isJavaVersionAtMost(JavaVersion.JAVA_20));\r\n        assertTrue(SystemUtils.isJavaVersionAtMost(JavaVersion.JAVA_21));\r\n        assertTrue(SystemUtils.isJavaVersionAtMost(JavaVersion.JAVA_22));\r\n        assertTrue(SystemUtils.isJavaVersionAtMost(JavaVersion.JAVA_23));\r\n        assertTrue(SystemUtils.isJavaVersionAtMost(JavaVersion.JAVA_24));\r\n    } else if (SystemUtils.IS_JAVA_21) {\r\n        assertFalse(SystemUtils.isJavaVersionAtMost(JavaVersion.JAVA_1_1));\r\n        assertFalse(SystemUtils.isJavaVersionAtMost(JavaVersion.JAVA_1_2));\r\n        assertFalse(SystemUtils.isJavaVersionAtMost(JavaVersion.JAVA_1_3));\r\n        assertFalse(SystemUtils.isJavaVersionAtMost(JavaVersion.JAVA_1_4));\r\n        assertFalse(SystemUtils.isJavaVersionAtMost(JavaVersion.JAVA_1_5));\r\n        assertFalse(SystemUtils.isJavaVersionAtMost(JavaVersion.JAVA_1_6));\r\n        assertFalse(SystemUtils.isJavaVersionAtMost(JavaVersion.JAVA_1_7));\r\n        assertFalse(SystemUtils.isJavaVersionAtMost(JavaVersion.JAVA_1_8));\r\n        assertFalse(SystemUtils.isJavaVersionAtMost(JavaVersion.JAVA_9));\r\n        assertFalse(SystemUtils.isJavaVersionAtMost(JavaVersion.JAVA_10));\r\n        assertFalse(SystemUtils.isJavaVersionAtMost(JavaVersion.JAVA_11));\r\n        assertFalse(SystemUtils.isJavaVersionAtMost(JavaVersion.JAVA_12));\r\n        assertFalse(SystemUtils.isJavaVersionAtMost(JavaVersion.JAVA_13));\r\n        assertFalse(SystemUtils.isJavaVersionAtMost(JavaVersion.JAVA_14));\r\n        assertFalse(SystemUtils.isJavaVersionAtMost(JavaVersion.JAVA_15));\r\n        assertFalse(SystemUtils.isJavaVersionAtMost(JavaVersion.JAVA_16));\r\n        assertFalse(SystemUtils.isJavaVersionAtMost(JavaVersion.JAVA_17));\r\n        assertFalse(SystemUtils.isJavaVersionAtMost(JavaVersion.JAVA_18));\r\n        assertFalse(SystemUtils.isJavaVersionAtMost(JavaVersion.JAVA_19));\r\n        assertFalse(SystemUtils.isJavaVersionAtMost(JavaVersion.JAVA_20));\r\n        assertTrue(SystemUtils.isJavaVersionAtMost(JavaVersion.JAVA_21));\r\n        assertTrue(SystemUtils.isJavaVersionAtMost(JavaVersion.JAVA_22));\r\n        assertTrue(SystemUtils.isJavaVersionAtMost(JavaVersion.JAVA_23));\r\n        assertTrue(SystemUtils.isJavaVersionAtMost(JavaVersion.JAVA_24));\r\n    } else if (SystemUtils.IS_JAVA_22) {\r\n        assertFalse(SystemUtils.isJavaVersionAtMost(JavaVersion.JAVA_1_1));\r\n        assertFalse(SystemUtils.isJavaVersionAtMost(JavaVersion.JAVA_1_2));\r\n        assertFalse(SystemUtils.isJavaVersionAtMost(JavaVersion.JAVA_1_3));\r\n        assertFalse(SystemUtils.isJavaVersionAtMost(JavaVersion.JAVA_1_4));\r\n        assertFalse(SystemUtils.isJavaVersionAtMost(JavaVersion.JAVA_1_5));\r\n        assertFalse(SystemUtils.isJavaVersionAtMost(JavaVersion.JAVA_1_6));\r\n        assertFalse(SystemUtils.isJavaVersionAtMost(JavaVersion.JAVA_1_7));\r\n        assertFalse(SystemUtils.isJavaVersionAtMost(JavaVersion.JAVA_1_8));\r\n        assertFalse(SystemUtils.isJavaVersionAtMost(JavaVersion.JAVA_9));\r\n        assertFalse(SystemUtils.isJavaVersionAtMost(JavaVersion.JAVA_10));\r\n        assertFalse(SystemUtils.isJavaVersionAtMost(JavaVersion.JAVA_11));\r\n        assertFalse(SystemUtils.isJavaVersionAtMost(JavaVersion.JAVA_12));\r\n        assertFalse(SystemUtils.isJavaVersionAtMost(JavaVersion.JAVA_13));\r\n        assertFalse(SystemUtils.isJavaVersionAtMost(JavaVersion.JAVA_14));\r\n        assertFalse(SystemUtils.isJavaVersionAtMost(JavaVersion.JAVA_15));\r\n        assertFalse(SystemUtils.isJavaVersionAtMost(JavaVersion.JAVA_16));\r\n        assertFalse(SystemUtils.isJavaVersionAtMost(JavaVersion.JAVA_17));\r\n        assertFalse(SystemUtils.isJavaVersionAtMost(JavaVersion.JAVA_18));\r\n        assertFalse(SystemUtils.isJavaVersionAtMost(JavaVersion.JAVA_19));\r\n        assertFalse(SystemUtils.isJavaVersionAtMost(JavaVersion.JAVA_20));\r\n        assertFalse(SystemUtils.isJavaVersionAtMost(JavaVersion.JAVA_21));\r\n        assertTrue(SystemUtils.isJavaVersionAtMost(JavaVersion.JAVA_22));\r\n        assertTrue(SystemUtils.isJavaVersionAtMost(JavaVersion.JAVA_23));\r\n        assertTrue(SystemUtils.isJavaVersionAtMost(JavaVersion.JAVA_24));\r\n    } else if (SystemUtils.IS_JAVA_23) {\r\n        assertFalse(SystemUtils.isJavaVersionAtMost(JavaVersion.JAVA_1_1));\r\n        assertFalse(SystemUtils.isJavaVersionAtMost(JavaVersion.JAVA_1_2));\r\n        assertFalse(SystemUtils.isJavaVersionAtMost(JavaVersion.JAVA_1_3));\r\n        assertFalse(SystemUtils.isJavaVersionAtMost(JavaVersion.JAVA_1_4));\r\n        assertFalse(SystemUtils.isJavaVersionAtMost(JavaVersion.JAVA_1_5));\r\n        assertFalse(SystemUtils.isJavaVersionAtMost(JavaVersion.JAVA_1_6));\r\n        assertFalse(SystemUtils.isJavaVersionAtMost(JavaVersion.JAVA_1_7));\r\n        assertFalse(SystemUtils.isJavaVersionAtMost(JavaVersion.JAVA_1_8));\r\n        assertFalse(SystemUtils.isJavaVersionAtMost(JavaVersion.JAVA_9));\r\n        assertFalse(SystemUtils.isJavaVersionAtMost(JavaVersion.JAVA_10));\r\n        assertFalse(SystemUtils.isJavaVersionAtMost(JavaVersion.JAVA_11));\r\n        assertFalse(SystemUtils.isJavaVersionAtMost(JavaVersion.JAVA_12));\r\n        assertFalse(SystemUtils.isJavaVersionAtMost(JavaVersion.JAVA_13));\r\n        assertFalse(SystemUtils.isJavaVersionAtMost(JavaVersion.JAVA_14));\r\n        assertFalse(SystemUtils.isJavaVersionAtMost(JavaVersion.JAVA_15));\r\n        assertFalse(SystemUtils.isJavaVersionAtMost(JavaVersion.JAVA_16));\r\n        assertFalse(SystemUtils.isJavaVersionAtMost(JavaVersion.JAVA_17));\r\n        assertFalse(SystemUtils.isJavaVersionAtMost(JavaVersion.JAVA_18));\r\n        assertFalse(SystemUtils.isJavaVersionAtMost(JavaVersion.JAVA_19));\r\n        assertFalse(SystemUtils.isJavaVersionAtMost(JavaVersion.JAVA_20));\r\n        assertFalse(SystemUtils.isJavaVersionAtMost(JavaVersion.JAVA_21));\r\n        assertFalse(SystemUtils.isJavaVersionAtMost(JavaVersion.JAVA_22));\r\n        assertTrue(SystemUtils.isJavaVersionAtMost(JavaVersion.JAVA_23));\r\n        assertTrue(SystemUtils.isJavaVersionAtMost(JavaVersion.JAVA_24));\r\n    } else if (SystemUtils.IS_JAVA_24) {\r\n        assertFalse(SystemUtils.isJavaVersionAtMost(JavaVersion.JAVA_1_1));\r\n        assertFalse(SystemUtils.isJavaVersionAtMost(JavaVersion.JAVA_1_2));\r\n        assertFalse(SystemUtils.isJavaVersionAtMost(JavaVersion.JAVA_1_3));\r\n        assertFalse(SystemUtils.isJavaVersionAtMost(JavaVersion.JAVA_1_4));\r\n        assertFalse(SystemUtils.isJavaVersionAtMost(JavaVersion.JAVA_1_5));\r\n        assertFalse(SystemUtils.isJavaVersionAtMost(JavaVersion.JAVA_1_6));\r\n        assertFalse(SystemUtils.isJavaVersionAtMost(JavaVersion.JAVA_1_7));\r\n        assertFalse(SystemUtils.isJavaVersionAtMost(JavaVersion.JAVA_1_8));\r\n        assertFalse(SystemUtils.isJavaVersionAtMost(JavaVersion.JAVA_9));\r\n        assertFalse(SystemUtils.isJavaVersionAtMost(JavaVersion.JAVA_10));\r\n        assertFalse(SystemUtils.isJavaVersionAtMost(JavaVersion.JAVA_11));\r\n        assertFalse(SystemUtils.isJavaVersionAtMost(JavaVersion.JAVA_12));\r\n        assertFalse(SystemUtils.isJavaVersionAtMost(JavaVersion.JAVA_13));\r\n        assertFalse(SystemUtils.isJavaVersionAtMost(JavaVersion.JAVA_14));\r\n        assertFalse(SystemUtils.isJavaVersionAtMost(JavaVersion.JAVA_15));\r\n        assertFalse(SystemUtils.isJavaVersionAtMost(JavaVersion.JAVA_16));\r\n        assertFalse(SystemUtils.isJavaVersionAtMost(JavaVersion.JAVA_17));\r\n        assertFalse(SystemUtils.isJavaVersionAtMost(JavaVersion.JAVA_18));\r\n        assertFalse(SystemUtils.isJavaVersionAtMost(JavaVersion.JAVA_19));\r\n        assertFalse(SystemUtils.isJavaVersionAtMost(JavaVersion.JAVA_20));\r\n        assertFalse(SystemUtils.isJavaVersionAtMost(JavaVersion.JAVA_21));\r\n        assertFalse(SystemUtils.isJavaVersionAtMost(JavaVersion.JAVA_22));\r\n        assertFalse(SystemUtils.isJavaVersionAtMost(JavaVersion.JAVA_23));\r\n        assertTrue(SystemUtils.isJavaVersionAtMost(JavaVersion.JAVA_24));\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\SystemUtilsTest.java",
  "methodName" : "testJavaAwtHeadless",
  "sourceCode" : "@Test\r\nvoid testJavaAwtHeadless() {\r\n    final String expectedStringValue = System.getProperty(\"java.awt.headless\");\r\n    final String expectedStringValueWithDefault = System.getProperty(\"java.awt.headless\", \"false\");\r\n    assertNotNull(expectedStringValueWithDefault);\r\n    final boolean expectedValue = Boolean.parseBoolean(expectedStringValue);\r\n    if (expectedStringValue != null) {\r\n        assertEquals(expectedStringValue, SystemUtils.JAVA_AWT_HEADLESS);\r\n    }\r\n    assertEquals(expectedValue, SystemUtils.isJavaAwtHeadless());\r\n    assertEquals(expectedStringValueWithDefault, \"\" + SystemUtils.isJavaAwtHeadless());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\SystemUtilsTest.java",
  "methodName" : "testJavaVersionMatches",
  "sourceCode" : "@Test\r\nvoid testJavaVersionMatches() {\r\n    String javaVersion = null;\r\n    assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, \"1.0\"));\r\n    assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, \"1.1\"));\r\n    assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, \"1.2\"));\r\n    assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, \"1.3\"));\r\n    assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, \"1.4\"));\r\n    assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, \"1.5\"));\r\n    assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, \"1.6\"));\r\n    assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, \"1.7\"));\r\n    assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, \"1.8\"));\r\n    assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, \"9\"));\r\n    assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, \"10\"));\r\n    assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, \"11\"));\r\n    assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, \"12\"));\r\n    assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, \"13\"));\r\n    assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, \"14\"));\r\n    assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, \"15\"));\r\n    assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, \"16\"));\r\n    assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, \"17\"));\r\n    assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, \"18\"));\r\n    assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, \"19\"));\r\n    assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, \"20\"));\r\n    assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, \"21\"));\r\n    assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, \"22\"));\r\n    assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, \"23\"));\r\n    assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, \"24\"));\r\n    javaVersion = \"\";\r\n    assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, \"1.0\"));\r\n    assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, \"1.1\"));\r\n    assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, \"1.2\"));\r\n    assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, \"1.3\"));\r\n    assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, \"1.4\"));\r\n    assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, \"1.5\"));\r\n    assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, \"1.6\"));\r\n    assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, \"1.7\"));\r\n    assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, \"1.8\"));\r\n    assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, \"9\"));\r\n    assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, \"10\"));\r\n    assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, \"11\"));\r\n    assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, \"12\"));\r\n    assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, \"13\"));\r\n    assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, \"14\"));\r\n    assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, \"15\"));\r\n    assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, \"16\"));\r\n    assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, \"17\"));\r\n    assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, \"18\"));\r\n    assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, \"19\"));\r\n    assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, \"20\"));\r\n    assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, \"21\"));\r\n    assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, \"22\"));\r\n    assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, \"23\"));\r\n    assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, \"24\"));\r\n    javaVersion = \"1.0\";\r\n    assertTrue(SystemUtils.isJavaVersionMatch(javaVersion, \"1.0\"));\r\n    assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, \"1.1\"));\r\n    assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, \"1.2\"));\r\n    assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, \"1.3\"));\r\n    assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, \"1.4\"));\r\n    assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, \"1.5\"));\r\n    assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, \"1.6\"));\r\n    assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, \"1.7\"));\r\n    assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, \"1.8\"));\r\n    assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, \"9\"));\r\n    assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, \"10\"));\r\n    assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, \"11\"));\r\n    assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, \"12\"));\r\n    assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, \"13\"));\r\n    assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, \"14\"));\r\n    assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, \"15\"));\r\n    assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, \"16\"));\r\n    assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, \"17\"));\r\n    assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, \"18\"));\r\n    assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, \"19\"));\r\n    assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, \"20\"));\r\n    assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, \"21\"));\r\n    assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, \"22\"));\r\n    assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, \"23\"));\r\n    assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, \"24\"));\r\n    javaVersion = \"1.1\";\r\n    assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, \"1.0\"));\r\n    assertTrue(SystemUtils.isJavaVersionMatch(javaVersion, \"1.1\"));\r\n    assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, \"1.2\"));\r\n    assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, \"1.3\"));\r\n    assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, \"1.4\"));\r\n    assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, \"1.5\"));\r\n    assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, \"1.6\"));\r\n    assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, \"1.7\"));\r\n    assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, \"1.8\"));\r\n    assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, \"9\"));\r\n    assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, \"10\"));\r\n    assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, \"11\"));\r\n    assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, \"12\"));\r\n    assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, \"13\"));\r\n    assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, \"14\"));\r\n    assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, \"15\"));\r\n    assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, \"16\"));\r\n    assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, \"17\"));\r\n    assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, \"18\"));\r\n    assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, \"19\"));\r\n    assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, \"20\"));\r\n    assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, \"21\"));\r\n    assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, \"22\"));\r\n    assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, \"23\"));\r\n    assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, \"24\"));\r\n    javaVersion = \"1.2\";\r\n    assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, \"1.0\"));\r\n    assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, \"1.1\"));\r\n    assertTrue(SystemUtils.isJavaVersionMatch(javaVersion, \"1.2\"));\r\n    assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, \"1.3\"));\r\n    assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, \"1.4\"));\r\n    assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, \"1.5\"));\r\n    assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, \"1.6\"));\r\n    assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, \"1.7\"));\r\n    assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, \"1.8\"));\r\n    assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, \"9\"));\r\n    assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, \"10\"));\r\n    assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, \"11\"));\r\n    assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, \"12\"));\r\n    assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, \"13\"));\r\n    assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, \"14\"));\r\n    assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, \"15\"));\r\n    assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, \"16\"));\r\n    assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, \"17\"));\r\n    assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, \"18\"));\r\n    assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, \"19\"));\r\n    assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, \"20\"));\r\n    assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, \"21\"));\r\n    assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, \"22\"));\r\n    assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, \"23\"));\r\n    assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, \"24\"));\r\n    javaVersion = \"1.3.0\";\r\n    assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, \"1.0\"));\r\n    assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, \"1.1\"));\r\n    assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, \"1.2\"));\r\n    assertTrue(SystemUtils.isJavaVersionMatch(javaVersion, \"1.3\"));\r\n    assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, \"1.4\"));\r\n    assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, \"1.5\"));\r\n    assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, \"1.6\"));\r\n    assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, \"1.7\"));\r\n    assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, \"1.8\"));\r\n    assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, \"9\"));\r\n    assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, \"10\"));\r\n    assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, \"11\"));\r\n    assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, \"12\"));\r\n    assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, \"13\"));\r\n    assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, \"14\"));\r\n    assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, \"15\"));\r\n    assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, \"16\"));\r\n    assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, \"17\"));\r\n    assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, \"18\"));\r\n    assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, \"19\"));\r\n    assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, \"20\"));\r\n    assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, \"21\"));\r\n    assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, \"22\"));\r\n    assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, \"23\"));\r\n    assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, \"24\"));\r\n    javaVersion = \"1.3.1\";\r\n    assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, \"1.0\"));\r\n    assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, \"1.1\"));\r\n    assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, \"1.2\"));\r\n    assertTrue(SystemUtils.isJavaVersionMatch(javaVersion, \"1.3\"));\r\n    assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, \"1.4\"));\r\n    assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, \"1.5\"));\r\n    assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, \"1.6\"));\r\n    assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, \"1.7\"));\r\n    assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, \"1.8\"));\r\n    assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, \"9\"));\r\n    assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, \"10\"));\r\n    assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, \"11\"));\r\n    assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, \"12\"));\r\n    assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, \"13\"));\r\n    assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, \"14\"));\r\n    assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, \"15\"));\r\n    assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, \"16\"));\r\n    assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, \"17\"));\r\n    assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, \"18\"));\r\n    assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, \"19\"));\r\n    assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, \"20\"));\r\n    assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, \"21\"));\r\n    assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, \"22\"));\r\n    assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, \"23\"));\r\n    assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, \"24\"));\r\n    javaVersion = \"1.4.0\";\r\n    assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, \"1.0\"));\r\n    assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, \"1.1\"));\r\n    assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, \"1.2\"));\r\n    assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, \"1.3\"));\r\n    assertTrue(SystemUtils.isJavaVersionMatch(javaVersion, \"1.4\"));\r\n    assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, \"1.5\"));\r\n    assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, \"1.6\"));\r\n    assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, \"1.7\"));\r\n    assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, \"1.8\"));\r\n    assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, \"9\"));\r\n    assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, \"10\"));\r\n    assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, \"11\"));\r\n    assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, \"12\"));\r\n    assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, \"13\"));\r\n    assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, \"14\"));\r\n    assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, \"15\"));\r\n    assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, \"16\"));\r\n    assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, \"17\"));\r\n    assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, \"18\"));\r\n    assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, \"19\"));\r\n    assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, \"20\"));\r\n    assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, \"21\"));\r\n    assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, \"22\"));\r\n    assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, \"23\"));\r\n    assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, \"24\"));\r\n    javaVersion = \"1.4.1\";\r\n    assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, \"1.0\"));\r\n    assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, \"1.1\"));\r\n    assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, \"1.2\"));\r\n    assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, \"1.3\"));\r\n    assertTrue(SystemUtils.isJavaVersionMatch(javaVersion, \"1.4\"));\r\n    assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, \"1.5\"));\r\n    assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, \"1.6\"));\r\n    assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, \"1.7\"));\r\n    assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, \"1.8\"));\r\n    assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, \"9\"));\r\n    assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, \"10\"));\r\n    assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, \"11\"));\r\n    assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, \"12\"));\r\n    assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, \"13\"));\r\n    assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, \"14\"));\r\n    assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, \"15\"));\r\n    assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, \"16\"));\r\n    assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, \"17\"));\r\n    assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, \"18\"));\r\n    assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, \"19\"));\r\n    assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, \"20\"));\r\n    assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, \"21\"));\r\n    assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, \"22\"));\r\n    assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, \"23\"));\r\n    assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, \"24\"));\r\n    javaVersion = \"1.4.2\";\r\n    assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, \"1.0\"));\r\n    assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, \"1.1\"));\r\n    assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, \"1.2\"));\r\n    assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, \"1.3\"));\r\n    assertTrue(SystemUtils.isJavaVersionMatch(javaVersion, \"1.4\"));\r\n    assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, \"1.5\"));\r\n    assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, \"1.6\"));\r\n    assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, \"1.7\"));\r\n    assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, \"1.8\"));\r\n    assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, \"9\"));\r\n    assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, \"10\"));\r\n    assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, \"11\"));\r\n    assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, \"12\"));\r\n    assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, \"13\"));\r\n    assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, \"14\"));\r\n    assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, \"15\"));\r\n    assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, \"16\"));\r\n    assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, \"17\"));\r\n    assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, \"18\"));\r\n    assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, \"19\"));\r\n    assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, \"20\"));\r\n    assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, \"21\"));\r\n    assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, \"22\"));\r\n    assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, \"23\"));\r\n    assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, \"24\"));\r\n    javaVersion = \"1.5.0\";\r\n    assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, \"1.0\"));\r\n    assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, \"1.1\"));\r\n    assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, \"1.2\"));\r\n    assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, \"1.3\"));\r\n    assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, \"1.4\"));\r\n    assertTrue(SystemUtils.isJavaVersionMatch(javaVersion, \"1.5\"));\r\n    assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, \"1.6\"));\r\n    assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, \"1.7\"));\r\n    assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, \"1.8\"));\r\n    assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, \"9\"));\r\n    assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, \"10\"));\r\n    assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, \"11\"));\r\n    assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, \"12\"));\r\n    assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, \"13\"));\r\n    assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, \"14\"));\r\n    assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, \"15\"));\r\n    assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, \"16\"));\r\n    assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, \"17\"));\r\n    assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, \"18\"));\r\n    assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, \"19\"));\r\n    assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, \"20\"));\r\n    assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, \"21\"));\r\n    assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, \"22\"));\r\n    assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, \"23\"));\r\n    assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, \"24\"));\r\n    javaVersion = \"1.6.0\";\r\n    assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, \"1.0\"));\r\n    assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, \"1.1\"));\r\n    assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, \"1.2\"));\r\n    assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, \"1.3\"));\r\n    assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, \"1.4\"));\r\n    assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, \"1.5\"));\r\n    assertTrue(SystemUtils.isJavaVersionMatch(javaVersion, \"1.6\"));\r\n    assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, \"1.7\"));\r\n    assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, \"1.8\"));\r\n    assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, \"9\"));\r\n    assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, \"10\"));\r\n    assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, \"11\"));\r\n    assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, \"12\"));\r\n    assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, \"13\"));\r\n    assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, \"14\"));\r\n    assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, \"15\"));\r\n    assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, \"16\"));\r\n    assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, \"17\"));\r\n    assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, \"18\"));\r\n    assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, \"19\"));\r\n    assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, \"20\"));\r\n    assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, \"21\"));\r\n    assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, \"22\"));\r\n    assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, \"23\"));\r\n    assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, \"24\"));\r\n    javaVersion = \"1.7.0\";\r\n    assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, \"1.0\"));\r\n    assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, \"1.1\"));\r\n    assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, \"1.2\"));\r\n    assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, \"1.3\"));\r\n    assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, \"1.4\"));\r\n    assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, \"1.5\"));\r\n    assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, \"1.6\"));\r\n    assertTrue(SystemUtils.isJavaVersionMatch(javaVersion, \"1.7\"));\r\n    assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, \"1.8\"));\r\n    assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, \"9\"));\r\n    assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, \"10\"));\r\n    assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, \"11\"));\r\n    assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, \"12\"));\r\n    assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, \"13\"));\r\n    assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, \"14\"));\r\n    assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, \"15\"));\r\n    assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, \"16\"));\r\n    assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, \"17\"));\r\n    assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, \"18\"));\r\n    assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, \"19\"));\r\n    assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, \"20\"));\r\n    assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, \"21\"));\r\n    assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, \"22\"));\r\n    assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, \"23\"));\r\n    assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, \"24\"));\r\n    javaVersion = \"1.8.0\";\r\n    assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, \"1.0\"));\r\n    assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, \"1.1\"));\r\n    assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, \"1.2\"));\r\n    assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, \"1.3\"));\r\n    assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, \"1.4\"));\r\n    assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, \"1.5\"));\r\n    assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, \"1.6\"));\r\n    assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, \"1.7\"));\r\n    assertTrue(SystemUtils.isJavaVersionMatch(javaVersion, \"1.8\"));\r\n    assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, \"9\"));\r\n    assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, \"10\"));\r\n    assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, \"11\"));\r\n    assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, \"12\"));\r\n    assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, \"13\"));\r\n    assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, \"14\"));\r\n    assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, \"15\"));\r\n    assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, \"16\"));\r\n    assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, \"17\"));\r\n    assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, \"18\"));\r\n    assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, \"19\"));\r\n    assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, \"20\"));\r\n    assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, \"21\"));\r\n    assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, \"22\"));\r\n    assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, \"23\"));\r\n    assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, \"24\"));\r\n    javaVersion = \"9\";\r\n    assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, \"1.0\"));\r\n    assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, \"1.1\"));\r\n    assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, \"1.2\"));\r\n    assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, \"1.3\"));\r\n    assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, \"1.4\"));\r\n    assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, \"1.5\"));\r\n    assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, \"1.6\"));\r\n    assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, \"1.7\"));\r\n    assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, \"1.8\"));\r\n    assertTrue(SystemUtils.isJavaVersionMatch(javaVersion, \"9\"));\r\n    assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, \"10\"));\r\n    assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, \"11\"));\r\n    assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, \"12\"));\r\n    assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, \"13\"));\r\n    assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, \"14\"));\r\n    assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, \"15\"));\r\n    assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, \"16\"));\r\n    assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, \"17\"));\r\n    assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, \"18\"));\r\n    assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, \"19\"));\r\n    assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, \"20\"));\r\n    assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, \"21\"));\r\n    assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, \"22\"));\r\n    assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, \"23\"));\r\n    assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, \"24\"));\r\n    javaVersion = \"10\";\r\n    assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, \"1.0\"));\r\n    assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, \"1.1\"));\r\n    assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, \"1.2\"));\r\n    assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, \"1.3\"));\r\n    assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, \"1.4\"));\r\n    assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, \"1.5\"));\r\n    assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, \"1.6\"));\r\n    assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, \"1.7\"));\r\n    assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, \"1.8\"));\r\n    assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, \"9\"));\r\n    assertTrue(SystemUtils.isJavaVersionMatch(javaVersion, \"10\"));\r\n    assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, \"11\"));\r\n    assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, \"12\"));\r\n    assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, \"13\"));\r\n    assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, \"14\"));\r\n    assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, \"15\"));\r\n    assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, \"16\"));\r\n    assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, \"17\"));\r\n    assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, \"18\"));\r\n    assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, \"19\"));\r\n    assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, \"20\"));\r\n    assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, \"21\"));\r\n    assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, \"22\"));\r\n    assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, \"23\"));\r\n    assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, \"24\"));\r\n    // LTS\r\n    javaVersion = \"11\";\r\n    assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, \"1.0\"));\r\n    assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, \"1.1\"));\r\n    assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, \"1.2\"));\r\n    assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, \"1.3\"));\r\n    assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, \"1.4\"));\r\n    assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, \"1.5\"));\r\n    assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, \"1.6\"));\r\n    assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, \"1.7\"));\r\n    assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, \"1.8\"));\r\n    assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, \"9\"));\r\n    assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, \"10\"));\r\n    assertTrue(SystemUtils.isJavaVersionMatch(javaVersion, \"11\"));\r\n    assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, \"12\"));\r\n    assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, \"13\"));\r\n    assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, \"14\"));\r\n    assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, \"15\"));\r\n    assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, \"16\"));\r\n    assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, \"17\"));\r\n    assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, \"18\"));\r\n    assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, \"19\"));\r\n    assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, \"20\"));\r\n    assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, \"21\"));\r\n    assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, \"22\"));\r\n    assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, \"23\"));\r\n    assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, \"24\"));\r\n    // LTS\r\n    javaVersion = \"17\";\r\n    assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, \"1.0\"));\r\n    assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, \"1.1\"));\r\n    assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, \"1.2\"));\r\n    assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, \"1.3\"));\r\n    assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, \"1.4\"));\r\n    assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, \"1.5\"));\r\n    assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, \"1.6\"));\r\n    assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, \"1.7\"));\r\n    assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, \"1.8\"));\r\n    assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, \"9\"));\r\n    assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, \"10\"));\r\n    assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, \"11\"));\r\n    assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, \"12\"));\r\n    assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, \"13\"));\r\n    assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, \"14\"));\r\n    assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, \"15\"));\r\n    assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, \"16\"));\r\n    assertTrue(SystemUtils.isJavaVersionMatch(javaVersion, \"17\"));\r\n    assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, \"18\"));\r\n    assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, \"19\"));\r\n    assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, \"20\"));\r\n    assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, \"21\"));\r\n    assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, \"22\"));\r\n    assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, \"23\"));\r\n    assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, \"24\"));\r\n    // LTS\r\n    javaVersion = \"21\";\r\n    assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, \"1.0\"));\r\n    assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, \"1.1\"));\r\n    assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, \"1.2\"));\r\n    assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, \"1.3\"));\r\n    assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, \"1.4\"));\r\n    assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, \"1.5\"));\r\n    assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, \"1.6\"));\r\n    assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, \"1.7\"));\r\n    assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, \"1.8\"));\r\n    assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, \"9\"));\r\n    assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, \"10\"));\r\n    assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, \"11\"));\r\n    assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, \"12\"));\r\n    assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, \"13\"));\r\n    assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, \"14\"));\r\n    assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, \"15\"));\r\n    assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, \"16\"));\r\n    assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, \"17\"));\r\n    assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, \"18\"));\r\n    assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, \"19\"));\r\n    assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, \"20\"));\r\n    assertTrue(SystemUtils.isJavaVersionMatch(javaVersion, \"21\"));\r\n    assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, \"22\"));\r\n    assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, \"23\"));\r\n    assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, \"24\"));\r\n    javaVersion = \"22\";\r\n    assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, \"1.0\"));\r\n    assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, \"1.1\"));\r\n    assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, \"1.2\"));\r\n    assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, \"1.3\"));\r\n    assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, \"1.4\"));\r\n    assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, \"1.5\"));\r\n    assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, \"1.6\"));\r\n    assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, \"1.7\"));\r\n    assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, \"1.8\"));\r\n    assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, \"9\"));\r\n    assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, \"10\"));\r\n    assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, \"11\"));\r\n    assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, \"12\"));\r\n    assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, \"13\"));\r\n    assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, \"14\"));\r\n    assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, \"15\"));\r\n    assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, \"16\"));\r\n    assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, \"17\"));\r\n    assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, \"18\"));\r\n    assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, \"19\"));\r\n    assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, \"20\"));\r\n    assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, \"21\"));\r\n    assertTrue(SystemUtils.isJavaVersionMatch(javaVersion, \"22\"));\r\n    assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, \"23\"));\r\n    assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, \"24\"));\r\n    javaVersion = \"23\";\r\n    assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, \"1.0\"));\r\n    assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, \"1.1\"));\r\n    assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, \"1.2\"));\r\n    assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, \"1.3\"));\r\n    assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, \"1.4\"));\r\n    assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, \"1.5\"));\r\n    assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, \"1.6\"));\r\n    assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, \"1.7\"));\r\n    assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, \"1.8\"));\r\n    assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, \"9\"));\r\n    assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, \"10\"));\r\n    assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, \"11\"));\r\n    assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, \"12\"));\r\n    assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, \"13\"));\r\n    assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, \"14\"));\r\n    assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, \"15\"));\r\n    assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, \"16\"));\r\n    assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, \"17\"));\r\n    assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, \"18\"));\r\n    assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, \"19\"));\r\n    assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, \"20\"));\r\n    assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, \"21\"));\r\n    assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, \"22\"));\r\n    assertTrue(SystemUtils.isJavaVersionMatch(javaVersion, \"23\"));\r\n    assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, \"24\"));\r\n    javaVersion = \"24\";\r\n    assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, \"1.0\"));\r\n    assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, \"1.1\"));\r\n    assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, \"1.2\"));\r\n    assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, \"1.3\"));\r\n    assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, \"1.4\"));\r\n    assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, \"1.5\"));\r\n    assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, \"1.6\"));\r\n    assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, \"1.7\"));\r\n    assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, \"1.8\"));\r\n    assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, \"9\"));\r\n    assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, \"10\"));\r\n    assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, \"11\"));\r\n    assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, \"12\"));\r\n    assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, \"13\"));\r\n    assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, \"14\"));\r\n    assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, \"15\"));\r\n    assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, \"16\"));\r\n    assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, \"17\"));\r\n    assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, \"18\"));\r\n    assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, \"19\"));\r\n    assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, \"20\"));\r\n    assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, \"21\"));\r\n    assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, \"22\"));\r\n    assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, \"23\"));\r\n    assertTrue(SystemUtils.isJavaVersionMatch(javaVersion, \"24\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\SystemUtilsTest.java",
  "methodName" : "testOSMatchesName",
  "sourceCode" : "@Test\r\nvoid testOSMatchesName() {\r\n    String osName = null;\r\n    assertFalse(SystemUtils.isOsNameMatch(osName, \"Windows\"));\r\n    osName = \"\";\r\n    assertFalse(SystemUtils.isOsNameMatch(osName, \"Windows\"));\r\n    osName = \"Windows 95\";\r\n    assertTrue(SystemUtils.isOsNameMatch(osName, \"Windows\"));\r\n    osName = \"Windows NT\";\r\n    assertTrue(SystemUtils.isOsNameMatch(osName, \"Windows\"));\r\n    osName = \"OS/2\";\r\n    assertFalse(SystemUtils.isOsNameMatch(osName, \"Windows\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\SystemUtilsTest.java",
  "methodName" : "testOSMatchesNameAndVersion",
  "sourceCode" : "@Test\r\nvoid testOSMatchesNameAndVersion() {\r\n    String osName = null;\r\n    String osVersion = null;\r\n    assertFalse(SystemUtils.isOsMatch(osName, osVersion, \"Windows 9\", \"4.1\"));\r\n    osName = \"\";\r\n    osVersion = \"\";\r\n    assertFalse(SystemUtils.isOsMatch(osName, osVersion, \"Windows 9\", \"4.1\"));\r\n    osName = \"Windows 95\";\r\n    osVersion = \"4.0\";\r\n    assertFalse(SystemUtils.isOsMatch(osName, osVersion, \"Windows 9\", \"4.1\"));\r\n    osName = \"Windows 95\";\r\n    osVersion = \"4.1\";\r\n    assertTrue(SystemUtils.isOsMatch(osName, osVersion, \"Windows 9\", \"4.1\"));\r\n    osName = \"Windows 98\";\r\n    osVersion = \"4.1\";\r\n    assertTrue(SystemUtils.isOsMatch(osName, osVersion, \"Windows 9\", \"4.1\"));\r\n    osName = \"Windows NT\";\r\n    osVersion = \"4.0\";\r\n    assertFalse(SystemUtils.isOsMatch(osName, osVersion, \"Windows 9\", \"4.1\"));\r\n    osName = \"OS/2\";\r\n    osVersion = \"4.0\";\r\n    assertFalse(SystemUtils.isOsMatch(osName, osVersion, \"Windows 9\", \"4.1\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\SystemUtilsTest.java",
  "methodName" : "testOsVersionMatches",
  "sourceCode" : "@Test\r\nvoid testOsVersionMatches() {\r\n    String osVersion = null;\r\n    assertFalse(SystemUtils.isOsVersionMatch(osVersion, \"10.1\"));\r\n    osVersion = \"\";\r\n    assertFalse(SystemUtils.isOsVersionMatch(osVersion, \"10.1\"));\r\n    osVersion = \"10\";\r\n    assertTrue(SystemUtils.isOsVersionMatch(osVersion, \"10.1\"));\r\n    assertTrue(SystemUtils.isOsVersionMatch(osVersion, \"10.1.1\"));\r\n    assertTrue(SystemUtils.isOsVersionMatch(osVersion, \"10.10\"));\r\n    assertTrue(SystemUtils.isOsVersionMatch(osVersion, \"10.10.1\"));\r\n    osVersion = \"10.1\";\r\n    assertTrue(SystemUtils.isOsVersionMatch(osVersion, \"10.1\"));\r\n    assertTrue(SystemUtils.isOsVersionMatch(osVersion, \"10.1.1\"));\r\n    assertFalse(SystemUtils.isOsVersionMatch(osVersion, \"10.10\"));\r\n    assertFalse(SystemUtils.isOsVersionMatch(osVersion, \"10.10.1\"));\r\n    osVersion = \"10.1.1\";\r\n    assertTrue(SystemUtils.isOsVersionMatch(osVersion, \"10.1\"));\r\n    assertTrue(SystemUtils.isOsVersionMatch(osVersion, \"10.1.1\"));\r\n    assertFalse(SystemUtils.isOsVersionMatch(osVersion, \"10.10\"));\r\n    assertFalse(SystemUtils.isOsVersionMatch(osVersion, \"10.10.1\"));\r\n    osVersion = \"10.10\";\r\n    assertFalse(SystemUtils.isOsVersionMatch(osVersion, \"10.1\"));\r\n    assertFalse(SystemUtils.isOsVersionMatch(osVersion, \"10.1.1\"));\r\n    assertTrue(SystemUtils.isOsVersionMatch(osVersion, \"10.10\"));\r\n    assertTrue(SystemUtils.isOsVersionMatch(osVersion, \"10.10.1\"));\r\n    osVersion = \"10.10.1\";\r\n    assertFalse(SystemUtils.isOsVersionMatch(osVersion, \"10.1\"));\r\n    assertFalse(SystemUtils.isOsVersionMatch(osVersion, \"10.1.1\"));\r\n    assertTrue(SystemUtils.isOsVersionMatch(osVersion, \"10.10\"));\r\n    assertTrue(SystemUtils.isOsVersionMatch(osVersion, \"10.10.1\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\text\\CompositeFormatTest.java",
  "methodName" : "testCompositeFormat",
  "sourceCode" : "/**\r\n * Ensures that the parse/format separation is correctly maintained.\r\n */\r\n@Test\r\nvoid testCompositeFormat() {\r\n    final Format parser = new Format() {\r\n\r\n        private static final long serialVersionUID = 1L;\r\n\r\n        @Override\r\n        public StringBuffer format(final Object obj, final StringBuffer toAppendTo, final FieldPosition pos) {\r\n            throw new UnsupportedOperationException(\"Not implemented\");\r\n        }\r\n\r\n        @Override\r\n        public Object parseObject(final String source, final ParsePosition pos) {\r\n            // do nothing\r\n            return null;\r\n        }\r\n    };\r\n    final Format formatter = new Format() {\r\n\r\n        private static final long serialVersionUID = 1L;\r\n\r\n        @Override\r\n        public StringBuffer format(final Object obj, final StringBuffer toAppendTo, final FieldPosition pos) {\r\n            // do nothing\r\n            return null;\r\n        }\r\n\r\n        @Override\r\n        public Object parseObject(final String source, final ParsePosition pos) {\r\n            throw new UnsupportedOperationException(\"Not implemented\");\r\n        }\r\n    };\r\n    final CompositeFormat composite = new CompositeFormat(parser, formatter);\r\n    composite.parseObject(\"\", null);\r\n    composite.format(new Object(), new StringBuffer(), null);\r\n    assertEquals(parser, composite.getParser(), \"Parser get method incorrectly implemented\");\r\n    assertEquals(formatter, composite.getFormatter(), \"Formatter get method incorrectly implemented\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\text\\CompositeFormatTest.java",
  "methodName" : "testUsage",
  "sourceCode" : "@Test\r\nvoid testUsage() throws Exception {\r\n    final Format f1 = new SimpleDateFormat(\"MMddyyyy\", Locale.ENGLISH);\r\n    final Format f2 = new SimpleDateFormat(\"MMMM d, yyyy\", Locale.ENGLISH);\r\n    final CompositeFormat c = new CompositeFormat(f1, f2);\r\n    final String testString = \"January 3, 2005\";\r\n    assertEquals(testString, c.format(c.parseObject(\"01032005\")));\r\n    assertEquals(testString, c.reformat(\"01032005\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\text\\ExtendedMessageFormatTest.java",
  "methodName" : "testBuiltInChoiceFormat",
  "sourceCode" : "/**\r\n * Test the built-in choice format.\r\n */\r\n@Test\r\nvoid testBuiltInChoiceFormat() {\r\n    final Object[] values = new Number[] { Integer.valueOf(1), Double.valueOf(\"2.2\"), Double.valueOf(\"1234.5\") };\r\n    String choicePattern;\r\n    final Locale[] availableLocales = NumberFormat.getAvailableLocales();\r\n    choicePattern = \"{0,choice,1#One|2#Two|3#Many {0,number}}\";\r\n    for (final Object value : values) {\r\n        checkBuiltInFormat(value + \": \" + choicePattern, new Object[] { value }, availableLocales);\r\n    }\r\n    choicePattern = \"{0,choice,1#''One''|2#\\\"Two\\\"|3#''{Many}'' {0,number}}\";\r\n    for (final Object value : values) {\r\n        checkBuiltInFormat(value + \": \" + choicePattern, new Object[] { value }, availableLocales);\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\text\\ExtendedMessageFormatTest.java",
  "methodName" : "testBuiltInDateTimeFormat",
  "sourceCode" : "/**\r\n * Test the built-in date/time formats\r\n */\r\n@Test\r\nvoid testBuiltInDateTimeFormat() {\r\n    final Calendar cal = Calendar.getInstance();\r\n    cal.set(2007, Calendar.JANUARY, 23, 18, 33, 5);\r\n    final Object[] args = { cal.getTime() };\r\n    final Locale[] availableLocales = DateFormat.getAvailableLocales();\r\n    checkBuiltInFormat(\"1: {0,date,short}\", args, availableLocales);\r\n    checkBuiltInFormat(\"2: {0,date,medium}\", args, availableLocales);\r\n    checkBuiltInFormat(\"3: {0,date,long}\", args, availableLocales);\r\n    checkBuiltInFormat(\"4: {0,date,full}\", args, availableLocales);\r\n    checkBuiltInFormat(\"5: {0,date,d MMM yy}\", args, availableLocales);\r\n    checkBuiltInFormat(\"6: {0,time,short}\", args, availableLocales);\r\n    checkBuiltInFormat(\"7: {0,time,medium}\", args, availableLocales);\r\n    checkBuiltInFormat(\"8: {0,time,long}\", args, availableLocales);\r\n    checkBuiltInFormat(\"9: {0,time,full}\", args, availableLocales);\r\n    checkBuiltInFormat(\"10: {0,time,HH:mm}\", args, availableLocales);\r\n    checkBuiltInFormat(\"11: {0,date}\", args, availableLocales);\r\n    checkBuiltInFormat(\"12: {0,time}\", args, availableLocales);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\text\\ExtendedMessageFormatTest.java",
  "methodName" : "testBuiltInNumberFormat",
  "sourceCode" : "/**\r\n * Test the built-in number formats.\r\n */\r\n@Test\r\nvoid testBuiltInNumberFormat() {\r\n    final Object[] args = { Double.valueOf(\"6543.21\") };\r\n    final Locale[] availableLocales = NumberFormat.getAvailableLocales();\r\n    checkBuiltInFormat(\"1: {0,number}\", args, availableLocales);\r\n    checkBuiltInFormat(\"2: {0,number,integer}\", args, availableLocales);\r\n    checkBuiltInFormat(\"3: {0,number,currency}\", args, availableLocales);\r\n    checkBuiltInFormat(\"4: {0,number,percent}\", args, availableLocales);\r\n    checkBuiltInFormat(\"5: {0,number,00000.000}\", args, availableLocales);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\text\\ExtendedMessageFormatTest.java",
  "methodName" : "testEmbeddedPatternInChoice",
  "sourceCode" : "/**\r\n * Test Bug LANG-917 - IndexOutOfBoundsException and/or infinite loop when using a choice pattern\r\n */\r\n@Test\r\nvoid testEmbeddedPatternInChoice() {\r\n    final String pattern = \"Hi {0,lower}, got {1,choice,0#none|1#one|1<{1,number}}, {2,upper}!\";\r\n    final ExtendedMessageFormat emf = new ExtendedMessageFormat(pattern, registry);\r\n    assertEquals(emf.format(new Object[] { \"there\", 3, \"great\" }), \"Hi there, got 3, GREAT!\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\text\\ExtendedMessageFormatTest.java",
  "methodName" : "testEqualsHashcode",
  "sourceCode" : "/**\r\n * Test equals() and hashCode().\r\n */\r\n@Test\r\nvoid testEqualsHashcode() {\r\n    final Map<String, ? extends FormatFactory> fmtRegistry = Collections.singletonMap(\"testfmt\", new LowerCaseFormatFactory());\r\n    final Map<String, ? extends FormatFactory> otherRegistry = Collections.singletonMap(\"testfmt\", new UpperCaseFormatFactory());\r\n    final String pattern = \"Pattern: {0,testfmt}\";\r\n    final ExtendedMessageFormat emf = new ExtendedMessageFormat(pattern, Locale.US, fmtRegistry);\r\n    ExtendedMessageFormat other;\r\n    // Same object\r\n    assertEquals(emf, emf, \"same, equals()\");\r\n    assertEquals(emf.hashCode(), emf.hashCode(), \"same, hashCode()\");\r\n    // Equal Object\r\n    other = new ExtendedMessageFormat(pattern, Locale.US, fmtRegistry);\r\n    assertEquals(emf, other, \"equal, equals()\");\r\n    assertEquals(emf.hashCode(), other.hashCode(), \"equal, hashCode()\");\r\n    // Different Class\r\n    other = new OtherExtendedMessageFormat(pattern, Locale.US, fmtRegistry);\r\n    assertNotEquals(emf, other, \"class, equals()\");\r\n    // same hash code\r\n    assertEquals(emf.hashCode(), other.hashCode(), \"class, hashCode()\");\r\n    // Different pattern\r\n    other = new ExtendedMessageFormat(\"X\" + pattern, Locale.US, fmtRegistry);\r\n    assertNotEquals(emf, other, \"pattern, equals()\");\r\n    assertNotEquals(emf.hashCode(), other.hashCode(), \"pattern, hashCode()\");\r\n    // Different registry\r\n    other = new ExtendedMessageFormat(pattern, Locale.US, otherRegistry);\r\n    assertNotEquals(emf, other, \"registry, equals()\");\r\n    assertNotEquals(emf.hashCode(), other.hashCode(), \"registry, hashCode()\");\r\n    // Different Locale\r\n    other = new ExtendedMessageFormat(pattern, Locale.FRANCE, fmtRegistry);\r\n    assertNotEquals(emf, other, \"locale, equals()\");\r\n    // same hash code\r\n    assertEquals(emf.hashCode(), other.hashCode(), \"locale, hashCode()\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\text\\ExtendedMessageFormatTest.java",
  "methodName" : "testEscapedBraces_LANG_948",
  "sourceCode" : "/**\r\n * Test Bug LANG-948 - Exception while using ExtendedMessageFormat and escaping braces\r\n */\r\n@Test\r\nvoid testEscapedBraces_LANG_948() {\r\n    // message without placeholder because braces are escaped by quotes\r\n    final String pattern = \"Message without placeholders '{}'\";\r\n    final ExtendedMessageFormat emf = new ExtendedMessageFormat(pattern, registry);\r\n    assertEquals(\"Message without placeholders {}\", emf.format(new Object[] { \"DUMMY\" }));\r\n    // message with placeholder because quotes are escaped by quotes\r\n    final String pattern2 = \"Message with placeholder ''{0}''\";\r\n    final ExtendedMessageFormat emf2 = new ExtendedMessageFormat(pattern2, registry);\r\n    assertEquals(\"Message with placeholder 'DUMMY'\", emf2.format(new Object[] { \"DUMMY\" }));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\text\\ExtendedMessageFormatTest.java",
  "methodName" : "testEscapedQuote_LANG_477",
  "sourceCode" : "/**\r\n * Test Bug LANG-477 - out of memory error with escaped quote\r\n */\r\n@Test\r\nvoid testEscapedQuote_LANG_477() {\r\n    final String pattern = \"it''s a {0,lower} 'test'!\";\r\n    final ExtendedMessageFormat emf = new ExtendedMessageFormat(pattern, registry);\r\n    assertEquals(\"it's a dummy test!\", emf.format(new Object[] { \"DUMMY\" }));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\text\\ExtendedMessageFormatTest.java",
  "methodName" : "testExtendedAndBuiltInFormatsWithAvailableLocales",
  "sourceCode" : "/**\r\n * Test extended and built-in formats with available locales.\r\n */\r\n@Test\r\nvoid testExtendedAndBuiltInFormatsWithAvailableLocales() {\r\n    final String extendedPattern = \"Name: {0,upper} \";\r\n    final String builtinsPattern = \"DOB: {1,date,short} Salary: {2,number,currency}\";\r\n    final String pattern = extendedPattern + builtinsPattern;\r\n    final Calendar cal = Calendar.getInstance();\r\n    cal.set(2007, Calendar.JANUARY, 23, 18, 33, 5);\r\n    final Object[] args = { \"John Doe\", cal.getTime(), Double.valueOf(\"12345.67\") };\r\n    final HashSet<Locale> testLocales = new HashSet<>(Arrays.asList(DateFormat.getAvailableLocales()));\r\n    testLocales.retainAll(Arrays.asList(NumberFormat.getAvailableLocales()));\r\n    for (final Locale locale : testLocales) {\r\n        final MessageFormat builtins = createMessageFormat(builtinsPattern, locale);\r\n        final String expectedPattern = extendedPattern + builtins.toPattern();\r\n        final ExtendedMessageFormat emf = new ExtendedMessageFormat(pattern, locale, registry);\r\n        assertEquals(expectedPattern, emf.toPattern(), \"pattern comparison for locale \" + locale);\r\n        final DateFormat df = DateFormat.getDateInstance(DateFormat.SHORT, locale);\r\n        final NumberFormat nf = NumberFormat.getCurrencyInstance(locale);\r\n        final StringBuilder expected = new StringBuilder();\r\n        expected.append(\"Name: \");\r\n        expected.append(args[0].toString().toUpperCase(locale));\r\n        expected.append(\" DOB: \");\r\n        expected.append(df.format(args[1]));\r\n        expected.append(\" Salary: \");\r\n        expected.append(nf.format(args[2]));\r\n        assertEquals(expected.toString(), emf.format(args), String.valueOf(locale));\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\text\\ExtendedMessageFormatTest.java",
  "methodName" : "testExtendedAndBuiltInFormatsWithDefaultLocale",
  "sourceCode" : "/**\r\n * Test extended and built-in formats with the default locale.\r\n */\r\n@Test\r\nvoid testExtendedAndBuiltInFormatsWithDefaultLocale() {\r\n    final String extendedPattern = \"Name: {0,upper} \";\r\n    final String builtinsPattern = \"DOB: {1,date,short} Salary: {2,number,currency}\";\r\n    final String pattern = extendedPattern + builtinsPattern;\r\n    final ExtendedMessageFormat emf = new ExtendedMessageFormat(pattern, registry);\r\n    final MessageFormat builtins = createMessageFormat(builtinsPattern, null);\r\n    final String expectedPattern = extendedPattern + builtins.toPattern();\r\n    assertEquals(expectedPattern, emf.toPattern(), \"pattern comparison for default locale\");\r\n    final Calendar cal = Calendar.getInstance();\r\n    cal.set(2007, Calendar.JANUARY, 23, 18, 33, 5);\r\n    final Object[] args = { \"John Doe\", cal.getTime(), Double.valueOf(\"12345.67\") };\r\n    final DateFormat df = DateFormat.getDateInstance(DateFormat.SHORT);\r\n    final NumberFormat nf = NumberFormat.getCurrencyInstance();\r\n    final StringBuilder expected = new StringBuilder();\r\n    expected.append(\"Name: \");\r\n    expected.append(args[0].toString().toUpperCase());\r\n    expected.append(\" DOB: \");\r\n    expected.append(df.format(args[1]));\r\n    expected.append(\" Salary: \");\r\n    expected.append(nf.format(args[2]));\r\n    assertEquals(expected.toString(), emf.format(args));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\text\\ExtendedMessageFormatTest.java",
  "methodName" : "testExtendedFormats",
  "sourceCode" : "/**\r\n * Test extended formats.\r\n */\r\n@Test\r\nvoid testExtendedFormats() {\r\n    final String pattern = \"Lower: {0,lower} Upper: {1,upper}\";\r\n    final ExtendedMessageFormat emf = new ExtendedMessageFormat(pattern, registry);\r\n    assertEquals(pattern, emf.toPattern(), \"TOPATTERN\");\r\n    assertEquals(emf.format(new Object[] { \"foo\", \"bar\" }), \"Lower: foo Upper: BAR\");\r\n    assertEquals(emf.format(new Object[] { \"Foo\", \"Bar\" }), \"Lower: foo Upper: BAR\");\r\n    assertEquals(emf.format(new Object[] { \"FOO\", \"BAR\" }), \"Lower: foo Upper: BAR\");\r\n    assertEquals(emf.format(new Object[] { \"FOO\", \"bar\" }), \"Lower: foo Upper: BAR\");\r\n    assertEquals(emf.format(new Object[] { \"foo\", \"BAR\" }), \"Lower: foo Upper: BAR\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\text\\ExtendedMessageFormatTest.java",
  "methodName" : "testOverriddenBuiltinFormat",
  "sourceCode" : "@Test\r\nvoid testOverriddenBuiltinFormat() {\r\n    final Calendar cal = Calendar.getInstance();\r\n    cal.set(2007, Calendar.JANUARY, 23);\r\n    final Object[] args = { cal.getTime() };\r\n    final Locale[] availableLocales = DateFormat.getAvailableLocales();\r\n    final Map<String, ? extends FormatFactory> dateRegistry = Collections.singletonMap(\"date\", new OverrideShortDateFormatFactory());\r\n    //check the non-overridden builtins:\r\n    checkBuiltInFormat(\"1: {0,date}\", dateRegistry, args, availableLocales);\r\n    checkBuiltInFormat(\"2: {0,date,medium}\", dateRegistry, args, availableLocales);\r\n    checkBuiltInFormat(\"3: {0,date,long}\", dateRegistry, args, availableLocales);\r\n    checkBuiltInFormat(\"4: {0,date,full}\", dateRegistry, args, availableLocales);\r\n    checkBuiltInFormat(\"5: {0,date,d MMM yy}\", dateRegistry, args, availableLocales);\r\n    //check the overridden format:\r\n    for (int i = -1; i < availableLocales.length; i++) {\r\n        final Locale locale = i < 0 ? null : availableLocales[i];\r\n        final MessageFormat dateDefault = createMessageFormat(\"{0,date}\", locale);\r\n        final String pattern = \"{0,date,short}\";\r\n        final ExtendedMessageFormat dateShort = new ExtendedMessageFormat(pattern, locale, dateRegistry);\r\n        assertEquals(dateDefault.format(args), dateShort.format(args), \"overridden date,short format\");\r\n        assertEquals(pattern, dateShort.toPattern(), \"overridden date,short pattern\");\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\text\\FormattableUtilsTest.java",
  "methodName" : "testAlternatePadCharacter",
  "sourceCode" : "@Test\r\nvoid testAlternatePadCharacter() {\r\n    final char pad = '_';\r\n    assertEquals(\"foo\", FormattableUtils.append(\"foo\", new Formatter(), 0, -1, -1, pad).toString());\r\n    assertEquals(\"fo\", FormattableUtils.append(\"foo\", new Formatter(), 0, -1, 2, pad).toString());\r\n    assertEquals(\"_foo\", FormattableUtils.append(\"foo\", new Formatter(), 0, 4, -1, pad).toString());\r\n    assertEquals(\"___foo\", FormattableUtils.append(\"foo\", new Formatter(), 0, 6, -1, pad).toString());\r\n    assertEquals(\"_fo\", FormattableUtils.append(\"foo\", new Formatter(), 0, 3, 2, pad).toString());\r\n    assertEquals(\"___fo\", FormattableUtils.append(\"foo\", new Formatter(), 0, 5, 2, pad).toString());\r\n    assertEquals(\"foo_\", FormattableUtils.append(\"foo\", new Formatter(), FormattableFlags.LEFT_JUSTIFY, 4, -1, pad).toString());\r\n    assertEquals(\"foo___\", FormattableUtils.append(\"foo\", new Formatter(), FormattableFlags.LEFT_JUSTIFY, 6, -1, pad).toString());\r\n    assertEquals(\"fo_\", FormattableUtils.append(\"foo\", new Formatter(), FormattableFlags.LEFT_JUSTIFY, 3, 2, pad).toString());\r\n    assertEquals(\"fo___\", FormattableUtils.append(\"foo\", new Formatter(), FormattableFlags.LEFT_JUSTIFY, 5, 2, pad).toString());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\text\\FormattableUtilsTest.java",
  "methodName" : "testAlternatePadCharAndEllipsis",
  "sourceCode" : "@Test\r\nvoid testAlternatePadCharAndEllipsis() {\r\n    assertEquals(\"foo\", FormattableUtils.append(\"foo\", new Formatter(), 0, -1, -1, '_', \"*\").toString());\r\n    assertEquals(\"f*\", FormattableUtils.append(\"foo\", new Formatter(), 0, -1, 2, '_', \"*\").toString());\r\n    assertEquals(\"_foo\", FormattableUtils.append(\"foo\", new Formatter(), 0, 4, -1, '_', \"*\").toString());\r\n    assertEquals(\"___foo\", FormattableUtils.append(\"foo\", new Formatter(), 0, 6, -1, '_', \"*\").toString());\r\n    assertEquals(\"_f*\", FormattableUtils.append(\"foo\", new Formatter(), 0, 3, 2, '_', \"*\").toString());\r\n    assertEquals(\"___f*\", FormattableUtils.append(\"foo\", new Formatter(), 0, 5, 2, '_', \"*\").toString());\r\n    assertEquals(\"foo_\", FormattableUtils.append(\"foo\", new Formatter(), FormattableFlags.LEFT_JUSTIFY, 4, -1, '_', \"*\").toString());\r\n    assertEquals(\"foo___\", FormattableUtils.append(\"foo\", new Formatter(), FormattableFlags.LEFT_JUSTIFY, 6, -1, '_', \"*\").toString());\r\n    assertEquals(\"f*_\", FormattableUtils.append(\"foo\", new Formatter(), FormattableFlags.LEFT_JUSTIFY, 3, 2, '_', \"*\").toString());\r\n    assertEquals(\"f*___\", FormattableUtils.append(\"foo\", new Formatter(), FormattableFlags.LEFT_JUSTIFY, 5, 2, '_', \"*\").toString());\r\n    assertEquals(\"foo\", FormattableUtils.append(\"foo\", new Formatter(), 0, -1, -1, '_', \"+*\").toString());\r\n    assertEquals(\"+*\", FormattableUtils.append(\"foo\", new Formatter(), 0, -1, 2, '_', \"+*\").toString());\r\n    assertEquals(\"_foo\", FormattableUtils.append(\"foo\", new Formatter(), 0, 4, -1, '_', \"+*\").toString());\r\n    assertEquals(\"___foo\", FormattableUtils.append(\"foo\", new Formatter(), 0, 6, -1, '_', \"+*\").toString());\r\n    assertEquals(\"_+*\", FormattableUtils.append(\"foo\", new Formatter(), 0, 3, 2, '_', \"+*\").toString());\r\n    assertEquals(\"___+*\", FormattableUtils.append(\"foo\", new Formatter(), 0, 5, 2, '_', \"+*\").toString());\r\n    assertEquals(\"foo_\", FormattableUtils.append(\"foo\", new Formatter(), FormattableFlags.LEFT_JUSTIFY, 4, -1, '_', \"+*\").toString());\r\n    assertEquals(\"foo___\", FormattableUtils.append(\"foo\", new Formatter(), FormattableFlags.LEFT_JUSTIFY, 6, -1, '_', \"+*\").toString());\r\n    assertEquals(\"+*_\", FormattableUtils.append(\"foo\", new Formatter(), FormattableFlags.LEFT_JUSTIFY, 3, 2, '_', \"+*\").toString());\r\n    assertEquals(\"+*___\", FormattableUtils.append(\"foo\", new Formatter(), FormattableFlags.LEFT_JUSTIFY, 5, 2, '_', \"+*\").toString());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\text\\FormattableUtilsTest.java",
  "methodName" : "testDefaultAppend",
  "sourceCode" : "@Test\r\nvoid testDefaultAppend() {\r\n    assertEquals(\"foo\", FormattableUtils.append(\"foo\", new Formatter(), 0, -1, -1).toString());\r\n    assertEquals(\"fo\", FormattableUtils.append(\"foo\", new Formatter(), 0, -1, 2).toString());\r\n    assertEquals(\" foo\", FormattableUtils.append(\"foo\", new Formatter(), 0, 4, -1).toString());\r\n    assertEquals(\"   foo\", FormattableUtils.append(\"foo\", new Formatter(), 0, 6, -1).toString());\r\n    assertEquals(\" fo\", FormattableUtils.append(\"foo\", new Formatter(), 0, 3, 2).toString());\r\n    assertEquals(\"   fo\", FormattableUtils.append(\"foo\", new Formatter(), 0, 5, 2).toString());\r\n    assertEquals(\"foo \", FormattableUtils.append(\"foo\", new Formatter(), FormattableFlags.LEFT_JUSTIFY, 4, -1).toString());\r\n    assertEquals(\"foo   \", FormattableUtils.append(\"foo\", new Formatter(), FormattableFlags.LEFT_JUSTIFY, 6, -1).toString());\r\n    assertEquals(\"fo \", FormattableUtils.append(\"foo\", new Formatter(), FormattableFlags.LEFT_JUSTIFY, 3, 2).toString());\r\n    assertEquals(\"fo   \", FormattableUtils.append(\"foo\", new Formatter(), FormattableFlags.LEFT_JUSTIFY, 5, 2).toString());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\text\\FormattableUtilsTest.java",
  "methodName" : "testEllipsis",
  "sourceCode" : "@Test\r\nvoid testEllipsis() {\r\n    assertEquals(\"foo\", FormattableUtils.append(\"foo\", new Formatter(), 0, -1, -1, \"*\").toString());\r\n    assertEquals(\"f*\", FormattableUtils.append(\"foo\", new Formatter(), 0, -1, 2, \"*\").toString());\r\n    assertEquals(\" foo\", FormattableUtils.append(\"foo\", new Formatter(), 0, 4, -1, \"*\").toString());\r\n    assertEquals(\"   foo\", FormattableUtils.append(\"foo\", new Formatter(), 0, 6, -1, \"*\").toString());\r\n    assertEquals(\" f*\", FormattableUtils.append(\"foo\", new Formatter(), 0, 3, 2, \"*\").toString());\r\n    assertEquals(\"   f*\", FormattableUtils.append(\"foo\", new Formatter(), 0, 5, 2, \"*\").toString());\r\n    assertEquals(\"foo \", FormattableUtils.append(\"foo\", new Formatter(), FormattableFlags.LEFT_JUSTIFY, 4, -1, \"*\").toString());\r\n    assertEquals(\"foo   \", FormattableUtils.append(\"foo\", new Formatter(), FormattableFlags.LEFT_JUSTIFY, 6, -1, \"*\").toString());\r\n    assertEquals(\"f* \", FormattableUtils.append(\"foo\", new Formatter(), FormattableFlags.LEFT_JUSTIFY, 3, 2, \"*\").toString());\r\n    assertEquals(\"f*   \", FormattableUtils.append(\"foo\", new Formatter(), FormattableFlags.LEFT_JUSTIFY, 5, 2, \"*\").toString());\r\n    assertEquals(\"foo\", FormattableUtils.append(\"foo\", new Formatter(), 0, -1, -1, \"+*\").toString());\r\n    assertEquals(\"+*\", FormattableUtils.append(\"foo\", new Formatter(), 0, -1, 2, \"+*\").toString());\r\n    assertEquals(\" foo\", FormattableUtils.append(\"foo\", new Formatter(), 0, 4, -1, \"+*\").toString());\r\n    assertEquals(\"   foo\", FormattableUtils.append(\"foo\", new Formatter(), 0, 6, -1, \"+*\").toString());\r\n    assertEquals(\" +*\", FormattableUtils.append(\"foo\", new Formatter(), 0, 3, 2, \"+*\").toString());\r\n    assertEquals(\"   +*\", FormattableUtils.append(\"foo\", new Formatter(), 0, 5, 2, \"+*\").toString());\r\n    assertEquals(\"foo \", FormattableUtils.append(\"foo\", new Formatter(), FormattableFlags.LEFT_JUSTIFY, 4, -1, \"+*\").toString());\r\n    assertEquals(\"foo   \", FormattableUtils.append(\"foo\", new Formatter(), FormattableFlags.LEFT_JUSTIFY, 6, -1, \"+*\").toString());\r\n    assertEquals(\"+* \", FormattableUtils.append(\"foo\", new Formatter(), FormattableFlags.LEFT_JUSTIFY, 3, 2, \"+*\").toString());\r\n    assertEquals(\"+*   \", FormattableUtils.append(\"foo\", new Formatter(), FormattableFlags.LEFT_JUSTIFY, 5, 2, \"+*\").toString());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\text\\FormattableUtilsTest.java",
  "methodName" : "testIllegalEllipsis",
  "sourceCode" : "@Test\r\nvoid testIllegalEllipsis() {\r\n    assertIllegalArgumentException(() -> FormattableUtils.append(\"foo\", new Formatter(), 0, -1, 1, \"xx\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\text\\StrBuilderAppendInsertTest.java",
  "methodName" : "testAppend_Boolean",
  "sourceCode" : "@Test\r\nvoid testAppend_Boolean() {\r\n    final StrBuilder sb = new StrBuilder();\r\n    sb.append(true);\r\n    assertEquals(\"true\", sb.toString());\r\n    sb.append(false);\r\n    assertEquals(\"truefalse\", sb.toString());\r\n    sb.append('!');\r\n    assertEquals(\"truefalse!\", sb.toString());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\text\\StrBuilderAppendInsertTest.java",
  "methodName" : "testAppend_CharArray",
  "sourceCode" : "@Test\r\nvoid testAppend_CharArray() {\r\n    StrBuilder sb = new StrBuilder();\r\n    sb.setNullText(\"NULL\").append((char[]) null);\r\n    assertEquals(\"NULL\", sb.toString());\r\n    sb = new StrBuilder();\r\n    sb.append(new char[0]);\r\n    assertEquals(\"\", sb.toString());\r\n    sb.append(new char[] { 'f', 'o', 'o' });\r\n    assertEquals(\"foo\", sb.toString());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\text\\StrBuilderAppendInsertTest.java",
  "methodName" : "testAppend_CharArray_int_int",
  "sourceCode" : "@Test\r\nvoid testAppend_CharArray_int_int() {\r\n    StrBuilder sb = new StrBuilder();\r\n    sb.setNullText(\"NULL\").append((char[]) null, 0, 1);\r\n    assertEquals(\"NULL\", sb.toString());\r\n    sb = new StrBuilder();\r\n    sb.append(new char[] { 'f', 'o', 'o' }, 0, 3);\r\n    assertEquals(\"foo\", sb.toString());\r\n    final StrBuilder sb1 = sb;\r\n    assertIndexOutOfBoundsException(() -> sb1.append(new char[] { 'b', 'a', 'r' }, -1, 1), \"append(char[], -1,) expected IndexOutOfBoundsException\");\r\n    assertIndexOutOfBoundsException(() -> sb1.append(new char[] { 'b', 'a', 'r' }, 3, 1), \"append(char[], 3,) expected IndexOutOfBoundsException\");\r\n    assertIndexOutOfBoundsException(() -> sb1.append(new char[] { 'b', 'a', 'r' }, 1, -1), \"append(char[],, -1) expected IndexOutOfBoundsException\");\r\n    assertIndexOutOfBoundsException(() -> sb1.append(new char[] { 'b', 'a', 'r' }, 1, 3), \"append(char[], 1, 3) expected IndexOutOfBoundsException\");\r\n    assertIndexOutOfBoundsException(() -> sb1.append(new char[] { 'b', 'a', 'r' }, -1, 3), \"append(char[], -1, 3) expected IndexOutOfBoundsException\");\r\n    assertIndexOutOfBoundsException(() -> sb1.append(new char[] { 'b', 'a', 'r' }, 4, 0), \"append(char[], 4, 0) expected IndexOutOfBoundsException\");\r\n    sb.append(new char[] { 'b', 'a', 'r' }, 3, 0);\r\n    assertEquals(\"foo\", sb.toString());\r\n    sb.append(new char[] { 'a', 'b', 'c', 'b', 'a', 'r', 'd', 'e', 'f' }, 3, 3);\r\n    assertEquals(\"foobar\", sb.toString());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\text\\StrBuilderAppendInsertTest.java",
  "methodName" : "testAppend_FormattedString",
  "sourceCode" : "@Test\r\nvoid testAppend_FormattedString() {\r\n    StrBuilder sb;\r\n    sb = new StrBuilder();\r\n    sb.append(\"Hi\", (Object[]) null);\r\n    assertEquals(\"Hi\", sb.toString());\r\n    sb = new StrBuilder();\r\n    sb.append(\"Hi\", \"Alice\");\r\n    assertEquals(\"Hi\", sb.toString());\r\n    sb = new StrBuilder();\r\n    sb.append(\"Hi %s\", \"Alice\");\r\n    assertEquals(\"Hi Alice\", sb.toString());\r\n    sb = new StrBuilder();\r\n    sb.append(\"Hi %s %,d\", \"Alice\", 5000);\r\n    // group separator depends on system locale\r\n    final char groupingSeparator = DecimalFormatSymbols.getInstance().getGroupingSeparator();\r\n    final String expected = \"Hi Alice 5\" + groupingSeparator + \"000\";\r\n    assertEquals(expected, sb.toString());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\text\\StrBuilderAppendInsertTest.java",
  "methodName" : "testAppend_Object",
  "sourceCode" : "@Test\r\nvoid testAppend_Object() {\r\n    final StrBuilder sb = new StrBuilder();\r\n    sb.appendNull();\r\n    assertEquals(\"\", sb.toString());\r\n    sb.append((Object) null);\r\n    assertEquals(\"\", sb.toString());\r\n    sb.append(FOO);\r\n    assertEquals(\"foo\", sb.toString());\r\n    sb.append((StringBuffer) null);\r\n    assertEquals(\"foo\", sb.toString());\r\n    sb.append(new StringBuffer(\"baz\"));\r\n    assertEquals(\"foobaz\", sb.toString());\r\n    sb.append(new StrBuilder(\"yes\"));\r\n    assertEquals(\"foobazyes\", sb.toString());\r\n    sb.append((CharSequence) \"Seq\");\r\n    assertEquals(\"foobazyesSeq\", sb.toString());\r\n    // Check it supports StringBuilder\r\n    sb.append(new StringBuilder(\"bld\"));\r\n    assertEquals(\"foobazyesSeqbld\", sb.toString());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\text\\StrBuilderAppendInsertTest.java",
  "methodName" : "testAppend_PrimitiveNumber",
  "sourceCode" : "@Test\r\nvoid testAppend_PrimitiveNumber() {\r\n    final StrBuilder sb = new StrBuilder();\r\n    sb.append(0);\r\n    assertEquals(\"0\", sb.toString());\r\n    sb.append(1L);\r\n    assertEquals(\"01\", sb.toString());\r\n    sb.append(2.3f);\r\n    assertEquals(\"012.3\", sb.toString());\r\n    sb.append(4.5d);\r\n    assertEquals(\"012.34.5\", sb.toString());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\text\\StrBuilderAppendInsertTest.java",
  "methodName" : "testAppend_StrBuilder",
  "sourceCode" : "@Test\r\nvoid testAppend_StrBuilder() {\r\n    StrBuilder sb = new StrBuilder();\r\n    sb.setNullText(\"NULL\").append((StrBuilder) null);\r\n    assertEquals(\"NULL\", sb.toString());\r\n    sb = new StrBuilder();\r\n    sb.append(new StrBuilder(\"foo\"));\r\n    assertEquals(\"foo\", sb.toString());\r\n    sb.append(new StrBuilder(\"\"));\r\n    assertEquals(\"foo\", sb.toString());\r\n    sb.append(new StrBuilder(\"bar\"));\r\n    assertEquals(\"foobar\", sb.toString());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\text\\StrBuilderAppendInsertTest.java",
  "methodName" : "testAppend_StrBuilder_int_int",
  "sourceCode" : "@Test\r\nvoid testAppend_StrBuilder_int_int() {\r\n    StrBuilder sb = new StrBuilder();\r\n    sb.setNullText(\"NULL\").append((StrBuilder) null, 0, 1);\r\n    assertEquals(\"NULL\", sb.toString());\r\n    sb = new StrBuilder();\r\n    sb.append(new StrBuilder(\"foo\"), 0, 3);\r\n    assertEquals(\"foo\", sb.toString());\r\n    final StrBuilder sb1 = sb;\r\n    assertIndexOutOfBoundsException(() -> sb1.append(new StrBuilder(\"bar\"), -1, 1), \"append(char[], -1,) expected IndexOutOfBoundsException\");\r\n    assertIndexOutOfBoundsException(() -> sb1.append(new StrBuilder(\"bar\"), 3, 1), \"append(char[], 3,) expected IndexOutOfBoundsException\");\r\n    assertIndexOutOfBoundsException(() -> sb1.append(new StrBuilder(\"bar\"), 1, -1), \"append(char[],, -1) expected IndexOutOfBoundsException\");\r\n    assertIndexOutOfBoundsException(() -> sb1.append(new StrBuilder(\"bar\"), 1, 3), \"append(char[], 1, 3) expected IndexOutOfBoundsException\");\r\n    assertIndexOutOfBoundsException(() -> sb1.append(new StrBuilder(\"bar\"), -1, 3), \"append(char[], -1, 3) expected IndexOutOfBoundsException\");\r\n    assertIndexOutOfBoundsException(() -> sb1.append(new StrBuilder(\"bar\"), 4, 0), \"append(char[], 4, 0) expected IndexOutOfBoundsException\");\r\n    sb.append(new StrBuilder(\"bar\"), 3, 0);\r\n    assertEquals(\"foo\", sb.toString());\r\n    sb.append(new StrBuilder(\"abcbardef\"), 3, 3);\r\n    assertEquals(\"foobar\", sb.toString());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\text\\StrBuilderAppendInsertTest.java",
  "methodName" : "testAppend_String",
  "sourceCode" : "@Test\r\nvoid testAppend_String() {\r\n    StrBuilder sb = new StrBuilder();\r\n    sb.setNullText(\"NULL\").append((String) null);\r\n    assertEquals(\"NULL\", sb.toString());\r\n    sb = new StrBuilder();\r\n    sb.append(\"foo\");\r\n    assertEquals(\"foo\", sb.toString());\r\n    sb.append(\"\");\r\n    assertEquals(\"foo\", sb.toString());\r\n    sb.append(\"bar\");\r\n    assertEquals(\"foobar\", sb.toString());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\text\\StrBuilderAppendInsertTest.java",
  "methodName" : "testAppend_String_int_int",
  "sourceCode" : "@Test\r\nvoid testAppend_String_int_int() {\r\n    StrBuilder sb = new StrBuilder();\r\n    sb.setNullText(\"NULL\").append((String) null, 0, 1);\r\n    assertEquals(\"NULL\", sb.toString());\r\n    sb = new StrBuilder();\r\n    sb.append(\"foo\", 0, 3);\r\n    assertEquals(\"foo\", sb.toString());\r\n    final StrBuilder sb1 = sb;\r\n    assertIndexOutOfBoundsException(() -> sb1.append(\"bar\", -1, 1), \"append(char[], -1,) expected IndexOutOfBoundsException\");\r\n    assertIndexOutOfBoundsException(() -> sb1.append(\"bar\", 3, 1), \"append(char[], 3,) expected IndexOutOfBoundsException\");\r\n    assertIndexOutOfBoundsException(() -> sb1.append(\"bar\", 1, -1), \"append(char[],, -1) expected IndexOutOfBoundsException\");\r\n    assertIndexOutOfBoundsException(() -> sb1.append(\"bar\", 1, 3), \"append(char[], 1, 3) expected IndexOutOfBoundsException\");\r\n    assertIndexOutOfBoundsException(() -> sb1.append(\"bar\", -1, 3), \"append(char[], -1, 3) expected IndexOutOfBoundsException\");\r\n    assertIndexOutOfBoundsException(() -> sb1.append(\"bar\", 4, 0), \"append(char[], 4, 0) expected IndexOutOfBoundsException\");\r\n    sb.append(\"bar\", 3, 0);\r\n    assertEquals(\"foo\", sb.toString());\r\n    sb.append(\"abcbardef\", 3, 3);\r\n    assertEquals(\"foobar\", sb.toString());\r\n    sb.append((CharSequence) \"abcbardef\", 4, 3);\r\n    assertEquals(\"foobarard\", sb.toString());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\text\\StrBuilderAppendInsertTest.java",
  "methodName" : "testAppend_StringBuffer",
  "sourceCode" : "@Test\r\nvoid testAppend_StringBuffer() {\r\n    StrBuilder sb = new StrBuilder();\r\n    sb.setNullText(\"NULL\").append((StringBuffer) null);\r\n    assertEquals(\"NULL\", sb.toString());\r\n    sb = new StrBuilder();\r\n    sb.append(new StringBuffer(\"foo\"));\r\n    assertEquals(\"foo\", sb.toString());\r\n    sb.append(new StringBuffer(\"\"));\r\n    assertEquals(\"foo\", sb.toString());\r\n    sb.append(new StringBuffer(\"bar\"));\r\n    assertEquals(\"foobar\", sb.toString());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\text\\StrBuilderAppendInsertTest.java",
  "methodName" : "testAppend_StringBuffer_int_int",
  "sourceCode" : "@Test\r\nvoid testAppend_StringBuffer_int_int() {\r\n    StrBuilder sb = new StrBuilder();\r\n    sb.setNullText(\"NULL\").append((StringBuffer) null, 0, 1);\r\n    assertEquals(\"NULL\", sb.toString());\r\n    sb = new StrBuilder();\r\n    sb.append(new StringBuffer(\"foo\"), 0, 3);\r\n    assertEquals(\"foo\", sb.toString());\r\n    final StrBuilder sb1 = sb;\r\n    assertIndexOutOfBoundsException(() -> sb1.append(new StringBuffer(\"bar\"), -1, 1), \"append(char[], -1,) expected IndexOutOfBoundsException\");\r\n    assertIndexOutOfBoundsException(() -> sb1.append(new StringBuffer(\"bar\"), 3, 1), \"append(char[], 3,) expected IndexOutOfBoundsException\");\r\n    assertIndexOutOfBoundsException(() -> sb1.append(new StringBuffer(\"bar\"), 1, -1), \"append(char[],, -1) expected IndexOutOfBoundsException\");\r\n    assertIndexOutOfBoundsException(() -> sb1.append(new StringBuffer(\"bar\"), 1, 3), \"append(char[], 1, 3) expected IndexOutOfBoundsException\");\r\n    assertIndexOutOfBoundsException(() -> sb1.append(new StringBuffer(\"bar\"), -1, 3), \"append(char[], -1, 3) expected IndexOutOfBoundsException\");\r\n    assertIndexOutOfBoundsException(() -> sb1.append(new StringBuffer(\"bar\"), 4, 0), \"append(char[], 4, 0) expected IndexOutOfBoundsException\");\r\n    sb.append(new StringBuffer(\"bar\"), 3, 0);\r\n    assertEquals(\"foo\", sb.toString());\r\n    sb.append(new StringBuffer(\"abcbardef\"), 3, 3);\r\n    assertEquals(\"foobar\", sb.toString());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\text\\StrBuilderAppendInsertTest.java",
  "methodName" : "testAppend_StringBuilder",
  "sourceCode" : "@Test\r\nvoid testAppend_StringBuilder() {\r\n    StrBuilder sb = new StrBuilder();\r\n    sb.setNullText(\"NULL\").append((String) null);\r\n    assertEquals(\"NULL\", sb.toString());\r\n    sb = new StrBuilder();\r\n    sb.append(new StringBuilder(\"foo\"));\r\n    assertEquals(\"foo\", sb.toString());\r\n    sb.append(new StringBuilder(\"\"));\r\n    assertEquals(\"foo\", sb.toString());\r\n    sb.append(new StringBuilder(\"bar\"));\r\n    assertEquals(\"foobar\", sb.toString());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\text\\StrBuilderAppendInsertTest.java",
  "methodName" : "testAppend_StringBuilder_int_int",
  "sourceCode" : "@Test\r\nvoid testAppend_StringBuilder_int_int() {\r\n    StrBuilder sb = new StrBuilder();\r\n    sb.setNullText(\"NULL\").append((String) null, 0, 1);\r\n    assertEquals(\"NULL\", sb.toString());\r\n    sb = new StrBuilder();\r\n    sb.append(new StringBuilder(\"foo\"), 0, 3);\r\n    assertEquals(\"foo\", sb.toString());\r\n    final StrBuilder sb1 = sb;\r\n    assertIndexOutOfBoundsException(() -> sb1.append(new StringBuilder(\"bar\"), -1, 1), \"append(StringBuilder, -1,) expected IndexOutOfBoundsException\");\r\n    assertIndexOutOfBoundsException(() -> sb1.append(new StringBuilder(\"bar\"), 3, 1), \"append(StringBuilder, 3,) expected IndexOutOfBoundsException\");\r\n    assertIndexOutOfBoundsException(() -> sb1.append(new StringBuilder(\"bar\"), 1, -1), \"append(StringBuilder,, -1) expected IndexOutOfBoundsException\");\r\n    assertIndexOutOfBoundsException(() -> sb1.append(new StringBuilder(\"bar\"), 1, 3), \"append(StringBuilder, 1, 3) expected IndexOutOfBoundsException\");\r\n    assertIndexOutOfBoundsException(() -> sb1.append(new StringBuilder(\"bar\"), -1, 3), \"append(StringBuilder, -1, 3) expected IndexOutOfBoundsException\");\r\n    assertIndexOutOfBoundsException(() -> sb1.append(new StringBuilder(\"bar\"), 4, 0), \"append(StringBuilder, 4, 0) expected IndexOutOfBoundsException\");\r\n    sb.append(new StringBuilder(\"bar\"), 3, 0);\r\n    assertEquals(\"foo\", sb.toString());\r\n    sb.append(new StringBuilder(\"abcbardef\"), 3, 3);\r\n    assertEquals(\"foobar\", sb.toString());\r\n    sb.append(new StringBuilder(\"abcbardef\"), 4, 3);\r\n    assertEquals(\"foobarard\", sb.toString());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\text\\StrBuilderAppendInsertTest.java",
  "methodName" : "testAppendAll_Array",
  "sourceCode" : "@Test\r\nvoid testAppendAll_Array() {\r\n    final StrBuilder sb = new StrBuilder();\r\n    sb.appendAll((Object[]) null);\r\n    assertEquals(\"\", sb.toString());\r\n    sb.clear();\r\n    sb.appendAll();\r\n    assertEquals(\"\", sb.toString());\r\n    sb.clear();\r\n    sb.appendAll(\"foo\", \"bar\", \"baz\");\r\n    assertEquals(\"foobarbaz\", sb.toString());\r\n    sb.clear();\r\n    sb.appendAll(\"foo\", \"bar\", \"baz\");\r\n    assertEquals(\"foobarbaz\", sb.toString());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\text\\StrBuilderAppendInsertTest.java",
  "methodName" : "testAppendAll_Collection",
  "sourceCode" : "@Test\r\nvoid testAppendAll_Collection() {\r\n    final StrBuilder sb = new StrBuilder();\r\n    sb.appendAll((Collection<?>) null);\r\n    assertEquals(\"\", sb.toString());\r\n    sb.clear();\r\n    sb.appendAll(Collections.EMPTY_LIST);\r\n    assertEquals(\"\", sb.toString());\r\n    sb.clear();\r\n    sb.appendAll(Arrays.asList(\"foo\", \"bar\", \"baz\"));\r\n    assertEquals(\"foobarbaz\", sb.toString());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\text\\StrBuilderAppendInsertTest.java",
  "methodName" : "testAppendAll_Iterator",
  "sourceCode" : "@Test\r\nvoid testAppendAll_Iterator() {\r\n    final StrBuilder sb = new StrBuilder();\r\n    sb.appendAll((Iterator<?>) null);\r\n    assertEquals(\"\", sb.toString());\r\n    sb.clear();\r\n    sb.appendAll(Collections.EMPTY_LIST.iterator());\r\n    assertEquals(\"\", sb.toString());\r\n    sb.clear();\r\n    sb.appendAll(Arrays.asList(\"foo\", \"bar\", \"baz\").iterator());\r\n    assertEquals(\"foobarbaz\", sb.toString());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\text\\StrBuilderAppendInsertTest.java",
  "methodName" : "testAppendFixedWidthPadLeft",
  "sourceCode" : "@Test\r\nvoid testAppendFixedWidthPadLeft() {\r\n    final StrBuilder sb = new StrBuilder();\r\n    sb.appendFixedWidthPadLeft(\"foo\", -1, '-');\r\n    assertEquals(\"\", sb.toString());\r\n    sb.clear();\r\n    sb.appendFixedWidthPadLeft(\"foo\", 0, '-');\r\n    assertEquals(\"\", sb.toString());\r\n    sb.clear();\r\n    sb.appendFixedWidthPadLeft(\"foo\", 1, '-');\r\n    assertEquals(\"o\", sb.toString());\r\n    sb.clear();\r\n    sb.appendFixedWidthPadLeft(\"foo\", 2, '-');\r\n    assertEquals(\"oo\", sb.toString());\r\n    sb.clear();\r\n    sb.appendFixedWidthPadLeft(\"foo\", 3, '-');\r\n    assertEquals(\"foo\", sb.toString());\r\n    sb.clear();\r\n    sb.appendFixedWidthPadLeft(\"foo\", 4, '-');\r\n    assertEquals(\"-foo\", sb.toString());\r\n    sb.clear();\r\n    sb.appendFixedWidthPadLeft(\"foo\", 10, '-');\r\n    assertEquals(10, sb.length());\r\n    //            1234567890\r\n    assertEquals(\"-------foo\", sb.toString());\r\n    sb.clear();\r\n    sb.setNullText(\"null\");\r\n    sb.appendFixedWidthPadLeft(null, 5, '-');\r\n    assertEquals(\"-null\", sb.toString());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\text\\StrBuilderAppendInsertTest.java",
  "methodName" : "testAppendFixedWidthPadLeft_int",
  "sourceCode" : "@Test\r\nvoid testAppendFixedWidthPadLeft_int() {\r\n    final StrBuilder sb = new StrBuilder();\r\n    sb.appendFixedWidthPadLeft(123, -1, '-');\r\n    assertEquals(\"\", sb.toString());\r\n    sb.clear();\r\n    sb.appendFixedWidthPadLeft(123, 0, '-');\r\n    assertEquals(\"\", sb.toString());\r\n    sb.clear();\r\n    sb.appendFixedWidthPadLeft(123, 1, '-');\r\n    assertEquals(\"3\", sb.toString());\r\n    sb.clear();\r\n    sb.appendFixedWidthPadLeft(123, 2, '-');\r\n    assertEquals(\"23\", sb.toString());\r\n    sb.clear();\r\n    sb.appendFixedWidthPadLeft(123, 3, '-');\r\n    assertEquals(\"123\", sb.toString());\r\n    sb.clear();\r\n    sb.appendFixedWidthPadLeft(123, 4, '-');\r\n    assertEquals(\"-123\", sb.toString());\r\n    sb.clear();\r\n    sb.appendFixedWidthPadLeft(123, 10, '-');\r\n    assertEquals(10, sb.length());\r\n    //            1234567890\r\n    assertEquals(\"-------123\", sb.toString());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\text\\StrBuilderAppendInsertTest.java",
  "methodName" : "testAppendFixedWidthPadRight",
  "sourceCode" : "@Test\r\nvoid testAppendFixedWidthPadRight() {\r\n    final StrBuilder sb = new StrBuilder();\r\n    sb.appendFixedWidthPadRight(\"foo\", -1, '-');\r\n    assertEquals(\"\", sb.toString());\r\n    sb.clear();\r\n    sb.appendFixedWidthPadRight(\"foo\", 0, '-');\r\n    assertEquals(\"\", sb.toString());\r\n    sb.clear();\r\n    sb.appendFixedWidthPadRight(\"foo\", 1, '-');\r\n    assertEquals(\"f\", sb.toString());\r\n    sb.clear();\r\n    sb.appendFixedWidthPadRight(\"foo\", 2, '-');\r\n    assertEquals(\"fo\", sb.toString());\r\n    sb.clear();\r\n    sb.appendFixedWidthPadRight(\"foo\", 3, '-');\r\n    assertEquals(\"foo\", sb.toString());\r\n    sb.clear();\r\n    sb.appendFixedWidthPadRight(\"foo\", 4, '-');\r\n    assertEquals(\"foo-\", sb.toString());\r\n    sb.clear();\r\n    sb.appendFixedWidthPadRight(\"foo\", 10, '-');\r\n    assertEquals(10, sb.length());\r\n    //            1234567890\r\n    assertEquals(\"foo-------\", sb.toString());\r\n    sb.clear();\r\n    sb.setNullText(\"null\");\r\n    sb.appendFixedWidthPadRight(null, 5, '-');\r\n    assertEquals(\"null-\", sb.toString());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\text\\StrBuilderAppendInsertTest.java",
  "methodName" : "testAppendFixedWidthPadRight_int",
  "sourceCode" : "@Test\r\nvoid testAppendFixedWidthPadRight_int() {\r\n    final StrBuilder sb = new StrBuilder();\r\n    sb.appendFixedWidthPadRight(123, -1, '-');\r\n    assertEquals(\"\", sb.toString());\r\n    sb.clear();\r\n    sb.appendFixedWidthPadRight(123, 0, '-');\r\n    assertEquals(\"\", sb.toString());\r\n    sb.clear();\r\n    sb.appendFixedWidthPadRight(123, 1, '-');\r\n    assertEquals(\"1\", sb.toString());\r\n    sb.clear();\r\n    sb.appendFixedWidthPadRight(123, 2, '-');\r\n    assertEquals(\"12\", sb.toString());\r\n    sb.clear();\r\n    sb.appendFixedWidthPadRight(123, 3, '-');\r\n    assertEquals(\"123\", sb.toString());\r\n    sb.clear();\r\n    sb.appendFixedWidthPadRight(123, 4, '-');\r\n    assertEquals(\"123-\", sb.toString());\r\n    sb.clear();\r\n    sb.appendFixedWidthPadRight(123, 10, '-');\r\n    assertEquals(10, sb.length());\r\n    //            1234567890\r\n    assertEquals(\"123-------\", sb.toString());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\text\\StrBuilderAppendInsertTest.java",
  "methodName" : "testAppendln_Boolean",
  "sourceCode" : "@Test\r\nvoid testAppendln_Boolean() {\r\n    final StrBuilder sb = new StrBuilder();\r\n    sb.appendln(true);\r\n    assertEquals(\"true\" + SEP, sb.toString());\r\n    sb.clear();\r\n    sb.appendln(false);\r\n    assertEquals(\"false\" + SEP, sb.toString());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\text\\StrBuilderAppendInsertTest.java",
  "methodName" : "testAppendln_CharArray",
  "sourceCode" : "@Test\r\nvoid testAppendln_CharArray() {\r\n    final int[] count = new int[2];\r\n    final StrBuilder sb = new StrBuilder() {\r\n\r\n        private static final long serialVersionUID = 1L;\r\n\r\n        @Override\r\n        public StrBuilder append(final char[] str) {\r\n            count[0]++;\r\n            return super.append(str);\r\n        }\r\n\r\n        @Override\r\n        public StrBuilder appendNewLine() {\r\n            count[1]++;\r\n            return super.appendNewLine();\r\n        }\r\n    };\r\n    sb.appendln(\"foo\".toCharArray());\r\n    assertEquals(\"foo\" + SEP, sb.toString());\r\n    assertEquals(1, count[0]);\r\n    assertEquals(1, count[1]);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\text\\StrBuilderAppendInsertTest.java",
  "methodName" : "testAppendln_CharArray_int_int",
  "sourceCode" : "@Test\r\nvoid testAppendln_CharArray_int_int() {\r\n    final int[] count = new int[2];\r\n    final StrBuilder sb = new StrBuilder() {\r\n\r\n        private static final long serialVersionUID = 1L;\r\n\r\n        @Override\r\n        public StrBuilder append(final char[] str, final int startIndex, final int length) {\r\n            count[0]++;\r\n            return super.append(str, startIndex, length);\r\n        }\r\n\r\n        @Override\r\n        public StrBuilder appendNewLine() {\r\n            count[1]++;\r\n            return super.appendNewLine();\r\n        }\r\n    };\r\n    sb.appendln(\"foo\".toCharArray(), 0, 3);\r\n    assertEquals(\"foo\" + SEP, sb.toString());\r\n    assertEquals(1, count[0]);\r\n    assertEquals(1, count[1]);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\text\\StrBuilderAppendInsertTest.java",
  "methodName" : "testAppendln_FormattedString",
  "sourceCode" : "@Test\r\nvoid testAppendln_FormattedString() {\r\n    final int[] count = new int[2];\r\n    final StrBuilder sb = new StrBuilder() {\r\n\r\n        private static final long serialVersionUID = 1L;\r\n\r\n        @Override\r\n        public StrBuilder append(final String str) {\r\n            count[0]++;\r\n            return super.append(str);\r\n        }\r\n\r\n        @Override\r\n        public StrBuilder appendNewLine() {\r\n            count[1]++;\r\n            return super.appendNewLine();\r\n        }\r\n    };\r\n    sb.appendln(\"Hello %s\", \"Alice\");\r\n    assertEquals(\"Hello Alice\" + SEP, sb.toString());\r\n    // appendNewLine() calls append(String)\r\n    assertEquals(2, count[0]);\r\n    assertEquals(1, count[1]);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\text\\StrBuilderAppendInsertTest.java",
  "methodName" : "testAppendln_Object",
  "sourceCode" : "@Test\r\nvoid testAppendln_Object() {\r\n    final StrBuilder sb = new StrBuilder();\r\n    sb.appendln((Object) null);\r\n    assertEquals(\"\" + SEP, sb.toString());\r\n    sb.appendln(FOO);\r\n    assertEquals(SEP + \"foo\" + SEP, sb.toString());\r\n    sb.appendln(Integer.valueOf(6));\r\n    assertEquals(SEP + \"foo\" + SEP + \"6\" + SEP, sb.toString());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\text\\StrBuilderAppendInsertTest.java",
  "methodName" : "testAppendln_PrimitiveNumber",
  "sourceCode" : "@Test\r\nvoid testAppendln_PrimitiveNumber() {\r\n    final StrBuilder sb = new StrBuilder();\r\n    sb.appendln(0);\r\n    assertEquals(\"0\" + SEP, sb.toString());\r\n    sb.clear();\r\n    sb.appendln(1L);\r\n    assertEquals(\"1\" + SEP, sb.toString());\r\n    sb.clear();\r\n    sb.appendln(2.3f);\r\n    assertEquals(\"2.3\" + SEP, sb.toString());\r\n    sb.clear();\r\n    sb.appendln(4.5d);\r\n    assertEquals(\"4.5\" + SEP, sb.toString());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\text\\StrBuilderAppendInsertTest.java",
  "methodName" : "testAppendln_StrBuilder",
  "sourceCode" : "@Test\r\nvoid testAppendln_StrBuilder() {\r\n    final int[] count = new int[2];\r\n    final StrBuilder sb = new StrBuilder() {\r\n\r\n        private static final long serialVersionUID = 1L;\r\n\r\n        @Override\r\n        public StrBuilder append(final StrBuilder str) {\r\n            count[0]++;\r\n            return super.append(str);\r\n        }\r\n\r\n        @Override\r\n        public StrBuilder appendNewLine() {\r\n            count[1]++;\r\n            return super.appendNewLine();\r\n        }\r\n    };\r\n    sb.appendln(new StrBuilder(\"foo\"));\r\n    assertEquals(\"foo\" + SEP, sb.toString());\r\n    assertEquals(1, count[0]);\r\n    assertEquals(1, count[1]);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\text\\StrBuilderAppendInsertTest.java",
  "methodName" : "testAppendln_StrBuilder_int_int",
  "sourceCode" : "@Test\r\nvoid testAppendln_StrBuilder_int_int() {\r\n    final int[] count = new int[2];\r\n    final StrBuilder sb = new StrBuilder() {\r\n\r\n        private static final long serialVersionUID = 1L;\r\n\r\n        @Override\r\n        public StrBuilder append(final StrBuilder str, final int startIndex, final int length) {\r\n            count[0]++;\r\n            return super.append(str, startIndex, length);\r\n        }\r\n\r\n        @Override\r\n        public StrBuilder appendNewLine() {\r\n            count[1]++;\r\n            return super.appendNewLine();\r\n        }\r\n    };\r\n    sb.appendln(new StrBuilder(\"foo\"), 0, 3);\r\n    assertEquals(\"foo\" + SEP, sb.toString());\r\n    assertEquals(1, count[0]);\r\n    assertEquals(1, count[1]);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\text\\StrBuilderAppendInsertTest.java",
  "methodName" : "testAppendln_String",
  "sourceCode" : "@Test\r\nvoid testAppendln_String() {\r\n    final int[] count = new int[2];\r\n    final StrBuilder sb = new StrBuilder() {\r\n\r\n        private static final long serialVersionUID = 1L;\r\n\r\n        @Override\r\n        public StrBuilder append(final String str) {\r\n            count[0]++;\r\n            return super.append(str);\r\n        }\r\n\r\n        @Override\r\n        public StrBuilder appendNewLine() {\r\n            count[1]++;\r\n            return super.appendNewLine();\r\n        }\r\n    };\r\n    sb.appendln(\"foo\");\r\n    assertEquals(\"foo\" + SEP, sb.toString());\r\n    // appendNewLine() calls append(String)\r\n    assertEquals(2, count[0]);\r\n    assertEquals(1, count[1]);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\text\\StrBuilderAppendInsertTest.java",
  "methodName" : "testAppendln_String_int_int",
  "sourceCode" : "@Test\r\nvoid testAppendln_String_int_int() {\r\n    final int[] count = new int[2];\r\n    final StrBuilder sb = new StrBuilder() {\r\n\r\n        private static final long serialVersionUID = 1L;\r\n\r\n        @Override\r\n        public StrBuilder append(final String str, final int startIndex, final int length) {\r\n            count[0]++;\r\n            return super.append(str, startIndex, length);\r\n        }\r\n\r\n        @Override\r\n        public StrBuilder appendNewLine() {\r\n            count[1]++;\r\n            return super.appendNewLine();\r\n        }\r\n    };\r\n    sb.appendln(\"foo\", 0, 3);\r\n    assertEquals(\"foo\" + SEP, sb.toString());\r\n    assertEquals(1, count[0]);\r\n    assertEquals(1, count[1]);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\text\\StrBuilderAppendInsertTest.java",
  "methodName" : "testAppendln_StringBuffer",
  "sourceCode" : "@Test\r\nvoid testAppendln_StringBuffer() {\r\n    final int[] count = new int[2];\r\n    final StrBuilder sb = new StrBuilder() {\r\n\r\n        private static final long serialVersionUID = 1L;\r\n\r\n        @Override\r\n        public StrBuilder append(final StringBuffer str) {\r\n            count[0]++;\r\n            return super.append(str);\r\n        }\r\n\r\n        @Override\r\n        public StrBuilder appendNewLine() {\r\n            count[1]++;\r\n            return super.appendNewLine();\r\n        }\r\n    };\r\n    sb.appendln(new StringBuffer(\"foo\"));\r\n    assertEquals(\"foo\" + SEP, sb.toString());\r\n    assertEquals(1, count[0]);\r\n    assertEquals(1, count[1]);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\text\\StrBuilderAppendInsertTest.java",
  "methodName" : "testAppendln_StringBuffer_int_int",
  "sourceCode" : "@Test\r\nvoid testAppendln_StringBuffer_int_int() {\r\n    final int[] count = new int[2];\r\n    final StrBuilder sb = new StrBuilder() {\r\n\r\n        private static final long serialVersionUID = 1L;\r\n\r\n        @Override\r\n        public StrBuilder append(final StringBuffer str, final int startIndex, final int length) {\r\n            count[0]++;\r\n            return super.append(str, startIndex, length);\r\n        }\r\n\r\n        @Override\r\n        public StrBuilder appendNewLine() {\r\n            count[1]++;\r\n            return super.appendNewLine();\r\n        }\r\n    };\r\n    sb.appendln(new StringBuffer(\"foo\"), 0, 3);\r\n    assertEquals(\"foo\" + SEP, sb.toString());\r\n    assertEquals(1, count[0]);\r\n    assertEquals(1, count[1]);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\text\\StrBuilderAppendInsertTest.java",
  "methodName" : "testAppendln_StringBuilder",
  "sourceCode" : "@Test\r\nvoid testAppendln_StringBuilder() {\r\n    final int[] count = new int[2];\r\n    final StrBuilder sb = new StrBuilder() {\r\n\r\n        private static final long serialVersionUID = 1L;\r\n\r\n        @Override\r\n        public StrBuilder append(final StringBuilder str) {\r\n            count[0]++;\r\n            return super.append(str);\r\n        }\r\n\r\n        @Override\r\n        public StrBuilder appendNewLine() {\r\n            count[1]++;\r\n            return super.appendNewLine();\r\n        }\r\n    };\r\n    sb.appendln(new StringBuilder(\"foo\"));\r\n    assertEquals(\"foo\" + SEP, sb.toString());\r\n    assertEquals(1, count[0]);\r\n    assertEquals(1, count[1]);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\text\\StrBuilderAppendInsertTest.java",
  "methodName" : "testAppendln_StringBuilder_int_int",
  "sourceCode" : "@Test\r\nvoid testAppendln_StringBuilder_int_int() {\r\n    final int[] count = new int[2];\r\n    final StrBuilder sb = new StrBuilder() {\r\n\r\n        private static final long serialVersionUID = 1L;\r\n\r\n        @Override\r\n        public StrBuilder append(final StringBuilder str, final int startIndex, final int length) {\r\n            count[0]++;\r\n            return super.append(str, startIndex, length);\r\n        }\r\n\r\n        @Override\r\n        public StrBuilder appendNewLine() {\r\n            count[1]++;\r\n            return super.appendNewLine();\r\n        }\r\n    };\r\n    sb.appendln(new StringBuilder(\"foo\"), 0, 3);\r\n    assertEquals(\"foo\" + SEP, sb.toString());\r\n    assertEquals(1, count[0]);\r\n    assertEquals(1, count[1]);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\text\\StrBuilderAppendInsertTest.java",
  "methodName" : "testAppendNewLine",
  "sourceCode" : "@Test\r\nvoid testAppendNewLine() {\r\n    StrBuilder sb = new StrBuilder(\"---\");\r\n    sb.appendNewLine().append(\"+++\");\r\n    assertEquals(\"---\" + SEP + \"+++\", sb.toString());\r\n    sb = new StrBuilder(\"---\");\r\n    sb.setNewLineText(\"#\").appendNewLine().setNewLineText(null).appendNewLine();\r\n    assertEquals(\"---#\" + SEP, sb.toString());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\text\\StrBuilderAppendInsertTest.java",
  "methodName" : "testAppendPadding",
  "sourceCode" : "@Test\r\nvoid testAppendPadding() {\r\n    final StrBuilder sb = new StrBuilder();\r\n    sb.append(\"foo\");\r\n    assertEquals(\"foo\", sb.toString());\r\n    sb.appendPadding(-1, '-');\r\n    assertEquals(\"foo\", sb.toString());\r\n    sb.appendPadding(0, '-');\r\n    assertEquals(\"foo\", sb.toString());\r\n    sb.appendPadding(1, '-');\r\n    assertEquals(\"foo-\", sb.toString());\r\n    sb.appendPadding(16, '-');\r\n    assertEquals(20, sb.length());\r\n    //            12345678901234567890\r\n    assertEquals(\"foo-----------------\", sb.toString());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\text\\StrBuilderAppendInsertTest.java",
  "methodName" : "testAppendSeparator_char",
  "sourceCode" : "@Test\r\nvoid testAppendSeparator_char() {\r\n    final StrBuilder sb = new StrBuilder();\r\n    // no effect\r\n    sb.appendSeparator(',');\r\n    assertEquals(\"\", sb.toString());\r\n    sb.append(\"foo\");\r\n    assertEquals(\"foo\", sb.toString());\r\n    sb.appendSeparator(',');\r\n    assertEquals(\"foo,\", sb.toString());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\text\\StrBuilderAppendInsertTest.java",
  "methodName" : "testAppendSeparator_char_char",
  "sourceCode" : "@Test\r\nvoid testAppendSeparator_char_char() {\r\n    final StrBuilder sb = new StrBuilder();\r\n    final char startSeparator = ':';\r\n    final char standardSeparator = ',';\r\n    final String foo = \"foo\";\r\n    // no effect\r\n    sb.appendSeparator(standardSeparator, startSeparator);\r\n    assertEquals(String.valueOf(startSeparator), sb.toString());\r\n    sb.append(foo);\r\n    assertEquals(startSeparator + foo, sb.toString());\r\n    sb.appendSeparator(standardSeparator, startSeparator);\r\n    assertEquals(startSeparator + foo + standardSeparator, sb.toString());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\text\\StrBuilderAppendInsertTest.java",
  "methodName" : "testAppendSeparator_char_int",
  "sourceCode" : "@Test\r\nvoid testAppendSeparator_char_int() {\r\n    final StrBuilder sb = new StrBuilder();\r\n    // no effect\r\n    sb.appendSeparator(',', 0);\r\n    assertEquals(\"\", sb.toString());\r\n    sb.append(\"foo\");\r\n    assertEquals(\"foo\", sb.toString());\r\n    sb.appendSeparator(',', 1);\r\n    assertEquals(\"foo,\", sb.toString());\r\n    // no effect\r\n    sb.appendSeparator(',', -1);\r\n    assertEquals(\"foo,\", sb.toString());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\text\\StrBuilderAppendInsertTest.java",
  "methodName" : "testAppendSeparator_String",
  "sourceCode" : "@Test\r\nvoid testAppendSeparator_String() {\r\n    final StrBuilder sb = new StrBuilder();\r\n    // no effect\r\n    sb.appendSeparator(\",\");\r\n    assertEquals(\"\", sb.toString());\r\n    sb.append(\"foo\");\r\n    assertEquals(\"foo\", sb.toString());\r\n    sb.appendSeparator(\",\");\r\n    assertEquals(\"foo,\", sb.toString());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\text\\StrBuilderAppendInsertTest.java",
  "methodName" : "testAppendSeparator_String_int",
  "sourceCode" : "@Test\r\nvoid testAppendSeparator_String_int() {\r\n    final StrBuilder sb = new StrBuilder();\r\n    // no effect\r\n    sb.appendSeparator(\",\", 0);\r\n    assertEquals(\"\", sb.toString());\r\n    sb.append(\"foo\");\r\n    assertEquals(\"foo\", sb.toString());\r\n    sb.appendSeparator(\",\", 1);\r\n    assertEquals(\"foo,\", sb.toString());\r\n    // no effect\r\n    sb.appendSeparator(\",\", -1);\r\n    assertEquals(\"foo,\", sb.toString());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\text\\StrBuilderAppendInsertTest.java",
  "methodName" : "testAppendSeparator_String_String",
  "sourceCode" : "@Test\r\nvoid testAppendSeparator_String_String() {\r\n    final StrBuilder sb = new StrBuilder();\r\n    final String startSeparator = \"order by \";\r\n    final String standardSeparator = \",\";\r\n    final String foo = \"foo\";\r\n    sb.appendSeparator(null, null);\r\n    assertEquals(\"\", sb.toString());\r\n    sb.appendSeparator(standardSeparator, null);\r\n    assertEquals(\"\", sb.toString());\r\n    sb.appendSeparator(standardSeparator, startSeparator);\r\n    assertEquals(startSeparator, sb.toString());\r\n    sb.appendSeparator(null, null);\r\n    assertEquals(startSeparator, sb.toString());\r\n    sb.appendSeparator(null, startSeparator);\r\n    assertEquals(startSeparator, sb.toString());\r\n    sb.append(foo);\r\n    assertEquals(startSeparator + foo, sb.toString());\r\n    sb.appendSeparator(standardSeparator, startSeparator);\r\n    assertEquals(startSeparator + foo + standardSeparator, sb.toString());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\text\\StrBuilderAppendInsertTest.java",
  "methodName" : "testAppendWithNullText",
  "sourceCode" : "@Test\r\nvoid testAppendWithNullText() {\r\n    final StrBuilder sb = new StrBuilder();\r\n    sb.setNullText(\"NULL\");\r\n    assertEquals(\"\", sb.toString());\r\n    sb.appendNull();\r\n    assertEquals(\"NULL\", sb.toString());\r\n    sb.append((Object) null);\r\n    assertEquals(\"NULLNULL\", sb.toString());\r\n    sb.append(FOO);\r\n    assertEquals(\"NULLNULLfoo\", sb.toString());\r\n    sb.append((String) null);\r\n    assertEquals(\"NULLNULLfooNULL\", sb.toString());\r\n    sb.append(\"\");\r\n    assertEquals(\"NULLNULLfooNULL\", sb.toString());\r\n    sb.append(\"bar\");\r\n    assertEquals(\"NULLNULLfooNULLbar\", sb.toString());\r\n    sb.append((StringBuffer) null);\r\n    assertEquals(\"NULLNULLfooNULLbarNULL\", sb.toString());\r\n    sb.append(new StringBuffer(\"baz\"));\r\n    assertEquals(\"NULLNULLfooNULLbarNULLbaz\", sb.toString());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\text\\StrBuilderAppendInsertTest.java",
  "methodName" : "testAppendWithSeparators_Array",
  "sourceCode" : "@Test\r\nvoid testAppendWithSeparators_Array() {\r\n    final StrBuilder sb = new StrBuilder();\r\n    sb.appendWithSeparators((Object[]) null, \",\");\r\n    assertEquals(\"\", sb.toString());\r\n    sb.clear();\r\n    sb.appendWithSeparators(new Object[0], \",\");\r\n    assertEquals(\"\", sb.toString());\r\n    sb.clear();\r\n    sb.appendWithSeparators(new Object[] { \"foo\", \"bar\", \"baz\" }, \",\");\r\n    assertEquals(\"foo,bar,baz\", sb.toString());\r\n    sb.clear();\r\n    sb.appendWithSeparators(new Object[] { \"foo\", \"bar\", \"baz\" }, null);\r\n    assertEquals(\"foobarbaz\", sb.toString());\r\n    sb.clear();\r\n    sb.appendWithSeparators(new Object[] { \"foo\", null, \"baz\" }, \",\");\r\n    assertEquals(\"foo,,baz\", sb.toString());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\text\\StrBuilderAppendInsertTest.java",
  "methodName" : "testAppendWithSeparators_Collection",
  "sourceCode" : "@Test\r\nvoid testAppendWithSeparators_Collection() {\r\n    final StrBuilder sb = new StrBuilder();\r\n    sb.appendWithSeparators((Collection<?>) null, \",\");\r\n    assertEquals(\"\", sb.toString());\r\n    sb.clear();\r\n    sb.appendWithSeparators(Collections.EMPTY_LIST, \",\");\r\n    assertEquals(\"\", sb.toString());\r\n    sb.clear();\r\n    sb.appendWithSeparators(Arrays.asList(\"foo\", \"bar\", \"baz\"), \",\");\r\n    assertEquals(\"foo,bar,baz\", sb.toString());\r\n    sb.clear();\r\n    sb.appendWithSeparators(Arrays.asList(\"foo\", \"bar\", \"baz\"), null);\r\n    assertEquals(\"foobarbaz\", sb.toString());\r\n    sb.clear();\r\n    sb.appendWithSeparators(Arrays.asList(\"foo\", null, \"baz\"), \",\");\r\n    assertEquals(\"foo,,baz\", sb.toString());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\text\\StrBuilderAppendInsertTest.java",
  "methodName" : "testAppendWithSeparators_Iterator",
  "sourceCode" : "@Test\r\nvoid testAppendWithSeparators_Iterator() {\r\n    final StrBuilder sb = new StrBuilder();\r\n    sb.appendWithSeparators((Iterator<?>) null, \",\");\r\n    assertEquals(\"\", sb.toString());\r\n    sb.clear();\r\n    sb.appendWithSeparators(Collections.EMPTY_LIST.iterator(), \",\");\r\n    assertEquals(\"\", sb.toString());\r\n    sb.clear();\r\n    sb.appendWithSeparators(Arrays.asList(\"foo\", \"bar\", \"baz\").iterator(), \",\");\r\n    assertEquals(\"foo,bar,baz\", sb.toString());\r\n    sb.clear();\r\n    sb.appendWithSeparators(Arrays.asList(\"foo\", \"bar\", \"baz\").iterator(), null);\r\n    assertEquals(\"foobarbaz\", sb.toString());\r\n    sb.clear();\r\n    sb.appendWithSeparators(Arrays.asList(\"foo\", null, \"baz\").iterator(), \",\");\r\n    assertEquals(\"foo,,baz\", sb.toString());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\text\\StrBuilderAppendInsertTest.java",
  "methodName" : "testAppendWithSeparatorsWithNullText",
  "sourceCode" : "@Test\r\nvoid testAppendWithSeparatorsWithNullText() {\r\n    final StrBuilder sb = new StrBuilder();\r\n    sb.setNullText(\"null\");\r\n    sb.appendWithSeparators(new Object[] { \"foo\", null, \"baz\" }, \",\");\r\n    assertEquals(\"foo,null,baz\", sb.toString());\r\n    sb.clear();\r\n    sb.appendWithSeparators(Arrays.asList(\"foo\", null, \"baz\"), \",\");\r\n    assertEquals(\"foo,null,baz\", sb.toString());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\text\\StrBuilderAppendInsertTest.java",
  "methodName" : "testInsert",
  "sourceCode" : "@Test\r\nvoid testInsert() {\r\n    final StrBuilder sb = new StrBuilder();\r\n    sb.append(\"barbaz\");\r\n    assertEquals(\"barbaz\", sb.toString());\r\n    assertIndexOutOfBoundsException(() -> sb.insert(-1, FOO), \"insert(-1, Object) expected StringIndexOutOfBoundsException\");\r\n    assertIndexOutOfBoundsException(() -> sb.insert(7, FOO), \"insert(7, Object) expected StringIndexOutOfBoundsException\");\r\n    sb.insert(0, (Object) null);\r\n    assertEquals(\"barbaz\", sb.toString());\r\n    sb.insert(0, FOO);\r\n    assertEquals(\"foobarbaz\", sb.toString());\r\n    sb.clear();\r\n    sb.append(\"barbaz\");\r\n    assertEquals(\"barbaz\", sb.toString());\r\n    assertIndexOutOfBoundsException(() -> sb.insert(-1, \"foo\"), \"insert(-1, String) expected StringIndexOutOfBoundsException\");\r\n    assertIndexOutOfBoundsException(() -> sb.insert(7, \"foo\"), \"insert(7, String) expected StringIndexOutOfBoundsException\");\r\n    sb.insert(0, (String) null);\r\n    assertEquals(\"barbaz\", sb.toString());\r\n    sb.insert(0, \"foo\");\r\n    assertEquals(\"foobarbaz\", sb.toString());\r\n    sb.clear();\r\n    sb.append(\"barbaz\");\r\n    assertEquals(\"barbaz\", sb.toString());\r\n    assertIndexOutOfBoundsException(() -> sb.insert(-1, new char[] { 'f', 'o', 'o' }), \"insert(-1, char[]) expected StringIndexOutOfBoundsException\");\r\n    assertIndexOutOfBoundsException(() -> sb.insert(7, new char[] { 'f', 'o', 'o' }), \"insert(7, char[]) expected StringIndexOutOfBoundsException\");\r\n    sb.insert(0, (char[]) null);\r\n    assertEquals(\"barbaz\", sb.toString());\r\n    sb.insert(0, new char[0]);\r\n    assertEquals(\"barbaz\", sb.toString());\r\n    sb.insert(0, new char[] { 'f', 'o', 'o' });\r\n    assertEquals(\"foobarbaz\", sb.toString());\r\n    sb.clear();\r\n    sb.append(\"barbaz\");\r\n    assertEquals(\"barbaz\", sb.toString());\r\n    assertIndexOutOfBoundsException(() -> sb.insert(-1, new char[] { 'a', 'b', 'c', 'f', 'o', 'o', 'd', 'e', 'f' }, 3, 3), \"insert(-1, char[], 3, 3) expected StringIndexOutOfBoundsException\");\r\n    assertIndexOutOfBoundsException(() -> sb.insert(7, new char[] { 'a', 'b', 'c', 'f', 'o', 'o', 'd', 'e', 'f' }, 3, 3), \"insert(7, char[], 3, 3) expected StringIndexOutOfBoundsException\");\r\n    sb.insert(0, null, 0, 0);\r\n    assertEquals(\"barbaz\", sb.toString());\r\n    sb.insert(0, new char[0], 0, 0);\r\n    assertEquals(\"barbaz\", sb.toString());\r\n    assertIndexOutOfBoundsException(() -> sb.insert(0, new char[] { 'a', 'b', 'c', 'f', 'o', 'o', 'd', 'e', 'f' }, -1, 3), \"insert(0, char[], -1, 3) expected StringIndexOutOfBoundsException\");\r\n    assertIndexOutOfBoundsException(() -> sb.insert(0, new char[] { 'a', 'b', 'c', 'f', 'o', 'o', 'd', 'e', 'f' }, 10, 3), \"insert(0, char[], 10, 3) expected StringIndexOutOfBoundsException\");\r\n    assertIndexOutOfBoundsException(() -> sb.insert(0, new char[] { 'a', 'b', 'c', 'f', 'o', 'o', 'd', 'e', 'f' }, 0, -1), \"insert(0, char[], 0, -1) expected StringIndexOutOfBoundsException\");\r\n    assertIndexOutOfBoundsException(() -> sb.insert(0, new char[] { 'a', 'b', 'c', 'f', 'o', 'o', 'd', 'e', 'f' }, 0, 10), \"insert(0, char[], 0, 10) expected StringIndexOutOfBoundsException\");\r\n    sb.insert(0, new char[] { 'a', 'b', 'c', 'f', 'o', 'o', 'd', 'e', 'f' }, 0, 0);\r\n    assertEquals(\"barbaz\", sb.toString());\r\n    sb.insert(0, new char[] { 'a', 'b', 'c', 'f', 'o', 'o', 'd', 'e', 'f' }, 3, 3);\r\n    assertEquals(\"foobarbaz\", sb.toString());\r\n    sb.clear();\r\n    sb.append(\"barbaz\");\r\n    assertEquals(\"barbaz\", sb.toString());\r\n    assertIndexOutOfBoundsException(() -> sb.insert(-1, true), \"insert(-1, boolean) expected StringIndexOutOfBoundsException\");\r\n    assertIndexOutOfBoundsException(() -> sb.insert(7, true), \"insert(7, boolean) expected StringIndexOutOfBoundsException\");\r\n    sb.insert(0, true);\r\n    assertEquals(\"truebarbaz\", sb.toString());\r\n    sb.insert(0, false);\r\n    assertEquals(\"falsetruebarbaz\", sb.toString());\r\n    sb.clear();\r\n    sb.append(\"barbaz\");\r\n    assertEquals(\"barbaz\", sb.toString());\r\n    assertIndexOutOfBoundsException(() -> sb.insert(-1, '!'), \"insert(-1, char) expected StringIndexOutOfBoundsException\");\r\n    assertIndexOutOfBoundsException(() -> sb.insert(7, '!'), \"insert(7, char) expected StringIndexOutOfBoundsException\");\r\n    sb.insert(0, '!');\r\n    assertEquals(\"!barbaz\", sb.toString());\r\n    sb.clear();\r\n    sb.append(\"barbaz\");\r\n    assertEquals(\"barbaz\", sb.toString());\r\n    assertIndexOutOfBoundsException(() -> sb.insert(-1, 0), \"insert(-1, int) expected StringIndexOutOfBoundsException\");\r\n    assertIndexOutOfBoundsException(() -> sb.insert(7, 0), \"insert(7, int) expected StringIndexOutOfBoundsException\");\r\n    sb.insert(0, '0');\r\n    assertEquals(\"0barbaz\", sb.toString());\r\n    sb.clear();\r\n    sb.append(\"barbaz\");\r\n    assertEquals(\"barbaz\", sb.toString());\r\n    assertIndexOutOfBoundsException(() -> sb.insert(-1, 1L), \"insert(-1, long) expected StringIndexOutOfBoundsException\");\r\n    assertIndexOutOfBoundsException(() -> sb.insert(7, 1L), \"insert(7, long) expected StringIndexOutOfBoundsException\");\r\n    sb.insert(0, 1L);\r\n    assertEquals(\"1barbaz\", sb.toString());\r\n    sb.clear();\r\n    sb.append(\"barbaz\");\r\n    assertEquals(\"barbaz\", sb.toString());\r\n    assertIndexOutOfBoundsException(() -> sb.insert(-1, 2.3F), \"insert(-1, float) expected StringIndexOutOfBoundsException\");\r\n    assertIndexOutOfBoundsException(() -> sb.insert(7, 2.3F), \"insert(7, float) expected StringIndexOutOfBoundsException\");\r\n    sb.insert(0, 2.3F);\r\n    assertEquals(\"2.3barbaz\", sb.toString());\r\n    sb.clear();\r\n    sb.append(\"barbaz\");\r\n    assertEquals(\"barbaz\", sb.toString());\r\n    assertIndexOutOfBoundsException(() -> sb.insert(-1, 4.5D), \"insert(-1, double) expected StringIndexOutOfBoundsException\");\r\n    assertIndexOutOfBoundsException(() -> sb.insert(7, 4.5D), \"insert(7, double) expected StringIndexOutOfBoundsException\");\r\n    sb.insert(0, 4.5D);\r\n    assertEquals(\"4.5barbaz\", sb.toString());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\text\\StrBuilderAppendInsertTest.java",
  "methodName" : "testInsertWithNullText",
  "sourceCode" : "@Test\r\nvoid testInsertWithNullText() {\r\n    final StrBuilder sb = new StrBuilder();\r\n    sb.setNullText(\"null\");\r\n    sb.append(\"barbaz\");\r\n    assertEquals(\"barbaz\", sb.toString());\r\n    assertIndexOutOfBoundsException(() -> sb.insert(-1, FOO), \"insert(-1, Object) expected StringIndexOutOfBoundsException\");\r\n    assertIndexOutOfBoundsException(() -> sb.insert(7, FOO), \"insert(7, Object) expected StringIndexOutOfBoundsException\");\r\n    sb.insert(0, (Object) null);\r\n    assertEquals(\"nullbarbaz\", sb.toString());\r\n    sb.insert(0, FOO);\r\n    assertEquals(\"foonullbarbaz\", sb.toString());\r\n    sb.clear();\r\n    sb.append(\"barbaz\");\r\n    assertEquals(\"barbaz\", sb.toString());\r\n    assertIndexOutOfBoundsException(() -> sb.insert(-1, \"foo\"), \"insert(-1, String) expected StringIndexOutOfBoundsException\");\r\n    assertIndexOutOfBoundsException(() -> sb.insert(7, \"foo\"), \"insert(7, String) expected StringIndexOutOfBoundsException\");\r\n    sb.insert(0, (String) null);\r\n    assertEquals(\"nullbarbaz\", sb.toString());\r\n    sb.insert(0, \"foo\");\r\n    assertEquals(\"foonullbarbaz\", sb.toString());\r\n    sb.insert(0, (char[]) null);\r\n    assertEquals(\"nullfoonullbarbaz\", sb.toString());\r\n    sb.insert(0, null, 0, 0);\r\n    assertEquals(\"nullnullfoonullbarbaz\", sb.toString());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\text\\StrBuilderAppendInsertTest.java",
  "methodName" : "testLang299",
  "sourceCode" : "// See: https://issues.apache.org/jira/browse/LANG-299\r\n@Test\r\nvoid testLang299() {\r\n    final StrBuilder sb = new StrBuilder(1);\r\n    sb.appendFixedWidthPadRight(\"foo\", 1, '-');\r\n    assertEquals(\"f\", sb.toString());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\text\\StrBuilderTest.java",
  "methodName" : "test_LANG_1131_EqualsWithNullStrBuilder",
  "sourceCode" : "@Test\r\nvoid test_LANG_1131_EqualsWithNullStrBuilder() {\r\n    final StrBuilder sb = new StrBuilder();\r\n    final StrBuilder other = null;\r\n    assertFalse(sb.equals(other));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\text\\StrBuilderTest.java",
  "methodName" : "testAppendCharBuffer",
  "sourceCode" : "@Test\r\nvoid testAppendCharBuffer() {\r\n    final StrBuilder sb1 = new StrBuilder();\r\n    final CharBuffer buf = CharBuffer.allocate(10);\r\n    buf.append(\"0123456789\");\r\n    buf.flip();\r\n    sb1.append(buf);\r\n    assertEquals(\"0123456789\", sb1.toString());\r\n    final StrBuilder sb2 = new StrBuilder();\r\n    sb2.append(buf, 1, 8);\r\n    assertEquals(\"12345678\", sb2.toString());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\text\\StrBuilderTest.java",
  "methodName" : "testAppendToCharBuffer",
  "sourceCode" : "@Test\r\nvoid testAppendToCharBuffer() throws Exception {\r\n    final StrBuilder sb = new StrBuilder(\"1234567890\");\r\n    final String text = \"Test \";\r\n    final CharBuffer buffer = CharBuffer.allocate(sb.size() + text.length());\r\n    buffer.put(text);\r\n    sb.appendTo(buffer);\r\n    buffer.flip();\r\n    assertEquals(\"Test 1234567890\", buffer.toString());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\text\\StrBuilderTest.java",
  "methodName" : "testAppendToStringBuffer",
  "sourceCode" : "@Test\r\nvoid testAppendToStringBuffer() throws Exception {\r\n    final StrBuilder sb = new StrBuilder(\"1234567890\");\r\n    final StringBuffer buffer = new StringBuffer(\"Test \");\r\n    sb.appendTo(buffer);\r\n    assertEquals(\"Test 1234567890\", buffer.toString());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\text\\StrBuilderTest.java",
  "methodName" : "testAppendToStringBuilder",
  "sourceCode" : "@Test\r\nvoid testAppendToStringBuilder() throws Exception {\r\n    final StrBuilder sb = new StrBuilder(\"1234567890\");\r\n    final StringBuilder builder = new StringBuilder(\"Test \");\r\n    sb.appendTo(builder);\r\n    assertEquals(\"Test 1234567890\", builder.toString());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\text\\StrBuilderTest.java",
  "methodName" : "testAppendToWriter",
  "sourceCode" : "@Test\r\nvoid testAppendToWriter() throws Exception {\r\n    final StrBuilder sb = new StrBuilder(\"1234567890\");\r\n    final StringWriter writer = new StringWriter();\r\n    writer.append(\"Test \");\r\n    sb.appendTo(writer);\r\n    assertEquals(\"Test 1234567890\", writer.toString());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\text\\StrBuilderTest.java",
  "methodName" : "testAsBuilder",
  "sourceCode" : "@Test\r\nvoid testAsBuilder() {\r\n    final StrBuilder sb = new StrBuilder().appendAll(\"Lorem\", \" \", \"ipsum\", \" \", \"dolor\");\r\n    assertEquals(sb.toString(), sb.build());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\text\\StrBuilderTest.java",
  "methodName" : "testAsReader",
  "sourceCode" : "@Test\r\nvoid testAsReader() throws Exception {\r\n    final StrBuilder sb = new StrBuilder(\"some text\");\r\n    try (Reader reader = sb.asReader()) {\r\n        assertTrue(reader.ready());\r\n        final char[] buf = new char[40];\r\n        assertEquals(9, reader.read(buf));\r\n        assertEquals(\"some text\", new String(buf, 0, 9));\r\n        assertEquals(-1, reader.read());\r\n        assertFalse(reader.ready());\r\n        assertEquals(0, reader.skip(2));\r\n        assertEquals(0, reader.skip(-1));\r\n        assertTrue(reader.markSupported());\r\n    }\r\n    char[] array = new char[3];\r\n    try (Reader reader = sb.asReader()) {\r\n        assertEquals('s', reader.read());\r\n        reader.mark(-1);\r\n        assertEquals(3, reader.read(array, 0, 3));\r\n        assertEquals('o', array[0]);\r\n        assertEquals('m', array[1]);\r\n        assertEquals('e', array[2]);\r\n        reader.reset();\r\n        assertEquals(1, reader.read(array, 1, 1));\r\n        assertEquals('o', array[0]);\r\n        assertEquals('o', array[1]);\r\n        assertEquals('e', array[2]);\r\n        assertEquals(2, reader.skip(2));\r\n        assertEquals(' ', reader.read());\r\n        assertTrue(reader.ready());\r\n        reader.close();\r\n        assertTrue(reader.ready());\r\n    }\r\n    try (Reader r = sb.asReader()) {\r\n        final char[] arr = new char[3];\r\n        assertIndexOutOfBoundsException(() -> r.read(arr, -1, 0));\r\n        assertIndexOutOfBoundsException(() -> r.read(arr, 0, -1));\r\n        assertIndexOutOfBoundsException(() -> r.read(arr, 100, 1));\r\n        assertIndexOutOfBoundsException(() -> r.read(arr, 0, 100));\r\n        assertIndexOutOfBoundsException(() -> r.read(arr, Integer.MAX_VALUE, Integer.MAX_VALUE));\r\n        assertEquals(0, r.read(arr, 0, 0));\r\n        assertEquals(0, arr[0]);\r\n        assertEquals(0, arr[1]);\r\n        assertEquals(0, arr[2]);\r\n        r.skip(9);\r\n        assertEquals(-1, r.read(arr, 0, 1));\r\n        r.reset();\r\n        array = new char[30];\r\n        assertEquals(9, r.read(array, 0, 30));\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\text\\StrBuilderTest.java",
  "methodName" : "testAsTokenizer",
  "sourceCode" : "@Test\r\nvoid testAsTokenizer() {\r\n    // from Javadoc\r\n    final StrBuilder b = new StrBuilder();\r\n    b.append(\"a b \");\r\n    final StrTokenizer t = b.asTokenizer();\r\n    final String[] tokens1 = t.getTokenArray();\r\n    assertEquals(2, tokens1.length);\r\n    assertEquals(\"a\", tokens1[0]);\r\n    assertEquals(\"b\", tokens1[1]);\r\n    assertEquals(2, t.size());\r\n    b.append(\"c d \");\r\n    final String[] tokens2 = t.getTokenArray();\r\n    assertEquals(2, tokens2.length);\r\n    assertEquals(\"a\", tokens2[0]);\r\n    assertEquals(\"b\", tokens2[1]);\r\n    assertEquals(2, t.size());\r\n    assertEquals(\"a\", t.next());\r\n    assertEquals(\"b\", t.next());\r\n    t.reset();\r\n    final String[] tokens3 = t.getTokenArray();\r\n    assertEquals(4, tokens3.length);\r\n    assertEquals(\"a\", tokens3[0]);\r\n    assertEquals(\"b\", tokens3[1]);\r\n    assertEquals(\"c\", tokens3[2]);\r\n    assertEquals(\"d\", tokens3[3]);\r\n    assertEquals(4, t.size());\r\n    assertEquals(\"a\", t.next());\r\n    assertEquals(\"b\", t.next());\r\n    assertEquals(\"c\", t.next());\r\n    assertEquals(\"d\", t.next());\r\n    assertEquals(\"a b c d \", t.getContent());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\text\\StrBuilderTest.java",
  "methodName" : "testAsWriter",
  "sourceCode" : "@Test\r\nvoid testAsWriter() throws Exception {\r\n    final StrBuilder sb = new StrBuilder(\"base\");\r\n    try (Writer writer = sb.asWriter()) {\r\n        writer.write('l');\r\n        assertEquals(\"basel\", sb.toString());\r\n        writer.write(new char[] { 'i', 'n' });\r\n        assertEquals(\"baselin\", sb.toString());\r\n        writer.write(new char[] { 'n', 'e', 'r' }, 1, 2);\r\n        assertEquals(\"baseliner\", sb.toString());\r\n        writer.write(\" rout\");\r\n        assertEquals(\"baseliner rout\", sb.toString());\r\n        writer.write(\"ping that server\", 1, 3);\r\n        assertEquals(\"baseliner routing\", sb.toString());\r\n        // no effect\r\n        writer.flush();\r\n        assertEquals(\"baseliner routing\", sb.toString());\r\n        // no effect\r\n        writer.close();\r\n        assertEquals(\"baseliner routing\", sb.toString());\r\n        // works after close\r\n        writer.write(\" hi\");\r\n        assertEquals(\"baseliner routing hi\", sb.toString());\r\n        // mix and match\r\n        sb.setLength(4);\r\n        writer.write('d');\r\n        assertEquals(\"based\", sb.toString());\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\text\\StrBuilderTest.java",
  "methodName" : "testCapacity",
  "sourceCode" : "@Test\r\nvoid testCapacity() {\r\n    final StrBuilder sb = new StrBuilder();\r\n    assertEquals(sb.buffer.length, sb.capacity());\r\n    sb.append(\"HelloWorldHelloWorldHelloWorldHelloWorld\");\r\n    assertEquals(sb.buffer.length, sb.capacity());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\text\\StrBuilderTest.java",
  "methodName" : "testCapacityAndLength",
  "sourceCode" : "@Test\r\nvoid testCapacityAndLength() {\r\n    final StrBuilder sb = new StrBuilder();\r\n    assertEquals(32, sb.capacity());\r\n    assertEquals(0, sb.length());\r\n    assertEquals(0, sb.size());\r\n    assertTrue(sb.isEmpty());\r\n    sb.minimizeCapacity();\r\n    assertEquals(0, sb.capacity());\r\n    assertEquals(0, sb.length());\r\n    assertEquals(0, sb.size());\r\n    assertTrue(sb.isEmpty());\r\n    sb.ensureCapacity(32);\r\n    assertTrue(sb.capacity() >= 32);\r\n    assertEquals(0, sb.length());\r\n    assertEquals(0, sb.size());\r\n    assertTrue(sb.isEmpty());\r\n    sb.append(\"foo\");\r\n    assertTrue(sb.capacity() >= 32);\r\n    assertEquals(3, sb.length());\r\n    assertEquals(3, sb.size());\r\n    assertFalse(sb.isEmpty());\r\n    sb.clear();\r\n    assertTrue(sb.capacity() >= 32);\r\n    assertEquals(0, sb.length());\r\n    assertEquals(0, sb.size());\r\n    assertTrue(sb.isEmpty());\r\n    sb.append(\"123456789012345678901234567890123\");\r\n    assertTrue(sb.capacity() > 32);\r\n    assertEquals(33, sb.length());\r\n    assertEquals(33, sb.size());\r\n    assertFalse(sb.isEmpty());\r\n    sb.ensureCapacity(16);\r\n    assertTrue(sb.capacity() > 16);\r\n    assertEquals(33, sb.length());\r\n    assertEquals(33, sb.size());\r\n    assertFalse(sb.isEmpty());\r\n    sb.minimizeCapacity();\r\n    assertEquals(33, sb.capacity());\r\n    assertEquals(33, sb.length());\r\n    assertEquals(33, sb.size());\r\n    assertFalse(sb.isEmpty());\r\n    assertIndexOutOfBoundsException(() -> sb.setLength(-1), \"setLength(-1) expected StringIndexOutOfBoundsException\");\r\n    sb.setLength(33);\r\n    assertEquals(33, sb.capacity());\r\n    assertEquals(33, sb.length());\r\n    assertEquals(33, sb.size());\r\n    assertFalse(sb.isEmpty());\r\n    sb.setLength(16);\r\n    assertTrue(sb.capacity() >= 16);\r\n    assertEquals(16, sb.length());\r\n    assertEquals(16, sb.size());\r\n    assertEquals(\"1234567890123456\", sb.toString());\r\n    assertFalse(sb.isEmpty());\r\n    sb.setLength(32);\r\n    assertTrue(sb.capacity() >= 32);\r\n    assertEquals(32, sb.length());\r\n    assertEquals(32, sb.size());\r\n    assertEquals(\"1234567890123456\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\", sb.toString());\r\n    assertFalse(sb.isEmpty());\r\n    sb.setLength(0);\r\n    assertTrue(sb.capacity() >= 32);\r\n    assertEquals(0, sb.length());\r\n    assertEquals(0, sb.size());\r\n    assertTrue(sb.isEmpty());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\text\\StrBuilderTest.java",
  "methodName" : "testChaining",
  "sourceCode" : "@Test\r\nvoid testChaining() {\r\n    final StrBuilder sb = new StrBuilder();\r\n    assertSame(sb, sb.setNewLineText(null));\r\n    assertSame(sb, sb.setNullText(null));\r\n    assertSame(sb, sb.setLength(1));\r\n    assertSame(sb, sb.setCharAt(0, 'a'));\r\n    assertSame(sb, sb.ensureCapacity(0));\r\n    assertSame(sb, sb.minimizeCapacity());\r\n    assertSame(sb, sb.clear());\r\n    assertSame(sb, sb.reverse());\r\n    assertSame(sb, sb.trim());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\text\\StrBuilderTest.java",
  "methodName" : "testCharAt",
  "sourceCode" : "@Test\r\nvoid testCharAt() {\r\n    final StrBuilder sb = new StrBuilder();\r\n    assertIndexOutOfBoundsException(() -> sb.charAt(0), \"charAt(0) expected IndexOutOfBoundsException\");\r\n    assertIndexOutOfBoundsException(() -> sb.charAt(-1), \"charAt(-1) expected IndexOutOfBoundsException\");\r\n    sb.append(\"foo\");\r\n    assertEquals('f', sb.charAt(0));\r\n    assertEquals('o', sb.charAt(1));\r\n    assertEquals('o', sb.charAt(2));\r\n    assertIndexOutOfBoundsException(() -> sb.charAt(-1), \"charAt(-1) expected IndexOutOfBoundsException\");\r\n    assertIndexOutOfBoundsException(() -> sb.charAt(3), \"charAt(3) expected IndexOutOfBoundsException\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\text\\StrBuilderTest.java",
  "methodName" : "testClear",
  "sourceCode" : "@Test\r\nvoid testClear() {\r\n    final StrBuilder sb = new StrBuilder();\r\n    sb.append(\"Hello\");\r\n    sb.clear();\r\n    assertEquals(0, sb.length());\r\n    assertTrue(sb.buffer.length >= 5);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\text\\StrBuilderTest.java",
  "methodName" : "testConstructors",
  "sourceCode" : "@Test\r\nvoid testConstructors() {\r\n    final StrBuilder sb0 = new StrBuilder();\r\n    assertEquals(32, sb0.capacity());\r\n    assertEquals(0, sb0.length());\r\n    assertEquals(0, sb0.size());\r\n    final StrBuilder sb1 = new StrBuilder(32);\r\n    assertEquals(32, sb1.capacity());\r\n    assertEquals(0, sb1.length());\r\n    assertEquals(0, sb1.size());\r\n    final StrBuilder sb2 = new StrBuilder(0);\r\n    assertEquals(32, sb2.capacity());\r\n    assertEquals(0, sb2.length());\r\n    assertEquals(0, sb2.size());\r\n    final StrBuilder sb3 = new StrBuilder(-1);\r\n    assertEquals(32, sb3.capacity());\r\n    assertEquals(0, sb3.length());\r\n    assertEquals(0, sb3.size());\r\n    final StrBuilder sb4 = new StrBuilder(1);\r\n    assertEquals(1, sb4.capacity());\r\n    assertEquals(0, sb4.length());\r\n    assertEquals(0, sb4.size());\r\n    final StrBuilder sb5 = new StrBuilder(null);\r\n    assertEquals(32, sb5.capacity());\r\n    assertEquals(0, sb5.length());\r\n    assertEquals(0, sb5.size());\r\n    final StrBuilder sb6 = new StrBuilder(\"\");\r\n    assertEquals(32, sb6.capacity());\r\n    assertEquals(0, sb6.length());\r\n    assertEquals(0, sb6.size());\r\n    final StrBuilder sb7 = new StrBuilder(\"foo\");\r\n    assertEquals(35, sb7.capacity());\r\n    assertEquals(3, sb7.length());\r\n    assertEquals(3, sb7.size());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\text\\StrBuilderTest.java",
  "methodName" : "testContains_char",
  "sourceCode" : "@Test\r\nvoid testContains_char() {\r\n    final StrBuilder sb = new StrBuilder(\"abcdefghijklmnopqrstuvwxyz\");\r\n    assertTrue(sb.contains('a'));\r\n    assertTrue(sb.contains('o'));\r\n    assertTrue(sb.contains('z'));\r\n    assertFalse(sb.contains('1'));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\text\\StrBuilderTest.java",
  "methodName" : "testContains_String",
  "sourceCode" : "@Test\r\nvoid testContains_String() {\r\n    final StrBuilder sb = new StrBuilder(\"abcdefghijklmnopqrstuvwxyz\");\r\n    assertTrue(sb.contains(\"a\"));\r\n    assertTrue(sb.contains(\"pq\"));\r\n    assertTrue(sb.contains(\"z\"));\r\n    assertFalse(sb.contains(\"zyx\"));\r\n    assertFalse(sb.contains((String) null));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\text\\StrBuilderTest.java",
  "methodName" : "testContains_StrMatcher",
  "sourceCode" : "@Test\r\nvoid testContains_StrMatcher() {\r\n    StrBuilder sb = new StrBuilder(\"abcdefghijklmnopqrstuvwxyz\");\r\n    assertTrue(sb.contains(StrMatcher.charMatcher('a')));\r\n    assertTrue(sb.contains(StrMatcher.stringMatcher(\"pq\")));\r\n    assertTrue(sb.contains(StrMatcher.charMatcher('z')));\r\n    assertFalse(sb.contains(StrMatcher.stringMatcher(\"zy\")));\r\n    assertFalse(sb.contains((StrMatcher) null));\r\n    sb = new StrBuilder();\r\n    assertFalse(sb.contains(A_NUMBER_MATCHER));\r\n    sb.append(\"B A1 C\");\r\n    assertTrue(sb.contains(A_NUMBER_MATCHER));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\text\\StrBuilderTest.java",
  "methodName" : "testDeleteAll_char",
  "sourceCode" : "@Test\r\nvoid testDeleteAll_char() {\r\n    StrBuilder sb = new StrBuilder(\"abcbccba\");\r\n    sb.deleteAll('X');\r\n    assertEquals(\"abcbccba\", sb.toString());\r\n    sb.deleteAll('a');\r\n    assertEquals(\"bcbccb\", sb.toString());\r\n    sb.deleteAll('c');\r\n    assertEquals(\"bbb\", sb.toString());\r\n    sb.deleteAll('b');\r\n    assertEquals(\"\", sb.toString());\r\n    sb = new StrBuilder(\"\");\r\n    sb.deleteAll('b');\r\n    assertEquals(\"\", sb.toString());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\text\\StrBuilderTest.java",
  "methodName" : "testDeleteAll_String",
  "sourceCode" : "@Test\r\nvoid testDeleteAll_String() {\r\n    StrBuilder sb = new StrBuilder(\"abcbccba\");\r\n    sb.deleteAll((String) null);\r\n    assertEquals(\"abcbccba\", sb.toString());\r\n    sb.deleteAll(\"\");\r\n    assertEquals(\"abcbccba\", sb.toString());\r\n    sb.deleteAll(\"X\");\r\n    assertEquals(\"abcbccba\", sb.toString());\r\n    sb.deleteAll(\"a\");\r\n    assertEquals(\"bcbccb\", sb.toString());\r\n    sb.deleteAll(\"c\");\r\n    assertEquals(\"bbb\", sb.toString());\r\n    sb.deleteAll(\"b\");\r\n    assertEquals(\"\", sb.toString());\r\n    sb = new StrBuilder(\"abcbccba\");\r\n    sb.deleteAll(\"bc\");\r\n    assertEquals(\"acba\", sb.toString());\r\n    sb = new StrBuilder(\"\");\r\n    sb.deleteAll(\"bc\");\r\n    assertEquals(\"\", sb.toString());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\text\\StrBuilderTest.java",
  "methodName" : "testDeleteAll_StrMatcher",
  "sourceCode" : "@Test\r\nvoid testDeleteAll_StrMatcher() {\r\n    StrBuilder sb = new StrBuilder(\"A0xA1A2yA3\");\r\n    sb.deleteAll((StrMatcher) null);\r\n    assertEquals(\"A0xA1A2yA3\", sb.toString());\r\n    sb.deleteAll(A_NUMBER_MATCHER);\r\n    assertEquals(\"xy\", sb.toString());\r\n    sb = new StrBuilder(\"Ax1\");\r\n    sb.deleteAll(A_NUMBER_MATCHER);\r\n    assertEquals(\"Ax1\", sb.toString());\r\n    sb = new StrBuilder(\"\");\r\n    sb.deleteAll(A_NUMBER_MATCHER);\r\n    assertEquals(\"\", sb.toString());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\text\\StrBuilderTest.java",
  "methodName" : "testDeleteCharAt",
  "sourceCode" : "@Test\r\nvoid testDeleteCharAt() {\r\n    final StrBuilder sb = new StrBuilder(\"abc\");\r\n    sb.deleteCharAt(0);\r\n    assertEquals(\"bc\", sb.toString());\r\n    assertIndexOutOfBoundsException(() -> sb.deleteCharAt(1000));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\text\\StrBuilderTest.java",
  "methodName" : "testDeleteFirst_char",
  "sourceCode" : "@Test\r\nvoid testDeleteFirst_char() {\r\n    StrBuilder sb = new StrBuilder(\"abcba\");\r\n    sb.deleteFirst('X');\r\n    assertEquals(\"abcba\", sb.toString());\r\n    sb.deleteFirst('a');\r\n    assertEquals(\"bcba\", sb.toString());\r\n    sb.deleteFirst('c');\r\n    assertEquals(\"bba\", sb.toString());\r\n    sb.deleteFirst('b');\r\n    assertEquals(\"ba\", sb.toString());\r\n    sb = new StrBuilder(\"\");\r\n    sb.deleteFirst('b');\r\n    assertEquals(\"\", sb.toString());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\text\\StrBuilderTest.java",
  "methodName" : "testDeleteFirst_String",
  "sourceCode" : "@Test\r\nvoid testDeleteFirst_String() {\r\n    StrBuilder sb = new StrBuilder(\"abcbccba\");\r\n    sb.deleteFirst((String) null);\r\n    assertEquals(\"abcbccba\", sb.toString());\r\n    sb.deleteFirst(\"\");\r\n    assertEquals(\"abcbccba\", sb.toString());\r\n    sb.deleteFirst(\"X\");\r\n    assertEquals(\"abcbccba\", sb.toString());\r\n    sb.deleteFirst(\"a\");\r\n    assertEquals(\"bcbccba\", sb.toString());\r\n    sb.deleteFirst(\"c\");\r\n    assertEquals(\"bbccba\", sb.toString());\r\n    sb.deleteFirst(\"b\");\r\n    assertEquals(\"bccba\", sb.toString());\r\n    sb = new StrBuilder(\"abcbccba\");\r\n    sb.deleteFirst(\"bc\");\r\n    assertEquals(\"abccba\", sb.toString());\r\n    sb = new StrBuilder(\"\");\r\n    sb.deleteFirst(\"bc\");\r\n    assertEquals(\"\", sb.toString());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\text\\StrBuilderTest.java",
  "methodName" : "testDeleteFirst_StrMatcher",
  "sourceCode" : "@Test\r\nvoid testDeleteFirst_StrMatcher() {\r\n    StrBuilder sb = new StrBuilder(\"A0xA1A2yA3\");\r\n    sb.deleteFirst((StrMatcher) null);\r\n    assertEquals(\"A0xA1A2yA3\", sb.toString());\r\n    sb.deleteFirst(A_NUMBER_MATCHER);\r\n    assertEquals(\"xA1A2yA3\", sb.toString());\r\n    sb = new StrBuilder(\"Ax1\");\r\n    sb.deleteFirst(A_NUMBER_MATCHER);\r\n    assertEquals(\"Ax1\", sb.toString());\r\n    sb = new StrBuilder(\"\");\r\n    sb.deleteFirst(A_NUMBER_MATCHER);\r\n    assertEquals(\"\", sb.toString());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\text\\StrBuilderTest.java",
  "methodName" : "testDeleteIntInt",
  "sourceCode" : "@Test\r\nvoid testDeleteIntInt() {\r\n    final StrBuilder sb = new StrBuilder(\"abc\");\r\n    sb.delete(0, 1);\r\n    assertEquals(\"bc\", sb.toString());\r\n    sb.delete(1, 2);\r\n    assertEquals(\"b\", sb.toString());\r\n    sb.delete(0, 1);\r\n    assertEquals(\"\", sb.toString());\r\n    sb.delete(0, 1000);\r\n    assertEquals(\"\", sb.toString());\r\n    assertIndexOutOfBoundsException(() -> sb.delete(1, 2));\r\n    assertIndexOutOfBoundsException(() -> sb.delete(-1, 1));\r\n    assertIndexOutOfBoundsException(() -> new StrBuilder(\"anything\").delete(2, 1));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\text\\StrBuilderTest.java",
  "methodName" : "testEndsWith",
  "sourceCode" : "@Test\r\nvoid testEndsWith() {\r\n    final StrBuilder sb = new StrBuilder();\r\n    assertFalse(sb.endsWith(\"a\"));\r\n    assertFalse(sb.endsWith(\"c\"));\r\n    assertTrue(sb.endsWith(\"\"));\r\n    assertFalse(sb.endsWith(null));\r\n    sb.append(\"abc\");\r\n    assertTrue(sb.endsWith(\"c\"));\r\n    assertTrue(sb.endsWith(\"bc\"));\r\n    assertTrue(sb.endsWith(\"abc\"));\r\n    assertFalse(sb.endsWith(\"cba\"));\r\n    assertFalse(sb.endsWith(\"abcd\"));\r\n    assertFalse(sb.endsWith(\" abc\"));\r\n    assertFalse(sb.endsWith(\"abc \"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\text\\StrBuilderTest.java",
  "methodName" : "testEnsureCapacity",
  "sourceCode" : "@Test\r\nvoid testEnsureCapacity() {\r\n    final StrBuilder sb = new StrBuilder();\r\n    sb.ensureCapacity(2);\r\n    assertTrue(sb.capacity() >= 2);\r\n    sb.ensureCapacity(-1);\r\n    assertTrue(sb.capacity() >= 0);\r\n    sb.append(\"HelloWorld\");\r\n    sb.ensureCapacity(40);\r\n    assertTrue(sb.capacity() >= 40);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\text\\StrBuilderTest.java",
  "methodName" : "testEquals",
  "sourceCode" : "@Test\r\nvoid testEquals() {\r\n    final StrBuilder sb1 = new StrBuilder();\r\n    final StrBuilder sb2 = new StrBuilder();\r\n    assertTrue(sb1.equals(sb2));\r\n    assertTrue(sb1.equals(sb1));\r\n    assertTrue(sb2.equals(sb2));\r\n    assertEquals(sb1, sb2);\r\n    sb1.append(\"abc\");\r\n    assertFalse(sb1.equals(sb2));\r\n    assertNotEquals(sb1, sb2);\r\n    sb2.append(\"ABC\");\r\n    assertFalse(sb1.equals(sb2));\r\n    assertNotEquals(sb1, sb2);\r\n    sb2.clear().append(\"abc\");\r\n    assertTrue(sb1.equals(sb2));\r\n    assertEquals(sb1, sb2);\r\n    assertNotEquals(sb1, Integer.valueOf(1));\r\n    assertNotEquals(\"abc\", sb1);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\text\\StrBuilderTest.java",
  "methodName" : "testEqualsIgnoreCase",
  "sourceCode" : "@Test\r\nvoid testEqualsIgnoreCase() {\r\n    final StrBuilder sb1 = new StrBuilder();\r\n    final StrBuilder sb2 = new StrBuilder();\r\n    assertTrue(sb1.equalsIgnoreCase(sb1));\r\n    assertTrue(sb1.equalsIgnoreCase(sb2));\r\n    assertTrue(sb2.equalsIgnoreCase(sb2));\r\n    sb1.append(\"abc\");\r\n    assertFalse(sb1.equalsIgnoreCase(sb2));\r\n    sb2.append(\"ABC\");\r\n    assertTrue(sb1.equalsIgnoreCase(sb2));\r\n    sb2.clear().append(\"abc\");\r\n    assertTrue(sb1.equalsIgnoreCase(sb2));\r\n    assertTrue(sb1.equalsIgnoreCase(sb1));\r\n    assertTrue(sb2.equalsIgnoreCase(sb2));\r\n    sb2.clear().append(\"aBc\");\r\n    assertTrue(sb1.equalsIgnoreCase(sb2));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\text\\StrBuilderTest.java",
  "methodName" : "testGetChars",
  "sourceCode" : "@Test\r\nvoid testGetChars() {\r\n    final StrBuilder sb = new StrBuilder();\r\n    char[] input = new char[10];\r\n    char[] a = sb.getChars(input);\r\n    assertSame(input, a);\r\n    assertArrayEquals(new char[10], a);\r\n    sb.append(\"junit\");\r\n    a = sb.getChars(input);\r\n    assertSame(input, a);\r\n    assertArrayEquals(new char[] { 'j', 'u', 'n', 'i', 't', 0, 0, 0, 0, 0 }, a);\r\n    a = sb.getChars(null);\r\n    assertNotSame(input, a);\r\n    assertEquals(5, a.length);\r\n    assertArrayEquals(\"junit\".toCharArray(), a);\r\n    input = new char[5];\r\n    a = sb.getChars(input);\r\n    assertSame(input, a);\r\n    input = new char[4];\r\n    a = sb.getChars(input);\r\n    assertNotSame(input, a);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\text\\StrBuilderTest.java",
  "methodName" : "testGetCharsIntIntCharArrayInt",
  "sourceCode" : "@Test\r\nvoid testGetCharsIntIntCharArrayInt() {\r\n    final StrBuilder sb = new StrBuilder();\r\n    sb.append(\"junit\");\r\n    final char[] a = new char[5];\r\n    sb.getChars(0, 5, a, 0);\r\n    assertArrayEquals(new char[] { 'j', 'u', 'n', 'i', 't' }, a);\r\n    final char[] b = new char[5];\r\n    sb.getChars(0, 2, b, 3);\r\n    assertArrayEquals(new char[] { 0, 0, 0, 'j', 'u' }, b);\r\n    assertIndexOutOfBoundsException(() -> sb.getChars(-1, 0, b, 0));\r\n    assertIndexOutOfBoundsException(() -> sb.getChars(0, -1, b, 0));\r\n    assertIndexOutOfBoundsException(() -> sb.getChars(0, 20, b, 0));\r\n    assertIndexOutOfBoundsException(() -> sb.getChars(4, 2, b, 0));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\text\\StrBuilderTest.java",
  "methodName" : "testGetSetNewLineText",
  "sourceCode" : "@Test\r\nvoid testGetSetNewLineText() {\r\n    final StrBuilder sb = new StrBuilder();\r\n    assertNull(sb.getNewLineText());\r\n    sb.setNewLineText(\"#\");\r\n    assertEquals(\"#\", sb.getNewLineText());\r\n    sb.setNewLineText(\"\");\r\n    assertEquals(\"\", sb.getNewLineText());\r\n    sb.setNewLineText(null);\r\n    assertNull(sb.getNewLineText());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\text\\StrBuilderTest.java",
  "methodName" : "testGetSetNullText",
  "sourceCode" : "@Test\r\nvoid testGetSetNullText() {\r\n    final StrBuilder sb = new StrBuilder();\r\n    assertNull(sb.getNullText());\r\n    sb.setNullText(\"null\");\r\n    assertEquals(\"null\", sb.getNullText());\r\n    sb.setNullText(\"\");\r\n    assertNull(sb.getNullText());\r\n    sb.setNullText(\"NULL\");\r\n    assertEquals(\"NULL\", sb.getNullText());\r\n    sb.setNullText(null);\r\n    assertNull(sb.getNullText());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\text\\StrBuilderTest.java",
  "methodName" : "testHashCode",
  "sourceCode" : "@Test\r\nvoid testHashCode() {\r\n    final StrBuilder sb = new StrBuilder();\r\n    final int hc1a = sb.hashCode();\r\n    final int hc1b = sb.hashCode();\r\n    assertEquals(0, hc1a);\r\n    assertEquals(hc1a, hc1b);\r\n    sb.append(\"abc\");\r\n    final int hc2a = sb.hashCode();\r\n    final int hc2b = sb.hashCode();\r\n    assertTrue(hc2a != 0);\r\n    assertEquals(hc2a, hc2b);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\text\\StrBuilderTest.java",
  "methodName" : "testIndexOf_char",
  "sourceCode" : "@Test\r\nvoid testIndexOf_char() {\r\n    final StrBuilder sb = new StrBuilder(\"abab\");\r\n    assertEquals(0, sb.indexOf('a'));\r\n    // should work like String#indexOf\r\n    assertEquals(\"abab\".indexOf('a'), sb.indexOf('a'));\r\n    assertEquals(1, sb.indexOf('b'));\r\n    assertEquals(\"abab\".indexOf('b'), sb.indexOf('b'));\r\n    assertEquals(-1, sb.indexOf('z'));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\text\\StrBuilderTest.java",
  "methodName" : "testIndexOf_char_int",
  "sourceCode" : "@Test\r\nvoid testIndexOf_char_int() {\r\n    StrBuilder sb = new StrBuilder(\"abab\");\r\n    assertEquals(0, sb.indexOf('a', -1));\r\n    assertEquals(0, sb.indexOf('a', 0));\r\n    assertEquals(2, sb.indexOf('a', 1));\r\n    assertEquals(-1, sb.indexOf('a', 4));\r\n    assertEquals(-1, sb.indexOf('a', 5));\r\n    // should work like String#indexOf\r\n    assertEquals(\"abab\".indexOf('a', 1), sb.indexOf('a', 1));\r\n    assertEquals(3, sb.indexOf('b', 2));\r\n    assertEquals(\"abab\".indexOf('b', 2), sb.indexOf('b', 2));\r\n    assertEquals(-1, sb.indexOf('z', 2));\r\n    sb = new StrBuilder(\"xyzabc\");\r\n    assertEquals(2, sb.indexOf('z', 0));\r\n    assertEquals(-1, sb.indexOf('z', 3));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\text\\StrBuilderTest.java",
  "methodName" : "testIndexOf_String",
  "sourceCode" : "@Test\r\nvoid testIndexOf_String() {\r\n    final StrBuilder sb = new StrBuilder(\"abab\");\r\n    assertEquals(0, sb.indexOf(\"a\"));\r\n    //should work like String#indexOf\r\n    assertEquals(\"abab\".indexOf(\"a\"), sb.indexOf(\"a\"));\r\n    assertEquals(0, sb.indexOf(\"ab\"));\r\n    //should work like String#indexOf\r\n    assertEquals(\"abab\".indexOf(\"ab\"), sb.indexOf(\"ab\"));\r\n    assertEquals(1, sb.indexOf(\"b\"));\r\n    assertEquals(\"abab\".indexOf(\"b\"), sb.indexOf(\"b\"));\r\n    assertEquals(1, sb.indexOf(\"ba\"));\r\n    assertEquals(\"abab\".indexOf(\"ba\"), sb.indexOf(\"ba\"));\r\n    assertEquals(-1, sb.indexOf(\"z\"));\r\n    assertEquals(-1, sb.indexOf((String) null));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\text\\StrBuilderTest.java",
  "methodName" : "testIndexOf_String_int",
  "sourceCode" : "@Test\r\nvoid testIndexOf_String_int() {\r\n    StrBuilder sb = new StrBuilder(\"abab\");\r\n    assertEquals(0, sb.indexOf(\"a\", -1));\r\n    assertEquals(0, sb.indexOf(\"a\", 0));\r\n    assertEquals(2, sb.indexOf(\"a\", 1));\r\n    assertEquals(2, sb.indexOf(\"a\", 2));\r\n    assertEquals(-1, sb.indexOf(\"a\", 3));\r\n    assertEquals(-1, sb.indexOf(\"a\", 4));\r\n    assertEquals(-1, sb.indexOf(\"a\", 5));\r\n    assertEquals(-1, sb.indexOf(\"abcdef\", 0));\r\n    assertEquals(0, sb.indexOf(\"\", 0));\r\n    assertEquals(1, sb.indexOf(\"\", 1));\r\n    //should work like String#indexOf\r\n    assertEquals(\"abab\".indexOf(\"a\", 1), sb.indexOf(\"a\", 1));\r\n    assertEquals(2, sb.indexOf(\"ab\", 1));\r\n    //should work like String#indexOf\r\n    assertEquals(\"abab\".indexOf(\"ab\", 1), sb.indexOf(\"ab\", 1));\r\n    assertEquals(3, sb.indexOf(\"b\", 2));\r\n    assertEquals(\"abab\".indexOf(\"b\", 2), sb.indexOf(\"b\", 2));\r\n    assertEquals(1, sb.indexOf(\"ba\", 1));\r\n    assertEquals(\"abab\".indexOf(\"ba\", 2), sb.indexOf(\"ba\", 2));\r\n    assertEquals(-1, sb.indexOf(\"z\", 2));\r\n    sb = new StrBuilder(\"xyzabc\");\r\n    assertEquals(2, sb.indexOf(\"za\", 0));\r\n    assertEquals(-1, sb.indexOf(\"za\", 3));\r\n    assertEquals(-1, sb.indexOf((String) null, 2));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\text\\StrBuilderTest.java",
  "methodName" : "testIndexOf_StrMatcher",
  "sourceCode" : "@Test\r\nvoid testIndexOf_StrMatcher() {\r\n    final StrBuilder sb = new StrBuilder();\r\n    assertEquals(-1, sb.indexOf((StrMatcher) null));\r\n    assertEquals(-1, sb.indexOf(StrMatcher.charMatcher('a')));\r\n    sb.append(\"ab bd\");\r\n    assertEquals(0, sb.indexOf(StrMatcher.charMatcher('a')));\r\n    assertEquals(1, sb.indexOf(StrMatcher.charMatcher('b')));\r\n    assertEquals(2, sb.indexOf(StrMatcher.spaceMatcher()));\r\n    assertEquals(4, sb.indexOf(StrMatcher.charMatcher('d')));\r\n    assertEquals(-1, sb.indexOf(StrMatcher.noneMatcher()));\r\n    assertEquals(-1, sb.indexOf((StrMatcher) null));\r\n    sb.append(\" A1 junction\");\r\n    assertEquals(6, sb.indexOf(A_NUMBER_MATCHER));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\text\\StrBuilderTest.java",
  "methodName" : "testIndexOf_StrMatcher_int",
  "sourceCode" : "@Test\r\nvoid testIndexOf_StrMatcher_int() {\r\n    final StrBuilder sb = new StrBuilder();\r\n    assertEquals(-1, sb.indexOf((StrMatcher) null, 2));\r\n    assertEquals(-1, sb.indexOf(StrMatcher.charMatcher('a'), 2));\r\n    assertEquals(-1, sb.indexOf(StrMatcher.charMatcher('a'), 0));\r\n    sb.append(\"ab bd\");\r\n    assertEquals(0, sb.indexOf(StrMatcher.charMatcher('a'), -2));\r\n    assertEquals(0, sb.indexOf(StrMatcher.charMatcher('a'), 0));\r\n    assertEquals(-1, sb.indexOf(StrMatcher.charMatcher('a'), 2));\r\n    assertEquals(-1, sb.indexOf(StrMatcher.charMatcher('a'), 20));\r\n    assertEquals(1, sb.indexOf(StrMatcher.charMatcher('b'), -1));\r\n    assertEquals(1, sb.indexOf(StrMatcher.charMatcher('b'), 0));\r\n    assertEquals(1, sb.indexOf(StrMatcher.charMatcher('b'), 1));\r\n    assertEquals(3, sb.indexOf(StrMatcher.charMatcher('b'), 2));\r\n    assertEquals(3, sb.indexOf(StrMatcher.charMatcher('b'), 3));\r\n    assertEquals(-1, sb.indexOf(StrMatcher.charMatcher('b'), 4));\r\n    assertEquals(-1, sb.indexOf(StrMatcher.charMatcher('b'), 5));\r\n    assertEquals(-1, sb.indexOf(StrMatcher.charMatcher('b'), 6));\r\n    assertEquals(2, sb.indexOf(StrMatcher.spaceMatcher(), -2));\r\n    assertEquals(2, sb.indexOf(StrMatcher.spaceMatcher(), 0));\r\n    assertEquals(2, sb.indexOf(StrMatcher.spaceMatcher(), 2));\r\n    assertEquals(-1, sb.indexOf(StrMatcher.spaceMatcher(), 4));\r\n    assertEquals(-1, sb.indexOf(StrMatcher.spaceMatcher(), 20));\r\n    assertEquals(-1, sb.indexOf(StrMatcher.noneMatcher(), 0));\r\n    assertEquals(-1, sb.indexOf((StrMatcher) null, 0));\r\n    sb.append(\" A1 junction with A2\");\r\n    assertEquals(6, sb.indexOf(A_NUMBER_MATCHER, 5));\r\n    assertEquals(6, sb.indexOf(A_NUMBER_MATCHER, 6));\r\n    assertEquals(23, sb.indexOf(A_NUMBER_MATCHER, 7));\r\n    assertEquals(23, sb.indexOf(A_NUMBER_MATCHER, 22));\r\n    assertEquals(23, sb.indexOf(A_NUMBER_MATCHER, 23));\r\n    assertEquals(-1, sb.indexOf(A_NUMBER_MATCHER, 24));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\text\\StrBuilderTest.java",
  "methodName" : "testIndexOfLang294",
  "sourceCode" : "@Test\r\nvoid testIndexOfLang294() {\r\n    final StrBuilder sb = new StrBuilder(\"onetwothree\");\r\n    sb.deleteFirst(\"three\");\r\n    assertEquals(-1, sb.indexOf(\"three\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\text\\StrBuilderTest.java",
  "methodName" : "testIsEmpty",
  "sourceCode" : "@Test\r\nvoid testIsEmpty() {\r\n    final StrBuilder sb = new StrBuilder();\r\n    assertTrue(sb.isEmpty());\r\n    sb.append(\"Hello\");\r\n    assertFalse(sb.isEmpty());\r\n    sb.clear();\r\n    assertTrue(sb.isEmpty());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\text\\StrBuilderTest.java",
  "methodName" : "testLang294",
  "sourceCode" : "@Test\r\nvoid testLang294() {\r\n    final StrBuilder sb = new StrBuilder(\"\\n%BLAH%\\nDo more stuff\\neven more stuff\\n%BLAH%\\n\");\r\n    sb.deleteAll(\"\\n%BLAH%\");\r\n    assertEquals(\"\\nDo more stuff\\neven more stuff\\n\", sb.toString());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\text\\StrBuilderTest.java",
  "methodName" : "testLang295",
  "sourceCode" : "@Test\r\nvoid testLang295() {\r\n    final StrBuilder sb = new StrBuilder(\"onetwothree\");\r\n    sb.deleteFirst(\"three\");\r\n    assertFalse(sb.contains('h'), \"The contains(char) method is looking beyond the end of the string\");\r\n    assertEquals(-1, sb.indexOf('h'), \"The indexOf(char) method is looking beyond the end of the string\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\text\\StrBuilderTest.java",
  "methodName" : "testLang412Left",
  "sourceCode" : "@Test\r\nvoid testLang412Left() {\r\n    final StrBuilder sb = new StrBuilder();\r\n    sb.appendFixedWidthPadLeft(null, 10, '*');\r\n    assertEquals(\"**********\", sb.toString(), \"Failed to invoke appendFixedWidthPadLeft correctly\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\text\\StrBuilderTest.java",
  "methodName" : "testLang412Right",
  "sourceCode" : "@Test\r\nvoid testLang412Right() {\r\n    final StrBuilder sb = new StrBuilder();\r\n    sb.appendFixedWidthPadRight(null, 10, '*');\r\n    assertEquals(\"**********\", sb.toString(), \"Failed to invoke appendFixedWidthPadRight correctly\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\text\\StrBuilderTest.java",
  "methodName" : "testLastIndexOf_char",
  "sourceCode" : "@Test\r\nvoid testLastIndexOf_char() {\r\n    final StrBuilder sb = new StrBuilder(\"abab\");\r\n    assertEquals(2, sb.lastIndexOf('a'));\r\n    //should work like String#lastIndexOf\r\n    assertEquals(\"abab\".lastIndexOf('a'), sb.lastIndexOf('a'));\r\n    assertEquals(3, sb.lastIndexOf('b'));\r\n    assertEquals(\"abab\".lastIndexOf('b'), sb.lastIndexOf('b'));\r\n    assertEquals(-1, sb.lastIndexOf('z'));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\text\\StrBuilderTest.java",
  "methodName" : "testLastIndexOf_char_int",
  "sourceCode" : "@Test\r\nvoid testLastIndexOf_char_int() {\r\n    StrBuilder sb = new StrBuilder(\"abab\");\r\n    assertEquals(-1, sb.lastIndexOf('a', -1));\r\n    assertEquals(0, sb.lastIndexOf('a', 0));\r\n    assertEquals(0, sb.lastIndexOf('a', 1));\r\n    // should work like String#lastIndexOf\r\n    assertEquals(\"abab\".lastIndexOf('a', 1), sb.lastIndexOf('a', 1));\r\n    assertEquals(1, sb.lastIndexOf('b', 2));\r\n    assertEquals(\"abab\".lastIndexOf('b', 2), sb.lastIndexOf('b', 2));\r\n    assertEquals(-1, sb.lastIndexOf('z', 2));\r\n    sb = new StrBuilder(\"xyzabc\");\r\n    assertEquals(2, sb.lastIndexOf('z', sb.length()));\r\n    assertEquals(-1, sb.lastIndexOf('z', 1));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\text\\StrBuilderTest.java",
  "methodName" : "testLastIndexOf_String",
  "sourceCode" : "@Test\r\nvoid testLastIndexOf_String() {\r\n    final StrBuilder sb = new StrBuilder(\"abab\");\r\n    assertEquals(2, sb.lastIndexOf(\"a\"));\r\n    //should work like String#lastIndexOf\r\n    assertEquals(\"abab\".lastIndexOf(\"a\"), sb.lastIndexOf(\"a\"));\r\n    assertEquals(2, sb.lastIndexOf(\"ab\"));\r\n    //should work like String#lastIndexOf\r\n    assertEquals(\"abab\".lastIndexOf(\"ab\"), sb.lastIndexOf(\"ab\"));\r\n    assertEquals(3, sb.lastIndexOf(\"b\"));\r\n    assertEquals(\"abab\".lastIndexOf(\"b\"), sb.lastIndexOf(\"b\"));\r\n    assertEquals(1, sb.lastIndexOf(\"ba\"));\r\n    assertEquals(\"abab\".lastIndexOf(\"ba\"), sb.lastIndexOf(\"ba\"));\r\n    assertEquals(-1, sb.lastIndexOf(\"z\"));\r\n    assertEquals(-1, sb.lastIndexOf((String) null));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\text\\StrBuilderTest.java",
  "methodName" : "testLastIndexOf_String_int",
  "sourceCode" : "@Test\r\nvoid testLastIndexOf_String_int() {\r\n    StrBuilder sb = new StrBuilder(\"abab\");\r\n    assertEquals(-1, sb.lastIndexOf(\"a\", -1));\r\n    assertEquals(0, sb.lastIndexOf(\"a\", 0));\r\n    assertEquals(0, sb.lastIndexOf(\"a\", 1));\r\n    assertEquals(2, sb.lastIndexOf(\"a\", 2));\r\n    assertEquals(2, sb.lastIndexOf(\"a\", 3));\r\n    assertEquals(2, sb.lastIndexOf(\"a\", 4));\r\n    assertEquals(2, sb.lastIndexOf(\"a\", 5));\r\n    assertEquals(-1, sb.lastIndexOf(\"abcdef\", 3));\r\n    assertEquals(\"abab\".lastIndexOf(\"\", 3), sb.lastIndexOf(\"\", 3));\r\n    assertEquals(\"abab\".lastIndexOf(\"\", 1), sb.lastIndexOf(\"\", 1));\r\n    //should work like String#lastIndexOf\r\n    assertEquals(\"abab\".lastIndexOf(\"a\", 1), sb.lastIndexOf(\"a\", 1));\r\n    assertEquals(0, sb.lastIndexOf(\"ab\", 1));\r\n    //should work like String#lastIndexOf\r\n    assertEquals(\"abab\".lastIndexOf(\"ab\", 1), sb.lastIndexOf(\"ab\", 1));\r\n    assertEquals(1, sb.lastIndexOf(\"b\", 2));\r\n    assertEquals(\"abab\".lastIndexOf(\"b\", 2), sb.lastIndexOf(\"b\", 2));\r\n    assertEquals(1, sb.lastIndexOf(\"ba\", 2));\r\n    assertEquals(\"abab\".lastIndexOf(\"ba\", 2), sb.lastIndexOf(\"ba\", 2));\r\n    assertEquals(-1, sb.lastIndexOf(\"z\", 2));\r\n    sb = new StrBuilder(\"xyzabc\");\r\n    assertEquals(2, sb.lastIndexOf(\"za\", sb.length()));\r\n    assertEquals(-1, sb.lastIndexOf(\"za\", 1));\r\n    assertEquals(-1, sb.lastIndexOf((String) null, 2));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\text\\StrBuilderTest.java",
  "methodName" : "testLastIndexOf_StrMatcher",
  "sourceCode" : "@Test\r\nvoid testLastIndexOf_StrMatcher() {\r\n    final StrBuilder sb = new StrBuilder();\r\n    assertEquals(-1, sb.lastIndexOf((StrMatcher) null));\r\n    assertEquals(-1, sb.lastIndexOf(StrMatcher.charMatcher('a')));\r\n    sb.append(\"ab bd\");\r\n    assertEquals(0, sb.lastIndexOf(StrMatcher.charMatcher('a')));\r\n    assertEquals(3, sb.lastIndexOf(StrMatcher.charMatcher('b')));\r\n    assertEquals(2, sb.lastIndexOf(StrMatcher.spaceMatcher()));\r\n    assertEquals(4, sb.lastIndexOf(StrMatcher.charMatcher('d')));\r\n    assertEquals(-1, sb.lastIndexOf(StrMatcher.noneMatcher()));\r\n    assertEquals(-1, sb.lastIndexOf((StrMatcher) null));\r\n    sb.append(\" A1 junction\");\r\n    assertEquals(6, sb.lastIndexOf(A_NUMBER_MATCHER));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\text\\StrBuilderTest.java",
  "methodName" : "testLastIndexOf_StrMatcher_int",
  "sourceCode" : "@Test\r\nvoid testLastIndexOf_StrMatcher_int() {\r\n    final StrBuilder sb = new StrBuilder();\r\n    assertEquals(-1, sb.lastIndexOf((StrMatcher) null, 2));\r\n    assertEquals(-1, sb.lastIndexOf(StrMatcher.charMatcher('a'), 2));\r\n    assertEquals(-1, sb.lastIndexOf(StrMatcher.charMatcher('a'), 0));\r\n    assertEquals(-1, sb.lastIndexOf(StrMatcher.charMatcher('a'), -1));\r\n    sb.append(\"ab bd\");\r\n    assertEquals(-1, sb.lastIndexOf(StrMatcher.charMatcher('a'), -2));\r\n    assertEquals(0, sb.lastIndexOf(StrMatcher.charMatcher('a'), 0));\r\n    assertEquals(0, sb.lastIndexOf(StrMatcher.charMatcher('a'), 2));\r\n    assertEquals(0, sb.lastIndexOf(StrMatcher.charMatcher('a'), 20));\r\n    assertEquals(-1, sb.lastIndexOf(StrMatcher.charMatcher('b'), -1));\r\n    assertEquals(-1, sb.lastIndexOf(StrMatcher.charMatcher('b'), 0));\r\n    assertEquals(1, sb.lastIndexOf(StrMatcher.charMatcher('b'), 1));\r\n    assertEquals(1, sb.lastIndexOf(StrMatcher.charMatcher('b'), 2));\r\n    assertEquals(3, sb.lastIndexOf(StrMatcher.charMatcher('b'), 3));\r\n    assertEquals(3, sb.lastIndexOf(StrMatcher.charMatcher('b'), 4));\r\n    assertEquals(3, sb.lastIndexOf(StrMatcher.charMatcher('b'), 5));\r\n    assertEquals(3, sb.lastIndexOf(StrMatcher.charMatcher('b'), 6));\r\n    assertEquals(-1, sb.lastIndexOf(StrMatcher.spaceMatcher(), -2));\r\n    assertEquals(-1, sb.lastIndexOf(StrMatcher.spaceMatcher(), 0));\r\n    assertEquals(2, sb.lastIndexOf(StrMatcher.spaceMatcher(), 2));\r\n    assertEquals(2, sb.lastIndexOf(StrMatcher.spaceMatcher(), 4));\r\n    assertEquals(2, sb.lastIndexOf(StrMatcher.spaceMatcher(), 20));\r\n    assertEquals(-1, sb.lastIndexOf(StrMatcher.noneMatcher(), 0));\r\n    assertEquals(-1, sb.lastIndexOf((StrMatcher) null, 0));\r\n    sb.append(\" A1 junction with A2\");\r\n    assertEquals(-1, sb.lastIndexOf(A_NUMBER_MATCHER, 5));\r\n    // A matches, 1 is outside bounds\r\n    assertEquals(-1, sb.lastIndexOf(A_NUMBER_MATCHER, 6));\r\n    assertEquals(6, sb.lastIndexOf(A_NUMBER_MATCHER, 7));\r\n    assertEquals(6, sb.lastIndexOf(A_NUMBER_MATCHER, 22));\r\n    // A matches, 2 is outside bounds\r\n    assertEquals(6, sb.lastIndexOf(A_NUMBER_MATCHER, 23));\r\n    assertEquals(23, sb.lastIndexOf(A_NUMBER_MATCHER, 24));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\text\\StrBuilderTest.java",
  "methodName" : "testLeftString",
  "sourceCode" : "@Test\r\nvoid testLeftString() {\r\n    final StrBuilder sb = new StrBuilder(\"left right\");\r\n    assertEquals(\"left\", sb.leftString(4));\r\n    assertEquals(\"\", sb.leftString(0));\r\n    assertEquals(\"\", sb.leftString(-5));\r\n    assertEquals(\"left right\", sb.leftString(15));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\text\\StrBuilderTest.java",
  "methodName" : "testLength",
  "sourceCode" : "@Test\r\nvoid testLength() {\r\n    final StrBuilder sb = new StrBuilder();\r\n    assertEquals(0, sb.length());\r\n    sb.append(\"Hello\");\r\n    assertEquals(5, sb.length());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\text\\StrBuilderTest.java",
  "methodName" : "testMidString",
  "sourceCode" : "@Test\r\nvoid testMidString() {\r\n    final StrBuilder sb = new StrBuilder(\"hello goodbye hello\");\r\n    assertEquals(\"goodbye\", sb.midString(6, 7));\r\n    assertEquals(\"hello\", sb.midString(0, 5));\r\n    assertEquals(\"hello\", sb.midString(-5, 5));\r\n    assertEquals(\"\", sb.midString(0, -1));\r\n    assertEquals(\"\", sb.midString(20, 2));\r\n    assertEquals(\"hello\", sb.midString(14, 22));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\text\\StrBuilderTest.java",
  "methodName" : "testMinimizeCapacity",
  "sourceCode" : "@Test\r\nvoid testMinimizeCapacity() {\r\n    final StrBuilder sb = new StrBuilder();\r\n    sb.minimizeCapacity();\r\n    assertEquals(0, sb.capacity());\r\n    sb.append(\"HelloWorld\");\r\n    sb.minimizeCapacity();\r\n    assertEquals(10, sb.capacity());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\text\\StrBuilderTest.java",
  "methodName" : "testReadFromCharBuffer",
  "sourceCode" : "@Test\r\nvoid testReadFromCharBuffer() throws Exception {\r\n    String s = \"\";\r\n    for (int i = 0; i < 100; ++i) {\r\n        final StrBuilder sb = new StrBuilder();\r\n        final int len = sb.readFrom(CharBuffer.wrap(s));\r\n        assertEquals(s.length(), len);\r\n        assertEquals(s, sb.toString());\r\n        s += Integer.toString(i);\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\text\\StrBuilderTest.java",
  "methodName" : "testReadFromCharBufferAppendsToEnd",
  "sourceCode" : "@Test\r\nvoid testReadFromCharBufferAppendsToEnd() throws Exception {\r\n    final StrBuilder sb = new StrBuilder(\"Test\");\r\n    sb.readFrom(CharBuffer.wrap(\" 123\"));\r\n    assertEquals(\"Test 123\", sb.toString());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\text\\StrBuilderTest.java",
  "methodName" : "testReadFromReadable",
  "sourceCode" : "@Test\r\nvoid testReadFromReadable() throws Exception {\r\n    String s = \"\";\r\n    for (int i = 0; i < 100; ++i) {\r\n        final StrBuilder sb = new StrBuilder();\r\n        final int len = sb.readFrom(new MockReadable(s));\r\n        assertEquals(s.length(), len);\r\n        assertEquals(s, sb.toString());\r\n        s += Integer.toString(i);\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\text\\StrBuilderTest.java",
  "methodName" : "testReadFromReadableAppendsToEnd",
  "sourceCode" : "@Test\r\nvoid testReadFromReadableAppendsToEnd() throws Exception {\r\n    final StrBuilder sb = new StrBuilder(\"Test\");\r\n    sb.readFrom(new MockReadable(\" 123\"));\r\n    assertEquals(\"Test 123\", sb.toString());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\text\\StrBuilderTest.java",
  "methodName" : "testReadFromReader",
  "sourceCode" : "@Test\r\nvoid testReadFromReader() throws Exception {\r\n    String s = \"\";\r\n    for (int i = 0; i < 100; ++i) {\r\n        final StrBuilder sb = new StrBuilder();\r\n        final int len = sb.readFrom(new StringReader(s));\r\n        assertEquals(s.length(), len);\r\n        assertEquals(s, sb.toString());\r\n        s += Integer.toString(i);\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\text\\StrBuilderTest.java",
  "methodName" : "testReadFromReaderAppendsToEnd",
  "sourceCode" : "@Test\r\nvoid testReadFromReaderAppendsToEnd() throws Exception {\r\n    final StrBuilder sb = new StrBuilder(\"Test\");\r\n    sb.readFrom(new StringReader(\" 123\"));\r\n    assertEquals(\"Test 123\", sb.toString());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\text\\StrBuilderTest.java",
  "methodName" : "testReplace_int_int_String",
  "sourceCode" : "@Test\r\nvoid testReplace_int_int_String() {\r\n    final StrBuilder sb = new StrBuilder(\"abc\");\r\n    sb.replace(0, 1, \"d\");\r\n    assertEquals(\"dbc\", sb.toString());\r\n    sb.replace(0, 1, \"aaa\");\r\n    assertEquals(\"aaabc\", sb.toString());\r\n    sb.replace(0, 3, \"\");\r\n    assertEquals(\"bc\", sb.toString());\r\n    sb.replace(1, 2, null);\r\n    assertEquals(\"b\", sb.toString());\r\n    sb.replace(1, 1000, \"text\");\r\n    assertEquals(\"btext\", sb.toString());\r\n    sb.replace(0, 1000, \"text\");\r\n    assertEquals(\"text\", sb.toString());\r\n    final StrBuilder sb1 = new StrBuilder(\"atext\");\r\n    sb1.replace(1, 1, \"ny\");\r\n    assertEquals(\"anytext\", sb1.toString());\r\n    assertIndexOutOfBoundsException(() -> sb1.replace(2, 1, \"anything\"));\r\n    final StrBuilder sb2 = new StrBuilder();\r\n    assertIndexOutOfBoundsException(() -> sb2.replace(1, 2, \"anything\"));\r\n    assertIndexOutOfBoundsException(() -> sb2.replace(-1, 1, \"anything\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\text\\StrBuilderTest.java",
  "methodName" : "testReplace_StrMatcher_String_int_int_int_VaryCount",
  "sourceCode" : "@Test\r\nvoid testReplace_StrMatcher_String_int_int_int_VaryCount() {\r\n    StrBuilder sb = new StrBuilder(\"aaxaaaayaa\");\r\n    sb.replace(StrMatcher.stringMatcher(\"aa\"), \"-\", 0, 10, -1);\r\n    assertEquals(\"-x--y-\", sb.toString());\r\n    sb = new StrBuilder(\"aaxaaaayaa\");\r\n    sb.replace(StrMatcher.stringMatcher(\"aa\"), \"-\", 0, 10, 0);\r\n    assertEquals(\"aaxaaaayaa\", sb.toString());\r\n    sb = new StrBuilder(\"aaxaaaayaa\");\r\n    sb.replace(StrMatcher.stringMatcher(\"aa\"), \"-\", 0, 10, 1);\r\n    assertEquals(\"-xaaaayaa\", sb.toString());\r\n    sb = new StrBuilder(\"aaxaaaayaa\");\r\n    sb.replace(StrMatcher.stringMatcher(\"aa\"), \"-\", 0, 10, 2);\r\n    assertEquals(\"-x-aayaa\", sb.toString());\r\n    sb = new StrBuilder(\"aaxaaaayaa\");\r\n    sb.replace(StrMatcher.stringMatcher(\"aa\"), \"-\", 0, 10, 3);\r\n    assertEquals(\"-x--yaa\", sb.toString());\r\n    sb = new StrBuilder(\"aaxaaaayaa\");\r\n    sb.replace(StrMatcher.stringMatcher(\"aa\"), \"-\", 0, 10, 4);\r\n    assertEquals(\"-x--y-\", sb.toString());\r\n    sb = new StrBuilder(\"aaxaaaayaa\");\r\n    sb.replace(StrMatcher.stringMatcher(\"aa\"), \"-\", 0, 10, 5);\r\n    assertEquals(\"-x--y-\", sb.toString());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\text\\StrBuilderTest.java",
  "methodName" : "testReplace_StrMatcher_String_int_int_int_VaryEndIndex",
  "sourceCode" : "@Test\r\nvoid testReplace_StrMatcher_String_int_int_int_VaryEndIndex() {\r\n    StrBuilder sb = new StrBuilder(\"aaxaaaayaa\");\r\n    sb.replace(StrMatcher.stringMatcher(\"aa\"), \"-\", 0, 0, -1);\r\n    assertEquals(\"aaxaaaayaa\", sb.toString());\r\n    sb = new StrBuilder(\"aaxaaaayaa\");\r\n    sb.replace(StrMatcher.stringMatcher(\"aa\"), \"-\", 0, 2, -1);\r\n    assertEquals(\"-xaaaayaa\", sb.toString());\r\n    sb = new StrBuilder(\"aaxaaaayaa\");\r\n    sb.replace(StrMatcher.stringMatcher(\"aa\"), \"-\", 0, 3, -1);\r\n    assertEquals(\"-xaaaayaa\", sb.toString());\r\n    sb = new StrBuilder(\"aaxaaaayaa\");\r\n    sb.replace(StrMatcher.stringMatcher(\"aa\"), \"-\", 0, 4, -1);\r\n    assertEquals(\"-xaaaayaa\", sb.toString());\r\n    sb = new StrBuilder(\"aaxaaaayaa\");\r\n    sb.replace(StrMatcher.stringMatcher(\"aa\"), \"-\", 0, 5, -1);\r\n    assertEquals(\"-x-aayaa\", sb.toString());\r\n    sb = new StrBuilder(\"aaxaaaayaa\");\r\n    sb.replace(StrMatcher.stringMatcher(\"aa\"), \"-\", 0, 6, -1);\r\n    assertEquals(\"-x-aayaa\", sb.toString());\r\n    sb = new StrBuilder(\"aaxaaaayaa\");\r\n    sb.replace(StrMatcher.stringMatcher(\"aa\"), \"-\", 0, 7, -1);\r\n    assertEquals(\"-x--yaa\", sb.toString());\r\n    sb = new StrBuilder(\"aaxaaaayaa\");\r\n    sb.replace(StrMatcher.stringMatcher(\"aa\"), \"-\", 0, 8, -1);\r\n    assertEquals(\"-x--yaa\", sb.toString());\r\n    sb = new StrBuilder(\"aaxaaaayaa\");\r\n    sb.replace(StrMatcher.stringMatcher(\"aa\"), \"-\", 0, 9, -1);\r\n    assertEquals(\"-x--yaa\", sb.toString());\r\n    sb = new StrBuilder(\"aaxaaaayaa\");\r\n    sb.replace(StrMatcher.stringMatcher(\"aa\"), \"-\", 0, 10, -1);\r\n    assertEquals(\"-x--y-\", sb.toString());\r\n    sb = new StrBuilder(\"aaxaaaayaa\");\r\n    sb.replace(StrMatcher.stringMatcher(\"aa\"), \"-\", 0, 1000, -1);\r\n    assertEquals(\"-x--y-\", sb.toString());\r\n    final StrBuilder sb1 = new StrBuilder(\"aaxaaaayaa\");\r\n    assertIndexOutOfBoundsException(() -> sb1.replace(StrMatcher.stringMatcher(\"aa\"), \"-\", 2, 1, -1));\r\n    assertEquals(\"aaxaaaayaa\", sb1.toString());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\text\\StrBuilderTest.java",
  "methodName" : "testReplace_StrMatcher_String_int_int_int_VaryMatcher",
  "sourceCode" : "@Test\r\nvoid testReplace_StrMatcher_String_int_int_int_VaryMatcher() {\r\n    StrBuilder sb = new StrBuilder(\"abcbccba\");\r\n    sb.replace(null, \"x\", 0, sb.length(), -1);\r\n    assertEquals(\"abcbccba\", sb.toString());\r\n    sb.replace(StrMatcher.charMatcher('a'), \"x\", 0, sb.length(), -1);\r\n    assertEquals(\"xbcbccbx\", sb.toString());\r\n    sb.replace(StrMatcher.stringMatcher(\"cb\"), \"x\", 0, sb.length(), -1);\r\n    assertEquals(\"xbxcxx\", sb.toString());\r\n    sb = new StrBuilder(\"A1-A2A3-A4\");\r\n    sb.replace(A_NUMBER_MATCHER, \"***\", 0, sb.length(), -1);\r\n    assertEquals(\"***-******-***\", sb.toString());\r\n    sb = new StrBuilder();\r\n    sb.replace(A_NUMBER_MATCHER, \"***\", 0, sb.length(), -1);\r\n    assertEquals(\"\", sb.toString());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\text\\StrBuilderTest.java",
  "methodName" : "testReplace_StrMatcher_String_int_int_int_VaryReplace",
  "sourceCode" : "@Test\r\nvoid testReplace_StrMatcher_String_int_int_int_VaryReplace() {\r\n    StrBuilder sb = new StrBuilder(\"abcbccba\");\r\n    sb.replace(StrMatcher.stringMatcher(\"cb\"), \"cb\", 0, sb.length(), -1);\r\n    assertEquals(\"abcbccba\", sb.toString());\r\n    sb = new StrBuilder(\"abcbccba\");\r\n    sb.replace(StrMatcher.stringMatcher(\"cb\"), \"-\", 0, sb.length(), -1);\r\n    assertEquals(\"ab-c-a\", sb.toString());\r\n    sb = new StrBuilder(\"abcbccba\");\r\n    sb.replace(StrMatcher.stringMatcher(\"cb\"), \"+++\", 0, sb.length(), -1);\r\n    assertEquals(\"ab+++c+++a\", sb.toString());\r\n    sb = new StrBuilder(\"abcbccba\");\r\n    sb.replace(StrMatcher.stringMatcher(\"cb\"), \"\", 0, sb.length(), -1);\r\n    assertEquals(\"abca\", sb.toString());\r\n    sb = new StrBuilder(\"abcbccba\");\r\n    sb.replace(StrMatcher.stringMatcher(\"cb\"), null, 0, sb.length(), -1);\r\n    assertEquals(\"abca\", sb.toString());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\text\\StrBuilderTest.java",
  "methodName" : "testReplace_StrMatcher_String_int_int_int_VaryStartIndex",
  "sourceCode" : "@Test\r\nvoid testReplace_StrMatcher_String_int_int_int_VaryStartIndex() {\r\n    StrBuilder sb = new StrBuilder(\"aaxaaaayaa\");\r\n    sb.replace(StrMatcher.stringMatcher(\"aa\"), \"-\", 0, sb.length(), -1);\r\n    assertEquals(\"-x--y-\", sb.toString());\r\n    sb = new StrBuilder(\"aaxaaaayaa\");\r\n    sb.replace(StrMatcher.stringMatcher(\"aa\"), \"-\", 1, sb.length(), -1);\r\n    assertEquals(\"aax--y-\", sb.toString());\r\n    sb = new StrBuilder(\"aaxaaaayaa\");\r\n    sb.replace(StrMatcher.stringMatcher(\"aa\"), \"-\", 2, sb.length(), -1);\r\n    assertEquals(\"aax--y-\", sb.toString());\r\n    sb = new StrBuilder(\"aaxaaaayaa\");\r\n    sb.replace(StrMatcher.stringMatcher(\"aa\"), \"-\", 3, sb.length(), -1);\r\n    assertEquals(\"aax--y-\", sb.toString());\r\n    sb = new StrBuilder(\"aaxaaaayaa\");\r\n    sb.replace(StrMatcher.stringMatcher(\"aa\"), \"-\", 4, sb.length(), -1);\r\n    assertEquals(\"aaxa-ay-\", sb.toString());\r\n    sb = new StrBuilder(\"aaxaaaayaa\");\r\n    sb.replace(StrMatcher.stringMatcher(\"aa\"), \"-\", 5, sb.length(), -1);\r\n    assertEquals(\"aaxaa-y-\", sb.toString());\r\n    sb = new StrBuilder(\"aaxaaaayaa\");\r\n    sb.replace(StrMatcher.stringMatcher(\"aa\"), \"-\", 6, sb.length(), -1);\r\n    assertEquals(\"aaxaaaay-\", sb.toString());\r\n    sb = new StrBuilder(\"aaxaaaayaa\");\r\n    sb.replace(StrMatcher.stringMatcher(\"aa\"), \"-\", 7, sb.length(), -1);\r\n    assertEquals(\"aaxaaaay-\", sb.toString());\r\n    sb = new StrBuilder(\"aaxaaaayaa\");\r\n    sb.replace(StrMatcher.stringMatcher(\"aa\"), \"-\", 8, sb.length(), -1);\r\n    assertEquals(\"aaxaaaay-\", sb.toString());\r\n    sb = new StrBuilder(\"aaxaaaayaa\");\r\n    sb.replace(StrMatcher.stringMatcher(\"aa\"), \"-\", 9, sb.length(), -1);\r\n    assertEquals(\"aaxaaaayaa\", sb.toString());\r\n    sb = new StrBuilder(\"aaxaaaayaa\");\r\n    sb.replace(StrMatcher.stringMatcher(\"aa\"), \"-\", 10, sb.length(), -1);\r\n    assertEquals(\"aaxaaaayaa\", sb.toString());\r\n    final StrBuilder sb1 = new StrBuilder(\"aaxaaaayaa\");\r\n    assertIndexOutOfBoundsException(() -> sb1.replace(StrMatcher.stringMatcher(\"aa\"), \"-\", 11, sb1.length(), -1));\r\n    assertEquals(\"aaxaaaayaa\", sb1.toString());\r\n    final StrBuilder sb2 = new StrBuilder(\"aaxaaaayaa\");\r\n    assertIndexOutOfBoundsException(() -> sb2.replace(StrMatcher.stringMatcher(\"aa\"), \"-\", -1, sb2.length(), -1));\r\n    assertEquals(\"aaxaaaayaa\", sb2.toString());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\text\\StrBuilderTest.java",
  "methodName" : "testReplaceAll_char_char",
  "sourceCode" : "@Test\r\nvoid testReplaceAll_char_char() {\r\n    final StrBuilder sb = new StrBuilder(\"abcbccba\");\r\n    sb.replaceAll('x', 'y');\r\n    assertEquals(\"abcbccba\", sb.toString());\r\n    sb.replaceAll('a', 'd');\r\n    assertEquals(\"dbcbccbd\", sb.toString());\r\n    sb.replaceAll('b', 'e');\r\n    assertEquals(\"dececced\", sb.toString());\r\n    sb.replaceAll('c', 'f');\r\n    assertEquals(\"defeffed\", sb.toString());\r\n    sb.replaceAll('d', 'd');\r\n    assertEquals(\"defeffed\", sb.toString());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\text\\StrBuilderTest.java",
  "methodName" : "testReplaceAll_String_String",
  "sourceCode" : "@Test\r\nvoid testReplaceAll_String_String() {\r\n    StrBuilder sb = new StrBuilder(\"abcbccba\");\r\n    sb.replaceAll((String) null, null);\r\n    assertEquals(\"abcbccba\", sb.toString());\r\n    sb.replaceAll((String) null, \"anything\");\r\n    assertEquals(\"abcbccba\", sb.toString());\r\n    sb.replaceAll(\"\", null);\r\n    assertEquals(\"abcbccba\", sb.toString());\r\n    sb.replaceAll(\"\", \"anything\");\r\n    assertEquals(\"abcbccba\", sb.toString());\r\n    sb.replaceAll(\"x\", \"y\");\r\n    assertEquals(\"abcbccba\", sb.toString());\r\n    sb.replaceAll(\"a\", \"d\");\r\n    assertEquals(\"dbcbccbd\", sb.toString());\r\n    sb.replaceAll(\"d\", null);\r\n    assertEquals(\"bcbccb\", sb.toString());\r\n    sb.replaceAll(\"cb\", \"-\");\r\n    assertEquals(\"b-c-\", sb.toString());\r\n    sb = new StrBuilder(\"abcba\");\r\n    sb.replaceAll(\"b\", \"xbx\");\r\n    assertEquals(\"axbxcxbxa\", sb.toString());\r\n    sb = new StrBuilder(\"bb\");\r\n    sb.replaceAll(\"b\", \"xbx\");\r\n    assertEquals(\"xbxxbx\", sb.toString());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\text\\StrBuilderTest.java",
  "methodName" : "testReplaceAll_StrMatcher_String",
  "sourceCode" : "@Test\r\nvoid testReplaceAll_StrMatcher_String() {\r\n    StrBuilder sb = new StrBuilder(\"abcbccba\");\r\n    sb.replaceAll((StrMatcher) null, null);\r\n    assertEquals(\"abcbccba\", sb.toString());\r\n    sb.replaceAll((StrMatcher) null, \"anything\");\r\n    assertEquals(\"abcbccba\", sb.toString());\r\n    sb.replaceAll(StrMatcher.noneMatcher(), null);\r\n    assertEquals(\"abcbccba\", sb.toString());\r\n    sb.replaceAll(StrMatcher.noneMatcher(), \"anything\");\r\n    assertEquals(\"abcbccba\", sb.toString());\r\n    sb.replaceAll(StrMatcher.charMatcher('x'), \"y\");\r\n    assertEquals(\"abcbccba\", sb.toString());\r\n    sb.replaceAll(StrMatcher.charMatcher('a'), \"d\");\r\n    assertEquals(\"dbcbccbd\", sb.toString());\r\n    sb.replaceAll(StrMatcher.charMatcher('d'), null);\r\n    assertEquals(\"bcbccb\", sb.toString());\r\n    sb.replaceAll(StrMatcher.stringMatcher(\"cb\"), \"-\");\r\n    assertEquals(\"b-c-\", sb.toString());\r\n    sb = new StrBuilder(\"abcba\");\r\n    sb.replaceAll(StrMatcher.charMatcher('b'), \"xbx\");\r\n    assertEquals(\"axbxcxbxa\", sb.toString());\r\n    sb = new StrBuilder(\"bb\");\r\n    sb.replaceAll(StrMatcher.charMatcher('b'), \"xbx\");\r\n    assertEquals(\"xbxxbx\", sb.toString());\r\n    sb = new StrBuilder(\"A1-A2A3-A4\");\r\n    sb.replaceAll(A_NUMBER_MATCHER, \"***\");\r\n    assertEquals(\"***-******-***\", sb.toString());\r\n    sb = new StrBuilder(\"Dear X, hello X.\");\r\n    sb.replaceAll(StrMatcher.stringMatcher(\"X\"), \"012345678901234567\");\r\n    assertEquals(\"Dear 012345678901234567, hello 012345678901234567.\", sb.toString());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\text\\StrBuilderTest.java",
  "methodName" : "testReplaceFirst_char_char",
  "sourceCode" : "@Test\r\nvoid testReplaceFirst_char_char() {\r\n    final StrBuilder sb = new StrBuilder(\"abcbccba\");\r\n    sb.replaceFirst('x', 'y');\r\n    assertEquals(\"abcbccba\", sb.toString());\r\n    sb.replaceFirst('a', 'd');\r\n    assertEquals(\"dbcbccba\", sb.toString());\r\n    sb.replaceFirst('b', 'e');\r\n    assertEquals(\"decbccba\", sb.toString());\r\n    sb.replaceFirst('c', 'f');\r\n    assertEquals(\"defbccba\", sb.toString());\r\n    sb.replaceFirst('d', 'd');\r\n    assertEquals(\"defbccba\", sb.toString());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\text\\StrBuilderTest.java",
  "methodName" : "testReplaceFirst_String_String",
  "sourceCode" : "@Test\r\nvoid testReplaceFirst_String_String() {\r\n    StrBuilder sb = new StrBuilder(\"abcbccba\");\r\n    sb.replaceFirst((String) null, null);\r\n    assertEquals(\"abcbccba\", sb.toString());\r\n    sb.replaceFirst((String) null, \"anything\");\r\n    assertEquals(\"abcbccba\", sb.toString());\r\n    sb.replaceFirst(\"\", null);\r\n    assertEquals(\"abcbccba\", sb.toString());\r\n    sb.replaceFirst(\"\", \"anything\");\r\n    assertEquals(\"abcbccba\", sb.toString());\r\n    sb.replaceFirst(\"x\", \"y\");\r\n    assertEquals(\"abcbccba\", sb.toString());\r\n    sb.replaceFirst(\"a\", \"d\");\r\n    assertEquals(\"dbcbccba\", sb.toString());\r\n    sb.replaceFirst(\"d\", null);\r\n    assertEquals(\"bcbccba\", sb.toString());\r\n    sb.replaceFirst(\"cb\", \"-\");\r\n    assertEquals(\"b-ccba\", sb.toString());\r\n    sb = new StrBuilder(\"abcba\");\r\n    sb.replaceFirst(\"b\", \"xbx\");\r\n    assertEquals(\"axbxcba\", sb.toString());\r\n    sb = new StrBuilder(\"bb\");\r\n    sb.replaceFirst(\"b\", \"xbx\");\r\n    assertEquals(\"xbxb\", sb.toString());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\text\\StrBuilderTest.java",
  "methodName" : "testReplaceFirst_StrMatcher_String",
  "sourceCode" : "@Test\r\nvoid testReplaceFirst_StrMatcher_String() {\r\n    StrBuilder sb = new StrBuilder(\"abcbccba\");\r\n    sb.replaceFirst((StrMatcher) null, null);\r\n    assertEquals(\"abcbccba\", sb.toString());\r\n    sb.replaceFirst((StrMatcher) null, \"anything\");\r\n    assertEquals(\"abcbccba\", sb.toString());\r\n    sb.replaceFirst(StrMatcher.noneMatcher(), null);\r\n    assertEquals(\"abcbccba\", sb.toString());\r\n    sb.replaceFirst(StrMatcher.noneMatcher(), \"anything\");\r\n    assertEquals(\"abcbccba\", sb.toString());\r\n    sb.replaceFirst(StrMatcher.charMatcher('x'), \"y\");\r\n    assertEquals(\"abcbccba\", sb.toString());\r\n    sb.replaceFirst(StrMatcher.charMatcher('a'), \"d\");\r\n    assertEquals(\"dbcbccba\", sb.toString());\r\n    sb.replaceFirst(StrMatcher.charMatcher('d'), null);\r\n    assertEquals(\"bcbccba\", sb.toString());\r\n    sb.replaceFirst(StrMatcher.stringMatcher(\"cb\"), \"-\");\r\n    assertEquals(\"b-ccba\", sb.toString());\r\n    sb = new StrBuilder(\"abcba\");\r\n    sb.replaceFirst(StrMatcher.charMatcher('b'), \"xbx\");\r\n    assertEquals(\"axbxcba\", sb.toString());\r\n    sb = new StrBuilder(\"bb\");\r\n    sb.replaceFirst(StrMatcher.charMatcher('b'), \"xbx\");\r\n    assertEquals(\"xbxb\", sb.toString());\r\n    sb = new StrBuilder(\"A1-A2A3-A4\");\r\n    sb.replaceFirst(A_NUMBER_MATCHER, \"***\");\r\n    assertEquals(\"***-A2A3-A4\", sb.toString());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\text\\StrBuilderTest.java",
  "methodName" : "testReverse",
  "sourceCode" : "@Test\r\nvoid testReverse() {\r\n    final StrBuilder sb = new StrBuilder();\r\n    assertEquals(\"\", sb.reverse().toString());\r\n    sb.clear().append(true);\r\n    assertEquals(\"eurt\", sb.reverse().toString());\r\n    assertEquals(\"true\", sb.reverse().toString());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\text\\StrBuilderTest.java",
  "methodName" : "testRightString",
  "sourceCode" : "@Test\r\nvoid testRightString() {\r\n    final StrBuilder sb = new StrBuilder(\"left right\");\r\n    assertEquals(\"right\", sb.rightString(5));\r\n    assertEquals(\"\", sb.rightString(0));\r\n    assertEquals(\"\", sb.rightString(-5));\r\n    assertEquals(\"left right\", sb.rightString(15));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\text\\StrBuilderTest.java",
  "methodName" : "testSetCharAt",
  "sourceCode" : "@Test\r\nvoid testSetCharAt() {\r\n    final StrBuilder sb = new StrBuilder();\r\n    assertIndexOutOfBoundsException(() -> sb.setCharAt(0, 'f'), \"setCharAt(0, ) expected IndexOutOfBoundsException\");\r\n    assertIndexOutOfBoundsException(() -> sb.setCharAt(-1, 'f'), \"setCharAt(-1, ) expected IndexOutOfBoundsException\");\r\n    sb.append(\"foo\");\r\n    sb.setCharAt(0, 'b');\r\n    sb.setCharAt(1, 'a');\r\n    sb.setCharAt(2, 'r');\r\n    assertIndexOutOfBoundsException(() -> sb.setCharAt(3, '!'), \"setCharAt(3, ) expected IndexOutOfBoundsException\");\r\n    assertEquals(\"bar\", sb.toString());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\text\\StrBuilderTest.java",
  "methodName" : "testSetLength",
  "sourceCode" : "@Test\r\nvoid testSetLength() {\r\n    final StrBuilder sb = new StrBuilder();\r\n    sb.append(\"Hello\");\r\n    // shorten\r\n    sb.setLength(2);\r\n    assertEquals(\"He\", sb.toString());\r\n    // no change\r\n    sb.setLength(2);\r\n    assertEquals(\"He\", sb.toString());\r\n    // lengthen\r\n    sb.setLength(3);\r\n    assertEquals(\"He\\0\", sb.toString());\r\n    assertIndexOutOfBoundsException(() -> sb.setLength(-1), \"setLength(-1) expected StringIndexOutOfBoundsException\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\text\\StrBuilderTest.java",
  "methodName" : "testSize",
  "sourceCode" : "@Test\r\nvoid testSize() {\r\n    final StrBuilder sb = new StrBuilder();\r\n    assertEquals(0, sb.size());\r\n    sb.append(\"Hello\");\r\n    assertEquals(5, sb.size());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\text\\StrBuilderTest.java",
  "methodName" : "testStartsWith",
  "sourceCode" : "@Test\r\nvoid testStartsWith() {\r\n    final StrBuilder sb = new StrBuilder();\r\n    assertFalse(sb.startsWith(\"a\"));\r\n    assertFalse(sb.startsWith(null));\r\n    assertTrue(sb.startsWith(\"\"));\r\n    sb.append(\"abc\");\r\n    assertTrue(sb.startsWith(\"a\"));\r\n    assertTrue(sb.startsWith(\"ab\"));\r\n    assertTrue(sb.startsWith(\"abc\"));\r\n    assertFalse(sb.startsWith(\"cba\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\text\\StrBuilderTest.java",
  "methodName" : "testSubSequenceIntInt",
  "sourceCode" : "@Test\r\nvoid testSubSequenceIntInt() {\r\n    final StrBuilder sb = new StrBuilder(\"hello goodbye\");\r\n    // Start index is negative\r\n    assertIndexOutOfBoundsException(() -> sb.subSequence(-1, 5));\r\n    // End index is negative\r\n    assertIndexOutOfBoundsException(() -> sb.subSequence(2, -1));\r\n    // End index greater than length()\r\n    assertIndexOutOfBoundsException(() -> sb.subSequence(2, sb.length() + 1));\r\n    // Start index greater then end index\r\n    assertIndexOutOfBoundsException(() -> sb.subSequence(3, 2));\r\n    // Normal cases\r\n    assertEquals(\"hello\", sb.subSequence(0, 5));\r\n    assertEquals(\"hello goodbye\".subSequence(0, 6), sb.subSequence(0, 6));\r\n    assertEquals(\"goodbye\", sb.subSequence(6, 13));\r\n    assertEquals(\"hello goodbye\".subSequence(6, 13), sb.subSequence(6, 13));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\text\\StrBuilderTest.java",
  "methodName" : "testSubstringInt",
  "sourceCode" : "@Test\r\nvoid testSubstringInt() {\r\n    final StrBuilder sb = new StrBuilder(\"hello goodbye\");\r\n    assertEquals(\"goodbye\", sb.substring(6));\r\n    assertEquals(\"hello goodbye\".substring(6), sb.substring(6));\r\n    assertEquals(\"hello goodbye\", sb.substring(0));\r\n    assertEquals(\"hello goodbye\".substring(0), sb.substring(0));\r\n    assertIndexOutOfBoundsException(() -> sb.substring(-1));\r\n    assertIndexOutOfBoundsException(() -> sb.substring(15));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\text\\StrBuilderTest.java",
  "methodName" : "testSubstringIntInt",
  "sourceCode" : "@Test\r\nvoid testSubstringIntInt() {\r\n    final StrBuilder sb = new StrBuilder(\"hello goodbye\");\r\n    assertEquals(\"hello\", sb.substring(0, 5));\r\n    assertEquals(\"hello goodbye\".substring(0, 6), sb.substring(0, 6));\r\n    assertEquals(\"goodbye\", sb.substring(6, 13));\r\n    assertEquals(\"hello goodbye\".substring(6, 13), sb.substring(6, 13));\r\n    assertEquals(\"goodbye\", sb.substring(6, 20));\r\n    assertIndexOutOfBoundsException(() -> sb.substring(-1, 5));\r\n    assertIndexOutOfBoundsException(() -> sb.substring(15, 20));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\text\\StrBuilderTest.java",
  "methodName" : "testToCharArray",
  "sourceCode" : "@Test\r\nvoid testToCharArray() {\r\n    final StrBuilder sb = new StrBuilder();\r\n    assertEquals(ArrayUtils.EMPTY_CHAR_ARRAY, sb.toCharArray());\r\n    char[] a = sb.toCharArray();\r\n    assertNotNull(a, \"toCharArray() result is null\");\r\n    assertEquals(0, a.length, \"toCharArray() result is too large\");\r\n    sb.append(\"junit\");\r\n    a = sb.toCharArray();\r\n    assertEquals(5, a.length, \"toCharArray() result incorrect length\");\r\n    assertArrayEquals(\"junit\".toCharArray(), a, \"toCharArray() result does not match\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\text\\StrBuilderTest.java",
  "methodName" : "testToCharArrayIntInt",
  "sourceCode" : "@Test\r\nvoid testToCharArrayIntInt() {\r\n    final StrBuilder sb = new StrBuilder();\r\n    assertEquals(ArrayUtils.EMPTY_CHAR_ARRAY, sb.toCharArray(0, 0));\r\n    sb.append(\"junit\");\r\n    // too large test\r\n    char[] a = sb.toCharArray(0, 20);\r\n    assertEquals(5, a.length, \"toCharArray(int, int) result incorrect length\");\r\n    assertArrayEquals(\"junit\".toCharArray(), a, \"toCharArray(int, int) result does not match\");\r\n    a = sb.toCharArray(0, 4);\r\n    assertEquals(4, a.length, \"toCharArray(int, int) result incorrect length\");\r\n    assertArrayEquals(\"juni\".toCharArray(), a, \"toCharArray(int, int) result does not match\");\r\n    a = sb.toCharArray(0, 4);\r\n    assertEquals(4, a.length, \"toCharArray(int, int) result incorrect length\");\r\n    assertArrayEquals(\"juni\".toCharArray(), a, \"toCharArray(int, int) result does not match\");\r\n    a = sb.toCharArray(0, 1);\r\n    assertNotNull(a, \"toCharArray(int, int) result is null\");\r\n    assertIndexOutOfBoundsException(() -> sb.toCharArray(-1, 5), \"no string index out of bound on -1\");\r\n    assertIndexOutOfBoundsException(() -> sb.toCharArray(6, 5), \"no string index out of bound on -1\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\text\\StrBuilderTest.java",
  "methodName" : "testToString",
  "sourceCode" : "@Test\r\nvoid testToString() {\r\n    final StrBuilder sb = new StrBuilder(\"abc\");\r\n    assertEquals(\"abc\", sb.toString());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\text\\StrBuilderTest.java",
  "methodName" : "testToStringBuffer",
  "sourceCode" : "@Test\r\nvoid testToStringBuffer() {\r\n    final StrBuilder sb = new StrBuilder();\r\n    assertEquals(new StringBuffer().toString(), sb.toStringBuffer().toString());\r\n    sb.append(\"junit\");\r\n    assertEquals(new StringBuffer(\"junit\").toString(), sb.toStringBuffer().toString());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\text\\StrBuilderTest.java",
  "methodName" : "testToStringBuilder",
  "sourceCode" : "@Test\r\nvoid testToStringBuilder() {\r\n    final StrBuilder sb = new StrBuilder();\r\n    assertEquals(new StringBuilder().toString(), sb.toStringBuilder().toString());\r\n    sb.append(\"junit\");\r\n    assertEquals(new StringBuilder(\"junit\").toString(), sb.toStringBuilder().toString());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\text\\StrBuilderTest.java",
  "methodName" : "testTrim",
  "sourceCode" : "@Test\r\nvoid testTrim() {\r\n    final StrBuilder sb = new StrBuilder();\r\n    assertEquals(\"\", sb.reverse().toString());\r\n    sb.clear().append(\" \\u0000 \");\r\n    assertEquals(\"\", sb.trim().toString());\r\n    sb.clear().append(\" \\u0000 a b c\");\r\n    assertEquals(\"a b c\", sb.trim().toString());\r\n    sb.clear().append(\"a b c \\u0000 \");\r\n    assertEquals(\"a b c\", sb.trim().toString());\r\n    sb.clear().append(\" \\u0000 a b c \\u0000 \");\r\n    assertEquals(\"a b c\", sb.trim().toString());\r\n    sb.clear().append(\"a b c\");\r\n    assertEquals(\"a b c\", sb.trim().toString());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\text\\StrLookupTest.java",
  "methodName" : "testMapLookup",
  "sourceCode" : "@Test\r\nvoid testMapLookup() {\r\n    final Map<String, Object> map = new HashMap<>();\r\n    map.put(\"key\", \"value\");\r\n    map.put(\"number\", Integer.valueOf(2));\r\n    assertEquals(\"value\", StrLookup.mapLookup(map).lookup(\"key\"));\r\n    assertEquals(\"2\", StrLookup.mapLookup(map).lookup(\"number\"));\r\n    assertNull(StrLookup.mapLookup(map).lookup(null));\r\n    assertNull(StrLookup.mapLookup(map).lookup(\"\"));\r\n    assertNull(StrLookup.mapLookup(map).lookup(\"other\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\text\\StrLookupTest.java",
  "methodName" : "testMapLookup_nullMap",
  "sourceCode" : "@Test\r\nvoid testMapLookup_nullMap() {\r\n    final Map<String, ?> map = null;\r\n    assertNull(StrLookup.mapLookup(map).lookup(null));\r\n    assertNull(StrLookup.mapLookup(map).lookup(\"\"));\r\n    assertNull(StrLookup.mapLookup(map).lookup(\"any\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\text\\StrLookupTest.java",
  "methodName" : "testNoneLookup",
  "sourceCode" : "@Test\r\nvoid testNoneLookup() {\r\n    assertNull(StrLookup.noneLookup().lookup(null));\r\n    assertNull(StrLookup.noneLookup().lookup(\"\"));\r\n    assertNull(StrLookup.noneLookup().lookup(\"any\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\text\\StrLookupTest.java",
  "methodName" : "testSystemPropertiesLookup",
  "sourceCode" : "@Test\r\nvoid testSystemPropertiesLookup() {\r\n    assertEquals(System.getProperty(\"os.name\"), StrLookup.systemPropertiesLookup().lookup(\"os.name\"));\r\n    assertNull(StrLookup.systemPropertiesLookup().lookup(\"\"));\r\n    assertNull(StrLookup.systemPropertiesLookup().lookup(\"other\"));\r\n    assertNull(StrLookup.systemPropertiesLookup().lookup(null));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\text\\StrLookupTest.java",
  "methodName" : "testSystemPropertiesLookupReplacedProperties",
  "sourceCode" : "/**\r\n * Tests that a lookup object for system properties can deal with a full\r\n * replacement of the system properties object. This test is related to\r\n * LANG-1055.\r\n */\r\n@Test\r\nvoid testSystemPropertiesLookupReplacedProperties() {\r\n    final Properties oldProperties = System.getProperties();\r\n    final String osName = \"os.name\";\r\n    final String newOsName = oldProperties.getProperty(osName) + \"_changed\";\r\n    final StrLookup<String> sysLookup = StrLookup.systemPropertiesLookup();\r\n    final Properties newProps = new Properties();\r\n    newProps.setProperty(osName, newOsName);\r\n    System.setProperties(newProps);\r\n    try {\r\n        assertEquals(newOsName, sysLookup.lookup(osName), \"Changed properties not detected\");\r\n    } finally {\r\n        System.setProperties(oldProperties);\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\text\\StrLookupTest.java",
  "methodName" : "testSystemPropertiesLookupUpdatedProperty",
  "sourceCode" : "/**\r\n * Tests that a lookup object for system properties sees changes on system\r\n * properties. This test is related to LANG-1141.\r\n */\r\n@Test\r\nvoid testSystemPropertiesLookupUpdatedProperty() {\r\n    final String osName = \"os.name\";\r\n    final String oldOs = System.getProperty(osName);\r\n    final String newOsName = oldOs + \"_changed\";\r\n    final StrLookup<String> sysLookup = StrLookup.systemPropertiesLookup();\r\n    System.setProperty(osName, newOsName);\r\n    try {\r\n        assertEquals(newOsName, sysLookup.lookup(osName), \"Changed properties not detected\");\r\n    } finally {\r\n        System.setProperty(osName, oldOs);\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\text\\StrMatcherTest.java",
  "methodName" : "testCharMatcher_char",
  "sourceCode" : "@Test\r\nvoid testCharMatcher_char() {\r\n    final StrMatcher matcher = StrMatcher.charMatcher('c');\r\n    assertEquals(0, matcher.isMatch(BUFFER2, 0));\r\n    assertEquals(0, matcher.isMatch(BUFFER2, 1));\r\n    assertEquals(1, matcher.isMatch(BUFFER2, 2));\r\n    assertEquals(0, matcher.isMatch(BUFFER2, 3));\r\n    assertEquals(0, matcher.isMatch(BUFFER2, 4));\r\n    assertEquals(0, matcher.isMatch(BUFFER2, 5));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\text\\StrMatcherTest.java",
  "methodName" : "testCharSetMatcher_charArray",
  "sourceCode" : "@Test\r\nvoid testCharSetMatcher_charArray() {\r\n    final StrMatcher matcher = StrMatcher.charSetMatcher(\"ace\".toCharArray());\r\n    assertEquals(1, matcher.isMatch(BUFFER2, 0));\r\n    assertEquals(0, matcher.isMatch(BUFFER2, 1));\r\n    assertEquals(1, matcher.isMatch(BUFFER2, 2));\r\n    assertEquals(0, matcher.isMatch(BUFFER2, 3));\r\n    assertEquals(1, matcher.isMatch(BUFFER2, 4));\r\n    assertEquals(0, matcher.isMatch(BUFFER2, 5));\r\n    assertSame(StrMatcher.noneMatcher(), StrMatcher.charSetMatcher());\r\n    assertSame(StrMatcher.noneMatcher(), StrMatcher.charSetMatcher((char[]) null));\r\n    assertInstanceOf(StrMatcher.CharMatcher.class, StrMatcher.charSetMatcher(\"a\".toCharArray()));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\text\\StrMatcherTest.java",
  "methodName" : "testCharSetMatcher_String",
  "sourceCode" : "@Test\r\nvoid testCharSetMatcher_String() {\r\n    final StrMatcher matcher = StrMatcher.charSetMatcher(\"ace\");\r\n    assertEquals(1, matcher.isMatch(BUFFER2, 0));\r\n    assertEquals(0, matcher.isMatch(BUFFER2, 1));\r\n    assertEquals(1, matcher.isMatch(BUFFER2, 2));\r\n    assertEquals(0, matcher.isMatch(BUFFER2, 3));\r\n    assertEquals(1, matcher.isMatch(BUFFER2, 4));\r\n    assertEquals(0, matcher.isMatch(BUFFER2, 5));\r\n    assertSame(StrMatcher.noneMatcher(), StrMatcher.charSetMatcher(\"\"));\r\n    assertSame(StrMatcher.noneMatcher(), StrMatcher.charSetMatcher((String) null));\r\n    assertInstanceOf(StrMatcher.CharMatcher.class, StrMatcher.charSetMatcher(\"a\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\text\\StrMatcherTest.java",
  "methodName" : "testCommaMatcher",
  "sourceCode" : "@Test\r\nvoid testCommaMatcher() {\r\n    final StrMatcher matcher = StrMatcher.commaMatcher();\r\n    assertSame(matcher, StrMatcher.commaMatcher());\r\n    assertEquals(0, matcher.isMatch(BUFFER1, 0));\r\n    assertEquals(1, matcher.isMatch(BUFFER1, 1));\r\n    assertEquals(0, matcher.isMatch(BUFFER1, 2));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\text\\StrMatcherTest.java",
  "methodName" : "testDoubleQuoteMatcher",
  "sourceCode" : "@Test\r\nvoid testDoubleQuoteMatcher() {\r\n    final StrMatcher matcher = StrMatcher.doubleQuoteMatcher();\r\n    assertSame(matcher, StrMatcher.doubleQuoteMatcher());\r\n    assertEquals(0, matcher.isMatch(BUFFER1, 11));\r\n    assertEquals(1, matcher.isMatch(BUFFER1, 12));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\text\\StrMatcherTest.java",
  "methodName" : "testMatcherIndices",
  "sourceCode" : "@Test\r\nvoid testMatcherIndices() {\r\n    // remember that the API contract is tight for the isMatch() method\r\n    // all the onus is on the caller, so invalid inputs are not\r\n    // the concern of StrMatcher, and are not bugs\r\n    final StrMatcher matcher = StrMatcher.stringMatcher(\"bc\");\r\n    assertEquals(2, matcher.isMatch(BUFFER2, 1, 1, BUFFER2.length));\r\n    assertEquals(2, matcher.isMatch(BUFFER2, 1, 0, 3));\r\n    assertEquals(0, matcher.isMatch(BUFFER2, 1, 0, 2));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\text\\StrMatcherTest.java",
  "methodName" : "testNoneMatcher",
  "sourceCode" : "@Test\r\nvoid testNoneMatcher() {\r\n    final StrMatcher matcher = StrMatcher.noneMatcher();\r\n    assertSame(matcher, StrMatcher.noneMatcher());\r\n    assertEquals(0, matcher.isMatch(BUFFER1, 0));\r\n    assertEquals(0, matcher.isMatch(BUFFER1, 1));\r\n    assertEquals(0, matcher.isMatch(BUFFER1, 2));\r\n    assertEquals(0, matcher.isMatch(BUFFER1, 3));\r\n    assertEquals(0, matcher.isMatch(BUFFER1, 4));\r\n    assertEquals(0, matcher.isMatch(BUFFER1, 5));\r\n    assertEquals(0, matcher.isMatch(BUFFER1, 6));\r\n    assertEquals(0, matcher.isMatch(BUFFER1, 7));\r\n    assertEquals(0, matcher.isMatch(BUFFER1, 8));\r\n    assertEquals(0, matcher.isMatch(BUFFER1, 9));\r\n    assertEquals(0, matcher.isMatch(BUFFER1, 10));\r\n    assertEquals(0, matcher.isMatch(BUFFER1, 11));\r\n    assertEquals(0, matcher.isMatch(BUFFER1, 12));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\text\\StrMatcherTest.java",
  "methodName" : "testQuoteMatcher",
  "sourceCode" : "@Test\r\nvoid testQuoteMatcher() {\r\n    final StrMatcher matcher = StrMatcher.quoteMatcher();\r\n    assertSame(matcher, StrMatcher.quoteMatcher());\r\n    assertEquals(0, matcher.isMatch(BUFFER1, 10));\r\n    assertEquals(1, matcher.isMatch(BUFFER1, 11));\r\n    assertEquals(1, matcher.isMatch(BUFFER1, 12));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\text\\StrMatcherTest.java",
  "methodName" : "testSingleQuoteMatcher",
  "sourceCode" : "@Test\r\nvoid testSingleQuoteMatcher() {\r\n    final StrMatcher matcher = StrMatcher.singleQuoteMatcher();\r\n    assertSame(matcher, StrMatcher.singleQuoteMatcher());\r\n    assertEquals(0, matcher.isMatch(BUFFER1, 10));\r\n    assertEquals(1, matcher.isMatch(BUFFER1, 11));\r\n    assertEquals(0, matcher.isMatch(BUFFER1, 12));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\text\\StrMatcherTest.java",
  "methodName" : "testSpaceMatcher",
  "sourceCode" : "@Test\r\nvoid testSpaceMatcher() {\r\n    final StrMatcher matcher = StrMatcher.spaceMatcher();\r\n    assertSame(matcher, StrMatcher.spaceMatcher());\r\n    assertEquals(0, matcher.isMatch(BUFFER1, 4));\r\n    assertEquals(1, matcher.isMatch(BUFFER1, 5));\r\n    assertEquals(0, matcher.isMatch(BUFFER1, 6));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\text\\StrMatcherTest.java",
  "methodName" : "testSplitMatcher",
  "sourceCode" : "@Test\r\nvoid testSplitMatcher() {\r\n    final StrMatcher matcher = StrMatcher.splitMatcher();\r\n    assertSame(matcher, StrMatcher.splitMatcher());\r\n    assertEquals(0, matcher.isMatch(BUFFER1, 2));\r\n    assertEquals(1, matcher.isMatch(BUFFER1, 3));\r\n    assertEquals(0, matcher.isMatch(BUFFER1, 4));\r\n    assertEquals(1, matcher.isMatch(BUFFER1, 5));\r\n    assertEquals(0, matcher.isMatch(BUFFER1, 6));\r\n    assertEquals(1, matcher.isMatch(BUFFER1, 7));\r\n    assertEquals(1, matcher.isMatch(BUFFER1, 8));\r\n    assertEquals(1, matcher.isMatch(BUFFER1, 9));\r\n    assertEquals(0, matcher.isMatch(BUFFER1, 10));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\text\\StrMatcherTest.java",
  "methodName" : "testStringMatcher_String",
  "sourceCode" : "@Test\r\nvoid testStringMatcher_String() {\r\n    final StrMatcher matcher = StrMatcher.stringMatcher(\"bc\");\r\n    assertEquals(0, matcher.isMatch(BUFFER2, 0));\r\n    assertEquals(2, matcher.isMatch(BUFFER2, 1));\r\n    assertEquals(0, matcher.isMatch(BUFFER2, 2));\r\n    assertEquals(0, matcher.isMatch(BUFFER2, 3));\r\n    assertEquals(0, matcher.isMatch(BUFFER2, 4));\r\n    assertEquals(0, matcher.isMatch(BUFFER2, 5));\r\n    assertSame(StrMatcher.noneMatcher(), StrMatcher.stringMatcher(\"\"));\r\n    assertSame(StrMatcher.noneMatcher(), StrMatcher.stringMatcher(null));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\text\\StrMatcherTest.java",
  "methodName" : "testTabMatcher",
  "sourceCode" : "@Test\r\nvoid testTabMatcher() {\r\n    final StrMatcher matcher = StrMatcher.tabMatcher();\r\n    assertSame(matcher, StrMatcher.tabMatcher());\r\n    assertEquals(0, matcher.isMatch(BUFFER1, 2));\r\n    assertEquals(1, matcher.isMatch(BUFFER1, 3));\r\n    assertEquals(0, matcher.isMatch(BUFFER1, 4));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\text\\StrMatcherTest.java",
  "methodName" : "testTrimMatcher",
  "sourceCode" : "@Test\r\nvoid testTrimMatcher() {\r\n    final StrMatcher matcher = StrMatcher.trimMatcher();\r\n    assertSame(matcher, StrMatcher.trimMatcher());\r\n    assertEquals(0, matcher.isMatch(BUFFER1, 2));\r\n    assertEquals(1, matcher.isMatch(BUFFER1, 3));\r\n    assertEquals(0, matcher.isMatch(BUFFER1, 4));\r\n    assertEquals(1, matcher.isMatch(BUFFER1, 5));\r\n    assertEquals(0, matcher.isMatch(BUFFER1, 6));\r\n    assertEquals(1, matcher.isMatch(BUFFER1, 7));\r\n    assertEquals(1, matcher.isMatch(BUFFER1, 8));\r\n    assertEquals(1, matcher.isMatch(BUFFER1, 9));\r\n    assertEquals(1, matcher.isMatch(BUFFER1, 10));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\text\\StrSubstitutorTest.java",
  "methodName" : "testConstructorMapFull",
  "sourceCode" : "/**\r\n * Tests constructor.\r\n */\r\n@Test\r\nvoid testConstructorMapFull() {\r\n    final Map<String, String> map = new HashMap<>();\r\n    map.put(\"name\", \"commons\");\r\n    StrSubstitutor sub = new StrSubstitutor(map, \"<\", \">\", '!');\r\n    assertEquals(\"Hi < commons\", sub.replace(\"Hi !< <name>\"));\r\n    sub = new StrSubstitutor(map, \"<\", \">\", '!', \"||\");\r\n    assertEquals(\"Hi < commons\", sub.replace(\"Hi !< <name2||commons>\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\text\\StrSubstitutorTest.java",
  "methodName" : "testConstructorMapPrefixSuffix",
  "sourceCode" : "/**\r\n * Tests constructor.\r\n */\r\n@Test\r\nvoid testConstructorMapPrefixSuffix() {\r\n    final Map<String, String> map = new HashMap<>();\r\n    map.put(\"name\", \"commons\");\r\n    final StrSubstitutor sub = new StrSubstitutor(map, \"<\", \">\");\r\n    assertEquals(\"Hi < commons\", sub.replace(\"Hi $< <name>\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\text\\StrSubstitutorTest.java",
  "methodName" : "testConstructorNoArgs",
  "sourceCode" : "/**\r\n * Tests constructor.\r\n */\r\n@Test\r\nvoid testConstructorNoArgs() {\r\n    final StrSubstitutor sub = new StrSubstitutor();\r\n    assertEquals(\"Hi ${name}\", sub.replace(\"Hi ${name}\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\text\\StrSubstitutorTest.java",
  "methodName" : "testCyclicReplacement",
  "sourceCode" : "/**\r\n * Tests a cyclic replace operation.\r\n * The cycle should be detected and cause an exception to be thrown.\r\n */\r\n@Test\r\nvoid testCyclicReplacement() {\r\n    final Map<String, String> map = new HashMap<>();\r\n    map.put(\"animal\", \"${critter}\");\r\n    map.put(\"target\", \"${pet}\");\r\n    map.put(\"pet\", \"${petCharacteristic} dog\");\r\n    map.put(\"petCharacteristic\", \"lazy\");\r\n    map.put(\"critter\", \"${critterSpeed} ${critterColor} ${critterType}\");\r\n    map.put(\"critterSpeed\", \"quick\");\r\n    map.put(\"critterColor\", \"brown\");\r\n    map.put(\"critterType\", \"${animal}\");\r\n    final StrSubstitutor sub = new StrSubstitutor(map);\r\n    assertThrows(IllegalStateException.class, () -> sub.replace(\"The ${animal} jumps over the ${target}.\"), \"Cyclic replacement was not detected!\");\r\n    // also check even when default value is set.\r\n    map.put(\"critterType\", \"${animal:-fox}\");\r\n    final StrSubstitutor sub2 = new StrSubstitutor(map);\r\n    assertThrows(IllegalStateException.class, () -> sub2.replace(\"The ${animal} jumps over the ${target}.\"), \"Cyclic replacement was not detected!\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\text\\StrSubstitutorTest.java",
  "methodName" : "testDefaultValueDelimiters",
  "sourceCode" : "@Test\r\nvoid testDefaultValueDelimiters() {\r\n    final Map<String, String> map = new HashMap<>();\r\n    map.put(\"animal\", \"fox\");\r\n    map.put(\"target\", \"dog\");\r\n    StrSubstitutor sub = new StrSubstitutor(map, \"${\", \"}\", '$');\r\n    assertEquals(\"The fox jumps over the lazy dog. 1234567890.\", sub.replace(\"The ${animal} jumps over the lazy ${target}. ${undefined.number:-1234567890}.\"));\r\n    sub = new StrSubstitutor(map, \"${\", \"}\", '$', \"?:\");\r\n    assertEquals(\"The fox jumps over the lazy dog. 1234567890.\", sub.replace(\"The ${animal} jumps over the lazy ${target}. ${undefined.number?:1234567890}.\"));\r\n    sub = new StrSubstitutor(map, \"${\", \"}\", '$', \"||\");\r\n    assertEquals(\"The fox jumps over the lazy dog. 1234567890.\", sub.replace(\"The ${animal} jumps over the lazy ${target}. ${undefined.number||1234567890}.\"));\r\n    sub = new StrSubstitutor(map, \"${\", \"}\", '$', \"!\");\r\n    assertEquals(\"The fox jumps over the lazy dog. 1234567890.\", sub.replace(\"The ${animal} jumps over the lazy ${target}. ${undefined.number!1234567890}.\"));\r\n    sub = new StrSubstitutor(map, \"${\", \"}\", '$', \"\");\r\n    sub.setValueDelimiterMatcher(null);\r\n    assertEquals(\"The fox jumps over the lazy dog. ${undefined.number!1234567890}.\", sub.replace(\"The ${animal} jumps over the lazy ${target}. ${undefined.number!1234567890}.\"));\r\n    sub = new StrSubstitutor(map, \"${\", \"}\", '$');\r\n    sub.setValueDelimiterMatcher(null);\r\n    assertEquals(\"The fox jumps over the lazy dog. ${undefined.number!1234567890}.\", sub.replace(\"The ${animal} jumps over the lazy ${target}. ${undefined.number!1234567890}.\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\text\\StrSubstitutorTest.java",
  "methodName" : "testGetSetEscape",
  "sourceCode" : "/**\r\n * Tests get set.\r\n */\r\n@Test\r\nvoid testGetSetEscape() {\r\n    final StrSubstitutor sub = new StrSubstitutor();\r\n    assertEquals('$', sub.getEscapeChar());\r\n    sub.setEscapeChar('<');\r\n    assertEquals('<', sub.getEscapeChar());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\text\\StrSubstitutorTest.java",
  "methodName" : "testGetSetPrefix",
  "sourceCode" : "/**\r\n * Tests get set.\r\n */\r\n@Test\r\nvoid testGetSetPrefix() {\r\n    final StrSubstitutor sub = new StrSubstitutor();\r\n    assertInstanceOf(StrMatcher.StringMatcher.class, sub.getVariablePrefixMatcher());\r\n    sub.setVariablePrefix('<');\r\n    assertInstanceOf(StrMatcher.CharMatcher.class, sub.getVariablePrefixMatcher());\r\n    sub.setVariablePrefix(\"<<\");\r\n    assertInstanceOf(StrMatcher.StringMatcher.class, sub.getVariablePrefixMatcher());\r\n    assertNullPointerException(() -> sub.setVariablePrefix(null));\r\n    assertInstanceOf(StrMatcher.StringMatcher.class, sub.getVariablePrefixMatcher());\r\n    final StrMatcher matcher = StrMatcher.commaMatcher();\r\n    sub.setVariablePrefixMatcher(matcher);\r\n    assertSame(matcher, sub.getVariablePrefixMatcher());\r\n    assertNullPointerException(() -> sub.setVariablePrefixMatcher(null));\r\n    assertSame(matcher, sub.getVariablePrefixMatcher());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\text\\StrSubstitutorTest.java",
  "methodName" : "testGetSetSuffix",
  "sourceCode" : "/**\r\n * Tests get set.\r\n */\r\n@Test\r\nvoid testGetSetSuffix() {\r\n    final StrSubstitutor sub = new StrSubstitutor();\r\n    assertInstanceOf(StrMatcher.StringMatcher.class, sub.getVariableSuffixMatcher());\r\n    sub.setVariableSuffix('<');\r\n    assertInstanceOf(StrMatcher.CharMatcher.class, sub.getVariableSuffixMatcher());\r\n    sub.setVariableSuffix(\"<<\");\r\n    assertInstanceOf(StrMatcher.StringMatcher.class, sub.getVariableSuffixMatcher());\r\n    assertNullPointerException(() -> sub.setVariableSuffix(null));\r\n    assertInstanceOf(StrMatcher.StringMatcher.class, sub.getVariableSuffixMatcher());\r\n    final StrMatcher matcher = StrMatcher.commaMatcher();\r\n    sub.setVariableSuffixMatcher(matcher);\r\n    assertSame(matcher, sub.getVariableSuffixMatcher());\r\n    assertNullPointerException(() -> sub.setVariableSuffixMatcher(null));\r\n    assertSame(matcher, sub.getVariableSuffixMatcher());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\text\\StrSubstitutorTest.java",
  "methodName" : "testGetSetValueDelimiter",
  "sourceCode" : "/**\r\n * Tests get set.\r\n */\r\n@Test\r\nvoid testGetSetValueDelimiter() {\r\n    final StrSubstitutor sub = new StrSubstitutor();\r\n    assertInstanceOf(StrMatcher.StringMatcher.class, sub.getValueDelimiterMatcher());\r\n    sub.setValueDelimiter(':');\r\n    assertInstanceOf(StrMatcher.CharMatcher.class, sub.getValueDelimiterMatcher());\r\n    sub.setValueDelimiter(\"||\");\r\n    assertInstanceOf(StrMatcher.StringMatcher.class, sub.getValueDelimiterMatcher());\r\n    sub.setValueDelimiter(null);\r\n    assertNull(sub.getValueDelimiterMatcher());\r\n    final StrMatcher matcher = StrMatcher.commaMatcher();\r\n    sub.setValueDelimiterMatcher(matcher);\r\n    assertSame(matcher, sub.getValueDelimiterMatcher());\r\n    sub.setValueDelimiterMatcher(null);\r\n    assertNull(sub.getValueDelimiterMatcher());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\text\\StrSubstitutorTest.java",
  "methodName" : "testLANG1055",
  "sourceCode" : "/**\r\n * Test for LANG-1055: StrSubstitutor.replaceSystemProperties does not work consistently\r\n */\r\n@Test\r\nvoid testLANG1055() {\r\n    System.setProperty(\"test_key\", \"test_value\");\r\n    final String expected = StrSubstitutor.replace(\"test_key=${test_key}\", System.getProperties());\r\n    final String actual = StrSubstitutor.replaceSystemProperties(\"test_key=${test_key}\");\r\n    assertEquals(expected, actual);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\text\\StrSubstitutorTest.java",
  "methodName" : "testReplaceAdjacentAtEnd",
  "sourceCode" : "/**\r\n * Tests adjacent keys.\r\n */\r\n@Test\r\nvoid testReplaceAdjacentAtEnd() {\r\n    values.put(\"code\", \"GBP\");\r\n    values.put(\"amount\", \"12.50\");\r\n    final StrSubstitutor sub = new StrSubstitutor(values);\r\n    assertEquals(\"Amount is GBP12.50\", sub.replace(\"Amount is ${code}${amount}\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\text\\StrSubstitutorTest.java",
  "methodName" : "testReplaceAdjacentAtStart",
  "sourceCode" : "/**\r\n * Tests adjacent keys.\r\n */\r\n@Test\r\nvoid testReplaceAdjacentAtStart() {\r\n    values.put(\"code\", \"GBP\");\r\n    values.put(\"amount\", \"12.50\");\r\n    final StrSubstitutor sub = new StrSubstitutor(values);\r\n    assertEquals(\"GBP12.50 charged\", sub.replace(\"${code}${amount} charged\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\text\\StrSubstitutorTest.java",
  "methodName" : "testReplaceChangedMap",
  "sourceCode" : "/**\r\n * Tests key replace changing map after initialization (not recommended).\r\n */\r\n@Test\r\nvoid testReplaceChangedMap() {\r\n    final StrSubstitutor sub = new StrSubstitutor(values);\r\n    values.put(\"target\", \"moon\");\r\n    assertEquals(\"The quick brown fox jumps over the moon.\", sub.replace(\"The ${animal} jumps over the ${target}.\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\text\\StrSubstitutorTest.java",
  "methodName" : "testReplaceComplexEscaping",
  "sourceCode" : "/**\r\n * Tests complex escaping.\r\n */\r\n@Test\r\nvoid testReplaceComplexEscaping() {\r\n    doTestReplace(\"The ${quick brown fox} jumps over the lazy dog.\", \"The $${${animal}} jumps over the ${target}.\", true);\r\n    doTestReplace(\"The ${quick brown fox} jumps over the lazy dog. ${1234567890}.\", \"The $${${animal}} jumps over the ${target}. $${${undefined.number:-1234567890}}.\", true);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\text\\StrSubstitutorTest.java",
  "methodName" : "testReplaceEmpty",
  "sourceCode" : "/**\r\n * Tests replace with null.\r\n */\r\n@Test\r\nvoid testReplaceEmpty() {\r\n    doTestNoReplace(\"\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\text\\StrSubstitutorTest.java",
  "methodName" : "testReplaceEmptyKeys",
  "sourceCode" : "/**\r\n * Tests when no variable name.\r\n */\r\n@Test\r\nvoid testReplaceEmptyKeys() {\r\n    doTestReplace(\"The ${} jumps over the lazy dog.\", \"The ${} jumps over the ${target}.\", true);\r\n    doTestReplace(\"The animal jumps over the lazy dog.\", \"The ${:-animal} jumps over the ${target}.\", true);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\text\\StrSubstitutorTest.java",
  "methodName" : "testReplaceEscaping",
  "sourceCode" : "/**\r\n * Tests escaping.\r\n */\r\n@Test\r\nvoid testReplaceEscaping() {\r\n    doTestReplace(\"The ${animal} jumps over the lazy dog.\", \"The $${animal} jumps over the ${target}.\", true);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\text\\StrSubstitutorTest.java",
  "methodName" : "testReplaceIncompletePrefix",
  "sourceCode" : "/**\r\n * Tests when no incomplete prefix.\r\n */\r\n@Test\r\nvoid testReplaceIncompletePrefix() {\r\n    doTestReplace(\"The {animal} jumps over the lazy dog.\", \"The {animal} jumps over the ${target}.\", true);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\text\\StrSubstitutorTest.java",
  "methodName" : "testReplaceInVariable",
  "sourceCode" : "/**\r\n * Tests whether a variable can be replaced in a variable name.\r\n */\r\n@Test\r\nvoid testReplaceInVariable() {\r\n    values.put(\"animal.1\", \"fox\");\r\n    values.put(\"animal.2\", \"mouse\");\r\n    values.put(\"species\", \"2\");\r\n    final StrSubstitutor sub = new StrSubstitutor(values);\r\n    sub.setEnableSubstitutionInVariables(true);\r\n    assertEquals(\"The mouse jumps over the lazy dog.\", sub.replace(\"The ${animal.${species}} jumps over the ${target}.\"), \"Wrong result (1)\");\r\n    values.put(\"species\", \"1\");\r\n    assertEquals(\"The fox jumps over the lazy dog.\", sub.replace(\"The ${animal.${species}} jumps over the ${target}.\"), \"Wrong result (2)\");\r\n    assertEquals(\"The fox jumps over the lazy dog.\", sub.replace(\"The ${unknown.animal.${unknown.species:-1}:-fox} jumps over the ${unknown.target:-lazy dog}.\"), \"Wrong result (3)\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\text\\StrSubstitutorTest.java",
  "methodName" : "testReplaceInVariableDisabled",
  "sourceCode" : "/**\r\n * Tests whether substitution in variable names is disabled per default.\r\n */\r\n@Test\r\nvoid testReplaceInVariableDisabled() {\r\n    values.put(\"animal.1\", \"fox\");\r\n    values.put(\"animal.2\", \"mouse\");\r\n    values.put(\"species\", \"2\");\r\n    final StrSubstitutor sub = new StrSubstitutor(values);\r\n    assertEquals(\"The ${animal.${species}} jumps over the lazy dog.\", sub.replace(\"The ${animal.${species}} jumps over the ${target}.\"), \"Wrong result (1)\");\r\n    assertEquals(\"The ${animal.${species:-1}} jumps over the lazy dog.\", sub.replace(\"The ${animal.${species:-1}} jumps over the ${target}.\"), \"Wrong result (2)\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\text\\StrSubstitutorTest.java",
  "methodName" : "testReplaceInVariableRecursive",
  "sourceCode" : "/**\r\n * Tests complex and recursive substitution in variable names.\r\n */\r\n@Test\r\nvoid testReplaceInVariableRecursive() {\r\n    values.put(\"animal.2\", \"brown fox\");\r\n    values.put(\"animal.1\", \"white mouse\");\r\n    values.put(\"color\", \"white\");\r\n    values.put(\"species.white\", \"1\");\r\n    values.put(\"species.brown\", \"2\");\r\n    final StrSubstitutor sub = new StrSubstitutor(values);\r\n    sub.setEnableSubstitutionInVariables(true);\r\n    assertEquals(\"The white mouse jumps over the lazy dog.\", sub.replace(\"The ${animal.${species.${color}}} jumps over the ${target}.\"), \"Wrong result (1)\");\r\n    assertEquals(\"The brown fox jumps over the lazy dog.\", sub.replace(\"The ${animal.${species.${unknownColor:-brown}}} jumps over the ${target}.\"), \"Wrong result (2)\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\text\\StrSubstitutorTest.java",
  "methodName" : "testReplaceNoPrefixNoSuffix",
  "sourceCode" : "/**\r\n * Tests when no prefix or suffix.\r\n */\r\n@Test\r\nvoid testReplaceNoPrefixNoSuffix() {\r\n    doTestReplace(\"The animal jumps over the lazy dog.\", \"The animal jumps over the ${target}.\", true);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\text\\StrSubstitutorTest.java",
  "methodName" : "testReplaceNoPrefixSuffix",
  "sourceCode" : "/**\r\n * Tests when suffix but no prefix.\r\n */\r\n@Test\r\nvoid testReplaceNoPrefixSuffix() {\r\n    doTestReplace(\"The animal} jumps over the lazy dog.\", \"The animal} jumps over the ${target}.\", true);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\text\\StrSubstitutorTest.java",
  "methodName" : "testReplaceNoVariables",
  "sourceCode" : "/**\r\n * Tests replace with no variables.\r\n */\r\n@Test\r\nvoid testReplaceNoVariables() {\r\n    doTestNoReplace(\"The balloon arrived.\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\text\\StrSubstitutorTest.java",
  "methodName" : "testReplaceNull",
  "sourceCode" : "/**\r\n * Tests replace with null.\r\n */\r\n@Test\r\nvoid testReplaceNull() {\r\n    doTestNoReplace(null);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\text\\StrSubstitutorTest.java",
  "methodName" : "testReplacePartialString_noReplace",
  "sourceCode" : "/**\r\n * Tests simple key replace.\r\n */\r\n@Test\r\nvoid testReplacePartialString_noReplace() {\r\n    final StrSubstitutor sub = new StrSubstitutor();\r\n    assertEquals(\"${animal} jumps\", sub.replace(\"The ${animal} jumps over the ${target}.\", 4, 15));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\text\\StrSubstitutorTest.java",
  "methodName" : "testReplacePrefixNoSuffix",
  "sourceCode" : "/**\r\n * Tests when prefix but no suffix.\r\n */\r\n@Test\r\nvoid testReplacePrefixNoSuffix() {\r\n    doTestReplace(\"The ${animal jumps over the ${target} lazy dog.\", \"The ${animal jumps over the ${target} ${target}.\", true);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\text\\StrSubstitutorTest.java",
  "methodName" : "testReplaceRecursive",
  "sourceCode" : "/**\r\n * Tests simple recursive replace.\r\n */\r\n@Test\r\nvoid testReplaceRecursive() {\r\n    values.put(\"animal\", \"${critter}\");\r\n    values.put(\"target\", \"${pet}\");\r\n    values.put(\"pet\", \"${petCharacteristic} dog\");\r\n    values.put(\"petCharacteristic\", \"lazy\");\r\n    values.put(\"critter\", \"${critterSpeed} ${critterColor} ${critterType}\");\r\n    values.put(\"critterSpeed\", \"quick\");\r\n    values.put(\"critterColor\", \"brown\");\r\n    values.put(\"critterType\", \"fox\");\r\n    doTestReplace(\"The quick brown fox jumps over the lazy dog.\", \"The ${animal} jumps over the ${target}.\", true);\r\n    values.put(\"pet\", \"${petCharacteristicUnknown:-lazy} dog\");\r\n    doTestReplace(\"The quick brown fox jumps over the lazy dog.\", \"The ${animal} jumps over the ${target}.\", true);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\text\\StrSubstitutorTest.java",
  "methodName" : "testReplaceSimple",
  "sourceCode" : "/**\r\n * Tests simple key replace.\r\n */\r\n@Test\r\nvoid testReplaceSimple() {\r\n    doTestReplace(\"The quick brown fox jumps over the lazy dog.\", \"The ${animal} jumps over the ${target}.\", true);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\text\\StrSubstitutorTest.java",
  "methodName" : "testReplaceSolo",
  "sourceCode" : "/**\r\n * Tests simple key replace.\r\n */\r\n@Test\r\nvoid testReplaceSolo() {\r\n    doTestReplace(\"quick brown fox\", \"${animal}\", false);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\text\\StrSubstitutorTest.java",
  "methodName" : "testReplaceSoloEscaping",
  "sourceCode" : "/**\r\n * Tests escaping.\r\n */\r\n@Test\r\nvoid testReplaceSoloEscaping() {\r\n    doTestReplace(\"${animal}\", \"$${animal}\", false);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\text\\StrSubstitutorTest.java",
  "methodName" : "testReplaceToIdentical",
  "sourceCode" : "/**\r\n * Tests replace creates output same as input.\r\n */\r\n@Test\r\nvoid testReplaceToIdentical() {\r\n    values.put(\"animal\", \"$${${thing}}\");\r\n    values.put(\"thing\", \"animal\");\r\n    doTestReplace(\"The ${animal} jumps.\", \"The ${animal} jumps.\", true);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\text\\StrSubstitutorTest.java",
  "methodName" : "testReplaceUnknownKey",
  "sourceCode" : "/**\r\n * Tests unknown key replace.\r\n */\r\n@Test\r\nvoid testReplaceUnknownKey() {\r\n    doTestReplace(\"The ${person} jumps over the lazy dog.\", \"The ${person} jumps over the ${target}.\", true);\r\n    doTestReplace(\"The ${person} jumps over the lazy dog. 1234567890.\", \"The ${person} jumps over the ${target}. ${undefined.number:-1234567890}.\", true);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\text\\StrSubstitutorTest.java",
  "methodName" : "testReplaceWeirdPattens",
  "sourceCode" : "/**\r\n * Tests interpolation with weird boundary patterns.\r\n */\r\n@Test\r\nvoid testReplaceWeirdPattens() {\r\n    doTestNoReplace(\"\");\r\n    doTestNoReplace(\"${}\");\r\n    doTestNoReplace(\"${ }\");\r\n    doTestNoReplace(\"${\\t}\");\r\n    doTestNoReplace(\"${\\n}\");\r\n    doTestNoReplace(\"${\\b}\");\r\n    doTestNoReplace(\"${\");\r\n    doTestNoReplace(\"$}\");\r\n    doTestNoReplace(\"}\");\r\n    doTestNoReplace(\"${}$\");\r\n    doTestNoReplace(\"${${\");\r\n    doTestNoReplace(\"${${}}\");\r\n    doTestNoReplace(\"${$${}}\");\r\n    doTestNoReplace(\"${$$${}}\");\r\n    doTestNoReplace(\"${$$${$}}\");\r\n    doTestNoReplace(\"${${}}\");\r\n    doTestNoReplace(\"${${ }}\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\text\\StrSubstitutorTest.java",
  "methodName" : "testResolveVariable",
  "sourceCode" : "/**\r\n * Tests protected.\r\n */\r\n@Test\r\nvoid testResolveVariable() {\r\n    final StrBuilder builder = new StrBuilder(\"Hi ${name}!\");\r\n    final Map<String, String> map = new HashMap<>();\r\n    map.put(\"name\", \"commons\");\r\n    final StrSubstitutor sub = new StrSubstitutor(map) {\r\n\r\n        @Override\r\n        protected String resolveVariable(final String variableName, final StrBuilder buf, final int startPos, final int endPos) {\r\n            assertEquals(\"name\", variableName);\r\n            assertSame(builder, buf);\r\n            assertEquals(3, startPos);\r\n            assertEquals(10, endPos);\r\n            return \"jakarta\";\r\n        }\r\n    };\r\n    sub.replaceIn(builder);\r\n    assertEquals(\"Hi jakarta!\", builder.toString());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\text\\StrSubstitutorTest.java",
  "methodName" : "testSamePrefixAndSuffix",
  "sourceCode" : "@Test\r\nvoid testSamePrefixAndSuffix() {\r\n    final Map<String, String> map = new HashMap<>();\r\n    map.put(\"greeting\", \"Hello\");\r\n    map.put(\" there \", \"XXX\");\r\n    map.put(\"name\", \"commons\");\r\n    assertEquals(\"Hi commons!\", StrSubstitutor.replace(\"Hi @name@!\", map, \"@\", \"@\"));\r\n    assertEquals(\"Hello there commons!\", StrSubstitutor.replace(\"@greeting@ there @name@!\", map, \"@\", \"@\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\text\\StrSubstitutorTest.java",
  "methodName" : "testStaticReplace",
  "sourceCode" : "/**\r\n * Tests static.\r\n */\r\n@Test\r\nvoid testStaticReplace() {\r\n    final Map<String, String> map = new HashMap<>();\r\n    map.put(\"name\", \"commons\");\r\n    assertEquals(\"Hi commons!\", StrSubstitutor.replace(\"Hi ${name}!\", map));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\text\\StrSubstitutorTest.java",
  "methodName" : "testStaticReplacePrefixSuffix",
  "sourceCode" : "/**\r\n * Tests static.\r\n */\r\n@Test\r\nvoid testStaticReplacePrefixSuffix() {\r\n    final Map<String, String> map = new HashMap<>();\r\n    map.put(\"name\", \"commons\");\r\n    assertEquals(\"Hi commons!\", StrSubstitutor.replace(\"Hi <name>!\", map, \"<\", \">\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\text\\StrSubstitutorTest.java",
  "methodName" : "testStaticReplaceSystemProperties",
  "sourceCode" : "/**\r\n * Tests interpolation with system properties.\r\n */\r\n@Test\r\nvoid testStaticReplaceSystemProperties() {\r\n    final StrBuilder buf = new StrBuilder();\r\n    buf.append(\"Hi \").append(SystemProperties.getUserName());\r\n    buf.append(\", you are working with \");\r\n    buf.append(SystemProperties.getOsName());\r\n    buf.append(\", your home directory is \");\r\n    buf.append(SystemProperties.getUserHome()).append('.');\r\n    assertEquals(buf.toString(), StrSubstitutor.replaceSystemProperties(\"Hi ${user.name}, you are \" + \"working with ${os.name}, your home \" + \"directory is ${user.home}.\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\text\\StrSubstitutorTest.java",
  "methodName" : "testSubstituteDefaultProperties",
  "sourceCode" : "/**\r\n * Test the replace of a properties object\r\n */\r\n@Test\r\nvoid testSubstituteDefaultProperties() {\r\n    final String org = \"${doesnotwork}\";\r\n    System.setProperty(\"doesnotwork\", \"It works!\");\r\n    // create a new Properties object with the System.getProperties as default\r\n    final Properties props = new Properties(System.getProperties());\r\n    assertEquals(\"It works!\", StrSubstitutor.replace(org, props));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\text\\StrSubstitutorTest.java",
  "methodName" : "testSubstitutePreserveEscape",
  "sourceCode" : "@Test\r\nvoid testSubstitutePreserveEscape() {\r\n    final String org = \"${not-escaped} $${escaped}\";\r\n    final Map<String, String> map = new HashMap<>();\r\n    map.put(\"not-escaped\", \"value\");\r\n    final StrSubstitutor sub = new StrSubstitutor(map, \"${\", \"}\", '$');\r\n    assertFalse(sub.isPreserveEscapes());\r\n    assertEquals(\"value ${escaped}\", sub.replace(org));\r\n    sub.setPreserveEscapes(true);\r\n    assertTrue(sub.isPreserveEscapes());\r\n    assertEquals(\"value $${escaped}\", sub.replace(org));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\text\\StrTokenizerTest.java",
  "methodName" : "test1",
  "sourceCode" : "@Test\r\nvoid test1() {\r\n    final String input = \"a;b;c;\\\"d;\\\"\\\"e\\\";f; ; ;  \";\r\n    final StrTokenizer tok = new StrTokenizer(input);\r\n    tok.setDelimiterChar(';');\r\n    tok.setQuoteChar('\"');\r\n    tok.setIgnoredMatcher(StrMatcher.trimMatcher());\r\n    tok.setIgnoreEmptyTokens(false);\r\n    final String[] tokens = tok.getTokenArray();\r\n    final String[] expected = { \"a\", \"b\", \"c\", \"d;\\\"e\", \"f\", \"\", \"\", \"\" };\r\n    assertEquals(expected.length, tokens.length, ArrayUtils.toString(tokens));\r\n    for (int i = 0; i < expected.length; i++) {\r\n        assertEquals(expected[i], tokens[i], \"token[\" + i + \"] was '\" + tokens[i] + \"' but was expected to be '\" + expected[i] + \"'\");\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\text\\StrTokenizerTest.java",
  "methodName" : "test2",
  "sourceCode" : "@Test\r\nvoid test2() {\r\n    final String input = \"a;b;c ;\\\"d;\\\"\\\"e\\\";f; ; ;\";\r\n    final StrTokenizer tok = new StrTokenizer(input);\r\n    tok.setDelimiterChar(';');\r\n    tok.setQuoteChar('\"');\r\n    tok.setIgnoredMatcher(StrMatcher.noneMatcher());\r\n    tok.setIgnoreEmptyTokens(false);\r\n    final String[] tokens = tok.getTokenArray();\r\n    final String[] expected = { \"a\", \"b\", \"c \", \"d;\\\"e\", \"f\", \" \", \" \", \"\" };\r\n    assertEquals(expected.length, tokens.length, ArrayUtils.toString(tokens));\r\n    for (int i = 0; i < expected.length; i++) {\r\n        assertEquals(expected[i], tokens[i], \"token[\" + i + \"] was '\" + tokens[i] + \"' but was expected to be '\" + expected[i] + \"'\");\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\text\\StrTokenizerTest.java",
  "methodName" : "test3",
  "sourceCode" : "@Test\r\nvoid test3() {\r\n    final String input = \"a;b; c;\\\"d;\\\"\\\"e\\\";f; ; ;\";\r\n    final StrTokenizer tok = new StrTokenizer(input);\r\n    tok.setDelimiterChar(';');\r\n    tok.setQuoteChar('\"');\r\n    tok.setIgnoredMatcher(StrMatcher.noneMatcher());\r\n    tok.setIgnoreEmptyTokens(false);\r\n    final String[] tokens = tok.getTokenArray();\r\n    final String[] expected = { \"a\", \"b\", \" c\", \"d;\\\"e\", \"f\", \" \", \" \", \"\" };\r\n    assertEquals(expected.length, tokens.length, ArrayUtils.toString(tokens));\r\n    for (int i = 0; i < expected.length; i++) {\r\n        assertEquals(expected[i], tokens[i], \"token[\" + i + \"] was '\" + tokens[i] + \"' but was expected to be '\" + expected[i] + \"'\");\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\text\\StrTokenizerTest.java",
  "methodName" : "test4",
  "sourceCode" : "@Test\r\nvoid test4() {\r\n    final String input = \"a;b; c;\\\"d;\\\"\\\"e\\\";f; ; ;\";\r\n    final StrTokenizer tok = new StrTokenizer(input);\r\n    tok.setDelimiterChar(';');\r\n    tok.setQuoteChar('\"');\r\n    tok.setIgnoredMatcher(StrMatcher.trimMatcher());\r\n    tok.setIgnoreEmptyTokens(true);\r\n    final String[] tokens = tok.getTokenArray();\r\n    final String[] expected = { \"a\", \"b\", \"c\", \"d;\\\"e\", \"f\" };\r\n    assertEquals(expected.length, tokens.length, ArrayUtils.toString(tokens));\r\n    for (int i = 0; i < expected.length; i++) {\r\n        assertEquals(expected[i], tokens[i], \"token[\" + i + \"] was '\" + tokens[i] + \"' but was expected to be '\" + expected[i] + \"'\");\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\text\\StrTokenizerTest.java",
  "methodName" : "test5",
  "sourceCode" : "@Test\r\nvoid test5() {\r\n    final String input = \"a;b; c;\\\"d;\\\"\\\"e\\\";f; ; ;\";\r\n    final StrTokenizer tok = new StrTokenizer(input);\r\n    tok.setDelimiterChar(';');\r\n    tok.setQuoteChar('\"');\r\n    tok.setIgnoredMatcher(StrMatcher.trimMatcher());\r\n    tok.setIgnoreEmptyTokens(false);\r\n    tok.setEmptyTokenAsNull(true);\r\n    final String[] tokens = tok.getTokenArray();\r\n    final String[] expected = { \"a\", \"b\", \"c\", \"d;\\\"e\", \"f\", null, null, null };\r\n    assertEquals(expected.length, tokens.length, ArrayUtils.toString(tokens));\r\n    for (int i = 0; i < expected.length; i++) {\r\n        assertEquals(expected[i], tokens[i], \"token[\" + i + \"] was '\" + tokens[i] + \"' but was expected to be '\" + expected[i] + \"'\");\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\text\\StrTokenizerTest.java",
  "methodName" : "test6",
  "sourceCode" : "@Test\r\nvoid test6() {\r\n    final String input = \"a;b; c;\\\"d;\\\"\\\"e\\\";f; ; ;\";\r\n    final StrTokenizer tok = new StrTokenizer(input);\r\n    tok.setDelimiterChar(';');\r\n    tok.setQuoteChar('\"');\r\n    tok.setIgnoredMatcher(StrMatcher.trimMatcher());\r\n    tok.setIgnoreEmptyTokens(false);\r\n    // tok.setTreatingEmptyAsNull(true);\r\n    final String[] tokens = tok.getTokenArray();\r\n    final String[] expected = { \"a\", \"b\", \" c\", \"d;\\\"e\", \"f\", null, null, null };\r\n    int nextCount = 0;\r\n    while (tok.hasNext()) {\r\n        tok.next();\r\n        nextCount++;\r\n    }\r\n    int prevCount = 0;\r\n    while (tok.hasPrevious()) {\r\n        tok.previous();\r\n        prevCount++;\r\n    }\r\n    assertEquals(expected.length, tokens.length, ArrayUtils.toString(tokens));\r\n    assertEquals(nextCount, expected.length, \"could not cycle through entire token list using the 'hasNext' and 'next' methods\");\r\n    assertEquals(prevCount, expected.length, \"could not cycle through entire token list using the 'hasPrevious' and 'previous' methods\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\text\\StrTokenizerTest.java",
  "methodName" : "test7",
  "sourceCode" : "@Test\r\nvoid test7() {\r\n    final String input = \"a   b c \\\"d e\\\" f \";\r\n    final StrTokenizer tok = new StrTokenizer(input);\r\n    tok.setDelimiterMatcher(StrMatcher.spaceMatcher());\r\n    tok.setQuoteMatcher(StrMatcher.doubleQuoteMatcher());\r\n    tok.setIgnoredMatcher(StrMatcher.noneMatcher());\r\n    tok.setIgnoreEmptyTokens(false);\r\n    final String[] tokens = tok.getTokenArray();\r\n    final String[] expected = { \"a\", \"\", \"\", \"b\", \"c\", \"d e\", \"f\", \"\" };\r\n    assertEquals(expected.length, tokens.length, ArrayUtils.toString(tokens));\r\n    for (int i = 0; i < expected.length; i++) {\r\n        assertEquals(expected[i], tokens[i], \"token[\" + i + \"] was '\" + tokens[i] + \"' but was expected to be '\" + expected[i] + \"'\");\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\text\\StrTokenizerTest.java",
  "methodName" : "test8",
  "sourceCode" : "@Test\r\nvoid test8() {\r\n    final String input = \"a   b c \\\"d e\\\" f \";\r\n    final StrTokenizer tok = new StrTokenizer(input);\r\n    tok.setDelimiterMatcher(StrMatcher.spaceMatcher());\r\n    tok.setQuoteMatcher(StrMatcher.doubleQuoteMatcher());\r\n    tok.setIgnoredMatcher(StrMatcher.noneMatcher());\r\n    tok.setIgnoreEmptyTokens(true);\r\n    final String[] tokens = tok.getTokenArray();\r\n    final String[] expected = { \"a\", \"b\", \"c\", \"d e\", \"f\" };\r\n    assertEquals(expected.length, tokens.length, ArrayUtils.toString(tokens));\r\n    for (int i = 0; i < expected.length; i++) {\r\n        assertEquals(expected[i], tokens[i], \"token[\" + i + \"] was '\" + tokens[i] + \"' but was expected to be '\" + expected[i] + \"'\");\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\text\\StrTokenizerTest.java",
  "methodName" : "testBasic1",
  "sourceCode" : "@Test\r\nvoid testBasic1() {\r\n    final String input = \"a  b c\";\r\n    final StrTokenizer tok = new StrTokenizer(input);\r\n    assertEquals(\"a\", tok.next());\r\n    assertEquals(\"b\", tok.next());\r\n    assertEquals(\"c\", tok.next());\r\n    assertFalse(tok.hasNext());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\text\\StrTokenizerTest.java",
  "methodName" : "testBasic2",
  "sourceCode" : "@Test\r\nvoid testBasic2() {\r\n    final String input = \"a \\nb\\fc\";\r\n    final StrTokenizer tok = new StrTokenizer(input);\r\n    assertEquals(\"a\", tok.next());\r\n    assertEquals(\"b\", tok.next());\r\n    assertEquals(\"c\", tok.next());\r\n    assertFalse(tok.hasNext());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\text\\StrTokenizerTest.java",
  "methodName" : "testBasic3",
  "sourceCode" : "@Test\r\nvoid testBasic3() {\r\n    final String input = \"a \\nb\\u0001\\fc\";\r\n    final StrTokenizer tok = new StrTokenizer(input);\r\n    assertEquals(\"a\", tok.next());\r\n    assertEquals(\"b\\u0001\", tok.next());\r\n    assertEquals(\"c\", tok.next());\r\n    assertFalse(tok.hasNext());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\text\\StrTokenizerTest.java",
  "methodName" : "testBasic4",
  "sourceCode" : "@Test\r\nvoid testBasic4() {\r\n    final String input = \"a \\\"b\\\" c\";\r\n    final StrTokenizer tok = new StrTokenizer(input);\r\n    assertEquals(\"a\", tok.next());\r\n    assertEquals(\"\\\"b\\\"\", tok.next());\r\n    assertEquals(\"c\", tok.next());\r\n    assertFalse(tok.hasNext());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\text\\StrTokenizerTest.java",
  "methodName" : "testBasic5",
  "sourceCode" : "@Test\r\nvoid testBasic5() {\r\n    final String input = \"a:b':c\";\r\n    final StrTokenizer tok = new StrTokenizer(input, ':', '\\'');\r\n    assertEquals(\"a\", tok.next());\r\n    assertEquals(\"b'\", tok.next());\r\n    assertEquals(\"c\", tok.next());\r\n    assertFalse(tok.hasNext());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\text\\StrTokenizerTest.java",
  "methodName" : "testBasicDelim1",
  "sourceCode" : "@Test\r\nvoid testBasicDelim1() {\r\n    final String input = \"a:b:c\";\r\n    final StrTokenizer tok = new StrTokenizer(input, ':');\r\n    assertEquals(\"a\", tok.next());\r\n    assertEquals(\"b\", tok.next());\r\n    assertEquals(\"c\", tok.next());\r\n    assertFalse(tok.hasNext());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\text\\StrTokenizerTest.java",
  "methodName" : "testBasicDelim2",
  "sourceCode" : "@Test\r\nvoid testBasicDelim2() {\r\n    final String input = \"a:b:c\";\r\n    final StrTokenizer tok = new StrTokenizer(input, ',');\r\n    assertEquals(\"a:b:c\", tok.next());\r\n    assertFalse(tok.hasNext());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\text\\StrTokenizerTest.java",
  "methodName" : "testBasicEmpty1",
  "sourceCode" : "@Test\r\nvoid testBasicEmpty1() {\r\n    final String input = \"a  b c\";\r\n    final StrTokenizer tok = new StrTokenizer(input);\r\n    tok.setIgnoreEmptyTokens(false);\r\n    assertEquals(\"a\", tok.next());\r\n    assertEquals(\"\", tok.next());\r\n    assertEquals(\"b\", tok.next());\r\n    assertEquals(\"c\", tok.next());\r\n    assertFalse(tok.hasNext());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\text\\StrTokenizerTest.java",
  "methodName" : "testBasicEmpty2",
  "sourceCode" : "@Test\r\nvoid testBasicEmpty2() {\r\n    final String input = \"a  b c\";\r\n    final StrTokenizer tok = new StrTokenizer(input);\r\n    tok.setIgnoreEmptyTokens(false);\r\n    tok.setEmptyTokenAsNull(true);\r\n    assertEquals(\"a\", tok.next());\r\n    assertNull(tok.next());\r\n    assertEquals(\"b\", tok.next());\r\n    assertEquals(\"c\", tok.next());\r\n    assertFalse(tok.hasNext());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\text\\StrTokenizerTest.java",
  "methodName" : "testBasicIgnoreTrimmed1",
  "sourceCode" : "@Test\r\nvoid testBasicIgnoreTrimmed1() {\r\n    final String input = \"a: bIGNOREc : \";\r\n    final StrTokenizer tok = new StrTokenizer(input, ':');\r\n    tok.setIgnoredMatcher(StrMatcher.stringMatcher(\"IGNORE\"));\r\n    tok.setTrimmerMatcher(StrMatcher.trimMatcher());\r\n    tok.setIgnoreEmptyTokens(false);\r\n    tok.setEmptyTokenAsNull(true);\r\n    assertEquals(\"a\", tok.next());\r\n    assertEquals(\"bc\", tok.next());\r\n    assertNull(tok.next());\r\n    assertFalse(tok.hasNext());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\text\\StrTokenizerTest.java",
  "methodName" : "testBasicIgnoreTrimmed2",
  "sourceCode" : "@Test\r\nvoid testBasicIgnoreTrimmed2() {\r\n    final String input = \"IGNOREaIGNORE: IGNORE bIGNOREc IGNORE : IGNORE \";\r\n    final StrTokenizer tok = new StrTokenizer(input, ':');\r\n    tok.setIgnoredMatcher(StrMatcher.stringMatcher(\"IGNORE\"));\r\n    tok.setTrimmerMatcher(StrMatcher.trimMatcher());\r\n    tok.setIgnoreEmptyTokens(false);\r\n    tok.setEmptyTokenAsNull(true);\r\n    assertEquals(\"a\", tok.next());\r\n    assertEquals(\"bc\", tok.next());\r\n    assertNull(tok.next());\r\n    assertFalse(tok.hasNext());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\text\\StrTokenizerTest.java",
  "methodName" : "testBasicIgnoreTrimmed3",
  "sourceCode" : "@Test\r\nvoid testBasicIgnoreTrimmed3() {\r\n    final String input = \"IGNOREaIGNORE: IGNORE bIGNOREc IGNORE : IGNORE \";\r\n    final StrTokenizer tok = new StrTokenizer(input, ':');\r\n    tok.setIgnoredMatcher(StrMatcher.stringMatcher(\"IGNORE\"));\r\n    tok.setIgnoreEmptyTokens(false);\r\n    tok.setEmptyTokenAsNull(true);\r\n    assertEquals(\"a\", tok.next());\r\n    assertEquals(\"  bc  \", tok.next());\r\n    assertEquals(\"  \", tok.next());\r\n    assertFalse(tok.hasNext());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\text\\StrTokenizerTest.java",
  "methodName" : "testBasicIgnoreTrimmed4",
  "sourceCode" : "@Test\r\nvoid testBasicIgnoreTrimmed4() {\r\n    final String input = \"IGNOREaIGNORE: IGNORE 'bIGNOREc'IGNORE'd' IGNORE : IGNORE \";\r\n    final StrTokenizer tok = new StrTokenizer(input, ':', '\\'');\r\n    tok.setIgnoredMatcher(StrMatcher.stringMatcher(\"IGNORE\"));\r\n    tok.setTrimmerMatcher(StrMatcher.trimMatcher());\r\n    tok.setIgnoreEmptyTokens(false);\r\n    tok.setEmptyTokenAsNull(true);\r\n    assertEquals(\"a\", tok.next());\r\n    assertEquals(\"bIGNOREcd\", tok.next());\r\n    assertNull(tok.next());\r\n    assertFalse(tok.hasNext());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\text\\StrTokenizerTest.java",
  "methodName" : "testBasicQuoted1",
  "sourceCode" : "@Test\r\nvoid testBasicQuoted1() {\r\n    final String input = \"a 'b' c\";\r\n    final StrTokenizer tok = new StrTokenizer(input, ' ', '\\'');\r\n    assertEquals(\"a\", tok.next());\r\n    assertEquals(\"b\", tok.next());\r\n    assertEquals(\"c\", tok.next());\r\n    assertFalse(tok.hasNext());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\text\\StrTokenizerTest.java",
  "methodName" : "testBasicQuoted2",
  "sourceCode" : "@Test\r\nvoid testBasicQuoted2() {\r\n    final String input = \"a:'b':\";\r\n    final StrTokenizer tok = new StrTokenizer(input, ':', '\\'');\r\n    tok.setIgnoreEmptyTokens(false);\r\n    tok.setEmptyTokenAsNull(true);\r\n    assertEquals(\"a\", tok.next());\r\n    assertEquals(\"b\", tok.next());\r\n    assertNull(tok.next());\r\n    assertFalse(tok.hasNext());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\text\\StrTokenizerTest.java",
  "methodName" : "testBasicQuoted3",
  "sourceCode" : "@Test\r\nvoid testBasicQuoted3() {\r\n    final String input = \"a:'b''c'\";\r\n    final StrTokenizer tok = new StrTokenizer(input, ':', '\\'');\r\n    tok.setIgnoreEmptyTokens(false);\r\n    tok.setEmptyTokenAsNull(true);\r\n    assertEquals(\"a\", tok.next());\r\n    assertEquals(\"b'c\", tok.next());\r\n    assertFalse(tok.hasNext());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\text\\StrTokenizerTest.java",
  "methodName" : "testBasicQuoted4",
  "sourceCode" : "@Test\r\nvoid testBasicQuoted4() {\r\n    final String input = \"a: 'b' 'c' :d\";\r\n    final StrTokenizer tok = new StrTokenizer(input, ':', '\\'');\r\n    tok.setTrimmerMatcher(StrMatcher.trimMatcher());\r\n    tok.setIgnoreEmptyTokens(false);\r\n    tok.setEmptyTokenAsNull(true);\r\n    assertEquals(\"a\", tok.next());\r\n    assertEquals(\"b c\", tok.next());\r\n    assertEquals(\"d\", tok.next());\r\n    assertFalse(tok.hasNext());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\text\\StrTokenizerTest.java",
  "methodName" : "testBasicQuoted5",
  "sourceCode" : "@Test\r\nvoid testBasicQuoted5() {\r\n    final String input = \"a: 'b'x'c' :d\";\r\n    final StrTokenizer tok = new StrTokenizer(input, ':', '\\'');\r\n    tok.setTrimmerMatcher(StrMatcher.trimMatcher());\r\n    tok.setIgnoreEmptyTokens(false);\r\n    tok.setEmptyTokenAsNull(true);\r\n    assertEquals(\"a\", tok.next());\r\n    assertEquals(\"bxc\", tok.next());\r\n    assertEquals(\"d\", tok.next());\r\n    assertFalse(tok.hasNext());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\text\\StrTokenizerTest.java",
  "methodName" : "testBasicQuoted6",
  "sourceCode" : "@Test\r\nvoid testBasicQuoted6() {\r\n    final String input = \"a:'b'\\\"c':d\";\r\n    final StrTokenizer tok = new StrTokenizer(input, ':');\r\n    tok.setQuoteMatcher(StrMatcher.quoteMatcher());\r\n    assertEquals(\"a\", tok.next());\r\n    assertEquals(\"b\\\"c:d\", tok.next());\r\n    assertFalse(tok.hasNext());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\text\\StrTokenizerTest.java",
  "methodName" : "testBasicQuoted7",
  "sourceCode" : "@Test\r\nvoid testBasicQuoted7() {\r\n    final String input = \"a:\\\"There's a reason here\\\":b\";\r\n    final StrTokenizer tok = new StrTokenizer(input, ':');\r\n    tok.setQuoteMatcher(StrMatcher.quoteMatcher());\r\n    assertEquals(\"a\", tok.next());\r\n    assertEquals(\"There's a reason here\", tok.next());\r\n    assertEquals(\"b\", tok.next());\r\n    assertFalse(tok.hasNext());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\text\\StrTokenizerTest.java",
  "methodName" : "testBasicQuotedTrimmed1",
  "sourceCode" : "@Test\r\nvoid testBasicQuotedTrimmed1() {\r\n    final String input = \"a: 'b' :\";\r\n    final StrTokenizer tok = new StrTokenizer(input, ':', '\\'');\r\n    tok.setTrimmerMatcher(StrMatcher.trimMatcher());\r\n    tok.setIgnoreEmptyTokens(false);\r\n    tok.setEmptyTokenAsNull(true);\r\n    assertEquals(\"a\", tok.next());\r\n    assertEquals(\"b\", tok.next());\r\n    assertNull(tok.next());\r\n    assertFalse(tok.hasNext());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\text\\StrTokenizerTest.java",
  "methodName" : "testBasicTrimmed1",
  "sourceCode" : "@Test\r\nvoid testBasicTrimmed1() {\r\n    final String input = \"a: b :  \";\r\n    final StrTokenizer tok = new StrTokenizer(input, ':');\r\n    tok.setTrimmerMatcher(StrMatcher.trimMatcher());\r\n    tok.setIgnoreEmptyTokens(false);\r\n    tok.setEmptyTokenAsNull(true);\r\n    assertEquals(\"a\", tok.next());\r\n    assertEquals(\"b\", tok.next());\r\n    assertNull(tok.next());\r\n    assertFalse(tok.hasNext());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\text\\StrTokenizerTest.java",
  "methodName" : "testBasicTrimmed2",
  "sourceCode" : "@Test\r\nvoid testBasicTrimmed2() {\r\n    final String input = \"a:  b  :\";\r\n    final StrTokenizer tok = new StrTokenizer(input, ':');\r\n    tok.setTrimmerMatcher(StrMatcher.stringMatcher(\"  \"));\r\n    tok.setIgnoreEmptyTokens(false);\r\n    tok.setEmptyTokenAsNull(true);\r\n    assertEquals(\"a\", tok.next());\r\n    assertEquals(\"b\", tok.next());\r\n    assertNull(tok.next());\r\n    assertFalse(tok.hasNext());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\text\\StrTokenizerTest.java",
  "methodName" : "testChaining",
  "sourceCode" : "@Test\r\nvoid testChaining() {\r\n    final StrTokenizer tok = new StrTokenizer();\r\n    assertEquals(tok, tok.reset());\r\n    assertEquals(tok, tok.reset(\"\"));\r\n    assertEquals(tok, tok.reset(new char[0]));\r\n    assertEquals(tok, tok.setDelimiterChar(' '));\r\n    assertEquals(tok, tok.setDelimiterString(\" \"));\r\n    assertEquals(tok, tok.setDelimiterMatcher(null));\r\n    assertEquals(tok, tok.setQuoteChar(' '));\r\n    assertEquals(tok, tok.setQuoteMatcher(null));\r\n    assertEquals(tok, tok.setIgnoredChar(' '));\r\n    assertEquals(tok, tok.setIgnoredMatcher(null));\r\n    assertEquals(tok, tok.setTrimmerMatcher(null));\r\n    assertEquals(tok, tok.setEmptyTokenAsNull(false));\r\n    assertEquals(tok, tok.setIgnoreEmptyTokens(false));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\text\\StrTokenizerTest.java",
  "methodName" : "testCloneNotSupportedException",
  "sourceCode" : "/**\r\n * Tests that the {@link StrTokenizer#clone()} clone method catches {@link CloneNotSupportedException} and returns\r\n * {@code null}.\r\n */\r\n@Test\r\nvoid testCloneNotSupportedException() {\r\n    final Object notCloned = new StrTokenizer() {\r\n\r\n        @Override\r\n        Object cloneReset() throws CloneNotSupportedException {\r\n            throw new CloneNotSupportedException(\"test\");\r\n        }\r\n    }.clone();\r\n    assertNull(notCloned);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\text\\StrTokenizerTest.java",
  "methodName" : "testCloneNull",
  "sourceCode" : "@Test\r\nvoid testCloneNull() {\r\n    final StrTokenizer tokenizer = new StrTokenizer((char[]) null);\r\n    // Start sanity check\r\n    assertNull(tokenizer.nextToken());\r\n    tokenizer.reset();\r\n    assertNull(tokenizer.nextToken());\r\n    // End sanity check\r\n    final StrTokenizer clonedTokenizer = (StrTokenizer) tokenizer.clone();\r\n    tokenizer.reset();\r\n    assertNull(tokenizer.nextToken());\r\n    assertNull(clonedTokenizer.nextToken());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\text\\StrTokenizerTest.java",
  "methodName" : "testCloneReset",
  "sourceCode" : "@Test\r\nvoid testCloneReset() {\r\n    final char[] input = { 'a' };\r\n    final StrTokenizer tokenizer = new StrTokenizer(input);\r\n    // Start sanity check\r\n    assertEquals(\"a\", tokenizer.nextToken());\r\n    tokenizer.reset(input);\r\n    assertEquals(\"a\", tokenizer.nextToken());\r\n    // End sanity check\r\n    final StrTokenizer clonedTokenizer = (StrTokenizer) tokenizer.clone();\r\n    input[0] = 'b';\r\n    tokenizer.reset(input);\r\n    assertEquals(\"b\", tokenizer.nextToken());\r\n    assertEquals(\"a\", clonedTokenizer.nextToken());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\text\\StrTokenizerTest.java",
  "methodName" : "testConstructor_charArray",
  "sourceCode" : "@Test\r\nvoid testConstructor_charArray() {\r\n    StrTokenizer tok = new StrTokenizer(\"a b\".toCharArray());\r\n    assertEquals(\"a\", tok.next());\r\n    assertEquals(\"b\", tok.next());\r\n    assertFalse(tok.hasNext());\r\n    tok = new StrTokenizer(new char[0]);\r\n    assertFalse(tok.hasNext());\r\n    tok = new StrTokenizer((char[]) null);\r\n    assertFalse(tok.hasNext());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\text\\StrTokenizerTest.java",
  "methodName" : "testConstructor_charArray_char",
  "sourceCode" : "@Test\r\nvoid testConstructor_charArray_char() {\r\n    StrTokenizer tok = new StrTokenizer(\"a b\".toCharArray(), ' ');\r\n    assertEquals(1, tok.getDelimiterMatcher().isMatch(\" \".toCharArray(), 0, 0, 1));\r\n    assertEquals(\"a\", tok.next());\r\n    assertEquals(\"b\", tok.next());\r\n    assertFalse(tok.hasNext());\r\n    tok = new StrTokenizer(new char[0], ' ');\r\n    assertFalse(tok.hasNext());\r\n    tok = new StrTokenizer((char[]) null, ' ');\r\n    assertFalse(tok.hasNext());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\text\\StrTokenizerTest.java",
  "methodName" : "testConstructor_charArray_char_char",
  "sourceCode" : "@Test\r\nvoid testConstructor_charArray_char_char() {\r\n    StrTokenizer tok = new StrTokenizer(\"a b\".toCharArray(), ' ', '\"');\r\n    assertEquals(1, tok.getDelimiterMatcher().isMatch(\" \".toCharArray(), 0, 0, 1));\r\n    assertEquals(1, tok.getQuoteMatcher().isMatch(\"\\\"\".toCharArray(), 0, 0, 1));\r\n    assertEquals(\"a\", tok.next());\r\n    assertEquals(\"b\", tok.next());\r\n    assertFalse(tok.hasNext());\r\n    tok = new StrTokenizer(new char[0], ' ', '\"');\r\n    assertFalse(tok.hasNext());\r\n    tok = new StrTokenizer((char[]) null, ' ', '\"');\r\n    assertFalse(tok.hasNext());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\text\\StrTokenizerTest.java",
  "methodName" : "testConstructor_String",
  "sourceCode" : "@Test\r\nvoid testConstructor_String() {\r\n    StrTokenizer tok = new StrTokenizer(\"a b\");\r\n    assertEquals(\"a\", tok.next());\r\n    assertEquals(\"b\", tok.next());\r\n    assertFalse(tok.hasNext());\r\n    tok = new StrTokenizer(\"\");\r\n    assertFalse(tok.hasNext());\r\n    tok = new StrTokenizer((String) null);\r\n    assertFalse(tok.hasNext());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\text\\StrTokenizerTest.java",
  "methodName" : "testConstructor_String_char",
  "sourceCode" : "@Test\r\nvoid testConstructor_String_char() {\r\n    StrTokenizer tok = new StrTokenizer(\"a b\", ' ');\r\n    assertEquals(1, tok.getDelimiterMatcher().isMatch(\" \".toCharArray(), 0, 0, 1));\r\n    assertEquals(\"a\", tok.next());\r\n    assertEquals(\"b\", tok.next());\r\n    assertFalse(tok.hasNext());\r\n    tok = new StrTokenizer(\"\", ' ');\r\n    assertFalse(tok.hasNext());\r\n    tok = new StrTokenizer((String) null, ' ');\r\n    assertFalse(tok.hasNext());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\text\\StrTokenizerTest.java",
  "methodName" : "testConstructor_String_char_char",
  "sourceCode" : "@Test\r\nvoid testConstructor_String_char_char() {\r\n    StrTokenizer tok = new StrTokenizer(\"a b\", ' ', '\"');\r\n    assertEquals(1, tok.getDelimiterMatcher().isMatch(\" \".toCharArray(), 0, 0, 1));\r\n    assertEquals(1, tok.getQuoteMatcher().isMatch(\"\\\"\".toCharArray(), 0, 0, 1));\r\n    assertEquals(\"a\", tok.next());\r\n    assertEquals(\"b\", tok.next());\r\n    assertFalse(tok.hasNext());\r\n    tok = new StrTokenizer(\"\", ' ', '\"');\r\n    assertFalse(tok.hasNext());\r\n    tok = new StrTokenizer((String) null, ' ', '\"');\r\n    assertFalse(tok.hasNext());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\text\\StrTokenizerTest.java",
  "methodName" : "testCSVEmpty",
  "sourceCode" : "@Test\r\nvoid testCSVEmpty() {\r\n    testEmpty(StrTokenizer.getCSVInstance());\r\n    testEmpty(StrTokenizer.getCSVInstance(\"\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\text\\StrTokenizerTest.java",
  "methodName" : "testCSVSimple",
  "sourceCode" : "@Test\r\nvoid testCSVSimple() {\r\n    testCSV(CSV_SIMPLE_FIXTURE);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\text\\StrTokenizerTest.java",
  "methodName" : "testCSVSimpleNeedsTrim",
  "sourceCode" : "@Test\r\nvoid testCSVSimpleNeedsTrim() {\r\n    testCSV(\"   \" + CSV_SIMPLE_FIXTURE);\r\n    testCSV(\"   \\n\\t  \" + CSV_SIMPLE_FIXTURE);\r\n    testCSV(\"   \\n  \" + CSV_SIMPLE_FIXTURE + \"\\n\\n\\r\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\text\\StrTokenizerTest.java",
  "methodName" : "testGetContent",
  "sourceCode" : "@Test\r\nvoid testGetContent() {\r\n    final String input = \"a   b c \\\"d e\\\" f \";\r\n    StrTokenizer tok = new StrTokenizer(input);\r\n    assertEquals(input, tok.getContent());\r\n    tok = new StrTokenizer(input.toCharArray());\r\n    assertEquals(input, tok.getContent());\r\n    tok = new StrTokenizer();\r\n    assertNull(tok.getContent());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\text\\StrTokenizerTest.java",
  "methodName" : "testIteration",
  "sourceCode" : "@Test\r\nvoid testIteration() {\r\n    final StrTokenizer tkn = new StrTokenizer(\"a b c\");\r\n    assertFalse(tkn.hasPrevious());\r\n    assertThrows(NoSuchElementException.class, tkn::previous);\r\n    assertTrue(tkn.hasNext());\r\n    assertEquals(\"a\", tkn.next());\r\n    assertThrows(UnsupportedOperationException.class, tkn::remove);\r\n    assertThrows(UnsupportedOperationException.class, () -> tkn.set(\"x\"));\r\n    assertThrows(UnsupportedOperationException.class, () -> tkn.add(\"y\"));\r\n    assertTrue(tkn.hasPrevious());\r\n    assertTrue(tkn.hasNext());\r\n    assertEquals(\"b\", tkn.next());\r\n    assertTrue(tkn.hasPrevious());\r\n    assertTrue(tkn.hasNext());\r\n    assertEquals(\"c\", tkn.next());\r\n    assertTrue(tkn.hasPrevious());\r\n    assertFalse(tkn.hasNext());\r\n    assertThrows(NoSuchElementException.class, tkn::next);\r\n    assertTrue(tkn.hasPrevious());\r\n    assertFalse(tkn.hasNext());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\text\\StrTokenizerTest.java",
  "methodName" : "testListArray",
  "sourceCode" : "@Test\r\nvoid testListArray() {\r\n    final String input = \"a  b c\";\r\n    final StrTokenizer tok = new StrTokenizer(input);\r\n    final String[] array = tok.getTokenArray();\r\n    final List<?> list = tok.getTokenList();\r\n    assertEquals(Arrays.asList(array), list);\r\n    assertEquals(3, list.size());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\text\\StrTokenizerTest.java",
  "methodName" : "testReset",
  "sourceCode" : "@Test\r\nvoid testReset() {\r\n    final StrTokenizer tok = new StrTokenizer(\"a b c\");\r\n    assertEquals(\"a\", tok.next());\r\n    assertEquals(\"b\", tok.next());\r\n    assertEquals(\"c\", tok.next());\r\n    assertFalse(tok.hasNext());\r\n    tok.reset();\r\n    assertEquals(\"a\", tok.next());\r\n    assertEquals(\"b\", tok.next());\r\n    assertEquals(\"c\", tok.next());\r\n    assertFalse(tok.hasNext());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\text\\StrTokenizerTest.java",
  "methodName" : "testReset_charArray",
  "sourceCode" : "@Test\r\nvoid testReset_charArray() {\r\n    final StrTokenizer tok = new StrTokenizer(\"x x x\");\r\n    final char[] array = { 'a', 'b', 'c' };\r\n    tok.reset(array);\r\n    assertEquals(\"abc\", tok.next());\r\n    assertFalse(tok.hasNext());\r\n    tok.reset((char[]) null);\r\n    assertFalse(tok.hasNext());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\text\\StrTokenizerTest.java",
  "methodName" : "testReset_String",
  "sourceCode" : "@Test\r\nvoid testReset_String() {\r\n    final StrTokenizer tok = new StrTokenizer(\"x x x\");\r\n    tok.reset(\"d e\");\r\n    assertEquals(\"d\", tok.next());\r\n    assertEquals(\"e\", tok.next());\r\n    assertFalse(tok.hasNext());\r\n    tok.reset((String) null);\r\n    assertFalse(tok.hasNext());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\text\\StrTokenizerTest.java",
  "methodName" : "testTokenizeSubclassInputChange",
  "sourceCode" : "@Test\r\nvoid testTokenizeSubclassInputChange() {\r\n    final StrTokenizer tkn = new StrTokenizer(\"a b c d e\") {\r\n\r\n        @Override\r\n        protected List<String> tokenize(final char[] chars, final int offset, final int count) {\r\n            return super.tokenize(\"w x y z\".toCharArray(), 2, 5);\r\n        }\r\n    };\r\n    assertEquals(\"x\", tkn.next());\r\n    assertEquals(\"y\", tkn.next());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\text\\StrTokenizerTest.java",
  "methodName" : "testTokenizeSubclassOutputChange",
  "sourceCode" : "@Test\r\nvoid testTokenizeSubclassOutputChange() {\r\n    final StrTokenizer tkn = new StrTokenizer(\"a b c\") {\r\n\r\n        @Override\r\n        protected List<String> tokenize(final char[] chars, final int offset, final int count) {\r\n            final List<String> list = super.tokenize(chars, offset, count);\r\n            Collections.reverse(list);\r\n            return list;\r\n        }\r\n    };\r\n    assertEquals(\"c\", tkn.next());\r\n    assertEquals(\"b\", tkn.next());\r\n    assertEquals(\"a\", tkn.next());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\text\\StrTokenizerTest.java",
  "methodName" : "testToString",
  "sourceCode" : "@Test\r\nvoid testToString() {\r\n    final StrTokenizer tkn = new StrTokenizer(\"a b c d e\");\r\n    assertEquals(\"StrTokenizer[not tokenized yet]\", tkn.toString());\r\n    tkn.next();\r\n    assertEquals(\"StrTokenizer[a, b, c, d, e]\", tkn.toString());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\text\\StrTokenizerTest.java",
  "methodName" : "testTSV",
  "sourceCode" : "@Test\r\nvoid testTSV() {\r\n    testXSVAbc(StrTokenizer.getTSVInstance(TSV_SIMPLE_FIXTURE));\r\n    testXSVAbc(StrTokenizer.getTSVInstance(TSV_SIMPLE_FIXTURE.toCharArray()));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\text\\StrTokenizerTest.java",
  "methodName" : "testTSVEmpty",
  "sourceCode" : "@Test\r\nvoid testTSVEmpty() {\r\n    testEmpty(StrTokenizer.getTSVInstance());\r\n    testEmpty(StrTokenizer.getTSVInstance(\"\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\text\\translate\\EntityArraysTest.java",
  "methodName" : "testConstructorExists",
  "sourceCode" : "@Test\r\nvoid testConstructorExists() {\r\n    new EntityArrays();\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\text\\translate\\EntityArraysTest.java",
  "methodName" : "testHTML40_EXTENDED_ESCAPE",
  "sourceCode" : "// LANG-659 - check arrays for duplicate entries\r\n@Test\r\nvoid testHTML40_EXTENDED_ESCAPE() {\r\n    final Set<String> col0 = new HashSet<>();\r\n    final Set<String> col1 = new HashSet<>();\r\n    final String[][] sa = EntityArrays.HTML40_EXTENDED_ESCAPE();\r\n    for (int i = 0; i < sa.length; i++) {\r\n        assertTrue(col0.add(sa[i][0]), \"Already added entry 0: \" + i + \" \" + sa[i][0]);\r\n        assertTrue(col1.add(sa[i][1]), \"Already added entry 1: \" + i + \" \" + sa[i][1]);\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\text\\translate\\EntityArraysTest.java",
  "methodName" : "testISO8859_1_ESCAPE",
  "sourceCode" : "// LANG-658 - check arrays for duplicate entries\r\n@Test\r\nvoid testISO8859_1_ESCAPE() {\r\n    final Set<String> col0 = new HashSet<>();\r\n    final Set<String> col1 = new HashSet<>();\r\n    final String[][] sa = EntityArrays.ISO8859_1_ESCAPE();\r\n    boolean success = true;\r\n    for (int i = 0; i < sa.length; i++) {\r\n        final boolean add0 = col0.add(sa[i][0]);\r\n        final boolean add1 = col1.add(sa[i][1]);\r\n        if (!add0) {\r\n            success = false;\r\n            System.out.println(\"Already added entry 0: \" + i + \" \" + sa[i][0] + \" \" + sa[i][1]);\r\n        }\r\n        if (!add1) {\r\n            success = false;\r\n            System.out.println(\"Already added entry 1: \" + i + \" \" + sa[i][0] + \" \" + sa[i][1]);\r\n        }\r\n    }\r\n    assertTrue(success, \"One or more errors detected\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\text\\translate\\LookupTranslatorTest.java",
  "methodName" : "testBasicLookup",
  "sourceCode" : "@Test\r\nvoid testBasicLookup() throws IOException {\r\n    final LookupTranslator lt = new LookupTranslator(new CharSequence[][] { { \"one\", \"two\" } });\r\n    final StringWriter out = new StringWriter();\r\n    final int result = lt.translate(\"one\", 0, out);\r\n    assertEquals(3, result, \"Incorrect code point consumption\");\r\n    assertEquals(\"two\", out.toString(), \"Incorrect value\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\text\\translate\\LookupTranslatorTest.java",
  "methodName" : "testLang882",
  "sourceCode" : "// Tests: https://issues.apache.org/jira/browse/LANG-882\r\n@Test\r\nvoid testLang882() throws IOException {\r\n    final LookupTranslator lt = new LookupTranslator(new CharSequence[][] { { new StringBuffer(\"one\"), new StringBuffer(\"two\") } });\r\n    final StringWriter out = new StringWriter();\r\n    final int result = lt.translate(new StringBuffer(\"one\"), 0, out);\r\n    assertEquals(3, result, \"Incorrect code point consumption\");\r\n    assertEquals(\"two\", out.toString(), \"Incorrect value\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\text\\translate\\NumericEntityEscaperTest.java",
  "methodName" : "testAbove",
  "sourceCode" : "@Test\r\nvoid testAbove() {\r\n    final NumericEntityEscaper nee = NumericEntityEscaper.above('F');\r\n    final String input = \"ADFGZ\";\r\n    final String result = nee.translate(input);\r\n    assertEquals(\"ADF&#71;&#90;\", result, \"Failed to escape numeric entities via the above method\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\text\\translate\\NumericEntityEscaperTest.java",
  "methodName" : "testBelow",
  "sourceCode" : "@Test\r\nvoid testBelow() {\r\n    final NumericEntityEscaper nee = NumericEntityEscaper.below('F');\r\n    final String input = \"ADFGZ\";\r\n    final String result = nee.translate(input);\r\n    assertEquals(\"&#65;&#68;FGZ\", result, \"Failed to escape numeric entities via the below method\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\text\\translate\\NumericEntityEscaperTest.java",
  "methodName" : "testBetween",
  "sourceCode" : "@Test\r\nvoid testBetween() {\r\n    final NumericEntityEscaper nee = NumericEntityEscaper.between('F', 'L');\r\n    final String input = \"ADFGZ\";\r\n    final String result = nee.translate(input);\r\n    assertEquals(\"AD&#70;&#71;Z\", result, \"Failed to escape numeric entities via the between method\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\text\\translate\\NumericEntityEscaperTest.java",
  "methodName" : "testSupplementary",
  "sourceCode" : "// See LANG-617\r\n@Test\r\nvoid testSupplementary() {\r\n    final NumericEntityEscaper nee = new NumericEntityEscaper();\r\n    final String input = \"\\uD803\\uDC22\";\r\n    final String expected = \"&#68642;\";\r\n    final String result = nee.translate(input);\r\n    assertEquals(expected, result, \"Failed to escape numeric entities supplementary characters\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\text\\translate\\NumericEntityUnescaperTest.java",
  "methodName" : "testOutOfBounds",
  "sourceCode" : "@Test\r\nvoid testOutOfBounds() {\r\n    final NumericEntityUnescaper neu = new NumericEntityUnescaper();\r\n    assertEquals(\"Test &\", neu.translate(\"Test &\"), \"Failed to ignore when last character is &\");\r\n    assertEquals(\"Test &#\", neu.translate(\"Test &#\"), \"Failed to ignore when last character is &\");\r\n    assertEquals(\"Test &#x\", neu.translate(\"Test &#x\"), \"Failed to ignore when last character is &\");\r\n    assertEquals(\"Test &#X\", neu.translate(\"Test &#X\"), \"Failed to ignore when last character is &\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\text\\translate\\NumericEntityUnescaperTest.java",
  "methodName" : "testSupplementaryUnescaping",
  "sourceCode" : "@Test\r\nvoid testSupplementaryUnescaping() {\r\n    final NumericEntityUnescaper neu = new NumericEntityUnescaper();\r\n    final String input = \"&#68642;\";\r\n    final String expected = \"\\uD803\\uDC22\";\r\n    final String result = neu.translate(input);\r\n    assertEquals(expected, result, \"Failed to unescape numeric entities supplementary characters\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\text\\translate\\NumericEntityUnescaperTest.java",
  "methodName" : "testUnfinishedEntity",
  "sourceCode" : "@Test\r\nvoid testUnfinishedEntity() {\r\n    // parse it\r\n    NumericEntityUnescaper neu = new NumericEntityUnescaper(NumericEntityUnescaper.OPTION.semiColonOptional);\r\n    String input = \"Test &#x30 not test\";\r\n    String expected = \"Test \\u0030 not test\";\r\n    String result = neu.translate(input);\r\n    assertEquals(expected, result, \"Failed to support unfinished entities (i.e. missing semicolon)\");\r\n    // ignore it\r\n    neu = new NumericEntityUnescaper();\r\n    input = \"Test &#x30 not test\";\r\n    expected = input;\r\n    result = neu.translate(input);\r\n    assertEquals(expected, result, \"Failed to ignore unfinished entities (i.e. missing semicolon)\");\r\n    // fail it\r\n    final NumericEntityUnescaper failingNeu = new NumericEntityUnescaper(NumericEntityUnescaper.OPTION.errorIfNoSemiColon);\r\n    final String failingInput = \"Test &#x30 not test\";\r\n    assertIllegalArgumentException(() -> failingNeu.translate(failingInput));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\text\\translate\\OctalUnescaperTest.java",
  "methodName" : "testBetween",
  "sourceCode" : "@Test\r\nvoid testBetween() {\r\n    //.between(\"1\", \"377\");\r\n    final OctalUnescaper oue = new OctalUnescaper();\r\n    String input = \"\\\\45\";\r\n    String result = oue.translate(input);\r\n    assertEquals(\"\\45\", result, \"Failed to unescape octal characters via the between method\");\r\n    input = \"\\\\377\";\r\n    result = oue.translate(input);\r\n    assertEquals(\"\\377\", result, \"Failed to unescape octal characters via the between method\");\r\n    input = \"\\\\377 and\";\r\n    result = oue.translate(input);\r\n    assertEquals(\"\\377 and\", result, \"Failed to unescape octal characters via the between method\");\r\n    input = \"\\\\378 and\";\r\n    result = oue.translate(input);\r\n    assertEquals(\"\\37\" + \"8 and\", result, \"Failed to unescape octal characters via the between method\");\r\n    input = \"\\\\378\";\r\n    result = oue.translate(input);\r\n    assertEquals(\"\\37\" + \"8\", result, \"Failed to unescape octal characters via the between method\");\r\n    input = \"\\\\1\";\r\n    result = oue.translate(input);\r\n    assertEquals(\"\\1\", result, \"Failed to unescape octal characters via the between method\");\r\n    input = \"\\\\036\";\r\n    result = oue.translate(input);\r\n    assertEquals(\"\\036\", result, \"Failed to unescape octal characters via the between method\");\r\n    input = \"\\\\0365\";\r\n    result = oue.translate(input);\r\n    assertEquals(\"\\036\" + \"5\", result, \"Failed to unescape octal characters via the between method\");\r\n    input = \"\\\\003\";\r\n    result = oue.translate(input);\r\n    assertEquals(\"\\003\", result, \"Failed to unescape octal characters via the between method\");\r\n    input = \"\\\\0003\";\r\n    result = oue.translate(input);\r\n    assertEquals(\"\\000\" + \"3\", result, \"Failed to unescape octal characters via the between method\");\r\n    input = \"\\\\279\";\r\n    result = oue.translate(input);\r\n    assertEquals(\"\\279\", result, \"Failed to unescape octal characters via the between method\");\r\n    input = \"\\\\999\";\r\n    result = oue.translate(input);\r\n    assertEquals(\"\\\\999\", result, \"Failed to ignore an out of range octal character via the between method\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\text\\translate\\UnicodeEscaperTest.java",
  "methodName" : "testAbove",
  "sourceCode" : "@Test\r\nvoid testAbove() {\r\n    final UnicodeEscaper ue = UnicodeEscaper.above('F');\r\n    final String input = \"ADFGZ\";\r\n    final String result = ue.translate(input);\r\n    assertEquals(\"ADF\\\\u0047\\\\u005A\", result, \"Failed to escape Unicode characters via the above method\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\text\\translate\\UnicodeEscaperTest.java",
  "methodName" : "testBelow",
  "sourceCode" : "@Test\r\nvoid testBelow() {\r\n    final UnicodeEscaper ue = UnicodeEscaper.below('F');\r\n    final String input = \"ADFGZ\";\r\n    final String result = ue.translate(input);\r\n    assertEquals(\"\\\\u0041\\\\u0044FGZ\", result, \"Failed to escape Unicode characters via the below method\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\text\\translate\\UnicodeEscaperTest.java",
  "methodName" : "testBetween",
  "sourceCode" : "@Test\r\nvoid testBetween() {\r\n    final UnicodeEscaper ue = UnicodeEscaper.between('F', 'L');\r\n    final String input = \"ADFGZ\";\r\n    final String result = ue.translate(input);\r\n    assertEquals(\"AD\\\\u0046\\\\u0047Z\", result, \"Failed to escape Unicode characters via the between method\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\text\\translate\\UnicodeUnescaperTest.java",
  "methodName" : "testLessThanFour",
  "sourceCode" : "@Test\r\nvoid testLessThanFour() {\r\n    final UnicodeUnescaper uu = new UnicodeUnescaper();\r\n    final String input = \"\\\\0047\\\\u006\";\r\n    assertThrows(IllegalArgumentException.class, () -> uu.translate(input), \"A lack of digits in a Unicode escape sequence failed to throw an exception\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\text\\translate\\UnicodeUnescaperTest.java",
  "methodName" : "testUPlus",
  "sourceCode" : "// Requested in LANG-507\r\n@Test\r\nvoid testUPlus() {\r\n    final UnicodeUnescaper uu = new UnicodeUnescaper();\r\n    final String input = \"\\\\u+0047\";\r\n    assertEquals(\"G\", uu.translate(input), \"Failed to unescape Unicode characters with 'u+' notation\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\text\\translate\\UnicodeUnescaperTest.java",
  "methodName" : "testUuuuu",
  "sourceCode" : "@Test\r\nvoid testUuuuu() {\r\n    final UnicodeUnescaper uu = new UnicodeUnescaper();\r\n    final String input = \"\\\\uuuuuuuu0047\";\r\n    final String result = uu.translate(input);\r\n    assertEquals(\"G\", result, \"Failed to unescape Unicode characters with many 'u' characters\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\text\\translate\\UnicodeUnpairedSurrogateRemoverTest.java",
  "methodName" : "testInvalidCharacters",
  "sourceCode" : "@Test\r\nvoid testInvalidCharacters() throws IOException {\r\n    assertTrue(subject.translate(0xd800, writer));\r\n    assertTrue(subject.translate(0xdfff, writer));\r\n    assertEquals(0, writer.size());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\text\\translate\\UnicodeUnpairedSurrogateRemoverTest.java",
  "methodName" : "testValidCharacters",
  "sourceCode" : "@Test\r\nvoid testValidCharacters() throws IOException {\r\n    assertFalse(subject.translate(0xd7ff, writer));\r\n    assertFalse(subject.translate(0xe000, writer));\r\n    assertEquals(0, writer.size());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\text\\WordUtilsTest.java",
  "methodName" : "testCapitalize_String",
  "sourceCode" : "@Test\r\nvoid testCapitalize_String() {\r\n    assertNull(WordUtils.capitalize(null));\r\n    assertEquals(\"\", WordUtils.capitalize(\"\"));\r\n    assertEquals(\"  \", WordUtils.capitalize(\"  \"));\r\n    assertEquals(\"I\", WordUtils.capitalize(\"I\"));\r\n    assertEquals(\"I\", WordUtils.capitalize(\"i\"));\r\n    assertEquals(\"I Am Here 123\", WordUtils.capitalize(\"i am here 123\"));\r\n    assertEquals(\"I Am Here 123\", WordUtils.capitalize(\"I Am Here 123\"));\r\n    assertEquals(\"I Am HERE 123\", WordUtils.capitalize(\"i am HERE 123\"));\r\n    assertEquals(\"I AM HERE 123\", WordUtils.capitalize(\"I AM HERE 123\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\text\\WordUtilsTest.java",
  "methodName" : "testCapitalizeFully_String",
  "sourceCode" : "@Test\r\nvoid testCapitalizeFully_String() {\r\n    assertNull(WordUtils.capitalizeFully(null));\r\n    assertEquals(\"\", WordUtils.capitalizeFully(\"\"));\r\n    assertEquals(\"  \", WordUtils.capitalizeFully(\"  \"));\r\n    assertEquals(\"I\", WordUtils.capitalizeFully(\"I\"));\r\n    assertEquals(\"I\", WordUtils.capitalizeFully(\"i\"));\r\n    assertEquals(\"I Am Here 123\", WordUtils.capitalizeFully(\"i am here 123\"));\r\n    assertEquals(\"I Am Here 123\", WordUtils.capitalizeFully(\"I Am Here 123\"));\r\n    assertEquals(\"I Am Here 123\", WordUtils.capitalizeFully(\"i am HERE 123\"));\r\n    assertEquals(\"I Am Here 123\", WordUtils.capitalizeFully(\"I AM HERE 123\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\text\\WordUtilsTest.java",
  "methodName" : "testCapitalizeFullyWithDelimiters_String",
  "sourceCode" : "@Test\r\nvoid testCapitalizeFullyWithDelimiters_String() {\r\n    assertNull(WordUtils.capitalizeFully(null, null));\r\n    assertEquals(\"\", WordUtils.capitalizeFully(\"\"));\r\n    assertEquals(\"  \", WordUtils.capitalizeFully(\"  \"));\r\n    char[] chars = { '-', '+', ' ', '@' };\r\n    assertEquals(\"I\", WordUtils.capitalizeFully(\"I\", chars));\r\n    assertEquals(\"I\", WordUtils.capitalizeFully(\"i\", chars));\r\n    assertEquals(\"I-Am Here+123\", WordUtils.capitalizeFully(\"i-am here+123\", chars));\r\n    assertEquals(\"I Am+Here-123\", WordUtils.capitalizeFully(\"I Am+Here-123\", chars));\r\n    assertEquals(\"I+Am-Here 123\", WordUtils.capitalizeFully(\"i+am-HERE 123\", chars));\r\n    assertEquals(\"I-Am Here+123\", WordUtils.capitalizeFully(\"I-AM HERE+123\", chars));\r\n    chars = new char[] { '.' };\r\n    assertEquals(\"I am.Fine\", WordUtils.capitalizeFully(\"i aM.fine\", chars));\r\n    assertEquals(\"I Am.fine\", WordUtils.capitalizeFully(\"i am.fine\", null));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\text\\WordUtilsTest.java",
  "methodName" : "testCapitalizeWithDelimiters_String",
  "sourceCode" : "@Test\r\nvoid testCapitalizeWithDelimiters_String() {\r\n    assertNull(WordUtils.capitalize(null, null));\r\n    assertEquals(\"\", WordUtils.capitalize(\"\"));\r\n    assertEquals(\"  \", WordUtils.capitalize(\"  \"));\r\n    char[] chars = { '-', '+', ' ', '@' };\r\n    assertEquals(\"I\", WordUtils.capitalize(\"I\", chars));\r\n    assertEquals(\"I\", WordUtils.capitalize(\"i\", chars));\r\n    assertEquals(\"I-Am Here+123\", WordUtils.capitalize(\"i-am here+123\", chars));\r\n    assertEquals(\"I Am+Here-123\", WordUtils.capitalize(\"I Am+Here-123\", chars));\r\n    assertEquals(\"I+Am-HERE 123\", WordUtils.capitalize(\"i+am-HERE 123\", chars));\r\n    assertEquals(\"I-AM HERE+123\", WordUtils.capitalize(\"I-AM HERE+123\", chars));\r\n    chars = new char[] { '.' };\r\n    assertEquals(\"I aM.Fine\", WordUtils.capitalize(\"i aM.fine\", chars));\r\n    assertEquals(\"I Am.fine\", WordUtils.capitalize(\"i am.fine\", null));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\text\\WordUtilsTest.java",
  "methodName" : "testConstructor",
  "sourceCode" : "@Test\r\nvoid testConstructor() {\r\n    assertNotNull(new WordUtils());\r\n    final Constructor<?>[] cons = WordUtils.class.getDeclaredConstructors();\r\n    assertEquals(1, cons.length);\r\n    assertTrue(Modifier.isPublic(cons[0].getModifiers()));\r\n    assertTrue(Modifier.isPublic(WordUtils.class.getModifiers()));\r\n    assertFalse(Modifier.isFinal(WordUtils.class.getModifiers()));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\text\\WordUtilsTest.java",
  "methodName" : "testContainsAllWords_StringString",
  "sourceCode" : "@Test\r\nvoid testContainsAllWords_StringString() {\r\n    assertFalse(WordUtils.containsAllWords(null, (String) null));\r\n    assertFalse(WordUtils.containsAllWords(null, \"\"));\r\n    assertFalse(WordUtils.containsAllWords(null, \"ab\"));\r\n    assertFalse(WordUtils.containsAllWords(\"\", (String) null));\r\n    assertFalse(WordUtils.containsAllWords(\"\", \"\"));\r\n    assertFalse(WordUtils.containsAllWords(\"\", \"ab\"));\r\n    assertFalse(WordUtils.containsAllWords(\"foo\", (String) null));\r\n    assertFalse(WordUtils.containsAllWords(\"bar\", \"\"));\r\n    assertFalse(WordUtils.containsAllWords(\"zzabyycdxx\", \"by\"));\r\n    assertTrue(WordUtils.containsAllWords(\"lorem ipsum dolor sit amet\", \"ipsum\", \"lorem\", \"dolor\"));\r\n    assertFalse(WordUtils.containsAllWords(\"lorem ipsum dolor sit amet\", \"ipsum\", null, \"lorem\", \"dolor\"));\r\n    assertFalse(WordUtils.containsAllWords(\"lorem ipsum null dolor sit amet\", \"ipsum\", null, \"lorem\", \"dolor\"));\r\n    assertFalse(WordUtils.containsAllWords(\"ab\", \"b\"));\r\n    assertFalse(WordUtils.containsAllWords(\"ab\", \"z\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\text\\WordUtilsTest.java",
  "methodName" : "testInitials_String",
  "sourceCode" : "@Test\r\nvoid testInitials_String() {\r\n    assertNull(WordUtils.initials(null));\r\n    assertEquals(\"\", WordUtils.initials(\"\"));\r\n    assertEquals(\"\", WordUtils.initials(\"  \"));\r\n    assertEquals(\"I\", WordUtils.initials(\"I\"));\r\n    assertEquals(\"i\", WordUtils.initials(\"i\"));\r\n    assertEquals(\"BJL\", WordUtils.initials(\"Ben John Lee\"));\r\n    assertEquals(\"BJL\", WordUtils.initials(\"   Ben \\n   John\\tLee\\t\"));\r\n    assertEquals(\"BJ\", WordUtils.initials(\"Ben J.Lee\"));\r\n    assertEquals(\"BJ.L\", WordUtils.initials(\" Ben   John  . Lee\"));\r\n    assertEquals(\"iah1\", WordUtils.initials(\"i am here 123\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\text\\WordUtilsTest.java",
  "methodName" : "testInitials_String_charArray",
  "sourceCode" : "@Test\r\nvoid testInitials_String_charArray() {\r\n    char[] array = null;\r\n    assertNull(WordUtils.initials(null, array));\r\n    assertEquals(\"\", WordUtils.initials(\"\", array));\r\n    assertEquals(\"\", WordUtils.initials(\"  \", array));\r\n    assertEquals(\"I\", WordUtils.initials(\"I\", array));\r\n    assertEquals(\"i\", WordUtils.initials(\"i\", array));\r\n    assertEquals(\"S\", WordUtils.initials(\"SJC\", array));\r\n    assertEquals(\"BJL\", WordUtils.initials(\"Ben John Lee\", array));\r\n    assertEquals(\"BJL\", WordUtils.initials(\"   Ben \\n   John\\tLee\\t\", array));\r\n    assertEquals(\"BJ\", WordUtils.initials(\"Ben J.Lee\", array));\r\n    assertEquals(\"BJ.L\", WordUtils.initials(\" Ben   John  . Lee\", array));\r\n    assertEquals(\"KO\", WordUtils.initials(\"Kay O'Murphy\", array));\r\n    assertEquals(\"iah1\", WordUtils.initials(\"i am here 123\", array));\r\n    array = new char[0];\r\n    assertNull(WordUtils.initials(null, array));\r\n    assertEquals(\"\", WordUtils.initials(\"\", array));\r\n    assertEquals(\"\", WordUtils.initials(\"  \", array));\r\n    assertEquals(\"\", WordUtils.initials(\"I\", array));\r\n    assertEquals(\"\", WordUtils.initials(\"i\", array));\r\n    assertEquals(\"\", WordUtils.initials(\"SJC\", array));\r\n    assertEquals(\"\", WordUtils.initials(\"Ben John Lee\", array));\r\n    assertEquals(\"\", WordUtils.initials(\"   Ben \\n   John\\tLee\\t\", array));\r\n    assertEquals(\"\", WordUtils.initials(\"Ben J.Lee\", array));\r\n    assertEquals(\"\", WordUtils.initials(\" Ben   John  . Lee\", array));\r\n    assertEquals(\"\", WordUtils.initials(\"Kay O'Murphy\", array));\r\n    assertEquals(\"\", WordUtils.initials(\"i am here 123\", array));\r\n    array = \" \".toCharArray();\r\n    assertNull(WordUtils.initials(null, array));\r\n    assertEquals(\"\", WordUtils.initials(\"\", array));\r\n    assertEquals(\"\", WordUtils.initials(\"  \", array));\r\n    assertEquals(\"I\", WordUtils.initials(\"I\", array));\r\n    assertEquals(\"i\", WordUtils.initials(\"i\", array));\r\n    assertEquals(\"S\", WordUtils.initials(\"SJC\", array));\r\n    assertEquals(\"BJL\", WordUtils.initials(\"Ben John Lee\", array));\r\n    assertEquals(\"BJ\", WordUtils.initials(\"Ben J.Lee\", array));\r\n    assertEquals(\"B\\nJ\", WordUtils.initials(\"   Ben \\n   John\\tLee\\t\", array));\r\n    assertEquals(\"BJ.L\", WordUtils.initials(\" Ben   John  . Lee\", array));\r\n    assertEquals(\"KO\", WordUtils.initials(\"Kay O'Murphy\", array));\r\n    assertEquals(\"iah1\", WordUtils.initials(\"i am here 123\", array));\r\n    array = \" .\".toCharArray();\r\n    assertNull(WordUtils.initials(null, array));\r\n    assertEquals(\"\", WordUtils.initials(\"\", array));\r\n    assertEquals(\"\", WordUtils.initials(\"  \", array));\r\n    assertEquals(\"I\", WordUtils.initials(\"I\", array));\r\n    assertEquals(\"i\", WordUtils.initials(\"i\", array));\r\n    assertEquals(\"S\", WordUtils.initials(\"SJC\", array));\r\n    assertEquals(\"BJL\", WordUtils.initials(\"Ben John Lee\", array));\r\n    assertEquals(\"BJL\", WordUtils.initials(\"Ben J.Lee\", array));\r\n    assertEquals(\"BJL\", WordUtils.initials(\" Ben   John  . Lee\", array));\r\n    assertEquals(\"KO\", WordUtils.initials(\"Kay O'Murphy\", array));\r\n    assertEquals(\"iah1\", WordUtils.initials(\"i am here 123\", array));\r\n    array = \" .'\".toCharArray();\r\n    assertNull(WordUtils.initials(null, array));\r\n    assertEquals(\"\", WordUtils.initials(\"\", array));\r\n    assertEquals(\"\", WordUtils.initials(\"  \", array));\r\n    assertEquals(\"I\", WordUtils.initials(\"I\", array));\r\n    assertEquals(\"i\", WordUtils.initials(\"i\", array));\r\n    assertEquals(\"S\", WordUtils.initials(\"SJC\", array));\r\n    assertEquals(\"BJL\", WordUtils.initials(\"Ben John Lee\", array));\r\n    assertEquals(\"BJL\", WordUtils.initials(\"Ben J.Lee\", array));\r\n    assertEquals(\"BJL\", WordUtils.initials(\" Ben   John  . Lee\", array));\r\n    assertEquals(\"KOM\", WordUtils.initials(\"Kay O'Murphy\", array));\r\n    assertEquals(\"iah1\", WordUtils.initials(\"i am here 123\", array));\r\n    array = \"SIJo1\".toCharArray();\r\n    assertNull(WordUtils.initials(null, array));\r\n    assertEquals(\"\", WordUtils.initials(\"\", array));\r\n    assertEquals(\" \", WordUtils.initials(\"  \", array));\r\n    assertEquals(\"\", WordUtils.initials(\"I\", array));\r\n    assertEquals(\"i\", WordUtils.initials(\"i\", array));\r\n    assertEquals(\"C\", WordUtils.initials(\"SJC\", array));\r\n    assertEquals(\"Bh\", WordUtils.initials(\"Ben John Lee\", array));\r\n    assertEquals(\"B.\", WordUtils.initials(\"Ben J.Lee\", array));\r\n    assertEquals(\" h\", WordUtils.initials(\" Ben   John  . Lee\", array));\r\n    assertEquals(\"K\", WordUtils.initials(\"Kay O'Murphy\", array));\r\n    assertEquals(\"i2\", WordUtils.initials(\"i am here 123\", array));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\text\\WordUtilsTest.java",
  "methodName" : "testLANG1292",
  "sourceCode" : "@Test\r\nvoid testLANG1292() {\r\n    // Prior to fix, this was throwing StringIndexOutOfBoundsException\r\n    WordUtils.wrap(\"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa \" + \"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa \" + \"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\", 70);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\text\\WordUtilsTest.java",
  "methodName" : "testLANG1397",
  "sourceCode" : "@Test\r\nvoid testLANG1397() {\r\n    // Prior to fix, this was throwing StringIndexOutOfBoundsException\r\n    WordUtils.wrap(\"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa \" + \"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa \" + \"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\", Integer.MAX_VALUE);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\text\\WordUtilsTest.java",
  "methodName" : "testSwapCase_String",
  "sourceCode" : "@Test\r\nvoid testSwapCase_String() {\r\n    assertNull(WordUtils.swapCase(null));\r\n    assertEquals(\"\", WordUtils.swapCase(\"\"));\r\n    assertEquals(\"  \", WordUtils.swapCase(\"  \"));\r\n    assertEquals(\"i\", WordUtils.swapCase(\"I\"));\r\n    assertEquals(\"I\", WordUtils.swapCase(\"i\"));\r\n    assertEquals(\"I AM HERE 123\", WordUtils.swapCase(\"i am here 123\"));\r\n    assertEquals(\"i aM hERE 123\", WordUtils.swapCase(\"I Am Here 123\"));\r\n    assertEquals(\"I AM here 123\", WordUtils.swapCase(\"i am HERE 123\"));\r\n    assertEquals(\"i am here 123\", WordUtils.swapCase(\"I AM HERE 123\"));\r\n    final String test = \"This String contains a TitleCase character: \\u01C8\";\r\n    final String expect = \"tHIS sTRING CONTAINS A tITLEcASE CHARACTER: \\u01C9\";\r\n    assertEquals(expect, WordUtils.swapCase(test));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\text\\WordUtilsTest.java",
  "methodName" : "testUncapitalize_String",
  "sourceCode" : "@Test\r\nvoid testUncapitalize_String() {\r\n    assertNull(WordUtils.uncapitalize(null));\r\n    assertEquals(\"\", WordUtils.uncapitalize(\"\"));\r\n    assertEquals(\"  \", WordUtils.uncapitalize(\"  \"));\r\n    assertEquals(\"i\", WordUtils.uncapitalize(\"I\"));\r\n    assertEquals(\"i\", WordUtils.uncapitalize(\"i\"));\r\n    assertEquals(\"i am here 123\", WordUtils.uncapitalize(\"i am here 123\"));\r\n    assertEquals(\"i am here 123\", WordUtils.uncapitalize(\"I Am Here 123\"));\r\n    assertEquals(\"i am hERE 123\", WordUtils.uncapitalize(\"i am HERE 123\"));\r\n    assertEquals(\"i aM hERE 123\", WordUtils.uncapitalize(\"I AM HERE 123\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\text\\WordUtilsTest.java",
  "methodName" : "testUncapitalizeWithDelimiters_String",
  "sourceCode" : "@Test\r\nvoid testUncapitalizeWithDelimiters_String() {\r\n    assertNull(WordUtils.uncapitalize(null, null));\r\n    assertEquals(\"\", WordUtils.uncapitalize(\"\"));\r\n    assertEquals(\"  \", WordUtils.uncapitalize(\"  \"));\r\n    char[] chars = { '-', '+', ' ', '@' };\r\n    assertEquals(\"i\", WordUtils.uncapitalize(\"I\", chars));\r\n    assertEquals(\"i\", WordUtils.uncapitalize(\"i\", chars));\r\n    assertEquals(\"i am-here+123\", WordUtils.uncapitalize(\"i am-here+123\", chars));\r\n    assertEquals(\"i+am here-123\", WordUtils.uncapitalize(\"I+Am Here-123\", chars));\r\n    assertEquals(\"i-am+hERE 123\", WordUtils.uncapitalize(\"i-am+HERE 123\", chars));\r\n    assertEquals(\"i aM-hERE+123\", WordUtils.uncapitalize(\"I AM-HERE+123\", chars));\r\n    chars = new char[] { '.' };\r\n    assertEquals(\"i AM.fINE\", WordUtils.uncapitalize(\"I AM.FINE\", chars));\r\n    assertEquals(\"i aM.FINE\", WordUtils.uncapitalize(\"I AM.FINE\", null));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\text\\WordUtilsTest.java",
  "methodName" : "testWrap_StringInt",
  "sourceCode" : "@Test\r\nvoid testWrap_StringInt() {\r\n    assertNull(WordUtils.wrap(null, 20));\r\n    assertNull(WordUtils.wrap(null, -1));\r\n    assertEquals(\"\", WordUtils.wrap(\"\", 20));\r\n    assertEquals(\"\", WordUtils.wrap(\"\", -1));\r\n    // normal\r\n    final String systemNewLine = System.lineSeparator();\r\n    String input = \"Here is one line of text that is going to be wrapped after 20 columns.\";\r\n    String expected = \"Here is one line of\" + systemNewLine + \"text that is going\" + systemNewLine + \"to be wrapped after\" + systemNewLine + \"20 columns.\";\r\n    assertEquals(expected, WordUtils.wrap(input, 20));\r\n    // long word at end\r\n    input = \"Click here to jump to the commons website - https://commons.apache.org\";\r\n    expected = \"Click here to jump\" + systemNewLine + \"to the commons\" + systemNewLine + \"website -\" + systemNewLine + \"https://commons.apache.org\";\r\n    assertEquals(expected, WordUtils.wrap(input, 20));\r\n    // long word in middle\r\n    input = \"Click here, https://commons.apache.org, to jump to the commons website\";\r\n    expected = \"Click here,\" + systemNewLine + \"https://commons.apache.org,\" + systemNewLine + \"to jump to the\" + systemNewLine + \"commons website\";\r\n    assertEquals(expected, WordUtils.wrap(input, 20));\r\n    // leading spaces on a new line are stripped\r\n    // trailing spaces are not stripped\r\n    input = \"word1             word2                        word3\";\r\n    expected = \"word1  \" + systemNewLine + \"word2  \" + systemNewLine + \"word3\";\r\n    assertEquals(expected, WordUtils.wrap(input, 7));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\text\\WordUtilsTest.java",
  "methodName" : "testWrap_StringIntStringBoolean",
  "sourceCode" : "@Test\r\nvoid testWrap_StringIntStringBoolean() {\r\n    assertNull(WordUtils.wrap(null, 20, \"\\n\", false));\r\n    assertNull(WordUtils.wrap(null, 20, \"\\n\", true));\r\n    assertNull(WordUtils.wrap(null, 20, null, true));\r\n    assertNull(WordUtils.wrap(null, 20, null, false));\r\n    assertNull(WordUtils.wrap(null, -1, null, true));\r\n    assertNull(WordUtils.wrap(null, -1, null, false));\r\n    assertEquals(\"\", WordUtils.wrap(\"\", 20, \"\\n\", false));\r\n    assertEquals(\"\", WordUtils.wrap(\"\", 20, \"\\n\", true));\r\n    assertEquals(\"\", WordUtils.wrap(\"\", 20, null, false));\r\n    assertEquals(\"\", WordUtils.wrap(\"\", 20, null, true));\r\n    assertEquals(\"\", WordUtils.wrap(\"\", -1, null, false));\r\n    assertEquals(\"\", WordUtils.wrap(\"\", -1, null, true));\r\n    // normal\r\n    String input = \"Here is one line of text that is going to be wrapped after 20 columns.\";\r\n    String expected = \"Here is one line of\\ntext that is going\\nto be wrapped after\\n20 columns.\";\r\n    assertEquals(expected, WordUtils.wrap(input, 20, \"\\n\", false));\r\n    assertEquals(expected, WordUtils.wrap(input, 20, \"\\n\", true));\r\n    // unusual newline char\r\n    input = \"Here is one line of text that is going to be wrapped after 20 columns.\";\r\n    expected = \"Here is one line of<br />text that is going<br />to be wrapped after<br />20 columns.\";\r\n    assertEquals(expected, WordUtils.wrap(input, 20, \"<br />\", false));\r\n    assertEquals(expected, WordUtils.wrap(input, 20, \"<br />\", true));\r\n    // short line length\r\n    input = \"Here is one line\";\r\n    expected = \"Here\\nis one\\nline\";\r\n    assertEquals(expected, WordUtils.wrap(input, 6, \"\\n\", false));\r\n    expected = \"Here\\nis\\none\\nline\";\r\n    assertEquals(expected, WordUtils.wrap(input, 2, \"\\n\", false));\r\n    assertEquals(expected, WordUtils.wrap(input, -1, \"\\n\", false));\r\n    // system newline char\r\n    final String systemNewLine = System.lineSeparator();\r\n    input = \"Here is one line of text that is going to be wrapped after 20 columns.\";\r\n    expected = \"Here is one line of\" + systemNewLine + \"text that is going\" + systemNewLine + \"to be wrapped after\" + systemNewLine + \"20 columns.\";\r\n    assertEquals(expected, WordUtils.wrap(input, 20, null, false));\r\n    assertEquals(expected, WordUtils.wrap(input, 20, null, true));\r\n    // with extra spaces\r\n    input = \" Here:  is  one  line  of  text  that  is  going  to  be  wrapped  after  20  columns.\";\r\n    expected = \"Here:  is  one  line\\nof  text  that  is \\ngoing  to  be \\nwrapped  after  20 \\ncolumns.\";\r\n    assertEquals(expected, WordUtils.wrap(input, 20, \"\\n\", false));\r\n    assertEquals(expected, WordUtils.wrap(input, 20, \"\\n\", true));\r\n    // with tab\r\n    input = \"Here is\\tone line of text that is going to be wrapped after 20 columns.\";\r\n    expected = \"Here is\\tone line of\\ntext that is going\\nto be wrapped after\\n20 columns.\";\r\n    assertEquals(expected, WordUtils.wrap(input, 20, \"\\n\", false));\r\n    assertEquals(expected, WordUtils.wrap(input, 20, \"\\n\", true));\r\n    // with tab at wrapColumn\r\n    input = \"Here is one line of\\ttext that is going to be wrapped after 20 columns.\";\r\n    expected = \"Here is one line\\nof\\ttext that is\\ngoing to be wrapped\\nafter 20 columns.\";\r\n    assertEquals(expected, WordUtils.wrap(input, 20, \"\\n\", false));\r\n    assertEquals(expected, WordUtils.wrap(input, 20, \"\\n\", true));\r\n    // difference because of long word\r\n    input = \"Click here to jump to the commons website - https://commons.apache.org\";\r\n    expected = \"Click here to jump\\nto the commons\\nwebsite -\\nhttps://commons.apache.org\";\r\n    assertEquals(expected, WordUtils.wrap(input, 20, \"\\n\", false));\r\n    expected = \"Click here to jump\\nto the commons\\nwebsite -\\nhttps://commons.apac\\nhe.org\";\r\n    assertEquals(expected, WordUtils.wrap(input, 20, \"\\n\", true));\r\n    // difference because of long word in middle\r\n    input = \"Click here, https://commons.apache.org, to jump to the commons website\";\r\n    expected = \"Click here,\\nhttps://commons.apache.org,\\nto jump to the\\ncommons website\";\r\n    assertEquals(expected, WordUtils.wrap(input, 20, \"\\n\", false));\r\n    expected = \"Click here,\\nhttps://commons.apac\\nhe.org, to jump to\\nthe commons website\";\r\n    assertEquals(expected, WordUtils.wrap(input, 20, \"\\n\", true));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\text\\WordUtilsTest.java",
  "methodName" : "testWrap_StringIntStringBooleanString",
  "sourceCode" : "@Test\r\nvoid testWrap_StringIntStringBooleanString() {\r\n    //no changes test\r\n    String input = \"flammable/inflammable\";\r\n    String expected = \"flammable/inflammable\";\r\n    assertEquals(expected, WordUtils.wrap(input, 30, \"\\n\", false, \"/\"));\r\n    // wrap on / and small width\r\n    expected = \"flammable\\ninflammable\";\r\n    assertEquals(expected, WordUtils.wrap(input, 2, \"\\n\", false, \"/\"));\r\n    // wrap long words on / 1\r\n    expected = \"flammable\\ninflammab\\nle\";\r\n    assertEquals(expected, WordUtils.wrap(input, 9, \"\\n\", true, \"/\"));\r\n    // wrap long words on / 2\r\n    expected = \"flammable\\ninflammable\";\r\n    assertEquals(expected, WordUtils.wrap(input, 15, \"\\n\", true, \"/\"));\r\n    // wrap long words on / 3\r\n    input = \"flammableinflammable\";\r\n    expected = \"flammableinflam\\nmable\";\r\n    assertEquals(expected, WordUtils.wrap(input, 15, \"\\n\", true, \"/\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ThreadUtilsTest.java",
  "methodName" : "testAtLeastOneThreadExists",
  "sourceCode" : "@Test\r\nvoid testAtLeastOneThreadExists() {\r\n    assertFalse(ThreadUtils.getAllThreads().isEmpty());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ThreadUtilsTest.java",
  "methodName" : "testAtLeastOneThreadGroupsExists",
  "sourceCode" : "@Test\r\nvoid testAtLeastOneThreadGroupsExists() {\r\n    assertFalse(ThreadUtils.getAllThreadGroups().isEmpty());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ThreadUtilsTest.java",
  "methodName" : "testComplexThreadGroups",
  "sourceCode" : "@Test\r\nvoid testComplexThreadGroups() throws Exception {\r\n    final ThreadGroup threadGroup1 = new ThreadGroup(\"thread_group_1__\");\r\n    final ThreadGroup threadGroup2 = new ThreadGroup(\"thread_group_2__\");\r\n    final ThreadGroup threadGroup3 = new ThreadGroup(threadGroup2, \"thread_group_3__\");\r\n    final ThreadGroup threadGroup4 = new ThreadGroup(threadGroup2, \"thread_group_4__\");\r\n    final ThreadGroup threadGroup5 = new ThreadGroup(threadGroup1, \"thread_group_5__\");\r\n    final ThreadGroup threadGroup6 = new ThreadGroup(threadGroup4, \"thread_group_6__\");\r\n    final ThreadGroup threadGroup7 = new ThreadGroup(threadGroup4, \"thread_group_7__\");\r\n    final ThreadGroup threadGroup7Doubled = new ThreadGroup(threadGroup4, \"thread_group_7__\");\r\n    final List<ThreadGroup> threadGroups = Arrays.asList(threadGroup1, threadGroup2, threadGroup3, threadGroup4, threadGroup5, threadGroup6, threadGroup7, threadGroup7Doubled);\r\n    final Thread t1 = new TestThread(\"thread1_X__\");\r\n    final Thread t2 = new TestThread(threadGroup1, \"thread2_X__\");\r\n    final Thread t3 = new TestThread(threadGroup2, \"thread3_X__\");\r\n    final Thread t4 = new TestThread(threadGroup3, \"thread4_X__\");\r\n    final Thread t5 = new TestThread(threadGroup4, \"thread5_X__\");\r\n    final Thread t6 = new TestThread(threadGroup5, \"thread6_X__\");\r\n    final Thread t7 = new TestThread(threadGroup6, \"thread7_X__\");\r\n    final Thread t8 = new TestThread(threadGroup4, \"thread8_X__\");\r\n    final Thread t9 = new TestThread(threadGroup6, \"thread9_X__\");\r\n    final Thread t10 = new TestThread(threadGroup3, \"thread10_X__\");\r\n    final Thread t11 = new TestThread(threadGroup7, \"thread11_X__\");\r\n    final Thread t11Doubled = new TestThread(threadGroup7Doubled, \"thread11_X__\");\r\n    final List<Thread> threads = Arrays.asList(t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, t11Doubled);\r\n    try {\r\n        for (final Thread thread : threads) {\r\n            thread.start();\r\n        }\r\n        assertTrue(ThreadUtils.getAllThreadGroups().size() >= 7, \"getAllThreadGroups\");\r\n        assertTrue(ThreadUtils.getAllThreads().size() >= 11, \"getAllThreads\");\r\n        assertTrue(ThreadUtils.findThreads(Predicates.truePredicate()).size() >= 11, \"findThreads(ThreadUtils.truePredicate())\");\r\n        assertEquals(1, ThreadUtils.findThreadsByName(t4.getName(), threadGroup3.getName()).size());\r\n        assertEquals(0, ThreadUtils.findThreadsByName(t4.getName(), threadGroup2.getName()).size());\r\n        assertEquals(2, ThreadUtils.findThreadsByName(t11.getName(), threadGroup7.getName()).size());\r\n    } finally {\r\n        for (final Thread thread : threads) {\r\n            thread.interrupt();\r\n            thread.join();\r\n        }\r\n        for (final ThreadGroup threadGroup : threadGroups) {\r\n            if (!threadGroup.isDestroyed()) {\r\n                threadGroup.destroy();\r\n            }\r\n        }\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ThreadUtilsTest.java",
  "methodName" : "testConstructor",
  "sourceCode" : "@Test\r\nvoid testConstructor() {\r\n    assertNotNull(new ThreadUtils());\r\n    final Constructor<?>[] cons = ThreadUtils.class.getDeclaredConstructors();\r\n    assertEquals(1, cons.length);\r\n    assertTrue(Modifier.isPublic(cons[0].getModifiers()));\r\n    assertTrue(Modifier.isPublic(ThreadUtils.class.getModifiers()));\r\n    assertFalse(Modifier.isFinal(ThreadUtils.class.getModifiers()));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ThreadUtilsTest.java",
  "methodName" : "testDepreacted",
  "sourceCode" : "@SuppressWarnings(\"deprecation\")\r\n@Test\r\nvoid testDepreacted() {\r\n    assertNotNull(ThreadUtils.ALWAYS_TRUE_PREDICATE);\r\n    final ThreadPredicate tp = ThreadUtils.ALWAYS_TRUE_PREDICATE;\r\n    assertTrue(tp.test(null));\r\n    assertTrue(tp.test(new Thread()));\r\n    final ThreadGroupPredicate tgp = ThreadUtils.ALWAYS_TRUE_PREDICATE;\r\n    assertTrue(tgp.test(null));\r\n    assertTrue(tgp.test(new ThreadGroup(\"\")));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ThreadUtilsTest.java",
  "methodName" : "testGetAllThreadGroupsDoesNotReturnNull",
  "sourceCode" : "@Test\r\nvoid testGetAllThreadGroupsDoesNotReturnNull() {\r\n    // LANG-1706 getAllThreadGroups and findThreadGroups should not return null items\r\n    final Collection<ThreadGroup> threads = ThreadUtils.getAllThreadGroups();\r\n    assertEquals(0, threads.stream().filter(Objects::isNull).count());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ThreadUtilsTest.java",
  "methodName" : "testGetAllThreadsDoesNotReturnNull",
  "sourceCode" : "@Test\r\nvoid testGetAllThreadsDoesNotReturnNull() {\r\n    // LANG-1706 getAllThreads and findThreads should not return null items\r\n    final Collection<Thread> threads = ThreadUtils.getAllThreads();\r\n    assertEquals(0, threads.stream().filter(Objects::isNull).count());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ThreadUtilsTest.java",
  "methodName" : "testInvalidThreadId",
  "sourceCode" : "@Test\r\nvoid testInvalidThreadId() {\r\n    assertIllegalArgumentException(() -> ThreadUtils.findThreadById(-5L));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ThreadUtilsTest.java",
  "methodName" : "testJoinDuration",
  "sourceCode" : "@Test\r\nvoid testJoinDuration() throws InterruptedException {\r\n    ThreadUtils.join(new Thread(), Duration.ZERO);\r\n    ThreadUtils.join(new Thread(), Duration.ofMillis(1));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ThreadUtilsTest.java",
  "methodName" : "testNoThread",
  "sourceCode" : "@Test\r\nvoid testNoThread() {\r\n    assertEquals(0, ThreadUtils.findThreadsByName(\"some_thread_which_does_not_exist_18762ZucTT\").size());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ThreadUtilsTest.java",
  "methodName" : "testNoThreadGroup",
  "sourceCode" : "@Test\r\nvoid testNoThreadGroup() {\r\n    assertEquals(0, ThreadUtils.findThreadGroupsByName(\"some_thread_group_which_does_not_exist_18762ZucTTII\").size());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ThreadUtilsTest.java",
  "methodName" : "testNullThreadGroupName",
  "sourceCode" : "@Test\r\nvoid testNullThreadGroupName() {\r\n    assertNullPointerException(() -> ThreadUtils.findThreadGroupsByName(null));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ThreadUtilsTest.java",
  "methodName" : "testNullThreadName",
  "sourceCode" : "@Test\r\nvoid testNullThreadName() {\r\n    assertNullPointerException(() -> ThreadUtils.findThreadsByName(null));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ThreadUtilsTest.java",
  "methodName" : "testNullThreadThreadGroup1",
  "sourceCode" : "@Test\r\nvoid testNullThreadThreadGroup1() {\r\n    assertNullPointerException(() -> ThreadUtils.findThreadsByName(\"tname\", (ThreadGroup) null));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ThreadUtilsTest.java",
  "methodName" : "testNullThreadThreadGroup2",
  "sourceCode" : "@Test\r\nvoid testNullThreadThreadGroup2() {\r\n    assertNullPointerException(() -> ThreadUtils.findThreadById(1L, (ThreadGroup) null));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ThreadUtilsTest.java",
  "methodName" : "testNullThreadThreadGroup3",
  "sourceCode" : "@Test\r\nvoid testNullThreadThreadGroup3() {\r\n    assertNullPointerException(() -> ThreadUtils.findThreadsByName(null, (ThreadGroup) null));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ThreadUtilsTest.java",
  "methodName" : "testNullThreadThreadGroupName1",
  "sourceCode" : "@Test\r\nvoid testNullThreadThreadGroupName1() {\r\n    assertNullPointerException(() -> ThreadUtils.findThreadsByName(null, \"tgname\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ThreadUtilsTest.java",
  "methodName" : "testNullThreadThreadGroupName2",
  "sourceCode" : "@Test\r\nvoid testNullThreadThreadGroupName2() {\r\n    assertNullPointerException(() -> ThreadUtils.findThreadsByName(\"tname\", (String) null));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ThreadUtilsTest.java",
  "methodName" : "testNullThreadThreadGroupName3",
  "sourceCode" : "@Test\r\nvoid testNullThreadThreadGroupName3() {\r\n    assertNullPointerException(() -> ThreadUtils.findThreadsByName(null, (String) null));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ThreadUtilsTest.java",
  "methodName" : "testSleepDuration",
  "sourceCode" : "@Test\r\nvoid testSleepDuration() throws InterruptedException {\r\n    ThreadUtils.sleep(Duration.ZERO);\r\n    ThreadUtils.sleep(Duration.ofMillis(1));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ThreadUtilsTest.java",
  "methodName" : "testSystemThreadGroupExists",
  "sourceCode" : "@Test\r\nvoid testSystemThreadGroupExists() {\r\n    final ThreadGroup systemThreadGroup = ThreadUtils.getSystemThreadGroup();\r\n    assertNotNull(systemThreadGroup);\r\n    assertNull(systemThreadGroup.getParent());\r\n    assertEquals(\"system\", systemThreadGroup.getName());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ThreadUtilsTest.java",
  "methodName" : "testThreadGroups",
  "sourceCode" : "@Test\r\nvoid testThreadGroups() throws InterruptedException {\r\n    final String threadGroupName = \"thread_group_DDZZ99__for_testThreadGroups\";\r\n    final ThreadGroup threadGroup = new ThreadGroup(threadGroupName);\r\n    final Thread t1 = new TestThread(threadGroup, \"thread1_XXOOPP__\");\r\n    final Thread t2 = new TestThread(threadGroup, \"thread2_XXOOPP__\");\r\n    try {\r\n        t1.start();\r\n        t2.start();\r\n        assertEquals(1, ThreadUtils.findThreadsByName(\"thread1_XXOOPP__\").size());\r\n        assertEquals(1, ThreadUtils.findThreadsByName(\"thread1_XXOOPP__\", threadGroupName).size());\r\n        assertEquals(1, ThreadUtils.findThreadsByName(\"thread2_XXOOPP__\", threadGroupName).size());\r\n        assertEquals(0, ThreadUtils.findThreadsByName(\"thread1_XXOOPP__\", \"non_existent_thread_group_JJHHZZ__\").size());\r\n        assertEquals(0, ThreadUtils.findThreadsByName(\"non_existent_thread_BBDDWW__\", threadGroupName).size());\r\n        assertEquals(1, ThreadUtils.findThreadGroupsByName(threadGroupName).size());\r\n        assertEquals(0, ThreadUtils.findThreadGroupsByName(\"non_existent_thread_group_JJHHZZ__\").size());\r\n        assertNotNull(ThreadUtils.findThreadById(t1.getId(), threadGroup));\r\n    } finally {\r\n        t1.interrupt();\r\n        t2.interrupt();\r\n        t1.join();\r\n        t2.join();\r\n        threadGroup.destroy();\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ThreadUtilsTest.java",
  "methodName" : "testThreadGroupsById",
  "sourceCode" : "@Test\r\nvoid testThreadGroupsById() throws InterruptedException {\r\n    final String threadGroupName = \"thread_group_DDZZ99__for_testThreadGroupsById\";\r\n    final ThreadGroup threadGroup = new ThreadGroup(threadGroupName);\r\n    final Thread t1 = new TestThread(threadGroup, \"thread1_XXOOPP__\");\r\n    final Thread t2 = new TestThread(threadGroup, \"thread2_XXOOPP__\");\r\n    final long nonExistingId = t1.getId() + t2.getId();\r\n    try {\r\n        t1.start();\r\n        t2.start();\r\n        assertSame(t1, ThreadUtils.findThreadById(t1.getId(), threadGroupName));\r\n        assertSame(t2, ThreadUtils.findThreadById(t2.getId(), threadGroupName));\r\n        assertNull(ThreadUtils.findThreadById(nonExistingId, \"non_existent_thread_group_JJHHZZ__\"));\r\n        assertNull(ThreadUtils.findThreadById(nonExistingId, threadGroupName));\r\n    } finally {\r\n        t1.interrupt();\r\n        t2.interrupt();\r\n        t1.join();\r\n        t2.join();\r\n        threadGroup.destroy();\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ThreadUtilsTest.java",
  "methodName" : "testThreadGroupsByIdFail",
  "sourceCode" : "@Test\r\nvoid testThreadGroupsByIdFail() {\r\n    assertNullPointerException(() -> ThreadUtils.findThreadById(Thread.currentThread().getId(), (String) null));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ThreadUtilsTest.java",
  "methodName" : "testThreadGroupsNullParent",
  "sourceCode" : "@Test\r\nvoid testThreadGroupsNullParent() {\r\n    assertNullPointerException(() -> ThreadUtils.findThreadGroups(null, true, Predicates.truePredicate()));\r\n    assertNullPointerException(() -> ThreadUtils.findThreadGroups(null, false, Predicates.truePredicate()));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ThreadUtilsTest.java",
  "methodName" : "testThreadGroupsNullPredicate",
  "sourceCode" : "@Test\r\nvoid testThreadGroupsNullPredicate() {\r\n    assertNullPointerException(() -> ThreadUtils.findThreadGroups((ThreadGroupPredicate) null));\r\n    assertNullPointerException(() -> ThreadUtils.findThreadGroups((Predicate<ThreadGroup>) null));\r\n    assertNullPointerException(() -> ThreadUtils.findThreadGroups((Predicate) null));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ThreadUtilsTest.java",
  "methodName" : "testThreadGroupsRef",
  "sourceCode" : "@Test\r\nvoid testThreadGroupsRef() throws InterruptedException {\r\n    final ThreadGroup threadGroup = new ThreadGroup(\"thread_group_DDZZ99__\");\r\n    final ThreadGroup deadThreadGroup = new ThreadGroup(\"dead_thread_group_MMQQSS__\");\r\n    deadThreadGroup.destroy();\r\n    final Thread t1 = new TestThread(threadGroup, \"thread1_XXOOPP__\");\r\n    final Thread t2 = new TestThread(threadGroup, \"thread2_XXOOPP__\");\r\n    try {\r\n        t1.start();\r\n        t2.start();\r\n        assertEquals(1, ThreadUtils.findThreadsByName(\"thread1_XXOOPP__\").size());\r\n        assertEquals(1, ThreadUtils.findThreadsByName(\"thread1_XXOOPP__\", threadGroup).size());\r\n        assertEquals(1, ThreadUtils.findThreadsByName(\"thread2_XXOOPP__\", threadGroup).size());\r\n        assertEquals(0, ThreadUtils.findThreadsByName(\"thread1_XXOOPP__\", deadThreadGroup).size());\r\n    } finally {\r\n        t1.interrupt();\r\n        t2.interrupt();\r\n        t1.join();\r\n        t2.join();\r\n        threadGroup.destroy();\r\n        assertEquals(0, ThreadUtils.findThreadsByName(\"thread2_XXOOPP__\", threadGroup).size());\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ThreadUtilsTest.java",
  "methodName" : "testThreads",
  "sourceCode" : "@Test\r\nvoid testThreads() throws InterruptedException {\r\n    final Thread t1 = new TestThread(\"thread1_XXOOLL__\");\r\n    final Thread t2 = new TestThread(\"thread2_XXOOLL__\");\r\n    try {\r\n        t1.start();\r\n        t2.start();\r\n        assertEquals(1, ThreadUtils.findThreadsByName(\"thread2_XXOOLL__\").size());\r\n    } finally {\r\n        t1.interrupt();\r\n        t2.interrupt();\r\n        t1.join();\r\n        t2.join();\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ThreadUtilsTest.java",
  "methodName" : "testThreadsById",
  "sourceCode" : "@Test\r\nvoid testThreadsById() throws InterruptedException {\r\n    final Thread t1 = new TestThread(\"thread1_XXOOLL__\");\r\n    final Thread t2 = new TestThread(\"thread2_XXOOLL__\");\r\n    try {\r\n        t1.start();\r\n        t2.start();\r\n        assertSame(t1, ThreadUtils.findThreadById(t1.getId()));\r\n        assertSame(t2, ThreadUtils.findThreadById(t2.getId()));\r\n    } finally {\r\n        t1.interrupt();\r\n        t2.interrupt();\r\n        t1.join();\r\n        t2.join();\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ThreadUtilsTest.java",
  "methodName" : "testThreadsByIdWrongGroup",
  "sourceCode" : "@Test\r\nvoid testThreadsByIdWrongGroup() throws InterruptedException {\r\n    final Thread t1 = new TestThread(\"thread1_XXOOLL__\");\r\n    final ThreadGroup tg = new ThreadGroup(\"tg__HHEE22\");\r\n    try {\r\n        t1.start();\r\n        assertNull(ThreadUtils.findThreadById(t1.getId(), tg));\r\n    } finally {\r\n        t1.interrupt();\r\n        t1.join();\r\n        tg.destroy();\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ThreadUtilsTest.java",
  "methodName" : "testThreadsNullPredicate",
  "sourceCode" : "@Test\r\nvoid testThreadsNullPredicate() {\r\n    assertNullPointerException(() -> ThreadUtils.findThreads((ThreadPredicate) null));\r\n    assertNullPointerException(() -> ThreadUtils.findThreads((Predicate<Thread>) null));\r\n    assertNullPointerException(() -> ThreadUtils.findThreads((Predicate) null));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ThreadUtilsTest.java",
  "methodName" : "testThreadsSameName",
  "sourceCode" : "@Test\r\nvoid testThreadsSameName() throws InterruptedException {\r\n    final Thread t1 = new TestThread(\"thread1_XXOOLL__\");\r\n    final Thread alsot1 = new TestThread(\"thread1_XXOOLL__\");\r\n    try {\r\n        t1.start();\r\n        alsot1.start();\r\n        assertEquals(2, ThreadUtils.findThreadsByName(\"thread1_XXOOLL__\").size());\r\n    } finally {\r\n        t1.interrupt();\r\n        alsot1.interrupt();\r\n        t1.join();\r\n        alsot1.join();\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\time\\CalendarUtilsTest.java",
  "methodName" : "testGetDayOfMonth",
  "sourceCode" : "@Test\r\nvoid testGetDayOfMonth() {\r\n    assertEquals(Calendar.getInstance().get(Calendar.DAY_OF_MONTH), CalendarUtils.getInstance().getDayOfMonth());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\time\\CalendarUtilsTest.java",
  "methodName" : "testGetDayOfYear",
  "sourceCode" : "@Test\r\nvoid testGetDayOfYear() {\r\n    assertEquals(Calendar.getInstance().get(Calendar.DAY_OF_YEAR), CalendarUtils.getInstance().getDayOfYear());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\time\\CalendarUtilsTest.java",
  "methodName" : "testGetMonth",
  "sourceCode" : "@Test\r\nvoid testGetMonth() {\r\n    assertEquals(Calendar.getInstance().get(Calendar.MONTH), CalendarUtils.getInstance().getMonth());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\time\\CalendarUtilsTest.java",
  "methodName" : "testGetStandaloneLongMonthNames",
  "sourceCode" : "@Test\r\nvoid testGetStandaloneLongMonthNames() {\r\n    final String[] monthNames = CalendarUtils.getInstance(Locale.GERMAN).getStandaloneLongMonthNames();\r\n    assertEquals(12, monthNames.length);\r\n    assertEquals(\"Januar\", monthNames[0]);\r\n    assertEquals(\"Februar\", monthNames[1]);\r\n    assertEquals(\"M\\u00e4rz\", monthNames[2]);\r\n    assertEquals(\"April\", monthNames[3]);\r\n    assertEquals(\"Mai\", monthNames[4]);\r\n    assertEquals(\"Juni\", monthNames[5]);\r\n    assertEquals(\"Juli\", monthNames[6]);\r\n    assertEquals(\"August\", monthNames[7]);\r\n    assertEquals(\"September\", monthNames[8]);\r\n    assertEquals(\"Oktober\", monthNames[9]);\r\n    assertEquals(\"November\", monthNames[10]);\r\n    assertEquals(\"Dezember\", monthNames[11]);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\time\\CalendarUtilsTest.java",
  "methodName" : "testGetStandaloneShortMonthNames",
  "sourceCode" : "@Test\r\nvoid testGetStandaloneShortMonthNames() {\r\n    final String[] monthNames = CalendarUtils.getInstance(Locale.GERMAN).getStandaloneShortMonthNames();\r\n    assertEquals(12, monthNames.length);\r\n    assertEquals(\"Jan\", monthNames[0]);\r\n    assertEquals(\"Feb\", monthNames[1]);\r\n    assertEquals(\"M\\u00e4r\", monthNames[2]);\r\n    assertEquals(\"Apr\", monthNames[3]);\r\n    assertEquals(\"Mai\", monthNames[4]);\r\n    assertEquals(\"Jun\", monthNames[5]);\r\n    assertEquals(\"Jul\", monthNames[6]);\r\n    assertEquals(\"Aug\", monthNames[7]);\r\n    assertEquals(\"Sep\", monthNames[8]);\r\n    assertEquals(\"Okt\", monthNames[9]);\r\n    assertEquals(\"Nov\", monthNames[10]);\r\n    assertEquals(\"Dez\", monthNames[11]);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\time\\CalendarUtilsTest.java",
  "methodName" : "testGetYear",
  "sourceCode" : "@Test\r\nvoid testGetYear() {\r\n    assertEquals(Calendar.getInstance().get(Calendar.YEAR), CalendarUtils.INSTANCE.getYear());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\time\\CalendarUtilsTest.java",
  "methodName" : "testToLocalDate",
  "sourceCode" : "/**\r\n * Tests {@link CalendarUtils#toLocalDate()} from https://github.com/apache/commons-lang/pull/725.\r\n */\r\n@Test\r\nvoid testToLocalDate() {\r\n    final Calendar calendar = new GregorianCalendar(TimeZone.getTimeZone(TimeZones.GMT_ID));\r\n    calendar.setTimeInMillis(-27078001200000L);\r\n    assertEquals(\"1111-12-08T05:00:00Z\", calendar.toInstant().toString());\r\n    assertEquals(LocalDate.of(1111, Month.DECEMBER, 8), new CalendarUtils(calendar).toLocalDate());\r\n    calendar.setTimeInMillis(1614700215000L);\r\n    assertEquals(LocalDate.of(2021, Month.MARCH, 2), new CalendarUtils(calendar).toLocalDate());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\time\\CalendarUtilsTest.java",
  "methodName" : "testToLocalDateTime",
  "sourceCode" : "@ParameterizedTest\r\n@MethodSource(TimeZonesTest.TIME_ZONE_GET_AVAILABLE_IDS)\r\nvoid testToLocalDateTime(final String timeZoneId) {\r\n    final TimeZone timeZone = TimeZone.getTimeZone(timeZoneId);\r\n    final ZoneId zoneId = timeZone.toZoneId();\r\n    final Calendar calendar = new GregorianCalendar(timeZone);\r\n    calendar.setTimeInMillis(0);\r\n    assertEquals(LocalDateTime.ofInstant(calendar.toInstant(), calendar.getTimeZone().toZoneId()), new CalendarUtils(calendar).toLocalDateTime());\r\n    final ZonedDateTime zdt1 = ZonedDateTime.of(1, 2, 3, 4, 5, 6, 0, zoneId);\r\n    calendar.setTimeInMillis(zdt1.toInstant().toEpochMilli());\r\n    assertEquals(LocalDateTime.ofInstant(zdt1.toInstant(), calendar.getTimeZone().toZoneId()), new CalendarUtils(calendar).toLocalDateTime());\r\n}",
  "annotations" : [ "ParameterizedTest" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\time\\CalendarUtilsTest.java",
  "methodName" : "testToOffsetDateTime",
  "sourceCode" : "@ParameterizedTest\r\n@MethodSource(TimeZonesTest.TIME_ZONE_GET_AVAILABLE_IDS)\r\nvoid testToOffsetDateTime(final String timeZoneId) {\r\n    final TimeZone timeZone = TimeZone.getTimeZone(timeZoneId);\r\n    final ZoneId zoneId = timeZone.toZoneId();\r\n    final Calendar calendar = new GregorianCalendar(timeZone);\r\n    calendar.setTimeInMillis(0);\r\n    assertEquals(OffsetDateTime.ofInstant(calendar.toInstant(), calendar.getTimeZone().toZoneId()), new CalendarUtils(calendar).toOffsetDateTime());\r\n    final ZonedDateTime zdt1 = ZonedDateTime.of(1, 2, 3, 4, 5, 6, 0, zoneId);\r\n    calendar.setTimeInMillis(zdt1.toInstant().toEpochMilli());\r\n    assertEquals(OffsetDateTime.ofInstant(zdt1.toInstant(), calendar.getTimeZone().toZoneId()), new CalendarUtils(calendar).toOffsetDateTime());\r\n}",
  "annotations" : [ "ParameterizedTest" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\time\\CalendarUtilsTest.java",
  "methodName" : "testToZonedDateTime",
  "sourceCode" : "@ParameterizedTest\r\n@MethodSource(TimeZonesTest.TIME_ZONE_GET_AVAILABLE_IDS)\r\nvoid testToZonedDateTime(final String timeZoneId) {\r\n    final TimeZone timeZone = TimeZone.getTimeZone(timeZoneId);\r\n    final ZoneId zoneId = timeZone.toZoneId();\r\n    final Calendar calendar = new GregorianCalendar(timeZone);\r\n    calendar.setTimeInMillis(0);\r\n    assertEquals(ZonedDateTime.ofInstant(calendar.toInstant(), calendar.getTimeZone().toZoneId()), new CalendarUtils(calendar).toZonedDateTime());\r\n    final ZonedDateTime zdt1 = ZonedDateTime.of(1, 2, 3, 4, 5, 6, 0, zoneId);\r\n    calendar.setTimeInMillis(zdt1.toInstant().toEpochMilli());\r\n    assertEquals(ZonedDateTime.ofInstant(zdt1.toInstant(), calendar.getTimeZone().toZoneId()), new CalendarUtils(calendar).toZonedDateTime());\r\n}",
  "annotations" : [ "ParameterizedTest" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\time\\DateFormatUtilsTest.java",
  "methodName" : "testConstructor",
  "sourceCode" : "@Test\r\nvoid testConstructor() {\r\n    assertNotNull(new DateFormatUtils());\r\n    final Constructor<?>[] cons = DateFormatUtils.class.getDeclaredConstructors();\r\n    assertEquals(1, cons.length);\r\n    assertTrue(Modifier.isPublic(cons[0].getModifiers()));\r\n    assertTrue(Modifier.isPublic(DateFormatUtils.class.getModifiers()));\r\n    assertFalse(Modifier.isFinal(DateFormatUtils.class.getModifiers()));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\time\\DateFormatUtilsTest.java",
  "methodName" : "testDateISO",
  "sourceCode" : "@Test\r\nvoid testDateISO() {\r\n    testGmtMinus3(\"2002-02-23\", DateFormatUtils.ISO_DATE_FORMAT.getPattern());\r\n    testGmtMinus3(\"2002-02-23-03:00\", DateFormatUtils.ISO_DATE_TIME_ZONE_FORMAT.getPattern());\r\n    testUTC(\"2002-02-23Z\", DateFormatUtils.ISO_DATE_TIME_ZONE_FORMAT.getPattern());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\time\\DateFormatUtilsTest.java",
  "methodName" : "testDateTimeISO",
  "sourceCode" : "@Test\r\nvoid testDateTimeISO() {\r\n    testGmtMinus3(\"2002-02-23T09:11:12\", DateFormatUtils.ISO_DATETIME_FORMAT.getPattern());\r\n    testGmtMinus3(\"2002-02-23T09:11:12-03:00\", DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.getPattern());\r\n    testUTC(\"2002-02-23T09:11:12Z\", DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.getPattern());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\time\\DateFormatUtilsTest.java",
  "methodName" : "testFormat",
  "sourceCode" : "@Test\r\nvoid testFormat() {\r\n    final Calendar c = Calendar.getInstance(FastTimeZone.getGmtTimeZone());\r\n    c.set(2005, Calendar.JANUARY, 1, 12, 0, 0);\r\n    c.setTimeZone(TimeZone.getDefault());\r\n    final StringBuilder buffer = new StringBuilder();\r\n    final int year = c.get(Calendar.YEAR);\r\n    final int month = c.get(Calendar.MONTH) + 1;\r\n    final int day = c.get(Calendar.DAY_OF_MONTH);\r\n    final int hour = c.get(Calendar.HOUR_OF_DAY);\r\n    buffer.append(year);\r\n    buffer.append(month);\r\n    buffer.append(day);\r\n    buffer.append(hour);\r\n    assertEquals(buffer.toString(), DateFormatUtils.format(c.getTime(), \"yyyyMdH\"));\r\n    assertEquals(buffer.toString(), DateFormatUtils.format(c.getTime().getTime(), \"yyyyMdH\"));\r\n    assertEquals(buffer.toString(), DateFormatUtils.format(c.getTime(), \"yyyyMdH\", Locale.US));\r\n    assertEquals(buffer.toString(), DateFormatUtils.format(c.getTime().getTime(), \"yyyyMdH\", Locale.US));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\time\\DateFormatUtilsTest.java",
  "methodName" : "testFormatCalendar",
  "sourceCode" : "@Test\r\nvoid testFormatCalendar() {\r\n    final Calendar c = Calendar.getInstance(FastTimeZone.getGmtTimeZone());\r\n    c.set(2005, Calendar.JANUARY, 1, 12, 0, 0);\r\n    c.setTimeZone(TimeZone.getDefault());\r\n    final StringBuilder buffer = new StringBuilder();\r\n    final int year = c.get(Calendar.YEAR);\r\n    final int month = c.get(Calendar.MONTH) + 1;\r\n    final int day = c.get(Calendar.DAY_OF_MONTH);\r\n    final int hour = c.get(Calendar.HOUR_OF_DAY);\r\n    buffer.append(year);\r\n    buffer.append(month);\r\n    buffer.append(day);\r\n    buffer.append(hour);\r\n    assertEquals(buffer.toString(), DateFormatUtils.format(c, \"yyyyMdH\"));\r\n    assertEquals(buffer.toString(), DateFormatUtils.format(c.getTime(), \"yyyyMdH\"));\r\n    assertEquals(buffer.toString(), DateFormatUtils.format(c, \"yyyyMdH\", Locale.US));\r\n    assertEquals(buffer.toString(), DateFormatUtils.format(c.getTime(), \"yyyyMdH\", Locale.US));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\time\\DateFormatUtilsTest.java",
  "methodName" : "testFormatUTC",
  "sourceCode" : "@Test\r\nvoid testFormatUTC() {\r\n    final Calendar c = Calendar.getInstance(FastTimeZone.getGmtTimeZone());\r\n    c.set(2005, Calendar.JANUARY, 1, 12, 0, 0);\r\n    assertEquals(\"2005-01-01T12:00:00\", DateFormatUtils.formatUTC(c.getTime(), DateFormatUtils.ISO_DATETIME_FORMAT.getPattern()));\r\n    assertEquals(\"2005-01-01T12:00:00\", DateFormatUtils.formatUTC(c.getTime().getTime(), DateFormatUtils.ISO_DATETIME_FORMAT.getPattern()));\r\n    assertEquals(\"2005-01-01T12:00:00\", DateFormatUtils.formatUTC(c.getTime(), DateFormatUtils.ISO_DATETIME_FORMAT.getPattern(), Locale.US));\r\n    assertEquals(\"2005-01-01T12:00:00\", DateFormatUtils.formatUTC(c.getTime().getTime(), DateFormatUtils.ISO_DATETIME_FORMAT.getPattern(), Locale.US));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\time\\DateFormatUtilsTest.java",
  "methodName" : "testLANG1000",
  "sourceCode" : "@Test\r\nvoid testLANG1000() throws Exception {\r\n    final String date = \"2013-11-18T12:48:05Z\";\r\n    DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.parse(date);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\time\\DateFormatUtilsTest.java",
  "methodName" : "testLANG1462",
  "sourceCode" : "@Test\r\nvoid testLANG1462() {\r\n    final TimeZone timeZone = TimeZone.getTimeZone(\"GMT-3\");\r\n    final Calendar calendar = createJuneTestDate(timeZone);\r\n    assertEquals(\"20030608101112\", DateFormatUtils.format(calendar, \"yyyyMMddHHmmss\"));\r\n    calendar.setTimeZone(TimeZone.getTimeZone(\"JST\"));\r\n    assertEquals(\"20030608221112\", DateFormatUtils.format(calendar, \"yyyyMMddHHmmss\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\time\\DateFormatUtilsTest.java",
  "methodName" : "testLang530",
  "sourceCode" : "@DefaultTimeZone(\"UTC\")\r\n@Test\r\nvoid testLang530() throws ParseException {\r\n    final Date d = new Date();\r\n    final String isoDateStr = DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.format(d);\r\n    final Date d2 = DateUtils.parseDate(isoDateStr, DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.getPattern());\r\n    // the format loses milliseconds so have to reintroduce them\r\n    assertEquals(d.getTime(), d2.getTime() + d.getTime() % 1000, \"Date not equal to itself ISO formatted and parsed\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\time\\DateFormatUtilsTest.java",
  "methodName" : "testLang916",
  "sourceCode" : "/**\r\n * According to LANG-916 (https://issues.apache.org/jira/browse/LANG-916),\r\n * the format method did contain a bug: it did not use the TimeZone data.\r\n *\r\n * This method test that the bug is fixed.\r\n */\r\n@Test\r\nvoid testLang916() {\r\n    final Calendar cal = Calendar.getInstance(TimeZone.getTimeZone(\"Europe/Paris\"));\r\n    cal.clear();\r\n    cal.set(2009, 9, 16, 8, 42, 16);\r\n    // Long.\r\n    {\r\n        final String value = DateFormatUtils.format(cal.getTimeInMillis(), DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.getPattern(), TimeZone.getTimeZone(\"Europe/Paris\"));\r\n        assertEquals(\"2009-10-16T08:42:16+02:00\", value, \"long\");\r\n    }\r\n    {\r\n        final String value = DateFormatUtils.format(cal.getTimeInMillis(), DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.getPattern(), TimeZone.getTimeZone(\"Asia/Kolkata\"));\r\n        assertEquals(\"2009-10-16T12:12:16+05:30\", value, \"long\");\r\n    }\r\n    {\r\n        final String value = DateFormatUtils.format(cal.getTimeInMillis(), DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.getPattern(), TimeZone.getTimeZone(\"Europe/London\"));\r\n        assertEquals(\"2009-10-16T07:42:16+01:00\", value, \"long\");\r\n    }\r\n    // Calendar.\r\n    {\r\n        final String value = DateFormatUtils.format(cal, DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.getPattern(), TimeZone.getTimeZone(\"Europe/Paris\"));\r\n        assertEquals(\"2009-10-16T08:42:16+02:00\", value, \"calendar\");\r\n    }\r\n    {\r\n        final String value = DateFormatUtils.format(cal, DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.getPattern(), TimeZone.getTimeZone(\"Asia/Kolkata\"));\r\n        assertEquals(\"2009-10-16T12:12:16+05:30\", value, \"calendar\");\r\n    }\r\n    {\r\n        final String value = DateFormatUtils.format(cal, DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.getPattern(), TimeZone.getTimeZone(\"Europe/London\"));\r\n        assertEquals(\"2009-10-16T07:42:16+01:00\", value, \"calendar\");\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\time\\DateFormatUtilsTest.java",
  "methodName" : "testSMTP",
  "sourceCode" : "@DefaultLocale(language = \"en\")\r\n@Test\r\nvoid testSMTP() {\r\n    TimeZone timeZone = TimeZone.getTimeZone(\"GMT-3\");\r\n    Calendar june = createJuneTestDate(timeZone);\r\n    assertFormats(\"Sun, 08 Jun 2003 10:11:12 -0300\", DateFormatUtils.SMTP_DATETIME_FORMAT.getPattern(), timeZone, june);\r\n    timeZone = FastTimeZone.getGmtTimeZone();\r\n    june = createJuneTestDate(timeZone);\r\n    assertFormats(\"Sun, 08 Jun 2003 10:11:12 +0000\", DateFormatUtils.SMTP_DATETIME_FORMAT.getPattern(), timeZone, june);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\time\\DateFormatUtilsTest.java",
  "methodName" : "testTimeISO",
  "sourceCode" : "@Test\r\nvoid testTimeISO() {\r\n    testGmtMinus3(\"T09:11:12\", DateFormatUtils.ISO_TIME_FORMAT.getPattern());\r\n    testGmtMinus3(\"T09:11:12-03:00\", DateFormatUtils.ISO_TIME_TIME_ZONE_FORMAT.getPattern());\r\n    testUTC(\"T09:11:12Z\", DateFormatUtils.ISO_TIME_TIME_ZONE_FORMAT.getPattern());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\time\\DateFormatUtilsTest.java",
  "methodName" : "testTimeNoTISO",
  "sourceCode" : "@Test\r\nvoid testTimeNoTISO() {\r\n    testGmtMinus3(\"09:11:12\", DateFormatUtils.ISO_TIME_NO_T_FORMAT.getPattern());\r\n    testGmtMinus3(\"09:11:12-03:00\", DateFormatUtils.ISO_TIME_NO_T_TIME_ZONE_FORMAT.getPattern());\r\n    testUTC(\"09:11:12Z\", DateFormatUtils.ISO_TIME_NO_T_TIME_ZONE_FORMAT.getPattern());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\time\\DateUtilsFragmentTest.java",
  "methodName" : "testDateFragmentInLargerUnitWithCalendar",
  "sourceCode" : "@Test\r\nvoid testDateFragmentInLargerUnitWithCalendar() {\r\n    assertEquals(0, DateUtils.getFragmentInDays(aCalendar, Calendar.DATE));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\time\\DateUtilsFragmentTest.java",
  "methodName" : "testDateFragmentInLargerUnitWithDate",
  "sourceCode" : "@Test\r\nvoid testDateFragmentInLargerUnitWithDate() {\r\n    assertEquals(0, DateUtils.getFragmentInDays(aDate, Calendar.DATE));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\time\\DateUtilsFragmentTest.java",
  "methodName" : "testDayOfYearFragmentInLargerUnitWithCalendar",
  "sourceCode" : "@Test\r\nvoid testDayOfYearFragmentInLargerUnitWithCalendar() {\r\n    assertEquals(0, DateUtils.getFragmentInDays(aCalendar, Calendar.DAY_OF_YEAR));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\time\\DateUtilsFragmentTest.java",
  "methodName" : "testDayOfYearFragmentInLargerUnitWithDate",
  "sourceCode" : "@Test\r\nvoid testDayOfYearFragmentInLargerUnitWithDate() {\r\n    assertEquals(0, DateUtils.getFragmentInDays(aDate, Calendar.DAY_OF_YEAR));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\time\\DateUtilsFragmentTest.java",
  "methodName" : "testDaysOfMonthWithCalendar",
  "sourceCode" : "@Test\r\nvoid testDaysOfMonthWithCalendar() {\r\n    final long testResult = DateUtils.getFragmentInDays(aCalendar, Calendar.MONTH);\r\n    assertEquals(days, testResult);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\time\\DateUtilsFragmentTest.java",
  "methodName" : "testDaysOfMonthWithDate",
  "sourceCode" : "@Test\r\nvoid testDaysOfMonthWithDate() {\r\n    final long testResult = DateUtils.getFragmentInDays(aDate, Calendar.MONTH);\r\n    final Calendar cal = Calendar.getInstance();\r\n    cal.setTime(aDate);\r\n    assertEquals(cal.get(Calendar.DAY_OF_MONTH), testResult);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\time\\DateUtilsFragmentTest.java",
  "methodName" : "testDaysOfYearWithCalendar",
  "sourceCode" : "@Test\r\nvoid testDaysOfYearWithCalendar() {\r\n    final long testResult = DateUtils.getFragmentInDays(aCalendar, Calendar.YEAR);\r\n    assertEquals(aCalendar.get(Calendar.DAY_OF_YEAR), testResult);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\time\\DateUtilsFragmentTest.java",
  "methodName" : "testDaysOfYearWithDate",
  "sourceCode" : "@Test\r\nvoid testDaysOfYearWithDate() {\r\n    final long testResult = DateUtils.getFragmentInDays(aDate, Calendar.YEAR);\r\n    final Calendar cal = Calendar.getInstance();\r\n    cal.setTime(aDate);\r\n    assertEquals(cal.get(Calendar.DAY_OF_YEAR), testResult);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\time\\DateUtilsFragmentTest.java",
  "methodName" : "testHourOfDayFragmentInLargerUnitWithCalendar",
  "sourceCode" : "@Test\r\nvoid testHourOfDayFragmentInLargerUnitWithCalendar() {\r\n    assertEquals(0, DateUtils.getFragmentInHours(aCalendar, Calendar.HOUR_OF_DAY));\r\n    assertEquals(0, DateUtils.getFragmentInDays(aCalendar, Calendar.HOUR_OF_DAY));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\time\\DateUtilsFragmentTest.java",
  "methodName" : "testHourOfDayFragmentInLargerUnitWithDate",
  "sourceCode" : "@Test\r\nvoid testHourOfDayFragmentInLargerUnitWithDate() {\r\n    assertEquals(0, DateUtils.getFragmentInHours(aDate, Calendar.HOUR_OF_DAY));\r\n    assertEquals(0, DateUtils.getFragmentInDays(aDate, Calendar.HOUR_OF_DAY));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\time\\DateUtilsFragmentTest.java",
  "methodName" : "testHoursOfDayWithCalendar",
  "sourceCode" : "@Test\r\nvoid testHoursOfDayWithCalendar() {\r\n    long testResult = DateUtils.getFragmentInHours(aCalendar, Calendar.DATE);\r\n    final long expectedValue = hours;\r\n    assertEquals(expectedValue, testResult);\r\n    testResult = DateUtils.getFragmentInHours(aCalendar, Calendar.DAY_OF_YEAR);\r\n    assertEquals(expectedValue, testResult);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\time\\DateUtilsFragmentTest.java",
  "methodName" : "testHoursOfDayWithDate",
  "sourceCode" : "@Test\r\nvoid testHoursOfDayWithDate() {\r\n    long testResult = DateUtils.getFragmentInHours(aDate, Calendar.DATE);\r\n    final long expectedValue = hours;\r\n    assertEquals(expectedValue, testResult);\r\n    testResult = DateUtils.getFragmentInHours(aDate, Calendar.DAY_OF_YEAR);\r\n    assertEquals(expectedValue, testResult);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\time\\DateUtilsFragmentTest.java",
  "methodName" : "testHoursOfMonthWithCalendar",
  "sourceCode" : "@Test\r\nvoid testHoursOfMonthWithCalendar() {\r\n    final long testResult = DateUtils.getFragmentInHours(aCalendar, Calendar.MONTH);\r\n    assertEquals(hours + (days - 1) * DateUtils.MILLIS_PER_DAY / DateUtils.MILLIS_PER_HOUR, testResult);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\time\\DateUtilsFragmentTest.java",
  "methodName" : "testHoursOfMonthWithDate",
  "sourceCode" : "@Test\r\nvoid testHoursOfMonthWithDate() {\r\n    final long testResult = DateUtils.getFragmentInHours(aDate, Calendar.MONTH);\r\n    assertEquals(hours + (days - 1) * DateUtils.MILLIS_PER_DAY / DateUtils.MILLIS_PER_HOUR, testResult);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\time\\DateUtilsFragmentTest.java",
  "methodName" : "testHoursOfYearWithCalendar",
  "sourceCode" : "@Test\r\nvoid testHoursOfYearWithCalendar() {\r\n    final long testResult = DateUtils.getFragmentInHours(aCalendar, Calendar.YEAR);\r\n    assertEquals(hours + (aCalendar.get(Calendar.DAY_OF_YEAR) - 1) * DateUtils.MILLIS_PER_DAY / DateUtils.MILLIS_PER_HOUR, testResult);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\time\\DateUtilsFragmentTest.java",
  "methodName" : "testHoursOfYearWithDate",
  "sourceCode" : "@Test\r\nvoid testHoursOfYearWithDate() {\r\n    final long testResult = DateUtils.getFragmentInHours(aDate, Calendar.YEAR);\r\n    final Calendar cal = Calendar.getInstance();\r\n    cal.setTime(aDate);\r\n    assertEquals(hours + (cal.get(Calendar.DAY_OF_YEAR) - 1) * DateUtils.MILLIS_PER_DAY / DateUtils.MILLIS_PER_HOUR, testResult);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\time\\DateUtilsFragmentTest.java",
  "methodName" : "testInvalidFragmentWithCalendar",
  "sourceCode" : "// Calendar.SECOND as useful fragment\r\n@Test\r\nvoid testInvalidFragmentWithCalendar() {\r\n    assertIllegalArgumentException(() -> DateUtils.getFragmentInMilliseconds(aCalendar, 0));\r\n    assertIllegalArgumentException(() -> DateUtils.getFragmentInSeconds(aCalendar, 0));\r\n    assertIllegalArgumentException(() -> DateUtils.getFragmentInMinutes(aCalendar, 0));\r\n    assertIllegalArgumentException(() -> DateUtils.getFragmentInHours(aCalendar, 0));\r\n    assertIllegalArgumentException(() -> DateUtils.getFragmentInDays(aCalendar, 0));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\time\\DateUtilsFragmentTest.java",
  "methodName" : "testInvalidFragmentWithDate",
  "sourceCode" : "@Test\r\nvoid testInvalidFragmentWithDate() {\r\n    assertIllegalArgumentException(() -> DateUtils.getFragmentInMilliseconds(aDate, 0));\r\n    assertIllegalArgumentException(() -> DateUtils.getFragmentInSeconds(aDate, 0));\r\n    assertIllegalArgumentException(() -> DateUtils.getFragmentInMinutes(aDate, 0));\r\n    assertIllegalArgumentException(() -> DateUtils.getFragmentInHours(aDate, 0));\r\n    assertIllegalArgumentException(() -> DateUtils.getFragmentInDays(aDate, 0));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\time\\DateUtilsFragmentTest.java",
  "methodName" : "testMillisecondFragmentInLargerUnitWithCalendar",
  "sourceCode" : "// Calendar.MINUTE as useful fragment\r\n@Test\r\nvoid testMillisecondFragmentInLargerUnitWithCalendar() {\r\n    assertEquals(0, DateUtils.getFragmentInMilliseconds(aCalendar, Calendar.MILLISECOND));\r\n    assertEquals(0, DateUtils.getFragmentInSeconds(aCalendar, Calendar.MILLISECOND));\r\n    assertEquals(0, DateUtils.getFragmentInMinutes(aCalendar, Calendar.MILLISECOND));\r\n    assertEquals(0, DateUtils.getFragmentInHours(aCalendar, Calendar.MILLISECOND));\r\n    assertEquals(0, DateUtils.getFragmentInDays(aCalendar, Calendar.MILLISECOND));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\time\\DateUtilsFragmentTest.java",
  "methodName" : "testMillisecondFragmentInLargerUnitWithDate",
  "sourceCode" : "@Test\r\nvoid testMillisecondFragmentInLargerUnitWithDate() {\r\n    assertEquals(0, DateUtils.getFragmentInMilliseconds(aDate, Calendar.MILLISECOND));\r\n    assertEquals(0, DateUtils.getFragmentInSeconds(aDate, Calendar.MILLISECOND));\r\n    assertEquals(0, DateUtils.getFragmentInMinutes(aDate, Calendar.MILLISECOND));\r\n    assertEquals(0, DateUtils.getFragmentInHours(aDate, Calendar.MILLISECOND));\r\n    assertEquals(0, DateUtils.getFragmentInDays(aDate, Calendar.MILLISECOND));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\time\\DateUtilsFragmentTest.java",
  "methodName" : "testMillisecondsOfDayWithCalendar",
  "sourceCode" : "@Test\r\nvoid testMillisecondsOfDayWithCalendar() {\r\n    long testresult = DateUtils.getFragmentInMilliseconds(aCalendar, Calendar.DATE);\r\n    final long expectedValue = millis + seconds * DateUtils.MILLIS_PER_SECOND + minutes * DateUtils.MILLIS_PER_MINUTE + hours * DateUtils.MILLIS_PER_HOUR;\r\n    assertEquals(expectedValue, testresult);\r\n    testresult = DateUtils.getFragmentInMilliseconds(aCalendar, Calendar.DAY_OF_YEAR);\r\n    assertEquals(expectedValue, testresult);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\time\\DateUtilsFragmentTest.java",
  "methodName" : "testMillisecondsOfDayWithDate",
  "sourceCode" : "// Calendar.DATE and Calendar.DAY_OF_YEAR as useful fragment\r\n@Test\r\nvoid testMillisecondsOfDayWithDate() {\r\n    long testresult = DateUtils.getFragmentInMilliseconds(aDate, Calendar.DATE);\r\n    final long expectedValue = millis + seconds * DateUtils.MILLIS_PER_SECOND + minutes * DateUtils.MILLIS_PER_MINUTE + hours * DateUtils.MILLIS_PER_HOUR;\r\n    assertEquals(expectedValue, testresult);\r\n    testresult = DateUtils.getFragmentInMilliseconds(aDate, Calendar.DAY_OF_YEAR);\r\n    assertEquals(expectedValue, testresult);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\time\\DateUtilsFragmentTest.java",
  "methodName" : "testMillisecondsOfHourWithCalendar",
  "sourceCode" : "// Calendar.HOUR_OF_DAY as useful fragment\r\n@Test\r\nvoid testMillisecondsOfHourWithCalendar() {\r\n    final long testResult = DateUtils.getFragmentInMilliseconds(aCalendar, Calendar.HOUR_OF_DAY);\r\n    assertEquals(millis + seconds * DateUtils.MILLIS_PER_SECOND + minutes * DateUtils.MILLIS_PER_MINUTE, testResult);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\time\\DateUtilsFragmentTest.java",
  "methodName" : "testMillisecondsOfHourWithDate",
  "sourceCode" : "@Test\r\nvoid testMillisecondsOfHourWithDate() {\r\n    final long testResult = DateUtils.getFragmentInMilliseconds(aDate, Calendar.HOUR_OF_DAY);\r\n    assertEquals(millis + seconds * DateUtils.MILLIS_PER_SECOND + minutes * DateUtils.MILLIS_PER_MINUTE, testResult);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\time\\DateUtilsFragmentTest.java",
  "methodName" : "testMillisecondsOfMinuteWithCalender",
  "sourceCode" : "@Test\r\nvoid testMillisecondsOfMinuteWithCalender() {\r\n    final long testResult = DateUtils.getFragmentInMilliseconds(aCalendar, Calendar.MINUTE);\r\n    assertEquals(millis + seconds * DateUtils.MILLIS_PER_SECOND, testResult);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\time\\DateUtilsFragmentTest.java",
  "methodName" : "testMillisecondsOfMinuteWithDate",
  "sourceCode" : "@Test\r\nvoid testMillisecondsOfMinuteWithDate() {\r\n    final long testResult = DateUtils.getFragmentInMilliseconds(aDate, Calendar.MINUTE);\r\n    assertEquals(millis + seconds * DateUtils.MILLIS_PER_SECOND, testResult);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\time\\DateUtilsFragmentTest.java",
  "methodName" : "testMillisecondsOfMonthWithCalendar",
  "sourceCode" : "@Test\r\nvoid testMillisecondsOfMonthWithCalendar() {\r\n    final long testResult = DateUtils.getFragmentInMilliseconds(aCalendar, Calendar.MONTH);\r\n    assertEquals(millis + seconds * DateUtils.MILLIS_PER_SECOND + minutes * DateUtils.MILLIS_PER_MINUTE + hours * DateUtils.MILLIS_PER_HOUR + (days - 1) * DateUtils.MILLIS_PER_DAY, testResult);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\time\\DateUtilsFragmentTest.java",
  "methodName" : "testMillisecondsOfMonthWithDate",
  "sourceCode" : "// Calendar.MONTH as useful fragment\r\n@Test\r\nvoid testMillisecondsOfMonthWithDate() {\r\n    final long testResult = DateUtils.getFragmentInMilliseconds(aDate, Calendar.MONTH);\r\n    assertEquals(millis + seconds * DateUtils.MILLIS_PER_SECOND + minutes * DateUtils.MILLIS_PER_MINUTE + hours * DateUtils.MILLIS_PER_HOUR + (days - 1) * DateUtils.MILLIS_PER_DAY, testResult);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\time\\DateUtilsFragmentTest.java",
  "methodName" : "testMillisecondsOfSecondWithCalendar",
  "sourceCode" : "@Test\r\nvoid testMillisecondsOfSecondWithCalendar() {\r\n    final long testResult = DateUtils.getFragmentInMilliseconds(aCalendar, Calendar.SECOND);\r\n    assertEquals(millis, testResult);\r\n    assertEquals(aCalendar.get(Calendar.MILLISECOND), testResult);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\time\\DateUtilsFragmentTest.java",
  "methodName" : "testMillisecondsOfSecondWithDate",
  "sourceCode" : "@Test\r\nvoid testMillisecondsOfSecondWithDate() {\r\n    final long testResult = DateUtils.getFragmentInMilliseconds(aDate, Calendar.SECOND);\r\n    assertEquals(millis, testResult);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\time\\DateUtilsFragmentTest.java",
  "methodName" : "testMillisecondsOfYearWithCalendar",
  "sourceCode" : "@Test\r\nvoid testMillisecondsOfYearWithCalendar() {\r\n    final long testResult = DateUtils.getFragmentInMilliseconds(aCalendar, Calendar.YEAR);\r\n    assertEquals(millis + seconds * DateUtils.MILLIS_PER_SECOND + minutes * DateUtils.MILLIS_PER_MINUTE + hours * DateUtils.MILLIS_PER_HOUR + (aCalendar.get(Calendar.DAY_OF_YEAR) - 1) * DateUtils.MILLIS_PER_DAY, testResult);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\time\\DateUtilsFragmentTest.java",
  "methodName" : "testMillisecondsOfYearWithDate",
  "sourceCode" : "// Calendar.YEAR as useful fragment\r\n@Test\r\nvoid testMillisecondsOfYearWithDate() {\r\n    final long testResult = DateUtils.getFragmentInMilliseconds(aDate, Calendar.YEAR);\r\n    final Calendar cal = Calendar.getInstance();\r\n    cal.setTime(aDate);\r\n    assertEquals(millis + seconds * DateUtils.MILLIS_PER_SECOND + minutes * DateUtils.MILLIS_PER_MINUTE + hours * DateUtils.MILLIS_PER_HOUR + (cal.get(Calendar.DAY_OF_YEAR) - 1) * DateUtils.MILLIS_PER_DAY, testResult);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\time\\DateUtilsFragmentTest.java",
  "methodName" : "testMinuteFragmentInLargerUnitWithCalendar",
  "sourceCode" : "@Test\r\nvoid testMinuteFragmentInLargerUnitWithCalendar() {\r\n    assertEquals(0, DateUtils.getFragmentInMinutes(aCalendar, Calendar.MINUTE));\r\n    assertEquals(0, DateUtils.getFragmentInHours(aCalendar, Calendar.MINUTE));\r\n    assertEquals(0, DateUtils.getFragmentInDays(aCalendar, Calendar.MINUTE));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\time\\DateUtilsFragmentTest.java",
  "methodName" : "testMinuteFragmentInLargerUnitWithDate",
  "sourceCode" : "@Test\r\nvoid testMinuteFragmentInLargerUnitWithDate() {\r\n    assertEquals(0, DateUtils.getFragmentInMinutes(aDate, Calendar.MINUTE));\r\n    assertEquals(0, DateUtils.getFragmentInHours(aDate, Calendar.MINUTE));\r\n    assertEquals(0, DateUtils.getFragmentInDays(aDate, Calendar.MINUTE));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\time\\DateUtilsFragmentTest.java",
  "methodName" : "testMinutesOfDayWithCalendar",
  "sourceCode" : "@Test\r\nvoid testMinutesOfDayWithCalendar() {\r\n    long testResult = DateUtils.getFragmentInMinutes(aCalendar, Calendar.DATE);\r\n    final long expectedValue = minutes + hours * DateUtils.MILLIS_PER_HOUR / DateUtils.MILLIS_PER_MINUTE;\r\n    assertEquals(expectedValue, testResult);\r\n    testResult = DateUtils.getFragmentInMinutes(aCalendar, Calendar.DAY_OF_YEAR);\r\n    assertEquals(expectedValue, testResult);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\time\\DateUtilsFragmentTest.java",
  "methodName" : "testMinutesOfDayWithDate",
  "sourceCode" : "@Test\r\nvoid testMinutesOfDayWithDate() {\r\n    long testResult = DateUtils.getFragmentInMinutes(aDate, Calendar.DATE);\r\n    final long expectedValue = minutes + hours * DateUtils.MILLIS_PER_HOUR / DateUtils.MILLIS_PER_MINUTE;\r\n    assertEquals(expectedValue, testResult);\r\n    testResult = DateUtils.getFragmentInMinutes(aDate, Calendar.DAY_OF_YEAR);\r\n    assertEquals(expectedValue, testResult);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\time\\DateUtilsFragmentTest.java",
  "methodName" : "testMinutesOfHourWithCalendar",
  "sourceCode" : "@Test\r\nvoid testMinutesOfHourWithCalendar() {\r\n    final long testResult = DateUtils.getFragmentInMinutes(aCalendar, Calendar.HOUR_OF_DAY);\r\n    assertEquals(minutes, testResult);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\time\\DateUtilsFragmentTest.java",
  "methodName" : "testMinutesOfHourWithDate",
  "sourceCode" : "@Test\r\nvoid testMinutesOfHourWithDate() {\r\n    final long testResult = DateUtils.getFragmentInMinutes(aDate, Calendar.HOUR_OF_DAY);\r\n    assertEquals(minutes, testResult);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\time\\DateUtilsFragmentTest.java",
  "methodName" : "testMinutesOfMonthWithCalendar",
  "sourceCode" : "@Test\r\nvoid testMinutesOfMonthWithCalendar() {\r\n    final long testResult = DateUtils.getFragmentInMinutes(aCalendar, Calendar.MONTH);\r\n    assertEquals(minutes + (hours * DateUtils.MILLIS_PER_HOUR + (days - 1) * DateUtils.MILLIS_PER_DAY) / DateUtils.MILLIS_PER_MINUTE, testResult);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\time\\DateUtilsFragmentTest.java",
  "methodName" : "testMinutesOfMonthWithDate",
  "sourceCode" : "@Test\r\nvoid testMinutesOfMonthWithDate() {\r\n    final long testResult = DateUtils.getFragmentInMinutes(aDate, Calendar.MONTH);\r\n    assertEquals(minutes + (hours * DateUtils.MILLIS_PER_HOUR + (days - 1) * DateUtils.MILLIS_PER_DAY) / DateUtils.MILLIS_PER_MINUTE, testResult);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\time\\DateUtilsFragmentTest.java",
  "methodName" : "testMinutesOfYearWithCalendar",
  "sourceCode" : "@Test\r\nvoid testMinutesOfYearWithCalendar() {\r\n    final long testResult = DateUtils.getFragmentInMinutes(aCalendar, Calendar.YEAR);\r\n    assertEquals(minutes + (hours * DateUtils.MILLIS_PER_HOUR + (aCalendar.get(Calendar.DAY_OF_YEAR) - 1) * DateUtils.MILLIS_PER_DAY) / DateUtils.MILLIS_PER_MINUTE, testResult);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\time\\DateUtilsFragmentTest.java",
  "methodName" : "testMinutesOfYearWithDate",
  "sourceCode" : "@Test\r\nvoid testMinutesOfYearWithDate() {\r\n    final long testResult = DateUtils.getFragmentInMinutes(aDate, Calendar.YEAR);\r\n    final Calendar cal = Calendar.getInstance();\r\n    cal.setTime(aDate);\r\n    assertEquals(minutes + (hours * DateUtils.MILLIS_PER_HOUR + (cal.get(Calendar.DAY_OF_YEAR) - 1) * DateUtils.MILLIS_PER_DAY) / DateUtils.MILLIS_PER_MINUTE, testResult);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\time\\DateUtilsFragmentTest.java",
  "methodName" : "testMinutesOfYearWithWrongOffsetBugWithCalendar",
  "sourceCode" : "@Test\r\nvoid testMinutesOfYearWithWrongOffsetBugWithCalendar() {\r\n    final Calendar c = Calendar.getInstance();\r\n    c.set(Calendar.MONTH, Calendar.JANUARY);\r\n    c.set(Calendar.DAY_OF_YEAR, 1);\r\n    c.set(Calendar.HOUR_OF_DAY, 0);\r\n    c.set(Calendar.MINUTE, 0);\r\n    c.set(Calendar.SECOND, 0);\r\n    c.set(Calendar.MILLISECOND, 0);\r\n    final long testResult = DateUtils.getFragmentInMinutes(c, Calendar.YEAR);\r\n    assertEquals(0, testResult);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\time\\DateUtilsFragmentTest.java",
  "methodName" : "testNullCalendar",
  "sourceCode" : "@Test\r\nvoid testNullCalendar() {\r\n    assertNullPointerException(() -> DateUtils.getFragmentInMilliseconds((Calendar) null, Calendar.MILLISECOND));\r\n    assertNullPointerException(() -> DateUtils.getFragmentInSeconds((Calendar) null, Calendar.MILLISECOND));\r\n    assertNullPointerException(() -> DateUtils.getFragmentInMinutes((Calendar) null, Calendar.MILLISECOND));\r\n    assertNullPointerException(() -> DateUtils.getFragmentInHours((Calendar) null, Calendar.MILLISECOND));\r\n    assertNullPointerException(() -> DateUtils.getFragmentInDays((Calendar) null, Calendar.MILLISECOND));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\time\\DateUtilsFragmentTest.java",
  "methodName" : "testNullDate",
  "sourceCode" : "@Test\r\nvoid testNullDate() {\r\n    assertNullPointerException(() -> DateUtils.getFragmentInMilliseconds((Date) null, Calendar.MILLISECOND));\r\n    assertNullPointerException(() -> DateUtils.getFragmentInSeconds((Date) null, Calendar.MILLISECOND));\r\n    assertNullPointerException(() -> DateUtils.getFragmentInMinutes((Date) null, Calendar.MILLISECOND));\r\n    assertNullPointerException(() -> DateUtils.getFragmentInHours((Date) null, Calendar.MILLISECOND));\r\n    assertNullPointerException(() -> DateUtils.getFragmentInDays((Date) null, Calendar.MILLISECOND));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\time\\DateUtilsFragmentTest.java",
  "methodName" : "testSecondFragmentInLargerUnitWithCalendar",
  "sourceCode" : "@Test\r\nvoid testSecondFragmentInLargerUnitWithCalendar() {\r\n    assertEquals(0, DateUtils.getFragmentInSeconds(aCalendar, Calendar.SECOND));\r\n    assertEquals(0, DateUtils.getFragmentInMinutes(aCalendar, Calendar.SECOND));\r\n    assertEquals(0, DateUtils.getFragmentInHours(aCalendar, Calendar.SECOND));\r\n    assertEquals(0, DateUtils.getFragmentInDays(aCalendar, Calendar.SECOND));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\time\\DateUtilsFragmentTest.java",
  "methodName" : "testSecondFragmentInLargerUnitWithDate",
  "sourceCode" : "@Test\r\nvoid testSecondFragmentInLargerUnitWithDate() {\r\n    assertEquals(0, DateUtils.getFragmentInSeconds(aDate, Calendar.SECOND));\r\n    assertEquals(0, DateUtils.getFragmentInMinutes(aDate, Calendar.SECOND));\r\n    assertEquals(0, DateUtils.getFragmentInHours(aDate, Calendar.SECOND));\r\n    assertEquals(0, DateUtils.getFragmentInDays(aDate, Calendar.SECOND));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\time\\DateUtilsFragmentTest.java",
  "methodName" : "testSecondsOfDayWithCalendar",
  "sourceCode" : "@Test\r\nvoid testSecondsOfDayWithCalendar() {\r\n    long testresult = DateUtils.getFragmentInSeconds(aCalendar, Calendar.DATE);\r\n    final long expectedValue = seconds + (minutes * DateUtils.MILLIS_PER_MINUTE + hours * DateUtils.MILLIS_PER_HOUR) / DateUtils.MILLIS_PER_SECOND;\r\n    assertEquals(expectedValue, testresult);\r\n    testresult = DateUtils.getFragmentInSeconds(aCalendar, Calendar.DAY_OF_YEAR);\r\n    assertEquals(expectedValue, testresult);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\time\\DateUtilsFragmentTest.java",
  "methodName" : "testSecondsOfDayWithDate",
  "sourceCode" : "@Test\r\nvoid testSecondsOfDayWithDate() {\r\n    long testresult = DateUtils.getFragmentInSeconds(aDate, Calendar.DATE);\r\n    final long expectedValue = seconds + (minutes * DateUtils.MILLIS_PER_MINUTE + hours * DateUtils.MILLIS_PER_HOUR) / DateUtils.MILLIS_PER_SECOND;\r\n    assertEquals(expectedValue, testresult);\r\n    testresult = DateUtils.getFragmentInSeconds(aDate, Calendar.DAY_OF_YEAR);\r\n    assertEquals(expectedValue, testresult);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\time\\DateUtilsFragmentTest.java",
  "methodName" : "testSecondsofHourWithCalendar",
  "sourceCode" : "@Test\r\nvoid testSecondsofHourWithCalendar() {\r\n    final long testResult = DateUtils.getFragmentInSeconds(aCalendar, Calendar.HOUR_OF_DAY);\r\n    assertEquals(seconds + minutes * DateUtils.MILLIS_PER_MINUTE / DateUtils.MILLIS_PER_SECOND, testResult);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\time\\DateUtilsFragmentTest.java",
  "methodName" : "testSecondsofHourWithDate",
  "sourceCode" : "@Test\r\nvoid testSecondsofHourWithDate() {\r\n    final long testResult = DateUtils.getFragmentInSeconds(aDate, Calendar.HOUR_OF_DAY);\r\n    assertEquals(seconds + minutes * DateUtils.MILLIS_PER_MINUTE / DateUtils.MILLIS_PER_SECOND, testResult);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\time\\DateUtilsFragmentTest.java",
  "methodName" : "testSecondsofMinuteWithCalendar",
  "sourceCode" : "@Test\r\nvoid testSecondsofMinuteWithCalendar() {\r\n    final long testResult = DateUtils.getFragmentInSeconds(aCalendar, Calendar.MINUTE);\r\n    assertEquals(seconds, testResult);\r\n    assertEquals(aCalendar.get(Calendar.SECOND), testResult);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\time\\DateUtilsFragmentTest.java",
  "methodName" : "testSecondsofMinuteWithDate",
  "sourceCode" : "@Test\r\nvoid testSecondsofMinuteWithDate() {\r\n    final long testResult = DateUtils.getFragmentInSeconds(aDate, Calendar.MINUTE);\r\n    assertEquals(seconds, testResult);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\time\\DateUtilsFragmentTest.java",
  "methodName" : "testSecondsOfMonthWithCalendar",
  "sourceCode" : "@Test\r\nvoid testSecondsOfMonthWithCalendar() {\r\n    final long testResult = DateUtils.getFragmentInSeconds(aCalendar, Calendar.MONTH);\r\n    assertEquals(seconds + (minutes * DateUtils.MILLIS_PER_MINUTE + hours * DateUtils.MILLIS_PER_HOUR + (days - 1) * DateUtils.MILLIS_PER_DAY) / DateUtils.MILLIS_PER_SECOND, testResult);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\time\\DateUtilsFragmentTest.java",
  "methodName" : "testSecondsOfMonthWithDate",
  "sourceCode" : "@Test\r\nvoid testSecondsOfMonthWithDate() {\r\n    final long testResult = DateUtils.getFragmentInSeconds(aDate, Calendar.MONTH);\r\n    assertEquals(seconds + (minutes * DateUtils.MILLIS_PER_MINUTE + hours * DateUtils.MILLIS_PER_HOUR + (days - 1) * DateUtils.MILLIS_PER_DAY) / DateUtils.MILLIS_PER_SECOND, testResult);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\time\\DateUtilsFragmentTest.java",
  "methodName" : "testSecondsOfYearWithCalendar",
  "sourceCode" : "@Test\r\nvoid testSecondsOfYearWithCalendar() {\r\n    final long testResult = DateUtils.getFragmentInSeconds(aCalendar, Calendar.YEAR);\r\n    assertEquals(seconds + (minutes * DateUtils.MILLIS_PER_MINUTE + hours * DateUtils.MILLIS_PER_HOUR + (aCalendar.get(Calendar.DAY_OF_YEAR) - 1) * DateUtils.MILLIS_PER_DAY) / DateUtils.MILLIS_PER_SECOND, testResult);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\time\\DateUtilsFragmentTest.java",
  "methodName" : "testSecondsOfYearWithDate",
  "sourceCode" : "@Test\r\nvoid testSecondsOfYearWithDate() {\r\n    final long testResult = DateUtils.getFragmentInSeconds(aDate, Calendar.YEAR);\r\n    final Calendar cal = Calendar.getInstance();\r\n    cal.setTime(aDate);\r\n    assertEquals(seconds + (minutes * DateUtils.MILLIS_PER_MINUTE + hours * DateUtils.MILLIS_PER_HOUR + (cal.get(Calendar.DAY_OF_YEAR) - 1) * DateUtils.MILLIS_PER_DAY) / DateUtils.MILLIS_PER_SECOND, testResult);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\time\\DateUtilsRoundingTest.java",
  "methodName" : "testRoundAmPm",
  "sourceCode" : "/**\r\n * Tests DateUtils.round()-method with Calendar.AM_PM\r\n * Includes rounding the extremes of both AM and PM of one day\r\n * Includes rounding to January 1\r\n *\r\n * @throws Exception so we don't have to catch it\r\n */\r\n@Test\r\nvoid testRoundAmPm() throws Exception {\r\n    final int calendarField = Calendar.AM_PM;\r\n    // AM\r\n    Date roundedUpDate = dateTimeParser.parse(\"June 1, 2008 12:00:00.000\");\r\n    Date roundedDownDate = targetAmDate;\r\n    Date lastRoundedDownDate = dateTimeParser.parse(\"June 1, 2008 5:59:59.999\");\r\n    baseRoundTest(roundedUpDate, roundedDownDate, lastRoundedDownDate, calendarField);\r\n    // PM\r\n    roundedUpDate = dateTimeParser.parse(\"June 2, 2008 0:00:00.000\");\r\n    roundedDownDate = targetPmDate;\r\n    lastRoundedDownDate = dateTimeParser.parse(\"June 1, 2008 17:59:59.999\");\r\n    baseRoundTest(roundedUpDate, roundedDownDate, lastRoundedDownDate, calendarField);\r\n    // round to January 1\r\n    final Date minDate = dateTimeParser.parse(\"December 31, 2007 18:00:00.000\");\r\n    final Date maxDate = dateTimeParser.parse(\"January 1, 2008 5:59:59.999\");\r\n    roundToJanuaryFirst(minDate, maxDate, calendarField);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\time\\DateUtilsRoundingTest.java",
  "methodName" : "testRoundDate",
  "sourceCode" : "/**\r\n * Tests DateUtils.round()-method with Calendar.DATE\r\n * Includes rounding the extremes of one day\r\n * Includes rounding to January 1\r\n *\r\n * @throws Exception so we don't have to catch it\r\n */\r\n@Test\r\nvoid testRoundDate() throws Exception {\r\n    final int calendarField = Calendar.DATE;\r\n    final Date roundedUpDate;\r\n    final Date roundedDownDate;\r\n    final Date lastRoundedDownDate;\r\n    final Date minDate;\r\n    final Date maxDate;\r\n    roundedUpDate = dateTimeParser.parse(\"June 2, 2008 0:00:00.000\");\r\n    roundedDownDate = targetDateDate;\r\n    lastRoundedDownDate = dateTimeParser.parse(\"June 1, 2008 11:59:59.999\");\r\n    baseRoundTest(roundedUpDate, roundedDownDate, lastRoundedDownDate, calendarField);\r\n    // round to January 1\r\n    minDate = dateTimeParser.parse(\"December 31, 2007 12:00:00.000\");\r\n    maxDate = dateTimeParser.parse(\"January 1, 2008 11:59:59.999\");\r\n    roundToJanuaryFirst(minDate, maxDate, calendarField);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\time\\DateUtilsRoundingTest.java",
  "methodName" : "testRoundDayOfMonth",
  "sourceCode" : "/**\r\n * Tests DateUtils.round()-method with Calendar.DAY_OF_MONTH\r\n * Includes rounding the extremes of one day\r\n * Includes rounding to January 1\r\n *\r\n * @throws Exception so we don't have to catch it\r\n */\r\n@Test\r\nvoid testRoundDayOfMonth() throws Exception {\r\n    final int calendarField = Calendar.DAY_OF_MONTH;\r\n    final Date roundedUpDate;\r\n    final Date roundedDownDate;\r\n    final Date lastRoundedDownDate;\r\n    final Date minDate;\r\n    final Date maxDate;\r\n    roundedUpDate = dateTimeParser.parse(\"June 2, 2008 0:00:00.000\");\r\n    roundedDownDate = targetDayOfMonthDate;\r\n    lastRoundedDownDate = dateTimeParser.parse(\"June 1, 2008 11:59:59.999\");\r\n    baseRoundTest(roundedUpDate, roundedDownDate, lastRoundedDownDate, calendarField);\r\n    // round to January 1\r\n    minDate = dateTimeParser.parse(\"December 31, 2007 12:00:00.000\");\r\n    maxDate = dateTimeParser.parse(\"January 1, 2008 11:59:59.999\");\r\n    roundToJanuaryFirst(minDate, maxDate, calendarField);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\time\\DateUtilsRoundingTest.java",
  "methodName" : "testRoundHour",
  "sourceCode" : "/**\r\n * Tests DateUtils.round()-method with Calendar.HOUR\r\n * Includes rounding the extremes of one hour\r\n * Includes rounding to January 1\r\n *\r\n * @throws Exception so we don't have to catch it\r\n */\r\n@Test\r\nvoid testRoundHour() throws Exception {\r\n    final int calendarField = Calendar.HOUR;\r\n    final Date roundedUpDate;\r\n    final Date roundedDownDate;\r\n    final Date lastRoundedDownDate;\r\n    final Date minDate;\r\n    final Date maxDate;\r\n    roundedUpDate = dateTimeParser.parse(\"June 1, 2008 9:00:00.000\");\r\n    roundedDownDate = targetHourDate;\r\n    lastRoundedDownDate = dateTimeParser.parse(\"June 1, 2008 8:29:59.999\");\r\n    baseRoundTest(roundedUpDate, roundedDownDate, lastRoundedDownDate, calendarField);\r\n    // round to January 1\r\n    minDate = dateTimeParser.parse(\"December 31, 2007 23:30:00.000\");\r\n    maxDate = dateTimeParser.parse(\"January 1, 2008 0:29:59.999\");\r\n    roundToJanuaryFirst(minDate, maxDate, calendarField);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\time\\DateUtilsRoundingTest.java",
  "methodName" : "testRoundHourOfDay",
  "sourceCode" : "/**\r\n * Tests DateUtils.round()-method with Calendar.HOUR_OF_DAY\r\n * Includes rounding the extremes of one hour\r\n * Includes rounding to January 1\r\n *\r\n * @throws Exception so we don't have to catch it\r\n */\r\n@Test\r\nvoid testRoundHourOfDay() throws Exception {\r\n    final int calendarField = Calendar.HOUR_OF_DAY;\r\n    final Date roundedUpDate;\r\n    final Date roundedDownDate;\r\n    final Date lastRoundedDownDate;\r\n    final Date minDate;\r\n    final Date maxDate;\r\n    roundedUpDate = dateTimeParser.parse(\"June 1, 2008 9:00:00.000\");\r\n    roundedDownDate = targetHourOfDayDate;\r\n    lastRoundedDownDate = dateTimeParser.parse(\"June 1, 2008 8:29:59.999\");\r\n    baseRoundTest(roundedUpDate, roundedDownDate, lastRoundedDownDate, calendarField);\r\n    // round to January 1\r\n    minDate = dateTimeParser.parse(\"December 31, 2007 23:30:00.000\");\r\n    maxDate = dateTimeParser.parse(\"January 1, 2008 0:29:59.999\");\r\n    roundToJanuaryFirst(minDate, maxDate, calendarField);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\time\\DateUtilsRoundingTest.java",
  "methodName" : "testRoundMilliSecond",
  "sourceCode" : "/**\r\n * Tests DateUtils.round()-method with Calendar.MILLISECOND\r\n * Includes rounding the extremes of one second\r\n * Includes rounding to January 1\r\n *\r\n * @throws Exception so we don't have to catch it\r\n */\r\n@Test\r\nvoid testRoundMilliSecond() throws Exception {\r\n    final int calendarField = Calendar.MILLISECOND;\r\n    final Date roundedUpDate;\r\n    final Date roundedDownDate;\r\n    final Date lastRoundedDownDate;\r\n    final Date minDate;\r\n    final Date maxDate;\r\n    roundedDownDate = lastRoundedDownDate = targetMilliSecondDate;\r\n    roundedUpDate = dateTimeParser.parse(\"June 1, 2008 8:15:14.232\");\r\n    baseRoundTest(roundedUpDate, roundedDownDate, lastRoundedDownDate, calendarField);\r\n    // round to January 1\r\n    minDate = maxDate = januaryOneDate;\r\n    roundToJanuaryFirst(minDate, maxDate, calendarField);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\time\\DateUtilsRoundingTest.java",
  "methodName" : "testRoundMinute",
  "sourceCode" : "/**\r\n * Tests DateUtils.round()-method with Calendar.MINUTE\r\n * Includes rounding the extremes of one minute\r\n * Includes rounding to January 1\r\n *\r\n * @throws Exception so we don't have to catch it\r\n */\r\n@Test\r\nvoid testRoundMinute() throws Exception {\r\n    final int calendarField = Calendar.MINUTE;\r\n    final Date roundedUpDate;\r\n    final Date roundedDownDate;\r\n    final Date lastRoundedDownDate;\r\n    final Date minDate;\r\n    final Date maxDate;\r\n    roundedUpDate = dateTimeParser.parse(\"June 1, 2008 8:16:00.000\");\r\n    roundedDownDate = targetMinuteDate;\r\n    lastRoundedDownDate = dateTimeParser.parse(\"June 1, 2008 8:15:29.999\");\r\n    baseRoundTest(roundedUpDate, roundedDownDate, lastRoundedDownDate, calendarField);\r\n    // round to January 1\r\n    minDate = dateTimeParser.parse(\"December 31, 2007 23:59:30.000\");\r\n    maxDate = dateTimeParser.parse(\"January 1, 2008 0:00:29.999\");\r\n    roundToJanuaryFirst(minDate, maxDate, calendarField);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\time\\DateUtilsRoundingTest.java",
  "methodName" : "testRoundMonth",
  "sourceCode" : "/**\r\n * Tests DateUtils.round()-method with Calendar.MONTH\r\n * Includes rounding months with 28, 29, 30 and 31 days\r\n * Includes rounding to January 1\r\n *\r\n * @throws Exception so we don't have to catch it\r\n */\r\n@Test\r\nvoid testRoundMonth() throws Exception {\r\n    final int calendarField = Calendar.MONTH;\r\n    // month with 28 days\r\n    Date roundedUpDate = dateTimeParser.parse(\"March 1, 2007 0:00:00.000\");\r\n    Date roundedDownDate = dateTimeParser.parse(\"February 1, 2007 0:00:00.000\");\r\n    Date lastRoundedDownDate = dateTimeParser.parse(\"February 14, 2007 23:59:59.999\");\r\n    baseRoundTest(roundedUpDate, roundedDownDate, lastRoundedDownDate, calendarField);\r\n    // month with 29 days\r\n    roundedUpDate = dateTimeParser.parse(\"March 1, 2008 0:00:00.000\");\r\n    roundedDownDate = dateTimeParser.parse(\"February 1, 2008 0:00:00.000\");\r\n    lastRoundedDownDate = dateTimeParser.parse(\"February 15, 2008 23:59:59.999\");\r\n    baseRoundTest(roundedUpDate, roundedDownDate, lastRoundedDownDate, calendarField);\r\n    // month with 30 days\r\n    roundedUpDate = dateTimeParser.parse(\"May 1, 2008 0:00:00.000\");\r\n    roundedDownDate = dateTimeParser.parse(\"April 1, 2008 0:00:00.000\");\r\n    lastRoundedDownDate = dateTimeParser.parse(\"April 15, 2008 23:59:59.999\");\r\n    baseRoundTest(roundedUpDate, roundedDownDate, lastRoundedDownDate, calendarField);\r\n    // month with 31 days\r\n    roundedUpDate = dateTimeParser.parse(\"June 1, 2008 0:00:00.000\");\r\n    roundedDownDate = dateTimeParser.parse(\"May 1, 2008 0:00:00.000\");\r\n    lastRoundedDownDate = dateTimeParser.parse(\"May 16, 2008 23:59:59.999\");\r\n    baseRoundTest(roundedUpDate, roundedDownDate, lastRoundedDownDate, calendarField);\r\n    // round to January 1\r\n    final Date minDate = dateTimeParser.parse(\"December 17, 2007 00:00:00.000\");\r\n    final Date maxDate = dateTimeParser.parse(\"January 16, 2008 23:59:59.999\");\r\n    roundToJanuaryFirst(minDate, maxDate, calendarField);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\time\\DateUtilsRoundingTest.java",
  "methodName" : "testRoundSecond",
  "sourceCode" : "/**\r\n * Tests DateUtils.round()-method with Calendar.SECOND\r\n * Includes rounding the extremes of one second\r\n * Includes rounding to January 1\r\n *\r\n * @throws Exception so we don't have to catch it\r\n */\r\n@Test\r\nvoid testRoundSecond() throws Exception {\r\n    final int calendarField = Calendar.SECOND;\r\n    final Date roundedUpDate;\r\n    final Date roundedDownDate;\r\n    final Date lastRoundedDownDate;\r\n    final Date minDate;\r\n    final Date maxDate;\r\n    roundedUpDate = dateTimeParser.parse(\"June 1, 2008 8:15:15.000\");\r\n    roundedDownDate = targetSecondDate;\r\n    lastRoundedDownDate = dateTimeParser.parse(\"June 1, 2008 8:15:14.499\");\r\n    baseRoundTest(roundedUpDate, roundedDownDate, lastRoundedDownDate, calendarField);\r\n    // round to January 1\r\n    minDate = dateTimeParser.parse(\"December 31, 2007 23:59:59.500\");\r\n    maxDate = dateTimeParser.parse(\"January 1, 2008 0:00:00.499\");\r\n    roundToJanuaryFirst(minDate, maxDate, calendarField);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\time\\DateUtilsRoundingTest.java",
  "methodName" : "testRoundSemiMonth",
  "sourceCode" : "/**\r\n * Tests DateUtils.round()-method with DateUtils.SEMI_MONTH\r\n * Includes rounding months with 28, 29, 30 and 31 days, each with first and second half\r\n * Includes rounding to January 1\r\n *\r\n * @throws Exception so we don't have to catch it\r\n */\r\n@Test\r\nvoid testRoundSemiMonth() throws Exception {\r\n    final int calendarField = DateUtils.SEMI_MONTH;\r\n    // month with 28 days (1)\r\n    Date roundedUpDate = dateTimeParser.parse(\"February 16, 2007 0:00:00.000\");\r\n    Date roundedDownDate = dateTimeParser.parse(\"February 1, 2007 0:00:00.000\");\r\n    Date lastRoundedDownDate = dateTimeParser.parse(\"February 8, 2007 23:59:59.999\");\r\n    baseRoundTest(roundedUpDate, roundedDownDate, lastRoundedDownDate, calendarField);\r\n    // month with 28 days (2)\r\n    roundedUpDate = dateTimeParser.parse(\"March 1, 2007 0:00:00.000\");\r\n    roundedDownDate = dateTimeParser.parse(\"February 16, 2007 0:00:00.000\");\r\n    lastRoundedDownDate = dateTimeParser.parse(\"February 23, 2007 23:59:59.999\");\r\n    baseRoundTest(roundedUpDate, roundedDownDate, lastRoundedDownDate, calendarField);\r\n    // month with 29 days (1)\r\n    roundedUpDate = dateTimeParser.parse(\"February 16, 2008 0:00:00.000\");\r\n    roundedDownDate = dateTimeParser.parse(\"February 1, 2008 0:00:00.000\");\r\n    lastRoundedDownDate = dateTimeParser.parse(\"February 8, 2008 23:59:59.999\");\r\n    baseRoundTest(roundedUpDate, roundedDownDate, lastRoundedDownDate, calendarField);\r\n    // month with 29 days (2)\r\n    roundedUpDate = dateTimeParser.parse(\"March 1, 2008 0:00:00.000\");\r\n    roundedDownDate = dateTimeParser.parse(\"February 16, 2008 0:00:00.000\");\r\n    lastRoundedDownDate = dateTimeParser.parse(\"February 23, 2008 23:59:59.999\");\r\n    baseRoundTest(roundedUpDate, roundedDownDate, lastRoundedDownDate, calendarField);\r\n    // month with 30 days (1)\r\n    roundedUpDate = dateTimeParser.parse(\"April 16, 2008 0:00:00.000\");\r\n    roundedDownDate = dateTimeParser.parse(\"April 1, 2008 0:00:00.000\");\r\n    lastRoundedDownDate = dateTimeParser.parse(\"April 8, 2008 23:59:59.999\");\r\n    baseRoundTest(roundedUpDate, roundedDownDate, lastRoundedDownDate, calendarField);\r\n    // month with 30 days (2)\r\n    roundedUpDate = dateTimeParser.parse(\"May 1, 2008 0:00:00.000\");\r\n    roundedDownDate = dateTimeParser.parse(\"April 16, 2008 0:00:00.000\");\r\n    lastRoundedDownDate = dateTimeParser.parse(\"April 23, 2008 23:59:59.999\");\r\n    baseRoundTest(roundedUpDate, roundedDownDate, lastRoundedDownDate, calendarField);\r\n    // month with 31 days (1)\r\n    roundedUpDate = dateTimeParser.parse(\"May 16, 2008 0:00:00.000\");\r\n    roundedDownDate = dateTimeParser.parse(\"May 1, 2008 0:00:00.000\");\r\n    lastRoundedDownDate = dateTimeParser.parse(\"May 8, 2008 23:59:59.999\");\r\n    baseRoundTest(roundedUpDate, roundedDownDate, lastRoundedDownDate, calendarField);\r\n    // month with 31 days (2)\r\n    roundedUpDate = dateTimeParser.parse(\"June 1, 2008 0:00:00.000\");\r\n    roundedDownDate = dateTimeParser.parse(\"May 16, 2008 0:00:00.000\");\r\n    lastRoundedDownDate = dateTimeParser.parse(\"May 23, 2008 23:59:59.999\");\r\n    baseRoundTest(roundedUpDate, roundedDownDate, lastRoundedDownDate, calendarField);\r\n    // round to January 1\r\n    final Date minDate = dateTimeParser.parse(\"December 24, 2007 00:00:00.000\");\r\n    final Date maxDate = dateTimeParser.parse(\"January 8, 2008 23:59:59.999\");\r\n    roundToJanuaryFirst(minDate, maxDate, calendarField);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\time\\DateUtilsRoundingTest.java",
  "methodName" : "testRoundYear",
  "sourceCode" : "/**\r\n * Tests DateUtils.round()-method with Calendar.Year\r\n *\r\n * @throws Exception so we don't have to catch it\r\n */\r\n@Test\r\nvoid testRoundYear() throws Exception {\r\n    final int calendarField = Calendar.YEAR;\r\n    final Date roundedUpDate = dateTimeParser.parse(\"January 1, 2008 0:00:00.000\");\r\n    final Date roundedDownDate = targetYearDate;\r\n    final Date lastRoundedDownDate = dateTimeParser.parse(\"June 30, 2007 23:59:59.999\");\r\n    baseRoundTest(roundedUpDate, roundedDownDate, lastRoundedDownDate, calendarField);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\time\\DateUtilsRoundingTest.java",
  "methodName" : "testTruncateAmPm",
  "sourceCode" : "/**\r\n * Test DateUtils.truncate()-method with Calendar.AM_PM\r\n * Includes truncating the extremes of both AM and PM of one day\r\n *\r\n * @throws Exception so we don't have to catch it\r\n */\r\n@Test\r\nvoid testTruncateAmPm() throws Exception {\r\n    final int calendarField = Calendar.AM_PM;\r\n    // AM\r\n    Date lastTruncateDate = dateTimeParser.parse(\"June 1, 2008 11:59:59.999\");\r\n    baseTruncateTest(targetAmDate, lastTruncateDate, calendarField);\r\n    // PM\r\n    lastTruncateDate = dateTimeParser.parse(\"June 1, 2008 23:59:59.999\");\r\n    baseTruncateTest(targetPmDate, lastTruncateDate, calendarField);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\time\\DateUtilsRoundingTest.java",
  "methodName" : "testTruncateDate",
  "sourceCode" : "/**\r\n * Test DateUtils.truncate()-method with Calendar.DATE\r\n *\r\n * @throws Exception so we don't have to catch it\r\n */\r\n@Test\r\nvoid testTruncateDate() throws Exception {\r\n    final int calendarField = Calendar.DATE;\r\n    final Date lastTruncateDate = dateTimeParser.parse(\"June 1, 2008 23:59:59.999\");\r\n    baseTruncateTest(targetDateDate, lastTruncateDate, calendarField);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\time\\DateUtilsRoundingTest.java",
  "methodName" : "testTruncateDayOfMonth",
  "sourceCode" : "/**\r\n * Test DateUtils.truncate()-method with Calendar.DAY_OF_MONTH\r\n *\r\n * @throws Exception so we don't have to catch it\r\n */\r\n@Test\r\nvoid testTruncateDayOfMonth() throws Exception {\r\n    final int calendarField = Calendar.DAY_OF_MONTH;\r\n    final Date lastTruncateDate = dateTimeParser.parse(\"June 1, 2008 23:59:59.999\");\r\n    baseTruncateTest(targetDayOfMonthDate, lastTruncateDate, calendarField);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\time\\DateUtilsRoundingTest.java",
  "methodName" : "testTruncateHour",
  "sourceCode" : "/**\r\n * Test DateUtils.truncate()-method with Calendar.HOUR\r\n *\r\n * @throws Exception so we don't have to catch it\r\n */\r\n@Test\r\nvoid testTruncateHour() throws Exception {\r\n    final int calendarField = Calendar.HOUR;\r\n    final Date lastTruncateDate = dateTimeParser.parse(\"June 1, 2008 8:59:59.999\");\r\n    baseTruncateTest(targetHourDate, lastTruncateDate, calendarField);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\time\\DateUtilsRoundingTest.java",
  "methodName" : "testTruncateHourOfDay",
  "sourceCode" : "/**\r\n * Test DateUtils.truncate()-method with Calendar.HOUR_OF_DAY\r\n *\r\n * @throws Exception so we don't have to catch it\r\n */\r\n@Test\r\nvoid testTruncateHourOfDay() throws Exception {\r\n    final int calendarField = Calendar.HOUR_OF_DAY;\r\n    final Date lastTruncateDate = dateTimeParser.parse(\"June 1, 2008 8:59:59.999\");\r\n    baseTruncateTest(targetHourOfDayDate, lastTruncateDate, calendarField);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\time\\DateUtilsRoundingTest.java",
  "methodName" : "testTruncateMilliSecond",
  "sourceCode" : "/**\r\n * Test DateUtils.truncate()-method with Calendar.SECOND\r\n */\r\n@Test\r\nvoid testTruncateMilliSecond() {\r\n    final int calendarField = Calendar.MILLISECOND;\r\n    baseTruncateTest(targetMilliSecondDate, targetMilliSecondDate, calendarField);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\time\\DateUtilsRoundingTest.java",
  "methodName" : "testTruncateMinute",
  "sourceCode" : "/**\r\n * Test DateUtils.truncate()-method with Calendar.MINUTE\r\n *\r\n * @throws Exception so we don't have to catch it\r\n */\r\n@Test\r\nvoid testTruncateMinute() throws Exception {\r\n    final int calendarField = Calendar.MINUTE;\r\n    final Date lastTruncateDate = dateTimeParser.parse(\"June 1, 2008 8:15:59.999\");\r\n    baseTruncateTest(targetMinuteDate, lastTruncateDate, calendarField);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\time\\DateUtilsRoundingTest.java",
  "methodName" : "testTruncateMonth",
  "sourceCode" : "/**\r\n * Test DateUtils.truncate()-method with Calendar.MONTH\r\n *\r\n * @throws Exception so we don't have to catch it\r\n */\r\n@Test\r\nvoid testTruncateMonth() throws Exception {\r\n    final int calendarField = Calendar.MONTH;\r\n    final Date truncatedDate = dateTimeParser.parse(\"March 1, 2008 0:00:00.000\");\r\n    final Date lastTruncateDate = dateTimeParser.parse(\"March 31, 2008 23:59:59.999\");\r\n    baseTruncateTest(truncatedDate, lastTruncateDate, calendarField);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\time\\DateUtilsRoundingTest.java",
  "methodName" : "testTruncateSecond",
  "sourceCode" : "/**\r\n * Test DateUtils.truncate()-method with Calendar.SECOND\r\n *\r\n * @throws Exception so we don't have to catch it\r\n */\r\n@Test\r\nvoid testTruncateSecond() throws Exception {\r\n    final int calendarField = Calendar.SECOND;\r\n    final Date lastTruncateDate = dateTimeParser.parse(\"June 1, 2008 8:15:14.999\");\r\n    baseTruncateTest(targetSecondDate, lastTruncateDate, calendarField);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\time\\DateUtilsRoundingTest.java",
  "methodName" : "testTruncateSemiMonth",
  "sourceCode" : "/**\r\n * Test DateUtils.truncate()-method with DateUtils.SEMI_MONTH\r\n * Includes truncating months with 28, 29, 30 and 31 days, each with first and second half\r\n *\r\n * @throws Exception so we don't have to catch it\r\n */\r\n@Test\r\nvoid testTruncateSemiMonth() throws Exception {\r\n    final int calendarField = DateUtils.SEMI_MONTH;\r\n    // month with 28 days (1)\r\n    Date truncatedDate = dateTimeParser.parse(\"February 1, 2007 0:00:00.000\");\r\n    Date lastTruncateDate = dateTimeParser.parse(\"February 15, 2007 23:59:59.999\");\r\n    baseTruncateTest(truncatedDate, lastTruncateDate, calendarField);\r\n    // month with 28 days (2)\r\n    truncatedDate = dateTimeParser.parse(\"February 16, 2007 0:00:00.000\");\r\n    lastTruncateDate = dateTimeParser.parse(\"February 28, 2007 23:59:59.999\");\r\n    baseTruncateTest(truncatedDate, lastTruncateDate, calendarField);\r\n    // month with 29 days (1)\r\n    truncatedDate = dateTimeParser.parse(\"February 1, 2008 0:00:00.000\");\r\n    lastTruncateDate = dateTimeParser.parse(\"February 15, 2008 23:59:59.999\");\r\n    baseTruncateTest(truncatedDate, lastTruncateDate, calendarField);\r\n    // month with 29 days (2)\r\n    truncatedDate = dateTimeParser.parse(\"February 16, 2008 0:00:00.000\");\r\n    lastTruncateDate = dateTimeParser.parse(\"February 29, 2008 23:59:59.999\");\r\n    baseTruncateTest(truncatedDate, lastTruncateDate, calendarField);\r\n    // month with 30 days (1)\r\n    truncatedDate = dateTimeParser.parse(\"April 1, 2008 0:00:00.000\");\r\n    lastTruncateDate = dateTimeParser.parse(\"April 15, 2008 23:59:59.999\");\r\n    baseTruncateTest(truncatedDate, lastTruncateDate, calendarField);\r\n    // month with 30 days (2)\r\n    truncatedDate = dateTimeParser.parse(\"April 16, 2008 0:00:00.000\");\r\n    lastTruncateDate = dateTimeParser.parse(\"April 30, 2008 23:59:59.999\");\r\n    baseTruncateTest(truncatedDate, lastTruncateDate, calendarField);\r\n    // month with 31 days (1)\r\n    truncatedDate = dateTimeParser.parse(\"March 1, 2008 0:00:00.000\");\r\n    lastTruncateDate = dateTimeParser.parse(\"March 15, 2008 23:59:59.999\");\r\n    baseTruncateTest(truncatedDate, lastTruncateDate, calendarField);\r\n    // month with 31 days (2)\r\n    truncatedDate = dateTimeParser.parse(\"March 16, 2008 0:00:00.000\");\r\n    lastTruncateDate = dateTimeParser.parse(\"March 31, 2008 23:59:59.999\");\r\n    baseTruncateTest(truncatedDate, lastTruncateDate, calendarField);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\time\\DateUtilsRoundingTest.java",
  "methodName" : "testTruncateYear",
  "sourceCode" : "/**\r\n * Test DateUtils.truncate()-method with Calendar.YEAR\r\n *\r\n * @throws Exception so we don't have to catch it\r\n */\r\n@Test\r\nvoid testTruncateYear() throws Exception {\r\n    final int calendarField = Calendar.YEAR;\r\n    final Date lastTruncateDate = dateTimeParser.parse(\"December 31, 2007 23:59:59.999\");\r\n    baseTruncateTest(targetYearDate, lastTruncateDate, calendarField);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\time\\DateUtilsTest.java",
  "methodName" : "testAddDays",
  "sourceCode" : "@Test\r\nvoid testAddDays() throws Exception {\r\n    Date result = DateUtils.addDays(BASE_DATE, 0);\r\n    assertNotSame(BASE_DATE, result);\r\n    assertDate(BASE_DATE, 2000, 6, 5, 4, 3, 2, 1);\r\n    assertDate(result, 2000, 6, 5, 4, 3, 2, 1);\r\n    result = DateUtils.addDays(BASE_DATE, 1);\r\n    assertNotSame(BASE_DATE, result);\r\n    assertDate(BASE_DATE, 2000, 6, 5, 4, 3, 2, 1);\r\n    assertDate(result, 2000, 6, 6, 4, 3, 2, 1);\r\n    result = DateUtils.addDays(BASE_DATE, -1);\r\n    assertNotSame(BASE_DATE, result);\r\n    assertDate(BASE_DATE, 2000, 6, 5, 4, 3, 2, 1);\r\n    assertDate(result, 2000, 6, 4, 4, 3, 2, 1);\r\n    assertNullPointerException(() -> DateUtils.addDays(null, 0));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\time\\DateUtilsTest.java",
  "methodName" : "testAddHours",
  "sourceCode" : "@Test\r\nvoid testAddHours() throws Exception {\r\n    Date result = DateUtils.addHours(BASE_DATE, 0);\r\n    assertNotSame(BASE_DATE, result);\r\n    assertDate(BASE_DATE, 2000, 6, 5, 4, 3, 2, 1);\r\n    assertDate(result, 2000, 6, 5, 4, 3, 2, 1);\r\n    result = DateUtils.addHours(BASE_DATE, 1);\r\n    assertNotSame(BASE_DATE, result);\r\n    assertDate(BASE_DATE, 2000, 6, 5, 4, 3, 2, 1);\r\n    assertDate(result, 2000, 6, 5, 5, 3, 2, 1);\r\n    result = DateUtils.addHours(BASE_DATE, -1);\r\n    assertNotSame(BASE_DATE, result);\r\n    assertDate(BASE_DATE, 2000, 6, 5, 4, 3, 2, 1);\r\n    assertDate(result, 2000, 6, 5, 3, 3, 2, 1);\r\n    assertNullPointerException(() -> DateUtils.addHours(null, 0));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\time\\DateUtilsTest.java",
  "methodName" : "testAddMilliseconds",
  "sourceCode" : "@Test\r\nvoid testAddMilliseconds() throws Exception {\r\n    Date result = DateUtils.addMilliseconds(BASE_DATE, 0);\r\n    assertNotSame(BASE_DATE, result);\r\n    assertDate(BASE_DATE, 2000, 6, 5, 4, 3, 2, 1);\r\n    assertDate(result, 2000, 6, 5, 4, 3, 2, 1);\r\n    result = DateUtils.addMilliseconds(BASE_DATE, 1);\r\n    assertNotSame(BASE_DATE, result);\r\n    assertDate(BASE_DATE, 2000, 6, 5, 4, 3, 2, 1);\r\n    assertDate(result, 2000, 6, 5, 4, 3, 2, 2);\r\n    result = DateUtils.addMilliseconds(BASE_DATE, -1);\r\n    assertNotSame(BASE_DATE, result);\r\n    assertDate(BASE_DATE, 2000, 6, 5, 4, 3, 2, 1);\r\n    assertDate(result, 2000, 6, 5, 4, 3, 2, 0);\r\n    assertNullPointerException(() -> DateUtils.addMilliseconds(null, 0));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\time\\DateUtilsTest.java",
  "methodName" : "testAddMinutes",
  "sourceCode" : "@Test\r\nvoid testAddMinutes() throws Exception {\r\n    Date result = DateUtils.addMinutes(BASE_DATE, 0);\r\n    assertNotSame(BASE_DATE, result);\r\n    assertDate(BASE_DATE, 2000, 6, 5, 4, 3, 2, 1);\r\n    assertDate(result, 2000, 6, 5, 4, 3, 2, 1);\r\n    result = DateUtils.addMinutes(BASE_DATE, 1);\r\n    assertNotSame(BASE_DATE, result);\r\n    assertDate(BASE_DATE, 2000, 6, 5, 4, 3, 2, 1);\r\n    assertDate(result, 2000, 6, 5, 4, 4, 2, 1);\r\n    result = DateUtils.addMinutes(BASE_DATE, -1);\r\n    assertNotSame(BASE_DATE, result);\r\n    assertDate(BASE_DATE, 2000, 6, 5, 4, 3, 2, 1);\r\n    assertDate(result, 2000, 6, 5, 4, 2, 2, 1);\r\n    assertNullPointerException(() -> DateUtils.addMinutes(null, 0));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\time\\DateUtilsTest.java",
  "methodName" : "testAddMonths",
  "sourceCode" : "@Test\r\nvoid testAddMonths() throws Exception {\r\n    Date result = DateUtils.addMonths(BASE_DATE, 0);\r\n    assertNotSame(BASE_DATE, result);\r\n    assertDate(BASE_DATE, 2000, 6, 5, 4, 3, 2, 1);\r\n    assertDate(result, 2000, 6, 5, 4, 3, 2, 1);\r\n    result = DateUtils.addMonths(BASE_DATE, 1);\r\n    assertNotSame(BASE_DATE, result);\r\n    assertDate(BASE_DATE, 2000, 6, 5, 4, 3, 2, 1);\r\n    assertDate(result, 2000, 7, 5, 4, 3, 2, 1);\r\n    result = DateUtils.addMonths(BASE_DATE, -1);\r\n    assertNotSame(BASE_DATE, result);\r\n    assertDate(BASE_DATE, 2000, 6, 5, 4, 3, 2, 1);\r\n    assertDate(result, 2000, 5, 5, 4, 3, 2, 1);\r\n    assertNullPointerException(() -> DateUtils.addMonths(null, 0));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\time\\DateUtilsTest.java",
  "methodName" : "testAddSeconds",
  "sourceCode" : "@Test\r\nvoid testAddSeconds() throws Exception {\r\n    Date result = DateUtils.addSeconds(BASE_DATE, 0);\r\n    assertNotSame(BASE_DATE, result);\r\n    assertDate(BASE_DATE, 2000, 6, 5, 4, 3, 2, 1);\r\n    assertDate(result, 2000, 6, 5, 4, 3, 2, 1);\r\n    result = DateUtils.addSeconds(BASE_DATE, 1);\r\n    assertNotSame(BASE_DATE, result);\r\n    assertDate(BASE_DATE, 2000, 6, 5, 4, 3, 2, 1);\r\n    assertDate(result, 2000, 6, 5, 4, 3, 3, 1);\r\n    result = DateUtils.addSeconds(BASE_DATE, -1);\r\n    assertNotSame(BASE_DATE, result);\r\n    assertDate(BASE_DATE, 2000, 6, 5, 4, 3, 2, 1);\r\n    assertDate(result, 2000, 6, 5, 4, 3, 1, 1);\r\n    assertNullPointerException(() -> DateUtils.addSeconds(null, 0));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\time\\DateUtilsTest.java",
  "methodName" : "testAddWeeks",
  "sourceCode" : "@Test\r\nvoid testAddWeeks() throws Exception {\r\n    Date result = DateUtils.addWeeks(BASE_DATE, 0);\r\n    assertNotSame(BASE_DATE, result);\r\n    assertDate(BASE_DATE, 2000, 6, 5, 4, 3, 2, 1);\r\n    assertDate(result, 2000, 6, 5, 4, 3, 2, 1);\r\n    result = DateUtils.addWeeks(BASE_DATE, 1);\r\n    assertNotSame(BASE_DATE, result);\r\n    assertDate(BASE_DATE, 2000, 6, 5, 4, 3, 2, 1);\r\n    assertDate(result, 2000, 6, 12, 4, 3, 2, 1);\r\n    result = DateUtils.addWeeks(BASE_DATE, -1);\r\n    assertNotSame(BASE_DATE, result);\r\n    // july\r\n    assertDate(BASE_DATE, 2000, 6, 5, 4, 3, 2, 1);\r\n    // june\r\n    assertDate(result, 2000, 5, 28, 4, 3, 2, 1);\r\n    assertNullPointerException(() -> DateUtils.addMonths(null, 0));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\time\\DateUtilsTest.java",
  "methodName" : "testAddYears",
  "sourceCode" : "@Test\r\nvoid testAddYears() throws Exception {\r\n    Date result = DateUtils.addYears(BASE_DATE, 0);\r\n    assertNotSame(BASE_DATE, result);\r\n    assertDate(BASE_DATE, 2000, 6, 5, 4, 3, 2, 1);\r\n    assertDate(result, 2000, 6, 5, 4, 3, 2, 1);\r\n    result = DateUtils.addYears(BASE_DATE, 1);\r\n    assertNotSame(BASE_DATE, result);\r\n    assertDate(BASE_DATE, 2000, 6, 5, 4, 3, 2, 1);\r\n    assertDate(result, 2001, 6, 5, 4, 3, 2, 1);\r\n    result = DateUtils.addYears(BASE_DATE, -1);\r\n    assertNotSame(BASE_DATE, result);\r\n    assertDate(BASE_DATE, 2000, 6, 5, 4, 3, 2, 1);\r\n    assertDate(result, 1999, 6, 5, 4, 3, 2, 1);\r\n    assertNullPointerException(() -> DateUtils.addYears(null, 0));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\time\\DateUtilsTest.java",
  "methodName" : "testCeiling",
  "sourceCode" : "/**\r\n * Tests various values with the ceiling method\r\n *\r\n * @throws Exception so we don't have to catch it\r\n */\r\n@Test\r\nvoid testCeiling() throws Exception {\r\n    // test javadoc\r\n    assertEquals(dateTimeParser.parse(\"March 28, 2002 14:00:00.000\"), DateUtils.ceiling(dateTimeParser.parse(\"March 28, 2002 13:45:01.231\"), Calendar.HOUR), \"ceiling javadoc-1 failed\");\r\n    assertEquals(dateTimeParser.parse(\"April 1, 2002 00:00:00.000\"), DateUtils.ceiling(dateTimeParser.parse(\"March 28, 2002 13:45:01.231\"), Calendar.MONTH), \"ceiling javadoc-2 failed\");\r\n    // tests public static Date ceiling(Date date, int field)\r\n    assertEquals(dateParser.parse(\"January 1, 2003\"), DateUtils.ceiling(date1, Calendar.YEAR), \"ceiling year-1 failed\");\r\n    assertEquals(dateParser.parse(\"January 1, 2002\"), DateUtils.ceiling(date2, Calendar.YEAR), \"ceiling year-2 failed\");\r\n    assertEquals(dateParser.parse(\"March 1, 2002\"), DateUtils.ceiling(date1, Calendar.MONTH), \"ceiling month-1 failed\");\r\n    assertEquals(dateParser.parse(\"December 1, 2001\"), DateUtils.ceiling(date2, Calendar.MONTH), \"ceiling month-2 failed\");\r\n    assertEquals(dateParser.parse(\"February 16, 2002\"), DateUtils.ceiling(date1, DateUtils.SEMI_MONTH), \"ceiling semimonth-1 failed\");\r\n    assertEquals(dateParser.parse(\"December 1, 2001\"), DateUtils.ceiling(date2, DateUtils.SEMI_MONTH), \"ceiling semimonth-2 failed\");\r\n    assertEquals(dateParser.parse(\"February 13, 2002\"), DateUtils.ceiling(date1, Calendar.DATE), \"ceiling date-1 failed\");\r\n    assertEquals(dateParser.parse(\"November 19, 2001\"), DateUtils.ceiling(date2, Calendar.DATE), \"ceiling date-2 failed\");\r\n    assertEquals(dateTimeParser.parse(\"February 12, 2002 13:00:00.000\"), DateUtils.ceiling(date1, Calendar.HOUR), \"ceiling hour-1 failed\");\r\n    assertEquals(dateTimeParser.parse(\"November 18, 2001 2:00:00.000\"), DateUtils.ceiling(date2, Calendar.HOUR), \"ceiling hour-2 failed\");\r\n    assertEquals(dateTimeParser.parse(\"February 12, 2002 12:35:00.000\"), DateUtils.ceiling(date1, Calendar.MINUTE), \"ceiling minute-1 failed\");\r\n    assertEquals(dateTimeParser.parse(\"November 18, 2001 1:24:00.000\"), DateUtils.ceiling(date2, Calendar.MINUTE), \"ceiling minute-2 failed\");\r\n    assertEquals(dateTimeParser.parse(\"February 12, 2002 12:34:57.000\"), DateUtils.ceiling(date1, Calendar.SECOND), \"ceiling second-1 failed\");\r\n    assertEquals(dateTimeParser.parse(\"November 18, 2001 1:23:12.000\"), DateUtils.ceiling(date2, Calendar.SECOND), \"ceiling second-2 failed\");\r\n    assertEquals(dateTimeParser.parse(\"February 3, 2002 12:00:00.000\"), DateUtils.ceiling(dateAmPm1, Calendar.AM_PM), \"ceiling ampm-1 failed\");\r\n    assertEquals(dateTimeParser.parse(\"February 3, 2002 12:00:00.000\"), DateUtils.ceiling(dateAmPm2, Calendar.AM_PM), \"ceiling ampm-2 failed\");\r\n    assertEquals(dateTimeParser.parse(\"February 4, 2002 00:00:00.000\"), DateUtils.ceiling(dateAmPm3, Calendar.AM_PM), \"ceiling ampm-3 failed\");\r\n    assertEquals(dateTimeParser.parse(\"February 4, 2002 00:00:00.000\"), DateUtils.ceiling(dateAmPm4, Calendar.AM_PM), \"ceiling ampm-4 failed\");\r\n    // tests public static Date ceiling(Object date, int field)\r\n    assertEquals(dateParser.parse(\"January 1, 2003\"), DateUtils.ceiling((Object) date1, Calendar.YEAR), \"ceiling year-1 failed\");\r\n    assertEquals(dateParser.parse(\"January 1, 2002\"), DateUtils.ceiling((Object) date2, Calendar.YEAR), \"ceiling year-2 failed\");\r\n    assertEquals(dateParser.parse(\"March 1, 2002\"), DateUtils.ceiling((Object) date1, Calendar.MONTH), \"ceiling month-1 failed\");\r\n    assertEquals(dateParser.parse(\"December 1, 2001\"), DateUtils.ceiling((Object) date2, Calendar.MONTH), \"ceiling month-2 failed\");\r\n    assertEquals(dateParser.parse(\"February 16, 2002\"), DateUtils.ceiling((Object) date1, DateUtils.SEMI_MONTH), \"ceiling semimonth-1 failed\");\r\n    assertEquals(dateParser.parse(\"December 1, 2001\"), DateUtils.ceiling((Object) date2, DateUtils.SEMI_MONTH), \"ceiling semimonth-2 failed\");\r\n    assertEquals(dateParser.parse(\"February 13, 2002\"), DateUtils.ceiling((Object) date1, Calendar.DATE), \"ceiling date-1 failed\");\r\n    assertEquals(dateParser.parse(\"November 19, 2001\"), DateUtils.ceiling((Object) date2, Calendar.DATE), \"ceiling date-2 failed\");\r\n    assertEquals(dateTimeParser.parse(\"February 12, 2002 13:00:00.000\"), DateUtils.ceiling((Object) date1, Calendar.HOUR), \"ceiling hour-1 failed\");\r\n    assertEquals(dateTimeParser.parse(\"November 18, 2001 2:00:00.000\"), DateUtils.ceiling((Object) date2, Calendar.HOUR), \"ceiling hour-2 failed\");\r\n    assertEquals(dateTimeParser.parse(\"February 12, 2002 12:35:00.000\"), DateUtils.ceiling((Object) date1, Calendar.MINUTE), \"ceiling minute-1 failed\");\r\n    assertEquals(dateTimeParser.parse(\"November 18, 2001 1:24:00.000\"), DateUtils.ceiling((Object) date2, Calendar.MINUTE), \"ceiling minute-2 failed\");\r\n    assertEquals(dateTimeParser.parse(\"February 12, 2002 12:34:57.000\"), DateUtils.ceiling((Object) date1, Calendar.SECOND), \"ceiling second-1 failed\");\r\n    assertEquals(dateTimeParser.parse(\"November 18, 2001 1:23:12.000\"), DateUtils.ceiling((Object) date2, Calendar.SECOND), \"ceiling second-2 failed\");\r\n    assertEquals(dateTimeParser.parse(\"February 3, 2002 12:00:00.000\"), DateUtils.ceiling((Object) dateAmPm1, Calendar.AM_PM), \"ceiling ampm-1 failed\");\r\n    assertEquals(dateTimeParser.parse(\"February 3, 2002 12:00:00.000\"), DateUtils.ceiling((Object) dateAmPm2, Calendar.AM_PM), \"ceiling ampm-2 failed\");\r\n    assertEquals(dateTimeParser.parse(\"February 4, 2002 00:00:00.000\"), DateUtils.ceiling((Object) dateAmPm3, Calendar.AM_PM), \"ceiling ampm-3 failed\");\r\n    assertEquals(dateTimeParser.parse(\"February 4, 2002 00:00:00.000\"), DateUtils.ceiling((Object) dateAmPm4, Calendar.AM_PM), \"ceiling ampm-4 failed\");\r\n    assertEquals(dateTimeParser.parse(\"February 12, 2002 12:34:57.000\"), DateUtils.ceiling((Object) cal1, Calendar.SECOND), \"ceiling calendar second-1 failed\");\r\n    assertEquals(dateTimeParser.parse(\"November 18, 2001 1:23:12.000\"), DateUtils.ceiling((Object) cal2, Calendar.SECOND), \"ceiling calendar second-2 failed\");\r\n    assertEquals(dateTimeParser.parse(\"February 3, 2002 12:00:00.000\"), DateUtils.ceiling((Object) calAmPm1, Calendar.AM_PM), \"ceiling ampm-1 failed\");\r\n    assertEquals(dateTimeParser.parse(\"February 3, 2002 12:00:00.000\"), DateUtils.ceiling((Object) calAmPm2, Calendar.AM_PM), \"ceiling ampm-2 failed\");\r\n    assertEquals(dateTimeParser.parse(\"February 4, 2002 00:00:00.000\"), DateUtils.ceiling((Object) calAmPm3, Calendar.AM_PM), \"ceiling ampm-3 failed\");\r\n    assertEquals(dateTimeParser.parse(\"February 4, 2002 00:00:00.000\"), DateUtils.ceiling((Object) calAmPm4, Calendar.AM_PM), \"ceiling ampm-4 failed\");\r\n    assertNullPointerException(() -> DateUtils.ceiling((Date) null, Calendar.SECOND));\r\n    assertNullPointerException(() -> DateUtils.ceiling((Calendar) null, Calendar.SECOND));\r\n    assertNullPointerException(() -> DateUtils.ceiling((Object) null, Calendar.SECOND));\r\n    assertThrows(ClassCastException.class, () -> DateUtils.ceiling(\"\", Calendar.SECOND));\r\n    assertIllegalArgumentException(() -> DateUtils.ceiling(date1, -9999));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\time\\DateUtilsTest.java",
  "methodName" : "testCeiling_Bugzilla_31395",
  "sourceCode" : "/**\r\n * Tests various values with the ceiling method\r\n *\r\n * @throws Exception so we don't have to catch it\r\n */\r\n@Test\r\nvoid testCeiling_Bugzilla_31395() throws Exception {\r\n    // Bug 31395, large dates\r\n    // fyi: Sun Aug 17 07:12:55 CET 292278994 -- 807 millis\r\n    final Date endOfTime = new Date(Long.MAX_VALUE);\r\n    final GregorianCalendar endCal = new GregorianCalendar();\r\n    endCal.setTime(endOfTime);\r\n    assertThrows(ArithmeticException.class, () -> DateUtils.ceiling(endCal, Calendar.DATE));\r\n    endCal.set(Calendar.YEAR, 280000001);\r\n    assertThrows(ArithmeticException.class, () -> DateUtils.ceiling(endCal, Calendar.DATE));\r\n    endCal.set(Calendar.YEAR, 280000000);\r\n    final Calendar cal = DateUtils.ceiling(endCal, Calendar.DATE);\r\n    assertEquals(0, cal.get(Calendar.HOUR));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\time\\DateUtilsTest.java",
  "methodName" : "testCeiling_MET",
  "sourceCode" : "/**\r\n * Tests various values with the ceiling method\r\n *\r\n * @throws Exception so we don't have to catch it\r\n */\r\n@Test\r\nvoid testCeiling_MET() throws Exception {\r\n    // Fix for https://issues.apache.org/bugzilla/show_bug.cgi?id=25560\r\n    // Test ceiling across the beginning of daylight saving time\r\n    TimeZone.setDefault(TIME_ZONE_MET);\r\n    dateTimeParser.setTimeZone(TIME_ZONE_MET);\r\n    assertEquals(dateTimeParser.parse(\"March 31, 2003 00:00:00.000\"), DateUtils.ceiling(date4, Calendar.DATE), \"ceiling MET date across DST change-over\");\r\n    assertEquals(dateTimeParser.parse(\"March 31, 2003 00:00:00.000\"), DateUtils.ceiling((Object) cal4, Calendar.DATE), \"ceiling MET date across DST change-over\");\r\n    assertEquals(dateTimeParser.parse(\"March 31, 2003 00:00:00.000\"), DateUtils.ceiling(date5, Calendar.DATE), \"ceiling MET date across DST change-over\");\r\n    assertEquals(dateTimeParser.parse(\"March 31, 2003 00:00:00.000\"), DateUtils.ceiling((Object) cal5, Calendar.DATE), \"ceiling MET date across DST change-over\");\r\n    assertEquals(dateTimeParser.parse(\"March 31, 2003 00:00:00.000\"), DateUtils.ceiling(date6, Calendar.DATE), \"ceiling MET date across DST change-over\");\r\n    assertEquals(dateTimeParser.parse(\"March 31, 2003 00:00:00.000\"), DateUtils.ceiling((Object) cal6, Calendar.DATE), \"ceiling MET date across DST change-over\");\r\n    assertEquals(dateTimeParser.parse(\"March 31, 2003 00:00:00.000\"), DateUtils.ceiling(date7, Calendar.DATE), \"ceiling MET date across DST change-over\");\r\n    assertEquals(dateTimeParser.parse(\"March 31, 2003 00:00:00.000\"), DateUtils.ceiling((Object) cal7, Calendar.DATE), \"ceiling MET date across DST change-over\");\r\n    assertEquals(dateTimeParser.parse(\"March 30, 2003 03:00:00.000\"), DateUtils.ceiling(date4, Calendar.HOUR_OF_DAY), \"ceiling MET date across DST change-over\");\r\n    assertEquals(dateTimeParser.parse(\"March 30, 2003 03:00:00.000\"), DateUtils.ceiling((Object) cal4, Calendar.HOUR_OF_DAY), \"ceiling MET date across DST change-over\");\r\n    assertEquals(dateTimeParser.parse(\"March 30, 2003 03:00:00.000\"), DateUtils.ceiling(date5, Calendar.HOUR_OF_DAY), \"ceiling MET date across DST change-over\");\r\n    assertEquals(dateTimeParser.parse(\"March 30, 2003 03:00:00.000\"), DateUtils.ceiling((Object) cal5, Calendar.HOUR_OF_DAY), \"ceiling MET date across DST change-over\");\r\n    assertEquals(dateTimeParser.parse(\"March 30, 2003 04:00:00.000\"), DateUtils.ceiling(date6, Calendar.HOUR_OF_DAY), \"ceiling MET date across DST change-over\");\r\n    assertEquals(dateTimeParser.parse(\"March 30, 2003 04:00:00.000\"), DateUtils.ceiling((Object) cal6, Calendar.HOUR_OF_DAY), \"ceiling MET date across DST change-over\");\r\n    assertEquals(dateTimeParser.parse(\"March 30, 2003 04:00:00.000\"), DateUtils.ceiling(date7, Calendar.HOUR_OF_DAY), \"ceiling MET date across DST change-over\");\r\n    assertEquals(dateTimeParser.parse(\"March 30, 2003 04:00:00.000\"), DateUtils.ceiling((Object) cal7, Calendar.HOUR_OF_DAY), \"ceiling MET date across DST change-over\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\time\\DateUtilsTest.java",
  "methodName" : "testConstructor",
  "sourceCode" : "@Test\r\nvoid testConstructor() {\r\n    assertNotNull(new DateUtils());\r\n    final Constructor<?>[] cons = DateUtils.class.getDeclaredConstructors();\r\n    assertEquals(1, cons.length);\r\n    assertTrue(Modifier.isPublic(cons[0].getModifiers()));\r\n    assertTrue(Modifier.isPublic(DateUtils.class.getModifiers()));\r\n    assertFalse(Modifier.isFinal(DateUtils.class.getModifiers()));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\time\\DateUtilsTest.java",
  "methodName" : "testIsSameDay_Cal",
  "sourceCode" : "@Test\r\nvoid testIsSameDay_Cal() {\r\n    final GregorianCalendar cala = new GregorianCalendar(2004, 6, 9, 13, 45);\r\n    final GregorianCalendar calb = new GregorianCalendar(2004, 6, 9, 13, 45);\r\n    assertTrue(DateUtils.isSameDay(cala, calb));\r\n    calb.add(Calendar.DAY_OF_YEAR, 1);\r\n    assertFalse(DateUtils.isSameDay(cala, calb));\r\n    cala.add(Calendar.DAY_OF_YEAR, 1);\r\n    assertTrue(DateUtils.isSameDay(cala, calb));\r\n    calb.add(Calendar.YEAR, 1);\r\n    assertFalse(DateUtils.isSameDay(cala, calb));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\time\\DateUtilsTest.java",
  "methodName" : "testIsSameDay_CalNotNullNull",
  "sourceCode" : "@Test\r\nvoid testIsSameDay_CalNotNullNull() {\r\n    assertNullPointerException(() -> DateUtils.isSameDay(Calendar.getInstance(), null));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\time\\DateUtilsTest.java",
  "methodName" : "testIsSameDay_CalNullNotNull",
  "sourceCode" : "@Test\r\nvoid testIsSameDay_CalNullNotNull() {\r\n    assertNullPointerException(() -> DateUtils.isSameDay(null, Calendar.getInstance()));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\time\\DateUtilsTest.java",
  "methodName" : "testIsSameDay_CalNullNull",
  "sourceCode" : "@Test\r\nvoid testIsSameDay_CalNullNull() {\r\n    assertNullPointerException(() -> DateUtils.isSameDay((Calendar) null, null));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\time\\DateUtilsTest.java",
  "methodName" : "testIsSameDay_Date",
  "sourceCode" : "@Test\r\nvoid testIsSameDay_Date() {\r\n    Date datea = new GregorianCalendar(2004, 6, 9, 13, 45).getTime();\r\n    Date dateb = new GregorianCalendar(2004, 6, 9, 13, 45).getTime();\r\n    assertTrue(DateUtils.isSameDay(datea, dateb));\r\n    dateb = new GregorianCalendar(2004, 6, 10, 13, 45).getTime();\r\n    assertFalse(DateUtils.isSameDay(datea, dateb));\r\n    datea = new GregorianCalendar(2004, 6, 10, 13, 45).getTime();\r\n    assertTrue(DateUtils.isSameDay(datea, dateb));\r\n    dateb = new GregorianCalendar(2005, 6, 10, 13, 45).getTime();\r\n    assertFalse(DateUtils.isSameDay(datea, dateb));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\time\\DateUtilsTest.java",
  "methodName" : "testIsSameDay_DateNotNullNull",
  "sourceCode" : "@Test\r\nvoid testIsSameDay_DateNotNullNull() {\r\n    assertNullPointerException(() -> DateUtils.isSameDay(new Date(), null));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\time\\DateUtilsTest.java",
  "methodName" : "testIsSameDay_DateNullNotNull",
  "sourceCode" : "@Test\r\nvoid testIsSameDay_DateNullNotNull() {\r\n    assertNullPointerException(() -> DateUtils.isSameDay(null, new Date()));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\time\\DateUtilsTest.java",
  "methodName" : "testIsSameDay_DateNullNull",
  "sourceCode" : "@Test\r\nvoid testIsSameDay_DateNullNull() {\r\n    assertNullPointerException(() -> DateUtils.isSameDay((Date) null, null));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\time\\DateUtilsTest.java",
  "methodName" : "testIsSameInstant_Cal",
  "sourceCode" : "@Test\r\nvoid testIsSameInstant_Cal() {\r\n    final GregorianCalendar cala = new GregorianCalendar(TimeZone.getTimeZone(\"GMT+1\"));\r\n    final GregorianCalendar calb = new GregorianCalendar(TimeZone.getTimeZone(\"GMT-1\"));\r\n    cala.set(2004, Calendar.JULY, 9, 13, 45, 0);\r\n    cala.set(Calendar.MILLISECOND, 0);\r\n    calb.set(2004, Calendar.JULY, 9, 13, 45, 0);\r\n    calb.set(Calendar.MILLISECOND, 0);\r\n    assertFalse(DateUtils.isSameInstant(cala, calb));\r\n    calb.set(2004, Calendar.JULY, 9, 11, 45, 0);\r\n    assertTrue(DateUtils.isSameInstant(cala, calb));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\time\\DateUtilsTest.java",
  "methodName" : "testIsSameInstant_CalNotNullNull",
  "sourceCode" : "@Test\r\nvoid testIsSameInstant_CalNotNullNull() {\r\n    assertNullPointerException(() -> DateUtils.isSameInstant(Calendar.getInstance(), null));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\time\\DateUtilsTest.java",
  "methodName" : "testIsSameInstant_CalNullNotNull",
  "sourceCode" : "@Test\r\nvoid testIsSameInstant_CalNullNotNull() {\r\n    assertNullPointerException(() -> DateUtils.isSameInstant(null, Calendar.getInstance()));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\time\\DateUtilsTest.java",
  "methodName" : "testIsSameInstant_CalNullNull",
  "sourceCode" : "@Test\r\nvoid testIsSameInstant_CalNullNull() {\r\n    assertNullPointerException(() -> DateUtils.isSameInstant((Calendar) null, null));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\time\\DateUtilsTest.java",
  "methodName" : "testIsSameInstant_Date",
  "sourceCode" : "@Test\r\nvoid testIsSameInstant_Date() {\r\n    Date datea = new GregorianCalendar(2004, 6, 9, 13, 45).getTime();\r\n    Date dateb = new GregorianCalendar(2004, 6, 9, 13, 45).getTime();\r\n    assertTrue(DateUtils.isSameInstant(datea, dateb));\r\n    dateb = new GregorianCalendar(2004, 6, 10, 13, 45).getTime();\r\n    assertFalse(DateUtils.isSameInstant(datea, dateb));\r\n    datea = new GregorianCalendar(2004, 6, 10, 13, 45).getTime();\r\n    assertTrue(DateUtils.isSameInstant(datea, dateb));\r\n    dateb = new GregorianCalendar(2005, 6, 10, 13, 45).getTime();\r\n    assertFalse(DateUtils.isSameInstant(datea, dateb));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\time\\DateUtilsTest.java",
  "methodName" : "testIsSameInstant_DateNotNullNull",
  "sourceCode" : "@Test\r\nvoid testIsSameInstant_DateNotNullNull() {\r\n    assertNullPointerException(() -> DateUtils.isSameInstant(new Date(), null));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\time\\DateUtilsTest.java",
  "methodName" : "testIsSameInstant_DateNullNotNull",
  "sourceCode" : "@Test\r\nvoid testIsSameInstant_DateNullNotNull() {\r\n    assertNullPointerException(() -> DateUtils.isSameInstant(null, new Date()));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\time\\DateUtilsTest.java",
  "methodName" : "testIsSameInstant_DateNullNull",
  "sourceCode" : "@Test\r\nvoid testIsSameInstant_DateNullNull() {\r\n    assertNullPointerException(() -> DateUtils.isSameInstant((Date) null, null));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\time\\DateUtilsTest.java",
  "methodName" : "testIsSameLocalTime_Cal",
  "sourceCode" : "@Test\r\nvoid testIsSameLocalTime_Cal() {\r\n    final GregorianCalendar cala = new GregorianCalendar(TimeZone.getTimeZone(\"GMT+1\"));\r\n    final GregorianCalendar calb = new GregorianCalendar(TimeZone.getTimeZone(\"GMT-1\"));\r\n    cala.set(2004, Calendar.JULY, 9, 13, 45, 0);\r\n    cala.set(Calendar.MILLISECOND, 0);\r\n    calb.set(2004, Calendar.JULY, 9, 13, 45, 0);\r\n    calb.set(Calendar.MILLISECOND, 0);\r\n    assertTrue(DateUtils.isSameLocalTime(cala, calb));\r\n    final Calendar calc = Calendar.getInstance();\r\n    final Calendar cald = Calendar.getInstance();\r\n    calc.set(2004, Calendar.JULY, 9, 4, 0, 0);\r\n    cald.set(2004, Calendar.JULY, 9, 16, 0, 0);\r\n    calc.set(Calendar.MILLISECOND, 0);\r\n    cald.set(Calendar.MILLISECOND, 0);\r\n    assertFalse(DateUtils.isSameLocalTime(calc, cald), \"LANG-677\");\r\n    calb.set(2004, Calendar.JULY, 9, 11, 45, 0);\r\n    assertFalse(DateUtils.isSameLocalTime(cala, calb));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\time\\DateUtilsTest.java",
  "methodName" : "testIsSameLocalTime_CalNotNullNull",
  "sourceCode" : "@Test\r\nvoid testIsSameLocalTime_CalNotNullNull() {\r\n    assertNullPointerException(() -> DateUtils.isSameLocalTime(Calendar.getInstance(), null));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\time\\DateUtilsTest.java",
  "methodName" : "testIsSameLocalTime_CalNullNotNull",
  "sourceCode" : "@Test\r\nvoid testIsSameLocalTime_CalNullNotNull() {\r\n    assertNullPointerException(() -> DateUtils.isSameLocalTime(null, Calendar.getInstance()));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\time\\DateUtilsTest.java",
  "methodName" : "testIsSameLocalTime_CalNullNull",
  "sourceCode" : "@Test\r\nvoid testIsSameLocalTime_CalNullNull() {\r\n    assertNullPointerException(() -> DateUtils.isSameLocalTime(null, null));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\time\\DateUtilsTest.java",
  "methodName" : "testIteratorEx",
  "sourceCode" : "/**\r\n * Tests the iterator exceptions\r\n */\r\n@Test\r\nvoid testIteratorEx() {\r\n    assertIllegalArgumentException(() -> DateUtils.iterator(Calendar.getInstance(), -9999));\r\n    assertNullPointerException(() -> DateUtils.iterator((Date) null, DateUtils.RANGE_WEEK_CENTER));\r\n    assertNullPointerException(() -> DateUtils.iterator((Calendar) null, DateUtils.RANGE_WEEK_CENTER));\r\n    assertNullPointerException(() -> DateUtils.iterator((Object) null, DateUtils.RANGE_WEEK_CENTER));\r\n    assertThrows(ClassCastException.class, () -> DateUtils.iterator(\"\", DateUtils.RANGE_WEEK_CENTER));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\time\\DateUtilsTest.java",
  "methodName" : "testLang530",
  "sourceCode" : "/**\r\n * See https://issues.apache.org/jira/browse/LANG-530\r\n */\r\n@SuppressWarnings(\"deprecation\")\r\n@Test\r\nvoid testLang530() throws ParseException {\r\n    final Date d = new Date();\r\n    final String isoDateStr = DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.format(d);\r\n    final Date d2 = DateUtils.parseDate(isoDateStr, DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.getPattern());\r\n    // the format loses milliseconds so have to reintroduce them\r\n    assertEquals(d.getTime(), d2.getTime() + d.getTime() % 1000, \"Date not equal to itself ISO formatted and parsed\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\time\\DateUtilsTest.java",
  "methodName" : "testLANG799",
  "sourceCode" : "@Test\r\nvoid testLANG799() throws ParseException {\r\n    DateUtils.parseDateStrictly(\"09 abril 2008 23:55:38 GMT\", new Locale(\"es\"), \"dd MMM yyyy HH:mm:ss zzz\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\time\\DateUtilsTest.java",
  "methodName" : "testLANG799_DE_FAIL",
  "sourceCode" : "/**\r\n * Parse English date with German Locale.\r\n */\r\n@DefaultLocale(language = \"de\")\r\n@Test\r\nvoid testLANG799_DE_FAIL() {\r\n    assertThrows(ParseException.class, () -> DateUtils.parseDate(\"Wed, 09 Apr 2008 23:55:38 GMT\", \"EEE, dd MMM yyyy HH:mm:ss zzz\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\time\\DateUtilsTest.java",
  "methodName" : "testLANG799_DE_OK",
  "sourceCode" : "@DefaultLocale(language = \"de\")\r\n@Test\r\nvoid testLANG799_DE_OK() throws ParseException {\r\n    DateUtils.parseDate(\"Mi, 09 Apr 2008 23:55:38 GMT\", \"EEE, dd MMM yyyy HH:mm:ss zzz\");\r\n    DateUtils.parseDateStrictly(\"Mi, 09 Apr 2008 23:55:38 GMT\", \"EEE, dd MMM yyyy HH:mm:ss zzz\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\time\\DateUtilsTest.java",
  "methodName" : "testLANG799_EN_FAIL",
  "sourceCode" : "// Parse German date with English Locale\r\n@DefaultLocale(language = \"en\")\r\n@Test\r\nvoid testLANG799_EN_FAIL() {\r\n    assertThrows(ParseException.class, () -> DateUtils.parseDate(\"Mi, 09 Apr 2008 23:55:38 GMT\", \"EEE, dd MMM yyyy HH:mm:ss zzz\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\time\\DateUtilsTest.java",
  "methodName" : "testLANG799_EN_OK",
  "sourceCode" : "@DefaultLocale(language = \"en\")\r\n@Test\r\nvoid testLANG799_EN_OK() throws ParseException {\r\n    DateUtils.parseDate(\"Wed, 09 Apr 2008 23:55:38 GMT\", \"EEE, dd MMM yyyy HH:mm:ss zzz\");\r\n    DateUtils.parseDateStrictly(\"Wed, 09 Apr 2008 23:55:38 GMT\", \"EEE, dd MMM yyyy HH:mm:ss zzz\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\time\\DateUtilsTest.java",
  "methodName" : "testLANG799_EN_WITH_DE_LOCALE",
  "sourceCode" : "/**\r\n * Parse German date with English Locale, specifying German Locale override.\r\n */\r\n@DefaultLocale(language = \"en\")\r\n@Test\r\nvoid testLANG799_EN_WITH_DE_LOCALE() throws ParseException {\r\n    DateUtils.parseDate(\"Mi, 09 Apr 2008 23:55:38 GMT\", Locale.GERMAN, \"EEE, dd MMM yyyy HH:mm:ss zzz\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\time\\DateUtilsTest.java",
  "methodName" : "testMonthIterator",
  "sourceCode" : "/**\r\n * Tests the calendar iterator for month-based ranges\r\n *\r\n * @throws Exception so we don't have to catch it\r\n */\r\n@Test\r\nvoid testMonthIterator() throws Exception {\r\n    Iterator<?> it = DateUtils.iterator(date1, DateUtils.RANGE_MONTH_SUNDAY);\r\n    assertWeekIterator(it, dateParser.parse(\"January 27, 2002\"), dateParser.parse(\"March 2, 2002\"));\r\n    it = DateUtils.iterator(date1, DateUtils.RANGE_MONTH_MONDAY);\r\n    assertWeekIterator(it, dateParser.parse(\"January 28, 2002\"), dateParser.parse(\"March 3, 2002\"));\r\n    it = DateUtils.iterator(date2, DateUtils.RANGE_MONTH_SUNDAY);\r\n    assertWeekIterator(it, dateParser.parse(\"October 28, 2001\"), dateParser.parse(\"December 1, 2001\"));\r\n    it = DateUtils.iterator(date2, DateUtils.RANGE_MONTH_MONDAY);\r\n    assertWeekIterator(it, dateParser.parse(\"October 29, 2001\"), dateParser.parse(\"December 2, 2001\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\time\\DateUtilsTest.java",
  "methodName" : "testParse_EmptyParsers",
  "sourceCode" : "@Test\r\nvoid testParse_EmptyParsers() {\r\n    assertThrows(ParseException.class, () -> DateUtils.parseDate(\"19721203\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\time\\DateUtilsTest.java",
  "methodName" : "testParse_NullParsers",
  "sourceCode" : "@Test\r\nvoid testParse_NullParsers() {\r\n    assertNullPointerException(() -> DateUtils.parseDate(\"19721203\", (String[]) null));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\time\\DateUtilsTest.java",
  "methodName" : "testParseDate",
  "sourceCode" : "@Test\r\nvoid testParseDate() throws Exception {\r\n    final GregorianCalendar cal = new GregorianCalendar(1972, 11, 3);\r\n    String dateStr = \"1972-12-03\";\r\n    final String[] parsers = { \"yyyy'-'DDD\", \"yyyy'-'MM'-'dd\", \"yyyyMMdd\" };\r\n    Date date = DateUtils.parseDate(dateStr, parsers);\r\n    assertEquals(cal.getTime(), date);\r\n    dateStr = \"1972-338\";\r\n    date = DateUtils.parseDate(dateStr, parsers);\r\n    assertEquals(cal.getTime(), date);\r\n    dateStr = \"19721203\";\r\n    date = DateUtils.parseDate(dateStr, parsers);\r\n    assertEquals(cal.getTime(), date);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\time\\DateUtilsTest.java",
  "methodName" : "testParseDate_InvalidDateString",
  "sourceCode" : "@Test\r\nvoid testParseDate_InvalidDateString() {\r\n    final String[] parsers = { \"yyyy'-'DDD\", \"yyyy'-'MM'-'dd\", \"yyyyMMdd\" };\r\n    assertThrows(ParseException.class, () -> DateUtils.parseDate(\"197212AB\", parsers));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\time\\DateUtilsTest.java",
  "methodName" : "testParseDate_NoDateString",
  "sourceCode" : "@Test\r\nvoid testParseDate_NoDateString() {\r\n    final String[] parsers = { \"yyyy'-'DDD\", \"yyyy'-'MM'-'dd\", \"yyyyMMdd\" };\r\n    assertThrows(ParseException.class, () -> DateUtils.parseDate(\"PURPLE\", parsers));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\time\\DateUtilsTest.java",
  "methodName" : "testParseDate_Null",
  "sourceCode" : "@Test\r\nvoid testParseDate_Null() {\r\n    final String[] parsers = { \"yyyy'-'DDD\", \"yyyy'-'MM'-'dd\", \"yyyyMMdd\" };\r\n    assertNullPointerException(() -> DateUtils.parseDate(null, parsers));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\time\\DateUtilsTest.java",
  "methodName" : "testParseDateWithLeniency",
  "sourceCode" : "/**\r\n * LANG-486\r\n */\r\n@Test\r\nvoid testParseDateWithLeniency() throws ParseException {\r\n    final GregorianCalendar cal = new GregorianCalendar(1998, 6, 30);\r\n    final String dateStr = \"02 942, 1996\";\r\n    final String[] parsers = { \"MM DDD, yyyy\" };\r\n    final Date date = DateUtils.parseDate(dateStr, parsers);\r\n    assertEquals(cal.getTime(), date);\r\n    assertThrows(ParseException.class, () -> DateUtils.parseDateStrictly(dateStr, parsers));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\time\\DateUtilsTest.java",
  "methodName" : "testRound",
  "sourceCode" : "/**\r\n * Tests various values with the round method\r\n *\r\n * @throws Exception so we don't have to catch it\r\n */\r\n@Test\r\nvoid testRound() throws Exception {\r\n    // tests for public static Date round(Date date, int field)\r\n    assertEquals(dateParser.parse(\"January 1, 2002\"), DateUtils.round(date1, Calendar.YEAR), \"round year-1 failed\");\r\n    assertEquals(dateParser.parse(\"January 1, 2002\"), DateUtils.round(date2, Calendar.YEAR), \"round year-2 failed\");\r\n    assertEquals(dateParser.parse(\"February 1, 2002\"), DateUtils.round(date1, Calendar.MONTH), \"round month-1 failed\");\r\n    assertEquals(dateParser.parse(\"December 1, 2001\"), DateUtils.round(date2, Calendar.MONTH), \"round month-2 failed\");\r\n    assertEquals(dateParser.parse(\"February 1, 2002\"), DateUtils.round(date0, DateUtils.SEMI_MONTH), \"round semimonth-0 failed\");\r\n    assertEquals(dateParser.parse(\"February 16, 2002\"), DateUtils.round(date1, DateUtils.SEMI_MONTH), \"round semimonth-1 failed\");\r\n    assertEquals(dateParser.parse(\"November 16, 2001\"), DateUtils.round(date2, DateUtils.SEMI_MONTH), \"round semimonth-2 failed\");\r\n    assertEquals(dateParser.parse(\"February 13, 2002\"), DateUtils.round(date1, Calendar.DATE), \"round date-1 failed\");\r\n    assertEquals(dateParser.parse(\"November 18, 2001\"), DateUtils.round(date2, Calendar.DATE), \"round date-2 failed\");\r\n    assertEquals(dateTimeParser.parse(\"February 12, 2002 13:00:00.000\"), DateUtils.round(date1, Calendar.HOUR), \"round hour-1 failed\");\r\n    assertEquals(dateTimeParser.parse(\"November 18, 2001 1:00:00.000\"), DateUtils.round(date2, Calendar.HOUR), \"round hour-2 failed\");\r\n    assertEquals(dateTimeParser.parse(\"February 12, 2002 12:35:00.000\"), DateUtils.round(date1, Calendar.MINUTE), \"round minute-1 failed\");\r\n    assertEquals(dateTimeParser.parse(\"November 18, 2001 1:23:00.000\"), DateUtils.round(date2, Calendar.MINUTE), \"round minute-2 failed\");\r\n    assertEquals(dateTimeParser.parse(\"February 12, 2002 12:34:57.000\"), DateUtils.round(date1, Calendar.SECOND), \"round second-1 failed\");\r\n    assertEquals(dateTimeParser.parse(\"November 18, 2001 1:23:11.000\"), DateUtils.round(date2, Calendar.SECOND), \"round second-2 failed\");\r\n    assertEquals(dateTimeParser.parse(\"February 3, 2002 00:00:00.000\"), DateUtils.round(dateAmPm1, Calendar.AM_PM), \"round ampm-1 failed\");\r\n    assertEquals(dateTimeParser.parse(\"February 3, 2002 12:00:00.000\"), DateUtils.round(dateAmPm2, Calendar.AM_PM), \"round ampm-2 failed\");\r\n    assertEquals(dateTimeParser.parse(\"February 3, 2002 12:00:00.000\"), DateUtils.round(dateAmPm3, Calendar.AM_PM), \"round ampm-3 failed\");\r\n    assertEquals(dateTimeParser.parse(\"February 4, 2002 00:00:00.000\"), DateUtils.round(dateAmPm4, Calendar.AM_PM), \"round ampm-4 failed\");\r\n    // tests for public static Date round(Object date, int field)\r\n    assertEquals(dateParser.parse(\"January 1, 2002\"), DateUtils.round((Object) date1, Calendar.YEAR), \"round year-1 failed\");\r\n    assertEquals(dateParser.parse(\"January 1, 2002\"), DateUtils.round((Object) date2, Calendar.YEAR), \"round year-2 failed\");\r\n    assertEquals(dateParser.parse(\"February 1, 2002\"), DateUtils.round((Object) date1, Calendar.MONTH), \"round month-1 failed\");\r\n    assertEquals(dateParser.parse(\"December 1, 2001\"), DateUtils.round((Object) date2, Calendar.MONTH), \"round month-2 failed\");\r\n    assertEquals(dateParser.parse(\"February 16, 2002\"), DateUtils.round((Object) date1, DateUtils.SEMI_MONTH), \"round semimonth-1 failed\");\r\n    assertEquals(dateParser.parse(\"November 16, 2001\"), DateUtils.round((Object) date2, DateUtils.SEMI_MONTH), \"round semimonth-2 failed\");\r\n    assertEquals(dateParser.parse(\"February 13, 2002\"), DateUtils.round((Object) date1, Calendar.DATE), \"round date-1 failed\");\r\n    assertEquals(dateParser.parse(\"November 18, 2001\"), DateUtils.round((Object) date2, Calendar.DATE), \"round date-2 failed\");\r\n    assertEquals(dateTimeParser.parse(\"February 12, 2002 13:00:00.000\"), DateUtils.round((Object) date1, Calendar.HOUR), \"round hour-1 failed\");\r\n    assertEquals(dateTimeParser.parse(\"November 18, 2001 1:00:00.000\"), DateUtils.round((Object) date2, Calendar.HOUR), \"round hour-2 failed\");\r\n    assertEquals(dateTimeParser.parse(\"February 12, 2002 12:35:00.000\"), DateUtils.round((Object) date1, Calendar.MINUTE), \"round minute-1 failed\");\r\n    assertEquals(dateTimeParser.parse(\"November 18, 2001 1:23:00.000\"), DateUtils.round((Object) date2, Calendar.MINUTE), \"round minute-2 failed\");\r\n    assertEquals(dateTimeParser.parse(\"February 12, 2002 12:34:57.000\"), DateUtils.round((Object) date1, Calendar.SECOND), \"round second-1 failed\");\r\n    assertEquals(dateTimeParser.parse(\"November 18, 2001 1:23:11.000\"), DateUtils.round((Object) date2, Calendar.SECOND), \"round second-2 failed\");\r\n    assertEquals(dateTimeParser.parse(\"February 12, 2002 12:34:57.000\"), DateUtils.round((Object) cal1, Calendar.SECOND), \"round calendar second-1 failed\");\r\n    assertEquals(dateTimeParser.parse(\"November 18, 2001 1:23:11.000\"), DateUtils.round((Object) cal2, Calendar.SECOND), \"round calendar second-2 failed\");\r\n    assertEquals(dateTimeParser.parse(\"February 3, 2002 00:00:00.000\"), DateUtils.round((Object) dateAmPm1, Calendar.AM_PM), \"round ampm-1 failed\");\r\n    assertEquals(dateTimeParser.parse(\"February 3, 2002 12:00:00.000\"), DateUtils.round((Object) dateAmPm2, Calendar.AM_PM), \"round ampm-2 failed\");\r\n    assertEquals(dateTimeParser.parse(\"February 3, 2002 12:00:00.000\"), DateUtils.round((Object) dateAmPm3, Calendar.AM_PM), \"round ampm-3 failed\");\r\n    assertEquals(dateTimeParser.parse(\"February 4, 2002 00:00:00.000\"), DateUtils.round((Object) dateAmPm4, Calendar.AM_PM), \"round ampm-4 failed\");\r\n    assertNullPointerException(() -> DateUtils.round((Date) null, Calendar.SECOND));\r\n    assertNullPointerException(() -> DateUtils.round((Calendar) null, Calendar.SECOND));\r\n    assertNullPointerException(() -> DateUtils.round((Object) null, Calendar.SECOND));\r\n    assertThrows(ClassCastException.class, () -> DateUtils.round(\"\", Calendar.SECOND));\r\n    assertIllegalArgumentException(() -> DateUtils.round(date1, -9999));\r\n    assertEquals(dateTimeParser.parse(\"February 3, 2002 00:00:00.000\"), DateUtils.round((Object) calAmPm1, Calendar.AM_PM), \"round ampm-1 failed\");\r\n    assertEquals(dateTimeParser.parse(\"February 3, 2002 12:00:00.000\"), DateUtils.round((Object) calAmPm2, Calendar.AM_PM), \"round ampm-2 failed\");\r\n    assertEquals(dateTimeParser.parse(\"February 3, 2002 12:00:00.000\"), DateUtils.round((Object) calAmPm3, Calendar.AM_PM), \"round ampm-3 failed\");\r\n    assertEquals(dateTimeParser.parse(\"February 4, 2002 00:00:00.000\"), DateUtils.round((Object) calAmPm4, Calendar.AM_PM), \"round ampm-4 failed\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\time\\DateUtilsTest.java",
  "methodName" : "testRound_MET",
  "sourceCode" : "/**\r\n * Tests various values with the round method\r\n *\r\n * @throws Exception so we don't have to catch it\r\n */\r\n@Test\r\nvoid testRound_MET() throws Exception {\r\n    // Fix for https://issues.apache.org/bugzilla/show_bug.cgi?id=25560 / LANG-13\r\n    // Test rounding across the beginning of daylight saving time\r\n    TimeZone.setDefault(TIME_ZONE_MET);\r\n    dateTimeParser.setTimeZone(TIME_ZONE_MET);\r\n    assertEquals(dateTimeParser.parse(\"March 30, 2003 00:00:00.000\"), DateUtils.round(date4, Calendar.DATE), \"round MET date across DST change-over\");\r\n    assertEquals(dateTimeParser.parse(\"March 30, 2003 00:00:00.000\"), DateUtils.round((Object) cal4, Calendar.DATE), \"round MET date across DST change-over\");\r\n    assertEquals(dateTimeParser.parse(\"March 30, 2003 00:00:00.000\"), DateUtils.round(date5, Calendar.DATE), \"round MET date across DST change-over\");\r\n    assertEquals(dateTimeParser.parse(\"March 30, 2003 00:00:00.000\"), DateUtils.round((Object) cal5, Calendar.DATE), \"round MET date across DST change-over\");\r\n    assertEquals(dateTimeParser.parse(\"March 30, 2003 00:00:00.000\"), DateUtils.round(date6, Calendar.DATE), \"round MET date across DST change-over\");\r\n    assertEquals(dateTimeParser.parse(\"March 30, 2003 00:00:00.000\"), DateUtils.round((Object) cal6, Calendar.DATE), \"round MET date across DST change-over\");\r\n    assertEquals(dateTimeParser.parse(\"March 30, 2003 00:00:00.000\"), DateUtils.round(date7, Calendar.DATE), \"round MET date across DST change-over\");\r\n    assertEquals(dateTimeParser.parse(\"March 30, 2003 00:00:00.000\"), DateUtils.round((Object) cal7, Calendar.DATE), \"round MET date across DST change-over\");\r\n    assertEquals(dateTimeParser.parse(\"March 30, 2003 01:00:00.000\"), DateUtils.round(date4, Calendar.HOUR_OF_DAY), \"round MET date across DST change-over\");\r\n    assertEquals(dateTimeParser.parse(\"March 30, 2003 01:00:00.000\"), DateUtils.round((Object) cal4, Calendar.HOUR_OF_DAY), \"round MET date across DST change-over\");\r\n    assertEquals(dateTimeParser.parse(\"March 30, 2003 03:00:00.000\"), DateUtils.round(date5, Calendar.HOUR_OF_DAY), \"round MET date across DST change-over\");\r\n    assertEquals(dateTimeParser.parse(\"March 30, 2003 03:00:00.000\"), DateUtils.round((Object) cal5, Calendar.HOUR_OF_DAY), \"round MET date across DST change-over\");\r\n    assertEquals(dateTimeParser.parse(\"March 30, 2003 03:00:00.000\"), DateUtils.round(date6, Calendar.HOUR_OF_DAY), \"round MET date across DST change-over\");\r\n    assertEquals(dateTimeParser.parse(\"March 30, 2003 03:00:00.000\"), DateUtils.round((Object) cal6, Calendar.HOUR_OF_DAY), \"round MET date across DST change-over\");\r\n    assertEquals(dateTimeParser.parse(\"March 30, 2003 04:00:00.000\"), DateUtils.round(date7, Calendar.HOUR_OF_DAY), \"round MET date across DST change-over\");\r\n    assertEquals(dateTimeParser.parse(\"March 30, 2003 04:00:00.000\"), DateUtils.round((Object) cal7, Calendar.HOUR_OF_DAY), \"round MET date across DST change-over\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\time\\DateUtilsTest.java",
  "methodName" : "testRoundLang346",
  "sourceCode" : "/**\r\n * Tests the Changes Made by LANG-346 to the DateUtils.modify() private method invoked\r\n * by DateUtils.round().\r\n *\r\n * @throws Exception so we don't have to catch it\r\n */\r\n@Test\r\nvoid testRoundLang346() throws Exception {\r\n    final Calendar testCalendar = Calendar.getInstance();\r\n    testCalendar.set(2007, Calendar.JULY, 2, 8, 8, 50);\r\n    Date date = testCalendar.getTime();\r\n    assertEquals(dateTimeParser.parse(\"July 2, 2007 08:09:00.000\"), DateUtils.round(date, Calendar.MINUTE), \"Minute Round Up Failed\");\r\n    testCalendar.set(2007, Calendar.JULY, 2, 8, 8, 20);\r\n    date = testCalendar.getTime();\r\n    assertEquals(dateTimeParser.parse(\"July 2, 2007 08:08:00.000\"), DateUtils.round(date, Calendar.MINUTE), \"Minute No Round Failed\");\r\n    testCalendar.set(2007, Calendar.JULY, 2, 8, 8, 50);\r\n    testCalendar.set(Calendar.MILLISECOND, 600);\r\n    date = testCalendar.getTime();\r\n    assertEquals(dateTimeParser.parse(\"July 2, 2007 08:08:51.000\"), DateUtils.round(date, Calendar.SECOND), \"Second Round Up with 600 Milli Seconds Failed\");\r\n    testCalendar.set(2007, Calendar.JULY, 2, 8, 8, 50);\r\n    testCalendar.set(Calendar.MILLISECOND, 200);\r\n    date = testCalendar.getTime();\r\n    assertEquals(dateTimeParser.parse(\"July 2, 2007 08:08:50.000\"), DateUtils.round(date, Calendar.SECOND), \"Second Round Down with 200 Milli Seconds Failed\");\r\n    testCalendar.set(2007, Calendar.JULY, 2, 8, 8, 20);\r\n    testCalendar.set(Calendar.MILLISECOND, 600);\r\n    date = testCalendar.getTime();\r\n    assertEquals(dateTimeParser.parse(\"July 2, 2007 08:08:21.000\"), DateUtils.round(date, Calendar.SECOND), \"Second Round Up with 200 Milli Seconds Failed\");\r\n    testCalendar.set(2007, Calendar.JULY, 2, 8, 8, 20);\r\n    testCalendar.set(Calendar.MILLISECOND, 200);\r\n    date = testCalendar.getTime();\r\n    assertEquals(dateTimeParser.parse(\"July 2, 2007 08:08:20.000\"), DateUtils.round(date, Calendar.SECOND), \"Second Round Down with 200 Milli Seconds Failed\");\r\n    testCalendar.set(2007, Calendar.JULY, 2, 8, 8, 50);\r\n    date = testCalendar.getTime();\r\n    assertEquals(dateTimeParser.parse(\"July 2, 2007 08:00:00.000\"), DateUtils.round(date, Calendar.HOUR), \"Hour Round Down Failed\");\r\n    testCalendar.set(2007, Calendar.JULY, 2, 8, 31, 50);\r\n    date = testCalendar.getTime();\r\n    assertEquals(dateTimeParser.parse(\"July 2, 2007 09:00:00.000\"), DateUtils.round(date, Calendar.HOUR), \"Hour Round Up Failed\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\time\\DateUtilsTest.java",
  "methodName" : "testSetDays",
  "sourceCode" : "@Test\r\nvoid testSetDays() throws Exception {\r\n    Date result = DateUtils.setDays(BASE_DATE, 1);\r\n    assertNotSame(BASE_DATE, result);\r\n    assertDate(BASE_DATE, 2000, 6, 5, 4, 3, 2, 1);\r\n    assertDate(result, 2000, 6, 1, 4, 3, 2, 1);\r\n    result = DateUtils.setDays(BASE_DATE, 29);\r\n    assertNotSame(BASE_DATE, result);\r\n    assertDate(BASE_DATE, 2000, 6, 5, 4, 3, 2, 1);\r\n    assertDate(result, 2000, 6, 29, 4, 3, 2, 1);\r\n    final String outsideOfRangeAssertionMessage = \"DateUtils.setDays did not throw an expected IllegalArgumentException for amount outside of range 1 to 31.\";\r\n    assertIllegalArgumentException(() -> DateUtils.setDays(BASE_DATE, 32), outsideOfRangeAssertionMessage);\r\n    assertIllegalArgumentException(() -> DateUtils.setDays(BASE_DATE, 0), outsideOfRangeAssertionMessage);\r\n    assertNullPointerException(() -> DateUtils.setDays(null, 1));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\time\\DateUtilsTest.java",
  "methodName" : "testSetHours",
  "sourceCode" : "@Test\r\nvoid testSetHours() throws Exception {\r\n    Date result = DateUtils.setHours(BASE_DATE, 0);\r\n    assertNotSame(BASE_DATE, result);\r\n    assertDate(BASE_DATE, 2000, 6, 5, 4, 3, 2, 1);\r\n    assertDate(result, 2000, 6, 5, 0, 3, 2, 1);\r\n    result = DateUtils.setHours(BASE_DATE, 23);\r\n    assertNotSame(BASE_DATE, result);\r\n    assertDate(BASE_DATE, 2000, 6, 5, 4, 3, 2, 1);\r\n    assertDate(result, 2000, 6, 5, 23, 3, 2, 1);\r\n    final String outsideOfRangeAssertionMessage = \"DateUtils.setHours did not throw an expected IllegalArgumentException for amount outside of range 0 to 23.\";\r\n    assertIllegalArgumentException(() -> DateUtils.setHours(BASE_DATE, 24), outsideOfRangeAssertionMessage);\r\n    assertIllegalArgumentException(() -> DateUtils.setHours(BASE_DATE, -1), outsideOfRangeAssertionMessage);\r\n    assertNullPointerException(() -> DateUtils.setHours(null, 0));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\time\\DateUtilsTest.java",
  "methodName" : "testSetMilliseconds",
  "sourceCode" : "@Test\r\nvoid testSetMilliseconds() throws Exception {\r\n    Date result = DateUtils.setMilliseconds(BASE_DATE, 0);\r\n    assertNotSame(BASE_DATE, result);\r\n    assertDate(BASE_DATE, 2000, 6, 5, 4, 3, 2, 1);\r\n    assertDate(result, 2000, 6, 5, 4, 3, 2, 0);\r\n    result = DateUtils.setMilliseconds(BASE_DATE, 999);\r\n    assertNotSame(BASE_DATE, result);\r\n    assertDate(BASE_DATE, 2000, 6, 5, 4, 3, 2, 1);\r\n    assertDate(result, 2000, 6, 5, 4, 3, 2, 999);\r\n    final String outsideOfRangeAssertionMessage = \"DateUtils.setMilliseconds did not throw an expected IllegalArgumentException for range outside of 0 to 999.\";\r\n    assertIllegalArgumentException(() -> DateUtils.setMilliseconds(BASE_DATE, 1000), outsideOfRangeAssertionMessage);\r\n    assertIllegalArgumentException(() -> DateUtils.setMilliseconds(BASE_DATE, -1), outsideOfRangeAssertionMessage);\r\n    assertNullPointerException(() -> DateUtils.setMilliseconds(null, 0));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\time\\DateUtilsTest.java",
  "methodName" : "testSetMinutes",
  "sourceCode" : "@Test\r\nvoid testSetMinutes() throws Exception {\r\n    Date result = DateUtils.setMinutes(BASE_DATE, 0);\r\n    assertNotSame(BASE_DATE, result);\r\n    assertDate(BASE_DATE, 2000, 6, 5, 4, 3, 2, 1);\r\n    assertDate(result, 2000, 6, 5, 4, 0, 2, 1);\r\n    result = DateUtils.setMinutes(BASE_DATE, 59);\r\n    assertNotSame(BASE_DATE, result);\r\n    assertDate(BASE_DATE, 2000, 6, 5, 4, 3, 2, 1);\r\n    assertDate(result, 2000, 6, 5, 4, 59, 2, 1);\r\n    final String outsideOfRangeAssertionMessage = \"DateUtils.setMinutes did not throw an expected IllegalArgumentException for amount outside of range 0 to 59.\";\r\n    assertIllegalArgumentException(() -> DateUtils.setMinutes(BASE_DATE, 60), outsideOfRangeAssertionMessage);\r\n    assertIllegalArgumentException(() -> DateUtils.setMinutes(BASE_DATE, -1), outsideOfRangeAssertionMessage);\r\n    assertNullPointerException(() -> DateUtils.setMinutes(null, 0));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\time\\DateUtilsTest.java",
  "methodName" : "testSetMonths",
  "sourceCode" : "@Test\r\nvoid testSetMonths() throws Exception {\r\n    Date result = DateUtils.setMonths(BASE_DATE, 5);\r\n    assertNotSame(BASE_DATE, result);\r\n    assertDate(BASE_DATE, 2000, 6, 5, 4, 3, 2, 1);\r\n    assertDate(result, 2000, 5, 5, 4, 3, 2, 1);\r\n    result = DateUtils.setMonths(BASE_DATE, 1);\r\n    assertNotSame(BASE_DATE, result);\r\n    assertDate(BASE_DATE, 2000, 6, 5, 4, 3, 2, 1);\r\n    assertDate(result, 2000, 1, 5, 4, 3, 2, 1);\r\n    result = DateUtils.setMonths(BASE_DATE, 0);\r\n    assertNotSame(BASE_DATE, result);\r\n    assertDate(BASE_DATE, 2000, 6, 5, 4, 3, 2, 1);\r\n    assertDate(result, 2000, 0, 5, 4, 3, 2, 1);\r\n    final String outsideOfRangeAssertionMessage = \"DateUtils.setMonths did not throw an expected IllegalArgumentException for amount outside of range 0 to 11.\";\r\n    assertIllegalArgumentException(() -> DateUtils.setMonths(BASE_DATE, 12), outsideOfRangeAssertionMessage);\r\n    assertIllegalArgumentException(() -> DateUtils.setMonths(BASE_DATE, -1), outsideOfRangeAssertionMessage);\r\n    assertNullPointerException(() -> DateUtils.setMonths(null, 0));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\time\\DateUtilsTest.java",
  "methodName" : "testSetSeconds",
  "sourceCode" : "@Test\r\nvoid testSetSeconds() throws Exception {\r\n    Date result = DateUtils.setSeconds(BASE_DATE, 0);\r\n    assertNotSame(BASE_DATE, result);\r\n    assertDate(BASE_DATE, 2000, 6, 5, 4, 3, 2, 1);\r\n    assertDate(result, 2000, 6, 5, 4, 3, 0, 1);\r\n    result = DateUtils.setSeconds(BASE_DATE, 59);\r\n    assertNotSame(BASE_DATE, result);\r\n    assertDate(BASE_DATE, 2000, 6, 5, 4, 3, 2, 1);\r\n    assertDate(result, 2000, 6, 5, 4, 3, 59, 1);\r\n    final String outsideOfRangeAssertionMessage = \"DateUtils.setSeconds did not throw an expected IllegalArgumentException for amount outside of range 0 to 59.\";\r\n    assertIllegalArgumentException(() -> DateUtils.setSeconds(BASE_DATE, 60), outsideOfRangeAssertionMessage);\r\n    assertIllegalArgumentException(() -> DateUtils.setSeconds(BASE_DATE, -1), outsideOfRangeAssertionMessage);\r\n    assertNullPointerException(() -> DateUtils.setSeconds(null, 0));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\time\\DateUtilsTest.java",
  "methodName" : "testSetYears",
  "sourceCode" : "@Test\r\nvoid testSetYears() throws Exception {\r\n    Date result = DateUtils.setYears(BASE_DATE, 2000);\r\n    assertNotSame(BASE_DATE, result);\r\n    assertDate(BASE_DATE, 2000, 6, 5, 4, 3, 2, 1);\r\n    assertDate(result, 2000, 6, 5, 4, 3, 2, 1);\r\n    result = DateUtils.setYears(BASE_DATE, 2008);\r\n    assertNotSame(BASE_DATE, result);\r\n    assertDate(BASE_DATE, 2000, 6, 5, 4, 3, 2, 1);\r\n    assertDate(result, 2008, 6, 5, 4, 3, 2, 1);\r\n    result = DateUtils.setYears(BASE_DATE, 2005);\r\n    assertNotSame(BASE_DATE, result);\r\n    assertDate(BASE_DATE, 2000, 6, 5, 4, 3, 2, 1);\r\n    assertDate(result, 2005, 6, 5, 4, 3, 2, 1);\r\n    assertNullPointerException(() -> DateUtils.setYears(null, 0));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\time\\DateUtilsTest.java",
  "methodName" : "testToCalendar",
  "sourceCode" : "@Test\r\nvoid testToCalendar() {\r\n    assertEquals(date1, DateUtils.toCalendar(date1).getTime(), \"Failed to convert to a Calendar and back\");\r\n    assertNullPointerException(() -> DateUtils.toCalendar(null));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\time\\DateUtilsTest.java",
  "methodName" : "testToCalendarWithDateAndTimeZoneNotNull",
  "sourceCode" : "@Test\r\nvoid testToCalendarWithDateAndTimeZoneNotNull() {\r\n    final Calendar c = DateUtils.toCalendar(date2, TIME_ZONE_DEFAULT);\r\n    assertEquals(date2, c.getTime(), \"Convert Date and TimeZone to a Calendar, but failed to get the Date back\");\r\n    assertEquals(TIME_ZONE_DEFAULT, c.getTimeZone(), \"Convert Date and TimeZone to a Calendar, but failed to get the TimeZone back\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\time\\DateUtilsTest.java",
  "methodName" : "testToCalendarWithDateAndTimeZoneNull",
  "sourceCode" : "@Test\r\nvoid testToCalendarWithDateAndTimeZoneNull() {\r\n    assertNullPointerException(() -> DateUtils.toCalendar(null, null));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\time\\DateUtilsTest.java",
  "methodName" : "testToCalendarWithDateNull",
  "sourceCode" : "@Test\r\nvoid testToCalendarWithDateNull() {\r\n    assertNullPointerException(() -> DateUtils.toCalendar(null, TIME_ZONE_MET));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\time\\DateUtilsTest.java",
  "methodName" : "testToCalendarWithTimeZoneNull",
  "sourceCode" : "@Test\r\nvoid testToCalendarWithTimeZoneNull() {\r\n    assertNullPointerException(() -> DateUtils.toCalendar(date1, null));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\time\\DateUtilsTest.java",
  "methodName" : "testToLocalDateTime",
  "sourceCode" : "@ParameterizedTest\r\n@MethodSource(\"testToLocalDateTimeTimeZone\")\r\n@DefaultLocale(language = \"en\", country = \"US\")\r\n@DefaultTimeZone(TimeZones.GMT_ID)\r\nvoid testToLocalDateTime(final LocalDateTime expected, final Date date, final TimeZone timeZone) {\r\n    assertEquals(LocalDateTime.ofInstant(date.toInstant(), ZoneId.systemDefault()), DateUtils.toLocalDateTime(date), () -> String.format(\"expected = %s, date = %s, timeZone = %s, TimeZone.getDefault() = %s\", expected, date, timeZone, TimeZone.getDefault()));\r\n}",
  "annotations" : [ "ParameterizedTest" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\time\\DateUtilsTest.java",
  "methodName" : "testToLocalDateTimeTimeZone",
  "sourceCode" : "@ParameterizedTest\r\n@MethodSource(\"testToLocalDateTimeTimeZone\")\r\n@DefaultLocale(language = \"en\", country = \"US\")\r\n@DefaultTimeZone(TimeZones.GMT_ID)\r\nvoid testToLocalDateTimeTimeZone(final LocalDateTime expected, final Date date, final TimeZone timeZone) {\r\n    assertEquals(expected, DateUtils.toLocalDateTime(date, timeZone), () -> String.format(\"expected = %s, date = %s, timeZone = %s, TimeZone.getDefault() = %s\", expected, date, timeZone, TimeZone.getDefault()));\r\n}",
  "annotations" : [ "ParameterizedTest" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\time\\DateUtilsTest.java",
  "methodName" : "testToOffsetDateTime",
  "sourceCode" : "@ParameterizedTest\r\n@MethodSource(\"testToLocalDateTimeTimeZone\")\r\n@DefaultLocale(language = \"en\", country = \"US\")\r\n@DefaultTimeZone(TimeZones.GMT_ID)\r\nvoid testToOffsetDateTime(final LocalDateTime expected, final Date date, final TimeZone timeZone) {\r\n    final OffsetDateTime offsetDateTime = DateUtils.toOffsetDateTime(date);\r\n    assertEquals(OffsetDateTime.ofInstant(date.toInstant(), ZoneId.systemDefault()), offsetDateTime, () -> String.format(\"expected = %s, date = %s, timeZone = %s, TimeZone.getDefault() = %s\", expected, date, timeZone, TimeZone.getDefault()));\r\n}",
  "annotations" : [ "ParameterizedTest" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\time\\DateUtilsTest.java",
  "methodName" : "testToOffsetDateTimeTimeZone",
  "sourceCode" : "@ParameterizedTest\r\n@MethodSource(\"testToLocalDateTimeTimeZone\")\r\n@DefaultLocale(language = \"en\", country = \"US\")\r\n@DefaultTimeZone(TimeZones.GMT_ID)\r\nvoid testToOffsetDateTimeTimeZone(final LocalDateTime expected, final Date date, final TimeZone timeZone) {\r\n    assertEquals(expected, DateUtils.toOffsetDateTime(date, timeZone).toLocalDateTime(), () -> String.format(\"expected = %s, date = %s, timeZone = %s, TimeZone.getDefault() = %s\", expected, date, timeZone, TimeZone.getDefault()));\r\n}",
  "annotations" : [ "ParameterizedTest" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\time\\DateUtilsTest.java",
  "methodName" : "testToZonedDateTime",
  "sourceCode" : "@ParameterizedTest\r\n@MethodSource(\"testToLocalDateTimeTimeZone\")\r\n@DefaultLocale(language = \"en\", country = \"US\")\r\n@DefaultTimeZone(TimeZones.GMT_ID)\r\nvoid testToZonedDateTime(final LocalDateTime expected, final Date date, final TimeZone timeZone) {\r\n    final ZonedDateTime zonedDateTime = DateUtils.toZonedDateTime(date);\r\n    assertEquals(ZonedDateTime.ofInstant(date.toInstant(), ZoneId.systemDefault()), zonedDateTime, () -> String.format(\"expected = %s, date = %s, timeZone = %s, TimeZone.getDefault() = %s\", expected, date, timeZone, TimeZone.getDefault()));\r\n    // Using atZone()\r\n    assertEquals(date.toInstant().atZone(ZoneId.systemDefault()), zonedDateTime, () -> String.format(\"expected = %s, date = %s, timeZone = %s, TimeZone.getDefault() = %s\", expected, date, timeZone, TimeZone.getDefault()));\r\n}",
  "annotations" : [ "ParameterizedTest" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\time\\DateUtilsTest.java",
  "methodName" : "testToZonedDateTimeTimeZone",
  "sourceCode" : "@ParameterizedTest\r\n@MethodSource(\"testToLocalDateTimeTimeZone\")\r\n@DefaultLocale(language = \"en\", country = \"US\")\r\n@DefaultTimeZone(TimeZones.GMT_ID)\r\nvoid testToZonedDateTimeTimeZone(final LocalDateTime expected, final Date date, final TimeZone timeZone) {\r\n    final ZonedDateTime zonedDateTime = DateUtils.toZonedDateTime(date, timeZone);\r\n    assertEquals(expected, zonedDateTime.toOffsetDateTime().toLocalDateTime(), () -> String.format(\"expected = %s, date = %s, timeZone = %s, TimeZone.getDefault() = %s\", expected, date, timeZone, TimeZone.getDefault()));\r\n    // Using atZone()\r\n    assertEquals(date.toInstant().atZone(TimeZones.toTimeZone(timeZone).toZoneId()), zonedDateTime, () -> String.format(\"expected = %s, date = %s, timeZone = %s, TimeZone.getDefault() = %s\", expected, date, timeZone, TimeZone.getDefault()));\r\n}",
  "annotations" : [ "ParameterizedTest" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\time\\DateUtilsTest.java",
  "methodName" : "testTruncate",
  "sourceCode" : "/**\r\n * Tests various values with the trunc method.\r\n *\r\n * @throws Exception so we don't have to catch it.\r\n */\r\n@Test\r\nvoid testTruncate() throws Exception {\r\n    // tests public static Date truncate(Date date, int field)\r\n    assertEquals(dateParser.parse(\"January 1, 2002\"), DateUtils.truncate(date1, Calendar.YEAR), \"truncate year-1 failed\");\r\n    assertEquals(dateParser.parse(\"January 1, 2001\"), DateUtils.truncate(date2, Calendar.YEAR), \"truncate year-2 failed\");\r\n    assertEquals(dateParser.parse(\"February 1, 2002\"), DateUtils.truncate(date1, Calendar.MONTH), \"truncate month-1 failed\");\r\n    assertEquals(dateParser.parse(\"November 1, 2001\"), DateUtils.truncate(date2, Calendar.MONTH), \"truncate month-2 failed\");\r\n    assertEquals(dateParser.parse(\"February 1, 2002\"), DateUtils.truncate(date1, DateUtils.SEMI_MONTH), \"truncate semimonth-1 failed\");\r\n    assertEquals(dateParser.parse(\"November 16, 2001\"), DateUtils.truncate(date2, DateUtils.SEMI_MONTH), \"truncate semimonth-2 failed\");\r\n    assertEquals(dateParser.parse(\"February 12, 2002\"), DateUtils.truncate(date1, Calendar.DATE), \"truncate date-1 failed\");\r\n    assertEquals(dateParser.parse(\"November 18, 2001\"), DateUtils.truncate(date2, Calendar.DATE), \"truncate date-2 failed\");\r\n    assertEquals(dateTimeParser.parse(\"February 12, 2002 12:00:00.000\"), DateUtils.truncate(date1, Calendar.HOUR), \"truncate hour-1 failed\");\r\n    assertEquals(dateTimeParser.parse(\"November 18, 2001 1:00:00.000\"), DateUtils.truncate(date2, Calendar.HOUR), \"truncate hour-2 failed\");\r\n    assertEquals(dateTimeParser.parse(\"February 12, 2002 12:34:00.000\"), DateUtils.truncate(date1, Calendar.MINUTE), \"truncate minute-1 failed\");\r\n    assertEquals(dateTimeParser.parse(\"November 18, 2001 1:23:00.000\"), DateUtils.truncate(date2, Calendar.MINUTE), \"truncate minute-2 failed\");\r\n    assertEquals(dateTimeParser.parse(\"February 12, 2002 12:34:56.000\"), DateUtils.truncate(date1, Calendar.SECOND), \"truncate second-1 failed\");\r\n    assertEquals(dateTimeParser.parse(\"November 18, 2001 1:23:11.000\"), DateUtils.truncate(date2, Calendar.SECOND), \"truncate second-2 failed\");\r\n    assertEquals(dateTimeParser.parse(\"February 3, 2002 00:00:00.000\"), DateUtils.truncate(dateAmPm1, Calendar.AM_PM), \"truncate ampm-1 failed\");\r\n    assertEquals(dateTimeParser.parse(\"February 3, 2002 00:00:00.000\"), DateUtils.truncate(dateAmPm2, Calendar.AM_PM), \"truncate ampm-2 failed\");\r\n    assertEquals(dateTimeParser.parse(\"February 3, 2002 12:00:00.000\"), DateUtils.truncate(dateAmPm3, Calendar.AM_PM), \"truncate ampm-3 failed\");\r\n    assertEquals(dateTimeParser.parse(\"February 3, 2002 12:00:00.000\"), DateUtils.truncate(dateAmPm4, Calendar.AM_PM), \"truncate ampm-4 failed\");\r\n    // tests public static Date truncate(Object date, int field)\r\n    assertEquals(dateParser.parse(\"January 1, 2002\"), DateUtils.truncate((Object) date1, Calendar.YEAR), \"truncate year-1 failed\");\r\n    assertEquals(dateParser.parse(\"January 1, 2001\"), DateUtils.truncate((Object) date2, Calendar.YEAR), \"truncate year-2 failed\");\r\n    assertEquals(dateParser.parse(\"February 1, 2002\"), DateUtils.truncate((Object) date1, Calendar.MONTH), \"truncate month-1 failed\");\r\n    assertEquals(dateParser.parse(\"November 1, 2001\"), DateUtils.truncate((Object) date2, Calendar.MONTH), \"truncate month-2 failed\");\r\n    assertEquals(dateParser.parse(\"February 1, 2002\"), DateUtils.truncate((Object) date1, DateUtils.SEMI_MONTH), \"truncate semimonth-1 failed\");\r\n    assertEquals(dateParser.parse(\"November 16, 2001\"), DateUtils.truncate((Object) date2, DateUtils.SEMI_MONTH), \"truncate semimonth-2 failed\");\r\n    assertEquals(dateParser.parse(\"February 12, 2002\"), DateUtils.truncate((Object) date1, Calendar.DATE), \"truncate date-1 failed\");\r\n    assertEquals(dateParser.parse(\"November 18, 2001\"), DateUtils.truncate((Object) date2, Calendar.DATE), \"truncate date-2 failed\");\r\n    assertEquals(dateTimeParser.parse(\"February 12, 2002 12:00:00.000\"), DateUtils.truncate((Object) date1, Calendar.HOUR), \"truncate hour-1 failed\");\r\n    assertEquals(dateTimeParser.parse(\"November 18, 2001 1:00:00.000\"), DateUtils.truncate((Object) date2, Calendar.HOUR), \"truncate hour-2 failed\");\r\n    assertEquals(dateTimeParser.parse(\"February 12, 2002 12:34:00.000\"), DateUtils.truncate((Object) date1, Calendar.MINUTE), \"truncate minute-1 failed\");\r\n    assertEquals(dateTimeParser.parse(\"November 18, 2001 1:23:00.000\"), DateUtils.truncate((Object) date2, Calendar.MINUTE), \"truncate minute-2 failed\");\r\n    assertEquals(dateTimeParser.parse(\"February 12, 2002 12:34:56.000\"), DateUtils.truncate((Object) date1, Calendar.SECOND), \"truncate second-1 failed\");\r\n    assertEquals(dateTimeParser.parse(\"November 18, 2001 1:23:11.000\"), DateUtils.truncate((Object) date2, Calendar.SECOND), \"truncate second-2 failed\");\r\n    assertEquals(dateTimeParser.parse(\"February 3, 2002 00:00:00.000\"), DateUtils.truncate((Object) dateAmPm1, Calendar.AM_PM), \"truncate ampm-1 failed\");\r\n    assertEquals(dateTimeParser.parse(\"February 3, 2002 00:00:00.000\"), DateUtils.truncate((Object) dateAmPm2, Calendar.AM_PM), \"truncate ampm-2 failed\");\r\n    assertEquals(dateTimeParser.parse(\"February 3, 2002 12:00:00.000\"), DateUtils.truncate((Object) dateAmPm3, Calendar.AM_PM), \"truncate ampm-3 failed\");\r\n    assertEquals(dateTimeParser.parse(\"February 3, 2002 12:00:00.000\"), DateUtils.truncate((Object) dateAmPm4, Calendar.AM_PM), \"truncate ampm-4 failed\");\r\n    assertEquals(dateTimeParser.parse(\"February 12, 2002 12:34:56.000\"), DateUtils.truncate((Object) cal1, Calendar.SECOND), \"truncate calendar second-1 failed\");\r\n    assertEquals(dateTimeParser.parse(\"November 18, 2001 1:23:11.000\"), DateUtils.truncate((Object) cal2, Calendar.SECOND), \"truncate calendar second-2 failed\");\r\n    assertEquals(dateTimeParser.parse(\"February 3, 2002 00:00:00.000\"), DateUtils.truncate((Object) calAmPm1, Calendar.AM_PM), \"truncate ampm-1 failed\");\r\n    assertEquals(dateTimeParser.parse(\"February 3, 2002 00:00:00.000\"), DateUtils.truncate((Object) calAmPm2, Calendar.AM_PM), \"truncate ampm-2 failed\");\r\n    assertEquals(dateTimeParser.parse(\"February 3, 2002 12:00:00.000\"), DateUtils.truncate((Object) calAmPm3, Calendar.AM_PM), \"truncate ampm-3 failed\");\r\n    assertEquals(dateTimeParser.parse(\"February 3, 2002 12:00:00.000\"), DateUtils.truncate((Object) calAmPm4, Calendar.AM_PM), \"truncate ampm-4 failed\");\r\n    assertNullPointerException(() -> DateUtils.truncate((Date) null, Calendar.SECOND));\r\n    assertNullPointerException(() -> DateUtils.truncate((Calendar) null, Calendar.SECOND));\r\n    assertNullPointerException(() -> DateUtils.truncate((Object) null, Calendar.SECOND));\r\n    assertThrows(ClassCastException.class, () -> DateUtils.truncate(\"\", Calendar.SECOND));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\time\\DateUtilsTest.java",
  "methodName" : "testTruncate_Bugzilla_25560",
  "sourceCode" : "/**\r\n * Tests various values with the trunc method\r\n *\r\n * @throws Exception so we don't have to catch it\r\n */\r\n@Test\r\nvoid testTruncate_Bugzilla_25560() throws Exception {\r\n    // Fix for https://issues.apache.org/bugzilla/show_bug.cgi?id=25560\r\n    // Test truncate across beginning of daylight saving time\r\n    TimeZone.setDefault(TIME_ZONE_MET);\r\n    dateTimeParser.setTimeZone(TIME_ZONE_MET);\r\n    assertEquals(dateTimeParser.parse(\"March 30, 2003 00:00:00.000\"), DateUtils.truncate(date3, Calendar.DATE), \"truncate MET date across DST change-over\");\r\n    assertEquals(dateTimeParser.parse(\"March 30, 2003 00:00:00.000\"), DateUtils.truncate((Object) cal3, Calendar.DATE), \"truncate MET date across DST change-over\");\r\n    // Test truncate across end of daylight saving time\r\n    assertEquals(dateTimeParser.parse(\"October 26, 2003 00:00:00.000\"), DateUtils.truncate(date8, Calendar.DATE), \"truncate MET date across DST change-over\");\r\n    assertEquals(dateTimeParser.parse(\"October 26, 2003 00:00:00.000\"), DateUtils.truncate((Object) cal8, Calendar.DATE), \"truncate MET date across DST change-over\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\time\\DateUtilsTest.java",
  "methodName" : "testTruncate_Bugzilla_31395",
  "sourceCode" : "/**\r\n * Tests various values with the trunc method\r\n *\r\n * @throws Exception so we don't have to catch it\r\n */\r\n@Test\r\nvoid testTruncate_Bugzilla_31395() throws Exception {\r\n    // Bug 31395, large dates\r\n    // fyi: Sun Aug 17 07:12:55 CET 292278994 -- 807 millis\r\n    final Date endOfTime = new Date(Long.MAX_VALUE);\r\n    final GregorianCalendar endCal = new GregorianCalendar();\r\n    endCal.setTime(endOfTime);\r\n    assertThrows(ArithmeticException.class, () -> DateUtils.truncate(endCal, Calendar.DATE));\r\n    endCal.set(Calendar.YEAR, 280000001);\r\n    assertThrows(ArithmeticException.class, () -> DateUtils.truncate(endCal, Calendar.DATE));\r\n    endCal.set(Calendar.YEAR, 280000000);\r\n    final Calendar cal = DateUtils.truncate(endCal, Calendar.DATE);\r\n    assertEquals(0, cal.get(Calendar.HOUR));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\time\\DateUtilsTest.java",
  "methodName" : "testTruncateLang59",
  "sourceCode" : "/**\r\n * Tests for LANG-59\r\n *\r\n * see https://issues.apache.org/jira/browse/LANG-59\r\n */\r\n@Test\r\nvoid testTruncateLang59() {\r\n    // Set TimeZone to Mountain Time\r\n    final TimeZone denverZone = TimeZone.getTimeZone(\"America/Denver\");\r\n    TimeZone.setDefault(denverZone);\r\n    final DateFormat format = new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss.SSS XXX\");\r\n    format.setTimeZone(denverZone);\r\n    final Date oct31_01MDT = new Date(1099206000000L);\r\n    // - 1 hour\r\n    final Date oct31MDT = new Date(oct31_01MDT.getTime() - 3600000L);\r\n    // + 2 minutes\r\n    final Date oct31_01_02MDT = new Date(oct31_01MDT.getTime() + 120000L);\r\n    // + 3 seconds\r\n    final Date oct31_01_02_03MDT = new Date(oct31_01_02MDT.getTime() + 3000L);\r\n    // + 4 milliseconds\r\n    final Date oct31_01_02_03_04MDT = new Date(oct31_01_02_03MDT.getTime() + 4L);\r\n    assertEquals(\"2004-10-31 00:00:00.000 -06:00\", format.format(oct31MDT), \"Check 00:00:00.000\");\r\n    assertEquals(\"2004-10-31 01:00:00.000 -06:00\", format.format(oct31_01MDT), \"Check 01:00:00.000\");\r\n    assertEquals(\"2004-10-31 01:02:00.000 -06:00\", format.format(oct31_01_02MDT), \"Check 01:02:00.000\");\r\n    assertEquals(\"2004-10-31 01:02:03.000 -06:00\", format.format(oct31_01_02_03MDT), \"Check 01:02:03.000\");\r\n    assertEquals(\"2004-10-31 01:02:03.004 -06:00\", format.format(oct31_01_02_03_04MDT), \"Check 01:02:03.004\");\r\n    // Demonstrate Problem\r\n    final Calendar gval = Calendar.getInstance();\r\n    gval.setTime(new Date(oct31_01MDT.getTime()));\r\n    // set minutes to the same value\r\n    gval.set(Calendar.MINUTE, gval.get(Calendar.MINUTE));\r\n    assertEquals(gval.getTime().getTime(), oct31_01MDT.getTime() + 3600000L, \"Demonstrate Problem\");\r\n    // Test Truncate\r\n    assertEquals(oct31_01_02_03_04MDT, DateUtils.truncate(oct31_01_02_03_04MDT, Calendar.MILLISECOND), \"Truncate Calendar.MILLISECOND\");\r\n    assertEquals(oct31_01_02_03MDT, DateUtils.truncate(oct31_01_02_03_04MDT, Calendar.SECOND), \"Truncate Calendar.SECOND\");\r\n    assertEquals(oct31_01_02MDT, DateUtils.truncate(oct31_01_02_03_04MDT, Calendar.MINUTE), \"Truncate Calendar.MINUTE\");\r\n    assertEquals(oct31_01MDT, DateUtils.truncate(oct31_01_02_03_04MDT, Calendar.HOUR_OF_DAY), \"Truncate Calendar.HOUR_OF_DAY\");\r\n    assertEquals(oct31_01MDT, DateUtils.truncate(oct31_01_02_03_04MDT, Calendar.HOUR), \"Truncate Calendar.HOUR\");\r\n    assertEquals(oct31MDT, DateUtils.truncate(oct31_01_02_03_04MDT, Calendar.DATE), \"Truncate Calendar.DATE\");\r\n    // Test Round (down)\r\n    assertEquals(oct31_01_02_03_04MDT, DateUtils.round(oct31_01_02_03_04MDT, Calendar.MILLISECOND), \"Round Calendar.MILLISECOND\");\r\n    assertEquals(oct31_01_02_03MDT, DateUtils.round(oct31_01_02_03_04MDT, Calendar.SECOND), \"Round Calendar.SECOND\");\r\n    assertEquals(oct31_01_02MDT, DateUtils.round(oct31_01_02_03_04MDT, Calendar.MINUTE), \"Round Calendar.MINUTE\");\r\n    assertEquals(oct31_01MDT, DateUtils.round(oct31_01_02_03_04MDT, Calendar.HOUR_OF_DAY), \"Round Calendar.HOUR_OF_DAY\");\r\n    assertEquals(oct31_01MDT, DateUtils.round(oct31_01_02_03_04MDT, Calendar.HOUR), \"Round Calendar.HOUR\");\r\n    assertEquals(oct31MDT, DateUtils.round(oct31_01_02_03_04MDT, Calendar.DATE), \"Round Calendar.DATE\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\time\\DateUtilsTest.java",
  "methodName" : "testWeekIterator",
  "sourceCode" : "/**\r\n * Tests the calendar iterator for week ranges\r\n */\r\n@Test\r\nvoid testWeekIterator() {\r\n    final Calendar now = Calendar.getInstance();\r\n    for (int i = 0; i < 7; i++) {\r\n        final Calendar today = DateUtils.truncate(now, Calendar.DATE);\r\n        final Calendar sunday = DateUtils.truncate(now, Calendar.DATE);\r\n        sunday.add(Calendar.DATE, 1 - sunday.get(Calendar.DAY_OF_WEEK));\r\n        final Calendar monday = DateUtils.truncate(now, Calendar.DATE);\r\n        if (monday.get(Calendar.DAY_OF_WEEK) == 1) {\r\n            // This is sunday... roll back 6 days\r\n            monday.add(Calendar.DATE, -6);\r\n        } else {\r\n            monday.add(Calendar.DATE, 2 - monday.get(Calendar.DAY_OF_WEEK));\r\n        }\r\n        final Calendar centered = DateUtils.truncate(now, Calendar.DATE);\r\n        centered.add(Calendar.DATE, -3);\r\n        Iterator<?> it = DateUtils.iterator(now, DateUtils.RANGE_WEEK_SUNDAY);\r\n        assertWeekIterator(it, sunday);\r\n        it = DateUtils.iterator(now, DateUtils.RANGE_WEEK_MONDAY);\r\n        assertWeekIterator(it, monday);\r\n        it = DateUtils.iterator(now, DateUtils.RANGE_WEEK_RELATIVE);\r\n        assertWeekIterator(it, today);\r\n        it = DateUtils.iterator(now, DateUtils.RANGE_WEEK_CENTER);\r\n        assertWeekIterator(it, centered);\r\n        it = DateUtils.iterator((Object) now, DateUtils.RANGE_WEEK_CENTER);\r\n        assertWeekIterator(it, centered);\r\n        final Iterator<?> it2 = DateUtils.iterator((Object) now.getTime(), DateUtils.RANGE_WEEK_CENTER);\r\n        assertWeekIterator(it2, centered);\r\n        assertThrows(NoSuchElementException.class, it2::next);\r\n        final Iterator<?> it3 = DateUtils.iterator(now, DateUtils.RANGE_WEEK_CENTER);\r\n        it3.next();\r\n        assertThrows(UnsupportedOperationException.class, it3::remove);\r\n        now.add(Calendar.DATE, 1);\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\time\\DurationFormatUtilsTest.java",
  "methodName" : "testAlternatingLiteralOptionals",
  "sourceCode" : "@Test\r\nvoid testAlternatingLiteralOptionals() {\r\n    final String format = \"['d'dH'h'][m'm']['s's]['ms'S]\";\r\n    assertEquals(\"d1\", DurationFormatUtils.formatDuration(Duration.ofDays(1).toMillis(), format));\r\n    assertEquals(\"1h\", DurationFormatUtils.formatDuration(Duration.ofHours(1).toMillis(), format));\r\n    assertEquals(\"1m\", DurationFormatUtils.formatDuration(Duration.ofMinutes(1).toMillis(), format));\r\n    assertEquals(\"s1\", DurationFormatUtils.formatDuration(Duration.ofSeconds(1).toMillis(), format));\r\n    assertEquals(\"ms001\", DurationFormatUtils.formatDuration(Duration.ofMillis(1).toMillis(), format));\r\n    assertEquals(\"d1s1\", DurationFormatUtils.formatDuration(Duration.ofDays(1).plusSeconds(1).toMillis(), format));\r\n    assertEquals(\"d11h\", DurationFormatUtils.formatDuration(Duration.ofDays(1).plusHours(1).toMillis(), format));\r\n    assertEquals(\"d11h1m\", DurationFormatUtils.formatDuration(Duration.ofDays(1).plusHours(1).plusMinutes(1).toMillis(), format));\r\n    assertEquals(\"d11h1ms1\", DurationFormatUtils.formatDuration(Duration.ofDays(1).plusHours(1).plusMinutes(1).plusSeconds(1).toMillis(), format));\r\n    assertEquals(\"d11h1ms1ms001\", DurationFormatUtils.formatDuration(Duration.ofDays(1).plusHours(1).plusMinutes(1).plusSeconds(1).plusMillis(1).toMillis(), format));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\time\\DurationFormatUtilsTest.java",
  "methodName" : "testBugzilla38401",
  "sourceCode" : "/**\r\n * See https://issues.apache.org/bugzilla/show_bug.cgi?id=38401\r\n */\r\n@Test\r\nvoid testBugzilla38401() {\r\n    assertEqualDuration(\"0000/00/30 16:00:00 000\", new int[] { 2006, 0, 26, 18, 47, 34 }, new int[] { 2006, 1, 26, 10, 47, 34 }, \"yyyy/MM/dd HH:mm:ss SSS\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\time\\DurationFormatUtilsTest.java",
  "methodName" : "testConstructor",
  "sourceCode" : "@SuppressWarnings(\"deprecation\")\r\n@Test\r\nvoid testConstructor() {\r\n    assertNotNull(new DurationFormatUtils());\r\n    final Constructor<?>[] cons = DurationFormatUtils.class.getDeclaredConstructors();\r\n    assertEquals(1, cons.length);\r\n    assertTrue(Modifier.isPublic(cons[0].getModifiers()));\r\n    assertTrue(Modifier.isPublic(DurationFormatUtils.class.getModifiers()));\r\n    assertFalse(Modifier.isFinal(DurationFormatUtils.class.getModifiers()));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\time\\DurationFormatUtilsTest.java",
  "methodName" : "testDurationsByBruteForce",
  "sourceCode" : "@Test\r\nvoid testDurationsByBruteForce() {\r\n    bruteForce(2006, 0, 1, \"d\", Calendar.DAY_OF_MONTH);\r\n    bruteForce(2006, 0, 2, \"d\", Calendar.DAY_OF_MONTH);\r\n    bruteForce(2007, 1, 2, \"d\", Calendar.DAY_OF_MONTH);\r\n    bruteForce(2004, 1, 29, \"d\", Calendar.DAY_OF_MONTH);\r\n    bruteForce(1996, 1, 29, \"d\", Calendar.DAY_OF_MONTH);\r\n    // tests for 48 years\r\n    bruteForce(1969, 1, 28, \"M\", Calendar.MONTH);\r\n    //bruteForce(1996, 1, 29, \"M\", Calendar.MONTH);  // this will fail\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\time\\DurationFormatUtilsTest.java",
  "methodName" : "testEdgeDurations",
  "sourceCode" : "/**\r\n * Attempting to test edge cases in DurationFormatUtils.formatPeriod.\r\n */\r\n@Test\r\n@DefaultTimeZone(TimeZones.GMT_ID)\r\nvoid testEdgeDurations() {\r\n    // This test case must use a time zone without DST\r\n    TimeZone.setDefault(FastTimeZone.getGmtTimeZone());\r\n    assertEqualDuration(\"01\", new int[] { 2006, 0, 15, 0, 0, 0 }, new int[] { 2006, 2, 10, 0, 0, 0 }, \"MM\");\r\n    assertEqualDuration(\"12\", new int[] { 2005, 0, 15, 0, 0, 0 }, new int[] { 2006, 0, 15, 0, 0, 0 }, \"MM\");\r\n    assertEqualDuration(\"12\", new int[] { 2005, 0, 15, 0, 0, 0 }, new int[] { 2006, 0, 16, 0, 0, 0 }, \"MM\");\r\n    assertEqualDuration(\"11\", new int[] { 2005, 0, 15, 0, 0, 0 }, new int[] { 2006, 0, 14, 0, 0, 0 }, \"MM\");\r\n    assertEqualDuration(\"01 26\", new int[] { 2006, 0, 15, 0, 0, 0 }, new int[] { 2006, 2, 10, 0, 0, 0 }, \"MM dd\");\r\n    assertEqualDuration(\"54\", new int[] { 2006, 0, 15, 0, 0, 0 }, new int[] { 2006, 2, 10, 0, 0, 0 }, \"dd\");\r\n    assertEqualDuration(\"09 12\", new int[] { 2006, 1, 20, 0, 0, 0 }, new int[] { 2006, 11, 4, 0, 0, 0 }, \"MM dd\");\r\n    assertEqualDuration(\"287\", new int[] { 2006, 1, 20, 0, 0, 0 }, new int[] { 2006, 11, 4, 0, 0, 0 }, \"dd\");\r\n    assertEqualDuration(\"11 30\", new int[] { 2006, 0, 2, 0, 0, 0 }, new int[] { 2007, 0, 1, 0, 0, 0 }, \"MM dd\");\r\n    assertEqualDuration(\"364\", new int[] { 2006, 0, 2, 0, 0, 0 }, new int[] { 2007, 0, 1, 0, 0, 0 }, \"dd\");\r\n    assertEqualDuration(\"12 00\", new int[] { 2006, 0, 1, 0, 0, 0 }, new int[] { 2007, 0, 1, 0, 0, 0 }, \"MM dd\");\r\n    assertEqualDuration(\"365\", new int[] { 2006, 0, 1, 0, 0, 0 }, new int[] { 2007, 0, 1, 0, 0, 0 }, \"dd\");\r\n    assertEqualDuration(\"31\", new int[] { 2006, 0, 1, 0, 0, 0 }, new int[] { 2006, 1, 1, 0, 0, 0 }, \"dd\");\r\n    assertEqualDuration(\"92\", new int[] { 2005, 9, 1, 0, 0, 0 }, new int[] { 2006, 0, 1, 0, 0, 0 }, \"dd\");\r\n    assertEqualDuration(\"77\", new int[] { 2005, 9, 16, 0, 0, 0 }, new int[] { 2006, 0, 1, 0, 0, 0 }, \"dd\");\r\n    // test month larger in start than end\r\n    assertEqualDuration(\"136\", new int[] { 2005, 9, 16, 0, 0, 0 }, new int[] { 2006, 2, 1, 0, 0, 0 }, \"dd\");\r\n    // test when start in leap year\r\n    assertEqualDuration(\"136\", new int[] { 2004, 9, 16, 0, 0, 0 }, new int[] { 2005, 2, 1, 0, 0, 0 }, \"dd\");\r\n    // test when end in leap year\r\n    assertEqualDuration(\"137\", new int[] { 2003, 9, 16, 0, 0, 0 }, new int[] { 2004, 2, 1, 0, 0, 0 }, \"dd\");\r\n    // test when end in leap year but less than end of feb\r\n    assertEqualDuration(\"135\", new int[] { 2003, 9, 16, 0, 0, 0 }, new int[] { 2004, 1, 28, 0, 0, 0 }, \"dd\");\r\n    assertEqualDuration(\"364\", new int[] { 2007, 0, 2, 0, 0, 0 }, new int[] { 2008, 0, 1, 0, 0, 0 }, \"dd\");\r\n    assertEqualDuration(\"729\", new int[] { 2006, 0, 2, 0, 0, 0 }, new int[] { 2008, 0, 1, 0, 0, 0 }, \"dd\");\r\n    assertEqualDuration(\"365\", new int[] { 2007, 2, 2, 0, 0, 0 }, new int[] { 2008, 2, 1, 0, 0, 0 }, \"dd\");\r\n    assertEqualDuration(\"333\", new int[] { 2007, 1, 2, 0, 0, 0 }, new int[] { 2008, 0, 1, 0, 0, 0 }, \"dd\");\r\n    assertEqualDuration(\"28\", new int[] { 2008, 1, 2, 0, 0, 0 }, new int[] { 2008, 2, 1, 0, 0, 0 }, \"dd\");\r\n    assertEqualDuration(\"393\", new int[] { 2007, 1, 2, 0, 0, 0 }, new int[] { 2008, 2, 1, 0, 0, 0 }, \"dd\");\r\n    assertEqualDuration(\"369\", new int[] { 2004, 0, 29, 0, 0, 0 }, new int[] { 2005, 1, 1, 0, 0, 0 }, \"dd\");\r\n    assertEqualDuration(\"338\", new int[] { 2004, 1, 29, 0, 0, 0 }, new int[] { 2005, 1, 1, 0, 0, 0 }, \"dd\");\r\n    assertEqualDuration(\"28\", new int[] { 2004, 2, 8, 0, 0, 0 }, new int[] { 2004, 3, 5, 0, 0, 0 }, \"dd\");\r\n    assertEqualDuration(\"48\", new int[] { 1992, 1, 29, 0, 0, 0 }, new int[] { 1996, 1, 29, 0, 0, 0 }, \"M\");\r\n    // this seems odd - and will fail if I throw it in as a brute force\r\n    // below as it expects the answer to be 12. It's a tricky edge case\r\n    assertEqualDuration(\"11\", new int[] { 1996, 1, 29, 0, 0, 0 }, new int[] { 1997, 1, 28, 0, 0, 0 }, \"M\");\r\n    // again - this seems odd\r\n    assertEqualDuration(\"11 28\", new int[] { 1996, 1, 29, 0, 0, 0 }, new int[] { 1997, 1, 28, 0, 0, 0 }, \"M d\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\time\\DurationFormatUtilsTest.java",
  "methodName" : "testEmptyOptionals",
  "sourceCode" : "@Test\r\nvoid testEmptyOptionals() {\r\n    assertEquals(\"\", DurationFormatUtils.formatDuration(0L, \"[d'd'][H'h'][m'm'][s's']\"));\r\n    assertEquals(\"\", DurationFormatUtils.formatDuration(0L, \"['d''h''m''s's]\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\time\\DurationFormatUtilsTest.java",
  "methodName" : "testFormatDuration",
  "sourceCode" : "@Test\r\nvoid testFormatDuration() {\r\n    long duration = 0;\r\n    assertEquals(\"0\", DurationFormatUtils.formatDuration(duration, \"y\"));\r\n    assertEquals(\"0\", DurationFormatUtils.formatDuration(duration, \"M\"));\r\n    assertEquals(\"0\", DurationFormatUtils.formatDuration(duration, \"d\"));\r\n    assertEquals(\"0\", DurationFormatUtils.formatDuration(duration, \"H\"));\r\n    assertEquals(\"0\", DurationFormatUtils.formatDuration(duration, \"m\"));\r\n    assertEquals(\"0\", DurationFormatUtils.formatDuration(duration, \"s\"));\r\n    assertEquals(\"0\", DurationFormatUtils.formatDuration(duration, \"S\"));\r\n    assertEquals(\"0000\", DurationFormatUtils.formatDuration(duration, \"SSSS\"));\r\n    assertEquals(\"0000\", DurationFormatUtils.formatDuration(duration, \"yyyy\"));\r\n    assertEquals(\"0000\", DurationFormatUtils.formatDuration(duration, \"yyMM\"));\r\n    duration = 60 * 1000;\r\n    assertEquals(\"0\", DurationFormatUtils.formatDuration(duration, \"y\"));\r\n    assertEquals(\"0\", DurationFormatUtils.formatDuration(duration, \"M\"));\r\n    assertEquals(\"0\", DurationFormatUtils.formatDuration(duration, \"d\"));\r\n    assertEquals(\"0\", DurationFormatUtils.formatDuration(duration, \"H\"));\r\n    assertEquals(\"1\", DurationFormatUtils.formatDuration(duration, \"m\"));\r\n    assertEquals(\"60\", DurationFormatUtils.formatDuration(duration, \"s\"));\r\n    assertEquals(\"60000\", DurationFormatUtils.formatDuration(duration, \"S\"));\r\n    assertEquals(\"01:00\", DurationFormatUtils.formatDuration(duration, \"mm:ss\"));\r\n    final Calendar base = Calendar.getInstance();\r\n    base.set(2000, Calendar.JANUARY, 1, 0, 0, 0);\r\n    base.set(Calendar.MILLISECOND, 0);\r\n    final Calendar cal = Calendar.getInstance();\r\n    cal.set(2003, Calendar.FEBRUARY, 1, 0, 0, 0);\r\n    cal.set(Calendar.MILLISECOND, 0);\r\n    // duration from 2000-01-01 to cal\r\n    duration = cal.getTime().getTime() - base.getTime().getTime();\r\n    // don't use 1970 in test as time zones were less reliable in 1970 than now\r\n    // remember that duration formatting ignores time zones, working on strict hour lengths\r\n    final int days = 366 + 365 + 365 + 31;\r\n    assertEquals(\"0 0 \" + days, DurationFormatUtils.formatDuration(duration, \"y M d\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\time\\DurationFormatUtilsTest.java",
  "methodName" : "testFormatDurationHMS",
  "sourceCode" : "@Test\r\nvoid testFormatDurationHMS() {\r\n    long time = 0;\r\n    assertEquals(\"00:00:00.000\", DurationFormatUtils.formatDurationHMS(time));\r\n    time = 1;\r\n    assertEquals(\"00:00:00.001\", DurationFormatUtils.formatDurationHMS(time));\r\n    time = 15;\r\n    assertEquals(\"00:00:00.015\", DurationFormatUtils.formatDurationHMS(time));\r\n    time = 165;\r\n    assertEquals(\"00:00:00.165\", DurationFormatUtils.formatDurationHMS(time));\r\n    time = 1675;\r\n    assertEquals(\"00:00:01.675\", DurationFormatUtils.formatDurationHMS(time));\r\n    time = 13465;\r\n    assertEquals(\"00:00:13.465\", DurationFormatUtils.formatDurationHMS(time));\r\n    time = 72789;\r\n    assertEquals(\"00:01:12.789\", DurationFormatUtils.formatDurationHMS(time));\r\n    time = 12789 + 32 * 60000;\r\n    assertEquals(\"00:32:12.789\", DurationFormatUtils.formatDurationHMS(time));\r\n    time = 12789 + 62 * 60000;\r\n    assertEquals(\"01:02:12.789\", DurationFormatUtils.formatDurationHMS(time));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\time\\DurationFormatUtilsTest.java",
  "methodName" : "testFormatDurationISO",
  "sourceCode" : "@Test\r\nvoid testFormatDurationISO() {\r\n    assertEquals(\"P0Y0M0DT0H0M0.000S\", DurationFormatUtils.formatDurationISO(0L));\r\n    assertEquals(\"P0Y0M0DT0H0M0.001S\", DurationFormatUtils.formatDurationISO(1L));\r\n    assertEquals(\"P0Y0M0DT0H0M0.010S\", DurationFormatUtils.formatDurationISO(10L));\r\n    assertEquals(\"P0Y0M0DT0H0M0.100S\", DurationFormatUtils.formatDurationISO(100L));\r\n    assertEquals(\"P0Y0M0DT0H1M15.321S\", DurationFormatUtils.formatDurationISO(75321L));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\time\\DurationFormatUtilsTest.java",
  "methodName" : "testFormatDurationPluralWords",
  "sourceCode" : "/**\r\n * Tests that \"1 &lt;unit&gt;s\" gets converted to \"1 &lt;unit&gt;\" but that \"11 &lt;unit&gt;s\" is left alone.\r\n */\r\n@Test\r\nvoid testFormatDurationPluralWords() {\r\n    final long oneSecond = 1000;\r\n    final long oneMinute = oneSecond * 60;\r\n    final long oneHour = oneMinute * 60;\r\n    final long oneDay = oneHour * 24;\r\n    String text;\r\n    text = DurationFormatUtils.formatDurationWords(oneSecond, false, false);\r\n    assertEquals(\"0 days 0 hours 0 minutes 1 second\", text);\r\n    text = DurationFormatUtils.formatDurationWords(oneSecond * 2, false, false);\r\n    assertEquals(\"0 days 0 hours 0 minutes 2 seconds\", text);\r\n    text = DurationFormatUtils.formatDurationWords(oneSecond * 11, false, false);\r\n    assertEquals(\"0 days 0 hours 0 minutes 11 seconds\", text);\r\n    text = DurationFormatUtils.formatDurationWords(oneMinute, false, false);\r\n    assertEquals(\"0 days 0 hours 1 minute 0 seconds\", text);\r\n    text = DurationFormatUtils.formatDurationWords(oneMinute * 2, false, false);\r\n    assertEquals(\"0 days 0 hours 2 minutes 0 seconds\", text);\r\n    text = DurationFormatUtils.formatDurationWords(oneMinute * 11, false, false);\r\n    assertEquals(\"0 days 0 hours 11 minutes 0 seconds\", text);\r\n    text = DurationFormatUtils.formatDurationWords(oneMinute + oneSecond, false, false);\r\n    assertEquals(\"0 days 0 hours 1 minute 1 second\", text);\r\n    text = DurationFormatUtils.formatDurationWords(oneHour, false, false);\r\n    assertEquals(\"0 days 1 hour 0 minutes 0 seconds\", text);\r\n    text = DurationFormatUtils.formatDurationWords(oneHour * 2, false, false);\r\n    assertEquals(\"0 days 2 hours 0 minutes 0 seconds\", text);\r\n    text = DurationFormatUtils.formatDurationWords(oneHour * 11, false, false);\r\n    assertEquals(\"0 days 11 hours 0 minutes 0 seconds\", text);\r\n    text = DurationFormatUtils.formatDurationWords(oneHour + oneMinute + oneSecond, false, false);\r\n    assertEquals(\"0 days 1 hour 1 minute 1 second\", text);\r\n    text = DurationFormatUtils.formatDurationWords(oneDay, false, false);\r\n    assertEquals(\"1 day 0 hours 0 minutes 0 seconds\", text);\r\n    text = DurationFormatUtils.formatDurationWords(oneDay * 2, false, false);\r\n    assertEquals(\"2 days 0 hours 0 minutes 0 seconds\", text);\r\n    text = DurationFormatUtils.formatDurationWords(oneDay * 11, false, false);\r\n    assertEquals(\"11 days 0 hours 0 minutes 0 seconds\", text);\r\n    text = DurationFormatUtils.formatDurationWords(oneDay + oneHour + oneMinute + oneSecond, false, false);\r\n    assertEquals(\"1 day 1 hour 1 minute 1 second\", text);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\time\\DurationFormatUtilsTest.java",
  "methodName" : "testFormatDurationWords",
  "sourceCode" : "@Test\r\nvoid testFormatDurationWords() {\r\n    String text;\r\n    text = DurationFormatUtils.formatDurationWords(50 * 1000, true, false);\r\n    assertEquals(\"50 seconds\", text);\r\n    text = DurationFormatUtils.formatDurationWords(65 * 1000, true, false);\r\n    assertEquals(\"1 minute 5 seconds\", text);\r\n    text = DurationFormatUtils.formatDurationWords(120 * 1000, true, false);\r\n    assertEquals(\"2 minutes 0 seconds\", text);\r\n    text = DurationFormatUtils.formatDurationWords(121 * 1000, true, false);\r\n    assertEquals(\"2 minutes 1 second\", text);\r\n    text = DurationFormatUtils.formatDurationWords(72 * 60 * 1000, true, false);\r\n    assertEquals(\"1 hour 12 minutes 0 seconds\", text);\r\n    text = DurationFormatUtils.formatDurationWords(24 * 60 * 60 * 1000, true, false);\r\n    assertEquals(\"1 day 0 hours 0 minutes 0 seconds\", text);\r\n    text = DurationFormatUtils.formatDurationWords(50 * 1000, true, true);\r\n    assertEquals(\"50 seconds\", text);\r\n    text = DurationFormatUtils.formatDurationWords(65 * 1000, true, true);\r\n    assertEquals(\"1 minute 5 seconds\", text);\r\n    text = DurationFormatUtils.formatDurationWords(120 * 1000, true, true);\r\n    assertEquals(\"2 minutes\", text);\r\n    text = DurationFormatUtils.formatDurationWords(121 * 1000, true, true);\r\n    assertEquals(\"2 minutes 1 second\", text);\r\n    text = DurationFormatUtils.formatDurationWords(72 * 60 * 1000, true, true);\r\n    assertEquals(\"1 hour 12 minutes\", text);\r\n    text = DurationFormatUtils.formatDurationWords(24 * 60 * 60 * 1000, true, true);\r\n    assertEquals(\"1 day\", text);\r\n    text = DurationFormatUtils.formatDurationWords(50 * 1000, false, true);\r\n    assertEquals(\"0 days 0 hours 0 minutes 50 seconds\", text);\r\n    text = DurationFormatUtils.formatDurationWords(65 * 1000, false, true);\r\n    assertEquals(\"0 days 0 hours 1 minute 5 seconds\", text);\r\n    text = DurationFormatUtils.formatDurationWords(120 * 1000, false, true);\r\n    assertEquals(\"0 days 0 hours 2 minutes\", text);\r\n    text = DurationFormatUtils.formatDurationWords(121 * 1000, false, true);\r\n    assertEquals(\"0 days 0 hours 2 minutes 1 second\", text);\r\n    text = DurationFormatUtils.formatDurationWords(72 * 60 * 1000, false, true);\r\n    assertEquals(\"0 days 1 hour 12 minutes\", text);\r\n    text = DurationFormatUtils.formatDurationWords(24 * 60 * 60 * 1000, false, true);\r\n    assertEquals(\"1 day\", text);\r\n    text = DurationFormatUtils.formatDurationWords(50 * 1000, false, false);\r\n    assertEquals(\"0 days 0 hours 0 minutes 50 seconds\", text);\r\n    text = DurationFormatUtils.formatDurationWords(65 * 1000, false, false);\r\n    assertEquals(\"0 days 0 hours 1 minute 5 seconds\", text);\r\n    text = DurationFormatUtils.formatDurationWords(120 * 1000, false, false);\r\n    assertEquals(\"0 days 0 hours 2 minutes 0 seconds\", text);\r\n    text = DurationFormatUtils.formatDurationWords(121 * 1000, false, false);\r\n    assertEquals(\"0 days 0 hours 2 minutes 1 second\", text);\r\n    text = DurationFormatUtils.formatDurationWords(72 * 60 * 1000, false, false);\r\n    assertEquals(\"0 days 1 hour 12 minutes 0 seconds\", text);\r\n    text = DurationFormatUtils.formatDurationWords(24 * 60 * 60 * 1000 + 72 * 60 * 1000, false, false);\r\n    assertEquals(\"1 day 1 hour 12 minutes 0 seconds\", text);\r\n    text = DurationFormatUtils.formatDurationWords(2 * 24 * 60 * 60 * 1000 + 72 * 60 * 1000, false, false);\r\n    assertEquals(\"2 days 1 hour 12 minutes 0 seconds\", text);\r\n    for (int i = 2; i < 31; i++) {\r\n        text = DurationFormatUtils.formatDurationWords(i * 24 * 60 * 60 * 1000L, false, false);\r\n        assertEquals(i + \" days 0 hours 0 minutes 0 seconds\", text);\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\time\\DurationFormatUtilsTest.java",
  "methodName" : "testFormatNegativeDuration",
  "sourceCode" : "@Test\r\nvoid testFormatNegativeDuration() {\r\n    assertIllegalArgumentException(() -> DurationFormatUtils.formatDuration(-5000, \"S\", true));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\time\\DurationFormatUtilsTest.java",
  "methodName" : "testFormatNegativeDurationHMS",
  "sourceCode" : "@Test\r\nvoid testFormatNegativeDurationHMS() {\r\n    assertIllegalArgumentException(() -> DurationFormatUtils.formatDurationHMS(-5000));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\time\\DurationFormatUtilsTest.java",
  "methodName" : "testFormatNegativeDurationISO",
  "sourceCode" : "@Test\r\nvoid testFormatNegativeDurationISO() {\r\n    assertIllegalArgumentException(() -> DurationFormatUtils.formatDurationISO(-5000));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\time\\DurationFormatUtilsTest.java",
  "methodName" : "testFormatNegativeDurationWords",
  "sourceCode" : "@Test\r\nvoid testFormatNegativeDurationWords() {\r\n    assertIllegalArgumentException(() -> DurationFormatUtils.formatDurationWords(-5000, true, true));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\time\\DurationFormatUtilsTest.java",
  "methodName" : "testFormatPeriod",
  "sourceCode" : "@Test\r\nvoid testFormatPeriod() {\r\n    final Calendar cal1970 = Calendar.getInstance();\r\n    cal1970.set(1970, Calendar.JANUARY, 1, 0, 0, 0);\r\n    cal1970.set(Calendar.MILLISECOND, 0);\r\n    final long time1970 = cal1970.getTime().getTime();\r\n    assertEquals(\"0\", DurationFormatUtils.formatPeriod(time1970, time1970, \"y\"));\r\n    assertEquals(\"0\", DurationFormatUtils.formatPeriod(time1970, time1970, \"M\"));\r\n    assertEquals(\"0\", DurationFormatUtils.formatPeriod(time1970, time1970, \"d\"));\r\n    assertEquals(\"0\", DurationFormatUtils.formatPeriod(time1970, time1970, \"H\"));\r\n    assertEquals(\"0\", DurationFormatUtils.formatPeriod(time1970, time1970, \"m\"));\r\n    assertEquals(\"0\", DurationFormatUtils.formatPeriod(time1970, time1970, \"s\"));\r\n    assertEquals(\"0\", DurationFormatUtils.formatPeriod(time1970, time1970, \"S\"));\r\n    assertEquals(\"0000\", DurationFormatUtils.formatPeriod(time1970, time1970, \"SSSS\"));\r\n    assertEquals(\"0000\", DurationFormatUtils.formatPeriod(time1970, time1970, \"yyyy\"));\r\n    assertEquals(\"0000\", DurationFormatUtils.formatPeriod(time1970, time1970, \"yyMM\"));\r\n    long time = time1970 + 60 * 1000;\r\n    assertEquals(\"0\", DurationFormatUtils.formatPeriod(time1970, time, \"y\"));\r\n    assertEquals(\"0\", DurationFormatUtils.formatPeriod(time1970, time, \"M\"));\r\n    assertEquals(\"0\", DurationFormatUtils.formatPeriod(time1970, time, \"d\"));\r\n    assertEquals(\"0\", DurationFormatUtils.formatPeriod(time1970, time, \"H\"));\r\n    assertEquals(\"1\", DurationFormatUtils.formatPeriod(time1970, time, \"m\"));\r\n    assertEquals(\"60\", DurationFormatUtils.formatPeriod(time1970, time, \"s\"));\r\n    assertEquals(\"60000\", DurationFormatUtils.formatPeriod(time1970, time, \"S\"));\r\n    assertEquals(\"01:00\", DurationFormatUtils.formatPeriod(time1970, time, \"mm:ss\"));\r\n    final Calendar cal = Calendar.getInstance();\r\n    cal.set(1973, Calendar.JULY, 1, 0, 0, 0);\r\n    cal.set(Calendar.MILLISECOND, 0);\r\n    time = cal.getTime().getTime();\r\n    assertEquals(\"36\", DurationFormatUtils.formatPeriod(time1970, time, \"yM\"));\r\n    assertEquals(\"3 years 6 months\", DurationFormatUtils.formatPeriod(time1970, time, \"y' years 'M' months'\"));\r\n    assertEquals(\"03/06\", DurationFormatUtils.formatPeriod(time1970, time, \"yy/MM\"));\r\n    cal.set(1973, Calendar.NOVEMBER, 1, 0, 0, 0);\r\n    cal.set(Calendar.MILLISECOND, 0);\r\n    time = cal.getTime().getTime();\r\n    assertEquals(\"310\", DurationFormatUtils.formatPeriod(time1970, time, \"yM\"));\r\n    assertEquals(\"3 years 10 months\", DurationFormatUtils.formatPeriod(time1970, time, \"y' years 'M' months'\"));\r\n    assertEquals(\"03/10\", DurationFormatUtils.formatPeriod(time1970, time, \"yy/MM\"));\r\n    cal.set(1974, Calendar.JANUARY, 1, 0, 0, 0);\r\n    cal.set(Calendar.MILLISECOND, 0);\r\n    time = cal.getTime().getTime();\r\n    assertEquals(\"40\", DurationFormatUtils.formatPeriod(time1970, time, \"yM\"));\r\n    assertEquals(\"4 years 0 months\", DurationFormatUtils.formatPeriod(time1970, time, \"y' ''years' M 'months'\"));\r\n    assertEquals(\"4 years 0 months\", DurationFormatUtils.formatPeriod(time1970, time, \"y' years 'M' months'\"));\r\n    assertEquals(\"4years 0months\", DurationFormatUtils.formatPeriod(time1970, time, \"y'years 'M'months'\"));\r\n    assertEquals(\"04/00\", DurationFormatUtils.formatPeriod(time1970, time, \"yy/MM\"));\r\n    assertEquals(\"48\", DurationFormatUtils.formatPeriod(time1970, time, \"M\"));\r\n    assertEquals(\"48\", DurationFormatUtils.formatPeriod(time1970, time, \"MM\"));\r\n    assertEquals(\"048\", DurationFormatUtils.formatPeriod(time1970, time, \"MMM\"));\r\n    // no date in result\r\n    assertEquals(\"hello\", DurationFormatUtils.formatPeriod(time1970, time, \"'hello'\"));\r\n    assertEquals(\"helloworld\", DurationFormatUtils.formatPeriod(time1970, time, \"'hello''world'\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\time\\DurationFormatUtilsTest.java",
  "methodName" : "testFormatPeriodeStartGreaterEnd",
  "sourceCode" : "@Test\r\nvoid testFormatPeriodeStartGreaterEnd() {\r\n    assertIllegalArgumentException(() -> DurationFormatUtils.formatPeriod(5000, 2500, \"yy/MM\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\time\\DurationFormatUtilsTest.java",
  "methodName" : "testFormatPeriodISO",
  "sourceCode" : "@SuppressWarnings(\"deprecation\")\r\n@Test\r\nvoid testFormatPeriodISO() {\r\n    final TimeZone timeZone = TimeZone.getTimeZone(\"GMT-3\");\r\n    final Calendar base = Calendar.getInstance(timeZone);\r\n    base.set(1970, Calendar.JANUARY, 1, 0, 0, 0);\r\n    base.set(Calendar.MILLISECOND, 0);\r\n    final Calendar cal = Calendar.getInstance(timeZone);\r\n    cal.set(2002, Calendar.FEBRUARY, 23, 9, 11, 12);\r\n    cal.set(Calendar.MILLISECOND, 1);\r\n    String text;\r\n    // repeat a test from testDateTimeISO to compare extended and not extended.\r\n    text = DateFormatUtils.format(cal, DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.getPattern(), timeZone);\r\n    assertEquals(\"2002-02-23T09:11:12-03:00\", text);\r\n    // test fixture is the same as above, but now with extended format.\r\n    text = DurationFormatUtils.formatPeriod(base.getTime().getTime(), cal.getTime().getTime(), DurationFormatUtils.ISO_EXTENDED_FORMAT_PATTERN, false, timeZone);\r\n    assertEquals(\"P32Y1M22DT9H11M12.001S\", text);\r\n    // test fixture from example in https://www.w3.org/TR/xmlschema-2/#duration\r\n    cal.set(1971, Calendar.FEBRUARY, 3, 10, 30, 0);\r\n    cal.set(Calendar.MILLISECOND, 0);\r\n    text = DurationFormatUtils.formatPeriod(base.getTime().getTime(), cal.getTime().getTime(), DurationFormatUtils.ISO_EXTENDED_FORMAT_PATTERN, false, timeZone);\r\n    assertEquals(\"P1Y1M2DT10H30M0.000S\", text);\r\n    // want a way to say 'don't print the seconds in format()' or other fields for that matter:\r\n    // assertEquals(\"P1Y2M3DT10H30M\", text);\r\n    //\r\n    // TODO Jacoco shows missing coverage for internal negative days\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\time\\DurationFormatUtilsTest.java",
  "methodName" : "testFormatPeriodISOMethod",
  "sourceCode" : "@Test\r\nvoid testFormatPeriodISOMethod() {\r\n    assertEquals(\"P0Y0M0DT0H0M0.000S\", DurationFormatUtils.formatPeriodISO(0L, 0L));\r\n    assertEquals(\"P0Y0M0DT0H0M1.000S\", DurationFormatUtils.formatPeriodISO(0L, 1000L));\r\n    assertEquals(\"P0Y0M0DT0H1M1.000S\", DurationFormatUtils.formatPeriodISO(0L, 61000L));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\time\\DurationFormatUtilsTest.java",
  "methodName" : "testFormatPeriodISOStartGreaterEnd",
  "sourceCode" : "@Test\r\nvoid testFormatPeriodISOStartGreaterEnd() {\r\n    assertIllegalArgumentException(() -> DurationFormatUtils.formatPeriodISO(5000, 2000));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\time\\DurationFormatUtilsTest.java",
  "methodName" : "testFourYears",
  "sourceCode" : "/**\r\n * Takes 8 seconds to run.\r\n */\r\n@Test\r\nvoid testFourYears() {\r\n    final Calendar c = Calendar.getInstance();\r\n    c.set(2004, 0, 1, 0, 0, 0);\r\n    for (int i = 0; i < FOUR_YEARS; i++) {\r\n        bruteForce(c.get(Calendar.YEAR), c.get(Calendar.MONTH), c.get(Calendar.DAY_OF_MONTH), \"d\", Calendar.DAY_OF_MONTH);\r\n        c.add(Calendar.DAY_OF_MONTH, 1);\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\time\\DurationFormatUtilsTest.java",
  "methodName" : "testJiraLang281",
  "sourceCode" : "// https://issues.apache.org/jira/browse/LANG-281\r\n@Test\r\nvoid testJiraLang281() {\r\n    assertEqualDuration(\"09\", new int[] { 2005, 11, 31, 0, 0, 0 }, new int[] { 2006, 9, 6, 0, 0, 0 }, \"MM\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\time\\DurationFormatUtilsTest.java",
  "methodName" : "testLANG815",
  "sourceCode" : "@Test\r\nvoid testLANG815() {\r\n    final Calendar calendar = Calendar.getInstance();\r\n    calendar.set(2012, Calendar.JULY, 30, 0, 0, 0);\r\n    final long startMillis = calendar.getTimeInMillis();\r\n    calendar.set(2012, Calendar.SEPTEMBER, 8);\r\n    final long endMillis = calendar.getTimeInMillis();\r\n    assertEquals(\"1 9\", DurationFormatUtils.formatPeriod(startMillis, endMillis, \"M d\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\time\\DurationFormatUtilsTest.java",
  "methodName" : "testLANG981",
  "sourceCode" : "@Test\r\nvoid testLANG981() {\r\n    // unmatched quote char in lexx\r\n    assertIllegalArgumentException(() -> DurationFormatUtils.lexx(\"'yMdHms''S\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\time\\DurationFormatUtilsTest.java",
  "methodName" : "testLANG982",
  "sourceCode" : "@Test\r\nvoid testLANG982() {\r\n    // More than 3 millisecond digits following a second\r\n    assertEquals(\"61.999\", DurationFormatUtils.formatDuration(61999, \"s.S\"));\r\n    assertEquals(\"1 1999\", DurationFormatUtils.formatDuration(61999, \"m S\"));\r\n    assertEquals(\"61.999\", DurationFormatUtils.formatDuration(61999, \"s.SSS\"));\r\n    assertEquals(\"1 1999\", DurationFormatUtils.formatDuration(61999, \"m SSS\"));\r\n    assertEquals(\"61.0999\", DurationFormatUtils.formatDuration(61999, \"s.SSSS\"));\r\n    assertEquals(\"1 1999\", DurationFormatUtils.formatDuration(61999, \"m SSSS\"));\r\n    assertEquals(\"61.00999\", DurationFormatUtils.formatDuration(61999, \"s.SSSSS\"));\r\n    assertEquals(\"1 01999\", DurationFormatUtils.formatDuration(61999, \"m SSSSS\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\time\\DurationFormatUtilsTest.java",
  "methodName" : "testLANG984",
  "sourceCode" : "@Test\r\nvoid testLANG984() {\r\n    // Long durations\r\n    assertEquals(\"0\", DurationFormatUtils.formatDuration(0, \"S\"));\r\n    assertEquals(Integer.toString(Integer.MAX_VALUE), DurationFormatUtils.formatDuration(Integer.MAX_VALUE, \"S\"));\r\n    long maxIntPlus = Integer.MAX_VALUE;\r\n    maxIntPlus++;\r\n    assertEquals(Long.toString(maxIntPlus), DurationFormatUtils.formatDuration(maxIntPlus, \"S\"));\r\n    assertEquals(Long.toString(Long.MAX_VALUE), DurationFormatUtils.formatDuration(Long.MAX_VALUE, \"S\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\time\\DurationFormatUtilsTest.java",
  "methodName" : "testLexx",
  "sourceCode" : "@Test\r\nvoid testLexx() {\r\n    // tests each constant\r\n    assertArrayEquals(new DurationFormatUtils.Token[] { createTokenWithCount(DurationFormatUtils.y, 1), createTokenWithCount(DurationFormatUtils.M, 1), createTokenWithCount(DurationFormatUtils.d, 1), createTokenWithCount(DurationFormatUtils.H, 1), createTokenWithCount(DurationFormatUtils.m, 1), createTokenWithCount(DurationFormatUtils.s, 1), createTokenWithCount(DurationFormatUtils.S, 1) }, DurationFormatUtils.lexx(\"yMdHmsS\"));\r\n    // tests the ISO 8601-like\r\n    assertArrayEquals(new DurationFormatUtils.Token[] { createTokenWithCount(DurationFormatUtils.H, 2), createTokenWithCount(new StringBuilder(\":\"), 1), createTokenWithCount(DurationFormatUtils.m, 2), createTokenWithCount(new StringBuilder(\":\"), 1), createTokenWithCount(DurationFormatUtils.s, 2), createTokenWithCount(new StringBuilder(\".\"), 1), createTokenWithCount(DurationFormatUtils.S, 3) }, DurationFormatUtils.lexx(\"HH:mm:ss.SSS\"));\r\n    // test the iso extended format\r\n    assertArrayEquals(new DurationFormatUtils.Token[] { createTokenWithCount(new StringBuilder(\"P\"), 1), createTokenWithCount(DurationFormatUtils.y, 4), createTokenWithCount(new StringBuilder(\"Y\"), 1), createTokenWithCount(DurationFormatUtils.M, 1), createTokenWithCount(new StringBuilder(\"M\"), 1), createTokenWithCount(DurationFormatUtils.d, 1), createTokenWithCount(new StringBuilder(\"DT\"), 1), createTokenWithCount(DurationFormatUtils.H, 1), createTokenWithCount(new StringBuilder(\"H\"), 1), createTokenWithCount(DurationFormatUtils.m, 1), createTokenWithCount(new StringBuilder(\"M\"), 1), createTokenWithCount(DurationFormatUtils.s, 1), createTokenWithCount(new StringBuilder(\".\"), 1), createTokenWithCount(DurationFormatUtils.S, 3), createTokenWithCount(new StringBuilder(\"S\"), 1) }, DurationFormatUtils.lexx(DurationFormatUtils.ISO_EXTENDED_FORMAT_PATTERN));\r\n    // test failures in equals\r\n    final DurationFormatUtils.Token token = createTokenWithCount(DurationFormatUtils.y, 4);\r\n    assertEquals(token, token);\r\n    assertEquals(token.hashCode(), token.hashCode());\r\n    assertNotEquals(token, new Object(), \"Token equal to non-Token class.\");\r\n    final Token token2 = createTokenWithCount(\"\", 1);\r\n    assertNotEquals(token, token2, \"Token equal to Token with wrong value class.\");\r\n    assertNotEquals(token.hashCode(), token2.hashCode());\r\n    assertNotEquals(token, createTokenWithCount(DurationFormatUtils.y, 1), \"Token equal to Token with different count.\");\r\n    final DurationFormatUtils.Token numToken = createTokenWithCount(\"1\", 4);\r\n    assertEquals(numToken, numToken, \"Token with Number value not equal to itself.\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\time\\DurationFormatUtilsTest.java",
  "methodName" : "testLiteralPrefixOptionalToken",
  "sourceCode" : "@Test\r\nvoid testLiteralPrefixOptionalToken() {\r\n    assertEquals(DurationFormatUtils.formatDuration(10000L, \"s's'\"), DurationFormatUtils.formatDuration(10000L, \"['['d']']['<'H'>']['{'m'}']s's'\"));\r\n    assertEquals(DurationFormatUtils.formatDuration(10000L, \"s's'\"), DurationFormatUtils.formatDuration(10000L, \"['{'m'}']s's'\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\time\\DurationFormatUtilsTest.java",
  "methodName" : "testLowDurations",
  "sourceCode" : "// Testing the under a day range in DurationFormatUtils.formatPeriod\r\n@Test\r\nvoid testLowDurations() {\r\n    for (int hr = 0; hr < 24; hr++) {\r\n        for (int min = 0; min < 60; min++) {\r\n            for (int sec = 0; sec < 60; sec++) {\r\n                assertEqualDuration(hr + \":\" + min + \":\" + sec, new int[] { 2000, 0, 1, 0, 0, 0, 0 }, new int[] { 2000, 0, 1, hr, min, sec }, \"H:m:s\");\r\n            }\r\n        }\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\time\\DurationFormatUtilsTest.java",
  "methodName" : "testMultipleOptionalBlocks",
  "sourceCode" : "@Test\r\nvoid testMultipleOptionalBlocks() {\r\n    assertEquals(DurationFormatUtils.formatDuration(Duration.ofHours(1).toMillis(), \"'[['H']]'\"), DurationFormatUtils.formatDuration(Duration.ofHours(1).toMillis(), \"['{'d'}']['[['H']]']\"));\r\n    assertEquals(DurationFormatUtils.formatDuration(Duration.ofDays(1).toMillis(), \"['{'d'}']\"), DurationFormatUtils.formatDuration(Duration.ofDays(1).toMillis(), \"['{'d'}']['['H']']\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\time\\DurationFormatUtilsTest.java",
  "methodName" : "testOptionalLiteralSpecialCharacters",
  "sourceCode" : "@Test\r\nvoid testOptionalLiteralSpecialCharacters() {\r\n    assertEquals(DurationFormatUtils.formatDuration(10000L, \"s's'\"), DurationFormatUtils.formatDuration(10000L, \"['['m']']s's'\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\time\\DurationFormatUtilsTest.java",
  "methodName" : "testOptionalToken",
  "sourceCode" : "@Test\r\nvoid testOptionalToken() {\r\n    //make sure optional formats match corresponding adjusted non-optional formats\r\n    assertEquals(DurationFormatUtils.formatDuration(915361000L, \"d'd'H'h'm'm's's'\"), DurationFormatUtils.formatDuration(915361000L, \"[d'd'H'h'm'm']s's'\"));\r\n    assertEquals(DurationFormatUtils.formatDuration(9153610L, \"H'h'm'm's's'\"), DurationFormatUtils.formatDuration(9153610L, \"[d'd'H'h'm'm']s's'\"));\r\n    assertEquals(DurationFormatUtils.formatDuration(915361L, \"m'm's's'\"), DurationFormatUtils.formatDuration(915361L, \"[d'd'H'h'm'm']s's'\"));\r\n    assertEquals(DurationFormatUtils.formatDuration(9153L, \"s's'\"), DurationFormatUtils.formatDuration(9153L, \"[d'd'H'h'm'm']s's'\"));\r\n    assertEquals(DurationFormatUtils.formatDuration(9153L, \"s's'\"), DurationFormatUtils.formatDuration(9153L, \"[d'd'H'h'm'm']s's'\"));\r\n    assertEquals(DurationFormatUtils.formatPeriod(9153610L, 915361000L, \"d'd'H'h'm'm's's'\"), DurationFormatUtils.formatPeriod(9153610L, 915361000L, \"[d'd'H'h'm'm']s's'\"));\r\n    assertEquals(DurationFormatUtils.formatPeriod(915361L, 9153610L, \"H'h'm'm's's'\"), DurationFormatUtils.formatPeriod(915361L, 9153610L, \"[d'd'H'h'm'm']s's'\"));\r\n    assertEquals(DurationFormatUtils.formatPeriod(9153L, 915361L, \"m'm's's'\"), DurationFormatUtils.formatPeriod(9153L, 915361L, \"[d'd'H'h'm'm']s's'\"));\r\n    assertEquals(DurationFormatUtils.formatPeriod(0L, 9153L, \"s's'\"), DurationFormatUtils.formatPeriod(0L, 9153L, \"[d'd'H'h'm'm']s's'\"));\r\n    //make sure optional parts are actually omitted when zero\r\n    assertEquals(\"2h32m33s610ms\", DurationFormatUtils.formatDuration(9153610L, \"[d'd'H'h'm'm's's']S'ms'\"));\r\n    assertEquals(\"15m15s361ms\", DurationFormatUtils.formatDuration(915361L, \"[d'd'H'h'm'm's's']S'ms'\"));\r\n    assertEquals(\"9s153ms\", DurationFormatUtils.formatDuration(9153L, \"[d'd'H'h'm'm's's']S'ms'\"));\r\n    assertEquals(\"915ms\", DurationFormatUtils.formatDuration(915L, \"[d'd'H'h'm'm's's']S'ms'\"));\r\n    //make sure we can handle omitting multiple literals after a token\r\n    assertEquals(DurationFormatUtils.formatPeriod(915361L, 9153610L, \"H'h''h2'm'm's's'\"), DurationFormatUtils.formatPeriod(915361L, 9153610L, \"[d'd''d2'H'h''h2'm'm']s's'\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\time\\DurationFormatUtilsTest.java",
  "methodName" : "testUnmatchedOptionalTokens",
  "sourceCode" : "@Test\r\nvoid testUnmatchedOptionalTokens() {\r\n    assertIllegalArgumentException(() -> DurationFormatUtils.formatDuration(1, \"[s\"));\r\n    assertIllegalArgumentException(() -> DurationFormatUtils.formatDuration(1, \"[[s\"));\r\n    assertIllegalArgumentException(() -> DurationFormatUtils.formatDuration(1, \"[s]]\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\time\\DurationUtilsTest.java",
  "methodName" : "testGet",
  "sourceCode" : "@Test\r\n@SetSystemProperties({ @SetSystemProperty(key = \"Seconds1\", value = \"1\"), // Long.MAX_VALUE\r\n@SetSystemProperty(key = \"Seconds2\", value = \"9223372036854775807\") })\r\nvoid testGet() {\r\n    // ChronoUnit.SECONDS\r\n    assertEquals(Duration.ofSeconds(0), DurationUtils.get(null, ChronoUnit.SECONDS, 0));\r\n    assertEquals(Duration.ofSeconds(0), DurationUtils.get(\"\", ChronoUnit.SECONDS, 0));\r\n    assertEquals(Duration.ofSeconds(1), DurationUtils.get(\"Seconds1\", ChronoUnit.SECONDS, 0));\r\n    assertEquals(Duration.ofSeconds(Long.MAX_VALUE), DurationUtils.get(\"Seconds2\", ChronoUnit.SECONDS, 0));\r\n    // ChronoUnit.MILLIS\r\n    assertEquals(Duration.ofMillis(0), DurationUtils.get(null, ChronoUnit.MILLIS, 0));\r\n    assertEquals(Duration.ofMillis(0), DurationUtils.get(\"\", ChronoUnit.MILLIS, 0));\r\n    assertEquals(Duration.ofMillis(1), DurationUtils.get(\"Seconds1\", ChronoUnit.MILLIS, 0));\r\n    assertEquals(Duration.ofMillis(Long.MAX_VALUE), DurationUtils.get(\"Seconds2\", ChronoUnit.MILLIS, 0));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\time\\DurationUtilsTest.java",
  "methodName" : "testGetMilliseconds",
  "sourceCode" : "@Test\r\n@SetSystemProperties({ @SetSystemProperty(key = \"Seconds1\", value = \"1\"), // Long.MAX_VALUE\r\n@SetSystemProperty(key = \"Seconds2\", value = \"9223372036854775807\") })\r\nvoid testGetMilliseconds() {\r\n    assertEquals(Duration.ofMillis(0), DurationUtils.getMillis(null, 0));\r\n    assertEquals(Duration.ofMillis(0), DurationUtils.getMillis(\"\", 0));\r\n    assertEquals(Duration.ofMillis(1), DurationUtils.getMillis(\"Seconds1\", 0));\r\n    assertEquals(Duration.ofMillis(Long.MAX_VALUE), DurationUtils.getMillis(\"Seconds2\", 0));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\time\\DurationUtilsTest.java",
  "methodName" : "testGetNanosOfMiili",
  "sourceCode" : "@Test\r\nvoid testGetNanosOfMiili() {\r\n    assertEquals(0, DurationUtils.getNanosOfMiili(null));\r\n    assertEquals(0, DurationUtils.getNanosOfMiili(Duration.ZERO));\r\n    assertEquals(1, DurationUtils.getNanosOfMiili(Duration.ofNanos(1)));\r\n    assertEquals(10, DurationUtils.getNanosOfMiili(Duration.ofNanos(10)));\r\n    assertEquals(100, DurationUtils.getNanosOfMiili(Duration.ofNanos(100)));\r\n    assertEquals(1_000, DurationUtils.getNanosOfMiili(Duration.ofNanos(1_000)));\r\n    assertEquals(10_000, DurationUtils.getNanosOfMiili(Duration.ofNanos(10_000)));\r\n    assertEquals(100_000, DurationUtils.getNanosOfMiili(Duration.ofNanos(100_000)));\r\n    assertEquals(0, DurationUtils.getNanosOfMiili(Duration.ofNanos(1_000_000)));\r\n    assertEquals(1, DurationUtils.getNanosOfMiili(Duration.ofNanos(1_000_001)));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\time\\DurationUtilsTest.java",
  "methodName" : "testGetNanosOfMilli",
  "sourceCode" : "@Test\r\nvoid testGetNanosOfMilli() {\r\n    assertEquals(0, DurationUtils.getNanosOfMilli(null));\r\n    assertEquals(0, DurationUtils.getNanosOfMilli(Duration.ZERO));\r\n    assertEquals(1, DurationUtils.getNanosOfMilli(Duration.ofNanos(1)));\r\n    assertEquals(10, DurationUtils.getNanosOfMilli(Duration.ofNanos(10)));\r\n    assertEquals(100, DurationUtils.getNanosOfMilli(Duration.ofNanos(100)));\r\n    assertEquals(1_000, DurationUtils.getNanosOfMilli(Duration.ofNanos(1_000)));\r\n    assertEquals(10_000, DurationUtils.getNanosOfMilli(Duration.ofNanos(10_000)));\r\n    assertEquals(100_000, DurationUtils.getNanosOfMilli(Duration.ofNanos(100_000)));\r\n    assertEquals(0, DurationUtils.getNanosOfMilli(Duration.ofNanos(1_000_000)));\r\n    assertEquals(1, DurationUtils.getNanosOfMilli(Duration.ofNanos(1_000_001)));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\time\\DurationUtilsTest.java",
  "methodName" : "testGetSeconds",
  "sourceCode" : "@Test\r\n@SetSystemProperties({ @SetSystemProperty(key = \"Seconds1\", value = \"1\"), // Long.MAX_VALUE\r\n@SetSystemProperty(key = \"Seconds2\", value = \"9223372036854775807\") })\r\nvoid testGetSeconds() {\r\n    assertEquals(Duration.ofSeconds(0), DurationUtils.getSeconds(null, 0));\r\n    assertEquals(Duration.ofSeconds(0), DurationUtils.getSeconds(\"\", 0));\r\n    assertEquals(Duration.ofSeconds(1), DurationUtils.getSeconds(\"Seconds1\", 0));\r\n    assertEquals(Duration.ofSeconds(Long.MAX_VALUE), DurationUtils.getSeconds(\"Seconds2\", 0));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\time\\DurationUtilsTest.java",
  "methodName" : "testIsPositive",
  "sourceCode" : "@Test\r\nvoid testIsPositive() {\r\n    assertFalse(DurationUtils.isPositive(Duration.ZERO));\r\n    assertFalse(DurationUtils.isPositive(Duration.ofMillis(-1)));\r\n    assertTrue(DurationUtils.isPositive(Duration.ofMillis(1)));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\time\\DurationUtilsTest.java",
  "methodName" : "testLongToIntRangeFit",
  "sourceCode" : "@Test\r\nvoid testLongToIntRangeFit() {\r\n    assertEquals(0, DurationUtils.LONG_TO_INT_RANGE.fit(0L));\r\n    //\r\n    assertEquals(Integer.MIN_VALUE, DurationUtils.LONG_TO_INT_RANGE.fit(NumberUtils.LONG_INT_MIN_VALUE));\r\n    assertEquals(Integer.MIN_VALUE, DurationUtils.LONG_TO_INT_RANGE.fit(NumberUtils.LONG_INT_MIN_VALUE - 1));\r\n    assertEquals(Integer.MIN_VALUE, DurationUtils.LONG_TO_INT_RANGE.fit(NumberUtils.LONG_INT_MIN_VALUE - 2));\r\n    assertEquals(Integer.MAX_VALUE, DurationUtils.LONG_TO_INT_RANGE.fit(NumberUtils.LONG_INT_MAX_VALUE));\r\n    assertEquals(Integer.MAX_VALUE, DurationUtils.LONG_TO_INT_RANGE.fit(NumberUtils.LONG_INT_MAX_VALUE + 1));\r\n    assertEquals(Integer.MAX_VALUE, DurationUtils.LONG_TO_INT_RANGE.fit(NumberUtils.LONG_INT_MAX_VALUE + 2));\r\n    //\r\n    assertEquals(Integer.MIN_VALUE, DurationUtils.LONG_TO_INT_RANGE.fit(Long.MIN_VALUE));\r\n    assertEquals(Integer.MAX_VALUE, DurationUtils.LONG_TO_INT_RANGE.fit(Long.MAX_VALUE));\r\n    //\r\n    assertEquals(Short.MIN_VALUE, DurationUtils.LONG_TO_INT_RANGE.fit((long) Short.MIN_VALUE));\r\n    assertEquals(Short.MAX_VALUE, DurationUtils.LONG_TO_INT_RANGE.fit((long) Short.MAX_VALUE));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\time\\DurationUtilsTest.java",
  "methodName" : "testOfConsumer",
  "sourceCode" : "@Test\r\nvoid testOfConsumer() {\r\n    assertTrue(DurationUtils.of(start -> assertTrue(start.compareTo(Instant.now()) <= 0)).compareTo(Duration.ZERO) >= 0);\r\n    final Instant before = Instant.now();\r\n    DurationUtils.of(start -> assertTrue(start.compareTo(before) >= 0));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\time\\DurationUtilsTest.java",
  "methodName" : "testOfRunnble",
  "sourceCode" : "@Test\r\nvoid testOfRunnble() {\r\n    assertTrue(DurationUtils.of(this::testSince).compareTo(Duration.ZERO) >= 0);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\time\\DurationUtilsTest.java",
  "methodName" : "testOfRunnbleThrowing",
  "sourceCode" : "@Test\r\nvoid testOfRunnbleThrowing() {\r\n    assertThrows(IOException.class, () -> DurationUtils.of(() -> {\r\n        throw new IOException();\r\n    }));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\time\\DurationUtilsTest.java",
  "methodName" : "testSince",
  "sourceCode" : "@Test\r\nvoid testSince() {\r\n    assertTrue(DurationUtils.since(Instant.EPOCH).compareTo(Duration.ZERO) >= 0);\r\n    assertTrue(DurationUtils.since(Instant.MIN).compareTo(Duration.ZERO) >= 0);\r\n    assertTrue(DurationUtils.since(Instant.MAX).compareTo(Duration.ZERO) <= 0);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\time\\DurationUtilsTest.java",
  "methodName" : "testToDuration",
  "sourceCode" : "@Test\r\nvoid testToDuration() {\r\n    assertEquals(Duration.ofDays(1), DurationUtils.toDuration(1, TimeUnit.DAYS));\r\n    assertEquals(Duration.ofHours(1), DurationUtils.toDuration(1, TimeUnit.HOURS));\r\n    assertEquals(Duration.ofMillis(1), DurationUtils.toDuration(1_000, TimeUnit.MICROSECONDS));\r\n    assertEquals(Duration.ofMillis(1), DurationUtils.toDuration(1, TimeUnit.MILLISECONDS));\r\n    assertEquals(Duration.ofMinutes(1), DurationUtils.toDuration(1, TimeUnit.MINUTES));\r\n    assertEquals(Duration.ofNanos(1), DurationUtils.toDuration(1, TimeUnit.NANOSECONDS));\r\n    assertEquals(Duration.ofSeconds(1), DurationUtils.toDuration(1, TimeUnit.SECONDS));\r\n    assertEquals(1, DurationUtils.toDuration(1, TimeUnit.MILLISECONDS).toMillis());\r\n    assertEquals(-1, DurationUtils.toDuration(-1, TimeUnit.MILLISECONDS).toMillis());\r\n    assertEquals(0, DurationUtils.toDuration(0, TimeUnit.SECONDS).toMillis());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\time\\DurationUtilsTest.java",
  "methodName" : "testToMillisInt",
  "sourceCode" : "@Test\r\nvoid testToMillisInt() {\r\n    assertEquals(0, DurationUtils.toMillisInt(Duration.ZERO));\r\n    assertEquals(1, DurationUtils.toMillisInt(Duration.ofMillis(1)));\r\n    //\r\n    assertEquals(Integer.MIN_VALUE, DurationUtils.toMillisInt(Duration.ofMillis(Integer.MIN_VALUE)));\r\n    assertEquals(Integer.MAX_VALUE, DurationUtils.toMillisInt(Duration.ofMillis(Integer.MAX_VALUE)));\r\n    assertEquals(Integer.MAX_VALUE, DurationUtils.toMillisInt(Duration.ofMillis(NumberUtils.LONG_INT_MAX_VALUE + 1)));\r\n    assertEquals(Integer.MAX_VALUE, DurationUtils.toMillisInt(Duration.ofMillis(NumberUtils.LONG_INT_MAX_VALUE + 2)));\r\n    assertEquals(Integer.MIN_VALUE, DurationUtils.toMillisInt(Duration.ofMillis(NumberUtils.LONG_INT_MIN_VALUE - 1)));\r\n    assertEquals(Integer.MIN_VALUE, DurationUtils.toMillisInt(Duration.ofMillis(NumberUtils.LONG_INT_MIN_VALUE - 2)));\r\n    //\r\n    assertEquals(Integer.MIN_VALUE, DurationUtils.toMillisInt(Duration.ofNanos(Long.MIN_VALUE)));\r\n    assertEquals(Integer.MAX_VALUE, DurationUtils.toMillisInt(Duration.ofNanos(Long.MAX_VALUE)));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\time\\DurationUtilsTest.java",
  "methodName" : "testToMillisIntNullDuration",
  "sourceCode" : "@Test\r\nvoid testToMillisIntNullDuration() {\r\n    assertNullPointerException(() -> DurationUtils.toMillisInt(null));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\time\\DurationUtilsTest.java",
  "methodName" : "testZeroIfNull",
  "sourceCode" : "@Test\r\nvoid testZeroIfNull() {\r\n    assertEquals(Duration.ZERO, DurationUtils.zeroIfNull(null));\r\n    assertEquals(Duration.ofDays(1), DurationUtils.zeroIfNull(Duration.ofDays(1)));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\time\\FastDateFormatTest.java",
  "methodName" : "test_changeDefault_Locale_DateInstance",
  "sourceCode" : "@DefaultLocale(language = \"en\", country = \"US\")\r\n@Test\r\nvoid test_changeDefault_Locale_DateInstance() {\r\n    final FastDateFormat format1 = FastDateFormat.getDateInstance(FastDateFormat.FULL, Locale.GERMANY);\r\n    final FastDateFormat format2 = FastDateFormat.getDateInstance(FastDateFormat.FULL);\r\n    Locale.setDefault(Locale.GERMANY);\r\n    final FastDateFormat format3 = FastDateFormat.getDateInstance(FastDateFormat.FULL);\r\n    assertSame(Locale.GERMANY, format1.getLocale());\r\n    assertEquals(Locale.US, format2.getLocale());\r\n    assertSame(Locale.GERMANY, format3.getLocale());\r\n    assertNotSame(format1, format2);\r\n    assertNotSame(format2, format3);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\time\\FastDateFormatTest.java",
  "methodName" : "test_changeDefault_Locale_DateTimeInstance",
  "sourceCode" : "@DefaultLocale(language = \"en\", country = \"US\")\r\n@Test\r\nvoid test_changeDefault_Locale_DateTimeInstance() {\r\n    final FastDateFormat format1 = FastDateFormat.getDateTimeInstance(FastDateFormat.FULL, FastDateFormat.FULL, Locale.GERMANY);\r\n    final FastDateFormat format2 = FastDateFormat.getDateTimeInstance(FastDateFormat.FULL, FastDateFormat.FULL);\r\n    Locale.setDefault(Locale.GERMANY);\r\n    final FastDateFormat format3 = FastDateFormat.getDateTimeInstance(FastDateFormat.FULL, FastDateFormat.FULL);\r\n    assertSame(Locale.GERMANY, format1.getLocale());\r\n    assertEquals(Locale.US, format2.getLocale());\r\n    assertSame(Locale.GERMANY, format3.getLocale());\r\n    assertNotSame(format1, format2);\r\n    assertNotSame(format2, format3);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\time\\FastDateFormatTest.java",
  "methodName" : "test_getInstance",
  "sourceCode" : "/*\r\n     * Only the cache methods need to be tested here.\r\n     * The print methods are tested by {@link FastDateFormat_PrinterTest}\r\n     * and the parse methods are tested by {@link FastDateFormat_ParserTest}\r\n     */\r\n@Test\r\nvoid test_getInstance() {\r\n    final FastDateFormat format1 = FastDateFormat.getInstance();\r\n    final FastDateFormat format2 = FastDateFormat.getInstance();\r\n    assertSame(format1, format2);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\time\\FastDateFormatTest.java",
  "methodName" : "test_getInstance_String",
  "sourceCode" : "@Test\r\nvoid test_getInstance_String() {\r\n    final FastDateFormat format1 = FastDateFormat.getInstance(\"MM/DD/yyyy\");\r\n    final FastDateFormat format2 = FastDateFormat.getInstance(\"MM-DD-yyyy\");\r\n    final FastDateFormat format3 = FastDateFormat.getInstance(\"MM-DD-yyyy\");\r\n    assertNotSame(format1, format2);\r\n    assertSame(format2, format3);\r\n    assertEquals(\"MM/DD/yyyy\", format1.getPattern());\r\n    assertEquals(TimeZone.getDefault(), format1.getTimeZone());\r\n    assertEquals(TimeZone.getDefault(), format2.getTimeZone());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\time\\FastDateFormatTest.java",
  "methodName" : "test_getInstance_String_Locale",
  "sourceCode" : "@DefaultLocale(language = \"en\", country = \"US\")\r\n@Test\r\nvoid test_getInstance_String_Locale() {\r\n    final FastDateFormat format1 = FastDateFormat.getInstance(\"MM/DD/yyyy\", Locale.GERMANY);\r\n    final FastDateFormat format2 = FastDateFormat.getInstance(\"MM/DD/yyyy\");\r\n    final FastDateFormat format3 = FastDateFormat.getInstance(\"MM/DD/yyyy\", Locale.GERMANY);\r\n    assertNotSame(format1, format2);\r\n    assertSame(format1, format3);\r\n    assertEquals(Locale.GERMANY, format1.getLocale());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\time\\FastDateFormatTest.java",
  "methodName" : "test_getInstance_String_TimeZone",
  "sourceCode" : "@DefaultLocale(language = \"en\", country = \"US\")\r\n@DefaultTimeZone(\"America/New_York\")\r\n@Test\r\nvoid test_getInstance_String_TimeZone() {\r\n    final FastDateFormat format1 = FastDateFormat.getInstance(\"MM/DD/yyyy\", TimeZone.getTimeZone(\"Atlantic/Reykjavik\"));\r\n    final FastDateFormat format2 = FastDateFormat.getInstance(\"MM/DD/yyyy\");\r\n    final FastDateFormat format3 = FastDateFormat.getInstance(\"MM/DD/yyyy\", TimeZone.getDefault());\r\n    final FastDateFormat format4 = FastDateFormat.getInstance(\"MM/DD/yyyy\", TimeZone.getDefault());\r\n    final FastDateFormat format5 = FastDateFormat.getInstance(\"MM-DD-yyyy\", TimeZone.getDefault());\r\n    final FastDateFormat format6 = FastDateFormat.getInstance(\"MM-DD-yyyy\");\r\n    assertNotSame(format1, format2);\r\n    assertEquals(TimeZone.getTimeZone(\"Atlantic/Reykjavik\"), format1.getTimeZone());\r\n    assertEquals(TimeZone.getDefault(), format2.getTimeZone());\r\n    assertSame(format3, format4);\r\n    assertNotSame(format3, format5);\r\n    assertNotSame(format4, format6);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\time\\FastDateFormatTest.java",
  "methodName" : "test_getInstance_String_TimeZone_Locale",
  "sourceCode" : "@DefaultLocale(language = \"en\", country = \"US\")\r\n@DefaultTimeZone(\"America/New_York\")\r\n@Test\r\nvoid test_getInstance_String_TimeZone_Locale() {\r\n    final FastDateFormat format1 = FastDateFormat.getInstance(\"MM/DD/yyyy\", TimeZone.getTimeZone(\"Atlantic/Reykjavik\"), Locale.GERMANY);\r\n    final FastDateFormat format2 = FastDateFormat.getInstance(\"MM/DD/yyyy\", Locale.GERMANY);\r\n    final FastDateFormat format3 = FastDateFormat.getInstance(\"MM/DD/yyyy\", TimeZone.getDefault(), Locale.GERMANY);\r\n    assertNotSame(format1, format2);\r\n    assertEquals(TimeZone.getTimeZone(\"Atlantic/Reykjavik\"), format1.getTimeZone());\r\n    assertEquals(TimeZone.getDefault(), format2.getTimeZone());\r\n    assertEquals(TimeZone.getDefault(), format3.getTimeZone());\r\n    assertEquals(Locale.GERMANY, format1.getLocale());\r\n    assertEquals(Locale.GERMANY, format2.getLocale());\r\n    assertEquals(Locale.GERMANY, format3.getLocale());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\time\\FastDateFormatTest.java",
  "methodName" : "testCheckDefaults",
  "sourceCode" : "@Test\r\nvoid testCheckDefaults() {\r\n    final FastDateFormat format = FastDateFormat.getInstance();\r\n    final FastDateFormat medium = FastDateFormat.getDateTimeInstance(FastDateFormat.SHORT, FastDateFormat.SHORT);\r\n    assertEquals(medium, format);\r\n    final SimpleDateFormat sdf = new SimpleDateFormat();\r\n    assertEquals(sdf.toPattern(), format.getPattern());\r\n    assertEquals(Locale.getDefault(), format.getLocale());\r\n    assertEquals(TimeZone.getDefault(), format.getTimeZone());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\time\\FastDateFormatTest.java",
  "methodName" : "testCheckDifferingStyles",
  "sourceCode" : "@Test\r\nvoid testCheckDifferingStyles() {\r\n    final FastDateFormat shortShort = FastDateFormat.getDateTimeInstance(FastDateFormat.SHORT, FastDateFormat.SHORT, Locale.US);\r\n    final FastDateFormat shortLong = FastDateFormat.getDateTimeInstance(FastDateFormat.SHORT, FastDateFormat.LONG, Locale.US);\r\n    final FastDateFormat longShort = FastDateFormat.getDateTimeInstance(FastDateFormat.LONG, FastDateFormat.SHORT, Locale.US);\r\n    final FastDateFormat longLong = FastDateFormat.getDateTimeInstance(FastDateFormat.LONG, FastDateFormat.LONG, Locale.US);\r\n    assertNotEquals(shortShort, shortLong);\r\n    assertNotEquals(shortShort, longShort);\r\n    assertNotEquals(shortShort, longLong);\r\n    assertNotEquals(shortLong, longShort);\r\n    assertNotEquals(shortLong, longLong);\r\n    assertNotEquals(longShort, longLong);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\time\\FastDateFormatTest.java",
  "methodName" : "testDateDefaults",
  "sourceCode" : "@Test\r\nvoid testDateDefaults() {\r\n    assertEquals(FastDateFormat.getDateInstance(FastDateFormat.LONG, Locale.CANADA), FastDateFormat.getDateInstance(FastDateFormat.LONG, TimeZone.getDefault(), Locale.CANADA));\r\n    assertEquals(FastDateFormat.getDateInstance(FastDateFormat.LONG, TimeZone.getTimeZone(\"America/New_York\")), FastDateFormat.getDateInstance(FastDateFormat.LONG, TimeZone.getTimeZone(\"America/New_York\"), Locale.getDefault()));\r\n    assertEquals(FastDateFormat.getDateInstance(FastDateFormat.LONG), FastDateFormat.getDateInstance(FastDateFormat.LONG, TimeZone.getDefault(), Locale.getDefault()));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\time\\FastDateFormatTest.java",
  "methodName" : "testLang1152",
  "sourceCode" : "@Test\r\nvoid testLang1152() {\r\n    final TimeZone utc = FastTimeZone.getGmtTimeZone();\r\n    final Date date = new Date(Long.MAX_VALUE);\r\n    String dateAsString = FastDateFormat.getInstance(\"yyyy-MM-dd\", utc, Locale.US).format(date);\r\n    assertEquals(\"292278994-08-17\", dateAsString);\r\n    dateAsString = FastDateFormat.getInstance(\"dd/MM/yyyy\", utc, Locale.US).format(date);\r\n    assertEquals(\"17/08/292278994\", dateAsString);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\time\\FastDateFormatTest.java",
  "methodName" : "testLang1267",
  "sourceCode" : "@Test\r\nvoid testLang1267() {\r\n    FastDateFormat.getInstance(\"yyyy-MM-dd'T'HH:mm:ss.SSSXXX\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\time\\FastDateFormatTest.java",
  "methodName" : "testLang1641",
  "sourceCode" : "@Test\r\nvoid testLang1641() {\r\n    assertSame(FastDateFormat.getInstance(ISO_8601_DATE_FORMAT), FastDateFormat.getInstance(ISO_8601_DATE_FORMAT));\r\n    // commons-lang's GMT TimeZone\r\n    assertSame(FastDateFormat.getInstance(ISO_8601_DATE_FORMAT, FastTimeZone.getGmtTimeZone()), FastDateFormat.getInstance(ISO_8601_DATE_FORMAT, FastTimeZone.getGmtTimeZone()));\r\n    // default TimeZone\r\n    assertSame(FastDateFormat.getInstance(ISO_8601_DATE_FORMAT, TimeZone.getDefault()), FastDateFormat.getInstance(ISO_8601_DATE_FORMAT, TimeZone.getDefault()));\r\n    // TimeZones that are identical in every way except ID\r\n    assertNotSame(FastDateFormat.getInstance(ISO_8601_DATE_FORMAT, TimeZone.getTimeZone(\"Australia/Broken_Hill\")), FastDateFormat.getInstance(ISO_8601_DATE_FORMAT, TimeZone.getTimeZone(\"Australia/Yancowinna\")));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\time\\FastDateFormatTest.java",
  "methodName" : "testLang954",
  "sourceCode" : "/**\r\n * According to LANG-954 (https://issues.apache.org/jira/browse/LANG-954) this is broken in Android 2.1.\r\n */\r\n@Test\r\nvoid testLang954() {\r\n    final String pattern = \"yyyy-MM-dd'T'\";\r\n    FastDateFormat.getInstance(pattern);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\time\\FastDateFormatTest.java",
  "methodName" : "testParseCentralEuropeanSummerTime",
  "sourceCode" : "/**\r\n * Tests [LANG-1767] FastDateFormat.parse can not recognize \"CEST\" Timezone.\r\n *\r\n * @throws ParseException Throws on test failure.\r\n */\r\n@Test\r\nvoid testParseCentralEuropeanSummerTime() throws ParseException {\r\n    assertNotNull(FastDateFormat.getInstance(\"dd.MM.yyyy HH:mm:ss\", Locale.GERMANY).parse(\"26.10.2014 02:00:00\"));\r\n    assertNotNull(FastDateFormat.getInstance(\"dd.MM.yyyy HH:mm:ss z\", Locale.US).parse(\"26.10.2014 02:00:00 CEST\"));\r\n    assertNotNull(FastDateFormat.getInstance(\"dd.MM.yyyy HH:mm:ss z\", Locale.GERMANY).parse(\"26.10.2014 02:00:00 MESZ\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\time\\FastDateFormatTest.java",
  "methodName" : "testParseSync",
  "sourceCode" : "@Test\r\nvoid testParseSync() throws InterruptedException {\r\n    final String pattern = \"yyyy-MM-dd'T'HH:mm:ss.SSS\";\r\n    final SimpleDateFormat inner = new SimpleDateFormat(pattern);\r\n    final Format sdf = new Format() {\r\n\r\n        private static final long serialVersionUID = 1L;\r\n\r\n        @Override\r\n        public StringBuffer format(final Object obj, final StringBuffer toAppendTo, final FieldPosition fieldPosition) {\r\n            synchronized (this) {\r\n                return inner.format(obj, toAppendTo, fieldPosition);\r\n            }\r\n        }\r\n\r\n        @Override\r\n        public Object parseObject(final String source, final ParsePosition pos) {\r\n            synchronized (this) {\r\n                return inner.parseObject(source, pos);\r\n            }\r\n        }\r\n    };\r\n    final AtomicLongArray sdfTime = measureTime(sdf, sdf);\r\n    final Format fdf = FastDateFormat.getInstance(pattern);\r\n    final AtomicLongArray fdfTime = measureTime(fdf, fdf);\r\n    // System.out.println(\">>FastDateFormatTest: FastDatePrinter:\"+fdfTime.get(0)+\" SimpleDateFormat:\"+sdfTime.get(0));\r\n    // System.out.println(\">>FastDateFormatTest: FastDateParser:\"+fdfTime.get(1)+\" SimpleDateFormat:\"+sdfTime.get(1));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\time\\FastDateFormatTest.java",
  "methodName" : "testStandaloneLongMonthForm",
  "sourceCode" : "@Test\r\nvoid testStandaloneLongMonthForm() {\r\n    final TimeZone utc = FastTimeZone.getGmtTimeZone();\r\n    final Instant testInstant = LocalDate.of(1970, 9, 15).atStartOfDay(ZoneId.of(\"UTC\")).toInstant();\r\n    final Date date = Date.from(testInstant);\r\n    String dateAsString = FastDateFormat.getInstance(\"yyyy-LLLL-dd\", utc, Locale.GERMAN).format(date);\r\n    assertEquals(\"1970-September-15\", dateAsString);\r\n    dateAsString = FastDateFormat.getInstance(\"yyyy-LLLL-dd\", utc, FINNISH).format(date);\r\n    assertEquals(\"1970-syyskuu-15\", dateAsString);\r\n    dateAsString = FastDateFormat.getInstance(\"yyyy-LLLL-dd\", utc, HUNGARIAN).format(date);\r\n    assertEquals(\"1970-szeptember-15\", dateAsString);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\time\\FastDateFormatTest.java",
  "methodName" : "testStandaloneShortMonthForm",
  "sourceCode" : "@Test\r\nvoid testStandaloneShortMonthForm() {\r\n    final TimeZone utc = FastTimeZone.getGmtTimeZone();\r\n    final Instant testInstant = LocalDate.of(1970, 9, 15).atStartOfDay(ZoneId.of(\"UTC\")).toInstant();\r\n    final Date date = Date.from(testInstant);\r\n    String dateAsString = FastDateFormat.getInstance(\"yyyy-LLL-dd\", utc, Locale.GERMAN).format(date);\r\n    assertEquals(\"1970-Sep-15\", dateAsString);\r\n    dateAsString = FastDateFormat.getInstance(\"yyyy-LLL-dd\", utc, FINNISH).format(date);\r\n    assertEquals(\"1970-syys-15\", dateAsString);\r\n    dateAsString = FastDateFormat.getInstance(\"yyyy-LLL-dd\", utc, HUNGARIAN).format(date);\r\n    assertEquals(\"1970-szept.-15\", dateAsString);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\time\\FastDateFormatTest.java",
  "methodName" : "testTimeDateDefaults",
  "sourceCode" : "@Test\r\nvoid testTimeDateDefaults() {\r\n    assertEquals(FastDateFormat.getDateTimeInstance(FastDateFormat.LONG, FastDateFormat.MEDIUM, Locale.CANADA), FastDateFormat.getDateTimeInstance(FastDateFormat.LONG, FastDateFormat.MEDIUM, TimeZone.getDefault(), Locale.CANADA));\r\n    assertEquals(FastDateFormat.getDateTimeInstance(FastDateFormat.LONG, FastDateFormat.MEDIUM, TimeZone.getTimeZone(\"America/New_York\")), FastDateFormat.getDateTimeInstance(FastDateFormat.LONG, FastDateFormat.MEDIUM, TimeZone.getTimeZone(\"America/New_York\"), Locale.getDefault()));\r\n    assertEquals(FastDateFormat.getDateTimeInstance(FastDateFormat.LONG, FastDateFormat.MEDIUM), FastDateFormat.getDateTimeInstance(FastDateFormat.LONG, FastDateFormat.MEDIUM, TimeZone.getDefault(), Locale.getDefault()));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\time\\FastDateFormatTest.java",
  "methodName" : "testTimeDefaults",
  "sourceCode" : "@Test\r\nvoid testTimeDefaults() {\r\n    assertEquals(FastDateFormat.getTimeInstance(FastDateFormat.LONG, Locale.CANADA), FastDateFormat.getTimeInstance(FastDateFormat.LONG, TimeZone.getDefault(), Locale.CANADA));\r\n    assertEquals(FastDateFormat.getTimeInstance(FastDateFormat.LONG, TimeZone.getTimeZone(\"America/New_York\")), FastDateFormat.getTimeInstance(FastDateFormat.LONG, TimeZone.getTimeZone(\"America/New_York\"), Locale.getDefault()));\r\n    assertEquals(FastDateFormat.getTimeInstance(FastDateFormat.LONG), FastDateFormat.getTimeInstance(FastDateFormat.LONG, TimeZone.getDefault(), Locale.getDefault()));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\time\\FastDateParserSDFTest.java",
  "methodName" : "testLowerCase",
  "sourceCode" : "@ParameterizedTest\r\n@MethodSource(\"data\")\r\nvoid testLowerCase(final String format, final String input, final Locale locale, final boolean valid) {\r\n    checkParse(input.toLowerCase(locale), format, locale, valid);\r\n}",
  "annotations" : [ "ParameterizedTest" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\time\\FastDateParserSDFTest.java",
  "methodName" : "testLowerCasePP",
  "sourceCode" : "@ParameterizedTest\r\n@MethodSource(\"data\")\r\nvoid testLowerCasePP(final String format, final String input, final Locale locale, final boolean valid) {\r\n    checkParsePosition(input.toLowerCase(locale), format, locale, valid);\r\n}",
  "annotations" : [ "ParameterizedTest" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\time\\FastDateParserSDFTest.java",
  "methodName" : "testOriginal",
  "sourceCode" : "@ParameterizedTest\r\n@MethodSource(\"data\")\r\nvoid testOriginal(final String format, final String input, final Locale locale, final boolean valid) {\r\n    checkParse(input, format, locale, valid);\r\n}",
  "annotations" : [ "ParameterizedTest" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\time\\FastDateParserSDFTest.java",
  "methodName" : "testOriginalPP",
  "sourceCode" : "@ParameterizedTest\r\n@MethodSource(\"data\")\r\nvoid testOriginalPP(final String format, final String input, final Locale locale, final boolean valid) {\r\n    checkParsePosition(input, format, locale, valid);\r\n}",
  "annotations" : [ "ParameterizedTest" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\time\\FastDateParserSDFTest.java",
  "methodName" : "testUpperCase",
  "sourceCode" : "@ParameterizedTest\r\n@MethodSource(\"data\")\r\nvoid testUpperCase(final String format, final String input, final Locale locale, final boolean valid) {\r\n    checkParse(input.toUpperCase(locale), format, locale, valid);\r\n}",
  "annotations" : [ "ParameterizedTest" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\time\\FastDateParserSDFTest.java",
  "methodName" : "testUpperCasePP",
  "sourceCode" : "@ParameterizedTest\r\n@MethodSource(\"data\")\r\nvoid testUpperCasePP(final String format, final String input, final Locale locale, final boolean valid) {\r\n    checkParsePosition(input.toUpperCase(locale), format, locale, valid);\r\n}",
  "annotations" : [ "ParameterizedTest" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\time\\FastDateParserTest.java",
  "methodName" : "test_Equality_Hash",
  "sourceCode" : "@ParameterizedTest\r\n@MethodSource(DATE_PARSER_PARAMETERS)\r\nvoid test_Equality_Hash(final TriFunction<String, TimeZone, Locale, DateParser> dpProvider) {\r\n    // @formatter:off\r\n    final DateParser[] parsers = { getInstance(dpProvider, yMdHmsSZ, NEW_YORK, Locale.US), getInstance(dpProvider, DMY_DOT, NEW_YORK, Locale.US), getInstance(dpProvider, YMD_SLASH, NEW_YORK, Locale.US), getInstance(dpProvider, MDY_DASH, NEW_YORK, Locale.US), getInstance(dpProvider, MDY_SLASH, NEW_YORK, Locale.US), getInstance(dpProvider, MDY_SLASH, REYKJAVIK, Locale.US), getInstance(dpProvider, MDY_SLASH, REYKJAVIK, SWEDEN) };\r\n    // @formatter:on\r\n    final Map<DateParser, Integer> map = new HashMap<>();\r\n    int i = 0;\r\n    for (final DateParser parser : parsers) {\r\n        map.put(parser, Integer.valueOf(i++));\r\n    }\r\n    i = 0;\r\n    for (final DateParser parser : parsers) {\r\n        assertEquals(i++, map.get(parser).intValue());\r\n    }\r\n}",
  "annotations" : [ "ParameterizedTest" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\time\\FastDateParserTest.java",
  "methodName" : "test1806",
  "sourceCode" : "@Test\r\nvoid test1806() throws ParseException {\r\n    final String formatStub = \"yyyy-MM-dd'T'HH:mm:ss.SSS\";\r\n    final String dateStub = \"2001-02-04T12:08:56.235\";\r\n    for (final Expected1806 trial : Expected1806.values()) {\r\n        final Calendar cal = initializeCalendar(trial.zone);\r\n        final String message = trial.zone.getDisplayName() + \";\";\r\n        DateParser parser = getInstance(formatStub + \"X\", trial.zone);\r\n        assertEquals(cal.getTime().getTime(), parser.parse(dateStub + trial.one).getTime() - trial.offset, message + trial.one);\r\n        parser = getInstance(formatStub + \"XX\", trial.zone);\r\n        assertEquals(cal.getTime(), parser.parse(dateStub + trial.two), message + trial.two);\r\n        parser = getInstance(formatStub + \"XXX\", trial.zone);\r\n        assertEquals(cal.getTime(), parser.parse(dateStub + trial.three), message + trial.three);\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\time\\FastDateParserTest.java",
  "methodName" : "test1806Argument",
  "sourceCode" : "@Test\r\nvoid test1806Argument() {\r\n    assertIllegalArgumentException(() -> getInstance(\"XXXX\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\time\\FastDateParserTest.java",
  "methodName" : "testAmPm",
  "sourceCode" : "@ParameterizedTest\r\n@MethodSource(DATE_PARSER_PARAMETERS)\r\nvoid testAmPm(final TriFunction<String, TimeZone, Locale, DateParser> dpProvider) throws ParseException {\r\n    final Calendar cal = Calendar.getInstance(NEW_YORK, Locale.US);\r\n    cal.clear();\r\n    final DateParser h = getInstance(dpProvider, \"yyyy-MM-dd hh a mm:ss\", NEW_YORK, Locale.US);\r\n    final DateParser K = getInstance(dpProvider, \"yyyy-MM-dd KK a mm:ss\", NEW_YORK, Locale.US);\r\n    final DateParser k = getInstance(dpProvider, \"yyyy-MM-dd kk:mm:ss\", NEW_YORK, Locale.US);\r\n    final DateParser H = getInstance(dpProvider, \"yyyy-MM-dd HH:mm:ss\", NEW_YORK, Locale.US);\r\n    cal.set(2010, Calendar.AUGUST, 1, 0, 33, 20);\r\n    assertEquals(cal.getTime(), h.parse(\"2010-08-01 12 AM 33:20\"));\r\n    assertEquals(cal.getTime(), K.parse(\"2010-08-01 0 AM 33:20\"));\r\n    assertEquals(cal.getTime(), k.parse(\"2010-08-01 00:33:20\"));\r\n    assertEquals(cal.getTime(), H.parse(\"2010-08-01 00:33:20\"));\r\n    cal.set(2010, Calendar.AUGUST, 1, 3, 33, 20);\r\n    assertEquals(cal.getTime(), h.parse(\"2010-08-01 3 AM 33:20\"));\r\n    assertEquals(cal.getTime(), K.parse(\"2010-08-01 3 AM 33:20\"));\r\n    assertEquals(cal.getTime(), k.parse(\"2010-08-01 03:33:20\"));\r\n    assertEquals(cal.getTime(), H.parse(\"2010-08-01 03:33:20\"));\r\n    cal.set(2010, Calendar.AUGUST, 1, 15, 33, 20);\r\n    assertEquals(cal.getTime(), h.parse(\"2010-08-01 3 PM 33:20\"));\r\n    assertEquals(cal.getTime(), K.parse(\"2010-08-01 3 PM 33:20\"));\r\n    assertEquals(cal.getTime(), k.parse(\"2010-08-01 15:33:20\"));\r\n    assertEquals(cal.getTime(), H.parse(\"2010-08-01 15:33:20\"));\r\n    cal.set(2010, Calendar.AUGUST, 1, 12, 33, 20);\r\n    assertEquals(cal.getTime(), h.parse(\"2010-08-01 12 PM 33:20\"));\r\n    assertEquals(cal.getTime(), K.parse(\"2010-08-01 0 PM 33:20\"));\r\n    assertEquals(cal.getTime(), k.parse(\"2010-08-01 12:33:20\"));\r\n    assertEquals(cal.getTime(), H.parse(\"2010-08-01 12:33:20\"));\r\n}",
  "annotations" : [ "ParameterizedTest" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\time\\FastDateParserTest.java",
  "methodName" : "testDayNumberOfWeek",
  "sourceCode" : "@Test\r\nvoid testDayNumberOfWeek() throws ParseException {\r\n    final DateParser parser = getInstance(\"u\");\r\n    final Calendar calendar = Calendar.getInstance();\r\n    calendar.setTime(parser.parse(\"1\"));\r\n    assertEquals(Calendar.MONDAY, calendar.get(Calendar.DAY_OF_WEEK));\r\n    calendar.setTime(parser.parse(\"6\"));\r\n    assertEquals(Calendar.SATURDAY, calendar.get(Calendar.DAY_OF_WEEK));\r\n    calendar.setTime(parser.parse(\"7\"));\r\n    assertEquals(Calendar.SUNDAY, calendar.get(Calendar.DAY_OF_WEEK));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\time\\FastDateParserTest.java",
  "methodName" : "testDayOf",
  "sourceCode" : "@ParameterizedTest\r\n@MethodSource(DATE_PARSER_PARAMETERS)\r\nvoid testDayOf(final TriFunction<String, TimeZone, Locale, DateParser> dpProvider) throws ParseException {\r\n    final Calendar cal = Calendar.getInstance(NEW_YORK, Locale.US);\r\n    cal.clear();\r\n    cal.set(2003, Calendar.FEBRUARY, 10);\r\n    final DateParser fdf = getInstance(dpProvider, \"W w F D y\", NEW_YORK, Locale.US);\r\n    assertEquals(cal.getTime(), fdf.parse(\"3 7 2 41 03\"));\r\n}",
  "annotations" : [ "ParameterizedTest" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\time\\FastDateParserTest.java",
  "methodName" : "testEquals",
  "sourceCode" : "@Test\r\nvoid testEquals() {\r\n    final DateParser parser1 = getInstance(YMD_SLASH);\r\n    final DateParser parser2 = getInstance(YMD_SLASH);\r\n    assertEquals(parser1, parser2);\r\n    assertEquals(parser1.hashCode(), parser2.hashCode());\r\n    assertNotEquals(parser1, new Object());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\time\\FastDateParserTest.java",
  "methodName" : "testJpLocales",
  "sourceCode" : "@Test\r\nvoid testJpLocales() {\r\n    final Calendar cal = Calendar.getInstance(TimeZones.GMT);\r\n    cal.clear();\r\n    cal.set(2003, Calendar.FEBRUARY, 10);\r\n    cal.set(Calendar.ERA, GregorianCalendar.BC);\r\n    final Locale locale = LocaleUtils.toLocale(\"zh\");\r\n    // ja_JP_JP cannot handle dates before 1868 properly\r\n    final SimpleDateFormat sdf = new SimpleDateFormat(LONG_FORMAT, locale);\r\n    final DateParser fdf = getInstance(LONG_FORMAT, locale);\r\n    // If parsing fails, a ParseException will be thrown and the test will fail\r\n    checkParse(locale, cal, sdf, fdf);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\time\\FastDateParserTest.java",
  "methodName" : "testLANG_831",
  "sourceCode" : "@ParameterizedTest\r\n@MethodSource(DATE_PARSER_PARAMETERS)\r\nvoid testLANG_831(final TriFunction<String, TimeZone, Locale, DateParser> dpProvider) throws Exception {\r\n    testSdfAndFdp(dpProvider, \"M E\", \"3  Tue\", true);\r\n}",
  "annotations" : [ "ParameterizedTest" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\time\\FastDateParserTest.java",
  "methodName" : "testLANG_832",
  "sourceCode" : "@ParameterizedTest\r\n@MethodSource(DATE_PARSER_PARAMETERS)\r\nvoid testLANG_832(final TriFunction<String, TimeZone, Locale, DateParser> dpProvider) throws Exception {\r\n    // OK\r\n    testSdfAndFdp(dpProvider, \"'d'd\", \"d3\", false);\r\n    // should fail (unterminated quote)\r\n    testSdfAndFdp(dpProvider, \"'d'd'\", \"d3\", true);\r\n}",
  "annotations" : [ "ParameterizedTest" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\time\\FastDateParserTest.java",
  "methodName" : "testLang1121",
  "sourceCode" : "@ParameterizedTest\r\n@MethodSource(DATE_PARSER_PARAMETERS)\r\nvoid testLang1121(final TriFunction<String, TimeZone, Locale, DateParser> dpProvider) throws ParseException {\r\n    final TimeZone kst = TimeZone.getTimeZone(\"KST\");\r\n    final DateParser fdp = getInstance(dpProvider, \"yyyyMMdd\", kst, Locale.KOREA);\r\n    assertThrows(ParseException.class, () -> fdp.parse(\"2015\"));\r\n    // Wed Apr 29 00:00:00 KST 2015\r\n    Date actual = fdp.parse(\"20150429\");\r\n    final Calendar cal = Calendar.getInstance(kst, Locale.KOREA);\r\n    cal.clear();\r\n    cal.set(2015, Calendar.APRIL, 29);\r\n    Date expected = cal.getTime();\r\n    assertEquals(expected, actual);\r\n    final SimpleDateFormat sdf = new SimpleDateFormat(\"yyyyMMdd\", Locale.KOREA);\r\n    sdf.setTimeZone(kst);\r\n    expected = sdf.parse(\"20150429113100\");\r\n    // Thu Mar 16 00:00:00 KST 81724\r\n    actual = fdp.parse(\"20150429113100\");\r\n    assertEquals(expected, actual);\r\n}",
  "annotations" : [ "ParameterizedTest" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\time\\FastDateParserTest.java",
  "methodName" : "testLang1380",
  "sourceCode" : "@ParameterizedTest\r\n@MethodSource(DATE_PARSER_PARAMETERS)\r\nvoid testLang1380(final TriFunction<String, TimeZone, Locale, DateParser> dpProvider) throws ParseException {\r\n    final Calendar expected = Calendar.getInstance(TimeZones.GMT, Locale.FRANCE);\r\n    expected.clear();\r\n    expected.set(2014, Calendar.APRIL, 14);\r\n    final DateParser fdp = getInstance(dpProvider, \"dd MMM yyyy\", TimeZones.GMT, Locale.FRANCE);\r\n    assertEquals(expected.getTime(), fdp.parse(\"14 avril 2014\"));\r\n    assertEquals(expected.getTime(), fdp.parse(\"14 avr. 2014\"));\r\n    assertEquals(expected.getTime(), fdp.parse(\"14 avr 2014\"));\r\n}",
  "annotations" : [ "ParameterizedTest" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\time\\FastDateParserTest.java",
  "methodName" : "testLang303",
  "sourceCode" : "@Test\r\nvoid testLang303() throws ParseException {\r\n    DateParser parser = getInstance(YMD_SLASH);\r\n    final Calendar cal = Calendar.getInstance();\r\n    cal.set(2004, Calendar.DECEMBER, 31);\r\n    final Date date = parser.parse(\"2004/11/31\");\r\n    parser = SerializationUtils.deserialize(SerializationUtils.serialize((Serializable) parser));\r\n    assertEquals(date, parser.parse(\"2004/11/31\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\time\\FastDateParserTest.java",
  "methodName" : "testLang538",
  "sourceCode" : "@Test\r\nvoid testLang538() throws ParseException {\r\n    final DateParser parser = getInstance(\"yyyy-MM-dd'T'HH:mm:ss.SSS'Z'\", TimeZones.GMT);\r\n    final Calendar cal = Calendar.getInstance(TimeZone.getTimeZone(\"GMT-8\"));\r\n    cal.clear();\r\n    cal.set(2009, Calendar.OCTOBER, 16, 8, 42, 16);\r\n    assertEquals(cal.getTime(), parser.parse(\"2009-10-16T16:42:16.000Z\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\time\\FastDateParserTest.java",
  "methodName" : "testLang996",
  "sourceCode" : "@ParameterizedTest\r\n@MethodSource(DATE_PARSER_PARAMETERS)\r\nvoid testLang996(final TriFunction<String, TimeZone, Locale, DateParser> dpProvider) throws ParseException {\r\n    final Calendar expected = Calendar.getInstance(NEW_YORK, Locale.US);\r\n    expected.clear();\r\n    expected.set(2014, Calendar.MAY, 14);\r\n    final DateParser fdp = getInstance(dpProvider, \"ddMMMyyyy\", NEW_YORK, Locale.US);\r\n    assertEquals(expected.getTime(), fdp.parse(\"14may2014\"));\r\n    assertEquals(expected.getTime(), fdp.parse(\"14MAY2014\"));\r\n    assertEquals(expected.getTime(), fdp.parse(\"14May2014\"));\r\n}",
  "annotations" : [ "ParameterizedTest" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\time\\FastDateParserTest.java",
  "methodName" : "testLocaleMatches",
  "sourceCode" : "@Test\r\nvoid testLocaleMatches() {\r\n    final DateParser parser = getInstance(yMdHmsSZ, SWEDEN);\r\n    assertEquals(SWEDEN, parser.getLocale());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\time\\FastDateParserTest.java",
  "methodName" : "testLowYearPadding",
  "sourceCode" : "/**\r\n * Tests that pre-1000AD years get padded with yyyy\r\n *\r\n * @throws ParseException so we don't have to catch it\r\n */\r\n@Test\r\nvoid testLowYearPadding() throws ParseException {\r\n    final DateParser parser = getInstance(YMD_SLASH);\r\n    final Calendar cal = Calendar.getInstance();\r\n    cal.clear();\r\n    cal.set(1, Calendar.JANUARY, 1);\r\n    assertEquals(cal.getTime(), parser.parse(\"0001/01/01\"));\r\n    cal.set(10, Calendar.JANUARY, 1);\r\n    assertEquals(cal.getTime(), parser.parse(\"0010/01/01\"));\r\n    cal.set(100, Calendar.JANUARY, 1);\r\n    assertEquals(cal.getTime(), parser.parse(\"0100/01/01\"));\r\n    cal.set(999, Calendar.JANUARY, 1);\r\n    assertEquals(cal.getTime(), parser.parse(\"0999/01/01\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\time\\FastDateParserTest.java",
  "methodName" : "testMilleniumBug",
  "sourceCode" : "@Test\r\nvoid testMilleniumBug() throws ParseException {\r\n    final DateParser parser = getInstance(DMY_DOT);\r\n    final Calendar cal = Calendar.getInstance();\r\n    cal.clear();\r\n    cal.set(1000, Calendar.JANUARY, 1);\r\n    assertEquals(cal.getTime(), parser.parse(\"01.01.1000\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\time\\FastDateParserTest.java",
  "methodName" : "testParseLongShort",
  "sourceCode" : "@ParameterizedTest\r\n@MethodSource(DATE_PARSER_PARAMETERS)\r\nvoid testParseLongShort(final TriFunction<String, TimeZone, Locale, DateParser> dpProvider) throws ParseException {\r\n    final Calendar cal = Calendar.getInstance(NEW_YORK, Locale.US);\r\n    cal.clear();\r\n    cal.set(2003, Calendar.FEBRUARY, 10, 15, 33, 20);\r\n    cal.set(Calendar.MILLISECOND, 989);\r\n    cal.setTimeZone(NEW_YORK);\r\n    DateParser fdf = getInstance(dpProvider, \"yyyy GGGG MMMM dddd aaaa EEEE HHHH mmmm ssss SSSS ZZZZ\", NEW_YORK, Locale.US);\r\n    assertEquals(cal.getTime(), fdf.parse(\"2003 AD February 0010 PM Monday 0015 0033 0020 0989 GMT-05:00\"));\r\n    cal.set(Calendar.ERA, GregorianCalendar.BC);\r\n    final Date parse = fdf.parse(\"2003 BC February 0010 PM Saturday 0015 0033 0020 0989 GMT-05:00\");\r\n    assertEquals(cal.getTime(), parse);\r\n    fdf = getInstance(null, \"y G M d a E H m s S Z\", NEW_YORK, Locale.US);\r\n    assertEquals(cal.getTime(), fdf.parse(\"03 BC 2 10 PM Sat 15 33 20 989 -0500\"));\r\n    cal.set(Calendar.ERA, GregorianCalendar.AD);\r\n    assertEquals(cal.getTime(), fdf.parse(\"03 AD 2 10 PM Saturday 15 33 20 989 -0500\"));\r\n}",
  "annotations" : [ "ParameterizedTest" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\time\\FastDateParserTest.java",
  "methodName" : "testParseNumerics",
  "sourceCode" : "@ParameterizedTest\r\n@MethodSource(DATE_PARSER_PARAMETERS)\r\nvoid testParseNumerics(final TriFunction<String, TimeZone, Locale, DateParser> dpProvider) throws ParseException {\r\n    final Calendar cal = Calendar.getInstance(NEW_YORK, Locale.US);\r\n    cal.clear();\r\n    cal.set(2003, Calendar.FEBRUARY, 10, 15, 33, 20);\r\n    cal.set(Calendar.MILLISECOND, 989);\r\n    final DateParser fdf = getInstance(dpProvider, \"yyyyMMddHHmmssSSS\", NEW_YORK, Locale.US);\r\n    assertEquals(cal.getTime(), fdf.parse(\"20030210153320989\"));\r\n}",
  "annotations" : [ "ParameterizedTest" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\time\\FastDateParserTest.java",
  "methodName" : "testParseOffset",
  "sourceCode" : "@Test\r\nvoid testParseOffset() {\r\n    final DateParser parser = getInstance(YMD_SLASH);\r\n    final Date date = parser.parse(\"Today is 2015/07/04\", new ParsePosition(9));\r\n    final Calendar cal = Calendar.getInstance();\r\n    cal.clear();\r\n    cal.set(2015, Calendar.JULY, 4);\r\n    assertEquals(cal.getTime(), date);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\time\\FastDateParserTest.java",
  "methodName" : "testParses",
  "sourceCode" : "@CartesianTest\r\n@CartesianTest.MethodFactory(\"testParsesFactory\")\r\n// Check that all Locales can parse the formats we use\r\nvoid testParses(final String format, final Locale locale, final TimeZone timeZone, final int year) throws Exception {\r\n    final Calendar cal = getEraStart(year, timeZone, locale);\r\n    final Date centuryStart = cal.getTime();\r\n    cal.set(Calendar.MONTH, 1);\r\n    cal.set(Calendar.DAY_OF_MONTH, 10);\r\n    final Date in = cal.getTime();\r\n    final FastDateParser fastDateParser = new FastDateParser(format, timeZone, locale, centuryStart);\r\n    validateSdfFormatFdpParseEquality(format, locale, timeZone, fastDateParser, in, year, centuryStart);\r\n}",
  "annotations" : [ "CartesianTest", "CartesianTest.MethodFactory" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\time\\FastDateParserTest.java",
  "methodName" : "testParsesKnownJava16Ea25Failure",
  "sourceCode" : "/**\r\n * Fails on Java 16 Early Access build 25 and above, last tested with build 36.\r\n */\r\n@Test\r\nvoid testParsesKnownJava16Ea25Failure() throws Exception {\r\n    final String format = LONG_FORMAT;\r\n    final int year = 2003;\r\n    final Locale locale = new Locale.Builder().setLanguage(\"sq\").setRegion(\"MK\").build();\r\n    assertEquals(\"sq_MK\", locale.toString());\r\n    assertNotNull(locale);\r\n    final TimeZone timeZone = NEW_YORK;\r\n    final Calendar cal = getEraStart(year, timeZone, locale);\r\n    final Date centuryStart = cal.getTime();\r\n    cal.set(Calendar.MONTH, 1);\r\n    cal.set(Calendar.DAY_OF_MONTH, 10);\r\n    final Date in = cal.getTime();\r\n    final FastDateParser fastDateParser = new FastDateParser(format, timeZone, locale, centuryStart);\r\n    validateSdfFormatFdpParseEquality(format, locale, timeZone, fastDateParser, in, year, centuryStart);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\time\\FastDateParserTest.java",
  "methodName" : "testParseZone",
  "sourceCode" : "@ParameterizedTest\r\n@MethodSource(DATE_PARSER_PARAMETERS)\r\nvoid testParseZone(final TriFunction<String, TimeZone, Locale, DateParser> dpProvider) throws ParseException {\r\n    final Calendar cal = Calendar.getInstance(NEW_YORK, Locale.US);\r\n    cal.clear();\r\n    cal.set(2003, Calendar.JULY, 10, 16, 33, 20);\r\n    final DateParser fdf = getInstance(dpProvider, yMdHmsSZ, NEW_YORK, Locale.US);\r\n    assertEquals(cal.getTime(), fdf.parse(\"2003-07-10T15:33:20.000 -0500\"));\r\n    assertEquals(cal.getTime(), fdf.parse(\"2003-07-10T15:33:20.000 GMT-05:00\"));\r\n    assertEquals(cal.getTime(), fdf.parse(\"2003-07-10T16:33:20.000 Eastern Daylight Time\"));\r\n    assertEquals(cal.getTime(), fdf.parse(\"2003-07-10T16:33:20.000 EDT\"));\r\n    cal.setTimeZone(TimeZone.getTimeZone(\"GMT-3\"));\r\n    cal.set(2003, Calendar.FEBRUARY, 10, 9, 0, 0);\r\n    assertEquals(cal.getTime(), fdf.parse(\"2003-02-10T09:00:00.000 -0300\"));\r\n    cal.setTimeZone(TimeZone.getTimeZone(\"GMT+5\"));\r\n    cal.set(2003, Calendar.FEBRUARY, 10, 15, 5, 6);\r\n    assertEquals(cal.getTime(), fdf.parse(\"2003-02-10T15:05:06.000 +0500\"));\r\n}",
  "annotations" : [ "ParameterizedTest" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\time\\FastDateParserTest.java",
  "methodName" : "testPatternMatches",
  "sourceCode" : "@Test\r\nvoid testPatternMatches() {\r\n    final DateParser parser = getInstance(yMdHmsSZ);\r\n    assertEquals(yMdHmsSZ, parser.getPattern());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\time\\FastDateParserTest.java",
  "methodName" : "testQuotes",
  "sourceCode" : "@ParameterizedTest\r\n@MethodSource(DATE_PARSER_PARAMETERS)\r\nvoid testQuotes(final TriFunction<String, TimeZone, Locale, DateParser> dpProvider) throws ParseException {\r\n    final Calendar cal = Calendar.getInstance(NEW_YORK, Locale.US);\r\n    cal.clear();\r\n    cal.set(2003, Calendar.FEBRUARY, 10, 15, 33, 20);\r\n    cal.set(Calendar.MILLISECOND, 989);\r\n    final DateParser fdf = getInstance(dpProvider, \"''yyyyMMdd'A''B'HHmmssSSS''\", NEW_YORK, Locale.US);\r\n    assertEquals(cal.getTime(), fdf.parse(\"'20030210A'B153320989'\"));\r\n}",
  "annotations" : [ "ParameterizedTest" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\time\\FastDateParserTest.java",
  "methodName" : "testShortDateStyleWithLocales",
  "sourceCode" : "/**\r\n * Test case for {@link FastDateParser#FastDateParser(String, TimeZone, Locale)}.\r\n *\r\n * @throws ParseException so we don't have to catch it\r\n */\r\n@Test\r\nvoid testShortDateStyleWithLocales() throws ParseException {\r\n    DateParser fdf = getDateInstance(FastDateFormat.SHORT, Locale.US);\r\n    final Calendar cal = Calendar.getInstance();\r\n    cal.clear();\r\n    cal.set(2004, Calendar.FEBRUARY, 3);\r\n    assertEquals(cal.getTime(), fdf.parse(\"2/3/04\"));\r\n    fdf = getDateInstance(FastDateFormat.SHORT, SWEDEN);\r\n    assertEquals(cal.getTime(), fdf.parse(\"2004-02-03\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\time\\FastDateParserTest.java",
  "methodName" : "testSpecialCharacters",
  "sourceCode" : "@ParameterizedTest\r\n@MethodSource(DATE_PARSER_PARAMETERS)\r\nvoid testSpecialCharacters(final TriFunction<String, TimeZone, Locale, DateParser> dpProvider) throws Exception {\r\n    // bad pattern character (at present)\r\n    testSdfAndFdp(dpProvider, \"q\", \"\", true);\r\n    // bad pattern character\r\n    testSdfAndFdp(dpProvider, \"Q\", \"\", true);\r\n    // OK\r\n    testSdfAndFdp(dpProvider, \"$\", \"$\", false);\r\n    // OK\r\n    testSdfAndFdp(dpProvider, \"?.d\", \"?.12\", false);\r\n    // OK\r\n    testSdfAndFdp(dpProvider, \"''yyyyMMdd'A''B'HHmmssSSS''\", \"'20030210A'B153320989'\", false);\r\n    // OK\r\n    testSdfAndFdp(dpProvider, \"''''yyyyMMdd'A''B'HHmmssSSS''\", \"''20030210A'B153320989'\", false);\r\n    // OK\r\n    testSdfAndFdp(dpProvider, \"'$\\\\Ed'\", \"$\\\\Ed\", false);\r\n    // quoted characters are case-sensitive\r\n    testSdfAndFdp(dpProvider, \"'QED'\", \"QED\", false);\r\n    testSdfAndFdp(dpProvider, \"'QED'\", \"qed\", true);\r\n    // case-sensitive after insensitive Month field\r\n    testSdfAndFdp(dpProvider, \"yyyy-MM-dd 'QED'\", \"2003-02-10 QED\", false);\r\n    testSdfAndFdp(dpProvider, \"yyyy-MM-dd 'QED'\", \"2003-02-10 qed\", true);\r\n}",
  "annotations" : [ "ParameterizedTest" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\time\\FastDateParserTest.java",
  "methodName" : "testTimeZoneMatches",
  "sourceCode" : "@Test\r\nvoid testTimeZoneMatches() {\r\n    final DateParser parser = getInstance(yMdHmsSZ, REYKJAVIK);\r\n    assertEquals(REYKJAVIK, parser.getTimeZone());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\time\\FastDateParserTest.java",
  "methodName" : "testToStringContainsName",
  "sourceCode" : "@Test\r\nvoid testToStringContainsName() {\r\n    final DateParser parser = getInstance(YMD_SLASH);\r\n    assertTrue(parser.toString().startsWith(\"FastDate\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\time\\FastDateParserTest.java",
  "methodName" : "testTzParses",
  "sourceCode" : "// we cannot use historic dates to test time zone parsing, some time zones have second offsets\r\n// as well as hours and minutes which makes the z formats a low fidelity round trip\r\n@ParameterizedTest\r\n@MethodSource(\"org.apache.commons.lang3.LocaleUtils#availableLocaleList()\")\r\nvoid testTzParses(final Locale locale) throws Exception {\r\n    // Check that all Locales can parse the time formats we use\r\n    final FastDateParser fdp = new FastDateParser(\"yyyy/MM/dd z\", TimeZone.getDefault(), locale);\r\n    for (final TimeZone timeZone : new TimeZone[] { NEW_YORK, REYKJAVIK, TimeZones.GMT }) {\r\n        final Calendar cal = Calendar.getInstance(timeZone, locale);\r\n        cal.clear();\r\n        cal.set(Calendar.YEAR, 2000);\r\n        cal.set(Calendar.MONTH, 1);\r\n        cal.set(Calendar.DAY_OF_MONTH, 10);\r\n        final Date expected = cal.getTime();\r\n        final Date actual = fdp.parse(\"2000/02/10 \" + timeZone.getDisplayName(locale));\r\n        assertEquals(expected, actual, \"timeZone:\" + timeZone.getID() + \" locale:\" + locale.getDisplayName());\r\n    }\r\n}",
  "annotations" : [ "ParameterizedTest" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\time\\FastDateParser_MoreOrLessTest.java",
  "methodName" : "testInputHasLessCharacters",
  "sourceCode" : "@Test\r\nvoid testInputHasLessCharacters() {\r\n    final FastDateParser parser = new FastDateParser(\"MM/dd/yyy\", TimeZone.getDefault(), Locale.getDefault());\r\n    final ParsePosition parsePosition = new ParsePosition(0);\r\n    assertNull(parser.parse(\"03/23\", parsePosition));\r\n    assertEquals(5, parsePosition.getErrorIndex());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\time\\FastDateParser_MoreOrLessTest.java",
  "methodName" : "testInputHasMoreCharacters",
  "sourceCode" : "@Test\r\nvoid testInputHasMoreCharacters() {\r\n    final FastDateParser parser = new FastDateParser(\"MM/dd\", TimeZone.getDefault(), Locale.getDefault());\r\n    final ParsePosition parsePosition = new ParsePosition(0);\r\n    final Date date = parser.parse(\"3/23/61\", parsePosition);\r\n    assertEquals(4, parsePosition.getIndex());\r\n    final Calendar calendar = Calendar.getInstance();\r\n    calendar.setTime(date);\r\n    assertEquals(2, calendar.get(Calendar.MONTH));\r\n    assertEquals(23, calendar.get(Calendar.DATE));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\time\\FastDateParser_MoreOrLessTest.java",
  "methodName" : "testInputHasPrecedingCharacters",
  "sourceCode" : "@Test\r\nvoid testInputHasPrecedingCharacters() {\r\n    final FastDateParser parser = new FastDateParser(\"MM/dd\", TimeZone.getDefault(), Locale.getDefault());\r\n    final ParsePosition parsePosition = new ParsePosition(0);\r\n    final Date date = parser.parse(\"A 3/23/61\", parsePosition);\r\n    assertNull(date);\r\n    assertEquals(0, parsePosition.getIndex());\r\n    assertEquals(0, parsePosition.getErrorIndex());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\time\\FastDateParser_MoreOrLessTest.java",
  "methodName" : "testInputHasWhitespace",
  "sourceCode" : "@Test\r\nvoid testInputHasWhitespace() {\r\n    final FastDateParser parser = new FastDateParser(\"M/d/y\", TimeZone.getDefault(), Locale.getDefault());\r\n    //SimpleDateFormat parser = new SimpleDateFormat(\"M/d/y\");\r\n    final ParsePosition parsePosition = new ParsePosition(0);\r\n    final Date date = parser.parse(\" 3/ 23/ 1961\", parsePosition);\r\n    assertEquals(12, parsePosition.getIndex());\r\n    final Calendar calendar = Calendar.getInstance();\r\n    calendar.setTime(date);\r\n    assertEquals(1961, calendar.get(Calendar.YEAR));\r\n    assertEquals(2, calendar.get(Calendar.MONTH));\r\n    assertEquals(23, calendar.get(Calendar.DATE));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\time\\FastDateParser_MoreOrLessTest.java",
  "methodName" : "testInputHasWrongCharacters",
  "sourceCode" : "@Test\r\nvoid testInputHasWrongCharacters() {\r\n    final FastDateParser parser = new FastDateParser(\"MM-dd-yyy\", TimeZone.getDefault(), Locale.getDefault());\r\n    final ParsePosition parsePosition = new ParsePosition(0);\r\n    assertNull(parser.parse(\"03/23/1961\", parsePosition));\r\n    assertEquals(2, parsePosition.getErrorIndex());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\time\\FastDateParser_MoreOrLessTest.java",
  "methodName" : "testInputHasWrongDay",
  "sourceCode" : "@Test\r\nvoid testInputHasWrongDay() {\r\n    final FastDateParser parser = new FastDateParser(\"EEEE, MM/dd/yyy\", NEW_YORK, Locale.US);\r\n    final String input = \"Thursday, 03/23/61\";\r\n    final ParsePosition parsePosition = new ParsePosition(0);\r\n    assertNotNull(parser.parse(input, parsePosition));\r\n    assertEquals(input.length(), parsePosition.getIndex());\r\n    parsePosition.setIndex(0);\r\n    assertNull(parser.parse(\"Thorsday, 03/23/61\", parsePosition));\r\n    assertEquals(0, parsePosition.getErrorIndex());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\time\\FastDateParser_MoreOrLessTest.java",
  "methodName" : "testInputHasWrongTimeZone",
  "sourceCode" : "@Test\r\nvoid testInputHasWrongTimeZone() {\r\n    final FastDateParser parser = new FastDateParser(\"mm:ss z\", NEW_YORK, Locale.US);\r\n    final String input = \"11:23 Pacific Standard Time\";\r\n    final ParsePosition parsePosition = new ParsePosition(0);\r\n    assertNotNull(parser.parse(input, parsePosition));\r\n    assertEquals(input.length(), parsePosition.getIndex());\r\n    parsePosition.setIndex(0);\r\n    assertNull(parser.parse(\"11:23 Pacific Standard \", parsePosition));\r\n    assertEquals(6, parsePosition.getErrorIndex());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\time\\FastDateParser_TimeZoneStrategyTest.java",
  "methodName" : "testLang1219",
  "sourceCode" : "@Test\r\nvoid testLang1219() throws ParseException {\r\n    final FastDateParser parser = new FastDateParser(\"dd.MM.yyyy HH:mm:ss z\", TimeZone.getDefault(), Locale.GERMAN);\r\n    final Date summer = parser.parse(\"26.10.2014 02:00:00 MESZ\");\r\n    final Date standard = parser.parse(\"26.10.2014 02:00:00 MEZ\");\r\n    assertNotEquals(summer.getTime(), standard.getTime());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\time\\FastDateParser_TimeZoneStrategyTest.java",
  "methodName" : "testTimeZoneStrategy_DateFormatSymbols",
  "sourceCode" : "@ParameterizedTest\r\n@MethodSource(\"org.apache.commons.lang3.LocaleUtils#availableLocaleList()\")\r\nvoid testTimeZoneStrategy_DateFormatSymbols(final Locale locale) {\r\n    testTimeZoneStrategyPattern_DateFormatSymbols_getZoneStrings(locale);\r\n}",
  "annotations" : [ "ParameterizedTest" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\time\\FastDateParser_TimeZoneStrategyTest.java",
  "methodName" : "testTimeZoneStrategy_TimeZone",
  "sourceCode" : "@ParameterizedTest\r\n@MethodSource(\"org.apache.commons.lang3.LocaleUtils#availableLocaleList()\")\r\nvoid testTimeZoneStrategy_TimeZone(final Locale locale) {\r\n    testTimeZoneStrategyPattern_TimeZone_getAvailableIDs(locale);\r\n}",
  "annotations" : [ "ParameterizedTest" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\time\\FastDateParser_TimeZoneStrategyTest.java",
  "methodName" : "testTimeZoneStrategyPattern_zh_HK_Hans",
  "sourceCode" : "@Test\r\nvoid testTimeZoneStrategyPattern_zh_HK_Hans() throws ParseException {\r\n    testTimeZoneStrategyPattern(\"zh_HK_#Hans\", \"?????????\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\time\\FastDateParser_TimeZoneStrategyTest.java",
  "methodName" : "testTimeZoneStrategyPatternPortugal",
  "sourceCode" : "/**\r\n * Breaks randomly on GitHub for Locale \"pt_PT\", TimeZone \"Etc/UTC\" if we do not check if the Locale's language is \"undetermined\".\r\n *\r\n * <pre>{@code\r\n * java.text.ParseException: Unparseable date: Horário do Meridiano de Greenwich: with tzDefault =\r\n * sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null], locale = pt_LU, zones[][] size = '601',\r\n * zone[] size = '7', zIndex = 3, tzDisplay = 'Horário do Meridiano de Greenwich'\r\n * }</pre>\r\n *\r\n * @throws ParseException Test failure\r\n */\r\n@Test\r\nvoid testTimeZoneStrategyPatternPortugal() throws ParseException {\r\n    testTimeZoneStrategyPattern(\"pt_PT\", \"Horário do Meridiano de Greenwich\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\time\\FastDateParser_TimeZoneStrategyTest.java",
  "methodName" : "testTimeZoneStrategyPatternSuriname",
  "sourceCode" : "/**\r\n * Breaks randomly on GitHub for Locale \"sr_ME_#Cyrl\", TimeZone \"Etc/UTC\" if we do not check if the Locale's language is \"undetermined\".\r\n *\r\n * <pre>{@code\r\n * java.text.ParseException: Unparseable date: Srednje vreme po Griniču: with tzDefault = sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",\r\n * offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null], locale = sr_ME_#Cyrl, zones[][] size = '601',\r\n * zone[] size = '7', zIndex = 3, tzDisplay = 'Srednje vreme po Griniču'\r\n * }</pre>\r\n *\r\n * @throws ParseException Test failure\r\n */\r\n@Test\r\nvoid testTimeZoneStrategyPatternSuriname() throws ParseException {\r\n    testTimeZoneStrategyPattern(\"sr_ME_#Cyrl\", \"Srednje vreme po Griniču\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\time\\FastDatePrinterTest.java",
  "methodName" : "test1806",
  "sourceCode" : "@Test\r\nvoid test1806() {\r\n    for (final Expected1806 trial : Expected1806.values()) {\r\n        final Calendar cal = initializeCalendar(trial.zone);\r\n        DatePrinter printer = getInstance(\"X\", trial.zone);\r\n        assertEquals(trial.one, printer.format(cal));\r\n        printer = getInstance(\"XX\", trial.zone);\r\n        assertEquals(trial.two, printer.format(cal));\r\n        printer = getInstance(\"XXX\", trial.zone);\r\n        assertEquals(trial.three, printer.format(cal));\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\time\\FastDatePrinterTest.java",
  "methodName" : "test1806Argument",
  "sourceCode" : "@Test\r\nvoid test1806Argument() {\r\n    assertIllegalArgumentException(() -> getInstance(\"XXXX\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\time\\FastDatePrinterTest.java",
  "methodName" : "testAppendableOptions",
  "sourceCode" : "@Test\r\nvoid testAppendableOptions() {\r\n    final DatePrinter format = getInstance(\"yyyy-MM-dd HH:mm:ss.SSS Z\", TimeZones.GMT);\r\n    final Calendar calendar = Calendar.getInstance();\r\n    final StringBuilder sb = new StringBuilder();\r\n    final String expected = format.format(calendar, sb).toString();\r\n    sb.setLength(0);\r\n    final Date date = calendar.getTime();\r\n    assertEquals(expected, format.format(date, sb).toString());\r\n    sb.setLength(0);\r\n    final long epoch = date.getTime();\r\n    assertEquals(expected, format.format(epoch, sb).toString());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\time\\FastDatePrinterTest.java",
  "methodName" : "testDayNumberOfWeek",
  "sourceCode" : "@Test\r\nvoid testDayNumberOfWeek() {\r\n    final DatePrinter printer = getInstance(\"u\");\r\n    final Calendar calendar = Calendar.getInstance();\r\n    calendar.set(Calendar.DAY_OF_WEEK, Calendar.MONDAY);\r\n    assertEquals(\"1\", printer.format(calendar.getTime()));\r\n    calendar.set(Calendar.DAY_OF_WEEK, Calendar.SATURDAY);\r\n    assertEquals(\"6\", printer.format(calendar.getTime()));\r\n    calendar.set(Calendar.DAY_OF_WEEK, Calendar.SUNDAY);\r\n    assertEquals(\"7\", printer.format(calendar.getTime()));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\time\\FastDatePrinterTest.java",
  "methodName" : "testEquals",
  "sourceCode" : "@Test\r\nvoid testEquals() {\r\n    final DatePrinter printer1 = getInstance(YYYY_MM_DD);\r\n    final DatePrinter printer2 = getInstance(YYYY_MM_DD);\r\n    assertEquals(printer1, printer2);\r\n    assertEquals(printer1.hashCode(), printer2.hashCode());\r\n    assertNotEquals(printer1, new Object());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\time\\FastDatePrinterTest.java",
  "methodName" : "testFormat",
  "sourceCode" : "@DefaultLocale(language = \"en\", country = \"US\")\r\n@DefaultTimeZone(\"America/New_York\")\r\n@Test\r\nvoid testFormat() {\r\n    final GregorianCalendar cal1 = new GregorianCalendar(2003, 0, 10, 15, 33, 20);\r\n    final GregorianCalendar cal2 = new GregorianCalendar(2003, 6, 10, 9, 0, 0);\r\n    final Date date1 = cal1.getTime();\r\n    final Date date2 = cal2.getTime();\r\n    final long millis1 = date1.getTime();\r\n    final long millis2 = date2.getTime();\r\n    DatePrinter fdf = getInstance(\"yyyy-MM-dd'T'HH:mm:ss\");\r\n    SimpleDateFormat sdf = new SimpleDateFormat(\"yyyy-MM-dd'T'HH:mm:ss\");\r\n    assertEquals(sdf.format(date1), fdf.format(date1));\r\n    assertEquals(\"2003-01-10T15:33:20\", fdf.format(date1));\r\n    assertEquals(\"2003-01-10T15:33:20\", fdf.format(cal1));\r\n    assertEquals(\"2003-01-10T15:33:20\", fdf.format(millis1));\r\n    assertEquals(\"2003-07-10T09:00:00\", fdf.format(date2));\r\n    assertEquals(\"2003-07-10T09:00:00\", fdf.format(cal2));\r\n    assertEquals(\"2003-07-10T09:00:00\", fdf.format(millis2));\r\n    fdf = getInstance(\"Z\");\r\n    assertEquals(\"-0500\", fdf.format(date1));\r\n    assertEquals(\"-0500\", fdf.format(cal1));\r\n    assertEquals(\"-0500\", fdf.format(millis1));\r\n    assertEquals(\"-0400\", fdf.format(date2));\r\n    assertEquals(\"-0400\", fdf.format(cal2));\r\n    assertEquals(\"-0400\", fdf.format(millis2));\r\n    fdf = getInstance(\"ZZ\");\r\n    assertEquals(\"-05:00\", fdf.format(date1));\r\n    assertEquals(\"-05:00\", fdf.format(cal1));\r\n    assertEquals(\"-05:00\", fdf.format(millis1));\r\n    assertEquals(\"-04:00\", fdf.format(date2));\r\n    assertEquals(\"-04:00\", fdf.format(cal2));\r\n    assertEquals(\"-04:00\", fdf.format(millis2));\r\n    final String pattern = \"GGGG GGG GG G yyyy yyy yy y MMMM MMM MM M LLLL LLL LL L\" + \" dddd ddd dd d DDDD DDD DD D EEEE EEE EE E aaaa aaa aa a zzzz zzz zz z\";\r\n    fdf = getInstance(pattern);\r\n    sdf = new SimpleDateFormat(pattern);\r\n    // SDF bug fix starting with Java 7\r\n    assertEquals(sdf.format(date1).replace(\"2003 03 03 03\", \"2003 2003 03 2003\"), fdf.format(date1));\r\n    assertEquals(sdf.format(date2).replace(\"2003 03 03 03\", \"2003 2003 03 2003\"), fdf.format(date2));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\time\\FastDatePrinterTest.java",
  "methodName" : "testHourFormats",
  "sourceCode" : "@Test\r\nvoid testHourFormats() {\r\n    final Calendar calendar = Calendar.getInstance();\r\n    calendar.clear();\r\n    final DatePrinter printer = getInstance(\"K k H h\");\r\n    calendar.set(Calendar.HOUR_OF_DAY, 0);\r\n    assertEquals(\"0 24 0 12\", printer.format(calendar));\r\n    calendar.set(Calendar.HOUR_OF_DAY, 12);\r\n    assertEquals(\"0 12 12 12\", printer.format(calendar));\r\n    calendar.set(Calendar.HOUR_OF_DAY, 23);\r\n    assertEquals(\"11 23 23 11\", printer.format(calendar));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\time\\FastDatePrinterTest.java",
  "methodName" : "testLang1103",
  "sourceCode" : "@Test\r\nvoid testLang1103() {\r\n    final Calendar cal = Calendar.getInstance(SWEDEN);\r\n    cal.set(Calendar.DAY_OF_MONTH, 2);\r\n    assertEquals(\"2\", getInstance(\"d\", SWEDEN).format(cal));\r\n    assertEquals(\"02\", getInstance(\"dd\", SWEDEN).format(cal));\r\n    assertEquals(\"002\", getInstance(\"ddd\", SWEDEN).format(cal));\r\n    assertEquals(\"0002\", getInstance(\"dddd\", SWEDEN).format(cal));\r\n    assertEquals(\"00002\", getInstance(\"ddddd\", SWEDEN).format(cal));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\time\\FastDatePrinterTest.java",
  "methodName" : "testLang303",
  "sourceCode" : "@Test\r\nvoid testLang303() {\r\n    final Calendar cal = Calendar.getInstance();\r\n    cal.set(2004, Calendar.DECEMBER, 31);\r\n    DatePrinter format = getInstance(YYYY_MM_DD);\r\n    final String output = format.format(cal);\r\n    format = SerializationUtils.deserialize(SerializationUtils.serialize((Serializable) format));\r\n    assertEquals(output, format.format(cal));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\time\\FastDatePrinterTest.java",
  "methodName" : "testLang538",
  "sourceCode" : "@Test\r\nvoid testLang538() {\r\n    // more commonly constructed with: cal = new GregorianCalendar(2009, 9, 16, 8, 42, 16)\r\n    // for the unit test to work in any time zone, constructing with GMT-8 rather than default locale time zone\r\n    final GregorianCalendar cal = new GregorianCalendar(TimeZone.getTimeZone(\"GMT-8\"));\r\n    cal.clear();\r\n    cal.set(2009, Calendar.OCTOBER, 16, 8, 42, 16);\r\n    final DatePrinter format = getInstance(\"yyyy-MM-dd'T'HH:mm:ss.SSS'Z'\", TimeZones.GMT);\r\n    assertEquals(\"2009-10-16T16:42:16.000Z\", format.format(cal.getTime()), \"dateTime\");\r\n    assertEquals(\"2009-10-16T16:42:16.000Z\", format.format(cal), \"dateTime\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\time\\FastDatePrinterTest.java",
  "methodName" : "testLang645",
  "sourceCode" : "@Test\r\nvoid testLang645() {\r\n    final Locale locale = new Locale(\"sv\", \"SE\");\r\n    final Calendar cal = Calendar.getInstance();\r\n    cal.set(2010, Calendar.JANUARY, 1, 12, 0, 0);\r\n    final Date d = cal.getTime();\r\n    final DatePrinter fdf = getInstance(\"EEEE', week 'ww\", locale);\r\n    assertEquals(\"fredag, week 53\", fdf.format(d));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\time\\FastDatePrinterTest.java",
  "methodName" : "testLang916",
  "sourceCode" : "/**\r\n * According to LANG-916 (https://issues.apache.org/jira/browse/LANG-916), the format method did contain a bug: it did not use the TimeZone data.\r\n *\r\n * This method test that the bug is fixed.\r\n */\r\n@Test\r\nvoid testLang916() {\r\n    final Calendar cal = Calendar.getInstance(TimeZone.getTimeZone(\"Europe/Paris\"));\r\n    cal.clear();\r\n    cal.set(2009, 9, 16, 8, 42, 16);\r\n    // calendar fast.\r\n    {\r\n        final String value = FastDateFormat.getInstance(\"yyyy-MM-dd'T'HH:mm:ss Z\", TimeZone.getTimeZone(\"Europe/Paris\")).format(cal);\r\n        assertEquals(\"2009-10-16T08:42:16 +0200\", value, \"calendar\");\r\n    }\r\n    {\r\n        final String value = FastDateFormat.getInstance(\"yyyy-MM-dd'T'HH:mm:ss Z\", TimeZone.getTimeZone(\"Asia/Kolkata\")).format(cal);\r\n        assertEquals(\"2009-10-16T12:12:16 +0530\", value, \"calendar\");\r\n    }\r\n    {\r\n        final String value = FastDateFormat.getInstance(\"yyyy-MM-dd'T'HH:mm:ss Z\", TimeZone.getTimeZone(\"Europe/London\")).format(cal);\r\n        assertEquals(\"2009-10-16T07:42:16 +0100\", value, \"calendar\");\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\time\\FastDatePrinterTest.java",
  "methodName" : "testLocaleMatches",
  "sourceCode" : "@Test\r\nvoid testLocaleMatches() {\r\n    final DatePrinter printer = getInstance(YYYY_MM_DD, SWEDEN);\r\n    assertEquals(SWEDEN, printer.getLocale());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\time\\FastDatePrinterTest.java",
  "methodName" : "testLowYearPadding",
  "sourceCode" : "/**\r\n * Tests that pre-1000AD years get padded with yyyy\r\n */\r\n@Test\r\nvoid testLowYearPadding() {\r\n    final Calendar cal = Calendar.getInstance();\r\n    final DatePrinter format = getInstance(YYYY_MM_DD);\r\n    cal.set(1, Calendar.JANUARY, 1);\r\n    assertEquals(\"0001/01/01\", format.format(cal));\r\n    cal.set(10, Calendar.JANUARY, 1);\r\n    assertEquals(\"0010/01/01\", format.format(cal));\r\n    cal.set(100, Calendar.JANUARY, 1);\r\n    assertEquals(\"0100/01/01\", format.format(cal));\r\n    cal.set(999, Calendar.JANUARY, 1);\r\n    assertEquals(\"0999/01/01\", format.format(cal));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\time\\FastDatePrinterTest.java",
  "methodName" : "testMilleniumBug",
  "sourceCode" : "/**\r\n * Show Bug #39410 is solved\r\n */\r\n@Test\r\nvoid testMilleniumBug() {\r\n    final Calendar cal = Calendar.getInstance();\r\n    final DatePrinter format = getInstance(\"dd.MM.yyyy\");\r\n    cal.set(1000, Calendar.JANUARY, 1);\r\n    assertEquals(\"01.01.1000\", format.format(cal));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\time\\FastDatePrinterTest.java",
  "methodName" : "testPatternMatches",
  "sourceCode" : "@Test\r\nvoid testPatternMatches() {\r\n    final DatePrinter printer = getInstance(YYYY_MM_DD);\r\n    assertEquals(YYYY_MM_DD, printer.getPattern());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\time\\FastDatePrinterTest.java",
  "methodName" : "testShortDateStyleWithLocales",
  "sourceCode" : "/**\r\n * Test case for {@link FastDateParser#FastDateParser(String, TimeZone, Locale)}.\r\n */\r\n@Test\r\nvoid testShortDateStyleWithLocales() {\r\n    final Locale usLocale = Locale.US;\r\n    final Locale swedishLocale = new Locale(\"sv\", \"SE\");\r\n    final Calendar cal = Calendar.getInstance();\r\n    cal.set(2004, Calendar.FEBRUARY, 3);\r\n    DatePrinter fdf = getDateInstance(FastDateFormat.SHORT, usLocale);\r\n    assertEquals(\"2/3/04\", fdf.format(cal));\r\n    fdf = getDateInstance(FastDateFormat.SHORT, swedishLocale);\r\n    assertEquals(\"2004-02-03\", fdf.format(cal));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\time\\FastDatePrinterTest.java",
  "methodName" : "testSimpleDate",
  "sourceCode" : "/**\r\n * testLowYearPadding showed that the date was buggy This test confirms it, getting 366 back as a date\r\n */\r\n@Test\r\nvoid testSimpleDate() {\r\n    final Calendar cal = Calendar.getInstance();\r\n    final DatePrinter format = getInstance(YYYY_MM_DD);\r\n    cal.set(2004, Calendar.DECEMBER, 31);\r\n    assertEquals(\"2004/12/31\", format.format(cal));\r\n    cal.set(999, Calendar.DECEMBER, 31);\r\n    assertEquals(\"0999/12/31\", format.format(cal));\r\n    cal.set(1, Calendar.MARCH, 2);\r\n    assertEquals(\"0001/03/02\", format.format(cal));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\time\\FastDatePrinterTest.java",
  "methodName" : "testStringBufferOptions",
  "sourceCode" : "@SuppressWarnings(\"deprecation\")\r\n@Test\r\nvoid testStringBufferOptions() {\r\n    final DatePrinter format = getInstance(\"yyyy-MM-dd HH:mm:ss.SSS Z\", TimeZones.GMT);\r\n    final Calendar calendar = Calendar.getInstance();\r\n    final StringBuffer sb = new StringBuffer();\r\n    final String expected = format.format(calendar, sb, new FieldPosition(0)).toString();\r\n    sb.setLength(0);\r\n    assertEquals(expected, format.format(calendar, sb).toString());\r\n    sb.setLength(0);\r\n    final Date date = calendar.getTime();\r\n    assertEquals(expected, format.format(date, sb, new FieldPosition(0)).toString());\r\n    sb.setLength(0);\r\n    assertEquals(expected, format.format(date, sb).toString());\r\n    sb.setLength(0);\r\n    final long epoch = date.getTime();\r\n    assertEquals(expected, format.format(epoch, sb, new FieldPosition(0)).toString());\r\n    sb.setLength(0);\r\n    assertEquals(expected, format.format(epoch, sb).toString());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\time\\FastDatePrinterTest.java",
  "methodName" : "testTimeZoneAsZ",
  "sourceCode" : "@DefaultTimeZone(\"UTC\")\r\n@Test\r\nvoid testTimeZoneAsZ() {\r\n    final Calendar c = Calendar.getInstance(FastTimeZone.getGmtTimeZone());\r\n    final FastDateFormat noColonFormat = FastDateFormat.getInstance(\"Z\");\r\n    assertEquals(\"+0000\", noColonFormat.format(c));\r\n    final FastDateFormat isoFormat = FastDateFormat.getInstance(\"ZZ\");\r\n    assertEquals(\"Z\", isoFormat.format(c));\r\n    final FastDateFormat colonFormat = FastDateFormat.getInstance(\"ZZZ\");\r\n    assertEquals(\"+00:00\", colonFormat.format(c));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\time\\FastDatePrinterTest.java",
  "methodName" : "testTimeZoneMatches",
  "sourceCode" : "@Test\r\nvoid testTimeZoneMatches() {\r\n    final DatePrinter printer = getInstance(YYYY_MM_DD, NEW_YORK);\r\n    assertEquals(NEW_YORK, printer.getTimeZone());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\time\\FastDatePrinterTest.java",
  "methodName" : "testToStringContainsName",
  "sourceCode" : "@Test\r\nvoid testToStringContainsName() {\r\n    final DatePrinter printer = getInstance(YYYY_MM_DD);\r\n    assertTrue(printer.toString().startsWith(\"FastDate\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\time\\FastDatePrinterTest.java",
  "methodName" : "testWeekYear",
  "sourceCode" : "@DefaultLocale(language = \"en\", country = \"US\")\r\n@DefaultTimeZone(\"America/New_York\")\r\n@Test\r\nvoid testWeekYear() {\r\n    final GregorianCalendar cal = new GregorianCalendar(2020, 12, 31, 0, 0, 0);\r\n    final DatePrinter printer4Digits = getInstance(\"YYYY\");\r\n    final DatePrinter printer4DigitsFallback = getInstance(\"YYY\");\r\n    final DatePrinter printer2Digits = getInstance(\"YY\");\r\n    final DatePrinter printer4DigitAnotherFallback = getInstance(\"Y\");\r\n    assertEquals(\"2021\", printer4Digits.format(cal));\r\n    assertEquals(\"2021\", printer4DigitsFallback.format(cal));\r\n    assertEquals(\"2021\", printer4DigitAnotherFallback.format(cal));\r\n    assertEquals(\"21\", printer2Digits.format(cal));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\time\\FastDatePrinterTimeZonesTest.java",
  "methodName" : "testCalendarTimezoneRespected",
  "sourceCode" : "@ParameterizedTest\r\n@MethodSource(\"data\")\r\nvoid testCalendarTimezoneRespected(final TimeZone timeZone) {\r\n    final Calendar cal = Calendar.getInstance(timeZone);\r\n    final SimpleDateFormat sdf = new SimpleDateFormat(PATTERN);\r\n    sdf.setTimeZone(timeZone);\r\n    final String expectedValue = sdf.format(cal.getTime());\r\n    final String actualValue = FastDateFormat.getInstance(PATTERN, timeZone).format(cal);\r\n    assertEquals(expectedValue, actualValue);\r\n}",
  "annotations" : [ "ParameterizedTest" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\time\\FastTimeZoneTest.java",
  "methodName" : "testBareGmt",
  "sourceCode" : "@Test\r\nvoid testBareGmt() {\r\n    assertEquals(FastTimeZone.getGmtTimeZone(), FastTimeZone.getTimeZone(TimeZones.GMT_ID));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\time\\FastTimeZoneTest.java",
  "methodName" : "testGetGmtTimeZone",
  "sourceCode" : "@Test\r\nvoid testGetGmtTimeZone() {\r\n    assertEquals(0, FastTimeZone.getGmtTimeZone().getRawOffset());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\time\\FastTimeZoneTest.java",
  "methodName" : "testGmtPrefix",
  "sourceCode" : "@Test\r\nvoid testGmtPrefix() {\r\n    assertEquals(HOURS_23, FastTimeZone.getGmtTimeZone(\"GMT+23:00\").getRawOffset());\r\n    assertEquals(-HOURS_23, FastTimeZone.getGmtTimeZone(\"GMT-23:00\").getRawOffset());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\time\\FastTimeZoneTest.java",
  "methodName" : "testHoursColonMinutes",
  "sourceCode" : "@Test\r\nvoid testHoursColonMinutes() {\r\n    assertEquals(HOURS_23, FastTimeZone.getGmtTimeZone(\"23:00\").getRawOffset());\r\n    assertEquals(HOURS_2, FastTimeZone.getGmtTimeZone(\"2:00\").getRawOffset());\r\n    assertEquals(MINUTES_59, FastTimeZone.getGmtTimeZone(\"00:59\").getRawOffset());\r\n    assertEquals(MINUTES_5, FastTimeZone.getGmtTimeZone(\"00:5\").getRawOffset());\r\n    assertEquals(HOURS_23 + MINUTES_59, FastTimeZone.getGmtTimeZone(\"23:59\").getRawOffset());\r\n    assertEquals(HOURS_2 + MINUTES_5, FastTimeZone.getGmtTimeZone(\"2:5\").getRawOffset());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\time\\FastTimeZoneTest.java",
  "methodName" : "testHoursMinutes",
  "sourceCode" : "@Test\r\nvoid testHoursMinutes() {\r\n    assertEquals(HOURS_23, FastTimeZone.getGmtTimeZone(\"2300\").getRawOffset());\r\n    assertEquals(HOURS_2, FastTimeZone.getGmtTimeZone(\"0200\").getRawOffset());\r\n    assertEquals(MINUTES_59, FastTimeZone.getGmtTimeZone(\"0059\").getRawOffset());\r\n    assertEquals(MINUTES_5, FastTimeZone.getGmtTimeZone(\"0005\").getRawOffset());\r\n    assertEquals(HOURS_23 + MINUTES_59, FastTimeZone.getGmtTimeZone(\"2359\").getRawOffset());\r\n    assertEquals(HOURS_2 + MINUTES_5, FastTimeZone.getGmtTimeZone(\"0205\").getRawOffset());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\time\\FastTimeZoneTest.java",
  "methodName" : "testOlson",
  "sourceCode" : "@Test\r\nvoid testOlson() {\r\n    assertEquals(TimeZone.getTimeZone(\"America/New_York\"), FastTimeZone.getTimeZone(\"America/New_York\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\time\\FastTimeZoneTest.java",
  "methodName" : "testSign",
  "sourceCode" : "@Test\r\nvoid testSign() {\r\n    assertEquals(HOURS_23, FastTimeZone.getGmtTimeZone(\"+23:00\").getRawOffset());\r\n    assertEquals(HOURS_2, FastTimeZone.getGmtTimeZone(\"+2:00\").getRawOffset());\r\n    assertEquals(-HOURS_23, FastTimeZone.getGmtTimeZone(\"-23:00\").getRawOffset());\r\n    assertEquals(-HOURS_2, FastTimeZone.getGmtTimeZone(\"-2:00\").getRawOffset());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\time\\FastTimeZoneTest.java",
  "methodName" : "testUTC",
  "sourceCode" : "@Test\r\nvoid testUTC() {\r\n    assertEquals(FastTimeZone.getGmtTimeZone(), FastTimeZone.getTimeZone(\"UTC\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\time\\FastTimeZoneTest.java",
  "methodName" : "testZ",
  "sourceCode" : "@Test\r\nvoid testZ() {\r\n    assertEquals(FastTimeZone.getGmtTimeZone(), FastTimeZone.getTimeZone(\"Z\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\time\\FastTimeZoneTest.java",
  "methodName" : "testZeroOffsetsReturnSingleton",
  "sourceCode" : "@Test\r\nvoid testZeroOffsetsReturnSingleton() {\r\n    assertEquals(FastTimeZone.getGmtTimeZone(), FastTimeZone.getTimeZone(\"+0\"));\r\n    assertEquals(FastTimeZone.getGmtTimeZone(), FastTimeZone.getTimeZone(\"-0\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\time\\GmtTimeZoneTest.java",
  "methodName" : "testGetID",
  "sourceCode" : "@Test\r\nvoid testGetID() {\r\n    assertEquals(\"GMT+00:00\", new GmtTimeZone(false, 0, 0).getID());\r\n    assertEquals(\"GMT+01:02\", new GmtTimeZone(false, 1, 2).getID());\r\n    assertEquals(\"GMT+11:22\", new GmtTimeZone(false, 11, 22).getID());\r\n    assertEquals(\"GMT-01:02\", new GmtTimeZone(true, 1, 2).getID());\r\n    assertEquals(\"GMT-11:22\", new GmtTimeZone(true, 11, 22).getID());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\time\\GmtTimeZoneTest.java",
  "methodName" : "testGetOffset",
  "sourceCode" : "@Test\r\nvoid testGetOffset() {\r\n    assertEquals(0, new GmtTimeZone(false, 0, 0).getOffset(234304));\r\n    assertEquals(-(6 * 60 + 30) * 60 * 1000, new GmtTimeZone(true, 6, 30).getOffset(1, 1, 1, 1, 1, 1));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\time\\GmtTimeZoneTest.java",
  "methodName" : "testGetRawOffset",
  "sourceCode" : "@Test\r\nvoid testGetRawOffset() {\r\n    assertEquals(0, new GmtTimeZone(false, 0, 0).getRawOffset());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\time\\GmtTimeZoneTest.java",
  "methodName" : "testHoursInRange",
  "sourceCode" : "@Test\r\nvoid testHoursInRange() {\r\n    assertEquals(23 * 60 * 60 * 1000, new GmtTimeZone(false, 23, 0).getRawOffset());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\time\\GmtTimeZoneTest.java",
  "methodName" : "testHoursOutOfRange",
  "sourceCode" : "@Test\r\nvoid testHoursOutOfRange() {\r\n    assertIllegalArgumentException(() -> new GmtTimeZone(false, 24, 0));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\time\\GmtTimeZoneTest.java",
  "methodName" : "testInDaylightTime",
  "sourceCode" : "@Test\r\nvoid testInDaylightTime() {\r\n    assertFalse(new GmtTimeZone(false, 0, 0).useDaylightTime());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\time\\GmtTimeZoneTest.java",
  "methodName" : "testMinutesInRange",
  "sourceCode" : "@Test\r\nvoid testMinutesInRange() {\r\n    assertEquals(59 * 60 * 1000, new GmtTimeZone(false, 0, 59).getRawOffset());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\time\\GmtTimeZoneTest.java",
  "methodName" : "testMinutesOutOfRange",
  "sourceCode" : "@Test\r\nvoid testMinutesOutOfRange() {\r\n    assertIllegalArgumentException(() -> new GmtTimeZone(false, 0, 60));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\time\\GmtTimeZoneTest.java",
  "methodName" : "testSetRawOffset",
  "sourceCode" : "@Test\r\nvoid testSetRawOffset() {\r\n    assertThrows(UnsupportedOperationException.class, () -> new GmtTimeZone(false, 0, 0).setRawOffset(0));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\time\\GmtTimeZoneTest.java",
  "methodName" : "testToString",
  "sourceCode" : "@Test\r\nvoid testToString() {\r\n    assertEquals(\"[GmtTimeZone id=\\\"GMT-12:00\\\",offset=-43200000]\", new GmtTimeZone(true, 12, 0).toString());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\time\\GmtTimeZoneTest.java",
  "methodName" : "testUseDaylightTime",
  "sourceCode" : "@Test\r\nvoid testUseDaylightTime() {\r\n    assertFalse(new GmtTimeZone(false, 0, 0).useDaylightTime());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\time\\Java15BugFastDateParserTest.java",
  "methodName" : "testJava15BuggyLocaleTest",
  "sourceCode" : "@Test\r\nvoid testJava15BuggyLocaleTest() throws ParseException {\r\n    final String buggyLocaleName = \"ff_LR_#Adlm\";\r\n    Locale buggyLocale = null;\r\n    for (final Locale locale : Locale.getAvailableLocales()) {\r\n        if (buggyLocaleName.equals(locale.toString())) {\r\n            buggyLocale = locale;\r\n            break;\r\n        }\r\n    }\r\n    if (buggyLocale == null) {\r\n        return;\r\n    }\r\n    testSingleLocale(buggyLocale);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\time\\Java15BugFastDateParserTest.java",
  "methodName" : "testJava15BuggyLocaleTestAll",
  "sourceCode" : "@ParameterizedTest\r\n@MethodSource(\"org.apache.commons.lang3.LocaleUtils#availableLocaleList()\")\r\nvoid testJava15BuggyLocaleTestAll(final Locale locale) throws ParseException {\r\n    testSingleLocale(locale);\r\n}",
  "annotations" : [ "ParameterizedTest" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\time\\Java15BugFastDateParserTest.java",
  "methodName" : "testLocales_Long_AD",
  "sourceCode" : "@ParameterizedTest\r\n@MethodSource(DATE_PARSER_PARAMETERS)\r\nvoid testLocales_Long_AD(final TriFunction<String, TimeZone, Locale, DateParser> dpProvider) throws Exception {\r\n    testLocales(dpProvider, FastDateParserTest.LONG_FORMAT, false);\r\n}",
  "annotations" : [ "ParameterizedTest" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\time\\Java15BugFastDateParserTest.java",
  "methodName" : "testLocales_Long_BC",
  "sourceCode" : "@ParameterizedTest\r\n@MethodSource(DATE_PARSER_PARAMETERS)\r\nvoid testLocales_Long_BC(final TriFunction<String, TimeZone, Locale, DateParser> dpProvider) throws Exception {\r\n    testLocales(dpProvider, FastDateParserTest.LONG_FORMAT, true);\r\n}",
  "annotations" : [ "ParameterizedTest" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\time\\Java15BugFastDateParserTest.java",
  "methodName" : "testLocales_LongNoEra_AD",
  "sourceCode" : "@ParameterizedTest\r\n@MethodSource(DATE_PARSER_PARAMETERS)\r\nvoid testLocales_LongNoEra_AD(final TriFunction<String, TimeZone, Locale, DateParser> dpProvider) throws Exception {\r\n    testLocales(dpProvider, FastDateParserTest.LONG_FORMAT_NOERA, false);\r\n}",
  "annotations" : [ "ParameterizedTest" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\time\\Java15BugFastDateParserTest.java",
  "methodName" : "testLocales_LongNoEra_BC",
  "sourceCode" : "@ParameterizedTest\r\n@MethodSource(DATE_PARSER_PARAMETERS)\r\nvoid testLocales_LongNoEra_BC(final TriFunction<String, TimeZone, Locale, DateParser> dpProvider) throws Exception {\r\n    testLocales(dpProvider, FastDateParserTest.LONG_FORMAT_NOERA, true);\r\n}",
  "annotations" : [ "ParameterizedTest" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\time\\Java15BugFastDateParserTest.java",
  "methodName" : "testLocales_Short_AD",
  "sourceCode" : "@ParameterizedTest\r\n@MethodSource(DATE_PARSER_PARAMETERS)\r\nvoid testLocales_Short_AD(final TriFunction<String, TimeZone, Locale, DateParser> dpProvider) throws Exception {\r\n    testLocales(dpProvider, FastDateParserTest.SHORT_FORMAT, false);\r\n}",
  "annotations" : [ "ParameterizedTest" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\time\\Java15BugFastDateParserTest.java",
  "methodName" : "testLocales_Short_BC",
  "sourceCode" : "@ParameterizedTest\r\n@MethodSource(DATE_PARSER_PARAMETERS)\r\nvoid testLocales_Short_BC(final TriFunction<String, TimeZone, Locale, DateParser> dpProvider) throws Exception {\r\n    testLocales(dpProvider, FastDateParserTest.SHORT_FORMAT, true);\r\n}",
  "annotations" : [ "ParameterizedTest" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\time\\Java15BugFastDateParserTest.java",
  "methodName" : "testLocales_ShortNoEra_AD",
  "sourceCode" : "@ParameterizedTest\r\n@MethodSource(DATE_PARSER_PARAMETERS)\r\nvoid testLocales_ShortNoEra_AD(final TriFunction<String, TimeZone, Locale, DateParser> dpProvider) throws Exception {\r\n    testLocales(dpProvider, FastDateParserTest.SHORT_FORMAT_NOERA, false);\r\n}",
  "annotations" : [ "ParameterizedTest" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\time\\Java15BugFastDateParserTest.java",
  "methodName" : "testLocales_ShortNoEra_BC",
  "sourceCode" : "@ParameterizedTest\r\n@MethodSource(DATE_PARSER_PARAMETERS)\r\nvoid testLocales_ShortNoEra_BC(final TriFunction<String, TimeZone, Locale, DateParser> dpProvider) throws Exception {\r\n    testLocales(dpProvider, FastDateParserTest.SHORT_FORMAT_NOERA, true);\r\n}",
  "annotations" : [ "ParameterizedTest" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\time\\StopWatchTest.java",
  "methodName" : "testBadStates",
  "sourceCode" : "/**\r\n * Tests bad states.\r\n */\r\n@Test\r\nvoid testBadStates() {\r\n    final StopWatch watch = new StopWatch();\r\n    assertThrows(IllegalStateException.class, watch::stop, \"Calling stop on an unstarted StopWatch should throw an exception.\");\r\n    assertThrows(IllegalStateException.class, watch::suspend, \"Calling suspend on an unstarted StopWatch should throw an exception.\");\r\n    assertThrows(IllegalStateException.class, watch::split, \"Calling split on a non-running StopWatch should throw an exception.\");\r\n    assertThrows(IllegalStateException.class, watch::unsplit, \"Calling unsplit on an unsplit StopWatch should throw an exception.\");\r\n    assertThrows(IllegalStateException.class, watch::resume, \"Calling resume on an unsuspended StopWatch should throw an exception.\");\r\n    watch.start();\r\n    assertThrows(IllegalStateException.class, watch::start, \"Calling start on a started StopWatch should throw an exception.\");\r\n    assertThrows(IllegalStateException.class, watch::unsplit, \"Calling unsplit on an unsplit StopWatch should throw an exception.\");\r\n    assertThrows(IllegalStateException.class, watch::getSplitTime, \"Calling getSplitTime on an unsplit StopWatch should throw an exception.\");\r\n    assertThrows(IllegalStateException.class, watch::getSplitDuration, \"Calling getSplitTime on an unsplit StopWatch should throw an exception.\");\r\n    assertThrows(IllegalStateException.class, watch::resume, \"Calling resume on an unsuspended StopWatch should throw an exception.\");\r\n    watch.stop();\r\n    assertThrows(IllegalStateException.class, watch::start, \"Calling start on a stopped StopWatch should throw an exception as it needs to be reset.\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\time\\StopWatchTest.java",
  "methodName" : "testBooleanStates",
  "sourceCode" : "@Test\r\nvoid testBooleanStates() {\r\n    final StopWatch watch = new StopWatch();\r\n    assertFalse(watch.isStarted());\r\n    assertFalse(watch.isSuspended());\r\n    assertTrue(watch.isStopped());\r\n    watch.start();\r\n    assertTrue(watch.isStarted());\r\n    assertFalse(watch.isSuspended());\r\n    assertFalse(watch.isStopped());\r\n    watch.suspend();\r\n    assertTrue(watch.isStarted());\r\n    assertTrue(watch.isSuspended());\r\n    assertFalse(watch.isStopped());\r\n    watch.stop();\r\n    assertFalse(watch.isStarted());\r\n    assertFalse(watch.isSuspended());\r\n    assertTrue(watch.isStopped());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\time\\StopWatchTest.java",
  "methodName" : "testFormatSplitTime",
  "sourceCode" : "@Test\r\nvoid testFormatSplitTime() {\r\n    final StopWatch watch = StopWatch.createStarted();\r\n    ThreadUtils.sleepQuietly(MIN_DURATION);\r\n    watch.split();\r\n    final String formatSplitTime = watch.formatSplitTime();\r\n    assertNotEquals(ZERO_TIME_ELAPSED, formatSplitTime);\r\n    assertTrue(formatSplitTime.startsWith(ZERO_HOURS_PREFIX), \"formatSplitTime\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\time\\StopWatchTest.java",
  "methodName" : "testFormatSplitTimeWithMessage",
  "sourceCode" : "@Test\r\nvoid testFormatSplitTimeWithMessage() {\r\n    final StopWatch watch = new StopWatch(MESSAGE);\r\n    watch.start();\r\n    ThreadUtils.sleepQuietly(MIN_DURATION);\r\n    watch.split();\r\n    final String formatSplitTime = watch.formatSplitTime();\r\n    assertFalse(formatSplitTime.startsWith(MESSAGE), \"formatSplitTime\");\r\n    assertTrue(formatSplitTime.startsWith(ZERO_HOURS_PREFIX), \"formatSplitTime\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\time\\StopWatchTest.java",
  "methodName" : "testFormatTime",
  "sourceCode" : "@Test\r\nvoid testFormatTime() {\r\n    final StopWatch watch = StopWatch.create();\r\n    final String formatTime = watch.formatTime();\r\n    assertEquals(ZERO_TIME_ELAPSED, formatTime);\r\n    assertTrue(formatTime.startsWith(ZERO_HOURS_PREFIX), \"formatTime\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\time\\StopWatchTest.java",
  "methodName" : "testFormatTimeWithMessage",
  "sourceCode" : "@Test\r\nvoid testFormatTimeWithMessage() {\r\n    final StopWatch watch = new StopWatch(MESSAGE);\r\n    final String formatTime = watch.formatTime();\r\n    assertFalse(formatTime.startsWith(MESSAGE), \"formatTime\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\time\\StopWatchTest.java",
  "methodName" : "testGet",
  "sourceCode" : "@Test\r\nvoid testGet() throws Throwable {\r\n    final StopWatch watch = new StopWatch();\r\n    final AtomicInteger i = new AtomicInteger();\r\n    assertEquals(1, watch.get(i::incrementAndGet));\r\n    assertEquals(2, watch.getT(i::incrementAndGet));\r\n    final IOException e = assertThrows(IOException.class, () -> watch.getT(this::throwIOException));\r\n    assertEquals(\"A\", e.getMessage());\r\n    // test state\r\n    assertTrue(watch.isSuspended());\r\n    assertEquals(3, watch.get(() -> {\r\n        assertTrue(watch.isStarted());\r\n        return i.incrementAndGet();\r\n    }));\r\n    assertTrue(watch.isSuspended());\r\n    final long nanos1 = watch.getDuration().toNanos();\r\n    assertTrue(nanos1 >= 0);\r\n    // test state\r\n    assertTrue(watch.isSuspended());\r\n    assertEquals(4, watch.getT(() -> {\r\n        assertTrue(watch.isStarted());\r\n        return i.incrementAndGet();\r\n    }));\r\n    assertTrue(watch.isSuspended());\r\n    assertTrue(watch.getDuration().toNanos() >= nanos1);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\time\\StopWatchTest.java",
  "methodName" : "testGetDuration",
  "sourceCode" : "@Test\r\nvoid testGetDuration() throws InterruptedException {\r\n    final StopWatch watch = new StopWatch();\r\n    assertEquals(Duration.ZERO, watch.getDuration());\r\n    assertEquals(ZERO_TIME_ELAPSED, watch.toString());\r\n    watch.start();\r\n    sleepPlus1(MIN_DURATION);\r\n    final long nanos = watch.getNanoTime();\r\n    assertTrue(nanos > 0, () -> \"getNanoTime(): \" + nanos);\r\n    assertTrue(DurationUtils.isPositive(watch.getDuration()));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\time\\StopWatchTest.java",
  "methodName" : "testGetSplitDuration",
  "sourceCode" : "@Test\r\nvoid testGetSplitDuration() {\r\n    // Create a mock StopWatch with a time of 2:59:01.999\r\n    final StopWatch watch = StopWatch.createStarted();\r\n    watch.split();\r\n    set(watch, 123456);\r\n    assertEquals(Duration.ofNanos(123456), watch.getSplitDuration());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\time\\StopWatchTest.java",
  "methodName" : "testGetStartInstant",
  "sourceCode" : "@Test\r\nvoid testGetStartInstant() {\r\n    final long beforeStopWatchMillis = System.currentTimeMillis();\r\n    final StopWatch watch = new StopWatch();\r\n    assertThrows(IllegalStateException.class, watch::getStartInstant, \"Calling getStartInstant on an unstarted StopWatch should throw an exception\");\r\n    watch.start();\r\n    watch.getStartInstant();\r\n    assertTrue(watch.getStartInstant().compareTo(Instant.ofEpochMilli(beforeStopWatchMillis)) >= 0);\r\n    watch.reset();\r\n    assertThrows(IllegalStateException.class, watch::getStartInstant, \"Calling getStartInstant on a reset, but unstarted StopWatch should throw an exception\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\time\\StopWatchTest.java",
  "methodName" : "testGetStartTime",
  "sourceCode" : "@Test\r\nvoid testGetStartTime() {\r\n    final long beforeStopWatchMillis = System.currentTimeMillis();\r\n    final StopWatch watch = new StopWatch();\r\n    assertThrows(IllegalStateException.class, watch::getStartTime, \"Calling getStartTime on an unstarted StopWatch should throw an exception\");\r\n    watch.start();\r\n    watch.getStartTime();\r\n    assertTrue(watch.getStartTime() >= beforeStopWatchMillis, \"getStartTime\");\r\n    watch.reset();\r\n    assertThrows(IllegalStateException.class, watch::getStartTime, \"Calling getStartTime on a reset, but unstarted StopWatch should throw an exception\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\time\\StopWatchTest.java",
  "methodName" : "testGetTime",
  "sourceCode" : "@RepeatedTest(10)\r\nvoid testGetTime() throws InterruptedException {\r\n    final StopWatch watch = new StopWatch();\r\n    assertEquals(0, watch.getTime());\r\n    assertEquals(ZERO_TIME_ELAPSED, watch.toString());\r\n    watch.start();\r\n    sleepPlus1(MIN_DURATION);\r\n    final long time = watch.getTime();\r\n    assertTrue(time > 0, () -> \"getTime() millis: \" + time);\r\n    assertTrue(time < 2000, () -> \"getTime() millis: \" + time);\r\n}",
  "annotations" : [ "RepeatedTest" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\time\\StopWatchTest.java",
  "methodName" : "testGetWithTimeUnit",
  "sourceCode" : "@Test\r\nvoid testGetWithTimeUnit() {\r\n    // Create a mock StopWatch with a time of 2:59:01.999\r\n    // @formatter:off\r\n    final StopWatch watch = createMockStopWatch(TimeUnit.HOURS.toNanos(2) + TimeUnit.MINUTES.toNanos(59) + TimeUnit.SECONDS.toNanos(1) + TimeUnit.MILLISECONDS.toNanos(999));\r\n    // @formatter:on\r\n    assertEquals(2L, watch.getTime(TimeUnit.HOURS));\r\n    assertEquals(179L, watch.getTime(TimeUnit.MINUTES));\r\n    assertEquals(10741L, watch.getTime(TimeUnit.SECONDS));\r\n    assertEquals(10741999L, watch.getTime(TimeUnit.MILLISECONDS));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\time\\StopWatchTest.java",
  "methodName" : "testLang315",
  "sourceCode" : "@Test\r\nvoid testLang315() throws InterruptedException {\r\n    final StopWatch watch = StopWatch.createStarted();\r\n    sleepPlus1(MIN_DURATION);\r\n    watch.suspend();\r\n    final long suspendTime = watch.getTime();\r\n    final Duration suspendDuration = watch.getDuration();\r\n    sleepPlus1(MIN_DURATION);\r\n    watch.stop();\r\n    final long totalTime = watch.getTime();\r\n    final Duration totalDuration = watch.getDuration();\r\n    assertEquals(suspendTime, totalTime);\r\n    assertEquals(suspendDuration, totalDuration);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\time\\StopWatchTest.java",
  "methodName" : "testMessage",
  "sourceCode" : "@Test\r\nvoid testMessage() {\r\n    assertNull(StopWatch.create().getMessage());\r\n    final StopWatch stopWatch = new StopWatch(MESSAGE);\r\n    assertEquals(MESSAGE, stopWatch.getMessage());\r\n    assertTrue(stopWatch.toString().startsWith(MESSAGE), \"stopWatch.toString\");\r\n    stopWatch.start();\r\n    stopWatch.split();\r\n    assertTrue(stopWatch.toSplitString().startsWith(MESSAGE), \"stopWatch.toSplitString\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\time\\StopWatchTest.java",
  "methodName" : "testRun",
  "sourceCode" : "@Test\r\nvoid testRun() throws Throwable {\r\n    final StopWatch watch = new StopWatch();\r\n    final AtomicInteger i = new AtomicInteger();\r\n    watch.run(i::incrementAndGet);\r\n    assertEquals(1, i.get());\r\n    watch.runT(i::incrementAndGet);\r\n    assertEquals(2, i.get());\r\n    final IOException e = assertThrows(IOException.class, () -> watch.runT(this::throwIOException));\r\n    assertEquals(\"A\", e.getMessage());\r\n    // test state\r\n    assertTrue(watch.isSuspended());\r\n    watch.run(() -> {\r\n        assertTrue(watch.isStarted());\r\n        i.incrementAndGet();\r\n    });\r\n    assertEquals(3, i.get());\r\n    assertTrue(watch.isSuspended());\r\n    final long nanos1 = watch.getDuration().toNanos();\r\n    assertTrue(nanos1 > 0);\r\n    // test state\r\n    assertTrue(watch.isSuspended());\r\n    watch.runT(() -> {\r\n        assertTrue(watch.isStarted());\r\n        i.incrementAndGet();\r\n    });\r\n    assertEquals(4, i.get());\r\n    assertTrue(watch.isSuspended());\r\n    assertTrue(watch.getDuration().toNanos() >= nanos1);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\time\\StopWatchTest.java",
  "methodName" : "testSimple",
  "sourceCode" : "@Test\r\nvoid testSimple() throws InterruptedException {\r\n    final StopWatch watch = StopWatch.createStarted();\r\n    final Duration sleepDuration = MIN_DURATION;\r\n    sleepPlus1(sleepDuration);\r\n    watch.stop();\r\n    final long time = watch.getTime();\r\n    final Duration duration = watch.getDuration();\r\n    assertEquals(time, watch.getTime());\r\n    assertEquals(duration, watch.getDuration());\r\n    assertTrue(duration.compareTo(sleepDuration) >= 0, () -> \"duration: \" + duration);\r\n    watch.reset();\r\n    assertEquals(0, watch.getTime());\r\n    assertEquals(Duration.ZERO, watch.getDuration());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\time\\StopWatchTest.java",
  "methodName" : "testSplit",
  "sourceCode" : "@Test\r\nvoid testSplit() throws InterruptedException {\r\n    final StopWatch watch = StopWatch.createStarted();\r\n    final Duration sleepDuration = MIN_DURATION;\r\n    final long sleepMillis = sleepDuration.toMillis();\r\n    assertTrue(sleepMillis > 0);\r\n    sleepPlus1(sleepDuration);\r\n    watch.split();\r\n    final long splitTime = watch.getSplitTime();\r\n    final Duration splitDuration = watch.getSplitDuration();\r\n    assertEquals(splitTime, watch.getSplitDuration().toMillis());\r\n    assertEquals(SPLIT_CLOCK_STR_LEN, watch.toSplitString().length(), \"Formatted split string not the correct length\");\r\n    sleepPlus1(sleepDuration);\r\n    watch.unsplit();\r\n    sleepPlus1(sleepDuration);\r\n    watch.stop();\r\n    final long totalTime = watch.getTime();\r\n    final Duration totalDuration = watch.getDuration();\r\n    assertTrue(splitTime >= sleepMillis, () -> \"splitTime: \" + splitTime);\r\n    assertTrue(splitDuration.toMillis() >= sleepMillis, () -> \"splitDuration: \" + splitDuration);\r\n    final long sleepMillisX3 = sleepMillis * 3;\r\n    assertTrue(totalTime >= sleepMillisX3 && splitTime < 21000);\r\n    assertTrue(totalDuration.toMillis() >= sleepMillisX3);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\time\\StopWatchTest.java",
  "methodName" : "testStatic",
  "sourceCode" : "@Test\r\nvoid testStatic() {\r\n    final StopWatch watch = StopWatch.createStarted();\r\n    assertTrue(watch.isStarted());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\time\\StopWatchTest.java",
  "methodName" : "testStopInstantSimple",
  "sourceCode" : "@Test\r\nvoid testStopInstantSimple() throws InterruptedException {\r\n    final StopWatch watch = StopWatch.createStarted();\r\n    final long testStartMillis = System.currentTimeMillis();\r\n    sleepPlus1(MIN_DURATION);\r\n    watch.stop();\r\n    final long testEndMillis = System.currentTimeMillis();\r\n    final Instant stopTime = watch.getStopInstant();\r\n    assertEquals(stopTime, watch.getStopInstant());\r\n    // Only less than, not equal\r\n    assertTrue(testStartMillis < testEndMillis);\r\n    assertTrue(Instant.ofEpochMilli(testStartMillis).isBefore(Instant.ofEpochMilli(testEndMillis)));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\time\\StopWatchTest.java",
  "methodName" : "testStopTimeSimple",
  "sourceCode" : "@Test\r\nvoid testStopTimeSimple() throws InterruptedException {\r\n    final StopWatch watch = StopWatch.createStarted();\r\n    final long testStartMillis = System.currentTimeMillis();\r\n    sleepPlus1(MIN_DURATION);\r\n    watch.stop();\r\n    final long testEndMillis = System.currentTimeMillis();\r\n    final long stopTime = watch.getStopTime();\r\n    assertEquals(stopTime, watch.getStopTime());\r\n    // Only less than, not equal\r\n    assertTrue(testStartMillis < testEndMillis);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\time\\StopWatchTest.java",
  "methodName" : "testSuspend",
  "sourceCode" : "@Test\r\nvoid testSuspend() throws InterruptedException {\r\n    // Watch out comparing measurements from System.currentTimeMillis() vs. System.nanoTime()\r\n    final StopWatch watch = StopWatch.createStarted();\r\n    final long testStartMillis = System.currentTimeMillis();\r\n    final long testStartNanos = System.nanoTime();\r\n    final Instant testStartInstant = Instant.ofEpochMilli(testStartMillis);\r\n    final Duration sleepDuration = MIN_DURATION;\r\n    final long sleepMillis = sleepDuration.toMillis();\r\n    sleepPlus1(sleepDuration);\r\n    watch.suspend();\r\n    final long testSuspendMillis = System.currentTimeMillis();\r\n    final long testSuspendNanos = System.nanoTime();\r\n    final long testSuspendTimeNanos = testSuspendNanos - testStartNanos;\r\n    // See sleepPlus1\r\n    final Duration testSuspendDuration = Duration.ofNanos(testSuspendTimeNanos).plusMillis(1);\r\n    final long suspendTimeFromNanos = watch.getTime();\r\n    final Duration suspendDuration = watch.getDuration();\r\n    final long stopTimeMillis = watch.getStopTime();\r\n    final Instant stopInstant = watch.getStopInstant();\r\n    assertTrue(testStartMillis <= stopTimeMillis, () -> String.format(\"testStartMillis %s <= stopTimeMillis %s\", testStartMillis, stopTimeMillis));\r\n    assertTrue(testStartInstant.isBefore(stopInstant), () -> String.format(\"testStartInstant %s < stopInstant %s\", testStartInstant, stopInstant));\r\n    assertTrue(testSuspendMillis <= stopTimeMillis, () -> String.format(\"testSuspendMillis %s <= stopTimeMillis %s\", testSuspendMillis, stopTimeMillis));\r\n    assertTrue(testSuspendMillis <= stopInstant.toEpochMilli(), () -> String.format(\"testSuspendMillis %s <= stopInstant %s\", testSuspendMillis, stopInstant));\r\n    sleepPlus1(sleepDuration);\r\n    watch.resume();\r\n    sleepPlus1(sleepDuration);\r\n    watch.stop();\r\n    final long totalTimeFromNanos = watch.getTime();\r\n    final Duration totalDuration = watch.getDuration();\r\n    assertTrue(suspendTimeFromNanos >= sleepMillis, () -> String.format(\"suspendTimeFromNanos %s >= sleepMillis %s\", suspendTimeFromNanos, sleepMillis));\r\n    assertTrue(suspendDuration.compareTo(Duration.ofMillis(sleepMillis)) >= 0, () -> String.format(\"suspendDuration %s >= sleepMillis %s\", suspendDuration, sleepMillis));\r\n    assertTrue(suspendTimeFromNanos <= testSuspendTimeNanos, () -> String.format(\"suspendTimeFromNanos %s <= testSuspendTimeNanos %s\", suspendTimeFromNanos, testSuspendTimeNanos));\r\n    assertTrue(suspendDuration.compareTo(testSuspendDuration) <= 0, () -> String.format(\"suspendDuration %s <= testSuspendDuration %s\", suspendDuration, testSuspendDuration));\r\n    final long sleepMillisX2 = sleepMillis + sleepMillis;\r\n    assertTrue(totalTimeFromNanos >= sleepMillisX2, () -> String.format(\"totalTimeFromNanos %s >= sleepMillisX2 %s\", totalTimeFromNanos, sleepMillisX2));\r\n    assertTrue(totalDuration.compareTo(Duration.ofMillis(sleepMillisX2)) >= 0, () -> String.format(\"totalDuration >= sleepMillisX2\", totalDuration, sleepMillisX2));\r\n    // Be lenient for slow running builds\r\n    final long testTooLongMillis = sleepMillis * 100;\r\n    assertTrue(totalTimeFromNanos < testTooLongMillis, () -> String.format(\"totalTimeFromNanos %s < testTooLongMillis %s\", totalTimeFromNanos, testTooLongMillis));\r\n    assertTrue(totalDuration.compareTo(Duration.ofMillis(testTooLongMillis)) < 0, () -> String.format(\"totalDuration %s < testTooLongMillis %s\", totalDuration, testTooLongMillis));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\time\\StopWatchTest.java",
  "methodName" : "testToSplitString",
  "sourceCode" : "@Test\r\nvoid testToSplitString() throws InterruptedException {\r\n    final StopWatch watch = StopWatch.createStarted();\r\n    sleepPlus1(MIN_DURATION);\r\n    watch.split();\r\n    final String splitStr = watch.toSplitString();\r\n    assertEquals(SPLIT_CLOCK_STR_LEN, splitStr.length(), \"Formatted split string not the correct length\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\time\\StopWatchTest.java",
  "methodName" : "testToSplitStringWithMessage",
  "sourceCode" : "@Test\r\nvoid testToSplitStringWithMessage() throws InterruptedException {\r\n    final StopWatch watch = new StopWatch(MESSAGE);\r\n    watch.start();\r\n    sleepPlus1(MIN_DURATION);\r\n    watch.split();\r\n    final String splitStr = watch.toSplitString();\r\n    assertEquals(SPLIT_CLOCK_STR_LEN + MESSAGE.length() + 1, splitStr.length(), \"Formatted split string not the correct length\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\time\\StopWatchTest.java",
  "methodName" : "testToString",
  "sourceCode" : "@Test\r\nvoid testToString() throws InterruptedException {\r\n    //\r\n    final StopWatch watch = StopWatch.createStarted();\r\n    sleepPlus1(MIN_DURATION);\r\n    watch.split();\r\n    final String splitStr = watch.toString();\r\n    assertEquals(SPLIT_CLOCK_STR_LEN, splitStr.length(), \"Formatted split string not the correct length\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\time\\StopWatchTest.java",
  "methodName" : "testToStringWithMessage",
  "sourceCode" : "@Test\r\nvoid testToStringWithMessage() throws InterruptedException {\r\n    assertTrue(new StopWatch(MESSAGE).toString().startsWith(MESSAGE), \"message\");\r\n    //\r\n    final StopWatch watch = new StopWatch(MESSAGE);\r\n    watch.start();\r\n    sleepPlus1(MIN_DURATION);\r\n    watch.split();\r\n    final String splitStr = watch.toString();\r\n    assertEquals(SPLIT_CLOCK_STR_LEN + MESSAGE.length() + 1, splitStr.length(), \"Formatted split string not the correct length\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\time\\TimeZonesTest.java",
  "methodName" : "testToTimeZone",
  "sourceCode" : "@Test\r\nvoid testToTimeZone() {\r\n    assertEquals(TimeZone.getDefault(), TimeZones.toTimeZone(null));\r\n    assertEquals(TimeZone.getDefault(), TimeZones.toTimeZone(TimeZone.getDefault()));\r\n    assertEquals(TimeZones.GMT, TimeZones.toTimeZone(TimeZones.GMT));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\time\\WeekYearTest.java",
  "methodName" : "testParser",
  "sourceCode" : "@ParameterizedTest\r\n@MethodSource(\"data\")\r\nvoid testParser(final Calendar vulgar, final String isoForm) {\r\n    final DateParser parser = new FastDateParser(\"YYYY-'W'ww-u\", TimeZone.getDefault(), Locale.getDefault());\r\n    final Calendar cal = Calendar.getInstance();\r\n    cal.setMinimalDaysInFirstWeek(4);\r\n    cal.setFirstDayOfWeek(Calendar.MONDAY);\r\n    cal.clear();\r\n    parser.parse(isoForm, new ParsePosition(0), cal);\r\n    assertEquals(vulgar.getTime(), cal.getTime());\r\n}",
  "annotations" : [ "ParameterizedTest" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\time\\WeekYearTest.java",
  "methodName" : "testPrinter",
  "sourceCode" : "@ParameterizedTest\r\n@MethodSource(\"data\")\r\nvoid testPrinter(final Calendar vulgar, final String isoForm) {\r\n    final FastDatePrinter printer = new FastDatePrinter(\"YYYY-'W'ww-u\", TimeZone.getDefault(), Locale.getDefault());\r\n    vulgar.setMinimalDaysInFirstWeek(4);\r\n    vulgar.setFirstDayOfWeek(Calendar.MONDAY);\r\n    assertEquals(isoForm, printer.format(vulgar));\r\n}",
  "annotations" : [ "ParameterizedTest" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\tuple\\ImmutablePairTest.java",
  "methodName" : "testBasic",
  "sourceCode" : "@Test\r\nvoid testBasic() {\r\n    ImmutablePair<Integer, String> oldPair = new ImmutablePair<>(0, \"foo\");\r\n    ImmutablePair<Integer, String> nowPair;\r\n    for (int i = 0; i < 4; i++) {\r\n        nowPair = ImmutablePair.of(oldPair);\r\n        assertEquals(0, nowPair.left.intValue());\r\n        assertEquals(0, nowPair.getLeft().intValue());\r\n        assertEquals(\"foo\", nowPair.right);\r\n        assertEquals(\"foo\", nowPair.getRight());\r\n        assertEquals(oldPair, nowPair);\r\n        oldPair = nowPair;\r\n    }\r\n    ImmutablePair<Object, String> oldPair2 = new ImmutablePair<>(null, \"bar\");\r\n    ImmutablePair<Object, String> nowPair2;\r\n    for (int i = 0; i < 4; i++) {\r\n        nowPair2 = ImmutablePair.of(oldPair2);\r\n        assertNull(nowPair2.left);\r\n        assertNull(nowPair2.getLeft());\r\n        assertEquals(\"bar\", nowPair2.right);\r\n        assertEquals(\"bar\", nowPair2.getRight());\r\n        oldPair2 = nowPair2;\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\tuple\\ImmutablePairTest.java",
  "methodName" : "testComparableLeftOnly",
  "sourceCode" : "@Test\r\nvoid testComparableLeftOnly() {\r\n    final Pair<String, String> pair1 = ImmutablePair.left(\"A\");\r\n    final Pair<String, String> pair2 = ImmutablePair.left(\"B\");\r\n    assertEquals(\"A\", pair1.getLeft());\r\n    assertEquals(\"B\", pair2.getLeft());\r\n    assertEquals(0, pair1.compareTo(pair1));\r\n    assertTrue(pair1.compareTo(pair2) < 0);\r\n    assertEquals(0, pair2.compareTo(pair2));\r\n    assertTrue(pair2.compareTo(pair1) > 0);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\tuple\\ImmutablePairTest.java",
  "methodName" : "testComparableRightOnly",
  "sourceCode" : "@Test\r\nvoid testComparableRightOnly() {\r\n    final Pair<String, String> pair1 = ImmutablePair.right(\"A\");\r\n    final Pair<String, String> pair2 = ImmutablePair.right(\"B\");\r\n    assertEquals(\"A\", pair1.getRight());\r\n    assertEquals(\"B\", pair2.getRight());\r\n    assertEquals(0, pair1.compareTo(pair1));\r\n    assertTrue(pair1.compareTo(pair2) < 0);\r\n    assertEquals(0, pair2.compareTo(pair2));\r\n    assertTrue(pair2.compareTo(pair1) > 0);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\tuple\\ImmutablePairTest.java",
  "methodName" : "testEmptyArrayGenerics",
  "sourceCode" : "@Test\r\nvoid testEmptyArrayGenerics() {\r\n    final ImmutablePair<Integer, String>[] empty = ImmutablePair.emptyArray();\r\n    assertEquals(0, empty.length);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\tuple\\ImmutablePairTest.java",
  "methodName" : "testEmptyArrayLength",
  "sourceCode" : "@Test\r\nvoid testEmptyArrayLength() {\r\n    @SuppressWarnings(\"unchecked\")\r\n    final ImmutablePair<Integer, String>[] empty = (ImmutablePair<Integer, String>[]) ImmutablePair.EMPTY_ARRAY;\r\n    assertEquals(0, empty.length);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\tuple\\ImmutablePairTest.java",
  "methodName" : "testEquals",
  "sourceCode" : "@Test\r\nvoid testEquals() {\r\n    assertEquals(ImmutablePair.of(null, \"foo\"), ImmutablePair.of(null, \"foo\"));\r\n    assertNotEquals(ImmutablePair.of(\"foo\", 0), ImmutablePair.of(\"foo\", null));\r\n    assertNotEquals(ImmutablePair.of(\"foo\", \"bar\"), ImmutablePair.of(\"xyz\", \"bar\"));\r\n    final ImmutablePair<String, String> p = ImmutablePair.of(\"foo\", \"bar\");\r\n    assertEquals(p, p);\r\n    assertNotEquals(p, new Object());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\tuple\\ImmutablePairTest.java",
  "methodName" : "testHashCode",
  "sourceCode" : "@Test\r\nvoid testHashCode() {\r\n    assertEquals(ImmutablePair.of(null, \"foo\").hashCode(), ImmutablePair.of(null, \"foo\").hashCode());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\tuple\\ImmutablePairTest.java",
  "methodName" : "testNullPairEquals",
  "sourceCode" : "@Test\r\nvoid testNullPairEquals() {\r\n    assertEquals(ImmutablePair.nullPair(), ImmutablePair.nullPair());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\tuple\\ImmutablePairTest.java",
  "methodName" : "testNullPairKey",
  "sourceCode" : "@Test\r\nvoid testNullPairKey() {\r\n    assertNull(ImmutablePair.nullPair().getKey());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\tuple\\ImmutablePairTest.java",
  "methodName" : "testNullPairLeft",
  "sourceCode" : "@Test\r\nvoid testNullPairLeft() {\r\n    assertNull(ImmutablePair.nullPair().getLeft());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\tuple\\ImmutablePairTest.java",
  "methodName" : "testNullPairRight",
  "sourceCode" : "@Test\r\nvoid testNullPairRight() {\r\n    assertNull(ImmutablePair.nullPair().getRight());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\tuple\\ImmutablePairTest.java",
  "methodName" : "testNullPairSame",
  "sourceCode" : "@Test\r\nvoid testNullPairSame() {\r\n    assertSame(ImmutablePair.nullPair(), ImmutablePair.nullPair());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\tuple\\ImmutablePairTest.java",
  "methodName" : "testNullPairTyped",
  "sourceCode" : "@Test\r\nvoid testNullPairTyped() {\r\n    // No compiler warnings\r\n    // How do we assert that?\r\n    final ImmutablePair<String, String> pair = ImmutablePair.nullPair();\r\n    assertNotNull(pair);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\tuple\\ImmutablePairTest.java",
  "methodName" : "testNullPairValue",
  "sourceCode" : "@Test\r\nvoid testNullPairValue() {\r\n    assertNull(ImmutablePair.nullPair().getValue());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\tuple\\ImmutablePairTest.java",
  "methodName" : "testOfNonNull",
  "sourceCode" : "@Test\r\nvoid testOfNonNull() {\r\n    assertNullPointerException(() -> ImmutablePair.ofNonNull(null, null));\r\n    assertNullPointerException(() -> ImmutablePair.ofNonNull(null, \"x\"));\r\n    assertNullPointerException(() -> ImmutablePair.ofNonNull(\"x\", null));\r\n    final ImmutablePair<String, String> pair = ImmutablePair.ofNonNull(\"x\", \"y\");\r\n    assertEquals(\"x\", pair.left);\r\n    assertEquals(\"y\", pair.right);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\tuple\\ImmutablePairTest.java",
  "methodName" : "testPairOfMapEntry",
  "sourceCode" : "@Test\r\nvoid testPairOfMapEntry() {\r\n    assertSame(ImmutablePair.nullPair(), ImmutablePair.of(null));\r\n    final HashMap<Integer, String> map = new HashMap<>();\r\n    map.put(0, \"foo\");\r\n    final Entry<Integer, String> entry = map.entrySet().iterator().next();\r\n    final Pair<Integer, String> pair = ImmutablePair.of(entry);\r\n    assertEquals(entry.getKey(), pair.getLeft());\r\n    assertEquals(entry.getValue(), pair.getRight());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\tuple\\ImmutablePairTest.java",
  "methodName" : "testPairOfObjects",
  "sourceCode" : "@Test\r\nvoid testPairOfObjects() {\r\n    final ImmutablePair<Integer, String> pair = ImmutablePair.of(0, \"foo\");\r\n    assertEquals(0, pair.left.intValue());\r\n    assertEquals(0, pair.getLeft().intValue());\r\n    assertEquals(\"foo\", pair.right);\r\n    assertEquals(\"foo\", pair.getRight());\r\n    final ImmutablePair<Object, String> pair2 = ImmutablePair.of(null, \"bar\");\r\n    assertNull(pair2.left);\r\n    assertNull(pair2.getLeft());\r\n    assertEquals(\"bar\", pair2.right);\r\n    assertEquals(\"bar\", pair2.getRight());\r\n    final ImmutablePair<?, ?> pair3 = ImmutablePair.of(null, null);\r\n    assertNull(pair3.left);\r\n    assertNull(pair3.right);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\tuple\\ImmutablePairTest.java",
  "methodName" : "testSerialization",
  "sourceCode" : "@Test\r\nvoid testSerialization() throws Exception {\r\n    final ImmutablePair<Integer, String> origPair = ImmutablePair.of(0, \"foo\");\r\n    final ImmutablePair<Integer, String> deserializedPair = SerializationUtils.roundtrip(origPair);\r\n    assertEquals(origPair, deserializedPair);\r\n    assertEquals(origPair.hashCode(), deserializedPair.hashCode());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\tuple\\ImmutablePairTest.java",
  "methodName" : "testToString",
  "sourceCode" : "@Test\r\nvoid testToString() {\r\n    assertEquals(\"(null,null)\", ImmutablePair.of(null, null).toString());\r\n    assertEquals(\"(null,two)\", ImmutablePair.of(null, \"two\").toString());\r\n    assertEquals(\"(one,null)\", ImmutablePair.of(\"one\", null).toString());\r\n    assertEquals(\"(one,two)\", ImmutablePair.of(\"one\", \"two\").toString());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\tuple\\ImmutablePairTest.java",
  "methodName" : "testToStringLeft",
  "sourceCode" : "@Test\r\nvoid testToStringLeft() {\r\n    final Pair<String, String> pair = ImmutablePair.left(\"Key\");\r\n    assertEquals(\"(Key,null)\", pair.toString());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\tuple\\ImmutablePairTest.java",
  "methodName" : "testToStringRight",
  "sourceCode" : "@Test\r\nvoid testToStringRight() {\r\n    final Pair<String, String> pair = ImmutablePair.right(\"Value\");\r\n    assertEquals(\"(null,Value)\", pair.toString());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\tuple\\ImmutablePairTest.java",
  "methodName" : "testUnsupportedOperation",
  "sourceCode" : "@Test\r\nvoid testUnsupportedOperation() {\r\n    final ImmutablePair<Integer, String> pair = new ImmutablePair<>(0, \"foo\");\r\n    assertThrows(UnsupportedOperationException.class, () -> pair.setValue(\"any\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\tuple\\ImmutablePairTest.java",
  "methodName" : "testUseAsKeyOfHashMap",
  "sourceCode" : "@Test\r\nvoid testUseAsKeyOfHashMap() {\r\n    final HashMap<ImmutablePair<Object, Object>, String> map = new HashMap<>();\r\n    final Object o1 = new Object();\r\n    final Object o2 = new Object();\r\n    final ImmutablePair<Object, Object> key1 = ImmutablePair.of(o1, o2);\r\n    final String value1 = \"a1\";\r\n    map.put(key1, value1);\r\n    assertEquals(value1, map.get(key1));\r\n    assertEquals(value1, map.get(ImmutablePair.of(o1, o2)));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\tuple\\ImmutablePairTest.java",
  "methodName" : "testUseAsKeyOfTreeMap",
  "sourceCode" : "@Test\r\nvoid testUseAsKeyOfTreeMap() {\r\n    final TreeMap<ImmutablePair<Integer, Integer>, String> map = new TreeMap<>();\r\n    map.put(ImmutablePair.of(1, 2), \"12\");\r\n    map.put(ImmutablePair.of(1, 1), \"11\");\r\n    map.put(ImmutablePair.of(0, 1), \"01\");\r\n    final ArrayList<ImmutablePair<Integer, Integer>> expected = new ArrayList<>();\r\n    expected.add(ImmutablePair.of(0, 1));\r\n    expected.add(ImmutablePair.of(1, 1));\r\n    expected.add(ImmutablePair.of(1, 2));\r\n    final Iterator<Entry<ImmutablePair<Integer, Integer>, String>> it = map.entrySet().iterator();\r\n    for (final ImmutablePair<Integer, Integer> item : expected) {\r\n        final Entry<ImmutablePair<Integer, Integer>, String> entry = it.next();\r\n        assertEquals(item, entry.getKey());\r\n        assertEquals(item.getLeft() + \"\" + item.getRight(), entry.getValue());\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\tuple\\ImmutableTripleTest.java",
  "methodName" : "testBasic",
  "sourceCode" : "@Test\r\nvoid testBasic() {\r\n    final ImmutableTriple<Integer, String, Boolean> triple = new ImmutableTriple<>(0, \"foo\", Boolean.TRUE);\r\n    assertEquals(0, triple.left.intValue());\r\n    assertEquals(0, triple.getLeft().intValue());\r\n    assertEquals(\"foo\", triple.middle);\r\n    assertEquals(\"foo\", triple.getMiddle());\r\n    assertEquals(Boolean.TRUE, triple.right);\r\n    assertEquals(Boolean.TRUE, triple.getRight());\r\n    final ImmutableTriple<Object, String, Integer> triple2 = new ImmutableTriple<>(null, \"bar\", 42);\r\n    assertNull(triple2.left);\r\n    assertNull(triple2.getLeft());\r\n    assertEquals(\"bar\", triple2.middle);\r\n    assertEquals(\"bar\", triple2.getMiddle());\r\n    assertEquals(Integer.valueOf(42), triple2.right);\r\n    assertEquals(Integer.valueOf(42), triple2.getRight());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\tuple\\ImmutableTripleTest.java",
  "methodName" : "testEmptyArrayGenerics",
  "sourceCode" : "@Test\r\nvoid testEmptyArrayGenerics() {\r\n    final ImmutableTriple<Integer, String, Boolean>[] empty = ImmutableTriple.emptyArray();\r\n    assertEquals(0, empty.length);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\tuple\\ImmutableTripleTest.java",
  "methodName" : "testEmptyArrayLength",
  "sourceCode" : "@Test\r\nvoid testEmptyArrayLength() {\r\n    @SuppressWarnings(\"unchecked\")\r\n    final ImmutableTriple<Integer, String, Boolean>[] empty = (ImmutableTriple<Integer, String, Boolean>[]) ImmutableTriple.EMPTY_ARRAY;\r\n    assertEquals(0, empty.length);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\tuple\\ImmutableTripleTest.java",
  "methodName" : "testEquals",
  "sourceCode" : "@Test\r\nvoid testEquals() {\r\n    assertEquals(ImmutableTriple.of(null, \"foo\", 42), ImmutableTriple.of(null, \"foo\", 42));\r\n    assertNotEquals(ImmutableTriple.of(\"foo\", 0, Boolean.TRUE), ImmutableTriple.of(\"foo\", null, null));\r\n    assertNotEquals(ImmutableTriple.of(\"foo\", \"bar\", \"baz\"), ImmutableTriple.of(\"xyz\", \"bar\", \"blo\"));\r\n    final ImmutableTriple<String, String, String> p = ImmutableTriple.of(\"foo\", \"bar\", \"baz\");\r\n    assertEquals(p, p);\r\n    assertNotEquals(p, new Object());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\tuple\\ImmutableTripleTest.java",
  "methodName" : "testHashCode",
  "sourceCode" : "@Test\r\nvoid testHashCode() {\r\n    assertEquals(ImmutableTriple.of(null, \"foo\", Boolean.TRUE).hashCode(), ImmutableTriple.of(null, \"foo\", Boolean.TRUE).hashCode());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\tuple\\ImmutableTripleTest.java",
  "methodName" : "testNullTripleEquals",
  "sourceCode" : "@Test\r\nvoid testNullTripleEquals() {\r\n    assertEquals(ImmutableTriple.nullTriple(), ImmutableTriple.nullTriple());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\tuple\\ImmutableTripleTest.java",
  "methodName" : "testNullTripleLeft",
  "sourceCode" : "@Test\r\nvoid testNullTripleLeft() {\r\n    assertNull(ImmutableTriple.nullTriple().getLeft());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\tuple\\ImmutableTripleTest.java",
  "methodName" : "testNullTripleMiddle",
  "sourceCode" : "@Test\r\nvoid testNullTripleMiddle() {\r\n    assertNull(ImmutableTriple.nullTriple().getMiddle());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\tuple\\ImmutableTripleTest.java",
  "methodName" : "testNullTripleRight",
  "sourceCode" : "@Test\r\nvoid testNullTripleRight() {\r\n    assertNull(ImmutableTriple.nullTriple().getRight());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\tuple\\ImmutableTripleTest.java",
  "methodName" : "testNullTripleSame",
  "sourceCode" : "@Test\r\nvoid testNullTripleSame() {\r\n    assertSame(ImmutableTriple.nullTriple(), ImmutableTriple.nullTriple());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\tuple\\ImmutableTripleTest.java",
  "methodName" : "testNullTripleTyped",
  "sourceCode" : "@Test\r\nvoid testNullTripleTyped() {\r\n    // No compiler warnings\r\n    // How do we assert that?\r\n    final ImmutableTriple<String, String, String> triple = ImmutableTriple.nullTriple();\r\n    assertNotNull(triple);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\tuple\\ImmutableTripleTest.java",
  "methodName" : "testOf",
  "sourceCode" : "@Test\r\nvoid testOf() {\r\n    assertSame(ImmutableTriple.nullTriple(), ImmutableTriple.of(null, null, null));\r\n    assertEquals(0, ImmutableTriple.of(0, null, null).getLeft());\r\n    assertEquals(0, ImmutableTriple.of(null, 0, null).getMiddle());\r\n    assertEquals(0, ImmutableTriple.of(null, null, 0).getRight());\r\n    final ImmutableTriple<Integer, String, Boolean> triple = ImmutableTriple.of(0, \"foo\", Boolean.FALSE);\r\n    assertEquals(0, triple.left.intValue());\r\n    assertEquals(0, triple.getLeft().intValue());\r\n    assertEquals(\"foo\", triple.middle);\r\n    assertEquals(\"foo\", triple.getMiddle());\r\n    assertEquals(Boolean.FALSE, triple.right);\r\n    assertEquals(Boolean.FALSE, triple.getRight());\r\n    final ImmutableTriple<Object, String, Boolean> triple2 = ImmutableTriple.of(null, \"bar\", Boolean.TRUE);\r\n    assertNull(triple2.left);\r\n    assertNull(triple2.getLeft());\r\n    assertEquals(\"bar\", triple2.middle);\r\n    assertEquals(\"bar\", triple2.getMiddle());\r\n    assertEquals(Boolean.TRUE, triple2.right);\r\n    assertEquals(Boolean.TRUE, triple2.getRight());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\tuple\\ImmutableTripleTest.java",
  "methodName" : "testOfNonNull",
  "sourceCode" : "@Test\r\nvoid testOfNonNull() {\r\n    assertNullPointerException(() -> ImmutableTriple.ofNonNull(null, null, null));\r\n    assertNullPointerException(() -> ImmutableTriple.ofNonNull(null, null, \"z\"));\r\n    assertNullPointerException(() -> ImmutableTriple.ofNonNull(null, \"y\", \"z\"));\r\n    assertNullPointerException(() -> ImmutableTriple.ofNonNull(\"x\", null, null));\r\n    assertNullPointerException(() -> ImmutableTriple.ofNonNull(\"x\", \"y\", null));\r\n    final ImmutableTriple<String, String, String> pair = ImmutableTriple.ofNonNull(\"x\", \"y\", \"z\");\r\n    assertEquals(\"x\", pair.left);\r\n    assertEquals(\"y\", pair.middle);\r\n    assertEquals(\"z\", pair.right);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\tuple\\ImmutableTripleTest.java",
  "methodName" : "testSerialization",
  "sourceCode" : "@Test\r\nvoid testSerialization() throws Exception {\r\n    final ImmutableTriple<Integer, String, Boolean> origTriple = ImmutableTriple.of(0, \"foo\", Boolean.TRUE);\r\n    final ImmutableTriple<Integer, String, Boolean> deserializedTriple = SerializationUtils.roundtrip(origTriple);\r\n    assertEquals(origTriple, deserializedTriple);\r\n    assertEquals(origTriple.hashCode(), deserializedTriple.hashCode());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\tuple\\ImmutableTripleTest.java",
  "methodName" : "testToString",
  "sourceCode" : "@Test\r\nvoid testToString() {\r\n    assertEquals(\"(null,null,null)\", ImmutableTriple.of(null, null, null).toString());\r\n    assertEquals(\"(null,two,null)\", ImmutableTriple.of(null, \"two\", null).toString());\r\n    assertEquals(\"(one,null,null)\", ImmutableTriple.of(\"one\", null, null).toString());\r\n    assertEquals(\"(one,two,null)\", ImmutableTriple.of(\"one\", \"two\", null).toString());\r\n    assertEquals(\"(null,two,three)\", ImmutableTriple.of(null, \"two\", \"three\").toString());\r\n    assertEquals(\"(one,null,three)\", ImmutableTriple.of(\"one\", null, \"three\").toString());\r\n    assertEquals(\"(one,two,three)\", MutableTriple.of(\"one\", \"two\", \"three\").toString());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\tuple\\ImmutableTripleTest.java",
  "methodName" : "testUseAsKeyOfHashMap",
  "sourceCode" : "@Test\r\nvoid testUseAsKeyOfHashMap() {\r\n    final HashMap<ImmutableTriple<Object, Object, Object>, String> map = new HashMap<>();\r\n    final Object o1 = new Object();\r\n    final Object o2 = new Object();\r\n    final Object o3 = new Object();\r\n    final ImmutableTriple<Object, Object, Object> key1 = ImmutableTriple.of(o1, o2, o3);\r\n    final String value1 = \"a1\";\r\n    map.put(key1, value1);\r\n    assertEquals(value1, map.get(key1));\r\n    assertEquals(value1, map.get(ImmutableTriple.of(o1, o2, o3)));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\tuple\\ImmutableTripleTest.java",
  "methodName" : "testUseAsKeyOfTreeMap",
  "sourceCode" : "@Test\r\nvoid testUseAsKeyOfTreeMap() {\r\n    final TreeMap<ImmutableTriple<Integer, Integer, Integer>, String> map = new TreeMap<>();\r\n    map.put(ImmutableTriple.of(0, 1, 2), \"012\");\r\n    map.put(ImmutableTriple.of(0, 1, 1), \"011\");\r\n    map.put(ImmutableTriple.of(0, 0, 1), \"001\");\r\n    final ArrayList<ImmutableTriple<Integer, Integer, Integer>> expected = new ArrayList<>();\r\n    expected.add(ImmutableTriple.of(0, 0, 1));\r\n    expected.add(ImmutableTriple.of(0, 1, 1));\r\n    expected.add(ImmutableTriple.of(0, 1, 2));\r\n    final Iterator<Entry<ImmutableTriple<Integer, Integer, Integer>, String>> it = map.entrySet().iterator();\r\n    for (final ImmutableTriple<Integer, Integer, Integer> item : expected) {\r\n        final Entry<ImmutableTriple<Integer, Integer, Integer>, String> entry = it.next();\r\n        assertEquals(item, entry.getKey());\r\n        assertEquals(item.getLeft() + \"\" + item.getMiddle() + \"\" + item.getRight(), entry.getValue());\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\tuple\\MutablePairTest.java",
  "methodName" : "testBasic",
  "sourceCode" : "@Test\r\nvoid testBasic() {\r\n    MutablePair<Integer, String> oldPair = new MutablePair<>(0, \"foo\");\r\n    MutablePair<Integer, String> nowPair;\r\n    for (int i = 0; i < 4; i++) {\r\n        nowPair = MutablePair.of(oldPair);\r\n        assertEquals(0, nowPair.left.intValue());\r\n        assertEquals(0, nowPair.getLeft().intValue());\r\n        assertEquals(\"foo\", nowPair.right);\r\n        assertEquals(\"foo\", nowPair.getRight());\r\n        assertEquals(oldPair, nowPair);\r\n        oldPair = nowPair;\r\n    }\r\n    MutablePair<Object, String> oldPair2 = new MutablePair<>(null, \"bar\");\r\n    MutablePair<Object, String> nowPair2;\r\n    for (int i = 0; i < 4; i++) {\r\n        nowPair2 = MutablePair.of(oldPair2);\r\n        assertNull(nowPair2.left);\r\n        assertNull(nowPair2.getLeft());\r\n        assertEquals(\"bar\", nowPair2.right);\r\n        assertEquals(\"bar\", nowPair2.getRight());\r\n        oldPair2 = nowPair2;\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\tuple\\MutablePairTest.java",
  "methodName" : "testDefault",
  "sourceCode" : "@Test\r\nvoid testDefault() {\r\n    final MutablePair<Integer, String> pair = new MutablePair<>();\r\n    assertNull(pair.getLeft());\r\n    assertNull(pair.getRight());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\tuple\\MutablePairTest.java",
  "methodName" : "testEmptyArrayGenerics",
  "sourceCode" : "@Test\r\nvoid testEmptyArrayGenerics() {\r\n    final MutablePair<Integer, String>[] empty = MutablePair.emptyArray();\r\n    assertEquals(0, empty.length);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\tuple\\MutablePairTest.java",
  "methodName" : "testEmptyArrayLength",
  "sourceCode" : "@Test\r\nvoid testEmptyArrayLength() {\r\n    @SuppressWarnings(\"unchecked\")\r\n    final MutablePair<Integer, String>[] empty = (MutablePair<Integer, String>[]) MutablePair.EMPTY_ARRAY;\r\n    assertEquals(0, empty.length);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\tuple\\MutablePairTest.java",
  "methodName" : "testEquals",
  "sourceCode" : "@Test\r\nvoid testEquals() {\r\n    assertEquals(MutablePair.of(null, \"foo\"), MutablePair.of(null, \"foo\"));\r\n    assertNotEquals(MutablePair.of(\"foo\", 0), MutablePair.of(\"foo\", null));\r\n    assertNotEquals(MutablePair.of(\"foo\", \"bar\"), MutablePair.of(\"xyz\", \"bar\"));\r\n    final MutablePair<String, String> p = MutablePair.of(\"foo\", \"bar\");\r\n    assertEquals(p, p);\r\n    assertNotEquals(p, new Object());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\tuple\\MutablePairTest.java",
  "methodName" : "testHashCode",
  "sourceCode" : "@Test\r\nvoid testHashCode() {\r\n    assertEquals(MutablePair.of(null, \"foo\").hashCode(), MutablePair.of(null, \"foo\").hashCode());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\tuple\\MutablePairTest.java",
  "methodName" : "testMutate",
  "sourceCode" : "@Test\r\nvoid testMutate() {\r\n    final MutablePair<Integer, String> pair = new MutablePair<>(0, \"foo\");\r\n    pair.setLeft(42);\r\n    pair.setRight(\"bar\");\r\n    assertEquals(42, pair.getLeft().intValue());\r\n    assertEquals(\"bar\", pair.getRight());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\tuple\\MutablePairTest.java",
  "methodName" : "testOfNonNull",
  "sourceCode" : "@Test\r\nvoid testOfNonNull() {\r\n    assertNullPointerException(() -> MutablePair.ofNonNull(null, null));\r\n    assertNullPointerException(() -> MutablePair.ofNonNull(null, \"x\"));\r\n    assertNullPointerException(() -> MutablePair.ofNonNull(\"x\", null));\r\n    final MutablePair<String, String> pair = MutablePair.ofNonNull(\"x\", \"y\");\r\n    assertEquals(\"x\", pair.left);\r\n    assertEquals(\"y\", pair.right);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\tuple\\MutablePairTest.java",
  "methodName" : "testPairOfMapEntry",
  "sourceCode" : "@Test\r\nvoid testPairOfMapEntry() {\r\n    assertNull(MutablePair.of(null).getLeft());\r\n    assertNull(MutablePair.of(null).getRight());\r\n    final HashMap<Integer, String> map = new HashMap<>();\r\n    map.put(0, \"foo\");\r\n    final Entry<Integer, String> entry = map.entrySet().iterator().next();\r\n    final Pair<Integer, String> pair = MutablePair.of(entry);\r\n    assertEquals(entry.getKey(), pair.getLeft());\r\n    assertEquals(entry.getValue(), pair.getRight());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\tuple\\MutablePairTest.java",
  "methodName" : "testPairOfObjects",
  "sourceCode" : "@Test\r\nvoid testPairOfObjects() {\r\n    final MutablePair<Integer, String> pair = MutablePair.of(0, \"foo\");\r\n    assertEquals(0, pair.getLeft().intValue());\r\n    assertEquals(\"foo\", pair.getRight());\r\n    final MutablePair<Object, String> pair2 = MutablePair.of(null, \"bar\");\r\n    assertNull(pair2.getLeft());\r\n    assertEquals(\"bar\", pair2.getRight());\r\n    final MutablePair<?, ?> pair3 = MutablePair.of(null, null);\r\n    assertNull(pair3.left);\r\n    assertNull(pair3.right);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\tuple\\MutablePairTest.java",
  "methodName" : "testSerialization",
  "sourceCode" : "@Test\r\nvoid testSerialization() throws Exception {\r\n    final MutablePair<Integer, String> origPair = MutablePair.of(0, \"foo\");\r\n    final MutablePair<Integer, String> deserializedPair = SerializationUtils.roundtrip(origPair);\r\n    assertEquals(origPair, deserializedPair);\r\n    assertEquals(origPair.hashCode(), deserializedPair.hashCode());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\tuple\\MutablePairTest.java",
  "methodName" : "testToString",
  "sourceCode" : "@Test\r\nvoid testToString() {\r\n    assertEquals(\"(null,null)\", MutablePair.of(null, null).toString());\r\n    assertEquals(\"(null,two)\", MutablePair.of(null, \"two\").toString());\r\n    assertEquals(\"(one,null)\", MutablePair.of(\"one\", null).toString());\r\n    assertEquals(\"(one,two)\", MutablePair.of(\"one\", \"two\").toString());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\tuple\\MutableTripleTest.java",
  "methodName" : "testBasic",
  "sourceCode" : "@Test\r\nvoid testBasic() {\r\n    final MutableTriple<Integer, String, Boolean> triple = new MutableTriple<>(0, \"foo\", Boolean.FALSE);\r\n    assertEquals(0, triple.getLeft().intValue());\r\n    assertEquals(\"foo\", triple.getMiddle());\r\n    assertEquals(Boolean.FALSE, triple.getRight());\r\n    final MutableTriple<Object, String, String> triple2 = new MutableTriple<>(null, \"bar\", \"hello\");\r\n    assertNull(triple2.getLeft());\r\n    assertEquals(\"bar\", triple2.getMiddle());\r\n    assertEquals(\"hello\", triple2.getRight());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\tuple\\MutableTripleTest.java",
  "methodName" : "testDefault",
  "sourceCode" : "@Test\r\nvoid testDefault() {\r\n    final MutableTriple<Integer, String, Boolean> triple = new MutableTriple<>();\r\n    assertNull(triple.getLeft());\r\n    assertNull(triple.getMiddle());\r\n    assertNull(triple.getRight());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\tuple\\MutableTripleTest.java",
  "methodName" : "testEmptyArrayGenerics",
  "sourceCode" : "@Test\r\nvoid testEmptyArrayGenerics() {\r\n    final MutableTriple<Integer, String, Boolean>[] empty = MutableTriple.emptyArray();\r\n    assertEquals(0, empty.length);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\tuple\\MutableTripleTest.java",
  "methodName" : "testEmptyArrayLength",
  "sourceCode" : "@Test\r\nvoid testEmptyArrayLength() {\r\n    @SuppressWarnings(\"unchecked\")\r\n    final MutableTriple<Integer, String, Boolean>[] empty = (MutableTriple<Integer, String, Boolean>[]) MutableTriple.EMPTY_ARRAY;\r\n    assertEquals(0, empty.length);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\tuple\\MutableTripleTest.java",
  "methodName" : "testEquals",
  "sourceCode" : "@Test\r\nvoid testEquals() {\r\n    assertEquals(MutableTriple.of(null, \"foo\", \"baz\"), MutableTriple.of(null, \"foo\", \"baz\"));\r\n    assertNotEquals(MutableTriple.of(\"foo\", 0, Boolean.TRUE), MutableTriple.of(\"foo\", null, Boolean.TRUE));\r\n    assertNotEquals(MutableTriple.of(\"foo\", \"bar\", \"baz\"), MutableTriple.of(\"xyz\", \"bar\", \"baz\"));\r\n    assertNotEquals(MutableTriple.of(\"foo\", \"bar\", \"baz\"), MutableTriple.of(\"foo\", \"bar\", \"blo\"));\r\n    final MutableTriple<String, String, String> p = MutableTriple.of(\"foo\", \"bar\", \"baz\");\r\n    assertEquals(p, p);\r\n    assertNotEquals(p, new Object());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\tuple\\MutableTripleTest.java",
  "methodName" : "testHashCode",
  "sourceCode" : "@Test\r\nvoid testHashCode() {\r\n    assertEquals(MutableTriple.of(null, \"foo\", \"baz\").hashCode(), MutableTriple.of(null, \"foo\", \"baz\").hashCode());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\tuple\\MutableTripleTest.java",
  "methodName" : "testMutate",
  "sourceCode" : "@Test\r\nvoid testMutate() {\r\n    final MutableTriple<Integer, String, Boolean> triple = new MutableTriple<>(0, \"foo\", Boolean.TRUE);\r\n    triple.setLeft(42);\r\n    triple.setMiddle(\"bar\");\r\n    triple.setRight(Boolean.FALSE);\r\n    assertEquals(42, triple.getLeft().intValue());\r\n    assertEquals(\"bar\", triple.getMiddle());\r\n    assertEquals(Boolean.FALSE, triple.getRight());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\tuple\\MutableTripleTest.java",
  "methodName" : "testOfNonNull",
  "sourceCode" : "@Test\r\nvoid testOfNonNull() {\r\n    assertNullPointerException(() -> MutableTriple.ofNonNull(null, null, null));\r\n    assertNullPointerException(() -> MutableTriple.ofNonNull(null, null, \"z\"));\r\n    assertNullPointerException(() -> MutableTriple.ofNonNull(null, \"y\", \"z\"));\r\n    assertNullPointerException(() -> MutableTriple.ofNonNull(\"x\", null, null));\r\n    assertNullPointerException(() -> MutableTriple.ofNonNull(\"x\", \"y\", null));\r\n    final MutableTriple<String, String, String> pair = MutableTriple.ofNonNull(\"x\", \"y\", \"z\");\r\n    assertEquals(\"x\", pair.left);\r\n    assertEquals(\"y\", pair.middle);\r\n    assertEquals(\"z\", pair.right);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\tuple\\MutableTripleTest.java",
  "methodName" : "testSerialization",
  "sourceCode" : "@Test\r\nvoid testSerialization() throws Exception {\r\n    final MutableTriple<Integer, String, Boolean> origTriple = MutableTriple.of(0, \"foo\", Boolean.TRUE);\r\n    final MutableTriple<Integer, String, Boolean> deserializedTriple = SerializationUtils.roundtrip(origTriple);\r\n    assertEquals(origTriple, deserializedTriple);\r\n    assertEquals(origTriple.hashCode(), deserializedTriple.hashCode());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\tuple\\MutableTripleTest.java",
  "methodName" : "testToString",
  "sourceCode" : "@Test\r\nvoid testToString() {\r\n    assertEquals(\"(null,null,null)\", MutableTriple.of(null, null, null).toString());\r\n    assertEquals(\"(null,two,null)\", MutableTriple.of(null, \"two\", null).toString());\r\n    assertEquals(\"(one,null,null)\", MutableTriple.of(\"one\", null, null).toString());\r\n    assertEquals(\"(one,two,null)\", MutableTriple.of(\"one\", \"two\", null).toString());\r\n    assertEquals(\"(null,two,three)\", MutableTriple.of(null, \"two\", \"three\").toString());\r\n    assertEquals(\"(one,null,three)\", MutableTriple.of(\"one\", null, \"three\").toString());\r\n    assertEquals(\"(one,two,three)\", MutableTriple.of(\"one\", \"two\", \"three\").toString());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\tuple\\MutableTripleTest.java",
  "methodName" : "testTripleOf",
  "sourceCode" : "@Test\r\nvoid testTripleOf() {\r\n    final MutableTriple<Integer, String, Boolean> triple = MutableTriple.of(0, \"foo\", Boolean.TRUE);\r\n    assertEquals(0, triple.getLeft().intValue());\r\n    assertEquals(\"foo\", triple.getMiddle());\r\n    assertEquals(Boolean.TRUE, triple.getRight());\r\n    final MutableTriple<Object, String, String> triple2 = MutableTriple.of(null, \"bar\", \"hello\");\r\n    assertNull(triple2.getLeft());\r\n    assertEquals(\"bar\", triple2.getMiddle());\r\n    assertEquals(\"hello\", triple2.getRight());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\tuple\\PairTest.java",
  "methodName" : "testAccept",
  "sourceCode" : "@Test\r\nvoid testAccept() {\r\n    final Pair<String, String> pair1 = Pair.of(\"A\", \"D\");\r\n    final Pair<String, String> pair2 = Pair.of(\"B\", \"C\");\r\n    final Map<String, String> map = new HashMap<>();\r\n    pair1.accept(map::put);\r\n    pair2.accept(map::put);\r\n    assertEquals(\"D\", map.get(\"A\"));\r\n    assertEquals(\"C\", map.get(\"B\"));\r\n    pair1.accept(map::put);\r\n    pair2.accept(map::put);\r\n    assertEquals(\"D\", map.get(\"A\"));\r\n    assertEquals(\"C\", map.get(\"B\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\tuple\\PairTest.java",
  "methodName" : "testApply",
  "sourceCode" : "@Test\r\nvoid testApply() {\r\n    final Pair<String, String> pair1 = Pair.of(\"A\", \"D\");\r\n    final Pair<String, String> pair2 = Pair.of(\"B\", \"C\");\r\n    final Map<String, String> map = new HashMap<>();\r\n    assertNull(pair1.apply(map::put));\r\n    assertNull(pair2.apply(map::put));\r\n    assertEquals(\"D\", map.get(\"A\"));\r\n    assertEquals(\"C\", map.get(\"B\"));\r\n    assertEquals(\"D\", pair1.apply(map::put));\r\n    assertEquals(\"C\", pair2.apply(map::put));\r\n    assertEquals(\"D\", map.get(\"A\"));\r\n    assertEquals(\"C\", map.get(\"B\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\tuple\\PairTest.java",
  "methodName" : "testComparableAllDifferent",
  "sourceCode" : "@Test\r\nvoid testComparableAllDifferent() {\r\n    final Pair<String, String> pair1 = Pair.of(\"A\", \"D\");\r\n    final Pair<String, String> pair2 = Pair.of(\"B\", \"C\");\r\n    assertEquals(0, pair1.compareTo(pair1));\r\n    assertTrue(pair1.compareTo(pair2) < 0);\r\n    assertEquals(0, pair2.compareTo(pair2));\r\n    assertTrue(pair2.compareTo(pair1) > 0);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\tuple\\PairTest.java",
  "methodName" : "testComparableLeftEquals",
  "sourceCode" : "@Test\r\nvoid testComparableLeftEquals() {\r\n    final Pair<String, String> pair1 = Pair.of(\"E\", \"C\");\r\n    final Pair<String, String> pair2 = Pair.of(\"E\", \"D\");\r\n    assertEquals(0, pair1.compareTo(pair1));\r\n    assertTrue(pair1.compareTo(pair2) < 0);\r\n    assertEquals(0, pair2.compareTo(pair2));\r\n    assertTrue(pair2.compareTo(pair1) > 0);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\tuple\\PairTest.java",
  "methodName" : "testComparableRightEquals",
  "sourceCode" : "@Test\r\nvoid testComparableRightEquals() {\r\n    final Pair<String, String> pair1 = Pair.of(\"A\", \"E\");\r\n    final Pair<String, String> pair2 = Pair.of(\"B\", \"E\");\r\n    assertEquals(0, pair1.compareTo(pair1));\r\n    assertTrue(pair1.compareTo(pair2) < 0);\r\n    assertEquals(0, pair2.compareTo(pair2));\r\n    assertTrue(pair2.compareTo(pair1) > 0);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\tuple\\PairTest.java",
  "methodName" : "testCompatibilityBetweenPairs",
  "sourceCode" : "@Test\r\nvoid testCompatibilityBetweenPairs() {\r\n    final Pair<Integer, String> pair = ImmutablePair.of(0, \"foo\");\r\n    final Pair<Integer, String> pair2 = MutablePair.of(0, \"foo\");\r\n    assertEquals(pair, pair2);\r\n    assertEquals(pair.hashCode(), pair2.hashCode());\r\n    final HashSet<Pair<Integer, String>> set = new HashSet<>();\r\n    set.add(pair);\r\n    assertTrue(set.contains(pair2));\r\n    pair2.setValue(\"bar\");\r\n    assertNotEquals(pair, pair2);\r\n    assertNotEquals(pair.hashCode(), pair2.hashCode());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\tuple\\PairTest.java",
  "methodName" : "testEmptyArrayGenerics",
  "sourceCode" : "@Test\r\nvoid testEmptyArrayGenerics() {\r\n    final Pair<Integer, String>[] empty = Pair.emptyArray();\r\n    assertEquals(0, empty.length);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\tuple\\PairTest.java",
  "methodName" : "testEmptyArrayLength",
  "sourceCode" : "@Test\r\nvoid testEmptyArrayLength() {\r\n    @SuppressWarnings(\"unchecked\")\r\n    final Pair<Integer, String>[] empty = (Pair<Integer, String>[]) Pair.EMPTY_ARRAY;\r\n    assertEquals(0, empty.length);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\tuple\\PairTest.java",
  "methodName" : "testEqualsAnonynous",
  "sourceCode" : "@Test\r\nvoid testEqualsAnonynous() {\r\n    final Pair<String, String> pair = Pair.of(\"a\", \"b\");\r\n    final String key = \"a\";\r\n    final String value = \"b\";\r\n    final Map.Entry<String, String> entry = new Map.Entry<String, String>() {\r\n\r\n        @Override\r\n        public boolean equals(final Object o) {\r\n            if (!(o instanceof Map.Entry)) {\r\n                return false;\r\n            }\r\n            final Map.Entry<?, ?> e = (Map.Entry<?, ?>) o;\r\n            // FYI java.util.AbstractMap.SimpleEntry.equals(Object) and JDK-8015417\r\n            return Objects.equals(getKey(), e.getKey()) && Objects.equals(getValue(), e.getValue());\r\n        }\r\n\r\n        @Override\r\n        public String getKey() {\r\n            return key;\r\n        }\r\n\r\n        @Override\r\n        public String getValue() {\r\n            return value;\r\n        }\r\n\r\n        @Override\r\n        public int hashCode() {\r\n            return (getKey() == null ? 0 : getKey().hashCode()) ^ (getValue() == null ? 0 : getValue().hashCode());\r\n        }\r\n\r\n        @Override\r\n        public String setValue(final String value) {\r\n            return null;\r\n        }\r\n    };\r\n    final Map.Entry<String, String> entry2 = new Map.Entry<String, String>() {\r\n\r\n        @Override\r\n        public boolean equals(final Object o) {\r\n            if (!(o instanceof Map.Entry)) {\r\n                return false;\r\n            }\r\n            final Map.Entry<?, ?> e = (Map.Entry<?, ?>) o;\r\n            // FYI java.util.AbstractMap.SimpleEntry.equals(Object) and JDK-8015417\r\n            return Objects.equals(getKey(), e.getKey()) && Objects.equals(getValue(), e.getValue());\r\n        }\r\n\r\n        @Override\r\n        public String getKey() {\r\n            return key;\r\n        }\r\n\r\n        @Override\r\n        public String getValue() {\r\n            return value;\r\n        }\r\n\r\n        @Override\r\n        public int hashCode() {\r\n            return (getKey() == null ? 0 : getKey().hashCode()) ^ (getValue() == null ? 0 : getValue().hashCode());\r\n        }\r\n\r\n        @Override\r\n        public String setValue(final String value) {\r\n            return null;\r\n        }\r\n    };\r\n    assertEquals(pair, entry);\r\n    assertEquals(pair.hashCode(), entry.hashCode());\r\n    assertEquals(pair, entry2);\r\n    assertEquals(pair.hashCode(), entry2.hashCode());\r\n    assertEquals(entry, entry);\r\n    assertEquals(entry.hashCode(), entry.hashCode());\r\n    assertEquals(entry2, entry2);\r\n    assertEquals(entry2.hashCode(), entry2.hashCode());\r\n    assertEquals(entry, entry2);\r\n    assertEquals(entry.hashCode(), entry2.hashCode());\r\n    assertEquals(entry, pair);\r\n    assertEquals(entry.hashCode(), pair.hashCode());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\tuple\\PairTest.java",
  "methodName" : "testFormattable_padded",
  "sourceCode" : "@Test\r\nvoid testFormattable_padded() {\r\n    final Pair<String, String> pair = Pair.of(\"Key\", \"Value\");\r\n    assertEquals(\"         (Key,Value)\", String.format(\"%1$20s\", pair));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\tuple\\PairTest.java",
  "methodName" : "testFormattable_simple",
  "sourceCode" : "@Test\r\nvoid testFormattable_simple() {\r\n    final Pair<String, String> pair = Pair.of(\"Key\", \"Value\");\r\n    assertEquals(\"(Key,Value)\", String.format(\"%1$s\", pair));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\tuple\\PairTest.java",
  "methodName" : "testMapEntries",
  "sourceCode" : "@ParameterizedTest()\r\n@MethodSource(\"org.apache.commons.lang3.tuple.PairTest#mapClassFactory\")\r\npublic <K, V> void testMapEntries(final Class<Map<Integer, String>> clazz) throws InstantiationException, IllegalAccessException {\r\n    testMapEntry(clazz.newInstance());\r\n}",
  "annotations" : [ "ParameterizedTest" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\tuple\\PairTest.java",
  "methodName" : "testOfNonNull",
  "sourceCode" : "@Test\r\nvoid testOfNonNull() {\r\n    assertNullPointerException(() -> Pair.ofNonNull(null, null));\r\n    assertNullPointerException(() -> Pair.ofNonNull(null, \"x\"));\r\n    assertNullPointerException(() -> Pair.ofNonNull(\"x\", null));\r\n    final Pair<String, String> pair = Pair.ofNonNull(\"x\", \"y\");\r\n    assertEquals(\"x\", pair.getLeft());\r\n    assertEquals(\"y\", pair.getRight());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\tuple\\PairTest.java",
  "methodName" : "testPairOfAbstractMapSimpleEntry",
  "sourceCode" : "@Test\r\nvoid testPairOfAbstractMapSimpleEntry() {\r\n    final Entry<Integer, String> entry = new AbstractMap.SimpleEntry<>(0, \"foo\");\r\n    final Pair<Integer, String> pair = Pair.of(entry);\r\n    assertEquals(entry.getKey(), pair.getLeft());\r\n    assertEquals(entry.getValue(), pair.getRight());\r\n    assertEquals(entry, pair);\r\n    assertEquals(entry.hashCode(), pair.hashCode());\r\n    assertEquals(pair, entry);\r\n    assertEquals(pair.hashCode(), entry.hashCode());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\tuple\\PairTest.java",
  "methodName" : "testPairOfMapEntry",
  "sourceCode" : "@Test\r\nvoid testPairOfMapEntry() {\r\n    final HashMap<Integer, String> map = new HashMap<>();\r\n    map.put(0, \"foo\");\r\n    final Entry<Integer, String> entry = map.entrySet().iterator().next();\r\n    final Pair<Integer, String> pair = Pair.of(entry);\r\n    assertEquals(entry.getKey(), pair.getLeft());\r\n    assertEquals(entry.getValue(), pair.getRight());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\tuple\\PairTest.java",
  "methodName" : "testPairOfObjects",
  "sourceCode" : "@Test\r\nvoid testPairOfObjects() {\r\n    final Pair<Integer, String> pair = Pair.of(0, \"foo\");\r\n    assertInstanceOf(ImmutablePair.class, pair);\r\n    assertEquals(0, ((ImmutablePair<Integer, String>) pair).left.intValue());\r\n    assertEquals(\"foo\", ((ImmutablePair<Integer, String>) pair).right);\r\n    final Pair<Object, String> pair2 = Pair.of(null, \"bar\");\r\n    assertInstanceOf(ImmutablePair.class, pair2);\r\n    assertNull(((ImmutablePair<Object, String>) pair2).left);\r\n    assertEquals(\"bar\", ((ImmutablePair<Object, String>) pair2).right);\r\n    final Pair<?, ?> pair3 = Pair.of(null, null);\r\n    assertNull(pair3.getLeft());\r\n    assertNull(pair3.getRight());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\tuple\\PairTest.java",
  "methodName" : "testToString",
  "sourceCode" : "@Test\r\nvoid testToString() {\r\n    final Pair<String, String> pair = Pair.of(\"Key\", \"Value\");\r\n    assertEquals(\"(Key,Value)\", pair.toString());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\tuple\\PairTest.java",
  "methodName" : "testToStringCustom",
  "sourceCode" : "@Test\r\nvoid testToStringCustom() {\r\n    final Calendar date = Calendar.getInstance();\r\n    date.set(2011, Calendar.APRIL, 25);\r\n    final Pair<String, Calendar> pair = Pair.of(\"DOB\", date);\r\n    assertEquals(\"Test created on 04-25-2011\", pair.toString(\"Test created on %2$tm-%2$td-%2$tY\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\tuple\\TripleTest.java",
  "methodName" : "testComparable1",
  "sourceCode" : "@Test\r\nvoid testComparable1() {\r\n    final Triple<String, String, String> triple1 = Triple.of(\"A\", \"D\", \"A\");\r\n    final Triple<String, String, String> triple2 = Triple.of(\"B\", \"C\", \"A\");\r\n    assertEquals(0, triple1.compareTo(triple1));\r\n    assertTrue(triple1.compareTo(triple2) < 0);\r\n    assertEquals(0, triple2.compareTo(triple2));\r\n    assertTrue(triple2.compareTo(triple1) > 0);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\tuple\\TripleTest.java",
  "methodName" : "testComparable2",
  "sourceCode" : "@Test\r\nvoid testComparable2() {\r\n    final Triple<String, String, String> triple1 = Triple.of(\"A\", \"C\", \"B\");\r\n    final Triple<String, String, String> triple2 = Triple.of(\"A\", \"D\", \"B\");\r\n    assertEquals(0, triple1.compareTo(triple1));\r\n    assertTrue(triple1.compareTo(triple2) < 0);\r\n    assertEquals(0, triple2.compareTo(triple2));\r\n    assertTrue(triple2.compareTo(triple1) > 0);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\tuple\\TripleTest.java",
  "methodName" : "testComparable3",
  "sourceCode" : "@Test\r\nvoid testComparable3() {\r\n    final Triple<String, String, String> triple1 = Triple.of(\"A\", \"A\", \"D\");\r\n    final Triple<String, String, String> triple2 = Triple.of(\"A\", \"B\", \"C\");\r\n    assertEquals(0, triple1.compareTo(triple1));\r\n    assertTrue(triple1.compareTo(triple2) < 0);\r\n    assertEquals(0, triple2.compareTo(triple2));\r\n    assertTrue(triple2.compareTo(triple1) > 0);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\tuple\\TripleTest.java",
  "methodName" : "testComparable4",
  "sourceCode" : "@Test\r\nvoid testComparable4() {\r\n    final Triple<String, String, String> triple1 = Triple.of(\"B\", \"A\", \"C\");\r\n    final Triple<String, String, String> triple2 = Triple.of(\"B\", \"A\", \"D\");\r\n    assertEquals(0, triple1.compareTo(triple1));\r\n    assertTrue(triple1.compareTo(triple2) < 0);\r\n    assertEquals(0, triple2.compareTo(triple2));\r\n    assertTrue(triple2.compareTo(triple1) > 0);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\tuple\\TripleTest.java",
  "methodName" : "testCompatibilityBetweenTriples",
  "sourceCode" : "@Test\r\nvoid testCompatibilityBetweenTriples() {\r\n    final Triple<Integer, String, Boolean> triple = ImmutableTriple.of(0, \"foo\", Boolean.TRUE);\r\n    final Triple<Integer, String, Boolean> triple2 = MutableTriple.of(0, \"foo\", Boolean.TRUE);\r\n    assertEquals(triple, triple2);\r\n    assertEquals(triple.hashCode(), triple2.hashCode());\r\n    final HashSet<Triple<Integer, String, Boolean>> set = new HashSet<>();\r\n    set.add(triple);\r\n    assertTrue(set.contains(triple2));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\tuple\\TripleTest.java",
  "methodName" : "testEmptyArrayGenerics",
  "sourceCode" : "@Test\r\nvoid testEmptyArrayGenerics() {\r\n    final Triple<Integer, String, Boolean>[] empty = Triple.emptyArray();\r\n    assertEquals(0, empty.length);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\tuple\\TripleTest.java",
  "methodName" : "testEmptyArrayLength",
  "sourceCode" : "@Test\r\nvoid testEmptyArrayLength() {\r\n    @SuppressWarnings(\"unchecked\")\r\n    final Triple<Integer, String, Boolean>[] empty = (Triple<Integer, String, Boolean>[]) Triple.EMPTY_ARRAY;\r\n    assertEquals(0, empty.length);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\tuple\\TripleTest.java",
  "methodName" : "testFormattable_padded",
  "sourceCode" : "@Test\r\nvoid testFormattable_padded() {\r\n    final Triple<String, String, String> triple = Triple.of(\"Key\", \"Something\", \"Value\");\r\n    assertEquals(\"         (Key,Something,Value)\", String.format(\"%1$30s\", triple));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\tuple\\TripleTest.java",
  "methodName" : "testFormattable_simple",
  "sourceCode" : "@Test\r\nvoid testFormattable_simple() {\r\n    final Triple<String, String, String> triple = Triple.of(\"Key\", \"Something\", \"Value\");\r\n    assertEquals(\"(Key,Something,Value)\", String.format(\"%1$s\", triple));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\tuple\\TripleTest.java",
  "methodName" : "testOfNonNull",
  "sourceCode" : "@Test\r\nvoid testOfNonNull() {\r\n    assertNullPointerException(() -> Triple.ofNonNull(null, null, null));\r\n    assertNullPointerException(() -> Triple.ofNonNull(null, null, \"z\"));\r\n    assertNullPointerException(() -> Triple.ofNonNull(null, \"y\", \"z\"));\r\n    assertNullPointerException(() -> Triple.ofNonNull(\"x\", null, null));\r\n    assertNullPointerException(() -> Triple.ofNonNull(\"x\", \"y\", null));\r\n    final Triple<String, String, String> pair = Triple.ofNonNull(\"x\", \"y\", \"z\");\r\n    assertEquals(\"x\", pair.getLeft());\r\n    assertEquals(\"y\", pair.getMiddle());\r\n    assertEquals(\"z\", pair.getRight());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\tuple\\TripleTest.java",
  "methodName" : "testToString",
  "sourceCode" : "@Test\r\nvoid testToString() {\r\n    final Triple<String, String, String> triple = Triple.of(\"Key\", \"Something\", \"Value\");\r\n    assertEquals(\"(Key,Something,Value)\", triple.toString());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\tuple\\TripleTest.java",
  "methodName" : "testToStringCustom",
  "sourceCode" : "@Test\r\nvoid testToStringCustom() {\r\n    final Calendar date = Calendar.getInstance();\r\n    date.set(2011, Calendar.APRIL, 25);\r\n    final Triple<String, String, Calendar> triple = Triple.of(\"DOB\", \"string\", date);\r\n    assertEquals(\"Test created on 04-25-2011\", triple.toString(\"Test created on %3$tm-%3$td-%3$tY\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\tuple\\TripleTest.java",
  "methodName" : "testTripleOf",
  "sourceCode" : "@Test\r\nvoid testTripleOf() {\r\n    final Triple<Integer, String, Boolean> triple = Triple.of(0, \"foo\", Boolean.TRUE);\r\n    assertInstanceOf(ImmutableTriple.class, triple);\r\n    assertEquals(0, ((ImmutableTriple<Integer, String, Boolean>) triple).left.intValue());\r\n    assertEquals(\"foo\", ((ImmutableTriple<Integer, String, Boolean>) triple).middle);\r\n    assertEquals(Boolean.TRUE, ((ImmutableTriple<Integer, String, Boolean>) triple).right);\r\n    final Triple<Object, String, Long> triple2 = Triple.of(null, \"bar\", Long.valueOf(200L));\r\n    assertInstanceOf(ImmutableTriple.class, triple2);\r\n    assertNull(((ImmutableTriple<Object, String, Long>) triple2).left);\r\n    assertEquals(\"bar\", ((ImmutableTriple<Object, String, Long>) triple2).middle);\r\n    assertEquals(Long.valueOf(200L), ((ImmutableTriple<Object, String, Long>) triple2).right);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\util\\FluentBitSetTest.java",
  "methodName" : "test_and",
  "sourceCode" : "/**\r\n * Tests {@link FluentBitSet#and(FluentBitSet)}.\r\n */\r\n@Test\r\nvoid test_and() {\r\n    // Test for method void java.util.BitSet.and(BitSet)\r\n    final FluentBitSet bs = newInstance(128);\r\n    // Initialize the bottom half of the BitSet\r\n    for (int i = 64; i < 128; i++) {\r\n        bs.set(i);\r\n    }\r\n    eightFbs.and(bs);\r\n    assertNotEquals(eightFbs, bs, \"AND failed to clear bits\");\r\n    eightFbs.set(3);\r\n    bs.set(3);\r\n    eightFbs.and(bs);\r\n    assertTrue(bs.get(3), \"AND failed to maintain set bits\");\r\n    bs.and(eightFbs);\r\n    for (int i = 64; i < 128; i++) {\r\n        assertFalse(bs.get(i), \"Failed to clear extra bits in the receiver BitSet\");\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\util\\FluentBitSetTest.java",
  "methodName" : "test_and_BitSet",
  "sourceCode" : "/**\r\n * Tests {@link FluentBitSet#and(BitSet)}.\r\n */\r\n@Test\r\nvoid test_and_BitSet() {\r\n    // Test for method void java.util.BitSet.and(BitSet)\r\n    final FluentBitSet bs = newInstance(128);\r\n    // Initialize the bottom half of the BitSet\r\n    for (int i = 64; i < 128; i++) {\r\n        bs.set(i);\r\n    }\r\n    eightFbs.and(bs.bitSet());\r\n    assertNotEquals(eightFbs, bs, \"AND failed to clear bits\");\r\n    eightFbs.set(3);\r\n    bs.set(3);\r\n    eightFbs.and(bs.bitSet());\r\n    assertTrue(bs.get(3), \"AND failed to maintain set bits\");\r\n    bs.and(eightBs);\r\n    for (int i = 64; i < 128; i++) {\r\n        assertFalse(bs.get(i), \"Failed to clear extra bits in the receiver BitSet\");\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\util\\FluentBitSetTest.java",
  "methodName" : "test_andNot",
  "sourceCode" : "/**\r\n * Tests {@link FluentBitSet#andNot(BitSet)}.\r\n */\r\n@Test\r\nvoid test_andNot() {\r\n    FluentBitSet bs = (FluentBitSet) eightFbs.clone();\r\n    bs.clear(5);\r\n    final FluentBitSet bs2 = newInstance();\r\n    bs2.set(2);\r\n    bs2.set(3);\r\n    bs.andNot(bs2);\r\n    assertEquals(\"{0, 1, 4, 6, 7}\", bs.toString(), \"Incorrect bitset after andNot\");\r\n    bs = newInstance(0);\r\n    bs.andNot(bs2);\r\n    assertEquals(0, bs.size(), \"Incorrect size\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\util\\FluentBitSetTest.java",
  "methodName" : "test_andNot_BitSet",
  "sourceCode" : "/**\r\n * Tests {@link FluentBitSet#andNot(BitSet)}.\r\n */\r\n@Test\r\nvoid test_andNot_BitSet() {\r\n    FluentBitSet bs = (FluentBitSet) eightFbs.clone();\r\n    bs.clear(5);\r\n    final FluentBitSet bs2 = newInstance();\r\n    bs2.set(2);\r\n    bs2.set(3);\r\n    bs.andNot(bs2.bitSet());\r\n    assertEquals(\"{0, 1, 4, 6, 7}\", bs.toString(), \"Incorrect bitset after andNot\");\r\n    bs = newInstance(0);\r\n    bs.andNot(bs2.bitSet());\r\n    assertEquals(0, bs.size(), \"Incorrect size\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\util\\FluentBitSetTest.java",
  "methodName" : "test_cardinality",
  "sourceCode" : "/**\r\n * Tests {@link FluentBitSet#cardinality()}.\r\n */\r\n@Test\r\nvoid test_cardinality() {\r\n    // test for method int java.util.BitSet.cardinality()\r\n    final FluentBitSet bs = newInstance(500);\r\n    bs.set(5);\r\n    bs.set(32);\r\n    bs.set(63);\r\n    bs.set(64);\r\n    bs.set(71, 110);\r\n    bs.set(127, 130);\r\n    bs.set(193);\r\n    bs.set(450);\r\n    assertEquals(48, bs.cardinality(), \"cardinality() returned wrong value\");\r\n    bs.flip(0, 500);\r\n    assertEquals(452, bs.cardinality(), \"cardinality() returned wrong value\");\r\n    bs.clear();\r\n    assertEquals(0, bs.cardinality(), \"cardinality() returned wrong value\");\r\n    bs.set(0, 500);\r\n    assertEquals(500, bs.cardinality(), \"cardinality() returned wrong value\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\util\\FluentBitSetTest.java",
  "methodName" : "test_clear",
  "sourceCode" : "/**\r\n * Tests {@link FluentBitSet#clear()}.\r\n */\r\n@Test\r\nvoid test_clear() {\r\n    eightFbs.clear();\r\n    for (int i = 0; i < 8; i++) {\r\n        assertFalse(eightFbs.get(i), \"Clear didn't clear bit \" + i);\r\n    }\r\n    assertEquals(0, eightFbs.length(), \"Test1: Wrong length\");\r\n    final FluentBitSet bs = newInstance(3400);\r\n    // ensure all bits are 1's\r\n    bs.set(0, bs.size() - 1);\r\n    bs.set(bs.size() - 1);\r\n    bs.clear();\r\n    assertEquals(0, bs.length(), \"Test2: Wrong length\");\r\n    assertTrue(bs.isEmpty(), \"Test2: isEmpty() returned incorrect value\");\r\n    assertEquals(0, bs.cardinality(), \"Test2: cardinality() returned incorrect value\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\util\\FluentBitSetTest.java",
  "methodName" : "test_clearI",
  "sourceCode" : "/**\r\n * Tests {@link FluentBitSet#clear(int)}.\r\n */\r\n@Test\r\nvoid test_clearI() {\r\n    // Test for method void java.util.BitSet.clear(int)\r\n    eightFbs.clear(7);\r\n    assertFalse(eightFbs.get(7), \"Failed to clear bit\");\r\n    // Check to see all other bits are still set\r\n    for (int i = 0; i < 7; i++) {\r\n        assertTrue(eightFbs.get(i), \"Clear cleared incorrect bits\");\r\n    }\r\n    eightFbs.clear(165);\r\n    assertFalse(eightFbs.get(165), \"Failed to clear bit\");\r\n    // Try out of range\r\n    assertIndexOutOfBoundsException(() -> eightFbs.clear(-1));\r\n    final FluentBitSet bs = newInstance(0);\r\n    assertEquals(0, bs.length(), \"Test1: Wrong length,\");\r\n    assertEquals(0, bs.size(), \"Test1: Wrong size,\");\r\n    bs.clear(0);\r\n    assertEquals(0, bs.length(), \"Test2: Wrong length,\");\r\n    assertEquals(0, bs.size(), \"Test2: Wrong size,\");\r\n    bs.clear(60);\r\n    assertEquals(0, bs.length(), \"Test3: Wrong length,\");\r\n    assertEquals(0, bs.size(), \"Test3: Wrong size,\");\r\n    bs.clear(120);\r\n    assertEquals(0, bs.size(), \"Test4: Wrong size,\");\r\n    assertEquals(0, bs.length(), \"Test4: Wrong length,\");\r\n    bs.set(25);\r\n    assertEquals(64, bs.size(), \"Test5: Wrong size,\");\r\n    assertEquals(26, bs.length(), \"Test5: Wrong length,\");\r\n    bs.clear(80);\r\n    assertEquals(64, bs.size(), \"Test6: Wrong size,\");\r\n    assertEquals(26, bs.length(), \"Test6: Wrong length,\");\r\n    bs.clear(25);\r\n    assertEquals(64, bs.size(), \"Test7: Wrong size,\");\r\n    assertEquals(0, bs.length(), \"Test7: Wrong length,\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\util\\FluentBitSetTest.java",
  "methodName" : "test_clearII",
  "sourceCode" : "/**\r\n * Tests {@link FluentBitSet#clear(int, int)}.\r\n */\r\n@Test\r\nvoid test_clearII() {\r\n    // Regression for HARMONY-98\r\n    final FluentBitSet bitset = newInstance();\r\n    for (int i = 0; i < 20; i++) {\r\n        bitset.set(i);\r\n    }\r\n    bitset.clear(10, 10);\r\n    // Test for method void java.util.BitSet.clear(int, int)\r\n    // pos1 and pos2 are in the same bitset element\r\n    FluentBitSet bs = newInstance(16);\r\n    int initialSize = bs.size();\r\n    bs.set(0, initialSize);\r\n    bs.clear(5);\r\n    bs.clear(15);\r\n    bs.clear(7, 11);\r\n    for (int i = 0; i < 7; i++) {\r\n        if (i == 5) {\r\n            assertFalse(bs.get(i), \"Shouldn't have flipped bit \" + i);\r\n        } else {\r\n            assertTrue(bs.get(i), \"Shouldn't have cleared bit \" + i);\r\n        }\r\n    }\r\n    for (int i = 7; i < 11; i++) {\r\n        assertFalse(bs.get(i), \"Failed to clear bit \" + i);\r\n    }\r\n    for (int i = 11; i < initialSize; i++) {\r\n        if (i == 15) {\r\n            assertFalse(bs.get(i), \"Shouldn't have flipped bit \" + i);\r\n        } else {\r\n            assertTrue(bs.get(i), \"Shouldn't have cleared bit \" + i);\r\n        }\r\n    }\r\n    for (int i = initialSize; i < bs.size(); i++) {\r\n        assertFalse(bs.get(i), \"Shouldn't have flipped bit \" + i);\r\n    }\r\n    // pos1 and pos2 is in the same bitset element, boundary testing\r\n    bs = newInstance(16);\r\n    initialSize = bs.size();\r\n    bs.set(0, initialSize);\r\n    bs.clear(7, 64);\r\n    assertEquals(64, bs.size(), \"Failed to grow BitSet\");\r\n    for (int i = 0; i < 7; i++) {\r\n        assertTrue(bs.get(i), \"Shouldn't have cleared bit \" + i);\r\n    }\r\n    for (int i = 7; i < 64; i++) {\r\n        assertFalse(bs.get(i), \"Failed to clear bit \" + i);\r\n    }\r\n    for (int i = 64; i < bs.size(); i++) {\r\n        assertFalse(bs.get(i), \"Shouldn't have flipped bit \" + i);\r\n    }\r\n    // more boundary testing\r\n    bs = newInstance(32);\r\n    initialSize = bs.size();\r\n    bs.set(0, initialSize);\r\n    bs.clear(0, 64);\r\n    for (int i = 0; i < 64; i++) {\r\n        assertFalse(bs.get(i), \"Failed to clear bit \" + i);\r\n    }\r\n    for (int i = 64; i < bs.size(); i++) {\r\n        assertFalse(bs.get(i), \"Shouldn't have flipped bit \" + i);\r\n    }\r\n    bs = newInstance(32);\r\n    initialSize = bs.size();\r\n    bs.set(0, initialSize);\r\n    bs.clear(0, 65);\r\n    for (int i = 0; i < 65; i++) {\r\n        assertFalse(bs.get(i), \"Failed to clear bit \" + i);\r\n    }\r\n    for (int i = 65; i < bs.size(); i++) {\r\n        assertFalse(bs.get(i), \"Shouldn't have flipped bit \" + i);\r\n    }\r\n    // pos1 and pos2 are in two sequential bitset elements\r\n    bs = newInstance(128);\r\n    initialSize = bs.size();\r\n    bs.set(0, initialSize);\r\n    bs.clear(7);\r\n    bs.clear(110);\r\n    bs.clear(9, 74);\r\n    for (int i = 0; i < 9; i++) {\r\n        if (i == 7) {\r\n            assertFalse(bs.get(i), \"Shouldn't have flipped bit \" + i);\r\n        } else {\r\n            assertTrue(bs.get(i), \"Shouldn't have cleared bit \" + i);\r\n        }\r\n    }\r\n    for (int i = 9; i < 74; i++) {\r\n        assertFalse(bs.get(i), \"Failed to clear bit \" + i);\r\n    }\r\n    for (int i = 74; i < initialSize; i++) {\r\n        if (i == 110) {\r\n            assertFalse(bs.get(i), \"Shouldn't have flipped bit \" + i);\r\n        } else {\r\n            assertTrue(bs.get(i), \"Shouldn't have cleared bit \" + i);\r\n        }\r\n    }\r\n    for (int i = initialSize; i < bs.size(); i++) {\r\n        assertFalse(bs.get(i), \"Shouldn't have flipped bit \" + i);\r\n    }\r\n    // pos1 and pos2 are in two non-sequential bitset elements\r\n    bs = newInstance(256);\r\n    bs.set(0, 256);\r\n    bs.clear(7);\r\n    bs.clear(255);\r\n    bs.clear(9, 219);\r\n    for (int i = 0; i < 9; i++) {\r\n        if (i == 7) {\r\n            assertFalse(bs.get(i), \"Shouldn't have flipped bit \" + i);\r\n        } else {\r\n            assertTrue(bs.get(i), \"Shouldn't have cleared bit \" + i);\r\n        }\r\n    }\r\n    for (int i = 9; i < 219; i++) {\r\n        assertFalse(bs.get(i), \"failed to clear bit \" + i);\r\n    }\r\n    for (int i = 219; i < 255; i++) {\r\n        assertTrue(bs.get(i), \"Shouldn't have cleared bit \" + i);\r\n    }\r\n    for (int i = 255; i < bs.size(); i++) {\r\n        assertFalse(bs.get(i), \"Shouldn't have flipped bit \" + i);\r\n    }\r\n    // test illegal args\r\n    bs = newInstance(10);\r\n    assertIndexOutOfBoundsException(() -> newInstance(10).clear(-1, 3), \"Test1: Attempt to flip with negative index failed to generate exception\");\r\n    assertIndexOutOfBoundsException(() -> newInstance(10).clear(2, -1), \"Test2: Attempt to flip with negative index failed to generate exception\");\r\n    bs.set(2, 4);\r\n    bs.clear(2, 2);\r\n    assertTrue(bs.get(2), \"Bit got cleared incorrectly \");\r\n    assertIndexOutOfBoundsException(() -> newInstance(10).clear(4, 2), \"Test4: Attempt to flip with illegal args failed to generate exception\");\r\n    bs = newInstance(0);\r\n    assertEquals(0, bs.length(), \"Test1: Wrong length,\");\r\n    assertEquals(0, bs.size(), \"Test1: Wrong size,\");\r\n    bs.clear(0, 2);\r\n    assertEquals(0, bs.length(), \"Test2: Wrong length,\");\r\n    assertEquals(0, bs.size(), \"Test2: Wrong size,\");\r\n    bs.clear(60, 64);\r\n    assertEquals(0, bs.length(), \"Test3: Wrong length,\");\r\n    assertEquals(0, bs.size(), \"Test3: Wrong size,\");\r\n    bs.clear(64, 120);\r\n    assertEquals(0, bs.length(), \"Test4: Wrong length,\");\r\n    assertEquals(0, bs.size(), \"Test4: Wrong size,\");\r\n    bs.set(25);\r\n    assertEquals(26, bs.length(), \"Test5: Wrong length,\");\r\n    assertEquals(64, bs.size(), \"Test5: Wrong size,\");\r\n    bs.clear(60, 64);\r\n    assertEquals(26, bs.length(), \"Test6: Wrong length,\");\r\n    assertEquals(64, bs.size(), \"Test6: Wrong size,\");\r\n    bs.clear(64, 120);\r\n    assertEquals(64, bs.size(), \"Test7: Wrong size,\");\r\n    assertEquals(26, bs.length(), \"Test7: Wrong length,\");\r\n    bs.clear(80);\r\n    assertEquals(64, bs.size(), \"Test8: Wrong size,\");\r\n    assertEquals(26, bs.length(), \"Test8: Wrong length,\");\r\n    bs.clear(25);\r\n    assertEquals(64, bs.size(), \"Test9: Wrong size,\");\r\n    assertEquals(0, bs.length(), \"Test9: Wrong length,\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\util\\FluentBitSetTest.java",
  "methodName" : "test_clearIntArray",
  "sourceCode" : "/**\r\n * Tests {@link FluentBitSet#clear(int...)}.\r\n */\r\n@Test\r\nvoid test_clearIntArray() {\r\n    // Test for method void java.util.BitSet.clear(int)\r\n    eightFbs.clear(new int[] { 7 });\r\n    assertFalse(eightFbs.get(7), \"Failed to clear bit\");\r\n    // Check to see all other bits are still set\r\n    for (int i = 0; i < 7; i++) {\r\n        assertTrue(eightFbs.get(i), \"Clear cleared incorrect bits\");\r\n    }\r\n    eightFbs.clear(165);\r\n    assertFalse(eightFbs.get(165), \"Failed to clear bit\");\r\n    // Try out of range\r\n    assertIndexOutOfBoundsException(() -> eightFbs.clear(-1));\r\n    final FluentBitSet bs = newInstance(0);\r\n    assertEquals(0, bs.length(), \"Test1: Wrong length,\");\r\n    assertEquals(0, bs.size(), \"Test1: Wrong size,\");\r\n    bs.clear(new int[] { 0 });\r\n    assertEquals(0, bs.length(), \"Test2: Wrong length,\");\r\n    assertEquals(0, bs.size(), \"Test2: Wrong size,\");\r\n    bs.clear(new int[] { 60 });\r\n    assertEquals(0, bs.length(), \"Test3: Wrong length,\");\r\n    assertEquals(0, bs.size(), \"Test3: Wrong size,\");\r\n    bs.clear(new int[] { 120 });\r\n    assertEquals(0, bs.size(), \"Test4: Wrong size,\");\r\n    assertEquals(0, bs.length(), \"Test4: Wrong length,\");\r\n    bs.set(25);\r\n    assertEquals(64, bs.size(), \"Test5: Wrong size,\");\r\n    assertEquals(26, bs.length(), \"Test5: Wrong length,\");\r\n    bs.clear(new int[] { 80 });\r\n    assertEquals(64, bs.size(), \"Test6: Wrong size,\");\r\n    assertEquals(26, bs.length(), \"Test6: Wrong length,\");\r\n    bs.clear(new int[] { 25 });\r\n    assertEquals(64, bs.size(), \"Test7: Wrong size,\");\r\n    assertEquals(0, bs.length(), \"Test7: Wrong length,\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\util\\FluentBitSetTest.java",
  "methodName" : "test_clone",
  "sourceCode" : "/**\r\n * Tests FluentBitSet#clone()\r\n */\r\n@Test\r\nvoid test_clone() {\r\n    final FluentBitSet bs = (FluentBitSet) eightFbs.clone();\r\n    assertEquals(bs, eightFbs, \"clone failed to return equal BitSet\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\util\\FluentBitSetTest.java",
  "methodName" : "test_Constructor",
  "sourceCode" : "/**\r\n * Tests {@link FluentBitSet#FluentBitSet()}.\r\n */\r\n@Test\r\nvoid test_Constructor() {\r\n    final FluentBitSet bs = newInstance();\r\n    assertEquals(64, bs.size(), \"Create FluentBitSet of incorrect size\");\r\n    assertEquals(\"{}\", bs.toString(), \"New FluentBitSet had invalid string representation\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\util\\FluentBitSetTest.java",
  "methodName" : "test_ConstructorInt",
  "sourceCode" : "/**\r\n * Tests {@link FluentBitSet#FluentBitSet(int)}.\r\n */\r\n@Test\r\nvoid test_ConstructorInt() {\r\n    FluentBitSet bs = newInstance(128);\r\n    assertEquals(128, bs.size(), \"Create FluentBitSet of incorrect size\");\r\n    assertEquals(\"{}\", bs.toString(), \"New FluentBitSet had invalid string representation: \" + bs);\r\n    // All BitSets are created with elements of multiples of 64\r\n    bs = newInstance(89);\r\n    assertEquals(128, bs.size(), \"Failed to round FluentBitSet element size\");\r\n    assertThrows(NegativeArraySizeException.class, () -> newInstance(-9));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\util\\FluentBitSetTest.java",
  "methodName" : "test_equals",
  "sourceCode" : "/**\r\n * Tests {@link FluentBitSet#equals(java.lang.Object)}.\r\n */\r\n@Test\r\nvoid test_equals() {\r\n    FluentBitSet bs;\r\n    bs = (FluentBitSet) eightFbs.clone();\r\n    assertEquals(eightFbs, eightFbs, \"Same FluentBitSet returned false\");\r\n    assertEquals(bs, eightFbs, \"Identical FluentBitSet returned false\");\r\n    bs.clear(6);\r\n    assertNotEquals(bs, eightFbs, \"Different BitSets returned true\");\r\n    assertFalse(eightFbs.equals(null), \"Different BitSets returned true\");\r\n    assertFalse(eightFbs.equals(new Object()), \"Different BitSets returned true\");\r\n    bs = (FluentBitSet) eightFbs.clone();\r\n    bs.set(128);\r\n    assertNotEquals(bs, eightFbs, \"Different sized FluentBitSet with higher bit set returned true\");\r\n    bs.clear(128);\r\n    assertEquals(bs, eightFbs, \"Different sized FluentBitSet with higher bits not set returned false\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\util\\FluentBitSetTest.java",
  "methodName" : "test_flipI",
  "sourceCode" : "/**\r\n * Tests {@link FluentBitSet#flip(int)}.\r\n */\r\n@Test\r\nvoid test_flipI() {\r\n    // Test for method void java.util.BitSet.flip(int)\r\n    FluentBitSet bs = newInstance();\r\n    bs.clear(8);\r\n    bs.clear(9);\r\n    bs.set(10);\r\n    bs.flip(9);\r\n    assertFalse(bs.get(8), \"Failed to flip bit\");\r\n    assertTrue(bs.get(9), \"Failed to flip bit\");\r\n    assertTrue(bs.get(10), \"Failed to flip bit\");\r\n    bs.set(8);\r\n    bs.set(9);\r\n    bs.clear(10);\r\n    bs.flip(9);\r\n    assertTrue(bs.get(8), \"Failed to flip bit\");\r\n    assertFalse(bs.get(9), \"Failed to flip bit\");\r\n    assertFalse(bs.get(10), \"Failed to flip bit\");\r\n    assertIndexOutOfBoundsException(() -> newInstance().flip(-1), \"Attempt to flip at negative index failed to generate exception\");\r\n    // Try setting a bit on a 64 boundary\r\n    bs.flip(128);\r\n    assertEquals(192, bs.size(), \"Failed to grow BitSet\");\r\n    assertTrue(bs.get(128), \"Failed to flip bit\");\r\n    bs = newInstance(64);\r\n    for (int i = bs.size(); --i >= 0; ) {\r\n        bs.flip(i);\r\n        assertTrue(bs.get(i), \"Test1: Incorrectly flipped bit\" + i);\r\n        assertEquals(i + 1, bs.length(), \"Incorrect length\");\r\n        for (int j = bs.size(); --j > i; ) {\r\n            assertFalse(bs.get(j), \"Test2: Incorrectly flipped bit\" + j);\r\n        }\r\n        for (int j = i; --j >= 0; ) {\r\n            assertFalse(bs.get(j), \"Test3: Incorrectly flipped bit\" + j);\r\n        }\r\n        bs.flip(i);\r\n    }\r\n    final FluentBitSet bs0 = newInstance(0);\r\n    assertEquals(0, bs0.size(), \"Test1: Wrong size\");\r\n    assertEquals(0, bs0.length(), \"Test1: Wrong length\");\r\n    bs0.flip(0);\r\n    assertEquals(bs0.size(), 64, \"Test2: Wrong size\");\r\n    assertEquals(1, bs0.length(), \"Test2: Wrong length\");\r\n    bs0.flip(63);\r\n    assertEquals(64, bs0.size(), \"Test3: Wrong size\");\r\n    assertEquals(64, bs0.length(), \"Test3: Wrong length\");\r\n    eightFbs.flip(7);\r\n    assertFalse(eightFbs.get(7), \"Failed to flip bit 7\");\r\n    // Check to see all other bits are still set\r\n    for (int i = 0; i < 7; i++) {\r\n        assertTrue(eightFbs.get(i), \"Flip flipped incorrect bits\");\r\n    }\r\n    eightFbs.flip(127);\r\n    assertTrue(eightFbs.get(127), \"Failed to flip bit 127\");\r\n    eightFbs.flip(127);\r\n    assertFalse(eightFbs.get(127), \"Failed to flip bit 127\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\util\\FluentBitSetTest.java",
  "methodName" : "test_flipII",
  "sourceCode" : "/**\r\n * Tests {@link FluentBitSet#clear(int, int)}.\r\n */\r\n@Test\r\nvoid test_flipII() {\r\n    final FluentBitSet bitset = newInstance();\r\n    for (int i = 0; i < 20; i++) {\r\n        bitset.set(i);\r\n    }\r\n    bitset.flip(10, 10);\r\n    // Test for method void java.util.BitSet.flip(int, int)\r\n    // pos1 and pos2 are in the same bitset element\r\n    FluentBitSet bs = newInstance(16);\r\n    bs.set(7);\r\n    bs.set(10);\r\n    bs.flip(7, 11);\r\n    for (int i = 0; i < 7; i++) {\r\n        assertFalse(bs.get(i), \"Shouldn't have flipped bit \" + i);\r\n    }\r\n    assertFalse(bs.get(7), \"Failed to flip bit 7\");\r\n    assertTrue(bs.get(8), \"Failed to flip bit 8\");\r\n    assertTrue(bs.get(9), \"Failed to flip bit 9\");\r\n    assertFalse(bs.get(10), \"Failed to flip bit 10\");\r\n    for (int i = 11; i < bs.size(); i++) {\r\n        assertFalse(bs.get(i), \"Shouldn't have flipped bit \" + i);\r\n    }\r\n    // pos1 and pos2 is in the same bitset element, boundary testing\r\n    bs = newInstance(16);\r\n    bs.set(7);\r\n    bs.set(10);\r\n    bs.flip(7, 64);\r\n    assertEquals(64, bs.size(), \"Failed to grow BitSet\");\r\n    for (int i = 0; i < 7; i++) {\r\n        assertFalse(bs.get(i), \"Shouldn't have flipped bit \" + i);\r\n    }\r\n    assertFalse(bs.get(7), \"Failed to flip bit 7\");\r\n    assertTrue(bs.get(8), \"Failed to flip bit 8\");\r\n    assertTrue(bs.get(9), \"Failed to flip bit 9\");\r\n    assertFalse(bs.get(10), \"Failed to flip bit 10\");\r\n    for (int i = 11; i < 64; i++) {\r\n        assertTrue(bs.get(i), \"failed to flip bit \" + i);\r\n    }\r\n    assertFalse(bs.get(64), \"Shouldn't have flipped bit 64\");\r\n    // more boundary testing\r\n    bs = newInstance(32);\r\n    bs.flip(0, 64);\r\n    for (int i = 0; i < 64; i++) {\r\n        assertTrue(bs.get(i), \"Failed to flip bit \" + i);\r\n    }\r\n    assertFalse(bs.get(64), \"Shouldn't have flipped bit 64\");\r\n    bs = newInstance(32);\r\n    bs.flip(0, 65);\r\n    for (int i = 0; i < 65; i++) {\r\n        assertTrue(bs.get(i), \"Failed to flip bit \" + i);\r\n    }\r\n    assertFalse(bs.get(65), \"Shouldn't have flipped bit 65\");\r\n    // pos1 and pos2 are in two sequential bitset elements\r\n    bs = newInstance(128);\r\n    bs.set(7);\r\n    bs.set(10);\r\n    bs.set(72);\r\n    bs.set(110);\r\n    bs.flip(9, 74);\r\n    for (int i = 0; i < 7; i++) {\r\n        assertFalse(bs.get(i), \"Shouldn't have flipped bit \" + i);\r\n    }\r\n    assertTrue(bs.get(7), \"Shouldn't have flipped bit 7\");\r\n    assertFalse(bs.get(8), \"Shouldn't have flipped bit 8\");\r\n    assertTrue(bs.get(9), \"Failed to flip bit 9\");\r\n    assertFalse(bs.get(10), \"Failed to flip bit 10\");\r\n    for (int i = 11; i < 72; i++) {\r\n        assertTrue(bs.get(i), \"failed to flip bit \" + i);\r\n    }\r\n    assertFalse(bs.get(72), \"Failed to flip bit 72\");\r\n    assertTrue(bs.get(73), \"Failed to flip bit 73\");\r\n    for (int i = 74; i < 110; i++) {\r\n        assertFalse(bs.get(i), \"Shouldn't have flipped bit \" + i);\r\n    }\r\n    assertTrue(bs.get(110), \"Shouldn't have flipped bit 110\");\r\n    for (int i = 111; i < bs.size(); i++) {\r\n        assertFalse(bs.get(i), \"Shouldn't have flipped bit \" + i);\r\n    }\r\n    // pos1 and pos2 are in two non-sequential bitset elements\r\n    bs = newInstance(256);\r\n    bs.set(7);\r\n    bs.set(10);\r\n    bs.set(72);\r\n    bs.set(110);\r\n    bs.set(181);\r\n    bs.set(220);\r\n    bs.flip(9, 219);\r\n    for (int i = 0; i < 7; i++) {\r\n        assertFalse(bs.get(i), \"Shouldn't have flipped bit \" + i);\r\n    }\r\n    assertTrue(bs.get(7), \"Shouldn't have flipped bit 7\");\r\n    assertFalse(bs.get(8), \"Shouldn't have flipped bit 8\");\r\n    assertTrue(bs.get(9), \"Failed to flip bit 9\");\r\n    assertFalse(bs.get(10), \"Failed to flip bit 10\");\r\n    for (int i = 11; i < 72; i++) {\r\n        assertTrue(bs.get(i), \"failed to flip bit \" + i);\r\n    }\r\n    assertFalse(bs.get(72), \"Failed to flip bit 72\");\r\n    for (int i = 73; i < 110; i++) {\r\n        assertTrue(bs.get(i), \"failed to flip bit \" + i);\r\n    }\r\n    assertFalse(bs.get(110), \"Failed to flip bit 110\");\r\n    for (int i = 111; i < 181; i++) {\r\n        assertTrue(bs.get(i), \"failed to flip bit \" + i);\r\n    }\r\n    assertFalse(bs.get(181), \"Failed to flip bit 181\");\r\n    for (int i = 182; i < 219; i++) {\r\n        assertTrue(bs.get(i), \"failed to flip bit \" + i);\r\n    }\r\n    assertFalse(bs.get(219), \"Shouldn't have flipped bit 219\");\r\n    assertTrue(bs.get(220), \"Shouldn't have flipped bit 220\");\r\n    for (int i = 221; i < bs.size(); i++) {\r\n        assertFalse(bs.get(i), \"Shouldn't have flipped bit \" + i);\r\n    }\r\n    // test illegal args\r\n    bs = newInstance(10);\r\n    try {\r\n        bs.flip(-1, 3);\r\n        fail(\"Test1: Attempt to flip with  negative index failed to generate exception\");\r\n    } catch (final IndexOutOfBoundsException e) {\r\n        // correct behavior\r\n    }\r\n    try {\r\n        bs.flip(2, -1);\r\n        fail(\"Test2: Attempt to flip with negative index failed to generate exception\");\r\n    } catch (final IndexOutOfBoundsException e) {\r\n        // correct behavior\r\n    }\r\n    try {\r\n        bs.flip(4, 2);\r\n        fail(\"Test4: Attempt to flip with illegal args failed to generate exception\");\r\n    } catch (final IndexOutOfBoundsException e) {\r\n        // correct behavior\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\util\\FluentBitSetTest.java",
  "methodName" : "test_getI",
  "sourceCode" : "/**\r\n * Tests {@link FluentBitSet#get(int)}.\r\n */\r\n@Test\r\nvoid test_getI() {\r\n    // Test for method boolean java.util.BitSet.get(int)\r\n    FluentBitSet bs = newInstance();\r\n    bs.set(8);\r\n    assertFalse(eightFbs.get(99), \"Get returned true for index out of range\");\r\n    assertTrue(eightFbs.get(3), \"Get returned false for set value\");\r\n    assertFalse(bs.get(0), \"Get returned true for a non set value\");\r\n    assertIndexOutOfBoundsException(() -> newInstance().get(-1), \"Attempt to get at negative index failed to generate exception\");\r\n    bs = newInstance(1);\r\n    assertFalse(bs.get(64), \"Access greater than size\");\r\n    bs = newInstance();\r\n    bs.set(63);\r\n    assertTrue(bs.get(63), \"Test highest bit\");\r\n    bs = newInstance(0);\r\n    assertEquals(0, bs.length(), \"Test1: Wrong length,\");\r\n    assertEquals(0, bs.size(), \"Test1: Wrong size,\");\r\n    bs.get(2);\r\n    assertEquals(0, bs.length(), \"Test2: Wrong length,\");\r\n    assertEquals(0, bs.size(), \"Test2: Wrong size,\");\r\n    bs.get(70);\r\n    assertEquals(0, bs.length(), \"Test3: Wrong length,\");\r\n    assertEquals(0, bs.size(), \"Test3: Wrong size,\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\util\\FluentBitSetTest.java",
  "methodName" : "test_getII",
  "sourceCode" : "/**\r\n * Tests {@link FluentBitSet#get(int, int)}.\r\n */\r\n@Test\r\nvoid test_getII() {\r\n    final FluentBitSet bitset = newInstance(30);\r\n    bitset.get(3, 3);\r\n    // Test for method boolean java.util.BitSet.get(int, int)\r\n    FluentBitSet bs = newInstance(512);\r\n    bs.set(3, 9);\r\n    bs.set(10, 20);\r\n    bs.set(60, 75);\r\n    bs.set(121);\r\n    bs.set(130, 140);\r\n    // pos1 and pos2 are in the same bitset element, at index0\r\n    FluentBitSet resultbs = bs.get(3, 6);\r\n    FluentBitSet correctbs = newInstance(3);\r\n    correctbs.set(0, 3);\r\n    assertEquals(correctbs, resultbs, \"Test1: Returned incorrect BitSet\");\r\n    // pos1 and pos2 are in the same bitset element, at index 1\r\n    resultbs = bs.get(100, 125);\r\n    correctbs = newInstance(25);\r\n    correctbs.set(21);\r\n    assertEquals(correctbs, resultbs, \"Test2: Returned incorrect BitSet\");\r\n    // pos1 in bitset element at index 0, and pos2 in bitset element at\r\n    // index 1\r\n    resultbs = bs.get(15, 125);\r\n    correctbs = newInstance(25);\r\n    correctbs.set(0, 5);\r\n    correctbs.set(45, 60);\r\n    correctbs.set(121 - 15);\r\n    assertEquals(correctbs, resultbs, \"Test3: Returned incorrect BitSet\");\r\n    // pos1 in bitset element at index 1, and pos2 in bitset element at\r\n    // index 2\r\n    resultbs = bs.get(70, 145);\r\n    correctbs = newInstance(75);\r\n    correctbs.set(0, 5);\r\n    correctbs.set(51);\r\n    correctbs.set(60, 70);\r\n    assertEquals(correctbs, resultbs, \"Test4: Returned incorrect BitSet\");\r\n    // pos1 in bitset element at index 0, and pos2 in bitset element at\r\n    // index 2\r\n    resultbs = bs.get(5, 145);\r\n    correctbs = newInstance(140);\r\n    correctbs.set(0, 4);\r\n    correctbs.set(5, 15);\r\n    correctbs.set(55, 70);\r\n    correctbs.set(116);\r\n    correctbs.set(125, 135);\r\n    assertEquals(correctbs, resultbs, \"Test5: Returned incorrect BitSet\");\r\n    // pos1 in bitset element at index 0, and pos2 in bitset element at\r\n    // index 3\r\n    resultbs = bs.get(5, 250);\r\n    correctbs = newInstance(200);\r\n    correctbs.set(0, 4);\r\n    correctbs.set(5, 15);\r\n    correctbs.set(55, 70);\r\n    correctbs.set(116);\r\n    correctbs.set(125, 135);\r\n    assertEquals(correctbs, resultbs, \"Test6: Returned incorrect BitSet\");\r\n    assertEquals(bs.get(0, bs.size()), bs, \"equality principle 1 \");\r\n    // more tests\r\n    FluentBitSet bs2 = newInstance(129);\r\n    bs2.set(0, 20);\r\n    bs2.set(62, 65);\r\n    bs2.set(121, 123);\r\n    resultbs = bs2.get(1, 124);\r\n    correctbs = newInstance(129);\r\n    correctbs.set(0, 19);\r\n    correctbs.set(61, 64);\r\n    correctbs.set(120, 122);\r\n    assertEquals(correctbs, resultbs, \"Test7: Returned incorrect BitSet\");\r\n    // equality principle with some boundary conditions\r\n    bs2 = newInstance(128);\r\n    bs2.set(2, 20);\r\n    bs2.set(62);\r\n    bs2.set(121, 123);\r\n    bs2.set(127);\r\n    resultbs = bs2.get(0, bs2.size());\r\n    assertEquals(resultbs, bs2, \"equality principle 2 \");\r\n    bs2 = newInstance(128);\r\n    bs2.set(2, 20);\r\n    bs2.set(62);\r\n    bs2.set(121, 123);\r\n    bs2.set(127);\r\n    bs2.flip(0, 128);\r\n    resultbs = bs2.get(0, bs.size());\r\n    assertEquals(resultbs, bs2, \"equality principle 3 \");\r\n    bs = newInstance(0);\r\n    assertEquals(0, bs.length(), \"Test1: Wrong length,\");\r\n    assertEquals(0, bs.size(), \"Test1: Wrong size,\");\r\n    bs.get(0, 2);\r\n    assertEquals(0, bs.length(), \"Test2: Wrong length,\");\r\n    assertEquals(0, bs.size(), \"Test2: Wrong size,\");\r\n    bs.get(60, 64);\r\n    assertEquals(0, bs.length(), \"Test3: Wrong length,\");\r\n    assertEquals(0, bs.size(), \"Test3: Wrong size,\");\r\n    bs.get(64, 120);\r\n    assertEquals(0, bs.length(), \"Test4: Wrong length,\");\r\n    assertEquals(0, bs.size(), \"Test4: Wrong size,\");\r\n    bs.set(25);\r\n    assertEquals(26, bs.length(), \"Test5: Wrong length,\");\r\n    assertEquals(64, bs.size(), \"Test5: Wrong size,\");\r\n    bs.get(60, 64);\r\n    assertEquals(26, bs.length(), \"Test6: Wrong length,\");\r\n    assertEquals(64, bs.size(), \"Test6: Wrong size,\");\r\n    bs.get(64, 120);\r\n    assertEquals(64, bs.size(), \"Test7: Wrong size,\");\r\n    assertEquals(26, bs.length(), \"Test7: Wrong length,\");\r\n    bs.get(80);\r\n    assertEquals(64, bs.size(), \"Test8: Wrong size,\");\r\n    assertEquals(26, bs.length(), \"Test8: Wrong length,\");\r\n    bs.get(25);\r\n    assertEquals(64, bs.size(), \"Test9: Wrong size,\");\r\n    assertEquals(26, bs.length(), \"Test9: Wrong length,\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\util\\FluentBitSetTest.java",
  "methodName" : "test_hashCode",
  "sourceCode" : "/**\r\n * Tests {@link FluentBitSet#hashCode()}.\r\n */\r\n@Test\r\nvoid test_hashCode() {\r\n    // Test for method int java.util.BitSet.hashCode()\r\n    final FluentBitSet bs = (FluentBitSet) eightFbs.clone();\r\n    bs.clear(2);\r\n    bs.clear(6);\r\n    assertEquals(bs.bitSet().hashCode(), bs.hashCode(), \"BitSet returns wrong hash value\");\r\n    bs.set(10);\r\n    bs.clear(3);\r\n    assertEquals(97, bs.hashCode(), \"BitSet returns wrong hash value\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\util\\FluentBitSetTest.java",
  "methodName" : "test_intersects",
  "sourceCode" : "/**\r\n * Tests {@link FluentBitSet#intersects(FluentBitSet)}.\r\n */\r\n@Test\r\nvoid test_intersects() {\r\n    // Test for method boolean java.util.BitSet.intersects(BitSet)\r\n    final FluentBitSet bs = newInstance(500);\r\n    bs.set(5);\r\n    bs.set(63);\r\n    bs.set(64);\r\n    bs.set(71, 110);\r\n    bs.set(127, 130);\r\n    bs.set(192);\r\n    bs.set(450);\r\n    final FluentBitSet bs2 = newInstance(8);\r\n    assertFalse(bs.intersects(bs2), \"Test1: intersects() returned incorrect value\");\r\n    assertFalse(bs2.intersects(bs), \"Test1: intersects() returned incorrect value\");\r\n    bs2.set(4);\r\n    assertFalse(bs.intersects(bs2), \"Test2: intersects() returned incorrect value\");\r\n    assertFalse(bs2.intersects(bs), \"Test2: intersects() returned incorrect value\");\r\n    bs2.clear();\r\n    bs2.set(5);\r\n    assertTrue(bs.intersects(bs2), \"Test3: intersects() returned incorrect value\");\r\n    assertTrue(bs2.intersects(bs), \"Test3: intersects() returned incorrect value\");\r\n    bs2.clear();\r\n    bs2.set(63);\r\n    assertTrue(bs.intersects(bs2), \"Test4: intersects() returned incorrect value\");\r\n    assertTrue(bs2.intersects(bs), \"Test4: intersects() returned incorrect value\");\r\n    bs2.clear();\r\n    bs2.set(80);\r\n    assertTrue(bs.intersects(bs2), \"Test5: intersects() returned incorrect value\");\r\n    assertTrue(bs2.intersects(bs), \"Test5: intersects() returned incorrect value\");\r\n    bs2.clear();\r\n    bs2.set(127);\r\n    assertTrue(bs.intersects(bs2), \"Test6: intersects() returned incorrect value\");\r\n    assertTrue(bs2.intersects(bs), \"Test6: intersects() returned incorrect value\");\r\n    bs2.clear();\r\n    bs2.set(192);\r\n    assertTrue(bs.intersects(bs2), \"Test7: intersects() returned incorrect value\");\r\n    assertTrue(bs2.intersects(bs), \"Test7: intersects() returned incorrect value\");\r\n    bs2.clear();\r\n    bs2.set(450);\r\n    assertTrue(bs.intersects(bs2), \"Test8: intersects() returned incorrect value\");\r\n    assertTrue(bs2.intersects(bs), \"Test8: intersects() returned incorrect value\");\r\n    bs2.clear();\r\n    bs2.set(500);\r\n    assertFalse(bs.intersects(bs2), \"Test9: intersects() returned incorrect value\");\r\n    assertFalse(bs2.intersects(bs), \"Test9: intersects() returned incorrect value\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\util\\FluentBitSetTest.java",
  "methodName" : "test_intersects_BitSet",
  "sourceCode" : "/**\r\n * Tests {@link FluentBitSet#intersects(BitSet)}.\r\n */\r\n@Test\r\nvoid test_intersects_BitSet() {\r\n    // Test for method boolean java.util.BitSet.intersects(BitSet)\r\n    final FluentBitSet bs = newInstance(500);\r\n    bs.set(5);\r\n    bs.set(63);\r\n    bs.set(64);\r\n    bs.set(71, 110);\r\n    bs.set(127, 130);\r\n    bs.set(192);\r\n    bs.set(450);\r\n    final FluentBitSet bs2 = newInstance(8);\r\n    assertFalse(bs.intersects(bs2.bitSet()), \"Test1: intersects() returned incorrect value\");\r\n    assertFalse(bs2.intersects(bs.bitSet()), \"Test1: intersects() returned incorrect value\");\r\n    bs2.set(4);\r\n    assertFalse(bs.intersects(bs2.bitSet()), \"Test2: intersects() returned incorrect value\");\r\n    assertFalse(bs2.intersects(bs.bitSet()), \"Test2: intersects() returned incorrect value\");\r\n    bs2.clear();\r\n    bs2.set(5);\r\n    assertTrue(bs.intersects(bs2.bitSet()), \"Test3: intersects() returned incorrect value\");\r\n    assertTrue(bs2.intersects(bs.bitSet()), \"Test3: intersects() returned incorrect value\");\r\n    bs2.clear();\r\n    bs2.set(63);\r\n    assertTrue(bs.intersects(bs2.bitSet()), \"Test4: intersects() returned incorrect value\");\r\n    assertTrue(bs2.intersects(bs.bitSet()), \"Test4: intersects() returned incorrect value\");\r\n    bs2.clear();\r\n    bs2.set(80);\r\n    assertTrue(bs.intersects(bs2.bitSet()), \"Test5: intersects() returned incorrect value\");\r\n    assertTrue(bs2.intersects(bs.bitSet()), \"Test5: intersects() returned incorrect value\");\r\n    bs2.clear();\r\n    bs2.set(127);\r\n    assertTrue(bs.intersects(bs2.bitSet()), \"Test6: intersects() returned incorrect value\");\r\n    assertTrue(bs2.intersects(bs.bitSet()), \"Test6: intersects() returned incorrect value\");\r\n    bs2.clear();\r\n    bs2.set(192);\r\n    assertTrue(bs.intersects(bs2.bitSet()), \"Test7: intersects() returned incorrect value\");\r\n    assertTrue(bs2.intersects(bs.bitSet()), \"Test7: intersects() returned incorrect value\");\r\n    bs2.clear();\r\n    bs2.set(450);\r\n    assertTrue(bs.intersects(bs2.bitSet()), \"Test8: intersects() returned incorrect value\");\r\n    assertTrue(bs2.intersects(bs.bitSet()), \"Test8: intersects() returned incorrect value\");\r\n    bs2.clear();\r\n    bs2.set(500);\r\n    assertFalse(bs.intersects(bs2.bitSet()), \"Test9: intersects() returned incorrect value\");\r\n    assertFalse(bs2.intersects(bs.bitSet()), \"Test9: intersects() returned incorrect value\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\util\\FluentBitSetTest.java",
  "methodName" : "test_isEmpty",
  "sourceCode" : "/**\r\n * Tests {@link FluentBitSet#isEmpty()}.\r\n */\r\n@Test\r\nvoid test_isEmpty() {\r\n    final FluentBitSet bs = newInstance(500);\r\n    assertTrue(bs.isEmpty(), \"Test: isEmpty() returned wrong value\");\r\n    // at bitset element 0\r\n    bs.set(3);\r\n    assertFalse(bs.isEmpty(), \"Test0: isEmpty() returned wrong value\");\r\n    // at bitset element 1\r\n    bs.clear();\r\n    bs.set(12);\r\n    assertFalse(bs.isEmpty(), \"Test1: isEmpty() returned wrong value\");\r\n    // at bitset element 2\r\n    bs.clear();\r\n    bs.set(128);\r\n    assertFalse(bs.isEmpty(), \"Test2: isEmpty() returned wrong value\");\r\n    // boundary testing\r\n    bs.clear();\r\n    bs.set(459);\r\n    assertFalse(bs.isEmpty(), \"Test3: isEmpty() returned wrong value\");\r\n    bs.clear();\r\n    bs.set(511);\r\n    assertFalse(bs.isEmpty(), \"Test4: isEmpty() returned wrong value\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\util\\FluentBitSetTest.java",
  "methodName" : "test_length",
  "sourceCode" : "/**\r\n * Tests {@link FluentBitSet#length()}.\r\n */\r\n@Test\r\nvoid test_length() {\r\n    final FluentBitSet bs = newInstance();\r\n    assertEquals(0, bs.length(), \"BitSet returned wrong length\");\r\n    bs.set(5);\r\n    assertEquals(6, bs.length(), \"BitSet returned wrong length\");\r\n    bs.set(10);\r\n    assertEquals(11, bs.length(), \"BitSet returned wrong length\");\r\n    bs.set(432);\r\n    assertEquals(433, bs.length(), \"BitSet returned wrong length\");\r\n    bs.set(300);\r\n    assertEquals(433, bs.length(), \"BitSet returned wrong length\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\util\\FluentBitSetTest.java",
  "methodName" : "test_nextClearBitI",
  "sourceCode" : "/**\r\n * Tests {@link FluentBitSet#nextClearBit(int)}.\r\n */\r\n@Test\r\nvoid test_nextClearBitI() {\r\n    // Test for method int java.util.BitSet.nextSetBit()\r\n    final FluentBitSet bs = newInstance(500);\r\n    // ensure all the bits from 0 to bs.size()\r\n    bs.set(0, bs.size() - 1);\r\n    // -1\r\n    // are set to true\r\n    bs.set(bs.size() - 1);\r\n    bs.clear(5);\r\n    bs.clear(32);\r\n    bs.clear(63);\r\n    bs.clear(64);\r\n    bs.clear(71, 110);\r\n    bs.clear(127, 130);\r\n    bs.clear(193);\r\n    bs.clear(450);\r\n    try {\r\n        bs.nextClearBit(-1);\r\n        fail(\"Expected IndexOutOfBoundsException for negative index\");\r\n    } catch (final IndexOutOfBoundsException e) {\r\n        // correct behavior\r\n    }\r\n    assertEquals(5, bs.nextClearBit(0), \"nextClearBit() returned the wrong value\");\r\n    assertEquals(5, bs.nextClearBit(5), \"nextClearBit() returned the wrong value\");\r\n    assertEquals(32, bs.nextClearBit(6), \"nextClearBit() returned the wrong value\");\r\n    assertEquals(32, bs.nextClearBit(32), \"nextClearBit() returned the wrong value\");\r\n    assertEquals(63, bs.nextClearBit(33), \"nextClearBit() returned the wrong value\");\r\n    // boundary tests\r\n    assertEquals(63, bs.nextClearBit(63), \"nextClearBit() returned the wrong value\");\r\n    assertEquals(64, bs.nextClearBit(64), \"nextClearBit() returned the wrong value\");\r\n    // at bitset element 1\r\n    assertEquals(71, bs.nextClearBit(65), \"nextClearBit() returned the wrong value\");\r\n    assertEquals(71, bs.nextClearBit(71), \"nextClearBit() returned the wrong value\");\r\n    assertEquals(72, bs.nextClearBit(72), \"nextClearBit() returned the wrong value\");\r\n    assertEquals(127, bs.nextClearBit(110), \"nextClearBit() returned the wrong value\");\r\n    // boundary tests\r\n    assertEquals(127, bs.nextClearBit(127), \"nextClearBit() returned the wrong value\");\r\n    assertEquals(128, bs.nextClearBit(128), \"nextClearBit() returned the wrong value\");\r\n    // at bitset element 2\r\n    assertEquals(193, bs.nextClearBit(130), \"nextClearBit() returned the wrong value\");\r\n    assertEquals(193, bs.nextClearBit(191), \"nextClearBit() returned the wrong value\");\r\n    assertEquals(193, bs.nextClearBit(192), \"nextClearBit() returned the wrong value\");\r\n    assertEquals(193, bs.nextClearBit(193), \"nextClearBit() returned the wrong value\");\r\n    assertEquals(450, bs.nextClearBit(194), \"nextClearBit() returned the wrong value\");\r\n    assertEquals(450, bs.nextClearBit(255), \"nextClearBit() returned the wrong value\");\r\n    assertEquals(450, bs.nextClearBit(256), \"nextClearBit() returned the wrong value\");\r\n    assertEquals(450, bs.nextClearBit(450), \"nextClearBit() returned the wrong value\");\r\n    // bitset has 1 still the end of bs.size() -1, but calling nextClearBit\r\n    // with any index value\r\n    // after the last true bit should return bs.size(),\r\n    assertEquals(512, bs.nextClearBit(451), \"nextClearBit() returned the wrong value\");\r\n    assertEquals(512, bs.nextClearBit(511), \"nextClearBit() returned the wrong value\");\r\n    assertEquals(512, bs.nextClearBit(512), \"nextClearBit() returned the wrong value\");\r\n    // if the index is larger than bs.size(), nextClearBit should return\r\n    // index;\r\n    assertEquals(513, bs.nextClearBit(513), \"nextClearBit() returned the wrong value\");\r\n    assertEquals(800, bs.nextClearBit(800), \"nextClearBit() returned the wrong value\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\util\\FluentBitSetTest.java",
  "methodName" : "test_nextSetBitI",
  "sourceCode" : "/**\r\n * Tests {@link FluentBitSet#nextSetBit(int)}.\r\n */\r\n@Test\r\nvoid test_nextSetBitI() {\r\n    // Test for method int java.util.BitSet.nextSetBit()\r\n    final FluentBitSet bs = newInstance(500);\r\n    bs.set(5);\r\n    bs.set(32);\r\n    bs.set(63);\r\n    bs.set(64);\r\n    bs.set(71, 110);\r\n    bs.set(127, 130);\r\n    bs.set(193);\r\n    bs.set(450);\r\n    try {\r\n        bs.nextSetBit(-1);\r\n        fail(\"Expected IndexOutOfBoundsException for negative index\");\r\n    } catch (final IndexOutOfBoundsException e) {\r\n        // correct behavior\r\n    }\r\n    assertEquals(5, bs.nextSetBit(0), \"nextSetBit() returned the wrong value\");\r\n    assertEquals(5, bs.nextSetBit(5), \"nextSetBit() returned the wrong value\");\r\n    assertEquals(32, bs.nextSetBit(6), \"nextSetBit() returned the wrong value\");\r\n    assertEquals(32, bs.nextSetBit(32), \"nextSetBit() returned the wrong value\");\r\n    assertEquals(63, bs.nextSetBit(33), \"nextSetBit() returned the wrong value\");\r\n    // boundary tests\r\n    assertEquals(63, bs.nextSetBit(63), \"nextSetBit() returned the wrong value\");\r\n    assertEquals(64, bs.nextSetBit(64), \"nextSetBit() returned the wrong value\");\r\n    // at bitset element 1\r\n    assertEquals(71, bs.nextSetBit(65), \"nextSetBit() returned the wrong value\");\r\n    assertEquals(71, bs.nextSetBit(71), \"nextSetBit() returned the wrong value\");\r\n    assertEquals(72, bs.nextSetBit(72), \"nextSetBit() returned the wrong value\");\r\n    assertEquals(127, bs.nextSetBit(110), \"nextSetBit() returned the wrong value\");\r\n    // boundary tests\r\n    assertEquals(127, bs.nextSetBit(127), \"nextSetBit() returned the wrong value\");\r\n    assertEquals(128, bs.nextSetBit(128), \"nextSetBit() returned the wrong value\");\r\n    // at bitset element 2\r\n    assertEquals(193, bs.nextSetBit(130), \"nextSetBit() returned the wrong value\");\r\n    assertEquals(193, bs.nextSetBit(191), \"nextSetBit() returned the wrong value\");\r\n    assertEquals(193, bs.nextSetBit(192), \"nextSetBit() returned the wrong value\");\r\n    assertEquals(193, bs.nextSetBit(193), \"nextSetBit() returned the wrong value\");\r\n    assertEquals(450, bs.nextSetBit(194), \"nextSetBit() returned the wrong value\");\r\n    assertEquals(450, bs.nextSetBit(255), \"nextSetBit() returned the wrong value\");\r\n    assertEquals(450, bs.nextSetBit(256), \"nextSetBit() returned the wrong value\");\r\n    assertEquals(450, bs.nextSetBit(450), \"nextSetBit() returned the wrong value\");\r\n    assertEquals(-1, bs.nextSetBit(451), \"nextSetBit() returned the wrong value\");\r\n    assertEquals(-1, bs.nextSetBit(511), \"nextSetBit() returned the wrong value\");\r\n    assertEquals(-1, bs.nextSetBit(512), \"nextSetBit() returned the wrong value\");\r\n    assertEquals(-1, bs.nextSetBit(800), \"nextSetBit() returned the wrong value\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\util\\FluentBitSetTest.java",
  "methodName" : "test_or",
  "sourceCode" : "/**\r\n * Tests {@link FluentBitSet#or(FluentBitSet)}.\r\n */\r\n@Test\r\nvoid test_or() {\r\n    // Test for method void java.util.BitSet.or(BitSet)\r\n    FluentBitSet bs = newInstance(128);\r\n    bs.or(eightFbs);\r\n    for (int i = 0; i < 8; i++) {\r\n        assertTrue(bs.get(i), \"OR failed to set bits\");\r\n    }\r\n    bs = newInstance(0);\r\n    bs.or(eightFbs);\r\n    for (int i = 0; i < 8; i++) {\r\n        assertTrue(bs.get(i), \"OR(0) failed to set bits\");\r\n    }\r\n    eightFbs.clear(5);\r\n    bs = newInstance(128);\r\n    bs.or(eightFbs);\r\n    assertFalse(bs.get(5), \"OR set a bit which should be off\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\util\\FluentBitSetTest.java",
  "methodName" : "test_or_BitSet",
  "sourceCode" : "/**\r\n * Tests {@link FluentBitSet#or(BitSet)}.\r\n */\r\n@Test\r\nvoid test_or_BitSet() {\r\n    // Test for method void java.util.BitSet.or(BitSet)\r\n    FluentBitSet bs = newInstance(128);\r\n    bs.or(eightFbs.bitSet());\r\n    for (int i = 0; i < 8; i++) {\r\n        assertTrue(bs.get(i), \"OR failed to set bits\");\r\n    }\r\n    bs = newInstance(0);\r\n    bs.or(eightFbs.bitSet());\r\n    for (int i = 0; i < 8; i++) {\r\n        assertTrue(bs.get(i), \"OR(0) failed to set bits\");\r\n    }\r\n    eightFbs.clear(5);\r\n    bs = newInstance(128);\r\n    bs.or(eightFbs.bitSet());\r\n    assertFalse(bs.get(5), \"OR set a bit which should be off\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\util\\FluentBitSetTest.java",
  "methodName" : "test_or_FluentBitSetArray",
  "sourceCode" : "/**\r\n * Tests {@link FluentBitSet#or(FluentBitSet)}.\r\n */\r\n@Test\r\nvoid test_or_FluentBitSetArray() {\r\n    // Test for method void java.util.BitSet.or(BitSet)\r\n    FluentBitSet bs = newInstance(128);\r\n    bs.or(new FluentBitSet[] { eightFbs });\r\n    for (int i = 0; i < 8; i++) {\r\n        assertTrue(bs.get(i), \"OR failed to set bits\");\r\n    }\r\n    bs = newInstance(0);\r\n    bs.or(new FluentBitSet[] { eightFbs });\r\n    for (int i = 0; i < 8; i++) {\r\n        assertTrue(bs.get(i), \"OR(0) failed to set bits\");\r\n    }\r\n    eightFbs.clear(5);\r\n    bs = newInstance(128);\r\n    bs.or(new FluentBitSet[] { eightFbs });\r\n    assertFalse(bs.get(5), \"OR set a bit which should be off\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\util\\FluentBitSetTest.java",
  "methodName" : "test_previousClearBit",
  "sourceCode" : "/**\r\n * Tests {@link FluentBitSet#previousClearBit(int)}.\r\n */\r\n@Test\r\nvoid test_previousClearBit() {\r\n    final FluentBitSet bs = newInstance();\r\n    assertEquals(1, bs.previousClearBit(1), \"previousClearBit\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\util\\FluentBitSetTest.java",
  "methodName" : "test_previousSetBit",
  "sourceCode" : "/**\r\n * Tests {@link FluentBitSet#previousSetBit(int)}.\r\n */\r\n@Test\r\nvoid test_previousSetBit() {\r\n    final FluentBitSet bs = newInstance();\r\n    assertEquals(-1, bs.previousSetBit(1), \"previousSetBit\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\util\\FluentBitSetTest.java",
  "methodName" : "test_setII",
  "sourceCode" : "/**\r\n * Tests {@link FluentBitSet#set(int, int)}.\r\n */\r\n@Test\r\nvoid test_setII() {\r\n    final FluentBitSet bitset = newInstance(30);\r\n    bitset.set(29, 29);\r\n    // Test for method void java.util.BitSet.set(int, int)\r\n    // pos1 and pos2 are in the same bitset element\r\n    FluentBitSet bs = newInstance(16);\r\n    bs.set(5);\r\n    bs.set(15);\r\n    bs.set(7, 11);\r\n    for (int i = 0; i < 7; i++) {\r\n        if (i == 5) {\r\n            assertTrue(bs.get(i), \"Shouldn't have flipped bit \" + i);\r\n        } else {\r\n            assertFalse(bs.get(i), \"Shouldn't have set bit \" + i);\r\n        }\r\n    }\r\n    for (int i = 7; i < 11; i++) {\r\n        assertTrue(bs.get(i), \"Failed to set bit \" + i);\r\n    }\r\n    for (int i = 11; i < bs.size(); i++) {\r\n        if (i == 15) {\r\n            assertTrue(bs.get(i), \"Shouldn't have flipped bit \" + i);\r\n        } else {\r\n            assertFalse(bs.get(i), \"Shouldn't have set bit \" + i);\r\n        }\r\n    }\r\n    // pos1 and pos2 is in the same bitset element, boundary testing\r\n    bs = newInstance(16);\r\n    bs.set(7, 64);\r\n    assertEquals(64, bs.size(), \"Failed to grow BitSet\");\r\n    for (int i = 0; i < 7; i++) {\r\n        assertFalse(bs.get(i), \"Shouldn't have set bit \" + i);\r\n    }\r\n    for (int i = 7; i < 64; i++) {\r\n        assertTrue(bs.get(i), \"Failed to set bit \" + i);\r\n    }\r\n    assertFalse(bs.get(64), \"Shouldn't have set bit 64\");\r\n    // more boundary testing\r\n    bs = newInstance(32);\r\n    bs.set(0, 64);\r\n    for (int i = 0; i < 64; i++) {\r\n        assertTrue(bs.get(i), \"Failed to set bit \" + i);\r\n    }\r\n    assertFalse(bs.get(64), \"Shouldn't have set bit 64\");\r\n    bs = newInstance(32);\r\n    bs.set(0, 65);\r\n    for (int i = 0; i < 65; i++) {\r\n        assertTrue(bs.get(i), \"Failed to set bit \" + i);\r\n    }\r\n    assertFalse(bs.get(65), \"Shouldn't have set bit 65\");\r\n    // pos1 and pos2 are in two sequential bitset elements\r\n    bs = newInstance(128);\r\n    bs.set(7);\r\n    bs.set(110);\r\n    bs.set(9, 74);\r\n    for (int i = 0; i < 9; i++) {\r\n        if (i == 7) {\r\n            assertTrue(bs.get(i), \"Shouldn't have flipped bit \" + i);\r\n        } else {\r\n            assertFalse(bs.get(i), \"Shouldn't have set bit \" + i);\r\n        }\r\n    }\r\n    for (int i = 9; i < 74; i++) {\r\n        assertTrue(bs.get(i), \"Failed to set bit \" + i);\r\n    }\r\n    for (int i = 74; i < bs.size(); i++) {\r\n        if (i == 110) {\r\n            assertTrue(bs.get(i), \"Shouldn't have flipped bit \" + i);\r\n        } else {\r\n            assertFalse(bs.get(i), \"Shouldn't have set bit \" + i);\r\n        }\r\n    }\r\n    // pos1 and pos2 are in two non-sequential bitset elements\r\n    bs = newInstance(256);\r\n    bs.set(7);\r\n    bs.set(255);\r\n    bs.set(9, 219);\r\n    for (int i = 0; i < 9; i++) {\r\n        if (i == 7) {\r\n            assertTrue(bs.get(i), \"Shouldn't have set flipped \" + i);\r\n        } else {\r\n            assertFalse(bs.get(i), \"Shouldn't have set bit \" + i);\r\n        }\r\n    }\r\n    for (int i = 9; i < 219; i++) {\r\n        assertTrue(bs.get(i), \"failed to set bit \" + i);\r\n    }\r\n    for (int i = 219; i < 255; i++) {\r\n        assertFalse(bs.get(i), \"Shouldn't have set bit \" + i);\r\n    }\r\n    assertTrue(bs.get(255), \"Shouldn't have flipped bit 255\");\r\n    // test illegal args\r\n    bs = newInstance(10);\r\n    try {\r\n        bs.set(-1, 3);\r\n        fail(\"Test1: Attempt to flip with  negative index failed to generate exception\");\r\n    } catch (final IndexOutOfBoundsException e) {\r\n        // Correct behavior\r\n    }\r\n    try {\r\n        bs.set(2, -1);\r\n        fail(\"Test2: Attempt to flip with negative index failed to generate exception\");\r\n    } catch (final IndexOutOfBoundsException e) {\r\n        // Correct behavior\r\n    }\r\n    bs.set(2, 2);\r\n    assertFalse(bs.get(2), \"Bit got set incorrectly \");\r\n    try {\r\n        bs.set(4, 2);\r\n        fail(\"Test4: Attempt to flip with illegal args failed to generate exception\");\r\n    } catch (final IndexOutOfBoundsException e) {\r\n        // Correct behavior\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\util\\FluentBitSetTest.java",
  "methodName" : "test_setIIZ",
  "sourceCode" : "/**\r\n * Tests {@link FluentBitSet#set(int, int, boolean)}.\r\n */\r\n@Test\r\nvoid test_setIIZ() {\r\n    // Test for method void java.util.BitSet.set(int, int, boolean)\r\n    eightFbs.set(3, 6, false);\r\n    assertTrue(!eightFbs.get(3) && !eightFbs.get(4) && !eightFbs.get(5), \"Should have set bits 3, 4, and 5 to false\");\r\n    eightFbs.set(3, 6, true);\r\n    assertTrue(eightFbs.get(3) && eightFbs.get(4) && eightFbs.get(5), \"Should have set bits 3, 4, and 5 to true\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\util\\FluentBitSetTest.java",
  "methodName" : "test_setInclusive",
  "sourceCode" : "/**\r\n * Tests {@link FluentBitSet#setInclusive(int, int)}.\r\n */\r\n@Test\r\nvoid test_setInclusive() {\r\n    final FluentBitSet bitset = newInstance(30);\r\n    bitset.set(29, 29);\r\n    // Test for method void java.util.BitSet.set(int, int)\r\n    // pos1 and pos2 are in the same bitset element\r\n    FluentBitSet bs = newInstance(16);\r\n    bs.set(5);\r\n    bs.set(15);\r\n    bs.setInclusive(7, 11);\r\n    for (int i = 0; i < 7; i++) {\r\n        if (i == 5) {\r\n            assertTrue(bs.get(i), \"Shouldn't have flipped bit \" + i);\r\n        } else {\r\n            assertFalse(bs.get(i), \"Shouldn't have set bit \" + i);\r\n        }\r\n    }\r\n    for (int i = 7; i < 12; i++) {\r\n        assertTrue(bs.get(i), \"Failed to set bit \" + i);\r\n    }\r\n    for (int i = 12; i < bs.size(); i++) {\r\n        if (i == 15) {\r\n            assertTrue(bs.get(i), \"Shouldn't have flipped bit \" + i);\r\n        } else {\r\n            assertFalse(bs.get(i), \"Shouldn't have set bit \" + i);\r\n        }\r\n    }\r\n    // pos1 and pos2 is in the same bitset element, boundary testing\r\n    bs = newInstance(16);\r\n    bs.setInclusive(7, 64);\r\n    assertEquals(128, bs.size(), \"Failed to grow BitSet\");\r\n    for (int i = 0; i < 7; i++) {\r\n        assertFalse(bs.get(i), \"Shouldn't have set bit \" + i);\r\n    }\r\n    for (int i = 7; i < 65; i++) {\r\n        assertTrue(bs.get(i), \"Failed to set bit \" + i);\r\n    }\r\n    assertFalse(bs.get(65), \"Shouldn't have set bit 64\");\r\n    // more boundary testing\r\n    bs = newInstance(32);\r\n    bs.setInclusive(0, 64);\r\n    for (int i = 0; i < 65; i++) {\r\n        assertTrue(bs.get(i), \"Failed to set bit \" + i);\r\n    }\r\n    assertFalse(bs.get(65), \"Shouldn't have set bit 64\");\r\n    bs = newInstance(32);\r\n    bs.setInclusive(0, 65);\r\n    for (int i = 0; i < 66; i++) {\r\n        assertTrue(bs.get(i), \"Failed to set bit \" + i);\r\n    }\r\n    assertFalse(bs.get(66), \"Shouldn't have set bit 65\");\r\n    // pos1 and pos2 are in two sequential bitset elements\r\n    bs = newInstance(128);\r\n    bs.set(7);\r\n    bs.set(110);\r\n    bs.setInclusive(9, 74);\r\n    for (int i = 0; i < 9; i++) {\r\n        if (i == 7) {\r\n            assertTrue(bs.get(i), \"Shouldn't have flipped bit \" + i);\r\n        } else {\r\n            assertFalse(bs.get(i), \"Shouldn't have set bit \" + i);\r\n        }\r\n    }\r\n    for (int i = 9; i < 75; i++) {\r\n        assertTrue(bs.get(i), \"Failed to set bit \" + i);\r\n    }\r\n    for (int i = 75; i < bs.size(); i++) {\r\n        if (i == 110) {\r\n            assertTrue(bs.get(i), \"Shouldn't have flipped bit \" + i);\r\n        } else {\r\n            assertFalse(bs.get(i), \"Shouldn't have set bit \" + i);\r\n        }\r\n    }\r\n    // pos1 and pos2 are in two non-sequential bitset elements\r\n    bs = newInstance(256);\r\n    bs.set(7);\r\n    bs.set(255);\r\n    bs.setInclusive(9, 219);\r\n    for (int i = 0; i < 9; i++) {\r\n        if (i == 7) {\r\n            assertTrue(bs.get(i), \"Shouldn't have set flipped \" + i);\r\n        } else {\r\n            assertFalse(bs.get(i), \"Shouldn't have set bit \" + i);\r\n        }\r\n    }\r\n    for (int i = 9; i < 220; i++) {\r\n        assertTrue(bs.get(i), \"failed to set bit \" + i);\r\n    }\r\n    for (int i = 220; i < 255; i++) {\r\n        assertFalse(bs.get(i), \"Shouldn't have set bit \" + i);\r\n    }\r\n    assertTrue(bs.get(255), \"Shouldn't have flipped bit 255\");\r\n    // test illegal args\r\n    bs = newInstance(10);\r\n    try {\r\n        bs.setInclusive(-1, 3);\r\n        fail(\"Test1: Attempt to flip with  negative index failed to generate exception\");\r\n    } catch (final IndexOutOfBoundsException e) {\r\n        // Correct behavior\r\n    }\r\n    try {\r\n        bs.setInclusive(2, -1);\r\n        fail(\"Test2: Attempt to flip with negative index failed to generate exception\");\r\n    } catch (final IndexOutOfBoundsException e) {\r\n        // Correct behavior\r\n    }\r\n    bs.setInclusive(2, 2);\r\n    assertFalse(bs.get(3), \"Bit got set incorrectly \");\r\n    try {\r\n        bs.setInclusive(4, 2);\r\n        fail(\"Test4: Attempt to flip with illegal args failed to generate exception\");\r\n    } catch (final IndexOutOfBoundsException e) {\r\n        // Correct behavior\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\util\\FluentBitSetTest.java",
  "methodName" : "test_setInt",
  "sourceCode" : "/**\r\n * Tests {@link FluentBitSet#set(int)}.\r\n */\r\n@Test\r\nvoid test_setInt() {\r\n    // Test for method void java.util.BitSet.set(int)\r\n    FluentBitSet bs = newInstance();\r\n    bs.set(8);\r\n    assertTrue(bs.get(8), \"Failed to set bit\");\r\n    try {\r\n        bs.set(-1);\r\n        fail(\"Attempt to set at negative index failed to generate exception\");\r\n    } catch (final IndexOutOfBoundsException e) {\r\n        // Correct behavior\r\n    }\r\n    // Try setting a bit on a 64 boundary\r\n    bs.set(128);\r\n    assertEquals(192, bs.size(), \"Failed to grow BitSet\");\r\n    assertTrue(bs.get(128), \"Failed to set bit\");\r\n    bs = newInstance(64);\r\n    for (int i = bs.size(); --i >= 0; ) {\r\n        bs.set(i);\r\n        assertTrue(bs.get(i), \"Incorrectly set\");\r\n        assertEquals(i + 1, bs.length(), \"Incorrect length\");\r\n        for (int j = bs.size(); --j > i; ) {\r\n            assertFalse(bs.get(j), \"Incorrectly set bit \" + j);\r\n        }\r\n        for (int j = i; --j >= 0; ) {\r\n            assertFalse(bs.get(j), \"Incorrectly set bit \" + j);\r\n        }\r\n        bs.clear(i);\r\n    }\r\n    bs = newInstance(0);\r\n    assertEquals(0, bs.length(), \"Test1: Wrong length\");\r\n    bs.set(0);\r\n    assertEquals(1, bs.length(), \"Test2: Wrong length\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\util\\FluentBitSetTest.java",
  "methodName" : "test_setIntArray",
  "sourceCode" : "/**\r\n * Tests {@link FluentBitSet#set(int...)}.\r\n */\r\n@Test\r\nvoid test_setIntArray() {\r\n    // Test for method void java.util.BitSet.set(int)\r\n    FluentBitSet bs = newInstance();\r\n    bs.set(new int[] { 8 });\r\n    assertTrue(bs.get(8), \"Failed to set bit\");\r\n    try {\r\n        bs.set(new int[] { -1 });\r\n        fail(\"Attempt to set at negative index failed to generate exception\");\r\n    } catch (final IndexOutOfBoundsException e) {\r\n        // Correct behavior\r\n    }\r\n    // Try setting a bit on a 64 boundary\r\n    bs.set(new int[] { 128 });\r\n    assertEquals(192, bs.size(), \"Failed to grow BitSet\");\r\n    assertTrue(bs.get(128), \"Failed to set bit\");\r\n    bs = newInstance(64);\r\n    for (int i = bs.size(); --i >= 0; ) {\r\n        bs.set(new int[] { i });\r\n        assertTrue(bs.get(i), \"Incorrectly set\");\r\n        assertEquals(i + 1, bs.length(), \"Incorrect length\");\r\n        for (int j = bs.size(); --j > i; ) {\r\n            assertFalse(bs.get(j), \"Incorrectly set bit \" + j);\r\n        }\r\n        for (int j = i; --j >= 0; ) {\r\n            assertFalse(bs.get(j), \"Incorrectly set bit \" + j);\r\n        }\r\n        bs.clear(i);\r\n    }\r\n    bs = newInstance(0);\r\n    assertEquals(0, bs.length(), \"Test1: Wrong length\");\r\n    bs.set(new int[] { 0 });\r\n    assertEquals(1, bs.length(), \"Test2: Wrong length\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\util\\FluentBitSetTest.java",
  "methodName" : "test_setIZ",
  "sourceCode" : "/**\r\n * Tests {@link FluentBitSet#set(int, boolean)}.\r\n */\r\n@Test\r\nvoid test_setIZ() {\r\n    // Test for method void java.util.BitSet.set(int, boolean)\r\n    eightFbs.set(5, false);\r\n    assertFalse(eightFbs.get(5), \"Should have set bit 5 to true\");\r\n    eightFbs.set(5, true);\r\n    assertTrue(eightFbs.get(5), \"Should have set bit 5 to false\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\util\\FluentBitSetTest.java",
  "methodName" : "test_setRangeInclusive",
  "sourceCode" : "/**\r\n * Tests {@link FluentBitSet#setInclusive(int, int)}.\r\n */\r\n@Test\r\nvoid test_setRangeInclusive() {\r\n    // Test for method int java.util.BitSet.size()\r\n    assertEquals(64, eightFbs.size(), \"Returned incorrect size\");\r\n    eightFbs.set(129);\r\n    assertTrue(eightFbs.size() >= 129, \"Returned incorrect size\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\util\\FluentBitSetTest.java",
  "methodName" : "test_size",
  "sourceCode" : "/**\r\n * Tests {@link FluentBitSet#size()}.\r\n */\r\n@Test\r\nvoid test_size() {\r\n    // Test for method int java.util.BitSet.size()\r\n    assertEquals(64, eightFbs.size(), \"Returned incorrect size\");\r\n    eightFbs.set(129);\r\n    assertTrue(eightFbs.size() >= 129, \"Returned incorrect size\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\util\\FluentBitSetTest.java",
  "methodName" : "test_stream",
  "sourceCode" : "/**\r\n * Tests {@link FluentBitSet#previousSetBit(int)}.\r\n */\r\n@Test\r\nvoid test_stream() {\r\n    final FluentBitSet bs = newInstance();\r\n    assertEquals(0, bs.stream().count(), \"stream\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\util\\FluentBitSetTest.java",
  "methodName" : "test_toByteArray",
  "sourceCode" : "/**\r\n * Tests {@link FluentBitSet#previousSetBit(int)}.\r\n */\r\n@Test\r\nvoid test_toByteArray() {\r\n    final FluentBitSet bs = newInstance();\r\n    assertArrayEquals(ArrayUtils.EMPTY_BYTE_ARRAY, bs.toByteArray(), \"stream\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\util\\FluentBitSetTest.java",
  "methodName" : "test_toLongArray",
  "sourceCode" : "/**\r\n * Tests {@link FluentBitSet#previousSetBit(int)}.\r\n */\r\n@Test\r\nvoid test_toLongArray() {\r\n    final FluentBitSet bs = newInstance();\r\n    assertArrayEquals(ArrayUtils.EMPTY_LONG_ARRAY, bs.toLongArray(), \"stream\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\util\\FluentBitSetTest.java",
  "methodName" : "test_toString",
  "sourceCode" : "/**\r\n * Tests {@link FluentBitSet#toString()}.\r\n */\r\n@Test\r\nvoid test_toString() {\r\n    // Test for method java.lang.String java.util.BitSet.toString()\r\n    assertEquals(\"{0, 1, 2, 3, 4, 5, 6, 7}\", eightFbs.toString(), \"Returned incorrect string representation\");\r\n    eightFbs.clear(2);\r\n    assertEquals(\"{0, 1, 3, 4, 5, 6, 7}\", eightFbs.toString(), \"Returned incorrect string representation\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\util\\FluentBitSetTest.java",
  "methodName" : "test_xor",
  "sourceCode" : "/**\r\n * Tests {@link FluentBitSet#xor(FluentBitSet)}.\r\n */\r\n@Test\r\nvoid test_xor() {\r\n    // Test for method void java.util.BitSet.xor(BitSet)\r\n    FluentBitSet bs = (FluentBitSet) eightFbs.clone();\r\n    bs.xor(eightFbs);\r\n    for (int i = 0; i < 8; i++) {\r\n        assertFalse(bs.get(i), \"XOR failed to clear bits\");\r\n    }\r\n    bs.xor(eightFbs);\r\n    for (int i = 0; i < 8; i++) {\r\n        assertTrue(bs.get(i), \"XOR failed to set bits\");\r\n    }\r\n    bs = newInstance(0);\r\n    bs.xor(eightFbs);\r\n    for (int i = 0; i < 8; i++) {\r\n        assertTrue(bs.get(i), \"XOR(0) failed to set bits\");\r\n    }\r\n    bs = newInstance();\r\n    bs.set(63);\r\n    assertEquals(\"{63}\", bs.toString(), \"Test highest bit\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\util\\FluentBitSetTest.java",
  "methodName" : "test_xor_BitSet",
  "sourceCode" : "/**\r\n * Tests {@link FluentBitSet#xor(BitSet)}.\r\n */\r\n@Test\r\nvoid test_xor_BitSet() {\r\n    // Test for method void java.util.BitSet.xor(BitSet)\r\n    FluentBitSet bs = (FluentBitSet) eightFbs.clone();\r\n    bs.xor(eightFbs.bitSet());\r\n    for (int i = 0; i < 8; i++) {\r\n        assertFalse(bs.get(i), \"XOR failed to clear bits\");\r\n    }\r\n    bs.xor(eightFbs.bitSet());\r\n    for (int i = 0; i < 8; i++) {\r\n        assertTrue(bs.get(i), \"XOR failed to set bits\");\r\n    }\r\n    bs = newInstance(0);\r\n    bs.xor(eightFbs.bitSet());\r\n    for (int i = 0; i < 8; i++) {\r\n        assertTrue(bs.get(i), \"XOR(0) failed to set bits\");\r\n    }\r\n    bs = newInstance();\r\n    bs.set(63);\r\n    assertEquals(\"{63}\", bs.toString(), \"Test highest bit\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\util\\IterableStringTokenizerTest.java",
  "methodName" : "testConstructorArguments1ForEach",
  "sourceCode" : "@Test\r\nvoid testConstructorArguments1ForEach() {\r\n    final List<String> list = new ArrayList<>();\r\n    new IterableStringTokenizer(\"a,b,c\").forEach(list::add);\r\n    assertEquals(Arrays.asList(\"a,b,c\"), list);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\util\\IterableStringTokenizerTest.java",
  "methodName" : "testConstructorArguments1ToList",
  "sourceCode" : "@Test\r\nvoid testConstructorArguments1ToList() {\r\n    assertEquals(Arrays.asList(\"a,b,c\"), new IterableStringTokenizer(\"a,b,c\").toList());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\util\\IterableStringTokenizerTest.java",
  "methodName" : "testConstructorArguments2ForEach",
  "sourceCode" : "@ParameterizedTest\r\n@MethodSource(\"delimiters\")\r\nvoid testConstructorArguments2ForEach(final String singleDelim) {\r\n    final List<String> list = new ArrayList<>();\r\n    new IterableStringTokenizer(String.join(singleDelim, DATA), singleDelim).forEach(list::add);\r\n    assertEquals(Arrays.asList(DATA), list);\r\n}",
  "annotations" : [ "ParameterizedTest" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\util\\IterableStringTokenizerTest.java",
  "methodName" : "testConstructorArguments2ToList",
  "sourceCode" : "@ParameterizedTest\r\n@MethodSource(\"delimiters\")\r\nvoid testConstructorArguments2ToList(final String singleDelim) {\r\n    assertEquals(Arrays.asList(DATA), new IterableStringTokenizer(String.join(singleDelim, DATA), singleDelim).toList());\r\n}",
  "annotations" : [ "ParameterizedTest" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\util\\IterableStringTokenizerTest.java",
  "methodName" : "testConstructorArguments3AllDelimsToList",
  "sourceCode" : "@ParameterizedTest\r\n@MethodSource(\"delimiters\")\r\nvoid testConstructorArguments3AllDelimsToList(final String singleDelim) {\r\n    final String data = String.join(singleDelim, DATA);\r\n    assertEquals(Arrays.asList(\"a\", singleDelim, \"b\", singleDelim, \"c\"), new IterableStringTokenizer(data, DELIMITERS_STRING, true).toList());\r\n    assertEquals(Arrays.asList(DATA), new IterableStringTokenizer(data, DELIMITERS_STRING, false).toList());\r\n}",
  "annotations" : [ "ParameterizedTest" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\util\\IterableStringTokenizerTest.java",
  "methodName" : "testConstructorArguments3ToList",
  "sourceCode" : "@ParameterizedTest\r\n@MethodSource(\"delimiters\")\r\nvoid testConstructorArguments3ToList(final String singleDelim) {\r\n    final String data = String.join(singleDelim, DATA);\r\n    assertEquals(Arrays.asList(\"a\", singleDelim, \"b\", singleDelim, \"c\"), new IterableStringTokenizer(data, singleDelim, true).toList());\r\n    assertEquals(Arrays.asList(DATA), new IterableStringTokenizer(data, singleDelim, false).toList());\r\n}",
  "annotations" : [ "ParameterizedTest" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\util\\IterableStringTokenizerTest.java",
  "methodName" : "testEmptyString",
  "sourceCode" : "@Test\r\nvoid testEmptyString() {\r\n    assertTrue(new IterableStringTokenizer(StringUtils.EMPTY).toList().isEmpty());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\util\\IterableStringTokenizerTest.java",
  "methodName" : "testIterator",
  "sourceCode" : "@Test\r\nvoid testIterator() {\r\n    final IterableStringTokenizer tokenizer = new IterableStringTokenizer(\"a,b,c\", \",\");\r\n    final Iterator<String> iterator = tokenizer.iterator();\r\n    assertTrue(iterator.hasNext());\r\n    assertEquals(\"a\", iterator.next());\r\n    assertTrue(iterator.hasNext());\r\n    assertEquals(\"b\", iterator.next());\r\n    assertTrue(iterator.hasNext());\r\n    assertEquals(\"c\", iterator.next());\r\n    assertFalse(iterator.hasNext());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\util\\IterableStringTokenizerTest.java",
  "methodName" : "testNonDefaultDelimiterToArray",
  "sourceCode" : "@Test\r\nvoid testNonDefaultDelimiterToArray() {\r\n    assertArrayEquals(new String[] {}, new IterableStringTokenizer(\"\", \"|\").toArray());\r\n    assertArrayEquals(new String[] { \"a\" }, new IterableStringTokenizer(\"a\", \"|\").toArray());\r\n    assertArrayEquals(new String[] { \"a\", \"b\" }, new IterableStringTokenizer(\"a|b\", \"|\").toArray());\r\n    assertArrayEquals(new String[] { \"a\", \"b\", \"c\" }, new IterableStringTokenizer(\"a|b|c\", \"|\").toArray());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\util\\IterableStringTokenizerTest.java",
  "methodName" : "testNonDefaultDelimiterToList",
  "sourceCode" : "@Test\r\nvoid testNonDefaultDelimiterToList() {\r\n    assertEquals(Arrays.asList(DATA), new IterableStringTokenizer(\"a|b|c\", \"|\").toList());\r\n    assertEquals(Arrays.asList(DATA), new IterableStringTokenizer(\"a!b!c\", \"!\").toList());\r\n    assertEquals(Arrays.asList(DATA), new IterableStringTokenizer(\"a^!b^!c\", \"^!\").toList());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\util\\IterableStringTokenizerTest.java",
  "methodName" : "testToArray",
  "sourceCode" : "@Test\r\nvoid testToArray() {\r\n    // 0 tokens\r\n    assertArrayEquals(new String[] {}, new IterableStringTokenizer(\"\").toArray());\r\n    // 1 token\r\n    assertArrayEquals(new String[] { \"a\" }, new IterableStringTokenizer(\"a\").toArray());\r\n    assertArrayEquals(new String[] { \"a,b\" }, new IterableStringTokenizer(\"a,b\").toArray());\r\n    assertArrayEquals(new String[] { \"a,b,c\" }, new IterableStringTokenizer(\"a,b,c\").toArray());\r\n    // > 1 token\r\n    assertArrayEquals(new String[] { \"a\", \"b\" }, new IterableStringTokenizer(\"a b\").toArray());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\util\\IterableStringTokenizerTest.java",
  "methodName" : "testToList",
  "sourceCode" : "@Test\r\nvoid testToList() {\r\n    // 0 tokens\r\n    assertEquals(Arrays.asList(), new IterableStringTokenizer(\"\").toList());\r\n    // 1 token\r\n    assertEquals(Arrays.asList(\"a\"), new IterableStringTokenizer(\"a\").toList());\r\n    assertEquals(Arrays.asList(\"a,b\"), new IterableStringTokenizer(\"a,b\").toList());\r\n    assertEquals(Arrays.asList(\"a,b,c\"), new IterableStringTokenizer(\"a,b,c\").toList());\r\n    // > 1 token\r\n    assertEquals(Arrays.asList(\"a\", \"b\"), new IterableStringTokenizer(\"a b\").toList());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\util\\IterableStringTokenizerTest.java",
  "methodName" : "testToStream",
  "sourceCode" : "@Test\r\nvoid testToStream() {\r\n    // 0 tokens\r\n    assertEquals(Arrays.asList(), new IterableStringTokenizer(\"\").toList());\r\n    // 1 token\r\n    assertEquals(Arrays.asList(\"a\"), new IterableStringTokenizer(\"a\").toList());\r\n    assertEquals(Arrays.asList(\"a,b\"), new IterableStringTokenizer(\"a,b\").toStream().collect(Collectors.toList()));\r\n    assertEquals(Arrays.asList(\"a,b,c\"), new IterableStringTokenizer(\"a,b,c\").toStream().collect(Collectors.toList()));\r\n    // > 1 token\r\n    assertEquals(Arrays.asList(\"a\", \"b\"), new IterableStringTokenizer(\"a b\").toStream().collect(Collectors.toList()));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ValidateTest.java",
  "methodName" : "shouldNotThrowExceptionWhenValueIsBetweenBounds",
  "sourceCode" : "@Test\r\nvoid shouldNotThrowExceptionWhenValueIsBetweenBounds() {\r\n    Validate.exclusiveBetween(LOWER_BOUND, UPPER_BOUND, \"2\", \"MSG\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ValidateTest.java",
  "methodName" : "shouldThrowIllegalArgumentExceptionWithDefaultMessageWhenValueIsAboveUpperBound",
  "sourceCode" : "@Test\r\nvoid shouldThrowIllegalArgumentExceptionWithDefaultMessageWhenValueIsAboveUpperBound() {\r\n    final IllegalArgumentException ex = assertIllegalArgumentException(() -> Validate.exclusiveBetween(LOWER_BOUND, UPPER_BOUND, \"4\", \"MSG\"));\r\n    assertEquals(\"MSG\", ex.getMessage());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ValidateTest.java",
  "methodName" : "shouldThrowIllegalArgumentExceptionWithGivenMessageWhenValueIsBelowLowerBound",
  "sourceCode" : "@Test\r\nvoid shouldThrowIllegalArgumentExceptionWithGivenMessageWhenValueIsBelowLowerBound() {\r\n    final IllegalArgumentException ex = assertIllegalArgumentException(() -> Validate.exclusiveBetween(LOWER_BOUND, UPPER_BOUND, \"0\", \"MSG\"));\r\n    assertEquals(\"MSG\", ex.getMessage());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ValidateTest.java",
  "methodName" : "shouldThrowIllegalArgumentExceptionWithGivenMessageWhenValueIsLowerBound",
  "sourceCode" : "@Test\r\nvoid shouldThrowIllegalArgumentExceptionWithGivenMessageWhenValueIsLowerBound() {\r\n    final IllegalArgumentException ex = assertIllegalArgumentException(() -> Validate.exclusiveBetween(LOWER_BOUND, UPPER_BOUND, LOWER_BOUND, \"MSG\"));\r\n    assertEquals(\"MSG\", ex.getMessage());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ValidateTest.java",
  "methodName" : "shouldThrowIllegalArgumentExceptionWithGivenMessageWhenValueIsUpperBound",
  "sourceCode" : "@Test\r\nvoid shouldThrowIllegalArgumentExceptionWithGivenMessageWhenValueIsUpperBound() {\r\n    final IllegalArgumentException ex = assertIllegalArgumentException(() -> Validate.exclusiveBetween(LOWER_BOUND, UPPER_BOUND, UPPER_BOUND, \"MSG\"));\r\n    assertEquals(\"MSG\", ex.getMessage());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ValidateTest.java",
  "methodName" : "shouldNotThrowExceptionWhenValueIsBetweenBounds",
  "sourceCode" : "@Test\r\nvoid shouldNotThrowExceptionWhenValueIsBetweenBounds() {\r\n    Validate.exclusiveBetween(LOWER_BOUND, UPPER_BOUND, \"2\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ValidateTest.java",
  "methodName" : "shouldThrowIllegalArgumentExceptionWithDefaultMessageWhenValueIsAboveUpperBound",
  "sourceCode" : "@Test\r\nvoid shouldThrowIllegalArgumentExceptionWithDefaultMessageWhenValueIsAboveUpperBound() {\r\n    final IllegalArgumentException ex = assertIllegalArgumentException(() -> Validate.exclusiveBetween(LOWER_BOUND, UPPER_BOUND, \"4\"));\r\n    assertEquals(\"The value 4 is not in the specified exclusive range of 1 to 3\", ex.getMessage());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ValidateTest.java",
  "methodName" : "shouldThrowIllegalArgumentExceptionWithDefaultMessageWhenValueIsBelowLowerBound",
  "sourceCode" : "@Test\r\nvoid shouldThrowIllegalArgumentExceptionWithDefaultMessageWhenValueIsBelowLowerBound() {\r\n    final IllegalArgumentException ex = assertIllegalArgumentException(() -> Validate.exclusiveBetween(LOWER_BOUND, UPPER_BOUND, \"0\"));\r\n    assertEquals(\"The value 0 is not in the specified exclusive range of 1 to 3\", ex.getMessage());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ValidateTest.java",
  "methodName" : "shouldThrowIllegalArgumentExceptionWithDefaultMessageWhenValueIsLowerBound",
  "sourceCode" : "@Test\r\nvoid shouldThrowIllegalArgumentExceptionWithDefaultMessageWhenValueIsLowerBound() {\r\n    final IllegalArgumentException ex = assertIllegalArgumentException(() -> Validate.exclusiveBetween(LOWER_BOUND, UPPER_BOUND, LOWER_BOUND));\r\n    assertEquals(\"The value 1 is not in the specified exclusive range of 1 to 3\", ex.getMessage());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ValidateTest.java",
  "methodName" : "shouldThrowIllegalArgumentExceptionWithDefaultMessageWhenValueIsUpperBound",
  "sourceCode" : "@Test\r\nvoid shouldThrowIllegalArgumentExceptionWithDefaultMessageWhenValueIsUpperBound() {\r\n    final IllegalArgumentException ex = assertIllegalArgumentException(() -> Validate.exclusiveBetween(LOWER_BOUND, UPPER_BOUND, UPPER_BOUND));\r\n    assertEquals(\"The value 3 is not in the specified exclusive range of 1 to 3\", ex.getMessage());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ValidateTest.java",
  "methodName" : "shouldNotThrowExceptionWhenValueIsBetweenBounds",
  "sourceCode" : "@Test\r\nvoid shouldNotThrowExceptionWhenValueIsBetweenBounds() {\r\n    Validate.exclusiveBetween(LOWER_BOUND, UPPER_BOUND, 2.1, \"MSG\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ValidateTest.java",
  "methodName" : "shouldThrowIllegalArgumentExceptionWhenValueIsLowerBound",
  "sourceCode" : "@Test\r\nvoid shouldThrowIllegalArgumentExceptionWhenValueIsLowerBound() {\r\n    final IllegalArgumentException ex = assertIllegalArgumentException(() -> Validate.exclusiveBetween(LOWER_BOUND, UPPER_BOUND, LOWER_BOUND, \"MSG\"));\r\n    assertEquals(\"MSG\", ex.getMessage());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ValidateTest.java",
  "methodName" : "shouldThrowIllegalArgumentExceptionWhenValueIsUpperBound",
  "sourceCode" : "@Test\r\nvoid shouldThrowIllegalArgumentExceptionWhenValueIsUpperBound() {\r\n    final IllegalArgumentException ex = assertIllegalArgumentException(() -> Validate.exclusiveBetween(LOWER_BOUND, UPPER_BOUND, UPPER_BOUND, \"MSG\"));\r\n    assertEquals(\"MSG\", ex.getMessage());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ValidateTest.java",
  "methodName" : "shouldThrowIllegalArgumentExceptionWithGivenMessageWhenValueIsAboveUpperBound",
  "sourceCode" : "@Test\r\nvoid shouldThrowIllegalArgumentExceptionWithGivenMessageWhenValueIsAboveUpperBound() {\r\n    final IllegalArgumentException ex = assertIllegalArgumentException(() -> Validate.exclusiveBetween(LOWER_BOUND, UPPER_BOUND, 4.1, \"MSG\"));\r\n    assertEquals(\"MSG\", ex.getMessage());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ValidateTest.java",
  "methodName" : "shouldThrowIllegalArgumentExceptionWithGivenMessageWhenValueIsBelowLowerBound",
  "sourceCode" : "@Test\r\nvoid shouldThrowIllegalArgumentExceptionWithGivenMessageWhenValueIsBelowLowerBound() {\r\n    final IllegalArgumentException ex = assertIllegalArgumentException(() -> Validate.exclusiveBetween(LOWER_BOUND, UPPER_BOUND, 0.01, \"MSG\"));\r\n    assertEquals(\"MSG\", ex.getMessage());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ValidateTest.java",
  "methodName" : "shouldNotThrowExceptionWhenValueIsBetweenBounds",
  "sourceCode" : "@Test\r\nvoid shouldNotThrowExceptionWhenValueIsBetweenBounds() {\r\n    Validate.exclusiveBetween(LOWER_BOUND, UPPER_BOUND, 2.1);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ValidateTest.java",
  "methodName" : "shouldThrowIllegalArgumentExceptionWhenValueIsLowerBound",
  "sourceCode" : "@Test\r\nvoid shouldThrowIllegalArgumentExceptionWhenValueIsLowerBound() {\r\n    final IllegalArgumentException ex = assertIllegalArgumentException(() -> Validate.exclusiveBetween(LOWER_BOUND, UPPER_BOUND, LOWER_BOUND));\r\n    assertEquals(\"The value 0.1 is not in the specified exclusive range of 0.1 to 3.1\", ex.getMessage());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ValidateTest.java",
  "methodName" : "shouldThrowIllegalArgumentExceptionWhenValueIsUpperBound",
  "sourceCode" : "@Test\r\nvoid shouldThrowIllegalArgumentExceptionWhenValueIsUpperBound() {\r\n    final IllegalArgumentException ex = assertIllegalArgumentException(() -> Validate.exclusiveBetween(LOWER_BOUND, UPPER_BOUND, UPPER_BOUND));\r\n    assertEquals(\"The value 3.1 is not in the specified exclusive range of 0.1 to 3.1\", ex.getMessage());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ValidateTest.java",
  "methodName" : "shouldThrowIllegalArgumentExceptionWithDefaultMessageWhenValueIsAboveUpperBound",
  "sourceCode" : "@Test\r\nvoid shouldThrowIllegalArgumentExceptionWithDefaultMessageWhenValueIsAboveUpperBound() {\r\n    final IllegalArgumentException ex = assertIllegalArgumentException(() -> Validate.exclusiveBetween(LOWER_BOUND, UPPER_BOUND, 4.1));\r\n    assertEquals(\"The value 4.1 is not in the specified exclusive range of 0.1 to 3.1\", ex.getMessage());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ValidateTest.java",
  "methodName" : "shouldThrowIllegalArgumentExceptionWithDefaultMessageWhenValueIsBelowLowerBound",
  "sourceCode" : "@Test\r\nvoid shouldThrowIllegalArgumentExceptionWithDefaultMessageWhenValueIsBelowLowerBound() {\r\n    final IllegalArgumentException ex = assertIllegalArgumentException(() -> Validate.exclusiveBetween(LOWER_BOUND, UPPER_BOUND, 0.01));\r\n    assertEquals(\"The value 0.01 is not in the specified exclusive range of 0.1 to 3.1\", ex.getMessage());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ValidateTest.java",
  "methodName" : "shouldNotThrowExceptionWhenValueIsBetweenBounds",
  "sourceCode" : "@Test\r\nvoid shouldNotThrowExceptionWhenValueIsBetweenBounds() {\r\n    Validate.exclusiveBetween(LOWER_BOUND, UPPER_BOUND, 2, \"MSG\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ValidateTest.java",
  "methodName" : "shouldThrowIllegalArgumentExceptionWithDefaultMessageWhenValueIsAboveUpperBound",
  "sourceCode" : "@Test\r\nvoid shouldThrowIllegalArgumentExceptionWithDefaultMessageWhenValueIsAboveUpperBound() {\r\n    final IllegalArgumentException ex = assertIllegalArgumentException(() -> Validate.exclusiveBetween(LOWER_BOUND, UPPER_BOUND, 4, \"MSG\"));\r\n    assertEquals(\"MSG\", ex.getMessage());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ValidateTest.java",
  "methodName" : "shouldThrowIllegalArgumentExceptionWithGivenMessageWhenValueIsBelowLowerBound",
  "sourceCode" : "@Test\r\nvoid shouldThrowIllegalArgumentExceptionWithGivenMessageWhenValueIsBelowLowerBound() {\r\n    final IllegalArgumentException ex = assertIllegalArgumentException(() -> Validate.exclusiveBetween(LOWER_BOUND, UPPER_BOUND, 0, \"MSG\"));\r\n    assertEquals(\"MSG\", ex.getMessage());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ValidateTest.java",
  "methodName" : "shouldThrowIllegalArgumentExceptionWithGivenMessageWhenValueIsLowerBound",
  "sourceCode" : "@Test\r\nvoid shouldThrowIllegalArgumentExceptionWithGivenMessageWhenValueIsLowerBound() {\r\n    final IllegalArgumentException ex = assertIllegalArgumentException(() -> Validate.exclusiveBetween(LOWER_BOUND, UPPER_BOUND, LOWER_BOUND, \"MSG\"));\r\n    assertEquals(\"MSG\", ex.getMessage());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ValidateTest.java",
  "methodName" : "shouldThrowIllegalArgumentExceptionWithGivenMessageWhenValueIsUpperBound",
  "sourceCode" : "@Test\r\nvoid shouldThrowIllegalArgumentExceptionWithGivenMessageWhenValueIsUpperBound() {\r\n    final IllegalArgumentException ex = assertIllegalArgumentException(() -> Validate.exclusiveBetween(LOWER_BOUND, UPPER_BOUND, UPPER_BOUND, \"MSG\"));\r\n    assertEquals(\"MSG\", ex.getMessage());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ValidateTest.java",
  "methodName" : "shouldNotThrowExceptionWhenValueIsBetweenBounds",
  "sourceCode" : "@Test\r\nvoid shouldNotThrowExceptionWhenValueIsBetweenBounds() {\r\n    Validate.exclusiveBetween(LOWER_BOUND, UPPER_BOUND, 2);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ValidateTest.java",
  "methodName" : "shouldThrowIllegalArgumentExceptionWithDefaultMessageWhenValueIsAboveUpperBound",
  "sourceCode" : "@Test\r\nvoid shouldThrowIllegalArgumentExceptionWithDefaultMessageWhenValueIsAboveUpperBound() {\r\n    final IllegalArgumentException ex = assertIllegalArgumentException(() -> Validate.exclusiveBetween(LOWER_BOUND, UPPER_BOUND, 4));\r\n    assertEquals(\"The value 4 is not in the specified exclusive range of 1 to 3\", ex.getMessage());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ValidateTest.java",
  "methodName" : "shouldThrowIllegalArgumentExceptionWithDefaultMessageWhenValueIsBelowLowerBound",
  "sourceCode" : "@Test\r\nvoid shouldThrowIllegalArgumentExceptionWithDefaultMessageWhenValueIsBelowLowerBound() {\r\n    final IllegalArgumentException ex = assertIllegalArgumentException(() -> Validate.exclusiveBetween(LOWER_BOUND, UPPER_BOUND, 0));\r\n    assertEquals(\"The value 0 is not in the specified exclusive range of 1 to 3\", ex.getMessage());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ValidateTest.java",
  "methodName" : "shouldThrowIllegalArgumentExceptionWithDefaultMessageWhenValueIsLowerBound",
  "sourceCode" : "@Test\r\nvoid shouldThrowIllegalArgumentExceptionWithDefaultMessageWhenValueIsLowerBound() {\r\n    final IllegalArgumentException ex = assertIllegalArgumentException(() -> Validate.exclusiveBetween(LOWER_BOUND, UPPER_BOUND, LOWER_BOUND));\r\n    assertEquals(\"The value 1 is not in the specified exclusive range of 1 to 3\", ex.getMessage());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ValidateTest.java",
  "methodName" : "shouldThrowIllegalArgumentExceptionWithDefaultMessageWhenValueIsUpperBound",
  "sourceCode" : "@Test\r\nvoid shouldThrowIllegalArgumentExceptionWithDefaultMessageWhenValueIsUpperBound() {\r\n    final IllegalArgumentException ex = assertIllegalArgumentException(() -> Validate.exclusiveBetween(LOWER_BOUND, UPPER_BOUND, UPPER_BOUND));\r\n    assertEquals(\"The value 3 is not in the specified exclusive range of 1 to 3\", ex.getMessage());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ValidateTest.java",
  "methodName" : "shouldNotThrowExceptionForFiniteValue",
  "sourceCode" : "@Test\r\nvoid shouldNotThrowExceptionForFiniteValue() {\r\n    Validate.finite(0.0, \"MSG\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ValidateTest.java",
  "methodName" : "shouldThrowIllegalArgumentExceptionWithDefaultMessageForNaN",
  "sourceCode" : "@Test\r\nvoid shouldThrowIllegalArgumentExceptionWithDefaultMessageForNaN() {\r\n    final IllegalArgumentException ex = assertIllegalArgumentException(() -> Validate.finite(Double.NaN, \"MSG\"));\r\n    assertEquals(\"MSG\", ex.getMessage());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ValidateTest.java",
  "methodName" : "shouldThrowIllegalArgumentExceptionWithDefaultMessageForNegativeInfinity",
  "sourceCode" : "@Test\r\nvoid shouldThrowIllegalArgumentExceptionWithDefaultMessageForNegativeInfinity() {\r\n    final IllegalArgumentException ex = assertIllegalArgumentException(() -> Validate.finite(Double.NEGATIVE_INFINITY, \"MSG\"));\r\n    assertEquals(\"MSG\", ex.getMessage());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ValidateTest.java",
  "methodName" : "shouldThrowIllegalArgumentExceptionWithDefaultMessageForPositiveInfinity",
  "sourceCode" : "@Test\r\nvoid shouldThrowIllegalArgumentExceptionWithDefaultMessageForPositiveInfinity() {\r\n    final IllegalArgumentException ex = assertIllegalArgumentException(() -> Validate.finite(Double.POSITIVE_INFINITY, \"MSG\"));\r\n    assertEquals(\"MSG\", ex.getMessage());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ValidateTest.java",
  "methodName" : "shouldNotThrowExceptionForFiniteValue",
  "sourceCode" : "@Test\r\nvoid shouldNotThrowExceptionForFiniteValue() {\r\n    Validate.finite(0.0);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ValidateTest.java",
  "methodName" : "shouldThrowIllegalArgumentExceptionWithDefaultMessageForNaN",
  "sourceCode" : "@Test\r\nvoid shouldThrowIllegalArgumentExceptionWithDefaultMessageForNaN() {\r\n    final IllegalArgumentException ex = assertIllegalArgumentException(() -> Validate.finite(Double.NaN));\r\n    assertEquals(\"The value is invalid: NaN\", ex.getMessage());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ValidateTest.java",
  "methodName" : "shouldThrowIllegalArgumentExceptionWithDefaultMessageForNegativeInfinity",
  "sourceCode" : "@Test\r\nvoid shouldThrowIllegalArgumentExceptionWithDefaultMessageForNegativeInfinity() {\r\n    final IllegalArgumentException ex = assertIllegalArgumentException(() -> Validate.finite(Double.NEGATIVE_INFINITY));\r\n    assertEquals(\"The value is invalid: -Infinity\", ex.getMessage());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ValidateTest.java",
  "methodName" : "shouldThrowIllegalArgumentExceptionWithDefaultMessageForPositiveInfinity",
  "sourceCode" : "@Test\r\nvoid shouldThrowIllegalArgumentExceptionWithDefaultMessageForPositiveInfinity() {\r\n    final IllegalArgumentException ex = assertIllegalArgumentException(() -> Validate.finite(Double.POSITIVE_INFINITY));\r\n    assertEquals(\"The value is invalid: Infinity\", ex.getMessage());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ValidateTest.java",
  "methodName" : "shouldNotThrowExceptionWhenValueIsBetweenBounds",
  "sourceCode" : "@Test\r\nvoid shouldNotThrowExceptionWhenValueIsBetweenBounds() {\r\n    Validate.inclusiveBetween(LOWER_BOUND, UPPER_BOUND, \"2\", \"MSG\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ValidateTest.java",
  "methodName" : "shouldNotThrowExceptionWhenValueIsLowerBound",
  "sourceCode" : "@Test\r\nvoid shouldNotThrowExceptionWhenValueIsLowerBound() {\r\n    Validate.inclusiveBetween(LOWER_BOUND, UPPER_BOUND, LOWER_BOUND, \"MSG\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ValidateTest.java",
  "methodName" : "shouldNotThrowExceptionWhenValueIsUpperBound",
  "sourceCode" : "@Test\r\nvoid shouldNotThrowExceptionWhenValueIsUpperBound() {\r\n    Validate.inclusiveBetween(LOWER_BOUND, UPPER_BOUND, UPPER_BOUND, \"MSG\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ValidateTest.java",
  "methodName" : "shouldThrowIllegalArgumentExceptionWithGivenMessageWhenValueIsAboveUpperBound",
  "sourceCode" : "@Test\r\nvoid shouldThrowIllegalArgumentExceptionWithGivenMessageWhenValueIsAboveUpperBound() {\r\n    final IllegalArgumentException ex = assertIllegalArgumentException(() -> Validate.inclusiveBetween(LOWER_BOUND, UPPER_BOUND, \"4\", \"MSG\"));\r\n    assertEquals(\"MSG\", ex.getMessage());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ValidateTest.java",
  "methodName" : "shouldThrowIllegalArgumentExceptionWithGivenMessageWhenValueIsBelowLowerBound",
  "sourceCode" : "@Test\r\nvoid shouldThrowIllegalArgumentExceptionWithGivenMessageWhenValueIsBelowLowerBound() {\r\n    final IllegalArgumentException ex = assertIllegalArgumentException(() -> Validate.inclusiveBetween(LOWER_BOUND, UPPER_BOUND, \"0\", \"MSG\"));\r\n    assertEquals(\"MSG\", ex.getMessage());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ValidateTest.java",
  "methodName" : "shouldNotThrowExceptionWhenValueIsBetweenBounds",
  "sourceCode" : "@Test\r\nvoid shouldNotThrowExceptionWhenValueIsBetweenBounds() {\r\n    Validate.inclusiveBetween(LOWER_BOUND, UPPER_BOUND, \"2\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ValidateTest.java",
  "methodName" : "shouldNotThrowExceptionWhenValueIsLowerBound",
  "sourceCode" : "@Test\r\nvoid shouldNotThrowExceptionWhenValueIsLowerBound() {\r\n    Validate.inclusiveBetween(LOWER_BOUND, UPPER_BOUND, LOWER_BOUND);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ValidateTest.java",
  "methodName" : "shouldNotThrowExceptionWhenValueIsUpperBound",
  "sourceCode" : "@Test\r\nvoid shouldNotThrowExceptionWhenValueIsUpperBound() {\r\n    Validate.inclusiveBetween(LOWER_BOUND, UPPER_BOUND, UPPER_BOUND);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ValidateTest.java",
  "methodName" : "shouldThrowIllegalArgumentExceptionWithDefaultMessageWhenValueIsAboveUpperBound",
  "sourceCode" : "@Test\r\nvoid shouldThrowIllegalArgumentExceptionWithDefaultMessageWhenValueIsAboveUpperBound() {\r\n    final IllegalArgumentException ex = assertIllegalArgumentException(() -> Validate.inclusiveBetween(LOWER_BOUND, UPPER_BOUND, \"4\"));\r\n    assertEquals(\"The value 4 is not in the specified inclusive range of 1 to 3\", ex.getMessage());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ValidateTest.java",
  "methodName" : "shouldThrowIllegalArgumentExceptionWithDefaultMessageWhenValueIsBelowLowerBound",
  "sourceCode" : "@Test\r\nvoid shouldThrowIllegalArgumentExceptionWithDefaultMessageWhenValueIsBelowLowerBound() {\r\n    final IllegalArgumentException ex = assertIllegalArgumentException(() -> Validate.inclusiveBetween(LOWER_BOUND, UPPER_BOUND, \"0\"));\r\n    assertEquals(\"The value 0 is not in the specified inclusive range of 1 to 3\", ex.getMessage());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ValidateTest.java",
  "methodName" : "shouldNotThrowExceptionWhenValueIsBetweenBounds",
  "sourceCode" : "@Test\r\nvoid shouldNotThrowExceptionWhenValueIsBetweenBounds() {\r\n    Validate.inclusiveBetween(LOWER_BOUND, UPPER_BOUND, 2.1, \"MSG\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ValidateTest.java",
  "methodName" : "shouldNotThrowExceptionWhenValueIsLowerBound",
  "sourceCode" : "@Test\r\nvoid shouldNotThrowExceptionWhenValueIsLowerBound() {\r\n    Validate.inclusiveBetween(LOWER_BOUND, UPPER_BOUND, LOWER_BOUND, \"MSG\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ValidateTest.java",
  "methodName" : "shouldNotThrowExceptionWhenValueIsUpperBound",
  "sourceCode" : "@Test\r\nvoid shouldNotThrowExceptionWhenValueIsUpperBound() {\r\n    Validate.inclusiveBetween(LOWER_BOUND, UPPER_BOUND, UPPER_BOUND, \"MSG\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ValidateTest.java",
  "methodName" : "shouldThrowIllegalArgumentExceptionWithGivenMessageWhenValueIsAboveUpperBound",
  "sourceCode" : "@Test\r\nvoid shouldThrowIllegalArgumentExceptionWithGivenMessageWhenValueIsAboveUpperBound() {\r\n    final IllegalArgumentException ex = assertIllegalArgumentException(() -> Validate.inclusiveBetween(LOWER_BOUND, UPPER_BOUND, 4.1, \"MSG\"));\r\n    assertEquals(\"MSG\", ex.getMessage());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ValidateTest.java",
  "methodName" : "shouldThrowIllegalArgumentExceptionWithGivenMessageWhenValueIsBelowLowerBound",
  "sourceCode" : "@Test\r\nvoid shouldThrowIllegalArgumentExceptionWithGivenMessageWhenValueIsBelowLowerBound() {\r\n    final IllegalArgumentException ex = assertIllegalArgumentException(() -> Validate.inclusiveBetween(LOWER_BOUND, UPPER_BOUND, 0.01, \"MSG\"));\r\n    assertEquals(\"MSG\", ex.getMessage());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ValidateTest.java",
  "methodName" : "shouldNotThrowExceptionWhenValueIsBetweenBounds",
  "sourceCode" : "@Test\r\nvoid shouldNotThrowExceptionWhenValueIsBetweenBounds() {\r\n    Validate.inclusiveBetween(LOWER_BOUND, UPPER_BOUND, 2.1);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ValidateTest.java",
  "methodName" : "shouldNotThrowExceptionWhenValueIsLowerBound",
  "sourceCode" : "@Test\r\nvoid shouldNotThrowExceptionWhenValueIsLowerBound() {\r\n    Validate.inclusiveBetween(LOWER_BOUND, UPPER_BOUND, LOWER_BOUND);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ValidateTest.java",
  "methodName" : "shouldNotThrowExceptionWhenValueIsUpperBound",
  "sourceCode" : "@Test\r\nvoid shouldNotThrowExceptionWhenValueIsUpperBound() {\r\n    Validate.inclusiveBetween(LOWER_BOUND, UPPER_BOUND, UPPER_BOUND);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ValidateTest.java",
  "methodName" : "shouldThrowIllegalArgumentExceptionWithDefaultMessageWhenValueIsAboveUpperBound",
  "sourceCode" : "@Test\r\nvoid shouldThrowIllegalArgumentExceptionWithDefaultMessageWhenValueIsAboveUpperBound() {\r\n    final IllegalArgumentException ex = assertIllegalArgumentException(() -> Validate.inclusiveBetween(LOWER_BOUND, UPPER_BOUND, 4.1));\r\n    assertEquals(\"The value 4.1 is not in the specified inclusive range of 0.1 to 3.1\", ex.getMessage());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ValidateTest.java",
  "methodName" : "shouldThrowIllegalArgumentExceptionWithDefaultMessageWhenValueIsBelowLowerBound",
  "sourceCode" : "@Test\r\nvoid shouldThrowIllegalArgumentExceptionWithDefaultMessageWhenValueIsBelowLowerBound() {\r\n    final IllegalArgumentException ex = assertIllegalArgumentException(() -> Validate.inclusiveBetween(LOWER_BOUND, UPPER_BOUND, 0.01));\r\n    assertEquals(\"The value 0.01 is not in the specified inclusive range of 0.1 to 3.1\", ex.getMessage());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ValidateTest.java",
  "methodName" : "shouldNotThrowExceptionWhenValueIsBetweenBounds",
  "sourceCode" : "@Test\r\nvoid shouldNotThrowExceptionWhenValueIsBetweenBounds() {\r\n    Validate.inclusiveBetween(LOWER_BOUND, UPPER_BOUND, 2, \"MSG\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ValidateTest.java",
  "methodName" : "shouldNotThrowExceptionWhenValueIsLowerBound",
  "sourceCode" : "@Test\r\nvoid shouldNotThrowExceptionWhenValueIsLowerBound() {\r\n    Validate.inclusiveBetween(LOWER_BOUND, UPPER_BOUND, LOWER_BOUND, \"MSG\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ValidateTest.java",
  "methodName" : "shouldNotThrowExceptionWhenValueIsUpperBound",
  "sourceCode" : "@Test\r\nvoid shouldNotThrowExceptionWhenValueIsUpperBound() {\r\n    Validate.inclusiveBetween(LOWER_BOUND, UPPER_BOUND, UPPER_BOUND, \"MSG\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ValidateTest.java",
  "methodName" : "shouldThrowIllegalArgumentExceptionWithGivenMessageWhenValueIsAboveUpperBound",
  "sourceCode" : "@Test\r\nvoid shouldThrowIllegalArgumentExceptionWithGivenMessageWhenValueIsAboveUpperBound() {\r\n    final IllegalArgumentException ex = assertIllegalArgumentException(() -> Validate.inclusiveBetween(LOWER_BOUND, UPPER_BOUND, 4, \"MSG\"));\r\n    assertEquals(\"MSG\", ex.getMessage());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ValidateTest.java",
  "methodName" : "shouldThrowIllegalArgumentExceptionWithGivenMessageWhenValueIsBelowLowerBound",
  "sourceCode" : "@Test\r\nvoid shouldThrowIllegalArgumentExceptionWithGivenMessageWhenValueIsBelowLowerBound() {\r\n    final IllegalArgumentException ex = assertIllegalArgumentException(() -> Validate.inclusiveBetween(LOWER_BOUND, UPPER_BOUND, 0, \"MSG\"));\r\n    assertEquals(\"MSG\", ex.getMessage());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ValidateTest.java",
  "methodName" : "shouldNotThrowExceptionWhenValueIsBetweenBounds",
  "sourceCode" : "@Test\r\nvoid shouldNotThrowExceptionWhenValueIsBetweenBounds() {\r\n    Validate.inclusiveBetween(LOWER_BOUND, UPPER_BOUND, 2);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ValidateTest.java",
  "methodName" : "shouldNotThrowExceptionWhenValueIsLowerBound",
  "sourceCode" : "@Test\r\nvoid shouldNotThrowExceptionWhenValueIsLowerBound() {\r\n    Validate.inclusiveBetween(LOWER_BOUND, UPPER_BOUND, LOWER_BOUND);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ValidateTest.java",
  "methodName" : "shouldNotThrowExceptionWhenValueIsUpperBound",
  "sourceCode" : "@Test\r\nvoid shouldNotThrowExceptionWhenValueIsUpperBound() {\r\n    Validate.inclusiveBetween(LOWER_BOUND, UPPER_BOUND, UPPER_BOUND);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ValidateTest.java",
  "methodName" : "shouldThrowIllegalArgumentExceptionWithDefaultMessageWhenValueIsAboveUpperBound",
  "sourceCode" : "@Test\r\nvoid shouldThrowIllegalArgumentExceptionWithDefaultMessageWhenValueIsAboveUpperBound() {\r\n    final IllegalArgumentException ex = assertIllegalArgumentException(() -> Validate.inclusiveBetween(LOWER_BOUND, UPPER_BOUND, 4));\r\n    assertEquals(\"The value 4 is not in the specified inclusive range of 1 to 3\", ex.getMessage());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ValidateTest.java",
  "methodName" : "shouldThrowIllegalArgumentExceptionWithDefaultMessageWhenValueIsBelowLowerBound",
  "sourceCode" : "@Test\r\nvoid shouldThrowIllegalArgumentExceptionWithDefaultMessageWhenValueIsBelowLowerBound() {\r\n    final IllegalArgumentException ex = assertIllegalArgumentException(() -> Validate.inclusiveBetween(LOWER_BOUND, UPPER_BOUND, 0));\r\n    assertEquals(\"The value 0 is not in the specified inclusive range of 1 to 3\", ex.getMessage());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ValidateTest.java",
  "methodName" : "shouldNotThrowExceptionWhenClassIsAssignable",
  "sourceCode" : "@Test\r\nvoid shouldNotThrowExceptionWhenClassIsAssignable() {\r\n    Validate.isAssignableFrom(CharSequence.class, String.class, \"MSG\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ValidateTest.java",
  "methodName" : "shouldThrowIllegalArgumentExceptionWithGivenMessageWhenClassIsNotAssignable",
  "sourceCode" : "@Test\r\nvoid shouldThrowIllegalArgumentExceptionWithGivenMessageWhenClassIsNotAssignable() {\r\n    final IllegalArgumentException ex = assertIllegalArgumentException(() -> Validate.isAssignableFrom(List.class, String.class, \"MSG\"));\r\n    assertEquals(\"MSG\", ex.getMessage());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ValidateTest.java",
  "methodName" : "shouldNotThrowExceptionWhenClassIsAssignable",
  "sourceCode" : "@Test\r\nvoid shouldNotThrowExceptionWhenClassIsAssignable() {\r\n    Validate.isAssignableFrom(CharSequence.class, String.class);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ValidateTest.java",
  "methodName" : "shouldThrowIllegalArgumentExceptionWithDefaultMessageWhenClassIsNotAssignable",
  "sourceCode" : "@Test\r\nvoid shouldThrowIllegalArgumentExceptionWithDefaultMessageWhenClassIsNotAssignable() {\r\n    final IllegalArgumentException ex = assertIllegalArgumentException(() -> Validate.isAssignableFrom(List.class, String.class));\r\n    assertEquals(\"Cannot assign a java.lang.String to a java.util.List\", ex.getMessage());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ValidateTest.java",
  "methodName" : "shouldThrowIllegalArgumentExceptionWithNullSuperType",
  "sourceCode" : "@Test\r\nvoid shouldThrowIllegalArgumentExceptionWithNullSuperType() {\r\n    final IllegalArgumentException ex = assertIllegalArgumentException(() -> Validate.isAssignableFrom(null, String.class));\r\n    assertEquals(\"Cannot assign a java.lang.String to a null type\", ex.getMessage());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ValidateTest.java",
  "methodName" : "shouldThrowIllegalArgumentExceptionWithNullType",
  "sourceCode" : "@Test\r\nvoid shouldThrowIllegalArgumentExceptionWithNullType() {\r\n    final IllegalArgumentException ex = assertIllegalArgumentException(() -> Validate.isAssignableFrom(List.class, null));\r\n    assertEquals(\"Cannot assign a null type to a java.util.List\", ex.getMessage());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ValidateTest.java",
  "methodName" : "shouldThrowIllegalArgumentExceptionWithNullTypes",
  "sourceCode" : "@Test\r\nvoid shouldThrowIllegalArgumentExceptionWithNullTypes() {\r\n    final IllegalArgumentException ex = assertIllegalArgumentException(() -> Validate.isAssignableFrom(null, null));\r\n    assertEquals(\"Cannot assign a null type to a null type\", ex.getMessage());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ValidateTest.java",
  "methodName" : "shouldNotThrowExceptionWhenValueIsInstanceOfClass",
  "sourceCode" : "@Test\r\nvoid shouldNotThrowExceptionWhenValueIsInstanceOfClass() {\r\n    Validate.isInstanceOf(String.class, \"hi\", \"MSG\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ValidateTest.java",
  "methodName" : "shouldThrowIllegalArgumentExceptionWithGivenMessageWhenValueIsNotInstanceOfClass",
  "sourceCode" : "@Test\r\nvoid shouldThrowIllegalArgumentExceptionWithGivenMessageWhenValueIsNotInstanceOfClass() {\r\n    final IllegalArgumentException ex = assertIllegalArgumentException(() -> Validate.isInstanceOf(List.class, \"hi\", \"MSG\"));\r\n    assertEquals(\"MSG\", ex.getMessage());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ValidateTest.java",
  "methodName" : "shouldNotThrowExceptionWhenValueIsInstanceOfClass",
  "sourceCode" : "@Test\r\nvoid shouldNotThrowExceptionWhenValueIsInstanceOfClass() {\r\n    Validate.isInstanceOf(String.class, \"hi\", \"Error %s=%s\", \"Name\", \"Value\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ValidateTest.java",
  "methodName" : "shouldThrowIllegalArgumentExceptionWithGivenMessageWhenValueIsNotInstanceOfClass",
  "sourceCode" : "@Test\r\nvoid shouldThrowIllegalArgumentExceptionWithGivenMessageWhenValueIsNotInstanceOfClass() {\r\n    final IllegalArgumentException ex = assertIllegalArgumentException(() -> Validate.isInstanceOf(List.class, \"hi\", \"Error %s=%s\", \"Name\", \"Value\"));\r\n    assertEquals(\"Error Name=Value\", ex.getMessage());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ValidateTest.java",
  "methodName" : "shouldNotThrowExceptionWhenValueIsInstanceOfClass",
  "sourceCode" : "@Test\r\nvoid shouldNotThrowExceptionWhenValueIsInstanceOfClass() {\r\n    Validate.isInstanceOf(String.class, \"hi\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ValidateTest.java",
  "methodName" : "shouldThrowIllegalArgumentExceptionWithDefaultMessageWhenValueIsNotInstanceOfClass",
  "sourceCode" : "@Test\r\nvoid shouldThrowIllegalArgumentExceptionWithDefaultMessageWhenValueIsNotInstanceOfClass() {\r\n    final IllegalArgumentException ex = assertIllegalArgumentException(() -> Validate.isInstanceOf(List.class, \"hi\"));\r\n    assertEquals(\"Expected type: java.util.List, actual: java.lang.String\", ex.getMessage());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ValidateTest.java",
  "methodName" : "shouldNotThrowForTrueExpression",
  "sourceCode" : "@Test\r\nvoid shouldNotThrowForTrueExpression() {\r\n    Validate.isTrue(true, \"MSG\", 7.4d);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ValidateTest.java",
  "methodName" : "shouldThrowExceptionWithDoubleInsertedIntoTemplateMessageForFalseExpression",
  "sourceCode" : "@Test\r\nvoid shouldThrowExceptionWithDoubleInsertedIntoTemplateMessageForFalseExpression() {\r\n    final IllegalArgumentException ex = assertIllegalArgumentException(() -> Validate.isTrue(false, \"MSG %s\", 7.4d));\r\n    assertEquals(\"MSG 7.4\", ex.getMessage());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ValidateTest.java",
  "methodName" : "shouldNotThrowForTrueExpression",
  "sourceCode" : "@Test\r\nvoid shouldNotThrowForTrueExpression() {\r\n    Validate.isTrue(true, \"MSG\", 6);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ValidateTest.java",
  "methodName" : "shouldThrowExceptionWithLongInsertedIntoTemplateMessageForFalseExpression",
  "sourceCode" : "@Test\r\nvoid shouldThrowExceptionWithLongInsertedIntoTemplateMessageForFalseExpression() {\r\n    final IllegalArgumentException ex = assertIllegalArgumentException(() -> Validate.isTrue(false, \"MSG %s\", 6));\r\n    assertEquals(\"MSG 6\", ex.getMessage());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ValidateTest.java",
  "methodName" : "shouldNotThrowForTrueExpression",
  "sourceCode" : "@Test\r\nvoid shouldNotThrowForTrueExpression() {\r\n    Validate.isTrue(true, \"MSG\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ValidateTest.java",
  "methodName" : "shouldThrowExceptionWithGivenMessageContainingSpecialCharacterForFalseExpression",
  "sourceCode" : "@Test\r\nvoid shouldThrowExceptionWithGivenMessageContainingSpecialCharacterForFalseExpression() {\r\n    final IllegalArgumentException ex = assertIllegalArgumentException(() -> Validate.isTrue(false, \"%\"));\r\n    assertEquals(\"%\", ex.getMessage());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ValidateTest.java",
  "methodName" : "shouldThrowExceptionWithGivenMessageForFalseExpression",
  "sourceCode" : "@Test\r\nvoid shouldThrowExceptionWithGivenMessageForFalseExpression() {\r\n    final IllegalArgumentException ex = assertIllegalArgumentException(() -> Validate.isTrue(false, \"MSG\"));\r\n    assertEquals(\"MSG\", ex.getMessage());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ValidateTest.java",
  "methodName" : "shouldNotThrowForTrueExpression",
  "sourceCode" : "@Test\r\nvoid shouldNotThrowForTrueExpression() {\r\n    Validate.isTrue(true, () -> \"MSG\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ValidateTest.java",
  "methodName" : "shouldThrowExceptionWithDoubleInsertedIntoTemplateMessageForFalseExpression",
  "sourceCode" : "@Test\r\nvoid shouldThrowExceptionWithDoubleInsertedIntoTemplateMessageForFalseExpression() {\r\n    final IllegalArgumentException ex = assertIllegalArgumentException(() -> Validate.isTrue(false, () -> String.format(\"MSG %s %s\", \"Object 1\", \"Object 2\")));\r\n    assertEquals(\"MSG Object 1 Object 2\", ex.getMessage());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ValidateTest.java",
  "methodName" : "shouldNotThrowForTrueExpression",
  "sourceCode" : "@Test\r\nvoid shouldNotThrowForTrueExpression() {\r\n    Validate.isTrue(true, \"MSG\", \"Object 1\", \"Object 2\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ValidateTest.java",
  "methodName" : "shouldThrowExceptionWithDoubleInsertedIntoTemplateMessageForFalseExpression",
  "sourceCode" : "@Test\r\nvoid shouldThrowExceptionWithDoubleInsertedIntoTemplateMessageForFalseExpression() {\r\n    final IllegalArgumentException ex = assertIllegalArgumentException(() -> Validate.isTrue(false, \"MSG %s %s\", \"Object 1\", \"Object 2\"));\r\n    assertEquals(\"MSG Object 1 Object 2\", ex.getMessage());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ValidateTest.java",
  "methodName" : "shouldNotThrowForTrueExpression",
  "sourceCode" : "@Test\r\nvoid shouldNotThrowForTrueExpression() {\r\n    Validate.isTrue(true);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ValidateTest.java",
  "methodName" : "shouldThrowExceptionWithDefaultMessageForFalseExpression",
  "sourceCode" : "@Test\r\nvoid shouldThrowExceptionWithDefaultMessageForFalseExpression() {\r\n    final IllegalArgumentException ex = assertIllegalArgumentException(() -> Validate.isTrue(false));\r\n    assertEquals(\"The validated expression is false\", ex.getMessage());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ValidateTest.java",
  "methodName" : "shouldNotThrowExceptionWhenStringMatchesPattern",
  "sourceCode" : "@Test\r\nvoid shouldNotThrowExceptionWhenStringMatchesPattern() {\r\n    Validate.matchesPattern(\"hi\", \"[a-z]*\", \"MSG\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ValidateTest.java",
  "methodName" : "shouldThrowIllegalArgumentExceptionWhenStringDoesNotMatchPattern",
  "sourceCode" : "@Test\r\nvoid shouldThrowIllegalArgumentExceptionWhenStringDoesNotMatchPattern() {\r\n    final IllegalArgumentException ex = assertIllegalArgumentException(() -> Validate.matchesPattern(\"hi\", \"[0-9]*\", \"MSG\"));\r\n    assertEquals(\"MSG\", ex.getMessage());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ValidateTest.java",
  "methodName" : "shouldNotThrowExceptionWhenStringMatchesPattern",
  "sourceCode" : "@Test\r\nvoid shouldNotThrowExceptionWhenStringMatchesPattern() {\r\n    Validate.matchesPattern(\"hi\", \"[a-z]*\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ValidateTest.java",
  "methodName" : "shouldThrowIllegalArgumentExceptionWithDefaultMessageWhenStringDoesNotMatchPattern",
  "sourceCode" : "@Test\r\nvoid shouldThrowIllegalArgumentExceptionWithDefaultMessageWhenStringDoesNotMatchPattern() {\r\n    final IllegalArgumentException ex = assertIllegalArgumentException(() -> Validate.matchesPattern(\"hi\", \"[0-9]*\"));\r\n    assertEquals(\"The string hi does not match the pattern [0-9]*\", ex.getMessage());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ValidateTest.java",
  "methodName" : "shouldNotThrowExceptionForNonEmptyArray",
  "sourceCode" : "@Test\r\nvoid shouldNotThrowExceptionForNonEmptyArray() {\r\n    Validate.noNullElements(new String[] { \"a\", \"b\" }, \"MSG\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ValidateTest.java",
  "methodName" : "shouldReturnSameInstance",
  "sourceCode" : "@Test\r\nvoid shouldReturnSameInstance() {\r\n    final String[] array = { \"a\", \"b\" };\r\n    assertSame(array, Validate.noNullElements(array, \"MSG\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ValidateTest.java",
  "methodName" : "shouldThrowIllegalArgumentExceptionWithGivenMessageForArrayWithNullElement",
  "sourceCode" : "@Test\r\nvoid shouldThrowIllegalArgumentExceptionWithGivenMessageForArrayWithNullElement() {\r\n    final IllegalArgumentException ex = assertIllegalArgumentException(() -> Validate.noNullElements(new String[] { \"a\", null }, \"MSG\"));\r\n    assertEquals(\"MSG\", ex.getMessage());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ValidateTest.java",
  "methodName" : "shouldThrowNullPointerExceptionWithDefaultMessageForNullArray",
  "sourceCode" : "@Test\r\nvoid shouldThrowNullPointerExceptionWithDefaultMessageForNullArray() {\r\n    final NullPointerException ex = assertNullPointerException(() -> Validate.noNullElements((Object[]) null, \"MSG\"));\r\n    assertEquals(\"array\", ex.getMessage());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ValidateTest.java",
  "methodName" : "shouldNotThrowExceptionForNonEmptyArray",
  "sourceCode" : "@Test\r\nvoid shouldNotThrowExceptionForNonEmptyArray() {\r\n    Validate.noNullElements(new String[] { \"a\", \"b\" });\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ValidateTest.java",
  "methodName" : "shouldReturnSameInstance",
  "sourceCode" : "@Test\r\nvoid shouldReturnSameInstance() {\r\n    final String[] expected = { \"a\", \"b\" };\r\n    assertSame(expected, Validate.noNullElements(expected));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ValidateTest.java",
  "methodName" : "shouldThrowIllegalArgumentExceptionWithDefaultMessageForArrayWithNullElement",
  "sourceCode" : "@Test\r\nvoid shouldThrowIllegalArgumentExceptionWithDefaultMessageForArrayWithNullElement() {\r\n    final IllegalArgumentException ex = assertIllegalArgumentException(() -> Validate.noNullElements(new String[] { \"a\", null }));\r\n    assertEquals(\"The validated array contains null element at index: 1\", ex.getMessage());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ValidateTest.java",
  "methodName" : "shouldThrowNullPointerExceptionWithDefaultMessageForNullArray",
  "sourceCode" : "@Test\r\nvoid shouldThrowNullPointerExceptionWithDefaultMessageForNullArray() {\r\n    final NullPointerException ex = assertNullPointerException(() -> Validate.noNullElements((Object[]) null));\r\n    assertEquals(\"array\", ex.getMessage());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ValidateTest.java",
  "methodName" : "shouldNotThrowExceptionForNonEmptyCollection",
  "sourceCode" : "@Test\r\nvoid shouldNotThrowExceptionForNonEmptyCollection() {\r\n    Validate.noNullElements(Collections.singleton(\"a\"), \"MSG\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ValidateTest.java",
  "methodName" : "shouldReturnSameInstance",
  "sourceCode" : "@Test\r\nvoid shouldReturnSameInstance() {\r\n    final Set<String> col = Collections.singleton(\"a\");\r\n    assertSame(col, Validate.noNullElements(col, \"MSG\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ValidateTest.java",
  "methodName" : "shouldThrowIllegalArgumentExceptionWithGivenMessageForCollectionWithNullElement",
  "sourceCode" : "@Test\r\nvoid shouldThrowIllegalArgumentExceptionWithGivenMessageForCollectionWithNullElement() {\r\n    final IllegalArgumentException ex = assertIllegalArgumentException(() -> Validate.noNullElements(Collections.singleton(null), \"MSG\"));\r\n    assertEquals(\"MSG\", ex.getMessage());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ValidateTest.java",
  "methodName" : "shouldThrowNullPointerExceptionWithDefaultMessageForNullCollection",
  "sourceCode" : "@Test\r\nvoid shouldThrowNullPointerExceptionWithDefaultMessageForNullCollection() {\r\n    final NullPointerException ex = assertNullPointerException(() -> Validate.noNullElements((Collection<?>) null, \"MSG\"));\r\n    assertEquals(\"iterable\", ex.getMessage());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ValidateTest.java",
  "methodName" : "shouldNotThrowExceptionForNonEmptyCollection",
  "sourceCode" : "@Test\r\nvoid shouldNotThrowExceptionForNonEmptyCollection() {\r\n    Validate.noNullElements(Collections.singleton(\"a\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ValidateTest.java",
  "methodName" : "shouldReturnSameInstance",
  "sourceCode" : "@Test\r\nvoid shouldReturnSameInstance() {\r\n    final Set<String> col = Collections.singleton(\"a\");\r\n    assertSame(col, Validate.noNullElements(col));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ValidateTest.java",
  "methodName" : "shouldThrowIllegalArgumentExceptionWithDefaultMessageForCollectionWithNullElement",
  "sourceCode" : "@Test\r\nvoid shouldThrowIllegalArgumentExceptionWithDefaultMessageForCollectionWithNullElement() {\r\n    final IllegalArgumentException ex = assertIllegalArgumentException(() -> Validate.noNullElements(Collections.singleton(null)));\r\n    assertEquals(\"The validated collection contains null element at index: 0\", ex.getMessage());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ValidateTest.java",
  "methodName" : "shouldThrowNullPointerExceptionWithDefaultMessageForNullCollection",
  "sourceCode" : "@Test\r\nvoid shouldThrowNullPointerExceptionWithDefaultMessageForNullCollection() {\r\n    final NullPointerException ex = assertNullPointerException(() -> Validate.noNullElements((Collection<?>) null));\r\n    assertEquals(\"iterable\", ex.getMessage());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ValidateTest.java",
  "methodName" : "shouldNotThrowExceptionForNonEmptyString",
  "sourceCode" : "@Test\r\nvoid shouldNotThrowExceptionForNonEmptyString() {\r\n    Validate.notBlank(\"abc\", \"MSG\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ValidateTest.java",
  "methodName" : "shouldNotThrowExceptionForNonEmptyStringContainingSpaces",
  "sourceCode" : "@Test\r\nvoid shouldNotThrowExceptionForNonEmptyStringContainingSpaces() {\r\n    Validate.notBlank(\"  abc   \", \"MSG\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ValidateTest.java",
  "methodName" : "shouldNotThrowExceptionForNonEmptyStringContainingWhitespaceChars",
  "sourceCode" : "@Test\r\nvoid shouldNotThrowExceptionForNonEmptyStringContainingWhitespaceChars() {\r\n    Validate.notBlank(\" \\n \\t abc \\r \\n \", \"MSG\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ValidateTest.java",
  "methodName" : "shouldReturnNonBlankValue",
  "sourceCode" : "@Test\r\nvoid shouldReturnNonBlankValue() {\r\n    assertSame(\"abc\", Validate.notBlank(\"abc\", \"MSG\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ValidateTest.java",
  "methodName" : "shouldThrowIllegalArgumentExceptionWithGivenMessageForBlankString",
  "sourceCode" : "@Test\r\nvoid shouldThrowIllegalArgumentExceptionWithGivenMessageForBlankString() {\r\n    final IllegalArgumentException ex = assertIllegalArgumentException(() -> Validate.notBlank(\"   \", \"MSG\"));\r\n    assertEquals(\"MSG\", ex.getMessage());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ValidateTest.java",
  "methodName" : "shouldThrowIllegalArgumentExceptionWithGivenMessageForEmptyString",
  "sourceCode" : "@Test\r\nvoid shouldThrowIllegalArgumentExceptionWithGivenMessageForEmptyString() {\r\n    final IllegalArgumentException ex = assertIllegalArgumentException(() -> Validate.notBlank(\"\", \"MSG\"));\r\n    assertEquals(\"MSG\", ex.getMessage());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ValidateTest.java",
  "methodName" : "shouldThrowIllegalArgumentExceptionWithGivenMessageForStringContainingOnlyWhitespaceChars",
  "sourceCode" : "@Test\r\nvoid shouldThrowIllegalArgumentExceptionWithGivenMessageForStringContainingOnlyWhitespaceChars() {\r\n    final IllegalArgumentException ex = assertIllegalArgumentException(() -> Validate.notBlank(\" \\n \\t \\r \\n \", \"MSG\"));\r\n    assertEquals(\"MSG\", ex.getMessage());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ValidateTest.java",
  "methodName" : "shouldThrowNullPointerExceptionWithGivenMessageForNullString",
  "sourceCode" : "@Test\r\nvoid shouldThrowNullPointerExceptionWithGivenMessageForNullString() {\r\n    final NullPointerException ex = assertNullPointerException(() -> Validate.notBlank(null, \"MSG\"));\r\n    assertEquals(\"MSG\", ex.getMessage());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ValidateTest.java",
  "methodName" : "shouldNotThrowExceptionForNonEmptyString",
  "sourceCode" : "@Test\r\nvoid shouldNotThrowExceptionForNonEmptyString() {\r\n    Validate.notBlank(\"abc\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ValidateTest.java",
  "methodName" : "shouldNotThrowExceptionForNonEmptyStringContainingSpaces",
  "sourceCode" : "@Test\r\nvoid shouldNotThrowExceptionForNonEmptyStringContainingSpaces() {\r\n    Validate.notBlank(\"  abc   \");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ValidateTest.java",
  "methodName" : "shouldNotThrowExceptionForNonEmptyStringContainingWhitespaceChars",
  "sourceCode" : "@Test\r\nvoid shouldNotThrowExceptionForNonEmptyStringContainingWhitespaceChars() {\r\n    Validate.notBlank(\" \\n \\t abc \\r \\n \");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ValidateTest.java",
  "methodName" : "shouldReturnNonBlankValue",
  "sourceCode" : "@Test\r\nvoid shouldReturnNonBlankValue() {\r\n    assertSame(\"abc\", Validate.notBlank(\"abc\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ValidateTest.java",
  "methodName" : "shouldThrowIllegalArgumentExceptionWithDefaultMessageForBlankString",
  "sourceCode" : "@Test\r\nvoid shouldThrowIllegalArgumentExceptionWithDefaultMessageForBlankString() {\r\n    final IllegalArgumentException ex = assertIllegalArgumentException(() -> Validate.notBlank(\"   \"));\r\n    assertEquals(\"The validated character sequence is blank\", ex.getMessage());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ValidateTest.java",
  "methodName" : "shouldThrowIllegalArgumentExceptionWithDefaultMessageForEmptyString",
  "sourceCode" : "@Test\r\nvoid shouldThrowIllegalArgumentExceptionWithDefaultMessageForEmptyString() {\r\n    final IllegalArgumentException ex = assertIllegalArgumentException(() -> Validate.notBlank(\"\"));\r\n    assertEquals(\"The validated character sequence is blank\", ex.getMessage());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ValidateTest.java",
  "methodName" : "shouldThrowIllegalArgumentExceptionWithDefaultMessageForStringContainingOnlyWhitespaceChars",
  "sourceCode" : "@Test\r\nvoid shouldThrowIllegalArgumentExceptionWithDefaultMessageForStringContainingOnlyWhitespaceChars() {\r\n    final IllegalArgumentException ex = assertIllegalArgumentException(() -> Validate.notBlank(\" \\n \\t \\r \\n \"));\r\n    assertEquals(\"The validated character sequence is blank\", ex.getMessage());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ValidateTest.java",
  "methodName" : "shouldThrowNullPointerExceptionWithDefaultMessageForNullString",
  "sourceCode" : "@Test\r\nvoid shouldThrowNullPointerExceptionWithDefaultMessageForNullString() {\r\n    final NullPointerException ex = assertNullPointerException(() -> Validate.notBlank(null));\r\n    assertEquals(\"The validated character sequence is blank\", ex.getMessage());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ValidateTest.java",
  "methodName" : "shouldNotThrowExceptionForArrayContainingNullReference",
  "sourceCode" : "@Test\r\nvoid shouldNotThrowExceptionForArrayContainingNullReference() {\r\n    Validate.notEmpty(new Object[] { null }, \"MSG\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ValidateTest.java",
  "methodName" : "shouldReturnTheSameInstance",
  "sourceCode" : "@Test\r\nvoid shouldReturnTheSameInstance() {\r\n    final String[] expected = { \"hi\" };\r\n    assertSame(expected, Validate.notEmpty(expected, \"MSG\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ValidateTest.java",
  "methodName" : "shouldThrowIllegalArgumentExceptionWithDefaultMessageForEmptyArray",
  "sourceCode" : "@Test\r\nvoid shouldThrowIllegalArgumentExceptionWithDefaultMessageForEmptyArray() {\r\n    final IllegalArgumentException ex = assertIllegalArgumentException(() -> Validate.notEmpty(new Object[0], \"MSG\"));\r\n    assertEquals(\"MSG\", ex.getMessage());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ValidateTest.java",
  "methodName" : "shouldThrowNullPointerExceptionWithGivenMessageForNullArray",
  "sourceCode" : "@Test\r\nvoid shouldThrowNullPointerExceptionWithGivenMessageForNullArray() {\r\n    final NullPointerException ex = assertNullPointerException(() -> Validate.notEmpty((Object[]) null, \"MSG\"));\r\n    assertEquals(\"MSG\", ex.getMessage());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ValidateTest.java",
  "methodName" : "shouldNotThrowExceptionForArrayContainingNullReference",
  "sourceCode" : "@Test\r\nvoid shouldNotThrowExceptionForArrayContainingNullReference() {\r\n    Validate.notEmpty(new Object[] { null });\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ValidateTest.java",
  "methodName" : "shouldReturnTheSameInstance",
  "sourceCode" : "@Test\r\nvoid shouldReturnTheSameInstance() {\r\n    final String[] expected = { \"hi\" };\r\n    assertSame(expected, Validate.notEmpty(expected));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ValidateTest.java",
  "methodName" : "shouldThrowIllegalArgumentExceptionWithDefaultMessageForEmptyArray",
  "sourceCode" : "@Test\r\nvoid shouldThrowIllegalArgumentExceptionWithDefaultMessageForEmptyArray() {\r\n    final IllegalArgumentException ex = assertIllegalArgumentException(() -> Validate.notEmpty(new Object[0]));\r\n    assertEquals(\"The validated array is empty\", ex.getMessage());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ValidateTest.java",
  "methodName" : "shouldThrowNullPointerExceptionWithDefaultMessageForNullArray",
  "sourceCode" : "@Test\r\nvoid shouldThrowNullPointerExceptionWithDefaultMessageForNullArray() {\r\n    final NullPointerException ex = assertNullPointerException(() -> Validate.notEmpty((Object[]) null));\r\n    assertEquals(\"The validated array is empty\", ex.getMessage());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ValidateTest.java",
  "methodName" : "shouldNotThrowExceptionForNonEmptyString",
  "sourceCode" : "@Test\r\nvoid shouldNotThrowExceptionForNonEmptyString() {\r\n    Validate.notEmpty(\"Hi\", \"MSG\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ValidateTest.java",
  "methodName" : "shouldReturnTheSameInstance",
  "sourceCode" : "@Test\r\nvoid shouldReturnTheSameInstance() {\r\n    assertSame(\"Hi\", Validate.notEmpty(\"Hi\", \"MSG\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ValidateTest.java",
  "methodName" : "shouldThrowIllegalArgumentExceptionWithGivenMessageForEmptyString",
  "sourceCode" : "@Test\r\nvoid shouldThrowIllegalArgumentExceptionWithGivenMessageForEmptyString() {\r\n    final IllegalArgumentException ex = assertIllegalArgumentException(() -> Validate.notEmpty(\"\", \"MSG\"));\r\n    assertEquals(\"MSG\", ex.getMessage());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ValidateTest.java",
  "methodName" : "shouldThrowNullPointerExceptionWithGivenMessageForNullCharSequence",
  "sourceCode" : "@Test\r\nvoid shouldThrowNullPointerExceptionWithGivenMessageForNullCharSequence() {\r\n    final NullPointerException ex = assertNullPointerException(() -> Validate.notEmpty((CharSequence) null, \"MSG\"));\r\n    assertEquals(\"MSG\", ex.getMessage());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ValidateTest.java",
  "methodName" : "shouldNotThrowExceptionForNonEmptyString",
  "sourceCode" : "@Test\r\nvoid shouldNotThrowExceptionForNonEmptyString() {\r\n    Validate.notEmpty(\"Hi\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ValidateTest.java",
  "methodName" : "shouldReturnTheSameInstance",
  "sourceCode" : "@Test\r\nvoid shouldReturnTheSameInstance() {\r\n    assertSame(\"Hi\", Validate.notEmpty(\"Hi\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ValidateTest.java",
  "methodName" : "shouldThrowIllegalArgumentExceptionWithDefaultMessageForEmptyString",
  "sourceCode" : "@Test\r\nvoid shouldThrowIllegalArgumentExceptionWithDefaultMessageForEmptyString() {\r\n    final IllegalArgumentException ex = assertIllegalArgumentException(() -> Validate.notEmpty(\"\"));\r\n    assertEquals(\"The validated character sequence is empty\", ex.getMessage());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ValidateTest.java",
  "methodName" : "shouldThrowNullPointerExceptionWithDefaultMessageForNullCharSequence",
  "sourceCode" : "@Test\r\nvoid shouldThrowNullPointerExceptionWithDefaultMessageForNullCharSequence() {\r\n    final NullPointerException ex = assertNullPointerException(() -> Validate.notEmpty((CharSequence) null));\r\n    assertEquals(\"The validated character sequence is empty\", ex.getMessage());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ValidateTest.java",
  "methodName" : "shouldNotThrowExceptionForCollectionContainingNullReference",
  "sourceCode" : "@Test\r\nvoid shouldNotThrowExceptionForCollectionContainingNullReference() {\r\n    Validate.notEmpty(Collections.singleton(null), \"MSG\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ValidateTest.java",
  "methodName" : "shouldReturnTheSameInstance",
  "sourceCode" : "@Test\r\nvoid shouldReturnTheSameInstance() {\r\n    final Set<String> singleton = Collections.singleton(\"Hi\");\r\n    assertSame(singleton, Validate.notEmpty(singleton, \"MSG\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ValidateTest.java",
  "methodName" : "shouldThrowIllegalArgumentExceptionWithGivenMessageForEmptyCollection",
  "sourceCode" : "@Test\r\nvoid shouldThrowIllegalArgumentExceptionWithGivenMessageForEmptyCollection() {\r\n    final IllegalArgumentException ex = assertIllegalArgumentException(() -> Validate.notEmpty(Collections.emptySet(), \"MSG\"));\r\n    assertEquals(\"MSG\", ex.getMessage());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ValidateTest.java",
  "methodName" : "shouldThrowNullPointerExceptionWithGivenMessageForNullCollection",
  "sourceCode" : "@Test\r\nvoid shouldThrowNullPointerExceptionWithGivenMessageForNullCollection() {\r\n    final NullPointerException ex = assertNullPointerException(() -> Validate.notEmpty((Collection<?>) null, \"MSG\"));\r\n    assertEquals(\"MSG\", ex.getMessage());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ValidateTest.java",
  "methodName" : "shouldNotThrowExceptionForCollectionContainingNullReference",
  "sourceCode" : "@Test\r\nvoid shouldNotThrowExceptionForCollectionContainingNullReference() {\r\n    Validate.notEmpty(Collections.singleton(null));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ValidateTest.java",
  "methodName" : "shouldReturnTheSameInstance",
  "sourceCode" : "@Test\r\nvoid shouldReturnTheSameInstance() {\r\n    final Set<String> singleton = Collections.singleton(\"Hi\");\r\n    assertSame(singleton, Validate.notEmpty(singleton));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ValidateTest.java",
  "methodName" : "shouldThrowIllegalArgumentExceptionWithDefaultMessageForEmptyCollection",
  "sourceCode" : "@Test\r\nvoid shouldThrowIllegalArgumentExceptionWithDefaultMessageForEmptyCollection() {\r\n    final IllegalArgumentException ex = assertIllegalArgumentException(() -> Validate.notEmpty(Collections.emptySet()));\r\n    assertEquals(\"The validated collection is empty\", ex.getMessage());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ValidateTest.java",
  "methodName" : "shouldThrowNullPointerExceptionWithDefaultMessageForNullCollection",
  "sourceCode" : "@Test\r\nvoid shouldThrowNullPointerExceptionWithDefaultMessageForNullCollection() {\r\n    final NullPointerException ex = assertNullPointerException(() -> Validate.notEmpty((Collection<?>) null));\r\n    assertEquals(\"The validated collection is empty\", ex.getMessage());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ValidateTest.java",
  "methodName" : "shouldNotThrowExceptionForMapContainingNullMapping",
  "sourceCode" : "@Test\r\nvoid shouldNotThrowExceptionForMapContainingNullMapping() {\r\n    Validate.notEmpty(Collections.singletonMap(\"key\", null), \"MSG\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ValidateTest.java",
  "methodName" : "shouldReturnTheSameInstance",
  "sourceCode" : "@Test\r\nvoid shouldReturnTheSameInstance() {\r\n    final Map<String, String> singletonMap = Collections.singletonMap(\"key\", \"value\");\r\n    assertSame(singletonMap, Validate.notEmpty(singletonMap, \"MSG\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ValidateTest.java",
  "methodName" : "shouldThrowIllegalArgumentExceptionWithGivenMessageForEmptyMap",
  "sourceCode" : "@Test\r\nvoid shouldThrowIllegalArgumentExceptionWithGivenMessageForEmptyMap() {\r\n    final IllegalArgumentException ex = assertIllegalArgumentException(() -> Validate.notEmpty(Collections.emptyMap(), \"MSG\"));\r\n    assertEquals(\"MSG\", ex.getMessage());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ValidateTest.java",
  "methodName" : "shouldThrowNullPointerExceptionWithGivenMessageForNullMap",
  "sourceCode" : "@Test\r\nvoid shouldThrowNullPointerExceptionWithGivenMessageForNullMap() {\r\n    final NullPointerException ex = assertNullPointerException(() -> Validate.notEmpty((Map<?, ?>) null, \"MSG\"));\r\n    assertEquals(\"MSG\", ex.getMessage());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ValidateTest.java",
  "methodName" : "shouldNotThrowExceptionForMapContainingNullMapping",
  "sourceCode" : "@Test\r\nvoid shouldNotThrowExceptionForMapContainingNullMapping() {\r\n    Validate.notEmpty(Collections.singletonMap(\"key\", null));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ValidateTest.java",
  "methodName" : "shouldReturnTheSameInstance",
  "sourceCode" : "@Test\r\nvoid shouldReturnTheSameInstance() {\r\n    final Map<String, String> singletonMap = Collections.singletonMap(\"key\", \"value\");\r\n    assertSame(singletonMap, Validate.notEmpty(singletonMap));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ValidateTest.java",
  "methodName" : "shouldThrowIllegalArgumentExceptionWithDefaultMessageForEmptyMap",
  "sourceCode" : "@Test\r\nvoid shouldThrowIllegalArgumentExceptionWithDefaultMessageForEmptyMap() {\r\n    final IllegalArgumentException ex = assertIllegalArgumentException(() -> Validate.notEmpty(Collections.emptyMap()));\r\n    assertEquals(\"The validated map is empty\", ex.getMessage());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ValidateTest.java",
  "methodName" : "shouldThrowNullPointerExceptionWithDefaultMessageForNullMap",
  "sourceCode" : "@Test\r\nvoid shouldThrowNullPointerExceptionWithDefaultMessageForNullMap() {\r\n    final NullPointerException ex = assertNullPointerException(() -> Validate.notEmpty((Map<?, ?>) null));\r\n    assertEquals(\"The validated map is empty\", ex.getMessage());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ValidateTest.java",
  "methodName" : "shouldNotThrowExceptionForNegativeInfinity",
  "sourceCode" : "@Test\r\nvoid shouldNotThrowExceptionForNegativeInfinity() {\r\n    Validate.notNaN(Double.NEGATIVE_INFINITY, \"MSG\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ValidateTest.java",
  "methodName" : "shouldNotThrowExceptionForNumber",
  "sourceCode" : "@Test\r\nvoid shouldNotThrowExceptionForNumber() {\r\n    Validate.notNaN(0.0, \"MSG\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ValidateTest.java",
  "methodName" : "shouldNotThrowExceptionForPositiveInfinity",
  "sourceCode" : "@Test\r\nvoid shouldNotThrowExceptionForPositiveInfinity() {\r\n    Validate.notNaN(Double.POSITIVE_INFINITY, \"MSG\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ValidateTest.java",
  "methodName" : "shouldThrowIllegalArgumentExceptionWithGivenMessageForNaN",
  "sourceCode" : "@Test\r\nvoid shouldThrowIllegalArgumentExceptionWithGivenMessageForNaN() {\r\n    final IllegalArgumentException ex = assertIllegalArgumentException(() -> Validate.notNaN(Double.NaN, \"MSG\"));\r\n    assertEquals(\"MSG\", ex.getMessage());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ValidateTest.java",
  "methodName" : "shouldNotThrowExceptionForNegativeInfinity",
  "sourceCode" : "@Test\r\nvoid shouldNotThrowExceptionForNegativeInfinity() {\r\n    Validate.notNaN(Double.NEGATIVE_INFINITY);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ValidateTest.java",
  "methodName" : "shouldNotThrowExceptionForNumber",
  "sourceCode" : "@Test\r\nvoid shouldNotThrowExceptionForNumber() {\r\n    Validate.notNaN(0.0);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ValidateTest.java",
  "methodName" : "shouldNotThrowExceptionForPositiveInfinity",
  "sourceCode" : "@Test\r\nvoid shouldNotThrowExceptionForPositiveInfinity() {\r\n    Validate.notNaN(Double.POSITIVE_INFINITY);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ValidateTest.java",
  "methodName" : "shouldThrowIllegalArgumentExceptionWithDefaultMessageForNaN",
  "sourceCode" : "@Test\r\nvoid shouldThrowIllegalArgumentExceptionWithDefaultMessageForNaN() {\r\n    final IllegalArgumentException ex = assertIllegalArgumentException(() -> Validate.notNaN(Double.NaN));\r\n    assertEquals(\"The validated value is not a number\", ex.getMessage());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ValidateTest.java",
  "methodName" : "shouldNotThrowForNonNullReference",
  "sourceCode" : "@Test\r\nvoid shouldNotThrowForNonNullReference() {\r\n    Validate.notNull(new Object(), \"MSG\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ValidateTest.java",
  "methodName" : "shouldReturnTheSameInstance",
  "sourceCode" : "@Test\r\nvoid shouldReturnTheSameInstance() {\r\n    assertSame(\"Hi\", Validate.notNull(\"Hi\", \"MSG\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ValidateTest.java",
  "methodName" : "shouldThrowExceptionWithGivenMessageForNullReference",
  "sourceCode" : "@Test\r\nvoid shouldThrowExceptionWithGivenMessageForNullReference() {\r\n    final NullPointerException ex = assertNullPointerException(() -> Validate.notNull(null, \"MSG\"));\r\n    assertEquals(\"MSG\", ex.getMessage());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ValidateTest.java",
  "methodName" : "shouldNotThrowForNonNullReference",
  "sourceCode" : "@Test\r\nvoid shouldNotThrowForNonNullReference() {\r\n    Validate.notNull(new Object());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ValidateTest.java",
  "methodName" : "shouldReturnTheSameInstance",
  "sourceCode" : "@Test\r\nvoid shouldReturnTheSameInstance() {\r\n    assertSame(\"Hi\", Validate.notNull(\"Hi\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ValidateTest.java",
  "methodName" : "shouldThrowExceptionWithDefaultMessageForNullReference",
  "sourceCode" : "@Test\r\nvoid shouldThrowExceptionWithDefaultMessageForNullReference() {\r\n    final NullPointerException ex = assertNullPointerException(() -> Validate.notNull(null));\r\n    assertEquals(\"The validated object is null\", ex.getMessage());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ValidateTest.java",
  "methodName" : "hasOnlyOnePublicConstructor",
  "sourceCode" : "@Test\r\nvoid hasOnlyOnePublicConstructor() {\r\n    final Constructor<?>[] cons = Validate.class.getDeclaredConstructors();\r\n    assertEquals(1, cons.length);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ValidateTest.java",
  "methodName" : "instancesCanBeConstructed",
  "sourceCode" : "@Test\r\nvoid instancesCanBeConstructed() {\r\n    assertNotNull(new Validate());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ValidateTest.java",
  "methodName" : "isNonFinalClass",
  "sourceCode" : "@Test\r\nvoid isNonFinalClass() {\r\n    assertFalse(Modifier.isFinal(Validate.class.getModifiers()));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ValidateTest.java",
  "methodName" : "isPublicClass",
  "sourceCode" : "@Test\r\nvoid isPublicClass() {\r\n    assertTrue(Modifier.isPublic(Validate.class.getModifiers()));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ValidateTest.java",
  "methodName" : "shouldNotThrowExceptionForValidIndex",
  "sourceCode" : "@Test\r\nvoid shouldNotThrowExceptionForValidIndex() {\r\n    Validate.validIndex(new String[] { \"a\" }, 0, \"MSG\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ValidateTest.java",
  "methodName" : "shouldReturnSameInstance",
  "sourceCode" : "@Test\r\nvoid shouldReturnSameInstance() {\r\n    final String[] array = { \"a\" };\r\n    assertSame(array, Validate.validIndex(array, 0, \"MSG\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ValidateTest.java",
  "methodName" : "shouldThrowIndexOutOfBoundsExceptionWithGivenMessageForIndexOutOfBounds",
  "sourceCode" : "@Test\r\nvoid shouldThrowIndexOutOfBoundsExceptionWithGivenMessageForIndexOutOfBounds() {\r\n    final IndexOutOfBoundsException ex = assertIndexOutOfBoundsException(() -> Validate.validIndex(new String[] { \"a\" }, 1, \"MSG\"));\r\n    assertEquals(\"MSG\", ex.getMessage());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ValidateTest.java",
  "methodName" : "shouldThrowIndexOutOfBoundsExceptionWithGivenMessageForNegativeIndex",
  "sourceCode" : "@Test\r\nvoid shouldThrowIndexOutOfBoundsExceptionWithGivenMessageForNegativeIndex() {\r\n    final IndexOutOfBoundsException ex = assertIndexOutOfBoundsException(() -> Validate.validIndex(new String[] { \"a\" }, -1, \"MSG\"));\r\n    assertEquals(\"MSG\", ex.getMessage());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ValidateTest.java",
  "methodName" : "shouldThrowNullPointerExceptionWithDefaultMessageForNullArray",
  "sourceCode" : "@Test\r\nvoid shouldThrowNullPointerExceptionWithDefaultMessageForNullArray() {\r\n    final NullPointerException ex = assertNullPointerException(() -> Validate.validIndex((Object[]) null, 1, \"MSG\"));\r\n    assertEquals(\"array\", ex.getMessage());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ValidateTest.java",
  "methodName" : "shouldNotThrowExceptionForValidIndex",
  "sourceCode" : "@Test\r\nvoid shouldNotThrowExceptionForValidIndex() {\r\n    Validate.validIndex(new String[] { \"a\" }, 0);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ValidateTest.java",
  "methodName" : "shouldReturnSameInstance",
  "sourceCode" : "@Test\r\nvoid shouldReturnSameInstance() {\r\n    final String[] array = { \"a\" };\r\n    assertSame(array, Validate.validIndex(array, 0));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ValidateTest.java",
  "methodName" : "shouldThrowIndexOutOfBoundsExceptionWithDefaultMessageForIndexOutOfBounds",
  "sourceCode" : "@Test\r\nvoid shouldThrowIndexOutOfBoundsExceptionWithDefaultMessageForIndexOutOfBounds() {\r\n    final IndexOutOfBoundsException ex = assertIndexOutOfBoundsException(() -> Validate.validIndex(new String[] { \"a\" }, 1));\r\n    assertEquals(\"The validated array index is invalid: 1\", ex.getMessage());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ValidateTest.java",
  "methodName" : "shouldThrowIndexOutOfBoundsExceptionWithDefaultMessageForNegativeIndex",
  "sourceCode" : "@Test\r\nvoid shouldThrowIndexOutOfBoundsExceptionWithDefaultMessageForNegativeIndex() {\r\n    final IndexOutOfBoundsException ex = assertIndexOutOfBoundsException(() -> Validate.validIndex(new String[] { \"a\" }, -1));\r\n    assertEquals(\"The validated array index is invalid: -1\", ex.getMessage());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ValidateTest.java",
  "methodName" : "shouldThrowNullPointerExceptionWithDefaultForNullArray",
  "sourceCode" : "@Test\r\nvoid shouldThrowNullPointerExceptionWithDefaultForNullArray() {\r\n    final NullPointerException ex = assertNullPointerException(() -> Validate.validIndex((Object[]) null, 1));\r\n    assertEquals(\"array\", ex.getMessage());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ValidateTest.java",
  "methodName" : "shouldNotThrowExceptionForValidIndex",
  "sourceCode" : "@Test\r\nvoid shouldNotThrowExceptionForValidIndex() {\r\n    Validate.validIndex(\"a\", 0, \"MSG\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ValidateTest.java",
  "methodName" : "shouldReturnSameInstance",
  "sourceCode" : "@Test\r\nvoid shouldReturnSameInstance() {\r\n    final String str = \"a\";\r\n    assertSame(str, Validate.validIndex(str, 0, \"MSG\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ValidateTest.java",
  "methodName" : "shouldThrowIndexOutOfBoundsExceptionWithGivenMessageForIndexOutOfBounds",
  "sourceCode" : "@Test\r\nvoid shouldThrowIndexOutOfBoundsExceptionWithGivenMessageForIndexOutOfBounds() {\r\n    final IndexOutOfBoundsException ex = assertIndexOutOfBoundsException(() -> Validate.validIndex(\"a\", 1, \"MSG\"));\r\n    assertEquals(\"MSG\", ex.getMessage());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ValidateTest.java",
  "methodName" : "shouldThrowIndexOutOfBoundsExceptionWithGivenMessageForNegativeIndex",
  "sourceCode" : "@Test\r\nvoid shouldThrowIndexOutOfBoundsExceptionWithGivenMessageForNegativeIndex() {\r\n    final IndexOutOfBoundsException ex = assertIndexOutOfBoundsException(() -> Validate.validIndex(\"a\", -1, \"MSG\"));\r\n    assertEquals(\"MSG\", ex.getMessage());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ValidateTest.java",
  "methodName" : "shouldThrowNullPointerExceptionWithDefaultMessageForNullStr",
  "sourceCode" : "@Test\r\nvoid shouldThrowNullPointerExceptionWithDefaultMessageForNullStr() {\r\n    final NullPointerException ex = assertNullPointerException(() -> Validate.validIndex((String) null, 1, \"MSG\"));\r\n    assertEquals(\"chars\", ex.getMessage());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ValidateTest.java",
  "methodName" : "shouldNotThrowExceptionForValidIndex",
  "sourceCode" : "@Test\r\nvoid shouldNotThrowExceptionForValidIndex() {\r\n    Validate.validIndex(\"a\", 0);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ValidateTest.java",
  "methodName" : "shouldReturnSameInstance",
  "sourceCode" : "@Test\r\nvoid shouldReturnSameInstance() {\r\n    final String str = \"a\";\r\n    assertSame(str, Validate.validIndex(str, 0));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ValidateTest.java",
  "methodName" : "shouldThrowIndexOutOfBoundsExceptionWithDefaultMessageForIndexOutOfBounds",
  "sourceCode" : "@Test\r\nvoid shouldThrowIndexOutOfBoundsExceptionWithDefaultMessageForIndexOutOfBounds() {\r\n    final IndexOutOfBoundsException ex = assertIndexOutOfBoundsException(() -> Validate.validIndex(\"a\", 1));\r\n    assertEquals(\"The validated character sequence index is invalid: 1\", ex.getMessage());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ValidateTest.java",
  "methodName" : "shouldThrowIndexOutOfBoundsExceptionWithDefaultMessageForNegativeIndex",
  "sourceCode" : "@Test\r\nvoid shouldThrowIndexOutOfBoundsExceptionWithDefaultMessageForNegativeIndex() {\r\n    final IndexOutOfBoundsException ex = assertIndexOutOfBoundsException(() -> Validate.validIndex(\"a\", -1));\r\n    assertEquals(\"The validated character sequence index is invalid: -1\", ex.getMessage());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ValidateTest.java",
  "methodName" : "shouldThrowNullPointerExceptionWithDefaultForNullString",
  "sourceCode" : "@Test\r\nvoid shouldThrowNullPointerExceptionWithDefaultForNullString() {\r\n    final NullPointerException ex = assertNullPointerException(() -> Validate.validIndex((String) null, 1));\r\n    assertEquals(\"chars\", ex.getMessage());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ValidateTest.java",
  "methodName" : "shouldNotThrowExceptionForValidIndex",
  "sourceCode" : "@Test\r\nvoid shouldNotThrowExceptionForValidIndex() {\r\n    Validate.validIndex(Collections.singleton(\"a\"), 0, \"MSG\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ValidateTest.java",
  "methodName" : "shouldReturnSameInstance",
  "sourceCode" : "@Test\r\nvoid shouldReturnSameInstance() {\r\n    final Set<String> col = Collections.singleton(\"a\");\r\n    assertSame(col, Validate.validIndex(col, 0, \"MSG\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ValidateTest.java",
  "methodName" : "shouldThrowIndexOutOfBoundsExceptionWithGivenMessageForIndexOutOfBounds",
  "sourceCode" : "@Test\r\nvoid shouldThrowIndexOutOfBoundsExceptionWithGivenMessageForIndexOutOfBounds() {\r\n    final IndexOutOfBoundsException ex = assertIndexOutOfBoundsException(() -> Validate.validIndex(Collections.singleton(\"a\"), 1, \"MSG\"));\r\n    assertEquals(\"MSG\", ex.getMessage());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ValidateTest.java",
  "methodName" : "shouldThrowIndexOutOfBoundsExceptionWithGivenMessageForNegativeIndex",
  "sourceCode" : "@Test\r\nvoid shouldThrowIndexOutOfBoundsExceptionWithGivenMessageForNegativeIndex() {\r\n    final IndexOutOfBoundsException ex = assertIndexOutOfBoundsException(() -> Validate.validIndex(Collections.singleton(\"a\"), -1, \"MSG\"));\r\n    assertEquals(\"MSG\", ex.getMessage());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ValidateTest.java",
  "methodName" : "shouldThrowNullPointerExceptionWithDefaultMessageForNullCollection",
  "sourceCode" : "@Test\r\nvoid shouldThrowNullPointerExceptionWithDefaultMessageForNullCollection() {\r\n    final NullPointerException ex = assertNullPointerException(() -> Validate.validIndex((Collection<?>) null, 1, \"MSG\"));\r\n    assertEquals(\"collection\", ex.getMessage());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ValidateTest.java",
  "methodName" : "shouldNotThrowExceptionForValidIndex",
  "sourceCode" : "@Test\r\nvoid shouldNotThrowExceptionForValidIndex() {\r\n    Validate.validIndex(Collections.singleton(\"a\"), 0);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ValidateTest.java",
  "methodName" : "shouldReturnSameInstance",
  "sourceCode" : "@Test\r\nvoid shouldReturnSameInstance() {\r\n    final Set<String> col = Collections.singleton(\"a\");\r\n    assertSame(col, Validate.validIndex(col, 0));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ValidateTest.java",
  "methodName" : "shouldThrowIndexOutOfBoundsExceptionWithDefaultMessageForIndexOutOfBounds",
  "sourceCode" : "@Test\r\nvoid shouldThrowIndexOutOfBoundsExceptionWithDefaultMessageForIndexOutOfBounds() {\r\n    final IndexOutOfBoundsException ex = assertIndexOutOfBoundsException(() -> Validate.validIndex(Collections.singleton(\"a\"), 1));\r\n    assertEquals(\"The validated collection index is invalid: 1\", ex.getMessage());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ValidateTest.java",
  "methodName" : "shouldThrowIndexOutOfBoundsExceptionWithDefaultMessageForNegativeIndex",
  "sourceCode" : "@Test\r\nvoid shouldThrowIndexOutOfBoundsExceptionWithDefaultMessageForNegativeIndex() {\r\n    final IndexOutOfBoundsException ex = assertIndexOutOfBoundsException(() -> Validate.validIndex(Collections.singleton(\"a\"), -1));\r\n    assertEquals(\"The validated collection index is invalid: -1\", ex.getMessage());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ValidateTest.java",
  "methodName" : "shouldThrowNullPointerExceptionWithDefaultForNullCollection",
  "sourceCode" : "@Test\r\nvoid shouldThrowNullPointerExceptionWithDefaultForNullCollection() {\r\n    final NullPointerException ex = assertNullPointerException(() -> Validate.validIndex((Collection<?>) null, 1));\r\n    assertEquals(\"collection\", ex.getMessage());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ValidateTest.java",
  "methodName" : "shouldNotThrowExceptionForTrueExpression",
  "sourceCode" : "@Test\r\nvoid shouldNotThrowExceptionForTrueExpression() {\r\n    Validate.validState(true);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ValidateTest.java",
  "methodName" : "shouldThrowExceptionForTrueExpression",
  "sourceCode" : "@Test\r\nvoid shouldThrowExceptionForTrueExpression() {\r\n    assertThrows(IllegalStateException.class, () -> Validate.validState(false));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ValidateTest.java",
  "methodName" : "shouldNotThrowExceptionForValidIndex",
  "sourceCode" : "@Test\r\nvoid shouldNotThrowExceptionForValidIndex() {\r\n    Validate.validState(true, \"The Message\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-lang\\src\\test\\java\\org\\apache\\commons\\lang3\\ValidateTest.java",
  "methodName" : "shouldThrowExceptionForTrueExpression",
  "sourceCode" : "@Test\r\nvoid shouldThrowExceptionForTrueExpression() {\r\n    assertThrows(IllegalStateException.class, () -> Validate.validState(false, \"The Message\"));\r\n}",
  "annotations" : [ "Test" ]
} ]