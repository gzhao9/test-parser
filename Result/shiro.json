[ {
  "filePath" : "d:\\chenhao\\test project\\shiro\\core\\src\\test\\java\\org\\apache\\shiro\\aop\\AnnotationResolverTest.java",
  "methodName" : "testAnnotationFoundFromClass",
  "sourceCode" : "@Test\r\nvoid testAnnotationFoundFromClass() throws SecurityException, NoSuchMethodException {\r\n    MyFixture myFixture = new MyFixture();\r\n    MethodInvocation methodInvocation = createMock(MethodInvocation.class);\r\n    Method method = MyFixture.class.getDeclaredMethod(\"operateThis\");\r\n    expect(methodInvocation.getMethod()).andReturn(method);\r\n    expect(methodInvocation.getThis()).andReturn(myFixture);\r\n    replay(methodInvocation);\r\n    assertNotNull(annotationResolver.getAnnotation(methodInvocation, RequiresRoles.class));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\shiro\\core\\src\\test\\java\\org\\apache\\shiro\\aop\\AnnotationResolverTest.java",
  "methodName" : "testAnnotationFoundFromMethod",
  "sourceCode" : "@Test\r\nvoid testAnnotationFoundFromMethod() throws SecurityException, NoSuchMethodException {\r\n    MethodInvocation methodInvocation = createMock(MethodInvocation.class);\r\n    Method method = MyFixture.class.getDeclaredMethod(\"operateThat\");\r\n    expect(methodInvocation.getMethod()).andReturn(method);\r\n    replay(methodInvocation);\r\n    assertNotNull(annotationResolver.getAnnotation(methodInvocation, RequiresUser.class));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\shiro\\core\\src\\test\\java\\org\\apache\\shiro\\aop\\AnnotationResolverTest.java",
  "methodName" : "testNullMethodInvocation",
  "sourceCode" : "@Test\r\nvoid testNullMethodInvocation() throws SecurityException, NoSuchMethodException {\r\n    MethodInvocation methodInvocation = createMock(MethodInvocation.class);\r\n    Method method = MyFixture.class.getDeclaredMethod(\"operateThis\");\r\n    expect(methodInvocation.getMethod()).andReturn(method);\r\n    expect(methodInvocation.getThis()).andReturn(null);\r\n    replay(methodInvocation);\r\n    assertNull(annotationResolver.getAnnotation(methodInvocation, RequiresUser.class));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\shiro\\core\\src\\test\\java\\org\\apache\\shiro\\authc\\AbstractAuthenticatorTest.java",
  "methodName" : "newAbstractAuthenticatorSecurityManagerConstructor",
  "sourceCode" : "@Test\r\nvoid newAbstractAuthenticatorSecurityManagerConstructor() {\r\n    abstractAuthenticator = new AbstractAuthenticator() {\r\n\r\n        protected AuthenticationInfo doAuthenticate(AuthenticationToken token) throws AuthenticationException {\r\n            return info;\r\n        }\r\n    };\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\shiro\\core\\src\\test\\java\\org\\apache\\shiro\\authc\\AbstractAuthenticatorTest.java",
  "methodName" : "authenticateWithNullArgument",
  "sourceCode" : "/**\r\n * Ensures that the authenticate() method proactively fails if a <tt>null</tt> AuthenticationToken is passed as an\r\n * argument.\r\n */\r\n@Test\r\nvoid authenticateWithNullArgument() {\r\n    assertThrows(IllegalArgumentException.class, () -> {\r\n        abstractAuthenticator.authenticate(null);\r\n    });\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\shiro\\core\\src\\test\\java\\org\\apache\\shiro\\authc\\AbstractAuthenticatorTest.java",
  "methodName" : "throwAuthenticationExceptionIfDoAuthenticateReturnsNull",
  "sourceCode" : "/**\r\n * Ensures that the authenticate() method throws an AuthenticationException if the subclass returns <tt>null</tt>\r\n * as the return value to the doAuthenticate() method.\r\n */\r\n@Test\r\nvoid throwAuthenticationExceptionIfDoAuthenticateReturnsNull() {\r\n    assertThrows(AuthenticationException.class, () -> {\r\n        abstractAuthenticator = createAuthcReturnNull();\r\n        abstractAuthenticator.authenticate(newToken());\r\n    });\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\shiro\\core\\src\\test\\java\\org\\apache\\shiro\\authc\\AbstractAuthenticatorTest.java",
  "methodName" : "nonNullAuthenticationInfoAfterAuthenticate",
  "sourceCode" : "/**\r\n * Ensures a non-null <tt>Subject</tt> instance is returned from the authenticate() method after a valid\r\n * authentication attempt (i.e. the subclass's doAuthenticate implementation returns a valid, non-null\r\n * AuthenticationInfo object).\r\n */\r\n@Test\r\nvoid nonNullAuthenticationInfoAfterAuthenticate() {\r\n    AuthenticationInfo authcInfo = abstractAuthenticator.authenticate(newToken());\r\n    assertNotNull(authcInfo);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\shiro\\core\\src\\test\\java\\org\\apache\\shiro\\authc\\AbstractAuthenticatorTest.java",
  "methodName" : "notifySuccessAfterDoAuthenticate",
  "sourceCode" : "@Test\r\nvoid notifySuccessAfterDoAuthenticate() {\r\n    AuthenticationListener mockListener = createMock(AuthenticationListener.class);\r\n    abstractAuthenticator.getAuthenticationListeners().add(mockListener);\r\n    AuthenticationToken token = newToken();\r\n    mockListener.onSuccess(token, info);\r\n    replay(mockListener);\r\n    abstractAuthenticator.authenticate(token);\r\n    verify(mockListener);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\shiro\\core\\src\\test\\java\\org\\apache\\shiro\\authc\\AbstractAuthenticatorTest.java",
  "methodName" : "notifyFailureAfterDoAuthenticateThrowsAuthenticationException",
  "sourceCode" : "@Test\r\nvoid notifyFailureAfterDoAuthenticateThrowsAuthenticationException() {\r\n    AuthenticationListener mockListener = createMock(AuthenticationListener.class);\r\n    AuthenticationToken token = newToken();\r\n    final AuthenticationException ae = new AuthenticationException(\"dummy exception to test notification\");\r\n    abstractAuthenticator = new AbstractAuthenticator() {\r\n\r\n        protected AuthenticationInfo doAuthenticate(AuthenticationToken token) throws AuthenticationException {\r\n            throw ae;\r\n        }\r\n    };\r\n    abstractAuthenticator.getAuthenticationListeners().add(mockListener);\r\n    mockListener.onFailure(token, ae);\r\n    replay(mockListener);\r\n    boolean exceptionThrown = false;\r\n    try {\r\n        abstractAuthenticator.authenticate(token);\r\n    } catch (AuthenticationException e) {\r\n        exceptionThrown = true;\r\n        assertEquals(e, ae);\r\n    }\r\n    verify(mockListener);\r\n    if (!exceptionThrown) {\r\n        fail(\"An AuthenticationException should have been thrown during the notifyFailure test case.\");\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\shiro\\core\\src\\test\\java\\org\\apache\\shiro\\authc\\AbstractAuthenticatorTest.java",
  "methodName" : "notifyFailureAfterDoAuthenticateThrowsNonAuthenticationException",
  "sourceCode" : "@Test\r\nvoid notifyFailureAfterDoAuthenticateThrowsNonAuthenticationException() {\r\n    assertThrows(AuthenticationException.class, () -> {\r\n        abstractAuthenticator = new AbstractAuthenticator() {\r\n\r\n            protected AuthenticationInfo doAuthenticate(AuthenticationToken token) throws AuthenticationException {\r\n                throw new IllegalArgumentException(\"not an AuthenticationException subclass\");\r\n            }\r\n        };\r\n        AuthenticationToken token = newToken();\r\n        abstractAuthenticator.authenticate(token);\r\n    });\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\shiro\\core\\src\\test\\java\\org\\apache\\shiro\\authc\\AbstractAuthenticatorTest.java",
  "methodName" : "logExceptionAfterDoAuthenticateThrowsNonAuthenticationException",
  "sourceCode" : "@Test\r\nvoid logExceptionAfterDoAuthenticateThrowsNonAuthenticationException() {\r\n    // NOTE: log4j is a test dependency\r\n    final String expectedExceptionMessage = \"exception thrown\" + \" for test logExceptionAfterDoAuthenticateThrowsNonAuthenticationException\";\r\n    abstractAuthenticator = new AbstractAuthenticator() {\r\n\r\n        protected AuthenticationInfo doAuthenticate(AuthenticationToken token) throws AuthenticationException {\r\n            throw new IllegalArgumentException(expectedExceptionMessage);\r\n        }\r\n    };\r\n    AuthenticationToken token = newToken();\r\n    try {\r\n        abstractAuthenticator.authenticate(token);\r\n        fail(\"the expected AuthenticationException was not thrown\");\r\n    } catch (AuthenticationException ignored) {\r\n    }\r\n    String logMsg = String.join(\"\\n\", listAppender.getMessages());\r\n    assertTrue(logMsg.contains(\"WARN\"));\r\n    assertTrue(logMsg.contains(\"java.lang.IllegalArgumentException: \" + expectedExceptionMessage));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\shiro\\core\\src\\test\\java\\org\\apache\\shiro\\authc\\credential\\AbstractHashedCredentialsMatcherTest.java",
  "methodName" : "testBasic",
  "sourceCode" : "@Test\r\nvoid testBasic() {\r\n    CredentialsMatcher matcher = (CredentialsMatcher) ClassUtils.newInstance(getMatcherClass());\r\n    byte[] hashed = hash(\"password\").getBytes();\r\n    AuthenticationInfo account = new SimpleAuthenticationInfo(\"username\", hashed, \"realmName\");\r\n    AuthenticationToken token = new UsernamePasswordToken(\"username\", \"password\");\r\n    assertTrue(matcher.doCredentialsMatch(token, account));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\shiro\\core\\src\\test\\java\\org\\apache\\shiro\\authc\\credential\\AllowAllCredentialsMatcherTest.java",
  "methodName" : "testBasic",
  "sourceCode" : "@Test\r\nvoid testBasic() {\r\n    assertTrue(new AllowAllCredentialsMatcher().doCredentialsMatch(null, null));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\shiro\\core\\src\\test\\java\\org\\apache\\shiro\\authc\\credential\\HashedCredentialsMatcherTest.java",
  "methodName" : "testSaltedAuthenticationInfo",
  "sourceCode" : "/**\r\n * Test new Shiro 1.1 functionality, where the salt is obtained from the stored account information, as it\r\n * should be.  See <a href=\"https://issues.apache.org/jira/browse/SHIRO-186\">SHIRO-186</a>\r\n */\r\n@Test\r\nvoid testSaltedAuthenticationInfo() {\r\n    //use SHA-1 hashing in this test:\r\n    HashedCredentialsMatcher matcher = new HashedCredentialsMatcher(Sha512Hash.ALGORITHM_NAME);\r\n    //simulate a user account with a SHA-1 hashed and salted password:\r\n    ByteSource salt = new SecureRandomNumberGenerator().nextBytes();\r\n    Object hashedPassword = new Sha512Hash(\"password\", salt);\r\n    SimpleAuthenticationInfo account = new SimpleAuthenticationInfo(\"username\", hashedPassword, salt, \"realmName\");\r\n    //simulate a username/password (plaintext) token created in response to a login attempt:\r\n    AuthenticationToken token = new UsernamePasswordToken(\"username\", \"password\");\r\n    //verify the hashed token matches what is in the account:\r\n    assertTrue(matcher.doCredentialsMatch(token, account));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\shiro\\core\\src\\test\\java\\org\\apache\\shiro\\authc\\credential\\HashedCredentialsMatcherTest.java",
  "methodName" : "testBackwardsCompatibleUnsaltedAuthenticationInfo",
  "sourceCode" : "/**\r\n * Test backwards compatibility of unsalted credentials before\r\n * <a href=\"https://issues.apache.org/jira/browse/SHIRO-186\">SHIRO-186</a> edits.\r\n */\r\n@Test\r\nvoid testBackwardsCompatibleUnsaltedAuthenticationInfo() {\r\n    HashedCredentialsMatcher matcher = new HashedCredentialsMatcher(Sha512Hash.ALGORITHM_NAME);\r\n    //simulate an account with SHA-1 hashed password (no salt)\r\n    final String username = \"username\";\r\n    final String password = \"password\";\r\n    final Object hashedPassword = new Sha512Hash(password).getBytes();\r\n    AuthenticationInfo account = new AuthenticationInfo() {\r\n\r\n        private static final long serialVersionUID = -3613684957517438801L;\r\n\r\n        @Override\r\n        public PrincipalCollection getPrincipals() {\r\n            return new SimplePrincipalCollection(username, \"realmName\");\r\n        }\r\n\r\n        @Override\r\n        public Object getCredentials() {\r\n            return hashedPassword;\r\n        }\r\n    };\r\n    //simulate a username/password (plaintext) token created in response to a login attempt:\r\n    AuthenticationToken token = new UsernamePasswordToken(\"username\", \"password\");\r\n    //verify the hashed token matches what is in the account:\r\n    assertTrue(matcher.doCredentialsMatch(token, account));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\shiro\\core\\src\\test\\java\\org\\apache\\shiro\\authc\\credential\\HashedCredentialsMatcherTest.java",
  "methodName" : "testBackwardsCompatibleSaltedAuthenticationInfo",
  "sourceCode" : "/**\r\n * Test backwards compatibility of salted credentials before\r\n * <a href=\"https://issues.apache.org/jira/browse/SHIRO-186\">SHIRO-186</a> edits.\r\n */\r\n@Test\r\n@SuppressWarnings(\"deprecation\")\r\nvoid testBackwardsCompatibleSaltedAuthenticationInfo() {\r\n    HashedCredentialsMatcher matcher = new HashedCredentialsMatcher(Sha512Hash.ALGORITHM_NAME);\r\n    //enable this for Shiro 1.0 backwards compatibility:\r\n    matcher.setHashSalted(true);\r\n    //simulate an account with SHA-1 hashed password, using the username as the salt\r\n    //(BAD IDEA, but backwards-compatible):\r\n    final String username = \"username\";\r\n    final String password = \"password\";\r\n    final Object hashedPassword = new Sha512Hash(password, username).getBytes();\r\n    AuthenticationInfo account = new AuthenticationInfo() {\r\n\r\n        private static final long serialVersionUID = -6942549615727484358L;\r\n\r\n        @Override\r\n        public PrincipalCollection getPrincipals() {\r\n            return new SimplePrincipalCollection(username, \"realmName\");\r\n        }\r\n\r\n        @Override\r\n        public Object getCredentials() {\r\n            return hashedPassword;\r\n        }\r\n    };\r\n    //simulate a username/password (plaintext) token created in response to a login attempt:\r\n    AuthenticationToken token = new UsernamePasswordToken(\"username\", \"password\");\r\n    //verify the hashed token matches what is in the account:\r\n    assertTrue(matcher.doCredentialsMatch(token, account));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\shiro\\core\\src\\test\\java\\org\\apache\\shiro\\authc\\pam\\AllSuccessfulStrategyTest.java",
  "methodName" : "beforeAllAttempts",
  "sourceCode" : "@Test\r\nvoid beforeAllAttempts() {\r\n    AuthenticationInfo info = strategy.beforeAllAttempts(null, null);\r\n    assertNotNull(info);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\shiro\\core\\src\\test\\java\\org\\apache\\shiro\\authc\\pam\\AllSuccessfulStrategyTest.java",
  "methodName" : "beforeAttemptSupportingToken",
  "sourceCode" : "@Test\r\nvoid beforeAttemptSupportingToken() {\r\n    new SimpleAccountRealm();\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\shiro\\core\\src\\test\\java\\org\\apache\\shiro\\authc\\pam\\AllSuccessfulStrategyTest.java",
  "methodName" : "beforeAttemptRealmDoesntSupportToken",
  "sourceCode" : "@Test\r\nvoid beforeAttemptRealmDoesntSupportToken() {\r\n    assertThrows(UnsupportedTokenException.class, () -> {\r\n        Realm notSupportingRealm = new AuthorizingRealm() {\r\n\r\n            public boolean supports(AuthenticationToken token) {\r\n                return false;\r\n            }\r\n\r\n            protected AuthenticationInfo doGetAuthenticationInfo(AuthenticationToken token) throws AuthenticationException {\r\n                return null;\r\n            }\r\n\r\n            protected AuthorizationInfo doGetAuthorizationInfo(PrincipalCollection principal) {\r\n                return null;\r\n            }\r\n        };\r\n        strategy.beforeAttempt(notSupportingRealm, null, null);\r\n    });\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\shiro\\core\\src\\test\\java\\org\\apache\\shiro\\authc\\pam\\FirstSuccessfulStrategyTest.java",
  "methodName" : "beforeAllAttempts",
  "sourceCode" : "@Test\r\nvoid beforeAllAttempts() {\r\n    AuthenticationInfo authenticationInfo = strategy.beforeAllAttempts(null, null);\r\n    assertNull(authenticationInfo);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\shiro\\core\\src\\test\\java\\org\\apache\\shiro\\authc\\pam\\FirstSuccessfulStrategyTest.java",
  "methodName" : "testMergeWithValidAggregateInfo",
  "sourceCode" : "@Test\r\nvoid testMergeWithValidAggregateInfo() {\r\n    AuthenticationInfo aggregate = new MergableAuthenticationInfo() {\r\n\r\n        @Override\r\n        public void merge(AuthenticationInfo info) {\r\n        }\r\n\r\n        @Override\r\n        public PrincipalCollection getPrincipals() {\r\n            return new SimplePrincipalCollection(\"principals\", \"realmName\");\r\n        }\r\n\r\n        @Override\r\n        public Object getCredentials() {\r\n            return null;\r\n        }\r\n    };\r\n    AuthenticationInfo mergeResult = strategy.merge(new SimpleAuthenticationInfo(), aggregate);\r\n    assertEquals(aggregate, mergeResult);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\shiro\\core\\src\\test\\java\\org\\apache\\shiro\\authc\\pam\\FirstSuccessfulStrategyTest.java",
  "methodName" : "testMergeWithInvalidAggregateInfo",
  "sourceCode" : "@Test\r\nvoid testMergeWithInvalidAggregateInfo() {\r\n    AuthenticationInfo aggregate = new MergableAuthenticationInfo() {\r\n\r\n        @Override\r\n        public void merge(AuthenticationInfo info) {\r\n        }\r\n\r\n        @Override\r\n        public PrincipalCollection getPrincipals() {\r\n            return new SimplePrincipalCollection();\r\n        }\r\n\r\n        @Override\r\n        public Object getCredentials() {\r\n            return null;\r\n        }\r\n    };\r\n    AuthenticationInfo authInfo = new SimpleAuthenticationInfo();\r\n    AuthenticationInfo mergeResult = strategy.merge(authInfo, aggregate);\r\n    assertEquals(authInfo, mergeResult);\r\n    AuthenticationInfo info = strategy.beforeAllAttempts(null, null);\r\n    assertNull(info);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\shiro\\core\\src\\test\\java\\org\\apache\\shiro\\authc\\pam\\FirstSuccessfulStrategyTest.java",
  "methodName" : "testBeforeAttemptNull",
  "sourceCode" : "@Test\r\nvoid testBeforeAttemptNull() {\r\n    assertNull(strategy.beforeAttempt(null, null, null));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\shiro\\core\\src\\test\\java\\org\\apache\\shiro\\authc\\pam\\FirstSuccessfulStrategyTest.java",
  "methodName" : "testBeforeAttemptEmptyPrincipal",
  "sourceCode" : "@Test\r\nvoid testBeforeAttemptEmptyPrincipal() {\r\n    AuthenticationInfo aggregate = new SimpleAuthenticationInfo();\r\n    assertEquals(strategy.beforeAttempt(null, null, aggregate), aggregate);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\shiro\\core\\src\\test\\java\\org\\apache\\shiro\\authc\\pam\\FirstSuccessfulStrategyTest.java",
  "methodName" : "testBeforeAttemptEmptyList",
  "sourceCode" : "@Test\r\nvoid testBeforeAttemptEmptyList() {\r\n    SimplePrincipalCollection principalCollection = new SimplePrincipalCollection();\r\n    AuthenticationInfo aggregate = new SimpleAuthenticationInfo(principalCollection, null);\r\n    assertEquals(strategy.beforeAttempt(null, null, aggregate), aggregate);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\shiro\\core\\src\\test\\java\\org\\apache\\shiro\\authc\\pam\\FirstSuccessfulStrategyTest.java",
  "methodName" : "testBeforeAttemptStopAfterFirstSuccess",
  "sourceCode" : "@Test\r\nvoid testBeforeAttemptStopAfterFirstSuccess() {\r\n    assertThrows(ShortCircuitIterationException.class, () -> {\r\n        AuthenticationInfo aggregate = new SimpleAuthenticationInfo(\"principal\", null, \"a-realm-name\");\r\n        strategy.beforeAttempt(null, null, aggregate);\r\n    });\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\shiro\\core\\src\\test\\java\\org\\apache\\shiro\\authc\\SimpleAuthenticationInfoTest.java",
  "methodName" : "testMergeWithEmptyInstances",
  "sourceCode" : "@Test\r\nvoid testMergeWithEmptyInstances() {\r\n    SimpleAuthenticationInfo aggregate = new SimpleAuthenticationInfo();\r\n    SimpleAuthenticationInfo local = new SimpleAuthenticationInfo();\r\n    aggregate.merge(local);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\shiro\\core\\src\\test\\java\\org\\apache\\shiro\\authc\\SimpleAuthenticationInfoTest.java",
  "methodName" : "testMergeWithAggregateNullCredentials",
  "sourceCode" : "/**\r\n * Verifies fix for JSEC-122\r\n */\r\n@Test\r\nvoid testMergeWithAggregateNullCredentials() {\r\n    SimpleAuthenticationInfo aggregate = new SimpleAuthenticationInfo();\r\n    SimpleAuthenticationInfo local = new SimpleAuthenticationInfo(\"username\", \"password\", \"testRealm\");\r\n    aggregate.merge(local);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\shiro\\core\\src\\test\\java\\org\\apache\\shiro\\authc\\SimpleAuthenticationInfoTest.java",
  "methodName" : "testMergeWithImmutablePrincipalCollection",
  "sourceCode" : "@SuppressWarnings({ \"serial\", \"checkstyle:AnonInnerLength\" })\r\n@Test\r\nvoid testMergeWithImmutablePrincipalCollection() {\r\n    SimpleAuthenticationInfo aggregate = new SimpleAuthenticationInfo();\r\n    // Make a quick test fixture that does *not* implement MutablePrincipalCollection\r\n    PrincipalCollection principalCollection = new PrincipalCollection() {\r\n\r\n        @SuppressWarnings(\"unchecked\")\r\n        public List asList() {\r\n            return null;\r\n        }\r\n\r\n        @SuppressWarnings(\"unchecked\")\r\n        public Set asSet() {\r\n            return null;\r\n        }\r\n\r\n        public <T> Collection<T> byType(Class<T> type) {\r\n            return null;\r\n        }\r\n\r\n        @SuppressWarnings(\"unchecked\")\r\n        public Collection fromRealm(String realmName) {\r\n            Collection<Object> principals = new HashSet<Object>();\r\n            principals.add(\"testprincipal\");\r\n            return principals;\r\n        }\r\n\r\n        public Object getPrimaryPrincipal() {\r\n            return null;\r\n        }\r\n\r\n        public Set<String> getRealmNames() {\r\n            Set<String> realms = new HashSet<String>();\r\n            realms.add(\"testrealm\");\r\n            return realms;\r\n        }\r\n\r\n        public boolean isEmpty() {\r\n            return false;\r\n        }\r\n\r\n        public <T> T oneByType(Class<T> type) {\r\n            return null;\r\n        }\r\n\r\n        @SuppressWarnings(\"unchecked\")\r\n        public Iterator iterator() {\r\n            return null;\r\n        }\r\n    };\r\n    aggregate.setPrincipals(principalCollection);\r\n    SimpleAuthenticationInfo local = new SimpleAuthenticationInfo(\"username\", \"password\", \"testRealm\");\r\n    aggregate.merge(local);\r\n    assertEquals(2, aggregate.getPrincipals().asList().size());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\shiro\\core\\src\\test\\java\\org\\apache\\shiro\\authz\\aop\\DenyAllAnnotationHandlerTest.java",
  "methodName" : "testGuestSingleRoleAssertion",
  "sourceCode" : "@Test\r\nvoid testGuestSingleRoleAssertion() throws Throwable {\r\n    assertThrows(UnauthenticatedException.class, () -> {\r\n        DenyAllAnnotationHandler handler = new DenyAllAnnotationHandler();\r\n        Annotation denyAllAnnotation = new DenyAll() {\r\n\r\n            @Override\r\n            public Class<? extends Annotation> annotationType() {\r\n                return DenyAll.class;\r\n            }\r\n        };\r\n        handler.assertAuthorized(denyAllAnnotation);\r\n    });\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\shiro\\core\\src\\test\\java\\org\\apache\\shiro\\authz\\aop\\DenyAllAnnotationHandlerTest.java",
  "methodName" : "testOneOfTheRolesRequired",
  "sourceCode" : "@Test\r\nvoid testOneOfTheRolesRequired() throws Throwable {\r\n    assertThrows(UnauthenticatedException.class, () -> {\r\n        subject = createMock(Subject.class);\r\n        expect(subject.hasRole(\"blah\")).andReturn(true);\r\n        replay(subject);\r\n        DenyAllAnnotationHandler handler = new DenyAllAnnotationHandler() {\r\n\r\n            @Override\r\n            protected Subject getSubject() {\r\n                return subject;\r\n            }\r\n        };\r\n        Annotation denyAllAnnotation = new DenyAll() {\r\n\r\n            @Override\r\n            public Class<? extends Annotation> annotationType() {\r\n                return DenyAll.class;\r\n            }\r\n        };\r\n        handler.assertAuthorized(denyAllAnnotation);\r\n    });\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\shiro\\core\\src\\test\\java\\org\\apache\\shiro\\authz\\aop\\PermissionAnnotationHandlerTest.java",
  "methodName" : "testGuestSinglePermissionAssertion",
  "sourceCode" : "//Added to satisfy SHIRO-146\r\n@Test\r\npublic void testGuestSinglePermissionAssertion() {\r\n    PermissionAnnotationHandler handler = new PermissionAnnotationHandler();\r\n    Annotation requiresPermissionAnnotation = new RequiresPermissions() {\r\n\r\n        @Override\r\n        public String[] value() {\r\n            return new String[] { \"test:test\" };\r\n        }\r\n\r\n        @Override\r\n        public Class<? extends Annotation> annotationType() {\r\n            return RequiresPermissions.class;\r\n        }\r\n\r\n        @Override\r\n        public Logical logical() {\r\n            return Logical.AND;\r\n        }\r\n    };\r\n    runWithSubject(subject -> {\r\n        assertThrows(UnauthenticatedException.class, () -> handler.assertAuthorized(requiresPermissionAnnotation));\r\n    });\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\shiro\\core\\src\\test\\java\\org\\apache\\shiro\\authz\\aop\\PermissionAnnotationHandlerTest.java",
  "methodName" : "testGuestMultiplePermissionAssertion",
  "sourceCode" : "//Added to satisfy SHIRO-146\r\n@Test\r\npublic void testGuestMultiplePermissionAssertion() {\r\n    PermissionAnnotationHandler handler = new PermissionAnnotationHandler();\r\n    Annotation requiresPermissionAnnotation = new RequiresPermissions() {\r\n\r\n        @Override\r\n        public String[] value() {\r\n            return new String[] { \"test:test\", \"test2:test2\" };\r\n        }\r\n\r\n        @Override\r\n        public Class<? extends Annotation> annotationType() {\r\n            return RequiresPermissions.class;\r\n        }\r\n\r\n        @Override\r\n        public Logical logical() {\r\n            return Logical.AND;\r\n        }\r\n    };\r\n    runWithSubject(subject -> {\r\n        assertThrows(UnauthenticatedException.class, () -> handler.assertAuthorized(requiresPermissionAnnotation));\r\n    });\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\shiro\\core\\src\\test\\java\\org\\apache\\shiro\\authz\\aop\\PermitAllAnnotationHandlerTest.java",
  "methodName" : "testPermitAll",
  "sourceCode" : "@Test\r\nvoid testPermitAll() throws Throwable {\r\n    PermitAllAnnotationHandler handler = new PermitAllAnnotationHandler();\r\n    Annotation permitallAnnotation = new PermitAll() {\r\n\r\n        @Override\r\n        public Class<? extends Annotation> annotationType() {\r\n            return PermitAll.class;\r\n        }\r\n    };\r\n    handler.assertAuthorized(permitallAnnotation);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\shiro\\core\\src\\test\\java\\org\\apache\\shiro\\authz\\aop\\RoleAnnotationHandlerTest.java",
  "methodName" : "testGuestSingleRoleAssertion",
  "sourceCode" : "//Added to satisfy SHIRO-146\r\n@Test\r\npublic void testGuestSingleRoleAssertion() throws Throwable {\r\n    RoleAnnotationHandler handler = new RoleAnnotationHandler();\r\n    Annotation requiresRolesAnnotation = new RequiresRoles() {\r\n\r\n        @Override\r\n        public String[] value() {\r\n            return new String[] { \"blah\" };\r\n        }\r\n\r\n        @Override\r\n        public Class<? extends Annotation> annotationType() {\r\n            return RequiresRoles.class;\r\n        }\r\n\r\n        @Override\r\n        public Logical logical() {\r\n            return Logical.AND;\r\n        }\r\n    };\r\n    runWithSubject(subject -> {\r\n        assertThrows(UnauthenticatedException.class, () -> handler.assertAuthorized(requiresRolesAnnotation));\r\n    });\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\shiro\\core\\src\\test\\java\\org\\apache\\shiro\\authz\\aop\\RoleAnnotationHandlerTest.java",
  "methodName" : "testGuestMultipleRolesAssertion",
  "sourceCode" : "//Added to satisfy SHIRO-146\r\n@Test\r\npublic void testGuestMultipleRolesAssertion() throws Throwable {\r\n    RoleAnnotationHandler handler = new RoleAnnotationHandler();\r\n    Annotation requiresRolesAnnotation = new RequiresRoles() {\r\n\r\n        @Override\r\n        public String[] value() {\r\n            return new String[] { \"blah\", \"blah2\" };\r\n        }\r\n\r\n        @Override\r\n        public Class<? extends Annotation> annotationType() {\r\n            return RequiresRoles.class;\r\n        }\r\n\r\n        @Override\r\n        public Logical logical() {\r\n            return Logical.AND;\r\n        }\r\n    };\r\n    runWithSubject(subject -> {\r\n        assertThrows(UnauthenticatedException.class, () -> handler.assertAuthorized(requiresRolesAnnotation));\r\n    });\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\shiro\\core\\src\\test\\java\\org\\apache\\shiro\\authz\\aop\\RoleAnnotationHandlerTest.java",
  "methodName" : "testOneOfTheRolesRequired",
  "sourceCode" : "@Test\r\npublic void testOneOfTheRolesRequired() {\r\n    subject = createMock(Subject.class);\r\n    expect(subject.hasRole(\"blah\")).andReturn(true);\r\n    expect(subject.hasRole(\"blah2\")).andReturn(false);\r\n    replay(subject);\r\n    RoleAnnotationHandler handler = new RoleAnnotationHandler() {\r\n\r\n        @Override\r\n        protected Subject getSubject() {\r\n            return subject;\r\n        }\r\n    };\r\n    Annotation requiresRolesAnnotation = new RequiresRoles() {\r\n\r\n        @Override\r\n        public String[] value() {\r\n            return new String[] { \"blah\", \"blah2\" };\r\n        }\r\n\r\n        @Override\r\n        public Class<? extends Annotation> annotationType() {\r\n            return RequiresRoles.class;\r\n        }\r\n\r\n        @Override\r\n        public Logical logical() {\r\n            return Logical.OR;\r\n        }\r\n    };\r\n    handler.assertAuthorized(requiresRolesAnnotation);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\shiro\\core\\src\\test\\java\\org\\apache\\shiro\\authz\\aop\\RolesAllowedAnnotationHandlerTest.java",
  "methodName" : "testGuestSingleRoleAssertion",
  "sourceCode" : "@Test\r\nvoid testGuestSingleRoleAssertion() throws Throwable {\r\n    assertThrows(UnauthenticatedException.class, () -> {\r\n        subject = mock(Subject.class);\r\n        doThrow(new UnauthenticatedException()).when(subject).checkRole(\"blah\");\r\n        RolesAllowedAnnotationHandler handler = new RolesAllowedAnnotationHandler() {\r\n\r\n            @Override\r\n            protected Subject getSubject() {\r\n                return subject;\r\n            }\r\n        };\r\n        Annotation rolesAllowedAnnotation = new RolesAllowed() {\r\n\r\n            @Override\r\n            public String[] value() {\r\n                return new String[] { \"blah\" };\r\n            }\r\n\r\n            @Override\r\n            public Class<? extends Annotation> annotationType() {\r\n                return RolesAllowed.class;\r\n            }\r\n        };\r\n        handler.assertAuthorized(rolesAllowedAnnotation);\r\n    });\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\shiro\\core\\src\\test\\java\\org\\apache\\shiro\\authz\\aop\\RolesAllowedAnnotationHandlerTest.java",
  "methodName" : "testGuestMultipleRolesAssertion",
  "sourceCode" : "@Test\r\nvoid testGuestMultipleRolesAssertion() throws Throwable {\r\n    assertThrows(UnauthenticatedException.class, () -> {\r\n        subject = mock(Subject.class);\r\n        doThrow(new UnauthenticatedException()).when(subject).checkRole(\"blah\");\r\n        when(subject.hasRole(\"blah\")).thenReturn(false);\r\n        when(subject.hasRole(\"blah2\")).thenReturn(false);\r\n        RolesAllowedAnnotationHandler handler = new RolesAllowedAnnotationHandler() {\r\n\r\n            @Override\r\n            protected Subject getSubject() {\r\n                return subject;\r\n            }\r\n        };\r\n        Annotation rolesAllowedAnnotation = new RolesAllowed() {\r\n\r\n            @Override\r\n            public String[] value() {\r\n                return new String[] { \"blah\", \"blah2\" };\r\n            }\r\n\r\n            @Override\r\n            public Class<? extends Annotation> annotationType() {\r\n                return RolesAllowed.class;\r\n            }\r\n        };\r\n        handler.assertAuthorized(rolesAllowedAnnotation);\r\n    });\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\shiro\\core\\src\\test\\java\\org\\apache\\shiro\\authz\\aop\\RolesAllowedAnnotationHandlerTest.java",
  "methodName" : "testOneOfTheRolesRequired",
  "sourceCode" : "@Test\r\nvoid testOneOfTheRolesRequired() throws Throwable {\r\n    subject = mock(Subject.class);\r\n    when(subject.hasRole(\"blah\")).thenReturn(true);\r\n    when(subject.hasRole(\"blah2\")).thenReturn(false);\r\n    RolesAllowedAnnotationHandler handler = new RolesAllowedAnnotationHandler() {\r\n\r\n        @Override\r\n        protected Subject getSubject() {\r\n            return subject;\r\n        }\r\n    };\r\n    Annotation rolesAllowedAnnotation = new RolesAllowed() {\r\n\r\n        @Override\r\n        public String[] value() {\r\n            return new String[] { \"blah\", \"blah2\" };\r\n        }\r\n\r\n        @Override\r\n        public Class<? extends Annotation> annotationType() {\r\n            return RolesAllowed.class;\r\n        }\r\n    };\r\n    handler.assertAuthorized(rolesAllowedAnnotation);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\shiro\\core\\src\\test\\java\\org\\apache\\shiro\\authz\\ModularRealmAuthorizerTest.java",
  "methodName" : "testSettingOfRolePermissionResolver",
  "sourceCode" : "@Test\r\nvoid testSettingOfRolePermissionResolver() {\r\n    Collection<Realm> realms = new ArrayList<Realm>();\r\n    realms.add(new MockAuthorizingRealm());\r\n    realms.add(new MockAuthorizingRealm());\r\n    // its null to start with\r\n    for (Realm realm : realms) {\r\n        assertNull(((AuthorizingRealm) realm).getRolePermissionResolver());\r\n    }\r\n    ModularRealmAuthorizer modRealmAuthz = new ModularRealmAuthorizer();\r\n    modRealmAuthz.setRealms(realms);\r\n    // make sure they are still null\r\n    for (Realm realm : realms) {\r\n        assertNull(((AuthorizingRealm) realm).getRolePermissionResolver());\r\n    }\r\n    // now set the RolePermissionResolver\r\n    RolePermissionResolver rolePermissionResolver = new RolePermissionResolver() {\r\n\r\n        public Collection<Permission> resolvePermissionsInRole(String roleString) {\r\n            return null;\r\n        }\r\n    };\r\n    modRealmAuthz.setRolePermissionResolver(rolePermissionResolver);\r\n    // make sure they are set\r\n    for (Realm realm : realms) {\r\n        // check for same instance\r\n        assertTrue(((AuthorizingRealm) realm).getRolePermissionResolver() == rolePermissionResolver);\r\n    }\r\n    // add a new realm and make sure the RolePermissionResolver is set\r\n    MockAuthorizingRealm mockRealm = new MockAuthorizingRealm();\r\n    realms.add(mockRealm);\r\n    modRealmAuthz.setRealms(realms);\r\n    assertTrue(((AuthorizingRealm) mockRealm).getRolePermissionResolver() == rolePermissionResolver);\r\n    // TODO: no way to unset them, not sure if that is a valid use case, but this is consistent with the PermissionResolver logic\r\n    //        // now just to be sure, unset them\r\n    //        modRealmAuthz.setRolePermissionResolver( null );\r\n    //        for ( Realm realm : realms )\r\n    //        {\r\n    //            assertNull( ((AuthorizingRealm)realm).getRolePermissionResolver() );\r\n    //        }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\shiro\\core\\src\\test\\java\\org\\apache\\shiro\\authz\\permission\\AllPermissionTest.java",
  "methodName" : "testNullArgument",
  "sourceCode" : "@Test\r\nvoid testNullArgument() {\r\n    assertTrue(new AllPermission().implies(null));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\shiro\\core\\src\\test\\java\\org\\apache\\shiro\\authz\\permission\\AllPermissionTest.java",
  "methodName" : "testNonNullArgument",
  "sourceCode" : "@Test\r\nvoid testNonNullArgument() {\r\n    assertTrue(new AllPermission().implies(new AllPermission()));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\shiro\\core\\src\\test\\java\\org\\apache\\shiro\\authz\\permission\\DomainPermissionTest.java",
  "methodName" : "testDefaultConstructor",
  "sourceCode" : "@Test\r\nvoid testDefaultConstructor() {\r\n    DomainPermission p;\r\n    List<Set<String>> parts;\r\n    Set<String> set;\r\n    String entry;\r\n    // No arg constructor\r\n    p = new DomainPermission();\r\n    // Verify domain\r\n    assertEquals(\"domain\", p.getDomain());\r\n    // Verify actions\r\n    set = p.getActions();\r\n    assertNull(set);\r\n    // Verify targets\r\n    set = p.getTargets();\r\n    assertNull(set);\r\n    // Verify parts\r\n    parts = p.getParts();\r\n    assertEquals(1, parts.size(), \"Number of parts\");\r\n    set = parts.get(0);\r\n    assertEquals(1, set.size());\r\n    entry = set.iterator().next();\r\n    assertEquals(\"domain\", entry);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\shiro\\core\\src\\test\\java\\org\\apache\\shiro\\authz\\permission\\DomainPermissionTest.java",
  "methodName" : "testActionsConstructorWithSingleAction",
  "sourceCode" : "@Test\r\nvoid testActionsConstructorWithSingleAction() {\r\n    DomainPermission p;\r\n    List<Set<String>> parts;\r\n    Set<String> set;\r\n    Iterator<String> iterator;\r\n    String entry;\r\n    // Actions constructor with a single action\r\n    p = new DomainPermission(\"action1\");\r\n    // Verify domain\r\n    assertEquals(\"domain\", p.getDomain());\r\n    // Verify actions\r\n    set = p.getActions();\r\n    assertNotNull(set);\r\n    assertEquals(1, set.size());\r\n    iterator = set.iterator();\r\n    entry = iterator.next();\r\n    assertEquals(\"action1\", entry);\r\n    // Verify targets\r\n    set = p.getTargets();\r\n    assertNull(set);\r\n    // Verify parts\r\n    parts = p.getParts();\r\n    assertEquals(2, parts.size());\r\n    set = parts.get(0);\r\n    assertEquals(1, set.size());\r\n    iterator = set.iterator();\r\n    entry = iterator.next();\r\n    assertEquals(\"domain\", entry);\r\n    set = parts.get(1);\r\n    assertEquals(1, set.size());\r\n    iterator = set.iterator();\r\n    entry = iterator.next();\r\n    assertEquals(\"action1\", entry);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\shiro\\core\\src\\test\\java\\org\\apache\\shiro\\authz\\permission\\DomainPermissionTest.java",
  "methodName" : "testActionsConstructorWithMultipleActions",
  "sourceCode" : "@Test\r\nvoid testActionsConstructorWithMultipleActions() {\r\n    DomainPermission p;\r\n    List<Set<String>> parts;\r\n    Set<String> set;\r\n    Iterator<String> iterator;\r\n    String entry;\r\n    // Actions constructor with three actions\r\n    p = new DomainPermission(\"action1,action2,action3\");\r\n    // Verify domain\r\n    assertEquals(\"domain\", p.getDomain());\r\n    // Verify actions\r\n    set = p.getActions();\r\n    assertNotNull(set);\r\n    assertEquals(3, set.size());\r\n    iterator = set.iterator();\r\n    entry = iterator.next();\r\n    assertEquals(\"action1\", entry);\r\n    entry = iterator.next();\r\n    assertEquals(\"action2\", entry);\r\n    entry = iterator.next();\r\n    assertEquals(\"action3\", entry);\r\n    // Verify targets\r\n    set = p.getTargets();\r\n    assertNull(set);\r\n    // Verify parts\r\n    parts = p.getParts();\r\n    assertEquals(2, parts.size());\r\n    set = parts.get(0);\r\n    assertEquals(1, set.size());\r\n    iterator = set.iterator();\r\n    entry = iterator.next();\r\n    assertEquals(\"domain\", entry);\r\n    set = parts.get(1);\r\n    assertEquals(3, set.size());\r\n    iterator = set.iterator();\r\n    entry = iterator.next();\r\n    assertEquals(\"action1\", entry);\r\n    entry = iterator.next();\r\n    assertEquals(\"action2\", entry);\r\n    entry = iterator.next();\r\n    assertEquals(\"action3\", entry);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\shiro\\core\\src\\test\\java\\org\\apache\\shiro\\authz\\permission\\DomainPermissionTest.java",
  "methodName" : "testActionsTargetsConstructorWithSingleActionAndTarget",
  "sourceCode" : "@Test\r\nvoid testActionsTargetsConstructorWithSingleActionAndTarget() {\r\n    DomainPermission p;\r\n    List<Set<String>> parts;\r\n    Set<String> set;\r\n    Iterator<String> iterator;\r\n    String entry;\r\n    // Actions and target constructor with a single action and target\r\n    p = new DomainPermission(\"action1\", \"target1\");\r\n    // Verify domain\r\n    assertEquals(\"domain\", p.getDomain());\r\n    // Verify actions\r\n    set = p.getActions();\r\n    assertNotNull(set);\r\n    assertEquals(1, set.size());\r\n    iterator = set.iterator();\r\n    entry = iterator.next();\r\n    assertEquals(\"action1\", entry);\r\n    // Verify targets\r\n    set = p.getTargets();\r\n    assertNotNull(set);\r\n    assertEquals(1, set.size());\r\n    iterator = set.iterator();\r\n    entry = iterator.next();\r\n    assertEquals(\"target1\", entry);\r\n    // Verify parts\r\n    parts = p.getParts();\r\n    assertEquals(3, parts.size());\r\n    set = parts.get(0);\r\n    assertEquals(1, set.size());\r\n    iterator = set.iterator();\r\n    entry = iterator.next();\r\n    assertEquals(\"domain\", entry);\r\n    set = parts.get(1);\r\n    assertEquals(1, set.size());\r\n    iterator = set.iterator();\r\n    entry = iterator.next();\r\n    assertEquals(\"action1\", entry);\r\n    set = parts.get(2);\r\n    assertEquals(1, set.size());\r\n    iterator = set.iterator();\r\n    entry = iterator.next();\r\n    assertEquals(\"target1\", entry);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\shiro\\core\\src\\test\\java\\org\\apache\\shiro\\authz\\permission\\DomainPermissionTest.java",
  "methodName" : "testActionsTargetsConstructorWithMultipleActionsAndTargets",
  "sourceCode" : "@Test\r\nvoid testActionsTargetsConstructorWithMultipleActionsAndTargets() {\r\n    DomainPermission p;\r\n    List<Set<String>> parts;\r\n    Set<String> set;\r\n    Iterator<String> iterator;\r\n    String entry;\r\n    // Actions and target constructor with a single action and target\r\n    p = new DomainPermission(\"action1,action2,action3\", \"target1,target2,target3\");\r\n    // Verify domain\r\n    assertEquals(\"domain\", p.getDomain());\r\n    // Verify actions\r\n    set = p.getActions();\r\n    assertNotNull(set);\r\n    assertEquals(3, set.size());\r\n    iterator = set.iterator();\r\n    entry = iterator.next();\r\n    assertEquals(\"action1\", entry);\r\n    entry = iterator.next();\r\n    assertEquals(\"action2\", entry);\r\n    entry = iterator.next();\r\n    assertEquals(\"action3\", entry);\r\n    // Verify targets\r\n    set = p.getTargets();\r\n    assertNotNull(set);\r\n    assertEquals(3, set.size());\r\n    iterator = set.iterator();\r\n    entry = iterator.next();\r\n    assertEquals(\"target1\", entry);\r\n    entry = iterator.next();\r\n    assertEquals(\"target2\", entry);\r\n    entry = iterator.next();\r\n    assertEquals(\"target3\", entry);\r\n    // Verify parts\r\n    parts = p.getParts();\r\n    assertEquals(3, parts.size());\r\n    set = parts.get(0);\r\n    assertEquals(1, set.size());\r\n    iterator = set.iterator();\r\n    entry = iterator.next();\r\n    assertEquals(\"domain\", entry);\r\n    set = parts.get(1);\r\n    assertEquals(3, set.size());\r\n    iterator = set.iterator();\r\n    entry = iterator.next();\r\n    assertEquals(\"action1\", entry);\r\n    entry = iterator.next();\r\n    assertEquals(\"action2\", entry);\r\n    entry = iterator.next();\r\n    assertEquals(\"action3\", entry);\r\n    set = parts.get(2);\r\n    assertEquals(3, set.size());\r\n    iterator = set.iterator();\r\n    entry = iterator.next();\r\n    assertEquals(\"target1\", entry);\r\n    entry = iterator.next();\r\n    assertEquals(\"target2\", entry);\r\n    entry = iterator.next();\r\n    assertEquals(\"target3\", entry);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\shiro\\core\\src\\test\\java\\org\\apache\\shiro\\authz\\permission\\WildcardPermissionResolverTest.java",
  "methodName" : "testDefaultIsNonCaseSensitive",
  "sourceCode" : "@Test\r\nvoid testDefaultIsNonCaseSensitive() {\r\n    WildcardPermissionResolver resolver = new WildcardPermissionResolver();\r\n    assertFalse(resolver.isCaseSensitive(), \"Default sensitivity should be false\");\r\n    /* this is a round-about test as permissions don't store case sensitivity just lower case\r\n        the string. */\r\n    WildcardPermission permission = (WildcardPermission) resolver.resolvePermission(\"Foo:*\");\r\n    assertEquals(\"foo:*\", permission.toString(), \"string should be lowercase\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\shiro\\core\\src\\test\\java\\org\\apache\\shiro\\authz\\permission\\WildcardPermissionResolverTest.java",
  "methodName" : "testCaseSensitive",
  "sourceCode" : "@Test\r\nvoid testCaseSensitive() {\r\n    WildcardPermissionResolver resolver = new WildcardPermissionResolver(true);\r\n    assertTrue(resolver.isCaseSensitive(), \"Sensitivity should be true\");\r\n    /* this is a round-about test as permissions don't store case sensitivity just lower case\r\n        the string. */\r\n    WildcardPermission permission = (WildcardPermission) resolver.resolvePermission(\"Foo:*\");\r\n    assertEquals(\"Foo:*\", permission.toString(), \"string should be mixed case\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\shiro\\core\\src\\test\\java\\org\\apache\\shiro\\authz\\permission\\WildcardPermissionResolverTest.java",
  "methodName" : "testCaseInsensitive",
  "sourceCode" : "@Test\r\nvoid testCaseInsensitive() {\r\n    WildcardPermissionResolver resolver = new WildcardPermissionResolver(false);\r\n    assertFalse(resolver.isCaseSensitive(), \"Sensitivity should be false\");\r\n    /* this is a round-about test as permissions don't store case sensitivity just lower case\r\n        the string. */\r\n    WildcardPermission permission = (WildcardPermission) resolver.resolvePermission(\"Foo:*\");\r\n    assertEquals(\"foo:*\", permission.toString(), \"string should be lowercase\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\shiro\\core\\src\\test\\java\\org\\apache\\shiro\\authz\\permission\\WildcardPermissionResolverTest.java",
  "methodName" : "testCaseSensitiveToggle",
  "sourceCode" : "@Test\r\nvoid testCaseSensitiveToggle() {\r\n    WildcardPermissionResolver resolver = new WildcardPermissionResolver();\r\n    assertFalse(resolver.isCaseSensitive(), \"Default sensitivity should be false\");\r\n    resolver.setCaseSensitive(true);\r\n    assertTrue(resolver.isCaseSensitive(), \"Sensitivity should be true\");\r\n    resolver.setCaseSensitive(false);\r\n    assertFalse(resolver.isCaseSensitive(), \"Sensitivity should be false\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\shiro\\core\\src\\test\\java\\org\\apache\\shiro\\authz\\permission\\WildcardPermissionTest.java",
  "methodName" : "testNull",
  "sourceCode" : "@Test\r\nvoid testNull() {\r\n    assertThrows(IllegalArgumentException.class, () -> {\r\n        new WildcardPermission(null);\r\n    });\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\shiro\\core\\src\\test\\java\\org\\apache\\shiro\\authz\\permission\\WildcardPermissionTest.java",
  "methodName" : "testEmpty",
  "sourceCode" : "@Test\r\nvoid testEmpty() {\r\n    assertThrows(IllegalArgumentException.class, () -> {\r\n        new WildcardPermission(\"\");\r\n    });\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\shiro\\core\\src\\test\\java\\org\\apache\\shiro\\authz\\permission\\WildcardPermissionTest.java",
  "methodName" : "testBlank",
  "sourceCode" : "@Test\r\nvoid testBlank() {\r\n    assertThrows(IllegalArgumentException.class, () -> {\r\n        new WildcardPermission(\"   \");\r\n    });\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\shiro\\core\\src\\test\\java\\org\\apache\\shiro\\authz\\permission\\WildcardPermissionTest.java",
  "methodName" : "testOnlyDelimiters",
  "sourceCode" : "@Test\r\nvoid testOnlyDelimiters() {\r\n    assertThrows(IllegalArgumentException.class, () -> {\r\n        new WildcardPermission(\"::,,::,:\");\r\n    });\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\shiro\\core\\src\\test\\java\\org\\apache\\shiro\\authz\\permission\\WildcardPermissionTest.java",
  "methodName" : "testNamed",
  "sourceCode" : "@SuppressWarnings(\"checkstyle:MultipleVariableDeclarations\")\r\n@Test\r\nvoid testNamed() {\r\n    WildcardPermission p1, p2;\r\n    // Case insensitive, same\r\n    p1 = new WildcardPermission(\"something\");\r\n    p2 = new WildcardPermission(\"something\");\r\n    assertTrue(p1.implies(p2));\r\n    assertTrue(p2.implies(p1));\r\n    // Case insensitive, different case\r\n    p1 = new WildcardPermission(\"something\");\r\n    p2 = new WildcardPermission(\"SOMETHING\");\r\n    assertTrue(p1.implies(p2));\r\n    assertTrue(p2.implies(p1));\r\n    // Case insensitive, different word\r\n    p1 = new WildcardPermission(\"something\");\r\n    p2 = new WildcardPermission(\"else\");\r\n    assertFalse(p1.implies(p2));\r\n    assertFalse(p2.implies(p1));\r\n    // Case sensitive same\r\n    p1 = new WildcardPermission(\"BLAHBLAH\", false);\r\n    p2 = new WildcardPermission(\"BLAHBLAH\", false);\r\n    assertTrue(p1.implies(p2));\r\n    assertTrue(p2.implies(p1));\r\n    // Case sensitive, different case\r\n    p1 = new WildcardPermission(\"BLAHBLAH\", false);\r\n    p2 = new WildcardPermission(\"bLAHBLAH\", false);\r\n    assertTrue(p1.implies(p2));\r\n    assertTrue(p2.implies(p1));\r\n    // Case sensitive, different word\r\n    p1 = new WildcardPermission(\"BLAHBLAH\", false);\r\n    p2 = new WildcardPermission(\"whatwhat\", false);\r\n    assertFalse(p1.implies(p2));\r\n    assertFalse(p2.implies(p1));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\shiro\\core\\src\\test\\java\\org\\apache\\shiro\\authz\\permission\\WildcardPermissionTest.java",
  "methodName" : "testLists",
  "sourceCode" : "@SuppressWarnings(\"checkstyle:MultipleVariableDeclarations\")\r\n@Test\r\nvoid testLists() {\r\n    WildcardPermission p1, p2, p3;\r\n    p1 = new WildcardPermission(\"one,two\");\r\n    p2 = new WildcardPermission(\"one\");\r\n    assertTrue(p1.implies(p2));\r\n    assertFalse(p2.implies(p1));\r\n    p1 = new WildcardPermission(\"one,two,three\");\r\n    p2 = new WildcardPermission(\"one,three\");\r\n    assertTrue(p1.implies(p2));\r\n    assertFalse(p2.implies(p1));\r\n    p1 = new WildcardPermission(\"one,two:one,two,three\");\r\n    p2 = new WildcardPermission(\"one:three\");\r\n    p3 = new WildcardPermission(\"one:two,three\");\r\n    assertTrue(p1.implies(p2));\r\n    assertFalse(p2.implies(p1));\r\n    assertTrue(p1.implies(p3));\r\n    assertFalse(p2.implies(p3));\r\n    assertTrue(p3.implies(p2));\r\n    p1 = new WildcardPermission(\"one,two,three:one,two,three:one,two\");\r\n    p2 = new WildcardPermission(\"one:three:two\");\r\n    assertTrue(p1.implies(p2));\r\n    assertFalse(p2.implies(p1));\r\n    p1 = new WildcardPermission(\"one\");\r\n    p2 = new WildcardPermission(\"one:two,three,four\");\r\n    p3 = new WildcardPermission(\"one:two,three,four:five:six:seven\");\r\n    assertTrue(p1.implies(p2));\r\n    assertTrue(p1.implies(p3));\r\n    assertFalse(p2.implies(p1));\r\n    assertFalse(p3.implies(p1));\r\n    assertTrue(p2.implies(p3));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\shiro\\core\\src\\test\\java\\org\\apache\\shiro\\authz\\permission\\WildcardPermissionTest.java",
  "methodName" : "testListDifferentOrder",
  "sourceCode" : "/**\r\n * Validates WildcardPermissions with that contain the same list parts are equal.\r\n */\r\n@Test\r\nvoid testListDifferentOrder() {\r\n    WildcardPermission p6 = new WildcardPermission(\"one,two:three,four\");\r\n    WildcardPermission p6DiffOrder = new WildcardPermission(\"two,one:four,three\");\r\n    assertEquals(p6, p6DiffOrder);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\shiro\\core\\src\\test\\java\\org\\apache\\shiro\\authz\\permission\\WildcardPermissionTest.java",
  "methodName" : "testWildcards",
  "sourceCode" : "@SuppressWarnings({ \"checkstyle:MultipleVariableDeclarations\", \"checkstyle:MethodLength\" })\r\n@Test\r\nvoid testWildcards() {\r\n    WildcardPermission p1, p2, p3, p4, p5, p6, p7, p8, p9;\r\n    p1 = new WildcardPermission(\"*\");\r\n    p2 = new WildcardPermission(\"one\");\r\n    p3 = new WildcardPermission(\"one:two\");\r\n    p4 = new WildcardPermission(\"one,two:three,four\");\r\n    p5 = new WildcardPermission(\"one,two:three,four,five:six:seven,eight\");\r\n    assertTrue(p1.implies(p2));\r\n    assertTrue(p1.implies(p3));\r\n    assertTrue(p1.implies(p4));\r\n    assertTrue(p1.implies(p5));\r\n    p1 = new WildcardPermission(\"newsletter:*\");\r\n    p2 = new WildcardPermission(\"newsletter:read\");\r\n    p3 = new WildcardPermission(\"newsletter:read,write\");\r\n    p4 = new WildcardPermission(\"newsletter:*\");\r\n    p5 = new WildcardPermission(\"newsletter:*:*\");\r\n    p6 = new WildcardPermission(\"newsletter:*:read\");\r\n    p7 = new WildcardPermission(\"newsletter:write:*\");\r\n    p8 = new WildcardPermission(\"newsletter:read,write:*\");\r\n    p9 = new WildcardPermission(\"newsletter\");\r\n    assertTrue(p1.implies(p2));\r\n    assertTrue(p1.implies(p3));\r\n    assertTrue(p1.implies(p4));\r\n    assertTrue(p1.implies(p5));\r\n    assertTrue(p1.implies(p6));\r\n    assertTrue(p1.implies(p7));\r\n    assertTrue(p1.implies(p8));\r\n    assertTrue(p1.implies(p9));\r\n    p1 = new WildcardPermission(\"newsletter:*:*\");\r\n    assertTrue(p1.implies(p2));\r\n    assertTrue(p1.implies(p3));\r\n    assertTrue(p1.implies(p4));\r\n    assertTrue(p1.implies(p5));\r\n    assertTrue(p1.implies(p6));\r\n    assertTrue(p1.implies(p7));\r\n    assertTrue(p1.implies(p8));\r\n    assertTrue(p1.implies(p9));\r\n    p1 = new WildcardPermission(\"newsletter:*:*:*\");\r\n    assertTrue(p1.implies(p2));\r\n    assertTrue(p1.implies(p3));\r\n    assertTrue(p1.implies(p4));\r\n    assertTrue(p1.implies(p5));\r\n    assertTrue(p1.implies(p6));\r\n    assertTrue(p1.implies(p7));\r\n    assertTrue(p1.implies(p8));\r\n    assertTrue(p1.implies(p9));\r\n    p1 = new WildcardPermission(\"newsletter\");\r\n    assertTrue(p1.implies(p2));\r\n    assertTrue(p1.implies(p3));\r\n    assertTrue(p1.implies(p4));\r\n    assertTrue(p1.implies(p5));\r\n    assertTrue(p1.implies(p6));\r\n    assertTrue(p1.implies(p7));\r\n    assertTrue(p1.implies(p8));\r\n    assertTrue(p1.implies(p9));\r\n    p1 = new WildcardPermission(\"newsletter:*:read\");\r\n    p2 = new WildcardPermission(\"newsletter:123:read\");\r\n    p3 = new WildcardPermission(\"newsletter:123,456:read,write\");\r\n    p4 = new WildcardPermission(\"newsletter:read\");\r\n    p5 = new WildcardPermission(\"newsletter:read,write\");\r\n    p6 = new WildcardPermission(\"newsletter:123:read:write\");\r\n    assertTrue(p1.implies(p2));\r\n    assertFalse(p1.implies(p3));\r\n    assertFalse(p1.implies(p4));\r\n    assertFalse(p1.implies(p5));\r\n    assertTrue(p1.implies(p6));\r\n    p1 = new WildcardPermission(\"newsletter:*:read:*\");\r\n    assertTrue(p1.implies(p2));\r\n    assertTrue(p1.implies(p6));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\shiro\\core\\src\\test\\java\\org\\apache\\shiro\\authz\\permission\\WildcardPermissionTest.java",
  "methodName" : "testToString",
  "sourceCode" : "@Test\r\nvoid testToString() {\r\n    WildcardPermission p1 = new WildcardPermission(\"*\");\r\n    WildcardPermission p2 = new WildcardPermission(\"one\");\r\n    WildcardPermission p3 = new WildcardPermission(\"one:two\");\r\n    WildcardPermission p4 = new WildcardPermission(\"one,two:three,four\");\r\n    WildcardPermission p5 = new WildcardPermission(\"one,two:three,four,five:six:seven,eight\");\r\n    assertEquals(\"*\", p1.toString());\r\n    assertEquals(p1, new WildcardPermission(p1.toString()));\r\n    assertEquals(\"one\", p2.toString());\r\n    assertEquals(p2, new WildcardPermission(p2.toString()));\r\n    assertEquals(\"one:two\", p3.toString());\r\n    assertEquals(p3, new WildcardPermission(p3.toString()));\r\n    assertEquals(\"one,two:three,four\", p4.toString());\r\n    assertEquals(p4, new WildcardPermission(p4.toString()));\r\n    assertEquals(\"one,two:three,four,five:six:seven,eight\", p5.toString());\r\n    assertEquals(p5, new WildcardPermission(p5.toString()));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\shiro\\core\\src\\test\\java\\org\\apache\\shiro\\authz\\permission\\WildcardPermissionTest.java",
  "methodName" : "testWildcardLeftTermination",
  "sourceCode" : "@SuppressWarnings(\"checkstyle:MultipleVariableDeclarations\")\r\n@Test\r\nvoid testWildcardLeftTermination() {\r\n    WildcardPermission p1, p2, p3, p4;\r\n    p1 = new WildcardPermission(\"one\");\r\n    p2 = new WildcardPermission(\"one:*\");\r\n    p3 = new WildcardPermission(\"one:*:*\");\r\n    p4 = new WildcardPermission(\"one:read\");\r\n    assertTrue(p1.implies(p2));\r\n    assertTrue(p1.implies(p3));\r\n    assertTrue(p1.implies(p4));\r\n    assertTrue(p2.implies(p1));\r\n    assertTrue(p2.implies(p3));\r\n    assertTrue(p2.implies(p4));\r\n    assertTrue(p3.implies(p1));\r\n    assertTrue(p3.implies(p2));\r\n    assertTrue(p3.implies(p4));\r\n    assertFalse(p4.implies(p1));\r\n    assertFalse(p4.implies(p2));\r\n    assertFalse(p4.implies(p3));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\shiro\\core\\src\\test\\java\\org\\apache\\shiro\\concurrent\\SubjectAwareExecutorServiceTest.java",
  "methodName" : "testSubmitRunnable",
  "sourceCode" : "@SuppressWarnings({ \"unchecked\" })\r\n@Test\r\npublic void testSubmitRunnable() {\r\n    ExecutorService mockExecutorService = mock(ExecutorService.class);\r\n    ArgumentCaptor<SubjectRunnable> captor = ArgumentCaptor.forClass(SubjectRunnable.class);\r\n    when(mockExecutorService.submit(captor.capture())).thenReturn(new DummyFuture<>());\r\n    final SubjectAwareExecutorService executor = new SubjectAwareExecutorService(mockExecutorService);\r\n    runWithSubject(subject -> {\r\n        Runnable testRunnable = () -> System.out.println(\"Hello World\");\r\n        executor.submit(testRunnable);\r\n        SubjectRunnable subjectRunnable = captor.getValue();\r\n        assertNotNull(subjectRunnable);\r\n    });\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\shiro\\core\\src\\test\\java\\org\\apache\\shiro\\concurrent\\SubjectAwareExecutorTest.java",
  "methodName" : "testExecute",
  "sourceCode" : "@Test\r\npublic void testExecute() {\r\n    Executor targetMockExecutor = mock(Executor.class);\r\n    final SubjectAwareExecutor executor = new SubjectAwareExecutor(targetMockExecutor);\r\n    Runnable work = () -> System.out.println(\"Hello World\");\r\n    runWithSubject(subject -> executor.execute(work));\r\n    //* ensure the target Executor receives a SubjectRunnable instance that retains the subject identity:\r\n    //(this is what verifies the test is valid):\r\n    ArgumentCaptor<SubjectRunnable> subjectRunnableArgumentCaptor = ArgumentCaptor.forClass(SubjectRunnable.class);\r\n    verify(targetMockExecutor).execute(subjectRunnableArgumentCaptor.capture());\r\n    SubjectRunnable subjectRunnable = subjectRunnableArgumentCaptor.getValue();\r\n    assertNotNull(subjectRunnable);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\shiro\\core\\src\\test\\java\\org\\apache\\shiro\\ExceptionTest.java",
  "methodName" : "testNoArgConstructor",
  "sourceCode" : "@Test\r\nvoid testNoArgConstructor() {\r\n    ClassUtils.newInstance(getExceptionClass());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\shiro\\core\\src\\test\\java\\org\\apache\\shiro\\ExceptionTest.java",
  "methodName" : "testMsgConstructor",
  "sourceCode" : "@Test\r\nvoid testMsgConstructor() throws Exception {\r\n    ClassUtils.newInstance(getExceptionClass(), \"Msg\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\shiro\\core\\src\\test\\java\\org\\apache\\shiro\\ExceptionTest.java",
  "methodName" : "testCauseConstructor",
  "sourceCode" : "@Test\r\nvoid testCauseConstructor() throws Exception {\r\n    ClassUtils.newInstance(getExceptionClass(), new Throwable());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\shiro\\core\\src\\test\\java\\org\\apache\\shiro\\ExceptionTest.java",
  "methodName" : "testMsgCauseConstructor",
  "sourceCode" : "@Test\r\nvoid testMsgCauseConstructor() {\r\n    ClassUtils.newInstance(getExceptionClass(), \"Msg\", new Throwable());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\shiro\\core\\src\\test\\java\\org\\apache\\shiro\\jndi\\JndiObjectFactoryTest.java",
  "methodName" : "testGetInstanceWithType",
  "sourceCode" : "@Test\r\nvoid testGetInstanceWithType() throws Exception {\r\n    final String name = \"my/jndi/resource\";\r\n    final String returnValue = \"jndiString\";\r\n    JndiObjectFactory<String> underTest = new JndiObjectFactory<String>() {\r\n\r\n        @Override\r\n        protected Object lookup(String jndiName, Class requiredType) throws NamingException {\r\n            assertEquals(name, jndiName);\r\n            assertEquals(String.class, requiredType);\r\n            return new String(returnValue);\r\n        }\r\n    };\r\n    underTest.setRequiredType(String.class);\r\n    underTest.setResourceName(name);\r\n    assertEquals(returnValue, underTest.getInstance());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\shiro\\core\\src\\test\\java\\org\\apache\\shiro\\jndi\\JndiObjectFactoryTest.java",
  "methodName" : "testGetInstanceNoType",
  "sourceCode" : "@Test\r\nvoid testGetInstanceNoType() throws Exception {\r\n    final String name = \"my/jndi/resource\";\r\n    final String returnValue = \"jndiString\";\r\n    JndiObjectFactory<String> underTest = new JndiObjectFactory<String>() {\r\n\r\n        @Override\r\n        protected Object lookup(String jndiName) throws NamingException {\r\n            assertEquals(name, jndiName);\r\n            return new String(returnValue);\r\n        }\r\n    };\r\n    underTest.setResourceName(name);\r\n    assertEquals(returnValue, underTest.getInstance());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\shiro\\core\\src\\test\\java\\org\\apache\\shiro\\jndi\\JndiObjectFactoryTest.java",
  "methodName" : "testJndiLookupFailsWithType",
  "sourceCode" : "@Test\r\nvoid testJndiLookupFailsWithType() throws Exception {\r\n    assertThrows(IllegalStateException.class, () -> {\r\n        final String name = \"my/jndi/resource\";\r\n        JndiObjectFactory<String> underTest = new JndiObjectFactory<String>() {\r\n\r\n            @Override\r\n            protected Object lookup(String jndiName, Class requiredType) throws NamingException {\r\n                throw new NamingException(\"No resource named \" + jndiName);\r\n            }\r\n        };\r\n        underTest.setResourceName(name);\r\n        underTest.setRequiredType(String.class);\r\n        underTest.getInstance();\r\n    });\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\shiro\\core\\src\\test\\java\\org\\apache\\shiro\\jndi\\JndiObjectFactoryTest.java",
  "methodName" : "testJndiLookupFailsNoType",
  "sourceCode" : "@Test\r\nvoid testJndiLookupFailsNoType() throws Exception {\r\n    assertThrows(IllegalStateException.class, () -> {\r\n        final String name = \"my/jndi/resource\";\r\n        JndiObjectFactory<String> underTest = new JndiObjectFactory<String>() {\r\n\r\n            @Override\r\n            protected Object lookup(String jndiName) throws NamingException {\r\n                throw new NamingException(\"No resource named \" + jndiName);\r\n            }\r\n        };\r\n        underTest.setResourceName(name);\r\n        underTest.getInstance();\r\n    });\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\shiro\\core\\src\\test\\java\\org\\apache\\shiro\\mgt\\AbstractRememberMeManagerTest.java",
  "methodName" : "testGetRememberedPrincipalsWithEmptySerializedBytes",
  "sourceCode" : "/**\r\n * Tests the {@link AbstractRememberMeManager#getRememberedPrincipals(SubjectContext)} method\r\n * implementation when the internal\r\n * {@link AbstractRememberMeManager#getRememberedSerializedIdentity(SubjectContext)} method\r\n * returns null or empty bytes.\r\n */\r\n@Test\r\nvoid testGetRememberedPrincipalsWithEmptySerializedBytes() {\r\n    AbstractRememberMeManager rmm = new DummyRememberMeManager();\r\n    //Since the dummy's getRememberedSerializedIdentity implementation returns an empty byte\r\n    //array, we should be ok:\r\n    PrincipalCollection principals = rmm.getRememberedPrincipals(new DefaultSubjectContext());\r\n    assertNull(principals);\r\n    //try with a null return value too:\r\n    rmm = new DummyRememberMeManager() {\r\n\r\n        @Override\r\n        protected byte[] getRememberedSerializedIdentity(SubjectContext subjectContext) {\r\n            return null;\r\n        }\r\n    };\r\n    principals = rmm.getRememberedPrincipals(new DefaultSubjectContext());\r\n    assertNull(principals);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\shiro\\core\\src\\test\\java\\org\\apache\\shiro\\mgt\\DefaultSecurityManagerTest.java",
  "methodName" : "testDefaultConfig",
  "sourceCode" : "@Test\r\nvoid testDefaultConfig() {\r\n    Subject subject = SecurityUtils.getSubject();\r\n    AuthenticationToken token = new UsernamePasswordToken(\"guest\", \"guest\");\r\n    subject.login(token);\r\n    assertTrue(subject.isAuthenticated());\r\n    assertEquals(\"guest\", subject.getPrincipal());\r\n    assertTrue(subject.hasRole(\"guest\"));\r\n    Session session = subject.getSession();\r\n    session.setAttribute(\"key\", \"value\");\r\n    assertEquals(\"value\", session.getAttribute(\"key\"));\r\n    subject.logout();\r\n    assertNull(subject.getSession(false));\r\n    assertNull(subject.getPrincipal());\r\n    assertNull(subject.getPrincipals());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\shiro\\core\\src\\test\\java\\org\\apache\\shiro\\mgt\\DefaultSecurityManagerTest.java",
  "methodName" : "testAutoCreateSessionAfterInvalidation",
  "sourceCode" : "/**\r\n * Test that validates functionality for issue\r\n * <a href=\"https://issues.apache.org/jira/browse/JSEC-46\">JSEC-46</a>\r\n */\r\n@SuppressWarnings(\"checkstyle:MagicNumber\")\r\n@Test\r\nvoid testAutoCreateSessionAfterInvalidation() {\r\n    Subject subject = SecurityUtils.getSubject();\r\n    Session session = subject.getSession();\r\n    String key = \"foo\";\r\n    String value1 = \"bar\";\r\n    session.setAttribute(key, value1);\r\n    assertEquals(value1, session.getAttribute(key));\r\n    //now test auto creation:\r\n    session.setTimeout(50);\r\n    try {\r\n        Thread.sleep(150);\r\n    } catch (InterruptedException e) {\r\n        //ignored\r\n    }\r\n    try {\r\n        session.setTimeout(AbstractValidatingSessionManager.DEFAULT_GLOBAL_SESSION_TIMEOUT);\r\n        fail(\"Session should have expired.\");\r\n    } catch (ExpiredSessionException expected) {\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\shiro\\core\\src\\test\\java\\org\\apache\\shiro\\mgt\\DefaultSecurityManagerTest.java",
  "methodName" : "testSubjectReuseAfterLogout",
  "sourceCode" : "/**\r\n * Test that validates functionality for issue\r\n * <a href=\"https://issues.apache.org/jira/browse/JSEC-22\">JSEC-22</a>\r\n */\r\n@Test\r\nvoid testSubjectReuseAfterLogout() {\r\n    Subject subject = SecurityUtils.getSubject();\r\n    AuthenticationToken token = new UsernamePasswordToken(\"guest\", \"guest\");\r\n    subject.login(token);\r\n    assertTrue(subject.isAuthenticated());\r\n    assertEquals(\"guest\", subject.getPrincipal());\r\n    assertTrue(subject.hasRole(\"guest\"));\r\n    Session session = subject.getSession();\r\n    Serializable firstSessionId = session.getId();\r\n    session.setAttribute(\"key\", \"value\");\r\n    assertEquals(\"value\", session.getAttribute(\"key\"));\r\n    subject.logout();\r\n    assertNull(subject.getSession(false));\r\n    assertNull(subject.getPrincipal());\r\n    assertNull(subject.getPrincipals());\r\n    subject.login(new UsernamePasswordToken(\"lonestarr\", \"vespa\"));\r\n    assertTrue(subject.isAuthenticated());\r\n    assertEquals(\"lonestarr\", subject.getPrincipal());\r\n    assertTrue(subject.hasRole(\"goodguy\"));\r\n    assertNotNull(subject.getSession());\r\n    assertNotEquals(firstSessionId, subject.getSession().getId());\r\n    subject.logout();\r\n    assertNull(subject.getSession(false));\r\n    assertNull(subject.getPrincipal());\r\n    assertNull(subject.getPrincipals());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\shiro\\core\\src\\test\\java\\org\\apache\\shiro\\mgt\\DefaultSecurityManagerTest.java",
  "methodName" : "testNewSubjectWithoutThreadSecurityManager",
  "sourceCode" : "/**\r\n * Test ensures that a {@link Subject#login(AuthenticationToken)} first uses\r\n * the {@link SecurityManager} passed to its {@link Subject.Builder}\r\n * (if one was) instead of the one found in either the {@link ThreadContext}\r\n * or statically in {@link SecurityUtils}, either of which may not exist.\r\n * <a href=\"https://issues.apache.org/jira/browse/SHIRO-457\">SHIRO-457</a>\r\n */\r\n@Test\r\nvoid testNewSubjectWithoutThreadSecurityManager() {\r\n    // Ensure no fallback sm exists in thread context or statically\r\n    SecurityUtils.setSecurityManager(null);\r\n    try {\r\n        SecurityUtils.getSecurityManager();\r\n    } catch (UnavailableSecurityManagerException e) {\r\n        assertTrue(e.getMessage().startsWith(\"No SecurityManager accessible\"));\r\n    }\r\n    // Specify sm to use and build subject with\r\n    DelegatingSubject subject = (DelegatingSubject) (new Subject.Builder(sm)).buildSubject();\r\n    // Login and verify specified sm is used and no error thrown\r\n    AuthenticationToken token = new UsernamePasswordToken(\"guest\", \"guest\");\r\n    subject.login(token);\r\n    assertEquals(sm, subject.getSecurityManager());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\shiro\\core\\src\\test\\java\\org\\apache\\shiro\\mgt\\DefaultSecurityManagerTest.java",
  "methodName" : "testNewSubjectWithoutSessionCreationEnabled",
  "sourceCode" : "@Test\r\nvoid testNewSubjectWithoutSessionCreationEnabled() {\r\n    SimplePrincipalCollection principals = new SimplePrincipalCollection(\"guest\", \"asd\");\r\n    // this tests that calling `buildSubject` doesn't throw an exception due to session-creation being disabled\r\n    Subject subject = new Subject.Builder().principals(principals).sessionCreationEnabled(false).buildSubject();\r\n    assertEquals(subject.getPrincipal(), \"guest\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\shiro\\core\\src\\test\\java\\org\\apache\\shiro\\mgt\\DefaultSecurityManagerTest.java",
  "methodName" : "testNewSubjectWithSubjectFactoryThatDisablesSessionCreation",
  "sourceCode" : "@Test\r\nvoid testNewSubjectWithSubjectFactoryThatDisablesSessionCreation() {\r\n    ((DefaultSecurityManager) SecurityUtils.getSecurityManager()).setSubjectFactory(new SessionCreationDisabledSubjectFactory());\r\n    SimplePrincipalCollection principals = new SimplePrincipalCollection(\"guest\", \"asd\");\r\n    // this tests that calling `buildSubject` doesn't throw an exception due to session-creation being disabled\r\n    Subject subject = new Subject.Builder().principals(principals).buildSubject();\r\n    assertEquals(subject.getPrincipal(), \"guest\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\shiro\\core\\src\\test\\java\\org\\apache\\shiro\\mgt\\VMSingletonDefaultSecurityManagerTest.java",
  "methodName" : "testVMSingleton",
  "sourceCode" : "@Test\r\nvoid testVMSingleton() {\r\n    DefaultSecurityManager sm = new DefaultSecurityManager();\r\n    Ini ini = new Ini();\r\n    Ini.Section section = ini.addSection(IniRealm.USERS_SECTION_NAME);\r\n    section.put(\"guest\", \"guest\");\r\n    sm.setRealm(new IniRealm(ini));\r\n    SecurityUtils.setSecurityManager(sm);\r\n    try {\r\n        Subject subject = SecurityUtils.getSubject();\r\n        AuthenticationToken token = new UsernamePasswordToken(\"guest\", \"guest\");\r\n        subject.login(token);\r\n        subject.getSession().setAttribute(\"key\", \"value\");\r\n        assertEquals(\"value\", subject.getSession().getAttribute(\"key\"));\r\n        subject = SecurityUtils.getSubject();\r\n        assertTrue(subject.isAuthenticated());\r\n        assertEquals(\"value\", subject.getSession().getAttribute(\"key\"));\r\n    } finally {\r\n        sm.destroy();\r\n        //SHIRO-270:\r\n        SecurityUtils.setSecurityManager(null);\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\shiro\\core\\src\\test\\java\\org\\apache\\shiro\\realm\\activedirectory\\ActiveDirectoryRealmTest.java",
  "methodName" : "testDefaultConfig",
  "sourceCode" : "@Test\r\nvoid testDefaultConfig() {\r\n    String localhost = \"localhost\";\r\n    Subject subject = SecurityUtils.getSubject();\r\n    subject.login(new UsernamePasswordToken(USERNAME, PASSWORD, localhost));\r\n    assertTrue(subject.isAuthenticated());\r\n    assertTrue(subject.hasRole(ROLE));\r\n    UsernamePrincipal usernamePrincipal = subject.getPrincipals().oneByType(UsernamePrincipal.class);\r\n    assertEquals(USERNAME, usernamePrincipal.getUsername());\r\n    UserIdPrincipal userIdPrincipal = subject.getPrincipals().oneByType(UserIdPrincipal.class);\r\n    assertEquals(USER_ID, userIdPrincipal.getUserId());\r\n    assertTrue(realm.hasRole(subject.getPrincipals(), ROLE));\r\n    subject.logout();\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\shiro\\core\\src\\test\\java\\org\\apache\\shiro\\realm\\activedirectory\\ActiveDirectoryRealmTest.java",
  "methodName" : "testExistingUserSuffix",
  "sourceCode" : "@Test\r\nvoid testExistingUserSuffix() throws Exception {\r\n    // suffix case matches configure suffix\r\n    assertExistingUserSuffix(USERNAME, \"testuser@ExAmple.COM\");\r\n    // suffix matches user entry\r\n    assertExistingUserSuffix(USERNAME + \"@example.com\", \"testuser@example.com\");\r\n    assertExistingUserSuffix(USERNAME + \"@EXAMPLE.com\", \"testuser@EXAMPLE.com\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\shiro\\core\\src\\test\\java\\org\\apache\\shiro\\realm\\AuthorizingRealmTest.java",
  "methodName" : "testDefaultConfig",
  "sourceCode" : "@Test\r\nvoid testDefaultConfig() {\r\n    AuthenticationInfo info = realm.getAuthenticationInfo(new UsernamePasswordToken(USERNAME, PASSWORD, localhost));\r\n    assertNotNull(info);\r\n    assertTrue(realm.hasRole(info.getPrincipals(), ROLE));\r\n    Object principal = info.getPrincipals().getPrimaryPrincipal();\r\n    assertTrue(principal instanceof UserIdPrincipal);\r\n    UsernamePrincipal usernamePrincipal = info.getPrincipals().oneByType(UsernamePrincipal.class);\r\n    assertEquals(USERNAME, usernamePrincipal.getUsername());\r\n    UserIdPrincipal userIdPrincipal = info.getPrincipals().oneByType(UserIdPrincipal.class);\r\n    assertEquals(USER_ID, userIdPrincipal.getUserId());\r\n    String stringPrincipal = info.getPrincipals().oneByType(String.class);\r\n    assertEquals(USER_ID + USERNAME, stringPrincipal);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\shiro\\core\\src\\test\\java\\org\\apache\\shiro\\realm\\AuthorizingRealmTest.java",
  "methodName" : "testCreateAccountOverride",
  "sourceCode" : "@Test\r\nvoid testCreateAccountOverride() {\r\n    AuthorizingRealm realm = new AllowAllRealm() {\r\n\r\n        @Override\r\n        protected AuthenticationInfo buildAuthenticationInfo(Object principal, Object credentials) {\r\n            String username = (String) principal;\r\n            UsernamePrincipal customPrincipal = new UsernamePrincipal(username);\r\n            return new SimpleAccount(customPrincipal, credentials, getName());\r\n        }\r\n    };\r\n    AuthenticationInfo info = realm.getAuthenticationInfo(new UsernamePasswordToken(USERNAME, PASSWORD, localhost));\r\n    assertNotNull(info);\r\n    assertTrue(realm.hasRole(info.getPrincipals(), ROLE));\r\n    Object principal = info.getPrincipals().getPrimaryPrincipal();\r\n    assertTrue(principal instanceof UsernamePrincipal);\r\n    assertEquals(USERNAME, ((UsernamePrincipal) principal).getUsername());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\shiro\\core\\src\\test\\java\\org\\apache\\shiro\\realm\\AuthorizingRealmTest.java",
  "methodName" : "testNullAuthzInfo",
  "sourceCode" : "@SuppressWarnings(\"checkstyle:MethodLength\")\r\n@Test\r\nvoid testNullAuthzInfo() {\r\n    AuthorizingRealm realm = new AuthorizingRealm() {\r\n\r\n        protected AuthorizationInfo doGetAuthorizationInfo(PrincipalCollection principals) {\r\n            return null;\r\n        }\r\n\r\n        protected AuthenticationInfo doGetAuthenticationInfo(AuthenticationToken token) throws AuthenticationException {\r\n            return null;\r\n        }\r\n    };\r\n    Principal principal = new UsernamePrincipal(\"blah\");\r\n    PrincipalCollection pCollection = new SimplePrincipalCollection(principal, \"nullAuthzRealm\");\r\n    List<Permission> permList = new ArrayList<Permission>();\r\n    permList.add(new WildcardPermission(\"stringPerm1\"));\r\n    permList.add(new WildcardPermission(\"stringPerm2\"));\r\n    List<String> roleList = new ArrayList<String>();\r\n    roleList.add(\"role1\");\r\n    roleList.add(\"role2\");\r\n    boolean thrown = false;\r\n    try {\r\n        realm.checkPermission(pCollection, \"stringPermission\");\r\n    } catch (UnauthorizedException e) {\r\n        thrown = true;\r\n    }\r\n    assertTrue(thrown);\r\n    thrown = false;\r\n    try {\r\n        realm.checkPermission(pCollection, new WildcardPermission(\"stringPermission\"));\r\n    } catch (UnauthorizedException e) {\r\n        thrown = true;\r\n    }\r\n    assertTrue(thrown);\r\n    thrown = false;\r\n    try {\r\n        realm.checkPermissions(pCollection, \"stringPerm1\", \"stringPerm2\");\r\n    } catch (UnauthorizedException e) {\r\n        thrown = true;\r\n    }\r\n    assertTrue(thrown);\r\n    thrown = false;\r\n    try {\r\n        realm.checkPermissions(pCollection, permList);\r\n    } catch (UnauthorizedException e) {\r\n        thrown = true;\r\n    }\r\n    assertTrue(thrown);\r\n    thrown = false;\r\n    try {\r\n        realm.checkRole(pCollection, \"role1\");\r\n    } catch (UnauthorizedException e) {\r\n        thrown = true;\r\n    }\r\n    assertTrue(thrown);\r\n    thrown = false;\r\n    try {\r\n        realm.checkRoles(pCollection, roleList);\r\n    } catch (UnauthorizedException e) {\r\n        thrown = true;\r\n    }\r\n    assertTrue(thrown);\r\n    assertFalse(realm.hasAllRoles(pCollection, roleList));\r\n    assertFalse(realm.hasRole(pCollection, \"role1\"));\r\n    assertArrayEquals(new boolean[] { false, false }, realm.hasRoles(pCollection, roleList));\r\n    assertFalse(realm.isPermitted(pCollection, \"perm1\"));\r\n    assertFalse(realm.isPermitted(pCollection, new WildcardPermission(\"perm1\")));\r\n    assertArrayEquals(new boolean[] { false, false }, realm.isPermitted(pCollection, \"perm1\", \"perm2\"));\r\n    assertArrayEquals(new boolean[] { false, false }, realm.isPermitted(pCollection, permList));\r\n    assertFalse(realm.isPermittedAll(pCollection, \"perm1\", \"perm2\"));\r\n    assertFalse(realm.isPermittedAll(pCollection, permList));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\shiro\\core\\src\\test\\java\\org\\apache\\shiro\\realm\\AuthorizingRealmTest.java",
  "methodName" : "testRealmWithRolePermissionResolver",
  "sourceCode" : "@Test\r\nvoid testRealmWithRolePermissionResolver() {\r\n    Principal principal = new UsernamePrincipal(\"rolePermResolver\");\r\n    PrincipalCollection pCollection = new SimplePrincipalCollection(principal, \"testRealmWithRolePermissionResolver\");\r\n    AuthorizingRealm realm = new AllowAllRealm();\r\n    realm.setRolePermissionResolver(new RolePermissionResolver() {\r\n\r\n        public Collection<Permission> resolvePermissionsInRole(String roleString) {\r\n            Collection<Permission> permissions = new HashSet<Permission>();\r\n            if (roleString.equals(ROLE)) {\r\n                permissions.add(new WildcardPermission(ROLE + \":perm1\"));\r\n                permissions.add(new WildcardPermission(ROLE + \":perm2\"));\r\n                permissions.add(new WildcardPermission(\"other:*:foo\"));\r\n            }\r\n            return permissions;\r\n        }\r\n    });\r\n    assertTrue(realm.hasRole(pCollection, ROLE));\r\n    assertTrue(realm.isPermitted(pCollection, ROLE + \":perm1\"));\r\n    assertTrue(realm.isPermitted(pCollection, ROLE + \":perm2\"));\r\n    assertFalse(realm.isPermitted(pCollection, ROLE + \":perm3\"));\r\n    assertTrue(realm.isPermitted(pCollection, \"other:bar:foo\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\shiro\\core\\src\\test\\java\\org\\apache\\shiro\\realm\\AuthorizingRealmTest.java",
  "methodName" : "testRealmWithEmptyOrNullPermissions",
  "sourceCode" : "@Test\r\nvoid testRealmWithEmptyOrNullPermissions() {\r\n    Principal principal = new UsernamePrincipal(\"rolePermResolver\");\r\n    PrincipalCollection pCollection = new SimplePrincipalCollection(principal, \"testRealmWithRolePermissionResolver\");\r\n    AuthorizingRealm realm = new AllowAllRealm();\r\n    realm.setRolePermissionResolver(new RolePermissionResolver() {\r\n\r\n        public Collection<Permission> resolvePermissionsInRole(String roleString) {\r\n            Collection<Permission> permissions = new HashSet<Permission>();\r\n            if (roleString.equals(ROLE)) {\r\n                permissions.add(new WildcardPermission(ROLE + \":perm1\"));\r\n                permissions.add(new WildcardPermission(ROLE + \":perm2\"));\r\n                permissions.add(new WildcardPermission(ROLE + \": \"));\r\n                permissions.add(new WildcardPermission(ROLE + \":\\t\"));\r\n                permissions.add(new WildcardPermission(\"other:*:foo\"));\r\n            }\r\n            return permissions;\r\n        }\r\n    });\r\n    realm.setPermissionResolver(new WildcardPermissionResolver());\r\n    SimpleAuthorizationInfo authorizationInfo = (SimpleAuthorizationInfo) realm.getAuthorizationInfo(pCollection);\r\n    assertNotNull(authorizationInfo);\r\n    authorizationInfo.addStringPermission(\"\");\r\n    authorizationInfo.addStringPermission(\" \");\r\n    authorizationInfo.addStringPermission(\"\\t\");\r\n    authorizationInfo.addStringPermission(null);\r\n    Collection<Permission> permissions = realm.getPermissions(authorizationInfo);\r\n    assertEquals(4, permissions.size());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\shiro\\core\\src\\test\\java\\org\\apache\\shiro\\realm\\jdbc\\JDBCRealmTest.java",
  "methodName" : "testUnSaltedSuccess",
  "sourceCode" : "@Test\r\nvoid testUnSaltedSuccess() throws Exception {\r\n    String testMethodName = name;\r\n    JdbcRealm realm = realmMap.get(testMethodName);\r\n    createDefaultSchema(testMethodName, false);\r\n    realm.setSaltStyle(JdbcRealm.SaltStyle.NO_SALT);\r\n    Subject.Builder builder = new Subject.Builder(securityManager);\r\n    Subject currentUser = builder.buildSubject();\r\n    UsernamePasswordToken token = new UsernamePasswordToken(username, plainTextPassword);\r\n    currentUser.login(token);\r\n    currentUser.logout();\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\shiro\\core\\src\\test\\java\\org\\apache\\shiro\\realm\\jdbc\\JDBCRealmTest.java",
  "methodName" : "testUnSaltedWrongPassword",
  "sourceCode" : "@Test\r\nvoid testUnSaltedWrongPassword() throws Exception {\r\n    String testMethodName = name;\r\n    JdbcRealm realm = realmMap.get(testMethodName);\r\n    createDefaultSchema(testMethodName, false);\r\n    realm.setSaltStyle(JdbcRealm.SaltStyle.NO_SALT);\r\n    Subject.Builder builder = new Subject.Builder(securityManager);\r\n    Subject currentUser = builder.buildSubject();\r\n    UsernamePasswordToken token = new UsernamePasswordToken(username, \"passwrd\");\r\n    try {\r\n        currentUser.login(token);\r\n    } catch (IncorrectCredentialsException ex) {\r\n        // Expected\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\shiro\\core\\src\\test\\java\\org\\apache\\shiro\\realm\\jdbc\\JDBCRealmTest.java",
  "methodName" : "testUnSaltedMultipleRows",
  "sourceCode" : "@Test\r\nvoid testUnSaltedMultipleRows() throws Exception {\r\n    String testMethodName = name;\r\n    JdbcRealm realm = realmMap.get(testMethodName);\r\n    createDefaultSchema(testMethodName, false);\r\n    realm.setSaltStyle(JdbcRealm.SaltStyle.NO_SALT);\r\n    Connection conn = dsMap.get(testMethodName).getConnection();\r\n    Statement sql = conn.createStatement();\r\n    sql.executeUpdate(\"insert into users values ('\" + username + \"', 'dupe')\");\r\n    Subject.Builder builder = new Subject.Builder(securityManager);\r\n    Subject currentUser = builder.buildSubject();\r\n    UsernamePasswordToken token = new UsernamePasswordToken(username, \"passwrd\");\r\n    try {\r\n        currentUser.login(token);\r\n    } catch (AuthenticationException ex) {\r\n        // Expected\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\shiro\\core\\src\\test\\java\\org\\apache\\shiro\\realm\\jdbc\\JDBCRealmTest.java",
  "methodName" : "testSaltColumnSuccess",
  "sourceCode" : "@Test\r\nvoid testSaltColumnSuccess() throws Exception {\r\n    String testMethodName = name;\r\n    JdbcRealm realm = realmMap.get(testMethodName);\r\n    createSaltColumnSchema(testMethodName, false);\r\n    realm.setSaltStyle(JdbcRealm.SaltStyle.COLUMN);\r\n    realm.setSaltIsBase64Encoded(false);\r\n    Subject.Builder builder = new Subject.Builder(securityManager);\r\n    Subject currentUser = builder.buildSubject();\r\n    UsernamePasswordToken token = new UsernamePasswordToken(username, plainTextPassword);\r\n    currentUser.login(token);\r\n    currentUser.logout();\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\shiro\\core\\src\\test\\java\\org\\apache\\shiro\\realm\\jdbc\\JDBCRealmTest.java",
  "methodName" : "testBase64EncodedSaltColumnSuccess",
  "sourceCode" : "@Test\r\nvoid testBase64EncodedSaltColumnSuccess() throws Exception {\r\n    String testMethodName = name;\r\n    JdbcRealm realm = realmMap.get(testMethodName);\r\n    createSaltColumnSchema(testMethodName, true);\r\n    realm.setSaltStyle(JdbcRealm.SaltStyle.COLUMN);\r\n    Subject.Builder builder = new Subject.Builder(securityManager);\r\n    Subject currentUser = builder.buildSubject();\r\n    UsernamePasswordToken token = new UsernamePasswordToken(username, plainTextPassword);\r\n    currentUser.login(token);\r\n    currentUser.logout();\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\shiro\\core\\src\\test\\java\\org\\apache\\shiro\\realm\\jdbc\\JDBCRealmTest.java",
  "methodName" : "testSaltColumnWrongPassword",
  "sourceCode" : "@Test\r\nvoid testSaltColumnWrongPassword() throws Exception {\r\n    String testMethodName = name;\r\n    JdbcRealm realm = realmMap.get(testMethodName);\r\n    createSaltColumnSchema(testMethodName, false);\r\n    realm.setSaltStyle(JdbcRealm.SaltStyle.COLUMN);\r\n    realm.setSaltIsBase64Encoded(false);\r\n    Subject.Builder builder = new Subject.Builder(securityManager);\r\n    Subject currentUser = builder.buildSubject();\r\n    UsernamePasswordToken token = new UsernamePasswordToken(username, \"passwrd\");\r\n    try {\r\n        currentUser.login(token);\r\n    } catch (IncorrectCredentialsException ex) {\r\n        // Expected\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\shiro\\core\\src\\test\\java\\org\\apache\\shiro\\realm\\jdbc\\JDBCRealmTest.java",
  "methodName" : "testBase64SaltColumnWrongPassword",
  "sourceCode" : "@Test\r\nvoid testBase64SaltColumnWrongPassword() throws Exception {\r\n    String testMethodName = name;\r\n    JdbcRealm realm = realmMap.get(testMethodName);\r\n    createSaltColumnSchema(testMethodName, true);\r\n    realm.setSaltStyle(JdbcRealm.SaltStyle.COLUMN);\r\n    realm.setSaltIsBase64Encoded(false);\r\n    Subject.Builder builder = new Subject.Builder(securityManager);\r\n    Subject currentUser = builder.buildSubject();\r\n    UsernamePasswordToken token = new UsernamePasswordToken(username, \"passwrd\");\r\n    try {\r\n        currentUser.login(token);\r\n    } catch (IncorrectCredentialsException ex) {\r\n        // Expected\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\shiro\\core\\src\\test\\java\\org\\apache\\shiro\\realm\\jdbc\\JDBCRealmTest.java",
  "methodName" : "testExternalSuccess",
  "sourceCode" : "@Test\r\nvoid testExternalSuccess() throws Exception {\r\n    String testMethodName = name;\r\n    JdbcRealm realm = realmMap.get(testMethodName);\r\n    createDefaultSchema(testMethodName, true);\r\n    realm.setSaltStyle(JdbcRealm.SaltStyle.EXTERNAL);\r\n    Subject.Builder builder = new Subject.Builder(securityManager);\r\n    Subject currentUser = builder.buildSubject();\r\n    UsernamePasswordToken token = new UsernamePasswordToken(username, plainTextPassword);\r\n    currentUser.login(token);\r\n    currentUser.logout();\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\shiro\\core\\src\\test\\java\\org\\apache\\shiro\\realm\\jdbc\\JDBCRealmTest.java",
  "methodName" : "testExternalWrongPassword",
  "sourceCode" : "@Test\r\nvoid testExternalWrongPassword() throws Exception {\r\n    String testMethodName = name;\r\n    JdbcRealm realm = realmMap.get(testMethodName);\r\n    createDefaultSchema(testMethodName, true);\r\n    realm.setSaltStyle(JdbcRealm.SaltStyle.EXTERNAL);\r\n    Subject.Builder builder = new Subject.Builder(securityManager);\r\n    Subject currentUser = builder.buildSubject();\r\n    UsernamePasswordToken token = new UsernamePasswordToken(username, \"passwrd\");\r\n    try {\r\n        currentUser.login(token);\r\n    } catch (IncorrectCredentialsException ex) {\r\n        // Expected\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\shiro\\core\\src\\test\\java\\org\\apache\\shiro\\realm\\jdbc\\JDBCRealmTest.java",
  "methodName" : "testRolePresent",
  "sourceCode" : "@Test\r\nvoid testRolePresent() throws Exception {\r\n    String testMethodName = name;\r\n    JdbcRealm realm = realmMap.get(testMethodName);\r\n    createDefaultSchema(testMethodName, false);\r\n    realm.setSaltStyle(JdbcRealm.SaltStyle.NO_SALT);\r\n    Subject.Builder builder = new Subject.Builder(securityManager);\r\n    Subject currentUser = builder.buildSubject();\r\n    UsernamePasswordToken token = new UsernamePasswordToken(username, plainTextPassword);\r\n    currentUser.login(token);\r\n    assertTrue(currentUser.hasRole(testRole));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\shiro\\core\\src\\test\\java\\org\\apache\\shiro\\realm\\jdbc\\JDBCRealmTest.java",
  "methodName" : "testRoleNotPresent",
  "sourceCode" : "@Test\r\nvoid testRoleNotPresent() throws Exception {\r\n    String testMethodName = name;\r\n    JdbcRealm realm = realmMap.get(testMethodName);\r\n    createDefaultSchema(testMethodName, false);\r\n    realm.setSaltStyle(JdbcRealm.SaltStyle.NO_SALT);\r\n    Subject.Builder builder = new Subject.Builder(securityManager);\r\n    Subject currentUser = builder.buildSubject();\r\n    UsernamePasswordToken token = new UsernamePasswordToken(username, plainTextPassword);\r\n    currentUser.login(token);\r\n    assertFalse(currentUser.hasRole(\"Game Overall Director\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\shiro\\core\\src\\test\\java\\org\\apache\\shiro\\realm\\jdbc\\JDBCRealmTest.java",
  "methodName" : "testPermissionPresent",
  "sourceCode" : "@Test\r\nvoid testPermissionPresent() throws Exception {\r\n    String testMethodName = name;\r\n    JdbcRealm realm = realmMap.get(testMethodName);\r\n    createDefaultSchema(testMethodName, false);\r\n    realm.setSaltStyle(JdbcRealm.SaltStyle.NO_SALT);\r\n    realm.setPermissionsLookupEnabled(true);\r\n    Subject.Builder builder = new Subject.Builder(securityManager);\r\n    Subject currentUser = builder.buildSubject();\r\n    UsernamePasswordToken token = new UsernamePasswordToken(username, plainTextPassword);\r\n    currentUser.login(token);\r\n    assertTrue(currentUser.isPermitted(testPermissionString));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\shiro\\core\\src\\test\\java\\org\\apache\\shiro\\realm\\jdbc\\JDBCRealmTest.java",
  "methodName" : "testPermissionNotPresent",
  "sourceCode" : "@Test\r\nvoid testPermissionNotPresent() throws Exception {\r\n    String testMethodName = name;\r\n    JdbcRealm realm = realmMap.get(testMethodName);\r\n    createDefaultSchema(testMethodName, false);\r\n    realm.setSaltStyle(JdbcRealm.SaltStyle.NO_SALT);\r\n    realm.setPermissionsLookupEnabled(true);\r\n    Subject.Builder builder = new Subject.Builder(securityManager);\r\n    Subject currentUser = builder.buildSubject();\r\n    UsernamePasswordToken token = new UsernamePasswordToken(username, plainTextPassword);\r\n    currentUser.login(token);\r\n    assertFalse(currentUser.isPermitted(\"testDomain:testTarget:specialAction\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\shiro\\core\\src\\test\\java\\org\\apache\\shiro\\realm\\ldap\\DefaultLdapRealmTest.java",
  "methodName" : "testDefaultInstance",
  "sourceCode" : "@Test\r\nvoid testDefaultInstance() {\r\n    assertTrue(realm.getCredentialsMatcher() instanceof AllowAllCredentialsMatcher);\r\n    assertEquals(AuthenticationToken.class, realm.getAuthenticationTokenClass());\r\n    assertTrue(realm.getContextFactory() instanceof JndiLdapContextFactory);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\shiro\\core\\src\\test\\java\\org\\apache\\shiro\\realm\\ldap\\DefaultLdapRealmTest.java",
  "methodName" : "testSetUserDnTemplateNull",
  "sourceCode" : "@Test\r\nvoid testSetUserDnTemplateNull() {\r\n    assertThrows(IllegalArgumentException.class, () -> {\r\n        realm.setUserDnTemplate(null);\r\n    });\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\shiro\\core\\src\\test\\java\\org\\apache\\shiro\\realm\\ldap\\DefaultLdapRealmTest.java",
  "methodName" : "testSetUserDnTemplateEmpty",
  "sourceCode" : "@Test\r\nvoid testSetUserDnTemplateEmpty() {\r\n    assertThrows(IllegalArgumentException.class, () -> {\r\n        realm.setUserDnTemplate(\"  \");\r\n    });\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\shiro\\core\\src\\test\\java\\org\\apache\\shiro\\realm\\ldap\\DefaultLdapRealmTest.java",
  "methodName" : "testSetUserDnTemplateWithoutToken",
  "sourceCode" : "@Test\r\nvoid testSetUserDnTemplateWithoutToken() {\r\n    assertThrows(IllegalArgumentException.class, () -> {\r\n        realm.setUserDnTemplate(\"uid=,ou=users,dc=mycompany,dc=com\");\r\n    });\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\shiro\\core\\src\\test\\java\\org\\apache\\shiro\\realm\\ldap\\DefaultLdapRealmTest.java",
  "methodName" : "testUserDnTemplate",
  "sourceCode" : "@Test\r\nvoid testUserDnTemplate() {\r\n    String template = \"uid={0},ou=users,dc=mycompany,dc=com\";\r\n    realm.setUserDnTemplate(template);\r\n    assertEquals(template, realm.getUserDnTemplate());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\shiro\\core\\src\\test\\java\\org\\apache\\shiro\\realm\\ldap\\DefaultLdapRealmTest.java",
  "methodName" : "testUserDnTemplateSubstitution",
  "sourceCode" : "@Test\r\nvoid testUserDnTemplateSubstitution() throws NamingException {\r\n    realm.setUserDnTemplate(\"uid={0},ou=users,dc=mycompany,dc=com\");\r\n    LdapContextFactory factory = createMock(LdapContextFactory.class);\r\n    realm.setContextFactory(factory);\r\n    Object expectedPrincipal = \"uid=jsmith,ou=users,dc=mycompany,dc=com\";\r\n    expect(factory.getLdapContext(eq(expectedPrincipal), isA(Object.class))).andReturn(createNiceMock(LdapContext.class));\r\n    replay(factory);\r\n    realm.getAuthenticationInfo(new UsernamePasswordToken(\"jsmith\", \"secret\"));\r\n    verify(factory);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\shiro\\core\\src\\test\\java\\org\\apache\\shiro\\realm\\ldap\\DefaultLdapRealmTest.java",
  "methodName" : "testGetAuthenticationInfoNamingAuthenticationException",
  "sourceCode" : "@Test\r\nvoid testGetAuthenticationInfoNamingAuthenticationException() throws NamingException {\r\n    assertThrows(AuthenticationException.class, () -> {\r\n        realm.setUserDnTemplate(\"uid={0},ou=users,dc=mycompany,dc=com\");\r\n        LdapContextFactory factory = createMock(LdapContextFactory.class);\r\n        realm.setContextFactory(factory);\r\n        expect(factory.getLdapContext(isA(Object.class), isA(Object.class))).andThrow(new javax.naming.AuthenticationException(\"LDAP Authentication failed.\"));\r\n        replay(factory);\r\n        realm.getAuthenticationInfo(new UsernamePasswordToken(\"jsmith\", \"secret\"));\r\n    });\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\shiro\\core\\src\\test\\java\\org\\apache\\shiro\\realm\\ldap\\DefaultLdapRealmTest.java",
  "methodName" : "testGetAuthenticationInfoNamingException",
  "sourceCode" : "@Test\r\nvoid testGetAuthenticationInfoNamingException() throws NamingException {\r\n    assertThrows(AuthenticationException.class, () -> {\r\n        realm.setUserDnTemplate(\"uid={0},ou=users,dc=mycompany,dc=com\");\r\n        LdapContextFactory factory = createMock(LdapContextFactory.class);\r\n        realm.setContextFactory(factory);\r\n        expect(factory.getLdapContext(isA(Object.class), isA(Object.class))).andThrow(new NamingException(\"Communication error.\"));\r\n        replay(factory);\r\n        realm.getAuthenticationInfo(new UsernamePasswordToken(\"jsmith\", \"secret\"));\r\n    });\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\shiro\\core\\src\\test\\java\\org\\apache\\shiro\\realm\\ldap\\DefaultLdapRealmTest.java",
  "methodName" : "testGetAuthenticationInfoNonSimpleToken",
  "sourceCode" : "/**\r\n * This test simulates that if a non-String principal (i.e. not a username) is passed as the LDAP principal, that\r\n * it is not altered into a User DN and is passed as-is.  This will allow principals to be things like X.509\r\n * certificates as well instead of only strings.\r\n *\r\n * @throws NamingException not thrown\r\n */\r\n@Test\r\nvoid testGetAuthenticationInfoNonSimpleToken() throws NamingException {\r\n    realm.setUserDnTemplate(\"uid={0},ou=users,dc=mycompany,dc=com\");\r\n    LdapContextFactory factory = createMock(LdapContextFactory.class);\r\n    realm.setContextFactory(factory);\r\n    final UUID userId = UUID.randomUUID();\r\n    //ensure the userId is passed as-is:\r\n    expect(factory.getLdapContext(eq(userId), isA(Object.class))).andReturn(createNiceMock(LdapContext.class));\r\n    replay(factory);\r\n    realm.getAuthenticationInfo(new AuthenticationToken() {\r\n\r\n        public Object getPrincipal() {\r\n            return userId;\r\n        }\r\n\r\n        public Object getCredentials() {\r\n            return \"secret\";\r\n        }\r\n    });\r\n    verify(factory);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\shiro\\core\\src\\test\\java\\org\\apache\\shiro\\realm\\ldap\\DefaultLdapRealmTest.java",
  "methodName" : "testGetUserDnNullArgument",
  "sourceCode" : "@Test\r\nvoid testGetUserDnNullArgument() {\r\n    assertThrows(IllegalArgumentException.class, () -> {\r\n        realm.getUserDn(null);\r\n    });\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\shiro\\core\\src\\test\\java\\org\\apache\\shiro\\realm\\ldap\\DefaultLdapRealmTest.java",
  "methodName" : "testGetUserDnWithOutPrefixAndSuffix",
  "sourceCode" : "@Test\r\nvoid testGetUserDnWithOutPrefixAndSuffix() {\r\n    realm = new DefaultLdapRealm() {\r\n\r\n        @Override\r\n        protected String getUserDnPrefix() {\r\n            return null;\r\n        }\r\n\r\n        @Override\r\n        protected String getUserDnSuffix() {\r\n            return null;\r\n        }\r\n    };\r\n    String principal = \"foo\";\r\n    String userDn = realm.getUserDn(principal);\r\n    assertEquals(principal, userDn);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\shiro\\core\\src\\test\\java\\org\\apache\\shiro\\realm\\ldap\\JndiLdapContextFactoryTest.java",
  "methodName" : "testGetLdapContext",
  "sourceCode" : "/**\r\n * This is the only test that does not fake the JNDI environment.  It is provided for 100% test coverage.\r\n *\r\n * @throws NamingException thrown because the host is always broken.\r\n */\r\n@Test\r\nvoid testGetLdapContext() throws NamingException {\r\n    assertThrows(NamingException.class, () -> {\r\n        factory = new JndiLdapContextFactory();\r\n        //garbage URL to test that the context is being created, but fails:\r\n        String brokenHost = UUID.randomUUID().toString();\r\n        factory.setUrl(\"ldap://\" + brokenHost + \":389\");\r\n        factory.getLdapContext(\"foo\", \"bar\");\r\n    });\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\shiro\\core\\src\\test\\java\\org\\apache\\shiro\\realm\\ldap\\JndiLdapContextFactoryTest.java",
  "methodName" : "testAuthenticationMechanism",
  "sourceCode" : "@Test\r\nvoid testAuthenticationMechanism() {\r\n    String mech = \"MD5-DIGEST\";\r\n    factory.setAuthenticationMechanism(mech);\r\n    assertEquals(mech, factory.getAuthenticationMechanism());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\shiro\\core\\src\\test\\java\\org\\apache\\shiro\\realm\\ldap\\JndiLdapContextFactoryTest.java",
  "methodName" : "testReferral",
  "sourceCode" : "@Test\r\nvoid testReferral() {\r\n    String referral = \"throw\";\r\n    factory.setReferral(referral);\r\n    assertEquals(referral, factory.getReferral());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\shiro\\core\\src\\test\\java\\org\\apache\\shiro\\realm\\ldap\\JndiLdapContextFactoryTest.java",
  "methodName" : "testGetContextFactoryClassName",
  "sourceCode" : "@Test\r\nvoid testGetContextFactoryClassName() {\r\n    assertEquals(JndiLdapContextFactory.DEFAULT_CONTEXT_FACTORY_CLASS_NAME, factory.getContextFactoryClassName());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\shiro\\core\\src\\test\\java\\org\\apache\\shiro\\realm\\ldap\\JndiLdapContextFactoryTest.java",
  "methodName" : "testSetEnvironmentPropertyNull",
  "sourceCode" : "@Test\r\nvoid testSetEnvironmentPropertyNull() {\r\n    factory.setAuthenticationMechanism(\"MD5-DIGEST\");\r\n    factory.setAuthenticationMechanism(null);\r\n    assertNull(factory.getAuthenticationMechanism());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\shiro\\core\\src\\test\\java\\org\\apache\\shiro\\realm\\ldap\\JndiLdapContextFactoryTest.java",
  "methodName" : "testCustomEnvironment",
  "sourceCode" : "@Test\r\nvoid testCustomEnvironment() {\r\n    Map<String, String> map = new HashMap<String, String>();\r\n    map.put(\"foo\", \"bar\");\r\n    factory.setEnvironment(map);\r\n    assertEquals(\"bar\", factory.getEnvironment().get(\"foo\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\shiro\\core\\src\\test\\java\\org\\apache\\shiro\\realm\\ldap\\JndiLdapContextFactoryTest.java",
  "methodName" : "testGetLdapContextWithoutUrl",
  "sourceCode" : "@Test\r\nvoid testGetLdapContextWithoutUrl() throws NamingException {\r\n    assertThrows(IllegalStateException.class, () -> {\r\n        factory.getLdapContext(\"foo\", \"bar\");\r\n    });\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\shiro\\core\\src\\test\\java\\org\\apache\\shiro\\realm\\ldap\\JndiLdapContextFactoryTest.java",
  "methodName" : "testGetLdapContextDefault",
  "sourceCode" : "@Test\r\nvoid testGetLdapContextDefault() throws NamingException {\r\n    factory = new JndiLdapContextFactory() {\r\n\r\n        @Override\r\n        protected LdapContext createLdapContext(Hashtable env) throws NamingException {\r\n            assertEquals(\"ldap://localhost:389\", env.get(Context.PROVIDER_URL));\r\n            assertEquals(\"foo\", env.get(Context.SECURITY_PRINCIPAL));\r\n            assertEquals(\"bar\", env.get(Context.SECURITY_CREDENTIALS));\r\n            assertEquals(\"simple\", env.get(Context.SECURITY_AUTHENTICATION));\r\n            assertNull(env.get(SUN_CONNECTION_POOLING_PROPERTY));\r\n            return createNiceMock(LdapContext.class);\r\n        }\r\n    };\r\n    factory.setUrl(\"ldap://localhost:389\");\r\n    factory.getLdapContext(\"foo\", \"bar\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\shiro\\core\\src\\test\\java\\org\\apache\\shiro\\realm\\ldap\\JndiLdapContextFactoryTest.java",
  "methodName" : "testGetLdapContextStringArguments",
  "sourceCode" : "@SuppressWarnings({ \"deprecation\" })\r\n@Test\r\nvoid testGetLdapContextStringArguments() throws NamingException {\r\n    factory = new JndiLdapContextFactory() {\r\n\r\n        @Override\r\n        protected LdapContext createLdapContext(Hashtable env) throws NamingException {\r\n            assertEquals(\"ldap://localhost:389\", env.get(Context.PROVIDER_URL));\r\n            assertEquals(\"foo\", env.get(Context.SECURITY_PRINCIPAL));\r\n            assertEquals(\"bar\", env.get(Context.SECURITY_CREDENTIALS));\r\n            assertEquals(\"simple\", env.get(Context.SECURITY_AUTHENTICATION));\r\n            assertNull(env.get(SUN_CONNECTION_POOLING_PROPERTY));\r\n            return createNiceMock(LdapContext.class);\r\n        }\r\n    };\r\n    factory.setUrl(\"ldap://localhost:389\");\r\n    factory.getLdapContext(\"foo\", \"bar\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\shiro\\core\\src\\test\\java\\org\\apache\\shiro\\realm\\ldap\\JndiLdapContextFactoryTest.java",
  "methodName" : "testGetSystemLdapContext",
  "sourceCode" : "@Test\r\nvoid testGetSystemLdapContext() throws NamingException {\r\n    factory = new JndiLdapContextFactory() {\r\n\r\n        @Override\r\n        protected LdapContext createLdapContext(Hashtable env) throws NamingException {\r\n            assertEquals(\"ldap://localhost:389\", env.get(Context.PROVIDER_URL));\r\n            assertEquals(\"foo\", env.get(Context.SECURITY_PRINCIPAL));\r\n            assertEquals(\"bar\", env.get(Context.SECURITY_CREDENTIALS));\r\n            assertEquals(\"simple\", env.get(Context.SECURITY_AUTHENTICATION));\r\n            assertNotNull(env.get(SUN_CONNECTION_POOLING_PROPERTY));\r\n            return createNiceMock(LdapContext.class);\r\n        }\r\n    };\r\n    factory.setSystemUsername(\"foo\");\r\n    factory.setSystemPassword(\"bar\");\r\n    factory.setUrl(\"ldap://localhost:389\");\r\n    factory.getSystemLdapContext();\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\shiro\\core\\src\\test\\java\\org\\apache\\shiro\\realm\\ldap\\JndiLdapContextFactoryTest.java",
  "methodName" : "testGetSystemLdapContextPoolingDisabled",
  "sourceCode" : "@Test\r\nvoid testGetSystemLdapContextPoolingDisabled() throws NamingException {\r\n    factory = new JndiLdapContextFactory() {\r\n\r\n        @Override\r\n        protected LdapContext createLdapContext(Hashtable env) throws NamingException {\r\n            assertEquals(\"ldap://localhost:389\", env.get(Context.PROVIDER_URL));\r\n            assertEquals(\"foo\", env.get(Context.SECURITY_PRINCIPAL));\r\n            assertEquals(\"bar\", env.get(Context.SECURITY_CREDENTIALS));\r\n            assertEquals(\"simple\", env.get(Context.SECURITY_AUTHENTICATION));\r\n            assertNull(env.get(SUN_CONNECTION_POOLING_PROPERTY));\r\n            return createNiceMock(LdapContext.class);\r\n        }\r\n    };\r\n    factory.setSystemUsername(\"foo\");\r\n    factory.setSystemPassword(\"bar\");\r\n    factory.setPoolingEnabled(false);\r\n    factory.setUrl(\"ldap://localhost:389\");\r\n    factory.getSystemLdapContext();\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\shiro\\core\\src\\test\\java\\org\\apache\\shiro\\realm\\ldap\\JndiLdapContextFactoryTest.java",
  "methodName" : "testEmptyStringCredentials",
  "sourceCode" : "@Test\r\nvoid testEmptyStringCredentials() throws NamingException {\r\n    assertThrows(AuthenticationException.class, () -> {\r\n        factory.setUrl(\"ldap://localhost:389\");\r\n        factory.getLdapContext(\"jcoder\", \"\");\r\n    });\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\shiro\\core\\src\\test\\java\\org\\apache\\shiro\\realm\\ldap\\JndiLdapContextFactoryTest.java",
  "methodName" : "testEmptyCharArrayCredentials",
  "sourceCode" : "@Test\r\nvoid testEmptyCharArrayCredentials() throws NamingException {\r\n    assertThrows(AuthenticationException.class, () -> {\r\n        factory.setUrl(\"ldap://localhost:389\");\r\n        factory.getLdapContext(\"jcoder\", new char[0]);\r\n    });\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\shiro\\core\\src\\test\\java\\org\\apache\\shiro\\realm\\ldap\\JndiLdapContextFactoryTest.java",
  "methodName" : "testEmptyByteArrayCredentials",
  "sourceCode" : "@Test\r\nvoid testEmptyByteArrayCredentials() throws NamingException {\r\n    assertThrows(AuthenticationException.class, () -> {\r\n        factory.setUrl(\"ldap://localhost:389\");\r\n        factory.getLdapContext(\"jcoder\", new byte[0]);\r\n    });\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\shiro\\core\\src\\test\\java\\org\\apache\\shiro\\realm\\ldap\\JndiLdapContextFactoryTest.java",
  "methodName" : "testEmptyNullCredentials",
  "sourceCode" : "@Test\r\nvoid testEmptyNullCredentials() throws NamingException {\r\n    assertThrows(AuthenticationException.class, () -> {\r\n        factory.setUrl(\"ldap://localhost:389\");\r\n        factory.getLdapContext(\"jcoder\", null);\r\n    });\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\shiro\\core\\src\\test\\java\\org\\apache\\shiro\\realm\\ldap\\JndiLdapRealmTest.java",
  "methodName" : "testGetUserDnWithOutPrefixAndSuffix",
  "sourceCode" : "@Test\r\npublic void testGetUserDnWithOutPrefixAndSuffix() {\r\n    JndiLdapRealm realm = new JndiLdapRealm() {\r\n\r\n        @Override\r\n        protected String getUserDnPrefix() {\r\n            return null;\r\n        }\r\n\r\n        @Override\r\n        protected String getUserDnSuffix() {\r\n            return null;\r\n        }\r\n    };\r\n    String principal = \"foo\";\r\n    String userDn = realm.getUserDn(principal);\r\n    assertEquals(principal, userDn);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\shiro\\core\\src\\test\\java\\org\\apache\\shiro\\realm\\text\\IniRealmTest.java",
  "methodName" : "testNullIni",
  "sourceCode" : "@Test\r\nvoid testNullIni() {\r\n    IniRealm realm = new IniRealm((Ini) null);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\shiro\\core\\src\\test\\java\\org\\apache\\shiro\\realm\\text\\IniRealmTest.java",
  "methodName" : "testEmptyIni",
  "sourceCode" : "@Test\r\nvoid testEmptyIni() {\r\n    new IniRealm(new Ini());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\shiro\\core\\src\\test\\java\\org\\apache\\shiro\\realm\\text\\IniRealmTest.java",
  "methodName" : "testInitWithoutIniResource",
  "sourceCode" : "@Test\r\nvoid testInitWithoutIniResource() {\r\n    assertThrows(IllegalStateException.class, () -> {\r\n        new IniRealm().init();\r\n    });\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\shiro\\core\\src\\test\\java\\org\\apache\\shiro\\realm\\text\\IniRealmTest.java",
  "methodName" : "testIniFile",
  "sourceCode" : "@Test\r\nvoid testIniFile() {\r\n    IniRealm realm = new IniRealm();\r\n    realm.setResourcePath(\"classpath:org/apache/shiro/realm/text/IniRealmTest.simple.ini\");\r\n    realm.init();\r\n    assertTrue(realm.roleExists(\"admin\"));\r\n    UsernamePasswordToken token = new UsernamePasswordToken(\"user1\", \"user1\");\r\n    AuthenticationInfo info = realm.getAuthenticationInfo(token);\r\n    assertNotNull(info);\r\n    assertTrue(realm.hasRole(info.getPrincipals(), \"admin\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\shiro\\core\\src\\test\\java\\org\\apache\\shiro\\realm\\text\\IniRealmTest.java",
  "methodName" : "testIniFileWithoutUsers",
  "sourceCode" : "@Test\r\nvoid testIniFileWithoutUsers() {\r\n    IniRealm realm = new IniRealm();\r\n    realm.setResourcePath(\"classpath:org/apache/shiro/realm/text/IniRealmTest.noUsers.ini\");\r\n    realm.init();\r\n    assertTrue(realm.roleExists(\"admin\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\shiro\\core\\src\\test\\java\\org\\apache\\shiro\\realm\\text\\TextConfigurationRealmTest.java",
  "methodName" : "testRoleAndUserAccount",
  "sourceCode" : "/*\r\n     * Tests that roles and account can't be tested while the realm is being loaded.\r\n     */\r\n@Test\r\nvoid testRoleAndUserAccount() throws InterruptedException {\r\n    setUpForReadConfigurationTest();\r\n    executeTest(new Runnable() {\r\n\r\n        public void run() {\r\n            assertTrue(realm.roleExists(\"role1\"), \"role not found when it was expected\");\r\n            assertTrue(realm.accountExists(\"user1\"), \"user not found when it was expected\");\r\n        }\r\n    });\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\shiro\\core\\src\\test\\java\\org\\apache\\shiro\\realm\\text\\TextConfigurationRealmTest.java",
  "methodName" : "testHasRole",
  "sourceCode" : "/*\r\n     * Tests that roles can't be read while the realm is being loaded.\r\n     */\r\n@Test\r\nvoid testHasRole() throws InterruptedException {\r\n    setUpForReadConfigurationTest();\r\n    executeTest(new Runnable() {\r\n\r\n        public void run() {\r\n            PrincipalCollection principalCollection = new SimplePrincipalCollection(\"user1\", \"realm1\");\r\n            assertTrue(realm.hasRole(principalCollection, \"role2\"), \"principal doesn't have role when it should\");\r\n            assertTrue(realm.hasAllRoles(principalCollection, Arrays.asList(new String[] { \"role1\", \"role2\" })), \"principal doesn't have all roles when it should\");\r\n        }\r\n    });\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\shiro\\core\\src\\test\\java\\org\\apache\\shiro\\realm\\text\\TextConfigurationRealmTest.java",
  "methodName" : "testCheckRole",
  "sourceCode" : "/*\r\n     * Tests that roles can't be checked while the realm is being loaded.\r\n     */\r\n@Test\r\nvoid testCheckRole() throws InterruptedException {\r\n    setUpForReadConfigurationTest();\r\n    executeTest(new Runnable() {\r\n\r\n        public void run() {\r\n            PrincipalCollection principalCollection = new SimplePrincipalCollection(\"user1\", \"realm1\");\r\n            try {\r\n                realm.checkRoles(principalCollection, new String[] { \"role1\", \"role2\" });\r\n            } catch (AuthorizationException ae) {\r\n                fail(\"principal doesn't have all roles when it should\");\r\n            }\r\n        }\r\n    });\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\shiro\\core\\src\\test\\java\\org\\apache\\shiro\\realm\\text\\TextConfigurationRealmTest.java",
  "methodName" : "testCheckPermission",
  "sourceCode" : "/*\r\n     * Tests that a principal's permissions can't be checked while the realm is being loaded.\r\n     */\r\n@Test\r\nvoid testCheckPermission() throws InterruptedException {\r\n    setUpForReadConfigurationTest();\r\n    executeTest(new Runnable() {\r\n\r\n        public void run() {\r\n            PrincipalCollection principalCollection = new SimplePrincipalCollection(\"user1\", \"realm1\");\r\n            try {\r\n                realm.checkPermission(principalCollection, \"role1_permission1\");\r\n                realm.checkPermissions(principalCollection, new String[] { \"role1_permission1\", \"role2_permission2\" });\r\n            } catch (AuthorizationException ae) {\r\n                fail(\"principal doesn't have permission when it should\");\r\n            }\r\n        }\r\n    });\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\shiro\\core\\src\\test\\java\\org\\apache\\shiro\\realm\\text\\TextConfigurationRealmTest.java",
  "methodName" : "testIsPermitted",
  "sourceCode" : "/*\r\n     * Tests that a principal's permissions can't be checked while the realm is being loaded.\r\n     */\r\n@Test\r\nvoid testIsPermitted() throws InterruptedException {\r\n    setUpForReadConfigurationTest();\r\n    executeTest(new Runnable() {\r\n\r\n        public void run() {\r\n            PrincipalCollection principalCollection = new SimplePrincipalCollection(\"user1\", \"realm1\");\r\n            assertTrue(realm.isPermitted(principalCollection, \"role1_permission1\"), \"permission not permitted when it should be\");\r\n            assertTrue(realm.isPermittedAll(principalCollection, \"role1_permission1\", \"role2_permission2\"), \"permission not permitted when it should be\");\r\n        }\r\n    });\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\shiro\\core\\src\\test\\java\\org\\apache\\shiro\\realm\\text\\TextConfigurationRealmTest.java",
  "methodName" : "testProcessRoleDefinitions",
  "sourceCode" : "/*\r\n     * Test that role definitions cannot be updated when a read thread holds the realm's lock.\r\n     */\r\n@Test\r\nvoid testProcessRoleDefinitions() throws InterruptedException {\r\n    realm = new TestRealm() {\r\n\r\n        public void test(Thread runnable) throws InterruptedException {\r\n            // While the realm's lock is held by this thread role definitions cannot be processed\r\n            // Obtain the realm's locks\r\n            rolesLock.writeLock().lock();\r\n            try {\r\n                runnable.start();\r\n                Thread.sleep(500);\r\n                // No role until lock is released and role definitions are processed\r\n                assertFalse(realm.roleExists(\"role1\"), \"role exists when it shouldn't\");\r\n            } finally {\r\n                rolesLock.writeLock().unlock();\r\n            }\r\n        }\r\n    };\r\n    // A thread to process new role definitions\r\n    TestThread testThread = new TestThread(new Runnable() {\r\n\r\n        public void run() {\r\n            try {\r\n                realm.processRoleDefinitions();\r\n            } catch (ParseException e) {\r\n                fail(\"Unable to parse role definitions\");\r\n            }\r\n        }\r\n    });\r\n    setRoles();\r\n    Thread testTask = new Thread(testThread);\r\n    realm.test(testTask);\r\n    testTask.join(500);\r\n    assertTrue(realm.roleExists(\"role1\"), \"role doesn't exist when it should\");\r\n    testThread.test();\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\shiro\\core\\src\\test\\java\\org\\apache\\shiro\\realm\\text\\TextConfigurationRealmTest.java",
  "methodName" : "testProcessUserDefinitions",
  "sourceCode" : "/*\r\n     * Test that user definitions cannot be updated when a read thread holds the realm's lock.\r\n     */\r\n@Test\r\nvoid testProcessUserDefinitions() throws InterruptedException {\r\n    realm = new TestRealm() {\r\n\r\n        public void test(Thread runnable) throws InterruptedException {\r\n            // While the realm's lock is held by this thread user definitions cannot be processed\r\n            // Obtain the realm's locks\r\n            usersLock.writeLock().lock();\r\n            try {\r\n                runnable.start();\r\n                Thread.sleep(500);\r\n                // No account until lock is released and user definitions are processed\r\n                assertFalse(realm.accountExists(\"user1\"), \"account exists when it shouldn't\");\r\n            } finally {\r\n                usersLock.writeLock().unlock();\r\n            }\r\n        }\r\n    };\r\n    TestThread testThread = new TestThread(new Runnable() {\r\n\r\n        public void run() {\r\n            try {\r\n                realm.processUserDefinitions();\r\n            } catch (ParseException e) {\r\n                fail(\"Unable to parse user definitions\");\r\n            }\r\n        }\r\n    });\r\n    setUsers();\r\n    Thread testTask = new Thread(testThread);\r\n    realm.test(testTask);\r\n    testTask.join(500);\r\n    assertTrue(realm.accountExists(\"user1\"), \"account doesn't exist when it should\");\r\n    testThread.test();\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\shiro\\core\\src\\test\\java\\org\\apache\\shiro\\SecurityUtilsUnwrapTest.java",
  "methodName" : "basicUnwrap",
  "sourceCode" : "@Test\r\nvoid basicUnwrap() {\r\n    SecurityManager sm = unwrapSecurityManager(securityManager, SecurityManager.class);\r\n    assertEquals(securityManager, sm);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\shiro\\core\\src\\test\\java\\org\\apache\\shiro\\SecurityUtilsUnwrapTest.java",
  "methodName" : "basicTypeCheck",
  "sourceCode" : "@Test\r\nvoid basicTypeCheck() {\r\n    assertTrue(isSecurityManagerTypeOf(securityManager, SecurityManager.class));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\shiro\\core\\src\\test\\java\\org\\apache\\shiro\\SecurityUtilsUnwrapTest.java",
  "methodName" : "securityManager",
  "sourceCode" : "@Test\r\nvoid securityManager() {\r\n    try (var threadContext = mockStatic(ThreadContext.class)) {\r\n        threadContext.when(ThreadContext::getSecurityManager).thenReturn(defaultSecurityManager);\r\n        DefaultSecurityManager dsm = getSecurityManager(DefaultSecurityManager.class);\r\n        assertEquals(defaultSecurityManager, dsm);\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\shiro\\core\\src\\test\\java\\org\\apache\\shiro\\SecurityUtilsUnwrapTest.java",
  "methodName" : "failedTypeUnwrap",
  "sourceCode" : "@Test\r\nvoid failedTypeUnwrap() {\r\n    assertThrows(ClassCastException.class, () -> {\r\n        SessionsSecurityManager ssm = unwrapSecurityManager(securityManager, SessionsSecurityManager.class);\r\n    });\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\shiro\\core\\src\\test\\java\\org\\apache\\shiro\\SecurityUtilsUnwrapTest.java",
  "methodName" : "defaultSecurityManager",
  "sourceCode" : "@Test\r\nvoid defaultSecurityManager() {\r\n    var dsm = unwrapSecurityManager(defaultSecurityManager, DefaultSecurityManager.class);\r\n    assertEquals(defaultSecurityManager, dsm);\r\n    when(defaultSecurityManager.createSubject(subjectContext)).thenReturn(subject);\r\n    Subject subject = dsm.createSubject(subjectContext);\r\n    assertEquals(this.subject, subject);\r\n    verify(defaultSecurityManager).createSubject(subjectContext);\r\n    verifyNoMoreInteractions(defaultSecurityManager, this.subject, subjectContext);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\shiro\\core\\src\\test\\java\\org\\apache\\shiro\\SecurityUtilsUnwrapTest.java",
  "methodName" : "invalidCast",
  "sourceCode" : "@Test\r\nvoid invalidCast() {\r\n    SecurityManager wrapped = new Wrapped(defaultSecurityManager);\r\n    assertThrows(ClassCastException.class, () -> {\r\n        DefaultSecurityManager sm = (DefaultSecurityManager) wrapped;\r\n    });\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\shiro\\core\\src\\test\\java\\org\\apache\\shiro\\SecurityUtilsUnwrapTest.java",
  "methodName" : "unwrapOne",
  "sourceCode" : "@Test\r\nvoid unwrapOne() {\r\n    SecurityManager wrapped = new Wrapped(defaultSecurityManager);\r\n    assertEquals(defaultSecurityManager, unwrapSecurityManager(wrapped, DefaultSecurityManager.class));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\shiro\\core\\src\\test\\java\\org\\apache\\shiro\\SecurityUtilsUnwrapTest.java",
  "methodName" : "unwrapTwo",
  "sourceCode" : "@Test\r\nvoid unwrapTwo() {\r\n    SecurityManager wrapped = new Wrapped(new Wrapped(defaultSecurityManager));\r\n    assertEquals(defaultSecurityManager, unwrapSecurityManager(wrapped, DefaultSecurityManager.class));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\shiro\\core\\src\\test\\java\\org\\apache\\shiro\\SecurityUtilsUnwrapTest.java",
  "methodName" : "invalidWrap",
  "sourceCode" : "@Test\r\nvoid invalidWrap() {\r\n    SecurityManager wrapped = new Wrapped(new InvalidWrapped(defaultSecurityManager));\r\n    assertThrows(IllegalStateException.class, () -> {\r\n        assertEquals(defaultSecurityManager, unwrapSecurityManager(wrapped, DefaultSecurityManager.class));\r\n    });\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\shiro\\core\\src\\test\\java\\org\\apache\\shiro\\SecurityUtilsUnwrapTest.java",
  "methodName" : "invalidWrapInverted",
  "sourceCode" : "@Test\r\nvoid invalidWrapInverted() {\r\n    SecurityManager wrapped = new InvalidWrapped(new Wrapped(defaultSecurityManager));\r\n    assertThrows(IllegalStateException.class, () -> {\r\n        assertEquals(defaultSecurityManager, unwrapSecurityManager(wrapped, DefaultSecurityManager.class));\r\n    });\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\shiro\\core\\src\\test\\java\\org\\apache\\shiro\\session\\mgt\\AbstractValidatingSessionManagerTest.java",
  "methodName" : "testValidateSessions",
  "sourceCode" : "/**\r\n * Tests that both SessionListeners are called and that invalid sessions are deleted by default.\r\n * Verifies <a href=\"https://issues.apache.org/jira/browse/SHIRO-199\">SHIRO-199</a>.\r\n */\r\n@Test\r\nvoid testValidateSessions() {\r\n    final SimpleSession validSession = new SimpleSession();\r\n    validSession.setId(1);\r\n    final SimpleSession invalidSession = new SimpleSession();\r\n    //set to a time in the past:\r\n    Calendar cal = Calendar.getInstance();\r\n    long expiredTimeout = AbstractSessionManager.DEFAULT_GLOBAL_SESSION_TIMEOUT + 1;\r\n    cal.add(Calendar.MILLISECOND, -((int) expiredTimeout));\r\n    Date past = cal.getTime();\r\n    invalidSession.setStartTimestamp(past);\r\n    invalidSession.setLastAccessTime(past);\r\n    invalidSession.setId(2);\r\n    final AtomicInteger expirationCount = new AtomicInteger();\r\n    SessionListener sessionListener = new SessionListenerAdapter() {\r\n\r\n        @Override\r\n        public void onExpiration(Session session) {\r\n            expirationCount.incrementAndGet();\r\n        }\r\n    };\r\n    AbstractValidatingSessionManager sessionManager = new AbstractValidatingSessionManager() {\r\n\r\n        @Override\r\n        protected Session retrieveSession(SessionKey key) throws UnknownSessionException {\r\n            throw new UnsupportedOperationException(\"Should not be called in this test.\");\r\n        }\r\n\r\n        @Override\r\n        protected Session doCreateSession(SessionContext initData) throws AuthorizationException {\r\n            throw new UnsupportedOperationException(\"Should not be called in this test.\");\r\n        }\r\n\r\n        @Override\r\n        protected Collection<Session> getActiveSessions() {\r\n            Collection<Session> sessions = new ArrayList<Session>(2);\r\n            sessions.add(validSession);\r\n            sessions.add(invalidSession);\r\n            return sessions;\r\n        }\r\n    };\r\n    sessionManager.setSessionListeners(Arrays.asList(sessionListener));\r\n    sessionManager.validateSessions();\r\n    assertEquals(1, expirationCount.intValue());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\shiro\\core\\src\\test\\java\\org\\apache\\shiro\\session\\mgt\\AbstractValidatingSessionManagerTest.java",
  "methodName" : "testNoMemoryLeakOnInvalidSessions",
  "sourceCode" : "/**\r\n * Tests that no memory leak exists on invalid sessions: expired or stopped\r\n * Verifies <a href=\"https://issues.apache.org/jira/browse/SHIRO-399\">SHIRO-399</a>.\r\n */\r\n@Test\r\nvoid testNoMemoryLeakOnInvalidSessions() throws Exception {\r\n    SessionListener sessionListener = new SessionListener() {\r\n\r\n        public void onStart(Session session) {\r\n            session.setAttribute(\"I love\", \"Romania\");\r\n        }\r\n\r\n        public void onStop(Session session) {\r\n            tryToCleanSession(session);\r\n        }\r\n\r\n        public void onExpiration(Session session) {\r\n            tryToCleanSession(session);\r\n        }\r\n\r\n        private void tryToCleanSession(Session session) {\r\n            Collection<Object> keys = session.getAttributeKeys();\r\n            for (Object key : keys) {\r\n                session.removeAttribute(key);\r\n            }\r\n        }\r\n    };\r\n    DefaultSessionManager sessionManager = new DefaultSessionManager();\r\n    sessionManager.setSessionListeners(Arrays.asList(sessionListener));\r\n    Session session = sessionManager.start(null);\r\n    assertEquals(1, sessionManager.getActiveSessions().size());\r\n    session.setTimeout(0L);\r\n    //last access timestamp needs to be older than the current timestamp when validating, so ensure a delay:\r\n    Thread.sleep(1);\r\n    sessionManager.validateSessions();\r\n    assertEquals(0, sessionManager.getActiveSessions().size());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\shiro\\core\\src\\test\\java\\org\\apache\\shiro\\session\\mgt\\DefaultSessionManagerTest.java",
  "methodName" : "testGlobalTimeout",
  "sourceCode" : "@SuppressWarnings(\"checkstyle:MagicNumber\")\r\n@Test\r\nvoid testGlobalTimeout() {\r\n    long timeout = 1000;\r\n    sm.setGlobalSessionTimeout(timeout);\r\n    Session session = sm.start(null);\r\n    assertNotNull(session);\r\n    assertNotNull(session.getId());\r\n    assertEquals(session.getTimeout(), timeout);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\shiro\\core\\src\\test\\java\\org\\apache\\shiro\\session\\mgt\\DefaultSessionManagerTest.java",
  "methodName" : "testSessionListenerStartNotification",
  "sourceCode" : "@Test\r\nvoid testSessionListenerStartNotification() {\r\n    final boolean[] started = new boolean[1];\r\n    SessionListener listener = new SessionListenerAdapter() {\r\n\r\n        public void onStart(Session session) {\r\n            started[0] = true;\r\n        }\r\n    };\r\n    sm.getSessionListeners().add(listener);\r\n    sm.start(null);\r\n    assertTrue(started[0]);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\shiro\\core\\src\\test\\java\\org\\apache\\shiro\\session\\mgt\\DefaultSessionManagerTest.java",
  "methodName" : "testSessionListenerStopNotification",
  "sourceCode" : "@Test\r\nvoid testSessionListenerStopNotification() {\r\n    final boolean[] stopped = new boolean[1];\r\n    SessionListener listener = new SessionListenerAdapter() {\r\n\r\n        public void onStop(Session session) {\r\n            stopped[0] = true;\r\n        }\r\n    };\r\n    sm.getSessionListeners().add(listener);\r\n    Session session = sm.start(null);\r\n    sm.stop(new DefaultSessionKey(session.getId()));\r\n    assertTrue(stopped[0]);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\shiro\\core\\src\\test\\java\\org\\apache\\shiro\\session\\mgt\\DefaultSessionManagerTest.java",
  "methodName" : "testSessionListenerStopNotificationWithReadAttribute",
  "sourceCode" : "//asserts fix for SHIRO-388:\r\n//Ensures that a session attribute can be accessed in the listener without\r\n//causing a stack overflow exception.\r\n@Test\r\nvoid testSessionListenerStopNotificationWithReadAttribute() {\r\n    final boolean[] stopped = new boolean[1];\r\n    final String[] value = new String[1];\r\n    SessionListener listener = new SessionListenerAdapter() {\r\n\r\n        public void onStop(Session session) {\r\n            stopped[0] = true;\r\n            value[0] = (String) session.getAttribute(\"foo\");\r\n        }\r\n    };\r\n    sm.getSessionListeners().add(listener);\r\n    Session session = sm.start(null);\r\n    session.setAttribute(\"foo\", \"bar\");\r\n    sm.stop(new DefaultSessionKey(session.getId()));\r\n    assertTrue(stopped[0]);\r\n    assertEquals(\"bar\", value[0]);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\shiro\\core\\src\\test\\java\\org\\apache\\shiro\\session\\mgt\\DefaultSessionManagerTest.java",
  "methodName" : "testSessionListenerExpiredNotification",
  "sourceCode" : "@SuppressWarnings(\"checkstyle:MagicNumber\")\r\n@Test\r\nvoid testSessionListenerExpiredNotification() {\r\n    final boolean[] expired = new boolean[1];\r\n    SessionListener listener = new SessionListenerAdapter() {\r\n\r\n        public void onExpiration(Session session) {\r\n            expired[0] = true;\r\n        }\r\n    };\r\n    sm.getSessionListeners().add(listener);\r\n    sm.setGlobalSessionTimeout(100);\r\n    Session session = sm.start(null);\r\n    sleep(150);\r\n    try {\r\n        sm.checkValid(new DefaultSessionKey(session.getId()));\r\n        fail(\"check should have thrown an exception.\");\r\n    } catch (InvalidSessionException expected) {\r\n        //do nothing - expected.\r\n    }\r\n    assertTrue(expired[0]);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\shiro\\core\\src\\test\\java\\org\\apache\\shiro\\session\\mgt\\DefaultSessionManagerTest.java",
  "methodName" : "testSessionDeleteOnExpiration",
  "sourceCode" : "@SuppressWarnings(\"checkstyle:MagicNumber\")\r\n@Test\r\nvoid testSessionDeleteOnExpiration() {\r\n    sm.setGlobalSessionTimeout(100);\r\n    SessionDAO sessionDAO = createMock(SessionDAO.class);\r\n    sm.setSessionDAO(sessionDAO);\r\n    String sessionId1 = UUID.randomUUID().toString();\r\n    final SimpleSession session1 = new SimpleSession();\r\n    session1.setId(sessionId1);\r\n    final Session[] activeSession = new SimpleSession[] { session1 };\r\n    sm.setSessionFactory(new SessionFactory() {\r\n\r\n        public Session createSession(SessionContext initData) {\r\n            return activeSession[0];\r\n        }\r\n    });\r\n    expect(sessionDAO.create(eq(session1))).andReturn(sessionId1);\r\n    sessionDAO.update(eq(session1));\r\n    expectLastCall().anyTimes();\r\n    replay(sessionDAO);\r\n    Session session = sm.start(null);\r\n    assertNotNull(session);\r\n    verify(sessionDAO);\r\n    reset(sessionDAO);\r\n    expect(sessionDAO.readSession(sessionId1)).andReturn(session1).anyTimes();\r\n    sessionDAO.update(eq(session1));\r\n    replay(sessionDAO);\r\n    sm.setTimeout(new DefaultSessionKey(sessionId1), 1);\r\n    verify(sessionDAO);\r\n    reset(sessionDAO);\r\n    sleep(20);\r\n    expect(sessionDAO.readSession(sessionId1)).andReturn(session1);\r\n    //update's the stop timestamp\r\n    sessionDAO.update(eq(session1));\r\n    sessionDAO.delete(session1);\r\n    replay(sessionDAO);\r\n    //Try to access the same session, but it should throw an UnknownSessionException due to timeout:\r\n    try {\r\n        sm.getTimeout(new DefaultSessionKey(sessionId1));\r\n        fail(\"Session with id [\" + sessionId1 + \"] should have expired due to timeout.\");\r\n    } catch (ExpiredSessionException expected) {\r\n        //expected\r\n    }\r\n    //verify that the delete call was actually made on the DAO\r\n    verify(sessionDAO);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\shiro\\core\\src\\test\\java\\org\\apache\\shiro\\session\\mgt\\DefaultSessionManagerTest.java",
  "methodName" : "testEnablingOfCustomSessionValidationScheduler",
  "sourceCode" : "/**\r\n * Tests a bug introduced by SHIRO-443, where a custom sessionValidationScheduler would not be started.\r\n */\r\n@Test\r\nvoid testEnablingOfCustomSessionValidationScheduler() {\r\n    // using the default impl of sessionValidationScheduler, as the but effects any scheduler we set directly via\r\n    // sessionManager.setSessionValidationScheduler(), commonly used in INI configuration.\r\n    ExecutorServiceSessionValidationScheduler sessionValidationScheduler = new ExecutorServiceSessionValidationScheduler();\r\n    DefaultSessionManager sessionManager = new DefaultSessionManager();\r\n    sessionManager.setSessionValidationScheduler(sessionValidationScheduler);\r\n    // starting a session will trigger the starting of the validator\r\n    try {\r\n        Session session = sessionManager.start(null);\r\n        // now sessionValidationScheduler should be enabled\r\n        assertTrue(sessionValidationScheduler.isEnabled(), \"sessionValidationScheduler was not enabled\");\r\n    } finally {\r\n        // cleanup after test\r\n        sessionManager.destroy();\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\shiro\\core\\src\\test\\java\\org\\apache\\shiro\\session\\mgt\\DelegatingSessionTest.java",
  "methodName" : "testTimeout",
  "sourceCode" : "@SuppressWarnings(\"checkstyle:MagicNumber\")\r\n@Test\r\nvoid testTimeout() {\r\n    Serializable origId = session.getId();\r\n    assertEquals(AbstractSessionManager.DEFAULT_GLOBAL_SESSION_TIMEOUT, session.getTimeout());\r\n    session.touch();\r\n    session.setTimeout(100);\r\n    assertEquals(100, session.getTimeout());\r\n    sleep(150);\r\n    try {\r\n        session.getTimeout();\r\n        fail(\"Session should have expired.\");\r\n    } catch (ExpiredSessionException expected) {\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\shiro\\core\\src\\test\\java\\org\\apache\\shiro\\session\\mgt\\ExecutorServiceSessionValidationSchedulerTest.java",
  "methodName" : "timeoutSessionValidate",
  "sourceCode" : "@Test\r\nvoid timeoutSessionValidate() throws InterruptedException {\r\n    Session session = new SimpleSession();\r\n    session.setTimeout(2000L);\r\n    defaultSessionManager.create(session);\r\n    Thread.sleep(5000L);\r\n    assertTrue(defaultSessionManager.getActiveSessions().isEmpty());\r\n    assertTrue(executorServiceSessionValidationScheduler.isEnabled());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\shiro\\core\\src\\test\\java\\org\\apache\\shiro\\session\\mgt\\ExecutorServiceSessionValidationSchedulerTest.java",
  "methodName" : "stopSessionValidate",
  "sourceCode" : "@Test\r\nvoid stopSessionValidate() throws InterruptedException {\r\n    Session session = new SimpleSession();\r\n    session.setTimeout(10000L);\r\n    defaultSessionManager.create(session);\r\n    Thread.sleep(1000L);\r\n    session.stop();\r\n    Thread.sleep(3000L);\r\n    assertTrue(defaultSessionManager.getActiveSessions().isEmpty());\r\n    assertTrue(executorServiceSessionValidationScheduler.isEnabled());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\shiro\\core\\src\\test\\java\\org\\apache\\shiro\\session\\mgt\\ExecutorServiceSessionValidationSchedulerTest.java",
  "methodName" : "enableSessionValidation",
  "sourceCode" : "@Test\r\nvoid enableSessionValidation() throws InterruptedException {\r\n    assertTrue(executorServiceSessionValidationScheduler.isEnabled());\r\n    executorServiceSessionValidationScheduler.disableSessionValidation();\r\n    Thread.sleep(2000L);\r\n    assertFalse(executorServiceSessionValidationScheduler.isEnabled());\r\n    executorServiceSessionValidationScheduler.enableSessionValidation();\r\n    Thread.sleep(2000L);\r\n    assertTrue(executorServiceSessionValidationScheduler.isEnabled());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\shiro\\core\\src\\test\\java\\org\\apache\\shiro\\session\\mgt\\ExecutorServiceSessionValidationSchedulerTest.java",
  "methodName" : "threadException",
  "sourceCode" : "@Test\r\nvoid threadException() throws InterruptedException {\r\n    Session session = new SimpleSession();\r\n    defaultSessionManager = new FakeDefaultSessionManager();\r\n    defaultSessionManager.setDeleteInvalidSessions(true);\r\n    executorServiceSessionValidationScheduler = new ExecutorServiceSessionValidationScheduler();\r\n    executorServiceSessionValidationScheduler.setSessionManager(defaultSessionManager);\r\n    executorServiceSessionValidationScheduler.setThreadNamePrefix(\"test-\");\r\n    executorServiceSessionValidationScheduler.setSessionValidationInterval(1000L);\r\n    executorServiceSessionValidationScheduler.enableSessionValidation();\r\n    defaultSessionManager.create(session);\r\n    Thread.sleep(2000L);\r\n    session.stop();\r\n    Thread.sleep(2000L);\r\n    assertFalse(defaultSessionManager.getActiveSessions().isEmpty());\r\n    assertTrue(executorServiceSessionValidationScheduler.isEnabled());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\shiro\\core\\src\\test\\java\\org\\apache\\shiro\\session\\mgt\\SimpleSessionTest.java",
  "methodName" : "testDefaultSerialization",
  "sourceCode" : "@Test\r\nvoid testDefaultSerialization() throws Exception {\r\n    SimpleSession session = new SimpleSession();\r\n    long timeout = session.getTimeout();\r\n    Date start = session.getStartTimestamp();\r\n    Date lastAccess = session.getLastAccessTime();\r\n    SimpleSession deserialized = serializeAndDeserialize(session);\r\n    assertEquals(timeout, deserialized.getTimeout());\r\n    assertEquals(start, deserialized.getStartTimestamp());\r\n    assertEquals(lastAccess, deserialized.getLastAccessTime());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\shiro\\core\\src\\test\\java\\org\\apache\\shiro\\session\\mgt\\SimpleSessionTest.java",
  "methodName" : "serializeHost",
  "sourceCode" : "@Test\r\nvoid serializeHost() throws IOException, ClassNotFoundException {\r\n    SimpleSession session = new SimpleSession(\"localhost\");\r\n    assertEquals(\"localhost\", serializeAndDeserialize(session).getHost());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\shiro\\core\\src\\test\\java\\org\\apache\\shiro\\session\\mgt\\SimpleSessionTest.java",
  "methodName" : "serializeExpired",
  "sourceCode" : "@Test\r\nvoid serializeExpired() throws IOException, ClassNotFoundException {\r\n    SimpleSession session = new SimpleSession();\r\n    session.setExpired(true);\r\n    assertTrue(serializeAndDeserialize(session).isExpired());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\shiro\\core\\src\\test\\java\\org\\apache\\shiro\\subject\\DelegatingSubjectTest.java",
  "methodName" : "testSessionStopThenStart",
  "sourceCode" : "@Test\r\nvoid testSessionStopThenStart() {\r\n    String key = \"testKey\";\r\n    String value = \"testValue\";\r\n    DefaultSecurityManager sm = new DefaultSecurityManager();\r\n    DelegatingSubject subject = new DelegatingSubject(sm);\r\n    Session session = subject.getSession();\r\n    session.setAttribute(key, value);\r\n    assertEquals(session.getAttribute(key), value);\r\n    Serializable firstSessionId = session.getId();\r\n    assertNotNull(firstSessionId);\r\n    session.stop();\r\n    session = subject.getSession();\r\n    assertNotNull(session);\r\n    assertNull(session.getAttribute(key));\r\n    Serializable secondSessionId = session.getId();\r\n    assertNotNull(secondSessionId);\r\n    assertNotEquals(firstSessionId, secondSessionId);\r\n    subject.logout();\r\n    sm.destroy();\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\shiro\\core\\src\\test\\java\\org\\apache\\shiro\\subject\\DelegatingSubjectTest.java",
  "methodName" : "testExecuteCallable",
  "sourceCode" : "@Test\r\nvoid testExecuteCallable() {\r\n    String username = \"jsmith\";\r\n    SecurityManager securityManager = createNiceMock(SecurityManager.class);\r\n    PrincipalCollection identity = new SimplePrincipalCollection(username, \"testRealm\");\r\n    final Subject sourceSubject = new DelegatingSubject(identity, true, null, null, securityManager);\r\n    assertNull(ThreadContext.getSubject());\r\n    assertNull(ThreadContext.getSecurityManager());\r\n    Callable<String> callable = new Callable<String>() {\r\n\r\n        public String call() throws Exception {\r\n            Subject callingSubject = SecurityUtils.getSubject();\r\n            assertNotNull(callingSubject);\r\n            assertNotNull(SecurityUtils.getSecurityManager());\r\n            assertEquals(callingSubject, sourceSubject);\r\n            return \"Hello \" + callingSubject.getPrincipal();\r\n        }\r\n    };\r\n    String response = sourceSubject.execute(callable);\r\n    assertNotNull(response);\r\n    assertEquals(\"Hello \" + username, response);\r\n    assertNull(ThreadContext.getSubject());\r\n    assertNull(ThreadContext.getSecurityManager());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\shiro\\core\\src\\test\\java\\org\\apache\\shiro\\subject\\DelegatingSubjectTest.java",
  "methodName" : "testExecuteRunnable",
  "sourceCode" : "@Test\r\nvoid testExecuteRunnable() {\r\n    String username = \"jsmith\";\r\n    SecurityManager securityManager = createNiceMock(SecurityManager.class);\r\n    PrincipalCollection identity = new SimplePrincipalCollection(username, \"testRealm\");\r\n    final Subject sourceSubject = new DelegatingSubject(identity, true, null, null, securityManager);\r\n    assertNull(ThreadContext.getSubject());\r\n    assertNull(ThreadContext.getSecurityManager());\r\n    Runnable runnable = new Runnable() {\r\n\r\n        public void run() {\r\n            Subject callingSubject = SecurityUtils.getSubject();\r\n            assertNotNull(callingSubject);\r\n            assertNotNull(SecurityUtils.getSecurityManager());\r\n            assertEquals(callingSubject, sourceSubject);\r\n        }\r\n    };\r\n    sourceSubject.execute(runnable);\r\n    assertNull(ThreadContext.getSubject());\r\n    assertNull(ThreadContext.getSecurityManager());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\shiro\\core\\src\\test\\java\\org\\apache\\shiro\\subject\\DelegatingSubjectTest.java",
  "methodName" : "testRunAs",
  "sourceCode" : "@Test\r\nvoid testRunAs() {\r\n    Ini ini = new Ini();\r\n    Ini.Section users = ini.addSection(\"users\");\r\n    users.put(\"user1\", \"user1,role1\");\r\n    users.put(\"user2\", \"user2,role2\");\r\n    users.put(\"user3\", \"user3,role3\");\r\n    SecurityManager sm = new BasicIniEnvironment(ini).getSecurityManager();\r\n    //login as user1\r\n    Subject subject = new Subject.Builder(sm).buildSubject();\r\n    subject.login(new UsernamePasswordToken(\"user1\", \"user1\"));\r\n    assertFalse(subject.isRunAs());\r\n    assertEquals(\"user1\", subject.getPrincipal());\r\n    assertTrue(subject.hasRole(\"role1\"));\r\n    assertFalse(subject.hasRole(\"role2\"));\r\n    assertFalse(subject.hasRole(\"role3\"));\r\n    //no previous principals since we haven't called runAs yet\r\n    assertNull(subject.getPreviousPrincipals());\r\n    //runAs user2:\r\n    subject.runAs(new SimplePrincipalCollection(\"user2\", INI_REALM_NAME));\r\n    assertTrue(subject.isRunAs());\r\n    assertEquals(\"user2\", subject.getPrincipal());\r\n    assertTrue(subject.hasRole(\"role2\"));\r\n    assertFalse(subject.hasRole(\"role1\"));\r\n    assertFalse(subject.hasRole(\"role3\"));\r\n    //assert we still have the previous (user1) principals:\r\n    PrincipalCollection previous = subject.getPreviousPrincipals();\r\n    assertFalse(previous == null || previous.isEmpty());\r\n    assertEquals(\"user1\", previous.getPrimaryPrincipal());\r\n    //test the stack functionality:  While as user2, run as user3:\r\n    subject.runAs(new SimplePrincipalCollection(\"user3\", INI_REALM_NAME));\r\n    assertTrue(subject.isRunAs());\r\n    assertEquals(\"user3\", subject.getPrincipal());\r\n    assertTrue(subject.hasRole(\"role3\"));\r\n    assertFalse(subject.hasRole(\"role1\"));\r\n    assertFalse(subject.hasRole(\"role2\"));\r\n    //assert we still have the previous (user2) principals in the stack:\r\n    previous = subject.getPreviousPrincipals();\r\n    assertFalse(previous == null || previous.isEmpty());\r\n    assertEquals(\"user2\", previous.getPrimaryPrincipal());\r\n    //drop down to user2:\r\n    subject.releaseRunAs();\r\n    //assert still run as:\r\n    assertTrue(subject.isRunAs());\r\n    assertEquals(\"user2\", subject.getPrincipal());\r\n    assertTrue(subject.hasRole(\"role2\"));\r\n    assertFalse(subject.hasRole(\"role1\"));\r\n    assertFalse(subject.hasRole(\"role3\"));\r\n    //assert we still have the previous (user1) principals:\r\n    previous = subject.getPreviousPrincipals();\r\n    assertFalse(previous == null || previous.isEmpty());\r\n    assertEquals(\"user1\", previous.getPrimaryPrincipal());\r\n    //drop down to original user1:\r\n    subject.releaseRunAs();\r\n    //assert we're no longer runAs:\r\n    assertFalse(subject.isRunAs());\r\n    assertEquals(\"user1\", subject.getPrincipal());\r\n    assertTrue(subject.hasRole(\"role1\"));\r\n    assertFalse(subject.hasRole(\"role2\"));\r\n    assertFalse(subject.hasRole(\"role3\"));\r\n    //no previous principals in orig state\r\n    assertNull(subject.getPreviousPrincipals());\r\n    subject.logout();\r\n    LifecycleUtils.destroy(sm);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\shiro\\core\\src\\test\\java\\org\\apache\\shiro\\subject\\DelegatingSubjectTest.java",
  "methodName" : "testToString",
  "sourceCode" : "@Test\r\nvoid testToString() {\r\n    // given\r\n    String username = \"jsmith\";\r\n    DefaultSecurityManager securityManager = new DefaultSecurityManager();\r\n    PrincipalCollection identity = new SimplePrincipalCollection(username, \"testRealm\");\r\n    final String hostname = \"localhost\";\r\n    final DelegatingSubject sourceSubject = new DelegatingSubject(identity, true, hostname, null, securityManager);\r\n    // when\r\n    final String subjectToString = sourceSubject.toString();\r\n    // then\r\n    final Session session = sourceSubject.getSession(true);\r\n    String sessionId = (String) session.getId();\r\n    assertFalse(subjectToString.contains(sessionId), \"toString must not leak sessionId\");\r\n    assertFalse(subjectToString.contains(hostname), \"toString must not leak host\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\shiro\\core\\src\\test\\java\\org\\apache\\shiro\\subject\\SimplePrincipalCollectionTest.java",
  "methodName" : "multiplePrincipalsTest",
  "sourceCode" : "@Test\r\nvoid multiplePrincipalsTest() {\r\n    SimplePrincipalCollection principalCollection = new SimplePrincipalCollection();\r\n    principalCollection.add(\"frank\", \"realm1\");\r\n    principalCollection.add(\"johnny\", \"realm1\");\r\n    principalCollection.add(\"Alberto\", \"realm2\");\r\n    PrincipalCollection underTest = principalCollection;\r\n    //        underTest.\r\n    LOG.trace(\"{}\", principalCollection);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\shiro\\core\\src\\test\\java\\org\\apache\\shiro\\test\\ExampleShiroIntegrationTest.java",
  "methodName" : "testSimple",
  "sourceCode" : "@Test\r\nvoid testSimple() {\r\n    //1.  Build the Subject instance for the test to run:\r\n    Subject subjectUnderTest = new Subject.Builder(getSecurityManager()).buildSubject();\r\n    //2. Bind the subject to the current thread:\r\n    setSubject(subjectUnderTest);\r\n    //perform test logic here.  Any call to\r\n    //SecurityUtils.getSubject() directly (or nested in the\r\n    //call stack) will work properly.\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\shiro\\core\\src\\test\\java\\org\\apache\\shiro\\test\\ExampleShiroUnitTest.java",
  "methodName" : "testSimple",
  "sourceCode" : "@Test\r\nvoid testSimple() {\r\n    //1.  Create a mock Subject instance for the test to run\r\n    //    (for example, as an authenticated Subject):\r\n    Subject subjectUnderTest = createNiceMock(Subject.class);\r\n    expect(subjectUnderTest.isAuthenticated()).andReturn(true);\r\n    //2. Bind the subject to the current thread:\r\n    setSubject(subjectUnderTest);\r\n    //perform test logic here.  Any call to\r\n    //SecurityUtils.getSubject() directly (or nested in the\r\n    //call stack) will work properly.\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\shiro\\core\\src\\test\\java\\org\\apache\\shiro\\util\\AntPathMatcherTests.java",
  "methodName" : "match",
  "sourceCode" : "@SuppressWarnings(\"checkstyle:MethodLength\")\r\n@Test\r\nvoid match() {\r\n    // test exact matching\r\n    assertTrue(pathMatcher.match(\"test\", \"test\"));\r\n    assertTrue(pathMatcher.match(\"/test\", \"/test\"));\r\n    assertTrue(pathMatcher.match(\"https://example.org\", \"https://example.org\"));\r\n    assertFalse(pathMatcher.match(\"/test.jpg\", \"test.jpg\"));\r\n    assertFalse(pathMatcher.match(\"test\", \"/test\"));\r\n    assertFalse(pathMatcher.match(\"/test\", \"test\"));\r\n    // test matching with ?'s\r\n    assertTrue(pathMatcher.match(\"t?st\", \"test\"));\r\n    assertTrue(pathMatcher.match(\"??st\", \"test\"));\r\n    assertTrue(pathMatcher.match(\"tes?\", \"test\"));\r\n    assertTrue(pathMatcher.match(\"te??\", \"test\"));\r\n    assertTrue(pathMatcher.match(\"?es?\", \"test\"));\r\n    assertFalse(pathMatcher.match(\"tes?\", \"tes\"));\r\n    assertFalse(pathMatcher.match(\"tes?\", \"testt\"));\r\n    assertFalse(pathMatcher.match(\"tes?\", \"tsst\"));\r\n    // test matching with *'s\r\n    assertTrue(pathMatcher.match(\"*\", \"test\"));\r\n    assertTrue(pathMatcher.match(\"test*\", \"test\"));\r\n    assertTrue(pathMatcher.match(\"test*\", \"testTest\"));\r\n    assertTrue(pathMatcher.match(\"test/*\", \"test/Test\"));\r\n    assertTrue(pathMatcher.match(\"test/*\", \"test/t\"));\r\n    assertTrue(pathMatcher.match(\"test/*\", \"test/\"));\r\n    assertTrue(pathMatcher.match(\"*test*\", \"AnothertestTest\"));\r\n    assertTrue(pathMatcher.match(\"*test\", \"Anothertest\"));\r\n    assertTrue(pathMatcher.match(\"*.*\", \"test.\"));\r\n    assertTrue(pathMatcher.match(\"*.*\", \"test.test\"));\r\n    assertTrue(pathMatcher.match(\"*.*\", \"test.test.test\"));\r\n    assertTrue(pathMatcher.match(\"test*aaa\", \"testblaaaa\"));\r\n    assertFalse(pathMatcher.match(\"test*\", \"tst\"));\r\n    assertFalse(pathMatcher.match(\"test*\", \"tsttest\"));\r\n    assertFalse(pathMatcher.match(\"test*\", \"test/\"));\r\n    assertFalse(pathMatcher.match(\"test*\", \"test/t\"));\r\n    assertFalse(pathMatcher.match(\"test/*\", \"test\"));\r\n    assertFalse(pathMatcher.match(\"*test*\", \"tsttst\"));\r\n    assertFalse(pathMatcher.match(\"*test\", \"tsttst\"));\r\n    assertFalse(pathMatcher.match(\"*.*\", \"tsttst\"));\r\n    assertFalse(pathMatcher.match(\"test*aaa\", \"test\"));\r\n    assertFalse(pathMatcher.match(\"test*aaa\", \"testblaaab\"));\r\n    // test matching with ?'s and /'s\r\n    assertTrue(pathMatcher.match(\"/?\", \"/a\"));\r\n    assertTrue(pathMatcher.match(\"/?/a\", \"/a/a\"));\r\n    assertTrue(pathMatcher.match(\"/a/?\", \"/a/b\"));\r\n    assertTrue(pathMatcher.match(\"/??/a\", \"/aa/a\"));\r\n    assertTrue(pathMatcher.match(\"/a/??\", \"/a/bb\"));\r\n    assertTrue(pathMatcher.match(\"/?\", \"/a\"));\r\n    // test matching with **'s\r\n    assertTrue(pathMatcher.match(\"/**\", \"/testing/testing\"));\r\n    assertTrue(pathMatcher.match(\"/*/**\", \"/testing/testing\"));\r\n    assertTrue(pathMatcher.match(\"/**/*\", \"/testing/testing\"));\r\n    assertTrue(pathMatcher.match(\"/bla/**/bla\", \"/bla/testing/testing/bla\"));\r\n    assertTrue(pathMatcher.match(\"/bla/**/bla\", \"/bla/testing/testing/bla/bla\"));\r\n    assertTrue(pathMatcher.match(\"/**/test\", \"/bla/bla/test\"));\r\n    assertTrue(pathMatcher.match(\"/bla/**/**/bla\", \"/bla/bla/bla/bla/bla/bla\"));\r\n    assertTrue(pathMatcher.match(\"/bla*bla/test\", \"/blaXXXbla/test\"));\r\n    assertTrue(pathMatcher.match(\"/*bla/test\", \"/XXXbla/test\"));\r\n    assertFalse(pathMatcher.match(\"/bla*bla/test\", \"/blaXXXbl/test\"));\r\n    assertFalse(pathMatcher.match(\"/*bla/test\", \"XXXblab/test\"));\r\n    assertFalse(pathMatcher.match(\"/*bla/test\", \"XXXbl/test\"));\r\n    assertFalse(pathMatcher.match(\"/????\", \"/bala/bla\"));\r\n    assertFalse(pathMatcher.match(\"/**/*bla\", \"/bla/bla/bla/bbb\"));\r\n    assertTrue(pathMatcher.match(\"/*bla*/**/bla/**\", \"/XXXblaXXXX/testing/testing/bla/testing/testing/\"));\r\n    assertTrue(pathMatcher.match(\"/*bla*/**/bla/*\", \"/XXXblaXXXX/testing/testing/bla/testing\"));\r\n    assertTrue(pathMatcher.match(\"/*bla*/**/bla/**\", \"/XXXblaXXXX/testing/testing/bla/testing/testing\"));\r\n    assertTrue(pathMatcher.match(\"/*bla*/**/bla/**\", \"/XXXblaXXXX/testing/testing/bla/testing/testing.jpg\"));\r\n    assertTrue(pathMatcher.match(\"*bla*/**/bla/**\", \"XXXblaXXXX/testing/testing/bla/testing/testing/\"));\r\n    assertTrue(pathMatcher.match(\"*bla*/**/bla/*\", \"XXXblaXXXX/testing/testing/bla/testing\"));\r\n    assertTrue(pathMatcher.match(\"*bla*/**/bla/**\", \"XXXblaXXXX/testing/testing/bla/testing/testing\"));\r\n    assertFalse(pathMatcher.match(\"*bla*/**/bla/*\", \"XXXblaXXXX/testing/testing/bla/testing/testing\"));\r\n    assertFalse(pathMatcher.match(\"/x/x/**/bla\", \"/x/x/x/\"));\r\n    assertTrue(pathMatcher.match(\"/foo/bar/**\", \"/foo/bar\"));\r\n    assertTrue(pathMatcher.match(\"\", \"\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\shiro\\core\\src\\test\\java\\org\\apache\\shiro\\util\\AntPathMatcherTests.java",
  "methodName" : "matchWithNullPath",
  "sourceCode" : "@Test\r\nvoid matchWithNullPath() {\r\n    assertFalse(pathMatcher.match(\"/test\", null));\r\n    assertFalse(pathMatcher.match(\"/\", null));\r\n    assertFalse(pathMatcher.match(null, null));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\shiro\\core\\src\\test\\java\\org\\apache\\shiro\\util\\AntPathMatcherTests.java",
  "methodName" : "matchStart",
  "sourceCode" : "@SuppressWarnings(\"checkstyle:MethodLength\")\r\n@Test\r\nvoid matchStart() {\r\n    // test exact matching\r\n    assertTrue(pathMatcher.matchStart(\"test\", \"test\"));\r\n    assertTrue(pathMatcher.matchStart(\"/test\", \"/test\"));\r\n    assertFalse(pathMatcher.matchStart(\"/test.jpg\", \"test.jpg\"));\r\n    assertFalse(pathMatcher.matchStart(\"test\", \"/test\"));\r\n    assertFalse(pathMatcher.matchStart(\"/test\", \"test\"));\r\n    // test matching with ?'s\r\n    assertTrue(pathMatcher.matchStart(\"t?st\", \"test\"));\r\n    assertTrue(pathMatcher.matchStart(\"??st\", \"test\"));\r\n    assertTrue(pathMatcher.matchStart(\"tes?\", \"test\"));\r\n    assertTrue(pathMatcher.matchStart(\"te??\", \"test\"));\r\n    assertTrue(pathMatcher.matchStart(\"?es?\", \"test\"));\r\n    assertFalse(pathMatcher.matchStart(\"tes?\", \"tes\"));\r\n    assertFalse(pathMatcher.matchStart(\"tes?\", \"testt\"));\r\n    assertFalse(pathMatcher.matchStart(\"tes?\", \"tsst\"));\r\n    // test matching with *'s\r\n    assertTrue(pathMatcher.matchStart(\"*\", \"test\"));\r\n    assertTrue(pathMatcher.matchStart(\"test*\", \"test\"));\r\n    assertTrue(pathMatcher.matchStart(\"test*\", \"testTest\"));\r\n    assertTrue(pathMatcher.matchStart(\"test/*\", \"test/Test\"));\r\n    assertTrue(pathMatcher.matchStart(\"test/*\", \"test/t\"));\r\n    assertTrue(pathMatcher.matchStart(\"test/*\", \"test/\"));\r\n    assertTrue(pathMatcher.matchStart(\"*test*\", \"AnothertestTest\"));\r\n    assertTrue(pathMatcher.matchStart(\"*test\", \"Anothertest\"));\r\n    assertTrue(pathMatcher.matchStart(\"*.*\", \"test.\"));\r\n    assertTrue(pathMatcher.matchStart(\"*.*\", \"test.test\"));\r\n    assertTrue(pathMatcher.matchStart(\"*.*\", \"test.test.test\"));\r\n    assertTrue(pathMatcher.matchStart(\"test*aaa\", \"testblaaaa\"));\r\n    assertFalse(pathMatcher.matchStart(\"test*\", \"tst\"));\r\n    assertFalse(pathMatcher.matchStart(\"test*\", \"test/\"));\r\n    assertFalse(pathMatcher.matchStart(\"test*\", \"tsttest\"));\r\n    assertFalse(pathMatcher.matchStart(\"test*\", \"test/\"));\r\n    assertFalse(pathMatcher.matchStart(\"test*\", \"test/t\"));\r\n    assertTrue(pathMatcher.matchStart(\"test/*\", \"test\"));\r\n    assertTrue(pathMatcher.matchStart(\"test/t*.txt\", \"test\"));\r\n    assertFalse(pathMatcher.matchStart(\"*test*\", \"tsttst\"));\r\n    assertFalse(pathMatcher.matchStart(\"*test\", \"tsttst\"));\r\n    assertFalse(pathMatcher.matchStart(\"*.*\", \"tsttst\"));\r\n    assertFalse(pathMatcher.matchStart(\"test*aaa\", \"test\"));\r\n    assertFalse(pathMatcher.matchStart(\"test*aaa\", \"testblaaab\"));\r\n    // test matching with ?'s and /'s\r\n    assertTrue(pathMatcher.matchStart(\"/?\", \"/a\"));\r\n    assertTrue(pathMatcher.matchStart(\"/?/a\", \"/a/a\"));\r\n    assertTrue(pathMatcher.matchStart(\"/a/?\", \"/a/b\"));\r\n    assertTrue(pathMatcher.matchStart(\"/??/a\", \"/aa/a\"));\r\n    assertTrue(pathMatcher.matchStart(\"/a/??\", \"/a/bb\"));\r\n    assertTrue(pathMatcher.matchStart(\"/?\", \"/a\"));\r\n    // test matching with **'s\r\n    assertTrue(pathMatcher.matchStart(\"/**\", \"/testing/testing\"));\r\n    assertTrue(pathMatcher.matchStart(\"/*/**\", \"/testing/testing\"));\r\n    assertTrue(pathMatcher.matchStart(\"/**/*\", \"/testing/testing\"));\r\n    assertTrue(pathMatcher.matchStart(\"test*/**\", \"test/\"));\r\n    assertTrue(pathMatcher.matchStart(\"test*/**\", \"test/t\"));\r\n    assertTrue(pathMatcher.matchStart(\"/bla/**/bla\", \"/bla/testing/testing/bla\"));\r\n    assertTrue(pathMatcher.matchStart(\"/bla/**/bla\", \"/bla/testing/testing/bla/bla\"));\r\n    assertTrue(pathMatcher.matchStart(\"/**/test\", \"/bla/bla/test\"));\r\n    assertTrue(pathMatcher.matchStart(\"/bla/**/**/bla\", \"/bla/bla/bla/bla/bla/bla\"));\r\n    assertTrue(pathMatcher.matchStart(\"/bla*bla/test\", \"/blaXXXbla/test\"));\r\n    assertTrue(pathMatcher.matchStart(\"/*bla/test\", \"/XXXbla/test\"));\r\n    assertFalse(pathMatcher.matchStart(\"/bla*bla/test\", \"/blaXXXbl/test\"));\r\n    assertFalse(pathMatcher.matchStart(\"/*bla/test\", \"XXXblab/test\"));\r\n    assertFalse(pathMatcher.matchStart(\"/*bla/test\", \"XXXbl/test\"));\r\n    assertFalse(pathMatcher.matchStart(\"/????\", \"/bala/bla\"));\r\n    assertTrue(pathMatcher.matchStart(\"/**/*bla\", \"/bla/bla/bla/bbb\"));\r\n    assertTrue(pathMatcher.matchStart(\"/*bla*/**/bla/**\", \"/XXXblaXXXX/testing/testing/bla/testing/testing/\"));\r\n    assertTrue(pathMatcher.matchStart(\"/*bla*/**/bla/*\", \"/XXXblaXXXX/testing/testing/bla/testing\"));\r\n    assertTrue(pathMatcher.matchStart(\"/*bla*/**/bla/**\", \"/XXXblaXXXX/testing/testing/bla/testing/testing\"));\r\n    assertTrue(pathMatcher.matchStart(\"/*bla*/**/bla/**\", \"/XXXblaXXXX/testing/testing/bla/testing/testing.jpg\"));\r\n    assertTrue(pathMatcher.matchStart(\"*bla*/**/bla/**\", \"XXXblaXXXX/testing/testing/bla/testing/testing/\"));\r\n    assertTrue(pathMatcher.matchStart(\"*bla*/**/bla/*\", \"XXXblaXXXX/testing/testing/bla/testing\"));\r\n    assertTrue(pathMatcher.matchStart(\"*bla*/**/bla/**\", \"XXXblaXXXX/testing/testing/bla/testing/testing\"));\r\n    assertTrue(pathMatcher.matchStart(\"*bla*/**/bla/*\", \"XXXblaXXXX/testing/testing/bla/testing/testing\"));\r\n    assertTrue(pathMatcher.matchStart(\"/x/x/**/bla\", \"/x/x/x/\"));\r\n    assertTrue(pathMatcher.matchStart(\"\", \"\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\shiro\\core\\src\\test\\java\\org\\apache\\shiro\\util\\AntPathMatcherTests.java",
  "methodName" : "uniqueDelimiter",
  "sourceCode" : "@Test\r\nvoid uniqueDelimiter() {\r\n    pathMatcher.setPathSeparator(\".\");\r\n    // test exact matching\r\n    assertTrue(pathMatcher.match(\"test\", \"test\"));\r\n    assertTrue(pathMatcher.match(\".test\", \".test\"));\r\n    assertFalse(pathMatcher.match(\".test/jpg\", \"test/jpg\"));\r\n    assertFalse(pathMatcher.match(\"test\", \".test\"));\r\n    assertFalse(pathMatcher.match(\".test\", \"test\"));\r\n    // test matching with ?'s\r\n    assertTrue(pathMatcher.match(\"t?st\", \"test\"));\r\n    assertTrue(pathMatcher.match(\"??st\", \"test\"));\r\n    assertTrue(pathMatcher.match(\"tes?\", \"test\"));\r\n    assertTrue(pathMatcher.match(\"te??\", \"test\"));\r\n    assertTrue(pathMatcher.match(\"?es?\", \"test\"));\r\n    assertFalse(pathMatcher.match(\"tes?\", \"tes\"));\r\n    assertFalse(pathMatcher.match(\"tes?\", \"testt\"));\r\n    assertFalse(pathMatcher.match(\"tes?\", \"tsst\"));\r\n    // test matching with *'s\r\n    assertTrue(pathMatcher.match(\"*\", \"test\"));\r\n    assertTrue(pathMatcher.match(\"test*\", \"test\"));\r\n    assertTrue(pathMatcher.match(\"test*\", \"testTest\"));\r\n    assertTrue(pathMatcher.match(\"*test*\", \"AnothertestTest\"));\r\n    assertTrue(pathMatcher.match(\"*test\", \"Anothertest\"));\r\n    assertTrue(pathMatcher.match(\"*/*\", \"test/\"));\r\n    assertTrue(pathMatcher.match(\"*/*\", \"test/test\"));\r\n    assertTrue(pathMatcher.match(\"*/*\", \"test/test/test\"));\r\n    assertTrue(pathMatcher.match(\"test*aaa\", \"testblaaaa\"));\r\n    assertFalse(pathMatcher.match(\"test*\", \"tst\"));\r\n    assertFalse(pathMatcher.match(\"test*\", \"tsttest\"));\r\n    assertFalse(pathMatcher.match(\"*test*\", \"tsttst\"));\r\n    assertFalse(pathMatcher.match(\"*test\", \"tsttst\"));\r\n    assertFalse(pathMatcher.match(\"*/*\", \"tsttst\"));\r\n    assertFalse(pathMatcher.match(\"test*aaa\", \"test\"));\r\n    assertFalse(pathMatcher.match(\"test*aaa\", \"testblaaab\"));\r\n    // test matching with ?'s and .'s\r\n    assertTrue(pathMatcher.match(\".?\", \".a\"));\r\n    assertTrue(pathMatcher.match(\".?.a\", \".a.a\"));\r\n    assertTrue(pathMatcher.match(\".a.?\", \".a.b\"));\r\n    assertTrue(pathMatcher.match(\".??.a\", \".aa.a\"));\r\n    assertTrue(pathMatcher.match(\".a.??\", \".a.bb\"));\r\n    assertTrue(pathMatcher.match(\".?\", \".a\"));\r\n    // test matching with **'s\r\n    assertTrue(pathMatcher.match(\".**\", \".testing.testing\"));\r\n    assertTrue(pathMatcher.match(\".*.**\", \".testing.testing\"));\r\n    assertTrue(pathMatcher.match(\".**.*\", \".testing.testing\"));\r\n    assertTrue(pathMatcher.match(\".bla.**.bla\", \".bla.testing.testing.bla\"));\r\n    assertTrue(pathMatcher.match(\".bla.**.bla\", \".bla.testing.testing.bla.bla\"));\r\n    assertTrue(pathMatcher.match(\".**.test\", \".bla.bla.test\"));\r\n    assertTrue(pathMatcher.match(\".bla.**.**.bla\", \".bla.bla.bla.bla.bla.bla\"));\r\n    assertTrue(pathMatcher.match(\".bla*bla.test\", \".blaXXXbla.test\"));\r\n    assertTrue(pathMatcher.match(\".*bla.test\", \".XXXbla.test\"));\r\n    assertFalse(pathMatcher.match(\".bla*bla.test\", \".blaXXXbl.test\"));\r\n    assertFalse(pathMatcher.match(\".*bla.test\", \"XXXblab.test\"));\r\n    assertFalse(pathMatcher.match(\".*bla.test\", \"XXXbl.test\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\shiro\\core\\src\\test\\java\\org\\apache\\shiro\\util\\AntPathMatcherTests.java",
  "methodName" : "extractPathWithinPattern",
  "sourceCode" : "@Test\r\nvoid extractPathWithinPattern() throws Exception {\r\n    assertEquals(\"\", pathMatcher.extractPathWithinPattern(\"/docs/commit.html\", \"/docs/commit.html\"));\r\n    assertEquals(\"cvs/commit\", pathMatcher.extractPathWithinPattern(\"/docs/*\", \"/docs/cvs/commit\"));\r\n    assertEquals(\"commit.html\", pathMatcher.extractPathWithinPattern(\"/docs/cvs/*.html\", \"/docs/cvs/commit.html\"));\r\n    assertEquals(\"cvs/commit\", pathMatcher.extractPathWithinPattern(\"/docs/**\", \"/docs/cvs/commit\"));\r\n    assertEquals(\"cvs/commit.html\", pathMatcher.extractPathWithinPattern(\"/docs/**/*.html\", \"/docs/cvs/commit.html\"));\r\n    assertEquals(\"commit.html\", pathMatcher.extractPathWithinPattern(\"/docs/**/*.html\", \"/docs/commit.html\"));\r\n    assertEquals(\"commit.html\", pathMatcher.extractPathWithinPattern(\"/*.html\", \"/commit.html\"));\r\n    assertEquals(\"docs/commit.html\", pathMatcher.extractPathWithinPattern(\"/*.html\", \"/docs/commit.html\"));\r\n    assertEquals(\"/commit.html\", pathMatcher.extractPathWithinPattern(\"*.html\", \"/commit.html\"));\r\n    assertEquals(\"/docs/commit.html\", pathMatcher.extractPathWithinPattern(\"*.html\", \"/docs/commit.html\"));\r\n    assertEquals(\"/docs/commit.html\", pathMatcher.extractPathWithinPattern(\"**/*.*\", \"/docs/commit.html\"));\r\n    assertEquals(\"/docs/commit.html\", pathMatcher.extractPathWithinPattern(\"*\", \"/docs/commit.html\"));\r\n    assertEquals(\"/docs/cvs/other/commit.html\", pathMatcher.extractPathWithinPattern(\"**/commit.html\", \"/docs/cvs/other/commit.html\"));\r\n    assertEquals(\"cvs/other/commit.html\", pathMatcher.extractPathWithinPattern(\"/docs/**/commit.html\", \"/docs/cvs/other/commit.html\"));\r\n    assertEquals(\"cvs/other/commit.html\", pathMatcher.extractPathWithinPattern(\"/docs/**/**/**/**\", \"/docs/cvs/other/commit.html\"));\r\n    assertEquals(\"docs/cvs/commit\", pathMatcher.extractPathWithinPattern(\"/d?cs/*\", \"/docs/cvs/commit\"));\r\n    assertEquals(\"cvs/commit.html\", pathMatcher.extractPathWithinPattern(\"/docs/c?s/*.html\", \"/docs/cvs/commit.html\"));\r\n    assertEquals(\"docs/cvs/commit\", pathMatcher.extractPathWithinPattern(\"/d?cs/**\", \"/docs/cvs/commit\"));\r\n    assertEquals(\"docs/cvs/commit.html\", pathMatcher.extractPathWithinPattern(\"/d?cs/**/*.html\", \"/docs/cvs/commit.html\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\shiro\\core\\src\\test\\java\\org\\apache\\shiro\\util\\AntPathMatcherTests.java",
  "methodName" : "spaceInTokens",
  "sourceCode" : "@Test\r\nvoid spaceInTokens() {\r\n    assertTrue(pathMatcher.match(\"/group/sales/members\", \"/group/sales/members\"));\r\n    assertFalse(pathMatcher.match(\"/group/sales/members\", \"/Group/  sales/Members\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\shiro\\core\\src\\test\\java\\org\\apache\\shiro\\util\\AntPathMatcherTests.java",
  "methodName" : "isPattern",
  "sourceCode" : "@Test\r\nvoid isPattern() {\r\n    assertTrue(pathMatcher.isPattern(\"/test/*\"));\r\n    assertTrue(pathMatcher.isPattern(\"/test/**/name\"));\r\n    assertTrue(pathMatcher.isPattern(\"/test?\"));\r\n    assertFalse(pathMatcher.isPattern(\"/test/{name}\"));\r\n    assertFalse(pathMatcher.isPattern(\"/test/name\"));\r\n    assertFalse(pathMatcher.isPattern(\"/test/foo{bar\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\shiro\\core\\src\\test\\java\\org\\apache\\shiro\\util\\AntPathMatcherTests.java",
  "methodName" : "matches",
  "sourceCode" : "@Test\r\nvoid matches() {\r\n    assertTrue(pathMatcher.matches(\"/foo/*\", \"/foo/\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\shiro\\core\\src\\test\\java\\org\\apache\\shiro\\util\\AntPathMatcherTests.java",
  "methodName" : "isPatternWithNullPath",
  "sourceCode" : "@Test\r\nvoid isPatternWithNullPath() {\r\n    assertFalse(pathMatcher.isPattern(null));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\shiro\\core\\src\\test\\java\\org\\apache\\shiro\\util\\PermissionUtilsTest.java",
  "methodName" : "SHIRO_902_quoted_permissions",
  "sourceCode" : "@SuppressWarnings(\"checkstyle:MethodName\")\r\n@Test\r\nvoid SHIRO_902_quoted_permissions() {\r\n    // given\r\n    var permission = \"user:read,write:*\";\r\n    var quotedPermission = \"\\\"\" + permission + \"\\\"\";\r\n    // when\r\n    final Set<Permission> permissions = PermissionUtils.resolveDelimitedPermissions(quotedPermission, RESOLVER);\r\n    // then\r\n    assertThat(permissions).containsExactly(new WildcardPermission(permission));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\shiro\\core\\src\\test\\java\\org\\apache\\shiro\\util\\RegExPatternMatcherTest.java",
  "methodName" : "testSimplePattern",
  "sourceCode" : "@Test\r\nvoid testSimplePattern() {\r\n    assertPatternMatch(\"a*b\", \"aaaaaaab\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\shiro\\core\\src\\test\\java\\org\\apache\\shiro\\util\\RegExPatternMatcherTest.java",
  "methodName" : "testMatchesWithCarriageReturn",
  "sourceCode" : "@Test\r\nvoid testMatchesWithCarriageReturn() {\r\n    assertPatternMatch(\".*\", \"/blah\\n\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\shiro\\core\\src\\test\\java\\org\\apache\\shiro\\util\\RegExPatternMatcherTest.java",
  "methodName" : "testMatchesWithLineFeed",
  "sourceCode" : "@Test\r\nvoid testMatchesWithLineFeed() {\r\n    assertPatternMatch(\".*\", \"/blah\\r\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\shiro\\core\\src\\test\\java\\org\\apache\\shiro\\util\\RegExPatternMatcherTest.java",
  "methodName" : "testCaseInsensitive",
  "sourceCode" : "@Test\r\nvoid testCaseInsensitive() {\r\n    RegExPatternMatcher pm = new RegExPatternMatcher();\r\n    pm.setCaseInsensitive(true);\r\n    assertPatternMatch(\"/blah\", \"/BlaH\", pm);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\shiro\\core\\src\\test\\java\\org\\apache\\shiro\\util\\RegExPatternMatcherTest.java",
  "methodName" : "testCaseSensitive",
  "sourceCode" : "@Test\r\nvoid testCaseSensitive() {\r\n    assertPatternNotMatch(\"/blah\", \"/BlaH\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\shiro\\core\\src\\test\\java\\org\\apache\\shiro\\util\\StringUtilsTest.java",
  "methodName" : "splitWithNullInput",
  "sourceCode" : "@Test\r\nvoid splitWithNullInput() {\r\n    String line = null;\r\n    String[] split = StringUtils.split(line);\r\n    assertNull(split);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\shiro\\core\\src\\test\\java\\org\\apache\\shiro\\util\\StringUtilsTest.java",
  "methodName" : "splitWithCommas",
  "sourceCode" : "@Test\r\nvoid splitWithCommas() {\r\n    String line = \"shall,we,play,a,game?\";\r\n    String[] split = StringUtils.split(line);\r\n    assertNotNull(split);\r\n    assertEquals(5, split.length);\r\n    assertEquals(\"shall\", split[0]);\r\n    assertEquals(\"we\", split[1]);\r\n    assertEquals(\"play\", split[2]);\r\n    assertEquals(\"a\", split[3]);\r\n    assertEquals(\"game?\", split[4]);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\shiro\\core\\src\\test\\java\\org\\apache\\shiro\\util\\StringUtilsTest.java",
  "methodName" : "splitWithCommasAndSpaces",
  "sourceCode" : "@Test\r\nvoid splitWithCommasAndSpaces() {\r\n    String line = \"shall,we ,    play, a,game?\";\r\n    String[] split = StringUtils.split(line);\r\n    assertNotNull(split);\r\n    assertEquals(5, split.length);\r\n    assertEquals(\"shall\", split[0]);\r\n    assertEquals(\"we\", split[1]);\r\n    assertEquals(\"play\", split[2]);\r\n    assertEquals(\"a\", split[3]);\r\n    assertEquals(\"game?\", split[4]);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\shiro\\core\\src\\test\\java\\org\\apache\\shiro\\util\\StringUtilsTest.java",
  "methodName" : "splitWithQuotedCommasAndSpaces",
  "sourceCode" : "@Test\r\nvoid splitWithQuotedCommasAndSpaces() {\r\n    String line = \"shall, \\\"we, play\\\", a, game?\";\r\n    String[] split = StringUtils.split(line);\r\n    assertNotNull(split);\r\n    assertEquals(4, split.length);\r\n    assertEquals(\"shall\", split[0]);\r\n    assertEquals(\"we, play\", split[1]);\r\n    assertEquals(\"a\", split[2]);\r\n    assertEquals(\"game?\", split[3]);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\shiro\\core\\src\\test\\java\\org\\apache\\shiro\\util\\StringUtilsTest.java",
  "methodName" : "splitWithQuotedCommasAndSpacesAndDifferentQuoteChars",
  "sourceCode" : "@Test\r\nvoid splitWithQuotedCommasAndSpacesAndDifferentQuoteChars() {\r\n    String line = \"authc, test[blah], test[1,2,3], test[]\";\r\n    String[] split = StringUtils.split(line, ',', '[', ']', false, true);\r\n    assertNotNull(split);\r\n    assertEquals(4, split.length);\r\n    assertEquals(\"authc\", split[0]);\r\n    assertEquals(\"testblah\", split[1]);\r\n    assertEquals(\"test1,2,3\", split[2]);\r\n    assertEquals(\"test\", split[3]);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\shiro\\core\\src\\test\\java\\org\\apache\\shiro\\util\\StringUtilsTest.java",
  "methodName" : "splitWithQuotedCommasAndSpacesAndDifferentQuoteCharsWhileRetainingQuotes",
  "sourceCode" : "@Test\r\nvoid splitWithQuotedCommasAndSpacesAndDifferentQuoteCharsWhileRetainingQuotes() {\r\n    String line = \"authc, test[blah], test[1,2,3], test[]\";\r\n    String[] split = StringUtils.split(line, ',', '[', ']', true, true);\r\n    assertNotNull(split);\r\n    assertEquals(4, split.length);\r\n    assertEquals(\"authc\", split[0]);\r\n    assertEquals(\"test[blah]\", split[1]);\r\n    assertEquals(\"test[1,2,3]\", split[2]);\r\n    assertEquals(\"test[]\", split[3]);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\shiro\\core\\src\\test\\java\\org\\apache\\shiro\\util\\StringUtilsTest.java",
  "methodName" : "splitTestWithQuotedCommas",
  "sourceCode" : "@Test\r\nvoid splitTestWithQuotedCommas() {\r\n    String line = \"authc, test[blah], test[\\\"1,2,3\\\"], test[]\";\r\n    String[] split = StringUtils.split(line);\r\n    assertNotNull(split);\r\n    assertEquals(4, split.length);\r\n    assertEquals(\"authc\", split[0]);\r\n    assertEquals(\"test[blah]\", split[1]);\r\n    assertEquals(\"test[1,2,3]\", split[2]);\r\n    assertEquals(\"test[]\", split[3]);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\shiro\\core\\src\\test\\java\\org\\apache\\shiro\\util\\StringUtilsTest.java",
  "methodName" : "splitWithQuotedCommasAndSpacesAndEscapedQuotes",
  "sourceCode" : "@Test\r\nvoid splitWithQuotedCommasAndSpacesAndEscapedQuotes() {\r\n    String line = \"shall, \\\"\\\"\\\"we, play\\\", a, \\\"\\\"\\\"game?\";\r\n    String[] split = StringUtils.split(line);\r\n    assertNotNull(split);\r\n    assertEquals(4, split.length);\r\n    assertEquals(\"shall\", split[0]);\r\n    assertEquals(\"\\\"we, play\", split[1]);\r\n    assertEquals(\"a\", split[2]);\r\n    assertEquals(\"\\\"game?\", split[3]);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\shiro\\integration-tests\\guice3\\src\\test\\java\\org\\apache\\shiro\\samples\\guice\\ContainerIntegrationIT.java",
  "methodName" : "logIn",
  "sourceCode" : "@Test\r\nvoid logIn() throws FailingHttpStatusCodeException, MalformedURLException, IOException, InterruptedException {\r\n    HtmlPage page = webClient.getPage(getBaseUri() + \"login.jsp\");\r\n    HtmlForm form = page.getFormByName(\"loginform\");\r\n    form.getInputByName(\"username\").setValueAttribute(\"root\");\r\n    form.getInputByName(\"password\").setValueAttribute(\"secret\");\r\n    page = form.getInputByName(\"submit\").click();\r\n    // This'll throw an exception if not logged in\r\n    page.getAnchorByHref(\"/logout\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\shiro\\integration-tests\\guice3\\src\\test\\java\\org\\apache\\shiro\\samples\\guice\\ContainerIntegrationIT.java",
  "methodName" : "logInAndRememberMe",
  "sourceCode" : "@Test\r\nvoid logInAndRememberMe() throws Exception {\r\n    HtmlPage page = webClient.getPage(getBaseUri() + \"login.jsp\");\r\n    HtmlForm form = page.getFormByName(\"loginform\");\r\n    form.getInputByName(\"username\").setValueAttribute(\"root\");\r\n    form.getInputByName(\"password\").setValueAttribute(\"secret\");\r\n    HtmlCheckBoxInput checkbox = form.getInputByName(\"rememberMe\");\r\n    checkbox.setChecked(true);\r\n    page = form.getInputByName(\"submit\").click();\r\n    jetty.stop();\r\n    jetty.start();\r\n    page = webClient.getPage(getBaseUri());\r\n    // page.getAnchorByHref(\"/logout\");\r\n    WebAssert.assertLinkPresentWithText(page, \"Log out\");\r\n    page = page.getAnchorByHref(\"/account\").click();\r\n    // login page should be shown again - user remembered but not authenticated\r\n    WebAssert.assertFormPresent(page, \"loginform\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\shiro\\integration-tests\\guice4\\src\\test\\java\\org\\apache\\shiro\\samples\\guice\\ContainerIntegrationIT.java",
  "methodName" : "logIn",
  "sourceCode" : "@Test\r\nvoid logIn() throws FailingHttpStatusCodeException, MalformedURLException, IOException, InterruptedException {\r\n    HtmlPage page = webClient.getPage(getBaseUri() + \"login.jsp\");\r\n    HtmlForm form = page.getFormByName(\"loginform\");\r\n    form.getInputByName(\"username\").setValueAttribute(\"root\");\r\n    form.getInputByName(\"password\").setValueAttribute(\"secret\");\r\n    page = form.getInputByName(\"submit\").click();\r\n    // This'll throw an exception if not logged in\r\n    page.getAnchorByHref(\"/logout\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\shiro\\integration-tests\\guice4\\src\\test\\java\\org\\apache\\shiro\\samples\\guice\\ContainerIntegrationIT.java",
  "methodName" : "logInAndRememberMe",
  "sourceCode" : "@Test\r\nvoid logInAndRememberMe() throws Exception {\r\n    HtmlPage page = webClient.getPage(getBaseUri() + \"login.jsp\");\r\n    HtmlForm form = page.getFormByName(\"loginform\");\r\n    form.getInputByName(\"username\").setValueAttribute(\"root\");\r\n    form.getInputByName(\"password\").setValueAttribute(\"secret\");\r\n    HtmlCheckBoxInput checkbox = form.getInputByName(\"rememberMe\");\r\n    checkbox.setChecked(true);\r\n    page = form.getInputByName(\"submit\").click();\r\n    jetty.stop();\r\n    jetty.start();\r\n    page = webClient.getPage(getBaseUri());\r\n    // page.getAnchorByHref(\"/logout\");\r\n    WebAssert.assertLinkPresentWithText(page, \"Log out\");\r\n    page = page.getAnchorByHref(\"/account\").click();\r\n    // login page should be shown again - user remembered but not authenticated\r\n    WebAssert.assertFormPresent(page, \"loginform\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\shiro\\integration-tests\\jakarta-ee\\src\\test\\java\\org\\apache\\shiro\\testing\\cdi\\ComponentInjectionIT.java",
  "methodName" : "securityManagerInjection",
  "sourceCode" : "@Test\r\n@OperateOnDeployment(TESTABLE_MODE)\r\nvoid securityManagerInjection() {\r\n    assertNotNull(injectedComponents.getSecurityManager());\r\n    assertNull(injectedComponents.getSecurityManager().getSession(() -> null));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\shiro\\integration-tests\\jakarta-ee\\src\\test\\java\\org\\apache\\shiro\\testing\\cdi\\ComponentInjectionIT.java",
  "methodName" : "subjectInjection",
  "sourceCode" : "@Test\r\n@OperateOnDeployment(TESTABLE_MODE)\r\nvoid subjectInjection() {\r\n    assertNotNull(injectedComponents.getSubject());\r\n    assertNull(injectedComponents.getSubject().getPrincipal());\r\n    assertFalse(injectedComponents.getSubject().isAuthenticated());\r\n    UsernamePasswordToken token = new UsernamePasswordToken(\"user\", \"password\");\r\n    injectedComponents.getSubject().login(token);\r\n    assertTrue(injectedComponents.getSubject().isAuthenticated());\r\n    injectedComponents.getSubject().logout();\r\n    assertFalse(injectedComponents.getSubject().isAuthenticated());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\shiro\\integration-tests\\jakarta-ee\\src\\test\\java\\org\\apache\\shiro\\testing\\cdi\\ComponentInjectionIT.java",
  "methodName" : "sessionInjection",
  "sourceCode" : "@Test\r\n@OperateOnDeployment(TESTABLE_MODE)\r\nvoid sessionInjection() {\r\n    assertNotNull(injectedComponents.getSession());\r\n    assertNotNull(injectedComponents.getNoCreateionSession());\r\n    injectedComponents.getSession().setAttribute(\"hello\", \"bye\");\r\n    assertEquals(\"bye\", injectedComponents.getSession().getAttribute(\"hello\"));\r\n    assertEquals(\"bye\", injectedComponents.getNoCreateionSession().getAttribute(\"hello\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\shiro\\integration-tests\\jakarta-ee\\src\\test\\java\\org\\apache\\shiro\\testing\\cdi\\ComponentInjectionIT.java",
  "methodName" : "principalInjection",
  "sourceCode" : "@Test\r\n@OperateOnDeployment(TESTABLE_MODE)\r\nvoid principalInjection() {\r\n    SecurityUtils.getSubject().login(new UsernamePasswordToken(\"user\", \"password\"));\r\n    assertNotNull(injectedComponents.getPropertyPrincipal());\r\n    assertEquals(\"user\", Optional.ofNullable(injectedComponents.getPropertyPrincipal().get()).orElseThrow().getUserName());\r\n    injectedComponents.getSubject().logout();\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\shiro\\integration-tests\\jakarta-ee\\src\\test\\java\\org\\apache\\shiro\\testing\\jakarta\\ee\\FacesTagsIT.java",
  "methodName" : "guestTag",
  "sourceCode" : "@Test\r\n@OperateOnDeployment(DEPLOYMENT_DEV_MODE)\r\nvoid guestTag() {\r\n    webDriver.get(baseURL + \"shiro/unprotected/tags\");\r\n    assertEquals(\"Guest Content\", guest.getText());\r\n    login();\r\n    webDriver.get(baseURL + \"shiro/unprotected/tags\");\r\n    assertEquals(\"\", guest.getText());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\shiro\\integration-tests\\jakarta-ee\\src\\test\\java\\org\\apache\\shiro\\testing\\jakarta\\ee\\FacesTagsIT.java",
  "methodName" : "userTag",
  "sourceCode" : "@Test\r\n@OperateOnDeployment(DEPLOYMENT_DEV_MODE)\r\nvoid userTag() {\r\n    webDriver.get(baseURL + \"shiro/unprotected/tags\");\r\n    assertEquals(\"\", user.getText());\r\n    login();\r\n    webDriver.get(baseURL + \"shiro/unprotected/tags\");\r\n    assertEquals(\"User Content\", user.getText());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\shiro\\integration-tests\\jakarta-ee\\src\\test\\java\\org\\apache\\shiro\\testing\\jakarta\\ee\\FacesTagsIT.java",
  "methodName" : "authenticated",
  "sourceCode" : "@Test\r\n@OperateOnDeployment(DEPLOYMENT_DEV_MODE)\r\nvoid authenticated() {\r\n    webDriver.get(baseURL + \"shiro/unprotected/tags\");\r\n    assertEquals(\"\", authenticated.getText());\r\n    login();\r\n    webDriver.get(baseURL + \"shiro/unprotected/tags\");\r\n    assertEquals(\"Authenticated Content\", authenticated.getText());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\shiro\\integration-tests\\jakarta-ee\\src\\test\\java\\org\\apache\\shiro\\testing\\jakarta\\ee\\FacesTagsIT.java",
  "methodName" : "notAuthenticated",
  "sourceCode" : "@Test\r\n@OperateOnDeployment(DEPLOYMENT_DEV_MODE)\r\nvoid notAuthenticated() {\r\n    webDriver.get(baseURL + \"shiro/unprotected/tags\");\r\n    assertEquals(\"Not Authenticated Content\", notAuthenticated.getText());\r\n    login();\r\n    webDriver.get(baseURL + \"shiro/unprotected/tags\");\r\n    assertEquals(\"\", notAuthenticated.getText());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\shiro\\integration-tests\\jakarta-ee\\src\\test\\java\\org\\apache\\shiro\\testing\\jakarta\\ee\\FacesTagsIT.java",
  "methodName" : "principal",
  "sourceCode" : "@Test\r\n@OperateOnDeployment(DEPLOYMENT_DEV_MODE)\r\nvoid principal() {\r\n    login();\r\n    webDriver.get(baseURL + \"shiro/unprotected/tags\");\r\n    assertEquals(\"webuser\", principal.getText());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\shiro\\integration-tests\\jakarta-ee\\src\\test\\java\\org\\apache\\shiro\\testing\\jakarta\\ee\\FacesTagsIT.java",
  "methodName" : "principalByType",
  "sourceCode" : "@Test\r\n@SuppressWarnings(\"MagicNumber\")\r\n@OperateOnDeployment(DEPLOYMENT_DEV_MODE)\r\nvoid principalByType() {\r\n    login();\r\n    webDriver.get(baseURL + \"shiro/unprotected/tags\");\r\n    assertEquals(\"5\", principalByType.getText());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\shiro\\integration-tests\\jakarta-ee\\src\\test\\java\\org\\apache\\shiro\\testing\\jakarta\\ee\\FacesTagsIT.java",
  "methodName" : "principalByProperty",
  "sourceCode" : "@Test\r\n@OperateOnDeployment(DEPLOYMENT_DEV_MODE)\r\nvoid principalByProperty() {\r\n    login();\r\n    webDriver.get(baseURL + \"shiro/unprotected/tags\");\r\n    assertEquals(\"webuser\", principalByProperty.getText());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\shiro\\integration-tests\\jakarta-ee\\src\\test\\java\\org\\apache\\shiro\\testing\\jakarta\\ee\\FacesTagsIT.java",
  "methodName" : "hasRegularRole",
  "sourceCode" : "@Test\r\n@OperateOnDeployment(DEPLOYMENT_DEV_MODE)\r\nvoid hasRegularRole() {\r\n    login();\r\n    webDriver.get(baseURL + \"shiro/unprotected/tags\");\r\n    assertEquals(\"Regular Role\", regularRole.getText());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\shiro\\integration-tests\\jakarta-ee\\src\\test\\java\\org\\apache\\shiro\\testing\\jakarta\\ee\\FacesTagsIT.java",
  "methodName" : "lacksAdminRole",
  "sourceCode" : "@Test\r\n@OperateOnDeployment(DEPLOYMENT_DEV_MODE)\r\nvoid lacksAdminRole() {\r\n    login();\r\n    webDriver.get(baseURL + \"shiro/unprotected/tags\");\r\n    assertEquals(\"Lacks Admin Role\", lacksAdminRole.getText());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\shiro\\integration-tests\\jakarta-ee\\src\\test\\java\\org\\apache\\shiro\\testing\\jakarta\\ee\\FacesTagsIT.java",
  "methodName" : "hasAnyRole",
  "sourceCode" : "@Test\r\n@OperateOnDeployment(DEPLOYMENT_DEV_MODE)\r\nvoid hasAnyRole() {\r\n    login();\r\n    webDriver.get(baseURL + \"shiro/unprotected/tags\");\r\n    assertEquals(\"Has Some Role\", hasAnyRole.getText());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\shiro\\integration-tests\\jakarta-ee\\src\\test\\java\\org\\apache\\shiro\\testing\\jakarta\\ee\\FacesTagsIT.java",
  "methodName" : "hasAnyPermission",
  "sourceCode" : "@Test\r\n@OperateOnDeployment(DEPLOYMENT_DEV_MODE)\r\nvoid hasAnyPermission() {\r\n    login();\r\n    webDriver.get(baseURL + \"shiro/unprotected/tags\");\r\n    assertEquals(\"Has Some Permission\", hasAnyPermission.getText());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\shiro\\integration-tests\\jakarta-ee\\src\\test\\java\\org\\apache\\shiro\\testing\\jakarta\\ee\\FacesTagsIT.java",
  "methodName" : "hasPermission",
  "sourceCode" : "@Test\r\n@OperateOnDeployment(DEPLOYMENT_DEV_MODE)\r\nvoid hasPermission() {\r\n    login();\r\n    webDriver.get(baseURL + \"shiro/unprotected/tags\");\r\n    assertEquals(\"Has Permission\", hasPermission.getText());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\shiro\\integration-tests\\jakarta-ee\\src\\test\\java\\org\\apache\\shiro\\testing\\jakarta\\ee\\FacesTagsIT.java",
  "methodName" : "lacksPermissio",
  "sourceCode" : "@Test\r\n@OperateOnDeployment(DEPLOYMENT_DEV_MODE)\r\nvoid lacksPermissio() {\r\n    login();\r\n    webDriver.get(baseURL + \"shiro/unprotected/tags\");\r\n    assertEquals(\"Lacks Permission\", lacksPermission.getText());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\shiro\\integration-tests\\jakarta-ee\\src\\test\\java\\org\\apache\\shiro\\testing\\jakarta\\ee\\FacesTagsIT.java",
  "methodName" : "remembered",
  "sourceCode" : "@Test\r\n@OperateOnDeployment(DEPLOYMENT_DEV_MODE)\r\nvoid remembered() {\r\n    login();\r\n    webDriver.get(baseURL + \"shiro/unprotected/tags\");\r\n    assertEquals(\"\", remembered.getText());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\shiro\\integration-tests\\jakarta-ee\\src\\test\\java\\org\\apache\\shiro\\testing\\jakarta\\ee\\ShiroAuthFormsIT.java",
  "methodName" : "protectedPageWithLogin",
  "sourceCode" : "@Test\r\n@OperateOnDeployment(DEPLOYMENT_DEV_MODE)\r\nvoid protectedPageWithLogin() {\r\n    webDriver.get(baseURL + \"shiro/protected\");\r\n    assertTrue(webDriver.getCurrentUrl().contains(\"shiro/auth\"), \"redirect to login\");\r\n    login();\r\n    assertEquals(\"Protected Page\", webDriver.getTitle());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\shiro\\integration-tests\\jakarta-ee\\src\\test\\java\\org\\apache\\shiro\\testing\\jakarta\\ee\\ShiroAuthFormsIT.java",
  "methodName" : "checkLogout",
  "sourceCode" : "@Test\r\n@OperateOnDeployment(DEPLOYMENT_DEV_MODE)\r\nvoid checkLogout() {\r\n    webDriver.get(baseURL + \"shiro/protected\");\r\n    login();\r\n    guardHttp(logout).click();\r\n    assertTrue(webDriver.getCurrentUrl().contains(\"shiro/auth\"), \"redirect to login\");\r\n    login();\r\n    assertEquals(\"Protected Page\", webDriver.getTitle());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\shiro\\integration-tests\\jakarta-ee\\src\\test\\java\\org\\apache\\shiro\\testing\\jakarta\\ee\\ShiroAuthFormsIT.java",
  "methodName" : "nonJSFLogin",
  "sourceCode" : "@Test\r\n@OperateOnDeployment(DEPLOYMENT_DEV_MODE)\r\nvoid nonJSFLogin() {\r\n    webDriver.get(baseURL + \"shiro/protected\");\r\n    username.sendKeys(\"webuser\");\r\n    password.sendKeys(\"webpwd\");\r\n    guardHttp(nonJSFLogin).click();\r\n    assertEquals(\"Protected Page\", webDriver.getTitle());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\shiro\\integration-tests\\jakarta-ee\\src\\test\\java\\org\\apache\\shiro\\testing\\jakarta\\ee\\ShiroAuthFormsIT.java",
  "methodName" : "logoutViaFilterThenLoginAndForm",
  "sourceCode" : "@Test\r\n@OperateOnDeployment(DEPLOYMENT_DEV_MODE)\r\nvoid logoutViaFilterThenLoginAndForm() {\r\n    webDriver.get(baseURL + \"shiro/form\");\r\n    username.sendKeys(\"webuser\");\r\n    password.sendKeys(\"webpwd\");\r\n    guardHttp(nonJSFLogin).click();\r\n    guardHttp(logoutViaFilter).click();\r\n    assertTrue(webDriver.getCurrentUrl().contains(\"shiro/auth\"), \"redirect to login\");\r\n    username.sendKeys(\"webuser\");\r\n    password.sendKeys(\"webpwd\");\r\n    guardHttp(nonJSFLogin).click();\r\n    firstName.sendKeys(\"Jack\");\r\n    lastName.sendKeys(\"Frost\");\r\n    guardHttp(submitFirst).click();\r\n    assertEquals(\"Form Submitted - firstName: Jack, lastName: Frost\", messages.getText());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\shiro\\integration-tests\\jakarta-ee\\src\\test\\java\\org\\apache\\shiro\\testing\\jakarta\\ee\\ShiroAuthFormsIT.java",
  "methodName" : "rememberMe",
  "sourceCode" : "@Test\r\n@OperateOnDeployment(DEPLOYMENT_DEV_MODE)\r\nvoid rememberMe() {\r\n    webDriver.get(baseURL + \"shiro/protected\");\r\n    if (!rememberMe.isSelected()) {\r\n        rememberMe.click();\r\n    }\r\n    login();\r\n    webDriver.manage().deleteCookieNamed(isShiroNativeSessionsIntegrationTest() ? \"native_session_cookie\" : DEFAULT_SESSION_ID_NAME);\r\n    webDriver.navigate().refresh();\r\n    assertEquals(\"Protected Page\", webDriver.getTitle());\r\n    guardHttp(logout).click();\r\n    assertTrue(webDriver.getCurrentUrl().contains(\"shiro/auth\"), \"redirect to login\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\shiro\\integration-tests\\jakarta-ee\\src\\test\\java\\org\\apache\\shiro\\testing\\jakarta\\ee\\ShiroAuthFormsIT.java",
  "methodName" : "unauthorized",
  "sourceCode" : "@Test\r\n@OperateOnDeployment(DEPLOYMENT_DEV_MODE)\r\nvoid unauthorized() {\r\n    webDriver.get(baseURL + \"shiro/adminpage\");\r\n    login();\r\n    assertEquals(\"Unauthorized\", webDriver.getTitle());\r\n    guardHttp(logout).click();\r\n    assertEquals(baseURL + \"index\", webDriver.getCurrentUrl());\r\n    webDriver.get(baseURL + \"shiro/adminpage\");\r\n    username.sendKeys(\"admin\");\r\n    password.sendKeys(\"adminpwd\");\r\n    guardHttp(login).click();\r\n    assertEquals(\"Admin Page\", webDriver.getTitle());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\shiro\\integration-tests\\jakarta-ee\\src\\test\\java\\org\\apache\\shiro\\testing\\jakarta\\ee\\ShiroAuthFormsIT.java",
  "methodName" : "incorrectLoginOnce",
  "sourceCode" : "@Test\r\n@OperateOnDeployment(DEPLOYMENT_DEV_MODE)\r\nvoid incorrectLoginOnce() {\r\n    webDriver.get(baseURL + \"shiro/protected\");\r\n    username.sendKeys(\"webuser\");\r\n    password.sendKeys(\"wrongpwd\");\r\n    guardHttp(login).click();\r\n    assertEquals(\"Login Failed\", loginFailureMessage.getText());\r\n    login();\r\n    assertEquals(\"Protected Page\", webDriver.getTitle());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\shiro\\integration-tests\\jakarta-ee\\src\\test\\java\\org\\apache\\shiro\\testing\\jakarta\\ee\\ShiroAuthFormsIT.java",
  "methodName" : "nonAjaxSessionExpired",
  "sourceCode" : "@Test\r\n@OperateOnDeployment(DEPLOYMENT_DEV_MODE)\r\nvoid nonAjaxSessionExpired() {\r\n    webDriver.get(baseURL + \"shiro/form\");\r\n    login();\r\n    invalidateSession.click();\r\n    waitGui(webDriver).until(ExpectedConditions.alertIsPresent());\r\n    webDriver.switchTo().alert().accept();\r\n    firstName.sendKeys(\"Jack\");\r\n    lastName.sendKeys(\"Frost\");\r\n    guardHttp(submitFirst).click();\r\n    assertEquals(\"Your Session Has Expired\", sessionExpiredMessage.getText());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\shiro\\integration-tests\\jakarta-ee\\src\\test\\java\\org\\apache\\shiro\\testing\\jakarta\\ee\\ShiroAuthFormsIT.java",
  "methodName" : "nonAjaxResubmit",
  "sourceCode" : "@Test\r\n@OperateOnDeployment(DEPLOYMENT_DEV_MODE)\r\nvoid nonAjaxResubmit() {\r\n    nonAjaxSessionExpired();\r\n    login();\r\n    assertEquals(\"Form Submitted - firstName: Jack, lastName: Frost\", messages.getText());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\shiro\\integration-tests\\jakarta-ee\\src\\test\\java\\org\\apache\\shiro\\testing\\jakarta\\ee\\ShiroAuthFormsIT.java",
  "methodName" : "nonAjaxResubmitAfterFailedLogin",
  "sourceCode" : "@Test\r\n@OperateOnDeployment(DEPLOYMENT_DEV_MODE)\r\nvoid nonAjaxResubmitAfterFailedLogin() {\r\n    nonAjaxSessionExpired();\r\n    username.sendKeys(\"xxx\");\r\n    password.sendKeys(\"yyy\");\r\n    guardHttp(login).click();\r\n    login();\r\n    assertEquals(\"Form Submitted - firstName: Jack, lastName: Frost\", messages.getText());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\shiro\\integration-tests\\jakarta-ee\\src\\test\\java\\org\\apache\\shiro\\testing\\jakarta\\ee\\ShiroAuthFormsIT.java",
  "methodName" : "nonAjaxRememberedResubmit",
  "sourceCode" : "@Test\r\n@OperateOnDeployment(DEPLOYMENT_DEV_MODE)\r\nvoid nonAjaxRememberedResubmit() {\r\n    webDriver.get(baseURL + \"shiro/form\");\r\n    rememberMe.click();\r\n    login();\r\n    invalidateSession.click();\r\n    waitGui(webDriver).until(ExpectedConditions.alertIsPresent());\r\n    webDriver.switchTo().alert().accept();\r\n    firstName.sendKeys(\"Jack\");\r\n    lastName.sendKeys(\"Frost\");\r\n    guardHttp(submitFirst).click();\r\n    assertEquals(\"Form Submitted - firstName: Jack, lastName: Frost\", messages.getText());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\shiro\\integration-tests\\jakarta-ee\\src\\test\\java\\org\\apache\\shiro\\testing\\jakarta\\ee\\ShiroAuthFormsIT.java",
  "methodName" : "ajaxSessionExpired",
  "sourceCode" : "@Test\r\n@OperateOnDeployment(DEPLOYMENT_DEV_MODE)\r\nvoid ajaxSessionExpired() {\r\n    webDriver.get(baseURL + \"shiro/form\");\r\n    login();\r\n    invalidateSession.click();\r\n    waitGui(webDriver).until(ExpectedConditions.alertIsPresent());\r\n    webDriver.switchTo().alert().accept();\r\n    address.sendKeys(\"1 Houston Street\");\r\n    city.sendKeys(\"New York\");\r\n    waitForHttp(submitSecond).click();\r\n    assertEquals(\"Your Session Has Expired\", sessionExpiredMessage.getText());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\shiro\\integration-tests\\jakarta-ee\\src\\test\\java\\org\\apache\\shiro\\testing\\jakarta\\ee\\ShiroAuthFormsIT.java",
  "methodName" : "ajaxResubmit",
  "sourceCode" : "@Test\r\n@OperateOnDeployment(DEPLOYMENT_DEV_MODE)\r\nvoid ajaxResubmit() {\r\n    ajaxSessionExpired();\r\n    login();\r\n    assertEquals(\"2nd Form Submitted - Address: 1 Houston Street, City: New York\", secondFormMessages.getText());\r\n    address.sendKeys(\"Workshop\");\r\n    city.sendKeys(\"North Pole\");\r\n    guardAjax(submitSecond).click();\r\n    assertEquals(\"2nd Form Submitted - Address: Workshop, City: North Pole\", secondFormMessages.getText());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\shiro\\integration-tests\\jakarta-ee\\src\\test\\java\\org\\apache\\shiro\\testing\\jakarta\\ee\\ShiroAuthFormsIT.java",
  "methodName" : "ajaxRememberedResubmit",
  "sourceCode" : "@Test\r\n@OperateOnDeployment(DEPLOYMENT_DEV_MODE)\r\nvoid ajaxRememberedResubmit() {\r\n    webDriver.get(baseURL + \"shiro/form\");\r\n    rememberMe.click();\r\n    login();\r\n    address.sendKeys(\"1 Houston Street\");\r\n    city.sendKeys(\"New York\");\r\n    invalidateSession.click();\r\n    waitGui(webDriver).until(ExpectedConditions.alertIsPresent());\r\n    webDriver.switchTo().alert().accept();\r\n    if (isClientStateSavingIntegrationTest()) {\r\n        guardAjax(submitSecond).click();\r\n        address.clear();\r\n        city.clear();\r\n    } else {\r\n        waitForHttp(submitSecond).click();\r\n    }\r\n    assertEquals(\"2nd Form Submitted - Address: 1 Houston Street, City: New York\", secondFormMessages.getText());\r\n    address.sendKeys(\"Workshop\");\r\n    city.sendKeys(\"North Pole\");\r\n    invalidateSession.click();\r\n    waitGui(webDriver).until(ExpectedConditions.alertIsPresent());\r\n    webDriver.switchTo().alert().accept();\r\n    if (isClientStateSavingIntegrationTest()) {\r\n        guardAjax(submitSecond).click();\r\n        address.clear();\r\n        city.clear();\r\n    } else {\r\n        waitForHttp(submitSecond).click();\r\n    }\r\n    assertEquals(\"2nd Form Submitted - Address: Workshop, City: North Pole\", secondFormMessages.getText());\r\n    address.sendKeys(\"LAX Airport\");\r\n    city.sendKeys(\"Los Angeles\");\r\n    guardAjax(submitSecond).click();\r\n    assertEquals(\"2nd Form Submitted - Address: LAX Airport, City: Los Angeles\", secondFormMessages.getText());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\shiro\\integration-tests\\jakarta-ee\\src\\test\\java\\org\\apache\\shiro\\testing\\jakarta\\ee\\ShiroAuthFormsIT.java",
  "methodName" : "alreadyLoggedIn",
  "sourceCode" : "@Test\r\n@OperateOnDeployment(DEPLOYMENT_DEV_MODE)\r\nvoid alreadyLoggedIn() {\r\n    webDriver.get(baseURL + \"shiro/form\");\r\n    login();\r\n    webDriver.get(baseURL + \"shiro/auth/loginform\");\r\n    login();\r\n    assertEquals(\"Index\", webDriver.getTitle());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\shiro\\integration-tests\\jakarta-ee\\src\\test\\java\\org\\apache\\shiro\\testing\\jakarta\\ee\\ShiroBeansIT.java",
  "methodName" : "checkDontCallWhenNotAuth",
  "sourceCode" : "@Test\r\n@OperateOnDeployment(DEPLOYMENT_DEV_MODE)\r\nvoid checkDontCallWhenNotAuth() {\r\n    webDriver.get(baseURL + \"shiro/unprotected/manybeans\");\r\n    guardAjax(facesViewScoped).click();\r\n    assertTrue(messages.getText().startsWith(\"view scope unauth: Attempting to perform a user-only operation\"), \"anonymous user should get an exception\");\r\n    guardAjax(omniViewScoped).click();\r\n    assertTrue(messages.getText().startsWith(\"omni view scope unauth: Attempting to perform a user-only operation\"), \"anonymous user should get an exception\");\r\n    guardAjax(sessionScoped).click();\r\n    assertTrue(messages.getText().startsWith(\"session scoped unauth: Attempting to perform a user-only operation\"), \"anonymous user should get an exception\");\r\n    guardAjax(stateless).click();\r\n    assertTrue(messages.getText().startsWith(\"stateless bean unauth: Attempting to perform a user-only operation\"), \"anonymous user should get an exception\");\r\n    guardAjax(unprotectedMethod).click();\r\n    assertEquals(\"unprotected method: hello from unprotected\", messages.getText());\r\n    guardAjax(protectedMethod).click();\r\n    assertTrue(messages.getText().startsWith(\"protected unauth: Attempting to perform a user-only operation\"), \"anonymous user should get an exception\");\r\n    webDriver.get(baseURL + \"lastException\");\r\n    String exceptionText = webDriver.findElement(By.tagName(\"body\")).getText();\r\n    assertTrue(exceptionText.startsWith(jakartify(\"WARNING: javax.ejb.EJBException: Attempting to perform a user-only operation\")), String.format(\"capturing correct warning from the server: %s\", exceptionText));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\shiro\\integration-tests\\jakarta-ee\\src\\test\\java\\org\\apache\\shiro\\testing\\jakarta\\ee\\ShiroBeansIT.java",
  "methodName" : "checkCallWhenAuth",
  "sourceCode" : "@Test\r\n@OperateOnDeployment(DEPLOYMENT_DEV_MODE)\r\nvoid checkCallWhenAuth() {\r\n    webDriver.get(baseURL + \"shiro/auth/loginform\");\r\n    login();\r\n    webDriver.get(baseURL + \"shiro/unprotected/manybeans\");\r\n    guardAjax(facesViewScoped).click();\r\n    assertTrue(messages.getText().startsWith(\"Hello from FacesViewScoped\"));\r\n    guardAjax(omniViewScoped).click();\r\n    assertTrue(messages.getText().startsWith(\"Hello from OmniViewScoped\"));\r\n    guardAjax(sessionScoped).click();\r\n    assertTrue(messages.getText().startsWith(\"Hello from SessionScoped\"));\r\n    guardAjax(stateless).click();\r\n    assertTrue(messages.getText().startsWith(\"Hello from ProtectedStatelessBean\"));\r\n    guardAjax(protectedMethod).click();\r\n    assertEquals(\"protected method: hello from protected\", messages.getText());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\shiro\\integration-tests\\jakarta-ee\\src\\test\\java\\org\\apache\\shiro\\testing\\jakarta\\ee\\ShiroBeansIT.java",
  "methodName" : "beanDestroyCalled",
  "sourceCode" : "@Test\r\n@OperateOnDeployment(DEPLOYMENT_DEV_MODE)\r\nvoid beanDestroyCalled() {\r\n    exerciseViewAndSessionScoped(facesViewScoped, \"api/statistics/pc_fv\", \"api/statistics/pd_fv\", !isJakarta());\r\n    webDriver.get(baseURL + \"api/statistics/clear\");\r\n    exerciseViewAndSessionScoped(omniViewScoped, \"api/statistics/pc_ofv\", \"api/statistics/pd_ofv\", false);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\shiro\\integration-tests\\jakarta-ee\\src\\test\\java\\org\\apache\\shiro\\testing\\jakarta\\ee\\ShiroSSLFilterIT.java",
  "methodName" : "checkNonSSL",
  "sourceCode" : "@Test\r\n@OperateOnDeployment(DEPLOYMENT_PROD_MODE)\r\nvoid checkNonSSL() {\r\n    assertThrows(WebDriverException.class, () -> webDriver.get(baseURL + \"shiro/unprotected/manybeans\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\shiro\\integration-tests\\jakarta-ee\\src\\test\\java\\org\\apache\\shiro\\testing\\jakarta\\ee\\ShiroSSLFilterIT.java",
  "methodName" : "checkSSL",
  "sourceCode" : "@Test\r\n@OperateOnDeployment(DEPLOYMENT_PROD_MODE)\r\nvoid checkSSL() {\r\n    webDriver.get(toHttpsURL(baseURL) + \"shiro/unprotected/manybeans\");\r\n    assertEquals(\"Many Beans Unprotected\", webDriver.getTitle());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\shiro\\integration-tests\\jakarta-ee\\src\\test\\java\\org\\apache\\shiro\\testing\\jaxrs\\NoIniJaxRsIT.java",
  "methodName" : "whoami",
  "sourceCode" : "@Test\r\n@OperateOnDeployment(TESTABLE_MODE)\r\nvoid whoami() {\r\n    try {\r\n        var pojo = createWebTarget(\"whoami/whoami\", Credentials.builder().username(\"powerful\").password(\"awesome\").send(true).build()).request().get().readEntity(JsonPojo.class);\r\n        assertEquals(\"powerful\", pojo.getUserId());\r\n    } catch (JsonbException t) {\r\n        fail(t.getMessage());\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\shiro\\integration-tests\\jakarta-ee\\src\\test\\java\\org\\apache\\shiro\\testing\\jaxrs\\NoIniJaxRsIT.java",
  "methodName" : "unauthenticated",
  "sourceCode" : "@Test\r\n@OperateOnDeployment(TESTABLE_MODE)\r\nvoid unauthenticated() {\r\n    var pojo = createWebTarget(\"whoami/whoami\", Credentials.builder().send(false).build()).request().get().readEntity(JsonPojo.class);\r\n    assertEquals(\"unauthenticated\", pojo.getUserId());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\shiro\\integration-tests\\jakarta-ee\\src\\test\\java\\org\\apache\\shiro\\testing\\jaxrs\\NoIniJaxRsIT.java",
  "methodName" : "rolesAllowed",
  "sourceCode" : "@Test\r\n@OperateOnDeployment(TESTABLE_MODE)\r\nvoid rolesAllowed() {\r\n    assertEquals(Status.OK.getStatusCode(), createWebTarget(\"whoami/rolesAllowed\", Credentials.builder().username(\"regular\").password(\"meh\").send(true).build()).request().get().getStatus());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\shiro\\integration-tests\\jakarta-ee\\src\\test\\java\\org\\apache\\shiro\\testing\\jaxrs\\NoIniJaxRsIT.java",
  "methodName" : "otherRolesAllowed",
  "sourceCode" : "@Test\r\n@OperateOnDeployment(TESTABLE_MODE)\r\nvoid otherRolesAllowed() {\r\n    assertEquals(Status.OK.getStatusCode(), createWebTarget(\"whoami/otherRolesAllowed\", Credentials.builder().username(\"regular\").password(\"meh\").send(true).build()).request().get().getStatus());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\shiro\\integration-tests\\jakarta-ee\\src\\test\\java\\org\\apache\\shiro\\testing\\jaxrs\\NoIniJaxRsIT.java",
  "methodName" : "otherRolesNotAllowed",
  "sourceCode" : "@Test\r\n@OperateOnDeployment(TESTABLE_MODE)\r\nvoid otherRolesNotAllowed() {\r\n    assertEquals(Status.UNAUTHORIZED.getStatusCode(), createWebTarget(\"whoami/otherRolesAllowed\", Credentials.builder().username(\"powerful\").password(\"awesome\").send(true).build()).request().get().getStatus());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\shiro\\integration-tests\\jakarta-ee\\src\\test\\java\\org\\apache\\shiro\\testing\\jaxrs\\NoIniJaxRsIT.java",
  "methodName" : "rolesNotAllowed",
  "sourceCode" : "@Test\r\n@OperateOnDeployment(TESTABLE_MODE)\r\nvoid rolesNotAllowed() {\r\n    assertEquals(Status.UNAUTHORIZED.getStatusCode(), createWebTarget(\"whoami/rolesAllowed\", Credentials.builder().username(\"powerful\").password(\"awesome\").send(true).build()).request().get().getStatus());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\shiro\\integration-tests\\jakarta-ee\\src\\test\\java\\org\\apache\\shiro\\testing\\jaxrs\\NoIniJaxRsIT.java",
  "methodName" : "permit",
  "sourceCode" : "@Test\r\n@OperateOnDeployment(TESTABLE_MODE)\r\nvoid permit() {\r\n    assertEquals(Status.OK.getStatusCode(), createWebTarget(\"whoami/permit\", Credentials.builder().send(false).build()).request().get().getStatus());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\shiro\\integration-tests\\jakarta-ee\\src\\test\\java\\org\\apache\\shiro\\testing\\jaxrs\\NoIniJaxRsIT.java",
  "methodName" : "deny",
  "sourceCode" : "@Test\r\n@OperateOnDeployment(TESTABLE_MODE)\r\nvoid deny() {\r\n    assertEquals(Status.UNAUTHORIZED.getStatusCode(), createWebTarget(\"whoami/rolesAllowed\", Credentials.builder().username(\"powerful\").password(\"awesome\").send(true).build()).request().get().getStatus());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\shiro\\integration-tests\\jaxrs\\tests\\src\\main\\java\\org\\apache\\shiro\\testing\\jaxrs\\tests\\AbstractShiroJaxRsIT.java",
  "methodName" : "testGetUsersUnauthenticated",
  "sourceCode" : "@Test\r\npublic void testGetUsersUnauthenticated() {\r\n    final WebTarget usersTarget = client.target(getBaseUri()).path(\"troopers\");\r\n    final Response usersResponse = usersTarget.request(MediaType.APPLICATION_JSON_TYPE).buildGet().invoke();\r\n    assertEquals(Status.UNAUTHORIZED.getStatusCode(), usersResponse.getStatus());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\shiro\\integration-tests\\jaxrs\\tests\\src\\main\\java\\org\\apache\\shiro\\testing\\jaxrs\\tests\\AbstractShiroJaxRsIT.java",
  "methodName" : "testGetUsersBasicAuthenticated",
  "sourceCode" : "@SuppressWarnings({ \"checkstyle:MagicNumber\" })\r\n@Test\r\npublic void testGetUsersBasicAuthenticated() {\r\n    final WebTarget usersTarget = client.target(getBaseUri()).path(\"troopers\");\r\n    final String basicToken = Base64.getEncoder().encodeToString(\"root:secret\".getBytes(StandardCharsets.UTF_8));\r\n    final Response usersResponse = usersTarget.request(MediaType.APPLICATION_JSON_TYPE).header(\"Authorization\", \"Basic \" + basicToken).buildGet().invoke();\r\n    assertEquals(Status.OK.getStatusCode(), usersResponse.getStatus());\r\n    final Stormtrooper[] stormtroopers = usersResponse.readEntity(Stormtrooper[].class);\r\n    assertEquals(50, stormtroopers.length);\r\n    Arrays.stream(stormtroopers).forEach(stormtrooper -> assertTrue(stormtrooper.getStormtrooperId().getValue().startsWith(\"u\")));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\shiro\\lang\\src\\test\\java\\org\\apache\\shiro\\lang\\util\\ClassUtilsTest.java",
  "methodName" : "testGetPrimitiveClasses",
  "sourceCode" : "@Test\r\nvoid testGetPrimitiveClasses() throws UnknownClassException {\r\n    assertEquals(boolean.class, ClassUtils.forName(\"boolean\"));\r\n    assertEquals(byte.class, ClassUtils.forName(\"byte\"));\r\n    assertEquals(char.class, ClassUtils.forName(\"char\"));\r\n    assertEquals(short.class, ClassUtils.forName(\"short\"));\r\n    assertEquals(int.class, ClassUtils.forName(\"int\"));\r\n    assertEquals(long.class, ClassUtils.forName(\"long\"));\r\n    assertEquals(float.class, ClassUtils.forName(\"float\"));\r\n    assertEquals(double.class, ClassUtils.forName(\"double\"));\r\n    assertEquals(void.class, ClassUtils.forName(\"void\"));\r\n    assertEquals(boolean.class, ClassUtils.forName(boolean.class.getName()));\r\n    assertEquals(byte.class, ClassUtils.forName(byte.class.getName()));\r\n    assertEquals(char.class, ClassUtils.forName(char.class.getName()));\r\n    assertEquals(short.class, ClassUtils.forName(short.class.getName()));\r\n    assertEquals(int.class, ClassUtils.forName(int.class.getName()));\r\n    assertEquals(long.class, ClassUtils.forName(long.class.getName()));\r\n    assertEquals(float.class, ClassUtils.forName(float.class.getName()));\r\n    assertEquals(double.class, ClassUtils.forName(double.class.getName()));\r\n    assertEquals(void.class, ClassUtils.forName(void.class.getName()));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\shiro\\lang\\src\\test\\java\\org\\apache\\shiro\\lang\\util\\ClassUtilsTest.java",
  "methodName" : "testGetPrimitiveArrays",
  "sourceCode" : "@Test\r\nvoid testGetPrimitiveArrays() throws UnknownClassException {\r\n    assertEquals(boolean[].class, ClassUtils.forName(\"[Z\"));\r\n    assertEquals(byte[].class, ClassUtils.forName(\"[B\"));\r\n    assertEquals(char[].class, ClassUtils.forName(\"[C\"));\r\n    assertEquals(short[].class, ClassUtils.forName(\"[S\"));\r\n    assertEquals(int[].class, ClassUtils.forName(\"[I\"));\r\n    assertEquals(long[].class, ClassUtils.forName(\"[J\"));\r\n    assertEquals(float[].class, ClassUtils.forName(\"[F\"));\r\n    assertEquals(double[].class, ClassUtils.forName(\"[D\"));\r\n    assertEquals(boolean[].class, ClassUtils.forName(boolean[].class.getName()));\r\n    assertEquals(byte[].class, ClassUtils.forName(byte[].class.getName()));\r\n    assertEquals(char[].class, ClassUtils.forName(char[].class.getName()));\r\n    assertEquals(short[].class, ClassUtils.forName(short[].class.getName()));\r\n    assertEquals(int[].class, ClassUtils.forName(int[].class.getName()));\r\n    assertEquals(long[].class, ClassUtils.forName(long[].class.getName()));\r\n    assertEquals(float[].class, ClassUtils.forName(float[].class.getName()));\r\n    assertEquals(double[].class, ClassUtils.forName(double[].class.getName()));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\shiro\\lang\\src\\test\\java\\org\\apache\\shiro\\lang\\util\\ClassUtilsTest.java",
  "methodName" : "testGetClass",
  "sourceCode" : "@Test\r\nvoid testGetClass() {\r\n    assertEquals(String.class, ClassUtils.forName(\"java.lang.String\"));\r\n    assertEquals(String[].class, ClassUtils.forName(\"[Ljava.lang.String;\"));\r\n    assertEquals(String.class, ClassUtils.forName(String.class.getName()));\r\n    assertEquals(String[].class, ClassUtils.forName(String[].class.getName()));\r\n    assertEquals(ClassUtilsTest.class, ClassUtils.forName(\"org.apache.shiro.lang.util.ClassUtilsTest\"));\r\n    assertEquals(ClassUtilsTest[].class, ClassUtils.forName(\"[Lorg.apache.shiro.lang.util.ClassUtilsTest;\"));\r\n    assertEquals(ClassUtilsTest.class, ClassUtils.forName(ClassUtilsTest.class.getName()));\r\n    assertEquals(ClassUtilsTest[].class, ClassUtils.forName(ClassUtilsTest[].class.getName()));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\shiro\\samples\\aspectj\\src\\test\\java\\org\\apache\\shiro\\samples\\aspectj\\bank\\SecureBankServiceTest.java",
  "methodName" : "testCreateAccount",
  "sourceCode" : "@Test\r\nvoid testCreateAccount() throws Exception {\r\n    loginAsUser();\r\n    createAndValidateAccountFor(\"Bob Smith\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\shiro\\samples\\aspectj\\src\\test\\java\\org\\apache\\shiro\\samples\\aspectj\\bank\\SecureBankServiceTest.java",
  "methodName" : "testDepositInto_singleTx",
  "sourceCode" : "@Test\r\nvoid testDepositInto_singleTx() throws Exception {\r\n    loginAsUser();\r\n    long accountId = createAndValidateAccountFor(\"Joe Smith\");\r\n    makeDepositAndValidateAccount(accountId, 250, \"Joe Smith\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\shiro\\samples\\aspectj\\src\\test\\java\\org\\apache\\shiro\\samples\\aspectj\\bank\\SecureBankServiceTest.java",
  "methodName" : "testDepositInto_multiTxs",
  "sourceCode" : "@Test\r\nvoid testDepositInto_multiTxs() throws Exception {\r\n    loginAsUser();\r\n    long accountId = createAndValidateAccountFor(\"Everett Smith\");\r\n    makeDepositAndValidateAccount(accountId, 50, \"Everett Smith\");\r\n    makeDepositAndValidateAccount(accountId, 300, \"Everett Smith\");\r\n    makeDepositAndValidateAccount(accountId, 85, \"Everett Smith\");\r\n    assertAccount(\"Everett Smith\", true, 435, 3, accountId);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\shiro\\samples\\aspectj\\src\\test\\java\\org\\apache\\shiro\\samples\\aspectj\\bank\\SecureBankServiceTest.java",
  "methodName" : "testWithdrawFrom_emptyAccount",
  "sourceCode" : "@Test\r\nvoid testWithdrawFrom_emptyAccount() throws Exception {\r\n    assertThrows(NotEnoughFundsException.class, () -> {\r\n        loginAsUser();\r\n        long accountId = createAndValidateAccountFor(\"Wally Smith\");\r\n        service.withdrawFrom(accountId, 100);\r\n    });\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\shiro\\samples\\aspectj\\src\\test\\java\\org\\apache\\shiro\\samples\\aspectj\\bank\\SecureBankServiceTest.java",
  "methodName" : "testWithdrawFrom_notEnoughFunds",
  "sourceCode" : "@Test\r\nvoid testWithdrawFrom_notEnoughFunds() throws Exception {\r\n    assertThrows(NotEnoughFundsException.class, () -> {\r\n        loginAsUser();\r\n        long accountId = createAndValidateAccountFor(\"Frank Smith\");\r\n        makeDepositAndValidateAccount(accountId, 50, \"Frank Smith\");\r\n        service.withdrawFrom(accountId, 100);\r\n    });\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\shiro\\samples\\aspectj\\src\\test\\java\\org\\apache\\shiro\\samples\\aspectj\\bank\\SecureBankServiceTest.java",
  "methodName" : "testWithdrawFrom_singleTx",
  "sourceCode" : "@Test\r\nvoid testWithdrawFrom_singleTx() throws Exception {\r\n    loginAsUser();\r\n    long accountId = createAndValidateAccountFor(\"Al Smith\");\r\n    makeDepositAndValidateAccount(accountId, 500, \"Al Smith\");\r\n    makeWithdrawalAndValidateAccount(accountId, 100, \"Al Smith\");\r\n    assertAccount(\"Al Smith\", true, 400, 2, accountId);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\shiro\\samples\\aspectj\\src\\test\\java\\org\\apache\\shiro\\samples\\aspectj\\bank\\SecureBankServiceTest.java",
  "methodName" : "testWithdrawFrom_manyTxs",
  "sourceCode" : "@Test\r\nvoid testWithdrawFrom_manyTxs() throws Exception {\r\n    loginAsUser();\r\n    long accountId = createAndValidateAccountFor(\"Zoe Smith\");\r\n    makeDepositAndValidateAccount(accountId, 500, \"Zoe Smith\");\r\n    makeWithdrawalAndValidateAccount(accountId, 100, \"Zoe Smith\");\r\n    makeWithdrawalAndValidateAccount(accountId, 75, \"Zoe Smith\");\r\n    makeWithdrawalAndValidateAccount(accountId, 125, \"Zoe Smith\");\r\n    assertAccount(\"Zoe Smith\", true, 200, 4, accountId);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\shiro\\samples\\aspectj\\src\\test\\java\\org\\apache\\shiro\\samples\\aspectj\\bank\\SecureBankServiceTest.java",
  "methodName" : "testWithdrawFrom_upToZero",
  "sourceCode" : "@Test\r\nvoid testWithdrawFrom_upToZero() throws Exception {\r\n    loginAsUser();\r\n    long accountId = createAndValidateAccountFor(\"Zoe Smith\");\r\n    makeDepositAndValidateAccount(accountId, 500, \"Zoe Smith\");\r\n    makeWithdrawalAndValidateAccount(accountId, 500, \"Zoe Smith\");\r\n    assertAccount(\"Zoe Smith\", true, 0, 2, accountId);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\shiro\\samples\\aspectj\\src\\test\\java\\org\\apache\\shiro\\samples\\aspectj\\bank\\SecureBankServiceTest.java",
  "methodName" : "testCloseAccount_zeroBalance",
  "sourceCode" : "@Test\r\nvoid testCloseAccount_zeroBalance() throws Exception {\r\n    loginAsUser();\r\n    long accountId = createAndValidateAccountFor(\"Chris Smith\");\r\n    logoutCurrentSubject();\r\n    loginAsSupervisor();\r\n    double closingBalance = service.closeAccount(accountId);\r\n    assertEquals(0, (int) closingBalance);\r\n    assertAccount(\"Chris Smith\", false, 0, 1, accountId);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\shiro\\samples\\aspectj\\src\\test\\java\\org\\apache\\shiro\\samples\\aspectj\\bank\\SecureBankServiceTest.java",
  "methodName" : "testCloseAccount_withBalance",
  "sourceCode" : "@Test\r\nvoid testCloseAccount_withBalance() throws Exception {\r\n    loginAsUser();\r\n    long accountId = createAndValidateAccountFor(\"Gerry Smith\");\r\n    makeDepositAndValidateAccount(accountId, 385, \"Gerry Smith\");\r\n    logoutCurrentSubject();\r\n    loginAsSupervisor();\r\n    double closingBalance = service.closeAccount(accountId);\r\n    assertEquals(385, (int) closingBalance);\r\n    assertAccount(\"Gerry Smith\", false, 0, 2, accountId);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\shiro\\samples\\aspectj\\src\\test\\java\\org\\apache\\shiro\\samples\\aspectj\\bank\\SecureBankServiceTest.java",
  "methodName" : "testCloseAccount_alreadyClosed",
  "sourceCode" : "@Test\r\nvoid testCloseAccount_alreadyClosed() throws Exception {\r\n    assertThrows(InactiveAccountException.class, () -> {\r\n        loginAsUser();\r\n        long accountId = createAndValidateAccountFor(\"Chris Smith\");\r\n        logoutCurrentSubject();\r\n        loginAsSupervisor();\r\n        double closingBalance = service.closeAccount(accountId);\r\n        assertEquals(0, (int) closingBalance);\r\n        assertAccount(\"Chris Smith\", false, 0, 1, accountId);\r\n        service.closeAccount(accountId);\r\n    });\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\shiro\\samples\\aspectj\\src\\test\\java\\org\\apache\\shiro\\samples\\aspectj\\bank\\SecureBankServiceTest.java",
  "methodName" : "testCloseAccount_unauthorizedAttempt",
  "sourceCode" : "@Test\r\nvoid testCloseAccount_unauthorizedAttempt() throws Exception {\r\n    assertThrows(UnauthorizedException.class, () -> {\r\n        loginAsUser();\r\n        long accountId = createAndValidateAccountFor(\"Chris Smith\");\r\n        service.closeAccount(accountId);\r\n    });\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\shiro\\samples\\guice\\src\\test\\java\\org\\apache\\shiro\\samples\\guice\\ContainerIntegrationIT.java",
  "methodName" : "logIn",
  "sourceCode" : "@Test\r\nvoid logIn() throws FailingHttpStatusCodeException, MalformedURLException, IOException, InterruptedException {\r\n    HtmlPage page = webClient.getPage(getBaseUri() + \"login.jsp\");\r\n    HtmlForm form = page.getFormByName(\"loginform\");\r\n    form.getInputByName(\"username\").setValueAttribute(\"root\");\r\n    form.getInputByName(\"password\").setValueAttribute(\"secret\");\r\n    page = form.getInputByName(\"submit\").click();\r\n    // This'll throw an exception if not logged in\r\n    page.getAnchorByHref(\"/logout\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\shiro\\samples\\guice\\src\\test\\java\\org\\apache\\shiro\\samples\\guice\\ContainerIntegrationIT.java",
  "methodName" : "logInAndRememberMe",
  "sourceCode" : "@Test\r\nvoid logInAndRememberMe() throws Exception {\r\n    HtmlPage page = webClient.getPage(getBaseUri() + \"login.jsp\");\r\n    HtmlForm form = page.getFormByName(\"loginform\");\r\n    form.getInputByName(\"username\").setValueAttribute(\"root\");\r\n    form.getInputByName(\"password\").setValueAttribute(\"secret\");\r\n    HtmlCheckBoxInput checkbox = form.getInputByName(\"rememberMe\");\r\n    checkbox.setChecked(true);\r\n    page = form.getInputByName(\"submit\").click();\r\n    jetty.stop();\r\n    jetty.start();\r\n    page = webClient.getPage(getBaseUri());\r\n    // page.getAnchorByHref(\"/logout\");\r\n    WebAssert.assertLinkPresentWithText(page, \"Log out\");\r\n    page = page.getAnchorByHref(\"/account\").click();\r\n    // login page should be shown again - user remembered but not authenticated\r\n    WebAssert.assertFormPresent(page, \"loginform\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\shiro\\samples\\servlet-plugin\\src\\test\\java\\org\\apache\\shiro\\test\\ContainerIntegrationIT.java",
  "methodName" : "logIn",
  "sourceCode" : "@Test\r\nvoid logIn() throws FailingHttpStatusCodeException, MalformedURLException, IOException, InterruptedException {\r\n    HtmlPage page = webClient.getPage(getBaseUri() + \"login.jsp\");\r\n    HtmlForm form = page.getFormByName(\"loginform\");\r\n    form.getInputByName(\"username\").setValueAttribute(\"root\");\r\n    form.getInputByName(\"password\").setValueAttribute(\"secret\");\r\n    page = form.getInputByName(\"submit\").click();\r\n    // This'll throw an exception if not logged in\r\n    page.getAnchorByHref(\"/logout\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\shiro\\samples\\spring-hibernate\\src\\test\\java\\org\\apache\\shiro\\samples\\ContainerIntegrationIT.java",
  "methodName" : "logIn",
  "sourceCode" : "@Test\r\nvoid logIn() throws FailingHttpStatusCodeException, IOException, InterruptedException {\r\n    HtmlPage page = webClient.getPage(getBaseUri() + \"s/login\");\r\n    HtmlForm form = page.getFormByName(\"loginForm\");\r\n    form.<HtmlInput>getInputByName(\"username\").setValueAttribute(\"admin\");\r\n    form.<HtmlInput>getInputByName(\"password\").setValueAttribute(\"admin\");\r\n    page = form.<HtmlInput>getInputByValue(\"Login\").click();\r\n    // This'll throw an exception if not logged in\r\n    page.getAnchorByHref(\"/s/logout\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\shiro\\samples\\web\\src\\test\\java\\org\\apache\\shiro\\test\\WebAppContainerIntegrationIT.java",
  "methodName" : "logIn",
  "sourceCode" : "@Test\r\nvoid logIn() throws FailingHttpStatusCodeException, MalformedURLException, IOException, InterruptedException {\r\n    HtmlPage page = webClient.getPage(getTlsBaseUri() + \"login.jsp\");\r\n    HtmlForm form = page.getFormByName(\"loginform\");\r\n    form.getInputByName(\"username\").setValueAttribute(\"root\");\r\n    form.getInputByName(\"password\").setValueAttribute(\"secret\");\r\n    page = form.getInputByName(\"submit\").click();\r\n    // This'll throw an exception if not logged in\r\n    page.getAnchorByHref(\"/logout\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\shiro\\samples\\web-jakarta\\src\\test\\java\\org\\apache\\shiro\\test\\web\\jakarta\\WebContainerIT.java",
  "methodName" : "logIn",
  "sourceCode" : "@SuppressWarnings(\"checkstyle:MagicNumber\")\r\n@Test\r\npublic void logIn() {\r\n    final Client client = ClientBuilder.newClient();\r\n    try {\r\n        Cookie jsessionid;\r\n        try (Response loginPage = client.target(getBaseUri()).path(\"/login.jsp\").request(TEXT_HTML_TYPE).get()) {\r\n            jsessionid = new Cookie(\"JSESSIONID\", loginPage.getMetadata().get(\"Set-Cookie\").get(0).toString().split(\";\")[0].split(\"=\")[1]);\r\n            assertTrue(loginPage.readEntity(String.class).contains(\"loginform\"));\r\n        }\r\n        assertNotNull(jsessionid);\r\n        URI location;\r\n        try (Response loginAction = client.target(getBaseUri()).path(\"/login.jsp\").request(APPLICATION_FORM_URLENCODED).cookie(jsessionid).post(Entity.entity(\"username=root&password=secret&submit=Login\", APPLICATION_FORM_URLENCODED))) {\r\n            assertEquals(302, loginAction.getStatus());\r\n            location = loginAction.getLocation();\r\n        }\r\n        assertNotNull(location);\r\n        final String loggedPage = client.target(getBaseUri()).path(location.getPath()).request(APPLICATION_FORM_URLENCODED).cookie(jsessionid).get(String.class);\r\n        assertTrue(loggedPage.contains(\"Hi root!\"));\r\n    } finally {\r\n        client.close();\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\shiro\\support\\aspectj\\src\\test\\java\\org\\apache\\shiro\\aspectj\\DummyServiceTest.java",
  "methodName" : "testAnonymous_asAnonymous",
  "sourceCode" : "// TEST ANONYMOUS\r\n@Test\r\nvoid testAnonymous_asAnonymous() throws Exception {\r\n    securedService.anonymous();\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\shiro\\support\\aspectj\\src\\test\\java\\org\\apache\\shiro\\aspectj\\DummyServiceTest.java",
  "methodName" : "testAnonymous_asUser",
  "sourceCode" : "@Test\r\nvoid testAnonymous_asUser() throws Exception {\r\n    loginAsUser();\r\n    securedService.anonymous();\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\shiro\\support\\aspectj\\src\\test\\java\\org\\apache\\shiro\\aspectj\\DummyServiceTest.java",
  "methodName" : "testAnonymous_asAdmin",
  "sourceCode" : "@Test\r\nvoid testAnonymous_asAdmin() throws Exception {\r\n    loginAsAdmin();\r\n    securedService.anonymous();\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\shiro\\support\\aspectj\\src\\test\\java\\org\\apache\\shiro\\aspectj\\DummyServiceTest.java",
  "methodName" : "testGuest_asAnonymous",
  "sourceCode" : "// TEST GUEST\r\n@Test\r\nvoid testGuest_asAnonymous() throws Exception {\r\n    securedService.guest();\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\shiro\\support\\aspectj\\src\\test\\java\\org\\apache\\shiro\\aspectj\\DummyServiceTest.java",
  "methodName" : "testGuest_asUser",
  "sourceCode" : "@Test\r\nvoid testGuest_asUser() throws Exception {\r\n    assertThrows(UnauthenticatedException.class, () -> {\r\n        loginAsUser();\r\n        securedService.guest();\r\n    });\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\shiro\\support\\aspectj\\src\\test\\java\\org\\apache\\shiro\\aspectj\\DummyServiceTest.java",
  "methodName" : "testGuest_asAdmin",
  "sourceCode" : "@Test\r\nvoid testGuest_asAdmin() throws Exception {\r\n    assertThrows(UnauthenticatedException.class, () -> {\r\n        loginAsAdmin();\r\n        securedService.guest();\r\n    });\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\shiro\\support\\aspectj\\src\\test\\java\\org\\apache\\shiro\\aspectj\\DummyServiceTest.java",
  "methodName" : "testPeek_asAnonymous",
  "sourceCode" : "// TEST PEEK\r\n@Test\r\nvoid testPeek_asAnonymous() throws Exception {\r\n    assertThrows(UnauthenticatedException.class, () -> {\r\n        securedService.peek();\r\n    });\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\shiro\\support\\aspectj\\src\\test\\java\\org\\apache\\shiro\\aspectj\\DummyServiceTest.java",
  "methodName" : "testPeek_asUser",
  "sourceCode" : "@Test\r\nvoid testPeek_asUser() throws Exception {\r\n    loginAsUser();\r\n    securedService.peek();\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\shiro\\support\\aspectj\\src\\test\\java\\org\\apache\\shiro\\aspectj\\DummyServiceTest.java",
  "methodName" : "testPeek_asAdmin",
  "sourceCode" : "@Test\r\nvoid testPeek_asAdmin() throws Exception {\r\n    loginAsAdmin();\r\n    securedService.peek();\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\shiro\\support\\aspectj\\src\\test\\java\\org\\apache\\shiro\\aspectj\\DummyServiceTest.java",
  "methodName" : "testRetrieve_asAnonymous",
  "sourceCode" : "// TEST RETRIEVE\r\n//UnauthenticatedException per SHIRO-146\r\n@Test\r\nvoid testRetrieve_asAnonymous() throws Exception {\r\n    assertThrows(UnauthenticatedException.class, () -> {\r\n        securedService.retrieve();\r\n    });\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\shiro\\support\\aspectj\\src\\test\\java\\org\\apache\\shiro\\aspectj\\DummyServiceTest.java",
  "methodName" : "testRetrieve_asUser",
  "sourceCode" : "@Test\r\nvoid testRetrieve_asUser() throws Exception {\r\n    loginAsUser();\r\n    securedService.retrieve();\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\shiro\\support\\aspectj\\src\\test\\java\\org\\apache\\shiro\\aspectj\\DummyServiceTest.java",
  "methodName" : "testRetrieve_asAdmin",
  "sourceCode" : "@Test\r\nvoid testRetrieve_asAdmin() throws Exception {\r\n    loginAsAdmin();\r\n    securedService.retrieve();\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\shiro\\support\\aspectj\\src\\test\\java\\org\\apache\\shiro\\aspectj\\DummyServiceTest.java",
  "methodName" : "testChange_asAnonymous",
  "sourceCode" : "// TEST CHANGE\r\n//UnauthenticatedException per SHIRO-146\r\n@Test\r\nvoid testChange_asAnonymous() throws Exception {\r\n    assertThrows(UnauthenticatedException.class, () -> {\r\n        securedService.change();\r\n    });\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\shiro\\support\\aspectj\\src\\test\\java\\org\\apache\\shiro\\aspectj\\DummyServiceTest.java",
  "methodName" : "testChange_asUser",
  "sourceCode" : "@Test\r\nvoid testChange_asUser() throws Exception {\r\n    assertThrows(UnauthorizedException.class, () -> {\r\n        loginAsUser();\r\n        securedService.change();\r\n    });\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\shiro\\support\\aspectj\\src\\test\\java\\org\\apache\\shiro\\aspectj\\DummyServiceTest.java",
  "methodName" : "testChange_asAdmin",
  "sourceCode" : "@Test\r\nvoid testChange_asAdmin() throws Exception {\r\n    loginAsAdmin();\r\n    securedService.change();\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\shiro\\support\\aspectj\\src\\test\\java\\org\\apache\\shiro\\aspectj\\DummyServiceTest.java",
  "methodName" : "testRetrieveRestricted_asAnonymous",
  "sourceCode" : "// TEST RETRIEVE RESTRICTED\r\n//UnauthenticatedException per SHIRO-146\r\n@Test\r\nvoid testRetrieveRestricted_asAnonymous() throws Exception {\r\n    assertThrows(UnauthenticatedException.class, () -> {\r\n        restrictedService.retrieve();\r\n    });\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\shiro\\support\\aspectj\\src\\test\\java\\org\\apache\\shiro\\aspectj\\DummyServiceTest.java",
  "methodName" : "testRetrieveRestricted_asUser",
  "sourceCode" : "@Test\r\nvoid testRetrieveRestricted_asUser() throws Exception {\r\n    assertThrows(UnauthorizedException.class, () -> {\r\n        loginAsUser();\r\n        restrictedService.retrieve();\r\n    });\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\shiro\\support\\aspectj\\src\\test\\java\\org\\apache\\shiro\\aspectj\\DummyServiceTest.java",
  "methodName" : "testRetrieveRestricted_asAdmin",
  "sourceCode" : "@Test\r\nvoid testRetrieveRestricted_asAdmin() throws Exception {\r\n    loginAsAdmin();\r\n    restrictedService.retrieve();\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\shiro\\support\\cdi\\src\\test\\java\\org\\apache\\shiro\\cdi\\AnnotatedTypeWrapperTest.java",
  "methodName" : "noAnnotations",
  "sourceCode" : "@Test\r\nvoid noAnnotations() {\r\n    var wrapper = new AnnotatedTypeWrapper<>(annotatedType);\r\n    assertEquals(0, wrapper.getAnnotations().size());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\shiro\\support\\cdi\\src\\test\\java\\org\\apache\\shiro\\cdi\\AnnotatedTypeWrapperTest.java",
  "methodName" : "noAdditionalAnnotations",
  "sourceCode" : "@Test\r\nvoid noAdditionalAnnotations() {\r\n    initializeStubs();\r\n    var wrapper = new AnnotatedTypeWrapper<>(annotatedType);\r\n    assertEquals(3, wrapper.getAnnotations().size());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\shiro\\support\\cdi\\src\\test\\java\\org\\apache\\shiro\\cdi\\AnnotatedTypeWrapperTest.java",
  "methodName" : "twoAdditionalAnnotations",
  "sourceCode" : "@Test\r\n@SuppressWarnings(\"MagicNumber\")\r\nvoid twoAdditionalAnnotations() {\r\n    initializeStubs();\r\n    Annotation shiroSecureAnnotation = getAnnotation(ShiroSecureAnnotated.class, ShiroSecureAnnotation.class);\r\n    Annotation statelessAnnotation = getAnnotation(StatelessAnnotated.class, Stateless.class);\r\n    var wrapper = new AnnotatedTypeWrapper<>(annotatedType, shiroSecureAnnotation, statelessAnnotation);\r\n    assertEquals(5, wrapper.getAnnotations().size());\r\n    assertTrue(wrapper.isAnnotationPresent(ShiroSecureAnnotation.class));\r\n    assertTrue(wrapper.isAnnotationPresent(Stateless.class));\r\n    assertTrue(wrapper.isAnnotationPresent(RequiresAuthentication.class));\r\n    assertTrue(wrapper.isAnnotationPresent(RequiresGuest.class));\r\n    assertTrue(wrapper.isAnnotationPresent(RequiresPermissions.class));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\shiro\\support\\cdi\\src\\test\\java\\org\\apache\\shiro\\cdi\\AnnotatedTypeWrapperTest.java",
  "methodName" : "removeAnnotations",
  "sourceCode" : "@Test\r\nvoid removeAnnotations() {\r\n    initializeStubs();\r\n    Set<Annotation> sessionScopeAnnoationsSet = Set.of(getAnnotation(SessionScopedAnnotated.class, SessionScoped.class));\r\n    Set<Annotation> requiresGuestAnnoationsSet = Set.of(getAnnotation(Annotated.class, RequiresGuest.class));\r\n    var wrapper = new AnnotatedTypeWrapper<>(annotatedType, true, sessionScopeAnnoationsSet, requiresGuestAnnoationsSet);\r\n    assertEquals(3, wrapper.getAnnotations().size());\r\n    assertFalse(wrapper.isAnnotationPresent(RequiresGuest.class));\r\n    assertTrue(wrapper.isAnnotationPresent(SessionScoped.class));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\shiro\\support\\cdi\\src\\test\\java\\org\\apache\\shiro\\cdi\\AnnotatedTypeWrapperTest.java",
  "methodName" : "badLambdaArgument",
  "sourceCode" : "@Test\r\nvoid badLambdaArgument() {\r\n    assertThrows(IllegalArgumentException.class, () -> new AnnotatedTypeWrapper<>(annotatedType, true, Set.of(() -> SessionScoped.class), Set.of(() -> RequiresGuest.class)));\r\n    assertThrows(IllegalArgumentException.class, () -> new AnnotatedTypeWrapper<>(annotatedType, true, Set.of(() -> RequiresGuest.class), Set.of()));\r\n    assertThrows(IllegalArgumentException.class, () -> new AnnotatedTypeWrapper<>(annotatedType, true, Set.of(), Set.of(() -> RequiresGuest.class)));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\shiro\\support\\cdi\\src\\test\\java\\org\\apache\\shiro\\cdi\\AnnotatedTypeWrapperTest.java",
  "methodName" : "overriddenAnnotation",
  "sourceCode" : "@Test\r\nvoid overriddenAnnotation() {\r\n    initializeStubs();\r\n    when(annotatedType.getJavaClass()).thenReturn(Void.class);\r\n    assertEquals(3, annotatedType.getAnnotations().size());\r\n    Annotation shiroSecureAnnoations = getAnnotation(ShiroSecureAnnotated.class, ShiroSecureAnnotation.class);\r\n    Annotation statelessAnnoations = getAnnotation(StatelessAnnotated.class, Stateless.class);\r\n    var wrapper = new AnnotatedTypeWrapper<>(annotatedType, false, Set.of(shiroSecureAnnoations, statelessAnnoations), Set.of());\r\n    assertEquals(2, wrapper.getAnnotations().size());\r\n    assertTrue(wrapper.isAnnotationPresent(ShiroSecureAnnotation.class));\r\n    assertTrue(wrapper.isAnnotationPresent(Stateless.class));\r\n    assertEquals(Void.class, wrapper.getJavaClass());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\shiro\\support\\cdi\\src\\test\\java\\org\\apache\\shiro\\cdi\\AnnotatedTypeWrapperTest.java",
  "methodName" : "decreaseAnnotationsToZero",
  "sourceCode" : "@Test\r\nvoid decreaseAnnotationsToZero() {\r\n    initializeStubs();\r\n    assertEquals(3, annotatedType.getAnnotations().size());\r\n    var wrapper = new AnnotatedTypeWrapper<>(annotatedType, false, Set.of(), Set.of());\r\n    assertEquals(0, wrapper.getAnnotations().size());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\shiro\\support\\cdi\\src\\test\\java\\org\\apache\\shiro\\cdi\\AopHelperTest.java",
  "methodName" : "numberOfInterceptors",
  "sourceCode" : "@Test\r\n@SneakyThrows\r\nvoid numberOfInterceptors() {\r\n    createInterceptors();\r\n    assertEquals(2, interceptors.size());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\shiro\\support\\cdi\\src\\test\\java\\org\\apache\\shiro\\cdi\\AopHelperTest.java",
  "methodName" : "checkInterceptors",
  "sourceCode" : "@Test\r\nvoid checkInterceptors() {\r\n    try (var mc = mockConstruction(UserAnnotationHandler.class)) {\r\n        try (var mc2 = mockConstruction(AuthenticatedAnnotationHandler.class)) {\r\n            createInterceptors();\r\n            interceptors.forEach(SecurityInterceptor::intercept);\r\n            verify(mc.constructed().get(0), times(1)).assertAuthorized(any());\r\n            verify(mc2.constructed().get(0), times(1)).assertAuthorized(any());\r\n        }\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\shiro\\support\\cdi\\src\\test\\java\\org\\apache\\shiro\\cdi\\AopHelperTest.java",
  "methodName" : "checkNotAnnotated",
  "sourceCode" : "@Test\r\n@SneakyThrows\r\nvoid checkNotAnnotated() {\r\n    assertEquals(0, AopHelper.createSecurityInterceptors(NotAnnotated.class.getMethod(\"method\"), NotAnnotated.class).size());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\shiro\\support\\cdi\\src\\test\\java\\org\\apache\\shiro\\cdi\\AopHelperTest.java",
  "methodName" : "checkAllAnnotationTypes",
  "sourceCode" : "@Test\r\n@SneakyThrows\r\n@SuppressWarnings(\"MagicNumber\")\r\nvoid checkAllAnnotationTypes() {\r\n    assertEquals(8, authorizationAnnotationClasses.keySet().stream().distinct().count());\r\n    for (Class<? extends Annotation> clz : authorizationAnnotationClasses.keySet()) {\r\n        assertEquals(clz, authorizationAnnotationClasses.get(clz).call().getAnnotationClass());\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\shiro\\support\\ehcache\\src\\test\\java\\org\\apache\\shiro\\cache\\ehcache\\EhCacheManagerTest.java",
  "methodName" : "testCacheManagerCreationDuringInit",
  "sourceCode" : "@Test\r\nvoid testCacheManagerCreationDuringInit() {\r\n    net.sf.ehcache.CacheManager ehCacheManager = cacheManager.getCacheManager();\r\n    assertNull(ehCacheManager);\r\n    cacheManager.init();\r\n    //now assert that an internal CacheManager has been created:\r\n    ehCacheManager = cacheManager.getCacheManager();\r\n    assertNotNull(ehCacheManager);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\shiro\\support\\ehcache\\src\\test\\java\\org\\apache\\shiro\\cache\\ehcache\\EhCacheManagerTest.java",
  "methodName" : "testLazyCacheManagerCreationWithoutCallingInit",
  "sourceCode" : "@Test\r\nvoid testLazyCacheManagerCreationWithoutCallingInit() {\r\n    net.sf.ehcache.CacheManager ehCacheManager = cacheManager.getCacheManager();\r\n    assertNull(ehCacheManager);\r\n    //don't call init here - the ehcache CacheManager should be lazily created\r\n    //because of the default Shiro ehcache.xml file in the classpath.  Just acquire a cache:\r\n    Cache<String, String> cache = cacheManager.getCache(\"test\");\r\n    //now assert that an internal CacheManager has been created:\r\n    ehCacheManager = cacheManager.getCacheManager();\r\n    assertNotNull(ehCacheManager);\r\n    assertNotNull(cache);\r\n    cache.put(\"hello\", \"world\");\r\n    String value = cache.get(\"hello\");\r\n    assertNotNull(value);\r\n    assertEquals(\"world\", value);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\shiro\\support\\ehcache\\src\\test\\java\\org\\apache\\shiro\\cache\\ehcache\\EhCacheManagerTest.java",
  "methodName" : "testRemove",
  "sourceCode" : "@Test\r\nvoid testRemove() {\r\n    net.sf.ehcache.CacheManager ehCacheManager = cacheManager.getCacheManager();\r\n    assertNull(ehCacheManager);\r\n    Cache<String, String> cache = cacheManager.getCache(\"test\");\r\n    ehCacheManager = cacheManager.getCacheManager();\r\n    assertNotNull(ehCacheManager);\r\n    assertNotNull(cache);\r\n    cache.put(\"hello\", \"world\");\r\n    cache.put(\"hello2\", \"world2\");\r\n    String value = cache.get(\"hello\");\r\n    assertNotNull(value);\r\n    assertEquals(\"world\", value);\r\n    assertEquals(\"world2\", cache.get(\"hello2\"));\r\n    assertEquals(2, cache.size());\r\n    assertEquals(\"world\", cache.remove(\"hello\"));\r\n    assertEquals(1, cache.size());\r\n    assertEquals(\"world2\", cache.remove(\"hello2\"));\r\n    assertEquals(0, cache.size());\r\n    assertNull(cache.remove(\"blah\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\shiro\\support\\ehcache\\src\\test\\java\\org\\apache\\shiro\\cache\\ehcache\\EhCacheManagerTest.java",
  "methodName" : "testClear",
  "sourceCode" : "@Test\r\nvoid testClear() {\r\n    net.sf.ehcache.CacheManager ehCacheManager = cacheManager.getCacheManager();\r\n    assertNull(ehCacheManager);\r\n    Cache<String, String> cache = cacheManager.getCache(\"test\");\r\n    ehCacheManager = cacheManager.getCacheManager();\r\n    assertNotNull(ehCacheManager);\r\n    assertNotNull(cache);\r\n    cache.put(\"hello\", \"world\");\r\n    cache.put(\"hello2\", \"world2\");\r\n    String value = cache.get(\"hello\");\r\n    assertNotNull(value);\r\n    assertEquals(\"world\", value);\r\n    assertEquals(\"world2\", cache.get(\"hello2\"));\r\n    assertEquals(2, cache.size());\r\n    cache.clear();\r\n    assertEquals(0, cache.size());\r\n    assertNull(cache.get(\"hello\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\shiro\\support\\ehcache\\src\\test\\java\\org\\apache\\shiro\\cache\\ehcache\\EhCacheManagerTest.java",
  "methodName" : "testKeys",
  "sourceCode" : "@Test\r\nvoid testKeys() {\r\n    net.sf.ehcache.CacheManager ehCacheManager = cacheManager.getCacheManager();\r\n    assertNull(ehCacheManager);\r\n    Cache<String, String> cache = cacheManager.getCache(\"test\");\r\n    ehCacheManager = cacheManager.getCacheManager();\r\n    assertNotNull(ehCacheManager);\r\n    assertNotNull(cache);\r\n    cache.put(\"hello\", \"world\");\r\n    cache.put(\"hello2\", \"world2\");\r\n    String value = cache.get(\"hello\");\r\n    assertNotNull(value);\r\n    assertEquals(\"world\", value);\r\n    assertEquals(\"world2\", cache.get(\"hello2\"));\r\n    assertEquals(2, cache.size());\r\n    Set<String> keys = cache.keys();\r\n    assertEquals(2, keys.size());\r\n    assertTrue(keys.contains(\"hello\"));\r\n    assertTrue(keys.contains(\"hello2\"));\r\n    assertEquals(\"world\", cache.remove(\"hello\"));\r\n    assertEquals(1, cache.size());\r\n    keys = cache.keys();\r\n    assertEquals(1, keys.size());\r\n    assertTrue(keys.contains(\"hello2\"));\r\n    assertNull(cache.remove(\"blah\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\shiro\\support\\ehcache\\src\\test\\java\\org\\apache\\shiro\\cache\\ehcache\\EhCacheManagerTest.java",
  "methodName" : "testValues",
  "sourceCode" : "@Test\r\nvoid testValues() {\r\n    net.sf.ehcache.CacheManager ehCacheManager = cacheManager.getCacheManager();\r\n    assertNull(ehCacheManager);\r\n    Cache<String, String> cache = cacheManager.getCache(\"test\");\r\n    ehCacheManager = cacheManager.getCacheManager();\r\n    assertNotNull(ehCacheManager);\r\n    assertNotNull(cache);\r\n    cache.put(\"hello\", \"world\");\r\n    cache.put(\"hello2\", \"world2\");\r\n    String value = cache.get(\"hello\");\r\n    assertNotNull(value);\r\n    assertEquals(\"world\", value);\r\n    assertEquals(\"world2\", cache.get(\"hello2\"));\r\n    assertEquals(2, cache.size());\r\n    Collection<String> values = cache.values();\r\n    assertEquals(2, values.size());\r\n    assertTrue(values.contains(\"world\"));\r\n    assertTrue(values.contains(\"world2\"));\r\n    assertEquals(\"world\", cache.remove(\"hello\"));\r\n    assertEquals(1, cache.size());\r\n    values = cache.values();\r\n    assertEquals(1, values.size());\r\n    assertTrue(values.contains(\"world2\"));\r\n    assertNull(cache.remove(\"blah\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\shiro\\support\\guice\\src\\test\\java\\org\\apache\\shiro\\guice\\aop\\AopAllianceMethodInterceptorAdapterTest.java",
  "methodName" : "testInvoke",
  "sourceCode" : "@Test\r\nvoid testInvoke() throws Throwable {\r\n    MethodInvocation allianceInvocation = createMock(MethodInvocation.class);\r\n    MethodInterceptor mockShiroInterceptor = createMock(MethodInterceptor.class);\r\n    expect(mockShiroInterceptor.invoke(anyObject(AopAllianceMethodInvocationAdapter.class))).andAnswer(new IAnswer<Object>() {\r\n\r\n        public Object answer() throws Throwable {\r\n            return getCurrentArguments()[0];\r\n        }\r\n    });\r\n    final Object expectedValue = new Object();\r\n    expect(allianceInvocation.proceed()).andReturn(expectedValue);\r\n    replay(mockShiroInterceptor, allianceInvocation);\r\n    AopAllianceMethodInterceptorAdapter underTest = new AopAllianceMethodInterceptorAdapter(mockShiroInterceptor);\r\n    Object invocation = underTest.invoke(allianceInvocation);\r\n    Object value = ((AopAllianceMethodInvocationAdapter) invocation).proceed();\r\n    assertSame(expectedValue, value, \"Adapter invocation returned a different value.\");\r\n    verify(mockShiroInterceptor, allianceInvocation);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\shiro\\support\\guice\\src\\test\\java\\org\\apache\\shiro\\guice\\aop\\AopAllianceMethodInvocationAdapterTest.java",
  "methodName" : "testGetMethod",
  "sourceCode" : "@Test\r\npublic void testGetMethod() throws Exception {\r\n    MethodInvocation mock = createMock(MethodInvocation.class);\r\n    Method method = AopAllianceMethodInvocationAdapterTest.class.getMethod(\"testGetMethod\");\r\n    expect(mock.getMethod()).andReturn(method);\r\n    AopAllianceMethodInvocationAdapter underTest = new AopAllianceMethodInvocationAdapter(mock);\r\n    replay(mock);\r\n    assertSame(method, underTest.getMethod());\r\n    verify(mock);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\shiro\\support\\guice\\src\\test\\java\\org\\apache\\shiro\\guice\\aop\\AopAllianceMethodInvocationAdapterTest.java",
  "methodName" : "testGetArguments",
  "sourceCode" : "@Test\r\nvoid testGetArguments() throws Exception {\r\n    MethodInvocation mock = createMock(MethodInvocation.class);\r\n    Object[] args = new Object[0];\r\n    expect(mock.getArguments()).andReturn(args);\r\n    AopAllianceMethodInvocationAdapter underTest = new AopAllianceMethodInvocationAdapter(mock);\r\n    replay(mock);\r\n    assertSame(args, underTest.getArguments());\r\n    verify(mock);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\shiro\\support\\guice\\src\\test\\java\\org\\apache\\shiro\\guice\\aop\\AopAllianceMethodInvocationAdapterTest.java",
  "methodName" : "testProceed",
  "sourceCode" : "@Test\r\nvoid testProceed() throws Throwable {\r\n    MethodInvocation mock = createMock(MethodInvocation.class);\r\n    Object value = new Object();\r\n    expect(mock.proceed()).andReturn(value);\r\n    AopAllianceMethodInvocationAdapter underTest = new AopAllianceMethodInvocationAdapter(mock);\r\n    replay(mock);\r\n    assertSame(value, underTest.proceed());\r\n    verify(mock);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\shiro\\support\\guice\\src\\test\\java\\org\\apache\\shiro\\guice\\aop\\AopAllianceMethodInvocationAdapterTest.java",
  "methodName" : "testGetThis",
  "sourceCode" : "@Test\r\nvoid testGetThis() throws Exception {\r\n    MethodInvocation mock = createMock(MethodInvocation.class);\r\n    Object value = new Object();\r\n    expect(mock.getThis()).andReturn(value);\r\n    AopAllianceMethodInvocationAdapter underTest = new AopAllianceMethodInvocationAdapter(mock);\r\n    replay(mock);\r\n    assertSame(value, underTest.getThis());\r\n    verify(mock);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\shiro\\support\\guice\\src\\test\\java\\org\\apache\\shiro\\guice\\aop\\ShiroAopModuleTest.java",
  "methodName" : "testGetAnnotationResolver",
  "sourceCode" : "@Test\r\nvoid testGetAnnotationResolver() {\r\n    final AnnotationResolver annotationResolver = new DefaultAnnotationResolver();\r\n    ShiroAopModule underTest = new ShiroAopModule() {\r\n\r\n        @Override\r\n        protected AnnotationResolver createAnnotationResolver() {\r\n            return annotationResolver;\r\n        }\r\n\r\n        @Override\r\n        protected void configureDefaultInterceptors(AnnotationResolver resolver) {\r\n            assertSame(annotationResolver, resolver);\r\n            bind(Object.class).annotatedWith(Names.named(\"configureDefaultInterceptors\"));\r\n        }\r\n\r\n        @Override\r\n        protected void configureInterceptors(AnnotationResolver resolver) {\r\n            assertSame(annotationResolver, resolver);\r\n            bind(Object.class).annotatedWith(Names.named(\"configureInterceptors\"));\r\n        }\r\n    };\r\n    boolean calledDefault = false;\r\n    boolean calledCustom = false;\r\n    for (Element e : Elements.getElements(underTest)) {\r\n        if (e instanceof Binding) {\r\n            Key key = ((Binding) e).getKey();\r\n            if (Named.class.isAssignableFrom(key.getAnnotation().annotationType()) && \"configureInterceptors\".equals(((Named) key.getAnnotation()).value()) && key.getTypeLiteral().getRawType().equals(Object.class)) {\r\n                calledCustom = true;\r\n            }\r\n            if (Named.class.isAssignableFrom(key.getAnnotation().annotationType()) && \"configureDefaultInterceptors\".equals(((Named) key.getAnnotation()).value()) && key.getTypeLiteral().getRawType().equals(Object.class)) {\r\n                calledDefault = true;\r\n            }\r\n        }\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\shiro\\support\\guice\\src\\test\\java\\org\\apache\\shiro\\guice\\aop\\ShiroAopModuleTest.java",
  "methodName" : "testBindShiroInterceptor",
  "sourceCode" : "@Test\r\nvoid testBindShiroInterceptor() {\r\n    ShiroAopModule underTest = new ShiroAopModule() {\r\n\r\n        @Override\r\n        protected void configureInterceptors(AnnotationResolver resolver) {\r\n            bindShiroInterceptor(new MyAnnotationMethodInterceptor());\r\n        }\r\n    };\r\n    List<Element> elements = Elements.getElements(underTest);\r\n    for (Element element : elements) {\r\n        if (element instanceof InterceptorBinding) {\r\n            InterceptorBinding binding = (InterceptorBinding) element;\r\n            assertTrue(binding.getClassMatcher().matches(getClass()));\r\n            Method method = null;\r\n            Class<? extends Annotation> theAnnotation = null;\r\n            for (Class<? extends Annotation> annotation : protectedMethods.keySet()) {\r\n                if (binding.getMethodMatcher().matches(protectedMethods.get(annotation))) {\r\n                    method = protectedMethods.get(annotation);\r\n                    theAnnotation = annotation;\r\n                    protectedMethods.remove(annotation);\r\n                    break;\r\n                }\r\n            }\r\n            if (method == null) {\r\n                fail(\"Did not expect interceptor binding \" + binding.getInterceptors());\r\n            }\r\n            List<MethodInterceptor> interceptors = binding.getInterceptors();\r\n            assertEquals(1, interceptors.size());\r\n            assertTrue(interceptors.get(0) instanceof AopAllianceMethodInterceptorAdapter);\r\n            assertTrue(interceptorTypes.get(theAnnotation).isInstance(((AopAllianceMethodInterceptorAdapter) interceptors.get(0)).shiroInterceptor));\r\n        }\r\n    }\r\n    assertTrue(protectedMethods.isEmpty(), \"Not all interceptors were bound.\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\shiro\\support\\guice\\src\\test\\java\\org\\apache\\shiro\\guice\\aop\\ShiroAopModuleTest.java",
  "methodName" : "myTestProtected",
  "sourceCode" : "@ShiroAopModuleTest.MyTestAnnotation\r\npublic void myTestProtected() {\r\n}",
  "annotations" : [ "ShiroAopModuleTest.MyTestAnnotation" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\shiro\\support\\guice\\src\\test\\java\\org\\apache\\shiro\\guice\\BeanTypeListenerTest.java",
  "methodName" : "testUnmatchedPackage",
  "sourceCode" : "@Test\r\nvoid testUnmatchedPackage() throws Exception {\r\n    assertFalse(BeanTypeListener.MATCHER.matches(TypeLiteral.get(GuiceEnvironment.class)));\r\n    assertFalse(BeanTypeListener.MATCHER.matches(TypeLiteral.get(ShiroWebModule.class)));\r\n    assertFalse(BeanTypeListener.MATCHER.matches(TypeLiteral.get(ShiroAopModule.class)));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\shiro\\support\\guice\\src\\test\\java\\org\\apache\\shiro\\guice\\BeanTypeListenerTest.java",
  "methodName" : "testMatchedPackage",
  "sourceCode" : "@Test\r\nvoid testMatchedPackage() throws Exception {\r\n    assertTrue(BeanTypeListener.MATCHER.matches(TypeLiteral.get(SecurityUtils.class)));\r\n    assertTrue(BeanTypeListener.MATCHER.matches(TypeLiteral.get(DefaultAnnotationResolver.class)));\r\n    assertTrue(BeanTypeListener.MATCHER.matches(TypeLiteral.get(BlowfishCipherService.class)));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\shiro\\support\\guice\\src\\test\\java\\org\\apache\\shiro\\guice\\BeanTypeListenerTest.java",
  "methodName" : "testPropertySetting",
  "sourceCode" : "@Test\r\nvoid testPropertySetting() throws Exception {\r\n    @SuppressWarnings(\"unchecked\")\r\n    TypeEncounter<SomeInjectableBean> encounter = mock(TypeEncounter.class);\r\n    @SuppressWarnings(\"unchecked\")\r\n    Provider<Injector> injectorProvider = mock(Provider.class);\r\n    Injector injector = mock(Injector.class);\r\n    when(encounter.getProvider(Injector.class)).then(args -> injectorProvider);\r\n    when(injectorProvider.get()).then(args -> injector);\r\n    @SuppressWarnings(\"unchecked\")\r\n    ArgumentCaptor<MembersInjector<SomeInjectableBean>> captor = ArgumentCaptor.forClass(MembersInjector.class);\r\n    SecurityManager securityManager = mock(SecurityManager.class);\r\n    String property = \"myPropertyValue\";\r\n    when(injector.getInstance(Key.get(SecurityManager.class))).then(args -> securityManager);\r\n    when(injector.getInstance(Key.get(String.class, Names.named(\"shiro.myProperty\")))).then(args -> property);\r\n    when(injector.getInstance(Key.get(String.class, Names.named(\"shiro.unavailableProperty\")))).thenThrow(new ConfigurationException(Collections.singleton(new Message(\"Not Available!\"))));\r\n    when((Map) injector.getInstance(BeanTypeListener.MAP_KEY)).then(args -> Collections.EMPTY_MAP);\r\n    BeanTypeListener underTest = new BeanTypeListener();\r\n    underTest.hear(TypeLiteral.get(SomeInjectableBean.class), encounter);\r\n    SomeInjectableBean bean = new SomeInjectableBean();\r\n    verify(encounter).register(captor.capture());\r\n    captor.getValue().injectMembers(bean);\r\n    assertSame(securityManager, bean.securityManager);\r\n    assertSame(property, bean.myProperty);\r\n    assertNull(bean.unavailableProperty);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\shiro\\support\\guice\\src\\test\\java\\org\\apache\\shiro\\guice\\DestroyableInjectionListenerTest.java",
  "methodName" : "testAfterInjection",
  "sourceCode" : "@Test\r\nvoid testAfterInjection() throws Exception {\r\n    DestroyableInjectionListener.DestroyableRegistry registry = createMock(DestroyableInjectionListener.DestroyableRegistry.class);\r\n    Destroyable destroyable = createMock(Destroyable.class);\r\n    registry.add(destroyable);\r\n    replay(registry, destroyable);\r\n    DestroyableInjectionListener underTest = new DestroyableInjectionListener(registry);\r\n    underTest.afterInjection(destroyable);\r\n    verify(registry, destroyable);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\shiro\\support\\guice\\src\\test\\java\\org\\apache\\shiro\\guice\\GuiceEnvironmentTest.java",
  "methodName" : "testGetSecurityManager",
  "sourceCode" : "@Test\r\nvoid testGetSecurityManager() throws Exception {\r\n    SecurityManager securityManager = createMock(SecurityManager.class);\r\n    GuiceEnvironment underTest = new GuiceEnvironment(securityManager);\r\n    assertSame(securityManager, underTest.getSecurityManager());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\shiro\\support\\guice\\src\\test\\java\\org\\apache\\shiro\\guice\\GuiceEnvironmentTest.java",
  "methodName" : "ensureInjectable",
  "sourceCode" : "@Test\r\nvoid ensureInjectable() {\r\n    try {\r\n        InjectionPoint ip = InjectionPoint.forConstructorOf(GuiceEnvironment.class);\r\n    } catch (Exception e) {\r\n        fail(\"Could not create constructor injection point.\");\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\shiro\\support\\guice\\src\\test\\java\\org\\apache\\shiro\\guice\\InitializableInjectionListenerTest.java",
  "methodName" : "testAfterInjection",
  "sourceCode" : "@Test\r\nvoid testAfterInjection() throws Exception {\r\n    Initializable initializable = createMock(Initializable.class);\r\n    initializable.init();\r\n    replay(initializable);\r\n    InitializableInjectionListener underTest = new InitializableInjectionListener();\r\n    underTest.afterInjection(initializable);\r\n    verify(initializable);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\shiro\\support\\guice\\src\\test\\java\\org\\apache\\shiro\\guice\\LifecycleTypeListenerTest.java",
  "methodName" : "testHearInitializable",
  "sourceCode" : "@Test\r\n@SuppressWarnings({ \"unchecked\", \"rawtypes\" })\r\nvoid testHearInitializable() throws Exception {\r\n    TypeEncounter encounter = createMock(TypeEncounter.class);\r\n    encounter.register(anyObject(InitializableInjectionListener.class));\r\n    replay(encounter);\r\n    LifecycleTypeListener underTest = new LifecycleTypeListener(null);\r\n    underTest.hear(TypeLiteral.get(MyInitializable.class), encounter);\r\n    verify(encounter);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\shiro\\support\\guice\\src\\test\\java\\org\\apache\\shiro\\guice\\LifecycleTypeListenerTest.java",
  "methodName" : "testHearDestroyable",
  "sourceCode" : "@Test\r\n@SuppressWarnings(\"unchecked\")\r\nvoid testHearDestroyable() throws Exception {\r\n    @SuppressWarnings(\"rawtypes\")\r\n    TypeEncounter encounter = createMock(TypeEncounter.class);\r\n    encounter.register(anyObject(DestroyableInjectionListener.class));\r\n    replay(encounter);\r\n    LifecycleTypeListener underTest = new LifecycleTypeListener(null);\r\n    underTest.hear(TypeLiteral.get(MyDestroyable.class), encounter);\r\n    verify(encounter);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\shiro\\support\\guice\\src\\test\\java\\org\\apache\\shiro\\guice\\ShiroMatchersTest.java",
  "methodName" : "testTypeLiteral",
  "sourceCode" : "@Test\r\nvoid testTypeLiteral() throws Exception {\r\n    Matcher<Class> classMatcher = createMock(Matcher.class);\r\n    expect(classMatcher.matches(MatchingClass.class)).andReturn(true);\r\n    expect(classMatcher.matches(NotMatchingClass.class)).andReturn(false);\r\n    replay(classMatcher);\r\n    Matcher<TypeLiteral> underTest = ShiroMatchers.typeLiteral(classMatcher);\r\n    assertTrue(underTest.matches(TypeLiteral.get(MatchingClass.class)));\r\n    assertFalse(underTest.matches(TypeLiteral.get(NotMatchingClass.class)));\r\n    verify(classMatcher);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\shiro\\support\\guice\\src\\test\\java\\org\\apache\\shiro\\guice\\ShiroModuleTest.java",
  "methodName" : "basicInstantiation",
  "sourceCode" : "@Test\r\nvoid basicInstantiation() {\r\n    final MockRealm mockRealm = createMock(MockRealm.class);\r\n    Injector injector = Guice.createInjector(new ShiroModule() {\r\n\r\n        @Override\r\n        protected void configureShiro() {\r\n            bindRealm().to(MockRealm.class);\r\n        }\r\n\r\n        @Provides\r\n        public MockRealm createRealm() {\r\n            return mockRealm;\r\n        }\r\n    });\r\n    SecurityManager securityManager = injector.getInstance(SecurityManager.class);\r\n    assertNotNull(securityManager);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\shiro\\support\\guice\\src\\test\\java\\org\\apache\\shiro\\guice\\ShiroModuleTest.java",
  "methodName" : "testConfigure",
  "sourceCode" : "@Test\r\nvoid testConfigure() {\r\n    final MockRealm mockRealm = createMock(MockRealm.class);\r\n    AuthenticationToken authToken = createMock(AuthenticationToken.class);\r\n    AuthenticationInfo info = new SimpleAuthenticationInfo(\"mockUser\", \"password\", \"mockRealm\");\r\n    expect(mockRealm.supports(authToken)).andReturn(true);\r\n    expect(mockRealm.getAuthenticationInfo(authToken)).andReturn(info);\r\n    replay(mockRealm);\r\n    Injector injector = Guice.createInjector(new ShiroModule() {\r\n\r\n        @Override\r\n        protected void configureShiro() {\r\n            bindRealm().to(MockRealm.class);\r\n        }\r\n\r\n        @Provides\r\n        public MockRealm createRealm() {\r\n            return mockRealm;\r\n        }\r\n    });\r\n    SecurityManager securityManager = injector.getInstance(SecurityManager.class);\r\n    assertNotNull(securityManager);\r\n    SecurityUtils.setSecurityManager(securityManager);\r\n    final Subject subject = new Subject.Builder(securityManager).buildSubject();\r\n    securityManager.login(subject, authToken);\r\n    verify(mockRealm);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\shiro\\support\\guice\\src\\test\\java\\org\\apache\\shiro\\guice\\ShiroModuleTest.java",
  "methodName" : "testBindSecurityManager",
  "sourceCode" : "@Test\r\nvoid testBindSecurityManager() {\r\n    final MockRealm mockRealm = createMock(MockRealm.class);\r\n    Injector injector = Guice.createInjector(new ShiroModule() {\r\n\r\n        @Override\r\n        protected void configureShiro() {\r\n            bindRealm().to(MockRealm.class);\r\n        }\r\n\r\n        @Provides\r\n        public MockRealm createRealm() {\r\n            return mockRealm;\r\n        }\r\n\r\n        @Override\r\n        protected void bindSecurityManager(AnnotatedBindingBuilder<? super SecurityManager> bind) {\r\n            bind.to(MyDefaultSecurityManager.class);\r\n        }\r\n    });\r\n    SecurityManager securityManager = injector.getInstance(SecurityManager.class);\r\n    assertNotNull(securityManager);\r\n    assertTrue(securityManager instanceof MyDefaultSecurityManager);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\shiro\\support\\guice\\src\\test\\java\\org\\apache\\shiro\\guice\\ShiroModuleTest.java",
  "methodName" : "testBindSessionManager",
  "sourceCode" : "@Test\r\nvoid testBindSessionManager() {\r\n    final MockRealm mockRealm = createMock(MockRealm.class);\r\n    Injector injector = Guice.createInjector(new ShiroModule() {\r\n\r\n        @Override\r\n        protected void configureShiro() {\r\n            bindRealm().to(MockRealm.class);\r\n        }\r\n\r\n        @Provides\r\n        public MockRealm createRealm() {\r\n            return mockRealm;\r\n        }\r\n\r\n        @Override\r\n        protected void bindSessionManager(AnnotatedBindingBuilder<SessionManager> bind) {\r\n            bind.to(MyDefaultSessionManager.class);\r\n        }\r\n    });\r\n    DefaultSecurityManager securityManager = (DefaultSecurityManager) injector.getInstance(SecurityManager.class);\r\n    assertNotNull(securityManager);\r\n    assertNotNull(securityManager.getSessionManager());\r\n    assertTrue(securityManager.getSessionManager() instanceof MyDefaultSessionManager);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\shiro\\support\\guice\\src\\test\\java\\org\\apache\\shiro\\guice\\ShiroModuleTest.java",
  "methodName" : "testBindEnvironment",
  "sourceCode" : "@Test\r\nvoid testBindEnvironment() {\r\n    final MockRealm mockRealm = createMock(MockRealm.class);\r\n    Injector injector = Guice.createInjector(new ShiroModule() {\r\n\r\n        @Override\r\n        protected void configureShiro() {\r\n            bindRealm().to(MockRealm.class);\r\n            expose(Environment.class);\r\n        }\r\n\r\n        @Provides\r\n        public MockRealm createRealm() {\r\n            return mockRealm;\r\n        }\r\n\r\n        @Override\r\n        protected void bindEnvironment(AnnotatedBindingBuilder<Environment> bind) {\r\n            bind.to(MyEnvironment.class);\r\n        }\r\n    });\r\n    Environment environment = injector.getInstance(Environment.class);\r\n    assertNotNull(environment);\r\n    assertTrue(environment instanceof MyEnvironment);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\shiro\\support\\guice\\src\\test\\java\\org\\apache\\shiro\\guice\\ShiroModuleTest.java",
  "methodName" : "testDestroy",
  "sourceCode" : "@Test\r\nvoid testDestroy() throws Exception {\r\n    final MockRealm mockRealm = createMock(MockRealm.class);\r\n    final MyDestroyable myDestroyable = createMock(MyDestroyable.class);\r\n    myDestroyable.destroy();\r\n    replay(myDestroyable);\r\n    final ShiroModule shiroModule = new ShiroModule() {\r\n\r\n        @Override\r\n        protected void configureShiro() {\r\n            bindRealm().to(MockRealm.class);\r\n            bind(MyDestroyable.class).toInstance(myDestroyable);\r\n            expose(MyDestroyable.class);\r\n        }\r\n\r\n        @Provides\r\n        public MockRealm createRealm() {\r\n            return mockRealm;\r\n        }\r\n    };\r\n    Injector injector = Guice.createInjector(shiroModule);\r\n    injector.getInstance(MyDestroyable.class);\r\n    shiroModule.destroy();\r\n    verify(myDestroyable);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\shiro\\support\\guice\\src\\test\\java\\org\\apache\\shiro\\guice\\ShiroModuleTest.java",
  "methodName" : "testEventListener",
  "sourceCode" : "/**\r\n * @throws Exception\r\n * @since 1.4\r\n */\r\n@Test\r\nvoid testEventListener() throws Exception {\r\n    final MockRealm mockRealm = createMock(MockRealm.class);\r\n    final EventBus eventBus = createMock(EventBus.class);\r\n    // expect both objects to be registered\r\n    eventBus.register(anyObject(MockEventListener1.class));\r\n    eventBus.register(anyObject(MockEventListener2.class));\r\n    replay(eventBus);\r\n    final ShiroModule shiroModule = new ShiroModule() {\r\n\r\n        @Override\r\n        protected void configureShiro() {\r\n            bindRealm().to(MockRealm.class);\r\n            // bind our event listeners\r\n            binder().bind(MockEventListener1.class).asEagerSingleton();\r\n            binder().bind(MockEventListener2.class).asEagerSingleton();\r\n        }\r\n\r\n        @Override\r\n        protected void bindEventBus(AnnotatedBindingBuilder<EventBus> bind) {\r\n            bind.toInstance(eventBus);\r\n        }\r\n\r\n        @Provides\r\n        public MockRealm createRealm() {\r\n            return mockRealm;\r\n        }\r\n    };\r\n    Guice.createInjector(shiroModule);\r\n    verify(eventBus);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\shiro\\support\\guice\\src\\test\\java\\org\\apache\\shiro\\guice\\ShiroModuleTest.java",
  "methodName" : "testEventBusAware",
  "sourceCode" : "/**\r\n * @throws Exception\r\n * @since 1.4\r\n */\r\n@Test\r\nvoid testEventBusAware() throws Exception {\r\n    final MockRealm mockRealm = createMock(MockRealm.class);\r\n    final ShiroModule shiroModule = new ShiroModule() {\r\n\r\n        @Override\r\n        protected void configureShiro() {\r\n            bindRealm().to(MockRealm.class);\r\n            binder().bind(MockEventBusAware.class).asEagerSingleton();\r\n            expose(MockEventBusAware.class);\r\n        }\r\n\r\n        @Provides\r\n        public MockRealm createRealm() {\r\n            return mockRealm;\r\n        }\r\n    };\r\n    Injector injector = Guice.createInjector(shiroModule);\r\n    EventBus eventBus = injector.getInstance(EventBus.class);\r\n    SecurityManager securityManager = injector.getInstance(SecurityManager.class);\r\n    MockEventBusAware eventBusAware = injector.getInstance(MockEventBusAware.class);\r\n    assertSame(eventBus, eventBusAware.eventBus);\r\n    assertSame(eventBus, ((DefaultSecurityManager) securityManager).getEventBus());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\shiro\\support\\guice\\src\\test\\java\\org\\apache\\shiro\\guice\\ShiroSessionScopeTest.java",
  "methodName" : "testScope",
  "sourceCode" : "@Test\r\nvoid testScope() throws Exception {\r\n    Subject subject = createMock(Subject.class);\r\n    try {\r\n        ThreadContext.bind(subject);\r\n        final Key<SomeClass> key = Key.get(SomeClass.class);\r\n        Provider<SomeClass> mockProvider = createMock(Provider.class);\r\n        Session session = createMock(Session.class);\r\n        SomeClass returned = new SomeClass();\r\n        expect(subject.getSession()).andReturn(session);\r\n        expect(session.getAttribute(key)).andReturn(null);\r\n        expect(mockProvider.get()).andReturn(returned);\r\n        expect(subject.getSession()).andReturn(session);\r\n        expect(session.getAttribute(key)).andReturn(returned);\r\n        replay(subject, mockProvider, session);\r\n        ShiroSessionScope underTest = new ShiroSessionScope();\r\n        // first time the session doesn't contain it, we expect the provider to be invoked\r\n        assertSame(returned, underTest.scope(key, mockProvider).get());\r\n        // second time the session does contain it, we expect the provider to not be invoked\r\n        assertSame(returned, underTest.scope(key, mockProvider).get());\r\n        verify(subject, mockProvider, session);\r\n    } finally {\r\n        ThreadContext.unbindSubject();\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\shiro\\support\\guice\\src\\test\\java\\org\\apache\\shiro\\guice\\ShiroSessionScopeTest.java",
  "methodName" : "testOutOfScope",
  "sourceCode" : "@Test\r\nvoid testOutOfScope() throws Exception {\r\n    assertThrows(OutOfScopeException.class, () -> {\r\n        ShiroSessionScope underTest = new ShiroSessionScope();\r\n        Provider<SomeClass> mockProvider = createMock(Provider.class);\r\n        replay(mockProvider);\r\n        underTest.scope(Key.get(SomeClass.class), mockProvider).get();\r\n    });\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\shiro\\support\\guice\\src\\test\\java\\org\\apache\\shiro\\guice\\web\\AbstractInjectionProviderTest.java",
  "methodName" : "testGet",
  "sourceCode" : "@Test\r\n@SuppressWarnings(\"unchecked\")\r\nvoid testGet() throws Exception {\r\n    Injector mockInjector = createMock(Injector.class);\r\n    Object c1 = new Object();\r\n    Object c2 = new Object();\r\n    final AtomicBoolean postProcessCalled = new AtomicBoolean(false);\r\n    expect(mockInjector.getInstance(keyC1)).andReturn(c1);\r\n    expect(mockInjector.getInstance(keyC2)).andReturn(c2);\r\n    mockInjector.injectMembers(anyObject(SomeInjectedClass.class));\r\n    replay(mockInjector);\r\n    AbstractInjectionProvider<SomeInjectedClass> underTest = new AbstractInjectionProvider<SomeInjectedClass>(Key.get(SomeInjectedClass.class)) {\r\n\r\n        @Override\r\n        protected SomeInjectedClass postProcess(SomeInjectedClass someInjectedClass) {\r\n            postProcessCalled.set(true);\r\n            return super.postProcess(someInjectedClass);\r\n        }\r\n    };\r\n    underTest.injector = mockInjector;\r\n    SomeInjectedClass got = underTest.get();\r\n    assertEquals(c1, got.c1, \"Wrong parameter passed to constructor (index 0).\");\r\n    assertEquals(c2, got.c2, \"Wrong parameter passed to constructor (index 1).\");\r\n    assertTrue(postProcessCalled.get(), \"postProcess method was not called.\");\r\n    verify(mockInjector);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\shiro\\support\\guice\\src\\test\\java\\org\\apache\\shiro\\guice\\web\\AbstractInjectionProviderTest.java",
  "methodName" : "testGetDependencies",
  "sourceCode" : "@Test\r\nvoid testGetDependencies() throws Exception {\r\n    AbstractInjectionProvider<SomeInjectedClass> underTest = new AbstractInjectionProvider<SomeInjectedClass>(Key.get(SomeInjectedClass.class));\r\n    boolean foundC1 = false;\r\n    boolean foundC2 = false;\r\n    boolean foundV1 = false;\r\n    boolean foundV2 = false;\r\n    boolean foundF1 = false;\r\n    for (Dependency<?> dependency : underTest.getDependencies()) {\r\n        if (dependency.getInjectionPoint().getMember() instanceof Constructor) {\r\n            if (dependency.getParameterIndex() == 0 && dependency.getKey().equals(keyC1)) {\r\n                foundC1 = true;\r\n            } else if (dependency.getParameterIndex() == 1 && dependency.getKey().equals(keyC2)) {\r\n                foundC2 = true;\r\n            } else {\r\n                fail(\"Did not expect constructor dependency with key \" + dependency.getKey() + \" at parameter index \" + dependency.getParameterIndex());\r\n            }\r\n        } else if (dependency.getInjectionPoint().getMember() instanceof Method) {\r\n            if (dependency.getKey().equals(keyV1)) {\r\n                foundV1 = true;\r\n            } else if (dependency.getKey().equals(keyV2)) {\r\n                foundV2 = true;\r\n            } else {\r\n                fail(\"Did not expect method dependency with key \" + dependency.getKey());\r\n            }\r\n        } else if (dependency.getInjectionPoint().getMember() instanceof Field) {\r\n            if (dependency.getKey().equals(keyF1)) {\r\n                foundF1 = true;\r\n            } else {\r\n                fail(\"Did not expect field dependency with key \" + dependency.getKey());\r\n            }\r\n        } else {\r\n            fail(\"Did not expect dependency with key \" + dependency.getKey());\r\n        }\r\n    }\r\n    assertTrue(foundC1, \"Did not find dependency C1\");\r\n    assertTrue(foundC2, \"Did not find dependency C2\");\r\n    assertTrue(foundV1, \"Did not find dependency V1\");\r\n    assertTrue(foundV2, \"Did not find dependency V2\");\r\n    assertTrue(foundF1, \"Did not find dependency F1\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\shiro\\support\\guice\\src\\test\\java\\org\\apache\\shiro\\guice\\web\\DefaultFiltersTest.java",
  "methodName" : "checkDefaultFilters",
  "sourceCode" : "@Test\r\nvoid checkDefaultFilters() throws Exception {\r\n    EnumSet<DefaultFilter> defaultFilters = EnumSet.allOf(DefaultFilter.class);\r\n    for (Field field : ShiroWebModule.class.getFields()) {\r\n        if (Modifier.isStatic(field.getModifiers()) && Key.class.isAssignableFrom(field.getType())) {\r\n            @SuppressWarnings(\"unchecked\")\r\n            Class<? extends Filter> filterType = ((Key) field.get(null)).getTypeLiteral().getRawType();\r\n            boolean found = false;\r\n            for (DefaultFilter filter : defaultFilters) {\r\n                if (filterType.equals(filter.getFilterClass())) {\r\n                    found = true;\r\n                    defaultFilters.remove(filter);\r\n                    break;\r\n                }\r\n            }\r\n            if (!found) {\r\n                fail(\"Guice ShiroWebModule contains a default filter that Shiro proper does not. (\" + filterType.getName() + \")\");\r\n            }\r\n        }\r\n    }\r\n    if (!defaultFilters.isEmpty()) {\r\n        fail(\"Guice ShiroWebModule is missing one or more filters. \" + defaultFilters);\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\shiro\\support\\guice\\src\\test\\java\\org\\apache\\shiro\\guice\\web\\FilterChainResolverProviderTest.java",
  "methodName" : "testGetDependencies",
  "sourceCode" : "@Test\r\n@SuppressWarnings(\"unchecked\")\r\nvoid testGetDependencies() throws Exception {\r\n    Set<Dependency<?>> dependencySet = underTest.getDependencies();\r\n    assertEquals(4, dependencySet.size());\r\n    assertTrue(dependencySet.contains(Dependency.get(key1a)), \"Dependency set doesn't contain key1a.\");\r\n    assertTrue(dependencySet.contains(Dependency.get(key1b)), \"Dependency set doesn't contain key1b.\");\r\n    assertTrue(dependencySet.contains(Dependency.get(key1c)), \"Dependency set doesn't contain key1c.\");\r\n    assertTrue(dependencySet.contains(Dependency.get(key2a)), \"Dependency set doesn't contain key2a.\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\shiro\\support\\guice\\src\\test\\java\\org\\apache\\shiro\\guice\\web\\FilterChainResolverProviderTest.java",
  "methodName" : "testGet",
  "sourceCode" : "@Test\r\nvoid testGet() throws Exception {\r\n    Injector injector = createMock(Injector.class);\r\n    PatternMatcher patternMatcher = createMock(PatternMatcher.class);\r\n    underTest.injector = injector;\r\n    underTest.setPatternMatcher(patternMatcher);\r\n    FilterChainResolver resolver = underTest.get();\r\n    Field chainsField = SimpleFilterChainResolver.class.getDeclaredField(\"chains\");\r\n    chainsField.setAccessible(true);\r\n    Field injectorField = SimpleFilterChainResolver.class.getDeclaredField(\"injector\");\r\n    injectorField.setAccessible(true);\r\n    Field patternMatcherField = SimpleFilterChainResolver.class.getDeclaredField(\"patternMatcher\");\r\n    patternMatcherField.setAccessible(true);\r\n    assertSame(chains, chainsField.get(resolver));\r\n    assertSame(injector, injectorField.get(resolver));\r\n    assertSame(patternMatcher, patternMatcherField.get(resolver));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\shiro\\support\\guice\\src\\test\\java\\org\\apache\\shiro\\guice\\web\\FilterConfigTest.java",
  "methodName" : "testSimple",
  "sourceCode" : "@Test\r\nvoid testSimple() throws Exception {\r\n    FilterChainResolver resolver = setupResolver();\r\n    HttpServletResponse response = createNiceMock(HttpServletResponse.class);\r\n    FilterChain chain = createNiceMock(FilterChain.class);\r\n    HttpServletRequest request = createMockRequest(\"/index.html\");\r\n    FilterChain resolved = resolver.getChain(request, response, chain);\r\n    assertNotNull(resolved);\r\n    verify(request);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\shiro\\support\\guice\\src\\test\\java\\org\\apache\\shiro\\guice\\web\\FilterConfigTest.java",
  "methodName" : "testWithConfig",
  "sourceCode" : "@Test\r\nvoid testWithConfig() throws Exception {\r\n    FilterChainResolver resolver = setupResolver();\r\n    HttpServletResponse response = createNiceMock(HttpServletResponse.class);\r\n    FilterChain chain = createNiceMock(FilterChain.class);\r\n    HttpServletRequest request = createMockRequest(\"/index2.html\");\r\n    FilterChain resolved = resolver.getChain(request, response, chain);\r\n    assertNotNull(resolved);\r\n    verify(request);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\shiro\\support\\guice\\src\\test\\java\\org\\apache\\shiro\\guice\\web\\GuiceShiroFilterTest.java",
  "methodName" : "ensureInjectable",
  "sourceCode" : "@Test\r\nvoid ensureInjectable() {\r\n    try {\r\n        InjectionPoint.forConstructorOf(GuiceShiroFilter.class);\r\n    } catch (Exception e) {\r\n        fail(\"Could not create constructor injection point.\");\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\shiro\\support\\guice\\src\\test\\java\\org\\apache\\shiro\\guice\\web\\GuiceShiroFilterTest.java",
  "methodName" : "testConstructor",
  "sourceCode" : "@Test\r\nvoid testConstructor() {\r\n    WebSecurityManager securityManager = mock(WebSecurityManager.class);\r\n    FilterChainResolver filterChainResolver = mock(FilterChainResolver.class);\r\n    ShiroFilterConfiguration filterConfiguration = mock(ShiroFilterConfiguration.class);\r\n    when(filterConfiguration.isStaticSecurityManagerEnabled()).thenReturn(true);\r\n    when(filterConfiguration.isFilterOncePerRequest()).thenReturn(false);\r\n    GuiceShiroFilter underTest = new GuiceShiroFilter(securityManager, filterChainResolver, filterConfiguration);\r\n    assertSame(securityManager, underTest.getSecurityManager());\r\n    assertSame(filterChainResolver, underTest.getFilterChainResolver());\r\n    assertTrue(underTest.isStaticSecurityManagerEnabled());\r\n    assertFalse(underTest.isFilterOncePerRequest());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\shiro\\support\\guice\\src\\test\\java\\org\\apache\\shiro\\guice\\web\\PathMatchingFilterProviderTest.java",
  "methodName" : "testPostProcess",
  "sourceCode" : "@Test\r\n@SuppressWarnings(\"unchecked\")\r\nvoid testPostProcess() {\r\n    PathMatchingFilter filter = createMock(PathMatchingFilter.class);\r\n    expect(filter.processPathConfig(\"/1\", \"first\")).andReturn(filter);\r\n    expect(filter.processPathConfig(\"/2\", \"second\")).andReturn(filter);\r\n    replay(filter);\r\n    Map<String, String> pathConfigMap = new HashMap<String, String>();\r\n    pathConfigMap.put(\"/1\", \"first\");\r\n    pathConfigMap.put(\"/2\", \"second\");\r\n    PathMatchingFilterProvider underTest = new PathMatchingFilterProvider(Key.get(PathMatchingFilter.class), pathConfigMap);\r\n    underTest.postProcess(filter);\r\n    verify(filter);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\shiro\\support\\guice\\src\\test\\java\\org\\apache\\shiro\\guice\\web\\ShiroWebModuleTest.java",
  "methodName" : "basicInstantiation",
  "sourceCode" : "@Test\r\nvoid basicInstantiation() {\r\n    final ShiroModuleTest.MockRealm mockRealm = createMock(ShiroModuleTest.MockRealm.class);\r\n    ServletContext servletContext = createMock(ServletContext.class);\r\n    Injector injector = Guice.createInjector(new ShiroWebModule(servletContext) {\r\n\r\n        @Override\r\n        protected void configureShiroWeb() {\r\n            bindRealm().to(ShiroModuleTest.MockRealm.class);\r\n            expose(SessionManager.class);\r\n        }\r\n\r\n        @Provides\r\n        public ShiroModuleTest.MockRealm createRealm() {\r\n            return mockRealm;\r\n        }\r\n    });\r\n    // we're not getting a WebSecurityManager here b/c it's not exposed.  There didn't seem to be a good reason to\r\n    // expose it outside the Shiro module.\r\n    SecurityManager securityManager = injector.getInstance(SecurityManager.class);\r\n    assertNotNull(securityManager);\r\n    assertTrue(securityManager instanceof WebSecurityManager);\r\n    SessionManager sessionManager = injector.getInstance(SessionManager.class);\r\n    assertNotNull(sessionManager);\r\n    assertTrue(sessionManager instanceof ServletContainerSessionManager);\r\n    assertTrue(((DefaultWebSecurityManager) securityManager).getSessionManager() instanceof ServletContainerSessionManager);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\shiro\\support\\guice\\src\\test\\java\\org\\apache\\shiro\\guice\\web\\ShiroWebModuleTest.java",
  "methodName" : "testBindGuiceFilter",
  "sourceCode" : "@Test\r\nvoid testBindGuiceFilter() throws Exception {\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\shiro\\support\\guice\\src\\test\\java\\org\\apache\\shiro\\guice\\web\\ShiroWebModuleTest.java",
  "methodName" : "testBindWebSecurityManager",
  "sourceCode" : "@Test\r\nvoid testBindWebSecurityManager() throws Exception {\r\n    final ShiroModuleTest.MockRealm mockRealm = createMock(ShiroModuleTest.MockRealm.class);\r\n    ServletContext servletContext = createMock(ServletContext.class);\r\n    Injector injector = Guice.createInjector(new ShiroWebModule(servletContext) {\r\n\r\n        @Override\r\n        protected void configureShiroWeb() {\r\n            bindRealm().to(ShiroModuleTest.MockRealm.class);\r\n            expose(WebSecurityManager.class);\r\n        }\r\n\r\n        @Provides\r\n        public ShiroModuleTest.MockRealm createRealm() {\r\n            return mockRealm;\r\n        }\r\n\r\n        @Override\r\n        protected void bindWebSecurityManager(AnnotatedBindingBuilder<? super WebSecurityManager> bind) {\r\n            bind.to(MyDefaultWebSecurityManager.class).asEagerSingleton();\r\n        }\r\n    });\r\n    SecurityManager securityManager = injector.getInstance(SecurityManager.class);\r\n    assertNotNull(securityManager);\r\n    assertTrue(securityManager instanceof MyDefaultWebSecurityManager);\r\n    WebSecurityManager webSecurityManager = injector.getInstance(WebSecurityManager.class);\r\n    assertNotNull(webSecurityManager);\r\n    assertTrue(webSecurityManager instanceof MyDefaultWebSecurityManager);\r\n    // SHIRO-435: Check both keys SecurityManager and WebSecurityManager are bound to the same instance\r\n    assertTrue(securityManager == webSecurityManager);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\shiro\\support\\guice\\src\\test\\java\\org\\apache\\shiro\\guice\\web\\ShiroWebModuleTest.java",
  "methodName" : "testBindWebEnvironment",
  "sourceCode" : "@Test\r\nvoid testBindWebEnvironment() throws Exception {\r\n    final ShiroModuleTest.MockRealm mockRealm = createMock(ShiroModuleTest.MockRealm.class);\r\n    ServletContext servletContext = createMock(ServletContext.class);\r\n    Injector injector = Guice.createInjector(new ShiroWebModule(servletContext) {\r\n\r\n        @Override\r\n        protected void configureShiroWeb() {\r\n            bindRealm().to(ShiroModuleTest.MockRealm.class);\r\n            expose(WebEnvironment.class);\r\n            expose(Environment.class);\r\n        }\r\n\r\n        @Provides\r\n        public ShiroModuleTest.MockRealm createRealm() {\r\n            return mockRealm;\r\n        }\r\n\r\n        @Override\r\n        protected void bindWebEnvironment(AnnotatedBindingBuilder<? super WebEnvironment> bind) {\r\n            bind.to(MyWebEnvironment.class).asEagerSingleton();\r\n        }\r\n    });\r\n    Environment environment = injector.getInstance(Environment.class);\r\n    assertNotNull(environment);\r\n    assertTrue(environment instanceof MyWebEnvironment);\r\n    WebEnvironment webEnvironment = injector.getInstance(WebEnvironment.class);\r\n    assertNotNull(webEnvironment);\r\n    assertTrue(webEnvironment instanceof MyWebEnvironment);\r\n    // SHIRO-435: Check both keys Environment and WebEnvironment are bound to the same instance\r\n    assertTrue(environment == webEnvironment);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\shiro\\support\\guice\\src\\test\\java\\org\\apache\\shiro\\guice\\web\\ShiroWebModuleTest.java",
  "methodName" : "testAddFilterChainGuice3and4",
  "sourceCode" : "/**\r\n * @since 1.4\r\n */\r\n@SuppressWarnings(\"checkstyle:MethodLength\")\r\n@Test\r\nvoid testAddFilterChainGuice3and4() {\r\n    final ShiroModuleTest.MockRealm mockRealm = createMock(ShiroModuleTest.MockRealm.class);\r\n    ServletContext servletContext = createMock(ServletContext.class);\r\n    HttpServletRequest request = createMock(HttpServletRequest.class);\r\n    servletContext.setAttribute(eq(EnvironmentLoader.ENVIRONMENT_ATTRIBUTE_KEY), EasyMock.anyObject());\r\n    expect(request.getAttribute(\"javax.servlet.include.context_path\")).andReturn(\"\").anyTimes();\r\n    expect(request.getCharacterEncoding()).andReturn(\"UTF-8\").anyTimes();\r\n    expect(request.getAttribute(\"javax.servlet.include.path_info\")).andReturn(null).anyTimes();\r\n    expect(request.getPathInfo()).andReturn(null).anyTimes();\r\n    expect(request.getAttribute(\"javax.servlet.include.servlet_path\")).andReturn(\"/test_authc\");\r\n    expect(request.getAttribute(\"javax.servlet.include.servlet_path\")).andReturn(\"/test_custom_filter\");\r\n    expect(request.getAttribute(\"javax.servlet.include.servlet_path\")).andReturn(\"/test_authc_basic\");\r\n    expect(request.getAttribute(\"javax.servlet.include.servlet_path\")).andReturn(\"/test_perms\");\r\n    expect(request.getAttribute(\"javax.servlet.include.servlet_path\")).andReturn(\"/multiple_configs\");\r\n    replay(servletContext, request);\r\n    Injector injector = Guice.createInjector(new ShiroWebModule(servletContext) {\r\n\r\n        @Override\r\n        protected void configureShiroWeb() {\r\n            bindRealm().to(ShiroModuleTest.MockRealm.class);\r\n            expose(FilterChainResolver.class);\r\n            this.addFilterChain(\"/test_authc/**\", filterConfig(AUTHC));\r\n            this.addFilterChain(\"/test_custom_filter/**\", Key.get(CustomFilter.class));\r\n            this.addFilterChain(\"/test_authc_basic/**\", AUTHC_BASIC);\r\n            this.addFilterChain(\"/test_perms/**\", filterConfig(PERMS, \"remote:invoke:lan,wan\"));\r\n            this.addFilterChain(\"/multiple_configs/**\", filterConfig(AUTHC), filterConfig(ROLES, \"b2bClient\"), filterConfig(PERMS, \"remote:invoke:lan,wan\"));\r\n        }\r\n\r\n        @Provides\r\n        public ShiroModuleTest.MockRealm createRealm() {\r\n            return mockRealm;\r\n        }\r\n    });\r\n    FilterChainResolver resolver = injector.getInstance(FilterChainResolver.class);\r\n    assertThat(resolver, instanceOf(SimpleFilterChainResolver.class));\r\n    SimpleFilterChainResolver simpleFilterChainResolver = (SimpleFilterChainResolver) resolver;\r\n    // test the /test_authc resource\r\n    FilterChain filterChain = simpleFilterChainResolver.getChain(request, null, null);\r\n    assertThat(filterChain, instanceOf(SimpleFilterChain.class));\r\n    Filter nextFilter = getNextFilter((SimpleFilterChain) filterChain);\r\n    assertThat(nextFilter, instanceOf(InvalidRequestFilter.class));\r\n    nextFilter = getNextFilter((SimpleFilterChain) filterChain);\r\n    assertThat(nextFilter, instanceOf(FormAuthenticationFilter.class));\r\n    // test the /test_custom_filter resource\r\n    filterChain = simpleFilterChainResolver.getChain(request, null, null);\r\n    assertThat(filterChain, instanceOf(SimpleFilterChain.class));\r\n    nextFilter = getNextFilter((SimpleFilterChain) filterChain);\r\n    assertThat(nextFilter, instanceOf(InvalidRequestFilter.class));\r\n    nextFilter = getNextFilter((SimpleFilterChain) filterChain);\r\n    assertThat(nextFilter, instanceOf(CustomFilter.class));\r\n    // test the /test_authc_basic resource\r\n    filterChain = simpleFilterChainResolver.getChain(request, null, null);\r\n    assertThat(filterChain, instanceOf(SimpleFilterChain.class));\r\n    nextFilter = getNextFilter((SimpleFilterChain) filterChain);\r\n    assertThat(nextFilter, instanceOf(InvalidRequestFilter.class));\r\n    nextFilter = getNextFilter((SimpleFilterChain) filterChain);\r\n    assertThat(nextFilter, instanceOf(BasicHttpAuthenticationFilter.class));\r\n    // test the /test_perms resource\r\n    filterChain = simpleFilterChainResolver.getChain(request, null, null);\r\n    assertThat(filterChain, instanceOf(SimpleFilterChain.class));\r\n    nextFilter = getNextFilter((SimpleFilterChain) filterChain);\r\n    assertThat(nextFilter, instanceOf(InvalidRequestFilter.class));\r\n    nextFilter = getNextFilter((SimpleFilterChain) filterChain);\r\n    assertThat(nextFilter, instanceOf(PermissionsAuthorizationFilter.class));\r\n    // test the /multiple_configs resource\r\n    filterChain = simpleFilterChainResolver.getChain(request, null, null);\r\n    assertThat(filterChain, instanceOf(SimpleFilterChain.class));\r\n    assertThat(getNextFilter((SimpleFilterChain) filterChain), instanceOf(InvalidRequestFilter.class));\r\n    assertThat(getNextFilter((SimpleFilterChain) filterChain), instanceOf(FormAuthenticationFilter.class));\r\n    assertThat(getNextFilter((SimpleFilterChain) filterChain), instanceOf(RolesAuthorizationFilter.class));\r\n    assertThat(getNextFilter((SimpleFilterChain) filterChain), instanceOf(PermissionsAuthorizationFilter.class));\r\n    verify(servletContext, request);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\shiro\\support\\guice\\src\\test\\java\\org\\apache\\shiro\\guice\\web\\ShiroWebModuleTest.java",
  "methodName" : "testAddFilterChainGuice3Only",
  "sourceCode" : "/**\r\n * @since 1.4\r\n */\r\n@Test\r\n@Tag(\"Guice3\")\r\nvoid testAddFilterChainGuice3Only() {\r\n    Assumptions.assumeTrue(ShiroWebModule.isGuiceVersion3(), \"This test only runs against Guice 3.x\");\r\n    final ShiroModuleTest.MockRealm mockRealm = createMock(ShiroModuleTest.MockRealm.class);\r\n    ServletContext servletContext = createMock(ServletContext.class);\r\n    HttpServletRequest request = createMock(HttpServletRequest.class);\r\n    servletContext.setAttribute(eq(EnvironmentLoader.ENVIRONMENT_ATTRIBUTE_KEY), EasyMock.anyObject());\r\n    expect(request.getAttribute(\"javax.servlet.include.context_path\")).andReturn(\"\").anyTimes();\r\n    expect(request.getCharacterEncoding()).andReturn(\"UTF-8\").anyTimes();\r\n    expect(request.getAttribute(\"javax.servlet.include.request_uri\")).andReturn(\"/test_authc\");\r\n    expect(request.getAttribute(\"javax.servlet.include.request_uri\")).andReturn(\"/test_custom_filter\");\r\n    expect(request.getAttribute(\"javax.servlet.include.request_uri\")).andReturn(\"/test_perms\");\r\n    expect(request.getAttribute(\"javax.servlet.include.request_uri\")).andReturn(\"/multiple_configs\");\r\n    replay(servletContext, request);\r\n    Injector injector = Guice.createInjector(new ShiroWebModule(servletContext) {\r\n\r\n        @Override\r\n        @SuppressWarnings(\"unchecked\")\r\n        @Deprecated\r\n        protected void configureShiroWeb() {\r\n            bindRealm().to(ShiroModuleTest.MockRealm.class);\r\n            expose(FilterChainResolver.class);\r\n            this.addFilterChain(\"/test_authc/**\", AUTHC);\r\n            this.addFilterChain(\"/test_custom_filter/**\", Key.get(CustomFilter.class));\r\n            this.addFilterChain(\"/test_perms/**\", config(PERMS, \"remote:invoke:lan,wan\"));\r\n            this.addFilterChain(\"/multiple_configs/**\", AUTHC, config(ROLES, \"b2bClient\"), config(PERMS, \"remote:invoke:lan,wan\"));\r\n        }\r\n\r\n        @Provides\r\n        public ShiroModuleTest.MockRealm createRealm() {\r\n            return mockRealm;\r\n        }\r\n    });\r\n    FilterChainResolver resolver = injector.getInstance(FilterChainResolver.class);\r\n    assertThat(resolver, instanceOf(SimpleFilterChainResolver.class));\r\n    SimpleFilterChainResolver simpleFilterChainResolver = (SimpleFilterChainResolver) resolver;\r\n    // test the /test_authc resource\r\n    FilterChain filterChain = simpleFilterChainResolver.getChain(request, null, null);\r\n    assertThat(filterChain, instanceOf(SimpleFilterChain.class));\r\n    Filter nextFilter = getNextFilter((SimpleFilterChain) filterChain);\r\n    assertThat(nextFilter, instanceOf(FormAuthenticationFilter.class));\r\n    // test the /test_custom_filter resource\r\n    filterChain = simpleFilterChainResolver.getChain(request, null, null);\r\n    assertThat(filterChain, instanceOf(SimpleFilterChain.class));\r\n    nextFilter = getNextFilter((SimpleFilterChain) filterChain);\r\n    assertThat(nextFilter, instanceOf(CustomFilter.class));\r\n    // test the /test_perms resource\r\n    filterChain = simpleFilterChainResolver.getChain(request, null, null);\r\n    assertThat(filterChain, instanceOf(SimpleFilterChain.class));\r\n    nextFilter = getNextFilter((SimpleFilterChain) filterChain);\r\n    assertThat(nextFilter, instanceOf(PermissionsAuthorizationFilter.class));\r\n    // test the /multiple_configs resource\r\n    filterChain = simpleFilterChainResolver.getChain(request, null, null);\r\n    assertThat(filterChain, instanceOf(SimpleFilterChain.class));\r\n    assertThat(getNextFilter((SimpleFilterChain) filterChain), instanceOf(FormAuthenticationFilter.class));\r\n    assertThat(getNextFilter((SimpleFilterChain) filterChain), instanceOf(RolesAuthorizationFilter.class));\r\n    assertThat(getNextFilter((SimpleFilterChain) filterChain), instanceOf(PermissionsAuthorizationFilter.class));\r\n    verify(servletContext, request);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\shiro\\support\\guice\\src\\test\\java\\org\\apache\\shiro\\guice\\web\\ShiroWebModuleTest.java",
  "methodName" : "testDefaultPath",
  "sourceCode" : "@Test\r\nvoid testDefaultPath() {\r\n    final ShiroModuleTest.MockRealm mockRealm = createMock(ShiroModuleTest.MockRealm.class);\r\n    ServletContext servletContext = createMock(ServletContext.class);\r\n    HttpServletRequest request = createMock(HttpServletRequest.class);\r\n    servletContext.setAttribute(eq(EnvironmentLoader.ENVIRONMENT_ATTRIBUTE_KEY), EasyMock.anyObject());\r\n    expect(request.getAttribute(\"javax.servlet.include.context_path\")).andReturn(\"\").anyTimes();\r\n    expect(request.getCharacterEncoding()).andReturn(\"UTF-8\").anyTimes();\r\n    expect(request.getAttribute(\"javax.servlet.include.path_info\")).andReturn(null).anyTimes();\r\n    expect(request.getPathInfo()).andReturn(null).anyTimes();\r\n    expect(request.getAttribute(\"javax.servlet.include.servlet_path\")).andReturn(\"/test/foobar\");\r\n    replay(servletContext, request);\r\n    Injector injector = Guice.createInjector(new ShiroWebModule(servletContext) {\r\n\r\n        @Override\r\n        protected void configureShiroWeb() {\r\n            bindRealm().to(ShiroModuleTest.MockRealm.class);\r\n            expose(FilterChainResolver.class);\r\n            // no paths configured\r\n        }\r\n\r\n        @Provides\r\n        public ShiroModuleTest.MockRealm createRealm() {\r\n            return mockRealm;\r\n        }\r\n    });\r\n    FilterChainResolver resolver = injector.getInstance(FilterChainResolver.class);\r\n    assertThat(resolver, instanceOf(SimpleFilterChainResolver.class));\r\n    SimpleFilterChainResolver simpleFilterChainResolver = (SimpleFilterChainResolver) resolver;\r\n    // test the /test_authc resource\r\n    FilterChain filterChain = simpleFilterChainResolver.getChain(request, null, null);\r\n    assertThat(filterChain, instanceOf(SimpleFilterChain.class));\r\n    assertThat(getNextFilter((SimpleFilterChain) filterChain), instanceOf(InvalidRequestFilter.class));\r\n    assertThat(getNextFilter((SimpleFilterChain) filterChain), nullValue());\r\n    verify(servletContext, request);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\shiro\\support\\guice\\src\\test\\java\\org\\apache\\shiro\\guice\\web\\ShiroWebModuleTest.java",
  "methodName" : "testDisableGlobalFilters",
  "sourceCode" : "@Test\r\nvoid testDisableGlobalFilters() {\r\n    final ShiroModuleTest.MockRealm mockRealm = createMock(ShiroModuleTest.MockRealm.class);\r\n    ServletContext servletContext = createMock(ServletContext.class);\r\n    HttpServletRequest request = createMock(HttpServletRequest.class);\r\n    servletContext.setAttribute(eq(EnvironmentLoader.ENVIRONMENT_ATTRIBUTE_KEY), EasyMock.anyObject());\r\n    expect(request.getAttribute(\"javax.servlet.include.context_path\")).andReturn(\"\").anyTimes();\r\n    expect(request.getCharacterEncoding()).andReturn(\"UTF-8\").anyTimes();\r\n    expect(request.getAttribute(\"javax.servlet.include.path_info\")).andReturn(null).anyTimes();\r\n    expect(request.getPathInfo()).andReturn(null).anyTimes();\r\n    expect(request.getAttribute(\"javax.servlet.include.servlet_path\")).andReturn(\"/test/foobar\");\r\n    replay(servletContext, request);\r\n    Injector injector = Guice.createInjector(new ShiroWebModule(servletContext) {\r\n\r\n        @Override\r\n        protected void configureShiroWeb() {\r\n            bindRealm().to(ShiroModuleTest.MockRealm.class);\r\n            expose(FilterChainResolver.class);\r\n            this.addFilterChain(\"/**\", filterConfig(AUTHC));\r\n        }\r\n\r\n        @Override\r\n        public List<FilterConfig<? extends Filter>> globalFilters() {\r\n            return Collections.emptyList();\r\n        }\r\n\r\n        @Provides\r\n        public ShiroModuleTest.MockRealm createRealm() {\r\n            return mockRealm;\r\n        }\r\n    });\r\n    FilterChainResolver resolver = injector.getInstance(FilterChainResolver.class);\r\n    assertThat(resolver, instanceOf(SimpleFilterChainResolver.class));\r\n    SimpleFilterChainResolver simpleFilterChainResolver = (SimpleFilterChainResolver) resolver;\r\n    // test the /test_authc resource\r\n    FilterChain filterChain = simpleFilterChainResolver.getChain(request, null, null);\r\n    assertThat(filterChain, instanceOf(SimpleFilterChain.class));\r\n    assertThat(getNextFilter((SimpleFilterChain) filterChain), instanceOf(FormAuthenticationFilter.class));\r\n    assertThat(getNextFilter((SimpleFilterChain) filterChain), nullValue());\r\n    verify(servletContext, request);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\shiro\\support\\guice\\src\\test\\java\\org\\apache\\shiro\\guice\\web\\ShiroWebModuleTest.java",
  "methodName" : "testChangeInvalidFilterConfig",
  "sourceCode" : "@Test\r\nvoid testChangeInvalidFilterConfig() {\r\n    final ShiroModuleTest.MockRealm mockRealm = createMock(ShiroModuleTest.MockRealm.class);\r\n    ServletContext servletContext = createMock(ServletContext.class);\r\n    HttpServletRequest request = createMock(HttpServletRequest.class);\r\n    servletContext.setAttribute(eq(EnvironmentLoader.ENVIRONMENT_ATTRIBUTE_KEY), EasyMock.anyObject());\r\n    expect(request.getAttribute(\"javax.servlet.include.context_path\")).andReturn(\"\").anyTimes();\r\n    expect(request.getCharacterEncoding()).andReturn(\"UTF-8\").anyTimes();\r\n    expect(request.getAttribute(\"javax.servlet.include.path_info\")).andReturn(null).anyTimes();\r\n    expect(request.getPathInfo()).andReturn(null).anyTimes();\r\n    expect(request.getAttribute(\"javax.servlet.include.servlet_path\")).andReturn(\"/test/foobar\");\r\n    replay(servletContext, request);\r\n    Injector injector = Guice.createInjector(new ShiroWebModule(servletContext) {\r\n\r\n        @Override\r\n        protected void configureShiroWeb() {\r\n            bindConstant().annotatedWith(Names.named(\"shiro.blockBackslash\")).to(false);\r\n            bindRealm().to(ShiroModuleTest.MockRealm.class);\r\n            expose(FilterChainResolver.class);\r\n            this.addFilterChain(\"/**\", filterConfig(AUTHC));\r\n        }\r\n\r\n        @Provides\r\n        public ShiroModuleTest.MockRealm createRealm() {\r\n            return mockRealm;\r\n        }\r\n    });\r\n    FilterChainResolver resolver = injector.getInstance(FilterChainResolver.class);\r\n    assertThat(resolver, instanceOf(SimpleFilterChainResolver.class));\r\n    SimpleFilterChainResolver simpleFilterChainResolver = (SimpleFilterChainResolver) resolver;\r\n    // test the /test_authc resource\r\n    FilterChain filterChain = simpleFilterChainResolver.getChain(request, null, null);\r\n    assertThat(filterChain, instanceOf(SimpleFilterChain.class));\r\n    Filter invalidRequestFilter = getNextFilter((SimpleFilterChain) filterChain);\r\n    assertThat(invalidRequestFilter, instanceOf(InvalidRequestFilter.class));\r\n    assertFalse(((InvalidRequestFilter) invalidRequestFilter).isBlockBackslash(), \"Expected 'blockBackslash' to be false\");\r\n    assertThat(getNextFilter((SimpleFilterChain) filterChain), instanceOf(FormAuthenticationFilter.class));\r\n    assertThat(getNextFilter((SimpleFilterChain) filterChain), nullValue());\r\n    verify(servletContext, request);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\shiro\\support\\guice\\src\\test\\java\\org\\apache\\shiro\\guice\\web\\SimpleFilterChainResolverTest.java",
  "methodName" : "testGetChain",
  "sourceCode" : "@Test\r\n@SuppressWarnings(\"unchecked\")\r\nvoid testGetChain() throws Exception {\r\n    // test that it uses the pattern matcher - check\r\n    // test that the FIRST chain found is the one that gets returned - check\r\n    // test that the chain returned actually contains the filters returned by the injector - check\r\n    // test that the keys specified for the chain are requested from the injector - check\r\n    // test that filters are looked up lazily - check\r\n    IMocksControl ctrl = createStrictControl();\r\n    Injector injector = ctrl.createMock(Injector.class);\r\n    Map<String, Key<? extends Filter>[]> chainMap = new LinkedHashMap<String, Key<? extends Filter>[]>();\r\n    final String chainOne = \"one\";\r\n    final String chainTwo = \"two\";\r\n    final String chainThree = \"three\";\r\n    final Key<? extends Filter> key1a = Key.get(Filter.class, Names.named(\"key1a\"));\r\n    final Key<? extends Filter> key1b = Key.get(Filter.class, Names.named(\"key1b\"));\r\n    final Key<? extends Filter> key2a = Key.get(Filter.class, Names.named(\"key2a\"));\r\n    final Key<? extends Filter> key2b = Key.get(Filter.class, Names.named(\"key2b\"));\r\n    final Key<? extends Filter> key3a = Key.get(Filter.class, Names.named(\"key3a\"));\r\n    final Key<? extends Filter> key3b = Key.get(Filter.class, Names.named(\"key3b\"));\r\n    chainMap.put(chainOne, new Key[] { key1a, key1b });\r\n    chainMap.put(chainTwo, new Key[] { key2a, key2b });\r\n    chainMap.put(chainThree, new Key[] { key3a, key3b });\r\n    PatternMatcher patternMatcher = ctrl.createMock(PatternMatcher.class);\r\n    ServletRequest request = ctrl.createMock(HttpServletRequest.class);\r\n    ServletResponse response = ctrl.createMock(HttpServletResponse.class);\r\n    FilterChain originalChain = ctrl.createMock(FilterChain.class);\r\n    expect(request.getAttribute(WebUtils.INCLUDE_SERVLET_PATH_ATTRIBUTE)).andReturn(\"/mychain\");\r\n    expect(request.getAttribute(WebUtils.INCLUDE_PATH_INFO_ATTRIBUTE)).andReturn(\"\");\r\n    expect(request.getCharacterEncoding()).andStubReturn(null);\r\n    expect(patternMatcher.matches(chainOne, \"/mychain\")).andReturn(false);\r\n    expect(patternMatcher.matches(chainTwo, \"/mychain\")).andReturn(true);\r\n    Filter filter2a = ctrl.createMock(Filter.class);\r\n    Filter filter2b = ctrl.createMock(Filter.class);\r\n    expect((Filter) injector.getInstance(key2a)).andReturn(filter2a);\r\n    filter2a.doFilter(same(request), same(response), anyObject(FilterChain.class));\r\n    expect((Filter) injector.getInstance(key2b)).andReturn(filter2b);\r\n    filter2b.doFilter(same(request), same(response), anyObject(FilterChain.class));\r\n    originalChain.doFilter(request, response);\r\n    ctrl.replay();\r\n    SimpleFilterChainResolver underTest = new SimpleFilterChainResolver(chainMap, injector, patternMatcher);\r\n    FilterChain got = underTest.getChain(request, response, originalChain);\r\n    got.doFilter(request, response);\r\n    got.doFilter(request, response);\r\n    got.doFilter(request, response);\r\n    ctrl.verify();\r\n    ctrl.reset();\r\n    expect(request.getAttribute(WebUtils.INCLUDE_SERVLET_PATH_ATTRIBUTE)).andReturn(\"/nochain\");\r\n    expect(request.getAttribute(WebUtils.INCLUDE_PATH_INFO_ATTRIBUTE)).andReturn(\"\");\r\n    expect(request.getCharacterEncoding()).andStubReturn(null);\r\n    expect(patternMatcher.matches(chainOne, \"/nochain\")).andReturn(false);\r\n    expect(patternMatcher.matches(chainTwo, \"/nochain\")).andReturn(false);\r\n    expect(patternMatcher.matches(chainThree, \"/nochain\")).andReturn(false);\r\n    ctrl.replay();\r\n    assertNull(underTest.getChain(request, response, originalChain), \"Expected no chain to match, did not get a null value in return.\");\r\n    ctrl.verify();\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\shiro\\support\\guice\\src\\test\\java\\org\\apache\\shiro\\guice\\web\\SimpleFilterChainTest.java",
  "methodName" : "testDoFilter",
  "sourceCode" : "@Test\r\nvoid testDoFilter() throws Exception {\r\n    IMocksControl ctrl = createStrictControl();\r\n    FilterChain originalChain = ctrl.createMock(FilterChain.class);\r\n    Filter filter1 = ctrl.createMock(\"filter1\", Filter.class);\r\n    Filter filter2 = ctrl.createMock(\"filter2\", Filter.class);\r\n    ServletRequest request = ctrl.createMock(ServletRequest.class);\r\n    ServletResponse response = ctrl.createMock(ServletResponse.class);\r\n    Capture<FilterChain> fc1 = Capture.newInstance();\r\n    Capture<FilterChain> fc2 = Capture.newInstance();\r\n    filter1.doFilter(same(request), same(response), and(anyObject(FilterChain.class), capture(fc1)));\r\n    filter2.doFilter(same(request), same(response), and(anyObject(FilterChain.class), capture(fc2)));\r\n    originalChain.doFilter(request, response);\r\n    ctrl.replay();\r\n    SimpleFilterChain underTest = new SimpleFilterChain(originalChain, Arrays.asList(filter1, filter2).iterator());\r\n    // all we actually care about is that, if we keep calling the filter chain, everything is called in the right\r\n    // order - we don't care what fc actually contains\r\n    underTest.doFilter(request, response);\r\n    fc1.getValue().doFilter(request, response);\r\n    fc2.getValue().doFilter(request, response);\r\n    ctrl.verify();\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\shiro\\support\\guice\\src\\test\\java\\org\\apache\\shiro\\guice\\web\\WebGuiceEnvironmentTest.java",
  "methodName" : "ensureInjectable",
  "sourceCode" : "@Test\r\nvoid ensureInjectable() {\r\n    try {\r\n        InjectionPoint ip = InjectionPoint.forConstructorOf(WebGuiceEnvironment.class);\r\n    } catch (Exception e) {\r\n        fail(\"Could not create constructor injection point.\");\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\shiro\\support\\guice\\src\\test\\java\\org\\apache\\shiro\\guice\\web\\WebGuiceEnvironmentTest.java",
  "methodName" : "testConstructor",
  "sourceCode" : "@Test\r\nvoid testConstructor() {\r\n    WebSecurityManager securityManager = createMock(WebSecurityManager.class);\r\n    FilterChainResolver filterChainResolver = createMock(FilterChainResolver.class);\r\n    ServletContext servletContext = createMock(ServletContext.class);\r\n    ShiroFilterConfiguration filterConfiguration = createMock(ShiroFilterConfiguration.class);\r\n    Capture<WebGuiceEnvironment> capture = Capture.newInstance();\r\n    servletContext.setAttribute(eq(EnvironmentLoaderListener.ENVIRONMENT_ATTRIBUTE_KEY), and(anyObject(WebGuiceEnvironment.class), capture(capture)));\r\n    replay(servletContext, securityManager, filterChainResolver);\r\n    WebGuiceEnvironment underTest = new WebGuiceEnvironment(filterChainResolver, servletContext, securityManager, filterConfiguration);\r\n    assertSame(securityManager, underTest.getSecurityManager());\r\n    assertSame(filterChainResolver, underTest.getFilterChainResolver());\r\n    assertSame(securityManager, underTest.getWebSecurityManager());\r\n    assertSame(servletContext, underTest.getServletContext());\r\n    assertSame(underTest, capture.getValue());\r\n    verify(servletContext);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\shiro\\support\\jakarta-ee\\src\\test\\java\\org\\apache\\shiro\\ee\\cdi\\ShiroScopeContextTest.java",
  "methodName" : "basics",
  "sourceCode" : "@Test\r\nvoid basics() {\r\n    assertTrue(ctx.isActive());\r\n    assertEquals(ViewScoped.class, ctx.getScope());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\shiro\\support\\jakarta-ee\\src\\test\\java\\org\\apache\\shiro\\ee\\cdi\\ShiroScopeContextTest.java",
  "methodName" : "webSessionsBasic",
  "sourceCode" : "@Test\r\nvoid webSessionsBasic() {\r\n    setupWebSessions();\r\n    assertTrue(isWebContainerSessions(SecurityUtils.getSecurityManager()));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\shiro\\support\\jakarta-ee\\src\\test\\java\\org\\apache\\shiro\\ee\\cdi\\ShiroScopeContextTest.java",
  "methodName" : "webSessionsGet",
  "sourceCode" : "@Test\r\nvoid webSessionsGet() {\r\n    setupWebSessions();\r\n    try (var cdim = mockStatic(CDI.class, Answers.RETURNS_DEEP_STUBS)) {\r\n        when(CDI.current().getBeanManager().getContext(SessionScoped.class).get(contextual)).thenReturn(bean);\r\n        assertEquals(bean, ctx.get(contextual));\r\n        assertNull(ctx.get(null));\r\n        verify(CDI.current().getBeanManager(), atLeast(2)).getContext(any());\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\shiro\\support\\jakarta-ee\\src\\test\\java\\org\\apache\\shiro\\ee\\cdi\\ShiroScopeContextTest.java",
  "methodName" : "webSessionsCreate",
  "sourceCode" : "@Test\r\nvoid webSessionsCreate() {\r\n    setupWebSessions();\r\n    try (var cdim = mockStatic(CDI.class, Answers.RETURNS_DEEP_STUBS)) {\r\n        when(CDI.current().getBeanManager().getContext(SessionScoped.class).get(contextual, creationalContext)).thenReturn(bean);\r\n        assertEquals(bean, ctx.get(contextual, creationalContext));\r\n        assertNull(ctx.get(null));\r\n        verify(CDI.current().getBeanManager(), atLeast(2)).getContext(any());\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\shiro\\support\\jakarta-ee\\src\\test\\java\\org\\apache\\shiro\\ee\\filters\\FormSupportTest.java",
  "methodName" : "nullReferer",
  "sourceCode" : "@Test\r\nvoid nullReferer() {\r\n    when(request.getHeader(\"referer\")).thenReturn(null);\r\n    assertNull(getReferer(request));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\shiro\\support\\jakarta-ee\\src\\test\\java\\org\\apache\\shiro\\ee\\filters\\FormSupportTest.java",
  "methodName" : "plainStringReferer",
  "sourceCode" : "@Test\r\nvoid plainStringReferer() {\r\n    when(request.getHeader(\"referer\")).thenReturn(\"hello\");\r\n    assertEquals(\"hello\", getReferer(request));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\shiro\\support\\jakarta-ee\\src\\test\\java\\org\\apache\\shiro\\ee\\filters\\FormSupportTest.java",
  "methodName" : "switchToHttps",
  "sourceCode" : "@Test\r\nvoid switchToHttps() {\r\n    when(request.getHeader(\"referer\")).thenReturn(\"http://example.com\");\r\n    assertEquals(\"https://example.com\", getReferer(request));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\shiro\\support\\jakarta-ee\\src\\test\\java\\org\\apache\\shiro\\ee\\filters\\FormSupportTest.java",
  "methodName" : "dontSwitchToHttpsWhenCustomPort",
  "sourceCode" : "@Test\r\nvoid dontSwitchToHttpsWhenCustomPort() {\r\n    when(request.getHeader(\"referer\")).thenReturn(\"http://example.com:8080/\");\r\n    assertEquals(\"http://example.com:8080/\", getReferer(request));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\shiro\\support\\jakarta-ee\\src\\test\\java\\org\\apache\\shiro\\ee\\filters\\FormSupportTest.java",
  "methodName" : "dontSwitchToHttpsWhenCustomPortNoTrailingSlash",
  "sourceCode" : "@Test\r\nvoid dontSwitchToHttpsWhenCustomPortNoTrailingSlash() {\r\n    when(request.getHeader(\"referer\")).thenReturn(\"http://example.com:8080\");\r\n    assertEquals(\"http://example.com:8080\", getReferer(request));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\shiro\\support\\jakarta-ee\\src\\test\\java\\org\\apache\\shiro\\ee\\filters\\FormSupportTest.java",
  "methodName" : "viewStatePattern",
  "sourceCode" : "@Test\r\nvoid viewStatePattern() {\r\n    String statefulFormData = \"j_idt5%3Dj_idt5%26j_idt5%3Aj_idt7%3Daaa%26j_idt5%3Aj_idt9%3Dbbb%26j_idt5%3A\" + \"j_idt11%3DSubmit+...%26\" + jakartify(\"javax.faces.ViewState\") + \"%3D-8335355445345003673%3A-6008443334776649058\";\r\n    assertTrue(isJSFStatefulForm(decode(statefulFormData)));\r\n    String statelessFormData = \"j_idt5%3Dj_idt5%26j_idt5%3Aj_idt7%3Daaa%26j_idt5%3Aj_idt9%3Dbbb%26j_idt5%3A\" + \"j_idt11%3DSubmit+...%26\" + jakartify(\"javax.faces.ViewState\") + \"%3Dstateless\";\r\n    assertFalse(isJSFStatefulForm(statelessFormData));\r\n    assertThrows(NullPointerException.class, () -> isJSFStatefulForm(null));\r\n    String nonJSFFormData = \"j_idt5%3Dj_idt5%26j_idt5%3Aj_idt7%3Daaa%26j_idt5%3Aj_idt9%3Dbbb%26j_idt5%3A\" + \"j_idt11%3DSubmit+...\";\r\n    assertFalse(isJSFStatefulForm(\"xxx\"));\r\n    assertFalse(isJSFStatefulForm(nonJSFFormData));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\shiro\\support\\jakarta-ee\\src\\test\\java\\org\\apache\\shiro\\ee\\filters\\FormSupportTest.java",
  "methodName" : "extractViewState",
  "sourceCode" : "@Test\r\nvoid extractViewState() {\r\n    assertThrows(NullPointerException.class, () -> extractJSFNewViewState(null, null));\r\n    assertEquals(\"hello\", extractJSFNewViewState(\"\", \"hello\"));\r\n    assertEquals(jakartify(\"javax.faces.ViewState=stateless&hello=bye\"), extractJSFNewViewState(\"xxx\", jakartify(\"javax.faces.ViewState=stateless&hello=bye\")));\r\n    assertEquals(jakartify(\"javax.faces.ViewState=stateless&hello=bye\"), extractJSFNewViewState(jakartify(\"<input name=\\\"javax.faces.ViewState\\\" value=\\\"123:456\\\"/>\"), jakartify(\"javax.faces.ViewState=stateless&hello=bye\")));\r\n    assertEquals(jakartify(\"aaa=bbb&javax.faces.ViewState=xxx:yyy&hello=bye\"), extractJSFNewViewState(jakartify(\"<input name=\\\"javax.faces.ViewState\\\" value=\\\"123:456\\\"/>\"), jakartify(\"aaa=bbb&javax.faces.ViewState=xxx:yyy&hello=bye\")));\r\n    assertEquals(jakartify(\"javax.faces.ViewState=123:456&hello=bye\"), extractJSFNewViewState(jakartify(\"<input name=\\\"javax.faces.ViewState\\\" value=\\\"123:456\\\"/>\"), jakartify(\"javax.faces.ViewState=987:654&hello=bye\")));\r\n    assertEquals(jakartify(\"javax.faces.ViewState=-123:-456&hello=bye\"), extractJSFNewViewState(jakartify(\"<input name=\\\"javax.faces.ViewState\\\" value=\\\"-123:-456\\\"/>\"), jakartify(\"javax.faces.ViewState=987:654&hello=bye\")));\r\n    assertEquals(jakartify(\"javax.faces.ViewState=-123:-456&hello=bye\"), extractJSFNewViewState(jakartify(\"<input name=\\\"javax.faces.ViewState\\\" value=\\\"-123:-456\\\"/>\"), jakartify(\"javax.faces.ViewState=-987:-654&hello=bye\")));\r\n    assertEquals(jakartify(\"aaa=bbb&javax.faces.ViewState=-123:-456&hello=bye\"), extractJSFNewViewState(jakartify(\"<input name=\\\"javax.faces.ViewState\\\" value=\\\"-123:-456\\\"/>\"), jakartify(\"aaa=bbb&javax.faces.ViewState=-987:-654&hello=bye\")));\r\n    assertEquals(jakartify(\"aaa=bbb&javax.faces.ViewState=-123:-456\"), extractJSFNewViewState(jakartify(\"<input name=\\\"javax.faces.ViewState\\\" value=\\\"-123:-456\\\"/>\"), jakartify(\"aaa=bbb&javax.faces.ViewState=-987:-654\")));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\shiro\\support\\jakarta-ee\\src\\test\\java\\org\\apache\\shiro\\ee\\filters\\FormSupportTest.java",
  "methodName" : "noAjaxRequests",
  "sourceCode" : "@Test\r\nvoid noAjaxRequests() {\r\n    assertEquals(new PartialAjaxResult(jakartify(\"aaa=bbb&javax.faces.ViewState=-123:-456&hello=bye\"), true, false), noJSFAjaxRequests(jakartify(\"aaa=bbb&javax.faces.ViewState=-123:-456\") + jakartify(\"&javax.faces.partial.ajax=true&hello=bye\"), false));\r\n    assertEquals(new PartialAjaxResult(\"j_idt12=j_idt12&j_idt12:j_idt14=asdf&j_idt12:j_idt16=asdf\" + jakartify(\"&javax.faces.ViewState=7709788254588873136:-8052771455757429917\") + jakartify(\"&javax.faces.source=j_idt12:j_idt18\") + jakartify(\"&javax.faces.behavior.event=action\"), true, false), noJSFAjaxRequests(\"j_idt12=j_idt12&j_idt12:j_idt14=asdf&j_idt12:j_idt16=asdf\" + jakartify(\"&javax.faces.ViewState=7709788254588873136:-8052771455757429917\") + jakartify(\"&javax.faces.source=j_idt12:j_idt18\") + jakartify(\"&javax.faces.partial.event=click\") + jakartify(\"&javax.faces.partial.execute=j_idt12:j_idt18 j_idt12\") + jakartify(\"&javax.faces.partial.render=j_idt12\") + jakartify(\"&javax.faces.behavior.event=action\") + jakartify(\"&javax.faces.partial.ajax=false\"), false));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\shiro\\support\\jakarta-ee\\src\\test\\java\\org\\apache\\shiro\\ee\\filters\\FormSupportTest.java",
  "methodName" : "parseCookies",
  "sourceCode" : "@Test\r\nvoid parseCookies() {\r\n    var map = Map.of(\"name1\", \"value1\", \"name2\", \"value2\", \"name3\", \"value3\");\r\n    assertEquals(map, transformCookieHeader(List.of(\"name1=value1\", \"name2=value2; path=/my/path\", \"name3=value3\")));\r\n    assertEquals(Map.of(\"name\", \"\"), transformCookieHeader(List.of(\"name=\")));\r\n    assertEquals(Map.of(\"JSESSIONID\", \"abc\"), transformCookieHeader(List.of(\"JSESSIONID=\\\"abc\\\"; $Version=\\\"1\\\"; $Path=\\\"/mypath\\\"\")));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\shiro\\support\\spring\\src\\test\\java\\org\\apache\\shiro\\spring\\remoting\\SecureRemoteInvocationFactoryTest.java",
  "methodName" : "testSessionManagerProxyStartRemoteInvocation",
  "sourceCode" : "@Test\r\nvoid testSessionManagerProxyStartRemoteInvocation() throws Exception {\r\n    SecureRemoteInvocationFactory factory = new SecureRemoteInvocationFactory();\r\n    MethodInvocation mi = createMock(MethodInvocation.class);\r\n    Method startMethod = getMethod(\"start\", SessionManager.class);\r\n    expect(mi.getMethod()).andReturn(startMethod).anyTimes();\r\n    Object[] args = { \"localhost\" };\r\n    expect(mi.getArguments()).andReturn(args).anyTimes();\r\n    replay(mi);\r\n    RemoteInvocation ri = factory.createRemoteInvocation(mi);\r\n    verify(mi);\r\n    assertNull(ri.getAttribute(SecureRemoteInvocationFactory.SESSION_ID_KEY));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\shiro\\support\\spring\\src\\test\\java\\org\\apache\\shiro\\spring\\remoting\\SecureRemoteInvocationFactoryTest.java",
  "methodName" : "testSessionManagerProxyNonStartRemoteInvocation",
  "sourceCode" : "@Test\r\nvoid testSessionManagerProxyNonStartRemoteInvocation() throws Exception {\r\n    SecureRemoteInvocationFactory factory = new SecureRemoteInvocationFactory();\r\n    MethodInvocation mi = createMock(MethodInvocation.class);\r\n    Method method = getMethod(\"getSession\", SessionManager.class);\r\n    expect(mi.getMethod()).andReturn(method).anyTimes();\r\n    String dummySessionId = UUID.randomUUID().toString();\r\n    SessionKey sessionKey = new DefaultSessionKey(dummySessionId);\r\n    Object[] args = { sessionKey };\r\n    expect(mi.getArguments()).andReturn(args).anyTimes();\r\n    replay(mi);\r\n    RemoteInvocation ri = factory.createRemoteInvocation(mi);\r\n    verify(mi);\r\n    assertEquals(dummySessionId, ri.getAttribute(SecureRemoteInvocationFactory.SESSION_ID_KEY));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\shiro\\support\\spring\\src\\test\\java\\org\\apache\\shiro\\spring\\security\\interceptor\\AbstractAuthorizationAnnotationTest.java",
  "methodName" : "testGuestImplementation",
  "sourceCode" : "// GUEST OPERATIONS:\r\n@Test\r\nvoid testGuestImplementation() {\r\n    bindGuest();\r\n    testService.guestImplementation();\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\shiro\\support\\spring\\src\\test\\java\\org\\apache\\shiro\\spring\\security\\interceptor\\AbstractAuthorizationAnnotationTest.java",
  "methodName" : "testGuestImplementationFailure",
  "sourceCode" : "@Test\r\nvoid testGuestImplementationFailure() {\r\n    assertThrows(UnauthenticatedException.class, () -> {\r\n        bindUser();\r\n        testService.guestImplementation();\r\n    });\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\shiro\\support\\spring\\src\\test\\java\\org\\apache\\shiro\\spring\\security\\interceptor\\AbstractAuthorizationAnnotationTest.java",
  "methodName" : "testGuestInterface",
  "sourceCode" : "@Test\r\nvoid testGuestInterface() {\r\n    bindGuest();\r\n    testService.guestInterface();\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\shiro\\support\\spring\\src\\test\\java\\org\\apache\\shiro\\spring\\security\\interceptor\\AbstractAuthorizationAnnotationTest.java",
  "methodName" : "testUserImplementation",
  "sourceCode" : "//testGuestInterfaceFailure() cannot be in this class - the SchemaAuthorizationAnnotationTest\r\n//subclass does not support annotations on interfaces (Spring AspectJ pointcut expressions\r\n//do not support annotations on interface methods).  It is instead in the\r\n//DapcAuthorizationAnnotationTest subclass\r\n// USER OPERATIONS\r\n@Test\r\nvoid testUserImplementation() {\r\n    bindUser();\r\n    testService.userImplementation();\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\shiro\\support\\spring\\src\\test\\java\\org\\apache\\shiro\\spring\\security\\interceptor\\AbstractAuthorizationAnnotationTest.java",
  "methodName" : "testUserImplementationFailure",
  "sourceCode" : "@Test\r\nvoid testUserImplementationFailure() {\r\n    assertThrows(UnauthenticatedException.class, () -> {\r\n        bindGuest();\r\n        testService.userImplementation();\r\n    });\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\shiro\\support\\spring\\src\\test\\java\\org\\apache\\shiro\\spring\\security\\interceptor\\AbstractAuthorizationAnnotationTest.java",
  "methodName" : "testUserInterface",
  "sourceCode" : "@Test\r\nvoid testUserInterface() {\r\n    bindUser();\r\n    testService.userInterface();\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\shiro\\support\\spring\\src\\test\\java\\org\\apache\\shiro\\spring\\security\\interceptor\\AbstractAuthorizationAnnotationTest.java",
  "methodName" : "testAuthenticatedImplementation",
  "sourceCode" : "//testUserInterfaceFailure() cannot be in this class - the SchemaAuthorizationAnnotationTest\r\n//subclass does not support annotations on interfaces (Spring AspectJ pointcut expressions\r\n//do not support annotations on interface methods).  It is instead in the\r\n//DapcAuthorizationAnnotationTest subclass\r\n// AUTHENTICATED USER OPERATIONS\r\n@Test\r\nvoid testAuthenticatedImplementation() {\r\n    bindAuthenticatedUser();\r\n    testService.authenticatedImplementation();\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\shiro\\support\\spring\\src\\test\\java\\org\\apache\\shiro\\spring\\security\\interceptor\\AbstractAuthorizationAnnotationTest.java",
  "methodName" : "testAuthenticatedImplementationFailure",
  "sourceCode" : "@Test\r\nvoid testAuthenticatedImplementationFailure() {\r\n    assertThrows(UnauthenticatedException.class, () -> {\r\n        bindUser();\r\n        testService.authenticatedImplementation();\r\n    });\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\shiro\\support\\spring\\src\\test\\java\\org\\apache\\shiro\\spring\\security\\interceptor\\AbstractAuthorizationAnnotationTest.java",
  "methodName" : "testAuthenticatedInterface",
  "sourceCode" : "@Test\r\nvoid testAuthenticatedInterface() {\r\n    bindAuthenticatedUser();\r\n    testService.authenticatedInterface();\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\shiro\\support\\spring\\src\\test\\java\\org\\apache\\shiro\\spring\\security\\interceptor\\AuthorizationAttributeSourceAdvisorTest.java",
  "methodName" : "matches",
  "sourceCode" : "@Test\r\nvoid matches() throws NoSuchMethodException {\r\n    assertTrue(new AuthorizationAttributeSourceAdvisor().matches(Secured.class.getDeclaredMethod(\"secureMethod\"), Secured.class), \"the method is annotated, should match\");\r\n    assertFalse(new AuthorizationAttributeSourceAdvisor().matches(Secured.class.getDeclaredMethod(\"unsecuredMethod\"), Secured.class), \"the method is not annotated, should not match\");\r\n    assertTrue(new AuthorizationAttributeSourceAdvisor().matches(ServiceInterface.class.getDeclaredMethod(\"secureMethod\"), ServiceImpl.class), \"the method declaration is annotated in the interface, should match\");\r\n    assertFalse(new AuthorizationAttributeSourceAdvisor().matches(ServiceInterface.class.getDeclaredMethod(\"unsecuredMethod\"), ServiceImpl.class), \"not annotated method, should not match\");\r\n    assertTrue(new AuthorizationAttributeSourceAdvisor().matches(SafeServiceInterface.class.getDeclaredMethod(\"someMethod\"), SafeServiceInterface.class), \"the method declaration is in the interface with type-annotation, should match\");\r\n    assertTrue(new AuthorizationAttributeSourceAdvisor().matches(SafeServiceImpl.class.getDeclaredMethod(\"someMethod\"), SafeServiceImpl.class), \"the method declaration is in the interface with type-annotation, should match\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\shiro\\support\\spring\\src\\test\\java\\org\\apache\\shiro\\spring\\security\\interceptor\\DapcAuthorizationAnnotationTest.java",
  "methodName" : "testGuestInterfaceFailure",
  "sourceCode" : "@Test\r\nvoid testGuestInterfaceFailure() {\r\n    assertThrows(UnauthenticatedException.class, () -> {\r\n        bindUser();\r\n        testService.guestInterface();\r\n    });\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\shiro\\support\\spring\\src\\test\\java\\org\\apache\\shiro\\spring\\security\\interceptor\\DapcAuthorizationAnnotationTest.java",
  "methodName" : "testUserInterfaceFailure",
  "sourceCode" : "@Test\r\nvoid testUserInterfaceFailure() {\r\n    assertThrows(UnauthenticatedException.class, () -> {\r\n        bindGuest();\r\n        testService.userInterface();\r\n    });\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\shiro\\support\\spring\\src\\test\\java\\org\\apache\\shiro\\spring\\security\\interceptor\\DapcAuthorizationAnnotationTest.java",
  "methodName" : "testAuthenticatedInterfaceFailure",
  "sourceCode" : "@Test\r\nvoid testAuthenticatedInterfaceFailure() {\r\n    assertThrows(UnauthenticatedException.class, () -> {\r\n        bindGuest();\r\n        testService.authenticatedInterface();\r\n    });\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\shiro\\support\\spring\\src\\test\\java\\org\\apache\\shiro\\spring\\web\\config\\ShiroWebConfigurationTestSameSiteStrict.java",
  "methodName" : "testStrictSameSite",
  "sourceCode" : "@Test\r\nvoid testStrictSameSite() {\r\n    // given\r\n    // org/apache/shiro/spring/web/config/ShiroWebConfigurationTestSameSiteStrict.properties\r\n    // then\r\n    assertEquals(Cookie.SameSiteOptions.STRICT, shiroWebConfiguration.sessionIdCookieSameSite);\r\n    assertEquals(Cookie.SameSiteOptions.STRICT, shiroWebConfiguration.rememberMeSameSite);\r\n    assertEquals(Cookie.SameSiteOptions.STRICT, shiroWebConfiguration.sessionCookieTemplate().getSameSite());\r\n    assertEquals(Cookie.SameSiteOptions.STRICT, shiroWebConfiguration.rememberMeCookieTemplate().getSameSite());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\shiro\\support\\spring\\src\\test\\java\\org\\apache\\shiro\\spring\\web\\ShiroFilterFactoryBeanTest.java",
  "methodName" : "testFilterDefinition",
  "sourceCode" : "@Test\r\nvoid testFilterDefinition() {\r\n    ClassPathXmlApplicationContext context = new ClassPathXmlApplicationContext(\"org/apache/shiro/spring/web/ShiroFilterFactoryBeanTest.xml\");\r\n    AbstractShiroFilter shiroFilter = (AbstractShiroFilter) context.getBean(\"shiroFilter\");\r\n    PathMatchingFilterChainResolver resolver = (PathMatchingFilterChainResolver) shiroFilter.getFilterChainResolver();\r\n    DefaultFilterChainManager fcManager = (DefaultFilterChainManager) resolver.getFilterChainManager();\r\n    NamedFilterList chain = fcManager.getChain(\"/test\");\r\n    assertNotNull(chain);\r\n    assertEquals(3, chain.size());\r\n    Filter[] filters = new Filter[chain.size()];\r\n    filters = chain.toArray(filters);\r\n    // global filter\r\n    assertTrue(filters[0] instanceof InvalidRequestFilter);\r\n    assertTrue(filters[1] instanceof DummyFilter);\r\n    assertTrue(filters[2] instanceof FormAuthenticationFilter);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\shiro\\support\\spring\\src\\test\\java\\org\\apache\\shiro\\spring\\web\\ShiroFilterFactoryBeanTest.java",
  "methodName" : "testFilterDefinitionWithInit",
  "sourceCode" : "/**\r\n * Verifies fix for <a href=\"https://issues.apache.org/jira/browse/SHIRO-167\">SHIRO-167</a>\r\n *\r\n * @throws Exception if there is any unexpected error\r\n */\r\n@Test\r\nvoid testFilterDefinitionWithInit() throws Exception {\r\n    ClassPathXmlApplicationContext context = new ClassPathXmlApplicationContext(\"org/apache/shiro/spring/web/ShiroFilterFactoryBeanTest.xml\");\r\n    AbstractShiroFilter shiroFilter = (AbstractShiroFilter) context.getBean(\"shiroFilter\");\r\n    FilterConfig mockFilterConfig = createNiceMock(FilterConfig.class);\r\n    ServletContext mockServletContext = createNiceMock(ServletContext.class);\r\n    expect(mockFilterConfig.getServletContext()).andReturn(mockServletContext).anyTimes();\r\n    HttpServletRequest mockRequest = createNiceMock(HttpServletRequest.class);\r\n    expect(mockRequest.getContextPath()).andReturn(\"/\").anyTimes();\r\n    expect(mockRequest.getRequestURI()).andReturn(\"/\").anyTimes();\r\n    HttpServletResponse mockResponse = createNiceMock(HttpServletResponse.class);\r\n    replay(mockFilterConfig);\r\n    replay(mockServletContext);\r\n    shiroFilter.init(mockFilterConfig);\r\n    verify(mockServletContext);\r\n    verify(mockFilterConfig);\r\n    FilterChain filterChain = new FilterChain() {\r\n\r\n        public void doFilter(ServletRequest servletRequest, ServletResponse servletResponse) throws IOException, ServletException {\r\n            HttpServletRequest request = (HttpServletRequest) servletRequest;\r\n            assertNotNull(request.getSession());\r\n            //this line asserts the fix for the user-reported issue:\r\n            assertNotNull(request.getSession().getServletContext());\r\n        }\r\n    };\r\n    replay(mockRequest);\r\n    replay(mockResponse);\r\n    shiroFilter.doFilter(mockRequest, mockResponse, filterChain);\r\n    verify(mockResponse);\r\n    verify(mockRequest);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\shiro\\tools\\hasher\\src\\test\\java\\org\\apache\\shiro\\tools\\hasher\\HasherTest.java",
  "methodName" : "testArgon2Hash",
  "sourceCode" : "@Test\r\npublic void testArgon2Hash() {\r\n    // given\r\n    String[] args = { \"--debug\", \"--password\", \"--pnoconfirm\" };\r\n    provideInput(\"secret#shiro,password;Jo8opech\");\r\n    // when\r\n    Hasher.main(args);\r\n    // when\r\n    assertEquals(1, listAppender.getEvents().size());\r\n    LogEvent iLoggingEvent = listAppender.getEvents().get(0);\r\n    assertTrue(iLoggingEvent.getMessage().getFormattedMessage().contains(\"$shiro2$argon2id$v=19\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\shiro\\tools\\hasher\\src\\test\\java\\org\\apache\\shiro\\tools\\hasher\\HasherTest.java",
  "methodName" : "testBCryptHash",
  "sourceCode" : "@Test\r\npublic void testBCryptHash() {\r\n    // given\r\n    String[] args = { \"--debug\", \"--password\", \"--pnoconfirm\", \"--algorithm\", \"2y\" };\r\n    provideInput(\"secret#shiro,password;Jo8opech\");\r\n    // when\r\n    Hasher.main(args);\r\n    // when\r\n    assertEquals(1, listAppender.getEvents().size());\r\n    LogEvent iLoggingEvent = listAppender.getEvents().get(0);\r\n    assertTrue(iLoggingEvent.getMessage().getFormattedMessage().contains(\"$shiro2$2y$10$\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\shiro\\web\\src\\test\\java\\org\\apache\\shiro\\web\\config\\WebIniSecurityManagerFactoryTest.java",
  "methodName" : "testDefaultFiltersPresent",
  "sourceCode" : "/**\r\n * Test that ensures the WebIniSecurityManagerFactory will automatically add the default\r\n * filters to the pool of beans before the INI configuration is interpreted.\r\n */\r\n@Test\r\nvoid testDefaultFiltersPresent() {\r\n    Ini ini = new Ini();\r\n    //just a normal configuration line in the MAIN section for any of the default filters should work\r\n    //out of the box.  So, create the main section and just config one of them:\r\n    @SuppressWarnings(\"deprecation\")\r\n    Ini.Section section = ini.addSection(IniSecurityManagerFactory.MAIN_SECTION_NAME);\r\n    section.put(\"authc.loginUrl\", \"/login.jsp\");\r\n    @SuppressWarnings(\"deprecation\")\r\n    WebIniSecurityManagerFactory factory = new WebIniSecurityManagerFactory(ini);\r\n    org.apache.shiro.mgt.SecurityManager sm = factory.getInstance();\r\n    assertNotNull(sm);\r\n    assertTrue(sm instanceof DefaultWebSecurityManager);\r\n    //now assert that all of the default filters exist:\r\n    Map<String, ?> beans = factory.getBeans();\r\n    for (DefaultFilter defaultFilter : DefaultFilter.values()) {\r\n        Filter filter = (Filter) beans.get(defaultFilter.name());\r\n        assertNotNull(filter);\r\n        assertTrue(defaultFilter.getFilterClass().isAssignableFrom(filter.getClass()));\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\shiro\\web\\src\\test\\java\\org\\apache\\shiro\\web\\env\\EnvironmentLoaderServiceTest.java",
  "methodName" : "singleServiceTest",
  "sourceCode" : "@Test\r\nvoid singleServiceTest() throws Exception {\r\n    ServletContext servletContext = EasyMock.mock(ServletContext.class);\r\n    expect(servletContext.getInitParameter(\"shiroEnvironmentClass\")).andReturn(null);\r\n    expect(servletContext.getInitParameter(\"shiroConfigLocations\")).andReturn(null);\r\n    expect(servletContext.getResourceAsStream(\"/WEB-INF/shiro.ini\")).andReturn(getClass().getResourceAsStream(\"/EmptyShiroIni.ini\"));\r\n    EasyMock.replay(servletContext);\r\n    WebEnvironment resultEnvironment = new EnvironmentLoader().createEnvironment(servletContext);\r\n    EasyMock.verify(servletContext);\r\n    assertThat(resultEnvironment, instanceOf(IniWebEnvironment.class));\r\n    IniWebEnvironment environmentStub = (IniWebEnvironment) resultEnvironment;\r\n    assertThat(environmentStub.getServletContext(), sameInstance(servletContext));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\shiro\\web\\src\\test\\java\\org\\apache\\shiro\\web\\env\\EnvironmentLoaderServiceTest.java",
  "methodName" : "testDefaultWebEnvironment",
  "sourceCode" : "@Test\r\nvoid testDefaultWebEnvironment() {\r\n    ServletContext servletContext = EasyMock.mock(ServletContext.class);\r\n    expect(servletContext.getInitParameter(\"shiroEnvironmentClass\")).andReturn(DefaultWebEnvironment.class.getName());\r\n    expect(servletContext.getInitParameter(\"shiroConfigLocations\")).andReturn(null);\r\n    EasyMock.replay(servletContext);\r\n    WebEnvironment environment = new EnvironmentLoader().createEnvironment(servletContext);\r\n    EasyMock.verify(servletContext);\r\n    assertThat(environment, instanceOf(DefaultWebEnvironment.class));\r\n    assertThat(environment.getShiroFilterConfiguration(), is(notNullValue()));\r\n    assertThat(environment.getServletContext(), sameInstance(servletContext));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\shiro\\web\\src\\test\\java\\org\\apache\\shiro\\web\\env\\EnvironmentLoaderServiceTest.java",
  "methodName" : "multipleServiceTest",
  "sourceCode" : "@Test\r\nvoid multipleServiceTest() throws Exception {\r\n    List<WebEnvironment> environmentList = Arrays.asList(new WebEnvironmentStub(), new WebEnvironmentStub());\r\n    ServletContext servletContext = mock(ServletContext.class);\r\n    when(servletContext.getInitParameter(EnvironmentLoader.ENVIRONMENT_CLASS_PARAM)).then(args -> null);\r\n    final EnvironmentLoader environmentLoader = spy(EnvironmentLoader.class);\r\n    when(environmentLoader.doLoadWebEnvironmentsFromServiceLoader()).then(args -> environmentList.iterator());\r\n    try {\r\n        environmentLoader.createEnvironment(servletContext);\r\n        fail(\"Expected ConfigurationException to be thrown\");\r\n    } catch (ConfigurationException e) {\r\n        assertThat(e.getMessage(), stringContainsInOrder(\"zero or exactly one\", \"shiroEnvironmentClass\"));\r\n    }\r\n    verify(servletContext).getInitParameter(EnvironmentLoader.ENVIRONMENT_CLASS_PARAM);\r\n    verify(environmentLoader).doLoadWebEnvironmentsFromServiceLoader();\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\shiro\\web\\src\\test\\java\\org\\apache\\shiro\\web\\env\\EnvironmentLoaderServiceTest.java",
  "methodName" : "loadFromInitParamTest",
  "sourceCode" : "@Test\r\nvoid loadFromInitParamTest() throws Exception {\r\n    ServletContext servletContext = EasyMock.mock(ServletContext.class);\r\n    expect(servletContext.getInitParameter(EnvironmentLoader.ENVIRONMENT_CLASS_PARAM)).andReturn(WebEnvironmentStub.class.getName());\r\n    expect(servletContext.getInitParameter(\"shiroConfigLocations\")).andReturn(null);\r\n    EasyMock.replay(servletContext);\r\n    WebEnvironment resultEnvironment = new EnvironmentLoader().createEnvironment(servletContext);\r\n    EasyMock.verify(servletContext);\r\n    assertThat(resultEnvironment, instanceOf(WebEnvironmentStub.class));\r\n    WebEnvironmentStub environmentStub = (WebEnvironmentStub) resultEnvironment;\r\n    assertThat(environmentStub.getServletContext(), sameInstance(servletContext));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\shiro\\web\\src\\test\\java\\org\\apache\\shiro\\web\\filter\\authc\\AnonymousFilterTest.java",
  "methodName" : "test",
  "sourceCode" : "@Test\r\nvoid test() {\r\n    AnonymousFilter filter = new AnonymousFilter();\r\n    boolean allow = filter.onPreHandle(null, null, null);\r\n    assertTrue(allow);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\shiro\\web\\src\\test\\java\\org\\apache\\shiro\\web\\filter\\authc\\BasicHttpFilterAuthenticationTest.java",
  "methodName" : "createTokenNoAuthorizationHeader",
  "sourceCode" : "@Test\r\npublic void createTokenNoAuthorizationHeader() {\r\n    testFilter = new BasicHttpAuthenticationFilter();\r\n    HttpServletRequest request = mock(HttpServletRequest.class);\r\n    when(request.getHeader(\"Authorization\")).then(args -> null);\r\n    when(request.getRemoteHost()).then(args -> \"localhost\");\r\n    HttpServletResponse response = mock(HttpServletResponse.class);\r\n    runWithSubject(subject -> {\r\n        AuthenticationToken token = testFilter.createToken(request, response);\r\n        assertNotNull(token);\r\n        assertTrue(token instanceof UsernamePasswordToken, \"Token is not a username and password token.\");\r\n        assertEquals(\"\", token.getPrincipal());\r\n        verify(request).getHeader(\"Authorization\");\r\n        verify(request).getRemoteHost();\r\n    });\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\shiro\\web\\src\\test\\java\\org\\apache\\shiro\\web\\filter\\authc\\BasicHttpFilterAuthenticationTest.java",
  "methodName" : "createTokenNoUsername",
  "sourceCode" : "@Test\r\npublic void createTokenNoUsername() {\r\n    testFilter = new BasicHttpAuthenticationFilter();\r\n    HttpServletRequest request = mock(HttpServletRequest.class);\r\n    when(request.getHeader(\"Authorization\")).then(args -> createAuthorizationHeader(\"\", \"\"));\r\n    when(request.getRemoteHost()).then(args -> \"localhost\");\r\n    HttpServletResponse response = mock(HttpServletResponse.class);\r\n    runWithSubject(subject -> {\r\n        AuthenticationToken token = testFilter.createToken(request, response);\r\n        assertNotNull(token);\r\n        assertTrue(token instanceof UsernamePasswordToken, \"Token is not a username and password token.\");\r\n        assertEquals(\"\", token.getPrincipal());\r\n        verify(request).getHeader(\"Authorization\");\r\n        verify(request).getRemoteHost();\r\n    });\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\shiro\\web\\src\\test\\java\\org\\apache\\shiro\\web\\filter\\authc\\BasicHttpFilterAuthenticationTest.java",
  "methodName" : "createTokenNoPassword",
  "sourceCode" : "@Test\r\npublic void createTokenNoPassword() {\r\n    testFilter = new BasicHttpAuthenticationFilter();\r\n    HttpServletRequest request = mock(HttpServletRequest.class);\r\n    when(request.getHeader(\"Authorization\")).then(args -> createAuthorizationHeader(\"pedro\", \"\"));\r\n    when(request.getRemoteHost()).then(args -> \"localhost\");\r\n    HttpServletResponse response = mock(HttpServletResponse.class);\r\n    runWithSubject(subject -> {\r\n        AuthenticationToken token = testFilter.createToken(request, response);\r\n        assertNotNull(token);\r\n        assertTrue(token instanceof UsernamePasswordToken, \"Token is not a username and password token.\");\r\n        UsernamePasswordToken upToken = (UsernamePasswordToken) token;\r\n        assertEquals(\"pedro\", upToken.getUsername());\r\n        assertEquals(0, upToken.getPassword().length, \"Password is not empty.\");\r\n        verify(request).getHeader(\"Authorization\");\r\n        verify(request).getRemoteHost();\r\n    });\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\shiro\\web\\src\\test\\java\\org\\apache\\shiro\\web\\filter\\authc\\BasicHttpFilterAuthenticationTest.java",
  "methodName" : "createTokenColonInPassword",
  "sourceCode" : "@Test\r\npublic void createTokenColonInPassword() {\r\n    testFilter = new BasicHttpAuthenticationFilter();\r\n    HttpServletRequest request = mock(HttpServletRequest.class);\r\n    when(request.getHeader(\"Authorization\")).then(args -> createAuthorizationHeader(\"pedro\", \"pass:word\"));\r\n    when(request.getRemoteHost()).then(args -> \"localhost\");\r\n    HttpServletResponse response = mock(HttpServletResponse.class);\r\n    runWithSubject(subject -> {\r\n        AuthenticationToken token = testFilter.createToken(request, response);\r\n        assertNotNull(token);\r\n        assertTrue(token instanceof UsernamePasswordToken, \"Token is not a username and password token.\");\r\n        UsernamePasswordToken upToken = (UsernamePasswordToken) token;\r\n        assertEquals(\"pedro\", upToken.getUsername());\r\n        assertEquals(\"pass:word\", new String(upToken.getPassword()));\r\n        verify(request).getHeader(\"Authorization\");\r\n        verify(request).getRemoteHost();\r\n    });\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\shiro\\web\\src\\test\\java\\org\\apache\\shiro\\web\\filter\\authc\\BasicHttpFilterAuthenticationTest.java",
  "methodName" : "httpMethodDoesNotRequireAuthentication",
  "sourceCode" : "@Test\r\npublic void httpMethodDoesNotRequireAuthentication() {\r\n    testFilter = new BasicHttpAuthenticationFilter();\r\n    HttpServletRequest request = mock(HttpServletRequest.class);\r\n    when(request.getMethod()).then(args -> \"GET\");\r\n    HttpServletResponse response = mock(HttpServletResponse.class);\r\n    runWithSubject(subject -> {\r\n        boolean accessAllowed = testFilter.isAccessAllowed(request, response, new String[] { \"POST\", \"PUT\", \"DELETE\" });\r\n        assertTrue(accessAllowed, \"Access not allowed for GET\");\r\n    });\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\shiro\\web\\src\\test\\java\\org\\apache\\shiro\\web\\filter\\authc\\BasicHttpFilterAuthenticationTest.java",
  "methodName" : "httpMethodRequiresAuthentication",
  "sourceCode" : "@Test\r\npublic void httpMethodRequiresAuthentication() {\r\n    testFilter = new BasicHttpAuthenticationFilter();\r\n    HttpServletRequest request = mock(HttpServletRequest.class);\r\n    when(request.getHeader(\"Authorization\")).then(args -> createAuthorizationHeader(\"pedro\", \"\"));\r\n    when(request.getRemoteHost()).then(args -> \"localhost\");\r\n    when(request.getMethod()).then(args -> \"POST\");\r\n    HttpServletResponse response = mock(HttpServletResponse.class);\r\n    runWithSubject(subject -> {\r\n        boolean accessAllowed = testFilter.isAccessAllowed(request, response, new String[] { \"POST\", \"PUT\", \"DELETE\" });\r\n        assertFalse(accessAllowed, \"Access allowed for POST\");\r\n    });\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\shiro\\web\\src\\test\\java\\org\\apache\\shiro\\web\\filter\\authc\\BasicHttpFilterAuthenticationTest.java",
  "methodName" : "httpMethodsAreCaseInsensitive",
  "sourceCode" : "@Test\r\npublic void httpMethodsAreCaseInsensitive() {\r\n    testFilter = new BasicHttpAuthenticationFilter();\r\n    HttpServletRequest request = mock(HttpServletRequest.class);\r\n    when(request.getMethod()).then(args -> \"GET\");\r\n    when(request.getHeader(\"Authorization\")).then(args -> createAuthorizationHeader(\"pedro\", \"\"));\r\n    when(request.getRemoteHost()).then(args -> \"localhost\");\r\n    HttpServletResponse response = mock(HttpServletResponse.class);\r\n    runWithSubject(subject -> {\r\n        boolean accessAllowed = testFilter.isAccessAllowed(request, response, new String[] { \"POST\", \"put\", \"delete\" });\r\n        assertTrue(accessAllowed, \"Access not allowed for GET\");\r\n        when(request.getMethod()).then(args -> \"post\");\r\n        accessAllowed = testFilter.isAccessAllowed(request, response, new String[] { \"post\", \"put\", \"delete\" });\r\n        assertFalse(accessAllowed, \"Access allowed for POST\");\r\n    });\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\shiro\\web\\src\\test\\java\\org\\apache\\shiro\\web\\filter\\authc\\BasicHttpFilterAuthenticationTest.java",
  "methodName" : "allHttpMethodsRequireAuthenticationIfNoneConfigured",
  "sourceCode" : "@Test\r\npublic void allHttpMethodsRequireAuthenticationIfNoneConfigured() {\r\n    testFilter = new BasicHttpAuthenticationFilter();\r\n    HttpServletRequest request = mock(HttpServletRequest.class);\r\n    when(request.getHeader(\"Authorization\")).then(args -> createAuthorizationHeader(\"pedro\", \"\"));\r\n    when(request.getRemoteHost()).then(args -> \"localhost\");\r\n    when(request.getMethod()).then(args -> \"GET\");\r\n    when(request.getMethod()).then(args -> \"POST\");\r\n    runWithSubject(subject -> {\r\n        HttpServletResponse response = mock(HttpServletResponse.class);\r\n        boolean accessAllowed = testFilter.isAccessAllowed(request, response, new String[0]);\r\n        assertFalse(accessAllowed, \"Access allowed for GET\");\r\n        accessAllowed = testFilter.isAccessAllowed(request, response, new String[0]);\r\n        assertFalse(accessAllowed, \"Access allowed for POST\");\r\n    });\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\shiro\\web\\src\\test\\java\\org\\apache\\shiro\\web\\filter\\authc\\BasicHttpFilterAuthenticationTest.java",
  "methodName" : "allHttpMethodsRequireAuthenticationIfNullConfig",
  "sourceCode" : "@Test\r\npublic void allHttpMethodsRequireAuthenticationIfNullConfig() {\r\n    testFilter = new BasicHttpAuthenticationFilter();\r\n    HttpServletRequest request = mock(HttpServletRequest.class);\r\n    when(request.getHeader(\"Authorization\")).then(args -> createAuthorizationHeader(\"pedro\", \"\"));\r\n    when(request.getRemoteHost()).then(args -> \"localhost\");\r\n    when(request.getMethod()).then(args -> \"GET\");\r\n    when(request.getMethod()).then(args -> \"POST\");\r\n    runWithSubject(subject -> {\r\n        HttpServletResponse response = mock(HttpServletResponse.class);\r\n        boolean accessAllowed = testFilter.isAccessAllowed(request, response, null);\r\n        assertFalse(accessAllowed, \"Access allowed for GET\");\r\n        accessAllowed = testFilter.isAccessAllowed(request, response, null);\r\n        assertFalse(accessAllowed, \"Access allowed for POST\");\r\n    });\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\shiro\\web\\src\\test\\java\\org\\apache\\shiro\\web\\filter\\authc\\BasicHttpFilterAuthenticationTest.java",
  "methodName" : "permissiveEnabledWithLoginTest",
  "sourceCode" : "/**\r\n * @since 1.4\r\n */\r\n@Test\r\npublic void permissiveEnabledWithLoginTest() {\r\n    testFilter = new BasicHttpAuthenticationFilter();\r\n    HttpServletRequest request = mock(HttpServletRequest.class);\r\n    when(request.getHeader(\"Authorization\")).then(args -> createAuthorizationHeader(\"pedro\", \"\"));\r\n    when(request.getRemoteHost()).then(args -> \"localhost\");\r\n    when(request.getMethod()).then(args -> \"GET\");\r\n    HttpServletResponse response = mock(HttpServletResponse.class);\r\n    runWithSubject(subject -> {\r\n        String[] mappedValue = { \"permissive\" };\r\n        boolean accessAllowed = testFilter.isAccessAllowed(request, response, mappedValue);\r\n        // login attempt should always be false\r\n        assertFalse(accessAllowed, \"Access allowed for GET\");\r\n    });\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\shiro\\web\\src\\test\\java\\org\\apache\\shiro\\web\\filter\\authc\\BasicHttpFilterAuthenticationTest.java",
  "methodName" : "permissiveEnabledTest",
  "sourceCode" : "/**\r\n * @since 1.4\r\n */\r\n@Test\r\npublic void permissiveEnabledTest() {\r\n    runWithSubject(subject -> {\r\n        testFilter = new BasicHttpAuthenticationFilter();\r\n        HttpServletRequest request = mock(HttpServletRequest.class);\r\n        when(request.getHeader(\"Authorization\")).then(args -> null);\r\n        when(request.getRemoteHost()).then(args -> \"localhost\");\r\n        when(request.getMethod()).then(args -> \"GET\");\r\n        HttpServletResponse response = mock(HttpServletResponse.class);\r\n        String[] mappedValue = { \"permissive\" };\r\n        boolean accessAllowed = testFilter.isAccessAllowed(request, response, mappedValue);\r\n        // non-login attempt, return true\r\n        assertTrue(accessAllowed, \"Access should be allowed for GET\");\r\n    });\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\shiro\\web\\src\\test\\java\\org\\apache\\shiro\\web\\filter\\authc\\BasicHttpFilterAuthenticationTest.java",
  "methodName" : "httpMethodRequiresAuthenticationWithPermissive",
  "sourceCode" : "/**\r\n * @since 1.4\r\n */\r\n@Test\r\npublic void httpMethodRequiresAuthenticationWithPermissive() throws Exception {\r\n    runWithSubject(subject -> {\r\n        testFilter = new BasicHttpAuthenticationFilter();\r\n        HttpServletRequest request = mock(HttpServletRequest.class);\r\n        when(request.getHeader(\"Authorization\")).then(args -> createAuthorizationHeader(\"pedro\", \"\"));\r\n        when(request.getRemoteHost()).then(args -> \"localhost\");\r\n        when(request.getMethod()).then(args -> \"POST\");\r\n        HttpServletResponse response = mock(HttpServletResponse.class);\r\n        boolean accessAllowed = testFilter.isAccessAllowed(request, response, new String[] { \"permissive\", \"POST\", \"PUT\", \"DELETE\" });\r\n        assertFalse(accessAllowed, \"Access allowed for POST\");\r\n    });\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\shiro\\web\\src\\test\\java\\org\\apache\\shiro\\web\\filter\\authz\\AuthorizationFilterTest.java",
  "methodName" : "testUserOnAccessDeniedWithResponseError",
  "sourceCode" : "@Test\r\npublic void testUserOnAccessDeniedWithResponseError() {\r\n    // Tests when a user (known identity) is denied access and no unauthorizedUrl has been configured.\r\n    // This should trigger an HTTP response error code 403\r\n    //log in the user using the account provided by the superclass for tests:\r\n    runWithSubject(subject -> {\r\n        subject.login(new UsernamePasswordToken(\"test\", \"test\"));\r\n        AuthorizationFilter filter = new AuthorizationFilter() {\r\n\r\n            @Override\r\n            protected boolean isAccessAllowed(ServletRequest request, ServletResponse response, Object mappedValue) {\r\n                //for this test case\r\n                return false;\r\n            }\r\n        };\r\n        HttpServletRequest request = mock(HttpServletRequest.class);\r\n        HttpServletResponse response = mock(HttpServletResponse.class);\r\n        filter.onAccessDenied(request, response);\r\n        verify(response).sendError(HttpServletResponse.SC_FORBIDDEN);\r\n    });\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\shiro\\web\\src\\test\\java\\org\\apache\\shiro\\web\\filter\\authz\\AuthorizationFilterTest.java",
  "methodName" : "testUserOnAccessDeniedWithRedirect",
  "sourceCode" : "@Test\r\npublic void testUserOnAccessDeniedWithRedirect() {\r\n    // Tests when a user (known identity) is denied access and an unauthorizedUrl *has* been configured.\r\n    // This should trigger an HTTP redirect\r\n    //log in the user using the account provided by the superclass for tests:\r\n    runWithSubject(subject -> {\r\n        subject.login(new UsernamePasswordToken(\"test\", \"test\"));\r\n        String unauthorizedUrl = \"unauthorized.jsp\";\r\n        AuthorizationFilter filter = new AuthorizationFilter() {\r\n\r\n            @Override\r\n            protected boolean isAccessAllowed(ServletRequest request, ServletResponse response, Object mappedValue) {\r\n                //for this test case\r\n                return false;\r\n            }\r\n        };\r\n        filter.setUnauthorizedUrl(unauthorizedUrl);\r\n        HttpServletRequest request = mock(HttpServletRequest.class);\r\n        HttpServletResponse response = mock(HttpServletResponse.class);\r\n        String encoded = \"/\" + unauthorizedUrl;\r\n        when(response.encodeRedirectURL(unauthorizedUrl)).thenReturn(encoded);\r\n        response.sendRedirect(encoded);\r\n        filter.onAccessDenied(request, response);\r\n        verify(response, atLeastOnce()).sendRedirect(encoded);\r\n        verify(response).encodeRedirectURL(unauthorizedUrl);\r\n    });\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\shiro\\web\\src\\test\\java\\org\\apache\\shiro\\web\\filter\\authz\\HostFilterTest.java",
  "methodName" : "testPrivateClassC",
  "sourceCode" : "@SuppressWarnings(\"checkstyle:MagicNumber\")\r\n@Test\r\nvoid testPrivateClassC() {\r\n    Pattern p = Pattern.compile(HostFilter.PRIVATE_CLASS_C_REGEX);\r\n    String base = \"192.168.\";\r\n    for (int i = 0; i < 256; i++) {\r\n        String ibase = base + i;\r\n        for (int j = 0; j < 256; j++) {\r\n            String ip = ibase + \".\" + j;\r\n            assertTrue(p.matcher(ip).matches());\r\n        }\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\shiro\\web\\src\\test\\java\\org\\apache\\shiro\\web\\filter\\authz\\HostFilterTest.java",
  "methodName" : "testPrivateClassB",
  "sourceCode" : "@SuppressWarnings(\"checkstyle:MagicNumber\")\r\n@Test\r\nvoid testPrivateClassB() {\r\n    Pattern p = Pattern.compile(HostFilter.PRIVATE_CLASS_B_REGEX);\r\n    String base = \"172.\";\r\n    for (int i = 16; i < 32; i++) {\r\n        String ibase = base + i;\r\n        for (int j = 0; j < 256; j++) {\r\n            String jBase = ibase + \".\" + j;\r\n            for (int k = 0; k < 256; k++) {\r\n                String ip = jBase + \".\" + k;\r\n                assertTrue(p.matcher(ip).matches());\r\n            }\r\n        }\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\shiro\\web\\src\\test\\java\\org\\apache\\shiro\\web\\filter\\authz\\HttpMethodPermissionFilterTest.java",
  "methodName" : "testPermissionMapping",
  "sourceCode" : "@Test\r\nvoid testPermissionMapping() {\r\n    // Testing the isAccessAllowed would be easier, but would need to mock out the servlet request\r\n    HttpMethodPermissionFilter filter = new HttpMethodPermissionFilter();\r\n    String[] permsBefore = { \"foo\", \"bar\" };\r\n    String[] permsAfter = filter.buildPermissions(permsBefore, filter.getHttpMethodAction(\"get\"));\r\n    assertEquals(2, permsAfter.length);\r\n    assertEquals(\"foo:read\", permsAfter[0]);\r\n    assertEquals(\"bar:read\", permsAfter[1]);\r\n    assertEquals(\"foo:read\", filter.buildPermissions(permsBefore, filter.getHttpMethodAction(\"head\"))[0]);\r\n    assertEquals(\"foo:update\", filter.buildPermissions(permsBefore, filter.getHttpMethodAction(\"put\"))[0]);\r\n    assertEquals(\"foo:create\", filter.buildPermissions(permsBefore, filter.getHttpMethodAction(\"post\"))[0]);\r\n    assertEquals(\"foo:create\", filter.buildPermissions(permsBefore, filter.getHttpMethodAction(\"mkcol\"))[0]);\r\n    assertEquals(\"foo:delete\", filter.buildPermissions(permsBefore, filter.getHttpMethodAction(\"delete\"))[0]);\r\n    assertEquals(\"foo:read\", filter.buildPermissions(permsBefore, filter.getHttpMethodAction(\"options\"))[0]);\r\n    assertEquals(\"foo:read\", filter.buildPermissions(permsBefore, filter.getHttpMethodAction(\"trace\"))[0]);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\shiro\\web\\src\\test\\java\\org\\apache\\shiro\\web\\filter\\authz\\IpAddressMatcherTests.java",
  "methodName" : "ipv6MatcherMatchesIpv6Address",
  "sourceCode" : "@Test\r\nvoid ipv6MatcherMatchesIpv6Address() {\r\n    assertTrue(v6matcher.matches(ipv6Address));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\shiro\\web\\src\\test\\java\\org\\apache\\shiro\\web\\filter\\authz\\IpAddressMatcherTests.java",
  "methodName" : "ipv6MatcherDoesntMatchIpv4Address",
  "sourceCode" : "@Test\r\nvoid ipv6MatcherDoesntMatchIpv4Address() {\r\n    assertFalse(v6matcher.matches(ipv4Address));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\shiro\\web\\src\\test\\java\\org\\apache\\shiro\\web\\filter\\authz\\IpAddressMatcherTests.java",
  "methodName" : "ipv4MatcherMatchesIpv4Address",
  "sourceCode" : "@Test\r\nvoid ipv4MatcherMatchesIpv4Address() {\r\n    assertTrue(v4matcher.matches(ipv4Address));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\shiro\\web\\src\\test\\java\\org\\apache\\shiro\\web\\filter\\authz\\IpAddressMatcherTests.java",
  "methodName" : "ipv4SubnetMatchesCorrectly",
  "sourceCode" : "@Test\r\nvoid ipv4SubnetMatchesCorrectly() throws Exception {\r\n    IpAddressMatcher matcher = new IpAddressMatcher(\"192.168.1.0/24\");\r\n    assertTrue(matcher.matches(ipv4Address));\r\n    matcher = new IpAddressMatcher(\"192.168.1.128/25\");\r\n    assertFalse(matcher.matches(ipv4Address));\r\n    assertTrue(matcher.matches(\"192.168.1.159\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\shiro\\web\\src\\test\\java\\org\\apache\\shiro\\web\\filter\\authz\\IpAddressMatcherTests.java",
  "methodName" : "ipv6RangeMatches",
  "sourceCode" : "@Test\r\nvoid ipv6RangeMatches() throws Exception {\r\n    IpAddressMatcher matcher = new IpAddressMatcher(\"2001:DB8::/48\");\r\n    assertTrue(matcher.matches(\"2001:DB8:0:0:0:0:0:0\"));\r\n    assertTrue(matcher.matches(\"2001:DB8:0:0:0:0:0:1\"));\r\n    assertTrue(matcher.matches(\"2001:DB8:0:FFFF:FFFF:FFFF:FFFF:FFFF\"));\r\n    assertFalse(matcher.matches(\"2001:DB8:1:0:0:0:0:0\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\shiro\\web\\src\\test\\java\\org\\apache\\shiro\\web\\filter\\authz\\IpAddressMatcherTests.java",
  "methodName" : "zeroMaskMatchesAnything",
  "sourceCode" : "// https://github.com/spring-projects/spring-security/issues/1970q\r\n@Test\r\nvoid zeroMaskMatchesAnything() throws Exception {\r\n    IpAddressMatcher matcher = new IpAddressMatcher(\"0.0.0.0/0\");\r\n    assertTrue(matcher.matches(\"123.4.5.6\"));\r\n    assertTrue(matcher.matches(\"192.168.0.159\"));\r\n    matcher = new IpAddressMatcher(\"192.168.0.159/0\");\r\n    assertTrue(matcher.matches(\"123.4.5.6\"));\r\n    assertTrue(matcher.matches(\"192.168.0.159\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\shiro\\web\\src\\test\\java\\org\\apache\\shiro\\web\\filter\\authz\\IpFilterTest.java",
  "methodName" : "accessShouldBeDeniedByDefault",
  "sourceCode" : "@Test\r\nvoid accessShouldBeDeniedByDefault() throws Exception {\r\n    IpFilter filter = new IpFilter();\r\n    HttpServletRequest request = createNiceMock(HttpServletRequest.class);\r\n    expect(request.getRemoteAddr()).andReturn(\"192.168.42.42\");\r\n    replay(request);\r\n    assertFalse(filter.isAccessAllowed(request, null, null));\r\n    verify(request);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\shiro\\web\\src\\test\\java\\org\\apache\\shiro\\web\\filter\\authz\\IpFilterTest.java",
  "methodName" : "accessShouldBeDeniedWhenNotInTheAllowedSet",
  "sourceCode" : "@Test\r\nvoid accessShouldBeDeniedWhenNotInTheAllowedSet() throws Exception {\r\n    IpFilter filter = new IpFilter();\r\n    filter.setAuthorizedIps(\"192.168.33/24\");\r\n    HttpServletRequest request = createNiceMock(HttpServletRequest.class);\r\n    expect(request.getRemoteAddr()).andReturn(\"192.168.42.42\");\r\n    replay(request);\r\n    assertFalse(filter.isAccessAllowed(request, null, null));\r\n    verify(request);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\shiro\\web\\src\\test\\java\\org\\apache\\shiro\\web\\filter\\authz\\IpFilterTest.java",
  "methodName" : "accessShouldBeGrantedToIpsInTheAllowedSet",
  "sourceCode" : "@Test\r\nvoid accessShouldBeGrantedToIpsInTheAllowedSet() throws Exception {\r\n    IpFilter filter = new IpFilter();\r\n    filter.setAuthorizedIps(\"192.168.32/24 192.168.33/24 192.168.34/24\");\r\n    HttpServletRequest request = createNiceMock(HttpServletRequest.class);\r\n    expect(request.getRemoteAddr()).andReturn(\"192.168.33.44\");\r\n    replay(request);\r\n    assertFalse(filter.isAccessAllowed(request, null, null));\r\n    verify(request);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\shiro\\web\\src\\test\\java\\org\\apache\\shiro\\web\\filter\\authz\\IpFilterTest.java",
  "methodName" : "deniedTakesPrecedenceOverAllowed",
  "sourceCode" : "@Test\r\nvoid deniedTakesPrecedenceOverAllowed() throws Exception {\r\n    IpFilter filter = new IpFilter();\r\n    filter.setAuthorizedIps(\"192.168.0.0/16\");\r\n    filter.setDeniedIps(\"192.168.33.0/24\");\r\n    HttpServletRequest request = createNiceMock(HttpServletRequest.class);\r\n    expect(request.getRemoteAddr()).andReturn(\"192.168.33.44\");\r\n    replay(request);\r\n    assertFalse(filter.isAccessAllowed(request, null, null));\r\n    verify(request);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\shiro\\web\\src\\test\\java\\org\\apache\\shiro\\web\\filter\\authz\\IpFilterTest.java",
  "methodName" : "willBlockAndAllowBasedOnIpSource",
  "sourceCode" : "@Test\r\nvoid willBlockAndAllowBasedOnIpSource() throws Exception {\r\n    IpSource source = new IpSource() {\r\n\r\n        public Collection<String> getAuthorizedIps() {\r\n            return Collections.singleton(\"192.168.0.0/16\");\r\n        }\r\n\r\n        public Collection<String> getDeniedIps() {\r\n            return Collections.singleton(\"192.168.33.0/24\");\r\n        }\r\n    };\r\n    IpFilter filter = new IpFilter();\r\n    filter.setIpSource(source);\r\n    HttpServletRequest request = createNiceMock(HttpServletRequest.class);\r\n    expect(request.getRemoteAddr()).andReturn(\"192.168.33.44\");\r\n    replay(request);\r\n    assertFalse(filter.isAccessAllowed(request, null, null));\r\n    verify(request);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\shiro\\web\\src\\test\\java\\org\\apache\\shiro\\web\\filter\\authz\\PortFilterTest.java",
  "methodName" : "testDefault",
  "sourceCode" : "@Test\r\nvoid testDefault() throws Exception {\r\n    HttpServletResponse response = createNiceMock(HttpServletResponse.class);\r\n    HttpServletRequest request = createBaseMockRequest();\r\n    expect(response.encodeRedirectURL(eq(\"http://localhost/\"))).andReturn(\"http://localhost/\");\r\n    replay(request);\r\n    replay(response);\r\n    PortFilter filter = new PortFilter();\r\n    boolean result = filter.onAccessDenied(request, response, null);\r\n    verify(request);\r\n    verify(response);\r\n    assertFalse(result);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\shiro\\web\\src\\test\\java\\org\\apache\\shiro\\web\\filter\\authz\\PortFilterTest.java",
  "methodName" : "testConfiguredPort",
  "sourceCode" : "/**\r\n * This tests the case where the client (e.g. browser) specifies a simple request to http://localhost/\r\n * (i.e. http scheme with the implied port of 80). The redirectURL should reflect the configured port (8080) instead\r\n * of the implied port 80.\r\n *\r\n * @throws Exception if there is a test failure\r\n */\r\n@SuppressWarnings(\"checkstyle:MagicNumber\")\r\n@Test\r\nvoid testConfiguredPort() throws Exception {\r\n    int port = 8080;\r\n    HttpServletResponse response = createNiceMock(HttpServletResponse.class);\r\n    HttpServletRequest request = createBaseMockRequest();\r\n    String expected = \"http://localhost:\" + port + \"/\";\r\n    expect(response.encodeRedirectURL(eq(expected))).andReturn(expected);\r\n    replay(request);\r\n    replay(response);\r\n    PortFilter filter = new PortFilter();\r\n    filter.setPort(port);\r\n    boolean result = filter.onAccessDenied(request, response, null);\r\n    verify(request);\r\n    verify(response);\r\n    assertFalse(result);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\shiro\\web\\src\\test\\java\\org\\apache\\shiro\\web\\filter\\authz\\SslFilterTest.java",
  "methodName" : "testDisabledByDefault",
  "sourceCode" : "@Test\r\nvoid testDisabledByDefault() {\r\n    sslFilter.postHandle(request, response);\r\n    assertNull(response.getHeader(HTTP_HEADER));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\shiro\\web\\src\\test\\java\\org\\apache\\shiro\\web\\filter\\authz\\SslFilterTest.java",
  "methodName" : "testDefaultValues",
  "sourceCode" : "@Test\r\nvoid testDefaultValues() {\r\n    sslFilter.getHsts().setEnabled(true);\r\n    sslFilter.postHandle(request, response);\r\n    assertEquals(\"max-age=\" + DEFAULT_MAX_AGE, response.getHeader(HTTP_HEADER));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\shiro\\web\\src\\test\\java\\org\\apache\\shiro\\web\\filter\\authz\\SslFilterTest.java",
  "methodName" : "testSetProperties",
  "sourceCode" : "@SuppressWarnings(\"checkstyle:MagicNumber\")\r\n@Test\r\nvoid testSetProperties() {\r\n    sslFilter.getHsts().setEnabled(true);\r\n    sslFilter.getHsts().setMaxAge(7776000);\r\n    sslFilter.getHsts().setIncludeSubDomains(true);\r\n    sslFilter.postHandle(request, response);\r\n    String expected = \"max-age=\" + 7776000 + \"; includeSubDomains\";\r\n    assertEquals(expected, response.getHeader(HTTP_HEADER));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\shiro\\web\\src\\test\\java\\org\\apache\\shiro\\web\\filter\\mgt\\PathMatchingFilterChainResolverTest.java",
  "methodName" : "testNewInstance",
  "sourceCode" : "@Test\r\nvoid testNewInstance() {\r\n    assertNotNull(resolver.getPathMatcher());\r\n    assertTrue(resolver.getPathMatcher() instanceof AntPathMatcher);\r\n    assertNotNull(resolver.getFilterChainManager());\r\n    assertTrue(resolver.getFilterChainManager() instanceof DefaultFilterChainManager);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\shiro\\web\\src\\test\\java\\org\\apache\\shiro\\web\\filter\\mgt\\PathMatchingFilterChainResolverTest.java",
  "methodName" : "testNewInstanceWithFilterConfig",
  "sourceCode" : "@Test\r\nvoid testNewInstanceWithFilterConfig() {\r\n    FilterConfig mock = createNiceMockFilterConfig();\r\n    resolver = new PathMatchingFilterChainResolver(mock);\r\n    assertNotNull(resolver.getPathMatcher());\r\n    assertTrue(resolver.getPathMatcher() instanceof AntPathMatcher);\r\n    assertNotNull(resolver.getFilterChainManager());\r\n    assertTrue(resolver.getFilterChainManager() instanceof DefaultFilterChainManager);\r\n    assertEquals(((DefaultFilterChainManager) resolver.getFilterChainManager()).getFilterConfig(), mock);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\shiro\\web\\src\\test\\java\\org\\apache\\shiro\\web\\filter\\mgt\\PathMatchingFilterChainResolverTest.java",
  "methodName" : "testSetters",
  "sourceCode" : "@Test\r\nvoid testSetters() {\r\n    resolver.setPathMatcher(new AntPathMatcher());\r\n    assertNotNull(resolver.getPathMatcher());\r\n    assertTrue(resolver.getPathMatcher() instanceof AntPathMatcher);\r\n    resolver.setFilterChainManager(new DefaultFilterChainManager());\r\n    assertNotNull(resolver.getFilterChainManager());\r\n    assertTrue(resolver.getFilterChainManager() instanceof DefaultFilterChainManager);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\shiro\\web\\src\\test\\java\\org\\apache\\shiro\\web\\filter\\mgt\\PathMatchingFilterChainResolverTest.java",
  "methodName" : "testGetChainsWithoutChains",
  "sourceCode" : "@Test\r\nvoid testGetChainsWithoutChains() {\r\n    ServletRequest request = mock(HttpServletRequest.class);\r\n    ServletResponse response = mock(HttpServletResponse.class);\r\n    FilterChain chain = mock(FilterChain.class);\r\n    FilterChain resolved = resolver.getChain(request, response, chain);\r\n    assertNull(resolved);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\shiro\\web\\src\\test\\java\\org\\apache\\shiro\\web\\filter\\mgt\\PathMatchingFilterChainResolverTest.java",
  "methodName" : "testGetChainsWithMatch",
  "sourceCode" : "@Test\r\nvoid testGetChainsWithMatch() {\r\n    HttpServletRequest request = mock(HttpServletRequest.class);\r\n    HttpServletResponse response = mock(HttpServletResponse.class);\r\n    FilterChain chain = mock(FilterChain.class);\r\n    //ensure at least one chain is defined:\r\n    resolver.getFilterChainManager().addToChain(\"/index.html\", \"authcBasic\");\r\n    when(request.getServletPath()).thenReturn(\"\");\r\n    when(request.getPathInfo()).thenReturn(\"/index.html\");\r\n    FilterChain resolved = resolver.getChain(request, response, chain);\r\n    assertNotNull(resolved);\r\n    verify(request).getServletPath();\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\shiro\\web\\src\\test\\java\\org\\apache\\shiro\\web\\filter\\mgt\\PathMatchingFilterChainResolverTest.java",
  "methodName" : "testPathTraversalWithDot",
  "sourceCode" : "@Test\r\nvoid testPathTraversalWithDot() {\r\n    HttpServletRequest request = mock(HttpServletRequest.class);\r\n    HttpServletResponse response = mock(HttpServletResponse.class);\r\n    FilterChain chain = mock(FilterChain.class);\r\n    //ensure at least one chain is defined:\r\n    resolver.getFilterChainManager().addToChain(\"/index.html\", \"authcBasic\");\r\n    when(request.getServletPath()).thenReturn(\"/\");\r\n    when(request.getPathInfo()).thenReturn(\"./index.html\");\r\n    FilterChain resolved = resolver.getChain(request, response, chain);\r\n    assertNotNull(resolved);\r\n    verify(request).getServletPath();\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\shiro\\web\\src\\test\\java\\org\\apache\\shiro\\web\\filter\\mgt\\PathMatchingFilterChainResolverTest.java",
  "methodName" : "testPathTraversalWithDotDot",
  "sourceCode" : "@Test\r\nvoid testPathTraversalWithDotDot() {\r\n    HttpServletRequest request = mock(HttpServletRequest.class);\r\n    HttpServletResponse response = mock(HttpServletResponse.class);\r\n    FilterChain chain = mock(FilterChain.class);\r\n    //ensure at least one chain is defined:\r\n    resolver.getFilterChainManager().addToChain(\"/index.html\", \"authcBasic\");\r\n    when(request.getServletPath()).thenReturn(\"/public/\");\r\n    when(request.getPathInfo()).thenReturn(\"../index.html\");\r\n    FilterChain resolved = resolver.getChain(request, response, chain);\r\n    assertNotNull(resolved);\r\n    verify(request).getServletPath();\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\shiro\\web\\src\\test\\java\\org\\apache\\shiro\\web\\filter\\mgt\\PathMatchingFilterChainResolverTest.java",
  "methodName" : "testGetChainsWithoutMatch",
  "sourceCode" : "@Test\r\nvoid testGetChainsWithoutMatch() {\r\n    HttpServletRequest request = mock(HttpServletRequest.class);\r\n    HttpServletResponse response = mock(HttpServletResponse.class);\r\n    FilterChain chain = mock(FilterChain.class);\r\n    //ensure at least one chain is defined:\r\n    resolver.getFilterChainManager().addToChain(\"/index.html\", \"authcBasic\");\r\n    when(request.getServletPath()).thenReturn(\"/\");\r\n    when(request.getPathInfo()).thenReturn(null);\r\n    FilterChain resolved = resolver.getChain(request, response, chain);\r\n    assertNull(resolved);\r\n    verify(request).getServletPath();\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\shiro\\web\\src\\test\\java\\org\\apache\\shiro\\web\\filter\\mgt\\PathMatchingFilterChainResolverTest.java",
  "methodName" : "testGetChain",
  "sourceCode" : "/**\r\n * Test asserting <a href=\"https://issues.apache.org/jira/browse/SHIRO-682\">SHIRO-682<a/>.\r\n */\r\n@Test\r\nvoid testGetChain() {\r\n    HttpServletRequest request = mock(HttpServletRequest.class);\r\n    HttpServletResponse response = mock(HttpServletResponse.class);\r\n    FilterChain chain = mock(FilterChain.class);\r\n    //ensure at least one chain is defined:\r\n    resolver.getFilterChainManager().addToChain(\"/resource/book\", \"authcBasic\");\r\n    when(request.getServletPath()).thenReturn(\"\");\r\n    when(request.getPathInfo()).thenReturn(\"/resource/book\");\r\n    FilterChain resolved = resolver.getChain(request, response, chain);\r\n    assertNotNull(resolved);\r\n    verify(request).getServletPath();\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\shiro\\web\\src\\test\\java\\org\\apache\\shiro\\web\\filter\\mgt\\PathMatchingFilterChainResolverTest.java",
  "methodName" : "testGetChainEqualUrlSeparator",
  "sourceCode" : "/**\r\n * Test asserting <a href=\"https://issues.apache.org/jira/browse/SHIRO-742\">SHIRO-742<a/>.\r\n */\r\n@Test\r\nvoid testGetChainEqualUrlSeparator() {\r\n    HttpServletRequest request = mock(HttpServletRequest.class);\r\n    HttpServletResponse response = mock(HttpServletResponse.class);\r\n    FilterChain chain = mock(FilterChain.class);\r\n    //ensure at least one chain is defined:\r\n    resolver.getFilterChainManager().addToChain(\"/\", \"authcBasic\");\r\n    when(request.getServletPath()).thenReturn(\"/\");\r\n    when(request.getPathInfo()).thenReturn(null);\r\n    FilterChain resolved = resolver.getChain(request, response, chain);\r\n    assertNotNull(resolved);\r\n    verify(request).getServletPath();\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\shiro\\web\\src\\test\\java\\org\\apache\\shiro\\web\\filter\\mgt\\PathMatchingFilterChainResolverTest.java",
  "methodName" : "testGetChainEndWithUrlSeparator",
  "sourceCode" : "/**\r\n * Test asserting <a href=\"https://issues.apache.org/jira/browse/SHIRO-682\">SHIRO-682<a/>.\r\n */\r\n@Test\r\nvoid testGetChainEndWithUrlSeparator() {\r\n    HttpServletRequest request = mock(HttpServletRequest.class);\r\n    HttpServletResponse response = mock(HttpServletResponse.class);\r\n    FilterChain chain = mock(FilterChain.class);\r\n    //ensure at least one chain is defined:\r\n    resolver.getFilterChainManager().addToChain(\"/resource/book\", \"authcBasic\");\r\n    when(request.getServletPath()).thenReturn(\"\");\r\n    when(request.getPathInfo()).thenReturn(\"/resource/book\");\r\n    FilterChain resolved = resolver.getChain(request, response, chain);\r\n    assertNotNull(resolved);\r\n    verify(request).getServletPath();\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\shiro\\web\\src\\test\\java\\org\\apache\\shiro\\web\\filter\\mgt\\PathMatchingFilterChainResolverTest.java",
  "methodName" : "testGetChainEndWithMultiUrlSeparator",
  "sourceCode" : "/**\r\n * Test asserting <a href=\"https://issues.apache.org/jira/browse/SHIRO-682\">SHIRO-682<a/>.\r\n */\r\n@Test\r\nvoid testGetChainEndWithMultiUrlSeparator() {\r\n    HttpServletRequest request = mock(HttpServletRequest.class);\r\n    HttpServletResponse response = mock(HttpServletResponse.class);\r\n    FilterChain chain = mock(FilterChain.class);\r\n    //ensure at least one chain is defined:\r\n    resolver.getFilterChainManager().addToChain(\"/resource/book\", \"authcBasic\");\r\n    when(request.getServletPath()).thenReturn(\"\");\r\n    when(request.getPathInfo()).thenReturn(\"/resource/book//\");\r\n    FilterChain resolved = resolver.getChain(request, response, chain);\r\n    assertNotNull(resolved);\r\n    verify(request).getServletPath();\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\shiro\\web\\src\\test\\java\\org\\apache\\shiro\\web\\filter\\mgt\\PathMatchingFilterChainResolverTest.java",
  "methodName" : "testMultipleChainsPathEndsWithSlash",
  "sourceCode" : "@Test\r\nvoid testMultipleChainsPathEndsWithSlash() {\r\n    HttpServletRequest request = mock(HttpServletRequest.class);\r\n    HttpServletResponse response = mock(HttpServletResponse.class);\r\n    FilterChain chain = mock(FilterChain.class);\r\n    //Define the filter chain\r\n    resolver.getFilterChainManager().addToChain(\"/login\", \"authc\");\r\n    resolver.getFilterChainManager().addToChain(\"/resource/*\", \"authcBasic\");\r\n    when(request.getServletPath()).thenReturn(\"\");\r\n    when(request.getPathInfo()).thenReturn(\"/resource/\");\r\n    FilterChain resolved = resolver.getChain(request, response, chain);\r\n    assertThat(resolved, notNullValue());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\shiro\\web\\src\\test\\java\\org\\apache\\shiro\\web\\filter\\mgt\\PathMatchingFilterChainResolverTest.java",
  "methodName" : "testGetChainWhenPathEndsWithSlash",
  "sourceCode" : "/**\r\n * Test asserting <a href=\"https://issues.apache.org/jira/browse/SHIRO-825\">SHIRO-825<a/>.\r\n */\r\n@Test\r\nvoid testGetChainWhenPathEndsWithSlash() {\r\n    HttpServletRequest request = mock(HttpServletRequest.class);\r\n    HttpServletResponse response = mock(HttpServletResponse.class);\r\n    FilterChain chain = mock(FilterChain.class);\r\n    //ensure at least one chain is defined:\r\n    resolver.getFilterChainManager().addToChain(\"/resource/*/book\", \"authcBasic\");\r\n    when(request.getServletPath()).thenReturn(\"\");\r\n    when(request.getPathInfo()).thenReturn(\"/resource/123/book/\");\r\n    FilterChain resolved = resolver.getChain(request, response, chain);\r\n    assertNotNull(resolved);\r\n    verify(request).getServletPath();\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\shiro\\web\\src\\test\\java\\org\\apache\\shiro\\web\\filter\\mgt\\PathMatchingFilterChainResolverTest.java",
  "methodName" : "testGetChainWhenPathDoesNotEndWithSlash",
  "sourceCode" : "/**\r\n * Test asserting <a href=\"https://issues.apache.org/jira/browse/SHIRO-825\">SHIRO-825<a/>.\r\n */\r\n@Test\r\nvoid testGetChainWhenPathDoesNotEndWithSlash() {\r\n    HttpServletRequest request = mock(HttpServletRequest.class);\r\n    HttpServletResponse response = mock(HttpServletResponse.class);\r\n    FilterChain chain = mock(FilterChain.class);\r\n    //ensure at least one chain is defined:\r\n    resolver.getFilterChainManager().addToChain(\"/resource/*/book\", \"authcBasic\");\r\n    when(request.getServletPath()).thenReturn(\"\");\r\n    when(request.getPathInfo()).thenReturn(\"/resource/123/book\");\r\n    FilterChain resolved = resolver.getChain(request, response, chain);\r\n    assertNotNull(resolved);\r\n    verify(request).getServletPath();\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\shiro\\web\\src\\test\\java\\org\\apache\\shiro\\web\\filter\\mgt\\SimpleNamedFilterListTest.java",
  "methodName" : "testNewInstance",
  "sourceCode" : "@Test\r\nvoid testNewInstance() {\r\n    @SuppressWarnings({ \"MismatchedQueryAndUpdateOfCollection\" })\r\n    SimpleNamedFilterList list = new SimpleNamedFilterList(\"test\");\r\n    assertNotNull(list.getName());\r\n    assertEquals(\"test\", list.getName());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\shiro\\web\\src\\test\\java\\org\\apache\\shiro\\web\\filter\\mgt\\SimpleNamedFilterListTest.java",
  "methodName" : "testNewInstanceNameless",
  "sourceCode" : "@Test\r\nvoid testNewInstanceNameless() {\r\n    assertThrows(IllegalArgumentException.class, () -> {\r\n        new SimpleNamedFilterList(null);\r\n    });\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\shiro\\web\\src\\test\\java\\org\\apache\\shiro\\web\\filter\\mgt\\SimpleNamedFilterListTest.java",
  "methodName" : "testNewInstanceBackingList",
  "sourceCode" : "@Test\r\nvoid testNewInstanceBackingList() {\r\n    new SimpleNamedFilterList(\"test\", new ArrayList<Filter>());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\shiro\\web\\src\\test\\java\\org\\apache\\shiro\\web\\filter\\mgt\\SimpleNamedFilterListTest.java",
  "methodName" : "testNewInstanceNullBackingList",
  "sourceCode" : "@Test\r\nvoid testNewInstanceNullBackingList() {\r\n    assertThrows(NullPointerException.class, () -> {\r\n        new SimpleNamedFilterList(\"test\", null);\r\n    });\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\shiro\\web\\src\\test\\java\\org\\apache\\shiro\\web\\filter\\mgt\\SimpleNamedFilterListTest.java",
  "methodName" : "testListMethods",
  "sourceCode" : "/**\r\n * Exists mainly to increase code coverage as the SimpleNamedFilterList\r\n * implementation is a direct pass through.\r\n */\r\n@SuppressWarnings(\"checkstyle:MethodLength\")\r\n@Test\r\nvoid testListMethods() {\r\n    FilterChain mock = createNiceMock(FilterChain.class);\r\n    Filter filter = createNiceMock(Filter.class);\r\n    NamedFilterList list = new SimpleNamedFilterList(\"test\");\r\n    list.add(filter);\r\n    FilterChain chain = list.proxy(mock);\r\n    assertNotNull(chain);\r\n    assertNotSame(mock, chain);\r\n    Filter singleFilter = new SslFilter();\r\n    List<? extends Filter> multipleFilters = CollectionUtils.asList(new PortFilter(), new UserFilter());\r\n    list.add(0, singleFilter);\r\n    assertEquals(2, list.size());\r\n    assertTrue(list.get(0) instanceof SslFilter);\r\n    assertArrayEquals(new Object[] { singleFilter, filter }, list.toArray());\r\n    list.addAll(multipleFilters);\r\n    assertEquals(4, list.size());\r\n    assertTrue(list.get(2) instanceof PortFilter);\r\n    assertTrue(list.get(3) instanceof UserFilter);\r\n    list.addAll(0, CollectionUtils.asList(new PermissionsAuthorizationFilter(), new RolesAuthorizationFilter()));\r\n    assertEquals(6, list.size());\r\n    assertTrue(list.get(0) instanceof PermissionsAuthorizationFilter);\r\n    assertTrue(list.get(1) instanceof RolesAuthorizationFilter);\r\n    assertEquals(2, list.indexOf(singleFilter));\r\n    assertEquals(multipleFilters, list.subList(4, list.size()));\r\n    assertTrue(list.contains(singleFilter));\r\n    assertTrue(list.containsAll(multipleFilters));\r\n    assertFalse(list.isEmpty());\r\n    list.clear();\r\n    assertTrue(list.isEmpty());\r\n    list.add(singleFilter);\r\n    Iterator i = list.iterator();\r\n    assertTrue(i.hasNext());\r\n    assertEquals(i.next(), singleFilter);\r\n    ListIterator li = list.listIterator();\r\n    assertTrue(li.hasNext());\r\n    assertEquals(li.next(), singleFilter);\r\n    li = list.listIterator(0);\r\n    assertTrue(li.hasNext());\r\n    assertEquals(li.next(), singleFilter);\r\n    list.set(0, singleFilter);\r\n    assertEquals(list.get(0), singleFilter);\r\n    Filter[] filters = new Filter[list.size()];\r\n    filters = list.toArray(filters);\r\n    assertEquals(1, filters.length);\r\n    assertEquals(filters[0], singleFilter);\r\n    assertEquals(0, list.lastIndexOf(singleFilter));\r\n    list.remove(singleFilter);\r\n    assertTrue(list.isEmpty());\r\n    list.add(singleFilter);\r\n    list.remove(0);\r\n    assertTrue(list.isEmpty());\r\n    list.add(singleFilter);\r\n    list.addAll(multipleFilters);\r\n    assertEquals(3, list.size());\r\n    list.removeAll(multipleFilters);\r\n    assertEquals(1, list.size());\r\n    assertEquals(list.get(0), singleFilter);\r\n    list.addAll(multipleFilters);\r\n    assertEquals(3, list.size());\r\n    list.retainAll(multipleFilters);\r\n    assertEquals(2, list.size());\r\n    assertEquals(new ArrayList<>(list), multipleFilters);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\shiro\\web\\src\\test\\java\\org\\apache\\shiro\\web\\filter\\PathMatchingFilterParameterizedTest.java",
  "methodName" : "testBasicAssumptions",
  "sourceCode" : "@MethodSource(\"generateParameters\")\r\n@ParameterizedTest\r\nvoid testBasicAssumptions(String pattern, HttpServletRequest request, boolean shouldMatch) {\r\n    initPathMatchingFilterParameterizedTest(pattern, request, shouldMatch);\r\n    LOG.debug(\"Input pattern: [{}], input path: [{}].\", this.pattern, this.request.getPathInfo());\r\n    boolean matchEnabled = filter.pathsMatch(this.pattern, this.request);\r\n    assertEquals(this.shouldMatch, matchEnabled, \"PathMatch can match URL end with multi Separator, [\" + this.pattern + \"] - [\" + this.request.getPathInfo() + \"]\");\r\n    verify(request);\r\n}",
  "annotations" : [ "ParameterizedTest" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\shiro\\web\\src\\test\\java\\org\\apache\\shiro\\web\\filter\\PathMatchingFilterTest.java",
  "methodName" : "testDisabledBasedOnPath",
  "sourceCode" : "/**\r\n * Test asserting <a href=\"https://issues.apache.org/jira/browse/SHIRO-221\">SHIRO-221<a/>.\r\n */\r\n@SuppressWarnings({ \"JavaDoc\" })\r\n@Test\r\nvoid testDisabledBasedOnPath() throws Exception {\r\n    filter.processPathConfig(DISABLED_PATH, null);\r\n    HttpServletRequest request = createNiceMock(HttpServletRequest.class);\r\n    ServletResponse response = createNiceMock(ServletResponse.class);\r\n    expect(request.getContextPath()).andReturn(CONTEXT_PATH).anyTimes();\r\n    expect(request.getRequestURI()).andReturn(DISABLED_PATH).anyTimes();\r\n    replay(request);\r\n    boolean continueFilterChain = filter.preHandle(request, response);\r\n    assertTrue(continueFilterChain, \"FilterChain should continue.\");\r\n    verify(request);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\shiro\\web\\src\\test\\java\\org\\apache\\shiro\\web\\filter\\PathMatchingFilterTest.java",
  "methodName" : "testEnabled",
  "sourceCode" : "/**\r\n * Test asserting <a href=\"https://issues.apache.org/jira/browse/SHIRO-221\">SHIRO-221<a/>.\r\n */\r\n@SuppressWarnings({ \"JavaDoc\" })\r\n@Test\r\nvoid testEnabled() throws Exception {\r\n    //Configure the filter to reflect 2 configured paths.  This test will simulate a request to the\r\n    //enabled path\r\n    filter.processPathConfig(DISABLED_PATH, null);\r\n    filter.processPathConfig(ENABLED_PATH, null);\r\n    HttpServletRequest request = createNiceMock(HttpServletRequest.class);\r\n    ServletResponse response = createNiceMock(ServletResponse.class);\r\n    expect(request.getContextPath()).andReturn(CONTEXT_PATH).anyTimes();\r\n    expect(request.getRequestURI()).andReturn(ENABLED_PATH).anyTimes();\r\n    expect(request.getServletPath()).andReturn(\"\").anyTimes();\r\n    expect(request.getPathInfo()).andReturn(ENABLED_PATH).anyTimes();\r\n    replay(request);\r\n    boolean continueFilterChain = filter.preHandle(request, response);\r\n    assertFalse(continueFilterChain, \"FilterChain should NOT continue.\");\r\n    verify(request);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\shiro\\web\\src\\test\\java\\org\\apache\\shiro\\web\\filter\\PathMatchingFilterTest.java",
  "methodName" : "testPathMatchEqualUrlSeparatorEnabled",
  "sourceCode" : "/**\r\n * Test asserting <a href=\"https://issues.apache.org/jira/browse/SHIRO-742\">SHIRO-742<a/>.\r\n */\r\n@Test\r\nvoid testPathMatchEqualUrlSeparatorEnabled() {\r\n    expect(request.getContextPath()).andReturn(CONTEXT_PATH).anyTimes();\r\n    expect(request.getRequestURI()).andReturn(\"/\").anyTimes();\r\n    expect(request.getServletPath()).andReturn(\"\").anyTimes();\r\n    expect(request.getPathInfo()).andReturn(\"/\").anyTimes();\r\n    replay(request);\r\n    boolean matchEnabled = filter.pathsMatch(\"/\", request);\r\n    assertTrue(matchEnabled, \"PathMatch can match URL end with Separator\");\r\n    verify(request);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\shiro\\web\\src\\test\\java\\org\\apache\\shiro\\web\\filter\\PathMatchingFilterTest.java",
  "methodName" : "testPathMatchEEnabled",
  "sourceCode" : "/**\r\n * Test asserting <a href=\"https://issues.apache.org/jira/browse/SHIRO-682\">SHIRO-682<a/>.\r\n */\r\n@Test\r\nvoid testPathMatchEEnabled() {\r\n    expect(request.getContextPath()).andReturn(CONTEXT_PATH).anyTimes();\r\n    expect(request.getRequestURI()).andReturn(\"/resource/book\").anyTimes();\r\n    expect(request.getServletPath()).andReturn(\"\").anyTimes();\r\n    expect(request.getPathInfo()).andReturn(\"/resource/book\").anyTimes();\r\n    replay(request);\r\n    boolean matchEnabled = filter.pathsMatch(\"/resource/book\", request);\r\n    assertTrue(matchEnabled, \"PathMatch can match URL end with Separator\");\r\n    verify(request);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\shiro\\web\\src\\test\\java\\org\\apache\\shiro\\web\\filter\\PathMatchingFilterTest.java",
  "methodName" : "testPathMatchEndWithUrlSeparatorEnabled",
  "sourceCode" : "/**\r\n * Test asserting <a href=\"https://issues.apache.org/jira/browse/SHIRO-682\">SHIRO-682<a/>.\r\n */\r\n@Test\r\nvoid testPathMatchEndWithUrlSeparatorEnabled() {\r\n    expect(request.getContextPath()).andReturn(CONTEXT_PATH).anyTimes();\r\n    expect(request.getRequestURI()).andReturn(\"/resource/book/\").anyTimes();\r\n    expect(request.getServletPath()).andReturn(\"\").anyTimes();\r\n    expect(request.getPathInfo()).andReturn(\"/resource/book/\").anyTimes();\r\n    replay(request);\r\n    boolean matchEnabled = filter.pathsMatch(\"/resource/book\", request);\r\n    assertTrue(matchEnabled, \"PathMatch can match URL end with Separator\");\r\n    verify(request);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\shiro\\web\\src\\test\\java\\org\\apache\\shiro\\web\\filter\\PathMatchingFilterTest.java",
  "methodName" : "testPathMatchEndWithMultiUrlSeparatorEnabled",
  "sourceCode" : "/**\r\n * Test asserting <a href=\"https://issues.apache.org/jira/browse/SHIRO-682\">SHIRO-682<a/>.\r\n */\r\n@Test\r\nvoid testPathMatchEndWithMultiUrlSeparatorEnabled() {\r\n    expect(request.getContextPath()).andReturn(CONTEXT_PATH).anyTimes();\r\n    expect(request.getRequestURI()).andReturn(\"/resource/book//\").anyTimes();\r\n    expect(request.getServletPath()).andReturn(\"\").anyTimes();\r\n    expect(request.getPathInfo()).andReturn(\"/resource/book//\").anyTimes();\r\n    replay(request);\r\n    boolean matchEnabled = filter.pathsMatch(\"/resource/book\", request);\r\n    assertTrue(matchEnabled, \"PathMatch can match URL end with multi Separator\");\r\n    verify(request);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\shiro\\web\\src\\test\\java\\org\\apache\\shiro\\web\\mgt\\CookieRememberMeManagerTest.java",
  "methodName" : "onSuccessfulLogin",
  "sourceCode" : "@Test\r\nvoid onSuccessfulLogin() {\r\n    HttpServletRequest mockRequest = createNiceMock(HttpServletRequest.class);\r\n    HttpServletResponse mockResponse = createNiceMock(HttpServletResponse.class);\r\n    WebSubject mockSubject = createNiceMock(WebSubject.class);\r\n    expect(mockSubject.getServletRequest()).andReturn(mockRequest).anyTimes();\r\n    expect(mockSubject.getServletResponse()).andReturn(mockResponse).anyTimes();\r\n    CookieRememberMeManager mgr = new CookieRememberMeManager();\r\n    org.apache.shiro.web.servlet.Cookie cookie = createMock(org.apache.shiro.web.servlet.Cookie.class);\r\n    mgr.setCookie(cookie);\r\n    //first remove any previous cookie\r\n    cookie.removeFrom(isA(HttpServletRequest.class), isA(HttpServletResponse.class));\r\n    //then ensure a new cookie is created by reading the template's attributes:\r\n    expect(cookie.getName()).andReturn(\"rememberMe\");\r\n    expect(cookie.getValue()).andReturn(null);\r\n    expect(cookie.getComment()).andReturn(null);\r\n    expect(cookie.getDomain()).andReturn(null);\r\n    expect(cookie.getPath()).andReturn(null);\r\n    expect(cookie.getMaxAge()).andReturn(SimpleCookie.DEFAULT_MAX_AGE);\r\n    expect(cookie.getVersion()).andReturn(SimpleCookie.DEFAULT_VERSION);\r\n    expect(cookie.isSecure()).andReturn(false);\r\n    expect(cookie.isHttpOnly()).andReturn(true);\r\n    expect(cookie.getSameSite()).andReturn(org.apache.shiro.web.servlet.Cookie.SameSiteOptions.LAX);\r\n    UsernamePasswordToken token = new UsernamePasswordToken(\"user\", \"secret\");\r\n    token.setRememberMe(true);\r\n    AuthenticationInfo account = new SimpleAuthenticationInfo(\"user\", \"secret\", \"test\");\r\n    replay(mockSubject);\r\n    replay(mockRequest);\r\n    replay(cookie);\r\n    mgr.onSuccessfulLogin(mockSubject, token, account);\r\n    verify(mockRequest);\r\n    verify(mockSubject);\r\n    verify(cookie);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\shiro\\web\\src\\test\\java\\org\\apache\\shiro\\web\\mgt\\CookieRememberMeManagerTest.java",
  "methodName" : "getRememberedSerializedIdentityReturnsNullForDeletedCookie",
  "sourceCode" : "// SHIRO-183\r\n@Test\r\nvoid getRememberedSerializedIdentityReturnsNullForDeletedCookie() {\r\n    HttpServletRequest mockRequest = createMock(HttpServletRequest.class);\r\n    HttpServletResponse mockResponse = createMock(HttpServletResponse.class);\r\n    WebSubjectContext context = new DefaultWebSubjectContext();\r\n    context.setServletRequest(mockRequest);\r\n    context.setServletResponse(mockResponse);\r\n    expect(mockRequest.getAttribute(ShiroHttpServletRequest.IDENTITY_REMOVED_KEY)).andReturn(null);\r\n    Cookie[] cookies = new Cookie[] { new Cookie(CookieRememberMeManager.DEFAULT_REMEMBER_ME_COOKIE_NAME, org.apache.shiro.web.servlet.Cookie.DELETED_COOKIE_VALUE) };\r\n    expect(mockRequest.getCookies()).andReturn(cookies);\r\n    replay(mockRequest);\r\n    CookieRememberMeManager mgr = new CookieRememberMeManager();\r\n    assertNull(mgr.getRememberedSerializedIdentity(context));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\shiro\\web\\src\\test\\java\\org\\apache\\shiro\\web\\mgt\\CookieRememberMeManagerTest.java",
  "methodName" : "getRememberedPrincipals",
  "sourceCode" : "// SHIRO-69\r\n@Test\r\nvoid getRememberedPrincipals() {\r\n    HttpServletRequest mockRequest = createMock(HttpServletRequest.class);\r\n    HttpServletResponse mockResponse = createMock(HttpServletResponse.class);\r\n    WebSubjectContext context = new DefaultWebSubjectContext();\r\n    context.setServletRequest(mockRequest);\r\n    context.setServletResponse(mockResponse);\r\n    expect(mockRequest.getAttribute(ShiroHttpServletRequest.IDENTITY_REMOVED_KEY)).andReturn(null);\r\n    //The following base64 string was determined from the log output of the above 'onSuccessfulLogin' test.\r\n    //This will have to change any time the PrincipalCollection implementation changes:\r\n    final String userPCAesBase64 = \"0o6DCfePYTjK4q579qzUFEfkeGRvbBOdKHp2y8/nGAltt1Vz8uW0Z8igeO\" + \"Tq/yBmcw25f3Q0ui/Leg3x0iQZWhw9Bbu0mFHmHsGxEd6mPwtUpSegIjyX5c/kZpqnb7QLdajPWiczX8P\" + \"Oc2Eku5+8ye1u38Y8uKlklHxcYCPh0pRiDSBxfjPsLaDfOpGbmPjZd4SVg68i/++TvUjqBNJyb+pDix3f\" + \"PeuPvReWGcE50iovezVZrEfDOAQ0cZYW35ShypMWOmE9yZnb+p8++StDyAUegryyuIa4pjuRzfMh9D+sN\" + \"F9tm/EnDC1VCer2S/a0AGlWAQiM7jrWt1sNinZcKIrvShaWI21tONJt8WhozNS2H72lk4p92rfLNHeglT\" + \"xObxIYxLfTI9KiToSe1nYmpQmbBO8x1wWDkWBG//EqRvhgbIfQVqJp12T0fJC1nFuZuVhw/ZanaAZGDk8\" + \"7aLMiw3T6FBZtWaspgvfH+0TJrTD8Ra386ekNXNN8JW8=\";\r\n    Cookie[] cookies = new Cookie[] { new Cookie(CookieRememberMeManager.DEFAULT_REMEMBER_ME_COOKIE_NAME, userPCAesBase64) };\r\n    expect(mockRequest.getCookies()).andReturn(cookies);\r\n    replay(mockRequest);\r\n    CookieRememberMeManager mgr = new CookieRememberMeManager();\r\n    mgr.setCipherKey(Base64.decode(\"kPH+bIxk5D2deZiIxcaaaA==\"));\r\n    PrincipalCollection collection = mgr.getRememberedPrincipals(context);\r\n    verify(mockRequest);\r\n    assertNotNull(collection);\r\n    //noinspection ConstantConditions\r\n    assertEquals(\"user\", collection.iterator().next());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\shiro\\web\\src\\test\\java\\org\\apache\\shiro\\web\\mgt\\CookieRememberMeManagerTest.java",
  "methodName" : "getRememberedPrincipalsNoMoreDefaultCipher",
  "sourceCode" : "@Test\r\nvoid getRememberedPrincipalsNoMoreDefaultCipher() {\r\n    assertThrows(CryptoException.class, () -> {\r\n        HttpServletRequest mockRequest = createMock(HttpServletRequest.class);\r\n        HttpServletResponse mockResponse = createMock(HttpServletResponse.class);\r\n        WebSubjectContext context = new DefaultWebSubjectContext();\r\n        context.setServletRequest(mockRequest);\r\n        context.setServletResponse(mockResponse);\r\n        expect(mockRequest.getAttribute(ShiroHttpServletRequest.IDENTITY_REMOVED_KEY)).andReturn(null);\r\n        expect(mockRequest.getContextPath()).andReturn(\"/test\");\r\n        //The following base64 string was determined from the log output of the above 'onSuccessfulLogin' test.\r\n        //This will have to change any time the PrincipalCollection implementation changes:\r\n        final String userPCAesBase64 = \"0o6DCfePYTjK4q579qzUFEfkeGRvbBOdKHp2y8/nGAltt1Vz8uW0Z8igeO\" + \"Tq/yBmcw25f3Q0ui/Leg3x0iQZWhw9Bbu0mFHmHsGxEd6mPwtUpSegIjyX5c/kZpqnb7QLdajPWiczX8P\" + \"Oc2Eku5+8ye1u38Y8uKlklHxcYCPh0pRiDSBxfjPsLaDfOpGbmPjZd4SVg68i/++TvUjqBNJyb+pDix3f\" + \"PeuPvReWGcE50iovezVZrEfDOAQ0cZYW35ShypMWOmE9yZnb+p8++StDyAUegryyuIa4pjuRzfMh9D+sN\" + \"F9tm/EnDC1VCer2S/a0AGlWAQiM7jrWt1sNinZcKIrvShaWI21tONJt8WhozNS2H72lk4p92rfLNHeglT\" + \"xObxIYxLfTI9KiToSe1nYmpQmbBO8x1wWDkWBG//EqRvhgbIfQVqJp12T0fJC1nFuZuVhw/ZanaAZGDk8\" + \"7aLMiw3T6FBZtWaspgvfH+0TJrTD8Ra386ekNXNN8JW8=\";\r\n        Cookie[] cookies = new Cookie[] { new Cookie(CookieRememberMeManager.DEFAULT_REMEMBER_ME_COOKIE_NAME, userPCAesBase64) };\r\n        expect(mockRequest.getCookies()).andReturn(cookies);\r\n        replay(mockRequest);\r\n        CookieRememberMeManager mgr = new CookieRememberMeManager();\r\n        // without the old default cipher set, this will fail (expected)\r\n        // mgr.setCipherKey( Base64.decode(\"kPH+bIxk5D2deZiIxcaaaA==\"));\r\n        // this will throw a CryptoException\r\n        mgr.getRememberedPrincipals(context);\r\n    });\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\shiro\\web\\src\\test\\java\\org\\apache\\shiro\\web\\mgt\\CookieRememberMeManagerTest.java",
  "methodName" : "getRememberedPrincipalsDecryptionError_whenWrongCookieValue",
  "sourceCode" : "// SHIRO-69\r\n@SuppressWarnings(\"checkstyle:MethodName\")\r\n@Test\r\nvoid getRememberedPrincipalsDecryptionError_whenWrongCookieValue() {\r\n    HttpServletRequest mockRequest = createNiceMock(HttpServletRequest.class);\r\n    HttpServletResponse mockResponse = createNiceMock(HttpServletResponse.class);\r\n    WebSubjectContext context = new DefaultWebSubjectContext();\r\n    context.setServletRequest(mockRequest);\r\n    context.setServletResponse(mockResponse);\r\n    expect(mockRequest.getAttribute(ShiroHttpServletRequest.IDENTITY_REMOVED_KEY)).andReturn(null);\r\n    // Simulate a bad return value here (valid Base64 does not contain key)\r\n    String userPCAesBase64 = \"garbage\";\r\n    Cookie[] cookies = new Cookie[] { new Cookie(CookieRememberMeManager.DEFAULT_REMEMBER_ME_COOKIE_NAME, userPCAesBase64) };\r\n    expect(mockRequest.getCookies()).andReturn(cookies).anyTimes();\r\n    replay(mockRequest);\r\n    CookieRememberMeManager mgr = new CookieRememberMeManager();\r\n    assertThrows(CryptoException.class, () -> mgr.getRememberedPrincipals(context), \"CryptoException should be thrown on invalid cookies\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\shiro\\web\\src\\test\\java\\org\\apache\\shiro\\web\\mgt\\CookieRememberMeManagerTest.java",
  "methodName" : "getRememberedPrincipalsDecryptionError_whenInvalidBase64",
  "sourceCode" : "@SuppressWarnings(\"checkstyle:MethodName\")\r\n@Test\r\nvoid getRememberedPrincipalsDecryptionError_whenInvalidBase64() {\r\n    HttpServletRequest mockRequest = createNiceMock(HttpServletRequest.class);\r\n    HttpServletResponse mockResponse = createNiceMock(HttpServletResponse.class);\r\n    WebSubjectContext context = new DefaultWebSubjectContext();\r\n    context.setServletRequest(mockRequest);\r\n    context.setServletResponse(mockResponse);\r\n    expect(mockRequest.getAttribute(ShiroHttpServletRequest.IDENTITY_REMOVED_KEY)).andReturn(null);\r\n    // Simulate a bad return value here (not valid Base64)\r\n    String userPCAesBase64 = \"InvalidBase64\";\r\n    Cookie[] cookies = new Cookie[] { new Cookie(CookieRememberMeManager.DEFAULT_REMEMBER_ME_COOKIE_NAME, userPCAesBase64) };\r\n    expect(mockRequest.getCookies()).andReturn(cookies).anyTimes();\r\n    replay(mockRequest);\r\n    CookieRememberMeManager mgr = new CookieRememberMeManager();\r\n    PrincipalCollection rememberedPrincipals = mgr.getRememberedPrincipals(context);\r\n    assertNull(rememberedPrincipals, \"rememberedPrincipals should be null on invalid cookies.\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\shiro\\web\\src\\test\\java\\org\\apache\\shiro\\web\\mgt\\CookieRememberMeManagerTest.java",
  "methodName" : "onLogout",
  "sourceCode" : "@Test\r\nvoid onLogout() {\r\n    CookieRememberMeManager mgr = new CookieRememberMeManager();\r\n    org.apache.shiro.web.servlet.Cookie cookie = createMock(org.apache.shiro.web.servlet.Cookie.class);\r\n    mgr.setCookie(cookie);\r\n    HttpServletRequest mockRequest = createMock(HttpServletRequest.class);\r\n    HttpServletResponse mockResponse = createMock(HttpServletResponse.class);\r\n    WebSubject mockSubject = createNiceMock(WebSubject.class);\r\n    expect(mockSubject.getServletRequest()).andReturn(mockRequest).anyTimes();\r\n    expect(mockSubject.getServletResponse()).andReturn(mockResponse).anyTimes();\r\n    expect(mockRequest.getContextPath()).andReturn(null).anyTimes();\r\n    cookie.removeFrom(isA(HttpServletRequest.class), isA(HttpServletResponse.class));\r\n    replay(mockRequest);\r\n    replay(mockResponse);\r\n    replay(mockSubject);\r\n    replay(cookie);\r\n    mgr.onLogout(mockSubject);\r\n    verify(mockSubject);\r\n    verify(mockRequest);\r\n    verify(mockResponse);\r\n    verify(cookie);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\shiro\\web\\src\\test\\java\\org\\apache\\shiro\\web\\mgt\\CookieRememberMeManagerTest.java",
  "methodName" : "shouldIgnoreInvalidCookieValues",
  "sourceCode" : "@Test\r\nvoid shouldIgnoreInvalidCookieValues() {\r\n    // given\r\n    HttpServletRequest mockRequest = createMock(HttpServletRequest.class);\r\n    HttpServletResponse mockResponse = createMock(HttpServletResponse.class);\r\n    WebSubjectContext context = new DefaultWebSubjectContext();\r\n    context.setServletRequest(mockRequest);\r\n    context.setServletResponse(mockResponse);\r\n    CookieRememberMeManager mgr = new CookieRememberMeManager();\r\n    Cookie[] cookies = new Cookie[] { new Cookie(CookieRememberMeManager.DEFAULT_REMEMBER_ME_COOKIE_NAME, UUID.randomUUID().toString() + \"%%ldapRealm\") };\r\n    expect(mockRequest.getAttribute(ShiroHttpServletRequest.IDENTITY_REMOVED_KEY)).andReturn(null);\r\n    expect(mockRequest.getContextPath()).andReturn(null);\r\n    expect(mockRequest.getCookies()).andReturn(cookies);\r\n    replay(mockRequest);\r\n    // when\r\n    final byte[] rememberedSerializedIdentity = mgr.getRememberedSerializedIdentity(context);\r\n    // then\r\n    assertNull(rememberedSerializedIdentity, \"should ignore invalid cookie values\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\shiro\\web\\src\\test\\java\\org\\apache\\shiro\\web\\mgt\\CookieRememberMeManagerTest.java",
  "methodName" : "ensurePaddingShouldAddEnoughEquals",
  "sourceCode" : "@SuppressWarnings(\"checkstyle:MagicNumber\")\r\n@Test\r\nvoid ensurePaddingShouldAddEnoughEquals() {\r\n    CookieRememberMeManager mgr = new CookieRememberMeManager();\r\n    StringBuilder stringToTest = new StringBuilder(\"A string to test padding\");\r\n    for (int i = 0; i < 10; i++) {\r\n        stringToTest.append(\"x\");\r\n        String encoded = Base64.encodeToString(stringToTest.toString().getBytes());\r\n        while (encoded.endsWith(\"=\")) {\r\n            encoded = encoded.substring(0, encoded.length() - 1);\r\n        }\r\n        String base64 = mgr.ensurePadding(encoded);\r\n        assertDoesNotThrow(() -> Base64.decode(base64), \"Error decoding \" + stringToTest);\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\shiro\\web\\src\\test\\java\\org\\apache\\shiro\\web\\mgt\\DefaultWebSecurityManagerTest.java",
  "methodName" : "checkSessionManagerDeterminesContainerSessionMode",
  "sourceCode" : "@Test\r\n@SuppressWarnings(\"deprecation\")\r\nvoid checkSessionManagerDeterminesContainerSessionMode() {\r\n    sm.setSessionMode(DefaultWebSecurityManager.NATIVE_SESSION_MODE);\r\n    WebSessionManager sessionManager = mock(WebSessionManager.class);\r\n    when(sessionManager.isServletContainerSessions()).thenReturn(true);\r\n    sm.setSessionManager(sessionManager);\r\n    assertTrue(sm.isHttpSessionMode(), \"The set SessionManager is not being used to determine isHttpSessionMode.\");\r\n    verify(sessionManager).isServletContainerSessions();\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\shiro\\web\\src\\test\\java\\org\\apache\\shiro\\web\\mgt\\DefaultWebSecurityManagerTest.java",
  "methodName" : "shiroSessionModeInit",
  "sourceCode" : "@Test\r\n@SuppressWarnings(\"deprecation\")\r\nvoid shiroSessionModeInit() {\r\n    sm.setSessionMode(DefaultWebSecurityManager.NATIVE_SESSION_MODE);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\shiro\\web\\src\\test\\java\\org\\apache\\shiro\\web\\mgt\\DefaultWebSecurityManagerTest.java",
  "methodName" : "testLogin",
  "sourceCode" : "@Test\r\nvoid testLogin() {\r\n    HttpServletRequest mockRequest = mock(HttpServletRequest.class);\r\n    HttpServletResponse mockResponse = mock(HttpServletResponse.class);\r\n    when(mockRequest.getCookies()).thenReturn(null);\r\n    when(mockRequest.getContextPath()).thenReturn(\"/\");\r\n    Subject subject = newSubject(mockRequest, mockResponse);\r\n    assertFalse(subject.isAuthenticated());\r\n    subject.login(new UsernamePasswordToken(\"lonestarr\", \"vespa\"));\r\n    assertTrue(subject.isAuthenticated());\r\n    assertNotNull(subject.getPrincipal());\r\n    assertEquals(\"lonestarr\", subject.getPrincipal());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\shiro\\web\\src\\test\\java\\org\\apache\\shiro\\web\\mgt\\DefaultWebSecurityManagerTest.java",
  "methodName" : "testSessionTimeout",
  "sourceCode" : "@SuppressWarnings(\"checkstyle:MagicNumber\")\r\n@Test\r\nvoid testSessionTimeout() {\r\n    shiroSessionModeInit();\r\n    long globalTimeout = 100;\r\n    ((AbstractSessionManager) sm.getSessionManager()).setGlobalSessionTimeout(globalTimeout);\r\n    HttpServletRequest mockRequest = mock(HttpServletRequest.class);\r\n    HttpServletResponse mockResponse = mock(HttpServletResponse.class);\r\n    when(mockRequest.getCookies()).thenReturn(null);\r\n    when(mockRequest.getContextPath()).thenReturn(\"/\");\r\n    Subject subject = newSubject(mockRequest, mockResponse);\r\n    Session session = subject.getSession();\r\n    assertEquals(session.getTimeout(), globalTimeout);\r\n    session.setTimeout(125);\r\n    assertEquals(125, session.getTimeout());\r\n    sleep(200);\r\n    try {\r\n        session.getTimeout();\r\n        fail(\"Session should have expired.\");\r\n    } catch (ExpiredSessionException expected) {\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\shiro\\web\\src\\test\\java\\org\\apache\\shiro\\web\\mgt\\DefaultWebSecurityManagerTest.java",
  "methodName" : "testGetSubjectByRequestResponsePair",
  "sourceCode" : "@Test\r\nvoid testGetSubjectByRequestResponsePair() {\r\n    shiroSessionModeInit();\r\n    HttpServletRequest mockRequest = mock(HttpServletRequest.class);\r\n    HttpServletResponse mockResponse = mock(HttpServletResponse.class);\r\n    when(mockRequest.getCookies()).thenReturn(null);\r\n    Subject subject = newSubject(mockRequest, mockResponse);\r\n    assertNotNull(subject);\r\n    assertTrue(subject.getPrincipals() == null || subject.getPrincipals().isEmpty());\r\n    assertNull(subject.getSession(false));\r\n    assertFalse(subject.isAuthenticated());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\shiro\\web\\src\\test\\java\\org\\apache\\shiro\\web\\mgt\\DefaultWebSecurityManagerTest.java",
  "methodName" : "testGetSubjectByRequestSessionId",
  "sourceCode" : "@Test\r\nvoid testGetSubjectByRequestSessionId() {\r\n    shiroSessionModeInit();\r\n    HttpServletRequest mockRequest = mock(HttpServletRequest.class);\r\n    HttpServletResponse mockResponse = mock(HttpServletResponse.class);\r\n    Subject subject = newSubject(mockRequest, mockResponse);\r\n    Session session = subject.getSession();\r\n    Serializable sessionId = session.getId();\r\n    assertNotNull(sessionId);\r\n    mockRequest = mock(HttpServletRequest.class);\r\n    mockResponse = mock(HttpServletResponse.class);\r\n    //now simulate the cookie going with the request and the Subject should be acquired based on that:\r\n    Cookie[] cookies = new Cookie[] { new Cookie(ShiroHttpSession.DEFAULT_SESSION_ID_NAME, sessionId.toString()) };\r\n    when(mockRequest.getCookies()).thenReturn(cookies);\r\n    when(mockRequest.getParameter(any(String.class))).thenReturn(null);\r\n    subject = newSubject(mockRequest, mockResponse);\r\n    session = subject.getSession(false);\r\n    assertNotNull(session);\r\n    assertEquals(sessionId, session.getId());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\shiro\\web\\src\\test\\java\\org\\apache\\shiro\\web\\mgt\\DefaultWebSecurityManagerTest.java",
  "methodName" : "testBuildNonWebSubjectWithDefaultServletContainerSessionManager",
  "sourceCode" : "/**\r\n * Asserts fix for <a href=\"https://issues.apache.org/jira/browse/SHIRO-350\">SHIRO-350</a>.\r\n */\r\n@Test\r\nvoid testBuildNonWebSubjectWithDefaultServletContainerSessionManager() {\r\n    Ini ini = new Ini();\r\n    Ini.Section section = ini.addSection(IniRealm.USERS_SECTION_NAME);\r\n    section.put(\"user1\", \"user1\");\r\n    @SuppressWarnings(\"deprecation\")\r\n    WebIniSecurityManagerFactory factory = new WebIniSecurityManagerFactory(ini);\r\n    WebSecurityManager securityManager = (WebSecurityManager) factory.getInstance();\r\n    PrincipalCollection principals = new SimplePrincipalCollection(\"user1\", \"iniRealm\");\r\n    Subject subject = new Subject.Builder(securityManager).principals(principals).buildSubject();\r\n    assertNotNull(subject);\r\n    assertEquals(\"user1\", subject.getPrincipal());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\shiro\\web\\src\\test\\java\\org\\apache\\shiro\\web\\mgt\\NonIniWebSecurityManagerTest.java",
  "methodName" : "testLoginNonWebSubject",
  "sourceCode" : "/**\r\n * Test for SHIRO-646: Unable to login a DelegatingSubject on a DefaultWebSecurityManager.\r\n */\r\n@Test\r\nvoid testLoginNonWebSubject() {\r\n    Subject.Builder builder = new Subject.Builder(sm);\r\n    Subject subject = builder.buildSubject();\r\n    subject.login(new UsernamePasswordToken(\"lonestarr\", \"vespa\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\shiro\\web\\src\\test\\java\\org\\apache\\shiro\\web\\servlet\\OncePerRequestFilterTest.java",
  "methodName" : "testEnabled",
  "sourceCode" : "/**\r\n * Test asserting <a href=\"https://issues.apache.org/jira/browse/SHIRO-221\">SHIRO-221<a/>.\r\n */\r\n@SuppressWarnings({ \"JavaDoc\" })\r\n@Test\r\nvoid testEnabled() throws IOException, ServletException {\r\n    when(request.getAttribute(ATTR_NAME)).thenReturn(null);\r\n    filter.doFilter(request, response, chain);\r\n    assertEquals(1, filter.filterCount, \"Filter should have executed\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\shiro\\web\\src\\test\\java\\org\\apache\\shiro\\web\\servlet\\OncePerRequestFilterTest.java",
  "methodName" : "testDisabled",
  "sourceCode" : "/**\r\n * Test asserting <a href=\"https://issues.apache.org/jira/browse/SHIRO-221\">SHIRO-221<a/>.\r\n */\r\n@SuppressWarnings({ \"JavaDoc\" })\r\n@Test\r\nvoid testDisabled() throws IOException, ServletException {\r\n    //test disabled\r\n    filter.setEnabled(false);\r\n    when(request.getAttribute(ATTR_NAME)).thenReturn(null);\r\n    filter.doFilter(request, response, chain);\r\n    assertEquals(0, filter.filterCount, \"Filter should NOT have executed\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\shiro\\web\\src\\test\\java\\org\\apache\\shiro\\web\\servlet\\OncePerRequestFilterTest.java",
  "methodName" : "testFilterOncePerRequest",
  "sourceCode" : "@Test\r\nvoid testFilterOncePerRequest() throws IOException, ServletException {\r\n    filter.setFilterOncePerRequest(false);\r\n    when(request.getAttribute(ATTR_NAME)).thenReturn(null, true);\r\n    filter.doFilter(request, response, chain);\r\n    filter.doFilter(request, response, chain);\r\n    assertEquals(2, filter.filterCount, \"Filter should have executed twice\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\shiro\\web\\src\\test\\java\\org\\apache\\shiro\\web\\servlet\\ShiroHttpServletRequestTest.java",
  "methodName" : "testReGetSession",
  "sourceCode" : "/**\r\n * Test asserting <a href=\"https://issues.apache.org/jira/browse/SHIRO-637\">SHIRO-637<a/>.\r\n */\r\n@Test\r\npublic void testReGetSession() {\r\n    Session session1 = mock(Session.class);\r\n    Session session2 = mock(Session.class);\r\n    AtomicInteger counter = new AtomicInteger();\r\n    AtomicInteger counterFalse = new AtomicInteger();\r\n    mockSubject.logout();\r\n    when(mockSubject.getSession(true)).then(args -> {\r\n        if (counter.getAndIncrement() == 1) {\r\n            return session1;\r\n        }\r\n        return session2;\r\n    });\r\n    when(mockSubject.getSession(false)).then(args -> {\r\n        if (counterFalse.getAndIncrement() < 2) {\r\n            return session1;\r\n        }\r\n        return null;\r\n    });\r\n    assertNotNull(request.getSession(true));\r\n    assertNotNull(request.getSession(false));\r\n    mockSubject.logout();\r\n    assertNull(request.getSession(false));\r\n    assertNotNull(request.getSession(true));\r\n    verify(mockSubject, times(2)).getSession(true);\r\n    verify(mockSubject, atLeast(3)).getSession(false);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\shiro\\web\\src\\test\\java\\org\\apache\\shiro\\web\\servlet\\SimpleCookieTest.java",
  "methodName" : "testRemoveValue",
  "sourceCode" : "@Test\r\npublic //Verifies fix for JSEC-94\r\nvoid testRemoveValue() throws Exception {\r\n    //verify that the cookie header starts with what we want\r\n    //we can't verify the exact date format string that is appended, so we resort to just\r\n    //simple 'startsWith' matching, which is good enough:\r\n    String name = \"test\";\r\n    String value = \"deleteMe\";\r\n    String path = \"/somepath\";\r\n    String headerValue = this.cookie.buildHeaderValue(name, value, null, null, path, 0, SimpleCookie.DEFAULT_VERSION, false, false, null);\r\n    String expectedStart = new StringBuilder().append(name).append(SimpleCookie.NAME_VALUE_DELIMITER).append(value).append(SimpleCookie.ATTRIBUTE_DELIMITER).append(SimpleCookie.PATH_ATTRIBUTE_NAME).append(SimpleCookie.NAME_VALUE_DELIMITER).append(path).toString();\r\n    assertTrue(headerValue.startsWith(expectedStart));\r\n    expect(mockRequest.getContextPath()).andReturn(path).times(1);\r\n    //can't calculate the date format in the test\r\n    mockResponse.addHeader(eq(SimpleCookie.COOKIE_HEADER_NAME), isA(String.class));\r\n    replay(mockRequest);\r\n    replay(mockResponse);\r\n    this.cookie.removeFrom(mockRequest, mockResponse);\r\n    verify(mockRequest);\r\n    verify(mockResponse);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\shiro\\web\\src\\test\\java\\org\\apache\\shiro\\web\\servlet\\SimpleCookieTest.java",
  "methodName" : "testEmptyContextPath",
  "sourceCode" : "@Test\r\npublic /**\r\n * Verifies fix for <a href=\"http://issues.apache.org/jira/browse/JSEC-34\">JSEC-34</a> (1 of 2)\r\n */\r\nvoid testEmptyContextPath() throws Exception {\r\n    testRootContextPath(\"\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\shiro\\web\\src\\test\\java\\org\\apache\\shiro\\web\\servlet\\SimpleCookieTest.java",
  "methodName" : "testNullContextPath",
  "sourceCode" : "@Test\r\npublic /**\r\n * Verifies fix for <a href=\"http://issues.apache.org/jira/browse/JSEC-34\">JSEC-34</a> (2 of 2)\r\n */\r\nvoid testNullContextPath() throws Exception {\r\n    testRootContextPath(null);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\shiro\\web\\src\\test\\java\\org\\apache\\shiro\\web\\servlet\\SimpleCookieTest.java",
  "methodName" : "testReadValueInvalidPath",
  "sourceCode" : "@Test\r\npublic void testReadValueInvalidPath() throws Exception {\r\n    expect(mockRequest.getRequestURI()).andStubReturn(\"/foo/index.jsp\");\r\n    expect(mockRequest.getCookies()).andStubReturn(new javax.servlet.http.Cookie[] { new javax.servlet.http.Cookie(this.cookie.getName(), \"value\") });\r\n    replay(mockRequest);\r\n    replay(mockResponse);\r\n    this.cookie.setPath(\"/bar/index.jsp\");\r\n    assertEquals(null, this.cookie.readValue(mockRequest, mockResponse));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\shiro\\web\\src\\test\\java\\org\\apache\\shiro\\web\\servlet\\SimpleCookieTest.java",
  "methodName" : "testReadValuePrefixPath",
  "sourceCode" : "@Test\r\npublic void testReadValuePrefixPath() throws Exception {\r\n    expect(mockRequest.getRequestURI()).andStubReturn(\"/bar/index.jsp\");\r\n    expect(mockRequest.getCookies()).andStubReturn(new javax.servlet.http.Cookie[] { new javax.servlet.http.Cookie(this.cookie.getName(), \"value\") });\r\n    replay(mockRequest);\r\n    replay(mockResponse);\r\n    this.cookie.setPath(\"/bar\");\r\n    assertEquals(\"value\", this.cookie.readValue(mockRequest, mockResponse));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\shiro\\web\\src\\test\\java\\org\\apache\\shiro\\web\\servlet\\SimpleCookieTest.java",
  "methodName" : "testReadValueInvalidPrefixPath",
  "sourceCode" : "@Test\r\npublic void testReadValueInvalidPrefixPath() throws Exception {\r\n    expect(mockRequest.getRequestURI()).andStubReturn(\"/foobar/index.jsp\");\r\n    expect(mockRequest.getCookies()).andStubReturn(new javax.servlet.http.Cookie[] { new javax.servlet.http.Cookie(this.cookie.getName(), \"value\") });\r\n    replay(mockRequest);\r\n    replay(mockResponse);\r\n    this.cookie.setPath(\"/foo\");\r\n    assertNull(this.cookie.readValue(mockRequest, mockResponse));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\shiro\\web\\src\\test\\java\\org\\apache\\shiro\\web\\session\\HttpServletSessionTest.java",
  "methodName" : "testLongTimeout",
  "sourceCode" : "/*\r\n     * Shiro-421\r\n     * Tests that the conversion of a httpSession timeout interval from seconds to milliseconds doesn't overflow.\r\n     * @since 1.3\r\n     */\r\n@Test\r\nvoid testLongTimeout() throws Exception {\r\n    // 30 days.\r\n    final int expectedTimeoutInSeconds = 30 * 24 * 60 * 60;\r\n    final long expectedLongValue = expectedTimeoutInSeconds * 1000L;\r\n    Capture<Integer> capturedInt = Capture.newInstance();\r\n    // use a capture to make sure the setter is doing the right thing.\r\n    mockSession.setMaxInactiveInterval(captureInt(capturedInt));\r\n    expect(mockSession.getMaxInactiveInterval()).andReturn(expectedTimeoutInSeconds);\r\n    replay(mockSession);\r\n    HttpServletSession servletSession = new HttpServletSession(mockSession, null);\r\n    servletSession.setTimeout(expectedLongValue);\r\n    long timeoutInMilliseconds = servletSession.getTimeout();\r\n    assertEquals(expectedLongValue, timeoutInMilliseconds);\r\n    assertEquals(expectedTimeoutInSeconds, capturedInt.getValue().intValue());\r\n}",
  "annotations" : [ "Test" ]
} ]