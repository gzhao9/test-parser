[ {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\BasicDynaBeanTest.java",
  "methodName" : "testGetDescriptorArguments",
  "sourceCode" : "/**\r\n * Corner cases on getDynaProperty invalid arguments.\r\n */\r\n@Test\r\nvoid testGetDescriptorArguments() {\r\n    assertNull(bean.getDynaClass().getDynaProperty(\"unknown\"));\r\n    assertThrows(NullPointerException.class, () -> bean.getDynaClass().getDynaProperty(null));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\BasicDynaBeanTest.java",
  "methodName" : "testGetDescriptorBoolean",
  "sourceCode" : "/**\r\n * Positive getDynaProperty on property {@code booleanProperty}.\r\n */\r\n@Test\r\nvoid testGetDescriptorBoolean() {\r\n    testGetDescriptorBase(\"booleanProperty\", Boolean.TYPE);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\BasicDynaBeanTest.java",
  "methodName" : "testGetDescriptorDouble",
  "sourceCode" : "/**\r\n * Positive getDynaProperty on property {@code doubleProperty}.\r\n */\r\n@Test\r\nvoid testGetDescriptorDouble() {\r\n    testGetDescriptorBase(\"doubleProperty\", Double.TYPE);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\BasicDynaBeanTest.java",
  "methodName" : "testGetDescriptorFloat",
  "sourceCode" : "/**\r\n * Positive getDynaProperty on property {@code floatProperty}.\r\n */\r\n@Test\r\nvoid testGetDescriptorFloat() {\r\n    testGetDescriptorBase(\"floatProperty\", Float.TYPE);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\BasicDynaBeanTest.java",
  "methodName" : "testGetDescriptorInt",
  "sourceCode" : "/**\r\n * Positive getDynaProperty on property {@code intProperty}.\r\n */\r\n@Test\r\nvoid testGetDescriptorInt() {\r\n    testGetDescriptorBase(\"intProperty\", Integer.TYPE);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\BasicDynaBeanTest.java",
  "methodName" : "testGetDescriptorLong",
  "sourceCode" : "/**\r\n * Positive getDynaProperty on property {@code longProperty}.\r\n */\r\n@Test\r\nvoid testGetDescriptorLong() {\r\n    testGetDescriptorBase(\"longProperty\", Long.TYPE);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\BasicDynaBeanTest.java",
  "methodName" : "testGetDescriptors",
  "sourceCode" : "/**\r\n * Positive test for getDynaProperties(). Each property name listed in {@code properties} should be returned exactly once.\r\n */\r\n@Test\r\nvoid testGetDescriptors() {\r\n    final DynaProperty[] pd = bean.getDynaClass().getDynaProperties();\r\n    assertNotNull(pd, \"Got descriptors\");\r\n    final int[] count = new int[properties.length];\r\n    for (final DynaProperty element : pd) {\r\n        final String name = element.getName();\r\n        for (int j = 0; j < properties.length; j++) {\r\n            if (name.equals(properties[j])) {\r\n                count[j]++;\r\n            }\r\n        }\r\n    }\r\n    for (int j = 0; j < properties.length; j++) {\r\n        if (count[j] < 0) {\r\n            fail(\"Missing property \" + properties[j]);\r\n        } else if (count[j] > 1) {\r\n            fail(\"Duplicate property \" + properties[j]);\r\n        }\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\BasicDynaBeanTest.java",
  "methodName" : "testGetDescriptorSecond",
  "sourceCode" : "/**\r\n * Positive getDynaProperty on property {@code booleanSecond} that uses an \"is\" method as the getter.\r\n */\r\n@Test\r\nvoid testGetDescriptorSecond() {\r\n    testGetDescriptorBase(\"booleanSecond\", Boolean.TYPE);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\BasicDynaBeanTest.java",
  "methodName" : "testGetDescriptorShort",
  "sourceCode" : "/**\r\n * Positive getDynaProperty on property {@code shortProperty}.\r\n */\r\n@Test\r\nvoid testGetDescriptorShort() {\r\n    testGetDescriptorBase(\"shortProperty\", Short.TYPE);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\BasicDynaBeanTest.java",
  "methodName" : "testGetDescriptorString",
  "sourceCode" : "/**\r\n * Positive getDynaProperty on property {@code stringProperty}.\r\n */\r\n@Test\r\nvoid testGetDescriptorString() {\r\n    testGetDescriptorBase(\"stringProperty\", String.class);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\BasicDynaBeanTest.java",
  "methodName" : "testGetIndexedArguments",
  "sourceCode" : "/**\r\n * Corner cases on getIndexedProperty invalid arguments.\r\n */\r\n@Test\r\nvoid testGetIndexedArguments() {\r\n    assertThrows(IndexOutOfBoundsException.class, () -> bean.get(\"intArray\", -1));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\BasicDynaBeanTest.java",
  "methodName" : "testGetIndexedValues",
  "sourceCode" : "/**\r\n * Positive and negative tests on getIndexedProperty valid arguments.\r\n */\r\n@Test\r\nvoid testGetIndexedValues() {\r\n    Object value = null;\r\n    for (int i = 0; i < 5; i++) {\r\n        value = bean.get(\"intArray\", i);\r\n        assertNotNull(value, \"intArray returned value \" + i);\r\n        assertInstanceOf(Integer.class, value, \"intArray returned Integer \" + i);\r\n        assertEquals(i * 10, ((Integer) value).intValue(), \"intArray returned correct \" + i);\r\n        value = bean.get(\"intIndexed\", i);\r\n        assertNotNull(value, \"intIndexed returned value \" + i);\r\n        assertInstanceOf(Integer.class, value, \"intIndexed returned Integer \" + i);\r\n        assertEquals(i * 10, ((Integer) value).intValue(), \"intIndexed returned correct \" + i);\r\n        value = bean.get(\"listIndexed\", i);\r\n        assertNotNull(value, \"listIndexed returned value \" + i);\r\n        assertInstanceOf(String.class, value, \"list returned String \" + i);\r\n        assertEquals(\"String \" + i, (String) value, \"listIndexed returned correct \" + i);\r\n        value = bean.get(\"stringArray\", i);\r\n        assertNotNull(value, \"stringArray returned value \" + i);\r\n        assertInstanceOf(String.class, value, \"stringArray returned String \" + i);\r\n        assertEquals(\"String \" + i, (String) value, \"stringArray returned correct \" + i);\r\n        value = bean.get(\"stringIndexed\", i);\r\n        assertNotNull(value, \"stringIndexed returned value \" + i);\r\n        assertInstanceOf(String.class, value, \"stringIndexed returned String \" + i);\r\n        assertEquals(\"String \" + i, (String) value, \"stringIndexed returned correct \" + i);\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\BasicDynaBeanTest.java",
  "methodName" : "testGetMappedArguments",
  "sourceCode" : "/**\r\n * Corner cases on getMappedProperty invalid arguments.\r\n */\r\n@Test\r\nvoid testGetMappedArguments() {\r\n    final Object value = bean.get(\"mappedProperty\", \"unknown\");\r\n    assertNull(value, \"Should not return a value\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\BasicDynaBeanTest.java",
  "methodName" : "testGetMappedValues",
  "sourceCode" : "/**\r\n * Positive and negative tests on getMappedProperty valid arguments.\r\n */\r\n@Test\r\nvoid testGetMappedValues() {\r\n    Object value = null;\r\n    value = bean.get(\"mappedProperty\", \"First Key\");\r\n    assertEquals(\"First Value\", value, \"Can find first value\");\r\n    value = bean.get(\"mappedProperty\", \"Second Key\");\r\n    assertEquals(\"Second Value\", value, \"Can find second value\");\r\n    value = bean.get(\"mappedProperty\", \"Third Key\");\r\n    assertNull(value, \"Can not find third value\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\BasicDynaBeanTest.java",
  "methodName" : "testGetSimpleArguments",
  "sourceCode" : "/**\r\n * Corner cases on getSimpleProperty invalid arguments.\r\n */\r\n@Test\r\nvoid testGetSimpleArguments() {\r\n    assertThrows(NullPointerException.class, () -> bean.get(null));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\BasicDynaBeanTest.java",
  "methodName" : "testGetSimpleBoolean",
  "sourceCode" : "/**\r\n * Test getSimpleProperty on a boolean property.\r\n */\r\n@Test\r\nvoid testGetSimpleBoolean() {\r\n    final Object value = bean.get(\"booleanProperty\");\r\n    assertNotNull(value, \"Got a value\");\r\n    assertInstanceOf(Boolean.class, value, \"Got correct type\");\r\n    assertTrue((Boolean) value, \"Got correct value\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\BasicDynaBeanTest.java",
  "methodName" : "testGetSimpleDouble",
  "sourceCode" : "/**\r\n * Test getSimpleProperty on a double property.\r\n */\r\n@Test\r\nvoid testGetSimpleDouble() {\r\n    final Object value = bean.get(\"doubleProperty\");\r\n    assertNotNull(value, \"Got a value\");\r\n    assertInstanceOf(Double.class, value, \"Got correct type\");\r\n    assertEquals(((Double) value).doubleValue(), 321.0, 0.005, \"Got correct value\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\BasicDynaBeanTest.java",
  "methodName" : "testGetSimpleFloat",
  "sourceCode" : "/**\r\n * Test getSimpleProperty on a float property.\r\n */\r\n@Test\r\nvoid testGetSimpleFloat() {\r\n    final Object value = bean.get(\"floatProperty\");\r\n    assertNotNull(value, \"Got a value\");\r\n    assertInstanceOf(Float.class, value, \"Got correct type\");\r\n    assertEquals(((Float) value).floatValue(), (float) 123.0, (float) 0.005, \"Got correct value\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\BasicDynaBeanTest.java",
  "methodName" : "testGetSimpleInt",
  "sourceCode" : "/**\r\n * Test getSimpleProperty on a int property.\r\n */\r\n@Test\r\nvoid testGetSimpleInt() {\r\n    final Object value = bean.get(\"intProperty\");\r\n    assertNotNull(value, \"Got a value\");\r\n    assertInstanceOf(Integer.class, value, \"Got correct type\");\r\n    assertEquals(((Integer) value).intValue(), 123, \"Got correct value\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\BasicDynaBeanTest.java",
  "methodName" : "testGetSimpleLong",
  "sourceCode" : "/**\r\n * Test getSimpleProperty on a long property.\r\n */\r\n@Test\r\nvoid testGetSimpleLong() {\r\n    final Object value = bean.get(\"longProperty\");\r\n    assertNotNull(value, \"Got a value\");\r\n    assertInstanceOf(Long.class, value, \"Got correct type\");\r\n    assertEquals(((Long) value).longValue(), 321, \"Got correct value\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\BasicDynaBeanTest.java",
  "methodName" : "testGetSimpleShort",
  "sourceCode" : "/**\r\n * Test getSimpleProperty on a short property.\r\n */\r\n@Test\r\nvoid testGetSimpleShort() {\r\n    final Object value = bean.get(\"shortProperty\");\r\n    assertNotNull(value, \"Got a value\");\r\n    assertInstanceOf(Short.class, value, \"Got correct type\");\r\n    assertEquals(((Short) value).shortValue(), (short) 987, \"Got correct value\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\BasicDynaBeanTest.java",
  "methodName" : "testGetSimpleString",
  "sourceCode" : "/**\r\n * Test getSimpleProperty on a String property.\r\n */\r\n@Test\r\nvoid testGetSimpleString() {\r\n    final Object value = bean.get(\"stringProperty\");\r\n    assertNotNull(value, \"Got a value\");\r\n    assertInstanceOf(String.class, value, \"Got correct type\");\r\n    assertEquals((String) value, \"This is a string\", \"Got correct value\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\BasicDynaBeanTest.java",
  "methodName" : "testMappedContains",
  "sourceCode" : "/**\r\n * Test {@code contains()} method for mapped properties.\r\n */\r\n@Test\r\nvoid testMappedContains() {\r\n    assertTrue(bean.contains(\"mappedProperty\", \"First Key\"), \"Can see first key\");\r\n    assertFalse(bean.contains(\"mappedProperty\", \"Unknown Key\"), \"Can not see unknown key\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\BasicDynaBeanTest.java",
  "methodName" : "testMappedRemove",
  "sourceCode" : "/**\r\n * Test {@code remove()} method for mapped properties.\r\n */\r\n@Test\r\nvoid testMappedRemove() {\r\n    assertTrue(bean.contains(\"mappedProperty\", \"First Key\"), \"Can see first key\");\r\n    bean.remove(\"mappedProperty\", \"First Key\");\r\n    assertFalse(bean.contains(\"mappedProperty\", \"First Key\"), \"Can not see first key\");\r\n    assertFalse(bean.contains(\"mappedProperty\", \"Unknown Key\"), \"Can not see unknown key\");\r\n    bean.remove(\"mappedProperty\", \"Unknown Key\");\r\n    assertFalse(bean.contains(\"mappedProperty\", \"Unknown Key\"), \"Can not see unknown key\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\BasicDynaBeanTest.java",
  "methodName" : "testNotSerializableException",
  "sourceCode" : "/**\r\n * Test serialization and deserialization.\r\n */\r\n@Test\r\nvoid testNotSerializableException() throws Exception {\r\n    // Serialize the test bean\r\n    final ByteArrayOutputStream baos = new ByteArrayOutputStream();\r\n    try (ObjectOutputStream oos = new ObjectOutputStream(baos)) {\r\n        assertThrows(NotSerializableException.class, () -> oos.writeObject(bean));\r\n        oos.flush();\r\n    }\r\n    // Deserialize the test bean\r\n    bean = null;\r\n    try (ByteArrayInputStream bais = new ByteArrayInputStream(baos.toByteArray())) {\r\n        final ObjectInputStream ois = new ObjectInputStream(bais);\r\n        assertThrows(WriteAbortedException.class, () -> bean = (DynaBean) ois.readObject());\r\n    }\r\n    assertNull(bean);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\BasicDynaBeanTest.java",
  "methodName" : "testSetIndexedArguments",
  "sourceCode" : "/**\r\n * Corner cases on setIndexedProperty invalid arguments.\r\n */\r\n@Test\r\nvoid testSetIndexedArguments() {\r\n    assertThrows(IndexOutOfBoundsException.class, () -> bean.set(\"intArray\", -1, Integer.valueOf(0)));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\BasicDynaBeanTest.java",
  "methodName" : "testSetIndexedValues",
  "sourceCode" : "/**\r\n * Positive and negative tests on setIndexedProperty valid arguments.\r\n */\r\n@Test\r\nvoid testSetIndexedValues() {\r\n    Object value = null;\r\n    bean.set(\"intArray\", 0, Integer.valueOf(1));\r\n    value = bean.get(\"intArray\", 0);\r\n    assertNotNull(value, \"Returned new value 0\");\r\n    assertInstanceOf(Integer.class, value, \"Returned Integer new value 0\");\r\n    assertEquals(1, ((Integer) value).intValue(), \"Returned correct new value 0\");\r\n    bean.set(\"intIndexed\", 1, Integer.valueOf(11));\r\n    value = bean.get(\"intIndexed\", 1);\r\n    assertNotNull(value, \"Returned new value 1\");\r\n    assertInstanceOf(Integer.class, value, \"Returned Integer new value 1\");\r\n    assertEquals(11, ((Integer) value).intValue(), \"Returned correct new value 1\");\r\n    bean.set(\"listIndexed\", 2, \"New Value 2\");\r\n    value = bean.get(\"listIndexed\", 2);\r\n    assertNotNull(value, \"Returned new value 2\");\r\n    assertInstanceOf(String.class, value, \"Returned String new value 2\");\r\n    assertEquals(\"New Value 2\", (String) value, \"Returned correct new value 2\");\r\n    bean.set(\"stringArray\", 3, \"New Value 3\");\r\n    value = bean.get(\"stringArray\", 3);\r\n    assertNotNull(value, \"Returned new value 3\");\r\n    assertInstanceOf(String.class, value, \"Returned String new value 3\");\r\n    assertEquals(\"New Value 3\", (String) value, \"Returned correct new value 3\");\r\n    bean.set(\"stringIndexed\", 4, \"New Value 4\");\r\n    value = bean.get(\"stringIndexed\", 4);\r\n    assertNotNull(value, \"Returned new value 4\");\r\n    assertInstanceOf(String.class, value, \"Returned String new value 4\");\r\n    assertEquals(\"New Value 4\", (String) value, \"Returned correct new value 4\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\BasicDynaBeanTest.java",
  "methodName" : "testSetMappedValues",
  "sourceCode" : "/**\r\n * Positive and negative tests on setMappedProperty valid arguments.\r\n */\r\n@Test\r\nvoid testSetMappedValues() {\r\n    bean.set(\"mappedProperty\", \"First Key\", \"New First Value\");\r\n    assertEquals(\"New First Value\", (String) bean.get(\"mappedProperty\", \"First Key\"), \"Can replace old value\");\r\n    bean.set(\"mappedProperty\", \"Fourth Key\", \"Fourth Value\");\r\n    assertEquals(\"Fourth Value\", (String) bean.get(\"mappedProperty\", \"Fourth Key\"), \"Can set new value\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\BasicDynaBeanTest.java",
  "methodName" : "testSetSimpleBoolean",
  "sourceCode" : "/**\r\n * Test setSimpleProperty on a boolean property.\r\n */\r\n@Test\r\nvoid testSetSimpleBoolean() {\r\n    final boolean oldValue = ((Boolean) bean.get(\"booleanProperty\")).booleanValue();\r\n    final boolean newValue = !oldValue;\r\n    bean.set(\"booleanProperty\", Boolean.valueOf(newValue));\r\n    assertEquals(newValue, ((Boolean) bean.get(\"booleanProperty\")).booleanValue(), \"Matched new value\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\BasicDynaBeanTest.java",
  "methodName" : "testSetSimpleDouble",
  "sourceCode" : "/**\r\n * Test setSimpleProperty on a double property.\r\n */\r\n@Test\r\nvoid testSetSimpleDouble() {\r\n    final double oldValue = ((Double) bean.get(\"doubleProperty\")).doubleValue();\r\n    final double newValue = oldValue + 1.0;\r\n    bean.set(\"doubleProperty\", Double.valueOf(newValue));\r\n    assertEquals(newValue, ((Double) bean.get(\"doubleProperty\")).doubleValue(), 0.005, \"Matched new value\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\BasicDynaBeanTest.java",
  "methodName" : "testSetSimpleFloat",
  "sourceCode" : "/**\r\n * Test setSimpleProperty on a float property.\r\n */\r\n@Test\r\nvoid testSetSimpleFloat() {\r\n    final float oldValue = ((Float) bean.get(\"floatProperty\")).floatValue();\r\n    final float newValue = oldValue + (float) 1.0;\r\n    bean.set(\"floatProperty\", Float.valueOf(newValue));\r\n    assertEquals(newValue, ((Float) bean.get(\"floatProperty\")).floatValue(), (float) 0.005, \"Matched new value\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\BasicDynaBeanTest.java",
  "methodName" : "testSetSimpleInt",
  "sourceCode" : "/**\r\n * Test setSimpleProperty on a int property.\r\n */\r\n@Test\r\nvoid testSetSimpleInt() {\r\n    final int oldValue = ((Integer) bean.get(\"intProperty\")).intValue();\r\n    final int newValue = oldValue + 1;\r\n    bean.set(\"intProperty\", Integer.valueOf(newValue));\r\n    assertEquals(newValue, ((Integer) bean.get(\"intProperty\")).intValue(), \"Matched new value\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\BasicDynaBeanTest.java",
  "methodName" : "testSetSimpleLong",
  "sourceCode" : "/**\r\n * Test setSimpleProperty on a long property.\r\n */\r\n@Test\r\nvoid testSetSimpleLong() {\r\n    final long oldValue = ((Long) bean.get(\"longProperty\")).longValue();\r\n    final long newValue = oldValue + 1;\r\n    bean.set(\"longProperty\", Long.valueOf(newValue));\r\n    assertEquals(newValue, ((Long) bean.get(\"longProperty\")).longValue(), \"Matched new value\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\BasicDynaBeanTest.java",
  "methodName" : "testSetSimpleShort",
  "sourceCode" : "/**\r\n * Test setSimpleProperty on a short property.\r\n */\r\n@Test\r\nvoid testSetSimpleShort() {\r\n    final short oldValue = ((Short) bean.get(\"shortProperty\")).shortValue();\r\n    final short newValue = (short) (oldValue + 1);\r\n    bean.set(\"shortProperty\", Short.valueOf(newValue));\r\n    assertEquals(newValue, ((Short) bean.get(\"shortProperty\")).shortValue(), \"Matched new value\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\BasicDynaBeanTest.java",
  "methodName" : "testSetSimpleString",
  "sourceCode" : "/**\r\n * Test setSimpleProperty on a String property.\r\n */\r\n@Test\r\nvoid testSetSimpleString() {\r\n    final String oldValue = (String) bean.get(\"stringProperty\");\r\n    final String newValue = oldValue + \" Extra Value\";\r\n    bean.set(\"stringProperty\", newValue);\r\n    assertEquals(newValue, (String) bean.get(\"stringProperty\"), \"Matched new value\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\BeanComparatorTest.java",
  "methodName" : "testCompareBeanAgainstSelf",
  "sourceCode" : "/**\r\n * Tests comparing one bean against itself.\r\n */\r\n@Test\r\nvoid testCompareBeanAgainstSelf() {\r\n    final BeanComparator<AlphaBean, String> beanComparator = new BeanComparator<>(\"name\");\r\n    final int result = beanComparator.compare(alphaBean1, alphaBean1);\r\n    assertEquals(0, result, () -> \"Comparator did not sort properly.  Result:\" + result);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\BeanComparatorTest.java",
  "methodName" : "testCompareIdentical",
  "sourceCode" : "/**\r\n * Tests comparing two beans via their name using the default Comparator where they have the same value.\r\n */\r\n@Test\r\nvoid testCompareIdentical() {\r\n    alphaBean1 = new AlphaBean(\"alphabean\");\r\n    alphaBean2 = new AlphaBean(\"alphabean\");\r\n    final BeanComparator<AlphaBean, String> beanComparator = new BeanComparator<>(\"name\");\r\n    final int result = beanComparator.compare(alphaBean1, alphaBean2);\r\n    assertEquals(0, result, () -> \"Comparator did not sort properly.  Result:\" + result);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\BeanComparatorTest.java",
  "methodName" : "testCompareOnBooleanProperty",
  "sourceCode" : "/**\r\n * Tests comparing two beans on a boolean property, which is not possible.\r\n */\r\n@Test\r\nvoid testCompareOnBooleanProperty() {\r\n    try {\r\n        final TestBean testBeanA = new TestBean();\r\n        final TestBean testBeanB = new TestBean();\r\n        testBeanA.setBooleanProperty(true);\r\n        testBeanB.setBooleanProperty(false);\r\n        final BeanComparator<TestBean, String> beanComparator = new BeanComparator<>(\"booleanProperty\");\r\n        beanComparator.compare(testBeanA, testBeanB);\r\n        // **** java.lang.Boolean implements Comparable from JDK 1.5 onwards\r\n        // so this test no longer fails\r\n        // fail(\"BeanComparator should throw an exception when comparing two booleans.\");\r\n    } catch (final ClassCastException cce) {\r\n        // Expected result\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\BeanComparatorTest.java",
  "methodName" : "testCompareOnMissingProperty",
  "sourceCode" : "/**\r\n * Tests comparing two beans who don't have a property\r\n */\r\n@Test\r\nvoid testCompareOnMissingProperty() {\r\n    final BeanComparator<AlphaBean, String> beanComparator = new BeanComparator<>(\"bogusName\");\r\n    final Exception e = assertThrows(RuntimeException.class, () -> beanComparator.compare(alphaBean2, alphaBean1));\r\n    assertTrue(e.toString().contains(\"Unknown property\"), () -> \"Wrong exception was thrown: \" + e);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\BeanComparatorTest.java",
  "methodName" : "testCompareWithNulls",
  "sourceCode" : "/**\r\n * Tests comparing two beans via their name using the default Comparator, but with one of the beans being null.\r\n */\r\n@Test\r\nvoid testCompareWithNulls() {\r\n    final BeanComparator<AlphaBean, String> beanComparator = new BeanComparator<>(\"name\");\r\n    assertThrows(NullPointerException.class, () -> beanComparator.compare(alphaBean2, null));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\BeanComparatorTest.java",
  "methodName" : "testSetProperty",
  "sourceCode" : "/**\r\n * Tests comparing two beans on a boolean property, then changing the property and testing/\r\n */\r\n@Test\r\nvoid testSetProperty() {\r\n    final TestBean testBeanA = new TestBean();\r\n    final TestBean testBeanB = new TestBean();\r\n    testBeanA.setDoubleProperty(5.5);\r\n    testBeanB.setDoubleProperty(1.0);\r\n    final BeanComparator<TestBean, String> beanComparator = new BeanComparator<>(\"doubleProperty\");\r\n    final int result1 = beanComparator.compare(testBeanA, testBeanB);\r\n    assertEquals(1, result1, () -> \"Comparator did not sort properly.  Result:\" + result1);\r\n    testBeanA.setStringProperty(\"string 1\");\r\n    testBeanB.setStringProperty(\"string 2\");\r\n    beanComparator.setProperty(\"stringProperty\");\r\n    final int result2 = beanComparator.compare(testBeanA, testBeanB);\r\n    assertEquals(-1, result2, () -> \"Comparator did not sort properly.  Result:\" + result2);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\BeanComparatorTest.java",
  "methodName" : "testSimpleCompare",
  "sourceCode" : "/**\r\n * Tests comparing two beans via their name using the default Comparator\r\n */\r\n@Test\r\nvoid testSimpleCompare() {\r\n    final BeanComparator<AlphaBean, String> beanComparator = new BeanComparator<>(\"name\");\r\n    final int result = beanComparator.compare(alphaBean1, alphaBean2);\r\n    assertEquals(-1, result, () -> \"Comparator did not sort properly.  Result:\" + result);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\BeanComparatorTest.java",
  "methodName" : "testSimpleCompareInverse",
  "sourceCode" : "/**\r\n * Tests comparing two beans via their name using the default Comparator, but the inverse\r\n */\r\n@Test\r\nvoid testSimpleCompareInverse() {\r\n    final BeanComparator<AlphaBean, String> beanComparator = new BeanComparator<>(\"name\");\r\n    final int result = beanComparator.compare(alphaBean2, alphaBean1);\r\n    assertEquals(1, result, () -> \"Comparator did not sort properly.  Result:\" + result);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\BeanificationTest.java",
  "methodName" : "testBeanUtilsBeanSetInstance",
  "sourceCode" : "/**\r\n * Tests whether different threads can set BeanUtils instances correctly\r\n */\r\n@Test\r\nvoid testBeanUtilsBeanSetInstance() throws Exception {\r\n    final class SetInstanceTesterThread extends Thread {\r\n\r\n        private final Signal signal;\r\n\r\n        private final BeanUtilsBean bean;\r\n\r\n        SetInstanceTesterThread(final Signal signal, final BeanUtilsBean bean) {\r\n            this.signal = signal;\r\n            this.bean = bean;\r\n        }\r\n\r\n        @Override\r\n        public void run() {\r\n            BeanUtilsBean.setInstance(bean);\r\n            signal.setSignal(21);\r\n            signal.setBean(BeanUtilsBean.getInstance());\r\n        }\r\n\r\n        @Override\r\n        public String toString() {\r\n            return \"SetInstanceTesterThread\";\r\n        }\r\n    }\r\n    final Signal signal = new Signal();\r\n    signal.setSignal(1);\r\n    final BeanUtilsBean beanOne = new BeanUtilsBean();\r\n    final BeanUtilsBean beanTwo = new BeanUtilsBean();\r\n    final SetInstanceTesterThread thread = new SetInstanceTesterThread(signal, beanTwo);\r\n    thread.setContextClassLoader(new TestClassLoader());\r\n    BeanUtilsBean.setInstance(beanOne);\r\n    assertEquals(beanOne, BeanUtilsBean.getInstance(), \"Start thread gets right instance\");\r\n    thread.start();\r\n    thread.join();\r\n    assertEquals(21, signal.getSignal(), \"Signal not set by test thread\");\r\n    assertEquals(beanOne, BeanUtilsBean.getInstance(), \"Second thread preserves value\");\r\n    assertEquals(beanTwo, signal.getBean(), \"Second thread gets value it set\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\BeanificationTest.java",
  "methodName" : "testContextClassloaderIndependence",
  "sourceCode" : "/**\r\n * Tests whether calls are independent for different class loaders\r\n */\r\n@Test\r\nvoid testContextClassloaderIndependence() throws Exception {\r\n    final class TestIndependenceThread extends Thread {\r\n\r\n        private final Signal signal;\r\n\r\n        private final PrimitiveBean bean;\r\n\r\n        TestIndependenceThread(final Signal signal, final PrimitiveBean bean) {\r\n            this.signal = signal;\r\n            this.bean = bean;\r\n        }\r\n\r\n        @Override\r\n        public void run() {\r\n            try {\r\n                signal.setSignal(3);\r\n                final Converter c = (type, value) -> ConvertUtils.primitiveToWrapper(Integer.TYPE).cast(new Integer(9));\r\n                ConvertUtils.register(c, Integer.TYPE);\r\n                BeanUtils.setProperty(bean, \"int\", new Integer(1));\r\n            } catch (final Exception e) {\r\n                e.printStackTrace();\r\n                signal.setException(e);\r\n            }\r\n        }\r\n\r\n        @Override\r\n        public String toString() {\r\n            return \"TestIndependenceThread\";\r\n        }\r\n    }\r\n    final PrimitiveBean bean = new PrimitiveBean();\r\n    BeanUtils.setProperty(bean, \"int\", new Integer(1));\r\n    assertEquals(1, bean.getInt(), \"Wrong property value (1)\");\r\n    final Converter c = (type, value) -> ConvertUtils.primitiveToWrapper(type).cast(new Integer(5));\r\n    ConvertUtils.register(c, Integer.TYPE);\r\n    BeanUtils.setProperty(bean, \"int\", new Integer(1));\r\n    assertEquals(5, bean.getInt(), \"Wrong property value(2)\");\r\n    final Signal signal = new Signal();\r\n    signal.setSignal(1);\r\n    final TestIndependenceThread thread = new TestIndependenceThread(signal, bean);\r\n    thread.setContextClassLoader(new TestClassLoader());\r\n    thread.start();\r\n    thread.join();\r\n    assertNull(signal.getException(), \"Exception thrown by test thread:\" + signal.getException());\r\n    assertEquals(3, signal.getSignal(), \"Signal not set by test thread\");\r\n    assertEquals(9, bean.getInt(), \"Wrong property value(3)\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\BeanificationTest.java",
  "methodName" : "testContextClassLoaderLocal",
  "sourceCode" : "/**\r\n * Tests whether difference instances are loaded by different context class loaders.\r\n */\r\n@Test\r\nvoid testContextClassLoaderLocal() throws Exception {\r\n    final class CCLLTesterThread extends Thread {\r\n\r\n        private final Signal signal;\r\n\r\n        private final ContextClassLoaderLocal<Integer> ccll;\r\n\r\n        CCLLTesterThread(final Signal signal, final ContextClassLoaderLocal<Integer> ccll) {\r\n            this.signal = signal;\r\n            this.ccll = ccll;\r\n        }\r\n\r\n        @Override\r\n        public void run() {\r\n            ccll.set(new Integer(1789));\r\n            signal.setSignal(2);\r\n            signal.setMarkerObject(ccll.get());\r\n        }\r\n\r\n        @Override\r\n        public String toString() {\r\n            return \"CCLLTesterThread\";\r\n        }\r\n    }\r\n    final ContextClassLoaderLocal<Integer> ccll = new ContextClassLoaderLocal<>();\r\n    ccll.set(new Integer(1776));\r\n    assertEquals(new Integer(1776), ccll.get(), \"Start thread sets value\");\r\n    final Signal signal = new Signal();\r\n    signal.setSignal(1);\r\n    final CCLLTesterThread thread = new CCLLTesterThread(signal, ccll);\r\n    thread.setContextClassLoader(new TestClassLoader());\r\n    thread.start();\r\n    thread.join();\r\n    assertEquals(2, signal.getSignal(), \"Signal not set by test thread\");\r\n    assertEquals(new Integer(1776), ccll.get(), \"Second thread preserves value\");\r\n    assertEquals(new Integer(1789), signal.getMarkerObject(), \"Second thread gets value it set\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\BeanificationTest.java",
  "methodName" : "testContextClassLoaderUnset",
  "sourceCode" : "/**\r\n * Tests whether the unset method works\r\n */\r\n@Test\r\nvoid testContextClassLoaderUnset() throws Exception {\r\n    final BeanUtilsBean beanOne = new BeanUtilsBean();\r\n    final ContextClassLoaderLocal<BeanUtilsBean> ccll = new ContextClassLoaderLocal<>();\r\n    ccll.set(beanOne);\r\n    assertEquals(beanOne, ccll.get(), \"Start thread gets right instance\");\r\n    ccll.unset();\r\n    assertNotEquals(beanOne, ccll.get(), \"Unset works\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\BeanificationTest.java",
  "methodName" : "testGetByContextClassLoader",
  "sourceCode" : "/**\r\n * Tests whether difference instances are loaded by different context class loaders.\r\n */\r\n@Test\r\nvoid testGetByContextClassLoader() throws Exception {\r\n    final class GetBeanUtilsBeanThread extends Thread {\r\n\r\n        private final Signal signal;\r\n\r\n        GetBeanUtilsBeanThread(final Signal signal) {\r\n            this.signal = signal;\r\n        }\r\n\r\n        @Override\r\n        public void run() {\r\n            signal.setSignal(2);\r\n            signal.setBean(BeanUtilsBean.getInstance());\r\n            signal.setConvertUtils(ConvertUtilsBean.getInstance());\r\n            signal.setPropertyUtils(PropertyUtilsBean.getInstance());\r\n        }\r\n\r\n        @Override\r\n        public String toString() {\r\n            return \"GetBeanUtilsBeanThread\";\r\n        }\r\n    }\r\n    final Signal signal = new Signal();\r\n    signal.setSignal(1);\r\n    final GetBeanUtilsBeanThread thread = new GetBeanUtilsBeanThread(signal);\r\n    thread.setContextClassLoader(new TestClassLoader());\r\n    thread.start();\r\n    thread.join();\r\n    assertEquals(2, signal.getSignal(), \"Signal not set by test thread\");\r\n    assertNotEquals(BeanUtilsBean.getInstance(), signal.getBean(), \"Different BeanUtilsBean instances per context classloader\");\r\n    assertNotEquals(ConvertUtilsBean.getInstance(), signal.getConvertUtils(), \"Different ConvertUtilsBean instances per context classloader\");\r\n    assertNotEquals(PropertyUtilsBean.getInstance(), signal.getPropertyUtils(), \"Different PropertyUtilsBean instances per context classloader\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\BeanificationTest.java",
  "methodName" : "testMemoryLeak",
  "sourceCode" : "/**\r\n * Tests whether class loaders and beans are released from memory\r\n */\r\n@Test\r\nvoid testMemoryLeak() throws Exception {\r\n    // many thanks to Juozas Baliuka for suggesting this methodology\r\n    TestClassLoader loader = new TestClassLoader();\r\n    final WeakReference<ClassLoader> loaderReference = new WeakReference<>(loader);\r\n    BeanUtilsBean.getInstance();\r\n    final class GetBeanUtilsBeanThread extends Thread {\r\n\r\n        BeanUtilsBean beanUtils;\r\n\r\n        ConvertUtilsBean convertUtils;\r\n\r\n        PropertyUtilsBean propertyUtils;\r\n\r\n        GetBeanUtilsBeanThread() {\r\n        }\r\n\r\n        @Override\r\n        public void run() {\r\n            beanUtils = BeanUtilsBean.getInstance();\r\n            convertUtils = ConvertUtilsBean.getInstance();\r\n            propertyUtils = PropertyUtilsBean.getInstance();\r\n            // XXX Log keeps a reference around!\r\n            LogFactory.releaseAll();\r\n        }\r\n\r\n        @Override\r\n        public String toString() {\r\n            return \"GetBeanUtilsBeanThread\";\r\n        }\r\n    }\r\n    GetBeanUtilsBeanThread thread = new GetBeanUtilsBeanThread();\r\n    @SuppressWarnings(\"unused\")\r\n    final WeakReference<Thread> threadWeakReference = new WeakReference<>(thread);\r\n    thread.setContextClassLoader(loader);\r\n    thread.start();\r\n    thread.join();\r\n    final WeakReference<BeanUtilsBean> beanUtilsReference = new WeakReference<>(thread.beanUtils);\r\n    final WeakReference<PropertyUtilsBean> propertyUtilsReference = new WeakReference<>(thread.propertyUtils);\r\n    final WeakReference<ConvertUtilsBean> convertUtilsReference = new WeakReference<>(thread.convertUtils);\r\n    assertNotNull(loaderReference.get(), \"Weak reference released early (1)\");\r\n    assertNotNull(beanUtilsReference.get(), \"Weak reference released early (2)\");\r\n    assertNotNull(propertyUtilsReference.get(), \"Weak reference released early (3)\");\r\n    assertNotNull(convertUtilsReference.get(), \"Weak reference released early (4)\");\r\n    // dereference strong references\r\n    loader = null;\r\n    thread.setContextClassLoader(null);\r\n    thread = null;\r\n    int iterations = 0;\r\n    int bytz = 2;\r\n    while (true) {\r\n        BeanUtilsBean.getInstance();\r\n        System.gc();\r\n        assertFalse(iterations++ > MAX_GC_ITERATIONS, \"Max iterations reached before resource released.\");\r\n        if (loaderReference.get() == null && beanUtilsReference.get() == null && propertyUtilsReference.get() == null && convertUtilsReference.get() == null) {\r\n            break;\r\n        }\r\n        // create garbage:\r\n        @SuppressWarnings(\"unused\")\r\n        final byte[] b = new byte[bytz];\r\n        bytz *= 2;\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\BeanificationTest.java",
  "methodName" : "testMemoryLeak2",
  "sourceCode" : "/**\r\n * Tests whether class loaders and beans are released from memory by the map used by BeanUtils.\r\n */\r\n@Test\r\nvoid testMemoryLeak2() throws Exception {\r\n    // many thanks to Juozas Baliuka for suggesting this methodology\r\n    TestClassLoader loader = new TestClassLoader();\r\n    final ReferenceQueue<Object> queue = new ReferenceQueue<>();\r\n    final WeakReference<ClassLoader> loaderReference = new WeakReference<>(loader, queue);\r\n    Integer test = new Integer(1);\r\n    final WeakReference<Integer> testReference = new WeakReference<>(test, queue);\r\n    // Map map = new ReferenceMap(ReferenceMap.WEAK, ReferenceMap.HARD, true);\r\n    final Map<Object, Object> map = new WeakHashMap<>();\r\n    map.put(loader, test);\r\n    assertEquals(test, map.get(loader), \"In map\");\r\n    assertNotNull(loaderReference.get(), \"Weak reference released early (1)\");\r\n    assertNotNull(testReference.get(), \"Weak reference released early (2)\");\r\n    // dereference strong references\r\n    loader = null;\r\n    test = null;\r\n    int iterations = 0;\r\n    int bytz = 2;\r\n    while (true) {\r\n        System.gc();\r\n        assertFalse(iterations++ > MAX_GC_ITERATIONS, \"Max iterations reached before resource released.\");\r\n        map.isEmpty();\r\n        if (loaderReference.get() == null && testReference.get() == null) {\r\n            break;\r\n        }\r\n        // create garbage:\r\n        @SuppressWarnings(\"unused\")\r\n        final byte[] b = new byte[bytz];\r\n        bytz *= 2;\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\BeanificationTest.java",
  "methodName" : "testMemoryTestMethodology",
  "sourceCode" : "/**\r\n * Test of the methodology we'll use for some of the later tests\r\n */\r\n@Test\r\nvoid testMemoryTestMethodology() throws Exception {\r\n    // test methodology\r\n    // many thanks to Juozas Baliuka for suggesting this method\r\n    ClassLoader loader = new ClassLoader(this.getClass().getClassLoader()) {\r\n    };\r\n    final WeakReference<ClassLoader> reference = new WeakReference<>(loader);\r\n    @SuppressWarnings(\"unused\")\r\n    Class<?> myClass = loader.loadClass(\"org.apache.commons.beanutils2.BetaBean\");\r\n    assertNotNull(reference.get(), \"Weak reference released early\");\r\n    // dereference class loader and class:\r\n    loader = null;\r\n    myClass = null;\r\n    int iterations = 0;\r\n    int bytz = 2;\r\n    while (true) {\r\n        System.gc();\r\n        assertFalse(iterations++ > MAX_GC_ITERATIONS, \"Max iterations reached before resource released.\");\r\n        if (reference.get() == null) {\r\n            break;\r\n        }\r\n        // create garbage:\r\n        @SuppressWarnings(\"unused\")\r\n        final byte[] b = new byte[bytz];\r\n        bytz *= 2;\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\BeanIntrospectionDataTest.java",
  "methodName" : "testGetWriteMethodDefined",
  "sourceCode" : "/**\r\n * Tests whether a write method can be queried if it is defined in the descriptor.\r\n */\r\n@Test\r\nvoid testGetWriteMethodDefined() {\r\n    final BeanIntrospectionData data = setUpData();\r\n    final PropertyDescriptor pd = fetchTestDescriptor(data);\r\n    assertNotNull(pd.getWriteMethod(), \"No write method\");\r\n    assertEquals(pd.getWriteMethod(), data.getWriteMethod(BEAN_CLASS, pd), \"Wrong write method\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\BeanIntrospectionDataTest.java",
  "methodName" : "testGetWriteMethodNonExisting",
  "sourceCode" : "/**\r\n * Tests getWriteMethod() if the method cannot be resolved. (This is a corner case which should normally not happen in practice.)\r\n */\r\n@Test\r\nvoid testGetWriteMethodNonExisting() throws Exception {\r\n    final PropertyDescriptor pd = new PropertyDescriptor(TEST_PROP, BEAN_CLASS.getMethod(\"getFluentGetProperty\"), BEAN_CLASS.getMethod(\"setFluentGetProperty\", String.class));\r\n    final Map<String, String> methods = new HashMap<>();\r\n    methods.put(TEST_PROP, \"hashCode\");\r\n    final BeanIntrospectionData data = new BeanIntrospectionData(new PropertyDescriptor[] { pd }, methods);\r\n    pd.setWriteMethod(null);\r\n    assertNull(data.getWriteMethod(BEAN_CLASS, pd), \"Got a write method\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\BeanIntrospectionDataTest.java",
  "methodName" : "testGetWriteMethodUndefined",
  "sourceCode" : "/**\r\n * Tests whether a write method can be queried that is currently not available in the property descriptor.\r\n */\r\n@Test\r\nvoid testGetWriteMethodUndefined() throws Exception {\r\n    final BeanIntrospectionData data = setUpData();\r\n    final PropertyDescriptor pd = fetchTestDescriptor(data);\r\n    final Method writeMethod = pd.getWriteMethod();\r\n    pd.setWriteMethod(null);\r\n    assertEquals(writeMethod, data.getWriteMethod(BEAN_CLASS, pd), \"Wrong write method\");\r\n    assertEquals(writeMethod, pd.getWriteMethod(), \"Method not set in descriptor\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\BeanIntrospectionDataTest.java",
  "methodName" : "testGetWriteMethodUnknown",
  "sourceCode" : "/**\r\n * Tests getWriteMethod() for a property for which no write method is known.\r\n */\r\n@Test\r\nvoid testGetWriteMethodUnknown() {\r\n    final BeanIntrospectionData data = setUpData();\r\n    final PropertyDescriptor pd = data.getDescriptor(\"class\");\r\n    assertNull(data.getWriteMethod(BEAN_CLASS, pd), \"Got a write method\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\BeanMapTest.java",
  "methodName" : "testBeanMapClone",
  "sourceCode" : "@Test\r\nvoid testBeanMapClone() {\r\n    final BeanMap map = (BeanMap) makeFullMap();\r\n    try {\r\n        final BeanMap map2 = (BeanMap) map.clone();\r\n        // make sure containsKey is working to verify the bean was cloned\r\n        // ok, and the read methods were properly initialized\r\n        final Object[] keys = getSampleKeys();\r\n        for (final Object key : keys) {\r\n            assertTrue(map2.containsKey(key), \"Cloned BeanMap should contain the same keys\");\r\n        }\r\n    } catch (final CloneNotSupportedException exception) {\r\n        fail(\"BeanMap.clone() should not throw a CloneNotSupportedException when clone should succeed.\");\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\BeanMapTest.java",
  "methodName" : "testBeanMapPutAllWriteable",
  "sourceCode" : "@Test\r\nvoid testBeanMapPutAllWriteable() {\r\n    final BeanMap map1 = (BeanMap) makeFullMap();\r\n    final BeanMap map2 = (BeanMap) makeFullMap();\r\n    map2.put(\"someIntValue\", Integer.valueOf(0));\r\n    map1.putAllWriteable(map2);\r\n    assertEquals(map1.get(\"someIntValue\"), Integer.valueOf(0));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\BeanMapTest.java",
  "methodName" : "testExceptionThrowFromClear",
  "sourceCode" : "/**\r\n * Test that the cause of exception thrown by clear() is initialized.\r\n */\r\n@Test\r\nvoid testExceptionThrowFromClear() {\r\n    try {\r\n        final Object bean = Jira87BeanFactory.createMappedPropertyBean();\r\n        final BeanMap map = new BeanMap(bean);\r\n        map.clear();\r\n        fail(\"clear() - expected UnsupportedOperationException\");\r\n    } catch (final UnsupportedOperationException e) {\r\n        Throwable cause = null;\r\n        try {\r\n            cause = (Throwable) PropertyUtils.getProperty(e, \"cause\");\r\n        } catch (final Exception e2) {\r\n            fail(\"Retrieving the cause threw \" + e2);\r\n        }\r\n        assertNotNull(cause, \"Cause null\");\r\n        assertEquals(IllegalAccessException.class, cause.getClass(), \"Cause\");\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\BeanMapTest.java",
  "methodName" : "testExceptionThrowFromClone",
  "sourceCode" : "/**\r\n * Test that the cause of exception thrown by a clone() is initialized.\r\n */\r\n@Test\r\nvoid testExceptionThrowFromClone() {\r\n    // Test cloning a non-public bean (instantiation exception)\r\n    try {\r\n        final Object bean = Jira87BeanFactory.createMappedPropertyBean();\r\n        final BeanMap map = new BeanMap(bean);\r\n        map.clone();\r\n        fail(\"Non-public bean clone() - expected CloneNotSupportedException\");\r\n    } catch (final CloneNotSupportedException e) {\r\n        Throwable cause = null;\r\n        try {\r\n            cause = (Throwable) PropertyUtils.getProperty(e, \"cause\");\r\n        } catch (final Exception e2) {\r\n            fail(\"Non-public bean - retrieving the cause threw \" + e2);\r\n        }\r\n        assertNotNull(cause, \"Non-public bean cause null\");\r\n        assertEquals(IllegalAccessException.class, cause.getClass(), \"Non-public bean cause\");\r\n    }\r\n    // Test cloning a bean that throws exception\r\n    try {\r\n        final BeanMap map = new BeanMap(new BeanThrowingExceptions());\r\n        map.clone();\r\n        fail(\"Setter Exception clone() - expected CloneNotSupportedException\");\r\n    } catch (final CloneNotSupportedException e) {\r\n        Throwable cause = null;\r\n        try {\r\n            cause = (Throwable) PropertyUtils.getProperty(e, \"cause\");\r\n        } catch (final Exception e2) {\r\n            fail(\"Setter Exception - retrieving the cause threw \" + e2);\r\n        }\r\n        assertNotNull(cause, \"Setter Exception cause null\");\r\n        assertEquals(IllegalArgumentException.class, cause.getClass(), \"Setter Exception cause\");\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\BeanMapTest.java",
  "methodName" : "testExceptionThrowFromPut",
  "sourceCode" : "/**\r\n * Test that the cause of exception thrown by put() is initialized.\r\n */\r\n@Test\r\nvoid testExceptionThrowFromPut() {\r\n    try {\r\n        final Map<String, Object> map = new BeanMap(new BeanThrowingExceptions());\r\n        map.put(\"valueThrowingException\", \"value\");\r\n        fail(\"Setter exception - expected IllegalArgumentException\");\r\n    } catch (final IllegalArgumentException e) {\r\n        Throwable cause1 = null;\r\n        Throwable cause2 = null;\r\n        try {\r\n            cause1 = (Throwable) PropertyUtils.getProperty(e, \"cause\");\r\n            cause2 = (Throwable) PropertyUtils.getProperty(e, \"cause.cause\");\r\n        } catch (final Exception e2) {\r\n            fail(\"Setter exception - retrieving the cause threw \" + e2);\r\n        }\r\n        assertNotNull(cause1, \"Setter exception cause 1 null\");\r\n        assertEquals(InvocationTargetException.class, cause1.getClass(), \"Setter exception cause 1\");\r\n        assertNotNull(cause2, \"Setter exception cause 2 null\");\r\n        assertEquals(TestException.class, cause2.getClass(), \"Setter exception cause 2\");\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\BeanMapTest.java",
  "methodName" : "testGetTypeTransformerMethod",
  "sourceCode" : "/**\r\n * Test the default transformers using the getTypeTransformer() method\r\n */\r\n@Test\r\nvoid testGetTypeTransformerMethod() {\r\n    final BeanMap beanMap = new BeanMap();\r\n    assertEquals(Boolean.TRUE, beanMap.getTypeTransformer(Boolean.TYPE).apply(\"true\"), \"Boolean.TYPE\");\r\n    assertEquals(Character.valueOf('B'), beanMap.getTypeTransformer(Character.TYPE).apply(\"BCD\"), \"Character.TYPE\");\r\n    assertEquals(Byte.valueOf((byte) 1), beanMap.getTypeTransformer(Byte.TYPE).apply(\"1\"), \"Byte.TYPE\");\r\n    assertEquals(Short.valueOf((short) 2), beanMap.getTypeTransformer(Short.TYPE).apply(\"2\"), \"Short.TYPE\");\r\n    assertEquals(Integer.valueOf(3), beanMap.getTypeTransformer(Integer.TYPE).apply(\"3\"), \"Integer.TYPE\");\r\n    assertEquals(Long.valueOf(4), beanMap.getTypeTransformer(Long.TYPE).apply(\"4\"), \"Long.TYPE\");\r\n    assertEquals(Float.valueOf(\"5\"), beanMap.getTypeTransformer(Float.TYPE).apply(\"5\"), \"Float.TYPE\");\r\n    assertEquals(Double.valueOf(\"6\"), beanMap.getTypeTransformer(Double.TYPE).apply(\"6\"), \"Double.TYPE\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\BeanMapTest.java",
  "methodName" : "testMapClear",
  "sourceCode" : "/**\r\n * Need to override this method because the \"clear()\" method on the bean map just returns the bean properties to their default states. It does not actually\r\n * remove the mappings as per the map contract. The default testClear() methods checks that the clear method throws an UnsupportedOperationException since\r\n * this class is not add/remove modifiable. In our case though, we do not always throw that exception.\r\n */\r\n@Override\r\n@Test\r\npublic void testMapClear() {\r\n    // TODO: make sure a call to BeanMap.clear returns the bean to its\r\n    // default initialization values.\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\BeanMapTest.java",
  "methodName" : "testMapPut",
  "sourceCode" : "/**\r\n * Need to override this method because the \"put()\" method on the bean doesn't work for this type of Map.\r\n */\r\n@Override\r\n@Test\r\npublic void testMapPut() {\r\n    // see testBeanMapPutAllWriteable\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\BeanMapTest.java",
  "methodName" : "testMethodAccessor",
  "sourceCode" : "@Test\r\nvoid testMethodAccessor() throws Exception {\r\n    final BeanMap map = (BeanMap) makeFullMap();\r\n    final Method method = BeanWithProperties.class.getDeclaredMethod(\"getSomeIntegerValue\");\r\n    assertEquals(method, map.getReadMethod(\"someIntegerValue\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\BeanMapTest.java",
  "methodName" : "testMethodMutator",
  "sourceCode" : "@Test\r\nvoid testMethodMutator() throws Exception {\r\n    final BeanMap map = (BeanMap) makeFullMap();\r\n    final Method method = BeanWithProperties.class.getDeclaredMethod(\"setSomeIntegerValue\", Integer.class);\r\n    assertEquals(method, map.getWriteMethod(\"someIntegerValue\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\BeanPredicateTest.java",
  "methodName" : "testEqual",
  "sourceCode" : "@Test\r\nvoid testEqual() {\r\n    final Predicate<String> p = s -> s.equals(\"foo\");\r\n    final BeanPredicate<String> predicate = new BeanPredicate<>(\"stringProperty\", p);\r\n    assertTrue(predicate.test(new TestBean(\"foo\")));\r\n    assertFalse(predicate.test(new TestBean(\"bar\")));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\BeanPredicateTest.java",
  "methodName" : "testInstanceOf",
  "sourceCode" : "@Test\r\nvoid testInstanceOf() {\r\n    final Predicate<String> p = String.class::isInstance;\r\n    final BeanPredicate<String> predicate = new BeanPredicate<>(\"stringProperty\", p);\r\n    assertTrue(predicate.test(new TestBean(\"foo\")));\r\n    assertTrue(predicate.test(new TestBean(\"bar\")));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\BeanPredicateTest.java",
  "methodName" : "testNotEqual",
  "sourceCode" : "@Test\r\nvoid testNotEqual() {\r\n    final Predicate<String> p = s -> !s.equals(\"foo\");\r\n    final BeanPredicate<String> predicate = new BeanPredicate<>(\"stringProperty\", p);\r\n    assertFalse(predicate.test(new TestBean(\"foo\")));\r\n    assertTrue(predicate.test(new TestBean(\"bar\")));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\BeanPredicateTest.java",
  "methodName" : "testNull",
  "sourceCode" : "@Test\r\nvoid testNull() {\r\n    final Predicate<String> p = s -> s == null;\r\n    final BeanPredicate<String> predicate = new BeanPredicate<>(\"stringProperty\", p);\r\n    final String nullString = null;\r\n    assertTrue(predicate.test(new TestBean(nullString)));\r\n    assertFalse(predicate.test(new TestBean(\"bar\")));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\BeanPropertyValueChangeConsumerTest.java",
  "methodName" : "testExecuteWithIndexedProperty",
  "sourceCode" : "/**\r\n * Test execute with indexed property.\r\n */\r\n@Test\r\nvoid testExecuteWithIndexedProperty() {\r\n    final TestBean testBean = new TestBean();\r\n    new BeanPropertyValueChangeConsumer<>(\"intIndexed[0]\", expectedIntegerValue).accept(testBean);\r\n    assertSame(expectedIntegerValue.intValue(), testBean.getIntIndexed(0));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\BeanPropertyValueChangeConsumerTest.java",
  "methodName" : "testExecuteWithInvalidPropertyName",
  "sourceCode" : "/**\r\n * Test execute with an invalid property name.\r\n */\r\n@Test\r\nvoid testExecuteWithInvalidPropertyName() {\r\n    assertThrows(IllegalArgumentException.class, () -> new BeanPropertyValueChangeConsumer<>(\"bogusProperty\", \"foo\").accept(new TestBean()));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\BeanPropertyValueChangeConsumerTest.java",
  "methodName" : "testExecuteWithMappedProperty",
  "sourceCode" : "/**\r\n * Test execute with mapped property.\r\n */\r\n@Test\r\nvoid testExecuteWithMappedProperty() {\r\n    final TestBean testBean = new TestBean();\r\n    new BeanPropertyValueChangeConsumer<>(\"mappedProperty(fred)\", \"barney\").accept(testBean);\r\n    assertEquals(\"barney\", testBean.getMappedProperty(\"fred\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\BeanPropertyValueChangeConsumerTest.java",
  "methodName" : "testExecuteWithNestedProperty",
  "sourceCode" : "/**\r\n * Test execute with a nested property.\r\n */\r\n@Test\r\nvoid testExecuteWithNestedProperty() {\r\n    final TestBean testBean = new TestBean();\r\n    new BeanPropertyValueChangeConsumer<>(\"nested.stringProperty\", \"bar\").accept(testBean);\r\n    assertEquals(\"bar\", testBean.getNested().getStringProperty());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\BeanPropertyValueChangeConsumerTest.java",
  "methodName" : "testExecuteWithNullInPropertyPath",
  "sourceCode" : "/**\r\n * Test execute with a nested property and null in the property path.\r\n */\r\n@Test\r\nvoid testExecuteWithNullInPropertyPath() {\r\n    assertThrows(IllegalArgumentException.class, () -> new BeanPropertyValueChangeConsumer<>(\"anotherNested.stringProperty\", \"foo\").accept(new TestBean()));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\BeanPropertyValueChangeConsumerTest.java",
  "methodName" : "testExecuteWithNullInPropertyPathAngIgnoreTrue",
  "sourceCode" : "/**\r\n * Test execute with a nested property and null in the property path and ignoreNull = true.\r\n */\r\n@Test\r\nvoid testExecuteWithNullInPropertyPathAngIgnoreTrue() {\r\n    final TestBean testBean = new TestBean();\r\n    // create a consumer that will attempt to set a property on the null bean in the path\r\n    final BeanPropertyValueChangeConsumer<TestBean, Object> consumer = new BeanPropertyValueChangeConsumer<>(\"anotherNested.stringProperty\", \"Should ignore exception\", true);\r\n    consumer.accept(testBean);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\BeanPropertyValueChangeConsumerTest.java",
  "methodName" : "testExecuteWithReadOnlyProperty",
  "sourceCode" : "/**\r\n * Test execute with read only property.\r\n */\r\n@Test\r\nvoid testExecuteWithReadOnlyProperty() {\r\n    assertThrows(IllegalArgumentException.class, () -> new BeanPropertyValueChangeConsumer<>(\"readOnlyProperty\", \"foo\").accept(new TestBean()));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\BeanPropertyValueChangeConsumerTest.java",
  "methodName" : "testExecuteWithSimpleBooleanPropertyAndBooleanValue",
  "sourceCode" : "/**\r\n * Test execute with simple boolean property and Boolean value.\r\n */\r\n@Test\r\nvoid testExecuteWithSimpleBooleanPropertyAndBooleanValue() {\r\n    final TestBean testBean = new TestBean();\r\n    new BeanPropertyValueChangeConsumer<>(\"booleanProperty\", expectedBooleanValue).accept(testBean);\r\n    assertEquals(expectedBooleanValue.booleanValue(), testBean.getBooleanProperty());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\BeanPropertyValueChangeConsumerTest.java",
  "methodName" : "testExecuteWithSimpleBooleanPropertyAndStringValue",
  "sourceCode" : "/**\r\n * Test execute with simple boolean property and String value.\r\n */\r\n@Test\r\nvoid testExecuteWithSimpleBooleanPropertyAndStringValue() {\r\n    assertThrows(IllegalArgumentException.class, () -> new BeanPropertyValueChangeConsumer<>(\"booleanProperty\", \"true\").accept(new TestBean()));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\BeanPropertyValueChangeConsumerTest.java",
  "methodName" : "testExecuteWithSimpleBytePropertyAndByteValue",
  "sourceCode" : "/**\r\n * Test execute with simple byte property and Byte value.\r\n */\r\n@Test\r\nvoid testExecuteWithSimpleBytePropertyAndByteValue() {\r\n    final TestBean testBean = new TestBean();\r\n    new BeanPropertyValueChangeConsumer<>(\"byteProperty\", expectedByteValue).accept(testBean);\r\n    assertEquals(expectedByteValue.byteValue(), testBean.getByteProperty());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\BeanPropertyValueChangeConsumerTest.java",
  "methodName" : "testExecuteWithSimpleBytePropertyAndStringValue",
  "sourceCode" : "/**\r\n * Test execute with simple boolean property and String value.\r\n */\r\n@Test\r\nvoid testExecuteWithSimpleBytePropertyAndStringValue() {\r\n    assertThrows(IllegalArgumentException.class, () -> new BeanPropertyValueChangeConsumer<>(\"byteProperty\", \"foo\").accept(new TestBean()));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\BeanPropertyValueChangeConsumerTest.java",
  "methodName" : "testExecuteWithSimpleDoublePropertyAndDoubleValue",
  "sourceCode" : "/**\r\n * Test execute with simple double property and Double value.\r\n */\r\n@Test\r\nvoid testExecuteWithSimpleDoublePropertyAndDoubleValue() {\r\n    final TestBean testBean = new TestBean();\r\n    new BeanPropertyValueChangeConsumer<>(\"doubleProperty\", expectedDoubleValue).accept(testBean);\r\n    assertEquals(expectedDoubleValue.doubleValue(), testBean.getDoubleProperty());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\BeanPropertyValueChangeConsumerTest.java",
  "methodName" : "testExecuteWithSimpleDoublePropertyAndFloatValue",
  "sourceCode" : "/**\r\n * Test execute with simple double property and Float value.\r\n */\r\n@Test\r\nvoid testExecuteWithSimpleDoublePropertyAndFloatValue() {\r\n    final TestBean testBean = new TestBean();\r\n    new BeanPropertyValueChangeConsumer<>(\"doubleProperty\", expectedFloatValue).accept(testBean);\r\n    assertEquals(expectedFloatValue.doubleValue(), testBean.getDoubleProperty());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\BeanPropertyValueChangeConsumerTest.java",
  "methodName" : "testExecuteWithSimpleDoublePropertyAndIntegerValue",
  "sourceCode" : "/**\r\n * Test execute with simple double property and Integer value.\r\n */\r\n@Test\r\nvoid testExecuteWithSimpleDoublePropertyAndIntegerValue() {\r\n    final TestBean testBean = new TestBean();\r\n    new BeanPropertyValueChangeConsumer<>(\"doubleProperty\", expectedIntegerValue).accept(testBean);\r\n    assertEquals(expectedIntegerValue.doubleValue(), testBean.getDoubleProperty());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\BeanPropertyValueChangeConsumerTest.java",
  "methodName" : "testExecuteWithSimpleDoublePropertyAndStringValue",
  "sourceCode" : "/**\r\n * Test execute with simple double property and String value.\r\n */\r\n@Test\r\nvoid testExecuteWithSimpleDoublePropertyAndStringValue() {\r\n    assertThrows(IllegalArgumentException.class, () -> new BeanPropertyValueChangeConsumer<>(\"doubleProperty\", \"123\").accept(new TestBean()));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\BeanPropertyValueChangeConsumerTest.java",
  "methodName" : "testExecuteWithSimpleFloatPropertyAndDoubleValue",
  "sourceCode" : "/**\r\n * Test execute with simple float property and Double value.\r\n */\r\n@Test\r\nvoid testExecuteWithSimpleFloatPropertyAndDoubleValue() {\r\n    assertThrows(IllegalArgumentException.class, () -> new BeanPropertyValueChangeConsumer<>(\"floatProperty\", expectedDoubleValue).accept(new TestBean()));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\BeanPropertyValueChangeConsumerTest.java",
  "methodName" : "testExecuteWithSimpleFloatPropertyAndFloatValue",
  "sourceCode" : "/**\r\n * Test execute with simple float property and Float value.\r\n */\r\n@Test\r\nvoid testExecuteWithSimpleFloatPropertyAndFloatValue() {\r\n    final TestBean testBean = new TestBean();\r\n    new BeanPropertyValueChangeConsumer<>(\"floatProperty\", expectedFloatValue).accept(testBean);\r\n    assertEquals(expectedFloatValue.floatValue(), testBean.getFloatProperty());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\BeanPropertyValueChangeConsumerTest.java",
  "methodName" : "testExecuteWithSimpleFloatPropertyAndIntegerValue",
  "sourceCode" : "/**\r\n * Test execute with simple float property and Integer value.\r\n */\r\n@Test\r\nvoid testExecuteWithSimpleFloatPropertyAndIntegerValue() {\r\n    final TestBean testBean = new TestBean();\r\n    new BeanPropertyValueChangeConsumer<>(\"floatProperty\", expectedIntegerValue).accept(testBean);\r\n    assertEquals(expectedIntegerValue.floatValue(), testBean.getFloatProperty());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\BeanPropertyValueChangeConsumerTest.java",
  "methodName" : "testExecuteWithSimpleFloatPropertyAndStringValue",
  "sourceCode" : "/**\r\n * Test execute with simple float property and String value.\r\n */\r\n@Test\r\nvoid testExecuteWithSimpleFloatPropertyAndStringValue() {\r\n    assertThrows(IllegalArgumentException.class, () -> new BeanPropertyValueChangeConsumer<>(\"floatProperty\", \"123\").accept(new TestBean()));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\BeanPropertyValueChangeConsumerTest.java",
  "methodName" : "testExecuteWithSimpleIntPropertyAndDoubleValue",
  "sourceCode" : "/**\r\n * Test execute with simple int property and Double value.\r\n */\r\n@Test\r\nvoid testExecuteWithSimpleIntPropertyAndDoubleValue() {\r\n    assertThrows(IllegalArgumentException.class, () -> new BeanPropertyValueChangeConsumer<>(\"intProperty\", expectedDoubleValue).accept(new TestBean()));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\BeanPropertyValueChangeConsumerTest.java",
  "methodName" : "testExecuteWithSimpleIntPropertyAndFloatValue",
  "sourceCode" : "/**\r\n * Test execute with simple int property and Float value.\r\n */\r\n@Test\r\nvoid testExecuteWithSimpleIntPropertyAndFloatValue() {\r\n    assertThrows(IllegalArgumentException.class, () -> new BeanPropertyValueChangeConsumer<>(\"intProperty\", expectedFloatValue).accept(new TestBean()));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\BeanPropertyValueChangeConsumerTest.java",
  "methodName" : "testExecuteWithSimpleIntPropertyAndIntegerValue",
  "sourceCode" : "/**\r\n * Test execute with simple int property and Integer value.\r\n */\r\n@Test\r\nvoid testExecuteWithSimpleIntPropertyAndIntegerValue() {\r\n    final TestBean testBean = new TestBean();\r\n    new BeanPropertyValueChangeConsumer<>(\"intProperty\", expectedIntegerValue).accept(testBean);\r\n    assertEquals(expectedIntegerValue.intValue(), testBean.getIntProperty());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\BeanPropertyValueChangeConsumerTest.java",
  "methodName" : "testExecuteWithSimpleIntPropertyAndStringValue",
  "sourceCode" : "/**\r\n * Test execute with simple int property and String value.\r\n */\r\n@Test\r\nvoid testExecuteWithSimpleIntPropertyAndStringValue() {\r\n    assertThrows(IllegalArgumentException.class, () -> new BeanPropertyValueChangeConsumer<>(\"intProperty\", \"123\").accept(new TestBean()));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\BeanPropertyValueChangeConsumerTest.java",
  "methodName" : "testExecuteWithSimplePrimitivePropertyAndNullValue",
  "sourceCode" : "/**\r\n * Test execute with simple primitive property and null value.\r\n */\r\n@Test\r\nvoid testExecuteWithSimplePrimitivePropertyAndNullValue() {\r\n    assertThrows(IllegalArgumentException.class, () -> new BeanPropertyValueChangeConsumer<>(\"intProperty\", null).accept(new TestBean()));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\BeanPropertyValueChangeConsumerTest.java",
  "methodName" : "testExecuteWithSimpleStringProperty",
  "sourceCode" : "/**\r\n * Test execute with a simple String property.\r\n */\r\n@Test\r\nvoid testExecuteWithSimpleStringProperty() {\r\n    final TestBean testBean = new TestBean();\r\n    new BeanPropertyValueChangeConsumer<>(\"stringProperty\", \"barney\").accept(testBean);\r\n    assertEquals(\"barney\", testBean.getStringProperty());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\BeanPropertyValueChangeConsumerTest.java",
  "methodName" : "testExecuteWithWriteOnlyProperty",
  "sourceCode" : "/**\r\n * Test execute with write only property.\r\n */\r\n@Test\r\nvoid testExecuteWithWriteOnlyProperty() {\r\n    final TestBean testBean = new TestBean();\r\n    new BeanPropertyValueChangeConsumer<>(\"writeOnlyProperty\", \"foo\").accept(testBean);\r\n    assertEquals(\"foo\", testBean.getWriteOnlyPropertyValue());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\BeanPropertyValueEqualsPredicateTest.java",
  "methodName" : "testEvaluateWithBooleanProperty",
  "sourceCode" : "/**\r\n * Test evaluate with boolean property.\r\n */\r\n@Test\r\nvoid testEvaluateWithBooleanProperty() {\r\n    final BeanPropertyValueEqualsPredicate<TestBean, Boolean> predicate = new BeanPropertyValueEqualsPredicate<>(\"booleanProperty\", expectedBooleanValue);\r\n    assertTrue(predicate.test(new TestBean(expectedBooleanValue.booleanValue())));\r\n    assertFalse(predicate.test(new TestBean(!expectedBooleanValue.booleanValue())));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\BeanPropertyValueEqualsPredicateTest.java",
  "methodName" : "testEvaluateWithByteProperty",
  "sourceCode" : "/**\r\n * Test evaluate with byte property.\r\n */\r\n@Test\r\nvoid testEvaluateWithByteProperty() {\r\n    final BeanPropertyValueEqualsPredicate<TestBean, Byte> predicate = new BeanPropertyValueEqualsPredicate<>(\"byteProperty\", expectedByteValue);\r\n    final TestBean testBean = new TestBean();\r\n    testBean.setByteProperty(expectedByteValue.byteValue());\r\n    assertTrue(predicate.test(testBean));\r\n    testBean.setByteProperty((byte) (expectedByteValue.byteValue() - 1));\r\n    assertFalse(predicate.test(testBean));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\BeanPropertyValueEqualsPredicateTest.java",
  "methodName" : "testEvaluateWithDoubleProperty",
  "sourceCode" : "/**\r\n * Test evaluate with double property.\r\n */\r\n@Test\r\nvoid testEvaluateWithDoubleProperty() {\r\n    final BeanPropertyValueEqualsPredicate<TestBean, Double> predicate = new BeanPropertyValueEqualsPredicate<>(\"doubleProperty\", expectedDoubleValue);\r\n    assertTrue(predicate.test(new TestBean(expectedDoubleValue.doubleValue())));\r\n    assertFalse(predicate.test(new TestBean(expectedDoubleValue.doubleValue() - 1)));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\BeanPropertyValueEqualsPredicateTest.java",
  "methodName" : "testEvaluateWithFloatProperty",
  "sourceCode" : "/**\r\n * Test evaluate with float property.\r\n */\r\n@Test\r\nvoid testEvaluateWithFloatProperty() {\r\n    final BeanPropertyValueEqualsPredicate<TestBean, Float> predicate = new BeanPropertyValueEqualsPredicate<>(\"floatProperty\", expectedFloatValue);\r\n    assertTrue(predicate.test(new TestBean(expectedFloatValue.floatValue())));\r\n    assertFalse(predicate.test(new TestBean(expectedFloatValue.floatValue() - 1)));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\BeanPropertyValueEqualsPredicateTest.java",
  "methodName" : "testEvaluateWithIndexedProperty",
  "sourceCode" : "/**\r\n * Test evaluate with indexed property.\r\n */\r\n@Test\r\nvoid testEvaluateWithIndexedProperty() {\r\n    // try a valid index\r\n    BeanPropertyValueEqualsPredicate<TestBean, Object> predicate = new BeanPropertyValueEqualsPredicate<>(\"intIndexed[0]\", expectedIntegerValue);\r\n    final TestBean testBean = new TestBean();\r\n    testBean.setIntIndexed(0, expectedIntegerValue.intValue());\r\n    assertTrue(predicate.test(testBean));\r\n    testBean.setIntIndexed(0, expectedIntegerValue.intValue() - 1);\r\n    assertFalse(predicate.test(testBean));\r\n    // try an invalid index\r\n    predicate = new BeanPropertyValueEqualsPredicate<>(\"intIndexed[999]\", \"exception-ahead\");\r\n    try {\r\n        assertFalse(predicate.test(testBean));\r\n    } catch (final ArrayIndexOutOfBoundsException e) {\r\n        /* this is what should happen */\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\BeanPropertyValueEqualsPredicateTest.java",
  "methodName" : "testEvaluateWithIntProperty",
  "sourceCode" : "/**\r\n * Test evaluate with int property.\r\n */\r\n@Test\r\nvoid testEvaluateWithIntProperty() {\r\n    final BeanPropertyValueEqualsPredicate<TestBean, Integer> predicate = new BeanPropertyValueEqualsPredicate<>(\"intProperty\", expectedIntegerValue);\r\n    assertTrue(predicate.test(new TestBean(expectedIntegerValue.intValue())));\r\n    assertFalse(predicate.test(new TestBean(expectedIntegerValue.intValue() - 1)));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\BeanPropertyValueEqualsPredicateTest.java",
  "methodName" : "testEvaluateWithInvalidPropertyName",
  "sourceCode" : "/**\r\n * Test evaluate with an invalid property name.\r\n */\r\n@Test\r\nvoid testEvaluateWithInvalidPropertyName() {\r\n    try {\r\n        new BeanPropertyValueEqualsPredicate<TestBean, Object>(\"bogusProperty\", null).test(new TestBean());\r\n    } catch (final IllegalArgumentException e) {\r\n        /* This is what should happen */\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\BeanPropertyValueEqualsPredicateTest.java",
  "methodName" : "testEvaluateWithMappedProperty",
  "sourceCode" : "/**\r\n * Test evaluate with mapped property.\r\n */\r\n@Test\r\nvoid testEvaluateWithMappedProperty() {\r\n    // try a key that is in the map\r\n    BeanPropertyValueEqualsPredicate<TestBean, String> predicate = new BeanPropertyValueEqualsPredicate<>(\"mappedProperty(test-key)\", \"match\");\r\n    final TestBean testBean = new TestBean();\r\n    testBean.setMappedProperty(\"test-key\", \"match\");\r\n    assertTrue(predicate.test(testBean));\r\n    testBean.setMappedProperty(\"test-key\", \"no-match\");\r\n    assertFalse(predicate.test(testBean));\r\n    // try a key that isn't in the map\r\n    predicate = new BeanPropertyValueEqualsPredicate<>(\"mappedProperty(invalid-key)\", \"match\");\r\n    assertFalse(predicate.test(testBean));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\BeanPropertyValueEqualsPredicateTest.java",
  "methodName" : "testEvaluateWithNestedMappedProperty",
  "sourceCode" : "/**\r\n * Test evaluate with nested mapped property.\r\n */\r\n@Test\r\nvoid testEvaluateWithNestedMappedProperty() {\r\n    final BeanPropertyValueEqualsPredicate<TestBean, String> predicate = new BeanPropertyValueEqualsPredicate<>(\"anotherNested.mappedProperty(test-key)\", \"match\");\r\n    final TestBean testBean = new TestBean();\r\n    final TestBean nestedBean = new TestBean();\r\n    nestedBean.setMappedProperty(\"test-key\", \"match\");\r\n    testBean.setAnotherNested(nestedBean);\r\n    assertTrue(predicate.test(testBean));\r\n    nestedBean.setMappedProperty(\"test-key\", \"no-match\");\r\n    assertFalse(predicate.test(testBean));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\BeanPropertyValueEqualsPredicateTest.java",
  "methodName" : "testEvaluateWithNestedProperty",
  "sourceCode" : "/**\r\n * Test evaluate with nested property.\r\n */\r\n@Test\r\nvoid testEvaluateWithNestedProperty() {\r\n    final BeanPropertyValueEqualsPredicate<TestBean, String> predicate = new BeanPropertyValueEqualsPredicate<>(\"anotherNested.stringProperty\", \"match\");\r\n    final TestBean testBean = new TestBean();\r\n    final TestBean nestedBean = new TestBean(\"match\");\r\n    testBean.setAnotherNested(nestedBean);\r\n    assertTrue(predicate.test(testBean));\r\n    testBean.setAnotherNested(new TestBean(\"no-match\"));\r\n    assertFalse(predicate.test(testBean));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\BeanPropertyValueEqualsPredicateTest.java",
  "methodName" : "testEvaluateWithNullInPath",
  "sourceCode" : "/**\r\n * Test evaluate with null in property path and ignore=false.\r\n */\r\n@Test\r\nvoid testEvaluateWithNullInPath() {\r\n    final BeanPropertyValueEqualsPredicate<TestBean, String> predicate = new BeanPropertyValueEqualsPredicate<>(\"anotherNested.stringProperty\", \"foo\");\r\n    assertThrows(IllegalArgumentException.class, () -> predicate.test(new TestBean()));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\BeanPropertyValueEqualsPredicateTest.java",
  "methodName" : "testEvaluateWithNullInPathAndIgnoreTrue",
  "sourceCode" : "/**\r\n * Test evaluate with null in property path and ignore=true.\r\n */\r\n@Test\r\nvoid testEvaluateWithNullInPathAndIgnoreTrue() {\r\n    final BeanPropertyValueEqualsPredicate<TestBean, String> predicate = new BeanPropertyValueEqualsPredicate<>(\"anotherNested.stringProperty\", \"foo\", true);\r\n    assertFalse(predicate.test(new TestBean()));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\BeanPropertyValueEqualsPredicateTest.java",
  "methodName" : "testEvaluateWithPrimitiveAndNull",
  "sourceCode" : "/**\r\n * Test evaluate with primitive property and null value.\r\n */\r\n@Test\r\nvoid testEvaluateWithPrimitiveAndNull() {\r\n    BeanPropertyValueEqualsPredicate<TestBean, Object> predicate = new BeanPropertyValueEqualsPredicate<>(\"intProperty\", null);\r\n    assertFalse(predicate.test(new TestBean(0)));\r\n    predicate = new BeanPropertyValueEqualsPredicate<>(\"booleanProperty\", null);\r\n    assertFalse(predicate.test(new TestBean(true)));\r\n    predicate = new BeanPropertyValueEqualsPredicate<>(\"floatProperty\", null);\r\n    assertFalse(predicate.test(new TestBean(expectedFloatValue.floatValue())));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\BeanPropertyValueEqualsPredicateTest.java",
  "methodName" : "testEvaluateWithReadOnlyProperty",
  "sourceCode" : "/**\r\n * Test evaluate with read only property.\r\n */\r\n@Test\r\nvoid testEvaluateWithReadOnlyProperty() {\r\n    final TestBean testBean = new TestBean();\r\n    final BeanPropertyValueEqualsPredicate<TestBean, String> predicate = new BeanPropertyValueEqualsPredicate<>(\"readOnlyProperty\", testBean.getReadOnlyProperty());\r\n    assertTrue(predicate.test(new TestBean()));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\BeanPropertyValueEqualsPredicateTest.java",
  "methodName" : "testEvaluateWithSimpleStringProperty",
  "sourceCode" : "/**\r\n * Test evaluate with simple String property.\r\n */\r\n@Test\r\nvoid testEvaluateWithSimpleStringProperty() {\r\n    final BeanPropertyValueEqualsPredicate<TestBean, String> predicate = new BeanPropertyValueEqualsPredicate<>(\"stringProperty\", \"foo\");\r\n    assertTrue(predicate.test(new TestBean(\"foo\")));\r\n    assertFalse(predicate.test(new TestBean(\"bar\")));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\BeanPropertyValueEqualsPredicateTest.java",
  "methodName" : "testEvaluateWithSimpleStringPropertyWithNullValues",
  "sourceCode" : "/**\r\n * Test evaluate with simple String property and null values.\r\n */\r\n@Test\r\nvoid testEvaluateWithSimpleStringPropertyWithNullValues() {\r\n    final BeanPropertyValueEqualsPredicate<TestBean, String> predicate = new BeanPropertyValueEqualsPredicate<>(\"stringProperty\", null);\r\n    assertTrue(predicate.test(new TestBean((String) null)));\r\n    assertFalse(predicate.test(new TestBean(\"bar\")));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\BeanPropertyValueEqualsPredicateTest.java",
  "methodName" : "testEvaluateWithWriteOnlyProperty",
  "sourceCode" : "/**\r\n * Test evaluate with write only property.\r\n */\r\n@Test\r\nvoid testEvaluateWithWriteOnlyProperty() {\r\n    try {\r\n        new BeanPropertyValueEqualsPredicate<TestBean, String>(\"writeOnlyProperty\", null).test(new TestBean());\r\n    } catch (final IllegalArgumentException e) {\r\n        /* This is what should happen */\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\BeanToPropertyValueTransformerTest.java",
  "methodName" : "testTransformWithIndexedProperty",
  "sourceCode" : "/**\r\n * Test transform with indexed property.\r\n */\r\n@Test\r\nvoid testTransformWithIndexedProperty() {\r\n    final BeanToPropertyValueTransformer<TestBean, Integer> transformer = new BeanToPropertyValueTransformer<>(\"intIndexed[0]\");\r\n    final TestBean testBean = new TestBean();\r\n    testBean.setIntIndexed(0, expectedIntegerValue.intValue());\r\n    assertEquals(expectedIntegerValue, transformer.apply(testBean));\r\n    // test index out of range\r\n    final BeanToPropertyValueTransformer<TestBean, Integer> transformer2 = new BeanToPropertyValueTransformer<>(\"intIndexed[9999]\");\r\n    assertThrows(ArrayIndexOutOfBoundsException.class, () -> transformer2.apply(testBean));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\BeanToPropertyValueTransformerTest.java",
  "methodName" : "testTransformWithInvalidProperty",
  "sourceCode" : "/**\r\n * Test transform with invalid property.\r\n */\r\n@Test\r\nvoid testTransformWithInvalidProperty() {\r\n    assertThrows(IllegalArgumentException.class, () -> new BeanToPropertyValueTransformer<>(\"bogusProperty\").apply(new TestBean()));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\BeanToPropertyValueTransformerTest.java",
  "methodName" : "testTransformWithMappedProperty",
  "sourceCode" : "/**\r\n * Test transform with mapped property.\r\n */\r\n@Test\r\nvoid testTransformWithMappedProperty() {\r\n    BeanToPropertyValueTransformer<TestBean, String> transformer = new BeanToPropertyValueTransformer<>(\"mappedProperty(test-key)\");\r\n    final TestBean testBean = new TestBean();\r\n    // try a valid key\r\n    testBean.setMappedProperty(\"test-key\", \"test-value\");\r\n    assertEquals(\"test-value\", transformer.apply(testBean));\r\n    // now try an invalid key\r\n    transformer = new BeanToPropertyValueTransformer<>(\"mappedProperty(bogus-key)\");\r\n    assertNull(transformer.apply(testBean));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\BeanToPropertyValueTransformerTest.java",
  "methodName" : "testTransformWithNestedIndexedProperty",
  "sourceCode" : "/**\r\n * Test transform with nested indexed property.\r\n */\r\n@Test\r\nvoid testTransformWithNestedIndexedProperty() {\r\n    final BeanToPropertyValueTransformer<TestBean, Integer> transformer = new BeanToPropertyValueTransformer<>(\"anotherNested.intIndexed[0]\");\r\n    final TestBean testBean = new TestBean();\r\n    final TestBean nestedBean = new TestBean();\r\n    nestedBean.setIntIndexed(0, expectedIntegerValue.intValue());\r\n    testBean.setAnotherNested(nestedBean);\r\n    assertEquals(expectedIntegerValue, transformer.apply(testBean));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\BeanToPropertyValueTransformerTest.java",
  "methodName" : "testTransformWithNestedProperty",
  "sourceCode" : "/**\r\n * Test transform with nested property.\r\n */\r\n@Test\r\nvoid testTransformWithNestedProperty() {\r\n    final BeanToPropertyValueTransformer<TestBean, String> transformer = new BeanToPropertyValueTransformer<>(\"anotherNested.stringProperty\");\r\n    final TestBean testBean = new TestBean();\r\n    final TestBean nestedBean = new TestBean(\"foo\");\r\n    testBean.setAnotherNested(nestedBean);\r\n    assertEquals(\"foo\", transformer.apply(testBean));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\BeanToPropertyValueTransformerTest.java",
  "methodName" : "testTransformWithNullInPath",
  "sourceCode" : "/**\r\n * Test transform with null in property path.\r\n */\r\n@Test\r\nvoid testTransformWithNullInPath() {\r\n    final BeanToPropertyValueTransformer<TestBean, String> transformer = new BeanToPropertyValueTransformer<>(\"anotherNested.stringProperty\");\r\n    assertThrows(IllegalArgumentException.class, () -> transformer.apply(new TestBean()));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\BeanToPropertyValueTransformerTest.java",
  "methodName" : "testTransformWithNullInPathAndIgnoreTrue",
  "sourceCode" : "/**\r\n * Test transform with null in property path and ignore = true.\r\n */\r\n@Test\r\nvoid testTransformWithNullInPathAndIgnoreTrue() {\r\n    final BeanToPropertyValueTransformer<TestBean, String> transformer = new BeanToPropertyValueTransformer<>(\"anotherNested.stringProperty\", true);\r\n    assertNull(transformer.apply(new TestBean()));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\BeanToPropertyValueTransformerTest.java",
  "methodName" : "testTransformWithReadOnlyProperty",
  "sourceCode" : "/**\r\n * Test transform with read only property.\r\n */\r\n@Test\r\nvoid testTransformWithReadOnlyProperty() {\r\n    final BeanToPropertyValueTransformer<TestBean, String> transformer = new BeanToPropertyValueTransformer<>(\"readOnlyProperty\");\r\n    final TestBean testBean = new TestBean();\r\n    assertEquals(testBean.getReadOnlyProperty(), transformer.apply(testBean));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\BeanToPropertyValueTransformerTest.java",
  "methodName" : "testTransformWithSimpleBooleanProperty",
  "sourceCode" : "/**\r\n * Test transform with simple boolean property.\r\n */\r\n@Test\r\nvoid testTransformWithSimpleBooleanProperty() {\r\n    final BeanToPropertyValueTransformer<TestBean, Boolean> transformer = new BeanToPropertyValueTransformer<>(\"booleanProperty\");\r\n    final TestBean testBean = new TestBean(expectedBooleanValue.booleanValue());\r\n    assertEquals(expectedBooleanValue, transformer.apply(testBean));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\BeanToPropertyValueTransformerTest.java",
  "methodName" : "testTransformWithSimpleByteProperty",
  "sourceCode" : "/**\r\n * Test transform with simple byte property.\r\n */\r\n@Test\r\nvoid testTransformWithSimpleByteProperty() {\r\n    final BeanToPropertyValueTransformer<TestBean, Byte> transformer = new BeanToPropertyValueTransformer<>(\"byteProperty\");\r\n    final TestBean testBean = new TestBean();\r\n    testBean.setByteProperty(expectedByteValue.byteValue());\r\n    assertEquals(expectedByteValue, transformer.apply(testBean));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\BeanToPropertyValueTransformerTest.java",
  "methodName" : "testTransformWithSimpleDoubleProperty",
  "sourceCode" : "/**\r\n * Test transform with simple double property.\r\n */\r\n@Test\r\nvoid testTransformWithSimpleDoubleProperty() {\r\n    final BeanToPropertyValueTransformer<TestBean, Double> transformer = new BeanToPropertyValueTransformer<>(\"doubleProperty\");\r\n    final TestBean testBean = new TestBean(expectedDoubleValue.doubleValue());\r\n    assertEquals(expectedDoubleValue, transformer.apply(testBean));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\BeanToPropertyValueTransformerTest.java",
  "methodName" : "testTransformWithSimpleFloatProperty",
  "sourceCode" : "/**\r\n * Test transform with simple float property.\r\n */\r\n@Test\r\nvoid testTransformWithSimpleFloatProperty() {\r\n    final BeanToPropertyValueTransformer<TestBean, Float> transformer = new BeanToPropertyValueTransformer<>(\"floatProperty\");\r\n    final TestBean testBean = new TestBean(expectedFloatValue.floatValue());\r\n    assertEquals(expectedFloatValue, transformer.apply(testBean));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\BeanToPropertyValueTransformerTest.java",
  "methodName" : "testTransformWithSimpleIntProperty",
  "sourceCode" : "/**\r\n * Test transform with simple int property.\r\n */\r\n@Test\r\nvoid testTransformWithSimpleIntProperty() {\r\n    final BeanToPropertyValueTransformer<TestBean, Integer> transformer = new BeanToPropertyValueTransformer<>(\"intProperty\");\r\n    final TestBean testBean = new TestBean(expectedIntegerValue.intValue());\r\n    assertEquals(expectedIntegerValue, transformer.apply(testBean));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\BeanToPropertyValueTransformerTest.java",
  "methodName" : "testTransformWithSimpleLongProperty",
  "sourceCode" : "/**\r\n * Test transform with simple long property.\r\n */\r\n@Test\r\nvoid testTransformWithSimpleLongProperty() {\r\n    final BeanToPropertyValueTransformer<TestBean, Long> transformer = new BeanToPropertyValueTransformer<>(\"longProperty\");\r\n    final TestBean testBean = new TestBean();\r\n    testBean.setLongProperty(expectedLongValue.longValue());\r\n    assertEquals(expectedLongValue, transformer.apply(testBean));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\BeanToPropertyValueTransformerTest.java",
  "methodName" : "testTransformWithSimpleStringProperty",
  "sourceCode" : "/**\r\n * Test transform with simple String property.\r\n */\r\n@Test\r\nvoid testTransformWithSimpleStringProperty() {\r\n    final BeanToPropertyValueTransformer<TestBean, String> transformer = new BeanToPropertyValueTransformer<>(\"stringProperty\");\r\n    final TestBean testBean = new TestBean(\"foo\");\r\n    assertEquals(\"foo\", transformer.apply(testBean));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\BeanToPropertyValueTransformerTest.java",
  "methodName" : "testTransformWithSimpleStringPropertyAndNullValue",
  "sourceCode" : "/**\r\n * Test transform with simple String property and null value.\r\n */\r\n@Test\r\nvoid testTransformWithSimpleStringPropertyAndNullValue() {\r\n    final BeanToPropertyValueTransformer<TestBean, String> transformer = new BeanToPropertyValueTransformer<>(\"stringProperty\");\r\n    final TestBean testBean = new TestBean((String) null);\r\n    assertNull(transformer.apply(testBean));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\BeanToPropertyValueTransformerTest.java",
  "methodName" : "testTransformWithWriteOnlyProperty",
  "sourceCode" : "/**\r\n * Test transform with write only property.\r\n */\r\n@Test\r\nvoid testTransformWithWriteOnlyProperty() {\r\n    try {\r\n        new BeanToPropertyValueTransformer<>(\"writeOnlyProperty\").apply(new TestBean());\r\n    } catch (final IllegalArgumentException e) {\r\n        /* This is what should happen */\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\BeanUtilsBeanTest.java",
  "methodName" : "testArrayPropertyConversion",
  "sourceCode" : "@Test\r\nvoid testArrayPropertyConversion() throws Exception {\r\n    final BeanUtilsBean beanUtils = new BeanUtilsBean(new ConvertUtilsBean(), new PropertyUtilsBean());\r\n    final TestBean bean = new TestBean();\r\n    final String[] results = beanUtils.getArrayProperty(bean, \"intArray\");\r\n    final int[] values = bean.getIntArray();\r\n    assertEquals(results.length, values.length, \"Converted array size not equal to property array size.\");\r\n    for (int i = 0, size = values.length; i < size; i++) {\r\n        assertEquals(values[i] + \"\", results[i], \"Value \" + i + \" incorrectly converted \");\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\BeanUtilsBeanTest.java",
  "methodName" : "testCopyPropertiesDynaBean",
  "sourceCode" : "/**\r\n * Test the copyProperties() method from a DynaBean.\r\n */\r\n@Test\r\nvoid testCopyPropertiesDynaBean() throws Exception {\r\n    // Set up an origin bean with customized properties\r\n    final DynaClass dynaClass = DynaBeanUtilsTest.createDynaClass();\r\n    DynaBean orig = null;\r\n    orig = dynaClass.newInstance();\r\n    orig.set(\"booleanProperty\", Boolean.FALSE);\r\n    orig.set(\"byteProperty\", Byte.valueOf((byte) 111));\r\n    orig.set(\"doubleProperty\", Double.valueOf(333.33));\r\n    orig.set(\"dupProperty\", new String[] { \"New 0\", \"New 1\", \"New 2\" });\r\n    orig.set(\"intArray\", new int[] { 100, 200, 300 });\r\n    orig.set(\"intProperty\", Integer.valueOf(333));\r\n    orig.set(\"longProperty\", Long.valueOf(3333));\r\n    orig.set(\"shortProperty\", Short.valueOf((short) 33));\r\n    orig.set(\"stringArray\", new String[] { \"New 0\", \"New 1\" });\r\n    orig.set(\"stringProperty\", \"Custom string\");\r\n    // Copy the origin bean to our destination test bean\r\n    BeanUtils.copyProperties(bean, orig);\r\n    // Validate the results for scalar properties\r\n    assertEquals(false, bean.getBooleanProperty(), \"Copied boolean property\");\r\n    assertEquals((byte) 111, bean.getByteProperty(), \"Copied byte property\");\r\n    assertEquals(333.33, bean.getDoubleProperty(), 0.005, \"Copied double property\");\r\n    assertEquals(333, bean.getIntProperty(), \"Copied int property\");\r\n    assertEquals(3333, bean.getLongProperty(), \"Copied long property\");\r\n    assertEquals((short) 33, bean.getShortProperty(), \"Copied short property\");\r\n    assertEquals(\"Custom string\", bean.getStringProperty(), \"Copied string property\");\r\n    // Validate the results for array properties\r\n    final String[] dupProperty = bean.getDupProperty();\r\n    assertNotNull(dupProperty, \"dupProperty present\");\r\n    assertEquals(3, dupProperty.length, \"dupProperty length\");\r\n    assertEquals(\"New 0\", dupProperty[0], \"dupProperty[0]\");\r\n    assertEquals(\"New 1\", dupProperty[1], \"dupProperty[1]\");\r\n    assertEquals(\"New 2\", dupProperty[2], \"dupProperty[2]\");\r\n    final int[] intArray = bean.getIntArray();\r\n    assertNotNull(intArray, \"intArray present\");\r\n    assertEquals(3, intArray.length, \"intArray length\");\r\n    assertEquals(100, intArray[0], \"intArray[0]\");\r\n    assertEquals(200, intArray[1], \"intArray[1]\");\r\n    assertEquals(300, intArray[2], \"intArray[2]\");\r\n    final String[] stringArray = bean.getStringArray();\r\n    assertNotNull(stringArray, \"stringArray present\");\r\n    assertEquals(2, stringArray.length, \"stringArray length\");\r\n    assertEquals(\"New 0\", stringArray[0], \"stringArray[0]\");\r\n    assertEquals(\"New 1\", stringArray[1], \"stringArray[1]\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\BeanUtilsBeanTest.java",
  "methodName" : "testCopyPropertiesMap",
  "sourceCode" : "/**\r\n * Test copyProperties() when the origin is a {@code Map}.\r\n */\r\n@Test\r\nvoid testCopyPropertiesMap() throws Exception {\r\n    final Map<String, Object> map = new HashMap<>();\r\n    map.put(\"booleanProperty\", \"false\");\r\n    map.put(\"byteProperty\", \"111\");\r\n    map.put(\"doubleProperty\", \"333.0\");\r\n    map.put(\"dupProperty\", new String[] { \"New 0\", \"New 1\", \"New 2\" });\r\n    map.put(\"floatProperty\", \"222.0\");\r\n    map.put(\"intArray\", new String[] { \"0\", \"100\", \"200\" });\r\n    map.put(\"intProperty\", \"111\");\r\n    map.put(\"longProperty\", \"444\");\r\n    map.put(\"shortProperty\", \"555\");\r\n    map.put(\"stringProperty\", \"New String Property\");\r\n    BeanUtils.copyProperties(bean, map);\r\n    // Scalar properties\r\n    assertEquals(false, bean.getBooleanProperty(), \"booleanProperty\");\r\n    assertEquals((byte) 111, bean.getByteProperty(), \"byteProperty\");\r\n    assertEquals(333.0, bean.getDoubleProperty(), 0.005, \"doubleProperty\");\r\n    assertEquals((float) 222.0, bean.getFloatProperty(), (float) 0.005, \"floatProperty\");\r\n    assertEquals(111, bean.getIntProperty(), \"longProperty\");\r\n    assertEquals(444, bean.getLongProperty(), \"longProperty\");\r\n    assertEquals((short) 555, bean.getShortProperty(), \"shortProperty\");\r\n    assertEquals(\"New String Property\", bean.getStringProperty(), \"stringProperty\");\r\n    // Indexed Properties\r\n    final String[] dupProperty = bean.getDupProperty();\r\n    assertNotNull(dupProperty, \"dupProperty present\");\r\n    assertEquals(3, dupProperty.length, \"dupProperty length\");\r\n    assertEquals(\"New 0\", dupProperty[0], \"dupProperty[0]\");\r\n    assertEquals(\"New 1\", dupProperty[1], \"dupProperty[1]\");\r\n    assertEquals(\"New 2\", dupProperty[2], \"dupProperty[2]\");\r\n    final int[] intArray = bean.getIntArray();\r\n    assertNotNull(intArray, \"intArray present\");\r\n    assertEquals(3, intArray.length, \"intArray length\");\r\n    assertEquals(0, intArray[0], \"intArray[0]\");\r\n    assertEquals(100, intArray[1], \"intArray[1]\");\r\n    assertEquals(200, intArray[2], \"intArray[2]\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\BeanUtilsBeanTest.java",
  "methodName" : "testCopyPropertiesStandard",
  "sourceCode" : "/**\r\n * Test the copyProperties() method from a standard JavaBean.\r\n */\r\n@Test\r\nvoid testCopyPropertiesStandard() throws Exception {\r\n    // Set up an origin bean with customized properties\r\n    final TestBean orig = new TestBean();\r\n    orig.setBooleanProperty(false);\r\n    orig.setByteProperty((byte) 111);\r\n    orig.setDoubleProperty(333.33);\r\n    orig.setDupProperty(new String[] { \"New 0\", \"New 1\", \"New 2\" });\r\n    orig.setIntArray(new int[] { 100, 200, 300 });\r\n    orig.setIntProperty(333);\r\n    orig.setLongProperty(3333);\r\n    orig.setShortProperty((short) 33);\r\n    orig.setStringArray(new String[] { \"New 0\", \"New 1\" });\r\n    orig.setStringProperty(\"Custom string\");\r\n    // Copy the origin bean to our destination test bean\r\n    BeanUtils.copyProperties(bean, orig);\r\n    // Validate the results for scalar properties\r\n    assertEquals(false, bean.getBooleanProperty(), \"Copied boolean property\");\r\n    assertEquals((byte) 111, bean.getByteProperty(), \"Copied byte property\");\r\n    assertEquals(333.33, bean.getDoubleProperty(), 0.005, \"Copied double property\");\r\n    assertEquals(333, bean.getIntProperty(), \"Copied int property\");\r\n    assertEquals(3333, bean.getLongProperty(), \"Copied long property\");\r\n    assertEquals((short) 33, bean.getShortProperty(), \"Copied short property\");\r\n    assertEquals(\"Custom string\", bean.getStringProperty(), \"Copied string property\");\r\n    // Validate the results for array properties\r\n    final String[] dupProperty = bean.getDupProperty();\r\n    assertNotNull(dupProperty, \"dupProperty present\");\r\n    assertEquals(3, dupProperty.length, \"dupProperty length\");\r\n    assertEquals(\"New 0\", dupProperty[0], \"dupProperty[0]\");\r\n    assertEquals(\"New 1\", dupProperty[1], \"dupProperty[1]\");\r\n    assertEquals(\"New 2\", dupProperty[2], \"dupProperty[2]\");\r\n    final int[] intArray = bean.getIntArray();\r\n    assertNotNull(intArray, \"intArray present\");\r\n    assertEquals(3, intArray.length, \"intArray length\");\r\n    assertEquals(100, intArray[0], \"intArray[0]\");\r\n    assertEquals(200, intArray[1], \"intArray[1]\");\r\n    assertEquals(300, intArray[2], \"intArray[2]\");\r\n    final String[] stringArray = bean.getStringArray();\r\n    assertNotNull(stringArray, \"stringArray present\");\r\n    assertEquals(2, stringArray.length, \"stringArray length\");\r\n    assertEquals(\"New 0\", stringArray[0], \"stringArray[0]\");\r\n    assertEquals(\"New 1\", stringArray[1], \"stringArray[1]\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\BeanUtilsBeanTest.java",
  "methodName" : "testCopyPropertyByte",
  "sourceCode" : "/**\r\n * Test narrowing and widening conversions on byte.\r\n */\r\n@Test\r\nvoid testCopyPropertyByte() throws Exception {\r\n    BeanUtils.copyProperty(bean, \"byteProperty\", Byte.valueOf((byte) 123));\r\n    assertEquals((byte) 123, bean.getByteProperty());\r\n    BeanUtils.copyProperty(bean, \"byteProperty\", Double.valueOf(123));\r\n    assertEquals((byte) 123, bean.getByteProperty());\r\n    BeanUtils.copyProperty(bean, \"byteProperty\", Float.valueOf(123));\r\n    assertEquals((byte) 123, bean.getByteProperty());\r\n    BeanUtils.copyProperty(bean, \"byteProperty\", Integer.valueOf(123));\r\n    assertEquals((byte) 123, bean.getByteProperty());\r\n    BeanUtils.copyProperty(bean, \"byteProperty\", Long.valueOf(123));\r\n    assertEquals((byte) 123, bean.getByteProperty());\r\n    BeanUtils.copyProperty(bean, \"byteProperty\", Short.valueOf((short) 123));\r\n    assertEquals((byte) 123, bean.getByteProperty());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\BeanUtilsBeanTest.java",
  "methodName" : "testCopyPropertyConvert",
  "sourceCode" : "/**\r\n * Test {@code copyProperty()} conversion.\r\n */\r\n@Test\r\nvoid testCopyPropertyConvert() throws Exception {\r\n    BeanUtils.copyProperty(bean, \"dateProperty\", testCalendar);\r\n    assertEquals(testUtilDate, bean.getDateProperty(), \"Calendar --> java.util.Date\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\BeanUtilsBeanTest.java",
  "methodName" : "testCopyPropertyConvertFromString",
  "sourceCode" : "/**\r\n * Test {@code copyProperty()} converting from a String.\r\n */\r\n@Test\r\nvoid testCopyPropertyConvertFromString() throws Exception {\r\n    BeanUtils.copyProperty(bean, \"dateProperty\", testStringDate);\r\n    assertEquals(testUtilDate, bean.getDateProperty(), \"String --> java.util.Date\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\BeanUtilsBeanTest.java",
  "methodName" : "testCopyPropertyConvertToString",
  "sourceCode" : "/**\r\n * Test {@code copyProperty()} converting to a String.\r\n */\r\n@Test\r\nvoid testCopyPropertyConvertToString() throws Exception {\r\n    BeanUtils.copyProperty(bean, \"stringProperty\", testUtilDate);\r\n    assertEquals(testStringDate, bean.getStringProperty(), \"java.util.Date --> String\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\BeanUtilsBeanTest.java",
  "methodName" : "testCopyPropertyConvertToStringArray",
  "sourceCode" : "/**\r\n * Test {@code copyProperty()} converting to a String.\r\n */\r\n@Test\r\nvoid testCopyPropertyConvertToStringArray() throws Exception {\r\n    bean.setStringArray(null);\r\n    BeanUtils.copyProperty(bean, \"stringArray\", new java.util.Date[] { testUtilDate });\r\n    assertEquals(1, bean.getStringArray().length, \"java.util.Date[] --> String[] length\");\r\n    assertEquals(testStringDate, bean.getStringArray()[0], \"java.util.Date[] --> String[] value \");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\BeanUtilsBeanTest.java",
  "methodName" : "testCopyPropertyConvertToStringIndexed",
  "sourceCode" : "/**\r\n * Test {@code copyProperty()} converting to a String on indexed property\r\n */\r\n@Test\r\nvoid testCopyPropertyConvertToStringIndexed() throws Exception {\r\n    bean.setStringArray(new String[1]);\r\n    BeanUtils.copyProperty(bean, \"stringArray[0]\", testUtilDate);\r\n    assertEquals(1, bean.getStringArray().length, \"java.util.Date[] --> String[] length\");\r\n    assertEquals(testStringDate, bean.getStringArray()[0], \"java.util.Date[] --> String[] value \");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\BeanUtilsBeanTest.java",
  "methodName" : "testCopyPropertyDouble",
  "sourceCode" : "/**\r\n * Test narrowing and widening conversions on double.\r\n */\r\n@Test\r\nvoid testCopyPropertyDouble() throws Exception {\r\n    BeanUtils.copyProperty(bean, \"doubleProperty\", Byte.valueOf((byte) 123));\r\n    assertEquals(123, bean.getDoubleProperty(), 0.005);\r\n    BeanUtils.copyProperty(bean, \"doubleProperty\", Double.valueOf(123));\r\n    assertEquals(123, bean.getDoubleProperty(), 0.005);\r\n    BeanUtils.copyProperty(bean, \"doubleProperty\", Float.valueOf(123));\r\n    assertEquals(123, bean.getDoubleProperty(), 0.005);\r\n    BeanUtils.copyProperty(bean, \"doubleProperty\", Integer.valueOf(123));\r\n    assertEquals(123, bean.getDoubleProperty(), 0.005);\r\n    BeanUtils.copyProperty(bean, \"doubleProperty\", Long.valueOf(123));\r\n    assertEquals(123, bean.getDoubleProperty(), 0.005);\r\n    BeanUtils.copyProperty(bean, \"doubleProperty\", Short.valueOf((short) 123));\r\n    assertEquals(123, bean.getDoubleProperty(), 0.005);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\BeanUtilsBeanTest.java",
  "methodName" : "testCopyPropertyFloat",
  "sourceCode" : "/**\r\n * Test narrowing and widening conversions on float.\r\n */\r\n@Test\r\nvoid testCopyPropertyFloat() throws Exception {\r\n    BeanUtils.copyProperty(bean, \"floatProperty\", Byte.valueOf((byte) 123));\r\n    assertEquals(123, bean.getFloatProperty(), 0.005);\r\n    BeanUtils.copyProperty(bean, \"floatProperty\", Double.valueOf(123));\r\n    assertEquals(123, bean.getFloatProperty(), 0.005);\r\n    BeanUtils.copyProperty(bean, \"floatProperty\", Float.valueOf(123));\r\n    assertEquals(123, bean.getFloatProperty(), 0.005);\r\n    BeanUtils.copyProperty(bean, \"floatProperty\", Integer.valueOf(123));\r\n    assertEquals(123, bean.getFloatProperty(), 0.005);\r\n    BeanUtils.copyProperty(bean, \"floatProperty\", Long.valueOf(123));\r\n    assertEquals(123, bean.getFloatProperty(), 0.005);\r\n    BeanUtils.copyProperty(bean, \"floatProperty\", Short.valueOf((short) 123));\r\n    assertEquals(123, bean.getFloatProperty(), 0.005);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\BeanUtilsBeanTest.java",
  "methodName" : "testCopyPropertyInteger",
  "sourceCode" : "/**\r\n * Test narrowing and widening conversions on int.\r\n */\r\n@Test\r\nvoid testCopyPropertyInteger() throws Exception {\r\n    BeanUtils.copyProperty(bean, \"longProperty\", Byte.valueOf((byte) 123));\r\n    assertEquals(123, bean.getIntProperty());\r\n    BeanUtils.copyProperty(bean, \"longProperty\", Double.valueOf(123));\r\n    assertEquals(123, bean.getIntProperty());\r\n    BeanUtils.copyProperty(bean, \"longProperty\", Float.valueOf(123));\r\n    assertEquals(123, bean.getIntProperty());\r\n    BeanUtils.copyProperty(bean, \"longProperty\", Integer.valueOf(123));\r\n    assertEquals(123, bean.getIntProperty());\r\n    BeanUtils.copyProperty(bean, \"longProperty\", Long.valueOf(123));\r\n    assertEquals(123, bean.getIntProperty());\r\n    BeanUtils.copyProperty(bean, \"longProperty\", Short.valueOf((short) 123));\r\n    assertEquals(123, bean.getIntProperty());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\BeanUtilsBeanTest.java",
  "methodName" : "testCopyPropertyLong",
  "sourceCode" : "/**\r\n * Test narrowing and widening conversions on long.\r\n */\r\n@Test\r\nvoid testCopyPropertyLong() throws Exception {\r\n    BeanUtils.copyProperty(bean, \"longProperty\", Byte.valueOf((byte) 123));\r\n    assertEquals(123, bean.getLongProperty());\r\n    BeanUtils.copyProperty(bean, \"longProperty\", Double.valueOf(123));\r\n    assertEquals(123, bean.getLongProperty());\r\n    BeanUtils.copyProperty(bean, \"longProperty\", Float.valueOf(123));\r\n    assertEquals(123, bean.getLongProperty());\r\n    BeanUtils.copyProperty(bean, \"longProperty\", Integer.valueOf(123));\r\n    assertEquals(123, bean.getLongProperty());\r\n    BeanUtils.copyProperty(bean, \"longProperty\", Long.valueOf(123));\r\n    assertEquals(123, bean.getLongProperty());\r\n    BeanUtils.copyProperty(bean, \"longProperty\", Short.valueOf((short) 123));\r\n    assertEquals(123, bean.getLongProperty());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\BeanUtilsBeanTest.java",
  "methodName" : "testCopyPropertyNestedIndexedArray",
  "sourceCode" : "/**\r\n * Test copying a property using a nested indexed array expression, with and without conversions.\r\n */\r\n@Test\r\nvoid testCopyPropertyNestedIndexedArray() throws Exception {\r\n    final int[] origArray = { 0, 10, 20, 30, 40 };\r\n    final int[] intArray = { 0, 0, 0 };\r\n    bean.getNested().setIntArray(intArray);\r\n    final int[] intChanged = { 0, 0, 0 };\r\n    // No conversion required\r\n    BeanUtils.copyProperty(bean, \"nested.intArray[1]\", Integer.valueOf(1));\r\n    checkIntArray(bean.getIntArray(), origArray);\r\n    intChanged[1] = 1;\r\n    checkIntArray(bean.getNested().getIntArray(), intChanged);\r\n    // Widening conversion required\r\n    BeanUtils.copyProperty(bean, \"nested.intArray[1]\", Byte.valueOf((byte) 2));\r\n    checkIntArray(bean.getIntArray(), origArray);\r\n    intChanged[1] = 2;\r\n    checkIntArray(bean.getNested().getIntArray(), intChanged);\r\n    // Narrowing conversion required\r\n    BeanUtils.copyProperty(bean, \"nested.intArray[1]\", Long.valueOf(3));\r\n    checkIntArray(bean.getIntArray(), origArray);\r\n    intChanged[1] = 3;\r\n    checkIntArray(bean.getNested().getIntArray(), intChanged);\r\n    // String conversion required\r\n    BeanUtils.copyProperty(bean, \"nested.intArray[1]\", \"4\");\r\n    checkIntArray(bean.getIntArray(), origArray);\r\n    intChanged[1] = 4;\r\n    checkIntArray(bean.getNested().getIntArray(), intChanged);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\BeanUtilsBeanTest.java",
  "methodName" : "testCopyPropertyNestedMappedMap",
  "sourceCode" : "/**\r\n * Test copying a property using a nested mapped map property.\r\n */\r\n@Test\r\nvoid testCopyPropertyNestedMappedMap() throws Exception {\r\n    final Map<String, Object> origMap = new HashMap<>();\r\n    origMap.put(\"First Key\", \"First Value\");\r\n    origMap.put(\"Second Key\", \"Second Value\");\r\n    final Map<String, Object> changedMap = new HashMap<>();\r\n    changedMap.put(\"First Key\", \"First Value\");\r\n    changedMap.put(\"Second Key\", \"Second Value\");\r\n    // No conversion required\r\n    BeanUtils.copyProperty(bean, \"nested.mapProperty(Second Key)\", \"New Second Value\");\r\n    checkMap(bean.getMapProperty(), origMap);\r\n    changedMap.put(\"Second Key\", \"New Second Value\");\r\n    checkMap(bean.getNested().getMapProperty(), changedMap);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\BeanUtilsBeanTest.java",
  "methodName" : "testCopyPropertyNestedSimple",
  "sourceCode" : "/**\r\n * Test copying a property using a nested simple expression, with and without conversions.\r\n */\r\n@Test\r\nvoid testCopyPropertyNestedSimple() throws Exception {\r\n    bean.setIntProperty(0);\r\n    bean.getNested().setIntProperty(0);\r\n    // No conversion required\r\n    BeanUtils.copyProperty(bean, \"nested.intProperty\", Integer.valueOf(1));\r\n    assertNotNull(bean.getNested());\r\n    assertEquals(0, bean.getIntProperty());\r\n    assertEquals(1, bean.getNested().getIntProperty());\r\n    // Widening conversion required\r\n    BeanUtils.copyProperty(bean, \"nested.intProperty\", Byte.valueOf((byte) 2));\r\n    assertNotNull(bean.getNested());\r\n    assertEquals(0, bean.getIntProperty());\r\n    assertEquals(2, bean.getNested().getIntProperty());\r\n    // Narrowing conversion required\r\n    BeanUtils.copyProperty(bean, \"nested.intProperty\", Long.valueOf(3));\r\n    assertNotNull(bean.getNested());\r\n    assertEquals(0, bean.getIntProperty());\r\n    assertEquals(3, bean.getNested().getIntProperty());\r\n    // String conversion required\r\n    BeanUtils.copyProperty(bean, \"nested.intProperty\", \"4\");\r\n    assertNotNull(bean.getNested());\r\n    assertEquals(0, bean.getIntProperty());\r\n    assertEquals(4, bean.getNested().getIntProperty());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\BeanUtilsBeanTest.java",
  "methodName" : "testCopyPropertyNull",
  "sourceCode" : "/**\r\n * Test copying a null property value.\r\n */\r\n@Test\r\nvoid testCopyPropertyNull() throws Exception {\r\n    bean.setNullProperty(\"non-null value\");\r\n    BeanUtils.copyProperty(bean, \"nullProperty\", null);\r\n    assertNull(bean.getNullProperty(), \"nullProperty is null\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\BeanUtilsBeanTest.java",
  "methodName" : "testCopyPropertyShort",
  "sourceCode" : "/**\r\n * Test narrowing and widening conversions on short.\r\n */\r\n@Test\r\nvoid testCopyPropertyShort() throws Exception {\r\n    BeanUtils.copyProperty(bean, \"shortProperty\", Byte.valueOf((byte) 123));\r\n    assertEquals((short) 123, bean.getShortProperty());\r\n    BeanUtils.copyProperty(bean, \"shortProperty\", Double.valueOf(123));\r\n    assertEquals((short) 123, bean.getShortProperty());\r\n    BeanUtils.copyProperty(bean, \"shortProperty\", Float.valueOf(123));\r\n    assertEquals((short) 123, bean.getShortProperty());\r\n    BeanUtils.copyProperty(bean, \"shortProperty\", Integer.valueOf(123));\r\n    assertEquals((short) 123, bean.getShortProperty());\r\n    BeanUtils.copyProperty(bean, \"shortProperty\", Long.valueOf(123));\r\n    assertEquals((short) 123, bean.getShortProperty());\r\n    BeanUtils.copyProperty(bean, \"shortProperty\", Short.valueOf((short) 123));\r\n    assertEquals((short) 123, bean.getShortProperty());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\BeanUtilsBeanTest.java",
  "methodName" : "testCopyPropertyWriteOnly",
  "sourceCode" : "/**\r\n * Test copying a new value to a write-only property, with and without conversions.\r\n */\r\n@Test\r\nvoid testCopyPropertyWriteOnly() throws Exception {\r\n    bean.setWriteOnlyProperty(\"Original value\");\r\n    // No conversion required\r\n    BeanUtils.copyProperty(bean, \"writeOnlyProperty\", \"New value\");\r\n    assertEquals(\"New value\", bean.getWriteOnlyPropertyValue());\r\n    // Integer->String conversion required\r\n    BeanUtils.copyProperty(bean, \"writeOnlyProperty\", Integer.valueOf(123));\r\n    assertEquals(\"123\", bean.getWriteOnlyPropertyValue());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\BeanUtilsBeanTest.java",
  "methodName" : "testDescribe",
  "sourceCode" : "/**\r\n * Test the describe() method.\r\n */\r\n@Test\r\nvoid testDescribe() throws Exception {\r\n    assertTrue(BeanUtils.describe(null).isEmpty());\r\n    Map<String, String> map = null;\r\n    map = BeanUtils.describe(bean);\r\n    // Verify existence of all the properties that should be present\r\n    for (final String describe : describes) {\r\n        assertTrue(map.containsKey(describe), \"Property '\" + describe + \"' is present\");\r\n    }\r\n    assertTrue(!map.containsKey(\"writeOnlyProperty\"), \"Property 'writeOnlyProperty' is not present\");\r\n    // Verify the values of scalar properties\r\n    assertEquals(\"true\", map.get(\"booleanProperty\"), \"Value of 'booleanProperty'\");\r\n    assertEquals(\"121\", map.get(\"byteProperty\"), \"Value of 'byteProperty'\");\r\n    assertEquals(\"321.0\", map.get(\"doubleProperty\"), \"Value of 'doubleProperty'\");\r\n    assertEquals(\"123.0\", map.get(\"floatProperty\"), \"Value of 'floatProperty'\");\r\n    assertEquals(\"123\", map.get(\"intProperty\"), \"Value of 'intProperty'\");\r\n    assertEquals(\"321\", map.get(\"longProperty\"), \"Value of 'longProperty'\");\r\n    assertEquals(\"987\", map.get(\"shortProperty\"), \"Value of 'shortProperty'\");\r\n    assertEquals(\"This is a string\", map.get(\"stringProperty\"), \"Value of 'stringProperty'\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\BeanUtilsBeanTest.java",
  "methodName" : "testGetArrayProperty",
  "sourceCode" : "/**\r\n * tests the string and int arrays of TestBean\r\n */\r\n@Test\r\nvoid testGetArrayProperty() throws Exception {\r\n    String[] arr = BeanUtils.getArrayProperty(bean, \"stringArray\");\r\n    final String[] comp = bean.getStringArray();\r\n    assertEquals(comp.length, arr.length, \"String array length = \" + comp.length);\r\n    arr = BeanUtils.getArrayProperty(bean, \"intArray\");\r\n    final int[] iarr = bean.getIntArray();\r\n    assertEquals(iarr.length, arr.length, \"String array length = \" + iarr.length);\r\n    // Test property which isn't array or collection\r\n    arr = BeanUtils.getArrayProperty(bean, \"shortProperty\");\r\n    final String shortAsString = \"\" + bean.getShortProperty();\r\n    assertEquals(1, arr.length, \"Short List Test lth\");\r\n    assertEquals(shortAsString, arr[0], \"Short Test value\");\r\n    // Test comma delimited list\r\n    bean.setStringProperty(\"ABC\");\r\n    arr = BeanUtils.getArrayProperty(bean, \"stringProperty\");\r\n    assertEquals(1, arr.length, \"Delimited List Test lth\");\r\n    assertEquals(\"ABC\", arr[0], \"Delimited List Test value1\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\BeanUtilsBeanTest.java",
  "methodName" : "testGetArrayPropertyDate",
  "sourceCode" : "/**\r\n * Test {@code getArrayProperty()} converting to a String.\r\n */\r\n@Test\r\nvoid testGetArrayPropertyDate() throws Exception {\r\n    String[] value = null;\r\n    bean.setDateArrayProperty(new java.util.Date[] { testUtilDate });\r\n    value = BeanUtils.getArrayProperty(bean, \"dateArrayProperty\");\r\n    assertEquals(1, value.length, \"java.util.Date[] --> String[] length\");\r\n    assertEquals(testStringDate, value[0], \"java.util.Date[] --> String[] value \");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\BeanUtilsBeanTest.java",
  "methodName" : "testGetGeneralProperty",
  "sourceCode" : "/**\r\n * tests getting a 'whatever' property\r\n */\r\n@Test\r\nvoid testGetGeneralProperty() throws Exception {\r\n    final String val = BeanUtils.getProperty(bean, \"nested.intIndexed[2]\");\r\n    final String comp = String.valueOf(bean.getIntIndexed(2));\r\n    assertEquals(val, comp, \"nested.intIndexed[2] == \" + comp);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\BeanUtilsBeanTest.java",
  "methodName" : "testGetIndexedProperty1",
  "sourceCode" : "/**\r\n * tests getting an indexed property\r\n */\r\n@Test\r\nvoid testGetIndexedProperty1() throws Exception {\r\n    String val = BeanUtils.getIndexedProperty(bean, \"intIndexed[3]\");\r\n    String comp = String.valueOf(bean.getIntIndexed(3));\r\n    assertEquals(val, comp, \"intIndexed[3] == \" + comp);\r\n    val = BeanUtils.getIndexedProperty(bean, \"stringIndexed[3]\");\r\n    comp = bean.getStringIndexed(3);\r\n    assertEquals(val, comp, \"stringIndexed[3] == \" + comp);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\BeanUtilsBeanTest.java",
  "methodName" : "testGetIndexedProperty2",
  "sourceCode" : "/**\r\n * tests getting an indexed property\r\n */\r\n@Test\r\nvoid testGetIndexedProperty2() throws Exception {\r\n    String val = BeanUtils.getIndexedProperty(bean, \"intIndexed\", 3);\r\n    String comp = String.valueOf(bean.getIntIndexed(3));\r\n    assertEquals(val, comp, \"intIndexed,3 == \" + comp);\r\n    val = BeanUtils.getIndexedProperty(bean, \"stringIndexed\", 3);\r\n    comp = bean.getStringIndexed(3);\r\n    assertEquals(val, comp, \"stringIndexed,3 == \" + comp);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\BeanUtilsBeanTest.java",
  "methodName" : "testGetIndexedPropertyDate",
  "sourceCode" : "/**\r\n * Test {@code getArrayProperty()} converting to a String.\r\n */\r\n@Test\r\nvoid testGetIndexedPropertyDate() throws Exception {\r\n    String value = null;\r\n    bean.setDateArrayProperty(new java.util.Date[] { testUtilDate });\r\n    value = BeanUtils.getIndexedProperty(bean, \"dateArrayProperty[0]\");\r\n    assertEquals(testStringDate, value, \"java.util.Date[0] --> String\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\BeanUtilsBeanTest.java",
  "methodName" : "testGetMappedProperty2Args",
  "sourceCode" : "@Test\r\nvoid testGetMappedProperty2Args() throws Exception {\r\n    assertThrows(NullPointerException.class, () -> BeanUtils.getMappedProperty(null, null));\r\n    assertThrows(NullPointerException.class, () -> BeanUtils.getMappedProperty(null, \"\"));\r\n    assertThrows(NullPointerException.class, () -> BeanUtils.getMappedProperty(\"\", null));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\BeanUtilsBeanTest.java",
  "methodName" : "testGetMappedProperty3Args",
  "sourceCode" : "@Test\r\nvoid testGetMappedProperty3Args() throws Exception {\r\n    assertThrows(NullPointerException.class, () -> BeanUtils.getMappedProperty(null, null));\r\n    assertThrows(NullPointerException.class, () -> BeanUtils.getMappedProperty(null, \"\", null));\r\n    assertThrows(NullPointerException.class, () -> BeanUtils.getMappedProperty(\"\", null, null));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\BeanUtilsBeanTest.java",
  "methodName" : "testGetNestedProperty",
  "sourceCode" : "/**\r\n * tests getting a nested property\r\n */\r\n@Test\r\nvoid testGetNestedProperty() throws Exception {\r\n    final String val = BeanUtils.getNestedProperty(bean, \"nested.stringProperty\");\r\n    final String comp = bean.getNested().getStringProperty();\r\n    assertEquals(val, comp, \"nested.StringProperty == \" + comp);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\BeanUtilsBeanTest.java",
  "methodName" : "testGetSimpleProperty",
  "sourceCode" : "/**\r\n * tests getting a 'whatever' property\r\n */\r\n@Test\r\nvoid testGetSimpleProperty() throws Exception {\r\n    final String val = BeanUtils.getSimpleProperty(bean, \"shortProperty\");\r\n    final String comp = String.valueOf(bean.getShortProperty());\r\n    assertEquals(val, comp, \"shortProperty == \" + comp);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\BeanUtilsBeanTest.java",
  "methodName" : "testGetSimplePropertyDate",
  "sourceCode" : "/**\r\n * Test {@code getSimpleProperty()} converting to a String.\r\n */\r\n@Test\r\nvoid testGetSimplePropertyDate() throws Exception {\r\n    String value = null;\r\n    bean.setDateProperty(testUtilDate);\r\n    value = BeanUtils.getSimpleProperty(bean, \"dateProperty\");\r\n    assertEquals(testStringDate, value, \"java.util.Date --> String\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\BeanUtilsBeanTest.java",
  "methodName" : "testMappedProperty",
  "sourceCode" : "@Test\r\nvoid testMappedProperty() throws Exception {\r\n    final MappedPropertyTestBean bean = new MappedPropertyTestBean();\r\n    BeanUtils.setProperty(bean, \"mapproperty(this.that.the-other)\", \"some.dotty.value\");\r\n    assertEquals(\"some.dotty.value\", bean.getMapproperty(\"this.that.the-other\"), \"Mapped property set correctly\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\BeanUtilsBeanTest.java",
  "methodName" : "testPopulate",
  "sourceCode" : "@Test\r\nvoid testPopulate() throws Exception {\r\n    BeanUtilsBean.getInstance().populate(null, null);\r\n    BeanUtilsBean.getInstance().populate(\"\", null);\r\n    BeanUtilsBean.getInstance().populate(null, new HashMap<>());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\BeanUtilsBeanTest.java",
  "methodName" : "testPopulateArrayElements",
  "sourceCode" : "/**\r\n * Test populate() method on individual array elements.\r\n */\r\n@Test\r\nvoid testPopulateArrayElements() throws Exception {\r\n    final HashMap<String, Object> map = new HashMap<>();\r\n    map.put(\"intIndexed[0]\", \"100\");\r\n    map.put(\"intIndexed[2]\", \"120\");\r\n    map.put(\"intIndexed[4]\", \"140\");\r\n    BeanUtils.populate(bean, map);\r\n    assertEquals(100, bean.getIntIndexed(0), \"intIndexed[0] is 100\");\r\n    assertEquals(10, bean.getIntIndexed(1), \"intIndexed[1] is 10\");\r\n    assertEquals(120, bean.getIntIndexed(2), \"intIndexed[2] is 120\");\r\n    assertEquals(30, bean.getIntIndexed(3), \"intIndexed[3] is 30\");\r\n    assertEquals(140, bean.getIntIndexed(4), \"intIndexed[4] is 140\");\r\n    map.clear();\r\n    map.put(\"stringIndexed[1]\", \"New String 1\");\r\n    map.put(\"stringIndexed[3]\", \"New String 3\");\r\n    BeanUtils.populate(bean, map);\r\n    assertEquals(\"String 0\", bean.getStringIndexed(0), \"stringIndexed[0] is \\\"String 0\\\"\");\r\n    assertEquals(\"New String 1\", bean.getStringIndexed(1), \"stringIndexed[1] is \\\"New String 1\\\"\");\r\n    assertEquals(\"String 2\", bean.getStringIndexed(2), \"stringIndexed[2] is \\\"String 2\\\"\");\r\n    assertEquals(\"New String 3\", bean.getStringIndexed(3), \"stringIndexed[3] is \\\"New String 3\\\"\");\r\n    assertEquals(\"String 4\", bean.getStringIndexed(4), \"stringIndexed[4] is \\\"String 4\\\"\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\BeanUtilsBeanTest.java",
  "methodName" : "testPopulateArrayProperties",
  "sourceCode" : "/**\r\n * Test populate() method on array properties as a whole.\r\n */\r\n@Test\r\nvoid testPopulateArrayProperties() throws Exception {\r\n    final HashMap<String, Object> map = new HashMap<>();\r\n    int[] intArray = { 123, 456, 789 };\r\n    map.put(\"intArray\", intArray);\r\n    String[] stringArray = { \"New String 0\", \"New String 1\" };\r\n    map.put(\"stringArray\", stringArray);\r\n    BeanUtils.populate(bean, map);\r\n    intArray = bean.getIntArray();\r\n    assertNotNull(intArray, \"intArray is present\");\r\n    assertEquals(3, intArray.length, \"intArray length\");\r\n    assertEquals(123, intArray[0], \"intArray[0]\");\r\n    assertEquals(456, intArray[1], \"intArray[1]\");\r\n    assertEquals(789, intArray[2], \"intArray[2]\");\r\n    stringArray = bean.getStringArray();\r\n    assertNotNull(stringArray, \"stringArray is present\");\r\n    assertEquals(2, stringArray.length, \"stringArray length\");\r\n    assertEquals(\"New String 0\", stringArray[0], \"stringArray[0]\");\r\n    assertEquals(\"New String 1\", stringArray[1], \"stringArray[1]\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\BeanUtilsBeanTest.java",
  "methodName" : "testPopulateMapped",
  "sourceCode" : "/**\r\n * Test populate() on mapped properties.\r\n */\r\n@Test\r\nvoid testPopulateMapped() throws Exception {\r\n    final HashMap<String, Object> map = new HashMap<>();\r\n    map.put(\"mappedProperty(First Key)\", \"New First Value\");\r\n    map.put(\"mappedProperty(Third Key)\", \"New Third Value\");\r\n    BeanUtils.populate(bean, map);\r\n    assertEquals(\"New First Value\", bean.getMappedProperty(\"First Key\"), \"mappedProperty(First Key)\");\r\n    assertEquals(\"Second Value\", bean.getMappedProperty(\"Second Key\"), \"mappedProperty(Second Key)\");\r\n    assertEquals(\"New Third Value\", bean.getMappedProperty(\"Third Key\"), \"mappedProperty(Third Key)\");\r\n    assertNull(bean.getMappedProperty(\"Fourth Key\"), \"mappedProperty(Fourth Key\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\BeanUtilsBeanTest.java",
  "methodName" : "testPopulateNested",
  "sourceCode" : "/**\r\n * Test populate() method on nested properties.\r\n */\r\n@Test\r\nvoid testPopulateNested() throws Exception {\r\n    final HashMap<String, Object> map = new HashMap<>();\r\n    map.put(\"nested.booleanProperty\", \"false\");\r\n    // booleanSecond is left at true\r\n    map.put(\"nested.doubleProperty\", \"432.0\");\r\n    // floatProperty is left at 123.0\r\n    map.put(\"nested.intProperty\", \"543\");\r\n    // longProperty is left at 321\r\n    map.put(\"nested.shortProperty\", \"654\");\r\n    // stringProperty is left at \"This is a string\"\r\n    map.put(\"nested.writeOnlyProperty\", \"New writeOnlyProperty value\");\r\n    BeanUtils.populate(bean, map);\r\n    assertTrue(!bean.getNested().getBooleanProperty(), \"booleanProperty is false\");\r\n    assertTrue(bean.getNested().isBooleanSecond(), \"booleanSecond is true\");\r\n    assertEquals(432.0, bean.getNested().getDoubleProperty(), 0.005, \"doubleProperty is 432.0\");\r\n    assertEquals((float) 123.0, bean.getNested().getFloatProperty(), (float) 0.005, \"floatProperty is 123.0\");\r\n    assertEquals(543, bean.getNested().getIntProperty(), \"intProperty is 543\");\r\n    assertEquals(321, bean.getNested().getLongProperty(), \"longProperty is 321\");\r\n    assertEquals((short) 654, bean.getNested().getShortProperty(), \"shortProperty is 654\");\r\n    assertEquals(\"This is a string\", bean.getNested().getStringProperty(), \"stringProperty is \\\"This is a string\\\"\");\r\n    assertEquals(\"New writeOnlyProperty value\", bean.getNested().getWriteOnlyPropertyValue(), \"writeOnlyProperty is \\\"New writeOnlyProperty value\\\"\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\BeanUtilsBeanTest.java",
  "methodName" : "testPopulateScalar",
  "sourceCode" : "/**\r\n * Test populate() method on scalar properties.\r\n */\r\n@Test\r\nvoid testPopulateScalar() throws Exception {\r\n    bean.setNullProperty(\"Non-null value\");\r\n    final HashMap<String, Object> map = new HashMap<>();\r\n    map.put(\"booleanProperty\", \"false\");\r\n    // booleanSecond is left at true\r\n    map.put(\"byteProperty\", \"111\");\r\n    map.put(\"doubleProperty\", \"432.0\");\r\n    // floatProperty is left at 123.0\r\n    map.put(\"intProperty\", \"543\");\r\n    map.put(\"longProperty\", \"\");\r\n    map.put(\"nullProperty\", null);\r\n    map.put(\"shortProperty\", \"654\");\r\n    // stringProperty is left at \"This is a string\"\r\n    map.put(\"writeOnlyProperty\", \"New writeOnlyProperty value\");\r\n    map.put(\"readOnlyProperty\", \"New readOnlyProperty value\");\r\n    BeanUtils.populate(bean, map);\r\n    assertTrue(!bean.getBooleanProperty(), \"booleanProperty is false\");\r\n    assertTrue(bean.isBooleanSecond(), \"booleanSecond is true\");\r\n    assertEquals((byte) 111, bean.getByteProperty(), \"byteProperty is 111\");\r\n    assertEquals(432.0, bean.getDoubleProperty(), 0.005, \"doubleProperty is 432.0\");\r\n    assertEquals((float) 123.0, bean.getFloatProperty(), (float) 0.005, \"floatProperty is 123.0\");\r\n    assertEquals(543, bean.getIntProperty(), \"intProperty is 543\");\r\n    assertEquals(0, bean.getLongProperty(), \"longProperty is 0\");\r\n    assertNull(bean.getNullProperty(), \"nullProperty is null\");\r\n    assertEquals((short) 654, bean.getShortProperty(), \"shortProperty is 654\");\r\n    assertEquals(\"This is a string\", bean.getStringProperty(), \"stringProperty is \\\"This is a string\\\"\");\r\n    assertEquals(\"New writeOnlyProperty value\", bean.getWriteOnlyPropertyValue(), \"writeOnlyProperty is \\\"New writeOnlyProperty value\\\"\");\r\n    assertEquals(\"Read Only String Property\", bean.getReadOnlyProperty(), \"readOnlyProperty is \\\"Read Only String Property\\\"\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\BeanUtilsBeanTest.java",
  "methodName" : "testSeparateInstances",
  "sourceCode" : "/**\r\n * Tests that separate instances can register separate instances\r\n */\r\n@Test\r\nvoid testSeparateInstances() throws Exception {\r\n    final BeanUtilsBean utilsOne = new BeanUtilsBean(new ConvertUtilsBean(), new PropertyUtilsBean());\r\n    final BeanUtilsBean utilsTwo = new BeanUtilsBean(new ConvertUtilsBean(), new PropertyUtilsBean());\r\n    final TestBean bean = new TestBean();\r\n    // Make sure what we're testing works\r\n    bean.setBooleanProperty(false);\r\n    utilsOne.setProperty(bean, \"booleanProperty\", \"true\");\r\n    assertEquals(bean.getBooleanProperty(), true, \"Set property failed (1)\");\r\n    bean.setBooleanProperty(false);\r\n    utilsTwo.setProperty(bean, \"booleanProperty\", \"true\");\r\n    assertEquals(bean.getBooleanProperty(), true, \"Set property failed (2)\");\r\n    // now change the registered conversion\r\n    utilsOne.getConvertUtils().register(new ThrowExceptionConverter(), Boolean.TYPE);\r\n    bean.setBooleanProperty(false);\r\n    assertThrows(PassTestException.class, () -> utilsOne.setProperty(bean, \"booleanProperty\", \"true\"));\r\n    // make sure that this conversion has no been registered in the other instance\r\n    bean.setBooleanProperty(false);\r\n    utilsTwo.setProperty(bean, \"booleanProperty\", \"true\");\r\n    assertEquals(bean.getBooleanProperty(), true, \"Set property failed (3)\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\BeanUtilsBeanTest.java",
  "methodName" : "testSetMappedMap",
  "sourceCode" : "/**\r\n * Test setting a value out of a mapped Map\r\n */\r\n@Test\r\nvoid testSetMappedMap() throws Exception {\r\n    final TestBean bean = new TestBean();\r\n    final Map<String, Object> map = new HashMap<>();\r\n    map.put(\"sub-key-1\", \"sub-value-1\");\r\n    map.put(\"sub-key-2\", \"sub-value-2\");\r\n    map.put(\"sub-key-3\", \"sub-value-3\");\r\n    bean.getMapProperty().put(\"mappedMap\", map);\r\n    assertEquals(\"sub-value-3\", ((Map<?, ?>) bean.getMapProperty().get(\"mappedMap\")).get(\"sub-key-3\"), \"BEFORE\");\r\n    BeanUtils.setProperty(bean, \"mapProperty(mappedMap)(sub-key-3)\", \"SUB-KEY-3-UPDATED\");\r\n    assertEquals(\"SUB-KEY-3-UPDATED\", ((Map<?, ?>) bean.getMapProperty().get(\"mappedMap\")).get(\"sub-key-3\"), \"AFTER\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\BeanUtilsBeanTest.java",
  "methodName" : "testSetPropertyByte",
  "sourceCode" : "/**\r\n * Test narrowing and widening conversions on byte.\r\n */\r\n@Test\r\nvoid testSetPropertyByte() throws Exception {\r\n    BeanUtils.setProperty(bean, \"byteProperty\", Byte.valueOf((byte) 123));\r\n    assertEquals((byte) 123, bean.getByteProperty());\r\n    /*\r\n         * BeanUtils.setProperty(bean, \"byteProperty\", new Double((double) 123)); assertEquals((byte) 123, bean.getByteProperty()); BeanUtils.setProperty(bean,\r\n         * \"byteProperty\", new Float((float) 123)); assertEquals((byte) 123, bean.getByteProperty());\r\n         */\r\n    BeanUtils.setProperty(bean, \"byteProperty\", Integer.valueOf(123));\r\n    assertEquals((byte) 123, bean.getByteProperty());\r\n    BeanUtils.setProperty(bean, \"byteProperty\", Long.valueOf(123));\r\n    assertEquals((byte) 123, bean.getByteProperty());\r\n    BeanUtils.setProperty(bean, \"byteProperty\", Short.valueOf((short) 123));\r\n    assertEquals((byte) 123, bean.getByteProperty());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\BeanUtilsBeanTest.java",
  "methodName" : "testSetPropertyConvert",
  "sourceCode" : "/**\r\n * Test {@code setProperty()} conversion.\r\n */\r\n@Test\r\nvoid testSetPropertyConvert() throws Exception {\r\n    BeanUtils.setProperty(bean, \"dateProperty\", testCalendar);\r\n    assertEquals(testUtilDate, bean.getDateProperty(), \"Calendar --> java.util.Date\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\BeanUtilsBeanTest.java",
  "methodName" : "testSetPropertyConvertFromString",
  "sourceCode" : "/**\r\n * Test {@code setProperty()} converting from a String.\r\n */\r\n@Test\r\nvoid testSetPropertyConvertFromString() throws Exception {\r\n    BeanUtils.setProperty(bean, \"dateProperty\", testStringDate);\r\n    assertEquals(testUtilDate, bean.getDateProperty(), \"String --> java.util.Date\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\BeanUtilsBeanTest.java",
  "methodName" : "testSetPropertyConvertToString",
  "sourceCode" : "/**\r\n * Test {@code setProperty()} converting to a String.\r\n */\r\n@Test\r\nvoid testSetPropertyConvertToString() throws Exception {\r\n    BeanUtils.setProperty(bean, \"stringProperty\", testUtilDate);\r\n    assertEquals(testStringDate, bean.getStringProperty(), \"java.util.Date --> String\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\BeanUtilsBeanTest.java",
  "methodName" : "testSetPropertyConvertToStringArray",
  "sourceCode" : "/**\r\n * Test {@code setProperty()} converting to a String array.\r\n */\r\n@Test\r\nvoid testSetPropertyConvertToStringArray() throws Exception {\r\n    bean.setStringArray(null);\r\n    BeanUtils.setProperty(bean, \"stringArray\", new java.util.Date[] { testUtilDate });\r\n    assertEquals(1, bean.getStringArray().length, \"java.util.Date[] --> String[] length\");\r\n    assertEquals(testStringDate, bean.getStringArray()[0], \"java.util.Date[] --> String[] value \");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\BeanUtilsBeanTest.java",
  "methodName" : "testSetPropertyConvertToStringIndexed",
  "sourceCode" : "/**\r\n * Test {@code setProperty()} converting to a String on indexed property\r\n */\r\n@Test\r\nvoid testSetPropertyConvertToStringIndexed() throws Exception {\r\n    bean.setStringArray(new String[1]);\r\n    BeanUtils.setProperty(bean, \"stringArray[0]\", testUtilDate);\r\n    assertEquals(testStringDate, bean.getStringArray()[0], \"java.util.Date --> String[]\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\BeanUtilsBeanTest.java",
  "methodName" : "testSetPropertyDouble",
  "sourceCode" : "/**\r\n * Test narrowing and widening conversions on double.\r\n */\r\n@Test\r\nvoid testSetPropertyDouble() throws Exception {\r\n    BeanUtils.setProperty(bean, \"doubleProperty\", Byte.valueOf((byte) 123));\r\n    assertEquals(123, bean.getDoubleProperty(), 0.005);\r\n    BeanUtils.setProperty(bean, \"doubleProperty\", Double.valueOf(123));\r\n    assertEquals(123, bean.getDoubleProperty(), 0.005);\r\n    BeanUtils.setProperty(bean, \"doubleProperty\", Float.valueOf(123));\r\n    assertEquals(123, bean.getDoubleProperty(), 0.005);\r\n    BeanUtils.setProperty(bean, \"doubleProperty\", Integer.valueOf(123));\r\n    assertEquals(123, bean.getDoubleProperty(), 0.005);\r\n    BeanUtils.setProperty(bean, \"doubleProperty\", Long.valueOf(123));\r\n    assertEquals(123, bean.getDoubleProperty(), 0.005);\r\n    BeanUtils.setProperty(bean, \"doubleProperty\", Short.valueOf((short) 123));\r\n    assertEquals(123, bean.getDoubleProperty(), 0.005);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\BeanUtilsBeanTest.java",
  "methodName" : "testSetPropertyFloat",
  "sourceCode" : "/**\r\n * Test narrowing and widening conversions on float.\r\n */\r\n@Test\r\nvoid testSetPropertyFloat() throws Exception {\r\n    BeanUtils.setProperty(bean, \"floatProperty\", Byte.valueOf((byte) 123));\r\n    assertEquals(123, bean.getFloatProperty(), 0.005);\r\n    BeanUtils.setProperty(bean, \"floatProperty\", Double.valueOf(123));\r\n    assertEquals(123, bean.getFloatProperty(), 0.005);\r\n    BeanUtils.setProperty(bean, \"floatProperty\", Float.valueOf(123));\r\n    assertEquals(123, bean.getFloatProperty(), 0.005);\r\n    BeanUtils.setProperty(bean, \"floatProperty\", Integer.valueOf(123));\r\n    assertEquals(123, bean.getFloatProperty(), 0.005);\r\n    BeanUtils.setProperty(bean, \"floatProperty\", Long.valueOf(123));\r\n    assertEquals(123, bean.getFloatProperty(), 0.005);\r\n    BeanUtils.setProperty(bean, \"floatProperty\", Short.valueOf((short) 123));\r\n    assertEquals(123, bean.getFloatProperty(), 0.005);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\BeanUtilsBeanTest.java",
  "methodName" : "testSetPropertyInteger",
  "sourceCode" : "/**\r\n * Test narrowing and widening conversions on int.\r\n */\r\n@Test\r\nvoid testSetPropertyInteger() throws Exception {\r\n    BeanUtils.setProperty(bean, \"longProperty\", Byte.valueOf((byte) 123));\r\n    assertEquals(123, bean.getIntProperty());\r\n    /*\r\n         * BeanUtils.setProperty(bean, \"longProperty\", new Double((double) 123)); assertEquals((int) 123, bean.getIntProperty()); BeanUtils.setProperty(bean,\r\n         * \"longProperty\", new Float((float) 123)); assertEquals((int) 123, bean.getIntProperty());\r\n         */\r\n    BeanUtils.setProperty(bean, \"longProperty\", Integer.valueOf(123));\r\n    assertEquals(123, bean.getIntProperty());\r\n    BeanUtils.setProperty(bean, \"longProperty\", Long.valueOf(123));\r\n    assertEquals(123, bean.getIntProperty());\r\n    BeanUtils.setProperty(bean, \"longProperty\", Short.valueOf((short) 123));\r\n    assertEquals(123, bean.getIntProperty());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\BeanUtilsBeanTest.java",
  "methodName" : "testSetPropertyLong",
  "sourceCode" : "/**\r\n * Test narrowing and widening conversions on long.\r\n */\r\n@Test\r\nvoid testSetPropertyLong() throws Exception {\r\n    BeanUtils.setProperty(bean, \"longProperty\", Byte.valueOf((byte) 123));\r\n    assertEquals(123, bean.getLongProperty());\r\n    /*\r\n         * BeanUtils.setProperty(bean, \"longProperty\", new Double((double) 123)); assertEquals((long) 123, bean.getLongProperty()); BeanUtils.setProperty(bean,\r\n         * \"longProperty\", new Float((float) 123)); assertEquals((long) 123, bean.getLongProperty());\r\n         */\r\n    BeanUtils.setProperty(bean, \"longProperty\", Integer.valueOf(123));\r\n    assertEquals(123, bean.getLongProperty());\r\n    BeanUtils.setProperty(bean, \"longProperty\", Long.valueOf(123));\r\n    assertEquals(123, bean.getLongProperty());\r\n    BeanUtils.setProperty(bean, \"longProperty\", Short.valueOf((short) 123));\r\n    assertEquals(123, bean.getLongProperty());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\BeanUtilsBeanTest.java",
  "methodName" : "testSetPropertyNull",
  "sourceCode" : "/**\r\n * Test setting a null property value.\r\n */\r\n@Test\r\nvoid testSetPropertyNull() throws Exception {\r\n    bean.setNullProperty(\"non-null value\");\r\n    BeanUtils.setProperty(bean, \"nullProperty\", null);\r\n    assertNull(bean.getNullProperty(), \"nullProperty is null\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\BeanUtilsBeanTest.java",
  "methodName" : "testSetPropertyNullValues",
  "sourceCode" : "/**\r\n * Test calling setProperty() with null property values.\r\n */\r\n@Test\r\nvoid testSetPropertyNullValues() throws Exception {\r\n    Object oldValue;\r\n    Object newValue;\r\n    // Scalar value into array\r\n    oldValue = PropertyUtils.getSimpleProperty(bean, \"stringArray\");\r\n    BeanUtils.setProperty(bean, \"stringArray\", null);\r\n    newValue = PropertyUtils.getSimpleProperty(bean, \"stringArray\");\r\n    assertNotNull(newValue, \"stringArray is not null\");\r\n    assertInstanceOf(String[].class, newValue, \"stringArray of correct type\");\r\n    assertEquals(1, ((String[]) newValue).length, \"stringArray length\");\r\n    PropertyUtils.setProperty(bean, \"stringArray\", oldValue);\r\n    // Indexed value into array\r\n    oldValue = PropertyUtils.getSimpleProperty(bean, \"stringArray\");\r\n    BeanUtils.setProperty(bean, \"stringArray[2]\", null);\r\n    newValue = PropertyUtils.getSimpleProperty(bean, \"stringArray\");\r\n    assertNotNull(newValue, \"stringArray is not null\");\r\n    assertInstanceOf(String[].class, newValue, \"stringArray of correct type\");\r\n    assertEquals(5, ((String[]) newValue).length, \"stringArray length\");\r\n    assertNull(((String[]) newValue)[2], \"stringArray[2] is null\");\r\n    PropertyUtils.setProperty(bean, \"stringArray\", oldValue);\r\n    // Value into scalar\r\n    BeanUtils.setProperty(bean, \"stringProperty\", null);\r\n    assertNull(BeanUtils.getProperty(bean, \"stringProperty\"), \"stringProperty is now null\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\BeanUtilsBeanTest.java",
  "methodName" : "testSetPropertyOnPrimitiveWrappers",
  "sourceCode" : "/**\r\n * Test converting to and from primitive wrapper types.\r\n */\r\n@Test\r\nvoid testSetPropertyOnPrimitiveWrappers() throws Exception {\r\n    BeanUtils.setProperty(bean, \"intProperty\", Integer.valueOf(1));\r\n    assertEquals(1, bean.getIntProperty());\r\n    BeanUtils.setProperty(bean, \"stringProperty\", Integer.valueOf(1));\r\n    assertEquals(1, Integer.parseInt(bean.getStringProperty()));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\BeanUtilsBeanTest.java",
  "methodName" : "testSetPropertyShort",
  "sourceCode" : "/**\r\n * Test narrowing and widening conversions on short.\r\n */\r\n@Test\r\nvoid testSetPropertyShort() throws Exception {\r\n    BeanUtils.setProperty(bean, \"shortProperty\", Byte.valueOf((byte) 123));\r\n    assertEquals((short) 123, bean.getShortProperty());\r\n    /*\r\n         * BeanUtils.setProperty(bean, \"shortProperty\", new Double((double) 123)); assertEquals((short) 123, bean.getShortProperty());\r\n         * BeanUtils.setProperty(bean, \"shortProperty\", new Float((float) 123)); assertEquals((short) 123, bean.getShortProperty());\r\n         */\r\n    BeanUtils.setProperty(bean, \"shortProperty\", Integer.valueOf(123));\r\n    assertEquals((short) 123, bean.getShortProperty());\r\n    BeanUtils.setProperty(bean, \"shortProperty\", Long.valueOf(123));\r\n    assertEquals((short) 123, bean.getShortProperty());\r\n    BeanUtils.setProperty(bean, \"shortProperty\", Short.valueOf((short) 123));\r\n    assertEquals((short) 123, bean.getShortProperty());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\BeanUtilsBeanTest.java",
  "methodName" : "testSetPropertyStringToArray",
  "sourceCode" : "/**\r\n * Test setting a String value to a String array property\r\n */\r\n@Test\r\nvoid testSetPropertyStringToArray() throws Exception {\r\n    BeanUtils.setProperty(bean, \"stringArray\", \"ABC,DEF,GHI\");\r\n    final String[] strArray = bean.getStringArray();\r\n    assertEquals(3, strArray.length, \"length\");\r\n    assertEquals(\"ABC\", strArray[0], \"value[0]\");\r\n    assertEquals(\"DEF\", strArray[1], \"value[1]\");\r\n    assertEquals(\"GHI\", strArray[2], \"value[2]\");\r\n    BeanUtils.setProperty(bean, \"intArray\", \"0, 10, 20, 30, 40\");\r\n    final int[] intArray = bean.getIntArray();\r\n    assertEquals(5, intArray.length, \"length\");\r\n    assertEquals(0, intArray[0], \"value[0]\");\r\n    assertEquals(10, intArray[1], \"value[1]\");\r\n    assertEquals(20, intArray[2], \"value[2]\");\r\n    assertEquals(30, intArray[3], \"value[3]\");\r\n    assertEquals(40, intArray[4], \"value[4]\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\BeanUtilsBeanTest.java",
  "methodName" : "testSetPropertyWriteOnly",
  "sourceCode" : "/**\r\n * Test setting a new value to a write-only property, with and without conversions.\r\n */\r\n@Test\r\nvoid testSetPropertyWriteOnly() throws Exception {\r\n    bean.setWriteOnlyProperty(\"Original value\");\r\n    // No conversion required\r\n    BeanUtils.setProperty(bean, \"writeOnlyProperty\", \"New value\");\r\n    assertEquals(\"New value\", bean.getWriteOnlyPropertyValue());\r\n    // Integer->String conversion required\r\n    BeanUtils.setProperty(bean, \"writeOnlyProperty\", Integer.valueOf(123));\r\n    assertEquals(\"123\", bean.getWriteOnlyPropertyValue());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\BeanUtilsBenchCase.java",
  "methodName" : "testCopyPropertiesBean",
  "sourceCode" : "// Time copyProperties() from a bean\r\n@Test\r\nvoid testCopyPropertiesBean() throws Exception {\r\n    long startMillis;\r\n    long stopMillis;\r\n    // Bean->Bean\r\n    for (long i = 0; i < counter; i++) {\r\n        bu.copyProperties(outBean, inBean);\r\n    }\r\n    startMillis = System.currentTimeMillis();\r\n    for (long i = 0; i < counter; i++) {\r\n        bu.copyProperties(outBean, inBean);\r\n    }\r\n    stopMillis = System.currentTimeMillis();\r\n    System.err.println(\"BU.copyProperties(bean,bean), count=\" + counter + \", time=\" + (stopMillis - startMillis));\r\n    // Bean->Dyna\r\n    for (long i = 0; i < counter; i++) {\r\n        bu.copyProperties(outDyna, inBean);\r\n    }\r\n    startMillis = System.currentTimeMillis();\r\n    for (long i = 0; i < counter; i++) {\r\n        bu.copyProperties(outDyna, inBean);\r\n    }\r\n    stopMillis = System.currentTimeMillis();\r\n    System.err.println(\"BU.copyProperties(dyna,bean), count=\" + counter + \", time=\" + (stopMillis - startMillis));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\BeanUtilsBenchCase.java",
  "methodName" : "testCopyPropertiesDyna",
  "sourceCode" : "// Time copyProperties() from a DynaBean\r\n@Test\r\nvoid testCopyPropertiesDyna() throws Exception {\r\n    long startMillis;\r\n    long stopMillis;\r\n    // Dyna->Bean\r\n    for (long i = 0; i < counter; i++) {\r\n        bu.copyProperties(outBean, inDyna);\r\n    }\r\n    startMillis = System.currentTimeMillis();\r\n    for (long i = 0; i < counter; i++) {\r\n        bu.copyProperties(outBean, inDyna);\r\n    }\r\n    stopMillis = System.currentTimeMillis();\r\n    System.err.println(\"BU.copyProperties(bean,dyna), count=\" + counter + \", time=\" + (stopMillis - startMillis));\r\n    // Dyna->Dyna\r\n    for (long i = 0; i < counter; i++) {\r\n        bu.copyProperties(outDyna, inDyna);\r\n    }\r\n    startMillis = System.currentTimeMillis();\r\n    for (long i = 0; i < counter; i++) {\r\n        bu.copyProperties(outDyna, inDyna);\r\n    }\r\n    stopMillis = System.currentTimeMillis();\r\n    System.err.println(\"BU.copyProperties(dyna,dyna), count=\" + counter + \", time=\" + (stopMillis - startMillis));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\BeanUtilsBenchCase.java",
  "methodName" : "testCopyPropertiesMap",
  "sourceCode" : "// Time copyProperties() from a Map of Objects\r\n@Test\r\nvoid testCopyPropertiesMap() throws Exception {\r\n    long startMillis;\r\n    long stopMillis;\r\n    // Map->Bean\r\n    for (long i = 0; i < counter; i++) {\r\n        bu.copyProperties(outBean, inMap);\r\n    }\r\n    startMillis = System.currentTimeMillis();\r\n    for (long i = 0; i < counter; i++) {\r\n        bu.copyProperties(outBean, inMap);\r\n    }\r\n    stopMillis = System.currentTimeMillis();\r\n    System.err.println(\"BU.copyProperties(bean, map), count=\" + counter + \", time=\" + (stopMillis - startMillis));\r\n    // Map->Dyna\r\n    for (long i = 0; i < counter; i++) {\r\n        bu.copyProperties(outDyna, inMap);\r\n    }\r\n    startMillis = System.currentTimeMillis();\r\n    for (long i = 0; i < counter; i++) {\r\n        bu.copyProperties(outDyna, inMap);\r\n    }\r\n    stopMillis = System.currentTimeMillis();\r\n    System.err.println(\"BU.copyProperties(dyna, map), count=\" + counter + \", time=\" + (stopMillis - startMillis));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\BeanUtilsBenchCase.java",
  "methodName" : "testCopyPropertiesStrs",
  "sourceCode" : "// Time copyProperties() from a Map of Strings\r\n@Test\r\nvoid testCopyPropertiesStrs() throws Exception {\r\n    long startMillis;\r\n    long stopMillis;\r\n    // Strs->Bean\r\n    for (long i = 0; i < counter; i++) {\r\n        bu.copyProperties(outBean, inStrs);\r\n    }\r\n    startMillis = System.currentTimeMillis();\r\n    for (long i = 0; i < counter; i++) {\r\n        bu.copyProperties(outBean, inStrs);\r\n    }\r\n    stopMillis = System.currentTimeMillis();\r\n    System.err.println(\"BU.copyProperties(bean,strs), count=\" + counter + \", time=\" + (stopMillis - startMillis));\r\n    // Strs->Dyna\r\n    for (long i = 0; i < counter; i++) {\r\n        bu.copyProperties(outDyna, inStrs);\r\n    }\r\n    startMillis = System.currentTimeMillis();\r\n    for (long i = 0; i < counter; i++) {\r\n        bu.copyProperties(outDyna, inStrs);\r\n    }\r\n    stopMillis = System.currentTimeMillis();\r\n    System.err.println(\"BU.copyProperties(dyna,strs), count=\" + counter + \", time=\" + (stopMillis - startMillis));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\BeanUtilsBenchCase.java",
  "methodName" : "testPopulateMap",
  "sourceCode" : "// Time populate() from a Map of Objects\r\n@Test\r\nvoid testPopulateMap() throws Exception {\r\n    long startMillis;\r\n    long stop;\r\n    // Map->Bean\r\n    for (long i = 0; i < counter; i++) {\r\n        bu.populate(outBean, inMap);\r\n    }\r\n    startMillis = System.currentTimeMillis();\r\n    for (long i = 0; i < counter; i++) {\r\n        bu.populate(outBean, inMap);\r\n    }\r\n    stop = System.currentTimeMillis();\r\n    System.err.println(\"BU.populate(bean, map), count=\" + counter + \", time=\" + (stop - startMillis));\r\n    // Map->Dyna\r\n    for (long i = 0; i < counter; i++) {\r\n        bu.populate(outDyna, inMap);\r\n    }\r\n    startMillis = System.currentTimeMillis();\r\n    for (long i = 0; i < counter; i++) {\r\n        bu.populate(outDyna, inMap);\r\n    }\r\n    stop = System.currentTimeMillis();\r\n    System.err.println(\"BU.populate(dyna, map), count=\" + counter + \", time=\" + (stop - startMillis));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\BeanUtilsBenchCase.java",
  "methodName" : "testPopulateStrs",
  "sourceCode" : "// Time populate() from a Map of Strings\r\n// NOTE - This simulates what Struts does when processing form beans\r\n@Test\r\nvoid testPopulateStrs() throws Exception {\r\n    long startMillis;\r\n    long stop;\r\n    // Strs->Bean\r\n    for (long i = 0; i < counter; i++) {\r\n        bu.populate(outBean, inStrs);\r\n    }\r\n    startMillis = System.currentTimeMillis();\r\n    for (long i = 0; i < counter; i++) {\r\n        bu.populate(outBean, inStrs);\r\n    }\r\n    stop = System.currentTimeMillis();\r\n    System.err.println(\"BU.populate(bean,strs), count=\" + counter + \", time=\" + (stop - startMillis));\r\n    // Strs->Dyna\r\n    for (long i = 0; i < counter; i++) {\r\n        bu.populate(outDyna, inStrs);\r\n    }\r\n    startMillis = System.currentTimeMillis();\r\n    for (long i = 0; i < counter; i++) {\r\n        bu.populate(outDyna, inStrs);\r\n    }\r\n    stop = System.currentTimeMillis();\r\n    System.err.println(\"BU.populate(dyna,strs), count=\" + counter + \", time=\" + (stop - startMillis));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\bugs\\EnumDeclaringClassTest.java",
  "methodName" : "testAllowAccessToClassPropertyFromBeanUtilsBean",
  "sourceCode" : "/**\r\n * Allow opt-out to make your app less secure but allow access to \"declaringClass\".\r\n */\r\n@Test\r\nvoid testAllowAccessToClassPropertyFromBeanUtilsBean() throws ReflectiveOperationException {\r\n    final BeanUtilsBean bub = new BeanUtilsBean();\r\n    final PropertyUtilsBean propertyUtilsBean = bub.getPropertyUtils();\r\n    propertyUtilsBean.removeBeanIntrospector(SuppressPropertiesBeanIntrospector.SUPPRESS_DECLARING_CLASS);\r\n    final Fixture fixture = new Fixture();\r\n    final String string = bub.getProperty(fixture, \"testEnum.declaringClass\");\r\n    assertEquals(TestEnum.class.getName(), string);\r\n    final Class<TestEnum> teClass = assertInstanceOf(Class.class, propertyUtilsBean.getNestedProperty(fixture, \"testEnum.declaringClass\"));\r\n    final ClassLoader classLoader = teClass.getClassLoader();\r\n    assertNotNull(classLoader);\r\n    assertNotNull(bub.getProperty(fixture, \"testEnum.declaringClass.classLoader\"));\r\n    assertInstanceOf(ClassLoader.class, propertyUtilsBean.getNestedProperty(fixture, \"testEnum.declaringClass.classLoader\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\bugs\\EnumDeclaringClassTest.java",
  "methodName" : "testAllowAccessToClassPropertyFromPropertyUtilsBean",
  "sourceCode" : "/**\r\n * Allow opt-out to make your app less secure but allow access to \"declaringClass\".\r\n */\r\n@Test\r\nvoid testAllowAccessToClassPropertyFromPropertyUtilsBean() throws ReflectiveOperationException {\r\n    final PropertyUtilsBean propertyUtilsBean = new PropertyUtilsBean();\r\n    propertyUtilsBean.removeBeanIntrospector(SuppressPropertiesBeanIntrospector.SUPPRESS_DECLARING_CLASS);\r\n    final Fixture fixture = new Fixture();\r\n    final Object cls = propertyUtilsBean.getNestedProperty(fixture, \"testEnum.declaringClass\");\r\n    final Class<TestEnum> teClass = assertInstanceOf(Class.class, cls);\r\n    final ClassLoader classLoader = teClass.getClassLoader();\r\n    assertNotNull(classLoader);\r\n    assertInstanceOf(ClassLoader.class, propertyUtilsBean.getNestedProperty(fixture, \"testEnum.declaringClass.classLoader\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\bugs\\EnumDeclaringClassTest.java",
  "methodName" : "testSuppressClassPropertyByDefaultFromBeanUtilsBean",
  "sourceCode" : "/**\r\n * By default opt-in to security that does not allow access to \"declaringClass\".\r\n */\r\n@Test\r\nvoid testSuppressClassPropertyByDefaultFromBeanUtilsBean() throws ReflectiveOperationException {\r\n    final Fixture fixture = new Fixture();\r\n    final BeanUtilsBean bub = new BeanUtilsBean();\r\n    assertThrows(NoSuchMethodException.class, () -> bub.getProperty(fixture, \"testEnum.declaringClass.classLoader\"));\r\n    assertThrows(NoSuchMethodException.class, () -> bub.getPropertyUtils().getNestedProperty(fixture, \"testEnum.declaringClass.classLoader\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\bugs\\EnumDeclaringClassTest.java",
  "methodName" : "testSuppressClassPropertyByDefaultFromPropertyUtilsBean",
  "sourceCode" : "/**\r\n * By default opt-in to security that does not allow access to \"declaringClass\".\r\n */\r\n@Test\r\nvoid testSuppressClassPropertyByDefaultFromPropertyUtilsBean() throws ReflectiveOperationException {\r\n    final Fixture fixture = new Fixture();\r\n    final PropertyUtilsBean propertyUtilsBean = new PropertyUtilsBean();\r\n    assertThrows(NoSuchMethodException.class, () -> propertyUtilsBean.getNestedProperty(fixture, \"testEnum.declaringClass.classLoader\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\bugs\\Jira157Test.java",
  "methodName" : "testIssue_BEANUTILS_157_BeanUtils_Describe_Bean",
  "sourceCode" : "/**\r\n * Test with an private class that overrides a public method of a \"grand parent\" public class.\r\n * <p />\r\n * See Jira issue# BEANUTILS-157.\r\n */\r\n@Test\r\nvoid testIssue_BEANUTILS_157_BeanUtils_Describe_Bean() throws Exception {\r\n    final Object bean = new FooBar();\r\n    Map<String, String> result = null;\r\n    result = BeanUtils.describe(bean);\r\n    assertEquals(2, result.size(), \"Check Size\");\r\n    assertTrue(result.containsKey(\"class\"), \"Class\");\r\n    assertTrue(result.containsKey(\"publicFoo\"), \"publicFoo Key\");\r\n    assertEquals(\"PublicFoo Value\", result.get(\"publicFoo\"), \"publicFoo Value\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\bugs\\Jira157Test.java",
  "methodName" : "testIssue_BEANUTILS_157_BeanUtils_Describe_Interface",
  "sourceCode" : "/**\r\n * Test with an private class that overrides a public method of a \"grand parent\" public class.\r\n * <p />\r\n * See Jira issue# BEANUTILS-157.\r\n */\r\n@Test\r\nvoid testIssue_BEANUTILS_157_BeanUtils_Describe_Interface() throws Exception {\r\n    final Object bean = new XY() {\r\n\r\n        @Override\r\n        public String getX() {\r\n            return \"x-value\";\r\n        }\r\n\r\n        @Override\r\n        public String getY() {\r\n            return \"y-value\";\r\n        }\r\n    };\r\n    final Map<String, String> result = BeanUtils.describe(bean);\r\n    assertEquals(3, result.size(), \"Check Size\");\r\n    assertTrue(result.containsKey(\"class\"), \"Class\");\r\n    assertTrue(result.containsKey(\"x\"), \"X Key\");\r\n    assertTrue(result.containsKey(\"y\"), \"Y Key\");\r\n    assertEquals(\"x-value\", result.get(\"x\"), \"X Value\");\r\n    assertEquals(\"y-value\", result.get(\"y\"), \"Y Value\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\bugs\\Jira157Test.java",
  "methodName" : "testIssue_BEANUTILS_157_BeanUtils_Describe_Serializable",
  "sourceCode" : "/**\r\n * Test with an private class that overrides a public method of a \"grand parent\" public class.\r\n * <p />\r\n * See Jira issue# BEANUTILS-157.\r\n */\r\n@Test\r\nvoid testIssue_BEANUTILS_157_BeanUtils_Describe_Serializable() throws Exception {\r\n    final Object bean = new Serializable() {\r\n\r\n        private static final long serialVersionUID = 1L;\r\n\r\n        @SuppressWarnings(\"unused\")\r\n        public String getX() {\r\n            return \"x-value\";\r\n        }\r\n\r\n        @SuppressWarnings(\"unused\")\r\n        public String getY() {\r\n            return \"y-value\";\r\n        }\r\n    };\r\n    final Map<String, String> result = BeanUtils.describe(bean);\r\n    assertEquals(1, result.size(), \"Check Size\");\r\n    assertTrue(result.containsKey(\"class\"), \"Class\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\bugs\\Jira18Test.java",
  "methodName" : "testIssue_BEANUTILS_18_PropertyUtils_getProperty",
  "sourceCode" : "/**\r\n * Test {@link PropertyUtils#getProperty(Object, String)} for simple properties.\r\n */\r\n@Test\r\nvoid testIssue_BEANUTILS_18_PropertyUtils_getProperty() {\r\n    assertThrows(NoSuchMethodException.class, () -> PropertyUtils.getProperty(bean, \"simple\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\bugs\\Jira18Test.java",
  "methodName" : "testIssue_BEANUTILS_18_PropertyUtils_getProperty_Indexed",
  "sourceCode" : "/**\r\n * Test {@link PropertyUtils#getProperty(Object, String)} for indexed properties.\r\n */\r\n@Test\r\nvoid testIssue_BEANUTILS_18_PropertyUtils_getProperty_Indexed() {\r\n    assertThrows(NoSuchMethodException.class, () -> PropertyUtils.getProperty(bean, \"indexed[0]\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\bugs\\Jira18Test.java",
  "methodName" : "testIssue_BEANUTILS_18_PropertyUtils_getProperty_Mapped",
  "sourceCode" : "/**\r\n * Test {@link PropertyUtils#getProperty(Object, String)} for mapped properties.\r\n */\r\n@Test\r\nvoid testIssue_BEANUTILS_18_PropertyUtils_getProperty_Mapped() {\r\n    assertThrows(NoSuchMethodException.class, () -> PropertyUtils.getProperty(bean, \"mapped(foo-key)\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\bugs\\Jira18Test.java",
  "methodName" : "testIssue_BEANUTILS_18_PropertyUtils_isReadable",
  "sourceCode" : "/**\r\n * Test {@link PropertyUtils#isReadable(Object, String)} for simple properties.\r\n */\r\n@Test\r\nvoid testIssue_BEANUTILS_18_PropertyUtils_isReadable() {\r\n    assertFalse(PropertyUtils.isReadable(bean, \"simple\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\bugs\\Jira18Test.java",
  "methodName" : "testIssue_BEANUTILS_18_PropertyUtils_isReadable_Indexed",
  "sourceCode" : "/**\r\n * Test {@link PropertyUtils#isReadable(Object, String)} for indexed properties.\r\n */\r\n@Test\r\nvoid testIssue_BEANUTILS_18_PropertyUtils_isReadable_Indexed() {\r\n    assertFalse(PropertyUtils.isReadable(bean, \"indexed\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\bugs\\Jira18Test.java",
  "methodName" : "testIssue_BEANUTILS_18_PropertyUtils_isReadable_Mapped",
  "sourceCode" : "/**\r\n * Test {@link PropertyUtils#isReadable(Object, String)} for Mapped properties.\r\n */\r\n@Test\r\nvoid testIssue_BEANUTILS_18_PropertyUtils_isReadable_Mapped() {\r\n    assertFalse(PropertyUtils.isReadable(bean, \"mapped\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\bugs\\Jira18Test.java",
  "methodName" : "testIssue_BEANUTILS_18_PropertyUtils_isWriteable",
  "sourceCode" : "/**\r\n * Test {@link PropertyUtils#isWriteable(Object, String)} for simple properties.\r\n */\r\n@Test\r\nvoid testIssue_BEANUTILS_18_PropertyUtils_isWriteable() {\r\n    assertFalse(PropertyUtils.isWriteable(bean, \"simple\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\bugs\\Jira18Test.java",
  "methodName" : "testIssue_BEANUTILS_18_PropertyUtils_isWriteable_Indexed",
  "sourceCode" : "/**\r\n * Test {@link PropertyUtils#isWriteable(Object, String)} for indexed properties.\r\n */\r\n@Test\r\nvoid testIssue_BEANUTILS_18_PropertyUtils_isWriteable_Indexed() {\r\n    assertFalse(PropertyUtils.isWriteable(bean, \"indexed\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\bugs\\Jira18Test.java",
  "methodName" : "testIssue_BEANUTILS_18_PropertyUtils_isWriteable_Mapped",
  "sourceCode" : "/**\r\n * Test {@link PropertyUtils#isWriteable(Object, String)} for Mapped properties.\r\n */\r\n@Test\r\nvoid testIssue_BEANUTILS_18_PropertyUtils_isWriteable_Mapped() {\r\n    assertFalse(PropertyUtils.isWriteable(bean, \"mapped\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\bugs\\Jira18Test.java",
  "methodName" : "testIssue_BEANUTILS_18_PropertyUtils_setProperty",
  "sourceCode" : "/**\r\n * Test {@link PropertyUtils#setProperty(Object, String, Object)} for simple properties.\r\n */\r\n@Test\r\nvoid testIssue_BEANUTILS_18_PropertyUtils_setProperty() {\r\n    assertThrows(NoSuchMethodException.class, () -> PropertyUtils.setProperty(bean, \"simple\", \"BAR\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\bugs\\Jira18Test.java",
  "methodName" : "testIssue_BEANUTILS_18_PropertyUtils_setProperty_Indexed",
  "sourceCode" : "/**\r\n * Test {@link PropertyUtils#setProperty(Object, String, Object)} for indexed properties.\r\n */\r\n@Test\r\nvoid testIssue_BEANUTILS_18_PropertyUtils_setProperty_Indexed() {\r\n    assertThrows(NoSuchMethodException.class, () -> PropertyUtils.setProperty(bean, \"indexed[0]\", \"BAR\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\bugs\\Jira18Test.java",
  "methodName" : "testIssue_BEANUTILS_18_PropertyUtils_setProperty_Mapped",
  "sourceCode" : "/**\r\n * Test {@link PropertyUtils#setProperty(Object, String, Object)} for mapped properties.\r\n */\r\n@Test\r\nvoid testIssue_BEANUTILS_18_PropertyUtils_setProperty_Mapped() {\r\n    assertThrows(NoSuchMethodException.class, () -> PropertyUtils.setProperty(bean, \"mapped(foo-key)\", \"BAR\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\bugs\\Jira273Test.java",
  "methodName" : "testIssue_BEANUTILS_273_AnonymousNotOverridden",
  "sourceCode" : "/**\r\n * Test with an anonymous class that inherits a public method of a public class.\r\n */\r\n@Test\r\nvoid testIssue_BEANUTILS_273_AnonymousNotOverridden() throws Exception {\r\n    final Object bean = Jira273BeanFactory.createAnonymousNotOverridden();\r\n    final Object result = PropertyUtils.getProperty(bean, \"beanValue\");\r\n    assertEquals(\"PublicBeanWithMethod\", result);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\bugs\\Jira273Test.java",
  "methodName" : "testIssue_BEANUTILS_273_AnonymousOverridden",
  "sourceCode" : "/**\r\n * Test with an anonymous class that overrides a public method of a public class.\r\n */\r\n@Test\r\nvoid testIssue_BEANUTILS_273_AnonymousOverridden() throws Exception {\r\n    final Object bean = Jira273BeanFactory.createAnonymousOverridden();\r\n    final Object result = PropertyUtils.getProperty(bean, \"beanValue\");\r\n    assertEquals(\"AnonymousOverridden\", result);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\bugs\\Jira273Test.java",
  "methodName" : "testIssue_BEANUTILS_273_PrivatePrivatePublicNotOverridden",
  "sourceCode" : "/**\r\n * Test with an private class that inherits a public method of a \"grand parent\" public class.\r\n */\r\n@Test\r\nvoid testIssue_BEANUTILS_273_PrivatePrivatePublicNotOverridden() throws Exception {\r\n    final Object bean = Jira273BeanFactory.createPrivatePrivatePublicNotOverridden();\r\n    final Object result = PropertyUtils.getProperty(bean, \"beanValue\");\r\n    assertEquals(\"PublicBeanWithMethod\", result);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\bugs\\Jira273Test.java",
  "methodName" : "testIssue_BEANUTILS_273_PrivatePrivatePublicOverridden",
  "sourceCode" : "/**\r\n * Test with an private class that overrides a public method of a \"grand parent\" public class.\r\n */\r\n@Test\r\nvoid testIssue_BEANUTILS_273_PrivatePrivatePublicOverridden() throws Exception {\r\n    final Object bean = Jira273BeanFactory.createPrivatePrivatePublicOverridden();\r\n    final Object result = PropertyUtils.getProperty(bean, \"beanValue\");\r\n    assertEquals(\"PrivatePrivatePublicOverridden\", result);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\bugs\\Jira273Test.java",
  "methodName" : "testIssue_BEANUTILS_273_PrivatePublicNotOverridden",
  "sourceCode" : "/**\r\n * Test with an private class that inherits a public method of a public class.\r\n */\r\n@Test\r\nvoid testIssue_BEANUTILS_273_PrivatePublicNotOverridden() throws Exception {\r\n    final Object bean = Jira273BeanFactory.createPrivatePublicNotOverridden();\r\n    final Object result = PropertyUtils.getProperty(bean, \"beanValue\");\r\n    assertEquals(\"PublicBeanWithMethod\", result);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\bugs\\Jira273Test.java",
  "methodName" : "testIssue_BEANUTILS_273_PrivatePublicOverridden",
  "sourceCode" : "/**\r\n * Test with an private class that overrides a public method of a public class.\r\n */\r\n@Test\r\nvoid testIssue_BEANUTILS_273_PrivatePublicOverridden() throws Exception {\r\n    final Object bean = Jira273BeanFactory.createPrivatePublicOverridden();\r\n    final Object result = PropertyUtils.getProperty(bean, \"beanValue\");\r\n    assertEquals(\"PrivatePublicOverridden\", result);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\bugs\\Jira298Test.java",
  "methodName" : "testIssue_BEANUTILS_298_MethodUtils_getAccessibleMethod",
  "sourceCode" : "/**\r\n * Test {@link MethodUtils#getAccessibleMethod(Class, Method)}\r\n */\r\n@Test\r\nvoid testIssue_BEANUTILS_298_MethodUtils_getAccessibleMethod() throws Exception {\r\n    final Object bean = Jira298BeanFactory.createImplX();\r\n    Object result = null;\r\n    final Method m2 = MethodUtils.getAccessibleMethod(bean.getClass(), \"getName\", new Class[0]);\r\n    result = m2.invoke(bean);\r\n    assertEquals(\"BaseX name value\", result);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\bugs\\Jira298Test.java",
  "methodName" : "testIssue_BEANUTILS_298_PropertyUtils_getProperty",
  "sourceCode" : "/**\r\n * Test {@link PropertyUtils#getProperty(Object, String)}\r\n */\r\n@Test\r\nvoid testIssue_BEANUTILS_298_PropertyUtils_getProperty() throws Exception {\r\n    final Object bean = Jira298BeanFactory.createImplX();\r\n    final Object result = PropertyUtils.getProperty(bean, \"name\");\r\n    assertEquals(\"BaseX name value\", result);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\bugs\\Jira298Test.java",
  "methodName" : "testIssue_BEANUTILS_298_PropertyUtils_setProperty",
  "sourceCode" : "/**\r\n * Test {@link PropertyUtils#setProperty(Object, String, Object)}\r\n */\r\n@Test\r\nvoid testIssue_BEANUTILS_298_PropertyUtils_setProperty() throws Exception {\r\n    final Object bean = Jira298BeanFactory.createImplX();\r\n    assertEquals(\"BaseX name value\", ((IX) bean).getName());\r\n    PropertyUtils.setProperty(bean, \"name\", \"new name\");\r\n    assertEquals(\"new name\", ((IX) bean).getName());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\bugs\\Jira339Test.java",
  "methodName" : "testIssue_BEANUTILS_331_BeanUtilsBean_populate",
  "sourceCode" : "/**\r\n * Test {@link BeanUtils#populate(Object, Map)}\r\n */\r\n@Test\r\nvoid testIssue_BEANUTILS_331_BeanUtilsBean_populate() throws Exception {\r\n    final TestBean bean = new TestBean();\r\n    final Map<String, Object> properties = new HashMap<>();\r\n    properties.put(\"comparator\", null);\r\n    BeanUtils.populate(bean, properties);\r\n    assertNull(bean.getComparator(), \"TestBean comparator should be null\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\bugs\\Jira339Test.java",
  "methodName" : "testIssue_BEANUTILS_339_BeanUtilsBean_setProperty",
  "sourceCode" : "/**\r\n * Test {@link PropertyUtils#setProperty(Object, String, Object)}\r\n */\r\n@Test\r\nvoid testIssue_BEANUTILS_339_BeanUtilsBean_setProperty() throws Exception {\r\n    final TestBean bean = new TestBean();\r\n    BeanUtils.setProperty(bean, \"comparator\", null);\r\n    assertNull(bean.getComparator(), \"TestBean comparator should be null\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\bugs\\Jira345Test.java",
  "methodName" : "testBeanUtilsSetProperty_2DArray",
  "sourceCode" : "/**\r\n * Test {@link BeanUtils} setProperty() with 2D array.\r\n */\r\n@Test\r\nvoid testBeanUtilsSetProperty_2DArray() throws Exception {\r\n    final MyBean myBean = new MyBean();\r\n    BeanUtils.setProperty(myBean, \"matr[0][0]\", \"Sample\");\r\n    assertEquals(\"Sample\", myBean.getMatr()[0][0]);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\bugs\\Jira345Test.java",
  "methodName" : "testBeanUtilsSetProperty_3DArray",
  "sourceCode" : "/**\r\n * Test {@link BeanUtils} setProperty() with 3D array.\r\n */\r\n@Test\r\nvoid testBeanUtilsSetProperty_3DArray() throws Exception {\r\n    final MyBean myBean = new MyBean();\r\n    BeanUtils.setProperty(myBean, \"matr3D[0][0][0]\", \"Sample\");\r\n    assertEquals(\"Sample\", myBean.getMatr3D()[0][0][0]);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\bugs\\Jira347Test.java",
  "methodName" : "testMappedPropertyDescriptor_AnyArgsProperty",
  "sourceCode" : "/**\r\n * Tests that MappedPropertyDescriptor does not throw an exception while re-creating a Method reference after it has been garbage collected under the\r\n * following circumstances. - a class has a property 'mappedProperty' - there is no getter for this property - there is method\r\n * setMappedProperty(MappedPropertyTestBean,MappedPropertyTestBean)\r\n *\r\n * In this case getMappedWriteMethod should not throw an exception after the method reference has been garbage collected. It is essential that in both cases\r\n * the same method is returned or in both cases null. If the constructor of the MappedPropertyDescriptor would recognize the situation (of the first param\r\n * not being of type String) this would be fine as well.\r\n */\r\n@Test\r\nvoid testMappedPropertyDescriptor_AnyArgsProperty() throws Exception {\r\n    final String className = \"org.apache.commons.beanutils2.MappedPropertyTestBean\";\r\n    try (final URLClassLoader loader = newClassLoader()) {\r\n        final Class<?> beanClass = loader.loadClass(className);\r\n        beanClass.newInstance();\r\n        // Sanity checks only\r\n        assertNotNull(loader, \"ClassLoader is null\");\r\n        assertNotNull(beanClass, \"BeanClass is null\");\r\n        assertNotSame(getClass().getClassLoader(), beanClass.getClassLoader(), \"ClassLoaders should be different..\");\r\n        assertSame(beanClass.getClassLoader(), loader, \"BeanClass ClassLoader incorrect\");\r\n        // now start the test\r\n        MappedPropertyDescriptor descriptor = null;\r\n        try {\r\n            descriptor = new MappedPropertyDescriptor(\"anyMapped\", beanClass);\r\n        } catch (final IntrospectionException e) {\r\n            // this would be fine as well\r\n        }\r\n        if (descriptor != null) {\r\n            final String m1 = getMappedWriteMethod(descriptor);\r\n            forceGarbageCollection();\r\n            try {\r\n                final String m2 = getMappedWriteMethod(descriptor);\r\n                assertEquals(m1, m2, \"Method returned post garbage collection differs from Method returned prior to gc\");\r\n            } catch (final RuntimeException e) {\r\n                fail(\"getMappedWriteMethod threw an exception after garbage collection \" + e);\r\n            }\r\n        }\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\bugs\\Jira349Test.java",
  "methodName" : "testIssue_BEANUTILS_349_PropertyUtils_copyProperties",
  "sourceCode" : "/**\r\n * Test {@link PropertyUtils#copyProperties(Object, Object)}\r\n */\r\n@Test\r\nvoid testIssue_BEANUTILS_349_PropertyUtils_copyProperties() {\r\n    final PrimitiveBean dest = new PrimitiveBean();\r\n    final ObjectBean origin = new ObjectBean();\r\n    assertThrows(IllegalArgumentException.class, () -> PropertyUtils.copyProperties(dest, origin));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\bugs\\Jira357Test.java",
  "methodName" : "testPropertyUtils_getPropertyDescriptors_Bar",
  "sourceCode" : "/**\r\n * Test {@link PropertyUtils#getPropertyDescriptors(Class)}\r\n */\r\n@Test\r\nvoid testPropertyUtils_getPropertyDescriptors_Bar() throws Exception {\r\n    checkReadMethod(\"bar\", ConcreteTestBean.class);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\bugs\\Jira357Test.java",
  "methodName" : "testPropertyUtils_getPropertyDescriptors_Foo",
  "sourceCode" : "/**\r\n * Test {@link PropertyUtils#getPropertyDescriptors(Class)}\r\n */\r\n@Test\r\nvoid testPropertyUtils_getPropertyDescriptors_Foo() throws Exception {\r\n    checkReadMethod(\"foo\", ConcreteTestBean.class);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\bugs\\Jira357Test.java",
  "methodName" : "testPropertyUtils_getPropertyDescriptors_InnerClassProperty",
  "sourceCode" : "/**\r\n * Test {@link PropertyUtils#getPropertyDescriptors(Class)}\r\n */\r\n@Test\r\nvoid testPropertyUtils_getPropertyDescriptors_InnerClassProperty() throws Exception {\r\n    checkReadMethod(\"innerClassProperty\", ConcreteTestBean.class);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\bugs\\Jira358Test.java",
  "methodName" : "testPropertyUtils_getIndexedProperty_Array",
  "sourceCode" : "/**\r\n * Test {@link PropertyUtils#getIndexedProperty(Object, String, int)}\r\n */\r\n@Test\r\nvoid testPropertyUtils_getIndexedProperty_Array() throws Exception {\r\n    final TestBean bean = new TestBean();\r\n    assertThrows(ArrayIndexOutOfBoundsException.class, () -> PropertyUtils.getIndexedProperty(bean, \"intArray\", bean.getIntArray().length));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\bugs\\Jira358Test.java",
  "methodName" : "testPropertyUtils_getIndexedProperty_List",
  "sourceCode" : "/**\r\n * Test {@link PropertyUtils#getIndexedProperty(Object, String, int)}\r\n */\r\n@Test\r\nvoid testPropertyUtils_getIndexedProperty_List() throws Exception {\r\n    final TestBean bean = new TestBean();\r\n    assertThrows(IndexOutOfBoundsException.class, () -> PropertyUtils.getIndexedProperty(bean, \"listIndexed\", bean.getListIndexed().size()));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\bugs\\Jira359Test.java",
  "methodName" : "testBeanUtilsSetProperty_CustomConvertStringToArray_WithColonValue",
  "sourceCode" : "/**\r\n * Test {@link BeanUtils} setProperty() String to array with colon value\r\n */\r\n@Test\r\nvoid testBeanUtilsSetProperty_CustomConvertStringToArray_WithColonValue() throws Exception {\r\n    final ArrayConverter converter = new ArrayConverter(String[].class, new StringConverter());\r\n    converter.setAllowedChars(new char[] { '.', '-', ':' });\r\n    final BeanUtilsBean utils = new BeanUtilsBean();\r\n    utils.getConvertUtils().register(converter, String[].class);\r\n    final SimplePojoData simplePojo = new SimplePojoData();\r\n    utils.setProperty(simplePojo, \"jcrMixinTypes\", \"mix:rereferencible,mix:simple\");\r\n    showArray(\"Custom WithColonValue\", simplePojo.getJcrMixinTypes());\r\n    assertEquals(2, simplePojo.getJcrMixinTypes().length, \"array size\");\r\n    assertEquals(\"mix:rereferencible\", simplePojo.getJcrMixinTypes()[0]);\r\n    assertEquals(\"mix:simple\", simplePojo.getJcrMixinTypes()[1]);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\bugs\\Jira359Test.java",
  "methodName" : "testBeanUtilsSetProperty_DefaultConvertStringToArray_WithColonValue",
  "sourceCode" : "/**\r\n * Test {@link BeanUtils} setProperty() String to array with colon value\r\n */\r\n@Test\r\nvoid testBeanUtilsSetProperty_DefaultConvertStringToArray_WithColonValue() throws Exception {\r\n    final SimplePojoData simplePojo = new SimplePojoData();\r\n    BeanUtils.setProperty(simplePojo, \"jcrMixinTypes\", \"mix:rereferencible,mix:simple\");\r\n    showArray(\"Default WithColonValue\", simplePojo.getJcrMixinTypes());\r\n    assertEquals(4, simplePojo.getJcrMixinTypes().length, \"array size\");\r\n    assertEquals(\"mix\", simplePojo.getJcrMixinTypes()[0]);\r\n    assertEquals(\"rereferencible\", simplePojo.getJcrMixinTypes()[1]);\r\n    assertEquals(\"mix\", simplePojo.getJcrMixinTypes()[2]);\r\n    assertEquals(\"simple\", simplePojo.getJcrMixinTypes()[3]);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\bugs\\Jira359Test.java",
  "methodName" : "testBeanUtilsSetProperty_DefaultConvertStringToArray_WithoutColonValue",
  "sourceCode" : "/**\r\n * Test {@link BeanUtils} setProperty() String to array without colon value\r\n */\r\n@Test\r\nvoid testBeanUtilsSetProperty_DefaultConvertStringToArray_WithoutColonValue() throws Exception {\r\n    final SimplePojoData simplePojo = new SimplePojoData();\r\n    BeanUtils.setProperty(simplePojo, \"jcrMixinTypes\", \"mixrereferencible,mixsimple\");\r\n    showArray(\"Default WithoutColonValue\", simplePojo.getJcrMixinTypes());\r\n    assertEquals(2, simplePojo.getJcrMixinTypes().length, \"array size\");\r\n    assertEquals(\"mixrereferencible\", simplePojo.getJcrMixinTypes()[0]);\r\n    assertEquals(\"mixsimple\", simplePojo.getJcrMixinTypes()[1]);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\bugs\\Jira359Test.java",
  "methodName" : "testBeanUtilsSetProperty_DefaultConvertStringToArray_WithoutColonValueAndNocoma",
  "sourceCode" : "/**\r\n * Test {@link BeanUtils} setProperty() String to array without colon value and no comma\r\n */\r\n@Test\r\nvoid testBeanUtilsSetProperty_DefaultConvertStringToArray_WithoutColonValueAndNocoma() throws Exception {\r\n    final SimplePojoData simplePojo = new SimplePojoData();\r\n    BeanUtils.setProperty(simplePojo, \"jcrMixinTypes\", \"mixrereferencible\");\r\n    showArray(\"Default WithoutColonAndNocoma\", simplePojo.getJcrMixinTypes());\r\n    assertEquals(1, simplePojo.getJcrMixinTypes().length, \"array size\");\r\n    assertEquals(\"mixrereferencible\", simplePojo.getJcrMixinTypes()[0]);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\bugs\\Jira368Test.java",
  "methodName" : "testBeanUtilsSetProperty_NullBean",
  "sourceCode" : "/**\r\n * Test {@link BeanUtils} setProperty() with Null value\r\n */\r\n@Test\r\nvoid testBeanUtilsSetProperty_NullBean() throws Exception {\r\n    assertThrows(NullPointerException.class, () -> BeanUtils.setProperty(null, \"foo\", \"bar\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\bugs\\Jira369Test.java",
  "methodName" : "testBeanUtilsGetProperty_aRatedCd",
  "sourceCode" : "/**\r\n * Test {@link BeanUtils} getProperty() for property \"aRatedCd\".\r\n */\r\n@Test\r\nvoid testBeanUtilsGetProperty_aRatedCd() throws Exception {\r\n    final TestBean bean = new TestBean();\r\n    bean.setARatedCd(\"foo\");\r\n    assertThrows(NoSuchMethodException.class, () -> assertEquals(\"foo\", BeanUtils.getProperty(bean, \"aRatedCd\")));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\bugs\\Jira369Test.java",
  "methodName" : "testBeanUtilsGetProperty_ARatedCd",
  "sourceCode" : "/**\r\n * Test {@link BeanUtils} getProperty() for property \"ARatedCd\".\r\n */\r\n@Test\r\nvoid testBeanUtilsGetProperty_ARatedCd() throws Exception {\r\n    final TestBean bean = new TestBean();\r\n    bean.setARatedCd(\"foo\");\r\n    assertEquals(\"foo\", BeanUtils.getProperty(bean, \"ARatedCd\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\bugs\\Jira369Test.java",
  "methodName" : "testBeanUtilsGetProperty_bRatedCd",
  "sourceCode" : "/**\r\n * Test {@link BeanUtils} getProperty() for property \"bRatedCd\".\r\n */\r\n@Test\r\nvoid testBeanUtilsGetProperty_bRatedCd() throws Exception {\r\n    final TestBean bean = new TestBean();\r\n    bean.setbRatedCd(\"foo\");\r\n    assertEquals(\"foo\", BeanUtils.getProperty(bean, \"bRatedCd\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\bugs\\Jira381Test.java",
  "methodName" : "testIssue_BEANUTILS_381_getMatchingAccessibleMethod",
  "sourceCode" : "/**\r\n * Test with an private class that overrides a public method of a \"grand parent\" public class.\r\n * <p />\r\n * See Jira issue# BEANUTILS-381.\r\n */\r\n@Test\r\nvoid testIssue_BEANUTILS_381_getMatchingAccessibleMethod() {\r\n    final Class<?> target = TestServiceBean.class;\r\n    final String methodName = \"performOp\";\r\n    final Class<?>[] runtimeClasses = { TestObjectSubclass.class };\r\n    final Method returned = MethodUtils.getMatchingAccessibleMethod(target, methodName, runtimeClasses);\r\n    assertEquals(target, returned.getDeclaringClass());\r\n    assertEquals(methodName, returned.getName());\r\n    assertEquals(TestObject.class, returned.getParameterTypes()[0]);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\bugs\\Jira411Test.java",
  "methodName" : "testSetProperty",
  "sourceCode" : "@Test\r\nvoid testSetProperty() throws Exception {\r\n    instance.setProperty(testBean, \"imgLink.x\", \"1\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\bugs\\Jira422bTest.java",
  "methodName" : "testRootBean",
  "sourceCode" : "@Test\r\nvoid testRootBean() throws Exception {\r\n    final RootBeanB bean = new FirstChildBeanB();\r\n    final Class<?> propertyType = PropertyUtils.getPropertyType(bean, \"file[0]\");\r\n    assertEquals(String.class.getName(), propertyType.getName());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\bugs\\Jira422bTest.java",
  "methodName" : "testSecondChildBean",
  "sourceCode" : "@Test\r\nvoid testSecondChildBean() throws Exception {\r\n    final RootBeanB bean = new SecondChildBeanB();\r\n    final Class<?> propertyType = PropertyUtils.getPropertyType(bean, \"file[0]\");\r\n    assertEquals(String.class.getName(), propertyType.getName());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\bugs\\Jira422Test.java",
  "methodName" : "testRootBean",
  "sourceCode" : "@Test\r\nvoid testRootBean() throws Exception {\r\n    final RootBean bean = new FirstChildBean();\r\n    final Class<?> propertyType = PropertyUtils.getPropertyType(bean, \"file[0]\");\r\n    assertEquals(String.class.getName(), propertyType.getName());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\bugs\\Jira422Test.java",
  "methodName" : "testSecondChildBean",
  "sourceCode" : "@Test\r\nvoid testSecondChildBean() throws Exception {\r\n    final RootBean bean = new SecondChildBean();\r\n    final Class<?> propertyType = PropertyUtils.getPropertyType(bean, \"file[0]\");\r\n    assertEquals(String.class.getName(), propertyType.getName());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\bugs\\Jira454Test.java",
  "methodName" : "testCopyProperties",
  "sourceCode" : "@Test\r\nvoid testCopyProperties() throws Exception {\r\n    final TestBean bean = new TestBean();\r\n    final TestBean b2 = new TestBean();\r\n    BeanUtils.copyProperties(b2, bean);\r\n    assertNull(b2.getCreatedAt(), \"Got a creation date\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\bugs\\Jira456Test.java",
  "methodName" : "testPropertyIsWritable",
  "sourceCode" : "/**\r\n * Tests whether a property is recognized as writable even if the reference to its write method was freed.\r\n */\r\n@Test\r\nvoid testPropertyIsWritable() throws Exception {\r\n    final FluentIntrospectionTestBean bean = clearWriteMethodRef();\r\n    assertTrue(pub.isWriteable(bean, TEST_PROP), \"Not writable\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\bugs\\Jira456Test.java",
  "methodName" : "testWriteMethodRecover",
  "sourceCode" : "/**\r\n * Tests whether a lost write method is automatically recovered and can be invoked.\r\n */\r\n@Test\r\nvoid testWriteMethodRecover() throws Exception {\r\n    final FluentIntrospectionTestBean bean = clearWriteMethodRef();\r\n    final String value = \"Test value\";\r\n    pub.setProperty(bean, TEST_PROP, value);\r\n    assertEquals(value, bean.getFluentGetProperty(), \"Property not set\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\bugs\\Jira458Test.java",
  "methodName" : "testConversionWithNullDefaultEmptyString",
  "sourceCode" : "/**\r\n * Tests a conversion passing in an empty string.\r\n */\r\n@Test\r\nvoid testConversionWithNullDefaultEmptyString() {\r\n    checkConversionWithNullDefault(\"\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\bugs\\Jira458Test.java",
  "methodName" : "testConversionWithNullDefaultNullInput",
  "sourceCode" : "/**\r\n * Tests a conversion passing in null.\r\n */\r\n@Test\r\nvoid testConversionWithNullDefaultNullInput() {\r\n    checkConversionWithNullDefault(null);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\bugs\\Jira463Test.java",
  "methodName" : "testSuppressClassProperty",
  "sourceCode" : "/**\r\n * Tests that with a specialized {@code BeanIntrospector} implementation the class property can be suppressed.\r\n */\r\n@Test\r\nvoid testSuppressClassProperty() throws Exception {\r\n    final BeanUtilsBean bub = new BeanUtilsBean();\r\n    bub.getPropertyUtils().addBeanIntrospector(SuppressPropertiesBeanIntrospector.SUPPRESS_CLASS);\r\n    final AlphaBean bean = new AlphaBean();\r\n    assertThrows(NoSuchMethodException.class, () -> bub.getProperty(bean, \"class\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\bugs\\Jira465Test.java",
  "methodName" : "testArrayIndexedProperty",
  "sourceCode" : "@Test\r\nvoid testArrayIndexedProperty() throws Exception {\r\n    final ArrayIndexedProp bean = new ArrayIndexedProp();\r\n    changeValue(bean);\r\n    assertEquals(NEW_VALUE, bean.getFoo(0), \"Wrong value\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\bugs\\Jira465Test.java",
  "methodName" : "testArrayProperty",
  "sourceCode" : "@Test\r\nvoid testArrayProperty() throws Exception {\r\n    final ArrayProp bean = new ArrayProp();\r\n    changeValue(bean);\r\n    assertEquals(NEW_VALUE, bean.getFoo()[0], \"Wrong value\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\bugs\\Jira465Test.java",
  "methodName" : "testListIndexedProperty",
  "sourceCode" : "@Test\r\nvoid testListIndexedProperty() throws Exception {\r\n    final ListIndexedProp bean = new ListIndexedProp();\r\n    changeValue(bean);\r\n    assertEquals(NEW_VALUE, bean.getFoo(0), \"Wrong value\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\bugs\\Jira465Test.java",
  "methodName" : "testListProperty",
  "sourceCode" : "@Test\r\nvoid testListProperty() throws Exception {\r\n    final ListProp bean = new ListProp();\r\n    changeValue(bean);\r\n    assertEquals(NEW_VALUE, bean.getFoo().get(0), \"Wrong value\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\bugs\\Jira492Test.java",
  "methodName" : "describe",
  "sourceCode" : "@Test\r\nvoid describe() throws Exception {\r\n    final Map<String, String> described = beanUtils.describe(bean);\r\n    // Only first element survives as a String\r\n    assertEquals(\"item0\", described.get(\"someList\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\bugs\\Jira492Test.java",
  "methodName" : "getIndexedProperty",
  "sourceCode" : "@Test\r\nvoid getIndexedProperty() throws Exception {\r\n    assertEquals(\"item0\", beanUtils.getIndexedProperty(bean, \"someList\", 0));\r\n    assertEquals(\"item1\", beanUtils.getIndexedProperty(bean, \"someList[1]\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\bugs\\Jira492Test.java",
  "methodName" : "getProperty",
  "sourceCode" : "@Test\r\nvoid getProperty() throws Exception {\r\n    assertEquals(\"item0\", beanUtils.getProperty(bean, \"someList\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\bugs\\Jira492Test.java",
  "methodName" : "getPropertyDescriptor",
  "sourceCode" : "@Test\r\nvoid getPropertyDescriptor() throws Exception {\r\n    final PropertyDescriptor propDesc = propertyUtils.getPropertyDescriptor(bean, \"someList\");\r\n    if (supportsIndexedLists()) {\r\n        // Java 7 or earlier? (BEANUTILS-492)\r\n        final IndexedPropertyDescriptor indexed = (IndexedPropertyDescriptor) propDesc;\r\n        assertEquals(String.class, indexed.getIndexedReadMethod().getReturnType());\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\bugs\\Jira492Test.java",
  "methodName" : "getPropertySubScript",
  "sourceCode" : "@Test\r\nvoid getPropertySubScript() throws Exception {\r\n    assertEquals(\"item0\", beanUtils.getProperty(bean, \"someList[0]\"));\r\n    assertEquals(\"item1\", beanUtils.getProperty(bean, \"someList[1]\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\bugs\\Jira492Test.java",
  "methodName" : "getPropertyType",
  "sourceCode" : "@Test\r\nvoid getPropertyType() throws Exception {\r\n    if (supportsIndexedLists()) {\r\n        // legacy behavior (< Java 8)\r\n        assertEquals(String.class, propertyUtils.getPropertyType(bean, \"someList[0]\"));\r\n    } else {\r\n        assertEquals(List.class, propertyUtils.getPropertyType(bean, \"someList\"));\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\bugs\\Jira492Test.java",
  "methodName" : "getPropertyUnconverted",
  "sourceCode" : "@Test\r\nvoid getPropertyUnconverted() throws Exception {\r\n    final Object someList = propertyUtils.getProperty(bean, \"someList\");\r\n    assertInstanceOf(List.class, someList, \"Did not retrieve list\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\bugs\\Jira492Test.java",
  "methodName" : "setIndexedProperty",
  "sourceCode" : "@Test\r\nvoid setIndexedProperty() throws Exception {\r\n    beanUtils.setProperty(bean, \"someList[1]\", \"item1-modified\");\r\n    assertEquals(\"item1-modified\", beanUtils.getIndexedProperty(bean, \"someList\", 1));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\bugs\\Jira493Test.java",
  "methodName" : "testIndexedProperties",
  "sourceCode" : "@Test\r\nvoid testIndexedProperties() throws Exception {\r\n    final LazyDynaBean lazyDynaBean = new LazyDynaBean();\r\n    final BeanUtilsBean beanUtilsBean = BeanUtilsBean.getInstance();\r\n    beanUtilsBean.setProperty(lazyDynaBean, \"x[0]\", \"x1\");\r\n    beanUtilsBean.setProperty(lazyDynaBean, \"x[1]\", \"x2\");\r\n    final Object x = lazyDynaBean.get(\"x\");\r\n    assertEquals(\"[x1, x2]\", x.toString());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\bugs\\Jira509Test.java",
  "methodName" : "testConcurrent",
  "sourceCode" : "/**\r\n * The bug makes the {@link WrapDynaClass#createDynaClass} method run in an infinite loop and acquire locks. The test case adds a timeout. The test case may\r\n * pass even without this fix because this is a rare scenario.\r\n */\r\n@Timeout(value = 60, unit = TimeUnit.SECONDS)\r\n@Test\r\nvoid testConcurrent() throws InterruptedException {\r\n    final List<Class<?>> classList = Arrays.asList(Map.class, HashMap.class, Collections.class, Arrays.class, Collection.class, Set.class, ArrayList.class, List.class, HashSet.class);\r\n    // All daemon threads.\r\n    final ExecutorService executor = Executors.newFixedThreadPool(100, new BasicThreadFactory.Builder().daemon(true).build());\r\n    try {\r\n        // Loop _may_ hang without fix.\r\n        for (int i = 1; i < 10_000_000; i++) {\r\n            executor.submit(new Runnable() {\r\n\r\n                final Class<?> clazz = classList.get(random(classList.size()));\r\n\r\n                @Override\r\n                public void run() {\r\n                    final WrapDynaClass w = WrapDynaClass.createDynaClass(clazz);\r\n                    assertNotNull(w);\r\n                }\r\n            });\r\n        }\r\n    } finally {\r\n        executor.shutdown();\r\n        executor.awaitTermination(3500, TimeUnit.MILLISECONDS);\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\bugs\\Jira520Test.java",
  "methodName" : "testAllowAccessToClassProperty",
  "sourceCode" : "/**\r\n * Allow opt-out to make your app less secure but allow access to \"class\".\r\n */\r\n@Test\r\nvoid testAllowAccessToClassProperty() throws Exception {\r\n    final BeanUtilsBean bub = new BeanUtilsBean();\r\n    bub.getPropertyUtils().removeBeanIntrospector(SuppressPropertiesBeanIntrospector.SUPPRESS_CLASS);\r\n    final AlphaBean bean = new AlphaBean();\r\n    final String result = bub.getProperty(bean, \"class\");\r\n    assertEquals(\"org.apache.commons.beanutils2.AlphaBean\", result, \"Class property should have been accessed\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\bugs\\Jira520Test.java",
  "methodName" : "testSuppressClassPropertyByDefault",
  "sourceCode" : "/**\r\n * By default opt-in to security that does not allow access to \"class\".\r\n */\r\n@Test\r\nvoid testSuppressClassPropertyByDefault() throws Exception {\r\n    final BeanUtilsBean bub = new BeanUtilsBean();\r\n    final AlphaBean bean = new AlphaBean();\r\n    assertThrows(NoSuchMethodException.class, () -> bub.getProperty(bean, \"class\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\bugs\\Jira541Test.java",
  "methodName" : "testFluentBeanIntrospectorOnOverriddenSetter",
  "sourceCode" : "@Test\r\nvoid testFluentBeanIntrospectorOnOverriddenSetter() throws Exception {\r\n    testImpl();\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\bugs\\Jira541Test.java",
  "methodName" : "testFluentBeanIntrospectorOnOverriddenSetterConcurrent",
  "sourceCode" : "@Test\r\nvoid testFluentBeanIntrospectorOnOverriddenSetterConcurrent() throws Exception {\r\n    final ExecutorService executionService = Executors.newFixedThreadPool(256);\r\n    try {\r\n        final List<Future<?>> futures = new ArrayList<>();\r\n        for (int i = 0; i < 10000; i++) {\r\n            futures.add(executionService.submit(() -> {\r\n                testImpl();\r\n                return null;\r\n            }));\r\n        }\r\n        for (final Future<?> future : futures) {\r\n            future.get();\r\n        }\r\n    } finally {\r\n        executionService.shutdown();\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\bugs\\Jira61Test.java",
  "methodName" : "testIssue_BEANUTILS_61_BeanUtils_copyProperties_from_WrapDynaBean",
  "sourceCode" : "/**\r\n * Test {@link BeanUtils#copyProperties(Object, Object)} to a read-only WrapDynaBean property.\r\n */\r\n@Test\r\nvoid testIssue_BEANUTILS_61_BeanUtils_copyProperties_from_WrapDynaBean() throws Exception {\r\n    final String value = \"ORIG TARGET VALUE\";\r\n    final TestBean targetBean = Jira61BeanFactory.createBean();\r\n    targetBean.setSimpleWriteOnly(value);\r\n    BeanUtils.copyProperties(targetBean, wrapDynaBean);\r\n    assertEquals(value, targetBean.getSimpleReadOnly());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\bugs\\Jira61Test.java",
  "methodName" : "testIssue_BEANUTILS_61_BeanUtils_copyProperties_to_WrapDynaBean",
  "sourceCode" : "/**\r\n * Test {@link BeanUtils#copyProperties(Object, Object)} to a read-only WrapDynaBean property.\r\n */\r\n@Test\r\nvoid testIssue_BEANUTILS_61_BeanUtils_copyProperties_to_WrapDynaBean() throws Exception {\r\n    final String value = \"copied simpleReadOnly\";\r\n    final Map<String, Object> source = new HashMap<>();\r\n    source.put(\"simpleReadOnly\", value);\r\n    BeanUtils.copyProperties(wrapDynaBean, source);\r\n    assertNotEquals(value, testBean.getSimpleReadOnly());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\bugs\\Jira61Test.java",
  "methodName" : "testIssue_BEANUTILS_61_PropertyUtils_copyProperties_from_WrapDynaBean",
  "sourceCode" : "/**\r\n * Test {@link PropertyUtils#copyProperties(Object, Object)} to a read-only WrapDynaBean property.\r\n */\r\n@Test\r\nvoid testIssue_BEANUTILS_61_PropertyUtils_copyProperties_from_WrapDynaBean() throws Exception {\r\n    final String value = \"ORIG TARGET VALUE\";\r\n    final TestBean targetBean = Jira61BeanFactory.createBean();\r\n    targetBean.setSimpleWriteOnly(value);\r\n    PropertyUtils.copyProperties(targetBean, wrapDynaBean);\r\n    assertEquals(value, targetBean.getSimpleReadOnly());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\bugs\\Jira61Test.java",
  "methodName" : "testIssue_BEANUTILS_61_PropertyUtils_copyProperties_to_WrapDynaBean",
  "sourceCode" : "/**\r\n * Test {@link PropertyUtils#copyProperties(Object, Object)} to a read-only WrapDynaBean property.\r\n */\r\n@Test\r\nvoid testIssue_BEANUTILS_61_PropertyUtils_copyProperties_to_WrapDynaBean() throws Exception {\r\n    final String expected = \"copied simpleReadOnly\";\r\n    final Map<String, Object> source = new HashMap<>();\r\n    source.put(\"simpleReadOnly\", expected);\r\n    PropertyUtils.copyProperties(wrapDynaBean, source);\r\n    assertNotEquals(expected, testBean.getSimpleReadOnly());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\bugs\\Jira61Test.java",
  "methodName" : "testIssue_BEANUTILS_61_PropertyUtils_getProperty",
  "sourceCode" : "/**\r\n * Test {@link PropertyUtils#getProperty(Object, String)} for simple properties.\r\n */\r\n@Test\r\nvoid testIssue_BEANUTILS_61_PropertyUtils_getProperty() throws Exception {\r\n    assertEquals(testBean.getSimpleReadOnly(), PropertyUtils.getProperty(wrapDynaBean, \"simpleReadOnly\"));\r\n    assertThrows(IllegalArgumentException.class, () -> PropertyUtils.getProperty(wrapDynaBean, \"simpleWriteOnly\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\bugs\\Jira61Test.java",
  "methodName" : "testIssue_BEANUTILS_61_PropertyUtils_getProperty_Indexed",
  "sourceCode" : "/**\r\n * Test {@link PropertyUtils#getProperty(Object, String)} for indexed properties.\r\n */\r\n@Test\r\nvoid testIssue_BEANUTILS_61_PropertyUtils_getProperty_Indexed() throws Exception {\r\n    assertEquals(testBean.getIndexedReadOnly(0), PropertyUtils.getProperty(wrapDynaBean, \"indexedReadOnly[0]\"));\r\n    assertThrows(IllegalArgumentException.class, () -> PropertyUtils.getProperty(wrapDynaBean, \"indexedWriteOnly[0]\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\bugs\\Jira61Test.java",
  "methodName" : "testIssue_BEANUTILS_61_PropertyUtils_getProperty_Mapped",
  "sourceCode" : "/**\r\n * Test {@link PropertyUtils#getProperty(Object, String)} for mapped properties.\r\n */\r\n@Test\r\nvoid testIssue_BEANUTILS_61_PropertyUtils_getProperty_Mapped() throws Exception {\r\n    assertEquals(testBean.getMappedReadOnly(\"foo-key\"), PropertyUtils.getProperty(wrapDynaBean, \"mappedReadOnly(foo-key)\"));\r\n    assertThrows(IllegalArgumentException.class, () -> PropertyUtils.getProperty(wrapDynaBean, \"mappedWriteOnly(foo-key)\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\bugs\\Jira61Test.java",
  "methodName" : "testIssue_BEANUTILS_61_PropertyUtils_isReadable",
  "sourceCode" : "/**\r\n * Test {@link PropertyUtils#isReadable(Object, String)} for simple properties.\r\n */\r\n@Test\r\nvoid testIssue_BEANUTILS_61_PropertyUtils_isReadable() {\r\n    assertTrue(PropertyUtils.isReadable(wrapDynaBean, \"simpleReadOnly\"));\r\n    assertFalse(PropertyUtils.isReadable(wrapDynaBean, \"simpleWriteOnly\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\bugs\\Jira61Test.java",
  "methodName" : "testIssue_BEANUTILS_61_PropertyUtils_isReadable_Indexed",
  "sourceCode" : "/**\r\n * Test {@link PropertyUtils#isReadable(Object, String)} for indexed properties.\r\n */\r\n@Test\r\nvoid testIssue_BEANUTILS_61_PropertyUtils_isReadable_Indexed() {\r\n    assertTrue(PropertyUtils.isReadable(wrapDynaBean, \"indexedReadOnly\"));\r\n    assertFalse(PropertyUtils.isReadable(wrapDynaBean, \"indexedWriteOnly\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\bugs\\Jira61Test.java",
  "methodName" : "testIssue_BEANUTILS_61_PropertyUtils_isReadable_Mapped",
  "sourceCode" : "/**\r\n * Test {@link PropertyUtils#isReadable(Object, String)} for mapped properties.\r\n */\r\n@Test\r\nvoid testIssue_BEANUTILS_61_PropertyUtils_isReadable_Mapped() {\r\n    assertTrue(PropertyUtils.isReadable(wrapDynaBean, \"mappedReadOnly\"));\r\n    assertFalse(PropertyUtils.isReadable(wrapDynaBean, \"mappedWriteOnly\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\bugs\\Jira61Test.java",
  "methodName" : "testIssue_BEANUTILS_61_PropertyUtils_isWriteable",
  "sourceCode" : "/**\r\n * Test {@link PropertyUtils#isWriteable(Object, String)} for simple properties.\r\n */\r\n@Test\r\nvoid testIssue_BEANUTILS_61_PropertyUtils_isWriteable() {\r\n    assertFalse(PropertyUtils.isWriteable(wrapDynaBean, \"simpleReadOnly\"));\r\n    assertTrue(PropertyUtils.isWriteable(wrapDynaBean, \"simpleWriteOnly\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\bugs\\Jira61Test.java",
  "methodName" : "testIssue_BEANUTILS_61_PropertyUtils_isWriteable_Indexed",
  "sourceCode" : "/**\r\n * Test {@link PropertyUtils#isWriteable(Object, String)} for indexed properties.\r\n */\r\n@Test\r\nvoid testIssue_BEANUTILS_61_PropertyUtils_isWriteable_Indexed() {\r\n    assertFalse(PropertyUtils.isWriteable(wrapDynaBean, \"indexedReadOnly\"));\r\n    assertTrue(PropertyUtils.isWriteable(wrapDynaBean, \"indexedWriteOnly\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\bugs\\Jira61Test.java",
  "methodName" : "testIssue_BEANUTILS_61_PropertyUtils_isWriteable_Mapped",
  "sourceCode" : "/**\r\n * Test {@link PropertyUtils#isWriteable(Object, String)} for mapped properties.\r\n */\r\n@Test\r\nvoid testIssue_BEANUTILS_61_PropertyUtils_isWriteable_Mapped() {\r\n    assertFalse(PropertyUtils.isWriteable(wrapDynaBean, \"mappedReadOnly\"));\r\n    assertTrue(PropertyUtils.isWriteable(wrapDynaBean, \"mappedWriteOnly\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\bugs\\Jira61Test.java",
  "methodName" : "testIssue_BEANUTILS_61_PropertyUtils_setProperty",
  "sourceCode" : "/**\r\n * Test {@link PropertyUtils#setProperty(Object, String, Object)} for simple properties.\r\n */\r\n@Test\r\nvoid testIssue_BEANUTILS_61_PropertyUtils_setProperty() throws Exception {\r\n    assertThrows(IllegalArgumentException.class, () -> PropertyUtils.setProperty(wrapDynaBean, \"simpleReadOnly\", \"READONLY-SIMPLE-BAR\"));\r\n    PropertyUtils.setProperty(wrapDynaBean, \"simpleWriteOnly\", \"SIMPLE-BAR\");\r\n    assertEquals(\"SIMPLE-BAR\", testBean.getSimpleReadOnly());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\bugs\\Jira61Test.java",
  "methodName" : "testIssue_BEANUTILS_61_PropertyUtils_setProperty_Indexed",
  "sourceCode" : "/**\r\n * Test {@link PropertyUtils#setProperty(Object, String, Object)} for indexed properties.\r\n */\r\n@Test\r\nvoid testIssue_BEANUTILS_61_PropertyUtils_setProperty_Indexed() throws Exception {\r\n    assertThrows(IllegalArgumentException.class, () -> PropertyUtils.setProperty(wrapDynaBean, \"indexedReadOnly[0]\", \"READONLY-INDEXED-BAR\"));\r\n    PropertyUtils.setProperty(wrapDynaBean, \"indexedWriteOnly[0]\", \"INDEXED-BAR\");\r\n    assertEquals(\"INDEXED-BAR\", testBean.getIndexedReadOnly(0));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\bugs\\Jira61Test.java",
  "methodName" : "testIssue_BEANUTILS_61_PropertyUtils_setProperty_Mapped",
  "sourceCode" : "/**\r\n * Test {@link PropertyUtils#setProperty(Object, String, Object)} for mapped properties.\r\n */\r\n@Test\r\nvoid testIssue_BEANUTILS_61_PropertyUtils_setProperty_Mapped() throws Exception {\r\n    assertThrows(IllegalArgumentException.class, () -> PropertyUtils.setProperty(wrapDynaBean, \"mappedReadOnly(foo-key)\", \"READONLY-MAPPED-BAR\"));\r\n    PropertyUtils.setProperty(wrapDynaBean, \"mappedWriteOnly(foo-key)\", \"MAPPED-BAR\");\r\n    assertEquals(\"MAPPED-BAR\", testBean.getMappedReadOnly(\"foo-key\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\bugs\\Jira87Test.java",
  "methodName" : "testJira87",
  "sourceCode" : "/**\r\n * Interface definition with a mapped property\r\n */\r\n@Test\r\nvoid testJira87() throws Exception {\r\n    final Jira87BeanFactory.PublicMappedInterface bean = Jira87BeanFactory.createMappedPropertyBean();\r\n    // The test impl. returns the key value\r\n    assertEquals(\"foo\", PropertyUtils.getMappedProperty(bean, \"value(foo)\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\bugs\\Jira92Test.java",
  "methodName" : "testIssue_BEANUTILS_92_copyProperties_indexed_only_setter",
  "sourceCode" : "/**\r\n * Test copy properties where the target bean only has an indexed setter.\r\n */\r\n@Test\r\nvoid testIssue_BEANUTILS_92_copyProperties_indexed_only_setter() throws Exception {\r\n    PropertyUtils.copyProperties(new Jira92TestBean(), new TestBean());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\converters\\AbstractDateConverterTest.java",
  "methodName" : "testConvertDate",
  "sourceCode" : "/**\r\n * Assumes convert() returns some non-null instance of getExpectedType().\r\n */\r\n@Test\r\nvoid testConvertDate() {\r\n    final String[] message = { \"from Date\", \"from Calendar\", \"from SQL Date\", \"from SQL Time\", \"from SQL Timestamp\", \"from LocalDate\", \"from LocalDateTime\", \"from ZonedDateTime\", \"from OffsetDateTime\" };\r\n    final long nowMillis = System.currentTimeMillis();\r\n    final Object[] date = { new Date(nowMillis), new java.util.GregorianCalendar(), new java.sql.Date(nowMillis), new java.sql.Time(nowMillis), new java.sql.Timestamp(nowMillis), Instant.ofEpochMilli(nowMillis).atZone(ZoneId.systemDefault()).toLocalDate().atStartOfDay(ZoneId.systemDefault()).toLocalDate(), Instant.ofEpochMilli(nowMillis).atZone(ZoneId.systemDefault()).toLocalDateTime(), ZonedDateTime.ofInstant(Instant.ofEpochMilli(nowMillis), ZoneId.systemDefault()), OffsetDateTime.ofInstant(Instant.ofEpochMilli(nowMillis), ZoneId.systemDefault()) };\r\n    // Initialize calendar also with same ms to avoid a failing test in a new time slice\r\n    ((GregorianCalendar) date[1]).setTime(new Date(nowMillis));\r\n    for (int i = 0; i < date.length; i++) {\r\n        final Class<T> expectedType = getExpectedType();\r\n        final Object val = makeConverter().convert(expectedType, date[i]);\r\n        assertNotNull(val, \"Convert \" + message[i] + \" should not be null\");\r\n        assertInstanceOf(expectedType, val, \"Convert \" + message[i] + \" should return a \" + expectedType.getName());\r\n        long test = nowMillis;\r\n        if (date[i] instanceof LocalDate || val instanceof LocalDate) {\r\n            test = Instant.ofEpochMilli(nowMillis).atZone(ZoneId.systemDefault()).toLocalDate().atStartOfDay(ZoneId.systemDefault()).toInstant().toEpochMilli();\r\n        }\r\n        assertEquals(test, getTimeInMillis(val), \"Convert \" + message[i] + \" should return a \" + date[0]);\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\converters\\AbstractDateConverterTest.java",
  "methodName" : "testConvertNull",
  "sourceCode" : "/**\r\n * Assumes ConversionException in response to covert(getExpectedType(), null).\r\n */\r\n@Test\r\nvoid testConvertNull() {\r\n    assertThrows(ConversionException.class, () -> makeConverter().convert(getExpectedType(), null), \"Expected ConversionException\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\converters\\AbstractDateConverterTest.java",
  "methodName" : "testDefaultStringToTypeConvert",
  "sourceCode" : "/**\r\n * Test default String to type conversion\r\n *\r\n * This method is overridden by test case implementations for java.sql.Date/Time/Timestamp\r\n */\r\n@Test\r\npublic void testDefaultStringToTypeConvert() {\r\n    // Create & Configure the Converter\r\n    final DateTimeConverter<T> converter = makeConverter();\r\n    converter.setUseLocaleFormat(false);\r\n    assertThrows(ConversionException.class, () -> converter.convert(getExpectedType(), \"2006-10-23\"), \"Expected Conversion exception\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\converters\\AbstractDateConverterTest.java",
  "methodName" : "testDefaultType",
  "sourceCode" : "/**\r\n * Test Default Type conversion (i.e. don't specify target type)\r\n */\r\n@Test\r\nvoid testDefaultType() {\r\n    final String pattern = \"yyyy-MM-dd\";\r\n    // Create & Configure the Converter\r\n    final DateTimeConverter<T> converter = makeConverter();\r\n    converter.setPattern(pattern);\r\n    // Valid String --> Type Conversion\r\n    final String testString = \"2006-10-29\";\r\n    final Calendar calendar = toCalendar(testString, pattern, null);\r\n    final Object expected = toType(calendar);\r\n    final Object result = converter.convert(null, testString);\r\n    final Class<T> expectedType = getExpectedType();\r\n    if (expectedType.equals(Calendar.class)) {\r\n        assertTrue(expectedType.isAssignableFrom(result.getClass()), \"TYPE \");\r\n    } else {\r\n        assertInstanceOf(expectedType, result, \"TYPE \");\r\n    }\r\n    assertEquals(expected, result, \"VALUE \");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\converters\\AbstractDateConverterTest.java",
  "methodName" : "testInvalidType",
  "sourceCode" : "/**\r\n * Test Converter with types it can't handle\r\n */\r\n@Test\r\nvoid testInvalidType() {\r\n    // Create & Configure the Converter\r\n    // we are creating a mismatch to assert a failure\r\n    @SuppressWarnings(\"unchecked\")\r\n    final DateTimeConverter<Character> converter = (DateTimeConverter<Character>) makeConverter();\r\n    // Invalid Class Type\r\n    assertThrows(ConversionException.class, () -> converter.convert(Character.class, new Date()), \"Requested Character.class conversion, expected ConversionException\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\converters\\AbstractDateConverterTest.java",
  "methodName" : "testLocale",
  "sourceCode" : "/**\r\n * Test Date Converter with no default value\r\n */\r\n@Test\r\npublic void testLocale() {\r\n    // Re-set the default Locale to Locale.US\r\n    final Locale defaultLocale = Locale.getDefault();\r\n    Locale.setDefault(Locale.US);\r\n    // SHORT style date format for US Locale\r\n    final String pattern = \"M/d/yy\";\r\n    // Create & Configure the Converter\r\n    final DateTimeConverter<T> converter = makeConverter();\r\n    converter.setUseLocaleFormat(true);\r\n    // Valid String --> Type Conversion\r\n    final String testString = \"10/28/06\";\r\n    final Object expected = toType(testString, pattern, null);\r\n    validConversion(converter, expected, testString);\r\n    // Invalid Conversions\r\n    invalidConversion(converter, null);\r\n    invalidConversion(converter, \"\");\r\n    invalidConversion(converter, \"2006-10-2X\");\r\n    invalidConversion(converter, \"10.28.06\");\r\n    invalidConversion(converter, \"10-28-06\");\r\n    invalidConversion(converter, Integer.valueOf(2));\r\n    // Restore the default Locale\r\n    Locale.setDefault(defaultLocale);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\converters\\AbstractDateConverterTest.java",
  "methodName" : "testMultiplePatterns",
  "sourceCode" : "/**\r\n * Test Converter with multiple patterns\r\n */\r\n@Test\r\nvoid testMultiplePatterns() {\r\n    String testString;\r\n    Object expected;\r\n    // Create & Configure the Converter\r\n    final String[] patterns = { \"yyyy-MM-dd\", \"yyyy/MM/dd\" };\r\n    final DateTimeConverter<T> converter = makeConverter();\r\n    converter.setPatterns(patterns);\r\n    // First Pattern\r\n    testString = \"2006-10-28\";\r\n    expected = toType(testString, patterns[0], null);\r\n    validConversion(converter, expected, testString);\r\n    // Second pattern\r\n    testString = \"2006/10/18\";\r\n    expected = toType(testString, patterns[1], null);\r\n    validConversion(converter, expected, testString);\r\n    // Invalid Conversion\r\n    invalidConversion(converter, \"17/03/2006\");\r\n    invalidConversion(converter, \"17.03.2006\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\converters\\AbstractDateConverterTest.java",
  "methodName" : "testPatternDefault",
  "sourceCode" : "/**\r\n * Test Converter with no default value\r\n */\r\n@Test\r\nvoid testPatternDefault() {\r\n    final String pattern = \"yyyy-MM-dd\";\r\n    // Create & Configure the Converter\r\n    final T defaultValue = toType(\"2000-01-01\", pattern, null);\r\n    assertNotNull(defaultValue, \"Check default date\");\r\n    final DateTimeConverter<T> converter = makeConverter(defaultValue);\r\n    converter.setPattern(pattern);\r\n    // Valid String --> Type Conversion\r\n    final String testString = \"2006-10-29\";\r\n    final Object expected = toType(testString, pattern, null);\r\n    validConversion(converter, expected, testString);\r\n    // Invalid Values, expect default value\r\n    validConversion(converter, defaultValue, null);\r\n    validConversion(converter, defaultValue, \"\");\r\n    validConversion(converter, defaultValue, \"2006-10-2X\");\r\n    validConversion(converter, defaultValue, \"2006/10/01\");\r\n    validConversion(converter, defaultValue, \"02/10/06\");\r\n    validConversion(converter, defaultValue, Integer.valueOf(2));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\converters\\AbstractDateConverterTest.java",
  "methodName" : "testPatternNoDefault",
  "sourceCode" : "/**\r\n * Test Converter with no default value\r\n */\r\n@Test\r\nvoid testPatternNoDefault() {\r\n    final String pattern = \"yyyy-MM-dd\";\r\n    // Create & Configure the Converter\r\n    final DateTimeConverter<T> converter = makeConverter();\r\n    converter.setPattern(pattern);\r\n    // Valid String --> Type Conversion\r\n    final String testString = \"2006-10-29\";\r\n    final Calendar calendar = toCalendar(testString, pattern, null);\r\n    final Object expected = toType(calendar);\r\n    validConversion(converter, expected, testString);\r\n    // Valid java.util.Date --> Type Conversion\r\n    validConversion(converter, expected, calendar);\r\n    // Valid Calendar --> Type Conversion\r\n    validConversion(converter, expected, toDate(calendar));\r\n    // Test java.sql.Date --> Type Conversion\r\n    validConversion(converter, expected, toSqlDate(calendar));\r\n    // java.sql.Timestamp --> String Conversion\r\n    validConversion(converter, expected, toSqlTimestamp(calendar));\r\n    // java.sql.Time --> String Conversion\r\n    validConversion(converter, expected, toSqlTime(calendar));\r\n    // Invalid Conversions\r\n    invalidConversion(converter, null);\r\n    invalidConversion(converter, \"\");\r\n    invalidConversion(converter, \"2006-10-2X\");\r\n    invalidConversion(converter, \"2006/10/01\");\r\n    invalidConversion(converter, \"02/10/2006\");\r\n    invalidConversion(converter, \"02/10/06\");\r\n    invalidConversion(converter, Integer.valueOf(2));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\converters\\AbstractDateConverterTest.java",
  "methodName" : "testPatternNullDefault",
  "sourceCode" : "/**\r\n * Test Converter with no default value\r\n */\r\n@Test\r\nvoid testPatternNullDefault() {\r\n    final String pattern = \"yyyy-MM-dd\";\r\n    // Create & Configure the Converter\r\n    final T defaultValue = null;\r\n    final DateTimeConverter<T> converter = makeConverter(defaultValue);\r\n    converter.setPattern(pattern);\r\n    // Valid String --> Type Conversion\r\n    final String testString = \"2006-10-29\";\r\n    final Object expected = toType(testString, pattern, null);\r\n    validConversion(converter, expected, testString);\r\n    // Invalid Values, expect default --> null\r\n    validConversion(converter, defaultValue, null);\r\n    validConversion(converter, defaultValue, \"\");\r\n    validConversion(converter, defaultValue, \"2006-10-2X\");\r\n    validConversion(converter, defaultValue, \"2006/10/01\");\r\n    validConversion(converter, defaultValue, \"02/10/06\");\r\n    validConversion(converter, defaultValue, Integer.valueOf(2));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\converters\\AbstractDateConverterTest.java",
  "methodName" : "testStringConversion",
  "sourceCode" : "/**\r\n * Test Conversion to String\r\n */\r\n@Test\r\nvoid testStringConversion() {\r\n    final String pattern = \"yyyy-MM-dd\";\r\n    // Create & Configure the Converter\r\n    final DateTimeConverter<T> converter = makeConverter();\r\n    converter.setPattern(pattern);\r\n    // Create Values\r\n    final String expected = \"2006-10-29\";\r\n    final Calendar calendar = toCalendar(expected, pattern, null);\r\n    // Type --> String Conversion\r\n    stringConversion(converter, expected, toType(calendar));\r\n    // Calendar --> String Conversion\r\n    stringConversion(converter, expected, calendar);\r\n    // java.util.Date --> String Conversion\r\n    stringConversion(converter, expected, toDate(calendar));\r\n    // java.sql.Date --> String Conversion\r\n    stringConversion(converter, expected, toSqlDate(calendar));\r\n    // java.sql.Timestamp --> String Conversion\r\n    stringConversion(converter, expected, toSqlTimestamp(calendar));\r\n    // java.sql.Time --> String Conversion\r\n    stringConversion(converter, expected, toSqlTime(calendar));\r\n    // java.time.LocalDateTime --> String Conversion\r\n    stringConversion(converter, expected, toLocalDateTime(calendar));\r\n    stringConversion(converter, null, null);\r\n    stringConversion(converter, \"\", \"\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\converters\\AbstractNumberConverterTest.java",
  "methodName" : "testBooleanToNumberDefault",
  "sourceCode" : "/**\r\n * Convert Boolean --> Number (default conversion)\r\n */\r\n@Test\r\nvoid testBooleanToNumberDefault() {\r\n    final NumberConverter<T> converter = makeConverter();\r\n    // Other type --> String conversion\r\n    assertEquals(0, ((Number) converter.convert(getExpectedType(), Boolean.FALSE)).intValue(), \"Boolean.FALSE to Number \");\r\n    assertEquals(1, ((Number) converter.convert(getExpectedType(), Boolean.TRUE)).intValue(), \"Boolean.TRUE to Number \");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\converters\\AbstractNumberConverterTest.java",
  "methodName" : "testCalendarToNumber",
  "sourceCode" : "/**\r\n * Convert Calendar --> Long\r\n */\r\n@Test\r\nvoid testCalendarToNumber() {\r\n    final NumberConverter<T> converter = makeConverter();\r\n    final Calendar calendarValue = Calendar.getInstance();\r\n    final long longValue = calendarValue.getTime().getTime();\r\n    // Calendar --> Long conversion\r\n    assertEquals(Long.valueOf(longValue), converter.convert(Long.class, calendarValue), \"Calendar to Long\");\r\n    // Calendar --> Integer\r\n    assertThrows(ConversionException.class, () -> converter.convert(Integer.class, calendarValue), \"Calendar to Integer - expected a ConversionException\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\converters\\AbstractNumberConverterTest.java",
  "methodName" : "testConvertNull",
  "sourceCode" : "/**\r\n * Assumes ConversionException in response to covert(getExpectedType(),null).\r\n */\r\n@Test\r\nvoid testConvertNull() {\r\n    assertThrows(ConversionException.class, () -> makeConverter().convert(getExpectedType(), null), \"Expected ConversionException\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\converters\\AbstractNumberConverterTest.java",
  "methodName" : "testConvertNumber",
  "sourceCode" : "/**\r\n * Assumes convert(getExpectedType(),Number) returns some non-null instance of getExpectedType().\r\n */\r\n@Test\r\nvoid testConvertNumber() {\r\n    final String[] message = { \"from Byte\", \"from Short\", \"from Integer\", \"from Long\", \"from Float\", \"from Double\", \"from BigDecimal\", \"from BigInteger\", \"from Integer array\" };\r\n    final Object[] number = { Byte.valueOf((byte) 7), Short.valueOf((short) 8), Integer.valueOf(9), Long.valueOf(10), Float.valueOf((float) 11.1), Double.valueOf(12.2), new BigDecimal(\"17.2\"), new BigInteger(\"33\"), new Integer[] { Integer.valueOf(3), Integer.valueOf(2), Integer.valueOf(1) } };\r\n    for (int i = 0; i < number.length; i++) {\r\n        final Object val = makeConverter().convert(getExpectedType(), number[i]);\r\n        assertNotNull(val, \"Convert \" + message[i] + \" should not be null\");\r\n        assertTrue(getExpectedType().isInstance(val), \"Convert \" + message[i] + \" should return a \" + getExpectedType().getName());\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\converters\\AbstractNumberConverterTest.java",
  "methodName" : "testDateToNumber",
  "sourceCode" : "/**\r\n * Convert Date --> Long\r\n */\r\n@Test\r\nvoid testDateToNumber() {\r\n    final NumberConverter<T> converter = makeConverter();\r\n    final Date dateValue = new Date();\r\n    final long longValue = dateValue.getTime();\r\n    // Date --> Long conversion\r\n    assertEquals(Long.valueOf(longValue), converter.convert(Long.class, dateValue), \"Date to Long\");\r\n    // Date --> Integer\r\n    assertThrows(ConversionException.class, () -> converter.convert(Integer.class, dateValue), \"Date to Integer - expected a ConversionException\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\converters\\AbstractNumberConverterTest.java",
  "methodName" : "testInvalidDefault",
  "sourceCode" : "/**\r\n * Convert Number --> String (using default and specified Locales)\r\n */\r\n@Test\r\nvoid testInvalidDefault() {\r\n    final T defaultvalue = (T) numbers[0];\r\n    final NumberConverter<T> converter = makeConverter(defaultvalue);\r\n    // Default String --> Number conversion\r\n    assertEquals(defaultvalue, converter.convert(getExpectedType(), null), \"Invalid null \");\r\n    assertEquals(defaultvalue, converter.convert(getExpectedType(), \"XXXX\"), \"Default XXXX \");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\converters\\AbstractNumberConverterTest.java",
  "methodName" : "testInvalidException",
  "sourceCode" : "/**\r\n * Convert Number --> String (using default and specified Locales)\r\n */\r\n@Test\r\nvoid testInvalidException() {\r\n    final NumberConverter<T> converter = makeConverter();\r\n    assertThrows(ConversionException.class, () -> converter.convert(getExpectedType(), null), \"Null test, expected ConversionException\");\r\n    assertThrows(ConversionException.class, () -> converter.convert(getExpectedType(), \"XXXX\"), \"Invalid test, expected ConversionException\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\converters\\AbstractNumberConverterTest.java",
  "methodName" : "testInvalidType",
  "sourceCode" : "/**\r\n * Test specifying an invalid type.\r\n */\r\n@Test\r\nvoid testInvalidType() {\r\n    final NumberConverter<T> converter = makeConverter();\r\n    assertThrows(ConversionException.class, () -> converter.convert(Object.class, numbers[0]), \"Invalid type test, expected ConversionException\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\converters\\AbstractNumberConverterTest.java",
  "methodName" : "testInvalidTypeWithDefault",
  "sourceCode" : "/**\r\n * Tests a conversion to an unsupported type if a default value is set.\r\n */\r\n@Test\r\nvoid testInvalidTypeWithDefault() {\r\n    final NumberConverter<T> converter = makeConverter((T) numbers[0]);\r\n    assertThrows(ConversionException.class, () -> converter.convert(Object.class, numbers[0]), \"Invalid type with default test, expected ConversionException\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\converters\\AbstractNumberConverterTest.java",
  "methodName" : "testNumberToStringDefault",
  "sourceCode" : "/**\r\n * Convert Number --> String (default conversion)\r\n */\r\n@Test\r\nvoid testNumberToStringDefault() {\r\n    final NumberConverter<T> converter = makeConverter();\r\n    // Default Number --> String conversion\r\n    assertEquals(numbers[0].toString(), converter.convert(String.class, numbers[0]), () -> \"Default Convert \" + numbers[0]);\r\n    assertEquals(numbers[1].toString(), converter.convert(String.class, numbers[1]), () -> \"Default Convert \" + numbers[1]);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\converters\\AbstractNumberConverterTest.java",
  "methodName" : "testNumberToStringLocale",
  "sourceCode" : "/**\r\n * Convert Number --> String (using default and specified Locales)\r\n */\r\n@Test\r\nvoid testNumberToStringLocale() {\r\n    // Re-set the default Locale to Locale.US\r\n    final Locale defaultLocale = Locale.getDefault();\r\n    Locale.setDefault(Locale.US);\r\n    final NumberConverter<T> converter = makeConverter();\r\n    converter.setUseLocaleFormat(true);\r\n    // Default Locale\r\n    assertEquals(\"-12\", converter.convert(String.class, numbers[0]), () -> \"Default Locale \" + numbers[0]);\r\n    assertEquals(\"13\", converter.convert(String.class, numbers[1]), () -> \"Default Locale \" + numbers[1]);\r\n    // Locale.GERMAN\r\n    converter.setLocale(Locale.GERMAN);\r\n    assertEquals(\"-22\", converter.convert(String.class, numbers[2]), () -> \"Locale.GERMAN \" + numbers[2]);\r\n    assertEquals(\"23\", converter.convert(String.class, numbers[3]), () -> \"Locale.GERMAN \" + numbers[3]);\r\n    // Restore the default Locale\r\n    Locale.setDefault(defaultLocale);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\converters\\AbstractNumberConverterTest.java",
  "methodName" : "testNumberToStringPattern",
  "sourceCode" : "/**\r\n * Convert Number --> String (using a Pattern, with default and specified Locales)\r\n */\r\n@Test\r\nvoid testNumberToStringPattern() {\r\n    // Re-set the default Locale to Locale.US\r\n    final Locale defaultLocale = Locale.getDefault();\r\n    Locale.setDefault(Locale.US);\r\n    final NumberConverter<T> converter = makeConverter();\r\n    converter.setPattern(\"[0,0.0];(0,0.0)\");\r\n    // Default Locale\r\n    assertEquals(\"(12.0)\", converter.convert(String.class, numbers[0]), () -> \"Default Locale \" + numbers[0]);\r\n    assertEquals(\"[13.0]\", converter.convert(String.class, numbers[1]), () -> \"Default Locale \" + numbers[1]);\r\n    // Locale.GERMAN\r\n    converter.setLocale(Locale.GERMAN);\r\n    assertEquals(\"(22,0)\", converter.convert(String.class, numbers[2]), () -> \"Locale.GERMAN \" + numbers[2]);\r\n    assertEquals(\"[23,0]\", converter.convert(String.class, numbers[3]), () -> \"Locale.GERMAN \" + numbers[3]);\r\n    // Restore the default Locale\r\n    Locale.setDefault(defaultLocale);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\converters\\AbstractNumberConverterTest.java",
  "methodName" : "testOtherToStringDefault",
  "sourceCode" : "/**\r\n * Convert Other --> String (default conversion)\r\n */\r\n@Test\r\nvoid testOtherToStringDefault() {\r\n    final NumberConverter<T> converter = makeConverter();\r\n    // Other type --> String conversion\r\n    assertEquals(\"ABC\", converter.convert(String.class, new StringBuilder(\"ABC\")), \"Default Convert \");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\converters\\AbstractNumberConverterTest.java",
  "methodName" : "testStringArrayToInteger",
  "sourceCode" : "/**\r\n * Convert Array --> Number\r\n */\r\n@Test\r\nvoid testStringArrayToInteger() {\r\n    final Integer defaultValue = Integer.valueOf(-1);\r\n    final NumberConverter<Integer> converter = new IntegerConverterTest().makeConverter(defaultValue);\r\n    // Default Locale\r\n    assertEquals(Integer.valueOf(5), converter.convert(Integer.class, new String[] { \"5\", \"4\", \"3\" }), \"Valid First\");\r\n    assertEquals(defaultValue, converter.convert(Integer.class, new String[] { \"FOO\", \"1\", \"2\" }), \"Invalid First\");\r\n    assertEquals(defaultValue, converter.convert(Integer.class, new String[] { null, \"1\", \"2\" }), \"Null First\");\r\n    assertEquals(Integer.valueOf(9), converter.convert(Integer.class, new long[] { 9, 2, 6 }), \"Long Array\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\converters\\AbstractNumberConverterTest.java",
  "methodName" : "testStringToNumberDefault",
  "sourceCode" : "/**\r\n * Convert String --> Number (default conversion)\r\n */\r\n@Test\r\nvoid testStringToNumberDefault() {\r\n    final NumberConverter<T> converter = makeConverter();\r\n    converter.setUseLocaleFormat(false);\r\n    // Default String --> Number conversion\r\n    assertEquals(numbers[0], converter.convert(getExpectedType(), numbers[0].toString()), () -> \"Default Convert \" + numbers[0]);\r\n    // Invalid\r\n    assertThrows(ConversionException.class, () -> converter.convert(getExpectedType(), \"12x\"), \"Expected invalid value to cause ConversionException\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\converters\\AbstractNumberConverterTest.java",
  "methodName" : "testStringToNumberDefaultType",
  "sourceCode" : "/**\r\n * Convert String --> Number if the target type is not defined. Then the default type should be used.\r\n */\r\n@Test\r\nvoid testStringToNumberDefaultType() {\r\n    final NumberConverter<T> converter = makeConverter();\r\n    converter.setUseLocaleFormat(false);\r\n    assertEquals(numbers[0], converter.convert(null, numbers[0].toString()), () -> \"Default Convert \" + numbers[0]);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\converters\\AbstractNumberConverterTest.java",
  "methodName" : "testStringToNumberLocale",
  "sourceCode" : "/**\r\n * Convert String --> Number (using default and specified Locales)\r\n */\r\n@Test\r\nvoid testStringToNumberLocale() {\r\n    // Re-set the default Locale to Locale.US\r\n    final Locale defaultLocale = Locale.getDefault();\r\n    Locale.setDefault(Locale.US);\r\n    final NumberConverter<T> converter = makeConverter();\r\n    converter.setUseLocaleFormat(true);\r\n    // Default Locale\r\n    assertEquals(numbers[0], converter.convert(getExpectedType(), \"-0,012\"), () -> \"Default Locale \" + numbers[0]);\r\n    assertEquals(numbers[1], converter.convert(getExpectedType(), \"0,013\"), () -> \"Default Locale \" + numbers[1]);\r\n    // Invalid Value\r\n    assertThrows(ConversionException.class, () -> converter.convert(getExpectedType(), \"0,02x\"), \"Expected invalid value to cause ConversionException\");\r\n    // Locale.GERMAN\r\n    converter.setLocale(Locale.GERMAN);\r\n    assertEquals(numbers[2], converter.convert(getExpectedType(), \"-0.022\"), () -> \"Locale.GERMAN \" + numbers[2]);\r\n    assertEquals(numbers[3], converter.convert(getExpectedType(), \"0.023\"), () -> \"Locale.GERMAN \" + numbers[3]);\r\n    // Invalid Value\r\n    assertThrows(ConversionException.class, () -> converter.convert(getExpectedType(), \"0.02x\"), \"Expected invalid value to cause ConversionException\");\r\n    // Restore the default Locale\r\n    Locale.setDefault(defaultLocale);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\converters\\AbstractNumberConverterTest.java",
  "methodName" : "testStringToNumberPattern",
  "sourceCode" : "/**\r\n * Convert String --> Number (using a Pattern, with default and specified Locales)\r\n */\r\n@Test\r\nvoid testStringToNumberPattern() {\r\n    // Re-set the default Locale to Locale.US\r\n    final Locale defaultLocale = Locale.getDefault();\r\n    Locale.setDefault(Locale.US);\r\n    final NumberConverter<T> converter = makeConverter();\r\n    converter.setPattern(\"[0,0];(0,0)\");\r\n    // Default Locale\r\n    assertEquals(numbers[0], converter.convert(getExpectedType(), \"(1,2)\"), () -> \"Default Locale \" + numbers[0]);\r\n    assertEquals(numbers[1], converter.convert(getExpectedType(), \"[1,3]\"), () -> \"Default Locale \" + numbers[1]);\r\n    // Locale.GERMAN\r\n    converter.setLocale(Locale.GERMAN);\r\n    assertEquals(numbers[2], converter.convert(getExpectedType(), \"(2.2)\"), () -> \"Locale.GERMAN \" + numbers[2]);\r\n    assertEquals(numbers[3], converter.convert(getExpectedType(), \"[2.3]\"), () -> \"Locale.GERMAN \" + numbers[3]);\r\n    // Invalid Value\r\n    assertThrows(ConversionException.class, () -> converter.convert(getExpectedType(), \"1,2\"), \"Expected invalid value to cause ConversionException\");\r\n    // Invalid Type (will try via String)\r\n    final Object obj = new Object() {\r\n\r\n        @Override\r\n        public String toString() {\r\n            return \"dsdgsdsdg\";\r\n        }\r\n    };\r\n    assertThrows(ConversionException.class, () -> converter.convert(getExpectedType(), obj), \"Expected invalid value to cause ConversionException\");\r\n    // Restore the default Locale\r\n    Locale.setDefault(defaultLocale);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\converters\\AbstractNumberConverterTest.java",
  "methodName" : "testToString",
  "sourceCode" : "@Test\r\nvoid testToString() {\r\n    assertNotNull(makeConverter().toString());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\converters\\ArrayConverterTest.java",
  "methodName" : "testComponentIntegerConverter",
  "sourceCode" : "/**\r\n * Test Converting using the IntegerConverter as the component Converter\r\n */\r\n@Test\r\nvoid testComponentIntegerConverter() {\r\n    final IntegerConverter intConverter = new IntegerConverter(Integer.valueOf(0));\r\n    intConverter.setPattern(\"#,###\");\r\n    intConverter.setLocale(Locale.US);\r\n    final ArrayConverter arrayConverter = new ArrayConverter(int[].class, intConverter, 0);\r\n    arrayConverter.setAllowedChars(new char[] { ',', '-' });\r\n    arrayConverter.setDelimiter(';');\r\n    // Expected results\r\n    final int[] intArray = { 1111, 2222, 3333, 4444 };\r\n    final String stringA = \"1,111; 2,222; 3,333; 4,444\";\r\n    final String stringB = intArray[0] + \";\" + intArray[1] + \";\" + intArray[2] + \";\" + intArray[3];\r\n    final String[] strArray = { \"\" + intArray[0], \"\" + intArray[1], \"\" + intArray[2], \"\" + intArray[3] };\r\n    final long[] longArray = { intArray[0], intArray[1], intArray[2], intArray[3] };\r\n    final Long[] LONGArray = { Long.valueOf(intArray[0]), Long.valueOf(intArray[1]), Long.valueOf(intArray[2]), Long.valueOf(intArray[3]) };\r\n    final Integer[] IntegerArray = { Integer.valueOf(intArray[0]), Integer.valueOf(intArray[1]), Integer.valueOf(intArray[2]), Integer.valueOf(intArray[3]) };\r\n    final ArrayList<String> strList = new ArrayList<>();\r\n    final ArrayList<Long> longList = new ArrayList<>();\r\n    for (int i = 0; i < strArray.length; i++) {\r\n        strList.add(strArray[i]);\r\n        longList.add(LONGArray[i]);\r\n    }\r\n    String msg = null;\r\n    // String --> int[]\r\n    msg = \"String --> int[]\";\r\n    checkArray(msg, intArray, arrayConverter.convert(int[].class, stringA));\r\n    // String --> int[] (with braces)\r\n    msg = \"String --> Integer[] (with braces)\";\r\n    checkArray(msg, IntegerArray, arrayConverter.convert(Integer[].class, \"{\" + stringA + \"}\"));\r\n    // String[] --> int[]\r\n    msg = \"String[] --> int[]\";\r\n    checkArray(msg, intArray, arrayConverter.convert(int[].class, strArray));\r\n    // String[] --> Integer[]\r\n    msg = \"String[] --> Integer[]\";\r\n    checkArray(msg, IntegerArray, arrayConverter.convert(Integer[].class, strArray));\r\n    // long[] --> int[]\r\n    msg = \"long[] --> int[]\";\r\n    checkArray(msg, intArray, arrayConverter.convert(int[].class, longArray));\r\n    // Long --> int[]\r\n    msg = \"Long --> int[]\";\r\n    checkArray(msg, new int[] { LONGArray[0].intValue() }, arrayConverter.convert(int[].class, LONGArray[0]));\r\n    // LONG[] --> int[]\r\n    msg = \"LONG[] --> int[]\";\r\n    checkArray(msg, intArray, arrayConverter.convert(int[].class, LONGArray));\r\n    // Long --> String\r\n    msg = \"Long --> String\";\r\n    assertEquals(LONGArray[0] + \"\", arrayConverter.convert(String.class, LONGArray[0]), msg);\r\n    // LONG[] --> String (first)\r\n    msg = \"LONG[] --> String (first)\";\r\n    assertEquals(LONGArray[0] + \"\", arrayConverter.convert(String.class, LONGArray), msg);\r\n    // LONG[] --> String (all)\r\n    msg = \"LONG[] --> String (all)\";\r\n    arrayConverter.setOnlyFirstToString(false);\r\n    assertEquals(stringB, arrayConverter.convert(String.class, LONGArray), msg);\r\n    // Collection of Long --> String\r\n    msg = \"Collection of Long --> String\";\r\n    assertEquals(stringB, arrayConverter.convert(String.class, longList), msg);\r\n    // LONG[] --> String[]\r\n    msg = \"long[] --> String[]\";\r\n    checkArray(msg, strArray, arrayConverter.convert(String[].class, LONGArray));\r\n    // Collection of String --> Integer[]\r\n    msg = \"Collection of String --> Integer[]\";\r\n    checkArray(msg, IntegerArray, arrayConverter.convert(Integer[].class, strList));\r\n    // Collection of Long --> int[]\r\n    msg = \"Collection of Long --> int[]\";\r\n    checkArray(msg, intArray, arrayConverter.convert(int[].class, longList));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\converters\\ArrayConverterTest.java",
  "methodName" : "testEmptyString",
  "sourceCode" : "/**\r\n * Test Empty String\r\n */\r\n@Test\r\nvoid testEmptyString() {\r\n    final int[] zeroArray = {};\r\n    final IntegerConverter intConverter = new IntegerConverter();\r\n    checkArray(\"Empty String\", zeroArray, new ArrayConverter(int[].class, intConverter, -1).convert(int[].class, \"\"));\r\n    assertEquals(null, new ArrayConverter(int[].class, intConverter).convert(String.class, null), \"Default String\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\converters\\ArrayConverterTest.java",
  "methodName" : "testErrors",
  "sourceCode" : "/**\r\n * Test Errors creating the converter\r\n */\r\n@Test\r\nvoid testErrors() {\r\n    assertThrows(NullPointerException.class, () -> new ArrayConverter(null, new DateConverter()));\r\n    assertThrows(IllegalArgumentException.class, () -> new ArrayConverter(Boolean.class, new DateConverter()));\r\n    assertThrows(NullPointerException.class, () -> new ArrayConverter(int[].class, null));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\converters\\ArrayConverterTest.java",
  "methodName" : "testInvalidWithDefault",
  "sourceCode" : "/**\r\n * Test Converting using the IntegerConverter as the component Converter\r\n */\r\n@Test\r\nvoid testInvalidWithDefault() {\r\n    final int[] zeroArray = {};\r\n    final int[] oneArray = new int[1];\r\n    final IntegerConverter intConverter = new IntegerConverter();\r\n    assertEquals(null, new ArrayConverter(int[].class, intConverter, -1).convert(int[].class, null), \"Null Default\");\r\n    checkArray(\"Zero Length\", zeroArray, new ArrayConverter(int[].class, intConverter, 0).convert(int[].class, null));\r\n    checkArray(\"One Length\", oneArray, new ArrayConverter(Integer[].class, intConverter, 1).convert(int[].class, null));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\converters\\ArrayConverterTest.java",
  "methodName" : "testStringArrayToNumber",
  "sourceCode" : "/**\r\n * Test Converting a String[] to integer array (with leading/trailing whitespace)\r\n */\r\n@Test\r\nvoid testStringArrayToNumber() {\r\n    // Configure Converter\r\n    final IntegerConverter intConverter = new IntegerConverter();\r\n    final ArrayConverter arrayConverter = new ArrayConverter(int[].class, intConverter);\r\n    // Test Data\r\n    final String[] array = { \"10\", \"  11\", \"12  \", \"  13  \" };\r\n    final ArrayList<String> list = new ArrayList<>();\r\n    Collections.addAll(list, array);\r\n    // Expected results\r\n    String msg = null;\r\n    final int[] expectedInt = { 10, 11, 12, 13 };\r\n    final Integer[] expectedInteger = { Integer.valueOf(expectedInt[0]), Integer.valueOf(expectedInt[1]), Integer.valueOf(expectedInt[2]), Integer.valueOf(expectedInt[3]) };\r\n    // Test String[] --> int[]\r\n    msg = \"String[] --> int[]\";\r\n    checkArray(msg, expectedInt, arrayConverter.convert(int[].class, array));\r\n    // Test String[] --> Integer[]\r\n    msg = \"String[] --> Integer[]\";\r\n    checkArray(msg, expectedInteger, arrayConverter.convert(Integer[].class, array));\r\n    // Test List --> int[]\r\n    msg = \"List --> int[]\";\r\n    checkArray(msg, expectedInt, arrayConverter.convert(int[].class, list));\r\n    // Test List --> Integer[]\r\n    msg = \"List --> Integer[]\";\r\n    checkArray(msg, expectedInteger, arrayConverter.convert(Integer[].class, list));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\converters\\ArrayConverterTest.java",
  "methodName" : "testTheMatrix",
  "sourceCode" : "/**\r\n * Test the Matrix!!!! (parses a String into a 2 dimensional integer array or matrix)\r\n */\r\n@Test\r\nvoid testTheMatrix() {\r\n    // Test Date - create the Matrix!!\r\n    // Following String uses two delimiter:\r\n    // - comma (\",\") to separate individual numbers\r\n    // - semicolon (\";\") to separate lists of numbers\r\n    final String matrixString = \"11,12,13 ; 21,22,23 ; 31,32,33 ; 41,42,43\";\r\n    final int[][] expected = { new int[] { 11, 12, 13 }, new int[] { 21, 22, 23 }, new int[] { 31, 32, 33 }, new int[] { 41, 42, 43 } };\r\n    // Construct an Integer Converter\r\n    final IntegerConverter integerConverter = new IntegerConverter();\r\n    // Construct an array Converter for an integer array (i.e. int[]) using\r\n    // an IntegerConverter as the element converter.\r\n    // Uses the default comma (i.e. \",\") as the delimiter between individual numbers\r\n    final ArrayConverter arrayConverter = new ArrayConverter(int[].class, integerConverter);\r\n    // Construct a \"Matrix\" Converter which converts arrays of integer arrays using\r\n    // the first (int[]) Converter as the element Converter.\r\n    // Uses a semicolon (i.e. \";\") as the delimiter to separate the different sets of numbers.\r\n    // Also the delimiter for the above array Converter needs to be added to this\r\n    // array Converter's \"allowed characters\"\r\n    final ArrayConverter matrixConverter = new ArrayConverter(int[][].class, arrayConverter);\r\n    matrixConverter.setDelimiter(';');\r\n    matrixConverter.setAllowedChars(new char[] { ',' });\r\n    // Do the Conversion\r\n    final Object result = matrixConverter.convert(int[][].class, matrixString);\r\n    // Check it actually worked OK\r\n    assertEquals(int[][].class, result.getClass(), \"Check int[][].class\");\r\n    final int[][] matrix = (int[][]) result;\r\n    assertEquals(expected.length, matrix.length, \"Check int[][] length\");\r\n    for (int i = 0; i < expected.length; i++) {\r\n        assertEquals(expected[i].length, matrix[i].length, \"Check int[\" + i + \"] length\");\r\n        for (int j = 0; j < expected[i].length; j++) {\r\n            final String label = \"Matrix int[\" + i + \",\" + j + \"] element\";\r\n            assertEquals(expected[i][j], matrix[i][j], label);\r\n            // System.out.println(label + \" = \" + matrix[i][j]);\r\n        }\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\converters\\ArrayConverterTest.java",
  "methodName" : "testUnderscore_BEANUTILS_302",
  "sourceCode" : "/**\r\n * Test for BEANUTILS-302 - throwing a NPE when underscore used\r\n */\r\n@Test\r\nvoid testUnderscore_BEANUTILS_302() {\r\n    final String value = \"first_value,second_value\";\r\n    final ArrayConverter<String[]> converter = new ArrayConverter(String[].class, new StringConverter());\r\n    // test underscore not allowed (the default)\r\n    String[] result = converter.convert(String[].class, value);\r\n    assertNotNull(result, \"result.null\");\r\n    assertEquals(4, result.length, \"result.length\");\r\n    assertEquals(\"first\", result[0], \"result[0]\");\r\n    assertEquals(\"value\", result[1], \"result[1]\");\r\n    assertEquals(\"second\", result[2], \"result[2]\");\r\n    assertEquals(\"value\", result[3], \"result[3]\");\r\n    // configure the converter to allow underscore\r\n    converter.setAllowedChars(new char[] { '.', '-', '_' });\r\n    // test underscore allowed\r\n    result = converter.convert(String[].class, value);\r\n    assertNotNull(result, \"result.null\");\r\n    assertEquals(2, result.length, \"result.length\");\r\n    assertEquals(\"first_value\", result[0], \"result[0]\");\r\n    assertEquals(\"second_value\", result[1], \"result[1]\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\converters\\BigDecimalConverterTest.java",
  "methodName" : "testSimpleConversion",
  "sourceCode" : "@Test\r\nvoid testSimpleConversion() throws Exception {\r\n    final String[] message = { \"from String\", \"from String\", \"from String\", \"from String\", \"from String\", \"from Byte\", \"from Short\", \"from Integer\", \"from Long\", \"from Float\", \"from Double\", \"from BigDecimal\", \"from BigDecimal extension\" };\r\n    final Object[] input = { \"-17.2\", \"-1.1\", \"0.0\", \"1.1\", \"17.2\", Byte.valueOf((byte) 7), Short.valueOf((short) 8), Integer.valueOf(9), Long.valueOf(10), Float.valueOf(\"11.1\"), Double.valueOf(\"12.2\"), new BigDecimal(\"3200.11\"), new ExtendingBigDecimal(\"3200.11\") };\r\n    final BigDecimal[] expected = { new BigDecimal(\"-17.2\"), new BigDecimal(\"-1.1\"), new BigDecimal(\"0.0\"), new BigDecimal(\"1.1\"), new BigDecimal(\"17.2\"), new BigDecimal(\"7\"), new BigDecimal(\"8\"), new BigDecimal(\"9\"), new BigDecimal(\"10\"), new BigDecimal(\"11.1\"), new BigDecimal(\"12.2\"), new BigDecimal(\"3200.11\"), new BigDecimal(\"3200.11\") };\r\n    for (int i = 0; i < expected.length; i++) {\r\n        assertEquals(expected[i], converter.convert(BigDecimal.class, input[i]), message[i] + \" to BigDecimal\");\r\n        assertEquals(expected[i], converter.convert(null, input[i]), message[i] + \" to null type\");\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\converters\\BigDecimalLocaleConverterTest.java",
  "methodName" : "testConstructor_2",
  "sourceCode" : "/**\r\n * Test Converter() constructor\r\n *\r\n * Uses the default locale, no default value\r\n */\r\n@Test\r\nvoid testConstructor_2() {\r\n    // Construct using default locale\r\n    converter = BigDecimalLocaleConverter.builder().get();\r\n    // Perform Tests\r\n    convertValueNoPattern(converter, defaultDecimalValue, expectedValue);\r\n    convertValueWithPattern(converter, defaultDecimalValue, defaultDecimalPattern, expectedValue);\r\n    convertInvalid(converter, null);\r\n    convertNull(converter, null);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\converters\\BigDecimalLocaleConverterTest.java",
  "methodName" : "testConstructor_3",
  "sourceCode" : "/**\r\n * Test Converter(locPattern) constructor\r\n *\r\n * Uses the default locale, no default value\r\n */\r\n@Test\r\nvoid testConstructor_3() {\r\n    // Construct using localized pattern (default locale)\r\n    converter = BigDecimalLocaleConverter.builder().setLocalizedPattern(true).get();\r\n    // Perform Tests\r\n    convertValueNoPattern(converter, defaultDecimalValue, expectedValue);\r\n    convertValueWithPattern(converter, defaultDecimalValue, defaultDecimalPattern, expectedValue);\r\n    convertInvalid(converter, null);\r\n    convertNull(converter, null);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\converters\\BigDecimalLocaleConverterTest.java",
  "methodName" : "testConstructor_4",
  "sourceCode" : "/**\r\n * Test Converter(Locale) constructor\r\n */\r\n@Test\r\nvoid testConstructor_4() {\r\n    // Construct using specified Locale\r\n    converter = BigDecimalLocaleConverter.builder().setLocale(localizedLocale).get();\r\n    // Perform Tests\r\n    convertValueNoPattern(converter, localizedDecimalValue, expectedValue);\r\n    convertValueWithPattern(converter, localizedDecimalValue, defaultDecimalPattern, expectedValue);\r\n    convertInvalid(converter, null);\r\n    convertNull(converter, null);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\converters\\BigDecimalLocaleConverterTest.java",
  "methodName" : "testConstructor_5",
  "sourceCode" : "/**\r\n * Test Converter(Locale, locPattern) constructor\r\n */\r\n@Test\r\nvoid testConstructor_5() {\r\n    // Construct using specified Locale\r\n    converter = BigDecimalLocaleConverter.builder().setLocale(localizedLocale).setLocalizedPattern(true).get();\r\n    // Perform Tests\r\n    convertValueNoPattern(converter, localizedDecimalValue, expectedValue);\r\n    convertValueWithPattern(converter, localizedDecimalValue, localizedDecimalPattern, expectedValue);\r\n    convertInvalid(converter, null);\r\n    convertNull(converter, null);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\converters\\BigDecimalLocaleConverterTest.java",
  "methodName" : "testConstructor_6",
  "sourceCode" : "/**\r\n * Test Converter(Locale, pattern) constructor\r\n */\r\n@Test\r\nvoid testConstructor_6() {\r\n    // Construct using specified Locale\r\n    converter = BigDecimalLocaleConverter.builder().setLocale(localizedLocale).setPattern(defaultDecimalPattern).get();\r\n    // Perform Tests\r\n    convertValueNoPattern(converter, localizedDecimalValue, expectedValue);\r\n    convertValueWithPattern(converter, localizedDecimalValue, defaultDecimalPattern, expectedValue);\r\n    convertInvalid(converter, null);\r\n    convertNull(converter, null);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\converters\\BigDecimalLocaleConverterTest.java",
  "methodName" : "testConstructor_7",
  "sourceCode" : "/**\r\n * Test Converter(Locale, pattern, locPattern) constructor\r\n */\r\n@Test\r\nvoid testConstructor_7() {\r\n    // Construct using specified Locale\r\n    converter = BigDecimalLocaleConverter.builder().setLocale(localizedLocale).setPattern(localizedDecimalPattern).setLocalizedPattern(true).get();\r\n    // Perform Tests\r\n    convertValueNoPattern(converter, localizedDecimalValue, expectedValue);\r\n    convertValueWithPattern(converter, localizedDecimalValue, localizedDecimalPattern, expectedValue);\r\n    convertInvalid(converter, null);\r\n    convertNull(converter, null);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\converters\\BigDecimalLocaleConverterTest.java",
  "methodName" : "testConstructor_8",
  "sourceCode" : "/**\r\n * Test Converter(defaultValue) constructor\r\n */\r\n@Test\r\nvoid testConstructor_8() {\r\n    // Construct using specified Locale\r\n    converter = BigDecimalLocaleConverter.builder().setDefault(defaultValue).get();\r\n    // Perform Tests\r\n    convertValueNoPattern(converter, defaultDecimalValue, expectedValue);\r\n    convertValueWithPattern(converter, defaultDecimalValue, defaultDecimalPattern, expectedValue);\r\n    convertInvalid(converter, defaultValue);\r\n    convertNull(converter, defaultValue);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\converters\\BigDecimalLocaleConverterTest.java",
  "methodName" : "testConstructor_9",
  "sourceCode" : "/**\r\n * Test Converter(defaultValue, locPattern) constructor\r\n */\r\n@Test\r\nvoid testConstructor_9() {\r\n    // Construct using specified Locale\r\n    converter = BigDecimalLocaleConverter.builder().setDefault(defaultValue).setLocalizedPattern(true).get();\r\n    // Perform Tests\r\n    convertValueNoPattern(converter, defaultDecimalValue, expectedValue);\r\n    convertValueWithPattern(converter, defaultDecimalValue, defaultDecimalPattern, expectedValue);\r\n    convertInvalid(converter, defaultValue);\r\n    convertNull(converter, defaultValue);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\converters\\BigDecimalLocaleConverterTest.java",
  "methodName" : "testConstructorMain",
  "sourceCode" : "/**\r\n * Test Converter(defaultValue, locale, pattern, localizedPattern) constructor\r\n */\r\n@Test\r\nvoid testConstructorMain() {\r\n    // Construct with localized pattern\r\n    converter = BigDecimalLocaleConverter.builder().setDefault(defaultValue).setLocale(localizedLocale).setPattern(localizedDecimalPattern).setLocalizedPattern(true).get();\r\n    convertValueNoPattern(converter, \"(A)\", localizedDecimalValue, expectedValue);\r\n    convertValueWithPattern(converter, \"(A)\", localizedDecimalValue, localizedDecimalPattern, expectedValue);\r\n    convertInvalid(converter, \"(A)\", defaultValue);\r\n    convertNull(converter, \"(A)\", defaultValue);\r\n    // Convert value in the wrong format - maybe you would expect it to throw an\r\n    // exception and return the default - it doesn't, DecimalFormat parses it\r\n    // quite happily turning \"1,234.56\" into \"1.234\"\r\n    // I guess this is one of the limitations of DecimalFormat\r\n    convertValueNoPattern(converter, \"(B)\", defaultDecimalValue, new BigDecimal(\"1.234\"));\r\n    // Convert with non-localized pattern - this causes an exception in parse()\r\n    // but it gets swallowed in convert() method and returns default.\r\n    // **** IS THIS THE EXPECTED BEHAVIOUR? ****\r\n    // Maybe if the pattern is no good, we should use a default pattern rather\r\n    // than just returning the default value.\r\n    convertValueWithPattern(converter, \"(B)\", localizedDecimalValue, defaultDecimalPattern, defaultValue);\r\n    // Convert with specified type\r\n    //\r\n    // BaseLocaleConverter completely ignores the type - so even if we specify\r\n    // Double.class here it still returns a BigDecimal.\r\n    // **** This has been changed due to BEANUTILS-449 ****\r\n    // convertValueToType(converter, \"(B)\", Double.class, localizedDecimalValue, localizedDecimalPattern, expectedValue);\r\n    // Construct with non-localized pattern\r\n    converter = BigDecimalLocaleConverter.builder().setDefault(defaultValue).setLocale(localizedLocale).setPattern(defaultDecimalPattern).setLocalizedPattern(false).get();\r\n    convertValueNoPattern(converter, \"(C)\", localizedDecimalValue, expectedValue);\r\n    convertValueWithPattern(converter, \"(C)\", localizedDecimalValue, defaultDecimalPattern, expectedValue);\r\n    convertInvalid(converter, \"(C)\", defaultValue);\r\n    convertNull(converter, \"(C)\", defaultValue);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\converters\\BigIntegerConverterTest.java",
  "methodName" : "testSimpleConversion",
  "sourceCode" : "@Test\r\nvoid testSimpleConversion() throws Exception {\r\n    final String[] message = { \"from String\", \"from String\", \"from String\", \"from String\", \"from String\", \"from String\", \"from String\", \"from Byte\", \"from Short\", \"from Integer\", \"from Long\", \"from Float\", \"from Double\" };\r\n    final Object[] input = { String.valueOf(Long.MIN_VALUE), \"-17\", \"-1\", \"0\", \"1\", \"17\", String.valueOf(Long.MAX_VALUE), Byte.valueOf((byte) 7), Short.valueOf((short) 8), Integer.valueOf(9), Long.valueOf(10), Float.valueOf((float) 11.1), Double.valueOf(12.2) };\r\n    final BigInteger[] expected = { BigInteger.valueOf(Long.MIN_VALUE), BigInteger.valueOf(-17), BigInteger.valueOf(-1), BigInteger.valueOf(0), BigInteger.valueOf(1), BigInteger.valueOf(17), BigInteger.valueOf(Long.MAX_VALUE), BigInteger.valueOf(7), BigInteger.valueOf(8), BigInteger.valueOf(9), BigInteger.valueOf(10), BigInteger.valueOf(11), BigInteger.valueOf(12) };\r\n    for (int i = 0; i < expected.length; i++) {\r\n        assertEquals(expected[i], converter.convert(BigInteger.class, input[i]), message[i] + \" to BigInteger\");\r\n        assertEquals(expected[i], converter.convert(null, input[i]), message[i] + \" to null type\");\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\converters\\BigIntegerLocaleConverterTest.java",
  "methodName" : "testConstructor_2",
  "sourceCode" : "/**\r\n * Test Converter() constructor\r\n *\r\n * Uses the default locale, no default value\r\n */\r\n@Test\r\nvoid testConstructor_2() {\r\n    // Construct using default locale\r\n    converter = BigIntegerLocaleConverter.builder().get();\r\n    // Perform Tests\r\n    convertValueNoPattern(converter, defaultIntegerValue, expectedValue);\r\n    convertValueWithPattern(converter, defaultIntegerValue, defaultIntegerPattern, expectedValue);\r\n    convertInvalid(converter, null);\r\n    convertNull(converter, null);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\converters\\BigIntegerLocaleConverterTest.java",
  "methodName" : "testConstructor_3",
  "sourceCode" : "/**\r\n * Test Converter(locPattern) constructor\r\n *\r\n * Uses the default locale, no default value\r\n */\r\n@Test\r\nvoid testConstructor_3() {\r\n    // Construct using localized pattern (default locale)\r\n    converter = BigIntegerLocaleConverter.builder().setLocalizedPattern(true).get();\r\n    // Perform Tests\r\n    convertValueNoPattern(converter, defaultIntegerValue, expectedValue);\r\n    convertValueWithPattern(converter, defaultIntegerValue, defaultIntegerPattern, expectedValue);\r\n    convertInvalid(converter, null);\r\n    convertNull(converter, null);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\converters\\BigIntegerLocaleConverterTest.java",
  "methodName" : "testConstructor_4",
  "sourceCode" : "/**\r\n * Test Converter(Locale) constructor\r\n */\r\n@Test\r\nvoid testConstructor_4() {\r\n    // Construct using specified Locale\r\n    converter = BigIntegerLocaleConverter.builder().setLocale(localizedLocale).get();\r\n    // Perform Tests\r\n    convertValueNoPattern(converter, localizedIntegerValue, expectedValue);\r\n    convertValueWithPattern(converter, localizedIntegerValue, defaultIntegerPattern, expectedValue);\r\n    convertInvalid(converter, null);\r\n    convertNull(converter, null);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\converters\\BigIntegerLocaleConverterTest.java",
  "methodName" : "testConstructor_5",
  "sourceCode" : "/**\r\n * Test Converter(Locale, locPattern) constructor\r\n */\r\n@Test\r\nvoid testConstructor_5() {\r\n    // Construct using specified Locale\r\n    converter = BigIntegerLocaleConverter.builder().setLocale(localizedLocale).setLocalizedPattern(true).get();\r\n    // Perform Tests\r\n    convertValueNoPattern(converter, localizedIntegerValue, expectedValue);\r\n    convertValueWithPattern(converter, localizedIntegerValue, localizedIntegerPattern, expectedValue);\r\n    convertInvalid(converter, null);\r\n    convertNull(converter, null);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\converters\\BigIntegerLocaleConverterTest.java",
  "methodName" : "testConstructor_6",
  "sourceCode" : "/**\r\n * Test Converter(Locale, pattern) constructor\r\n */\r\n@Test\r\nvoid testConstructor_6() {\r\n    // Construct using specified Locale\r\n    converter = BigIntegerLocaleConverter.builder().setLocale(localizedLocale).setPattern(defaultIntegerPattern).get();\r\n    // Perform Tests\r\n    convertValueNoPattern(converter, localizedIntegerValue, expectedValue);\r\n    convertValueWithPattern(converter, localizedIntegerValue, defaultIntegerPattern, expectedValue);\r\n    convertInvalid(converter, null);\r\n    convertNull(converter, null);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\converters\\BigIntegerLocaleConverterTest.java",
  "methodName" : "testConstructor_7",
  "sourceCode" : "/**\r\n * Test Converter(Locale, pattern, locPattern) constructor\r\n */\r\n@Test\r\nvoid testConstructor_7() {\r\n    // Construct using specified Locale\r\n    converter = BigIntegerLocaleConverter.builder().setLocale(localizedLocale).setPattern(localizedIntegerPattern).setLocalizedPattern(true).get();\r\n    // Perform Tests\r\n    convertValueNoPattern(converter, localizedIntegerValue, expectedValue);\r\n    convertValueWithPattern(converter, localizedIntegerValue, localizedIntegerPattern, expectedValue);\r\n    convertInvalid(converter, null);\r\n    convertNull(converter, null);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\converters\\BigIntegerLocaleConverterTest.java",
  "methodName" : "testConstructor_8",
  "sourceCode" : "/**\r\n * Test Converter(defaultValue) constructor\r\n */\r\n@Test\r\nvoid testConstructor_8() {\r\n    // Construct using specified Locale\r\n    converter = BigIntegerLocaleConverter.builder().setDefault(defaultValue).get();\r\n    // Perform Tests\r\n    convertValueNoPattern(converter, defaultIntegerValue, expectedValue);\r\n    convertValueWithPattern(converter, defaultIntegerValue, defaultIntegerPattern, expectedValue);\r\n    convertInvalid(converter, defaultValue);\r\n    convertNull(converter, defaultValue);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\converters\\BigIntegerLocaleConverterTest.java",
  "methodName" : "testConstructor_9",
  "sourceCode" : "/**\r\n * Test Converter(defaultValue, locPattern) constructor\r\n */\r\n@Test\r\nvoid testConstructor_9() {\r\n    // Construct using specified Locale\r\n    converter = BigIntegerLocaleConverter.builder().setDefault(defaultValue).setLocalizedPattern(true).get();\r\n    // Perform Tests\r\n    convertValueNoPattern(converter, defaultIntegerValue, expectedValue);\r\n    convertValueWithPattern(converter, defaultIntegerValue, defaultIntegerPattern, expectedValue);\r\n    convertInvalid(converter, defaultValue);\r\n    convertNull(converter, defaultValue);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\converters\\BigIntegerLocaleConverterTest.java",
  "methodName" : "testConstructorMain",
  "sourceCode" : "/**\r\n * Test Converter(defaultValue, locale, pattern, localizedPattern) constructor\r\n */\r\n@Test\r\nvoid testConstructorMain() {\r\n    // Construct with localized pattern\r\n    converter = BigIntegerLocaleConverter.builder().setDefault(defaultValue).setLocale(localizedLocale).setPattern(localizedIntegerPattern).setLocalizedPattern(true).get();\r\n    convertValueNoPattern(converter, \"(A)\", localizedIntegerValue, expectedValue);\r\n    convertValueWithPattern(converter, \"(A)\", localizedIntegerValue, localizedIntegerPattern, expectedValue);\r\n    convertInvalid(converter, \"(A)\", defaultValue);\r\n    convertNull(converter, \"(A)\", defaultValue);\r\n    // **************************************************************************\r\n    // Convert value in the wrong format - maybe you would expect it to throw an\r\n    // exception and return the default - it doesn't, DecimalFormat parses it\r\n    // quite happily turning \"1,234\" into \"1\"\r\n    // I guess this is one of the limitations of DecimalFormat\r\n    // **************************************************************************\r\n    convertValueNoPattern(converter, \"(B)\", defaultIntegerValue, new BigInteger(\"1\"));\r\n    // **************************************************************************\r\n    // Convert with non-localized pattern - unlike the equivalent BigDecimal Test Case\r\n    // it doesn't causes an exception in parse() - DecimalFormat parses it\r\n    // quite happily turning \"1,234\" into \"1\"\r\n    // Again this is one of the limitations of DecimalFormat\r\n    // **************************************************************************\r\n    convertValueWithPattern(converter, \"(B)\", localizedIntegerValue, defaultIntegerPattern, new BigInteger(\"1\"));\r\n    // **************************************************************************\r\n    // Convert with specified type\r\n    //\r\n    // BaseLocaleConverter completely ignores the type - so even if we specify\r\n    // Double.class here it still returns a BigInteger.\r\n    // **** This has been changed due to BEANUTILS-449 ****\r\n    // **************************************************************************\r\n    // convertValueToType(converter, \"(B)\", Double.class, localizedIntegerValue, localizedIntegerPattern, expectedValue);\r\n    // Construct with non-localized pattern\r\n    converter = BigIntegerLocaleConverter.builder().setDefault(defaultValue).setLocale(localizedLocale).setPattern(defaultIntegerPattern).setLocalizedPattern(false).get();\r\n    convertValueNoPattern(converter, \"(C)\", localizedIntegerValue, expectedValue);\r\n    convertValueWithPattern(converter, \"(C)\", localizedIntegerValue, defaultIntegerPattern, expectedValue);\r\n    convertInvalid(converter, \"(C)\", defaultValue);\r\n    convertNull(converter, \"(C)\", defaultValue);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\converters\\BooleanConverterTest.java",
  "methodName" : "testAdditionalStrings",
  "sourceCode" : "@Test\r\nvoid testAdditionalStrings() {\r\n    final String[] trueStrings = { \"sure\" };\r\n    final String[] falseStrings = { \"nope\" };\r\n    final AbstractConverter<Boolean> converter = new BooleanConverter(trueStrings, falseStrings);\r\n    testConversionValues(converter, new String[] { \"sure\", \"Sure\" }, new String[] { \"nope\", \"nOpE\" });\r\n    assertThrows(ConversionException.class, () -> converter.convert(Boolean.class, \"true\"));\r\n    assertThrows(ConversionException.class, () -> converter.convert(Boolean.class, \"bogus\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\converters\\BooleanConverterTest.java",
  "methodName" : "testCaseInsensitivity",
  "sourceCode" : "@Test\r\nvoid testCaseInsensitivity() {\r\n    final AbstractConverter<Boolean> converter = new BooleanConverter();\r\n    testConversionValues(converter, new String[] { \"Yes\", \"TRUE\" }, new String[] { \"NO\", \"fAlSe\" });\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\converters\\BooleanConverterTest.java",
  "methodName" : "testConversionToOtherType",
  "sourceCode" : "/**\r\n * Tests a conversion to another target type. This should not be possible.\r\n */\r\n@Test\r\nvoid testConversionToOtherType() {\r\n    final AbstractConverter<Boolean> converter = new BooleanConverter();\r\n    assertThrows(ConversionException.class, () -> converter.convert(Integer.class, STANDARD_TRUES[0]));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\converters\\BooleanConverterTest.java",
  "methodName" : "testDefaultValue",
  "sourceCode" : "@Test\r\nvoid testDefaultValue() {\r\n    final Boolean defaultValue = Boolean.TRUE;\r\n    final AbstractConverter<Boolean> converter = new BooleanConverter(defaultValue);\r\n    assertSame(defaultValue, converter.convert(Boolean.class, \"bogus\"));\r\n    testConversionValues(converter, STANDARD_TRUES, STANDARD_FALSES);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\converters\\BooleanConverterTest.java",
  "methodName" : "testInvalidString",
  "sourceCode" : "@Test\r\nvoid testInvalidString() {\r\n    final AbstractConverter<Boolean> converter = new BooleanConverter();\r\n    assertThrows(ConversionException.class, () -> converter.convert(Boolean.class, \"bogus\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\converters\\BooleanConverterTest.java",
  "methodName" : "testPrimitiveTargetClass",
  "sourceCode" : "/**\r\n * Tests whether a conversion to a primitive boolean is possible.\r\n */\r\n@Test\r\nvoid testPrimitiveTargetClass() {\r\n    final AbstractConverter<Boolean> converter = new BooleanConverter();\r\n    assertTrue(converter.convert(Boolean.TYPE, STANDARD_TRUES[0]), \"Wrong result\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\converters\\BooleanConverterTest.java",
  "methodName" : "testStandardValues",
  "sourceCode" : "@Test\r\nvoid testStandardValues() {\r\n    final AbstractConverter<Boolean> converter = new BooleanConverter();\r\n    testConversionValues(converter, STANDARD_TRUES, STANDARD_FALSES);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\converters\\ByteConverterTest.java",
  "methodName" : "testInvalidAmount",
  "sourceCode" : "/**\r\n * Test Invalid Amounts (too big/small)\r\n */\r\n@Test\r\nvoid testInvalidAmount() {\r\n    final Converter<Byte> converter = makeConverter();\r\n    final Class<Byte> clazz = Byte.class;\r\n    final Long min = Long.valueOf(Byte.MIN_VALUE);\r\n    final Long max = Long.valueOf(Byte.MAX_VALUE);\r\n    final Long minMinusOne = Long.valueOf(min.longValue() - 1);\r\n    final Long maxPlusOne = Long.valueOf(max.longValue() + 1);\r\n    // Minimum\r\n    assertEquals(Byte.valueOf(Byte.MIN_VALUE), converter.convert(clazz, min), \"Minimum\");\r\n    // Maximum\r\n    assertEquals(Byte.valueOf(Byte.MAX_VALUE), converter.convert(clazz, max), \"Maximum\");\r\n    // Too Small\r\n    assertThrows(ConversionException.class, () -> converter.convert(clazz, minMinusOne), \"Less than minimum, expected ConversionException\");\r\n    // Too Large\r\n    assertThrows(ConversionException.class, () -> converter.convert(clazz, maxPlusOne), \"More than maximum, expected ConversionException\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\converters\\ByteConverterTest.java",
  "methodName" : "testSimpleConversion",
  "sourceCode" : "@Test\r\nvoid testSimpleConversion() throws Exception {\r\n    final String[] message = { \"from String\", \"from String\", \"from String\", \"from String\", \"from String\", \"from String\", \"from String\", \"from Byte\", \"from Short\", \"from Integer\", \"from Long\", \"from Float\", \"from Double\" };\r\n    final Object[] input = { String.valueOf(Byte.MIN_VALUE), \"-17\", \"-1\", \"0\", \"1\", \"17\", String.valueOf(Byte.MAX_VALUE), Byte.valueOf((byte) 7), Short.valueOf((short) 8), Integer.valueOf(9), Long.valueOf(10), Float.valueOf((float) 11.1), Double.valueOf(12.2) };\r\n    final Byte[] expected = { Byte.valueOf(Byte.MIN_VALUE), Byte.valueOf((byte) -17), Byte.valueOf((byte) -1), Byte.valueOf((byte) 0), Byte.valueOf((byte) 1), Byte.valueOf((byte) 17), Byte.valueOf(Byte.MAX_VALUE), Byte.valueOf((byte) 7), Byte.valueOf((byte) 8), Byte.valueOf((byte) 9), Byte.valueOf((byte) 10), Byte.valueOf((byte) 11), Byte.valueOf((byte) 12) };\r\n    for (int i = 0; i < expected.length; i++) {\r\n        assertEquals(expected[i], converter.convert(Byte.class, input[i]), message[i] + \" to Byte\");\r\n        assertEquals(expected[i], converter.convert(Byte.TYPE, input[i]), message[i] + \" to byte\");\r\n        assertEquals(expected[i], converter.convert(null, input[i]), message[i] + \" to null type\");\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\converters\\ByteLocaleConverterTest.java",
  "methodName" : "testConstructor_2",
  "sourceCode" : "/**\r\n * Test Converter() constructor\r\n *\r\n * Uses the default locale, no default value\r\n */\r\n@Test\r\nvoid testConstructor_2() {\r\n    // Construct using default locale\r\n    converter = ByteLocaleConverter.builder().get();\r\n    // Perform Tests\r\n    convertValueNoPattern(converter, defaultIntegerValue, expectedValue);\r\n    convertValueWithPattern(converter, defaultIntegerValue, defaultIntegerPattern, expectedValue);\r\n    convertInvalid(converter, null);\r\n    convertNull(converter, null);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\converters\\ByteLocaleConverterTest.java",
  "methodName" : "testConstructor_3",
  "sourceCode" : "/**\r\n * Test Converter(locPattern) constructor\r\n *\r\n * Uses the default locale, no default value\r\n */\r\n@Test\r\nvoid testConstructor_3() {\r\n    // Construct using localized pattern (default locale)\r\n    converter = ByteLocaleConverter.builder().setLocalizedPattern(true).get();\r\n    // Perform Tests\r\n    convertValueNoPattern(converter, defaultIntegerValue, expectedValue);\r\n    convertValueWithPattern(converter, defaultIntegerValue, defaultIntegerPattern, expectedValue);\r\n    convertInvalid(converter, null);\r\n    convertNull(converter, null);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\converters\\ByteLocaleConverterTest.java",
  "methodName" : "testConstructor_4",
  "sourceCode" : "/**\r\n * Test Converter(Locale) constructor\r\n */\r\n@Test\r\nvoid testConstructor_4() {\r\n    // Construct using specified Locale\r\n    converter = ByteLocaleConverter.builder().setLocale(localizedLocale).get();\r\n    // Perform Tests\r\n    convertValueNoPattern(converter, localizedIntegerValue, expectedValue);\r\n    convertValueWithPattern(converter, localizedIntegerValue, defaultIntegerPattern, expectedValue);\r\n    convertInvalid(converter, null);\r\n    convertNull(converter, null);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\converters\\ByteLocaleConverterTest.java",
  "methodName" : "testConstructor_5",
  "sourceCode" : "/**\r\n * Test Converter(Locale, locPattern) constructor\r\n */\r\n@Test\r\nvoid testConstructor_5() {\r\n    // Construct using specified Locale\r\n    converter = ByteLocaleConverter.builder().setLocale(localizedLocale).setLocalizedPattern(true).get();\r\n    // Perform Tests\r\n    convertValueNoPattern(converter, localizedIntegerValue, expectedValue);\r\n    convertValueWithPattern(converter, localizedIntegerValue, localizedIntegerPattern, expectedValue);\r\n    convertInvalid(converter, null);\r\n    convertNull(converter, null);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\converters\\ByteLocaleConverterTest.java",
  "methodName" : "testConstructor_6",
  "sourceCode" : "/**\r\n * Test Converter(Locale, pattern) constructor\r\n */\r\n@Test\r\nvoid testConstructor_6() {\r\n    // Construct using specified Locale\r\n    converter = ByteLocaleConverter.builder().setLocale(localizedLocale).setPattern(defaultIntegerPattern).get();\r\n    // Perform Tests\r\n    convertValueNoPattern(converter, localizedIntegerValue, expectedValue);\r\n    convertValueWithPattern(converter, localizedIntegerValue, defaultIntegerPattern, expectedValue);\r\n    convertInvalid(converter, null);\r\n    convertNull(converter, null);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\converters\\ByteLocaleConverterTest.java",
  "methodName" : "testConstructor_7",
  "sourceCode" : "/**\r\n * Test Converter(Locale, pattern, locPattern) constructor\r\n */\r\n@Test\r\nvoid testConstructor_7() {\r\n    // Construct using specified Locale\r\n    converter = ByteLocaleConverter.builder().setLocale(localizedLocale).setPattern(localizedIntegerPattern).setLocalizedPattern(true).get();\r\n    // Perform Tests\r\n    convertValueNoPattern(converter, localizedIntegerValue, expectedValue);\r\n    convertValueWithPattern(converter, localizedIntegerValue, localizedIntegerPattern, expectedValue);\r\n    convertInvalid(converter, null);\r\n    convertNull(converter, null);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\converters\\ByteLocaleConverterTest.java",
  "methodName" : "testConstructor_8",
  "sourceCode" : "/**\r\n * Test Converter(defaultValue) constructor\r\n */\r\n@Test\r\nvoid testConstructor_8() {\r\n    // Construct using specified Locale\r\n    converter = ByteLocaleConverter.builder().setDefault(defaultValue).get();\r\n    // Perform Tests\r\n    convertValueNoPattern(converter, defaultIntegerValue, expectedValue);\r\n    convertValueWithPattern(converter, defaultIntegerValue, defaultIntegerPattern, expectedValue);\r\n    convertInvalid(converter, defaultValue);\r\n    convertNull(converter, defaultValue);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\converters\\ByteLocaleConverterTest.java",
  "methodName" : "testConstructor_9",
  "sourceCode" : "/**\r\n * Test Converter(defaultValue, locPattern) constructor\r\n */\r\n@Test\r\nvoid testConstructor_9() {\r\n    // Construct using specified Locale\r\n    converter = ByteLocaleConverter.builder().setDefault(defaultValue).setLocalizedPattern(true).get();\r\n    // Perform Tests\r\n    convertValueNoPattern(converter, defaultIntegerValue, expectedValue);\r\n    convertValueWithPattern(converter, defaultIntegerValue, defaultIntegerPattern, expectedValue);\r\n    convertInvalid(converter, defaultValue);\r\n    convertNull(converter, defaultValue);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\converters\\ByteLocaleConverterTest.java",
  "methodName" : "testConstructorMain",
  "sourceCode" : "/**\r\n * Test Converter(defaultValue, locale, pattern, localizedPattern) constructor\r\n */\r\n@Test\r\nvoid testConstructorMain() {\r\n    // Construct with localized pattern\r\n    converter = ByteLocaleConverter.builder().setDefault(defaultValue).setLocale(localizedLocale).setPattern(localizedIntegerPattern).setLocalizedPattern(true).get();\r\n    convertValueNoPattern(converter, \"(A)\", localizedIntegerValue, expectedValue);\r\n    convertValueWithPattern(converter, \"(A)\", localizedIntegerValue, localizedIntegerPattern, expectedValue);\r\n    convertInvalid(converter, \"(A)\", defaultValue);\r\n    convertNull(converter, \"(A)\", defaultValue);\r\n    // **************************************************************************\r\n    // Convert value in the wrong format - maybe you would expect it to throw an\r\n    // exception and return the default - it doesn't, DecimalFormat parses it\r\n    // quite happily turning \",123\" into \"0\"\r\n    // I guess this is one of the limitations of DecimalFormat\r\n    // **************************************************************************\r\n    convertValueNoPattern(converter, \"(B)\", defaultIntegerValue, Byte.valueOf(\"0\"));\r\n    // **************************************************************************\r\n    // Convert with non-localized pattern\r\n    // **************************************************************************\r\n    convertValueWithPattern(converter, \"(B)\", \"123\", defaultIntegerPattern, Byte.valueOf(\"123\"));\r\n    convertValueWithPattern(converter, \"(B-2)\", localizedIntegerValue, defaultIntegerPattern, defaultValue);\r\n    // **************************************************************************\r\n    // Convert with specified type\r\n    //\r\n    // BaseLocaleConverter completely ignores the type - so even if we specify\r\n    // Double.class here it still returns a Byte.\r\n    // **** This has been changed due to BEANUTILS-449 ****\r\n    // **************************************************************************\r\n    // convertValueToType(converter, \"(B)\", Double.class, localizedIntegerValue, localizedIntegerPattern, expectedValue);\r\n    // Construct with non-localized pattern\r\n    converter = ByteLocaleConverter.builder().setDefault(defaultValue).setLocale(localizedLocale).setPattern(defaultIntegerPattern).setLocalizedPattern(false).get();\r\n    convertValueNoPattern(converter, \"(C)\", localizedIntegerValue, expectedValue);\r\n    convertValueWithPattern(converter, \"(C)\", localizedIntegerValue, defaultIntegerPattern, expectedValue);\r\n    convertInvalid(converter, \"(C)\", defaultValue);\r\n    convertNull(converter, \"(C)\", defaultValue);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\converters\\CharacterConverterTest.java",
  "methodName" : "testConvertToChar",
  "sourceCode" : "/**\r\n * Tests whether the primitive char class can be passed as target type.\r\n */\r\n@Test\r\nvoid testConvertToChar() {\r\n    assertEquals(Character.valueOf('F'), converter.convert(Character.TYPE, \"FOO\"), \"Wrong result\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\converters\\CharacterConverterTest.java",
  "methodName" : "testConvertToCharacter",
  "sourceCode" : "/**\r\n * Test Conversion to Character\r\n */\r\n@Test\r\nvoid testConvertToCharacter() {\r\n    assertEquals(Character.valueOf('N'), converter.convert(Character.class, Character.valueOf('N')), \"Character Test\");\r\n    assertEquals(Character.valueOf('F'), converter.convert(Character.class, \"FOO\"), \"String Test\");\r\n    assertEquals(Character.valueOf('3'), converter.convert(Character.class, Integer.valueOf(321)), \"Integer Test\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\converters\\CharacterConverterTest.java",
  "methodName" : "testConvertToCharacterNullNoDefault",
  "sourceCode" : "/**\r\n * Tests a conversion to character for null input if no default value is provided.\r\n */\r\n@Test\r\nvoid testConvertToCharacterNullNoDefault() {\r\n    assertThrows(ConversionException.class, () -> converter.convert(Character.class, null));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\converters\\CharacterConverterTest.java",
  "methodName" : "testConvertToString",
  "sourceCode" : "/**\r\n * Test Conversion to String\r\n */\r\n@Test\r\n// testing raw conversion\r\n@SuppressWarnings(\"unchecked\")\r\nvoid testConvertToString() {\r\n    @SuppressWarnings(\"rawtypes\")\r\n    final Converter raw = converter;\r\n    assertEquals(\"N\", raw.convert(String.class, Character.valueOf('N')), \"Character Test\");\r\n    assertEquals(\"F\", raw.convert(String.class, \"FOO\"), \"String Test\");\r\n    assertEquals(\"3\", raw.convert(String.class, Integer.valueOf(321)), \"Integer Test\");\r\n    assertEquals(null, raw.convert(String.class, null), \"Null Test\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\converters\\CharacterConverterTest.java",
  "methodName" : "testConvertToUnsupportedType",
  "sourceCode" : "/**\r\n * Tries a conversion to an unsupported type.\r\n */\r\n@Test\r\nvoid testConvertToUnsupportedType() {\r\n    assertThrows(ConversionException.class, () -> converter.convert(Integer.class, \"Test\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\converters\\CharacterConverterTest.java",
  "methodName" : "testDefault",
  "sourceCode" : "/**\r\n * Test Conversion to Character (with default)\r\n */\r\n@Test\r\nvoid testDefault() {\r\n    final CharacterConverter converter = new CharacterConverter('C');\r\n    assertEquals(Character.valueOf('C'), converter.convert(Character.class, null), \"Default Test\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\converters\\ClassConverterTest.java",
  "methodName" : "testArray",
  "sourceCode" : "/**\r\n * Test Array Conversion\r\n */\r\n@Test\r\nvoid testArray() {\r\n    final Converter<Class<?>> converter = new ClassConverter();\r\n    // Test Array Class to String\r\n    assertEquals(\"[Ljava.lang.Boolean;\", converter.convert(String.class, Boolean[].class), \"Array to String\");\r\n    // *** For some reason the following works on m1, but not m2\r\n    // Test String to Array Class\r\n    // assertEquals(\"String to Array\", Boolean[].class, converter.convert(Class.class, \"[Ljava.lang.Boolean;\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\converters\\ClassConverterTest.java",
  "methodName" : "testConvertToClass",
  "sourceCode" : "/**\r\n * Test Conversion to Class\r\n */\r\n@Test\r\nvoid testConvertToClass() {\r\n    final Converter<Class<?>> converter = new ClassConverter();\r\n    assertEquals(Integer.class, converter.convert(Class.class, Integer.class), \"Class Test\");\r\n    assertEquals(Integer.class, converter.convert(Class.class, \"java.lang.Integer\"), \"String Test\");\r\n    assertEquals(Integer.class, converter.convert(Class.class, new StringBuilder(\"java.lang.Integer\")), \"StringBuilder Test\");\r\n    // Invalid Test\r\n    assertThrows(ConversionException.class, () -> converter.convert(Class.class, Integer.valueOf(6)));\r\n    // Test Null\r\n    assertThrows(ConversionException.class, () -> converter.convert(Class.class, null));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\converters\\ClassConverterTest.java",
  "methodName" : "testConvertToClassDefault",
  "sourceCode" : "/**\r\n * Test Invalid Conversion with default\r\n */\r\n@Test\r\nvoid testConvertToClassDefault() {\r\n    final Converter<Class<?>> converter = new ClassConverter(Object.class);\r\n    assertEquals(Object.class, converter.convert(Class.class, Integer.valueOf(6)), \"Invalid Test\");\r\n    assertEquals(Object.class, converter.convert(Class.class, null), \"Null Test\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\converters\\ClassConverterTest.java",
  "methodName" : "testConvertToClassDefaultNull",
  "sourceCode" : "/**\r\n * Test Invalid Conversion with default \"null\"\r\n */\r\n@Test\r\nvoid testConvertToClassDefaultNull() {\r\n    final Converter<Class<?>> converter = new ClassConverter(null);\r\n    assertEquals(null, converter.convert(Class.class, Integer.valueOf(6)), \"Invalid Test\");\r\n    assertEquals(null, converter.convert(Class.class, null), \"Null Test\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\converters\\ClassConverterTest.java",
  "methodName" : "testConvertToString",
  "sourceCode" : "/**\r\n * Test Conversion to String\r\n */\r\n@Test\r\nvoid testConvertToString() {\r\n    final Converter<Class<?>> converter = new ClassConverter();\r\n    assertEquals(\"java.lang.Integer\", converter.convert(String.class, Integer.class), \"Class Test\");\r\n    assertEquals(\"foo\", converter.convert(String.class, \"foo\"), \"Value Test\");\r\n    assertEquals(\"bar\", converter.convert(String.class, new StringBuilder(\"bar\")), \"Value Test\");\r\n    assertEquals(null, converter.convert(String.class, null), \"Null Test\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\converters\\ClassConverterTest.java",
  "methodName" : "testInvalid",
  "sourceCode" : "/**\r\n * Test Invalid\r\n */\r\n@Test\r\nvoid testInvalid() {\r\n    final Converter<Class<?>> converter = new ClassConverter();\r\n    // Test invalid class name\r\n    assertThrows(ConversionException.class, () -> converter.convert(Class.class, \"foo.bar\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\converters\\ClassConverterTest.java",
  "methodName" : "testUnsupportedTargetType",
  "sourceCode" : "/**\r\n * Tries a conversion to an unsupported target type.\r\n */\r\n@Test\r\nvoid testUnsupportedTargetType() {\r\n    final Converter<Class<?>> converter = new ClassConverter();\r\n    assertThrows(ConversionException.class, () -> converter.convert(Integer.class, getClass().getName()));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\converters\\ClassReloaderTest.java",
  "methodName" : "testBasicOperation",
  "sourceCode" : "/**\r\n * Test basic operation of the ClassReloader.\r\n */\r\n@Test\r\nvoid testBasicOperation() throws Exception {\r\n    final ClassLoader sharedLoader = this.getClass().getClassLoader();\r\n    final ClassReloader componentLoader = new ClassReloader(sharedLoader);\r\n    final Class<?> sharedClass = DummyClass.class;\r\n    final Class<?> componentClass = componentLoader.reload(sharedClass);\r\n    // the two Class objects contain the same bytecode, but are not equal\r\n    assertTrue(sharedClass != componentClass);\r\n    // the two class objects have different class loaders\r\n    assertSame(sharedLoader, sharedClass.getClassLoader());\r\n    assertSame(componentLoader, componentClass.getClassLoader());\r\n    assertTrue(sharedLoader != componentLoader);\r\n    // verify that objects of these two types are not assignment-compatible\r\n    final Object obj1 = sharedClass.newInstance();\r\n    final Object obj2 = componentClass.newInstance();\r\n    assertTrue(sharedClass.isInstance(obj1), \"Obj1 class incorrect\");\r\n    assertFalse(componentClass.isInstance(obj1), \"Obj1 class incorrect\");\r\n    assertFalse(sharedClass.isInstance(obj2), \"Obj2 class incorrect\");\r\n    assertTrue(componentClass.isInstance(obj2), \"Obj2 class incorrect\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\converters\\ColorConverterTest.java",
  "methodName" : "testColorBlank",
  "sourceCode" : "@Test\r\nvoid testColorBlank() {\r\n    assertThrows(ConversionException.class, () -> converter.convert(Color.class, \"#\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\converters\\ColorConverterTest.java",
  "methodName" : "testColorInvalidLength",
  "sourceCode" : "@Test\r\nvoid testColorInvalidLength() {\r\n    assertThrows(ConversionException.class, () -> converter.convert(Color.class, \"#F\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\converters\\ColorConverterTest.java",
  "methodName" : "testConvertingColorName",
  "sourceCode" : "@Test\r\nvoid testConvertingColorName() {\r\n    final Color expected = Color.WHITE;\r\n    final Color actual = converter.convert(Color.class, \"white\");\r\n    assertEquals(expected, actual);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\converters\\ColorConverterTest.java",
  "methodName" : "testConvertingColorNameCaps",
  "sourceCode" : "@Test\r\nvoid testConvertingColorNameCaps() {\r\n    final Color expected = Color.LIGHT_GRAY;\r\n    final Color actual = converter.convert(Color.class, \"LIGHTGRAY\");\r\n    assertEquals(expected, actual);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\converters\\ColorConverterTest.java",
  "methodName" : "testConvertingJavaColorStringFull",
  "sourceCode" : "@Test\r\nvoid testConvertingJavaColorStringFull() {\r\n    final Color expected = Color.WHITE;\r\n    final Color actual = converter.convert(Color.class, \"java.awt.Color[r=255,g=255,b=255]\");\r\n    assertEquals(expected, actual);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\converters\\ColorConverterTest.java",
  "methodName" : "testConvertingJavaColorStringWithoutBrackets",
  "sourceCode" : "@Test\r\nvoid testConvertingJavaColorStringWithoutBrackets() {\r\n    final Color expected = Color.DARK_GRAY;\r\n    final Color actual = converter.convert(Color.class, \"r=64,g=64,b=64\");\r\n    assertEquals(expected, actual);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\converters\\ColorConverterTest.java",
  "methodName" : "testConvertingJavaColorStringWithoutColorPrefixes",
  "sourceCode" : "@Test\r\nvoid testConvertingJavaColorStringWithoutColorPrefixes() {\r\n    final Color expected = Color.PINK;\r\n    final Color actual = converter.convert(Color.class, \"255,175,175\");\r\n    assertEquals(expected, actual);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\converters\\ColorConverterTest.java",
  "methodName" : "testConvertingJavaColorStringWithoutPackage",
  "sourceCode" : "@Test\r\nvoid testConvertingJavaColorStringWithoutPackage() {\r\n    final Color expected = Color.GREEN;\r\n    final Color actual = converter.convert(Color.class, \"[r=0,g=255,b=0]\");\r\n    assertEquals(expected, actual);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\converters\\ColorConverterTest.java",
  "methodName" : "testConvertingJavaExtendsColorString",
  "sourceCode" : "/**\r\n * Color can be extended without the {@link Override overriding} the {@link Color#toString()} method. This tests that it can continue to parse the\r\n * {@link String} from an inherited class.\r\n */\r\n@Test\r\nvoid testConvertingJavaExtendsColorString() {\r\n    final Color expected = Color.MAGENTA;\r\n    final Color actual = converter.convert(Color.class, \"org.apache.ExtendedColor[r=255,g=0,b=255]\");\r\n    assertEquals(expected, actual);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\converters\\ColorConverterTest.java",
  "methodName" : "testConvertingLiteralHex",
  "sourceCode" : "@Test\r\nvoid testConvertingLiteralHex() {\r\n    final Color expected = Color.BLUE;\r\n    final Color actual = converter.convert(Color.class, \"0x0000FF\");\r\n    assertEquals(expected, actual);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\converters\\ColorConverterTest.java",
  "methodName" : "testConvertingPattern",
  "sourceCode" : "@Test\r\nvoid testConvertingPattern() {\r\n    final Color expected = Color.BLACK;\r\n    final Color actual = converter.convert(Color.class, \"#000000\");\r\n    assertEquals(expected, actual);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\converters\\ColorConverterTest.java",
  "methodName" : "testConvertingPattern3Digit",
  "sourceCode" : "@Test\r\nvoid testConvertingPattern3Digit() {\r\n    final Color expected = Color.WHITE;\r\n    final Color actual = converter.convert(Color.class, \"#FFF\");\r\n    assertEquals(expected, actual);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\converters\\ColorConverterTest.java",
  "methodName" : "testConvertingPattern4Digit",
  "sourceCode" : "@Test\r\nvoid testConvertingPattern4Digit() {\r\n    final Color expected = Color.YELLOW;\r\n    final Color actual = converter.convert(Color.class, \"#FF0F\");\r\n    assertEquals(expected, actual);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\converters\\ColorConverterTest.java",
  "methodName" : "testConvertingPatternWithAlpha",
  "sourceCode" : "@Test\r\nvoid testConvertingPatternWithAlpha() {\r\n    final Color expected = Color.LIGHT_GRAY;\r\n    final Color actual = converter.convert(Color.class, \"#C0C0C0FF\");\r\n    assertEquals(expected, actual);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\converters\\ColorConverterTest.java",
  "methodName" : "testInvalidNumber3",
  "sourceCode" : "@Test\r\nvoid testInvalidNumber3() {\r\n    assertThrows(ConversionException.class, () -> converter.convert(Color.class, \"#FFZ\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\converters\\ColorConverterTest.java",
  "methodName" : "testInvalidNumber4",
  "sourceCode" : "@Test\r\nvoid testInvalidNumber4() {\r\n    assertThrows(ConversionException.class, () -> converter.convert(Color.class, \"#FFFY\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\converters\\DateLocaleConverterTest.java",
  "methodName" : "testCalendarObject",
  "sourceCode" : "/**\r\n * Test Calendar\r\n */\r\n@Test\r\nvoid testCalendarObject() {\r\n    converter = DateLocaleConverter.builder().setLocale(defaultLocale).get();\r\n    final Calendar calendar = Calendar.getInstance();\r\n    calendar.setTime((java.util.Date) expectedValue);\r\n    assertEquals(expectedValue, converter.convert(calendar), \"java.util.Calendar\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\converters\\DateLocaleConverterTest.java",
  "methodName" : "testConstructor_2",
  "sourceCode" : "/**\r\n * Test Converter() constructor\r\n *\r\n * Uses the default locale, no default value\r\n */\r\n@Test\r\nvoid testConstructor_2() {\r\n    // Construct using default pattern & default locale\r\n    converter = DateLocaleConverter.builder().get();\r\n    // Perform Tests\r\n    convertValueNoPattern(converter, defaultShortDateValue, expectedValue);\r\n    convertValueWithPattern(converter, defaultDateValue, defaultDatePattern, expectedValue);\r\n    convertInvalid(converter, null);\r\n    convertNull(converter, null);\r\n    converter = DateLocaleConverter.builder().get();\r\n    // Perform Tests\r\n    convertValueNoPattern(converter, defaultShortDateValue, expectedValue);\r\n    convertValueWithPattern(converter, defaultDateValue, defaultDatePattern, expectedValue);\r\n    convertInvalid(converter, null);\r\n    convertNull(converter, null);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\converters\\DateLocaleConverterTest.java",
  "methodName" : "testConstructor_3",
  "sourceCode" : "/**\r\n * Test Converter(locPattern) constructor\r\n *\r\n * Uses the default locale, no default value\r\n */\r\n@Test\r\nvoid testConstructor_3() {\r\n    // Construct using default pattern & default locale\r\n    converter = DateLocaleConverter.builder().setLocalizedPattern(true).get();\r\n    // Perform Tests\r\n    convertValueNoPattern(converter, defaultShortDateValue, expectedValue);\r\n    convertValueWithPattern(converter, defaultDateValue, defaultDatePattern, expectedValue);\r\n    convertInvalid(converter, null);\r\n    convertNull(converter, null);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\converters\\DateLocaleConverterTest.java",
  "methodName" : "testConstructor_4",
  "sourceCode" : "/**\r\n * Test Converter(Locale) constructor\r\n */\r\n@Test\r\nvoid testConstructor_4() {\r\n    // Construct using specified Locale\r\n    converter = DateLocaleConverter.builder().setLocale(localizedLocale).get();\r\n    // Perform Tests\r\n    convertValueNoPattern(converter, localizedShortDateValue, expectedValue);\r\n    convertValueWithPattern(converter, localizedDateValue, defaultDatePattern, expectedValue);\r\n    convertInvalid(converter, null);\r\n    convertNull(converter, null);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\converters\\DateLocaleConverterTest.java",
  "methodName" : "testConstructor_5",
  "sourceCode" : "/**\r\n * Test Converter(Locale, locPattern) constructor\r\n */\r\n@Test\r\nvoid testConstructor_5() {\r\n    // Skip this test if no valid symbols for the locale\r\n    if (!validLocalDateSymbols) {\r\n        LOG.error(\"Invalid locale symbols *** skipping testConstructor_5() **\");\r\n        return;\r\n    }\r\n    // Construct using specified Locale\r\n    converter = DateLocaleConverter.builder().setLocale(localizedLocale).setLocalizedPattern(true).get();\r\n    // Perform Tests\r\n    convertValueNoPattern(converter, localizedShortDateValue, expectedValue);\r\n    convertValueWithPattern(converter, localizedDateValue, localizedDatePattern, expectedValue);\r\n    convertInvalid(converter, null);\r\n    convertNull(converter, null);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\converters\\DateLocaleConverterTest.java",
  "methodName" : "testConstructor_6",
  "sourceCode" : "/**\r\n * Test Converter(Locale, pattern) constructor\r\n */\r\n@Test\r\nvoid testConstructor_6() {\r\n    // Construct using specified Locale\r\n    converter = DateLocaleConverter.builder().setLocale(localizedLocale).setPattern(defaultDatePattern).get();\r\n    // Perform Tests\r\n    convertValueNoPattern(converter, localizedDateValue, expectedValue);\r\n    convertValueWithPattern(converter, localizedDateValue, defaultDatePattern, expectedValue);\r\n    convertInvalid(converter, null);\r\n    convertNull(converter, null);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\converters\\DateLocaleConverterTest.java",
  "methodName" : "testConstructor_7",
  "sourceCode" : "/**\r\n * Test Converter(Locale, pattern, locPattern) constructor\r\n */\r\n@Test\r\nvoid testConstructor_7() {\r\n    // Skip this test if no valid symbols for the locale\r\n    if (!validLocalDateSymbols) {\r\n        LOG.error(\"Invalid locale symbols *** skipping testConstructor_7() **\");\r\n        return;\r\n    }\r\n    // Construct using specified Locale\r\n    // @formatter:off\r\n    converter = DateLocaleConverter.builder().setLocale(localizedLocale).setPattern(localizedDatePattern).setLocalizedPattern(true).get();\r\n    // @formatter:on\r\n    // Perform Tests\r\n    convertValueNoPattern(converter, localizedDateValue, expectedValue);\r\n    convertValueWithPattern(converter, localizedDateValue, localizedDatePattern, expectedValue);\r\n    convertInvalid(converter, null);\r\n    convertNull(converter, null);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\converters\\DateLocaleConverterTest.java",
  "methodName" : "testConstructor_8",
  "sourceCode" : "/**\r\n * Test Converter(defaultValue) constructor\r\n */\r\n@Test\r\nvoid testConstructor_8() {\r\n    // Construct using specified Locale\r\n    converter = DateLocaleConverter.builder().setDefault(defaultValue).get();\r\n    // Perform Tests\r\n    convertValueNoPattern(converter, defaultShortDateValue, expectedValue);\r\n    convertValueWithPattern(converter, defaultDateValue, defaultDatePattern, expectedValue);\r\n    convertInvalid(converter, defaultValue);\r\n    convertNull(converter, defaultValue);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\converters\\DateLocaleConverterTest.java",
  "methodName" : "testConstructor_9",
  "sourceCode" : "/**\r\n * Test Converter(defaultValue, locPattern) constructor\r\n */\r\n@Test\r\nvoid testConstructor_9() {\r\n    // Construct using specified Locale\r\n    converter = DateLocaleConverter.builder().setDefault(defaultValue).setLocalizedPattern(true).get();\r\n    // @formatter:off\r\n    converter = DateLocaleConverter.builder().setDefault(defaultValue).setLocalizedPattern(true).get();\r\n    // @formatter:on\r\n    converter = DateLocaleConverter.builder().setDefault(defaultValue).setLocalizedPattern(true).get();\r\n    // Perform Tests\r\n    convertValueNoPattern(converter, defaultShortDateValue, expectedValue);\r\n    convertValueWithPattern(converter, defaultDateValue, defaultDatePattern, expectedValue);\r\n    convertInvalid(converter, defaultValue);\r\n    convertNull(converter, defaultValue);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\converters\\DateLocaleConverterTest.java",
  "methodName" : "testConstructorMain",
  "sourceCode" : "/**\r\n * Test Converter(defaultValue, locale, pattern, localizedPattern) constructor\r\n */\r\n@Test\r\nvoid testConstructorMain() {\r\n    // Skip this test if no valid symbols for the locale\r\n    if (!validLocalDateSymbols) {\r\n        LOG.error(\"Invalid locale symbols *** skipping testConstructorMain() **\");\r\n        return;\r\n    }\r\n    // Construct with localized pattern\r\n    // @formatter:off\r\n    converter = DateLocaleConverter.builder().setDefault(defaultValue).setLocale(localizedLocale).setPattern(localizedDatePattern).setLocalizedPattern(true).get();\r\n    // @formatter:on\r\n    convertValueNoPattern(converter, \"(A)\", localizedDateValue, expectedValue);\r\n    convertValueWithPattern(converter, \"(A)\", localizedDateValue, localizedDatePattern, expectedValue);\r\n    convertInvalid(converter, \"(A)\", defaultValue);\r\n    convertNull(converter, \"(A)\", defaultValue);\r\n    // Convert value in the wrong format - should return default value\r\n    convertValueNoPattern(converter, \"(B)\", defaultDateValue, defaultValue);\r\n    // Convert with non-localized pattern - should return default value\r\n    convertValueWithPattern(converter, \"(B)\", localizedDateValue, defaultDatePattern, defaultValue);\r\n    // **************************************************************************\r\n    // Convert with specified type\r\n    //\r\n    // BaseLocaleConverter completely ignores the type - so even if we specify\r\n    // Double.class here it still returns a Date.\r\n    // **** This has been changed due to BEANUTILS-449 ****\r\n    // **************************************************************************\r\n    // convertValueToType(converter, \"(B)\", String.class, localizedDateValue, localizedDatePattern, expectedValue);\r\n    // Construct with non-localized pattern\r\n    // @formatter:off\r\n    converter = DateLocaleConverter.builder().setDefault(defaultValue).setLocale(localizedLocale).setPattern(defaultDatePattern).setLocalizedPattern(false).get();\r\n    // @formatter:on\r\n    convertValueNoPattern(converter, \"(C)\", localizedDateValue, expectedValue);\r\n    convertValueWithPattern(converter, \"(C)\", localizedDateValue, defaultDatePattern, expectedValue);\r\n    convertInvalid(converter, \"(C)\", defaultValue);\r\n    convertNull(converter, \"(C)\", defaultValue);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\converters\\DateLocaleConverterTest.java",
  "methodName" : "testDateObject",
  "sourceCode" : "/**\r\n * Test java.util.Date\r\n */\r\n@Test\r\nvoid testDateObject() {\r\n    converter = DateLocaleConverter.builder().setLocale(defaultLocale).get();\r\n    assertEquals(expectedValue, converter.convert(expectedValue), \"java.util.Date\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\converters\\DateLocaleConverterTest.java",
  "methodName" : "testInvalidDate",
  "sourceCode" : "/**\r\n * Test invalid date\r\n */\r\n@Test\r\nvoid testInvalidDate() {\r\n    converter = DateLocaleConverter.builder().setLocale(defaultLocale).get();\r\n    try {\r\n        converter.convert(\"01/10/2004\", \"dd-MM-yyyy\");\r\n    } catch (final ConversionException e) {\r\n        assertEquals(\"Error parsing date '01/10/2004' at position = 2\", e.getMessage(), \"Parse Error\");\r\n    }\r\n    try {\r\n        converter.convert(\"01-10-2004X\", \"dd-MM-yyyy\");\r\n    } catch (final ConversionException e) {\r\n        assertEquals(\"Date '01-10-2004X' contains unparsed characters from position = 10\", e.getMessage(), \"Parse Length\");\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\converters\\DateLocaleConverterTest.java",
  "methodName" : "testSetLenient",
  "sourceCode" : "@Test\r\nvoid testSetLenient() {\r\n    // make sure that date format works as expected\r\n    final SimpleDateFormat dateFormat = new SimpleDateFormat(\"MMM dd, yyyy\", Locale.UK);\r\n    // test with no leniency\r\n    dateFormat.setLenient(false);\r\n    try {\r\n        dateFormat.parse(\"Feb 10, 2001\");\r\n    } catch (final ParseException e) {\r\n        fail(\"Could not parse date (1) - \" + e.getMessage());\r\n    }\r\n    try {\r\n        dateFormat.parse(\"Feb 31, 2001\");\r\n        fail(\"Parsed illegal date (1)\");\r\n    } catch (final ParseException e) {\r\n        // that's what we expected\r\n    }\r\n    // test with leniency\r\n    dateFormat.setLenient(true);\r\n    try {\r\n        dateFormat.parse(\"Feb 10, 2001\");\r\n    } catch (final ParseException e) {\r\n        fail(\"Could not parse date (2) - \" + e.getMessage());\r\n    }\r\n    try {\r\n        dateFormat.parse(\"Feb 31, 2001\");\r\n    } catch (final ParseException e) {\r\n        fail(\"Could not parse date (3) - \" + e.getMessage());\r\n    }\r\n    // now repeat tests for converter\r\n    // test with no leniency\r\n    final Builder<?, Date> builder = DateLocaleConverter.builder().setLocale(Locale.UK).setLenient(false).setPattern(\"MMM dd, yyyy\");\r\n    DateLocaleConverter<Date> converter = builder.get();\r\n    assertEquals(converter.isLenient(), false, \"Set lenient failed\");\r\n    try {\r\n        converter.convert(\"Feb 10, 2001\");\r\n    } catch (final ConversionException e) {\r\n        fail(\"Could not parse date (4) - \" + e.getMessage());\r\n    }\r\n    try {\r\n        converter.convert(\"Feb 31, 2001\");\r\n        assertEquals(converter.isLenient(), false, \"Set lenient failed\");\r\n        fail(\"Parsed illegal date (2)\");\r\n    } catch (final ConversionException e) {\r\n        // that's what we expected\r\n    }\r\n    // test with leniency\r\n    converter = builder.setLenient(true).get();\r\n    assertEquals(converter.isLenient(), true, \"Set lenient failed\");\r\n    try {\r\n        converter.convert(\"Feb 10, 2001\");\r\n    } catch (final ConversionException e) {\r\n        fail(\"Could not parse date (5) - \" + e.getMessage());\r\n    }\r\n    try {\r\n        converter.convert(\"Feb 31, 2001\");\r\n    } catch (final ConversionException e) {\r\n        fail(\"Could not parse date (6) - \" + e.getMessage());\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\converters\\DimensionConverterTest.java",
  "methodName" : "testConvertingDimension",
  "sourceCode" : "@Test\r\nvoid testConvertingDimension() {\r\n    final Dimension expected = new Dimension(1920, 1080);\r\n    final Dimension actual = converter.convert(Dimension.class, \"1920x1080\");\r\n    assertEquals(expected, actual);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\converters\\DimensionConverterTest.java",
  "methodName" : "testConvertingSquare",
  "sourceCode" : "@Test\r\nvoid testConvertingSquare() {\r\n    final Dimension expected = new Dimension(512, 512);\r\n    final Dimension actual = converter.convert(Dimension.class, \"512\");\r\n    assertEquals(expected, actual);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\converters\\DimensionConverterTest.java",
  "methodName" : "testInvalidDimensions",
  "sourceCode" : "@Test\r\nvoid testInvalidDimensions() {\r\n    assertThrows(ConversionException.class, () -> converter.convert(Dimension.class, \"512n512\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\converters\\DimensionConverterTest.java",
  "methodName" : "testInvalidNumberFormatException",
  "sourceCode" : "@Test\r\nvoid testInvalidNumberFormatException() {\r\n    assertThrows(ConversionException.class, () -> converter.convert(Dimension.class, \"3000000000x100\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\converters\\DimensionConverterTest.java",
  "methodName" : "testNegativeDimension",
  "sourceCode" : "@Test\r\nvoid testNegativeDimension() {\r\n    assertThrows(ConversionException.class, () -> converter.convert(Dimension.class, \"-512x512\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\converters\\DoubleConverterTest.java",
  "methodName" : "testSimpleConversion",
  "sourceCode" : "@Test\r\nvoid testSimpleConversion() {\r\n    final String[] message = { \"from String\", \"from String\", \"from String\", \"from String\", \"from String\", \"from String\", \"from String\", \"from Byte\", \"from Short\", \"from Integer\", \"from Long\", \"from Float\", \"from Double\" };\r\n    final Object[] input = { String.valueOf(Double.MIN_VALUE), \"-17.2\", \"-1.1\", \"0.0\", \"1.1\", \"17.2\", String.valueOf(Double.MAX_VALUE), Byte.valueOf((byte) 7), Short.valueOf((short) 8), Integer.valueOf(9), Long.valueOf(10), Float.valueOf((float) 11.1), Double.valueOf(12.2) };\r\n    final Double[] expected = { Double.valueOf(Double.MIN_VALUE), Double.valueOf(-17.2), Double.valueOf(-1.1), Double.valueOf(0.0), Double.valueOf(1.1), Double.valueOf(17.2), Double.valueOf(Double.MAX_VALUE), Double.valueOf(7), Double.valueOf(8), Double.valueOf(9), Double.valueOf(10), Double.valueOf(11.1), Double.valueOf(12.2) };\r\n    for (int i = 0; i < expected.length; i++) {\r\n        assertEquals(expected[i].doubleValue(), converter.convert(Double.class, input[i]).doubleValue(), 0.00001D, message[i] + \" to Double\");\r\n        assertEquals(expected[i].doubleValue(), converter.convert(Double.TYPE, input[i]).doubleValue(), 0.00001D, message[i] + \" to double\");\r\n        assertEquals(expected[i].doubleValue(), converter.convert((Class<Double>) null, input[i]).doubleValue(), 0.00001D, message[i] + \" to null type\");\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\converters\\DoubleLocaleConverterTest.java",
  "methodName" : "testConstructor_2",
  "sourceCode" : "/**\r\n * Test Converter() constructor\r\n *\r\n * Uses the default locale, no default value\r\n */\r\n@Test\r\nvoid testConstructor_2() {\r\n    // Construct using default locale\r\n    converter = DoubleLocaleConverter.builder().get();\r\n    // Perform Tests\r\n    convertValueNoPattern(converter, defaultDecimalValue, expectedValue);\r\n    convertValueWithPattern(converter, defaultDecimalValue, defaultDecimalPattern, expectedValue);\r\n    convertInvalid(converter, null);\r\n    convertNull(converter, null);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\converters\\DoubleLocaleConverterTest.java",
  "methodName" : "testConstructor_3",
  "sourceCode" : "/**\r\n * Test Converter(locPattern) constructor\r\n *\r\n * Uses the default locale, no default value\r\n */\r\n@Test\r\nvoid testConstructor_3() {\r\n    // Construct using localized pattern (default locale)\r\n    converter = DoubleLocaleConverter.builder().setLocalizedPattern(true).get();\r\n    // Perform Tests\r\n    convertValueNoPattern(converter, defaultDecimalValue, expectedValue);\r\n    convertValueWithPattern(converter, defaultDecimalValue, defaultDecimalPattern, expectedValue);\r\n    convertInvalid(converter, null);\r\n    convertNull(converter, null);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\converters\\DoubleLocaleConverterTest.java",
  "methodName" : "testConstructor_4",
  "sourceCode" : "/**\r\n * Test Converter(Locale) constructor\r\n */\r\n@Test\r\nvoid testConstructor_4() {\r\n    // Construct using specified Locale\r\n    converter = DoubleLocaleConverter.builder().setLocale(localizedLocale).get();\r\n    // Perform Tests\r\n    convertValueNoPattern(converter, localizedDecimalValue, expectedValue);\r\n    convertValueWithPattern(converter, localizedDecimalValue, defaultDecimalPattern, expectedValue);\r\n    convertInvalid(converter, null);\r\n    convertNull(converter, null);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\converters\\DoubleLocaleConverterTest.java",
  "methodName" : "testConstructor_5",
  "sourceCode" : "/**\r\n * Test Converter(Locale, locPattern) constructor\r\n */\r\n@Test\r\nvoid testConstructor_5() {\r\n    // Construct using specified Locale\r\n    converter = DoubleLocaleConverter.builder().setLocale(localizedLocale).setLocalizedPattern(true).get();\r\n    // Perform Tests\r\n    convertValueNoPattern(converter, localizedDecimalValue, expectedValue);\r\n    convertValueWithPattern(converter, localizedDecimalValue, localizedDecimalPattern, expectedValue);\r\n    convertInvalid(converter, null);\r\n    convertNull(converter, null);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\converters\\DoubleLocaleConverterTest.java",
  "methodName" : "testConstructor_6",
  "sourceCode" : "/**\r\n * Test Converter(Locale, pattern) constructor\r\n */\r\n@Test\r\nvoid testConstructor_6() {\r\n    // Construct using specified Locale\r\n    converter = DoubleLocaleConverter.builder().setLocale(localizedLocale).setPattern(defaultDecimalPattern).get();\r\n    // Perform Tests\r\n    convertValueNoPattern(converter, localizedDecimalValue, expectedValue);\r\n    convertValueWithPattern(converter, localizedDecimalValue, defaultDecimalPattern, expectedValue);\r\n    convertInvalid(converter, null);\r\n    convertNull(converter, null);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\converters\\DoubleLocaleConverterTest.java",
  "methodName" : "testConstructor_7",
  "sourceCode" : "/**\r\n * Test Converter(Locale, pattern, locPattern) constructor\r\n */\r\n@Test\r\nvoid testConstructor_7() {\r\n    // Construct using specified Locale\r\n    converter = DoubleLocaleConverter.builder().setLocale(localizedLocale).setPattern(localizedDecimalPattern).setLocalizedPattern(true).get();\r\n    // Perform Tests\r\n    convertValueNoPattern(converter, localizedDecimalValue, expectedValue);\r\n    convertValueWithPattern(converter, localizedDecimalValue, localizedDecimalPattern, expectedValue);\r\n    convertInvalid(converter, null);\r\n    convertNull(converter, null);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\converters\\DoubleLocaleConverterTest.java",
  "methodName" : "testConstructor_8",
  "sourceCode" : "/**\r\n * Test Converter(defaultValue) constructor\r\n */\r\n@Test\r\nvoid testConstructor_8() {\r\n    // Construct using specified Locale\r\n    converter = DoubleLocaleConverter.builder().setDefault(defaultValue).get();\r\n    // Perform Tests\r\n    convertValueNoPattern(converter, defaultDecimalValue, expectedValue);\r\n    convertValueWithPattern(converter, defaultDecimalValue, defaultDecimalPattern, expectedValue);\r\n    convertInvalid(converter, defaultValue);\r\n    convertNull(converter, defaultValue);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\converters\\DoubleLocaleConverterTest.java",
  "methodName" : "testConstructor_9",
  "sourceCode" : "/**\r\n * Test Converter(defaultValue, locPattern) constructor\r\n */\r\n@Test\r\nvoid testConstructor_9() {\r\n    // Construct using specified Locale\r\n    converter = DoubleLocaleConverter.builder().setDefault(defaultValue).setLocalizedPattern(true).get();\r\n    // Perform Tests\r\n    convertValueNoPattern(converter, defaultDecimalValue, expectedValue);\r\n    convertValueWithPattern(converter, defaultDecimalValue, defaultDecimalPattern, expectedValue);\r\n    convertInvalid(converter, defaultValue);\r\n    convertNull(converter, defaultValue);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\converters\\DoubleLocaleConverterTest.java",
  "methodName" : "testConstructorMain",
  "sourceCode" : "/**\r\n * Test Converter(defaultValue, locale, pattern, localizedPattern) constructor\r\n */\r\n@Test\r\nvoid testConstructorMain() {\r\n    // Construct with localized pattern\r\n    converter = DoubleLocaleConverter.builder().setDefault(defaultValue).setLocale(localizedLocale).setPattern(localizedDecimalPattern).setLocalizedPattern(true).get();\r\n    convertValueNoPattern(converter, \"(A)\", localizedDecimalValue, expectedValue);\r\n    convertValueWithPattern(converter, \"(A)\", localizedDecimalValue, localizedDecimalPattern, expectedValue);\r\n    convertInvalid(converter, \"(A)\", defaultValue);\r\n    convertNull(converter, \"(A)\", defaultValue);\r\n    // **************************************************************************\r\n    // Convert value in the wrong format - maybe you would expect it to throw an\r\n    // exception and return the default - it doesn't, DecimalFormat parses it\r\n    // quite happily turning \"1,234.56\" into \"1.234\"\r\n    // I guess this is one of the limitations of DecimalFormat\r\n    // **************************************************************************\r\n    convertValueNoPattern(converter, \"(B)\", defaultDecimalValue, Double.valueOf(\"1.234\"));\r\n    // **************************************************************************\r\n    // Convert with non-localized pattern - this causes an exception in parse()\r\n    // but it gets swallowed in convert() method and returns default.\r\n    // **** IS THIS THE EXPECTED BEHAVIOUR? ****\r\n    // Maybe if the pattern is no good, we should use a default pattern rather\r\n    // than just returning the default value.\r\n    // **************************************************************************\r\n    convertValueWithPattern(converter, \"(B)\", localizedDecimalValue, defaultDecimalPattern, defaultValue);\r\n    // **************************************************************************\r\n    // Convert with specified type\r\n    //\r\n    // BaseLocaleConverter completely ignores the type - so even if we specify\r\n    // Double.class here it still returns a Double.\r\n    // **** This has been changed due to BEANUTILS-449 ****\r\n    // **************************************************************************\r\n    // convertValueToType(converter, \"(B)\", Integer.class, localizedDecimalValue, localizedDecimalPattern, expectedValue);\r\n    // Construct with non-localized pattern\r\n    converter = DoubleLocaleConverter.builder().setDefault(defaultValue).setLocale(localizedLocale).setPattern(defaultDecimalPattern).setLocalizedPattern(false).get();\r\n    convertValueNoPattern(converter, \"(C)\", localizedDecimalValue, expectedValue);\r\n    convertValueWithPattern(converter, \"(C)\", localizedDecimalValue, defaultDecimalPattern, expectedValue);\r\n    convertInvalid(converter, \"(C)\", defaultValue);\r\n    convertNull(converter, \"(C)\", defaultValue);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\converters\\DurationConverterTest.java",
  "methodName" : "testSimpleConversion",
  "sourceCode" : "@Test\r\nvoid testSimpleConversion() throws Exception {\r\n    final String[] message = { \"from String\", \"from String\", \"from String\", \"from String\", \"from String\", \"from String\", \"from String\", \"from String\" };\r\n    final Object[] input = { \"PT20.345S\", \"PT15M\", \"PT51H4M\" };\r\n    final Duration[] expected = { Duration.parse(\"PT20.345S\"), Duration.parse(\"PT15M\"), Duration.parse(\"P2DT3H4M\") };\r\n    for (int i = 0; i < expected.length; i++) {\r\n        assertEquals(expected[i], converter.convert(Duration.class, input[i]), message[i] + \" to URI\");\r\n        assertEquals(expected[i], converter.convert(null, input[i]), message[i] + \" to null type\");\r\n    }\r\n    for (int i = 0; i < expected.length; i++) {\r\n        assertEquals(input[i], converter.convert(String.class, expected[i]), input[i] + \" to String\");\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\converters\\DurationConverterTest.java",
  "methodName" : "testUnsupportedType",
  "sourceCode" : "/**\r\n * Tests a conversion to an unsupported type.\r\n */\r\n@Test\r\nvoid testUnsupportedType() {\r\n    assertThrows(ConversionException.class, () -> converter.convert(Integer.class, \"http://www.apache.org\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\converters\\EnumConverterTest.java",
  "methodName" : "testSimpleConversion",
  "sourceCode" : "@Test\r\nvoid testSimpleConversion() throws Exception {\r\n    final String[] message = { \"from String\", \"from String\", \"from String\", \"from String\", \"from String\", \"from String\", \"from String\", \"from String\" };\r\n    final Object[] input = { \"DELIVERED\", \"ORDERED\", \"READY\" };\r\n    final PizzaStatus[] expected = { PizzaStatus.DELIVERED, PizzaStatus.ORDERED, PizzaStatus.READY };\r\n    for (int i = 0; i < expected.length; i++) {\r\n        assertEquals(expected[i], converter.convert(PizzaStatus.class, input[i]), message[i] + \" to Enum\");\r\n    }\r\n    for (int i = 0; i < expected.length; i++) {\r\n        assertEquals(input[i], converter.convert(String.class, expected[i]), input[i] + \" to String\");\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\converters\\EnumConverterTest.java",
  "methodName" : "testUnsupportedType",
  "sourceCode" : "/**\r\n * Tests a conversion to an unsupported type.\r\n */\r\n@Test\r\nvoid testUnsupportedType() {\r\n    assertThrows(ConversionException.class, () -> converter.convert(Integer.class, \"http://www.apache.org\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\converters\\EnumConverterTest.java",
  "methodName" : "testConvertTimeUnit",
  "sourceCode" : "@Test\r\nvoid testConvertTimeUnit() {\r\n    assertEquals(TimeUnit.NANOSECONDS, converter.convert(Enum.class, \"java.util.concurrent.TimeUnit.NANOSECONDS\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\converters\\EnumConverterTest.java",
  "methodName" : "testConvertDayOfWeek",
  "sourceCode" : "@Test\r\nvoid testConvertDayOfWeek() {\r\n    assertEquals(DayOfWeek.MONDAY, converter.convert(DayOfWeek.class, \"java.time.DayOfWeek#MONDAY\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\converters\\EnumConverterTest.java",
  "methodName" : "testConvertMismatchingEnumType",
  "sourceCode" : "@Test\r\nvoid testConvertMismatchingEnumType() {\r\n    assertThrows(ConversionException.class, () -> converter.convert(TimeUnit.class, \"java.time.DayOfWeek#MONDAY\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\converters\\EnumConverterTest.java",
  "methodName" : "testBrokenNamingConvention",
  "sourceCode" : "@Test\r\nvoid testBrokenNamingConvention() {\r\n    assertThrows(ConversionException.class, () -> converter.convert(Enum.class, \"JAVA-TIME-DAYOFWEEK#MONDAY\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\converters\\EnumConverterTest.java",
  "methodName" : "testNonEnumClasses",
  "sourceCode" : "@Test\r\nvoid testNonEnumClasses() {\r\n    assertThrows(ConversionException.class, () -> converter.convert(Enum.class, \"java.lang.String#MONDAY\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\converters\\EnumConverterTest.java",
  "methodName" : "testNonExistingClasses",
  "sourceCode" : "@Test\r\nvoid testNonExistingClasses() {\r\n    assertThrows(ConversionException.class, () -> converter.convert(Enum.class, \"java.lang.does.not.exist#MONDAY\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\converters\\FileConverterTest.java",
  "methodName" : "testSimpleConversion",
  "sourceCode" : "@Test\r\nvoid testSimpleConversion() throws Exception {\r\n    final String[] message = { \"from String\", \"from String\", \"from String\" };\r\n    final Object[] input = { \"/tmp\", \"/tmp/foo.txt\", \"/tmp/does/not/exist.foo\" };\r\n    final File[] expected = { new File(\"/tmp\"), new File(\"/tmp/foo.txt\"), new File(\"/tmp/does/not/exist.foo\") };\r\n    for (int i = 0; i < expected.length; i++) {\r\n        assertEquals(expected[i], converter.convert(File.class, input[i]), message[i] + \" to File\");\r\n        assertEquals(expected[i], converter.convert(null, input[i]), message[i] + \" to null type\");\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\converters\\FileConverterTest.java",
  "methodName" : "testUnsupportedTargetType",
  "sourceCode" : "/**\r\n * Tries a conversion to an unsupported target type.\r\n */\r\n@Test\r\nvoid testUnsupportedTargetType() {\r\n    assertThrows(ConversionException.class, () -> converter.convert(Integer.class, \"/tmp\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\converters\\FloatConverterTest.java",
  "methodName" : "testInvalidAmount",
  "sourceCode" : "/**\r\n * Test Invalid Amounts (too big/small)\r\n */\r\n@Test\r\nvoid testInvalidAmount() {\r\n    final Converter<Float> converter = makeConverter();\r\n    final Class<?> clazz = Float.class;\r\n    final Double max = Double.valueOf(Float.MAX_VALUE);\r\n    final Double tooBig = Double.valueOf(Double.MAX_VALUE);\r\n    // Maximum\r\n    assertEquals(Float.valueOf(Float.MAX_VALUE), converter.convert(clazz, max), \"Maximum\");\r\n    // Too Large\r\n    assertThrows(ConversionException.class, () -> converter.convert(clazz, tooBig), \"More than maximum, expected ConversionException\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\converters\\FloatConverterTest.java",
  "methodName" : "testSimpleConversion",
  "sourceCode" : "@Test\r\nvoid testSimpleConversion() {\r\n    final String[] message = { \"from String\", \"from String\", \"from String\", \"from String\", \"from String\", \"from String\", \"from String\", \"from Byte\", \"from Short\", \"from Integer\", \"from Long\", \"from Float\", \"from Double\" };\r\n    final Object[] input = { String.valueOf(Float.MIN_VALUE), \"-17.2\", \"-1.1\", \"0.0\", \"1.1\", \"17.2\", String.valueOf(Float.MAX_VALUE), Byte.valueOf((byte) 7), Short.valueOf((short) 8), Integer.valueOf(9), Long.valueOf(10), Float.valueOf((float) 11.1), Double.valueOf(12.2) };\r\n    final Float[] expected = { Float.valueOf(Float.MIN_VALUE), Float.valueOf((float) -17.2), Float.valueOf((float) -1.1), Float.valueOf((float) 0.0), Float.valueOf((float) 1.1), Float.valueOf((float) 17.2), Float.valueOf(Float.MAX_VALUE), Float.valueOf(7), Float.valueOf(8), Float.valueOf(9), Float.valueOf(10), Float.valueOf((float) 11.1), Float.valueOf((float) 12.2) };\r\n    for (int i = 0; i < expected.length; i++) {\r\n        assertEquals(expected[i].floatValue(), converter.convert(Float.class, input[i]).floatValue(), 0.00001, message[i] + \" to Float\");\r\n        assertEquals(expected[i].floatValue(), converter.convert(Float.TYPE, input[i]).floatValue(), 0.00001, message[i] + \" to float\");\r\n        assertEquals(expected[i].floatValue(), converter.convert((Class<Float>) null, input[i]).floatValue(), 0.00001, message[i] + \" to null type\");\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\converters\\FloatLocaleConverterTest.java",
  "methodName" : "testConstructor_2",
  "sourceCode" : "/**\r\n * Test Converter() constructor\r\n *\r\n * Uses the default locale, no default value\r\n */\r\n@Test\r\nvoid testConstructor_2() {\r\n    // Construct using default locale\r\n    converter = FloatLocaleConverter.builder().get();\r\n    // Perform Tests\r\n    convertValueNoPattern(converter, defaultDecimalValue, expectedValue);\r\n    convertValueWithPattern(converter, defaultDecimalValue, defaultDecimalPattern, expectedValue);\r\n    convertInvalid(converter, null);\r\n    convertNull(converter, null);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\converters\\FloatLocaleConverterTest.java",
  "methodName" : "testConstructor_3",
  "sourceCode" : "/**\r\n * Test Converter(locPattern) constructor\r\n *\r\n * Uses the default locale, no default value\r\n */\r\n@Test\r\nvoid testConstructor_3() {\r\n    // Construct using localized pattern (default locale)\r\n    converter = FloatLocaleConverter.builder().setLocalizedPattern(true).get();\r\n    // Perform Tests\r\n    convertValueNoPattern(converter, defaultDecimalValue, expectedValue);\r\n    convertValueWithPattern(converter, defaultDecimalValue, defaultDecimalPattern, expectedValue);\r\n    convertInvalid(converter, null);\r\n    convertNull(converter, null);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\converters\\FloatLocaleConverterTest.java",
  "methodName" : "testConstructor_4",
  "sourceCode" : "/**\r\n * Test Converter(Locale) constructor\r\n */\r\n@Test\r\nvoid testConstructor_4() {\r\n    // Construct using specified Locale\r\n    converter = FloatLocaleConverter.builder().setLocale(localizedLocale).get();\r\n    // Perform Tests\r\n    convertValueNoPattern(converter, localizedDecimalValue, expectedValue);\r\n    convertValueWithPattern(converter, localizedDecimalValue, defaultDecimalPattern, expectedValue);\r\n    convertInvalid(converter, null);\r\n    convertNull(converter, null);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\converters\\FloatLocaleConverterTest.java",
  "methodName" : "testConstructor_5",
  "sourceCode" : "/**\r\n * Test Converter(Locale, locPattern) constructor\r\n */\r\n@Test\r\nvoid testConstructor_5() {\r\n    // Construct using specified Locale\r\n    converter = FloatLocaleConverter.builder().setLocale(localizedLocale).setLocalizedPattern(true).get();\r\n    // Perform Tests\r\n    convertValueNoPattern(converter, localizedDecimalValue, expectedValue);\r\n    convertValueWithPattern(converter, localizedDecimalValue, localizedDecimalPattern, expectedValue);\r\n    convertInvalid(converter, null);\r\n    convertNull(converter, null);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\converters\\FloatLocaleConverterTest.java",
  "methodName" : "testConstructor_6",
  "sourceCode" : "/**\r\n * Test Converter(Locale, pattern) constructor\r\n */\r\n@Test\r\nvoid testConstructor_6() {\r\n    // Construct using specified Locale\r\n    converter = FloatLocaleConverter.builder().setLocale(localizedLocale).setPattern(defaultDecimalPattern).get();\r\n    // Perform Tests\r\n    convertValueNoPattern(converter, localizedDecimalValue, expectedValue);\r\n    convertValueWithPattern(converter, localizedDecimalValue, defaultDecimalPattern, expectedValue);\r\n    convertInvalid(converter, null);\r\n    convertNull(converter, null);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\converters\\FloatLocaleConverterTest.java",
  "methodName" : "testConstructor_7",
  "sourceCode" : "/**\r\n * Test Converter(Locale, pattern, locPattern) constructor\r\n */\r\n@Test\r\nvoid testConstructor_7() {\r\n    // Construct using specified Locale\r\n    converter = FloatLocaleConverter.builder().setLocale(localizedLocale).setPattern(localizedDecimalPattern).setLocalizedPattern(true).get();\r\n    // Perform Tests\r\n    convertValueNoPattern(converter, localizedDecimalValue, expectedValue);\r\n    convertValueWithPattern(converter, localizedDecimalValue, localizedDecimalPattern, expectedValue);\r\n    convertInvalid(converter, null);\r\n    convertNull(converter, null);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\converters\\FloatLocaleConverterTest.java",
  "methodName" : "testConstructor_8",
  "sourceCode" : "/**\r\n * Test Converter(defaultValue) constructor\r\n */\r\n@Test\r\nvoid testConstructor_8() {\r\n    // Construct using specified Locale\r\n    converter = FloatLocaleConverter.builder().setDefault(defaultValue).get();\r\n    // Perform Tests\r\n    convertValueNoPattern(converter, defaultDecimalValue, expectedValue);\r\n    convertValueWithPattern(converter, defaultDecimalValue, defaultDecimalPattern, expectedValue);\r\n    convertInvalid(converter, defaultValue);\r\n    convertNull(converter, defaultValue);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\converters\\FloatLocaleConverterTest.java",
  "methodName" : "testConstructor_9",
  "sourceCode" : "/**\r\n * Test Converter(defaultValue, locPattern) constructor\r\n */\r\n@Test\r\nvoid testConstructor_9() {\r\n    // Construct using specified Locale\r\n    converter = FloatLocaleConverter.builder().setDefault(defaultValue).setLocalizedPattern(true).get();\r\n    // Perform Tests\r\n    convertValueNoPattern(converter, defaultDecimalValue, expectedValue);\r\n    convertValueWithPattern(converter, defaultDecimalValue, defaultDecimalPattern, expectedValue);\r\n    convertInvalid(converter, defaultValue);\r\n    convertNull(converter, defaultValue);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\converters\\FloatLocaleConverterTest.java",
  "methodName" : "testConstructorMain",
  "sourceCode" : "/**\r\n * Test Converter(defaultValue, locale, pattern, localizedPattern) constructor\r\n */\r\n@Test\r\nvoid testConstructorMain() {\r\n    // Construct with localized pattern\r\n    converter = FloatLocaleConverter.builder().setDefault(defaultValue).setLocale(localizedLocale).setPattern(localizedDecimalPattern).setLocalizedPattern(true).get();\r\n    convertValueNoPattern(converter, \"(A)\", localizedDecimalValue, expectedValue);\r\n    convertValueWithPattern(converter, \"(A)\", localizedDecimalValue, localizedDecimalPattern, expectedValue);\r\n    convertInvalid(converter, \"(A)\", defaultValue);\r\n    convertNull(converter, \"(A)\", defaultValue);\r\n    // **************************************************************************\r\n    // Convert value in the wrong format - maybe you would expect it to throw an\r\n    // exception and return the default - it doesn't, DecimalFormat parses it\r\n    // quite happily turning \"1,234.56\" into \"1.234\"\r\n    // I guess this is one of the limitations of DecimalFormat\r\n    // **************************************************************************\r\n    convertValueNoPattern(converter, \"(B)\", defaultDecimalValue, Float.valueOf(\"1.234\"));\r\n    // **************************************************************************\r\n    // Convert with non-localized pattern - this causes an exception in parse()\r\n    // but it gets swallowed in convert() method and returns default.\r\n    // **** IS THIS THE EXPECTED BEHAVIOUR? ****\r\n    // Maybe if the pattern is no good, we should use a default pattern rather\r\n    // than just returning the default value.\r\n    // **************************************************************************\r\n    convertValueWithPattern(converter, \"(B)\", localizedDecimalValue, defaultDecimalPattern, defaultValue);\r\n    // **************************************************************************\r\n    // Convert with specified type\r\n    //\r\n    // BaseLocaleConverter completely ignores the type - so even if we specify\r\n    // Float.class here it still returns a Float.\r\n    // **** This has been changed due to BEANUTILS-449 ****\r\n    // **************************************************************************\r\n    // convertValueToType(converter, \"(B)\", Integer.class, localizedDecimalValue, localizedDecimalPattern, expectedValue);\r\n    // Construct with non-localized pattern\r\n    converter = FloatLocaleConverter.builder().setDefault(defaultValue).setLocale(localizedLocale).setPattern(defaultDecimalPattern).setLocalizedPattern(false).get();\r\n    convertValueNoPattern(converter, \"(C)\", localizedDecimalValue, expectedValue);\r\n    convertValueWithPattern(converter, \"(C)\", localizedDecimalValue, defaultDecimalPattern, expectedValue);\r\n    convertInvalid(converter, \"(C)\", defaultValue);\r\n    convertNull(converter, \"(C)\", defaultValue);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\converters\\FloatLocaleConverterTest.java",
  "methodName" : "testFloatLimits",
  "sourceCode" : "/**\r\n * Test Float limits\r\n */\r\n@Test\r\nvoid testFloatLimits() {\r\n    converter = FloatLocaleConverter.builder().setLocale(defaultLocale).setPattern(defaultDecimalPattern).get();\r\n    final DecimalFormat fmt = new DecimalFormat(\"#.#############################################################\");\r\n    assertEquals(Float.valueOf((float) -0.12), converter.convert(\"-0.12\"));\r\n    assertEquals(Float.valueOf(Float.MAX_VALUE), converter.convert(fmt.format(Float.MAX_VALUE)), \"Positive Float.MAX_VALUE\");\r\n    assertEquals(Float.valueOf(Float.MIN_VALUE), converter.convert(fmt.format(Float.MIN_VALUE)), \"Positive Float.MIN_VALUE\");\r\n    assertEquals(Float.valueOf(Float.MAX_VALUE * -1), converter.convert(fmt.format(Float.MAX_VALUE * -1)), \"Negative Float.MAX_VALUE\");\r\n    assertEquals(Float.valueOf(Float.MIN_VALUE * -1), converter.convert(fmt.format(Float.MIN_VALUE * -1)), \"Negative Float.MIN_VALUE\");\r\n    try {\r\n        converter.convert(fmt.format((double) Float.MAX_VALUE * (double) 10));\r\n        fail(\"Positive Too Large should throw ConversionException\");\r\n    } catch (final ConversionException e) {\r\n        // expected result\r\n    }\r\n    try {\r\n        converter.convert(fmt.format((double) Float.MAX_VALUE * (double) -10));\r\n        fail(\"Negative Too Large should throw ConversionException\");\r\n    } catch (final ConversionException e) {\r\n        // expected result\r\n    }\r\n    try {\r\n        converter.convert(fmt.format((double) Float.MIN_VALUE / (double) 10));\r\n        fail(\"Positive Too Small should throw ConversionException\");\r\n    } catch (final ConversionException e) {\r\n        // expected result\r\n    }\r\n    try {\r\n        converter.convert(fmt.format((double) Float.MIN_VALUE / (double) -10));\r\n        fail(\"Negative Too Small should throw ConversionException\");\r\n    } catch (final ConversionException e) {\r\n        // expected result\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\converters\\FloatLocaleConverterTest.java",
  "methodName" : "testParseZero",
  "sourceCode" : "/**\r\n * Test parsing zero - see BEANUTILS-351\r\n */\r\n@Test\r\nvoid testParseZero() {\r\n    try {\r\n        final Object result = LocaleConvertUtils.convert(\"0\", Float.class, Locale.US, null);\r\n        assertEquals(Float.valueOf(0), result);\r\n    } catch (final ConversionException e) {\r\n        fail(\"Zero threw ConversionException: \" + e);\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\converters\\InetAddressConverterTest.java",
  "methodName" : "testConvertingIpv4",
  "sourceCode" : "@Test\r\nvoid testConvertingIpv4() throws UnknownHostException {\r\n    final InetAddress expected = InetAddress.getByName(\"192.168.0.1\");\r\n    final InetAddress actual = converter.convert(InetAddress.class, \"192.168.0.1\");\r\n    assertEquals(expected, actual);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\converters\\InetAddressConverterTest.java",
  "methodName" : "testConvertingIpv6",
  "sourceCode" : "@Test\r\nvoid testConvertingIpv6() throws UnknownHostException {\r\n    final InetAddress expected = InetAddress.getByName(\"2001:db8:0:1234:0:567:8:1\");\r\n    final InetAddress actual = converter.convert(InetAddress.class, \"2001:db8:0:1234:0:567:8:1\");\r\n    assertEquals(expected, actual);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\converters\\InetAddressConverterTest.java",
  "methodName" : "testConvertingLocalhost",
  "sourceCode" : "@Test\r\nvoid testConvertingLocalhost() throws UnknownHostException {\r\n    final InetAddress expected = InetAddress.getByName(\"127.0.0.1\");\r\n    final InetAddress actual = converter.convert(InetAddress.class, \"localhost\");\r\n    assertEquals(expected, actual);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\converters\\InetAddressConverterTest.java",
  "methodName" : "testInvalidIp",
  "sourceCode" : "@Test\r\nvoid testInvalidIp() {\r\n    assertThrows(ConversionException.class, () -> converter.convert(InetAddress.class, \"512.512.512.512\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\converters\\InetAddressConverterTest.java",
  "methodName" : "testText",
  "sourceCode" : "@Test\r\nvoid testText() {\r\n    assertThrows(ConversionException.class, () -> converter.convert(InetAddress.class, \"Hello, world!\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\converters\\InstantConverterTest.java",
  "methodName" : "testConvertingMilliseconds",
  "sourceCode" : "@Test\r\nvoid testConvertingMilliseconds() {\r\n    final Instant expected = Instant.ofEpochMilli(1596500083605L);\r\n    final Instant actual = converter.convert(Instant.class, 1596500083605L);\r\n    assertEquals(expected, actual);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\converters\\InstantConverterTest.java",
  "methodName" : "testConvertingInstantString",
  "sourceCode" : "@Test\r\nvoid testConvertingInstantString() {\r\n    final Instant expected = Instant.ofEpochMilli(1196676930000L);\r\n    final Instant actual = converter.convert(Instant.class, \"2007-12-03T10:15:30.00Z\");\r\n    assertEquals(expected, actual);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\converters\\InstantConverterTest.java",
  "methodName" : "testText",
  "sourceCode" : "@Test\r\nvoid testText() {\r\n    assertThrows(ConversionException.class, () -> converter.convert(Instant.class, \"Hello, world!\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\converters\\InstantConverterTest.java",
  "methodName" : "testLocalizedNumber",
  "sourceCode" : "@Test\r\nvoid testLocalizedNumber() {\r\n    assertThrows(ConversionException.class, () -> converter.convert(Instant.class, \"200,000,000,000\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\converters\\IntegerConverterTest.java",
  "methodName" : "testInvalidAmount",
  "sourceCode" : "/**\r\n * Test Invalid Amounts (too big/small)\r\n */\r\n@Test\r\nvoid testInvalidAmount() {\r\n    final Converter<Integer> converter = makeConverter();\r\n    final Class<?> clazz = Integer.class;\r\n    final Long min = Long.valueOf(Integer.MIN_VALUE);\r\n    final Long max = Long.valueOf(Integer.MAX_VALUE);\r\n    final Long minMinusOne = Long.valueOf(min.longValue() - 1);\r\n    final Long maxPlusOne = Long.valueOf(max.longValue() + 1);\r\n    // Minimum\r\n    assertEquals(Integer.valueOf(Integer.MIN_VALUE), converter.convert(clazz, min), \"Minimum\");\r\n    // Maximum\r\n    assertEquals(Integer.valueOf(Integer.MAX_VALUE), converter.convert(clazz, max), \"Maximum\");\r\n    // Too Small\r\n    assertThrows(ConversionException.class, () -> converter.convert(clazz, minMinusOne), \"Less than minimum, expected ConversionException\");\r\n    // Too Large\r\n    assertThrows(ConversionException.class, () -> converter.convert(clazz, maxPlusOne), \"More than maximum, expected ConversionException\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\converters\\IntegerConverterTest.java",
  "methodName" : "testInvalidDefaultObject",
  "sourceCode" : "/**\r\n * Tests whether an invalid default object causes an exception.\r\n */\r\n@Test\r\n// raw to test throwing\r\n@SuppressWarnings(\"unchecked\")\r\nvoid testInvalidDefaultObject() {\r\n    // raw to test throwing\r\n    @SuppressWarnings(\"rawtypes\")\r\n    final NumberConverter converter = makeConverter();\r\n    assertThrows(ConversionException.class, () -> converter.setDefaultValue(\"notANumber\"), \"Invalid default value not detected!\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\converters\\IntegerConverterTest.java",
  "methodName" : "testSimpleConversion",
  "sourceCode" : "@Test\r\nvoid testSimpleConversion() throws Exception {\r\n    final String[] message = { \"from String\", \"from String\", \"from String\", \"from String\", \"from String\", \"from String\", \"from String\", \"from Byte\", \"from Short\", \"from Integer\", \"from Long\", \"from Float\", \"from Double\" };\r\n    final Object[] input = { String.valueOf(Integer.MIN_VALUE), \"-17\", \"-1\", \"0\", \"1\", \"17\", String.valueOf(Integer.MAX_VALUE), Byte.valueOf((byte) 7), Short.valueOf((short) 8), Integer.valueOf(9), Long.valueOf(10), Float.valueOf((float) 11.1), Double.valueOf(12.2) };\r\n    final Integer[] expected = { Integer.valueOf(Integer.MIN_VALUE), Integer.valueOf(-17), Integer.valueOf(-1), Integer.valueOf(0), Integer.valueOf(1), Integer.valueOf(17), Integer.valueOf(Integer.MAX_VALUE), Integer.valueOf(7), Integer.valueOf(8), Integer.valueOf(9), Integer.valueOf(10), Integer.valueOf(11), Integer.valueOf(12) };\r\n    for (int i = 0; i < expected.length; i++) {\r\n        assertEquals(expected[i], converter.convert(Integer.class, input[i]), message[i] + \" to Integer\");\r\n        assertEquals(expected[i], converter.convert(Integer.TYPE, input[i]), message[i] + \" to int\");\r\n        assertEquals(expected[i], converter.convert(null, input[i]), message[i] + \" to null type\");\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\converters\\IntegerLocaleConverterTest.java",
  "methodName" : "testConstructor_2",
  "sourceCode" : "/**\r\n * Test Converter() constructor\r\n *\r\n * Uses the default locale, no default value\r\n */\r\n@Test\r\nvoid testConstructor_2() {\r\n    // Construct using default locale\r\n    converter = IntegerLocaleConverter.builder().get();\r\n    // Perform Tests\r\n    convertValueNoPattern(converter, defaultIntegerValue, expectedValue);\r\n    convertValueWithPattern(converter, defaultIntegerValue, defaultIntegerPattern, expectedValue);\r\n    convertInvalid(converter, null);\r\n    convertNull(converter, null);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\converters\\IntegerLocaleConverterTest.java",
  "methodName" : "testConstructor_3",
  "sourceCode" : "/**\r\n * Test Converter(locPattern) constructor\r\n *\r\n * Uses the default locale, no default value\r\n */\r\n@Test\r\nvoid testConstructor_3() {\r\n    // Construct using localized pattern (default locale)\r\n    converter = IntegerLocaleConverter.builder().setLocalizedPattern(true).get();\r\n    // Perform Tests\r\n    convertValueNoPattern(converter, defaultIntegerValue, expectedValue);\r\n    convertValueWithPattern(converter, defaultIntegerValue, defaultIntegerPattern, expectedValue);\r\n    convertInvalid(converter, null);\r\n    convertNull(converter, null);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\converters\\IntegerLocaleConverterTest.java",
  "methodName" : "testConstructor_4",
  "sourceCode" : "/**\r\n * Test Converter(Locale) constructor\r\n */\r\n@Test\r\nvoid testConstructor_4() {\r\n    // Construct using specified Locale\r\n    converter = IntegerLocaleConverter.builder().setLocale(localizedLocale).get();\r\n    // Perform Tests\r\n    convertValueNoPattern(converter, localizedIntegerValue, expectedValue);\r\n    convertValueWithPattern(converter, localizedIntegerValue, defaultIntegerPattern, expectedValue);\r\n    convertInvalid(converter, null);\r\n    convertNull(converter, null);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\converters\\IntegerLocaleConverterTest.java",
  "methodName" : "testConstructor_5",
  "sourceCode" : "/**\r\n * Test Converter(Locale, locPattern) constructor\r\n */\r\n@Test\r\nvoid testConstructor_5() {\r\n    // Construct using specified Locale\r\n    converter = IntegerLocaleConverter.builder().setLocale(localizedLocale).setLocalizedPattern(true).get();\r\n    // Perform Tests\r\n    convertValueNoPattern(converter, localizedIntegerValue, expectedValue);\r\n    convertValueWithPattern(converter, localizedIntegerValue, localizedIntegerPattern, expectedValue);\r\n    convertInvalid(converter, null);\r\n    convertNull(converter, null);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\converters\\IntegerLocaleConverterTest.java",
  "methodName" : "testConstructor_6",
  "sourceCode" : "/**\r\n * Test Converter(Locale, pattern) constructor\r\n */\r\n@Test\r\nvoid testConstructor_6() {\r\n    // Construct using specified Locale\r\n    converter = IntegerLocaleConverter.builder().setLocale(localizedLocale).setPattern(defaultIntegerPattern).get();\r\n    // Perform Tests\r\n    convertValueNoPattern(converter, localizedIntegerValue, expectedValue);\r\n    convertValueWithPattern(converter, localizedIntegerValue, defaultIntegerPattern, expectedValue);\r\n    convertInvalid(converter, null);\r\n    convertNull(converter, null);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\converters\\IntegerLocaleConverterTest.java",
  "methodName" : "testConstructor_7",
  "sourceCode" : "/**\r\n * Test Converter(Locale, pattern, locPattern) constructor\r\n */\r\n@Test\r\nvoid testConstructor_7() {\r\n    // Construct using specified Locale\r\n    converter = IntegerLocaleConverter.builder().setLocale(localizedLocale).setPattern(localizedIntegerPattern).setLocalizedPattern(true).get();\r\n    // Perform Tests\r\n    convertValueNoPattern(converter, localizedIntegerValue, expectedValue);\r\n    convertValueWithPattern(converter, localizedIntegerValue, localizedIntegerPattern, expectedValue);\r\n    convertInvalid(converter, null);\r\n    convertNull(converter, null);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\converters\\IntegerLocaleConverterTest.java",
  "methodName" : "testConstructor_8",
  "sourceCode" : "/**\r\n * Test Converter(defaultValue) constructor\r\n */\r\n@Test\r\nvoid testConstructor_8() {\r\n    // Construct using specified Locale\r\n    converter = IntegerLocaleConverter.builder().setDefault(defaultValue).get();\r\n    // Perform Tests\r\n    convertValueNoPattern(converter, defaultIntegerValue, expectedValue);\r\n    convertValueWithPattern(converter, defaultIntegerValue, defaultIntegerPattern, expectedValue);\r\n    convertInvalid(converter, defaultValue);\r\n    convertNull(converter, defaultValue);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\converters\\IntegerLocaleConverterTest.java",
  "methodName" : "testConstructor_9",
  "sourceCode" : "/**\r\n * Test Converter(defaultValue, locPattern) constructor\r\n */\r\n@Test\r\nvoid testConstructor_9() {\r\n    // Construct using specified Locale\r\n    converter = IntegerLocaleConverter.builder().setDefault(defaultValue).setLocalizedPattern(true).get();\r\n    // Perform Tests\r\n    convertValueNoPattern(converter, defaultIntegerValue, expectedValue);\r\n    convertValueWithPattern(converter, defaultIntegerValue, defaultIntegerPattern, expectedValue);\r\n    convertInvalid(converter, defaultValue);\r\n    convertNull(converter, defaultValue);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\converters\\IntegerLocaleConverterTest.java",
  "methodName" : "testConstructorMain",
  "sourceCode" : "/**\r\n * Test Converter(defaultValue, locale, pattern, localizedPattern) constructor\r\n */\r\n@Test\r\nvoid testConstructorMain() {\r\n    // Construct with localized pattern\r\n    converter = IntegerLocaleConverter.builder().setDefault(defaultValue).setLocale(localizedLocale).setPattern(localizedIntegerPattern).setLocalizedPattern(true).get();\r\n    convertValueNoPattern(converter, \"(A)\", localizedIntegerValue, expectedValue);\r\n    convertValueWithPattern(converter, \"(A)\", localizedIntegerValue, localizedIntegerPattern, expectedValue);\r\n    convertInvalid(converter, \"(A)\", defaultValue);\r\n    convertNull(converter, \"(A)\", defaultValue);\r\n    // **************************************************************************\r\n    // Convert value in the wrong format - maybe you would expect it to throw an\r\n    // exception and return the default - it doesn't, DecimalFormat parses it\r\n    // quite happily turning \"1,234\" into \"1\"\r\n    // I guess this is one of the limitations of DecimalFormat\r\n    // **************************************************************************\r\n    convertValueNoPattern(converter, \"(B)\", defaultIntegerValue, Integer.valueOf(\"1\"));\r\n    // **************************************************************************\r\n    // Convert with non-localized pattern - unlike the equivalent BigDecimal Test Case\r\n    // it doesn't causes an exception in parse() - DecimalFormat parses it\r\n    // quite happily turning \"1,234\" into \"1\"\r\n    // Again this is one of the limitations of DecimalFormat\r\n    // **************************************************************************\r\n    convertValueWithPattern(converter, \"(B)\", localizedIntegerValue, defaultIntegerPattern, Integer.valueOf(\"1\"));\r\n    // **************************************************************************\r\n    // Convert with specified type\r\n    //\r\n    // BaseLocaleConverter completely ignores the type - so even if we specify\r\n    // Double.class here it still returns a Integer.\r\n    // **** This has been changed due to BEANUTILS-449 ****\r\n    // **************************************************************************\r\n    // convertValueToType(converter, \"(B)\", Double.class, localizedIntegerValue, localizedIntegerPattern, expectedValue);\r\n    // Construct with non-localized pattern\r\n    converter = IntegerLocaleConverter.builder().setDefault(defaultValue).setLocale(localizedLocale).setPattern(defaultIntegerPattern).setLocalizedPattern(false).get();\r\n    convertValueNoPattern(converter, \"(C)\", localizedIntegerValue, expectedValue);\r\n    convertValueWithPattern(converter, \"(C)\", localizedIntegerValue, defaultIntegerPattern, expectedValue);\r\n    convertInvalid(converter, \"(C)\", defaultValue);\r\n    convertNull(converter, \"(C)\", defaultValue);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\converters\\IntegerLocaleConverterTest.java",
  "methodName" : "testNumber",
  "sourceCode" : "/**\r\n * Test Converting a number\r\n */\r\n@Test\r\nvoid testNumber() {\r\n    // Construct using specified Locale\r\n    converter = IntegerLocaleConverter.builder().setLocale(localizedLocale).get();\r\n    final Integer value = Integer.valueOf(1234);\r\n    assertEquals(value, converter.convert(value), \"Convert Integer\");\r\n    assertEquals(value, converter.convert(Long.valueOf(value.intValue())), \"Convert Long\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\converters\\IntegerLocaleConverterTest.java",
  "methodName" : "testToPrimitiveType",
  "sourceCode" : "/**\r\n * Tests whether a conversion to a primitive type can be performed.\r\n */\r\n@Test\r\nvoid testToPrimitiveType() {\r\n    converter = IntegerLocaleConverter.builder().get();\r\n    final Integer value = 20131028;\r\n    final Class<Integer> target = Integer.TYPE;\r\n    final int result = converter.convert(target, (Object) value.toString());\r\n    assertEquals(value.intValue(), result, \"Wrong result\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\converters\\LocaleConverterTest.java",
  "methodName" : "testConvertCustomLocale",
  "sourceCode" : "@Test\r\nvoid testConvertCustomLocale() {\r\n    final Locale expected = Locale.forLanguageTag(\"en-owo\");\r\n    final Locale actual = converter.convert(Locale.class, \"en-owo\");\r\n    assertEquals(expected, actual);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\converters\\LocaleConverterTest.java",
  "methodName" : "testConvertStandardLocale",
  "sourceCode" : "@Test\r\nvoid testConvertStandardLocale() {\r\n    final Locale expected = Locale.ENGLISH;\r\n    final Locale actual = converter.convert(Locale.class, \"en\");\r\n    assertEquals(expected, actual);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\converters\\LocalTimeConverterTest.java",
  "methodName" : "testSimpleConversion",
  "sourceCode" : "@Test\r\nvoid testSimpleConversion() throws Exception {\r\n    final String[] message = { \"from String\", \"from String\", \"from String\", \"from String\", \"from String\", \"from String\", \"from String\", \"from String\" };\r\n    final Object[] input = { \"10:15\", \"08:45:30\" };\r\n    final LocalTime[] expected = { LocalTime.parse(\"10:15\"), LocalTime.parse(\"08:45:30\") };\r\n    for (int i = 0; i < expected.length; i++) {\r\n        assertEquals(expected[i], converter.convert(LocalTime.class, input[i]), message[i] + \" to URI\");\r\n        assertEquals(expected[i], converter.convert(null, input[i]), message[i] + \" to null type\");\r\n    }\r\n    for (int i = 0; i < expected.length; i++) {\r\n        assertEquals(input[i], converter.convert(String.class, expected[i]), input[i] + \" to String\");\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\converters\\LocalTimeConverterTest.java",
  "methodName" : "testUnsupportedType",
  "sourceCode" : "/**\r\n * Tests a conversion to an unsupported type.\r\n */\r\n@Test\r\nvoid testUnsupportedType() {\r\n    assertThrows(ConversionException.class, () -> converter.convert(Integer.class, \"http://www.apache.org\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\converters\\LongConverterTest.java",
  "methodName" : "testSimpleConversion",
  "sourceCode" : "@Test\r\nvoid testSimpleConversion() throws Exception {\r\n    final String[] message = { \"from String\", \"from String\", \"from String\", \"from String\", \"from String\", \"from String\", \"from String\", \"from Byte\", \"from Short\", \"from Integer\", \"from Long\", \"from Float\", \"from Double\" };\r\n    final Object[] input = { String.valueOf(Long.MIN_VALUE), \"-17\", \"-1\", \"0\", \"1\", \"17\", String.valueOf(Long.MAX_VALUE), Byte.valueOf((byte) 7), Short.valueOf((short) 8), Integer.valueOf(9), Long.valueOf(10), Float.valueOf((float) 11.1), Double.valueOf(12.2) };\r\n    final Long[] expected = { Long.valueOf(Long.MIN_VALUE), Long.valueOf(-17), Long.valueOf(-1), Long.valueOf(0), Long.valueOf(1), Long.valueOf(17), Long.valueOf(Long.MAX_VALUE), Long.valueOf(7), Long.valueOf(8), Long.valueOf(9), Long.valueOf(10), Long.valueOf(11), Long.valueOf(12) };\r\n    for (int i = 0; i < expected.length; i++) {\r\n        assertEquals(expected[i], converter.convert(Long.class, input[i]), message[i] + \" to Long\");\r\n        assertEquals(expected[i], converter.convert(Long.TYPE, input[i]), message[i] + \" to long\");\r\n        assertEquals(expected[i], converter.convert(null, input[i]), message[i] + \" to null type\");\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\converters\\LongLocaleConverterTest.java",
  "methodName" : "testConstructor_2",
  "sourceCode" : "/**\r\n * Test Converter() constructor\r\n *\r\n * Uses the default locale, no default value\r\n */\r\n@Test\r\nvoid testConstructor_2() {\r\n    // Construct using default locale\r\n    converter = LongLocaleConverter.builder().get();\r\n    // Perform Tests\r\n    convertValueNoPattern(converter, defaultIntegerValue, expectedValue);\r\n    convertValueWithPattern(converter, defaultIntegerValue, defaultIntegerPattern, expectedValue);\r\n    convertInvalid(converter, null);\r\n    convertNull(converter, null);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\converters\\LongLocaleConverterTest.java",
  "methodName" : "testConstructor_3",
  "sourceCode" : "/**\r\n * Test Converter(locPattern) constructor\r\n *\r\n * Uses the default locale, no default value\r\n */\r\n@Test\r\nvoid testConstructor_3() {\r\n    // Construct using localized pattern (default locale)\r\n    converter = LongLocaleConverter.builder().setLocalizedPattern(true).get();\r\n    // Perform Tests\r\n    convertValueNoPattern(converter, defaultIntegerValue, expectedValue);\r\n    convertValueWithPattern(converter, defaultIntegerValue, defaultIntegerPattern, expectedValue);\r\n    convertInvalid(converter, null);\r\n    convertNull(converter, null);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\converters\\LongLocaleConverterTest.java",
  "methodName" : "testConstructor_4",
  "sourceCode" : "/**\r\n * Test Converter(Locale) constructor\r\n */\r\n@Test\r\nvoid testConstructor_4() {\r\n    // Construct using specified Locale\r\n    converter = LongLocaleConverter.builder().setLocale(localizedLocale).get();\r\n    // Perform Tests\r\n    convertValueNoPattern(converter, localizedIntegerValue, expectedValue);\r\n    convertValueWithPattern(converter, localizedIntegerValue, defaultIntegerPattern, expectedValue);\r\n    convertInvalid(converter, null);\r\n    convertNull(converter, null);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\converters\\LongLocaleConverterTest.java",
  "methodName" : "testConstructor_5",
  "sourceCode" : "/**\r\n * Test Converter(Locale, locPattern) constructor\r\n */\r\n@Test\r\nvoid testConstructor_5() {\r\n    // Construct using specified Locale\r\n    converter = LongLocaleConverter.builder().setLocale(localizedLocale).setLocalizedPattern(true).get();\r\n    // Perform Tests\r\n    convertValueNoPattern(converter, localizedIntegerValue, expectedValue);\r\n    convertValueWithPattern(converter, localizedIntegerValue, localizedIntegerPattern, expectedValue);\r\n    convertInvalid(converter, null);\r\n    convertNull(converter, null);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\converters\\LongLocaleConverterTest.java",
  "methodName" : "testConstructor_6",
  "sourceCode" : "/**\r\n * Test Converter(Locale, pattern) constructor\r\n */\r\n@Test\r\nvoid testConstructor_6() {\r\n    // Construct using specified Locale\r\n    converter = LongLocaleConverter.builder().setLocale(localizedLocale).setPattern(defaultIntegerPattern).get();\r\n    // Perform Tests\r\n    convertValueNoPattern(converter, localizedIntegerValue, expectedValue);\r\n    convertValueWithPattern(converter, localizedIntegerValue, defaultIntegerPattern, expectedValue);\r\n    convertInvalid(converter, null);\r\n    convertNull(converter, null);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\converters\\LongLocaleConverterTest.java",
  "methodName" : "testConstructor_7",
  "sourceCode" : "/**\r\n * Test Converter(Locale, pattern, locPattern) constructor\r\n */\r\n@Test\r\nvoid testConstructor_7() {\r\n    // Construct using specified Locale\r\n    converter = LongLocaleConverter.builder().setLocale(localizedLocale).setPattern(localizedIntegerPattern).setLocalizedPattern(true).get();\r\n    // Perform Tests\r\n    convertValueNoPattern(converter, localizedIntegerValue, expectedValue);\r\n    convertValueWithPattern(converter, localizedIntegerValue, localizedIntegerPattern, expectedValue);\r\n    convertInvalid(converter, null);\r\n    convertNull(converter, null);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\converters\\LongLocaleConverterTest.java",
  "methodName" : "testConstructor_8",
  "sourceCode" : "/**\r\n * Test Converter(defaultValue) constructor\r\n */\r\n@Test\r\nvoid testConstructor_8() {\r\n    // Construct using specified Locale\r\n    converter = LongLocaleConverter.builder().setDefault(defaultValue).get();\r\n    // Perform Tests\r\n    convertValueNoPattern(converter, defaultIntegerValue, expectedValue);\r\n    convertValueWithPattern(converter, defaultIntegerValue, defaultIntegerPattern, expectedValue);\r\n    convertInvalid(converter, defaultValue);\r\n    convertNull(converter, defaultValue);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\converters\\LongLocaleConverterTest.java",
  "methodName" : "testConstructor_9",
  "sourceCode" : "/**\r\n * Test Converter(defaultValue, locPattern) constructor\r\n */\r\n@Test\r\nvoid testConstructor_9() {\r\n    // Construct using specified Locale\r\n    converter = LongLocaleConverter.builder().setDefault(defaultValue).setLocalizedPattern(true).get();\r\n    // Perform Tests\r\n    convertValueNoPattern(converter, defaultIntegerValue, expectedValue);\r\n    convertValueWithPattern(converter, defaultIntegerValue, defaultIntegerPattern, expectedValue);\r\n    convertInvalid(converter, defaultValue);\r\n    convertNull(converter, defaultValue);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\converters\\LongLocaleConverterTest.java",
  "methodName" : "testConstructorMain",
  "sourceCode" : "/**\r\n * Test Converter(defaultValue, locale, pattern, localizedPattern) constructor\r\n */\r\n@Test\r\nvoid testConstructorMain() {\r\n    // Construct with localized pattern\r\n    converter = LongLocaleConverter.builder().setDefault(defaultValue).setLocale(localizedLocale).setPattern(localizedIntegerPattern).setLocalizedPattern(true).get();\r\n    convertValueNoPattern(converter, \"(A)\", localizedIntegerValue, expectedValue);\r\n    convertValueWithPattern(converter, \"(A)\", localizedIntegerValue, localizedIntegerPattern, expectedValue);\r\n    convertInvalid(converter, \"(A)\", defaultValue);\r\n    convertNull(converter, \"(A)\", defaultValue);\r\n    // **************************************************************************\r\n    // Convert value in the wrong format - maybe you would expect it to throw an\r\n    // exception and return the default - it doesn't, DecimalFormat parses it\r\n    // quite happily turning \"1,234\" into \"1\"\r\n    // I guess this is one of the limitations of DecimalFormat\r\n    // **************************************************************************\r\n    convertValueNoPattern(converter, \"(B)\", defaultIntegerValue, Long.valueOf(\"1\"));\r\n    // **************************************************************************\r\n    // Convert with non-localized pattern - unlike the equivalent BigDecimal Test Case\r\n    // it doesn't causes an exception in parse() - DecimalFormat parses it\r\n    // quite happily turning \"1,234\" into \"1\"\r\n    // Again this is one of the limitations of DecimalFormat\r\n    // **************************************************************************\r\n    convertValueWithPattern(converter, \"(B)\", localizedIntegerValue, defaultIntegerPattern, Long.valueOf(\"1\"));\r\n    // **************************************************************************\r\n    // Convert with specified type\r\n    //\r\n    // BaseLocaleConverter completely ignores the type - so even if we specify\r\n    // Double.class here it still returns a Long.\r\n    // **** This has been changed due to BEANUTILS-449 ****\r\n    // **************************************************************************\r\n    // convertValueToType(converter, \"(B)\", Double.class, localizedIntegerValue, localizedIntegerPattern, expectedValue);\r\n    // Construct with non-localized pattern\r\n    converter = LongLocaleConverter.builder().setDefault(defaultValue).setLocale(localizedLocale).setPattern(defaultIntegerPattern).setLocalizedPattern(false).get();\r\n    convertValueNoPattern(converter, \"(C)\", localizedIntegerValue, expectedValue);\r\n    convertValueWithPattern(converter, \"(C)\", localizedIntegerValue, defaultIntegerPattern, expectedValue);\r\n    convertInvalid(converter, \"(C)\", defaultValue);\r\n    convertNull(converter, \"(C)\", defaultValue);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\converters\\MemoryTest.java",
  "methodName" : "testComponentRegistersCustomConverter",
  "sourceCode" : "/**\r\n * Test whether registering a custom Converter subclass while a custom context classloader is set causes a memory leak.\r\n *\r\n * <p>\r\n * This test emulates a j2ee container where BeanUtils has been loaded from a \"common\" lib location that is shared across all components running within the\r\n * container. The \"component\" registers a converter object, whose class was loaded via the component-specific classloader. The registered converter:\r\n * <ul>\r\n * <li>should not be visible to other components; and</li>\r\n * <li>should not prevent the component-specific classloader from being garbage-collected when the container sets its reference to null.\r\n * </ul>\r\n */\r\n@Test\r\nvoid testComponentRegistersCustomConverter() throws Exception {\r\n    final ClassLoader origContextClassLoader = Thread.currentThread().getContextClassLoader();\r\n    try {\r\n        // sanity check; who's paranoid?? :-)\r\n        assertEquals(origContextClassLoader, ConvertUtils.class.getClassLoader());\r\n        // create a custom classloader for a \"component\"\r\n        // just like a container would.\r\n        ClassReloader componentLoader = new ClassReloader(origContextClassLoader);\r\n        // Load a custom Converter via component loader. This emulates what\r\n        // would happen if a user wrote their own FloatConverter subclass\r\n        // and deployed it via the component-specific classpath.\r\n        Thread.currentThread().setContextClassLoader(componentLoader);\r\n        {\r\n            // Here we pretend we're running inside the component, and that\r\n            // a class FloatConverter has been loaded from the component's\r\n            // private classpath.\r\n            final Class<?> newFloatConverterClass = componentLoader.reload(FloatConverter.class);\r\n            Object newFloatConverter = newFloatConverterClass.newInstance();\r\n            assertSame(newFloatConverter.getClass().getClassLoader(), componentLoader);\r\n            // verify that this new object does implement the Converter type\r\n            // despite being loaded via a classloader different from the one\r\n            // that loaded the Converter class.\r\n            assertInstanceOf(Converter.class, newFloatConverter, \"Converter loader via child does not implement parent type\");\r\n            // this converter registration will only apply to the\r\n            // componentLoader classloader...\r\n            ConvertUtils.register((Converter) newFloatConverter, Float.TYPE);\r\n            // After registering a custom converter, lookup should return\r\n            // it back to us. We'll try this lookup again with a different\r\n            // context-classloader set, and shouldn't see it\r\n            final Converter<Float> componentConverter = ConvertUtils.lookup(Float.TYPE);\r\n            assertSame(componentConverter.getClass().getClassLoader(), componentLoader);\r\n            newFloatConverter = null;\r\n        }\r\n        Thread.currentThread().setContextClassLoader(origContextClassLoader);\r\n        // Because the context classloader has been reset, we shouldn't\r\n        // see the custom registered converter here...\r\n        final Converter<Float> sharedConverter = ConvertUtils.lookup(Float.TYPE);\r\n        assertFalse(sharedConverter.getClass().getClassLoader() == componentLoader);\r\n        // and here we should see it again\r\n        Thread.currentThread().setContextClassLoader(componentLoader);\r\n        {\r\n            final Converter<Float> componentConverter = ConvertUtils.lookup(Float.TYPE);\r\n            assertSame(componentConverter.getClass().getClassLoader(), componentLoader);\r\n        }\r\n        Thread.currentThread().setContextClassLoader(origContextClassLoader);\r\n        // Emulate a container \"undeploying\" the component. This should\r\n        // make component loader available for garbage collection (we hope)\r\n        final WeakReference<ClassLoader> weakRefToComponent = new WeakReference<>(componentLoader);\r\n        componentLoader = null;\r\n        // force garbage collection and verify that the componentLoader\r\n        // has been garbage-collected\r\n        forceGarbageCollection(weakRefToComponent);\r\n        assertNull(weakRefToComponent.get(), \"Component classloader did not release properly; memory leak present\");\r\n    } finally {\r\n        // Restore context classloader that was present before this\r\n        // test started. It is expected to be the same as the system\r\n        // classloader, but we handle all cases here.\r\n        Thread.currentThread().setContextClassLoader(origContextClassLoader);\r\n        // and restore all the standard converters\r\n        ConvertUtils.deregister();\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\converters\\MemoryTest.java",
  "methodName" : "testComponentRegistersStandardConverter",
  "sourceCode" : "/**\r\n * Test whether registering a standard Converter instance while a custom context classloader is set causes a memory leak.\r\n *\r\n * <p>\r\n * This test emulates a j2ee container where BeanUtils has been loaded from a \"common\" lib location that is shared across all components running within the\r\n * container. The \"component\" registers a converter object, whose class was loaded from the \"common\" lib location. The registered converter:\r\n * <ul>\r\n * <li>should not be visible to other components; and</li>\r\n * <li>should not prevent the component-specific classloader from being garbage-collected when the container sets its reference to null.\r\n * </ul>\r\n */\r\n@Test\r\nvoid testComponentRegistersStandardConverter() throws Exception {\r\n    final ClassLoader origContextClassLoader = Thread.currentThread().getContextClassLoader();\r\n    try {\r\n        // sanity check; who's paranoid?? :-)\r\n        assertEquals(origContextClassLoader, ConvertUtils.class.getClassLoader());\r\n        // create a custom classloader for a \"component\"\r\n        // just like a container would.\r\n        ClassLoader componentLoader1 = new ClassLoader() {\r\n        };\r\n        final ClassLoader componentLoader2 = new ClassLoader() {\r\n        };\r\n        final Converter<Float> origFloatConverter = ConvertUtils.lookup(Float.TYPE);\r\n        final Converter<Float> floatConverter1 = new FloatConverter();\r\n        // Emulate the container invoking a component #1, and the component\r\n        // registering a custom converter instance whose class is\r\n        // available via the \"shared\" classloader.\r\n        Thread.currentThread().setContextClassLoader(componentLoader1);\r\n        {\r\n            // here we pretend we're running inside component #1\r\n            // When we first do a ConvertUtils operation inside a custom\r\n            // classloader, we get a completely fresh copy of the\r\n            // ConvertUtilsBean, with all-new Converter objects in it.\r\n            assertFalse(ConvertUtils.lookup(Float.TYPE) == origFloatConverter);\r\n            // Now we register a custom converter (but of a standard class).\r\n            // This should only affect code that runs with exactly the\r\n            // same context classloader set.\r\n            ConvertUtils.register(floatConverter1, Float.TYPE);\r\n            assertSame(ConvertUtils.lookup(Float.TYPE), floatConverter1);\r\n        }\r\n        Thread.currentThread().setContextClassLoader(origContextClassLoader);\r\n        // The converter visible outside any custom component should not\r\n        // have been altered.\r\n        assertSame(ConvertUtils.lookup(Float.TYPE), origFloatConverter);\r\n        // Emulate the container invoking a component #2.\r\n        Thread.currentThread().setContextClassLoader(componentLoader2);\r\n        {\r\n            // here we pretend we're running inside component #2\r\n            // we should get a completely fresh ConvertUtilsBean, with\r\n            // all-new Converter objects again.\r\n            assertFalse(ConvertUtils.lookup(Float.TYPE) == origFloatConverter);\r\n            assertFalse(ConvertUtils.lookup(Float.TYPE) == floatConverter1);\r\n        }\r\n        Thread.currentThread().setContextClassLoader(origContextClassLoader);\r\n        // Emulate a container \"undeploying\" component #1. This should\r\n        // make component loader available for garbage collection (we hope)\r\n        final WeakReference<ClassLoader> weakRefToComponent1 = new WeakReference<>(componentLoader1);\r\n        componentLoader1 = null;\r\n        // force garbage collection and verify that the componentLoader\r\n        // has been garbage-collected\r\n        forceGarbageCollection(weakRefToComponent1);\r\n        assertNull(weakRefToComponent1.get(), \"Component classloader did not release properly; memory leak present\");\r\n    } finally {\r\n        // Restore context classloader that was present before this\r\n        // test started, so that in case of a test failure we don't stuff\r\n        // up later tests...\r\n        Thread.currentThread().setContextClassLoader(origContextClassLoader);\r\n        // and restore all the standard converters\r\n        ConvertUtils.deregister();\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\converters\\MemoryTest.java",
  "methodName" : "testWeakReference",
  "sourceCode" : "@Test\r\nvoid testWeakReference() throws Exception {\r\n    final ClassLoader origContextClassLoader = Thread.currentThread().getContextClassLoader();\r\n    try {\r\n        ClassReloader componentLoader = new ClassReloader(origContextClassLoader);\r\n        Thread.currentThread().setContextClassLoader(componentLoader);\r\n        Thread.currentThread().setContextClassLoader(origContextClassLoader);\r\n        final WeakReference<ClassLoader> ref = new WeakReference<>(componentLoader);\r\n        componentLoader = null;\r\n        forceGarbageCollection(ref);\r\n        assertNull(ref.get());\r\n    } finally {\r\n        // Restore context classloader that was present before this\r\n        // test started. It is expected to be the same as the system\r\n        // classloader, but we handle all cases here.\r\n        Thread.currentThread().setContextClassLoader(origContextClassLoader);\r\n        // and restore all the standard converters\r\n        ConvertUtils.deregister();\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\converters\\MonthDayConverterTest.java",
  "methodName" : "testSimpleConversion",
  "sourceCode" : "@Test\r\nvoid testSimpleConversion() throws Exception {\r\n    final String[] message = { \"from String\", \"from String\", \"from String\", \"from String\", \"from String\", \"from String\", \"from String\", \"from String\" };\r\n    final Object[] input = { \"--12-03\", \"--05-30\", \"--01-01\" };\r\n    final MonthDay[] expected = { MonthDay.parse(\"--12-03\"), MonthDay.parse(\"--05-30\"), MonthDay.parse(\"--01-01\") };\r\n    for (int i = 0; i < expected.length; i++) {\r\n        assertEquals(expected[i], converter.convert(MonthDay.class, input[i]), message[i] + \" to URI\");\r\n        assertEquals(expected[i], converter.convert(null, input[i]), message[i] + \" to null type\");\r\n    }\r\n    for (int i = 0; i < expected.length; i++) {\r\n        assertEquals(input[i], converter.convert(String.class, expected[i]), input[i] + \" to String\");\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\converters\\MonthDayConverterTest.java",
  "methodName" : "testUnsupportedType",
  "sourceCode" : "/**\r\n * Tests a conversion to an unsupported type.\r\n */\r\n@Test\r\nvoid testUnsupportedType() {\r\n    assertThrows(ConversionException.class, () -> converter.convert(Integer.class, \"http://www.apache.org\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\converters\\OffsetTimeConverterTest.java",
  "methodName" : "testSimpleConversion",
  "sourceCode" : "@Test\r\nvoid testSimpleConversion() throws Exception {\r\n    final String[] message = { \"from String\", \"from String\", \"from String\", \"from String\", \"from String\", \"from String\", \"from String\", \"from String\" };\r\n    final Object[] input = { \"10:15+01:00\", \"08:45:30+14:00\" };\r\n    final OffsetTime[] expected = { OffsetTime.parse(\"10:15+01:00\"), OffsetTime.parse(\"08:45:30+14:00\") };\r\n    for (int i = 0; i < expected.length; i++) {\r\n        assertEquals(expected[i], converter.convert(OffsetTime.class, input[i]), message[i] + \" to URI\");\r\n        assertEquals(expected[i], converter.convert(null, input[i]), message[i] + \" to null type\");\r\n    }\r\n    for (int i = 0; i < expected.length; i++) {\r\n        assertEquals(input[i], converter.convert(String.class, expected[i]), input[i] + \" to String\");\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\converters\\OffsetTimeConverterTest.java",
  "methodName" : "testUnsupportedType",
  "sourceCode" : "/**\r\n * Tests a conversion to an unsupported type.\r\n */\r\n@Test\r\nvoid testUnsupportedType() {\r\n    assertThrows(ConversionException.class, () -> converter.convert(Integer.class, \"http://www.apache.org\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\converters\\PathConverterTest.java",
  "methodName" : "testSimpleConversion",
  "sourceCode" : "@Test\r\nvoid testSimpleConversion() throws Exception {\r\n    final String[] message = { \"from String\", \"from String\", \"from String\", \"from String\", \"from String\", \"from String\", \"from String\", \"from String\" };\r\n    // get the separator so test works on Windows or *nix\r\n    final String separator = File.pathSeparator;\r\n    final Object[] input = { separator + \"foo\" + separator + \"bar\" + separator + \"baz\", separator };\r\n    final Path[] expected = { Paths.get(separator + \"foo\" + separator + \"bar\" + separator + \"baz\"), Paths.get(separator) };\r\n    for (int i = 0; i < expected.length; i++) {\r\n        assertEquals(expected[i], converter.convert(Path.class, input[i]), message[i] + \" to URI\");\r\n        assertEquals(expected[i], converter.convert(null, input[i]), message[i] + \" to null type\");\r\n    }\r\n    for (int i = 0; i < expected.length; i++) {\r\n        assertEquals(input[i], converter.convert(String.class, expected[i]), input[i] + \" to String\");\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\converters\\PathConverterTest.java",
  "methodName" : "testUnsupportedType",
  "sourceCode" : "/**\r\n * Tests a conversion to an unsupported type.\r\n */\r\n@Test\r\nvoid testUnsupportedType() {\r\n    assertThrows(ConversionException.class, () -> converter.convert(Integer.class, \"http://www.apache.org\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\converters\\PatternConverterTest.java",
  "methodName" : "testConvertingPattern",
  "sourceCode" : "@Test\r\nvoid testConvertingPattern() {\r\n    final String expected = \"(?i)Ow.+O\";\r\n    final String actual = converter.convert(Pattern.class, \"(?i)Ow.+O\").toString();\r\n    assertEquals(expected, actual);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\converters\\PeriodConverterTest.java",
  "methodName" : "testSimpleConversion",
  "sourceCode" : "@Test\r\nvoid testSimpleConversion() throws Exception {\r\n    final String[] message = { \"from String\", \"from String\", \"from String\", \"from String\", \"from String\", \"from String\", \"from String\", \"from String\" };\r\n    final Object[] input = { \"P2Y\", \"P5D\", \"P1Y2M3D\" };\r\n    final Period[] expected = { Period.parse(\"P2Y\"), Period.parse(\"P5D\"), Period.parse(\"P1Y2M3D\") };\r\n    for (int i = 0; i < expected.length; i++) {\r\n        assertEquals(expected[i], converter.convert(Period.class, input[i]), message[i] + \" to URI\");\r\n        assertEquals(expected[i], converter.convert(null, input[i]), message[i] + \" to null type\");\r\n    }\r\n    for (int i = 0; i < expected.length; i++) {\r\n        assertEquals(input[i], converter.convert(String.class, expected[i]), input[i] + \" to String\");\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\converters\\PeriodConverterTest.java",
  "methodName" : "testUnsupportedType",
  "sourceCode" : "/**\r\n * Tests a conversion to an unsupported type.\r\n */\r\n@Test\r\nvoid testUnsupportedType() {\r\n    assertThrows(ConversionException.class, () -> converter.convert(Integer.class, \"http://www.apache.org\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\converters\\PointConverterTest.java",
  "methodName" : "testConvertingNoSpace",
  "sourceCode" : "@Test\r\nvoid testConvertingNoSpace() {\r\n    final Point expected = new Point(100, 200);\r\n    final Point actual = converter.convert(Point.class, \"(100,200)\");\r\n    assertEquals(expected, actual);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\converters\\PointConverterTest.java",
  "methodName" : "testConvertingPoint",
  "sourceCode" : "@Test\r\nvoid testConvertingPoint() {\r\n    final Point expected = new Point(100, 200);\r\n    final Point actual = converter.convert(Point.class, \"(100, 200)\");\r\n    assertEquals(expected, actual);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\converters\\ShortConverterTest.java",
  "methodName" : "testInvalidAmount",
  "sourceCode" : "/**\r\n * Test Invalid Amounts (too big/small)\r\n */\r\n@Test\r\nvoid testInvalidAmount() {\r\n    final Converter<Short> converter = makeConverter();\r\n    final Class<?> clazz = Short.class;\r\n    final Long min = Long.valueOf(Short.MIN_VALUE);\r\n    final Long max = Long.valueOf(Short.MAX_VALUE);\r\n    final Long minMinusOne = Long.valueOf(min.longValue() - 1);\r\n    final Long maxPlusOne = Long.valueOf(max.longValue() + 1);\r\n    // Minimum\r\n    assertEquals(Short.valueOf(Short.MIN_VALUE), converter.convert(clazz, min), \"Minimum\");\r\n    // Maximum\r\n    assertEquals(Short.valueOf(Short.MAX_VALUE), converter.convert(clazz, max), \"Maximum\");\r\n    // Too Small\r\n    assertThrows(ConversionException.class, () -> converter.convert(clazz, minMinusOne), \"Less than minimum, expected ConversionException\");\r\n    // Too Large\r\n    assertThrows(ConversionException.class, () -> converter.convert(clazz, maxPlusOne), \"More than maximum, expected ConversionException\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\converters\\ShortConverterTest.java",
  "methodName" : "testSimpleConversion",
  "sourceCode" : "@Test\r\nvoid testSimpleConversion() throws Exception {\r\n    final String[] message = { \"from String\", \"from String\", \"from String\", \"from String\", \"from String\", \"from String\", \"from String\", \"from Byte\", \"from Short\", \"from Integer\", \"from Long\", \"from Float\", \"from Double\" };\r\n    final Object[] input = { String.valueOf(Short.MIN_VALUE), \"-17\", \"-1\", \"0\", \"1\", \"17\", String.valueOf(Short.MAX_VALUE), Byte.valueOf((byte) 7), Short.valueOf((short) 8), Integer.valueOf(9), Long.valueOf(10), Float.valueOf((float) 11.1), Double.valueOf(12.2) };\r\n    final Short[] expected = { Short.valueOf(Short.MIN_VALUE), Short.valueOf((short) -17), Short.valueOf((short) -1), Short.valueOf((short) 0), Short.valueOf((short) 1), Short.valueOf((short) 17), Short.valueOf(Short.MAX_VALUE), Short.valueOf((short) 7), Short.valueOf((short) 8), Short.valueOf((short) 9), Short.valueOf((short) 10), Short.valueOf((short) 11), Short.valueOf((short) 12) };\r\n    for (int i = 0; i < expected.length; i++) {\r\n        assertEquals(expected[i], converter.convert(Short.class, input[i]), message[i] + \" to Short\");\r\n        assertEquals(expected[i], converter.convert(Short.TYPE, input[i]), message[i] + \" to short\");\r\n        assertEquals(expected[i], converter.convert(null, input[i]), message[i] + \" to null type\");\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\converters\\ShortLocaleConverterTest.java",
  "methodName" : "testConstructor_2",
  "sourceCode" : "/**\r\n * Test Converter() constructor\r\n *\r\n * Uses the default locale, no default value\r\n */\r\n@Test\r\nvoid testConstructor_2() {\r\n    // Construct using default locale\r\n    converter = ShortLocaleConverter.builder().get();\r\n    // Perform Tests\r\n    convertValueNoPattern(converter, defaultIntegerValue, expectedValue);\r\n    convertValueWithPattern(converter, defaultIntegerValue, defaultIntegerPattern, expectedValue);\r\n    convertInvalid(converter, null);\r\n    convertNull(converter, null);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\converters\\ShortLocaleConverterTest.java",
  "methodName" : "testConstructor_3",
  "sourceCode" : "/**\r\n * Test Converter(locPattern) constructor\r\n *\r\n * Uses the default locale, no default value\r\n */\r\n@Test\r\nvoid testConstructor_3() {\r\n    // Construct using localized pattern (default locale)\r\n    converter = ShortLocaleConverter.builder().setLocalizedPattern(true).get();\r\n    // Perform Tests\r\n    convertValueNoPattern(converter, defaultIntegerValue, expectedValue);\r\n    convertValueWithPattern(converter, defaultIntegerValue, defaultIntegerPattern, expectedValue);\r\n    convertInvalid(converter, null);\r\n    convertNull(converter, null);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\converters\\ShortLocaleConverterTest.java",
  "methodName" : "testConstructor_4",
  "sourceCode" : "/**\r\n * Test Converter(Locale) constructor\r\n */\r\n@Test\r\nvoid testConstructor_4() {\r\n    // Construct using specified Locale\r\n    converter = ShortLocaleConverter.builder().setLocale(localizedLocale).get();\r\n    // Perform Tests\r\n    convertValueNoPattern(converter, localizedIntegerValue, expectedValue);\r\n    convertValueWithPattern(converter, localizedIntegerValue, defaultIntegerPattern, expectedValue);\r\n    convertInvalid(converter, null);\r\n    convertNull(converter, null);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\converters\\ShortLocaleConverterTest.java",
  "methodName" : "testConstructor_5",
  "sourceCode" : "/**\r\n * Test Converter(Locale, locPattern) constructor\r\n */\r\n@Test\r\nvoid testConstructor_5() {\r\n    // Construct using specified Locale\r\n    converter = ShortLocaleConverter.builder().setLocale(localizedLocale).setLocalizedPattern(true).get();\r\n    // Perform Tests\r\n    convertValueNoPattern(converter, localizedIntegerValue, expectedValue);\r\n    convertValueWithPattern(converter, localizedIntegerValue, localizedIntegerPattern, expectedValue);\r\n    convertInvalid(converter, null);\r\n    convertNull(converter, null);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\converters\\ShortLocaleConverterTest.java",
  "methodName" : "testConstructor_6",
  "sourceCode" : "/**\r\n * Test Converter(Locale, pattern) constructor\r\n */\r\n@Test\r\nvoid testConstructor_6() {\r\n    // Construct using specified Locale\r\n    converter = ShortLocaleConverter.builder().setLocale(localizedLocale).setPattern(defaultIntegerPattern).get();\r\n    // Perform Tests\r\n    convertValueNoPattern(converter, localizedIntegerValue, expectedValue);\r\n    convertValueWithPattern(converter, localizedIntegerValue, defaultIntegerPattern, expectedValue);\r\n    convertInvalid(converter, null);\r\n    convertNull(converter, null);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\converters\\ShortLocaleConverterTest.java",
  "methodName" : "testConstructor_7",
  "sourceCode" : "/**\r\n * Test Converter(Locale, pattern, locPattern) constructor\r\n */\r\n@Test\r\nvoid testConstructor_7() {\r\n    // Construct using specified Locale\r\n    converter = ShortLocaleConverter.builder().setLocale(localizedLocale).setPattern(localizedIntegerPattern).setLocalizedPattern(true).get();\r\n    // Perform Tests\r\n    convertValueNoPattern(converter, localizedIntegerValue, expectedValue);\r\n    convertValueWithPattern(converter, localizedIntegerValue, localizedIntegerPattern, expectedValue);\r\n    convertInvalid(converter, null);\r\n    convertNull(converter, null);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\converters\\ShortLocaleConverterTest.java",
  "methodName" : "testConstructor_8",
  "sourceCode" : "/**\r\n * Test Converter(defaultValue) constructor\r\n */\r\n@Test\r\nvoid testConstructor_8() {\r\n    // Construct using specified Locale\r\n    converter = ShortLocaleConverter.builder().setDefault(defaultValue).get();\r\n    // Perform Tests\r\n    convertValueNoPattern(converter, defaultIntegerValue, expectedValue);\r\n    convertValueWithPattern(converter, defaultIntegerValue, defaultIntegerPattern, expectedValue);\r\n    convertInvalid(converter, defaultValue);\r\n    convertNull(converter, defaultValue);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\converters\\ShortLocaleConverterTest.java",
  "methodName" : "testConstructor_9",
  "sourceCode" : "/**\r\n * Test Converter(defaultValue, locPattern) constructor\r\n */\r\n@Test\r\nvoid testConstructor_9() {\r\n    // Construct using specified Locale\r\n    converter = ShortLocaleConverter.builder().setDefault(defaultValue).setLocalizedPattern(true).get();\r\n    // Perform Tests\r\n    convertValueNoPattern(converter, defaultIntegerValue, expectedValue);\r\n    convertValueWithPattern(converter, defaultIntegerValue, defaultIntegerPattern, expectedValue);\r\n    convertInvalid(converter, defaultValue);\r\n    convertNull(converter, defaultValue);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\converters\\ShortLocaleConverterTest.java",
  "methodName" : "testConstructorMain",
  "sourceCode" : "/**\r\n * Test Converter(defaultValue, locale, pattern, localizedPattern) constructor\r\n */\r\n@Test\r\nvoid testConstructorMain() {\r\n    // Construct with localized pattern\r\n    converter = ShortLocaleConverter.builder().setDefault(defaultValue).setLocale(localizedLocale).setPattern(localizedIntegerPattern).setLocalizedPattern(true).get();\r\n    convertValueNoPattern(converter, \"(A)\", localizedIntegerValue, expectedValue);\r\n    convertValueWithPattern(converter, \"(A)\", localizedIntegerValue, localizedIntegerPattern, expectedValue);\r\n    convertInvalid(converter, \"(A)\", defaultValue);\r\n    convertNull(converter, \"(A)\", defaultValue);\r\n    // **************************************************************************\r\n    // Convert value in the wrong format - maybe you would expect it to throw an\r\n    // exception and return the default - it doesn't, DecimalFormat parses it\r\n    // quite happily turning \"1,234\" into \"1\"\r\n    // I guess this is one of the limitations of DecimalFormat\r\n    // **************************************************************************\r\n    convertValueNoPattern(converter, \"(B)\", defaultIntegerValue, Short.valueOf(\"1\"));\r\n    // **************************************************************************\r\n    // Convert with non-localized pattern - unlike the equivalent BigDecimal Test Case\r\n    // it doesn't causes an exception in parse() - DecimalFormat parses it\r\n    // quite happily turning \"1,234\" into \"1\"\r\n    // Again this is one of the limitations of DecimalFormat\r\n    // **************************************************************************\r\n    convertValueWithPattern(converter, \"(B)\", localizedIntegerValue, defaultIntegerPattern, Short.valueOf(\"1\"));\r\n    // **************************************************************************\r\n    // Convert with specified type\r\n    //\r\n    // BaseLocaleConverter completely ignores the type - so even if we specify\r\n    // Double.class here it still returns a Short.\r\n    // **** This has been changed due to BEANUTILS-449 ****\r\n    // **************************************************************************\r\n    // convertValueToType(converter, \"(B)\", Double.class, localizedIntegerValue, localizedIntegerPattern, expectedValue);\r\n    // Construct with non-localized pattern\r\n    converter = ShortLocaleConverter.builder().setDefault(defaultValue).setLocale(localizedLocale).setPattern(defaultIntegerPattern).setLocalizedPattern(false).get();\r\n    convertValueNoPattern(converter, \"(C)\", localizedIntegerValue, expectedValue);\r\n    convertValueWithPattern(converter, \"(C)\", localizedIntegerValue, defaultIntegerPattern, expectedValue);\r\n    convertInvalid(converter, \"(C)\", defaultValue);\r\n    convertNull(converter, \"(C)\", defaultValue);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\converters\\StringConverterTest.java",
  "methodName" : "testConvertToTypeString",
  "sourceCode" : "/**\r\n * Tests a conversion to a string type.\r\n */\r\n@Test\r\nvoid testConvertToTypeString() {\r\n    final Object value = new Object();\r\n    final String strVal = converter.convert(String.class, value);\r\n    assertEquals(value.toString(), strVal, \"Wrong conversion result\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\converters\\StringConverterTest.java",
  "methodName" : "testDefaultType",
  "sourceCode" : "/**\r\n * Tests whether the correct default type is returned.\r\n */\r\n@Test\r\nvoid testDefaultType() {\r\n    assertEquals(String.class, converter.getDefaultType(), \"Wrong default type\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\converters\\URIConverterTest.java",
  "methodName" : "testSimpleConversion",
  "sourceCode" : "@Test\r\nvoid testSimpleConversion() throws Exception {\r\n    final String[] message = { \"from String\", \"from String\", \"from String\", \"from String\", \"from String\", \"from String\", \"from String\", \"from String\" };\r\n    final Object[] input = { \"http://www.apache.org\", \"http://www.apache.org/\", \"ftp://cvs.apache.org\", \"file://project.xml\", \"http://208.185.179.12\", \"http://www.apache.org:9999/test/thing\", \"http://user:admin@www.apache.org:50/one/two.three\", \"http://notreal.apache.org\" };\r\n    final URI[] expected = { new URI(\"http://www.apache.org\"), new URI(\"http://www.apache.org/\"), new URI(\"ftp://cvs.apache.org\"), new URI(\"file://project.xml\"), new URI(\"http://208.185.179.12\"), new URI(\"http://www.apache.org:9999/test/thing\"), new URI(\"http://user:admin@www.apache.org:50/one/two.three\"), new URI(\"http://notreal.apache.org\") };\r\n    for (int i = 0; i < expected.length; i++) {\r\n        assertEquals(expected[i], converter.convert(URI.class, input[i]), message[i] + \" to URI\");\r\n        assertEquals(expected[i], converter.convert(null, input[i]), message[i] + \" to null type\");\r\n    }\r\n    for (int i = 0; i < expected.length; i++) {\r\n        assertEquals(input[i], converter.convert(String.class, expected[i]), input[i] + \" to String\");\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\converters\\URIConverterTest.java",
  "methodName" : "testUnsupportedType",
  "sourceCode" : "/**\r\n * Tests a conversion to an unsupported type.\r\n */\r\n@Test\r\nvoid testUnsupportedType() {\r\n    assertThrows(ConversionException.class, () -> converter.convert(Integer.class, \"http://www.apache.org\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\converters\\URLConverterTest.java",
  "methodName" : "testSimpleConversion",
  "sourceCode" : "@Test\r\nvoid testSimpleConversion() {\r\n    final String[] input = { \"http://www.apache.org\", \"http://www.apache.org/\", \"ftp://cvs.apache.org\", \"file://project.xml\", \"http://208.185.179.12\", \"http://www.apache.org:9999/test/thing\", \"http://user:admin@www.apache.org:50/one/two.three\", \"http://notreal.apache.org\", \"http://notreal.apache.org/test/file.xml#计算机图形学\", \"http://notreal.apache.org/test/file.xml#%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9B%BE%E5%BD%A2%E5%AD%A6\" };\r\n    for (final String urlString : input) {\r\n        assertEquals(urlString, converter.convert(URL.class, urlString).toString(), \"from String to URL\");\r\n        assertEquals(urlString, converter.convert(null, urlString).toString(), \"from String to null type\");\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\converters\\UUIDConverterTest.java",
  "methodName" : "testSimpleConversion",
  "sourceCode" : "@Test\r\nvoid testSimpleConversion() throws Exception {\r\n    final String[] message = { \"from String\", \"from String\", \"from String\", \"from String\", \"from String\", \"from String\", \"from String\", \"from String\" };\r\n    final Object[] input = { \"123e4567-e89b-12d3-a456-556642440000\", \"7dc53df5-703e-49b3-8670-b1c468f47f1f\" };\r\n    final UUID[] expected = { UUID.fromString(\"123e4567-e89b-12d3-a456-556642440000\"), UUID.fromString(\"7dc53df5-703e-49b3-8670-b1c468f47f1f\") };\r\n    for (int i = 0; i < expected.length; i++) {\r\n        assertEquals(expected[i], converter.convert(UUID.class, input[i]), message[i] + \" to URI\");\r\n        assertEquals(expected[i], converter.convert(null, input[i]), message[i] + \" to null type\");\r\n    }\r\n    for (int i = 0; i < expected.length; i++) {\r\n        assertEquals(input[i], converter.convert(String.class, expected[i]), input[i] + \" to String\");\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\converters\\UUIDConverterTest.java",
  "methodName" : "testUnsupportedType",
  "sourceCode" : "/**\r\n * Tests a conversion to an unsupported type.\r\n */\r\n@Test\r\nvoid testUnsupportedType() {\r\n    assertThrows(ConversionException.class, () -> converter.convert(Integer.class, \"http://www.apache.org\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\converters\\YearConverterTest.java",
  "methodName" : "testSimpleConversion",
  "sourceCode" : "@Test\r\nvoid testSimpleConversion() throws Exception {\r\n    final String[] message = { \"from String\", \"from String\", \"from String\", \"from String\", \"from String\", \"from String\", \"from String\", \"from String\" };\r\n    final Object[] input = { \"2019\", \"1974\", \"2112\" };\r\n    final Year[] expected = { Year.parse(\"2019\"), Year.parse(\"1974\"), Year.parse(\"2112\") };\r\n    for (int i = 0; i < expected.length; i++) {\r\n        assertEquals(expected[i], converter.convert(Year.class, input[i]), message[i] + \" to URI\");\r\n        assertEquals(expected[i], converter.convert(null, input[i]), message[i] + \" to null type\");\r\n    }\r\n    for (int i = 0; i < expected.length; i++) {\r\n        assertEquals(input[i], converter.convert(String.class, expected[i]), input[i] + \" to String\");\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\converters\\YearConverterTest.java",
  "methodName" : "testUnsupportedType",
  "sourceCode" : "/**\r\n * Tests a conversion to an unsupported type.\r\n */\r\n@Test\r\nvoid testUnsupportedType() {\r\n    assertThrows(ConversionException.class, () -> converter.convert(Integer.class, \"http://www.apache.org\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\converters\\YearMonthConverterTest.java",
  "methodName" : "testSimpleConversion",
  "sourceCode" : "@Test\r\nvoid testSimpleConversion() throws Exception {\r\n    final String[] message = { \"from String\", \"from String\", \"from String\", \"from String\", \"from String\", \"from String\", \"from String\", \"from String\" };\r\n    final Object[] input = { \"2007-12\", \"1974-05\", \"2112-01\" };\r\n    final YearMonth[] expected = { YearMonth.parse(\"2007-12\"), YearMonth.parse(\"1974-05\"), YearMonth.parse(\"2112-01\") };\r\n    for (int i = 0; i < expected.length; i++) {\r\n        assertEquals(expected[i], converter.convert(YearMonth.class, input[i]), message[i] + \" to URI\");\r\n        assertEquals(expected[i], converter.convert(null, input[i]), message[i] + \" to null type\");\r\n    }\r\n    for (int i = 0; i < expected.length; i++) {\r\n        assertEquals(input[i], converter.convert(String.class, expected[i]), input[i] + \" to String\");\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\converters\\YearMonthConverterTest.java",
  "methodName" : "testUnsupportedType",
  "sourceCode" : "/**\r\n * Tests a conversion to an unsupported type.\r\n */\r\n@Test\r\nvoid testUnsupportedType() {\r\n    assertThrows(ConversionException.class, () -> converter.convert(Integer.class, \"http://www.apache.org\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\converters\\ZoneIdConverterTest.java",
  "methodName" : "testSimpleConversion",
  "sourceCode" : "@Test\r\nvoid testSimpleConversion() throws Exception {\r\n    final String[] message = { \"from String\", \"from String\", \"from String\", \"from String\", \"from String\", \"from String\", \"from String\", \"from String\" };\r\n    final Object[] input = { \"America/New_York\", \"-05:00\", \"Australia/Sydney\" };\r\n    final ZoneId[] expected = { ZoneId.of(\"America/New_York\"), ZoneId.of(\"-05:00\"), ZoneId.of(\"Australia/Sydney\") };\r\n    for (int i = 0; i < expected.length; i++) {\r\n        assertEquals(expected[i], converter.convert(ZoneId.class, input[i]), message[i] + \" to URI\");\r\n        assertEquals(expected[i], converter.convert(null, input[i]), message[i] + \" to null type\");\r\n    }\r\n    for (int i = 0; i < expected.length; i++) {\r\n        assertEquals(input[i], converter.convert(String.class, expected[i]), input[i] + \" to String\");\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\converters\\ZoneIdConverterTest.java",
  "methodName" : "testUnsupportedType",
  "sourceCode" : "/**\r\n * Tests a conversion to an unsupported type.\r\n */\r\n@Test\r\nvoid testUnsupportedType() {\r\n    assertThrows(ConversionException.class, () -> converter.convert(Integer.class, \"http://www.apache.org\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\converters\\ZoneOffsetConverterTest.java",
  "methodName" : "testSimpleConversion",
  "sourceCode" : "@Test\r\nvoid testSimpleConversion() throws Exception {\r\n    final String[] message = { \"from String\", \"from String\", \"from String\", \"from String\", \"from String\", \"from String\", \"from String\", \"from String\" };\r\n    final Object[] input = { \"-12:00\", \"+14:00\", \"+02:00\" };\r\n    final ZoneOffset[] expected = { ZoneOffset.of(\"-12:00\"), ZoneOffset.of(\"+14:00\"), ZoneOffset.of(\"+02:00\") };\r\n    for (int i = 0; i < expected.length; i++) {\r\n        assertEquals(expected[i], converter.convert(ZoneOffset.class, input[i]), message[i] + \" to URI\");\r\n        assertEquals(expected[i], converter.convert(null, input[i]), message[i] + \" to null type\");\r\n    }\r\n    for (int i = 0; i < expected.length; i++) {\r\n        assertEquals(input[i], converter.convert(String.class, expected[i]), input[i] + \" to String\");\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\converters\\ZoneOffsetConverterTest.java",
  "methodName" : "testUnsupportedType",
  "sourceCode" : "/**\r\n * Tests a conversion to an unsupported type.\r\n */\r\n@Test\r\nvoid testUnsupportedType() {\r\n    assertThrows(ConversionException.class, () -> converter.convert(ConversionException.class, \"http://www.apache.org\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\ConvertUtilsTest.java",
  "methodName" : "testConvertToString",
  "sourceCode" : "@Test\r\n@SuppressWarnings({ \"rawtypes\" })\r\n// We need to use raw types in order to test legacy converters\r\nvoid testConvertToString() throws Exception {\r\n    final Converter dummyConverter = (type, value) -> value;\r\n    final Converter fooConverter = (type, value) -> \"Foo-Converter\";\r\n    final DateConverter dateConverter = new DateConverter();\r\n    dateConverter.setLocale(Locale.US);\r\n    final ConvertUtilsBean utils = new ConvertUtilsBean();\r\n    utils.register(dateConverter, java.util.Date.class);\r\n    utils.register(fooConverter, String.class);\r\n    // Convert using registered DateConverter\r\n    final java.util.Date today = new java.util.Date();\r\n    final DateFormat fmt = new SimpleDateFormat(\"M/d/yy\");\r\n    /* US Short Format */\r\n    final String expected = fmt.format(today);\r\n    assertEquals(expected, utils.convert(today, String.class), \"DateConverter M/d/yy\");\r\n    // Date converter doesn't do String conversion - use String Converter\r\n    utils.register(dummyConverter, java.util.Date.class);\r\n    assertEquals(\"Foo-Converter\", utils.convert(today, String.class), \"Date Converter doesn't do String conversion\");\r\n    // No registered Date converter - use String Converter\r\n    utils.deregister(java.util.Date.class);\r\n    assertEquals(\"Foo-Converter\", utils.convert(today, String.class), \"No registered Date converter\");\r\n    // String Converter doesn't do Strings!!!\r\n    utils.register(dummyConverter, String.class);\r\n    assertEquals(today.toString(), utils.convert(today, String.class), \"String Converter doesn't do Strings!!!\");\r\n    // No registered Date or String converter - use Object's toString()\r\n    utils.deregister(String.class);\r\n    assertEquals(today.toString(), utils.convert(today, String.class), \"Object's toString()\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\ConvertUtilsTest.java",
  "methodName" : "testConvertUnsupportedTargetType",
  "sourceCode" : "/**\r\n * Tests a conversion to an unsupported target type.\r\n */\r\n@Test\r\nvoid testConvertUnsupportedTargetType() {\r\n    final ConvertUtilsBean utils = new ConvertUtilsBean();\r\n    final Object value = \"A test value\";\r\n    assertSame(value, utils.convert(value, getClass()), \"Got different object\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\ConvertUtilsTest.java",
  "methodName" : "testDeregisteringSingleConverter",
  "sourceCode" : "@Test\r\nvoid testDeregisteringSingleConverter() throws Exception {\r\n    // make sure that the test work ok before anything's changed\r\n    final Object value = ConvertUtils.convert(\"true\", Boolean.TYPE);\r\n    assertInstanceOf(Boolean.class, value);\r\n    assertEquals(((Boolean) value).booleanValue(), true, \"Standard conversion failed (1)\");\r\n    // we'll test deregister\r\n    ConvertUtils.deregister(Boolean.TYPE);\r\n    assertNull(ConvertUtils.lookup(Boolean.TYPE), \"Converter should be null\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\ConvertUtilsTest.java",
  "methodName" : "testNegativeIntegerArray",
  "sourceCode" : "/**\r\n * Negative String to primitive integer array tests.\r\n */\r\n@Test\r\nvoid testNegativeIntegerArray() {\r\n    Object value;\r\n    final int[] intArray = {};\r\n    value = ConvertUtils.convert((String) null, intArray.getClass());\r\n    checkIntegerArray(value, intArray);\r\n    value = ConvertUtils.convert(\"a\", intArray.getClass());\r\n    checkIntegerArray(value, intArray);\r\n    value = ConvertUtils.convert(\"{ a }\", intArray.getClass());\r\n    checkIntegerArray(value, intArray);\r\n    value = ConvertUtils.convert(\"1a3\", intArray.getClass());\r\n    checkIntegerArray(value, intArray);\r\n    value = ConvertUtils.convert(\"{ 1a3 }\", intArray.getClass());\r\n    checkIntegerArray(value, intArray);\r\n    value = ConvertUtils.convert(\"0,1a3\", intArray.getClass());\r\n    checkIntegerArray(value, intArray);\r\n    value = ConvertUtils.convert(\"{ 0, 1a3 }\", intArray.getClass());\r\n    checkIntegerArray(value, intArray);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\ConvertUtilsTest.java",
  "methodName" : "testNegativeScalar",
  "sourceCode" : "/**\r\n * Negative scalar conversion tests. These rely on the standard default value conversions in ConvertUtils.\r\n */\r\n@Test\r\nvoid testNegativeScalar() {\r\n    Object value;\r\n    value = ConvertUtils.convert(\"foo\", Boolean.TYPE);\r\n    assertInstanceOf(Boolean.class, value);\r\n    assertEquals(((Boolean) value).booleanValue(), false);\r\n    value = ConvertUtils.convert(\"foo\", Boolean.class);\r\n    assertInstanceOf(Boolean.class, value);\r\n    assertEquals(((Boolean) value).booleanValue(), false);\r\n    value = ConvertUtils.convert(\"foo\", Byte.TYPE);\r\n    assertInstanceOf(Byte.class, value);\r\n    assertEquals(((Byte) value).byteValue(), (byte) 0);\r\n    value = ConvertUtils.convert(\"foo\", Byte.class);\r\n    assertInstanceOf(Byte.class, value);\r\n    assertEquals(((Byte) value).byteValue(), (byte) 0);\r\n    assertThrows(ConversionException.class, () -> ConvertUtils.convert(\"org.apache.commons.beanutils2.Undefined\", Class.class));\r\n    value = ConvertUtils.convert(\"foo\", Double.TYPE);\r\n    assertInstanceOf(Double.class, value);\r\n    assertEquals(((Double) value).doubleValue(), 0.0, 0.005);\r\n    value = ConvertUtils.convert(\"foo\", Double.class);\r\n    assertInstanceOf(Double.class, value);\r\n    assertEquals(((Double) value).doubleValue(), 0.0, 0.005);\r\n    value = ConvertUtils.convert(\"foo\", Float.TYPE);\r\n    assertInstanceOf(Float.class, value);\r\n    assertEquals(((Float) value).floatValue(), (float) 0.0, (float) 0.005);\r\n    value = ConvertUtils.convert(\"foo\", Float.class);\r\n    assertInstanceOf(Float.class, value);\r\n    assertEquals(((Float) value).floatValue(), (float) 0.0, (float) 0.005);\r\n    value = ConvertUtils.convert(\"foo\", Integer.TYPE);\r\n    assertInstanceOf(Integer.class, value);\r\n    assertEquals(((Integer) value).intValue(), 0);\r\n    value = ConvertUtils.convert(\"foo\", Integer.class);\r\n    assertInstanceOf(Integer.class, value);\r\n    assertEquals(((Integer) value).intValue(), 0);\r\n    value = ConvertUtils.convert(\"foo\", Byte.TYPE);\r\n    assertInstanceOf(Byte.class, value);\r\n    assertEquals(((Byte) value).byteValue(), (byte) 0);\r\n    value = ConvertUtils.convert(\"foo\", Long.class);\r\n    assertInstanceOf(Long.class, value);\r\n    assertEquals(((Long) value).longValue(), 0);\r\n    value = ConvertUtils.convert(\"foo\", Short.TYPE);\r\n    assertInstanceOf(Short.class, value);\r\n    assertEquals(((Short) value).shortValue(), (short) 0);\r\n    value = ConvertUtils.convert(\"foo\", Short.class);\r\n    assertInstanceOf(Short.class, value);\r\n    assertEquals(((Short) value).shortValue(), (short) 0);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\ConvertUtilsTest.java",
  "methodName" : "testNegativeStringArray",
  "sourceCode" : "/**\r\n * Negative String to String array tests.\r\n */\r\n@Test\r\nvoid testNegativeStringArray() {\r\n    Object value;\r\n    final String[] stringArray = {};\r\n    value = ConvertUtils.convert((String) null, stringArray.getClass());\r\n    checkStringArray(value, stringArray);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\ConvertUtilsTest.java",
  "methodName" : "testObjectToStringArray",
  "sourceCode" : "/**\r\n * Test conversion of object to string for arrays.\r\n */\r\n@Test\r\nvoid testObjectToStringArray() {\r\n    final int[] intArray0 = {};\r\n    final int[] intArray1 = { 123 };\r\n    final int[] intArray2 = { 123, 456 };\r\n    final String[] stringArray0 = {};\r\n    final String[] stringArray1 = { \"abc\" };\r\n    final String[] stringArray2 = { \"abc\", \"def\" };\r\n    assertEquals(null, ConvertUtils.convert(intArray0), \"intArray0\");\r\n    assertEquals(\"123\", ConvertUtils.convert(intArray1), \"intArray1\");\r\n    assertEquals(\"123\", ConvertUtils.convert(intArray2), \"intArray2\");\r\n    assertEquals(null, ConvertUtils.convert(stringArray0), \"stringArray0\");\r\n    assertEquals(\"abc\", ConvertUtils.convert(stringArray1), \"stringArray1\");\r\n    assertEquals(\"abc\", ConvertUtils.convert(stringArray2), \"stringArray2\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\ConvertUtilsTest.java",
  "methodName" : "testObjectToStringScalar",
  "sourceCode" : "/**\r\n * Test conversion of object to string for scalars.\r\n */\r\n@Test\r\nvoid testObjectToStringScalar() {\r\n    assertEquals(\"false\", ConvertUtils.convert(Boolean.FALSE), \"Boolean->String\");\r\n    assertEquals(\"true\", ConvertUtils.convert(Boolean.TRUE), \"Boolean->String\");\r\n    assertEquals(\"123\", ConvertUtils.convert(Byte.valueOf((byte) 123)), \"Byte->String\");\r\n    assertEquals(\"a\", ConvertUtils.convert(Character.valueOf('a')), \"Character->String\");\r\n    assertEquals(\"123.0\", ConvertUtils.convert(Double.valueOf(123.0)), \"Double->String\");\r\n    assertEquals(\"123.0\", ConvertUtils.convert(Float.valueOf((float) 123.0)), \"Float->String\");\r\n    assertEquals(\"123\", ConvertUtils.convert(Integer.valueOf(123)), \"Integer->String\");\r\n    assertEquals(\"123\", ConvertUtils.convert(Long.valueOf(123)), \"Long->String\");\r\n    assertEquals(\"123\", ConvertUtils.convert(Short.valueOf((short) 123)), \"Short->String\");\r\n    assertEquals(\"abc\", ConvertUtils.convert(\"abc\"), \"String->String\");\r\n    assertEquals(null, ConvertUtils.convert(null), \"String->String null\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\ConvertUtilsTest.java",
  "methodName" : "testPositiveArray",
  "sourceCode" : "/**\r\n * Positive array conversion tests.\r\n */\r\n@Test\r\nvoid testPositiveArray() {\r\n    // check 1\r\n    final String[] values1 = { \"10\", \"20\", \"30\" };\r\n    final int[] shape = ArrayUtils.EMPTY_INT_ARRAY;\r\n    Object value = ConvertUtils.convert(values1, shape.getClass());\r\n    assertEquals(shape.getClass(), value.getClass());\r\n    final int[] results1 = (int[]) value;\r\n    assertEquals(10, results1[0]);\r\n    assertEquals(20, results1[1]);\r\n    assertEquals(30, results1[2]);\r\n    // check 2\r\n    final String[] values2 = { \"100\", \"200\", \"300\" };\r\n    value = ConvertUtils.convert(values2, shape.getClass());\r\n    assertEquals(shape.getClass(), value.getClass());\r\n    final int[] results2 = (int[]) value;\r\n    assertEquals(100, results2[0]);\r\n    assertEquals(200, results2[1]);\r\n    assertEquals(300, results2[2]);\r\n    // check 3\r\n    value = ConvertUtils.convert(values1, Integer.TYPE);\r\n    assertEquals(Integer.class, value.getClass());\r\n    assertEquals(Integer.valueOf(10), value);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\ConvertUtilsTest.java",
  "methodName" : "testPositiveIntegerArray",
  "sourceCode" : "/**\r\n * Positive String to primitive integer array tests.\r\n */\r\n@Test\r\nvoid testPositiveIntegerArray() {\r\n    Object value;\r\n    final int[] intArray = {};\r\n    final int[] intArray1 = { 0 };\r\n    final int[] intArray2 = { 0, 10 };\r\n    final Class<? extends int[]> intArrayClass = intArray.getClass();\r\n    value = ConvertUtils.convert(\"{  }\", intArrayClass);\r\n    checkIntegerArray(value, intArray);\r\n    value = ConvertUtils.convert(\"0\", intArrayClass);\r\n    checkIntegerArray(value, intArray1);\r\n    value = ConvertUtils.convert(\" 0 \", intArrayClass);\r\n    checkIntegerArray(value, intArray1);\r\n    value = ConvertUtils.convert(\"{ 0 }\", intArrayClass);\r\n    checkIntegerArray(value, intArray1);\r\n    value = ConvertUtils.convert(\"0,10\", intArrayClass);\r\n    checkIntegerArray(value, intArray2);\r\n    value = ConvertUtils.convert(\"0 10\", intArrayClass);\r\n    checkIntegerArray(value, intArray2);\r\n    value = ConvertUtils.convert(\"{0,10}\", intArrayClass);\r\n    checkIntegerArray(value, intArray2);\r\n    value = ConvertUtils.convert(\"{0 10}\", intArrayClass);\r\n    checkIntegerArray(value, intArray2);\r\n    value = ConvertUtils.convert(\"{ 0, 10 }\", intArrayClass);\r\n    checkIntegerArray(value, intArray2);\r\n    value = ConvertUtils.convert(\"{ 0 10 }\", intArrayClass);\r\n    checkIntegerArray(value, intArray2);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\ConvertUtilsTest.java",
  "methodName" : "testPositiveScalar",
  "sourceCode" : "/**\r\n * Positive scalar conversion tests.\r\n */\r\n@Test\r\nvoid testPositiveScalar() {\r\n    Object value;\r\n    value = ConvertUtils.convert(\"true\", Boolean.TYPE);\r\n    assertInstanceOf(Boolean.class, value);\r\n    assertEquals(((Boolean) value).booleanValue(), true);\r\n    value = ConvertUtils.convert(\"true\", Boolean.class);\r\n    assertInstanceOf(Boolean.class, value);\r\n    assertEquals(((Boolean) value).booleanValue(), true);\r\n    value = ConvertUtils.convert(\"yes\", Boolean.TYPE);\r\n    assertInstanceOf(Boolean.class, value);\r\n    assertEquals(((Boolean) value).booleanValue(), true);\r\n    value = ConvertUtils.convert(\"yes\", Boolean.class);\r\n    assertInstanceOf(Boolean.class, value);\r\n    assertEquals(((Boolean) value).booleanValue(), true);\r\n    value = ConvertUtils.convert(\"y\", Boolean.TYPE);\r\n    assertInstanceOf(Boolean.class, value);\r\n    assertEquals(((Boolean) value).booleanValue(), true);\r\n    value = ConvertUtils.convert(\"y\", Boolean.class);\r\n    assertInstanceOf(Boolean.class, value);\r\n    assertEquals(((Boolean) value).booleanValue(), true);\r\n    value = ConvertUtils.convert(\"on\", Boolean.TYPE);\r\n    assertInstanceOf(Boolean.class, value);\r\n    assertEquals(((Boolean) value).booleanValue(), true);\r\n    value = ConvertUtils.convert(\"on\", Boolean.class);\r\n    assertInstanceOf(Boolean.class, value);\r\n    assertEquals(((Boolean) value).booleanValue(), true);\r\n    value = ConvertUtils.convert(\"false\", Boolean.TYPE);\r\n    assertInstanceOf(Boolean.class, value);\r\n    assertEquals(((Boolean) value).booleanValue(), false);\r\n    value = ConvertUtils.convert(\"false\", Boolean.class);\r\n    assertInstanceOf(Boolean.class, value);\r\n    assertEquals(((Boolean) value).booleanValue(), false);\r\n    value = ConvertUtils.convert(\"no\", Boolean.TYPE);\r\n    assertInstanceOf(Boolean.class, value);\r\n    assertEquals(((Boolean) value).booleanValue(), false);\r\n    value = ConvertUtils.convert(\"no\", Boolean.class);\r\n    assertInstanceOf(Boolean.class, value);\r\n    assertEquals(((Boolean) value).booleanValue(), false);\r\n    value = ConvertUtils.convert(\"n\", Boolean.TYPE);\r\n    assertInstanceOf(Boolean.class, value);\r\n    assertEquals(((Boolean) value).booleanValue(), false);\r\n    value = ConvertUtils.convert(\"n\", Boolean.class);\r\n    assertInstanceOf(Boolean.class, value);\r\n    assertEquals(((Boolean) value).booleanValue(), false);\r\n    value = ConvertUtils.convert(\"off\", Boolean.TYPE);\r\n    assertInstanceOf(Boolean.class, value);\r\n    assertEquals(((Boolean) value).booleanValue(), false);\r\n    value = ConvertUtils.convert(\"off\", Boolean.class);\r\n    assertInstanceOf(Boolean.class, value);\r\n    assertEquals(((Boolean) value).booleanValue(), false);\r\n    value = ConvertUtils.convert(\"123\", Byte.TYPE);\r\n    assertInstanceOf(Byte.class, value);\r\n    assertEquals(((Byte) value).byteValue(), (byte) 123);\r\n    value = ConvertUtils.convert(\"123\", Byte.class);\r\n    assertInstanceOf(Byte.class, value);\r\n    assertEquals(((Byte) value).byteValue(), (byte) 123);\r\n    value = ConvertUtils.convert(\"a\", Character.TYPE);\r\n    assertInstanceOf(Character.class, value);\r\n    assertEquals(((Character) value).charValue(), 'a');\r\n    value = ConvertUtils.convert(\"a\", Character.class);\r\n    assertInstanceOf(Character.class, value);\r\n    assertEquals(((Character) value).charValue(), 'a');\r\n    value = ConvertUtils.convert(\"java.lang.String\", Class.class);\r\n    assertInstanceOf(Class.class, value);\r\n    assertEquals(String.class, value);\r\n    value = ConvertUtils.convert(\"123.456\", Double.TYPE);\r\n    assertInstanceOf(Double.class, value);\r\n    assertEquals(((Double) value).doubleValue(), 123.456, 0.005);\r\n    value = ConvertUtils.convert(\"123.456\", Double.class);\r\n    assertInstanceOf(Double.class, value);\r\n    assertEquals(((Double) value).doubleValue(), 123.456, 0.005);\r\n    value = ConvertUtils.convert(\"123.456\", Float.TYPE);\r\n    assertInstanceOf(Float.class, value);\r\n    assertEquals(((Float) value).floatValue(), (float) 123.456, (float) 0.005);\r\n    value = ConvertUtils.convert(\"123.456\", Float.class);\r\n    assertInstanceOf(Float.class, value);\r\n    assertEquals(((Float) value).floatValue(), (float) 123.456, (float) 0.005);\r\n    value = ConvertUtils.convert(\"123\", Integer.TYPE);\r\n    assertInstanceOf(Integer.class, value);\r\n    assertEquals(((Integer) value).intValue(), 123);\r\n    value = ConvertUtils.convert(\"123\", Integer.class);\r\n    assertInstanceOf(Integer.class, value);\r\n    assertEquals(((Integer) value).intValue(), 123);\r\n    value = ConvertUtils.convert(\"123\", Long.TYPE);\r\n    assertInstanceOf(Long.class, value);\r\n    assertEquals(((Long) value).longValue(), 123);\r\n    value = ConvertUtils.convert(\"123\", Long.class);\r\n    assertInstanceOf(Long.class, value);\r\n    assertEquals(((Long) value).longValue(), 123);\r\n    value = ConvertUtils.convert(\"123\", Short.TYPE);\r\n    assertInstanceOf(Short.class, value);\r\n    assertEquals(((Short) value).shortValue(), (short) 123);\r\n    value = ConvertUtils.convert(\"123\", Short.class);\r\n    assertInstanceOf(Short.class, value);\r\n    assertEquals(((Short) value).shortValue(), (short) 123);\r\n    String input;\r\n    input = \"2002-03-17\";\r\n    value = ConvertUtils.convert(input, Date.class);\r\n    assertInstanceOf(Date.class, value);\r\n    assertEquals(input, value.toString());\r\n    input = \"20:30:40\";\r\n    value = ConvertUtils.convert(input, Time.class);\r\n    assertInstanceOf(Time.class, value);\r\n    assertEquals(input, value.toString());\r\n    input = \"2002-03-17 20:30:40.0\";\r\n    value = ConvertUtils.convert(input, Timestamp.class);\r\n    assertInstanceOf(Timestamp.class, value);\r\n    assertEquals(input, value.toString());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\ConvertUtilsTest.java",
  "methodName" : "testPositiveStringArray",
  "sourceCode" : "/**\r\n * Positive String to String array tests.\r\n */\r\n@Test\r\nvoid testPositiveStringArray() {\r\n    Object value;\r\n    final String[] stringArray = {};\r\n    final String[] stringArray1 = { \"abc\" };\r\n    final String[] stringArray2 = { \"abc\", \"de,f\" };\r\n    value = ConvertUtils.convert(\"\", stringArray.getClass());\r\n    checkStringArray(value, stringArray);\r\n    value = ConvertUtils.convert(\" \", stringArray.getClass());\r\n    checkStringArray(value, stringArray);\r\n    value = ConvertUtils.convert(\"{}\", stringArray.getClass());\r\n    checkStringArray(value, stringArray);\r\n    value = ConvertUtils.convert(\"{  }\", stringArray.getClass());\r\n    checkStringArray(value, stringArray);\r\n    value = ConvertUtils.convert(\"abc\", stringArray.getClass());\r\n    checkStringArray(value, stringArray1);\r\n    value = ConvertUtils.convert(\"{abc}\", stringArray.getClass());\r\n    checkStringArray(value, stringArray1);\r\n    value = ConvertUtils.convert(\"\\\"abc\\\"\", stringArray.getClass());\r\n    checkStringArray(value, stringArray1);\r\n    value = ConvertUtils.convert(\"{\\\"abc\\\"}\", stringArray.getClass());\r\n    checkStringArray(value, stringArray1);\r\n    value = ConvertUtils.convert(\"'abc'\", stringArray.getClass());\r\n    checkStringArray(value, stringArray1);\r\n    value = ConvertUtils.convert(\"{'abc'}\", stringArray.getClass());\r\n    checkStringArray(value, stringArray1);\r\n    value = ConvertUtils.convert(\"abc 'de,f'\", stringArray.getClass());\r\n    checkStringArray(value, stringArray2);\r\n    value = ConvertUtils.convert(\"{abc, 'de,f'}\", stringArray.getClass());\r\n    checkStringArray(value, stringArray2);\r\n    value = ConvertUtils.convert(\"\\\"abc\\\",\\\"de,f\\\"\", stringArray.getClass());\r\n    checkStringArray(value, stringArray2);\r\n    value = ConvertUtils.convert(\"{\\\"abc\\\" 'de,f'}\", stringArray.getClass());\r\n    checkStringArray(value, stringArray2);\r\n    value = ConvertUtils.convert(\"'abc' 'de,f'\", stringArray.getClass());\r\n    checkStringArray(value, stringArray2);\r\n    value = ConvertUtils.convert(\"{'abc', \\\"de,f\\\"}\", stringArray.getClass());\r\n    checkStringArray(value, stringArray2);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\ConvertUtilsTest.java",
  "methodName" : "testSeparateConvertInstances",
  "sourceCode" : "@Test\r\nvoid testSeparateConvertInstances() throws Exception {\r\n    final ConvertUtilsBean utilsOne = new ConvertUtilsBean();\r\n    final ConvertUtilsBean utilsTwo = new ConvertUtilsBean();\r\n    // make sure that the test work ok before anything's changed\r\n    Object value = utilsOne.convert(\"true\", Boolean.TYPE);\r\n    assertInstanceOf(Boolean.class, value);\r\n    assertEquals(((Boolean) value).booleanValue(), true, \"Standard conversion failed (1)\");\r\n    value = utilsTwo.convert(\"true\", Boolean.TYPE);\r\n    assertInstanceOf(Boolean.class, value);\r\n    assertEquals(((Boolean) value).booleanValue(), true, \"Standard conversion failed (2)\");\r\n    // now register a test\r\n    utilsOne.register(new ThrowExceptionConverter(), Boolean.TYPE);\r\n    assertThrows(PassTestException.class, () -> utilsOne.convert(\"true\", Boolean.TYPE));\r\n    // nothing should have changed\r\n    value = utilsTwo.convert(\"true\", Boolean.TYPE);\r\n    assertInstanceOf(Boolean.class, value);\r\n    assertEquals(((Boolean) value).booleanValue(), true, \"Standard conversion failed (3)\");\r\n    // nothing we'll test deregister\r\n    utilsOne.deregister();\r\n    value = utilsOne.convert(\"true\", Boolean.TYPE);\r\n    assertInstanceOf(Boolean.class, value);\r\n    assertEquals(((Boolean) value).booleanValue(), true, \"Instance deregister failed.\");\r\n    value = utilsTwo.convert(\"true\", Boolean.TYPE);\r\n    assertInstanceOf(Boolean.class, value);\r\n    assertEquals(((Boolean) value).booleanValue(), true, \"Standard conversion failed (4)\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\DefaultIntrospectionContextTest.java",
  "methodName" : "testAddPropertyDescriptor",
  "sourceCode" : "/**\r\n * Tests whether a property descriptor can be added.\r\n */\r\n@Test\r\nvoid testAddPropertyDescriptor() {\r\n    final PropertyDescriptor desc = createDescriptor(PROP);\r\n    context.addPropertyDescriptor(desc);\r\n    assertTrue(context.hasProperty(PROP), \"Property not found\");\r\n    assertSame(desc, context.getPropertyDescriptor(PROP), \"Wrong descriptor\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\DefaultIntrospectionContextTest.java",
  "methodName" : "testAddPropertyDescriptorNull",
  "sourceCode" : "/**\r\n * Tries to add a null descriptor.\r\n */\r\n@Test\r\nvoid testAddPropertyDescriptorNull() {\r\n    assertThrows(NullPointerException.class, () -> context.addPropertyDescriptor(null));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\DefaultIntrospectionContextTest.java",
  "methodName" : "testAddPropertyDescriptors",
  "sourceCode" : "/**\r\n * Tests whether multiple descriptors can be added.\r\n */\r\n@Test\r\nvoid testAddPropertyDescriptors() {\r\n    final int count = 4;\r\n    final PropertyDescriptor[] descs = new PropertyDescriptor[count];\r\n    final Set<PropertyDescriptor> descSet = new HashSet<>();\r\n    for (int i = 0; i < count; i++) {\r\n        descs[i] = createDescriptor(PROP + i);\r\n        descSet.add(descs[i]);\r\n    }\r\n    context.addPropertyDescriptors(descs);\r\n    final PropertyDescriptor d = createDescriptor(PROP);\r\n    context.addPropertyDescriptor(d);\r\n    descSet.add(d);\r\n    final Set<String> names = context.propertyNames();\r\n    assertEquals(count + 1, names.size(), \"Wrong number of property names\");\r\n    assertTrue(names.contains(PROP), \"Property not found: \" + PROP);\r\n    for (int i = 0; i < count; i++) {\r\n        assertTrue(names.contains(PROP + i), \"Property not found: \" + PROP + i);\r\n    }\r\n    final PropertyDescriptor[] addedDescs = context.getPropertyDescriptors();\r\n    assertEquals(count + 1, addedDescs.length, \"Wrong number of added descriptors\");\r\n    for (final PropertyDescriptor pd : addedDescs) {\r\n        assertTrue(descSet.remove(pd), \"Unexpected descriptor: \" + pd);\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\DefaultIntrospectionContextTest.java",
  "methodName" : "testAddPropertyDescriptorsNull",
  "sourceCode" : "/**\r\n * Tries to add a null array with property descriptors.\r\n */\r\n@Test\r\nvoid testAddPropertyDescriptorsNull() {\r\n    assertThrows(NullPointerException.class, () -> context.addPropertyDescriptors(null));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\DefaultIntrospectionContextTest.java",
  "methodName" : "testGetPropertyDescriptorUnknown",
  "sourceCode" : "/**\r\n * Tests getPropertyDescriptor() if the property name is unknown.\r\n */\r\n@Test\r\nvoid testGetPropertyDescriptorUnknown() {\r\n    assertNull(context.getPropertyDescriptor(PROP), \"Got a property (1)\");\r\n    context.addPropertyDescriptor(createDescriptor(PROP));\r\n    assertNull(context.getPropertyDescriptor(\"other\"), \"Got a property (2)\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\DefaultIntrospectionContextTest.java",
  "methodName" : "testHasPropertyFalse",
  "sourceCode" : "/**\r\n * Tests hasProperty() if the expected result is false.\r\n */\r\n@Test\r\nvoid testHasPropertyFalse() {\r\n    assertFalse(context.hasProperty(PROP), \"Wrong result (1)\");\r\n    context.addPropertyDescriptor(createDescriptor(PROP));\r\n    assertFalse(context.hasProperty(\"other\"), \"Wrong result (2)\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\DefaultIntrospectionContextTest.java",
  "methodName" : "testInit",
  "sourceCode" : "/**\r\n * Tests a newly created instance.\r\n */\r\n@Test\r\nvoid testInit() {\r\n    assertEquals(getClass(), context.getTargetClass(), \"Wrong current class\");\r\n    assertTrue(context.propertyNames().isEmpty(), \"Got property names\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\DefaultIntrospectionContextTest.java",
  "methodName" : "testPropertyNamesModify",
  "sourceCode" : "/**\r\n * Tests that the set with property names cannot be changed.\r\n */\r\n@Test\r\nvoid testPropertyNamesModify() {\r\n    final Set<String> names = context.propertyNames();\r\n    assertThrows(UnsupportedOperationException.class, () -> names.add(PROP));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\DefaultIntrospectionContextTest.java",
  "methodName" : "testRemovePropertyDescriptor",
  "sourceCode" : "/**\r\n * Tests whether a descriptor can be removed.\r\n */\r\n@Test\r\nvoid testRemovePropertyDescriptor() {\r\n    context.addPropertyDescriptor(createDescriptor(PROP));\r\n    context.removePropertyDescriptor(PROP);\r\n    assertTrue(context.propertyNames().isEmpty(), \"Got property names\");\r\n    assertEquals(0, context.getPropertyDescriptors().length, \"Got descriptors\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\DynaBeanMapDecoratorTest.java",
  "methodName" : "testClear",
  "sourceCode" : "/**\r\n * Test clear() method\r\n */\r\n@Test\r\nvoid testClear() {\r\n    assertThrows(UnsupportedOperationException.class, () -> decoratedMap.clear());\r\n    assertThrows(UnsupportedOperationException.class, () -> modifiableMap.clear());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\DynaBeanMapDecoratorTest.java",
  "methodName" : "testContainsKey",
  "sourceCode" : "/**\r\n * Test containsKey() method\r\n */\r\n@Test\r\nvoid testContainsKey() {\r\n    assertTrue(decoratedMap.containsKey(stringProp.getName()), \"decoratedMap true\");\r\n    assertFalse(decoratedMap.containsKey(\"xyz\"), \"decoratedMap false\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\DynaBeanMapDecoratorTest.java",
  "methodName" : "testContainsValue",
  "sourceCode" : "/**\r\n * Test containsValue() method\r\n */\r\n@Test\r\nvoid testContainsValue() {\r\n    assertTrue(decoratedMap.containsValue(stringVal), \"decoratedMap true\");\r\n    assertFalse(decoratedMap.containsValue(\"xyz\"), \"decoratedMap false\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\DynaBeanMapDecoratorTest.java",
  "methodName" : "testEntrySet",
  "sourceCode" : "/**\r\n * Test entrySet() method\r\n */\r\n@Test\r\nvoid testEntrySet() {\r\n    final Set<Map.Entry<String, Object>> set = modifiableMap.entrySet();\r\n    // Check the Set can't be modified\r\n    final Map<String, Object> m = new HashMap<>();\r\n    m.put(\"key\", \"value\");\r\n    checkUnmodifiable(\"entrySet()\", set, m.entrySet().iterator().next());\r\n    assertEquals(properties.length, set.size(), \"entrySet size\");\r\n    final List<String> namesList = new ArrayList<>();\r\n    int i = 0;\r\n    for (final Entry<String, Object> entry : set) {\r\n        final String name = entry.getKey();\r\n        namesList.add(name);\r\n        final Object expectValue = decoratedMap.get(name);\r\n        assertEquals(expectValue, entry.getValue(), \"entrySet(\" + i + \") val\");\r\n        i++;\r\n    }\r\n    for (int j = 0; j < properties.length; j++) {\r\n        final String name = properties[j].getName();\r\n        assertTrue(namesList.contains(name), \"Check property[\" + j + \"]\");\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\DynaBeanMapDecoratorTest.java",
  "methodName" : "testGet",
  "sourceCode" : "/**\r\n * Test get() method\r\n */\r\n@Test\r\nvoid testGet() {\r\n    // valid property name\r\n    assertEquals(stringVal, decoratedMap.get(stringProp.getName()), \"decoratedMap valid\");\r\n    // invalid property name\r\n    assertThrows(IllegalArgumentException.class, () -> decoratedMap.get(\"xyz\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\DynaBeanMapDecoratorTest.java",
  "methodName" : "testIsEmpty",
  "sourceCode" : "/**\r\n * Test isEmpty() method\r\n */\r\n@Test\r\nvoid testIsEmpty() {\r\n    assertTrue(emptyMap.isEmpty(), \"Empty\");\r\n    assertFalse(decoratedMap.isEmpty(), \"Not Empty\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\DynaBeanMapDecoratorTest.java",
  "methodName" : "testIsReadOnly",
  "sourceCode" : "/**\r\n * Test isReadOnly() method\r\n */\r\n@Test\r\nvoid testIsReadOnly() {\r\n    assertTrue(((DynaBeanPropertyMapDecorator) decoratedMap).isReadOnly(), \"decoratedMap true\");\r\n    assertFalse(((DynaBeanPropertyMapDecorator) modifiableMap).isReadOnly(), \"modifiableMap false\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\DynaBeanMapDecoratorTest.java",
  "methodName" : "testKeySet",
  "sourceCode" : "/**\r\n * Test keySet() method\r\n */\r\n@Test\r\nvoid testKeySet() {\r\n    final Set<String> set = modifiableMap.keySet();\r\n    // Check the Set can't be modified\r\n    checkUnmodifiable(\"keySet()\", set, \"xyz\");\r\n    assertEquals(properties.length, set.size(), \"keySet size\");\r\n    for (int i = 0; i < properties.length; i++) {\r\n        final String name = properties[i].getName();\r\n        assertTrue(set.contains(name), \"Check property[\" + i + \"]\");\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\DynaBeanMapDecoratorTest.java",
  "methodName" : "testPut",
  "sourceCode" : "/**\r\n * Test put() method\r\n */\r\n@Test\r\nvoid testPut() {\r\n    final String newValue = \"ABC\";\r\n    // Test read only\r\n    assertThrows(UnsupportedOperationException.class, () -> decoratedMap.put(stringProp.getName(), newValue));\r\n    // Test Writable\r\n    assertEquals(stringVal, modifiableMap.put(stringProp.getName(), newValue), \"modifiableMap put\");\r\n    assertEquals(newValue, dynaBean.get(stringProp.getName()), \"dynaBean get\");\r\n    assertEquals(newValue, modifiableMap.get(stringProp.getName()), \"modifiableMap get\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\DynaBeanMapDecoratorTest.java",
  "methodName" : "testPutAll",
  "sourceCode" : "/**\r\n * Test putAll() method\r\n */\r\n@Test\r\nvoid testPutAll() {\r\n    final String newValue = \"ABC\";\r\n    final Map<String, Object> newMap = new HashMap<>();\r\n    newMap.put(stringProp.getName(), newValue);\r\n    // Test read only\r\n    assertThrows(UnsupportedOperationException.class, () -> decoratedMap.putAll(newMap));\r\n    // Test Writable\r\n    assertEquals(stringVal, dynaBean.get(stringProp.getName()), \"before putAll\");\r\n    modifiableMap.putAll(newMap);\r\n    assertEquals(newValue, dynaBean.get(stringProp.getName()), \"after putAll\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\DynaBeanMapDecoratorTest.java",
  "methodName" : "testRemove",
  "sourceCode" : "/**\r\n * Test remove() method\r\n */\r\n@Test\r\nvoid testRemove() {\r\n    assertThrows(UnsupportedOperationException.class, () -> decoratedMap.remove(stringProp.getName()));\r\n    assertThrows(UnsupportedOperationException.class, () -> modifiableMap.remove(stringProp.getName()));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\DynaBeanMapDecoratorTest.java",
  "methodName" : "testSize",
  "sourceCode" : "/**\r\n * Test size() method\r\n */\r\n@Test\r\nvoid testSize() {\r\n    assertEquals(0, emptyMap.size(), \"Empty\");\r\n    assertEquals(properties.length, decoratedMap.size(), \"Not Empty\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\DynaBeanMapDecoratorTest.java",
  "methodName" : "testValues",
  "sourceCode" : "/**\r\n * Test values() method\r\n */\r\n@Test\r\nvoid testValues() {\r\n    final Collection<Object> collection = modifiableMap.values();\r\n    // Check the Collection can't be modified\r\n    checkUnmodifiable(\"values()\", collection, \"xyz\");\r\n    assertEquals(values.length, collection.size(), \"values size\");\r\n    // Collection should be ordered in same sequence as properties\r\n    final Iterator<Object> iterator = collection.iterator();\r\n    int i = 0;\r\n    while (iterator.hasNext()) {\r\n        assertEquals(values[i], iterator.next(), \"values(\" + i + \")\");\r\n        i++;\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\DynaBeanUtilsTest.java",
  "methodName" : "testCloneDynaBean",
  "sourceCode" : "/**\r\n * Test the cloneBean() method from a DynaBean.\r\n */\r\n@Test\r\nvoid testCloneDynaBean() throws Exception {\r\n    // Set up an origin bean with customized properties\r\n    final DynaClass dynaClass = DynaBeanUtilsTest.createDynaClass();\r\n    final DynaBean orig = dynaClass.newInstance();\r\n    orig.set(\"booleanProperty\", Boolean.FALSE);\r\n    orig.set(\"byteProperty\", Byte.valueOf((byte) 111));\r\n    orig.set(\"doubleProperty\", Double.valueOf(333.33));\r\n    orig.set(\"dupProperty\", new String[] { \"New 0\", \"New 1\", \"New 2\" });\r\n    orig.set(\"intArray\", new int[] { 100, 200, 300 });\r\n    orig.set(\"intProperty\", Integer.valueOf(333));\r\n    orig.set(\"longProperty\", Long.valueOf(3333));\r\n    orig.set(\"shortProperty\", Short.valueOf((short) 33));\r\n    orig.set(\"stringArray\", new String[] { \"New 0\", \"New 1\" });\r\n    orig.set(\"stringProperty\", \"Custom string\");\r\n    // Copy the origin bean to our destination test bean\r\n    final DynaBean clonedBean = (DynaBean) BeanUtils.cloneBean(orig);\r\n    // Validate the results for scalar properties\r\n    assertEquals(false, ((Boolean) clonedBean.get(\"booleanProperty\")).booleanValue(), \"Cloned boolean property\");\r\n    assertEquals((byte) 111, ((Byte) clonedBean.get(\"byteProperty\")).byteValue(), \"Cloned byte property\");\r\n    assertEquals(333.33, ((Double) clonedBean.get(\"doubleProperty\")).doubleValue(), 0.005, \"Cloned double property\");\r\n    assertEquals(333, ((Integer) clonedBean.get(\"intProperty\")).intValue(), \"Cloned int property\");\r\n    assertEquals(3333, ((Long) clonedBean.get(\"longProperty\")).longValue(), \"Cloned long property\");\r\n    assertEquals((short) 33, ((Short) clonedBean.get(\"shortProperty\")).shortValue(), \"Cloned short property\");\r\n    assertEquals(\"Custom string\", (String) clonedBean.get(\"stringProperty\"), \"Cloned string property\");\r\n    // Validate the results for array properties\r\n    final String[] dupProperty = (String[]) clonedBean.get(\"dupProperty\");\r\n    assertNotNull(dupProperty, \"dupProperty present\");\r\n    assertEquals(3, dupProperty.length, \"dupProperty length\");\r\n    assertEquals(\"New 0\", dupProperty[0], \"dupProperty[0]\");\r\n    assertEquals(\"New 1\", dupProperty[1], \"dupProperty[1]\");\r\n    assertEquals(\"New 2\", dupProperty[2], \"dupProperty[2]\");\r\n    final int[] intArray = (int[]) clonedBean.get(\"intArray\");\r\n    assertNotNull(intArray, \"intArray present\");\r\n    assertEquals(3, intArray.length, \"intArray length\");\r\n    assertEquals(100, intArray[0], \"intArray[0]\");\r\n    assertEquals(200, intArray[1], \"intArray[1]\");\r\n    assertEquals(300, intArray[2], \"intArray[2]\");\r\n    final String[] stringArray = (String[]) clonedBean.get(\"stringArray\");\r\n    assertNotNull(stringArray, \"stringArray present\");\r\n    assertEquals(2, stringArray.length, \"stringArray length\");\r\n    assertEquals(\"New 0\", stringArray[0], \"stringArray[0]\");\r\n    assertEquals(\"New 1\", stringArray[1], \"stringArray[1]\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\DynaBeanUtilsTest.java",
  "methodName" : "testCopyPropertiesDynaBean",
  "sourceCode" : "/**\r\n * Test the copyProperties() method from a DynaBean.\r\n */\r\n@Test\r\nvoid testCopyPropertiesDynaBean() throws Exception {\r\n    // Set up an origin bean with customized properties\r\n    final DynaClass dynaClass = DynaBeanUtilsTest.createDynaClass();\r\n    final DynaBean orig = dynaClass.newInstance();\r\n    orig.set(\"booleanProperty\", Boolean.FALSE);\r\n    orig.set(\"byteProperty\", Byte.valueOf((byte) 111));\r\n    orig.set(\"doubleProperty\", Double.valueOf(333.33));\r\n    orig.set(\"dupProperty\", new String[] { \"New 0\", \"New 1\", \"New 2\" });\r\n    orig.set(\"intArray\", new int[] { 100, 200, 300 });\r\n    orig.set(\"intProperty\", Integer.valueOf(333));\r\n    orig.set(\"longProperty\", Long.valueOf(3333));\r\n    orig.set(\"shortProperty\", Short.valueOf((short) 33));\r\n    orig.set(\"stringArray\", new String[] { \"New 0\", \"New 1\" });\r\n    orig.set(\"stringProperty\", \"Custom string\");\r\n    // Copy the origin bean to our destination test bean\r\n    BeanUtils.copyProperties(bean, orig);\r\n    // Validate the results for scalar properties\r\n    assertEquals(false, ((Boolean) bean.get(\"booleanProperty\")).booleanValue(), \"Copied boolean property\");\r\n    assertEquals((byte) 111, ((Byte) bean.get(\"byteProperty\")).byteValue(), \"Copied byte property\");\r\n    assertEquals(333.33, ((Double) bean.get(\"doubleProperty\")).doubleValue(), 0.005, \"Copied double property\");\r\n    assertEquals(333, ((Integer) bean.get(\"intProperty\")).intValue(), \"Copied int property\");\r\n    assertEquals(3333, ((Long) bean.get(\"longProperty\")).longValue(), \"Copied long property\");\r\n    assertEquals((short) 33, ((Short) bean.get(\"shortProperty\")).shortValue(), \"Copied short property\");\r\n    assertEquals(\"Custom string\", (String) bean.get(\"stringProperty\"), \"Copied string property\");\r\n    // Validate the results for array properties\r\n    final String[] dupProperty = (String[]) bean.get(\"dupProperty\");\r\n    assertNotNull(dupProperty, \"dupProperty present\");\r\n    assertEquals(3, dupProperty.length, \"dupProperty length\");\r\n    assertEquals(\"New 0\", dupProperty[0], \"dupProperty[0]\");\r\n    assertEquals(\"New 1\", dupProperty[1], \"dupProperty[1]\");\r\n    assertEquals(\"New 2\", dupProperty[2], \"dupProperty[2]\");\r\n    final int[] intArray = (int[]) bean.get(\"intArray\");\r\n    assertNotNull(intArray, \"intArray present\");\r\n    assertEquals(3, intArray.length, \"intArray length\");\r\n    assertEquals(100, intArray[0], \"intArray[0]\");\r\n    assertEquals(200, intArray[1], \"intArray[1]\");\r\n    assertEquals(300, intArray[2], \"intArray[2]\");\r\n    final String[] stringArray = (String[]) bean.get(\"stringArray\");\r\n    assertNotNull(stringArray, \"stringArray present\");\r\n    assertEquals(2, stringArray.length, \"stringArray length\");\r\n    assertEquals(\"New 0\", stringArray[0], \"stringArray[0]\");\r\n    assertEquals(\"New 1\", stringArray[1], \"stringArray[1]\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\DynaBeanUtilsTest.java",
  "methodName" : "testCopyPropertiesMap",
  "sourceCode" : "/**\r\n * Test copyProperties() when the origin is a {@code Map}.\r\n */\r\n@Test\r\nvoid testCopyPropertiesMap() throws Exception {\r\n    final Map<String, Object> map = new HashMap<>();\r\n    map.put(\"booleanProperty\", \"false\");\r\n    map.put(\"byteProperty\", \"111\");\r\n    map.put(\"doubleProperty\", \"333.0\");\r\n    map.put(\"dupProperty\", new String[] { \"New 0\", \"New 1\", \"New 2\" });\r\n    map.put(\"floatProperty\", \"222.0\");\r\n    map.put(\"intArray\", new String[] { \"0\", \"100\", \"200\" });\r\n    map.put(\"intProperty\", \"111\");\r\n    map.put(\"longProperty\", \"444\");\r\n    map.put(\"shortProperty\", \"555\");\r\n    map.put(\"stringProperty\", \"New String Property\");\r\n    BeanUtils.copyProperties(bean, map);\r\n    // Scalar properties\r\n    assertEquals(false, ((Boolean) bean.get(\"booleanProperty\")).booleanValue(), \"booleanProperty\");\r\n    assertEquals((byte) 111, ((Byte) bean.get(\"byteProperty\")).byteValue(), \"byteProperty\");\r\n    assertEquals(333.0, ((Double) bean.get(\"doubleProperty\")).doubleValue(), 0.005, \"doubleProperty\");\r\n    assertEquals((float) 222.0, ((Float) bean.get(\"floatProperty\")).floatValue(), (float) 0.005, \"floatProperty\");\r\n    assertEquals(111, ((Integer) bean.get(\"intProperty\")).intValue(), \"intProperty\");\r\n    assertEquals(444, ((Long) bean.get(\"longProperty\")).longValue(), \"longProperty\");\r\n    assertEquals((short) 555, ((Short) bean.get(\"shortProperty\")).shortValue(), \"shortProperty\");\r\n    assertEquals(\"New String Property\", (String) bean.get(\"stringProperty\"), \"stringProperty\");\r\n    // Indexed Properties\r\n    final String[] dupProperty = (String[]) bean.get(\"dupProperty\");\r\n    assertNotNull(dupProperty, \"dupProperty present\");\r\n    assertEquals(3, dupProperty.length, \"dupProperty length\");\r\n    assertEquals(\"New 0\", dupProperty[0], \"dupProperty[0]\");\r\n    assertEquals(\"New 1\", dupProperty[1], \"dupProperty[1]\");\r\n    assertEquals(\"New 2\", dupProperty[2], \"dupProperty[2]\");\r\n    final int[] intArray = (int[]) bean.get(\"intArray\");\r\n    assertNotNull(intArray, \"intArray present\");\r\n    assertEquals(3, intArray.length, \"intArray length\");\r\n    assertEquals(0, intArray[0], \"intArray[0]\");\r\n    assertEquals(100, intArray[1], \"intArray[1]\");\r\n    assertEquals(200, intArray[2], \"intArray[2]\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\DynaBeanUtilsTest.java",
  "methodName" : "testCopyPropertiesStandard",
  "sourceCode" : "/**\r\n * Test the copyProperties() method from a standard JavaBean.\r\n */\r\n@Test\r\nvoid testCopyPropertiesStandard() throws Exception {\r\n    // Set up an origin bean with customized properties\r\n    final TestBean orig = new TestBean();\r\n    orig.setBooleanProperty(false);\r\n    orig.setByteProperty((byte) 111);\r\n    orig.setDoubleProperty(333.33);\r\n    orig.setDupProperty(new String[] { \"New 0\", \"New 1\", \"New 2\" });\r\n    orig.setIntArray(new int[] { 100, 200, 300 });\r\n    orig.setIntProperty(333);\r\n    orig.setLongProperty(3333);\r\n    orig.setShortProperty((short) 33);\r\n    orig.setStringArray(new String[] { \"New 0\", \"New 1\" });\r\n    orig.setStringProperty(\"Custom string\");\r\n    // Copy the origin bean to our destination test bean\r\n    BeanUtils.copyProperties(bean, orig);\r\n    // Validate the results for scalar properties\r\n    assertEquals(false, ((Boolean) bean.get(\"booleanProperty\")).booleanValue(), \"Copied boolean property\");\r\n    assertEquals((byte) 111, ((Byte) bean.get(\"byteProperty\")).byteValue(), \"Copied byte property\");\r\n    assertEquals(333.33, ((Double) bean.get(\"doubleProperty\")).doubleValue(), 0.005, \"Copied double property\");\r\n    assertEquals(333, ((Integer) bean.get(\"intProperty\")).intValue(), \"Copied int property\");\r\n    assertEquals(3333, ((Long) bean.get(\"longProperty\")).longValue(), \"Copied long property\");\r\n    assertEquals((short) 33, ((Short) bean.get(\"shortProperty\")).shortValue(), \"Copied short property\");\r\n    assertEquals(\"Custom string\", (String) bean.get(\"stringProperty\"), \"Copied string property\");\r\n    // Validate the results for array properties\r\n    final String[] dupProperty = (String[]) bean.get(\"dupProperty\");\r\n    assertNotNull(dupProperty, \"dupProperty present\");\r\n    assertEquals(3, dupProperty.length, \"dupProperty length\");\r\n    assertEquals(\"New 0\", dupProperty[0], \"dupProperty[0]\");\r\n    assertEquals(\"New 1\", dupProperty[1], \"dupProperty[1]\");\r\n    assertEquals(\"New 2\", dupProperty[2], \"dupProperty[2]\");\r\n    final int[] intArray = (int[]) bean.get(\"intArray\");\r\n    assertNotNull(intArray, \"intArray present\");\r\n    assertEquals(3, intArray.length, \"intArray length\");\r\n    assertEquals(100, intArray[0], \"intArray[0]\");\r\n    assertEquals(200, intArray[1], \"intArray[1]\");\r\n    assertEquals(300, intArray[2], \"intArray[2]\");\r\n    final String[] stringArray = (String[]) bean.get(\"stringArray\");\r\n    assertNotNull(stringArray, \"stringArray present\");\r\n    assertEquals(2, stringArray.length, \"stringArray length\");\r\n    assertEquals(\"New 0\", stringArray[0], \"stringArray[0]\");\r\n    assertEquals(\"New 1\", stringArray[1], \"stringArray[1]\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\DynaBeanUtilsTest.java",
  "methodName" : "testCopyPropertyByte",
  "sourceCode" : "/**\r\n * Test narrowing and widening conversions on byte.\r\n */\r\n@Test\r\nvoid testCopyPropertyByte() throws Exception {\r\n    BeanUtils.setProperty(bean, \"byteProperty\", Byte.valueOf((byte) 123));\r\n    assertEquals((byte) 123, ((Byte) bean.get(\"byteProperty\")).byteValue());\r\n    /*\r\n         * BeanUtils.setProperty(bean, \"byteProperty\", new Double((double) 123)); assertEquals((byte) 123, ((Byte) bean.get(\"byteProperty\")).byteValue());\r\n         * BeanUtils.setProperty(bean, \"byteProperty\", new Float((float) 123)); assertEquals((byte) 123, ((Byte) bean.get(\"byteProperty\")).byteValue());\r\n         */\r\n    BeanUtils.setProperty(bean, \"byteProperty\", Integer.valueOf(123));\r\n    assertEquals((byte) 123, ((Byte) bean.get(\"byteProperty\")).byteValue());\r\n    BeanUtils.setProperty(bean, \"byteProperty\", Long.valueOf(123));\r\n    assertEquals((byte) 123, ((Byte) bean.get(\"byteProperty\")).byteValue());\r\n    BeanUtils.setProperty(bean, \"byteProperty\", Short.valueOf((short) 123));\r\n    assertEquals((byte) 123, ((Byte) bean.get(\"byteProperty\")).byteValue());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\DynaBeanUtilsTest.java",
  "methodName" : "testCopyPropertyDouble",
  "sourceCode" : "/**\r\n * Test narrowing and widening conversions on double.\r\n */\r\n@Test\r\nvoid testCopyPropertyDouble() throws Exception {\r\n    BeanUtils.setProperty(bean, \"doubleProperty\", Byte.valueOf((byte) 123));\r\n    assertEquals(123, ((Double) bean.get(\"doubleProperty\")).doubleValue(), 0.005);\r\n    BeanUtils.setProperty(bean, \"doubleProperty\", Double.valueOf(123));\r\n    assertEquals(123, ((Double) bean.get(\"doubleProperty\")).doubleValue(), 0.005);\r\n    BeanUtils.setProperty(bean, \"doubleProperty\", Float.valueOf(123));\r\n    assertEquals(123, ((Double) bean.get(\"doubleProperty\")).doubleValue(), 0.005);\r\n    BeanUtils.setProperty(bean, \"doubleProperty\", Integer.valueOf(123));\r\n    assertEquals(123, ((Double) bean.get(\"doubleProperty\")).doubleValue(), 0.005);\r\n    BeanUtils.setProperty(bean, \"doubleProperty\", Long.valueOf(123));\r\n    assertEquals(123, ((Double) bean.get(\"doubleProperty\")).doubleValue(), 0.005);\r\n    BeanUtils.setProperty(bean, \"doubleProperty\", Short.valueOf((short) 123));\r\n    assertEquals(123, ((Double) bean.get(\"doubleProperty\")).doubleValue(), 0.005);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\DynaBeanUtilsTest.java",
  "methodName" : "testCopyPropertyFloat",
  "sourceCode" : "/**\r\n * Test narrowing and widening conversions on float.\r\n */\r\n@Test\r\nvoid testCopyPropertyFloat() throws Exception {\r\n    BeanUtils.setProperty(bean, \"floatProperty\", Byte.valueOf((byte) 123));\r\n    assertEquals(123, ((Float) bean.get(\"floatProperty\")).floatValue(), 0.005);\r\n    BeanUtils.setProperty(bean, \"floatProperty\", Double.valueOf(123));\r\n    assertEquals(123, ((Float) bean.get(\"floatProperty\")).floatValue(), 0.005);\r\n    BeanUtils.setProperty(bean, \"floatProperty\", Float.valueOf(123));\r\n    assertEquals(123, ((Float) bean.get(\"floatProperty\")).floatValue(), 0.005);\r\n    BeanUtils.setProperty(bean, \"floatProperty\", Integer.valueOf(123));\r\n    assertEquals(123, ((Float) bean.get(\"floatProperty\")).floatValue(), 0.005);\r\n    BeanUtils.setProperty(bean, \"floatProperty\", Long.valueOf(123));\r\n    assertEquals(123, ((Float) bean.get(\"floatProperty\")).floatValue(), 0.005);\r\n    BeanUtils.setProperty(bean, \"floatProperty\", Short.valueOf((short) 123));\r\n    assertEquals(123, ((Float) bean.get(\"floatProperty\")).floatValue(), 0.005);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\DynaBeanUtilsTest.java",
  "methodName" : "testCopyPropertyInteger",
  "sourceCode" : "/**\r\n * Test narrowing and widening conversions on int.\r\n */\r\n@Test\r\nvoid testCopyPropertyInteger() throws Exception {\r\n    BeanUtils.setProperty(bean, \"longProperty\", Byte.valueOf((byte) 123));\r\n    assertEquals(123, ((Integer) bean.get(\"intProperty\")).intValue());\r\n    /*\r\n         * BeanUtils.setProperty(bean, \"longProperty\", new Double((double) 123)); assertEquals((int) 123, ((Integer) bean.get(\"intProperty\")).intValue());\r\n         * BeanUtils.setProperty(bean, \"longProperty\", new Float((float) 123)); assertEquals((int) 123, ((Integer) bean.get(\"intProperty\")).intValue());\r\n         */\r\n    BeanUtils.setProperty(bean, \"longProperty\", Integer.valueOf(123));\r\n    assertEquals(123, ((Integer) bean.get(\"intProperty\")).intValue());\r\n    BeanUtils.setProperty(bean, \"longProperty\", Long.valueOf(123));\r\n    assertEquals(123, ((Integer) bean.get(\"intProperty\")).intValue());\r\n    BeanUtils.setProperty(bean, \"longProperty\", Short.valueOf((short) 123));\r\n    assertEquals(123, ((Integer) bean.get(\"intProperty\")).intValue());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\DynaBeanUtilsTest.java",
  "methodName" : "testCopyPropertyLong",
  "sourceCode" : "/**\r\n * Test narrowing and widening conversions on long.\r\n */\r\n@Test\r\nvoid testCopyPropertyLong() throws Exception {\r\n    BeanUtils.setProperty(bean, \"longProperty\", Byte.valueOf((byte) 123));\r\n    assertEquals(123, ((Long) bean.get(\"longProperty\")).longValue());\r\n    /*\r\n         * BeanUtils.setProperty(bean, \"longProperty\", new Double((double) 123)); assertEquals((long) 123, ((Long) bean.get(\"longProperty\")).longValue());\r\n         * BeanUtils.setProperty(bean, \"longProperty\", new Float((float) 123)); assertEquals((long) 123, ((Long) bean.get(\"longProperty\")).longValue());\r\n         */\r\n    BeanUtils.setProperty(bean, \"longProperty\", Integer.valueOf(123));\r\n    assertEquals(123, ((Long) bean.get(\"longProperty\")).longValue());\r\n    BeanUtils.setProperty(bean, \"longProperty\", Long.valueOf(123));\r\n    assertEquals(123, ((Long) bean.get(\"longProperty\")).longValue());\r\n    BeanUtils.setProperty(bean, \"longProperty\", Short.valueOf((short) 123));\r\n    assertEquals(123, ((Long) bean.get(\"longProperty\")).longValue());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\DynaBeanUtilsTest.java",
  "methodName" : "testCopyPropertyNestedIndexedArray",
  "sourceCode" : "/**\r\n * Test copying a property using a nested indexed array expression, with and without conversions.\r\n */\r\n@Test\r\nvoid testCopyPropertyNestedIndexedArray() throws Exception {\r\n    final int[] origArray = { 0, 10, 20, 30, 40 };\r\n    final int[] intArray = { 0, 0, 0 };\r\n    ((TestBean) bean.get(\"nested\")).setIntArray(intArray);\r\n    final int[] intChanged = { 0, 0, 0 };\r\n    // No conversion required\r\n    BeanUtils.copyProperty(bean, \"nested.intArray[1]\", Integer.valueOf(1));\r\n    checkIntArray((int[]) bean.get(\"intArray\"), origArray);\r\n    intChanged[1] = 1;\r\n    checkIntArray(((TestBean) bean.get(\"nested\")).getIntArray(), intChanged);\r\n    // Widening conversion required\r\n    BeanUtils.copyProperty(bean, \"nested.intArray[1]\", Byte.valueOf((byte) 2));\r\n    checkIntArray((int[]) bean.get(\"intArray\"), origArray);\r\n    intChanged[1] = 2;\r\n    checkIntArray(((TestBean) bean.get(\"nested\")).getIntArray(), intChanged);\r\n    // Narrowing conversion required\r\n    BeanUtils.copyProperty(bean, \"nested.intArray[1]\", Long.valueOf(3));\r\n    checkIntArray((int[]) bean.get(\"intArray\"), origArray);\r\n    intChanged[1] = 3;\r\n    checkIntArray(((TestBean) bean.get(\"nested\")).getIntArray(), intChanged);\r\n    // String conversion required\r\n    BeanUtils.copyProperty(bean, \"nested.intArray[1]\", \"4\");\r\n    checkIntArray((int[]) bean.get(\"intArray\"), origArray);\r\n    intChanged[1] = 4;\r\n    checkIntArray(((TestBean) bean.get(\"nested\")).getIntArray(), intChanged);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\DynaBeanUtilsTest.java",
  "methodName" : "testCopyPropertyNestedMappedMap",
  "sourceCode" : "/**\r\n * Test copying a property using a nested mapped map property.\r\n */\r\n@Test\r\nvoid testCopyPropertyNestedMappedMap() throws Exception {\r\n    final Map<String, Object> origMap = new HashMap<>();\r\n    origMap.put(\"First Key\", \"First Value\");\r\n    origMap.put(\"Second Key\", \"Second Value\");\r\n    final Map<String, Object> changedMap = new HashMap<>();\r\n    changedMap.put(\"First Key\", \"First Value\");\r\n    changedMap.put(\"Second Key\", \"Second Value\");\r\n    // No conversion required\r\n    BeanUtils.copyProperty(bean, \"nested.mapProperty(Second Key)\", \"New Second Value\");\r\n    checkMap((Map<?, ?>) bean.get(\"mapProperty\"), origMap);\r\n    changedMap.put(\"Second Key\", \"New Second Value\");\r\n    checkMap(((TestBean) bean.get(\"nested\")).getMapProperty(), changedMap);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\DynaBeanUtilsTest.java",
  "methodName" : "testCopyPropertyNestedSimple",
  "sourceCode" : "/**\r\n * Test copying a property using a nested simple expression, with and without conversions.\r\n */\r\n@Test\r\nvoid testCopyPropertyNestedSimple() throws Exception {\r\n    bean.set(\"intProperty\", Integer.valueOf(0));\r\n    nested.setIntProperty(0);\r\n    // No conversion required\r\n    BeanUtils.copyProperty(bean, \"nested.intProperty\", Integer.valueOf(1));\r\n    assertEquals(0, ((Integer) bean.get(\"intProperty\")).intValue());\r\n    assertEquals(1, nested.getIntProperty());\r\n    // Widening conversion required\r\n    BeanUtils.copyProperty(bean, \"nested.intProperty\", Byte.valueOf((byte) 2));\r\n    assertEquals(0, ((Integer) bean.get(\"intProperty\")).intValue());\r\n    assertEquals(2, nested.getIntProperty());\r\n    // Narrowing conversion required\r\n    BeanUtils.copyProperty(bean, \"nested.intProperty\", Long.valueOf(3));\r\n    assertEquals(0, ((Integer) bean.get(\"intProperty\")).intValue());\r\n    assertEquals(3, nested.getIntProperty());\r\n    // String conversion required\r\n    BeanUtils.copyProperty(bean, \"nested.intProperty\", \"4\");\r\n    assertEquals(0, ((Integer) bean.get(\"intProperty\")).intValue());\r\n    assertEquals(4, nested.getIntProperty());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\DynaBeanUtilsTest.java",
  "methodName" : "testCopyPropertyNull",
  "sourceCode" : "/**\r\n * Test copying a null property value.\r\n */\r\n@Test\r\nvoid testCopyPropertyNull() throws Exception {\r\n    bean.set(\"nullProperty\", \"non-null value\");\r\n    BeanUtils.copyProperty(bean, \"nullProperty\", null);\r\n    assertNull(bean.get(\"nullProperty\"), \"nullProperty is null\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\DynaBeanUtilsTest.java",
  "methodName" : "testCopyPropertyShort",
  "sourceCode" : "/**\r\n * Test narrowing and widening conversions on short.\r\n */\r\n@Test\r\nvoid testCopyPropertyShort() throws Exception {\r\n    BeanUtils.setProperty(bean, \"shortProperty\", Byte.valueOf((byte) 123));\r\n    assertEquals((short) 123, ((Short) bean.get(\"shortProperty\")).shortValue());\r\n    /*\r\n         * BeanUtils.setProperty(bean, \"shortProperty\", new Double((double) 123)); assertEquals((short) 123, ((Short) bean.get(\"shortProperty\")).shortValue());\r\n         * BeanUtils.setProperty(bean, \"shortProperty\", new Float((float) 123)); assertEquals((short) 123, ((Short) bean.get(\"shortProperty\")).shortValue());\r\n         */\r\n    BeanUtils.setProperty(bean, \"shortProperty\", Integer.valueOf(123));\r\n    assertEquals((short) 123, ((Short) bean.get(\"shortProperty\")).shortValue());\r\n    BeanUtils.setProperty(bean, \"shortProperty\", Long.valueOf(123));\r\n    assertEquals((short) 123, ((Short) bean.get(\"shortProperty\")).shortValue());\r\n    BeanUtils.setProperty(bean, \"shortProperty\", Short.valueOf((short) 123));\r\n    assertEquals((short) 123, ((Short) bean.get(\"shortProperty\")).shortValue());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\DynaBeanUtilsTest.java",
  "methodName" : "testDescribe",
  "sourceCode" : "/**\r\n * Test the describe() method.\r\n */\r\n@Test\r\nvoid testDescribe() throws Exception {\r\n    final Map<String, Object> map = PropertyUtils.describe(bean);\r\n    // Verify existence of all the properties that should be present\r\n    for (final String describe : describes) {\r\n        assertTrue(map.containsKey(describe), \"Property '\" + describe + \"' is present\");\r\n    }\r\n    assertFalse(map.containsKey(\"writeOnlyProperty\"), \"Property 'writeOnlyProperty' is not present\");\r\n    // Verify the values of scalar properties\r\n    assertEquals(Boolean.TRUE, map.get(\"booleanProperty\"), \"Value of 'booleanProperty'\");\r\n    assertEquals(Byte.valueOf((byte) 121), map.get(\"byteProperty\"), \"Value of 'byteProperty'\");\r\n    assertEquals(Double.valueOf(321.0), map.get(\"doubleProperty\"), \"Value of 'doubleProperty'\");\r\n    assertEquals(Float.valueOf((float) 123.0), map.get(\"floatProperty\"), \"Value of 'floatProperty'\");\r\n    assertEquals(Integer.valueOf(123), map.get(\"intProperty\"), \"Value of 'intProperty'\");\r\n    assertEquals(Long.valueOf(321), map.get(\"longProperty\"), \"Value of 'longProperty'\");\r\n    assertEquals(Short.valueOf((short) 987), map.get(\"shortProperty\"), \"Value of 'shortProperty'\");\r\n    assertEquals(\"This is a string\", (String) map.get(\"stringProperty\"), \"Value of 'stringProperty'\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\DynaBeanUtilsTest.java",
  "methodName" : "testGetArrayProperty",
  "sourceCode" : "/**\r\n * tests the string and int arrays of TestBean\r\n */\r\n@Test\r\nvoid testGetArrayProperty() throws Exception {\r\n    String[] arr = BeanUtils.getArrayProperty(bean, \"stringArray\");\r\n    final String[] comp = (String[]) bean.get(\"stringArray\");\r\n    assertEquals(comp.length, arr.length, \"String array length = \" + comp.length);\r\n    arr = BeanUtils.getArrayProperty(bean, \"intArray\");\r\n    final int[] iarr = (int[]) bean.get(\"intArray\");\r\n    assertEquals(iarr.length, arr.length, \"String array length = \" + iarr.length);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\DynaBeanUtilsTest.java",
  "methodName" : "testGetGeneralProperty",
  "sourceCode" : "/**\r\n * tests getting a 'whatever' property\r\n */\r\n@Test\r\nvoid testGetGeneralProperty() throws Exception {\r\n    final String val = BeanUtils.getProperty(bean, \"nested.intIndexed[2]\");\r\n    final String comp = String.valueOf(bean.get(\"intIndexed\", 2));\r\n    assertEquals(val, comp, \"nested.intIndexed[2] == \" + comp);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\DynaBeanUtilsTest.java",
  "methodName" : "testGetIndexedProperty1",
  "sourceCode" : "/**\r\n * tests getting an indexed property\r\n */\r\n@Test\r\nvoid testGetIndexedProperty1() throws Exception {\r\n    String val = BeanUtils.getIndexedProperty(bean, \"intIndexed[3]\");\r\n    String comp = String.valueOf(bean.get(\"intIndexed\", 3));\r\n    assertEquals(val, comp, \"intIndexed[3] == \" + comp);\r\n    val = BeanUtils.getIndexedProperty(bean, \"stringIndexed[3]\");\r\n    comp = (String) bean.get(\"stringIndexed\", 3);\r\n    assertEquals(val, comp, \"stringIndexed[3] == \" + comp);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\DynaBeanUtilsTest.java",
  "methodName" : "testGetIndexedProperty2",
  "sourceCode" : "/**\r\n * tests getting an indexed property\r\n */\r\n@Test\r\nvoid testGetIndexedProperty2() throws Exception {\r\n    String val = BeanUtils.getIndexedProperty(bean, \"intIndexed\", 3);\r\n    String comp = String.valueOf(bean.get(\"intIndexed\", 3));\r\n    assertEquals(val, comp, \"intIndexed,3 == \" + comp);\r\n    val = BeanUtils.getIndexedProperty(bean, \"stringIndexed\", 3);\r\n    comp = (String) bean.get(\"stringIndexed\", 3);\r\n    assertEquals(val, comp, \"stringIndexed,3 == \" + comp);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\DynaBeanUtilsTest.java",
  "methodName" : "testGetNestedProperty",
  "sourceCode" : "/**\r\n * tests getting a nested property\r\n */\r\n@Test\r\nvoid testGetNestedProperty() throws Exception {\r\n    final String val = BeanUtils.getNestedProperty(bean, \"nested.stringProperty\");\r\n    final String comp = nested.getStringProperty();\r\n    assertEquals(val, comp, \"nested.StringProperty == \" + comp);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\DynaBeanUtilsTest.java",
  "methodName" : "testGetSimpleProperty",
  "sourceCode" : "/**\r\n * tests getting a 'whatever' property\r\n */\r\n@Test\r\nvoid testGetSimpleProperty() throws Exception {\r\n    final String val = BeanUtils.getSimpleProperty(bean, \"shortProperty\");\r\n    final String comp = String.valueOf(bean.get(\"shortProperty\"));\r\n    assertEquals(val, comp, \"shortProperty == \" + comp);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\DynaBeanUtilsTest.java",
  "methodName" : "testPopulateArrayElements",
  "sourceCode" : "/**\r\n * Test populate() method on individual array elements.\r\n */\r\n@Test\r\nvoid testPopulateArrayElements() throws Exception {\r\n    final HashMap<String, Object> map = new HashMap<>();\r\n    map.put(\"intIndexed[0]\", \"100\");\r\n    map.put(\"intIndexed[2]\", \"120\");\r\n    map.put(\"intIndexed[4]\", \"140\");\r\n    BeanUtils.populate(bean, map);\r\n    final Integer intIndexed0 = (Integer) bean.get(\"intIndexed\", 0);\r\n    assertEquals(100, intIndexed0.intValue(), \"intIndexed[0] is 100\");\r\n    final Integer intIndexed1 = (Integer) bean.get(\"intIndexed\", 1);\r\n    assertEquals(10, intIndexed1.intValue(), \"intIndexed[1] is 10\");\r\n    final Integer intIndexed2 = (Integer) bean.get(\"intIndexed\", 2);\r\n    assertEquals(120, intIndexed2.intValue(), \"intIndexed[2] is 120\");\r\n    final Integer intIndexed3 = (Integer) bean.get(\"intIndexed\", 3);\r\n    assertEquals(30, intIndexed3.intValue(), \"intIndexed[3] is 30\");\r\n    final Integer intIndexed4 = (Integer) bean.get(\"intIndexed\", 4);\r\n    assertEquals(140, intIndexed4.intValue(), \"intIndexed[4] is 140\");\r\n    map.clear();\r\n    map.put(\"stringIndexed[1]\", \"New String 1\");\r\n    map.put(\"stringIndexed[3]\", \"New String 3\");\r\n    BeanUtils.populate(bean, map);\r\n    assertEquals(\"String 0\", (String) bean.get(\"stringIndexed\", 0), \"stringIndexed[0] is \\\"String 0\\\"\");\r\n    assertEquals(\"New String 1\", (String) bean.get(\"stringIndexed\", 1), \"stringIndexed[1] is \\\"New String 1\\\"\");\r\n    assertEquals(\"String 2\", (String) bean.get(\"stringIndexed\", 2), \"stringIndexed[2] is \\\"String 2\\\"\");\r\n    assertEquals(\"New String 3\", (String) bean.get(\"stringIndexed\", 3), \"stringIndexed[3] is \\\"New String 3\\\"\");\r\n    assertEquals(\"String 4\", (String) bean.get(\"stringIndexed\", 4), \"stringIndexed[4] is \\\"String 4\\\"\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\DynaBeanUtilsTest.java",
  "methodName" : "testPopulateArrayProperties",
  "sourceCode" : "/**\r\n * Test populate() method on array properties as a whole.\r\n */\r\n@Test\r\nvoid testPopulateArrayProperties() throws Exception {\r\n    final HashMap<String, Object> map = new HashMap<>();\r\n    // int[] intArray = new int[] { 123, 456, 789 };\r\n    final String[] intArrayIn = { \"123\", \"456\", \"789\" };\r\n    map.put(\"intArray\", intArrayIn);\r\n    String[] stringArray = { \"New String 0\", \"New String 1\" };\r\n    map.put(\"stringArray\", stringArray);\r\n    BeanUtils.populate(bean, map);\r\n    final int[] intArray = (int[]) bean.get(\"intArray\");\r\n    assertNotNull(intArray, \"intArray is present\");\r\n    assertEquals(3, intArray.length, \"intArray length\");\r\n    assertEquals(123, intArray[0], \"intArray[0]\");\r\n    assertEquals(456, intArray[1], \"intArray[1]\");\r\n    assertEquals(789, intArray[2], \"intArray[2]\");\r\n    stringArray = (String[]) bean.get(\"stringArray\");\r\n    assertNotNull(stringArray, \"stringArray is present\");\r\n    assertEquals(2, stringArray.length, \"stringArray length\");\r\n    assertEquals(\"New String 0\", stringArray[0], \"stringArray[0]\");\r\n    assertEquals(\"New String 1\", stringArray[1], \"stringArray[1]\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\DynaBeanUtilsTest.java",
  "methodName" : "testPopulateMapped",
  "sourceCode" : "/**\r\n * Test populate() on mapped properties.\r\n */\r\n@Test\r\nvoid testPopulateMapped() throws Exception {\r\n    final HashMap<String, Object> map = new HashMap<>();\r\n    map.put(\"mappedProperty(First Key)\", \"New First Value\");\r\n    map.put(\"mappedProperty(Third Key)\", \"New Third Value\");\r\n    BeanUtils.populate(bean, map);\r\n    assertEquals(\"New First Value\", (String) bean.get(\"mappedProperty\", \"First Key\"), \"mappedProperty(First Key)\");\r\n    assertEquals(\"Second Value\", (String) bean.get(\"mappedProperty\", \"Second Key\"), \"mappedProperty(Second Key)\");\r\n    assertEquals(\"New Third Value\", (String) bean.get(\"mappedProperty\", \"Third Key\"), \"mappedProperty(Third Key)\");\r\n    assertNull(bean.get(\"mappedProperty\", \"Fourth Key\"), \"mappedProperty(Fourth Key\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\DynaBeanUtilsTest.java",
  "methodName" : "testPopulateNested",
  "sourceCode" : "/**\r\n * Test populate() method on nested properties.\r\n */\r\n@Test\r\nvoid testPopulateNested() throws Exception {\r\n    final HashMap<String, Object> map = new HashMap<>();\r\n    map.put(\"nested.booleanProperty\", \"false\");\r\n    // booleanSecond is left at true\r\n    map.put(\"nested.doubleProperty\", \"432.0\");\r\n    // floatProperty is left at 123.0\r\n    map.put(\"nested.intProperty\", \"543\");\r\n    // longProperty is left at 321\r\n    map.put(\"nested.shortProperty\", \"654\");\r\n    // stringProperty is left at \"This is a string\"\r\n    BeanUtils.populate(bean, map);\r\n    final TestBean nested = (TestBean) bean.get(\"nested\");\r\n    assertFalse(nested.getBooleanProperty(), \"booleanProperty is false\");\r\n    assertTrue(nested.isBooleanSecond(), \"booleanSecond is true\");\r\n    assertEquals(432.0, nested.getDoubleProperty(), 0.005, \"doubleProperty is 432.0\");\r\n    assertEquals((float) 123.0, nested.getFloatProperty(), (float) 0.005, \"floatProperty is 123.0\");\r\n    assertEquals(543, nested.getIntProperty(), \"intProperty is 543\");\r\n    assertEquals(321, nested.getLongProperty(), \"longProperty is 321\");\r\n    assertEquals((short) 654, nested.getShortProperty(), \"shortProperty is 654\");\r\n    assertEquals(\"This is a string\", nested.getStringProperty(), \"stringProperty is \\\"This is a string\\\"\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\DynaBeanUtilsTest.java",
  "methodName" : "testPopulateScalar",
  "sourceCode" : "/**\r\n * Test populate() method on scalar properties.\r\n */\r\n@Test\r\nvoid testPopulateScalar() throws Exception {\r\n    bean.set(\"nullProperty\", \"non-null value\");\r\n    final HashMap<String, Object> map = new HashMap<>();\r\n    map.put(\"booleanProperty\", \"false\");\r\n    // booleanSecond is left at true\r\n    map.put(\"doubleProperty\", \"432.0\");\r\n    // floatProperty is left at 123.0\r\n    map.put(\"intProperty\", \"543\");\r\n    // longProperty is left at 321\r\n    map.put(\"nullProperty\", null);\r\n    map.put(\"shortProperty\", \"654\");\r\n    // stringProperty is left at \"This is a string\"\r\n    BeanUtils.populate(bean, map);\r\n    final Boolean booleanProperty = (Boolean) bean.get(\"booleanProperty\");\r\n    assertFalse(booleanProperty.booleanValue(), \"booleanProperty is false\");\r\n    final Boolean booleanSecond = (Boolean) bean.get(\"booleanSecond\");\r\n    assertTrue(booleanSecond.booleanValue(), \"booleanSecond is true\");\r\n    final Double doubleProperty = (Double) bean.get(\"doubleProperty\");\r\n    assertEquals(432.0, doubleProperty.doubleValue(), 0.005, \"doubleProperty is 432.0\");\r\n    final Float floatProperty = (Float) bean.get(\"floatProperty\");\r\n    assertEquals((float) 123.0, floatProperty.floatValue(), (float) 0.005, \"floatProperty is 123.0\");\r\n    final Integer intProperty = (Integer) bean.get(\"intProperty\");\r\n    assertEquals(543, intProperty.intValue(), \"intProperty is 543\");\r\n    final Long longProperty = (Long) bean.get(\"longProperty\");\r\n    assertEquals(321, longProperty.longValue(), \"longProperty is 321\");\r\n    assertNull(bean.get(\"nullProperty\"), \"nullProperty is null\");\r\n    final Short shortProperty = (Short) bean.get(\"shortProperty\");\r\n    assertEquals((short) 654, shortProperty.shortValue(), \"shortProperty is 654\");\r\n    assertEquals(\"This is a string\", (String) bean.get(\"stringProperty\"), \"stringProperty is \\\"This is a string\\\"\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\DynaBeanUtilsTest.java",
  "methodName" : "testSetPropertyNull",
  "sourceCode" : "/**\r\n * Test setting a null property value.\r\n */\r\n@Test\r\nvoid testSetPropertyNull() throws Exception {\r\n    bean.set(\"nullProperty\", \"non-null value\");\r\n    BeanUtils.setProperty(bean, \"nullProperty\", null);\r\n    assertNull(bean.get(\"nullProperty\"), \"nullProperty is null\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\DynaBeanUtilsTest.java",
  "methodName" : "testSetPropertyNullValues",
  "sourceCode" : "/**\r\n * Test calling setProperty() with null property values.\r\n */\r\n@Test\r\nvoid testSetPropertyNullValues() throws Exception {\r\n    Object oldValue;\r\n    Object newValue;\r\n    // Scalar value into array\r\n    oldValue = PropertyUtils.getSimpleProperty(bean, \"stringArray\");\r\n    BeanUtils.setProperty(bean, \"stringArray\", null);\r\n    newValue = PropertyUtils.getSimpleProperty(bean, \"stringArray\");\r\n    assertNotNull(newValue, \"stringArray is not null\");\r\n    assertInstanceOf(String[].class, newValue, \"stringArray of correct type\");\r\n    assertEquals(1, ((String[]) newValue).length, \"stringArray length\");\r\n    PropertyUtils.setProperty(bean, \"stringArray\", oldValue);\r\n    // Indexed value into array\r\n    oldValue = PropertyUtils.getSimpleProperty(bean, \"stringArray\");\r\n    BeanUtils.setProperty(bean, \"stringArray[2]\", null);\r\n    newValue = PropertyUtils.getSimpleProperty(bean, \"stringArray\");\r\n    assertNotNull(newValue, \"stringArray is not null\");\r\n    assertInstanceOf(String[].class, newValue, \"stringArray of correct type\");\r\n    assertEquals(5, ((String[]) newValue).length, \"stringArray length\");\r\n    assertNull(((String[]) newValue)[2], \"stringArray[2] is null\");\r\n    PropertyUtils.setProperty(bean, \"stringArray\", oldValue);\r\n    // Value into scalar\r\n    BeanUtils.setProperty(bean, \"stringProperty\", null);\r\n    assertNull(BeanUtils.getProperty(bean, \"stringProperty\"), \"stringProperty is now null\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\DynaBeanUtilsTest.java",
  "methodName" : "testSetPropertyOnPrimitiveWrappers",
  "sourceCode" : "/**\r\n * Test converting to and from primitive wrapper types.\r\n */\r\n@Test\r\nvoid testSetPropertyOnPrimitiveWrappers() throws Exception {\r\n    BeanUtils.setProperty(bean, \"intProperty\", Integer.valueOf(1));\r\n    assertEquals(1, ((Integer) bean.get(\"intProperty\")).intValue());\r\n    BeanUtils.setProperty(bean, \"stringProperty\", Integer.valueOf(1));\r\n    assertEquals(1, Integer.parseInt((String) bean.get(\"stringProperty\")));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\DynaPropertyTest.java",
  "methodName" : "testEqualsObject",
  "sourceCode" : "/**\r\n * Class under test for boolean equals(Object)\r\n */\r\n@Test\r\nvoid testEqualsObject() {\r\n    assertEquals(testPropertyWithName, testProperty1Duplicate);\r\n    assertEquals(testPropertyWithNameAndType, testProperty2Duplicate);\r\n    assertEquals(testPropertyWithNameAndTypeAndContentType, testProperty3Duplicate);\r\n    assertFalse(testPropertyWithName.equals(testPropertyWithNameAndType));\r\n    assertFalse(testPropertyWithNameAndType.equals(testPropertyWithNameAndTypeAndContentType));\r\n    assertFalse(testPropertyWithName.equals(null));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\DynaPropertyTest.java",
  "methodName" : "testHashCode",
  "sourceCode" : "/**\r\n * Class under test for int hashCode(Object)\r\n */\r\n@Test\r\nvoid testHashCode() {\r\n    final int initialHashCode = testPropertyWithNameAndTypeAndContentType.hashCode();\r\n    assertEquals(testPropertyWithName.hashCode(), testProperty1Duplicate.hashCode());\r\n    assertEquals(testPropertyWithNameAndType.hashCode(), testProperty2Duplicate.hashCode());\r\n    assertEquals(testPropertyWithNameAndTypeAndContentType.hashCode(), testProperty3Duplicate.hashCode());\r\n    assertEquals(initialHashCode, testPropertyWithNameAndTypeAndContentType.hashCode());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\DynaPropertyUtilsTest.java",
  "methodName" : "testCopyPropertiesMap",
  "sourceCode" : "/**\r\n * Test copyProperties() when the origin is a {@code Map}.\r\n */\r\n@Test\r\nvoid testCopyPropertiesMap() throws Exception {\r\n    final Map<String, Object> map = new HashMap<>();\r\n    map.put(\"booleanProperty\", Boolean.FALSE);\r\n    map.put(\"doubleProperty\", Double.valueOf(333.0));\r\n    map.put(\"dupProperty\", new String[] { \"New 0\", \"New 1\", \"New 2\" });\r\n    map.put(\"floatProperty\", Float.valueOf((float) 222.0));\r\n    map.put(\"intArray\", new int[] { 0, 100, 200 });\r\n    map.put(\"intProperty\", Integer.valueOf(111));\r\n    map.put(\"longProperty\", Long.valueOf(444));\r\n    map.put(\"shortProperty\", Short.valueOf((short) 555));\r\n    map.put(\"stringProperty\", \"New String Property\");\r\n    PropertyUtils.copyProperties(bean, map);\r\n    // Scalar properties\r\n    assertEquals(false, ((Boolean) bean.get(\"booleanProperty\")).booleanValue(), \"booleanProperty\");\r\n    assertEquals(333.0, ((Double) bean.get(\"doubleProperty\")).doubleValue(), 0.005, \"doubleProperty\");\r\n    assertEquals((float) 222.0, ((Float) bean.get(\"floatProperty\")).floatValue(), (float) 0.005, \"floatProperty\");\r\n    assertEquals(111, ((Integer) bean.get(\"intProperty\")).intValue(), \"intProperty\");\r\n    assertEquals(444, ((Long) bean.get(\"longProperty\")).longValue(), \"longProperty\");\r\n    assertEquals((short) 555, ((Short) bean.get(\"shortProperty\")).shortValue(), \"shortProperty\");\r\n    assertEquals(\"New String Property\", (String) bean.get(\"stringProperty\"), \"stringProperty\");\r\n    // Indexed Properties\r\n    final String[] dupProperty = (String[]) bean.get(\"dupProperty\");\r\n    assertNotNull(dupProperty, \"dupProperty present\");\r\n    assertEquals(3, dupProperty.length, \"dupProperty length\");\r\n    assertEquals(\"New 0\", dupProperty[0], \"dupProperty[0]\");\r\n    assertEquals(\"New 1\", dupProperty[1], \"dupProperty[1]\");\r\n    assertEquals(\"New 2\", dupProperty[2], \"dupProperty[2]\");\r\n    final int[] intArray = (int[]) bean.get(\"intArray\");\r\n    assertNotNull(intArray, \"intArray present\");\r\n    assertEquals(3, intArray.length, \"intArray length\");\r\n    assertEquals(0, intArray[0], \"intArray[0]\");\r\n    assertEquals(100, intArray[1], \"intArray[1]\");\r\n    assertEquals(200, intArray[2], \"intArray[2]\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\DynaPropertyUtilsTest.java",
  "methodName" : "testDescribe",
  "sourceCode" : "/**\r\n * Test the describe() method.\r\n */\r\n@Test\r\nvoid testDescribe() throws Exception {\r\n    final Map<String, Object> map = PropertyUtils.describe(bean);\r\n    // Verify existence of all the properties that should be present\r\n    for (final String describe : describes) {\r\n        assertTrue(map.containsKey(describe), \"Property '\" + describe + \"' is present\");\r\n    }\r\n    assertFalse(map.containsKey(\"writeOnlyProperty\"), \"Property 'writeOnlyProperty' is not present\");\r\n    // Verify the values of scalar properties\r\n    assertEquals(Boolean.TRUE, map.get(\"booleanProperty\"), \"Value of 'booleanProperty'\");\r\n    assertEquals(Double.valueOf(321.0), map.get(\"doubleProperty\"), \"Value of 'doubleProperty'\");\r\n    assertEquals(Float.valueOf((float) 123.0), map.get(\"floatProperty\"), \"Value of 'floatProperty'\");\r\n    assertEquals(Integer.valueOf(123), map.get(\"intProperty\"), \"Value of 'intProperty'\");\r\n    assertEquals(Long.valueOf(321), map.get(\"longProperty\"), \"Value of 'longProperty'\");\r\n    assertEquals(Short.valueOf((short) 987), map.get(\"shortProperty\"), \"Value of 'shortProperty'\");\r\n    assertEquals(\"This is a string\", (String) map.get(\"stringProperty\"), \"Value of 'stringProperty'\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\DynaPropertyUtilsTest.java",
  "methodName" : "testGetIndexedArguments",
  "sourceCode" : "/**\r\n * Corner cases on getIndexedProperty invalid arguments.\r\n */\r\n@Test\r\nvoid testGetIndexedArguments() {\r\n    // Use explicit index argument\r\n    assertThrows(NullPointerException.class, () -> PropertyUtils.getIndexedProperty(null, \"intArray\", 0));\r\n    assertThrows(NullPointerException.class, () -> PropertyUtils.getIndexedProperty(bean, null, 0));\r\n    // Use index expression\r\n    assertThrows(NullPointerException.class, () -> PropertyUtils.getIndexedProperty(null, \"intArray[0]\"));\r\n    assertThrows(NoSuchMethodException.class, () -> PropertyUtils.getIndexedProperty(bean, \"[0]\"));\r\n    assertThrows(IllegalArgumentException.class, () -> PropertyUtils.getIndexedProperty(bean, \"intArray\"));\r\n    // Use explicit index argument\r\n    assertThrows(NullPointerException.class, () -> PropertyUtils.getIndexedProperty(null, \"intIndexed\", 0));\r\n    assertThrows(NullPointerException.class, () -> PropertyUtils.getIndexedProperty(bean, null, 0));\r\n    // Use index expression\r\n    assertThrows(NullPointerException.class, () -> PropertyUtils.getIndexedProperty(null, \"intIndexed[0]\"));\r\n    assertThrows(NoSuchMethodException.class, () -> PropertyUtils.getIndexedProperty(bean, \"[0]\"));\r\n    assertThrows(IllegalArgumentException.class, () -> PropertyUtils.getIndexedProperty(bean, \"intIndexed\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\DynaPropertyUtilsTest.java",
  "methodName" : "testGetIndexedValues",
  "sourceCode" : "/**\r\n * Positive and negative tests on getIndexedProperty valid arguments.\r\n */\r\n@Test\r\nvoid testGetIndexedValues() throws Exception {\r\n    Object value = null;\r\n    // Use explicit key argument\r\n    for (int i = 0; i < 5; i++) {\r\n        value = PropertyUtils.getIndexedProperty(bean, \"intArray\", i);\r\n        assertNotNull(value, \"intArray returned value \" + i);\r\n        assertInstanceOf(Integer.class, value, \"intArray returned Integer \" + i);\r\n        assertEquals(i * 10, ((Integer) value).intValue(), \"intArray returned correct \" + i);\r\n        value = PropertyUtils.getIndexedProperty(bean, \"intIndexed\", i);\r\n        assertNotNull(value, \"intIndexed returned value \" + i);\r\n        assertInstanceOf(Integer.class, value, \"intIndexed returned Integer \" + i);\r\n        assertEquals(i * 10, ((Integer) value).intValue(), \"intIndexed returned correct \" + i);\r\n        value = PropertyUtils.getIndexedProperty(bean, \"listIndexed\", i);\r\n        assertNotNull(value, \"listIndexed returned value \" + i);\r\n        assertInstanceOf(String.class, value, \"list returned String \" + i);\r\n        assertEquals(\"String \" + i, (String) value, \"listIndexed returned correct \" + i);\r\n        value = PropertyUtils.getIndexedProperty(bean, \"stringArray\", i);\r\n        assertNotNull(value, \"stringArray returned value \" + i);\r\n        assertInstanceOf(String.class, value, \"stringArray returned String \" + i);\r\n        assertEquals(\"String \" + i, (String) value, \"stringArray returned correct \" + i);\r\n        value = PropertyUtils.getIndexedProperty(bean, \"stringIndexed\", i);\r\n        assertNotNull(value, \"stringIndexed returned value \" + i);\r\n        assertInstanceOf(String.class, value, \"stringIndexed returned String \" + i);\r\n        assertEquals(\"String \" + i, (String) value, \"stringIndexed returned correct \" + i);\r\n    }\r\n    // Use key expression\r\n    for (int i = 0; i < 5; i++) {\r\n        value = PropertyUtils.getIndexedProperty(bean, \"intArray[\" + i + \"]\");\r\n        assertNotNull(value, \"intArray returned value \" + i);\r\n        assertInstanceOf(Integer.class, value, \"intArray returned Integer \" + i);\r\n        assertEquals(i * 10, ((Integer) value).intValue(), \"intArray returned correct \" + i);\r\n        value = PropertyUtils.getIndexedProperty(bean, \"intIndexed[\" + i + \"]\");\r\n        assertNotNull(value, \"intIndexed returned value \" + i);\r\n        assertInstanceOf(Integer.class, value, \"intIndexed returned Integer \" + i);\r\n        assertEquals(i * 10, ((Integer) value).intValue(), \"intIndexed returned correct \" + i);\r\n        value = PropertyUtils.getIndexedProperty(bean, \"listIndexed[\" + i + \"]\");\r\n        assertNotNull(value, \"listIndexed returned value \" + i);\r\n        assertInstanceOf(String.class, value, \"listIndexed returned String \" + i);\r\n        assertEquals(\"String \" + i, (String) value, \"listIndexed returned correct \" + i);\r\n        value = PropertyUtils.getIndexedProperty(bean, \"stringArray[\" + i + \"]\");\r\n        assertNotNull(value, \"stringArray returned value \" + i);\r\n        assertInstanceOf(String.class, value, \"stringArray returned String \" + i);\r\n        assertEquals(\"String \" + i, (String) value, \"stringArray returned correct \" + i);\r\n        value = PropertyUtils.getIndexedProperty(bean, \"stringIndexed[\" + i + \"]\");\r\n        assertNotNull(value, \"stringIndexed returned value \" + i);\r\n        assertInstanceOf(String.class, value, \"stringIndexed returned String \" + i);\r\n        assertEquals(\"String \" + i, (String) value, \"stringIndexed returned correct \" + i);\r\n    }\r\n    // Index out of bounds tests\r\n    assertThrows(ArrayIndexOutOfBoundsException.class, () -> PropertyUtils.getIndexedProperty(bean, \"intArray\", -1));\r\n    assertThrows(ArrayIndexOutOfBoundsException.class, () -> PropertyUtils.getIndexedProperty(bean, \"intArray\", 5));\r\n    assertThrows(ArrayIndexOutOfBoundsException.class, () -> PropertyUtils.getIndexedProperty(bean, \"intIndexed\", -1));\r\n    assertThrows(ArrayIndexOutOfBoundsException.class, () -> PropertyUtils.getIndexedProperty(bean, \"intIndexed\", 5));\r\n    assertThrows(IndexOutOfBoundsException.class, () -> PropertyUtils.getIndexedProperty(bean, \"listIndexed\", -1));\r\n    assertThrows(IndexOutOfBoundsException.class, () -> PropertyUtils.getIndexedProperty(bean, \"listIndexed\", 5));\r\n    assertThrows(ArrayIndexOutOfBoundsException.class, () -> PropertyUtils.getIndexedProperty(bean, \"stringArray\", -1));\r\n    assertThrows(ArrayIndexOutOfBoundsException.class, () -> PropertyUtils.getIndexedProperty(bean, \"stringArray\", 5));\r\n    assertThrows(ArrayIndexOutOfBoundsException.class, () -> PropertyUtils.getIndexedProperty(bean, \"stringIndexed\", -1));\r\n    assertThrows(ArrayIndexOutOfBoundsException.class, () -> PropertyUtils.getIndexedProperty(bean, \"stringIndexed\", 5));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\DynaPropertyUtilsTest.java",
  "methodName" : "testGetMappedArguments",
  "sourceCode" : "/**\r\n * Corner cases on getMappedProperty invalid arguments.\r\n */\r\n@Test\r\nvoid testGetMappedArguments() {\r\n    // Use explicit key argument\r\n    assertThrows(NullPointerException.class, () -> PropertyUtils.getMappedProperty(null, \"mappedProperty\", \"First Key\"));\r\n    assertThrows(NullPointerException.class, () -> PropertyUtils.getMappedProperty(bean, null, \"First Key\"));\r\n    assertThrows(NullPointerException.class, () -> PropertyUtils.getMappedProperty(bean, \"mappedProperty\", null));\r\n    // Use key expression\r\n    assertThrows(NullPointerException.class, () -> PropertyUtils.getMappedProperty(null, \"mappedProperty(First Key)\"));\r\n    assertThrows(NoSuchMethodException.class, () -> PropertyUtils.getMappedProperty(bean, \"(Second Key)\"));\r\n    assertThrows(IllegalArgumentException.class, () -> PropertyUtils.getMappedProperty(bean, \"mappedProperty\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\DynaPropertyUtilsTest.java",
  "methodName" : "testGetMappedPeriods",
  "sourceCode" : "/**\r\n * Test getting mapped values with periods in the key.\r\n */\r\n@Test\r\nvoid testGetMappedPeriods() throws Exception {\r\n    bean.set(\"mappedProperty\", \"key.with.a.dot\", \"Special Value\");\r\n    assertEquals(\"Special Value\", (String) bean.get(\"mappedProperty\", \"key.with.a.dot\"), \"Can retrieve directly\");\r\n    assertEquals(\"Special Value\", PropertyUtils.getMappedProperty(bean, \"mappedProperty\", \"key.with.a.dot\"), \"Can retrieve via getMappedProperty\");\r\n    assertEquals(\"Special Value\", PropertyUtils.getNestedProperty(bean, \"mappedProperty(key.with.a.dot)\"), \"Can retrieve via getNestedProperty\");\r\n    bean.set(\"mappedObjects\", \"nested.property\", new TestBean());\r\n    assertNotNull(bean.get(\"mappedObjects\", \"nested.property\"), \"Can retrieve directly\");\r\n    assertEquals(\"This is a string\", PropertyUtils.getNestedProperty(bean, \"mappedObjects(nested.property).stringProperty\"), \"Can retrieve nested\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\DynaPropertyUtilsTest.java",
  "methodName" : "testGetMappedSlashes",
  "sourceCode" : "/**\r\n * Test getting mapped values with slashes in the key. This is different from periods because slashes are not syntactically significant.\r\n */\r\n@Test\r\nvoid testGetMappedSlashes() throws Exception {\r\n    bean.set(\"mappedProperty\", \"key/with/a/slash\", \"Special Value\");\r\n    assertEquals(\"Special Value\", bean.get(\"mappedProperty\", \"key/with/a/slash\"), \"Can retrieve directly\");\r\n    assertEquals(\"Special Value\", PropertyUtils.getMappedProperty(bean, \"mappedProperty\", \"key/with/a/slash\"), \"Can retrieve via getMappedProperty\");\r\n    assertEquals(\"Special Value\", PropertyUtils.getNestedProperty(bean, \"mappedProperty(key/with/a/slash)\"), \"Can retrieve via getNestedProperty\");\r\n    bean.set(\"mappedObjects\", \"nested/property\", new TestBean());\r\n    assertNotNull(bean.get(\"mappedObjects\", \"nested/property\"), \"Can retrieve directly\");\r\n    assertEquals(\"This is a string\", PropertyUtils.getNestedProperty(bean, \"mappedObjects(nested/property).stringProperty\"), \"Can retrieve nested\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\DynaPropertyUtilsTest.java",
  "methodName" : "testGetMappedValues",
  "sourceCode" : "/**\r\n * Positive and negative tests on getMappedProperty valid arguments.\r\n */\r\n@Test\r\nvoid testGetMappedValues() throws Exception {\r\n    Object value = null;\r\n    // Use explicit key argument\r\n    value = PropertyUtils.getMappedProperty(bean, \"mappedProperty\", \"First Key\");\r\n    assertEquals(\"First Value\", value, \"Can find first value\");\r\n    value = PropertyUtils.getMappedProperty(bean, \"mappedProperty\", \"Second Key\");\r\n    assertEquals(\"Second Value\", value, \"Can find second value\");\r\n    value = PropertyUtils.getMappedProperty(bean, \"mappedProperty\", \"Third Key\");\r\n    assertNull(value, \"Can not find third value\");\r\n    // Use key expression with parentheses\r\n    value = PropertyUtils.getMappedProperty(bean, \"mappedProperty(First Key)\");\r\n    assertEquals(\"First Value\", value, \"Can find first value\");\r\n    value = PropertyUtils.getMappedProperty(bean, \"mappedProperty(Second Key)\");\r\n    assertEquals(\"Second Value\", value, \"Can find second value\");\r\n    value = PropertyUtils.getMappedProperty(bean, \"mappedProperty(Third Key)\");\r\n    assertNull(value, \"Can not find third value\");\r\n    // Use key expression with dotted syntax\r\n    value = PropertyUtils.getNestedProperty(bean, \"mapProperty.First Key\");\r\n    assertEquals(\"First Value\", value, \"Can find first value\");\r\n    value = PropertyUtils.getNestedProperty(bean, \"mapProperty.Second Key\");\r\n    assertEquals(\"Second Value\", value, \"Can find second value\");\r\n    value = PropertyUtils.getNestedProperty(bean, \"mapProperty.Third Key\");\r\n    assertNull(value, \"Can not find third value\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\DynaPropertyUtilsTest.java",
  "methodName" : "testGetNestedArguments",
  "sourceCode" : "/**\r\n * Corner cases on getNestedProperty invalid arguments.\r\n */\r\n@Test\r\nvoid testGetNestedArguments() {\r\n    assertThrows(NullPointerException.class, () -> PropertyUtils.getNestedProperty(null, \"stringProperty\"));\r\n    assertThrows(NullPointerException.class, () -> PropertyUtils.getNestedProperty(bean, null));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\DynaPropertyUtilsTest.java",
  "methodName" : "testGetNestedBoolean",
  "sourceCode" : "/**\r\n * Test getNestedProperty on a boolean property.\r\n */\r\n@Test\r\nvoid testGetNestedBoolean() throws Exception {\r\n    final Object value = PropertyUtils.getNestedProperty(bean, \"nested.booleanProperty\");\r\n    assertNotNull(value, \"Got a value\");\r\n    assertInstanceOf(Boolean.class, value, \"Got correct type\");\r\n    final TestBean nested = (TestBean) bean.get(\"nested\");\r\n    assertEquals(((Boolean) value).booleanValue(), nested.getBooleanProperty(), \"Got correct value\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\DynaPropertyUtilsTest.java",
  "methodName" : "testGetNestedDouble",
  "sourceCode" : "/**\r\n * Test getNestedProperty on a double property.\r\n */\r\n@Test\r\nvoid testGetNestedDouble() throws Exception {\r\n    final Object value = PropertyUtils.getNestedProperty(bean, \"nested.doubleProperty\");\r\n    assertNotNull(value, \"Got a value\");\r\n    assertInstanceOf(Double.class, value, \"Got correct type\");\r\n    final TestBean nested = (TestBean) bean.get(\"nested\");\r\n    assertEquals(((Double) value).doubleValue(), nested.getDoubleProperty(), 0.005, \"Got correct value\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\DynaPropertyUtilsTest.java",
  "methodName" : "testGetNestedFloat",
  "sourceCode" : "/**\r\n * Test getNestedProperty on a float property.\r\n */\r\n@Test\r\nvoid testGetNestedFloat() throws Exception {\r\n    final Object value = PropertyUtils.getNestedProperty(bean, \"nested.floatProperty\");\r\n    assertNotNull(value, \"Got a value\");\r\n    assertInstanceOf(Float.class, value, \"Got correct type\");\r\n    final TestBean nested = (TestBean) bean.get(\"nested\");\r\n    assertEquals(((Float) value).floatValue(), nested.getFloatProperty(), (float) 0.005, \"Got correct value\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\DynaPropertyUtilsTest.java",
  "methodName" : "testGetNestedInt",
  "sourceCode" : "/**\r\n * Test getNestedProperty on an int property.\r\n */\r\n@Test\r\nvoid testGetNestedInt() throws Exception {\r\n    final Object value = PropertyUtils.getNestedProperty(bean, \"nested.intProperty\");\r\n    assertNotNull(value, \"Got a value\");\r\n    assertInstanceOf(Integer.class, value, \"Got correct type\");\r\n    final TestBean nested = (TestBean) bean.get(\"nested\");\r\n    assertEquals(((Integer) value).intValue(), nested.getIntProperty(), \"Got correct value\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\DynaPropertyUtilsTest.java",
  "methodName" : "testGetNestedLong",
  "sourceCode" : "/**\r\n * Test getNestedProperty on a long property.\r\n */\r\n@Test\r\nvoid testGetNestedLong() throws Exception {\r\n    final Object value = PropertyUtils.getNestedProperty(bean, \"nested.longProperty\");\r\n    assertNotNull(value, \"Got a value\");\r\n    assertInstanceOf(Long.class, value, \"Got correct type\");\r\n    final TestBean nested = (TestBean) bean.get(\"nested\");\r\n    assertEquals(((Long) value).longValue(), nested.getLongProperty(), \"Got correct value\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\DynaPropertyUtilsTest.java",
  "methodName" : "testGetNestedReadOnly",
  "sourceCode" : "/**\r\n * Test getNestedProperty on a read-only String property.\r\n */\r\n@Test\r\nvoid testGetNestedReadOnly() throws Exception {\r\n    final Object value = PropertyUtils.getNestedProperty(bean, \"nested.readOnlyProperty\");\r\n    assertNotNull(value, \"Got a value\");\r\n    assertInstanceOf(String.class, value, \"Got correct type\");\r\n    final TestBean nested = (TestBean) bean.get(\"nested\");\r\n    assertEquals((String) value, nested.getReadOnlyProperty(), \"Got correct value\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\DynaPropertyUtilsTest.java",
  "methodName" : "testGetNestedShort",
  "sourceCode" : "/**\r\n * Test getNestedProperty on a short property.\r\n */\r\n@Test\r\nvoid testGetNestedShort() throws Exception {\r\n    final Object value = PropertyUtils.getNestedProperty(bean, \"nested.shortProperty\");\r\n    assertNotNull(value, \"Got a value\");\r\n    assertInstanceOf(Short.class, value, \"Got correct type\");\r\n    final TestBean nested = (TestBean) bean.get(\"nested\");\r\n    assertEquals(((Short) value).shortValue(), nested.getShortProperty(), \"Got correct value\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\DynaPropertyUtilsTest.java",
  "methodName" : "testGetNestedString",
  "sourceCode" : "/**\r\n * Test getNestedProperty on a String property.\r\n */\r\n@Test\r\nvoid testGetNestedString() throws Exception {\r\n    final Object value = PropertyUtils.getNestedProperty(bean, \"nested.stringProperty\");\r\n    assertNotNull(value, \"Got a value\");\r\n    assertInstanceOf(String.class, value, \"Got correct type\");\r\n    final TestBean nested = (TestBean) bean.get(\"nested\");\r\n    assertEquals((String) value, nested.getStringProperty(), \"Got correct value\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\DynaPropertyUtilsTest.java",
  "methodName" : "testGetNestedUnknown",
  "sourceCode" : "/**\r\n * Negative test getNestedProperty on an unknown property.\r\n */\r\n@Test\r\nvoid testGetNestedUnknown() throws Exception {\r\n    assertThrows(NoSuchMethodException.class, () -> PropertyUtils.getNestedProperty(bean, \"nested.unknown\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\DynaPropertyUtilsTest.java",
  "methodName" : "testGetSimpleArguments",
  "sourceCode" : "/**\r\n * Corner cases on getSimpleProperty invalid arguments.\r\n */\r\n@Test\r\nvoid testGetSimpleArguments() {\r\n    assertThrows(NullPointerException.class, () -> PropertyUtils.getSimpleProperty(null, \"stringProperty\"));\r\n    assertThrows(NullPointerException.class, () -> PropertyUtils.getSimpleProperty(bean, null));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\DynaPropertyUtilsTest.java",
  "methodName" : "testGetSimpleBoolean",
  "sourceCode" : "/**\r\n * Test getSimpleProperty on a boolean property.\r\n */\r\n@Test\r\nvoid testGetSimpleBoolean() throws Exception {\r\n    final Object value = PropertyUtils.getSimpleProperty(bean, \"booleanProperty\");\r\n    assertNotNull(value, \"Got a value\");\r\n    assertInstanceOf(Boolean.class, value, \"Got correct type\");\r\n    assertTrue(((Boolean) value).booleanValue(), \"Got correct value\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\DynaPropertyUtilsTest.java",
  "methodName" : "testGetSimpleDouble",
  "sourceCode" : "/**\r\n * Test getSimpleProperty on a double property.\r\n */\r\n@Test\r\nvoid testGetSimpleDouble() throws Exception {\r\n    final Object value = PropertyUtils.getSimpleProperty(bean, \"doubleProperty\");\r\n    assertNotNull(value, \"Got a value\");\r\n    assertInstanceOf(Double.class, value, \"Got correct type\");\r\n    assertEquals(((Double) value).doubleValue(), 321.0, 0.005, \"Got correct value\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\DynaPropertyUtilsTest.java",
  "methodName" : "testGetSimpleFloat",
  "sourceCode" : "/**\r\n * Test getSimpleProperty on a float property.\r\n */\r\n@Test\r\nvoid testGetSimpleFloat() throws Exception {\r\n    final Object value = PropertyUtils.getSimpleProperty(bean, \"floatProperty\");\r\n    assertNotNull(value, \"Got a value\");\r\n    assertInstanceOf(Float.class, value, \"Got correct type\");\r\n    assertEquals(((Float) value).floatValue(), (float) 123.0, (float) 0.005, \"Got correct value\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\DynaPropertyUtilsTest.java",
  "methodName" : "testGetSimpleIndexed",
  "sourceCode" : "/**\r\n * Negative test getSimpleProperty on an indexed property.\r\n */\r\n@Test\r\nvoid testGetSimpleIndexed() throws Exception {\r\n    assertThrows(IllegalArgumentException.class, () -> PropertyUtils.getSimpleProperty(bean, \"intIndexed[0]\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\DynaPropertyUtilsTest.java",
  "methodName" : "testGetSimpleInt",
  "sourceCode" : "/**\r\n * Test getSimpleProperty on an int property.\r\n */\r\n@Test\r\nvoid testGetSimpleInt() throws Exception {\r\n    final Object value = PropertyUtils.getSimpleProperty(bean, \"intProperty\");\r\n    assertNotNull(value, \"Got a value\");\r\n    assertInstanceOf(Integer.class, value, \"Got correct type\");\r\n    assertEquals(((Integer) value).intValue(), 123, \"Got correct value\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\DynaPropertyUtilsTest.java",
  "methodName" : "testGetSimpleLong",
  "sourceCode" : "/**\r\n * Test getSimpleProperty on a long property.\r\n */\r\n@Test\r\nvoid testGetSimpleLong() throws Exception {\r\n    final Object value = PropertyUtils.getSimpleProperty(bean, \"longProperty\");\r\n    assertNotNull(value, \"Got a value\");\r\n    assertInstanceOf(Long.class, value, \"Got correct type\");\r\n    assertEquals(((Long) value).longValue(), 321, \"Got correct value\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\DynaPropertyUtilsTest.java",
  "methodName" : "testGetSimpleNested",
  "sourceCode" : "/**\r\n * Negative test getSimpleProperty on a nested property.\r\n */\r\n@Test\r\nvoid testGetSimpleNested() throws Exception {\r\n    assertThrows(IllegalArgumentException.class, () -> PropertyUtils.getSimpleProperty(bean, \"nested.stringProperty\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\DynaPropertyUtilsTest.java",
  "methodName" : "testGetSimpleShort",
  "sourceCode" : "/**\r\n * Test getSimpleProperty on a short property.\r\n */\r\n@Test\r\nvoid testGetSimpleShort() throws Exception {\r\n    final Object value = PropertyUtils.getSimpleProperty(bean, \"shortProperty\");\r\n    assertNotNull(value, \"Got a value\");\r\n    assertInstanceOf(Short.class, value, \"Got correct type\");\r\n    assertEquals(((Short) value).shortValue(), (short) 987, \"Got correct value\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\DynaPropertyUtilsTest.java",
  "methodName" : "testGetSimpleString",
  "sourceCode" : "/**\r\n * Test getSimpleProperty on a String property.\r\n */\r\n@Test\r\nvoid testGetSimpleString() throws Exception {\r\n    final Object value = PropertyUtils.getSimpleProperty(bean, \"stringProperty\");\r\n    assertNotNull(value, \"Got a value\");\r\n    assertInstanceOf(String.class, value, \"Got correct type\");\r\n    assertEquals((String) value, \"This is a string\", \"Got correct value\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\DynaPropertyUtilsTest.java",
  "methodName" : "testGetSimpleUnknown",
  "sourceCode" : "/**\r\n * Negative test getSimpleProperty on an unknown property.\r\n */\r\n@Test\r\nvoid testGetSimpleUnknown() throws Exception {\r\n    assertThrows(NoSuchMethodException.class, () -> PropertyUtils.getSimpleProperty(bean, \"unknown\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\DynaPropertyUtilsTest.java",
  "methodName" : "testSetIndexedArguments",
  "sourceCode" : "/**\r\n * Corner cases on setIndexedProperty invalid arguments.\r\n */\r\n@Test\r\nvoid testSetIndexedArguments() {\r\n    // Use explicit index argument\r\n    assertThrows(NullPointerException.class, () -> PropertyUtils.setIndexedProperty(null, \"intArray\", 0, Integer.valueOf(1)));\r\n    assertThrows(NullPointerException.class, () -> PropertyUtils.setIndexedProperty(bean, null, 0, Integer.valueOf(1)));\r\n    // Use index expression\r\n    assertThrows(NullPointerException.class, () -> PropertyUtils.setIndexedProperty(null, \"intArray[0]\", Integer.valueOf(1)));\r\n    assertThrows(NoSuchMethodException.class, () -> PropertyUtils.setIndexedProperty(bean, \"[0]\", Integer.valueOf(1)));\r\n    assertThrows(IllegalArgumentException.class, () -> PropertyUtils.setIndexedProperty(bean, \"intArray\", Integer.valueOf(1)));\r\n    // Use explicit index argument\r\n    assertThrows(NullPointerException.class, () -> PropertyUtils.setIndexedProperty(null, \"intIndexed\", 0, Integer.valueOf(1)));\r\n    assertThrows(NullPointerException.class, () -> PropertyUtils.setIndexedProperty(bean, null, 0, Integer.valueOf(1)));\r\n    // Use index expression\r\n    assertThrows(NullPointerException.class, () -> PropertyUtils.setIndexedProperty(null, \"intIndexed[0]\", Integer.valueOf(1)));\r\n    assertThrows(NoSuchMethodException.class, () -> PropertyUtils.setIndexedProperty(bean, \"[0]\", Integer.valueOf(1)));\r\n    assertThrows(IllegalArgumentException.class, () -> PropertyUtils.setIndexedProperty(bean, \"intIndexed\", Integer.valueOf(1)));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\DynaPropertyUtilsTest.java",
  "methodName" : "testSetIndexedValues",
  "sourceCode" : "/**\r\n * Positive and negative tests on setIndexedProperty valid arguments.\r\n */\r\n@Test\r\nvoid testSetIndexedValues() throws Exception {\r\n    Object value = null;\r\n    // Use explicit index argument\r\n    PropertyUtils.setIndexedProperty(bean, \"intArray\", 0, Integer.valueOf(1));\r\n    value = PropertyUtils.getIndexedProperty(bean, \"intArray\", 0);\r\n    assertNotNull(value, \"Returned new value 0\");\r\n    assertInstanceOf(Integer.class, value, \"Returned Integer new value 0\");\r\n    assertEquals(1, ((Integer) value).intValue(), \"Returned correct new value 0\");\r\n    PropertyUtils.setIndexedProperty(bean, \"intIndexed\", 1, Integer.valueOf(11));\r\n    value = PropertyUtils.getIndexedProperty(bean, \"intIndexed\", 1);\r\n    assertNotNull(value, \"Returned new value 1\");\r\n    assertInstanceOf(Integer.class, value, \"Returned Integer new value 1\");\r\n    assertEquals(11, ((Integer) value).intValue(), \"Returned correct new value 1\");\r\n    PropertyUtils.setIndexedProperty(bean, \"listIndexed\", 2, \"New Value 2\");\r\n    value = PropertyUtils.getIndexedProperty(bean, \"listIndexed\", 2);\r\n    assertNotNull(value, \"Returned new value 2\");\r\n    assertInstanceOf(String.class, value, \"Returned String new value 2\");\r\n    assertEquals(\"New Value 2\", (String) value, \"Returned correct new value 2\");\r\n    PropertyUtils.setIndexedProperty(bean, \"stringArray\", 2, \"New Value 2\");\r\n    value = PropertyUtils.getIndexedProperty(bean, \"stringArray\", 2);\r\n    assertNotNull(value, \"Returned new value 2\");\r\n    assertInstanceOf(String.class, value, \"Returned String new value 2\");\r\n    assertEquals(\"New Value 2\", (String) value, \"Returned correct new value 2\");\r\n    PropertyUtils.setIndexedProperty(bean, \"stringArray\", 3, \"New Value 3\");\r\n    value = PropertyUtils.getIndexedProperty(bean, \"stringArray\", 3);\r\n    assertNotNull(value, \"Returned new value 3\");\r\n    assertInstanceOf(String.class, value, \"Returned String new value 3\");\r\n    assertEquals(\"New Value 3\", (String) value, \"Returned correct new value 3\");\r\n    // Use index expression\r\n    PropertyUtils.setIndexedProperty(bean, \"intArray[4]\", Integer.valueOf(1));\r\n    value = PropertyUtils.getIndexedProperty(bean, \"intArray[4]\");\r\n    assertNotNull(value, \"Returned new value 4\");\r\n    assertInstanceOf(Integer.class, value, \"Returned Integer new value 4\");\r\n    assertEquals(1, ((Integer) value).intValue(), \"Returned correct new value 4\");\r\n    PropertyUtils.setIndexedProperty(bean, \"intIndexed[3]\", Integer.valueOf(11));\r\n    value = PropertyUtils.getIndexedProperty(bean, \"intIndexed[3]\");\r\n    assertNotNull(value, \"Returned new value 5\");\r\n    assertInstanceOf(Integer.class, value, \"Returned Integer new value 5\");\r\n    assertEquals(11, ((Integer) value).intValue(), \"Returned correct new value 5\");\r\n    PropertyUtils.setIndexedProperty(bean, \"listIndexed[1]\", \"New Value 2\");\r\n    value = PropertyUtils.getIndexedProperty(bean, \"listIndexed[1]\");\r\n    assertNotNull(value, \"Returned new value 6\");\r\n    assertInstanceOf(String.class, value, \"Returned String new value 6\");\r\n    assertEquals(\"New Value 2\", (String) value, \"Returned correct new value 6\");\r\n    PropertyUtils.setIndexedProperty(bean, \"stringArray[1]\", \"New Value 2\");\r\n    value = PropertyUtils.getIndexedProperty(bean, \"stringArray[2]\");\r\n    assertNotNull(value, \"Returned new value 6\");\r\n    assertInstanceOf(String.class, value, \"Returned String new value 6\");\r\n    assertEquals(\"New Value 2\", (String) value, \"Returned correct new value 6\");\r\n    PropertyUtils.setIndexedProperty(bean, \"stringArray[0]\", \"New Value 3\");\r\n    value = PropertyUtils.getIndexedProperty(bean, \"stringArray[0]\");\r\n    assertNotNull(value, \"Returned new value 7\");\r\n    assertInstanceOf(String.class, value, \"Returned String new value 7\");\r\n    assertEquals(\"New Value 3\", (String) value, \"Returned correct new value 7\");\r\n    // Index out of bounds tests\r\n    assertThrows(ArrayIndexOutOfBoundsException.class, () -> PropertyUtils.setIndexedProperty(bean, \"intArray\", -1, Integer.valueOf(0)));\r\n    assertThrows(ArrayIndexOutOfBoundsException.class, () -> PropertyUtils.setIndexedProperty(bean, \"intArray\", 5, Integer.valueOf(0)));\r\n    assertThrows(ArrayIndexOutOfBoundsException.class, () -> PropertyUtils.setIndexedProperty(bean, \"intIndexed\", -1, Integer.valueOf(0)));\r\n    assertThrows(ArrayIndexOutOfBoundsException.class, () -> PropertyUtils.setIndexedProperty(bean, \"intIndexed\", 5, Integer.valueOf(0)));\r\n    assertThrows(IndexOutOfBoundsException.class, () -> PropertyUtils.setIndexedProperty(bean, \"listIndexed\", 5, \"New String\"));\r\n    assertThrows(IndexOutOfBoundsException.class, () -> PropertyUtils.setIndexedProperty(bean, \"listIndexed\", -1, \"New String\"));\r\n    assertThrows(ArrayIndexOutOfBoundsException.class, () -> PropertyUtils.setIndexedProperty(bean, \"stringArray\", -1, \"New String\"));\r\n    assertThrows(ArrayIndexOutOfBoundsException.class, () -> PropertyUtils.setIndexedProperty(bean, \"stringArray\", 5, \"New String\"));\r\n    assertThrows(ArrayIndexOutOfBoundsException.class, () -> PropertyUtils.setIndexedProperty(bean, \"stringIndexed\", -1, \"New String\"));\r\n    assertThrows(ArrayIndexOutOfBoundsException.class, () -> PropertyUtils.setIndexedProperty(bean, \"stringIndexed\", 5, \"New String\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\DynaPropertyUtilsTest.java",
  "methodName" : "testSetMappedArguments",
  "sourceCode" : "/**\r\n * Corner cases on getMappedProperty invalid arguments.\r\n */\r\n@Test\r\nvoid testSetMappedArguments() {\r\n    // Use explicit key argument\r\n    assertThrows(NullPointerException.class, () -> PropertyUtils.setMappedProperty(null, \"mappedProperty\", \"First Key\", \"First Value\"));\r\n    assertThrows(NullPointerException.class, () -> PropertyUtils.setMappedProperty(bean, null, \"First Key\", \"First Value\"));\r\n    assertThrows(NullPointerException.class, () -> PropertyUtils.setMappedProperty(bean, \"mappedProperty\", null, \"First Value\"));\r\n    // Use key expression\r\n    assertThrows(NullPointerException.class, () -> PropertyUtils.setMappedProperty(null, \"mappedProperty(First Key)\", \"First Value\"));\r\n    assertThrows(NoSuchMethodException.class, () -> PropertyUtils.setMappedProperty(bean, \"(Second Key)\", \"Second Value\"));\r\n    assertThrows(IllegalArgumentException.class, () -> PropertyUtils.setMappedProperty(bean, \"mappedProperty\", \"Third Value\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\DynaPropertyUtilsTest.java",
  "methodName" : "testSetMappedValues",
  "sourceCode" : "/**\r\n * Positive and negative tests on setMappedProperty valid arguments.\r\n */\r\n@Test\r\nvoid testSetMappedValues() throws Exception {\r\n    Object value = null;\r\n    // Use explicit key argument\r\n    value = PropertyUtils.getMappedProperty(bean, \"mappedProperty\", \"Fourth Key\");\r\n    assertNull(value, \"Can not find fourth value\");\r\n    PropertyUtils.setMappedProperty(bean, \"mappedProperty\", \"Fourth Key\", \"Fourth Value\");\r\n    value = PropertyUtils.getMappedProperty(bean, \"mappedProperty\", \"Fourth Key\");\r\n    assertEquals(\"Fourth Value\", value, \"Can find fourth value\");\r\n    // Use key expression with parentheses\r\n    value = PropertyUtils.getMappedProperty(bean, \"mappedProperty(Fifth Key)\");\r\n    assertNull(value, \"Can not find fifth value\");\r\n    PropertyUtils.setMappedProperty(bean, \"mappedProperty(Fifth Key)\", \"Fifth Value\");\r\n    value = PropertyUtils.getMappedProperty(bean, \"mappedProperty(Fifth Key)\");\r\n    assertEquals(\"Fifth Value\", value, \"Can find fifth value\");\r\n    // Use key expression with dotted expression\r\n    value = PropertyUtils.getNestedProperty(bean, \"mapProperty.Sixth Key\");\r\n    assertNull(value, \"Can not find sixth value\");\r\n    PropertyUtils.setNestedProperty(bean, \"mapProperty.Sixth Key\", \"Sixth Value\");\r\n    value = PropertyUtils.getNestedProperty(bean, \"mapProperty.Sixth Key\");\r\n    assertEquals(\"Sixth Value\", value, \"Can find sixth value\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\DynaPropertyUtilsTest.java",
  "methodName" : "testSetNestedArguments",
  "sourceCode" : "/**\r\n * Corner cases on setNestedProperty invalid arguments.\r\n */\r\n@Test\r\nvoid testSetNestedArguments() {\r\n    assertThrows(NullPointerException.class, () -> PropertyUtils.setNestedProperty(null, \"stringProperty\", \"\"));\r\n    assertThrows(NullPointerException.class, () -> PropertyUtils.setNestedProperty(bean, null, \"\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\DynaPropertyUtilsTest.java",
  "methodName" : "testSetNestedBoolean",
  "sourceCode" : "/**\r\n * Test setNextedProperty on a boolean property.\r\n */\r\n@Test\r\nvoid testSetNestedBoolean() throws Exception {\r\n    final boolean oldValue = nested.getBooleanProperty();\r\n    final boolean newValue = !oldValue;\r\n    PropertyUtils.setNestedProperty(bean, \"nested.booleanProperty\", Boolean.valueOf(newValue));\r\n    assertEquals(newValue, nested.getBooleanProperty(), \"Matched new value\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\DynaPropertyUtilsTest.java",
  "methodName" : "testSetNestedDouble",
  "sourceCode" : "/**\r\n * Test setNestedProperty on a double property.\r\n */\r\n@Test\r\nvoid testSetNestedDouble() throws Exception {\r\n    final double oldValue = nested.getDoubleProperty();\r\n    final double newValue = oldValue + 1.0;\r\n    PropertyUtils.setNestedProperty(bean, \"nested.doubleProperty\", Double.valueOf(newValue));\r\n    assertEquals(newValue, nested.getDoubleProperty(), 0.005, \"Matched new value\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\DynaPropertyUtilsTest.java",
  "methodName" : "testSetNestedFloat",
  "sourceCode" : "/**\r\n * Test setNestedProperty on a float property.\r\n */\r\n@Test\r\nvoid testSetNestedFloat() throws Exception {\r\n    final float oldValue = nested.getFloatProperty();\r\n    final float newValue = oldValue + (float) 1.0;\r\n    PropertyUtils.setNestedProperty(bean, \"nested.floatProperty\", Float.valueOf(newValue));\r\n    assertEquals(newValue, nested.getFloatProperty(), (float) 0.005, \"Matched new value\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\DynaPropertyUtilsTest.java",
  "methodName" : "testSetNestedInt",
  "sourceCode" : "/**\r\n * Test setNestedProperty on a int property.\r\n */\r\n@Test\r\nvoid testSetNestedInt() throws Exception {\r\n    final int oldValue = nested.getIntProperty();\r\n    final int newValue = oldValue + 1;\r\n    PropertyUtils.setNestedProperty(bean, \"nested.intProperty\", Integer.valueOf(newValue));\r\n    assertEquals(newValue, nested.getIntProperty(), \"Matched new value\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\DynaPropertyUtilsTest.java",
  "methodName" : "testSetNestedLong",
  "sourceCode" : "/**\r\n * Test setNestedProperty on a long property.\r\n */\r\n@Test\r\nvoid testSetNestedLong() throws Exception {\r\n    final long oldValue = nested.getLongProperty();\r\n    final long newValue = oldValue + 1;\r\n    PropertyUtils.setNestedProperty(bean, \"nested.longProperty\", Long.valueOf(newValue));\r\n    assertEquals(newValue, nested.getLongProperty(), \"Matched new value\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\DynaPropertyUtilsTest.java",
  "methodName" : "testSetNestedReadOnly",
  "sourceCode" : "/**\r\n * Test setNestedProperty on a read-only String property.\r\n */\r\n@Test\r\nvoid testSetNestedReadOnly() throws Exception {\r\n    assertThrows(NoSuchMethodException.class, () -> PropertyUtils.setNestedProperty(bean, \"nested.readOnlyProperty\", nested.getWriteOnlyPropertyValue() + \" Extra Value\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\DynaPropertyUtilsTest.java",
  "methodName" : "testSetNestedShort",
  "sourceCode" : "/**\r\n * Test setNestedProperty on a short property.\r\n */\r\n@Test\r\nvoid testSetNestedShort() throws Exception {\r\n    final short oldValue = nested.getShortProperty();\r\n    short newValue = oldValue;\r\n    newValue++;\r\n    PropertyUtils.setNestedProperty(bean, \"nested.shortProperty\", Short.valueOf(newValue));\r\n    assertEquals(newValue, nested.getShortProperty(), \"Matched new value\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\DynaPropertyUtilsTest.java",
  "methodName" : "testSetNestedString",
  "sourceCode" : "/**\r\n * Test setNestedProperty on a String property.\r\n */\r\n@Test\r\nvoid testSetNestedString() throws Exception {\r\n    final String oldValue = nested.getStringProperty();\r\n    final String newValue = oldValue + \" Extra Value\";\r\n    PropertyUtils.setNestedProperty(bean, \"nested.stringProperty\", newValue);\r\n    assertEquals(newValue, nested.getStringProperty(), \"Matched new value\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\DynaPropertyUtilsTest.java",
  "methodName" : "testSetNestedUnknown",
  "sourceCode" : "/**\r\n * Test setNestedProperty on an unknown property name.\r\n */\r\n@Test\r\nvoid testSetNestedUnknown() throws Exception {\r\n    assertThrows(NoSuchMethodException.class, () -> PropertyUtils.setNestedProperty(bean, \"nested.unknown\", \"New String Value\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\DynaPropertyUtilsTest.java",
  "methodName" : "testSetNestedWriteOnly",
  "sourceCode" : "/**\r\n * Test setNestedProperty on a write-only String property.\r\n */\r\n@Test\r\nvoid testSetNestedWriteOnly() throws Exception {\r\n    final String oldValue = nested.getWriteOnlyPropertyValue();\r\n    final String newValue = oldValue + \" Extra Value\";\r\n    PropertyUtils.setNestedProperty(bean, \"nested.writeOnlyProperty\", newValue);\r\n    assertEquals(newValue, nested.getWriteOnlyPropertyValue(), \"Matched new value\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\DynaPropertyUtilsTest.java",
  "methodName" : "testSetSimpleArguments",
  "sourceCode" : "/**\r\n * Corner cases on setSimpleProperty invalid arguments.\r\n */\r\n@Test\r\nvoid testSetSimpleArguments() {\r\n    assertThrows(NullPointerException.class, () -> PropertyUtils.setSimpleProperty(null, \"stringProperty\", \"\"));\r\n    assertThrows(NullPointerException.class, () -> PropertyUtils.setSimpleProperty(bean, null, \"\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\DynaPropertyUtilsTest.java",
  "methodName" : "testSetSimpleBoolean",
  "sourceCode" : "/**\r\n * Test setSimpleProperty on a boolean property.\r\n */\r\n@Test\r\nvoid testSetSimpleBoolean() throws Exception {\r\n    final boolean oldValue = ((Boolean) bean.get(\"booleanProperty\")).booleanValue();\r\n    final boolean newValue = !oldValue;\r\n    PropertyUtils.setSimpleProperty(bean, \"booleanProperty\", Boolean.valueOf(newValue));\r\n    assertEquals(newValue, ((Boolean) bean.get(\"booleanProperty\")).booleanValue(), \"Matched new value\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\DynaPropertyUtilsTest.java",
  "methodName" : "testSetSimpleDouble",
  "sourceCode" : "/**\r\n * Test setSimpleProperty on a double property.\r\n */\r\n@Test\r\nvoid testSetSimpleDouble() throws Exception {\r\n    final double oldValue = ((Double) bean.get(\"doubleProperty\")).doubleValue();\r\n    final double newValue = oldValue + 1.0;\r\n    PropertyUtils.setSimpleProperty(bean, \"doubleProperty\", Double.valueOf(newValue));\r\n    assertEquals(newValue, ((Double) bean.get(\"doubleProperty\")).doubleValue(), 0.005, \"Matched new value\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\DynaPropertyUtilsTest.java",
  "methodName" : "testSetSimpleFloat",
  "sourceCode" : "/**\r\n * Test setSimpleProperty on a float property.\r\n */\r\n@Test\r\nvoid testSetSimpleFloat() throws Exception {\r\n    final float oldValue = ((Float) bean.get(\"floatProperty\")).floatValue();\r\n    final float newValue = oldValue + (float) 1.0;\r\n    PropertyUtils.setSimpleProperty(bean, \"floatProperty\", Float.valueOf(newValue));\r\n    assertEquals(newValue, ((Float) bean.get(\"floatProperty\")).floatValue(), (float) 0.005, \"Matched new value\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\DynaPropertyUtilsTest.java",
  "methodName" : "testSetSimpleIndexed",
  "sourceCode" : "/**\r\n * Negative test setSimpleProperty on an indexed property.\r\n */\r\n@Test\r\nvoid testSetSimpleIndexed() throws Exception {\r\n    assertThrows(IllegalArgumentException.class, () -> PropertyUtils.setSimpleProperty(bean, \"stringIndexed[0]\", \"New String Value\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\DynaPropertyUtilsTest.java",
  "methodName" : "testSetSimpleInt",
  "sourceCode" : "/**\r\n * Test setSimpleProperty on a int property.\r\n */\r\n@Test\r\nvoid testSetSimpleInt() throws Exception {\r\n    final int oldValue = ((Integer) bean.get(\"intProperty\")).intValue();\r\n    final int newValue = oldValue + 1;\r\n    PropertyUtils.setSimpleProperty(bean, \"intProperty\", Integer.valueOf(newValue));\r\n    assertEquals(newValue, ((Integer) bean.get(\"intProperty\")).intValue(), \"Matched new value\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\DynaPropertyUtilsTest.java",
  "methodName" : "testSetSimpleLong",
  "sourceCode" : "/**\r\n * Test setSimpleProperty on a long property.\r\n */\r\n@Test\r\nvoid testSetSimpleLong() throws Exception {\r\n    final long oldValue = ((Long) bean.get(\"longProperty\")).longValue();\r\n    final long newValue = oldValue + 1;\r\n    PropertyUtils.setSimpleProperty(bean, \"longProperty\", Long.valueOf(newValue));\r\n    assertEquals(newValue, ((Long) bean.get(\"longProperty\")).longValue(), \"Matched new value\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\DynaPropertyUtilsTest.java",
  "methodName" : "testSetSimpleNested",
  "sourceCode" : "/**\r\n * Negative test setSimpleProperty on a nested property.\r\n */\r\n@Test\r\nvoid testSetSimpleNested() throws Exception {\r\n    assertThrows(IllegalArgumentException.class, () -> PropertyUtils.setSimpleProperty(bean, \"nested.stringProperty\", \"New String Value\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\DynaPropertyUtilsTest.java",
  "methodName" : "testSetSimpleShort",
  "sourceCode" : "/**\r\n * Test setSimpleProperty on a short property.\r\n */\r\n@Test\r\nvoid testSetSimpleShort() throws Exception {\r\n    final short oldValue = ((Short) bean.get(\"shortProperty\")).shortValue();\r\n    short newValue = oldValue;\r\n    newValue++;\r\n    PropertyUtils.setSimpleProperty(bean, \"shortProperty\", Short.valueOf(newValue));\r\n    assertEquals(newValue, ((Short) bean.get(\"shortProperty\")).shortValue(), \"Matched new value\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\DynaPropertyUtilsTest.java",
  "methodName" : "testSetSimpleString",
  "sourceCode" : "/**\r\n * Test setSimpleProperty on a String property.\r\n */\r\n@Test\r\nvoid testSetSimpleString() throws Exception {\r\n    final String oldValue = (String) bean.get(\"stringProperty\");\r\n    final String newValue = oldValue + \" Extra Value\";\r\n    PropertyUtils.setSimpleProperty(bean, \"stringProperty\", newValue);\r\n    assertEquals(newValue, (String) bean.get(\"stringProperty\"), \"Matched new value\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\DynaPropertyUtilsTest.java",
  "methodName" : "testSetSimpleUnknown",
  "sourceCode" : "/**\r\n * Test setSimpleProperty on an unknown property name.\r\n */\r\n@Test\r\nvoid testSetSimpleUnknown() throws Exception {\r\n    assertThrows(NoSuchMethodException.class, () -> PropertyUtils.setSimpleProperty(bean, \"unknown\", \"New String Value\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\expression\\DefaultResolverTest.java",
  "methodName" : "testGetIndex",
  "sourceCode" : "/**\r\n * Test getIndex() method.\r\n */\r\n@Test\r\nvoid testGetIndex() throws Exception {\r\n    String label = null;\r\n    // Simple Properties (expect -1)\r\n    for (int i = 0; i < validProperties.length; i++) {\r\n        label = \"Simple \" + label(validProperties[i], i);\r\n        assertEquals(-1, resolver.getIndex(validProperties[i]), label);\r\n    }\r\n    // Indexed Properties (expect correct index value)\r\n    for (int i = 0; i < validIndexProperties.length; i++) {\r\n        label = \"Indexed \" + label(validIndexProperties[i], i);\r\n        assertEquals(validIndexValues[i], resolver.getIndex(validIndexProperties[i]), label);\r\n    }\r\n    // Mapped Properties (expect -1)\r\n    for (int i = 0; i < validMapProperties.length; i++) {\r\n        label = \"Mapped \" + label(validMapProperties[i], i);\r\n        assertEquals(-1, resolver.getIndex(validMapProperties[i]), label);\r\n    }\r\n    // Missing Index Value\r\n    label = \"Missing Index\";\r\n    assertThrows(IllegalArgumentException.class, () -> resolver.getIndex(\"foo[]\"));\r\n    // Malformed\r\n    label = \"Malformed\";\r\n    assertThrows(IllegalArgumentException.class, () -> resolver.getIndex(\"foo[12\"));\r\n    // Non-numeric\r\n    label = \"Malformed\";\r\n    final IllegalArgumentException e = assertThrows(IllegalArgumentException.class, () -> resolver.getIndex(\"foo[BAR]\"));\r\n    assertEquals(\"Invalid index value 'BAR'\", e.getMessage(), label + \" Error Message\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\expression\\DefaultResolverTest.java",
  "methodName" : "testGetMapKey",
  "sourceCode" : "/**\r\n * Test getMapKey() method.\r\n */\r\n@Test\r\nvoid testGetMapKey() {\r\n    String label = null;\r\n    // Simple Properties (expect null)\r\n    for (int i = 0; i < validProperties.length; i++) {\r\n        label = \"Simple \" + label(validProperties[i], i);\r\n        assertEquals(null, resolver.getKey(validProperties[i]), label);\r\n    }\r\n    // Indexed Properties (expect null)\r\n    for (int i = 0; i < validIndexProperties.length; i++) {\r\n        label = \"Indexed \" + label(validIndexProperties[i], i);\r\n        assertEquals(null, resolver.getKey(validIndexProperties[i]), label);\r\n    }\r\n    // Mapped Properties (expect correct map key)\r\n    for (int i = 0; i < validMapProperties.length; i++) {\r\n        label = \"Mapped \" + label(validMapProperties[i], i);\r\n        assertEquals(validMapKeys[i], resolver.getKey(validMapProperties[i]), label);\r\n    }\r\n    // Malformed\r\n    label = \"Malformed\";\r\n    final IllegalArgumentException e = assertThrows(IllegalArgumentException.class, () -> resolver.getKey(\"foo(bar\"));\r\n    assertEquals(\"Missing End Delimiter\", e.getMessage(), label + \" Error Message\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\expression\\DefaultResolverTest.java",
  "methodName" : "testGetName",
  "sourceCode" : "/**\r\n * Test getName() method.\r\n */\r\n@Test\r\nvoid testGetName() {\r\n    String label = null;\r\n    // Simple Properties\r\n    for (int i = 0; i < validProperties.length; i++) {\r\n        label = \"Simple \" + label(validProperties[i], i);\r\n        assertEquals(validNames[i], resolver.getProperty(validProperties[i]), label);\r\n    }\r\n    // Indexed Properties\r\n    for (int i = 0; i < validIndexProperties.length; i++) {\r\n        label = \"Indexed \" + label(validIndexProperties[i], i);\r\n        assertEquals(validIndexNames[i], resolver.getProperty(validIndexProperties[i]), label);\r\n    }\r\n    // Mapped Properties\r\n    for (int i = 0; i < validMapProperties.length; i++) {\r\n        label = \"Mapped \" + label(validMapProperties[i], i);\r\n        assertEquals(validMapNames[i], resolver.getProperty(validMapProperties[i]), label);\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\expression\\DefaultResolverTest.java",
  "methodName" : "testIsIndexed",
  "sourceCode" : "/**\r\n * Test isIndexed() method.\r\n */\r\n@Test\r\nvoid testIsIndexed() {\r\n    String label = null;\r\n    // Simple Properties (expect -1)\r\n    for (int i = 0; i < validProperties.length; i++) {\r\n        label = \"Simple \" + label(validProperties[i], i);\r\n        assertFalse(resolver.isIndexed(validProperties[i]), label);\r\n    }\r\n    // Indexed Properties (expect correct index value)\r\n    for (int i = 0; i < validIndexProperties.length; i++) {\r\n        label = \"Indexed \" + label(validIndexProperties[i], i);\r\n        assertTrue(resolver.isIndexed(validIndexProperties[i]), label);\r\n    }\r\n    // Mapped Properties (expect -1)\r\n    for (int i = 0; i < validMapProperties.length; i++) {\r\n        label = \"Mapped \" + label(validMapProperties[i], i);\r\n        assertFalse(resolver.isIndexed(validMapProperties[i]), label);\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\expression\\DefaultResolverTest.java",
  "methodName" : "testIsMapped",
  "sourceCode" : "/**\r\n * Test isMapped() method.\r\n */\r\n@Test\r\nvoid testIsMapped() {\r\n    String label = null;\r\n    // Simple Properties (expect null)\r\n    for (int i = 0; i < validProperties.length; i++) {\r\n        label = \"Simple \" + label(validProperties[i], i);\r\n        assertFalse(resolver.isMapped(validProperties[i]), label);\r\n    }\r\n    // Indexed Properties (expect null)\r\n    for (int i = 0; i < validIndexProperties.length; i++) {\r\n        label = \"Indexed \" + label(validIndexProperties[i], i);\r\n        assertFalse(resolver.isMapped(validIndexProperties[i]), label);\r\n    }\r\n    // Mapped Properties (expect correct map key)\r\n    for (int i = 0; i < validMapProperties.length; i++) {\r\n        label = \"Mapped \" + label(validMapProperties[i], i);\r\n        assertTrue(resolver.isMapped(validMapProperties[i]), label);\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\expression\\DefaultResolverTest.java",
  "methodName" : "testNext",
  "sourceCode" : "/**\r\n * Test next() method.\r\n */\r\n@Test\r\nvoid testNext() {\r\n    String label = null;\r\n    for (int i = 0; i < nextExpressions.length; i++) {\r\n        label = label(nextExpressions[i], i);\r\n        assertEquals(nextProperties[i], resolver.next(nextExpressions[i]), label);\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\expression\\DefaultResolverTest.java",
  "methodName" : "testRemove",
  "sourceCode" : "/**\r\n * Test remove() method.\r\n */\r\n@Test\r\nvoid testRemove() {\r\n    String label = null;\r\n    for (int i = 0; i < nextExpressions.length; i++) {\r\n        label = label(nextExpressions[i], i);\r\n        assertEquals(removeProperties[i], resolver.remove(nextExpressions[i]), label);\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\FluentPropertyBeanIntrospectorTest.java",
  "methodName" : "testInitNoPrefix",
  "sourceCode" : "/**\r\n * Tries to create an instance without a prefix for write methods.\r\n */\r\n@Test\r\nvoid testInitNoPrefix() {\r\n    assertThrows(NullPointerException.class, () -> new FluentPropertyBeanIntrospector(null));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\FluentPropertyBeanIntrospectorTest.java",
  "methodName" : "testIntrospection",
  "sourceCode" : "/**\r\n * Tests whether correct property descriptors are detected.\r\n */\r\n@Test\r\nvoid testIntrospection() throws IntrospectionException {\r\n    final PropertyUtilsBean pu = new PropertyUtilsBean();\r\n    final FluentPropertyBeanIntrospector introspector = new FluentPropertyBeanIntrospector();\r\n    pu.addBeanIntrospector(introspector);\r\n    final Map<String, PropertyDescriptor> props = createDescriptorMap(pu.getPropertyDescriptors(FluentIntrospectionTestBean.class));\r\n    PropertyDescriptor pd = fetchDescriptor(props, \"name\");\r\n    assertNotNull(pd.getReadMethod(), \"No read method for name\");\r\n    assertNotNull(pd.getWriteMethod(), \"No write method for name\");\r\n    fetchDescriptor(props, \"stringProperty\");\r\n    pd = fetchDescriptor(props, \"fluentProperty\");\r\n    assertNull(pd.getReadMethod(), \"Read method for fluentProperty\");\r\n    assertNotNull(pd.getWriteMethod(), \"No write method for fluentProperty\");\r\n    pd = fetchDescriptor(props, \"fluentGetProperty\");\r\n    assertNotNull(pd.getReadMethod(), \"No read method for fluentGetProperty\");\r\n    assertNotNull(pd.getWriteMethod(), \"No write method for fluentGetProperty\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\FluentPropertyBeanIntrospectorTest.java",
  "methodName" : "testIntrospectionCaps",
  "sourceCode" : "@Test\r\nvoid testIntrospectionCaps() throws Exception {\r\n    final PropertyUtilsBean pu = new PropertyUtilsBean();\r\n    final FluentPropertyBeanIntrospector introspector = new FluentPropertyBeanIntrospector();\r\n    pu.addBeanIntrospector(introspector);\r\n    final Map<String, PropertyDescriptor> props = createDescriptorMap(pu.getPropertyDescriptors(CapsBean.class));\r\n    final PropertyDescriptor aDescriptor = fetchDescriptor(props, \"URI\");\r\n    assertNotNull(aDescriptor, \"missing property\");\r\n    assertNotNull(aDescriptor.getReadMethod(), \"No read method for uri\");\r\n    assertNotNull(aDescriptor.getWriteMethod(), \"No write method for uri\");\r\n    assertNull(props.get(\"uRI\"), \"Should not find mis-capitalized property\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\IndexedPropertyTest.java",
  "methodName" : "testArrayIndexedPropertyDescriptor",
  "sourceCode" : "/**\r\n * Test IndexedPropertyDescriptor for an Array\r\n */\r\n@Test\r\nvoid testArrayIndexedPropertyDescriptor() throws Exception {\r\n    final PropertyDescriptor descriptor = propertyUtilsBean.getPropertyDescriptor(bean, \"stringArray\");\r\n    assertNotNull(descriptor, \"No Array Descriptor\");\r\n    assertEquals(IndexedPropertyDescriptor.class, descriptor.getClass(), \"Not IndexedPropertyDescriptor\");\r\n    assertEquals(testArray.getClass(), descriptor.getPropertyType(), \"PropertyDescriptor Type invalid\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\IndexedPropertyTest.java",
  "methodName" : "testArrayIndexedReadMethod",
  "sourceCode" : "/**\r\n * Test Indexed Read Method for an Array\r\n */\r\n@Test\r\nvoid testArrayIndexedReadMethod() throws Exception {\r\n    final IndexedPropertyDescriptor descriptor = (IndexedPropertyDescriptor) propertyUtilsBean.getPropertyDescriptor(bean, \"stringArray\");\r\n    assertNotNull(descriptor.getIndexedReadMethod(), \"No Array Indexed Read Method\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\IndexedPropertyTest.java",
  "methodName" : "testArrayIndexedWriteMethod",
  "sourceCode" : "/**\r\n * Test Indexed Write Method for an Array\r\n */\r\n@Test\r\nvoid testArrayIndexedWriteMethod() throws Exception {\r\n    final IndexedPropertyDescriptor descriptor = (IndexedPropertyDescriptor) propertyUtilsBean.getPropertyDescriptor(bean, \"stringArray\");\r\n    assertNotNull(descriptor.getIndexedWriteMethod(), \"No Array Indexed Write Method\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\IndexedPropertyTest.java",
  "methodName" : "testArrayListIndexedPropertyDescriptor",
  "sourceCode" : "/**\r\n * Test IndexedPropertyDescriptor for an ArrayList\r\n */\r\n@Test\r\nvoid testArrayListIndexedPropertyDescriptor() throws Exception {\r\n    final PropertyDescriptor descriptor = propertyUtilsBean.getPropertyDescriptor(bean, \"arrayList\");\r\n    assertNotNull(descriptor, \"No ArrayList Descriptor\");\r\n    if (Jira492IndexedListsSupport.supportsIndexedLists()) {\r\n        assertEquals(IndexedPropertyDescriptor.class, descriptor.getClass(), \"Not IndexedPropertyDescriptor\");\r\n    }\r\n    assertEquals(ArrayList.class, descriptor.getPropertyType(), \"PropertyDescriptor Type invalid\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\IndexedPropertyTest.java",
  "methodName" : "testArrayListReadMethod",
  "sourceCode" : "/**\r\n * Test Read Method for an ArrayList\r\n */\r\n@Test\r\nvoid testArrayListReadMethod() throws Exception {\r\n    final PropertyDescriptor descriptor = propertyUtilsBean.getPropertyDescriptor(bean, \"arrayList\");\r\n    assertNotNull(descriptor.getReadMethod(), \"No ArrayList Read Method\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\IndexedPropertyTest.java",
  "methodName" : "testArrayListWriteMethod",
  "sourceCode" : "/**\r\n * Test Write Method for an ArrayList\r\n */\r\n@Test\r\nvoid testArrayListWriteMethod() throws Exception {\r\n    final PropertyDescriptor descriptor = propertyUtilsBean.getPropertyDescriptor(bean, \"arrayList\");\r\n    assertNotNull(descriptor.getWriteMethod(), \"No ArrayList Write Method\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\IndexedPropertyTest.java",
  "methodName" : "testArrayReadMethod",
  "sourceCode" : "/**\r\n * Test Read Method for an Array\r\n */\r\n@Test\r\nvoid testArrayReadMethod() throws Exception {\r\n    final PropertyDescriptor descriptor = propertyUtilsBean.getPropertyDescriptor(bean, \"stringArray\");\r\n    assertNotNull(descriptor.getReadMethod(), \"No Array Read Method\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\IndexedPropertyTest.java",
  "methodName" : "testArrayWriteMethod",
  "sourceCode" : "/**\r\n * Test Write Method for an Array\r\n */\r\n@Test\r\nvoid testArrayWriteMethod() throws Exception {\r\n    final PropertyDescriptor descriptor = propertyUtilsBean.getPropertyDescriptor(bean, \"stringArray\");\r\n    assertNotNull(descriptor.getWriteMethod(), \"No Array Write Method\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\IndexedPropertyTest.java",
  "methodName" : "testGetArray",
  "sourceCode" : "/**\r\n * Test getting an array property\r\n */\r\n@Test\r\nvoid testGetArray() throws Exception {\r\n    assertEquals(testArray, propertyUtilsBean.getProperty(bean, \"stringArray\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\IndexedPropertyTest.java",
  "methodName" : "testGetArrayAsString",
  "sourceCode" : "/**\r\n * Test getting an array property as a String\r\n *\r\n * NOTE: Why does retrieving array just return the first element in the array, whereas retrieving a List returns a comma separated list of all the elements?\r\n */\r\n@Test\r\nvoid testGetArrayAsString() throws Exception {\r\n    assertEquals(\"array-0\", beanUtilsBean.getProperty(bean, \"stringArray\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\IndexedPropertyTest.java",
  "methodName" : "testGetArrayItemA",
  "sourceCode" : "/**\r\n * Test getting an indexed item of an Array using getProperty(\"name[x]\")\r\n */\r\n@Test\r\nvoid testGetArrayItemA() throws Exception {\r\n    assertEquals(\"array-1\", beanUtilsBean.getProperty(bean, \"stringArray[1]\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\IndexedPropertyTest.java",
  "methodName" : "testGetArrayItemB",
  "sourceCode" : "/**\r\n * Test getting an indexed item of an Array using getIndexedProperty(\"name\")\r\n */\r\n@Test\r\nvoid testGetArrayItemB() throws Exception {\r\n    assertEquals(\"array-1\", beanUtilsBean.getIndexedProperty(bean, \"stringArray\", 1));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\IndexedPropertyTest.java",
  "methodName" : "testGetArrayList",
  "sourceCode" : "/**\r\n * Test getting an ArrayList\r\n */\r\n@Test\r\nvoid testGetArrayList() throws Exception {\r\n    assertEquals(arrayList, propertyUtilsBean.getProperty(bean, \"arrayList\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\IndexedPropertyTest.java",
  "methodName" : "testGetList",
  "sourceCode" : "/**\r\n * Test getting a List\r\n *\r\n * JDK 1.3.1_04: Test Passes JDK 1.4.2_05: Test Fails - fails NoSuchMethodException, i.e. reason as testListReadMethod() failed.\r\n */\r\n@Test\r\nvoid testGetList() throws Exception {\r\n    assertEquals(testList, propertyUtilsBean.getProperty(bean, \"stringList\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\IndexedPropertyTest.java",
  "methodName" : "testGetListAsString",
  "sourceCode" : "/**\r\n * Test getting a List property as a String\r\n *\r\n * JDK 1.3.1_04: Test Passes JDK 1.4.2_05: Test Fails - fails NoSuchMethodException, i.e. reason as testListReadMethod() failed.\r\n */\r\n@Test\r\nvoid testGetListAsString() throws Exception {\r\n    assertEquals(\"list-0\", beanUtilsBean.getProperty(bean, \"stringList\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\IndexedPropertyTest.java",
  "methodName" : "testGetListItemA",
  "sourceCode" : "/**\r\n * Test getting an indexed item of a List using getProperty(\"name[x]\")\r\n */\r\n@Test\r\nvoid testGetListItemA() throws Exception {\r\n    assertEquals(\"list-1\", beanUtilsBean.getProperty(bean, \"stringList[1]\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\IndexedPropertyTest.java",
  "methodName" : "testGetListItemB",
  "sourceCode" : "/**\r\n * Test getting an indexed item of a List using getIndexedProperty(\"name\")\r\n */\r\n@Test\r\nvoid testGetListItemB() throws Exception {\r\n    assertEquals(\"list-1\", beanUtilsBean.getIndexedProperty(bean, \"stringList\", 1));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\IndexedPropertyTest.java",
  "methodName" : "testListIndexedPropertyDescriptor",
  "sourceCode" : "/**\r\n * Test IndexedPropertyDescriptor for a List\r\n */\r\n@Test\r\nvoid testListIndexedPropertyDescriptor() throws Exception {\r\n    final PropertyDescriptor descriptor = propertyUtilsBean.getPropertyDescriptor(bean, \"stringList\");\r\n    assertNotNull(descriptor, \"No List Descriptor\");\r\n    if (Jira492IndexedListsSupport.supportsIndexedLists()) {\r\n        // BEANUTILS-492 - can't assume lists are handled as arrays in Java 8+\r\n        assertEquals(IndexedPropertyDescriptor.class, descriptor.getClass(), \"Not IndexedPropertyDescriptor\");\r\n    }\r\n    assertEquals(List.class, descriptor.getPropertyType(), \"PropertyDescriptor Type invalid\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\IndexedPropertyTest.java",
  "methodName" : "testListIndexedReadMethod",
  "sourceCode" : "/**\r\n * Test Indexed Read Method for a List\r\n */\r\n@Test\r\nvoid testListIndexedReadMethod() throws Exception {\r\n    final PropertyDescriptor descriptor = propertyUtilsBean.getPropertyDescriptor(bean, \"stringList\");\r\n    assertNotNull(descriptor, \"stringList descriptor not found\");\r\n    assumeTrue(Jira492IndexedListsSupport.supportsIndexedLists(), \"JDK does not support index bean properties on java.util.List\");\r\n    assertNotNull(((IndexedPropertyDescriptor) descriptor).getIndexedReadMethod(), \"No List Indexed Read Method\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\IndexedPropertyTest.java",
  "methodName" : "testListIndexedWriteMethod",
  "sourceCode" : "/**\r\n * Test Indexed Write Method for a List\r\n */\r\n@Test\r\nvoid testListIndexedWriteMethod() throws Exception {\r\n    final PropertyDescriptor descriptor = propertyUtilsBean.getPropertyDescriptor(bean, \"stringList\");\r\n    assertNotNull(descriptor, \"stringList descriptor not found\");\r\n    assumeTrue(Jira492IndexedListsSupport.supportsIndexedLists(), \"JDK does not support index bean properties on java.util.List\");\r\n    assertNotNull(((IndexedPropertyDescriptor) descriptor).getIndexedWriteMethod(), \"No List Indexed Write Method\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\IndexedPropertyTest.java",
  "methodName" : "testListReadMethod",
  "sourceCode" : "/**\r\n * Test Read Method for a List\r\n *\r\n * JDK 1.3.1_04: Test Passes JDK 1.4.2_05: Test Fails - getter which returns java.util.List not returned by IndexedPropertyDescriptor.getReadMethod();\r\n */\r\n@Test\r\nvoid testListReadMethod() throws Exception {\r\n    final PropertyDescriptor descriptor = propertyUtilsBean.getPropertyDescriptor(bean, \"stringList\");\r\n    assertNotNull(descriptor.getReadMethod(), \"No List Read Method\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\IndexedPropertyTest.java",
  "methodName" : "testListWriteMethod",
  "sourceCode" : "/**\r\n * Test Write Method for a List\r\n *\r\n * JDK 1.3.1_04: Test Passes JDK 1.4.2_05: Test Fails - setter which java.util.List argument not returned by IndexedPropertyDescriptor.getWriteMethod();\r\n */\r\n@Test\r\nvoid testListWriteMethod() throws Exception {\r\n    final PropertyDescriptor descriptor = propertyUtilsBean.getPropertyDescriptor(bean, \"stringList\");\r\n    assertNotNull(descriptor.getWriteMethod(), \"No List Write Method\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\IndexedPropertyTest.java",
  "methodName" : "testSetArray",
  "sourceCode" : "/**\r\n * Test setting an Array property\r\n *\r\n * JDK 1.3.1_04 and 1.4.2_05: Test Fails - IllegalArgumentException can't invoke setter, argument type mismatch\r\n *\r\n * Fails because of a bug in BeanUtilsBean.setProperty() method. Value is always converted to the array's component type which in this case is a String.\r\n * Then it calls the setStringArray(String[]) passing a String rather than String[] causing this exception. If there isn't an \"index\" value then the\r\n * PropertyType (rather than IndexedPropertyType) should be used.\r\n */\r\n@Test\r\nvoid testSetArray() throws Exception {\r\n    beanUtilsBean.setProperty(bean, \"stringArray\", newArray);\r\n    final Object value = bean.getStringArray();\r\n    assertEquals(newArray.getClass(), value.getClass(), \"Type is different\");\r\n    final String[] array = (String[]) value;\r\n    assertEquals(newArray.length, array.length, \"Array Length is different\");\r\n    for (int i = 0; i < array.length; i++) {\r\n        assertEquals(newArray[i], array[i], \"Element \" + i + \" is different\");\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\IndexedPropertyTest.java",
  "methodName" : "testSetArrayItemA",
  "sourceCode" : "/**\r\n * Test setting an indexed item of an Array using setProperty(\"name[x]\", value)\r\n */\r\n@Test\r\nvoid testSetArrayItemA() throws Exception {\r\n    beanUtilsBean.setProperty(bean, \"stringArray[1]\", \"modified-1\");\r\n    assertEquals(\"modified-1\", bean.getStringArray(1));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\IndexedPropertyTest.java",
  "methodName" : "testSetArrayItemB",
  "sourceCode" : "/**\r\n * Test setting an indexed item of an Array using setIndexedProperty(\"name\", value)\r\n */\r\n@Test\r\nvoid testSetArrayItemB() throws Exception {\r\n    propertyUtilsBean.setIndexedProperty(bean, \"stringArray\", 1, \"modified-1\");\r\n    assertEquals(\"modified-1\", bean.getStringArray(1));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\IndexedPropertyTest.java",
  "methodName" : "testSetArrayList",
  "sourceCode" : "/**\r\n * Test setting an ArrayList property\r\n */\r\n@Test\r\nvoid testSetArrayList() throws Exception {\r\n    beanUtilsBean.setProperty(bean, \"arrayList\", newList);\r\n    final Object value = bean.getArrayList();\r\n    assertEquals(newList.getClass(), value.getClass(), \"Type is different\");\r\n    final List<?> list = (List<?>) value;\r\n    assertEquals(newList.size(), list.size(), \"List size is different\");\r\n    for (int i = 0; i < list.size(); i++) {\r\n        assertEquals(newList.get(i), list.get(i), \"Element \" + i + \" is different\");\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\IndexedPropertyTest.java",
  "methodName" : "testSetList",
  "sourceCode" : "/**\r\n * Test setting a List property\r\n *\r\n * JDK 1.3.1_04: Test Passes JDK 1.4.2_05: Test Fails - setter which returns java.util.List not returned by IndexedPropertyDescriptor.getWriteMethod() -\r\n * therefore setProperty does nothing and values remain unchanged.\r\n */\r\n@Test\r\nvoid testSetList() throws Exception {\r\n    beanUtilsBean.setProperty(bean, \"stringList\", newList);\r\n    final Object value = bean.getStringList();\r\n    assertEquals(newList.getClass(), value.getClass(), \"Type is different\");\r\n    final List<?> list = (List<?>) value;\r\n    assertEquals(newList.size(), list.size(), \"List size is different\");\r\n    for (int i = 0; i < list.size(); i++) {\r\n        assertEquals(newList.get(i), list.get(i), \"Element \" + i + \" is different\");\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\IndexedPropertyTest.java",
  "methodName" : "testSetListItemA",
  "sourceCode" : "/**\r\n * Test setting an indexed item of a List using setProperty(\"name[x]\", value)\r\n */\r\n@Test\r\nvoid testSetListItemA() throws Exception {\r\n    beanUtilsBean.setProperty(bean, \"stringList[1]\", \"modified-1\");\r\n    assertEquals(\"modified-1\", bean.getStringList(1));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\IndexedPropertyTest.java",
  "methodName" : "testSetListItemB",
  "sourceCode" : "/**\r\n * Test setting an indexed item of a List using setIndexedProperty(\"name\", value)\r\n */\r\n@Test\r\nvoid testSetListItemB() throws Exception {\r\n    propertyUtilsBean.setIndexedProperty(bean, \"stringList\", 1, \"modified-1\");\r\n    assertEquals(\"modified-1\", bean.getStringList(1));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\LazyDynaBeanTest.java",
  "methodName" : "testIndexedDynaBeanArray",
  "sourceCode" : "/**\r\n * Test Getting/Setting an DynaBean[] array\r\n */\r\n@Test\r\nvoid testIndexedDynaBeanArray() {\r\n    final int index = 3;\r\n    final Object objectArray = new LazyDynaMap[0];\r\n    // Check the property & value doesn't exist\r\n    assertNull(dynaClass.getDynaProperty(testProperty), \"Check Indexed Property doesn't exist\");\r\n    assertNull(bean.get(testProperty), \"Check Indexed Property is null\");\r\n    // Add a DynaProperty of type String[]\r\n    dynaClass.add(testProperty, objectArray.getClass());\r\n    assertEquals(objectArray.getClass(), dynaClass.getDynaProperty(testProperty).getType(), \"Check Indexed Property exists\");\r\n    assertEquals(objectArray.getClass(), bean.get(testProperty).getClass(), \"Check Indexed Property is correct type\");\r\n    // Retrieving from Array should initialize DynaBean\r\n    for (int i = index; i >= 0; i--) {\r\n        assertEquals(LazyDynaMap.class, bean.get(testProperty, index).getClass(), \"Check Array Components initialized\");\r\n    }\r\n    dynaClass.add(testPropertyB, objectArray.getClass());\r\n    final LazyDynaMap newMap = new LazyDynaMap();\r\n    newMap.set(testPropertyB, testString2);\r\n    bean.set(testPropertyA, index, newMap);\r\n    assertEquals(testString2, ((DynaBean) bean.get(testPropertyA, index)).get(testPropertyB), \"Check Indexed Value is correct(a)\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\LazyDynaBeanTest.java",
  "methodName" : "testIndexedInvalidType",
  "sourceCode" : "/**\r\n * Test setting indexed property for type which is not List or Array\r\n */\r\n@Test\r\nvoid testIndexedInvalidType() {\r\n    final int index = 3;\r\n    dynaClass.add(testProperty, String.class);\r\n    assertFalse(dynaClass.getDynaProperty(testProperty).isIndexed(), \"Check Property is not indexed\");\r\n    assertThrows(IllegalArgumentException.class, () -> bean.set(testProperty, index, testString1));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\LazyDynaBeanTest.java",
  "methodName" : "testIndexedLinkedList",
  "sourceCode" : "/**\r\n * Test Getting/Setting a List 'Indexed' Property - use alternative List (LinkedList)\r\n */\r\n@Test\r\nvoid testIndexedLinkedList() {\r\n    int index = 3;\r\n    // Check the property & value doesn't exist\r\n    assertNull(dynaClass.getDynaProperty(testProperty), \"Check Indexed Property doesn't exist\");\r\n    assertNull(bean.get(testProperty), \"Check Indexed Property is null\");\r\n    // Add a 'LinkedList' property to the DynaClass\r\n    dynaClass.add(testProperty, LinkedList.class);\r\n    assertTrue(dynaClass.getDynaProperty(testProperty).isIndexed(), \"Check Property is indexed\");\r\n    assertEquals(LinkedList.class, dynaClass.getDynaProperty(testProperty).getType(), \"Check Property is correct type\");\r\n    assertEquals(LinkedList.class, bean.get(testProperty).getClass(), \"Check Property type is correct\");\r\n    // Set the property, should instantiate a new LinkedList and set appropriate indexed value\r\n    bean.set(testProperty, index, testString1);\r\n    assertEquals(LinkedList.class, bean.get(testProperty).getClass(), \"Check Property type is correct\");\r\n    assertEquals(testString1, bean.get(testProperty, index), \"Check First Indexed Value is correct\");\r\n    assertEquals(Integer.valueOf(index + 1), Integer.valueOf(((LinkedList<?>) bean.get(testProperty)).size()), \"Check First Array length is correct\");\r\n    // Set a second indexed value, should automatically grow the LinkedList and set appropriate indexed value\r\n    index += 2;\r\n    bean.set(testProperty, index, testInteger1);\r\n    assertEquals(testInteger1, bean.get(testProperty, index), \"Check Second Indexed Value is correct\");\r\n    assertEquals(Integer.valueOf(index + 1), Integer.valueOf(((LinkedList<?>) bean.get(testProperty)).size()), \"Check Second Array length is correct\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\LazyDynaBeanTest.java",
  "methodName" : "testIndexedObjectArray",
  "sourceCode" : "/**\r\n * Test Getting/Setting an Object array 'Indexed' Property - use String[]\r\n */\r\n@Test\r\nvoid testIndexedObjectArray() {\r\n    int index = 3;\r\n    final Object objectArray = new String[0];\r\n    // Check the property & value doesn't exist\r\n    assertNull(dynaClass.getDynaProperty(testProperty), \"Check Indexed Property doesn't exist\");\r\n    assertNull(bean.get(testProperty), \"Check Indexed Property is null\");\r\n    // Add a DynaProperty of type String[]\r\n    dynaClass.add(testProperty, objectArray.getClass());\r\n    assertEquals(objectArray.getClass(), dynaClass.getDynaProperty(testProperty).getType(), \"Check Indexed Property exists\");\r\n    assertEquals(objectArray.getClass(), bean.get(testProperty).getClass(), \"Check Indexed Property is correct type\");\r\n    // Set an indexed value\r\n    bean.set(testProperty, index, testString1);\r\n    assertNotNull(bean.get(testProperty), \"Check Indexed Property is not null\");\r\n    assertEquals(objectArray.getClass(), bean.get(testProperty).getClass(), \"Check Indexed Property is correct type\");\r\n    assertEquals(testString1, bean.get(testProperty, index), \"Check First Indexed Value is correct(a)\");\r\n    assertEquals(testString1, ((String[]) bean.get(testProperty))[index], \"Check First Indexed Value is correct(b)\");\r\n    assertEquals(Integer.valueOf(index + 1), Integer.valueOf(((String[]) bean.get(testProperty)).length), \"Check Array length is correct\");\r\n    // Set a second indexed value, should automatically grow the String[] and set appropriate indexed value\r\n    index += 2;\r\n    bean.set(testProperty, index, testString2);\r\n    assertEquals(testString2, bean.get(testProperty, index), \"Check Second Indexed Value is correct(a)\");\r\n    assertEquals(testString2, ((String[]) bean.get(testProperty))[index], \"Check Second Indexed Value is correct(b)\");\r\n    assertEquals(Integer.valueOf(index + 1), Integer.valueOf(((String[]) bean.get(testProperty)).length), \"Check Second Array length is correct\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\LazyDynaBeanTest.java",
  "methodName" : "testIndexedPrimitiveArray",
  "sourceCode" : "/**\r\n * Test Getting/Setting a primitive array 'Indexed' Property - use int[]\r\n */\r\n@Test\r\nvoid testIndexedPrimitiveArray() {\r\n    int index = 3;\r\n    final int[] primitiveArray = {};\r\n    // Check the property & value doesn't exist\r\n    assertNull(dynaClass.getDynaProperty(testProperty), \"Check Indexed Property doesn't exist\");\r\n    assertNull(bean.get(testProperty), \"Check Indexed Property is null\");\r\n    // Add a DynaProperty of type int[]\r\n    dynaClass.add(testProperty, primitiveArray.getClass());\r\n    assertEquals(primitiveArray.getClass(), dynaClass.getDynaProperty(testProperty).getType(), \"Check Indexed Property exists\");\r\n    assertEquals(primitiveArray.getClass(), bean.get(testProperty).getClass(), \"Check Indexed Property is correct type\");\r\n    // Set an indexed value\r\n    bean.set(testProperty, index, testInteger1);\r\n    assertNotNull(bean.get(testProperty), \"Check Indexed Property is not null\");\r\n    assertEquals(primitiveArray.getClass(), bean.get(testProperty).getClass(), \"Check Indexed Property is correct type\");\r\n    assertEquals(testInteger1, bean.get(testProperty, index), \"Check First Indexed Value is correct(a)\");\r\n    assertEquals(testInteger1, Integer.valueOf(((int[]) bean.get(testProperty))[index]), \"Check First Indexed Value is correct(b)\");\r\n    assertEquals(Integer.valueOf(index + 1), Integer.valueOf(((int[]) bean.get(testProperty)).length), \"Check Array length is correct\");\r\n    // Set a second indexed value, should automatically grow the int[] and set appropriate indexed value\r\n    index += 2;\r\n    bean.set(testProperty, index, testInteger2);\r\n    assertEquals(testInteger2, bean.get(testProperty, index), \"Check Second Indexed Value is correct(a)\");\r\n    assertEquals(testInteger2, Integer.valueOf(((int[]) bean.get(testProperty))[index]), \"Check Second Indexed Value is correct(b)\");\r\n    assertEquals(Integer.valueOf(index + 1), Integer.valueOf(((int[]) bean.get(testProperty)).length), \"Check Second Array length is correct\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\LazyDynaBeanTest.java",
  "methodName" : "testIndexedPropertyDefault",
  "sourceCode" : "/**\r\n * Test Getting/Setting an 'Indexed' Property - default ArrayList property\r\n */\r\n@Test\r\nvoid testIndexedPropertyDefault() {\r\n    int index = 3;\r\n    // Check the property & value doesn't exist\r\n    assertNull(dynaClass.getDynaProperty(testProperty), \"Check Indexed Property doesn't exist\");\r\n    assertNull(bean.get(testProperty), \"Check Indexed Property is null\");\r\n    assertNull(bean.get(testProperty, index), \"Check Indexed value is null\");\r\n    // Set the property, should create new ArrayList and set appropriate indexed value\r\n    bean.set(testProperty, index, testInteger1);\r\n    assertNotNull(bean.get(testProperty), \"Check Indexed Property is not null\");\r\n    assertEquals(ArrayList.class, bean.get(testProperty).getClass(), \"Check Indexed Property is correct type\");\r\n    assertEquals(testInteger1, bean.get(testProperty, index), \"Check First Indexed Value is correct\");\r\n    assertEquals(Integer.valueOf(index + 1), Integer.valueOf(((ArrayList<?>) bean.get(testProperty)).size()), \"Check First Array length is correct\");\r\n    // Set a second indexed value, should automatically grow the ArrayList and set appropriate indexed value\r\n    index += 2;\r\n    bean.set(testProperty, index, testString1);\r\n    assertEquals(testString1, bean.get(testProperty, index), \"Check Second Indexed Value is correct\");\r\n    assertEquals(Integer.valueOf(index + 1), Integer.valueOf(((ArrayList<?>) bean.get(testProperty)).size()), \"Check Second Array length is correct\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\LazyDynaBeanTest.java",
  "methodName" : "testIndexedPropertyRestricted",
  "sourceCode" : "/**\r\n * Test Setting an Indexed Property when MutableDynaClass is set to restricted\r\n */\r\n@Test\r\nvoid testIndexedPropertyRestricted() {\r\n    final int index = 3;\r\n    // Set the MutableDyanClass to 'restricted' (i.e. no new properties cab be added\r\n    dynaClass.setRestricted(true);\r\n    assertTrue(dynaClass.isRestricted(), \"Check MutableDynaClass is restricted\");\r\n    // Check the property & value doesn't exist\r\n    assertNull(dynaClass.getDynaProperty(testProperty), \"Check Property doesn't exist\");\r\n    assertNull(bean.get(testProperty), \"Check Value is null\");\r\n    // Set the property - should fail because property doesn't exist and MutableDynaClass is restricted\r\n    assertThrows(IllegalArgumentException.class, () -> bean.set(testProperty, index, testInteger1));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\LazyDynaBeanTest.java",
  "methodName" : "testIndexedPropertyUtils",
  "sourceCode" : "/**\r\n * Test Setting an 'Indexed' Property using PropertyUtils\r\n */\r\n@Test\r\nvoid testIndexedPropertyUtils() throws Exception {\r\n    final int index = 3;\r\n    dynaClass.setReturnNull(false);\r\n    // Check the property & value doesn't exist\r\n    assertFalse(dynaClass.isDynaProperty(testProperty), \"Check Indexed Property doesn't exist\");\r\n    assertNull(bean.get(testProperty), \"Check Indexed Property is null\");\r\n    assertNull(bean.get(testProperty, index), \"Check Indexed value is null\");\r\n    // Use PropertyUtils to set the indexed value\r\n    PropertyUtils.setProperty(bean, testProperty + \"[\" + index + \"]\", testString1);\r\n    // Check property value correctly set\r\n    assertEquals(testString1, bean.get(testProperty, index), \"Check Indexed Bean Value is correct\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\LazyDynaBeanTest.java",
  "methodName" : "testMappedInvalidType",
  "sourceCode" : "/**\r\n * Test setting mapped property for type which is not Map\r\n */\r\n@Test\r\nvoid testMappedInvalidType() {\r\n    dynaClass.add(testProperty, String.class);\r\n    assertFalse(dynaClass.getDynaProperty(testProperty).isMapped(), \"Check Property is not mapped\");\r\n    assertThrows(IllegalArgumentException.class, () -> bean.set(testProperty, testKey, testInteger1));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\LazyDynaBeanTest.java",
  "methodName" : "testMappedPropertyDefault",
  "sourceCode" : "/**\r\n * Test Getting/Setting a 'Mapped' Property - default HashMap property\r\n */\r\n@Test\r\nvoid testMappedPropertyDefault() {\r\n    // Check the property & value doesn't exist\r\n    assertNull(dynaClass.getDynaProperty(testProperty), \"Check Mapped Property doesn't exist\");\r\n    assertNull(bean.get(testProperty), \"Check Map is null\");\r\n    assertNull(bean.get(testProperty, testKey), \"Check Mapped Value is null\");\r\n    // Set a new mapped property - should add new HashMap property and set the mapped value\r\n    bean.set(testProperty, testKey, testInteger1);\r\n    assertEquals(HashMap.class, bean.get(testProperty).getClass(), \"Check Mapped Property exists\");\r\n    assertEquals(testInteger1, bean.get(testProperty, testKey), \"Check First Mapped Value is correct(a)\");\r\n    assertEquals(testInteger1, ((HashMap<?, ?>) bean.get(testProperty)).get(testKey), \"Check First Mapped Value is correct(b)\");\r\n    // Set the property again - should set the new value\r\n    bean.set(testProperty, testKey, testInteger2);\r\n    assertEquals(testInteger2, bean.get(testProperty, testKey), \"Check Second Mapped Value is correct(a)\");\r\n    assertEquals(testInteger2, ((HashMap<?, ?>) bean.get(testProperty)).get(testKey), \"Check Second Mapped Value is correct(b)\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\LazyDynaBeanTest.java",
  "methodName" : "testMappedPropertyRestricted",
  "sourceCode" : "/**\r\n * Test Setting a Mapped Property when MutableDynaClass is set to restricted\r\n */\r\n@Test\r\nvoid testMappedPropertyRestricted() {\r\n    // Set the MutableDyanClass to 'restricted' (i.e. no new properties cab be added\r\n    dynaClass.setRestricted(true);\r\n    assertTrue(dynaClass.isRestricted(), \"Check MutableDynaClass is restricted\");\r\n    // Check the property & value doesn't exist\r\n    assertNull(dynaClass.getDynaProperty(testProperty), \"Check Property doesn't exist\");\r\n    assertNull(bean.get(testProperty), \"Check Value is null\");\r\n    // Set the property - should fail because property doesn't exist and MutableDynaClass is restricted\r\n    assertThrows(IllegalArgumentException.class, () -> bean.set(testProperty, testKey, testInteger1));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\LazyDynaBeanTest.java",
  "methodName" : "testMappedPropertyTreeMap",
  "sourceCode" : "/**\r\n * Test Getting/Setting a 'Mapped' Property - use TreeMap property\r\n */\r\n@Test\r\nvoid testMappedPropertyTreeMap() {\r\n    // Check the property & value doesn't exist\r\n    assertNull(dynaClass.getDynaProperty(testProperty), \"Check Mapped Property doesn't exist\");\r\n    // Add a 'TreeMap' property to the DynaClass\r\n    dynaClass.add(testProperty, TreeMap.class);\r\n    assertTrue(dynaClass.getDynaProperty(testProperty).isMapped(), \"Check Property is mapped\");\r\n    assertEquals(TreeMap.class, dynaClass.getDynaProperty(testProperty).getType(), \"Check Property is correct type\");\r\n    assertEquals(TreeMap.class, bean.get(testProperty).getClass(), \"Check Mapped Property exists\");\r\n    //        assertNull(\"Check mapped property is null\", bean.get(testProperty));\r\n    // Set a new mapped property - should instantiate a new TreeMap property and set the mapped value\r\n    bean.set(testProperty, testKey, testInteger1);\r\n    assertEquals(TreeMap.class, bean.get(testProperty).getClass(), \"Check Mapped Property exists\");\r\n    assertEquals(testInteger1, bean.get(testProperty, testKey), \"Check First Mapped Value is correct(a)\");\r\n    assertEquals(testInteger1, ((TreeMap<?, ?>) bean.get(testProperty)).get(testKey), \"Check First Mapped Value is correct(b)\");\r\n    // Set the property again - should set the new value\r\n    bean.set(testProperty, testKey, testInteger2);\r\n    assertEquals(testInteger2, bean.get(testProperty, testKey), \"Check Second Mapped Value is correct(a)\");\r\n    assertEquals(testInteger2, ((TreeMap<?, ?>) bean.get(testProperty)).get(testKey), \"Check Second Mapped Value is correct(b)\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\LazyDynaBeanTest.java",
  "methodName" : "testMappedPropertyUtils",
  "sourceCode" : "/**\r\n * Test Setting a 'Mapped' Property using PropertyUtils\r\n */\r\n@Test\r\nvoid testMappedPropertyUtils() throws Exception {\r\n    dynaClass.setReturnNull(false);\r\n    // Check the property & value doesn't exist\r\n    assertFalse(dynaClass.isDynaProperty(testProperty), \"Check Mapped Property doesn't exist\");\r\n    assertNull(bean.get(testProperty), \"Check Map is null\");\r\n    assertNull(bean.get(testProperty, testKey), \"Check Mapped Value is null\");\r\n    // Set the mapped property using PropertyUtils\r\n    PropertyUtils.setProperty(bean, testProperty + \"(\" + testKey + \")\", testString1);\r\n    // Check property value correctly set\r\n    assertEquals(testString1, bean.get(testProperty, testKey), \"Check Mapped Bean Value is correct\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\LazyDynaBeanTest.java",
  "methodName" : "testNullProperty",
  "sourceCode" : "/**\r\n * Test Getting/Setting a 'null' Property\r\n */\r\n@Test\r\nvoid testNullProperty() {\r\n    // Check the property & value doesn't exist\r\n    assertNull(dynaClass.getDynaProperty(testProperty), \"Check Property doesn't exist\");\r\n    assertNull(bean.get(testProperty), \"Check Value is null\");\r\n    // Set a new property to null\r\n    bean.set(testProperty, null);\r\n    assertNull(bean.get(testProperty), \"Check Value is still null\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\LazyDynaBeanTest.java",
  "methodName" : "testSimpleProperty",
  "sourceCode" : "/**\r\n * Test Getting/Setting a Simple Property\r\n */\r\n@Test\r\nvoid testSimpleProperty() {\r\n    // Check the property & value doesn't exist\r\n    assertNull(dynaClass.getDynaProperty(testProperty), \"Check Property doesn't exist\");\r\n    assertNull(bean.get(testProperty), \"Check Value is null\");\r\n    // Set a new property - should add new property and set value\r\n    bean.set(testProperty, testInteger1);\r\n    assertEquals(testInteger1, bean.get(testProperty), \"Check First Value is correct\");\r\n    assertEquals(Integer.class, dynaClass.getDynaProperty(testProperty).getType(), \"Check Property type is correct\");\r\n    // Set the property again - should set the new value\r\n    bean.set(testProperty, testInteger2);\r\n    assertEquals(testInteger2, bean.get(testProperty), \"Check Second Value is correct\");\r\n    // Set the property again - with a different type, should fail\r\n    assertThrows(ConversionException.class, () -> bean.set(testProperty, testString1));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\LazyDynaBeanTest.java",
  "methodName" : "testSimplePropertyRestricted",
  "sourceCode" : "/**\r\n * Test Setting a Simple Property when MutableDynaClass is set to restricted\r\n */\r\n@Test\r\nvoid testSimplePropertyRestricted() {\r\n    // Set the MutableDyanClass to 'restricted' (i.e. no new properties cab be added\r\n    dynaClass.setRestricted(true);\r\n    assertTrue(dynaClass.isRestricted(), \"Check MutableDynaClass is restricted\");\r\n    // Check the property & value doesn't exist\r\n    assertNull(dynaClass.getDynaProperty(testProperty), \"Check Property doesn't exist\");\r\n    assertNull(bean.get(testProperty), \"Check Value is null\");\r\n    // Set the property - should fail because property doesn't exist and MutableDynaClass is restricted\r\n    assertThrows(IllegalArgumentException.class, () -> bean.set(testProperty, testString1));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\LazyDynaClassTest.java",
  "methodName" : "testAddProperty1",
  "sourceCode" : "/**\r\n * Test add(name) method\r\n */\r\n@Test\r\nvoid testAddProperty1() {\r\n    dynaClass.add(testProperty);\r\n    final DynaProperty dynaProperty = dynaClass.getDynaProperty(testProperty);\r\n    assertEquals(testProperty, dynaProperty.getName(), \"name is correct\");\r\n    assertEquals(Object.class, dynaProperty.getType(), \"type is correct\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\LazyDynaClassTest.java",
  "methodName" : "testAddProperty2",
  "sourceCode" : "/**\r\n * Test add(name, type) method\r\n */\r\n@Test\r\nvoid testAddProperty2() {\r\n    dynaClass.add(testProperty, String.class);\r\n    final DynaProperty dynaProperty = dynaClass.getDynaProperty(testProperty);\r\n    assertEquals(testProperty, dynaProperty.getName(), \"name is correct\");\r\n    assertEquals(String.class, dynaProperty.getType(), \"type is correct\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\LazyDynaClassTest.java",
  "methodName" : "testAddProperty3",
  "sourceCode" : "/**\r\n * Test add(name, type, readable, writable) method\r\n */\r\n@Test\r\nvoid testAddProperty3() {\r\n    assertThrows(UnsupportedOperationException.class, () -> dynaClass.add(testProperty, String.class, true, true));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\LazyDynaClassTest.java",
  "methodName" : "testAddPropertyNullName1",
  "sourceCode" : "/**\r\n * Test add(name) method with 'null' name\r\n */\r\n@Test\r\nvoid testAddPropertyNullName1() {\r\n    assertThrows(NullPointerException.class, () -> dynaClass.add((String) null));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\LazyDynaClassTest.java",
  "methodName" : "testAddPropertyNullName2",
  "sourceCode" : "/**\r\n * Test add(name, type) method with 'null' name\r\n */\r\n@Test\r\nvoid testAddPropertyNullName2() {\r\n    assertThrows(NullPointerException.class, () -> dynaClass.add(null, String.class));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\LazyDynaClassTest.java",
  "methodName" : "testAddPropertyNullName3",
  "sourceCode" : "/**\r\n * Test add(name, type, readable, writable) method with 'null' name\r\n */\r\n@Test\r\nvoid testAddPropertyNullName3() {\r\n    assertThrows(UnsupportedOperationException.class, () -> dynaClass.add(null, String.class, true, true));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\LazyDynaClassTest.java",
  "methodName" : "testAddPropertyRestricted1",
  "sourceCode" : "/**\r\n * Test add(name) method when restricted is set to 'true'\r\n */\r\n@Test\r\nvoid testAddPropertyRestricted1() {\r\n    dynaClass.setRestricted(true);\r\n    assertTrue(dynaClass.isRestricted(), \"MutableDynaClass is restricted\");\r\n    assertThrows(IllegalStateException.class, () -> dynaClass.add(testProperty));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\LazyDynaClassTest.java",
  "methodName" : "testAddPropertyRestricted2",
  "sourceCode" : "/**\r\n * Test add(name, type) method when restricted is set to 'true'\r\n */\r\n@Test\r\nvoid testAddPropertyRestricted2() {\r\n    dynaClass.setRestricted(true);\r\n    assertTrue(dynaClass.isRestricted(), \"MutableDynaClass is restricted\");\r\n    assertThrows(IllegalStateException.class, () -> dynaClass.add(testProperty, String.class));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\LazyDynaClassTest.java",
  "methodName" : "testAddPropertyRestricted3",
  "sourceCode" : "/**\r\n * Test add(name, type, readable, writable) method when restricted is set to 'true'\r\n */\r\n@Test\r\nvoid testAddPropertyRestricted3() {\r\n    dynaClass.setRestricted(true);\r\n    assertTrue(dynaClass.isRestricted(), \"MutableDynaClass is restricted\");\r\n    assertThrows(UnsupportedOperationException.class, () -> dynaClass.add(testProperty, String.class, true, true));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\LazyDynaClassTest.java",
  "methodName" : "testGetPropertyDoesntExist1",
  "sourceCode" : "/**\r\n * Test retrieving a property which doesn't exist (returnNull is 'false')\r\n */\r\n@Test\r\nvoid testGetPropertyDoesntExist1() {\r\n    dynaClass.setReturnNull(false);\r\n    assertFalse(dynaClass.isReturnNull(), \"returnNull is 'false'\");\r\n    final DynaProperty dynaProperty = dynaClass.getDynaProperty(testProperty);\r\n    assertEquals(testProperty, dynaProperty.getName(), \"name is correct\");\r\n    assertEquals(Object.class, dynaProperty.getType(), \"type is correct\");\r\n    assertFalse(dynaClass.isDynaProperty(testProperty), \"property doesn't exist\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\LazyDynaClassTest.java",
  "methodName" : "testGetPropertyDoesntExist2",
  "sourceCode" : "/**\r\n * Test retrieving a property which doesn't exist (returnNull is 'true')\r\n */\r\n@Test\r\nvoid testGetPropertyDoesntExist2() {\r\n    dynaClass.setReturnNull(true);\r\n    assertTrue(dynaClass.isReturnNull(), \"returnNull is 'true'\");\r\n    assertNull(dynaClass.getDynaProperty(testProperty), \"property is null\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\LazyDynaClassTest.java",
  "methodName" : "testRemoveProperty",
  "sourceCode" : "/**\r\n * Test removing a property\r\n */\r\n@Test\r\nvoid testRemoveProperty() {\r\n    dynaClass.setReturnNull(true);\r\n    dynaClass.add(testProperty);\r\n    assertTrue(dynaClass.isDynaProperty(testProperty), \"Property exists\");\r\n    assertNotNull(dynaClass.getDynaProperty(testProperty), \"property is Not null\");\r\n    dynaClass.remove(testProperty);\r\n    assertFalse(dynaClass.isDynaProperty(testProperty), \"Property doesn't exist\");\r\n    assertNull(dynaClass.getDynaProperty(testProperty), \"property is null\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\LazyDynaClassTest.java",
  "methodName" : "testRemovePropertyDoesntExist",
  "sourceCode" : "/**\r\n * Test removing a property which doesn't exist\r\n */\r\n@Test\r\nvoid testRemovePropertyDoesntExist() {\r\n    assertFalse(dynaClass.isDynaProperty(testProperty), \"property doesn't exist\");\r\n    dynaClass.remove(testProperty);\r\n    assertFalse(dynaClass.isDynaProperty(testProperty), \"property still doesn't exist\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\LazyDynaClassTest.java",
  "methodName" : "testRemovePropertyNullName",
  "sourceCode" : "/**\r\n * Test removing a property, name is null\r\n */\r\n@Test\r\nvoid testRemovePropertyNullName() {\r\n    assertThrows(NullPointerException.class, () -> dynaClass.remove(null));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\LazyDynaClassTest.java",
  "methodName" : "testRemovePropertyRestricted",
  "sourceCode" : "/**\r\n * Test removing a property, DynaClass is restricted\r\n */\r\n@Test\r\nvoid testRemovePropertyRestricted() {\r\n    dynaClass.add(testProperty);\r\n    assertTrue(dynaClass.isDynaProperty(testProperty), \"Property exists\");\r\n    dynaClass.setRestricted(true);\r\n    assertTrue(dynaClass.isRestricted(), \"MutableDynaClass is restricted\");\r\n    assertThrows(IllegalStateException.class, () -> dynaClass.remove(testProperty));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\LazyDynaListTest.java",
  "methodName" : "testDynaBeanDynaClass",
  "sourceCode" : "/**\r\n * Test DynaBean Create\r\n */\r\n@Test\r\nvoid testDynaBeanDynaClass() throws Exception {\r\n    // Create LazyArrayList for DynaBeans\r\n    final LazyDynaList list = new LazyDynaList(basicDynaClass);\r\n    // test\r\n    dynaBeanTest(list, BasicDynaBean.class, basicDynaClass, new BenchBean());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\LazyDynaListTest.java",
  "methodName" : "testDynaBeanType",
  "sourceCode" : "/**\r\n * Test DynaBean Create\r\n */\r\n@Test\r\nvoid testDynaBeanType() throws Exception {\r\n    // Create LazyArrayList for DynaBeans\r\n    final LazyDynaList list = new LazyDynaList(LazyDynaBean.class);\r\n    final LazyDynaBean bean = new LazyDynaBean();\r\n    bean.set(\"prop1\", \"val\");\r\n    // test\r\n    dynaBeanTest(list, LazyDynaBean.class, bean.getDynaClass(), new BenchBean());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\LazyDynaListTest.java",
  "methodName" : "testMapDynaClass",
  "sourceCode" : "/**\r\n * Test Map Create\r\n */\r\n@Test\r\nvoid testMapDynaClass() {\r\n    // Create LazyArrayList for TreeMap's\r\n    final LazyDynaList list = new LazyDynaList(treeMapDynaClass);\r\n    // test\r\n    mapTest(list, TreeMap.class, new BenchBean());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\LazyDynaListTest.java",
  "methodName" : "testMapType",
  "sourceCode" : "/**\r\n * Test Map Create\r\n */\r\n@Test\r\nvoid testMapType() {\r\n    // Create LazyArrayList for HashMap's\r\n    final LazyDynaList list = new LazyDynaList(HashMap.class);\r\n    // test\r\n    mapTest(list, HashMap.class, new BenchBean());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\LazyDynaListTest.java",
  "methodName" : "testNullType",
  "sourceCode" : "/**\r\n * Test adding a map to List with no type set.\r\n */\r\n@Test\r\nvoid testNullType() {\r\n    final LazyDynaList lazyList = new LazyDynaList();\r\n    lazyList.add(new HashMap<>());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\LazyDynaListTest.java",
  "methodName" : "testPojoDynaClass",
  "sourceCode" : "/**\r\n * Test Pojo Create\r\n */\r\n@Test\r\nvoid testPojoDynaClass() {\r\n    // Create LazyArrayList for POJO's\r\n    final LazyDynaList list = new LazyDynaList(pojoDynaClass);\r\n    // test\r\n    pojoTest(list, TestBean.class, new BenchBean());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\LazyDynaListTest.java",
  "methodName" : "testPojoType",
  "sourceCode" : "/**\r\n * Test Pojo Create\r\n */\r\n@Test\r\nvoid testPojoType() {\r\n    // Create LazyArrayList for POJO's\r\n    final LazyDynaList list = new LazyDynaList(TestBean.class);\r\n    // test\r\n    pojoTest(list, TestBean.class, new BenchBean());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\LazyDynaListTest.java",
  "methodName" : "testSerializationDynaBean",
  "sourceCode" : "/**\r\n * Test DynaBean serialization.\r\n */\r\n@Test\r\nvoid testSerializationDynaBean() throws Exception {\r\n    // Create LazyArrayList for DynaBeans\r\n    final LazyDynaList target = new LazyDynaList(basicDynaClass);\r\n    final BasicDynaBean bean = (BasicDynaBean) target.get(0);\r\n    // Set a Property\r\n    assertNull(bean.get(BASIC_PROP1), \"pre-set check\");\r\n    bean.set(BASIC_PROP1, \"value1\");\r\n    assertEquals(\"value1\", bean.get(BASIC_PROP1), \"post-set check\");\r\n    // Serialize/Deserialize\r\n    assertThrows(NotSerializableException.class, () -> serializeDeserialize(target, \"DynaBean\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\LazyDynaListTest.java",
  "methodName" : "testSerializationLazyDynaBean",
  "sourceCode" : "/**\r\n * Test DynaBean serialization.\r\n */\r\n@Test\r\nvoid testSerializationLazyDynaBean() throws Exception {\r\n    // Create LazyArrayList for DynaBeans\r\n    final LazyDynaList target = new LazyDynaList();\r\n    final LazyDynaBean bean = (LazyDynaBean) target.get(0);\r\n    // Set a Property\r\n    assertNull(bean.get(BASIC_PROP1), \"pre-set check\");\r\n    bean.set(BASIC_PROP1, \"value1\");\r\n    assertEquals(\"value1\", bean.get(BASIC_PROP1), \"post-set check\");\r\n    // Serialize/Deserialize\r\n    assertThrows(NotSerializableException.class, () -> serializeDeserialize(target, \"DynaBean\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\LazyDynaListTest.java",
  "methodName" : "testSerializationMap",
  "sourceCode" : "/**\r\n * Test Map serialization.\r\n */\r\n@Test\r\nvoid testSerializationMap() throws Exception {\r\n    // Create LazyArrayList for DynaBeans\r\n    final LazyDynaList target = new LazyDynaList(treeMapDynaClass);\r\n    final LazyDynaMap bean = (LazyDynaMap) target.get(0);\r\n    // Set a Property\r\n    assertNull(bean.get(BASIC_PROP1), \"pre-set check\");\r\n    bean.set(BASIC_PROP1, \"value1\");\r\n    assertEquals(\"value1\", bean.get(BASIC_PROP1), \"post-set check\");\r\n    // Serialize/Deserialize\r\n    assertThrows(NotSerializableException.class, () -> serializeDeserialize(target, \"Map\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\LazyDynaListTest.java",
  "methodName" : "testSerializationPojo",
  "sourceCode" : "/**\r\n * Test POJO (WrapDynaBean) serialization.\r\n */\r\n@Test\r\nvoid testSerializationPojo() throws Exception {\r\n    // Create LazyArrayList for DynaBeans\r\n    final LazyDynaList target = new LazyDynaList(pojoDynaClass);\r\n    final WrapDynaBean bean = (WrapDynaBean) target.get(0);\r\n    // Set a Property\r\n    assertEquals(\"This is a string\", bean.get(\"stringProperty\"), \"pre-set check\");\r\n    bean.set(\"stringProperty\", \"value1\");\r\n    assertEquals(\"value1\", bean.get(\"stringProperty\"), \"post-set check\");\r\n    // Serialize/Deserialize\r\n    assertThrows(NotSerializableException.class, () -> serializeDeserialize(target, \"POJO\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\LazyDynaListTest.java",
  "methodName" : "testToArrayDynaBeans",
  "sourceCode" : "/**\r\n * Tests toArray() if the list contains DynaBean objects.\r\n */\r\n@Test\r\nvoid testToArrayDynaBeans() {\r\n    final LazyDynaList list = new LazyDynaList(LazyDynaBean.class);\r\n    final LazyDynaBean elem = new LazyDynaBean();\r\n    list.add(elem);\r\n    final LazyDynaBean[] beans = new LazyDynaBean[1];\r\n    assertSame(beans, list.toArray(beans), \"Wrong array\");\r\n    assertSame(elem, beans[0], \"Wrong element\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\LazyDynaListTest.java",
  "methodName" : "testToArrayMapType",
  "sourceCode" : "/**\r\n * Tests toArray() if the list contains maps.\r\n */\r\n@Test\r\nvoid testToArrayMapType() {\r\n    final LazyDynaList list = new LazyDynaList(HashMap.class);\r\n    final HashMap<String, Object> elem = new HashMap<>();\r\n    list.add(elem);\r\n    final Map<?, ?>[] array = new Map[1];\r\n    assertSame(array, list.toArray(array), \"Wrong array\");\r\n    assertEquals(elem, array[0], \"Wrong element\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\LazyDynaListTest.java",
  "methodName" : "testToArrayOtherType",
  "sourceCode" : "/**\r\n * Tests toArray() for other bean elements.\r\n */\r\n@Test\r\nvoid testToArrayOtherType() {\r\n    final LazyDynaList list = new LazyDynaList(TestBean.class);\r\n    final TestBean elem = new TestBean();\r\n    list.add(elem);\r\n    final TestBean[] array = new TestBean[1];\r\n    assertSame(array, list.toArray(array), \"Wrong array\");\r\n    assertEquals(elem, array[0], \"Wrong element\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\LazyDynaListTest.java",
  "methodName" : "testToArrayUnsufficientSize",
  "sourceCode" : "/**\r\n * Tests toArray() if the array's size does not fit the collection size.\r\n */\r\n@Test\r\nvoid testToArrayUnsufficientSize() {\r\n    final LazyDynaList list = new LazyDynaList(LazyDynaBean.class);\r\n    final LazyDynaBean elem = new LazyDynaBean();\r\n    list.add(elem);\r\n    final LazyDynaBean[] array = list.toArray(LazyDynaBean.EMPTY_ARRAY);\r\n    assertEquals(1, array.length, \"Wrong array size\");\r\n    assertEquals(elem, array[0], \"Wrong element\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\LazyDynaMapTest.java",
  "methodName" : "testGeneral",
  "sourceCode" : "/**\r\n * General Tests\r\n */\r\n@Test\r\nvoid testGeneral() {\r\n    //        LazyDynaMap bean = new LazyDynaMap(\"TestBean\");\r\n    assertEquals(\"TestBean\", new LazyDynaMap(\"TestBean\").getName(), \"Check DynaClass name\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\LazyDynaMapTest.java",
  "methodName" : "testIndexedDynaBeanArray",
  "sourceCode" : "/**\r\n * Test Getting/Setting an DynaBean[] array\r\n */\r\n@Test\r\nvoid testIndexedDynaBeanArray() {\r\n    final int index = 3;\r\n    final Object objectArray = new LazyDynaBean[0];\r\n    // Check the property & value doesn't exist\r\n    assertNull(dynaMap.getDynaProperty(testProperty), \"Check Indexed Property doesn't exist\");\r\n    assertNull(dynaMap.get(testProperty), \"Check Indexed Property is null\");\r\n    // Add a DynaProperty of type String[]\r\n    dynaMap.add(testProperty, objectArray.getClass());\r\n    assertEquals(objectArray.getClass(), dynaMap.getDynaProperty(testProperty).getType(), \"Check Indexed Property exists\");\r\n    assertEquals(objectArray.getClass(), dynaMap.get(testProperty).getClass(), \"Check Indexed Property is correct type\");\r\n    // Retrieving from Array should initialize DynaBean\r\n    for (int i = index; i >= 0; i--) {\r\n        assertEquals(LazyDynaBean.class, dynaMap.get(testProperty, index).getClass(), \"Check Array Components initialized\");\r\n    }\r\n    dynaMap.add(testPropertyB, objectArray.getClass());\r\n    final LazyDynaBean newBean = new LazyDynaBean();\r\n    newBean.set(testPropertyB, testString2);\r\n    dynaMap.set(testPropertyA, index, newBean);\r\n    assertEquals(testString2, ((DynaBean) dynaMap.get(testPropertyA, index)).get(testPropertyB), \"Check Indexed Value is correct(a)\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\LazyDynaMapTest.java",
  "methodName" : "testIndexedInvalidType",
  "sourceCode" : "/**\r\n * Test setting indexed property for type which is not List or Array\r\n */\r\n@Test\r\nvoid testIndexedInvalidType() {\r\n    final int index = 3;\r\n    dynaMap.set(testProperty, \"Test String\");\r\n    assertFalse(dynaMap.getDynaProperty(testProperty).isIndexed(), \"Check Property is not indexed\");\r\n    assertThrows(IllegalArgumentException.class, () -> dynaMap.set(testProperty, index, testString1));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\LazyDynaMapTest.java",
  "methodName" : "testIndexedLinkedList",
  "sourceCode" : "/**\r\n * Test Getting/Setting a List 'Indexed' Property - use alternative List (LinkedList)\r\n */\r\n@Test\r\nvoid testIndexedLinkedList() {\r\n    int index = 3;\r\n    // Check the property & value doesn't exist\r\n    assertNull(dynaMap.getDynaProperty(testProperty), \"Check Indexed Property doesn't exist\");\r\n    assertNull(dynaMap.get(testProperty), \"Check Indexed Property is null\");\r\n    // Add a 'LinkedList' property to the DynaClass - should instantiate a new LinkedList\r\n    dynaMap.add(testProperty, LinkedList.class);\r\n    assertTrue(dynaMap.getDynaProperty(testProperty).isIndexed(), \"Check Property is indexed\");\r\n    assertEquals(LinkedList.class, dynaMap.getDynaProperty(testProperty).getType(), \"Check Property is correct type\");\r\n    assertEquals(LinkedList.class, dynaMap.get(testProperty).getClass(), \"Check Indexed Property now exists\");\r\n    // Set the Indexed property, should grow the list to the correct size\r\n    dynaMap.set(testProperty, index, testString1);\r\n    assertEquals(LinkedList.class, dynaMap.get(testProperty).getClass(), \"Check Property type is correct\");\r\n    assertEquals(testString1, dynaMap.get(testProperty, index), \"Check First Indexed Value is correct\");\r\n    assertEquals(Integer.valueOf(index + 1), Integer.valueOf(((LinkedList<?>) dynaMap.get(testProperty)).size()), \"Check First Array length is correct\");\r\n    // Set a second indexed value, should automatically grow the LinkedList and set appropriate indexed value\r\n    index += 2;\r\n    dynaMap.set(testProperty, index, testInteger1);\r\n    assertEquals(testInteger1, dynaMap.get(testProperty, index), \"Check Second Indexed Value is correct\");\r\n    assertEquals(Integer.valueOf(index + 1), Integer.valueOf(((LinkedList<?>) dynaMap.get(testProperty)).size()), \"Check Second Array length is correct\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\LazyDynaMapTest.java",
  "methodName" : "testIndexedObjectArray",
  "sourceCode" : "/**\r\n * Test Getting/Setting an Object array 'Indexed' Property - use String[]\r\n */\r\n@Test\r\nvoid testIndexedObjectArray() {\r\n    int index = 3;\r\n    final Object objectArray = new String[0];\r\n    // Check the property & value doesn't exist\r\n    assertNull(dynaMap.getDynaProperty(testProperty), \"Check Indexed Property doesn't exist\");\r\n    assertNull(dynaMap.get(testProperty), \"Check Indexed Property is null\");\r\n    // Add a DynaProperty of type String[]\r\n    dynaMap.add(testProperty, objectArray.getClass());\r\n    assertEquals(objectArray.getClass(), dynaMap.getDynaProperty(testProperty).getType(), \"Check Indexed Property exists\");\r\n    assertTrue(dynaMap.get(testProperty).getClass().isInstance(objectArray), \"Check Indexed Property exists\");\r\n    // Set an indexed value\r\n    dynaMap.set(testProperty, index, testString1);\r\n    assertNotNull(dynaMap.get(testProperty), \"Check Indexed Property is not null\");\r\n    assertEquals(objectArray.getClass(), dynaMap.get(testProperty).getClass(), \"Check Indexed Property is correct type\");\r\n    assertEquals(testString1, dynaMap.get(testProperty, index), \"Check First Indexed Value is correct(a)\");\r\n    assertEquals(testString1, ((String[]) dynaMap.get(testProperty))[index], \"Check First Indexed Value is correct(b)\");\r\n    assertEquals(Integer.valueOf(index + 1), Integer.valueOf(((String[]) dynaMap.get(testProperty)).length), \"Check Array length is correct\");\r\n    // Set a second indexed value, should automatically grow the String[] and set appropriate indexed value\r\n    index += 2;\r\n    dynaMap.set(testProperty, index, testString2);\r\n    assertEquals(testString2, dynaMap.get(testProperty, index), \"Check Second Indexed Value is correct(a)\");\r\n    assertEquals(testString2, ((String[]) dynaMap.get(testProperty))[index], \"Check Second Indexed Value is correct(b)\");\r\n    assertEquals(Integer.valueOf(index + 1), Integer.valueOf(((String[]) dynaMap.get(testProperty)).length), \"Check Second Array length is correct\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\LazyDynaMapTest.java",
  "methodName" : "testIndexedPrimitiveArray",
  "sourceCode" : "/**\r\n * Test Getting/Setting a primitive array 'Indexed' Property - use int[]\r\n */\r\n@Test\r\nvoid testIndexedPrimitiveArray() {\r\n    int index = 3;\r\n    final int[] primitiveArray = {};\r\n    // Check the property & value doesn't exist\r\n    assertNull(dynaMap.getDynaProperty(testProperty), \"Check Indexed Property doesn't exist\");\r\n    assertNull(dynaMap.get(testProperty), \"Check Indexed Property is null\");\r\n    // Add a DynaProperty of type int[]\r\n    dynaMap.add(testProperty, primitiveArray.getClass());\r\n    assertEquals(primitiveArray.getClass(), dynaMap.getDynaProperty(testProperty).getType(), \"Check Indexed Property exists\");\r\n    assertTrue(dynaMap.get(testProperty).getClass().isInstance(primitiveArray), \"Check Indexed Property exists\");\r\n    // Set an indexed value\r\n    dynaMap.set(testProperty, index, testInteger1);\r\n    assertNotNull(dynaMap.get(testProperty), \"Check Indexed Property is not null\");\r\n    assertEquals(primitiveArray.getClass(), dynaMap.get(testProperty).getClass(), \"Check Indexed Property is correct type\");\r\n    assertEquals(testInteger1, dynaMap.get(testProperty, index), \"Check First Indexed Value is correct(a)\");\r\n    assertEquals(testInteger1, Integer.valueOf(((int[]) dynaMap.get(testProperty))[index]), \"Check First Indexed Value is correct(b)\");\r\n    assertEquals(Integer.valueOf(index + 1), Integer.valueOf(((int[]) dynaMap.get(testProperty)).length), \"Check Array length is correct\");\r\n    // Set a second indexed value, should automatically grow the int[] and set appropriate indexed value\r\n    index += 2;\r\n    dynaMap.set(testProperty, index, testInteger2);\r\n    assertEquals(testInteger2, dynaMap.get(testProperty, index), \"Check Second Indexed Value is correct(a)\");\r\n    assertEquals(testInteger2, Integer.valueOf(((int[]) dynaMap.get(testProperty))[index]), \"Check Second Indexed Value is correct(b)\");\r\n    assertEquals(Integer.valueOf(index + 1), Integer.valueOf(((int[]) dynaMap.get(testProperty)).length), \"Check Second Array length is correct\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\LazyDynaMapTest.java",
  "methodName" : "testIndexedPropertyDefault",
  "sourceCode" : "/**\r\n * Test Getting/Setting an 'Indexed' Property - default ArrayList property\r\n */\r\n@Test\r\nvoid testIndexedPropertyDefault() {\r\n    int index = 3;\r\n    // Check the property & value doesn't exist\r\n    assertNull(dynaMap.getDynaProperty(testProperty), \"Check Indexed Property doesn't exist\");\r\n    assertNull(dynaMap.get(testProperty), \"Check Indexed Property is null\");\r\n    assertNull(dynaMap.get(testProperty, index), \"Check Indexed value is null\");\r\n    // Set the property, should create new ArrayList and set appropriate indexed value\r\n    dynaMap.set(testProperty, index, testInteger1);\r\n    assertNotNull(dynaMap.get(testProperty), \"Check Indexed Property is not null\");\r\n    assertEquals(ArrayList.class, dynaMap.get(testProperty).getClass(), \"Check Indexed Property is correct type\");\r\n    assertEquals(testInteger1, dynaMap.get(testProperty, index), \"Check First Indexed Value is correct\");\r\n    assertEquals(Integer.valueOf(index + 1), Integer.valueOf(((ArrayList<?>) dynaMap.get(testProperty)).size()), \"Check First Array length is correct\");\r\n    // Set a second indexed value, should automatically grow the ArrayList and set appropriate indexed value\r\n    index += 2;\r\n    dynaMap.set(testProperty, index, testString1);\r\n    assertEquals(testString1, dynaMap.get(testProperty, index), \"Check Second Indexed Value is correct\");\r\n    assertEquals(Integer.valueOf(index + 1), Integer.valueOf(((ArrayList<?>) dynaMap.get(testProperty)).size()), \"Check Second Array length is correct\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\LazyDynaMapTest.java",
  "methodName" : "testIndexedPropertyRestricted",
  "sourceCode" : "/**\r\n * Test Setting an Indexed Property when MutableDynaClass is set to restricted\r\n */\r\n@Test\r\nvoid testIndexedPropertyRestricted() {\r\n    final int index = 3;\r\n    // Set the MutableDyanClass to 'restricted' (i.e. no new properties cab be added\r\n    dynaMap.setRestricted(true);\r\n    assertTrue(dynaMap.isRestricted(), \"Check MutableDynaClass is restricted\");\r\n    // Check the property & value doesn't exist\r\n    assertNull(dynaMap.getDynaProperty(testProperty), \"Check Property doesn't exist\");\r\n    assertNull(dynaMap.get(testProperty), \"Check Value is null\");\r\n    // Set the property - should fail because property doesn't exist and MutableDynaClass is restricted\r\n    assertThrows(IllegalArgumentException.class, () -> dynaMap.set(testProperty, index, testInteger1));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\LazyDynaMapTest.java",
  "methodName" : "testIndexedPropertyUtils",
  "sourceCode" : "/**\r\n * Test Setting an 'Indexed' Property using PropertyUtils\r\n */\r\n@Test\r\nvoid testIndexedPropertyUtils() throws Exception {\r\n    final int index = 3;\r\n    dynaMap.setReturnNull(false);\r\n    // Check the property & value doesn't exist\r\n    assertFalse(dynaMap.isDynaProperty(testProperty), \"Check Indexed Property doesn't exist\");\r\n    assertNull(dynaMap.get(testProperty), \"Check Indexed Property is null\");\r\n    assertNull(dynaMap.get(testProperty, index), \"Check Indexed value is null\");\r\n    PropertyUtils.setProperty(dynaMap, testProperty + \"[\" + index + \"]\", testString1);\r\n    // Check property value correctly set\r\n    assertEquals(testString1, dynaMap.get(testProperty, index), \"Check Indexed Bean Value is correct\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\LazyDynaMapTest.java",
  "methodName" : "testMappedInvalidType",
  "sourceCode" : "/**\r\n * Test setting mapped property for type which is not Map\r\n */\r\n@Test\r\nvoid testMappedInvalidType() {\r\n    dynaMap.set(testProperty, Integer.valueOf(1));\r\n    assertFalse(dynaMap.getDynaProperty(testProperty).isMapped(), \"Check Property is not mapped\");\r\n    assertThrows(IllegalArgumentException.class, () -> dynaMap.set(testProperty, testKey, testInteger1));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\LazyDynaMapTest.java",
  "methodName" : "testMappedPropertyDefault",
  "sourceCode" : "/**\r\n * Test Getting/Setting a 'Mapped' Property - default HashMap property\r\n */\r\n@Test\r\nvoid testMappedPropertyDefault() {\r\n    // Check the property & value doesn't exist\r\n    assertNull(dynaMap.getDynaProperty(testProperty), \"Check Mapped Property doesn't exist\");\r\n    assertNull(dynaMap.get(testProperty), \"Check Map is null\");\r\n    assertNull(dynaMap.get(testProperty, testKey), \"Check Mapped Value is null\");\r\n    // Set a new mapped property - should add new HashMap property and set the mapped value\r\n    dynaMap.set(testProperty, testKey, testInteger1);\r\n    assertEquals(HashMap.class, dynaMap.get(testProperty).getClass(), \"Check Mapped Property exists\");\r\n    assertEquals(testInteger1, dynaMap.get(testProperty, testKey), \"Check First Mapped Value is correct(a)\");\r\n    assertEquals(testInteger1, ((HashMap<?, ?>) dynaMap.get(testProperty)).get(testKey), \"Check First Mapped Value is correct(b)\");\r\n    // Set the property again - should set the new value\r\n    dynaMap.set(testProperty, testKey, testInteger2);\r\n    assertEquals(testInteger2, dynaMap.get(testProperty, testKey), \"Check Second Mapped Value is correct(a)\");\r\n    assertEquals(testInteger2, ((HashMap<?, ?>) dynaMap.get(testProperty)).get(testKey), \"Check Second Mapped Value is correct(b)\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\LazyDynaMapTest.java",
  "methodName" : "testMappedPropertyRestricted",
  "sourceCode" : "/**\r\n * Test Setting a Mapped Property when MutableDynaClass is set to restricted\r\n */\r\n@Test\r\nvoid testMappedPropertyRestricted() {\r\n    // Set the MutableDyanClass to 'restricted' (i.e. no new properties cab be added\r\n    dynaMap.setRestricted(true);\r\n    assertTrue(dynaMap.isRestricted(), \"Check MutableDynaClass is restricted\");\r\n    // Check the property & value doesn't exist\r\n    assertNull(dynaMap.getDynaProperty(testProperty), \"Check Property doesn't exist\");\r\n    assertNull(dynaMap.get(testProperty), \"Check Value is null\");\r\n    // Set the property - should fail because property doesn't exist and MutableDynaClass is restricted\r\n    assertThrows(IllegalArgumentException.class, () -> dynaMap.set(testProperty, testKey, testInteger1));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\LazyDynaMapTest.java",
  "methodName" : "testMappedPropertyTreeMap",
  "sourceCode" : "/**\r\n * Test Getting/Setting a 'Mapped' Property - use TreeMap property\r\n */\r\n@Test\r\nvoid testMappedPropertyTreeMap() {\r\n    // Check the property & value doesn't exist\r\n    assertNull(dynaMap.getDynaProperty(testProperty), \"Check Mapped Property doesn't exist\");\r\n    assertNull(dynaMap.get(testProperty), \"Check Map is null\");\r\n    // Add a 'TreeMap' property to the DynaClass\r\n    dynaMap.add(testProperty, TreeMap.class);\r\n    assertTrue(dynaMap.getDynaProperty(testProperty).isMapped(), \"Check Property is mapped\");\r\n    assertEquals(TreeMap.class, dynaMap.getDynaProperty(testProperty).getType(), \"Check Property is correct type\");\r\n    assertEquals(TreeMap.class, dynaMap.get(testProperty).getClass(), \"Check Mapped Property now exists\");\r\n    // Set a new mapped property - should instantiate a new TreeMap property and set the mapped value\r\n    dynaMap.set(testProperty, testKey, testInteger1);\r\n    assertEquals(TreeMap.class, dynaMap.get(testProperty).getClass(), \"Check Mapped Property exists\");\r\n    assertEquals(testInteger1, dynaMap.get(testProperty, testKey), \"Check First Mapped Value is correct(a)\");\r\n    assertEquals(testInteger1, ((TreeMap<?, ?>) dynaMap.get(testProperty)).get(testKey), \"Check First Mapped Value is correct(b)\");\r\n    // Set the property again - should set the new value\r\n    dynaMap.set(testProperty, testKey, testInteger2);\r\n    assertEquals(testInteger2, dynaMap.get(testProperty, testKey), \"Check Second Mapped Value is correct(a)\");\r\n    assertEquals(testInteger2, ((TreeMap<?, ?>) dynaMap.get(testProperty)).get(testKey), \"Check Second Mapped Value is correct(b)\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\LazyDynaMapTest.java",
  "methodName" : "testMappedPropertyUtils",
  "sourceCode" : "/**\r\n * Test Setting a 'Mapped' Property using PropertyUtils\r\n */\r\n@Test\r\nvoid testMappedPropertyUtils() throws Exception {\r\n    dynaMap.setReturnNull(false);\r\n    // Check the property & value doesn't exist\r\n    assertFalse(dynaMap.isDynaProperty(testProperty), \"Check Mapped Property doesn't exist\");\r\n    assertNull(dynaMap.get(testProperty), \"Check Map is null\");\r\n    assertNull(dynaMap.get(testProperty, testKey), \"Check Mapped Value is null\");\r\n    // Set the mapped property using PropertyUtils\r\n    PropertyUtils.setProperty(dynaMap, testProperty + \"(\" + testKey + \")\", testString1);\r\n    // Check property value correctly set\r\n    assertEquals(testString1, dynaMap.get(testProperty, testKey), \"Check Mapped Bean Value is correct\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\LazyDynaMapTest.java",
  "methodName" : "testNewInstance",
  "sourceCode" : "/**\r\n * Test creating using DynaClass.newInstance()\r\n */\r\n@Test\r\nvoid testNewInstance() {\r\n    // Create LazyDynaMap using TreeMap\r\n    // containing some properties\r\n    final LazyDynaMap orig = new LazyDynaMap(new TreeMap<>());\r\n    orig.set(\"indexProp\", 0, \"indexVal0\");\r\n    orig.set(\"indexProp\", 1, \"indexVal1\");\r\n    assertEquals(2, ((List<?>) orig.get(\"indexProp\")).size(), \"Index prop size\");\r\n    final LazyDynaMap newOne = (LazyDynaMap) orig.newInstance();\r\n    final Map<String, Object> newMap = newOne.getMap();\r\n    assertEquals(TreeMap.class, newMap.getClass(), \"Check Map type\");\r\n    final ArrayList<?> indexProp = (ArrayList<?>) newMap.get(\"indexProp\");\r\n    assertNotNull(indexProp, \"Indexed Prop missing\");\r\n    assertEquals(0, indexProp.size(), \"Index prop size\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\LazyDynaMapTest.java",
  "methodName" : "testSimpleProperty",
  "sourceCode" : "/**\r\n * Test Getting/Setting a Simple Property\r\n */\r\n@Test\r\nvoid testSimpleProperty() {\r\n    // Check the property & value doesn't exist\r\n    assertNull(dynaMap.getDynaProperty(testProperty), \"Check Property doesn't exist\");\r\n    assertNull(dynaMap.get(testProperty), \"Check Value is null\");\r\n    // Set a new property - should add new property and set value\r\n    dynaMap.set(testProperty, testInteger1);\r\n    assertEquals(testInteger1, dynaMap.get(testProperty), \"Check First Value is correct\");\r\n    assertEquals(Integer.class, dynaMap.getDynaProperty(testProperty).getType(), \"Check Property type is correct\");\r\n    // Set the property again - should set the new value\r\n    dynaMap.set(testProperty, testInteger2);\r\n    assertEquals(testInteger2, dynaMap.get(testProperty), \"Check Second Value is correct\");\r\n    // Set the property again - with a different type, should succeed\r\n    dynaMap.set(testProperty, testString1);\r\n    assertEquals(testString1, dynaMap.get(testProperty), \"Check Third Value is correct\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\LazyDynaMapTest.java",
  "methodName" : "testSimplePropertyRestricted",
  "sourceCode" : "/**\r\n * Test Setting a Simple Property when MutableDynaClass is set to restricted\r\n */\r\n@Test\r\nvoid testSimplePropertyRestricted() {\r\n    // Set the MutableDyanClass to 'restricted' (i.e. no new properties cab be added\r\n    dynaMap.setRestricted(true);\r\n    assertTrue(dynaMap.isRestricted(), \"Check MutableDynaClass is restricted\");\r\n    // Check the property & value doesn't exist\r\n    assertNull(dynaMap.getDynaProperty(testProperty), \"Check Property doesn't exist\");\r\n    assertNull(dynaMap.get(testProperty), \"Check Value is null\");\r\n    // Set the property - should fail because property doesn't exist and MutableDynaClass is restricted\r\n    assertThrows(IllegalArgumentException.class, () -> dynaMap.set(testProperty, testString1));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\locale\\LocaleBeanificationTest.java",
  "methodName" : "testBeanUtilsBeanSetInstance",
  "sourceCode" : "/**\r\n * Tests whether different threads can set BeanUtils instances correctly\r\n */\r\n@Test\r\nvoid testBeanUtilsBeanSetInstance() throws Exception {\r\n    final class SetInstanceTesterThread extends Thread {\r\n\r\n        private final Signal signal;\r\n\r\n        private final LocaleBeanUtilsBean bean;\r\n\r\n        SetInstanceTesterThread(final Signal signal, final LocaleBeanUtilsBean bean) {\r\n            this.signal = signal;\r\n            this.bean = bean;\r\n        }\r\n\r\n        @Override\r\n        public void run() {\r\n            LocaleBeanUtilsBean.setInstance(bean);\r\n            signal.setSignal(21);\r\n            signal.setBean(LocaleBeanUtilsBean.getLocaleBeanUtilsInstance());\r\n        }\r\n\r\n        @Override\r\n        public String toString() {\r\n            return \"SetInstanceTesterThread\";\r\n        }\r\n    }\r\n    final Signal signal = new Signal();\r\n    signal.setSignal(1);\r\n    final LocaleBeanUtilsBean beanOne = new LocaleBeanUtilsBean();\r\n    final LocaleBeanUtilsBean beanTwo = new LocaleBeanUtilsBean();\r\n    final SetInstanceTesterThread thread = new SetInstanceTesterThread(signal, beanTwo);\r\n    thread.setContextClassLoader(new TestClassLoader());\r\n    LocaleBeanUtilsBean.setInstance(beanOne);\r\n    assertEquals(beanOne, LocaleBeanUtilsBean.getLocaleBeanUtilsInstance(), \"Start thread gets right instance\");\r\n    thread.start();\r\n    thread.join();\r\n    assertEquals(21, signal.getSignal(), \"Signal not set by test thread\");\r\n    assertEquals(beanOne, LocaleBeanUtilsBean.getLocaleBeanUtilsInstance(), \"Second thread preserves value\");\r\n    assertEquals(beanTwo, signal.getBean(), \"Second thread gets value it set\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\locale\\LocaleBeanificationTest.java",
  "methodName" : "testContextClassloaderIndependence",
  "sourceCode" : "/**\r\n * Tests whether calls are independent for different class loaders\r\n */\r\n@Test\r\nvoid testContextClassloaderIndependence() throws Exception {\r\n    final class TestIndependenceThread extends Thread {\r\n\r\n        private final Signal signal;\r\n\r\n        private final PrimitiveBean bean;\r\n\r\n        TestIndependenceThread(final Signal signal, final PrimitiveBean bean) {\r\n            this.signal = signal;\r\n            this.bean = bean;\r\n        }\r\n\r\n        @Override\r\n        public void run() {\r\n            try {\r\n                signal.setSignal(3);\r\n                LocaleConvertUtils.register(new LocaleConverter<Integer>() {\r\n\r\n                    @Override\r\n                    public <R> R convert(final Class<R> type, final Object value) {\r\n                        return ConvertUtils.primitiveToWrapper(type).cast(9);\r\n                    }\r\n\r\n                    @Override\r\n                    public <R> R convert(final Class<R> type, final Object value, final String pattern) {\r\n                        return ConvertUtils.primitiveToWrapper(type).cast(9);\r\n                    }\r\n                }, Integer.TYPE, Locale.getDefault());\r\n                LocaleBeanUtils.setProperty(bean, \"int\", \"1\");\r\n            } catch (final Exception e) {\r\n                e.printStackTrace();\r\n                signal.setException(e);\r\n            }\r\n        }\r\n\r\n        @Override\r\n        public String toString() {\r\n            return \"TestIndependenceThread\";\r\n        }\r\n    }\r\n    final PrimitiveBean bean = new PrimitiveBean();\r\n    LocaleBeanUtils.setProperty(bean, \"int\", new Integer(1));\r\n    assertEquals(1, bean.getInt(), \"Wrong property value (1)\");\r\n    LocaleConvertUtils.register(new LocaleConverter<Integer>() {\r\n\r\n        @Override\r\n        public <R> R convert(final Class<R> type, final Object value) {\r\n            return ConvertUtils.primitiveToWrapper(type).cast(5);\r\n        }\r\n\r\n        @Override\r\n        public <R> R convert(final Class<R> type, final Object value, final String pattern) {\r\n            return ConvertUtils.primitiveToWrapper(type).cast(5);\r\n        }\r\n    }, Integer.TYPE, Locale.getDefault());\r\n    LocaleBeanUtils.setProperty(bean, \"int\", \"1\");\r\n    assertEquals(5, bean.getInt(), \"Wrong property value(2)\");\r\n    final Signal signal = new Signal();\r\n    signal.setSignal(1);\r\n    final TestIndependenceThread thread = new TestIndependenceThread(signal, bean);\r\n    thread.setContextClassLoader(new TestClassLoader());\r\n    thread.start();\r\n    thread.join();\r\n    assertNull(signal.getException(), \"Exception thrown by test thread:\" + signal.getException());\r\n    assertEquals(3, signal.getSignal(), \"Signal not set by test thread\");\r\n    assertEquals(9, bean.getInt(), \"Wrong property value(3)\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\locale\\LocaleBeanificationTest.java",
  "methodName" : "testContextClassLoaderLocal",
  "sourceCode" : "/**\r\n * Tests whether difference instances are loaded by different context class loaders.\r\n */\r\n@Test\r\nvoid testContextClassLoaderLocal() throws Exception {\r\n    final class CCLLTesterThread extends Thread {\r\n\r\n        private final Signal signal;\r\n\r\n        private final ContextClassLoaderLocal<Integer> ccll;\r\n\r\n        CCLLTesterThread(final Signal signal, final ContextClassLoaderLocal<Integer> ccll) {\r\n            this.signal = signal;\r\n            this.ccll = ccll;\r\n        }\r\n\r\n        @Override\r\n        public void run() {\r\n            ccll.set(new Integer(1789));\r\n            signal.setSignal(2);\r\n            signal.setMarkerObject(ccll.get());\r\n        }\r\n\r\n        @Override\r\n        public String toString() {\r\n            return \"CCLLTesterThread\";\r\n        }\r\n    }\r\n    final ContextClassLoaderLocal<Integer> ccll = new ContextClassLoaderLocal<>();\r\n    ccll.set(1776);\r\n    assertEquals(new Integer(1776), ccll.get(), \"Start thread sets value\");\r\n    final Signal signal = new Signal();\r\n    signal.setSignal(1);\r\n    final CCLLTesterThread thread = new CCLLTesterThread(signal, ccll);\r\n    thread.setContextClassLoader(new TestClassLoader());\r\n    thread.start();\r\n    thread.join();\r\n    assertEquals(2, signal.getSignal(), \"Signal not set by test thread\");\r\n    assertEquals(new Integer(1776), ccll.get(), \"Second thread preserves value\");\r\n    assertEquals(new Integer(1789), signal.getMarkerObject(), \"Second thread gets value it set\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\locale\\LocaleBeanificationTest.java",
  "methodName" : "testContextClassLoaderUnset",
  "sourceCode" : "/**\r\n * Tests whether the unset method works\r\n */\r\n@Test\r\nvoid testContextClassLoaderUnset() {\r\n    final LocaleBeanUtilsBean beanOne = new LocaleBeanUtilsBean();\r\n    final ContextClassLoaderLocal<LocaleBeanUtilsBean> ccll = new ContextClassLoaderLocal<>();\r\n    ccll.set(beanOne);\r\n    assertEquals(beanOne, ccll.get(), \"Start thread gets right instance\");\r\n    ccll.unset();\r\n    assertTrue(!beanOne.equals(ccll.get()), \"Unset works\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\locale\\LocaleBeanificationTest.java",
  "methodName" : "testGetByContextClassLoader",
  "sourceCode" : "/**\r\n * Tests whether difference instances are loaded by different context class loaders.\r\n */\r\n@Test\r\nvoid testGetByContextClassLoader() throws Exception {\r\n    final class GetBeanUtilsBeanThread extends Thread {\r\n\r\n        private final Signal signal;\r\n\r\n        GetBeanUtilsBeanThread(final Signal signal) {\r\n            this.signal = signal;\r\n        }\r\n\r\n        @Override\r\n        public void run() {\r\n            signal.setSignal(2);\r\n            signal.setBean(LocaleBeanUtilsBean.getLocaleBeanUtilsInstance());\r\n            signal.setConvertUtils(LocaleConvertUtilsBean.getInstance());\r\n        }\r\n\r\n        @Override\r\n        public String toString() {\r\n            return \"GetBeanUtilsBeanThread\";\r\n        }\r\n    }\r\n    final Signal signal = new Signal();\r\n    signal.setSignal(1);\r\n    final GetBeanUtilsBeanThread thread = new GetBeanUtilsBeanThread(signal);\r\n    thread.setContextClassLoader(new TestClassLoader());\r\n    thread.start();\r\n    thread.join();\r\n    assertEquals(2, signal.getSignal(), \"Signal not set by test thread\");\r\n    assertTrue(BeanUtilsBean.getInstance() != signal.getBean(), \"Different LocaleBeanUtilsBean instances per context classloader\");\r\n    assertTrue(LocaleConvertUtilsBean.getInstance() != signal.getConvertUtils(), \"Different LocaleConvertUtilsBean instances per context classloader\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\locale\\LocaleBeanificationTest.java",
  "methodName" : "testLocaleAwareConverterInConvertUtils",
  "sourceCode" : "/**\r\n * Test registering a locale-aware converter with the standard ConvertUtils.\r\n */\r\n@Test\r\nvoid testLocaleAwareConverterInConvertUtils() {\r\n    try {\r\n        // first use the default non-locale-aware converter\r\n        Long data = (Long) ConvertUtils.convert(\"777\", Long.class);\r\n        assertEquals(777, data.longValue(), \"Standard format long converted ok\");\r\n        // now try default converter with special delimiters\r\n        // This conversion will cause an error. But the default\r\n        // Long converter is set up to return a default value of\r\n        // zero on error.\r\n        data = (Long) ConvertUtils.convert(\"1.000.000\", Long.class);\r\n        assertEquals(0, data.longValue(), \"Standard format behaved as expected\");\r\n        // Now try using a locale-aware converter together with\r\n        // locale-specific input string. Note that in the german locale,\r\n        // large numbers can be split up into groups of three digits\r\n        // using a dot character (and comma is the decimal-point indicator).\r\n        final Locale germanLocale = Locale.GERMAN;\r\n        final LongLocaleConverter longLocaleConverter = LongLocaleConverter.builder().setLocale(germanLocale).get();\r\n        ConvertUtils.register(longLocaleConverter, Long.class);\r\n        data = (Long) ConvertUtils.convert(\"1.000.000\", Long.class);\r\n        assertEquals(1000000, data.longValue(), \"German-format long converted ok\");\r\n    } finally {\r\n        ConvertUtils.deregister();\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\locale\\LocaleBeanificationTest.java",
  "methodName" : "testMemoryLeak",
  "sourceCode" : "/**\r\n * Tests whether class loaders and beans are released from memory\r\n */\r\n@Test\r\nvoid testMemoryLeak() throws Exception {\r\n    // many thanks to Juozas Baliuka for suggesting this methodology\r\n    TestClassLoader loader = new TestClassLoader();\r\n    final WeakReference<TestClassLoader> loaderReference = new WeakReference<>(loader);\r\n    LocaleBeanUtilsBean.getLocaleBeanUtilsInstance();\r\n    final class GetBeanUtilsBeanThread extends Thread {\r\n\r\n        LocaleBeanUtilsBean beanUtils;\r\n\r\n        LocaleConvertUtilsBean convertUtils;\r\n\r\n        GetBeanUtilsBeanThread() {\r\n        }\r\n\r\n        @Override\r\n        public void run() {\r\n            beanUtils = LocaleBeanUtilsBean.getLocaleBeanUtilsInstance();\r\n            convertUtils = LocaleConvertUtilsBean.getInstance();\r\n            // XXX Log keeps a reference around!\r\n            LogFactory.releaseAll();\r\n        }\r\n\r\n        @Override\r\n        public String toString() {\r\n            return \"GetBeanUtilsBeanThread\";\r\n        }\r\n    }\r\n    GetBeanUtilsBeanThread thread = new GetBeanUtilsBeanThread();\r\n    final WeakReference<GetBeanUtilsBeanThread> threadWeakReference = new WeakReference<>(thread);\r\n    thread.setContextClassLoader(loader);\r\n    thread.start();\r\n    thread.join();\r\n    final WeakReference<LocaleBeanUtilsBean> beanUtilsReference = new WeakReference<>(thread.beanUtils);\r\n    final WeakReference<LocaleConvertUtilsBean> convertUtilsReference = new WeakReference<>(thread.convertUtils);\r\n    assertNotNull(loaderReference.get(), \"Weak reference released early (1)\");\r\n    assertNotNull(beanUtilsReference.get(), \"Weak reference released early (2)\");\r\n    assertNotNull(convertUtilsReference.get(), \"Weak reference released early (4)\");\r\n    // dereference strong references\r\n    loader = null;\r\n    thread.setContextClassLoader(null);\r\n    thread = null;\r\n    int iterations = 0;\r\n    int bytz = 2;\r\n    while (true) {\r\n        LocaleBeanUtilsBean.getLocaleBeanUtilsInstance();\r\n        System.gc();\r\n        assertFalse(iterations++ > MAX_GC_ITERATIONS, \"Max iterations reached before resource released.\");\r\n        if (loaderReference.get() == null && beanUtilsReference.get() == null && convertUtilsReference.get() == null) {\r\n            break;\r\n        }\r\n        // create garbage:\r\n        final byte[] b = new byte[bytz];\r\n        bytz *= 2;\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\locale\\LocaleBeanificationTest.java",
  "methodName" : "testMemoryLeak2",
  "sourceCode" : "/**\r\n * Tests whether class loaders and beans are released from memory by the map used by BeanUtils\r\n */\r\n@Test\r\nvoid testMemoryLeak2() {\r\n    // many thanks to Juozas Baliuka for suggesting this methodology\r\n    TestClassLoader loader = new TestClassLoader();\r\n    final ReferenceQueue<Object> queue = new ReferenceQueue<>();\r\n    final WeakReference<ClassLoader> loaderReference = new WeakReference<>(loader, queue);\r\n    Integer test = new Integer(1);\r\n    final WeakReference<Integer> testReference = new WeakReference<>(test, queue);\r\n    // Map map = new ReferenceMap(ReferenceMap.WEAK, ReferenceMap.HARD, true);\r\n    final Map<TestClassLoader, Integer> map = new WeakHashMap<>();\r\n    map.put(loader, test);\r\n    assertEquals(test, map.get(loader), \"In map\");\r\n    assertNotNull(loaderReference.get(), \"Weak reference released early (1)\");\r\n    assertNotNull(testReference.get(), \"Weak reference released early (2)\");\r\n    // dereference strong references\r\n    loader = null;\r\n    test = null;\r\n    int iterations = 0;\r\n    int bytz = 2;\r\n    while (true) {\r\n        System.gc();\r\n        assertFalse(iterations++ > MAX_GC_ITERATIONS, \"Max iterations reached before resource released.\");\r\n        map.isEmpty();\r\n        if (loaderReference.get() == null && testReference.get() == null) {\r\n            break;\r\n        }\r\n        // create garbage:\r\n        final byte[] b = new byte[bytz];\r\n        bytz *= 2;\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\locale\\LocaleBeanificationTest.java",
  "methodName" : "testMemoryTestMethodology",
  "sourceCode" : "/**\r\n * Test of the methodology we'll use for some of the later tests\r\n */\r\n@Test\r\nvoid testMemoryTestMethodology() throws Exception {\r\n    // test methodology\r\n    // many thanks to Juozas Baliuka for suggesting this method\r\n    ClassLoader loader = new ClassLoader(this.getClass().getClassLoader()) {\r\n    };\r\n    final WeakReference<ClassLoader> reference = new WeakReference<>(loader);\r\n    Class<?> myClass = loader.loadClass(\"org.apache.commons.beanutils2.BetaBean\");\r\n    assertNotNull(reference.get(), \"Weak reference released early\");\r\n    // dereference class loader and class:\r\n    loader = null;\r\n    myClass = null;\r\n    int iterations = 0;\r\n    int bytz = 2;\r\n    while (true) {\r\n        System.gc();\r\n        assertFalse(iterations++ > MAX_GC_ITERATIONS, \"Max iterations reached before resource released.\");\r\n        if (reference.get() == null) {\r\n            break;\r\n        }\r\n        // create garbage:\r\n        final byte[] b = new byte[bytz];\r\n        bytz *= 2;\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\locale\\LocaleBeanUtilsTest.java",
  "methodName" : "testSetNestedPropertyIndexed",
  "sourceCode" : "/**\r\n * Test setting a nested indexed property\r\n */\r\n@Test\r\nvoid testSetNestedPropertyIndexed() throws Exception {\r\n    final TestBean bean = new TestBean();\r\n    bean.getNested().setIntIndexed(1, 51);\r\n    assertEquals(51, bean.getNested().getIntIndexed(1), \"Initial value[1] 51\");\r\n    LocaleBeanUtils.setProperty(bean, \"nested.intIndexed[1]\", \"123\", null);\r\n    assertEquals(123, bean.getNested().getIntIndexed(1), \"Check Set Value\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\locale\\LocaleBeanUtilsTest.java",
  "methodName" : "testSetNestedPropertySimple",
  "sourceCode" : "/**\r\n * Test setting a nested simple property\r\n */\r\n@Test\r\nvoid testSetNestedPropertySimple() throws Exception {\r\n    final TestBean bean = new TestBean();\r\n    bean.getNested().setIntProperty(5);\r\n    assertEquals(5, bean.getNested().getIntProperty(), \"Initial value 5\");\r\n    LocaleBeanUtils.setProperty(bean, \"nested.intProperty\", \"123\", null);\r\n    assertEquals(123, bean.getNested().getIntProperty(), \"Check Set Value\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\locale\\LocaleConvertUtilsTest.java",
  "methodName" : "fixmetestNegativeIntegerArray",
  "sourceCode" : "/**\r\n * Negative String to primitive integer array tests.\r\n */\r\n@Test\r\n@Disabled(\"Array conversions not implemented yet.\")\r\npublic void fixmetestNegativeIntegerArray() {\r\n    Object value;\r\n    final int[] intArray = {};\r\n    value = LocaleConvertUtils.convert((String) null, intArray.getClass());\r\n    checkIntegerArray(value, intArray);\r\n    value = LocaleConvertUtils.convert(\"a\", intArray.getClass());\r\n    checkIntegerArray(value, intArray);\r\n    value = LocaleConvertUtils.convert(\"{ a }\", intArray.getClass());\r\n    checkIntegerArray(value, intArray);\r\n    value = LocaleConvertUtils.convert(\"1a3\", intArray.getClass());\r\n    checkIntegerArray(value, intArray);\r\n    value = LocaleConvertUtils.convert(\"{ 1a3 }\", intArray.getClass());\r\n    checkIntegerArray(value, intArray);\r\n    value = LocaleConvertUtils.convert(\"0,1a3\", intArray.getClass());\r\n    checkIntegerArray(value, intArray);\r\n    value = LocaleConvertUtils.convert(\"{ 0, 1a3 }\", intArray.getClass());\r\n    checkIntegerArray(value, intArray);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\locale\\LocaleConvertUtilsTest.java",
  "methodName" : "fixmetestNegativeStringArray",
  "sourceCode" : "/**\r\n * Negative String to String array tests.\r\n */\r\n@Test\r\n@Disabled(\"Array conversions not implemented yet.\")\r\npublic void fixmetestNegativeStringArray() {\r\n    Object value;\r\n    final String[] stringArray = {};\r\n    value = LocaleConvertUtils.convert((String) null, stringArray.getClass());\r\n    checkStringArray(value, stringArray);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\locale\\LocaleConvertUtilsTest.java",
  "methodName" : "fixmetestObjectToStringArray",
  "sourceCode" : "/**\r\n * Test conversion of object to string for arrays - .\r\n */\r\n@Test\r\n@Disabled(\"Array conversions not implemented yet.\")\r\npublic void fixmetestObjectToStringArray() {\r\n    final int[] intArray0 = {};\r\n    final int[] intArray1 = { 123 };\r\n    final int[] intArray2 = { 123, 456 };\r\n    final String[] stringArray0 = {};\r\n    final String[] stringArray1 = { \"abc\" };\r\n    final String[] stringArray2 = { \"abc\", \"def\" };\r\n    assertEquals(null, LocaleConvertUtils.convert(intArray0), \"intArray0\");\r\n    assertEquals(\"123\", LocaleConvertUtils.convert(intArray1), \"intArray1\");\r\n    assertEquals(\"123\", LocaleConvertUtils.convert(intArray2), \"intArray2\");\r\n    assertEquals(null, LocaleConvertUtils.convert(stringArray0), \"stringArray0\");\r\n    assertEquals(\"abc\", LocaleConvertUtils.convert(stringArray1), \"stringArray1\");\r\n    assertEquals(\"abc\", LocaleConvertUtils.convert(stringArray2), \"stringArray2\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\locale\\LocaleConvertUtilsTest.java",
  "methodName" : "fixmetestPositiveArray",
  "sourceCode" : "/**\r\n * Positive array conversion tests.\r\n */\r\n@Test\r\n@Disabled(\"Array conversions not implemented yet.\")\r\npublic void fixmetestPositiveArray() {\r\n    final String[] values1 = { \"10\", \"20\", \"30\" };\r\n    Object value = LocaleConvertUtils.convert(values1, Integer.TYPE);\r\n    final int[] shape = {};\r\n    assertEquals(shape.getClass(), value.getClass());\r\n    final int[] results1 = (int[]) value;\r\n    assertEquals(results1[0], 10);\r\n    assertEquals(results1[1], 20);\r\n    assertEquals(results1[2], 30);\r\n    final String[] values2 = { \"100\", \"200\", \"300\" };\r\n    value = LocaleConvertUtils.convert(values2, shape.getClass());\r\n    assertEquals(shape.getClass(), value.getClass());\r\n    final int[] results2 = (int[]) value;\r\n    assertEquals(results2[0], 100);\r\n    assertEquals(results2[1], 200);\r\n    assertEquals(results2[2], 300);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\locale\\LocaleConvertUtilsTest.java",
  "methodName" : "fixmetestPositiveIntegerArray",
  "sourceCode" : "/**\r\n * Positive String to primitive integer array tests.\r\n */\r\n@Test\r\n@Disabled(\"Array conversions not implemented yet.\")\r\npublic void fixmetestPositiveIntegerArray() {\r\n    Object value;\r\n    final int[] intArray = {};\r\n    final int[] intArray1 = { 0 };\r\n    final int[] intArray2 = { 0, 10 };\r\n    value = LocaleConvertUtils.convert(\"{  }\", intArray.getClass());\r\n    checkIntegerArray(value, intArray);\r\n    value = LocaleConvertUtils.convert(\"0\", intArray.getClass());\r\n    checkIntegerArray(value, intArray1);\r\n    value = LocaleConvertUtils.convert(\" 0 \", intArray.getClass());\r\n    checkIntegerArray(value, intArray1);\r\n    value = LocaleConvertUtils.convert(\"{ 0 }\", intArray.getClass());\r\n    checkIntegerArray(value, intArray1);\r\n    value = LocaleConvertUtils.convert(\"0,10\", intArray.getClass());\r\n    checkIntegerArray(value, intArray2);\r\n    value = LocaleConvertUtils.convert(\"0 10\", intArray.getClass());\r\n    checkIntegerArray(value, intArray2);\r\n    value = LocaleConvertUtils.convert(\"{0,10}\", intArray.getClass());\r\n    checkIntegerArray(value, intArray2);\r\n    value = LocaleConvertUtils.convert(\"{0 10}\", intArray.getClass());\r\n    checkIntegerArray(value, intArray2);\r\n    value = LocaleConvertUtils.convert(\"{ 0, 10 }\", intArray.getClass());\r\n    checkIntegerArray(value, intArray2);\r\n    value = LocaleConvertUtils.convert(\"{ 0 10 }\", intArray.getClass());\r\n    checkIntegerArray(value, intArray2);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\locale\\LocaleConvertUtilsTest.java",
  "methodName" : "fixmetestPositiveStringArray",
  "sourceCode" : "/**\r\n * Positive String to String array tests.\r\n */\r\n@Test\r\n@Disabled(\"Array conversions not implemented yet.\")\r\npublic void fixmetestPositiveStringArray() {\r\n    Object value;\r\n    final String[] stringArray = {};\r\n    final String[] stringArray1 = { \"abc\" };\r\n    final String[] stringArray2 = { \"abc\", \"de,f\" };\r\n    value = LocaleConvertUtils.convert(\"\", stringArray.getClass());\r\n    checkStringArray(value, stringArray);\r\n    value = LocaleConvertUtils.convert(\" \", stringArray.getClass());\r\n    checkStringArray(value, stringArray);\r\n    value = LocaleConvertUtils.convert(\"{}\", stringArray.getClass());\r\n    checkStringArray(value, stringArray);\r\n    value = LocaleConvertUtils.convert(\"{  }\", stringArray.getClass());\r\n    checkStringArray(value, stringArray);\r\n    value = LocaleConvertUtils.convert(\"abc\", stringArray.getClass());\r\n    checkStringArray(value, stringArray1);\r\n    value = LocaleConvertUtils.convert(\"{abc}\", stringArray.getClass());\r\n    checkStringArray(value, stringArray1);\r\n    value = LocaleConvertUtils.convert(\"\\\"abc\\\"\", stringArray.getClass());\r\n    checkStringArray(value, stringArray1);\r\n    value = LocaleConvertUtils.convert(\"{\\\"abc\\\"}\", stringArray.getClass());\r\n    checkStringArray(value, stringArray1);\r\n    value = LocaleConvertUtils.convert(\"'abc'\", stringArray.getClass());\r\n    checkStringArray(value, stringArray1);\r\n    value = LocaleConvertUtils.convert(\"{'abc'}\", stringArray.getClass());\r\n    checkStringArray(value, stringArray1);\r\n    value = LocaleConvertUtils.convert(\"abc 'de,f'\", stringArray.getClass());\r\n    checkStringArray(value, stringArray2);\r\n    value = LocaleConvertUtils.convert(\"{abc, 'de,f'}\", stringArray.getClass());\r\n    checkStringArray(value, stringArray2);\r\n    value = LocaleConvertUtils.convert(\"\\\"abc\\\",\\\"de,f\\\"\", stringArray.getClass());\r\n    checkStringArray(value, stringArray2);\r\n    value = LocaleConvertUtils.convert(\"{\\\"abc\\\" 'de,f'}\", stringArray.getClass());\r\n    checkStringArray(value, stringArray2);\r\n    value = LocaleConvertUtils.convert(\"'abc' 'de,f'\", stringArray.getClass());\r\n    checkStringArray(value, stringArray2);\r\n    value = LocaleConvertUtils.convert(\"{'abc', \\\"de,f\\\"}\", stringArray.getClass());\r\n    checkStringArray(value, stringArray2);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\locale\\LocaleConvertUtilsTest.java",
  "methodName" : "testConvertStringArrayLocaleNull",
  "sourceCode" : "/**\r\n * Test conversion of a String array using a Locale and pattern.\r\n */\r\n@Test\r\nvoid testConvertStringArrayLocaleNull() {\r\n    final Object result = LocaleConvertUtils.convert(new String[] { \"123\" }, Integer[].class, null, \"#,###\");\r\n    assertNotNull(result, \"Null Result\");\r\n    assertEquals(Integer[].class, result.getClass(), \"Integer Array Type\");\r\n    assertEquals(1, ((Integer[]) result).length, \"Integer Array Length\");\r\n    assertEquals(Integer.valueOf(123), ((Integer[]) result)[0], \"Integer Array Value\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\locale\\LocaleConvertUtilsTest.java",
  "methodName" : "testConvertStringLocaleNull",
  "sourceCode" : "/**\r\n * Test conversion of a String using a Locale and pattern.\r\n */\r\n@Test\r\nvoid testConvertStringLocaleNull() {\r\n    final Object result = LocaleConvertUtils.convert(\"123\", Integer.class, null, \"#,###\");\r\n    assertNotNull(result, \"Null Result\");\r\n    assertEquals(Integer.class, result.getClass(), \"Integer Type\");\r\n    assertEquals(Integer.valueOf(123), result, \"Integer Value\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\locale\\LocaleConvertUtilsTest.java",
  "methodName" : "testDefaultToStringConversionUnsupportedType",
  "sourceCode" : "/**\r\n * Tests a conversion if there is no suitable converter registered. In this case, the string converter is used, and the passed in target type is ignored.\r\n * (This test is added to prevent a regression after the locale converters have been generified.)\r\n */\r\n@Test\r\nvoid testDefaultToStringConversionUnsupportedType() {\r\n    final Integer value = 20131101;\r\n    assertEquals(value.toString(), LocaleConvertUtils.convert(value.toString(), getClass()), \"Wrong result\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\locale\\LocaleConvertUtilsTest.java",
  "methodName" : "testNegativeScalar",
  "sourceCode" : "/**\r\n * Negative scalar conversion tests. These rely on the standard default value conversions in LocaleConvertUtils.\r\n */\r\n@Test\r\nvoid testNegativeScalar() {\r\n    /*\r\n         * fixme Boolean converters not implemented at this point value = LocaleConvertUtils.convert(\"foo\", Boolean.TYPE); ...\r\n         *\r\n         * value = LocaleConvertUtils.convert(\"foo\", Boolean.class); ...\r\n         */\r\n    assertThrows(ConversionException.class, () -> LocaleConvertUtils.convert(\"foo\", Byte.TYPE));\r\n    assertThrows(ConversionException.class, () -> LocaleConvertUtils.convert(\"foo\", Byte.class));\r\n    /*\r\n         * fixme - not implemented try { value = LocaleConvertUtils.convert(\"org.apache.commons.beanutils2.Undefined\", Class.class);\r\n         * fail(\"Should have thrown conversion exception\"); } catch (ConversionException e) { ; // Expected result }\r\n         */\r\n    assertThrows(ConversionException.class, () -> LocaleConvertUtils.convert(\"foo\", Double.TYPE));\r\n    assertThrows(ConversionException.class, () -> LocaleConvertUtils.convert(\"foo\", Double.class));\r\n    assertThrows(ConversionException.class, () -> LocaleConvertUtils.convert(\"foo\", Float.TYPE));\r\n    assertThrows(ConversionException.class, () -> LocaleConvertUtils.convert(\"foo\", Float.class));\r\n    assertThrows(ConversionException.class, () -> LocaleConvertUtils.convert(\"foo\", Integer.TYPE));\r\n    assertThrows(ConversionException.class, () -> LocaleConvertUtils.convert(\"foo\", Integer.class));\r\n    assertThrows(ConversionException.class, () -> LocaleConvertUtils.convert(\"foo\", Byte.TYPE));\r\n    assertThrows(ConversionException.class, () -> LocaleConvertUtils.convert(\"foo\", Long.class));\r\n    assertThrows(ConversionException.class, () -> LocaleConvertUtils.convert(\"foo\", Short.TYPE));\r\n    assertThrows(ConversionException.class, () -> LocaleConvertUtils.convert(\"foo\", Short.class));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\locale\\LocaleConvertUtilsTest.java",
  "methodName" : "testObjectToStringScalar",
  "sourceCode" : "/**\r\n * Test conversion of object to string for scalars.\r\n */\r\n@Test\r\nvoid testObjectToStringScalar() {\r\n    assertEquals(\"false\", LocaleConvertUtils.convert(Boolean.FALSE), \"Boolean->String\");\r\n    assertEquals(\"true\", LocaleConvertUtils.convert(Boolean.TRUE), \"Boolean->String\");\r\n    assertEquals(\"123\", LocaleConvertUtils.convert(Byte.valueOf((byte) 123)), \"Byte->String\");\r\n    assertEquals(\"a\", LocaleConvertUtils.convert(Character.valueOf('a')), \"Character->String\");\r\n    assertEquals(\"123\" + decimalSeparator + \"4\", LocaleConvertUtils.convert(Double.valueOf(123.4)), \"Double->String\");\r\n    assertEquals(\"123\" + decimalSeparator + \"4\", LocaleConvertUtils.convert(Float.valueOf((float) 123.4)), \"Float->String\");\r\n    assertEquals(\"123\", LocaleConvertUtils.convert(Integer.valueOf(123)), \"Integer->String\");\r\n    assertEquals(\"123\", LocaleConvertUtils.convert(Long.valueOf(123)), \"Long->String\");\r\n    assertEquals(\"123\", LocaleConvertUtils.convert(Short.valueOf((short) 123)), \"Short->String\");\r\n    assertEquals(\"abc\", LocaleConvertUtils.convert(\"abc\"), \"String->String\");\r\n    assertEquals(null, LocaleConvertUtils.convert(null), \"String->String null\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\locale\\LocaleConvertUtilsTest.java",
  "methodName" : "testPositiveScalar",
  "sourceCode" : "/**\r\n * Positive scalar conversion tests.\r\n */\r\n@Test\r\nvoid testPositiveScalar() {\r\n    Object value;\r\n    /*\r\n         * fixme Boolean converters not implemented value = LocaleConvertUtils.convert(\"true\", Boolean.TYPE); assertInstanceOf(Boolean.class, value);\r\n         * assertEquals(((Boolean) value).booleanValue(), true);\r\n         *\r\n         * value = LocaleConvertUtils.convert(\"true\", Boolean.class); assertInstanceOf(Boolean.class, value); assertEquals(((Boolean) value).booleanValue(),\r\n         * true);\r\n         *\r\n         * value = LocaleConvertUtils.convert(\"yes\", Boolean.TYPE); assertInstanceOf(Boolean.class, value); assertEquals(((Boolean) value).booleanValue(),\r\n         * true);\r\n         *\r\n         * value = LocaleConvertUtils.convert(\"yes\", Boolean.class); assertInstanceOf(Boolean.class, value); assertEquals(((Boolean) value).booleanValue(),\r\n         * true);\r\n         *\r\n         * value = LocaleConvertUtils.convert(\"y\", Boolean.TYPE); assertInstanceOf(Boolean.class, value); assertEquals(((Boolean) value).booleanValue(), true);\r\n         *\r\n         * value = LocaleConvertUtils.convert(\"y\", Boolean.class); assertInstanceOf(Boolean.class, value); assertEquals(((Boolean) value).booleanValue(), true);\r\n         *\r\n         * value = LocaleConvertUtils.convert(\"on\", Boolean.TYPE); assertInstanceOf(Boolean.class, value); assertEquals(((Boolean) value).booleanValue(), true);\r\n         *\r\n         * value = LocaleConvertUtils.convert(\"on\", Boolean.class); assertInstanceOf(Boolean.class, value); assertEquals(((Boolean) value).booleanValue(),\r\n         * true);\r\n         *\r\n         * value = LocaleConvertUtils.convert(\"false\", Boolean.TYPE); assertInstanceOf(Boolean.class, value); assertEquals(((Boolean) value).booleanValue(),\r\n         * false);\r\n         *\r\n         * value = LocaleConvertUtils.convert(\"false\", Boolean.class); assertInstanceOf(Boolean.class, value); assertEquals(((Boolean) value).booleanValue(),\r\n         * false);\r\n         *\r\n         * value = LocaleConvertUtils.convert(\"no\", Boolean.TYPE); assertInstanceOf(Boolean.class, value); assertEquals(((Boolean) value).booleanValue(),\r\n         * false);\r\n         *\r\n         * value = LocaleConvertUtils.convert(\"no\", Boolean.class); assertInstanceOf(Boolean.class, value); assertEquals(((Boolean) value).booleanValue(),\r\n         * false);\r\n         *\r\n         * value = LocaleConvertUtils.convert(\"n\", Boolean.TYPE); assertInstanceOf(Boolean.class, value); assertEquals(((Boolean) value).booleanValue(), false);\r\n         *\r\n         * value = LocaleConvertUtils.convert(\"n\", Boolean.class); assertInstanceOf(Boolean.class, value); assertEquals(((Boolean) value).booleanValue(),\r\n         * false);\r\n         *\r\n         * value = LocaleConvertUtils.convert(\"off\", Boolean.TYPE); assertInstanceOf(Boolean.class, value); assertEquals(((Boolean) value).booleanValue(),\r\n         * false);\r\n         *\r\n         * value = LocaleConvertUtils.convert(\"off\", Boolean.class); assertInstanceOf(Boolean.class, value); assertEquals(((Boolean) value).booleanValue(),\r\n         * false);\r\n         */\r\n    value = LocaleConvertUtils.convert(\"123\", Byte.TYPE);\r\n    assertInstanceOf(Byte.class, value);\r\n    assertEquals(((Byte) value).byteValue(), (byte) 123);\r\n    value = LocaleConvertUtils.convert(\"123\", Byte.class);\r\n    assertInstanceOf(Byte.class, value);\r\n    assertEquals(((Byte) value).byteValue(), (byte) 123);\r\n    /*\r\n         * fixme Character conversion not implemented yet value = LocaleConvertUtils.convert(\"a\", Character.TYPE); assertInstanceOf(Character.class, value);\r\n         * assertEquals(((Character) value).charValue(), 'a');\r\n         *\r\n         * value = LocaleConvertUtils.convert(\"a\", Character.class); assertInstanceOf(Character.class, value); assertEquals(((Character) value).charValue(),\r\n         * 'a');\r\n         */\r\n    /*\r\n         * fixme - this is a discrepancy with standard converters ( probably not major issue ) value = LocaleConvertUtils.convert(\"java.lang.String\",\r\n         * Class.class); assertInstanceOf(Class.class, value); assertEquals(String.class, (Class) value);\r\n         */\r\n    value = LocaleConvertUtils.convert(\"123\" + decimalSeparator + \"456\", Double.TYPE);\r\n    assertInstanceOf(Double.class, value);\r\n    assertEquals(((Double) value).doubleValue(), 123.456, 0.005);\r\n    value = LocaleConvertUtils.convert(\"123\" + decimalSeparator + \"456\", Double.class);\r\n    assertInstanceOf(Double.class, value);\r\n    assertEquals(((Double) value).doubleValue(), 123.456, 0.005);\r\n    value = LocaleConvertUtils.convert(\"123\" + decimalSeparator + \"456\", Float.TYPE);\r\n    assertInstanceOf(Float.class, value);\r\n    assertEquals(((Float) value).floatValue(), (float) 123.456, (float) 0.005);\r\n    value = LocaleConvertUtils.convert(\"123\" + decimalSeparator + \"456\", Float.class);\r\n    assertInstanceOf(Float.class, value);\r\n    assertEquals(((Float) value).floatValue(), (float) 123.456, (float) 0.005);\r\n    value = LocaleConvertUtils.convert(\"123\", Integer.TYPE);\r\n    assertInstanceOf(Integer.class, value);\r\n    assertEquals(((Integer) value).intValue(), 123);\r\n    value = LocaleConvertUtils.convert(\"123\", Integer.class);\r\n    assertInstanceOf(Integer.class, value);\r\n    assertEquals(((Integer) value).intValue(), 123);\r\n    value = LocaleConvertUtils.convert(\"123\", Long.TYPE);\r\n    assertInstanceOf(Long.class, value);\r\n    assertEquals(((Long) value).longValue(), 123);\r\n    value = LocaleConvertUtils.convert(\"123456\", Long.class);\r\n    assertInstanceOf(Long.class, value);\r\n    assertEquals(((Long) value).longValue(), 123456);\r\n    /*\r\n         * fixme - Short conversion not implemented at this point value = LocaleConvertUtils.convert(\"123\", Short.TYPE); assertInstanceOf(Short.class, value);\r\n         * assertEquals(((Short) value).shortValue(), (short) 123);\r\n         *\r\n         * value = LocaleConvertUtils.convert(\"123\", Short.class); assertInstanceOf(Short.class, value); assertEquals(((Short) value).shortValue(), (short)\r\n         * 123);\r\n         */\r\n    String input;\r\n    input = \"2002-03-17\";\r\n    value = LocaleConvertUtils.convert(input, Date.class);\r\n    assertInstanceOf(Date.class, value);\r\n    assertEquals(input, value.toString());\r\n    input = \"20:30:40\";\r\n    value = LocaleConvertUtils.convert(input, Time.class);\r\n    assertInstanceOf(Time.class, value);\r\n    assertEquals(input, value.toString());\r\n    input = \"2002-03-17 20:30:40.0\";\r\n    value = LocaleConvertUtils.convert(input, Timestamp.class);\r\n    assertInstanceOf(Timestamp.class, value);\r\n    assertEquals(input, value.toString());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\MappedPropertyTest.java",
  "methodName" : "testAnyArgsProperty",
  "sourceCode" : "/**\r\n * Test property with any two args\r\n */\r\n@Test\r\nvoid testAnyArgsProperty() throws Exception {\r\n    final String property = \"anyMapped\";\r\n    final Class<?> clazz = MappedPropertyTestBean.class;\r\n    final MappedPropertyDescriptor desc = new MappedPropertyDescriptor(property, clazz);\r\n    assertNull(desc.getMappedReadMethod(), \"Getter is found\");\r\n    assertNotNull(desc.getMappedWriteMethod(), \"Setter is missing\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\MappedPropertyTest.java",
  "methodName" : "testBooleanMapped",
  "sourceCode" : "/**\r\n * Test boolean \"is\" method name\r\n */\r\n@Test\r\nvoid testBooleanMapped() throws Exception {\r\n    final String property = \"mappedBoolean\";\r\n    final Class<?> clazz = MappedPropertyTestBean.class;\r\n    final MappedPropertyDescriptor desc = new MappedPropertyDescriptor(property, clazz);\r\n    assertNotNull(desc.getMappedReadMethod(), \"Getter is missing\");\r\n    assertNotNull(desc.getMappedWriteMethod(), \"Setter is missing\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\MappedPropertyTest.java",
  "methodName" : "testChildInterfaceMapped",
  "sourceCode" : "/**\r\n * Test Interface Inherited mapped property\r\n */\r\n@Test\r\nvoid testChildInterfaceMapped() throws Exception {\r\n    final String property = \"mapproperty\";\r\n    final Class<?> clazz = MappedPropertyChildInterface.class;\r\n    final MappedPropertyDescriptor desc = new MappedPropertyDescriptor(property, clazz);\r\n    assertNotNull(desc.getMappedReadMethod(), \"Getter is missing\");\r\n    assertNotNull(desc.getMappedWriteMethod(), \"Setter is missing\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\MappedPropertyTest.java",
  "methodName" : "testDifferentTypes",
  "sourceCode" : "/**\r\n * Test Mapped Property - Different Types\r\n *\r\n * Expect to find the getDifferentTypes() method, but not the setDifferentTypes() method because setDifferentTypes() sets and Integer, while\r\n * getDifferentTypes() returns a Long.\r\n */\r\n@Test\r\nvoid testDifferentTypes() throws Exception {\r\n    final String property = \"differentTypes\";\r\n    final Class<?> clazz = MappedPropertyTestBean.class;\r\n    final MappedPropertyDescriptor desc = new MappedPropertyDescriptor(property, clazz);\r\n    assertNotNull(desc.getMappedReadMethod(), \"Getter is missing\");\r\n    assertNull(desc.getMappedWriteMethod(), \"Setter is found\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\MappedPropertyTest.java",
  "methodName" : "testFound",
  "sourceCode" : "/**\r\n * Test valid method name\r\n */\r\n@Test\r\nvoid testFound() throws Exception {\r\n    final String property = \"mapproperty\";\r\n    final Class<?> clazz = MappedPropertyTestBean.class;\r\n    final MappedPropertyDescriptor desc = new MappedPropertyDescriptor(property, clazz);\r\n    assertNotNull(desc.getMappedReadMethod(), \"Getter is missing\");\r\n    assertNotNull(desc.getMappedWriteMethod(), \"Setter is missing\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\MappedPropertyTest.java",
  "methodName" : "testInterfaceMapped",
  "sourceCode" : "/**\r\n * Test Interface with mapped property\r\n */\r\n@Test\r\nvoid testInterfaceMapped() throws Exception {\r\n    final String property = \"mapproperty\";\r\n    final Class<?> clazz = MappedPropertyTestInterface.class;\r\n    final MappedPropertyDescriptor desc = new MappedPropertyDescriptor(property, clazz);\r\n    assertNotNull(desc.getMappedReadMethod(), \"Getter is missing\");\r\n    assertNotNull(desc.getMappedWriteMethod(), \"Setter is missing\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\MappedPropertyTest.java",
  "methodName" : "testInterfaceNotFound",
  "sourceCode" : "/**\r\n * Test property not found in interface\r\n */\r\n@Test\r\nvoid testInterfaceNotFound() {\r\n    final String property = \"XXXXXX\";\r\n    final Class<?> clazz = MappedPropertyTestInterface.class;\r\n    assertThrows(IntrospectionException.class, () -> new MappedPropertyDescriptor(property, clazz));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\MappedPropertyTest.java",
  "methodName" : "testInvalidGetter",
  "sourceCode" : "/**\r\n * Test Mapped Property - Invalid Getter\r\n */\r\n@Test\r\nvoid testInvalidGetter() throws Exception {\r\n    final String property = \"invalidGetter\";\r\n    final Class<?> clazz = MappedPropertyTestBean.class;\r\n    final MappedPropertyDescriptor desc = new MappedPropertyDescriptor(property, clazz);\r\n    assertNull(desc.getMappedReadMethod(), \"Getter is found\");\r\n    assertNotNull(desc.getMappedWriteMethod(), \"Setter is missing\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\MappedPropertyTest.java",
  "methodName" : "testInvalidSetter",
  "sourceCode" : "/**\r\n * Test Mapped Property - Invalid Setter\r\n */\r\n@Test\r\nvoid testInvalidSetter() throws Exception {\r\n    final String property = \"invalidSetter\";\r\n    final Class<?> clazz = MappedPropertyTestBean.class;\r\n    final MappedPropertyDescriptor desc = new MappedPropertyDescriptor(property, clazz);\r\n    assertNotNull(desc.getMappedReadMethod(), \"Getter is missing\");\r\n    assertNull(desc.getMappedWriteMethod(), \"Setter is found\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\MappedPropertyTest.java",
  "methodName" : "testMapGetter",
  "sourceCode" : "/**\r\n * Test Map getter\r\n */\r\n@Test\r\nvoid testMapGetter() throws Exception {\r\n    final MappedPropertyTestBean bean = new MappedPropertyTestBean();\r\n    final String testValue = \"test value\";\r\n    final String testKey = \"testKey\";\r\n    BeanUtils.setProperty(bean, \"myMap(\" + testKey + \")\", \"test value\");\r\n    assertEquals(testValue, bean.getMyMap().get(testKey), \"Map getter\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\MappedPropertyTest.java",
  "methodName" : "testMappedGetterOnly",
  "sourceCode" : "/**\r\n * Test Mapped Property - Getter only\r\n */\r\n@Test\r\nvoid testMappedGetterOnly() throws Exception {\r\n    final String property = \"mappedGetterOnly\";\r\n    final Class<?> clazz = MappedPropertyTestBean.class;\r\n    final MappedPropertyDescriptor desc = new MappedPropertyDescriptor(property, clazz);\r\n    assertNotNull(desc.getMappedReadMethod(), \"Getter is missing\");\r\n    assertNull(desc.getMappedWriteMethod(), \"Setter is found\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\MappedPropertyTest.java",
  "methodName" : "testMappedSetterOnly",
  "sourceCode" : "/**\r\n * Test Mapped Property - Setter Only\r\n */\r\n@Test\r\nvoid testMappedSetterOnly() throws Exception {\r\n    final String property = \"mappedSetterOnly\";\r\n    final Class<?> clazz = MappedPropertyTestBean.class;\r\n    final MappedPropertyDescriptor desc = new MappedPropertyDescriptor(property, clazz);\r\n    assertNull(desc.getMappedReadMethod(), \"Getter is found\");\r\n    assertNotNull(desc.getMappedWriteMethod(), \"Setter is missing\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\MappedPropertyTest.java",
  "methodName" : "testNotFound",
  "sourceCode" : "/**\r\n * Test invalid method name\r\n */\r\n@Test\r\nvoid testNotFound() {\r\n    final String property = \"xxxxxxx\";\r\n    final Class<?> clazz = MappedPropertyTestBean.class;\r\n    assertThrows(IntrospectionException.class, () -> new MappedPropertyDescriptor(property, clazz));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\MappedPropertyTest.java",
  "methodName" : "testPrimitiveArgsProperty",
  "sourceCode" : "/**\r\n * Test property with two primitive args\r\n */\r\n@Test\r\nvoid testPrimitiveArgsProperty() throws Exception {\r\n    final String property = \"mappedPrimitive\";\r\n    final Class<?> clazz = MappedPropertyTestBean.class;\r\n    final MappedPropertyDescriptor desc = new MappedPropertyDescriptor(property, clazz);\r\n    assertNull(desc.getMappedReadMethod(), \"Getter is found\");\r\n    assertNotNull(desc.getMappedWriteMethod(), \"Setter is missing\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\MappedPropertyTest.java",
  "methodName" : "testProtected",
  "sourceCode" : "/**\r\n * Test 'protected' mapped property\r\n */\r\n@Test\r\nvoid testProtected() {\r\n    final String property = \"protectedProperty\";\r\n    final Class<?> clazz = MappedPropertyTestBean.class;\r\n    assertThrows(IntrospectionException.class, () -> new MappedPropertyDescriptor(property, clazz));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\MappedPropertyTest.java",
  "methodName" : "testProtectedParentMethod",
  "sourceCode" : "/**\r\n * Test 'protected' method in parent\r\n */\r\n@Test\r\nvoid testProtectedParentMethod() {\r\n    final String property = \"protectedMapped\";\r\n    final Class<?> clazz = MappedPropertyChildBean.class;\r\n    assertThrows(IntrospectionException.class, () -> new MappedPropertyDescriptor(property, clazz));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\MappedPropertyTest.java",
  "methodName" : "testPublicParentMethod",
  "sourceCode" : "/**\r\n * Test 'public' method in parent\r\n */\r\n@Test\r\nvoid testPublicParentMethod() throws Exception {\r\n    final String property = \"mapproperty\";\r\n    final Class<?> clazz = MappedPropertyChildBean.class;\r\n    final MappedPropertyDescriptor desc = new MappedPropertyDescriptor(property, clazz);\r\n    assertNotNull(desc.getMappedReadMethod(), \"Getter is missing\");\r\n    assertNotNull(desc.getMappedWriteMethod(), \"Setter is missing\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\memoryleaktests\\MemoryLeakTest.java",
  "methodName" : "testConvertUtilsBean_converters_memoryLeak",
  "sourceCode" : "/**\r\n * Tests that ConvertUtilsBean's converters doesn't cause a memory leak.\r\n */\r\n@Test\r\nvoid testConvertUtilsBean_converters_memoryLeak() throws Exception {\r\n    // Clear All BeanUtils caches before the test\r\n    clearAllBeanUtilsCaches();\r\n    final String className = \"org.apache.commons.beanutils2.memoryleaktests.pojotests.CustomInteger\";\r\n    // The classLoader will go away only when these following variables are released\r\n    ClassLoader loader = newClassLoader();\r\n    Class<?> beanClass = loader.loadClass(className);\r\n    Object bean = beanClass.newInstance();\r\n    final WeakReference<ClassLoader> someRef = new WeakReference<>(loader);\r\n    // Sanity checks only\r\n    assertNotNull(loader, \"ClassLoader is null\");\r\n    assertNotNull(beanClass, \"BeanClass is null\");\r\n    assertNotSame(getClass().getClassLoader(), beanClass.getClassLoader(), \"ClassLoaders should be different..\");\r\n    assertSame(beanClass.getClassLoader(), loader, \"BeanClass ClassLoader incorrect\");\r\n    // if you comment the following two lines, the test will work, and the ClassLoader will be released.\r\n    // That proves that nothing is wrong with the test, and ConvertUtilsBean is holding a reference\r\n    ConvertUtils.register(new IntegerConverter(), (Class<Integer>) beanClass);\r\n    assertEquals(\"12345\", ConvertUtils.convert(bean, String.class));\r\n    // this should make the reference go away.\r\n    loader = null;\r\n    beanClass = null;\r\n    bean = null;\r\n    forceGarbageCollection();\r\n    /* Try to force the garbage collector to run by filling up memory */\r\n    if (someRef.get() != null) {\r\n        profilerLeakReport(\"ConvertUtilsBean converters\", className);\r\n    }\r\n    // if everything is fine, this will be null\r\n    assertNull(someRef.get(), \"ConvertUtilsBean is holding a reference to the classLoader\");\r\n    // Clear All BeanUtils caches after the test\r\n    clearAllBeanUtilsCaches();\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\memoryleaktests\\MemoryLeakTest.java",
  "methodName" : "testLocaleConvertUtilsBean_converters_memoryLeak",
  "sourceCode" : "/**\r\n * Tests that LocaleConvertUtilsBean's converters doesn't cause a memory leak.\r\n */\r\n@Test\r\nvoid testLocaleConvertUtilsBean_converters_memoryLeak() throws Exception {\r\n    // Clear All BeanUtils caches before the test\r\n    clearAllBeanUtilsCaches();\r\n    final String className = \"org.apache.commons.beanutils2.memoryleaktests.pojotests.CustomInteger\";\r\n    // The classLoader will go away only when these following variables are released\r\n    ClassLoader loader = newClassLoader();\r\n    Class<?> beanClass = loader.loadClass(className);\r\n    Object bean = beanClass.newInstance();\r\n    final WeakReference<ClassLoader> someRef = new WeakReference<>(loader);\r\n    // Sanity checks only\r\n    assertNotNull(loader, \"ClassLoader is null\");\r\n    assertNotNull(beanClass, \"BeanClass is null\");\r\n    assertNotSame(getClass().getClassLoader(), beanClass.getClassLoader(), \"ClassLoaders should be different..\");\r\n    assertSame(beanClass.getClassLoader(), loader, \"BeanClass ClassLoader incorrect\");\r\n    // if you comment the following two lines, the test will work, and the ClassLoader will be released.\r\n    // That proves that nothing is wrong with the test, and LocaleConvertUtilsBean is holding a reference\r\n    LocaleConvertUtils.register(IntegerLocaleConverter.builder().setLocale(Locale.US).setLocalizedPattern(false).get(), (Class<Integer>) beanClass, Locale.US);\r\n    assertEquals(new Integer(12345), LocaleConvertUtils.convert(bean.toString(), Integer.class, Locale.US, \"#,###\"));\r\n    // this should make the reference go away.\r\n    loader = null;\r\n    beanClass = null;\r\n    bean = null;\r\n    forceGarbageCollection();\r\n    /* Try to force the garbage collector to run by filling up memory */\r\n    if (someRef.get() != null) {\r\n        profilerLeakReport(\"LocaleConvertUtilsBean converters\", className);\r\n    }\r\n    // if everything is fine, this will be null\r\n    assertNull(someRef.get(), \"LocaleConvertUtilsBean is holding a reference to the classLoader\");\r\n    // Clear All BeanUtils caches after the test\r\n    clearAllBeanUtilsCaches();\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\memoryleaktests\\MemoryLeakTest.java",
  "methodName" : "testMappedPropertyDescriptor_MappedMethodReference1",
  "sourceCode" : "/**\r\n * Tests that MappedPropertyDescriptor can re-create the Method reference after it has been garbage collected.\r\n */\r\n@Test\r\nvoid testMappedPropertyDescriptor_MappedMethodReference1() throws Exception {\r\n    // Clear All BeanUtils caches before the test\r\n    clearAllBeanUtilsCaches();\r\n    final String className = \"org.apache.commons.beanutils2.memoryleaktests.pojotests.SomeMappedPojo\";\r\n    final ClassLoader loader = newClassLoader();\r\n    final Class<?> beanClass = loader.loadClass(className);\r\n    final Object bean = beanClass.newInstance();\r\n    // Sanity checks only\r\n    assertNotNull(loader, \"ClassLoader is null\");\r\n    assertNotNull(beanClass, \"BeanClass is null\");\r\n    assertNotNull(bean, \"Bean is null\");\r\n    assertNotSame(getClass().getClassLoader(), beanClass.getClassLoader(), \"ClassLoaders should be different..\");\r\n    assertSame(beanClass.getClassLoader(), loader, \"BeanClass ClassLoader incorrect\");\r\n    final MappedPropertyDescriptor descriptor = new MappedPropertyDescriptor(\"mappedProperty\", beanClass);\r\n    assertNotNull(descriptor.getMappedReadMethod(), \"1-Read Method null\");\r\n    assertNotNull(descriptor.getMappedWriteMethod(), \"1-Write Method null\");\r\n    assertEquals(\"getMappedProperty\", descriptor.getMappedReadMethod().getName(), \"1-Read Method name\");\r\n    assertEquals(\"setMappedProperty\", descriptor.getMappedWriteMethod().getName(), \"1-Read Write name\");\r\n    forceGarbageCollection();\r\n    /* Try to force the garbage collector to run by filling up memory */\r\n    // The aim of this test is to check the functinality in MappedPropertyDescriptor which\r\n    // re-creates the Method references after they have been garbage collected. However theres no\r\n    // way of knowing the method references were garbage collected and that code was run, except by\r\n    // un-commeting the System.out statement in MappedPropertyDescriptor's MappedMethodReference's\r\n    // get() method.\r\n    assertNotNull(descriptor.getMappedReadMethod(), \"1-Read Method null\");\r\n    assertNotNull(descriptor.getMappedWriteMethod(), \"1-Write Method null\");\r\n    assertEquals(\"getMappedProperty\", descriptor.getMappedReadMethod().getName(), \"1-Read Method name\");\r\n    assertEquals(\"setMappedProperty\", descriptor.getMappedWriteMethod().getName(), \"1-Read Write name\");\r\n    // Clear All BeanUtils caches after the test\r\n    clearAllBeanUtilsCaches();\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\memoryleaktests\\MemoryLeakTest.java",
  "methodName" : "testMappedPropertyDescriptor_MappedMethodReference2",
  "sourceCode" : "/**\r\n * Tests that MappedPropertyDescriptor can re-create the Method reference after it has been garbage collected.\r\n */\r\n@Test\r\nvoid testMappedPropertyDescriptor_MappedMethodReference2() throws Exception {\r\n    // Clear All BeanUtils caches before the test\r\n    clearAllBeanUtilsCaches();\r\n    final String className = \"org.apache.commons.beanutils2.memoryleaktests.pojotests.SomeMappedPojo\";\r\n    ClassLoader loader = newClassLoader();\r\n    Class<?> beanClass = loader.loadClass(className);\r\n    Object bean = beanClass.newInstance();\r\n    // Sanity checks only\r\n    assertNotNull(loader, \"ClassLoader is null\");\r\n    assertNotNull(beanClass, \"BeanClass is null\");\r\n    assertNotNull(bean, \"Bean is null\");\r\n    assertNotSame(getClass().getClassLoader(), beanClass.getClassLoader(), \"ClassLoaders should be different..\");\r\n    assertSame(beanClass.getClassLoader(), loader, \"BeanClass ClassLoader incorrect\");\r\n    final MappedPropertyDescriptor descriptor = new MappedPropertyDescriptor(\"mappedProperty\", beanClass);\r\n    assertNotNull(descriptor.getMappedReadMethod(), \"1-Read Method null\");\r\n    assertNotNull(descriptor.getMappedWriteMethod(), \"1-Write Method null\");\r\n    assertEquals(\"getMappedProperty\", descriptor.getMappedReadMethod().getName(), \"1-Read Method name\");\r\n    assertEquals(\"setMappedProperty\", descriptor.getMappedWriteMethod().getName(), \"1-Read Write name\");\r\n    // this should make the reference go away.\r\n    loader = null;\r\n    beanClass = null;\r\n    bean = null;\r\n    forceGarbageCollection();\r\n    /* Try to force the garbage collector to run by filling up memory */\r\n    // The aim of this test is to check the functinality in MappedPropertyDescriptor which\r\n    // re-creates the Method references after they have been garbage collected. However theres no\r\n    // way of knowing the method references were garbage collected and that code was run, except by\r\n    // un-commeting the System.out statement in MappedPropertyDescriptor's MappedMethodReference's\r\n    // get() method.\r\n    assertNotNull(descriptor.getMappedReadMethod(), \"1-Read Method null\");\r\n    assertNotNull(descriptor.getMappedWriteMethod(), \"1-Write Method null\");\r\n    assertEquals(\"getMappedProperty\", descriptor.getMappedReadMethod().getName(), \"1-Read Method name\");\r\n    assertEquals(\"setMappedProperty\", descriptor.getMappedWriteMethod().getName(), \"1-Read Write name\");\r\n    // Clear All BeanUtils caches after the test\r\n    clearAllBeanUtilsCaches();\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\memoryleaktests\\MemoryLeakTest.java",
  "methodName" : "testMethodUtils_cache_memoryLeak",
  "sourceCode" : "/**\r\n * Tests that MethodUtils's cache doesn't cause a memory leak.\r\n */\r\n@Test\r\nvoid testMethodUtils_cache_memoryLeak() throws Exception {\r\n    // Clear All BeanUtils caches before the test\r\n    clearAllBeanUtilsCaches();\r\n    final String className = \"org.apache.commons.beanutils2.memoryleaktests.pojotests.SomePojo\";\r\n    // The classLoader will go away only when these following variables are released\r\n    ClassLoader loader = newClassLoader();\r\n    Class<?> beanClass = loader.loadClass(className);\r\n    Object bean = beanClass.newInstance();\r\n    final WeakReference<ClassLoader> someRef = new WeakReference<>(loader);\r\n    // Sanity checks only\r\n    assertNotNull(loader, \"ClassLoader is null\");\r\n    assertNotNull(beanClass, \"BeanClass is null\");\r\n    assertNotSame(getClass().getClassLoader(), beanClass.getClassLoader(), \"ClassLoaders should be different..\");\r\n    assertSame(beanClass.getClassLoader(), loader, \"BeanClass ClassLoader incorrect\");\r\n    // if you comment the following line, the test will work, and the ClassLoader will be released.\r\n    // That proves that nothing is wrong with the test, and MethodUtils is holding a reference\r\n    assertNotNull(MethodUtils.getAccessibleMethod(bean.getClass(), \"getName\", new Class[0]));\r\n    // this should make the reference go away.\r\n    loader = null;\r\n    beanClass = null;\r\n    bean = null;\r\n    forceGarbageCollection();\r\n    /* Try to force the garbage collector to run by filling up memory */\r\n    if (someRef.get() != null) {\r\n        profilerLeakReport(\"MethodUtils cache\", className);\r\n    }\r\n    // if everything is fine, this will be null\r\n    assertNull(someRef.get(), \"MethodUtils is holding a reference to the classLoader\");\r\n    // Clear All BeanUtils caches after the test\r\n    clearAllBeanUtilsCaches();\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\memoryleaktests\\MemoryLeakTest.java",
  "methodName" : "testPropertyUtilsBean_descriptorsCache_memoryLeak",
  "sourceCode" : "/**\r\n * Tests that PropertyUtilsBean's descriptorsCache doesn't cause a memory leak.\r\n */\r\n@Test\r\nvoid testPropertyUtilsBean_descriptorsCache_memoryLeak() throws Exception {\r\n    // Clear All BeanUtils caches before the test\r\n    clearAllBeanUtilsCaches();\r\n    final String className = \"org.apache.commons.beanutils2.memoryleaktests.pojotests.SomePojo\";\r\n    // The classLoader will go away only when these following variables are released\r\n    ClassLoader loader = newClassLoader();\r\n    Class<?> beanClass = loader.loadClass(className);\r\n    Object bean = beanClass.newInstance();\r\n    final WeakReference<ClassLoader> someRef = new WeakReference<>(loader);\r\n    // Sanity checks only\r\n    assertNotNull(loader, \"ClassLoader is null\");\r\n    assertNotNull(beanClass, \"BeanClass is null\");\r\n    assertNotSame(getClass().getClassLoader(), beanClass.getClassLoader(), \"ClassLoaders should be different..\");\r\n    assertSame(beanClass.getClassLoader(), loader, \"BeanClass ClassLoader incorrect\");\r\n    // if you comment the following line, the test will work, and the ClassLoader will be released.\r\n    // That proves that nothing is wrong with the test, and PropertyUtils is holding a reference\r\n    assertEquals(\"initialValue\", PropertyUtils.getProperty(bean, \"name\"));\r\n    // this should make the reference go away.\r\n    loader = null;\r\n    beanClass = null;\r\n    bean = null;\r\n    forceGarbageCollection();\r\n    /* Try to force the garbage collector to run by filling up memory */\r\n    if (someRef.get() != null) {\r\n        profilerLeakReport(\"PropertyUtilsBean descriptorsCache\", className);\r\n    }\r\n    // if everything is fine, this will be null\r\n    assertNull(someRef.get(), \"PropertyUtilsBean is holding a reference to the classLoader\");\r\n    // Clear All BeanUtils caches after the test\r\n    clearAllBeanUtilsCaches();\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\memoryleaktests\\MemoryLeakTest.java",
  "methodName" : "testPropertyUtilsBean_mappedDescriptorsCache_memoryLeak",
  "sourceCode" : "/**\r\n * Tests that PropertyUtilsBean's mappedDescriptorsCache doesn't cause a memory leak.\r\n */\r\n@Test\r\nvoid testPropertyUtilsBean_mappedDescriptorsCache_memoryLeak() throws Exception {\r\n    // Clear All BeanUtils caches before the test\r\n    clearAllBeanUtilsCaches();\r\n    final String className = \"org.apache.commons.beanutils2.memoryleaktests.pojotests.SomeMappedPojo\";\r\n    // The classLoader will go away only when these following variables are released\r\n    ClassLoader loader = newClassLoader();\r\n    Class<?> beanClass = loader.loadClass(className);\r\n    Object bean = beanClass.newInstance();\r\n    final WeakReference<ClassLoader> someRef = new WeakReference<>(loader);\r\n    // Sanity checks only\r\n    assertNotNull(loader, \"ClassLoader is null\");\r\n    assertNotNull(beanClass, \"BeanClass is null\");\r\n    assertNotSame(getClass().getClassLoader(), beanClass.getClassLoader(), \"ClassLoaders should be different..\");\r\n    assertSame(beanClass.getClassLoader(), loader, \"BeanClass ClassLoader incorrect\");\r\n    // if you comment the following three lines, the test will work, and the ClassLoader will be released.\r\n    // That proves that nothing is wrong with the test, and PropertyUtils is holding a reference\r\n    assertEquals(\"Second Value\", PropertyUtils.getProperty(bean, \"mappedProperty(Second Key)\"));\r\n    PropertyUtils.setProperty(bean, \"mappedProperty(Second Key)\", \"New Second Value\");\r\n    assertEquals(\"New Second Value\", PropertyUtils.getProperty(bean, \"mappedProperty(Second Key)\"));\r\n    // this should make the reference go away.\r\n    loader = null;\r\n    beanClass = null;\r\n    bean = null;\r\n    // PropertyUtilsBean uses the MethodUtils's method cache for mapped properties.\r\n    // Uncomment the following line to check this is not just a repeat of that memory leak.\r\n    // MethodUtils.clearCache();\r\n    forceGarbageCollection();\r\n    /* Try to force the garbage collector to run by filling up memory */\r\n    if (someRef.get() != null) {\r\n        profilerLeakReport(\"PropertyUtilsBean mappedDescriptorsCache\", className);\r\n    }\r\n    // if everything is fine, this will be null\r\n    assertNull(someRef.get(), \"PropertyUtilsBean is holding a reference to the classLoader\");\r\n    // Clear All BeanUtils caches after the test\r\n    clearAllBeanUtilsCaches();\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\memoryleaktests\\MemoryLeakTest.java",
  "methodName" : "testWrapDynaClass_dynaClasses_memoryLeak",
  "sourceCode" : "/**\r\n * Tests that WrapDynaClass's dynaClasses doesn't cause a memory leak.\r\n */\r\n@Test\r\nvoid testWrapDynaClass_dynaClasses_memoryLeak() throws Exception {\r\n    // Clear All BeanUtils caches before the test\r\n    clearAllBeanUtilsCaches();\r\n    final String className = \"org.apache.commons.beanutils2.memoryleaktests.pojotests.SomePojo\";\r\n    // The classLoader will go away only when these following variables are released\r\n    ClassLoader loader = newClassLoader();\r\n    Class<?> beanClass = loader.loadClass(className);\r\n    Object bean = beanClass.newInstance();\r\n    WrapDynaBean wrapDynaBean = new WrapDynaBean(bean);\r\n    final WeakReference<ClassLoader> someRef = new WeakReference<>(loader);\r\n    // Sanity checks only\r\n    assertNotNull(loader, \"ClassLoader is null\");\r\n    assertNotNull(beanClass, \"BeanClass is null\");\r\n    assertNotSame(getClass().getClassLoader(), beanClass.getClassLoader(), \"ClassLoaders should be different..\");\r\n    assertSame(beanClass.getClassLoader(), loader, \"BeanClass ClassLoader incorrect\");\r\n    // if you comment the following line, the test will work, and the ClassLoader will be released.\r\n    // That proves that nothing is wrong with the test, and WrapDynaClass is holding a reference\r\n    assertEquals(\"initialValue\", wrapDynaBean.get(\"name\"));\r\n    // this should make the reference go away.\r\n    loader = null;\r\n    beanClass = null;\r\n    bean = null;\r\n    wrapDynaBean = null;\r\n    // Wrap Dyna Class uses the PropertyUtilsBean's decriptor caches.\r\n    // Uncomment the following line to check this is not just a repeat of that memory leak.\r\n    // BeanUtilsBean.getInstance().getPropertyUtils().clearDescriptors();\r\n    forceGarbageCollection();\r\n    /* Try to force the garbage collector to run by filling up memory */\r\n    if (someRef.get() != null) {\r\n        profilerLeakReport(\"WrapDynaClass dynaClasses\", className);\r\n    }\r\n    // if everything is fine, this will be null\r\n    assertNull(someRef.get(), \"WrapDynaClass is holding a reference to the classLoader\");\r\n    // Clear All BeanUtils caches after the test\r\n    clearAllBeanUtilsCaches();\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\MethodUtilsTest.java",
  "methodName" : "testClearCache",
  "sourceCode" : "/**\r\n * Test {@link MethodUtils#clearCache()}.\r\n */\r\n@Test\r\nvoid testClearCache() throws Exception {\r\n    // make sure it starts empty\r\n    MethodUtils.clearCache();\r\n    final PublicSubBean bean = new PublicSubBean();\r\n    assertNotNull(MethodUtils.getAccessibleMethod(bean.getClass(), \"setFoo\", new Class[] { String.class }));\r\n    assertEquals(1, MethodUtils.clearCache());\r\n    assertEquals(0, MethodUtils.clearCache());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\MethodUtilsTest.java",
  "methodName" : "testGetAccessibleMethod",
  "sourceCode" : "/**\r\n * <p>\r\n * Test {@code getAccessibleMethod}.\r\n */\r\n@Test\r\nvoid testGetAccessibleMethod() {\r\n    // easy bit first - find a public method\r\n    final Method method = MethodUtils.getAccessibleMethod(TestBean.class, \"setStringProperty\", String.class);\r\n    assertMethod(method, \"setStringProperty\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\MethodUtilsTest.java",
  "methodName" : "testGetAccessibleMethodFromInterface",
  "sourceCode" : "@Test\r\nvoid testGetAccessibleMethodFromInterface() {\r\n    Method method;\r\n    // trickier this one - find a method in a direct interface\r\n    method = MethodUtils.getAccessibleMethod(PrivateBeanFactory.create().getClass(), \"methodBar\", String.class);\r\n    assertMethod(method, \"methodBar\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\MethodUtilsTest.java",
  "methodName" : "testGetAccessibleMethodIndirectInterface",
  "sourceCode" : "@Test\r\nvoid testGetAccessibleMethodIndirectInterface() {\r\n    Method method;\r\n    // trickier this one - find a method in a indirect interface\r\n    method = MethodUtils.getAccessibleMethod(PrivateBeanFactory.createSubclass().getClass(), \"methodBaz\", String.class);\r\n    assertMethod(method, \"methodBaz\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\MethodUtilsTest.java",
  "methodName" : "testNoCaching",
  "sourceCode" : "@Test\r\nvoid testNoCaching() throws Exception {\r\n    // no caching\r\n    MethodUtils.setCacheMethods(false);\r\n    final PublicSubBean bean = new PublicSubBean();\r\n    MethodUtils.getAccessibleMethod(bean.getClass(), \"setFoo\", new Class[] { String.class });\r\n    assertEquals(0, MethodUtils.clearCache());\r\n    // reset default\r\n    MethodUtils.setCacheMethods(true);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\MethodUtilsTest.java",
  "methodName" : "testSetCacheMethods",
  "sourceCode" : "/**\r\n * Test {@link MethodUtils#setCacheMethods(boolean)}.\r\n */\r\n@Test\r\nvoid testSetCacheMethods() throws Exception {\r\n    MethodUtils.setCacheMethods(true);\r\n    // make sure it starts empty\r\n    MethodUtils.clearCache();\r\n    final PublicSubBean bean = new PublicSubBean();\r\n    MethodUtils.getAccessibleMethod(bean.getClass(), \"setFoo\", new Class[] { String.class });\r\n    assertEquals(1, MethodUtils.clearCache());\r\n    assertEquals(0, MethodUtils.clearCache());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\MethodUtilsTest.java",
  "methodName" : "testSimpleStatic3",
  "sourceCode" : "/**\r\n * Simple tests for accessing static methods via getAccessibleMethod()\r\n */\r\n@Test\r\nvoid testSimpleStatic3() throws Exception {\r\n    Object value = null;\r\n    int current = TestBean.currentCounter();\r\n    // Acquire the methods we need\r\n    final Method currentCounterMethod = MethodUtils.getAccessibleMethod(TestBean.class, \"currentCounter\", new Class[0]);\r\n    assertNotNull(currentCounterMethod, \"currentCounterMethod exists\");\r\n    assertEquals(\"currentCounter\", currentCounterMethod.getName(), \"currentCounterMethod name\");\r\n    assertEquals(0, currentCounterMethod.getParameterTypes().length, \"currentCounterMethod args\");\r\n    assertTrue(Modifier.isPublic(currentCounterMethod.getModifiers()), \"currentCounterMethod public\");\r\n    assertTrue(Modifier.isStatic(currentCounterMethod.getModifiers()), \"currentCounterMethod static\");\r\n    final Method incrementCounterMethod1 = MethodUtils.getAccessibleMethod(TestBean.class, \"incrementCounter\", new Class[0]);\r\n    assertNotNull(incrementCounterMethod1, \"incrementCounterMethod1 exists\");\r\n    assertEquals(\"incrementCounter\", incrementCounterMethod1.getName(), \"incrementCounterMethod1 name\");\r\n    assertEquals(0, incrementCounterMethod1.getParameterTypes().length, \"incrementCounterMethod1 args\");\r\n    assertTrue(Modifier.isPublic(incrementCounterMethod1.getModifiers()), \"incrementCounterMethod1 public\");\r\n    assertTrue(Modifier.isStatic(incrementCounterMethod1.getModifiers()), \"incrementCounterMethod1 static\");\r\n    final Method incrementCounterMethod2 = MethodUtils.getAccessibleMethod(TestBean.class, \"incrementCounter\", new Class[] { Integer.TYPE });\r\n    assertNotNull(incrementCounterMethod2, \"incrementCounterMethod2 exists\");\r\n    assertEquals(\"incrementCounter\", incrementCounterMethod2.getName(), \"incrementCounterMethod2 name\");\r\n    assertEquals(1, incrementCounterMethod2.getParameterTypes().length, \"incrementCounterMethod2 args\");\r\n    assertTrue(Modifier.isPublic(incrementCounterMethod2.getModifiers()), \"incrementCounterMethod2 public\");\r\n    assertTrue(Modifier.isStatic(incrementCounterMethod2.getModifiers()), \"incrementCounterMethod2 static\");\r\n    // Return initial value of the counter\r\n    value = currentCounterMethod.invoke(null);\r\n    assertNotNull(value, \"currentCounter exists\");\r\n    assertInstanceOf(Integer.class, value, \"currentCounter type\");\r\n    assertEquals(current, ((Integer) value).intValue(), \"currentCounter value\");\r\n    // Increment via no-arguments version\r\n    incrementCounterMethod1.invoke(null);\r\n    // Validate updated value\r\n    current++;\r\n    value = currentCounterMethod.invoke(null);\r\n    assertNotNull(value, \"currentCounter exists\");\r\n    assertInstanceOf(Integer.class, value, \"currentCounter type\");\r\n    assertEquals(current, ((Integer) value).intValue(), \"currentCounter value\");\r\n    // Increment via specified-argument version\r\n    incrementCounterMethod2.invoke(null, Integer.valueOf(5));\r\n    // Validate updated value\r\n    current += 5;\r\n    value = currentCounterMethod.invoke(null);\r\n    assertNotNull(value, \"currentCounter exists\");\r\n    assertInstanceOf(Integer.class, value, \"currentCounter type\");\r\n    assertEquals(current, ((Integer) value).intValue(), \"currentCounter value\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\PropertyUtilsBeanTest.java",
  "methodName" : "testGetMappedPropertyDescriptors",
  "sourceCode" : "@Test\r\nvoid testGetMappedPropertyDescriptors() throws Exception {\r\n    assertNull(new PropertyUtilsBean().getMappedPropertyDescriptors((Object) null));\r\n    assertNull(new PropertyUtilsBean().getMappedPropertyDescriptors((Class<?>) null));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\PropertyUtilsBeanTest.java",
  "methodName" : "testGetPropertyDescriptor",
  "sourceCode" : "@Test\r\nvoid testGetPropertyDescriptor() throws Exception {\r\n    assertThrows(NullPointerException.class, () -> new PropertyUtilsBean().getPropertyDescriptor((Object) null, null));\r\n    assertThrows(NullPointerException.class, () -> new PropertyUtilsBean().getPropertyDescriptor(\"\", null));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\PropertyUtilsBeanTest.java",
  "methodName" : "testGetPropertyEditorClass",
  "sourceCode" : "@Test\r\nvoid testGetPropertyEditorClass() throws Exception {\r\n    assertThrows(NullPointerException.class, () -> new PropertyUtilsBean().getPropertyEditorClass(null, \"\"));\r\n    assertThrows(NullPointerException.class, () -> new PropertyUtilsBean().getPropertyEditorClass(\"\", null));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\PropertyUtilsBeanTest.java",
  "methodName" : "testSetResolver",
  "sourceCode" : "@Test\r\nvoid testSetResolver() throws Exception {\r\n    final PropertyUtilsBean propertyUtilsBean = new PropertyUtilsBean();\r\n    final Resolver resolver = propertyUtilsBean.getResolver();\r\n    assertNotNull(resolver);\r\n    propertyUtilsBean.setResolver(null);\r\n    assertNotNull(resolver);\r\n    propertyUtilsBean.setResolver(resolver);\r\n    assertEquals(resolver, propertyUtilsBean.getResolver());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\PropertyUtilsBenchCase.java",
  "methodName" : "testCopyPropertiesBean",
  "sourceCode" : "// Time copyProperties() from a bean\r\n@Test\r\nvoid testCopyPropertiesBean() throws Exception {\r\n    long startMillis;\r\n    long stopMillis;\r\n    // Bean->Bean\r\n    for (long i = 0; i < counter; i++) {\r\n        pu.copyProperties(outBean, inBean);\r\n    }\r\n    startMillis = System.currentTimeMillis();\r\n    for (long i = 0; i < counter; i++) {\r\n        pu.copyProperties(outBean, inBean);\r\n    }\r\n    stopMillis = System.currentTimeMillis();\r\n    System.err.println(\"PU.copyProperties(bean,bean), count=\" + counter + \", time=\" + (stopMillis - startMillis));\r\n    // Bean->Dyna\r\n    for (long i = 0; i < counter; i++) {\r\n        pu.copyProperties(outDyna, inBean);\r\n    }\r\n    startMillis = System.currentTimeMillis();\r\n    for (long i = 0; i < counter; i++) {\r\n        pu.copyProperties(outDyna, inBean);\r\n    }\r\n    stopMillis = System.currentTimeMillis();\r\n    System.err.println(\"PU.copyProperties(dyna,bean), count=\" + counter + \", time=\" + (stopMillis - startMillis));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\PropertyUtilsBenchCase.java",
  "methodName" : "testCopyPropertiesDyna",
  "sourceCode" : "// Time copyProperties() from a DynaBean\r\n@Test\r\nvoid testCopyPropertiesDyna() throws Exception {\r\n    long startMillis;\r\n    long stopMillis;\r\n    // Dyna->Bean\r\n    for (long i = 0; i < counter; i++) {\r\n        pu.copyProperties(outBean, inDyna);\r\n    }\r\n    startMillis = System.currentTimeMillis();\r\n    for (long i = 0; i < counter; i++) {\r\n        pu.copyProperties(outBean, inDyna);\r\n    }\r\n    stopMillis = System.currentTimeMillis();\r\n    System.err.println(\"PU.copyProperties(bean,dyna), count=\" + counter + \", time=\" + (stopMillis - startMillis));\r\n    // Dyna->Dyna\r\n    for (long i = 0; i < counter; i++) {\r\n        pu.copyProperties(outDyna, inDyna);\r\n    }\r\n    startMillis = System.currentTimeMillis();\r\n    for (long i = 0; i < counter; i++) {\r\n        pu.copyProperties(outDyna, inDyna);\r\n    }\r\n    stopMillis = System.currentTimeMillis();\r\n    System.err.println(\"PU.copyProperties(dyna,dyna), count=\" + counter + \", time=\" + (stopMillis - startMillis));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\PropertyUtilsBenchCase.java",
  "methodName" : "testCopyPropertiesMap",
  "sourceCode" : "// Time copyProperties() from a Map\r\n@Test\r\nvoid testCopyPropertiesMap() throws Exception {\r\n    long startMillis;\r\n    long stopMillis;\r\n    // Dyna->Bean\r\n    for (long i = 0; i < counter; i++) {\r\n        pu.copyProperties(outBean, inMap);\r\n    }\r\n    startMillis = System.currentTimeMillis();\r\n    for (long i = 0; i < counter; i++) {\r\n        pu.copyProperties(outBean, inMap);\r\n    }\r\n    stopMillis = System.currentTimeMillis();\r\n    System.err.println(\"PU.copyProperties(bean, map), count=\" + counter + \", time=\" + (stopMillis - startMillis));\r\n    // Dyna->Dyna\r\n    for (long i = 0; i < counter; i++) {\r\n        pu.copyProperties(outDyna, inMap);\r\n    }\r\n    startMillis = System.currentTimeMillis();\r\n    for (long i = 0; i < counter; i++) {\r\n        pu.copyProperties(outDyna, inMap);\r\n    }\r\n    stopMillis = System.currentTimeMillis();\r\n    System.err.println(\"PU.copyProperties(dyna, map), count=\" + counter + \", time=\" + (stopMillis - startMillis));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\PropertyUtilsTest.java",
  "methodName" : "testAddBeanIntrospectorNull",
  "sourceCode" : "/**\r\n * Tries to add a null BeanIntrospector.\r\n */\r\n@Test\r\nvoid testAddBeanIntrospectorNull() {\r\n    assertThrows(NullPointerException.class, () -> PropertyUtils.addBeanIntrospector(null));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\PropertyUtilsTest.java",
  "methodName" : "testCopyPropertiesMap",
  "sourceCode" : "/**\r\n * Test copyProperties() when the origin is a {@code Map}.\r\n */\r\n@Test\r\nvoid testCopyPropertiesMap() throws Exception {\r\n    final Map<String, Object> map = new HashMap<>();\r\n    map.put(\"booleanProperty\", Boolean.FALSE);\r\n    map.put(\"doubleProperty\", Double.valueOf(333.0));\r\n    map.put(\"dupProperty\", new String[] { \"New 0\", \"New 1\", \"New 2\" });\r\n    map.put(\"floatProperty\", Float.valueOf((float) 222.0));\r\n    map.put(\"intArray\", new int[] { 0, 100, 200 });\r\n    map.put(\"intProperty\", Integer.valueOf(111));\r\n    map.put(\"longProperty\", Long.valueOf(444));\r\n    map.put(\"shortProperty\", Short.valueOf((short) 555));\r\n    map.put(\"stringProperty\", \"New String Property\");\r\n    PropertyUtils.copyProperties(bean, map);\r\n    // Scalar properties\r\n    assertEquals(false, bean.getBooleanProperty(), \"booleanProperty\");\r\n    assertEquals(333.0, bean.getDoubleProperty(), 0.005, \"doubleProperty\");\r\n    assertEquals((float) 222.0, bean.getFloatProperty(), (float) 0.005, \"floatProperty\");\r\n    assertEquals(111, bean.getIntProperty(), \"intProperty\");\r\n    assertEquals(444, bean.getLongProperty(), \"longProperty\");\r\n    assertEquals((short) 555, bean.getShortProperty(), \"shortProperty\");\r\n    assertEquals(\"New String Property\", bean.getStringProperty(), \"stringProperty\");\r\n    // Indexed Properties\r\n    final String[] dupProperty = bean.getDupProperty();\r\n    assertNotNull(dupProperty, \"dupProperty present\");\r\n    assertEquals(3, dupProperty.length, \"dupProperty length\");\r\n    assertEquals(\"New 0\", dupProperty[0], \"dupProperty[0]\");\r\n    assertEquals(\"New 1\", dupProperty[1], \"dupProperty[1]\");\r\n    assertEquals(\"New 2\", dupProperty[2], \"dupProperty[2]\");\r\n    final int[] intArray = bean.getIntArray();\r\n    assertNotNull(intArray, \"intArray present\");\r\n    assertEquals(3, intArray.length, \"intArray length\");\r\n    assertEquals(0, intArray[0], \"intArray[0]\");\r\n    assertEquals(100, intArray[1], \"intArray[1]\");\r\n    assertEquals(200, intArray[2], \"intArray[2]\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\PropertyUtilsTest.java",
  "methodName" : "testCustomIntrospection",
  "sourceCode" : "/**\r\n * Tests whether the default introspection mechanism can be replaced by a custom BeanIntrospector.\r\n */\r\n@Test\r\nvoid testCustomIntrospection() {\r\n    final PropertyDescriptor[] desc1 = PropertyUtils.getPropertyDescriptors(AlphaBean.class);\r\n    PropertyDescriptor nameDescriptor = findNameDescriptor(desc1);\r\n    assertNotNull(nameDescriptor.getWriteMethod(), \"No write method\");\r\n    final BeanIntrospector bi = icontext -> {\r\n        final Set<String> names = icontext.propertyNames();\r\n        final PropertyDescriptor[] newDescs = new PropertyDescriptor[names.size()];\r\n        int idx = 0;\r\n        for (final Iterator<String> it = names.iterator(); it.hasNext(); idx++) {\r\n            final String propName = it.next();\r\n            final PropertyDescriptor pd = icontext.getPropertyDescriptor(propName);\r\n            newDescs[idx] = new PropertyDescriptor(pd.getName(), pd.getReadMethod(), null);\r\n        }\r\n        icontext.addPropertyDescriptors(newDescs);\r\n    };\r\n    PropertyUtils.clearDescriptors();\r\n    PropertyUtils.addBeanIntrospector(bi);\r\n    final PropertyDescriptor[] desc2 = PropertyUtils.getPropertyDescriptors(AlphaBean.class);\r\n    assertEquals(desc1.length, desc2.length, \"Different number of properties\");\r\n    nameDescriptor = findNameDescriptor(desc2);\r\n    assertNull(nameDescriptor.getWriteMethod(), \"Got a write method\");\r\n    PropertyUtils.removeBeanIntrospector(bi);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\PropertyUtilsTest.java",
  "methodName" : "testCustomIntrospectionEx",
  "sourceCode" : "/**\r\n * Tests whether exceptions during custom introspection are handled.\r\n */\r\n@Test\r\nvoid testCustomIntrospectionEx() {\r\n    final BeanIntrospector bi = icontext -> {\r\n        throw new IntrospectionException(\"TestException\");\r\n    };\r\n    PropertyUtils.clearDescriptors();\r\n    PropertyUtils.addBeanIntrospector(bi);\r\n    final PropertyDescriptor[] desc = PropertyUtils.getPropertyDescriptors(AlphaBean.class);\r\n    assertNotNull(findNameDescriptor(desc), \"Introspection did not work\");\r\n    PropertyUtils.removeBeanIntrospector(bi);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\PropertyUtilsTest.java",
  "methodName" : "testDescribe",
  "sourceCode" : "/**\r\n * Test the describe() method.\r\n */\r\n@Test\r\nvoid testDescribe() throws Exception {\r\n    final Map<String, Object> map = PropertyUtils.describe(bean);\r\n    // Verify existence of all the properties that should be present\r\n    for (final String describe : describes) {\r\n        assertTrue(map.containsKey(describe), \"Property '\" + describe + \"' is present\");\r\n    }\r\n    assertFalse(map.containsKey(\"writeOnlyProperty\"), \"Property 'writeOnlyProperty' is not present\");\r\n    // Verify the values of scalar properties\r\n    assertEquals(Boolean.TRUE, map.get(\"booleanProperty\"), \"Value of 'booleanProperty'\");\r\n    assertEquals(Double.valueOf(321.0), map.get(\"doubleProperty\"), \"Value of 'doubleProperty'\");\r\n    assertEquals(Float.valueOf((float) 123.0), map.get(\"floatProperty\"), \"Value of 'floatProperty'\");\r\n    assertEquals(Integer.valueOf(123), map.get(\"intProperty\"), \"Value of 'intProperty'\");\r\n    assertEquals(Long.valueOf(321), map.get(\"longProperty\"), \"Value of 'longProperty'\");\r\n    assertEquals(Short.valueOf((short) 987), map.get(\"shortProperty\"), \"Value of 'shortProperty'\");\r\n    assertEquals(\"This is a string\", (String) map.get(\"stringProperty\"), \"Value of 'stringProperty'\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\PropertyUtilsTest.java",
  "methodName" : "testExceptionFromInvoke",
  "sourceCode" : "/**\r\n * Test {@link PropertyUtilsBean}'s invoke method throwing an IllegalArgumentException and check that the \"cause\" has been properly initialized for JDK 1.4+\r\n * See BEANUTILS-266 for changes and reason for test\r\n */\r\n@Test\r\nvoid testExceptionFromInvoke() throws Exception {\r\n    try {\r\n        PropertyUtils.setSimpleProperty(bean, \"intProperty\", \"XXX\");\r\n    } catch (final IllegalArgumentException t) {\r\n        final Throwable cause = (Throwable) PropertyUtils.getProperty(t, \"cause\");\r\n        assertNotNull(cause, \"Cause not found\");\r\n        assertInstanceOf(IllegalArgumentException.class, cause, \"Expected cause to be IllegalArgumentException, but was: \" + cause.getClass());\r\n        // JDK 1.6 doesn't have \"argument type mismatch\" message\r\n        // assertEquals(\"Check error message\", \"argument type mismatch\", cause.getMessage());\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\PropertyUtilsTest.java",
  "methodName" : "testGetDescriptorArguments",
  "sourceCode" : "/**\r\n * Corner cases on getPropertyDescriptor invalid arguments.\r\n */\r\n@Test\r\nvoid testGetDescriptorArguments() {\r\n    assertThrows(NullPointerException.class, () -> PropertyUtils.getPropertyDescriptor(null, \"stringProperty\"));\r\n    assertThrows(NullPointerException.class, () -> PropertyUtils.getPropertyDescriptor(bean, null));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\PropertyUtilsTest.java",
  "methodName" : "testGetDescriptorBoolean",
  "sourceCode" : "/**\r\n * Positive getPropertyDescriptor on property {@code booleanProperty}.\r\n */\r\n@Test\r\nvoid testGetDescriptorBoolean() throws Exception {\r\n    testGetDescriptorBase(\"booleanProperty\", \"getBooleanProperty\", \"setBooleanProperty\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\PropertyUtilsTest.java",
  "methodName" : "testGetDescriptorDouble",
  "sourceCode" : "/**\r\n * Positive getPropertyDescriptor on property {@code doubleProperty}.\r\n */\r\n@Test\r\nvoid testGetDescriptorDouble() throws Exception {\r\n    testGetDescriptorBase(\"doubleProperty\", \"getDoubleProperty\", \"setDoubleProperty\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\PropertyUtilsTest.java",
  "methodName" : "testGetDescriptorFloat",
  "sourceCode" : "/**\r\n * Positive getPropertyDescriptor on property {@code floatProperty}.\r\n */\r\n@Test\r\nvoid testGetDescriptorFloat() throws Exception {\r\n    testGetDescriptorBase(\"floatProperty\", \"getFloatProperty\", \"setFloatProperty\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\PropertyUtilsTest.java",
  "methodName" : "testGetDescriptorInt",
  "sourceCode" : "/**\r\n * Positive getPropertyDescriptor on property {@code intProperty}.\r\n */\r\n@Test\r\nvoid testGetDescriptorInt() throws Exception {\r\n    testGetDescriptorBase(\"intProperty\", \"getIntProperty\", \"setIntProperty\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\PropertyUtilsTest.java",
  "methodName" : "testGetDescriptorInvalidBoolean",
  "sourceCode" : "/**\r\n * <p>\r\n * Negative tests on an invalid property with two different boolean getters (which is fine, according to the JavaBeans spec) but a String setter instead of\r\n * a boolean setter.\r\n * </p>\r\n *\r\n * <p>\r\n * Although one could logically argue that this combination of method signatures should not identify a property at all, there is a sentence in Section 8.3.1\r\n * making it clear that the behavior tested for here is correct: \"If we find only one of these methods, then we regard it as defining either a read-only or\r\n * write-only property called <em>&lt;property-name&gt;</em>.\r\n * </p>\r\n */\r\n@Test\r\nvoid testGetDescriptorInvalidBoolean() throws Exception {\r\n    final PropertyDescriptor pd = PropertyUtils.getPropertyDescriptor(bean, \"invalidBoolean\");\r\n    assertNotNull(pd, \"invalidBoolean is a property\");\r\n    assertNotNull(pd.getReadMethod(), \"invalidBoolean has a getter method\");\r\n    assertNull(pd.getWriteMethod(), \"invalidBoolean has no write method\");\r\n    assertTrue(Arrays.asList(\"isInvalidBoolean\", \"getInvalidBoolean\").contains(pd.getReadMethod().getName()), \"invalidBoolean getter method is isInvalidBoolean or getInvalidBoolean\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\PropertyUtilsTest.java",
  "methodName" : "testGetDescriptorLong",
  "sourceCode" : "/**\r\n * Positive getPropertyDescriptor on property {@code longProperty}.\r\n */\r\n@Test\r\nvoid testGetDescriptorLong() throws Exception {\r\n    testGetDescriptorBase(\"longProperty\", \"getLongProperty\", \"setLongProperty\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\PropertyUtilsTest.java",
  "methodName" : "testGetDescriptorMappedPeriods",
  "sourceCode" : "/**\r\n * Test getting mapped descriptor with periods in the key.\r\n */\r\n@Test\r\nvoid testGetDescriptorMappedPeriods() throws Exception {\r\n    // initializes mappedIntProperty\r\n    bean.getMappedIntProperty(\"xyz\");\r\n    PropertyDescriptor desc;\r\n    final Integer testIntegerValue = Integer.valueOf(1234);\r\n    bean.setMappedIntProperty(\"key.with.a.dot\", testIntegerValue.intValue());\r\n    assertEquals(testIntegerValue, Integer.valueOf(bean.getMappedIntProperty(\"key.with.a.dot\")), \"Can retrieve directly\");\r\n    desc = PropertyUtils.getPropertyDescriptor(bean, \"mappedIntProperty(key.with.a.dot)\");\r\n    assertEquals(Integer.TYPE, ((MappedPropertyDescriptor) desc).getMappedPropertyType(), \"Check descriptor type (A)\");\r\n    bean.setMappedObjects(\"nested.property\", new TestBean(testIntegerValue.intValue()));\r\n    assertEquals(testIntegerValue, Integer.valueOf(((TestBean) bean.getMappedObjects(\"nested.property\")).getIntProperty()), \"Can retrieve directly\");\r\n    desc = PropertyUtils.getPropertyDescriptor(bean, \"mappedObjects(nested.property).intProperty\");\r\n    assertEquals(Integer.TYPE, desc.getPropertyType(), \"Check descriptor type (B)\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\PropertyUtilsTest.java",
  "methodName" : "testGetDescriptorReadOnly",
  "sourceCode" : "/**\r\n * Positive getPropertyDescriptor on property {@code readOnlyProperty}.\r\n */\r\n@Test\r\nvoid testGetDescriptorReadOnly() throws Exception {\r\n    testGetDescriptorBase(\"readOnlyProperty\", \"getReadOnlyProperty\", null);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\PropertyUtilsTest.java",
  "methodName" : "testGetDescriptors",
  "sourceCode" : "/**\r\n * Positive test for getPropertyDescriptors(). Each property name listed in {@code properties} should be returned exactly once.\r\n */\r\n@Test\r\nvoid testGetDescriptors() {\r\n    final PropertyDescriptor[] pd = PropertyUtils.getPropertyDescriptors(bean);\r\n    assertNotNull(pd, \"Got descriptors\");\r\n    final int[] count = new int[properties.length];\r\n    for (final PropertyDescriptor element : pd) {\r\n        final String name = element.getName();\r\n        for (int j = 0; j < properties.length; j++) {\r\n            if (name.equals(properties[j])) {\r\n                count[j]++;\r\n            }\r\n        }\r\n    }\r\n    for (int j = 0; j < properties.length; j++) {\r\n        assertFalse(count[j] < 0, \"Missing property \" + properties[j]);\r\n        assertFalse(count[j] > 1, \"Missing property \" + properties[j]);\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\PropertyUtilsTest.java",
  "methodName" : "testGetDescriptorsArguments",
  "sourceCode" : "/**\r\n * Corner cases on getPropertyDescriptors invalid arguments.\r\n */\r\n@Test\r\nvoid testGetDescriptorsArguments() {\r\n    assertThrows(NullPointerException.class, () -> PropertyUtils.getPropertyDescriptors(null));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\PropertyUtilsTest.java",
  "methodName" : "testGetDescriptorSecond",
  "sourceCode" : "/**\r\n * Positive getPropertyDescriptor on property {@code booleanSecond} that uses an \"is\" method as the getter.\r\n */\r\n@Test\r\nvoid testGetDescriptorSecond() throws Exception {\r\n    testGetDescriptorBase(\"booleanSecond\", \"isBooleanSecond\", \"setBooleanSecond\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\PropertyUtilsTest.java",
  "methodName" : "testGetDescriptorShort",
  "sourceCode" : "/**\r\n * Positive getPropertyDescriptor on property {@code shortProperty}.\r\n */\r\n@Test\r\nvoid testGetDescriptorShort() throws Exception {\r\n    testGetDescriptorBase(\"shortProperty\", \"getShortProperty\", \"setShortProperty\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\PropertyUtilsTest.java",
  "methodName" : "testGetDescriptorString",
  "sourceCode" : "/**\r\n * Positive getPropertyDescriptor on property {@code stringProperty}.\r\n */\r\n@Test\r\nvoid testGetDescriptorString() throws Exception {\r\n    testGetDescriptorBase(\"stringProperty\", \"getStringProperty\", \"setStringProperty\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\PropertyUtilsTest.java",
  "methodName" : "testGetDescriptorUnknown",
  "sourceCode" : "/**\r\n * Negative getPropertyDescriptor on property {@code unknown}.\r\n */\r\n@Test\r\nvoid testGetDescriptorUnknown() throws Exception {\r\n    testGetDescriptorBase(\"unknown\", null, null);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\PropertyUtilsTest.java",
  "methodName" : "testGetDescriptorWriteOnly",
  "sourceCode" : "/**\r\n * Positive getPropertyDescriptor on property {@code writeOnlyProperty}.\r\n */\r\n@Test\r\nvoid testGetDescriptorWriteOnly() throws Exception {\r\n    testGetDescriptorBase(\"writeOnlyProperty\", null, \"setWriteOnlyProperty\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\PropertyUtilsTest.java",
  "methodName" : "testGetIndexedArguments",
  "sourceCode" : "/**\r\n * Corner cases on getIndexedProperty invalid arguments.\r\n */\r\n@Test\r\nvoid testGetIndexedArguments() {\r\n    // Use explicit index argument\r\n    assertThrows(NullPointerException.class, () -> PropertyUtils.getIndexedProperty(null, \"intArray\", 0));\r\n    assertThrows(NullPointerException.class, () -> PropertyUtils.getIndexedProperty(bean, null, 0));\r\n    // Use index expression\r\n    assertThrows(NullPointerException.class, () -> PropertyUtils.getIndexedProperty(null, \"intArray[0]\"));\r\n    assertThrows(NoSuchMethodException.class, () -> PropertyUtils.getIndexedProperty(bean, \"[0]\"));\r\n    assertThrows(IllegalArgumentException.class, () -> PropertyUtils.getIndexedProperty(bean, \"intArray\"));\r\n    // Use explicit index argument\r\n    assertThrows(NullPointerException.class, () -> PropertyUtils.getIndexedProperty(null, \"intIndexed\", 0));\r\n    assertThrows(NullPointerException.class, () -> PropertyUtils.getIndexedProperty(bean, null, 0));\r\n    // Use index expression\r\n    assertThrows(NullPointerException.class, () -> PropertyUtils.getIndexedProperty(null, \"intIndexed[0]\"));\r\n    assertThrows(NoSuchMethodException.class, () -> PropertyUtils.getIndexedProperty(bean, \"[0]\"));\r\n    assertThrows(IllegalArgumentException.class, () -> PropertyUtils.getIndexedProperty(bean, \"intIndexed\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\PropertyUtilsTest.java",
  "methodName" : "testGetIndexedArray",
  "sourceCode" : "/**\r\n * Test getting an indexed value out of a multi-dimensional array\r\n */\r\n@Test\r\nvoid testGetIndexedArray() throws Exception {\r\n    final String[] firstArray = { \"FIRST-1\", \"FIRST-2\", \"FIRST-3\" };\r\n    final String[] secondArray = { \"SECOND-1\", \"SECOND-2\", \"SECOND-3\", \"SECOND-4\" };\r\n    final String[][] mainArray = { firstArray, secondArray };\r\n    final TestBean bean = new TestBean(mainArray);\r\n    assertEquals(firstArray[0], PropertyUtils.getProperty(bean, \"string2dArray[0][0]\"), \"firstArray[0]\");\r\n    assertEquals(firstArray[1], PropertyUtils.getProperty(bean, \"string2dArray[0][1]\"), \"firstArray[1]\");\r\n    assertEquals(firstArray[2], PropertyUtils.getProperty(bean, \"string2dArray[0][2]\"), \"firstArray[2]\");\r\n    assertEquals(secondArray[0], PropertyUtils.getProperty(bean, \"string2dArray[1][0]\"), \"secondArray[0]\");\r\n    assertEquals(secondArray[1], PropertyUtils.getProperty(bean, \"string2dArray[1][1]\"), \"secondArray[1]\");\r\n    assertEquals(secondArray[2], PropertyUtils.getProperty(bean, \"string2dArray[1][2]\"), \"secondArray[2]\");\r\n    assertEquals(secondArray[3], PropertyUtils.getProperty(bean, \"string2dArray[1][3]\"), \"secondArray[3]\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\PropertyUtilsTest.java",
  "methodName" : "testGetIndexedList",
  "sourceCode" : "/**\r\n * Test getting an indexed value out of List of Lists\r\n */\r\n@Test\r\nvoid testGetIndexedList() throws Exception {\r\n    final String[] firstArray = { \"FIRST-1\", \"FIRST-2\", \"FIRST-3\" };\r\n    final String[] secondArray = { \"SECOND-1\", \"SECOND-2\", \"SECOND-3\", \"SECOND-4\" };\r\n    final List<Object> mainList = new ArrayList<>();\r\n    mainList.add(Arrays.asList(firstArray));\r\n    mainList.add(Arrays.asList(secondArray));\r\n    final TestBean bean = new TestBean(mainList);\r\n    assertEquals(firstArray[0], PropertyUtils.getProperty(bean, \"listIndexed[0][0]\"), \"firstArray[0]\");\r\n    assertEquals(firstArray[1], PropertyUtils.getProperty(bean, \"listIndexed[0][1]\"), \"firstArray[1]\");\r\n    assertEquals(firstArray[2], PropertyUtils.getProperty(bean, \"listIndexed[0][2]\"), \"firstArray[2]\");\r\n    assertEquals(secondArray[0], PropertyUtils.getProperty(bean, \"listIndexed[1][0]\"), \"secondArray[0]\");\r\n    assertEquals(secondArray[1], PropertyUtils.getProperty(bean, \"listIndexed[1][1]\"), \"secondArray[1]\");\r\n    assertEquals(secondArray[2], PropertyUtils.getProperty(bean, \"listIndexed[1][2]\"), \"secondArray[2]\");\r\n    assertEquals(secondArray[3], PropertyUtils.getProperty(bean, \"listIndexed[1][3]\"), \"secondArray[3]\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\PropertyUtilsTest.java",
  "methodName" : "testGetIndexedMap",
  "sourceCode" : "/**\r\n * Test getting a value out of a mapped Map\r\n */\r\n@Test\r\nvoid testGetIndexedMap() throws Exception {\r\n    final Map<String, Object> firstMap = new HashMap<>();\r\n    firstMap.put(\"FIRST-KEY-1\", \"FIRST-VALUE-1\");\r\n    firstMap.put(\"FIRST-KEY-2\", \"FIRST-VALUE-2\");\r\n    final Map<String, Object> secondMap = new HashMap<>();\r\n    secondMap.put(\"SECOND-KEY-1\", \"SECOND-VALUE-1\");\r\n    secondMap.put(\"SECOND-KEY-2\", \"SECOND-VALUE-2\");\r\n    final List<Object> mainList = new ArrayList<>();\r\n    mainList.add(firstMap);\r\n    mainList.add(secondMap);\r\n    final TestBean bean = new TestBean(mainList);\r\n    assertEquals(\"FIRST-VALUE-1\", PropertyUtils.getProperty(bean, \"listIndexed[0](FIRST-KEY-1)\"), \"listIndexed[0](FIRST-KEY-1)\");\r\n    assertEquals(\"FIRST-VALUE-2\", PropertyUtils.getProperty(bean, \"listIndexed[0](FIRST-KEY-2)\"), \"listIndexed[0](FIRST-KEY-2)\");\r\n    assertEquals(\"SECOND-VALUE-1\", PropertyUtils.getProperty(bean, \"listIndexed[1](SECOND-KEY-1)\"), \"listIndexed[1](SECOND-KEY-1)\");\r\n    assertEquals(\"SECOND-VALUE-2\", PropertyUtils.getProperty(bean, \"listIndexed[1](SECOND-KEY-2)\"), \"listIndexed[1](SECOND-KEY-2)\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\PropertyUtilsTest.java",
  "methodName" : "testGetIndexedValues",
  "sourceCode" : "/**\r\n * Positive and negative tests on getIndexedProperty valid arguments.\r\n */\r\n@Test\r\nvoid testGetIndexedValues() throws Exception {\r\n    Object value = null;\r\n    // Use explicit key argument\r\n    for (int i = 0; i < 5; i++) {\r\n        value = PropertyUtils.getIndexedProperty(bean, \"dupProperty\", i);\r\n        assertNotNull(value, \"dupProperty returned value \" + i);\r\n        assertInstanceOf(String.class, value, \"dupProperty returned String \" + i);\r\n        assertEquals(\"Dup \" + i, (String) value, \"dupProperty returned correct \" + i);\r\n        value = PropertyUtils.getIndexedProperty(bean, \"intArray\", i);\r\n        assertNotNull(value, \"intArray returned value \" + i);\r\n        assertInstanceOf(Integer.class, value, \"intArray returned Integer \" + i);\r\n        assertEquals(i * 10, ((Integer) value).intValue(), \"intArray returned correct \" + i);\r\n        value = PropertyUtils.getIndexedProperty(bean, \"intIndexed\", i);\r\n        assertNotNull(value, \"intIndexed returned value \" + i);\r\n        assertInstanceOf(Integer.class, value, \"intIndexed returned Integer \" + i);\r\n        assertEquals(i * 10, ((Integer) value).intValue(), \"intIndexed returned correct \" + i);\r\n        value = PropertyUtils.getIndexedProperty(bean, \"listIndexed\", i);\r\n        assertNotNull(value, \"listIndexed returned value \" + i);\r\n        assertInstanceOf(String.class, value, \"list returned String \" + i);\r\n        assertEquals(\"String \" + i, (String) value, \"listIndexed returned correct \" + i);\r\n        value = PropertyUtils.getIndexedProperty(bean, \"stringArray\", i);\r\n        assertNotNull(value, \"stringArray returned value \" + i);\r\n        assertInstanceOf(String.class, value, \"stringArray returned String \" + i);\r\n        assertEquals(\"String \" + i, (String) value, \"stringArray returned correct \" + i);\r\n        value = PropertyUtils.getIndexedProperty(bean, \"stringIndexed\", i);\r\n        assertNotNull(value, \"stringIndexed returned value \" + i);\r\n        assertInstanceOf(String.class, value, \"stringIndexed returned String \" + i);\r\n        assertEquals(\"String \" + i, (String) value, \"stringIndexed returned correct \" + i);\r\n    }\r\n    // Use key expression\r\n    for (int i = 0; i < 5; i++) {\r\n        value = PropertyUtils.getIndexedProperty(bean, \"dupProperty[\" + i + \"]\");\r\n        assertNotNull(value, \"dupProperty returned value \" + i);\r\n        assertInstanceOf(String.class, value, \"dupProperty returned String \" + i);\r\n        assertEquals(\"Dup \" + i, (String) value, \"dupProperty returned correct \" + i);\r\n        value = PropertyUtils.getIndexedProperty(bean, \"intArray[\" + i + \"]\");\r\n        assertNotNull(value, \"intArray returned value \" + i);\r\n        assertInstanceOf(Integer.class, value, \"intArray returned Integer \" + i);\r\n        assertEquals(i * 10, ((Integer) value).intValue(), \"intArray returned correct \" + i);\r\n        value = PropertyUtils.getIndexedProperty(bean, \"intIndexed[\" + i + \"]\");\r\n        assertNotNull(value, \"intIndexed returned value \" + i);\r\n        assertInstanceOf(Integer.class, value, \"intIndexed returned Integer \" + i);\r\n        assertEquals(i * 10, ((Integer) value).intValue(), \"intIndexed returned correct \" + i);\r\n        value = PropertyUtils.getIndexedProperty(bean, \"listIndexed[\" + i + \"]\");\r\n        assertNotNull(value, \"listIndexed returned value \" + i);\r\n        assertInstanceOf(String.class, value, \"listIndexed returned String \" + i);\r\n        assertEquals(\"String \" + i, (String) value, \"listIndexed returned correct \" + i);\r\n        value = PropertyUtils.getIndexedProperty(bean, \"stringArray[\" + i + \"]\");\r\n        assertNotNull(value, \"stringArray returned value \" + i);\r\n        assertInstanceOf(String.class, value, \"stringArray returned String \" + i);\r\n        assertEquals(\"String \" + i, (String) value, \"stringArray returned correct \" + i);\r\n        value = PropertyUtils.getIndexedProperty(bean, \"stringIndexed[\" + i + \"]\");\r\n        assertNotNull(value, \"stringIndexed returned value \" + i);\r\n        assertInstanceOf(String.class, value, \"stringIndexed returned String \" + i);\r\n        assertEquals(\"String \" + i, (String) value, \"stringIndexed returned correct \" + i);\r\n    }\r\n    // Index out of bounds tests\r\n    assertThrows(ArrayIndexOutOfBoundsException.class, () -> PropertyUtils.getIndexedProperty(bean, \"dupProperty\", -1));\r\n    assertThrows(ArrayIndexOutOfBoundsException.class, () -> PropertyUtils.getIndexedProperty(bean, \"dupProperty\", 5));\r\n    assertThrows(ArrayIndexOutOfBoundsException.class, () -> PropertyUtils.getIndexedProperty(bean, \"intArray\", -1));\r\n    assertThrows(ArrayIndexOutOfBoundsException.class, () -> PropertyUtils.getIndexedProperty(bean, \"intArray\", 5));\r\n    assertThrows(ArrayIndexOutOfBoundsException.class, () -> PropertyUtils.getIndexedProperty(bean, \"intIndexed\", -1));\r\n    assertThrows(ArrayIndexOutOfBoundsException.class, () -> PropertyUtils.getIndexedProperty(bean, \"intIndexed\", 5));\r\n    assertThrows(IndexOutOfBoundsException.class, () -> PropertyUtils.getIndexedProperty(bean, \"listIndexed\", -1));\r\n    assertThrows(IndexOutOfBoundsException.class, () -> PropertyUtils.getIndexedProperty(bean, \"listIndexed\", 5));\r\n    assertThrows(ArrayIndexOutOfBoundsException.class, () -> PropertyUtils.getIndexedProperty(bean, \"stringArray\", -1));\r\n    assertThrows(ArrayIndexOutOfBoundsException.class, () -> PropertyUtils.getIndexedProperty(bean, \"stringArray\", 5));\r\n    assertThrows(ArrayIndexOutOfBoundsException.class, () -> PropertyUtils.getIndexedProperty(bean, \"stringIndexed\", -1));\r\n    assertThrows(ArrayIndexOutOfBoundsException.class, () -> PropertyUtils.getIndexedProperty(bean, \"stringIndexed\", 5));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\PropertyUtilsTest.java",
  "methodName" : "testGetMappedArguments",
  "sourceCode" : "/**\r\n * Corner cases on getMappedProperty invalid arguments.\r\n */\r\n@Test\r\nvoid testGetMappedArguments() {\r\n    // Use explicit key argument\r\n    assertThrows(NullPointerException.class, () -> PropertyUtils.getMappedProperty(null, \"mappedProperty\", \"First Key\"));\r\n    assertThrows(NullPointerException.class, () -> PropertyUtils.getMappedProperty(bean, null, \"First Key\"));\r\n    assertThrows(NullPointerException.class, () -> PropertyUtils.getMappedProperty(bean, \"mappedProperty\", null));\r\n    // Use key expression\r\n    assertThrows(NullPointerException.class, () -> PropertyUtils.getMappedProperty(null, \"mappedProperty(First Key)\"));\r\n    assertThrows(NoSuchMethodException.class, () -> PropertyUtils.getMappedProperty(bean, \"(Second Key)\"));\r\n    assertThrows(IllegalArgumentException.class, () -> PropertyUtils.getMappedProperty(bean, \"mappedProperty\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\PropertyUtilsTest.java",
  "methodName" : "testGetMappedArray",
  "sourceCode" : "/**\r\n * Test getting an indexed value out of a mapped array\r\n */\r\n@Test\r\nvoid testGetMappedArray() throws Exception {\r\n    final TestBean bean = new TestBean();\r\n    final String[] array = { \"abc\", \"def\", \"ghi\" };\r\n    bean.getMapProperty().put(\"mappedArray\", array);\r\n    assertEquals(\"abc\", PropertyUtils.getProperty(bean, \"mapProperty(mappedArray)[0]\"));\r\n    assertEquals(\"def\", PropertyUtils.getProperty(bean, \"mapProperty(mappedArray)[1]\"));\r\n    assertEquals(\"ghi\", PropertyUtils.getProperty(bean, \"mapProperty(mappedArray)[2]\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\PropertyUtilsTest.java",
  "methodName" : "testGetMappedList",
  "sourceCode" : "/**\r\n * Test getting an indexed value out of a mapped List\r\n */\r\n@Test\r\nvoid testGetMappedList() throws Exception {\r\n    final TestBean bean = new TestBean();\r\n    final List<Object> list = new ArrayList<>();\r\n    list.add(\"klm\");\r\n    list.add(\"nop\");\r\n    list.add(\"qrs\");\r\n    bean.getMapProperty().put(\"mappedList\", list);\r\n    assertEquals(\"klm\", PropertyUtils.getProperty(bean, \"mapProperty(mappedList)[0]\"));\r\n    assertEquals(\"nop\", PropertyUtils.getProperty(bean, \"mapProperty(mappedList)[1]\"));\r\n    assertEquals(\"qrs\", PropertyUtils.getProperty(bean, \"mapProperty(mappedList)[2]\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\PropertyUtilsTest.java",
  "methodName" : "testGetMappedMap",
  "sourceCode" : "/**\r\n * Test getting a value out of a mapped Map\r\n */\r\n@Test\r\nvoid testGetMappedMap() throws Exception {\r\n    final TestBean bean = new TestBean();\r\n    final Map<String, Object> map = new HashMap<>();\r\n    map.put(\"sub-key-1\", \"sub-value-1\");\r\n    map.put(\"sub-key-2\", \"sub-value-2\");\r\n    map.put(\"sub-key-3\", \"sub-value-3\");\r\n    bean.getMapProperty().put(\"mappedMap\", map);\r\n    assertEquals(\"sub-value-1\", PropertyUtils.getProperty(bean, \"mapProperty(mappedMap)(sub-key-1)\"));\r\n    assertEquals(\"sub-value-2\", PropertyUtils.getProperty(bean, \"mapProperty(mappedMap)(sub-key-2)\"));\r\n    assertEquals(\"sub-value-3\", PropertyUtils.getProperty(bean, \"mapProperty(mappedMap)(sub-key-3)\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\PropertyUtilsTest.java",
  "methodName" : "testGetMappedPeriods",
  "sourceCode" : "/**\r\n * Test getting mapped values with periods in the key.\r\n */\r\n@Test\r\nvoid testGetMappedPeriods() throws Exception {\r\n    bean.setMappedProperty(\"key.with.a.dot\", \"Special Value\");\r\n    assertEquals(\"Special Value\", bean.getMappedProperty(\"key.with.a.dot\"), \"Can retrieve directly\");\r\n    assertEquals(\"Special Value\", PropertyUtils.getMappedProperty(bean, \"mappedProperty\", \"key.with.a.dot\"), \"Can retrieve via getMappedProperty\");\r\n    assertEquals(\"Special Value\", PropertyUtils.getNestedProperty(bean, \"mappedProperty(key.with.a.dot)\"), \"Can retrieve via getNestedProperty\");\r\n    bean.setMappedObjects(\"nested.property\", new TestBean());\r\n    assertNotNull(bean.getMappedObjects(\"nested.property\"), \"Can retrieve directly\");\r\n    assertEquals(\"This is a string\", PropertyUtils.getNestedProperty(bean, \"mappedObjects(nested.property).stringProperty\"), \"Can retrieve nested\");\r\n    assertEquals(\"Mapped Value\", PropertyUtils.getNestedProperty(bean, \"mappedNested.value(Mapped Key)\"), \"Can't retrieved nested with mapped property\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\PropertyUtilsTest.java",
  "methodName" : "testGetMappedSlashes",
  "sourceCode" : "/**\r\n * Test getting mapped values with slashes in the key. This is different from periods because slashes are not syntactically significant.\r\n */\r\n@Test\r\nvoid testGetMappedSlashes() throws Exception {\r\n    bean.setMappedProperty(\"key/with/a/slash\", \"Special Value\");\r\n    assertEquals(\"Special Value\", bean.getMappedProperty(\"key/with/a/slash\"), \"Can retrieve directly\");\r\n    assertEquals(\"Special Value\", PropertyUtils.getMappedProperty(bean, \"mappedProperty\", \"key/with/a/slash\"), \"Can retrieve via getMappedProperty\");\r\n    assertEquals(\"Special Value\", PropertyUtils.getNestedProperty(bean, \"mappedProperty(key/with/a/slash)\"), \"Can retrieve via getNestedProperty\");\r\n    bean.setMappedObjects(\"nested/property\", new TestBean());\r\n    assertNotNull(bean.getMappedObjects(\"nested/property\"), \"Can retrieve directly\");\r\n    assertEquals(\"This is a string\", PropertyUtils.getNestedProperty(bean, \"mappedObjects(nested/property).stringProperty\"), \"Can retrieve nested\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\PropertyUtilsTest.java",
  "methodName" : "testGetMappedValues",
  "sourceCode" : "/**\r\n * Positive and negative tests on getMappedProperty valid arguments.\r\n */\r\n@Test\r\nvoid testGetMappedValues() throws Exception {\r\n    Object value = null;\r\n    // Use explicit key argument\r\n    value = PropertyUtils.getMappedProperty(bean, \"mappedProperty\", \"First Key\");\r\n    assertEquals(\"First Value\", value, \"Can find first value\");\r\n    value = PropertyUtils.getMappedProperty(bean, \"mappedProperty\", \"Second Key\");\r\n    assertEquals(\"Second Value\", value, \"Can find second value\");\r\n    value = PropertyUtils.getMappedProperty(bean, \"mappedProperty\", \"Third Key\");\r\n    assertNull(value, \"Can not find third value\");\r\n    // Use key expression with parentheses\r\n    value = PropertyUtils.getMappedProperty(bean, \"mappedProperty(First Key)\");\r\n    assertEquals(\"First Value\", value, \"Can find first value\");\r\n    value = PropertyUtils.getMappedProperty(bean, \"mappedProperty(Second Key)\");\r\n    assertEquals(\"Second Value\", value, \"Can find second value\");\r\n    value = PropertyUtils.getMappedProperty(bean, \"mappedProperty(Third Key)\");\r\n    assertNull(value, \"Can not find third value\");\r\n    // Use key expression with dotted syntax\r\n    value = PropertyUtils.getNestedProperty(bean, \"mapProperty.First Key\");\r\n    assertEquals(\"First Value\", value, \"Can find first value\");\r\n    value = PropertyUtils.getNestedProperty(bean, \"mapProperty.Second Key\");\r\n    assertEquals(\"Second Value\", value, \"Can find second value\");\r\n    value = PropertyUtils.getNestedProperty(bean, \"mapProperty.Third Key\");\r\n    assertNull(value, \"Can not find third value\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\PropertyUtilsTest.java",
  "methodName" : "testGetNestedArguments",
  "sourceCode" : "/**\r\n * Corner cases on getNestedProperty invalid arguments.\r\n */\r\n@Test\r\nvoid testGetNestedArguments() {\r\n    assertThrows(NullPointerException.class, () -> PropertyUtils.getNestedProperty(null, \"stringProperty\"));\r\n    assertThrows(NullPointerException.class, () -> PropertyUtils.getNestedProperty(bean, null));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\PropertyUtilsTest.java",
  "methodName" : "testGetNestedBoolean",
  "sourceCode" : "/**\r\n * Test getNestedProperty on a boolean property.\r\n */\r\n@Test\r\nvoid testGetNestedBoolean() throws Exception {\r\n    final Object value = PropertyUtils.getNestedProperty(bean, \"nested.booleanProperty\");\r\n    assertNotNull(value, \"Got a value\");\r\n    assertInstanceOf(Boolean.class, value, \"Got correct type\");\r\n    assertEquals(((Boolean) value).booleanValue(), bean.getNested().getBooleanProperty(), \"Got correct value\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\PropertyUtilsTest.java",
  "methodName" : "testGetNestedDouble",
  "sourceCode" : "/**\r\n * Test getNestedProperty on a double property.\r\n */\r\n@Test\r\nvoid testGetNestedDouble() throws Exception {\r\n    final Object value = PropertyUtils.getNestedProperty(bean, \"nested.doubleProperty\");\r\n    assertNotNull(value, \"Got a value\");\r\n    assertInstanceOf(Double.class, value, \"Got correct type\");\r\n    assertEquals(((Double) value).doubleValue(), bean.getNested().getDoubleProperty(), 0.005, \"Got correct value\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\PropertyUtilsTest.java",
  "methodName" : "testGetNestedFloat",
  "sourceCode" : "/**\r\n * Test getNestedProperty on a float property.\r\n */\r\n@Test\r\nvoid testGetNestedFloat() throws Exception {\r\n    final Object value = PropertyUtils.getNestedProperty(bean, \"nested.floatProperty\");\r\n    assertNotNull(value, \"Got a value\");\r\n    assertInstanceOf(Float.class, value, \"Got correct type\");\r\n    assertEquals(((Float) value).floatValue(), bean.getNested().getFloatProperty(), (float) 0.005, \"Got correct value\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\PropertyUtilsTest.java",
  "methodName" : "testGetNestedInt",
  "sourceCode" : "/**\r\n * Test getNestedProperty on an int property.\r\n */\r\n@Test\r\nvoid testGetNestedInt() throws Exception {\r\n    final Object value = PropertyUtils.getNestedProperty(bean, \"nested.intProperty\");\r\n    assertNotNull(value, \"Got a value\");\r\n    assertInstanceOf(Integer.class, value, \"Got correct type\");\r\n    assertEquals(((Integer) value).intValue(), bean.getNested().getIntProperty(), \"Got correct value\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\PropertyUtilsTest.java",
  "methodName" : "testGetNestedLong",
  "sourceCode" : "/**\r\n * Test getNestedProperty on a long property.\r\n */\r\n@Test\r\nvoid testGetNestedLong() throws Exception {\r\n    final Object value = PropertyUtils.getNestedProperty(bean, \"nested.longProperty\");\r\n    assertNotNull(value, \"Got a value\");\r\n    assertInstanceOf(Long.class, value, \"Got correct type\");\r\n    assertEquals(((Long) value).longValue(), bean.getNested().getLongProperty(), \"Got correct value\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\PropertyUtilsTest.java",
  "methodName" : "testGetNestedReadOnly",
  "sourceCode" : "/**\r\n * Test getNestedProperty on a read-only String property.\r\n */\r\n@Test\r\nvoid testGetNestedReadOnly() throws Exception {\r\n    final Object value = PropertyUtils.getNestedProperty(bean, \"nested.readOnlyProperty\");\r\n    assertNotNull(value, \"Got a value\");\r\n    assertInstanceOf(String.class, value, \"Got correct type\");\r\n    assertEquals((String) value, bean.getReadOnlyProperty(), \"Got correct value\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\PropertyUtilsTest.java",
  "methodName" : "testGetNestedShort",
  "sourceCode" : "/**\r\n * Test getNestedProperty on a short property.\r\n */\r\n@Test\r\nvoid testGetNestedShort() throws Exception {\r\n    final Object value = PropertyUtils.getNestedProperty(bean, \"nested.shortProperty\");\r\n    assertNotNull(value, \"Got a value\");\r\n    assertInstanceOf(Short.class, value, \"Got correct type\");\r\n    assertEquals(((Short) value).shortValue(), bean.getNested().getShortProperty(), \"Got correct value\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\PropertyUtilsTest.java",
  "methodName" : "testGetNestedString",
  "sourceCode" : "/**\r\n * Test getNestedProperty on a String property.\r\n */\r\n@Test\r\nvoid testGetNestedString() throws Exception {\r\n    final Object value = PropertyUtils.getNestedProperty(bean, \"nested.stringProperty\");\r\n    assertNotNull(value, \"Got a value\");\r\n    assertInstanceOf(String.class, value, \"Got correct type\");\r\n    assertEquals((String) value, bean.getNested().getStringProperty(), \"Got correct value\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\PropertyUtilsTest.java",
  "methodName" : "testGetNestedUnknown",
  "sourceCode" : "/**\r\n * Negative test getNestedProperty on an unknown property.\r\n */\r\n@Test\r\nvoid testGetNestedUnknown() throws Exception {\r\n    assertThrows(NoSuchMethodException.class, () -> PropertyUtils.getNestedProperty(bean, \"nested.unknown\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\PropertyUtilsTest.java",
  "methodName" : "testGetNestedWriteOnly",
  "sourceCode" : "/**\r\n * Test getNestedProperty on a write-only String property.\r\n */\r\n@Test\r\nvoid testGetNestedWriteOnly() throws Exception {\r\n    assertThrows(NoSuchMethodException.class, () -> PropertyUtils.getNestedProperty(bean, \"writeOnlyProperty\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\PropertyUtilsTest.java",
  "methodName" : "testGetPropertyType",
  "sourceCode" : "/**\r\n * Test getPropertyType() on all kinds of properties.\r\n */\r\n@Test\r\nvoid testGetPropertyType() throws Exception {\r\n    Class<?> clazz = null;\r\n    final int[] intArray = {};\r\n    final String[] stringArray = {};\r\n    // Scalar and Indexed Properties\r\n    clazz = PropertyUtils.getPropertyType(bean, \"booleanProperty\");\r\n    assertEquals(Boolean.TYPE, clazz, \"booleanProperty type\");\r\n    clazz = PropertyUtils.getPropertyType(bean, \"booleanSecond\");\r\n    assertEquals(Boolean.TYPE, clazz, \"booleanSecond type\");\r\n    clazz = PropertyUtils.getPropertyType(bean, \"doubleProperty\");\r\n    assertEquals(Double.TYPE, clazz, \"doubleProperty type\");\r\n    clazz = PropertyUtils.getPropertyType(bean, \"dupProperty\");\r\n    assertEquals(String.class, clazz, \"dupProperty type\");\r\n    clazz = PropertyUtils.getPropertyType(bean, \"floatProperty\");\r\n    assertEquals(Float.TYPE, clazz, \"floatProperty type\");\r\n    clazz = PropertyUtils.getPropertyType(bean, \"intArray\");\r\n    assertEquals(intArray.getClass(), clazz, \"intArray type\");\r\n    clazz = PropertyUtils.getPropertyType(bean, \"intIndexed\");\r\n    assertEquals(Integer.TYPE, clazz, \"intIndexed type\");\r\n    clazz = PropertyUtils.getPropertyType(bean, \"intProperty\");\r\n    assertEquals(Integer.TYPE, clazz, \"intProperty type\");\r\n    clazz = PropertyUtils.getPropertyType(bean, \"listIndexed\");\r\n    assertEquals(List.class, clazz, \"listIndexed type\");\r\n    clazz = PropertyUtils.getPropertyType(bean, \"longProperty\");\r\n    assertEquals(Long.TYPE, clazz, \"longProperty type\");\r\n    clazz = PropertyUtils.getPropertyType(bean, \"mappedProperty\");\r\n    assertEquals(String.class, clazz, \"mappedProperty type\");\r\n    clazz = PropertyUtils.getPropertyType(bean, \"mappedIntProperty\");\r\n    assertEquals(Integer.TYPE, clazz, \"mappedIntProperty type\");\r\n    clazz = PropertyUtils.getPropertyType(bean, \"readOnlyProperty\");\r\n    assertEquals(String.class, clazz, \"readOnlyProperty type\");\r\n    clazz = PropertyUtils.getPropertyType(bean, \"shortProperty\");\r\n    assertEquals(Short.TYPE, clazz, \"shortProperty type\");\r\n    clazz = PropertyUtils.getPropertyType(bean, \"stringArray\");\r\n    assertEquals(stringArray.getClass(), clazz, \"stringArray type\");\r\n    clazz = PropertyUtils.getPropertyType(bean, \"stringIndexed\");\r\n    assertEquals(String.class, clazz, \"stringIndexed type\");\r\n    clazz = PropertyUtils.getPropertyType(bean, \"stringProperty\");\r\n    assertEquals(String.class, clazz, \"stringProperty type\");\r\n    clazz = PropertyUtils.getPropertyType(bean, \"writeOnlyProperty\");\r\n    assertEquals(String.class, clazz, \"writeOnlyProperty type\");\r\n    // Nested Properties\r\n    clazz = PropertyUtils.getPropertyType(bean, \"nested.booleanProperty\");\r\n    assertEquals(Boolean.TYPE, clazz, \"booleanProperty type\");\r\n    clazz = PropertyUtils.getPropertyType(bean, \"nested.booleanSecond\");\r\n    assertEquals(Boolean.TYPE, clazz, \"booleanSecond type\");\r\n    clazz = PropertyUtils.getPropertyType(bean, \"nested.doubleProperty\");\r\n    assertEquals(Double.TYPE, clazz, \"doubleProperty type\");\r\n    clazz = PropertyUtils.getPropertyType(bean, \"nested.dupProperty\");\r\n    assertEquals(String.class, clazz, \"dupProperty type\");\r\n    clazz = PropertyUtils.getPropertyType(bean, \"nested.floatProperty\");\r\n    assertEquals(Float.TYPE, clazz, \"floatProperty type\");\r\n    clazz = PropertyUtils.getPropertyType(bean, \"nested.intArray\");\r\n    assertEquals(intArray.getClass(), clazz, \"intArray type\");\r\n    clazz = PropertyUtils.getPropertyType(bean, \"nested.intIndexed\");\r\n    assertEquals(Integer.TYPE, clazz, \"intIndexed type\");\r\n    clazz = PropertyUtils.getPropertyType(bean, \"nested.intProperty\");\r\n    assertEquals(Integer.TYPE, clazz, \"intProperty type\");\r\n    clazz = PropertyUtils.getPropertyType(bean, \"nested.listIndexed\");\r\n    assertEquals(List.class, clazz, \"listIndexed type\");\r\n    clazz = PropertyUtils.getPropertyType(bean, \"nested.longProperty\");\r\n    assertEquals(Long.TYPE, clazz, \"longProperty type\");\r\n    clazz = PropertyUtils.getPropertyType(bean, \"nested.mappedProperty\");\r\n    assertEquals(String.class, clazz, \"mappedProperty type\");\r\n    clazz = PropertyUtils.getPropertyType(bean, \"nested.mappedIntProperty\");\r\n    assertEquals(Integer.TYPE, clazz, \"mappedIntProperty type\");\r\n    clazz = PropertyUtils.getPropertyType(bean, \"nested.readOnlyProperty\");\r\n    assertEquals(String.class, clazz, \"readOnlyProperty type\");\r\n    clazz = PropertyUtils.getPropertyType(bean, \"nested.shortProperty\");\r\n    assertEquals(Short.TYPE, clazz, \"shortProperty type\");\r\n    clazz = PropertyUtils.getPropertyType(bean, \"nested.stringArray\");\r\n    assertEquals(stringArray.getClass(), clazz, \"stringArray type\");\r\n    clazz = PropertyUtils.getPropertyType(bean, \"nested.stringIndexed\");\r\n    assertEquals(String.class, clazz, \"stringIndexed type\");\r\n    clazz = PropertyUtils.getPropertyType(bean, \"nested.stringProperty\");\r\n    assertEquals(String.class, clazz, \"stringProperty type\");\r\n    clazz = PropertyUtils.getPropertyType(bean, \"nested.writeOnlyProperty\");\r\n    assertEquals(String.class, clazz, \"writeOnlyProperty type\");\r\n    // Nested DynaBean\r\n    clazz = PropertyUtils.getPropertyType(bean, \"nestedDynaBean\");\r\n    assertEquals(DynaBean.class, clazz, \"nestedDynaBean type\");\r\n    clazz = PropertyUtils.getPropertyType(bean, \"nestedDynaBean.stringProperty\");\r\n    assertEquals(String.class, clazz, \"nestedDynaBean.stringProperty type\");\r\n    clazz = PropertyUtils.getPropertyType(bean, \"nestedDynaBean.nestedBean\");\r\n    assertEquals(TestBean.class, clazz, \"nestedDynaBean.nestedBean type\");\r\n    clazz = PropertyUtils.getPropertyType(bean, \"nestedDynaBean.nestedBean.nestedDynaBean\");\r\n    assertEquals(DynaBean.class, clazz, \"nestedDynaBean.nestedBean.nestedDynaBean type\");\r\n    clazz = PropertyUtils.getPropertyType(bean, \"nestedDynaBean.nestedBean.nestedDynaBean.stringProperty\");\r\n    assertEquals(String.class, clazz, \"nestedDynaBean.nestedBean.nestedDynaBean.stringPropert type\");\r\n    // test Null\r\n    clazz = PropertyUtils.getPropertyType(bean, \"nestedDynaBean.nullDynaBean\");\r\n    assertEquals(DynaBean.class, clazz, \"nestedDynaBean.nullDynaBean type\");\r\n    assertThrows(NestedNullException.class, () -> PropertyUtils.getPropertyType(bean, \"nestedDynaBean.nullDynaBean.foo\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\PropertyUtilsTest.java",
  "methodName" : "testGetPublicSubBean_of_PackageBean",
  "sourceCode" : "/**\r\n * Test accessing a public sub-bean of a package scope bean\r\n */\r\n@Test\r\nvoid testGetPublicSubBean_of_PackageBean() throws Exception {\r\n    final PublicSubBean bean = new PublicSubBean();\r\n    bean.setFoo(\"foo-start\");\r\n    bean.setBar(\"bar-start\");\r\n    Object result = null;\r\n    // Get Foo\r\n    result = PropertyUtils.getProperty(bean, \"foo\");\r\n    assertEquals(\"foo-start\", result, \"foo property\");\r\n    // Get Bar\r\n    result = PropertyUtils.getProperty(bean, \"bar\");\r\n    assertEquals(\"bar-start\", result, \"bar property\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\PropertyUtilsTest.java",
  "methodName" : "testGetReadMethodBasic",
  "sourceCode" : "/**\r\n * Test getting accessible property reader methods for a specified list of properties of our standard test bean.\r\n */\r\n@Test\r\nvoid testGetReadMethodBasic() throws Exception {\r\n    testGetReadMethod(bean, properties, TEST_BEAN_CLASS);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\PropertyUtilsTest.java",
  "methodName" : "testGetReadMethodPackageSubclass",
  "sourceCode" : "/**\r\n * Test getting accessible property reader methods for a specified list of properties of a package private subclass of our standard test bean.\r\n */\r\n@Test\r\nvoid testGetReadMethodPackageSubclass() throws Exception {\r\n    testGetReadMethod(beanPackageSubclass, properties, TEST_BEAN_CLASS);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\PropertyUtilsTest.java",
  "methodName" : "testGetReadMethodPublicInterface",
  "sourceCode" : "/**\r\n * Test getting accessible property reader methods for a specified list of properties that are declared either directly or via implemented interfaces.\r\n */\r\n@Test\r\nvoid testGetReadMethodPublicInterface() throws Exception {\r\n    // Properties \"bar\" and \"baz\" are visible via implemented interfaces\r\n    // (one direct and one indirect)\r\n    testGetReadMethod(beanPrivate, new String[] { \"bar\" }, PRIVATE_DIRECT_CLASS);\r\n    testGetReadMethod(beanPrivate, new String[] { \"baz\" }, PRIVATE_INDIRECT_CLASS);\r\n    // Properties \"bar\" and \"baz\" are visible via implemented interfaces\r\n    // (one direct and one indirect). The interface is implemented in\r\n    // a superclass\r\n    testGetReadMethod(beanPrivateSubclass, new String[] { \"bar\" }, PRIVATE_DIRECT_CLASS);\r\n    testGetReadMethod(beanPrivateSubclass, new String[] { \"baz\" }, PRIVATE_INDIRECT_CLASS);\r\n    // Property \"foo\" is not accessible because the underlying\r\n    // class has package scope\r\n    final PropertyDescriptor[] pd = PropertyUtils.getPropertyDescriptors(beanPrivate);\r\n    int n = -1;\r\n    for (int i = 0; i < pd.length; i++) {\r\n        if (\"foo\".equals(pd[i].getName())) {\r\n            n = i;\r\n            break;\r\n        }\r\n    }\r\n    assertTrue(n >= 0, \"Found foo descriptor\");\r\n    final Method reader = pd[n].getReadMethod();\r\n    assertNotNull(reader, \"Found foo read method\");\r\n    assertThrows(IllegalAccessException.class, () -> reader.invoke(beanPrivate, (Object[]) new Class<?>[0]));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\PropertyUtilsTest.java",
  "methodName" : "testGetReadMethodPublicSubclass",
  "sourceCode" : "/**\r\n * Test getting accessible property reader methods for a specified list of properties of a public subclass of our standard test bean.\r\n */\r\n@Test\r\nvoid testGetReadMethodPublicSubclass() throws Exception {\r\n    testGetReadMethod(beanPublicSubclass, properties, TEST_BEAN_CLASS);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\PropertyUtilsTest.java",
  "methodName" : "testGetSetInnerBean",
  "sourceCode" : "/**\r\n * Text case for setting properties on inner classes\r\n */\r\n@Test\r\nvoid testGetSetInnerBean() throws Exception {\r\n    final BeanWithInnerBean bean = new BeanWithInnerBean();\r\n    PropertyUtils.setProperty(bean, \"innerBean.fish(loiterTimer)\", \"5\");\r\n    String out = (String) PropertyUtils.getProperty(bean.getInnerBean(), \"fish(loiterTimer)\");\r\n    assertEquals(\"5\", out, \"(1) Inner class property set/get property failed.\");\r\n    out = (String) PropertyUtils.getProperty(bean, \"innerBean.fish(loiterTimer)\");\r\n    assertEquals(\"5\", out, \"(2) Inner class property set/get property failed.\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\PropertyUtilsTest.java",
  "methodName" : "testGetSetParentBean",
  "sourceCode" : "/**\r\n * Text case for setting properties on parent\r\n */\r\n@Test\r\nvoid testGetSetParentBean() throws Exception {\r\n    final SonOfAlphaBean bean = new SonOfAlphaBean(\"Roger\");\r\n    final String out = (String) PropertyUtils.getProperty(bean, \"name\");\r\n    assertEquals(\"Roger\", out, \"(1) Get/Set On Parent.\");\r\n    PropertyUtils.setProperty(bean, \"name\", \"abcd\");\r\n    assertEquals(\"abcd\", bean.getName(), \"(2) Get/Set On Parent.\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\PropertyUtilsTest.java",
  "methodName" : "testGetSimpleArguments",
  "sourceCode" : "/**\r\n * Corner cases on getSimpleProperty invalid arguments.\r\n */\r\n@Test\r\nvoid testGetSimpleArguments() {\r\n    assertThrows(NullPointerException.class, () -> PropertyUtils.getSimpleProperty(null, \"stringProperty\"));\r\n    assertThrows(NullPointerException.class, () -> PropertyUtils.getSimpleProperty(bean, null));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\PropertyUtilsTest.java",
  "methodName" : "testGetSimpleBoolean",
  "sourceCode" : "/**\r\n * Test getSimpleProperty on a boolean property.\r\n */\r\n@Test\r\nvoid testGetSimpleBoolean() throws Exception {\r\n    final Object value = PropertyUtils.getSimpleProperty(bean, \"booleanProperty\");\r\n    assertNotNull(value, \"Got a value\");\r\n    assertInstanceOf(Boolean.class, value, \"Got correct type\");\r\n    assertEquals(((Boolean) value).booleanValue(), bean.getBooleanProperty(), \"Got correct value\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\PropertyUtilsTest.java",
  "methodName" : "testGetSimpleDouble",
  "sourceCode" : "/**\r\n * Test getSimpleProperty on a double property.\r\n */\r\n@Test\r\nvoid testGetSimpleDouble() throws Exception {\r\n    final Object value = PropertyUtils.getSimpleProperty(bean, \"doubleProperty\");\r\n    assertNotNull(value, \"Got a value\");\r\n    assertInstanceOf(Double.class, value, \"Got correct type\");\r\n    assertEquals(((Double) value).doubleValue(), bean.getDoubleProperty(), 0.005, \"Got correct value\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\PropertyUtilsTest.java",
  "methodName" : "testGetSimpleFloat",
  "sourceCode" : "/**\r\n * Test getSimpleProperty on a float property.\r\n */\r\n@Test\r\nvoid testGetSimpleFloat() throws Exception {\r\n    final Object value = PropertyUtils.getSimpleProperty(bean, \"floatProperty\");\r\n    assertNotNull(value, \"Got a value\");\r\n    assertInstanceOf(Float.class, value, \"Got correct type\");\r\n    assertEquals(((Float) value).floatValue(), bean.getFloatProperty(), (float) 0.005, \"Got correct value\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\PropertyUtilsTest.java",
  "methodName" : "testGetSimpleIndexed",
  "sourceCode" : "/**\r\n * Negative test getSimpleProperty on an indexed property.\r\n */\r\n@Test\r\nvoid testGetSimpleIndexed() throws Exception {\r\n    assertThrows(IllegalArgumentException.class, () -> PropertyUtils.getSimpleProperty(bean, \"intIndexed[0]\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\PropertyUtilsTest.java",
  "methodName" : "testGetSimpleInt",
  "sourceCode" : "/**\r\n * Test getSimpleProperty on an int property.\r\n */\r\n@Test\r\nvoid testGetSimpleInt() throws Exception {\r\n    final Object value = PropertyUtils.getSimpleProperty(bean, \"intProperty\");\r\n    assertNotNull(value, \"Got a value\");\r\n    assertInstanceOf(Integer.class, value, \"Got correct type\");\r\n    assertEquals(((Integer) value).intValue(), bean.getIntProperty(), \"Got correct value\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\PropertyUtilsTest.java",
  "methodName" : "testGetSimpleLong",
  "sourceCode" : "/**\r\n * Test getSimpleProperty on a long property.\r\n */\r\n@Test\r\nvoid testGetSimpleLong() throws Exception {\r\n    final Object value = PropertyUtils.getSimpleProperty(bean, \"longProperty\");\r\n    assertNotNull(value, \"Got a value\");\r\n    assertInstanceOf(Long.class, value, \"Got correct type\");\r\n    assertEquals(((Long) value).longValue(), bean.getLongProperty(), \"Got correct value\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\PropertyUtilsTest.java",
  "methodName" : "testGetSimpleNested",
  "sourceCode" : "/**\r\n * Negative test getSimpleProperty on a nested property.\r\n */\r\n@Test\r\nvoid testGetSimpleNested() throws Exception {\r\n    assertThrows(IllegalArgumentException.class, () -> PropertyUtils.getSimpleProperty(bean, \"nested.stringProperty\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\PropertyUtilsTest.java",
  "methodName" : "testGetSimpleReadOnly",
  "sourceCode" : "/**\r\n * Test getSimpleProperty on a read-only String property.\r\n */\r\n@Test\r\nvoid testGetSimpleReadOnly() throws Exception {\r\n    final Object value = PropertyUtils.getSimpleProperty(bean, \"readOnlyProperty\");\r\n    assertNotNull(value, \"Got a value\");\r\n    assertInstanceOf(String.class, value, \"Got correct type\");\r\n    assertEquals((String) value, bean.getReadOnlyProperty(), \"Got correct value\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\PropertyUtilsTest.java",
  "methodName" : "testGetSimpleShort",
  "sourceCode" : "/**\r\n * Test getSimpleProperty on a short property.\r\n */\r\n@Test\r\nvoid testGetSimpleShort() throws Exception {\r\n    final Object value = PropertyUtils.getSimpleProperty(bean, \"shortProperty\");\r\n    assertNotNull(value, \"Got a value\");\r\n    assertInstanceOf(Short.class, value, \"Got correct type\");\r\n    assertEquals(((Short) value).shortValue(), bean.getShortProperty(), \"Got correct value\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\PropertyUtilsTest.java",
  "methodName" : "testGetSimpleString",
  "sourceCode" : "/**\r\n * Test getSimpleProperty on a String property.\r\n */\r\n@Test\r\nvoid testGetSimpleString() throws Exception {\r\n    final Object value = PropertyUtils.getSimpleProperty(bean, \"stringProperty\");\r\n    assertNotNull(value, \"Got a value\");\r\n    assertInstanceOf(String.class, value, \"Got correct type\");\r\n    assertEquals((String) value, bean.getStringProperty(), \"Got correct value\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\PropertyUtilsTest.java",
  "methodName" : "testGetSimpleUnknown",
  "sourceCode" : "/**\r\n * Negative test getSimpleProperty on an unknown property.\r\n */\r\n@Test\r\nvoid testGetSimpleUnknown() throws Exception {\r\n    assertThrows(NoSuchMethodException.class, () -> PropertyUtils.getSimpleProperty(bean, \"unknown\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\PropertyUtilsTest.java",
  "methodName" : "testGetSimpleWriteOnly",
  "sourceCode" : "/**\r\n * Test getSimpleProperty on a write-only String property.\r\n */\r\n@Test\r\nvoid testGetSimpleWriteOnly() throws Exception {\r\n    assertThrows(NoSuchMethodException.class, () -> PropertyUtils.getSimpleProperty(bean, \"writeOnlyProperty\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\PropertyUtilsTest.java",
  "methodName" : "testGetWriteMethodBasic",
  "sourceCode" : "/**\r\n * Test getting accessible property writer methods for a specified list of properties of our standard test bean.\r\n */\r\n@Test\r\nvoid testGetWriteMethodBasic() {\r\n    testGetWriteMethod(bean, properties, TEST_BEAN_CLASS);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\PropertyUtilsTest.java",
  "methodName" : "testGetWriteMethodPackageSubclass",
  "sourceCode" : "/**\r\n * Test getting accessible property writer methods for a specified list of properties of a package private subclass of our standard test bean.\r\n */\r\n@Test\r\nvoid testGetWriteMethodPackageSubclass() {\r\n    testGetWriteMethod(beanPackageSubclass, properties, TEST_BEAN_CLASS);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\PropertyUtilsTest.java",
  "methodName" : "testGetWriteMethodPublicSubclass",
  "sourceCode" : "/**\r\n * Test getting accessible property writer methods for a specified list of properties of a public subclass of our standard test bean.\r\n */\r\n@Test\r\nvoid testGetWriteMethodPublicSubclass() {\r\n    testGetWriteMethod(beanPublicSubclass, properties, TEST_BEAN_CLASS);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\PropertyUtilsTest.java",
  "methodName" : "testIsReadable",
  "sourceCode" : "/**\r\n * Test isReadable() method.\r\n */\r\n@Test\r\nvoid testIsReadable() throws Exception {\r\n    String property = null;\r\n    property = \"stringProperty\";\r\n    assertTrue(PropertyUtils.isReadable(bean, property), \"Property \" + property + \" isReadable expected TRUE\");\r\n    property = \"stringIndexed\";\r\n    assertTrue(PropertyUtils.isReadable(bean, property), \"Property \" + property + \" isReadable expected TRUE\");\r\n    property = \"mappedProperty\";\r\n    assertTrue(PropertyUtils.isReadable(bean, property), \"Property \" + property + \" isReadable expected TRUE\");\r\n    property = \"nestedDynaBean\";\r\n    assertTrue(PropertyUtils.isReadable(bean, property), \"Property \" + property + \" isReadable expected TRUE\");\r\n    property = \"nestedDynaBean.stringProperty\";\r\n    assertTrue(PropertyUtils.isReadable(bean, property), \"Property \" + property + \" isReadable expected TRUE\");\r\n    property = \"nestedDynaBean.nestedBean\";\r\n    assertTrue(PropertyUtils.isReadable(bean, property), \"Property \" + property + \" isReadable expected TRUE\");\r\n    property = \"nestedDynaBean.nestedBean.nestedDynaBean\";\r\n    assertTrue(PropertyUtils.isReadable(bean, property), \"Property \" + property + \" isReadable expected TRUE\");\r\n    property = \"nestedDynaBean.nestedBean.nestedDynaBean.stringProperty\";\r\n    assertTrue(PropertyUtils.isReadable(bean, property), \"Property \" + property + \" isReadable expected TRUE\");\r\n    property = \"nestedDynaBean.nullDynaBean\";\r\n    assertTrue(PropertyUtils.isReadable(bean, property), \"Property \" + property + \" isReadable expected TRUE\");\r\n    assertThrows(NestedNullException.class, () -> PropertyUtils.isReadable(bean, \"nestedDynaBean.nullDynaBean.foo\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\PropertyUtilsTest.java",
  "methodName" : "testIsWriteable",
  "sourceCode" : "/**\r\n * Test isWriteable() method.\r\n */\r\n@Test\r\nvoid testIsWriteable() throws Exception {\r\n    String property = null;\r\n    property = \"stringProperty\";\r\n    assertTrue(PropertyUtils.isWriteable(bean, property), \"Property \" + property + \" isWriteable expected TRUE\");\r\n    property = \"stringIndexed\";\r\n    assertTrue(PropertyUtils.isWriteable(bean, property), \"Property \" + property + \" isWriteable expected TRUE\");\r\n    property = \"mappedProperty\";\r\n    assertTrue(PropertyUtils.isWriteable(bean, property), \"Property \" + property + \" isWriteable expected TRUE\");\r\n    property = \"nestedDynaBean\";\r\n    assertTrue(PropertyUtils.isWriteable(bean, property), \"Property \" + property + \" isWriteable expected TRUE\");\r\n    property = \"nestedDynaBean.stringProperty\";\r\n    assertTrue(PropertyUtils.isWriteable(bean, property), \"Property \" + property + \" isWriteable expected TRUE\");\r\n    property = \"nestedDynaBean.nestedBean\";\r\n    assertTrue(PropertyUtils.isWriteable(bean, property), \"Property \" + property + \" isWriteable expected TRUE\");\r\n    property = \"nestedDynaBean.nestedBean.nestedDynaBean\";\r\n    assertTrue(PropertyUtils.isWriteable(bean, property), \"Property \" + property + \" isWriteable expected TRUE\");\r\n    property = \"nestedDynaBean.nestedBean.nestedDynaBean.stringProperty\";\r\n    assertTrue(PropertyUtils.isWriteable(bean, property), \"Property \" + property + \" isWriteable expected TRUE\");\r\n    property = \"nestedDynaBean.nullDynaBean\";\r\n    assertTrue(PropertyUtils.isWriteable(bean, property), \"Property \" + property + \" isWriteable expected TRUE\");\r\n    assertThrows(NestedNullException.class, () -> PropertyUtils.isWriteable(bean, \"nestedDynaBean.nullDynaBean.foo\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\PropertyUtilsTest.java",
  "methodName" : "testMapExtensionCustom",
  "sourceCode" : "/**\r\n * This tests to see that it is possible to subclass PropertyUtilsBean and change the behavior of setNestedProperty/getNestedProperty when dealing with\r\n * objects that implement Map.\r\n */\r\n@Test\r\nvoid testMapExtensionCustom() throws Exception {\r\n    final PropsFirstPropertyUtilsBean utilsBean = new PropsFirstPropertyUtilsBean();\r\n    final ExtendMapBean bean = new ExtendMapBean();\r\n    // hardly worth testing this, really :-)\r\n    bean.setUnusuallyNamedProperty(\"bean value\");\r\n    assertEquals(\"bean value\", bean.getUnusuallyNamedProperty(), \"Set property direct failed\");\r\n    // setSimpleProperty should affect the simple property\r\n    utilsBean.setSimpleProperty(bean, \"unusuallyNamedProperty\", \"new value\");\r\n    assertEquals(\"new value\", bean.getUnusuallyNamedProperty(), \"Set property on map failed (1)\");\r\n    // setNestedProperty with setter should affect the simple property\r\n    // getNestedProperty with getter should obtain the simple property\r\n    utilsBean.setProperty(bean, \"unusuallyNamedProperty\", \"next value\");\r\n    assertEquals(\"next value\", bean.getUnusuallyNamedProperty(), \"Set property on map failed (2)\");\r\n    assertEquals(\"next value\", utilsBean.getNestedProperty(bean, \"unusuallyNamedProperty\"), \"setNestedProperty on non-simple property failed\");\r\n    // setting property without setter should update the map\r\n    // getting property without setter should fetch from the map\r\n    utilsBean.setProperty(bean, \"mapProperty\", \"value1\");\r\n    assertEquals(\"value1\", utilsBean.getNestedProperty(bean, \"mapProperty\"), \"setNestedProperty on non-simple property failed\");\r\n    final HashMap<String, Object> myMap = new HashMap<>();\r\n    myMap.put(\"thebean\", bean);\r\n    utilsBean.getNestedProperty(myMap, \"thebean.mapitem\");\r\n    utilsBean.getNestedProperty(myMap, \"thebean(mapitem)\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\PropertyUtilsTest.java",
  "methodName" : "testMapExtensionDefault",
  "sourceCode" : "/**\r\n * This tests to see that classes that implement Map always have their custom properties ignored.\r\n * <p>\r\n * Note that this behavior has changed several times over past releases of beanutils, breaking backwards compatibility each time. Here's hoping that the\r\n * current 1.7.1 release is the last time this behavior changes!\r\n */\r\n@Test\r\nvoid testMapExtensionDefault() throws Exception {\r\n    final ExtendMapBean bean = new ExtendMapBean();\r\n    // setting property direct should work, and not affect map\r\n    bean.setUnusuallyNamedProperty(\"bean value\");\r\n    assertEquals(\"bean value\", bean.getUnusuallyNamedProperty(), \"Set property direct failed\");\r\n    assertNull(PropertyUtils.getNestedProperty(bean, \"unusuallyNamedProperty\"), \"Get on unset map property failed\");\r\n    // setting simple property should call the setter method only, and not\r\n    // affect the map.\r\n    PropertyUtils.setSimpleProperty(bean, \"unusuallyNamedProperty\", \"new value\");\r\n    assertEquals(\"new value\", bean.getUnusuallyNamedProperty(), \"Set property on map failed (1)\");\r\n    assertNull(PropertyUtils.getNestedProperty(bean, \"unusuallyNamedProperty\"), \"Get on unset map property failed\");\r\n    // setting via setNestedProperty should affect the map only, and not\r\n    // call the setter method.\r\n    PropertyUtils.setProperty(bean, \"unusuallyNamedProperty\", \"next value\");\r\n    assertEquals(\"next value\", PropertyUtils.getNestedProperty(bean, \"unusuallyNamedProperty\"), \"setNestedProperty on map not visible to getNestedProperty\");\r\n    assertEquals(\"new value\", bean.getUnusuallyNamedProperty(), \"Set nested property on map unexpected affected simple property\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\PropertyUtilsTest.java",
  "methodName" : "testMappedPropertyType",
  "sourceCode" : "/**\r\n * Test the mappedPropertyType of MappedPropertyDescriptor.\r\n */\r\n@Test\r\nvoid testMappedPropertyType() throws Exception {\r\n    MappedPropertyDescriptor desc;\r\n    // Check a String property\r\n    desc = (MappedPropertyDescriptor) PropertyUtils.getPropertyDescriptor(bean, \"mappedProperty\");\r\n    assertEquals(String.class, desc.getMappedPropertyType());\r\n    // Check an int property\r\n    desc = (MappedPropertyDescriptor) PropertyUtils.getPropertyDescriptor(bean, \"mappedIntProperty\");\r\n    assertEquals(Integer.TYPE, desc.getMappedPropertyType());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\PropertyUtilsTest.java",
  "methodName" : "testNestedPropertyKeyOrIndexOnBeanImplementingMap",
  "sourceCode" : "/**\r\n * There is an issue in setNestedProperty/getNestedProperty when the target bean is a map and the name string requests mapped or indexed operations on a\r\n * field. These are not supported for fields of a Map, but it's an easy mistake to make and this test case ensures that an appropriate exception is thrown\r\n * when a user does this.\r\n * <p>\r\n * The problem is with passing strings of form \"a(b)\" or \"a[3]\" to setNestedProperty or getNestedProperty when the target bean they are applied to\r\n * implements Map. These strings are actually requesting \"the result of calling mapped method a on the target object with a parameter of b\" or \"the result\r\n * of calling indexed method a on the target object with a parameter of 3\". And these requests are not valid when the target is a Map as a Map only supports\r\n * calling get(fieldName) or put(fieldName), neither of which can be further indexed with a string or an integer.\r\n * <p>\r\n * However it is likely that some users will assume that \"a[3]\" when applied to a map will be equivalent to (map.get(\"a\"))[3] with the appropriate\r\n * typecasting, or for \"a(b)\" to be equivalent to map.get(\"a\").get(\"b\").\r\n * <p>\r\n * Here we verify that an exception is thrown if the user makes this mistake.\r\n */\r\n@Test\r\nvoid testNestedPropertyKeyOrIndexOnBeanImplementingMap() throws Exception {\r\n    final HashMap<String, Object> map = new HashMap<>();\r\n    final HashMap<String, Object> submap = new HashMap<>();\r\n    final BetaBean betaBean1 = new BetaBean(\"test1\");\r\n    final BetaBean betaBean2 = new BetaBean(\"test2\");\r\n    // map.put(\"submap\", submap)\r\n    PropertyUtils.setNestedProperty(map, \"submap\", submap);\r\n    // map.get(\"submap\").put(\"beta1\", betaBean1)\r\n    PropertyUtils.setNestedProperty(map, \"submap.beta1\", betaBean1);\r\n    assertEquals(\"submap\", keysToString(map), \"Unexpected keys in map\");\r\n    assertEquals(\"beta1\", keysToString(submap), \"Unexpected keys in submap\");\r\n    // One would expect that the command below would be equivalent to\r\n    // Map m = (Map) map.get(\"submap\");\r\n    // m.put(\"beta2\", betaBean2)\r\n    // However this isn't how javabeans property methods work. A map\r\n    // only effectively has \"simple\" properties, even when the\r\n    // returned object is a Map or Array.\r\n    final IllegalArgumentException e1 = assertThrows(IllegalArgumentException.class, () -> PropertyUtils.setNestedProperty(map, \"submap(beta2)\", betaBean2));\r\n    // What, no exception? In that case, setNestedProperties has\r\n    // probably just tried to do\r\n    // map.set(\"submap(beta2)\", betaBean2)\r\n    // which is almost certainly not what the used expected. This is\r\n    // what BeanUtils 1.5.0 to 1.7.1 did....\r\n    // ok, getting an exception was expected. As it is of a generic\r\n    // type, let's check the message string to make sure it really\r\n    // was caused by the issue we expected.\r\n    assertTrue(e1.getMessage().contains(\"Indexed or mapped properties are not supported\"), \"Unexpected exception message\");\r\n    // One would expect that \"submap[3]\" would be equivalent to\r\n    // Object[] objects = (Object[]) map.get(\"submap\");\r\n    // return objects[3];\r\n    // However this isn't how javabeans property methods work. A map\r\n    // only effectively has \"simple\" properties, even when the\r\n    // returned object is a Map or Array.\r\n    final IllegalArgumentException e2 = assertThrows(IllegalArgumentException.class, () -> PropertyUtils.getNestedProperty(map, \"submap[3]\"));\r\n    // What, no exception? In that case, getNestedProperties has\r\n    // probably just tried to do\r\n    // map.get(\"submap[3]\")\r\n    // which is almost certainly not what the used expected. This is\r\n    // what BeanUtils 1.5.0 to 1.7.1 did....\r\n    // ok, getting an exception was expected. As it is of a generic\r\n    // type, let's check the message string to make sure it really\r\n    // was caused by the issue we expected.\r\n    final int index = e2.getMessage().indexOf(\"Indexed or mapped properties are not supported\");\r\n    assertTrue(index >= 0, \"Unexpected exception message\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\PropertyUtilsTest.java",
  "methodName" : "testNestedWithIndex",
  "sourceCode" : "@Test\r\nvoid testNestedWithIndex() throws Exception {\r\n    final NestedTestBean nestedBean = new NestedTestBean(\"base\");\r\n    nestedBean.init();\r\n    nestedBean.getSimpleBeanProperty().init();\r\n    NestedTestBean // test first calling properties on indexed beans\r\n    value = (NestedTestBean) PropertyUtils.getProperty(nestedBean, \"indexedProperty[0]\");\r\n    assertEquals(\"Bean@0\", value.getName(), \"Cannot get simple index(1)\");\r\n    assertEquals(\"NOT SET\", value.getTestString(), \"Bug in NestedTestBean\");\r\n    value = (NestedTestBean) PropertyUtils.getProperty(nestedBean, \"indexedProperty[1]\");\r\n    assertEquals(\"Bean@1\", value.getName(), \"Cannot get simple index(1)\");\r\n    assertEquals(\"NOT SET\", value.getTestString(), \"Bug in NestedTestBean\");\r\n    String prop = (String) PropertyUtils.getProperty(nestedBean, \"indexedProperty[0].testString\");\r\n    assertEquals(\"NOT SET\", prop, \"Get property on indexes failed (1)\");\r\n    prop = (String) PropertyUtils.getProperty(nestedBean, \"indexedProperty[1].testString\");\r\n    assertEquals(\"NOT SET\", prop, \"Get property on indexes failed (2)\");\r\n    PropertyUtils.setProperty(nestedBean, \"indexedProperty[0].testString\", \"Test#1\");\r\n    assertEquals(\"Test#1\", nestedBean.getIndexedProperty(0).getTestString(), \"Cannot set property on indexed bean (1)\");\r\n    PropertyUtils.setProperty(nestedBean, \"indexedProperty[1].testString\", \"Test#2\");\r\n    assertEquals(\"Test#2\", nestedBean.getIndexedProperty(1).getTestString(), \"Cannot set property on indexed bean (2)\");\r\n    // test first calling indexed properties on a simple property\r\n    value = (NestedTestBean) PropertyUtils.getProperty(nestedBean, \"simpleBeanProperty\");\r\n    assertEquals(\"Simple Property Bean\", value.getName(), \"Cannot get simple bean\");\r\n    assertEquals(\"NOT SET\", value.getTestString(), \"Bug in NestedTestBean\");\r\n    value = (NestedTestBean) PropertyUtils.getProperty(nestedBean, \"simpleBeanProperty.indexedProperty[3]\");\r\n    assertEquals(\"Bean@3\", value.getName(), \"Cannot get index property on property\");\r\n    assertEquals(\"NOT SET\", value.getTestString(), \"Bug in NestedTestBean\");\r\n    PropertyUtils.setProperty(nestedBean, \"simpleBeanProperty.indexedProperty[3].testString\", \"Test#3\");\r\n    assertEquals(\"Test#3\", nestedBean.getSimpleBeanProperty().getIndexedProperty(3).getTestString(), \"Cannot set property on indexed property on property\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\PropertyUtilsTest.java",
  "methodName" : "testRemoveBeanIntrospector",
  "sourceCode" : "/**\r\n * Tests whether a BeanIntrospector can be removed.\r\n */\r\n@Test\r\nvoid testRemoveBeanIntrospector() {\r\n    assertTrue(PropertyUtils.removeBeanIntrospector(DefaultBeanIntrospector.INSTANCE), \"Wrong result\");\r\n    final PropertyDescriptor[] desc = PropertyUtils.getPropertyDescriptors(AlphaBean.class);\r\n    assertEquals(0, desc.length, \"Got descriptors\");\r\n    PropertyUtils.addBeanIntrospector(DefaultBeanIntrospector.INSTANCE);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\PropertyUtilsTest.java",
  "methodName" : "testResetBeanIntrospectors",
  "sourceCode" : "/**\r\n * Tests whether a reset of the registered BeanIntrospectors can be performed.\r\n */\r\n@Test\r\nvoid testResetBeanIntrospectors() {\r\n    assertTrue(PropertyUtils.removeBeanIntrospector(DefaultBeanIntrospector.INSTANCE), \"Wrong result\");\r\n    PropertyUtils.resetBeanIntrospectors();\r\n    final PropertyDescriptor[] desc = PropertyUtils.getPropertyDescriptors(AlphaBean.class);\r\n    assertTrue(desc.length > 0, \"Got no descriptors\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\PropertyUtilsTest.java",
  "methodName" : "testSetIndexedArguments",
  "sourceCode" : "/**\r\n * Corner cases on setIndexedProperty invalid arguments.\r\n */\r\n@Test\r\nvoid testSetIndexedArguments() {\r\n    // Use explicit index argument\r\n    assertThrows(NullPointerException.class, () -> PropertyUtils.setIndexedProperty(null, \"intArray\", 0, Integer.valueOf(1)));\r\n    assertThrows(NullPointerException.class, () -> PropertyUtils.setIndexedProperty(bean, null, 0, Integer.valueOf(1)));\r\n    // Use index expression\r\n    assertThrows(NullPointerException.class, () -> PropertyUtils.setIndexedProperty(null, \"intArray[0]\", Integer.valueOf(1)));\r\n    assertThrows(NoSuchMethodException.class, () -> PropertyUtils.setIndexedProperty(bean, \"[0]\", Integer.valueOf(1)));\r\n    assertThrows(IllegalArgumentException.class, () -> PropertyUtils.setIndexedProperty(bean, \"intArray\", Integer.valueOf(1)));\r\n    // Use explicit index argument\r\n    assertThrows(NullPointerException.class, () -> PropertyUtils.setIndexedProperty(null, \"intIndexed\", 0, Integer.valueOf(1)));\r\n    assertThrows(NullPointerException.class, () -> PropertyUtils.setIndexedProperty(bean, null, 0, Integer.valueOf(1)));\r\n    // Use index expression\r\n    assertThrows(NullPointerException.class, () -> PropertyUtils.setIndexedProperty(null, \"intIndexed[0]\", Integer.valueOf(1)));\r\n    assertThrows(NoSuchMethodException.class, () -> PropertyUtils.setIndexedProperty(bean, \"[0]\", Integer.valueOf(1)));\r\n    assertThrows(IllegalArgumentException.class, () -> PropertyUtils.setIndexedProperty(bean, \"intIndexed\", Integer.valueOf(1)));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\PropertyUtilsTest.java",
  "methodName" : "testSetIndexedArray",
  "sourceCode" : "/**\r\n * Test setting an indexed value out of a multi-dimensional array\r\n */\r\n@Test\r\nvoid testSetIndexedArray() throws Exception {\r\n    final String[] firstArray = { \"FIRST-1\", \"FIRST-2\", \"FIRST-3\" };\r\n    final String[] secondArray = { \"SECOND-1\", \"SECOND-2\", \"SECOND-3\", \"SECOND-4\" };\r\n    final String[][] mainArray = { firstArray, secondArray };\r\n    final TestBean bean = new TestBean(mainArray);\r\n    assertEquals(\"SECOND-3\", bean.getString2dArray(1)[2], \"BEFORE\");\r\n    PropertyUtils.setProperty(bean, \"string2dArray[1][2]\", \"SECOND-3-UPDATED\");\r\n    assertEquals(\"SECOND-3-UPDATED\", bean.getString2dArray(1)[2], \"AFTER\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\PropertyUtilsTest.java",
  "methodName" : "testSetIndexedList",
  "sourceCode" : "/**\r\n * Test setting an indexed value out of List of Lists\r\n */\r\n@Test\r\nvoid testSetIndexedList() throws Exception {\r\n    final String[] firstArray = { \"FIRST-1\", \"FIRST-2\", \"FIRST-3\" };\r\n    final String[] secondArray = { \"SECOND-1\", \"SECOND-2\", \"SECOND-3\", \"SECOND-4\" };\r\n    final List<Object> mainList = new ArrayList<>();\r\n    mainList.add(Arrays.asList(firstArray));\r\n    mainList.add(Arrays.asList(secondArray));\r\n    final TestBean bean = new TestBean(mainList);\r\n    assertEquals(\"SECOND-4\", ((List<?>) bean.getListIndexed().get(1)).get(3), \"BEFORE\");\r\n    PropertyUtils.setProperty(bean, \"listIndexed[1][3]\", \"SECOND-4-UPDATED\");\r\n    assertEquals(\"SECOND-4-UPDATED\", ((List<?>) bean.getListIndexed().get(1)).get(3), \"AFTER\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\PropertyUtilsTest.java",
  "methodName" : "testSetIndexedMap",
  "sourceCode" : "/**\r\n * Test setting a value out of a mapped Map\r\n */\r\n@Test\r\nvoid testSetIndexedMap() throws Exception {\r\n    final Map<String, Object> firstMap = new HashMap<>();\r\n    firstMap.put(\"FIRST-KEY-1\", \"FIRST-VALUE-1\");\r\n    firstMap.put(\"FIRST-KEY-2\", \"FIRST-VALUE-2\");\r\n    final Map<String, Object> secondMap = new HashMap<>();\r\n    secondMap.put(\"SECOND-KEY-1\", \"SECOND-VALUE-1\");\r\n    secondMap.put(\"SECOND-KEY-2\", \"SECOND-VALUE-2\");\r\n    final List<Object> mainList = new ArrayList<>();\r\n    mainList.add(firstMap);\r\n    mainList.add(secondMap);\r\n    final TestBean bean = new TestBean(mainList);\r\n    assertEquals(null, ((Map<?, ?>) bean.getListIndexed().get(0)).get(\"FIRST-NEW-KEY\"), \"BEFORE\");\r\n    assertEquals(\"SECOND-VALUE-1\", ((Map<?, ?>) bean.getListIndexed().get(1)).get(\"SECOND-KEY-1\"), \"BEFORE\");\r\n    PropertyUtils.setProperty(bean, \"listIndexed[0](FIRST-NEW-KEY)\", \"FIRST-NEW-VALUE\");\r\n    PropertyUtils.setProperty(bean, \"listIndexed[1](SECOND-KEY-1)\", \"SECOND-VALUE-1-UPDATED\");\r\n    assertEquals(\"FIRST-NEW-VALUE\", ((Map<?, ?>) bean.getListIndexed().get(0)).get(\"FIRST-NEW-KEY\"), \"BEFORE\");\r\n    assertEquals(\"SECOND-VALUE-1-UPDATED\", ((Map<?, ?>) bean.getListIndexed().get(1)).get(\"SECOND-KEY-1\"), \"AFTER\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\PropertyUtilsTest.java",
  "methodName" : "testSetIndexedValues",
  "sourceCode" : "/**\r\n * Positive and negative tests on setIndexedProperty valid arguments.\r\n */\r\n@Test\r\nvoid testSetIndexedValues() throws Exception {\r\n    Object value = null;\r\n    // Use explicit index argument\r\n    PropertyUtils.setIndexedProperty(bean, \"dupProperty\", 0, \"New 0\");\r\n    value = PropertyUtils.getIndexedProperty(bean, \"dupProperty\", 0);\r\n    assertNotNull(value, \"Returned new value 0\");\r\n    assertInstanceOf(String.class, value, \"Returned String new value 0\");\r\n    assertEquals(\"New 0\", (String) value, \"Returned correct new value 0\");\r\n    PropertyUtils.setIndexedProperty(bean, \"intArray\", 0, Integer.valueOf(1));\r\n    value = PropertyUtils.getIndexedProperty(bean, \"intArray\", 0);\r\n    assertNotNull(value, \"Returned new value 0\");\r\n    assertInstanceOf(Integer.class, value, \"Returned Integer new value 0\");\r\n    assertEquals(1, ((Integer) value).intValue(), \"Returned correct new value 0\");\r\n    PropertyUtils.setIndexedProperty(bean, \"intIndexed\", 1, Integer.valueOf(11));\r\n    value = PropertyUtils.getIndexedProperty(bean, \"intIndexed\", 1);\r\n    assertNotNull(value, \"Returned new value 1\");\r\n    assertInstanceOf(Integer.class, value, \"Returned Integer new value 1\");\r\n    assertEquals(11, ((Integer) value).intValue(), \"Returned correct new value 1\");\r\n    PropertyUtils.setIndexedProperty(bean, \"listIndexed\", 2, \"New Value 2\");\r\n    value = PropertyUtils.getIndexedProperty(bean, \"listIndexed\", 2);\r\n    assertNotNull(value, \"Returned new value 2\");\r\n    assertInstanceOf(String.class, value, \"Returned String new value 2\");\r\n    assertEquals(\"New Value 2\", (String) value, \"Returned correct new value 2\");\r\n    PropertyUtils.setIndexedProperty(bean, \"stringArray\", 2, \"New Value 2\");\r\n    value = PropertyUtils.getIndexedProperty(bean, \"stringArray\", 2);\r\n    assertNotNull(value, \"Returned new value 2\");\r\n    assertInstanceOf(String.class, value, \"Returned String new value 2\");\r\n    assertEquals(\"New Value 2\", (String) value, \"Returned correct new value 2\");\r\n    PropertyUtils.setIndexedProperty(bean, \"stringArray\", 3, \"New Value 3\");\r\n    value = PropertyUtils.getIndexedProperty(bean, \"stringArray\", 3);\r\n    assertNotNull(value, \"Returned new value 3\");\r\n    assertInstanceOf(String.class, value, \"Returned String new value 3\");\r\n    assertEquals(\"New Value 3\", (String) value, \"Returned correct new value 3\");\r\n    // Use index expression\r\n    PropertyUtils.setIndexedProperty(bean, \"dupProperty[4]\", \"New 4\");\r\n    value = PropertyUtils.getIndexedProperty(bean, \"dupProperty[4]\");\r\n    assertNotNull(value, \"Returned new value 4\");\r\n    assertInstanceOf(String.class, value, \"Returned String new value 4\");\r\n    assertEquals(\"New 4\", (String) value, \"Returned correct new value 4\");\r\n    PropertyUtils.setIndexedProperty(bean, \"intArray[4]\", Integer.valueOf(1));\r\n    value = PropertyUtils.getIndexedProperty(bean, \"intArray[4]\");\r\n    assertNotNull(value, \"Returned new value 4\");\r\n    assertInstanceOf(Integer.class, value, \"Returned Integer new value 4\");\r\n    assertEquals(1, ((Integer) value).intValue(), \"Returned correct new value 4\");\r\n    PropertyUtils.setIndexedProperty(bean, \"intIndexed[3]\", Integer.valueOf(11));\r\n    value = PropertyUtils.getIndexedProperty(bean, \"intIndexed[3]\");\r\n    assertNotNull(value, \"Returned new value 5\");\r\n    assertInstanceOf(Integer.class, value, \"Returned Integer new value 5\");\r\n    assertEquals(11, ((Integer) value).intValue(), \"Returned correct new value 5\");\r\n    PropertyUtils.setIndexedProperty(bean, \"listIndexed[1]\", \"New Value 2\");\r\n    value = PropertyUtils.getIndexedProperty(bean, \"listIndexed[1]\");\r\n    assertNotNull(value, \"Returned new value 6\");\r\n    assertInstanceOf(String.class, value, \"Returned String new value 6\");\r\n    assertEquals(\"New Value 2\", (String) value, \"Returned correct new value 6\");\r\n    PropertyUtils.setIndexedProperty(bean, \"stringArray[1]\", \"New Value 2\");\r\n    value = PropertyUtils.getIndexedProperty(bean, \"stringArray[2]\");\r\n    assertNotNull(value, \"Returned new value 6\");\r\n    assertInstanceOf(String.class, value, \"Returned String new value 6\");\r\n    assertEquals(\"New Value 2\", (String) value, \"Returned correct new value 6\");\r\n    PropertyUtils.setIndexedProperty(bean, \"stringArray[0]\", \"New Value 3\");\r\n    value = PropertyUtils.getIndexedProperty(bean, \"stringArray[0]\");\r\n    assertNotNull(value, \"Returned new value 7\");\r\n    assertInstanceOf(String.class, value, \"Returned String new value 7\");\r\n    assertEquals(\"New Value 3\", (String) value, \"Returned correct new value 7\");\r\n    // Index out of bounds tests\r\n    assertThrows(ArrayIndexOutOfBoundsException.class, () -> PropertyUtils.setIndexedProperty(bean, \"dupProperty\", -1, \"New -1\"));\r\n    assertThrows(ArrayIndexOutOfBoundsException.class, () -> PropertyUtils.setIndexedProperty(bean, \"dupProperty\", 5, \"New 5\"));\r\n    assertThrows(ArrayIndexOutOfBoundsException.class, () -> PropertyUtils.setIndexedProperty(bean, \"intArray\", -1, Integer.valueOf(0)));\r\n    assertThrows(ArrayIndexOutOfBoundsException.class, () -> PropertyUtils.setIndexedProperty(bean, \"intArray\", 5, Integer.valueOf(0)));\r\n    assertThrows(ArrayIndexOutOfBoundsException.class, () -> PropertyUtils.setIndexedProperty(bean, \"intIndexed\", -1, Integer.valueOf(0)));\r\n    assertThrows(ArrayIndexOutOfBoundsException.class, () -> PropertyUtils.setIndexedProperty(bean, \"intIndexed\", 5, Integer.valueOf(0)));\r\n    assertThrows(IndexOutOfBoundsException.class, () -> PropertyUtils.setIndexedProperty(bean, \"listIndexed\", 5, \"New String\"));\r\n    assertThrows(IndexOutOfBoundsException.class, () -> PropertyUtils.setIndexedProperty(bean, \"listIndexed\", -1, \"New String\"));\r\n    assertThrows(ArrayIndexOutOfBoundsException.class, () -> PropertyUtils.setIndexedProperty(bean, \"stringArray\", -1, \"New String\"));\r\n    assertThrows(ArrayIndexOutOfBoundsException.class, () -> PropertyUtils.setIndexedProperty(bean, \"stringArray\", 5, \"New String\"));\r\n    assertThrows(ArrayIndexOutOfBoundsException.class, () -> PropertyUtils.setIndexedProperty(bean, \"stringIndexed\", -1, \"New String\"));\r\n    assertThrows(ArrayIndexOutOfBoundsException.class, () -> PropertyUtils.setIndexedProperty(bean, \"stringIndexed\", 5, \"New String\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\PropertyUtilsTest.java",
  "methodName" : "testSetMappedArguments",
  "sourceCode" : "/**\r\n * Corner cases on getMappedProperty invalid arguments.\r\n */\r\n@Test\r\nvoid testSetMappedArguments() {\r\n    // Use explicit key argument\r\n    assertThrows(NullPointerException.class, () -> PropertyUtils.setMappedProperty(null, \"mappedProperty\", \"First Key\", \"First Value\"));\r\n    assertThrows(NullPointerException.class, () -> PropertyUtils.setMappedProperty(bean, null, \"First Key\", \"First Value\"));\r\n    assertThrows(NullPointerException.class, () -> PropertyUtils.setMappedProperty(bean, \"mappedProperty\", null, \"First Value\"));\r\n    // Use key expression\r\n    assertThrows(NullPointerException.class, () -> PropertyUtils.setMappedProperty(null, \"mappedProperty(First Key)\", \"First Value\"));\r\n    assertThrows(NoSuchMethodException.class, () -> PropertyUtils.setMappedProperty(bean, \"(Second Key)\", \"Second Value\"));\r\n    assertThrows(IllegalArgumentException.class, () -> PropertyUtils.setMappedProperty(bean, \"mappedProperty\", \"Third Value\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\PropertyUtilsTest.java",
  "methodName" : "testSetMappedArray",
  "sourceCode" : "/**\r\n * Test setting an indexed value out of a mapped array\r\n */\r\n@Test\r\nvoid testSetMappedArray() throws Exception {\r\n    final TestBean bean = new TestBean();\r\n    final String[] array = { \"abc\", \"def\", \"ghi\" };\r\n    bean.getMapProperty().put(\"mappedArray\", array);\r\n    assertEquals(\"def\", ((String[]) bean.getMapProperty().get(\"mappedArray\"))[1], \"BEFORE\");\r\n    PropertyUtils.setProperty(bean, \"mapProperty(mappedArray)[1]\", \"DEF-UPDATED\");\r\n    assertEquals(\"DEF-UPDATED\", ((String[]) bean.getMapProperty().get(\"mappedArray\"))[1], \"AFTER\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\PropertyUtilsTest.java",
  "methodName" : "testSetMappedList",
  "sourceCode" : "/**\r\n * Test setting an indexed value out of a mapped List\r\n */\r\n@Test\r\nvoid testSetMappedList() throws Exception {\r\n    final TestBean bean = new TestBean();\r\n    final List<Object> list = new ArrayList<>();\r\n    list.add(\"klm\");\r\n    list.add(\"nop\");\r\n    list.add(\"qrs\");\r\n    bean.getMapProperty().put(\"mappedList\", list);\r\n    assertEquals(\"klm\", ((List<?>) bean.getMapProperty().get(\"mappedList\")).get(0), \"BEFORE\");\r\n    PropertyUtils.setProperty(bean, \"mapProperty(mappedList)[0]\", \"KLM-UPDATED\");\r\n    assertEquals(\"KLM-UPDATED\", ((List<?>) bean.getMapProperty().get(\"mappedList\")).get(0), \"AFTER\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\PropertyUtilsTest.java",
  "methodName" : "testSetMappedMap",
  "sourceCode" : "/**\r\n * Test setting a value out of a mapped Map\r\n */\r\n@Test\r\nvoid testSetMappedMap() throws Exception {\r\n    final TestBean bean = new TestBean();\r\n    final Map<String, Object> map = new HashMap<>();\r\n    map.put(\"sub-key-1\", \"sub-value-1\");\r\n    map.put(\"sub-key-2\", \"sub-value-2\");\r\n    map.put(\"sub-key-3\", \"sub-value-3\");\r\n    bean.getMapProperty().put(\"mappedMap\", map);\r\n    assertEquals(\"sub-value-3\", ((Map<?, ?>) bean.getMapProperty().get(\"mappedMap\")).get(\"sub-key-3\"), \"BEFORE\");\r\n    PropertyUtils.setProperty(bean, \"mapProperty(mappedMap)(sub-key-3)\", \"SUB-KEY-3-UPDATED\");\r\n    assertEquals(\"SUB-KEY-3-UPDATED\", ((Map<?, ?>) bean.getMapProperty().get(\"mappedMap\")).get(\"sub-key-3\"), \"AFTER\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\PropertyUtilsTest.java",
  "methodName" : "testSetMappedPeriods",
  "sourceCode" : "/**\r\n * Test setting mapped values with periods in the key.\r\n */\r\n@Test\r\nvoid testSetMappedPeriods() throws Exception {\r\n    // PropertyUtils.setMappedProperty()--------\r\n    bean.setMappedProperty(\"key.with.a.dot\", \"Special Value\");\r\n    assertEquals(\"Special Value\", bean.getMappedProperty(\"key.with.a.dot\"), \"Can retrieve directly (A)\");\r\n    PropertyUtils.setMappedProperty(bean, \"mappedProperty\", \"key.with.a.dot\", \"Updated Special Value\");\r\n    assertEquals(\"Updated Special Value\", bean.getMappedProperty(\"key.with.a.dot\"), \"Check set via setMappedProperty\");\r\n    // PropertyUtils.setNestedProperty()\r\n    bean.setMappedProperty(\"key.with.a.dot\", \"Special Value\");\r\n    assertEquals(\"Special Value\", bean.getMappedProperty(\"key.with.a.dot\"), \"Can retrieve directly (B)\");\r\n    PropertyUtils.setNestedProperty(bean, \"mappedProperty(key.with.a.dot)\", \"Updated Special Value\");\r\n    assertEquals(\"Updated Special Value\", bean.getMappedProperty(\"key.with.a.dot\"), \"Check set via setNestedProperty (B)\");\r\n    // PropertyUtils.setNestedProperty()\r\n    final TestBean testBean = new TestBean();\r\n    bean.setMappedObjects(\"nested.property\", testBean);\r\n    assertEquals(\"This is a string\", testBean.getStringProperty(), \"Can retrieve directly (C)\");\r\n    PropertyUtils.setNestedProperty(bean, \"mappedObjects(nested.property).stringProperty\", \"Updated String Value\");\r\n    assertEquals(\"Updated String Value\", testBean.getStringProperty(), \"Check set via setNestedProperty (C)\");\r\n    // PropertyUtils.setNestedProperty()\r\n    bean.getNested().setMappedProperty(\"Mapped Key\", \"Nested Mapped Value\");\r\n    assertEquals(\"Nested Mapped Value\", PropertyUtils.getNestedProperty(bean, \"nested.mappedProperty(Mapped Key)\"), \"Can retrieve via getNestedProperty (D)\");\r\n    PropertyUtils.setNestedProperty(bean, \"nested.mappedProperty(Mapped Key)\", \"Updated Nested Mapped Value\");\r\n    assertEquals(\"Updated Nested Mapped Value\", PropertyUtils.getNestedProperty(bean, \"nested.mappedProperty(Mapped Key)\"), \"Check set via setNestedProperty (D)\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\PropertyUtilsTest.java",
  "methodName" : "testSetMappedValues",
  "sourceCode" : "/**\r\n * Positive and negative tests on setMappedProperty valid arguments.\r\n */\r\n@Test\r\nvoid testSetMappedValues() throws Exception {\r\n    Object value = null;\r\n    // Use explicit key argument\r\n    value = PropertyUtils.getMappedProperty(bean, \"mappedProperty\", \"Fourth Key\");\r\n    assertNull(value, \"Can not find fourth value\");\r\n    PropertyUtils.setMappedProperty(bean, \"mappedProperty\", \"Fourth Key\", \"Fourth Value\");\r\n    value = PropertyUtils.getMappedProperty(bean, \"mappedProperty\", \"Fourth Key\");\r\n    assertEquals(\"Fourth Value\", value, \"Can find fourth value\");\r\n    // Use key expression with parentheses\r\n    value = PropertyUtils.getMappedProperty(bean, \"mappedProperty(Fifth Key)\");\r\n    assertNull(value, \"Can not find fifth value\");\r\n    PropertyUtils.setMappedProperty(bean, \"mappedProperty(Fifth Key)\", \"Fifth Value\");\r\n    value = PropertyUtils.getMappedProperty(bean, \"mappedProperty(Fifth Key)\");\r\n    assertEquals(\"Fifth Value\", value, \"Can find fifth value\");\r\n    // Use key expression with dotted expression\r\n    value = PropertyUtils.getNestedProperty(bean, \"mapProperty.Sixth Key\");\r\n    assertNull(value, \"Can not find sixth value\");\r\n    PropertyUtils.setNestedProperty(bean, \"mapProperty.Sixth Key\", \"Sixth Value\");\r\n    value = PropertyUtils.getNestedProperty(bean, \"mapProperty.Sixth Key\");\r\n    assertEquals(\"Sixth Value\", value, \"Can find sixth value\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\PropertyUtilsTest.java",
  "methodName" : "testSetNestedArguments",
  "sourceCode" : "/**\r\n * Corner cases on setNestedProperty invalid arguments.\r\n */\r\n@Test\r\nvoid testSetNestedArguments() {\r\n    assertThrows(NullPointerException.class, () -> PropertyUtils.setNestedProperty(null, \"stringProperty\", \"\"));\r\n    assertThrows(NullPointerException.class, () -> PropertyUtils.setNestedProperty(bean, null, \"\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\PropertyUtilsTest.java",
  "methodName" : "testSetNestedBoolean",
  "sourceCode" : "/**\r\n * Test setNextedProperty on a boolean property.\r\n */\r\n@Test\r\nvoid testSetNestedBoolean() throws Exception {\r\n    final boolean oldValue = bean.getNested().getBooleanProperty();\r\n    final boolean newValue = !oldValue;\r\n    PropertyUtils.setNestedProperty(bean, \"nested.booleanProperty\", Boolean.valueOf(newValue));\r\n    assertEquals(newValue, bean.getNested().getBooleanProperty(), \"Matched new value\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\PropertyUtilsTest.java",
  "methodName" : "testSetNestedDouble",
  "sourceCode" : "/**\r\n * Test setNestedProperty on a double property.\r\n */\r\n@Test\r\nvoid testSetNestedDouble() throws Exception {\r\n    final double oldValue = bean.getNested().getDoubleProperty();\r\n    final double newValue = oldValue + 1.0;\r\n    PropertyUtils.setNestedProperty(bean, \"nested.doubleProperty\", Double.valueOf(newValue));\r\n    assertEquals(newValue, bean.getNested().getDoubleProperty(), 0.005, \"Matched new value\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\PropertyUtilsTest.java",
  "methodName" : "testSetNestedFloat",
  "sourceCode" : "/**\r\n * Test setNestedProperty on a float property.\r\n */\r\n@Test\r\nvoid testSetNestedFloat() throws Exception {\r\n    final float oldValue = bean.getNested().getFloatProperty();\r\n    final float newValue = oldValue + (float) 1.0;\r\n    PropertyUtils.setNestedProperty(bean, \"nested.floatProperty\", Float.valueOf(newValue));\r\n    assertEquals(newValue, bean.getNested().getFloatProperty(), (float) 0.005, \"Matched new value\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\PropertyUtilsTest.java",
  "methodName" : "testSetNestedInt",
  "sourceCode" : "/**\r\n * Test setNestedProperty on a int property.\r\n */\r\n@Test\r\nvoid testSetNestedInt() throws Exception {\r\n    final int oldValue = bean.getNested().getIntProperty();\r\n    final int newValue = oldValue + 1;\r\n    PropertyUtils.setNestedProperty(bean, \"nested.intProperty\", Integer.valueOf(newValue));\r\n    assertEquals(newValue, bean.getNested().getIntProperty(), \"Matched new value\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\PropertyUtilsTest.java",
  "methodName" : "testSetNestedLong",
  "sourceCode" : "/**\r\n * Test setNestedProperty on a long property.\r\n */\r\n@Test\r\nvoid testSetNestedLong() throws Exception {\r\n    final long oldValue = bean.getNested().getLongProperty();\r\n    final long newValue = oldValue + 1;\r\n    PropertyUtils.setNestedProperty(bean, \"nested.longProperty\", Long.valueOf(newValue));\r\n    assertEquals(newValue, bean.getNested().getLongProperty(), \"Matched new value\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\PropertyUtilsTest.java",
  "methodName" : "testSetNestedReadOnly",
  "sourceCode" : "/**\r\n * Test setNestedProperty on a read-only String property.\r\n */\r\n@Test\r\nvoid testSetNestedReadOnly() throws Exception {\r\n    final String oldValue = bean.getNested().getWriteOnlyPropertyValue();\r\n    final String newValue = oldValue + \" Extra Value\";\r\n    assertThrows(NoSuchMethodException.class, () -> PropertyUtils.setNestedProperty(bean, \"nested.readOnlyProperty\", newValue));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\PropertyUtilsTest.java",
  "methodName" : "testSetNestedShort",
  "sourceCode" : "/**\r\n * Test setNestedProperty on a short property.\r\n */\r\n@Test\r\nvoid testSetNestedShort() throws Exception {\r\n    final short oldValue = bean.getNested().getShortProperty();\r\n    short newValue = oldValue;\r\n    newValue++;\r\n    PropertyUtils.setNestedProperty(bean, \"nested.shortProperty\", Short.valueOf(newValue));\r\n    assertEquals(newValue, bean.getNested().getShortProperty(), \"Matched new value\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\PropertyUtilsTest.java",
  "methodName" : "testSetNestedString",
  "sourceCode" : "/**\r\n * Test setNestedProperty on a String property.\r\n */\r\n@Test\r\nvoid testSetNestedString() throws Exception {\r\n    final String oldValue = bean.getNested().getStringProperty();\r\n    final String newValue = oldValue + \" Extra Value\";\r\n    PropertyUtils.setNestedProperty(bean, \"nested.stringProperty\", newValue);\r\n    assertEquals(newValue, bean.getNested().getStringProperty(), \"Matched new value\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\PropertyUtilsTest.java",
  "methodName" : "testSetNestedUnknown",
  "sourceCode" : "/**\r\n * Test setNestedProperty on an unknown property name.\r\n */\r\n@Test\r\nvoid testSetNestedUnknown() throws Exception {\r\n    final String newValue = \"New String Value\";\r\n    assertThrows(NoSuchMethodException.class, () -> PropertyUtils.setNestedProperty(bean, \"nested.unknown\", newValue));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\PropertyUtilsTest.java",
  "methodName" : "testSetNestedWriteOnly",
  "sourceCode" : "/**\r\n * Test setNestedProperty on a write-only String property.\r\n */\r\n@Test\r\nvoid testSetNestedWriteOnly() throws Exception {\r\n    final String oldValue = bean.getNested().getWriteOnlyPropertyValue();\r\n    final String newValue = oldValue + \" Extra Value\";\r\n    PropertyUtils.setNestedProperty(bean, \"nested.writeOnlyProperty\", newValue);\r\n    assertEquals(newValue, bean.getNested().getWriteOnlyPropertyValue(), \"Matched new value\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\PropertyUtilsTest.java",
  "methodName" : "testSetNoGetter",
  "sourceCode" : "@Test\r\nvoid testSetNoGetter() throws Exception {\r\n    final BetaBean bean = new BetaBean(\"Cedric\");\r\n    // test standard no getter\r\n    bean.setNoGetterProperty(\"Sigma\");\r\n    assertEquals(\"Sigma\", bean.getSecret(), \"BetaBean test failed\");\r\n    assertNotNull(PropertyUtils.getPropertyDescriptor(bean, \"noGetterProperty\"), \"Descriptor is null\");\r\n    BeanUtils.setProperty(bean, \"noGetterProperty\", \"Omega\");\r\n    assertEquals(\"Omega\", bean.getSecret(), \"Cannot set no-getter property\");\r\n    // test mapped no getter descriptor\r\n    assertNotNull(PropertyUtils.getPropertyDescriptor(bean, \"noGetterMappedProperty\"), \"Map Descriptor is null\");\r\n    PropertyUtils.setMappedProperty(bean, \"noGetterMappedProperty\", \"Epsilon\", \"Epsilon\");\r\n    assertEquals(\"MAP:Epsilon\", bean.getSecret(), \"Cannot set mapped no-getter property\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\PropertyUtilsTest.java",
  "methodName" : "testSetPublicSubBean_of_PackageBean",
  "sourceCode" : "/**\r\n * Test accessing a public sub-bean of a package scope bean\r\n */\r\n@Test\r\nvoid testSetPublicSubBean_of_PackageBean() throws Exception {\r\n    final PublicSubBean bean = new PublicSubBean();\r\n    bean.setFoo(\"foo-start\");\r\n    bean.setBar(\"bar-start\");\r\n    // Set Foo\r\n    PropertyUtils.setProperty(bean, \"foo\", \"foo-updated\");\r\n    assertEquals(\"foo-updated\", bean.getFoo(), \"foo property\");\r\n    // Set Bar\r\n    PropertyUtils.setProperty(bean, \"bar\", \"bar-updated\");\r\n    assertEquals(\"bar-updated\", bean.getBar(), \"bar property\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\PropertyUtilsTest.java",
  "methodName" : "testSetSimpleArguments",
  "sourceCode" : "/**\r\n * Corner cases on setSimpleProperty invalid arguments.\r\n */\r\n@Test\r\nvoid testSetSimpleArguments() {\r\n    assertThrows(NullPointerException.class, () -> PropertyUtils.setSimpleProperty(null, \"stringProperty\", \"\"));\r\n    assertThrows(NullPointerException.class, () -> PropertyUtils.setSimpleProperty(bean, null, \"\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\PropertyUtilsTest.java",
  "methodName" : "testSetSimpleBoolean",
  "sourceCode" : "/**\r\n * Test setSimpleProperty on a boolean property.\r\n */\r\n@Test\r\nvoid testSetSimpleBoolean() throws Exception {\r\n    final boolean oldValue = bean.getBooleanProperty();\r\n    final boolean newValue = !oldValue;\r\n    PropertyUtils.setSimpleProperty(bean, \"booleanProperty\", Boolean.valueOf(newValue));\r\n    assertEquals(newValue, bean.getBooleanProperty(), \"Matched new value\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\PropertyUtilsTest.java",
  "methodName" : "testSetSimpleDouble",
  "sourceCode" : "/**\r\n * Test setSimpleProperty on a double property.\r\n */\r\n@Test\r\nvoid testSetSimpleDouble() throws Exception {\r\n    final double oldValue = bean.getDoubleProperty();\r\n    final double newValue = oldValue + 1.0;\r\n    PropertyUtils.setSimpleProperty(bean, \"doubleProperty\", Double.valueOf(newValue));\r\n    assertEquals(newValue, bean.getDoubleProperty(), 0.005, \"Matched new value\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\PropertyUtilsTest.java",
  "methodName" : "testSetSimpleFloat",
  "sourceCode" : "/**\r\n * Test setSimpleProperty on a float property.\r\n */\r\n@Test\r\nvoid testSetSimpleFloat() throws Exception {\r\n    final float oldValue = bean.getFloatProperty();\r\n    final float newValue = oldValue + (float) 1.0;\r\n    PropertyUtils.setSimpleProperty(bean, \"floatProperty\", Float.valueOf(newValue));\r\n    assertEquals(newValue, bean.getFloatProperty(), (float) 0.005, \"Matched new value\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\PropertyUtilsTest.java",
  "methodName" : "testSetSimpleIndexed",
  "sourceCode" : "/**\r\n * Negative test setSimpleProperty on an indexed property.\r\n */\r\n@Test\r\nvoid testSetSimpleIndexed() throws Exception {\r\n    assertThrows(IllegalArgumentException.class, () -> PropertyUtils.setSimpleProperty(bean, \"stringIndexed[0]\", \"New String Value\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\PropertyUtilsTest.java",
  "methodName" : "testSetSimpleInt",
  "sourceCode" : "/**\r\n * Test setSimpleProperty on a int property.\r\n */\r\n@Test\r\nvoid testSetSimpleInt() throws Exception {\r\n    final int oldValue = bean.getIntProperty();\r\n    final int newValue = oldValue + 1;\r\n    PropertyUtils.setSimpleProperty(bean, \"intProperty\", Integer.valueOf(newValue));\r\n    assertEquals(newValue, bean.getIntProperty(), \"Matched new value\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\PropertyUtilsTest.java",
  "methodName" : "testSetSimpleLong",
  "sourceCode" : "/**\r\n * Test setSimpleProperty on a long property.\r\n */\r\n@Test\r\nvoid testSetSimpleLong() throws Exception {\r\n    final long oldValue = bean.getLongProperty();\r\n    final long newValue = oldValue + 1;\r\n    PropertyUtils.setSimpleProperty(bean, \"longProperty\", Long.valueOf(newValue));\r\n    assertEquals(newValue, bean.getLongProperty(), \"Matched new value\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\PropertyUtilsTest.java",
  "methodName" : "testSetSimpleNested",
  "sourceCode" : "/**\r\n * Negative test setSimpleProperty on a nested property.\r\n */\r\n@Test\r\nvoid testSetSimpleNested() throws Exception {\r\n    assertThrows(IllegalArgumentException.class, () -> PropertyUtils.setSimpleProperty(bean, \"nested.stringProperty\", \"New String Value\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\PropertyUtilsTest.java",
  "methodName" : "testSetSimpleReadOnly",
  "sourceCode" : "/**\r\n * Test setSimpleProperty on a read-only String property.\r\n */\r\n@Test\r\nvoid testSetSimpleReadOnly() throws Exception {\r\n    final String oldValue = bean.getWriteOnlyPropertyValue();\r\n    final String newValue = oldValue + \" Extra Value\";\r\n    final NoSuchMethodException e = assertThrows(NoSuchMethodException.class, () -> PropertyUtils.setSimpleProperty(bean, \"readOnlyProperty\", newValue));\r\n    assertEquals(\"Property 'readOnlyProperty' has no setter method in class '\" + bean.getClass() + \"'\", e.getMessage());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\PropertyUtilsTest.java",
  "methodName" : "testSetSimpleShort",
  "sourceCode" : "/**\r\n * Test setSimpleProperty on a short property.\r\n */\r\n@Test\r\nvoid testSetSimpleShort() throws Exception {\r\n    final short oldValue = bean.getShortProperty();\r\n    short newValue = oldValue;\r\n    newValue++;\r\n    PropertyUtils.setSimpleProperty(bean, \"shortProperty\", Short.valueOf(newValue));\r\n    assertEquals(newValue, bean.getShortProperty(), \"Matched new value\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\PropertyUtilsTest.java",
  "methodName" : "testSetSimpleString",
  "sourceCode" : "/**\r\n * Test setSimpleProperty on a String property.\r\n */\r\n@Test\r\nvoid testSetSimpleString() throws Exception {\r\n    final String oldValue = bean.getStringProperty();\r\n    final String newValue = oldValue + \" Extra Value\";\r\n    PropertyUtils.setSimpleProperty(bean, \"stringProperty\", newValue);\r\n    assertEquals(newValue, bean.getStringProperty(), \"Matched new value\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\PropertyUtilsTest.java",
  "methodName" : "testSetSimpleUnknown",
  "sourceCode" : "/**\r\n * Test setSimpleProperty on an unknown property name.\r\n */\r\n@Test\r\nvoid testSetSimpleUnknown() throws Exception {\r\n    final String newValue = \"New String Value\";\r\n    final NoSuchMethodException e = assertThrows(NoSuchMethodException.class, () -> PropertyUtils.setSimpleProperty(bean, \"unknown\", newValue));\r\n    assertEquals(\"Unknown property 'unknown' on class '\" + bean.getClass() + \"'\", e.getMessage());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\PropertyUtilsTest.java",
  "methodName" : "testSetSimpleWriteOnly",
  "sourceCode" : "/**\r\n * Test setSimpleProperty on a write-only String property.\r\n */\r\n@Test\r\nvoid testSetSimpleWriteOnly() throws Exception {\r\n    final String oldValue = bean.getWriteOnlyPropertyValue();\r\n    final String newValue = oldValue + \" Extra Value\";\r\n    PropertyUtils.setSimpleProperty(bean, \"writeOnlyProperty\", newValue);\r\n    assertEquals(newValue, bean.getWriteOnlyPropertyValue(), \"Matched new value\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\PropertyUtilsTest.java",
  "methodName" : "testThrowNestedNull",
  "sourceCode" : "/**\r\n * When a bean has a null property which is reference by the standard access language, this should throw a NestedNullException.\r\n */\r\n@Test\r\nvoid testThrowNestedNull() throws Exception {\r\n    final NestedTestBean nestedBean = new NestedTestBean(\"base\");\r\n    // don't init!\r\n    assertThrows(NestedNullException.class, () -> PropertyUtils.getProperty(nestedBean, \"simpleBeanProperty.indexedProperty[0]\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\sql\\converters\\SqlDateConverterTest.java",
  "methodName" : "testDefaultStringToTypeConvert",
  "sourceCode" : "/**\r\n * Test default String to java.sql.Date conversion\r\n */\r\n@Override\r\n@Test\r\npublic void testDefaultStringToTypeConvert() {\r\n    // Create & Configure the Converter\r\n    final SqlDateConverter converter = makeConverter();\r\n    converter.setUseLocaleFormat(false);\r\n    // Valid String --> java.sql.Date Conversion\r\n    final String testString = \"2006-05-16\";\r\n    final Object expected = toType(testString, \"yyyy-MM-dd\", null);\r\n    validConversion(converter, expected, testString);\r\n    // Invalid String --> java.sql.Date Conversion\r\n    invalidConversion(converter, \"01/01/2006\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\sql\\converters\\SqlDateConverterTest.java",
  "methodName" : "testDefaultTypeToStringConvert",
  "sourceCode" : "/**\r\n * Test default java.sql.Date to String conversion\r\n */\r\n@Test\r\nvoid testDefaultTypeToStringConvert() {\r\n    // Create & Configure the Converter\r\n    final DateTimeConverter<Date> converter = makeConverter();\r\n    converter.setUseLocaleFormat(false);\r\n    // Valid String --> java.sql.Date Conversion\r\n    final String expected = \"2006-05-16\";\r\n    final Object testVal = toType(expected, \"yyyy-MM-dd\", null);\r\n    stringConversion(converter, expected, testVal);\r\n    final Object result = converter.convert(String.class, Integer.valueOf(2));\r\n    assertEquals(\"2\", result, \"Default toString()\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\sql\\converters\\SqlTimeConverterTest.java",
  "methodName" : "testDefaultStringToTypeConvert",
  "sourceCode" : "/**\r\n * Test default String to java.sql.Time conversion\r\n */\r\n@Override\r\n@Test\r\npublic void testDefaultStringToTypeConvert() {\r\n    // Create & Configure the Converter\r\n    final SqlTimeConverter converter = makeConverter();\r\n    converter.setUseLocaleFormat(false);\r\n    // Valid String --> java.sql.Time Conversion\r\n    final String testString = \"15:36:21\";\r\n    final Object expected = toType(testString, \"HH:mm:ss\", null);\r\n    validConversion(converter, expected, testString);\r\n    // Invalid String --> java.sql.Time Conversion\r\n    invalidConversion(converter, \"15:36\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\sql\\converters\\SqlTimeConverterTest.java",
  "methodName" : "testLocale",
  "sourceCode" : "/**\r\n * Test Date Converter with no default value\r\n */\r\n@Override\r\n@Test\r\npublic void testLocale() {\r\n    // Re-set the default Locale to Locale.US\r\n    final Locale defaultLocale = Locale.getDefault();\r\n    Locale.setDefault(Locale.US);\r\n    // SHORT style time format for US Locale\r\n    final String pattern = \"h:mm a\";\r\n    // Create & Configure the Converter\r\n    final SqlTimeConverter converter = makeConverter();\r\n    converter.setUseLocaleFormat(true);\r\n    // Valid String --> Type Conversion\r\n    final String testString = \"3:06 pm\";\r\n    final Object expected = toType(testString, pattern, null);\r\n    validConversion(converter, expected, testString);\r\n    // Invalid Conversions\r\n    invalidConversion(converter, null);\r\n    invalidConversion(converter, \"\");\r\n    invalidConversion(converter, \"13:05\");\r\n    invalidConversion(converter, \"11:05 p\");\r\n    invalidConversion(converter, \"11.05 pm\");\r\n    invalidConversion(converter, Integer.valueOf(2));\r\n    // Test specified Locale\r\n    converter.setLocale(Locale.UK);\r\n    // Test previous value now fails\r\n    invalidConversion(converter, testString);\r\n    // UK Short style is \"HH:mm\"\r\n    validConversion(converter, expected, \"15:06\");\r\n    // Restore the default Locale\r\n    Locale.setDefault(defaultLocale);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\sql\\converters\\SqlTimestampConverterTest.java",
  "methodName" : "testDefaultStringToTypeConvert",
  "sourceCode" : "/**\r\n * Test default String to java.sql.Timestamp conversion\r\n */\r\n@Override\r\n@Test\r\npublic void testDefaultStringToTypeConvert() {\r\n    // Create & Configure the Converter\r\n    final SqlTimestampConverter converter = makeConverter();\r\n    converter.setUseLocaleFormat(false);\r\n    // Valid String --> java.sql.Timestamp Conversion\r\n    final String testString = \"2006-10-23 15:36:01.0\";\r\n    final Object expected = toType(testString, \"yyyy-MM-dd HH:mm:ss.S\", null);\r\n    validConversion(converter, expected, testString);\r\n    // Invalid String --> java.sql.Timestamp Conversion\r\n    invalidConversion(converter, \"2006/09/21 15:36:01.0\");\r\n    invalidConversion(converter, \"2006-10-22\");\r\n    invalidConversion(converter, \"15:36:01\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\sql\\converters\\SqlTimestampConverterTest.java",
  "methodName" : "testLocale",
  "sourceCode" : "/**\r\n * Test Date Converter with no default value\r\n */\r\n@Override\r\n@Test\r\npublic void testLocale() {\r\n    // Re-set the default Locale to Locale.US\r\n    final Locale defaultLocale = Locale.getDefault();\r\n    Locale.setDefault(Locale.US);\r\n    isUSFormatWithComma();\r\n    // Create & Configure the Converter\r\n    final SqlTimestampConverter converter = makeConverter();\r\n    converter.setUseLocaleFormat(true);\r\n    // SHORT style Date & Time format for US Locale\r\n    String pattern;\r\n    String testString;\r\n    if (isUSFormatWithComma()) {\r\n        pattern = \"M/d/yy, h:mm a\";\r\n        testString = \"3/21/06, 3:06 PM\";\r\n    } else {\r\n        // More regular pattern for Java 8 and earlier\r\n        pattern = \"M/d/yy h:mm a\";\r\n        testString = \"3/21/06 3:06 PM\";\r\n    }\r\n    // Valid String --> Type Conversion\r\n    final Object expected = toType(testString, pattern, null);\r\n    validConversion(converter, expected, testString);\r\n    // Invalid Conversions\r\n    invalidConversion(converter, null);\r\n    invalidConversion(converter, \"\");\r\n    invalidConversion(converter, \"13:05 pm\");\r\n    invalidConversion(converter, \"11:05 p\");\r\n    invalidConversion(converter, \"11.05 pm\");\r\n    invalidConversion(converter, Integer.valueOf(2));\r\n    // Restore the default Locale\r\n    Locale.setDefault(defaultLocale);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\sql\\DynaResultSetTest.java",
  "methodName" : "testGetDynaProperties",
  "sourceCode" : "@Test\r\nvoid testGetDynaProperties() {\r\n    final DynaProperty[] dynaProps = dynaClass.getDynaProperties();\r\n    assertNotNull(dynaProps, \"dynaProps exists\");\r\n    assertEquals(columns.length, dynaProps.length, \"dynaProps length\");\r\n    for (int i = 0; i < columns.length; i++) {\r\n        assertEquals(columns[i], dynaProps[i].getName(), \"Property \" + columns[i]);\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\sql\\DynaResultSetTest.java",
  "methodName" : "testGetDynaProperty",
  "sourceCode" : "@Test\r\nvoid testGetDynaProperty() {\r\n    // Invalid argument test\r\n    assertThrows(NullPointerException.class, () -> dynaClass.getDynaProperty(null));\r\n    // Negative test\r\n    DynaProperty dynaProp = dynaClass.getDynaProperty(\"unknownProperty\");\r\n    assertNull(dynaProp, \"unknown property returns null\");\r\n    // Positive test\r\n    dynaProp = dynaClass.getDynaProperty(\"stringproperty\");\r\n    assertNotNull(dynaProp, \"string property exists\");\r\n    assertEquals(\"stringproperty\", dynaProp.getName(), \"string property name\");\r\n    assertEquals(String.class, dynaProp.getType(), \"string property class\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\sql\\DynaResultSetTest.java",
  "methodName" : "testGetName",
  "sourceCode" : "@Test\r\nvoid testGetName() {\r\n    assertEquals(\"org.apache.commons.beanutils2.sql.ResultSetDynaClass\", dynaClass.getName(), \"DynaClass name\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\sql\\DynaResultSetTest.java",
  "methodName" : "testIteratorCount",
  "sourceCode" : "@Test\r\nvoid testIteratorCount() {\r\n    final Iterator<?> rows = dynaClass.iterator();\r\n    assertNotNull(rows, \"iterator exists\");\r\n    int n = 0;\r\n    while (rows.hasNext()) {\r\n        rows.next();\r\n        n++;\r\n        assertFalse(n > 10);\r\n    }\r\n    assertEquals(5, n, \"iterator rows\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\sql\\DynaResultSetTest.java",
  "methodName" : "testIteratorResults",
  "sourceCode" : "@Test\r\nvoid testIteratorResults() {\r\n    // Grab the third row\r\n    final Iterator<DynaBean> rows = dynaClass.iterator();\r\n    rows.next();\r\n    rows.next();\r\n    final DynaBean row = rows.next();\r\n    // Invalid argument test\r\n    assertThrows(IllegalArgumentException.class, () -> row.get(\"unknownProperty\"));\r\n    // Verify property values\r\n    final Object bigDecimalProperty = row.get(\"bigdecimalproperty\");\r\n    assertNotNull(bigDecimalProperty, \"bigDecimalProperty exists\");\r\n    assertInstanceOf(BigDecimal.class, bigDecimalProperty, \"bigDecimalProperty type\");\r\n    assertEquals(123.45, ((BigDecimal) bigDecimalProperty).doubleValue(), 0.005, \"bigDecimalProperty value\");\r\n    final Object intProperty = row.get(\"intproperty\");\r\n    assertNotNull(intProperty, \"intProperty exists\");\r\n    assertInstanceOf(Integer.class, intProperty, \"intProperty type\");\r\n    assertEquals(103, ((Integer) intProperty).intValue(), \"intProperty value\");\r\n    final Object nullProperty = row.get(\"nullproperty\");\r\n    assertNull(nullProperty, \"nullProperty null\");\r\n    final Object stringProperty = row.get(\"stringproperty\");\r\n    assertNotNull(stringProperty, \"stringProperty exists\");\r\n    assertInstanceOf(String.class, stringProperty, \"stringProperty type\");\r\n    assertEquals(\"This is a string\", (String) stringProperty, \"stringProperty value\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\sql\\DynaResultSetTest.java",
  "methodName" : "testIteratorResultsNormalCase",
  "sourceCode" : "/**\r\n * Test normal case column names (i.e. not converted to lower case)\r\n */\r\n@Test\r\nvoid testIteratorResultsNormalCase() throws Exception {\r\n    final ResultSetDynaClass dynaClass = new ResultSetDynaClass(TestResultSet.createProxy(), false);\r\n    // Grab the third row\r\n    final Iterator<DynaBean> rows = dynaClass.iterator();\r\n    rows.next();\r\n    rows.next();\r\n    final DynaBean row = rows.next();\r\n    // Invalid argument test\r\n    assertThrows(IllegalArgumentException.class, () -> row.get(\"unknownProperty\"));\r\n    // Verify property values\r\n    final Object bigDecimalProperty = row.get(\"bigDecimalProperty\");\r\n    assertNotNull(bigDecimalProperty, \"bigDecimalProperty exists\");\r\n    assertInstanceOf(BigDecimal.class, bigDecimalProperty, \"bigDecimalProperty type\");\r\n    assertEquals(123.45, ((BigDecimal) bigDecimalProperty).doubleValue(), 0.005, \"bigDecimalProperty value\");\r\n    final Object intProperty = row.get(\"intProperty\");\r\n    assertNotNull(intProperty, \"intProperty exists\");\r\n    assertInstanceOf(Integer.class, intProperty, \"intProperty type\");\r\n    assertEquals(103, ((Integer) intProperty).intValue(), \"intProperty value\");\r\n    final Object nullProperty = row.get(\"nullProperty\");\r\n    assertNull(nullProperty, \"nullProperty null\");\r\n    final Object stringProperty = row.get(\"stringProperty\");\r\n    assertNotNull(stringProperty, \"stringProperty exists\");\r\n    assertInstanceOf(String.class, stringProperty, \"stringProperty type\");\r\n    assertEquals(\"This is a string\", (String) stringProperty, \"stringProperty value\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\sql\\DynaResultSetTest.java",
  "methodName" : "testNewInstance",
  "sourceCode" : "@Test\r\nvoid testNewInstance() {\r\n    assertThrows(UnsupportedOperationException.class, () -> dynaClass.newInstance());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\sql\\DynaRowSetTest.java",
  "methodName" : "testGetDynaProperties",
  "sourceCode" : "@Test\r\nvoid testGetDynaProperties() {\r\n    final DynaProperty[] dynaProps = dynaClass.getDynaProperties();\r\n    assertNotNull(dynaProps, \"dynaProps exists\");\r\n    assertEquals(columns.length, dynaProps.length, \"dynaProps length\");\r\n    for (int i = 0; i < columns.length; i++) {\r\n        assertEquals(columns[i], dynaProps[i].getName(), \"Property \" + columns[i]);\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\sql\\DynaRowSetTest.java",
  "methodName" : "testGetDynaProperty",
  "sourceCode" : "@Test\r\nvoid testGetDynaProperty() {\r\n    // Invalid argument test\r\n    assertThrows(NullPointerException.class, () -> dynaClass.getDynaProperty(null));\r\n    // Negative test\r\n    DynaProperty dynaProp = dynaClass.getDynaProperty(\"unknownProperty\");\r\n    assertNull(dynaProp, \"unknown property returns null\");\r\n    // Positive test\r\n    dynaProp = dynaClass.getDynaProperty(\"stringproperty\");\r\n    assertNotNull(dynaProp, \"string property exists\");\r\n    assertEquals(\"stringproperty\", dynaProp.getName(), \"string property name\");\r\n    assertEquals(String.class, dynaProp.getType(), \"string property class\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\sql\\DynaRowSetTest.java",
  "methodName" : "testGetName",
  "sourceCode" : "@Test\r\nvoid testGetName() {\r\n    assertEquals(\"org.apache.commons.beanutils2.sql.RowSetDynaClass\", dynaClass.getName(), \"DynaClass name\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\sql\\DynaRowSetTest.java",
  "methodName" : "testInconsistentOracleDriver",
  "sourceCode" : "/**\r\n * Test issues associated with Oracle JDBC driver.\r\n *\r\n * See issue# https://issues.apache.org/jira/browse/BEANUTILS-142\r\n *\r\n * @throws Exception if an error occurs\r\n */\r\n@Test\r\nvoid testInconsistentOracleDriver() throws Exception {\r\n    final ResultSetMetaData metaData = TestResultSetMetaData.createProxy(new TestResultSetMetaDataInconsistent());\r\n    final ResultSet resultSet = TestResultSet.createProxy(new TestResultSetInconsistent(metaData));\r\n    // Date Column returns \"java.sql.Timestamp\" for the column class name but ResultSet getObject\r\n    // returns a java.sql.Date value\r\n    final int dateColIdx = 4;\r\n    assertEquals(\"dateProperty\", metaData.getColumnName(dateColIdx), \"Date Meta Name\");\r\n    assertEquals(\"java.sql.Timestamp\", metaData.getColumnClassName(dateColIdx), \"Date Meta Class\");\r\n    assertEquals(Types.DATE, metaData.getColumnType(dateColIdx), \"Date Meta Type\");\r\n    assertEquals(Date.class, resultSet.getObject(\"dateProperty\").getClass(), \"Date ResultSet Value\");\r\n    // Timestamp column class returns a custom Timestamp impl for the column class name and ResultSet getObject\r\n    final int timestampColIdx = 13;\r\n    assertEquals(\"timestampProperty\", metaData.getColumnName(timestampColIdx), \"Timestamp Meta Name\");\r\n    assertEquals(CustomTimestamp.class.getName(), metaData.getColumnClassName(timestampColIdx), \"Timestamp Meta Class\");\r\n    assertEquals(Types.TIMESTAMP, metaData.getColumnType(timestampColIdx), \"Timestamp Meta Type\");\r\n    assertEquals(CustomTimestamp.class, resultSet.getObject(\"timestampProperty\").getClass(), \"Timestamp ResultSet Value\");\r\n    final RowSetDynaClass inconsistentDynaClass = new RowSetDynaClass(resultSet);\r\n    final DynaBean firstRow = inconsistentDynaClass.getRows().get(0);\r\n    Class<?> expectedType;\r\n    DynaProperty property;\r\n    // Test Date\r\n    property = firstRow.getDynaClass().getDynaProperty(\"dateproperty\");\r\n    expectedType = java.sql.Date.class;\r\n    assertEquals(expectedType, property.getType(), \"Date Class\");\r\n    assertEquals(expectedType, firstRow.get(property.getName()).getClass(), \"Date Value\");\r\n    // Test Timestamp\r\n    property = firstRow.getDynaClass().getDynaProperty(\"timestampproperty\");\r\n    expectedType = java.sql.Timestamp.class;\r\n    assertEquals(expectedType, property.getType(), \"Timestamp Class\");\r\n    assertEquals(expectedType, firstRow.get(property.getName()).getClass(), \"Timestamp Value\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\sql\\DynaRowSetTest.java",
  "methodName" : "testLimitedRows",
  "sourceCode" : "@Test\r\nvoid testLimitedRows() throws Exception {\r\n    // created one with low limit\r\n    final RowSetDynaClass limitedDynaClass = new RowSetDynaClass(TestResultSet.createProxy(), 3);\r\n    final List<DynaBean> rows = limitedDynaClass.getRows();\r\n    assertNotNull(rows, \"list exists\");\r\n    assertEquals(3, rows.size(), \"limited row count\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\sql\\DynaRowSetTest.java",
  "methodName" : "testListCount",
  "sourceCode" : "@Test\r\nvoid testListCount() {\r\n    final List<DynaBean> rows = dynaClass.getRows();\r\n    assertNotNull(rows, \"list exists\");\r\n    assertEquals(5, rows.size(), \"list row count\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\sql\\DynaRowSetTest.java",
  "methodName" : "testListResults",
  "sourceCode" : "@Test\r\nvoid testListResults() {\r\n    // Grab the third row\r\n    final List<DynaBean> rows = dynaClass.getRows();\r\n    final DynaBean row = rows.get(2);\r\n    // Invalid argument test\r\n    assertThrows(IllegalArgumentException.class, () -> row.get(\"unknownProperty\"));\r\n    // Verify property values\r\n    final Object bigDecimalProperty = row.get(\"bigdecimalproperty\");\r\n    assertNotNull(bigDecimalProperty, \"bigDecimalProperty exists\");\r\n    assertInstanceOf(BigDecimal.class, bigDecimalProperty, \"bigDecimalProperty type\");\r\n    assertEquals(123.45, ((BigDecimal) bigDecimalProperty).doubleValue(), 0.005, \"bigDecimalProperty value\");\r\n    final Object intProperty = row.get(\"intproperty\");\r\n    assertNotNull(intProperty, \"intProperty exists\");\r\n    assertInstanceOf(Integer.class, intProperty, \"intProperty type\");\r\n    assertEquals(103, ((Integer) intProperty).intValue(), \"intProperty value\");\r\n    final Object nullProperty = row.get(\"nullproperty\");\r\n    assertNull(nullProperty, \"nullProperty null\");\r\n    final Object stringProperty = row.get(\"stringproperty\");\r\n    assertNotNull(stringProperty, \"stringProperty exists\");\r\n    assertInstanceOf(String.class, stringProperty, \"stringProperty type\");\r\n    assertEquals(\"This is a string\", (String) stringProperty, \"stringProperty value\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\sql\\DynaRowSetTest.java",
  "methodName" : "testListResultsNormalCase",
  "sourceCode" : "/**\r\n * Test normal case column names (i.e. not converted to lower case)\r\n */\r\n@Test\r\nvoid testListResultsNormalCase() throws Exception {\r\n    final RowSetDynaClass dynaClass = new RowSetDynaClass(TestResultSet.createProxy(), false);\r\n    // Grab the third row\r\n    final List<DynaBean> rows = dynaClass.getRows();\r\n    final DynaBean row = rows.get(2);\r\n    // Invalid argument test\r\n    assertThrows(IllegalArgumentException.class, () -> row.get(\"unknownProperty\"));\r\n    // Verify property values\r\n    final Object bigDecimalProperty = row.get(\"bigDecimalProperty\");\r\n    assertNotNull(bigDecimalProperty, \"bigDecimalProperty exists\");\r\n    assertInstanceOf(BigDecimal.class, bigDecimalProperty, \"bigDecimalProperty type\");\r\n    assertEquals(123.45, ((BigDecimal) bigDecimalProperty).doubleValue(), 0.005, \"bigDecimalProperty value\");\r\n    final Object intProperty = row.get(\"intProperty\");\r\n    assertNotNull(intProperty, \"intProperty exists\");\r\n    assertInstanceOf(Integer.class, intProperty, \"intProperty type\");\r\n    assertEquals(103, ((Integer) intProperty).intValue(), \"intProperty value\");\r\n    final Object nullProperty = row.get(\"nullProperty\");\r\n    assertNull(nullProperty, \"nullProperty null\");\r\n    final Object stringProperty = row.get(\"stringProperty\");\r\n    assertNotNull(stringProperty, \"stringProperty exists\");\r\n    assertInstanceOf(String.class, stringProperty, \"stringProperty type\");\r\n    assertEquals(\"This is a string\", (String) stringProperty, \"stringProperty value\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\sql\\DynaRowSetTest.java",
  "methodName" : "testNewInstance",
  "sourceCode" : "@Test\r\nvoid testNewInstance() {\r\n    assertThrows(UnsupportedOperationException.class, () -> dynaClass.newInstance());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\SuppressPropertiesBeanIntrospectorTest.java",
  "methodName" : "testGetSuppressedPropertiesModify",
  "sourceCode" : "/**\r\n * Tests that the set with properties to be removed cannot be modified.\r\n */\r\n@Test\r\nvoid testGetSuppressedPropertiesModify() {\r\n    final SuppressPropertiesBeanIntrospector introspector = new SuppressPropertiesBeanIntrospector(Arrays.asList(\"p1\", \"p2\"));\r\n    final Set<String> properties = introspector.getSuppressedProperties();\r\n    assertThrows(UnsupportedOperationException.class, () -> properties.add(\"anotherProperty\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\SuppressPropertiesBeanIntrospectorTest.java",
  "methodName" : "testInitNoPropertyNames",
  "sourceCode" : "/**\r\n * Tries to create an instance without properties.\r\n */\r\n@Test\r\nvoid testInitNoPropertyNames() {\r\n    assertThrows(NullPointerException.class, () -> new SuppressPropertiesBeanIntrospector(null));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\SuppressPropertiesBeanIntrospectorTest.java",
  "methodName" : "testPropertyNamesDefensiveCopy",
  "sourceCode" : "/**\r\n * Tests that a defensive copy is created from the collection with properties to be removed.\r\n */\r\n@Test\r\nvoid testPropertyNamesDefensiveCopy() throws IntrospectionException {\r\n    final Collection<String> properties = new HashSet<>();\r\n    properties.add(\"prop1\");\r\n    final SuppressPropertiesBeanIntrospector introspector = new SuppressPropertiesBeanIntrospector(properties);\r\n    properties.add(\"prop2\");\r\n    final IntrospectionContextTestImpl context = new IntrospectionContextTestImpl();\r\n    introspector.introspect(context);\r\n    assertEquals(1, context.getRemovedProperties().size(), \"Wrong number of removed properties\");\r\n    assertTrue(context.getRemovedProperties().contains(\"prop1\"), \"Wrong removed property\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\SuppressPropertiesBeanIntrospectorTest.java",
  "methodName" : "testRemovePropertiesDuringIntrospection",
  "sourceCode" : "/**\r\n * Tests whether the expected properties have been removed during introspection.\r\n */\r\n@Test\r\nvoid testRemovePropertiesDuringIntrospection() throws IntrospectionException {\r\n    final String[] properties = { \"test\", \"other\", \"oneMore\" };\r\n    final SuppressPropertiesBeanIntrospector introspector = new SuppressPropertiesBeanIntrospector(Arrays.asList(properties));\r\n    final IntrospectionContextTestImpl context = new IntrospectionContextTestImpl();\r\n    introspector.introspect(context);\r\n    assertEquals(properties.length, context.getRemovedProperties().size(), \"Wrong number of removed properties\");\r\n    for (final String property : properties) {\r\n        assertTrue(context.getRemovedProperties().contains(property), \"Property not removed: \" + property);\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\WrapDynaBeanTest.java",
  "methodName" : "testGetInstance",
  "sourceCode" : "/**\r\n * Tests getInstance method\r\n */\r\n@Test\r\nvoid testGetInstance() {\r\n    final AlphaBean alphaBean = new AlphaBean(\"Now On Air... John Peel\");\r\n    final WrapDynaBean dynaBean = new WrapDynaBean(alphaBean);\r\n    final Object wrappedInstance = dynaBean.getInstance();\r\n    assertInstanceOf(AlphaBean.class, wrappedInstance, \"Object type is AlphaBean\");\r\n    final AlphaBean wrappedAlphaBean = (AlphaBean) wrappedInstance;\r\n    assertSame(wrappedAlphaBean, alphaBean, \"Same Object\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\WrapDynaBeanTest.java",
  "methodName" : "testGetWrapDynaClassFromCache",
  "sourceCode" : "/**\r\n * Tests whether caching works for WrapDynaClass objects.\r\n */\r\n@Test\r\nvoid testGetWrapDynaClassFromCache() {\r\n    final WrapDynaClass clazz = WrapDynaClass.createDynaClass(TestBean.class);\r\n    assertSame(clazz, WrapDynaClass.createDynaClass(TestBean.class), \"Instance not cached\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\WrapDynaBeanTest.java",
  "methodName" : "testGetWrapDynaClassFromCacheWithPropUtils",
  "sourceCode" : "/**\r\n * Tests whether the PropertyUtilsBean instance associated with a WrapDynaClass is taken into account when accessing an instance from the cache.\r\n */\r\n@Test\r\nvoid testGetWrapDynaClassFromCacheWithPropUtils() {\r\n    final WrapDynaClass clazz = WrapDynaClass.createDynaClass(TestBean.class);\r\n    final PropertyUtilsBean pu = new PropertyUtilsBean();\r\n    final WrapDynaClass clazz2 = WrapDynaClass.createDynaClass(TestBean.class, pu);\r\n    assertNotSame(clazz, clazz2, \"Got same instance from cache\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\WrapDynaBeanTest.java",
  "methodName" : "testIndexedProperties",
  "sourceCode" : "/**\r\n * The {@code set()} method.\r\n */\r\n@Test\r\nvoid testIndexedProperties() {\r\n    // Invalid getter\r\n    assertThrows(IllegalArgumentException.class, () -> bean.get(\"invalidProperty\", 0));\r\n    // Invalid setter\r\n    assertThrows(IllegalArgumentException.class, () -> bean.set(\"invalidProperty\", 0, \"XYZ\"));\r\n    // Set up initial Value\r\n    String testValue = \"Original Value\";\r\n    final String testProperty = \"stringIndexed\";\r\n    final TestBean instance = (TestBean) ((WrapDynaBean) bean).getInstance();\r\n    instance.setStringIndexed(0, testValue);\r\n    assertEquals(testValue, instance.getStringIndexed(0), \"Check String property\");\r\n    // Test Valid Get & Set\r\n    testValue = \"Some new value\";\r\n    bean.set(testProperty, 0, testValue);\r\n    assertEquals(testValue, instance.getStringIndexed(0), \"Test Set\");\r\n    assertEquals(testValue, bean.get(testProperty, 0), \"Test Get\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\WrapDynaBeanTest.java",
  "methodName" : "testInitWithDynaClass",
  "sourceCode" : "/**\r\n * Tests whether a WrapDynaClass can be provided when constructing a bean.\r\n */\r\n@Test\r\nvoid testInitWithDynaClass() {\r\n    final WrapDynaClass clazz = WrapDynaClass.createDynaClass(TestBean.class);\r\n    bean = new WrapDynaBean(new TestBean(), clazz);\r\n    assertSame(clazz, bean.getDynaClass(), \"Wrong DynaClass\");\r\n    checkSimplePropertyAccess();\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\WrapDynaBeanTest.java",
  "methodName" : "testIntrospectionWithCustomPropUtils",
  "sourceCode" : "/**\r\n * Tests whether a custom PropertyUtilsBean instance can be used for introspection of bean properties.\r\n */\r\n@Test\r\nvoid testIntrospectionWithCustomPropUtils() {\r\n    final PropertyUtilsBean pu = new PropertyUtilsBean();\r\n    pu.addBeanIntrospector(new FluentPropertyBeanIntrospector());\r\n    final WrapDynaClass dynaClass = WrapDynaClass.createDynaClass(FluentIntrospectionTestBean.class, pu);\r\n    final FluentIntrospectionTestBean obj = new FluentIntrospectionTestBean();\r\n    bean = new WrapDynaBean(obj, dynaClass);\r\n    bean.set(\"fluentProperty\", \"testvalue\");\r\n    assertEquals(\"testvalue\", obj.getStringProperty(), \"Property not set\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\WrapDynaBeanTest.java",
  "methodName" : "testMappedContains",
  "sourceCode" : "/**\r\n * The {@code contains()} method is not supported by the {@code WrapDynaBean} implementation class.\r\n */\r\n@Override\r\n@Test\r\nvoid testMappedContains() {\r\n    assertThrows(UnsupportedOperationException.class, () -> bean.contains(\"mappedProperty\", \"First Key\"));\r\n    assertThrows(UnsupportedOperationException.class, () -> bean.contains(\"mappedProperty\", \"Unknown Key\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\WrapDynaBeanTest.java",
  "methodName" : "testMappedRemove",
  "sourceCode" : "/**\r\n * The {@code remove()} method is not supported by the {@code WrapDynaBean} implementation class.\r\n */\r\n@Override\r\n@Test\r\nvoid testMappedRemove() {\r\n    assertThrows(UnsupportedOperationException.class, () -> bean.contains(\"mappedProperty\", \"First Key\"));\r\n    assertThrows(UnsupportedOperationException.class, () -> bean.remove(\"mappedProperty\", \"First Key\"));\r\n    assertThrows(UnsupportedOperationException.class, () -> bean.contains(\"mappedProperty\", \"Unknown Key\"));\r\n    assertThrows(UnsupportedOperationException.class, () -> bean.remove(\"mappedProperty\", \"Unknown Key\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\WrapDynaBeanTest.java",
  "methodName" : "testNewInstance",
  "sourceCode" : "/**\r\n * Tests the newInstance implementation for WrapDynaClass\r\n */\r\n@Test\r\nvoid testNewInstance() throws Exception {\r\n    final WrapDynaClass dynaClass = WrapDynaClass.createDynaClass(AlphaBean.class);\r\n    final Object createdInstance = dynaClass.newInstance();\r\n    assertInstanceOf(WrapDynaBean.class, createdInstance, \"Object type is WrapDynaBean\");\r\n    final WrapDynaBean dynaBean = (WrapDynaBean) createdInstance;\r\n    assertInstanceOf(AlphaBean.class, dynaBean.getInstance(), \"Object type is AlphaBean\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\WrapDynaBeanTest.java",
  "methodName" : "testNotSerializableException",
  "sourceCode" : "/**\r\n * Serialization and deserialization tests. (WrapDynaBean is now serializable, although WrapDynaClass still is not)\r\n */\r\n@Override\r\n@Test\r\nvoid testNotSerializableException() throws Exception {\r\n    // Create a bean and set a value\r\n    final WrapDynaBean origBean = new WrapDynaBean(new TestBean());\r\n    final Integer newValue = Integer.valueOf(789);\r\n    assertEquals(Integer.valueOf(123), origBean.get(\"intProperty\"), \"origBean default\");\r\n    origBean.set(\"intProperty\", newValue);\r\n    assertEquals(newValue, origBean.get(\"intProperty\"), \"origBean new value\");\r\n    // Serialize/Deserialize & test value\r\n    assertThrows(NotSerializableException.class, () -> serializeDeserialize(origBean, \"First Test\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-beanutils\\src\\test\\java\\org\\apache\\commons\\beanutils2\\WrapDynaBeanTest.java",
  "methodName" : "testSimpleProperties",
  "sourceCode" : "/**\r\n * The {@code set()} method.\r\n */\r\n@Test\r\nvoid testSimpleProperties() {\r\n    checkSimplePropertyAccess();\r\n}",
  "annotations" : [ "Test" ]
} ]