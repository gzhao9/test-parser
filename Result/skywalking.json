[ {
  "filePath" : "d:\\chenhao\\test project\\skywalking\\oap-server\\ai-pipeline\\src\\test\\java\\BaselineServerTest.java",
  "methodName" : "queryServices",
  "sourceCode" : "@Test\r\npublic void queryServices() throws Exception {\r\n    final List<PredictServiceMetrics> metrics = queryService.queryPredictMetrics(Arrays.asList(ServiceMetrics.builder().serviceName(\"test\").metricsNames(Arrays.asList(\"service_cpm\")).build()), TimeBucket.getTimeBucket(System.currentTimeMillis() - TimeUnit.HOURS.toMillis(4), DownSampling.Hour), TimeBucket.getTimeBucket(System.currentTimeMillis(), DownSampling.Hour));\r\n    assertNotNull(metrics);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\skywalking\\oap-server\\ai-pipeline\\src\\test\\java\\BaselineServerTest.java",
  "methodName" : "queryMetricsNames",
  "sourceCode" : "@Test\r\npublic void queryMetricsNames() {\r\n    final List<String> metrics = queryService.querySupportedMetrics();\r\n    assertNotNull(metrics);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\skywalking\\oap-server\\analyzer\\agent-analyzer\\src\\test\\java\\org\\apache\\skywalking\\oap\\server\\analyzer\\provider\\meter\\process\\MeterProcessorTest.java",
  "methodName" : "testProcess",
  "sourceCode" : "@Test\r\npublic void testProcess() {\r\n    AtomicReference<AvgHistogramFunction> data = new AtomicReference<>();\r\n    doAnswer(invocationOnMock -> {\r\n        if (AvgHistogramFunction.class.isAssignableFrom(invocationOnMock.getArgument(0).getClass())) {\r\n            data.set(invocationOnMock.getArgument(0));\r\n        }\r\n        return null;\r\n    }).when(meterSystem).doStreamingCalculation(any());\r\n    processor.read(MeterData.newBuilder().setService(service).setServiceInstance(serviceInstance).setTimestamp(System.currentTimeMillis()).setHistogram(MeterHistogram.newBuilder().setName(\"test_histogram\").addValues(MeterBucketValue.newBuilder().setIsNegativeInfinity(true).setCount(10).build()).addValues(MeterBucketValue.newBuilder().setBucket(0).setCount(20).build()).addValues(MeterBucketValue.newBuilder().setBucket(10).setCount(10).build()).build()).build());\r\n    processor.process();\r\n    // verify data\r\n    final AvgHistogramFunction func = data.get();\r\n    final DataTable summation = new DataTable();\r\n    summation.put(Bucket.INFINITE_NEGATIVE, 10L);\r\n    summation.put(\"0\", 20L);\r\n    summation.put(\"10\", 10L);\r\n    Assertions.assertEquals(summation, func.getSummation());\r\n    final DataTable count = new DataTable();\r\n    count.put(Bucket.INFINITE_NEGATIVE, 1L);\r\n    count.put(\"0\", 1L);\r\n    count.put(\"10\", 1L);\r\n    Assertions.assertEquals(count, func.getCount());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\skywalking\\oap-server\\analyzer\\agent-analyzer\\src\\test\\java\\org\\apache\\skywalking\\oap\\server\\analyzer\\provider\\trace\\parser\\listener\\strategy\\SegmentStatusAnalyzerTest.java",
  "methodName" : "fromSpanStatus",
  "sourceCode" : "@Test\r\npublic void fromSpanStatus() {\r\n    SegmentStatusAnalyzer exceptionAnalyzer = FROM_SPAN_STATUS.getExceptionAnalyzer();\r\n    Assertions.assertTrue(exceptionAnalyzer.isError(entryErrorSpan));\r\n    Assertions.assertFalse(exceptionAnalyzer.isError(entryNormalSpan));\r\n    Assertions.assertTrue(exceptionAnalyzer.isError(localErrorSpan));\r\n    Assertions.assertTrue(exceptionAnalyzer.isError(localFirstSpan));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\skywalking\\oap-server\\analyzer\\agent-analyzer\\src\\test\\java\\org\\apache\\skywalking\\oap\\server\\analyzer\\provider\\trace\\parser\\listener\\strategy\\SegmentStatusAnalyzerTest.java",
  "methodName" : "fromEntrySpan",
  "sourceCode" : "@Test\r\npublic void fromEntrySpan() {\r\n    SegmentStatusAnalyzer exceptionAnalyzer = FROM_ENTRY_SPAN.getExceptionAnalyzer();\r\n    Assertions.assertTrue(exceptionAnalyzer.isError(entryErrorSpan));\r\n    Assertions.assertFalse(exceptionAnalyzer.isError(entryNormalSpan));\r\n    Assertions.assertFalse(exceptionAnalyzer.isError(localErrorSpan));\r\n    Assertions.assertFalse(exceptionAnalyzer.isError(localFirstSpan));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\skywalking\\oap-server\\analyzer\\agent-analyzer\\src\\test\\java\\org\\apache\\skywalking\\oap\\server\\analyzer\\provider\\trace\\parser\\listener\\strategy\\SegmentStatusAnalyzerTest.java",
  "methodName" : "fromFirstSpan",
  "sourceCode" : "@Test\r\npublic void fromFirstSpan() {\r\n    SegmentStatusAnalyzer exceptionAnalyzer = FROM_FIRST_SPAN.getExceptionAnalyzer();\r\n    Assertions.assertTrue(exceptionAnalyzer.isError(entryErrorSpan));\r\n    Assertions.assertFalse(exceptionAnalyzer.isError(entryNormalSpan));\r\n    Assertions.assertFalse(exceptionAnalyzer.isError(localErrorSpan));\r\n    Assertions.assertTrue(exceptionAnalyzer.isError(localFirstSpan));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\skywalking\\oap-server\\analyzer\\agent-analyzer\\src\\test\\java\\org\\apache\\skywalking\\oap\\server\\analyzer\\provider\\trace\\parser\\listener\\vservice\\VirtualCacheProcessorTest.java",
  "methodName" : "testEmptySpan",
  "sourceCode" : "@Test\r\npublic void testEmptySpan() {\r\n    SpanObject spanObject = SpanObject.newBuilder().setSpanLayer(SpanLayer.Cache).build();\r\n    SegmentObject segmentObject = SegmentObject.newBuilder().build();\r\n    VirtualCacheProcessor cacheVirtualServiceProcessor = buildCacheVirtualServiceProcessor();\r\n    cacheVirtualServiceProcessor.prepareVSIfNecessary(spanObject, segmentObject);\r\n    ArrayList<Source> sources = new ArrayList<>();\r\n    cacheVirtualServiceProcessor.emitTo(sources::add);\r\n    Assertions.assertTrue(sources.isEmpty());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\skywalking\\oap-server\\analyzer\\agent-analyzer\\src\\test\\java\\org\\apache\\skywalking\\oap\\server\\analyzer\\provider\\trace\\parser\\listener\\vservice\\VirtualCacheProcessorTest.java",
  "methodName" : "testExitSpan",
  "sourceCode" : "@Test\r\npublic void testExitSpan() {\r\n    SpanObject spanObject = SpanObject.newBuilder().setSpanLayer(SpanLayer.Cache).setSpanId(0).addAllTags(buildTags()).setSpanType(SpanType.Exit).setPeerBytes(ByteString.copyFrom(\"127.0.0.1:6379\".getBytes(StandardCharsets.UTF_8))).setStartTime(getTimeInMillis(\"2022-09-12 14:13:12.790\")).setEndTime(getTimeInMillis(\"2022-09-12 14:13:13.790\")).build();\r\n    SegmentObject segmentObject = SegmentObject.newBuilder().setTraceId(\"trace-id\").build();\r\n    VirtualCacheProcessor cacheVirtualServiceProcessor = buildCacheVirtualServiceProcessor();\r\n    cacheVirtualServiceProcessor.prepareVSIfNecessary(spanObject, segmentObject);\r\n    ArrayList<Source> sources = new ArrayList<>();\r\n    cacheVirtualServiceProcessor.emitTo(sources::add);\r\n    Assertions.assertEquals(sources.size(), 3);\r\n    ServiceMeta serviceMeta = (ServiceMeta) sources.get(0);\r\n    Assertions.assertEquals(\"127.0.0.1:6379\", serviceMeta.getName());\r\n    Assertions.assertEquals(202209121413L, serviceMeta.getTimeBucket());\r\n    Assertions.assertEquals(Layer.VIRTUAL_CACHE, serviceMeta.getLayer());\r\n    CacheSlowAccess slowAccess = (CacheSlowAccess) sources.get(1);\r\n    Assertions.assertEquals(\"MTI3LjAuMC4xOjYzNzk=.0\", slowAccess.getCacheServiceId());\r\n    Assertions.assertEquals(1000, slowAccess.getLatency());\r\n    Assertions.assertEquals(20220912141312L, slowAccess.getTimeBucket());\r\n    Assertions.assertEquals(VirtualCacheOperation.Read, slowAccess.getOperation());\r\n    Assertions.assertNotNull(slowAccess.getTraceId());\r\n    Assertions.assertNotNull(slowAccess.getCommand());\r\n    Assertions.assertNotNull(slowAccess.getKey());\r\n    CacheAccess cacheAccess = (CacheAccess) sources.get(2);\r\n    Assertions.assertEquals(\"127.0.0.1:6379\", cacheAccess.getName());\r\n    Assertions.assertEquals(1000, cacheAccess.getLatency());\r\n    Assertions.assertEquals(202209121413L, cacheAccess.getTimeBucket());\r\n    Assertions.assertNotNull(cacheAccess.getOperation());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\skywalking\\oap-server\\analyzer\\agent-analyzer\\src\\test\\java\\org\\apache\\skywalking\\oap\\server\\analyzer\\provider\\trace\\parser\\listener\\vservice\\VirtualCacheProcessorTest.java",
  "methodName" : "testExitSpanLessThreshold",
  "sourceCode" : "@Test\r\npublic void testExitSpanLessThreshold() {\r\n    SpanObject spanObject = SpanObject.newBuilder().setSpanLayer(SpanLayer.Cache).setSpanId(0).addAllTags(buildTags()).setSpanType(SpanType.Exit).setPeerBytes(ByteString.copyFrom(\"127.0.0.1:6379\".getBytes(StandardCharsets.UTF_8))).setStartTime(getTimeInMillis(\"2022-09-12 14:13:12.790\")).setEndTime(getTimeInMillis(\"2022-09-12 14:13:12.793\")).build();\r\n    SegmentObject segmentObject = SegmentObject.newBuilder().build();\r\n    VirtualCacheProcessor cacheVirtualServiceProcessor = buildCacheVirtualServiceProcessor();\r\n    cacheVirtualServiceProcessor.prepareVSIfNecessary(spanObject, segmentObject);\r\n    ArrayList<Source> sources = new ArrayList<>();\r\n    cacheVirtualServiceProcessor.emitTo(sources::add);\r\n    Assertions.assertEquals(sources.size(), 2);\r\n    ServiceMeta serviceMeta = (ServiceMeta) sources.get(0);\r\n    Assertions.assertEquals(\"127.0.0.1:6379\", serviceMeta.getName());\r\n    Assertions.assertEquals(202209121413L, serviceMeta.getTimeBucket());\r\n    Assertions.assertEquals(Layer.VIRTUAL_CACHE, serviceMeta.getLayer());\r\n    CacheAccess cacheAccess = (CacheAccess) sources.get(1);\r\n    Assertions.assertEquals(\"127.0.0.1:6379\", cacheAccess.getName());\r\n    Assertions.assertEquals(3, cacheAccess.getLatency());\r\n    Assertions.assertEquals(202209121413L, cacheAccess.getTimeBucket());\r\n    Assertions.assertNotNull(cacheAccess.getOperation());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\skywalking\\oap-server\\analyzer\\agent-analyzer\\src\\test\\java\\org\\apache\\skywalking\\oap\\server\\analyzer\\provider\\trace\\parser\\listener\\vservice\\VirtualCacheProcessorTest.java",
  "methodName" : "testLocalSpan",
  "sourceCode" : "@Test\r\npublic void testLocalSpan() {\r\n    SpanObject spanObject = SpanObject.newBuilder().setSpanLayer(SpanLayer.Cache).setSpanId(0).addAllTags(buildTags()).setSpanType(SpanType.Local).setStartTime(getTimeInMillis(\"2022-09-12 14:13:12.790\")).setEndTime(getTimeInMillis(\"2022-09-12 14:13:13.790\")).build();\r\n    SegmentObject segmentObject = SegmentObject.newBuilder().build();\r\n    VirtualCacheProcessor cacheVirtualServiceProcessor = buildCacheVirtualServiceProcessor();\r\n    cacheVirtualServiceProcessor.prepareVSIfNecessary(spanObject, segmentObject);\r\n    ArrayList<Source> sources = new ArrayList<>();\r\n    cacheVirtualServiceProcessor.emitTo(sources::add);\r\n    Assertions.assertEquals(sources.size(), 3);\r\n    ServiceMeta serviceMeta = (ServiceMeta) sources.get(0);\r\n    Assertions.assertEquals(\"redis-local\", serviceMeta.getName());\r\n    Assertions.assertEquals(202209121413L, serviceMeta.getTimeBucket());\r\n    Assertions.assertEquals(Layer.VIRTUAL_CACHE, serviceMeta.getLayer());\r\n    CacheSlowAccess slowAccess = (CacheSlowAccess) sources.get(1);\r\n    Assertions.assertEquals(\"cmVkaXMtbG9jYWw=.0\", slowAccess.getCacheServiceId());\r\n    Assertions.assertEquals(1000, slowAccess.getLatency());\r\n    Assertions.assertEquals(20220912141312L, slowAccess.getTimeBucket());\r\n    Assertions.assertEquals(VirtualCacheOperation.Read, slowAccess.getOperation());\r\n    Assertions.assertNotNull(slowAccess.getTraceId());\r\n    Assertions.assertNotNull(slowAccess.getCommand());\r\n    Assertions.assertNotNull(slowAccess.getKey());\r\n    CacheAccess cacheAccess = (CacheAccess) sources.get(2);\r\n    Assertions.assertEquals(\"redis-local\", cacheAccess.getName());\r\n    Assertions.assertEquals(1000, cacheAccess.getLatency());\r\n    Assertions.assertEquals(202209121413L, cacheAccess.getTimeBucket());\r\n    Assertions.assertNotNull(cacheAccess.getOperation());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\skywalking\\oap-server\\analyzer\\agent-analyzer\\src\\test\\java\\org\\apache\\skywalking\\oap\\server\\analyzer\\provider\\trace\\parser\\listener\\vservice\\VirtualDatabaseProcessorTest.java",
  "methodName" : "testEmptySpan",
  "sourceCode" : "@Test\r\npublic void testEmptySpan() {\r\n    SpanObject spanObject = SpanObject.newBuilder().setSpanLayer(SpanLayer.Cache).build();\r\n    SegmentObject segmentObject = SegmentObject.newBuilder().build();\r\n    VirtualDatabaseProcessor processor = buildVirtualServiceProcessor();\r\n    processor.prepareVSIfNecessary(spanObject, segmentObject);\r\n    ArrayList<Source> sources = new ArrayList<>();\r\n    processor.emitTo(sources::add);\r\n    Assertions.assertTrue(sources.isEmpty());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\skywalking\\oap-server\\analyzer\\agent-analyzer\\src\\test\\java\\org\\apache\\skywalking\\oap\\server\\analyzer\\provider\\trace\\parser\\listener\\vservice\\VirtualDatabaseProcessorTest.java",
  "methodName" : "testExitSpan",
  "sourceCode" : "@Test\r\npublic void testExitSpan() {\r\n    SpanObject spanObject = SpanObject.newBuilder().setSpanLayer(SpanLayer.Database).setSpanId(0).addAllTags(buildTags()).setSpanType(SpanType.Exit).setPeerBytes(ByteString.copyFrom(\"127.0.0.1:3306\".getBytes(StandardCharsets.UTF_8))).setStartTime(getTimeInMillis(\"2022-09-12 14:13:12.790\")).setEndTime(getTimeInMillis(\"2022-09-12 14:13:13.790\")).build();\r\n    SegmentObject segmentObject = SegmentObject.newBuilder().setTraceId(\"trace-id-1\").build();\r\n    VirtualDatabaseProcessor processor = buildVirtualServiceProcessor();\r\n    processor.prepareVSIfNecessary(spanObject, segmentObject);\r\n    ArrayList<Source> sources = new ArrayList<>();\r\n    processor.emitTo(sources::add);\r\n    Assertions.assertEquals(sources.size(), 3);\r\n    ServiceMeta serviceMeta = (ServiceMeta) sources.get(0);\r\n    Assertions.assertEquals(\"127.0.0.1:3306\", serviceMeta.getName());\r\n    Assertions.assertEquals(202209121413L, serviceMeta.getTimeBucket());\r\n    Assertions.assertEquals(Layer.VIRTUAL_DATABASE, serviceMeta.getLayer());\r\n    DatabaseAccess databaseAccess = (DatabaseAccess) sources.get(1);\r\n    Assertions.assertEquals(\"127.0.0.1:3306\", databaseAccess.getName());\r\n    Assertions.assertEquals(1000, databaseAccess.getLatency());\r\n    Assertions.assertEquals(202209121413L, databaseAccess.getTimeBucket());\r\n    DatabaseSlowStatement slowStatement = (DatabaseSlowStatement) sources.get(2);\r\n    Assertions.assertEquals(\"MTI3LjAuMC4xOjMzMDY=.0\", slowStatement.getDatabaseServiceId());\r\n    Assertions.assertEquals(1000, slowStatement.getLatency());\r\n    Assertions.assertEquals(20220912141312L, slowStatement.getTimeBucket());\r\n    Assertions.assertEquals(\"trace-id-1\", slowStatement.getTraceId());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\skywalking\\oap-server\\analyzer\\agent-analyzer\\src\\test\\java\\org\\apache\\skywalking\\oap\\server\\analyzer\\provider\\trace\\parser\\listener\\vservice\\VirtualDatabaseProcessorTest.java",
  "methodName" : "testExitSpanLessThreshold",
  "sourceCode" : "@Test\r\npublic void testExitSpanLessThreshold() {\r\n    SpanObject spanObject = SpanObject.newBuilder().setSpanLayer(SpanLayer.Database).setSpanId(0).addAllTags(buildTags()).setSpanType(SpanType.Exit).setPeerBytes(ByteString.copyFrom(\"127.0.0.1:3306\".getBytes(StandardCharsets.UTF_8))).setStartTime(getTimeInMillis(\"2022-09-12 14:13:12.790\")).setEndTime(getTimeInMillis(\"2022-09-12 14:13:12.793\")).build();\r\n    SegmentObject segmentObject = SegmentObject.newBuilder().build();\r\n    VirtualDatabaseProcessor processor = buildVirtualServiceProcessor();\r\n    processor.prepareVSIfNecessary(spanObject, segmentObject);\r\n    ArrayList<Source> sources = new ArrayList<>();\r\n    processor.emitTo(sources::add);\r\n    Assertions.assertEquals(sources.size(), 2);\r\n    ServiceMeta serviceMeta = (ServiceMeta) sources.get(0);\r\n    Assertions.assertEquals(\"127.0.0.1:3306\", serviceMeta.getName());\r\n    Assertions.assertEquals(202209121413L, serviceMeta.getTimeBucket());\r\n    Assertions.assertEquals(Layer.VIRTUAL_DATABASE, serviceMeta.getLayer());\r\n    DatabaseAccess databaseAccess = (DatabaseAccess) sources.get(1);\r\n    Assertions.assertEquals(\"127.0.0.1:3306\", databaseAccess.getName());\r\n    Assertions.assertEquals(3, databaseAccess.getLatency());\r\n    Assertions.assertEquals(202209121413L, databaseAccess.getTimeBucket());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\skywalking\\oap-server\\analyzer\\agent-analyzer\\src\\test\\java\\org\\apache\\skywalking\\oap\\server\\analyzer\\provider\\trace\\sampling\\SamplingPolicySettingsReaderTest.java",
  "methodName" : "testReadPolicySettings",
  "sourceCode" : "@Test\r\npublic void testReadPolicySettings() {\r\n    SamplingPolicySettingsReader reader = new SamplingPolicySettingsReader(this.getClass().getClassLoader().getResourceAsStream(\"trace-sampling-policy-settings.yml\"));\r\n    SamplingPolicySettings settings = reader.readSettings();\r\n    assertEquals(settings.getDefaultPolicy().getRate().intValue(), 10000);\r\n    assertEquals(settings.getDefaultPolicy().getDuration().intValue(), -1);\r\n    assertEquals(settings.get(\"name1\").getRate().intValue(), 1000);\r\n    assertEquals(settings.get(\"name1\").getDuration().intValue(), 20000);\r\n    assertEquals(settings.get(\"name2\").getRate().intValue(), 2000);\r\n    assertEquals(settings.get(\"name2\").getDuration().intValue(), 30000);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\skywalking\\oap-server\\analyzer\\agent-analyzer\\src\\test\\java\\org\\apache\\skywalking\\oap\\server\\analyzer\\provider\\trace\\TraceSamplingPolicyWatcherTest.java",
  "methodName" : "testStaticConfigInit",
  "sourceCode" : "@Test\r\npublic void testStaticConfigInit() {\r\n    TraceSamplingPolicyWatcher watcher = new TraceSamplingPolicyWatcher(moduleConfig, provider);\r\n    // default sample = 10000\r\n    globalDefaultSamplingRateEquals(watcher, 9999);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\skywalking\\oap-server\\analyzer\\agent-analyzer\\src\\test\\java\\org\\apache\\skywalking\\oap\\server\\analyzer\\provider\\trace\\TraceSamplingPolicyWatcherTest.java",
  "methodName" : "testTraceLatencyThresholdDynamicUpdate",
  "sourceCode" : "@Test\r\n@Timeout(20)\r\npublic void testTraceLatencyThresholdDynamicUpdate() throws InterruptedException {\r\n    ConfigWatcherRegister register = new TraceLatencyThresholdMockConfigWatcherRegister(3);\r\n    TraceSamplingPolicyWatcher watcher = new TraceSamplingPolicyWatcher(moduleConfig, provider);\r\n    register.registerConfigChangeWatcher(watcher);\r\n    register.start();\r\n    // Default duration is -1, so 3000 must not be sampled,until updating to 3000\r\n    while (!watcher.shouldSample(\"\", 10000, 3000)) {\r\n        Thread.sleep(2000);\r\n    }\r\n    Assertions.assertTrue(watcher.shouldSample(\"\", 10000, 3001));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\skywalking\\oap-server\\analyzer\\agent-analyzer\\src\\test\\java\\org\\apache\\skywalking\\oap\\server\\analyzer\\provider\\trace\\TraceSamplingPolicyWatcherTest.java",
  "methodName" : "testTraceLatencyThresholdNotify",
  "sourceCode" : "@Test\r\npublic void testTraceLatencyThresholdNotify() {\r\n    TraceSamplingPolicyWatcher watcher = new TraceSamplingPolicyWatcher(moduleConfig, provider);\r\n    ConfigChangeWatcher.ConfigChangeEvent value1 = new ConfigChangeWatcher.ConfigChangeEvent(\"default:\\n\" + \"  duration: 8000\", ConfigChangeWatcher.EventType.MODIFY);\r\n    watcher.notify(value1);\r\n    globalDefaultDurationEquals(watcher, 8000);\r\n    Assertions.assertEquals(watcher.value(), \"default:\\n\" + \"  duration: 8000\");\r\n    ConfigChangeWatcher.ConfigChangeEvent value2 = new ConfigChangeWatcher.ConfigChangeEvent(\"default:\\n\" + \"  duration: 8000\", ConfigChangeWatcher.EventType.DELETE);\r\n    watcher.notify(value2);\r\n    Assertions.assertEquals(watcher.value(), null);\r\n    ConfigChangeWatcher.ConfigChangeEvent value3 = new ConfigChangeWatcher.ConfigChangeEvent(\"default:\\n\" + \"  duration: 800\", ConfigChangeWatcher.EventType.ADD);\r\n    watcher.notify(value3);\r\n    globalDefaultDurationEquals(watcher, 800);\r\n    Assertions.assertEquals(watcher.value(), \"default:\\n\" + \"  duration: 800\");\r\n    ConfigChangeWatcher.ConfigChangeEvent value4 = new ConfigChangeWatcher.ConfigChangeEvent(\"default:\\n\" + \"  duration: abc\", ConfigChangeWatcher.EventType.MODIFY);\r\n    watcher.notify(value4);\r\n    globalDefaultDurationEquals(watcher, 800);\r\n    Assertions.assertEquals(watcher.value(), \"default:\\n\" + \"  duration: 800\");\r\n    ConfigChangeWatcher.ConfigChangeEvent value5 = new ConfigChangeWatcher.ConfigChangeEvent(\"default:\\n\" + \"  rate: abc\\n\" + \"  duration: 900\", ConfigChangeWatcher.EventType.MODIFY);\r\n    watcher.notify(value5);\r\n    globalDefaultDurationEquals(watcher, 800);\r\n    Assertions.assertEquals(watcher.value(), \"default:\\n\" + \"  duration: 800\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\skywalking\\oap-server\\analyzer\\agent-analyzer\\src\\test\\java\\org\\apache\\skywalking\\oap\\server\\analyzer\\provider\\trace\\TraceSamplingPolicyWatcherTest.java",
  "methodName" : "testDefaultSampleRateDynamicUpdate",
  "sourceCode" : "@Test\r\n@Timeout(20)\r\npublic void testDefaultSampleRateDynamicUpdate() throws InterruptedException {\r\n    ConfigWatcherRegister register = new DefaultSampleRateMockConfigWatcherRegister(3);\r\n    TraceSamplingPolicyWatcher watcher = new TraceSamplingPolicyWatcher(moduleConfig, provider);\r\n    register.registerConfigChangeWatcher(watcher);\r\n    register.start();\r\n    // Default is 10000, so 9000 must be sampled,until updating to 9000\r\n    while (watcher.shouldSample(\"\", 9000, -1)) {\r\n        Thread.sleep(2000);\r\n    }\r\n    globalDefaultSamplingRateEquals(watcher, 8999);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\skywalking\\oap-server\\analyzer\\agent-analyzer\\src\\test\\java\\org\\apache\\skywalking\\oap\\server\\analyzer\\provider\\trace\\TraceSamplingPolicyWatcherTest.java",
  "methodName" : "testDefaultSampleRateNotify",
  "sourceCode" : "@Test\r\npublic void testDefaultSampleRateNotify() {\r\n    TraceSamplingPolicyWatcher watcher = new TraceSamplingPolicyWatcher(moduleConfig, provider);\r\n    ConfigChangeWatcher.ConfigChangeEvent value1 = new ConfigChangeWatcher.ConfigChangeEvent(\"default:\\n\" + \"  rate: 8000\", ConfigChangeWatcher.EventType.MODIFY);\r\n    watcher.notify(value1);\r\n    globalDefaultSamplingRateEquals(watcher, 7999);\r\n    Assertions.assertEquals(watcher.value(), \"default:\\n\" + \"  rate: 8000\");\r\n    ConfigChangeWatcher.ConfigChangeEvent value2 = new ConfigChangeWatcher.ConfigChangeEvent(\"default:\\n\" + \"  rate: 1000\", ConfigChangeWatcher.EventType.DELETE);\r\n    watcher.notify(value2);\r\n    globalDefaultSamplingRateEquals(watcher, 9999);\r\n    Assertions.assertEquals(watcher.value(), null);\r\n    ConfigChangeWatcher.ConfigChangeEvent value3 = new ConfigChangeWatcher.ConfigChangeEvent(\"default:\\n\" + \"  rate: 500\", ConfigChangeWatcher.EventType.ADD);\r\n    watcher.notify(value3);\r\n    globalDefaultSamplingRateEquals(watcher, 499);\r\n    Assertions.assertEquals(watcher.value(), \"default:\\n\" + \"  rate: 500\");\r\n    ConfigChangeWatcher.ConfigChangeEvent value4 = new ConfigChangeWatcher.ConfigChangeEvent(\"default:\\n\" + \"  rate: abc\", ConfigChangeWatcher.EventType.MODIFY);\r\n    watcher.notify(value4);\r\n    globalDefaultSamplingRateEquals(watcher, 499);\r\n    Assertions.assertEquals(watcher.value(), \"default:\\n\" + \"  rate: 500\");\r\n    ConfigChangeWatcher.ConfigChangeEvent value5 = new ConfigChangeWatcher.ConfigChangeEvent(\"default:\\n\" + \"  rate: 400\" + \"  duration: abc\", ConfigChangeWatcher.EventType.MODIFY);\r\n    watcher.notify(value5);\r\n    globalDefaultSamplingRateEquals(watcher, 499);\r\n    Assertions.assertEquals(watcher.value(), \"default:\\n\" + \"  rate: 500\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\skywalking\\oap-server\\analyzer\\agent-analyzer\\src\\test\\java\\org\\apache\\skywalking\\oap\\server\\analyzer\\provider\\trace\\TraceSamplingPolicyWatcherTest.java",
  "methodName" : "testServiceSampleRateDynamicUpdate",
  "sourceCode" : "@Test\r\n@Timeout(20)\r\npublic void testServiceSampleRateDynamicUpdate() throws InterruptedException {\r\n    ConfigWatcherRegister register = new ServiceMockConfigWatcherRegister(3);\r\n    TraceSamplingPolicyWatcher watcher = new TraceSamplingPolicyWatcher(moduleConfig, provider);\r\n    Whitebox.setInternalState(provider, \"moduleConfig\", moduleConfig);\r\n    provider.getModuleConfig().setTraceSamplingPolicyWatcher(watcher);\r\n    register.registerConfigChangeWatcher(watcher);\r\n    register.start();\r\n    while (getSamplingPolicy(\"serverName1\", watcher) == null) {\r\n        Thread.sleep(1000);\r\n    }\r\n    SamplingPolicy samplingPolicy = getSamplingPolicy(\"serverName1\", watcher);\r\n    Assertions.assertEquals(samplingPolicy.getRate().intValue(), 2000);\r\n    Assertions.assertEquals(samplingPolicy.getDuration().intValue(), 30000);\r\n    Assertions.assertEquals(getSamplingPolicy(\"serverName1\", provider.getModuleConfig().getTraceSamplingPolicyWatcher()).getRate().intValue(), 2000);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\skywalking\\oap-server\\analyzer\\agent-analyzer\\src\\test\\java\\org\\apache\\skywalking\\oap\\server\\analyzer\\provider\\trace\\TraceSamplingPolicyWatcherTest.java",
  "methodName" : "testServiceSampleRateNotify",
  "sourceCode" : "@Test\r\npublic void testServiceSampleRateNotify() {\r\n    TraceSamplingPolicyWatcher watcher = new TraceSamplingPolicyWatcher(moduleConfig, provider);\r\n    ConfigChangeWatcher.ConfigChangeEvent value1 = new ConfigChangeWatcher.ConfigChangeEvent(\"services:\\n\" + \"  - name: serverName1\\n\" + \"    rate: 8000\\n\" + \"    duration: 20000\", ConfigChangeWatcher.EventType.MODIFY);\r\n    watcher.notify(value1);\r\n    Assertions.assertEquals(getSamplingPolicy(\"serverName1\", watcher).getRate().intValue(), 8000);\r\n    Assertions.assertEquals(getSamplingPolicy(\"serverName1\", watcher).getDuration().intValue(), 20000);\r\n    Assertions.assertEquals(watcher.value(), \"services:\\n\" + \"  - name: serverName1\\n\" + \"    rate: 8000\\n\" + \"    duration: 20000\");\r\n    // use serverName1's sampling rate\r\n    Assertions.assertTrue(watcher.shouldSample(\"serverName1\", 7999, -1));\r\n    Assertions.assertTrue(watcher.shouldSample(\"serverName1\", 10000, 20000));\r\n    ConfigChangeWatcher.ConfigChangeEvent value2 = new ConfigChangeWatcher.ConfigChangeEvent(\"\", ConfigChangeWatcher.EventType.DELETE);\r\n    watcher.notify(value2);\r\n    Assertions.assertNull(getSamplingPolicy(\"serverName1\", watcher));\r\n    // use global sampling rate\r\n    Assertions.assertTrue(watcher.shouldSample(\"serverName1\", 9999, -1));\r\n    Assertions.assertFalse(watcher.shouldSample(\"serverName1\", 10000, 1));\r\n    Assertions.assertEquals(watcher.value(), null);\r\n    ConfigChangeWatcher.ConfigChangeEvent value3 = new ConfigChangeWatcher.ConfigChangeEvent(\"services:\\n\" + \"  - name: serverName1\\n\" + \"    rate: 8000\\n\" + \"    duration: 20000\", ConfigChangeWatcher.EventType.ADD);\r\n    watcher.notify(value3);\r\n    Assertions.assertEquals(getSamplingPolicy(\"serverName1\", watcher).getRate().intValue(), 8000);\r\n    Assertions.assertEquals(getSamplingPolicy(\"serverName1\", watcher).getDuration().intValue(), 20000);\r\n    Assertions.assertTrue(watcher.shouldSample(\"serverName1\", 7999, -1));\r\n    Assertions.assertTrue(watcher.shouldSample(\"serverName1\", 10000, 20000));\r\n    Assertions.assertEquals(watcher.value(), \"services:\\n\" + \"  - name: serverName1\\n\" + \"    rate: 8000\\n\" + \"    duration: 20000\");\r\n    ConfigChangeWatcher.ConfigChangeEvent value4 = new ConfigChangeWatcher.ConfigChangeEvent(\"services:\\n\" + \"  - name: serverName1\\n\" + \"    rate: 9000\\n\" + \"    duration: 30000\", ConfigChangeWatcher.EventType.MODIFY);\r\n    watcher.notify(value4);\r\n    Assertions.assertEquals(getSamplingPolicy(\"serverName1\", watcher).getRate().intValue(), 9000);\r\n    Assertions.assertEquals(getSamplingPolicy(\"serverName1\", watcher).getDuration().intValue(), 30000);\r\n    Assertions.assertTrue(watcher.shouldSample(\"serverName1\", 8999, -1));\r\n    Assertions.assertTrue(watcher.shouldSample(\"serverName1\", 10000, 30000));\r\n    Assertions.assertEquals(watcher.value(), \"services:\\n\" + \"  - name: serverName1\\n\" + \"    rate: 9000\\n\" + \"    duration: 30000\");\r\n    ConfigChangeWatcher.ConfigChangeEvent value5 = new ConfigChangeWatcher.ConfigChangeEvent(\"services:\\n\" + \"  - name: serverName1\\n\" + \"    rate: 8000\\n\" + \"    duration: abc\", ConfigChangeWatcher.EventType.MODIFY);\r\n    watcher.notify(value5);\r\n    Assertions.assertEquals(getSamplingPolicy(\"serverName1\", watcher).getRate().intValue(), 9000);\r\n    Assertions.assertEquals(getSamplingPolicy(\"serverName1\", watcher).getDuration().intValue(), 30000);\r\n    Assertions.assertTrue(watcher.shouldSample(\"serverName1\", 8999, -1));\r\n    Assertions.assertTrue(watcher.shouldSample(\"serverName1\", 10000, 30000));\r\n    Assertions.assertEquals(watcher.value(), \"services:\\n\" + \"  - name: serverName1\\n\" + \"    rate: 9000\\n\" + \"    duration: 30000\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\skywalking\\oap-server\\analyzer\\agent-analyzer\\src\\test\\java\\org\\apache\\skywalking\\oap\\server\\analyzer\\provider\\trace\\UninstrumentedGatewaysConfigTest.java",
  "methodName" : "testParseGatewayYAML",
  "sourceCode" : "@Test\r\npublic void testParseGatewayYAML() throws Exception {\r\n    final UninstrumentedGatewaysConfig uninstrumentedGatewaysConfig = new UninstrumentedGatewaysConfig(new MockProvider());\r\n    UninstrumentedGatewaysConfig.GatewayInfos gatewayInfos = Whitebox.invokeMethod(uninstrumentedGatewaysConfig, \"parseGatewaysFromFile\", \"gateways.yml\");\r\n    Assertions.assertEquals(1, gatewayInfos.getGateways().size());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\skywalking\\oap-server\\analyzer\\log-analyzer\\src\\test\\java\\org\\apache\\skywalking\\oap\\log\\analyzer\\dsl\\DSLSecurityTest.java",
  "methodName" : "testSecurity",
  "sourceCode" : "@ParameterizedTest(name = \"{0}\")\r\n@MethodSource(\"data\")\r\npublic void testSecurity(String name, String script) {\r\n    assertThrows(MultipleCompilationErrorsException.class, () -> {\r\n        final DSL dsl = DSL.of(manager, new LogAnalyzerModuleConfig(), script);\r\n        Whitebox.setInternalState(Whitebox.getInternalState(dsl, \"filterSpec\"), \"sinkListenerFactories\", Collections.emptyList());\r\n        dsl.bind(new Binding().log(LogData.newBuilder()));\r\n        dsl.evaluate();\r\n    });\r\n}",
  "annotations" : [ "ParameterizedTest" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\skywalking\\oap-server\\analyzer\\log-analyzer\\src\\test\\java\\org\\apache\\skywalking\\oap\\log\\analyzer\\dsl\\DSLTest.java",
  "methodName" : "testDslStaticCompile",
  "sourceCode" : "@ParameterizedTest(name = \"{0}\")\r\n@MethodSource(\"data\")\r\npublic void testDslStaticCompile(String name, String script) throws ModuleStartException {\r\n    final DSL dsl = DSL.of(manager, new LogAnalyzerModuleConfig(), script);\r\n    Whitebox.setInternalState(Whitebox.getInternalState(dsl, \"filterSpec\"), \"sinkListenerFactories\", Collections.emptyList());\r\n    dsl.bind(new Binding().log(LogData.newBuilder().build()));\r\n    dsl.evaluate();\r\n}",
  "annotations" : [ "ParameterizedTest" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\skywalking\\oap-server\\analyzer\\meter-analyzer\\src\\test\\java\\org\\apache\\skywalking\\oap\\meter\\analyzer\\dsl\\AggregationTest.java",
  "methodName" : "test",
  "sourceCode" : "@ParameterizedTest(name = \"{0}\")\r\n@MethodSource(\"data\")\r\npublic void test(String name, ImmutableMap<String, SampleFamily> input, String expression, Result want, boolean isThrow) {\r\n    Expression e = DSL.parse(name, expression);\r\n    Result r = null;\r\n    try {\r\n        r = e.run(input);\r\n    } catch (Throwable t) {\r\n        if (isThrow) {\r\n            return;\r\n        }\r\n        log.error(\"Test failed\", t);\r\n        fail(\"Should not throw anything\");\r\n    }\r\n    if (isThrow) {\r\n        fail(\"Should throw something\");\r\n    }\r\n    assertThat(r).isEqualTo(want);\r\n}",
  "annotations" : [ "ParameterizedTest" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\skywalking\\oap-server\\analyzer\\meter-analyzer\\src\\test\\java\\org\\apache\\skywalking\\oap\\meter\\analyzer\\dsl\\AnalyzerTest.java",
  "methodName" : "testSingle",
  "sourceCode" : "@Test\r\npublic void testSingle() {\r\n    analyzer = Analyzer.build(\"sum_service_instance\", null, \"http_success_request.sum(['region', 'idc']).instance(['idc'] , ['region'], Layer.GENERAL)\", meterSystem);\r\n    ImmutableMap<String, SampleFamily> input = ImmutableMap.of(\"http_success_request\", SampleFamilyBuilder.newBuilder(Sample.builder().labels(of(\"idc\", \"t1\")).value(50).build(), Sample.builder().labels(of(\"idc\", \"t3\", \"region\", \"cn\", \"svc\", \"catalog\")).value(51).name(\"http_success_request\").build(), Sample.builder().labels(of(\"idc\", \"t1\", \"region\", \"us\", \"svc\", \"product\")).value(50).name(\"http_success_request\").build(), Sample.builder().labels(of(\"idc\", \"t1\", \"region\", \"us\", \"instance\", \"10.0.0.1\")).value(100).name(\"http_success_request\").build(), Sample.builder().labels(of(\"idc\", \"t3\", \"region\", \"cn\", \"instance\", \"10.0.0.1\")).value(3).name(\"http_success_request\").build()).build());\r\n    Map<String, AvgFunction> actValues = new HashMap<>();\r\n    doAnswer(invocationOnMock -> {\r\n        AvgFunction actValue = (AvgFunction) invocationOnMock.getArgument(0, AcceptableValue.class);\r\n        actValues.put(actValue.getEntityId(), actValue);\r\n        return null;\r\n    }).when(meterSystem).doStreamingCalculation(any());\r\n    analyzer.analyse(input);\r\n    AvgFunction t1 = actValues.get(IDManager.ServiceInstanceID.buildId(IDManager.ServiceID.buildId(\"t1\", true), \"\"));\r\n    AvgFunction t1Us = actValues.get(IDManager.ServiceInstanceID.buildId(IDManager.ServiceID.buildId(\"t1\", true), \"us\"));\r\n    AvgFunction t3Cn = actValues.get(IDManager.ServiceInstanceID.buildId(IDManager.ServiceID.buildId(\"t3\", true), \"cn\"));\r\n    assertEquals(50L, t1.getSummation(), 0.0);\r\n    assertEquals(1L, t1.getCount(), 0.0);\r\n    assertEquals(150L, t1Us.getSummation(), 0.0);\r\n    assertEquals(1L, t1Us.getCount(), 0.0);\r\n    assertEquals(54L, t3Cn.getSummation(), 0.0);\r\n    assertEquals(1L, t3Cn.getCount(), 0.0);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\skywalking\\oap-server\\analyzer\\meter-analyzer\\src\\test\\java\\org\\apache\\skywalking\\oap\\meter\\analyzer\\dsl\\AnalyzerTest.java",
  "methodName" : "testLabeled",
  "sourceCode" : "@Test\r\npublic void testLabeled() {\r\n    analyzer = Analyzer.build(\"sum_service_instance_labels\", null, \"http_success_request.sum(['region', 'idc' , 'instance']).instance(['idc'] , ['region'], Layer.GENERAL)\", meterSystem);\r\n    ImmutableMap<String, SampleFamily> input = ImmutableMap.of(\"http_success_request\", SampleFamilyBuilder.newBuilder(Sample.builder().labels(of(\"idc\", \"t1\")).value(50).build(), Sample.builder().labels(of(\"idc\", \"t3\", \"region\", \"cn\", \"svc\", \"catalog\")).value(51).name(\"http_success_request\").build(), Sample.builder().labels(of(\"idc\", \"t1\", \"region\", \"us\", \"svc\", \"product\")).value(50).name(\"http_success_request\").build(), Sample.builder().labels(of(\"idc\", \"t1\", \"region\", \"us\", \"instance\", \"10.0.0.1\")).value(100).name(\"http_success_request\").build(), Sample.builder().labels(of(\"idc\", \"t3\", \"region\", \"cn\", \"instance\", \"10.0.0.1\")).value(3).name(\"http_success_request\").build()).build());\r\n    Map<String, AvgLabeledFunction> actValues = new HashMap<>();\r\n    doAnswer(invocationOnMock -> {\r\n        AvgLabeledFunction actValue = (AvgLabeledFunction) invocationOnMock.getArgument(0, AcceptableValue.class);\r\n        actValues.put(actValue.getEntityId(), actValue);\r\n        return null;\r\n    }).when(meterSystem).doStreamingCalculation(any());\r\n    analyzer.analyse(input);\r\n    AvgLabeledFunction t1 = actValues.get(IDManager.ServiceInstanceID.buildId(IDManager.ServiceID.buildId(\"t1\", true), \"\"));\r\n    AvgLabeledFunction t1Us = actValues.get(IDManager.ServiceInstanceID.buildId(IDManager.ServiceID.buildId(\"t1\", true), \"us\"));\r\n    AvgLabeledFunction t3Cn = actValues.get(IDManager.ServiceInstanceID.buildId(IDManager.ServiceID.buildId(\"t3\", true), \"cn\"));\r\n    assertEquals(50L, t1.getSummation().get(\"{instance=}\"), 0.0);\r\n    assertEquals(1L, t1.getCount().get(\"{instance=}\"), 0.0);\r\n    assertEquals(50L, t1Us.getSummation().get(\"{instance=}\"), 0.0);\r\n    assertEquals(100L, t1Us.getSummation().get(\"{instance=10.0.0.1}\"), 0.0);\r\n    assertEquals(1L, t1Us.getCount().get(\"{instance=}\"), 0.0);\r\n    assertEquals(1L, t1Us.getCount().get(\"{instance=10.0.0.1}\"), 0.0);\r\n    assertEquals(51L, t3Cn.getSummation().get(\"{instance=}\"), 0.0);\r\n    assertEquals(3L, t3Cn.getSummation().get(\"{instance=10.0.0.1}\"), 0.0);\r\n    assertEquals(1L, t3Cn.getCount().get(\"{instance=}\"), 0.0);\r\n    assertEquals(1L, t3Cn.getCount().get(\"{instance=10.0.0.1}\"), 0.0);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\skywalking\\oap-server\\analyzer\\meter-analyzer\\src\\test\\java\\org\\apache\\skywalking\\oap\\meter\\analyzer\\dsl\\AnalyzerTest.java",
  "methodName" : "testHistogramPercentile",
  "sourceCode" : "@Test\r\npublic void testHistogramPercentile() {\r\n    analyzer = Analyzer.build(\"instance_cpu_percentage\", null, \"instance_cpu_percentage.sum(['le' , 'service' , 'instance']).histogram().histogram_percentile([75,99]).service(['service'], Layer.GENERAL)\", meterSystem);\r\n    ImmutableMap<String, SampleFamily> input = ImmutableMap.of(\"instance_cpu_percentage\", SampleFamilyBuilder.newBuilder(Sample.builder().labels(of(\"le\", \"0.025\", \"service\", \"service1\", \"instance\", \"instance1\")).value(100).name(\"instance_cpu_percentage\").build(), Sample.builder().labels(of(\"le\", \"1.25\", \"service\", \"service1\", \"instance\", \"instance1\")).value(300).name(\"instance_cpu_percentage\").build(), Sample.builder().labels(of(\"le\", \"0.75\", \"service\", \"service1\", \"instance\", \"instance2\")).value(122).name(\"instance_cpu_percentage\").build()).build());\r\n    Map<String, AvgHistogramPercentileFunction> actValues = new HashMap<>();\r\n    doAnswer(invocationOnMock -> {\r\n        AvgHistogramPercentileFunction actValue = (AvgHistogramPercentileFunction) invocationOnMock.getArgument(0, AcceptableValue.class);\r\n        if (actValue.getSummation().hasKey(\"{instance=instance1}:25\")) {\r\n            actValues.put(\"instance1\", actValue);\r\n        } else {\r\n            actValues.put(\"instance2\", actValue);\r\n        }\r\n        return null;\r\n    }).when(meterSystem).doStreamingCalculation(any());\r\n    analyzer.analyse(input);\r\n    assertEquals(2, actValues.size());\r\n    String expServiceId = IDManager.ServiceID.buildId(\"service1\", true);\r\n    IntList expRanks = new IntList(2) {\r\n\r\n        {\r\n            add(75);\r\n            add(99);\r\n        }\r\n    };\r\n    actValues.forEach((key, actValue) -> {\r\n        assertEquals(expServiceId, actValue.getEntityId());\r\n        assertThat(expRanks).isEqualTo(actValue.getRanks());\r\n    });\r\n    AvgHistogramPercentileFunction instance1 = actValues.get(\"instance1\");\r\n    AvgHistogramPercentileFunction instance2 = actValues.get(\"instance2\");\r\n    assertEquals(100L, instance1.getSummation().get(\"{instance=instance1}:25\"), 0.0);\r\n    assertEquals(300L, instance1.getSummation().get(\"{instance=instance1}:1250\"), 0.0);\r\n    assertEquals(1L, instance1.getCount().get(\"{instance=instance1}:25\"), 0.0);\r\n    assertEquals(1L, instance1.getCount().get(\"{instance=instance1}:1250\"), 0.0);\r\n    assertEquals(122L, instance2.getSummation().get(\"{instance=instance2}:750\"), 0.0);\r\n    assertEquals(1L, instance2.getCount().get(\"{instance=instance2}:750\"), 0.0);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\skywalking\\oap-server\\analyzer\\meter-analyzer\\src\\test\\java\\org\\apache\\skywalking\\oap\\meter\\analyzer\\dsl\\ArithmeticTest.java",
  "methodName" : "test",
  "sourceCode" : "@ParameterizedTest(name = \"{0}\")\r\n@MethodSource(\"data\")\r\npublic void test(String name, ImmutableMap<String, SampleFamily> input, String expression, Result want, boolean isThrow) {\r\n    Expression e = DSL.parse(name, expression);\r\n    Result r = null;\r\n    try {\r\n        r = e.run(input);\r\n    } catch (Throwable t) {\r\n        if (isThrow) {\r\n            return;\r\n        }\r\n        log.error(\"Test failed\", t);\r\n        fail(\"Should not throw anything\");\r\n    }\r\n    if (isThrow) {\r\n        fail(\"Should throw something\");\r\n    }\r\n    assertThat(r).isEqualTo(want);\r\n}",
  "annotations" : [ "ParameterizedTest" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\skywalking\\oap-server\\analyzer\\meter-analyzer\\src\\test\\java\\org\\apache\\skywalking\\oap\\meter\\analyzer\\dsl\\BasicTest.java",
  "methodName" : "test",
  "sourceCode" : "@ParameterizedTest(name = \"{0}\")\r\n@MethodSource(\"data\")\r\npublic void test(String name, ImmutableMap<String, SampleFamily> input, String expression, Result want, boolean isThrow) {\r\n    Expression e = DSL.parse(name, expression);\r\n    Result r = null;\r\n    try {\r\n        r = e.run(input);\r\n    } catch (Throwable t) {\r\n        if (isThrow) {\r\n            return;\r\n        }\r\n        log.error(\"Test failed\", t);\r\n        fail(\"Should not throw anything\");\r\n    }\r\n    if (isThrow) {\r\n        fail(\"Should throw something\");\r\n    }\r\n    assertThat(r).isEqualTo(want);\r\n}",
  "annotations" : [ "ParameterizedTest" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\skywalking\\oap-server\\analyzer\\meter-analyzer\\src\\test\\java\\org\\apache\\skywalking\\oap\\meter\\analyzer\\dsl\\counter\\CounterWindowTest.java",
  "methodName" : "testPT15S",
  "sourceCode" : "@Test\r\npublic void testPT15S() {\r\n    double[] actuals = parameters().stream().mapToDouble(e -> {\r\n        Tuple2<Long, Double> increase = CounterWindow.INSTANCE.increase(\"test\", ImmutableMap.<String, String>builder().build(), e._2, Duration.parse(\"PT15S\").getSeconds() * 1000, e._1);\r\n        return e._2 - increase._2;\r\n    }).toArray();\r\n    Assertions.assertArrayEquals(new double[] { 0, 1d, 1d, 1d, 1d, 0d, 2d, 1d }, actuals, 0.d);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\skywalking\\oap-server\\analyzer\\meter-analyzer\\src\\test\\java\\org\\apache\\skywalking\\oap\\meter\\analyzer\\dsl\\counter\\CounterWindowTest.java",
  "methodName" : "testPT35S",
  "sourceCode" : "@Test\r\npublic void testPT35S() {\r\n    double[] actuals = parameters().stream().mapToDouble(e -> {\r\n        Tuple2<Long, Double> increase = CounterWindow.INSTANCE.increase(\"test\", ImmutableMap.<String, String>builder().build(), e._2, Duration.parse(\"PT35S\").getSeconds() * 1000, e._1);\r\n        return e._2 - increase._2;\r\n    }).toArray();\r\n    Assertions.assertArrayEquals(new double[] { 0, 1d, 2d, 2d, 2d, 0d, 3d, 3d }, actuals, 0.d);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\skywalking\\oap-server\\analyzer\\meter-analyzer\\src\\test\\java\\org\\apache\\skywalking\\oap\\meter\\analyzer\\dsl\\counter\\CounterWindowTest.java",
  "methodName" : "testPT1M",
  "sourceCode" : "@Test\r\npublic void testPT1M() {\r\n    double[] actuals = parameters().stream().mapToDouble(e -> {\r\n        Tuple2<Long, Double> increase = CounterWindow.INSTANCE.increase(\"test\", ImmutableMap.<String, String>builder().build(), e._2, Duration.parse(\"PT1M\").getSeconds() * 1000, e._1);\r\n        return e._2 - increase._2;\r\n    }).toArray();\r\n    Assertions.assertArrayEquals(new double[] { 0, 1d, 2d, 3d, 4d, 0d, 5d, 5d }, actuals, 0.d);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\skywalking\\oap-server\\analyzer\\meter-analyzer\\src\\test\\java\\org\\apache\\skywalking\\oap\\meter\\analyzer\\dsl\\counter\\CounterWindowTest.java",
  "methodName" : "testPT2M",
  "sourceCode" : "@Test\r\npublic void testPT2M() {\r\n    double[] actuals = parameters().stream().mapToDouble(e -> {\r\n        Tuple2<Long, Double> increase = CounterWindow.INSTANCE.increase(\"test\", ImmutableMap.<String, String>builder().build(), e._2, Duration.parse(\"PT2M\").getSeconds() * 1000, e._1);\r\n        return e._2 - increase._2;\r\n    }).toArray();\r\n    Assertions.assertArrayEquals(new double[] { 0, 1d, 2d, 3d, 4d, 0d, 1d, 2d }, actuals, 0.d);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\skywalking\\oap-server\\analyzer\\meter-analyzer\\src\\test\\java\\org\\apache\\skywalking\\oap\\meter\\analyzer\\dsl\\DecorateTest.java",
  "methodName" : "testDecorate",
  "sourceCode" : "@Test\r\npublic void testDecorate() {\r\n    MeterEntity.setNamingControl(new NamingControl(512, 512, 512, new EndpointNameGrouping()));\r\n    ImmutableMap<String, SampleFamily> input = ImmutableMap.of(\"http_success_request\", SampleFamilyBuilder.newBuilder(Sample.builder().labels(of(\"idc\", \"t1\")).value(50).name(\"http_success_request\").build(), Sample.builder().labels(of(\"idc\", \"t1\", \"region\", \"us\", \"instance\", \"10.0.0.1\")).value(100).name(\"http_success_request\").build()).build());\r\n    String expression = \"http_success_request.sum(['idc']).service(['idc'], Layer.GENERAL).decorate({ me -> me.attr0 = me.layer.name()})\";\r\n    Expression e = DSL.parse(\"decorate\", expression);\r\n    Result r = e.run(input);\r\n    Assertions.assertTrue(r.isSuccess());\r\n    Assertions.assertEquals(\"GENERAL\", r.getData().context.getMeterSamples().keySet().stream().findFirst().get().getAttr0());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\skywalking\\oap-server\\analyzer\\meter-analyzer\\src\\test\\java\\org\\apache\\skywalking\\oap\\meter\\analyzer\\dsl\\ExpressionParsingTest.java",
  "methodName" : "test",
  "sourceCode" : "@ParameterizedTest(name = \"{0}\")\r\n@MethodSource(\"data\")\r\npublic void test(String name, String expression, ExpressionParsingContext want, boolean isThrow) {\r\n    Expression e = DSL.parse(name, expression);\r\n    ExpressionParsingContext r = null;\r\n    try {\r\n        r = e.parse();\r\n    } catch (Throwable t) {\r\n        if (isThrow) {\r\n            return;\r\n        }\r\n        log.error(\"Test failed\", t);\r\n        fail(\"Should not throw anything\");\r\n    }\r\n    if (isThrow) {\r\n        fail(\"Should throw something\");\r\n    }\r\n    assertThat(r).isEqualTo(want);\r\n}",
  "annotations" : [ "ParameterizedTest" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\skywalking\\oap-server\\analyzer\\meter-analyzer\\src\\test\\java\\org\\apache\\skywalking\\oap\\meter\\analyzer\\dsl\\FilterTest.java",
  "methodName" : "test",
  "sourceCode" : "@ParameterizedTest(name = \"{0}\")\r\n@MethodSource(\"data\")\r\npublic void test(String name, ImmutableMap<String, SampleFamily> input, String expression, Result want) {\r\n    Expression e = DSL.parse(name, expression);\r\n    Result r = e.run(input);\r\n    assertThat(r).isEqualTo(want);\r\n}",
  "annotations" : [ "ParameterizedTest" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\skywalking\\oap-server\\analyzer\\meter-analyzer\\src\\test\\java\\org\\apache\\skywalking\\oap\\meter\\analyzer\\dsl\\FunctionTest.java",
  "methodName" : "test",
  "sourceCode" : "@ParameterizedTest(name = \"{0}\")\r\n@MethodSource(\"data\")\r\npublic void test(String name, ImmutableMap<String, SampleFamily> input, String expression, Result want, boolean isThrow) {\r\n    Expression e = DSL.parse(name, expression);\r\n    Result r = null;\r\n    try {\r\n        r = e.run(input);\r\n    } catch (Throwable t) {\r\n        if (isThrow) {\r\n            return;\r\n        }\r\n        log.error(\"Test failed\", t);\r\n        fail(\"Should not throw anything\");\r\n    }\r\n    if (isThrow) {\r\n        fail(\"Should throw something\");\r\n    }\r\n    assertThat(r).isEqualTo(want);\r\n}",
  "annotations" : [ "ParameterizedTest" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\skywalking\\oap-server\\analyzer\\meter-analyzer\\src\\test\\java\\org\\apache\\skywalking\\oap\\meter\\analyzer\\dsl\\IncreaseTest.java",
  "methodName" : "test",
  "sourceCode" : "@ParameterizedTest(name = \"{0}\")\r\n@MethodSource(\"data\")\r\npublic void test(String name, List<ImmutableMap<String, SampleFamily>> input, String expression, List<Result> want, boolean isThrow) {\r\n    Expression e = DSL.parse(name, expression);\r\n    CounterWindow.INSTANCE.reset();\r\n    for (int i = 0; i < input.size(); i++) {\r\n        Result r = null;\r\n        try {\r\n            r = e.run(input.get(i));\r\n        } catch (Throwable t) {\r\n            if (isThrow) {\r\n                return;\r\n            }\r\n            log.error(\"Test failed\", t);\r\n            fail(\"Should not throw anything\");\r\n        }\r\n        if (isThrow) {\r\n            fail(\"Should throw something\");\r\n        }\r\n        assertThat(r).isEqualTo(want.get(i));\r\n    }\r\n}",
  "annotations" : [ "ParameterizedTest" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\skywalking\\oap-server\\analyzer\\meter-analyzer\\src\\test\\java\\org\\apache\\skywalking\\oap\\meter\\analyzer\\dsl\\K8sTagTest.java",
  "methodName" : "test",
  "sourceCode" : "@ParameterizedTest(name = \"{index}: {0}\")\r\n@MethodSource(\"data\")\r\npublic void test(String name, ImmutableMap<String, SampleFamily> input, String expression, Result want, boolean isThrow) {\r\n    Expression e = DSL.parse(name, expression);\r\n    Result r = null;\r\n    try {\r\n        r = e.run(input);\r\n    } catch (Throwable t) {\r\n        if (isThrow) {\r\n            return;\r\n        }\r\n        log.error(\"Test failed\", t);\r\n        fail(\"Should not throw anything\");\r\n    }\r\n    if (isThrow) {\r\n        fail(\"Should throw something\");\r\n    }\r\n    assertThat(r).isEqualTo(want);\r\n}",
  "annotations" : [ "ParameterizedTest" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\skywalking\\oap-server\\analyzer\\meter-analyzer\\src\\test\\java\\org\\apache\\skywalking\\oap\\meter\\analyzer\\dsl\\rule\\RuleLoaderFailTest.java",
  "methodName" : "test",
  "sourceCode" : "@ParameterizedTest\r\n@MethodSource(\"data\")\r\npublic void test(List<String> enabledRule) throws ModuleStartException, IOException {\r\n    assertThrows(UnexpectedException.class, () -> Rules.loadRules(\"otel-rules\", enabledRule));\r\n}",
  "annotations" : [ "ParameterizedTest" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\skywalking\\oap-server\\analyzer\\meter-analyzer\\src\\test\\java\\org\\apache\\skywalking\\oap\\meter\\analyzer\\dsl\\rule\\RuleLoaderTest.java",
  "methodName" : "test",
  "sourceCode" : "@ParameterizedTest\r\n@MethodSource(\"data\")\r\npublic void test(List<String> enabledRule, int rulesNumber) throws ModuleStartException, IOException {\r\n    List<Rule> rules = Rules.loadRules(\"otel-rules\", enabledRule);\r\n    assertThat(rules.size()).isEqualTo(rulesNumber);\r\n}",
  "annotations" : [ "ParameterizedTest" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\skywalking\\oap-server\\analyzer\\meter-analyzer\\src\\test\\java\\org\\apache\\skywalking\\oap\\meter\\analyzer\\dsl\\rule\\RuleLoaderYAMLFailTest.java",
  "methodName" : "test",
  "sourceCode" : "@ParameterizedTest\r\n@MethodSource(\"data\")\r\npublic void test(List<String> enabledRule) {\r\n    assertThrows(YAMLException.class, () -> Rules.loadRules(\"otel-rules\", enabledRule));\r\n}",
  "annotations" : [ "ParameterizedTest" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\skywalking\\oap-server\\analyzer\\meter-analyzer\\src\\test\\java\\org\\apache\\skywalking\\oap\\meter\\analyzer\\dsl\\ScopeTest.java",
  "methodName" : "test",
  "sourceCode" : "@ParameterizedTest(name = \"{0}\")\r\n@MethodSource(\"data\")\r\npublic void test(final String name, final ImmutableMap<String, SampleFamily> input, final String expression, final boolean isThrow, final Map<MeterEntity, Sample[]> want) {\r\n    Expression e = DSL.parse(name, expression);\r\n    Result r = null;\r\n    try {\r\n        r = e.run(input);\r\n    } catch (Throwable t) {\r\n        if (isThrow) {\r\n            return;\r\n        }\r\n        log.error(\"Test failed\", t);\r\n        fail(\"Should not throw anything\");\r\n    }\r\n    if (isThrow) {\r\n        fail(\"Should throw something\");\r\n    }\r\n    assertThat(r.isSuccess()).isEqualTo(true);\r\n    Map<MeterEntity, Sample[]> meterSamplesR = r.getData().context.getMeterSamples();\r\n    meterSamplesR.forEach((meterEntity, samples) -> {\r\n        assertThat(samples).isEqualTo(want.get(meterEntity));\r\n    });\r\n}",
  "annotations" : [ "ParameterizedTest" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\skywalking\\oap-server\\analyzer\\meter-analyzer\\src\\test\\java\\org\\apache\\skywalking\\oap\\meter\\analyzer\\dsl\\TagFilterTest.java",
  "methodName" : "test",
  "sourceCode" : "@ParameterizedTest(name = \"{0}\")\r\n@MethodSource(\"data\")\r\npublic void test(String name, ImmutableMap<String, SampleFamily> input, String expression, Result want, boolean isThrow) {\r\n    Expression e = DSL.parse(name, expression);\r\n    Result r = null;\r\n    try {\r\n        r = e.run(input);\r\n    } catch (Throwable t) {\r\n        if (isThrow) {\r\n            return;\r\n        }\r\n        log.error(\"Test failed\", t);\r\n        fail(\"Should not throw anything\");\r\n    }\r\n    if (isThrow) {\r\n        fail(\"Should throw something\");\r\n    }\r\n    assertThat(r).isEqualTo(want);\r\n}",
  "annotations" : [ "ParameterizedTest" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\skywalking\\oap-server\\analyzer\\meter-analyzer\\src\\test\\java\\org\\apache\\skywalking\\oap\\meter\\analyzer\\dsl\\ValueFilterTest.java",
  "methodName" : "test",
  "sourceCode" : "@ParameterizedTest(name = \"{0}\")\r\n@MethodSource(\"data\")\r\npublic void test(final String name, final ImmutableMap<String, SampleFamily> input, final String expression, final Result want, final boolean isThrow) {\r\n    Expression e = DSL.parse(name, expression);\r\n    Result r = null;\r\n    try {\r\n        r = e.run(input);\r\n    } catch (Throwable t) {\r\n        if (isThrow) {\r\n            return;\r\n        }\r\n        log.error(\"Test failed\", t);\r\n        fail(\"Should not throw anything\");\r\n    }\r\n    if (isThrow) {\r\n        fail(\"Should throw something\");\r\n    }\r\n    assertThat(r).isEqualTo(want);\r\n}",
  "annotations" : [ "ParameterizedTest" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\skywalking\\oap-server\\analyzer\\meter-analyzer\\src\\test\\java\\org\\apache\\skywalking\\oap\\meter\\analyzer\\MetricConvertTest.java",
  "methodName" : "testOneLevelExp",
  "sourceCode" : "@Test\r\npublic void testOneLevelExp() {\r\n    MockMetricRuleConfig mockMetricRuleConfig = new MockMetricRuleConfig(\"meter_apisix\", \"tag({tags -> tags.service_name = 2})\", \"tag({tags -> tags.service_name = 1})\", \"{ tags -> tags.job_name == 'apisix-monitoring' }\", Arrays.asList(new MockRule(\"sv_http_connections\", \"apisix_nginx_http_current_connections\")), null);\r\n    MockMetricConvert metricConvert = new MockMetricConvert(mockMetricRuleConfig, null);\r\n    Assertions.assertEquals(\"meter_apisix_sv_http_connections\", metricConvert.metricsName);\r\n    Assertions.assertEquals(\"{ tags -> tags.job_name == 'apisix-monitoring' }\", metricConvert.filter);\r\n    Assertions.assertEquals(\"((apisix_nginx_http_current_connections.tag({tags -> tags.service_name = 1}))).tag({tags -> tags.service_name = 2})\", metricConvert.exp);\r\n    // expSuffix is null\r\n    mockMetricRuleConfig = new MockMetricRuleConfig(\"meter_apisix\", null, \"tag({tags -> tags.service_name = 1})\", null, Arrays.asList(new MockRule(\"sv_http_connections\", \"apisix_nginx_http_current_connections\")), null);\r\n    metricConvert = new MockMetricConvert(mockMetricRuleConfig, null);\r\n    Assertions.assertEquals(\"meter_apisix_sv_http_connections\", metricConvert.metricsName);\r\n    Assertions.assertEquals(\"(apisix_nginx_http_current_connections.tag({tags -> tags.service_name = 1}))\", metricConvert.exp);\r\n    // expPrefix is null\r\n    mockMetricRuleConfig = new MockMetricRuleConfig(\"meter_apisix\", \"tag({tags -> tags.service_name = 2})\", null, null, Arrays.asList(new MockRule(\"sv_http_connections\", \"apisix_nginx_http_current_connections\")), null);\r\n    metricConvert = new MockMetricConvert(mockMetricRuleConfig, null);\r\n    Assertions.assertEquals(\"meter_apisix_sv_http_connections\", metricConvert.metricsName);\r\n    Assertions.assertEquals(\"(apisix_nginx_http_current_connections).tag({tags -> tags.service_name = 2})\", metricConvert.exp);\r\n    // expPrefix and expSuffix is null\r\n    mockMetricRuleConfig = new MockMetricRuleConfig(\"meter_apisix\", null, null, null, Arrays.asList(new MockRule(\"sv_http_connections\", \"apisix_nginx_http_current_connections\")), null);\r\n    metricConvert = new MockMetricConvert(mockMetricRuleConfig, null);\r\n    Assertions.assertEquals(\"meter_apisix_sv_http_connections\", metricConvert.metricsName);\r\n    Assertions.assertEquals(\"apisix_nginx_http_current_connections\", metricConvert.exp);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\skywalking\\oap-server\\analyzer\\meter-analyzer\\src\\test\\java\\org\\apache\\skywalking\\oap\\meter\\analyzer\\MetricConvertTest.java",
  "methodName" : "testMultipleLevelExp",
  "sourceCode" : "@Test\r\npublic void testMultipleLevelExp() {\r\n    MockMetricRuleConfig mockMetricRuleConfig = new MockMetricRuleConfig(\"meter_apisix\", \"tag({tags -> tags.service_name = 2})\", \"tag({tags -> tags.service_name = 1})\", \"{ tags -> tags.job_name == 'apisix-monitoring' }\", Arrays.asList(new MockRule(\"sv_http_connections\", \"apisix_nginx_http_current_connections.sum(['a'])\")), null);\r\n    MockMetricConvert metricConvert = new MockMetricConvert(mockMetricRuleConfig, null);\r\n    Assertions.assertEquals(\"meter_apisix_sv_http_connections\", metricConvert.metricsName);\r\n    Assertions.assertEquals(\"{ tags -> tags.job_name == 'apisix-monitoring' }\", metricConvert.filter);\r\n    Assertions.assertEquals(\"(((apisix_nginx_http_current_connections.tag({tags -> tags.service_name = 1})).sum(['a']))).tag({tags -> tags.service_name = 2})\", metricConvert.exp, \"exp\");\r\n    // expSuffix is null\r\n    mockMetricRuleConfig = new MockMetricRuleConfig(\"meter_apisix\", null, \"tag({tags -> tags.service_name = 1})\", null, Arrays.asList(new MockRule(\"sv_http_connections\", \"apisix_nginx_http_current_connections.downsampling(LATEST)\")), null);\r\n    metricConvert = new MockMetricConvert(mockMetricRuleConfig, null);\r\n    Assertions.assertEquals(\"meter_apisix_sv_http_connections\", metricConvert.metricsName, \"metrics name\");\r\n    Assertions.assertEquals(\"((apisix_nginx_http_current_connections.tag({tags -> tags.service_name = 1})).downsampling(LATEST))\", metricConvert.exp, \"exp\");\r\n    // expPrefix is null\r\n    mockMetricRuleConfig = new MockMetricRuleConfig(\"meter_apisix\", \"tag({tags -> tags.service_name = 2})\", null, null, Arrays.asList(new MockRule(\"sv_http_connections\", \"apisix_nginx_http_current_connections.downsampling(LATEST)\")), null);\r\n    metricConvert = new MockMetricConvert(mockMetricRuleConfig, null);\r\n    Assertions.assertEquals(\"meter_apisix_sv_http_connections\", metricConvert.metricsName, \"metrics name\");\r\n    Assertions.assertEquals(\"(apisix_nginx_http_current_connections.downsampling(LATEST)).tag({tags -> tags.service_name = 2})\", metricConvert.exp, \"exp\");\r\n    // expPrefix and expSuffix is null\r\n    mockMetricRuleConfig = new MockMetricRuleConfig(\"meter_apisix\", null, null, null, Arrays.asList(new MockRule(\"sv_http_connections\", \"apisix_nginx_http_current_connections\")), null);\r\n    metricConvert = new MockMetricConvert(mockMetricRuleConfig, null);\r\n    Assertions.assertEquals(\"meter_apisix_sv_http_connections\", metricConvert.metricsName, \"metrics name\");\r\n    Assertions.assertEquals(\"apisix_nginx_http_current_connections\", metricConvert.exp, \"exp\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\skywalking\\oap-server\\exporter\\src\\test\\java\\org\\apache\\skywalking\\oap\\server\\exporter\\provider\\grpc\\GRPCExporterProviderTest.java",
  "methodName" : "name",
  "sourceCode" : "@Test\r\npublic void name() {\r\n    assertEquals(\"default\", grpcExporterProvider.name());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\skywalking\\oap-server\\exporter\\src\\test\\java\\org\\apache\\skywalking\\oap\\server\\exporter\\provider\\grpc\\GRPCExporterProviderTest.java",
  "methodName" : "module",
  "sourceCode" : "@Test\r\npublic void module() {\r\n    assertEquals(ExporterModule.class, grpcExporterProvider.module());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\skywalking\\oap-server\\exporter\\src\\test\\java\\org\\apache\\skywalking\\oap\\server\\exporter\\provider\\grpc\\GRPCExporterProviderTest.java",
  "methodName" : "notifyAfterCompleted",
  "sourceCode" : "@Test\r\npublic void notifyAfterCompleted() throws ServiceNotProvidedException, ModuleStartException {\r\n    GRPCMetricsExporter exporter = mock(GRPCMetricsExporter.class);\r\n    ModuleManager manager = mock(ModuleManager.class);\r\n    ModuleProviderHolder providerHolder = mock(ModuleProviderHolder.class);\r\n    ModuleServiceHolder serviceHolder = mock(ModuleServiceHolder.class);\r\n    when(manager.find(CoreModule.NAME)).thenReturn(providerHolder);\r\n    when(providerHolder.provider()).thenReturn(serviceHolder);\r\n    doNothing().when(exporter).fetchSubscriptionList();\r\n    grpcExporterProvider.setManager(manager);\r\n    Whitebox.setInternalState(grpcExporterProvider, \"grpcMetricsExporter\", exporter);\r\n    grpcExporterProvider.notifyAfterCompleted();\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\skywalking\\oap-server\\exporter\\src\\test\\java\\org\\apache\\skywalking\\oap\\server\\exporter\\provider\\grpc\\GRPCExporterProviderTest.java",
  "methodName" : "requiredModules",
  "sourceCode" : "@Test\r\npublic void requiredModules() {\r\n    String[] requireModules = grpcExporterProvider.requiredModules();\r\n    assertNotNull(requireModules);\r\n    assertEquals(1, requireModules.length);\r\n    assertEquals(\"core\", requireModules[0]);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\skywalking\\oap-server\\exporter\\src\\test\\java\\org\\apache\\skywalking\\oap\\server\\exporter\\provider\\grpc\\GRPCExporterTest.java",
  "methodName" : "export",
  "sourceCode" : "@Test\r\npublic void export() {\r\n    exporter.fetchSubscriptionList();\r\n    ExportEvent event = new ExportEvent(new MockExporterMetrics(), INCREMENT);\r\n    exporter.export(event);\r\n    List<SubscriptionMetric> subscriptionList = Whitebox.getInternalState(exporter, \"subscriptionList\");\r\n    Assertions.assertEquals(\"mock-metrics\", subscriptionList.get(0).getMetricName());\r\n    Assertions.assertEquals(\"int-mock-metrics\", subscriptionList.get(1).getMetricName());\r\n    Assertions.assertEquals(\"long-mock-metrics\", subscriptionList.get(2).getMetricName());\r\n    Assertions.assertEquals(\"labeled-mock-metrics\", subscriptionList.get(3).getMetricName());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\skywalking\\oap-server\\exporter\\src\\test\\java\\org\\apache\\skywalking\\oap\\server\\exporter\\provider\\grpc\\GRPCExporterTest.java",
  "methodName" : "initSubscriptionList",
  "sourceCode" : "@Test\r\npublic void initSubscriptionList() {\r\n    exporter.fetchSubscriptionList();\r\n    List<SubscriptionMetric> subscriptionList = Whitebox.getInternalState(exporter, \"subscriptionList\");\r\n    Assertions.assertEquals(\"mock-metrics\", subscriptionList.get(0).getMetricName());\r\n    Assertions.assertEquals(\"int-mock-metrics\", subscriptionList.get(1).getMetricName());\r\n    Assertions.assertEquals(\"long-mock-metrics\", subscriptionList.get(2).getMetricName());\r\n    Assertions.assertEquals(\"labeled-mock-metrics\", subscriptionList.get(3).getMetricName());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\skywalking\\oap-server\\exporter\\src\\test\\java\\org\\apache\\skywalking\\oap\\server\\exporter\\provider\\grpc\\GRPCExporterTest.java",
  "methodName" : "init",
  "sourceCode" : "@Test\r\npublic void init() {\r\n    exporter.init(null);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\skywalking\\oap-server\\exporter\\src\\test\\java\\org\\apache\\skywalking\\oap\\server\\exporter\\provider\\grpc\\GRPCExporterTest.java",
  "methodName" : "consume",
  "sourceCode" : "@Test\r\npublic void consume() {\r\n    exporter.consume(dataList());\r\n    exporter.consume(Collections.emptyList());\r\n    List<ExportMetricValue> exportMetricValues = ((MockMetricExportServiceImpl) service).exportMetricValues;\r\n    Assertions.assertEquals(3, exportMetricValues.size());\r\n    Assertions.assertEquals(12, exportMetricValues.get(0).getMetricValues(0).getLongValue());\r\n    Assertions.assertEquals(1234567891234563312L, exportMetricValues.get(1).getMetricValues(0).getLongValue());\r\n    Assertions.assertEquals(1000L, exportMetricValues.get(2).getMetricValues(0).getLongValue());\r\n    Assertions.assertEquals(KeyValue.newBuilder().setKey(\"labelName\").setValue(\"labelValue\").build(), exportMetricValues.get(2).getMetricValues(0).getLabels(0));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\skywalking\\oap-server\\exporter\\src\\test\\java\\org\\apache\\skywalking\\oap\\server\\exporter\\provider\\grpc\\GRPCExporterTest.java",
  "methodName" : "onError",
  "sourceCode" : "@Test\r\npublic void onError() {\r\n    Exception e = new IllegalArgumentException(\"something wrong\");\r\n    exporter.onError(Collections.emptyList(), e);\r\n    exporter.onError(dataList(), e);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\skywalking\\oap-server\\exporter\\src\\test\\java\\org\\apache\\skywalking\\oap\\server\\exporter\\provider\\grpc\\GRPCExporterTest.java",
  "methodName" : "onExit",
  "sourceCode" : "@Test\r\npublic void onExit() {\r\n    exporter.onExit();\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\skywalking\\oap-server\\microbench\\src\\main\\java\\org\\apache\\skywalking\\oap\\server\\microbench\\base\\AbstractMicrobenchmark.java",
  "methodName" : "run",
  "sourceCode" : "@Test\r\npublic void run() throws Exception {\r\n    new Runner(newOptionsBuilder().build()).run();\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\skywalking\\oap-server\\microbench\\src\\main\\java\\org\\apache\\skywalking\\oap\\server\\microbench\\library\\datacarrier\\common\\AtomicRangeIntegerBenchmark.java",
  "methodName" : "testGetAndIncrement",
  "sourceCode" : "@Test\r\npublic void testGetAndIncrement() {\r\n    AtomicRangeInteger atomicI = new AtomicRangeInteger(0, 10);\r\n    for (int i = 0; i < 10; i++) {\r\n        Assertions.assertEquals(i, atomicI.getAndIncrement());\r\n    }\r\n    Assertions.assertEquals(0, atomicI.getAndIncrement());\r\n    Assertions.assertEquals(1, atomicI.get());\r\n    Assertions.assertEquals(1, atomicI.intValue());\r\n    Assertions.assertEquals(1, atomicI.longValue());\r\n    Assertions.assertEquals(1, (int) atomicI.floatValue());\r\n    Assertions.assertEquals(1, (int) atomicI.doubleValue());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\skywalking\\oap-server\\microbench\\src\\main\\java\\org\\apache\\skywalking\\oap\\server\\microbench\\library\\datacarrier\\common\\AtomicRangeIntegerBenchmark.java",
  "methodName" : "testGetAndIncrementV1Performance",
  "sourceCode" : "@Test\r\n@Benchmark\r\npublic void testGetAndIncrementV1Performance() {\r\n    ATOMIC_V1.getAndIncrement();\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\skywalking\\oap-server\\microbench\\src\\main\\java\\org\\apache\\skywalking\\oap\\server\\microbench\\library\\datacarrier\\common\\AtomicRangeIntegerBenchmark.java",
  "methodName" : "testGetAndIncrementV2Performance",
  "sourceCode" : "@Test\r\n@Benchmark\r\npublic void testGetAndIncrementV2Performance() {\r\n    ATOMIC_V2.getAndIncrement();\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\skywalking\\oap-server\\microbench\\src\\main\\java\\org\\apache\\skywalking\\oap\\server\\microbench\\library\\datacarrier\\common\\AtomicRangeIntegerBenchmark.java",
  "methodName" : "testGetAndIncrementV3Performance",
  "sourceCode" : "@Test\r\n@Benchmark\r\npublic void testGetAndIncrementV3Performance() {\r\n    ATOMIC_V3.getAndIncrement();\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\skywalking\\oap-server\\microbench\\src\\main\\java\\org\\apache\\skywalking\\oap\\server\\microbench\\library\\util\\StringFormatGroupBenchmark.java",
  "methodName" : "testMatch",
  "sourceCode" : "@Benchmark\r\n@Test\r\npublic void testMatch() {\r\n    StringFormatGroup group = new StringFormatGroup();\r\n    group.addRule(\"/name/*/add\", \"/name/.+/add\");\r\n    Assertions.assertEquals(\"/name/*/add\", group.format(\"/name/test/add\").getName());\r\n    group = new StringFormatGroup();\r\n    group.addRule(\"/name/*/add/{orderId}\", \"/name/.+/add/.*\");\r\n    Assertions.assertEquals(\"/name/*/add/{orderId}\", group.format(\"/name/test/add/12323\").getName());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\skywalking\\oap-server\\microbench\\src\\main\\java\\org\\apache\\skywalking\\oap\\server\\microbench\\library\\util\\StringFormatGroupBenchmark.java",
  "methodName" : "test100Rule",
  "sourceCode" : "@Benchmark\r\n@Test\r\npublic void test100Rule() {\r\n    StringFormatGroup group = new StringFormatGroup();\r\n    group.addRule(\"/name/*/add/{orderId}\", \"/name/.+/add/.*\");\r\n    for (int i = 0; i < 100; i++) {\r\n        group.addRule(\"/name/*/add/{orderId}\" + \"/\" + 1, \"/name/.+/add/.*\" + \"/abc\");\r\n    }\r\n    Assertions.assertEquals(\"/name/*/add/{orderId}\", group.format(\"/name/test/add/12323\").getName());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\skywalking\\oap-server\\mqe-rt\\src\\test\\java\\org\\apache\\skywalking\\mqe\\rt\\AggregateLabelsOpTest.java",
  "methodName" : "seriesLabeledTest",
  "sourceCode" : "@Test\r\npublic void seriesLabeledTest() throws Exception {\r\n    ExpressionResult avgReduce = AggregateLabelsOp.doAggregateLabelsOp(mockData.newSeriesLabeledResult(), MQEParser.AVG, new ArrayList<>());\r\n    // aggregate no label\r\n    assertEquals(1, avgReduce.getResults().size());\r\n    assertEquals(0, avgReduce.getResults().get(0).getMetric().getLabels().size());\r\n    assertEquals(ExpressionResultType.TIME_SERIES_VALUES, avgReduce.getType());\r\n    assertEquals((100f + 101f) / 2, avgReduce.getResults().get(0).getValues().get(0).getDoubleValue());\r\n    assertEquals((300f + 301f) / 2, avgReduce.getResults().get(0).getValues().get(1).getDoubleValue());\r\n    // sum label\r\n    ExpressionResult sumReduce = AggregateLabelsOp.doAggregateLabelsOp(mockData.newSeriesLabeledResult(), MQEParser.SUM, List.of(\"label\"));\r\n    assertEquals(2, sumReduce.getResults().size());\r\n    assertEquals(1, sumReduce.getResults().get(0).getMetric().getLabels().size());\r\n    assertEquals(\"label\", sumReduce.getResults().get(0).getMetric().getLabels().get(0).getKey());\r\n    assertEquals(1, sumReduce.getResults().get(1).getMetric().getLabels().size());\r\n    assertEquals(\"label\", sumReduce.getResults().get(1).getMetric().getLabels().get(0).getKey());\r\n    assertEquals(ExpressionResultType.TIME_SERIES_VALUES, sumReduce.getType());\r\n    assertEquals(100, sumReduce.getResults().get(0).getValues().get(0).getDoubleValue());\r\n    assertEquals(300, sumReduce.getResults().get(0).getValues().get(1).getDoubleValue());\r\n    assertEquals(101, sumReduce.getResults().get(1).getValues().get(0).getDoubleValue());\r\n    assertEquals(301, sumReduce.getResults().get(1).getValues().get(1).getDoubleValue());\r\n    // sum label2\r\n    sumReduce = AggregateLabelsOp.doAggregateLabelsOp(mockData.newSeriesLabeledResult(), MQEParser.SUM, List.of(\"label2\"));\r\n    assertEquals(1, sumReduce.getResults().size());\r\n    assertEquals(1, sumReduce.getResults().get(0).getMetric().getLabels().size());\r\n    assertEquals(\"label2\", sumReduce.getResults().get(0).getMetric().getLabels().get(0).getKey());\r\n    assertEquals(\"21\", sumReduce.getResults().get(0).getMetric().getLabels().get(0).getValue());\r\n    assertEquals(ExpressionResultType.TIME_SERIES_VALUES, sumReduce.getType());\r\n    assertEquals(100f + 101f, sumReduce.getResults().get(0).getValues().get(0).getDoubleValue());\r\n    assertEquals(300f + 301f, sumReduce.getResults().get(0).getValues().get(1).getDoubleValue());\r\n    // sum label and label2\r\n    sumReduce = AggregateLabelsOp.doAggregateLabelsOp(mockData.newSeriesLabeledResult(), MQEParser.SUM, List.of(\"label\", \"label2\"));\r\n    assertEquals(2, sumReduce.getResults().size());\r\n    assertEquals(2, sumReduce.getResults().get(0).getMetric().getLabels().size());\r\n    assertEquals(\"label\", sumReduce.getResults().get(0).getMetric().getLabels().get(0).getKey());\r\n    assertEquals(\"1\", sumReduce.getResults().get(0).getMetric().getLabels().get(0).getValue());\r\n    assertEquals(\"label2\", sumReduce.getResults().get(0).getMetric().getLabels().get(1).getKey());\r\n    assertEquals(\"21\", sumReduce.getResults().get(0).getMetric().getLabels().get(1).getValue());\r\n    assertEquals(\"label\", sumReduce.getResults().get(1).getMetric().getLabels().get(0).getKey());\r\n    assertEquals(\"2\", sumReduce.getResults().get(1).getMetric().getLabels().get(0).getValue());\r\n    assertEquals(\"label2\", sumReduce.getResults().get(1).getMetric().getLabels().get(1).getKey());\r\n    assertEquals(\"21\", sumReduce.getResults().get(1).getMetric().getLabels().get(1).getValue());\r\n    assertEquals(2, sumReduce.getResults().get(1).getMetric().getLabels().size());\r\n    assertEquals(ExpressionResultType.TIME_SERIES_VALUES, sumReduce.getType());\r\n    assertEquals(100, sumReduce.getResults().get(0).getValues().get(0).getDoubleValue());\r\n    assertEquals(300, sumReduce.getResults().get(0).getValues().get(1).getDoubleValue());\r\n    assertEquals(101, sumReduce.getResults().get(1).getValues().get(0).getDoubleValue());\r\n    assertEquals(301, sumReduce.getResults().get(1).getValues().get(1).getDoubleValue());\r\n    // min label2\r\n    ExpressionResult minReduce = AggregateLabelsOp.doAggregateLabelsOp(mockData.newSeriesLabeledResult(), MQEParser.MIN, List.of(\"label2\"));\r\n    assertEquals(ExpressionResultType.TIME_SERIES_VALUES, minReduce.getType());\r\n    assertEquals(100f, minReduce.getResults().get(0).getValues().get(0).getDoubleValue());\r\n    assertEquals(300f, minReduce.getResults().get(0).getValues().get(1).getDoubleValue());\r\n    // max label2\r\n    ExpressionResult maxReduce = AggregateLabelsOp.doAggregateLabelsOp(mockData.newSeriesLabeledResult(), MQEParser.MAX, List.of(\"label2\"));\r\n    assertEquals(ExpressionResultType.TIME_SERIES_VALUES, maxReduce.getType());\r\n    assertEquals(101f, maxReduce.getResults().get(0).getValues().get(0).getDoubleValue());\r\n    assertEquals(301f, maxReduce.getResults().get(0).getValues().get(1).getDoubleValue());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\skywalking\\oap-server\\mqe-rt\\src\\test\\java\\org\\apache\\skywalking\\mqe\\rt\\AggregationOpTest.java",
  "methodName" : "seriesNoLabeledTest",
  "sourceCode" : "@Test\r\npublic void seriesNoLabeledTest() throws Exception {\r\n    ExpressionResult avg = AggregationOp.doAggregationOp(mockData.newSeriesNoLabeledResult(), MQEParser.AVG);\r\n    assertEquals(ExpressionResultType.SINGLE_VALUE, avg.getType());\r\n    assertNull(avg.getResults().get(0).getValues().get(0).getId());\r\n    assertEquals(200, avg.getResults().get(0).getValues().get(0).getDoubleValue());\r\n    ExpressionResult count = AggregationOp.doAggregationOp(mockData.newSeriesNoLabeledResult(), MQEParser.COUNT);\r\n    assertEquals(ExpressionResultType.SINGLE_VALUE, count.getType());\r\n    assertNull(count.getResults().get(0).getValues().get(0).getId());\r\n    assertEquals(2, count.getResults().get(0).getValues().get(0).getDoubleValue());\r\n    ExpressionResult sum = AggregationOp.doAggregationOp(mockData.newSeriesNoLabeledResult(), MQEParser.SUM);\r\n    assertEquals(ExpressionResultType.SINGLE_VALUE, sum.getType());\r\n    assertNull(sum.getResults().get(0).getValues().get(0).getId());\r\n    assertEquals(400, sum.getResults().get(0).getValues().get(0).getDoubleValue());\r\n    ExpressionResult latest = AggregationOp.doAggregationOp(mockData.newSeriesNoLabeledResult(), MQEParser.LATEST);\r\n    assertEquals(ExpressionResultType.SINGLE_VALUE, latest.getType());\r\n    assertEquals(\"300\", latest.getResults().get(0).getValues().get(0).getId());\r\n    assertEquals(300, latest.getResults().get(0).getValues().get(0).getDoubleValue());\r\n    ExpressionResult max = AggregationOp.doAggregationOp(mockData.newSeriesNoLabeledResult(), MQEParser.MAX);\r\n    assertEquals(ExpressionResultType.SINGLE_VALUE, max.getType());\r\n    assertEquals(\"300\", max.getResults().get(0).getValues().get(0).getId());\r\n    assertEquals(300, max.getResults().get(0).getValues().get(0).getDoubleValue());\r\n    ExpressionResult min = AggregationOp.doAggregationOp(mockData.newSeriesNoLabeledResult(), MQEParser.MIN);\r\n    assertEquals(ExpressionResultType.SINGLE_VALUE, min.getType());\r\n    assertEquals(\"100\", min.getResults().get(0).getValues().get(0).getId());\r\n    assertEquals(100, min.getResults().get(0).getValues().get(0).getDoubleValue());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\skywalking\\oap-server\\mqe-rt\\src\\test\\java\\org\\apache\\skywalking\\mqe\\rt\\AggregationOpTest.java",
  "methodName" : "seriesLabeledTest",
  "sourceCode" : "@Test\r\npublic void seriesLabeledTest() throws Exception {\r\n    ExpressionResult avg = AggregationOp.doAggregationOp(mockData.newSeriesLabeledResult(), MQEParser.AVG);\r\n    assertEquals(ExpressionResultType.SINGLE_VALUE, avg.getType());\r\n    //label=1, label2=21\r\n    assertNull(avg.getResults().get(0).getValues().get(0).getId());\r\n    assertEquals(\"1\", avg.getResults().get(0).getMetric().getLabels().get(0).getValue());\r\n    assertEquals(\"21\", avg.getResults().get(0).getMetric().getLabels().get(1).getValue());\r\n    assertEquals(200, avg.getResults().get(0).getValues().get(0).getDoubleValue());\r\n    //label=2, label2=21\r\n    assertNull(avg.getResults().get(1).getValues().get(0).getId());\r\n    assertEquals(\"2\", avg.getResults().get(1).getMetric().getLabels().get(0).getValue());\r\n    assertEquals(\"21\", avg.getResults().get(1).getMetric().getLabels().get(1).getValue());\r\n    assertEquals(201, avg.getResults().get(1).getValues().get(0).getDoubleValue());\r\n    ExpressionResult count = AggregationOp.doAggregationOp(mockData.newSeriesLabeledResult(), MQEParser.COUNT);\r\n    assertEquals(ExpressionResultType.SINGLE_VALUE, avg.getType());\r\n    //label=1, label2=21\r\n    assertNull(count.getResults().get(0).getValues().get(0).getId());\r\n    assertEquals(\"1\", count.getResults().get(0).getMetric().getLabels().get(0).getValue());\r\n    assertEquals(\"21\", count.getResults().get(0).getMetric().getLabels().get(1).getValue());\r\n    assertEquals(2, count.getResults().get(0).getValues().get(0).getDoubleValue());\r\n    //label=2, label2=21\r\n    assertNull(count.getResults().get(1).getValues().get(0).getId());\r\n    assertEquals(\"2\", count.getResults().get(1).getMetric().getLabels().get(0).getValue());\r\n    assertEquals(\"21\", count.getResults().get(1).getMetric().getLabels().get(1).getValue());\r\n    assertEquals(2, count.getResults().get(1).getValues().get(0).getDoubleValue());\r\n    ExpressionResult sum = AggregationOp.doAggregationOp(mockData.newSeriesLabeledResult(), MQEParser.SUM);\r\n    assertEquals(ExpressionResultType.SINGLE_VALUE, avg.getType());\r\n    //label=1, label2=21\r\n    assertNull(sum.getResults().get(0).getValues().get(0).getId());\r\n    assertEquals(\"1\", sum.getResults().get(0).getMetric().getLabels().get(0).getValue());\r\n    assertEquals(\"21\", sum.getResults().get(0).getMetric().getLabels().get(1).getValue());\r\n    assertEquals(400, sum.getResults().get(0).getValues().get(0).getDoubleValue());\r\n    //label=2, label2=21\r\n    assertNull(sum.getResults().get(1).getValues().get(0).getId());\r\n    assertEquals(\"2\", sum.getResults().get(1).getMetric().getLabels().get(0).getValue());\r\n    assertEquals(\"21\", sum.getResults().get(1).getMetric().getLabels().get(1).getValue());\r\n    assertEquals(402, sum.getResults().get(1).getValues().get(0).getDoubleValue());\r\n    ExpressionResult latest = AggregationOp.doAggregationOp(mockData.newSeriesLabeledResult(), MQEParser.LATEST);\r\n    assertEquals(ExpressionResultType.SINGLE_VALUE, avg.getType());\r\n    //label=1, label2=21\r\n    assertEquals(\"1\", latest.getResults().get(0).getMetric().getLabels().get(0).getValue());\r\n    assertEquals(\"21\", latest.getResults().get(0).getMetric().getLabels().get(1).getValue());\r\n    assertEquals(\"300\", latest.getResults().get(0).getValues().get(0).getId());\r\n    assertEquals(300, latest.getResults().get(0).getValues().get(0).getDoubleValue());\r\n    //label=2, label2=21\r\n    assertEquals(\"2\", latest.getResults().get(1).getMetric().getLabels().get(0).getValue());\r\n    assertEquals(\"21\", latest.getResults().get(1).getMetric().getLabels().get(1).getValue());\r\n    assertEquals(\"300\", latest.getResults().get(1).getValues().get(0).getId());\r\n    assertEquals(301, latest.getResults().get(1).getValues().get(0).getDoubleValue());\r\n    ExpressionResult max = AggregationOp.doAggregationOp(mockData.newSeriesLabeledResult(), MQEParser.MAX);\r\n    assertEquals(ExpressionResultType.SINGLE_VALUE, avg.getType());\r\n    //label=1, label2=21\r\n    assertEquals(\"1\", max.getResults().get(0).getMetric().getLabels().get(0).getValue());\r\n    assertEquals(\"21\", max.getResults().get(0).getMetric().getLabels().get(1).getValue());\r\n    assertEquals(\"300\", max.getResults().get(0).getValues().get(0).getId());\r\n    assertEquals(300, max.getResults().get(0).getValues().get(0).getDoubleValue());\r\n    //label=2, label2=21\r\n    assertEquals(\"2\", max.getResults().get(1).getMetric().getLabels().get(0).getValue());\r\n    assertEquals(\"21\", max.getResults().get(1).getMetric().getLabels().get(1).getValue());\r\n    assertEquals(\"300\", max.getResults().get(1).getValues().get(0).getId());\r\n    assertEquals(301, max.getResults().get(1).getValues().get(0).getDoubleValue());\r\n    ExpressionResult min = AggregationOp.doAggregationOp(mockData.newSeriesLabeledResult(), MQEParser.MIN);\r\n    assertEquals(ExpressionResultType.SINGLE_VALUE, avg.getType());\r\n    //label=1, label2=21\r\n    assertEquals(\"1\", min.getResults().get(0).getMetric().getLabels().get(0).getValue());\r\n    assertEquals(\"21\", min.getResults().get(0).getMetric().getLabels().get(1).getValue());\r\n    assertEquals(\"100\", min.getResults().get(0).getValues().get(0).getId());\r\n    assertEquals(100, min.getResults().get(0).getValues().get(0).getDoubleValue());\r\n    //label=2, label2=21\r\n    assertEquals(\"2\", min.getResults().get(1).getMetric().getLabels().get(0).getValue());\r\n    assertEquals(\"21\", min.getResults().get(1).getMetric().getLabels().get(1).getValue());\r\n    assertEquals(\"100\", min.getResults().get(1).getValues().get(0).getId());\r\n    assertEquals(101, min.getResults().get(1).getValues().get(0).getDoubleValue());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\skywalking\\oap-server\\mqe-rt\\src\\test\\java\\org\\apache\\skywalking\\mqe\\rt\\BinaryOpTest.java",
  "methodName" : "seriesNoLabeledTest",
  "sourceCode" : "//DIV/MUL/MOD/SUB... are the same logic and tested in here, the others only test ADD is enough.\r\n@Test\r\npublic void seriesNoLabeledTest() throws Exception {\r\n    assertThrows(IllegalExpressionException.class, () -> BinaryOp.doBinaryOp(mockData.newEmptyResult(ExpressionResultType.TIME_SERIES_VALUES, false), mockData.newEmptyResult(ExpressionResultType.TIME_SERIES_VALUES, false), MQEParser.ADD));\r\n    ExpressionResult add = BinaryOp.doBinaryOp(mockData.newSeriesNoLabeledResult(), mockData.newSeriesNoLabeledResult(), MQEParser.ADD);\r\n    assertEquals(ExpressionResultType.TIME_SERIES_VALUES, add.getType());\r\n    assertEquals(\"100\", add.getResults().get(0).getValues().get(0).getId());\r\n    assertEquals(200, add.getResults().get(0).getValues().get(0).getDoubleValue());\r\n    assertEquals(\"300\", add.getResults().get(0).getValues().get(1).getId());\r\n    assertEquals(600, add.getResults().get(0).getValues().get(1).getDoubleValue());\r\n    ExpressionResult sub = BinaryOp.doBinaryOp(mockData.newSeriesNoLabeledResult(), mockData.newSeriesNoLabeledResult(), MQEParser.SUB);\r\n    assertEquals(ExpressionResultType.TIME_SERIES_VALUES, sub.getType());\r\n    assertEquals(\"100\", sub.getResults().get(0).getValues().get(0).getId());\r\n    assertEquals(0, sub.getResults().get(0).getValues().get(0).getDoubleValue());\r\n    assertEquals(\"300\", sub.getResults().get(0).getValues().get(1).getId());\r\n    assertEquals(0, sub.getResults().get(0).getValues().get(1).getDoubleValue());\r\n    ExpressionResult mul = BinaryOp.doBinaryOp(mockData.newSeriesNoLabeledResult(), mockData.newSeriesNoLabeledResult(), MQEParser.MUL);\r\n    assertEquals(ExpressionResultType.TIME_SERIES_VALUES, mul.getType());\r\n    assertEquals(\"100\", mul.getResults().get(0).getValues().get(0).getId());\r\n    assertEquals(10000, mul.getResults().get(0).getValues().get(0).getDoubleValue());\r\n    assertEquals(\"300\", mul.getResults().get(0).getValues().get(1).getId());\r\n    assertEquals(90000, mul.getResults().get(0).getValues().get(1).getDoubleValue());\r\n    ExpressionResult div = BinaryOp.doBinaryOp(mockData.newSeriesNoLabeledResult(), mockData.newSeriesNoLabeledResult(), MQEParser.DIV);\r\n    assertEquals(ExpressionResultType.TIME_SERIES_VALUES, div.getType());\r\n    assertEquals(\"100\", div.getResults().get(0).getValues().get(0).getId());\r\n    assertEquals(1, div.getResults().get(0).getValues().get(0).getDoubleValue());\r\n    assertEquals(\"300\", div.getResults().get(0).getValues().get(1).getId());\r\n    assertEquals(1, div.getResults().get(0).getValues().get(1).getDoubleValue());\r\n    ExpressionResult mod = BinaryOp.doBinaryOp(mockData.newSeriesNoLabeledResult(), mockData.newSeriesNoLabeledResult(), MQEParser.MOD);\r\n    assertEquals(ExpressionResultType.TIME_SERIES_VALUES, mod.getType());\r\n    assertEquals(\"100\", mod.getResults().get(0).getValues().get(0).getId());\r\n    assertEquals(0, mod.getResults().get(0).getValues().get(0).getDoubleValue());\r\n    assertEquals(\"300\", mod.getResults().get(0).getValues().get(1).getId());\r\n    assertEquals(0, mod.getResults().get(0).getValues().get(1).getDoubleValue());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\skywalking\\oap-server\\mqe-rt\\src\\test\\java\\org\\apache\\skywalking\\mqe\\rt\\BinaryOpTest.java",
  "methodName" : "seriesLabeledTest",
  "sourceCode" : "@Test\r\npublic void seriesLabeledTest() throws Exception {\r\n    assertThrows(IllegalExpressionException.class, () -> BinaryOp.doBinaryOp(mockData.newSeriesLabeledResult(), mockData.newEmptyResult(ExpressionResultType.TIME_SERIES_VALUES, false), MQEParser.ADD));\r\n    //seriesLabeled + seriesNoLabeled\r\n    ExpressionResult add = BinaryOp.doBinaryOp(mockData.newSeriesLabeledResult(), mockData.newSeriesNoLabeledResult(), MQEParser.ADD);\r\n    assertEquals(ExpressionResultType.TIME_SERIES_VALUES, add.getType());\r\n    //label=1, label2=21\r\n    assertEquals(\"1\", add.getResults().get(0).getMetric().getLabels().get(0).getValue());\r\n    assertEquals(\"21\", add.getResults().get(0).getMetric().getLabels().get(1).getValue());\r\n    assertEquals(\"100\", add.getResults().get(0).getValues().get(0).getId());\r\n    assertEquals(200, add.getResults().get(0).getValues().get(0).getDoubleValue());\r\n    assertEquals(\"300\", add.getResults().get(0).getValues().get(1).getId());\r\n    assertEquals(600, add.getResults().get(0).getValues().get(1).getDoubleValue());\r\n    //label=2, label2=21\r\n    assertEquals(\"2\", add.getResults().get(1).getMetric().getLabels().get(0).getValue());\r\n    assertEquals(\"21\", add.getResults().get(1).getMetric().getLabels().get(1).getValue());\r\n    assertEquals(\"100\", add.getResults().get(1).getValues().get(0).getId());\r\n    assertEquals(201, add.getResults().get(1).getValues().get(0).getDoubleValue());\r\n    assertEquals(\"300\", add.getResults().get(1).getValues().get(1).getId());\r\n    assertEquals(601, add.getResults().get(1).getValues().get(1).getDoubleValue());\r\n    //seriesLabeled + seriesLabeled\r\n    add = BinaryOp.doBinaryOp(mockData.newSeriesLabeledResult(), mockData.newSeriesLabeledResult(), MQEParser.ADD);\r\n    assertEquals(ExpressionResultType.TIME_SERIES_VALUES, add.getType());\r\n    //label=1, label2=21\r\n    assertEquals(\"1\", add.getResults().get(0).getMetric().getLabels().get(0).getValue());\r\n    assertEquals(\"21\", add.getResults().get(0).getMetric().getLabels().get(1).getValue());\r\n    assertEquals(\"100\", add.getResults().get(0).getValues().get(0).getId());\r\n    assertEquals(200, add.getResults().get(0).getValues().get(0).getDoubleValue());\r\n    assertEquals(\"300\", add.getResults().get(0).getValues().get(1).getId());\r\n    assertEquals(600, add.getResults().get(0).getValues().get(1).getDoubleValue());\r\n    //label=2, label2=21\r\n    assertEquals(\"2\", add.getResults().get(1).getMetric().getLabels().get(0).getValue());\r\n    assertEquals(\"21\", add.getResults().get(1).getMetric().getLabels().get(1).getValue());\r\n    assertEquals(\"100\", add.getResults().get(1).getValues().get(0).getId());\r\n    assertEquals(202, add.getResults().get(1).getValues().get(0).getDoubleValue());\r\n    assertEquals(\"300\", add.getResults().get(1).getValues().get(1).getId());\r\n    assertEquals(602, add.getResults().get(1).getValues().get(1).getDoubleValue());\r\n    //seriesNoLabeled - seriesLabeled\r\n    add = BinaryOp.doBinaryOp(mockData.newSeriesNoLabeledResult(), mockData.newSeriesLabeledResult(), MQEParser.SUB);\r\n    assertEquals(ExpressionResultType.TIME_SERIES_VALUES, add.getType());\r\n    //label=1, label2=21\r\n    assertEquals(\"1\", add.getResults().get(0).getMetric().getLabels().get(0).getValue());\r\n    assertEquals(\"21\", add.getResults().get(0).getMetric().getLabels().get(1).getValue());\r\n    assertEquals(\"100\", add.getResults().get(0).getValues().get(0).getId());\r\n    assertEquals(0, add.getResults().get(0).getValues().get(0).getDoubleValue());\r\n    assertEquals(\"300\", add.getResults().get(0).getValues().get(1).getId());\r\n    assertEquals(0, add.getResults().get(0).getValues().get(1).getDoubleValue());\r\n    //label=2, label2=21\r\n    assertEquals(\"2\", add.getResults().get(1).getMetric().getLabels().get(0).getValue());\r\n    assertEquals(\"21\", add.getResults().get(1).getMetric().getLabels().get(1).getValue());\r\n    assertEquals(\"100\", add.getResults().get(1).getValues().get(0).getId());\r\n    assertEquals(-1, add.getResults().get(1).getValues().get(0).getDoubleValue());\r\n    assertEquals(\"300\", add.getResults().get(1).getValues().get(1).getId());\r\n    assertEquals(-1, add.getResults().get(1).getValues().get(1).getDoubleValue());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\skywalking\\oap-server\\mqe-rt\\src\\test\\java\\org\\apache\\skywalking\\mqe\\rt\\BinaryOpTest.java",
  "methodName" : "many2OneTest",
  "sourceCode" : "@Test\r\npublic void many2OneTest() throws Exception {\r\n    assertThrows(IllegalExpressionException.class, () -> BinaryOp.doBinaryOp(mockData.newEmptyResult(ExpressionResultType.TIME_SERIES_VALUES, false), mockData.newEmptyResult(ExpressionResultType.SINGLE_VALUE, false), MQEParser.ADD));\r\n    assertThrows(IllegalExpressionException.class, () -> BinaryOp.doBinaryOp(mockData.newEmptyResult(ExpressionResultType.TIME_SERIES_VALUES, true), mockData.newEmptyResult(ExpressionResultType.SINGLE_VALUE, false), MQEParser.ADD));\r\n    assertThrows(IllegalExpressionException.class, () -> BinaryOp.doBinaryOp(mockData.newEmptyResult(ExpressionResultType.TIME_SERIES_VALUES, false), mockData.newEmptyResult(ExpressionResultType.SINGLE_VALUE, true), MQEParser.ADD));\r\n    //sort_list + single\r\n    ExpressionResult add = BinaryOp.doBinaryOp(mockData.newListResult(), mockData.newSingleResult(1000), MQEParser.ADD);\r\n    assertEquals(ExpressionResultType.SORTED_LIST, add.getType());\r\n    assertEquals(\"service_A\", add.getResults().get(0).getValues().get(0).getId());\r\n    assertEquals(1100, add.getResults().get(0).getValues().get(0).getDoubleValue());\r\n    assertEquals(\"service_B\", add.getResults().get(0).getValues().get(1).getId());\r\n    assertEquals(1300, add.getResults().get(0).getValues().get(1).getDoubleValue());\r\n    //seriesNoLabeled + single\r\n    add = BinaryOp.doBinaryOp(mockData.newSeriesNoLabeledResult(), mockData.newSingleResult(1000), MQEParser.ADD);\r\n    assertEquals(ExpressionResultType.TIME_SERIES_VALUES, add.getType());\r\n    assertEquals(\"100\", add.getResults().get(0).getValues().get(0).getId());\r\n    assertEquals(1100, add.getResults().get(0).getValues().get(0).getDoubleValue());\r\n    assertEquals(\"300\", add.getResults().get(0).getValues().get(1).getId());\r\n    assertEquals(1300, add.getResults().get(0).getValues().get(1).getDoubleValue());\r\n    //seriesLabeled + single\r\n    add = BinaryOp.doBinaryOp(mockData.newSeriesLabeledResult(), mockData.newSingleResult(1000), MQEParser.ADD);\r\n    assertEquals(ExpressionResultType.TIME_SERIES_VALUES, add.getType());\r\n    //label=1, label2=21\r\n    assertEquals(\"1\", add.getResults().get(0).getMetric().getLabels().get(0).getValue());\r\n    assertEquals(\"21\", add.getResults().get(0).getMetric().getLabels().get(1).getValue());\r\n    assertEquals(\"100\", add.getResults().get(0).getValues().get(0).getId());\r\n    assertEquals(1100, add.getResults().get(0).getValues().get(0).getDoubleValue());\r\n    assertEquals(\"300\", add.getResults().get(0).getValues().get(1).getId());\r\n    assertEquals(1300, add.getResults().get(0).getValues().get(1).getDoubleValue());\r\n    //label=2, label2=21\r\n    assertEquals(\"2\", add.getResults().get(1).getMetric().getLabels().get(0).getValue());\r\n    assertEquals(\"21\", add.getResults().get(1).getMetric().getLabels().get(1).getValue());\r\n    assertEquals(\"100\", add.getResults().get(1).getValues().get(0).getId());\r\n    assertEquals(1101, add.getResults().get(1).getValues().get(0).getDoubleValue());\r\n    assertEquals(\"300\", add.getResults().get(1).getValues().get(1).getId());\r\n    assertEquals(1301, add.getResults().get(1).getValues().get(1).getDoubleValue());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\skywalking\\oap-server\\mqe-rt\\src\\test\\java\\org\\apache\\skywalking\\mqe\\rt\\BinaryOpTest.java",
  "methodName" : "one2ManyTest",
  "sourceCode" : "@Test\r\npublic void one2ManyTest() throws Exception {\r\n    assertThrows(IllegalExpressionException.class, () -> BinaryOp.doBinaryOp(mockData.newEmptyResult(ExpressionResultType.SINGLE_VALUE, false), mockData.newEmptyResult(ExpressionResultType.TIME_SERIES_VALUES, false), MQEParser.ADD));\r\n    assertThrows(IllegalExpressionException.class, () -> BinaryOp.doBinaryOp(mockData.newEmptyResult(ExpressionResultType.SINGLE_VALUE, false), mockData.newEmptyResult(ExpressionResultType.TIME_SERIES_VALUES, true), MQEParser.ADD));\r\n    // single - sort_list\r\n    ExpressionResult sub = BinaryOp.doBinaryOp(mockData.newSingleResult(1000), mockData.newListResult(), MQEParser.SUB);\r\n    assertEquals(ExpressionResultType.SORTED_LIST, sub.getType());\r\n    assertEquals(\"service_A\", sub.getResults().get(0).getValues().get(0).getId());\r\n    assertEquals(900, sub.getResults().get(0).getValues().get(0).getDoubleValue());\r\n    assertEquals(\"service_B\", sub.getResults().get(0).getValues().get(1).getId());\r\n    assertEquals(700, sub.getResults().get(0).getValues().get(1).getDoubleValue());\r\n    //single - seriesNoLabeled\r\n    sub = BinaryOp.doBinaryOp(mockData.newSingleResult(1000), mockData.newSeriesNoLabeledResult(), MQEParser.SUB);\r\n    assertEquals(ExpressionResultType.TIME_SERIES_VALUES, sub.getType());\r\n    assertEquals(\"100\", sub.getResults().get(0).getValues().get(0).getId());\r\n    assertEquals(900, sub.getResults().get(0).getValues().get(0).getDoubleValue());\r\n    assertEquals(\"300\", sub.getResults().get(0).getValues().get(1).getId());\r\n    assertEquals(700, sub.getResults().get(0).getValues().get(1).getDoubleValue());\r\n    //single - seriesLabeled\r\n    sub = BinaryOp.doBinaryOp(mockData.newSingleResult(1000), mockData.newSeriesLabeledResult(), MQEParser.SUB);\r\n    assertEquals(ExpressionResultType.TIME_SERIES_VALUES, sub.getType());\r\n    //label=1, label2=21\r\n    assertEquals(\"1\", sub.getResults().get(0).getMetric().getLabels().get(0).getValue());\r\n    assertEquals(\"21\", sub.getResults().get(0).getMetric().getLabels().get(1).getValue());\r\n    assertEquals(\"100\", sub.getResults().get(0).getValues().get(0).getId());\r\n    assertEquals(900, sub.getResults().get(0).getValues().get(0).getDoubleValue());\r\n    assertEquals(\"300\", sub.getResults().get(0).getValues().get(1).getId());\r\n    assertEquals(700, sub.getResults().get(0).getValues().get(1).getDoubleValue());\r\n    //label=2, label2=21\r\n    assertEquals(\"2\", sub.getResults().get(1).getMetric().getLabels().get(0).getValue());\r\n    assertEquals(\"21\", sub.getResults().get(1).getMetric().getLabels().get(1).getValue());\r\n    assertEquals(\"100\", sub.getResults().get(1).getValues().get(0).getId());\r\n    assertEquals(899, sub.getResults().get(1).getValues().get(0).getDoubleValue());\r\n    assertEquals(\"300\", sub.getResults().get(1).getValues().get(1).getId());\r\n    assertEquals(699, sub.getResults().get(1).getValues().get(1).getDoubleValue());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\skywalking\\oap-server\\mqe-rt\\src\\test\\java\\org\\apache\\skywalking\\mqe\\rt\\BinaryOpTest.java",
  "methodName" : "single2SingleTest",
  "sourceCode" : "@Test\r\npublic void single2SingleTest() throws IllegalExpressionException {\r\n    assertThrows(IllegalExpressionException.class, () -> BinaryOp.doBinaryOp(mockData.newEmptyResult(ExpressionResultType.SINGLE_VALUE, false), mockData.newEmptyResult(ExpressionResultType.SINGLE_VALUE, false), MQEParser.ADD));\r\n    assertThrows(IllegalExpressionException.class, () -> BinaryOp.doBinaryOp(mockData.newEmptyResult(ExpressionResultType.SINGLE_VALUE, false), mockData.newEmptyResult(ExpressionResultType.SINGLE_VALUE, true), MQEParser.ADD));\r\n    //noLabeled + noLabeled\r\n    ExpressionResult add = BinaryOp.doBinaryOp(mockData.newSingleResult(100), mockData.newSingleResult(200), MQEParser.ADD);\r\n    assertEquals(ExpressionResultType.SINGLE_VALUE, add.getType());\r\n    assertEquals(300, add.getResults().get(0).getValues().get(0).getDoubleValue());\r\n    //labeled + noLabeled\r\n    add = BinaryOp.doBinaryOp(mockData.newSingleLabeledResult(100, 200), mockData.newSingleResult(100), MQEParser.ADD);\r\n    assertEquals(ExpressionResultType.SINGLE_VALUE, add.getType());\r\n    //label=1, label2=21\r\n    assertEquals(\"1\", add.getResults().get(0).getMetric().getLabels().get(0).getValue());\r\n    assertEquals(\"21\", add.getResults().get(0).getMetric().getLabels().get(1).getValue());\r\n    assertEquals(200, add.getResults().get(0).getValues().get(0).getDoubleValue());\r\n    //label=2, label2=21\r\n    assertEquals(\"2\", add.getResults().get(1).getMetric().getLabels().get(0).getValue());\r\n    assertEquals(\"21\", add.getResults().get(1).getMetric().getLabels().get(1).getValue());\r\n    assertEquals(300, add.getResults().get(1).getValues().get(0).getDoubleValue());\r\n    //nolabeled + labeled\r\n    add = BinaryOp.doBinaryOp(mockData.newSingleResult(100), mockData.newSingleLabeledResult(100, 200), MQEParser.ADD);\r\n    assertEquals(ExpressionResultType.SINGLE_VALUE, add.getType());\r\n    //label=1, label2=21\r\n    assertEquals(\"1\", add.getResults().get(0).getMetric().getLabels().get(0).getValue());\r\n    assertEquals(\"21\", add.getResults().get(0).getMetric().getLabels().get(1).getValue());\r\n    assertEquals(200, add.getResults().get(0).getValues().get(0).getDoubleValue());\r\n    //label=2, label2=21\r\n    assertEquals(\"2\", add.getResults().get(1).getMetric().getLabels().get(0).getValue());\r\n    assertEquals(\"21\", add.getResults().get(1).getMetric().getLabels().get(1).getValue());\r\n    assertEquals(300, add.getResults().get(1).getValues().get(0).getDoubleValue());\r\n    //labeled + labeled\r\n    add = BinaryOp.doBinaryOp(mockData.newSingleLabeledResult(100, 102), mockData.newSingleLabeledResult(100, 200), MQEParser.ADD);\r\n    assertEquals(ExpressionResultType.SINGLE_VALUE, add.getType());\r\n    //label=1, label2=21\r\n    assertEquals(\"1\", add.getResults().get(0).getMetric().getLabels().get(0).getValue());\r\n    assertEquals(200, add.getResults().get(0).getValues().get(0).getDoubleValue());\r\n    //label=2, label2=21\r\n    assertEquals(\"2\", add.getResults().get(1).getMetric().getLabels().get(0).getValue());\r\n    assertEquals(302, add.getResults().get(1).getValues().get(0).getDoubleValue());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\skywalking\\oap-server\\mqe-rt\\src\\test\\java\\org\\apache\\skywalking\\mqe\\rt\\BoolOpTest.java",
  "methodName" : "boolOpNoLabeledTest",
  "sourceCode" : "@Test\r\npublic void boolOpNoLabeledTest() throws IllegalExpressionException {\r\n    ExpressionResult left = mockData.newSingleResult(1);\r\n    left.setBoolResult(true);\r\n    ExpressionResult right = mockData.newSingleResult(0);\r\n    right.getResults().get(0).getValues().get(0).setEmptyValue(false);\r\n    right.setBoolResult(true);\r\n    ExpressionResult andResult = BoolOp.doBoolOp(left, right, MQEParser.AND);\r\n    Assertions.assertEquals(ExpressionResultType.SINGLE_VALUE, andResult.getType());\r\n    Assertions.assertEquals(0, andResult.getResults().get(0).getValues().get(0).getDoubleValue());\r\n    left = mockData.newSingleResult(1);\r\n    left.setBoolResult(true);\r\n    right = mockData.newSingleResult(0);\r\n    right.getResults().get(0).getValues().get(0).setEmptyValue(false);\r\n    right.setBoolResult(true);\r\n    ExpressionResult orResult = BoolOp.doBoolOp(left, right, MQEParser.OR);\r\n    Assertions.assertEquals(1, orResult.getResults().get(0).getValues().get(0).getDoubleValue());\r\n    Assertions.assertEquals(ExpressionResultType.SINGLE_VALUE, orResult.getType());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\skywalking\\oap-server\\mqe-rt\\src\\test\\java\\org\\apache\\skywalking\\mqe\\rt\\BoolOpTest.java",
  "methodName" : "boolOpLabeledTest",
  "sourceCode" : "@Test\r\npublic void boolOpLabeledTest() throws IllegalExpressionException {\r\n    ExpressionResult left = mockData.newSingleLabeledResult(1, 0);\r\n    left.setBoolResult(true);\r\n    left.getResults().get(1).getValues().get(0).setEmptyValue(false);\r\n    ExpressionResult right = mockData.newSingleLabeledResult(0, 1);\r\n    right.getResults().get(0).getValues().get(0).setEmptyValue(false);\r\n    right.setBoolResult(true);\r\n    ExpressionResult andResult = BoolOp.doBoolOp(left, right, MQEParser.AND);\r\n    Assertions.assertEquals(0, andResult.getResults().get(0).getValues().get(0).getDoubleValue());\r\n    Assertions.assertEquals(0, andResult.getResults().get(1).getValues().get(0).getDoubleValue());\r\n    Assertions.assertEquals(ExpressionResultType.SINGLE_VALUE, andResult.getType());\r\n    left = mockData.newSingleLabeledResult(1, 0);\r\n    left.setBoolResult(true);\r\n    left.getResults().get(1).getValues().get(0).setEmptyValue(false);\r\n    right = mockData.newSingleLabeledResult(0, 1);\r\n    right.getResults().get(0).getValues().get(0).setEmptyValue(false);\r\n    right.setBoolResult(true);\r\n    ExpressionResult orResult = BoolOp.doBoolOp(left, right, MQEParser.OR);\r\n    Assertions.assertEquals(1, orResult.getResults().get(0).getValues().get(0).getDoubleValue());\r\n    Assertions.assertEquals(1, orResult.getResults().get(1).getValues().get(0).getDoubleValue());\r\n    Assertions.assertEquals(ExpressionResultType.SINGLE_VALUE, orResult.getType());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\skywalking\\oap-server\\mqe-rt\\src\\test\\java\\org\\apache\\skywalking\\mqe\\rt\\CompareOPTest.java",
  "methodName" : "seriesNoLabeledTest",
  "sourceCode" : "//GT/GTE/LT/LTE... are the same logic and tested in here, the others only test GT is enough.\r\n@Test\r\npublic void seriesNoLabeledTest() throws Exception {\r\n    ExpressionResult gt = CompareOp.doCompareOP(mockData.newSeriesNoLabeledResult(100, 200), mockData.newSeriesNoLabeledResult(200, 100), MQEParser.GT);\r\n    assertEquals(ExpressionResultType.TIME_SERIES_VALUES, gt.getType());\r\n    assertEquals(0, gt.getResults().get(0).getValues().get(0).getDoubleValue());\r\n    assertEquals(1, gt.getResults().get(0).getValues().get(1).getDoubleValue());\r\n    ExpressionResult gte = CompareOp.doCompareOP(mockData.newSeriesNoLabeledResult(200, 200), mockData.newSeriesNoLabeledResult(200, 100), MQEParser.GTE);\r\n    assertEquals(ExpressionResultType.TIME_SERIES_VALUES, gte.getType());\r\n    assertEquals(1, gte.getResults().get(0).getValues().get(0).getDoubleValue());\r\n    assertEquals(1, gte.getResults().get(0).getValues().get(1).getDoubleValue());\r\n    ExpressionResult lt = CompareOp.doCompareOP(mockData.newSeriesNoLabeledResult(200, 200), mockData.newSeriesNoLabeledResult(200, 300), MQEParser.LT);\r\n    assertEquals(ExpressionResultType.TIME_SERIES_VALUES, lt.getType());\r\n    assertEquals(0, lt.getResults().get(0).getValues().get(0).getDoubleValue());\r\n    assertEquals(1, lt.getResults().get(0).getValues().get(1).getDoubleValue());\r\n    ExpressionResult lte = CompareOp.doCompareOP(mockData.newSeriesNoLabeledResult(200, 200), mockData.newSeriesNoLabeledResult(200, 100), MQEParser.LTE);\r\n    assertEquals(ExpressionResultType.TIME_SERIES_VALUES, lte.getType());\r\n    assertEquals(1, lte.getResults().get(0).getValues().get(0).getDoubleValue());\r\n    assertEquals(0, lte.getResults().get(0).getValues().get(1).getDoubleValue());\r\n    ExpressionResult neq = CompareOp.doCompareOP(mockData.newSeriesNoLabeledResult(200, 200), mockData.newSeriesNoLabeledResult(200, 100), MQEParser.NEQ);\r\n    assertEquals(ExpressionResultType.TIME_SERIES_VALUES, neq.getType());\r\n    assertEquals(0, neq.getResults().get(0).getValues().get(0).getDoubleValue());\r\n    assertEquals(1, neq.getResults().get(0).getValues().get(1).getDoubleValue());\r\n    ExpressionResult deq = CompareOp.doCompareOP(mockData.newSeriesNoLabeledResult(200, 200), mockData.newSeriesNoLabeledResult(200, 100), MQEParser.DEQ);\r\n    assertEquals(ExpressionResultType.TIME_SERIES_VALUES, neq.getType());\r\n    assertEquals(1, deq.getResults().get(0).getValues().get(0).getDoubleValue());\r\n    assertEquals(0, deq.getResults().get(0).getValues().get(1).getDoubleValue());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\skywalking\\oap-server\\mqe-rt\\src\\test\\java\\org\\apache\\skywalking\\mqe\\rt\\CompareOPTest.java",
  "methodName" : "seriesLabeledTest",
  "sourceCode" : "@Test\r\npublic void seriesLabeledTest() throws Exception {\r\n    //seriesLabeled > seriesNoLabeled\r\n    ExpressionResult gt = CompareOp.doCompareOP(mockData.newSeriesLabeledResult(100, 300, 101, 200), mockData.newSeriesNoLabeledResult(100, 200), MQEParser.GT);\r\n    assertEquals(ExpressionResultType.TIME_SERIES_VALUES, gt.getType());\r\n    //label=1, label2=21\r\n    assertEquals(\"1\", gt.getResults().get(0).getMetric().getLabels().get(0).getValue());\r\n    assertEquals(\"21\", gt.getResults().get(0).getMetric().getLabels().get(1).getValue());\r\n    assertEquals(\"100\", gt.getResults().get(0).getValues().get(0).getId());\r\n    assertEquals(0, gt.getResults().get(0).getValues().get(0).getDoubleValue());\r\n    assertEquals(\"300\", gt.getResults().get(0).getValues().get(1).getId());\r\n    assertEquals(1, gt.getResults().get(0).getValues().get(1).getDoubleValue());\r\n    //label=2, label2=21\r\n    assertEquals(\"2\", gt.getResults().get(1).getMetric().getLabels().get(0).getValue());\r\n    assertEquals(\"21\", gt.getResults().get(1).getMetric().getLabels().get(1).getValue());\r\n    assertEquals(\"100\", gt.getResults().get(1).getValues().get(0).getId());\r\n    assertEquals(1, gt.getResults().get(1).getValues().get(0).getDoubleValue());\r\n    assertEquals(\"300\", gt.getResults().get(1).getValues().get(1).getId());\r\n    assertEquals(0, gt.getResults().get(1).getValues().get(1).getDoubleValue());\r\n    //seriesLabeled > seriesLabeled\r\n    gt = CompareOp.doCompareOP(mockData.newSeriesLabeledResult(101, 300, 100, 201), mockData.newSeriesLabeledResult(100, 300, 101, 200), MQEParser.GT);\r\n    assertEquals(ExpressionResultType.TIME_SERIES_VALUES, gt.getType());\r\n    //label=1, label2=21\r\n    assertEquals(\"1\", gt.getResults().get(0).getMetric().getLabels().get(0).getValue());\r\n    assertEquals(\"21\", gt.getResults().get(0).getMetric().getLabels().get(1).getValue());\r\n    assertEquals(\"100\", gt.getResults().get(0).getValues().get(0).getId());\r\n    assertEquals(1, gt.getResults().get(0).getValues().get(0).getDoubleValue());\r\n    assertEquals(\"300\", gt.getResults().get(0).getValues().get(1).getId());\r\n    assertEquals(0, gt.getResults().get(0).getValues().get(1).getDoubleValue());\r\n    //label=2, label2=21\r\n    assertEquals(\"2\", gt.getResults().get(1).getMetric().getLabels().get(0).getValue());\r\n    assertEquals(\"21\", gt.getResults().get(1).getMetric().getLabels().get(1).getValue());\r\n    assertEquals(\"100\", gt.getResults().get(1).getValues().get(0).getId());\r\n    assertEquals(0, gt.getResults().get(1).getValues().get(0).getDoubleValue());\r\n    assertEquals(\"300\", gt.getResults().get(1).getValues().get(1).getId());\r\n    assertEquals(1, gt.getResults().get(1).getValues().get(1).getDoubleValue());\r\n    //seriesNoLabeled > seriesLabeled\r\n    gt = CompareOp.doCompareOP(mockData.newSeriesNoLabeledResult(101, 202), mockData.newSeriesLabeledResult(100, 300, 101, 201), MQEParser.GT);\r\n    assertEquals(ExpressionResultType.TIME_SERIES_VALUES, gt.getType());\r\n    //label=1, label2=21\r\n    assertEquals(\"1\", gt.getResults().get(0).getMetric().getLabels().get(0).getValue());\r\n    assertEquals(\"21\", gt.getResults().get(0).getMetric().getLabels().get(1).getValue());\r\n    assertEquals(\"100\", gt.getResults().get(0).getValues().get(0).getId());\r\n    assertEquals(1, gt.getResults().get(0).getValues().get(0).getDoubleValue());\r\n    assertEquals(\"300\", gt.getResults().get(0).getValues().get(1).getId());\r\n    assertEquals(0, gt.getResults().get(0).getValues().get(1).getDoubleValue());\r\n    //label=2, label2=21\r\n    assertEquals(\"2\", gt.getResults().get(1).getMetric().getLabels().get(0).getValue());\r\n    assertEquals(\"21\", gt.getResults().get(1).getMetric().getLabels().get(1).getValue());\r\n    assertEquals(\"100\", gt.getResults().get(1).getValues().get(0).getId());\r\n    assertEquals(0, gt.getResults().get(1).getValues().get(0).getDoubleValue());\r\n    assertEquals(\"300\", gt.getResults().get(1).getValues().get(1).getId());\r\n    assertEquals(1, gt.getResults().get(1).getValues().get(1).getDoubleValue());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\skywalking\\oap-server\\mqe-rt\\src\\test\\java\\org\\apache\\skywalking\\mqe\\rt\\CompareOPTest.java",
  "methodName" : "many2OneTest",
  "sourceCode" : "@Test\r\npublic void many2OneTest() throws Exception {\r\n    //sort_list > single\r\n    ExpressionResult gt = CompareOp.doCompareOP(mockData.newListResult(), mockData.newSingleResult(200), MQEParser.GT);\r\n    assertEquals(ExpressionResultType.SORTED_LIST, gt.getType());\r\n    assertEquals(\"service_A\", gt.getResults().get(0).getValues().get(0).getId());\r\n    assertEquals(0, gt.getResults().get(0).getValues().get(0).getDoubleValue());\r\n    assertEquals(\"service_B\", gt.getResults().get(0).getValues().get(1).getId());\r\n    assertEquals(1, gt.getResults().get(0).getValues().get(1).getDoubleValue());\r\n    //seriesNoLabeled > single\r\n    gt = CompareOp.doCompareOP(mockData.newSeriesNoLabeledResult(100, 200), mockData.newSingleResult(101), MQEParser.GT);\r\n    assertEquals(ExpressionResultType.TIME_SERIES_VALUES, gt.getType());\r\n    assertEquals(\"100\", gt.getResults().get(0).getValues().get(0).getId());\r\n    assertEquals(0, gt.getResults().get(0).getValues().get(0).getDoubleValue());\r\n    assertEquals(\"300\", gt.getResults().get(0).getValues().get(1).getId());\r\n    assertEquals(1, gt.getResults().get(0).getValues().get(1).getDoubleValue());\r\n    //seriesLabeled > single\r\n    gt = CompareOp.doCompareOP(mockData.newSeriesLabeledResult(100, 300, 101, 200), mockData.newSingleResult(101), MQEParser.GT);\r\n    assertEquals(ExpressionResultType.TIME_SERIES_VALUES, gt.getType());\r\n    //label=1, label2=21\r\n    assertEquals(\"1\", gt.getResults().get(0).getMetric().getLabels().get(0).getValue());\r\n    assertEquals(\"21\", gt.getResults().get(0).getMetric().getLabels().get(1).getValue());\r\n    assertEquals(\"100\", gt.getResults().get(0).getValues().get(0).getId());\r\n    assertEquals(0, gt.getResults().get(0).getValues().get(0).getDoubleValue());\r\n    assertEquals(\"300\", gt.getResults().get(0).getValues().get(1).getId());\r\n    assertEquals(1, gt.getResults().get(0).getValues().get(1).getDoubleValue());\r\n    //label=2, label2=21\r\n    assertEquals(\"2\", gt.getResults().get(1).getMetric().getLabels().get(0).getValue());\r\n    assertEquals(\"21\", gt.getResults().get(1).getMetric().getLabels().get(1).getValue());\r\n    assertEquals(\"100\", gt.getResults().get(1).getValues().get(0).getId());\r\n    assertEquals(0, gt.getResults().get(1).getValues().get(0).getDoubleValue());\r\n    assertEquals(\"300\", gt.getResults().get(1).getValues().get(1).getId());\r\n    assertEquals(1, gt.getResults().get(1).getValues().get(1).getDoubleValue());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\skywalking\\oap-server\\mqe-rt\\src\\test\\java\\org\\apache\\skywalking\\mqe\\rt\\CompareOPTest.java",
  "methodName" : "one2ManyTest",
  "sourceCode" : "@Test\r\npublic void one2ManyTest() throws Exception {\r\n    // single > sort_list\r\n    ExpressionResult gt = CompareOp.doCompareOP(mockData.newSingleResult(200), mockData.newListResult(), MQEParser.GT);\r\n    assertEquals(ExpressionResultType.SORTED_LIST, gt.getType());\r\n    assertEquals(\"service_A\", gt.getResults().get(0).getValues().get(0).getId());\r\n    assertEquals(1, gt.getResults().get(0).getValues().get(0).getDoubleValue());\r\n    assertEquals(\"service_B\", gt.getResults().get(0).getValues().get(1).getId());\r\n    assertEquals(0, gt.getResults().get(0).getValues().get(1).getDoubleValue());\r\n    //single > seriesNoLabeled\r\n    gt = CompareOp.doCompareOP(mockData.newSingleResult(101), mockData.newSeriesNoLabeledResult(100, 200), MQEParser.GT);\r\n    assertEquals(ExpressionResultType.TIME_SERIES_VALUES, gt.getType());\r\n    assertEquals(\"100\", gt.getResults().get(0).getValues().get(0).getId());\r\n    assertEquals(1, gt.getResults().get(0).getValues().get(0).getDoubleValue());\r\n    assertEquals(\"300\", gt.getResults().get(0).getValues().get(1).getId());\r\n    assertEquals(0, gt.getResults().get(0).getValues().get(1).getDoubleValue());\r\n    //single > seriesLabeled\r\n    gt = CompareOp.doCompareOP(mockData.newSingleResult(101), mockData.newSeriesLabeledResult(100, 200, 200, 100), MQEParser.GT);\r\n    assertEquals(ExpressionResultType.TIME_SERIES_VALUES, gt.getType());\r\n    //label=1, label2=21\r\n    assertEquals(\"1\", gt.getResults().get(0).getMetric().getLabels().get(0).getValue());\r\n    assertEquals(\"21\", gt.getResults().get(0).getMetric().getLabels().get(1).getValue());\r\n    assertEquals(\"100\", gt.getResults().get(0).getValues().get(0).getId());\r\n    assertEquals(1, gt.getResults().get(0).getValues().get(0).getDoubleValue());\r\n    assertEquals(\"300\", gt.getResults().get(0).getValues().get(1).getId());\r\n    assertEquals(0, gt.getResults().get(0).getValues().get(1).getDoubleValue());\r\n    //label=2, label2=21\r\n    assertEquals(\"2\", gt.getResults().get(1).getMetric().getLabels().get(0).getValue());\r\n    assertEquals(\"21\", gt.getResults().get(1).getMetric().getLabels().get(1).getValue());\r\n    assertEquals(\"100\", gt.getResults().get(1).getValues().get(0).getId());\r\n    assertEquals(0, gt.getResults().get(1).getValues().get(0).getDoubleValue());\r\n    assertEquals(\"300\", gt.getResults().get(1).getValues().get(1).getId());\r\n    assertEquals(1, gt.getResults().get(1).getValues().get(1).getDoubleValue());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\skywalking\\oap-server\\mqe-rt\\src\\test\\java\\org\\apache\\skywalking\\mqe\\rt\\CompareOPTest.java",
  "methodName" : "single2SingleTest",
  "sourceCode" : "@Test\r\npublic void single2SingleTest() throws IllegalExpressionException {\r\n    //noLabeled > noLabeled\r\n    ExpressionResult gt = CompareOp.doCompareOP(mockData.newSingleResult(100), mockData.newSingleResult(200), MQEParser.GT);\r\n    assertEquals(ExpressionResultType.SINGLE_VALUE, gt.getType());\r\n    assertEquals(0, gt.getResults().get(0).getValues().get(0).getDoubleValue());\r\n    //labeled > noLabeled\r\n    gt = CompareOp.doCompareOP(mockData.newSingleLabeledResult(100, 200), mockData.newSingleResult(100), MQEParser.GT);\r\n    assertEquals(ExpressionResultType.SINGLE_VALUE, gt.getType());\r\n    //label=1, label2=21\r\n    assertEquals(\"1\", gt.getResults().get(0).getMetric().getLabels().get(0).getValue());\r\n    assertEquals(\"21\", gt.getResults().get(0).getMetric().getLabels().get(1).getValue());\r\n    assertEquals(0, gt.getResults().get(0).getValues().get(0).getDoubleValue());\r\n    //label=2, label2=21\r\n    assertEquals(\"2\", gt.getResults().get(1).getMetric().getLabels().get(0).getValue());\r\n    assertEquals(1, gt.getResults().get(1).getValues().get(0).getDoubleValue());\r\n    assertEquals(\"21\", gt.getResults().get(1).getMetric().getLabels().get(1).getValue());\r\n    //nolabeled > labeled\r\n    gt = CompareOp.doCompareOP(mockData.newSingleResult(101), mockData.newSingleLabeledResult(100, 200), MQEParser.GT);\r\n    assertEquals(ExpressionResultType.SINGLE_VALUE, gt.getType());\r\n    //label=1, label2=21\r\n    assertEquals(\"1\", gt.getResults().get(0).getMetric().getLabels().get(0).getValue());\r\n    assertEquals(\"21\", gt.getResults().get(0).getMetric().getLabels().get(1).getValue());\r\n    assertEquals(1, gt.getResults().get(0).getValues().get(0).getDoubleValue());\r\n    //label=2, label2=21\r\n    assertEquals(\"2\", gt.getResults().get(1).getMetric().getLabels().get(0).getValue());\r\n    assertEquals(\"21\", gt.getResults().get(1).getMetric().getLabels().get(1).getValue());\r\n    assertEquals(0, gt.getResults().get(1).getValues().get(0).getDoubleValue());\r\n    //labeled > labeled\r\n    gt = CompareOp.doCompareOP(mockData.newSingleLabeledResult(100, 202), mockData.newSingleLabeledResult(100, 200), MQEParser.GT);\r\n    assertEquals(ExpressionResultType.SINGLE_VALUE, gt.getType());\r\n    //label=1, label2=21\r\n    assertEquals(\"1\", gt.getResults().get(0).getMetric().getLabels().get(0).getValue());\r\n    assertEquals(\"21\", gt.getResults().get(0).getMetric().getLabels().get(1).getValue());\r\n    assertEquals(0, gt.getResults().get(0).getValues().get(0).getDoubleValue());\r\n    //label=2, label2=21\r\n    assertEquals(\"2\", gt.getResults().get(1).getMetric().getLabels().get(0).getValue());\r\n    assertEquals(\"21\", gt.getResults().get(1).getMetric().getLabels().get(1).getValue());\r\n    assertEquals(1, gt.getResults().get(1).getValues().get(0).getDoubleValue());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\skywalking\\oap-server\\mqe-rt\\src\\test\\java\\org\\apache\\skywalking\\mqe\\rt\\LogicalFunctionOpTest.java",
  "methodName" : "viewAsSeqTest",
  "sourceCode" : "@Test\r\npublic void viewAsSeqTest() throws Exception {\r\n    MQEParser.ExpressionListContext expressions = Mockito.mock(MQEParser.ExpressionListContext.class);\r\n    MQEParser.ExpressionContext emptyExpression = Mockito.mock(MQEParser.ExpressionContext.class);\r\n    MQEParser.ExpressionContext notEmptyExpression = Mockito.mock(MQEParser.ExpressionContext.class);\r\n    Mockito.when(expressions.expression()).thenReturn(Arrays.asList(emptyExpression, notEmptyExpression));\r\n    final MQEParserBaseVisitor<ExpressionResult> visitor = Mockito.mock(MQEParserBaseVisitor.class);\r\n    final ExpressionResult emptyResult = mockData.newSeriesNoLabeledResult(0, 0);\r\n    Mockito.when(visitor.visit(emptyExpression)).thenReturn(emptyResult);\r\n    final ExpressionResult notEmptyResult = mockData.newSeriesNoLabeledResult(100, 200);\r\n    Mockito.when(visitor.visit(notEmptyExpression)).thenReturn(notEmptyResult);\r\n    ExpressionResult result;\r\n    result = LogicalFunctionOp.doOP(MQEParser.VIEW_AS_SEQ, expressions, visitor);\r\n    assertEquals(notEmptyResult, result);\r\n    Mockito.when(expressions.expression()).thenReturn(Arrays.asList(emptyExpression, emptyExpression));\r\n    result = LogicalFunctionOp.doOP(MQEParser.VIEW_AS_SEQ, expressions, visitor);\r\n    assertEquals(emptyResult, result);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\skywalking\\oap-server\\mqe-rt\\src\\test\\java\\org\\apache\\skywalking\\mqe\\rt\\MathematicalFunctionOpTest.java",
  "methodName" : "seriesNoLabeledTest",
  "sourceCode" : "//ABS/CEIL/FLOOR/ROUND... are the same logic and tested in here, the others only test ABS is enough.\r\n@Test\r\npublic void seriesNoLabeledTest() throws Exception {\r\n    ExpressionResult abs = MathematicalFunctionOp.doFunction0Op(mockData.newSeriesNoLabeledResult(-100.111, -300), MQEParser.ABS);\r\n    assertEquals(ExpressionResultType.TIME_SERIES_VALUES, abs.getType());\r\n    assertEquals(\"100\", abs.getResults().get(0).getValues().get(0).getId());\r\n    assertEquals(100.111, abs.getResults().get(0).getValues().get(0).getDoubleValue());\r\n    assertEquals(\"300\", abs.getResults().get(0).getValues().get(1).getId());\r\n    assertEquals(300, abs.getResults().get(0).getValues().get(1).getDoubleValue());\r\n    ExpressionResult ceil = MathematicalFunctionOp.doFunction0Op(mockData.newSeriesNoLabeledResult(100.111, 300.2), MQEParser.CEIL);\r\n    assertEquals(ExpressionResultType.TIME_SERIES_VALUES, ceil.getType());\r\n    assertEquals(\"100\", ceil.getResults().get(0).getValues().get(0).getId());\r\n    assertEquals(101, ceil.getResults().get(0).getValues().get(0).getDoubleValue());\r\n    assertEquals(\"300\", ceil.getResults().get(0).getValues().get(1).getId());\r\n    assertEquals(301, ceil.getResults().get(0).getValues().get(1).getDoubleValue());\r\n    ExpressionResult floor = MathematicalFunctionOp.doFunction0Op(mockData.newSeriesNoLabeledResult(100.111, 300.2), MQEParser.FLOOR);\r\n    assertEquals(ExpressionResultType.TIME_SERIES_VALUES, ceil.getType());\r\n    assertEquals(\"100\", floor.getResults().get(0).getValues().get(0).getId());\r\n    assertEquals(100, floor.getResults().get(0).getValues().get(0).getDoubleValue());\r\n    assertEquals(\"300\", floor.getResults().get(0).getValues().get(1).getId());\r\n    assertEquals(300, floor.getResults().get(0).getValues().get(1).getDoubleValue());\r\n    ExpressionResult round = MathematicalFunctionOp.doFunction1Op(mockData.newSeriesNoLabeledResult(100.111, 300.222), MQEParser.ROUND, 2);\r\n    assertEquals(ExpressionResultType.TIME_SERIES_VALUES, ceil.getType());\r\n    assertEquals(\"100\", round.getResults().get(0).getValues().get(0).getId());\r\n    assertEquals(100.11, round.getResults().get(0).getValues().get(0).getDoubleValue());\r\n    assertEquals(\"300\", round.getResults().get(0).getValues().get(1).getId());\r\n    assertEquals(300.22, round.getResults().get(0).getValues().get(1).getDoubleValue());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\skywalking\\oap-server\\mqe-rt\\src\\test\\java\\org\\apache\\skywalking\\mqe\\rt\\MathematicalFunctionOpTest.java",
  "methodName" : "seriesLabeledTest",
  "sourceCode" : "@Test\r\npublic void seriesLabeledTest() throws Exception {\r\n    ExpressionResult abs = MathematicalFunctionOp.doFunction0Op(mockData.newSeriesLabeledResult(-100.111, -300, -101.333, -301.666), MQEParser.ABS);\r\n    assertEquals(ExpressionResultType.TIME_SERIES_VALUES, abs.getType());\r\n    //label=1, label2=21\r\n    assertEquals(\"1\", abs.getResults().get(0).getMetric().getLabels().get(0).getValue());\r\n    assertEquals(\"21\", abs.getResults().get(0).getMetric().getLabels().get(1).getValue());\r\n    assertEquals(\"100\", abs.getResults().get(0).getValues().get(0).getId());\r\n    assertEquals(100.111, abs.getResults().get(0).getValues().get(0).getDoubleValue());\r\n    assertEquals(\"300\", abs.getResults().get(0).getValues().get(1).getId());\r\n    assertEquals(300, abs.getResults().get(0).getValues().get(1).getDoubleValue());\r\n    //label=2, label2=21\r\n    assertEquals(\"2\", abs.getResults().get(1).getMetric().getLabels().get(0).getValue());\r\n    assertEquals(\"21\", abs.getResults().get(1).getMetric().getLabels().get(1).getValue());\r\n    assertEquals(\"100\", abs.getResults().get(1).getValues().get(0).getId());\r\n    assertEquals(101.333, abs.getResults().get(1).getValues().get(0).getDoubleValue());\r\n    assertEquals(\"300\", abs.getResults().get(1).getValues().get(1).getId());\r\n    assertEquals(301.666, abs.getResults().get(1).getValues().get(1).getDoubleValue());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\skywalking\\oap-server\\mqe-rt\\src\\test\\java\\org\\apache\\skywalking\\mqe\\rt\\MathematicalFunctionOpTest.java",
  "methodName" : "listTest",
  "sourceCode" : "@Test\r\npublic void listTest() throws Exception {\r\n    ExpressionResult abs = MathematicalFunctionOp.doFunction0Op(mockData.newListResult(-100.111, -300), MQEParser.ABS);\r\n    assertEquals(ExpressionResultType.SORTED_LIST, abs.getType());\r\n    assertEquals(\"service_A\", abs.getResults().get(0).getValues().get(0).getId());\r\n    assertEquals(100.111, abs.getResults().get(0).getValues().get(0).getDoubleValue());\r\n    assertEquals(\"service_B\", abs.getResults().get(0).getValues().get(1).getId());\r\n    assertEquals(300, abs.getResults().get(0).getValues().get(1).getDoubleValue());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\skywalking\\oap-server\\mqe-rt\\src\\test\\java\\org\\apache\\skywalking\\mqe\\rt\\SortLabelValuesOpTest.java",
  "methodName" : "sortLabelValueTest",
  "sourceCode" : "@Test\r\npublic void sortLabelValueTest() throws IllegalExpressionException {\r\n    //des\r\n    ExpressionResult des = SortLabelValuesOp.doSortLabelValuesOp(mockData.newSeriesComplexLabeledResult(), MQEParser.DES, List.of(\"label\", \"label2\", \"label3\"));\r\n    assertDes(des);\r\n    //asc\r\n    ExpressionResult asc = SortLabelValuesOp.doSortLabelValuesOp(des, MQEParser.ASC, List.of(\"label\", \"label2\", \"label3\"));\r\n    assertAsc(asc);\r\n    // distinct\r\n    ExpressionResult distinctDes = SortLabelValuesOp.doSortLabelValuesOp(mockData.newSeriesComplexLabeledResult(), MQEParser.DES, List.of(\"label\", \"label2\", \"label3\", \"label\"));\r\n    assertDes(distinctDes);\r\n    // ignore\r\n    ExpressionResult ignoreDes = SortLabelValuesOp.doSortLabelValuesOp(mockData.newSeriesComplexLabeledResult(), MQEParser.DES, List.of(\"label\", \"labelIgnore\", \"label2\", \"label3\"));\r\n    assertDes(ignoreDes);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\skywalking\\oap-server\\mqe-rt\\src\\test\\java\\org\\apache\\skywalking\\mqe\\rt\\SortValuesOpTest.java",
  "methodName" : "sortValueTest",
  "sourceCode" : "@Test\r\npublic void sortValueTest() throws IllegalExpressionException {\r\n    //no label\r\n    ExpressionResult des = SortValuesOp.doSortValuesOp(mockData.newSeriesNoLabeledResult(), 3, MQEParser.DES, MQEParser.AVG);\r\n    Assertions.assertEquals(100, des.getResults().get(0).getValues().get(0).getDoubleValue());\r\n    Assertions.assertEquals(300, des.getResults().get(0).getValues().get(1).getDoubleValue());\r\n    ExpressionResult asc = SortValuesOp.doSortValuesOp(mockData.newSeriesNoLabeledResult(), 3, MQEParser.ASC, MQEParser.AVG);\r\n    Assertions.assertEquals(100, asc.getResults().get(0).getValues().get(0).getDoubleValue());\r\n    Assertions.assertEquals(300, asc.getResults().get(0).getValues().get(1).getDoubleValue());\r\n    //labeled\r\n    ExpressionResult desLabeled = SortValuesOp.doSortValuesOp(mockData.newSeriesLabeledResult(), 3, MQEParser.DES, MQEParser.AVG);\r\n    Assertions.assertEquals(101, desLabeled.getResults().get(0).getValues().get(0).getDoubleValue());\r\n    Assertions.assertEquals(301, desLabeled.getResults().get(0).getValues().get(1).getDoubleValue());\r\n    Assertions.assertEquals(\"label\", desLabeled.getResults().get(0).getMetric().getLabels().get(0).getKey());\r\n    Assertions.assertEquals(\"2\", desLabeled.getResults().get(0).getMetric().getLabels().get(0).getValue());\r\n    Assertions.assertEquals(\"label2\", desLabeled.getResults().get(0).getMetric().getLabels().get(1).getKey());\r\n    Assertions.assertEquals(\"21\", desLabeled.getResults().get(0).getMetric().getLabels().get(1).getValue());\r\n    Assertions.assertEquals(100, desLabeled.getResults().get(1).getValues().get(0).getDoubleValue());\r\n    Assertions.assertEquals(300, desLabeled.getResults().get(1).getValues().get(1).getDoubleValue());\r\n    Assertions.assertEquals(\"label\", desLabeled.getResults().get(1).getMetric().getLabels().get(0).getKey());\r\n    Assertions.assertEquals(\"1\", desLabeled.getResults().get(1).getMetric().getLabels().get(0).getValue());\r\n    Assertions.assertEquals(\"label2\", desLabeled.getResults().get(1).getMetric().getLabels().get(1).getKey());\r\n    Assertions.assertEquals(\"21\", desLabeled.getResults().get(1).getMetric().getLabels().get(1).getValue());\r\n    ExpressionResult ascLabeled = SortValuesOp.doSortValuesOp(mockData.newSeriesLabeledResult(), 3, MQEParser.ASC, MQEParser.AVG);\r\n    Assertions.assertEquals(100, ascLabeled.getResults().get(0).getValues().get(0).getDoubleValue());\r\n    Assertions.assertEquals(300, ascLabeled.getResults().get(0).getValues().get(1).getDoubleValue());\r\n    Assertions.assertEquals(\"label\", ascLabeled.getResults().get(0).getMetric().getLabels().get(0).getKey());\r\n    Assertions.assertEquals(\"1\", ascLabeled.getResults().get(0).getMetric().getLabels().get(0).getValue());\r\n    Assertions.assertEquals(\"label2\", ascLabeled.getResults().get(0).getMetric().getLabels().get(1).getKey());\r\n    Assertions.assertEquals(\"21\", ascLabeled.getResults().get(0).getMetric().getLabels().get(1).getValue());\r\n    Assertions.assertEquals(101, ascLabeled.getResults().get(1).getValues().get(0).getDoubleValue());\r\n    Assertions.assertEquals(301, ascLabeled.getResults().get(1).getValues().get(1).getDoubleValue());\r\n    Assertions.assertEquals(\"label\", ascLabeled.getResults().get(1).getMetric().getLabels().get(0).getKey());\r\n    Assertions.assertEquals(\"2\", ascLabeled.getResults().get(1).getMetric().getLabels().get(0).getValue());\r\n    Assertions.assertEquals(\"label2\", ascLabeled.getResults().get(1).getMetric().getLabels().get(1).getKey());\r\n    Assertions.assertEquals(\"21\", ascLabeled.getResults().get(1).getMetric().getLabels().get(1).getValue());\r\n    //limit\r\n    ExpressionResult desLabeledLimit = SortValuesOp.doSortValuesOp(mockData.newSeriesLabeledResult(), 1, MQEParser.DES, MQEParser.AVG);\r\n    Assertions.assertEquals(101, desLabeledLimit.getResults().get(0).getValues().get(0).getDoubleValue());\r\n    Assertions.assertEquals(301, desLabeledLimit.getResults().get(0).getValues().get(1).getDoubleValue());\r\n    Assertions.assertEquals(\"label\", desLabeledLimit.getResults().get(0).getMetric().getLabels().get(0).getKey());\r\n    Assertions.assertEquals(\"2\", desLabeledLimit.getResults().get(0).getMetric().getLabels().get(0).getValue());\r\n    Assertions.assertEquals(\"label2\", desLabeledLimit.getResults().get(0).getMetric().getLabels().get(1).getKey());\r\n    Assertions.assertEquals(\"21\", desLabeledLimit.getResults().get(0).getMetric().getLabels().get(1).getValue());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\skywalking\\oap-server\\mqe-rt\\src\\test\\java\\org\\apache\\skywalking\\mqe\\rt\\TopNOfOpTest.java",
  "methodName" : "mergeTopNResultTest",
  "sourceCode" : "@Test\r\npublic void mergeTopNResultTest() throws IllegalExpressionException {\r\n    MockData mockData = new MockData();\r\n    List<ExpressionResult> topNResults = List.of(mockData.newListResult(1000, 100), mockData.newListResult(600, 500), mockData.newListResult(300, 2000));\r\n    ExpressionResult topNResult = TopNOfOp.doMergeTopNResult(topNResults, 2, MQEParser.DES);\r\n    Assertions.assertEquals(ExpressionResultType.SORTED_LIST, topNResult.getType());\r\n    Assertions.assertEquals(2, topNResult.getResults().get(0).getValues().size());\r\n    Assertions.assertEquals(2000, topNResult.getResults().get(0).getValues().get(0).getDoubleValue());\r\n    Assertions.assertEquals(\"service_B\", topNResult.getResults().get(0).getValues().get(0).getId());\r\n    Assertions.assertEquals(1000, topNResult.getResults().get(0).getValues().get(1).getDoubleValue());\r\n    Assertions.assertEquals(\"service_A\", topNResult.getResults().get(0).getValues().get(1).getId());\r\n    ExpressionResult topNResultAsc = TopNOfOp.doMergeTopNResult(topNResults, 8, MQEParser.ASC);\r\n    Assertions.assertEquals(6, topNResultAsc.getResults().get(0).getValues().size());\r\n    Assertions.assertEquals(100, topNResultAsc.getResults().get(0).getValues().get(0).getDoubleValue());\r\n    Assertions.assertEquals(\"service_B\", topNResultAsc.getResults().get(0).getValues().get(0).getId());\r\n    Assertions.assertEquals(2000, topNResultAsc.getResults().get(0).getValues().get(5).getDoubleValue());\r\n    Assertions.assertEquals(\"service_B\", topNResultAsc.getResults().get(0).getValues().get(5).getId());\r\n    topNResults.get(2).setType(ExpressionResultType.RECORD_LIST);\r\n    Assertions.assertThrows(IllegalExpressionException.class, () -> {\r\n        TopNOfOp.doMergeTopNResult(topNResults, 2, MQEParser.DES);\r\n    });\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\skywalking\\oap-server\\mqe-rt\\src\\test\\java\\org\\apache\\skywalking\\mqe\\rt\\TrendOpTest.java",
  "methodName" : "increaseNoLabeledTest",
  "sourceCode" : "@Test\r\npublic void increaseNoLabeledTest() throws Exception {\r\n    ExpressionResult increase = TrendOp.doTrendOp(mockData.newSeriesNoLabeledResult(100, 280), MQEParser.INCREASE, 1, Step.MINUTE);\r\n    assertEquals(ExpressionResultType.TIME_SERIES_VALUES, increase.getType());\r\n    assertEquals(\"300\", increase.getResults().get(0).getValues().get(0).getId());\r\n    assertEquals(180, increase.getResults().get(0).getValues().get(0).getDoubleValue());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\skywalking\\oap-server\\mqe-rt\\src\\test\\java\\org\\apache\\skywalking\\mqe\\rt\\TrendOpTest.java",
  "methodName" : "increaseLabeledTest",
  "sourceCode" : "@Test\r\npublic void increaseLabeledTest() throws Exception {\r\n    ExpressionResult increase = TrendOp.doTrendOp(mockData.newSeriesLabeledResult(100, 280, 100, 220), MQEParser.INCREASE, 1, Step.MINUTE);\r\n    assertEquals(ExpressionResultType.TIME_SERIES_VALUES, increase.getType());\r\n    assertEquals(\"300\", increase.getResults().get(0).getValues().get(0).getId());\r\n    assertEquals(180, increase.getResults().get(0).getValues().get(0).getDoubleValue());\r\n    assertEquals(\"300\", increase.getResults().get(1).getValues().get(0).getId());\r\n    assertEquals(120, increase.getResults().get(1).getValues().get(0).getDoubleValue());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\skywalking\\oap-server\\mqe-rt\\src\\test\\java\\org\\apache\\skywalking\\mqe\\rt\\TrendOpTest.java",
  "methodName" : "rateNoLabeledTest",
  "sourceCode" : "@Test\r\npublic void rateNoLabeledTest() throws Exception {\r\n    ExpressionResult rate = TrendOp.doTrendOp(mockData.newSeriesNoLabeledResult(100, 280), MQEParser.RATE, 1, Step.MINUTE);\r\n    assertEquals(ExpressionResultType.TIME_SERIES_VALUES, rate.getType());\r\n    assertEquals(\"300\", rate.getResults().get(0).getValues().get(0).getId());\r\n    assertEquals(3, rate.getResults().get(0).getValues().get(0).getDoubleValue());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\skywalking\\oap-server\\mqe-rt\\src\\test\\java\\org\\apache\\skywalking\\mqe\\rt\\TrendOpTest.java",
  "methodName" : "rateLabeledTest",
  "sourceCode" : "@Test\r\npublic void rateLabeledTest() throws Exception {\r\n    ExpressionResult rate = TrendOp.doTrendOp(mockData.newSeriesLabeledResult(100, 280, 100, 220), MQEParser.RATE, 1, Step.MINUTE);\r\n    assertEquals(ExpressionResultType.TIME_SERIES_VALUES, rate.getType());\r\n    assertEquals(\"300\", rate.getResults().get(0).getValues().get(0).getId());\r\n    assertEquals(3, rate.getResults().get(0).getValues().get(0).getDoubleValue());\r\n    assertEquals(\"300\", rate.getResults().get(1).getValues().get(0).getId());\r\n    assertEquals(2, rate.getResults().get(1).getValues().get(0).getDoubleValue());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\skywalking\\oap-server\\oal-rt\\src\\test\\java\\org\\apache\\skywalking\\oal\\rt\\parser\\DeepAnalysisTest.java",
  "methodName" : "testServiceAnalysis",
  "sourceCode" : "@Test\r\npublic void testServiceAnalysis() {\r\n    AnalysisResult result = new AnalysisResult();\r\n    result.getFrom().setSourceName(\"Service\");\r\n    result.getFrom().getSourceAttribute().add(\"latency\");\r\n    result.setMetricsName(\"ServiceAvg\");\r\n    result.getAggregationFuncStmt().setAggregationFunctionName(\"longAvg\");\r\n    DeepAnalysis analysis = new DeepAnalysis();\r\n    result = analysis.analysis(result);\r\n    EntryMethod method = result.getEntryMethod();\r\n    Assertions.assertEquals(\"combine\", method.getMethodName());\r\n    Assertions.assertEquals(\"(long)(source.getLatency())\", method.getArgsExpressions().get(0));\r\n    Assertions.assertEquals(\"(long)(1)\", method.getArgsExpressions().get(1));\r\n    List<SourceColumn> source = result.getFieldsFromSource();\r\n    Assertions.assertEquals(7, source.size());\r\n    List<DataColumn> persistentFields = result.getPersistentFields();\r\n    Assertions.assertEquals(4, persistentFields.size());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\skywalking\\oap-server\\oal-rt\\src\\test\\java\\org\\apache\\skywalking\\oal\\rt\\parser\\DeepAnalysisTest.java",
  "methodName" : "testEndpointAnalysis",
  "sourceCode" : "@Test\r\npublic void testEndpointAnalysis() {\r\n    AnalysisResult result = new AnalysisResult();\r\n    result.getFrom().setSourceName(\"Endpoint\");\r\n    result.getFrom().getSourceAttribute().add(\"latency\");\r\n    result.setMetricsName(\"EndpointAvg\");\r\n    result.getAggregationFuncStmt().setAggregationFunctionName(\"longAvg\");\r\n    DeepAnalysis analysis = new DeepAnalysis();\r\n    result = analysis.analysis(result);\r\n    EntryMethod method = result.getEntryMethod();\r\n    Assertions.assertEquals(\"combine\", method.getMethodName());\r\n    Assertions.assertEquals(\"(long)(source.getLatency())\", method.getArgsExpressions().get(0));\r\n    Assertions.assertEquals(\"(long)(1)\", method.getArgsExpressions().get(1));\r\n    List<SourceColumn> source = result.getFieldsFromSource();\r\n    Assertions.assertEquals(8, source.size());\r\n    List<DataColumn> persistentFields = result.getPersistentFields();\r\n    Assertions.assertEquals(4, persistentFields.size());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\skywalking\\oap-server\\oal-rt\\src\\test\\java\\org\\apache\\skywalking\\oal\\rt\\parser\\DeepAnalysisTest.java",
  "methodName" : "testFilterAnalysis",
  "sourceCode" : "@Test\r\npublic void testFilterAnalysis() {\r\n    AnalysisResult result = new AnalysisResult();\r\n    result.getFrom().setSourceName(\"Endpoint\");\r\n    result.getFrom().getSourceAttribute().add(\"latency\");\r\n    result.setMetricsName(\"EndpointAvg\");\r\n    result.getAggregationFuncStmt().setAggregationFunctionName(\"longAvg\");\r\n    ConditionExpression expression = new ConditionExpression();\r\n    expression.setExpressionType(\"stringMatch\");\r\n    expression.getAttributes().add(\"name\");\r\n    expression.setValue(\"\\\"/service/prod/save\\\"\");\r\n    result.getFilters().addFilterExpressionsParserResult(expression);\r\n    DeepAnalysis analysis = new DeepAnalysis();\r\n    result = analysis.analysis(result);\r\n    EntryMethod method = result.getEntryMethod();\r\n    Assertions.assertEquals(\"combine\", method.getMethodName());\r\n    Assertions.assertEquals(\"(long)(source.getLatency())\", method.getArgsExpressions().get(0));\r\n    Assertions.assertEquals(\"(long)(1)\", method.getArgsExpressions().get(1));\r\n    List<SourceColumn> source = result.getFieldsFromSource();\r\n    Assertions.assertEquals(8, source.size());\r\n    List<DataColumn> persistentFields = result.getPersistentFields();\r\n    Assertions.assertEquals(4, persistentFields.size());\r\n    List<Expression> filterExpressions = result.getFilters().getFilterExpressions();\r\n    Assertions.assertEquals(1, filterExpressions.size());\r\n    Expression filterExpression = filterExpressions.get(0);\r\n    Assertions.assertEquals(StringMatch.class.getName(), filterExpression.getExpressionObject());\r\n    Assertions.assertEquals(\"source.getName()\", filterExpression.getLeft());\r\n    Assertions.assertEquals(\"\\\"/service/prod/save\\\"\", filterExpression.getRight());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\skywalking\\oap-server\\oal-rt\\src\\test\\java\\org\\apache\\skywalking\\oal\\rt\\parser\\DeepAnalysisTest.java",
  "methodName" : "shouldUseCorrectMatcher",
  "sourceCode" : "@Test\r\npublic void shouldUseCorrectMatcher() {\r\n    AnalysisResult result = new AnalysisResult();\r\n    result.getFrom().setSourceName(\"Endpoint\");\r\n    result.getFrom().getSourceAttribute().add(\"latency\");\r\n    result.setMetricsName(\"EndpointAvg\");\r\n    result.getAggregationFuncStmt().setAggregationFunctionName(\"longAvg\");\r\n    DeepAnalysis analysis = new DeepAnalysis();\r\n    result.getFilters().setFilterExpressions(null);\r\n    result.getFilters().setFilterExpressionsParserResult(null);\r\n    result.getFilters().addFilterExpressionsParserResult(new ConditionExpression(\"booleanMatch\", \"valid\", \"\"));\r\n    result = analysis.analysis(result);\r\n    assertTrue(result.getFilters().getFilterExpressions().size() > 0);\r\n    assertEquals(BooleanMatch.class.getName(), result.getFilters().getFilterExpressions().get(0).getExpressionObject());\r\n    assertEquals(\"source.isValid()\", result.getFilters().getFilterExpressions().get(0).getLeft());\r\n    result.getFilters().setFilterExpressions(null);\r\n    result.getFilters().setFilterExpressionsParserResult(null);\r\n    result.getFilters().addFilterExpressionsParserResult(new ConditionExpression(\"stringMatch\", \"type\", \"\"));\r\n    result = analysis.analysis(result);\r\n    assertTrue(result.getFilters().getFilterExpressions().size() > 0);\r\n    assertEquals(StringMatch.class.getName(), result.getFilters().getFilterExpressions().get(0).getExpressionObject());\r\n    assertEquals(\"source.getType()\", result.getFilters().getFilterExpressions().get(0).getLeft());\r\n    result.getFilters().setFilterExpressions(null);\r\n    result.getFilters().setFilterExpressionsParserResult(null);\r\n    result.getFilters().addFilterExpressionsParserResult(new ConditionExpression(\"notEqualMatch\", \"type\", \"\"));\r\n    result = analysis.analysis(result);\r\n    assertTrue(result.getFilters().getFilterExpressions().size() > 0);\r\n    assertEquals(NotEqualMatch.class.getName(), result.getFilters().getFilterExpressions().get(0).getExpressionObject());\r\n    assertEquals(\"source.getType()\", result.getFilters().getFilterExpressions().get(0).getLeft());\r\n    result.getFilters().setFilterExpressions(null);\r\n    result.getFilters().setFilterExpressionsParserResult(null);\r\n    result.getFilters().addFilterExpressionsParserResult(new ConditionExpression(\"booleanNotEqualMatch\", \"type\", \"\"));\r\n    result = analysis.analysis(result);\r\n    assertTrue(result.getFilters().getFilterExpressions().size() > 0);\r\n    assertEquals(BooleanNotEqualMatch.class.getName(), result.getFilters().getFilterExpressions().get(0).getExpressionObject());\r\n    assertEquals(\"source.isType()\", result.getFilters().getFilterExpressions().get(0).getLeft());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\skywalking\\oap-server\\oal-rt\\src\\test\\java\\org\\apache\\skywalking\\oal\\rt\\parser\\ScriptParserTest.java",
  "methodName" : "testParse",
  "sourceCode" : "@Test\r\npublic void testParse() throws IOException {\r\n    ScriptParser parser = ScriptParser.createFromScriptText(\"endpoint_resp_time = from(Endpoint.latency).longAvg(); //comment test\" + \"\\n\" + \"Service_avg = from(Service.latency).longAvg()\", TEST_SOURCE_PACKAGE);\r\n    List<AnalysisResult> results = parser.parse().getMetricsStmts();\r\n    Assertions.assertEquals(2, results.size());\r\n    AnalysisResult endpointAvg = results.get(0);\r\n    Assertions.assertEquals(\"EndpointRespTime\", endpointAvg.getMetricsName());\r\n    Assertions.assertEquals(\"Endpoint\", endpointAvg.getFrom().getSourceName());\r\n    Assertions.assertEquals(\"[latency]\", endpointAvg.getFrom().getSourceAttribute().toString());\r\n    Assertions.assertEquals(\"longAvg\", endpointAvg.getAggregationFuncStmt().getAggregationFunctionName());\r\n    AnalysisResult serviceAvg = results.get(1);\r\n    Assertions.assertEquals(\"ServiceAvg\", serviceAvg.getMetricsName());\r\n    Assertions.assertEquals(\"Service\", serviceAvg.getFrom().getSourceName());\r\n    Assertions.assertEquals(\"[latency]\", serviceAvg.getFrom().getSourceAttribute().toString());\r\n    Assertions.assertEquals(\"longAvg\", serviceAvg.getAggregationFuncStmt().getAggregationFunctionName());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\skywalking\\oap-server\\oal-rt\\src\\test\\java\\org\\apache\\skywalking\\oal\\rt\\parser\\ScriptParserTest.java",
  "methodName" : "testParse2",
  "sourceCode" : "@Test\r\npublic void testParse2() throws IOException {\r\n    ScriptParser parser = ScriptParser.createFromScriptText(\"Endpoint_percent = from(Endpoint.*).percent(status == true);\", TEST_SOURCE_PACKAGE);\r\n    List<AnalysisResult> results = parser.parse().getMetricsStmts();\r\n    AnalysisResult endpointPercent = results.get(0);\r\n    Assertions.assertEquals(\"EndpointPercent\", endpointPercent.getMetricsName());\r\n    Assertions.assertEquals(\"Endpoint\", endpointPercent.getFrom().getSourceName());\r\n    Assertions.assertEquals(\"[*]\", endpointPercent.getFrom().getSourceAttribute().toString());\r\n    Assertions.assertEquals(\"percent\", endpointPercent.getAggregationFuncStmt().getAggregationFunctionName());\r\n    EntryMethod entryMethod = endpointPercent.getEntryMethod();\r\n    List<Object> methodArgsExpressions = entryMethod.getArgsExpressions();\r\n    Assertions.assertEquals(1, methodArgsExpressions.size());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\skywalking\\oap-server\\oal-rt\\src\\test\\java\\org\\apache\\skywalking\\oal\\rt\\parser\\ScriptParserTest.java",
  "methodName" : "testParse3",
  "sourceCode" : "@Test\r\npublic void testParse3() throws IOException {\r\n    ScriptParser parser = ScriptParser.createFromScriptText(\"Endpoint_percent = from(Endpoint.*).filter(status == true).filter(name == \\\"/product/abc\\\").longAvg();\", TEST_SOURCE_PACKAGE);\r\n    List<AnalysisResult> results = parser.parse().getMetricsStmts();\r\n    AnalysisResult endpointPercent = results.get(0);\r\n    Assertions.assertEquals(\"EndpointPercent\", endpointPercent.getMetricsName());\r\n    Assertions.assertEquals(\"Endpoint\", endpointPercent.getFrom().getSourceName());\r\n    Assertions.assertEquals(\"[*]\", endpointPercent.getFrom().getSourceAttribute().toString());\r\n    Assertions.assertEquals(\"longAvg\", endpointPercent.getAggregationFuncStmt().getAggregationFunctionName());\r\n    List<ConditionExpression> expressions = endpointPercent.getFilters().getFilterExpressionsParserResult();\r\n    Assertions.assertEquals(2, expressions.size());\r\n    ConditionExpression booleanMatchExp = expressions.get(0);\r\n    Assertions.assertEquals(\"[status]\", booleanMatchExp.getAttributes().toString());\r\n    Assertions.assertEquals(\"true\", booleanMatchExp.getValue());\r\n    Assertions.assertEquals(\"booleanMatch\", booleanMatchExp.getExpressionType());\r\n    ConditionExpression stringMatchExp = expressions.get(1);\r\n    Assertions.assertEquals(\"[name]\", stringMatchExp.getAttributes().toString());\r\n    Assertions.assertEquals(\"\\\"/product/abc\\\"\", stringMatchExp.getValue());\r\n    Assertions.assertEquals(\"stringMatch\", stringMatchExp.getExpressionType());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\skywalking\\oap-server\\oal-rt\\src\\test\\java\\org\\apache\\skywalking\\oal\\rt\\parser\\ScriptParserTest.java",
  "methodName" : "testParse4",
  "sourceCode" : "@Test\r\npublic void testParse4() throws IOException {\r\n    ScriptParser parser = ScriptParser.createFromScriptText(\"service_response_s1_summary = from(Service.latency).filter(latency > 1000).sum();\" + \"\\n\" + \"service_response_s2_summary = from(Service.latency).filter(latency < 2000).sum();\" + \"\\n\" + \"service_response_s3_summary = from(Service.latency).filter(latency >= 3000).sum();\" + \"\\n\" + \"service_response_s4_summary = from(Service.latency).filter(latency <= 4000).sum();\", TEST_SOURCE_PACKAGE);\r\n    List<AnalysisResult> results = parser.parse().getMetricsStmts();\r\n    AnalysisResult responseSummary = results.get(0);\r\n    Assertions.assertEquals(\"ServiceResponseS1Summary\", responseSummary.getMetricsName());\r\n    Assertions.assertEquals(\"Service\", responseSummary.getFrom().getSourceName());\r\n    Assertions.assertEquals(\"[latency]\", responseSummary.getFrom().getSourceAttribute().toString());\r\n    Assertions.assertEquals(\"sum\", responseSummary.getAggregationFuncStmt().getAggregationFunctionName());\r\n    List<ConditionExpression> expressions = responseSummary.getFilters().getFilterExpressionsParserResult();\r\n    Assertions.assertEquals(1, expressions.size());\r\n    ConditionExpression booleanMatchExp = expressions.get(0);\r\n    Assertions.assertEquals(\"[latency]\", booleanMatchExp.getAttributes().toString());\r\n    Assertions.assertEquals(\"1000\", booleanMatchExp.getValue());\r\n    Assertions.assertEquals(\"greaterMatch\", booleanMatchExp.getExpressionType());\r\n    responseSummary = results.get(1);\r\n    expressions = responseSummary.getFilters().getFilterExpressionsParserResult();\r\n    Assertions.assertEquals(1, expressions.size());\r\n    booleanMatchExp = expressions.get(0);\r\n    Assertions.assertEquals(\"[latency]\", booleanMatchExp.getAttributes().toString());\r\n    Assertions.assertEquals(\"2000\", booleanMatchExp.getValue());\r\n    Assertions.assertEquals(\"lessMatch\", booleanMatchExp.getExpressionType());\r\n    responseSummary = results.get(2);\r\n    expressions = responseSummary.getFilters().getFilterExpressionsParserResult();\r\n    Assertions.assertEquals(1, expressions.size());\r\n    booleanMatchExp = expressions.get(0);\r\n    Assertions.assertEquals(\"[latency]\", booleanMatchExp.getAttributes().toString());\r\n    Assertions.assertEquals(\"3000\", booleanMatchExp.getValue());\r\n    Assertions.assertEquals(\"greaterEqualMatch\", booleanMatchExp.getExpressionType());\r\n    responseSummary = results.get(3);\r\n    expressions = responseSummary.getFilters().getFilterExpressionsParserResult();\r\n    Assertions.assertEquals(1, expressions.size());\r\n    booleanMatchExp = expressions.get(0);\r\n    Assertions.assertEquals(\"[latency]\", booleanMatchExp.getAttributes().toString());\r\n    Assertions.assertEquals(\"4000\", booleanMatchExp.getValue());\r\n    Assertions.assertEquals(\"lessEqualMatch\", booleanMatchExp.getExpressionType());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\skywalking\\oap-server\\oal-rt\\src\\test\\java\\org\\apache\\skywalking\\oal\\rt\\parser\\ScriptParserTest.java",
  "methodName" : "testParse5",
  "sourceCode" : "@Test\r\npublic void testParse5() throws IOException {\r\n    ScriptParser parser = ScriptParser.createFromScriptText(\"service_response_s4_summary = from(Service.latency).rate(param1 == true,param2 == false);\", TEST_SOURCE_PACKAGE);\r\n    List<AnalysisResult> results = parser.parse().getMetricsStmts();\r\n    Assertions.assertEquals(1, results.size());\r\n    AnalysisResult result = results.get(0);\r\n    Assertions.assertEquals(\"rate\", result.getAggregationFuncStmt().getAggregationFunctionName());\r\n    Assertions.assertEquals(2, result.getAggregationFuncStmt().getFuncConditionExpressions().size());\r\n    ConditionExpression expression1 = result.getAggregationFuncStmt().getFuncConditionExpressions().get(0);\r\n    Assertions.assertEquals(\"[param1]\", expression1.getAttributes().toString());\r\n    Assertions.assertEquals(\"booleanMatch\", expression1.getExpressionType());\r\n    Assertions.assertEquals(\"true\", expression1.getValue());\r\n    ConditionExpression expression2 = result.getAggregationFuncStmt().getFuncConditionExpressions().get(1);\r\n    Assertions.assertEquals(\"[param2]\", expression2.getAttributes().toString());\r\n    Assertions.assertEquals(\"booleanMatch\", expression2.getExpressionType());\r\n    Assertions.assertEquals(\"false\", expression2.getValue());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\skywalking\\oap-server\\oal-rt\\src\\test\\java\\org\\apache\\skywalking\\oal\\rt\\parser\\ScriptParserTest.java",
  "methodName" : "testParse6",
  "sourceCode" : "@Test\r\npublic void testParse6() throws IOException {\r\n    ScriptParser parser = ScriptParser.createFromScriptText(\"service_response_s4_summary = from(Service.latency).filter(latency like \\\"%a\\\").sum();\", TEST_SOURCE_PACKAGE);\r\n    List<AnalysisResult> results = parser.parse().getMetricsStmts();\r\n    Assertions.assertEquals(1, results.size());\r\n    AnalysisResult result = results.get(0);\r\n    List<Expression> expressions = result.getFilters().getFilterExpressions();\r\n    Assertions.assertEquals(1, expressions.size());\r\n    Expression expression = expressions.get(0);\r\n    Assertions.assertEquals(\"source.getLatency()\", expression.getLeft());\r\n    Assertions.assertEquals(\"org.apache.skywalking.oap.server.core.analysis.metrics.expression.LikeMatch\", expression.getExpressionObject());\r\n    Assertions.assertEquals(\"\\\"%a\\\"\", expression.getRight());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\skywalking\\oap-server\\oal-rt\\src\\test\\java\\org\\apache\\skywalking\\oal\\rt\\parser\\ScriptParserTest.java",
  "methodName" : "testParse7",
  "sourceCode" : "@Test\r\npublic void testParse7() throws IOException {\r\n    ScriptParser parser = ScriptParser.createFromScriptText(\"service_response_s4_summary = from(Service.latency).filter(latency != 1).filter(latency in [1,2, 3]).sum();\", TEST_SOURCE_PACKAGE);\r\n    List<AnalysisResult> results = parser.parse().getMetricsStmts();\r\n    Assertions.assertEquals(1, results.size());\r\n    AnalysisResult result = results.get(0);\r\n    List<Expression> expressions = result.getFilters().getFilterExpressions();\r\n    Assertions.assertEquals(2, expressions.size());\r\n    Expression expression = expressions.get(1);\r\n    Assertions.assertEquals(\"source.getLatency()\", expression.getLeft());\r\n    Assertions.assertEquals(\"org.apache.skywalking.oap.server.core.analysis.metrics.expression.InMatch\", expression.getExpressionObject());\r\n    Assertions.assertEquals(\"new long[]{1,2,3}\", expression.getRight());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\skywalking\\oap-server\\oal-rt\\src\\test\\java\\org\\apache\\skywalking\\oal\\rt\\parser\\ScriptParserTest.java",
  "methodName" : "testParse8",
  "sourceCode" : "@Test\r\npublic void testParse8() throws IOException {\r\n    ScriptParser parser = ScriptParser.createFromScriptText(\"service_response_s4_summary = from(Service.latency).filter(latency != 1).filter(latency in [\\\"1\\\",\\\"2\\\", \\\"3\\\"]).sum();\", TEST_SOURCE_PACKAGE);\r\n    List<AnalysisResult> results = parser.parse().getMetricsStmts();\r\n    Assertions.assertEquals(1, results.size());\r\n    AnalysisResult result = results.get(0);\r\n    List<Expression> expressions = result.getFilters().getFilterExpressions();\r\n    Assertions.assertEquals(2, expressions.size());\r\n    Expression expression = expressions.get(1);\r\n    Assertions.assertEquals(\"source.getLatency()\", expression.getLeft());\r\n    Assertions.assertEquals(\"org.apache.skywalking.oap.server.core.analysis.metrics.expression.InMatch\", expression.getExpressionObject());\r\n    Assertions.assertEquals(\"new Object[]{\\\"1\\\",\\\"2\\\",\\\"3\\\"}\", expression.getRight());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\skywalking\\oap-server\\oal-rt\\src\\test\\java\\org\\apache\\skywalking\\oal\\rt\\parser\\ScriptParserTest.java",
  "methodName" : "testParse9",
  "sourceCode" : "@Test\r\npublic void testParse9() throws IOException {\r\n    ScriptParser parser = ScriptParser.createFromScriptText(\"ServicePercent = from(Service.sidecar.internalError).filter(sidecar.internalError == \\\"abc\\\").percent(sidecar.internalError != \\\"\\\");\", TEST_SOURCE_PACKAGE);\r\n    List<AnalysisResult> results = parser.parse().getMetricsStmts();\r\n    AnalysisResult servicePercent = results.get(0);\r\n    Assertions.assertEquals(\"ServicePercent\", servicePercent.getMetricsName());\r\n    Assertions.assertEquals(\"Service\", servicePercent.getFrom().getSourceName());\r\n    Assertions.assertEquals(\"[sidecar, internalError]\", servicePercent.getFrom().getSourceAttribute().toString());\r\n    final List<Expression> filterExpressions = servicePercent.getFilters().getFilterExpressions();\r\n    Assertions.assertEquals(1, filterExpressions.size());\r\n    Assertions.assertEquals(\"source.getSidecar().getInternalError()\", filterExpressions.get(0).getLeft());\r\n    Assertions.assertEquals(\"percent\", servicePercent.getAggregationFuncStmt().getAggregationFunctionName());\r\n    EntryMethod entryMethod = servicePercent.getEntryMethod();\r\n    List<Object> methodArgsExpressions = entryMethod.getArgsExpressions();\r\n    Assertions.assertEquals(1, methodArgsExpressions.size());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\skywalking\\oap-server\\oal-rt\\src\\test\\java\\org\\apache\\skywalking\\oal\\rt\\parser\\ScriptParserTest.java",
  "methodName" : "testParse10",
  "sourceCode" : "@Test\r\npublic void testParse10() throws IOException {\r\n    ScriptParser parser = ScriptParser.createFromScriptText(\"ClientCpm = from(ServiceInstanceRelation.*).filter(componentId == 7).cpm();\", TEST_SOURCE_PACKAGE);\r\n    List<AnalysisResult> results = parser.parse().getMetricsStmts();\r\n    AnalysisResult clientCpm = results.get(0);\r\n    Assertions.assertEquals(\"ClientCpm\", clientCpm.getMetricsName());\r\n    Assertions.assertEquals(\"ServiceInstanceRelation\", clientCpm.getFrom().getSourceName());\r\n    Assertions.assertEquals(\"[*]\", clientCpm.getFrom().getSourceAttribute().toString());\r\n    final List<Expression> filterExpressions = clientCpm.getFilters().getFilterExpressions();\r\n    Assertions.assertEquals(1, filterExpressions.size());\r\n    Assertions.assertEquals(\"source.getComponentId()\", filterExpressions.get(0).getLeft());\r\n    Assertions.assertEquals(\"cpm\", clientCpm.getAggregationFuncStmt().getAggregationFunctionName());\r\n    EntryMethod entryMethod = clientCpm.getEntryMethod();\r\n    List<Object> methodArgsExpressions = entryMethod.getArgsExpressions();\r\n    Assertions.assertEquals(1, methodArgsExpressions.size());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\skywalking\\oap-server\\oal-rt\\src\\test\\java\\org\\apache\\skywalking\\oal\\rt\\parser\\ScriptParserTest.java",
  "methodName" : "testParse11",
  "sourceCode" : "@Test\r\npublic void testParse11() throws IOException {\r\n    ScriptParser parser = ScriptParser.createFromScriptText(\"GetCallTraffic = from(Service.*).filter(tag[\\\"http.method\\\"] == \\\"get\\\").cpm(tag[\\\"http.method\\\"]);\", TEST_SOURCE_PACKAGE);\r\n    List<AnalysisResult> results = parser.parse().getMetricsStmts();\r\n    AnalysisResult clientCpm = results.get(0);\r\n    final List<Expression> filterExpressions = clientCpm.getFilters().getFilterExpressions();\r\n    Assertions.assertEquals(1, filterExpressions.size());\r\n    Assertions.assertEquals(\"source.getTag(\\\"http.method\\\")\", filterExpressions.get(0).getLeft());\r\n    Assertions.assertEquals(1, clientCpm.getAggregationFuncStmt().getFuncArgs().size());\r\n    Assertions.assertEquals(\"[tag[\\\"http.method\\\"]]\", clientCpm.getAggregationFuncStmt().getFuncArgs().get(0).getText().toString());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\skywalking\\oap-server\\oal-rt\\src\\test\\java\\org\\apache\\skywalking\\oal\\rt\\parser\\ScriptParserTest.java",
  "methodName" : "testParse12",
  "sourceCode" : "@Test\r\npublic void testParse12() throws IOException {\r\n    ScriptParser parser = ScriptParser.createFromScriptText(\"cast_metrics = from((str->long)Service.tag[\\\"transmission.latency\\\"]).filter((str->long)tag[\\\"transmission.latency\\\"] > 0).longAvg((str->long)strField1== 1,  (str->long)strField2);\", TEST_SOURCE_PACKAGE);\r\n    List<AnalysisResult> results = parser.parse().getMetricsStmts();\r\n    AnalysisResult castExp = results.get(0);\r\n    Assertions.assertEquals(\"(str->long)\", castExp.getFrom().getSourceCastType());\r\n    final List<Expression> filterExpressions = castExp.getFilters().getFilterExpressions();\r\n    Assertions.assertEquals(1, filterExpressions.size());\r\n    Assertions.assertEquals(\"Long.parseLong(source.getTag(\\\"transmission.latency\\\"))\", filterExpressions.get(0).getLeft());\r\n    Assertions.assertEquals(\"(str->long)\", castExp.getAggregationFuncStmt().getFuncConditionExpressions().get(0).getCastType());\r\n    Assertions.assertEquals(EntryMethod.ATTRIBUTE_EXP_TYPE, castExp.getAggregationFuncStmt().getFuncArgs().get(0).getType());\r\n    Assertions.assertEquals(\"(str->long)\", castExp.getAggregationFuncStmt().getFuncArgs().get(0).getCastType());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\skywalking\\oap-server\\oal-rt\\src\\test\\java\\org\\apache\\skywalking\\oal\\rt\\parser\\ScriptParserTest.java",
  "methodName" : "testParse13",
  "sourceCode" : "@Test\r\npublic void testParse13() throws IOException {\r\n    ScriptParser parser = ScriptParser.createFromScriptText(\"ClientCpm = from(K8SServiceRelation.*).filter(componentIds contain 7).cpm();\", TEST_SOURCE_PACKAGE);\r\n    List<AnalysisResult> results = parser.parse().getMetricsStmts();\r\n    AnalysisResult clientCpm = results.get(0);\r\n    Assertions.assertEquals(\"ClientCpm\", clientCpm.getMetricsName());\r\n    Assertions.assertEquals(\"K8SServiceRelation\", clientCpm.getFrom().getSourceName());\r\n    Assertions.assertEquals(\"[*]\", clientCpm.getFrom().getSourceAttribute().toString());\r\n    final List<Expression> filterExpressions = clientCpm.getFilters().getFilterExpressions();\r\n    Assertions.assertEquals(1, filterExpressions.size());\r\n    Assertions.assertEquals(\"source.getComponentIds()\", filterExpressions.get(0).getLeft());\r\n    Assertions.assertEquals(\"7\", filterExpressions.get(0).getRight());\r\n    Assertions.assertEquals(\"cpm\", clientCpm.getAggregationFuncStmt().getAggregationFunctionName());\r\n    EntryMethod entryMethod = clientCpm.getEntryMethod();\r\n    List<Object> methodArgsExpressions = entryMethod.getArgsExpressions();\r\n    Assertions.assertEquals(1, methodArgsExpressions.size());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\skywalking\\oap-server\\oal-rt\\src\\test\\java\\org\\apache\\skywalking\\oal\\rt\\parser\\ScriptParserTest.java",
  "methodName" : "testParseDecorator",
  "sourceCode" : "@Test\r\npublic void testParseDecorator() throws IOException {\r\n    SourceDecoratorManager.DECORATOR_MAP.put(\"ServiceDecorator\", new ISourceDecorator<ISource>() {\r\n\r\n        @Override\r\n        public int getSourceScope() {\r\n            return DefaultScopeDefine.SERVICE;\r\n        }\r\n\r\n        @Override\r\n        public void decorate(final ISource source) {\r\n        }\r\n    });\r\n    ScriptParser parser = ScriptParser.createFromScriptText(\"service_resp_time = from(Service.latency).longAvg().decorator(\\\"ServiceDecorator\\\");\", TEST_SOURCE_PACKAGE);\r\n    List<AnalysisResult> results = parser.parse().getMetricsStmts();\r\n    AnalysisResult castExp = results.get(0);\r\n    Assertions.assertEquals(\"ServiceDecorator\", castExp.getSourceDecorator());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\skywalking\\oap-server\\oal-rt\\src\\test\\java\\org\\apache\\skywalking\\oal\\rt\\parser\\ScriptParserTest.java",
  "methodName" : "testDisable",
  "sourceCode" : "@Test\r\npublic void testDisable() throws IOException {\r\n    ScriptParser parser = ScriptParser.createFromScriptText(\"disable(segment);\", TEST_SOURCE_PACKAGE);\r\n    DisableCollection collection = parser.parse().getDisableCollection();\r\n    List<String> sources = collection.getAllDisableSources();\r\n    Assertions.assertEquals(1, sources.size());\r\n    Assertions.assertEquals(\"segment\", sources.get(0));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\skywalking\\oap-server\\server-alarm-plugin\\src\\test\\java\\org\\apache\\skywalking\\oap\\server\\core\\alarm\\provider\\AlarmCoreTest.java",
  "methodName" : "testTriggerTimePoint",
  "sourceCode" : "/**\r\n * This case will cost several minutes, which causes CI very slow, so it only runs when -DAlarmCoreTest=true\r\n * existed.\r\n */\r\n@Test\r\npublic void testTriggerTimePoint() throws InterruptedException {\r\n    String test = System.getProperty(\"AlarmCoreTest\");\r\n    if (test == null) {\r\n        return;\r\n    }\r\n    Rules emptyRules = new Rules();\r\n    emptyRules.setRules(new ArrayList<>(0));\r\n    AlarmCore core = new AlarmCore(new AlarmRulesWatcher(emptyRules, null, null));\r\n    Map<String, List<RunningRule>> runningContext = Whitebox.getInternalState(core, \"runningContext\");\r\n    List<RunningRule> rules = new ArrayList<>(1);\r\n    RunningRule mockRule = mock(RunningRule.class);\r\n    List<LocalDateTime> checkTime = new LinkedList<>();\r\n    final boolean[] isAdd = { true };\r\n    doAnswer((Answer<Object>) mock -> {\r\n        if (isAdd[0]) {\r\n            checkTime.add(LocalDateTime.now());\r\n        }\r\n        return new ArrayList<>(0);\r\n    }).when(mockRule).check();\r\n    rules.add(mockRule);\r\n    runningContext.put(\"mock\", rules);\r\n    core.start(new ArrayList<>(0));\r\n    for (int i = 0; i < 10; i++) {\r\n        Thread.sleep(60 * 1000L);\r\n        if (checkTime.size() >= 3) {\r\n            isAdd[0] = false;\r\n            Assertions.assertTrue(checkTimePoints(checkTime));\r\n            break;\r\n        }\r\n        if (i == 9) {\r\n            Assertions.assertTrue(false);\r\n        }\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\skywalking\\oap-server\\server-alarm-plugin\\src\\test\\java\\org\\apache\\skywalking\\oap\\server\\core\\alarm\\provider\\AlarmMessageFormatterTest.java",
  "methodName" : "testStringFormatWithNoArg",
  "sourceCode" : "@Test\r\npublic void testStringFormatWithNoArg() {\r\n    AlarmMessageFormatter formatter = new AlarmMessageFormatter(\"abc words {sdf\");\r\n    String message = formatter.format(new AlarmEntity(\"SERVICE\", -1, null, \"\", \"\"));\r\n    Assertions.assertEquals(\"abc words {sdf\", message);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\skywalking\\oap-server\\server-alarm-plugin\\src\\test\\java\\org\\apache\\skywalking\\oap\\server\\core\\alarm\\provider\\AlarmMessageFormatterTest.java",
  "methodName" : "testStringFormatWithArg",
  "sourceCode" : "@Test\r\npublic void testStringFormatWithArg() {\r\n    AlarmMessageFormatter formatter = new AlarmMessageFormatter(\"abc} words {name} - {id} .. {\");\r\n    String message = formatter.format(new AlarmEntity(\"SERVICE\", -1, \"service\", \"1290\", \"\"));\r\n    Assertions.assertEquals(\"abc} words service - 1290 .. {\", message);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\skywalking\\oap-server\\server-alarm-plugin\\src\\test\\java\\org\\apache\\skywalking\\oap\\server\\core\\alarm\\provider\\AlarmModuleProviderTest.java",
  "methodName" : "name",
  "sourceCode" : "@Test\r\npublic void name() {\r\n    assertEquals(\"default\", moduleProvider.name());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\skywalking\\oap-server\\server-alarm-plugin\\src\\test\\java\\org\\apache\\skywalking\\oap\\server\\core\\alarm\\provider\\AlarmModuleProviderTest.java",
  "methodName" : "module",
  "sourceCode" : "@Test\r\npublic void module() {\r\n    assertEquals(AlarmModule.class, moduleProvider.module());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\skywalking\\oap-server\\server-alarm-plugin\\src\\test\\java\\org\\apache\\skywalking\\oap\\server\\core\\alarm\\provider\\AlarmModuleProviderTest.java",
  "methodName" : "notifyAfterCompleted",
  "sourceCode" : "@Test\r\npublic void notifyAfterCompleted() throws Exception {\r\n    NotifyHandler handler = mock(NotifyHandler.class);\r\n    Whitebox.setInternalState(moduleProvider, \"notifyHandler\", handler);\r\n    moduleProvider.notifyAfterCompleted();\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\skywalking\\oap-server\\server-alarm-plugin\\src\\test\\java\\org\\apache\\skywalking\\oap\\server\\core\\alarm\\provider\\AlarmModuleProviderTest.java",
  "methodName" : "requiredModules",
  "sourceCode" : "@Test\r\npublic void requiredModules() {\r\n    String[] modules = moduleProvider.requiredModules();\r\n    assertArrayEquals(new String[] { CoreModule.NAME, ConfigurationModule.NAME }, modules);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\skywalking\\oap-server\\server-alarm-plugin\\src\\test\\java\\org\\apache\\skywalking\\oap\\server\\core\\alarm\\provider\\AlarmRulesWatcherTest.java",
  "methodName" : "shouldSetAlarmRulesOnEventChanged",
  "sourceCode" : "@Test\r\npublic void shouldSetAlarmRulesOnEventChanged() throws IOException {\r\n    assertTrue(alarmRulesWatcher.getRules().isEmpty());\r\n    Reader reader = ResourceUtils.read(\"alarm-settings.yml\");\r\n    char[] chars = new char[1024 * 1024];\r\n    int length = reader.read(chars);\r\n    alarmRulesWatcher.notify(new ConfigChangeWatcher.ConfigChangeEvent(new String(chars, 0, length), ConfigChangeWatcher.EventType.MODIFY));\r\n    assertEquals(5, alarmRulesWatcher.getRules().size());\r\n    assertEquals(2, alarmRulesWatcher.getWebHooks().get(AlarmHooksType.webhook.name() + \".default\").getUrls().size());\r\n    assertNotNull(alarmRulesWatcher.getGrpchookSetting());\r\n    assertEquals(9888, alarmRulesWatcher.getGrpchookSetting().get(AlarmHooksType.gRPC.name() + \".default\").getTargetPort());\r\n    assertEquals(4, alarmRulesWatcher.getRunningContext().size());\r\n    assertNotNull(alarmRulesWatcher.getDingtalkSettings());\r\n    assertNotNull(alarmRulesWatcher.getWechatSettings());\r\n    assertEquals(2, alarmRulesWatcher.getSlackSettings().size());\r\n    assertNotNull(alarmRulesWatcher.getWeLinkSettings());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\skywalking\\oap-server\\server-alarm-plugin\\src\\test\\java\\org\\apache\\skywalking\\oap\\server\\core\\alarm\\provider\\AlarmRulesWatcherTest.java",
  "methodName" : "shouldClearAlarmRulesOnEventDeleted",
  "sourceCode" : "@Test\r\npublic void shouldClearAlarmRulesOnEventDeleted() throws IOException {\r\n    Reader reader = ResourceUtils.read(\"alarm-settings.yml\");\r\n    Rules defaultRules = new RulesReader(reader, null).readRules();\r\n    alarmRulesWatcher = spy(new AlarmRulesWatcher(defaultRules, null, null));\r\n    alarmRulesWatcher.notify(new ConfigChangeWatcher.ConfigChangeEvent(\"whatever\", ConfigChangeWatcher.EventType.DELETE));\r\n    assertEquals(0, alarmRulesWatcher.getRules().size());\r\n    assertEquals(0, alarmRulesWatcher.getWebHooks().size());\r\n    assertTrue(CollectionUtils.isEmpty(alarmRulesWatcher.getGrpchookSetting()));\r\n    assertEquals(0, alarmRulesWatcher.getRunningContext().size());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\skywalking\\oap-server\\server-alarm-plugin\\src\\test\\java\\org\\apache\\skywalking\\oap\\server\\core\\alarm\\provider\\AlarmRulesWatcherTest.java",
  "methodName" : "shouldKeepExistedRunningRuleIfAlarmRuleExists",
  "sourceCode" : "@Test\r\npublic void shouldKeepExistedRunningRuleIfAlarmRuleExists() throws IllegalExpressionException {\r\n    AlarmRule rule = newAlarmRule(\"name1\", \"avg(service_percent) < 80\");\r\n    Rules rules = new Rules();\r\n    rules.getRules().add(rule);\r\n    alarmRulesWatcher = spy(new AlarmRulesWatcher(rules, null, null));\r\n    assertEquals(1, alarmRulesWatcher.getRunningContext().size());\r\n    assertEquals(1, alarmRulesWatcher.getRunningContext().get(rule.getExpression()).size());\r\n    RunningRule runningRule = alarmRulesWatcher.getRunningContext().get(rule.getExpression()).get(0);\r\n    Rules updatedRules = new Rules();\r\n    updatedRules.getRules().addAll(Arrays.asList(rule, newAlarmRule(\"name2\", \"avg(service_percent) < 80\")));\r\n    alarmRulesWatcher.notify(updatedRules);\r\n    assertEquals(1, alarmRulesWatcher.getRunningContext().size());\r\n    assertEquals(2, alarmRulesWatcher.getRunningContext().get(rule.getExpression()).size());\r\n    assertEquals(runningRule, alarmRulesWatcher.getRunningContext().get(rule.getExpression()).get(0), \"The same alarm rule should map to the same existed running rule\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\skywalking\\oap-server\\server-alarm-plugin\\src\\test\\java\\org\\apache\\skywalking\\oap\\server\\core\\alarm\\provider\\AlarmRulesWatcherTest.java",
  "methodName" : "shouldRemoveRunningRuleIfAlarmRuleIsRemoved",
  "sourceCode" : "@Test\r\npublic void shouldRemoveRunningRuleIfAlarmRuleIsRemoved() throws IllegalExpressionException {\r\n    AlarmRule rule = newAlarmRule(\"name1\", \"avg(service_percent) < 80\");\r\n    Rules rules = new Rules();\r\n    rules.getRules().add(rule);\r\n    alarmRulesWatcher = spy(new AlarmRulesWatcher(rules, null, null));\r\n    assertEquals(1, alarmRulesWatcher.getRunningContext().size());\r\n    assertEquals(1, alarmRulesWatcher.getRunningContext().get(rule.getExpression()).size());\r\n    RunningRule runningRule = alarmRulesWatcher.getRunningContext().get(rule.getExpression()).get(0);\r\n    Rules updatedRules = new Rules();\r\n    updatedRules.getRules().add(newAlarmRule(\"name2\", \"avg(service_percent) < 80\"));\r\n    alarmRulesWatcher.notify(updatedRules);\r\n    assertEquals(1, alarmRulesWatcher.getRunningContext().size());\r\n    assertEquals(1, alarmRulesWatcher.getRunningContext().get(rule.getExpression()).size());\r\n    assertNotEquals(runningRule, alarmRulesWatcher.getRunningContext().get(rule.getExpression()).get(0), \"The new alarm rule should map to a different running rule\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\skywalking\\oap-server\\server-alarm-plugin\\src\\test\\java\\org\\apache\\skywalking\\oap\\server\\core\\alarm\\provider\\AlarmRulesWatcherTest.java",
  "methodName" : "shouldReplaceRunningRuleIfAlarmRulesAreReplaced",
  "sourceCode" : "@Test\r\npublic void shouldReplaceRunningRuleIfAlarmRulesAreReplaced() throws IllegalExpressionException {\r\n    AlarmRule rule = newAlarmRule(\"name1\", \"avg(service_percent) < 80\");\r\n    Rules rules = new Rules();\r\n    rules.getRules().add(rule);\r\n    alarmRulesWatcher = spy(new AlarmRulesWatcher(rules, null, null));\r\n    assertEquals(1, alarmRulesWatcher.getRunningContext().size());\r\n    assertEquals(1, alarmRulesWatcher.getRunningContext().get(rule.getExpression()).size());\r\n    Rules updatedRules = new Rules();\r\n    // replace the original alarm rules\r\n    updatedRules.getRules().addAll(Arrays.asList(newAlarmRule(\"name2\", \"avg(service_percent) < 90\"), newAlarmRule(\"name3\", \"avg(service_percent) < 99\")));\r\n    alarmRulesWatcher.notify(updatedRules);\r\n    assertEquals(2, alarmRulesWatcher.getRunningContext().size());\r\n    assertNull(alarmRulesWatcher.getRunningContext().get(\"avg(service_percent) < 80\"));\r\n    assertEquals(1, alarmRulesWatcher.getRunningContext().get(\"avg(service_percent) < 90\").size());\r\n    assertEquals(1, alarmRulesWatcher.getRunningContext().get(\"avg(service_percent) < 99\").size());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\skywalking\\oap-server\\server-alarm-plugin\\src\\test\\java\\org\\apache\\skywalking\\oap\\server\\core\\alarm\\provider\\AlarmRuleTest.java",
  "methodName" : "testExpressionVerify",
  "sourceCode" : "@Test\r\npublic void testExpressionVerify() throws IllegalExpressionException {\r\n    AlarmRule rule = new AlarmRule(null);\r\n    //normal common metric\r\n    rule.setExpression(\"sum(service_percent < 85) >= 3\");\r\n    //normal labeled metric\r\n    //4xx + 5xx > 10\r\n    rule.setExpression(\"sum(aggregate_labels(meter_status_code{_='4xx,5xx'},sum) > 10) > 3\");\r\n    rule.setExpression(\"sum(aggregate_labels(meter_status_code,sum) > 10) > 3\");\r\n    //4xx or 5xx > 10\r\n    rule.setExpression(\"sum(meter_status_code{_='4xx,5xx'} > 10) >= 3\");\r\n    rule.setExpression(\"sum(meter_status_code > 10) >= 3\");\r\n    //illegal expression\r\n    Assertions.assertThrows(IllegalExpressionException.class, () -> {\r\n        rule.setExpression(\"what? sum(service_percent < 85) >= 3\");\r\n    });\r\n    //not exist metric\r\n    Assertions.assertEquals(\"Expression: sum(service_percent111 < 85) >= 3 error: Metric: [service_percent111] does not exist.\", Assertions.assertThrows(IllegalExpressionException.class, () -> {\r\n        rule.setExpression(\"sum(service_percent111 < 85) >= 3\");\r\n    }).getMessage());\r\n    //root operation is not a Compare Operation\r\n    Assertions.assertEquals(\"Expression: sum(service_percent < 85) + 3 root operation is not a Compare Operation.\", Assertions.assertThrows(IllegalExpressionException.class, () -> {\r\n        rule.setExpression(\"sum(service_percent < 85) + 3\");\r\n    }).getMessage());\r\n    //not a SINGLE_VALUE result expression\r\n    Assertions.assertEquals(\"Expression: service_percent < 85 is not a SINGLE_VALUE result expression.\", Assertions.assertThrows(IllegalExpressionException.class, () -> {\r\n        rule.setExpression(\"service_percent < 85\");\r\n    }).getMessage());\r\n    //not a common or labeled metric\r\n    Assertions.assertEquals(\"Expression: sum(record < 85) > 1 error: Metric does not supported in alarm, metric: [record] is not a common or labeled metric.\", Assertions.assertThrows(IllegalExpressionException.class, () -> {\r\n        rule.setExpression(\"sum(record < 85) > 1\");\r\n    }).getMessage());\r\n    //metrics in expression must have the same scope level\r\n    Assertions.assertTrue(Assertions.assertThrows(IllegalExpressionException.class, () -> {\r\n        rule.setExpression(\"sum(service_percent > endpoint_percent) >= 1\");\r\n    }).getMessage().contains(\"The metrics in expression: sum(service_percent > endpoint_percent) >= 1 must have the same scope level, but got:\"));\r\n    //trend expression\r\n    rule.setExpression(\"sum((increase(service_percent,5) + increase(service_percent,2)) > 0) >= 1\");\r\n    Assertions.assertEquals(5, rule.getMaxTrendRange());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\skywalking\\oap-server\\server-alarm-plugin\\src\\test\\java\\org\\apache\\skywalking\\oap\\server\\core\\alarm\\provider\\dingtalk\\DingtalkHookCallbackTest.java",
  "methodName" : "testDingtalkWebhookWithoutSign",
  "sourceCode" : "@Test\r\npublic void testDingtalkWebhookWithoutSign() throws Exception {\r\n    List<DingtalkSettings.WebHookUrl> webHooks = new ArrayList<>();\r\n    webHooks.add(new DingtalkSettings.WebHookUrl(\"\", \"http://127.0.0.1:\" + SERVER.httpPort() + \"/dingtalkhook/receiveAlarm?token=dummy_token\"));\r\n    Rules rules = new Rules();\r\n    String template = \"{\\\"msgtype\\\":\\\"text\\\",\\\"text\\\":{\\\"content\\\":\\\"Skywaling alarm: %s\\\"}}\";\r\n    DingtalkSettings setting1 = new DingtalkSettings(\"setting1\", AlarmHooksType.dingtalk, true);\r\n    setting1.setWebhooks(webHooks);\r\n    setting1.setTextTemplate(template);\r\n    DingtalkSettings setting2 = new DingtalkSettings(\"setting2\", AlarmHooksType.dingtalk, false);\r\n    setting2.setWebhooks(webHooks);\r\n    setting2.setTextTemplate(template);\r\n    rules.getDingtalkSettingsMap().put(setting1.getFormattedName(), setting1);\r\n    rules.getDingtalkSettingsMap().put(setting2.getFormattedName(), setting2);\r\n    AlarmRulesWatcher alarmRulesWatcher = new AlarmRulesWatcher(rules, null, null);\r\n    DingtalkHookCallback dingtalkCallBack = new DingtalkHookCallback(alarmRulesWatcher);\r\n    List<AlarmMessage> alarmMessages = new ArrayList<>(2);\r\n    AlarmMessage alarmMessage = new AlarmMessage();\r\n    alarmMessage.setScopeId(DefaultScopeDefine.SERVICE);\r\n    alarmMessage.setRuleName(\"service_resp_time_rule\");\r\n    alarmMessage.setAlarmMessage(\"alarmMessage with [DefaultScopeDefine.All]\");\r\n    alarmMessage.getHooks().add(setting1.getFormattedName());\r\n    alarmMessages.add(alarmMessage);\r\n    AlarmMessage anotherAlarmMessage = new AlarmMessage();\r\n    anotherAlarmMessage.setRuleName(\"service_resp_time_rule_2\");\r\n    anotherAlarmMessage.setScopeId(DefaultScopeDefine.ENDPOINT);\r\n    anotherAlarmMessage.setAlarmMessage(\"anotherAlarmMessage with [DefaultScopeDefine.Endpoint]\");\r\n    anotherAlarmMessage.getHooks().add(setting2.getFormattedName());\r\n    alarmMessages.add(anotherAlarmMessage);\r\n    dingtalkCallBack.doAlarm(alarmMessages);\r\n    Assertions.assertTrue(IS_SUCCESS.get());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\skywalking\\oap-server\\server-alarm-plugin\\src\\test\\java\\org\\apache\\skywalking\\oap\\server\\core\\alarm\\provider\\dingtalk\\DingtalkHookCallbackTest.java",
  "methodName" : "testDingtalkWebhookWithSign",
  "sourceCode" : "@Test\r\npublic void testDingtalkWebhookWithSign() throws Exception {\r\n    CHECK_SIGN.set(true);\r\n    List<DingtalkSettings.WebHookUrl> webHooks = new ArrayList<>();\r\n    webHooks.add(new DingtalkSettings.WebHookUrl(secret, \"http://127.0.0.1:\" + SERVER.httpPort() + \"/dingtalkhook/receiveAlarm?token=dummy_token\"));\r\n    Rules rules = new Rules();\r\n    String template = \"{\\\"msgtype\\\":\\\"text\\\",\\\"text\\\":{\\\"content\\\":\\\"Skywaling alarm: %s\\\"}}\";\r\n    DingtalkSettings setting1 = new DingtalkSettings(\"setting1\", AlarmHooksType.dingtalk, true);\r\n    setting1.setWebhooks(webHooks);\r\n    setting1.setTextTemplate(template);\r\n    DingtalkSettings setting2 = new DingtalkSettings(\"setting2\", AlarmHooksType.dingtalk, false);\r\n    setting2.setWebhooks(webHooks);\r\n    setting2.setTextTemplate(template);\r\n    rules.getDingtalkSettingsMap().put(setting1.getFormattedName(), setting1);\r\n    rules.getDingtalkSettingsMap().put(setting2.getFormattedName(), setting2);\r\n    AlarmRulesWatcher alarmRulesWatcher = new AlarmRulesWatcher(rules, null, null);\r\n    DingtalkHookCallback dingtalkCallBack = new DingtalkHookCallback(alarmRulesWatcher);\r\n    List<AlarmMessage> alarmMessages = new ArrayList<>(2);\r\n    AlarmMessage alarmMessage = new AlarmMessage();\r\n    alarmMessage.setScopeId(DefaultScopeDefine.SERVICE);\r\n    alarmMessage.setRuleName(\"service_resp_time_rule\");\r\n    alarmMessage.setAlarmMessage(\"alarmMessage with [DefaultScopeDefine.All]\");\r\n    alarmMessage.getHooks().add(setting1.getFormattedName());\r\n    alarmMessages.add(alarmMessage);\r\n    AlarmMessage anotherAlarmMessage = new AlarmMessage();\r\n    anotherAlarmMessage.setRuleName(\"service_resp_time_rule_2\");\r\n    anotherAlarmMessage.setScopeId(DefaultScopeDefine.ENDPOINT);\r\n    anotherAlarmMessage.setAlarmMessage(\"anotherAlarmMessage with [DefaultScopeDefine.Endpoint]\");\r\n    anotherAlarmMessage.getHooks().add(setting2.getFormattedName());\r\n    alarmMessages.add(anotherAlarmMessage);\r\n    dingtalkCallBack.doAlarm(alarmMessages);\r\n    Assertions.assertTrue(IS_SUCCESS.get());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\skywalking\\oap-server\\server-alarm-plugin\\src\\test\\java\\org\\apache\\skywalking\\oap\\server\\core\\alarm\\provider\\EventHookCallbackTest.java",
  "methodName" : "testEventCallbackHasRightFlow",
  "sourceCode" : "@Test\r\npublic void testEventCallbackHasRightFlow() throws Exception {\r\n    List<AlarmMessage> msgs = mockAlarmMessagesHasSingleElement();\r\n    EventHookCallback callback = new EventHookCallback(this.moduleManager);\r\n    when(moduleManager.find(\"event-analyzer\")).thenReturn(moduleProviderHolder);\r\n    when(moduleProviderHolder.provider()).thenReturn(moduleServiceHolder);\r\n    when(moduleServiceHolder.getService(EventAnalyzerService.class)).thenReturn(mockEventAnalyzerService);\r\n    when(moduleManager.find(CoreModule.NAME)).thenReturn(moduleProviderHolder);\r\n    when(moduleServiceHolder.getService(MetadataQueryService.class)).thenReturn(metadataQueryService);\r\n    Service service = mockService();\r\n    when(metadataQueryService.getService(service.getId())).thenReturn(service);\r\n    //make sure current service be called.\r\n    callback.doAlarm(msgs);\r\n    verify(mockEventAnalyzerService).analyze(any(Event.class));\r\n    when(moduleServiceHolder.getService(EventAnalyzerService.class)).thenReturn(eventAnalyzerService);\r\n    callback.doAlarm(msgs);\r\n    //Ensure that the current Event is properly constructed\r\n    ArgumentCaptor<Event> argument = ArgumentCaptor.forClass(Event.class);\r\n    verify(eventAnalyzerService).analyze(argument.capture());\r\n    Event value = argument.getValue();\r\n    AlarmMessage msg = msgs.get(0);\r\n    assertEquals(msg.getName(), value.getSource().getService());\r\n    assertEquals(\"Alarm\", value.getName());\r\n    assertEquals(msg.getAlarmMessage(), value.getMessage());\r\n    assertEquals(msg.getPeriod(), (value.getEndTime() - value.getStartTime()) / 1000 / 60);\r\n    assertEquals(service.getLayers().iterator().next(), value.getLayer());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\skywalking\\oap-server\\server-alarm-plugin\\src\\test\\java\\org\\apache\\skywalking\\oap\\server\\core\\alarm\\provider\\EventHookCallbackTest.java",
  "methodName" : "testRelationEventBeProperlyConstructed",
  "sourceCode" : "@Test\r\npublic void testRelationEventBeProperlyConstructed() throws Exception {\r\n    List<AlarmMessage> msgs = mockAlarmMessagesHasSourceAndDest();\r\n    EventHookCallback callback = new EventHookCallback(this.moduleManager);\r\n    when(moduleManager.find(\"event-analyzer\")).thenReturn(moduleProviderHolder);\r\n    when(moduleProviderHolder.provider()).thenReturn(moduleServiceHolder);\r\n    when(moduleServiceHolder.getService(EventAnalyzerService.class)).thenReturn(eventAnalyzerService);\r\n    when(moduleManager.find(CoreModule.NAME)).thenReturn(moduleProviderHolder);\r\n    when(moduleServiceHolder.getService(MetadataQueryService.class)).thenReturn(metadataQueryService);\r\n    Service service = mockService();\r\n    when(metadataQueryService.getService(service.getId())).thenReturn(service);\r\n    callback.doAlarm(msgs);\r\n    ArgumentCaptor<Event> argument = ArgumentCaptor.forClass(Event.class);\r\n    verify(eventAnalyzerService, times(2)).analyze(argument.capture());\r\n    List<Event> events = argument.getAllValues();\r\n    assertEquals(events.size(), 2);\r\n    Event sourceEvent = events.get(0);\r\n    Event destEvent = events.get(1);\r\n    AlarmMessage msg = msgs.get(0);\r\n    assertEquals(sourceEvent.getSource().getService(), IDManager.ServiceID.analysisId(msg.getId0()).getName());\r\n    assertEquals((sourceEvent.getEndTime() - sourceEvent.getStartTime()) / 1000 / 60, msg.getPeriod());\r\n    assertEquals(destEvent.getSource().getService(), IDManager.ServiceID.analysisId(msg.getId1()).getName());\r\n    assertEquals((destEvent.getEndTime() - destEvent.getStartTime()) / 1000 / 60, msg.getPeriod());\r\n    assertEquals(service.getLayers().iterator().next(), sourceEvent.getLayer());\r\n    assertEquals(Layer.UNDEFINED.name(), destEvent.getLayer());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\skywalking\\oap-server\\server-alarm-plugin\\src\\test\\java\\org\\apache\\skywalking\\oap\\server\\core\\alarm\\provider\\feishu\\FeishuHookCallbackTest.java",
  "methodName" : "testFeishuWebhookWithoutSign",
  "sourceCode" : "@Test\r\npublic void testFeishuWebhookWithoutSign() throws Exception {\r\n    List<FeishuSettings.WebHookUrl> webHooks = new ArrayList<>();\r\n    webHooks.add(new FeishuSettings.WebHookUrl(\"\", \"http://127.0.0.1:\" + SERVER.httpPort() + \"/feishuhook/receiveAlarm?token=dummy_token\"));\r\n    Rules rules = new Rules();\r\n    String template = \"{\\\"msg_type\\\":\\\"text\\\",\\\"content\\\":{\\\"text\\\":\\\"Skywaling alarm: %s\\\"}}\";\r\n    FeishuSettings setting1 = new FeishuSettings(\"setting1\", AlarmHooksType.feishu, true);\r\n    setting1.setWebhooks(webHooks);\r\n    setting1.setTextTemplate(template);\r\n    FeishuSettings setting2 = new FeishuSettings(\"setting2\", AlarmHooksType.feishu, false);\r\n    setting2.setWebhooks(webHooks);\r\n    setting2.setTextTemplate(template);\r\n    rules.getFeishuSettingsMap().put(setting1.getFormattedName(), setting1);\r\n    rules.getFeishuSettingsMap().put(setting2.getFormattedName(), setting2);\r\n    AlarmRulesWatcher alarmRulesWatcher = new AlarmRulesWatcher(rules, null, null);\r\n    FeishuHookCallback feishuHookCallback = new FeishuHookCallback(alarmRulesWatcher);\r\n    List<AlarmMessage> alarmMessages = new ArrayList<>(2);\r\n    AlarmMessage alarmMessage = new AlarmMessage();\r\n    alarmMessage.setScopeId(DefaultScopeDefine.SERVICE);\r\n    alarmMessage.setRuleName(\"service_resp_time_rule\");\r\n    alarmMessage.setAlarmMessage(\"alarmMessage with [DefaultScopeDefine.All]\");\r\n    alarmMessage.getHooks().add(setting1.getFormattedName());\r\n    alarmMessages.add(alarmMessage);\r\n    AlarmMessage anotherAlarmMessage = new AlarmMessage();\r\n    anotherAlarmMessage.setRuleName(\"service_resp_time_rule_2\");\r\n    anotherAlarmMessage.setScopeId(DefaultScopeDefine.ENDPOINT);\r\n    anotherAlarmMessage.setAlarmMessage(\"anotherAlarmMessage with [DefaultScopeDefine.Endpoint]\");\r\n    anotherAlarmMessage.getHooks().add(setting2.getFormattedName());\r\n    alarmMessages.add(anotherAlarmMessage);\r\n    feishuHookCallback.doAlarm(alarmMessages);\r\n    Assertions.assertTrue(IS_SUCCESS.get());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\skywalking\\oap-server\\server-alarm-plugin\\src\\test\\java\\org\\apache\\skywalking\\oap\\server\\core\\alarm\\provider\\feishu\\FeishuHookCallbackTest.java",
  "methodName" : "testFeishuWebhookWithSign",
  "sourceCode" : "@Test\r\npublic void testFeishuWebhookWithSign() throws Exception {\r\n    CHECK_SIGN.set(true);\r\n    List<FeishuSettings.WebHookUrl> webHooks = new ArrayList<>();\r\n    webHooks.add(new FeishuSettings.WebHookUrl(secret, \"http://127.0.0.1:\" + SERVER.httpPort() + \"/feishuhook/receiveAlarm?token=dummy_token\"));\r\n    Rules rules = new Rules();\r\n    String template = \"{\\\"msg_type\\\":\\\"text\\\",\\\"content\\\":{\\\"text\\\":\\\"Skywaling alarm: %s\\\"}}\";\r\n    FeishuSettings setting1 = new FeishuSettings(\"setting1\", AlarmHooksType.feishu, true);\r\n    setting1.setWebhooks(webHooks);\r\n    setting1.setTextTemplate(template);\r\n    FeishuSettings setting2 = new FeishuSettings(\"setting2\", AlarmHooksType.feishu, false);\r\n    setting2.setWebhooks(webHooks);\r\n    setting2.setTextTemplate(template);\r\n    rules.getFeishuSettingsMap().put(setting1.getFormattedName(), setting1);\r\n    rules.getFeishuSettingsMap().put(setting2.getFormattedName(), setting2);\r\n    AlarmRulesWatcher alarmRulesWatcher = new AlarmRulesWatcher(rules, null, null);\r\n    FeishuHookCallback feishuHookCallback = new FeishuHookCallback(alarmRulesWatcher);\r\n    List<AlarmMessage> alarmMessages = new ArrayList<>(2);\r\n    AlarmMessage alarmMessage = new AlarmMessage();\r\n    alarmMessage.setScopeId(DefaultScopeDefine.SERVICE);\r\n    alarmMessage.setRuleName(\"service_resp_time_rule\");\r\n    alarmMessage.setAlarmMessage(\"alarmMessage with [DefaultScopeDefine.All]\");\r\n    alarmMessage.getHooks().add(setting1.getFormattedName());\r\n    alarmMessages.add(alarmMessage);\r\n    AlarmMessage anotherAlarmMessage = new AlarmMessage();\r\n    anotherAlarmMessage.setRuleName(\"service_resp_time_rule_2\");\r\n    anotherAlarmMessage.setScopeId(DefaultScopeDefine.ENDPOINT);\r\n    anotherAlarmMessage.setAlarmMessage(\"anotherAlarmMessage with [DefaultScopeDefine.Endpoint]\");\r\n    anotherAlarmMessage.getHooks().add(setting2.getFormattedName());\r\n    alarmMessages.add(anotherAlarmMessage);\r\n    feishuHookCallback.doAlarm(alarmMessages);\r\n    Assertions.assertTrue(IS_SUCCESS.get());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\skywalking\\oap-server\\server-alarm-plugin\\src\\test\\java\\org\\apache\\skywalking\\oap\\server\\core\\alarm\\provider\\feishu\\FeishuHookCallbackTest.java",
  "methodName" : "testFeishuWebhookWithSignAndAt",
  "sourceCode" : "@Test\r\npublic void testFeishuWebhookWithSignAndAt() throws Exception {\r\n    CHECK_SIGN.set(true);\r\n    List<FeishuSettings.WebHookUrl> webHooks = new ArrayList<>();\r\n    webHooks.add(new FeishuSettings.WebHookUrl(secret, \"http://127.0.0.1:\" + SERVER.httpPort() + \"/feishuhook/receiveAlarm?token=dummy_token\"));\r\n    Rules rules = new Rules();\r\n    String template = \"{\\\"msg_type\\\":\\\"text\\\",\\\"content\\\":{\\\"text\\\":\\\"Skywaling alarm: %s\\\"},\\\"ats\\\":\\\"123\\\"}\";\r\n    FeishuSettings setting1 = new FeishuSettings(\"setting1\", AlarmHooksType.feishu, true);\r\n    setting1.setWebhooks(webHooks);\r\n    setting1.setTextTemplate(template);\r\n    FeishuSettings setting2 = new FeishuSettings(\"setting2\", AlarmHooksType.feishu, false);\r\n    setting2.setWebhooks(webHooks);\r\n    setting2.setTextTemplate(template);\r\n    rules.getFeishuSettingsMap().put(setting1.getFormattedName(), setting1);\r\n    rules.getFeishuSettingsMap().put(setting2.getFormattedName(), setting2);\r\n    AlarmRulesWatcher alarmRulesWatcher = new AlarmRulesWatcher(rules, null, null);\r\n    FeishuHookCallback feishuHookCallback = new FeishuHookCallback(alarmRulesWatcher);\r\n    List<AlarmMessage> alarmMessages = new ArrayList<>(2);\r\n    AlarmMessage alarmMessage = new AlarmMessage();\r\n    alarmMessage.setScopeId(DefaultScopeDefine.SERVICE);\r\n    alarmMessage.setRuleName(\"service_resp_time_rule\");\r\n    alarmMessage.setAlarmMessage(\"alarmMessage with [DefaultScopeDefine.All]\");\r\n    alarmMessage.getHooks().add(setting1.getFormattedName());\r\n    alarmMessages.add(alarmMessage);\r\n    AlarmMessage anotherAlarmMessage = new AlarmMessage();\r\n    anotherAlarmMessage.setRuleName(\"service_resp_time_rule_2\");\r\n    anotherAlarmMessage.setScopeId(DefaultScopeDefine.ENDPOINT);\r\n    anotherAlarmMessage.setAlarmMessage(\"anotherAlarmMessage with [DefaultScopeDefine.Endpoint]\");\r\n    anotherAlarmMessage.getHooks().add(setting2.getFormattedName());\r\n    alarmMessages.add(anotherAlarmMessage);\r\n    feishuHookCallback.doAlarm(alarmMessages);\r\n    Assertions.assertTrue(IS_SUCCESS.get());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\skywalking\\oap-server\\server-alarm-plugin\\src\\test\\java\\org\\apache\\skywalking\\oap\\server\\core\\alarm\\provider\\grpc\\GRPChookCallbackTest.java",
  "methodName" : "doAlarm",
  "sourceCode" : "@Test\r\npublic void doAlarm() {\r\n    grpcCallback.doAlarm(alarmMessageList);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\skywalking\\oap-server\\server-alarm-plugin\\src\\test\\java\\org\\apache\\skywalking\\oap\\server\\core\\alarm\\provider\\grpc\\GRPChookCallbackTest.java",
  "methodName" : "testGauchoSettingClean",
  "sourceCode" : "@Test\r\npublic void testGauchoSettingClean() {\r\n    Rules rules = new Rules();\r\n    GRPCAlarmSetting setting1 = new GRPCAlarmSetting(\"setting1111111\", AlarmHooksType.gRPC, true);\r\n    GRPCAlarmSetting setting2 = new GRPCAlarmSetting(\"setting2222222\", AlarmHooksType.gRPC, true);\r\n    rules.getGrpcAlarmSettingMap().put(setting1.getFormattedName(), setting1);\r\n    rules.getGrpcAlarmSettingMap().put(setting2.getFormattedName(), setting2);\r\n    alarmRulesWatcher = new AlarmRulesWatcher(rules, null, null);\r\n    grpcCallback = new GRPCCallback(alarmRulesWatcher);\r\n    grpcCallback.doAlarm(alarmMessageList);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\skywalking\\oap-server\\server-alarm-plugin\\src\\test\\java\\org\\apache\\skywalking\\oap\\server\\core\\alarm\\provider\\NotifyHandlerTest.java",
  "methodName" : "testNotifyWithEndpointCatalog",
  "sourceCode" : "@Test\r\npublic void testNotifyWithEndpointCatalog() {\r\n    String metricsName = \"endpoint-metrics\";\r\n    when(metadata.getMetricsName()).thenReturn(metricsName);\r\n    when(DefaultScopeDefine.inEndpointCatalog(0)).thenReturn(true);\r\n    String endpointInventoryName = \"endpoint-inventory-name\";\r\n    String serviceInventoryName = \"service-inventory-name\";\r\n    final String serviceId = IDManager.ServiceID.buildId(serviceInventoryName, true);\r\n    final String endpointId = IDManager.EndpointID.buildId(serviceId, endpointInventoryName);\r\n    when(metadata.getId()).thenReturn(endpointId);\r\n    ArgumentCaptor<MetaInAlarm> metaCaptor = ArgumentCaptor.forClass(MetaInAlarm.class);\r\n    notifyHandler.notify(metrics);\r\n    verify(rule).in(metaCaptor.capture(), any());\r\n    MetaInAlarm metaInAlarm = metaCaptor.getValue();\r\n    assertTrue(metaInAlarm instanceof EndpointMetaInAlarm);\r\n    assertEquals(\"c2VydmljZS1pbnZlbnRvcnktbmFtZQ==.1_ZW5kcG9pbnQtaW52ZW50b3J5LW5hbWU=\", metaInAlarm.getId0());\r\n    assertEquals(DefaultScopeDefine.ENDPOINT_CATALOG_NAME, metaInAlarm.getScope());\r\n    assertEquals(endpointInventoryName + \" in \" + serviceInventoryName, metaInAlarm.getName());\r\n    assertEquals(DefaultScopeDefine.ENDPOINT, metaInAlarm.getScopeId());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\skywalking\\oap-server\\server-alarm-plugin\\src\\test\\java\\org\\apache\\skywalking\\oap\\server\\core\\alarm\\provider\\NotifyHandlerTest.java",
  "methodName" : "testNotifyWithServiceInstanceCatalog",
  "sourceCode" : "@Test\r\npublic void testNotifyWithServiceInstanceCatalog() {\r\n    String metricsName = \"service-instance-metrics\";\r\n    when(metadata.getMetricsName()).thenReturn(metricsName);\r\n    when(DefaultScopeDefine.inServiceInstanceCatalog(0)).thenReturn(true);\r\n    String instanceInventoryName = \"instance-inventory-name\";\r\n    final String serviceId = IDManager.ServiceID.buildId(\"service\", true);\r\n    final String instanceId = IDManager.ServiceInstanceID.buildId(serviceId, instanceInventoryName);\r\n    when(metadata.getId()).thenReturn(instanceId);\r\n    ArgumentCaptor<MetaInAlarm> metaCaptor = ArgumentCaptor.forClass(MetaInAlarm.class);\r\n    notifyHandler.notify(metrics);\r\n    verify(rule).in(metaCaptor.capture(), any());\r\n    MetaInAlarm metaInAlarm = metaCaptor.getValue();\r\n    assertTrue(metaInAlarm instanceof ServiceInstanceMetaInAlarm);\r\n    assertEquals(\"c2VydmljZQ==.1_aW5zdGFuY2UtaW52ZW50b3J5LW5hbWU=\", metaInAlarm.getId0());\r\n    assertEquals(DefaultScopeDefine.SERVICE_INSTANCE_CATALOG_NAME, metaInAlarm.getScope());\r\n    assertEquals(\"instance-inventory-name of service\", metaInAlarm.getName());\r\n    assertEquals(DefaultScopeDefine.SERVICE_INSTANCE, metaInAlarm.getScopeId());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\skywalking\\oap-server\\server-alarm-plugin\\src\\test\\java\\org\\apache\\skywalking\\oap\\server\\core\\alarm\\provider\\NotifyHandlerTest.java",
  "methodName" : "testNotifyWithServiceCatalog",
  "sourceCode" : "@Test\r\npublic void testNotifyWithServiceCatalog() {\r\n    String metricsName = \"service-metrics\";\r\n    when(metadata.getMetricsName()).thenReturn(metricsName);\r\n    when(DefaultScopeDefine.inServiceCatalog(0)).thenReturn(true);\r\n    final String serviceId = IDManager.ServiceID.buildId(\"service\", true);\r\n    when(metadata.getId()).thenReturn(serviceId);\r\n    ArgumentCaptor<MetaInAlarm> metaCaptor = ArgumentCaptor.forClass(MetaInAlarm.class);\r\n    notifyHandler.notify(metrics);\r\n    verify(rule).in(metaCaptor.capture(), any());\r\n    MetaInAlarm metaInAlarm = metaCaptor.getValue();\r\n    assertTrue(metaInAlarm instanceof ServiceMetaInAlarm);\r\n    assertEquals(\"c2VydmljZQ==.1\", metaInAlarm.getId0());\r\n    assertEquals(DefaultScopeDefine.SERVICE_CATALOG_NAME, metaInAlarm.getScope());\r\n    assertEquals(\"service\", metaInAlarm.getName());\r\n    assertEquals(DefaultScopeDefine.SERVICE, metaInAlarm.getScopeId());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\skywalking\\oap-server\\server-alarm-plugin\\src\\test\\java\\org\\apache\\skywalking\\oap\\server\\core\\alarm\\provider\\NotifyHandlerTest.java",
  "methodName" : "testNotifyWithServiceRelationCatalog",
  "sourceCode" : "@Test\r\npublic void testNotifyWithServiceRelationCatalog() {\r\n    String metricsName = \"service-relation-metrics\";\r\n    when(metadata.getMetricsName()).thenReturn(metricsName);\r\n    when(DefaultScopeDefine.inServiceRelationCatalog(0)).thenReturn(true);\r\n    final String serviceRelationId = IDManager.ServiceID.buildRelationId(new IDManager.ServiceID.ServiceRelationDefine(IDManager.ServiceID.buildId(\"from-service\", true), IDManager.ServiceID.buildId(\"dest-service\", true)));\r\n    when(metadata.getId()).thenReturn(serviceRelationId);\r\n    ArgumentCaptor<MetaInAlarm> metaCaptor = ArgumentCaptor.forClass(MetaInAlarm.class);\r\n    notifyHandler.notify(metrics);\r\n    verify(rule).in(metaCaptor.capture(), any());\r\n    MetaInAlarm metaInAlarm = metaCaptor.getValue();\r\n    assertTrue(metaInAlarm instanceof ServiceRelationMetaInAlarm);\r\n    assertEquals(\"ZnJvbS1zZXJ2aWNl.1\", metaInAlarm.getId0());\r\n    assertEquals(\"ZGVzdC1zZXJ2aWNl.1\", metaInAlarm.getId1());\r\n    assertEquals(DefaultScopeDefine.SERVICE_RELATION_CATALOG_NAME, metaInAlarm.getScope());\r\n    assertEquals(\"from-service to dest-service\", metaInAlarm.getName());\r\n    assertEquals(DefaultScopeDefine.SERVICE_RELATION, metaInAlarm.getScopeId());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\skywalking\\oap-server\\server-alarm-plugin\\src\\test\\java\\org\\apache\\skywalking\\oap\\server\\core\\alarm\\provider\\NotifyHandlerTest.java",
  "methodName" : "testNotifyWithServiceInstanceRelationCatalog",
  "sourceCode" : "@Test\r\npublic void testNotifyWithServiceInstanceRelationCatalog() {\r\n    String metricsName = \"service-instance-relation-metrics\";\r\n    when(metadata.getMetricsName()).thenReturn(metricsName);\r\n    when(DefaultScopeDefine.inServiceInstanceRelationCatalog(0)).thenReturn(true);\r\n    final String serviceInstanceRelationId = IDManager.ServiceInstanceID.buildRelationId(new IDManager.ServiceInstanceID.ServiceInstanceRelationDefine(IDManager.ServiceInstanceID.buildId(IDManager.ServiceID.buildId(\"from-service\", true), \"from-service-instance\"), IDManager.ServiceInstanceID.buildId(IDManager.ServiceID.buildId(\"dest-service\", true), \"dest-service-instance\")));\r\n    when(metadata.getId()).thenReturn(serviceInstanceRelationId);\r\n    ArgumentCaptor<MetaInAlarm> metaCaptor = ArgumentCaptor.forClass(MetaInAlarm.class);\r\n    notifyHandler.notify(metrics);\r\n    verify(rule).in(metaCaptor.capture(), any());\r\n    MetaInAlarm metaInAlarm = metaCaptor.getValue();\r\n    assertTrue(metaInAlarm instanceof ServiceInstanceRelationMetaInAlarm);\r\n    assertEquals(\"ZnJvbS1zZXJ2aWNl.1_ZnJvbS1zZXJ2aWNlLWluc3RhbmNl\", metaInAlarm.getId0());\r\n    assertEquals(\"ZGVzdC1zZXJ2aWNl.1_ZGVzdC1zZXJ2aWNlLWluc3RhbmNl\", metaInAlarm.getId1());\r\n    assertEquals(DefaultScopeDefine.SERVICE_INSTANCE_RELATION_CATALOG_NAME, metaInAlarm.getScope());\r\n    assertEquals(\"from-service-instance of from-service to dest-service-instance of dest-service\", metaInAlarm.getName());\r\n    assertEquals(DefaultScopeDefine.SERVICE_INSTANCE_RELATION, metaInAlarm.getScopeId());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\skywalking\\oap-server\\server-alarm-plugin\\src\\test\\java\\org\\apache\\skywalking\\oap\\server\\core\\alarm\\provider\\NotifyHandlerTest.java",
  "methodName" : "testNotifyWithEndpointRelationCatalog",
  "sourceCode" : "@Test\r\npublic void testNotifyWithEndpointRelationCatalog() {\r\n    String metricsName = \"endpoint-relation-metrics\";\r\n    when(metadata.getMetricsName()).thenReturn(metricsName);\r\n    when(DefaultScopeDefine.inEndpointRelationCatalog(0)).thenReturn(true);\r\n    final String serviceInstanceRelationId = IDManager.EndpointID.buildRelationId(new IDManager.EndpointID.EndpointRelationDefine(IDManager.ServiceID.buildId(\"from-service\", true), \"/source-path\", IDManager.ServiceID.buildId(\"dest-service\", true), \"/dest-path\"));\r\n    when(metadata.getId()).thenReturn(serviceInstanceRelationId);\r\n    ArgumentCaptor<MetaInAlarm> metaCaptor = ArgumentCaptor.forClass(MetaInAlarm.class);\r\n    notifyHandler.notify(metrics);\r\n    verify(rule).in(metaCaptor.capture(), any());\r\n    MetaInAlarm metaInAlarm = metaCaptor.getValue();\r\n    assertTrue(metaInAlarm instanceof EndpointRelationMetaInAlarm);\r\n    assertEquals(\"ZnJvbS1zZXJ2aWNl.1_L3NvdXJjZS1wYXRo\", metaInAlarm.getId0());\r\n    assertEquals(\"ZGVzdC1zZXJ2aWNl.1_L2Rlc3QtcGF0aA==\", metaInAlarm.getId1());\r\n    assertEquals(DefaultScopeDefine.ENDPOINT_RELATION_CATALOG_NAME, metaInAlarm.getScope());\r\n    assertEquals(\"/source-path in from-service to /dest-path in dest-service\", metaInAlarm.getName());\r\n    assertEquals(DefaultScopeDefine.ENDPOINT_RELATION, metaInAlarm.getScopeId());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\skywalking\\oap-server\\server-alarm-plugin\\src\\test\\java\\org\\apache\\skywalking\\oap\\server\\core\\alarm\\provider\\NotifyHandlerTest.java",
  "methodName" : "dontNotify",
  "sourceCode" : "@Test\r\npublic void dontNotify() {\r\n    MetricsMetaInfo metadata = mock(MetricsMetaInfo.class);\r\n    when(metadata.getScope()).thenReturn(DefaultScopeDefine.SERVICE);\r\n    MockMetrics mockMetrics = mock(MockMetrics.class);\r\n    when(mockMetrics.getMeta()).thenReturn(metadata);\r\n    notifyHandler.notify(mockMetrics);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\skywalking\\oap-server\\server-alarm-plugin\\src\\test\\java\\org\\apache\\skywalking\\oap\\server\\core\\alarm\\provider\\pagerduty\\PagerDutyHookCallbackTest.java",
  "methodName" : "testWithRealAccount",
  "sourceCode" : "@Test\r\n@Disabled\r\npublic void testWithRealAccount() throws Exception {\r\n    // replace this with your actual integration key(s) and run this test manually\r\n    List<String> integrationKeys = Arrays.asList(\"dummy-integration-key\");\r\n    Rules rules = new Rules();\r\n    PagerDutySettings setting1 = new PagerDutySettings(\"setting1\", AlarmHooksType.pagerduty, true);\r\n    setting1.setIntegrationKeys(integrationKeys);\r\n    setting1.setTextTemplate(\"Apache SkyWalking Alarm: \\\\n %s.\");\r\n    PagerDutySettings setting2 = new PagerDutySettings(\"setting2\", AlarmHooksType.pagerduty, false);\r\n    setting2.setIntegrationKeys(integrationKeys);\r\n    setting2.setTextTemplate(\"Apache SkyWalking Alarm: \\\\n %s.\");\r\n    rules.getPagerDutySettingsMap().put(setting1.getFormattedName(), setting1);\r\n    rules.getPagerDutySettingsMap().put(setting2.getFormattedName(), setting2);\r\n    PagerDutyHookCallback pagerDutyHookCallback = new PagerDutyHookCallback(new AlarmRulesWatcher(rules, null, null));\r\n    List<AlarmMessage> alarmMessages = new ArrayList<>(2);\r\n    AlarmMessage alarmMessage = new AlarmMessage();\r\n    alarmMessage.setScopeId(DefaultScopeDefine.SERVICE);\r\n    alarmMessage.setRuleName(\"service_resp_time_rule\");\r\n    alarmMessage.setAlarmMessage(\"alarmMessage with [DefaultScopeDefine.All]\");\r\n    alarmMessage.getHooks().add(setting1.getFormattedName());\r\n    alarmMessages.add(alarmMessage);\r\n    AlarmMessage anotherAlarmMessage = new AlarmMessage();\r\n    anotherAlarmMessage.setRuleName(\"service_resp_time_rule_2\");\r\n    anotherAlarmMessage.setScopeId(DefaultScopeDefine.ENDPOINT);\r\n    anotherAlarmMessage.setAlarmMessage(\"anotherAlarmMessage with [DefaultScopeDefine.Endpoint]\");\r\n    anotherAlarmMessage.getHooks().add(setting2.getFormattedName());\r\n    alarmMessages.add(anotherAlarmMessage);\r\n    pagerDutyHookCallback.doAlarm(alarmMessages);\r\n    // please check your pagerduty account to see if the alarm is sent\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\skywalking\\oap-server\\server-alarm-plugin\\src\\test\\java\\org\\apache\\skywalking\\oap\\server\\core\\alarm\\provider\\RulesReaderTest.java",
  "methodName" : "testReadRules",
  "sourceCode" : "@Test\r\npublic void testReadRules() {\r\n    RulesReader reader = new RulesReader(this.getClass().getClassLoader().getResourceAsStream(\"alarm-settings.yml\"), null);\r\n    Rules rules = reader.readRules();\r\n    List<AlarmRule> ruleList = rules.getRules();\r\n    Assertions.assertEquals(5, ruleList.size());\r\n    Assertions.assertEquals(\"sum(service_percent < 85) >= 4\", ruleList.get(1).getExpression());\r\n    Assertions.assertEquals(\"endpoint_percent_rule\", ruleList.get(0).getAlarmRuleName());\r\n    Assertions.assertEquals(0, ruleList.get(0).getIncludeNames().size());\r\n    Assertions.assertEquals(0, ruleList.get(0).getExcludeNames().size());\r\n    Assertions.assertEquals(\"Successful rate of endpoint {name} is lower than 75%\", ruleList.get(0).getMessage());\r\n    Assertions.assertEquals(\"service_b\", ruleList.get(1).getIncludeNames().get(1));\r\n    Assertions.assertEquals(\"service_c\", ruleList.get(1).getExcludeNames().get(0));\r\n    Assertions.assertEquals(\"Alarm caused by Rule service_percent_rule\", ruleList.get(1).getMessage());\r\n    //endpoint_percent_rule's hooks\r\n    Assertions.assertEquals(8, ruleList.get(0).getHooks().size());\r\n    //endpoint_percent_more_rule's hooks\r\n    Assertions.assertEquals(2, ruleList.get(2).getHooks().size());\r\n    WebhookSettings rulesWebhooks = rules.getWebhookSettingsMap().get(AlarmHooksType.webhook.name() + \".default\");\r\n    Assertions.assertEquals(2, rulesWebhooks.getUrls().size());\r\n    Assertions.assertEquals(\"http://127.0.0.1/go-wechat/\", rulesWebhooks.getUrls().get(1));\r\n    WebhookSettings rulesWebhooks2 = rules.getWebhookSettingsMap().get(AlarmHooksType.webhook.name() + \".custom1\");\r\n    Assertions.assertEquals(2, rulesWebhooks2.getHeaders().size());\r\n    Assertions.assertEquals(\"Bearer bearer_token\", rulesWebhooks2.getHeaders().get(\"Authorization\"));\r\n    Assertions.assertEquals(\"arbitrary-additional-http-headers\", rulesWebhooks2.getHeaders().get(\"x-company-header\"));\r\n    GRPCAlarmSetting grpcAlarmSetting = rules.getGrpcAlarmSettingMap().get(AlarmHooksType.gRPC.name() + \".default\");\r\n    assertNotNull(grpcAlarmSetting);\r\n    assertThat(grpcAlarmSetting.getTargetHost()).isEqualTo(\"127.0.0.1\");\r\n    assertThat(grpcAlarmSetting.getTargetPort()).isEqualTo(9888);\r\n    SlackSettings slackSettings = rules.getSlackSettingsMap().get(AlarmHooksType.slack.name() + \".default\");\r\n    assertNotNull(slackSettings);\r\n    assertThat(slackSettings.getWebhooks().size()).isEqualTo(1);\r\n    assertThat(slackSettings.getWebhooks().get(0)).isEqualTo(\"https://hooks.slack.com/services/x/y/zssss\");\r\n    assertThat(slackSettings.getTextTemplate()).isInstanceOfAny(String.class);\r\n    WechatSettings wechatSettings = rules.getWechatSettingsMap().get(AlarmHooksType.wechat.name() + \".default\");\r\n    assertNotNull(wechatSettings);\r\n    assertThat(wechatSettings.getWebhooks().size()).isEqualTo(1);\r\n    assertThat(wechatSettings.getWebhooks().get(0)).isEqualTo(\"https://qyapi.weixin.qq.com/cgi-bin/webhook/send?key=dummy_key\");\r\n    assertThat(slackSettings.getTextTemplate()).isInstanceOfAny(String.class);\r\n    DingtalkSettings dingtalkSettings = rules.getDingtalkSettingsMap().get(AlarmHooksType.dingtalk.name() + \".default\");\r\n    assertThat(dingtalkSettings.getTextTemplate()).isInstanceOfAny(String.class);\r\n    List<DingtalkSettings.WebHookUrl> webHookUrls = dingtalkSettings.getWebhooks();\r\n    assertThat(webHookUrls.size()).isEqualTo(2);\r\n    assertThat(webHookUrls.get(0).getUrl()).isEqualTo(\"https://oapi.dingtalk.com/robot/send?access_token=dummy_token\");\r\n    assertThat(webHookUrls.get(0).getSecret()).isEqualTo(\"dummysecret\");\r\n    assertThat(webHookUrls.get(1).getUrl()).isEqualTo(\"https://oapi.dingtalk.com/robot/send?access_token=dummy_token2\");\r\n    assertNull(webHookUrls.get(1).getSecret());\r\n    FeishuSettings feishuSettings = rules.getFeishuSettingsMap().get(AlarmHooksType.feishu.name() + \".default\");\r\n    assertThat(feishuSettings.getTextTemplate()).isInstanceOfAny(String.class);\r\n    List<FeishuSettings.WebHookUrl> feishuSettingsWebhooks = feishuSettings.getWebhooks();\r\n    assertThat(feishuSettingsWebhooks.size()).isEqualTo(2);\r\n    assertThat(feishuSettingsWebhooks.get(0).getUrl()).isEqualTo(\"https://open.feishu.cn/open-apis/bot/v2/hook/dummy_token\");\r\n    assertThat(feishuSettingsWebhooks.get(0).getSecret()).isEqualTo(\"dummysecret\");\r\n    assertThat(feishuSettingsWebhooks.get(1).getUrl()).isEqualTo(\"https://open.feishu.cn/open-apis/bot/v2/hook/dummy_token2\");\r\n    assertNull(feishuSettingsWebhooks.get(1).getSecret());\r\n    PagerDutySettings pagerDutySettings = rules.getPagerDutySettingsMap().get(AlarmHooksType.pagerduty.name() + \".default\");\r\n    assertEquals(\"dummy_text_template\", pagerDutySettings.getTextTemplate());\r\n    List<String> pagerDutyIntegrationKeys = pagerDutySettings.getIntegrationKeys();\r\n    assertEquals(2, pagerDutyIntegrationKeys.size());\r\n    assertEquals(\"dummy_key\", pagerDutyIntegrationKeys.get(0));\r\n    assertEquals(\"dummy_key2\", pagerDutyIntegrationKeys.get(1));\r\n    WeLinkSettings weLinkSettings = rules.getWeLinkSettingsMap().get(AlarmHooksType.welink.name() + \".default\");\r\n    assertThat(weLinkSettings.getTextTemplate()).isInstanceOfAny(String.class);\r\n    List<WeLinkSettings.WebHookUrl> weiWebHookUrls = weLinkSettings.getWebhooks();\r\n    assertThat(weiWebHookUrls.size()).isEqualTo(1);\r\n    assertThat(weiWebHookUrls.get(0).getAccessTokenUrl()).isEqualTo(\"https://open.welink.huaweicloud.com/api/auth/v2/tickets\");\r\n    assertThat(weiWebHookUrls.get(0).getMessageUrl()).isEqualTo(\"https://open.welink.huaweicloud.com/api/welinkim/v1/im-service/chat/group-chat\");\r\n    assertThat(weiWebHookUrls.get(0).getClientId()).isEqualTo(\"dummy_client_id\");\r\n    assertThat(weiWebHookUrls.get(0).getClientSecret()).isEqualTo(\"dummy_secret_key\");\r\n    assertThat(weiWebHookUrls.get(0).getRobotName()).isEqualTo(\"robot\");\r\n    assertThat(weiWebHookUrls.get(0).getGroupIds()).isEqualTo(\"dummy_group_id\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\skywalking\\oap-server\\server-alarm-plugin\\src\\test\\java\\org\\apache\\skywalking\\oap\\server\\core\\alarm\\provider\\RunningRuleTest.java",
  "methodName" : "testInitAndStart",
  "sourceCode" : "@Test\r\npublic void testInitAndStart() throws IllegalExpressionException {\r\n    AlarmRule alarmRule = new AlarmRule(null);\r\n    alarmRule.setAlarmRuleName(\"mix_rule\");\r\n    alarmRule.setExpression(\"sum((increase(endpoint_cpm,5) + increase(endpoint_percent,2)) > 0) >= 1\");\r\n    alarmRule.getIncludeMetrics().add(\"endpoint_percent\");\r\n    alarmRule.getIncludeMetrics().add(\"endpoint_cpm\");\r\n    alarmRule.setPeriod(10);\r\n    alarmRule.setTags(new HashMap<String, String>() {\r\n\r\n        {\r\n            put(\"key\", \"value\");\r\n        }\r\n    });\r\n    RunningRule runningRule = new RunningRule(alarmRule, null);\r\n    DateTime startTime = DateTime.now();\r\n    long timeInPeriod1 = TimeBucket.getMinuteTimeBucket(startTime.getMillis());\r\n    DateTime targetTime = new DateTime(TimeBucket.getTimestamp(timeInPeriod1));\r\n    runningRule.in(getMetaInAlarm(123), getMetrics(timeInPeriod1, 70));\r\n    Map<AlarmEntity, RunningRule.Window> windows = Whitebox.getInternalState(runningRule, \"windows\");\r\n    RunningRule.Window window = windows.get(getAlarmEntity(123));\r\n    LocalDateTime endTime = Whitebox.getInternalState(window, \"endTime\");\r\n    int additionalPeriod = Whitebox.getInternalState(window, \"additionalPeriod\");\r\n    LinkedList<Metrics> metricsBuffer = Whitebox.getInternalState(window, \"values\");\r\n    Assertions.assertTrue(targetTime.equals(endTime.toDateTime()));\r\n    Assertions.assertEquals(5, additionalPeriod);\r\n    Assertions.assertEquals(15, metricsBuffer.size());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\skywalking\\oap-server\\server-alarm-plugin\\src\\test\\java\\org\\apache\\skywalking\\oap\\server\\core\\alarm\\provider\\RunningRuleTest.java",
  "methodName" : "testAlarm",
  "sourceCode" : "@Test\r\npublic void testAlarm() throws IllegalExpressionException {\r\n    AlarmRule alarmRule = new AlarmRule(null);\r\n    alarmRule.setAlarmRuleName(\"endpoint_percent_rule\");\r\n    alarmRule.setExpression(\"sum(endpoint_percent < 75) >= 3\");\r\n    alarmRule.getIncludeMetrics().add(\"endpoint_percent\");\r\n    alarmRule.setPeriod(15);\r\n    alarmRule.setMessage(\"Successful rate of endpoint {name} is lower than 75%\");\r\n    alarmRule.setTags(new HashMap<String, String>() {\r\n\r\n        {\r\n            put(\"key\", \"value\");\r\n        }\r\n    });\r\n    RunningRule runningRule = new RunningRule(alarmRule, null);\r\n    DateTime startTime = DateTime.now();\r\n    long timeInPeriod1 = TimeBucket.getMinuteTimeBucket(startTime.minusMinutes(6).getMillis());\r\n    long timeInPeriod2 = TimeBucket.getMinuteTimeBucket(startTime.minusMinutes(4).getMillis());\r\n    long timeInPeriod3 = TimeBucket.getMinuteTimeBucket(startTime.minusMinutes(2).getMillis());\r\n    runningRule.in(getMetaInAlarm(123), getMetrics(timeInPeriod1, 70));\r\n    runningRule.in(getMetaInAlarm(123), getMetrics(timeInPeriod2, 71));\r\n    // check at startTime - 4\r\n    List<AlarmMessage> alarmMessages = runningRule.check();\r\n    Assertions.assertEquals(0, alarmMessages.size());\r\n    // check at startTime - 2\r\n    runningRule.in(getMetaInAlarm(123), getMetrics(timeInPeriod3, 74));\r\n    alarmMessages = runningRule.check();\r\n    Assertions.assertEquals(1, alarmMessages.size());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\skywalking\\oap-server\\server-alarm-plugin\\src\\test\\java\\org\\apache\\skywalking\\oap\\server\\core\\alarm\\provider\\RunningRuleTest.java",
  "methodName" : "testAlarmMetricsOutOfDate",
  "sourceCode" : "@Test\r\npublic void testAlarmMetricsOutOfDate() throws IllegalExpressionException {\r\n    AlarmRule alarmRule = new AlarmRule(null);\r\n    alarmRule.setAlarmRuleName(\"endpoint_percent_rule\");\r\n    alarmRule.setExpression(\"sum(endpoint_percent < 75) >= 3\");\r\n    alarmRule.getIncludeMetrics().add(\"endpoint_percent\");\r\n    alarmRule.setPeriod(15);\r\n    alarmRule.setMessage(\"Successful rate of endpoint {name} is lower than 75%\");\r\n    alarmRule.setTags(new HashMap<String, String>() {\r\n\r\n        {\r\n            put(\"key\", \"value\");\r\n        }\r\n    });\r\n    RunningRule runningRule = new RunningRule(alarmRule, null);\r\n    DateTime startTime = DateTime.now();\r\n    long timeInPeriod1 = TimeBucket.getMinuteTimeBucket(startTime.minusMinutes(153).getMillis());\r\n    long timeInPeriod2 = TimeBucket.getMinuteTimeBucket(startTime.minusMinutes(152).getMillis());\r\n    long timeInPeriod3 = TimeBucket.getMinuteTimeBucket(startTime.minusMinutes(151).getMillis());\r\n    runningRule.in(getMetaInAlarm(123), getMetrics(timeInPeriod1, 70));\r\n    runningRule.in(getMetaInAlarm(123), getMetrics(timeInPeriod2, 71));\r\n    runningRule.in(getMetaInAlarm(123), getMetrics(timeInPeriod3, 74));\r\n    // check at startTime\r\n    runningRule.moveTo(startTime.toLocalDateTime());\r\n    List<AlarmMessage> alarmMessages = runningRule.check();\r\n    Assertions.assertEquals(0, alarmMessages.size());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\skywalking\\oap-server\\server-alarm-plugin\\src\\test\\java\\org\\apache\\skywalking\\oap\\server\\core\\alarm\\provider\\RunningRuleTest.java",
  "methodName" : "testLabeledAlarm",
  "sourceCode" : "@Test\r\npublic void testLabeledAlarm() throws IllegalExpressionException {\r\n    ValueColumnMetadata.INSTANCE.putIfAbsent(\"endpoint_labeled\", \"testColumn\", Column.ValueDataType.LABELED_VALUE, 0, Scope.Endpoint.getScopeId());\r\n    AlarmRule alarmRule = new AlarmRule(null);\r\n    alarmRule.setExpression(\"sum(endpoint_labeled{p='95,99'} > 10) >= 3\");\r\n    alarmRule.getIncludeMetrics().add(\"endpoint_labeled\");\r\n    assertLabeled(alarmRule, \"{p=50},17|{p=99},11\", \"{p=75},15|{p=95},12|{p=99},12\", \"{p=90},1|{p=99},20\", 1);\r\n    alarmRule.setExpression(\"sum(endpoint_labeled > 10) >= 3\");\r\n    assertLabeled(alarmRule, \"{p=50},17|{p=99},11\", \"{p=75},15|{p=95},12|{p=99},12\", \"{p=90},1|{p=99},20\", 1);\r\n    alarmRule.setExpression(\"sum(endpoint_labeled{_='50'} > 10) >= 3\");\r\n    assertLabeled(alarmRule, \"{p=50},17|{p=99},11\", \"{p=75},15|{p=95},12|{p=99},12\", \"{p=90},1|{p=99},20\", 0);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\skywalking\\oap-server\\server-alarm-plugin\\src\\test\\java\\org\\apache\\skywalking\\oap\\server\\core\\alarm\\provider\\RunningRuleTest.java",
  "methodName" : "testMultipleMetricsAlarm",
  "sourceCode" : "@Test\r\npublic void testMultipleMetricsAlarm() throws IllegalExpressionException {\r\n    multipleMetricsAlarm(\"sum((endpoint_percent < 75) * (endpoint_cpm < 100)) >= 3\", 1);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\skywalking\\oap-server\\server-alarm-plugin\\src\\test\\java\\org\\apache\\skywalking\\oap\\server\\core\\alarm\\provider\\RunningRuleTest.java",
  "methodName" : "testMultipleMetricsNoAlarm",
  "sourceCode" : "@Test\r\npublic void testMultipleMetricsNoAlarm() throws IllegalExpressionException {\r\n    multipleMetricsAlarm(\"sum((endpoint_percent < 75) * (endpoint_cpm < 99)) >= 3\", 0);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\skywalking\\oap-server\\server-alarm-plugin\\src\\test\\java\\org\\apache\\skywalking\\oap\\server\\core\\alarm\\provider\\RunningRuleTest.java",
  "methodName" : "testNoAlarm",
  "sourceCode" : "@Test\r\npublic void testNoAlarm() throws IllegalExpressionException {\r\n    AlarmRule alarmRule = new AlarmRule(null);\r\n    alarmRule.setAlarmRuleName(\"endpoint_percent_rule\");\r\n    alarmRule.setExpression(\"sum(endpoint_percent > 75) >= 3\");\r\n    alarmRule.getIncludeMetrics().add(\"endpoint_percent\");\r\n    alarmRule.setPeriod(15);\r\n    //alarmRule.setSilencePeriod(0);\r\n    alarmRule.setTags(new HashMap<String, String>() {\r\n\r\n        {\r\n            put(\"key\", \"value\");\r\n        }\r\n    });\r\n    RunningRule runningRule = new RunningRule(alarmRule, null);\r\n    final boolean[] isAlarm = { false };\r\n    AlarmCallback assertCallback = new AlarmCallback() {\r\n\r\n        @Override\r\n        public void doAlarm(List<AlarmMessage> alarmMessage) {\r\n            isAlarm[0] = true;\r\n        }\r\n    };\r\n    LinkedList<AlarmCallback> callbackList = new LinkedList<>();\r\n    callbackList.add(assertCallback);\r\n    DateTime startTime = DateTime.now();\r\n    long timeInPeriod1 = TimeBucket.getMinuteTimeBucket(startTime.minusMinutes(7).getMillis());\r\n    long timeInPeriod2 = TimeBucket.getMinuteTimeBucket(startTime.minusMinutes(5).getMillis());\r\n    long timeInPeriod3 = TimeBucket.getMinuteTimeBucket(startTime.minusMinutes(3).getMillis());\r\n    long timeInPeriod4 = TimeBucket.getMinuteTimeBucket(startTime.minusMinutes(9).getMillis());\r\n    long timeInPeriod5 = TimeBucket.getMinuteTimeBucket(startTime.minusMinutes(1).getMillis());\r\n    runningRule.in(getMetaInAlarm(123), getMetrics(timeInPeriod1, 70));\r\n    runningRule.in(getMetaInAlarm(123), getMetrics(timeInPeriod2, 71));\r\n    runningRule.in(getMetaInAlarm(123), getMetrics(timeInPeriod3, 74));\r\n    runningRule.in(getMetaInAlarm(123), getMetrics(timeInPeriod4, 90));\r\n    runningRule.in(getMetaInAlarm(123), getMetrics(timeInPeriod5, 95));\r\n    // check at startTime - 1\r\n    Assertions.assertEquals(0, runningRule.check().size());\r\n    // check at startTime\r\n    runningRule.moveTo(startTime.toLocalDateTime());\r\n    Assertions.assertEquals(0, runningRule.check().size());\r\n    // check at startTime + 1\r\n    runningRule.moveTo(startTime.plusMinutes(1).toLocalDateTime());\r\n    Assertions.assertEquals(0, runningRule.check().size());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\skywalking\\oap-server\\server-alarm-plugin\\src\\test\\java\\org\\apache\\skywalking\\oap\\server\\core\\alarm\\provider\\RunningRuleTest.java",
  "methodName" : "testSilence",
  "sourceCode" : "@Test\r\npublic void testSilence() throws IllegalExpressionException {\r\n    AlarmRule alarmRule = new AlarmRule(null);\r\n    alarmRule.setAlarmRuleName(\"endpoint_percent_rule\");\r\n    alarmRule.setExpression(\"sum(endpoint_percent < 75) >= 3\");\r\n    alarmRule.getIncludeMetrics().add(\"endpoint_percent\");\r\n    alarmRule.setPeriod(15);\r\n    alarmRule.setSilencePeriod(2);\r\n    alarmRule.setTags(new HashMap<String, String>() {\r\n\r\n        {\r\n            put(\"key\", \"value\");\r\n        }\r\n    });\r\n    RunningRule runningRule = new RunningRule(alarmRule, null);\r\n    DateTime startTime = DateTime.now();\r\n    long timeInPeriod1 = TimeBucket.getMinuteTimeBucket(startTime.minusMinutes(6).getMillis());\r\n    long timeInPeriod2 = TimeBucket.getMinuteTimeBucket(startTime.minusMinutes(4).getMillis());\r\n    long timeInPeriod3 = TimeBucket.getMinuteTimeBucket(startTime.minusMinutes(2).getMillis());\r\n    runningRule.in(getMetaInAlarm(123), getMetrics(timeInPeriod1, 70));\r\n    runningRule.in(getMetaInAlarm(123), getMetrics(timeInPeriod2, 71));\r\n    // check at startTime - 4\r\n    //check matches, no alarm\r\n    Assertions.assertEquals(0, runningRule.check().size());\r\n    // check at startTime\r\n    runningRule.moveTo(startTime.toLocalDateTime());\r\n    runningRule.in(getMetaInAlarm(123), getMetrics(timeInPeriod3, 74));\r\n    //alarm\r\n    Assertions.assertEquals(1, runningRule.check().size());\r\n    // check at starTime + 1\r\n    runningRule.moveTo(startTime.plusMinutes(1).toLocalDateTime());\r\n    //silence, no alarm\r\n    Assertions.assertEquals(0, runningRule.check().size());\r\n    //silence, no alarm\r\n    Assertions.assertEquals(0, runningRule.check().size());\r\n    //alarm\r\n    Assertions.assertNotEquals(0, runningRule.check().size());\r\n    //silence, no alarm\r\n    Assertions.assertEquals(0, runningRule.check().size());\r\n    //silence, no alarm\r\n    Assertions.assertEquals(0, runningRule.check().size());\r\n    //alarm\r\n    Assertions.assertNotEquals(0, runningRule.check().size());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\skywalking\\oap-server\\server-alarm-plugin\\src\\test\\java\\org\\apache\\skywalking\\oap\\server\\core\\alarm\\provider\\RunningRuleTest.java",
  "methodName" : "testExclude",
  "sourceCode" : "@Test\r\npublic void testExclude() throws IllegalExpressionException {\r\n    AlarmRule alarmRule = new AlarmRule(null);\r\n    alarmRule.setAlarmRuleName(\"endpoint_percent_rule\");\r\n    alarmRule.setExpression(\"sum(endpoint_percent < 75) >= 3\");\r\n    alarmRule.getIncludeMetrics().add(\"endpoint_percent\");\r\n    alarmRule.setPeriod(15);\r\n    alarmRule.setMessage(\"Successful rate of endpoint {name} is lower than 75%\");\r\n    alarmRule.setExcludeNames(Lists.newArrayList(\"Service_123\"));\r\n    alarmRule.setTags(new HashMap<String, String>() {\r\n\r\n        {\r\n            put(\"key\", \"value\");\r\n        }\r\n    });\r\n    RunningRule runningRule = new RunningRule(alarmRule, null);\r\n    DateTime startTime = DateTime.now();\r\n    long timeInPeriod1 = TimeBucket.getMinuteTimeBucket(startTime.minusMinutes(6).getMillis());\r\n    long timeInPeriod2 = TimeBucket.getMinuteTimeBucket(startTime.minusMinutes(4).getMillis());\r\n    long timeInPeriod3 = TimeBucket.getMinuteTimeBucket(startTime.minusMinutes(2).getMillis());\r\n    runningRule.in(getMetaInAlarm(123), getMetrics(timeInPeriod1, 70));\r\n    runningRule.in(getMetaInAlarm(123), getMetrics(timeInPeriod2, 71));\r\n    runningRule.in(getMetaInAlarm(123), getMetrics(timeInPeriod3, 74));\r\n    // check at startTime - 2\r\n    Assertions.assertEquals(0, runningRule.check().size());\r\n    // check at startTime\r\n    runningRule.moveTo(startTime.toLocalDateTime());\r\n    Assertions.assertEquals(0, runningRule.check().size());\r\n    // check at startTime + 1\r\n    runningRule.moveTo(startTime.plusMinutes(1).toLocalDateTime());\r\n    Assertions.assertEquals(0, runningRule.check().size());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\skywalking\\oap-server\\server-alarm-plugin\\src\\test\\java\\org\\apache\\skywalking\\oap\\server\\core\\alarm\\provider\\RunningRuleTest.java",
  "methodName" : "testIncludeNamesRegex",
  "sourceCode" : "@Test\r\npublic void testIncludeNamesRegex() throws IllegalExpressionException {\r\n    AlarmRule alarmRule = new AlarmRule(null);\r\n    alarmRule.setAlarmRuleName(\"endpoint_percent_rule\");\r\n    alarmRule.setExpression(\"sum(endpoint_percent < 1000) >= 1\");\r\n    alarmRule.getIncludeMetrics().add(\"endpoint_percent\");\r\n    alarmRule.setPeriod(10);\r\n    alarmRule.setMessage(\"Response time of service instance {name} is more than 1000ms in 2 minutes of last 10 minutes\");\r\n    alarmRule.setIncludeNamesRegex(\"Service\\\\_1(\\\\d)+\");\r\n    alarmRule.setTags(new HashMap<String, String>() {\r\n\r\n        {\r\n            put(\"key\", \"value\");\r\n        }\r\n    });\r\n    RunningRule runningRule = new RunningRule(alarmRule, null);\r\n    DateTime startTime = DateTime.now();\r\n    long timeInPeriod1 = TimeBucket.getMinuteTimeBucket(startTime.minusMinutes(6).getMillis());\r\n    long timeInPeriod2 = TimeBucket.getMinuteTimeBucket(startTime.minusMinutes(4).getMillis());\r\n    long timeInPeriod3 = TimeBucket.getMinuteTimeBucket(startTime.minusMinutes(1).getMillis());\r\n    runningRule.in(getMetaInAlarm(123), getMetrics(timeInPeriod1, 70));\r\n    runningRule.in(getMetaInAlarm(123), getMetrics(timeInPeriod2, 70));\r\n    runningRule.in(getMetaInAlarm(223), getMetrics(timeInPeriod3, 74));\r\n    // check at startTime - 1\r\n    Assertions.assertEquals(1, runningRule.check().size());\r\n    // check at startTime\r\n    runningRule.moveTo(startTime.toLocalDateTime());\r\n    Assertions.assertEquals(1, runningRule.check().size());\r\n    // check at startTime + 6\r\n    runningRule.moveTo(startTime.plusMinutes(6).toLocalDateTime());\r\n    Assertions.assertEquals(0, runningRule.check().size());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\skywalking\\oap-server\\server-alarm-plugin\\src\\test\\java\\org\\apache\\skywalking\\oap\\server\\core\\alarm\\provider\\RunningRuleTest.java",
  "methodName" : "testExcludeNamesRegex",
  "sourceCode" : "@Test\r\npublic void testExcludeNamesRegex() throws IllegalExpressionException {\r\n    AlarmRule alarmRule = new AlarmRule(null);\r\n    alarmRule.setAlarmRuleName(\"endpoint_percent_rule\");\r\n    alarmRule.setExpression(\"sum(endpoint_percent < 1000) >= 1\");\r\n    alarmRule.getIncludeMetrics().add(\"endpoint_percent\");\r\n    alarmRule.setPeriod(10);\r\n    alarmRule.setMessage(\"Response time of service instance {name} is more than 1000ms in 2 minutes of last 10 minutes\");\r\n    alarmRule.setExcludeNamesRegex(\"Service\\\\_2(\\\\d)+\");\r\n    alarmRule.setTags(new HashMap<String, String>() {\r\n\r\n        {\r\n            put(\"key\", \"value\");\r\n        }\r\n    });\r\n    RunningRule runningRule = new RunningRule(alarmRule, null);\r\n    DateTime startTime = DateTime.now();\r\n    long timeInPeriod1 = TimeBucket.getMinuteTimeBucket(startTime.minusMinutes(6).getMillis());\r\n    long timeInPeriod2 = TimeBucket.getMinuteTimeBucket(startTime.minusMinutes(4).getMillis());\r\n    long timeInPeriod3 = TimeBucket.getMinuteTimeBucket(startTime.minusMinutes(1).getMillis());\r\n    runningRule.in(getMetaInAlarm(123), getMetrics(timeInPeriod1, 70));\r\n    runningRule.in(getMetaInAlarm(123), getMetrics(timeInPeriod2, 70));\r\n    runningRule.in(getMetaInAlarm(223), getMetrics(timeInPeriod3, 74));\r\n    // check at startTime - 1\r\n    Assertions.assertEquals(1, runningRule.check().size());\r\n    // check at startTime\r\n    runningRule.moveTo(startTime.toLocalDateTime());\r\n    Assertions.assertEquals(1, runningRule.check().size());\r\n    // check at startTime + 6\r\n    runningRule.moveTo(startTime.plusMinutes(6).toLocalDateTime());\r\n    Assertions.assertEquals(0, runningRule.check().size());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\skywalking\\oap-server\\server-alarm-plugin\\src\\test\\java\\org\\apache\\skywalking\\oap\\server\\core\\alarm\\provider\\slack\\SlackHookCallbackTest.java",
  "methodName" : "testWechatWebhook",
  "sourceCode" : "@Test\r\npublic void testWechatWebhook() throws Exception {\r\n    List<String> remoteEndpoints = new ArrayList<>();\r\n    remoteEndpoints.add(\"http://127.0.0.1:\" + SERVER.httpPort() + \"/services/x/y/zssss\");\r\n    Rules rules = new Rules();\r\n    String template = \"{\\\"type\\\":\\\"section\\\",\\\"text\\\":{\\\"type\\\":\\\"mrkdwn\\\",\\\"text\\\":\\\":alarm_clock: *Apache Skywalking Alarm* \\\\n **%s**.\\\"}}\";\r\n    SlackSettings setting1 = new SlackSettings(\"setting1\", AlarmHooksType.slack, true);\r\n    setting1.setWebhooks(remoteEndpoints);\r\n    setting1.setTextTemplate(template);\r\n    SlackSettings setting2 = new SlackSettings(\"setting2\", AlarmHooksType.slack, false);\r\n    setting2.setWebhooks(remoteEndpoints);\r\n    setting2.setTextTemplate(template);\r\n    rules.getSlackSettingsMap().put(setting1.getFormattedName(), setting1);\r\n    rules.getSlackSettingsMap().put(setting2.getFormattedName(), setting2);\r\n    AlarmRulesWatcher alarmRulesWatcher = new AlarmRulesWatcher(rules, null, null);\r\n    SlackhookCallback slackhookCallback = new SlackhookCallback(alarmRulesWatcher);\r\n    List<AlarmMessage> alarmMessages = new ArrayList<>(2);\r\n    AlarmMessage alarmMessage = new AlarmMessage();\r\n    alarmMessage.setScopeId(DefaultScopeDefine.SERVICE);\r\n    alarmMessage.setRuleName(\"service_resp_time_rule\");\r\n    alarmMessage.setAlarmMessage(\"alarmMessage with [DefaultScopeDefine.All]\");\r\n    alarmMessage.getHooks().add(setting1.getFormattedName());\r\n    alarmMessages.add(alarmMessage);\r\n    AlarmMessage anotherAlarmMessage = new AlarmMessage();\r\n    anotherAlarmMessage.setRuleName(\"service_resp_time_rule_2\");\r\n    anotherAlarmMessage.setScopeId(DefaultScopeDefine.ENDPOINT);\r\n    anotherAlarmMessage.setAlarmMessage(\"anotherAlarmMessage with [DefaultScopeDefine.Endpoint]\");\r\n    anotherAlarmMessage.getHooks().add(setting2.getFormattedName());\r\n    alarmMessages.add(anotherAlarmMessage);\r\n    slackhookCallback.doAlarm(alarmMessages);\r\n    Assertions.assertTrue(IS_SUCCESS.get());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\skywalking\\oap-server\\server-alarm-plugin\\src\\test\\java\\org\\apache\\skywalking\\oap\\server\\core\\alarm\\provider\\webhook\\WebhookCallbackTest.java",
  "methodName" : "testWebhook",
  "sourceCode" : "@Test\r\npublic void testWebhook() throws Exception {\r\n    List<String> remoteEndpoints = new ArrayList<>();\r\n    remoteEndpoints.add(\"http://127.0.0.1:\" + SERVER.httpPort() + \"/webhook/receiveAlarm\");\r\n    Rules rules = new Rules();\r\n    WebhookSettings setting1 = new WebhookSettings(\"setting1\", AlarmHooksType.webhook, true);\r\n    setting1.setUrls(remoteEndpoints);\r\n    WebhookSettings setting2 = new WebhookSettings(\"setting2\", AlarmHooksType.webhook, false);\r\n    setting2.setUrls(remoteEndpoints);\r\n    rules.getWebhookSettingsMap().put(setting1.getFormattedName(), setting1);\r\n    rules.getWebhookSettingsMap().put(setting2.getFormattedName(), setting2);\r\n    setting2.setHeaders(ImmutableMap.of(\"Authorization\", \" Bearer bearer_token\", \"x-company-header\", \"arbitrary-additional-http-headers\"));\r\n    AlarmRulesWatcher alarmRulesWatcher = new AlarmRulesWatcher(rules, null, null);\r\n    WebhookCallback webhookCallback = new WebhookCallback(alarmRulesWatcher);\r\n    List<AlarmMessage> alarmMessages = new ArrayList<>(2);\r\n    AlarmMessage alarmMessage = new AlarmMessage();\r\n    alarmMessage.setId0(\"1\");\r\n    alarmMessage.setScopeId(DefaultScopeDefine.SERVICE);\r\n    alarmMessage.setRuleName(\"service_resp_time_rule\");\r\n    alarmMessage.setAlarmMessage(\"alarmMessage with [DefaultScopeDefine.All]\");\r\n    alarmMessage.getHooks().add(setting1.getFormattedName());\r\n    alarmMessages.add(alarmMessage);\r\n    AlarmMessage anotherAlarmMessage = new AlarmMessage();\r\n    anotherAlarmMessage.setId0(\"2\");\r\n    anotherAlarmMessage.setRuleName(\"service_resp_time_rule_2\");\r\n    anotherAlarmMessage.setScopeId(DefaultScopeDefine.ENDPOINT);\r\n    anotherAlarmMessage.setAlarmMessage(\"anotherAlarmMessage with [DefaultScopeDefine.Endpoint]\");\r\n    anotherAlarmMessage.getHooks().add(setting2.getFormattedName());\r\n    alarmMessages.add(anotherAlarmMessage);\r\n    webhookCallback.doAlarm(alarmMessages);\r\n    Assertions.assertTrue(IS_SUCCESS.get());\r\n    Assertions.assertEquals(2, COUNTER.get());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\skywalking\\oap-server\\server-alarm-plugin\\src\\test\\java\\org\\apache\\skywalking\\oap\\server\\core\\alarm\\provider\\wechat\\WechatHookCallbackTest.java",
  "methodName" : "testWechatWebhook",
  "sourceCode" : "@Test\r\npublic void testWechatWebhook() throws Exception {\r\n    List<String> remoteEndpoints = new ArrayList<>();\r\n    remoteEndpoints.add(\"http://127.0.0.1:\" + SERVER.httpPort() + \"/wechathook/receiveAlarm\");\r\n    Rules rules = new Rules();\r\n    String template = \"{\\\"msgtype\\\":\\\"text\\\",\\\"text\\\":{\\\"content\\\":\\\"Skywaling alarm: %s\\\"}}\";\r\n    WechatSettings setting1 = new WechatSettings(\"setting1\", AlarmHooksType.wechat, true);\r\n    setting1.setWebhooks(remoteEndpoints);\r\n    setting1.setTextTemplate(template);\r\n    WechatSettings setting2 = new WechatSettings(\"setting2\", AlarmHooksType.wechat, false);\r\n    setting2.setWebhooks(remoteEndpoints);\r\n    setting2.setTextTemplate(template);\r\n    rules.getWechatSettingsMap().put(setting1.getFormattedName(), setting1);\r\n    rules.getWechatSettingsMap().put(setting2.getFormattedName(), setting2);\r\n    AlarmRulesWatcher alarmRulesWatcher = new AlarmRulesWatcher(rules, null, null);\r\n    WechatHookCallback wechatHookCallback = new WechatHookCallback(alarmRulesWatcher);\r\n    List<AlarmMessage> alarmMessages = new ArrayList<>(2);\r\n    AlarmMessage alarmMessage = new AlarmMessage();\r\n    alarmMessage.setScopeId(DefaultScopeDefine.SERVICE);\r\n    alarmMessage.setRuleName(\"service_resp_time_rule\");\r\n    alarmMessage.setAlarmMessage(\"alarmMessage with [DefaultScopeDefine.All]\");\r\n    alarmMessage.getHooks().add(setting1.getFormattedName());\r\n    alarmMessages.add(alarmMessage);\r\n    AlarmMessage anotherAlarmMessage = new AlarmMessage();\r\n    anotherAlarmMessage.setRuleName(\"service_resp_time_rule_2\");\r\n    anotherAlarmMessage.setScopeId(DefaultScopeDefine.ENDPOINT);\r\n    anotherAlarmMessage.setAlarmMessage(\"anotherAlarmMessage with [DefaultScopeDefine.Endpoint]\");\r\n    anotherAlarmMessage.getHooks().add(setting2.getFormattedName());\r\n    alarmMessages.add(anotherAlarmMessage);\r\n    wechatHookCallback.doAlarm(alarmMessages);\r\n    Assertions.assertTrue(IS_SUCCESS.get());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\skywalking\\oap-server\\server-alarm-plugin\\src\\test\\java\\org\\apache\\skywalking\\oap\\server\\core\\alarm\\provider\\welink\\WeLinkHookCallbackTest.java",
  "methodName" : "testWeLinkDoAlarm",
  "sourceCode" : "@Test\r\npublic void testWeLinkDoAlarm() throws Exception {\r\n    List<WeLinkSettings.WebHookUrl> webHooks = new ArrayList<>();\r\n    webHooks.add(new WeLinkSettings.WebHookUrl(\"clientId\", \"clientSecret\", \"http://127.0.0.1:\" + SERVER.httpPort() + \"/welinkhook/api/auth/v2/tickets\", \"http://127.0.0.1:\" + SERVER.httpPort() + \"/welinkhook/api/welinkim/v1/im-service/chat/group-chat\", \"robotName\", \"1,2,3\"));\r\n    Rules rules = new Rules();\r\n    String template = \"Apache SkyWalking Alarm: \\n %s.\";\r\n    WeLinkSettings setting1 = new WeLinkSettings(\"setting1\", AlarmHooksType.welink, true);\r\n    setting1.setWebhooks(webHooks);\r\n    setting1.setTextTemplate(template);\r\n    WeLinkSettings setting2 = new WeLinkSettings(\"setting2\", AlarmHooksType.welink, false);\r\n    setting2.setWebhooks(webHooks);\r\n    setting2.setTextTemplate(template);\r\n    rules.getWeLinkSettingsMap().put(setting1.getFormattedName(), setting1);\r\n    rules.getWeLinkSettingsMap().put(setting2.getFormattedName(), setting2);\r\n    AlarmRulesWatcher alarmRulesWatcher = new AlarmRulesWatcher(rules, null, null);\r\n    WeLinkHookCallback welinkHookCallback = new WeLinkHookCallback(alarmRulesWatcher);\r\n    List<AlarmMessage> alarmMessages = new ArrayList<>(2);\r\n    AlarmMessage alarmMessage = new AlarmMessage();\r\n    alarmMessage.setScopeId(DefaultScopeDefine.SERVICE);\r\n    alarmMessage.setRuleName(\"service_resp_time_rule\");\r\n    alarmMessage.setAlarmMessage(\"alarmMessage with [DefaultScopeDefine.All]\");\r\n    alarmMessage.getHooks().add(setting1.getFormattedName());\r\n    alarmMessages.add(alarmMessage);\r\n    AlarmMessage anotherAlarmMessage = new AlarmMessage();\r\n    anotherAlarmMessage.setRuleName(\"service_resp_time_rule_2\");\r\n    anotherAlarmMessage.setScopeId(DefaultScopeDefine.ENDPOINT);\r\n    anotherAlarmMessage.setAlarmMessage(\"anotherAlarmMessage with [DefaultScopeDefine.Endpoint]\");\r\n    anotherAlarmMessage.getHooks().add(setting2.getFormattedName());\r\n    alarmMessages.add(anotherAlarmMessage);\r\n    welinkHookCallback.doAlarm(alarmMessages);\r\n    Assertions.assertTrue(IS_SUCCESS.get());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\skywalking\\oap-server\\server-cluster-plugin\\cluster-consul-plugin\\src\\test\\java\\org\\apache\\skywalking\\oap\\server\\cluster\\plugin\\consul\\ClusterModuleConsulProviderFunctionalIT.java",
  "methodName" : "registerRemote",
  "sourceCode" : "@Test\r\npublic void registerRemote() throws Exception {\r\n    final String serviceName = \"register_remote\";\r\n    ModuleProvider provider = createProvider(serviceName);\r\n    Address selfAddress = new Address(\"127.0.0.1\", 1000, true);\r\n    RemoteInstance instance = new RemoteInstance(selfAddress);\r\n    ClusterCoordinator coordinator = getClusterCoordinator(provider);\r\n    ClusterMockWatcher watcher = new ClusterMockWatcher();\r\n    coordinator.registerWatcher(watcher);\r\n    coordinator.start();\r\n    coordinator.registerRemote(instance);\r\n    List<RemoteInstance> remoteInstances = notifiedRemoteNodes(watcher, 1);\r\n    assertEquals(1, remoteInstances.size());\r\n    assertEquals(1, queryRemoteNodes(provider, 1).size());\r\n    Address queryAddress = remoteInstances.get(0).getAddress();\r\n    assertEquals(selfAddress, queryAddress);\r\n    assertTrue(queryAddress.isSelf());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\skywalking\\oap-server\\server-cluster-plugin\\cluster-consul-plugin\\src\\test\\java\\org\\apache\\skywalking\\oap\\server\\cluster\\plugin\\consul\\ClusterModuleConsulProviderFunctionalIT.java",
  "methodName" : "registerRemoteOfInternal",
  "sourceCode" : "@Test\r\npublic void registerRemoteOfInternal() throws Exception {\r\n    final String serviceName = \"register_remote_internal\";\r\n    ModuleProvider provider = createProvider(serviceName, \"127.0.1.2\", 1001);\r\n    Address selfAddress = new Address(\"127.0.0.2\", 1002, true);\r\n    RemoteInstance instance = new RemoteInstance(selfAddress);\r\n    ClusterCoordinator coordinator = getClusterCoordinator(provider);\r\n    ClusterMockWatcher watcher = new ClusterMockWatcher();\r\n    coordinator.registerWatcher(watcher);\r\n    coordinator.start();\r\n    coordinator.registerRemote(instance);\r\n    List<RemoteInstance> remoteInstances = notifiedRemoteNodes(watcher, 1);\r\n    assertEquals(1, remoteInstances.size());\r\n    assertEquals(1, queryRemoteNodes(provider, 1).size());\r\n    Address queryAddress = remoteInstances.get(0).getAddress();\r\n    assertEquals(\"127.0.1.2\", queryAddress.getHost());\r\n    assertEquals(1001, queryAddress.getPort());\r\n    assertTrue(queryAddress.isSelf());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\skywalking\\oap-server\\server-cluster-plugin\\cluster-consul-plugin\\src\\test\\java\\org\\apache\\skywalking\\oap\\server\\cluster\\plugin\\consul\\ClusterModuleConsulProviderFunctionalIT.java",
  "methodName" : "registerRemoteOfReceiver",
  "sourceCode" : "@Test\r\npublic void registerRemoteOfReceiver() throws Exception {\r\n    final String serviceName = \"register_remote_receiver\";\r\n    ModuleProvider providerA = createProvider(serviceName);\r\n    ModuleProvider providerB = createProvider(serviceName);\r\n    ClusterCoordinator coordinatorA = getClusterCoordinator(providerA);\r\n    ClusterCoordinator coordinatorB = getClusterCoordinator(providerB);\r\n    ClusterMockWatcher watcherB = new ClusterMockWatcher();\r\n    coordinatorB.registerWatcher(watcherB);\r\n    coordinatorB.start();\r\n    // Mixed or Aggregator\r\n    Address selfAddress = new Address(\"127.0.0.3\", 1003, true);\r\n    RemoteInstance instance = new RemoteInstance(selfAddress);\r\n    coordinatorA.start();\r\n    coordinatorA.registerRemote(instance);\r\n    // Receiver\r\n    List<RemoteInstance> remoteInstances = notifiedRemoteNodes(watcherB, 1);\r\n    assertEquals(1, remoteInstances.size());\r\n    assertEquals(1, queryRemoteNodes(providerB, 1).size());\r\n    Address queryAddress = remoteInstances.get(0).getAddress();\r\n    assertEquals(selfAddress, queryAddress);\r\n    assertFalse(queryAddress.isSelf());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\skywalking\\oap-server\\server-cluster-plugin\\cluster-consul-plugin\\src\\test\\java\\org\\apache\\skywalking\\oap\\server\\cluster\\plugin\\consul\\ClusterModuleConsulProviderFunctionalIT.java",
  "methodName" : "registerRemoteOfCluster",
  "sourceCode" : "@Test\r\npublic void registerRemoteOfCluster() throws Exception {\r\n    final String serviceName = \"register_remote_cluster\";\r\n    ModuleProvider providerA = createProvider(serviceName);\r\n    ModuleProvider providerB = createProvider(serviceName);\r\n    ClusterCoordinator coordinatorA = getClusterCoordinator(providerA);\r\n    ClusterMockWatcher watcherA = new ClusterMockWatcher();\r\n    coordinatorA.registerWatcher(watcherA);\r\n    coordinatorA.start();\r\n    ClusterCoordinator coordinatorB = getClusterCoordinator(providerB);\r\n    ClusterMockWatcher watcherB = new ClusterMockWatcher();\r\n    coordinatorB.registerWatcher(watcherB);\r\n    coordinatorB.start();\r\n    Address addressA = new Address(\"127.0.0.4\", 1004, true);\r\n    Address addressB = new Address(\"127.0.0.5\", 1005, true);\r\n    RemoteInstance instanceA = new RemoteInstance(addressA);\r\n    RemoteInstance instanceB = new RemoteInstance(addressB);\r\n    coordinatorA.registerRemote(instanceA);\r\n    coordinatorB.registerRemote(instanceB);\r\n    List<RemoteInstance> remoteInstancesOfA = notifiedRemoteNodes(watcherA, 2);\r\n    validateServiceInstance(addressA, addressB, remoteInstancesOfA);\r\n    assertEquals(2, queryRemoteNodes(providerA, 2).size());\r\n    List<RemoteInstance> remoteInstancesOfB = notifiedRemoteNodes(watcherB, 2);\r\n    validateServiceInstance(addressB, addressA, remoteInstancesOfB);\r\n    assertEquals(2, queryRemoteNodes(providerB, 2).size());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\skywalking\\oap-server\\server-cluster-plugin\\cluster-consul-plugin\\src\\test\\java\\org\\apache\\skywalking\\oap\\server\\cluster\\plugin\\consul\\ClusterModuleConsulProviderFunctionalIT.java",
  "methodName" : "unregisterRemoteOfCluster",
  "sourceCode" : "@Test\r\npublic void unregisterRemoteOfCluster() throws Exception {\r\n    final String serviceName = \"unregister_remote_cluster\";\r\n    ModuleProvider providerA = createProvider(serviceName);\r\n    ModuleProvider providerB = createProvider(serviceName);\r\n    ClusterCoordinator coordinatorA = getClusterCoordinator(providerA);\r\n    ClusterMockWatcher watcherA = new ClusterMockWatcher();\r\n    coordinatorA.registerWatcher(watcherA);\r\n    coordinatorA.start();\r\n    ClusterCoordinator coordinatorB = getClusterCoordinator(providerB);\r\n    ClusterMockWatcher watcherB = new ClusterMockWatcher();\r\n    coordinatorB.registerWatcher(watcherB);\r\n    coordinatorB.start();\r\n    Address addressA = new Address(\"127.0.0.6\", 1006, true);\r\n    Address addressB = new Address(\"127.0.0.7\", 1007, true);\r\n    RemoteInstance instanceA = new RemoteInstance(addressA);\r\n    RemoteInstance instanceB = new RemoteInstance(addressB);\r\n    coordinatorA.registerRemote(instanceA);\r\n    coordinatorB.registerRemote(instanceB);\r\n    List<RemoteInstance> remoteInstancesOfA = notifiedRemoteNodes(watcherA, 2);\r\n    validateServiceInstance(addressA, addressB, remoteInstancesOfA);\r\n    assertEquals(2, queryRemoteNodes(providerA, 2).size());\r\n    List<RemoteInstance> remoteInstancesOfB = notifiedRemoteNodes(watcherB, 2);\r\n    validateServiceInstance(addressB, addressA, remoteInstancesOfB);\r\n    assertEquals(2, queryRemoteNodes(providerB, 2).size());\r\n    // unregister A\r\n    Consul client = Whitebox.getInternalState(providerA, \"client\");\r\n    AgentClient agentClient = client.agentClient();\r\n    agentClient.deregister(instanceA.getAddress().toString());\r\n    // only B\r\n    remoteInstancesOfB = notifiedRemoteNodes(watcherB, 1, 120);\r\n    assertEquals(1, remoteInstancesOfB.size());\r\n    assertEquals(1, queryRemoteNodes(providerB, 1).size());\r\n    Address address = remoteInstancesOfB.get(0).getAddress();\r\n    assertEquals(address, addressB);\r\n    assertTrue(addressB.isSelf());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\skywalking\\oap-server\\server-cluster-plugin\\cluster-consul-plugin\\src\\test\\java\\org\\apache\\skywalking\\oap\\server\\cluster\\plugin\\consul\\ClusterModuleConsulProviderTest.java",
  "methodName" : "name",
  "sourceCode" : "@Test\r\npublic void name() {\r\n    assertEquals(\"consul\", provider.name());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\skywalking\\oap-server\\server-cluster-plugin\\cluster-consul-plugin\\src\\test\\java\\org\\apache\\skywalking\\oap\\server\\cluster\\plugin\\consul\\ClusterModuleConsulProviderTest.java",
  "methodName" : "module",
  "sourceCode" : "@Test\r\npublic void module() {\r\n    assertEquals(ClusterModule.class, provider.module());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\skywalking\\oap-server\\server-cluster-plugin\\cluster-consul-plugin\\src\\test\\java\\org\\apache\\skywalking\\oap\\server\\cluster\\plugin\\consul\\ClusterModuleConsulProviderTest.java",
  "methodName" : "prepareWithNonHost",
  "sourceCode" : "@Test\r\npublic void prepareWithNonHost() throws Exception {\r\n    assertThrows(ModuleStartException.class, () -> provider.prepare());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\skywalking\\oap-server\\server-cluster-plugin\\cluster-consul-plugin\\src\\test\\java\\org\\apache\\skywalking\\oap\\server\\cluster\\plugin\\consul\\ClusterModuleConsulProviderTest.java",
  "methodName" : "prepare",
  "sourceCode" : "@Test\r\n@SuppressWarnings(\"unchecked\")\r\npublic void prepare() throws Exception {\r\n    ClusterModuleConsulConfig consulConfig = new ClusterModuleConsulConfig();\r\n    consulConfig.setHostPort(\"10.0.0.1:1000,10.0.0.2:1001\");\r\n    Whitebox.setInternalState(provider, \"config\", consulConfig);\r\n    Consul consulClient = mock(Consul.class);\r\n    Consul.Builder builder = mock(Consul.Builder.class);\r\n    when(builder.build()).thenReturn(consulClient);\r\n    try (MockedStatic<Consul> ignored = mockStatic(Consul.class)) {\r\n        when(Consul.builder()).thenReturn(builder);\r\n        when(builder.withConnectTimeoutMillis(anyLong())).thenReturn(builder);\r\n        when(builder.withMultipleHostAndPort(anyCollection(), anyLong())).thenReturn(builder);\r\n        provider.prepare();\r\n        ArgumentCaptor<Collection> addressCaptor = ArgumentCaptor.forClass(Collection.class);\r\n        ArgumentCaptor<Long> timeCaptor = ArgumentCaptor.forClass(long.class);\r\n        verify(builder).withMultipleHostAndPort(addressCaptor.capture(), timeCaptor.capture());\r\n        List<HostAndPort> address = (List<HostAndPort>) addressCaptor.getValue();\r\n        assertEquals(2, address.size());\r\n        assertEquals(Lists.newArrayList(HostAndPort.fromParts(\"10.0.0.1\", 1000), HostAndPort.fromParts(\"10.0.0.2\", 1001)), address);\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\skywalking\\oap-server\\server-cluster-plugin\\cluster-consul-plugin\\src\\test\\java\\org\\apache\\skywalking\\oap\\server\\cluster\\plugin\\consul\\ClusterModuleConsulProviderTest.java",
  "methodName" : "prepareSingle",
  "sourceCode" : "@Test\r\npublic void prepareSingle() throws Exception {\r\n    ClusterModuleConsulConfig consulConfig = new ClusterModuleConsulConfig();\r\n    consulConfig.setHostPort(\"10.0.0.1:1000\");\r\n    Whitebox.setInternalState(provider, \"config\", consulConfig);\r\n    Consul consulClient = mock(Consul.class);\r\n    Consul.Builder builder = mock(Consul.Builder.class);\r\n    when(builder.build()).thenReturn(consulClient);\r\n    try (MockedStatic<Consul> ignored = mockStatic(Consul.class)) {\r\n        when(Consul.builder()).thenReturn(builder);\r\n        when(builder.withConnectTimeoutMillis(anyLong())).thenReturn(builder);\r\n        when(builder.withHostAndPort(any())).thenReturn(builder);\r\n        provider.prepare();\r\n        ArgumentCaptor<HostAndPort> hostAndPortArgumentCaptor = ArgumentCaptor.forClass(HostAndPort.class);\r\n        verify(builder).withHostAndPort(hostAndPortArgumentCaptor.capture());\r\n        HostAndPort address = hostAndPortArgumentCaptor.getValue();\r\n        assertEquals(HostAndPort.fromParts(\"10.0.0.1\", 1000), address);\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\skywalking\\oap-server\\server-cluster-plugin\\cluster-consul-plugin\\src\\test\\java\\org\\apache\\skywalking\\oap\\server\\cluster\\plugin\\consul\\ClusterModuleConsulProviderTest.java",
  "methodName" : "start",
  "sourceCode" : "@Test\r\npublic void start() {\r\n    provider.start();\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\skywalking\\oap-server\\server-cluster-plugin\\cluster-consul-plugin\\src\\test\\java\\org\\apache\\skywalking\\oap\\server\\cluster\\plugin\\consul\\ClusterModuleConsulProviderTest.java",
  "methodName" : "notifyAfterCompleted",
  "sourceCode" : "@Test\r\npublic void notifyAfterCompleted() {\r\n    provider.notifyAfterCompleted();\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\skywalking\\oap-server\\server-cluster-plugin\\cluster-consul-plugin\\src\\test\\java\\org\\apache\\skywalking\\oap\\server\\cluster\\plugin\\consul\\ClusterModuleConsulProviderTest.java",
  "methodName" : "requiredModules",
  "sourceCode" : "@Test\r\npublic void requiredModules() {\r\n    String[] modules = provider.requiredModules();\r\n    assertArrayEquals(new String[] { CoreModule.NAME }, modules);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\skywalking\\oap-server\\server-cluster-plugin\\cluster-consul-plugin\\src\\test\\java\\org\\apache\\skywalking\\oap\\server\\cluster\\plugin\\consul\\ConsulCoordinatorTest.java",
  "methodName" : "queryRemoteNodesWithNonOrEmpty",
  "sourceCode" : "@Test\r\n@SuppressWarnings(\"unchecked\")\r\npublic void queryRemoteNodesWithNonOrEmpty() {\r\n    when(consulResponse.getResponse()).thenReturn(null, Collections.emptyList());\r\n    assertEquals(0, coordinator.queryRemoteNodes().size());\r\n    assertEquals(0, coordinator.queryRemoteNodes().size());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\skywalking\\oap-server\\server-cluster-plugin\\cluster-consul-plugin\\src\\test\\java\\org\\apache\\skywalking\\oap\\server\\cluster\\plugin\\consul\\ConsulCoordinatorTest.java",
  "methodName" : "queryRemoteNodes",
  "sourceCode" : "@Test\r\npublic void queryRemoteNodes() {\r\n    registerSelfRemote();\r\n    List<ServiceHealth> serviceHealths = mockHealth();\r\n    when(consulResponse.getResponse()).thenReturn(serviceHealths);\r\n    List<RemoteInstance> remoteInstances = coordinator.queryRemoteNodes();\r\n    assertEquals(2, remoteInstances.size());\r\n    RemoteInstance selfInstance = remoteInstances.get(0);\r\n    velidate(selfRemoteAddress, selfInstance);\r\n    RemoteInstance notSelfInstance = remoteInstances.get(1);\r\n    velidate(remoteAddress, notSelfInstance);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\skywalking\\oap-server\\server-cluster-plugin\\cluster-consul-plugin\\src\\test\\java\\org\\apache\\skywalking\\oap\\server\\cluster\\plugin\\consul\\ConsulCoordinatorTest.java",
  "methodName" : "queryRemoteNodesWithNullSelf",
  "sourceCode" : "@Test\r\npublic void queryRemoteNodesWithNullSelf() {\r\n    List<ServiceHealth> serviceHealths = mockHealth();\r\n    when(consulResponse.getResponse()).thenReturn(serviceHealths);\r\n    List<RemoteInstance> remoteInstances = coordinator.queryRemoteNodes();\r\n    // filter empty address\r\n    assertEquals(2, remoteInstances.size());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\skywalking\\oap-server\\server-cluster-plugin\\cluster-consul-plugin\\src\\test\\java\\org\\apache\\skywalking\\oap\\server\\cluster\\plugin\\consul\\ConsulCoordinatorTest.java",
  "methodName" : "registerRemote",
  "sourceCode" : "@Test\r\npublic void registerRemote() {\r\n    registerRemote(remoteAddress);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\skywalking\\oap-server\\server-cluster-plugin\\cluster-consul-plugin\\src\\test\\java\\org\\apache\\skywalking\\oap\\server\\cluster\\plugin\\consul\\ConsulCoordinatorTest.java",
  "methodName" : "registerSelfRemote",
  "sourceCode" : "@Test\r\npublic void registerSelfRemote() {\r\n    registerRemote(selfRemoteAddress);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\skywalking\\oap-server\\server-cluster-plugin\\cluster-consul-plugin\\src\\test\\java\\org\\apache\\skywalking\\oap\\server\\cluster\\plugin\\consul\\ConsulCoordinatorTest.java",
  "methodName" : "registerRemoteUsingInternal",
  "sourceCode" : "@Test\r\npublic void registerRemoteUsingInternal() {\r\n    consulConfig.setInternalComHost(internalAddress.getHost());\r\n    consulConfig.setInternalComPort(internalAddress.getPort());\r\n    registerRemote(internalAddress);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\skywalking\\oap-server\\server-cluster-plugin\\cluster-etcd-plugin\\src\\test\\java\\org\\apache\\skywalking\\oap\\server\\cluster\\plugin\\etcd\\ClusterEtcdPluginIT.java",
  "methodName" : "registerRemote",
  "sourceCode" : "@Test\r\npublic void registerRemote() throws Throwable {\r\n    registerRemote(remoteAddress);\r\n    clear();\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\skywalking\\oap-server\\server-cluster-plugin\\cluster-etcd-plugin\\src\\test\\java\\org\\apache\\skywalking\\oap\\server\\cluster\\plugin\\etcd\\ClusterEtcdPluginIT.java",
  "methodName" : "registerSelfRemote",
  "sourceCode" : "@Test\r\npublic void registerSelfRemote() throws Throwable {\r\n    registerRemote(selfRemoteAddress);\r\n    clear();\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\skywalking\\oap-server\\server-cluster-plugin\\cluster-etcd-plugin\\src\\test\\java\\org\\apache\\skywalking\\oap\\server\\cluster\\plugin\\etcd\\ClusterEtcdPluginIT.java",
  "methodName" : "registerRemoteUsingInternal",
  "sourceCode" : "@Test\r\npublic void registerRemoteUsingInternal() throws Throwable {\r\n    etcdConfig.setInternalComHost(internalAddress.getHost());\r\n    etcdConfig.setInternalComPort(internalAddress.getPort());\r\n    etcdConfig.setServiceName(SERVICE_NAME);\r\n    registerRemote(internalAddress);\r\n    clear();\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\skywalking\\oap-server\\server-cluster-plugin\\cluster-etcd-plugin\\src\\test\\java\\org\\apache\\skywalking\\oap\\server\\cluster\\plugin\\etcd\\ClusterEtcdPluginIT.java",
  "methodName" : "queryRemoteNodes",
  "sourceCode" : "@Test\r\npublic void queryRemoteNodes() throws Throwable {\r\n    registerRemote(selfRemoteAddress);\r\n    List<RemoteInstance> remoteInstances = coordinator.queryRemoteNodes();\r\n    assertEquals(1, remoteInstances.size());\r\n    RemoteInstance selfInstance = remoteInstances.get(0);\r\n    velidate(selfRemoteAddress, selfInstance);\r\n    clear();\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\skywalking\\oap-server\\server-cluster-plugin\\cluster-etcd-plugin\\src\\test\\java\\org\\apache\\skywalking\\oap\\server\\cluster\\plugin\\etcd\\ClusterModuleEtcdProviderFunctionalIT.java",
  "methodName" : "registerRemote",
  "sourceCode" : "@Test\r\npublic void registerRemote() throws Exception {\r\n    final String serviceName = \"register_remote\";\r\n    ModuleProvider provider = createProvider(serviceName);\r\n    Address selfAddress = new Address(\"127.0.0.1\", 1000, true);\r\n    RemoteInstance instance = new RemoteInstance(selfAddress);\r\n    ClusterCoordinator coordinator = getClusterCoordinator(provider);\r\n    ClusterMockWatcher watcher = new ClusterMockWatcher();\r\n    coordinator.registerWatcher(watcher);\r\n    coordinator.start();\r\n    coordinator.registerRemote(instance);\r\n    List<RemoteInstance> remoteInstances = notifiedRemoteNodes(watcher, 1);\r\n    assertEquals(1, remoteInstances.size());\r\n    assertEquals(1, queryRemoteNodes(provider, 1).size());\r\n    Address queryAddress = remoteInstances.get(0).getAddress();\r\n    assertEquals(selfAddress, queryAddress);\r\n    assertTrue(queryAddress.isSelf());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\skywalking\\oap-server\\server-cluster-plugin\\cluster-etcd-plugin\\src\\test\\java\\org\\apache\\skywalking\\oap\\server\\cluster\\plugin\\etcd\\ClusterModuleEtcdProviderFunctionalIT.java",
  "methodName" : "registerRemoteOfInternal",
  "sourceCode" : "@Test\r\npublic void registerRemoteOfInternal() throws Exception {\r\n    final String serviceName = \"register_remote_internal\";\r\n    ModuleProvider provider = createProvider(serviceName, \"127.0.1.2\", 1000);\r\n    Address selfAddress = new Address(\"127.0.0.2\", 1000, true);\r\n    RemoteInstance instance = new RemoteInstance(selfAddress);\r\n    ClusterCoordinator coordinator = getClusterCoordinator(provider);\r\n    ClusterMockWatcher watcher = new ClusterMockWatcher();\r\n    coordinator.registerWatcher(watcher);\r\n    coordinator.start();\r\n    coordinator.registerRemote(instance);\r\n    List<RemoteInstance> remoteInstances = notifiedRemoteNodes(watcher, 1);\r\n    assertEquals(1, remoteInstances.size());\r\n    assertEquals(1, queryRemoteNodes(provider, 1).size());\r\n    Address queryAddress = remoteInstances.get(0).getAddress();\r\n    assertEquals(\"127.0.1.2\", queryAddress.getHost());\r\n    assertEquals(1000, queryAddress.getPort());\r\n    assertTrue(queryAddress.isSelf());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\skywalking\\oap-server\\server-cluster-plugin\\cluster-etcd-plugin\\src\\test\\java\\org\\apache\\skywalking\\oap\\server\\cluster\\plugin\\etcd\\ClusterModuleEtcdProviderFunctionalIT.java",
  "methodName" : "registerRemoteOfReceiver",
  "sourceCode" : "@Test\r\npublic void registerRemoteOfReceiver() throws Exception {\r\n    final String serviceName = \"register_remote_receiver\";\r\n    ModuleProvider providerA = createProvider(serviceName);\r\n    ModuleProvider providerB = createProvider(serviceName);\r\n    ClusterCoordinator coordinatorA = getClusterCoordinator(providerA);\r\n    ClusterCoordinator coordinatorB = getClusterCoordinator(providerB);\r\n    ClusterMockWatcher watcherB = new ClusterMockWatcher();\r\n    coordinatorB.registerWatcher(watcherB);\r\n    coordinatorB.start();\r\n    // Mixed or Aggregator\r\n    Address selfAddress = new Address(\"127.0.0.3\", 1000, true);\r\n    RemoteInstance instance = new RemoteInstance(selfAddress);\r\n    coordinatorA.start();\r\n    coordinatorA.registerRemote(instance);\r\n    // Receiver\r\n    List<RemoteInstance> remoteInstances = notifiedRemoteNodes(watcherB, 1);\r\n    assertEquals(1, remoteInstances.size());\r\n    assertEquals(1, queryRemoteNodes(providerB, 1).size());\r\n    Address queryAddress = remoteInstances.get(0).getAddress();\r\n    assertEquals(selfAddress, queryAddress);\r\n    assertFalse(queryAddress.isSelf());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\skywalking\\oap-server\\server-cluster-plugin\\cluster-etcd-plugin\\src\\test\\java\\org\\apache\\skywalking\\oap\\server\\cluster\\plugin\\etcd\\ClusterModuleEtcdProviderFunctionalIT.java",
  "methodName" : "registerRemoteOfCluster",
  "sourceCode" : "@Test\r\npublic void registerRemoteOfCluster() throws Exception {\r\n    final String serviceName = \"register_remote_cluster\";\r\n    ModuleProvider providerA = createProvider(serviceName);\r\n    ModuleProvider providerB = createProvider(serviceName);\r\n    ClusterCoordinator coordinatorA = getClusterCoordinator(providerA);\r\n    ClusterMockWatcher watcherA = new ClusterMockWatcher();\r\n    coordinatorA.registerWatcher(watcherA);\r\n    coordinatorA.start();\r\n    ClusterCoordinator coordinatorB = getClusterCoordinator(providerB);\r\n    ClusterMockWatcher watcherB = new ClusterMockWatcher();\r\n    coordinatorB.registerWatcher(watcherB);\r\n    coordinatorB.start();\r\n    Address addressA = new Address(\"127.0.0.4\", 1000, true);\r\n    Address addressB = new Address(\"127.0.0.5\", 1000, true);\r\n    RemoteInstance instanceA = new RemoteInstance(addressA);\r\n    RemoteInstance instanceB = new RemoteInstance(addressB);\r\n    coordinatorA.registerRemote(instanceA);\r\n    coordinatorB.registerRemote(instanceB);\r\n    List<RemoteInstance> remoteInstancesOfA = notifiedRemoteNodes(watcherA, 2);\r\n    validateServiceInstance(addressA, addressB, remoteInstancesOfA);\r\n    assertEquals(2, queryRemoteNodes(providerA, 2).size());\r\n    List<RemoteInstance> remoteInstancesOfB = notifiedRemoteNodes(watcherB, 2);\r\n    validateServiceInstance(addressB, addressA, remoteInstancesOfB);\r\n    assertEquals(2, queryRemoteNodes(providerB, 2).size());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\skywalking\\oap-server\\server-cluster-plugin\\cluster-etcd-plugin\\src\\test\\java\\org\\apache\\skywalking\\oap\\server\\cluster\\plugin\\etcd\\ClusterModuleEtcdProviderFunctionalIT.java",
  "methodName" : "unregisterRemoteOfCluster",
  "sourceCode" : "@Test\r\npublic void unregisterRemoteOfCluster() throws Exception {\r\n    final String serviceName = \"unregister_remote_cluster\";\r\n    ModuleProvider providerA = createProvider(serviceName);\r\n    ModuleProvider providerB = createProvider(serviceName);\r\n    ClusterCoordinator coordinatorA = getClusterCoordinator(providerA);\r\n    ClusterMockWatcher watcherA = new ClusterMockWatcher();\r\n    coordinatorA.registerWatcher(watcherA);\r\n    coordinatorA.start();\r\n    ClusterCoordinator coordinatorB = getClusterCoordinator(providerB);\r\n    ClusterMockWatcher watcherB = new ClusterMockWatcher();\r\n    coordinatorB.registerWatcher(watcherB);\r\n    coordinatorB.start();\r\n    Address addressA = new Address(\"127.0.0.4\", 1000, true);\r\n    Address addressB = new Address(\"127.0.0.5\", 1000, true);\r\n    RemoteInstance instanceA = new RemoteInstance(addressA);\r\n    RemoteInstance instanceB = new RemoteInstance(addressB);\r\n    coordinatorA.registerRemote(instanceA);\r\n    coordinatorB.registerRemote(instanceB);\r\n    List<RemoteInstance> remoteInstancesOfA = notifiedRemoteNodes(watcherA, 2);\r\n    validateServiceInstance(addressA, addressB, remoteInstancesOfA);\r\n    assertEquals(2, queryRemoteNodes(providerA, 2).size());\r\n    List<RemoteInstance> remoteInstancesOfB = notifiedRemoteNodes(watcherB, 2);\r\n    validateServiceInstance(addressB, addressA, remoteInstancesOfB);\r\n    assertEquals(2, queryRemoteNodes(providerB, 2).size());\r\n    // unregister A\r\n    Client client = Whitebox.getInternalState(coordinatorA, \"client\");\r\n    client.close();\r\n    // only B\r\n    remoteInstancesOfB = notifiedRemoteNodes(watcherB, 1, 120);\r\n    assertEquals(1, remoteInstancesOfB.size());\r\n    assertEquals(1, queryRemoteNodes(providerB, 1).size());\r\n    Address address = remoteInstancesOfB.get(0).getAddress();\r\n    assertEquals(address, addressB);\r\n    assertTrue(addressB.isSelf());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\skywalking\\oap-server\\server-cluster-plugin\\cluster-kubernetes-plugin\\src\\test\\java\\org\\apache\\skywalking\\oap\\server\\cluster\\plugin\\kubernetes\\ClusterModuleKubernetesProviderTest.java",
  "methodName" : "name",
  "sourceCode" : "@Test\r\npublic void name() {\r\n    assertEquals(\"kubernetes\", provider.name());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\skywalking\\oap-server\\server-cluster-plugin\\cluster-kubernetes-plugin\\src\\test\\java\\org\\apache\\skywalking\\oap\\server\\cluster\\plugin\\kubernetes\\ClusterModuleKubernetesProviderTest.java",
  "methodName" : "module",
  "sourceCode" : "@Test\r\npublic void module() {\r\n    assertEquals(ClusterModule.class, provider.module());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\skywalking\\oap-server\\server-cluster-plugin\\cluster-kubernetes-plugin\\src\\test\\java\\org\\apache\\skywalking\\oap\\server\\cluster\\plugin\\kubernetes\\ClusterModuleKubernetesProviderTest.java",
  "methodName" : "prepare",
  "sourceCode" : "@Test\r\npublic void prepare() {\r\n    provider.prepare();\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\skywalking\\oap-server\\server-cluster-plugin\\cluster-kubernetes-plugin\\src\\test\\java\\org\\apache\\skywalking\\oap\\server\\cluster\\plugin\\kubernetes\\ClusterModuleKubernetesProviderTest.java",
  "methodName" : "notifyAfterCompleted",
  "sourceCode" : "@Test\r\npublic void notifyAfterCompleted() {\r\n    provider.notifyAfterCompleted();\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\skywalking\\oap-server\\server-cluster-plugin\\cluster-kubernetes-plugin\\src\\test\\java\\org\\apache\\skywalking\\oap\\server\\cluster\\plugin\\kubernetes\\ClusterModuleKubernetesProviderTest.java",
  "methodName" : "requiredModules",
  "sourceCode" : "@Test\r\npublic void requiredModules() {\r\n    String[] modules = provider.requiredModules();\r\n    assertArrayEquals(new String[] { CoreModule.NAME }, modules);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\skywalking\\oap-server\\server-cluster-plugin\\cluster-nacos-plugin\\src\\test\\java\\org\\apache\\skywalking\\oap\\server\\cluster\\plugin\\nacos\\ClusterModuleNacosProviderFunctionalIT.java",
  "methodName" : "registerRemote",
  "sourceCode" : "@Test\r\npublic void registerRemote() throws Exception {\r\n    final String serviceName = \"register_remote\";\r\n    ModuleProvider provider = createProvider(serviceName);\r\n    Address selfAddress = new Address(\"127.0.0.1\", 1000, true);\r\n    RemoteInstance instance = new RemoteInstance(selfAddress);\r\n    ClusterCoordinator coordinator = getClusterCoordinator(provider);\r\n    ClusterMockWatcher watcher = new ClusterMockWatcher();\r\n    coordinator.registerWatcher(watcher);\r\n    coordinator.start();\r\n    coordinator.registerRemote(instance);\r\n    List<RemoteInstance> remoteInstances = notifiedRemoteNodes(watcher, 1);\r\n    assertEquals(1, remoteInstances.size());\r\n    assertEquals(1, queryRemoteNodes(provider, 1).size());\r\n    Address queryAddress = remoteInstances.get(0).getAddress();\r\n    assertEquals(selfAddress, queryAddress);\r\n    assertTrue(queryAddress.isSelf());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\skywalking\\oap-server\\server-cluster-plugin\\cluster-nacos-plugin\\src\\test\\java\\org\\apache\\skywalking\\oap\\server\\cluster\\plugin\\nacos\\ClusterModuleNacosProviderFunctionalIT.java",
  "methodName" : "registerRemoteOfInternal",
  "sourceCode" : "@Test\r\npublic void registerRemoteOfInternal() throws Exception {\r\n    final String serviceName = \"register_remote_internal\";\r\n    ModuleProvider provider = createProvider(serviceName, \"127.0.1.2\", 1000);\r\n    Address selfAddress = new Address(\"127.0.0.2\", 1000, true);\r\n    RemoteInstance instance = new RemoteInstance(selfAddress);\r\n    ClusterCoordinator coordinator = getClusterCoordinator(provider);\r\n    ClusterMockWatcher watcher = new ClusterMockWatcher();\r\n    coordinator.registerWatcher(watcher);\r\n    coordinator.start();\r\n    coordinator.registerRemote(instance);\r\n    List<RemoteInstance> remoteInstances = notifiedRemoteNodes(watcher, 1);\r\n    assertEquals(1, remoteInstances.size());\r\n    assertEquals(1, queryRemoteNodes(provider, 1).size());\r\n    Address queryAddress = remoteInstances.get(0).getAddress();\r\n    assertEquals(\"127.0.1.2\", queryAddress.getHost());\r\n    assertEquals(1000, queryAddress.getPort());\r\n    assertTrue(queryAddress.isSelf());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\skywalking\\oap-server\\server-cluster-plugin\\cluster-nacos-plugin\\src\\test\\java\\org\\apache\\skywalking\\oap\\server\\cluster\\plugin\\nacos\\ClusterModuleNacosProviderFunctionalIT.java",
  "methodName" : "registerRemoteOfReceiver",
  "sourceCode" : "@Test\r\npublic void registerRemoteOfReceiver() throws Exception {\r\n    final String serviceName = \"register_remote_receiver\";\r\n    ModuleProvider providerA = createProvider(serviceName);\r\n    ModuleProvider providerB = createProvider(serviceName);\r\n    ClusterCoordinator coordinatorA = getClusterCoordinator(providerA);\r\n    ClusterCoordinator coordinatorB = getClusterCoordinator(providerB);\r\n    ClusterMockWatcher watcherB = new ClusterMockWatcher();\r\n    coordinatorB.registerWatcher(watcherB);\r\n    coordinatorB.start();\r\n    // Mixed or Aggregator\r\n    Address selfAddress = new Address(\"127.0.0.3\", 1000, true);\r\n    RemoteInstance instance = new RemoteInstance(selfAddress);\r\n    coordinatorA.start();\r\n    coordinatorA.registerRemote(instance);\r\n    // Receiver\r\n    List<RemoteInstance> remoteInstances = notifiedRemoteNodes(watcherB, 1);\r\n    assertEquals(1, remoteInstances.size());\r\n    assertEquals(1, queryRemoteNodes(providerB, 1).size());\r\n    Address queryAddress = remoteInstances.get(0).getAddress();\r\n    assertEquals(selfAddress, queryAddress);\r\n    assertFalse(queryAddress.isSelf());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\skywalking\\oap-server\\server-cluster-plugin\\cluster-nacos-plugin\\src\\test\\java\\org\\apache\\skywalking\\oap\\server\\cluster\\plugin\\nacos\\ClusterModuleNacosProviderFunctionalIT.java",
  "methodName" : "registerRemoteOfCluster",
  "sourceCode" : "@Test\r\npublic void registerRemoteOfCluster() throws Exception {\r\n    final String serviceName = \"register_remote_cluster\";\r\n    ModuleProvider providerA = createProvider(serviceName);\r\n    ModuleProvider providerB = createProvider(serviceName);\r\n    ClusterCoordinator coordinatorA = getClusterCoordinator(providerA);\r\n    ClusterMockWatcher watcherA = new ClusterMockWatcher();\r\n    coordinatorA.registerWatcher(watcherA);\r\n    coordinatorA.start();\r\n    ClusterCoordinator coordinatorB = getClusterCoordinator(providerB);\r\n    ClusterMockWatcher watcherB = new ClusterMockWatcher();\r\n    coordinatorB.registerWatcher(watcherB);\r\n    coordinatorB.start();\r\n    Address addressA = new Address(\"127.0.0.4\", 1000, true);\r\n    Address addressB = new Address(\"127.0.0.5\", 1000, true);\r\n    RemoteInstance instanceA = new RemoteInstance(addressA);\r\n    RemoteInstance instanceB = new RemoteInstance(addressB);\r\n    coordinatorA.registerRemote(instanceA);\r\n    coordinatorB.registerRemote(instanceB);\r\n    List<RemoteInstance> remoteInstancesOfA = notifiedRemoteNodes(watcherA, 2);\r\n    validateServiceInstance(addressA, addressB, remoteInstancesOfA);\r\n    assertEquals(2, queryRemoteNodes(providerA, 2).size());\r\n    List<RemoteInstance> remoteInstancesOfB = notifiedRemoteNodes(watcherB, 2);\r\n    validateServiceInstance(addressB, addressA, remoteInstancesOfB);\r\n    assertEquals(2, queryRemoteNodes(providerB, 2).size());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\skywalking\\oap-server\\server-cluster-plugin\\cluster-nacos-plugin\\src\\test\\java\\org\\apache\\skywalking\\oap\\server\\cluster\\plugin\\nacos\\ClusterModuleNacosProviderFunctionalIT.java",
  "methodName" : "deregisterRemoteOfCluster",
  "sourceCode" : "@Test\r\npublic void deregisterRemoteOfCluster() throws Exception {\r\n    final String serviceName = \"deregister_remote_cluster\";\r\n    ModuleProvider providerA = createProvider(serviceName);\r\n    ModuleProvider providerB = createProvider(serviceName);\r\n    ClusterCoordinator coordinatorA = getClusterCoordinator(providerA);\r\n    ClusterMockWatcher watcherA = new ClusterMockWatcher();\r\n    coordinatorA.registerWatcher(watcherA);\r\n    coordinatorA.start();\r\n    ClusterCoordinator coordinatorB = getClusterCoordinator(providerB);\r\n    ClusterMockWatcher watcherB = new ClusterMockWatcher();\r\n    coordinatorB.registerWatcher(watcherB);\r\n    coordinatorB.start();\r\n    Address addressA = new Address(\"127.0.0.6\", 1000, true);\r\n    Address addressB = new Address(\"127.0.0.7\", 1000, true);\r\n    RemoteInstance instanceA = new RemoteInstance(addressA);\r\n    RemoteInstance instanceB = new RemoteInstance(addressB);\r\n    coordinatorA.registerRemote(instanceA);\r\n    coordinatorB.registerRemote(instanceB);\r\n    List<RemoteInstance> remoteInstancesOfA = notifiedRemoteNodes(watcherA, 2);\r\n    validateServiceInstance(addressA, addressB, remoteInstancesOfA);\r\n    assertEquals(2, queryRemoteNodes(providerA, 2).size());\r\n    List<RemoteInstance> remoteInstancesOfB = notifiedRemoteNodes(watcherB, 2);\r\n    validateServiceInstance(addressB, addressA, remoteInstancesOfB);\r\n    assertEquals(2, queryRemoteNodes(providerB, 2).size());\r\n    // deregister A\r\n    NamingService namingServiceA = Whitebox.getInternalState(coordinatorA, \"namingService\");\r\n    namingServiceA.deregisterInstance(serviceName, addressA.getHost(), addressA.getPort());\r\n    // only B\r\n    remoteInstancesOfB = notifiedRemoteNodes(watcherB, 1);\r\n    assertEquals(1, remoteInstancesOfB.size());\r\n    assertEquals(1, queryRemoteNodes(providerB, 1).size());\r\n    Address address = remoteInstancesOfB.get(0).getAddress();\r\n    assertEquals(addressB, address);\r\n    assertTrue(address.isSelf());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\skywalking\\oap-server\\server-cluster-plugin\\cluster-nacos-plugin\\src\\test\\java\\org\\apache\\skywalking\\oap\\server\\cluster\\plugin\\nacos\\NacosCoordinatorTest.java",
  "methodName" : "queryRemoteNodesWithNonOrEmpty",
  "sourceCode" : "@Test\r\n@SuppressWarnings(\"unchecked\")\r\npublic void queryRemoteNodesWithNonOrEmpty() throws NacosException {\r\n    when(namingService.selectInstances(anyString(), anyBoolean())).thenReturn(null, Collections.emptyList());\r\n    assertEquals(0, coordinator.queryRemoteNodes().size());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\skywalking\\oap-server\\server-cluster-plugin\\cluster-nacos-plugin\\src\\test\\java\\org\\apache\\skywalking\\oap\\server\\cluster\\plugin\\nacos\\NacosCoordinatorTest.java",
  "methodName" : "queryRemoteNodes",
  "sourceCode" : "@Test\r\npublic void queryRemoteNodes() throws NacosException {\r\n    registerSelfRemote();\r\n    List<Instance> instances = mockInstance();\r\n    when(namingService.selectInstances(anyString(), anyBoolean())).thenReturn(instances);\r\n    List<RemoteInstance> remoteInstances = coordinator.queryRemoteNodes();\r\n    assertEquals(2, remoteInstances.size());\r\n    RemoteInstance selfInstance = remoteInstances.get(0);\r\n    validate(selfRemoteAddress, selfInstance);\r\n    RemoteInstance notSelfInstance = remoteInstances.get(1);\r\n    validate(remoteAddress, notSelfInstance);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\skywalking\\oap-server\\server-cluster-plugin\\cluster-nacos-plugin\\src\\test\\java\\org\\apache\\skywalking\\oap\\server\\cluster\\plugin\\nacos\\NacosCoordinatorTest.java",
  "methodName" : "queryRemoteNodesWithNullSelf",
  "sourceCode" : "@Test\r\npublic void queryRemoteNodesWithNullSelf() throws NacosException {\r\n    List<Instance> instances = mockInstance();\r\n    when(namingService.selectInstances(anyString(), anyBoolean())).thenReturn(instances);\r\n    List<RemoteInstance> remoteInstances = coordinator.queryRemoteNodes();\r\n    assertEquals(remoteInstances.size(), instances.size());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\skywalking\\oap-server\\server-cluster-plugin\\cluster-nacos-plugin\\src\\test\\java\\org\\apache\\skywalking\\oap\\server\\cluster\\plugin\\nacos\\NacosCoordinatorTest.java",
  "methodName" : "registerRemote",
  "sourceCode" : "@Test\r\npublic void registerRemote() throws NacosException {\r\n    registerRemote(remoteAddress);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\skywalking\\oap-server\\server-cluster-plugin\\cluster-nacos-plugin\\src\\test\\java\\org\\apache\\skywalking\\oap\\server\\cluster\\plugin\\nacos\\NacosCoordinatorTest.java",
  "methodName" : "registerSelfRemote",
  "sourceCode" : "@Test\r\npublic void registerSelfRemote() throws NacosException {\r\n    registerRemote(selfRemoteAddress);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\skywalking\\oap-server\\server-cluster-plugin\\cluster-nacos-plugin\\src\\test\\java\\org\\apache\\skywalking\\oap\\server\\cluster\\plugin\\nacos\\NacosCoordinatorTest.java",
  "methodName" : "registerRemoteUsingInternal",
  "sourceCode" : "@Test\r\npublic void registerRemoteUsingInternal() throws NacosException {\r\n    nacosConfig.setInternalComHost(internalAddress.getHost());\r\n    nacosConfig.setInternalComPort(internalAddress.getPort());\r\n    registerRemote(internalAddress);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\skywalking\\oap-server\\server-cluster-plugin\\cluster-standalone-plugin\\src\\test\\java\\org\\apache\\skywalking\\oap\\server\\cluster\\plugin\\standalone\\StandaloneManagerTest.java",
  "methodName" : "test",
  "sourceCode" : "@Test\r\npublic void test() {\r\n    StandaloneManager standaloneManager = new StandaloneManager();\r\n    RemoteInstance remote1 = new RemoteInstance(new Address(\"A\", 100, true));\r\n    RemoteInstance remote2 = new RemoteInstance(new Address(\"B\", 100, false));\r\n    standaloneManager.registerRemote(remote1);\r\n    Assertions.assertEquals(remote1, standaloneManager.queryRemoteNodes().get(0));\r\n    standaloneManager.registerRemote(remote2);\r\n    Assertions.assertEquals(remote2, standaloneManager.queryRemoteNodes().get(0));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\skywalking\\oap-server\\server-cluster-plugin\\cluster-zookeeper-plugin\\src\\test\\java\\org\\apache\\skywalking\\oap\\server\\cluster\\plugin\\zookeeper\\ClusterModuleZookeeperProviderFunctionalIT.java",
  "methodName" : "registerRemote",
  "sourceCode" : "@Test\r\npublic void registerRemote() throws Exception {\r\n    final String namespace = \"register_remote\";\r\n    ModuleProvider provider = createProvider(namespace);\r\n    Address selfAddress = new Address(\"127.0.0.1\", 1000, true);\r\n    RemoteInstance instance = new RemoteInstance(selfAddress);\r\n    ClusterCoordinator coordinator = getClusterCoordinator(provider);\r\n    ClusterMockWatcher watcher = new ClusterMockWatcher();\r\n    coordinator.registerWatcher(watcher);\r\n    coordinator.start();\r\n    coordinator.registerRemote(instance);\r\n    List<RemoteInstance> remoteInstances = notifiedRemoteNodes(watcher, 1);\r\n    assertEquals(1, remoteInstances.size());\r\n    assertEquals(1, queryRemoteNodes(provider, 1).size());\r\n    Address queryAddress = remoteInstances.get(0).getAddress();\r\n    assertEquals(selfAddress, queryAddress);\r\n    assertTrue(queryAddress.isSelf());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\skywalking\\oap-server\\server-cluster-plugin\\cluster-zookeeper-plugin\\src\\test\\java\\org\\apache\\skywalking\\oap\\server\\cluster\\plugin\\zookeeper\\ClusterModuleZookeeperProviderFunctionalIT.java",
  "methodName" : "registerRemoteOfInternal",
  "sourceCode" : "@Test\r\npublic void registerRemoteOfInternal() throws Exception {\r\n    final String namespace = \"register_remote_internal\";\r\n    ModuleProvider provider = createProvider(namespace, \"127.0.1.2\", 1000);\r\n    Address selfAddress = new Address(\"127.0.0.2\", 1000, true);\r\n    RemoteInstance instance = new RemoteInstance(selfAddress);\r\n    ClusterCoordinator coordinator = getClusterCoordinator(provider);\r\n    ClusterMockWatcher watcher = new ClusterMockWatcher();\r\n    coordinator.registerWatcher(watcher);\r\n    coordinator.start();\r\n    coordinator.registerRemote(instance);\r\n    List<RemoteInstance> remoteInstances = notifiedRemoteNodes(watcher, 1);\r\n    assertEquals(1, remoteInstances.size());\r\n    assertEquals(1, queryRemoteNodes(provider, 1).size());\r\n    assertEquals(1, remoteInstances.size());\r\n    Address queryAddress = remoteInstances.get(0).getAddress();\r\n    assertEquals(\"127.0.1.2\", queryAddress.getHost());\r\n    assertEquals(1000, queryAddress.getPort());\r\n    assertTrue(queryAddress.isSelf());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\skywalking\\oap-server\\server-cluster-plugin\\cluster-zookeeper-plugin\\src\\test\\java\\org\\apache\\skywalking\\oap\\server\\cluster\\plugin\\zookeeper\\ClusterModuleZookeeperProviderFunctionalIT.java",
  "methodName" : "registerRemoteOfReceiver",
  "sourceCode" : "@Test\r\npublic void registerRemoteOfReceiver() throws Exception {\r\n    final String namespace = \"register_remote_receiver\";\r\n    ModuleProvider providerA = createProvider(namespace);\r\n    ModuleProvider providerB = createProvider(namespace);\r\n    ClusterCoordinator coordinatorA = getClusterCoordinator(providerA);\r\n    ClusterCoordinator coordinatorB = getClusterCoordinator(providerB);\r\n    ClusterMockWatcher watcherB = new ClusterMockWatcher();\r\n    coordinatorB.registerWatcher(watcherB);\r\n    coordinatorB.start();\r\n    // Mixed or Aggregator\r\n    Address selfAddress = new Address(\"127.0.0.3\", 1000, true);\r\n    RemoteInstance instance = new RemoteInstance(selfAddress);\r\n    coordinatorA.start();\r\n    coordinatorA.registerRemote(instance);\r\n    // Receiver\r\n    List<RemoteInstance> remoteInstances = notifiedRemoteNodes(watcherB, 1);\r\n    assertEquals(1, remoteInstances.size());\r\n    assertEquals(1, queryRemoteNodes(providerB, 1).size());\r\n    Address queryAddress = remoteInstances.get(0).getAddress();\r\n    assertEquals(selfAddress, queryAddress);\r\n    assertFalse(queryAddress.isSelf());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\skywalking\\oap-server\\server-cluster-plugin\\cluster-zookeeper-plugin\\src\\test\\java\\org\\apache\\skywalking\\oap\\server\\cluster\\plugin\\zookeeper\\ClusterModuleZookeeperProviderFunctionalIT.java",
  "methodName" : "registerRemoteOfCluster",
  "sourceCode" : "@Test\r\npublic void registerRemoteOfCluster() throws Exception {\r\n    final String namespace = \"register_remote_cluster\";\r\n    ModuleProvider providerA = createProvider(namespace);\r\n    ModuleProvider providerB = createProvider(namespace);\r\n    ClusterCoordinator coordinatorA = getClusterCoordinator(providerA);\r\n    ClusterMockWatcher watcherA = new ClusterMockWatcher();\r\n    coordinatorA.registerWatcher(watcherA);\r\n    coordinatorA.start();\r\n    ClusterCoordinator coordinatorB = getClusterCoordinator(providerB);\r\n    ClusterMockWatcher watcherB = new ClusterMockWatcher();\r\n    coordinatorB.registerWatcher(watcherB);\r\n    coordinatorB.start();\r\n    Address addressA = new Address(\"127.0.0.4\", 1000, true);\r\n    Address addressB = new Address(\"127.0.0.5\", 1000, true);\r\n    RemoteInstance instanceA = new RemoteInstance(addressA);\r\n    RemoteInstance instanceB = new RemoteInstance(addressB);\r\n    coordinatorA.registerRemote(instanceA);\r\n    coordinatorB.registerRemote(instanceB);\r\n    List<RemoteInstance> remoteInstancesOfA = notifiedRemoteNodes(watcherA, 2);\r\n    validateServiceInstance(addressA, addressB, remoteInstancesOfA);\r\n    assertEquals(2, queryRemoteNodes(providerA, 2).size());\r\n    List<RemoteInstance> remoteInstancesOfB = notifiedRemoteNodes(watcherB, 2);\r\n    validateServiceInstance(addressB, addressA, remoteInstancesOfB);\r\n    assertEquals(2, queryRemoteNodes(providerB, 2).size());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\skywalking\\oap-server\\server-cluster-plugin\\cluster-zookeeper-plugin\\src\\test\\java\\org\\apache\\skywalking\\oap\\server\\cluster\\plugin\\zookeeper\\ClusterModuleZookeeperProviderFunctionalIT.java",
  "methodName" : "unregisterRemoteOfCluster",
  "sourceCode" : "@Test\r\npublic void unregisterRemoteOfCluster() throws Exception {\r\n    final String namespace = \"unregister_remote_cluster\";\r\n    ModuleProvider providerA = createProvider(namespace);\r\n    ModuleProvider providerB = createProvider(namespace);\r\n    ClusterCoordinator coordinatorA = getClusterCoordinator(providerA);\r\n    ClusterMockWatcher watcherA = new ClusterMockWatcher();\r\n    coordinatorA.registerWatcher(watcherA);\r\n    coordinatorA.start();\r\n    ClusterCoordinator coordinatorB = getClusterCoordinator(providerB);\r\n    ClusterMockWatcher watcherB = new ClusterMockWatcher();\r\n    coordinatorB.registerWatcher(watcherB);\r\n    coordinatorB.start();\r\n    Address addressA = new Address(\"127.0.0.4\", 1000, true);\r\n    Address addressB = new Address(\"127.0.0.5\", 1000, true);\r\n    RemoteInstance instanceA = new RemoteInstance(addressA);\r\n    RemoteInstance instanceB = new RemoteInstance(addressB);\r\n    coordinatorA.registerRemote(instanceA);\r\n    coordinatorB.registerRemote(instanceB);\r\n    List<RemoteInstance> remoteInstancesOfA = notifiedRemoteNodes(watcherA, 2);\r\n    validateServiceInstance(addressA, addressB, remoteInstancesOfA);\r\n    assertEquals(2, queryRemoteNodes(providerA, 2).size());\r\n    List<RemoteInstance> remoteInstancesOfB = notifiedRemoteNodes(watcherB, 2);\r\n    validateServiceInstance(addressB, addressA, remoteInstancesOfB);\r\n    assertEquals(2, queryRemoteNodes(providerB, 2).size());\r\n    // unregister A\r\n    ServiceDiscovery<RemoteInstance> discoveryA = Whitebox.getInternalState(providerA, \"serviceDiscovery\");\r\n    discoveryA.close();\r\n    // only B\r\n    remoteInstancesOfB = notifiedRemoteNodes(watcherB, 1);\r\n    assertEquals(1, remoteInstancesOfB.size());\r\n    assertEquals(1, queryRemoteNodes(providerB, 1).size());\r\n    Address address = remoteInstancesOfB.get(0).getAddress();\r\n    assertEquals(addressB, address);\r\n    assertTrue(address.isSelf());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\skywalking\\oap-server\\server-cluster-plugin\\cluster-zookeeper-plugin\\src\\test\\java\\org\\apache\\skywalking\\oap\\server\\cluster\\plugin\\zookeeper\\NodeNameBuilderTest.java",
  "methodName" : "build",
  "sourceCode" : "@Test\r\npublic void build() {\r\n    String moduleName = \"my-module\";\r\n    String providerName = \"my-provider-name\";\r\n    String nodeName = NodeNameBuilder.build(moduleName, providerName);\r\n    assertEquals(moduleName + \"/\" + providerName, nodeName);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\skywalking\\oap-server\\server-cluster-plugin\\cluster-zookeeper-plugin\\src\\test\\java\\org\\apache\\skywalking\\oap\\server\\cluster\\plugin\\zookeeper\\ZookeeperCoordinatorTest.java",
  "methodName" : "registerRemote",
  "sourceCode" : "@Test\r\npublic void registerRemote() throws Exception {\r\n    config.setInternalComHost(selfAddress.getHost());\r\n    config.setInternalComPort(selfAddress.getPort());\r\n    RemoteInstance instance = new RemoteInstance(address);\r\n    coordinator.registerRemote(instance);\r\n    validateServiceInstance(selfAddress, new RemoteInstance(selfAddress));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\skywalking\\oap-server\\server-cluster-plugin\\cluster-zookeeper-plugin\\src\\test\\java\\org\\apache\\skywalking\\oap\\server\\cluster\\plugin\\zookeeper\\ZookeeperCoordinatorTest.java",
  "methodName" : "registerRemoteNoNeedInternal",
  "sourceCode" : "@Test\r\npublic void registerRemoteNoNeedInternal() throws Exception {\r\n    RemoteInstance instance = new RemoteInstance(address);\r\n    coordinator.registerRemote(instance);\r\n    validateServiceInstance(address, instance);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\skywalking\\oap-server\\server-cluster-plugin\\cluster-zookeeper-plugin\\src\\test\\java\\org\\apache\\skywalking\\oap\\server\\cluster\\plugin\\zookeeper\\ZookeeperCoordinatorTest.java",
  "methodName" : "queryRemoteNodes",
  "sourceCode" : "@Test\r\npublic void queryRemoteNodes() {\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\skywalking\\oap-server\\server-configuration\\configuration-api\\src\\test\\java\\org\\apache\\skywalking\\oap\\server\\configuration\\api\\FetchingConfigWatcherRegisterTest.java",
  "methodName" : "testInit",
  "sourceCode" : "@Test\r\npublic void testInit() {\r\n    final String[] newValue = new String[1];\r\n    register.registerConfigChangeWatcher(new ConfigChangeWatcher(\"MockModule\", new MockProvider(), \"prop2\") {\r\n\r\n        @Override\r\n        public void notify(ConfigChangeEvent value) {\r\n            newValue[0] = value.getNewValue();\r\n        }\r\n\r\n        @Override\r\n        public String value() {\r\n            return null;\r\n        }\r\n    });\r\n    register.configSync();\r\n    assertEquals(\"abc2\", newValue[0]);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\skywalking\\oap-server\\server-configuration\\configuration-api\\src\\test\\java\\org\\apache\\skywalking\\oap\\server\\configuration\\api\\FetchingConfigWatcherRegisterTest.java",
  "methodName" : "testGroupConfInit",
  "sourceCode" : "@Test\r\npublic void testGroupConfInit() {\r\n    final Map<String, String> config = new ConcurrentHashMap<>();\r\n    register.registerConfigChangeWatcher(new GroupConfigChangeWatcher(\"MockModule\", new MockProvider(), \"groupItems1\") {\r\n\r\n        @Override\r\n        public void notifyGroup(Map<String, ConfigChangeEvent> groupItems) {\r\n            groupItems.forEach((groupItemName, event) -> {\r\n                config.put(groupItemName, event.getNewValue());\r\n            });\r\n        }\r\n\r\n        @Override\r\n        public Map<String, String> groupItems() {\r\n            return config;\r\n        }\r\n    });\r\n    register.configSync();\r\n    assertEquals(\"abc\", config.get(\"item1\"));\r\n    assertEquals(\"abc2\", config.get(\"item2\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\skywalking\\oap-server\\server-configuration\\configuration-api\\src\\test\\java\\org\\apache\\skywalking\\oap\\server\\configuration\\api\\FetchingConfigWatcherRegisterTest.java",
  "methodName" : "testRegisterTableLog",
  "sourceCode" : "@Test\r\npublic void testRegisterTableLog() {\r\n    register.registerConfigChangeWatcher(new ConfigChangeWatcher(\"MockModule\", new MockProvider(), \"prop2\") {\r\n\r\n        @Override\r\n        public void notify(ConfigChangeEvent value) {\r\n        }\r\n\r\n        @Override\r\n        public String value() {\r\n            return null;\r\n        }\r\n    });\r\n    register.registerConfigChangeWatcher(new GroupConfigChangeWatcher(\"MockModule\", new MockProvider(), \"groupItems1\") {\r\n\r\n        @Override\r\n        public Map<String, String> groupItems() {\r\n            return null;\r\n        }\r\n\r\n        @Override\r\n        public void notifyGroup(final Map<String, ConfigChangeEvent> groupItems) {\r\n        }\r\n    });\r\n    register.configSync();\r\n    FetchingConfigWatcherRegister.Register registerTable = Whitebox.getInternalState(this.register, \"singleConfigChangeWatcherRegister\");\r\n    FetchingConfigWatcherRegister.Register groupRegisterTable = Whitebox.getInternalState(this.register, \"groupConfigChangeWatcherRegister\");\r\n    String expected = \"Following dynamic config items are available.\" + FetchingConfigWatcherRegister.LINE_SEPARATOR + \"---------------------------------------------\" + FetchingConfigWatcherRegister.LINE_SEPARATOR + \"key:MockModule.provider.prop2    module:MockModule    provider:provider    value(current):null\" + FetchingConfigWatcherRegister.LINE_SEPARATOR;\r\n    String groupConfigExpected = \"Following dynamic config items are available.\" + FetchingConfigWatcherRegister.LINE_SEPARATOR + \"---------------------------------------------\" + FetchingConfigWatcherRegister.LINE_SEPARATOR + \"key:MockModule.provider.groupItems1    module:MockModule    provider:provider    groupItems(current):null\" + FetchingConfigWatcherRegister.LINE_SEPARATOR;\r\n    assertEquals(expected, registerTable.toString());\r\n    assertEquals(groupConfigExpected, groupRegisterTable.toString());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\skywalking\\oap-server\\server-configuration\\configuration-api\\src\\test\\java\\org\\apache\\skywalking\\oap\\server\\configuration\\api\\ListeningConfigWatcherRegisterTest.java",
  "methodName" : "testInit",
  "sourceCode" : "@Test\r\npublic void testInit() {\r\n    final String[] newValue = new String[1];\r\n    register.registerConfigChangeWatcher(new ConfigChangeWatcher(\"MockModule\", new FetchingConfigWatcherRegisterTest.MockProvider(), \"prop2\") {\r\n\r\n        @Override\r\n        public void notify(ConfigChangeEvent value) {\r\n            newValue[0] = value.getNewValue();\r\n        }\r\n\r\n        @Override\r\n        public String value() {\r\n            return null;\r\n        }\r\n    });\r\n    assertEquals(\"abc2\", newValue[0]);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\skywalking\\oap-server\\server-configuration\\configuration-api\\src\\test\\java\\org\\apache\\skywalking\\oap\\server\\configuration\\api\\ListeningConfigWatcherRegisterTest.java",
  "methodName" : "testGroupConfInit",
  "sourceCode" : "@Test\r\npublic void testGroupConfInit() {\r\n    final Map<String, String> config = new ConcurrentHashMap<>();\r\n    register.registerConfigChangeWatcher(new GroupConfigChangeWatcher(\"MockModule\", new FetchingConfigWatcherRegisterTest.MockProvider(), \"groupItems1\") {\r\n\r\n        @Override\r\n        public void notifyGroup(Map<String, ConfigChangeEvent> groupItems) {\r\n            groupItems.forEach((groupItemName, event) -> {\r\n                config.put(groupItemName, event.getNewValue());\r\n            });\r\n        }\r\n\r\n        @Override\r\n        public Map<String, String> groupItems() {\r\n            return config;\r\n        }\r\n    });\r\n    assertEquals(\"abc\", config.get(\"item1\"));\r\n    assertEquals(\"abc2\", config.get(\"item2\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\skywalking\\oap-server\\server-configuration\\configuration-apollo\\src\\test\\java\\org\\apache\\skywalking\\oap\\server\\configuration\\apollo\\ApolloConfigurationIT.java",
  "methodName" : "shouldReadUpdated",
  "sourceCode" : "@SuppressWarnings(\"StatementWithEmptyBody\")\r\n@Test\r\n@Timeout(100)\r\npublic void shouldReadUpdated() {\r\n    try {\r\n        assertNull(provider.watcher.value());\r\n        final HttpPost createConfigPost = new HttpPost(baseUrl + \"/openapi/v1/envs/DEV\" + \"/apps/SampleApp\" + \"/clusters/default\" + \"/namespaces/application\" + \"/items\");\r\n        createConfigPost.setHeader(\"Authorization\", token);\r\n        createConfigPost.setHeader(\"Content-Type\", \"application/json;charset=UTF-8\");\r\n        final StringEntity entity = new StringEntity(\"{\\n\" + \"    \\\"key\\\":\\\"test-module.default.testKey\\\",\\n\" + \"    \\\"value\\\":\\\"3000\\\",\\n\" + \"    \\\"comment\\\":\\\"test key\\\",\\n\" + \"    \\\"dataChangeCreatedBy\\\":\\\"apollo\\\"\\n\" + \"}\");\r\n        createConfigPost.setEntity(entity);\r\n        String createResponse = null;\r\n        //retry to wait apollo adminserver registered\r\n        for (int r = 1; r <= 10 && createResponse == null; r++) {\r\n            TimeUnit.SECONDS.sleep(5);\r\n            log.info(\"try createItem, times...: {}\", r);\r\n            createResponse = this.httpExec(createConfigPost, responseHandler);\r\n            log.info(\"createResponse: {}\", createResponse);\r\n        }\r\n        final HttpPost releaseConfigRequest = new HttpPost(baseUrl + \"/openapi/v1/envs/DEV\" + \"/apps/SampleApp\" + \"/clusters/default\" + \"/namespaces/application/releases\");\r\n        releaseConfigRequest.setEntity(new StringEntity(\"{\\n\" + \"    \\\"releaseTitle\\\":\\\"2019-06-07\\\",\\n\" + \"    \\\"releaseComment\\\":\\\"test\\\",\\n\" + \"    \\\"releasedBy\\\":\\\"apollo\\\"\\n\" + \"}\"));\r\n        releaseConfigRequest.setHeader(\"Authorization\", token);\r\n        releaseConfigRequest.setHeader(\"Content-Type\", \"application/json;charset=UTF-8\");\r\n        final String releaseCreateResponse = (String) httpClient.execute(releaseConfigRequest, responseHandler);\r\n        log.info(\"releaseCreateResponse: {}\", releaseCreateResponse);\r\n        for (String v = provider.watcher.value(); v == null; v = provider.watcher.value()) {\r\n        }\r\n        assertEquals(\"3000\", provider.watcher.value());\r\n        final HttpDelete deleteConfigRequest = new HttpDelete(baseUrl + \"/openapi/v1\" + \"/envs/DEV\" + \"/apps/SampleApp\" + \"/clusters/default\" + \"/namespaces/application\" + \"/items/test-module.default.testKey\" + \"?operator=apollo\");\r\n        deleteConfigRequest.setHeader(\"Authorization\", token);\r\n        deleteConfigRequest.setHeader(\"Content-Type\", \"application/json;charset=UTF-8\");\r\n        httpClient.execute(deleteConfigRequest);\r\n        final String releaseDeleteResponse = (String) httpClient.execute(releaseConfigRequest, responseHandler);\r\n        log.info(\"releaseDeleteResponse: {}\", releaseDeleteResponse);\r\n        for (String v = provider.watcher.value(); v != null; v = provider.watcher.value()) {\r\n        }\r\n        assertNull(provider.watcher.value());\r\n    } catch (IOException | InterruptedException e) {\r\n        log.error(e.getMessage(), e);\r\n        fail(e.getMessage());\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\skywalking\\oap-server\\server-configuration\\configuration-apollo\\src\\test\\java\\org\\apache\\skywalking\\oap\\server\\configuration\\apollo\\ApolloConfigurationIT.java",
  "methodName" : "shouldReadUpdated4Group",
  "sourceCode" : "@SuppressWarnings(\"StatementWithEmptyBody\")\r\n@Test\r\n@Timeout(100)\r\npublic void shouldReadUpdated4Group() {\r\n    try {\r\n        assertEquals(\"{}\", provider.groupWatcher.groupItems().toString());\r\n        final HttpPost createConfigPost = new HttpPost(baseUrl + \"/openapi/v1/envs/DEV\" + \"/apps/SampleApp\" + \"/clusters/default\" + \"/namespaces/application\" + \"/items\");\r\n        createConfigPost.setHeader(\"Authorization\", token);\r\n        createConfigPost.setHeader(\"Content-Type\", \"application/json;charset=UTF-8\");\r\n        final StringEntity entityItem1 = new StringEntity(\"{\\n\" + \"    \\\"key\\\":\\\"test-module.default.testKeyGroup.item1\\\",\\n\" + \"    \\\"value\\\":\\\"100\\\",\\n\" + \"    \\\"comment\\\":\\\"test key\\\",\\n\" + \"    \\\"dataChangeCreatedBy\\\":\\\"apollo\\\"\\n\" + \"}\");\r\n        createConfigPost.setEntity(entityItem1);\r\n        String createResponseItem1 = null;\r\n        //retry to wait apollo adminserver registered\r\n        for (int r = 1; r <= 10 && createResponseItem1 == null; r++) {\r\n            TimeUnit.SECONDS.sleep(5);\r\n            log.info(\"try createItem, times...: {}\", r);\r\n            createResponseItem1 = this.httpExec(createConfigPost, responseHandler);\r\n            log.info(\"createResponse: {}\", createResponseItem1);\r\n        }\r\n        final StringEntity entityItem2 = new StringEntity(\"{\\n\" + \"    \\\"key\\\":\\\"test-module.default.testKeyGroup.item2\\\",\\n\" + \"    \\\"value\\\":\\\"200\\\",\\n\" + \"    \\\"comment\\\":\\\"test key\\\",\\n\" + \"    \\\"dataChangeCreatedBy\\\":\\\"apollo\\\"\\n\" + \"}\");\r\n        createConfigPost.setEntity(entityItem2);\r\n        final String createResponseItem2 = (String) httpClient.execute(createConfigPost, responseHandler);\r\n        log.info(\"createResponseItem2: {}\", createResponseItem2);\r\n        final HttpPost releaseConfigRequest = new HttpPost(baseUrl + \"/openapi/v1/envs/DEV\" + \"/apps/SampleApp\" + \"/clusters/default\" + \"/namespaces/application/releases\");\r\n        releaseConfigRequest.setEntity(new StringEntity(\"{\\n\" + \"    \\\"releaseTitle\\\":\\\"2019-06-07\\\",\\n\" + \"    \\\"releaseComment\\\":\\\"test\\\",\\n\" + \"    \\\"releasedBy\\\":\\\"apollo\\\"\\n\" + \"}\"));\r\n        releaseConfigRequest.setHeader(\"Authorization\", token);\r\n        releaseConfigRequest.setHeader(\"Content-Type\", \"application/json;charset=UTF-8\");\r\n        final String releaseCreateResponse = (String) httpClient.execute(releaseConfigRequest, responseHandler);\r\n        log.info(\"releaseCreateResponse: {}\", releaseCreateResponse);\r\n        for (String v = provider.groupWatcher.groupItems().get(\"item1\"); v == null; v = provider.groupWatcher.groupItems().get(\"item1\")) {\r\n        }\r\n        for (String v = provider.groupWatcher.groupItems().get(\"item2\"); v == null; v = provider.groupWatcher.groupItems().get(\"item2\")) {\r\n        }\r\n        assertEquals(\"100\", provider.groupWatcher.groupItems().get(\"item1\"));\r\n        assertEquals(\"200\", provider.groupWatcher.groupItems().get(\"item2\"));\r\n        //test remove item1\r\n        final HttpDelete deleteConfigRequest = new HttpDelete(baseUrl + \"/openapi/v1\" + \"/envs/DEV\" + \"/apps/SampleApp\" + \"/clusters/default\" + \"/namespaces/application\" + \"/items/test-module.default.testKeyGroup.item1\" + \"?operator=apollo\");\r\n        deleteConfigRequest.setHeader(\"Authorization\", token);\r\n        deleteConfigRequest.setHeader(\"Content-Type\", \"application/json;charset=UTF-8\");\r\n        httpClient.execute(deleteConfigRequest);\r\n        final String releaseDeleteResponse = (String) httpClient.execute(releaseConfigRequest, responseHandler);\r\n        log.info(\"releaseDeleteResponse: {}\", releaseDeleteResponse);\r\n        for (String v = provider.groupWatcher.groupItems().get(\"item1\"); v != null; v = provider.groupWatcher.groupItems().get(\"item1\")) {\r\n        }\r\n        assertNull(provider.groupWatcher.groupItems().get(\"item1\"));\r\n        assertEquals(\"200\", provider.groupWatcher.groupItems().get(\"item2\"));\r\n    } catch (IOException | InterruptedException e) {\r\n        log.error(e.getMessage(), e);\r\n        fail(e.getMessage());\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\skywalking\\oap-server\\server-configuration\\configuration-consul\\src\\test\\java\\org\\apache\\skywalking\\oap\\server\\configuration\\consul\\ConsulConfigurationIT.java",
  "methodName" : "shouldReadUpdated",
  "sourceCode" : "@Test\r\n@Timeout(60)\r\npublic void shouldReadUpdated() {\r\n    assertNull(provider.watcher.value());\r\n    String hostAndPort = System.getProperty(\"consul.address\", \"127.0.0.1:8500\");\r\n    Consul consul = Consul.builder().withHostAndPort(HostAndPort.fromString(hostAndPort)).withConnectTimeoutMillis(5000).build();\r\n    KeyValueClient client = consul.keyValueClient();\r\n    assertTrue(client.putValue(\"test-module.default.testKey\", \"1000\"));\r\n    for (String v = provider.watcher.value(); v == null; v = provider.watcher.value()) {\r\n    }\r\n    assertEquals(\"1000\", provider.watcher.value());\r\n    client.deleteKey(\"test-module.default.testKey\");\r\n    for (String v = provider.watcher.value(); v != null; v = provider.watcher.value()) {\r\n    }\r\n    assertNull(provider.watcher.value());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\skywalking\\oap-server\\server-configuration\\configuration-consul\\src\\test\\java\\org\\apache\\skywalking\\oap\\server\\configuration\\consul\\ConsulConfigurationIT.java",
  "methodName" : "shouldReadUpdated4Group",
  "sourceCode" : "@Test\r\n@Timeout(30)\r\npublic void shouldReadUpdated4Group() {\r\n    assertEquals(\"{}\", provider.groupWatcher.groupItems().toString());\r\n    String hostAndPort = System.getProperty(\"consul.address\", \"127.0.0.1:8500\");\r\n    Consul consul = Consul.builder().withHostAndPort(HostAndPort.fromString(hostAndPort)).withConnectTimeoutMillis(5000).build();\r\n    KeyValueClient client = consul.keyValueClient();\r\n    assertTrue(client.putValue(\"test-module.default.testKeyGroup/item1\", \"100\"));\r\n    assertTrue(client.putValue(\"test-module.default.testKeyGroup/item2\", \"200\"));\r\n    for (String v = provider.groupWatcher.groupItems().get(\"item1\"); v == null; v = provider.groupWatcher.groupItems().get(\"item1\")) {\r\n    }\r\n    for (String v = provider.groupWatcher.groupItems().get(\"item2\"); v == null; v = provider.groupWatcher.groupItems().get(\"item2\")) {\r\n    }\r\n    assertEquals(\"100\", provider.groupWatcher.groupItems().get(\"item1\"));\r\n    assertEquals(\"200\", provider.groupWatcher.groupItems().get(\"item2\"));\r\n    //test remove item1\r\n    client.deleteKey(\"test-module.default.testKeyGroup/item1\");\r\n    for (String v = provider.groupWatcher.groupItems().get(\"item1\"); v != null; v = provider.groupWatcher.groupItems().get(\"item1\")) {\r\n    }\r\n    assertNull(provider.groupWatcher.groupItems().get(\"item1\"));\r\n    //test modify item2\r\n    client.putValue(\"test-module.default.testKeyGroup/item2\", \"300\");\r\n    for (String v = provider.groupWatcher.groupItems().get(\"item2\"); v.equals(\"200\"); v = provider.groupWatcher.groupItems().get(\"item2\")) {\r\n    }\r\n    assertEquals(\"300\", provider.groupWatcher.groupItems().get(\"item2\"));\r\n    //chean\r\n    client.deleteKey(\"test-module.default.testKeyGroup/item2\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\skywalking\\oap-server\\server-configuration\\configuration-consul\\src\\test\\java\\org\\apache\\skywalking\\oap\\server\\configuration\\consul\\ConsulConfigurationProviderTest.java",
  "methodName" : "shouldThrowWhenSettingsInvalid",
  "sourceCode" : "@Test\r\npublic void shouldThrowWhenSettingsInvalid() {\r\n    assertThrows(ModuleStartException.class, () -> {\r\n        ConsulConfigurationProvider provider = new ConsulConfigurationProvider();\r\n        provider.newConfigCreator().onInitialized(new ConsulConfigurationCenterSettings());\r\n        provider.initConfigReader();\r\n    });\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\skywalking\\oap-server\\server-configuration\\configuration-consul\\src\\test\\java\\org\\apache\\skywalking\\oap\\server\\configuration\\consul\\ConsulConfigurationWatcherRegisterTest.java",
  "methodName" : "shouldUpdateCachesWhenNotified",
  "sourceCode" : "@Test\r\npublic void shouldUpdateCachesWhenNotified() {\r\n    cacheByKey = new ConcurrentHashMap<>();\r\n    configItemKeyedByName = new ConcurrentHashMap<>();\r\n    Whitebox.setInternalState(register, \"cachesByKey\", cacheByKey);\r\n    Whitebox.setInternalState(register, \"configItemKeyedByName\", configItemKeyedByName);\r\n    KVCache cache1 = mock(KVCache.class);\r\n    KVCache cache2 = mock(KVCache.class);\r\n    ArgumentCaptor<ConsulCache.Listener> listener1 = ArgumentCaptor.forClass(ConsulCache.Listener.class);\r\n    ArgumentCaptor<ConsulCache.Listener> listener2 = ArgumentCaptor.forClass(ConsulCache.Listener.class);\r\n    try (MockedStatic<KVCache> kvCacheMockedStatic = mockStatic(KVCache.class)) {\r\n        kvCacheMockedStatic.when(() -> KVCache.newCache(any(), eq(\"key1\"))).thenReturn(cache1);\r\n        kvCacheMockedStatic.when(() -> KVCache.newCache(any(), eq(\"key2\"))).thenReturn(cache2);\r\n        when(register.readConfig(any(Set.class))).thenCallRealMethod();\r\n        register.readConfig(Sets.newHashSet(\"key1\", \"key2\"));\r\n        verify(cache1).addListener(listener1.capture());\r\n        verify(cache2).addListener(listener2.capture());\r\n        listener1.getValue().notify(ImmutableMap.of(\"key1\", ImmutableValue.builder().createIndex(0).modifyIndex(0).lockIndex(0).key(\"key1\").flags(0).value(BaseEncoding.base64().encode(\"val1\".getBytes())).build()));\r\n        listener2.getValue().notify(ImmutableMap.of(\"key2\", ImmutableValue.builder().createIndex(0).modifyIndex(0).lockIndex(0).key(\"key2\").flags(0).value(BaseEncoding.base64().encode(\"val2\".getBytes())).build()));\r\n        assertEquals(2, configItemKeyedByName.size());\r\n        assertEquals(\"val1\", configItemKeyedByName.get(\"key1\").get());\r\n        assertEquals(\"val2\", configItemKeyedByName.get(\"key2\").get());\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\skywalking\\oap-server\\server-configuration\\configuration-consul\\src\\test\\java\\org\\apache\\skywalking\\oap\\server\\configuration\\consul\\ConsulConfigurationWatcherRegisterTest.java",
  "methodName" : "shouldUnsubscribeWhenKeyRemoved",
  "sourceCode" : "@Test\r\npublic void shouldUnsubscribeWhenKeyRemoved() {\r\n    cacheByKey = new ConcurrentHashMap<>();\r\n    KVCache existedCache = mock(KVCache.class);\r\n    cacheByKey.put(\"existedKey\", existedCache);\r\n    configItemKeyedByName = new ConcurrentHashMap<>();\r\n    Whitebox.setInternalState(register, \"cachesByKey\", cacheByKey);\r\n    Whitebox.setInternalState(register, \"configItemKeyedByName\", configItemKeyedByName);\r\n    KVCache cache1 = mock(KVCache.class);\r\n    KVCache cache2 = mock(KVCache.class);\r\n    ArgumentCaptor<ConsulCache.Listener> listener1 = ArgumentCaptor.forClass(ConsulCache.Listener.class);\r\n    ArgumentCaptor<ConsulCache.Listener> listener2 = ArgumentCaptor.forClass(ConsulCache.Listener.class);\r\n    try (MockedStatic<KVCache> kvCacheMockedStatic = mockStatic(KVCache.class)) {\r\n        kvCacheMockedStatic.when(() -> KVCache.newCache(any(), eq(\"key1\"))).thenReturn(cache1);\r\n        kvCacheMockedStatic.when(() -> KVCache.newCache(any(), eq(\"key2\"))).thenReturn(cache2);\r\n        when(register.readConfig(any(Set.class))).thenCallRealMethod();\r\n        register.readConfig(Sets.newHashSet(\"key1\", \"key2\"));\r\n        verify(cache1).addListener(listener1.capture());\r\n        verify(cache2).addListener(listener2.capture());\r\n        verify(existedCache).stop();\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\skywalking\\oap-server\\server-configuration\\configuration-etcd\\src\\test\\java\\org\\apache\\skywalking\\oap\\server\\configuration\\etcd\\EtcdConfigurationIT.java",
  "methodName" : "shouldReadUpdated",
  "sourceCode" : "@Test\r\n@Timeout(20)\r\npublic void shouldReadUpdated() throws Exception {\r\n    assertNull(provider.watcher.value());\r\n    KV client = Client.builder().target(\"127.0.0.1:\" + container.getMappedPort(2379)).namespace(ByteSequence.from(\"/skywalking/\", Charset.defaultCharset())).build().getKVClient();\r\n    String testValue = \"value\";\r\n    client.put(ByteSequence.from(\"test-module.default.testKey\", Charset.defaultCharset()), ByteSequence.from(testValue, Charset.defaultCharset())).get();\r\n    for (String v = provider.watcher.value(); v == null; v = provider.watcher.value()) {\r\n        log.info(\"value is : {}\", provider.watcher.value());\r\n        TimeUnit.MILLISECONDS.sleep(200L);\r\n    }\r\n    assertEquals(testValue, provider.watcher.value());\r\n    client.delete(ByteSequence.from(\"test-module.default.testKey\", Charset.defaultCharset())).get();\r\n    for (String v = provider.watcher.value(); v != null; v = provider.watcher.value()) {\r\n        TimeUnit.MILLISECONDS.sleep(200L);\r\n    }\r\n    assertNull(provider.watcher.value());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\skywalking\\oap-server\\server-configuration\\configuration-etcd\\src\\test\\java\\org\\apache\\skywalking\\oap\\server\\configuration\\etcd\\EtcdConfigurationIT.java",
  "methodName" : "shouldReadUpdated4Group",
  "sourceCode" : "@Test\r\n@Timeout(20)\r\npublic void shouldReadUpdated4Group() throws Exception {\r\n    assertEquals(\"{}\", provider.groupWatcher.groupItems().toString());\r\n    KV client = Client.builder().target(\"localhost:\" + container.getMappedPort(2379)).namespace(ByteSequence.from(\"/skywalking/\", Charset.defaultCharset())).build().getKVClient();\r\n    client.put(ByteSequence.from(\"test-module.default.testKeyGroup/item1\", Charset.defaultCharset()), ByteSequence.from(\"100\", Charset.defaultCharset())).get();\r\n    client.put(ByteSequence.from(\"test-module.default.testKeyGroup/item2\", Charset.defaultCharset()), ByteSequence.from(\"200\", Charset.defaultCharset())).get();\r\n    for (String v = provider.groupWatcher.groupItems().get(\"item1\"); v == null; v = provider.groupWatcher.groupItems().get(\"item1\")) {\r\n        log.info(\"value is : {}\", provider.groupWatcher.groupItems().get(\"item1\"));\r\n        TimeUnit.MILLISECONDS.sleep(200L);\r\n    }\r\n    for (String v = provider.groupWatcher.groupItems().get(\"item2\"); v == null; v = provider.groupWatcher.groupItems().get(\"item2\")) {\r\n        log.info(\"value is : {}\", provider.groupWatcher.groupItems().get(\"item2\"));\r\n        TimeUnit.MILLISECONDS.sleep(200L);\r\n    }\r\n    assertEquals(\"100\", provider.groupWatcher.groupItems().get(\"item1\"));\r\n    assertEquals(\"200\", provider.groupWatcher.groupItems().get(\"item2\"));\r\n    //test remove item1\r\n    client.delete(ByteSequence.from(\"test-module.default.testKeyGroup/item1\", Charset.defaultCharset())).get();\r\n    for (String v = provider.groupWatcher.groupItems().get(\"item1\"); v != null; v = provider.groupWatcher.groupItems().get(\"item1\")) {\r\n        log.info(\"value is : {}\", provider.groupWatcher.groupItems().get(\"item1\"));\r\n        TimeUnit.MILLISECONDS.sleep(200L);\r\n    }\r\n    assertNull(provider.groupWatcher.groupItems().get(\"item1\"));\r\n    //test modify item2\r\n    client.put(ByteSequence.from(\"test-module.default.testKeyGroup/item2\", Charset.defaultCharset()), ByteSequence.from(\"300\", Charset.defaultCharset())).get();\r\n    for (String v = provider.groupWatcher.groupItems().get(\"item2\"); v.equals(\"200\"); v = provider.groupWatcher.groupItems().get(\"item2\")) {\r\n        log.info(\"value is : {}\", provider.groupWatcher.groupItems().get(\"item2\"));\r\n        TimeUnit.MILLISECONDS.sleep(200L);\r\n    }\r\n    assertEquals(\"300\", provider.groupWatcher.groupItems().get(\"item2\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\skywalking\\oap-server\\server-configuration\\configuration-k8s-configmap\\src\\test\\java\\org\\apache\\skywalking\\oap\\server\\configuration\\configmap\\ConfigmapConfigWatcherRegisterTest.java",
  "methodName" : "readConfigWhenConfigMapDataIsNull",
  "sourceCode" : "@Test\r\npublic void readConfigWhenConfigMapDataIsNull() {\r\n    Map<String, String> configMapData = new HashMap<>();\r\n    doReturn(configMapData).when(informer).configMapData();\r\n    Optional<ConfigTable> optionalConfigTable = register.readConfig(new HashSet<String>() {\r\n\r\n        {\r\n            add(\"key1\");\r\n        }\r\n    });\r\n    Assertions.assertTrue(optionalConfigTable.isPresent());\r\n    ConfigTable configTable = optionalConfigTable.get();\r\n    Assertions.assertEquals(configTable.getItems().size(), 1);\r\n    Assertions.assertEquals(configTable.getItems().get(0).getName(), \"key1\");\r\n    Assertions.assertNull(configTable.getItems().get(0).getValue());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\skywalking\\oap-server\\server-configuration\\configuration-k8s-configmap\\src\\test\\java\\org\\apache\\skywalking\\oap\\server\\configuration\\configmap\\ConfigmapConfigWatcherRegisterTest.java",
  "methodName" : "readConfigWhenInformerNotwork",
  "sourceCode" : "@Test\r\npublic void readConfigWhenInformerNotwork() throws Exception {\r\n    doReturn(new HashMap<>()).when(informer).configMapData();\r\n    Optional<ConfigTable> optionalConfigTable = register.readConfig(new HashSet<String>() {\r\n\r\n        {\r\n            add(\"key1\");\r\n        }\r\n    });\r\n    Assertions.assertTrue(optionalConfigTable.isPresent());\r\n    ConfigTable configTable = optionalConfigTable.get();\r\n    Assertions.assertEquals(configTable.getItems().size(), 1);\r\n    Assertions.assertEquals(configTable.getItems().get(0).getName(), \"key1\");\r\n    Assertions.assertNull(configTable.getItems().get(0).getValue());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\skywalking\\oap-server\\server-configuration\\configuration-k8s-configmap\\src\\test\\java\\org\\apache\\skywalking\\oap\\server\\configuration\\configmap\\ConfigmapConfigWatcherRegisterTest.java",
  "methodName" : "readConfigWhenInformerWork",
  "sourceCode" : "@Test\r\npublic void readConfigWhenInformerWork() throws Exception {\r\n    Map<String, String> configMapData = this.readMockConfigMapData();\r\n    doReturn(configMapData).when(informer).configMapData();\r\n    Optional<ConfigTable> optionalConfigTable = register.readConfig(new HashSet<String>() {\r\n\r\n        {\r\n            add(\"agent-analyzer.default.slowDBAccessThreshold\");\r\n            add(\"alarm.default.alarm-settings\");\r\n            add(\"core.default.apdexThreshold\");\r\n            add(\"agent-analyzer.default.uninstrumentedGateways\");\r\n        }\r\n    });\r\n    Assertions.assertTrue(optionalConfigTable.isPresent());\r\n    ConfigTable configTable = optionalConfigTable.get();\r\n    List<String> list = configTable.getItems().stream().map(ConfigTable.ConfigItem::getValue).filter(Objects::nonNull).collect(Collectors.toList());\r\n    Assertions.assertEquals(list.size(), 4);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\skywalking\\oap-server\\server-configuration\\configuration-k8s-configmap\\src\\test\\java\\org\\apache\\skywalking\\oap\\server\\configuration\\configmap\\ConfigmapConfigWatcherRegisterTest.java",
  "methodName" : "readGroupConfigWhenConfigMapDataIsNull",
  "sourceCode" : "@Test\r\npublic void readGroupConfigWhenConfigMapDataIsNull() throws Exception {\r\n    Map<String, String> configMapData = new HashMap<>();\r\n    doReturn(configMapData).when(informer).configMapData();\r\n    Optional<GroupConfigTable> optionalGroupConfigTable = register.readGroupConfig(new HashSet<String>() {\r\n\r\n        {\r\n            add(\"key1\");\r\n        }\r\n    });\r\n    Assertions.assertTrue(optionalGroupConfigTable.isPresent());\r\n    GroupConfigTable groupConfigTable = optionalGroupConfigTable.get();\r\n    Assertions.assertEquals(groupConfigTable.getGroupItems().size(), 1);\r\n    Assertions.assertEquals(groupConfigTable.getGroupItems().get(0).getName(), \"key1\");\r\n    Assertions.assertEquals(groupConfigTable.getGroupItems().get(0).getItems().size(), 0);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\skywalking\\oap-server\\server-configuration\\configuration-k8s-configmap\\src\\test\\java\\org\\apache\\skywalking\\oap\\server\\configuration\\configmap\\ConfigmapConfigWatcherRegisterTest.java",
  "methodName" : "readGroupConfigWhenInformerNotwork",
  "sourceCode" : "@Test\r\npublic void readGroupConfigWhenInformerNotwork() throws Exception {\r\n    doReturn(new HashMap<>()).when(informer).configMapData();\r\n    Optional<GroupConfigTable> optionalGroupConfigTable = register.readGroupConfig(new HashSet<String>() {\r\n\r\n        {\r\n            add(\"key1\");\r\n        }\r\n    });\r\n    Assertions.assertTrue(optionalGroupConfigTable.isPresent());\r\n    GroupConfigTable groupConfigTable = optionalGroupConfigTable.get();\r\n    Assertions.assertEquals(groupConfigTable.getGroupItems().size(), 1);\r\n    Assertions.assertEquals(groupConfigTable.getGroupItems().get(0).getName(), \"key1\");\r\n    Assertions.assertEquals(groupConfigTable.getGroupItems().get(0).getItems().size(), 0);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\skywalking\\oap-server\\server-configuration\\configuration-k8s-configmap\\src\\test\\java\\org\\apache\\skywalking\\oap\\server\\configuration\\configmap\\ConfigmapConfigWatcherRegisterTest.java",
  "methodName" : "readGroupConfigWhenInformerWork",
  "sourceCode" : "@Test\r\npublic void readGroupConfigWhenInformerWork() throws Exception {\r\n    Map<String, String> configMapData = this.readMockConfigMapData();\r\n    doReturn(configMapData).when(informer).configMapData();\r\n    Optional<GroupConfigTable> optionalGroupConfigTable = register.readGroupConfig(new HashSet<String>() {\r\n\r\n        {\r\n            add(\"core.default.endpoint-name-grouping-openapi\");\r\n        }\r\n    });\r\n    Assertions.assertTrue(optionalGroupConfigTable.isPresent());\r\n    GroupConfigTable groupConfigTable = optionalGroupConfigTable.get();\r\n    Assertions.assertEquals(groupConfigTable.getGroupItems().size(), 1);\r\n    Assertions.assertEquals(groupConfigTable.getGroupItems().get(0).getName(), \"core.default.endpoint-name-grouping-openapi\");\r\n    Assertions.assertEquals(groupConfigTable.getGroupItems().get(0).getItems().size(), 3);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\skywalking\\oap-server\\server-configuration\\configuration-nacos\\src\\test\\java\\org\\apache\\skywalking\\oap\\server\\configuration\\nacos\\NacosConfigurationIT.java",
  "methodName" : "shouldReadUpdated",
  "sourceCode" : "@SuppressWarnings(\"StatementWithEmptyBody\")\r\n@Test\r\n@Timeout(20)\r\npublic void shouldReadUpdated() throws NacosException {\r\n    assertNull(provider.watcher.value());\r\n    final Properties properties = new Properties();\r\n    final String nacosHost = System.getProperty(\"nacos.host\");\r\n    final String nacosPort = System.getProperty(\"nacos.port\");\r\n    log.info(\"nacosHost: {}, nacosPort: {}\", nacosHost, nacosPort);\r\n    properties.put(\"serverAddr\", nacosHost + \":\" + nacosPort);\r\n    final ConfigService configService = NacosFactory.createConfigService(properties);\r\n    assertTrue(configService.publishConfig(\"test-module.default.testKey\", \"skywalking\", \"500\"));\r\n    for (String v = provider.watcher.value(); v == null; v = provider.watcher.value()) {\r\n    }\r\n    assertEquals(\"500\", provider.watcher.value());\r\n    assertTrue(configService.removeConfig(\"test-module.default.testKey\", \"skywalking\"));\r\n    for (String v = provider.watcher.value(); v != null; v = provider.watcher.value()) {\r\n    }\r\n    assertNull(provider.watcher.value());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\skywalking\\oap-server\\server-configuration\\configuration-nacos\\src\\test\\java\\org\\apache\\skywalking\\oap\\server\\configuration\\nacos\\NacosConfigurationIT.java",
  "methodName" : "shouldReadUpdatedGroup",
  "sourceCode" : "@Test\r\n@Timeout(20)\r\npublic void shouldReadUpdatedGroup() throws NacosException {\r\n    assertEquals(\"{}\", provider.groupWatcher.groupItems().toString());\r\n    final Properties properties = new Properties();\r\n    final String nacosHost = System.getProperty(\"nacos.host\");\r\n    final String nacosPort = System.getProperty(\"nacos.port\");\r\n    log.info(\"nacosHost: {}, nacosPort: {}\", nacosHost, nacosPort);\r\n    properties.put(\"serverAddr\", nacosHost + \":\" + nacosPort);\r\n    final ConfigService configService = NacosFactory.createConfigService(properties);\r\n    //test add group key and item1 item2\r\n    assertTrue(configService.publishConfig(\"test-module.default.testKeyGroup\", \"skywalking\", \"item1\\n item2\"));\r\n    assertTrue(configService.publishConfig(\"item1\", \"skywalking\", \"100\"));\r\n    assertTrue(configService.publishConfig(\"item2\", \"skywalking\", \"200\"));\r\n    for (String v = provider.groupWatcher.groupItems().get(\"item1\"); v == null; v = provider.groupWatcher.groupItems().get(\"item1\")) {\r\n    }\r\n    for (String v = provider.groupWatcher.groupItems().get(\"item2\"); v == null; v = provider.groupWatcher.groupItems().get(\"item2\")) {\r\n    }\r\n    assertEquals(\"100\", provider.groupWatcher.groupItems().get(\"item1\"));\r\n    assertEquals(\"200\", provider.groupWatcher.groupItems().get(\"item2\"));\r\n    //test remove item1\r\n    assertTrue(configService.removeConfig(\"item1\", \"skywalking\"));\r\n    for (String v = provider.groupWatcher.groupItems().get(\"item1\"); v != null; v = provider.groupWatcher.groupItems().get(\"item1\")) {\r\n    }\r\n    assertNull(provider.groupWatcher.groupItems().get(\"item1\"));\r\n    //test modify item1\r\n    assertTrue(configService.publishConfig(\"item1\", \"skywalking\", \"300\"));\r\n    for (String v = provider.groupWatcher.groupItems().get(\"item1\"); v == null; v = provider.groupWatcher.groupItems().get(\"item1\")) {\r\n    }\r\n    assertEquals(\"300\", provider.groupWatcher.groupItems().get(\"item1\"));\r\n    //test remove group key\r\n    assertTrue(configService.removeConfig(\"test-module.default.testKeyGroup\", \"skywalking\"));\r\n    for (String v = provider.groupWatcher.groupItems().get(\"item2\"); v != null; v = provider.groupWatcher.groupItems().get(\"item2\")) {\r\n    }\r\n    assertNull(provider.groupWatcher.groupItems().get(\"item2\"));\r\n    //chean\r\n    assertTrue(configService.removeConfig(\"item1\", \"skywalking\"));\r\n    assertTrue(configService.removeConfig(\"item2\", \"skywalking\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\skywalking\\oap-server\\server-configuration\\configuration-nacos\\src\\test\\java\\org\\apache\\skywalking\\oap\\server\\configuration\\nacos\\NacosConfigWatcherRegisterTest.java",
  "methodName" : "shouldReadConfigs",
  "sourceCode" : "@Test\r\npublic void shouldReadConfigs() throws NacosException {\r\n    final String group = \"skywalking\";\r\n    final String testKey1 = \"agent-analyzer.default.slowDBAccessThreshold\";\r\n    final String testVal1 = \"test\";\r\n    final String testKey2 = \"testKey\";\r\n    final String testVal2 = \"testVal\";\r\n    final NacosServerSettings mockSettings = mock(NacosServerSettings.class);\r\n    when(mockSettings.getGroup()).thenReturn(group);\r\n    when(mockSettings.getNamespace()).thenReturn(\"\");\r\n    final NacosConfigWatcherRegister mockRegister = spy(new NacosConfigWatcherRegister(mockSettings));\r\n    final ConfigService mockConfigService = mock(ConfigService.class);\r\n    when(mockConfigService.getConfig(testKey1, group, 1000)).thenReturn(testVal1);\r\n    when(mockConfigService.getConfig(testKey2, group, 1000)).thenReturn(testVal2);\r\n    Whitebox.setInternalState(mockRegister, \"configService\", mockConfigService);\r\n    final ConfigTable configTable = mockRegister.readConfig(Sets.newHashSet(testKey1, testKey2)).get();\r\n    assertEquals(2, configTable.getItems().size());\r\n    Map<String, String> kvs = new HashMap<>();\r\n    for (ConfigTable.ConfigItem item : configTable.getItems()) {\r\n        kvs.put(item.getName(), item.getValue());\r\n    }\r\n    assertEquals(testVal1, kvs.get(testKey1));\r\n    assertEquals(testVal2, kvs.get(testKey2));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\skywalking\\oap-server\\server-configuration\\configuration-zookeeper\\src\\test\\java\\org\\apache\\skywalking\\oap\\server\\configuration\\zookeeper\\it\\ZookeeperConfigurationIT.java",
  "methodName" : "shouldReadUpdated",
  "sourceCode" : "@SuppressWarnings(\"StatementWithEmptyBody\")\r\n@Test\r\n@Timeout(20)\r\npublic void shouldReadUpdated() throws Exception {\r\n    String namespace = \"/default\";\r\n    String key = \"test-module.default.testKey\";\r\n    assertNull(provider.watcher.value());\r\n    RetryPolicy retryPolicy = new ExponentialBackoffRetry(1000, 3);\r\n    CuratorFramework client = CuratorFrameworkFactory.newClient(zkAddress, retryPolicy);\r\n    client.start();\r\n    log.info(\"per path: \" + namespace + \"/\" + key);\r\n    assertTrue(client.create().creatingParentsIfNeeded().forPath(namespace + \"/\" + key, \"500\".getBytes()) != null);\r\n    log.info(\"data: \" + new String(client.getData().forPath(namespace + \"/\" + key)));\r\n    for (String v = provider.watcher.value(); v == null; v = provider.watcher.value()) {\r\n    }\r\n    assertTrue(client.delete().forPath(namespace + \"/\" + key) == null);\r\n    for (String v = provider.watcher.value(); v != null; v = provider.watcher.value()) {\r\n    }\r\n    assertNull(provider.watcher.value());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\skywalking\\oap-server\\server-configuration\\configuration-zookeeper\\src\\test\\java\\org\\apache\\skywalking\\oap\\server\\configuration\\zookeeper\\it\\ZookeeperConfigurationIT.java",
  "methodName" : "shouldReadUpdated4GroupConfig",
  "sourceCode" : "@Test\r\n@Timeout(20)\r\npublic void shouldReadUpdated4GroupConfig() throws Exception {\r\n    String namespace = \"/default\";\r\n    String key = \"test-module.default.testKeyGroup\";\r\n    assertEquals(\"{}\", provider.groupWatcher.groupItems().toString());\r\n    RetryPolicy retryPolicy = new ExponentialBackoffRetry(1000, 3);\r\n    CuratorFramework client = CuratorFrameworkFactory.newClient(zkAddress, retryPolicy);\r\n    client.start();\r\n    log.info(\"per path: \" + namespace + \"/\" + key);\r\n    assertTrue(client.create().creatingParentsIfNeeded().forPath(namespace + \"/\" + key + \"/item1\", \"100\".getBytes()) != null);\r\n    assertTrue(client.create().creatingParentsIfNeeded().forPath(namespace + \"/\" + key + \"/item2\", \"200\".getBytes()) != null);\r\n    log.info(\"data: \" + new String(client.getData().forPath(namespace + \"/\" + key + \"/item1\")));\r\n    log.info(\"data: \" + new String(client.getData().forPath(namespace + \"/\" + key + \"/item2\")));\r\n    for (String v = provider.groupWatcher.groupItems().get(\"item1\"); v == null; v = provider.groupWatcher.groupItems().get(\"item1\")) {\r\n    }\r\n    for (String v = provider.groupWatcher.groupItems().get(\"item2\"); v == null; v = provider.groupWatcher.groupItems().get(\"item2\")) {\r\n    }\r\n    assertTrue(client.delete().forPath(namespace + \"/\" + key + \"/item1\") == null);\r\n    assertTrue(client.delete().forPath(namespace + \"/\" + key + \"/item2\") == null);\r\n    for (String v = provider.groupWatcher.groupItems().get(\"item1\"); v != null; v = provider.groupWatcher.groupItems().get(\"item1\")) {\r\n    }\r\n    for (String v = provider.groupWatcher.groupItems().get(\"item2\"); v != null; v = provider.groupWatcher.groupItems().get(\"item2\")) {\r\n    }\r\n    assertNull(provider.groupWatcher.groupItems().get(\"item1\"));\r\n    assertNull(provider.groupWatcher.groupItems().get(\"item2\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\skywalking\\oap-server\\server-configuration\\configuration-zookeeper\\src\\test\\java\\org\\apache\\skywalking\\oap\\server\\configuration\\zookeeper\\ut\\ZookeeperConfigWatcherRegisterTestCase.java",
  "methodName" : "TestCase",
  "sourceCode" : "@Test\r\npublic void TestCase() throws Exception {\r\n    final String namespace = \"/default\";\r\n    final String key = \"agent-analyzer.default.slowDBAccessThreshold\";\r\n    final String value = \"default:100,mongodb:50\";\r\n    final ZookeeperServerSettings mockSettings = mock(ZookeeperServerSettings.class);\r\n    when(mockSettings.getNamespace()).thenReturn(namespace);\r\n    final MockZookeeperConfigWatcherRegister mockRegister = spy(new MockZookeeperConfigWatcherRegister(mockSettings));\r\n    final PathChildrenCache mockPathChildrenCache = mock(PathChildrenCache.class);\r\n    when(mockPathChildrenCache.getCurrentData(namespace + \"/\" + key)).thenReturn(new ChildData(namespace + \"/\" + key, null, value.getBytes()));\r\n    Whitebox.setInternalState(mockRegister, \"childrenCache\", mockPathChildrenCache);\r\n    final ConfigTable configTable = mockRegister.readConfig(Sets.newHashSet(key)).get();\r\n    assertEquals(1, configTable.getItems().size());\r\n    assertEquals(key, configTable.getItems().get(0).getName());\r\n    assertEquals(value, configTable.getItems().get(0).getValue());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\skywalking\\oap-server\\server-configuration\\grpc-configuration-sync\\src\\test\\java\\org\\apache\\skywalking\\oap\\server\\configuration\\grpc\\GRPCConfigurationTest.java",
  "methodName" : "shouldReadUpdated",
  "sourceCode" : "@Test\r\n@Timeout(20)\r\npublic void shouldReadUpdated() throws Exception {\r\n    AtomicInteger dataFlag = new AtomicInteger(0);\r\n    serviceRegistry.addService(new MockGRPCConfigService(dataFlag));\r\n    assertNull(singleWatcher.value());\r\n    register.registerConfigChangeWatcher(singleWatcher);\r\n    register.start();\r\n    for (String v = singleWatcher.value(); v == null; v = singleWatcher.value()) {\r\n    }\r\n    assertEquals(\"100\", singleWatcher.value());\r\n    //change\r\n    dataFlag.set(1);\r\n    TimeUnit.SECONDS.sleep(1);\r\n    for (String v = singleWatcher.value(); v.equals(\"100\"); v = singleWatcher.value()) {\r\n    }\r\n    assertEquals(\"300\", singleWatcher.value());\r\n    //no change\r\n    dataFlag.set(2);\r\n    TimeUnit.SECONDS.sleep(3);\r\n    for (String v = singleWatcher.value(); !v.equals(\"300\"); v = singleWatcher.value()) {\r\n    }\r\n    assertEquals(\"300\", singleWatcher.value());\r\n    //delete\r\n    dataFlag.set(3);\r\n    TimeUnit.SECONDS.sleep(1);\r\n    for (String v = singleWatcher.value(); v.equals(\"300\"); v = singleWatcher.value()) {\r\n    }\r\n    assertEquals(\"\", singleWatcher.value());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\skywalking\\oap-server\\server-configuration\\grpc-configuration-sync\\src\\test\\java\\org\\apache\\skywalking\\oap\\server\\configuration\\grpc\\GRPCConfigurationTest.java",
  "methodName" : "shouldReadUpdated4Group",
  "sourceCode" : "@Test\r\n@Timeout(20)\r\npublic void shouldReadUpdated4Group() throws Exception {\r\n    AtomicInteger dataFlag = new AtomicInteger(0);\r\n    serviceRegistry.addService(new MockGRPCConfigService(dataFlag));\r\n    assertEquals(\"{}\", groupWatcher.groupItems().toString());\r\n    register.registerConfigChangeWatcher(groupWatcher);\r\n    register.start();\r\n    for (String v = groupWatcher.groupItems().get(\"item1\"); v == null; v = groupWatcher.groupItems().get(\"item1\")) {\r\n    }\r\n    assertEquals(\"100\", groupWatcher.groupItems().get(\"item1\"));\r\n    for (String v = groupWatcher.groupItems().get(\"item2\"); v == null; v = groupWatcher.groupItems().get(\"item2\")) {\r\n    }\r\n    assertEquals(\"200\", groupWatcher.groupItems().get(\"item2\"));\r\n    //change item2\r\n    dataFlag.set(1);\r\n    TimeUnit.SECONDS.sleep(1);\r\n    for (String v = groupWatcher.groupItems().get(\"item2\"); v.equals(\"200\"); v = groupWatcher.groupItems().get(\"item2\")) {\r\n    }\r\n    assertEquals(\"2000\", groupWatcher.groupItems().get(\"item2\"));\r\n    //no change\r\n    dataFlag.set(2);\r\n    TimeUnit.SECONDS.sleep(3);\r\n    assertEquals(\"100\", groupWatcher.groupItems().get(\"item1\"));\r\n    assertEquals(\"2000\", groupWatcher.groupItems().get(\"item2\"));\r\n    //delete item1\r\n    dataFlag.set(3);\r\n    TimeUnit.SECONDS.sleep(1);\r\n    for (String v = groupWatcher.groupItems().get(\"item1\"); v != null; v = groupWatcher.groupItems().get(\"item1\")) {\r\n    }\r\n    assertNull(groupWatcher.groupItems().get(\"item1\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\skywalking\\oap-server\\server-core\\src\\test\\java\\org\\apache\\skywalking\\oap\\server\\core\\analysis\\ApdexThresholdConfigTest.java",
  "methodName" : "testLookupOfBeforeInit",
  "sourceCode" : "@Test\r\npublic void testLookupOfBeforeInit() {\r\n    ApdexThresholdConfig config = new ApdexThresholdConfig(provider);\r\n    assertThat(config.lookup(\"foo\")).isEqualTo(500);\r\n    assertThat(config.lookup(\"default\")).isEqualTo(500);\r\n    assertThat(config.lookup(\"bar\")).isEqualTo(500);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\skywalking\\oap-server\\server-core\\src\\test\\java\\org\\apache\\skywalking\\oap\\server\\core\\analysis\\ApdexThresholdConfigTest.java",
  "methodName" : "testLookupOfDynamicUpdate",
  "sourceCode" : "@Test\r\n@Timeout(20)\r\npublic void testLookupOfDynamicUpdate() throws InterruptedException {\r\n    ConfigWatcherRegister register = new MockConfigWatcherRegister(3);\r\n    when(provider.name()).thenReturn(\"default\");\r\n    ApdexThresholdConfig config = new ApdexThresholdConfig(provider);\r\n    register.registerConfigChangeWatcher(config);\r\n    register.start();\r\n    while (config.lookup(\"foo\").intValue() == 500) {\r\n        Thread.sleep(2000);\r\n    }\r\n    assertThat(config.lookup(\"foo\")).isEqualTo(200);\r\n    assertThat(config.lookup(\"default\")).isEqualTo(1000);\r\n    assertThat(config.lookup(\"bar\")).isEqualTo(1000);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\skywalking\\oap-server\\server-core\\src\\test\\java\\org\\apache\\skywalking\\oap\\server\\core\\analysis\\data\\LimitedSizeBufferedDataTest.java",
  "methodName" : "testPut",
  "sourceCode" : "@Test\r\npublic void testPut() {\r\n    LimitedSizeBufferedData<MockStorageData> collection = new LimitedSizeBufferedData<>(5);\r\n    //2024-01-17 17:00:00\r\n    collection.accept(new MockStorageData(1, 1705482000000L));\r\n    collection.accept(new MockStorageData(3, 1705482000000L));\r\n    collection.accept(new MockStorageData(5, 1705482000000L));\r\n    collection.accept(new MockStorageData(7, 1705482000000L));\r\n    collection.accept(new MockStorageData(9, 1705482000000L));\r\n    //2024-01-17 17:00:00\r\n    MockStorageData income = new MockStorageData(4, 1705482000000L);\r\n    //2024-01-17 17:01:00\r\n    MockStorageData incomeWithDifferentTimeBucket = new MockStorageData(4, 1705482060000L);\r\n    collection.accept(income);\r\n    collection.accept(incomeWithDifferentTimeBucket);\r\n    int[] expected = new int[] { 3, 4, 5, 7, 9, 4 };\r\n    int i = 0;\r\n    for (MockStorageData data : collection.read()) {\r\n        Assertions.assertEquals(expected[i++], data.latency);\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\skywalking\\oap-server\\server-core\\src\\test\\java\\org\\apache\\skywalking\\oap\\server\\core\\analysis\\IDManagerTest.java",
  "methodName" : "testServiceID",
  "sourceCode" : "@Test\r\npublic void testServiceID() {\r\n    IDManager.ServiceID.ServiceIDDefinition define = new IDManager.ServiceID.ServiceIDDefinition(\"Service\", true);\r\n    final IDManager.ServiceID.ServiceIDDefinition relationDefine = IDManager.ServiceID.analysisId(IDManager.ServiceID.buildId(\"Service\", true));\r\n    Assertions.assertEquals(define, relationDefine);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\skywalking\\oap-server\\server-core\\src\\test\\java\\org\\apache\\skywalking\\oap\\server\\core\\analysis\\IDManagerTest.java",
  "methodName" : "testServiceRelationID",
  "sourceCode" : "@Test\r\npublic void testServiceRelationID() {\r\n    IDManager.ServiceID.ServiceRelationDefine define = new IDManager.ServiceID.ServiceRelationDefine(IDManager.ServiceID.buildId(\"ServiceSource\", true), IDManager.ServiceID.buildId(\"ServiceDest\", true));\r\n    final String relationId = IDManager.ServiceID.buildRelationId(define);\r\n    final IDManager.ServiceID.ServiceRelationDefine serviceRelationDefine = IDManager.ServiceID.analysisRelationId(relationId);\r\n    Assertions.assertEquals(define, serviceRelationDefine);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\skywalking\\oap-server\\server-core\\src\\test\\java\\org\\apache\\skywalking\\oap\\server\\core\\analysis\\manual\\endpoint\\EndpointTrafficTest.java",
  "methodName" : "testSerialization",
  "sourceCode" : "@Test\r\npublic void testSerialization() {\r\n    String serviceId = \"mock_id\";\r\n    String endpointName = \"/endpoint-123\";\r\n    DetectPoint detectPoint = DetectPoint.SERVER;\r\n    EndpointTraffic endpointTraffic = new EndpointTraffic();\r\n    endpointTraffic.setTimeBucket(202003281420L);\r\n    endpointTraffic.setServiceId(serviceId);\r\n    endpointTraffic.setName(endpointName);\r\n    EndpointTraffic another = new EndpointTraffic();\r\n    another.deserialize(endpointTraffic.serialize().build());\r\n    Assertions.assertEquals(endpointTraffic, another);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\skywalking\\oap-server\\server-core\\src\\test\\java\\org\\apache\\skywalking\\oap\\server\\core\\analysis\\manual\\endpoint\\EndpointTrafficTest.java",
  "methodName" : "testPersistence",
  "sourceCode" : "@Test\r\npublic void testPersistence() {\r\n    String serviceId = \"mock_id\";\r\n    String endpointName = \"/endpoint-123\";\r\n    DetectPoint detectPoint = DetectPoint.SERVER;\r\n    EndpointTraffic endpointTraffic = new EndpointTraffic();\r\n    endpointTraffic.setTimeBucket(202003281420L);\r\n    endpointTraffic.setServiceId(serviceId);\r\n    endpointTraffic.setName(endpointName);\r\n    final EndpointTraffic.Builder builder = new EndpointTraffic.Builder();\r\n    final HashMapConverter.ToStorage toStorage = new HashMapConverter.ToStorage();\r\n    builder.entity2Storage(endpointTraffic, toStorage);\r\n    final EndpointTraffic another = builder.storage2Entity(new HashMapConverter.ToEntity(toStorage.obtain()));\r\n    Assertions.assertEquals(endpointTraffic, another);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\skywalking\\oap-server\\server-core\\src\\test\\java\\org\\apache\\skywalking\\oap\\server\\core\\analysis\\manual\\relation\\endpoint\\EndpointCallRelationTest.java",
  "methodName" : "testEndpointRelationServerSideMetricsEquals",
  "sourceCode" : "@Test\r\npublic void testEndpointRelationServerSideMetricsEquals() {\r\n    EndpointRelationServerSideMetrics thisObject = new EndpointRelationServerSideMetrics();\r\n    thisObject.setEntityId(\"VXNlcg==.0-VXNlcg==-em1iaXotcHJvbW90aW9uMi1hZG1pbkAxMjUyNw==.1-L0Bpbi9hcGkvaGVhbHRo\");\r\n    thisObject.setTimeBucket(202101071505L);\r\n    EndpointRelationServerSideMetrics otherObject = new EndpointRelationServerSideMetrics();\r\n    otherObject.setEntityId(\"VXNlcg==.0-VXNlcg==-em1iaXotcHJvbW90aW9uMi1hZG1pbkAxMjUyNw==.1-L0Bpbi9hcGkvaGVhbHRo\");\r\n    otherObject.setTimeBucket(202101071505L);\r\n    Assertions.assertTrue(thisObject.equals(otherObject));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\skywalking\\oap-server\\server-core\\src\\test\\java\\org\\apache\\skywalking\\oap\\server\\core\\analysis\\manual\\relation\\endpoint\\EndpointCallRelationTest.java",
  "methodName" : "testEndpointRelationServerSideMetricsNotEquals",
  "sourceCode" : "@Test\r\npublic void testEndpointRelationServerSideMetricsNotEquals() {\r\n    EndpointRelationServerSideMetrics thisObject = new EndpointRelationServerSideMetrics();\r\n    thisObject.setEntityId(\"VXNlcg==.0-VXNlcg==-em1iaXotcHJvbW90aW9uMi1hZG1pbkAxMjUyNw==.1-L0Bpbi9hcGkvaGVhbHRo\");\r\n    thisObject.setTimeBucket(202101071505L);\r\n    EndpointRelationServerSideMetrics otherObject = new EndpointRelationServerSideMetrics();\r\n    otherObject.setEntityId(\"VXNlcg==.0-VXNlcg==-em1iaXotcHJvbW90aW9uMi1hZG1pbkAxMjUyNw==.1-L0Bpbi9hcGkvaGVhbHRo\");\r\n    otherObject.setTimeBucket(202101071506L);\r\n    Assertions.assertFalse(thisObject.equals(otherObject));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\skywalking\\oap-server\\server-core\\src\\test\\java\\org\\apache\\skywalking\\oap\\server\\core\\analysis\\manual\\relation\\instance\\ServiceInstanceRelationTest.java",
  "methodName" : "testServiceInstanceRelationClientSideMetricsEquals",
  "sourceCode" : "@Test\r\npublic void testServiceInstanceRelationClientSideMetricsEquals() {\r\n    ServiceInstanceRelationClientSideMetrics thisObject = new ServiceInstanceRelationClientSideMetrics();\r\n    thisObject.setEntityId(\"em1jLWJlYWNvbi1taWRkbGV3YXJlQDExMTIz.1_MTAuMTExLjIzMi4yMDc=-MTkyLjE2OC40Ni4xNDM6NDY2MDY=.0_MTkyLjE2OC40Ni4xNDM6NDY2MDY=\");\r\n    thisObject.setTimeBucket(202101071505L);\r\n    ServiceInstanceRelationClientSideMetrics otherObject = new ServiceInstanceRelationClientSideMetrics();\r\n    otherObject.setEntityId(\"em1jLWJlYWNvbi1taWRkbGV3YXJlQDExMTIz.1_MTAuMTExLjIzMi4yMDc=-MTkyLjE2OC40Ni4xNDM6NDY2MDY=.0_MTkyLjE2OC40Ni4xNDM6NDY2MDY=\");\r\n    otherObject.setTimeBucket(202101071505L);\r\n    Assertions.assertTrue(thisObject.equals(otherObject));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\skywalking\\oap-server\\server-core\\src\\test\\java\\org\\apache\\skywalking\\oap\\server\\core\\analysis\\manual\\relation\\instance\\ServiceInstanceRelationTest.java",
  "methodName" : "testServiceInstanceRelationClientSideMetricsNotEquals",
  "sourceCode" : "@Test\r\npublic void testServiceInstanceRelationClientSideMetricsNotEquals() {\r\n    ServiceInstanceRelationClientSideMetrics thisObject = new ServiceInstanceRelationClientSideMetrics();\r\n    thisObject.setEntityId(\"em1jLWJlYWNvbi1taWRkbGV3YXJlQDExMTIz.1_MTAuMTExLjIzMi4yMDc=-MTkyLjE2OC40Ni4xNDM6NDY2MDY=.0_MTkyLjE2OC40Ni4xNDM6NDY2MDY=\");\r\n    thisObject.setTimeBucket(202101071505L);\r\n    ServiceInstanceRelationClientSideMetrics otherObject = new ServiceInstanceRelationClientSideMetrics();\r\n    otherObject.setEntityId(\"em1jLWJlYWNvbi1taWRkbGV3YXJlQDExMTIz.1_MTAuMTExLjIzMi4yMDc=-MTkyLjE2OC40Ni4xNDM6NDY2MDY=.0_MTkyLjE2OC40Ni4xNDM6NDY2MDY=\");\r\n    otherObject.setTimeBucket(202101071506L);\r\n    Assertions.assertFalse(thisObject.equals(otherObject));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\skywalking\\oap-server\\server-core\\src\\test\\java\\org\\apache\\skywalking\\oap\\server\\core\\analysis\\manual\\relation\\instance\\ServiceInstanceRelationTest.java",
  "methodName" : "testServiceInstanceRelationServerSideMetricsEquals",
  "sourceCode" : "@Test\r\npublic void testServiceInstanceRelationServerSideMetricsEquals() {\r\n    ServiceInstanceRelationServerSideMetrics thisObject = new ServiceInstanceRelationServerSideMetrics();\r\n    thisObject.setEntityId(\"em1jLWJlYWNvbi1taWRkbGV3YXJlQDExMTIz.1_MTAuMTExLjIzMi4yMDc=-MTkyLjE2OC40Ni4xNDM6NDY2MDY=.0_MTkyLjE2OC40Ni4xNDM6NDY2MDY=\");\r\n    thisObject.setTimeBucket(202101071505L);\r\n    ServiceInstanceRelationServerSideMetrics otherObject = new ServiceInstanceRelationServerSideMetrics();\r\n    otherObject.setEntityId(\"em1jLWJlYWNvbi1taWRkbGV3YXJlQDExMTIz.1_MTAuMTExLjIzMi4yMDc=-MTkyLjE2OC40Ni4xNDM6NDY2MDY=.0_MTkyLjE2OC40Ni4xNDM6NDY2MDY=\");\r\n    otherObject.setTimeBucket(202101071505L);\r\n    Assertions.assertTrue(thisObject.equals(otherObject));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\skywalking\\oap-server\\server-core\\src\\test\\java\\org\\apache\\skywalking\\oap\\server\\core\\analysis\\manual\\relation\\instance\\ServiceInstanceRelationTest.java",
  "methodName" : "testServiceInstanceRelationServerSideMetricsNotEquals",
  "sourceCode" : "@Test\r\npublic void testServiceInstanceRelationServerSideMetricsNotEquals() {\r\n    ServiceInstanceRelationServerSideMetrics thisObject = new ServiceInstanceRelationServerSideMetrics();\r\n    thisObject.setEntityId(\"em1jLWJlYWNvbi1taWRkbGV3YXJlQDExMTIz.1_MTAuMTExLjIzMi4yMDc=-MTkyLjE2OC40Ni4xNDM6NDY2MDY=.0_MTkyLjE2OC40Ni4xNDM6NDY2MDY=\");\r\n    thisObject.setTimeBucket(202101071505L);\r\n    ServiceInstanceRelationServerSideMetrics otherObject = new ServiceInstanceRelationServerSideMetrics();\r\n    otherObject.setEntityId(\"em1jLWJlYWNvbi1taWRkbGV3YXJlQDExMTIz.1_MTAuMTExLjIzMi4yMDc=-MTkyLjE2OC40Ni4xNDM6NDY2MDY=.0_MTkyLjE2OC40Ni4xNDM6NDY2MDY=\");\r\n    otherObject.setTimeBucket(202101071506L);\r\n    Assertions.assertFalse(thisObject.equals(otherObject));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\skywalking\\oap-server\\server-core\\src\\test\\java\\org\\apache\\skywalking\\oap\\server\\core\\analysis\\manual\\relation\\service\\ServiceRelationTest.java",
  "methodName" : "testServiceRelationClientSideMetricsEquals",
  "sourceCode" : "@Test\r\npublic void testServiceRelationClientSideMetricsEquals() {\r\n    ServiceRelationClientSideMetrics thisObject = new ServiceRelationClientSideMetrics();\r\n    thisObject.setEntityId(\"VXNlcg==.0-em0tY2xpZW50LXNldHRpbmctd2ViYXBpQDEwNjQ4.1\");\r\n    thisObject.setTimeBucket(202101071505L);\r\n    ServiceRelationClientSideMetrics otherObject = new ServiceRelationClientSideMetrics();\r\n    otherObject.setEntityId(\"VXNlcg==.0-em0tY2xpZW50LXNldHRpbmctd2ViYXBpQDEwNjQ4.1\");\r\n    otherObject.setTimeBucket(202101071505L);\r\n    Assertions.assertTrue(thisObject.equals(otherObject));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\skywalking\\oap-server\\server-core\\src\\test\\java\\org\\apache\\skywalking\\oap\\server\\core\\analysis\\manual\\relation\\service\\ServiceRelationTest.java",
  "methodName" : "testServiceRelationClientSideMetricsNotEquals",
  "sourceCode" : "@Test\r\npublic void testServiceRelationClientSideMetricsNotEquals() {\r\n    ServiceRelationClientSideMetrics thisObject = new ServiceRelationClientSideMetrics();\r\n    thisObject.setEntityId(\"VXNlcg==.0-em0tY2xpZW50LXNldHRpbmctd2ViYXBpQDEwNjQ4.1\");\r\n    thisObject.setTimeBucket(202101071505L);\r\n    ServiceRelationClientSideMetrics otherObject = new ServiceRelationClientSideMetrics();\r\n    otherObject.setEntityId(\"VXNlcg==.0-em0tY2xpZW50LXNldHRpbmctd2ViYXBpQDEwNjQ4.1\");\r\n    otherObject.setTimeBucket(202101071506L);\r\n    Assertions.assertFalse(thisObject.equals(otherObject));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\skywalking\\oap-server\\server-core\\src\\test\\java\\org\\apache\\skywalking\\oap\\server\\core\\analysis\\manual\\relation\\service\\ServiceRelationTest.java",
  "methodName" : "testServiceRelationServerSideMetricsEquals",
  "sourceCode" : "@Test\r\npublic void testServiceRelationServerSideMetricsEquals() {\r\n    ServiceRelationServerSideMetrics thisObject = new ServiceRelationServerSideMetrics();\r\n    thisObject.setEntityId(\"VXNlcg==.0-em0tY2xpZW50LXNldHRpbmctd2ViYXBpQDEwNjQ4.1\");\r\n    thisObject.setTimeBucket(202101071505L);\r\n    ServiceRelationServerSideMetrics otherObject = new ServiceRelationServerSideMetrics();\r\n    otherObject.setEntityId(\"VXNlcg==.0-em0tY2xpZW50LXNldHRpbmctd2ViYXBpQDEwNjQ4.1\");\r\n    otherObject.setTimeBucket(202101071505L);\r\n    Assertions.assertTrue(thisObject.equals(otherObject));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\skywalking\\oap-server\\server-core\\src\\test\\java\\org\\apache\\skywalking\\oap\\server\\core\\analysis\\manual\\relation\\service\\ServiceRelationTest.java",
  "methodName" : "testServiceRelationServerSideMetricsNotEquals",
  "sourceCode" : "@Test\r\npublic void testServiceRelationServerSideMetricsNotEquals() {\r\n    ServiceRelationServerSideMetrics thisObject = new ServiceRelationServerSideMetrics();\r\n    thisObject.setEntityId(\"VXNlcg==.0-em0tY2xpZW50LXNldHRpbmctd2ViYXBpQDEwNjQ4.1\");\r\n    thisObject.setTimeBucket(202101071505L);\r\n    ServiceRelationServerSideMetrics otherObject = new ServiceRelationServerSideMetrics();\r\n    otherObject.setEntityId(\"VXNlcg==.0-em0tY2xpZW50LXNldHRpbmctd2ViYXBpQDEwNjQ4.1\");\r\n    otherObject.setTimeBucket(202101071506L);\r\n    Assertions.assertFalse(thisObject.equals(otherObject));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\skywalking\\oap-server\\server-core\\src\\test\\java\\org\\apache\\skywalking\\oap\\server\\core\\analysis\\manual\\searchtag\\TagTest.java",
  "methodName" : "testEqual",
  "sourceCode" : "@Test\r\npublic void testEqual() {\r\n    final Tag tag = new Tag(\"tag1\", \"value1\");\r\n    final Tag tag1 = new Tag(\"tag1\", \"value2\");\r\n    final Tag tag2 = new Tag(\"tag2\", \"value3\");\r\n    final Tag tag3 = new Tag(\"tag1\", \"value1\");\r\n    Assertions.assertEquals(tag, tag3);\r\n    Assertions.assertNotEquals(tag, tag1);\r\n    Assertions.assertNotEquals(tag, tag2);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\skywalking\\oap-server\\server-core\\src\\test\\java\\org\\apache\\skywalking\\oap\\server\\core\\analysis\\manual\\service\\ServiceTrafficTest.java",
  "methodName" : "testGrouping",
  "sourceCode" : "@Test\r\npublic void testGrouping() {\r\n    ServiceTraffic traffic = new ServiceTraffic();\r\n    traffic.setName(\"group-name::service-name\");\r\n    traffic.setLayer(Layer.UNDEFINED);\r\n    final HashMapConverter.ToStorage toStorage = new HashMapConverter.ToStorage();\r\n    new ServiceTraffic.Builder().entity2Storage(traffic, toStorage);\r\n    final Map<String, Object> stringObjectMap = toStorage.obtain();\r\n    Assertions.assertEquals(\"group-name\", stringObjectMap.get(ServiceTraffic.GROUP));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\skywalking\\oap-server\\server-core\\src\\test\\java\\org\\apache\\skywalking\\oap\\server\\core\\analysis\\manual\\service\\ServiceTrafficTest.java",
  "methodName" : "testNoGrouping",
  "sourceCode" : "@Test\r\npublic void testNoGrouping() {\r\n    ServiceTraffic traffic = new ServiceTraffic();\r\n    traffic.setName(\"group-name:service-name:no\");\r\n    traffic.setLayer(Layer.UNDEFINED);\r\n    final HashMapConverter.ToStorage toStorage = new HashMapConverter.ToStorage();\r\n    new ServiceTraffic.Builder().entity2Storage(traffic, toStorage);\r\n    final Map<String, Object> stringObjectMap = toStorage.obtain();\r\n    Assertions.assertNull(stringObjectMap.get(ServiceTraffic.GROUP));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\skywalking\\oap-server\\server-core\\src\\test\\java\\org\\apache\\skywalking\\oap\\server\\core\\analysis\\meter\\function\\avg\\AvgFunctionTest.java",
  "methodName" : "testAccept",
  "sourceCode" : "@Test\r\npublic void testAccept() {\r\n    long time = 100;\r\n    function.accept(MeterEntity.newService(\"avg_resp_time\", Layer.GENERAL), time);\r\n    assertThat(function.getSummation()).isEqualTo(time);\r\n    time = 200;\r\n    function.accept(MeterEntity.newService(\"avg_resp_time\", Layer.GENERAL), time);\r\n    assertThat(function.getSummation()).isEqualTo(300);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\skywalking\\oap-server\\server-core\\src\\test\\java\\org\\apache\\skywalking\\oap\\server\\core\\analysis\\meter\\function\\avg\\AvgFunctionTest.java",
  "methodName" : "testCalculate",
  "sourceCode" : "@Test\r\npublic void testCalculate() {\r\n    long time1 = 100;\r\n    long time2 = 200;\r\n    function.accept(MeterEntity.newService(\"avg_resp_time\", Layer.GENERAL), time1);\r\n    function.accept(MeterEntity.newService(\"avg_resp_time\", Layer.GENERAL), time2);\r\n    function.calculate();\r\n    assertThat(function.getValue()).isEqualTo(150);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\skywalking\\oap-server\\server-core\\src\\test\\java\\org\\apache\\skywalking\\oap\\server\\core\\analysis\\meter\\function\\avg\\AvgFunctionTest.java",
  "methodName" : "testSerialize",
  "sourceCode" : "@Test\r\npublic void testSerialize() {\r\n    long time = 1597113447737L;\r\n    MeterEntity meterEntity = MeterEntity.newService(\"avg_resp_time\", Layer.GENERAL);\r\n    meterEntity.setAttr0(\"testAttr\");\r\n    function.accept(meterEntity, time);\r\n    AvgFunction function2 = Mockito.spy(AvgFunction.class);\r\n    function2.deserialize(function.serialize().build());\r\n    assertThat(function2.getEntityId()).isEqualTo(function.getEntityId());\r\n    assertThat(function2.getTimeBucket()).isEqualTo(function.getTimeBucket());\r\n    assertThat(function2.getAttr0()).isEqualTo(function.getAttr0());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\skywalking\\oap-server\\server-core\\src\\test\\java\\org\\apache\\skywalking\\oap\\server\\core\\analysis\\meter\\function\\avg\\AvgFunctionTest.java",
  "methodName" : "testBuilder",
  "sourceCode" : "@Test\r\npublic void testBuilder() throws IllegalAccessException, InstantiationException {\r\n    long time = 1597113447737L;\r\n    MeterEntity meterEntity = MeterEntity.newService(\"avg_resp_time\", Layer.GENERAL);\r\n    meterEntity.setAttr0(\"testAttr\");\r\n    function.accept(meterEntity, time);\r\n    function.calculate();\r\n    StorageBuilder<AvgFunction> storageBuilder = function.builder().newInstance();\r\n    final HashMapConverter.ToStorage toStorage = new HashMapConverter.ToStorage();\r\n    storageBuilder.entity2Storage(function, toStorage);\r\n    final Map<String, Object> map = toStorage.obtain();\r\n    map.put(AvgFunction.VALUE, map.get(AvgFunction.VALUE));\r\n    AvgFunction function2 = storageBuilder.storage2Entity(new HashMapConverter.ToEntity(map));\r\n    assertThat(function2.getAttr0()).isEqualTo(function.getAttr0());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\skywalking\\oap-server\\server-core\\src\\test\\java\\org\\apache\\skywalking\\oap\\server\\core\\analysis\\meter\\function\\avg\\AvgFunctionTest.java",
  "methodName" : "testToHour",
  "sourceCode" : "@Test\r\npublic void testToHour() {\r\n    long time1 = 100;\r\n    long time2 = 200;\r\n    function.setTimeBucket(TimeBucket.getMinuteTimeBucket(System.currentTimeMillis()));\r\n    MeterEntity meterEntity = MeterEntity.newService(\"avg_resp_time\", Layer.GENERAL);\r\n    meterEntity.setAttr0(\"testAttr\");\r\n    function.accept(meterEntity, time1);\r\n    function.accept(meterEntity, time2);\r\n    function.calculate();\r\n    final AvgFunction hourFunction = (AvgFunction) function.toHour();\r\n    hourFunction.calculate();\r\n    assertThat(hourFunction.getValue()).isEqualTo(150);\r\n    assertThat(hourFunction.getAttr0()).isEqualTo(\"testAttr\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\skywalking\\oap-server\\server-core\\src\\test\\java\\org\\apache\\skywalking\\oap\\server\\core\\analysis\\meter\\function\\avg\\AvgFunctionTest.java",
  "methodName" : "testToDay",
  "sourceCode" : "@Test\r\npublic void testToDay() {\r\n    long time1 = 100;\r\n    long time2 = 200;\r\n    MeterEntity meterEntity = MeterEntity.newService(\"avg_resp_time\", Layer.GENERAL);\r\n    meterEntity.setAttr0(\"testAttr\");\r\n    function.accept(meterEntity, time1);\r\n    function.accept(meterEntity, time2);\r\n    function.calculate();\r\n    final AvgFunction dayFunction = (AvgFunction) function.toDay();\r\n    dayFunction.calculate();\r\n    assertThat(dayFunction.getValue()).isEqualTo(150);\r\n    assertThat(dayFunction.getAttr0()).isEqualTo(\"testAttr\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\skywalking\\oap-server\\server-core\\src\\test\\java\\org\\apache\\skywalking\\oap\\server\\core\\analysis\\meter\\function\\avg\\AvgHistogramFunctionTest.java",
  "methodName" : "testFunction",
  "sourceCode" : "@Test\r\npublic void testFunction() {\r\n    HistogramFunctionInst inst = new HistogramFunctionInst();\r\n    inst.accept(MeterEntity.newService(\"service-test\", Layer.GENERAL), new BucketedValues(BUCKETS, new long[] { 0, 4, 10, 10 }));\r\n    inst.accept(MeterEntity.newService(\"service-test\", Layer.GENERAL), new BucketedValues(BUCKETS, new long[] { 1, 2, 3, 4 }));\r\n    inst.calculate();\r\n    final int[] results = inst.getDataset().sortedValues(new HeatMap.KeyComparator(true)).stream().flatMapToInt(l -> IntStream.of(l.intValue())).toArray();\r\n    Assertions.assertArrayEquals(new int[] { 1, 3, 6, 7 }, results);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\skywalking\\oap-server\\server-core\\src\\test\\java\\org\\apache\\skywalking\\oap\\server\\core\\analysis\\meter\\function\\avg\\AvgHistogramFunctionTest.java",
  "methodName" : "testFunctionWithInfinite",
  "sourceCode" : "@Test\r\npublic void testFunctionWithInfinite() {\r\n    HistogramFunctionInst inst = new HistogramFunctionInst();\r\n    inst.accept(MeterEntity.newService(\"service-test\", Layer.GENERAL), new BucketedValues(INFINITE_BUCKETS, new long[] { 0, 4, 10, 10 }));\r\n    inst.accept(MeterEntity.newService(\"service-test\", Layer.GENERAL), new BucketedValues(INFINITE_BUCKETS, new long[] { 1, 2, 3, 4 }));\r\n    inst.calculate();\r\n    Assertions.assertEquals(1L, inst.getDataset().get(Bucket.INFINITE_NEGATIVE).longValue());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\skywalking\\oap-server\\server-core\\src\\test\\java\\org\\apache\\skywalking\\oap\\server\\core\\analysis\\meter\\function\\avg\\AvgHistogramFunctionTest.java",
  "methodName" : "testSerialization",
  "sourceCode" : "@Test\r\npublic void testSerialization() {\r\n    HistogramFunctionInst inst = new HistogramFunctionInst();\r\n    inst.accept(MeterEntity.newService(\"service-test\", Layer.GENERAL), new BucketedValues(BUCKETS, new long[] { 1, 4, 10, 10 }));\r\n    inst.calculate();\r\n    final HistogramFunctionInst inst2 = new HistogramFunctionInst();\r\n    inst2.deserialize(inst.serialize().build());\r\n    Assertions.assertEquals(inst, inst2);\r\n    // HistogramFunction equal doesn't include dataset.\r\n    Assertions.assertEquals(inst.getDataset(), inst2.getDataset());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\skywalking\\oap-server\\server-core\\src\\test\\java\\org\\apache\\skywalking\\oap\\server\\core\\analysis\\meter\\function\\avg\\AvgHistogramFunctionTest.java",
  "methodName" : "testSerializationInInfinite",
  "sourceCode" : "@Test\r\npublic void testSerializationInInfinite() {\r\n    HistogramFunctionInst inst = new HistogramFunctionInst();\r\n    inst.accept(MeterEntity.newService(\"service-test\", Layer.GENERAL), new BucketedValues(INFINITE_BUCKETS, new long[] { 1, 4, 10, 10 }));\r\n    final HistogramFunctionInst inst2 = new HistogramFunctionInst();\r\n    inst2.deserialize(inst.serialize().build());\r\n    Assertions.assertEquals(inst, inst2);\r\n    // HistogramFunction equal doesn't include dataset.\r\n    Assertions.assertEquals(inst.getDataset(), inst2.getDataset());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\skywalking\\oap-server\\server-core\\src\\test\\java\\org\\apache\\skywalking\\oap\\server\\core\\analysis\\meter\\function\\avg\\AvgHistogramFunctionTest.java",
  "methodName" : "testBuilder",
  "sourceCode" : "@Test\r\npublic void testBuilder() throws IllegalAccessException, InstantiationException {\r\n    HistogramFunctionInst inst = new HistogramFunctionInst();\r\n    inst.accept(MeterEntity.newService(\"service-test\", Layer.GENERAL), new BucketedValues(BUCKETS, new long[] { 1, 4, 10, 10 }));\r\n    inst.calculate();\r\n    final StorageBuilder storageBuilder = inst.builder().newInstance();\r\n    // Simulate the storage layer do, convert the datatable to string.\r\n    final HashMapConverter.ToStorage toStorage = new HashMapConverter.ToStorage();\r\n    storageBuilder.entity2Storage(inst, toStorage);\r\n    final Map<String, Object> map = toStorage.obtain();\r\n    map.put(SUMMATION, ((DataTable) map.get(SUMMATION)).toStorageData());\r\n    map.put(COUNT, ((DataTable) map.get(COUNT)).toStorageData());\r\n    map.put(DATASET, ((DataTable) map.get(DATASET)).toStorageData());\r\n    final AvgHistogramFunction inst2 = (AvgHistogramFunction) storageBuilder.storage2Entity(new HashMapConverter.ToEntity(map));\r\n    Assertions.assertEquals(inst, inst2);\r\n    // HistogramFunction equal doesn't include dataset.\r\n    Assertions.assertEquals(inst.getDataset(), inst2.getDataset());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\skywalking\\oap-server\\server-core\\src\\test\\java\\org\\apache\\skywalking\\oap\\server\\core\\analysis\\meter\\function\\avg\\AvgHistogramFunctionTest.java",
  "methodName" : "testGroup",
  "sourceCode" : "@Test\r\npublic void testGroup() {\r\n    HistogramFunctionInst inst = new HistogramFunctionInst();\r\n    BucketedValues bv1 = new BucketedValues(BUCKETS, new long[] { 0, 4, 10, 10 });\r\n    inst.accept(MeterEntity.newService(\"service-test\", Layer.GENERAL), bv1);\r\n    BucketedValues bv2 = new BucketedValues(BUCKETS, new long[] { 1, 2, 3, 4 });\r\n    inst.accept(MeterEntity.newService(\"service-test\", Layer.GENERAL), bv2);\r\n    BucketedValues bv3 = new BucketedValues(BUCKETS, new long[] { 2, 4, 6, 8 });\r\n    inst.accept(MeterEntity.newService(\"service-test\", Layer.GENERAL), bv3);\r\n    inst.calculate();\r\n    int[] results = inst.getDataset().sortedValues(new HeatMap.KeyComparator(true)).stream().flatMapToInt(l -> IntStream.of(l.intValue())).toArray();\r\n    Assertions.assertArrayEquals(new int[] { 1, 3, 6, 7 }, results);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\skywalking\\oap-server\\server-core\\src\\test\\java\\org\\apache\\skywalking\\oap\\server\\core\\analysis\\meter\\function\\avg\\AvgHistogramPercentileFunctionTest.java",
  "methodName" : "testFunction",
  "sourceCode" : "@Test\r\npublic void testFunction() {\r\n    PercentileFunctionInst inst = new PercentileFunctionInst();\r\n    inst.accept(MeterEntity.newService(\"service-test\", Layer.GENERAL), new PercentileArgument(new BucketedValues(BUCKETS, new long[] { 10, 20, 30, 40 }), RANKS));\r\n    inst.accept(MeterEntity.newService(\"service-test\", Layer.GENERAL), new PercentileArgument(new BucketedValues(BUCKETS, new long[] { 10, 20, 30, 40 }), RANKS));\r\n    inst.calculate();\r\n    final DataTable values = inst.getValue();\r\n    /**\r\n     * Expected percentile dataset\r\n     * <pre>\r\n     *     0  , 10\r\n     *     50 , 20\r\n     *     100, 30 <- P50\r\n     *     250, 40 <- P90\r\n     * </pre>\r\n     */\r\n    Assertions.assertEquals(new DataTable(\"{p=50},100|{p=90},250\"), values);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\skywalking\\oap-server\\server-core\\src\\test\\java\\org\\apache\\skywalking\\oap\\server\\core\\analysis\\meter\\function\\avg\\AvgHistogramPercentileFunctionTest.java",
  "methodName" : "testSerialization",
  "sourceCode" : "@Test\r\npublic void testSerialization() {\r\n    PercentileFunctionInst inst = new PercentileFunctionInst();\r\n    inst.accept(MeterEntity.newService(\"service-test\", Layer.GENERAL), new PercentileArgument(new BucketedValues(BUCKETS, new long[] { 10, 20, 30, 40 }), RANKS));\r\n    PercentileFunctionInst inst2 = new PercentileFunctionInst();\r\n    inst2.deserialize(inst.serialize().build());\r\n    assertEquals(inst, inst2);\r\n    // HistogramFunction equal doesn't include dataset.\r\n    assertEquals(inst.getDataset(), inst2.getDataset());\r\n    assertEquals(inst.getRanks(), inst2.getRanks());\r\n    assertEquals(0, inst2.getPercentileValues().size());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\skywalking\\oap-server\\server-core\\src\\test\\java\\org\\apache\\skywalking\\oap\\server\\core\\analysis\\meter\\function\\avg\\AvgHistogramPercentileFunctionTest.java",
  "methodName" : "testBuilder",
  "sourceCode" : "@Test\r\npublic void testBuilder() throws IllegalAccessException, InstantiationException {\r\n    PercentileFunctionInst inst = new PercentileFunctionInst();\r\n    inst.accept(MeterEntity.newService(\"service-test\", Layer.GENERAL), new PercentileArgument(new BucketedValues(BUCKETS, new long[] { 10, 20, 30, 40 }), RANKS));\r\n    inst.calculate();\r\n    final StorageBuilder storageBuilder = inst.builder().newInstance();\r\n    // Simulate the storage layer do, convert the datatable to string.\r\n    final HashMapConverter.ToStorage toStorage = new HashMapConverter.ToStorage();\r\n    storageBuilder.entity2Storage(inst, toStorage);\r\n    final Map<String, Object> map = toStorage.obtain();\r\n    map.put(AvgHistogramPercentileFunction.COUNT, ((DataTable) map.get(AvgHistogramPercentileFunction.COUNT)).toStorageData());\r\n    map.put(AvgHistogramPercentileFunction.SUMMATION, ((DataTable) map.get(AvgHistogramPercentileFunction.SUMMATION)).toStorageData());\r\n    map.put(AvgHistogramPercentileFunction.DATASET, ((DataTable) map.get(AvgHistogramPercentileFunction.DATASET)).toStorageData());\r\n    map.put(AvgHistogramPercentileFunction.VALUE, ((DataTable) map.get(AvgHistogramPercentileFunction.VALUE)).toStorageData());\r\n    map.put(AvgHistogramPercentileFunction.RANKS, ((IntList) map.get(AvgHistogramPercentileFunction.RANKS)).toStorageData());\r\n    final AvgHistogramPercentileFunction inst2 = (AvgHistogramPercentileFunction) storageBuilder.storage2Entity(new HashMapConverter.ToEntity(map));\r\n    assertEquals(inst, inst2);\r\n    // HistogramFunction equal doesn't include dataset.\r\n    assertEquals(inst.getDataset(), inst2.getDataset());\r\n    assertEquals(inst.getPercentileValues(), inst2.getPercentileValues());\r\n    assertEquals(inst.getRanks(), inst2.getRanks());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\skywalking\\oap-server\\server-core\\src\\test\\java\\org\\apache\\skywalking\\oap\\server\\core\\analysis\\meter\\function\\avg\\AvgHistogramPercentileFunctionTest.java",
  "methodName" : "testFunctionWithLabel",
  "sourceCode" : "@Test\r\npublic void testFunctionWithLabel() {\r\n    BucketedValues valuesA = new BucketedValues(BUCKETS, new long[] { 10, 20, 30, 40 });\r\n    valuesA.getLabels().put(\"url\", \"localhost:3306/swtestA\");\r\n    valuesA.getLabels().put(\"instance\", \"instance1\");\r\n    PercentileFunctionInst inst = new PercentileFunctionInst();\r\n    inst.accept(MeterEntity.newService(\"service-test\", Layer.GENERAL), new PercentileArgument(valuesA, RANKS));\r\n    BucketedValues valuesB = new BucketedValues(BUCKETS, new long[] { 30, 40, 20, 10 });\r\n    valuesB.getLabels().put(\"url\", \"localhost:3306/swtestB\");\r\n    valuesB.getLabels().put(\"instance\", \"instance2\");\r\n    inst.accept(MeterEntity.newService(\"service-test\", Layer.GENERAL), new PercentileArgument(valuesB, RANKS));\r\n    inst.calculate();\r\n    final DataTable values = inst.getPercentileValues();\r\n    /**\r\n     * Expected percentile dataset\r\n     * <pre>\r\n     *     0  , 10\r\n     *     50 , 20\r\n     *     100, 30 <- P50\r\n     *     250, 40 <- P90\r\n     * </pre>\r\n     */\r\n    assertEquals(new DataTable(\"{url=localhost:3306/swtestB,instance=instance2,p=50},50|{url=localhost:3306/swtestA,instance=instance1,p=50},100|{url=localhost:3306/swtestB,instance=instance2,p=90},100|{url=localhost:3306/swtestA,instance=instance1,p=90},250\"), values);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\skywalking\\oap-server\\server-core\\src\\test\\java\\org\\apache\\skywalking\\oap\\server\\core\\analysis\\meter\\function\\avg\\AvgLabeledFunctionTest.java",
  "methodName" : "testAccept",
  "sourceCode" : "@Test\r\npublic void testAccept() {\r\n    function.accept(MeterEntity.newService(\"request_count\", Layer.GENERAL), build(asList(\"200\", \"404\"), asList(10L, 2L)));\r\n    assertResult(asList(\"200\", \"404\"), asList(10L, 2L), asList(1L, 1L));\r\n    function.accept(MeterEntity.newService(\"request_count\", Layer.GENERAL), build(asList(\"200\", \"500\"), asList(2L, 3L)));\r\n    assertResult(asList(\"200\", \"404\", \"500\"), asList(12L, 2L, 3L), asList(2L, 1L, 1L));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\skywalking\\oap-server\\server-core\\src\\test\\java\\org\\apache\\skywalking\\oap\\server\\core\\analysis\\meter\\function\\avg\\AvgLabeledFunctionTest.java",
  "methodName" : "testCalculate",
  "sourceCode" : "@Test\r\npublic void testCalculate() {\r\n    function.accept(MeterEntity.newService(\"request_count\", Layer.GENERAL), build(asList(\"200\", \"404\"), asList(10L, 2L)));\r\n    function.accept(MeterEntity.newService(\"request_count\", Layer.GENERAL), build(asList(\"200\", \"500\"), asList(2L, 3L)));\r\n    function.calculate();\r\n    assertThat(function.getValue().sortedKeys(Comparator.naturalOrder())).isEqualTo(asList(\"200\", \"404\", \"500\"));\r\n    assertThat(function.getValue().sortedValues(Comparator.naturalOrder())).isEqualTo(asList(6L, 2L, 3L));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\skywalking\\oap-server\\server-core\\src\\test\\java\\org\\apache\\skywalking\\oap\\server\\core\\analysis\\meter\\function\\avg\\AvgLabeledFunctionTest.java",
  "methodName" : "testSerialize",
  "sourceCode" : "@Test\r\npublic void testSerialize() {\r\n    function.accept(MeterEntity.newService(\"request_count\", Layer.GENERAL), build(asList(\"200\", \"404\"), asList(10L, 2L)));\r\n    AvgLabeledFunction function2 = Mockito.spy(AvgLabeledFunction.class);\r\n    function2.deserialize(function.serialize().build());\r\n    assertThat(function2.getEntityId()).isEqualTo(function.getEntityId());\r\n    assertThat(function2.getTimeBucket()).isEqualTo(function.getTimeBucket());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\skywalking\\oap-server\\server-core\\src\\test\\java\\org\\apache\\skywalking\\oap\\server\\core\\analysis\\meter\\function\\avg\\AvgLabeledFunctionTest.java",
  "methodName" : "testBuilder",
  "sourceCode" : "@Test\r\npublic void testBuilder() throws IllegalAccessException, InstantiationException {\r\n    function.accept(MeterEntity.newService(\"request_count\", Layer.GENERAL), build(asList(\"200\", \"404\"), asList(10L, 2L)));\r\n    function.calculate();\r\n    StorageBuilder<AvgLabeledFunction> storageBuilder = function.builder().newInstance();\r\n    final HashMapConverter.ToStorage toStorage = new HashMapConverter.ToStorage();\r\n    storageBuilder.entity2Storage(function, toStorage);\r\n    final Map<String, Object> map = toStorage.obtain();\r\n    map.put(SUMMATION, ((DataTable) map.get(SUMMATION)).toStorageData());\r\n    map.put(COUNT, ((DataTable) map.get(COUNT)).toStorageData());\r\n    map.put(VALUE, ((DataTable) map.get(VALUE)).toStorageData());\r\n    AvgLabeledFunction function2 = storageBuilder.storage2Entity(new HashMapConverter.ToEntity(map));\r\n    assertThat(function2.getValue()).isEqualTo(function.getValue());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\skywalking\\oap-server\\server-core\\src\\test\\java\\org\\apache\\skywalking\\oap\\server\\core\\analysis\\meter\\function\\HistogramFunctionTest.java",
  "methodName" : "testFunction",
  "sourceCode" : "@Test\r\npublic void testFunction() {\r\n    HistogramFunctionInst inst = new HistogramFunctionInst();\r\n    inst.accept(MeterEntity.newService(\"service-test\", Layer.GENERAL), new BucketedValues(BUCKETS, new long[] { 0, 4, 10, 10 }));\r\n    inst.accept(MeterEntity.newService(\"service-test\", Layer.GENERAL), new BucketedValues(BUCKETS, new long[] { 1, 2, 3, 4 }));\r\n    final int[] results = inst.getDataset().sortedValues(new HeatMap.KeyComparator(true)).stream().flatMapToInt(l -> IntStream.of(l.intValue())).toArray();\r\n    Assertions.assertArrayEquals(new int[] { 1, 6, 13, 14 }, results);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\skywalking\\oap-server\\server-core\\src\\test\\java\\org\\apache\\skywalking\\oap\\server\\core\\analysis\\meter\\function\\HistogramFunctionTest.java",
  "methodName" : "testFunctionWithInfinite",
  "sourceCode" : "@Test\r\npublic void testFunctionWithInfinite() {\r\n    HistogramFunctionInst inst = new HistogramFunctionInst();\r\n    inst.accept(MeterEntity.newService(\"service-test\", Layer.GENERAL), new BucketedValues(INFINITE_BUCKETS, new long[] { 0, 4, 10, 10 }));\r\n    inst.accept(MeterEntity.newService(\"service-test\", Layer.GENERAL), new BucketedValues(INFINITE_BUCKETS, new long[] { 1, 2, 3, 4 }));\r\n    Assertions.assertEquals(1L, inst.getDataset().get(Bucket.INFINITE_NEGATIVE).longValue());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\skywalking\\oap-server\\server-core\\src\\test\\java\\org\\apache\\skywalking\\oap\\server\\core\\analysis\\meter\\function\\HistogramFunctionTest.java",
  "methodName" : "testIncompatible",
  "sourceCode" : "@Test\r\npublic void testIncompatible() {\r\n    assertThrows(IllegalArgumentException.class, () -> {\r\n        HistogramFunctionInst inst = new HistogramFunctionInst();\r\n        inst.accept(MeterEntity.newService(\"service-test\", Layer.GENERAL), new BucketedValues(BUCKETS, new long[] { 0, 4, 10, 10 }));\r\n        inst.accept(MeterEntity.newService(\"service-test\", Layer.GENERAL), new BucketedValues(BUCKETS_2ND, new long[] { 1, 2, 3, 4 }));\r\n    });\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\skywalking\\oap-server\\server-core\\src\\test\\java\\org\\apache\\skywalking\\oap\\server\\core\\analysis\\meter\\function\\HistogramFunctionTest.java",
  "methodName" : "testSerialization",
  "sourceCode" : "@Test\r\npublic void testSerialization() {\r\n    HistogramFunctionInst inst = new HistogramFunctionInst();\r\n    inst.accept(MeterEntity.newService(\"service-test\", Layer.GENERAL), new BucketedValues(BUCKETS, new long[] { 1, 4, 10, 10 }));\r\n    final HistogramFunctionInst inst2 = new HistogramFunctionInst();\r\n    inst2.deserialize(inst.serialize().build());\r\n    Assertions.assertEquals(inst, inst2);\r\n    // HistogramFunction equal doesn't include dataset.\r\n    Assertions.assertEquals(inst.getDataset(), inst2.getDataset());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\skywalking\\oap-server\\server-core\\src\\test\\java\\org\\apache\\skywalking\\oap\\server\\core\\analysis\\meter\\function\\HistogramFunctionTest.java",
  "methodName" : "testSerializationInInfinite",
  "sourceCode" : "@Test\r\npublic void testSerializationInInfinite() {\r\n    HistogramFunctionInst inst = new HistogramFunctionInst();\r\n    inst.accept(MeterEntity.newService(\"service-test\", Layer.GENERAL), new BucketedValues(INFINITE_BUCKETS, new long[] { 1, 4, 10, 10 }));\r\n    final HistogramFunctionInst inst2 = new HistogramFunctionInst();\r\n    inst2.deserialize(inst.serialize().build());\r\n    Assertions.assertEquals(inst, inst2);\r\n    // HistogramFunction equal doesn't include dataset.\r\n    Assertions.assertEquals(inst.getDataset(), inst2.getDataset());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\skywalking\\oap-server\\server-core\\src\\test\\java\\org\\apache\\skywalking\\oap\\server\\core\\analysis\\meter\\function\\HistogramFunctionTest.java",
  "methodName" : "testBuilder",
  "sourceCode" : "@Test\r\npublic void testBuilder() throws IllegalAccessException, InstantiationException {\r\n    HistogramFunctionInst inst = new HistogramFunctionInst();\r\n    inst.accept(MeterEntity.newService(\"service-test\", Layer.GENERAL), new BucketedValues(BUCKETS, new long[] { 1, 4, 10, 10 }));\r\n    final StorageBuilder storageBuilder = inst.builder().newInstance();\r\n    // Simulate the storage layer do, convert the datatable to string.\r\n    final HashMapConverter.ToStorage hashMapConverter = new HashMapConverter.ToStorage();\r\n    storageBuilder.entity2Storage(inst, hashMapConverter);\r\n    final Map<String, Object> map = hashMapConverter.obtain();\r\n    map.put(DATASET, ((DataTable) map.get(DATASET)).toStorageData());\r\n    final HistogramFunction inst2 = (HistogramFunction) storageBuilder.storage2Entity(new HashMapConverter.ToEntity(map));\r\n    Assertions.assertEquals(inst, inst2);\r\n    // HistogramFunction equal doesn't include dataset.\r\n    Assertions.assertEquals(inst.getDataset(), inst2.getDataset());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\skywalking\\oap-server\\server-core\\src\\test\\java\\org\\apache\\skywalking\\oap\\server\\core\\analysis\\meter\\function\\latest\\LatestFunctionTest.java",
  "methodName" : "testAccept",
  "sourceCode" : "@Test\r\npublic void testAccept() {\r\n    long time = 1597113318673L;\r\n    function.accept(MeterEntity.newService(\"latest_sync_time\", Layer.GENERAL), time);\r\n    assertThat(function.getValue()).isEqualTo(time);\r\n    time = 1597113447737L;\r\n    function.accept(MeterEntity.newService(\"latest_sync_time\", Layer.GENERAL), time);\r\n    assertThat(function.getValue()).isEqualTo(time);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\skywalking\\oap-server\\server-core\\src\\test\\java\\org\\apache\\skywalking\\oap\\server\\core\\analysis\\meter\\function\\latest\\LatestFunctionTest.java",
  "methodName" : "testCalculate",
  "sourceCode" : "@Test\r\npublic void testCalculate() {\r\n    long time1 = 1597113318673L;\r\n    long time2 = 1597113447737L;\r\n    function.accept(MeterEntity.newService(\"latest_sync_time\", Layer.GENERAL), time1);\r\n    function.accept(MeterEntity.newService(\"latest_sync_time\", Layer.GENERAL), time2);\r\n    function.calculate();\r\n    assertThat(function.getValue()).isEqualTo(time2);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\skywalking\\oap-server\\server-core\\src\\test\\java\\org\\apache\\skywalking\\oap\\server\\core\\analysis\\meter\\function\\latest\\LatestFunctionTest.java",
  "methodName" : "testSerialize",
  "sourceCode" : "@Test\r\npublic void testSerialize() {\r\n    long time = 1597113447737L;\r\n    MeterEntity meterEntity = MeterEntity.newService(\"latest_sync_time\", Layer.GENERAL);\r\n    meterEntity.setAttr0(\"testAttr\");\r\n    function.accept(meterEntity, time);\r\n    LatestFunction function2 = Mockito.spy(LatestFunction.class);\r\n    function2.deserialize(function.serialize().build());\r\n    assertThat(function2.getEntityId()).isEqualTo(function.getEntityId());\r\n    assertThat(function2.getTimeBucket()).isEqualTo(function.getTimeBucket());\r\n    assertThat(function2.getAttr0()).isEqualTo(function.getAttr0());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\skywalking\\oap-server\\server-core\\src\\test\\java\\org\\apache\\skywalking\\oap\\server\\core\\analysis\\meter\\function\\latest\\LatestFunctionTest.java",
  "methodName" : "testBuilder",
  "sourceCode" : "@Test\r\npublic void testBuilder() throws IllegalAccessException, InstantiationException {\r\n    long time = 1597113447737L;\r\n    MeterEntity meterEntity = MeterEntity.newService(\"latest_sync_time\", Layer.GENERAL);\r\n    meterEntity.setAttr0(\"testAttr\");\r\n    function.accept(meterEntity, time);\r\n    function.calculate();\r\n    StorageBuilder<LatestFunction> storageBuilder = function.builder().newInstance();\r\n    final HashMapConverter.ToStorage toStorage = new HashMapConverter.ToStorage();\r\n    storageBuilder.entity2Storage(function, toStorage);\r\n    final Map<String, Object> map = toStorage.obtain();\r\n    map.put(LatestFunction.VALUE, map.get(LatestFunction.VALUE));\r\n    LatestFunction function2 = storageBuilder.storage2Entity(new HashMapConverter.ToEntity(map));\r\n    assertThat(function2.getAttr0()).isEqualTo(function.getAttr0());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\skywalking\\oap-server\\server-core\\src\\test\\java\\org\\apache\\skywalking\\oap\\server\\core\\analysis\\meter\\function\\latest\\LatestFunctionTest.java",
  "methodName" : "testToHour",
  "sourceCode" : "@Test\r\npublic void testToHour() {\r\n    long time1 = 100;\r\n    long time2 = 200;\r\n    function.setTimeBucket(TimeBucket.getMinuteTimeBucket(System.currentTimeMillis()));\r\n    MeterEntity meterEntity = MeterEntity.newService(\"latest_sync_time\", Layer.GENERAL);\r\n    meterEntity.setAttr0(\"testAttr\");\r\n    function.accept(meterEntity, time1);\r\n    function.accept(meterEntity, time2);\r\n    function.calculate();\r\n    final LatestFunction hourFunction = (LatestFunction) function.toHour();\r\n    hourFunction.calculate();\r\n    assertThat(hourFunction.getValue()).isEqualTo(time2);\r\n    assertThat(hourFunction.getAttr0()).isEqualTo(\"testAttr\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\skywalking\\oap-server\\server-core\\src\\test\\java\\org\\apache\\skywalking\\oap\\server\\core\\analysis\\meter\\function\\latest\\LatestFunctionTest.java",
  "methodName" : "testToDay",
  "sourceCode" : "@Test\r\npublic void testToDay() {\r\n    long time1 = 100;\r\n    long time2 = 200;\r\n    MeterEntity meterEntity = MeterEntity.newService(\"latest_sync_time\", Layer.GENERAL);\r\n    meterEntity.setAttr0(\"testAttr\");\r\n    function.accept(meterEntity, time1);\r\n    function.accept(meterEntity, time2);\r\n    function.calculate();\r\n    final LatestFunction dayFunction = (LatestFunction) function.toDay();\r\n    dayFunction.calculate();\r\n    assertThat(dayFunction.getValue()).isEqualTo(time2);\r\n    assertThat(dayFunction.getAttr0()).isEqualTo(\"testAttr\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\skywalking\\oap-server\\server-core\\src\\test\\java\\org\\apache\\skywalking\\oap\\server\\core\\analysis\\meter\\function\\max\\MaxFunctionTest.java",
  "methodName" : "testAccept",
  "sourceCode" : "@Test\r\npublic void testAccept() {\r\n    function.accept(MeterEntity.newService(\"service-test\", Layer.GENERAL), LARGE_VALUE);\r\n    assertThat(function.getValue()).isEqualTo(LARGE_VALUE);\r\n    function.accept(MeterEntity.newService(\"service-test\", Layer.GENERAL), SMALL_VALUE);\r\n    assertThat(function.getValue()).isEqualTo(LARGE_VALUE);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\skywalking\\oap-server\\server-core\\src\\test\\java\\org\\apache\\skywalking\\oap\\server\\core\\analysis\\meter\\function\\max\\MaxFunctionTest.java",
  "methodName" : "testCalculate",
  "sourceCode" : "@Test\r\npublic void testCalculate() {\r\n    function.accept(MeterEntity.newService(\"service-test\", Layer.GENERAL), LARGE_VALUE);\r\n    function.accept(MeterEntity.newService(\"service-test\", Layer.GENERAL), SMALL_VALUE);\r\n    function.calculate();\r\n    assertThat(function.getValue()).isEqualTo(LARGE_VALUE);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\skywalking\\oap-server\\server-core\\src\\test\\java\\org\\apache\\skywalking\\oap\\server\\core\\analysis\\meter\\function\\max\\MaxFunctionTest.java",
  "methodName" : "testToHour",
  "sourceCode" : "@Test\r\npublic void testToHour() {\r\n    function.setTimeBucket(TimeBucket.getMinuteTimeBucket(System.currentTimeMillis()));\r\n    MeterEntity meterEntity = MeterEntity.newService(\"service-test\", Layer.GENERAL);\r\n    meterEntity.setAttr0(\"testAttr\");\r\n    function.accept(meterEntity, LARGE_VALUE);\r\n    function.accept(meterEntity, SMALL_VALUE);\r\n    function.calculate();\r\n    final MaxFunction hourFunction = (MaxFunction) function.toHour();\r\n    hourFunction.calculate();\r\n    assertThat(hourFunction.getValue()).isEqualTo(LARGE_VALUE);\r\n    assertThat(hourFunction.getAttr0()).isEqualTo(function.getAttr0());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\skywalking\\oap-server\\server-core\\src\\test\\java\\org\\apache\\skywalking\\oap\\server\\core\\analysis\\meter\\function\\max\\MaxFunctionTest.java",
  "methodName" : "testToDay",
  "sourceCode" : "@Test\r\npublic void testToDay() {\r\n    function.setTimeBucket(TimeBucket.getMinuteTimeBucket(System.currentTimeMillis()));\r\n    MeterEntity meterEntity = MeterEntity.newService(\"service-test\", Layer.GENERAL);\r\n    meterEntity.setAttr0(\"testAttr\");\r\n    function.accept(meterEntity, LARGE_VALUE);\r\n    function.accept(meterEntity, SMALL_VALUE);\r\n    function.calculate();\r\n    final MaxFunction dayFunction = (MaxFunction) function.toDay();\r\n    dayFunction.calculate();\r\n    assertThat(dayFunction.getValue()).isEqualTo(LARGE_VALUE);\r\n    assertThat(dayFunction.getAttr0()).isEqualTo(function.getAttr0());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\skywalking\\oap-server\\server-core\\src\\test\\java\\org\\apache\\skywalking\\oap\\server\\core\\analysis\\meter\\function\\max\\MaxFunctionTest.java",
  "methodName" : "testSerialize",
  "sourceCode" : "@Test\r\npublic void testSerialize() {\r\n    MeterEntity meterEntity = MeterEntity.newService(\"service-test\", Layer.GENERAL);\r\n    meterEntity.setAttr0(\"testAttr\");\r\n    function.accept(meterEntity, LARGE_VALUE);\r\n    MaxFunction function2 = new MaxFunctionInst();\r\n    function2.deserialize(function.serialize().build());\r\n    assertThat(function2.getEntityId()).isEqualTo(function.getEntityId());\r\n    assertThat(function2.getTimeBucket()).isEqualTo(function.getTimeBucket());\r\n    assertThat(function2.getServiceId()).isEqualTo(function.getServiceId());\r\n    assertThat(function2.getValue()).isEqualTo(function.getValue());\r\n    assertThat(function2.getAttr0()).isEqualTo(function.getAttr0());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\skywalking\\oap-server\\server-core\\src\\test\\java\\org\\apache\\skywalking\\oap\\server\\core\\analysis\\meter\\function\\max\\MaxFunctionTest.java",
  "methodName" : "testBuilder",
  "sourceCode" : "@Test\r\npublic void testBuilder() throws IllegalAccessException, InstantiationException {\r\n    MeterEntity meterEntity = MeterEntity.newService(\"service-test\", Layer.GENERAL);\r\n    meterEntity.setAttr0(\"testAttr\");\r\n    function.accept(meterEntity, LARGE_VALUE);\r\n    function.calculate();\r\n    StorageBuilder<MaxFunction> storageBuilder = function.builder().newInstance();\r\n    final HashMapConverter.ToStorage toStorage = new HashMapConverter.ToStorage();\r\n    storageBuilder.entity2Storage(function, toStorage);\r\n    final Map<String, Object> map = toStorage.obtain();\r\n    map.put(MaxFunction.VALUE, map.get(MaxFunction.VALUE));\r\n    MaxFunction function2 = storageBuilder.storage2Entity(new HashMapConverter.ToEntity(map));\r\n    assertThat(function2.getValue()).isEqualTo(function.getValue());\r\n    assertThat(function2.getAttr0()).isEqualTo(function.getAttr0());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\skywalking\\oap-server\\server-core\\src\\test\\java\\org\\apache\\skywalking\\oap\\server\\core\\analysis\\meter\\function\\max\\MaxLabeledFunctionTest.java",
  "methodName" : "testAccept",
  "sourceCode" : "@Test\r\npublic void testAccept() {\r\n    function.accept(MeterEntity.newService(\"service-test\", Layer.GENERAL), HTTP_CODE_COUNT_1);\r\n    assertThat(function.getValue()).isEqualTo(HTTP_CODE_COUNT_1);\r\n    function.accept(MeterEntity.newService(\"service-test\", Layer.GENERAL), HTTP_CODE_COUNT_2);\r\n    assertThat(function.getValue()).isEqualTo(HTTP_CODE_COUNT_3);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\skywalking\\oap-server\\server-core\\src\\test\\java\\org\\apache\\skywalking\\oap\\server\\core\\analysis\\meter\\function\\max\\MaxLabeledFunctionTest.java",
  "methodName" : "testCalculate",
  "sourceCode" : "@Test\r\npublic void testCalculate() {\r\n    function.accept(MeterEntity.newService(\"service-test\", Layer.GENERAL), HTTP_CODE_COUNT_1);\r\n    function.accept(MeterEntity.newService(\"service-test\", Layer.GENERAL), HTTP_CODE_COUNT_2);\r\n    function.calculate();\r\n    assertThat(function.getValue()).isEqualTo(HTTP_CODE_COUNT_3);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\skywalking\\oap-server\\server-core\\src\\test\\java\\org\\apache\\skywalking\\oap\\server\\core\\analysis\\meter\\function\\max\\MaxLabeledFunctionTest.java",
  "methodName" : "testToHour",
  "sourceCode" : "@Test\r\npublic void testToHour() {\r\n    function.accept(MeterEntity.newService(\"service-test\", Layer.GENERAL), HTTP_CODE_COUNT_1);\r\n    function.accept(MeterEntity.newService(\"service-test\", Layer.GENERAL), HTTP_CODE_COUNT_2);\r\n    function.calculate();\r\n    final MaxLabeledFunction hourFunction = (MaxLabeledFunction) function.toHour();\r\n    hourFunction.calculate();\r\n    assertThat(hourFunction.getValue()).isEqualTo(HTTP_CODE_COUNT_3);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\skywalking\\oap-server\\server-core\\src\\test\\java\\org\\apache\\skywalking\\oap\\server\\core\\analysis\\meter\\function\\max\\MaxLabeledFunctionTest.java",
  "methodName" : "testToDay",
  "sourceCode" : "@Test\r\npublic void testToDay() {\r\n    function.accept(MeterEntity.newService(\"service-test\", Layer.GENERAL), HTTP_CODE_COUNT_1);\r\n    function.accept(MeterEntity.newService(\"service-test\", Layer.GENERAL), HTTP_CODE_COUNT_2);\r\n    function.calculate();\r\n    final MaxLabeledFunction dayFunction = (MaxLabeledFunction) function.toDay();\r\n    dayFunction.calculate();\r\n    assertThat(dayFunction.getValue()).isEqualTo(HTTP_CODE_COUNT_3);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\skywalking\\oap-server\\server-core\\src\\test\\java\\org\\apache\\skywalking\\oap\\server\\core\\analysis\\meter\\function\\max\\MaxLabeledFunctionTest.java",
  "methodName" : "testSerialize",
  "sourceCode" : "@Test\r\npublic void testSerialize() {\r\n    function.accept(MeterEntity.newService(\"service-test\", Layer.GENERAL), HTTP_CODE_COUNT_1);\r\n    MaxLabeledFunction function2 = new MaxLabeledFunctionInst();\r\n    function2.deserialize(function.serialize().build());\r\n    assertThat(function2.getEntityId()).isEqualTo(function.getEntityId());\r\n    assertThat(function2.getTimeBucket()).isEqualTo(function.getTimeBucket());\r\n    assertThat(function2.getServiceId()).isEqualTo(function.getServiceId());\r\n    assertThat(function2.getValue()).isEqualTo(function.getValue());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\skywalking\\oap-server\\server-core\\src\\test\\java\\org\\apache\\skywalking\\oap\\server\\core\\analysis\\meter\\function\\max\\MaxLabeledFunctionTest.java",
  "methodName" : "testBuilder",
  "sourceCode" : "@Test\r\npublic void testBuilder() throws IllegalAccessException, InstantiationException {\r\n    function.accept(MeterEntity.newService(\"service-test\", Layer.GENERAL), HTTP_CODE_COUNT_1);\r\n    function.calculate();\r\n    StorageBuilder<MaxLabeledFunction> storageBuilder = function.builder().newInstance();\r\n    final HashMapConverter.ToStorage toStorage = new HashMapConverter.ToStorage();\r\n    storageBuilder.entity2Storage(function, toStorage);\r\n    final Map<String, Object> map = toStorage.obtain();\r\n    map.put(MaxLabeledFunction.VALUE, ((DataTable) map.get(MaxLabeledFunction.VALUE)).toStorageData());\r\n    MaxLabeledFunction function2 = storageBuilder.storage2Entity(new HashMapConverter.ToEntity(map));\r\n    assertThat(function2.getValue()).isEqualTo(function.getValue());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\skywalking\\oap-server\\server-core\\src\\test\\java\\org\\apache\\skywalking\\oap\\server\\core\\analysis\\meter\\function\\min\\MinFunctionTest.java",
  "methodName" : "testAccept",
  "sourceCode" : "@Test\r\npublic void testAccept() {\r\n    function.accept(MeterEntity.newService(\"service-test\", Layer.GENERAL), SMALL_VALUE);\r\n    assertThat(function.getValue()).isEqualTo(SMALL_VALUE);\r\n    function.accept(MeterEntity.newService(\"service-test\", Layer.GENERAL), LARGE_VALUE);\r\n    assertThat(function.getValue()).isEqualTo(SMALL_VALUE);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\skywalking\\oap-server\\server-core\\src\\test\\java\\org\\apache\\skywalking\\oap\\server\\core\\analysis\\meter\\function\\min\\MinFunctionTest.java",
  "methodName" : "testCalculate",
  "sourceCode" : "@Test\r\npublic void testCalculate() {\r\n    function.accept(MeterEntity.newService(\"service-test\", Layer.GENERAL), SMALL_VALUE);\r\n    function.accept(MeterEntity.newService(\"service-test\", Layer.GENERAL), LARGE_VALUE);\r\n    function.calculate();\r\n    assertThat(function.getValue()).isEqualTo(SMALL_VALUE);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\skywalking\\oap-server\\server-core\\src\\test\\java\\org\\apache\\skywalking\\oap\\server\\core\\analysis\\meter\\function\\min\\MinFunctionTest.java",
  "methodName" : "testToHour",
  "sourceCode" : "@Test\r\npublic void testToHour() {\r\n    function.setTimeBucket(TimeBucket.getMinuteTimeBucket(System.currentTimeMillis()));\r\n    MeterEntity meterEntity = MeterEntity.newService(\"service-test\", Layer.GENERAL);\r\n    meterEntity.setAttr0(\"testAttr\");\r\n    function.accept(meterEntity, LARGE_VALUE);\r\n    function.accept(meterEntity, SMALL_VALUE);\r\n    function.calculate();\r\n    final MinFunction hourFunction = (MinFunction) function.toHour();\r\n    hourFunction.calculate();\r\n    assertThat(hourFunction.getValue()).isEqualTo(SMALL_VALUE);\r\n    assertThat(hourFunction.getAttr0()).isEqualTo(function.getAttr0());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\skywalking\\oap-server\\server-core\\src\\test\\java\\org\\apache\\skywalking\\oap\\server\\core\\analysis\\meter\\function\\min\\MinFunctionTest.java",
  "methodName" : "testToDay",
  "sourceCode" : "@Test\r\npublic void testToDay() {\r\n    function.setTimeBucket(TimeBucket.getMinuteTimeBucket(System.currentTimeMillis()));\r\n    MeterEntity meterEntity = MeterEntity.newService(\"service-test\", Layer.GENERAL);\r\n    meterEntity.setAttr0(\"testAttr\");\r\n    function.accept(meterEntity, LARGE_VALUE);\r\n    function.accept(meterEntity, SMALL_VALUE);\r\n    function.calculate();\r\n    final MinFunction dayFunction = (MinFunction) function.toDay();\r\n    dayFunction.calculate();\r\n    assertThat(dayFunction.getValue()).isEqualTo(SMALL_VALUE);\r\n    assertThat(dayFunction.getAttr0()).isEqualTo(function.getAttr0());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\skywalking\\oap-server\\server-core\\src\\test\\java\\org\\apache\\skywalking\\oap\\server\\core\\analysis\\meter\\function\\min\\MinFunctionTest.java",
  "methodName" : "testSerialize",
  "sourceCode" : "@Test\r\npublic void testSerialize() {\r\n    MeterEntity meterEntity = MeterEntity.newService(\"service-test\", Layer.GENERAL);\r\n    meterEntity.setAttr0(\"testAttr\");\r\n    function.accept(meterEntity, SMALL_VALUE);\r\n    MinFunction function2 = Mockito.spy(MinFunction.class);\r\n    function2.deserialize(function.serialize().build());\r\n    assertThat(function2.getEntityId()).isEqualTo(function.getEntityId());\r\n    assertThat(function2.getTimeBucket()).isEqualTo(function.getTimeBucket());\r\n    assertThat(function2.getServiceId()).isEqualTo(function.getServiceId());\r\n    assertThat(function2.getValue()).isEqualTo(function.getValue());\r\n    assertThat(function2.getAttr0()).isEqualTo(function.getAttr0());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\skywalking\\oap-server\\server-core\\src\\test\\java\\org\\apache\\skywalking\\oap\\server\\core\\analysis\\meter\\function\\min\\MinFunctionTest.java",
  "methodName" : "testBuilder",
  "sourceCode" : "@Test\r\npublic void testBuilder() throws IllegalAccessException, InstantiationException {\r\n    MeterEntity meterEntity = MeterEntity.newService(\"service-test\", Layer.GENERAL);\r\n    meterEntity.setAttr0(\"testAttr\");\r\n    function.accept(meterEntity, SMALL_VALUE);\r\n    function.calculate();\r\n    StorageBuilder<MinFunction> storageBuilder = function.builder().newInstance();\r\n    final HashMapConverter.ToStorage toStorage = new HashMapConverter.ToStorage();\r\n    storageBuilder.entity2Storage(function, toStorage);\r\n    final Map<String, Object> map = toStorage.obtain();\r\n    map.put(MinFunction.VALUE, map.get(MinFunction.VALUE));\r\n    MinFunction function2 = storageBuilder.storage2Entity(new HashMapConverter.ToEntity(map));\r\n    assertThat(function2.getValue()).isEqualTo(function.getValue());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\skywalking\\oap-server\\server-core\\src\\test\\java\\org\\apache\\skywalking\\oap\\server\\core\\analysis\\meter\\function\\min\\MinLabeledFunctionTest.java",
  "methodName" : "testAccept",
  "sourceCode" : "@Test\r\npublic void testAccept() {\r\n    function.accept(MeterEntity.newService(\"service-test\", Layer.GENERAL), HTTP_CODE_COUNT_1);\r\n    assertThat(function.getValue()).isEqualTo(HTTP_CODE_COUNT_1);\r\n    function.accept(MeterEntity.newService(\"service-test\", Layer.GENERAL), HTTP_CODE_COUNT_2);\r\n    assertThat(function.getValue()).isEqualTo(HTTP_CODE_COUNT_3);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\skywalking\\oap-server\\server-core\\src\\test\\java\\org\\apache\\skywalking\\oap\\server\\core\\analysis\\meter\\function\\min\\MinLabeledFunctionTest.java",
  "methodName" : "testCalculate",
  "sourceCode" : "@Test\r\npublic void testCalculate() {\r\n    function.accept(MeterEntity.newService(\"service-test\", Layer.GENERAL), HTTP_CODE_COUNT_1);\r\n    function.accept(MeterEntity.newService(\"service-test\", Layer.GENERAL), HTTP_CODE_COUNT_2);\r\n    function.calculate();\r\n    assertThat(function.getValue()).isEqualTo(HTTP_CODE_COUNT_3);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\skywalking\\oap-server\\server-core\\src\\test\\java\\org\\apache\\skywalking\\oap\\server\\core\\analysis\\meter\\function\\min\\MinLabeledFunctionTest.java",
  "methodName" : "testToHour",
  "sourceCode" : "@Test\r\npublic void testToHour() {\r\n    function.accept(MeterEntity.newService(\"service-test\", Layer.GENERAL), HTTP_CODE_COUNT_1);\r\n    function.accept(MeterEntity.newService(\"service-test\", Layer.GENERAL), HTTP_CODE_COUNT_2);\r\n    function.calculate();\r\n    final MinLabeledFunction hourFunction = (MinLabeledFunction) function.toHour();\r\n    hourFunction.calculate();\r\n    assertThat(hourFunction.getValue()).isEqualTo(HTTP_CODE_COUNT_3);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\skywalking\\oap-server\\server-core\\src\\test\\java\\org\\apache\\skywalking\\oap\\server\\core\\analysis\\meter\\function\\min\\MinLabeledFunctionTest.java",
  "methodName" : "testToDay",
  "sourceCode" : "@Test\r\npublic void testToDay() {\r\n    function.accept(MeterEntity.newService(\"service-test\", Layer.GENERAL), HTTP_CODE_COUNT_1);\r\n    function.accept(MeterEntity.newService(\"service-test\", Layer.GENERAL), HTTP_CODE_COUNT_2);\r\n    function.calculate();\r\n    final MinLabeledFunction dayFunction = (MinLabeledFunction) function.toDay();\r\n    dayFunction.calculate();\r\n    assertThat(dayFunction.getValue()).isEqualTo(HTTP_CODE_COUNT_3);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\skywalking\\oap-server\\server-core\\src\\test\\java\\org\\apache\\skywalking\\oap\\server\\core\\analysis\\meter\\function\\min\\MinLabeledFunctionTest.java",
  "methodName" : "testSerialize",
  "sourceCode" : "@Test\r\npublic void testSerialize() {\r\n    function.accept(MeterEntity.newService(\"service-test\", Layer.GENERAL), HTTP_CODE_COUNT_1);\r\n    MinLabeledFunction function2 = new MinLabeledFunctionInst();\r\n    function2.deserialize(function.serialize().build());\r\n    assertThat(function2.getEntityId()).isEqualTo(function.getEntityId());\r\n    assertThat(function2.getTimeBucket()).isEqualTo(function.getTimeBucket());\r\n    assertThat(function2.getServiceId()).isEqualTo(function.getServiceId());\r\n    assertThat(function2.getValue()).isEqualTo(function.getValue());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\skywalking\\oap-server\\server-core\\src\\test\\java\\org\\apache\\skywalking\\oap\\server\\core\\analysis\\meter\\function\\min\\MinLabeledFunctionTest.java",
  "methodName" : "testBuilder",
  "sourceCode" : "@Test\r\npublic void testBuilder() throws IllegalAccessException, InstantiationException {\r\n    function.accept(MeterEntity.newService(\"service-test\", Layer.GENERAL), HTTP_CODE_COUNT_1);\r\n    function.calculate();\r\n    StorageBuilder<MinLabeledFunction> storageBuilder = function.builder().newInstance();\r\n    final HashMapConverter.ToStorage toStorage = new HashMapConverter.ToStorage();\r\n    storageBuilder.entity2Storage(function, toStorage);\r\n    final Map<String, Object> map = toStorage.obtain();\r\n    map.put(MinLabeledFunction.VALUE, ((DataTable) map.get(MinLabeledFunction.VALUE)).toStorageData());\r\n    MinLabeledFunction function2 = storageBuilder.storage2Entity(new HashMapConverter.ToEntity(map));\r\n    assertThat(function2.getValue()).isEqualTo(function.getValue());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\skywalking\\oap-server\\server-core\\src\\test\\java\\org\\apache\\skywalking\\oap\\server\\core\\analysis\\meter\\function\\sum\\SumFunctionTest.java",
  "methodName" : "testAccept",
  "sourceCode" : "@Test\r\npublic void testAccept() {\r\n    long time = 100;\r\n    function.accept(MeterEntity.newService(\"sum_resp_time\", Layer.GENERAL), time);\r\n    assertThat(function.getValue()).isEqualTo(time);\r\n    time = 200;\r\n    function.accept(MeterEntity.newService(\"sum_resp_time\", Layer.GENERAL), time);\r\n    assertThat(function.getValue()).isEqualTo(300);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\skywalking\\oap-server\\server-core\\src\\test\\java\\org\\apache\\skywalking\\oap\\server\\core\\analysis\\meter\\function\\sum\\SumFunctionTest.java",
  "methodName" : "testSerialize",
  "sourceCode" : "@Test\r\npublic void testSerialize() {\r\n    long time = 1597113447737L;\r\n    MeterEntity meterEntity = MeterEntity.newService(\"sum_resp_time\", Layer.GENERAL);\r\n    meterEntity.setAttr0(\"testAttr\");\r\n    function.accept(meterEntity, time);\r\n    SumFunction function2 = Mockito.spy(SumFunction.class);\r\n    function2.deserialize(function.serialize().build());\r\n    assertThat(function2.getEntityId()).isEqualTo(function.getEntityId());\r\n    assertThat(function2.getTimeBucket()).isEqualTo(function.getTimeBucket());\r\n    assertThat(function2.getAttr0()).isEqualTo(function.getAttr0());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\skywalking\\oap-server\\server-core\\src\\test\\java\\org\\apache\\skywalking\\oap\\server\\core\\analysis\\meter\\function\\sum\\SumFunctionTest.java",
  "methodName" : "testBuilder",
  "sourceCode" : "@Test\r\npublic void testBuilder() throws IllegalAccessException, InstantiationException {\r\n    long time = 1597113447737L;\r\n    MeterEntity meterEntity = MeterEntity.newService(\"sum_resp_time\", Layer.GENERAL);\r\n    meterEntity.setAttr0(\"testAttr\");\r\n    function.accept(meterEntity, time);\r\n    function.calculate();\r\n    StorageBuilder<SumFunction> storageBuilder = (StorageBuilder<SumFunction>) function.builder().newInstance();\r\n    final HashMapConverter.ToStorage toStorage = new HashMapConverter.ToStorage();\r\n    storageBuilder.entity2Storage(function, toStorage);\r\n    final Map<String, Object> map = toStorage.obtain();\r\n    map.put(SumFunction.VALUE, map.get(SumFunction.VALUE));\r\n    SumFunction function2 = storageBuilder.storage2Entity(new HashMapConverter.ToEntity(map));\r\n    assertThat(function2.getAttr0()).isEqualTo(function.getAttr0());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\skywalking\\oap-server\\server-core\\src\\test\\java\\org\\apache\\skywalking\\oap\\server\\core\\analysis\\meter\\function\\sum\\SumFunctionTest.java",
  "methodName" : "testToHour",
  "sourceCode" : "@Test\r\npublic void testToHour() {\r\n    long time1 = 100;\r\n    long time2 = 200;\r\n    function.setTimeBucket(TimeBucket.getMinuteTimeBucket(System.currentTimeMillis()));\r\n    MeterEntity meterEntity = MeterEntity.newService(\"sum_resp_time\", Layer.GENERAL);\r\n    meterEntity.setAttr0(\"testAttr\");\r\n    function.accept(meterEntity, time1);\r\n    function.accept(meterEntity, time2);\r\n    function.calculate();\r\n    final SumFunction hourFunction = (SumFunction) function.toHour();\r\n    hourFunction.calculate();\r\n    assertThat(hourFunction.getValue()).isEqualTo(300);\r\n    assertThat(hourFunction.getAttr0()).isEqualTo(\"testAttr\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\skywalking\\oap-server\\server-core\\src\\test\\java\\org\\apache\\skywalking\\oap\\server\\core\\analysis\\meter\\function\\sum\\SumFunctionTest.java",
  "methodName" : "testToDay",
  "sourceCode" : "@Test\r\npublic void testToDay() {\r\n    long time1 = 100;\r\n    long time2 = 200;\r\n    MeterEntity meterEntity = MeterEntity.newService(\"sum_resp_time\", Layer.GENERAL);\r\n    meterEntity.setAttr0(\"testAttr\");\r\n    function.accept(meterEntity, time1);\r\n    function.accept(meterEntity, time2);\r\n    function.calculate();\r\n    final SumFunction dayFunction = (SumFunction) function.toDay();\r\n    dayFunction.calculate();\r\n    assertThat(dayFunction.getValue()).isEqualTo(300);\r\n    assertThat(dayFunction.getAttr0()).isEqualTo(\"testAttr\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\skywalking\\oap-server\\server-core\\src\\test\\java\\org\\apache\\skywalking\\oap\\server\\core\\analysis\\meter\\function\\sum\\SumHistogramPercentileFunctionTest.java",
  "methodName" : "testFunction",
  "sourceCode" : "@Test\r\npublic void testFunction() {\r\n    PercentileFunctionInst inst = new PercentileFunctionInst();\r\n    inst.accept(MeterEntity.newService(\"service-test\", Layer.GENERAL), new PercentileArgument(new BucketedValues(BUCKETS, new long[] { 10, 20, 30, 40 }), RANKS));\r\n    inst.accept(MeterEntity.newService(\"service-test\", Layer.GENERAL), new PercentileArgument(new BucketedValues(BUCKETS, new long[] { 10, 20, 30, 40 }), RANKS));\r\n    inst.calculate();\r\n    final DataTable values = inst.getValue();\r\n    /**\r\n     * Expected percentile dataset\r\n     * <pre>\r\n     *     0  , 20\r\n     *     50 , 40\r\n     *     100, 60 <- P50\r\n     *     250, 80 <- P90\r\n     * </pre>\r\n     */\r\n    Assertions.assertEquals(new DataTable(\"{p=50},100|{p=90},250\"), values);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\skywalking\\oap-server\\server-core\\src\\test\\java\\org\\apache\\skywalking\\oap\\server\\core\\analysis\\meter\\function\\sum\\SumHistogramPercentileFunctionTest.java",
  "methodName" : "testSerialization",
  "sourceCode" : "@Test\r\npublic void testSerialization() {\r\n    PercentileFunctionInst inst = new PercentileFunctionInst();\r\n    inst.accept(MeterEntity.newService(\"service-test\", Layer.GENERAL), new PercentileArgument(new BucketedValues(BUCKETS, new long[] { 10, 20, 30, 40 }), RANKS));\r\n    PercentileFunctionInst inst2 = new PercentileFunctionInst();\r\n    inst2.deserialize(inst.serialize().build());\r\n    assertEquals(inst, inst2);\r\n    assertEquals(inst.getSummation(), inst2.getSummation());\r\n    assertEquals(inst.getRanks(), inst2.getRanks());\r\n    assertEquals(0, inst2.getPercentileValues().size());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\skywalking\\oap-server\\server-core\\src\\test\\java\\org\\apache\\skywalking\\oap\\server\\core\\analysis\\meter\\function\\sum\\SumHistogramPercentileFunctionTest.java",
  "methodName" : "testBuilder",
  "sourceCode" : "@Test\r\npublic void testBuilder() throws IllegalAccessException, InstantiationException {\r\n    PercentileFunctionInst inst = new PercentileFunctionInst();\r\n    inst.accept(MeterEntity.newService(\"service-test\", Layer.GENERAL), new PercentileArgument(new BucketedValues(BUCKETS, new long[] { 10, 20, 30, 40 }), RANKS));\r\n    inst.calculate();\r\n    final StorageBuilder storageBuilder = inst.builder().newInstance();\r\n    // Simulate the storage layer do, convert the datatable to string.\r\n    final HashMapConverter.ToStorage toStorage = new HashMapConverter.ToStorage();\r\n    storageBuilder.entity2Storage(inst, toStorage);\r\n    final Map<String, Object> map = toStorage.obtain();\r\n    map.put(SumHistogramPercentileFunction.SUMMATION, ((DataTable) map.get(SumHistogramPercentileFunction.SUMMATION)).toStorageData());\r\n    map.put(SumHistogramPercentileFunction.VALUE, ((DataTable) map.get(SumHistogramPercentileFunction.VALUE)).toStorageData());\r\n    map.put(SumHistogramPercentileFunction.RANKS, ((IntList) map.get(SumHistogramPercentileFunction.RANKS)).toStorageData());\r\n    final SumHistogramPercentileFunction inst2 = (SumHistogramPercentileFunction) storageBuilder.storage2Entity(new HashMapConverter.ToEntity(map));\r\n    assertEquals(inst, inst2);\r\n    // HistogramFunction equal doesn't include dataset.\r\n    assertEquals(inst.getPercentileValues(), inst2.getPercentileValues());\r\n    assertEquals(inst.getRanks(), inst2.getRanks());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\skywalking\\oap-server\\server-core\\src\\test\\java\\org\\apache\\skywalking\\oap\\server\\core\\analysis\\meter\\function\\sum\\SumHistogramPercentileFunctionTest.java",
  "methodName" : "testFunctionWithLabel",
  "sourceCode" : "@Test\r\npublic void testFunctionWithLabel() {\r\n    BucketedValues valuesA = new BucketedValues(BUCKETS, new long[] { 10, 20, 30, 40 });\r\n    valuesA.getLabels().put(\"url\", \"localhost:3306/swtestA\");\r\n    valuesA.getLabels().put(\"instance\", \"instance1\");\r\n    PercentileFunctionInst inst = new PercentileFunctionInst();\r\n    inst.accept(MeterEntity.newService(\"service-test\", Layer.GENERAL), new PercentileArgument(valuesA, RANKS));\r\n    BucketedValues valuesB = new BucketedValues(BUCKETS, new long[] { 30, 40, 20, 10 });\r\n    valuesB.getLabels().put(\"url\", \"localhost:3306/swtestB\");\r\n    valuesB.getLabels().put(\"instance\", \"instance2\");\r\n    inst.accept(MeterEntity.newService(\"service-test\", Layer.GENERAL), new PercentileArgument(valuesB, RANKS));\r\n    inst.calculate();\r\n    final DataTable values = inst.getPercentileValues();\r\n    /**\r\n     * Expected percentile dataset\r\n     * <pre>\r\n     *     0  , 20\r\n     *     50 , 40\r\n     *     100, 60 <- P50\r\n     *     250, 80 <- P90\r\n     * </pre>\r\n     */\r\n    assertEquals(new DataTable(\"{url=localhost:3306/swtestB,instance=instance2,p=50},50|{url=localhost:3306/swtestA,instance=instance1,p=50},100|{url=localhost:3306/swtestB,instance=instance2,p=90},100|{url=localhost:3306/swtestA,instance=instance1,p=90},250\"), values);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\skywalking\\oap-server\\server-core\\src\\test\\java\\org\\apache\\skywalking\\oap\\server\\core\\analysis\\meter\\function\\sum\\SumLabeledFunctionTest.java",
  "methodName" : "testAccept",
  "sourceCode" : "@Test\r\npublic void testAccept() {\r\n    function.accept(MeterEntity.newService(\"service-test\", Layer.GENERAL), HTTP_CODE_COUNT_1);\r\n    function.accept(MeterEntity.newService(\"service-test\", Layer.GENERAL), HTTP_CODE_COUNT_2);\r\n    Assertions.assertEquals(function.getValue(), new DataTable(\"200,3|301,2|404,7|502,9|505,1\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\skywalking\\oap-server\\server-core\\src\\test\\java\\org\\apache\\skywalking\\oap\\server\\core\\analysis\\meter\\function\\sum\\SumLabeledFunctionTest.java",
  "methodName" : "testToHour",
  "sourceCode" : "@Test\r\npublic void testToHour() {\r\n    function.accept(MeterEntity.newService(\"service-test\", Layer.GENERAL), HTTP_CODE_COUNT_1);\r\n    function.accept(MeterEntity.newService(\"service-test\", Layer.GENERAL), HTTP_CODE_COUNT_2);\r\n    function.calculate();\r\n    final SumLabeledFunction hourFunction = (SumLabeledFunction) function.toHour();\r\n    hourFunction.calculate();\r\n    Assertions.assertEquals(hourFunction.getValue(), new DataTable(\"200,3|301,2|404,7|502,9|505,1\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\skywalking\\oap-server\\server-core\\src\\test\\java\\org\\apache\\skywalking\\oap\\server\\core\\analysis\\meter\\function\\sum\\SumLabeledFunctionTest.java",
  "methodName" : "testToDay",
  "sourceCode" : "@Test\r\npublic void testToDay() {\r\n    function.accept(MeterEntity.newService(\"service-test\", Layer.GENERAL), HTTP_CODE_COUNT_1);\r\n    function.accept(MeterEntity.newService(\"service-test\", Layer.GENERAL), HTTP_CODE_COUNT_2);\r\n    function.calculate();\r\n    final SumLabeledFunction dayFunction = (SumLabeledFunction) function.toDay();\r\n    dayFunction.calculate();\r\n    Assertions.assertEquals(dayFunction.getValue(), new DataTable(\"200,3|301,2|404,7|502,9|505,1\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\skywalking\\oap-server\\server-core\\src\\test\\java\\org\\apache\\skywalking\\oap\\server\\core\\analysis\\meter\\function\\sum\\SumLabeledFunctionTest.java",
  "methodName" : "testSerialization",
  "sourceCode" : "@Test\r\npublic void testSerialization() {\r\n    function.accept(MeterEntity.newService(\"service-test\", Layer.GENERAL), HTTP_CODE_COUNT_1);\r\n    SumLabeledFunction function2 = new SumLabeledFunctionInst();\r\n    function2.deserialize(function.serialize().build());\r\n    Assertions.assertEquals(function, function2);\r\n    Assertions.assertEquals(function.getValue(), function2.getValue());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\skywalking\\oap-server\\server-core\\src\\test\\java\\org\\apache\\skywalking\\oap\\server\\core\\analysis\\meter\\function\\sum\\SumLabeledFunctionTest.java",
  "methodName" : "testBuilder",
  "sourceCode" : "@Test\r\npublic void testBuilder() throws IllegalAccessException, InstantiationException {\r\n    function.accept(MeterEntity.newService(\"service-test\", Layer.GENERAL), HTTP_CODE_COUNT_1);\r\n    function.calculate();\r\n    StorageBuilder<SumLabeledFunction> storageBuilder = function.builder().newInstance();\r\n    final HashMapConverter.ToStorage toStorage = new HashMapConverter.ToStorage();\r\n    storageBuilder.entity2Storage(function, toStorage);\r\n    final Map<String, Object> map = toStorage.obtain();\r\n    map.put(VALUE, ((DataTable) map.get(VALUE)).toStorageData());\r\n    SumLabeledFunction function2 = storageBuilder.storage2Entity(new HashMapConverter.ToEntity(map));\r\n    Assertions.assertEquals(function, function2);\r\n    Assertions.assertEquals(function2.getValue(), function2.getValue());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\skywalking\\oap-server\\server-core\\src\\test\\java\\org\\apache\\skywalking\\oap\\server\\core\\analysis\\meter\\function\\sumpermin\\SumPerMinFunctionTest.java",
  "methodName" : "testAccept",
  "sourceCode" : "@Test\r\npublic void testAccept() {\r\n    long time1 = 1597113318673L;\r\n    function.accept(MeterEntity.newService(\"sum_sync_time\", Layer.GENERAL), time1);\r\n    function.calculate();\r\n    assertThat(function.getValue()).isEqualTo(time1);\r\n    long time2 = 1597113447737L;\r\n    function.accept(MeterEntity.newService(\"sum_sync_time\", Layer.GENERAL), time2);\r\n    function.calculate();\r\n    assertThat(function.getValue()).isEqualTo(time1 + time2);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\skywalking\\oap-server\\server-core\\src\\test\\java\\org\\apache\\skywalking\\oap\\server\\core\\analysis\\meter\\function\\sumpermin\\SumPerMinFunctionTest.java",
  "methodName" : "testCalculate",
  "sourceCode" : "@Test\r\npublic void testCalculate() {\r\n    long time1 = 1597113318673L;\r\n    long time2 = 1597113447737L;\r\n    function.accept(MeterEntity.newService(\"sum_sync_time\", Layer.GENERAL), time1);\r\n    function.accept(MeterEntity.newService(\"sum_sync_time\", Layer.GENERAL), time2);\r\n    function.calculate();\r\n    assertThat(function.getValue()).isEqualTo(time1 + time2);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\skywalking\\oap-server\\server-core\\src\\test\\java\\org\\apache\\skywalking\\oap\\server\\core\\analysis\\meter\\function\\sumpermin\\SumPerMinFunctionTest.java",
  "methodName" : "testHour",
  "sourceCode" : "@Test\r\npublic void testHour() {\r\n    long time1 = 1597113318673L;\r\n    long time2 = 1597113447737L;\r\n    function.setTimeBucket(TimeBucket.getMinuteTimeBucket(System.currentTimeMillis()));\r\n    MeterEntity meterEntity = MeterEntity.newService(\"sum_sync_time\", Layer.GENERAL);\r\n    meterEntity.setAttr0(\"testAttr\");\r\n    function.accept(meterEntity, time1);\r\n    function.accept(meterEntity, time2);\r\n    function.calculate();\r\n    final SumPerMinFunction hourFunction = (SumPerMinFunction) function.toHour();\r\n    hourFunction.calculate();\r\n    assertThat(hourFunction.getValue()).isEqualTo((time1 + time2) / 60);\r\n    assertThat(hourFunction.getAttr0()).isEqualTo(function.getAttr0());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\skywalking\\oap-server\\server-core\\src\\test\\java\\org\\apache\\skywalking\\oap\\server\\core\\analysis\\meter\\function\\sumpermin\\SumPerMinFunctionTest.java",
  "methodName" : "testSerialize",
  "sourceCode" : "@Test\r\npublic void testSerialize() {\r\n    long time = 1597113447737L;\r\n    MeterEntity meterEntity = MeterEntity.newService(\"sum_sync_time\", Layer.GENERAL);\r\n    meterEntity.setAttr0(\"testAttr\");\r\n    function.accept(meterEntity, time);\r\n    SumPerMinFunction function2 = Mockito.spy(SumPerMinFunction.class);\r\n    function2.deserialize(function.serialize().build());\r\n    assertThat(function2.getEntityId()).isEqualTo(function.getEntityId());\r\n    assertThat(function2.getTimeBucket()).isEqualTo(function.getTimeBucket());\r\n    assertThat(function2.getAttr0()).isEqualTo(function.getAttr0());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\skywalking\\oap-server\\server-core\\src\\test\\java\\org\\apache\\skywalking\\oap\\server\\core\\analysis\\meter\\function\\sumpermin\\SumPerMinFunctionTest.java",
  "methodName" : "testBuilder",
  "sourceCode" : "@Test\r\npublic void testBuilder() throws IllegalAccessException, InstantiationException {\r\n    long time = 1597113447737L;\r\n    MeterEntity meterEntity = MeterEntity.newService(\"sum_sync_time\", Layer.GENERAL);\r\n    meterEntity.setAttr0(\"testAttr\");\r\n    function.accept(meterEntity, time);\r\n    function.calculate();\r\n    StorageBuilder<SumPerMinFunction> storageBuilder = function.builder().newInstance();\r\n    final HashMapConverter.ToStorage toStorage = new HashMapConverter.ToStorage();\r\n    storageBuilder.entity2Storage(function, toStorage);\r\n    final Map<String, Object> map = toStorage.obtain();\r\n    map.put(SumPerMinFunction.VALUE, map.get(SumPerMinFunction.VALUE));\r\n    SumPerMinFunction function2 = storageBuilder.storage2Entity(new HashMapConverter.ToEntity(map));\r\n    assertThat(function2.getValue()).isEqualTo(function.getValue());\r\n    assertThat(function2.getAttr0()).isEqualTo(function.getAttr0());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\skywalking\\oap-server\\server-core\\src\\test\\java\\org\\apache\\skywalking\\oap\\server\\core\\analysis\\meter\\function\\sumpermin\\SumPerMinLabeledFunctionTest.java",
  "methodName" : "testAccept",
  "sourceCode" : "@Test\r\npublic void testAccept() {\r\n    function.accept(MeterEntity.newService(\"sum_sync_time\", Layer.GENERAL), table1);\r\n    function.calculate();\r\n    assertThat(function.getValue()).isEqualTo(table1);\r\n    function.accept(MeterEntity.newService(\"sum_sync_time\", Layer.GENERAL), table2);\r\n    function.calculate();\r\n    assertThat(function.getValue()).isEqualTo(table1.append(table2));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\skywalking\\oap-server\\server-core\\src\\test\\java\\org\\apache\\skywalking\\oap\\server\\core\\analysis\\meter\\function\\sumpermin\\SumPerMinLabeledFunctionTest.java",
  "methodName" : "testCalculate",
  "sourceCode" : "@Test\r\npublic void testCalculate() {\r\n    function.accept(MeterEntity.newService(\"sum_sync_time\", Layer.GENERAL), table1);\r\n    function.accept(MeterEntity.newService(\"sum_sync_time\", Layer.GENERAL), table2);\r\n    function.calculate();\r\n    assertThat(function.getValue()).isEqualTo(table1.append(table2));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\skywalking\\oap-server\\server-core\\src\\test\\java\\org\\apache\\skywalking\\oap\\server\\core\\analysis\\meter\\function\\sumpermin\\SumPerMinLabeledFunctionTest.java",
  "methodName" : "testHour",
  "sourceCode" : "@Test\r\npublic void testHour() {\r\n    function.setTimeBucket(TimeBucket.getMinuteTimeBucket(System.currentTimeMillis()));\r\n    function.accept(MeterEntity.newService(\"sum_sync_time\", Layer.GENERAL), table1);\r\n    function.accept(MeterEntity.newService(\"sum_sync_time\", Layer.GENERAL), table2);\r\n    function.calculate();\r\n    final SumPerMinLabeledFunction hourFunction = (SumPerMinLabeledFunction) function.toHour();\r\n    hourFunction.calculate();\r\n    final DataTable result = new DataTable();\r\n    result.append(table1);\r\n    result.append(table2);\r\n    for (String key : result.keys()) {\r\n        result.put(key, result.get(key) / 60);\r\n    }\r\n    assertThat(hourFunction.getValue()).isEqualTo(result);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\skywalking\\oap-server\\server-core\\src\\test\\java\\org\\apache\\skywalking\\oap\\server\\core\\analysis\\meter\\function\\sumpermin\\SumPerMinLabeledFunctionTest.java",
  "methodName" : "testSerialize",
  "sourceCode" : "@Test\r\npublic void testSerialize() {\r\n    function.accept(MeterEntity.newService(\"sum_sync_time\", Layer.GENERAL), table1);\r\n    SumPerMinLabeledFunction function2 = Mockito.spy(SumPerMinLabeledFunction.class);\r\n    function2.deserialize(function.serialize().build());\r\n    assertThat(function2.getEntityId()).isEqualTo(function.getEntityId());\r\n    assertThat(function2.getTimeBucket()).isEqualTo(function.getTimeBucket());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\skywalking\\oap-server\\server-core\\src\\test\\java\\org\\apache\\skywalking\\oap\\server\\core\\analysis\\meter\\function\\sumpermin\\SumPerMinLabeledFunctionTest.java",
  "methodName" : "testBuilder",
  "sourceCode" : "@Test\r\npublic void testBuilder() throws IllegalAccessException, InstantiationException {\r\n    function.accept(MeterEntity.newService(\"sum_sync_time\", Layer.GENERAL), table1);\r\n    function.calculate();\r\n    StorageBuilder<SumPerMinLabeledFunction> storageBuilder = function.builder().newInstance();\r\n    final HashMapConverter.ToStorage toStorage = new HashMapConverter.ToStorage();\r\n    storageBuilder.entity2Storage(function, toStorage);\r\n    final Map<String, Object> map = toStorage.obtain();\r\n    map.put(SumPerMinLabeledFunction.VALUE, ((DataTable) map.get(SumPerMinLabeledFunction.VALUE)).toStorageData());\r\n    map.put(SumPerMinLabeledFunction.TOTAL, ((DataTable) map.get(SumPerMinLabeledFunction.TOTAL)).toStorageData());\r\n    SumPerMinLabeledFunction function2 = storageBuilder.storage2Entity(new HashMapConverter.ToEntity(map));\r\n    assertThat(function2.getValue()).isEqualTo(function.getValue());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\skywalking\\oap-server\\server-core\\src\\test\\java\\org\\apache\\skywalking\\oap\\server\\core\\analysis\\meter\\MeterSystemTest.java",
  "methodName" : "testCreate",
  "sourceCode" : "@Test\r\npublic void testCreate() {\r\n    // validate with same name, function and scope types\r\n    meterSystem.create(\"test_meter\", \"avg\", ScopeType.SERVICE);\r\n    validateMeterDefinition(\"test_meter\", Long.class, ScopeType.SERVICE);\r\n    meterSystem.create(\"test_meter\", \"avg\", ScopeType.SERVICE);\r\n    validateMeterDefinition(\"test_meter\", Long.class, ScopeType.SERVICE);\r\n    // validate with same name, difference scope type\r\n    try {\r\n        meterSystem.create(\"test_meter\", \"avg\", ScopeType.SERVICE_INSTANCE);\r\n        throw new IllegalStateException();\r\n    } catch (IllegalArgumentException e) {\r\n        // If wrong arguments is means right\r\n    }\r\n    // validate with same name, difference function\r\n    try {\r\n        meterSystem.create(\"test_meter\", \"avgLabeled\", ScopeType.SERVICE);\r\n        throw new IllegalStateException();\r\n    } catch (IllegalArgumentException e) {\r\n        // If wrong arguments is means right\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\skywalking\\oap-server\\server-core\\src\\test\\java\\org\\apache\\skywalking\\oap\\server\\core\\analysis\\metrics\\ApdexMetricsTest.java",
  "methodName" : "testEntrance",
  "sourceCode" : "@Test\r\npublic void testEntrance() {\r\n    ApdexMetrics apdex = new ApdexMetricsImpl();\r\n    apdex.combine(200, \"foo\", true);\r\n    apdex.calculate();\r\n    assertThat(apdex.getValue()).isEqualTo(10000);\r\n    apdex = new ApdexMetricsImpl();\r\n    apdex.combine(1000, \"foo\", true);\r\n    apdex.calculate();\r\n    assertThat(apdex.getValue()).isEqualTo(5000);\r\n    apdex = new ApdexMetricsImpl();\r\n    apdex.combine(2000, \"foo\", true);\r\n    apdex.calculate();\r\n    assertThat(apdex.getValue()).isEqualTo(5000);\r\n    apdex = new ApdexMetricsImpl();\r\n    apdex.combine(200, \"foo\", true);\r\n    apdex.combine(300, \"bar\", true);\r\n    apdex.calculate();\r\n    assertThat(apdex.getValue()).isEqualTo(10000);\r\n    apdex = new ApdexMetricsImpl();\r\n    apdex.combine(200, \"foo\", true);\r\n    apdex.combine(1500, \"bar\", true);\r\n    apdex.calculate();\r\n    assertThat(apdex.getValue()).isEqualTo(7500);\r\n    apdex = new ApdexMetricsImpl();\r\n    apdex.combine(200, \"foo\", true);\r\n    apdex.combine(300, \"bar\", false);\r\n    apdex.calculate();\r\n    assertThat(apdex.getValue()).isEqualTo(5000);\r\n    apdex = new ApdexMetricsImpl();\r\n    apdex.combine(200, \"foo\", true);\r\n    apdex.combine(1500, \"bar\", false);\r\n    apdex.calculate();\r\n    assertThat(apdex.getValue()).isEqualTo(5000);\r\n    apdex = new ApdexMetricsImpl();\r\n    apdex.combine(200, \"foo\", true);\r\n    apdex.combine(5000, \"bar\", true);\r\n    apdex.calculate();\r\n    assertThat(apdex.getValue()).isEqualTo(5000);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\skywalking\\oap-server\\server-core\\src\\test\\java\\org\\apache\\skywalking\\oap\\server\\core\\analysis\\metrics\\ApdexMetricsTest.java",
  "methodName" : "testCombine",
  "sourceCode" : "@Test\r\npublic void testCombine() {\r\n    ApdexMetrics apdex1 = new ApdexMetricsImpl();\r\n    apdex1.combine(200, \"foo\", true);\r\n    apdex1.combine(300, \"bar\", true);\r\n    apdex1.combine(200, \"foo\", true);\r\n    apdex1.combine(1500, \"bar\", true);\r\n    ApdexMetrics apdex2 = new ApdexMetricsImpl();\r\n    apdex2.combine(200, \"foo\", true);\r\n    apdex2.combine(300, \"bar\", false);\r\n    apdex2.combine(200, \"foo\", true);\r\n    apdex2.combine(1500, \"bar\", false);\r\n    apdex2.combine(200, \"foo\", true);\r\n    apdex2.combine(5000, \"bar\", true);\r\n    apdex1.combine(apdex2);\r\n    apdex1.calculate();\r\n    assertThat(apdex1.getValue()).isEqualTo(6500);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\skywalking\\oap-server\\server-core\\src\\test\\java\\org\\apache\\skywalking\\oap\\server\\core\\analysis\\metrics\\CountMetricsTest.java",
  "methodName" : "testEntranceCombine",
  "sourceCode" : "@Test\r\npublic void testEntranceCombine() {\r\n    CountMetricsImpl impl = new CountMetricsImpl();\r\n    impl.combine(5);\r\n    impl.combine(6);\r\n    impl.combine(7);\r\n    impl.calculate();\r\n    Assertions.assertEquals(18, impl.getValue());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\skywalking\\oap-server\\server-core\\src\\test\\java\\org\\apache\\skywalking\\oap\\server\\core\\analysis\\metrics\\CountMetricsTest.java",
  "methodName" : "testSelfCombine",
  "sourceCode" : "@Test\r\npublic void testSelfCombine() {\r\n    CountMetricsImpl impl = new CountMetricsImpl();\r\n    impl.combine(5);\r\n    impl.combine(6);\r\n    impl.combine(7);\r\n    CountMetricsImpl impl2 = new CountMetricsImpl();\r\n    impl2.combine(5);\r\n    impl2.combine(6);\r\n    impl2.combine(7);\r\n    impl.combine(impl2);\r\n    impl.calculate();\r\n    Assertions.assertEquals(36, impl.getValue());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\skywalking\\oap-server\\server-core\\src\\test\\java\\org\\apache\\skywalking\\oap\\server\\core\\analysis\\metrics\\DataTableTestCase.java",
  "methodName" : "toStorageData",
  "sourceCode" : "@Test\r\npublic void toStorageData() {\r\n    assertEquals(\"1,100|2,200|5,500|6,600|7,700\", dataTable.toStorageData());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\skywalking\\oap-server\\server-core\\src\\test\\java\\org\\apache\\skywalking\\oap\\server\\core\\analysis\\metrics\\DataTableTestCase.java",
  "methodName" : "toObject",
  "sourceCode" : "@Test\r\npublic void toObject() {\r\n    DataTable dataTable = new DataTable();\r\n    dataTable.toObject(\"1,100|2,200|5,500|6,600|7,700\");\r\n    assertEquals(100, dataTable.get(\"1\").intValue());\r\n    assertEquals(200, dataTable.get(\"2\").intValue());\r\n    assertEquals(500, dataTable.get(\"5\").intValue());\r\n    assertEquals(600, dataTable.get(\"6\").intValue());\r\n    assertEquals(700, dataTable.get(\"7\").intValue());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\skywalking\\oap-server\\server-core\\src\\test\\java\\org\\apache\\skywalking\\oap\\server\\core\\analysis\\metrics\\DataTableTestCase.java",
  "methodName" : "copyFrom",
  "sourceCode" : "@Test\r\npublic void copyFrom() {\r\n    DataTable dataTable = new DataTable();\r\n    dataTable.append(this.dataTable);\r\n    assertEquals(\"1,100|2,200|5,500|6,600|7,700\", dataTable.toStorageData());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\skywalking\\oap-server\\server-core\\src\\test\\java\\org\\apache\\skywalking\\oap\\server\\core\\analysis\\metrics\\expression\\ContainMatchTest.java",
  "methodName" : "match",
  "sourceCode" : "@Test\r\npublic void match() {\r\n    ContainMatch containMatch = new ContainMatch();\r\n    assertFalse(containMatch.match(null, \"http.method:GET\"));\r\n    assertTrue(containMatch.match(Arrays.asList(\"http.method:GET\", \"http.method:POST\"), \"http.method:GET\"));\r\n    assertFalse(containMatch.match(Arrays.asList(\"http.method:GET\", \"http.method:POST\"), \"http.method:PUT\"));\r\n    assertTrue(containMatch.match(Arrays.asList(1, 2, 3), 2));\r\n    assertFalse(containMatch.match(Arrays.asList(1, 2, 3), 4));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\skywalking\\oap-server\\server-core\\src\\test\\java\\org\\apache\\skywalking\\oap\\server\\core\\analysis\\metrics\\expression\\InMatchTest.java",
  "methodName" : "testIn",
  "sourceCode" : "@Test\r\npublic void testIn() {\r\n    Assertions.assertTrue(new InMatch().match(\"a\", new Object[] { \"\\\"a\\\"\", \"\\\"b\\\"\" }));\r\n    Assertions.assertFalse(new InMatch().match(\"c\", new Object[] { \"\\\"a\\\"\", \"\\\"b\\\"\" }));\r\n    Assertions.assertTrue(new InMatch().match(RequestType.RPC, new Object[] { RequestType.HTTP, RequestType.DATABASE, RequestType.RPC }));\r\n    Assertions.assertFalse(new InMatch().match(RequestType.gRPC, new Object[] { RequestType.HTTP, RequestType.DATABASE, RequestType.RPC }));\r\n    Assertions.assertTrue(new InMatch().match(1, new long[] { 1, 2, 3 }));\r\n    Assertions.assertFalse(new InMatch().match(4, new long[] { 1, 2, 3 }));\r\n    Assertions.assertTrue(new InMatch().match(1L, new long[] { 1, 2, 3 }));\r\n    Assertions.assertFalse(new InMatch().match(4L, new long[] { 1, 2, 3 }));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\skywalking\\oap-server\\server-core\\src\\test\\java\\org\\apache\\skywalking\\oap\\server\\core\\analysis\\metrics\\expression\\LikeMatchTest.java",
  "methodName" : "testLike",
  "sourceCode" : "@Test\r\npublic void testLike() {\r\n    assertTrue(new LikeMatch().match(\"MaxBlack\", \"%Black\"));\r\n    assertTrue(new LikeMatch().match(\"MaxBlack\", \"Max%\"));\r\n    assertTrue(new LikeMatch().match(\"MaxBlack\", \"%axBl%\"));\r\n    assertFalse(new LikeMatch().match(\"CarolineChanning\", \"Max%\"));\r\n    assertFalse(new LikeMatch().match(\"CarolineChanning\", \"%Max\"));\r\n    assertTrue(new LikeMatch().match(\"MaxBlack\", \"\\\"%Black\\\"\"));\r\n    assertFalse(new LikeMatch().match(\"CarolineChanning\", \"\\\"Max%\\\"\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\skywalking\\oap-server\\server-core\\src\\test\\java\\org\\apache\\skywalking\\oap\\server\\core\\analysis\\metrics\\expression\\NotContainMatchTest.java",
  "methodName" : "match",
  "sourceCode" : "@Test\r\npublic void match() {\r\n    NotContainMatch notContainMatch = new NotContainMatch();\r\n    assertFalse(notContainMatch.match(null, \"http.method:GET\"));\r\n    assertFalse(notContainMatch.match(Arrays.asList(\"http.method:GET\", \"http.method:POST\"), \"http.method:GET\"));\r\n    assertTrue(notContainMatch.match(Arrays.asList(\"http.method:GET\", \"http.method:POST\"), \"http.method:PUT\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\skywalking\\oap-server\\server-core\\src\\test\\java\\org\\apache\\skywalking\\oap\\server\\core\\analysis\\metrics\\expression\\NumberMatchTest.java",
  "methodName" : "integerShouldEqual",
  "sourceCode" : "@Test\r\npublic void integerShouldEqual() {\r\n    Integer a = 334;\r\n    Integer b = 334;\r\n    boolean match = new NumberMatch().match(a, b);\r\n    assertTrue(match);\r\n    a = -123;\r\n    b = -123;\r\n    match = new NumberMatch().match(a, b);\r\n    assertTrue(match);\r\n    a = -122;\r\n    b = -123;\r\n    match = new NumberMatch().match(a, b);\r\n    assertFalse(match);\r\n    a = -123;\r\n    b = -122;\r\n    match = new NumberMatch().match(a, b);\r\n    assertFalse(match);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\skywalking\\oap-server\\server-core\\src\\test\\java\\org\\apache\\skywalking\\oap\\server\\core\\analysis\\metrics\\expression\\NumberMatchTest.java",
  "methodName" : "intShouldEqual",
  "sourceCode" : "@Test\r\npublic void intShouldEqual() {\r\n    int a = 334;\r\n    int b = 334;\r\n    boolean match = new NumberMatch().match(a, b);\r\n    assertTrue(match);\r\n    a = -123;\r\n    b = -123;\r\n    match = new NumberMatch().match(a, b);\r\n    assertTrue(match);\r\n    a = -122;\r\n    b = -123;\r\n    match = new NumberMatch().match(a, b);\r\n    assertFalse(match);\r\n    a = -123;\r\n    b = -122;\r\n    match = new NumberMatch().match(a, b);\r\n    assertFalse(match);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\skywalking\\oap-server\\server-core\\src\\test\\java\\org\\apache\\skywalking\\oap\\server\\core\\analysis\\metrics\\expression\\NumberMatchTest.java",
  "methodName" : "longShouldEqual",
  "sourceCode" : "@Test\r\npublic void longShouldEqual() {\r\n    long a = 21474836478L;\r\n    long b = 21474836478L;\r\n    boolean match = new NumberMatch().match(a, b);\r\n    assertTrue(match);\r\n    a = -21474836478L;\r\n    b = -21474836479L;\r\n    match = new NumberMatch().match(a, b);\r\n    assertFalse(match);\r\n    Long c = -123L;\r\n    Long d = -123L;\r\n    match = new NumberMatch().match(c, d);\r\n    assertTrue(match);\r\n    c = -21474836478L;\r\n    d = -21474836479L;\r\n    match = new NumberMatch().match(c, d);\r\n    assertFalse(match);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\skywalking\\oap-server\\server-core\\src\\test\\java\\org\\apache\\skywalking\\oap\\server\\core\\analysis\\metrics\\expression\\StringMatchTest.java",
  "methodName" : "integerShouldEqualWhenLargerThan128",
  "sourceCode" : "@Test\r\npublic void integerShouldEqualWhenLargerThan128() {\r\n    Integer a = 334;\r\n    Integer b = 334;\r\n    boolean match = new StringMatch().match(a, b);\r\n    assertTrue(match);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\skywalking\\oap-server\\server-core\\src\\test\\java\\org\\apache\\skywalking\\oap\\server\\core\\analysis\\metrics\\expression\\StringMatchTest.java",
  "methodName" : "longShouldEqualWhenLargerThan128",
  "sourceCode" : "@Test\r\npublic void longShouldEqualWhenLargerThan128() {\r\n    Long a = 334L;\r\n    Long b = 334L;\r\n    boolean match = new StringMatch().match(a, b);\r\n    assertTrue(match);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\skywalking\\oap-server\\server-core\\src\\test\\java\\org\\apache\\skywalking\\oap\\server\\core\\analysis\\metrics\\expression\\StringMatchTest.java",
  "methodName" : "doubleShouldEqualWhenLargerThan128",
  "sourceCode" : "@Test\r\npublic void doubleShouldEqualWhenLargerThan128() {\r\n    Double a = 334.0;\r\n    Double b = 334.0;\r\n    boolean match = new StringMatch().match(a, b);\r\n    assertTrue(match);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\skywalking\\oap-server\\server-core\\src\\test\\java\\org\\apache\\skywalking\\oap\\server\\core\\analysis\\metrics\\expression\\StringMatchTest.java",
  "methodName" : "floatShouldEqualWhenLargerThan128",
  "sourceCode" : "@Test\r\npublic void floatShouldEqualWhenLargerThan128() {\r\n    Float a = 334.0F;\r\n    Float b = 334.0F;\r\n    boolean match = new StringMatch().match(a, b);\r\n    assertTrue(match);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\skywalking\\oap-server\\server-core\\src\\test\\java\\org\\apache\\skywalking\\oap\\server\\core\\analysis\\metrics\\expression\\StringMatchTest.java",
  "methodName" : "stringShouldEqual",
  "sourceCode" : "@Test\r\npublic void stringShouldEqual() {\r\n    assertTrue(new StringMatch().match(\"\\\"a\\\"\", \"a\"));\r\n    assertTrue(new StringMatch().match(\"a\", \"a\"));\r\n    assertFalse(new StringMatch().match(\"\\\"a\\\"\", \"ab\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\skywalking\\oap-server\\server-core\\src\\test\\java\\org\\apache\\skywalking\\oap\\server\\core\\analysis\\metrics\\HeatMapMetricsTest.java",
  "methodName" : "testEntrance",
  "sourceCode" : "@Test\r\npublic void testEntrance() {\r\n    HistogramMetricsMocker metricsMocker = new HistogramMetricsMocker();\r\n    metricsMocker.combine(2000, step, maxNumOfSteps);\r\n    metricsMocker.combine(110, step, maxNumOfSteps);\r\n    metricsMocker.combine(100, step, maxNumOfSteps);\r\n    metricsMocker.combine(100, step, maxNumOfSteps);\r\n    metricsMocker.combine(100, step, maxNumOfSteps);\r\n    metricsMocker.combine(50, step, maxNumOfSteps);\r\n    metricsMocker.combine(50, step, maxNumOfSteps);\r\n    metricsMocker.combine(28, step, maxNumOfSteps);\r\n    metricsMocker.combine(50, step, maxNumOfSteps);\r\n    metricsMocker.combine(61, step, maxNumOfSteps);\r\n    metricsMocker.combine(100, step, maxNumOfSteps);\r\n    metricsMocker.combine(100, step, maxNumOfSteps);\r\n    metricsMocker.combine(100, step, maxNumOfSteps);\r\n    final DataTable dataset = metricsMocker.getDataset();\r\n    Assertions.assertEquals(11, dataset.size());\r\n    Assertions.assertEquals(1, dataset.get(\"20\").intValue());\r\n    Assertions.assertEquals(3, dataset.get(\"50\").intValue());\r\n    Assertions.assertEquals(1, dataset.get(\"60\").intValue());\r\n    Assertions.assertEquals(8, dataset.get(\"100\").intValue());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\skywalking\\oap-server\\server-core\\src\\test\\java\\org\\apache\\skywalking\\oap\\server\\core\\analysis\\metrics\\HeatMapMetricsTest.java",
  "methodName" : "testMerge",
  "sourceCode" : "@Test\r\npublic void testMerge() {\r\n    HistogramMetricsMocker metricsMocker = new HistogramMetricsMocker();\r\n    metricsMocker.combine(2000, step, maxNumOfSteps);\r\n    metricsMocker.combine(110, step, maxNumOfSteps);\r\n    metricsMocker.combine(100, step, maxNumOfSteps);\r\n    metricsMocker.combine(100, step, maxNumOfSteps);\r\n    metricsMocker.combine(100, step, maxNumOfSteps);\r\n    metricsMocker.combine(50, step, maxNumOfSteps);\r\n    metricsMocker.combine(50, step, maxNumOfSteps);\r\n    HistogramMetricsMocker metricsMocker1 = new HistogramMetricsMocker();\r\n    metricsMocker1.combine(28, step, maxNumOfSteps);\r\n    metricsMocker1.combine(50, step, maxNumOfSteps);\r\n    metricsMocker1.combine(61, step, maxNumOfSteps);\r\n    metricsMocker1.combine(100, step, maxNumOfSteps);\r\n    metricsMocker1.combine(100, step, maxNumOfSteps);\r\n    metricsMocker1.combine(100, step, maxNumOfSteps);\r\n    metricsMocker.combine(metricsMocker1);\r\n    final DataTable dataset = metricsMocker.getDataset();\r\n    Assertions.assertEquals(11, dataset.size());\r\n    Assertions.assertEquals(1, dataset.get(\"20\").intValue());\r\n    Assertions.assertEquals(3, dataset.get(\"50\").intValue());\r\n    Assertions.assertEquals(1, dataset.get(\"60\").intValue());\r\n    Assertions.assertEquals(8, dataset.get(\"100\").intValue());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\skywalking\\oap-server\\server-core\\src\\test\\java\\org\\apache\\skywalking\\oap\\server\\core\\analysis\\metrics\\LongAvgMetricsTest.java",
  "methodName" : "testEntranceCombine",
  "sourceCode" : "@Test\r\npublic void testEntranceCombine() {\r\n    LongAvgMetricsImpl impl = new LongAvgMetricsImpl();\r\n    impl.combine(12, 1);\r\n    impl.combine(24, 2);\r\n    impl.combine(36, 3);\r\n    impl.calculate();\r\n    Assertions.assertEquals(12, impl.getValue());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\skywalking\\oap-server\\server-core\\src\\test\\java\\org\\apache\\skywalking\\oap\\server\\core\\analysis\\metrics\\LongAvgMetricsTest.java",
  "methodName" : "testSelfCombine",
  "sourceCode" : "@Test\r\npublic void testSelfCombine() {\r\n    LongAvgMetricsImpl impl = new LongAvgMetricsImpl();\r\n    impl.combine(12, 1);\r\n    impl.combine(24, 2);\r\n    LongAvgMetricsImpl impl2 = new LongAvgMetricsImpl();\r\n    impl2.combine(24, 1);\r\n    impl2.combine(48, 2);\r\n    impl.combine(impl2);\r\n    impl.calculate();\r\n    Assertions.assertEquals(18, impl.getValue());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\skywalking\\oap-server\\server-core\\src\\test\\java\\org\\apache\\skywalking\\oap\\server\\core\\analysis\\metrics\\MaxLongMetricsTest.java",
  "methodName" : "testEntranceCombine",
  "sourceCode" : "@Test\r\npublic void testEntranceCombine() {\r\n    MaxLongMetricsImpl impl = new MaxLongMetricsImpl();\r\n    impl.combine(10);\r\n    impl.combine(5);\r\n    impl.combine(20);\r\n    impl.calculate();\r\n    Assertions.assertEquals(20, impl.getValue());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\skywalking\\oap-server\\server-core\\src\\test\\java\\org\\apache\\skywalking\\oap\\server\\core\\analysis\\metrics\\MaxLongMetricsTest.java",
  "methodName" : "testSelfCombine",
  "sourceCode" : "@Test\r\npublic void testSelfCombine() {\r\n    MaxLongMetricsImpl impl = new MaxLongMetricsImpl();\r\n    impl.combine(10);\r\n    impl.combine(5);\r\n    MaxLongMetricsImpl impl2 = new MaxLongMetricsImpl();\r\n    impl2.combine(2);\r\n    impl2.combine(6);\r\n    impl.combine(impl2);\r\n    Assertions.assertEquals(10, impl.getValue());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\skywalking\\oap-server\\server-core\\src\\test\\java\\org\\apache\\skywalking\\oap\\server\\core\\analysis\\metrics\\MetricsTest.java",
  "methodName" : "testTransferToTimeBucket",
  "sourceCode" : "@Test\r\npublic void testTransferToTimeBucket() {\r\n    MetricsMocker mocker = new MetricsMocker();\r\n    mocker.setTimeBucket(201809120511L);\r\n    Assertions.assertEquals(2018091205L, mocker.toTimeBucketInHour());\r\n    Assertions.assertEquals(20180912L, mocker.toTimeBucketInDay());\r\n    mocker = new MetricsMocker();\r\n    mocker.setTimeBucket(2018091205L);\r\n    Assertions.assertEquals(20180912L, mocker.toTimeBucketInDay());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\skywalking\\oap-server\\server-core\\src\\test\\java\\org\\apache\\skywalking\\oap\\server\\core\\analysis\\metrics\\MetricsTest.java",
  "methodName" : "testIllegalTransferToTimeBucket",
  "sourceCode" : "@Test\r\npublic void testIllegalTransferToTimeBucket() {\r\n    MetricsMocker mocker = new MetricsMocker();\r\n    mocker.setTimeBucket(2018091205L);\r\n    boolean status = true;\r\n    try {\r\n        mocker.toTimeBucketInHour();\r\n    } catch (IllegalStateException e) {\r\n        status = false;\r\n    }\r\n    Assertions.assertFalse(status);\r\n    mocker = new MetricsMocker();\r\n    mocker.setTimeBucket(20180912L);\r\n    status = true;\r\n    try {\r\n        mocker.toTimeBucketInHour();\r\n    } catch (IllegalStateException e) {\r\n        status = false;\r\n    }\r\n    Assertions.assertFalse(status);\r\n    status = true;\r\n    try {\r\n        mocker.toTimeBucketInDay();\r\n    } catch (IllegalStateException e) {\r\n        status = false;\r\n    }\r\n    Assertions.assertFalse(status);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\skywalking\\oap-server\\server-core\\src\\test\\java\\org\\apache\\skywalking\\oap\\server\\core\\analysis\\metrics\\MinLongMetricsTest.java",
  "methodName" : "testEntranceCombine",
  "sourceCode" : "@Test\r\npublic void testEntranceCombine() {\r\n    MinLongMetricsImpl impl = new MinLongMetricsImpl();\r\n    impl.combine(10);\r\n    impl.combine(5);\r\n    impl.combine(20);\r\n    impl.calculate();\r\n    Assertions.assertEquals(5, impl.getValue());\r\n    MinLongMetricsImpl impl2 = new MinLongMetricsImpl();\r\n    impl2.combine(10);\r\n    impl2.combine(0);\r\n    impl2.combine(10000);\r\n    impl2.calculate();\r\n    Assertions.assertEquals(0, impl2.getValue());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\skywalking\\oap-server\\server-core\\src\\test\\java\\org\\apache\\skywalking\\oap\\server\\core\\analysis\\metrics\\MinLongMetricsTest.java",
  "methodName" : "testSelfCombine",
  "sourceCode" : "@Test\r\npublic void testSelfCombine() {\r\n    MinLongMetricsImpl impl = new MinLongMetricsImpl();\r\n    impl.combine(10);\r\n    impl.combine(5);\r\n    MinLongMetricsImpl impl2 = new MinLongMetricsImpl();\r\n    impl2.combine(2);\r\n    impl2.combine(6);\r\n    impl.combine(impl2);\r\n    Assertions.assertEquals(2, impl.getValue());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\skywalking\\oap-server\\server-core\\src\\test\\java\\org\\apache\\skywalking\\oap\\server\\core\\analysis\\metrics\\PercentileMetricsTest.java",
  "methodName" : "percentileTest",
  "sourceCode" : "@Test\r\npublic void percentileTest() {\r\n    PercentileMetricsTest.PercentileMetricsMocker metricsMocker = new PercentileMetricsTest.PercentileMetricsMocker();\r\n    metricsMocker.combine(110, precision);\r\n    metricsMocker.combine(90, precision);\r\n    metricsMocker.combine(95, precision);\r\n    metricsMocker.combine(99, precision);\r\n    metricsMocker.combine(50, precision);\r\n    metricsMocker.combine(50, precision);\r\n    metricsMocker.combine(50, precision);\r\n    metricsMocker.combine(50, precision);\r\n    metricsMocker.combine(50, precision);\r\n    metricsMocker.combine(75, precision);\r\n    metricsMocker.combine(75, precision);\r\n    metricsMocker.calculate();\r\n    Assertions.assertArrayEquals(new int[] { 70, 90, 90, 90, 110 }, metricsMocker.getValues());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\skywalking\\oap-server\\server-core\\src\\test\\java\\org\\apache\\skywalking\\oap\\server\\core\\analysis\\metrics\\PercentileMetricsTest.java",
  "methodName" : "percentileTest2",
  "sourceCode" : "@Test\r\npublic void percentileTest2() {\r\n    PercentileMetricsTest.PercentileMetricsMocker metricsMocker = new PercentileMetricsTest.PercentileMetricsMocker();\r\n    metricsMocker.combine(90, precision);\r\n    metricsMocker.combine(90, precision);\r\n    metricsMocker.combine(90, precision);\r\n    metricsMocker.combine(90, precision);\r\n    metricsMocker.combine(90, precision);\r\n    metricsMocker.combine(90, precision);\r\n    metricsMocker.combine(90, precision);\r\n    metricsMocker.combine(90, precision);\r\n    metricsMocker.combine(90, precision);\r\n    metricsMocker.combine(90, precision);\r\n    metricsMocker.combine(90, precision);\r\n    metricsMocker.calculate();\r\n    Assertions.assertArrayEquals(new int[] { 90, 90, 90, 90, 90 }, metricsMocker.getValues());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\skywalking\\oap-server\\server-core\\src\\test\\java\\org\\apache\\skywalking\\oap\\server\\core\\analysis\\metrics\\PercentileMetricsTest.java",
  "methodName" : "percentileTest3",
  "sourceCode" : "@Test\r\npublic void percentileTest3() {\r\n    PercentileMetricsTest.PercentileMetricsMocker metricsMocker = new PercentileMetricsTest.PercentileMetricsMocker();\r\n    metricsMocker.combine(90, precision);\r\n    metricsMocker.combine(110, precision);\r\n    metricsMocker.calculate();\r\n    Assertions.assertArrayEquals(new int[] { 90, 110, 110, 110, 110 }, metricsMocker.getValues());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\skywalking\\oap-server\\server-core\\src\\test\\java\\org\\apache\\skywalking\\oap\\server\\core\\analysis\\metrics\\PercentileMetricsTest.java",
  "methodName" : "percentileTest4",
  "sourceCode" : "@Test\r\npublic void percentileTest4() {\r\n    PercentileMetricsTest.PercentileMetricsMocker metricsMocker = new PercentileMetricsTest.PercentileMetricsMocker();\r\n    metricsMocker.combine(0, precision);\r\n    metricsMocker.combine(0, precision);\r\n    metricsMocker.calculate();\r\n    Assertions.assertArrayEquals(new int[] { 0, 0, 0, 0, 0 }, metricsMocker.getValues());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\skywalking\\oap-server\\server-core\\src\\test\\java\\org\\apache\\skywalking\\oap\\server\\core\\analysis\\metrics\\PercentMetricsTest.java",
  "methodName" : "testEntranceCombine",
  "sourceCode" : "@Test\r\npublic void testEntranceCombine() {\r\n    PercentMetricsImpl impl = new PercentMetricsImpl();\r\n    impl.combine(new StringMatch().match(true, true));\r\n    impl.combine(new StringMatch().match(true, false));\r\n    impl.combine(new StringMatch().match(true, false));\r\n    impl.calculate();\r\n    Assertions.assertEquals(3333, impl.getValue());\r\n    impl = new PercentMetricsImpl();\r\n    impl.combine(new StringMatch().match(true, true));\r\n    impl.combine(new StringMatch().match(true, true));\r\n    impl.combine(new StringMatch().match(true, false));\r\n    impl.calculate();\r\n    Assertions.assertEquals(6666, impl.getValue());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\skywalking\\oap-server\\server-core\\src\\test\\java\\org\\apache\\skywalking\\oap\\server\\core\\analysis\\metrics\\PercentMetricsTest.java",
  "methodName" : "testSelfCombine",
  "sourceCode" : "@Test\r\npublic void testSelfCombine() {\r\n    PercentMetricsImpl impl = new PercentMetricsImpl();\r\n    impl.combine(new StringMatch().match(true, true));\r\n    impl.combine(new StringMatch().match(true, false));\r\n    impl.combine(new StringMatch().match(true, false));\r\n    PercentMetricsImpl impl2 = new PercentMetricsImpl();\r\n    impl2.combine(new StringMatch().match(true, true));\r\n    impl2.combine(new StringMatch().match(true, true));\r\n    impl2.combine(new StringMatch().match(true, false));\r\n    impl.combine(impl2);\r\n    impl.calculate();\r\n    Assertions.assertEquals(5000, impl.getValue());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\skywalking\\oap-server\\server-core\\src\\test\\java\\org\\apache\\skywalking\\oap\\server\\core\\analysis\\TimeBucketTest.java",
  "methodName" : "testConversion",
  "sourceCode" : "@ParameterizedTest\r\n@MethodSource(\"parameters\")\r\npublic void testConversion(DownSampling downSampling) {\r\n    long timestamp = TimeBucket.getTimestamp(TimeBucket.getTimeBucket(NOW, downSampling));\r\n    Calendar instance = Calendar.getInstance(TimeZone.getDefault());\r\n    instance.setTimeInMillis(NOW);\r\n    switch(downSampling) {\r\n        case Day:\r\n            {\r\n                instance.set(Calendar.HOUR_OF_DAY, 0);\r\n                // Fall through\r\n            }\r\n        case Hour:\r\n            {\r\n                instance.set(Calendar.MINUTE, 0);\r\n                // Fall through\r\n            }\r\n        case Minute:\r\n            {\r\n                instance.set(Calendar.SECOND, 0);\r\n                // Fall through\r\n            }\r\n        case Second:\r\n            {\r\n                instance.set(Calendar.MILLISECOND, 0);\r\n                // Fall through\r\n            }\r\n    }\r\n    Assertions.assertEquals(instance.getTimeInMillis(), timestamp);\r\n}",
  "annotations" : [ "ParameterizedTest" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\skywalking\\oap-server\\server-core\\src\\test\\java\\org\\apache\\skywalking\\oap\\server\\core\\analysis\\TimeBucketTest.java",
  "methodName" : "testRetainToDay4MinuteBucket",
  "sourceCode" : "@Test\r\npublic void testRetainToDay4MinuteBucket() {\r\n    Assertions.assertEquals(202407110000L, TimeBucket.retainToDay4MinuteBucket(202407112218L));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\skywalking\\oap-server\\server-core\\src\\test\\java\\org\\apache\\skywalking\\oap\\server\\core\\analysis\\TimeBucketTest.java",
  "methodName" : "testRetainToDayLastMin4MinuteBucket",
  "sourceCode" : "@Test\r\npublic void testRetainToDayLastMin4MinuteBucket() {\r\n    Assertions.assertEquals(202407112359L, TimeBucket.retainToDayLastMin4MinuteBucket(202407112218L));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\skywalking\\oap-server\\server-core\\src\\test\\java\\org\\apache\\skywalking\\oap\\server\\core\\cluster\\OAPNodeCheckerTest.java",
  "methodName" : "hasIllegalNodeAddressWithNull",
  "sourceCode" : "@Test\r\npublic void hasIllegalNodeAddressWithNull() {\r\n    boolean flag = OAPNodeChecker.hasIllegalNodeAddress(null);\r\n    Assertions.assertFalse(flag);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\skywalking\\oap-server\\server-core\\src\\test\\java\\org\\apache\\skywalking\\oap\\server\\core\\cluster\\OAPNodeCheckerTest.java",
  "methodName" : "hasIllegalNodeAddressWithEmptySet",
  "sourceCode" : "@Test\r\npublic void hasIllegalNodeAddressWithEmptySet() {\r\n    boolean flag = OAPNodeChecker.hasIllegalNodeAddress(Lists.newArrayList());\r\n    Assertions.assertFalse(flag);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\skywalking\\oap-server\\server-core\\src\\test\\java\\org\\apache\\skywalking\\oap\\server\\core\\cluster\\OAPNodeCheckerTest.java",
  "methodName" : "hasIllegalNodeAddressTrue",
  "sourceCode" : "@Test\r\npublic void hasIllegalNodeAddressTrue() {\r\n    List<RemoteInstance> remoteInstances = new ArrayList<>();\r\n    remoteInstances.add(new RemoteInstance(new Address(\"127.0.0.1\", 8899, true)));\r\n    remoteInstances.add(new RemoteInstance(new Address(\"123.23.4.2\", 8899, true)));\r\n    boolean flag = OAPNodeChecker.hasIllegalNodeAddress(remoteInstances);\r\n    Assertions.assertTrue(flag);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\skywalking\\oap-server\\server-core\\src\\test\\java\\org\\apache\\skywalking\\oap\\server\\core\\cluster\\OAPNodeCheckerTest.java",
  "methodName" : "hasIllegalNodeAddressFalse",
  "sourceCode" : "@Test\r\npublic void hasIllegalNodeAddressFalse() {\r\n    List<RemoteInstance> remoteInstances = new ArrayList<>();\r\n    remoteInstances.add(new RemoteInstance(new Address(\"123.23.4.2\", 8899, true)));\r\n    boolean flag = OAPNodeChecker.hasIllegalNodeAddress(remoteInstances);\r\n    Assertions.assertFalse(flag);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\skywalking\\oap-server\\server-core\\src\\test\\java\\org\\apache\\skywalking\\oap\\server\\core\\cluster\\OAPNodeCheckerTest.java",
  "methodName" : "unHealthWithEmptyInstance",
  "sourceCode" : "@Test\r\npublic void unHealthWithEmptyInstance() {\r\n    ClusterHealthStatus clusterHealthStatus = OAPNodeChecker.isHealth(Lists.newArrayList());\r\n    Assertions.assertFalse(clusterHealthStatus.isHealth());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\skywalking\\oap-server\\server-core\\src\\test\\java\\org\\apache\\skywalking\\oap\\server\\core\\cluster\\OAPNodeCheckerTest.java",
  "methodName" : "unHealthWithNullInstance",
  "sourceCode" : "@Test\r\npublic void unHealthWithNullInstance() {\r\n    ClusterHealthStatus clusterHealthStatus = OAPNodeChecker.isHealth(null);\r\n    Assertions.assertFalse(clusterHealthStatus.isHealth());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\skywalking\\oap-server\\server-core\\src\\test\\java\\org\\apache\\skywalking\\oap\\server\\core\\cluster\\OAPNodeCheckerTest.java",
  "methodName" : "unHealthWithEmptySelfInstance",
  "sourceCode" : "@Test\r\npublic void unHealthWithEmptySelfInstance() {\r\n    List<RemoteInstance> remoteInstances = new ArrayList<>();\r\n    remoteInstances.add(new RemoteInstance(new Address(\"192.168.0.1\", 8892, false)));\r\n    ClusterHealthStatus clusterHealthStatus = OAPNodeChecker.isHealth(remoteInstances);\r\n    Assertions.assertFalse(clusterHealthStatus.isHealth());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\skywalking\\oap-server\\server-core\\src\\test\\java\\org\\apache\\skywalking\\oap\\server\\core\\cluster\\OAPNodeCheckerTest.java",
  "methodName" : "unHealthWithIllegalNodeInstance",
  "sourceCode" : "@Test\r\npublic void unHealthWithIllegalNodeInstance() {\r\n    List<RemoteInstance> remoteInstances = new ArrayList<>();\r\n    remoteInstances.add(new RemoteInstance(new Address(\"192.168.0.1\", 8892, true)));\r\n    remoteInstances.add(new RemoteInstance(new Address(\"127.0.0.1\", 8892, true)));\r\n    ClusterHealthStatus clusterHealthStatus = OAPNodeChecker.isHealth(remoteInstances);\r\n    Assertions.assertFalse(clusterHealthStatus.isHealth());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\skywalking\\oap-server\\server-core\\src\\test\\java\\org\\apache\\skywalking\\oap\\server\\core\\cluster\\OAPNodeCheckerTest.java",
  "methodName" : "healthWithOnlySelf",
  "sourceCode" : "@Test\r\npublic void healthWithOnlySelf() {\r\n    List<RemoteInstance> remoteInstances = new ArrayList<>();\r\n    remoteInstances.add(new RemoteInstance(new Address(\"127.0.0.1\", 8899, true)));\r\n    ClusterHealthStatus clusterHealthStatus = OAPNodeChecker.isHealth(remoteInstances);\r\n    Assertions.assertTrue(clusterHealthStatus.isHealth());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\skywalking\\oap-server\\server-core\\src\\test\\java\\org\\apache\\skywalking\\oap\\server\\core\\cluster\\OAPNodeCheckerTest.java",
  "methodName" : "healthWithSelfAndNodes",
  "sourceCode" : "@Test\r\npublic void healthWithSelfAndNodes() {\r\n    List<RemoteInstance> remoteInstances = new ArrayList<>();\r\n    remoteInstances.add(new RemoteInstance(new Address(\"192.168.0.1\", 8899, true)));\r\n    remoteInstances.add(new RemoteInstance(new Address(\"192.168.0.2\", 8899, false)));\r\n    ClusterHealthStatus clusterHealthStatus = OAPNodeChecker.isHealth(remoteInstances);\r\n    Assertions.assertTrue(clusterHealthStatus.isHealth());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\skywalking\\oap-server\\server-core\\src\\test\\java\\org\\apache\\skywalking\\oap\\server\\core\\cluster\\OAPNodeCheckerTest.java",
  "methodName" : "healthWhenReceiverRoleWithEmptySelfInstance",
  "sourceCode" : "@Test\r\npublic void healthWhenReceiverRoleWithEmptySelfInstance() {\r\n    List<RemoteInstance> remoteInstances = new ArrayList<>();\r\n    remoteInstances.add(new RemoteInstance(new Address(\"192.168.0.1\", 8892, false)));\r\n    OAPNodeChecker.setROLE(CoreModuleConfig.Role.Receiver);\r\n    ClusterHealthStatus clusterHealthStatus = OAPNodeChecker.isHealth(remoteInstances);\r\n    Assertions.assertTrue(clusterHealthStatus.isHealth());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\skywalking\\oap-server\\server-core\\src\\test\\java\\org\\apache\\skywalking\\oap\\server\\core\\config\\ComponentLibraryCatalogFileTest.java",
  "methodName" : "testInitAndSettings",
  "sourceCode" : "@Test\r\npublic void testInitAndSettings() {\r\n    ComponentLibraryCatalogService service = new ComponentLibraryCatalogService();\r\n    Assertions.assertEquals(1, service.getComponentId(\"Tomcat\"));\r\n    Assertions.assertEquals(7, service.getServerIdBasedOnComponent(30));\r\n    Assertions.assertEquals(21, service.getServerIdBasedOnComponent(21));\r\n    Assertions.assertEquals(\"Redis\", service.getServerNameBasedOnComponent(30));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\skywalking\\oap-server\\server-core\\src\\test\\java\\org\\apache\\skywalking\\oap\\server\\core\\config\\ComponentLibraryCatalogFileTest.java",
  "methodName" : "testPriority",
  "sourceCode" : "/**\r\n * Test priority sequence, TCP < TLS(TCP) < RPC < HTTP < HTTPS < SpringMVC\r\n */\r\n@Test\r\npublic void testPriority() {\r\n    ComponentLibraryCatalogService service = new ComponentLibraryCatalogService();\r\n    Assertions.assertEquals(true, service.compare(service.getComponentId(\"Unknown\"), service.getComponentId(\"tcp\")));\r\n    Assertions.assertEquals(true, service.compare(service.getComponentId(\"tcp\"), service.getComponentId(\"tls\")));\r\n    Assertions.assertEquals(true, service.compare(service.getComponentId(\"tcp\"), service.getComponentId(\"mtls\")));\r\n    Assertions.assertEquals(true, service.compare(service.getComponentId(\"tls\"), service.getComponentId(\"rpc\")));\r\n    Assertions.assertEquals(true, service.compare(service.getComponentId(\"rpc\"), service.getComponentId(\"http\")));\r\n    Assertions.assertEquals(true, service.compare(service.getComponentId(\"http\"), service.getComponentId(\"https\")));\r\n    Assertions.assertEquals(true, service.compare(service.getComponentId(\"https\"), service.getComponentId(\"SpringMVC\")));\r\n    // Equal priority\r\n    Assertions.assertEquals(false, service.compare(service.getComponentId(\"Dubbo\"), service.getComponentId(\"SpringMVC\")));\r\n    Assertions.assertEquals(false, service.compare(service.getComponentId(\"SpringMVC\"), service.getComponentId(\"Dubbo\")));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\skywalking\\oap-server\\server-core\\src\\test\\java\\org\\apache\\skywalking\\oap\\server\\core\\config\\group\\EndpointGroupingRuleReaderTest.java",
  "methodName" : "testReadingRule",
  "sourceCode" : "@Test\r\npublic void testReadingRule() {\r\n    EndpointGroupingRuleReader reader = new EndpointGroupingRuleReader(this.getClass().getClassLoader().getResourceAsStream(\"endpoint-name-grouping.yml\"));\r\n    final QuickUriGroupingRule rule = reader.read();\r\n    StringFormatGroup.FormatResult formatResult = rule.format(\"serviceA\", \"/prod/123\");\r\n    Assertions.assertTrue(formatResult.isMatch());\r\n    Assertions.assertEquals(\"/prod/{var}\", formatResult.getReplacedName());\r\n    // This will always match, since after slicing length is 1, which goes into special handling\r\n    formatResult = rule.format(\"serviceA\", \"/prod/\");\r\n    Assertions.assertTrue(formatResult.isMatch());\r\n    Assertions.assertEquals(\"/prod/\", formatResult.getReplacedName());\r\n    formatResult = rule.format(\"serviceA\", \"/prod/123/456\");\r\n    Assertions.assertFalse(formatResult.isMatch());\r\n    Assertions.assertEquals(\"/prod/123/456\", formatResult.getReplacedName());\r\n    formatResult = rule.format(\"serviceB\", \"/prod/123\");\r\n    Assertions.assertFalse(formatResult.isMatch());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\skywalking\\oap-server\\server-core\\src\\test\\java\\org\\apache\\skywalking\\oap\\server\\core\\config\\group\\EndpointNameGroupingRuleWatcherTest.java",
  "methodName" : "testWatcher",
  "sourceCode" : "@Test\r\npublic void testWatcher() throws FileNotFoundException {\r\n    EndpointNameGrouping endpointNameGrouping = new EndpointNameGrouping();\r\n    EndpointNameGroupingRuleWatcher watcher = new EndpointNameGroupingRuleWatcher(new ModuleProvider() {\r\n\r\n        @Override\r\n        public String name() {\r\n            return \"test\";\r\n        }\r\n\r\n        @Override\r\n        public Class<? extends ModuleDefine> module() {\r\n            return CoreModule.class;\r\n        }\r\n\r\n        @Override\r\n        public ConfigCreator newConfigCreator() {\r\n            return null;\r\n        }\r\n\r\n        @Override\r\n        public void prepare() throws ServiceNotProvidedException, ModuleStartException {\r\n        }\r\n\r\n        @Override\r\n        public void start() throws ServiceNotProvidedException, ModuleStartException {\r\n        }\r\n\r\n        @Override\r\n        public void notifyAfterCompleted() throws ServiceNotProvidedException, ModuleStartException {\r\n        }\r\n\r\n        @Override\r\n        public String[] requiredModules() {\r\n            return new String[0];\r\n        }\r\n    }, endpointNameGrouping);\r\n    Assertions.assertEquals(\"/prod/{var}\", endpointNameGrouping.format(\"serviceA\", \"/prod/123\")._1());\r\n    watcher.notify(new ConfigChangeWatcher.ConfigChangeEvent(\"grouping:\\n\" + \"  # Endpoint of the service would follow the following rules\\n\" + \"  - service-name: serviceA\\n\" + \"    rules:\\n\" + \"      - /prod/{var}\\n\" + \"      - /prod/{var}/info\\n\", ConfigChangeWatcher.EventType.MODIFY));\r\n    Assertions.assertEquals(\"/prod/{var}/info\", endpointNameGrouping.format(\"serviceA\", \"/prod/123/info\")._1());\r\n    watcher.notify(new ConfigChangeWatcher.ConfigChangeEvent(\"\", ConfigChangeWatcher.EventType.DELETE));\r\n    Assertions.assertEquals(\"/prod/123\", endpointNameGrouping.format(\"serviceA\", \"/prod/123\")._1());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\skywalking\\oap-server\\server-core\\src\\test\\java\\org\\apache\\skywalking\\oap\\server\\core\\config\\group\\openapi\\EndpointGroupingRuleReader4OpenapiTest.java",
  "methodName" : "testReadingRule",
  "sourceCode" : "@Test\r\npublic void testReadingRule() throws IOException {\r\n    EndpointGroupingRuleReader4Openapi reader = new EndpointGroupingRuleReader4Openapi(\"openapi-definitions\");\r\n    EndpointGroupingRule4Openapi rule = reader.read();\r\n    EndpointNameGrouping nameGrouping = new EndpointNameGrouping();\r\n    nameGrouping.setEndpointGroupingRule4Openapi(rule);\r\n    //default x-sw-service-name x-sw-endpoint-name-match-rule and x-sw-endpoint-name-format\r\n    // test direct lookup\r\n    String endpointName = nameGrouping.format(\"serviceA\", \"GET:/products\")._1();\r\n    Assertions.assertEquals(\"GET:/products\", endpointName);\r\n    endpointName = nameGrouping.format(\"serviceA\", \"GET:/products/123\")._1();\r\n    Assertions.assertEquals(\"GET:/products/{id}\", endpointName);\r\n    endpointName = nameGrouping.format(\"serviceA\", \"GET:/products/123/abc/ef\")._1();\r\n    Assertions.assertEquals(\"GET:/products/123/abc/ef\", endpointName);\r\n    endpointName = nameGrouping.format(\"serviceA\", \"GET:/products/123/relatedProducts\")._1();\r\n    Assertions.assertEquals(\"GET:/products/{id}/relatedProducts\", endpointName);\r\n    endpointName = nameGrouping.format(\"serviceA\", \"GET:/products/1/relatedProducts\")._1();\r\n    Assertions.assertEquals(\"GET:/products/{id}/relatedProducts\", endpointName);\r\n    //test custom x-sw-service-name same x-sw-endpoint-name-match-rule and x-sw-endpoint-name-format\r\n    endpointName = nameGrouping.format(\"serviceA-1\", \"POST:/customer\")._1();\r\n    Assertions.assertEquals(\"POST:/customer\", endpointName);\r\n    endpointName = nameGrouping.format(\"serviceA-1\", \"<GET>:/customers/1\")._1();\r\n    Assertions.assertEquals(\"<GET>:/customers/{id}\", endpointName);\r\n    //test different x-sw-endpoint-name-match-rule and x-sw-endpoint-name-format\r\n    endpointName = nameGrouping.format(\"serviceB\", \"GET:/products\")._1();\r\n    Assertions.assertEquals(\"/products:<GET>\", endpointName);\r\n    endpointName = nameGrouping.format(\"serviceB\", \"GET:/products/asia/cn\")._1();\r\n    Assertions.assertEquals(\"/products/{region}/{country}:<GET>\", endpointName);\r\n    //test match priority, not match /products/{region}/{country}:<GET>\r\n    endpointName = nameGrouping.format(\"serviceB\", \"GET:/products/12/relatedProducts\")._1();\r\n    Assertions.assertEquals(\"/products/{id}/relatedProducts:<GET>\", endpointName);\r\n    //test not match, return the origin\r\n    endpointName = nameGrouping.format(\"serviceA\", \"GET:/products/\")._1();\r\n    Assertions.assertNotEquals(\"GET:/products\", endpointName);\r\n    endpointName = nameGrouping.format(\"serviceA\", \"GET:/products/123/\")._1();\r\n    Assertions.assertEquals(\"GET:/products/123/\", endpointName);\r\n    endpointName = nameGrouping.format(\"serviceC\", \"GET:/products/123\")._1();\r\n    Assertions.assertEquals(\"GET:/products/123\", endpointName);\r\n    endpointName = nameGrouping.format(\"serviceA\", \"GET:/products/1/ratings/123\")._1();\r\n    Assertions.assertEquals(\"GET:/products/1/ratings/123\", endpointName);\r\n    endpointName = nameGrouping.format(\"serviceA-1\", \"<GET>:/customers/1/123\")._1();\r\n    Assertions.assertEquals(\"<GET>:/customers/1/123\", endpointName);\r\n    endpointName = nameGrouping.format(\"serviceB\", \"/products/:<GET>\")._1();\r\n    Assertions.assertEquals(\"/products/:<GET>\", endpointName);\r\n    endpointName = nameGrouping.format(\"serviceB\", \"{GET}:/products\")._1();\r\n    Assertions.assertEquals(\"{GET}:/products\", endpointName);\r\n    endpointName = nameGrouping.format(\"serviceB\", \"/products/1/2/3:<GET>\")._1();\r\n    Assertions.assertEquals(\"/products/1/2/3:<GET>\", endpointName);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\skywalking\\oap-server\\server-core\\src\\test\\java\\org\\apache\\skywalking\\oap\\server\\core\\config\\group\\openapi\\EndpointNameGroupingRule4OpenapiWatcherTest.java",
  "methodName" : "testWatcher",
  "sourceCode" : "@Test\r\npublic void testWatcher() throws FileNotFoundException {\r\n    EndpointNameGrouping endpointNameGrouping = new EndpointNameGrouping();\r\n    EndpointNameGroupingRule4OpenapiWatcher watcher = new EndpointNameGroupingRule4OpenapiWatcher(new ModuleProvider() {\r\n\r\n        @Override\r\n        public String name() {\r\n            return \"test\";\r\n        }\r\n\r\n        @Override\r\n        public Class<? extends ModuleDefine> module() {\r\n            return CoreModule.class;\r\n        }\r\n\r\n        @Override\r\n        public ConfigCreator newConfigCreator() {\r\n            return null;\r\n        }\r\n\r\n        @Override\r\n        public void prepare() throws ServiceNotProvidedException {\r\n        }\r\n\r\n        @Override\r\n        public void start() throws ServiceNotProvidedException {\r\n        }\r\n\r\n        @Override\r\n        public void notifyAfterCompleted() throws ServiceNotProvidedException {\r\n        }\r\n\r\n        @Override\r\n        public String[] requiredModules() {\r\n            return new String[0];\r\n        }\r\n    }, endpointNameGrouping);\r\n    Assertions.assertEquals(\"GET:/products/{id}\", endpointNameGrouping.format(\"serviceA\", \"GET:/products/123\")._1());\r\n    Map<String, ConfigChangeWatcher.ConfigChangeEvent> groupItems = new HashMap<>();\r\n    groupItems.put(\"serviceA.productAPI-v1\", new ConfigChangeWatcher.ConfigChangeEvent(\"openapi: 3.0.0\\n\" + \"\\n\" + \"info:\\n\" + \"  description: OpenAPI definition for SkyWalking test.\\n\" + \"  version: v1\\n\" + \"  title: Product API\\n\" + \"\\n\" + \"tags:\\n\" + \"  - name: product\\n\" + \"    description: product\\n\" + \"  - name: relatedProducts\\n\" + \"    description: Related Products\\n\" + \"\\n\" + \"paths:\\n\" + \"  /products:\\n\" + \"    get:\\n\" + \"      tags:\\n\" + \"        - product\\n\" + \"      summary: Get all products list\\n\" + \"      description: Get all products list.\\n\" + \"      operationId: getProducts\\n\" + \"      responses:\\n\" + \"        \\\"200\\\":\\n\" + \"          description: Success\\n\" + \"          content:\\n\" + \"            application/json:\\n\" + \"              schema:\\n\" + \"                type: array\\n\" + \"                items:\\n\" + \"                  $ref: \\\"#/components/schemas/Product\\\"\\n\" + //modified from /products/{id}\r\n    \"  /products/{order-id}:\\n\" + \"    get:\\n\" + \"      tags:\\n\" + \"        - product\\n\" + \"      summary: Get product details\\n\" + \"      description: Get product details with the given id.\\n\" + \"      operationId: getProduct\\n\" + \"      parameters:\\n\" + \"        - name: id\\n\" + \"          in: path\\n\" + \"          description: Product id\\n\" + \"          required: true\\n\" + \"          schema:\\n\" + \"            type: integer\\n\" + \"            format: int64\\n\" + \"      responses:\\n\" + \"        \\\"200\\\":\\n\" + \"          description: successful operation\\n\" + \"          content:\\n\" + \"            application/json:\\n\" + \"              schema:\\n\" + \"                $ref: \\\"#/components/schemas/ProductDetails\\\"\\n\" + \"        \\\"400\\\":\\n\" + \"          description: Invalid product id\\n\" + \"    post:\\n\" + \"      tags:\\n\" + \"        - product\\n\" + \"      summary: Update product details\\n\" + \"      description: Update product details with the given id.\\n\" + \"      operationId: updateProduct\\n\" + \"      parameters:\\n\" + \"        - name: id\\n\" + \"          in: path\\n\" + \"          description: Product id\\n\" + \"          required: true\\n\" + \"          schema:\\n\" + \"            type: integer\\n\" + \"            format: int64\\n\" + \"        - name: name\\n\" + \"          in: query\\n\" + \"          description: Product name\\n\" + \"          required: true\\n\" + \"          schema:\\n\" + \"            type: string\\n\" + \"      responses:\\n\" + \"        \\\"200\\\":\\n\" + \"          description: successful operation\\n\" + \"    delete:\\n\" + \"      tags:\\n\" + \"        - product\\n\" + \"      summary: Delete product details\\n\" + \"      description: Delete product details with the given id.\\n\" + \"      operationId: deleteProduct\\n\" + \"      parameters:\\n\" + \"        - name: id\\n\" + \"          in: path\\n\" + \"          description: Product id\\n\" + \"          required: true\\n\" + \"          schema:\\n\" + \"            type: integer\\n\" + \"            format: int64\\n\" + \"      responses:\\n\" + \"        \\\"200\\\":\\n\" + \"          description: successful operation\\n\" + \"  /products/{id}/relatedProducts:\\n\" + \"    get:\\n\" + \"      tags:\\n\" + \"        - relatedProducts\\n\" + \"      summary: Get related products\\n\" + \"      description: Get related products with the given product id.\\n\" + \"      operationId: getRelatedProducts\\n\" + \"      parameters:\\n\" + \"        - name: id\\n\" + \"          in: path\\n\" + \"          description: Product id\\n\" + \"          required: true\\n\" + \"          schema:\\n\" + \"            type: integer\\n\" + \"            format: int64\\n\" + \"      responses:\\n\" + \"        \\\"200\\\":\\n\" + \"          description: successful operation\\n\" + \"          content:\\n\" + \"            application/json:\\n\" + \"              schema:\\n\" + \"                $ref: \\\"#/components/schemas/RelatedProducts\\\"\\n\" + \"        \\\"400\\\":\\n\" + \"          description: Invalid product id\\n\" + \"\\n\" + \"components:\\n\" + \"  schemas:\\n\" + \"    Product:\\n\" + \"      type: object\\n\" + \"      description: Product id and name\\n\" + \"      properties:\\n\" + \"        id:\\n\" + \"          type: integer\\n\" + \"          format: int64\\n\" + \"          description: Product id\\n\" + \"        name:\\n\" + \"          type: string\\n\" + \"          description: Product name\\n\" + \"      required:\\n\" + \"        - id\\n\" + \"        - name\\n\" + \"    ProductDetails:\\n\" + \"      type: object\\n\" + \"      description: Product details\\n\" + \"      properties:\\n\" + \"        id:\\n\" + \"          type: integer\\n\" + \"          format: int64\\n\" + \"          description: Product id\\n\" + \"        name:\\n\" + \"          type: string\\n\" + \"          description: Product name\\n\" + \"        description:\\n\" + \"          type: string\\n\" + \"          description: Product description\\n\" + \"      required:\\n\" + \"        - id\\n\" + \"        - name\\n\" + \"    RelatedProducts:\\n\" + \"      type: object\\n\" + \"      description: Related Products\\n\" + \"      properties:\\n\" + \"        id:\\n\" + \"          type: integer\\n\" + \"          format: int32\\n\" + \"          description: Product id\\n\" + \"        relatedProducts:\\n\" + \"          type: array\\n\" + \"          description: List of related products\\n\" + \"          items:\\n\" + \"            $ref: \\\"#/components/schemas/Product\\\"\", ConfigChangeWatcher.EventType.MODIFY));\r\n    watcher.notifyGroup(groupItems);\r\n    Assertions.assertEquals(\"GET:/products/{order-id}\", endpointNameGrouping.format(\"serviceA\", \"GET:/products/123\")._1());\r\n    groupItems.put(\"serviceA.productAPI-v1\", new ConfigChangeWatcher.ConfigChangeEvent(\"\", ConfigChangeWatcher.EventType.DELETE));\r\n    watcher.notifyGroup(groupItems);\r\n    Assertions.assertEquals(\"GET:/products/123\", endpointNameGrouping.format(\"serviceA\", \"GET:/products/123\")._1());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\skywalking\\oap-server\\server-core\\src\\test\\java\\org\\apache\\skywalking\\oap\\server\\core\\config\\group\\uri\\quickmatch\\PatternTreeTest.java",
  "methodName" : "testTreeBuild",
  "sourceCode" : "@Test\r\npublic void testTreeBuild() throws NoSuchFieldException, IllegalAccessException {\r\n    PatternTree tree = new PatternTree();\r\n    tree.addPattern(\"/products/{var}\");\r\n    tree.addPattern(\"/products/{var}/detail\");\r\n    tree.addPattern(\"/products/{var}/refund\");\r\n    tree.addPattern(\"/products/{var}/reorder/extra\");\r\n    tree.addPattern(\"/sales/{var}\");\r\n    tree.addPattern(\"/employees/{var}/profile\");\r\n    // This should map to exact same tree nodes\r\n    tree.addPattern(\"produces/{var}/profile\");\r\n    tree.addPattern(\"GET:/posts/{var}\");\r\n    tree.addPattern(\"https://abc.com/posts/{var}\");\r\n    final Field rootField = PatternTree.class.getDeclaredField(\"roots\");\r\n    rootField.setAccessible(true);\r\n    final List<PatternToken> roots = (List<PatternToken>) rootField.get(tree);\r\n    final PatternToken prodToken = roots.get(0);\r\n    Assertions.assertEquals(new StringToken(\"products\"), prodToken);\r\n    Assertions.assertEquals(1, prodToken.children().size());\r\n    final PatternToken varToken = prodToken.children().get(0);\r\n    Assertions.assertEquals(new VarToken(), varToken);\r\n    Assertions.assertEquals(3, varToken.children().size());\r\n    final PatternToken detailToken = varToken.children().get(0);\r\n    Assertions.assertEquals(new StringToken(\"detail\"), detailToken);\r\n    final PatternToken salesToken = roots.get(1);\r\n    Assertions.assertEquals(new StringToken(\"sales\"), salesToken);\r\n    Assertions.assertEquals(1, salesToken.children().size());\r\n    final PatternToken employeeToken = roots.get(2);\r\n    Assertions.assertEquals(new StringToken(\"employees\"), employeeToken);\r\n    Assertions.assertEquals(1, employeeToken.children().size());\r\n    final PatternToken producesToken = roots.get(3);\r\n    Assertions.assertEquals(new StringToken(\"produces\"), producesToken);\r\n    Assertions.assertEquals(1, producesToken.children().size());\r\n    final PatternToken getPostsToken = roots.get(4);\r\n    Assertions.assertEquals(new StringToken(\"GET:\"), getPostsToken);\r\n    final PatternToken abcToken = roots.get(5);\r\n    Assertions.assertEquals(new StringToken(\"https:\"), abcToken);\r\n    final PatternToken abcComToken = abcToken.children().get(0);\r\n    // For general performance purposes, double / will result in an empty string token\r\n    // This is considered an intentional feature rather than a bug\r\n    Assertions.assertEquals(new StringToken(\"\"), abcComToken);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\skywalking\\oap-server\\server-core\\src\\test\\java\\org\\apache\\skywalking\\oap\\server\\core\\config\\group\\uri\\quickmatch\\PatternTreeTest.java",
  "methodName" : "testPatternMatch",
  "sourceCode" : "@Test\r\npublic void testPatternMatch() {\r\n    PatternTree tree = new PatternTree();\r\n    tree.addPattern(\"/products/{var}\");\r\n    tree.addPattern(\"/products/{var}/detail\");\r\n    tree.addPattern(\"/products/{var}/refund\");\r\n    tree.addPattern(\"/products/{var}/reorder/extra\");\r\n    tree.addPattern(\"/sales/{var}\");\r\n    tree.addPattern(\"/employees/{var}/profile\");\r\n    tree.addPattern(\"produces/{var}/profile\");\r\n    tree.addPattern(\"GET:/posts/{var}\");\r\n    tree.addPattern(\"https://abc.com/posts/{var}\");\r\n    StringFormatGroup.FormatResult result;\r\n    result = tree.match(\"/products/123\");\r\n    Assertions.assertTrue(result.isMatch());\r\n    Assertions.assertEquals(\"/products/{var}\", result.getReplacedName());\r\n    result = tree.match(\"/products/123/detail\");\r\n    Assertions.assertTrue(result.isMatch());\r\n    Assertions.assertEquals(\"/products/{var}/detail\", result.getReplacedName());\r\n    result = tree.match(\"/employees/skywalking/profile\");\r\n    Assertions.assertTrue(result.isMatch());\r\n    // URI doesn't have / as prefix but should still match\r\n    result = tree.match(\"products/123/detail\");\r\n    Assertions.assertTrue(result.isMatch());\r\n    // URI has / as suffix but should still match\r\n    result = tree.match(\"products/123/detail/\");\r\n    Assertions.assertTrue(result.isMatch());\r\n    // URI shorter than pattern\r\n    result = tree.match(\"/products/123/reorder\");\r\n    Assertions.assertFalse(result.isMatch());\r\n    Assertions.assertEquals(\"/products/123/reorder\", result.getReplacedName());\r\n    // URI has extra suffix\r\n    result = tree.match(\"/products/123/detail/extra\");\r\n    Assertions.assertFalse(result.isMatch());\r\n    Assertions.assertEquals(\"/products/123/detail/extra\", result.getReplacedName());\r\n    // Domain style URI\r\n    result = tree.match(\"https://abc.com/posts/123abc\");\r\n    Assertions.assertTrue(result.isMatch());\r\n    // Special case: When endpoint is like /abc or abc,\r\n    // it will always match since itself cannot be a variable\r\n    // regardless if abc is actually in the pattern tree\r\n    result = tree.match(\"/abc\");\r\n    Assertions.assertTrue(result.isMatch());\r\n    Assertions.assertEquals(\"/abc\", result.getReplacedName());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\skywalking\\oap-server\\server-core\\src\\test\\java\\org\\apache\\skywalking\\oap\\server\\core\\config\\group\\uri\\quickmatch\\PatternTreeTest.java",
  "methodName" : "testGetPostPatternMatch",
  "sourceCode" : "@Test\r\npublic void testGetPostPatternMatch() {\r\n    PatternTree tree = new PatternTree();\r\n    tree.addPattern(\"GET:/products/{var}\");\r\n    tree.addPattern(\"POST:/products/{var}/detail\");\r\n    tree.addPattern(\"POST:/sales/{var}\");\r\n    tree.addPattern(\"GET:/employees/{var}/profile\");\r\n    StringFormatGroup.FormatResult result;\r\n    result = tree.match(\"GET:/products/123\");\r\n    Assertions.assertTrue(result.isMatch());\r\n    Assertions.assertEquals(\"GET:/products/{var}\", result.getReplacedName());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\skywalking\\oap-server\\server-core\\src\\test\\java\\org\\apache\\skywalking\\oap\\server\\core\\config\\SearchableTracesTagsWatcherTest.java",
  "methodName" : "testGetDefaultSearchableTags",
  "sourceCode" : "@Test\r\npublic void testGetDefaultSearchableTags() {\r\n    Assertions.assertEquals(searchableTracesTagsWatcher.getSearchableTags(), Arrays.stream(moduleConfig.getSearchableTracesTags().split(\",\")).collect(Collectors.toSet()));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\skywalking\\oap-server\\server-core\\src\\test\\java\\org\\apache\\skywalking\\oap\\server\\core\\config\\SearchableTracesTagsWatcherTest.java",
  "methodName" : "testNotify",
  "sourceCode" : "@Test\r\npublic void testNotify() {\r\n    //add\r\n    String addSearchableTracesTagsStr = moduleConfig.getSearchableTracesTags() + \",userId\";\r\n    ConfigChangeWatcher.ConfigChangeEvent addEvent = new ConfigChangeWatcher.ConfigChangeEvent(addSearchableTracesTagsStr, ConfigChangeWatcher.EventType.ADD);\r\n    searchableTracesTagsWatcher.notify(addEvent);\r\n    Assertions.assertEquals(searchableTracesTagsWatcher.getSearchableTags(), Arrays.stream(addSearchableTracesTagsStr.split(\",\")).collect(Collectors.toSet()));\r\n    //modify\r\n    String modifySearchableTracesTagsStr = moduleConfig.getSearchableTracesTags() + \",userId,orderId\";\r\n    ConfigChangeWatcher.ConfigChangeEvent modifyEvent = new ConfigChangeWatcher.ConfigChangeEvent(modifySearchableTracesTagsStr, ConfigChangeWatcher.EventType.MODIFY);\r\n    searchableTracesTagsWatcher.notify(modifyEvent);\r\n    Assertions.assertEquals(searchableTracesTagsWatcher.getSearchableTags(), Arrays.stream(modifySearchableTracesTagsStr.split(\",\")).collect(Collectors.toSet()));\r\n    //delete\r\n    ConfigChangeWatcher.ConfigChangeEvent deleteEvent = new ConfigChangeWatcher.ConfigChangeEvent(null, ConfigChangeWatcher.EventType.DELETE);\r\n    searchableTracesTagsWatcher.notify(deleteEvent);\r\n    Assertions.assertEquals(searchableTracesTagsWatcher.getSearchableTags(), Arrays.stream(moduleConfig.getSearchableTracesTags().split(\",\")).collect(Collectors.toSet()));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\skywalking\\oap-server\\server-core\\src\\test\\java\\org\\apache\\skywalking\\oap\\server\\core\\CoreModuleConfigTest.java",
  "methodName" : "testRoleFromNameNormalSituation",
  "sourceCode" : "@Test\r\npublic void testRoleFromNameNormalSituation() {\r\n    assertEquals(CoreModuleConfig.Role.Mixed, CoreModuleConfig.Role.fromName(\"Mixed\"));\r\n    assertEquals(CoreModuleConfig.Role.Receiver, CoreModuleConfig.Role.fromName(\"Receiver\"));\r\n    assertEquals(CoreModuleConfig.Role.Aggregator, CoreModuleConfig.Role.fromName(\"Aggregator\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\skywalking\\oap-server\\server-core\\src\\test\\java\\org\\apache\\skywalking\\oap\\server\\core\\CoreModuleConfigTest.java",
  "methodName" : "testRoleFromNameBlockParameter",
  "sourceCode" : "@Test\r\npublic void testRoleFromNameBlockParameter() {\r\n    assertEquals(CoreModuleConfig.Role.Mixed, CoreModuleConfig.Role.fromName(StringUtils.EMPTY));\r\n    assertEquals(CoreModuleConfig.Role.Mixed, CoreModuleConfig.Role.fromName(null));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\skywalking\\oap-server\\server-core\\src\\test\\java\\org\\apache\\skywalking\\oap\\server\\core\\CoreModuleConfigTest.java",
  "methodName" : "testRoleFromNameNotIncludeRole",
  "sourceCode" : "@Test\r\npublic void testRoleFromNameNotIncludeRole() {\r\n    assertEquals(CoreModuleConfig.Role.Mixed, CoreModuleConfig.Role.fromName(\"a\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\skywalking\\oap-server\\server-core\\src\\test\\java\\org\\apache\\skywalking\\oap\\server\\core\\CoreModuleTest.java",
  "methodName" : "testOpenServiceList",
  "sourceCode" : "@Test\r\npublic void testOpenServiceList() {\r\n    CoreModule coreModule = new CoreModule();\r\n    Assertions.assertEquals(49, coreModule.services().length);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\skywalking\\oap-server\\server-core\\src\\test\\java\\org\\apache\\skywalking\\oap\\server\\core\\hierarchy\\HierarchyQueryServiceTest.java",
  "methodName" : "testBuildServiceRelation",
  "sourceCode" : "@Test\r\npublic void testBuildServiceRelation() throws Exception {\r\n    ServiceHierarchy hierarchy = invokeBuildServiceRelation();\r\n    Assertions.assertEquals(9, hierarchy.getRelations().size());\r\n    Assertions.assertEquals(mockHierarchy(false), hierarchy);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\skywalking\\oap-server\\server-core\\src\\test\\java\\org\\apache\\skywalking\\oap\\server\\core\\hierarchy\\HierarchyQueryServiceTest.java",
  "methodName" : "testFilterConjecturableRelations",
  "sourceCode" : "@Test\r\npublic void testFilterConjecturableRelations() throws Exception {\r\n    ServiceHierarchy hierarchy = Whitebox.invokeMethod(hierarchyQueryService, \"filterConjecturableRelations\", mockCache(), invokeBuildServiceRelation(), 10);\r\n    Assertions.assertEquals(5, hierarchy.getRelations().size());\r\n    Assertions.assertEquals(mockHierarchy(true), hierarchy);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\skywalking\\oap-server\\server-core\\src\\test\\java\\org\\apache\\skywalking\\oap\\server\\core\\management\\ui\\template\\UITemplateTest.java",
  "methodName" : "testSerialization",
  "sourceCode" : "@Test\r\npublic void testSerialization() {\r\n    UITemplate uiTemplate = new UITemplate();\r\n    uiTemplate.setTemplateId(\"id\");\r\n    uiTemplate.setConfiguration(\"configuration\");\r\n    uiTemplate.setUpdateTime(1694760289493L);\r\n    uiTemplate.setDisabled(BooleanUtils.FALSE);\r\n    final UITemplate.Builder builder = new UITemplate.Builder();\r\n    final HashMapConverter.ToStorage toStorage = new HashMapConverter.ToStorage();\r\n    builder.entity2Storage(uiTemplate, toStorage);\r\n    final UITemplate uiTemplate2 = builder.storage2Entity(new HashMapConverter.ToEntity(toStorage.obtain()));\r\n    Assertions.assertEquals(uiTemplate, uiTemplate2);\r\n    uiTemplate2.setConfiguration(\"configuration2\");\r\n    // Equals method is only for `templateId` field.\r\n    Assertions.assertEquals(uiTemplate, uiTemplate2);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\skywalking\\oap-server\\server-core\\src\\test\\java\\org\\apache\\skywalking\\oap\\server\\core\\profiling\\ebpf\\analyze\\EBPFProfilingAnalyzerTest.java",
  "methodName" : "testAnalyze",
  "sourceCode" : "@Test\r\npublic void testAnalyze() throws IOException {\r\n    EBPFProfilingAnalyzerHolder holder = loadYaml(\"ebpf-profiling-data.yml\", EBPFProfilingAnalyzerHolder.class);\r\n    for (int c = 0; c < holder.getList().size(); c++) {\r\n        try {\r\n            holder.getList().get(c).analyzeAssert();\r\n        } catch (Error e) {\r\n            throw new AssertionError(\"validate case \" + c + \" failure\", e);\r\n        }\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\skywalking\\oap-server\\server-core\\src\\test\\java\\org\\apache\\skywalking\\oap\\server\\core\\profiling\\trace\\analyze\\ProfileAnalyzerTest.java",
  "methodName" : "testAnalyze",
  "sourceCode" : "@Test\r\npublic void testAnalyze() throws IOException {\r\n    ProfileStackAnalyzeHolder holder = loadYaml(\"thread-snapshot.yml\", ProfileStackAnalyzeHolder.class);\r\n    for (ProfileStackAnalyze analyze : holder.getList()) {\r\n        analyze.analyzeAndAssert(MAX_ANALYZE_COUNT);\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\skywalking\\oap-server\\server-core\\src\\test\\java\\org\\apache\\skywalking\\oap\\server\\core\\profiling\\trace\\ProfileTaskQueryServiceTest.java",
  "methodName" : "testBuildProfiledSegmentsList",
  "sourceCode" : "@Test\r\npublic void testBuildProfiledSegmentsList() {\r\n    // all segment in same process\r\n    validate(Arrays.asList(buildRecord(\"1B\", \"2A\", RefType.CrossThread), buildRecord(\"2A\", \"\", null), buildRecord(\"3C\", \"1B\", RefType.CrossThread)), Arrays.asList(Arrays.asList(\"2A\", \"1B\", \"3C\")));\r\n    // segment with different process\r\n    validate(Arrays.asList(buildRecord(\"A\", \"\", null), buildRecord(\"B\", \"A\", RefType.CrossThread), buildRecord(\"C\", \"B\", RefType.CrossProcess), buildRecord(\"D\", \"Z\", RefType.CrossThread)), Arrays.asList(Arrays.asList(\"A\", \"B\"), Arrays.asList(\"C\"), Arrays.asList(\"D\")));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\skywalking\\oap-server\\server-core\\src\\test\\java\\org\\apache\\skywalking\\oap\\server\\core\\query\\DurationTest.java",
  "methodName" : "testConvertToTimeBucket",
  "sourceCode" : "@Test\r\npublic void testConvertToTimeBucket() {\r\n    Assertions.assertEquals(20220908L, DurationUtils.INSTANCE.convertToTimeBucket(Step.DAY, \"2022-09-08\"));\r\n    Assertions.assertEquals(2022090810L, DurationUtils.INSTANCE.convertToTimeBucket(Step.HOUR, \"2022-09-08 10\"));\r\n    Assertions.assertEquals(202209081010L, DurationUtils.INSTANCE.convertToTimeBucket(Step.MINUTE, \"2022-09-08 1010\"));\r\n    Assertions.assertEquals(20220908101010L, DurationUtils.INSTANCE.convertToTimeBucket(Step.SECOND, \"2022-09-08 101010\"));\r\n    try {\r\n        DurationUtils.INSTANCE.convertToTimeBucket(Step.DAY, \"2022-09-08 10\");\r\n        Assertions.fail(\"Should throw IllegalArgumentException\");\r\n    } catch (IllegalArgumentException e) {\r\n        Assertions.assertTrue(true);\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\skywalking\\oap-server\\server-core\\src\\test\\java\\org\\apache\\skywalking\\oap\\server\\core\\query\\DurationTest.java",
  "methodName" : "testStartTimeDurationToSecondTimeBucket",
  "sourceCode" : "@Test\r\npublic void testStartTimeDurationToSecondTimeBucket() {\r\n    Assertions.assertEquals(20220908000000L, DurationUtils.INSTANCE.startTimeDurationToSecondTimeBucket(Step.DAY, \"2022-09-08\"));\r\n    Assertions.assertEquals(20220908100000L, DurationUtils.INSTANCE.startTimeDurationToSecondTimeBucket(Step.HOUR, \"2022-09-08 10\"));\r\n    Assertions.assertEquals(20220908101000L, DurationUtils.INSTANCE.startTimeDurationToSecondTimeBucket(Step.MINUTE, \"2022-09-08 1010\"));\r\n    Assertions.assertEquals(20220908101010L, DurationUtils.INSTANCE.startTimeDurationToSecondTimeBucket(Step.SECOND, \"2022-09-08 101010\"));\r\n    try {\r\n        DurationUtils.INSTANCE.startTimeDurationToSecondTimeBucket(Step.HOUR, \"2022-09-08 30\");\r\n        Assertions.fail(\"Should throw IllegalArgumentException\");\r\n    } catch (IllegalArgumentException e) {\r\n        Assertions.assertTrue(true);\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\skywalking\\oap-server\\server-core\\src\\test\\java\\org\\apache\\skywalking\\oap\\server\\core\\query\\DurationTest.java",
  "methodName" : "testEndTimeDurationToSecondTimeBucket",
  "sourceCode" : "@Test\r\npublic void testEndTimeDurationToSecondTimeBucket() {\r\n    Assertions.assertEquals(20220908235959L, DurationUtils.INSTANCE.endTimeDurationToSecondTimeBucket(Step.DAY, \"2022-09-08\"));\r\n    Assertions.assertEquals(20220908105959L, DurationUtils.INSTANCE.endTimeDurationToSecondTimeBucket(Step.HOUR, \"2022-09-08 10\"));\r\n    Assertions.assertEquals(20220908101059L, DurationUtils.INSTANCE.endTimeDurationToSecondTimeBucket(Step.MINUTE, \"2022-09-08 1010\"));\r\n    Assertions.assertEquals(20220908101010L, DurationUtils.INSTANCE.endTimeDurationToSecondTimeBucket(Step.SECOND, \"2022-09-08 101010\"));\r\n    try {\r\n        DurationUtils.INSTANCE.endTimeDurationToSecondTimeBucket(Step.HOUR, \"2022-09-08 30\");\r\n        Assertions.fail(\"Should throw IllegalArgumentException\");\r\n    } catch (IllegalArgumentException e) {\r\n        Assertions.assertTrue(true);\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\skywalking\\oap-server\\server-core\\src\\test\\java\\org\\apache\\skywalking\\oap\\server\\core\\query\\DurationTest.java",
  "methodName" : "testGetDurationPoints",
  "sourceCode" : "@Test\r\npublic void testGetDurationPoints() {\r\n    List<PointOfTime> pointOfTimes = DurationUtils.INSTANCE.getDurationPoints(Step.DAY, 20220910, 20220912);\r\n    Assertions.assertTrue(Arrays.asList(20220910L, 20220911L, 20220912L).equals(pointOfTimes.stream().map(PointOfTime::getPoint).collect(Collectors.toList())));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\skywalking\\oap-server\\server-core\\src\\test\\java\\org\\apache\\skywalking\\oap\\server\\core\\query\\DurationTest.java",
  "methodName" : "testStartTimeDurationToMinuteTimeBucket",
  "sourceCode" : "@Test\r\npublic void testStartTimeDurationToMinuteTimeBucket() {\r\n    Assertions.assertEquals(202209080000L, DurationUtils.INSTANCE.startTimeDurationToMinuteTimeBucket(Step.DAY, \"2022-09-08\"));\r\n    Assertions.assertEquals(202209081000L, DurationUtils.INSTANCE.startTimeDurationToMinuteTimeBucket(Step.HOUR, \"2022-09-08 10\"));\r\n    Assertions.assertEquals(202209081010L, DurationUtils.INSTANCE.startTimeDurationToMinuteTimeBucket(Step.MINUTE, \"2022-09-08 1010\"));\r\n    Assertions.assertEquals(202209081010L, DurationUtils.INSTANCE.startTimeDurationToMinuteTimeBucket(Step.SECOND, \"2022-09-08 101010\"));\r\n    try {\r\n        DurationUtils.INSTANCE.startTimeDurationToMinuteTimeBucket(Step.HOUR, \"2022-09-08 30\");\r\n        Assertions.fail(\"Should throw IllegalArgumentException\");\r\n    } catch (IllegalArgumentException e) {\r\n        Assertions.assertTrue(true);\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\skywalking\\oap-server\\server-core\\src\\test\\java\\org\\apache\\skywalking\\oap\\server\\core\\query\\DurationTest.java",
  "methodName" : "testEndTimeDurationToMinuteTimeBucket",
  "sourceCode" : "@Test\r\npublic void testEndTimeDurationToMinuteTimeBucket() {\r\n    Assertions.assertEquals(202209082359L, DurationUtils.INSTANCE.endTimeDurationToMinuteTimeBucket(Step.DAY, \"2022-09-08\"));\r\n    Assertions.assertEquals(202209081059L, DurationUtils.INSTANCE.endTimeDurationToMinuteTimeBucket(Step.HOUR, \"2022-09-08 10\"));\r\n    Assertions.assertEquals(202209081010L, DurationUtils.INSTANCE.endTimeDurationToMinuteTimeBucket(Step.MINUTE, \"2022-09-08 1010\"));\r\n    Assertions.assertEquals(202209081010L, DurationUtils.INSTANCE.endTimeDurationToMinuteTimeBucket(Step.SECOND, \"2022-09-08 101010\"));\r\n    try {\r\n        DurationUtils.INSTANCE.endTimeDurationToMinuteTimeBucket(Step.HOUR, \"2022-09-08 30\");\r\n        Assertions.fail(\"Should throw IllegalArgumentException\");\r\n    } catch (IllegalArgumentException e) {\r\n        Assertions.assertTrue(true);\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\skywalking\\oap-server\\server-core\\src\\test\\java\\org\\apache\\skywalking\\oap\\server\\core\\query\\ServiceTopologyBuilderTest.java",
  "methodName" : "testServiceTopologyBuild",
  "sourceCode" : "@SneakyThrows\r\n@Test\r\npublic void testServiceTopologyBuild() {\r\n    Service svrA = getSvrA();\r\n    Service svrB = getSvrB();\r\n    final ServiceTopologyBuilder serviceTopologyBuilder = new ServiceTopologyBuilder(moduleManager);\r\n    Whitebox.setInternalState(serviceTopologyBuilder, \"metadataQueryService\", metadataQueryService);\r\n    when(metadataQueryService.getService(svrA.getId())).thenReturn(svrA);\r\n    when(metadataQueryService.getService(svrB.getId())).thenReturn(svrB);\r\n    List<Call.CallDetail> serviceRelationClientCalls = new ArrayList<>();\r\n    Call.CallDetail call1 = new Call.CallDetail();\r\n    call1.buildFromServiceRelation(IDManager.ServiceID.buildRelationId(new IDManager.ServiceID.ServiceRelationDefine(IDManager.ServiceID.buildId(svrA.getName(), true), IDManager.ServiceID.buildId(svrB.getName(), true))), // mtls\r\n    142, DetectPoint.CLIENT);\r\n    serviceRelationClientCalls.add(call1);\r\n    Call.CallDetail call2 = new Call.CallDetail();\r\n    call2.buildFromServiceRelation(IDManager.ServiceID.buildRelationId(new IDManager.ServiceID.ServiceRelationDefine(IDManager.ServiceID.buildId(svrA.getName(), true), IDManager.ServiceID.buildId(svrB.getName(), true))), // http\r\n    49, DetectPoint.CLIENT);\r\n    serviceRelationClientCalls.add(call2);\r\n    List<Call.CallDetail> serviceRelationServerCalls = new ArrayList<>();\r\n    Call.CallDetail call3 = new Call.CallDetail();\r\n    call3.buildFromServiceRelation(IDManager.ServiceID.buildRelationId(new IDManager.ServiceID.ServiceRelationDefine(IDManager.ServiceID.buildId(svrA.getName(), true), IDManager.ServiceID.buildId(svrB.getName(), true))), // mtls\r\n    142, DetectPoint.SERVER);\r\n    serviceRelationServerCalls.add(call3);\r\n    Call.CallDetail call4 = new Call.CallDetail();\r\n    call4.buildFromServiceRelation(IDManager.ServiceID.buildRelationId(new IDManager.ServiceID.ServiceRelationDefine(IDManager.ServiceID.buildId(svrA.getName(), true), IDManager.ServiceID.buildId(svrB.getName(), true))), // http\r\n    49, DetectPoint.SERVER);\r\n    serviceRelationServerCalls.add(call4);\r\n    final Topology topology = serviceTopologyBuilder.build(serviceRelationClientCalls, serviceRelationServerCalls);\r\n    Assertions.assertEquals(2, topology.getNodes().size());\r\n    for (final Node node : topology.getNodes()) {\r\n        if (node.getName().equals(\"SvrB\")) {\r\n            Assertions.assertEquals(\"http\", node.getType());\r\n            Assertions.assertEquals(Set.of(Layer.MESH.name(), Layer.MESH_DP.name()), node.getLayers());\r\n        } else if (node.getName().equals(\"SvrA\")) {\r\n            Assertions.assertEquals(null, node.getType());\r\n            Assertions.assertEquals(Set.of(Layer.GENERAL.name()), node.getLayers());\r\n        }\r\n    }\r\n    for (final Call call : topology.getCalls()) {\r\n        Assertions.assertEquals(2, call.getSourceComponents().size());\r\n        Assertions.assertEquals(List.of(\"mtls\", \"http\"), call.getTargetComponents());\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\skywalking\\oap-server\\server-core\\src\\test\\java\\org\\apache\\skywalking\\oap\\server\\core\\remote\\client\\GRPCRemoteClientTestCase.java",
  "methodName" : "testPush",
  "sourceCode" : "@Test\r\npublic void testPush() throws InterruptedException {\r\n    MetricsCreator metricsCreator = mock(MetricsCreator.class);\r\n    when(metricsCreator.createCounter(any(), any(), any(), any())).thenReturn(new CounterMetrics() {\r\n\r\n        @Override\r\n        public void inc() {\r\n        }\r\n\r\n        @Override\r\n        public void inc(double value) {\r\n        }\r\n    });\r\n    when(metricsCreator.createHistogramMetric(any(), any(), any(), any())).thenReturn(new HistogramMetrics() {\r\n\r\n        @Override\r\n        public Timer createTimer() {\r\n            return super.createTimer();\r\n        }\r\n\r\n        @Override\r\n        public void observe(double value) {\r\n        }\r\n    });\r\n    ModuleDefineTesting telemetryModuleDefine = new ModuleDefineTesting();\r\n    moduleManager.put(TelemetryModule.NAME, telemetryModuleDefine);\r\n    telemetryModuleDefine.provider().registerServiceImplementation(MetricsCreator.class, metricsCreator);\r\n    serviceRegistry.addService(new RemoteServiceHandler(moduleManager));\r\n    Address address = new Address(\"not-important\", 11, false);\r\n    GRPCRemoteClient remoteClient = spy(new GRPCRemoteClient(moduleManager, address, 1, 10, 10, null));\r\n    remoteClient.connect();\r\n    doReturn(channel).when(remoteClient).getChannel();\r\n    for (int i = 0; i < 12; i++) {\r\n        remoteClient.push(nextWorkerName, new TestStreamData());\r\n    }\r\n    TimeUnit.SECONDS.sleep(2);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\skywalking\\oap-server\\server-core\\src\\test\\java\\org\\apache\\skywalking\\oap\\server\\core\\remote\\client\\RemoteClientManagerTestCase.java",
  "methodName" : "refresh",
  "sourceCode" : "@Test\r\npublic void refresh() {\r\n    when(clusterNodesQuery.queryRemoteNodes()).thenReturn(groupOneInstances());\r\n    clientManager.refresh();\r\n    List<RemoteClient> remoteClients = clientManager.getRemoteClient();\r\n    Assertions.assertEquals(\"host1\", remoteClients.get(0).getAddress().getHost());\r\n    Assertions.assertEquals(\"host2\", remoteClients.get(1).getAddress().getHost());\r\n    Assertions.assertEquals(\"host3\", remoteClients.get(2).getAddress().getHost());\r\n    Assertions.assertTrue(remoteClients.get(0) instanceof GRPCRemoteClient);\r\n    Assertions.assertTrue(remoteClients.get(1) instanceof SelfRemoteClient);\r\n    Assertions.assertTrue(remoteClients.get(2) instanceof GRPCRemoteClient);\r\n    when(clusterNodesQuery.queryRemoteNodes()).thenReturn(groupTwoInstances());\r\n    clientManager.refresh();\r\n    remoteClients = clientManager.getRemoteClient();\r\n    Assertions.assertEquals(\"host1\", remoteClients.get(0).getAddress().getHost());\r\n    Assertions.assertEquals(\"host2\", remoteClients.get(1).getAddress().getHost());\r\n    Assertions.assertEquals(\"host4\", remoteClients.get(2).getAddress().getHost());\r\n    Assertions.assertEquals(\"host5\", remoteClients.get(3).getAddress().getHost());\r\n    Assertions.assertTrue(remoteClients.get(0) instanceof GRPCRemoteClient);\r\n    Assertions.assertTrue(remoteClients.get(1) instanceof SelfRemoteClient);\r\n    Assertions.assertTrue(remoteClients.get(2) instanceof GRPCRemoteClient);\r\n    Assertions.assertTrue(remoteClients.get(3) instanceof GRPCRemoteClient);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\skywalking\\oap-server\\server-core\\src\\test\\java\\org\\apache\\skywalking\\oap\\server\\core\\remote\\client\\RemoteClientManagerTestCase.java",
  "methodName" : "testConcurrenceGetRemoteClientAndRefresh",
  "sourceCode" : "@Test\r\npublic void testConcurrenceGetRemoteClientAndRefresh() throws Exception {\r\n    //guarantee has any client in clientManager\r\n    this.refresh();\r\n    CyclicBarrier cyclicBarrier = new CyclicBarrier(3, () -> {\r\n        log.debug(\"begin concurrency test\");\r\n    });\r\n    final ExecutorService executorService = Executors.newFixedThreadPool(3);\r\n    final Future<?> refreshFuture = executorService.submit(() -> {\r\n        try {\r\n            cyclicBarrier.await();\r\n            this.refresh();\r\n        } catch (InterruptedException | BrokenBarrierException e) {\r\n            e.printStackTrace();\r\n        }\r\n    });\r\n    executorService.submit(() -> {\r\n        try {\r\n            int i = 0;\r\n            cyclicBarrier.await();\r\n            while (!refreshFuture.isDone()) {\r\n                Assertions.assertFalse(this.clientManager.getRemoteClient().isEmpty());\r\n                log.debug(\"thread {} invoke {} times\", Thread.currentThread().getName(), i++);\r\n            }\r\n        } catch (InterruptedException | BrokenBarrierException e) {\r\n            e.printStackTrace();\r\n        }\r\n    });\r\n    try {\r\n        int i = 0;\r\n        cyclicBarrier.await();\r\n        while (!refreshFuture.isDone()) {\r\n            Assertions.assertFalse(this.clientManager.getRemoteClient().isEmpty());\r\n            log.debug(\"thread {} invoke {} times\", Thread.currentThread().getName(), i++);\r\n        }\r\n    } catch (InterruptedException | BrokenBarrierException e) {\r\n        e.printStackTrace();\r\n    }\r\n    verify(this.clientManager, new AtLeast(2)).getRemoteClient();\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\skywalking\\oap-server\\server-core\\src\\test\\java\\org\\apache\\skywalking\\oap\\server\\core\\remote\\client\\RemoteClientManagerTestCase.java",
  "methodName" : "testGetRemoteClientAndNeverChange",
  "sourceCode" : "@Test\r\npublic void testGetRemoteClientAndNeverChange() {\r\n    when(clusterNodesQuery.queryRemoteNodes()).thenReturn(groupOneInstances());\r\n    this.clientManager.refresh();\r\n    final List<RemoteClient> gotGroupOneInstances = this.clientManager.getRemoteClient();\r\n    when(clusterNodesQuery.queryRemoteNodes()).thenReturn(groupTwoInstances());\r\n    this.clientManager.refresh();\r\n    final List<RemoteClient> gotGroupTwoInstances = this.clientManager.getRemoteClient();\r\n    Assertions.assertEquals(gotGroupOneInstances.size(), groupOneInstances().size());\r\n    Assertions.assertEquals(gotGroupTwoInstances.size(), groupTwoInstances().size());\r\n    Assertions.assertNotEquals(gotGroupOneInstances.size(), gotGroupTwoInstances.size());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\skywalking\\oap-server\\server-core\\src\\test\\java\\org\\apache\\skywalking\\oap\\server\\core\\remote\\client\\RemoteClientManagerTestCase.java",
  "methodName" : "testCompare",
  "sourceCode" : "@Test\r\npublic void testCompare() {\r\n    when(clusterNodesQuery.queryRemoteNodes()).thenReturn(groupOneInstances());\r\n    clientManager.refresh();\r\n    List<RemoteClient> groupOneRemoteClients = clientManager.getRemoteClient();\r\n    when(clusterNodesQuery.queryRemoteNodes()).thenReturn(groupOneInstances());\r\n    clientManager.refresh();\r\n    List<RemoteClient> newGroupOneRemoteClients = clientManager.getRemoteClient();\r\n    Assertions.assertArrayEquals(groupOneRemoteClients.toArray(), newGroupOneRemoteClients.toArray());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\skywalking\\oap-server\\server-core\\src\\test\\java\\org\\apache\\skywalking\\oap\\server\\core\\remote\\client\\RemoteClientManagerTestCase.java",
  "methodName" : "testUnChangeRefresh",
  "sourceCode" : "@Test\r\npublic void testUnChangeRefresh() {\r\n    final List<RemoteInstance> groupOneInstances = groupOneInstances();\r\n    when(clusterNodesQuery.queryRemoteNodes()).thenReturn(groupOneInstances);\r\n    clientManager.refresh();\r\n    List<RemoteClient> groupOneRemoteClients = clientManager.getRemoteClient();\r\n    groupOneInstances.add(new RemoteInstance(new Address(\"host4\", 100, false)));\r\n    when(clusterNodesQuery.queryRemoteNodes()).thenReturn(groupOneInstances);\r\n    clientManager.refresh();\r\n    List<RemoteClient> newGroupOneRemoteClients = clientManager.getRemoteClient();\r\n    Assertions.assertEquals(groupOneRemoteClients.get(0).getAddress(), newGroupOneRemoteClients.get(0).getAddress());\r\n    Assertions.assertEquals(newGroupOneRemoteClients.get(3).getAddress().getHost(), \"host4\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\skywalking\\oap-server\\server-core\\src\\test\\java\\org\\apache\\skywalking\\oap\\server\\core\\remote\\HTTPServerTest.java",
  "methodName" : "test",
  "sourceCode" : "@Test\r\npublic void test() throws Exception {\r\n    String rootURI = \"http://localhost:12800\";\r\n    String testHandlerURI = \"http://localhost:12800/test\";\r\n    String testNoHandlerURI = \"http://localhost:12800/test/noHandler\";\r\n    Assertions.assertEquals(WebClient.of().get(rootURI).aggregate().get().status().code(), 405);\r\n    Assertions.assertEquals(WebClient.of().post(rootURI, new byte[0]).aggregate().get().status().code(), 404);\r\n    Assertions.assertEquals(WebClient.of().post(testHandlerURI, new byte[0]).aggregate().get().status().code(), 200);\r\n    Assertions.assertEquals(WebClient.of().post(testNoHandlerURI, new byte[0]).aggregate().get().status().code(), 404);\r\n    Assertions.assertEquals(WebClient.of().trace(testNoHandlerURI).aggregate().get().status().code(), 405);\r\n    Assertions.assertEquals(WebClient.of().trace(rootURI).aggregate().get().status().code(), 405);\r\n    Assertions.assertEquals(WebClient.of().put(testHandlerURI, new byte[0]).aggregate().get().status().code(), 405);\r\n    Assertions.assertEquals(WebClient.of().delete(testHandlerURI).aggregate().get().status().code(), 405);\r\n    Assertions.assertEquals(WebClient.of().options(testHandlerURI).aggregate().get().status().code(), 405);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\skywalking\\oap-server\\server-core\\src\\test\\java\\org\\apache\\skywalking\\oap\\server\\core\\remote\\RemoteServiceHandlerTestCase.java",
  "methodName" : "callTest",
  "sourceCode" : "@Test\r\npublic void callTest() throws DuplicateProviderException, ProviderNotFoundException, IOException {\r\n    final String testWorkerId = \"mock-worker\";\r\n    ModuleManagerTesting moduleManager = new ModuleManagerTesting();\r\n    ModuleDefineTesting moduleDefine = new ModuleDefineTesting();\r\n    moduleManager.put(CoreModule.NAME, moduleDefine);\r\n    WorkerInstancesService workerInstancesService = new WorkerInstancesService();\r\n    moduleDefine.provider().registerServiceImplementation(IWorkerInstanceGetter.class, workerInstancesService);\r\n    moduleDefine.provider().registerServiceImplementation(IWorkerInstanceSetter.class, workerInstancesService);\r\n    TestWorker worker = new TestWorker(moduleManager);\r\n    workerInstancesService.put(testWorkerId, worker, TestRemoteData.class);\r\n    String serverName = InProcessServerBuilder.generateName();\r\n    MetricsCreator metricsCreator = mock(MetricsCreator.class);\r\n    when(metricsCreator.createCounter(any(), any(), any(), any())).thenReturn(new CounterMetrics() {\r\n\r\n        @Override\r\n        public void inc() {\r\n        }\r\n\r\n        @Override\r\n        public void inc(double value) {\r\n        }\r\n    });\r\n    when(metricsCreator.createHistogramMetric(any(), any(), any(), any())).thenReturn(new HistogramMetrics() {\r\n\r\n        @Override\r\n        public Timer createTimer() {\r\n            return super.createTimer();\r\n        }\r\n\r\n        @Override\r\n        public void observe(double value) {\r\n        }\r\n    });\r\n    ModuleDefineTesting telemetryModuleDefine = new ModuleDefineTesting();\r\n    moduleManager.put(TelemetryModule.NAME, telemetryModuleDefine);\r\n    telemetryModuleDefine.provider().registerServiceImplementation(MetricsCreator.class, metricsCreator);\r\n    RemoteServiceGrpc.RemoteServiceStub remoteServiceStub = RemoteServiceGrpc.newStub(channel);\r\n    StreamObserver<RemoteMessage> streamObserver = remoteServiceStub.call(new StreamObserver<Empty>() {\r\n\r\n        @Override\r\n        public void onNext(Empty empty) {\r\n        }\r\n\r\n        @Override\r\n        public void onError(Throwable throwable) {\r\n        }\r\n\r\n        @Override\r\n        public void onCompleted() {\r\n        }\r\n    });\r\n    RemoteMessage.Builder remoteMessage = RemoteMessage.newBuilder();\r\n    remoteMessage.setNextWorkerName(testWorkerId);\r\n    RemoteData.Builder remoteData = RemoteData.newBuilder();\r\n    remoteData.addDataStrings(\"test1\");\r\n    remoteData.addDataStrings(\"test2\");\r\n    remoteData.addDataLongs(10);\r\n    remoteData.addDataLongs(20);\r\n    remoteMessage.setRemoteData(remoteData);\r\n    streamObserver.onNext(remoteMessage.build());\r\n    streamObserver.onCompleted();\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\skywalking\\oap-server\\server-core\\src\\test\\java\\org\\apache\\skywalking\\oap\\server\\core\\storage\\model\\ModelColumnTest.java",
  "methodName" : "testColumnDefine",
  "sourceCode" : "@Test\r\npublic void testColumnDefine() {\r\n    ModelColumn column = new ModelColumn(new ColumnName(c), byte[].class, byte[].class, false, false, true, 0, new SQLDatabaseExtension(), new ElasticSearchExtension(ElasticSearch.MatchQuery.AnalyzerType.OAP_ANALYZER, null, false, false, true), new BanyanDBExtension(-1, -1, true, BanyanDB.IndexRule.IndexType.INVERTED, false, BanyanDB.MatchQuery.AnalyzerType.SIMPLE, true));\r\n    Assertions.assertTrue(column.isStorageOnly());\r\n    Assertions.assertEquals(\"abc\", column.getColumnName().getName());\r\n    column = new ModelColumn(new ColumnName(c), DataTable.class, DataTable.class, false, false, true, 200, new SQLDatabaseExtension(), new ElasticSearchExtension(ElasticSearch.MatchQuery.AnalyzerType.OAP_ANALYZER, null, false, false, true), new BanyanDBExtension(-1, -1, true, BanyanDB.IndexRule.IndexType.INVERTED, false, BanyanDB.MatchQuery.AnalyzerType.SIMPLE, true));\r\n    Assertions.assertTrue(column.isStorageOnly());\r\n    Assertions.assertEquals(\"abc\", column.getColumnName().getName());\r\n    Assertions.assertEquals(200, column.getLength());\r\n    column = new ModelColumn(new ColumnName(c), String.class, String.class, false, false, true, 200, new SQLDatabaseExtension(), new ElasticSearchExtension(ElasticSearch.MatchQuery.AnalyzerType.OAP_ANALYZER, null, false, false, true), new BanyanDBExtension(-1, -1, true, BanyanDB.IndexRule.IndexType.INVERTED, false, BanyanDB.MatchQuery.AnalyzerType.SIMPLE, true));\r\n    Assertions.assertFalse(column.isStorageOnly());\r\n    Assertions.assertEquals(\"abc\", column.getColumnName().getName());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\skywalking\\oap-server\\server-core\\src\\test\\java\\org\\apache\\skywalking\\oap\\server\\core\\storage\\model\\ModelColumnTest.java",
  "methodName" : "testConflictDefinition",
  "sourceCode" : "@Test\r\npublic void testConflictDefinition() {\r\n    assertThrows(IllegalArgumentException.class, () -> {\r\n        new ModelColumn(new ColumnName(c), String.class, String.class, true, false, true, 200, new SQLDatabaseExtension(), new ElasticSearchExtension(ElasticSearch.MatchQuery.AnalyzerType.OAP_ANALYZER, \"abc\", false, false, true), new BanyanDBExtension(-1, -1, true, BanyanDB.IndexRule.IndexType.INVERTED, false, BanyanDB.MatchQuery.AnalyzerType.SIMPLE, true));\r\n    });\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\skywalking\\oap-server\\server-core\\src\\test\\java\\org\\apache\\skywalking\\oap\\server\\core\\storage\\model\\ModelColumnTest.java",
  "methodName" : "testConflictDefinitionIndexOnly",
  "sourceCode" : "@Test\r\npublic void testConflictDefinitionIndexOnly() {\r\n    assertThrows(IllegalArgumentException.class, () -> {\r\n        new ModelColumn(new ColumnName(c), String.class, String.class, true, true, false, 200, new SQLDatabaseExtension(), new ElasticSearchExtension(ElasticSearch.MatchQuery.AnalyzerType.OAP_ANALYZER, \"abc\", false, false, true), new BanyanDBExtension(-1, -1, true, BanyanDB.IndexRule.IndexType.INVERTED, false, BanyanDB.MatchQuery.AnalyzerType.SIMPLE, true));\r\n    });\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\skywalking\\oap-server\\server-core\\src\\test\\java\\org\\apache\\skywalking\\oap\\server\\core\\storage\\model\\ModelColumnTest.java",
  "methodName" : "testConflictDefinitionStorageOnly",
  "sourceCode" : "@Test\r\npublic void testConflictDefinitionStorageOnly() {\r\n    assertThrows(IllegalArgumentException.class, () -> {\r\n        new ModelColumn(new ColumnName(c), String.class, String.class, true, false, false, 200, new SQLDatabaseExtension(), new ElasticSearchExtension(ElasticSearch.MatchQuery.AnalyzerType.OAP_ANALYZER, \"abc\", false, false, true), new BanyanDBExtension(-1, -1, false, BanyanDB.IndexRule.IndexType.INVERTED, false, BanyanDB.MatchQuery.AnalyzerType.SIMPLE, true));\r\n    });\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\skywalking\\oap-server\\server-core\\src\\test\\java\\org\\apache\\skywalking\\oap\\server\\core\\storage\\model\\ModelColumnTest.java",
  "methodName" : "testConflictDefinitionEnableSort",
  "sourceCode" : "@Test\r\npublic void testConflictDefinitionEnableSort() {\r\n    assertThrows(IllegalArgumentException.class, () -> {\r\n        new ModelColumn(new ColumnName(c), String.class, String.class, true, false, false, 200, new SQLDatabaseExtension(), new ElasticSearchExtension(ElasticSearch.MatchQuery.AnalyzerType.OAP_ANALYZER, \"abc\", false, false, true), new BanyanDBExtension(-1, -1, false, BanyanDB.IndexRule.IndexType.INVERTED, true, null, true));\r\n    });\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\skywalking\\oap-server\\server-core\\src\\test\\java\\org\\apache\\skywalking\\oap\\server\\core\\storage\\model\\SQLDatabaseExtensionTest.java",
  "methodName" : "testIndexColumns",
  "sourceCode" : "@Test\r\npublic void testIndexColumns() {\r\n    final SQLDatabaseExtension.MultiColumnsIndex extraQueryIndex = new SQLDatabaseExtension.MultiColumnsIndex(\"a1\", new String[] { \"a2\" });\r\n    Assertions.assertArrayEquals(new String[] { \"a1\", \"a2\" }, extraQueryIndex.getColumns());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\skywalking\\oap-server\\server-core\\src\\test\\java\\org\\apache\\skywalking\\oap\\server\\core\\storage\\model\\SQLDatabaseExtensionTest.java",
  "methodName" : "testIllegalIndexColumns",
  "sourceCode" : "@Test\r\npublic void testIllegalIndexColumns() {\r\n    assertThrows(IllegalArgumentException.class, () -> new SQLDatabaseExtension.MultiColumnsIndex(\"a1\", new String[0]));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\skywalking\\oap-server\\server-core\\src\\test\\java\\org\\apache\\skywalking\\oap\\server\\core\\storage\\model\\StorageModelsTest.java",
  "methodName" : "testStorageModels",
  "sourceCode" : "@Test\r\npublic void testStorageModels() throws StorageException {\r\n    StorageModels models = new StorageModels();\r\n    models.add(TestModel.class, -1, new Storage(\"StorageModelsTest\", false, DownSampling.Hour));\r\n    final List<Model> allModules = models.allModels();\r\n    assertEquals(1, allModules.size());\r\n    final Model model = allModules.get(0);\r\n    assertEquals(4, model.getColumns().size());\r\n    assertFalse(model.getColumns().get(0).isStorageOnly());\r\n    assertFalse(model.getColumns().get(1).isStorageOnly());\r\n    assertFalse(model.getColumns().get(2).isStorageOnly());\r\n    Assertions.assertTrue(model.getColumns().get(3).isStorageOnly());\r\n    assertArrayEquals(new String[] { \"column2\", \"column\" }, model.getColumns().get(2).getSqlDatabaseExtension().getIndices().get(1).getColumns());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\skywalking\\oap-server\\server-core\\src\\test\\java\\org\\apache\\skywalking\\oap\\server\\core\\storage\\PersistenceTimerTest.java",
  "methodName" : "testExtractDataAndSave",
  "sourceCode" : "@Test\r\npublic void testExtractDataAndSave() throws Exception {\r\n    Set<PrepareRequest> result = new HashSet();\r\n    int count = 101;\r\n    int workCount = 10;\r\n    CoreModuleConfig moduleConfig = new CoreModuleConfig();\r\n    moduleConfig.setPersistentPeriod(Integer.MAX_VALUE);\r\n    IBatchDAO iBatchDAO = new IBatchDAO() {\r\n\r\n        @Override\r\n        public void insert(InsertRequest insertRequest) {\r\n        }\r\n\r\n        @Override\r\n        public CompletableFuture<Void> flush(final List<PrepareRequest> prepareRequests) {\r\n            synchronized (result) {\r\n                result.addAll(prepareRequests);\r\n            }\r\n            return CompletableFuture.completedFuture(null);\r\n        }\r\n    };\r\n    for (int i = 0; i < workCount; i++) {\r\n        MetricsStreamProcessor.getInstance().getPersistentWorkers().add(genWorkers(i, count));\r\n        TopNStreamProcessor.getInstance().getPersistentWorkers().add(genTopNWorkers(i, count));\r\n    }\r\n    ModuleManager moduleManager = mock(ModuleManager.class);\r\n    ModuleServiceHolder moduleServiceHolder = mock(ModuleServiceHolder.class);\r\n    doReturn((ModuleProviderHolder) () -> moduleServiceHolder).when(moduleManager).find(anyString());\r\n    doReturn(new MetricsCreatorNoop()).when(moduleServiceHolder).getService(MetricsCreator.class);\r\n    doReturn(iBatchDAO).when(moduleServiceHolder).getService(IBatchDAO.class);\r\n    PersistenceTimer.INSTANCE.isStarted = true;\r\n    PersistenceTimer.INSTANCE.start(moduleManager, moduleConfig);\r\n    CompletableFuture<Void> f = Whitebox.invokeMethod(PersistenceTimer.INSTANCE, \"extractDataAndSave\", iBatchDAO);\r\n    f.join();\r\n    Assertions.assertEquals(count * workCount * 2, result.size());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\skywalking\\oap-server\\server-core\\src\\test\\java\\org\\apache\\skywalking\\oap\\server\\core\\storage\\query\\MetricsQueryUtilTest.java",
  "methodName" : "testComposeLabelValue",
  "sourceCode" : "@ParameterizedTest\r\n@MethodSource(\"data\")\r\npublic void testComposeLabelValue(final List<KeyValue> queryConditionLabels, final List<String> datePoints, final Map<String, DataTable> valueColumnData, final String expectedResult) {\r\n    MetricsCondition condition = new MetricsCondition();\r\n    condition.setName(MODULE_NAME);\r\n    List<MetricsValues> result = IMetricsQueryDAO.Util.sortValues(IMetricsQueryDAO.Util.composeLabelValue(condition.getName(), queryConditionLabels, datePoints, valueColumnData), datePoints, DEFAULT_VALUE);\r\n    Gson gson = new GsonBuilder().disableHtmlEscaping().create();\r\n    assertThat(gson.toJson(result)).isEqualTo(expectedResult);\r\n}",
  "annotations" : [ "ParameterizedTest" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\skywalking\\oap-server\\server-core\\src\\test\\java\\org\\apache\\skywalking\\oap\\server\\core\\storage\\StorageIDTest.java",
  "methodName" : "testRawBuild",
  "sourceCode" : "@Test\r\npublic void testRawBuild() {\r\n    StorageID id = new StorageID();\r\n    //2022-12-14 14:38\r\n    id.append(\"time_bucket\", 202212141438L).append(\"entity_id\", \"encoded-service-name\");\r\n    Assertions.assertEquals(\"202212141438_encoded-service-name\", id.build());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\skywalking\\oap-server\\server-core\\src\\test\\java\\org\\apache\\skywalking\\oap\\server\\core\\storage\\StorageIDTest.java",
  "methodName" : "testEqual",
  "sourceCode" : "@Test\r\npublic void testEqual() {\r\n    StorageID id = new StorageID();\r\n    //2022-12-14 14:38\r\n    id.append(\"time_bucket\", 202212141438L).append(\"entity_id\", \"encoded-service-name\");\r\n    StorageID id2 = new StorageID();\r\n    //2022-12-14 14:38\r\n    id2.append(\"time_bucket\", 202212141438L).append(\"entity_id\", \"encoded-service-name\");\r\n    Assertions.assertEquals(true, id.equals(id2));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\skywalking\\oap-server\\server-core\\src\\test\\java\\org\\apache\\skywalking\\oap\\server\\core\\WorkPathTest.java",
  "methodName" : "testPath",
  "sourceCode" : "@Test\r\npublic void testPath() {\r\n    Assertions.assertTrue(WorkPath.getPath().exists());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\skywalking\\oap-server\\server-fetcher-plugin\\cilium-fetcher-plugin\\src\\test\\java\\org\\apache\\skywalking\\oap\\server\\fetcher\\cilium\\nodes\\CiliumNodeManagerTest.java",
  "methodName" : "test",
  "sourceCode" : "@ParameterizedTest(name = \"{0}\")\r\n@MethodSource(\"data\")\r\npublic void test(String name, List<RemoteInstance> allOAPInstances, List<CiliumNode> allCiliumNodes, List<CiliumNode> shouldMonitorNodeBySelf) {\r\n    Whitebox.setInternalState(ciliumNodeManager, \"remoteInstances\", allOAPInstances);\r\n    Whitebox.setInternalState(ciliumNodeManager, \"allNodes\", allCiliumNodes);\r\n    ciliumNodeManager.refreshUsingNodes();\r\n    final List<CiliumNode> nodes = nodeUpdateListener.getNodes();\r\n    nodes.sort(Comparator.comparing(CiliumNode::getAddress));\r\n    assertThat(nodes).isEqualTo(shouldMonitorNodeBySelf);\r\n}",
  "annotations" : [ "ParameterizedTest" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\skywalking\\oap-server\\server-fetcher-plugin\\kafka-fetcher-plugin\\src\\test\\java\\org\\apache\\skywalking\\oap\\server\\analyzer\\agent\\kafka\\provider\\handler\\AbstractKafkaHandlerTest.java",
  "methodName" : "testGetTopic",
  "sourceCode" : "@Test\r\npublic void testGetTopic() {\r\n    KafkaFetcherConfig config = new KafkaFetcherConfig();\r\n    MockModuleManager manager = new MockModuleManager() {\r\n\r\n        @Override\r\n        protected void init() {\r\n        }\r\n    };\r\n    String plainTopic = config.getTopicNameOfTracingSegments();\r\n    MockKafkaHandler kafkaHandler = new MockKafkaHandler(plainTopic, manager, config);\r\n    //  unset namespace and mm2\r\n    assertEquals(kafkaHandler.getTopic(), plainTopic);\r\n    //set namespace only\r\n    String namespace = \"product\";\r\n    config.setNamespace(namespace);\r\n    assertEquals(namespace + \"-\" + plainTopic, kafkaHandler.getTopic());\r\n    //set mm2 only\r\n    config.setNamespace(\"\");\r\n    String mm2SourceAlias = \"DC1\";\r\n    config.setMm2SourceAlias(mm2SourceAlias);\r\n    String mm2SourceSeparator = \".\";\r\n    config.setMm2SourceSeparator(mm2SourceSeparator);\r\n    assertEquals(mm2SourceAlias + mm2SourceSeparator + plainTopic, kafkaHandler.getTopic());\r\n    //set namespace and mm2\r\n    config.setNamespace(namespace);\r\n    config.setMm2SourceAlias(mm2SourceAlias);\r\n    config.setMm2SourceSeparator(mm2SourceSeparator);\r\n    assertEquals(mm2SourceAlias + mm2SourceSeparator + namespace + \"-\" + plainTopic, kafkaHandler.getTopic());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\skywalking\\oap-server\\server-fetcher-plugin\\kafka-fetcher-plugin\\src\\test\\java\\org\\apache\\skywalking\\oap\\server\\analyzer\\agent\\kafka\\provider\\handler\\JVMMetricsHandlerTest.java",
  "methodName" : "testTopicName",
  "sourceCode" : "@Test\r\npublic void testTopicName() {\r\n    Assertions.assertEquals(handler.getTopic(), TOPIC_NAME);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\skywalking\\oap-server\\server-fetcher-plugin\\kafka-fetcher-plugin\\src\\test\\java\\org\\apache\\skywalking\\oap\\server\\analyzer\\agent\\kafka\\provider\\handler\\JVMMetricsHandlerTest.java",
  "methodName" : "testHandler",
  "sourceCode" : "@Test\r\npublic void testHandler() {\r\n    long currentTimeMillis = System.currentTimeMillis();\r\n    JVMMetric.Builder jvmBuilder = JVMMetric.newBuilder();\r\n    jvmBuilder.setTime(currentTimeMillis);\r\n    jvmBuilder.setCpu(CPU.newBuilder().setUsagePercent(0.98d).build());\r\n    jvmBuilder.addAllMemory(Lists.newArrayList(Memory.newBuilder().setInit(10).setUsed(100).setIsHeap(false).build()));\r\n    jvmBuilder.addAllMemoryPool(Lists.newArrayList(MemoryPool.newBuilder().build()));\r\n    jvmBuilder.addAllGc(Lists.newArrayList(GC.newBuilder().build()));\r\n    JVMMetricCollection metrics = JVMMetricCollection.newBuilder().setService(\"service\").setServiceInstance(\"service-instance\").addMetrics(jvmBuilder.build()).build();\r\n    handler.handle(new ConsumerRecord<>(TOPIC_NAME, 0, 0, \"\", Bytes.wrap(metrics.toByteArray())));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\skywalking\\oap-server\\server-fetcher-plugin\\kafka-fetcher-plugin\\src\\test\\java\\org\\apache\\skywalking\\oap\\server\\analyzer\\agent\\kafka\\provider\\handler\\LogHandlerTest.java",
  "methodName" : "testGetTopic",
  "sourceCode" : "@Test\r\npublic void testGetTopic() {\r\n    assertEquals(handler.getTopic(), TOPIC_NAME);\r\n    String namespace = \"product\";\r\n    config.setNamespace(namespace);\r\n    assertEquals(namespace + \"-\" + TOPIC_NAME, handler.getTopic());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\skywalking\\oap-server\\server-fetcher-plugin\\kafka-fetcher-plugin\\src\\test\\java\\org\\apache\\skywalking\\oap\\server\\analyzer\\agent\\kafka\\provider\\handler\\ServiceManagementHandlerTest.java",
  "methodName" : "testTopicName",
  "sourceCode" : "@Test\r\npublic void testTopicName() {\r\n    Assertions.assertEquals(handler.getTopic(), TOPIC_NAME);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\skywalking\\oap-server\\server-fetcher-plugin\\kafka-fetcher-plugin\\src\\test\\java\\org\\apache\\skywalking\\oap\\server\\analyzer\\agent\\kafka\\provider\\handler\\ServiceManagementHandlerTest.java",
  "methodName" : "testHandler",
  "sourceCode" : "@Test\r\npublic void testHandler() {\r\n    InstanceProperties properties = InstanceProperties.newBuilder().setService(SERVICE).setServiceInstance(SERVICE_INSTANCE).build();\r\n    InstancePingPkg ping = InstancePingPkg.newBuilder().setService(SERVICE).setServiceInstance(SERVICE_INSTANCE).build();\r\n    handler.handle(new ConsumerRecord<>(TOPIC_NAME, 0, 0, \"register\", Bytes.wrap(properties.toByteArray())));\r\n    handler.handle(new ConsumerRecord<>(TOPIC_NAME, 0, 0, ping.getServiceInstance(), Bytes.wrap(ping.toByteArray())));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\skywalking\\oap-server\\server-library\\library-client\\src\\test\\java\\org\\apache\\skywalking\\library\\elasticsearch\\bulk\\ElasticSearchIT.java",
  "methodName" : "indexOperate",
  "sourceCode" : "@ParameterizedTest(name = \"version: {0}\")\r\n@MethodSource(\"versions\")\r\npublic void indexOperate(final ElasticsearchContainer server, final String namespace) {\r\n    server.start();\r\n    final ElasticSearchClient client = new ElasticSearchClient(server.getHttpHostAddress(), \"http\", \"\", \"\", \"test\", \"test\", indexNameConverter(namespace), 500, 6000, 0, 15);\r\n    client.connect();\r\n    Map<String, Object> settings = new HashMap<>();\r\n    settings.put(\"number_of_shards\", 2);\r\n    settings.put(\"number_of_replicas\", 2);\r\n    final Mappings mappings = Mappings.builder().type(\"type\").properties(ImmutableMap.of(\"column1\", ImmutableMap.of(\"type\", \"text\"))).build();\r\n    String indexName = \"test_index_operate\";\r\n    client.createIndex(indexName, mappings, settings);\r\n    Assertions.assertTrue(client.isExistsIndex(indexName));\r\n    Index index = client.getIndex(indexName).get();\r\n    log.info(index.toString());\r\n    Assertions.assertEquals(\"2\", ((Map<String, ?>) index.getSettings().get(\"index\")).get(\"number_of_shards\"));\r\n    Assertions.assertEquals(\"2\", ((Map<String, ?>) index.getSettings().get(\"index\")).get(\"number_of_replicas\"));\r\n    Assertions.assertEquals(\"text\", ((Map<String, ?>) index.getMappings().getProperties().get(\"column1\")).get(\"type\"));\r\n    client.shutdown();\r\n    server.stop();\r\n}",
  "annotations" : [ "ParameterizedTest" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\skywalking\\oap-server\\server-library\\library-client\\src\\test\\java\\org\\apache\\skywalking\\library\\elasticsearch\\bulk\\ElasticSearchIT.java",
  "methodName" : "documentOperate",
  "sourceCode" : "@ParameterizedTest(name = \"{0}\")\r\n@MethodSource(\"versions\")\r\npublic void documentOperate(final ElasticsearchContainer server, final String namespace) {\r\n    server.start();\r\n    final ElasticSearchClient client = new ElasticSearchClient(server.getHttpHostAddress(), \"http\", \"\", \"\", \"test\", \"test\", indexNameConverter(namespace), 500, 6000, 0, 15);\r\n    client.connect();\r\n    String id = String.valueOf(System.currentTimeMillis());\r\n    Map<String, Object> builder = ImmutableMap.<String, Object>builder().put(\"user\", \"kimchy\").put(\"post_date\", \"2009-11-15T14:12:12\").put(\"message\", \"trying out Elasticsearch\").build();\r\n    String indexName = \"test_document_operate\";\r\n    client.forceInsert(indexName, id, builder);\r\n    Optional<Document> response = client.get(indexName, id);\r\n    Assertions.assertEquals(\"kimchy\", response.get().getSource().get(\"user\"));\r\n    Assertions.assertEquals(\"trying out Elasticsearch\", response.get().getSource().get(\"message\"));\r\n    builder = ImmutableMap.<String, Object>builder().put(\"user\", \"pengys\").build();\r\n    client.forceUpdate(indexName, id, builder);\r\n    response = client.get(indexName, id);\r\n    Assertions.assertEquals(\"pengys\", response.get().getSource().get(\"user\"));\r\n    Assertions.assertEquals(\"trying out Elasticsearch\", response.get().getSource().get(\"message\"));\r\n    SearchBuilder sourceBuilder = Search.builder();\r\n    sourceBuilder.query(Query.term(\"user\", \"pengys\"));\r\n    SearchResponse searchResponse = client.search(indexName, sourceBuilder.build());\r\n    Assertions.assertEquals(\"trying out Elasticsearch\", searchResponse.getHits().getHits().iterator().next().getSource().get(\"message\"));\r\n    client.deleteById(indexName, id);\r\n    Assertions.assertFalse(client.existDoc(indexName, id));\r\n    for (int i = 0; i < 100; i++) {\r\n        builder = ImmutableMap.<String, Object>builder().put(\"user\", \"sw\").put(\"post_date\", \"2009-11-15T14:12:12\").put(\"message\", \"trying out Elasticsearch\").build();\r\n        indexName = \"test_scroller\";\r\n        client.forceInsert(indexName, UUID.randomUUID().toString(), builder);\r\n    }\r\n    SearchBuilder search = Search.builder().size(50);\r\n    search.query(Query.term(\"user\", \"sw\"));\r\n    final var scroller = ElasticSearchScroller.<SearchHit>builder().client(client).search(search.build()).index(indexName).queryMaxSize(40).resultConverter(Function.identity()).build();\r\n    Assertions.assertEquals(40, scroller.scroll().size());\r\n    client.shutdown();\r\n    server.stop();\r\n}",
  "annotations" : [ "ParameterizedTest" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\skywalking\\oap-server\\server-library\\library-client\\src\\test\\java\\org\\apache\\skywalking\\library\\elasticsearch\\bulk\\ElasticSearchIT.java",
  "methodName" : "templateOperate",
  "sourceCode" : "@ParameterizedTest(name = \"{0}\")\r\n@MethodSource(\"versions\")\r\npublic void templateOperate(final ElasticsearchContainer server, final String namespace) {\r\n    server.start();\r\n    final ElasticSearchClient client = new ElasticSearchClient(server.getHttpHostAddress(), \"http\", \"\", \"\", \"test\", \"test\", indexNameConverter(namespace), 500, 6000, 0, 15);\r\n    client.connect();\r\n    Map<String, Object> settings = new HashMap<>();\r\n    settings.put(\"number_of_shards\", 1);\r\n    settings.put(\"number_of_replicas\", 0);\r\n    settings.put(\"index.refresh_interval\", \"3s\");\r\n    settings.put(\"analysis.analyzer.oap_analyzer.type\", \"stop\");\r\n    Mappings mapping = Mappings.builder().type(\"type\").properties(ImmutableMap.of(\"name\", ImmutableMap.of(\"type\", \"text\"))).build();\r\n    String indexName = \"template_operate\";\r\n    client.createOrUpdateTemplate(indexName, settings, mapping, 0);\r\n    Assertions.assertTrue(client.isExistsTemplate(indexName));\r\n    Map<String, Object> builder = ImmutableMap.of(\"name\", \"pengys\");\r\n    client.forceInsert(indexName + \"-2019\", \"testid\", builder);\r\n    Index index = client.getIndex(indexName + \"-2019\").get();\r\n    log.info(index.toString());\r\n    Assertions.assertEquals(\"1\", ((Map<String, Object>) index.getSettings().get(\"index\")).get(\"number_of_shards\"));\r\n    Assertions.assertEquals(\"0\", ((Map<String, ?>) index.getSettings().get(\"index\")).get(\"number_of_replicas\"));\r\n    client.deleteTemplate(indexName);\r\n    Assertions.assertFalse(client.isExistsTemplate(indexName));\r\n    client.shutdown();\r\n    server.stop();\r\n}",
  "annotations" : [ "ParameterizedTest" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\skywalking\\oap-server\\server-library\\library-client\\src\\test\\java\\org\\apache\\skywalking\\library\\elasticsearch\\bulk\\ElasticSearchIT.java",
  "methodName" : "bulk",
  "sourceCode" : "@ParameterizedTest(name = \"{0}\")\r\n@MethodSource(\"versions\")\r\npublic void bulk(final ElasticsearchContainer server, final String namespace) {\r\n    server.start();\r\n    final ElasticSearchClient client = new ElasticSearchClient(server.getHttpHostAddress(), \"http\", \"\", \"\", \"test\", \"test\", indexNameConverter(namespace), 500, 6000, 0, 15);\r\n    client.connect();\r\n    BulkProcessor bulkProcessor = client.createBulkProcessor(2000, 10, 2, 5 * 1024 * 1024);\r\n    Map<String, String> source = new HashMap<>();\r\n    source.put(\"column1\", \"value1\");\r\n    source.put(\"column2\", \"value2\");\r\n    for (int i = 0; i < 100; i++) {\r\n        IndexRequestWrapper indexRequest = new IndexRequestWrapper(\"bulk_insert_test\", \"type\", String.valueOf(i), source);\r\n        bulkProcessor.add(indexRequest.getRequest());\r\n    }\r\n    bulkProcessor.flush();\r\n    client.shutdown();\r\n    server.stop();\r\n}",
  "annotations" : [ "ParameterizedTest" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\skywalking\\oap-server\\server-library\\library-client\\src\\test\\java\\org\\apache\\skywalking\\library\\elasticsearch\\bulk\\ElasticSearchIT.java",
  "methodName" : "bulkPer_1KB",
  "sourceCode" : "@ParameterizedTest(name = \"{0}\")\r\n@MethodSource(\"versions\")\r\npublic void bulkPer_1KB(final ElasticsearchContainer server, final String namespace) {\r\n    server.start();\r\n    final ElasticSearchClient client = new ElasticSearchClient(server.getHttpHostAddress(), \"http\", \"\", \"\", \"test\", \"test\", indexNameConverter(namespace), 500, 6000, 0, 15);\r\n    client.connect();\r\n    BulkProcessor bulkProcessor = client.createBulkProcessor(2000, 10, 2, 1024);\r\n    Map<String, String> source = new HashMap<>();\r\n    source.put(\"column1\", RandomStringUtils.randomAlphanumeric(1024));\r\n    source.put(\"column2\", \"value2\");\r\n    for (int i = 0; i < 100; i++) {\r\n        IndexRequestWrapper indexRequest = new IndexRequestWrapper(\"bulk_insert_test6\", \"type\", String.valueOf(i), source);\r\n        bulkProcessor.add(indexRequest.getRequest());\r\n    }\r\n    bulkProcessor.flush();\r\n}",
  "annotations" : [ "ParameterizedTest" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\skywalking\\oap-server\\server-library\\library-client\\src\\test\\java\\org\\apache\\skywalking\\library\\elasticsearch\\bulk\\ElasticSearchIT.java",
  "methodName" : "timeSeriesOperate",
  "sourceCode" : "@ParameterizedTest(name = \"{0}\")\r\n@MethodSource(\"versions\")\r\npublic void timeSeriesOperate(final ElasticsearchContainer server, final String namespace) {\r\n    server.start();\r\n    final ElasticSearchClient client = new ElasticSearchClient(server.getHttpHostAddress(), \"http\", \"\", \"\", \"test\", \"test\", indexNameConverter(namespace), 500, 6000, 0, 15);\r\n    client.connect();\r\n    final String indexName = \"test_time_series_operate\";\r\n    final String timeSeriesIndexName = indexName + \"-2019\";\r\n    final Mappings mapping = Mappings.builder().type(\"type\").properties(ImmutableMap.of(\"name\", ImmutableMap.of(\"type\", \"text\"))).build();\r\n    client.createOrUpdateTemplate(indexName, new HashMap<>(), mapping, 0);\r\n    Map<String, Object> builder = ImmutableMap.of(\"name\", \"pengys\");\r\n    client.forceInsert(timeSeriesIndexName, \"testid\", builder);\r\n    Collection<String> indexes = client.retrievalIndexByAliases(indexName);\r\n    Assertions.assertEquals(1, indexes.size());\r\n    String index = indexes.iterator().next();\r\n    Assertions.assertTrue(client.deleteByIndexName(index));\r\n    Assertions.assertFalse(client.isExistsIndex(timeSeriesIndexName));\r\n    client.deleteTemplate(indexName);\r\n    client.shutdown();\r\n    server.stop();\r\n}",
  "annotations" : [ "ParameterizedTest" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\skywalking\\oap-server\\server-library\\library-datacarrier-queue\\src\\test\\java\\org\\apache\\skywalking\\oap\\server\\library\\datacarrier\\consumer\\ConsumeDriverTest.java",
  "methodName" : "testBeginConsumeDriver",
  "sourceCode" : "@Test\r\npublic void testBeginConsumeDriver() {\r\n    Channels<SampleData> channels = new Channels<SampleData>(2, 100, new SimpleRollingPartitioner<SampleData>(), BufferStrategy.BLOCKING);\r\n    ConsumeDriver<SampleData> pool = new ConsumeDriver<SampleData>(\"default\", channels, new SampleConsumer(), 2, 20);\r\n    pool.begin(channels);\r\n    ConsumerThread[] threads = Whitebox.getInternalState(pool, \"consumerThreads\");\r\n    Assertions.assertEquals(2, threads.length);\r\n    Assertions.assertTrue(threads[0].isAlive());\r\n    Assertions.assertTrue(threads[1].isAlive());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\skywalking\\oap-server\\server-library\\library-datacarrier-queue\\src\\test\\java\\org\\apache\\skywalking\\oap\\server\\library\\datacarrier\\consumer\\ConsumeDriverTest.java",
  "methodName" : "testCloseConsumeDriver",
  "sourceCode" : "@Test\r\npublic void testCloseConsumeDriver() throws InterruptedException, IllegalAccessException {\r\n    Channels<SampleData> channels = new Channels<SampleData>(2, 100, new SimpleRollingPartitioner<SampleData>(), BufferStrategy.BLOCKING);\r\n    ConsumeDriver<SampleData> pool = new ConsumeDriver<SampleData>(\"default\", channels, new SampleConsumer(), 2, 20);\r\n    pool.begin(channels);\r\n    Thread.sleep(5000);\r\n    pool.close(channels);\r\n    ConsumerThread[] threads = Whitebox.getInternalState(pool, \"consumerThreads\");\r\n    Assertions.assertEquals(2, threads.length);\r\n    Assertions.assertFalse((Boolean) Whitebox.getInternalState(threads[0], \"running\"));\r\n    Assertions.assertFalse((Boolean) Whitebox.getInternalState(threads[1], \"running\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\skywalking\\oap-server\\server-library\\library-datacarrier-queue\\src\\test\\java\\org\\apache\\skywalking\\oap\\server\\library\\datacarrier\\consumer\\ConsumerPoolFactoryTest.java",
  "methodName" : "get",
  "sourceCode" : "@Test\r\npublic void get() {\r\n    ConsumerPool consumerPool = ConsumerPoolFactory.INSTANCE.get(\"my-test-pool\");\r\n    assertNotNull(consumerPool);\r\n    ConsumerPool notExist = ConsumerPoolFactory.INSTANCE.get(\"not-exists-pool\");\r\n    assertNull(notExist);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\skywalking\\oap-server\\server-library\\library-datacarrier-queue\\src\\test\\java\\org\\apache\\skywalking\\oap\\server\\library\\datacarrier\\consumer\\ConsumerTest.java",
  "methodName" : "testConsumerLessThanChannel",
  "sourceCode" : "@Test\r\npublic void testConsumerLessThanChannel() throws IllegalAccessException {\r\n    final DataCarrier<SampleData> carrier = new DataCarrier<>(2, 100);\r\n    for (int i = 0; i < 100; i++) {\r\n        Assertions.assertTrue(carrier.produce(new SampleData().setName(\"data\" + i)));\r\n    }\r\n    SampleConsumer consumer = new SampleConsumer();\r\n    consumer.i = 100;\r\n    carrier.consume(SampleConsumer.class, 1);\r\n    Assertions.assertEquals(1, ((SampleConsumer) getConsumer(carrier)).i);\r\n    SampleConsumer2 consumer2 = new SampleConsumer2();\r\n    consumer2.i = 100;\r\n    carrier.consume(consumer2, 1);\r\n    Assertions.assertEquals(100, ((SampleConsumer2) getConsumer(carrier)).i);\r\n    carrier.shutdownConsumers();\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\skywalking\\oap-server\\server-library\\library-datacarrier-queue\\src\\test\\java\\org\\apache\\skywalking\\oap\\server\\library\\datacarrier\\consumer\\ConsumerTest.java",
  "methodName" : "testConsumerMoreThanChannel",
  "sourceCode" : "@Test\r\npublic void testConsumerMoreThanChannel() throws InterruptedException {\r\n    BUFFER.drainTo(new ArrayList<SampleData>());\r\n    final DataCarrier<SampleData> carrier = new DataCarrier<SampleData>(2, 100);\r\n    for (int i = 0; i < 200; i++) {\r\n        Assertions.assertTrue(carrier.produce(new SampleData().setName(\"data\" + i)));\r\n    }\r\n    SampleConsumer consumer = new SampleConsumer();\r\n    carrier.consume(SampleConsumer.class, 5);\r\n    Thread.sleep(2000);\r\n    List<SampleData> result = new ArrayList<SampleData>();\r\n    BUFFER.drainTo(result);\r\n    Assertions.assertEquals(200, result.size());\r\n    HashSet<Integer> consumerCounter = new HashSet<Integer>();\r\n    for (SampleData data : result) {\r\n        consumerCounter.add(data.getIntValue());\r\n    }\r\n    Assertions.assertEquals(2, consumerCounter.size());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\skywalking\\oap-server\\server-library\\library-datacarrier-queue\\src\\test\\java\\org\\apache\\skywalking\\oap\\server\\library\\datacarrier\\consumer\\ConsumerTest.java",
  "methodName" : "testConsumerOnError",
  "sourceCode" : "@Test\r\npublic void testConsumerOnError() throws InterruptedException {\r\n    final DataCarrier<SampleData> carrier = new DataCarrier<SampleData>(2, 100);\r\n    for (int i = 0; i < 200; i++) {\r\n        Assertions.assertTrue(carrier.produce(new SampleData().setName(\"data\" + i)));\r\n    }\r\n    SampleConsumer2 consumer = new SampleConsumer2();\r\n    consumer.onError = true;\r\n    carrier.consume(consumer, 5);\r\n    Thread.sleep(3 * 1000L);\r\n    Assertions.assertTrue(IS_OCCUR_ERROR);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\skywalking\\oap-server\\server-library\\library-datacarrier-queue\\src\\test\\java\\org\\apache\\skywalking\\oap\\server\\library\\datacarrier\\DataCarrierTest.java",
  "methodName" : "testCreateDataCarrier",
  "sourceCode" : "@Test\r\npublic void testCreateDataCarrier() {\r\n    DataCarrier<SampleData> carrier = new DataCarrier<>(5, 100, BufferStrategy.IF_POSSIBLE);\r\n    Channels<SampleData> channels = Whitebox.getInternalState(carrier, \"channels\");\r\n    assertEquals(5, channels.getChannelSize());\r\n    QueueBuffer<SampleData> buffer = channels.getBuffer(0);\r\n    assertEquals(100, buffer.getBufferSize());\r\n    assertEquals(Whitebox.getInternalState(buffer, \"strategy\"), BufferStrategy.IF_POSSIBLE);\r\n    assertEquals(Whitebox.getInternalState(buffer, \"strategy\"), BufferStrategy.IF_POSSIBLE);\r\n    assertEquals(Whitebox.getInternalState(channels, \"dataPartitioner\").getClass(), SimpleRollingPartitioner.class);\r\n    carrier.setPartitioner(new ProducerThreadPartitioner<>());\r\n    assertEquals(Whitebox.getInternalState(channels, \"dataPartitioner\").getClass(), ProducerThreadPartitioner.class);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\skywalking\\oap-server\\server-library\\library-datacarrier-queue\\src\\test\\java\\org\\apache\\skywalking\\oap\\server\\library\\datacarrier\\DataCarrierTest.java",
  "methodName" : "testProduce",
  "sourceCode" : "@Test\r\npublic void testProduce() throws IllegalAccessException {\r\n    DataCarrier<SampleData> carrier = new DataCarrier<>(2, 100);\r\n    assertTrue(carrier.produce(new SampleData().setName(\"a\")));\r\n    assertTrue(carrier.produce(new SampleData().setName(\"b\")));\r\n    assertTrue(carrier.produce(new SampleData().setName(\"c\")));\r\n    assertTrue(carrier.produce(new SampleData().setName(\"d\")));\r\n    Channels<SampleData> channels = Whitebox.getInternalState(carrier, \"channels\");\r\n    QueueBuffer<SampleData> buffer1 = channels.getBuffer(0);\r\n    List result = new ArrayList();\r\n    buffer1.obtain(result);\r\n    assertEquals(2, result.size());\r\n    QueueBuffer<SampleData> buffer2 = channels.getBuffer(1);\r\n    buffer2.obtain(result);\r\n    assertEquals(4, result.size());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\skywalking\\oap-server\\server-library\\library-datacarrier-queue\\src\\test\\java\\org\\apache\\skywalking\\oap\\server\\library\\datacarrier\\DataCarrierTest.java",
  "methodName" : "testIfPossibleProduce",
  "sourceCode" : "@Test\r\npublic void testIfPossibleProduce() {\r\n    DataCarrier<SampleData> carrier = new DataCarrier<>(2, 100, BufferStrategy.IF_POSSIBLE);\r\n    for (int i = 0; i < 200; i++) {\r\n        assertTrue(carrier.produce(new SampleData().setName(\"d\" + i)));\r\n    }\r\n    for (int i = 0; i < 200; i++) {\r\n        Assertions.assertFalse(carrier.produce(new SampleData().setName(\"d\" + i + \"_2\")));\r\n    }\r\n    Channels<SampleData> channels = Whitebox.getInternalState(carrier, \"channels\");\r\n    QueueBuffer<SampleData> buffer1 = channels.getBuffer(0);\r\n    List<SampleData> result = new ArrayList<>();\r\n    buffer1.obtain(result);\r\n    QueueBuffer<SampleData> buffer2 = channels.getBuffer(1);\r\n    buffer2.obtain(result);\r\n    assertEquals(200, result.size());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\skywalking\\oap-server\\server-library\\library-datacarrier-queue\\src\\test\\java\\org\\apache\\skywalking\\oap\\server\\library\\datacarrier\\DataCarrierTest.java",
  "methodName" : "testBlockingProduce",
  "sourceCode" : "@Test\r\npublic void testBlockingProduce() {\r\n    final DataCarrier<SampleData> carrier = new DataCarrier<>(2, 100);\r\n    for (int i = 0; i < 200; i++) {\r\n        assertTrue(carrier.produce(new SampleData().setName(\"d\" + i)));\r\n    }\r\n    long time1 = System.currentTimeMillis();\r\n    new Thread(() -> {\r\n        try {\r\n            Thread.sleep(3000);\r\n        } catch (InterruptedException e) {\r\n            e.printStackTrace();\r\n        }\r\n        IConsumer<SampleData> consumer = new IConsumer<SampleData>() {\r\n\r\n            @Override\r\n            public void consume(List<SampleData> data) {\r\n            }\r\n\r\n            @Override\r\n            public void onError(List<SampleData> data, Throwable t) {\r\n            }\r\n        };\r\n        carrier.consume(consumer, 1);\r\n    }).start();\r\n    carrier.produce(new SampleData().setName(\"blocking-data\"));\r\n    long time2 = System.currentTimeMillis();\r\n    assertTrue(time2 - time1 > 2000);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\skywalking\\oap-server\\server-library\\library-datacarrier-queue\\src\\test\\java\\org\\apache\\skywalking\\oap\\server\\library\\datacarrier\\EnvUtilTest.java",
  "methodName" : "getInt",
  "sourceCode" : "@Test\r\npublic void getInt() {\r\n    assertEquals(123, EnvUtil.getInt(\"myInt\", 234));\r\n    assertEquals(234, EnvUtil.getLong(\"wrongInt\", 234));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\skywalking\\oap-server\\server-library\\library-datacarrier-queue\\src\\test\\java\\org\\apache\\skywalking\\oap\\server\\library\\datacarrier\\EnvUtilTest.java",
  "methodName" : "getLong",
  "sourceCode" : "@Test\r\npublic void getLong() {\r\n    assertEquals(12345678901234567L, EnvUtil.getLong(\"myLong\", 123L));\r\n    assertEquals(987654321987654321L, EnvUtil.getLong(\"wrongLong\", 987654321987654321L));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\skywalking\\oap-server\\server-library\\library-datacarrier-queue\\src\\test\\java\\org\\apache\\skywalking\\oap\\server\\library\\datacarrier\\partition\\ProducerThreadPartitionerTest.java",
  "methodName" : "testPartition",
  "sourceCode" : "@Test\r\npublic void testPartition() {\r\n    int partitionNum = (int) Thread.currentThread().getId() % 10;\r\n    ProducerThreadPartitioner<SampleData> partitioner = new ProducerThreadPartitioner<SampleData>();\r\n    assertEquals(partitioner.partition(10, new SampleData()), partitionNum);\r\n    assertEquals(partitioner.partition(10, new SampleData()), partitionNum);\r\n    assertEquals(partitioner.partition(10, new SampleData()), partitionNum);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\skywalking\\oap-server\\server-library\\library-datacarrier-queue\\src\\test\\java\\org\\apache\\skywalking\\oap\\server\\library\\datacarrier\\partition\\SimpleRollingPartitionerTest.java",
  "methodName" : "testPartition",
  "sourceCode" : "@Test\r\npublic void testPartition() {\r\n    SimpleRollingPartitioner<SampleData> partitioner = new SimpleRollingPartitioner<SampleData>();\r\n    assertEquals(partitioner.partition(10, new SampleData()), 0);\r\n    assertEquals(partitioner.partition(10, new SampleData()), 1);\r\n    assertEquals(partitioner.partition(10, new SampleData()), 2);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\skywalking\\oap-server\\server-library\\library-elasticsearch-client\\src\\test\\java\\org\\apache\\skywalking\\library\\elasticsearch\\ElasticSearchIT.java",
  "methodName" : "testTemplate",
  "sourceCode" : "@ParameterizedTest(name = \"version: {0}\")\r\n@MethodSource(\"es\")\r\npublic void testTemplate(final String ignored, final ElasticsearchContainer server) {\r\n    server.start();\r\n    final ElasticSearch client = ElasticSearch.builder().endpoints(server.getHttpHostAddress()).build();\r\n    client.connect();\r\n    final String name = \"test-template\";\r\n    final TemplateClient templateClient = client.templates();\r\n    final ImmutableMap<String, Object> properties = ImmutableMap.of(\"metric_table\", ImmutableMap.of(\"type\", \"keyword\"), \"service_id\", ImmutableMap.of(\"type\", \"keyword\"));\r\n    final Mappings.Source sourceConf = new Mappings.Source();\r\n    sourceConf.getExcludes().add(\"test\");\r\n    final Mappings mappings = Mappings.builder().type(\"_doc\").properties(properties).source(sourceConf).build();\r\n    assertThat(templateClient.createOrUpdate(name, ImmutableMap.of(), mappings, 0)).isTrue();\r\n    assertThat(templateClient.exists(name)).isTrue();\r\n    assertThat(templateClient.get(name)).isPresent().map(IndexTemplate::getMappings).map(Mappings::getProperties).hasValue(mappings.getProperties());\r\n    assertThat(templateClient.get(name)).isPresent().map(IndexTemplate::getMappings).map(Mappings::getSource).map(Mappings.Source::getExcludes).hasValue(mappings.getSource().getExcludes());\r\n    server.close();\r\n}",
  "annotations" : [ "ParameterizedTest" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\skywalking\\oap-server\\server-library\\library-elasticsearch-client\\src\\test\\java\\org\\apache\\skywalking\\library\\elasticsearch\\ElasticSearchIT.java",
  "methodName" : "testIndex",
  "sourceCode" : "@ParameterizedTest(name = \"version: {0}\")\r\n@MethodSource(\"es\")\r\npublic void testIndex(final String ignored, final ElasticsearchContainer server) {\r\n    server.start();\r\n    final ElasticSearch client = ElasticSearch.builder().endpoints(server.getHttpHostAddress()).build();\r\n    client.connect();\r\n    final String index = \"test-index\";\r\n    assertFalse(client.index().exists(index));\r\n    assertFalse(client.index().get(index).isPresent());\r\n    assertTrue(client.index().create(index, null, null));\r\n    assertTrue(client.index().exists(index));\r\n    assertNotNull(client.index().get(index));\r\n    assertTrue(client.index().delete(index));\r\n    assertFalse(client.index().get(index).isPresent());\r\n    server.close();\r\n}",
  "annotations" : [ "ParameterizedTest" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\skywalking\\oap-server\\server-library\\library-elasticsearch-client\\src\\test\\java\\org\\apache\\skywalking\\library\\elasticsearch\\ElasticSearchIT.java",
  "methodName" : "testDoc",
  "sourceCode" : "@ParameterizedTest(name = \"version: {0}\")\r\n@MethodSource(\"es\")\r\npublic void testDoc(final String ignored, final ElasticsearchContainer server) {\r\n    server.start();\r\n    final ElasticSearch client = ElasticSearch.builder().endpoints(server.getHttpHostAddress()).build();\r\n    client.connect();\r\n    final String index = \"test-index\";\r\n    assertTrue(client.index().create(index, null, null));\r\n    final ImmutableMap<String, Object> doc = ImmutableMap.of(\"key\", \"val\");\r\n    // UI management templates' IDs contains spaces\r\n    final String idWithSpace = \"an id\";\r\n    final String type = \"type\";\r\n    client.documents().index(IndexRequest.builder().index(index).type(type).id(idWithSpace).doc(doc).build(), null);\r\n    assertTrue(client.documents().get(index, type, idWithSpace).isPresent());\r\n    assertEquals(client.documents().get(index, type, idWithSpace).get().getId(), idWithSpace);\r\n    assertEquals(client.documents().get(index, type, idWithSpace).get().getSource(), doc);\r\n    server.close();\r\n}",
  "annotations" : [ "ParameterizedTest" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\skywalking\\oap-server\\server-library\\library-elasticsearch-client\\src\\test\\java\\org\\apache\\skywalking\\library\\elasticsearch\\ElasticSearchIT.java",
  "methodName" : "testDocUpdate",
  "sourceCode" : "@ParameterizedTest(name = \"version: {0}\")\r\n@MethodSource(\"es\")\r\npublic void testDocUpdate(final String ignored, final ElasticsearchContainer server) {\r\n    server.start();\r\n    final ElasticSearch client = ElasticSearch.builder().endpoints(server.getHttpHostAddress()).build();\r\n    client.connect();\r\n    final String index = \"test-index-update\";\r\n    assertTrue(client.index().create(index, null, null));\r\n    final ImmutableMap<String, Object> doc = ImmutableMap.of(\"key\", \"val\");\r\n    // UI management templates' IDs contains spaces\r\n    final String idWithSpace = \"an id\";\r\n    final String type = \"type\";\r\n    client.documents().index(IndexRequest.builder().index(index).type(type).id(idWithSpace).doc(doc).build(), null);\r\n    assertTrue(client.documents().get(index, type, idWithSpace).isPresent());\r\n    assertEquals(client.documents().get(index, type, idWithSpace).get().getId(), idWithSpace);\r\n    assertEquals(client.documents().get(index, type, idWithSpace).get().getSource(), doc);\r\n    final Map<String, Object> updatedDoc = ImmutableMap.of(\"key\", \"new-val\");\r\n    client.documents().update(UpdateRequest.builder().index(index).type(type).id(idWithSpace).doc(updatedDoc).build(), null);\r\n    assertEquals(client.documents().get(index, type, idWithSpace).get().getSource(), updatedDoc);\r\n    server.close();\r\n}",
  "annotations" : [ "ParameterizedTest" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\skywalking\\oap-server\\server-library\\library-elasticsearch-client\\src\\test\\java\\org\\apache\\skywalking\\library\\elasticsearch\\ElasticSearchIT.java",
  "methodName" : "testSearch",
  "sourceCode" : "@SuppressWarnings(\"unchecked\")\r\n@ParameterizedTest(name = \"version: {0}\")\r\n@MethodSource(\"es\")\r\npublic void testSearch(final String ignored, final ElasticsearchContainer server) {\r\n    server.start();\r\n    final ElasticSearch client = ElasticSearch.builder().endpoints(server.getHttpHostAddress()).build();\r\n    client.connect();\r\n    final String index = \"test-index\";\r\n    final Mappings.Source sourceConf = new Mappings.Source();\r\n    sourceConf.getExcludes().add(\"key3\");\r\n    assertTrue(client.index().create(index, Mappings.builder().type(\"type\").properties(ImmutableMap.of(\"key1\", ImmutableMap.of(\"type\", \"keyword\"))).properties(ImmutableMap.of(\"key2\", ImmutableMap.of(\"type\", \"keyword\"), \"key3\", ImmutableMap.of(\"type\", \"keyword\"))).source(sourceConf).build(), null));\r\n    final String type = \"type\";\r\n    for (int i = 0; i < 10; i++) {\r\n        client.documents().index(IndexRequest.builder().index(index).type(type).id(\"id\" + i).doc(ImmutableMap.of(\"key1\", \"val\" + i, \"key2\", \"val\" + (i + 1), \"key3\", \"val\" + (i + 2))).build(), null);\r\n    }\r\n    await().atMost(Duration.ONE_MINUTE).untilAsserted(() -> {\r\n        SearchResponse response = client.search(Search.builder().query(Query.bool().must(Query.term(\"key1\", \"val1\"))).build());\r\n        assertEquals(1, response.getHits().getTotal());\r\n        assertEquals(\"val1\", response.getHits().iterator().next().getSource().get(\"key1\"));\r\n    });\r\n    //test indexOnly\r\n    await().atMost(Duration.ONE_MINUTE).untilAsserted(() -> {\r\n        SearchResponse response = client.search(Search.builder().query(Query.bool().must(Query.term(\"key3\", \"val3\"))).build());\r\n        assertEquals(1, response.getHits().getTotal());\r\n        assertEquals(\"val1\", response.getHits().iterator().next().getSource().get(\"key1\"));\r\n        assertNull(response.getHits().iterator().next().getSource().get(\"key3\"), \"indexOnly fields should not be stored\");\r\n    });\r\n    await().atMost(Duration.ONE_MINUTE).pollInterval(Duration.FIVE_SECONDS).untilAsserted(() -> {\r\n        SearchResponse response = client.search(Search.builder().query(Query.bool().must(Query.bool().should(Query.bool().must(Query.term(\"key1\", \"val1\")).must(Query.term(\"key2\", \"val2\")).build()).should(Query.bool().must(Query.term(\"key1\", \"val3\")).must(Query.term(\"key2\", \"val4\")).build()))).aggregation(Aggregation.terms(\"key1\").field(\"key1.keyword\").subAggregation(Aggregation.terms(\"key2\").field(\"key2.keyword\")).size(1000).build()).build());\r\n        assertEquals(2, response.getHits().getTotal());\r\n        assertEquals(1, response.getAggregations().size());\r\n        assertEquals(2, ((List<?>) ((Map<String, ?>) response.getAggregations().get(\"key1\")).get(\"buckets\")).size());\r\n        //test mGet\r\n        Map<String, List<String>> indexIdsGroup = new HashMap<>();\r\n        indexIdsGroup.put(\"test-index\", Arrays.asList(\"id1\", \"id2\"));\r\n        Optional<Documents> documents = client.documents().mget(type, indexIdsGroup);\r\n        Map<String, Map<String, Object>> result = new HashMap<>();\r\n        assertThat(documents).isPresent();\r\n        for (final Document document : documents.get()) {\r\n            result.put(document.getId(), document.getSource());\r\n        }\r\n        assertEquals(2, result.get(\"id1\").size());\r\n        assertEquals(2, result.get(\"id2\").size());\r\n    });\r\n    server.close();\r\n}",
  "annotations" : [ "ParameterizedTest" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\skywalking\\oap-server\\server-library\\library-elasticsearch-client\\src\\test\\java\\org\\apache\\skywalking\\library\\elasticsearch\\ElasticSearchIT.java",
  "methodName" : "testDocDeleteById",
  "sourceCode" : "@ParameterizedTest(name = \"version: {0}\")\r\n@MethodSource(\"es\")\r\npublic void testDocDeleteById(final String ignored, final ElasticsearchContainer server) {\r\n    server.start();\r\n    final ElasticSearch client = ElasticSearch.builder().endpoints(server.getHttpHostAddress()).build();\r\n    client.connect();\r\n    final String index = \"test-index-delete\";\r\n    assertTrue(client.index().create(index, null, null));\r\n    final ImmutableMap<String, Object> doc = ImmutableMap.of(\"key\", \"val\");\r\n    // UI management templates' IDs contains spaces\r\n    final String idWithSpace = \"an id\";\r\n    final String type = \"type\";\r\n    client.documents().index(IndexRequest.builder().index(index).type(type).id(idWithSpace).doc(doc).build(), null);\r\n    assertTrue(client.documents().exists(index, type, idWithSpace));\r\n    client.documents().deleteById(index, type, idWithSpace, ImmutableMap.of(\"refresh\", \"true\"));\r\n    assertFalse(client.documents().exists(index, type, idWithSpace));\r\n    server.close();\r\n}",
  "annotations" : [ "ParameterizedTest" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\skywalking\\oap-server\\server-library\\library-elasticsearch-client\\src\\test\\java\\org\\apache\\skywalking\\library\\elasticsearch\\requests\\search\\SearchBuilderTest.java",
  "methodName" : "searchQueryShouldBeUpdatableAfterSet",
  "sourceCode" : "@Test\r\npublic void searchQueryShouldBeUpdatableAfterSet() {\r\n    final BoolQueryBuilder queryBuilder = Query.bool();\r\n    final SearchBuilder searchBuilder = Search.builder().query(queryBuilder);\r\n    queryBuilder.must(Query.term(\"t\", \"v\"));\r\n    queryBuilder.should(Query.term(\"t\", \"v\"));\r\n    queryBuilder.mustNot(Query.term(\"t2\", \"v2\"));\r\n    queryBuilder.shouldNot(Query.term(\"t2\", \"v2\"));\r\n    queryBuilder.shouldNot(Query.term(\"t2\", \"v2\"));\r\n    final BoolQuery query = (BoolQuery) searchBuilder.build().getQuery();\r\n    assertThat(query.getMust()).hasSize(1);\r\n    assertThat(query.getShould()).hasSize(1);\r\n    assertThat(query.getMustNot()).hasSize(1);\r\n    assertThat(query.getShouldNot()).hasSize(2);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\skywalking\\oap-server\\server-library\\library-elasticsearch-client\\src\\test\\java\\org\\apache\\skywalking\\library\\elasticsearch\\requests\\search\\SearchBuilderTest.java",
  "methodName" : "searchQueryBuilderShouldNotBeSetMultipleTimes",
  "sourceCode" : "@Test\r\npublic void searchQueryBuilderShouldNotBeSetMultipleTimes() {\r\n    assertThrows(IllegalStateException.class, () -> {\r\n        final BoolQueryBuilder queryBuilder = Query.bool();\r\n        final SearchBuilder searchBuilder = Search.builder().query(queryBuilder);\r\n        searchBuilder.query(Query.bool());\r\n    });\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\skywalking\\oap-server\\server-library\\library-elasticsearch-client\\src\\test\\java\\org\\apache\\skywalking\\library\\elasticsearch\\requests\\search\\SearchBuilderTest.java",
  "methodName" : "searchQueryShouldNotBeSetMultipleTimes",
  "sourceCode" : "@Test\r\npublic void searchQueryShouldNotBeSetMultipleTimes() {\r\n    assertThrows(IllegalStateException.class, () -> {\r\n        final SearchBuilder searchBuilder = Search.builder().query(Query.bool().build());\r\n        searchBuilder.query(Query.bool().build());\r\n    });\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\skywalking\\oap-server\\server-library\\library-elasticsearch-client\\src\\test\\java\\org\\apache\\skywalking\\library\\elasticsearch\\requests\\search\\SearchBuilderTest.java",
  "methodName" : "searchQueryAndBuilderShouldNotBeSetSimultaneously",
  "sourceCode" : "@Test\r\npublic void searchQueryAndBuilderShouldNotBeSetSimultaneously() {\r\n    assertThrows(IllegalStateException.class, () -> {\r\n        final SearchBuilder searchBuilder = Search.builder().query(Query.bool().build());\r\n        searchBuilder.query(Query.bool());\r\n    });\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\skywalking\\oap-server\\server-library\\library-module\\src\\test\\java\\org\\apache\\skywalking\\oap\\server\\library\\module\\ApplicationConfigurationTest.java",
  "methodName" : "testBuildConfig",
  "sourceCode" : "@Test\r\npublic void testBuildConfig() {\r\n    ApplicationConfiguration configuration = new ApplicationConfiguration();\r\n    Properties p1 = new Properties();\r\n    p1.setProperty(\"p1\", \"value1\");\r\n    p1.setProperty(\"p2\", \"value2\");\r\n    Properties p2 = new Properties();\r\n    p2.setProperty(\"prop1\", \"value1-prop\");\r\n    p2.setProperty(\"prop2\", \"value2-prop\");\r\n    configuration.addModule(\"MO-1\").addProviderConfiguration(\"MO-1-P1\", p1).addProviderConfiguration(\"MO-1-P2\", p2);\r\n    assertArrayEquals(new String[] { \"MO-1\" }, configuration.moduleList());\r\n    assertEquals(\"value2-prop\", configuration.getModuleConfiguration(\"MO-1\").getProviderConfiguration(\"MO-1-P2\").getProperty(\"prop2\"));\r\n    assertEquals(p1, configuration.getModuleConfiguration(\"MO-1\").getProviderConfiguration(\"MO-1-P1\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\skywalking\\oap-server\\server-library\\library-module\\src\\test\\java\\org\\apache\\skywalking\\oap\\server\\library\\module\\ModuleManagerTest.java",
  "methodName" : "testInit",
  "sourceCode" : "@Test\r\npublic void testInit() throws ServiceNotProvidedException, ModuleNotFoundException, ProviderNotFoundException, DuplicateProviderException, ModuleConfigException, ModuleStartException {\r\n    ApplicationConfiguration configuration = new ApplicationConfiguration();\r\n    configuration.addModule(\"Test\").addProviderConfiguration(\"TestModule-Provider\", new Properties());\r\n    configuration.addModule(\"BaseA\").addProviderConfiguration(\"P-A\", new Properties());\r\n    configuration.addModule(\"BaseB\").addProviderConfiguration(\"P-B\", new Properties());\r\n    ModuleManager manager = new ModuleManager(\"Test\");\r\n    manager.init(configuration);\r\n    BaseModuleA.ServiceABusiness1 serviceABusiness1 = manager.find(\"BaseA\").provider().getService(BaseModuleA.ServiceABusiness1.class);\r\n    Assertions.assertTrue(serviceABusiness1 != null);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\skywalking\\oap-server\\server-library\\library-module\\src\\test\\java\\org\\apache\\skywalking\\oap\\server\\library\\module\\ModuleManagerTest.java",
  "methodName" : "testModuleConfigInit",
  "sourceCode" : "@Test\r\npublic void testModuleConfigInit() throws ModuleConfigException, ModuleNotFoundException, ModuleStartException {\r\n    ApplicationConfiguration configuration = new ApplicationConfiguration();\r\n    final Properties settings = new Properties();\r\n    settings.put(\"attr1\", \"abc\");\r\n    settings.put(\"attr2\", 123);\r\n    settings.put(\"attr3\", 123L);\r\n    settings.put(\"attr4\", true);\r\n    configuration.addModule(\"BaseA\").addProviderConfiguration(\"P-A\", settings);\r\n    ModuleManager manager = new ModuleManager(\"Test\");\r\n    manager.init(configuration);\r\n    final ModuleServiceHolder provider = manager.find(\"BaseA\").provider();\r\n    Assertions.assertTrue(provider instanceof ModuleAProvider);\r\n    final ModuleAProvider moduleAProvider = (ModuleAProvider) provider;\r\n    final ModuleAProviderConfig config = moduleAProvider.getConfig();\r\n    Assertions.assertEquals(\"abc\", config.getAttr1());\r\n    Assertions.assertEquals(123, config.getAttr2().intValue());\r\n    Assertions.assertEquals(123L, config.getAttr3().longValue());\r\n    Assertions.assertEquals(true, config.isAttr4());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\skywalking\\oap-server\\server-library\\library-module\\src\\test\\java\\org\\apache\\skywalking\\oap\\server\\library\\module\\ModuleManagerTest.java",
  "methodName" : "testModuleMissing",
  "sourceCode" : "@Test\r\npublic void testModuleMissing() {\r\n    assertThrows(ModuleNotFoundException.class, () -> {\r\n        ApplicationConfiguration configuration = new ApplicationConfiguration();\r\n        configuration.addModule(\"BaseA\").addProviderConfiguration(\"P-A\", new Properties());\r\n        configuration.addModule(\"BaseB\").addProviderConfiguration(\"P-B2\", new Properties());\r\n        ModuleManager manager = new ModuleManager(\"Test\");\r\n        manager.init(configuration);\r\n    });\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\skywalking\\oap-server\\server-library\\library-module\\src\\test\\java\\org\\apache\\skywalking\\oap\\server\\library\\module\\ModuleManagerTest.java",
  "methodName" : "testCycleDependency",
  "sourceCode" : "@Test\r\npublic void testCycleDependency() {\r\n    assertThrows(CycleDependencyException.class, () -> {\r\n        ApplicationConfiguration configuration = new ApplicationConfiguration();\r\n        configuration.addModule(\"BaseA\").addProviderConfiguration(\"P-A2\", new Properties());\r\n        configuration.addModule(\"BaseB\").addProviderConfiguration(\"P-B3\", new Properties());\r\n        ModuleManager manager = new ModuleManager(\"Test\");\r\n        manager.init(configuration);\r\n    });\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\skywalking\\oap-server\\server-library\\library-util\\src\\test\\java\\org\\apache\\skywalking\\oap\\server\\library\\util\\BooleanUtilsTest.java",
  "methodName" : "testValueToBoolean",
  "sourceCode" : "@Test\r\npublic void testValueToBoolean() {\r\n    assertEquals(1, BooleanUtils.booleanToValue(true));\r\n    assertEquals(0, BooleanUtils.booleanToValue(false));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\skywalking\\oap-server\\server-library\\library-util\\src\\test\\java\\org\\apache\\skywalking\\oap\\server\\library\\util\\BooleanUtilsTest.java",
  "methodName" : "testBooleanToValue",
  "sourceCode" : "@Test\r\npublic void testBooleanToValue() {\r\n    assertTrue(BooleanUtils.valueToBoolean(1));\r\n    assertFalse(BooleanUtils.valueToBoolean(0));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\skywalking\\oap-server\\server-library\\library-util\\src\\test\\java\\org\\apache\\skywalking\\oap\\server\\library\\util\\BooleanUtilsTest.java",
  "methodName" : "shouldThrowIfValueIsNotZeroOrOne",
  "sourceCode" : "@Test\r\npublic void shouldThrowIfValueIsNotZeroOrOne() {\r\n    assertThrows(RuntimeException.class, () -> BooleanUtils.valueToBoolean(123));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\skywalking\\oap-server\\server-library\\library-util\\src\\test\\java\\org\\apache\\skywalking\\oap\\server\\library\\util\\CollectionUtilsTest.java",
  "methodName" : "test",
  "sourceCode" : "@Test\r\npublic void test() {\r\n    assertTrue(CollectionUtils.isEmpty((Map) null));\r\n    assertTrue(CollectionUtils.isEmpty(Collections.emptyMap()));\r\n    assertFalse(CollectionUtils.isEmpty(ImmutableMap.of(1, 2)));\r\n    assertFalse(CollectionUtils.isNotEmpty((Map) null));\r\n    assertFalse(CollectionUtils.isNotEmpty(Collections.emptyMap()));\r\n    assertTrue(CollectionUtils.isNotEmpty(ImmutableMap.of(1, 2)));\r\n    assertTrue(CollectionUtils.isEmpty((List) null));\r\n    assertTrue(CollectionUtils.isEmpty(Collections.emptyList()));\r\n    assertFalse(CollectionUtils.isEmpty(Arrays.asList(1, 2)));\r\n    assertFalse(CollectionUtils.isNotEmpty((List) null));\r\n    assertFalse(CollectionUtils.isNotEmpty(Collections.emptyList()));\r\n    assertTrue(CollectionUtils.isNotEmpty(Arrays.asList(1, 2)));\r\n    assertTrue(CollectionUtils.isEmpty((Set) null));\r\n    assertTrue(CollectionUtils.isEmpty(Collections.emptySet()));\r\n    assertFalse(CollectionUtils.isEmpty(new HashSet<>(Arrays.asList(1, 2))));\r\n    assertFalse(CollectionUtils.isNotEmpty((List) null));\r\n    assertFalse(CollectionUtils.isNotEmpty(Collections.emptySet()));\r\n    assertTrue(CollectionUtils.isNotEmpty(new HashSet<>(Arrays.asList(1, 2))));\r\n    assertFalse(CollectionUtils.isNotEmpty((Object[]) null));\r\n    assertTrue(CollectionUtils.isEmpty(new byte[0]));\r\n    assertTrue(CollectionUtils.isEmpty((byte[]) null));\r\n    assertTrue(CollectionUtils.isNotEmpty(new byte[1]));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\skywalking\\oap-server\\server-library\\library-util\\src\\test\\java\\org\\apache\\skywalking\\oap\\server\\library\\util\\ConnectUtilTestCase.java",
  "methodName" : "parse",
  "sourceCode" : "@Test\r\npublic void parse() throws ConnectStringParseException {\r\n    List<Address> list = ConnectUtils.parse(\"10.0.0.1:1000,10.0.0.2:1001\");\r\n    assertEquals(2, list.size());\r\n    assertEquals(\"10.0.0.1\", list.get(0).getHost());\r\n    assertEquals(1000, list.get(0).getPort());\r\n    assertEquals(\"10.0.0.2\", list.get(1).getHost());\r\n    assertEquals(1001, list.get(1).getPort());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\skywalking\\oap-server\\server-library\\library-util\\src\\test\\java\\org\\apache\\skywalking\\oap\\server\\library\\util\\ConnectUtilTestCase.java",
  "methodName" : "comma",
  "sourceCode" : "@Test\r\npublic void comma() throws ConnectStringParseException {\r\n    List<Address> list = ConnectUtils.parse(\"10.0.0.1:1000,\");\r\n    assertEquals(1, list.size());\r\n    assertEquals(\"10.0.0.1\", list.get(0).getHost());\r\n    assertEquals(1000, list.get(0).getPort());\r\n    list = ConnectUtils.parse(\",10.0.0.1:1000\");\r\n    assertEquals(1, list.size());\r\n    assertEquals(\"10.0.0.1\", list.get(0).getHost());\r\n    assertEquals(1000, list.get(0).getPort());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\skywalking\\oap-server\\server-library\\library-util\\src\\test\\java\\org\\apache\\skywalking\\oap\\server\\library\\util\\ConnectUtilTestCase.java",
  "methodName" : "nullTest",
  "sourceCode" : "@Test\r\npublic void nullTest() {\r\n    assertThrows(ConnectStringParseException.class, () -> ConnectUtils.parse(null));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\skywalking\\oap-server\\server-library\\library-util\\src\\test\\java\\org\\apache\\skywalking\\oap\\server\\library\\util\\ConnectUtilTestCase.java",
  "methodName" : "emptyTest",
  "sourceCode" : "@Test\r\npublic void emptyTest() {\r\n    assertThrows(ConnectStringParseException.class, () -> ConnectUtils.parse(\"\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\skywalking\\oap-server\\server-library\\library-util\\src\\test\\java\\org\\apache\\skywalking\\oap\\server\\library\\util\\ConnectUtilTestCase.java",
  "methodName" : "shouldThrowIfOnlyComma",
  "sourceCode" : "@Test\r\npublic void shouldThrowIfOnlyComma() {\r\n    assertThrows(ConnectStringParseException.class, () -> ConnectUtils.parse(\",,\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\skywalking\\oap-server\\server-library\\library-util\\src\\test\\java\\org\\apache\\skywalking\\oap\\server\\library\\util\\ConnectUtilTestCase.java",
  "methodName" : "shouldThrowIfHostWithoutPort",
  "sourceCode" : "@Test\r\npublic void shouldThrowIfHostWithoutPort() {\r\n    assertThrows(ConnectStringParseException.class, () -> ConnectUtils.parse(\"localhost\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\skywalking\\oap-server\\server-library\\library-util\\src\\test\\java\\org\\apache\\skywalking\\oap\\server\\library\\util\\ConnectUtilTestCase.java",
  "methodName" : "shouldThrowIfPortIsNotNumber",
  "sourceCode" : "@Test\r\npublic void shouldThrowIfPortIsNotNumber() {\r\n    assertThrows(ConnectStringParseException.class, () -> ConnectUtils.parse(\"localhost:what\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\skywalking\\oap-server\\server-library\\library-util\\src\\test\\java\\org\\apache\\skywalking\\oap\\server\\library\\util\\ConnectUtilTestCase.java",
  "methodName" : "invalidPattern1",
  "sourceCode" : "@Test\r\npublic void invalidPattern1() {\r\n    assertThrows(ConnectStringParseException.class, () -> ConnectUtils.parse(\"10.0.0.1:\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\skywalking\\oap-server\\server-library\\library-util\\src\\test\\java\\org\\apache\\skywalking\\oap\\server\\library\\util\\ConnectUtilTestCase.java",
  "methodName" : "invalidPattern2",
  "sourceCode" : "@Test\r\npublic void invalidPattern2() {\r\n    assertThrows(ConnectStringParseException.class, () -> ConnectUtils.parse(\"10.0.0.1:xx\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\skywalking\\oap-server\\server-library\\library-util\\src\\test\\java\\org\\apache\\skywalking\\oap\\server\\library\\util\\FieldsHelperTest.java",
  "methodName" : "testFormat",
  "sourceCode" : "@ParameterizedTest(name = \"{0}\")\r\n@MethodSource(\"data\")\r\npublic void testFormat(String mapping, String expectedServiceName, String expectedServiceInstanceName) throws Exception {\r\n    final Struct.Builder builder = Struct.newBuilder();\r\n    final Struct.Builder labelBuilder = Struct.newBuilder();\r\n    labelBuilder.putFields(\"service.istio.io/canonical-name\", Value.newBuilder().setStringValue(\"productpage\").build());\r\n    labelBuilder.putFields(\"version\", Value.newBuilder().setStringValue(\"v1\").build());\r\n    labelBuilder.putFields(\"security.istio.io/tlsMode\", Value.newBuilder().setStringValue(\"istio\").build());\r\n    labelBuilder.putFields(\"app\", Value.newBuilder().setStringValue(\"whatever-differ-from-productpage\").build());\r\n    labelBuilder.putFields(\"service.istio.io/canonical-revision\", Value.newBuilder().setStringValue(\"v1\").build());\r\n    labelBuilder.putFields(\"pod-template-hash\", Value.newBuilder().setStringValue(\"65576bb7bf\").build());\r\n    labelBuilder.putFields(\"istio.io/rev\", Value.newBuilder().setStringValue(\"default\").build());\r\n    builder.putFields(\"LABELS\", Value.newBuilder().setStructValue(labelBuilder.build()).build());\r\n    builder.putFields(\"CLUSTER_ID\", Value.newBuilder().setStringValue(\"Kubernetes\").build());\r\n    final ServiceInfo info = new ServiceInfo();\r\n    FieldsHelper.forClass(ServiceInfo.class).init(new ByteArrayInputStream(mapping.getBytes()));\r\n    FieldsHelper.forClass(ServiceInfo.class).inflate(builder.build(), info);\r\n    assertThat(info.getServiceName()).isEqualTo(expectedServiceName);\r\n}",
  "annotations" : [ "ParameterizedTest" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\skywalking\\oap-server\\server-library\\library-util\\src\\test\\java\\org\\apache\\skywalking\\oap\\server\\library\\util\\MultipleFilesChangeMonitorTest.java",
  "methodName" : "test",
  "sourceCode" : "@Test\r\npublic void test() throws InterruptedException, IOException {\r\n    StringBuilder content = new StringBuilder();\r\n    MultipleFilesChangeMonitor monitor = new MultipleFilesChangeMonitor(1, readableContents -> {\r\n        assertEquals(2, readableContents.size());\r\n        assertNull(readableContents.get(1));\r\n        content.delete(0, content.length());\r\n        content.append(new String(readableContents.get(0), 0, readableContents.get(0).length, StandardCharsets.UTF_8));\r\n    }, FILE_NAME, \"XXXX_NOT_EXIST.SW\");\r\n    monitor.start();\r\n    File file = new File(FILE_NAME);\r\n    BufferedOutputStream bos = new BufferedOutputStream(Files.newOutputStream(file.toPath()));\r\n    bos.write(\"test context\".getBytes(StandardCharsets.UTF_8));\r\n    bos.flush();\r\n    bos.close();\r\n    int countDown = 40;\r\n    boolean notified = false;\r\n    boolean notified2 = false;\r\n    while (countDown-- > 0) {\r\n        if (\"test context\".equals(content.toString())) {\r\n            file = new File(FILE_NAME);\r\n            bos = new BufferedOutputStream(Files.newOutputStream(file.toPath()));\r\n            bos.write(\"test context again\".getBytes(StandardCharsets.UTF_8));\r\n            bos.flush();\r\n            bos.close();\r\n            notified = true;\r\n        } else if (\"test context again\".equals(content.toString())) {\r\n            notified2 = true;\r\n            break;\r\n        }\r\n        Thread.sleep(500);\r\n    }\r\n    Assertions.assertTrue(notified);\r\n    Assertions.assertTrue(notified2);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\skywalking\\oap-server\\server-library\\library-util\\src\\test\\java\\org\\apache\\skywalking\\oap\\server\\library\\util\\prometheus\\parser\\TextParserTest.java",
  "methodName" : "parseTextSuccessfully",
  "sourceCode" : "@Test\r\npublic void parseTextSuccessfully() throws IOException {\r\n    try (InputStream is = ResourceUtils.readToStream(\"testdata/prometheus.txt\")) {\r\n        TextParser parser = new TextParser(is);\r\n        MetricFamily mf;\r\n        int mfNum = 0;\r\n        while ((mf = parser.parse(now)) != null) {\r\n            mfNum++;\r\n            MetricFamily expected = expectedMfs.poll();\r\n            assertNotNull(expected);\r\n            assertThat(mf).isEqualTo(expected);\r\n        }\r\n        assertThat(mfNum).isEqualTo(3);\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\skywalking\\oap-server\\server-library\\library-util\\src\\test\\java\\org\\apache\\skywalking\\oap\\server\\library\\util\\PropertyPlaceholderHelperTest.java",
  "methodName" : "testDataType",
  "sourceCode" : "@Test\r\npublic void testDataType() {\r\n    //tests that do not use ${name} to set config.\r\n    assertEquals(\"grpc.skywalking.apache.org\", yaml.load(placeholderHelper.replacePlaceholders(properties.getProperty(\"gRPCHost\"), properties)));\r\n    //tests that use ${REST_HOST:0.0.0.0} but not set REST_HOST in environmentVariables.\r\n    assertEquals(\"0.0.0.0\", yaml.load(placeholderHelper.replacePlaceholders(properties.getProperty(\"restHost\"), properties)));\r\n    //tests that use ${REST_PORT:12800} and set REST_PORT in environmentVariables.\r\n    assertEquals((Integer) 12801, yaml.load(placeholderHelper.replacePlaceholders(properties.getProperty(\"restPort\"), properties)));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\skywalking\\oap-server\\server-library\\library-util\\src\\test\\java\\org\\apache\\skywalking\\oap\\server\\library\\util\\PropertyPlaceholderHelperTest.java",
  "methodName" : "testReplacePlaceholders",
  "sourceCode" : "@Test\r\npublic void testReplacePlaceholders() {\r\n    PropertyPlaceholderHelper propertyPlaceholderHelper = PropertyPlaceholderHelper.INSTANCE;\r\n    Properties properties = new Properties();\r\n    String resultString = propertyPlaceholderHelper.replacePlaceholders(\"&${[}7\", properties);\r\n    assertEquals(0, properties.size());\r\n    Assertions.assertTrue(properties.isEmpty());\r\n    assertNotNull(resultString);\r\n    assertEquals(\"&${[}7\", resultString);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\skywalking\\oap-server\\server-library\\library-util\\src\\test\\java\\org\\apache\\skywalking\\oap\\server\\library\\util\\ResourceUtilsTest.java",
  "methodName" : "shouldThrowWhenResourceNotFound",
  "sourceCode" : "@Test\r\npublic void shouldThrowWhenResourceNotFound() {\r\n    assertThrows(FileNotFoundException.class, () -> ResourceUtils.read(\"/not-existed\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\skywalking\\oap-server\\server-library\\library-util\\src\\test\\java\\org\\apache\\skywalking\\oap\\server\\library\\util\\ResourceUtilsTest.java",
  "methodName" : "testGetPathFilesSuccess",
  "sourceCode" : "@Test\r\npublic void testGetPathFilesSuccess() throws FileNotFoundException {\r\n    final File[] files = ResourceUtils.getPathFiles(\"testdata\");\r\n    assertNotNull(files);\r\n    assertEquals(1, files.length);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\skywalking\\oap-server\\server-library\\library-util\\src\\test\\java\\org\\apache\\skywalking\\oap\\server\\library\\util\\ResourceUtilsTest.java",
  "methodName" : "testGetPathFilesNotFound",
  "sourceCode" : "@Test\r\npublic void testGetPathFilesNotFound() {\r\n    assertThrows(FileNotFoundException.class, () -> ResourceUtils.getPathFiles(\"doesn't exist\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\skywalking\\oap-server\\server-library\\library-util\\src\\test\\java\\org\\apache\\skywalking\\oap\\server\\library\\util\\RunnableWithExceptionProtectionTest.java",
  "methodName" : "testProtection",
  "sourceCode" : "@Test\r\npublic void testProtection() {\r\n    Runnable worker = () -> {\r\n        throw new IllegalArgumentException(\" unit test exception\");\r\n    };\r\n    RunnableWithExceptionProtection runnableWithExceptionProtection = new RunnableWithExceptionProtection(worker, t -> assertNotNull(t.getMessage()));\r\n    new Thread(runnableWithExceptionProtection).start();\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\skywalking\\oap-server\\server-library\\library-util\\src\\test\\java\\org\\apache\\skywalking\\oap\\server\\library\\util\\StringUtilTest.java",
  "methodName" : "testIsEmpty",
  "sourceCode" : "@Test\r\npublic void testIsEmpty() {\r\n    assertTrue(StringUtil.isEmpty(null));\r\n    assertTrue(StringUtil.isEmpty(\"\"));\r\n    assertFalse(StringUtil.isEmpty(\"   \"));\r\n    assertFalse(StringUtil.isEmpty(\"A String\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\skywalking\\oap-server\\server-library\\library-util\\src\\test\\java\\org\\apache\\skywalking\\oap\\server\\library\\util\\StringUtilTest.java",
  "methodName" : "testIsBlank",
  "sourceCode" : "@Test\r\npublic void testIsBlank() {\r\n    assertTrue(StringUtil.isBlank(null));\r\n    assertTrue(StringUtil.isBlank(\"\"));\r\n    assertTrue(StringUtil.isBlank(\"   \"));\r\n    assertFalse(StringUtil.isBlank(\"A String\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\skywalking\\oap-server\\server-library\\library-util\\src\\test\\java\\org\\apache\\skywalking\\oap\\server\\library\\util\\StringUtilTest.java",
  "methodName" : "testJoin",
  "sourceCode" : "@Test\r\npublic void testJoin() {\r\n    assertNull(StringUtil.join('.'));\r\n    assertEquals(\"Single part.\", StringUtil.join('.', \"Single part.\"));\r\n    assertEquals(\"part1.part2.p3\", StringUtil.join('.', \"part1\", \"part2\", \"p3\"));\r\n    assertEquals(\"E\", StringUtil.join('E', new String[2]));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\skywalking\\oap-server\\server-library\\library-util\\src\\test\\java\\org\\apache\\skywalking\\oap\\server\\library\\util\\StringUtilTest.java",
  "methodName" : "testSubstringMatchReturningTrue",
  "sourceCode" : "@Test\r\npublic void testSubstringMatchReturningTrue() {\r\n    StringBuffer stringBuffer = new StringBuffer(\"ZP~>xz1;\");\r\n    assertTrue(StringUtil.substringMatch(stringBuffer, 0, stringBuffer));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\skywalking\\oap-server\\server-library\\library-util\\src\\test\\java\\org\\apache\\skywalking\\oap\\server\\library\\util\\StringUtilTest.java",
  "methodName" : "testSubstringMatchWithPositive",
  "sourceCode" : "@Test\r\npublic void testSubstringMatchWithPositive() {\r\n    assertFalse(StringUtil.substringMatch(\"\", 4770, \"\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\skywalking\\oap-server\\server-library\\library-util\\src\\test\\java\\org\\apache\\skywalking\\oap\\server\\library\\util\\StringUtilTest.java",
  "methodName" : "testCut",
  "sourceCode" : "@Test\r\npublic void testCut() {\r\n    String str = \"aaaaaaabswbswbbsbwbsbbwbsbwbsbwbbsbbebewewewewewewewewewewew\";\r\n    String shortStr = \"ab\";\r\n    assertEquals(10, StringUtil.cut(str, 10).length());\r\n    assertEquals(2, StringUtil.cut(shortStr, 10).length());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\skywalking\\oap-server\\server-library\\library-util\\src\\test\\java\\org\\apache\\skywalking\\oap\\server\\library\\util\\StringUtilTest.java",
  "methodName" : "testTrim",
  "sourceCode" : "@Test\r\npublic void testTrim() {\r\n    assertEquals(StringUtil.trim(\"aaabcdefaaa\", 'a'), \"bcdef\");\r\n    assertEquals(StringUtil.trim(\"bcdef\", 'a'), \"bcdef\");\r\n    assertEquals(StringUtil.trim(\"abcdef\", 'a'), \"bcdef\");\r\n    assertEquals(StringUtil.trim(\"abcdef\", 'f'), \"abcde\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\skywalking\\oap-server\\server-query-plugin\\logql-plugin\\src\\test\\java\\org\\apache\\skywalking\\oap\\query\\logql\\LogQLExprVisitorTest.java",
  "methodName" : "testStreamSelector",
  "sourceCode" : "@Test\r\npublic void testStreamSelector() {\r\n    String expression = \"{service=\\\"test-service\\\", service_instance=\\\"test-instance\\\", endpoint=\\\"*\\\", trace_id=\\\" \\\"}\";\r\n    LogQLParseResult parseResult = parseLogQL(expression);\r\n    Assertions.assertEquals(\"test-service\", parseResult.getLabelMap().get(LabelName.SERVICE.getLabel()));\r\n    Assertions.assertEquals(\"test-instance\", parseResult.getLabelMap().get(LabelName.SERVICE_INSTANCE.getLabel()));\r\n    Assertions.assertNull(parseResult.getLabelMap().get(LabelName.ENDPOINT.getLabel()));\r\n    Assertions.assertNull(parseResult.getLabelMap().get(LabelName.TRACE_ID.getLabel()));\r\n    Assertions.assertEquals(parseResult.getKeywordsOfContent().size(), 0);\r\n    Assertions.assertEquals(parseResult.getExcludingKeywordsOfContent().size(), 0);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\skywalking\\oap-server\\server-query-plugin\\logql-plugin\\src\\test\\java\\org\\apache\\skywalking\\oap\\query\\logql\\LogQLExprVisitorTest.java",
  "methodName" : "testStreamSelectorWithLabelFilter",
  "sourceCode" : "@Test\r\npublic void testStreamSelectorWithLabelFilter() {\r\n    String expression = \"{service=\\\"test-service\\\"} |=`contains` !=`not_contains`\";\r\n    LogQLParseResult parseResult = parseLogQL(expression);\r\n    Assertions.assertEquals(\"test-service\", parseResult.getLabelMap().get(LabelName.SERVICE.getLabel()));\r\n    Assertions.assertEquals(parseResult.getKeywordsOfContent().get(0), \"contains\");\r\n    Assertions.assertEquals(parseResult.getExcludingKeywordsOfContent().get(0), \"not_contains\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\skywalking\\oap-server\\server-query-plugin\\logql-plugin\\src\\test\\java\\org\\apache\\skywalking\\oap\\query\\logql\\LogQLExprVisitorTest.java",
  "methodName" : "testStreamSelectorWithLabelFilterInMultipleLines",
  "sourceCode" : "@Test\r\npublic void testStreamSelectorWithLabelFilterInMultipleLines() {\r\n    String expression = \"{service=\\\"test-service\\\"} \\n\" + \"|=`contains` !=`not_contains`\";\r\n    LogQLParseResult parseResult = parseLogQL(expression);\r\n    Assertions.assertEquals(\"test-service\", parseResult.getLabelMap().get(LabelName.SERVICE.getLabel()));\r\n    Assertions.assertEquals(parseResult.getKeywordsOfContent().get(0), \"contains\");\r\n    Assertions.assertEquals(parseResult.getExcludingKeywordsOfContent().get(0), \"not_contains\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\skywalking\\oap-server\\server-query-plugin\\logql-plugin\\src\\test\\java\\org\\apache\\skywalking\\oap\\query\\logql\\LogQLExprVisitorTest.java",
  "methodName" : "testIllegalExpression",
  "sourceCode" : "@Test\r\npublic void testIllegalExpression() {\r\n    String expression1 = \"prefix{service=\\\"test-service\\\"}\";\r\n    Assertions.assertThrowsExactly(ParseCancellationException.class, () -> parseLogQL(expression1));\r\n    String expression2 = \"{service=\\\"test-service\\\"}postfix\";\r\n    Assertions.assertThrowsExactly(ParseCancellationException.class, () -> parseLogQL(expression2));\r\n    String expression3 = \"{service=\\\"test-service\\\"} bad-op `test`\";\r\n    Assertions.assertThrowsExactly(ParseCancellationException.class, () -> parseLogQL(expression3));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\skywalking\\oap-server\\server-query-plugin\\promql-plugin\\src\\test\\java\\org\\apache\\skywalking\\promql\\rt\\parser\\PromQLExprQueryVisitorTest.java",
  "methodName" : "test",
  "sourceCode" : "@ParameterizedTest(name = \"{0}\")\r\n@MethodSource(\"data\")\r\npublic void test(String name, PromQLApiHandler.QueryType queryType, String expression, ParseResultType wantType, Object wantResultValues) {\r\n    PromQLLexer lexer = new PromQLLexer(CharStreams.fromString(expression));\r\n    CommonTokenStream tokens = new CommonTokenStream(lexer);\r\n    PromQLParser parser = new PromQLParser(tokens);\r\n    ParseTree tree = parser.expression();\r\n    PromQLExprQueryVisitor visitor = new PromQLExprQueryVisitor(metricsQueryService, recordQueryService, aggregationQueryService, duration, queryType);\r\n    ParseResult parseResult = visitor.visit(tree);\r\n    Assertions.assertEquals(wantType, parseResult.getResultType());\r\n    switch(parseResult.getResultType()) {\r\n        case SCALAR:\r\n            ScalarResult scalarResult = (ScalarResult) parseResult;\r\n            Assertions.assertEquals(Double.parseDouble(String.valueOf(wantResultValues)), scalarResult.getValue());\r\n            break;\r\n        case METRICS_RANGE:\r\n            MetricsRangeResult metricsRangeResult = (MetricsRangeResult) parseResult;\r\n            Assertions.assertEquals(metricsRangeResult.getMetricDataList().get(0).getValues(), wantResultValues);\r\n            break;\r\n        default:\r\n            Assertions.fail();\r\n    }\r\n}",
  "annotations" : [ "ParameterizedTest" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\skywalking\\oap-server\\server-query-plugin\\promql-plugin\\src\\test\\java\\org\\apache\\skywalking\\promql\\rt\\parser\\PromQLExprQueryVisitorTest.java",
  "methodName" : "testAggregate",
  "sourceCode" : "@ParameterizedTest(name = \"{0}\")\r\n@MethodSource(\"aggregateData\")\r\npublic void testAggregate(String name, PromQLApiHandler.QueryType queryType, String expression, List<Object> wantResultValues, List<Object> wantResultLabels) {\r\n    PromQLLexer lexer = new PromQLLexer(CharStreams.fromString(expression));\r\n    CommonTokenStream tokens = new CommonTokenStream(lexer);\r\n    PromQLParser parser = new PromQLParser(tokens);\r\n    ParseTree tree = parser.expression();\r\n    PromQLExprQueryVisitor visitor = new PromQLExprQueryVisitor(metricsQueryService, recordQueryService, aggregationQueryService, duration, queryType);\r\n    ParseResult parseResult = visitor.visit(tree);\r\n    Assertions.assertEquals(ParseResultType.METRICS_RANGE, parseResult.getResultType());\r\n    MetricsRangeResult result = (MetricsRangeResult) parseResult;\r\n    Assertions.assertEquals(result.getMetricDataList().size(), wantResultValues.size());\r\n    for (int i = 0; i < result.getMetricDataList().size(); i++) {\r\n        Assertions.assertEquals(result.getMetricDataList().get(i).getValues(), wantResultValues.get(i));\r\n        Assertions.assertEquals(result.getMetricDataList().get(i).getMetric().getLabels(), wantResultLabels.get(i));\r\n    }\r\n}",
  "annotations" : [ "ParameterizedTest" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\skywalking\\oap-server\\server-query-plugin\\promql-plugin\\src\\test\\java\\org\\apache\\skywalking\\promql\\rt\\parser\\PromQLMatchVisitorTest.java",
  "methodName" : "testMatchVisitor",
  "sourceCode" : "@ParameterizedTest\r\n@MethodSource(\"data\")\r\npublic void testMatchVisitor(String expression, ParseResultType wantType, String metricName, int labelsSize) {\r\n    PromQLLexer lexer = new PromQLLexer(CharStreams.fromString(expression));\r\n    CommonTokenStream tokens = new CommonTokenStream(lexer);\r\n    PromQLParser parser = new PromQLParser(tokens);\r\n    ParseTree tree = parser.expression();\r\n    PromQLMatchVisitor visitor = new PromQLMatchVisitor();\r\n    MatcherSetResult parseResult = visitor.visit(tree);\r\n    Assertions.assertEquals(wantType, parseResult.getResultType());\r\n    Assertions.assertEquals(metricName, parseResult.getMetricName());\r\n    Assertions.assertEquals(labelsSize, parseResult.getLabelMap().size());\r\n}",
  "annotations" : [ "ParameterizedTest" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\skywalking\\oap-server\\server-query-plugin\\query-graphql-plugin\\src\\test\\java\\org\\apache\\skywalking\\oap\\query\\graphql\\resolver\\LogTestQueryTest.java",
  "methodName" : "shouldThrowWhenDisabled",
  "sourceCode" : "@Test\r\npublic void shouldThrowWhenDisabled() {\r\n    final LogTestQuery query = new LogTestQuery(moduleManager, config);\r\n    try {\r\n        query.test(new LogTestRequest());\r\n        fail();\r\n    } catch (Exception e) {\r\n        assertTrue(e instanceof IllegalAccessException);\r\n        assertTrue(e.getMessage().contains(\"LAL debug tool is not enabled\"));\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\skywalking\\oap-server\\server-query-plugin\\query-graphql-plugin\\src\\test\\java\\org\\apache\\skywalking\\oap\\query\\graphql\\resolver\\LogTestQueryTest.java",
  "methodName" : "test",
  "sourceCode" : "@Test\r\npublic void test() throws Exception {\r\n    when(config.isEnableLogTestTool()).thenReturn(true);\r\n    final LogTestQuery query = new LogTestQuery(moduleManager, config);\r\n    final LogTestRequest request = new LogTestRequest();\r\n    request.setLog(\"\" + \"{\" + \"  body: {\" + \"    text: {\" + \"      text: 'Save user test'\" + \"    }\" + \"  },\" + \"  type: TEXT,\" + \"  timestamp: 12312313,\" + \"  service: 'test'\" + \"}\");\r\n    request.setDsl(\"\" + \"filter {\\n\" + \"  extractor {\\n\" + \"    metrics {\\n\" + \"      timestamp log.timestamp as Long\\n\" + \"      labels level: parsed.level, service: log.service, instance: log.serviceInstance\\n\" + \"      name 'log_count'\\n\" + \"      value 1\\n\" + \"    }\\n\" + \"  }\\n\" + \"  sink {\\n\" + \"  }\\n\" + \"}\");\r\n    final LogTestResponse response = query.test(request);\r\n    assertEquals(\"Save user test\", response.getLog().getContent());\r\n    assertFalse(response.getMetrics().isEmpty());\r\n    assertEquals(\"log_count\", response.getMetrics().iterator().next().getName());\r\n    assertEquals(1, response.getMetrics().iterator().next().getValue());\r\n    assertEquals(12312313, response.getMetrics().iterator().next().getTimestamp());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\skywalking\\oap-server\\server-query-plugin\\query-graphql-plugin\\src\\test\\java\\org\\apache\\skywalking\\oap\\query\\graphql\\resolver\\LogTestQueryTest.java",
  "methodName" : "testExtractPatternedTimestamp",
  "sourceCode" : "@Test\r\npublic void testExtractPatternedTimestamp() throws Exception {\r\n    when(config.isEnableLogTestTool()).thenReturn(true);\r\n    final LogTestQuery query = new LogTestQuery(moduleManager, config);\r\n    final LogTestRequest request = new LogTestRequest();\r\n    request.setLog(\"\" + \"{\" + \"  body: {\" + \"    json: {\" + \"      json: '{\\\"request\\\": \\\"GET /l HTTP/1.1\\\",\\\"time\\\": \\\"2023-11-02T12:39:36+00:00\\\",\\\"status\\\": \\\"404\\\",\\\"request_time\\\":\\\"0.000\\\"}'\" + \"    }\" + \"  },\" + \"  type: JSON,\" + \"  timestamp: 12312313,\" + \"  service: 'test'\" + \"}\");\r\n    request.setDsl(\"\" + \"filter {\\n\" + \"  json {\" + \"  }\\n\" + \"  extractor {\\n\" + \"    timestamp parsed.time as String, \\\"yyyy-MM-dd'T'HH:mm:ssXXX\\\"\\n\" + \"  }\\n\" + \"  sink {\\n\" + \"  }\\n\" + \"}\");\r\n    final LogTestResponse response = query.test(request);\r\n    assertEquals(1698928776000L, response.getLog().getTimestamp());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\skywalking\\oap-server\\server-receiver-plugin\\aws-firehose-receiver\\src\\test\\java\\org\\apache\\skywalking\\oap\\server\\receiver\\aws\\firehose\\OtelMetricsConvertorTest.java",
  "methodName" : "test",
  "sourceCode" : "@Test\r\npublic void test() throws IOException {\r\n    for (TestData testData : findTestData()) {\r\n        io.opentelemetry.proto.collector.metrics.v1.ExportMetricsServiceRequest request = convertSource(testData.getSourceFile());\r\n        String str = JsonFormat.printer().print(request);\r\n        final Map convertedData = new Gson().fromJson(str, Map.class);\r\n        final Map expect = new Gson().fromJson(new String(Files.readAllBytes(testData.getExpectFile().toPath())), Map.class);\r\n        Assertions.assertEquals(expect, convertedData, String.format(\"diff , %s -> %s\", testData.getSourceFile(), testData.getExpectFile()));\r\n        System.out.printf(\"test pass %s -> %s %n\", testData.getSourceFile(), testData.getExpectFile());\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\skywalking\\oap-server\\server-receiver-plugin\\configuration-discovery-receiver-plugin\\src\\test\\java\\org\\apache\\skywalking\\oap\\server\\receiver\\configuration\\discovery\\AgentConfigurationsReaderTest.java",
  "methodName" : "testReadAgentConfigurations",
  "sourceCode" : "@Test\r\npublic void testReadAgentConfigurations() {\r\n    AgentConfigurationsReader reader = new AgentConfigurationsReader(this.getClass().getClassLoader().getResourceAsStream(\"agent-dynamic-configuration.yml\"));\r\n    Map<String, AgentConfigurations> configurationCache = reader.readAgentConfigurationsTable().getAgentConfigurationsCache();\r\n    Assertions.assertEquals(2, configurationCache.size());\r\n    AgentConfigurations agentConfigurations0 = configurationCache.get(\"serviceA\");\r\n    Assertions.assertEquals(\"serviceA\", agentConfigurations0.getService());\r\n    Assertions.assertEquals(2, agentConfigurations0.getConfiguration().size());\r\n    Assertions.assertEquals(\"1000\", agentConfigurations0.getConfiguration().get(\"trace.sample_rate\"));\r\n    Assertions.assertEquals(\"/api/seller/seller/*\", agentConfigurations0.getConfiguration().get(\"trace.ignore_path\"));\r\n    Assertions.assertEquals(\"92670f1ccbdee60e14ffc054d70a5cf3f93f6b5fb1adb83b10bea4fec79b96e7bc5e7b188e231428853721ded42ec756663947316065617f3cfdf51d6dfc8da6\", agentConfigurations0.getUuid());\r\n    AgentConfigurations agentConfigurations1 = configurationCache.get(\"serviceB\");\r\n    Assertions.assertEquals(\"serviceB\", agentConfigurations1.getService());\r\n    Assertions.assertEquals(2, agentConfigurations1.getConfiguration().size());\r\n    Assertions.assertEquals(\"1000\", agentConfigurations1.getConfiguration().get(\"trace.sample_rate\"));\r\n    Assertions.assertEquals(\"/api/seller/seller/*\", agentConfigurations1.getConfiguration().get(\"trace.ignore_path\"));\r\n    Assertions.assertEquals(\"92670f1ccbdee60e14ffc054d70a5cf3f93f6b5fb1adb83b10bea4fec79b96e7bc5e7b188e231428853721ded42ec756663947316065617f3cfdf51d6dfc8da6\", agentConfigurations0.getUuid());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\skywalking\\oap-server\\server-receiver-plugin\\configuration-discovery-receiver-plugin\\src\\test\\java\\org\\apache\\skywalking\\oap\\server\\receiver\\configuration\\discovery\\AgentConfigurationsWatcherTest.java",
  "methodName" : "testConfigModifyEvent",
  "sourceCode" : "@Test\r\npublic void testConfigModifyEvent() throws IOException {\r\n    AgentConfigurationsTable agentConfigurationsTable = Whitebox.getInternalState(agentConfigurationsWatcher, \"agentConfigurationsTable\");\r\n    assertTrue(agentConfigurationsTable.getAgentConfigurationsCache().isEmpty());\r\n    Reader reader = ResourceUtils.read(\"agent-dynamic-configuration.yml\");\r\n    char[] chars = new char[1024 * 1024];\r\n    int length = reader.read(chars);\r\n    agentConfigurationsWatcher.notify(new ConfigChangeWatcher.ConfigChangeEvent(new String(chars, 0, length), ConfigChangeWatcher.EventType.MODIFY));\r\n    AgentConfigurationsTable modifyAgentConfigurationsTable = Whitebox.getInternalState(agentConfigurationsWatcher, \"agentConfigurationsTable\");\r\n    Map<String, AgentConfigurations> configurationCache = modifyAgentConfigurationsTable.getAgentConfigurationsCache();\r\n    Assertions.assertEquals(2, configurationCache.size());\r\n    AgentConfigurations agentConfigurations0 = configurationCache.get(\"serviceA\");\r\n    Assertions.assertEquals(\"serviceA\", agentConfigurations0.getService());\r\n    Assertions.assertEquals(2, agentConfigurations0.getConfiguration().size());\r\n    Assertions.assertEquals(\"1000\", agentConfigurations0.getConfiguration().get(\"trace.sample_rate\"));\r\n    Assertions.assertEquals(\"/api/seller/seller/*\", agentConfigurations0.getConfiguration().get(\"trace.ignore_path\"));\r\n    Assertions.assertEquals(\"92670f1ccbdee60e14ffc054d70a5cf3f93f6b5fb1adb83b10bea4fec79b96e7bc5e7b188e231428853721ded42ec756663947316065617f3cfdf51d6dfc8da6\", agentConfigurations0.getUuid());\r\n    AgentConfigurations agentConfigurations1 = configurationCache.get(\"serviceB\");\r\n    Assertions.assertEquals(\"serviceB\", agentConfigurations1.getService());\r\n    Assertions.assertEquals(2, agentConfigurations1.getConfiguration().size());\r\n    Assertions.assertEquals(\"1000\", agentConfigurations1.getConfiguration().get(\"trace.sample_rate\"));\r\n    Assertions.assertEquals(\"/api/seller/seller/*\", agentConfigurations1.getConfiguration().get(\"trace.ignore_path\"));\r\n    Assertions.assertEquals(\"92670f1ccbdee60e14ffc054d70a5cf3f93f6b5fb1adb83b10bea4fec79b96e7bc5e7b188e231428853721ded42ec756663947316065617f3cfdf51d6dfc8da6\", agentConfigurations0.getUuid());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\skywalking\\oap-server\\server-receiver-plugin\\configuration-discovery-receiver-plugin\\src\\test\\java\\org\\apache\\skywalking\\oap\\server\\receiver\\configuration\\discovery\\AgentConfigurationsWatcherTest.java",
  "methodName" : "testConfigDeleteEvent",
  "sourceCode" : "@Test\r\npublic void testConfigDeleteEvent() throws IOException {\r\n    Reader reader = ResourceUtils.read(\"agent-dynamic-configuration.yml\");\r\n    agentConfigurationsWatcher = spy(new AgentConfigurationsWatcher(null));\r\n    Whitebox.setInternalState(agentConfigurationsWatcher, \"agentConfigurationsTable\", new AgentConfigurationsReader(reader).readAgentConfigurationsTable());\r\n    agentConfigurationsWatcher.notify(new ConfigChangeWatcher.ConfigChangeEvent(\"whatever\", ConfigChangeWatcher.EventType.DELETE));\r\n    AgentConfigurationsTable agentConfigurationsTable = Whitebox.getInternalState(agentConfigurationsWatcher, \"agentConfigurationsTable\");\r\n    Map<String, AgentConfigurations> configurationCache = agentConfigurationsTable.getAgentConfigurationsCache();\r\n    Assertions.assertEquals(0, configurationCache.size());\r\n    AgentConfigurations agentConfigurations0 = configurationCache.get(\"serviceA\");\r\n    AgentConfigurations agentConfigurations1 = configurationCache.get(\"serviceB\");\r\n    Assertions.assertNull(agentConfigurations0);\r\n    Assertions.assertNull(agentConfigurations1);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\skywalking\\oap-server\\server-receiver-plugin\\envoy-metrics-receiver-plugin\\src\\test\\java\\org\\apache\\skywalking\\oap\\server\\receiver\\envoy\\als\\k8s\\FieldFormatterTest.java",
  "methodName" : "testFormatDefaultRule",
  "sourceCode" : "@ParameterizedTest\r\n@MethodSource(\"parameters\")\r\npublic void testFormatDefaultRule(final Case kase) throws Exception {\r\n    assertEquals(new ServiceNameFormatter(kase.format).format(kase.context), kase.result);\r\n}",
  "annotations" : [ "ParameterizedTest" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\skywalking\\oap-server\\server-receiver-plugin\\envoy-metrics-receiver-plugin\\src\\test\\java\\org\\apache\\skywalking\\oap\\server\\receiver\\envoy\\als\\k8s\\K8SALSServiceMeshHTTPAnalysisTest.java",
  "methodName" : "testIngressRoleIdentify",
  "sourceCode" : "@Test\r\npublic void testIngressRoleIdentify() throws IOException {\r\n    try (InputStreamReader isr = new InputStreamReader(getResourceAsStream(\"envoy-ingress.msg\"))) {\r\n        StreamAccessLogsMessage.Builder requestBuilder = StreamAccessLogsMessage.newBuilder();\r\n        JsonFormat.parser().merge(isr, requestBuilder);\r\n        Role identify = analysis.identify(requestBuilder.getIdentifier(), Role.NONE);\r\n        Assertions.assertEquals(Role.PROXY, identify);\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\skywalking\\oap-server\\server-receiver-plugin\\envoy-metrics-receiver-plugin\\src\\test\\java\\org\\apache\\skywalking\\oap\\server\\receiver\\envoy\\als\\k8s\\K8SALSServiceMeshHTTPAnalysisTest.java",
  "methodName" : "testSidecarRoleIdentify",
  "sourceCode" : "@Test\r\npublic void testSidecarRoleIdentify() throws IOException {\r\n    try (InputStreamReader isr = new InputStreamReader(getResourceAsStream(\"envoy-mesh-server-sidecar.msg\"))) {\r\n        StreamAccessLogsMessage.Builder requestBuilder = StreamAccessLogsMessage.newBuilder();\r\n        JsonFormat.parser().merge(isr, requestBuilder);\r\n        Role identify = analysis.identify(requestBuilder.getIdentifier(), Role.NONE);\r\n        Assertions.assertEquals(Role.SIDECAR, identify);\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\skywalking\\oap-server\\server-receiver-plugin\\envoy-metrics-receiver-plugin\\src\\test\\java\\org\\apache\\skywalking\\oap\\server\\receiver\\envoy\\als\\k8s\\K8SALSServiceMeshHTTPAnalysisTest.java",
  "methodName" : "testIngressMetric",
  "sourceCode" : "@Test\r\npublic void testIngressMetric() throws IOException {\r\n    try (InputStreamReader isr = new InputStreamReader(getResourceAsStream(\"envoy-ingress.msg\"))) {\r\n        StreamAccessLogsMessage.Builder requestBuilder = StreamAccessLogsMessage.newBuilder();\r\n        JsonFormat.parser().merge(isr, requestBuilder);\r\n        AccessLogAnalyzer.Result result = this.analysis.analysis(AccessLogAnalyzer.Result.builder().build(), requestBuilder.getIdentifier(), requestBuilder.getHttpLogs().getLogEntry(0), Role.PROXY);\r\n        Assertions.assertEquals(2, result.getMetrics().getHttpMetrics().getMetricsCount());\r\n        HTTPServiceMeshMetric incoming = result.getMetrics().getHttpMetrics().getMetrics(0);\r\n        Assertions.assertEquals(\"UNKNOWN\", incoming.getSourceServiceName());\r\n        Assertions.assertEquals(\"ingress\", incoming.getDestServiceName());\r\n        Assertions.assertEquals(DetectPoint.server, incoming.getDetectPoint());\r\n        HTTPServiceMeshMetric outgoing = result.getMetrics().getHttpMetrics().getMetrics(1);\r\n        Assertions.assertEquals(\"ingress\", outgoing.getSourceServiceName());\r\n        Assertions.assertEquals(\"productpage\", outgoing.getDestServiceName());\r\n        Assertions.assertEquals(DetectPoint.client, outgoing.getDetectPoint());\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\skywalking\\oap-server\\server-receiver-plugin\\envoy-metrics-receiver-plugin\\src\\test\\java\\org\\apache\\skywalking\\oap\\server\\receiver\\envoy\\als\\k8s\\K8SALSServiceMeshHTTPAnalysisTest.java",
  "methodName" : "testIngress2SidecarMetric",
  "sourceCode" : "@Test\r\npublic void testIngress2SidecarMetric() throws IOException {\r\n    try (InputStreamReader isr = new InputStreamReader(getResourceAsStream(\"envoy-ingress2sidecar.msg\"))) {\r\n        StreamAccessLogsMessage.Builder requestBuilder = StreamAccessLogsMessage.newBuilder();\r\n        JsonFormat.parser().merge(isr, requestBuilder);\r\n        AccessLogAnalyzer.Result result = this.analysis.analysis(AccessLogAnalyzer.Result.builder().build(), requestBuilder.getIdentifier(), requestBuilder.getHttpLogs().getLogEntry(0), Role.SIDECAR);\r\n        Assertions.assertEquals(1, result.getMetrics().getHttpMetrics().getMetricsCount());\r\n        HTTPServiceMeshMetric incoming = result.getMetrics().getHttpMetrics().getMetrics(0);\r\n        Assertions.assertEquals(\"\", incoming.getSourceServiceName());\r\n        Assertions.assertEquals(\"productpage\", incoming.getDestServiceName());\r\n        Assertions.assertEquals(DetectPoint.server, incoming.getDetectPoint());\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\skywalking\\oap-server\\server-receiver-plugin\\envoy-metrics-receiver-plugin\\src\\test\\java\\org\\apache\\skywalking\\oap\\server\\receiver\\envoy\\als\\k8s\\K8SALSServiceMeshHTTPAnalysisTest.java",
  "methodName" : "testSidecar2SidecarServerMetric",
  "sourceCode" : "@Test\r\npublic void testSidecar2SidecarServerMetric() throws IOException {\r\n    try (InputStreamReader isr = new InputStreamReader(getResourceAsStream(\"envoy-mesh-server-sidecar.msg\"))) {\r\n        StreamAccessLogsMessage.Builder requestBuilder = StreamAccessLogsMessage.newBuilder();\r\n        JsonFormat.parser().merge(isr, requestBuilder);\r\n        AccessLogAnalyzer.Result result = this.analysis.analysis(AccessLogAnalyzer.Result.builder().build(), requestBuilder.getIdentifier(), requestBuilder.getHttpLogs().getLogEntry(0), Role.SIDECAR);\r\n        Assertions.assertEquals(1, result.getMetrics().getHttpMetrics().getMetricsCount());\r\n        HTTPServiceMeshMetric incoming = result.getMetrics().getHttpMetrics().getMetrics(0);\r\n        Assertions.assertEquals(\"productpage\", incoming.getSourceServiceName());\r\n        Assertions.assertEquals(\"review\", incoming.getDestServiceName());\r\n        Assertions.assertEquals(DetectPoint.server, incoming.getDetectPoint());\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\skywalking\\oap-server\\server-receiver-plugin\\envoy-metrics-receiver-plugin\\src\\test\\java\\org\\apache\\skywalking\\oap\\server\\receiver\\envoy\\als\\k8s\\K8SALSServiceMeshHTTPAnalysisTest.java",
  "methodName" : "testSidecar2SidecarClientMetric",
  "sourceCode" : "@Test\r\npublic void testSidecar2SidecarClientMetric() throws IOException {\r\n    try (InputStreamReader isr = new InputStreamReader(getResourceAsStream(\"envoy-mesh-client-sidecar.msg\"))) {\r\n        StreamAccessLogsMessage.Builder requestBuilder = StreamAccessLogsMessage.newBuilder();\r\n        JsonFormat.parser().merge(isr, requestBuilder);\r\n        AccessLogAnalyzer.Result result = this.analysis.analysis(AccessLogAnalyzer.Result.builder().build(), requestBuilder.getIdentifier(), requestBuilder.getHttpLogs().getLogEntry(0), Role.SIDECAR);\r\n        Assertions.assertEquals(1, result.getMetrics().getHttpMetrics().getMetricsCount());\r\n        HTTPServiceMeshMetric incoming = result.getMetrics().getHttpMetrics().getMetrics(0);\r\n        Assertions.assertEquals(\"productpage\", incoming.getSourceServiceName());\r\n        Assertions.assertEquals(\"detail\", incoming.getDestServiceName());\r\n        Assertions.assertEquals(DetectPoint.client, incoming.getDetectPoint());\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\skywalking\\oap-server\\server-receiver-plugin\\envoy-metrics-receiver-plugin\\src\\test\\java\\org\\apache\\skywalking\\oap\\server\\receiver\\envoy\\ClusterManagerMetricsAdapterTest.java",
  "methodName" : "testAdaptMetricsName",
  "sourceCode" : "@Test\r\npublic void testAdaptMetricsName() {\r\n    assertThat(clusterManagerMetricsAdapter.adaptMetricsName(generalName)).isEqualTo(\"envoy_cluster_metrics\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\skywalking\\oap-server\\server-receiver-plugin\\envoy-metrics-receiver-plugin\\src\\test\\java\\org\\apache\\skywalking\\oap\\server\\receiver\\envoy\\ClusterManagerMetricsAdapterTest.java",
  "methodName" : "testAdaptLabels",
  "sourceCode" : "@Test\r\npublic void testAdaptLabels() {\r\n    assertThat(clusterManagerMetricsAdapter.adaptLabels(generalName, new HashMap<>()).toString()).isEqualTo(\"{cluster_name=-.sds-grpc.-, metrics_name=\" + generalName.getName() + \"}\");\r\n    assertThat(clusterManagerMetricsAdapter.adaptLabels(cbNameOutboundFQDN, new HashMap<>()).toString()).isEqualTo(\"{cluster_name=*.reviews.default, metrics_name=\" + cbNameOutboundFQDN.getName() + \"}\");\r\n    assertThat(clusterManagerMetricsAdapter.adaptLabels(cbNameOutboundFQDNSubset, new HashMap<>()).toString()).isEqualTo(\"{cluster_name=v1.reviews.default, metrics_name=\" + cbNameOutboundFQDNSubset.getName() + \"}\");\r\n    assertThat(clusterManagerMetricsAdapter.adaptLabels(cbNameInboundFQDN, new HashMap<>()).toString()).isEqualTo(\"{cluster_name=-.inbound:9080.-, metrics_name=\" + cbNameInboundFQDN.getName() + \"}\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\skywalking\\oap-server\\server-receiver-plugin\\otel-receiver-plugin\\src\\test\\java\\org\\apache\\skywalking\\oap\\server\\receiver\\otel\\otlp\\OpenTelemetryMetricRequestProcessorTest.java",
  "methodName" : "testAdaptExponentialHistogram",
  "sourceCode" : "@Test\r\npublic void testAdaptExponentialHistogram() throws NoSuchMethodException, InvocationTargetException, IllegalAccessException {\r\n    Class<OpenTelemetryMetricRequestProcessor> clazz = OpenTelemetryMetricRequestProcessor.class;\r\n    Method adaptMetricsMethod = clazz.getDeclaredMethod(\"adaptMetrics\", Map.class, Metric.class);\r\n    adaptMetricsMethod.setAccessible(true);\r\n    // number is 4; 7, 7.5; 8.5, 8.7, 9.4\r\n    var positiveBuckets = ExponentialHistogramDataPoint.Buckets.newBuilder().setOffset(10).addBucketCounts(// (0, 6.72]\r\n    1).addBucketCounts(2).// (6.72, 8]\r\n    addBucketCounts(3).// (8, 9.51]\r\n    build();\r\n    // number is -14, -14.5, -15; -18; -21, -26\r\n    var negativeBuckets = ExponentialHistogramDataPoint.Buckets.newBuilder().setOffset(15).addBucketCounts(3).// (-16, -13.45]\r\n    addBucketCounts(1).// (-19.02, -16]\r\n    addBucketCounts(2).// (-INFINITY, -19.02]\r\n    build();\r\n    var dataPoint = ExponentialHistogramDataPoint.newBuilder().setCount(12).setSum(-63.4).setScale(2).setPositive(positiveBuckets).setNegative(negativeBuckets).setTimeUnixNano(1000000).build();\r\n    ExponentialHistogram exponentialHistogram = ExponentialHistogram.newBuilder().addDataPoints(dataPoint).build();\r\n    Metric metric = Metric.newBuilder().setName(\"test_metric\").setExponentialHistogram(exponentialHistogram).build();\r\n    Stream<Histogram> stream = (Stream<Histogram>) adaptMetricsMethod.invoke(metricRequestProcessor, nodeLabels, metric);\r\n    List<Histogram> list = stream.collect(Collectors.toList());\r\n    Histogram histogramMetric = list.get(0);\r\n    assertEquals(\"test_metric\", histogramMetric.getName());\r\n    assertEquals(1, histogramMetric.getTimestamp());\r\n    assertEquals(12, histogramMetric.getSampleCount());\r\n    assertEquals(-63.4, histogramMetric.getSampleSum());\r\n    // validate the key and value of bucket\r\n    double base = Math.pow(2, Math.pow(2, -2));\r\n    assertTrue(histogramMetric.getBuckets().containsKey(Math.pow(base, 11)));\r\n    assertEquals(1, histogramMetric.getBuckets().get(Math.pow(base, 11)));\r\n    assertTrue(histogramMetric.getBuckets().containsKey(Math.pow(base, 12)));\r\n    assertEquals(2, histogramMetric.getBuckets().get(Math.pow(base, 12)));\r\n    assertTrue(histogramMetric.getBuckets().containsKey(Double.POSITIVE_INFINITY));\r\n    assertEquals(3, histogramMetric.getBuckets().get(Double.POSITIVE_INFINITY));\r\n    assertTrue(histogramMetric.getBuckets().containsKey(-Math.pow(base, 15)));\r\n    assertEquals(3, histogramMetric.getBuckets().get(-Math.pow(base, 15)));\r\n    assertTrue(histogramMetric.getBuckets().containsKey(-Math.pow(base, 16)));\r\n    assertEquals(1, histogramMetric.getBuckets().get(-Math.pow(base, 16)));\r\n    assertTrue(histogramMetric.getBuckets().containsKey(-Math.pow(base, 17)));\r\n    assertEquals(2, histogramMetric.getBuckets().get(-Math.pow(base, 17)));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\skywalking\\oap-server\\server-receiver-plugin\\skywalking-meter-receiver-plugin\\src\\test\\java\\org\\apache\\skywalking\\oap\\server\\receiver\\meter\\module\\MeterReceiverModuleTest.java",
  "methodName" : "testBuild",
  "sourceCode" : "@Test\r\npublic void testBuild() {\r\n    final MeterReceiverModule module = new MeterReceiverModule();\r\n    Assertions.assertEquals(0, module.services().length);\r\n    Assertions.assertEquals(MeterReceiverModule.NAME, module.name());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\skywalking\\oap-server\\server-receiver-plugin\\skywalking-telegraf-receiver-plugin\\src\\test\\java\\org\\apache\\skywalking\\oap\\server\\receiver\\telegraf\\TelegrafMetricsTest.java",
  "methodName" : "testOneMemMetrics",
  "sourceCode" : "@Test\r\npublic void testOneMemMetrics() throws Throwable {\r\n    String oneMemMetrics = \"{\\\"metrics\\\":\" + \"[{\\\"fields\\\":\" + \"{\\\"available\\\":6047739904,\\\"available_percent\\\":35.41215070500567,\\\"total\\\":17078149120,\\\"used\\\":11030409216,\\\"used_percent\\\":64.58784929499433},\" + \"\\\"name\\\":\\\"mem\\\",\" + \"\\\"tags\\\":{\\\"host\\\":\\\"localHost\\\"},\" + \"\\\"timestamp\\\":1663391390}]}\";\r\n    TelegrafData telegrafData = assertTelegrafJSONConvert(oneMemMetrics);\r\n    String[] metricsNames = { \"mem_available\", \"mem_available_percent\", \"mem_total\", \"mem_used\", \"mem_used_percent\" };\r\n    assertConvertToSample(telegrafData, 5, metricsNames);\r\n    assertConvertToSampleFamily(telegrafData, 5, 1, metricsNames);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\skywalking\\oap-server\\server-receiver-plugin\\skywalking-telegraf-receiver-plugin\\src\\test\\java\\org\\apache\\skywalking\\oap\\server\\receiver\\telegraf\\TelegrafMetricsTest.java",
  "methodName" : "testMultipleMemMetrics",
  "sourceCode" : "@Test\r\npublic void testMultipleMemMetrics() throws Throwable {\r\n    String threeMemMetrics = \"{\\\"metrics\\\":\" + \"[{\\\"fields\\\":\" + \"{\\\"available\\\":6047739904,\\\"available_percent\\\":35.41215070500567,\\\"total\\\":17078149120,\\\"used\\\":11030409216,\\\"used_percent\\\":64.58784929499433},\" + \"\\\"name\\\":\\\"mem\\\",\" + \"\\\"tags\\\":{\\\"host\\\":\\\"localHost\\\"},\" + \"\\\"timestamp\\\":1663391390}, \" + \"{\\\"fields\\\":\" + \"{\\\"available\\\":6047563904,\\\"available_percent\\\":56.41215070500567,\\\"total\\\":27048549120,\\\"used\\\":340364409216,\\\"used_percent\\\":44.58454929499433},\" + \"\\\"name\\\":\\\"mem\\\",\" + \"\\\"tags\\\":{\\\"host\\\":\\\"localHost\\\"},\" + \"\\\"timestamp\\\":1663491390}, \" + \"{\\\"fields\\\":\" + \"{\\\"available\\\":5047739904,\\\"available_percent\\\":43.41215070500567,\\\"total\\\":46078149120,\\\"used\\\":45030409216,\\\"used_percent\\\":23.58784929499433},\" + \"\\\"name\\\":\\\"mem\\\",\" + \"\\\"tags\\\":{\\\"host\\\":\\\"localHost\\\"},\" + \"\\\"timestamp\\\":1453365320}]}\";\r\n    TelegrafData telegrafData = assertTelegrafJSONConvert(threeMemMetrics);\r\n    String[] metricsNames = { \"mem_available\", \"mem_available_percent\", \"mem_total\", \"mem_used\", \"mem_used_percent\" };\r\n    assertConvertToSample(telegrafData, 5, metricsNames);\r\n    assertConvertToSampleFamily(telegrafData, 15, 1, metricsNames);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\skywalking\\oap-server\\server-receiver-plugin\\skywalking-telegraf-receiver-plugin\\src\\test\\java\\org\\apache\\skywalking\\oap\\server\\receiver\\telegraf\\TelegrafMetricsTest.java",
  "methodName" : "testOneCpuMetrics",
  "sourceCode" : "@Test\r\npublic void testOneCpuMetrics() throws Throwable {\r\n    String oneCpuMetrics = \"{\\\"metrics\\\":\" + \"[{\\\"fields\\\":\" + \"{\\\"usage_idle\\\":95.32710280373831,\\\"usage_irq\\\":0.3115264797507788,\\\"usage_system\\\":1.7133956386292835,\\\"usage_user\\\":2.64797507788162},\" + \"\\\"name\\\":\\\"cpu\\\",\" + \"\\\"tags\\\":{\\\"host\\\":\\\"localHost\\\"},\" + \"\\\"timestamp\\\":1663391390}]}\";\r\n    TelegrafData telegrafData = assertTelegrafJSONConvert(oneCpuMetrics);\r\n    String[] metricsNames = { \"cpu_usage_idle\", \"cpu_usage_irq\", \"cpu_usage_system\", \"cpu_usage_user\" };\r\n    assertConvertToSample(telegrafData, 4, metricsNames);\r\n    assertConvertToSampleFamily(telegrafData, 4, 1, metricsNames);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\skywalking\\oap-server\\server-receiver-plugin\\skywalking-telegraf-receiver-plugin\\src\\test\\java\\org\\apache\\skywalking\\oap\\server\\receiver\\telegraf\\TelegrafMetricsTest.java",
  "methodName" : "testMultipleCpuMetrics",
  "sourceCode" : "@Test\r\npublic void testMultipleCpuMetrics() throws Throwable {\r\n    String twoCpuMetrics = \"{\\\"metrics\\\":\" + \"[{\\\"fields\\\":\" + \"{\\\"usage_idle\\\":95.32710280373831,\\\"usage_irq\\\":0.3115264797507788,\\\"usage_system\\\":1.7133956386292835,\\\"usage_user\\\":2.64797507788162},\" + \"\\\"name\\\":\\\"cpu\\\",\" + \"\\\"tags\\\":{\\\"host\\\":\\\"localHost\\\"},\" + \"\\\"timestamp\\\":1663391390}, \" + \"{\\\"fields\\\":\" + \"{\\\"usage_idle\\\":45.32710280373831,\\\"usage_irq\\\":0.4515344797507788,\\\"usage_system\\\":3.4533956386292835,\\\"usage_user\\\":45.64797507788162},\" + \"\\\"name\\\":\\\"cpu\\\",\" + \"\\\"tags\\\":{\\\"host\\\":\\\"localHost\\\"},\" + \"\\\"timestamp\\\":1453365320}]}\";\r\n    TelegrafData telegrafData = assertTelegrafJSONConvert(twoCpuMetrics);\r\n    String[] metricsNames = { \"cpu_usage_idle\", \"cpu_usage_irq\", \"cpu_usage_system\", \"cpu_usage_user\" };\r\n    assertConvertToSample(telegrafData, 4, metricsNames);\r\n    assertConvertToSampleFamily(telegrafData, 8, 1, metricsNames);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\skywalking\\oap-server\\server-receiver-plugin\\skywalking-telegraf-receiver-plugin\\src\\test\\java\\org\\apache\\skywalking\\oap\\server\\receiver\\telegraf\\TelegrafMetricsTest.java",
  "methodName" : "testMultipleCpuMetricsWithSameTimestamp",
  "sourceCode" : "@Test\r\npublic void testMultipleCpuMetricsWithSameTimestamp() throws Throwable {\r\n    String twoCpuMetrics = \"{\\\"metrics\\\":\" + \"[{\\\"fields\\\":\" + \"{\\\"usage_idle\\\":95.32710280373831,\\\"usage_irq\\\":0.3115264797507788,\\\"usage_system\\\":1.7133956386292835,\\\"usage_user\\\":2.64797507788162},\" + \"\\\"name\\\":\\\"cpu\\\",\" + \"\\\"tags\\\":{\\\"host\\\":\\\"localHost\\\"},\" + \"\\\"timestamp\\\":1663391390}, \" + \"{\\\"fields\\\":\" + \"{\\\"usage_idle\\\":67.32710280373831,\\\"usage_irq\\\":0.5415264797507788,\\\"usage_system\\\":1.6533956386292835,\\\"usage_user\\\":76.54797507788162},\" + \"\\\"name\\\":\\\"cpu\\\",\" + \"\\\"tags\\\":{\\\"host\\\":\\\"localHost\\\"},\" + \"\\\"timestamp\\\":1663391390}, \" + \"{\\\"fields\\\":\" + \"{\\\"usage_idle\\\":74.32710280373831,\\\"usage_irq\\\":1.2535264797507788,\\\"usage_system\\\":4.5633956386292835,\\\"usage_user\\\":54.23797507788162},\" + \"\\\"name\\\":\\\"cpu\\\",\" + \"\\\"tags\\\":{\\\"host\\\":\\\"localHost\\\"},\" + \"\\\"timestamp\\\":1663391390}, \" + \"{\\\"fields\\\":\" + \"{\\\"usage_idle\\\":45.32710280373831,\\\"usage_irq\\\":0.4515344797507788,\\\"usage_system\\\":3.4533956386292835,\\\"usage_user\\\":45.64797507788162},\" + \"\\\"name\\\":\\\"cpu\\\",\" + \"\\\"tags\\\":{\\\"host\\\":\\\"localHost\\\"},\" + \"\\\"timestamp\\\":1663391390}]}\";\r\n    TelegrafData telegrafData = assertTelegrafJSONConvert(twoCpuMetrics);\r\n    String[] metricsNames = { \"cpu_usage_idle\", \"cpu_usage_irq\", \"cpu_usage_system\", \"cpu_usage_user\" };\r\n    assertConvertToSample(telegrafData, 4, metricsNames);\r\n    assertConvertToSampleFamily(telegrafData, 4, 4, metricsNames);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\skywalking\\oap-server\\server-receiver-plugin\\skywalking-telegraf-receiver-plugin\\src\\test\\java\\org\\apache\\skywalking\\oap\\server\\receiver\\telegraf\\TelegrafMetricsTest.java",
  "methodName" : "testInvalidJSONConvert",
  "sourceCode" : "@Test\r\npublic void testInvalidJSONConvert() {\r\n    String invalidMetrics = \"This is a invalid metrics message\";\r\n    Assertions.assertThrows(JsonParseException.class, () -> assertTelegrafJSONConvert(invalidMetrics), \"Expected JsonParseException to throw, but it didn't.\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\skywalking\\oap-server\\server-receiver-plugin\\skywalking-telegraf-receiver-plugin\\src\\test\\java\\org\\apache\\skywalking\\oap\\server\\receiver\\telegraf\\TelegrafMetricsTest.java",
  "methodName" : "testInvalidSampleNames",
  "sourceCode" : "@Test\r\npublic void testInvalidSampleNames() {\r\n    String oneCpuMetrics = \"{\\\"metrics\\\":\" + \"[{\\\"fields\\\":\" + \"{\\\"usage_idle\\\":95.32710280373831,\\\"usage_irq\\\":0.3115264797507788,\\\"usage_system\\\":1.7133956386292835,\\\"usage_user\\\":2.64797507788162},\" + \"\\\"name\\\":\\\"cpu\\\",\" + \"\\\"tags\\\":{\\\"host\\\":\\\"localHost\\\"},\" + \"\\\"timestamp\\\":1663391390}]}\";\r\n    Assertions.assertThrows(AssertionError.class, () -> {\r\n        TelegrafData telegrafData = assertTelegrafJSONConvert(oneCpuMetrics);\r\n        String[] wrongMetricsNames = { \"mem_available\", \"mem_available_percent\", \"mem_total\", \"mem_used\", \"mem_used_percent\" };\r\n        assertConvertToSample(telegrafData, 4, wrongMetricsNames);\r\n    }, \"Expected AssertionError to throw, but it didn't.\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\skywalking\\oap-server\\server-receiver-plugin\\skywalking-telegraf-receiver-plugin\\src\\test\\java\\org\\apache\\skywalking\\oap\\server\\receiver\\telegraf\\TelegrafMetricsTest.java",
  "methodName" : "testInvalidSampleFamilyNames",
  "sourceCode" : "@Test\r\npublic void testInvalidSampleFamilyNames() {\r\n    String oneMemMetrics = \"{\\\"metrics\\\":\" + \"[{\\\"fields\\\":\" + \"{\\\"available\\\":6047739904,\\\"available_percent\\\":35.41215070500567,\\\"total\\\":17078149120,\\\"used\\\":11030409216,\\\"used_percent\\\":64.58784929499433},\" + \"\\\"name\\\":\\\"mem\\\",\" + \"\\\"tags\\\":{\\\"host\\\":\\\"localHost\\\"},\" + \"\\\"timestamp\\\":1663391390}]}\";\r\n    Assertions.assertThrows(AssertionError.class, () -> {\r\n        TelegrafData telegrafData = assertTelegrafJSONConvert(oneMemMetrics);\r\n        String[] wrongMetricsNames = { \"cpu_usage_idle\", \"cpu_usage_irq\", \"cpu_usage_system\", \"cpu_usage_user\" };\r\n        assertConvertToSampleFamily(telegrafData, 5, 1, wrongMetricsNames);\r\n    }, \"Expected AssertionError to throw, but it didn't.\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\skywalking\\oap-server\\server-receiver-plugin\\skywalking-telegraf-receiver-plugin\\src\\test\\java\\org\\apache\\skywalking\\oap\\server\\receiver\\telegraf\\TelegrafMetricsTest.java",
  "methodName" : "testWrongSampleNumbers",
  "sourceCode" : "@Test\r\npublic void testWrongSampleNumbers() {\r\n    String twoCpuMetrics = \"{\\\"metrics\\\":\" + \"[{\\\"fields\\\":\" + \"{\\\"usage_idle\\\":95.32710280373831,\\\"usage_irq\\\":0.3115264797507788,\\\"usage_system\\\":1.7133956386292835,\\\"usage_user\\\":2.64797507788162},\" + \"\\\"name\\\":\\\"cpu\\\",\" + \"\\\"tags\\\":{\\\"host\\\":\\\"localHost\\\"},\" + \"\\\"timestamp\\\":1663391390}, \" + \"{\\\"fields\\\":\" + \"{\\\"usage_idle\\\":45.32710280373831,\\\"usage_irq\\\":0.4515344797507788,\\\"usage_system\\\":3.4533956386292835,\\\"usage_user\\\":45.64797507788162},\" + \"\\\"name\\\":\\\"cpu\\\",\" + \"\\\"tags\\\":{\\\"host\\\":\\\"localHost\\\"},\" + \"\\\"timestamp\\\":1453365320}]}\";\r\n    Assertions.assertThrows(AssertionError.class, () -> {\r\n        TelegrafData telegrafData = assertTelegrafJSONConvert(twoCpuMetrics);\r\n        String[] metricsNames = { \"cpu_usage_idle\", \"cpu_usage_irq\", \"cpu_usage_system\", \"cpu_usage_user\" };\r\n        assertConvertToSample(telegrafData, 6, metricsNames);\r\n    }, \"Expected AssertionError to throw, but it didn't.\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\skywalking\\oap-server\\server-receiver-plugin\\skywalking-telegraf-receiver-plugin\\src\\test\\java\\org\\apache\\skywalking\\oap\\server\\receiver\\telegraf\\TelegrafMetricsTest.java",
  "methodName" : "testWrongSampleFamilySize",
  "sourceCode" : "@Test\r\npublic void testWrongSampleFamilySize() {\r\n    String threeMemMetrics = \"{\\\"metrics\\\":\" + \"[{\\\"fields\\\":\" + \"{\\\"available\\\":6047739904,\\\"available_percent\\\":35.41215070500567,\\\"total\\\":17078149120,\\\"used\\\":11030409216,\\\"used_percent\\\":64.58784929499433},\" + \"\\\"name\\\":\\\"mem\\\",\" + \"\\\"tags\\\":{\\\"host\\\":\\\"localHost\\\"},\" + \"\\\"timestamp\\\":1663391390}, \" + \"{\\\"fields\\\":\" + \"{\\\"available\\\":6047563904,\\\"available_percent\\\":56.41215070500567,\\\"total\\\":27048549120,\\\"used\\\":340364409216,\\\"used_percent\\\":44.58454929499433},\" + \"\\\"name\\\":\\\"mem\\\",\" + \"\\\"tags\\\":{\\\"host\\\":\\\"localHost\\\"},\" + \"\\\"timestamp\\\":1663491390}, \" + \"{\\\"fields\\\":\" + \"{\\\"available\\\":5047739904,\\\"available_percent\\\":43.41215070500567,\\\"total\\\":46078149120,\\\"used\\\":45030409216,\\\"used_percent\\\":23.58784929499433},\" + \"\\\"name\\\":\\\"mem\\\",\" + \"\\\"tags\\\":{\\\"host\\\":\\\"localHost\\\"},\" + \"\\\"timestamp\\\":1453365320}]}\";\r\n    Assertions.assertThrows(AssertionError.class, () -> {\r\n        TelegrafData telegrafData = assertTelegrafJSONConvert(threeMemMetrics);\r\n        String[] metricsNames = { \"mem_available\", \"mem_available_percent\", \"mem_total\", \"mem_used\", \"mem_used_percent\" };\r\n        assertConvertToSample(telegrafData, 5, metricsNames);\r\n        assertConvertToSampleFamily(telegrafData, 3, 1, metricsNames);\r\n    }, \"Expected AssertionError to throw, but it didn't.\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\skywalking\\oap-server\\server-receiver-plugin\\skywalking-telegraf-receiver-plugin\\src\\test\\java\\org\\apache\\skywalking\\oap\\server\\receiver\\telegraf\\TelegrafMetricsTest.java",
  "methodName" : "testWrongSampleNumbersOfSampleFamily",
  "sourceCode" : "@Test\r\npublic void testWrongSampleNumbersOfSampleFamily() {\r\n    String threeMemMetrics = \"{\\\"metrics\\\":\" + \"[{\\\"fields\\\":\" + \"{\\\"available\\\":6047739904,\\\"available_percent\\\":35.41215070500567,\\\"total\\\":17078149120,\\\"used\\\":11030409216,\\\"used_percent\\\":64.58784929499433},\" + \"\\\"name\\\":\\\"mem\\\",\" + \"\\\"tags\\\":{\\\"host\\\":\\\"localHost\\\"},\" + \"\\\"timestamp\\\":1663391390}, \" + \"{\\\"fields\\\":\" + \"{\\\"available\\\":6047563904,\\\"available_percent\\\":56.41215070500567,\\\"total\\\":27048549120,\\\"used\\\":340364409216,\\\"used_percent\\\":44.58454929499433},\" + \"\\\"name\\\":\\\"mem\\\",\" + \"\\\"tags\\\":{\\\"host\\\":\\\"localHost\\\"},\" + \"\\\"timestamp\\\":1663491390}, \" + \"{\\\"fields\\\":\" + \"{\\\"available\\\":5047739904,\\\"available_percent\\\":43.41215070500567,\\\"total\\\":46078149120,\\\"used\\\":45030409216,\\\"used_percent\\\":23.58784929499433},\" + \"\\\"name\\\":\\\"mem\\\",\" + \"\\\"tags\\\":{\\\"host\\\":\\\"localHost\\\"},\" + \"\\\"timestamp\\\":1453365320}]}\";\r\n    Assertions.assertThrows(AssertionError.class, () -> {\r\n        TelegrafData telegrafData = assertTelegrafJSONConvert(threeMemMetrics);\r\n        String[] metricsNames = { \"mem_available\", \"mem_available_percent\", \"mem_total\", \"mem_used\", \"mem_used_percent\" };\r\n        assertConvertToSample(telegrafData, 5, metricsNames);\r\n        assertConvertToSampleFamily(telegrafData, 15, 2, metricsNames);\r\n    }, \"Expected AssertionError to throw, but it didn't.\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\skywalking\\oap-server\\server-receiver-plugin\\skywalking-telegraf-receiver-plugin\\src\\test\\java\\org\\apache\\skywalking\\oap\\server\\receiver\\telegraf\\TelegrafMetricsTest.java",
  "methodName" : "testWrongSampleFamilySizeWithSameTimestamp",
  "sourceCode" : "@Test\r\npublic void testWrongSampleFamilySizeWithSameTimestamp() {\r\n    String fourCpuMetrics = \"{\\\"metrics\\\":\" + \"[{\\\"fields\\\":\" + \"{\\\"usage_idle\\\":95.32710280373831,\\\"usage_irq\\\":0.3115264797507788,\\\"usage_system\\\":1.7133956386292835,\\\"usage_user\\\":2.64797507788162},\" + \"\\\"name\\\":\\\"cpu\\\",\" + \"\\\"tags\\\":{\\\"host\\\":\\\"localHost\\\"},\" + \"\\\"timestamp\\\":1663391390}, \" + \"{\\\"fields\\\":\" + \"{\\\"usage_idle\\\":67.32710280373831,\\\"usage_irq\\\":0.5415264797507788,\\\"usage_system\\\":1.6533956386292835,\\\"usage_user\\\":76.54797507788162},\" + \"\\\"name\\\":\\\"cpu\\\",\" + \"\\\"tags\\\":{\\\"host\\\":\\\"localHost\\\"},\" + \"\\\"timestamp\\\":1663391390}, \" + \"{\\\"fields\\\":\" + \"{\\\"usage_idle\\\":74.32710280373831,\\\"usage_irq\\\":1.2535264797507788,\\\"usage_system\\\":4.5633956386292835,\\\"usage_user\\\":54.23797507788162},\" + \"\\\"name\\\":\\\"cpu\\\",\" + \"\\\"tags\\\":{\\\"host\\\":\\\"localHost\\\"},\" + \"\\\"timestamp\\\":1663391390}, \" + \"{\\\"fields\\\":\" + \"{\\\"usage_idle\\\":45.32710280373831,\\\"usage_irq\\\":0.4515344797507788,\\\"usage_system\\\":3.4533956386292835,\\\"usage_user\\\":45.64797507788162},\" + \"\\\"name\\\":\\\"cpu\\\",\" + \"\\\"tags\\\":{\\\"host\\\":\\\"localHost\\\"},\" + \"\\\"timestamp\\\":1663391390}]}\";\r\n    Assertions.assertThrows(AssertionError.class, () -> {\r\n        TelegrafData telegrafData = assertTelegrafJSONConvert(fourCpuMetrics);\r\n        String[] metricsNames = { \"mem_available\", \"mem_available_percent\", \"mem_total\", \"mem_used\", \"mem_used_percent\" };\r\n        assertConvertToSample(telegrafData, 5, metricsNames);\r\n        assertConvertToSampleFamily(telegrafData, 3, 4, metricsNames);\r\n    }, \"Expected AssertionError to throw, but it didn't.\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\skywalking\\oap-server\\server-receiver-plugin\\skywalking-telegraf-receiver-plugin\\src\\test\\java\\org\\apache\\skywalking\\oap\\server\\receiver\\telegraf\\TelegrafMetricsTest.java",
  "methodName" : "testWrongSampleNumbersOfSampleFamilyWithSameTimestamp",
  "sourceCode" : "@Test\r\npublic void testWrongSampleNumbersOfSampleFamilyWithSameTimestamp() {\r\n    String fourCpuMetrics = \"{\\\"metrics\\\":\" + \"[{\\\"fields\\\":\" + \"{\\\"usage_idle\\\":95.32710280373831,\\\"usage_irq\\\":0.3115264797507788,\\\"usage_system\\\":1.7133956386292835,\\\"usage_user\\\":2.64797507788162},\" + \"\\\"name\\\":\\\"cpu\\\",\" + \"\\\"tags\\\":{\\\"host\\\":\\\"localHost\\\"},\" + \"\\\"timestamp\\\":1663391390}, \" + \"{\\\"fields\\\":\" + \"{\\\"usage_idle\\\":67.32710280373831,\\\"usage_irq\\\":0.5415264797507788,\\\"usage_system\\\":1.6533956386292835,\\\"usage_user\\\":76.54797507788162},\" + \"\\\"name\\\":\\\"cpu\\\",\" + \"\\\"tags\\\":{\\\"host\\\":\\\"localHost\\\"},\" + \"\\\"timestamp\\\":1663391390}, \" + \"{\\\"fields\\\":\" + \"{\\\"usage_idle\\\":74.32710280373831,\\\"usage_irq\\\":1.2535264797507788,\\\"usage_system\\\":4.5633956386292835,\\\"usage_user\\\":54.23797507788162},\" + \"\\\"name\\\":\\\"cpu\\\",\" + \"\\\"tags\\\":{\\\"host\\\":\\\"localHost\\\"},\" + \"\\\"timestamp\\\":1663391390}, \" + \"{\\\"fields\\\":\" + \"{\\\"usage_idle\\\":45.32710280373831,\\\"usage_irq\\\":0.4515344797507788,\\\"usage_system\\\":3.4533956386292835,\\\"usage_user\\\":45.64797507788162},\" + \"\\\"name\\\":\\\"cpu\\\",\" + \"\\\"tags\\\":{\\\"host\\\":\\\"localHost\\\"},\" + \"\\\"timestamp\\\":1663391390}]}\";\r\n    Assertions.assertThrows(AssertionError.class, () -> {\r\n        TelegrafData telegrafData = assertTelegrafJSONConvert(fourCpuMetrics);\r\n        String[] metricsNames = { \"mem_available\", \"mem_available_percent\", \"mem_total\", \"mem_used\", \"mem_used_percent\" };\r\n        assertConvertToSample(telegrafData, 5, metricsNames);\r\n        assertConvertToSampleFamily(telegrafData, 4, 2, metricsNames);\r\n    }, \"Expected AssertionError to throw, but it didn't.\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\skywalking\\oap-server\\server-receiver-plugin\\skywalking-trace-receiver-plugin\\src\\test\\java\\org\\apache\\skywalking\\oap\\server\\receiver\\trace\\provider\\parser\\listener\\EndpointDepFromCrossThreadAnalysisListenerTest.java",
  "methodName" : "testEndpointDependency",
  "sourceCode" : "@Test\r\npublic void testEndpointDependency() {\r\n    final MockReceiver mockReceiver = new MockReceiver();\r\n    EndpointDepFromCrossThreadAnalysisListener listener = new EndpointDepFromCrossThreadAnalysisListener(mockReceiver, CONFIG, NAMING_CONTROL);\r\n    final long startTime = System.currentTimeMillis();\r\n    SpanObject spanObject = SpanObject.newBuilder().setOperationName(\"/local.method\").setStartTime(startTime).setEndTime(startTime + 1000L).setIsError(true).setSpanType(SpanType.Local).setSpanLayer(SpanLayer.Unknown).addTags(KeyStringValuePair.newBuilder().setKey(\"param\").setValue(\"value\").build()).addRefs(SegmentReference.newBuilder().setRefType(RefType.CrossThread).setParentService(\"local-service\").setParentServiceInstance(\"local-instance\").setParentEndpoint(\"/local.parentMethod\").build()).setComponentId(10).build();\r\n    final SegmentObject segment = SegmentObject.newBuilder().setService(\"local-service\").setServiceInstance(\"local-instance\").addSpans(spanObject).build();\r\n    listener.parseLocal(spanObject, segment);\r\n    listener.build();\r\n    final List<ISource> receivedSources = mockReceiver.getReceivedSources();\r\n    final EndpointMeta sourceEndpoint = (EndpointMeta) receivedSources.get(0);\r\n    Assertions.assertEquals(\"local-service\", sourceEndpoint.getServiceName());\r\n    Assertions.assertEquals(\"/local.parentMethod\", sourceEndpoint.getEndpoint());\r\n    Assertions.assertTrue(sourceEndpoint.isServiceNormal());\r\n    sourceEndpoint.prepare();\r\n    Assertions.assertEquals(serviceId, sourceEndpoint.getServiceId());\r\n    final Endpoint targetEndpoint = (Endpoint) receivedSources.get(1);\r\n    Assertions.assertEquals(\"local-service\", targetEndpoint.getServiceName());\r\n    Assertions.assertEquals(\"/local.method\", targetEndpoint.getName());\r\n    Assertions.assertTrue(targetEndpoint.getServiceLayer().isNormal());\r\n    targetEndpoint.prepare();\r\n    Assertions.assertEquals(serviceId, targetEndpoint.getServiceId());\r\n    final EndpointRelation endpointRelation = (EndpointRelation) receivedSources.get(2);\r\n    Assertions.assertEquals(\"local-service\", endpointRelation.getServiceName());\r\n    Assertions.assertEquals(\"local-service\", endpointRelation.getChildServiceName());\r\n    Assertions.assertEquals(\"local-instance\", endpointRelation.getServiceInstanceName());\r\n    Assertions.assertEquals(\"local-instance\", endpointRelation.getChildServiceInstanceName());\r\n    Assertions.assertEquals(\"/local.parentMethod\", endpointRelation.getEndpoint());\r\n    Assertions.assertEquals(\"/local.method\", endpointRelation.getChildEndpoint());\r\n    Assertions.assertEquals(10, endpointRelation.getComponentId());\r\n    Assertions.assertEquals(Layer.GENERAL, endpointRelation.getServiceLayer());\r\n    Assertions.assertEquals(Layer.GENERAL, endpointRelation.getChildServiceLayer());\r\n    Assertions.assertFalse(endpointRelation.isStatus());\r\n    // No RPC/HTTP response code.\r\n    Assertions.assertEquals(0, endpointRelation.getHttpResponseStatusCode());\r\n    Assertions.assertEquals(null, endpointRelation.getRpcStatusCode());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\skywalking\\oap-server\\server-receiver-plugin\\skywalking-trace-receiver-plugin\\src\\test\\java\\org\\apache\\skywalking\\oap\\server\\receiver\\trace\\provider\\parser\\listener\\RPCAnalysisListenerTest.java",
  "methodName" : "testContainsPoint",
  "sourceCode" : "@Test\r\npublic void testContainsPoint() {\r\n    RPCAnalysisListener listener = new RPCAnalysisListener(new MockReceiver(), CONFIG, CACHE, NAMING_CONTROL);\r\n    Assertions.assertTrue(listener.containsPoint(AnalysisListener.Point.Entry));\r\n    Assertions.assertTrue(listener.containsPoint(AnalysisListener.Point.Local));\r\n    Assertions.assertTrue(listener.containsPoint(AnalysisListener.Point.Exit));\r\n    Assertions.assertFalse(listener.containsPoint(AnalysisListener.Point.First));\r\n    Assertions.assertFalse(listener.containsPoint(AnalysisListener.Point.Segment));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\skywalking\\oap-server\\server-receiver-plugin\\skywalking-trace-receiver-plugin\\src\\test\\java\\org\\apache\\skywalking\\oap\\server\\receiver\\trace\\provider\\parser\\listener\\RPCAnalysisListenerTest.java",
  "methodName" : "testEntrySpanWithoutRef",
  "sourceCode" : "/**\r\n * Entry span without ref, usually the first span of the whole trace.\r\n */\r\n@Test\r\npublic void testEntrySpanWithoutRef() {\r\n    final MockReceiver mockReceiver = new MockReceiver();\r\n    RPCAnalysisListener listener = new RPCAnalysisListener(mockReceiver, CONFIG, CACHE, NAMING_CONTROL);\r\n    final long startTime = System.currentTimeMillis();\r\n    SpanObject spanObject = SpanObject.newBuilder().setOperationName(\"/springMVC\").setStartTime(startTime).setEndTime(startTime + 1000L).setIsError(true).setSpanType(SpanType.Entry).addTags(KeyStringValuePair.newBuilder().setKey(SpanTags.HTTP_RESPONSE_STATUS_CODE).setValue(\"500\").build()).addTags(KeyStringValuePair.newBuilder().setKey(SpanTags.RPC_RESPONSE_STATUS_CODE).setValue(\"OK\").build()).build();\r\n    final SegmentObject segment = SegmentObject.newBuilder().setService(\"mock-service\").setServiceInstance(\"mock-instance\").addSpans(spanObject).build();\r\n    listener.parseEntry(spanObject, segment);\r\n    listener.build();\r\n    final List<ISource> receivedSources = mockReceiver.getReceivedSources();\r\n    Assertions.assertEquals(6, receivedSources.size());\r\n    final Service service = (Service) receivedSources.get(0);\r\n    final ServiceInstance serviceInstance = (ServiceInstance) receivedSources.get(1);\r\n    final ServiceRelation serviceRelation = (ServiceRelation) receivedSources.get(2);\r\n    final ServiceInstanceRelation serviceInstanceRelation = (ServiceInstanceRelation) receivedSources.get(3);\r\n    final Endpoint endpoint = (Endpoint) receivedSources.get(4);\r\n    final EndpointRelation endpointRelation = (EndpointRelation) receivedSources.get(5);\r\n    Assertions.assertEquals(\"mock-service\", service.getName());\r\n    Assertions.assertEquals(500, service.getHttpResponseStatusCode());\r\n    Assertions.assertEquals(\"OK\", service.getRpcStatusCode());\r\n    Assertions.assertFalse(service.isStatus());\r\n    Assertions.assertEquals(\"mock-instance\", serviceInstance.getName());\r\n    Assertions.assertEquals(\"/springMVC\", endpoint.getName());\r\n    Assertions.assertEquals(Const.USER_SERVICE_NAME, serviceRelation.getSourceServiceName());\r\n    Assertions.assertEquals(service.getName(), serviceRelation.getDestServiceName());\r\n    Assertions.assertEquals(Const.USER_INSTANCE_NAME, serviceInstanceRelation.getSourceServiceInstanceName());\r\n    Assertions.assertEquals(serviceInstance.getName(), serviceInstanceRelation.getDestServiceInstanceName());\r\n    Assertions.assertEquals(Const.USER_ENDPOINT_NAME, endpointRelation.getEndpoint());\r\n    Assertions.assertEquals(endpoint.getName(), endpointRelation.getChildEndpoint());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\skywalking\\oap-server\\server-receiver-plugin\\skywalking-trace-receiver-plugin\\src\\test\\java\\org\\apache\\skywalking\\oap\\server\\receiver\\trace\\provider\\parser\\listener\\RPCAnalysisListenerTest.java",
  "methodName" : "testEntrySpanRef",
  "sourceCode" : "/**\r\n * Entry span with ref, meaning the downstream has been instrumented.\r\n */\r\n@Test\r\npublic void testEntrySpanRef() {\r\n    final MockReceiver mockReceiver = new MockReceiver();\r\n    RPCAnalysisListener listener = new RPCAnalysisListener(mockReceiver, CONFIG, CACHE, NAMING_CONTROL);\r\n    final long startTime = System.currentTimeMillis();\r\n    SpanObject spanObject = SpanObject.newBuilder().setOperationName(\"/springMVC\").setStartTime(startTime).setEndTime(startTime + 1000L).setIsError(true).setSpanType(SpanType.Entry).setSpanLayer(SpanLayer.RPCFramework).addTags(KeyStringValuePair.newBuilder().setKey(\"http.method\").setValue(\"GET\").build()).addRefs(SegmentReference.newBuilder().setRefType(RefType.CrossProcess).setParentService(\"downstream-service\").setParentServiceInstance(\"downstream-instance\").setParentEndpoint(\"downstream-endpoint\").setNetworkAddressUsedAtPeer(\"127.0.0.1\").build()).build();\r\n    final SegmentObject segment = SegmentObject.newBuilder().setService(\"mock-service\").setServiceInstance(\"mock-instance\").addSpans(spanObject).build();\r\n    listener.parseEntry(spanObject, segment);\r\n    listener.build();\r\n    final List<ISource> receivedSources = mockReceiver.getReceivedSources();\r\n    Assertions.assertEquals(6, receivedSources.size());\r\n    final Service service = (Service) receivedSources.get(0);\r\n    final ServiceInstance serviceInstance = (ServiceInstance) receivedSources.get(1);\r\n    final ServiceRelation serviceRelation = (ServiceRelation) receivedSources.get(2);\r\n    final ServiceInstanceRelation serviceInstanceRelation = (ServiceInstanceRelation) receivedSources.get(3);\r\n    final Endpoint endpoint = (Endpoint) receivedSources.get(4);\r\n    final EndpointRelation endpointRelation = (EndpointRelation) receivedSources.get(5);\r\n    Assertions.assertEquals(\"mock-service\", service.getName());\r\n    Assertions.assertEquals(\"mock-instance\", serviceInstance.getName());\r\n    Assertions.assertEquals(\"/springMVC\", endpoint.getName());\r\n    Assertions.assertEquals(\"downstream-service\", serviceRelation.getSourceServiceName());\r\n    Assertions.assertEquals(service.getName(), serviceRelation.getDestServiceName());\r\n    Assertions.assertEquals(\"downstream-instance\", serviceInstanceRelation.getSourceServiceInstanceName());\r\n    Assertions.assertEquals(serviceInstance.getName(), serviceInstanceRelation.getDestServiceInstanceName());\r\n    Assertions.assertEquals(\"downstream-endpoint\", endpointRelation.getEndpoint());\r\n    Assertions.assertEquals(endpoint.getName(), endpointRelation.getChildEndpoint());\r\n    // tags test\r\n    Assertions.assertEquals(\"http.method:GET\", service.getTags().get(0));\r\n    Assertions.assertEquals(\"http.method:GET\", serviceInstance.getTags().get(0));\r\n    Assertions.assertEquals(\"http.method:GET\", endpoint.getTags().get(0));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\skywalking\\oap-server\\server-receiver-plugin\\skywalking-trace-receiver-plugin\\src\\test\\java\\org\\apache\\skywalking\\oap\\server\\receiver\\trace\\provider\\parser\\listener\\RPCAnalysisListenerTest.java",
  "methodName" : "testEntrySpanMQRef",
  "sourceCode" : "/**\r\n * Entry span with ref, but as a MQ server, or uninstrumented server.\r\n */\r\n@Test\r\npublic void testEntrySpanMQRef() {\r\n    final MockReceiver mockReceiver = new MockReceiver();\r\n    RPCAnalysisListener listener = new RPCAnalysisListener(mockReceiver, CONFIG, CACHE, NAMING_CONTROL);\r\n    final long startTime = System.currentTimeMillis();\r\n    SpanObject spanObject = SpanObject.newBuilder().setOperationName(\"/springMVC\").setStartTime(startTime).setEndTime(startTime + 1000L).setIsError(true).setSpanType(SpanType.Entry).setSpanLayer(SpanLayer.MQ).addRefs(SegmentReference.newBuilder().setRefType(RefType.CrossProcess).setParentService(\"downstream-service\").setParentServiceInstance(\"downstream-instance\").setParentEndpoint(\"downstream-endpoint\").setNetworkAddressUsedAtPeer(\"127.0.0.1\").build()).build();\r\n    final SegmentObject segment = SegmentObject.newBuilder().setService(\"mock-service\").setServiceInstance(\"mock-instance\").addSpans(spanObject).build();\r\n    listener.parseEntry(spanObject, segment);\r\n    listener.build();\r\n    final List<ISource> receivedSources = mockReceiver.getReceivedSources();\r\n    Assertions.assertEquals(6, receivedSources.size());\r\n    final Service service = (Service) receivedSources.get(0);\r\n    final ServiceInstance serviceInstance = (ServiceInstance) receivedSources.get(1);\r\n    final ServiceRelation serviceRelation = (ServiceRelation) receivedSources.get(2);\r\n    final ServiceInstanceRelation serviceInstanceRelation = (ServiceInstanceRelation) receivedSources.get(3);\r\n    final Endpoint endpoint = (Endpoint) receivedSources.get(4);\r\n    final EndpointRelation endpointRelation = (EndpointRelation) receivedSources.get(5);\r\n    Assertions.assertEquals(\"mock-service\", service.getName());\r\n    Assertions.assertEquals(\"mock-instance\", serviceInstance.getName());\r\n    Assertions.assertEquals(\"/springMVC\", endpoint.getName());\r\n    Assertions.assertEquals(\"127.0.0.1\", serviceRelation.getSourceServiceName());\r\n    Assertions.assertEquals(service.getName(), serviceRelation.getDestServiceName());\r\n    Assertions.assertEquals(\"127.0.0.1\", serviceInstanceRelation.getSourceServiceInstanceName());\r\n    Assertions.assertEquals(serviceInstance.getName(), serviceInstanceRelation.getDestServiceInstanceName());\r\n    Assertions.assertEquals(\"downstream-endpoint\", endpointRelation.getEndpoint());\r\n    Assertions.assertEquals(\"downstream-service\", endpointRelation.getServiceName());\r\n    Assertions.assertEquals(endpoint.getName(), endpointRelation.getChildEndpoint());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\skywalking\\oap-server\\server-receiver-plugin\\skywalking-trace-receiver-plugin\\src\\test\\java\\org\\apache\\skywalking\\oap\\server\\receiver\\trace\\provider\\parser\\listener\\RPCAnalysisListenerTest.java",
  "methodName" : "testParseLocalLogicSpan",
  "sourceCode" : "/**\r\n * Local span analysis is triggered with logic span tag.\r\n */\r\n@Test\r\npublic void testParseLocalLogicSpan() {\r\n    final MockReceiver mockReceiver = new MockReceiver();\r\n    RPCAnalysisListener listener = new RPCAnalysisListener(mockReceiver, CONFIG, CACHE, NAMING_CONTROL);\r\n    final long startTime = System.currentTimeMillis();\r\n    final JsonObject logicSpanTagValue = new JsonObject();\r\n    logicSpanTagValue.addProperty(\"logic-span\", true);\r\n    SpanObject spanObject = SpanObject.newBuilder().setOperationName(\"/logic-call\").setStartTime(startTime).setEndTime(startTime + 1000L).setIsError(false).setSpanType(SpanType.Local).addTags(KeyStringValuePair.newBuilder().setKey(LOGIC_ENDPOINT).setValue(logicSpanTagValue.toString()).build()).build();\r\n    final SegmentObject segment = SegmentObject.newBuilder().setService(\"mock-service\").setServiceInstance(\"mock-instance\").addSpans(spanObject).build();\r\n    listener.parseLocal(spanObject, segment);\r\n    listener.build();\r\n    final List<ISource> receivedSources = mockReceiver.getReceivedSources();\r\n    Assertions.assertEquals(1, receivedSources.size());\r\n    final Endpoint source = (Endpoint) receivedSources.get(0);\r\n    Assertions.assertEquals(\"/logic-call\", source.getName());\r\n    mockReceiver.clear();\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\skywalking\\oap-server\\server-receiver-plugin\\skywalking-trace-receiver-plugin\\src\\test\\java\\org\\apache\\skywalking\\oap\\server\\receiver\\trace\\provider\\parser\\listener\\RPCAnalysisListenerTest.java",
  "methodName" : "testParseSpanWithLogicEndpointTag",
  "sourceCode" : "/**\r\n * Local span analysis is triggered with extension logic service tags.\r\n */\r\n@Test\r\npublic void testParseSpanWithLogicEndpointTag() {\r\n    final MockReceiver mockReceiver = new MockReceiver();\r\n    RPCAnalysisListener listener = new RPCAnalysisListener(mockReceiver, CONFIG, CACHE, NAMING_CONTROL);\r\n    final long startTime = System.currentTimeMillis();\r\n    final JsonObject logicSpanTagValue = new JsonObject();\r\n    logicSpanTagValue.addProperty(\"name\", \"/GraphQL-service\");\r\n    logicSpanTagValue.addProperty(\"latency\", 100);\r\n    logicSpanTagValue.addProperty(\"status\", false);\r\n    SpanObject spanObject = SpanObject.newBuilder().setOperationName(\"/logic-call\").setStartTime(startTime).setEndTime(startTime + 1000L).setIsError(false).setSpanType(SpanType.Local).addTags(KeyStringValuePair.newBuilder().setKey(LOGIC_ENDPOINT).setValue(logicSpanTagValue.toString()).build()).build();\r\n    final SegmentObject segment = SegmentObject.newBuilder().setService(\"mock-service\").setServiceInstance(\"mock-instance\").addSpans(spanObject).build();\r\n    listener.parseLocal(spanObject, segment);\r\n    listener.build();\r\n    final List<ISource> receivedSources = mockReceiver.getReceivedSources();\r\n    Assertions.assertEquals(1, receivedSources.size());\r\n    final Endpoint source = (Endpoint) receivedSources.get(0);\r\n    Assertions.assertEquals(\"/GraphQL-service\", source.getName());\r\n    mockReceiver.clear();\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\skywalking\\oap-server\\server-receiver-plugin\\skywalking-trace-receiver-plugin\\src\\test\\java\\org\\apache\\skywalking\\oap\\server\\receiver\\trace\\provider\\parser\\listener\\RPCAnalysisListenerTest.java",
  "methodName" : "testExitSpanWithoutAlias",
  "sourceCode" : "/**\r\n * Exit span, represent calling a 3rd party system, when the alias has not been setup, including access database.\r\n */\r\n@Test\r\npublic void testExitSpanWithoutAlias() {\r\n    final MockReceiver mockReceiver = new MockReceiver();\r\n    RPCAnalysisListener listener = new RPCAnalysisListener(mockReceiver, CONFIG, CACHE, NAMING_CONTROL);\r\n    final long startTime = System.currentTimeMillis();\r\n    SpanObject spanObject = SpanObject.newBuilder().setOperationName(\"/springMVC\").setStartTime(startTime).setEndTime(startTime + 1000L).setIsError(true).setSpanType(SpanType.Exit).setSpanLayer(SpanLayer.Database).setPeer(\"127.0.0.1:8080\").build();\r\n    final SegmentObject segment = SegmentObject.newBuilder().setService(\"mock-service\").setServiceInstance(\"mock-instance\").addSpans(spanObject).build();\r\n    listener.parseExit(spanObject, segment);\r\n    listener.build();\r\n    final List<ISource> receivedSources = mockReceiver.getReceivedSources();\r\n    Assertions.assertEquals(2, receivedSources.size());\r\n    final ServiceRelation serviceRelation = (ServiceRelation) receivedSources.get(0);\r\n    final ServiceInstanceRelation serviceInstanceRelation = (ServiceInstanceRelation) receivedSources.get(1);\r\n    Assertions.assertEquals(\"mock-service\", serviceRelation.getSourceServiceName());\r\n    Assertions.assertEquals(\"127.0.0.1:8080\", serviceRelation.getDestServiceName());\r\n    Assertions.assertEquals(\"mock-instance\", serviceInstanceRelation.getSourceServiceInstanceName());\r\n    Assertions.assertEquals(\"127.0.0.1:8080\", serviceInstanceRelation.getDestServiceInstanceName());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\skywalking\\oap-server\\server-receiver-plugin\\skywalking-trace-receiver-plugin\\src\\test\\java\\org\\apache\\skywalking\\oap\\server\\receiver\\trace\\provider\\parser\\listener\\RPCAnalysisListenerTest.java",
  "methodName" : "testExitSpanWithAlias",
  "sourceCode" : "/**\r\n * Exit span, represent calling a 3rd party system, when the alias has been setup.\r\n */\r\n@Test\r\npublic void testExitSpanWithAlias() {\r\n    final MockReceiver mockReceiver = new MockReceiver();\r\n    RPCAnalysisListener listener = new RPCAnalysisListener(mockReceiver, CONFIG, CACHE2, NAMING_CONTROL);\r\n    final long startTime = System.currentTimeMillis();\r\n    SpanObject spanObject = SpanObject.newBuilder().setOperationName(\"/springMVC\").setStartTime(startTime).setEndTime(startTime + 1000L).setIsError(true).setSpanType(SpanType.Exit).setSpanLayer(SpanLayer.MQ).setPeer(\"127.0.0.1:8080\").build();\r\n    final SegmentObject segment = SegmentObject.newBuilder().setService(\"mock-service\").setServiceInstance(\"mock-instance\").addSpans(spanObject).build();\r\n    listener.parseExit(spanObject, segment);\r\n    listener.build();\r\n    final List<ISource> receivedSources = mockReceiver.getReceivedSources();\r\n    Assertions.assertEquals(2, receivedSources.size());\r\n    final ServiceRelation serviceRelation = (ServiceRelation) receivedSources.get(0);\r\n    final ServiceInstanceRelation serviceInstanceRelation = (ServiceInstanceRelation) receivedSources.get(1);\r\n    Assertions.assertEquals(\"mock-service\", serviceRelation.getSourceServiceName());\r\n    Assertions.assertEquals(\"target-service\", serviceRelation.getDestServiceName());\r\n    Assertions.assertEquals(\"mock-instance\", serviceInstanceRelation.getSourceServiceInstanceName());\r\n    Assertions.assertEquals(\"target-instance\", serviceInstanceRelation.getDestServiceInstanceName());\r\n    mockReceiver.clear();\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\skywalking\\oap-server\\server-receiver-plugin\\skywalking-trace-receiver-plugin\\src\\test\\java\\org\\apache\\skywalking\\oap\\server\\receiver\\trace\\provider\\parser\\listener\\RPCAnalysisListenerTest.java",
  "methodName" : "testMQEntryWithoutRef",
  "sourceCode" : "@Test\r\npublic void testMQEntryWithoutRef() {\r\n    final MockReceiver mockReceiver = new MockReceiver();\r\n    RPCAnalysisListener listener = new RPCAnalysisListener(mockReceiver, CONFIG, CACHE, NAMING_CONTROL);\r\n    final long startTime = System.currentTimeMillis();\r\n    SpanObject spanObject = SpanObject.newBuilder().setOperationName(\"/MQ/consumer\").setStartTime(startTime).setEndTime(startTime + 1000L).setIsError(true).setSpanType(SpanType.Entry).setSpanLayer(SpanLayer.MQ).setPeer(\"mq-server:9090\").addTags(KeyStringValuePair.newBuilder().setKey(SpanTags.MQ_QUEUE).setValue(\"queue\").build()).build();\r\n    final SegmentObject segment = SegmentObject.newBuilder().setService(\"mock-service\").setServiceInstance(\"mock-instance\").addSpans(spanObject).build();\r\n    listener.parseEntry(spanObject, segment);\r\n    listener.build();\r\n    final List<ISource> receivedSources = mockReceiver.getReceivedSources();\r\n    Assertions.assertEquals(5, receivedSources.size());\r\n    final Service service = (Service) receivedSources.get(0);\r\n    final ServiceInstance serviceInstance = (ServiceInstance) receivedSources.get(1);\r\n    final ServiceRelation serviceRelation = (ServiceRelation) receivedSources.get(2);\r\n    final ServiceInstanceRelation serviceInstanceRelation = (ServiceInstanceRelation) receivedSources.get(3);\r\n    final Endpoint endpoint = (Endpoint) receivedSources.get(4);\r\n    Assertions.assertEquals(\"mock-service\", service.getName());\r\n    Assertions.assertEquals(\"/MQ/consumer\", service.getEndpointName());\r\n    Assertions.assertEquals(RequestType.MQ, service.getType());\r\n    Assertions.assertFalse(service.isStatus());\r\n    Assertions.assertEquals(\"mock-instance\", serviceInstance.getName());\r\n    Assertions.assertEquals(\"/MQ/consumer\", endpoint.getName());\r\n    Assertions.assertEquals(\"mq-server:9090\", serviceRelation.getSourceServiceName());\r\n    Assertions.assertEquals(\"mock-service\", serviceRelation.getDestServiceName());\r\n    Assertions.assertEquals(\"mq-server:9090\", serviceInstanceRelation.getSourceServiceInstanceName());\r\n    Assertions.assertEquals(\"mock-instance\", serviceInstanceRelation.getDestServiceInstanceName());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\skywalking\\oap-server\\server-receiver-plugin\\skywalking-trace-receiver-plugin\\src\\test\\java\\org\\apache\\skywalking\\oap\\server\\receiver\\trace\\provider\\parser\\listener\\segment\\ProtoBufJsonUtilsTest.java",
  "methodName" : "testProtoBuf",
  "sourceCode" : "@Test\r\npublic void testProtoBuf() throws IOException {\r\n    String json = \"{\\n\" + \"  \\\"spans\\\": [\\n\" + \"    {\\n\" + \"      \\\"operationName\\\": \\\"/tier2/lb\\\",\\n\" + \"      \\\"startTime\\\": 1582526028207,\\n\" + \"      \\\"endTime\\\": 1582526028221,\\n\" + \"      \\\"spanType\\\": \\\"Exit\\\",\\n\" + \"      \\\"spanId\\\": 1,\\n\" + \"      \\\"isError\\\": false,\\n\" + \"      \\\"parentSpanId\\\": 0,\\n\" + \"      \\\"componentId\\\": 6000,\\n\" + \"      \\\"peer\\\": \\\"User Service Name-nginx:upstream_ip:port\\\",\\n\" + \"      \\\"spanLayer\\\": \\\"Http\\\"\\n\" + \"    },\\n\" + \"    {\\n\" + \"      \\\"operationName\\\": \\\"/tier2/lb\\\",\\n\" + \"      \\\"startTime\\\": 1582526028207,\\n\" + \"      \\\"tags\\\": [\\n\" + \"        {\\n\" + \"          \\\"key\\\": \\\"http.method\\\",\\n\" + \"          \\\"value\\\": \\\"GET\\\"\\n\" + \"        },\\n\" + \"        {\\n\" + \"          \\\"key\\\": \\\"http.params\\\",\\n\" + \"          \\\"value\\\": \\\"http://127.0.0.1/tier2/lb\\\"\\n\" + \"        }\\n\" + \"      ],\\n\" + \"      \\\"endTime\\\": 1582526028221,\\n\" + \"      \\\"spanType\\\": \\\"Entry\\\",\\n\" + \"      \\\"spanId\\\": 0,\\n\" + \"      \\\"isError\\\": false,\\n\" + \"      \\\"parentSpanId\\\": -1,\\n\" + \"      \\\"componentId\\\": 6000,\\n\" + \"      \\\"refs\\\": [\\n\" + \"        {\\n\" + \"          \\\"parentTraceId\\\": \\\"abc.mocktraceid\\\",\\n\" + \"          \\\"parentTraceSegmentId\\\": \\\"abc.mocksegmentid\\\",\\n\" + \"          \\\"parentEndpointName\\\": \\\"/access/uri\\\",\\n\" + \"          \\\"parentService\\\": \\\"service\\\",\\n\" + \"          \\\"parentServiceInstance\\\": \\\"instance\\\",\\n\" + \"          \\\"networkAddress\\\": \\\"#User Service Name-nginx:upstream_ip:port\\\",\\n\" + \"          \\\"parentSpanId\\\": 1,\\n\" + \"          \\\"networkAddressUsedAtPeer\\\": \\\"127.0.0.1\\\"\\n\" + \"        }\\n\" + \"      ],\\n\" + \"      \\\"spanLayer\\\": \\\"Http\\\"\\n\" + \"    }\\n\" + \"  ],\\n\" + \"  \\\"serviceInstance\\\": \\\"instance\\\",\\n\" + \"  \\\"service\\\": \\\"service\\\",\\n\" + \"  \\\"traceSegmentId\\\": \\\"mocksegmentid\\\",\\n\" + \"  \\\"traceId\\\": \\\"mocktraceid\\\"\\n\" + \"}\";\r\n    SegmentObject.Builder segBuilder = SegmentObject.newBuilder();\r\n    ProtoBufJsonUtils.fromJSON(json, segBuilder);\r\n    SegmentObject segmentObject = segBuilder.build();\r\n    Assertions.assertEquals(\"mocktraceid\", segmentObject.getTraceId());\r\n    Assertions.assertEquals(2, segmentObject.getSpansCount());\r\n    Assertions.assertEquals(SpanLayer.Http, segmentObject.getSpans(0).getSpanLayer());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\skywalking\\oap-server\\server-receiver-plugin\\skywalking-trace-receiver-plugin\\src\\test\\java\\org\\apache\\skywalking\\oap\\server\\receiver\\trace\\provider\\parser\\listener\\segment\\ProtoBufJsonUtilsTest.java",
  "methodName" : "testToJson",
  "sourceCode" : "@Test\r\npublic void testToJson() throws IOException {\r\n    String json = \"{\\n\" + \"  \\\"commands\\\": [{\\n\" + \"  }]\\n\" + \"}\";\r\n    Command command = Command.newBuilder().build();\r\n    final Commands nextCommands = Commands.newBuilder().addCommands(command).build();\r\n    Assertions.assertEquals(json, ProtoBufJsonUtils.toJSON(nextCommands));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\skywalking\\oap-server\\server-receiver-plugin\\skywalking-zabbix-receiver-plugin\\src\\test\\java\\org\\apache\\skywalking\\oap\\server\\receiver\\zabbix\\provider\\protocol\\ZabbixProtocolHandlerTest.java",
  "methodName" : "testReceive",
  "sourceCode" : "/**\r\n * Test active tasks and agent data request and response\r\n */\r\n@Test\r\npublic void testReceive() throws Throwable {\r\n    // Verify Active Checks\r\n    writeZabbixMessage(\"{\\\"request\\\":\\\"active checks\\\",\\\"host\\\":\\\"zabbix-test-agent\\\"}\");\r\n    assertZabbixActiveChecksRequest(0, \"zabbix-test-agent\");\r\n    assertZabbixActiveChecksResponse(0, \"system.cpu.load[all,avg15]\");\r\n    // Verify Agent data\r\n    writeZabbixMessage(\"{\\\"request\\\":\\\"agent data\\\",\\\"session\\\":\\\"f32425dc61971760bf791f731931a92e\\\",\\\"data\\\":[{\\\"host\\\":\\\"zabbix-test-agent\\\",\\\"key\\\":\\\"system.cpu.load[all,avg15]\\\",\\\"value\\\":\\\"1.123\\\",\\\"id\\\":2,\\\"clock\\\":1609588563,\\\"ns\\\":87682907}],\\\"clock\\\":1609588568,\\\"ns\\\":102244476}\");\r\n    assertZabbixAgentDataRequest(1, \"zabbix-test-agent\", \"system.cpu.load[all,avg15]\");\r\n    assertZabbixAgentDataResponse(2);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\skywalking\\oap-server\\server-receiver-plugin\\skywalking-zabbix-receiver-plugin\\src\\test\\java\\org\\apache\\skywalking\\oap\\server\\receiver\\zabbix\\provider\\protocol\\ZabbixProtocolHandlerTest.java",
  "methodName" : "testErrorProtocol",
  "sourceCode" : "/**\r\n * Test error protocol\r\n */\r\n@Test\r\npublic void testErrorProtocol() throws Throwable {\r\n    // Simple header\r\n    for (int i = 1; i < 4; i++) {\r\n        assertNeedMoreInput(new byte[i]);\r\n    }\r\n    // Only header string\r\n    assertNeedMoreInput(new byte[] { 'Z', 'B', 'X', 'D' });\r\n    // Header error\r\n    assertWriteErrorProtocol(new byte[] { 'Z', 'B', 'X', 'D', 2, 0, 0, 0, 0 });\r\n    assertWriteErrorProtocol(new byte[] { 'Z', 'B', 'X', 'D', 2, 1, 0, 0, 0 });\r\n    // Need more content\r\n    assertNeedMoreInput(new byte[] { 'Z', 'B', 'X', 'D', 1, 5, 0, 0, 0, 1, 1, 1 });\r\n    // Empty data\r\n    assertWriteErrorProtocol(buildZabbixRequestData(\"\"));\r\n    assertWriteErrorProtocol(buildZabbixRequestData(\"{}\"));\r\n    assertWriteErrorProtocol(buildZabbixRequestData(\"{\\\"test\\\": 1}\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\skywalking\\oap-server\\server-receiver-plugin\\skywalking-zabbix-receiver-plugin\\src\\test\\java\\org\\apache\\skywalking\\oap\\server\\receiver\\zabbix\\provider\\ZabbixMetricsTest.java",
  "methodName" : "testReceiveMetrics",
  "sourceCode" : "@Test\r\npublic void testReceiveMetrics() throws Throwable {\r\n    // Verify Active Checks\r\n    writeZabbixMessage(\"{\\\"request\\\":\\\"active checks\\\",\\\"host\\\":\\\"test-01\\\"}\");\r\n    assertZabbixActiveChecksRequest(0, \"test-01\");\r\n    assertZabbixActiveChecksResponse(0, \"system.cpu.load[all,avg1]\", \"system.cpu.load[all,avg5]\", \"system.cpu.load[all,avg15]\", \"agent.hostname\");\r\n    // Verify Agent data\r\n    writeZabbixMessage(\"{\\\"request\\\":\\\"agent data\\\",\\\"session\\\":\\\"f32425dc61971760bf791f731931a92e\\\",\\\"data\\\":[\" + \"{\\\"host\\\":\\\"test-01\\\",\\\"key\\\":\\\"system.cpu.load[all,avg1]\\\",\\\"value\\\":\\\"1.123\\\",\\\"id\\\":2,\\\"clock\\\":1609588563,\\\"ns\\\":87682907},\" + \"{\\\"host\\\":\\\"test-01\\\",\\\"key\\\":\\\"system.cpu.load[all,avg5]\\\",\\\"value\\\":\\\"2.123\\\",\\\"id\\\":2,\\\"clock\\\":1609588563,\\\"ns\\\":87682907},\" + \"{\\\"host\\\":\\\"test-01\\\",\\\"key\\\":\\\"system.cpu.load[all,avg15]\\\",\\\"value\\\":\\\"3.123\\\",\\\"id\\\":2,\\\"clock\\\":1609588563,\\\"ns\\\":87682907},\" + \"{\\\"host\\\":\\\"test-01\\\",\\\"key\\\":\\\"agent.hostname\\\",\\\"value\\\":\\\"test-01-hostname\\\",\\\"id\\\":2,\\\"clock\\\":1609588563,\\\"ns\\\":87682907}\" + \"],\\\"clock\\\":1609588568,\\\"ns\\\":102244476}\");\r\n    assertZabbixAgentDataRequest(1, \"test-01\", \"system.cpu.load[all,avg1]\", \"system.cpu.load[all,avg5]\", \"system.cpu.load[all,avg15]\", \"agent.hostname\");\r\n    assertZabbixAgentDataResponse(2);\r\n    // Verify meter system received data\r\n    Assertions.assertEquals(1, values.size());\r\n    AvgLabeledFunction avgLabeledFunction = (AvgLabeledFunction) values.get(0);\r\n    String serviceId = IDManager.ServiceID.buildId(\"zabbix::test-01-hostname\", true);\r\n    Assertions.assertEquals(serviceId, avgLabeledFunction.getEntityId());\r\n    Assertions.assertEquals(serviceId, avgLabeledFunction.getServiceId());\r\n    Assertions.assertEquals(1, avgLabeledFunction.getSummation().get(\"{2=avg1}\"), 0.0);\r\n    Assertions.assertEquals(2, avgLabeledFunction.getSummation().get(\"{2=avg5}\"), 0.0);\r\n    Assertions.assertEquals(3, avgLabeledFunction.getSummation().get(\"{2=avg15}\"), 0.0);\r\n    Assertions.assertEquals(1, avgLabeledFunction.getCount().get(\"{2=avg1}\"), 0.0);\r\n    Assertions.assertEquals(1, avgLabeledFunction.getCount().get(\"{2=avg5}\"), 0.0);\r\n    Assertions.assertEquals(1, avgLabeledFunction.getCount().get(\"{2=avg15}\"), 0.0);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\skywalking\\oap-server\\server-starter\\src\\test\\java\\org\\apache\\skywalking\\oap\\server\\starter\\config\\ApplicationConfigLoaderTestCase.java",
  "methodName" : "testLoadConfig",
  "sourceCode" : "@Test\r\npublic void testLoadConfig() {\r\n    Properties providerConfig = applicationConfiguration.getModuleConfiguration(\"storage\").getProviderConfiguration(\"mysql\");\r\n    assertThat(providerConfig.get(\"metadataQueryMaxSize\")).isEqualTo(5000);\r\n    assertThat(providerConfig.get(\"properties\")).isInstanceOf(Properties.class);\r\n    Properties properties = (Properties) providerConfig.get(\"properties\");\r\n    assertThat(properties.get(\"jdbcUrl\")).isEqualTo(\"jdbc:mysql://localhost:3306/swtest?rewriteBatchedStatements=true&allowMultiQueries=true\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\skywalking\\oap-server\\server-starter\\src\\test\\java\\org\\apache\\skywalking\\oap\\server\\starter\\config\\ApplicationConfigLoaderTestCase.java",
  "methodName" : "testLoadStringTypeConfig",
  "sourceCode" : "@Test\r\npublic void testLoadStringTypeConfig() {\r\n    Properties providerConfig = applicationConfiguration.getModuleConfiguration(\"receiver-zipkin\").getProviderConfiguration(\"default\");\r\n    String host = (String) providerConfig.get(\"restHost\");\r\n    assertEquals(\"0.0.0.0\", host);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\skywalking\\oap-server\\server-starter\\src\\test\\java\\org\\apache\\skywalking\\oap\\server\\starter\\config\\ApplicationConfigLoaderTestCase.java",
  "methodName" : "testLoadIntegerTypeConfig",
  "sourceCode" : "@Test\r\npublic void testLoadIntegerTypeConfig() {\r\n    Properties providerConfig = applicationConfiguration.getModuleConfiguration(\"receiver-zipkin\").getProviderConfiguration(\"default\");\r\n    Integer port = (Integer) providerConfig.get(\"restPort\");\r\n    assertEquals(Integer.valueOf(9411), port);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\skywalking\\oap-server\\server-starter\\src\\test\\java\\org\\apache\\skywalking\\oap\\server\\starter\\config\\ApplicationConfigLoaderTestCase.java",
  "methodName" : "testLoadBooleanTypeConfig",
  "sourceCode" : "@Test\r\npublic void testLoadBooleanTypeConfig() {\r\n    Properties providerConfig = applicationConfiguration.getModuleConfiguration(\"core\").getProviderConfiguration(\"default\");\r\n    Boolean enableDataKeeperExecutor = (Boolean) providerConfig.get(\"enableDataKeeperExecutor\");\r\n    assertEquals(Boolean.TRUE, enableDataKeeperExecutor);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\skywalking\\oap-server\\server-starter\\src\\test\\java\\org\\apache\\skywalking\\oap\\server\\starter\\config\\ApplicationConfigLoaderTestCase.java",
  "methodName" : "testLoadSpecialStringTypeConfig",
  "sourceCode" : "@Test\r\npublic void testLoadSpecialStringTypeConfig() {\r\n    Properties providerConfig = applicationConfiguration.getModuleConfiguration(\"storage\").getProviderConfiguration(\"mysql\");\r\n    Properties properties = (Properties) providerConfig.get(\"properties\");\r\n    String password = (String) properties.get(\"dataSource.password\");\r\n    assertEquals(\"!AI!3B\", password);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\skywalking\\oap-server\\server-starter\\src\\test\\java\\org\\apache\\skywalking\\oap\\server\\starter\\UITemplateCheckerTest.java",
  "methodName" : "validateUITemplate",
  "sourceCode" : "@Test\r\npublic void validateUITemplate() throws IOException {\r\n    ObjectMapper mapper = new ObjectMapper();\r\n    mapper.enable(JsonParser.Feature.ALLOW_COMMENTS);\r\n    Set<String> dashboardIds = new HashSet<>();\r\n    Set<String> dashboardNames = new HashSet<>();\r\n    for (String folder : UITemplateInitializer.UI_TEMPLATE_FOLDER) {\r\n        File[] templateFiles = ResourceUtils.getPathFiles(\"ui-initialized-templates/\" + folder.toLowerCase(Locale.ROOT));\r\n        for (File template : templateFiles) {\r\n            JsonNode jsonNode;\r\n            try {\r\n                jsonNode = mapper.readTree(template);\r\n            } catch (Exception e) {\r\n                throw new IllegalArgumentException(\"File: \" + template.getName() + \" is not a legal json file.\", e);\r\n            }\r\n            if (jsonNode == null || jsonNode.isEmpty()) {\r\n                continue;\r\n            }\r\n            if (jsonNode.size() > 1) {\r\n                throw new IllegalArgumentException(\"File:  \" + template.getName() + \" should be only one dashboard setting json object.\");\r\n            }\r\n            JsonNode configNode = jsonNode.get(0).get(\"configuration\");\r\n            String inId = jsonNode.get(0).get(\"id\").textValue();\r\n            String inName = configNode.get(\"name\").textValue();\r\n            String inLayer = configNode.get(\"layer\").textValue();\r\n            String inEntity = configNode.get(\"entity\").textValue();\r\n            Assertions.assertFalse(dashboardIds.contains(inId), \"File: \" + template + \" has duplicate id: \" + inId);\r\n            dashboardIds.add(inId);\r\n            String nameKey = StringUtil.join('_', inLayer, inEntity, inName);\r\n            Assertions.assertFalse(dashboardNames.contains(nameKey), \"File:\" + template + \" has duplicate name: \" + inName);\r\n            dashboardNames.add(nameKey);\r\n            //Todo: implement more validation.\r\n        }\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\skywalking\\oap-server\\server-storage-plugin\\storage-banyandb-plugin\\src\\test\\java\\org\\apache\\skywalking\\oap\\server\\storage\\plugin\\banyandb\\BanyanDBIT.java",
  "methodName" : "testInstall",
  "sourceCode" : "@Test\r\npublic void testInstall() throws Exception {\r\n    DownSamplingConfigService downSamplingConfigService = new DownSamplingConfigService(Arrays.asList(\"minute\"));\r\n    ModuleManager moduleManager = mock(ModuleManager.class);\r\n    ModuleProviderHolder moduleProviderHolder = mock(ModuleProviderHolder.class);\r\n    ModuleServiceHolder moduleServiceHolder = mock(ModuleServiceHolder.class);\r\n    when(moduleManager.find(CoreModule.NAME)).thenReturn(moduleProviderHolder);\r\n    when(moduleProviderHolder.provider()).thenReturn(moduleServiceHolder);\r\n    when(moduleServiceHolder.getService(DownSamplingConfigService.class)).thenReturn(downSamplingConfigService);\r\n    StorageModels models = new StorageModels();\r\n    Model model = models.add(TestMetric.class, DefaultScopeDefine.SERVICE, new Storage(\"testMetric\", true, DownSampling.Minute));\r\n    BanyanDBIndexInstaller installer = new BanyanDBIndexInstaller(client, moduleManager, config);\r\n    installer.isExists(model);\r\n    //test Group install\r\n    BanyandbCommon.Group group = client.client.findGroup(DownSampling.Minute.getName());\r\n    assertEquals(BanyandbCommon.Catalog.CATALOG_MEASURE, group.getCatalog());\r\n    assertEquals(config.getMetricsMin().getSegmentInterval(), group.getResourceOpts().getSegmentInterval().getNum());\r\n    assertEquals(config.getMetricsMin().getShardNum(), group.getResourceOpts().getShardNum());\r\n    assertEquals(BanyandbCommon.IntervalRule.Unit.UNIT_DAY, group.getResourceOpts().getSegmentInterval().getUnit());\r\n    assertEquals(config.getMetricsMin().getTtl(), group.getResourceOpts().getTtl().getNum());\r\n    assertEquals(BanyandbCommon.IntervalRule.Unit.UNIT_DAY, group.getResourceOpts().getTtl().getUnit());\r\n    installer.createTable(model);\r\n    //test Measure install\r\n    BanyandbDatabase.Measure measure = client.client.findMeasure(\"minute\", \"testMetric_minute\");\r\n    assertEquals(\"default\", measure.getTagFamilies(0).getName());\r\n    assertEquals(\"tag\", measure.getTagFamilies(0).getTags(0).getName());\r\n    assertEquals(BanyandbDatabase.TagType.TAG_TYPE_STRING, measure.getTagFamilies(0).getTags(0).getType());\r\n    assertEquals(\"storage-only\", measure.getTagFamilies(1).getName());\r\n    assertEquals(\"service_id\", measure.getTagFamilies(1).getTags(0).getName());\r\n    assertEquals(BanyandbDatabase.TagType.TAG_TYPE_STRING, measure.getTagFamilies(1).getTags(0).getType());\r\n    assertEquals(\"service_id\", measure.getEntity().getTagNames(0));\r\n    assertEquals(\"value\", measure.getFields(0).getName());\r\n    assertEquals(BanyandbDatabase.FieldType.FIELD_TYPE_INT, measure.getFields(0).getFieldType());\r\n    //test TopNAggregation install\r\n    BanyandbDatabase.TopNAggregation topNAggregation = client.client.findTopNAggregation(\"minute\", \"testMetric_minute_topn\");\r\n    assertEquals(\"value\", topNAggregation.getFieldName());\r\n    assertEquals(\"service_id\", topNAggregation.getGroupByTagNames(0));\r\n    assertEquals(BanyandbModel.Sort.SORT_UNSPECIFIED, topNAggregation.getFieldValueSort());\r\n    assertEquals(2, topNAggregation.getLruSize());\r\n    assertEquals(1000, topNAggregation.getCountersNumber());\r\n    //test IndexRule install\r\n    BanyandbDatabase.IndexRule indexRuleTag = client.client.findIndexRule(\"minute\", \"tag\");\r\n    assertEquals(\"url\", indexRuleTag.getAnalyzer());\r\n    assertTrue(indexRuleTag.getNoSort());\r\n    //test IndexRuleBinding install\r\n    BanyandbDatabase.IndexRuleBinding indexRuleBinding = client.client.findIndexRuleBinding(\"minute\", \"testMetric_minute\");\r\n    assertEquals(\"tag\", indexRuleBinding.getRules(0));\r\n    assertEquals(\"testMetric_minute\", indexRuleBinding.getSubject().getName());\r\n    //test data query\r\n    Instant now = Instant.now();\r\n    Instant begin = now.minus(15, ChronoUnit.MINUTES);\r\n    MeasureWrite measureWrite = client.createMeasureWrite(\"minute\", \"testMetric_minute\", now.toEpochMilli());\r\n    measureWrite.tag(\"service_id\", TagAndValue.stringTagValue(\"service1\")).tag(\"tag\", TagAndValue.stringTagValue(\"tag1\")).field(\"value\", TagAndValue.longFieldValue(100));\r\n    CompletableFuture<Void> f = processor.add(measureWrite);\r\n    f.exceptionally(exp -> {\r\n        Assertions.fail(exp.getMessage());\r\n        return null;\r\n    });\r\n    f.get(10, TimeUnit.SECONDS);\r\n    MeasureQuery query = new MeasureQuery(Lists.newArrayList(\"minute\"), \"testMetric_minute\", new TimestampRange(begin.toEpochMilli(), now.plus(1, ChronoUnit.MINUTES).toEpochMilli()), ImmutableSet.of(\"service_id\", \"tag\"), ImmutableSet.of(\"value\"));\r\n    await().atMost(10, TimeUnit.SECONDS).untilAsserted(() -> {\r\n        MeasureQueryResponse resp = client.query(query);\r\n        assertNotNull(resp);\r\n        assertEquals(1, resp.getDataPoints().size());\r\n        assertEquals(\"service1\", resp.getDataPoints().get(0).getTagValue(\"service_id\"));\r\n        assertEquals(\"tag1\", resp.getDataPoints().get(0).getTagValue(\"tag\"));\r\n        assertEquals(100, (Long) resp.getDataPoints().get(0).getFieldValue(\"value\"));\r\n    });\r\n    Model updatedModel = models.add(UpdateTestMetric.class, DefaultScopeDefine.SERVICE, new Storage(\"testMetric\", true, DownSampling.Minute));\r\n    config.getMetricsMin().setShardNum(config.getMetricsDay().getShardNum() + 1);\r\n    config.getMetricsMin().setSegmentInterval(config.getMetricsDay().getSegmentInterval() + 2);\r\n    config.getMetricsMin().setTtl(config.getMetricsDay().getTtl() + 3);\r\n    BanyanDBIndexInstaller newInstaller = new BanyanDBIndexInstaller(client, moduleManager, config);\r\n    newInstaller.isExists(updatedModel);\r\n    //test Group update\r\n    BanyandbCommon.Group updatedGroup = client.client.findGroup(DownSampling.Minute.getName());\r\n    assertEquals(updatedGroup.getResourceOpts().getShardNum(), 2);\r\n    assertEquals(updatedGroup.getResourceOpts().getSegmentInterval().getNum(), 3);\r\n    assertEquals(updatedGroup.getResourceOpts().getTtl().getNum(), 33);\r\n    //test Measure update\r\n    BanyandbDatabase.Measure updatedMeasure = client.client.findMeasure(\"minute\", \"testMetric_minute\");\r\n    assertEquals(\"default\", updatedMeasure.getTagFamilies(0).getName());\r\n    assertEquals(\"tag\", updatedMeasure.getTagFamilies(0).getTags(0).getName());\r\n    assertEquals(\"new_tag\", updatedMeasure.getTagFamilies(0).getTags(1).getName());\r\n    assertEquals(BanyandbDatabase.TagType.TAG_TYPE_STRING, updatedMeasure.getTagFamilies(0).getTags(0).getType());\r\n    assertEquals(BanyandbDatabase.TagType.TAG_TYPE_STRING, updatedMeasure.getTagFamilies(0).getTags(1).getType());\r\n    assertEquals(\"storage-only\", updatedMeasure.getTagFamilies(1).getName());\r\n    assertEquals(\"service_id\", updatedMeasure.getTagFamilies(1).getTags(0).getName());\r\n    assertEquals(BanyandbDatabase.TagType.TAG_TYPE_STRING, updatedMeasure.getTagFamilies(1).getTags(0).getType());\r\n    assertEquals(\"service_id\", updatedMeasure.getEntity().getTagNames(0));\r\n    assertEquals(\"value\", updatedMeasure.getFields(0).getName());\r\n    assertEquals(BanyandbDatabase.FieldType.FIELD_TYPE_INT, updatedMeasure.getFields(0).getFieldType());\r\n    assertEquals(\"new_value\", updatedMeasure.getFields(1).getName());\r\n    assertEquals(BanyandbDatabase.FieldType.FIELD_TYPE_INT, updatedMeasure.getFields(1).getFieldType());\r\n    //test IndexRule update\r\n    BanyandbDatabase.IndexRule updatedIndexRuleTag = client.client.findIndexRule(\"minute\", \"tag\");\r\n    assertEquals(\"\", updatedIndexRuleTag.getAnalyzer());\r\n    assertFalse(updatedIndexRuleTag.getNoSort());\r\n    BanyandbDatabase.IndexRule updatedIndexRuleNewTag = client.client.findIndexRule(\"minute\", \"new_tag\");\r\n    assertTrue(updatedIndexRuleNewTag.getNoSort());\r\n    //test IndexRuleBinding update\r\n    BanyandbDatabase.IndexRuleBinding updatedIndexRuleBinding = client.client.findIndexRuleBinding(\"minute\", \"testMetric_minute\");\r\n    assertEquals(\"tag\", updatedIndexRuleBinding.getRules(0));\r\n    assertEquals(\"new_tag\", updatedIndexRuleBinding.getRules(1));\r\n    assertEquals(\"testMetric_minute\", updatedIndexRuleBinding.getSubject().getName());\r\n    //test data\r\n    client.client.updateMeasureMetadataCacheFromSever(\"minute\", \"testMetric_minute\");\r\n    MeasureWrite updatedMeasureWrite = client.createMeasureWrite(\"minute\", \"testMetric_minute\", now.plus(10, ChronoUnit.MINUTES).toEpochMilli());\r\n    updatedMeasureWrite.tag(\"service_id\", TagAndValue.stringTagValue(\"service2\")).tag(\"tag\", TagAndValue.stringTagValue(\"tag1\")).tag(\"new_tag\", TagAndValue.stringTagValue(\"new_tag1\")).field(\"value\", TagAndValue.longFieldValue(101)).field(\"new_value\", TagAndValue.longFieldValue(1000));\r\n    CompletableFuture<Void> cf = processor.add(updatedMeasureWrite);\r\n    cf.exceptionally(exp -> {\r\n        Assertions.fail(exp.getMessage());\r\n        return null;\r\n    });\r\n    cf.get(10, TimeUnit.SECONDS);\r\n    MeasureQuery updatedQuery = new MeasureQuery(Lists.newArrayList(\"minute\"), \"testMetric_minute\", new TimestampRange(begin.toEpochMilli(), now.plus(15, ChronoUnit.MINUTES).toEpochMilli()), ImmutableSet.of(\"service_id\", \"tag\", \"new_tag\"), ImmutableSet.of(\"value\", \"new_value\"));\r\n    await().atMost(10, TimeUnit.SECONDS).untilAsserted(() -> {\r\n        MeasureQueryResponse updatedResp = client.query(updatedQuery);\r\n        assertNotNull(updatedResp);\r\n        assertEquals(2, updatedResp.getDataPoints().size());\r\n        assertEquals(\"service1\", updatedResp.getDataPoints().get(0).getTagValue(\"service_id\"));\r\n        assertEquals(\"tag1\", updatedResp.getDataPoints().get(0).getTagValue(\"tag\"));\r\n        assertEquals(100, (Long) updatedResp.getDataPoints().get(0).getFieldValue(\"value\"));\r\n        assertEquals(\"service2\", updatedResp.getDataPoints().get(1).getTagValue(\"service_id\"));\r\n        assertEquals(\"tag1\", updatedResp.getDataPoints().get(1).getTagValue(\"tag\"));\r\n        assertEquals(\"new_tag1\", updatedResp.getDataPoints().get(1).getTagValue(\"new_tag\"));\r\n        assertEquals(101, (Long) updatedResp.getDataPoints().get(1).getFieldValue(\"value\"));\r\n        assertEquals(1000, (Long) updatedResp.getDataPoints().get(1).getFieldValue(\"new_value\"));\r\n    });\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\skywalking\\oap-server\\server-storage-plugin\\storage-banyandb-plugin\\src\\test\\java\\org\\apache\\skywalking\\oap\\server\\storage\\plugin\\banyandb\\util\\ByteUtilTest.java",
  "methodName" : "testConvertDoubleAndBackOnce",
  "sourceCode" : "@Test\r\npublic void testConvertDoubleAndBackOnce() {\r\n    double pi = 3.14159;\r\n    byte[] data = ByteUtil.double2Bytes(pi);\r\n    Assertions.assertEquals(8, data.length);\r\n    Assertions.assertEquals(pi, ByteUtil.bytes2Double(data), 0.00001);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\skywalking\\oap-server\\server-storage-plugin\\storage-banyandb-plugin\\src\\test\\java\\org\\apache\\skywalking\\oap\\server\\storage\\plugin\\banyandb\\util\\ByteUtilTest.java",
  "methodName" : "testConvertDoubleAndBackTwice",
  "sourceCode" : "@Test\r\npublic void testConvertDoubleAndBackTwice() {\r\n    double pi = 3.14159;\r\n    byte[] binaryPI = ByteUtil.double2Bytes(pi);\r\n    Assertions.assertEquals(8, binaryPI.length);\r\n    Assertions.assertEquals(pi, ByteUtil.bytes2Double(binaryPI), 0.00001);\r\n    double e = 2.71828;\r\n    byte[] binaryE = ByteUtil.double2Bytes(e);\r\n    Assertions.assertEquals(8, binaryE.length);\r\n    Assertions.assertEquals(e, ByteUtil.bytes2Double(binaryE), 0.00001);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\skywalking\\oap-server\\server-storage-plugin\\storage-elasticsearch-plugin\\src\\test\\java\\org\\apache\\skywalking\\oap\\server\\storage\\plugin\\elasticsearch\\base\\AnalyzerSettingTest.java",
  "methodName" : "combine",
  "sourceCode" : "@Test\r\npublic void combine() {\r\n    StorageModuleElasticsearchConfig elasticsearchConfig = new StorageModuleElasticsearchConfig();\r\n    AnalyzerSetting oapAnalyzerSetting = gson.fromJson(elasticsearchConfig.getOapAnalyzer(), AnalyzerSetting.class);\r\n    Assertions.assertEquals(oapAnalyzerSetting, getDefaultOapAnalyzer());\r\n    AnalyzerSetting oapLogAnalyzerSetting = gson.fromJson(elasticsearchConfig.getOapLogAnalyzer(), AnalyzerSetting.class);\r\n    Assertions.assertEquals(oapLogAnalyzerSetting, getDefaultOapLogAnalyzer());\r\n    AnalyzerSetting testAnalyzerSetting = gson.fromJson(ANALYZER_JSON, AnalyzerSetting.class);\r\n    Assertions.assertEquals(testAnalyzerSetting, getTestOapAnalyzerSetting());\r\n    oapAnalyzerSetting.combine(oapLogAnalyzerSetting);\r\n    oapAnalyzerSetting.combine(testAnalyzerSetting);\r\n    Assertions.assertEquals(oapAnalyzerSetting, getMergedAnalyzerSetting());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\skywalking\\oap-server\\server-storage-plugin\\storage-elasticsearch-plugin\\src\\test\\java\\org\\apache\\skywalking\\oap\\server\\storage\\plugin\\elasticsearch\\base\\ElasticSearchColumnTypeMappingTestCase.java",
  "methodName" : "test",
  "sourceCode" : "@Test\r\npublic void test() throws NoSuchFieldException {\r\n    ColumnTypeEsMapping mapping = new ColumnTypeEsMapping();\r\n    int defaultLength = 200;\r\n    boolean defaultStorageOnly = false;\r\n    Assertions.assertEquals(\"integer\", mapping.transform(int.class, int.class, defaultLength, defaultStorageOnly, null));\r\n    Assertions.assertEquals(\"integer\", mapping.transform(Integer.class, Integer.class, defaultLength, defaultStorageOnly, null));\r\n    Assertions.assertEquals(\"long\", mapping.transform(long.class, long.class, defaultLength, defaultStorageOnly, null));\r\n    Assertions.assertEquals(\"long\", mapping.transform(Long.class, Long.class, defaultLength, defaultStorageOnly, null));\r\n    Assertions.assertEquals(\"double\", mapping.transform(double.class, double.class, defaultLength, defaultStorageOnly, null));\r\n    Assertions.assertEquals(\"double\", mapping.transform(Double.class, Double.class, defaultLength, defaultStorageOnly, null));\r\n    Assertions.assertEquals(\"keyword\", mapping.transform(String.class, String.class, defaultLength, defaultStorageOnly, null));\r\n    Assertions.assertEquals(\"keyword\", mapping.transform(String.class, String.class, 100_000, defaultStorageOnly, null));\r\n    Assertions.assertEquals(\"text\", mapping.transform(String.class, String.class, 100_000, true, null));\r\n    final Type listFieldType = this.getClass().getField(\"a\").getGenericType();\r\n    Assertions.assertEquals(\"keyword\", mapping.transform(List.class, listFieldType, defaultLength, defaultStorageOnly, new ElasticSearchExtension(null, null, false, false, false)));\r\n    Assertions.assertEquals(\"keyword\", mapping.transform(IntList.class, int.class, defaultLength, defaultStorageOnly, new ElasticSearchExtension(null, null, true, false, false)));\r\n    Assertions.assertEquals(\"text\", mapping.transform(IntList.class, int.class, defaultLength, defaultStorageOnly, new ElasticSearchExtension(null, null, false, false, false)));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\skywalking\\oap-server\\server-storage-plugin\\storage-elasticsearch-plugin\\src\\test\\java\\org\\apache\\skywalking\\oap\\server\\storage\\plugin\\elasticsearch\\base\\IndexStructuresTest.java",
  "methodName" : "getMapping",
  "sourceCode" : "@Test\r\npublic void getMapping() {\r\n    IndexStructures structures = new IndexStructures();\r\n    HashMap<String, Object> properties = new HashMap<>();\r\n    properties.put(\"a\", \"b\");\r\n    properties.put(\"c\", \"d\");\r\n    structures.putStructure(\"test\", Mappings.builder().type(ElasticSearchClient.TYPE).properties(properties).build(), new HashMap<>());\r\n    Mappings mapping = structures.getMapping(\"test\");\r\n    Assertions.assertEquals(mapping.getProperties(), properties);\r\n    structures.putStructure(\"test2\", Mappings.builder().type(ElasticSearchClient.TYPE).properties(new HashMap<>()).build(), new HashMap<>());\r\n    mapping = structures.getMapping(\"test2\");\r\n    Assertions.assertTrue(mapping.getProperties().isEmpty());\r\n    //test with source\r\n    IndexStructures structuresSource = new IndexStructures();\r\n    Mappings.Source source = new Mappings.Source();\r\n    source.getExcludes().add(\"a\");\r\n    structuresSource.putStructure(\"test\", Mappings.builder().type(ElasticSearchClient.TYPE).properties(properties).source(source).build(), new HashMap<>());\r\n    Assertions.assertEquals(properties, structuresSource.getMapping(\"test\").getProperties());\r\n    Assertions.assertEquals(source.getExcludes(), structuresSource.getMapping(\"test\").getSource().getExcludes());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\skywalking\\oap-server\\server-storage-plugin\\storage-elasticsearch-plugin\\src\\test\\java\\org\\apache\\skywalking\\oap\\server\\storage\\plugin\\elasticsearch\\base\\IndexStructuresTest.java",
  "methodName" : "resolveStructure",
  "sourceCode" : "@Test\r\npublic void resolveStructure() {\r\n    IndexStructures structures = new IndexStructures();\r\n    HashMap<String, Object> properties = new HashMap<>();\r\n    properties.put(\"a\", \"b\");\r\n    properties.put(\"c\", \"d\");\r\n    structures.putStructure(\"test\", Mappings.builder().type(ElasticSearchClient.TYPE).properties(properties).source(new Mappings.Source()).build(), new HashMap<>());\r\n    Mappings mapping = structures.getMapping(\"test\");\r\n    Assertions.assertEquals(properties, mapping.getProperties());\r\n    HashMap<String, Object> properties2 = new HashMap<>();\r\n    properties2.put(\"a\", \"b\");\r\n    properties2.put(\"f\", \"g\");\r\n    structures.putStructure(\"test\", Mappings.builder().type(ElasticSearchClient.TYPE).properties(properties2).source(new Mappings.Source()).build(), new HashMap<>());\r\n    mapping = structures.getMapping(\"test\");\r\n    HashMap<String, Object> res = new HashMap<>();\r\n    res.put(\"a\", \"b\");\r\n    res.put(\"c\", \"d\");\r\n    res.put(\"f\", \"g\");\r\n    Assertions.assertEquals(res, mapping.getProperties());\r\n    //test with source\r\n    IndexStructures structuresSource = new IndexStructures();\r\n    Mappings.Source source = new Mappings.Source();\r\n    source.getExcludes().addAll(Arrays.asList(\"a\", \"b\", \"c\"));\r\n    structuresSource.putStructure(\"test\", Mappings.builder().type(ElasticSearchClient.TYPE).properties(properties).source(source).build(), new HashMap<>());\r\n    Assertions.assertEquals(properties, structuresSource.getMapping(\"test\").getProperties());\r\n    Assertions.assertEquals(source.getExcludes(), structuresSource.getMapping(\"test\").getSource().getExcludes());\r\n    Mappings.Source source2 = new Mappings.Source();\r\n    source.getExcludes().addAll(Arrays.asList(\"b\", \"c\", \"d\", \"e\"));\r\n    structuresSource.putStructure(\"test\", Mappings.builder().type(ElasticSearchClient.TYPE).properties(properties2).source(source).build(), new HashMap<>());\r\n    Assertions.assertEquals(res, structuresSource.getMapping(\"test\").getProperties());\r\n    Assertions.assertEquals(new HashSet<>(Arrays.asList(\"a\", \"b\", \"c\", \"d\", \"e\")), structuresSource.getMapping(\"test\").getSource().getExcludes());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\skywalking\\oap-server\\server-storage-plugin\\storage-elasticsearch-plugin\\src\\test\\java\\org\\apache\\skywalking\\oap\\server\\storage\\plugin\\elasticsearch\\base\\IndexStructuresTest.java",
  "methodName" : "diffMapping",
  "sourceCode" : "@Test\r\npublic void diffMapping() {\r\n    IndexStructures structures = new IndexStructures();\r\n    HashMap<String, Object> properties = new HashMap<>();\r\n    properties.put(\"a\", \"b\");\r\n    properties.put(\"c\", \"d\");\r\n    properties.put(\"f\", \"g\");\r\n    structures.putStructure(\"test\", Mappings.builder().type(ElasticSearchClient.TYPE).properties(properties).build(), new HashMap<>());\r\n    HashMap<String, Object> properties2 = new HashMap<>();\r\n    properties2.put(\"a\", \"b\");\r\n    Mappings diffMappings = structures.diffMappings(\"test\", Mappings.builder().type(ElasticSearchClient.TYPE).properties(properties2).build());\r\n    HashMap<String, Object> res = new HashMap<>();\r\n    res.put(\"c\", \"d\");\r\n    res.put(\"f\", \"g\");\r\n    Assertions.assertEquals(res, diffMappings.getProperties());\r\n    diffMappings = structures.diffMappings(\"test\", Mappings.builder().type(ElasticSearchClient.TYPE).properties(properties).build());\r\n    Assertions.assertEquals(new HashMap<>(), diffMappings.getProperties());\r\n    //test with source\r\n    IndexStructures structuresSource = new IndexStructures();\r\n    Mappings.Source source = new Mappings.Source();\r\n    source.getExcludes().addAll(Arrays.asList(\"a\", \"b\", \"c\"));\r\n    structuresSource.putStructure(\"test\", Mappings.builder().type(ElasticSearchClient.TYPE).properties(properties).source(source).build(), new HashMap<>());\r\n    diffMappings = structuresSource.diffMappings(\"test\", Mappings.builder().type(ElasticSearchClient.TYPE).properties(properties2).source(source).build());\r\n    Assertions.assertEquals(res, diffMappings.getProperties());\r\n    diffMappings = structuresSource.diffMappings(\"test\", Mappings.builder().type(ElasticSearchClient.TYPE).properties(properties2).source(source).build());\r\n    Assertions.assertEquals(res, diffMappings.getProperties());\r\n    Assertions.assertNull(diffMappings.getSource(), \"Mapping source should not be return by diffStructure()\");\r\n    diffMappings = structuresSource.diffMappings(\"test\", Mappings.builder().type(ElasticSearchClient.TYPE).properties(properties).source(source).build());\r\n    Assertions.assertEquals(new HashMap<>(), diffMappings.getProperties());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\skywalking\\oap-server\\server-storage-plugin\\storage-elasticsearch-plugin\\src\\test\\java\\org\\apache\\skywalking\\oap\\server\\storage\\plugin\\elasticsearch\\base\\IndexStructuresTest.java",
  "methodName" : "containsMapping",
  "sourceCode" : "@Test\r\npublic void containsMapping() {\r\n    IndexStructures structures = new IndexStructures();\r\n    HashMap<String, Object> properties = new HashMap<>();\r\n    properties.put(\"a\", \"b\");\r\n    properties.put(\"c\", \"d\");\r\n    properties.put(\"f\", \"g\");\r\n    structures.putStructure(\"test\", Mappings.builder().type(ElasticSearchClient.TYPE).properties(properties).source(new Mappings.Source()).build(), new HashMap<>());\r\n    HashMap<String, Object> properties2 = new HashMap<>();\r\n    properties2.put(\"a\", \"b\");\r\n    properties2.put(\"c\", \"d\");\r\n    Assertions.assertTrue(structures.containsMapping(\"test\", Mappings.builder().type(ElasticSearchClient.TYPE).properties(properties2).source(new Mappings.Source()).build()));\r\n    HashMap<String, Object> properties3 = new HashMap<>();\r\n    properties3.put(\"a\", \"b\");\r\n    properties3.put(\"q\", \"d\");\r\n    Assertions.assertFalse(structures.containsMapping(\"test\", Mappings.builder().type(ElasticSearchClient.TYPE).properties(properties3).build()));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\skywalking\\oap-server\\server-storage-plugin\\storage-elasticsearch-plugin\\src\\test\\java\\org\\apache\\skywalking\\oap\\server\\storage\\plugin\\elasticsearch\\base\\IndexStructuresTest.java",
  "methodName" : "compareIndexSetting",
  "sourceCode" : "@Test\r\npublic void compareIndexSetting() {\r\n    IndexStructures structures = new IndexStructures();\r\n    HashMap<String, Object> settings = new HashMap<>();\r\n    HashMap<String, Object> indexSettings = new HashMap<>();\r\n    settings.put(\"index\", indexSettings);\r\n    indexSettings.put(\"number_of_replicas\", \"1\");\r\n    indexSettings.put(\"number_of_shards\", \"1\");\r\n    structures.putStructure(\"test\", new Mappings(), settings);\r\n    HashMap<String, Object> settings2 = new HashMap<>();\r\n    HashMap<String, Object> indexSettings2 = new HashMap<>();\r\n    settings2.put(\"index\", indexSettings2);\r\n    indexSettings2.put(\"number_of_replicas\", \"1\");\r\n    indexSettings2.put(\"number_of_shards\", \"1\");\r\n    Assertions.assertTrue(structures.compareIndexSetting(\"test\", settings2));\r\n    HashMap<String, Object> settings3 = new HashMap<>();\r\n    HashMap<String, Object> indexSettings3 = new HashMap<>();\r\n    settings3.put(\"index\", indexSettings3);\r\n    indexSettings3.put(\"number_of_replicas\", \"1\");\r\n    indexSettings3.put(\"number_of_shards\", \"2\");\r\n    Assertions.assertFalse(structures.compareIndexSetting(\"test\", settings3));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\skywalking\\oap-server\\server-storage-plugin\\storage-elasticsearch-plugin\\src\\test\\java\\org\\apache\\skywalking\\oap\\server\\storage\\plugin\\elasticsearch\\base\\MockEsInstallTest.java",
  "methodName" : "mockEsInstallTest",
  "sourceCode" : "@ParameterizedTest(name = \"{0}\")\r\n@MethodSource(\"data\")\r\npublic void mockEsInstallTest(String name, Mappings hisMappings, Mappings newMappings, Set<String> excludes, Set<String> newExcludes, String combineResult, String diffResult, boolean contains) throws JsonProcessingException {\r\n    init(name, hisMappings, newMappings, excludes, newExcludes, combineResult, diffResult, contains);\r\n    IndexStructures structures = new IndexStructures();\r\n    //clone it since the items will be changed after combine\r\n    Mappings hisMappingsClone = cloneMappings(hisMappings);\r\n    //put the current mappings\r\n    structures.putStructure(name, hisMappings, new HashMap<>());\r\n    //if current mappings already contains new mappings items\r\n    Assertions.assertEquals(contains, structures.containsMapping(name, newMappings));\r\n    //put the new mappings and combine\r\n    structures.putStructure(name, newMappings, new HashMap<>());\r\n    Mappings mappings = structures.getMapping(name);\r\n    Assertions.assertEquals(combineResult, mapper.writeValueAsString(mappings));\r\n    //diff the hisMapping and new, if it has new item will update current index\r\n    structures.putStructure(name, newMappings, new HashMap<>());\r\n    Mappings diff = structures.diffMappings(name, hisMappingsClone);\r\n    Assertions.assertEquals(diffResult, mapper.writeValueAsString(diff));\r\n}",
  "annotations" : [ "ParameterizedTest" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\skywalking\\oap-server\\server-storage-plugin\\storage-elasticsearch-plugin\\src\\test\\java\\org\\apache\\skywalking\\oap\\server\\storage\\plugin\\elasticsearch\\base\\TimeSeriesUtilsTest.java",
  "methodName" : "testCompressTimeBucket",
  "sourceCode" : "@Test\r\npublic void testCompressTimeBucket() {\r\n    Assertions.assertEquals(20000101L, compressTimeBucket(20000105, 11));\r\n    Assertions.assertEquals(20000101L, compressTimeBucket(20000111, 11));\r\n    Assertions.assertEquals(20000112L, compressTimeBucket(20000112, 11));\r\n    Assertions.assertEquals(20000112L, compressTimeBucket(20000122, 11));\r\n    Assertions.assertEquals(20000123L, compressTimeBucket(20000123, 11));\r\n    Assertions.assertEquals(20000123L, compressTimeBucket(20000125, 11));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\skywalking\\oap-server\\server-storage-plugin\\storage-elasticsearch-plugin\\src\\test\\java\\org\\apache\\skywalking\\oap\\server\\storage\\plugin\\elasticsearch\\base\\TimeSeriesUtilsTest.java",
  "methodName" : "testIndexRolling",
  "sourceCode" : "@Test\r\npublic void testIndexRolling() {\r\n    long secondTimeBucket = 2020_0809_1010_59L;\r\n    long minuteTimeBucket = 2020_0809_1010L;\r\n    Assertions.assertEquals(\"superDatasetModel-20200809\", writeIndexName(superDatasetModel, secondTimeBucket));\r\n    Assertions.assertEquals(\"records-all-20200807\", writeIndexName(normalRecordModel, secondTimeBucket));\r\n    Assertions.assertEquals(\"metrics-all-20200807\", writeIndexName(normalMetricsModel, minuteTimeBucket));\r\n    secondTimeBucket += 1000000;\r\n    minuteTimeBucket += 10000;\r\n    Assertions.assertEquals(\"superDatasetModel-20200810\", writeIndexName(superDatasetModel, secondTimeBucket));\r\n    Assertions.assertEquals(\"records-all-20200810\", writeIndexName(normalRecordModel, secondTimeBucket));\r\n    Assertions.assertEquals(\"metrics-all-20200810\", writeIndexName(normalMetricsModel, minuteTimeBucket));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\skywalking\\oap-server\\server-storage-plugin\\storage-elasticsearch-plugin\\src\\test\\java\\org\\apache\\skywalking\\oap\\server\\storage\\plugin\\elasticsearch\\base\\TimeSeriesUtilsTest.java",
  "methodName" : "queryIndexNameTest",
  "sourceCode" : "@Test\r\npublic void queryIndexNameTest() {\r\n    Assertions.assertEquals(\"metrics-apdex-20220710\", TimeSeriesUtils.queryIndexName(\"metrics-apdex\", 20220710111111L, Step.SECOND, false, false));\r\n    Assertions.assertEquals(\"metrics-apdex-20220710\", TimeSeriesUtils.queryIndexName(\"metrics-apdex\", 202207101111L, Step.MINUTE, false, false));\r\n    Assertions.assertEquals(\"metrics-apdex-20220710\", TimeSeriesUtils.queryIndexName(\"metrics-apdex\", 2022071011L, Step.HOUR, false, false));\r\n    Assertions.assertEquals(\"metrics-apdex-20220710\", TimeSeriesUtils.queryIndexName(\"metrics-apdex\", 20220710L, Step.DAY, false, false));\r\n    Assertions.assertEquals(\"metrics-apdex-20220710\", TimeSeriesUtils.queryIndexName(\"metrics-apdex\", 20220710111111L, Step.DAY, true, true));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\skywalking\\oap-server\\server-storage-plugin\\storage-elasticsearch-plugin\\src\\test\\java\\org\\apache\\skywalking\\oap\\server\\storage\\plugin\\elasticsearch\\base\\TimeSeriesUtilsTestCase.java",
  "methodName" : "indexTimeSeries",
  "sourceCode" : "@Test\r\npublic void indexTimeSeries() {\r\n    Assertions.assertEquals(20190602, TimeSeriesUtils.isolateTimeFromIndexName(\"Index_Test-20190602\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\skywalking\\oap-server\\server-storage-plugin\\storage-elasticsearch-plugin\\src\\test\\java\\org\\apache\\skywalking\\oap\\server\\storage\\plugin\\elasticsearch\\base\\TimeSeriesUtilsTestCase.java",
  "methodName" : "querySuperDatasetIndices",
  "sourceCode" : "@Test\r\npublic void querySuperDatasetIndices() {\r\n    String[] indices = TimeSeriesUtils.superDatasetIndexNames(SegmentRecord.INDEX_NAME, 20200601140000L, 20200605140000L);\r\n    Assertions.assertEquals(indices.length, 5);\r\n    indices = TimeSeriesUtils.superDatasetIndexNames(SegmentRecord.INDEX_NAME, 20200605140000L, 20200605140000L);\r\n    Assertions.assertEquals(indices.length, 1);\r\n    indices = TimeSeriesUtils.superDatasetIndexNames(SegmentRecord.INDEX_NAME, 20200605140000L, 20200601140000L);\r\n    Assertions.assertEquals(indices.length, 1);\r\n    TimeSeriesUtils.setSUPER_DATASET_DAY_STEP(2);\r\n    indices = TimeSeriesUtils.superDatasetIndexNames(SegmentRecord.INDEX_NAME, 20200601140000L, 20200605140000L);\r\n    Assertions.assertEquals(indices.length, 3);\r\n    indices = TimeSeriesUtils.superDatasetIndexNames(SegmentRecord.INDEX_NAME, 20200605140000L, 20200605140000L);\r\n    Assertions.assertEquals(indices.length, 1);\r\n    indices = TimeSeriesUtils.superDatasetIndexNames(SegmentRecord.INDEX_NAME, 20200605140000L, 20200601140000L);\r\n    Assertions.assertEquals(indices.length, 1);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\skywalking\\oap-server\\server-storage-plugin\\storage-jdbc-hikaricp-plugin\\src\\test\\java\\org\\apache\\skywalking\\oap\\server\\storage\\plugin\\jdbc\\common\\dao\\JDBCHistoryDeleteDAOIT.java",
  "methodName" : "test",
  "sourceCode" : "@Test\r\nvoid test() throws SQLException {\r\n    // Table install should create the table.\r\n    var clock = Clock.fixed(Instant.parse(\"2023-03-17T10:00:00Z\"), ZoneId.systemDefault());\r\n    tableInstaller.createTable(model, 20230317);\r\n    var jdbcHistoryDeleteDAO = new JDBCHistoryDeleteDAO(jdbcClient, tableHelper, tableInstaller, clock);\r\n    jdbcHistoryDeleteDAO.deleteHistory(model, \"time_bucket\", 3);\r\n    try (final var conn = jdbcClient.getConnection();\r\n        final var rs = conn.getMetaData().getTables(conn.getCatalog(), conn.getSchema(), \"service_traffic_20230317\", null)) {\r\n        assertThat(rs.next()).isTrue();\r\n    }\r\n    // HistoryDeleteDAO should delete the table out of TTL.\r\n    clock = Clock.fixed(Instant.parse(\"2023-03-21T10:00:00Z\"), ZoneId.systemDefault());\r\n    jdbcHistoryDeleteDAO = new JDBCHistoryDeleteDAO(jdbcClient, tableHelper, tableInstaller, clock);\r\n    jdbcHistoryDeleteDAO.deleteHistory(model, \"time_bucket\", 3);\r\n    try (final var conn = jdbcClient.getConnection();\r\n        final var rs = conn.getMetaData().getTables(conn.getCatalog(), conn.getSchema(), \"service_traffic_20230317\", null)) {\r\n        assertThat(rs.next()).isFalse();\r\n    }\r\n    // ... and should create the new table\r\n    try (final var conn = jdbcClient.getConnection();\r\n        final var rs = conn.getMetaData().getTables(conn.getCatalog(), conn.getSchema(), \"service_traffic_20230322\", null)) {\r\n        assertThat(rs.next()).isTrue();\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\skywalking\\oap-server\\server-storage-plugin\\storage-jdbc-hikaricp-plugin\\src\\test\\java\\org\\apache\\skywalking\\oap\\server\\storage\\plugin\\jdbc\\mysql\\PreventRedistributionMySQLDriverTest.java",
  "methodName" : "TestMySQLDriverNotExist",
  "sourceCode" : "@Test\r\npublic void TestMySQLDriverNotExist() throws ClassNotFoundException {\r\n    assertThrows(ClassNotFoundException.class, () -> Class.forName(\"com.mysql.cj.jdbc.Driver\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\skywalking\\oap-server\\server-testing\\src\\test\\java\\org\\apache\\skywalking\\oap\\server\\testing\\module\\ModuleManagerTestCase.java",
  "methodName" : "test",
  "sourceCode" : "@Test\r\npublic void test() {\r\n    String moduleName = \"test\";\r\n    ModuleManagerTesting moduleManager = new ModuleManagerTesting();\r\n    ModuleDefineTesting moduleDefine = new ModuleDefineTesting();\r\n    moduleManager.put(moduleName, moduleDefine);\r\n    assertEquals(moduleDefine, moduleManager.find(moduleName));\r\n    TestServiceImpl testService = new TestServiceImpl();\r\n    moduleDefine.provider().registerServiceImplementation(TestService.class, testService);\r\n    TestService service = moduleManager.find(moduleName).provider().getService(TestService.class);\r\n    assertEquals(testService, service);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\skywalking\\oap-server\\server-tools\\data-generator\\src\\test\\java\\org\\apache\\skywalking\\generator\\IntGeneratorTest.java",
  "methodName" : "testFixedInt",
  "sourceCode" : "@Test\r\npublic void testFixedInt() {\r\n    final IntGenerator.Builder builder = new IntGenerator.Builder();\r\n    builder.setMin(1L);\r\n    builder.setMax(1L);\r\n    final IntGenerator generator = builder.build();\r\n    for (int i = 0; i < 100; i++) {\r\n        assertEquals(1, generator.next(null).intValue());\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\skywalking\\oap-server\\server-tools\\data-generator\\src\\test\\java\\org\\apache\\skywalking\\generator\\SequenceGeneratorTest.java",
  "methodName" : "testSequence",
  "sourceCode" : "@Test\r\npublic void testSequence() {\r\n    SequenceGenerator generator = new SequenceGenerator.Builder().setMin(1L).setMax(100L).build();\r\n    for (int i = 0; i < 10; i++) {\r\n        assertEquals(i + 1, generator.next(null).intValue());\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\skywalking\\oap-server\\server-tools\\data-generator\\src\\test\\java\\org\\apache\\skywalking\\generator\\SequenceGeneratorTest.java",
  "methodName" : "testFluctuation",
  "sourceCode" : "@Test\r\npublic void testFluctuation() {\r\n    SequenceGenerator generator = new SequenceGenerator.Builder().setMin(1L).setMax(100L).setFluctuation(1).build();\r\n    for (int i = 1; i < 10; i++) {\r\n        Long next = generator.next(null);\r\n        assertTrue(i <= next.intValue());\r\n        assertTrue(i * 2 >= next.intValue());\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\skywalking\\oap-server\\server-tools\\data-generator\\src\\test\\java\\org\\apache\\skywalking\\restapi\\SegmentGeneratorTest.java",
  "methodName" : "next",
  "sourceCode" : "@Test\r\nvoid next() throws URISyntaxException, IOException {\r\n    ObjectMapper objectMapper = new ObjectMapper();\r\n    URL url = getClass().getClassLoader().getResource(\"segment.tpl.json\");\r\n    assertNotNull(url);\r\n    File jsonFile = new File(url.toURI());\r\n    SegmentRequest sr = objectMapper.readValue(jsonFile, SegmentRequest.class);\r\n    sr.init(\"\");\r\n    Set<String> serviceSet = new HashSet<>();\r\n    Set<String> serviceInstanceSet = new HashSet<>();\r\n    Set<String> endpointSet = new HashSet<>();\r\n    for (int i = 0; i < 1000; i++) {\r\n        List<SegmentGenerator.SegmentResult> ss = sr.next(null);\r\n        assertFalse(ss.isEmpty());\r\n        for (SegmentGenerator.SegmentResult s : ss) {\r\n            serviceSet.add(s.segmentObject.getService());\r\n            serviceInstanceSet.add(s.segmentObject.getServiceInstance());\r\n            endpointSet.add(s.segment.getEndpointId());\r\n        }\r\n    }\r\n    assertTrue(serviceSet.size() > 1);\r\n    assertTrue(serviceSet.size() <= 10);\r\n    assertTrue(serviceInstanceSet.size() > 1);\r\n    assertTrue(serviceInstanceSet.size() <= 100);\r\n    assertTrue(endpointSet.size() > 1);\r\n    assertTrue(endpointSet.size() <= 100);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\skywalking\\oap-server\\server-tools\\profile-exporter\\tool-profile-snapshot-bootstrap\\src\\test\\java\\org\\apache\\skywalking\\oap\\server\\tool\\profile\\exporter\\test\\ProfileSnapshotExporterTest.java",
  "methodName" : "test",
  "sourceCode" : "@Test\r\npublic void test() throws IOException {\r\n    final ExporterConfig config = new ExporterConfig();\r\n    config.setTraceId(exportedData.getTraceId());\r\n    config.setTaskId(exportedData.getTaskId());\r\n    config.setAnalyzeResultDist(new File(\"\").getAbsolutePath());\r\n    // dump\r\n    final ProfiledBasicInfo basicInfo = ProfiledBasicInfo.build(config, moduleManager);\r\n    final File writeFile = ProfileSnapshotDumper.dump(basicInfo, moduleManager);\r\n    Assertions.assertTrue(writeFile != null);\r\n    Assertions.assertTrue(writeFile.exists());\r\n    // parse\r\n    final ProfileAnalyzeTimeRange timeRange = new ProfileAnalyzeTimeRange();\r\n    timeRange.setStart(exportedData.getSpans().get(0).getStart());\r\n    timeRange.setEnd(exportedData.getSpans().get(0).getEnd());\r\n    final List<ThreadSnapshot> threadSnapshots = ProfileSnapshotDumper.parseFromFileWithTimeRange(writeFile, List.of(SegmentProfileAnalyzeQuery.builder().timeRange(timeRange).build()));\r\n    Assertions.assertEquals(threadSnapshots.size(), exportedData.getSnapshots().size());\r\n    for (int i = 0; i < threadSnapshots.size(); i++) {\r\n        Assertions.assertEquals(threadSnapshots.get(i).getSequence(), i);\r\n        Assertions.assertEquals(threadSnapshots.get(i).getTime(), i * exportedData.getLimit());\r\n        final String[] snapshots = exportedData.getSnapshots().get(i).split(\"-\");\r\n        for (int snapshotIndex = 0; snapshotIndex < snapshots.length; snapshotIndex++) {\r\n            Assertions.assertEquals(threadSnapshots.get(i).getStack().getCodeSignaturesList().get(snapshotIndex), snapshots[snapshotIndex]);\r\n        }\r\n    }\r\n    writeFile.delete();\r\n}",
  "annotations" : [ "Test" ]
} ]