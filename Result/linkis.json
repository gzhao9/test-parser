[ {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-commons\\linkis-common\\src\\test\\java\\org\\apache\\linkis\\common\\commonvars\\CommonVarsTest.java",
  "methodName" : "testGetVars",
  "sourceCode" : "@Test\r\npublic void testGetVars() {\r\n    {\r\n        String testKeyNotHotload = \"wds.linkis.test___test___test.key1\";\r\n        String defaultValueNotHotload = \"defaultValueNotHotload\";\r\n        CommonVars<String> strVar1 = CommonVars.apply(testKeyNotHotload, defaultValueNotHotload);\r\n        assertEquals(defaultValueNotHotload, strVar1.defaultValue());\r\n        assertEquals(defaultValueNotHotload, strVar1.getValue());\r\n    }\r\n    {\r\n        String testKeyNotHotloadSet = \"wds.linkis.test___test___test.key2\";\r\n        String defaultValueNotHotloadSet1 = \"defaultValueNotHotloadSet1\";\r\n        String defaultValueNotHotloadSet2 = \"defaultValueNotHotloadSet2\";\r\n        String valueNotHotloadSet1 = \"valueNotHotloadSet1\";\r\n        String valueNotHotloadSet2 = \"valueNotHotloadSet2\";\r\n        CommonVars<String> strVar2 = CommonVars.apply(testKeyNotHotloadSet, defaultValueNotHotloadSet1);\r\n        assertEquals(defaultValueNotHotloadSet1, strVar2.defaultValue());\r\n        assertEquals(defaultValueNotHotloadSet1, strVar2.getValue());\r\n        BDPConfiguration.setIfNotExists(testKeyNotHotloadSet, valueNotHotloadSet1);\r\n        assertEquals(defaultValueNotHotloadSet1, strVar2.defaultValue());\r\n        //      assertEquals(valueNotHotloadSet1, strVar2.getValue());\r\n        BDPConfiguration.setIfNotExists(testKeyNotHotloadSet, valueNotHotloadSet2);\r\n        //      assertEquals(valueNotHotloadSet1, strVar2.getValue());\r\n        BDPConfiguration.set(testKeyNotHotloadSet, valueNotHotloadSet2);\r\n        assertEquals(defaultValueNotHotloadSet1, strVar2.defaultValue());\r\n        //      assertEquals(valueNotHotloadSet2, strVar2.getValue());\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-commons\\linkis-common\\src\\test\\java\\org\\apache\\linkis\\common\\commonvars\\CommonVarsTest.java",
  "methodName" : "testGetHotloadVars",
  "sourceCode" : "@Test\r\npublic void testGetHotloadVars() {\r\n    {\r\n        String testKeyHotload = \"wds.linkis.test___test___test.key1\";\r\n        String defaultValueHotload = \"defaultValueHotload\";\r\n        CommonVars<String> strVar1 = CommonVars.apply(testKeyHotload, defaultValueHotload);\r\n        assertEquals(defaultValueHotload, strVar1.defaultValue());\r\n        assertEquals(defaultValueHotload, strVar1.getValue());\r\n    }\r\n    {\r\n        String testKeyHotloadSet = \"wds.linkis.test___test___test.hotload.key2\";\r\n        String defaultValueNotHotloadSet1 = \"defaultValueNotHotloadSet1\";\r\n        String defaultValueNotHotloadSet2 = \"defaultValueNotHotloadSet2\";\r\n        String valueNotHotloadSet1 = \"valueNotHotloadSet1\";\r\n        String valueNotHotloadSet2 = \"valueNotHotloadSet2\";\r\n        CommonVars<String> strVar2 = CommonVars.apply(testKeyHotloadSet, defaultValueNotHotloadSet1);\r\n        assertEquals(defaultValueNotHotloadSet1, strVar2.defaultValue());\r\n        assertEquals(defaultValueNotHotloadSet1, strVar2.getValue());\r\n        BDPConfiguration.setIfNotExists(testKeyHotloadSet, valueNotHotloadSet1);\r\n        assertEquals(defaultValueNotHotloadSet1, strVar2.defaultValue());\r\n        //      assertEquals(valueNotHotloadSet1, strVar2.getValue());\r\n        BDPConfiguration.setIfNotExists(testKeyHotloadSet, valueNotHotloadSet2);\r\n        //      assertEquals(valueNotHotloadSet1, strVar2.getValue());\r\n        BDPConfiguration.set(testKeyHotloadSet, valueNotHotloadSet2);\r\n        assertEquals(defaultValueNotHotloadSet1, strVar2.defaultValue());\r\n        //      assertEquals(valueNotHotloadSet2, strVar2.getValue());\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-commons\\linkis-common\\src\\test\\java\\org\\apache\\linkis\\common\\conf\\BDPConfigurationTest.java",
  "methodName" : "testGetOption",
  "sourceCode" : "@Test\r\npublic void testGetOption() {\r\n    Assertions.assertEquals(\"properties支持中文\", BDPConfiguration.getOption(CommonVars.apply(\"linkis.jobhistory.error.msg.tip\", \"properties支持中文\")).get());\r\n    Assertions.assertEquals(\"properties支持中文(默认)\", BDPConfiguration.getOption(CommonVars.apply(\"linkis.jobhistory.error.msg.tip1\", \"properties支持中文(默认)\")).get());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-commons\\linkis-common\\src\\test\\java\\org\\apache\\linkis\\common\\errorcode\\ErrorCodeUtilsTest.java",
  "methodName" : "testValidateErrorCode1",
  "sourceCode" : "@Test\r\n@ExpectSystemExitWithStatus(10000)\r\npublic void testValidateErrorCode1() {\r\n    ErrorCodeUtils.validateErrorCode(1, 2, 3);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-commons\\linkis-common\\src\\test\\java\\org\\apache\\linkis\\common\\errorcode\\ErrorCodeUtilsTest.java",
  "methodName" : "testValidateErrorCode2",
  "sourceCode" : "@Test\r\n@ExpectSystemExitWithStatus(10000)\r\npublic void testValidateErrorCode2() {\r\n    ErrorCodeUtils.validateErrorCode(4, 2, 3);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-commons\\linkis-common\\src\\test\\java\\org\\apache\\linkis\\common\\errorcode\\LinkisFrameErrorCodeSummaryTest.java",
  "methodName" : "testGetErrorCode",
  "sourceCode" : "@Test\r\nvoid testGetErrorCode() {\r\n    assertEquals(10000, VALIDATE_ERROR_CODE_FAILED.getErrorCode());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-commons\\linkis-common\\src\\test\\java\\org\\apache\\linkis\\common\\errorcode\\LinkisFrameErrorCodeSummaryTest.java",
  "methodName" : "testSetErrorCode",
  "sourceCode" : "@Test\r\nvoid testSetErrorCode() {\r\n    VALIDATE_ERROR_CODE_FAILED.setErrorCode(-1);\r\n    assertEquals(-1, VALIDATE_ERROR_CODE_FAILED.getErrorCode());\r\n    VALIDATE_ERROR_CODE_FAILED.setErrorCode(10000);\r\n    assertEquals(10000, VALIDATE_ERROR_CODE_FAILED.getErrorCode());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-commons\\linkis-common\\src\\test\\java\\org\\apache\\linkis\\common\\errorcode\\LinkisFrameErrorCodeSummaryTest.java",
  "methodName" : "testGetErrorDesc",
  "sourceCode" : "@Test\r\nvoid testGetErrorDesc() {\r\n    assertEquals(\"Error code definition is incorrect(错误码定义有误)\", VALIDATE_ERROR_CODE_FAILED.getErrorDesc());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-commons\\linkis-common\\src\\test\\java\\org\\apache\\linkis\\common\\errorcode\\LinkisFrameErrorCodeSummaryTest.java",
  "methodName" : "testSetErrorDesc",
  "sourceCode" : "@Test\r\nvoid testSetErrorDesc() {\r\n    VALIDATE_ERROR_CODE_FAILED.setErrorDesc(\"test\");\r\n    assertEquals(\"test\", VALIDATE_ERROR_CODE_FAILED.getErrorDesc());\r\n    VALIDATE_ERROR_CODE_FAILED.setErrorDesc(\"Error code definition is incorrect(错误码定义有误)\");\r\n    assertEquals(\"Error code definition is incorrect(错误码定义有误)\", VALIDATE_ERROR_CODE_FAILED.getErrorDesc());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-commons\\linkis-common\\src\\test\\java\\org\\apache\\linkis\\common\\errorcode\\LinkisFrameErrorCodeSummaryTest.java",
  "methodName" : "testGetComment",
  "sourceCode" : "@Test\r\nvoid testGetComment() {\r\n    assertEquals(\"Error code definition exceeds the maximum value or is less than the minimum value(错误码定义超过最大值或者小于最小值)\", VALIDATE_ERROR_CODE_FAILED.getComment());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-commons\\linkis-common\\src\\test\\java\\org\\apache\\linkis\\common\\errorcode\\LinkisFrameErrorCodeSummaryTest.java",
  "methodName" : "testSetComment",
  "sourceCode" : "@Test\r\nvoid testSetComment() {\r\n    VALIDATE_ERROR_CODE_FAILED.setComment(\"test\");\r\n    assertEquals(\"test\", VALIDATE_ERROR_CODE_FAILED.getComment());\r\n    VALIDATE_ERROR_CODE_FAILED.setComment(\"Error code definition exceeds the maximum value or is less than the minimum value(错误码定义超过最大值或者小于最小值)\");\r\n    assertEquals(\"Error code definition exceeds the maximum value or is less than the minimum value(错误码定义超过最大值或者小于最小值)\", VALIDATE_ERROR_CODE_FAILED.getComment());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-commons\\linkis-common\\src\\test\\java\\org\\apache\\linkis\\common\\errorcode\\LinkisFrameErrorCodeSummaryTest.java",
  "methodName" : "testGetModule",
  "sourceCode" : "@Test\r\nvoid testGetModule() {\r\n    assertEquals(\"linkis-frame\", VALIDATE_ERROR_CODE_FAILED.getModule());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-commons\\linkis-common\\src\\test\\java\\org\\apache\\linkis\\common\\errorcode\\LinkisFrameErrorCodeSummaryTest.java",
  "methodName" : "testSetModule",
  "sourceCode" : "@Test\r\nvoid testSetModule() {\r\n    VALIDATE_ERROR_CODE_FAILED.setModule(\"test\");\r\n    assertEquals(\"test\", VALIDATE_ERROR_CODE_FAILED.getModule());\r\n    VALIDATE_ERROR_CODE_FAILED.setModule(\"linkis-frame\");\r\n    assertEquals(\"linkis-frame\", VALIDATE_ERROR_CODE_FAILED.getModule());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-commons\\linkis-common\\src\\test\\java\\org\\apache\\linkis\\common\\errorcode\\LinkisFrameErrorCodeSummaryTest.java",
  "methodName" : "testToString",
  "sourceCode" : "@Test\r\nvoid testToString() {\r\n    assertEquals(\"errorCode: 10000, errorDesc:Error code definition is incorrect(错误码定义有误)\", VALIDATE_ERROR_CODE_FAILED.toString());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-commons\\linkis-common\\src\\test\\java\\org\\apache\\linkis\\common\\exception\\ErrorExceptionTest.java",
  "methodName" : "testErrorException",
  "sourceCode" : "@Test\r\nvoid testErrorException() {\r\n    ErrorException errorException1 = new ErrorException(1, \"test\");\r\n    assertEquals(ExceptionLevel.ERROR, errorException1.getLevel());\r\n    assertEquals(\"test\", errorException1.getDesc());\r\n    ErrorException errorException2 = new ErrorException(3, \"test\", \"127.0.0.1\", 1234, \"serviceKind\");\r\n    assertEquals(ExceptionLevel.ERROR, errorException2.getLevel());\r\n    assertEquals(\"test\", errorException2.getDesc());\r\n    assertEquals(\"127.0.0.1\", errorException2.getIp());\r\n    assertEquals(1234, errorException2.getPort());\r\n    assertEquals(\"serviceKind\", errorException2.getServiceKind());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-commons\\linkis-common\\src\\test\\java\\org\\apache\\linkis\\common\\exception\\ErrorExceptionTest.java",
  "methodName" : "testGetLevel",
  "sourceCode" : "@Test\r\nvoid testGetLevel() {\r\n    ErrorException errorException = new ErrorException(2, \"test\");\r\n    assertEquals(ExceptionLevel.ERROR, errorException.getLevel());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-commons\\linkis-common\\src\\test\\java\\org\\apache\\linkis\\common\\exception\\ExceptionLevelTest.java",
  "methodName" : "testGetLevel",
  "sourceCode" : "@Test\r\nvoid testGetLevel() {\r\n    assertEquals(1, ExceptionLevel.WARN.getLevel());\r\n    assertEquals(2, ExceptionLevel.ERROR.getLevel());\r\n    assertEquals(3, ExceptionLevel.FATAL.getLevel());\r\n    assertEquals(4, ExceptionLevel.RETRY.getLevel());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-commons\\linkis-common\\src\\test\\java\\org\\apache\\linkis\\common\\exception\\ExceptionLevelTest.java",
  "methodName" : "testSetLevel",
  "sourceCode" : "@Test\r\nvoid testSetLevel() {\r\n    ExceptionLevel.WARN.setLevel(-1);\r\n    assertEquals(-1, ExceptionLevel.WARN.getLevel());\r\n    ExceptionLevel.WARN.setLevel(1);\r\n    assertEquals(1, ExceptionLevel.WARN.getLevel());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-commons\\linkis-common\\src\\test\\java\\org\\apache\\linkis\\common\\exception\\ExceptionLevelTest.java",
  "methodName" : "testGetName",
  "sourceCode" : "@Test\r\nvoid testGetName() {\r\n    assertEquals(\"warn\", ExceptionLevel.WARN.getName());\r\n    assertEquals(\"error\", ExceptionLevel.ERROR.getName());\r\n    assertEquals(\"fatal\", ExceptionLevel.FATAL.getName());\r\n    assertEquals(\"retry\", ExceptionLevel.RETRY.getName());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-commons\\linkis-common\\src\\test\\java\\org\\apache\\linkis\\common\\exception\\ExceptionLevelTest.java",
  "methodName" : "testSetName",
  "sourceCode" : "@Test\r\nvoid testSetName() {\r\n    ExceptionLevel.ERROR.setName(\"testError\");\r\n    assertEquals(\"testError\", ExceptionLevel.ERROR.getName());\r\n    ExceptionLevel.ERROR.setName(\"error\");\r\n    assertEquals(\"error\", ExceptionLevel.ERROR.getName());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-commons\\linkis-common\\src\\test\\java\\org\\apache\\linkis\\common\\exception\\ExceptionLevelTest.java",
  "methodName" : "testToString",
  "sourceCode" : "@Test\r\nvoid testToString() {\r\n    assertEquals(\"ExceptionLevel{level=1, name='warn'}\", ExceptionLevel.WARN.toString());\r\n    assertEquals(\"ExceptionLevel{level=2, name='error'}\", ExceptionLevel.ERROR.toString());\r\n    assertEquals(\"ExceptionLevel{level=3, name='fatal'}\", ExceptionLevel.FATAL.toString());\r\n    assertEquals(\"ExceptionLevel{level=4, name='retry'}\", ExceptionLevel.RETRY.toString());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-commons\\linkis-common\\src\\test\\java\\org\\apache\\linkis\\common\\exception\\ExceptionManagerTest.java",
  "methodName" : "testGenerateException",
  "sourceCode" : "@Test\r\nvoid testGenerateException() {\r\n    ErrorException errorException = new ErrorException(CommonErrorConstants.COMMON_ERROR(), \"The map cannot be parsed normally, \" + \"the map is empty or the LEVEL value is missing:(map不能被正常的解析，map为空或者缺少LEVEL值: )\" + \"null\");\r\n    assertEquals(errorException.getClass(), ExceptionManager.generateException(null).getClass());\r\n    assertEquals(errorException.toString(), ExceptionManager.generateException(null).toString());\r\n    Map<String, Object> map = new HashMap<>();\r\n    map.put(\"level\", null);\r\n    map.put(\"errCode\", 1);\r\n    map.put(\"desc\", \"test\");\r\n    map.put(\"ip\", LinkisException.hostname);\r\n    map.put(\"port\", LinkisException.hostPort);\r\n    map.put(\"serviceKind\", LinkisException.applicationName);\r\n    errorException.setDesc(\"The map cannot be parsed normally, \" + \"the map is empty or the LEVEL value is missing:(map不能被正常的解析，map为空或者缺少LEVEL值: )\" + map);\r\n    assertEquals(errorException.getClass(), ExceptionManager.generateException(map).getClass());\r\n    assertEquals(errorException.toString(), ExceptionManager.generateException(map).toString());\r\n    map.replace(\"level\", ERROR.getLevel());\r\n    errorException.setErrCode((Integer) map.get(\"errCode\"));\r\n    errorException.setIp(LinkisException.hostname);\r\n    errorException.setPort(LinkisException.hostPort);\r\n    errorException.setServiceKind(LinkisException.applicationName);\r\n    errorException.setDesc((String) map.get(\"desc\"));\r\n    assertEquals(errorException.getClass(), ExceptionManager.generateException(map).getClass());\r\n    assertEquals(errorException.toString(), ExceptionManager.generateException(map).toString());\r\n    map.replace(\"level\", WARN.getLevel());\r\n    WarnException warnException = new WarnException((Integer) map.get(\"errCode\"), \"test\", LinkisException.hostname, LinkisException.hostPort, LinkisException.applicationName);\r\n    assertEquals(warnException.getClass(), ExceptionManager.generateException(map).getClass());\r\n    assertEquals(warnException.toString(), ExceptionManager.generateException(map).toString());\r\n    map.replace(\"level\", FATAL.getLevel());\r\n    FatalException fatalException = new FatalException((Integer) map.get(\"errCode\"), \"test\", LinkisException.hostname, LinkisException.hostPort, LinkisException.applicationName);\r\n    assertEquals(fatalException.getClass(), ExceptionManager.generateException(map).getClass());\r\n    assertEquals(fatalException.toString(), ExceptionManager.generateException(map).toString());\r\n    map.replace(\"level\", RETRY.getLevel());\r\n    LinkisRetryException retryException = new LinkisRetryException((Integer) map.get(\"errCode\"), \"test\", LinkisException.hostname, LinkisException.hostPort, LinkisException.applicationName);\r\n    assertEquals(retryException.getClass(), ExceptionManager.generateException(map).getClass());\r\n    assertEquals(retryException.toString(), ExceptionManager.generateException(map).toString());\r\n    map.replace(\"level\", 123);\r\n    map.put(\"test\", 123);\r\n    errorException.setErrCode(CommonErrorConstants.COMMON_ERROR());\r\n    errorException.setDesc(\"Exception Map that cannot be parsed:(不能解析的异常Map：)\" + map);\r\n    assertEquals(errorException.getClass(), ExceptionManager.generateException(map).getClass());\r\n    assertEquals(errorException.toString(), ExceptionManager.generateException(map).toString());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-commons\\linkis-common\\src\\test\\java\\org\\apache\\linkis\\common\\exception\\ExceptionManagerTest.java",
  "methodName" : "unknownException",
  "sourceCode" : "@Test\r\nvoid unknownException() {\r\n    Map<String, Object> map = ExceptionManager.unknownException(\"test\");\r\n    Map<String, Object> assertMap = new HashMap<String, Object>();\r\n    assertMap.put(\"level\", ERROR.getLevel());\r\n    assertMap.put(\"errCode\", 0);\r\n    assertMap.put(\"desc\", \"test\");\r\n    assertMap.put(\"ip\", LinkisException.hostname);\r\n    assertMap.put(\"port\", LinkisException.hostPort);\r\n    assertMap.put(\"serviceKind\", LinkisException.applicationName);\r\n    assertTrue(map.equals(assertMap));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-commons\\linkis-common\\src\\test\\java\\org\\apache\\linkis\\common\\exception\\FatalExceptionTest.java",
  "methodName" : "testFatalException",
  "sourceCode" : "@Test\r\nvoid testFatalException() {\r\n    FatalException fatalException1 = new FatalException(1, \"test\");\r\n    assertEquals(ExceptionLevel.FATAL, fatalException1.getLevel());\r\n    assertEquals(\"test\", fatalException1.getDesc());\r\n    FatalException fatalException2 = new FatalException(3, \"test\", \"127.0.0.1\", 1234, \"serviceKind\");\r\n    assertEquals(ExceptionLevel.FATAL, fatalException2.getLevel());\r\n    assertEquals(\"test\", fatalException2.getDesc());\r\n    assertEquals(\"127.0.0.1\", fatalException2.getIp());\r\n    assertEquals(1234, fatalException2.getPort());\r\n    assertEquals(\"serviceKind\", fatalException2.getServiceKind());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-commons\\linkis-common\\src\\test\\java\\org\\apache\\linkis\\common\\exception\\FatalExceptionTest.java",
  "methodName" : "getLevel",
  "sourceCode" : "@Test\r\nvoid getLevel() {\r\n    FatalException fatalException = new FatalException(1, \"test\");\r\n    assertEquals(ExceptionLevel.FATAL, fatalException.getLevel());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-commons\\linkis-common\\src\\test\\java\\org\\apache\\linkis\\common\\exception\\LinkisCommonErrorExceptionTest.java",
  "methodName" : "testLinkisCommonErrorException",
  "sourceCode" : "@Test\r\nvoid testLinkisCommonErrorException() {\r\n    LinkisCommonErrorException linkisCommonErrorException = new LinkisCommonErrorException(1, \"test\");\r\n    assertEquals(LinkisCommonErrorException.class, linkisCommonErrorException.getClass());\r\n    assertTrue(linkisCommonErrorException instanceof ErrorException);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-commons\\linkis-common\\src\\test\\java\\org\\apache\\linkis\\common\\exception\\LinkisExceptionTest.java",
  "methodName" : "testGetErrCode",
  "sourceCode" : "@Test\r\nvoid testGetErrCode() {\r\n    assertEquals(1, linkisException.getErrCode());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-commons\\linkis-common\\src\\test\\java\\org\\apache\\linkis\\common\\exception\\LinkisExceptionTest.java",
  "methodName" : "testSetErrCode",
  "sourceCode" : "@Test\r\nvoid testSetErrCode() {\r\n    linkisException.setErrCode(123);\r\n    assertEquals(123, linkisException.getErrCode());\r\n    linkisException.setErrCode(1);\r\n    assertEquals(1, linkisException.getErrCode());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-commons\\linkis-common\\src\\test\\java\\org\\apache\\linkis\\common\\exception\\LinkisExceptionTest.java",
  "methodName" : "testGetDesc",
  "sourceCode" : "@Test\r\nvoid testGetDesc() {\r\n    assertEquals(\"test\", linkisException.getDesc());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-commons\\linkis-common\\src\\test\\java\\org\\apache\\linkis\\common\\exception\\LinkisExceptionTest.java",
  "methodName" : "testSetDesc",
  "sourceCode" : "@Test\r\nvoid testSetDesc() {\r\n    linkisException.setDesc(\"test2\");\r\n    assertEquals(\"test2\", linkisException.getDesc());\r\n    linkisException.setDesc(\"test\");\r\n    assertEquals(\"test\", linkisException.getDesc());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-commons\\linkis-common\\src\\test\\java\\org\\apache\\linkis\\common\\exception\\LinkisExceptionTest.java",
  "methodName" : "testGetIp",
  "sourceCode" : "@Test\r\nvoid testGetIp() {\r\n    assertEquals(\"127.0.0.1\", linkisException.getIp());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-commons\\linkis-common\\src\\test\\java\\org\\apache\\linkis\\common\\exception\\LinkisExceptionTest.java",
  "methodName" : "testSetIp",
  "sourceCode" : "@Test\r\nvoid testSetIp() {\r\n    linkisException.setIp(\"0.0.0.0\");\r\n    assertEquals(\"0.0.0.0\", linkisException.getIp());\r\n    linkisException.setIp(\"127.0.0.1\");\r\n    assertEquals(\"127.0.0.1\", linkisException.getIp());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-commons\\linkis-common\\src\\test\\java\\org\\apache\\linkis\\common\\exception\\LinkisExceptionTest.java",
  "methodName" : "testGetPort",
  "sourceCode" : "@Test\r\nvoid testGetPort() {\r\n    assertEquals(1, linkisException.getPort());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-commons\\linkis-common\\src\\test\\java\\org\\apache\\linkis\\common\\exception\\LinkisExceptionTest.java",
  "methodName" : "testSetPort",
  "sourceCode" : "@Test\r\nvoid testSetPort() {\r\n    linkisException.setPort(11);\r\n    assertEquals(11, linkisException.getPort());\r\n    linkisException.setPort(1);\r\n    assertEquals(1, linkisException.getPort());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-commons\\linkis-common\\src\\test\\java\\org\\apache\\linkis\\common\\exception\\LinkisExceptionTest.java",
  "methodName" : "testGetServiceKind",
  "sourceCode" : "@Test\r\nvoid testGetServiceKind() {\r\n    assertEquals(\"test\", linkisException.getServiceKind());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-commons\\linkis-common\\src\\test\\java\\org\\apache\\linkis\\common\\exception\\LinkisExceptionTest.java",
  "methodName" : "testSetServiceKind",
  "sourceCode" : "@Test\r\nvoid testSetServiceKind() {\r\n    linkisException.setServiceKind(\"test2\");\r\n    assertEquals(\"test2\", linkisException.getServiceKind());\r\n    linkisException.setServiceKind(\"test\");\r\n    assertEquals(\"test\", linkisException.getServiceKind());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-commons\\linkis-common\\src\\test\\java\\org\\apache\\linkis\\common\\exception\\LinkisExceptionTest.java",
  "methodName" : "toMap",
  "sourceCode" : "@Test\r\nvoid toMap() {\r\n    Map<String, Object> map = new java.util.HashMap<String, Object>();\r\n    map.put(\"level\", ExceptionLevel.ERROR.getLevel());\r\n    map.put(\"errCode\", 1);\r\n    map.put(\"desc\", \"test\");\r\n    map.put(\"ip\", \"127.0.0.1\");\r\n    map.put(\"port\", 1);\r\n    map.put(\"serviceKind\", \"test\");\r\n    assertEquals(map, linkisException.toMap());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-commons\\linkis-common\\src\\test\\java\\org\\apache\\linkis\\common\\exception\\LinkisExceptionTest.java",
  "methodName" : "testGetLevel",
  "sourceCode" : "@Test\r\nvoid testGetLevel() {\r\n    assertEquals(ExceptionLevel.ERROR, linkisException.getLevel());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-commons\\linkis-common\\src\\test\\java\\org\\apache\\linkis\\common\\exception\\LinkisExceptionTest.java",
  "methodName" : "testToString",
  "sourceCode" : "@Test\r\nvoid testToString() {\r\n    assertEquals(\"LinkisException{errCode=1, desc='test', ip='127.0.0.1', port=1, serviceKind='test'}\", linkisException.toString());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-commons\\linkis-common\\src\\test\\java\\org\\apache\\linkis\\common\\exception\\LinkisRetryExceptionTest.java",
  "methodName" : "testGetLevel",
  "sourceCode" : "@Test\r\nvoid testGetLevel() {\r\n    LinkisRetryException linkisRetryException = new LinkisRetryException(1, \"test\");\r\n    assertEquals(ExceptionLevel.RETRY, linkisRetryException.getLevel());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-commons\\linkis-common\\src\\test\\java\\org\\apache\\linkis\\common\\exception\\LinkisRuntimeExceptionTest.java",
  "methodName" : "testGetErrCode",
  "sourceCode" : "@Test\r\nvoid testGetErrCode() {\r\n    assertEquals(1, linkisRuntimeException.getErrCode());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-commons\\linkis-common\\src\\test\\java\\org\\apache\\linkis\\common\\exception\\LinkisRuntimeExceptionTest.java",
  "methodName" : "testSetErrCode",
  "sourceCode" : "@Test\r\nvoid testSetErrCode() {\r\n    linkisRuntimeException.setErrCode(123);\r\n    assertEquals(123, linkisRuntimeException.getErrCode());\r\n    linkisRuntimeException.setErrCode(1);\r\n    assertEquals(1, linkisRuntimeException.getErrCode());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-commons\\linkis-common\\src\\test\\java\\org\\apache\\linkis\\common\\exception\\LinkisRuntimeExceptionTest.java",
  "methodName" : "testGetDesc",
  "sourceCode" : "@Test\r\nvoid testGetDesc() {\r\n    assertEquals(\"test\", linkisRuntimeException.getDesc());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-commons\\linkis-common\\src\\test\\java\\org\\apache\\linkis\\common\\exception\\LinkisRuntimeExceptionTest.java",
  "methodName" : "testSetDesc",
  "sourceCode" : "@Test\r\nvoid testSetDesc() {\r\n    linkisRuntimeException.setDesc(\"test2\");\r\n    assertEquals(\"test2\", linkisRuntimeException.getDesc());\r\n    linkisRuntimeException.setDesc(\"test\");\r\n    assertEquals(\"test\", linkisRuntimeException.getDesc());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-commons\\linkis-common\\src\\test\\java\\org\\apache\\linkis\\common\\exception\\LinkisRuntimeExceptionTest.java",
  "methodName" : "testGetIp",
  "sourceCode" : "@Test\r\nvoid testGetIp() {\r\n    assertEquals(\"127.0.0.1\", linkisRuntimeException.getIp());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-commons\\linkis-common\\src\\test\\java\\org\\apache\\linkis\\common\\exception\\LinkisRuntimeExceptionTest.java",
  "methodName" : "testSetIp",
  "sourceCode" : "@Test\r\nvoid testSetIp() {\r\n    linkisRuntimeException.setIp(\"0.0.0.0\");\r\n    assertEquals(\"0.0.0.0\", linkisRuntimeException.getIp());\r\n    linkisRuntimeException.setIp(\"127.0.0.1\");\r\n    assertEquals(\"127.0.0.1\", linkisRuntimeException.getIp());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-commons\\linkis-common\\src\\test\\java\\org\\apache\\linkis\\common\\exception\\LinkisRuntimeExceptionTest.java",
  "methodName" : "testGetPort",
  "sourceCode" : "@Test\r\nvoid testGetPort() {\r\n    assertEquals(1, linkisRuntimeException.getPort());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-commons\\linkis-common\\src\\test\\java\\org\\apache\\linkis\\common\\exception\\LinkisRuntimeExceptionTest.java",
  "methodName" : "testSetPort",
  "sourceCode" : "@Test\r\nvoid testSetPort() {\r\n    linkisRuntimeException.setPort(11);\r\n    assertEquals(11, linkisRuntimeException.getPort());\r\n    linkisRuntimeException.setPort(1);\r\n    assertEquals(1, linkisRuntimeException.getPort());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-commons\\linkis-common\\src\\test\\java\\org\\apache\\linkis\\common\\exception\\LinkisRuntimeExceptionTest.java",
  "methodName" : "testGetServiceKind",
  "sourceCode" : "@Test\r\nvoid testGetServiceKind() {\r\n    assertEquals(\"test\", linkisRuntimeException.getServiceKind());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-commons\\linkis-common\\src\\test\\java\\org\\apache\\linkis\\common\\exception\\LinkisRuntimeExceptionTest.java",
  "methodName" : "testSetServiceKind",
  "sourceCode" : "@Test\r\nvoid testSetServiceKind() {\r\n    linkisRuntimeException.setServiceKind(\"test2\");\r\n    assertEquals(\"test2\", linkisRuntimeException.getServiceKind());\r\n    linkisRuntimeException.setServiceKind(\"test\");\r\n    assertEquals(\"test\", linkisRuntimeException.getServiceKind());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-commons\\linkis-common\\src\\test\\java\\org\\apache\\linkis\\common\\exception\\LinkisRuntimeExceptionTest.java",
  "methodName" : "toMap",
  "sourceCode" : "@Test\r\nvoid toMap() {\r\n    Map<String, Object> map = new java.util.HashMap<String, Object>();\r\n    map.put(\"level\", ExceptionLevel.WARN.getLevel());\r\n    map.put(\"errCode\", 1);\r\n    map.put(\"desc\", \"test\");\r\n    map.put(\"ip\", \"127.0.0.1\");\r\n    map.put(\"port\", 1);\r\n    map.put(\"serviceKind\", \"test\");\r\n    assertEquals(map, linkisRuntimeException.toMap());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-commons\\linkis-common\\src\\test\\java\\org\\apache\\linkis\\common\\exception\\LinkisRuntimeExceptionTest.java",
  "methodName" : "testGetLevel",
  "sourceCode" : "@Test\r\nvoid testGetLevel() {\r\n    assertEquals(ExceptionLevel.WARN, linkisRuntimeException.getLevel());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-commons\\linkis-common\\src\\test\\java\\org\\apache\\linkis\\common\\exception\\LinkisRuntimeExceptionTest.java",
  "methodName" : "testToString",
  "sourceCode" : "@Test\r\nvoid testToString() {\r\n    assertEquals(\"LinkisException{errCode=1, desc='test', ip='127.0.0.1', port=1, serviceKind='test'}\", linkisRuntimeException.toString());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-commons\\linkis-common\\src\\test\\java\\org\\apache\\linkis\\common\\exception\\WarnExceptionTest.java",
  "methodName" : "testWarnException",
  "sourceCode" : "@Test\r\nvoid testWarnException() {\r\n    WarnException warnException1 = new WarnException(1, \"test\");\r\n    assertEquals(ExceptionLevel.WARN, warnException1.getLevel());\r\n    assertEquals(\"test\", warnException1.getDesc());\r\n    WarnException warnException2 = new WarnException(3, \"test\", \"127.0.0.1\", 1234, \"serviceKind\");\r\n    assertEquals(ExceptionLevel.WARN, warnException2.getLevel());\r\n    assertEquals(\"test\", warnException2.getDesc());\r\n    assertEquals(\"127.0.0.1\", warnException2.getIp());\r\n    assertEquals(1234, warnException2.getPort());\r\n    assertEquals(\"serviceKind\", warnException2.getServiceKind());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-commons\\linkis-common\\src\\test\\java\\org\\apache\\linkis\\common\\exception\\WarnExceptionTest.java",
  "methodName" : "testGetLevel",
  "sourceCode" : "@Test\r\nvoid testGetLevel() {\r\n    WarnException warnException = new WarnException(2, \"test\");\r\n    assertEquals(ExceptionLevel.WARN, warnException.getLevel());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-commons\\linkis-common\\src\\test\\java\\org\\apache\\linkis\\common\\io\\FsPathTest.java",
  "methodName" : "testGetSchemaPath",
  "sourceCode" : "@Test\r\npublic void testGetSchemaPath() {\r\n    // skip os: windows\r\n    if (!FsPath.WINDOWS) {\r\n        FsPath fsPath = new FsPath(\"hdfs://localhost:9000/tmp/data\");\r\n        String schemaPath = fsPath.getSchemaPath();\r\n        Assertions.assertEquals(schemaPath, \"hdfs://localhost:9000/tmp/data\");\r\n        Assertions.assertEquals(fsPath.getPath(), \"/tmp/data\");\r\n        fsPath = new FsPath(\"hdfs:///tmp/data\");\r\n        schemaPath = fsPath.getSchemaPath();\r\n        Assertions.assertEquals(schemaPath, \"hdfs:///tmp/data\");\r\n        Assertions.assertEquals(fsPath.getPath(), \"/tmp/data\");\r\n        fsPath = new FsPath(\"oss://linkis/tmp/data\");\r\n        schemaPath = fsPath.getSchemaPath();\r\n        Assertions.assertEquals(schemaPath, \"oss://linkis/tmp/data\");\r\n        Assertions.assertEquals(fsPath.getPath(), \"/tmp/data\");\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-commons\\linkis-common\\src\\test\\java\\org\\apache\\linkis\\common\\io\\FsPathTest.java",
  "methodName" : "testGetUriString",
  "sourceCode" : "@Test\r\npublic void testGetUriString() {\r\n    // skip os: windows\r\n    if (!FsPath.WINDOWS) {\r\n        FsPath fsPath = new FsPath(\"hdfs://localhost:9000/tmp/data\");\r\n        String schemaPath = fsPath.getUriString();\r\n        Assertions.assertEquals(schemaPath, \"hdfs://localhost:9000/tmp/data\");\r\n        Assertions.assertEquals(fsPath.getPath(), \"/tmp/data\");\r\n        fsPath = new FsPath(\"hdfs:///tmp/data\");\r\n        schemaPath = fsPath.getUriString();\r\n        Assertions.assertEquals(schemaPath, \"hdfs:///tmp/data\");\r\n        Assertions.assertEquals(fsPath.getPath(), \"/tmp/data\");\r\n        fsPath = new FsPath(\"oss://linkis/tmp/data\");\r\n        schemaPath = fsPath.getUriString();\r\n        Assertions.assertEquals(schemaPath, \"oss://linkis/tmp/data\");\r\n        Assertions.assertEquals(fsPath.getPath(), \"/tmp/data\");\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-commons\\linkis-common\\src\\test\\java\\org\\apache\\linkis\\common\\utils\\ByteTimeUtilsTest.java",
  "methodName" : "byteStringAsBytes",
  "sourceCode" : "@Test\r\nvoid byteStringAsBytes() {\r\n    convertToByte.forEach((k, v) -> Assertions.assertEquals(opFunction.get(\"byteStringAsBytes\").apply(k), v));\r\n    Assertions.assertThrows(IllegalArgumentException.class, () -> opFunction.get(\"byteStringAsBytes\").apply(\"1A\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-commons\\linkis-common\\src\\test\\java\\org\\apache\\linkis\\common\\utils\\ByteTimeUtilsTest.java",
  "methodName" : "byteStringAsKb",
  "sourceCode" : "@Test\r\nvoid byteStringAsKb() {\r\n    convertToKB.forEach((k, v) -> Assertions.assertEquals(opFunction.get(\"byteStringAsKb\").apply(k), v));\r\n    Assertions.assertThrows(IllegalArgumentException.class, () -> opFunction.get(\"byteStringAsKb\").apply(\"1a\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-commons\\linkis-common\\src\\test\\java\\org\\apache\\linkis\\common\\utils\\ByteTimeUtilsTest.java",
  "methodName" : "byteStringAsMb",
  "sourceCode" : "@Test\r\nvoid byteStringAsMb() {\r\n    convertToMB.forEach((k, v) -> Assertions.assertEquals(opFunction.get(\"byteStringAsMb\").apply(k), v));\r\n    Assertions.assertThrows(IllegalArgumentException.class, () -> opFunction.get(\"byteStringAsMb\").apply(\"1c\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-commons\\linkis-common\\src\\test\\java\\org\\apache\\linkis\\common\\utils\\ByteTimeUtilsTest.java",
  "methodName" : "byteStringAsGb",
  "sourceCode" : "@Test\r\nvoid byteStringAsGb() {\r\n    convertToGB.forEach((k, v) -> Assertions.assertEquals(opFunction.get(\"byteStringAsGb\").apply(k), v));\r\n    Assertions.assertThrows(IllegalArgumentException.class, () -> opFunction.get(\"byteStringAsGb\").apply(\"1C\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-commons\\linkis-common\\src\\test\\java\\org\\apache\\linkis\\common\\utils\\SecurityUtilsTest.java",
  "methodName" : "testCheckUrl",
  "sourceCode" : "@Test\r\npublic void testCheckUrl() {\r\n    // true\r\n    String url = \"jdbc:mysql://127.0.0.1:10000/db_name\";\r\n    Assertions.assertDoesNotThrow(() -> {\r\n        SecurityUtils.checkUrl(url);\r\n    });\r\n    // false\r\n    String url1 = \"jdbc:mysql://127.0.0.1:10000/db_name?\";\r\n    Assertions.assertThrows(LinkisSecurityException.class, () -> {\r\n        SecurityUtils.checkUrl(url1);\r\n    });\r\n    // false\r\n    String url11 = \"jdbc:mysql://127.0.0.1:10000/db_name?abc\";\r\n    Assertions.assertThrows(LinkisSecurityException.class, () -> {\r\n        SecurityUtils.checkUrl(url11);\r\n    });\r\n    // true\r\n    String url2 = \"jdbc:mysql://127.0.0.1:10000/\";\r\n    Assertions.assertDoesNotThrow(() -> {\r\n        SecurityUtils.checkUrl(url2);\r\n    });\r\n    // true\r\n    String url3 = \"jdbc:mysql://127.0.0.1:10000\";\r\n    Assertions.assertDoesNotThrow(() -> {\r\n        SecurityUtils.checkUrl(url3);\r\n    });\r\n    // true\r\n    String url4 = \"JDBC:mysql://127.0.0.1:10000/db_name\";\r\n    Assertions.assertDoesNotThrow(() -> {\r\n        SecurityUtils.checkUrl(url4);\r\n    });\r\n    // true\r\n    String url5 = \"JDBC:H2://127.0.0.1:10000/db_name\";\r\n    Assertions.assertDoesNotThrow(() -> {\r\n        SecurityUtils.checkUrl(url5);\r\n    });\r\n    // true\r\n    String url6 = \"JDBC:H2://test-example.com:10000/db_name\";\r\n    Assertions.assertDoesNotThrow(() -> {\r\n        SecurityUtils.checkUrl(url6);\r\n    });\r\n    // true\r\n    String url7 = \"JDBC:H2://example.测试:10000/db_name\";\r\n    Assertions.assertDoesNotThrow(() -> {\r\n        SecurityUtils.checkUrl(url7);\r\n    });\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-commons\\linkis-common\\src\\test\\java\\org\\apache\\linkis\\common\\utils\\SecurityUtilsTest.java",
  "methodName" : "testGetUrl",
  "sourceCode" : "@Test\r\npublic void testGetUrl() {\r\n    BDPConfiguration.set(\"linkis.mysql.strong.security.enable\", \"true\");\r\n    String baseUrl = \"jdbc:mysql://127.0.0.1:10000/db_name\";\r\n    String securityStr = \"allowLoadLocalInfile=false&autoDeserialize=false&allowLocalInfile=false&allowUrlInLocalInfile=false\";\r\n    String url1 = \"jdbc:mysql://127.0.0.1:10000/db_name\";\r\n    Assertions.assertEquals(baseUrl, SecurityUtils.getJdbcUrl(url1));\r\n    String url11 = \"jdbc:mysql://127.0.0.1:10000/db_name?\";\r\n    Assertions.assertEquals(baseUrl, SecurityUtils.getJdbcUrl(url11));\r\n    String url2 = \"jdbc:mysql://127.0.0.1:10000/db_name?k1=v1&\";\r\n    Assertions.assertEquals(baseUrl + \"?k1=v1&\" + securityStr, SecurityUtils.getJdbcUrl(url2));\r\n    String url3 = \"jdbc:mysql://127.0.0.1:10000/db_name?k1=v1&k2\";\r\n    Assertions.assertEquals(baseUrl + \"?k1=v1&\" + securityStr, SecurityUtils.getJdbcUrl(url3));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-commons\\linkis-common\\src\\test\\java\\org\\apache\\linkis\\common\\utils\\SecurityUtilsTest.java",
  "methodName" : "testCheckJdbcConnParams",
  "sourceCode" : "@Test\r\npublic void testCheckJdbcConnParams() {\r\n    String host = \"127.0.0.1\";\r\n    Integer port = 3306;\r\n    String username = \"test\";\r\n    String password = \"test\";\r\n    String database = \"tdb\";\r\n    Map<String, Object> extraParams = new HashMap<>();\r\n    extraParams.put(\"k1\", \"v1\");\r\n    // match ip\r\n    Assertions.assertDoesNotThrow(() -> {\r\n        SecurityUtils.checkJdbcConnParams(host, port, username, password, database, extraParams);\r\n    });\r\n    String host1 = \"localhost\";\r\n    Assertions.assertDoesNotThrow(() -> {\r\n        SecurityUtils.checkJdbcConnParams(host1, port, username, password, database, extraParams);\r\n    });\r\n    // match domain\r\n    String host2 = \"www.apache.com\";\r\n    Assertions.assertDoesNotThrow(() -> {\r\n        SecurityUtils.checkJdbcConnParams(host2, port, username, password, database, extraParams);\r\n    });\r\n    // error host\r\n    String host3 = \"localhost:3306\";\r\n    Assertions.assertThrows(LinkisSecurityException.class, () -> {\r\n        SecurityUtils.checkJdbcConnParams(host3, port, username, password, database, extraParams);\r\n    });\r\n    String host4 = \"localhost:3306/test\";\r\n    Assertions.assertThrows(LinkisSecurityException.class, () -> {\r\n        SecurityUtils.checkJdbcConnParams(host4, port, username, password, database, extraParams);\r\n    });\r\n    // error port\r\n    Assertions.assertThrows(LinkisSecurityException.class, () -> {\r\n        SecurityUtils.checkJdbcConnParams(host, null, username, password, database, extraParams);\r\n    });\r\n    // error username\r\n    Assertions.assertThrows(LinkisSecurityException.class, () -> {\r\n        SecurityUtils.checkJdbcConnParams(host, port, \"   \", password, database, extraParams);\r\n    });\r\n    Assertions.assertThrows(LinkisSecurityException.class, () -> {\r\n        SecurityUtils.checkJdbcConnParams(host, port, null, password, database, extraParams);\r\n    });\r\n    // check database, The database name can be empty\r\n    Assertions.assertDoesNotThrow(() -> {\r\n        SecurityUtils.checkJdbcConnParams(host, port, username, password, \"   \", extraParams);\r\n    });\r\n    String database1 = \"test?k1=v1\";\r\n    Assertions.assertThrows(LinkisSecurityException.class, () -> {\r\n        SecurityUtils.checkJdbcConnParams(host, port, username, password, database1, extraParams);\r\n    });\r\n    // error param\r\n    extraParams.put(\"allowLoadLocalInfile\", \"true\");\r\n    Assertions.assertThrows(LinkisSecurityException.class, () -> {\r\n        SecurityUtils.checkJdbcConnParams(host, port, username, password, database, extraParams);\r\n    });\r\n    extraParams.clear();\r\n    extraParams.put(\"autoDeserialize\", \"true\");\r\n    Assertions.assertThrows(LinkisSecurityException.class, () -> {\r\n        SecurityUtils.checkJdbcConnParams(host, port, username, password, database, extraParams);\r\n    });\r\n    extraParams.clear();\r\n    extraParams.put(\"allowLocalInfile\", \"true\");\r\n    Assertions.assertThrows(LinkisSecurityException.class, () -> {\r\n        SecurityUtils.checkJdbcConnParams(host, port, username, password, database, extraParams);\r\n    });\r\n    extraParams.clear();\r\n    extraParams.put(\"allowUrlInLocalInfile\", \"false\");\r\n    Assertions.assertThrows(LinkisSecurityException.class, () -> {\r\n        SecurityUtils.checkJdbcConnParams(host, port, username, password, database, extraParams);\r\n    });\r\n    extraParams.clear();\r\n    extraParams.put(\"allowLocalInfil%65\", \"true\");\r\n    Assertions.assertThrows(LinkisSecurityException.class, () -> {\r\n        SecurityUtils.checkJdbcConnParams(host, port, username, password, database, extraParams);\r\n    });\r\n    extraParams.clear();\r\n    extraParams.put(\"#\", \"true\");\r\n    Assertions.assertThrows(LinkisSecurityException.class, () -> {\r\n        SecurityUtils.checkJdbcConnParams(host, port, username, password, database, extraParams);\r\n    });\r\n    extraParams.clear();\r\n    extraParams.put(\"test\", \"#\");\r\n    Assertions.assertThrows(LinkisSecurityException.class, () -> {\r\n        SecurityUtils.checkJdbcConnParams(host, port, username, password, database, extraParams);\r\n    });\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-commons\\linkis-common\\src\\test\\java\\org\\apache\\linkis\\common\\utils\\SecurityUtilsTest.java",
  "methodName" : "testCheckJdbcConnUrl",
  "sourceCode" : "@Test\r\npublic void testCheckJdbcConnUrl() {\r\n    // true\r\n    String url = \"jdbc:mysql://127.0.0.1:10000/db_name\";\r\n    Assertions.assertDoesNotThrow(() -> {\r\n        SecurityUtils.checkJdbcConnUrl(url);\r\n    });\r\n    // true\r\n    String url1 = \"jdbc:mysql://127.0.0.1:10000/db_name?\";\r\n    Assertions.assertDoesNotThrow(() -> {\r\n        SecurityUtils.checkJdbcConnUrl(url1);\r\n    });\r\n    // true\r\n    String url11 = \"jdbc:mysql://127.0.0.1/db_name?\";\r\n    Assertions.assertDoesNotThrow(() -> {\r\n        SecurityUtils.checkJdbcConnUrl(url11);\r\n    });\r\n    // true\r\n    String url2 = \"JDBC:mysql://127.0.0.1:10000/db_name?\";\r\n    Assertions.assertDoesNotThrow(() -> {\r\n        SecurityUtils.checkJdbcConnUrl(url2);\r\n    });\r\n    // true\r\n    String url21 = \"JDBC:h2://127.0.0.1:10000/db_name?\";\r\n    Assertions.assertDoesNotThrow(() -> {\r\n        SecurityUtils.checkJdbcConnUrl(url21);\r\n    });\r\n    // true\r\n    String url3 = \"jdbc:mysql://127.0.0.1:10000/db_name?p1=v1\";\r\n    Assertions.assertDoesNotThrow(() -> {\r\n        SecurityUtils.checkJdbcConnUrl(url3);\r\n    });\r\n    // false url error\r\n    String url33 = \"jdbc:mysql://127.0.0.1:10000:/db_name?jdbc:mysql://127.0.0.1:10000?allowLocalInfile=true\";\r\n    Assertions.assertThrows(LinkisSecurityException.class, () -> {\r\n        SecurityUtils.checkJdbcConnUrl(url33);\r\n    });\r\n    // false key is not security\r\n    String url4 = \"jdbc:mysql://127.0.0.1:10000/db_name?p1=v1&allowLocalInfile=true\";\r\n    Assertions.assertThrows(LinkisSecurityException.class, () -> {\r\n        SecurityUtils.checkJdbcConnUrl(url4);\r\n    });\r\n    // false value is not security\r\n    String url5 = \"jdbc:mysql://127.0.0.1:10000/db_name?p1=allowLocalInfile\";\r\n    Assertions.assertThrows(LinkisSecurityException.class, () -> {\r\n        SecurityUtils.checkJdbcConnUrl(url5);\r\n    });\r\n    // false contains #\r\n    String url6 = \"jdbc:mysql://127.0.0.1:10000/db_name?p1=v1&#p2=v2\";\r\n    Assertions.assertThrows(LinkisSecurityException.class, () -> {\r\n        SecurityUtils.checkJdbcConnUrl(url6);\r\n    });\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-commons\\linkis-common\\src\\test\\java\\org\\apache\\linkis\\common\\utils\\SecurityUtilsTest.java",
  "methodName" : "testAppendMysqlForceParamsExtraParams",
  "sourceCode" : "@Test\r\npublic void testAppendMysqlForceParamsExtraParams() {\r\n    Map<String, Object> extraParams = new HashMap<>();\r\n    extraParams.put(\"testKey\", \"testValue\");\r\n    SecurityUtils.appendMysqlForceParams(extraParams);\r\n    Assertions.assertEquals(\"false\", extraParams.get(\"allowLoadLocalInfile\"));\r\n    Assertions.assertEquals(\"false\", extraParams.get(\"autoDeserialize\"));\r\n    Assertions.assertEquals(\"false\", extraParams.get(\"allowLocalInfile\"));\r\n    Assertions.assertEquals(\"false\", extraParams.get(\"allowUrlInLocalInfile\"));\r\n    Assertions.assertEquals(\"testValue\", extraParams.get(\"testKey\"));\r\n    Assertions.assertEquals(null, extraParams.get(\"otherKey\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-commons\\linkis-common\\src\\test\\java\\org\\apache\\linkis\\common\\utils\\SecurityUtilsTest.java",
  "methodName" : "testMapToString",
  "sourceCode" : "@Test\r\npublic void testMapToString() {\r\n    Map<String, Object> paramsMap = new HashMap<>();\r\n    paramsMap.put(\"p1\", \"v1\");\r\n    String str = SecurityUtils.parseParamsMapToMysqlParamUrl(paramsMap);\r\n    Assertions.assertEquals(\"p1=v1\", str);\r\n    paramsMap.clear();\r\n    str = SecurityUtils.parseParamsMapToMysqlParamUrl(paramsMap);\r\n    Assertions.assertEquals(\"\", str);\r\n    str = SecurityUtils.parseParamsMapToMysqlParamUrl(null);\r\n    Assertions.assertEquals(\"\", str);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-commons\\linkis-common\\src\\test\\java\\org\\apache\\linkis\\common\\variable\\VariableOperationTest.java",
  "methodName" : "testSqlFormat",
  "sourceCode" : "@Test\r\npublic void testSqlFormat() throws VariableOperationFailedException {\r\n    String jsonOld = \"select \\n\" + \"\\\"&{yyyy-MM}\\\"\";\r\n    String jsonNew = VariableOperationUtils.replaces(zonedDateTime, jsonOld);\r\n    System.out.println(jsonNew);\r\n    assertEquals(jsonNew, \"select \\n\" + \"\\\"2022-04\\\"\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-commons\\linkis-common\\src\\test\\java\\org\\apache\\linkis\\common\\variable\\VariableOperationTest.java",
  "methodName" : "testJsonFormat",
  "sourceCode" : "@Test\r\npublic void testJsonFormat() throws VariableOperationFailedException {\r\n    String jsonOld = \"{\\\"name\\\":\\\"&{yyyyMMdd%-1d}\\\",\\\"address\\\":{\\\"street\\\":\\\"&{yyyyMMdd%-1y}\\\"},\\\"links\\\":[{\\\"name\\\":\\\"&{yyyyMMdd%-1M}\\\"}]}\";\r\n    String jsonNew = VariableOperationUtils.replaces(zonedDateTime, jsonOld);\r\n    System.out.println(jsonOld + \"\\n\" + jsonNew);\r\n    assertEquals(jsonNew, \"{\\\"name\\\":\\\"\\\\\\\"20220401\\\\\\\"\\\",\\\"address\\\":{\\\"street\\\":\\\"\\\\\\\"20210402\\\\\\\"\\\"},\\\"links\\\":[{\\\"name\\\":\\\"\\\\\\\"20220302\\\\\\\"\\\"}]}\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-commons\\linkis-common\\src\\test\\java\\org\\apache\\linkis\\common\\variable\\VariableOperationTest.java",
  "methodName" : "testJsonArrayFormat",
  "sourceCode" : "@Test\r\npublic void testJsonArrayFormat() throws VariableOperationFailedException {\r\n    String jsonOld = \"[{\\\"name\\\":[\\\"&{yyyyMMdd%-1d}\\\"],\\\"address\\\":[\\\"&{yyyyMMdd%-1d}\\\"]}]\";\r\n    String jsonNew = VariableOperationUtils.replaces(zonedDateTime, jsonOld);\r\n    System.out.println(jsonOld + \"\\n\" + jsonNew);\r\n    assertEquals(jsonNew, \"[{\\\"name\\\":[\\\"\\\\\\\"20220401\\\\\\\"\\\"],\\\"address\\\":[\\\"\\\\\\\"20220401\\\\\\\"\\\"]}]\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-commons\\linkis-common\\src\\test\\java\\org\\apache\\linkis\\common\\variable\\VariableOperationTest.java",
  "methodName" : "testTextFormat",
  "sourceCode" : "@Test\r\npublic void testTextFormat() throws VariableOperationFailedException {\r\n    String strOld = \"abc&{yyyyMMdd%-1d}def\";\r\n    String strNew = VariableOperationUtils.replaces(zonedDateTime, strOld);\r\n    System.out.println(strOld + \"\\n\" + strNew);\r\n    assertEquals(strNew, \"abc20220401def\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-commons\\linkis-common\\src\\test\\java\\org\\apache\\linkis\\common\\variable\\VariableOperationTest.java",
  "methodName" : "testText2Format",
  "sourceCode" : "@Test\r\npublic void testText2Format() throws VariableOperationFailedException {\r\n    String str = \"dss_autotest.demo_data{ds=20220516}\";\r\n    String strNew = VariableOperationUtils.replaces(zonedDateTime, str);\r\n    assertEquals(strNew, str);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-commons\\linkis-common\\src\\test\\java\\org\\apache\\linkis\\common\\variable\\VariableOperationTest.java",
  "methodName" : "testText3Format",
  "sourceCode" : "@Test\r\npublic void testText3Format() throws VariableOperationFailedException {\r\n    String str = \"dss_autotest.demo_data${a1}\";\r\n    String strNew = VariableOperationUtils.replaces(zonedDateTime, str);\r\n    assertEquals(strNew, str);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-commons\\linkis-common\\src\\test\\java\\org\\apache\\linkis\\common\\variable\\VariableOperationTest.java",
  "methodName" : "testJsonFormatThread",
  "sourceCode" : "@Test\r\npublic void testJsonFormatThread() throws Exception {\r\n    String jsonOld = \"hql|show tables\\n\" + \"hql|show tables\\n\" + \"hql|show tables\\n\" + \"hql|show tables\\n\" + \"hql|show tables\\n\" + \"scala|val s=sqlContext.sql(\\\\\\\"show tables\\\\\\\")\\\\nshow(s)\\\\n\\n\" + \"shell|sleep 100\\\\nfunction example {\\\\n echo $[$(date +%s%N)/1000000]\\\\n}\\n\" + \"shell|ifconfig\\n\" + \"shell|echo ${f}|\\\"variable\\\":{\\\"f\\\":\\\"linkis\\\"}\\n\" + \"python|print(\\\\\\\"：hello world\\\\\\\") \\\\ndef world(id):\\\\n     print(id); \\\\n     world(${f})|\\\"variable\\\":{\\\"f\\\":\\\"36\\\"}\\n\" + \"python|#!/usr/bin/python\\\\n# -*- coding:utf-8 -*-\\\\nimport time\\\\nimport sys,os\\\\nimport json\\\\n\\\\nargs='{\\\\\\\"user_name\\\\\\\": \\\\\\\"zychen\\\\\\\"}'\\\\nprint(args)\\\\ndict = json.loads(args)\\\\nusername = dict.get(\\\\\\\"user_name\\\\\\\")\\\\nprint(username)\\n\" + \"python|import sys\\\\nprint (\\\\\\\"Python Version {}\\\\\\\".format(str(sys.version).replace('\\\\\\\\n', '')))\";\r\n    ExecutorService threadPool = Executors.newFixedThreadPool(10);\r\n    for (int i = 0; i < 10; i++) {\r\n        threadPool.execute(() -> {\r\n            try {\r\n                String jsonNew = VariableOperationUtils.replaces(zonedDateTime, jsonOld);\r\n                assertEquals(jsonNew, jsonOld);\r\n            } catch (VariableOperationFailedException e) {\r\n                e.printStackTrace();\r\n                throw new RuntimeException(e);\r\n            }\r\n        });\r\n    }\r\n    threadPool.shutdown();\r\n    while (!threadPool.isTerminated()) {\r\n        Thread.sleep(1000);\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-commons\\linkis-hadoop-common\\src\\test\\java\\org\\apache\\linkis\\hadoop\\common\\utils\\KerberosUtilsTest.java",
  "methodName" : "getKerberosRefreshIntervalTest",
  "sourceCode" : "@Test\r\n@DisplayName(\"getKerberosRefreshIntervalTest\")\r\npublic void getKerberosRefreshIntervalTest() {\r\n    Long refreshInterval = KerberosUtils.getKerberosRefreshInterval();\r\n    Assertions.assertTrue(43200L == refreshInterval.longValue());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-commons\\linkis-hadoop-common\\src\\test\\java\\org\\apache\\linkis\\hadoop\\common\\utils\\KerberosUtilsTest.java",
  "methodName" : "kinitFailTimesThresholdTest",
  "sourceCode" : "@Test\r\n@DisplayName(\"kinitFailTimesThresholdTest\")\r\npublic void kinitFailTimesThresholdTest() {\r\n    Integer timesThreshold = KerberosUtils.kinitFailTimesThreshold();\r\n    Assertions.assertTrue(5 == timesThreshold.intValue());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-commons\\linkis-module\\src\\test\\java\\org\\apache\\linkis\\errorcode\\LinkisModuleErrorCodeSummaryTest.java",
  "methodName" : "enumTest",
  "sourceCode" : "@Test\r\n@DisplayName(\"enumTest\")\r\npublic void enumTest() {\r\n    Assertions.assertEquals(10010, LinkisModuleErrorCodeSummary.DATAWORKCLOUD_MUST_VERSION.getErrorCode());\r\n    Assertions.assertEquals(10021, LinkisModuleErrorCodeSummary.FETCH_MAPCACHE_ERROR.getErrorCode());\r\n    Assertions.assertEquals(10050, LinkisModuleErrorCodeSummary.NOT_EXISTS_APPLICATION.getErrorCode());\r\n    Assertions.assertEquals(11000, LinkisModuleErrorCodeSummary.HAVE_NOT_SET.getErrorCode());\r\n    Assertions.assertEquals(11001, LinkisModuleErrorCodeSummary.VERIFICATION_CANNOT_EMPTY.getErrorCode());\r\n    Assertions.assertEquals(11002, LinkisModuleErrorCodeSummary.LOGGED_ID.getErrorCode());\r\n    Assertions.assertEquals(11002, LinkisModuleErrorCodeSummary.NOT_LOGGED.getErrorCode());\r\n    Assertions.assertEquals(11003, LinkisModuleErrorCodeSummary.ILLEGAL_ID.getErrorCode());\r\n    Assertions.assertEquals(11003, LinkisModuleErrorCodeSummary.ILLEGAL_USER_TOKEN.getErrorCode());\r\n    Assertions.assertEquals(11004, LinkisModuleErrorCodeSummary.SERVERSOCKET_NOT_EXIST.getErrorCode());\r\n    Assertions.assertEquals(11005, LinkisModuleErrorCodeSummary.WEBSOCKET_IS_FULL.getErrorCode());\r\n    Assertions.assertEquals(11035, LinkisModuleErrorCodeSummary.WEBSOCKET_STOPPED.getErrorCode());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-commons\\linkis-module\\src\\test\\java\\org\\apache\\linkis\\server\\utils\\AopTargetUtilsTest.java",
  "methodName" : "getTargetTest",
  "sourceCode" : "@Test\r\n@DisplayName(\"getTargetTest\")\r\npublic void getTargetTest() throws Exception {\r\n    Object target = AopTargetUtils.getTarget(new Object());\r\n    Assertions.assertNotNull(target);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-commons\\linkis-mybatis\\src\\test\\java\\org\\apache\\linkis\\mybatis\\conf\\MybatisConfigurationTest.java",
  "methodName" : "constTest",
  "sourceCode" : "@Test\r\n@DisplayName(\"constTest\")\r\npublic void constTest() {\r\n    String bdpServerMybatisMapperLocations = MybatisConfiguration.BDP_SERVER_MYBATIS_MAPPER_LOCATIONS.getValue();\r\n    String bdpServerMybatisTypealiasespackage = MybatisConfiguration.BDP_SERVER_MYBATIS_TYPEALIASESPACKAGE.getValue();\r\n    String bdpServerMybatisConfiglocation = MybatisConfiguration.BDP_SERVER_MYBATIS_CONFIGLOCATION.getValue();\r\n    String bdpServerMybatisBasepackage = MybatisConfiguration.BDP_SERVER_MYBATIS_BASEPACKAGE.getValue();\r\n    String bdpServerMybatisDatasourceUrl = MybatisConfiguration.BDP_SERVER_MYBATIS_DATASOURCE_URL.getValue();\r\n    String bdpServerMybatisDatasourceUsername = MybatisConfiguration.BDP_SERVER_MYBATIS_DATASOURCE_USERNAME.getValue();\r\n    String bdpServerMybatisDatasourceDriverClassName = MybatisConfiguration.BDP_SERVER_MYBATIS_DATASOURCE_DRIVER_CLASS_NAME.getValue();\r\n    Integer bdpServerMybatisDatasourceInitialsize = MybatisConfiguration.BDP_SERVER_MYBATIS_DATASOURCE_INITIALSIZE.getValue();\r\n    Integer bdpServerMybatisDatasourceMinidle = MybatisConfiguration.BDP_SERVER_MYBATIS_DATASOURCE_MINIDLE.getValue();\r\n    Integer bdpServerMybatisDatasourceMaxactive = MybatisConfiguration.BDP_SERVER_MYBATIS_DATASOURCE_MAXACTIVE.getValue();\r\n    Integer bdpServerMybatisDatasourceMaxwait = MybatisConfiguration.BDP_SERVER_MYBATIS_DATASOURCE_MAXWAIT.getValue();\r\n    Integer bdpServerMybatisDatasourceTberm = MybatisConfiguration.BDP_SERVER_MYBATIS_DATASOURCE_TBERM.getValue();\r\n    Integer bdpServerMybatisDatasourceMeitm = MybatisConfiguration.BDP_SERVER_MYBATIS_DATASOURCE_MEITM.getValue();\r\n    String bdpServerMybatisDatasourceValidationquery = MybatisConfiguration.BDP_SERVER_MYBATIS_DATASOURCE_VALIDATIONQUERY.getValue();\r\n    Assertions.assertEquals(\"\", bdpServerMybatisMapperLocations);\r\n    Assertions.assertEquals(\"\", bdpServerMybatisTypealiasespackage);\r\n    Assertions.assertEquals(\"classpath:/mybatis-config.xml\", bdpServerMybatisConfiglocation);\r\n    Assertions.assertEquals(\"\", bdpServerMybatisBasepackage);\r\n    Assertions.assertEquals(\"\", bdpServerMybatisDatasourceUrl);\r\n    Assertions.assertEquals(\"\", bdpServerMybatisDatasourceUsername);\r\n    Assertions.assertEquals(\"com.mysql.jdbc.Driver\", bdpServerMybatisDatasourceDriverClassName);\r\n    Assertions.assertTrue(1 == bdpServerMybatisDatasourceInitialsize.intValue());\r\n    Assertions.assertTrue(1 == bdpServerMybatisDatasourceMinidle.intValue());\r\n    Assertions.assertTrue(20 == bdpServerMybatisDatasourceMaxactive.intValue());\r\n    Assertions.assertTrue(6000 == bdpServerMybatisDatasourceMaxwait.intValue());\r\n    Assertions.assertTrue(60000 == bdpServerMybatisDatasourceTberm.intValue());\r\n    Assertions.assertTrue(300000 == bdpServerMybatisDatasourceMeitm.intValue());\r\n    Assertions.assertEquals(\"SELECT 1\", bdpServerMybatisDatasourceValidationquery);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-commons\\linkis-mybatis\\src\\test\\java\\org\\apache\\linkis\\mybatis\\DataSourceUtilsTest.java",
  "methodName" : "buildDataSourceTest",
  "sourceCode" : "@Test\r\n@DisplayName(\"buildDataSourceTest\")\r\npublic void buildDataSourceTest() {\r\n    DataSource dataSource = DataSourceUtils.buildDataSource(\"127.0.0.1\", \"hadoop\", \"hadoop\");\r\n    Assertions.assertNotNull(dataSource);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-commons\\linkis-protocol\\src\\test\\java\\org\\apache\\linkis\\protocol\\constants\\TaskConstantTest.java",
  "methodName" : "constTest",
  "sourceCode" : "@Test\r\n@DisplayName(\"constTest\")\r\npublic void constTest() {\r\n    String umuser = TaskConstant.UMUSER;\r\n    String submitUser = TaskConstant.SUBMIT_USER;\r\n    String executeUser = TaskConstant.EXECUTE_USER;\r\n    String tasktype = TaskConstant.TASKTYPE;\r\n    String executioncode = TaskConstant.EXECUTIONCODE;\r\n    String jobContent = TaskConstant.JOB_CONTENT;\r\n    String task = TaskConstant.TASK;\r\n    String tasks = TaskConstant.TASKS;\r\n    String params = TaskConstant.PARAMS;\r\n    String formatcode = TaskConstant.FORMATCODE;\r\n    String executeapplicationname = TaskConstant.EXECUTEAPPLICATIONNAME;\r\n    String requestapplicationname = TaskConstant.REQUESTAPPLICATIONNAME;\r\n    String scriptpath = TaskConstant.SCRIPTPATH;\r\n    String source = TaskConstant.SOURCE;\r\n    String runtype = TaskConstant.RUNTYPE;\r\n    String cache = TaskConstant.CACHE;\r\n    String paramsVariable = TaskConstant.PARAMS_VARIABLE;\r\n    String paramsConfiguration = TaskConstant.PARAMS_CONFIGURATION;\r\n    String paramsConfigurationStartup = TaskConstant.PARAMS_CONFIGURATION_STARTUP;\r\n    String paramsConfigurationRuntime = TaskConstant.PARAMS_CONFIGURATION_RUNTIME;\r\n    String paramsConfigurationSpecial = TaskConstant.PARAMS_CONFIGURATION_SPECIAL;\r\n    Assertions.assertEquals(\"umUser\", umuser);\r\n    Assertions.assertEquals(\"submitUser\", submitUser);\r\n    Assertions.assertEquals(\"executeUser\", executeUser);\r\n    Assertions.assertEquals(\"taskType\", tasktype);\r\n    Assertions.assertEquals(\"executionCode\", executioncode);\r\n    Assertions.assertEquals(\"jobContent\", jobContent);\r\n    Assertions.assertEquals(\"task\", task);\r\n    Assertions.assertEquals(\"tasks\", tasks);\r\n    Assertions.assertEquals(\"params\", params);\r\n    Assertions.assertEquals(\"formatCode\", formatcode);\r\n    Assertions.assertEquals(\"executeApplicationName\", executeapplicationname);\r\n    Assertions.assertEquals(\"requestApplicationName\", requestapplicationname);\r\n    Assertions.assertEquals(\"scriptPath\", scriptpath);\r\n    Assertions.assertEquals(\"source\", source);\r\n    Assertions.assertEquals(\"runType\", runtype);\r\n    Assertions.assertEquals(\"cache\", cache);\r\n    Assertions.assertEquals(\"variable\", paramsVariable);\r\n    Assertions.assertEquals(\"configuration\", paramsConfiguration);\r\n    Assertions.assertEquals(\"startup\", paramsConfigurationStartup);\r\n    Assertions.assertEquals(\"runtime\", paramsConfigurationRuntime);\r\n    Assertions.assertEquals(\"special\", paramsConfigurationSpecial);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-commons\\linkis-protocol\\src\\test\\java\\org\\apache\\linkis\\protocol\\engine\\EngineStateTest.java",
  "methodName" : "isCompletedTest",
  "sourceCode" : "@Test\r\n@DisplayName(\"isCompletedTest\")\r\npublic void isCompletedTest() {\r\n    boolean successCompleted = EngineState.isCompleted(EngineState.Success);\r\n    boolean errorCompleted = EngineState.isCompleted(EngineState.Error);\r\n    boolean deadCompleted = EngineState.isCompleted(EngineState.Dead);\r\n    boolean idleCompleted = EngineState.isCompleted(EngineState.Idle);\r\n    Assertions.assertTrue(successCompleted);\r\n    Assertions.assertTrue(errorCompleted);\r\n    Assertions.assertTrue(deadCompleted);\r\n    Assertions.assertFalse(idleCompleted);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-commons\\linkis-protocol\\src\\test\\java\\org\\apache\\linkis\\protocol\\engine\\EngineStateTest.java",
  "methodName" : "isAvailableTest",
  "sourceCode" : "@Test\r\n@DisplayName(\"isAvailableTest\")\r\npublic void isAvailableTest() {\r\n    boolean idleAvailable = EngineState.isAvailable(EngineState.Idle);\r\n    boolean busyAvailable = EngineState.isAvailable(EngineState.Busy);\r\n    boolean deadAvailable = EngineState.isAvailable(EngineState.Dead);\r\n    Assertions.assertTrue(idleAvailable);\r\n    Assertions.assertTrue(busyAvailable);\r\n    Assertions.assertFalse(deadAvailable);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-commons\\linkis-protocol\\src\\test\\java\\org\\apache\\linkis\\protocol\\util\\ImmutablePairTest.java",
  "methodName" : "getKeyTest",
  "sourceCode" : "@Test\r\n@DisplayName(\"getKeyTest\")\r\npublic void getKeyTest() {\r\n    ImmutablePair<String, String> immutablePair = new ImmutablePair<String, String>(\"hadoop\", \"hadoop\");\r\n    String key = immutablePair.getKey();\r\n    Assertions.assertEquals(\"hadoop\", key);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-commons\\linkis-protocol\\src\\test\\java\\org\\apache\\linkis\\protocol\\util\\ImmutablePairTest.java",
  "methodName" : "getValueTest",
  "sourceCode" : "@Test\r\n@DisplayName(\"getValueTest\")\r\npublic void getValueTest() {\r\n    ImmutablePair<String, String> immutablePair = new ImmutablePair<String, String>(\"hadoop\", \"hadoop\");\r\n    String pairValue = immutablePair.getValue();\r\n    Assertions.assertEquals(\"hadoop\", pairValue);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-commons\\linkis-protocol\\src\\test\\java\\org\\apache\\linkis\\protocol\\util\\ImmutablePairTest.java",
  "methodName" : "equalsTest",
  "sourceCode" : "@Test\r\n@DisplayName(\"equalsTest\")\r\npublic void equalsTest() {\r\n    ImmutablePair<String, String> immutablePair1 = new ImmutablePair<String, String>(\"hadoop\", \"hadoop\");\r\n    ImmutablePair<String, String> immutablePair2 = new ImmutablePair<String, String>(\"hadoop\", \"hadoop\");\r\n    boolean equals = immutablePair1.equals(immutablePair2);\r\n    Assertions.assertTrue(equals);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-commons\\linkis-rpc\\src\\test\\java\\org\\apache\\linkis\\rpc\\errorcode\\LinkisRpcErrorCodeSummaryTest.java",
  "methodName" : "enumTest",
  "sourceCode" : "@Test\r\n@DisplayName(\"enumTest\")\r\npublic void enumTest() {\r\n    Assertions.assertEquals(10000, LinkisRpcErrorCodeSummary.METHOD_CALL_FAILED.getErrorCode());\r\n    Assertions.assertEquals(10001, LinkisRpcErrorCodeSummary.TRANSMITTED_BEAN_IS_NULL.getErrorCode());\r\n    Assertions.assertEquals(10002, LinkisRpcErrorCodeSummary.TIMEOUT_PERIOD.getErrorCode());\r\n    Assertions.assertEquals(10003, LinkisRpcErrorCodeSummary.CORRESPONDING_NOT_FOUND.getErrorCode());\r\n    Assertions.assertEquals(10004, LinkisRpcErrorCodeSummary.CORRESPONDING_TO_INITIALIZE.getErrorCode());\r\n    Assertions.assertEquals(10051, LinkisRpcErrorCodeSummary.APPLICATION_IS_NOT_EXISTS.getErrorCode());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-commons\\linkis-rpc\\src\\test\\java\\org\\apache\\linkis\\rpc\\message\\utils\\MessageUtilsTest.java",
  "methodName" : "getMinOrders",
  "sourceCode" : "@Test\r\nvoid getMinOrders() {\r\n    List<MethodExecuteWrapper> notRepeatedWrapper = new ArrayList<>();\r\n    for (ServiceMethod serviceMethod : notRepeatedServiceMethods) {\r\n        notRepeatedWrapper.add(new MethodExecuteWrapper(serviceMethod));\r\n    }\r\n    List<MethodExecuteWrapper> result = MessageUtils.getMinOrders(notRepeatedWrapper);\r\n    assertThat(result).singleElement().isNotNull();\r\n    assertThat(result.get(0).getOrder()).isZero();\r\n    List<MethodExecuteWrapper> repeatedWrapper = new ArrayList<>();\r\n    for (ServiceMethod serviceMethod : repeatedServiceMethods) {\r\n        repeatedWrapper.add(new MethodExecuteWrapper(serviceMethod));\r\n    }\r\n    result = MessageUtils.getMinOrders(repeatedWrapper);\r\n    assertThat(result).size().isEqualTo(2);\r\n    assertThat(result.get(0).getOrder()).isZero();\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-commons\\linkis-rpc\\src\\test\\java\\org\\apache\\linkis\\rpc\\message\\utils\\MessageUtilsTest.java",
  "methodName" : "orderIsLast",
  "sourceCode" : "@Test\r\nvoid orderIsLast() {\r\n    int maxOrder = Integer.MAX_VALUE;\r\n    assertThat(MessageUtils.orderIsLast(maxOrder, notRepeatedServiceMethods)).isTrue();\r\n    assertThat(MessageUtils.orderIsLast(11, notRepeatedServiceMethods)).isTrue();\r\n    assertThat(MessageUtils.orderIsLast(5, notRepeatedServiceMethods)).isFalse();\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-commons\\linkis-rpc\\src\\test\\java\\org\\apache\\linkis\\rpc\\message\\utils\\MessageUtilsTest.java",
  "methodName" : "repeatOrder",
  "sourceCode" : "@Test\r\nvoid repeatOrder() {\r\n    assertThat(MessageUtils.repeatOrder(notRepeatedServiceMethods)).isNull();\r\n    assertThat(MessageUtils.repeatOrder(repeatedServiceMethods)).isZero();\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-commons\\linkis-storage\\src\\test\\java\\org\\apache\\linkis\\storage\\errorcode\\LinkisIoFileClientErrorCodeSummaryTest.java",
  "methodName" : "enumTest",
  "sourceCode" : "@Test\r\n@DisplayName(\"enumTest\")\r\npublic void enumTest() {\r\n    Assertions.assertEquals(52002, LinkisIoFileClientErrorCodeSummary.NO_PROXY_USER.getErrorCode());\r\n    Assertions.assertEquals(52002, LinkisIoFileClientErrorCodeSummary.FAILED_TO_INIT_USER.getErrorCode());\r\n    Assertions.assertEquals(52002, LinkisIoFileClientErrorCodeSummary.ENGINE_CLOSED_IO_ILLEGAL.getErrorCode());\r\n    Assertions.assertEquals(52002, LinkisIoFileClientErrorCodeSummary.STORAGE_HAS_BEEN_CLOSED.getErrorCode());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-commons\\linkis-storage\\src\\test\\java\\org\\apache\\linkis\\storage\\errorcode\\LinkisIoFileErrorCodeSummaryTest.java",
  "methodName" : "enumTest",
  "sourceCode" : "@Test\r\n@DisplayName(\"enumTest\")\r\npublic void enumTest() {\r\n    int cannotBeEmptyErrorCode = LinkisIoFileErrorCodeSummary.CANNOT_BE_EMPTY.getErrorCode();\r\n    int fsCanNotProxyToErrorCode = LinkisIoFileErrorCodeSummary.FS_CAN_NOT_PROXY_TO.getErrorCode();\r\n    int notExistsMethodErrorCode = LinkisIoFileErrorCodeSummary.NOT_EXISTS_METHOD.getErrorCode();\r\n    int parameterCallsErrorCode = LinkisIoFileErrorCodeSummary.PARAMETER_CALLS.getErrorCode();\r\n    Assertions.assertTrue(53002 == cannotBeEmptyErrorCode);\r\n    Assertions.assertTrue(52002 == fsCanNotProxyToErrorCode);\r\n    Assertions.assertTrue(53003 == notExistsMethodErrorCode);\r\n    Assertions.assertTrue(53003 == parameterCallsErrorCode);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-commons\\linkis-storage\\src\\test\\java\\org\\apache\\linkis\\storage\\errorcode\\LinkisStorageErrorCodeSummaryTest.java",
  "methodName" : "enumTest",
  "sourceCode" : "@Test\r\n@DisplayName(\"enumTest\")\r\npublic void enumTest() {\r\n    Assertions.assertEquals(50000, LinkisStorageErrorCodeSummary.UNSUPPORTED_FILE.getErrorCode());\r\n    Assertions.assertEquals(50000, LinkisStorageErrorCodeSummary.UNSUPPORTED_RESULT.getErrorCode());\r\n    Assertions.assertEquals(50001, LinkisStorageErrorCodeSummary.CONFIGURATION_NOT_READ.getErrorCode());\r\n    Assertions.assertEquals(51000, LinkisStorageErrorCodeSummary.FAILED_TO_READ_INTEGER.getErrorCode());\r\n    Assertions.assertEquals(51000, LinkisStorageErrorCodeSummary.THE_FILE_IS_EMPTY.getErrorCode());\r\n    Assertions.assertEquals(51001, LinkisStorageErrorCodeSummary.TO_BE_UNKNOW.getErrorCode());\r\n    Assertions.assertEquals(52000, LinkisStorageErrorCodeSummary.FSN_NOT_INIT_EXCEPTION.getErrorCode());\r\n    Assertions.assertEquals(52001, LinkisStorageErrorCodeSummary.PARSING_METADATA_FAILED.getErrorCode());\r\n    Assertions.assertEquals(52002, LinkisStorageErrorCodeSummary.TABLE_ARE_NOT_SUPPORTED.getErrorCode());\r\n    Assertions.assertEquals(52004, LinkisStorageErrorCodeSummary.MUST_REGISTER_TOC.getErrorCode());\r\n    Assertions.assertEquals(52004, LinkisStorageErrorCodeSummary.MUST_REGISTER_TOM.getErrorCode());\r\n    Assertions.assertEquals(54001, LinkisStorageErrorCodeSummary.UNSUPPORTED_OPEN_FILE_TYPE.getErrorCode());\r\n    Assertions.assertEquals(65000, LinkisStorageErrorCodeSummary.INVALID_CUSTOM_PARAMETER.getErrorCode());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-commons\\linkis-storage\\src\\test\\java\\org\\apache\\linkis\\storage\\exception\\StorageErrorCodeTest.java",
  "methodName" : "enumTest",
  "sourceCode" : "@Test\r\n@DisplayName(\"enumTest\")\r\npublic void enumTest() {\r\n    int fsNotInitCode = StorageErrorCode.FS_NOT_INIT.getCode();\r\n    Assertions.assertTrue(53001 == fsNotInitCode);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-commons\\linkis-storage\\src\\test\\java\\org\\apache\\linkis\\storage\\script\\writer\\StorageScriptFsWriterTest.java",
  "methodName" : "TestSave",
  "sourceCode" : "//        return Message.ok().data(\"resourceId\", resourceId).data(\"version\", version);\r\n@Test\r\nvoid TestSave() {\r\n    ScriptFsWriter writer = StorageScriptFsWriter.getScriptFsWriter(new FsPath(fileName), \"UTF-8\", null);\r\n    Variable[] v = VariableParser.getVariables(params);\r\n    List<Variable> variableList = Arrays.stream(v).filter(var -> !StringUtils.isEmpty(var.value())).collect(Collectors.toList());\r\n    try {\r\n        MetaData metaData = new ScriptMetaData(variableList.toArray(new Variable[0]));\r\n        writer.addMetaData(metaData);\r\n        writer.addRecord(new ScriptRecord(scriptContent));\r\n        InputStream inputStream = writer.getInputStream();\r\n        String text = new BufferedReader(new InputStreamReader(inputStream, StandardCharsets.UTF_8)).lines().collect(Collectors.joining(\"\\n\"));\r\n        Assertions.assertEquals(text, resultString);\r\n    } catch (Exception e) {\r\n        e.printStackTrace();\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-commons\\linkis-storage\\src\\test\\java\\org\\apache\\linkis\\storage\\script\\writer\\StorageScriptFsWriterTest.java",
  "methodName" : "TestOpen",
  "sourceCode" : "@Test\r\nvoid TestOpen() throws FileNotFoundException {\r\n    // /api/rest_j/v1/filesystem/openScriptFromBML?fileName=229cf765-6839-4c82-829d-1907c2ccf668.sql&resourceId=c9755cad-619b-4c1c-9204-cc4bb9836194&version=v000008&creator=&projectName=test1122a1\r\n    String filePath = this.getClass().getResource(\"/scritpis-test.sql\").getFile().toString();\r\n    File file = new File(filePath);\r\n    InputStream inputStream = new FileInputStream(file);\r\n    FileSource fileSource = FileSource$.MODULE$.create(new FsPath(fileName), inputStream);\r\n    Pair<Object, ArrayList<String[]>> collect = fileSource.collect()[0];\r\n    String scriptRes = collect.getSecond().get(0)[0];\r\n    String metadataRes = new Gson().toJson(collect.getFirst());\r\n    Assertions.assertEquals(scriptRes, scriptContent + \"\\n\");\r\n    Assertions.assertEquals(metadataRes, resultMetaData);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-computation-governance\\linkis-client\\linkis-cli\\src\\test\\java\\org\\apache\\linkis\\cli\\application\\constants\\CliConstantsTest.java",
  "methodName" : "constTest",
  "sourceCode" : "@Test\r\n@DisplayName(\"constTest\")\r\npublic void constTest() {\r\n    String defaultConfigName = CliConstants.DEFAULT_CONFIG_NAME;\r\n    Long jobQuerySleepMills = CliConstants.JOB_QUERY_SLEEP_MILLS;\r\n    String resultsetLogo = CliConstants.RESULTSET_LOGO;\r\n    String resultsetMetaBeginLogo = CliConstants.RESULTSET_META_BEGIN_LOGO;\r\n    String resultsetMetaEndLogo = CliConstants.RESULTSET_META_END_LOGO;\r\n    String resultsetSeparatorLogo = CliConstants.RESULTSET_SEPARATOR_LOGO;\r\n    Integer resultsetPageSize = CliConstants.RESULTSET_PAGE_SIZE;\r\n    String jobCreatorDefault = CliConstants.JOB_CREATOR_DEFAULT;\r\n    String jobCreatorAsyncDefault = CliConstants.JOB_CREATOR_ASYNC_DEFAULT;\r\n    String dummyCid = CliConstants.DUMMY_CID;\r\n    String linkisCli = CliConstants.LINKIS_CLI;\r\n    String ujesMode = CliConstants.UJES_MODE;\r\n    String onceMode = CliConstants.ONCE_MODE;\r\n    Assertions.assertEquals(\"linkis-cli.properties\", defaultConfigName);\r\n    Assertions.assertTrue(2000L == jobQuerySleepMills.longValue());\r\n    Assertions.assertEquals(\"============ RESULT SET {0} ============\", resultsetLogo);\r\n    Assertions.assertEquals(\"----------- META DATA ------------\", resultsetMetaBeginLogo);\r\n    Assertions.assertEquals(\"------------ END OF META DATA ------------\", resultsetMetaEndLogo);\r\n    Assertions.assertEquals(\"------------------------\", resultsetSeparatorLogo);\r\n    Assertions.assertTrue(5000 == resultsetPageSize.intValue());\r\n    Assertions.assertEquals(\"LINKISCLI\", jobCreatorDefault);\r\n    Assertions.assertEquals(\"LINKISCLIASYNC\", jobCreatorAsyncDefault);\r\n    Assertions.assertEquals(\"dummy\", dummyCid);\r\n    Assertions.assertEquals(\"LinkisCli\", linkisCli);\r\n    Assertions.assertEquals(\"ujes\", ujesMode);\r\n    Assertions.assertEquals(\"once\", onceMode);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-computation-governance\\linkis-client\\linkis-cli\\src\\test\\java\\org\\apache\\linkis\\cli\\application\\constants\\CliKeysTest.java",
  "methodName" : "constTest",
  "sourceCode" : "@Test\r\n@DisplayName(\"constTest\")\r\npublic void constTest() {\r\n    String adminUsers = CliKeys.ADMIN_USERS;\r\n    String linkisClientNoncustomizable = CliKeys.LINKIS_CLIENT_NONCUSTOMIZABLE;\r\n    String logPathKey = CliKeys.LOG_PATH_KEY;\r\n    String logFileKey = CliKeys.LOG_FILE_KEY;\r\n    String clientConfigRootKey = CliKeys.CLIENT_CONFIG_ROOT_KEY;\r\n    String defaultConfigFileNameKey = CliKeys.DEFAULT_CONFIG_FILE_NAME_KEY;\r\n    String linuxUserKey = CliKeys.LINUX_USER_KEY;\r\n    String jobExec = CliKeys.JOB_EXEC;\r\n    String jobExecCode = CliKeys.JOB_EXEC_CODE;\r\n    String jobContent = CliKeys.JOB_CONTENT;\r\n    String jobSource = CliKeys.JOB_SOURCE;\r\n    String jobParamConf = CliKeys.JOB_PARAM_CONF;\r\n    String jobParamRuntime = CliKeys.JOB_PARAM_RUNTIME;\r\n    String jobParamVar = CliKeys.JOB_PARAM_VAR;\r\n    String jobLabel = CliKeys.JOB_LABEL;\r\n    Assertions.assertEquals(\"hadoop,root,shangda\", adminUsers);\r\n    Assertions.assertEquals(\"wds.linkis.client.noncustomizable\", linkisClientNoncustomizable);\r\n    Assertions.assertEquals(\"log.path\", logPathKey);\r\n    Assertions.assertEquals(\"log.file\", logFileKey);\r\n    Assertions.assertEquals(\"conf.root\", clientConfigRootKey);\r\n    Assertions.assertEquals(\"conf.file\", defaultConfigFileNameKey);\r\n    Assertions.assertEquals(\"user.name\", linuxUserKey);\r\n    Assertions.assertEquals(\"wds.linkis.client.exec\", jobExec);\r\n    Assertions.assertEquals(\"wds.linkis.client.exec.code\", jobExecCode);\r\n    Assertions.assertEquals(\"wds.linkis.client.jobContent\", jobContent);\r\n    Assertions.assertEquals(\"wds.linkis.client.source\", jobSource);\r\n    Assertions.assertEquals(\"wds.linkis.client.param.conf\", jobParamConf);\r\n    Assertions.assertEquals(\"wds.linkis.client.param.runtime\", jobParamRuntime);\r\n    Assertions.assertEquals(\"wds.linkis.client.param.var\", jobParamVar);\r\n    Assertions.assertEquals(\"wds.linkis.client.label\", jobLabel);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-computation-governance\\linkis-client\\linkis-cli\\src\\test\\java\\org\\apache\\linkis\\cli\\application\\constants\\LinkisConstantsTest.java",
  "methodName" : "constTest",
  "sourceCode" : "@Test\r\n@DisplayName(\"constTest\")\r\npublic void constTest() {\r\n    String authStrategyStatic = LinkisConstants.AUTH_STRATEGY_STATIC;\r\n    String authStrategyToken = LinkisConstants.AUTH_STRATEGY_TOKEN;\r\n    Assertions.assertEquals(\"token\", authStrategyToken);\r\n    Assertions.assertEquals(\"static\", authStrategyStatic);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-computation-governance\\linkis-client\\linkis-cli\\src\\test\\java\\org\\apache\\linkis\\cli\\application\\constants\\LinkisKeysTest.java",
  "methodName" : "constTest",
  "sourceCode" : "@Test\r\n@DisplayName(\"constTest\")\r\npublic void constTest() {\r\n    String keyCodetype = LinkisKeys.KEY_CODETYPE;\r\n    String keyCode = LinkisKeys.KEY_CODE;\r\n    String keyVars = LinkisKeys.KEY_VARS;\r\n    String keyConf = LinkisKeys.KEY_CONF;\r\n    String keyScriptPath = LinkisKeys.KEY_SCRIPT_PATH;\r\n    String keyEnginetype = LinkisKeys.KEY_ENGINETYPE;\r\n    String keyUserCreator = LinkisKeys.KEY_USER_CREATOR;\r\n    String keyErrorCode = LinkisKeys.KEY_ERROR_CODE;\r\n    String keyErrorDesc = LinkisKeys.KEY_ERROR_DESC;\r\n    String keyStrongerExecid = LinkisKeys.KEY_STRONGER_EXECID;\r\n    String keyRequestapp = LinkisKeys.KEY_REQUESTAPP;\r\n    String keyExecid = LinkisKeys.KEY_EXECID;\r\n    String keyUmuser = LinkisKeys.KEY_UMUSER;\r\n    String keyExecuteonce = LinkisKeys.KEY_EXECUTEONCE;\r\n    Assertions.assertEquals(\"codeType\", keyCodetype);\r\n    Assertions.assertEquals(\"code\", keyCode);\r\n    Assertions.assertEquals(\"variables\", keyVars);\r\n    Assertions.assertEquals(\"configuration\", keyConf);\r\n    Assertions.assertEquals(\"scriptPath\", keyScriptPath);\r\n    Assertions.assertEquals(\"engineType\", keyEnginetype);\r\n    Assertions.assertEquals(\"userCreator\", keyUserCreator);\r\n    Assertions.assertEquals(\"errCode\", keyErrorCode);\r\n    Assertions.assertEquals(\"errDesc\", keyErrorDesc);\r\n    Assertions.assertEquals(\"strongerExecId\", keyStrongerExecid);\r\n    Assertions.assertEquals(\"requestApplicationName\", keyRequestapp);\r\n    Assertions.assertEquals(\"execId\", keyExecid);\r\n    Assertions.assertEquals(\"umUser\", keyUmuser);\r\n    Assertions.assertEquals(\"executeOnce\", keyExecuteonce);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-computation-governance\\linkis-client\\linkis-cli\\src\\test\\java\\org\\apache\\linkis\\cli\\application\\interactor\\command\\CliCmdTypeTest.java",
  "methodName" : "enumTest",
  "sourceCode" : "@Test\r\n@DisplayName(\"enumTest\")\r\npublic void enumTest() {\r\n    int id = CliCmdType.UNIVERSAL.getId();\r\n    String name = CliCmdType.UNIVERSAL.getName();\r\n    String desc = CliCmdType.UNIVERSAL.getDesc();\r\n    Assertions.assertTrue(1 == id);\r\n    Assertions.assertEquals(\"linkis-cli\", name);\r\n    Assertions.assertNotNull(desc);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-computation-governance\\linkis-client\\linkis-cli\\src\\test\\java\\org\\apache\\linkis\\cli\\application\\interactor\\job\\builder\\KeyParserTest.java",
  "methodName" : "removePrefixForKeysInMapTest",
  "sourceCode" : "@Test\r\n@DisplayName(\"removePrefixForKeysInMapTest\")\r\npublic void removePrefixForKeysInMapTest() {\r\n    Map<String, Object> map = new HashMap<>();\r\n    map.put(CliKeys.JOB_PARAM_CONF, new Object());\r\n    map.put(\"name\", new Object());\r\n    Map<String, Object> stringObjectMap = KeyParser.removePrefixForKeysInMap(map);\r\n    Assertions.assertTrue(1 == stringObjectMap.size());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-computation-governance\\linkis-client\\linkis-cli\\src\\test\\java\\org\\apache\\linkis\\cli\\application\\interactor\\job\\LinkisJobStatusTest.java",
  "methodName" : "enumTest",
  "sourceCode" : "@Test\r\n@DisplayName(\"enumTest\")\r\npublic void enumTest() {\r\n    boolean success = LinkisJobStatus.SUCCEED.isJobSuccess();\r\n    boolean jobFailure = LinkisJobStatus.FAILED.isJobFailure();\r\n    boolean jobCancelled = LinkisJobStatus.CANCELLED.isJobCancelled();\r\n    boolean jobTimeout = LinkisJobStatus.TIMEOUT.isJobTimeout();\r\n    boolean jobAbnormalStatus = LinkisJobStatus.UNKNOWN.isJobAbnormalStatus();\r\n    Assertions.assertTrue(success);\r\n    Assertions.assertTrue(jobFailure);\r\n    Assertions.assertTrue(jobCancelled);\r\n    Assertions.assertTrue(jobTimeout);\r\n    Assertions.assertTrue(jobAbnormalStatus);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-computation-governance\\linkis-client\\linkis-cli\\src\\test\\java\\org\\apache\\linkis\\cli\\application\\interactor\\job\\subtype\\JobCmdSubTypeTest.java",
  "methodName" : "enumTest",
  "sourceCode" : "@Test\r\n@DisplayName(\"enumTest\")\r\npublic void enumTest() {\r\n    String killName = JobCmdSubType.KILL.getName();\r\n    String logName = JobCmdSubType.LOG.getName();\r\n    String descName = JobCmdSubType.DESC.getName();\r\n    String statusName = JobCmdSubType.STATUS.getName();\r\n    String listName = JobCmdSubType.LIST.getName();\r\n    String resultName = JobCmdSubType.RESULT.getName();\r\n    Assertions.assertEquals(\"kill\", killName);\r\n    Assertions.assertEquals(\"log\", logName);\r\n    Assertions.assertEquals(\"desc\", descName);\r\n    Assertions.assertEquals(\"status\", statusName);\r\n    Assertions.assertEquals(\"list\", listName);\r\n    Assertions.assertEquals(\"result\", resultName);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-computation-governance\\linkis-client\\linkis-cli\\src\\test\\java\\org\\apache\\linkis\\cli\\application\\LinkisClientApplicationTest.java",
  "methodName" : "testMain",
  "sourceCode" : "/**\r\n * Method: main(String[] args)\r\n */\r\n@Test\r\npublic void testMain() {\r\n    // TODO: Test goes here...\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-computation-governance\\linkis-client\\linkis-cli\\src\\test\\java\\org\\apache\\linkis\\cli\\application\\LinkisClientApplicationTest.java",
  "methodName" : "testPrepare",
  "sourceCode" : "/**\r\n * Method: prepare()\r\n */\r\n@Test\r\npublic void testPrepare() {\r\n    // TODO: Test goes here...\r\n    /*\r\n    try {\r\n       Method method = LinkisClientApplication.getClass().getMethod(\"prepare\");\r\n       method.setAccessible(true);\r\n       method.invoke(<Object>, <Parameters>);\r\n    } catch(NoSuchMethodException e) {\r\n    } catch(IllegalAccessException e) {\r\n    } catch(InvocationTargetException e) {\r\n    }\r\n    */\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-computation-governance\\linkis-client\\linkis-cli\\src\\test\\java\\org\\apache\\linkis\\cli\\application\\LinkisClientApplicationTest.java",
  "methodName" : "testProcessInput",
  "sourceCode" : "/**\r\n * Method: processInput(String[] args, PreparedData preparedData)\r\n */\r\n@Test\r\npublic void testProcessInput() {\r\n    // TODO: Test goes here...\r\n    /*\r\n    try {\r\n       Method method = LinkisClientApplication.getClass().getMethod(\"processInput\", String[].class, PreparedData.class);\r\n       method.setAccessible(true);\r\n       method.invoke(<Object>, <Parameters>); c\r\n    } catch(NoSuchMethodException e) {\r\n    } catch(IllegalAccessException e) {\r\n    } catch(InvocationTargetException e) {\r\n    }\r\n    */\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-computation-governance\\linkis-client\\linkis-cli\\src\\test\\java\\org\\apache\\linkis\\cli\\application\\LinkisClientApplicationTest.java",
  "methodName" : "testExec",
  "sourceCode" : "/**\r\n * Method: exec(ProcessedData data)\r\n */\r\n@Test\r\npublic void testExec() {\r\n    //    LinkisClientApplication.main(cmdStr);\r\n    //    LinkisClientApplication.main(cmdStr);\r\n    //    LinkisClientApplication.main(cmdStr2);\r\n    /*\r\n    try {\r\n       Method method = LinkisClientApplication.getClass().getMethod(\"exec\", ProcessedData.class);\r\n       method.setAccessible(true);\r\n       method.invoke(<Object>, <Parameters>);\r\n    } catch(NoSuchMethodException e) {\r\n    } catch(IllegalAccessException e) {\r\n    } catch(InvocationTargetException e) {\r\n    }\r\n    */\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-computation-governance\\linkis-client\\linkis-cli\\src\\test\\java\\org\\apache\\linkis\\cli\\application\\operator\\once\\OnceJobConstantsTest.java",
  "methodName" : "constTest",
  "sourceCode" : "@Test\r\n@DisplayName(\"constTest\")\r\npublic void constTest() {\r\n    Integer maxLogSizeOnce = OnceJobConstants.MAX_LOG_SIZE_ONCE;\r\n    Integer idxForLogTypeAll = OnceJobConstants.IDX_FOR_LOG_TYPE_ALL;\r\n    String logIgnoreKeywords = OnceJobConstants.LOG_IGNORE_KEYWORDS;\r\n    Assertions.assertTrue(5000 == maxLogSizeOnce.intValue());\r\n    Assertions.assertTrue(3 == idxForLogTypeAll.intValue());\r\n    Assertions.assertEquals(\"[SpringContextShutdownHook],[main]\", logIgnoreKeywords);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-computation-governance\\linkis-client\\linkis-cli\\src\\test\\java\\org\\apache\\linkis\\cli\\application\\operator\\ujes\\UJESConstantsTest.java",
  "methodName" : "constTest",
  "sourceCode" : "@Test\r\n@DisplayName(\"constTest\")\r\npublic void constTest() {\r\n    int exceptionCheckAfterPage = UJESConstants.EXCEPTION_CHECK_AFTER_PAGE;\r\n    Long driverQuerySleepMills = UJESConstants.DRIVER_QUERY_SLEEP_MILLS;\r\n    Integer driverRequestMaxRetryTime = UJESConstants.DRIVER_REQUEST_MAX_RETRY_TIME;\r\n    Integer maxLogSize = UJESConstants.MAX_LOG_SIZE;\r\n    Integer idxForLogTypeAll = UJESConstants.IDX_FOR_LOG_TYPE_ALL;\r\n    String queryPageSizeName = UJESConstants.QUERY_PAGE_SIZE_NAME;\r\n    int queryPageSizeDefaultValue = UJESConstants.QUERY_PAGE_SIZE_DEFAULT_VALUE;\r\n    String queryStatusName = UJESConstants.QUERY_STATUS_NAME;\r\n    String queryStartDateMillsName = UJESConstants.QUERY_START_DATE_MILLS_NAME;\r\n    String queryEndDateMillsName = UJESConstants.QUERY_END_DATE_MILLS_NAME;\r\n    String queryPageNowName = UJESConstants.QUERY_PAGE_NOW_NAME;\r\n    Assertions.assertTrue(10000 == exceptionCheckAfterPage);\r\n    Assertions.assertTrue(500L == driverQuerySleepMills);\r\n    Assertions.assertTrue(3 == driverRequestMaxRetryTime.intValue());\r\n    Assertions.assertTrue(-1 == maxLogSize);\r\n    Assertions.assertTrue(3 == idxForLogTypeAll.intValue());\r\n    Assertions.assertEquals(\"pageSize\", queryPageSizeName);\r\n    Assertions.assertTrue(100 == queryPageSizeDefaultValue);\r\n    Assertions.assertEquals(\"status\", queryStatusName);\r\n    Assertions.assertEquals(\"startDateMills\", queryStartDateMillsName);\r\n    Assertions.assertEquals(\"endDateMills\", queryEndDateMillsName);\r\n    Assertions.assertEquals(\"pageNow\", queryPageNowName);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-computation-governance\\linkis-client\\linkis-cli\\src\\test\\java\\org\\apache\\linkis\\cli\\application\\utils\\UtilsTest.java",
  "methodName" : "isValidExecIdTest",
  "sourceCode" : "@Test\r\n@DisplayName(\"isValidExecIdTest\")\r\npublic void isValidExecIdTest() {\r\n    String execId = \"0001\";\r\n    boolean validExecId = CliUtils.isValidExecId(execId);\r\n    Assertions.assertTrue(validExecId);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-computation-governance\\linkis-computation-governance-common\\src\\test\\java\\org\\apache\\linkis\\governance\\common\\entity\\ExecutionNodeStatusTest.java",
  "methodName" : "isRunningTest",
  "sourceCode" : "@Test\r\n@DisplayName(\"isRunningTest\")\r\npublic void isRunningTest() {\r\n    boolean running = ExecutionNodeStatus.isRunning(ExecutionNodeStatus.Running);\r\n    Assertions.assertTrue(running);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-computation-governance\\linkis-computation-governance-common\\src\\test\\java\\org\\apache\\linkis\\governance\\common\\entity\\ExecutionNodeStatusTest.java",
  "methodName" : "isScheduledTest",
  "sourceCode" : "@Test\r\n@DisplayName(\"isScheduledTest\")\r\npublic void isScheduledTest() {\r\n    boolean scheduledByTrue = ExecutionNodeStatus.isScheduled(ExecutionNodeStatus.Running);\r\n    boolean scheduledByFalse = ExecutionNodeStatus.isScheduled(ExecutionNodeStatus.Inited);\r\n    Assertions.assertTrue(scheduledByTrue);\r\n    Assertions.assertFalse(scheduledByFalse);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-computation-governance\\linkis-computation-governance-common\\src\\test\\java\\org\\apache\\linkis\\governance\\common\\entity\\ExecutionNodeStatusTest.java",
  "methodName" : "isSucceedTest",
  "sourceCode" : "@Test\r\n@DisplayName(\"isSucceedTest\")\r\npublic void isSucceedTest() {\r\n    boolean succeed = ExecutionNodeStatus.isSucceed(ExecutionNodeStatus.Succeed);\r\n    Assertions.assertTrue(succeed);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-computation-governance\\linkis-computation-governance-common\\src\\test\\java\\org\\apache\\linkis\\governance\\common\\entity\\ExecutionNodeStatusTest.java",
  "methodName" : "isCompletedTest",
  "sourceCode" : "@Test\r\n@DisplayName(\"isCompletedTest\")\r\npublic void isCompletedTest() {\r\n    boolean completedByTrue = ExecutionNodeStatus.isCompleted(ExecutionNodeStatus.Cancelled);\r\n    boolean completedByFalse = ExecutionNodeStatus.isCompleted(ExecutionNodeStatus.Running);\r\n    Assertions.assertTrue(completedByTrue);\r\n    Assertions.assertFalse(completedByFalse);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-computation-governance\\linkis-computation-governance-common\\src\\test\\java\\org\\apache\\linkis\\governance\\common\\entity\\NodeExistStatusTest.java",
  "methodName" : "enumTest",
  "sourceCode" : "@Test\r\n@DisplayName(\"enumTest\")\r\npublic void enumTest() {\r\n    String exist = NodeExistStatus.Exist.toString();\r\n    String unexist = NodeExistStatus.UnExist.toString();\r\n    String unknown = NodeExistStatus.Unknown.toString();\r\n    Assertions.assertEquals(\"Exist\", exist);\r\n    Assertions.assertEquals(\"UnExist\", unexist);\r\n    Assertions.assertEquals(\"Unknown\", unknown);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-computation-governance\\linkis-computation-governance-common\\src\\test\\java\\org\\apache\\linkis\\governance\\common\\exception\\engineconn\\EngineConnExecutorErrorCodeTest.java",
  "methodName" : "constTest",
  "sourceCode" : "@Test\r\n@DisplayName(\"constTest\")\r\npublic void constTest() {\r\n    int initExecutorFailed = EngineConnExecutorErrorCode.INIT_EXECUTOR_FAILED;\r\n    int invalidEngineType = EngineConnExecutorErrorCode.INVALID_ENGINE_TYPE;\r\n    int invalidLock = EngineConnExecutorErrorCode.INVALID_LOCK;\r\n    int invalidMethod = EngineConnExecutorErrorCode.INVALID_METHOD;\r\n    int invalidParams = EngineConnExecutorErrorCode.INVALID_PARAMS;\r\n    Assertions.assertTrue(40106 == initExecutorFailed);\r\n    Assertions.assertTrue(40100 == invalidEngineType);\r\n    Assertions.assertTrue(40103 == invalidLock);\r\n    Assertions.assertTrue(40101 == invalidMethod);\r\n    Assertions.assertTrue(40102 == invalidParams);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-computation-governance\\linkis-engineconn-manager\\linkis-engineconn-manager-server\\src\\test\\java\\org\\apache\\linkis\\ecm\\server\\service\\impl\\DefaultEngineConnKillServiceTest.java",
  "methodName" : "testParseYarnAppId",
  "sourceCode" : "@Test\r\n@DisplayName(\"testParseYarnAppId\")\r\npublic void testParseYarnAppId() {\r\n    String log = \"2022-07-14 14:08:46.854 INFO  [Linkis-Default-Scheduler-Thread-1] org.apache.hadoop.mapreduce.Job 1294 submit - The url to track the job: http://hadoop:8088/proxy/application_1645869964061_2740/\";\r\n    String regex = EngineConnConf.SQOOP_ENGINE_CONN_YARN_APP_ID_PARSE_REGEX().getValue();\r\n    Pattern pattern = Pattern.compile(regex);\r\n    Matcher mApp = pattern.matcher(log);\r\n    if (mApp.find()) {\r\n        String c = mApp.group(mApp.groupCount());\r\n        assertEquals(c, \"application_1645869964061_2740\");\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-computation-governance\\linkis-engineconn-manager\\linkis-engineconn-manager-server\\src\\test\\java\\org\\apache\\linkis\\ecm\\server\\service\\impl\\DefaultEngineConnKillServiceTest.java",
  "methodName" : "testKillYarnAppIdOfOneEc",
  "sourceCode" : "@Test\r\n@DisplayName(\"testKillYarnAppIdOfOneEc\")\r\npublic void testKillYarnAppIdOfOneEc() {\r\n    String line1 = \"15:44:04.370 ERROR org.apache.linkis.manager.engineplugin.shell.executor.YarnAppIdExtractor$$anonfun$addYarnAppIds$1 123 apply - Submitted application application_1609166102854_970911\";\r\n    String line2 = \"15:44:04.370 ERROR org.apache.linkis.manager.engineplugin.shell.executor.YarnAppIdExtractor$$anonfun$addYarnAppIds$1 123 apply - Submitted application application_1609166102854_970912\";\r\n    String[] logs = new String[] { line1, line2 };\r\n    String regex = EngineConnConf.SPARK_ENGINE_CONN_YARN_APP_ID_PARSE_REGEX().getValue();\r\n    Pattern pattern = Pattern.compile(regex);\r\n    List<String> appIds = new ArrayList<>(2);\r\n    for (String log : logs) {\r\n        Matcher mApp = pattern.matcher(log);\r\n        if (mApp.find()) {\r\n            String c = mApp.group(mApp.groupCount());\r\n            if (!appIds.contains(c)) {\r\n                appIds.add(c);\r\n            }\r\n        }\r\n    }\r\n    assertEquals(appIds.size(), 2);\r\n    assertEquals(appIds.get(0), \"application_1609166102854_970911\");\r\n    assertEquals(appIds.get(1), \"application_1609166102854_970912\");\r\n    String yarnAppKillScriptPath = \"/tmp/sbin/kill-yarn-jobs.sh\";\r\n    String[] cmdArr = new String[appIds.size() + 2];\r\n    cmdArr[0] = \"sh\";\r\n    cmdArr[1] = yarnAppKillScriptPath;\r\n    for (int i = 0; i < appIds.size(); i++) {\r\n        cmdArr[i + 2] = appIds.get(i);\r\n    }\r\n    assertEquals(cmdArr.length, 4);\r\n    String cmd = StringUtils.join(cmdArr, \" \");\r\n    assertEquals(cmd, \"sh /tmp/sbin/kill-yarn-jobs.sh application_1609166102854_970911 application_1609166102854_970912\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-computation-governance\\linkis-entrance\\src\\test\\java\\org\\apache\\linkis\\entrance\\interceptor\\impl\\SQLExplainTest.java",
  "methodName" : "isSelectCmdNoLimit",
  "sourceCode" : "@Test\r\nvoid isSelectCmdNoLimit() {\r\n    String code = \"SELECT * from dual WHERE (1=1)LIMIT 1;\";\r\n    boolean res = SQLExplain.isSelectCmdNoLimit(code);\r\n    Assertions.assertEquals(false, res);\r\n    code = \"SELECT * from dual\";\r\n    res = SQLExplain.isSelectCmdNoLimit(code);\r\n    Assertions.assertEquals(true, res);\r\n    code = \"SELECT * from dual LIMIT 1;\";\r\n    res = SQLExplain.isSelectCmdNoLimit(code);\r\n    Assertions.assertEquals(false, res);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-computation-governance\\linkis-entrance\\src\\test\\java\\org\\apache\\linkis\\entrance\\interceptor\\impl\\SQLExplainTest.java",
  "methodName" : "isSelectOverLimit",
  "sourceCode" : "@Test\r\nvoid isSelectOverLimit() {\r\n    String code = \"SELECT * from dual WHERE (1=1)LIMIT 5001;\";\r\n    boolean res = SQLExplain.isSelectOverLimit(code);\r\n    Assertions.assertEquals(true, res);\r\n    code = \"SELECT * from dual\";\r\n    res = SQLExplain.isSelectOverLimit(code);\r\n    Assertions.assertEquals(false, res);\r\n    code = \"SELECT * from dual LIMIT 4000;\";\r\n    res = SQLExplain.isSelectOverLimit(code);\r\n    Assertions.assertEquals(false, res);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-computation-governance\\linkis-entrance\\src\\test\\java\\org\\apache\\linkis\\entrance\\interceptor\\impl\\SQLExplainTest.java",
  "methodName" : "splicingLimitSql",
  "sourceCode" : "/**\r\n * 未修复前代码进行拼接sql时，输出的sql为\r\n *      select\r\n *      id,\r\n *      name,\r\n *      array_join(array_intersect(map_keys(info),array['abs','oda'],' limit 5000;\r\n *      ') as infos\r\n *      from ods.dim_ep22\r\n */\r\n@Test\r\nvoid splicingLimitSql() {\r\n    String code = \"select\\n\" + \"id,\\n\" + \"name,\\n\" + \"array_join(array_intersect(map_keys(info),array['abs','oda'],';') as infos\\n\" + \"from ods.dim_ep22\";\r\n    StringBuilder logAppender = new StringBuilder();\r\n    JobRequest jobRequest = new JobRequest();\r\n    SQLExplain.dealSQLLimit(code, jobRequest, logAppender);\r\n    Assertions.assertEquals(code + \" limit 5000\", jobRequest.getExecutionCode());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-computation-governance\\linkis-entrance\\src\\test\\java\\org\\apache\\linkis\\entrance\\interceptor\\impl\\TemplateConfUtilsTest.java",
  "methodName" : "getCustomTemplateConfName",
  "sourceCode" : "@Test\r\nvoid getCustomTemplateConfName() {\r\n    String sqlCode = \"\" + \"--注解\\n\" + \"select * from table;\\n\" + \"   --注解 \\n\" + \"--注解\\n\" + \"   select \\\"--注解\\\" as test\\n\" + \" --@set yy=123\\n\" + \"  --注解\";\r\n    String res = TemplateConfUtils.getCustomTemplateConfName(sqlCode, \"sql\");\r\n    Assertions.assertEquals(res, \"\");\r\n    String sqlCode2 = \"\" + \"---@set 123=注解\\n\" + \"select * from table;\\n\" + \"   --注解 \\n\" + \"--注解\\n\" + \"   select \\\"--注解\\\" as test\\n\" + \" --@set yy=123\\n\" + \"  --注解\";\r\n    res = TemplateConfUtils.getCustomTemplateConfName(sqlCode2, \"sql\");\r\n    Assertions.assertEquals(res, \"\");\r\n    String sqlCode3 = \"\" + \"---@set ec.resource.name=345\\n\" + \"select * from table;\\n\" + \"   --注解 \\n\" + \"--注解\\n\" + \"---@set ec.resource.name=456\\n\" + \"   select \\\"--注解\\\" as test\\n\" + \" --@set yy=123\\n\" + \"  --注解\";\r\n    res = TemplateConfUtils.getCustomTemplateConfName(sqlCode3, \"sql\");\r\n    Assertions.assertEquals(res, \"345\");\r\n    String sqlCode4 = \"\" + \"---@set ec.resource.name= name1 \\n\" + \"   select \\\"--注解\\\" as test\\n\" + \" --@set yy=123\\n\" + \"  --注解\";\r\n    res = TemplateConfUtils.getCustomTemplateConfName(sqlCode4, \"sql\");\r\n    Assertions.assertEquals(res, \"name1\");\r\n    String sqlCode5 = \"\" + \"##@set ec.resource.name=pyname1\\n\" + \"select * from table;\\n\" + \"   --注解 \\n\" + \"#注解\\n\" + \"##@set ec.resource.name= 123 \\n\" + \"   select \\\"--注解\\\" as test\\n\" + \"#@set yy=123\\n\" + \"  #注解\";\r\n    res = TemplateConfUtils.getCustomTemplateConfName(sqlCode5, \"python\");\r\n    Assertions.assertEquals(res, \"pyname1\");\r\n    String sqlCode6 = \"\" + \"///@set ec.resource.name= scalaname1 \\n\" + \"   select \\\"//注解\\\" as test\\n\" + \"//@set yy=123\\n\" + \"  #注解\";\r\n    res = TemplateConfUtils.getCustomTemplateConfName(sqlCode6, \"scala\");\r\n    Assertions.assertEquals(res, \"scalaname1\");\r\n    String sqlCode7 = \"\" + \"---@set ec.resource.name= hqlname1 \\n\" + \"   select \\\"--注解\\\" as test\\n\" + \" --@set yy=123\\n\" + \"  --注解\";\r\n    res = TemplateConfUtils.getCustomTemplateConfName(sqlCode7, \"hql\");\r\n    Assertions.assertEquals(res, \"hqlname1\");\r\n    String sqlCode8 = \"---@set ec.resource.name=linkis_test2;\\n\" + \"        ---@set ec.resource.name=scriptis_test hive;\\n\" + \"        select * from dss autotest.demo data limit 100;\";\r\n    res = TemplateConfUtils.getCustomTemplateConfName(sqlCode8, \"hql\");\r\n    Assertions.assertEquals(res, \"linkis_test2\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-computation-governance\\linkis-entrance\\src\\test\\java\\org\\apache\\linkis\\entrance\\interceptor\\impl\\TemplateConfUtilsTest.java",
  "methodName" : "getCustomTemplateConfName2",
  "sourceCode" : "@Test\r\nvoid getCustomTemplateConfName2() {\r\n    String sqlCode9 = \"---@set ec.resource.name=linkis_test2;\\r\\n---@set ec.resource.name=scriptis_test_hive;\\r\\n--@set limitn=100\\r\\nselect * from dss_autotest.demo_data  limit ${limitn};\\r\\n\";\r\n    String res = TemplateConfUtils.getCustomTemplateConfName(sqlCode9, \"hql\");\r\n    Assertions.assertEquals(res, \"linkis_test2\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-computation-governance\\linkis-entrance\\src\\test\\java\\org\\apache\\linkis\\entrance\\interceptor\\impl\\TestCommentHelper.java",
  "methodName" : "sqlDealCommentTest",
  "sourceCode" : "@Test\r\nvoid sqlDealCommentTest() {\r\n    String code = SQLCommentHelper.dealComment(sqlCode);\r\n    // System.out.println(code);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-computation-governance\\linkis-entrance\\src\\test\\java\\org\\apache\\linkis\\entrance\\interceptor\\impl\\TestCommentHelper.java",
  "methodName" : "scalaDealCommentTest",
  "sourceCode" : "@Test\r\nvoid scalaDealCommentTest() {\r\n    String code = ScalaCommentHelper.dealComment(scalaCode);\r\n    String[] lines = Arrays.stream(code.split(\"\\n\")).map(String::trim).filter(x -> StringUtils.isNotBlank(x)).toArray(String[]::new);\r\n    String result = String.join(\"\\n\", lines);\r\n    // assertEquals(result,scalaCodeRes);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-computation-governance\\linkis-entrance\\src\\test\\java\\org\\apache\\linkis\\entrance\\interceptor\\impl\\TestHDFSCacheLogWriter.java",
  "methodName" : "write",
  "sourceCode" : "@Test\r\nvoid write() throws IOException {\r\n    Cache cache = new Cache(5);\r\n    String fileName = UUID.randomUUID().toString().replace(\"-\", \"\") + \"-test.log\";\r\n    String logPath = System.getProperty(\"java.io.tmpdir\") + File.separator + fileName;\r\n    System.out.println(logPath);\r\n    String chartSet = \"utf-8\";\r\n    String username = System.getProperty(\"user.name\");\r\n    File file = new File(logPath);\r\n    file.createNewFile();\r\n    HDFSCacheLogWriter logWriter = new HDFSCacheLogWriter(// \"D:\\\\DataSphere\\\\linkis\\\\docs\\\\test.log\",\r\n    logPath, chartSet, cache, username);\r\n    String[] msgArr = new String[] { \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\", \"12\", \"13\", \"14\", \"15\", \"16\", \"17\", \"18\" };\r\n    List<String> msgList = new ArrayList<String>(Arrays.asList(msgArr));\r\n    String msg = String.join(\"\\n\", msgList);\r\n    logWriter.write(msg);\r\n    logWriter.flush();\r\n    List<String> list = FileUtil.readFile(logPath);\r\n    String res = String.join(\"\\n\", list);\r\n    res = res.replace(\"\\n\\n\", \"\\n\");\r\n    res = StringUtils.strip(res, \" \\n\");\r\n    Assertions.assertEquals(res, msg);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-computation-governance\\linkis-jdbc-driver\\src\\test\\java\\org\\apache\\linkis\\ujes\\jdbc\\JDBCSpiTest.java",
  "methodName" : "spiTest",
  "sourceCode" : "@Test\r\npublic void spiTest() {\r\n    try {\r\n        LinkisSQLConnection conn = (LinkisSQLConnection) DriverManager.getConnection(\"jdbc:linkis://hostname:port\", \"username\", \"password\");\r\n        Assertions.assertNotNull(conn);\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n    } catch (Exception e) {\r\n        e.printStackTrace();\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-computation-governance\\linkis-jdbc-driver\\src\\test\\java\\org\\apache\\linkis\\ujes\\jdbc\\LinkisSQLStatementTest.java",
  "methodName" : "execute",
  "sourceCode" : "@Test\r\npublic void execute() {\r\n    if (statement != null) {\r\n        assertTrue(statement.execute(sql));\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-computation-governance\\linkis-jdbc-driver\\src\\test\\java\\org\\apache\\linkis\\ujes\\jdbc\\LinkisSQLStatementTest.java",
  "methodName" : "executeQuery",
  "sourceCode" : "@Test\r\npublic void executeQuery() {\r\n    if (statement != null) {\r\n        UJESSQLResultSet resultSet = statement.executeQuery(sql);\r\n        assertTrue(resultSet.next());\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-computation-governance\\linkis-jdbc-driver\\src\\test\\java\\org\\apache\\linkis\\ujes\\jdbc\\LinkisSQLStatementTest.java",
  "methodName" : "crud",
  "sourceCode" : "@Test\r\npublic void crud() {\r\n    if (statement != null) {\r\n        statement.executeQuery(sqlCreate);\r\n        statement.executeQuery(sqlInsert);\r\n        UJESSQLResultSet resultSet = statement.executeQuery(sqlSelect);\r\n        int columnCount = 0;\r\n        while (resultSet.next()) {\r\n            UJESSQLResultSetMetaData rsmd = resultSet.getMetaData();\r\n            for (int i = 1; i <= rsmd.getColumnCount(); i++) {\r\n                System.out.print(rsmd.getColumnName(i) + \":\" + rsmd.getColumnTypeName(i) + \":\" + resultSet.getObject(i) + \"   \");\r\n                columnCount = i;\r\n            }\r\n        }\r\n        System.out.println(columnCount);\r\n        assertTrue(resultSet.isAfterLast());\r\n        statement.executeQuery(sqlDrop);\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-computation-governance\\linkis-jdbc-driver\\src\\test\\java\\org\\apache\\linkis\\ujes\\jdbc\\LinkisSQLStatementTest.java",
  "methodName" : "setMaxRows",
  "sourceCode" : "@Test\r\npublic void setMaxRows() {\r\n    if (statement != null) {\r\n        statement.setMaxRows(maxRows);\r\n        assertEquals(maxRows, statement.getMaxRows());\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-computation-governance\\linkis-jdbc-driver\\src\\test\\java\\org\\apache\\linkis\\ujes\\jdbc\\LinkisSQLStatementTest.java",
  "methodName" : "setQueryTimeout",
  "sourceCode" : "@Test\r\npublic void setQueryTimeout() {\r\n    if (statement != null) {\r\n        statement.setQueryTimeout(queryTimeout);\r\n        assertEquals(statement.getQueryTimeout(), queryTimeout * 1000);\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-computation-governance\\linkis-jdbc-driver\\src\\test\\java\\org\\apache\\linkis\\ujes\\jdbc\\LinkisSQLStatementTest.java",
  "methodName" : "cancel",
  "sourceCode" : "@Test\r\npublic void cancel() {\r\n    if (statement != null) {\r\n        statement.executeQuery(sql);\r\n        statement.cancel();\r\n        assertNull(statement.getResultSet());\r\n        assertNull(statement.getJobExcuteResult());\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-computation-governance\\linkis-jdbc-driver\\src\\test\\java\\org\\apache\\linkis\\ujes\\jdbc\\LinkisSQLStatementTest.java",
  "methodName" : "getConnWhenIsClosed",
  "sourceCode" : "@Test\r\npublic void getConnWhenIsClosed() {\r\n    if (statement != null) {\r\n        assertEquals(statement.getConnection(), conn);\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-computation-governance\\linkis-jdbc-driver\\src\\test\\java\\org\\apache\\linkis\\ujes\\jdbc\\LinkisSQLStatementTest.java",
  "methodName" : "singleQueryWithNoMoreResult",
  "sourceCode" : "/**\r\n * single query without next result set check point 1: getMoreResults returns false check point 2:\r\n * default getMoreResults, use Statement.CLOSE_CURRENT_RESULT. The current result set is closed.\r\n */\r\n@Test\r\npublic void singleQueryWithNoMoreResult() {\r\n    Properties t = new Properties();\r\n    t.put(\"user\", \"hiveUser\");\r\n    UJESClient ujesClient = Mockito.mock(UJESClient.class);\r\n    LinkisSQLConnection linkisSQLConnection = Mockito.spy(new LinkisSQLConnection(ujesClient, t));\r\n    LinkisSQLStatement linkisSQLStatement = new LinkisSQLStatement(linkisSQLConnection);\r\n    Mockito.when(ujesClient.resultSet(any())).thenReturn(new ResultSetResult());\r\n    JobExecuteResult jobExecuteResult = new JobExecuteResult();\r\n    Mockito.doReturn(jobExecuteResult).when(linkisSQLConnection).toSubmit(anyString());\r\n    JobInfoResult jobInfoResult = Mockito.spy(new JobInfoResult());\r\n    Mockito.when(ujesClient.getJobInfo(jobExecuteResult)).thenReturn(jobInfoResult);\r\n    Mockito.doReturn(ExecutionNodeStatus.Succeed.name()).when(jobInfoResult).getJobStatus();\r\n    Mockito.doReturn(new RequestPersistTask()).when(jobInfoResult).getRequestPersistTask();\r\n    Mockito.doReturn(new String[] { \"path 1\" }).when(jobInfoResult).getResultSetList(ujesClient);\r\n    linkisSQLStatement.execute(\"select 1\");\r\n    UJESSQLResultSet resultSet = linkisSQLStatement.getResultSet();\r\n    assertNotNull(resultSet);\r\n    assertFalse(resultSet.isClosed());\r\n    // it will close current result set with default value 1\r\n    boolean moreResults = linkisSQLStatement.getMoreResults();\r\n    assertFalse(moreResults);\r\n    assertTrue(resultSet.isClosed());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-computation-governance\\linkis-jdbc-driver\\src\\test\\java\\org\\apache\\linkis\\ujes\\jdbc\\LinkisSQLStatementTest.java",
  "methodName" : "multiQueryWithNoMoreResult",
  "sourceCode" : "/**\r\n * multiple query without multiple result param, return one result check point 1: 2 sql executed.\r\n * 1 result set\r\n */\r\n@Test\r\npublic void multiQueryWithNoMoreResult() {\r\n    Properties t = new Properties();\r\n    t.put(\"user\", \"hiveUser\");\r\n    UJESClient ujesClient = Mockito.mock(UJESClient.class);\r\n    LinkisSQLConnection linkisSQLConnection = Mockito.spy(new LinkisSQLConnection(ujesClient, t));\r\n    LinkisSQLStatement linkisSQLStatement = new LinkisSQLStatement(linkisSQLConnection);\r\n    Mockito.when(ujesClient.resultSet(any())).thenReturn(new ResultSetResult());\r\n    JobExecuteResult jobExecuteResult = new JobExecuteResult();\r\n    Mockito.doReturn(jobExecuteResult).when(linkisSQLConnection).toSubmit(anyString());\r\n    JobInfoResult jobInfoResult = Mockito.spy(new JobInfoResult());\r\n    Mockito.when(ujesClient.getJobInfo(jobExecuteResult)).thenReturn(jobInfoResult);\r\n    Mockito.doReturn(ExecutionNodeStatus.Succeed.name()).when(jobInfoResult).getJobStatus();\r\n    Mockito.doReturn(new RequestPersistTask()).when(jobInfoResult).getRequestPersistTask();\r\n    Mockito.doReturn(new String[] { \"path 1\", \"path 2\" }).when(jobInfoResult).getResultSetList(ujesClient);\r\n    linkisSQLStatement.execute(\"select 1;select 2;\");\r\n    UJESSQLResultSet resultSet = linkisSQLStatement.getResultSet();\r\n    assertNotNull(resultSet);\r\n    assertFalse(resultSet.isClosed());\r\n    // it will close current result set with default value 1\r\n    boolean moreResults = linkisSQLStatement.getMoreResults();\r\n    assertFalse(moreResults);\r\n    assertTrue(resultSet.isClosed());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-computation-governance\\linkis-jdbc-driver\\src\\test\\java\\org\\apache\\linkis\\ujes\\jdbc\\LinkisSQLStatementTest.java",
  "methodName" : "multiQueryWithMoreResult",
  "sourceCode" : "/**\r\n * multiple query executed with multiple result param is Y check point 1: getMoreResults returns\r\n * true check point 2: current result is closed check point 3: second getMoreResults returns false\r\n */\r\n@Test\r\npublic void multiQueryWithMoreResult() {\r\n    Properties t = new Properties();\r\n    t.put(\"user\", \"hiveUser\");\r\n    t.put(UJESSQLDriverMain.ENABLE_MULTI_RESULT(), \"Y\");\r\n    UJESClient ujesClient = Mockito.mock(UJESClient.class);\r\n    LinkisSQLConnection linkisSQLConnection = Mockito.spy(new LinkisSQLConnection(ujesClient, t));\r\n    LinkisSQLStatement linkisSQLStatement = new LinkisSQLStatement(linkisSQLConnection);\r\n    Mockito.when(ujesClient.resultSet(any())).thenReturn(new ResultSetResult());\r\n    JobExecuteResult jobExecuteResult = new JobExecuteResult();\r\n    Mockito.doReturn(jobExecuteResult).when(linkisSQLConnection).toSubmit(anyString());\r\n    JobInfoResult jobInfoResult = Mockito.spy(new JobInfoResult());\r\n    Mockito.when(ujesClient.getJobInfo(jobExecuteResult)).thenReturn(jobInfoResult);\r\n    Mockito.doReturn(ExecutionNodeStatus.Succeed.name()).when(jobInfoResult).getJobStatus();\r\n    Mockito.doReturn(new RequestPersistTask()).when(jobInfoResult).getRequestPersistTask();\r\n    Mockito.doReturn(new String[] { \"path 1\", \"path 2\" }).when(jobInfoResult).getResultSetList(ujesClient);\r\n    linkisSQLStatement.execute(\"select 1;select 2;\");\r\n    UJESSQLResultSet resultSet = linkisSQLStatement.getResultSet();\r\n    assertNotNull(resultSet);\r\n    assertFalse(resultSet.isClosed());\r\n    // it will close current result set with default value 1\r\n    boolean moreResults = linkisSQLStatement.getMoreResults();\r\n    assertTrue(moreResults);\r\n    assertTrue(resultSet.isClosed());\r\n    moreResults = linkisSQLStatement.getMoreResults();\r\n    assertFalse(moreResults);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-computation-governance\\linkis-jdbc-driver\\src\\test\\java\\org\\apache\\linkis\\ujes\\jdbc\\LinkisSQLStatementTest.java",
  "methodName" : "multiQueryWithMoreResultNotCloseCurrent",
  "sourceCode" : "/**\r\n * multiple query executed with multiple result param is Y, and use\r\n * LinkisSQLStatement.KEEP_CURRENT_RESULT check point 1: getMoreResults returns true check point\r\n * 2: current result is not close check point 3: second getMoreResults returns false\r\n */\r\n@Test\r\npublic void multiQueryWithMoreResultNotCloseCurrent() {\r\n    Properties t = new Properties();\r\n    t.put(\"user\", \"hiveUser\");\r\n    t.put(UJESSQLDriverMain.ENABLE_MULTI_RESULT(), \"Y\");\r\n    UJESClient ujesClient = Mockito.mock(UJESClient.class);\r\n    LinkisSQLConnection linkisSQLConnection = Mockito.spy(new LinkisSQLConnection(ujesClient, t));\r\n    LinkisSQLStatement linkisSQLStatement = new LinkisSQLStatement(linkisSQLConnection);\r\n    Mockito.when(ujesClient.resultSet(any())).thenReturn(new ResultSetResult());\r\n    JobExecuteResult jobExecuteResult = new JobExecuteResult();\r\n    Mockito.doReturn(jobExecuteResult).when(linkisSQLConnection).toSubmit(anyString());\r\n    JobInfoResult jobInfoResult = Mockito.spy(new JobInfoResult());\r\n    Mockito.when(ujesClient.getJobInfo(jobExecuteResult)).thenReturn(jobInfoResult);\r\n    Mockito.doReturn(ExecutionNodeStatus.Succeed.name()).when(jobInfoResult).getJobStatus();\r\n    Mockito.doReturn(new RequestPersistTask()).when(jobInfoResult).getRequestPersistTask();\r\n    Mockito.doReturn(new String[] { \"path 1\", \"path 2\" }).when(jobInfoResult).getResultSetList(ujesClient);\r\n    linkisSQLStatement.execute(\"select 1;select 2;\");\r\n    UJESSQLResultSet resultSet = linkisSQLStatement.getResultSet();\r\n    assertNotNull(resultSet);\r\n    assertFalse(resultSet.isClosed());\r\n    // it will close current result set with default value 1\r\n    boolean moreResults = linkisSQLStatement.getMoreResults(LinkisSQLStatement.KEEP_CURRENT_RESULT);\r\n    assertTrue(moreResults);\r\n    assertFalse(resultSet.isClosed());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-computation-governance\\linkis-jdbc-driver\\src\\test\\java\\org\\apache\\linkis\\ujes\\jdbc\\LinkisSQLStatementTest.java",
  "methodName" : "multiQueryWithMoreResultCloseAllOpenedCurrent",
  "sourceCode" : "/**\r\n * multiple query executed with multiple result param is Y, and use\r\n * LinkisSQLStatement.CLOSE_ALL_RESULTS check point 1: getMoreResults returns true check point 2:\r\n * current result is not close check point 3: second getMoreResults returns false check point 4:\r\n * first result set is closed after second invoke getMoreResults\r\n */\r\n@Test\r\npublic void multiQueryWithMoreResultCloseAllOpenedCurrent() {\r\n    Properties t = new Properties();\r\n    t.put(\"user\", \"hiveUser\");\r\n    t.put(UJESSQLDriverMain.ENABLE_MULTI_RESULT(), \"Y\");\r\n    UJESClient ujesClient = Mockito.mock(UJESClient.class);\r\n    LinkisSQLConnection linkisSQLConnection = Mockito.spy(new LinkisSQLConnection(ujesClient, t));\r\n    LinkisSQLStatement linkisSQLStatement = new LinkisSQLStatement(linkisSQLConnection);\r\n    Mockito.when(ujesClient.resultSet(any())).thenReturn(new ResultSetResult());\r\n    JobExecuteResult jobExecuteResult = new JobExecuteResult();\r\n    Mockito.doReturn(jobExecuteResult).when(linkisSQLConnection).toSubmit(anyString());\r\n    JobInfoResult jobInfoResult = Mockito.spy(new JobInfoResult());\r\n    Mockito.when(ujesClient.getJobInfo(jobExecuteResult)).thenReturn(jobInfoResult);\r\n    Mockito.doReturn(ExecutionNodeStatus.Succeed.name()).when(jobInfoResult).getJobStatus();\r\n    Mockito.doReturn(new RequestPersistTask()).when(jobInfoResult).getRequestPersistTask();\r\n    Mockito.doReturn(new String[] { \"path 1\", \"path 2\" }).when(jobInfoResult).getResultSetList(ujesClient);\r\n    linkisSQLStatement.execute(\"select 1;select 2;\");\r\n    UJESSQLResultSet resultSet = linkisSQLStatement.getResultSet();\r\n    assertNotNull(resultSet);\r\n    assertFalse(resultSet.isClosed());\r\n    // it will close current result set with default value 1\r\n    boolean moreResults = linkisSQLStatement.getMoreResults(Statement.KEEP_CURRENT_RESULT);\r\n    assertTrue(moreResults);\r\n    assertFalse(resultSet.isClosed());\r\n    moreResults = linkisSQLStatement.getMoreResults(Statement.CLOSE_ALL_RESULTS);\r\n    assertFalse(moreResults);\r\n    assertTrue(resultSet.isClosed());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-computation-governance\\linkis-jdbc-driver\\src\\test\\java\\org\\apache\\linkis\\ujes\\jdbc\\UJESSQLDatabaseMetaDataTest.java",
  "methodName" : "supportsMinimumSQLGrammar",
  "sourceCode" : "@Test\r\npublic void supportsMinimumSQLGrammar() {\r\n    if (dbmd != null) {\r\n        Assertions.assertThrows(LinkisSQLException.class, () -> dbmd.supportsMinimumSQLGrammar());\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-computation-governance\\linkis-jdbc-driver\\src\\test\\java\\org\\apache\\linkis\\ujes\\jdbc\\UJESSQLDatabaseMetaDataTest.java",
  "methodName" : "getResultSetHoldability",
  "sourceCode" : "@Test\r\npublic void getResultSetHoldability() {\r\n    if (dbmd != null) {\r\n        Assertions.assertThrows(LinkisSQLException.class, () -> dbmd.getResultSetHoldability());\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-computation-governance\\linkis-jdbc-driver\\src\\test\\java\\org\\apache\\linkis\\ujes\\jdbc\\UJESSQLDatabaseMetaDataTest.java",
  "methodName" : "getMaxColumnsInGroupBy",
  "sourceCode" : "@Test\r\npublic void getMaxColumnsInGroupBy() {\r\n    if (dbmd != null) {\r\n        Assertions.assertThrows(LinkisSQLException.class, () -> dbmd.getMaxColumnsInGroupBy());\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-computation-governance\\linkis-jdbc-driver\\src\\test\\java\\org\\apache\\linkis\\ujes\\jdbc\\UJESSQLDatabaseMetaDataTest.java",
  "methodName" : "supportsSubqueriesInComparisons",
  "sourceCode" : "@Test\r\npublic void supportsSubqueriesInComparisons() {\r\n    if (dbmd != null) {\r\n        Assertions.assertThrows(LinkisSQLException.class, () -> dbmd.supportsSubqueriesInComparisons());\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-computation-governance\\linkis-jdbc-driver\\src\\test\\java\\org\\apache\\linkis\\ujes\\jdbc\\UJESSQLDatabaseMetaDataTest.java",
  "methodName" : "getMaxColumnsInSelect",
  "sourceCode" : "@Test\r\npublic void getMaxColumnsInSelect() {\r\n    if (dbmd != null) {\r\n        Assertions.assertThrows(LinkisSQLException.class, () -> dbmd.getMaxColumnsInSelect());\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-computation-governance\\linkis-jdbc-driver\\src\\test\\java\\org\\apache\\linkis\\ujes\\jdbc\\UJESSQLDatabaseMetaDataTest.java",
  "methodName" : "nullPlusNonNullIsNull",
  "sourceCode" : "@Test\r\npublic void nullPlusNonNullIsNull() {\r\n    if (dbmd != null) {\r\n        Assertions.assertThrows(LinkisSQLException.class, () -> dbmd.nullPlusNonNullIsNull());\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-computation-governance\\linkis-jdbc-driver\\src\\test\\java\\org\\apache\\linkis\\ujes\\jdbc\\UJESSQLDatabaseMetaDataTest.java",
  "methodName" : "supportsCatalogsInDataManipulation",
  "sourceCode" : "@Test\r\npublic void supportsCatalogsInDataManipulation() {\r\n    if (dbmd != null) {\r\n        assertFalse(dbmd.supportsCatalogsInDataManipulation());\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-computation-governance\\linkis-jdbc-driver\\src\\test\\java\\org\\apache\\linkis\\ujes\\jdbc\\UJESSQLDatabaseMetaDataTest.java",
  "methodName" : "supportsDataDefinitionAndDataManipulationTransactions",
  "sourceCode" : "@Test\r\npublic void supportsDataDefinitionAndDataManipulationTransactions() {\r\n    if (dbmd != null) {\r\n        Assertions.assertThrows(LinkisSQLException.class, () -> dbmd.supportsDataDefinitionAndDataManipulationTransactions());\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-computation-governance\\linkis-jdbc-driver\\src\\test\\java\\org\\apache\\linkis\\ujes\\jdbc\\UJESSQLDatabaseMetaDataTest.java",
  "methodName" : "supportsTableCorrelationNames",
  "sourceCode" : "@Test\r\npublic void supportsTableCorrelationNames() {\r\n    if (dbmd != null) {\r\n        Assertions.assertThrows(LinkisSQLException.class, () -> dbmd.supportsTableCorrelationNames());\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-computation-governance\\linkis-jdbc-driver\\src\\test\\java\\org\\apache\\linkis\\ujes\\jdbc\\UJESSQLDatabaseMetaDataTest.java",
  "methodName" : "getDefaultTransactionIsolation",
  "sourceCode" : "@Test\r\npublic void getDefaultTransactionIsolation() {\r\n    if (dbmd != null) {\r\n        assertEquals(dbmd.getDefaultTransactionIsolation(), 0);\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-computation-governance\\linkis-jdbc-driver\\src\\test\\java\\org\\apache\\linkis\\ujes\\jdbc\\UJESSQLDatabaseMetaDataTest.java",
  "methodName" : "supportsFullOuterJoins",
  "sourceCode" : "@Test\r\npublic void supportsFullOuterJoins() {\r\n    if (dbmd != null) {\r\n        assertTrue(dbmd.supportsFullOuterJoins());\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-computation-governance\\linkis-jdbc-driver\\src\\test\\java\\org\\apache\\linkis\\ujes\\jdbc\\UJESSQLDatabaseMetaDataTest.java",
  "methodName" : "supportsExpressionsInOrderBy",
  "sourceCode" : "@Test\r\npublic void supportsExpressionsInOrderBy() {\r\n    if (dbmd != null) {\r\n        Assertions.assertThrows(LinkisSQLException.class, () -> dbmd.supportsExpressionsInOrderBy());\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-computation-governance\\linkis-jdbc-driver\\src\\test\\java\\org\\apache\\linkis\\ujes\\jdbc\\UJESSQLDatabaseMetaDataTest.java",
  "methodName" : "allProceduresAreCallable",
  "sourceCode" : "@Test\r\npublic void allProceduresAreCallable() {\r\n    if (dbmd != null) {\r\n        assertFalse(dbmd.allProceduresAreCallable());\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-computation-governance\\linkis-jdbc-driver\\src\\test\\java\\org\\apache\\linkis\\ujes\\jdbc\\UJESSQLDatabaseMetaDataTest.java",
  "methodName" : "getMaxTablesInSelect",
  "sourceCode" : "@Test\r\npublic void getMaxTablesInSelect() {\r\n    if (dbmd != null) {\r\n        Assertions.assertThrows(LinkisSQLException.class, () -> dbmd.getMaxTablesInSelect());\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-computation-governance\\linkis-jdbc-driver\\src\\test\\java\\org\\apache\\linkis\\ujes\\jdbc\\UJESSQLDatabaseMetaDataTest.java",
  "methodName" : "nullsAreSortedAtStart",
  "sourceCode" : "@Test\r\npublic void nullsAreSortedAtStart() {\r\n    if (dbmd != null) {\r\n        Assertions.assertThrows(LinkisSQLException.class, () -> dbmd.nullsAreSortedAtStart());\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-computation-governance\\linkis-jdbc-driver\\src\\test\\java\\org\\apache\\linkis\\ujes\\jdbc\\UJESSQLDatabaseMetaDataTest.java",
  "methodName" : "supportsPositionedUpdate",
  "sourceCode" : "@Test\r\npublic void supportsPositionedUpdate() {\r\n    if (dbmd != null) {\r\n        assertFalse(dbmd.supportsPositionedUpdate());\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-computation-governance\\linkis-jdbc-driver\\src\\test\\java\\org\\apache\\linkis\\ujes\\jdbc\\UJESSQLDatabaseMetaDataTest.java",
  "methodName" : "ownDeletesAreVisible",
  "sourceCode" : "@Test\r\npublic void ownDeletesAreVisible() {\r\n    if (dbmd != null) {\r\n        Assertions.assertThrows(LinkisSQLException.class, () -> dbmd.ownDeletesAreVisible(0));\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-computation-governance\\linkis-jdbc-driver\\src\\test\\java\\org\\apache\\linkis\\ujes\\jdbc\\UJESSQLDatabaseMetaDataTest.java",
  "methodName" : "supportsResultSetHoldability",
  "sourceCode" : "@Test\r\npublic void supportsResultSetHoldability() {\r\n    if (dbmd != null) {\r\n        assertFalse(dbmd.supportsResultSetHoldability(0));\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-computation-governance\\linkis-jdbc-driver\\src\\test\\java\\org\\apache\\linkis\\ujes\\jdbc\\UJESSQLDatabaseMetaDataTest.java",
  "methodName" : "getMaxStatements",
  "sourceCode" : "@Test\r\npublic void getMaxStatements() {\r\n    if (dbmd != null) {\r\n        Assertions.assertThrows(LinkisSQLException.class, () -> dbmd.getMaxStatements());\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-computation-governance\\linkis-jdbc-driver\\src\\test\\java\\org\\apache\\linkis\\ujes\\jdbc\\UJESSQLDatabaseMetaDataTest.java",
  "methodName" : "getRowIdLifetime",
  "sourceCode" : "@Test\r\npublic void getRowIdLifetime() {\r\n    if (dbmd != null) {\r\n        Assertions.assertThrows(LinkisSQLException.class, () -> dbmd.getRowIdLifetime());\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-computation-governance\\linkis-jdbc-driver\\src\\test\\java\\org\\apache\\linkis\\ujes\\jdbc\\UJESSQLDatabaseMetaDataTest.java",
  "methodName" : "getDriverVersion",
  "sourceCode" : "@Test\r\npublic void getDriverVersion() {\r\n    if (dbmd != null) {\r\n        assertEquals(dbmd.getDriverVersion(), String.valueOf(UJESSQLDriverMain.DEFAULT_VERSION()));\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-computation-governance\\linkis-jdbc-driver\\src\\test\\java\\org\\apache\\linkis\\ujes\\jdbc\\UJESSQLPreparedStatementTest.java",
  "methodName" : "crud",
  "sourceCode" : "@Test\r\npublic void crud() {\r\n    if (conn != null) {\r\n        preStatement = conn.prepareStatement(\"\");\r\n        preStatement.executeUpdate(\"CREATE TABLE if not exists db.test1236 as select * from ai_fmi_ods.1000_10\");\r\n        preStatement.executeUpdate(\"insert into db.test1236 select * from ai_fmi_ods.1000_10\");\r\n        //  preStatement.executeUpdate(\"update db.test1236 set label=6 where label=1\");\r\n        preStatement.executeUpdate(\"select * from db.test1236\");\r\n        UJESSQLResultSet resultSet = preStatement.getResultSet();\r\n        showResult(resultSet);\r\n        preStatement.execute(\"drop table db.test1236\");\r\n        Assertions.assertTrue(resultSet.isAfterLast());\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-computation-governance\\linkis-jdbc-driver\\src\\test\\java\\org\\apache\\linkis\\ujes\\jdbc\\UJESSQLPreparedStatementTest.java",
  "methodName" : "setObject",
  "sourceCode" : "@Test\r\npublic void setObject() {\r\n    if (conn != null) {\r\n        preStatement = conn.prepareStatement(\"? ?\");\r\n        preStatement.setObject(1, \"show\");\r\n        preStatement.setObject(2, \"tables\");\r\n        Assertions.assertTrue(preStatement.execute());\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-computation-governance\\linkis-jdbc-driver\\src\\test\\java\\org\\apache\\linkis\\ujes\\jdbc\\UJESSQLPreparedStatementTest.java",
  "methodName" : "execute",
  "sourceCode" : "@Test\r\npublic void execute() {\r\n    if (conn != null) {\r\n        preStatement = conn.prepareStatement(\"show tables\");\r\n        Assertions.assertTrue(preStatement.execute());\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-computation-governance\\linkis-jdbc-driver\\src\\test\\java\\org\\apache\\linkis\\ujes\\jdbc\\UJESSQLPreparedStatementTest.java",
  "methodName" : "selectTest",
  "sourceCode" : "@Test\r\npublic void selectTest() {\r\n    if (conn != null) {\r\n        preStatement = conn.prepareStatement(\"select * from db.table limit 10\");\r\n        UJESSQLResultSet resultSet = preStatement.executeQuery();\r\n        showResult(resultSet);\r\n        Assertions.assertTrue(resultSet.isAfterLast());\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-computation-governance\\linkis-jdbc-driver\\src\\test\\java\\org\\apache\\linkis\\ujes\\jdbc\\UJESSQLPreparedStatementTest.java",
  "methodName" : "executeUpdate",
  "sourceCode" : "@Test\r\npublic void executeUpdate() {\r\n    if (conn != null) {\r\n        preStatement = conn.prepareStatement(\"show tables\");\r\n        Assertions.assertEquals(preStatement.executeUpdate(), 0);\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-computation-governance\\linkis-jdbc-driver\\src\\test\\java\\org\\apache\\linkis\\ujes\\jdbc\\UJESSQLPreparedStatementTest.java",
  "methodName" : "executeQuery",
  "sourceCode" : "@Test\r\npublic void executeQuery() {\r\n    if (conn != null) {\r\n        preStatement = conn.prepareStatement(\"show tables\");\r\n        Assertions.assertTrue(preStatement.executeQuery() instanceof UJESSQLResultSet);\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-computation-governance\\linkis-jdbc-driver\\src\\test\\java\\org\\apache\\linkis\\ujes\\jdbc\\UJESSQLResultSetTest.java",
  "methodName" : "getObject",
  "sourceCode" : "@Test\r\npublic void getObject() {\r\n    if (conn != null) {\r\n        while (resultSet.next()) {\r\n            metaData = resultSet.getMetaData();\r\n            int columnTypeFromVal = UJESSQLTypeParser.parserFromVal(resultSet.getObject(1));\r\n            int columnTypeFromMetaData = metaData.getColumnType(1);\r\n            Assertions.assertEquals(columnTypeFromVal, columnTypeFromMetaData);\r\n        }\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-computation-governance\\linkis-jdbc-driver\\src\\test\\java\\org\\apache\\linkis\\ujes\\jdbc\\UJESSQLResultSetTest.java",
  "methodName" : "first",
  "sourceCode" : "@Test\r\npublic void first() {\r\n    if (conn != null) {\r\n        resultSet.next();\r\n        Object oldColumnVal = resultSet.getObject(1);\r\n        // move to the end\r\n        while (resultSet.next()) {\r\n        }\r\n        Assertions.assertTrue(resultSet.first());\r\n        Object newColumnVal = resultSet.getObject(1);\r\n        Assertions.assertSame(oldColumnVal, newColumnVal);\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-computation-governance\\linkis-jdbc-driver\\src\\test\\java\\org\\apache\\linkis\\ujes\\jdbc\\UJESSQLResultSetTest.java",
  "methodName" : "afterLast",
  "sourceCode" : "@Test\r\npublic void afterLast() {\r\n    if (conn != null) {\r\n        resultSet.next();\r\n        resultSet.afterLast();\r\n        Assertions.assertTrue(resultSet.isAfterLast());\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-computation-governance\\linkis-jdbc-driver\\src\\test\\java\\org\\apache\\linkis\\ujes\\jdbc\\UJESSQLResultSetTest.java",
  "methodName" : "beforeFirst",
  "sourceCode" : "@Test\r\npublic void beforeFirst() {\r\n    if (conn != null) {\r\n        resultSet.next();\r\n        resultSet.beforeFirst();\r\n        Assertions.assertTrue(resultSet.isBeforeFirst());\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-computation-governance\\linkis-jdbc-driver\\src\\test\\java\\org\\apache\\linkis\\ujes\\jdbc\\UJESSQLResultSetTest.java",
  "methodName" : "getMetaData",
  "sourceCode" : "@Test\r\npublic void getMetaData() {\r\n    if (conn != null) {\r\n        resultSet.next();\r\n        Assertions.assertNotNull(resultSet.getMetaData());\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-computation-governance\\linkis-jdbc-driver\\src\\test\\java\\org\\apache\\linkis\\ujes\\jdbc\\UJESSQLResultSetTest.java",
  "methodName" : "next",
  "sourceCode" : "@Test\r\npublic void next() {\r\n    if (conn != null) {\r\n        while (resultSet.next()) {\r\n            metaData = resultSet.getMetaData();\r\n            for (int i = 1; i <= metaData.getColumnCount(); i++) {\r\n                System.out.print(metaData.getColumnName(i) + \":\" + resultSet.getObject(i) + \"    \");\r\n            }\r\n            System.out.println();\r\n        }\r\n        Assertions.assertTrue(resultSet.isAfterLast());\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-computation-governance\\linkis-jdbc-driver\\src\\test\\java\\org\\apache\\linkis\\ujes\\jdbc\\UJESSQLResultSetTest.java",
  "methodName" : "singleQueryWithNoMoreResultSet",
  "sourceCode" : "/**\r\n * single query result with no multiple result set check point 1: nextResultSet is null\r\n */\r\n@Test\r\npublic void singleQueryWithNoMoreResultSet() {\r\n    Properties t = new Properties();\r\n    t.put(\"user\", \"hiveUser\");\r\n    UJESClient ujesClient = Mockito.mock(UJESClient.class);\r\n    Mockito.when(ujesClient.resultSet(any())).thenReturn(new ResultSetResult());\r\n    LinkisSQLConnection linkisSQLConnection = new LinkisSQLConnection(ujesClient, t);\r\n    UJESSQLResultSet ujessqlResultSet = new UJESSQLResultSet(new String[] { \"path1\" }, new LinkisSQLStatement(linkisSQLConnection), 0, 0);\r\n    ujessqlResultSet.next();\r\n    assertNull(ujessqlResultSet.getNextResultSet());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-computation-governance\\linkis-jdbc-driver\\src\\test\\java\\org\\apache\\linkis\\ujes\\jdbc\\UJESSQLResultSetTest.java",
  "methodName" : "nultiQueryWithMoreResultSet",
  "sourceCode" : "/**\r\n * multiple result set with multi result switch is Y check point 1: queryResult has two path,\r\n * return first path. check point 2: the second result set returned check point 3: the third\r\n * result set is null\r\n */\r\n@Test\r\npublic void nultiQueryWithMoreResultSet() {\r\n    Properties t = new Properties();\r\n    t.put(\"user\", \"hiveUser\");\r\n    t.put(UJESSQLDriverMain.ENABLE_MULTI_RESULT(), \"Y\");\r\n    UJESClient ujesClient = Mockito.mock(UJESClient.class);\r\n    List<String> pathList = new ArrayList<>();\r\n    Mockito.when(ujesClient.resultSet(any())).thenAnswer(invocationOnMock -> {\r\n        ResultSetAction argument = invocationOnMock.getArgument(0);\r\n        String path = (String) argument.getParameters().get(\"path\");\r\n        if (pathList.isEmpty()) {\r\n            assertEquals(\"path1\", path);\r\n        }\r\n        pathList.add(path);\r\n        return new ResultSetResult();\r\n    });\r\n    LinkisSQLConnection linkisSQLConnection = new LinkisSQLConnection(ujesClient, t);\r\n    UJESSQLResultSet ujessqlResultSet = new UJESSQLResultSet(new String[] { \"path1\", \"path2\" }, new LinkisSQLStatement(linkisSQLConnection), 0, 0);\r\n    // 查询\r\n    ujessqlResultSet.next();\r\n    // 存在下一个结果集\r\n    UJESSQLResultSet nextResultSet = ujessqlResultSet.getNextResultSet();\r\n    assertNotNull(nextResultSet);\r\n    nextResultSet.next();\r\n    // 不存在第三个结果集\r\n    assertNull(nextResultSet.getNextResultSet());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-computation-governance\\linkis-jdbc-driver\\src\\test\\java\\org\\apache\\linkis\\ujes\\jdbc\\UJESSQLResultSetTest.java",
  "methodName" : "nultiQueryWithNoMoreResultSet",
  "sourceCode" : "/**\r\n * multiple result set with multi result switch not Y check point 1: queryResult has two path,\r\n * return last path. check point 2: the next result set is null\r\n */\r\n@Test\r\npublic void nultiQueryWithNoMoreResultSet() {\r\n    Properties t = new Properties();\r\n    t.put(\"user\", \"hiveUser\");\r\n    UJESClient ujesClient = Mockito.mock(UJESClient.class);\r\n    Mockito.when(ujesClient.resultSet(any())).thenAnswer(invocationOnMock -> {\r\n        ResultSetAction argument = invocationOnMock.getArgument(0);\r\n        String path = (String) argument.getParameters().get(\"path\");\r\n        assertEquals(\"path4\", path);\r\n        return new ResultSetResult();\r\n    });\r\n    LinkisSQLConnection linkisSQLConnection = new LinkisSQLConnection(ujesClient, t);\r\n    UJESSQLResultSet ujessqlResultSet = new UJESSQLResultSet(new String[] { \"path1\", \"path2\", \"path3\", \"path4\" }, new LinkisSQLStatement(linkisSQLConnection), 0, 0);\r\n    // 查询\r\n    ujessqlResultSet.next();\r\n    // 即使查询有多个结果集，也不会产生多个结果集返回\r\n    UJESSQLResultSet nextResultSet = ujessqlResultSet.getNextResultSet();\r\n    assertNull(nextResultSet);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-computation-governance\\linkis-manager\\linkis-application-manager\\src\\test\\java\\org\\apache\\linkis\\manager\\am\\util\\ECResourceInfoUtilsTest.java",
  "methodName" : "testGetStringToMap",
  "sourceCode" : "@Test\r\npublic void testGetStringToMap() throws Exception {\r\n    ECResourceInfoRecord info = new ECResourceInfoRecord();\r\n    info.setLabelValue(\"hadoop-LINKISCLI,spark-2.4.3\");\r\n    String str = \"{\\\"driver\\\":{\\\"instance\\\":1,\\\"memory\\\":\\\"3.0 GB\\\",\\\"cpu\\\":1}, \\\"yarn\\\":{\\\"queueName\\\":\\\"dws\\\",\\\"queueMemory\\\":\\\"2.0 GB\\\", \\\"queueCpu\\\":2, \\\"instance\\\":0}} \";\r\n    Map<String, Object> map = BDPJettyServerHelper.gson().fromJson(str, new HashMap<>().getClass());\r\n    ResourceVo resourceVO = ECResourceInfoUtils.getStringToMap(str, info);\r\n    Map diverMap = (Map) map.get(\"driver\");\r\n    Assertions.assertEquals(resourceVO.getInstance(), ((Double) diverMap.get(\"instance\")).intValue());\r\n    Assertions.assertEquals(resourceVO.getInstance(), 1);\r\n    Assertions.assertEquals(resourceVO.getCores(), ((Double) diverMap.get(\"cpu\")).intValue());\r\n    Assertions.assertEquals(resourceVO.getCores(), 1);\r\n    Assertions.assertEquals(resourceVO.getMemory(), ByteTimeUtils.byteStringAsBytes(String.valueOf(diverMap.getOrDefault(\"memory\", \"0k\"))));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-computation-governance\\linkis-manager\\linkis-label-common\\src\\test\\java\\org\\apache\\linkis\\manager\\label\\builder\\CombinedLabelBuilderTest.java",
  "methodName" : "testCanBuild",
  "sourceCode" : "@Test\r\npublic void testCanBuild() throws Exception {\r\n    boolean flag = combinedLabelBuilder.canBuild(LabelKeyConstant.COMBINED_LABEL_KEY_PREFIX);\r\n    Assertions.assertTrue(flag);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-computation-governance\\linkis-manager\\linkis-label-common\\src\\test\\java\\org\\apache\\linkis\\manager\\label\\builder\\CombinedLabelBuilderTest.java",
  "methodName" : "testBuild",
  "sourceCode" : "@Test\r\npublic void testBuild() throws Exception {\r\n    UserCreatorLabel userCreatorLabel1 = new UserCreatorLabel();\r\n    userCreatorLabel1.setLabelKey(\"testLabelKey1\");\r\n    List<Label<?>> labels1 = new ArrayList<>();\r\n    labels1.add(userCreatorLabel1);\r\n    Label<?> label = combinedLabelBuilder.build(\"testLabelKey\", labels1);\r\n    Assertions.assertTrue(label.getLabelKey().equals(\"combined_testLabelKey1\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-computation-governance\\linkis-manager\\linkis-label-common\\src\\test\\java\\org\\apache\\linkis\\manager\\label\\builder\\factory\\StdLabelBuilderFactoryTest.java",
  "methodName" : "testRegisterLabelBuilder",
  "sourceCode" : "@Test\r\npublic void testRegisterLabelBuilder() throws Exception {\r\n    LabelBuilder labelBuilder = new CombinedLabelBuilder();\r\n    stdLabelBuilderFactory.registerLabelBuilder(labelBuilder);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-computation-governance\\linkis-manager\\linkis-label-common\\src\\test\\java\\org\\apache\\linkis\\manager\\label\\builder\\factory\\StdLabelBuilderFactoryTest.java",
  "methodName" : "testCreateLabelOutLabelClass",
  "sourceCode" : "@Test\r\npublic void testCreateLabelOutLabelClass() throws Exception {\r\n    EMInstanceLabel emInstanceLabel = new EMInstanceLabel();\r\n    emInstanceLabel.setLabelKey(\"testLabelKey\");\r\n    EMInstanceLabel emInstanceLabel1 = stdLabelBuilderFactory.createLabel(EMInstanceLabel.class);\r\n    Assertions.assertTrue(emInstanceLabel1.getLabelKey().equals(\"emInstance\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-computation-governance\\linkis-manager\\linkis-label-common\\src\\test\\java\\org\\apache\\linkis\\manager\\label\\builder\\factory\\StdLabelBuilderFactoryTest.java",
  "methodName" : "testCreateLabelForOutLabelClassOutValueTypes",
  "sourceCode" : "@Test\r\npublic void testCreateLabelForOutLabelClassOutValueTypes() throws Exception {\r\n    EMInstanceLabel emInstanceLabel = new EMInstanceLabel();\r\n    emInstanceLabel.setLabelKey(\"testLabelKey\");\r\n    EMInstanceLabel emInstanceLabel1 = stdLabelBuilderFactory.createLabel(EMInstanceLabel.class, null);\r\n    Assertions.assertTrue(emInstanceLabel1.getLabelKey().equals(\"emInstance\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-computation-governance\\linkis-manager\\linkis-label-common\\src\\test\\java\\org\\apache\\linkis\\manager\\label\\builder\\factory\\StdLabelBuilderFactoryTest.java",
  "methodName" : "testCreateLabelForInLabelKeyInValueObjOutLabelClass",
  "sourceCode" : "@Test\r\npublic void testCreateLabelForInLabelKeyInValueObjOutLabelClass() throws Exception {\r\n    EMInstanceLabel emInstanceLabel = new EMInstanceLabel();\r\n    emInstanceLabel.setLabelKey(\"testLabelKey\");\r\n    EMInstanceLabel emInstanceLabel1 = stdLabelBuilderFactory.createLabel(\"testLabelKey\", emInstanceLabel, EMInstanceLabel.class);\r\n    Assertions.assertTrue(emInstanceLabel1.getLabelKey().equals(\"emInstance\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-computation-governance\\linkis-manager\\linkis-label-common\\src\\test\\java\\org\\apache\\linkis\\manager\\label\\builder\\factory\\StdLabelBuilderFactoryTest.java",
  "methodName" : "testCreateLabelForInLabelKeyInValueStreamOutLabelClassOutValueTypes",
  "sourceCode" : "@Test\r\npublic void testCreateLabelForInLabelKeyInValueStreamOutLabelClassOutValueTypes() throws Exception {\r\n    EMInstanceLabel emInstanceLabel = new EMInstanceLabel();\r\n    emInstanceLabel.setLabelKey(\"testLabelKey\");\r\n    EMInstanceLabel emInstanceLabel1 = stdLabelBuilderFactory.createLabel(\"testLabelKey\", null, EMInstanceLabel.class, null);\r\n    Assertions.assertTrue(emInstanceLabel1.getLabelKey().equals(\"emInstance\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-computation-governance\\linkis-manager\\linkis-label-common\\src\\test\\java\\org\\apache\\linkis\\manager\\label\\builder\\factory\\StdLabelBuilderFactoryTest.java",
  "methodName" : "test",
  "sourceCode" : "@Test\r\npublic void test() {\r\n    Map input = new HashMap<String, String>();\r\n    input.put(\"userCreator\", \"username-IDE\");\r\n    input.put(\"yarnCluster\", \"bdp-test\");\r\n    input.put(\"executeOnce\", \"true\");\r\n    List<Label> res = stdLabelBuilderFactory.getLabels(input);\r\n    System.out.println(res);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-computation-governance\\linkis-manager\\linkis-label-common\\src\\test\\java\\org\\apache\\linkis\\manager\\label\\utils\\EngineTypeLabelCreatorTest.java",
  "methodName" : "testCreateEngineTypeLabel",
  "sourceCode" : "@Test\r\npublic void testCreateEngineTypeLabel() throws Exception {\r\n    EngineTypeLabelCreator.registerVersion(\"testType\", \"1.1.1\");\r\n    String type = \"testType\";\r\n    EngineTypeLabel engineTypeLabel = EngineTypeLabelCreator.createEngineTypeLabel(type);\r\n    Assertions.assertTrue(engineTypeLabel.getEngineType().equals(type));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-computation-governance\\linkis-manager\\linkis-label-common\\src\\test\\java\\org\\apache\\linkis\\manager\\label\\utils\\LabelUtilsTest.java",
  "methodName" : "testIsBasicType",
  "sourceCode" : "@Test\r\npublic void testIsBasicType() throws Exception {\r\n    boolean flag = LabelUtils.isBasicType(String.class);\r\n    Assertions.assertTrue(flag);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-computation-governance\\linkis-manager\\linkis-label-common\\src\\test\\java\\org\\apache\\linkis\\manager\\label\\utils\\LabelUtilsTest.java",
  "methodName" : "testGetOrderedValueNameInLabelClass",
  "sourceCode" : "@Test\r\npublic void testGetOrderedValueNameInLabelClass() throws Exception {\r\n    String[] VALUE_METHOD_PREFIX = new String[] { \"is\", \"get\", \"set\" };\r\n    List<String> list = LabelUtils.getOrderedValueNameInLabelClass(this.getClass(), VALUE_METHOD_PREFIX);\r\n    Assertions.assertTrue(list.isEmpty());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-computation-governance\\linkis-manager\\linkis-label-common\\src\\test\\java\\org\\apache\\linkis\\manager\\label\\utils\\LabelUtilsTest.java",
  "methodName" : "testDistinctLabel",
  "sourceCode" : "@Test\r\npublic void testDistinctLabel() throws Exception {\r\n    UserCreatorLabel userCreatorLabel1 = new UserCreatorLabel();\r\n    userCreatorLabel1.setLabelKey(\"testLabelKey1\");\r\n    UserCreatorLabel userCreatorLabel2 = new UserCreatorLabel();\r\n    userCreatorLabel2.setLabelKey(\"testLabelKey1\");\r\n    List<Label<?>> labels1 = new ArrayList<>();\r\n    labels1.add(userCreatorLabel1);\r\n    List<Label<?>> labels2 = new ArrayList<>();\r\n    labels2.add(userCreatorLabel2);\r\n    List<Label<?>> labels3 = LabelUtils.distinctLabel(labels1, labels2);\r\n    Assertions.assertTrue(labels3.size() == 1);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-computation-governance\\linkis-manager\\linkis-manager-common\\src\\test\\java\\org\\apache\\linkis\\manager\\common\\protocol\\engine\\EngineCreateRequestTest.java",
  "methodName" : "testTimeout",
  "sourceCode" : "@Test\r\nvoid testTimeout() {\r\n    ObjectNode jNode = objectMapper.createObjectNode();\r\n    // \"timeout\", \"properties\", \"createService\", \"user\", \"description\", \"labels\", \"ignoreTimeout\"\r\n    jNode.put(\"timeout\", 1000);\r\n    jNode.put(\"user\", \"hadoop\");\r\n    jNode.put(\"description\", \"test for node\");\r\n    jNode.put(\"ignoreTimeout\", false);\r\n    try {\r\n        EngineCreateRequest engineCreateRequest = objectMapper.treeToValue(jNode, EngineCreateRequest.class);\r\n        assertEquals(engineCreateRequest.getTimeout(), jNode.get(\"timeout\").asLong());\r\n    } catch (JsonProcessingException e) {\r\n        fail(\"Should not have thrown any exception\", e);\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-computation-governance\\linkis-manager\\linkis-manager-common\\src\\test\\java\\org\\apache\\linkis\\manager\\common\\protocol\\engine\\EngineCreateRequestTest.java",
  "methodName" : "testTimeOut",
  "sourceCode" : "@Test\r\nvoid testTimeOut() {\r\n    ObjectNode jNode = objectMapper.createObjectNode();\r\n    // \"timeout\", \"properties\", \"createService\", \"user\", \"description\", \"labels\", \"ignoreTimeout\"\r\n    jNode.put(\"timeOut\", 1000);\r\n    jNode.put(\"user\", \"hadoop\");\r\n    jNode.put(\"description\", \"test for node\");\r\n    jNode.put(\"ignoreTimeout\", false);\r\n    try {\r\n        EngineCreateRequest engineCreateRequest = objectMapper.treeToValue(jNode, EngineCreateRequest.class);\r\n        assertEquals(engineCreateRequest.getTimeout(), jNode.get(\"timeOut\").asLong());\r\n    } catch (JsonProcessingException e) {\r\n        fail(\"Should not have thrown any exception\", e);\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-computation-governance\\linkis-manager\\linkis-manager-persistence\\src\\test\\java\\org\\apache\\linkis\\manager\\dao\\LockManagerMapperTest.java",
  "methodName" : "lock",
  "sourceCode" : "@Test\r\nvoid lock() {\r\n    PersistenceLock persistenceLock = new PersistenceLock();\r\n    persistenceLock.setTimeOut(1L);\r\n    persistenceLock.setLockObject(\"testjson\");\r\n    persistenceLock.setCreator(\"hadoop\");\r\n    lockManagerMapper.lock(persistenceLock);\r\n    List<PersistenceLock> list = lockManagerMapper.getLockersByLockObject(\"testjson\");\r\n    assertTrue(list.size() >= 1);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-computation-governance\\linkis-manager\\linkis-manager-persistence\\src\\test\\java\\org\\apache\\linkis\\manager\\dao\\LockManagerMapperTest.java",
  "methodName" : "unlock",
  "sourceCode" : "@Test\r\nvoid unlock() {\r\n    lockManagerMapper.unlock(1);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-computation-governance\\linkis-manager\\linkis-manager-persistence\\src\\test\\java\\org\\apache\\linkis\\manager\\dao\\LockManagerMapperTest.java",
  "methodName" : "getLockersByLockObject",
  "sourceCode" : "@Test\r\nvoid getLockersByLockObject() {\r\n    lock();\r\n    List<PersistenceLock> list = lockManagerMapper.getLockersByLockObject(\"testjson\");\r\n    assertTrue(list.size() >= 1);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-computation-governance\\linkis-manager\\linkis-manager-persistence\\src\\test\\java\\org\\apache\\linkis\\manager\\dao\\LockManagerMapperTest.java",
  "methodName" : "getAll",
  "sourceCode" : "@Test\r\nvoid getAll() {\r\n    lock();\r\n    List<PersistenceLock> list = lockManagerMapper.getAll();\r\n    assertTrue(list.size() >= 1);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-computation-governance\\linkis-manager\\linkis-manager-persistence\\src\\test\\java\\org\\apache\\linkis\\manager\\dao\\NodeManagerMapperTest.java",
  "methodName" : "addNodeInstance",
  "sourceCode" : "@Test\r\nvoid addNodeInstance() {\r\n    PersistenceNode persistenceNode = new PersistenceNode();\r\n    persistenceNode.setInstance(\"instance2\");\r\n    persistenceNode.setName(\"testname2\");\r\n    persistenceNode.setOwner(\"testowner2\");\r\n    persistenceNode.setMark(\"testmark2\");\r\n    persistenceNode.setUpdator(\"testupdator2\");\r\n    persistenceNode.setCreator(\"testcreator2\");\r\n    nodeManagerMapper.addNodeInstance(persistenceNode);\r\n    PersistenceNode persistenceNodes = nodeManagerMapper.getNodeInstance(\"instance2\");\r\n    assertTrue(persistenceNodes != null);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-computation-governance\\linkis-manager\\linkis-manager-persistence\\src\\test\\java\\org\\apache\\linkis\\manager\\dao\\NodeManagerMapperTest.java",
  "methodName" : "updateNodeInstance",
  "sourceCode" : "@Test\r\nvoid updateNodeInstance() {\r\n    addNodeInstance();\r\n    PersistenceNode persistenceNode = new PersistenceNode();\r\n    persistenceNode.setInstance(\"instance3\");\r\n    persistenceNode.setName(\"testname3\");\r\n    persistenceNode.setOwner(\"testowner3\");\r\n    persistenceNode.setMark(\"testmark3\");\r\n    persistenceNode.setUpdator(\"testupdator3\");\r\n    persistenceNode.setCreator(\"testcreator3\");\r\n    nodeManagerMapper.updateNodeInstance(\"instance2\", persistenceNode);\r\n    PersistenceNode persistenceNodes = nodeManagerMapper.getNodeInstance(\"instance3\");\r\n    assertTrue(persistenceNodes != null);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-computation-governance\\linkis-manager\\linkis-manager-persistence\\src\\test\\java\\org\\apache\\linkis\\manager\\dao\\NodeManagerMapperTest.java",
  "methodName" : "removeNodeInstance",
  "sourceCode" : "@Test\r\nvoid removeNodeInstance() {\r\n    addNodeInstance();\r\n    nodeManagerMapper.removeNodeInstance(\"instance2\");\r\n    PersistenceNode persistenceNodes = nodeManagerMapper.getNodeInstance(\"instance2\");\r\n    assertTrue(persistenceNodes == null);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-computation-governance\\linkis-manager\\linkis-manager-persistence\\src\\test\\java\\org\\apache\\linkis\\manager\\dao\\NodeManagerMapperTest.java",
  "methodName" : "getNodeInstancesByOwner",
  "sourceCode" : "@Test\r\nvoid getNodeInstancesByOwner() {\r\n    addNodeInstance();\r\n    List<PersistenceNode> list = nodeManagerMapper.getNodeInstancesByOwner(\"testowner2\");\r\n    assertTrue(list.size() >= 1);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-computation-governance\\linkis-manager\\linkis-manager-persistence\\src\\test\\java\\org\\apache\\linkis\\manager\\dao\\NodeManagerMapperTest.java",
  "methodName" : "getAllNodes",
  "sourceCode" : "@Test\r\nvoid getAllNodes() {\r\n    addNodeInstance();\r\n    List<PersistenceNode> list = nodeManagerMapper.getAllNodes();\r\n    assertTrue(list.size() >= 1);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-computation-governance\\linkis-manager\\linkis-manager-persistence\\src\\test\\java\\org\\apache\\linkis\\manager\\dao\\NodeManagerMapperTest.java",
  "methodName" : "updateNodeInstanceOverload",
  "sourceCode" : "@Test\r\nvoid updateNodeInstanceOverload() {\r\n    addNodeInstance();\r\n    PersistenceNode persistenceNode = new PersistenceNode();\r\n    persistenceNode.setInstance(\"instance2\");\r\n    persistenceNode.setName(\"testname3\");\r\n    persistenceNode.setOwner(\"testowner3\");\r\n    persistenceNode.setMark(\"testmark3\");\r\n    persistenceNode.setUpdator(\"testupdator3\");\r\n    persistenceNode.setCreator(\"testcreator3\");\r\n    nodeManagerMapper.updateNodeInstanceByInstance(persistenceNode);\r\n    PersistenceNode persistenceNodes = nodeManagerMapper.getNodeInstance(\"instance2\");\r\n    assertTrue(persistenceNode.getName().equals(persistenceNodes.getName()));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-computation-governance\\linkis-manager\\linkis-manager-persistence\\src\\test\\java\\org\\apache\\linkis\\manager\\dao\\NodeManagerMapperTest.java",
  "methodName" : "getNodeInstanceId",
  "sourceCode" : "@Test\r\nvoid getNodeInstanceId() {\r\n    addNodeInstance();\r\n    int i = nodeManagerMapper.getNodeInstanceId(\"instance2\");\r\n    assertTrue(i >= 1);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-computation-governance\\linkis-manager\\linkis-manager-persistence\\src\\test\\java\\org\\apache\\linkis\\manager\\dao\\NodeManagerMapperTest.java",
  "methodName" : "getIdByInstance",
  "sourceCode" : "@Test\r\nvoid getIdByInstance() {\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-computation-governance\\linkis-manager\\linkis-manager-persistence\\src\\test\\java\\org\\apache\\linkis\\manager\\dao\\NodeManagerMapperTest.java",
  "methodName" : "getNodeInstanceIds",
  "sourceCode" : "@Test\r\nvoid getNodeInstanceIds() {\r\n    addNodeInstance();\r\n    List<String> stringList = new ArrayList<>();\r\n    stringList.add(\"instance1\");\r\n    stringList.add(\"instance2\");\r\n    List<Integer> list = nodeManagerMapper.getNodeInstanceIds(stringList);\r\n    assertTrue(list.size() >= 1);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-computation-governance\\linkis-manager\\linkis-manager-persistence\\src\\test\\java\\org\\apache\\linkis\\manager\\dao\\NodeManagerMapperTest.java",
  "methodName" : "getNodeInstance",
  "sourceCode" : "@Test\r\nvoid getNodeInstance() {\r\n    PersistenceNode persistenceNode = nodeManagerMapper.getNodeInstance(\"instance1\");\r\n    assertTrue(persistenceNode != null);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-computation-governance\\linkis-manager\\linkis-manager-persistence\\src\\test\\java\\org\\apache\\linkis\\manager\\dao\\NodeManagerMapperTest.java",
  "methodName" : "getNodeInstanceById",
  "sourceCode" : "@Test\r\nvoid getNodeInstanceById() {\r\n    PersistenceNode persistenceNode = nodeManagerMapper.getNodeInstanceById(1);\r\n    assertTrue(persistenceNode != null);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-computation-governance\\linkis-manager\\linkis-manager-persistence\\src\\test\\java\\org\\apache\\linkis\\manager\\dao\\NodeManagerMapperTest.java",
  "methodName" : "getEMNodeInstanceByEngineNode",
  "sourceCode" : "@Test\r\nvoid getEMNodeInstanceByEngineNode() {\r\n    PersistenceNode persistenceNode = nodeManagerMapper.getEMNodeInstanceByEngineNode(\"instance1\");\r\n    assertTrue(persistenceNode != null);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-computation-governance\\linkis-manager\\linkis-manager-persistence\\src\\test\\java\\org\\apache\\linkis\\manager\\dao\\NodeManagerMapperTest.java",
  "methodName" : "getNodeInstances",
  "sourceCode" : "@Test\r\nvoid getNodeInstances() {\r\n    List<PersistenceNode> list = nodeManagerMapper.getNodeInstances(\"instance1\");\r\n    assertTrue(list.size() >= 1);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-computation-governance\\linkis-manager\\linkis-manager-persistence\\src\\test\\java\\org\\apache\\linkis\\manager\\dao\\NodeManagerMapperTest.java",
  "methodName" : "getNodesByInstances",
  "sourceCode" : "@Test\r\nvoid getNodesByInstances() {\r\n    addNodeInstance();\r\n    List<String> stringList = new ArrayList<>();\r\n    stringList.add(\"instance1\");\r\n    stringList.add(\"instance2\");\r\n    List<PersistenceNode> list = nodeManagerMapper.getNodesByInstances(stringList);\r\n    assertTrue(list.size() >= 1);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-computation-governance\\linkis-manager\\linkis-manager-persistence\\src\\test\\java\\org\\apache\\linkis\\manager\\dao\\NodeManagerMapperTest.java",
  "methodName" : "addEngineNode",
  "sourceCode" : "@Test\r\nvoid addEngineNode() {\r\n    nodeManagerMapper.addEngineNode(\"instance1\", \"instance1\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-computation-governance\\linkis-manager\\linkis-manager-persistence\\src\\test\\java\\org\\apache\\linkis\\manager\\dao\\NodeManagerMapperTest.java",
  "methodName" : "deleteEngineNode",
  "sourceCode" : "@Test\r\nvoid deleteEngineNode() {\r\n    nodeManagerMapper.deleteEngineNode(\"instance1\", \"instance1\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-computation-governance\\linkis-manager\\linkis-manager-persistence\\src\\test\\java\\org\\apache\\linkis\\manager\\dao\\NodeManagerMapperTest.java",
  "methodName" : "getNodeInstanceIdsByOwner",
  "sourceCode" : "@Test\r\nvoid getNodeInstanceIdsByOwner() {\r\n    addNodeInstance();\r\n    List<Integer> list = nodeManagerMapper.getNodeInstanceIdsByOwner(\"testowner2\");\r\n    assertTrue(list.size() >= 1);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-computation-governance\\linkis-manager\\linkis-manager-persistence\\src\\test\\java\\org\\apache\\linkis\\manager\\dao\\NodeManagerMapperTest.java",
  "methodName" : "updateNodeRelation",
  "sourceCode" : "@Test\r\nvoid updateNodeRelation() {\r\n    nodeManagerMapper.updateNodeRelation(\"instance1\", \"instance2\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-computation-governance\\linkis-manager\\linkis-manager-persistence\\src\\test\\java\\org\\apache\\linkis\\manager\\dao\\NodeManagerMapperTest.java",
  "methodName" : "updateNodeLabelRelation",
  "sourceCode" : "@Test\r\nvoid updateNodeLabelRelation() {\r\n    nodeManagerMapper.updateNodeLabelRelation(\"instance1\", \"instance2\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-computation-governance\\linkis-manager\\linkis-manager-persistence\\src\\test\\java\\org\\apache\\linkis\\manager\\dao\\NodeMetricManagerMapperTest.java",
  "methodName" : "addNodeMetrics",
  "sourceCode" : "@Test\r\nvoid addNodeMetrics() {\r\n    PersistenceNodeMetrics nodeMetrics = new PersistenceNodeMetrics();\r\n    nodeMetrics.setInstance(\"instance1\");\r\n    nodeMetrics.setStatus(1);\r\n    nodeMetrics.setOverLoad(\"testoverload\");\r\n    nodeMetrics.setHeartBeatMsg(\"testheartbeat_msg\");\r\n    nodeMetrics.setHealthy(\"2\");\r\n    nodeMetricManagerMapper.addNodeMetrics(nodeMetrics);\r\n    PersistenceNodeMetrics persistenceNodeMetrics = nodeMetricManagerMapper.getNodeMetricsByInstance(\"instance1\");\r\n    assertTrue(persistenceNodeMetrics != null);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-computation-governance\\linkis-manager\\linkis-manager-persistence\\src\\test\\java\\org\\apache\\linkis\\manager\\dao\\NodeMetricManagerMapperTest.java",
  "methodName" : "checkInstanceExist",
  "sourceCode" : "@Test\r\nvoid checkInstanceExist() {\r\n    addNodeMetrics();\r\n    int i = nodeMetricManagerMapper.checkInstanceExist(\"instance1\");\r\n    assertTrue(i >= 1);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-computation-governance\\linkis-manager\\linkis-manager-persistence\\src\\test\\java\\org\\apache\\linkis\\manager\\dao\\NodeMetricManagerMapperTest.java",
  "methodName" : "getNodeMetricsByInstances",
  "sourceCode" : "@Test\r\nvoid getNodeMetricsByInstances() {\r\n    addNodeMetrics();\r\n    List<String> list = new ArrayList<>();\r\n    list.add(\"instance1\");\r\n    List<PersistenceNodeMetrics> persistenceNodeMetrics = nodeMetricManagerMapper.getNodeMetricsByInstances(list);\r\n    assertTrue(persistenceNodeMetrics.size() >= 1);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-computation-governance\\linkis-manager\\linkis-manager-persistence\\src\\test\\java\\org\\apache\\linkis\\manager\\dao\\NodeMetricManagerMapperTest.java",
  "methodName" : "getNodeMetricsByInstance",
  "sourceCode" : "@Test\r\nvoid getNodeMetricsByInstance() {\r\n    addNodeMetrics();\r\n    PersistenceNodeMetrics persistenceNodeMetrics = nodeMetricManagerMapper.getNodeMetricsByInstance(\"instance1\");\r\n    assertTrue(persistenceNodeMetrics != null);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-computation-governance\\linkis-manager\\linkis-manager-persistence\\src\\test\\java\\org\\apache\\linkis\\manager\\dao\\NodeMetricManagerMapperTest.java",
  "methodName" : "updateNodeMetrics",
  "sourceCode" : "@Test\r\nvoid updateNodeMetrics() {\r\n    addNodeMetrics();\r\n    PersistenceNodeMetrics nodeMetrics = new PersistenceNodeMetrics();\r\n    nodeMetrics.setStatus(2);\r\n    nodeMetrics.setOverLoad(\"testoverloads\");\r\n    nodeMetrics.setHeartBeatMsg(\"testheartbeat_msgs\");\r\n    nodeMetrics.setHealthy(\"2s\");\r\n    nodeMetricManagerMapper.updateNodeMetrics(nodeMetrics, \"instance1\");\r\n    PersistenceNodeMetrics persistenceNodeMetrics = nodeMetricManagerMapper.getNodeMetricsByInstance(\"instance1\");\r\n    assertTrue(persistenceNodeMetrics.getOverLoad().equals(\"testoverloads\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-computation-governance\\linkis-manager\\linkis-manager-persistence\\src\\test\\java\\org\\apache\\linkis\\manager\\dao\\NodeMetricManagerMapperTest.java",
  "methodName" : "deleteNodeMetrics",
  "sourceCode" : "@Test\r\nvoid deleteNodeMetrics() {\r\n    addNodeMetrics();\r\n    nodeMetricManagerMapper.deleteNodeMetrics(\"instance1\");\r\n    PersistenceNodeMetrics persistenceNodeMetrics = nodeMetricManagerMapper.getNodeMetricsByInstance(\"instance1\");\r\n    assertTrue(persistenceNodeMetrics == null);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-computation-governance\\linkis-manager\\linkis-manager-persistence\\src\\test\\java\\org\\apache\\linkis\\manager\\dao\\NodeMetricManagerMapperTest.java",
  "methodName" : "deleteNodeMetricsByInstance",
  "sourceCode" : "@Test\r\nvoid deleteNodeMetricsByInstance() {\r\n    addNodeMetrics();\r\n    nodeMetricManagerMapper.deleteNodeMetricsByInstance(\"instance1\");\r\n    PersistenceNodeMetrics persistenceNodeMetrics = nodeMetricManagerMapper.getNodeMetricsByInstance(\"instance1\");\r\n    assertTrue(persistenceNodeMetrics == null);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-computation-governance\\linkis-manager\\linkis-manager-persistence\\src\\test\\java\\org\\apache\\linkis\\manager\\dao\\NodeMetricManagerMapperTest.java",
  "methodName" : "getAllNodeMetrics",
  "sourceCode" : "@Test\r\nvoid getAllNodeMetrics() {\r\n    addNodeMetrics();\r\n    List<PersistenceNodeMetricsEntity> list = nodeMetricManagerMapper.getAllNodeMetrics();\r\n    assertTrue(list.size() >= 1);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-computation-governance\\linkis-manager\\linkis-manager-persistence\\src\\test\\java\\org\\apache\\linkis\\manager\\dao\\ResourceManagerMapperTest.java",
  "methodName" : "registerResource",
  "sourceCode" : "@Test\r\nvoid registerResource() {\r\n    PersistenceResource persistenceResource = new PersistenceResource();\r\n    persistenceResource.setId(1);\r\n    persistenceResource.setMaxResource(\"testmax\");\r\n    persistenceResource.setMinResource(\"mintest\");\r\n    persistenceResource.setLeftResource(\"left\");\r\n    persistenceResource.setUsedResource(\"user\");\r\n    persistenceResource.setTicketId(\"1\");\r\n    persistenceResource.setResourceType(\"testtype\");\r\n    resourceManagerMapper.registerResource(persistenceResource);\r\n    PersistenceResource persistenceResources = resourceManagerMapper.getResourceById(1);\r\n    assertThat(persistenceResources.getId()).usingRecursiveComparison().isEqualTo(persistenceResource.getId());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-computation-governance\\linkis-manager\\linkis-manager-persistence\\src\\test\\java\\org\\apache\\linkis\\manager\\dao\\ResourceManagerMapperTest.java",
  "methodName" : "nodeResourceUpdate",
  "sourceCode" : "@Test\r\nvoid nodeResourceUpdate() {\r\n    registerResource();\r\n    PersistenceResource persistenceResource = new PersistenceResource();\r\n    persistenceResource.setId(1);\r\n    persistenceResource.setMaxResource(\"testmaxss\");\r\n    persistenceResource.setMinResource(\"mintestss\");\r\n    persistenceResource.setLeftResource(\"left\");\r\n    persistenceResource.setUsedResource(\"user\");\r\n    persistenceResource.setResourceType(\"testtype\");\r\n    persistenceResource.setUpdateTime(new Date());\r\n    resourceManagerMapper.nodeResourceUpdate(\"1\", persistenceResource);\r\n    PersistenceResource persistenceResources = resourceManagerMapper.getResourceById(1);\r\n    assertTrue(persistenceResources.getMaxResource() == persistenceResource.getMaxResource());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-computation-governance\\linkis-manager\\linkis-manager-persistence\\src\\test\\java\\org\\apache\\linkis\\manager\\dao\\ResourceManagerMapperTest.java",
  "methodName" : "nodeResourceUpdateByResourceId",
  "sourceCode" : "@Test\r\nvoid nodeResourceUpdateByResourceId() {\r\n    registerResource();\r\n    PersistenceResource persistenceResource = new PersistenceResource();\r\n    persistenceResource.setId(1);\r\n    persistenceResource.setMaxResource(\"testmaxss\");\r\n    persistenceResource.setMinResource(\"mintestss\");\r\n    persistenceResource.setLeftResource(\"left\");\r\n    persistenceResource.setUsedResource(\"user\");\r\n    resourceManagerMapper.nodeResourceUpdateByResourceId(1, persistenceResource);\r\n    assertTrue(persistenceResource.getMaxResource() == persistenceResource.getMaxResource());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-computation-governance\\linkis-manager\\linkis-manager-persistence\\src\\test\\java\\org\\apache\\linkis\\manager\\dao\\ResourceManagerMapperTest.java",
  "methodName" : "getNodeResourceUpdateResourceId",
  "sourceCode" : "@Test\r\nvoid getNodeResourceUpdateResourceId() {\r\n    PersistenceResource persistenceResource = new PersistenceResource();\r\n    persistenceResource.setId(1);\r\n    persistenceResource.setMaxResource(\"testmax\");\r\n    persistenceResource.setMinResource(\"mintest\");\r\n    persistenceResource.setLeftResource(\"left\");\r\n    persistenceResource.setUsedResource(\"user\");\r\n    persistenceResource.setResourceType(\"testtype\");\r\n    resourceManagerMapper.registerResource(persistenceResource);\r\n    Integer i = resourceManagerMapper.getNodeResourceUpdateResourceId(\"instance1\");\r\n    assertTrue(i >= 1);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-computation-governance\\linkis-manager\\linkis-manager-persistence\\src\\test\\java\\org\\apache\\linkis\\manager\\dao\\ResourceManagerMapperTest.java",
  "methodName" : "deleteResourceAndLabelId",
  "sourceCode" : "@Test\r\nvoid deleteResourceAndLabelId() {\r\n    resourceManagerMapper.deleteResourceAndLabelId(\"instance1\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-computation-governance\\linkis-manager\\linkis-manager-persistence\\src\\test\\java\\org\\apache\\linkis\\manager\\dao\\ResourceManagerMapperTest.java",
  "methodName" : "deleteResourceByInstance",
  "sourceCode" : "@Test\r\nvoid deleteResourceByInstance() {\r\n    registerResource();\r\n    resourceManagerMapper.deleteResourceByInstance(\"instance1\");\r\n    List<PersistenceResource> list = resourceManagerMapper.getResourceByServiceInstance(\"instance1\");\r\n    assertTrue(list.size() == 0);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-computation-governance\\linkis-manager\\linkis-manager-persistence\\src\\test\\java\\org\\apache\\linkis\\manager\\dao\\ResourceManagerMapperTest.java",
  "methodName" : "deleteResourceByTicketId",
  "sourceCode" : "@Test\r\nvoid deleteResourceByTicketId() {\r\n    registerResource();\r\n    resourceManagerMapper.deleteResourceByTicketId(\"1\");\r\n    PersistenceResource persistenceResource = resourceManagerMapper.getNodeResourceByTicketId(\"1\");\r\n    assertTrue(persistenceResource == null);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-computation-governance\\linkis-manager\\linkis-manager-persistence\\src\\test\\java\\org\\apache\\linkis\\manager\\dao\\ResourceManagerMapperTest.java",
  "methodName" : "getResourceByInstanceAndResourceType",
  "sourceCode" : "@Test\r\nvoid getResourceByInstanceAndResourceType() {\r\n    registerResource();\r\n    List<PersistenceResource> list = resourceManagerMapper.getResourceByInstanceAndResourceType(\"instance1\", \"testtype\");\r\n    int i = list.size();\r\n    assertTrue(i == 1);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-computation-governance\\linkis-manager\\linkis-manager-persistence\\src\\test\\java\\org\\apache\\linkis\\manager\\dao\\ResourceManagerMapperTest.java",
  "methodName" : "getResourceByServiceInstance",
  "sourceCode" : "@Test\r\nvoid getResourceByServiceInstance() {\r\n    registerResource();\r\n    List<PersistenceResource> list = resourceManagerMapper.getResourceByServiceInstance(\"instance1\");\r\n    int i = list.size();\r\n    assertTrue(i == 1);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-computation-governance\\linkis-manager\\linkis-manager-persistence\\src\\test\\java\\org\\apache\\linkis\\manager\\dao\\ResourceManagerMapperTest.java",
  "methodName" : "getNodeResourceByTicketId",
  "sourceCode" : "@Test\r\nvoid getNodeResourceByTicketId() {\r\n    registerResource();\r\n    PersistenceResource persistenceResource = resourceManagerMapper.getNodeResourceByTicketId(\"1\");\r\n    assertTrue(persistenceResource != null);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-computation-governance\\linkis-manager\\linkis-manager-persistence\\src\\test\\java\\org\\apache\\linkis\\manager\\dao\\ResourceManagerMapperTest.java",
  "methodName" : "getResourceByUserName",
  "sourceCode" : "@Test\r\nvoid getResourceByUserName() {\r\n    registerResource();\r\n    List<PersistenceResource> list = resourceManagerMapper.getResourceByUserName(\"testname\");\r\n    int i = list.size();\r\n    assertTrue(i == 1);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-computation-governance\\linkis-manager\\linkis-manager-persistence\\src\\test\\java\\org\\apache\\linkis\\manager\\dao\\ResourceManagerMapperTest.java",
  "methodName" : "getLabelsByTicketId",
  "sourceCode" : "@Test\r\nvoid getLabelsByTicketId() {\r\n    registerResource();\r\n    List<PersistenceLabel> list = resourceManagerMapper.getLabelsByTicketId(\"1\");\r\n    int i = list.size();\r\n    assertTrue(i == 1);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-computation-governance\\linkis-manager\\linkis-manager-persistence\\src\\test\\java\\org\\apache\\linkis\\manager\\dao\\ResourceManagerMapperTest.java",
  "methodName" : "deleteResourceById",
  "sourceCode" : "@Test\r\nvoid deleteResourceById() {\r\n    registerResource();\r\n    List<Integer> list = new ArrayList<>();\r\n    list.add(1);\r\n    resourceManagerMapper.deleteResourceById(list);\r\n    PersistenceResource persistenceResource = resourceManagerMapper.getResourceById(1);\r\n    assertTrue(persistenceResource == null);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-computation-governance\\linkis-manager\\linkis-manager-persistence\\src\\test\\java\\org\\apache\\linkis\\manager\\dao\\ResourceManagerMapperTest.java",
  "methodName" : "deleteResourceRelByResourceId",
  "sourceCode" : "@Test\r\nvoid deleteResourceRelByResourceId() {\r\n    List<Integer> list = new ArrayList<>();\r\n    list.add(1);\r\n    resourceManagerMapper.deleteResourceRelByResourceId(list);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-computation-governance\\linkis-manager\\linkis-manager-persistence\\src\\test\\java\\org\\apache\\linkis\\manager\\dao\\ResourceManagerMapperTest.java",
  "methodName" : "getResourceById",
  "sourceCode" : "@Test\r\nvoid getResourceById() {\r\n    registerResource();\r\n    PersistenceResource persistenceResource = resourceManagerMapper.getResourceById(1);\r\n    assertTrue(persistenceResource != null);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-engineconn-plugins\\hive\\src\\test\\java\\org\\apache\\linkis\\common\\errorcode\\HiveErrorCodeSummaryTest.java",
  "methodName" : "testGetErrorCode",
  "sourceCode" : "@Test\r\nvoid testGetErrorCode() {\r\n    assertEquals(26040, CREATE_HIVE_EXECUTOR_ERROR.getErrorCode());\r\n    assertEquals(26041, HIVE_EXEC_JAR_ERROR.getErrorCode());\r\n    assertEquals(26042, GET_FIELD_SCHEMAS_ERROR.getErrorCode());\r\n    assertEquals(26043, INVALID_VALUE.getErrorCode());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-engineconn-plugins\\hive\\src\\test\\java\\org\\apache\\linkis\\common\\errorcode\\HiveErrorCodeSummaryTest.java",
  "methodName" : "testGetErrorDesc",
  "sourceCode" : "@Test\r\nvoid testGetErrorDesc() {\r\n    assertEquals(\"failed to create hive executor(创建hive执行器失败)\", CREATE_HIVE_EXECUTOR_ERROR.getErrorDesc());\r\n    assertEquals(\"cannot find hive-exec.jar, start session failed(找不到 hive-exec.jar，启动会话失败)\", HIVE_EXEC_JAR_ERROR.getErrorDesc());\r\n    assertEquals(\"cannot get the field schemas(无法获取字段 schemas)\", GET_FIELD_SCHEMAS_ERROR.getErrorDesc());\r\n    assertEquals(\"invalid value(无效值)\", INVALID_VALUE.getErrorDesc());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-engineconn-plugins\\jdbc\\src\\test\\java\\org\\apache\\linkis\\manager\\engineplugin\\jdbc\\ConnectionManagerTest.java",
  "methodName" : "testCreateJdbcConnAndExecSql",
  "sourceCode" : "@Test\r\n@DisplayName(\"testCreateJdbcConnAndExecSql\")\r\npublic void testCreateJdbcConnAndExecSql() throws SQLException, JDBCParamsIllegalException, ClassNotFoundException {\r\n    Map<String, String> properties = new HashMap<>(8);\r\n    properties.put(JDBCEngineConnConstant.JDBC_URL, \"jdbc:h2:mem:linkis_db;MODE=MySQL;DATABASE_TO_LOWER=TRUE\");\r\n    properties.put(JDBCEngineConnConstant.JDBC_DRIVER, \"org.h2.Driver\");\r\n    properties.put(JDBCEngineConnConstant.JDBC_USERNAME, \"user\");\r\n    properties.put(JDBCEngineConnConstant.JDBC_PASSWORD, \"password\");\r\n    properties.put(JDBCEngineConnConstant.JDBC_POOL_DEFAULT_VALIDATION_QUERY, \"SELECT 1\");\r\n    properties.put(JDBCEngineConnConstant.JDBC_AUTH_TYPE, \"USERNAME\");\r\n    properties.put(JDBCEngineConnConstant.JDBC_KERBEROS_AUTH_TYPE_PRINCIPAL, \"\");\r\n    properties.put(JDBCEngineConnConstant.JDBC_KERBEROS_AUTH_TYPE_KEYTAB_LOCATION, \"\");\r\n    properties.put(JDBCEngineConnConstant.JDBC_PROXY_USER_PROPERTY, \"\");\r\n    properties.put(JDBCEngineConnConstant.JDBC_PROXY_USER, \"\");\r\n    properties.put(JDBCEngineConnConstant.JDBC_SCRIPTS_EXEC_USER, \"leo_jie\");\r\n    ConnectionManager connectionManager = ConnectionManager.getInstance();\r\n    Connection conn = connectionManager.getConnection(\"jdbc-1\", properties);\r\n    Statement statement = conn.createStatement();\r\n    ResultSet rs = statement.executeQuery(\"show databases;\");\r\n    while (rs.next()) {\r\n        System.out.println(rs.getObject(1));\r\n    }\r\n    rs.close();\r\n    statement.close();\r\n    conn.close();\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-engineconn-plugins\\jdbc\\src\\test\\java\\org\\apache\\linkis\\manager\\engineplugin\\jdbc\\ConnectionManagerTest.java",
  "methodName" : "testJDBCPropertiesParserGetLong",
  "sourceCode" : "@Test\r\n@DisplayName(\"testCreateJdbcConnAndExecSql\")\r\npublic void testJDBCPropertiesParserGetLong() {\r\n    Map<String, String> properties = new HashMap<>(1);\r\n    properties.put(\"key\", \"10\");\r\n    long v = JDBCPropertiesParser.getLong(properties, \"key\", 0);\r\n    Assertions.assertEquals(10, v);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-engineconn-plugins\\jdbc\\src\\test\\java\\org\\apache\\linkis\\manager\\engineplugin\\jdbc\\errorcode\\JDBCErrorCodeSummaryTest.java",
  "methodName" : "testGetErrorCode",
  "sourceCode" : "@Test\r\nvoid testGetErrorCode() {\r\n    assertEquals(26010, JDBC_GET_DATASOURCEINFO_ERROR.getErrorCode());\r\n    assertEquals(26011, JDBC_PARAMS_ILLEGAL.getErrorCode());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-engineconn-plugins\\jdbc\\src\\test\\java\\org\\apache\\linkis\\manager\\engineplugin\\jdbc\\errorcode\\JDBCErrorCodeSummaryTest.java",
  "methodName" : "testGetErrorDesc",
  "sourceCode" : "@Test\r\nvoid testGetErrorDesc() {\r\n    assertEquals(\"Failed to get datasource info from datasource server(从数据源服务器获取数据源信息失败)\", JDBC_GET_DATASOURCEINFO_ERROR.getErrorDesc());\r\n    assertEquals(\"JDBC related parameters are illegal(JDBC 相关参数非法)\", JDBC_PARAMS_ILLEGAL.getErrorDesc());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-engineconn-plugins\\jdbc\\src\\test\\java\\org\\apache\\linkis\\manager\\engineplugin\\jdbc\\ProgressMonitorTest.java",
  "methodName" : "testProgressMonitor",
  "sourceCode" : "@Test\r\n@DisplayName(\"testProgressMonitor\")\r\npublic void testProgressMonitor() throws SQLException {\r\n    ProgressMonitor<?> monitor = ProgressMonitor.attachMonitor(null);\r\n    Assertions.assertNull(monitor);\r\n    String url = \"jdbc:trino://127.0.0.1:8080/hive/test\";\r\n    Properties properties = new Properties();\r\n    properties.setProperty(\"user\", \"test\");\r\n    Connection connection = DriverManager.getConnection(url, properties);\r\n    monitor = ProgressMonitor.attachMonitor(connection.createStatement());\r\n    Assertions.assertNotNull(monitor);\r\n    AtomicBoolean callbackFlag = new AtomicBoolean(false);\r\n    monitor.callback(() -> callbackFlag.set(true));\r\n    Assertions.assertFalse(callbackFlag.get());\r\n    ProgressMonitor<QueryStats> trinoMonitor = (ProgressMonitor<QueryStats>) monitor;\r\n    trinoMonitor.accept(new QueryStats(\"testId\", \"testState\", false, false, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, Optional.empty()));\r\n    Assertions.assertTrue(callbackFlag.get());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-engineconn-plugins\\jdbc\\src\\test\\java\\org\\apache\\linkis\\manager\\engineplugin\\jdbc\\utils\\JdbcParamUtilsTest.java",
  "methodName" : "testGetJdbcUsername",
  "sourceCode" : "@Test\r\n@DisplayName(\"testGetJdbcUsername\")\r\npublic void testGetJdbcUsername() throws JDBCParamsIllegalException {\r\n    Map<String, String> properties = new HashMap<>();\r\n    properties.put(JDBCEngineConnConstant.JDBC_USERNAME, \"test123?autoDeserialize=true\");\r\n    String username = JdbcParamUtils.getJdbcUsername(properties);\r\n    Assertions.assertEquals(\"test123?=true\", username);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-engineconn-plugins\\jdbc\\src\\test\\java\\org\\apache\\linkis\\manager\\engineplugin\\jdbc\\utils\\JdbcParamUtilsTest.java",
  "methodName" : "testGetJdbcPassword",
  "sourceCode" : "@Test\r\n@DisplayName(\"testGetJdbcPassword\")\r\npublic void testGetJdbcPassword() throws JDBCParamsIllegalException {\r\n    Map<String, String> properties = new HashMap<>();\r\n    properties.put(JDBCEngineConnConstant.JDBC_USERNAME, \"test_pwd?autoDeserialize=true\");\r\n    String password = JdbcParamUtils.getJdbcUsername(properties);\r\n    Assertions.assertEquals(\"test_pwd?=true\", password);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-engineconn-plugins\\openlookeng\\src\\test\\java\\org\\apache\\linkis\\engineplugin\\openlookeng\\errorcode\\OpenLooKengErrorCodeSummaryTest.java",
  "methodName" : "testGetErrorCode",
  "sourceCode" : "@Test\r\nvoid testGetErrorCode() {\r\n    assertEquals(26030, OPENLOOKENG_CLIENT_ERROR.getErrorCode());\r\n    assertEquals(26031, OPENLOOKENG_STATUS_ERROR.getErrorCode());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-engineconn-plugins\\openlookeng\\src\\test\\java\\org\\apache\\linkis\\engineplugin\\openlookeng\\errorcode\\OpenLooKengErrorCodeSummaryTest.java",
  "methodName" : "testGetErrorDesc",
  "sourceCode" : "@Test\r\nvoid testGetErrorDesc() {\r\n    assertEquals(\"openlookeng client error(openlookeng客户端异常)\", OPENLOOKENG_CLIENT_ERROR.getErrorDesc());\r\n    assertEquals(\"openlookeng status error,statement is not finished(openlookeng状态异常, 查询语句未完成)\", OPENLOOKENG_STATUS_ERROR.getErrorDesc());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-engineconn-plugins\\presto\\src\\test\\java\\org\\apache\\linkis\\engineplugin\\presto\\builder\\TestPrestoProcessEngineConnLaunchBuilder.java",
  "methodName" : "testGetEngineStartUser",
  "sourceCode" : "@Test\r\npublic void testGetEngineStartUser() {\r\n    PrestoProcessEngineConnLaunchBuilder engineConnLaunchBuilder = new PrestoProcessEngineConnLaunchBuilder();\r\n    UserCreatorLabel userCreatorLabel = new UserCreatorLabel();\r\n    String value = engineConnLaunchBuilder.getEngineStartUser(userCreatorLabel);\r\n    Assertions.assertEquals(value, \"hadoop\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-engineconn-plugins\\presto\\src\\test\\java\\org\\apache\\linkis\\engineplugin\\presto\\conf\\TestPrestoConfiguration.java",
  "methodName" : "testConfig",
  "sourceCode" : "@Test\r\npublic void testConfig() {\r\n    Assertions.assertEquals(100, PrestoConfiguration.ENGINE_CONCURRENT_LIMIT.getValue());\r\n    Assertions.assertEquals(60, PrestoConfiguration.PRESTO_HTTP_CONNECT_TIME_OUT.getValue());\r\n    Assertions.assertEquals(60, PrestoConfiguration.PRESTO_HTTP_READ_TIME_OUT.getValue());\r\n    Assertions.assertEquals(5000, PrestoConfiguration.ENGINE_DEFAULT_LIMIT.getValue());\r\n    Assertions.assertEquals(\"http://127.0.0.1:8080\", PrestoConfiguration.PRESTO_URL.getValue());\r\n    Assertions.assertEquals(\"\", PrestoConfiguration.PRESTO_RESOURCE_CONFIG_PATH.getValue());\r\n    Assertions.assertEquals(\"default\", PrestoConfiguration.PRESTO_USER_NAME.getValue());\r\n    Assertions.assertEquals(\"\", PrestoConfiguration.PRESTO_PASSWORD.getValue());\r\n    Assertions.assertEquals(\"system\", PrestoConfiguration.PRESTO_CATALOG.getValue());\r\n    Assertions.assertEquals(\"\", PrestoConfiguration.PRESTO_SCHEMA.getValue());\r\n    Assertions.assertEquals(\"global\", PrestoConfiguration.PRESTO_SOURCE.getValue());\r\n    Assertions.assertEquals(\"8GB\", PrestoConfiguration.PRESTO_REQUEST_MEMORY.getValue());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-engineconn-plugins\\presto\\src\\test\\java\\org\\apache\\linkis\\engineplugin\\presto\\errorcode\\PrestoErrorCodeSummaryTest.java",
  "methodName" : "testGetErrorCode",
  "sourceCode" : "@Test\r\nvoid testGetErrorCode() {\r\n    assertEquals(26001, PRESTO_STATE_INVALID.getErrorCode());\r\n    assertEquals(26002, PRESTO_CLIENT_ERROR.getErrorCode());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-engineconn-plugins\\presto\\src\\test\\java\\org\\apache\\linkis\\engineplugin\\presto\\errorcode\\PrestoErrorCodeSummaryTest.java",
  "methodName" : "testGetErrorDesc",
  "sourceCode" : "@Test\r\nvoid testGetErrorDesc() {\r\n    assertEquals(\"Presto status error,statement is not finished(Presto服务状态异常, 查询语句没有执行结束)\", PRESTO_STATE_INVALID.getErrorDesc());\r\n    assertEquals(\"Presto client error(Presto客户端异常)\", PRESTO_CLIENT_ERROR.getErrorDesc());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-engineconn-plugins\\presto\\src\\test\\java\\org\\apache\\linkis\\engineplugin\\presto\\exception\\TestPrestoException.java",
  "methodName" : "testPrestoStateInvalidException",
  "sourceCode" : "@Test\r\npublic void testPrestoStateInvalidException() {\r\n    Assertions.assertNotNull(new PrestoStateInvalidException(PrestoErrorCodeSummary.PRESTO_STATE_INVALID.getErrorCode(), PrestoErrorCodeSummary.PRESTO_STATE_INVALID.getErrorDesc()));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-engineconn-plugins\\presto\\src\\test\\java\\org\\apache\\linkis\\engineplugin\\presto\\exception\\TestPrestoException.java",
  "methodName" : "testPythonSessionStartFailedException",
  "sourceCode" : "@Test\r\npublic void testPythonSessionStartFailedException() {\r\n    Assertions.assertNotNull(new PrestoClientException(PrestoErrorCodeSummary.PRESTO_CLIENT_ERROR.getErrorCode(), PrestoErrorCodeSummary.PRESTO_CLIENT_ERROR.getErrorDesc()));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-engineconn-plugins\\presto\\src\\test\\java\\org\\apache\\linkis\\engineplugin\\presto\\factory\\TestPrestoEngineConnFactory.java",
  "methodName" : "testNewExecutor",
  "sourceCode" : "@Test\r\npublic void testNewExecutor() {\r\n    System.setProperty(\"wds.linkis.server.version\", \"v1\");\r\n    System.setProperty(\"wds.linkis.engineconn.plugin.default.class\", \"org.apache.linkis.engineplugin.presto.PrestoEngineConnPlugin\");\r\n    System.setProperty(\"prestoVersion\", \"presto\");\r\n    PrestoEngineConnFactory engineConnFactory = new PrestoEngineConnFactory();\r\n    EngineCreationContext engineCreationContext = new DefaultEngineCreationContext();\r\n    HashMap<String, String> jMap = new HashMap<>();\r\n    jMap.put(\"presto.version\", \"presto\");\r\n    engineCreationContext.setOptions(jMap);\r\n    EngineConn engineConn = engineConnFactory.createEngineConn(engineCreationContext);\r\n    Object executor = engineConnFactory.newExecutor(1, engineCreationContext, engineConn);\r\n    Assertions.assertNotNull(executor);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-engineconn-plugins\\presto\\src\\test\\java\\org\\apache\\linkis\\engineplugin\\presto\\TestPrestoEngineConnPlugin.java",
  "methodName" : "testGetEngineResourceFactory",
  "sourceCode" : "@Test\r\npublic void testGetEngineResourceFactory() {\r\n    PrestoEngineConnPlugin prestoEngineConnPlugin = new PrestoEngineConnPlugin();\r\n    Assertions.assertNotNull(prestoEngineConnPlugin.getEngineConnFactory());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-engineconn-plugins\\presto\\src\\test\\java\\org\\apache\\linkis\\engineplugin\\presto\\utils\\TestPrestoSQLHook.java",
  "methodName" : "testPreExecuteHook",
  "sourceCode" : "@Test\r\npublic void testPreExecuteHook() {\r\n    String code = \"`1104`\";\r\n    String codes = PrestoSQLHook.preExecuteHook(code);\r\n    Assertions.assertEquals(codes, \"\\\"1104\\\"\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-public-enhancements\\linkis-bml-server\\src\\test\\java\\org\\apache\\linkis\\bml\\common\\HdfsResourceHelperTest.java",
  "methodName" : "testCheckBmlResourceStoragePrefixPathIfChanged",
  "sourceCode" : "@Test\r\n@DisplayName(\"testCheckBmlResourceStoragePrefixPathIfChanged\")\r\npublic void testCheckBmlResourceStoragePrefixPathIfChanged() {\r\n    String path = \"hdfs:///data/linkis/linkis/20220609/b4fd8f59-9492-4a0f-a074-9ac573a69b60\";\r\n    ResourceHelper hdfsResourceHelper = new HdfsResourceHelper();\r\n    boolean hasChanged = hdfsResourceHelper.checkBmlResourceStoragePrefixPathIfChanged(path);\r\n    assertTrue(hasChanged);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-public-enhancements\\linkis-bml-server\\src\\test\\java\\org\\apache\\linkis\\bml\\common\\LocalResourceHelperTest.java",
  "methodName" : "testCheckBmlResourceStoragePrefixPathIfChanged",
  "sourceCode" : "@Test\r\n@DisplayName(\"testCheckBmlResourceStoragePrefixPathIfChanged\")\r\npublic void testCheckBmlResourceStoragePrefixPathIfChanged() {\r\n    String path = \"file:///data/dss/bml/linkis/linkis/20220609/b4fd8f59-9492-4a0f-a074-9ac573a69b60\";\r\n    LocalResourceHelper localResourceHelper = new LocalResourceHelper();\r\n    boolean hasChanged = localResourceHelper.checkBmlResourceStoragePrefixPathIfChanged(path);\r\n    assertFalse(hasChanged);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-public-enhancements\\linkis-bml-server\\src\\test\\java\\org\\apache\\linkis\\bml\\common\\VersionServiceImplTest.java",
  "methodName" : "testUpdateVersion",
  "sourceCode" : "@Test\r\n@DisplayName(\"testCheckBmlResourceStoragePrefixPathIfChanged\")\r\npublic void testUpdateVersion() {\r\n    String path = \"hdfs:///data/linkis/linkis/20220609/b4fd8f59-9492-4a0f-a074-9ac573a69b60\";\r\n    SimpleDateFormat format = new SimpleDateFormat(\"yyyyMMdd\");\r\n    String dateStr = format.format(new Date());\r\n    ResourceHelper hdfsResourceHelper = new HdfsResourceHelper();\r\n    String newPath = hdfsResourceHelper.generatePath(\"linkis\", path.substring(path.lastIndexOf(\"/\") + 1), new HashMap<>());\r\n    assertEquals(newPath, \"hdfs:///apps-data/linkis/bml/\" + dateStr + \"/b4fd8f59-9492-4a0f-a074-9ac573a69b60\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-public-enhancements\\linkis-bml-server\\src\\test\\java\\org\\apache\\linkis\\bml\\dao\\BmlProjectDaoTest.java",
  "methodName" : "testCreateNewProject",
  "sourceCode" : "@Test\r\nvoid testCreateNewProject() {\r\n    BmlProject bmlProject = new BmlProject();\r\n    bmlProject.setName(\"testName\");\r\n    bmlProject.setSystem(\"testSy\");\r\n    bmlProject.setSource(\"test\");\r\n    bmlProject.setDescription(\"descTest\");\r\n    bmlProject.setCreator(\"creCreatorUser\");\r\n    bmlProject.setEnabled(1);\r\n    bmlProject.setCreateTime(new Date());\r\n    bmlProjectDao.createNewProject(bmlProject);\r\n    BmlProject bmlProjects = bmlProjectDao.getBmlProject(\"testName\");\r\n    assertTrue(bmlProjects != null);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-public-enhancements\\linkis-bml-server\\src\\test\\java\\org\\apache\\linkis\\bml\\dao\\BmlProjectDaoTest.java",
  "methodName" : "testGetBmlProject",
  "sourceCode" : "@Test\r\nvoid testGetBmlProject() {\r\n    insertNewProject();\r\n    bmlProjectDao.getBmlProject(\"testName\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-public-enhancements\\linkis-bml-server\\src\\test\\java\\org\\apache\\linkis\\bml\\dao\\BmlProjectDaoTest.java",
  "methodName" : "testSetProjectPriv",
  "sourceCode" : "@Test\r\nvoid testSetProjectPriv() {\r\n    List<String> usernamesList = new ArrayList<>();\r\n    usernamesList.add(\"creCreatorUser\");\r\n    usernamesList.add(\"creCreatorUser1\");\r\n    int priv = 2;\r\n    bmlProjectDao.setProjectPriv(1, usernamesList, priv, \"creCreatorUser\", new Date());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-public-enhancements\\linkis-bml-server\\src\\test\\java\\org\\apache\\linkis\\bml\\dao\\BmlProjectDaoTest.java",
  "methodName" : "testGetPrivInProject",
  "sourceCode" : "@Test\r\nvoid testGetPrivInProject() {\r\n    Integer privInt = bmlProjectDao.getPrivInProject(\"testName\", \"creCreatorUser\");\r\n    logger.info(\"privInt:\" + privInt);\r\n    assertTrue(privInt == 2);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-public-enhancements\\linkis-bml-server\\src\\test\\java\\org\\apache\\linkis\\bml\\dao\\BmlProjectDaoTest.java",
  "methodName" : "testAddProjectResource",
  "sourceCode" : "@Test\r\nvoid testAddProjectResource() {\r\n    bmlProjectDao.addProjectResource(1, \"123\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-public-enhancements\\linkis-bml-server\\src\\test\\java\\org\\apache\\linkis\\bml\\dao\\BmlProjectDaoTest.java",
  "methodName" : "testGetProjectNameByResourceId",
  "sourceCode" : "@Test\r\nvoid testGetProjectNameByResourceId() {\r\n    String projectName = bmlProjectDao.getProjectNameByResourceId(\"123\");\r\n    logger.info(\"projectName:\" + projectName);\r\n    assertTrue(projectName.equals(\"testName\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-public-enhancements\\linkis-bml-server\\src\\test\\java\\org\\apache\\linkis\\bml\\dao\\BmlProjectDaoTest.java",
  "methodName" : "testGetProjectIdByName",
  "sourceCode" : "@Test\r\nvoid testGetProjectIdByName() {\r\n    insertNewProject();\r\n    bmlProjectDao.getProjectIdByName(\"testName\");\r\n    Integer i = bmlProjectDao.getProjectIdByName(\"testName\");\r\n    assertTrue(i != null);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-public-enhancements\\linkis-bml-server\\src\\test\\java\\org\\apache\\linkis\\bml\\dao\\BmlProjectDaoTest.java",
  "methodName" : "testAttachResourceAndProject",
  "sourceCode" : "@Test\r\nvoid testAttachResourceAndProject() {\r\n    insertNewProject();\r\n    bmlProjectDao.attachResourceAndProject(1, \"123\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-public-enhancements\\linkis-bml-server\\src\\test\\java\\org\\apache\\linkis\\bml\\dao\\BmlProjectDaoTest.java",
  "methodName" : "testCheckIfExists",
  "sourceCode" : "@Test\r\nvoid testCheckIfExists() {\r\n    insertNewProject();\r\n    Integer i = bmlProjectDao.checkIfExists(1, \"123\");\r\n    assertTrue(i != null);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-public-enhancements\\linkis-bml-server\\src\\test\\java\\org\\apache\\linkis\\bml\\dao\\BmlProjectDaoTest.java",
  "methodName" : "testDeleteAllPriv",
  "sourceCode" : "@Test\r\nvoid testDeleteAllPriv() {\r\n    insertNewProject();\r\n    bmlProjectDao.deleteAllPriv(1);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-public-enhancements\\linkis-bml-server\\src\\test\\java\\org\\apache\\linkis\\bml\\dao\\DownloadDaoTest.java",
  "methodName" : "testInsertDownloadModel",
  "sourceCode" : "@Test\r\nvoid testInsertDownloadModel() {\r\n    DownloadModel downloadModel = new DownloadModel();\r\n    downloadModel.setDownloader(\"test\");\r\n    downloadModel.setClientIp(\"192.143.253\");\r\n    downloadModel.setEndTime(new Date());\r\n    downloadModel.setId(12);\r\n    downloadModel.setState(1);\r\n    downloadModel.setStartTime(new Date());\r\n    downloadModel.setVersion(\"1.2\");\r\n    downloadModel.setResourceId(\"32\");\r\n    downloadDao.insertDownloadModel(downloadModel);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-public-enhancements\\linkis-bml-server\\src\\test\\java\\org\\apache\\linkis\\bml\\dao\\ResourceDaoTest.java",
  "methodName" : "testGetResources",
  "sourceCode" : "@Test\r\nvoid testGetResources() {\r\n    insertResource();\r\n    Map<String, Object> map = new HashMap<>();\r\n    map.put(\"owner\", \"testowner\");\r\n    map.put(\"resource_id\", \"123\");\r\n    map.put(\"sys\", \"testsys\");\r\n    resourceDao.getResources(map);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-public-enhancements\\linkis-bml-server\\src\\test\\java\\org\\apache\\linkis\\bml\\dao\\ResourceDaoTest.java",
  "methodName" : "testDeleteResource",
  "sourceCode" : "@Test\r\nvoid testDeleteResource() {\r\n    insertResource();\r\n    resourceDao.deleteResource(\"123\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-public-enhancements\\linkis-bml-server\\src\\test\\java\\org\\apache\\linkis\\bml\\dao\\ResourceDaoTest.java",
  "methodName" : "testBatchDeleteResources",
  "sourceCode" : "@Test\r\nvoid testBatchDeleteResources() {\r\n    insertResource();\r\n    List<String> list = new ArrayList<>();\r\n    list.add(\"123\");\r\n    list.add(\"2\");\r\n    list.add(\"3\");\r\n    resourceDao.batchDeleteResources(list);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-public-enhancements\\linkis-bml-server\\src\\test\\java\\org\\apache\\linkis\\bml\\dao\\ResourceDaoTest.java",
  "methodName" : "testUploadResource",
  "sourceCode" : "@Test\r\nvoid testUploadResource() {\r\n    Resource resource = new Resource();\r\n    resource.setResourceId(\"123\");\r\n    resource.setResourceHeader(\"2\");\r\n    resource.setDownloadedFileName(\"testFileName\");\r\n    resource.setSystem(\"testSystem\");\r\n    resource.setCreateTime(new Date());\r\n    resource.setUser(\"testUser\");\r\n    resource.setExpireTime(\"2012.12.02\");\r\n    resource.setMaxVersion(3);\r\n    resource.setUpdateTime(new Date());\r\n    resource.setUpdator(\"testUpdator\");\r\n    resource.setEnableFlag(false);\r\n    resourceDao.uploadResource(resource);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-public-enhancements\\linkis-bml-server\\src\\test\\java\\org\\apache\\linkis\\bml\\dao\\ResourceDaoTest.java",
  "methodName" : "testCheckExists",
  "sourceCode" : "@Test\r\nvoid testCheckExists() {\r\n    insertResource();\r\n    resourceDao.checkExists(\"123\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-public-enhancements\\linkis-bml-server\\src\\test\\java\\org\\apache\\linkis\\bml\\dao\\ResourceDaoTest.java",
  "methodName" : "testGetResource",
  "sourceCode" : "@Test\r\nvoid testGetResource() {\r\n    insertResource();\r\n    resourceDao.getResource(\"123\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-public-enhancements\\linkis-bml-server\\src\\test\\java\\org\\apache\\linkis\\bml\\dao\\ResourceDaoTest.java",
  "methodName" : "testGetUserByResourceId",
  "sourceCode" : "@Test\r\nvoid testGetUserByResourceId() {\r\n    insertResource();\r\n    resourceDao.getUserByResourceId(\"123\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-public-enhancements\\linkis-bml-server\\src\\test\\java\\org\\apache\\linkis\\bml\\dao\\ResourceDaoTest.java",
  "methodName" : "testChangeOwner",
  "sourceCode" : "@Test\r\nvoid testChangeOwner() {\r\n    String oldOwner = \"oldtest\";\r\n    String newOwner = \"newtest\";\r\n    resourceDao.changeOwner(\"123\", oldOwner, newOwner);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-public-enhancements\\linkis-bml-server\\src\\test\\java\\org\\apache\\linkis\\bml\\dao\\TaskDaoTest.java",
  "methodName" : "testInsert",
  "sourceCode" : "@Test\r\nvoid testInsert() {\r\n    ResourceTask resourceTask = new ResourceTask();\r\n    resourceTask.setResourceId(\"123\");\r\n    resourceTask.setClientIp(\"192.168.142\");\r\n    resourceTask.setEndTime(new Date());\r\n    resourceTask.setId(32);\r\n    resourceTask.setStartTime(new Date());\r\n    resourceTask.setErrMsg(\"testErr\");\r\n    resourceTask.setExtraParams(\"testpar\");\r\n    resourceTask.setInstance(\"testInst\");\r\n    resourceTask.setLastUpdateTime(new Date());\r\n    resourceTask.setOperation(\"testOPer\");\r\n    resourceTask.setState(\"1\");\r\n    resourceTask.setSubmitUser(\"testSumUser\");\r\n    resourceTask.setSystem(\"testSym\");\r\n    resourceTask.setVersion(\"1.2\");\r\n    taskDao.insert(resourceTask);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-public-enhancements\\linkis-bml-server\\src\\test\\java\\org\\apache\\linkis\\bml\\dao\\TaskDaoTest.java",
  "methodName" : "testUpdateState",
  "sourceCode" : "@Test\r\nvoid testUpdateState() {\r\n    insertResourceTask();\r\n    taskDao.updateState(32, \"1\", new Date());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-public-enhancements\\linkis-bml-server\\src\\test\\java\\org\\apache\\linkis\\bml\\dao\\TaskDaoTest.java",
  "methodName" : "testUpdateState2Failed",
  "sourceCode" : "@Test\r\nvoid testUpdateState2Failed() {\r\n    insertResourceTask();\r\n    taskDao.updateState2Failed(32, \"1\", new Date(), \"errMsg\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-public-enhancements\\linkis-bml-server\\src\\test\\java\\org\\apache\\linkis\\bml\\dao\\TaskDaoTest.java",
  "methodName" : "testGetNewestVersion",
  "sourceCode" : "@Test\r\nvoid testGetNewestVersion() {\r\n    insertResourceTask();\r\n    taskDao.getNewestVersion(\"123\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-public-enhancements\\linkis-bml-server\\src\\test\\java\\org\\apache\\linkis\\bml\\dao\\VersionDaoTest.java",
  "methodName" : "testGetVersion",
  "sourceCode" : "@Test\r\nvoid testGetVersion() {\r\n    insertVersion();\r\n    versionDao.getVersion(resourceId, version);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-public-enhancements\\linkis-bml-server\\src\\test\\java\\org\\apache\\linkis\\bml\\dao\\VersionDaoTest.java",
  "methodName" : "testGetVersions",
  "sourceCode" : "@Test\r\nvoid testGetVersions() {\r\n    insertVersion();\r\n    versionDao.getVersions(resourceId);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-public-enhancements\\linkis-bml-server\\src\\test\\java\\org\\apache\\linkis\\bml\\dao\\VersionDaoTest.java",
  "methodName" : "testGetResourcesVersions",
  "sourceCode" : "@Test\r\nvoid testGetResourcesVersions() {\r\n    insertVersion();\r\n    Map<String, Object> map = new HashMap<>();\r\n    map.put(\"system\", \"testSys\");\r\n    map.put(\"user\", \"binbin\");\r\n    List<String> list = new ArrayList<>();\r\n    list.add(\"123\");\r\n    list.add(\"321\");\r\n    map.put(\"resourceIds\", list);\r\n    versionDao.getResourcesVersions(map);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-public-enhancements\\linkis-bml-server\\src\\test\\java\\org\\apache\\linkis\\bml\\dao\\VersionDaoTest.java",
  "methodName" : "testDeleteVersion",
  "sourceCode" : "@Test\r\nvoid testDeleteVersion() {\r\n    insertVersion();\r\n    versionDao.deleteVersion(resourceId, version);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-public-enhancements\\linkis-bml-server\\src\\test\\java\\org\\apache\\linkis\\bml\\dao\\VersionDaoTest.java",
  "methodName" : "testDeleteVersions",
  "sourceCode" : "@Test\r\nvoid testDeleteVersions() {\r\n    insertVersion();\r\n    versionDao.deleteVersions(resourceId);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-public-enhancements\\linkis-bml-server\\src\\test\\java\\org\\apache\\linkis\\bml\\dao\\VersionDaoTest.java",
  "methodName" : "testBathDeleteVersions",
  "sourceCode" : "@Test\r\nvoid testBathDeleteVersions() {\r\n    insertVersion();\r\n    List<String> resourceIdlist = new ArrayList<>();\r\n    resourceIdlist.add(resourceId);\r\n    resourceIdlist.add(\"21\");\r\n    List<String> versionlist = new ArrayList<>();\r\n    versionlist.add(version);\r\n    versionlist.add(\"2.1\");\r\n    versionDao.bathDeleteVersions(resourceIdlist, versionlist);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-public-enhancements\\linkis-bml-server\\src\\test\\java\\org\\apache\\linkis\\bml\\dao\\VersionDaoTest.java",
  "methodName" : "testInsertNewVersion",
  "sourceCode" : "@Test\r\nvoid testInsertNewVersion() {\r\n    ResourceVersion resourceVersion = new ResourceVersion();\r\n    resourceVersion.setResourceId(resourceId);\r\n    resourceVersion.setUser(\"binbin\");\r\n    resourceVersion.setSystem(\"testSys\");\r\n    resourceVersion.setFileMd5(\"binbinmd5\");\r\n    resourceVersion.setVersion(version);\r\n    resourceVersion.setSize(25);\r\n    resourceVersion.setStartByte(35);\r\n    resourceVersion.setEndByte(36);\r\n    resourceVersion.setResource(\"testreso\");\r\n    resourceVersion.setDescription(\"testDesc\");\r\n    resourceVersion.setStartTime(new Date());\r\n    resourceVersion.setEndTime(new Date());\r\n    resourceVersion.setClientIp(\"132.145.36\");\r\n    resourceVersion.setUpdator(\"testUp\");\r\n    resourceVersion.setEnableFlag(true);\r\n    versionDao.insertNewVersion(resourceVersion);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-public-enhancements\\linkis-bml-server\\src\\test\\java\\org\\apache\\linkis\\bml\\dao\\VersionDaoTest.java",
  "methodName" : "testGetResourcePath",
  "sourceCode" : "@Test\r\nvoid testGetResourcePath() {\r\n    insertVersion();\r\n    versionDao.getResourcePath(resourceId);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-public-enhancements\\linkis-bml-server\\src\\test\\java\\org\\apache\\linkis\\bml\\dao\\VersionDaoTest.java",
  "methodName" : "testGetNewestVersion",
  "sourceCode" : "@Test\r\nvoid testGetNewestVersion() {\r\n    insertVersion();\r\n    versionDao.getNewestVersion(resourceId);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-public-enhancements\\linkis-bml-server\\src\\test\\java\\org\\apache\\linkis\\bml\\dao\\VersionDaoTest.java",
  "methodName" : "testGetStartByteForResource",
  "sourceCode" : "@Test\r\nvoid testGetStartByteForResource() {\r\n    insertVersion();\r\n    versionDao.getStartByteForResource(resourceId, version);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-public-enhancements\\linkis-bml-server\\src\\test\\java\\org\\apache\\linkis\\bml\\dao\\VersionDaoTest.java",
  "methodName" : "testGetEndByte",
  "sourceCode" : "@Test\r\nvoid testGetEndByte() {\r\n    insertVersion();\r\n    versionDao.getEndByte(resourceId, version);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-public-enhancements\\linkis-bml-server\\src\\test\\java\\org\\apache\\linkis\\bml\\dao\\VersionDaoTest.java",
  "methodName" : "testFindResourceVersion",
  "sourceCode" : "@Test\r\nvoid testFindResourceVersion() {\r\n    insertVersion();\r\n    versionDao.findResourceVersion(resourceId, version);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-public-enhancements\\linkis-bml-server\\src\\test\\java\\org\\apache\\linkis\\bml\\dao\\VersionDaoTest.java",
  "methodName" : "testGetAllResourcesViaSystem",
  "sourceCode" : "@Test\r\nvoid testGetAllResourcesViaSystem() {\r\n    insertVersion();\r\n    versionDao.getAllResourcesViaSystem(resourceId, version);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-public-enhancements\\linkis-bml-server\\src\\test\\java\\org\\apache\\linkis\\bml\\dao\\VersionDaoTest.java",
  "methodName" : "testSelectResourcesViaSystemByPage",
  "sourceCode" : "@Test\r\nvoid testSelectResourcesViaSystemByPage() {\r\n    insertVersion();\r\n    versionDao.selectResourcesViaSystemByPage(resourceId, version);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-public-enhancements\\linkis-bml-server\\src\\test\\java\\org\\apache\\linkis\\bml\\dao\\VersionDaoTest.java",
  "methodName" : "testCheckVersion",
  "sourceCode" : "@Test\r\nvoid testCheckVersion() {\r\n    insertVersion();\r\n    versionDao.checkVersion(resourceId, version);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-public-enhancements\\linkis-bml-server\\src\\test\\java\\org\\apache\\linkis\\bml\\dao\\VersionDaoTest.java",
  "methodName" : "testSelectResourceVersionEnbleFlag",
  "sourceCode" : "@Test\r\nvoid testSelectResourceVersionEnbleFlag() {\r\n    insertVersion();\r\n    versionDao.selectResourceVersionEnbleFlag(resourceId, version);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-public-enhancements\\linkis-bml-server\\src\\test\\java\\org\\apache\\linkis\\bml\\dao\\VersionDaoTest.java",
  "methodName" : "testDeleteResource",
  "sourceCode" : "@Test\r\nvoid testDeleteResource() {\r\n    insertVersion();\r\n    versionDao.deleteResource(resourceId);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-public-enhancements\\linkis-bml-server\\src\\test\\java\\org\\apache\\linkis\\bml\\dao\\VersionDaoTest.java",
  "methodName" : "testBatchDeleteResources",
  "sourceCode" : "@Test\r\nvoid testBatchDeleteResources() {\r\n    insertVersion();\r\n    List<String> resourceIdlist = new ArrayList<>();\r\n    resourceIdlist.add(resourceId);\r\n    resourceIdlist.add(\"21\");\r\n    List<String> versionlist = new ArrayList<>();\r\n    versionlist.add(version);\r\n    versionlist.add(\"2.1\");\r\n    versionDao.bathDeleteVersions(resourceIdlist, versionlist);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-public-enhancements\\linkis-bml-server\\src\\test\\java\\org\\apache\\linkis\\bml\\dao\\VersionDaoTest.java",
  "methodName" : "testGetResourceVersion",
  "sourceCode" : "@Test\r\nvoid testGetResourceVersion() {\r\n    versionDao.getResourceVersion(resourceId, version);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-public-enhancements\\linkis-bml-server\\src\\test\\java\\org\\apache\\linkis\\bml\\dao\\VersionDaoTest.java",
  "methodName" : "testSelectVersionByPage",
  "sourceCode" : "@Test\r\nvoid testSelectVersionByPage() {\r\n    insertVersion();\r\n    List<Version> list = versionDao.selectVersionByPage(resourceId);\r\n    assertTrue(list.size() >= 1);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-public-enhancements\\linkis-bml-server\\src\\test\\java\\org\\apache\\linkis\\bml\\dao\\VersionDaoTest.java",
  "methodName" : "testGetResourceVersionsByResourceId",
  "sourceCode" : "@Test\r\nvoid testGetResourceVersionsByResourceId() {\r\n    insertVersion();\r\n    List<ResourceVersion> list = versionDao.getResourceVersionsByResourceId(resourceId);\r\n    assertTrue(list.size() >= 1);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-public-enhancements\\linkis-bml-server\\src\\test\\java\\org\\apache\\linkis\\bml\\service\\BmlProjectServiceTest.java",
  "methodName" : "testCreateBmlProject",
  "sourceCode" : "@Test\r\npublic void testCreateBmlProject() throws Exception {\r\n    /*String projectName = \"testName1\";\r\n    String creator = \"creCreatorUser1\";\r\n    List<String> editUsers = new ArrayList<>();\r\n    List<String> accessUsers = new ArrayList<>();\r\n    BmlProject bmlProject = addBmlProject();\r\n    Mockito.when(bmlProjectDao.getBmlProject(projectName))\r\n            .thenReturn(null)\r\n            .thenReturn(bmlProject);\r\n    BmlProject bmlProject1 = new BmlProject();\r\n    bmlProject1.setName(projectName);\r\n    bmlProject1.setSystem(\"testSy\");\r\n    bmlProject1.setSource(\"test\");\r\n    bmlProject1.setDescription(\"descTest\");\r\n    bmlProject1.setCreator(creator);\r\n    bmlProject1.setEnabled(1);\r\n    bmlProject1.setCreateTime(new Date());\r\n    int i = bmlProjectService.createBmlProject(projectName, creator, editUsers, accessUsers);\r\n    assertTrue(i > 0);*/\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-public-enhancements\\linkis-bml-server\\src\\test\\java\\org\\apache\\linkis\\bml\\service\\BmlProjectServiceTest.java",
  "methodName" : "testCheckEditPriv",
  "sourceCode" : "@Test\r\npublic void testCheckEditPriv() throws Exception {\r\n    String projectName = \"testProjectName\";\r\n    String username = \"testUsername\";\r\n    Mockito.when(bmlProjectDao.getPrivInProject(projectName, username)).thenReturn(6);\r\n    boolean fa = bmlProjectService.checkEditPriv(projectName, username);\r\n    assertTrue(fa == false);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-public-enhancements\\linkis-bml-server\\src\\test\\java\\org\\apache\\linkis\\bml\\service\\BmlProjectServiceTest.java",
  "methodName" : "testCheckAccessPriv",
  "sourceCode" : "@Test\r\npublic void testCheckAccessPriv() throws Exception {\r\n    String projectName = \"testProjectName\";\r\n    String username = \"testUsername\";\r\n    Mockito.when(bmlProjectDao.getPrivInProject(projectName, username)).thenReturn(4);\r\n    boolean fa = bmlProjectService.checkAccessPriv(projectName, username);\r\n    assertTrue(fa == false);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-public-enhancements\\linkis-bml-server\\src\\test\\java\\org\\apache\\linkis\\bml\\service\\BmlProjectServiceTest.java",
  "methodName" : "testSetProjectEditPriv",
  "sourceCode" : "@Test\r\npublic void testSetProjectEditPriv() throws Exception {\r\n    String projectName = \"testName\";\r\n    List<String> editUsers = new ArrayList<>();\r\n    BmlProject bmlProject = addBmlProject();\r\n    Mockito.when(bmlProjectDao.getBmlProject(projectName)).thenReturn(bmlProject);\r\n    bmlProjectService.setProjectEditPriv(projectName, editUsers);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-public-enhancements\\linkis-bml-server\\src\\test\\java\\org\\apache\\linkis\\bml\\service\\BmlProjectServiceTest.java",
  "methodName" : "testAddProjectEditPriv",
  "sourceCode" : "@Test\r\npublic void testAddProjectEditPriv() throws Exception {\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-public-enhancements\\linkis-bml-server\\src\\test\\java\\org\\apache\\linkis\\bml\\service\\BmlProjectServiceTest.java",
  "methodName" : "testDeleteProjectEditPriv",
  "sourceCode" : "@Test\r\npublic void testDeleteProjectEditPriv() throws Exception {\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-public-enhancements\\linkis-bml-server\\src\\test\\java\\org\\apache\\linkis\\bml\\service\\BmlProjectServiceTest.java",
  "methodName" : "testSetProjectAccessPriv",
  "sourceCode" : "@Test\r\npublic void testSetProjectAccessPriv() throws Exception {\r\n    String projectName = \"testName\";\r\n    List<String> editUsers = new ArrayList<>();\r\n    BmlProject bmlProject = addBmlProject();\r\n    Mockito.when(bmlProjectDao.getBmlProject(projectName)).thenReturn(bmlProject);\r\n    bmlProjectService.setProjectAccessPriv(projectName, editUsers);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-public-enhancements\\linkis-bml-server\\src\\test\\java\\org\\apache\\linkis\\bml\\service\\BmlProjectServiceTest.java",
  "methodName" : "testAddProjectAccessPriv",
  "sourceCode" : "@Test\r\npublic void testAddProjectAccessPriv() throws Exception {\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-public-enhancements\\linkis-bml-server\\src\\test\\java\\org\\apache\\linkis\\bml\\service\\BmlProjectServiceTest.java",
  "methodName" : "testDeleteProjectAccessPriv",
  "sourceCode" : "@Test\r\npublic void testDeleteProjectAccessPriv() throws Exception {\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-public-enhancements\\linkis-bml-server\\src\\test\\java\\org\\apache\\linkis\\bml\\service\\BmlProjectServiceTest.java",
  "methodName" : "testGetProjectNameByResourceId",
  "sourceCode" : "@Test\r\npublic void testGetProjectNameByResourceId() throws Exception {\r\n    String resourceId = \"123\";\r\n    Mockito.when(bmlProjectDao.getProjectNameByResourceId(resourceId)).thenReturn(\"testName\");\r\n    String projectName = bmlProjectService.getProjectNameByResourceId(resourceId);\r\n    assertNotNull(projectName);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-public-enhancements\\linkis-bml-server\\src\\test\\java\\org\\apache\\linkis\\bml\\service\\BmlProjectServiceTest.java",
  "methodName" : "testAddProjectResource",
  "sourceCode" : "@Test\r\npublic void testAddProjectResource() throws Exception {\r\n    String resourceId = \"123\";\r\n    String projectName = \"testName\";\r\n    BmlProject bmlProject = addBmlProject();\r\n    Mockito.when(bmlProjectDao.getBmlProject(projectName)).thenReturn(bmlProject);\r\n    bmlProjectService.addProjectResource(resourceId, projectName);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-public-enhancements\\linkis-bml-server\\src\\test\\java\\org\\apache\\linkis\\bml\\service\\BmlProjectServiceTest.java",
  "methodName" : "testAttach",
  "sourceCode" : "@Test\r\npublic void testAttach() throws Exception {\r\n    String projectName = \"testName\";\r\n    String resourceId = \"123\";\r\n    Mockito.when(bmlProjectDao.getProjectIdByName(projectName)).thenReturn(1);\r\n    Mockito.when(bmlProjectDao.checkIfExists(1, resourceId)).thenReturn(0);\r\n    bmlProjectService.attach(projectName, resourceId);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-public-enhancements\\linkis-bml-server\\src\\test\\java\\org\\apache\\linkis\\bml\\service\\BmlProjectServiceTest.java",
  "methodName" : "testUpdateProjectUsers",
  "sourceCode" : "@Test\r\npublic void testUpdateProjectUsers() throws Exception {\r\n    String username = \"testUsername\";\r\n    String projectName = \"testName\";\r\n    List<String> editUsers = new ArrayList<>();\r\n    editUsers.add(\"test1\");\r\n    List<String> accessUsers = new ArrayList<>();\r\n    accessUsers.add(\"test2\");\r\n    Mockito.when(bmlProjectDao.getProjectIdByName(projectName)).thenReturn(1);\r\n    bmlProjectService.updateProjectUsers(username, projectName, editUsers, accessUsers);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-public-enhancements\\linkis-bml-server\\src\\test\\java\\org\\apache\\linkis\\bml\\service\\DownloadServiceImplTest.java",
  "methodName" : "testAddDownloadRecord",
  "sourceCode" : "@Test\r\npublic void testAddDownloadRecord() throws Exception {\r\n    DownloadModel downloadModel = new DownloadModel();\r\n    downloadModel.setDownloader(\"test\");\r\n    downloadModel.setClientIp(\"192.143.253\");\r\n    downloadModel.setEndTime(new Date());\r\n    downloadModel.setId(12);\r\n    downloadModel.setState(1);\r\n    downloadModel.setStartTime(new Date());\r\n    downloadModel.setVersion(\"1.2\");\r\n    downloadModel.setResourceId(\"32\");\r\n    Mockito.doNothing().when(downloadDao).insertDownloadModel(downloadModel);\r\n    downloadServiceImpl.addDownloadRecord(downloadModel);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-public-enhancements\\linkis-bml-server\\src\\test\\java\\org\\apache\\linkis\\bml\\service\\ResourceServiceImplTest.java",
  "methodName" : "testGetResources",
  "sourceCode" : "@Test\r\npublic void testGetResources() throws Exception {\r\n    Map paramMap = new HashMap();\r\n    paramMap.put(\"resource_id\", \"1\");\r\n    paramMap.put(\"owner\", \"owner\");\r\n    paramMap.put(\"sys\", \"sys\");\r\n    List<Resource> list = new ArrayList<>();\r\n    list.add(buildResource());\r\n    Mockito.when(resourceDao.getResources(paramMap)).thenReturn(list);\r\n    List<Resource> resourceList = resourceServiceImpl.getResources(paramMap);\r\n    assertTrue(resourceList.size() > 0);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-public-enhancements\\linkis-bml-server\\src\\test\\java\\org\\apache\\linkis\\bml\\service\\ResourceServiceImplTest.java",
  "methodName" : "testDeleteResource",
  "sourceCode" : "@Test\r\npublic void testDeleteResource() throws Exception {\r\n    String resourceId = \"123\";\r\n    resourceServiceImpl.deleteResource(resourceId);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-public-enhancements\\linkis-bml-server\\src\\test\\java\\org\\apache\\linkis\\bml\\service\\ResourceServiceImplTest.java",
  "methodName" : "testBatchDeleteResources",
  "sourceCode" : "@Test\r\npublic void testBatchDeleteResources() throws Exception {\r\n    List<String> list = new ArrayList<>();\r\n    list.add(\"123\");\r\n    list.add(\"234\");\r\n    resourceServiceImpl.batchDeleteResources(list);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-public-enhancements\\linkis-bml-server\\src\\test\\java\\org\\apache\\linkis\\bml\\service\\ResourceServiceImplTest.java",
  "methodName" : "testUpload",
  "sourceCode" : "@Test\r\npublic void testUpload() throws Exception {\r\n    /*List< MultipartFile > files =new ArrayList<>();\r\n    String user=\"testuser\";\r\n    Map<String, Object> properties =new HashMap<>();\r\n    properties.put(\"resourceId\",\"123\");\r\n    ResourceHelper resourceHelper = ResourceHelperFactory.getResourceHelper();\r\n    Mockito.when(ResourceHelperFactory.getResourceHelper()).thenReturn(resourceHelper);\r\n    Mockito.when(resourceHelper.generatePath(user,\"123\",properties)).thenReturn(\"testpath\");*/\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-public-enhancements\\linkis-bml-server\\src\\test\\java\\org\\apache\\linkis\\bml\\service\\ResourceServiceImplTest.java",
  "methodName" : "testCheckResourceId",
  "sourceCode" : "@Test\r\npublic void testCheckResourceId() throws Exception {\r\n    String resourceId = \"123\";\r\n    Mockito.when(resourceDao.checkExists(resourceId)).thenReturn(1);\r\n    boolean whether = resourceServiceImpl.checkResourceId(resourceId);\r\n    assertTrue(whether);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-public-enhancements\\linkis-bml-server\\src\\test\\java\\org\\apache\\linkis\\bml\\service\\ResourceServiceImplTest.java",
  "methodName" : "testGetResource",
  "sourceCode" : "@Test\r\npublic void testGetResource() throws Exception {\r\n    String resourceId = \"123\";\r\n    Resource resource = buildResource();\r\n    Mockito.when(resourceDao.getResource(resourceId)).thenReturn(resource);\r\n    Resource rs = resourceServiceImpl.getResource(resourceId);\r\n    assertTrue(rs != null);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-public-enhancements\\linkis-bml-server\\src\\test\\java\\org\\apache\\linkis\\bml\\service\\ResourceServiceImplTest.java",
  "methodName" : "testCheckAuthority",
  "sourceCode" : "@Test\r\npublic void testCheckAuthority() throws Exception {\r\n    String resourceId = \"123\";\r\n    String user = \"testuser\";\r\n    Mockito.when(resourceDao.getUserByResourceId(resourceId)).thenReturn(\"testuser\");\r\n    boolean whether = resourceServiceImpl.checkAuthority(user, resourceId);\r\n    assertTrue(whether);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-public-enhancements\\linkis-bml-server\\src\\test\\java\\org\\apache\\linkis\\bml\\service\\ResourceServiceImplTest.java",
  "methodName" : "testCheckExpire",
  "sourceCode" : "@Test\r\npublic void testCheckExpire() throws Exception {\r\n    String resourceId = \"123\";\r\n    String version = \"321\";\r\n    Resource resource = buildResource();\r\n    ResourceVersion resourceVersion = new ResourceVersion();\r\n    resourceVersion.setEnableFlag(true);\r\n    Mockito.when(resourceDao.getResource(resourceId)).thenReturn(resource);\r\n    Mockito.when(versionDao.getResourceVersion(resourceId, version)).thenReturn(resourceVersion);\r\n    boolean whether = resourceServiceImpl.checkExpire(resourceId, version);\r\n    assertTrue(whether);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-public-enhancements\\linkis-bml-server\\src\\test\\java\\org\\apache\\linkis\\bml\\service\\ResourceServiceImplTest.java",
  "methodName" : "testCleanExpiredResources",
  "sourceCode" : "@Test\r\npublic void testCleanExpiredResources() throws Exception {\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-public-enhancements\\linkis-bml-server\\src\\test\\java\\org\\apache\\linkis\\bml\\service\\ResourceServiceImplTest.java",
  "methodName" : "testChangeOwnerByResourceId",
  "sourceCode" : "@Test\r\npublic void testChangeOwnerByResourceId() throws Exception {\r\n    String resourceId = \"123\";\r\n    String oldOwner = \"oldOwnertest\";\r\n    String newOwner = \"newOwnertest\";\r\n    resourceServiceImpl.changeOwnerByResourceId(resourceId, oldOwner, newOwner);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-public-enhancements\\linkis-bml-server\\src\\test\\java\\org\\apache\\linkis\\bml\\service\\ResourceServiceImplTest.java",
  "methodName" : "testCopyResourceToOtherUser",
  "sourceCode" : "@Test\r\npublic void testCopyResourceToOtherUser() throws Exception {\r\n    String resourceId = \"123\";\r\n    String otherUser = \"otherUser\";\r\n    resourceServiceImpl.copyResourceToOtherUser(resourceId, otherUser);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-public-enhancements\\linkis-bml-server\\src\\test\\java\\org\\apache\\linkis\\bml\\service\\TaskServiceImplTest.java",
  "methodName" : "testCreateUploadTask",
  "sourceCode" : "@Test\r\npublic void testCreateUploadTask() throws Exception {\r\n    List<MultipartFile> files = new ArrayList<>();\r\n    String user = \"userTest\";\r\n    Map<String, Object> properties = new HashMap<>();\r\n    String resourceId = UUID.randomUUID().toString();\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-public-enhancements\\linkis-bml-server\\src\\test\\java\\org\\apache\\linkis\\bml\\service\\TaskServiceImplTest.java",
  "methodName" : "testCreateUpdateTask",
  "sourceCode" : "@Test\r\npublic void testCreateUpdateTask() throws Exception {\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-public-enhancements\\linkis-bml-server\\src\\test\\java\\org\\apache\\linkis\\bml\\service\\TaskServiceImplTest.java",
  "methodName" : "testCreateDownloadTask",
  "sourceCode" : "@Test\r\npublic void testCreateDownloadTask() throws Exception {\r\n    /* String resourceId=\"123\";\r\n    String version=\"0.231\";\r\n    String user=\"testUser\";\r\n    String clientIp=\"192.168.13.1\";\r\n    Resource resource=addResource();\r\n    ResourceTask resourceTask = new ResourceTask();\r\n    resourceTask.setResourceId(resourceId);\r\n    resourceTask.setVersion(version);\r\n    resourceTask.setOperation(OperationEnum.DOWNLOAD.getValue());\r\n    resourceTask.setState(TaskState.RUNNING.getValue());\r\n    resourceTask.setSubmitUser(user);\r\n    resourceTask.setClientIp(clientIp);\r\n    resourceTask.setSystem(resource.getSystem());\r\n    resourceTask.setStartTime(new Date());\r\n    resourceTask.setLastUpdateTime(new Date());\r\n    Mockito.when(serviceInstance.getInstance()).thenReturn(\"test\");\r\n    Mockito.when(resourceDao.getResource(resourceId)).thenReturn(resource);\r\n    Mockito.when(ResourceTask.createDownloadTask(resourceId, version, user, resource.getSystem(), clientIp)).thenReturn(resourceTask);\r\n    ResourceTask resourceTasks=taskServiceImpl.createDownloadTask(resourceId,version,user,clientIp);\r\n    assertTrue(resourceTask.equals(resourceTask));*/\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-public-enhancements\\linkis-bml-server\\src\\test\\java\\org\\apache\\linkis\\bml\\service\\TaskServiceImplTest.java",
  "methodName" : "testUpdateState",
  "sourceCode" : "@Test\r\npublic void testUpdateState() throws Exception {\r\n    long taskId = 1;\r\n    String state = \"1\";\r\n    Date updateTime = new Date();\r\n    taskServiceImpl.updateState(taskId, state, updateTime);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-public-enhancements\\linkis-bml-server\\src\\test\\java\\org\\apache\\linkis\\bml\\service\\TaskServiceImplTest.java",
  "methodName" : "testUpdateState2Failed",
  "sourceCode" : "@Test\r\npublic void testUpdateState2Failed() throws Exception {\r\n    long taskId = 1l;\r\n    String state = \"1\";\r\n    Date updateTime = new Date();\r\n    String errMsg = \"123\";\r\n    taskServiceImpl.updateState2Failed(taskId, state, updateTime, errMsg);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-public-enhancements\\linkis-bml-server\\src\\test\\java\\org\\apache\\linkis\\bml\\service\\TaskServiceImplTest.java",
  "methodName" : "testCreateDeleteVersionTask",
  "sourceCode" : "@Test\r\npublic void testCreateDeleteVersionTask() throws Exception {\r\n    /*String resourceId=\"123\";\r\n    String version=\"0.321\";\r\n    String user=\"testUser\";\r\n    String clientIp=\"192.167.13.2\";\r\n    Mockito.when(serviceInstance.getInstance()).thenReturn(\"test\");\r\n    taskServiceImpl.createDeleteVersionTask(resourceId,version,user,clientIp);*/\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-public-enhancements\\linkis-bml-server\\src\\test\\java\\org\\apache\\linkis\\bml\\service\\TaskServiceImplTest.java",
  "methodName" : "testCreateDeleteResourceTask",
  "sourceCode" : "@Test\r\npublic void testCreateDeleteResourceTask() throws Exception {\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-public-enhancements\\linkis-bml-server\\src\\test\\java\\org\\apache\\linkis\\bml\\service\\TaskServiceImplTest.java",
  "methodName" : "testCreateDeleteResourcesTask",
  "sourceCode" : "@Test\r\npublic void testCreateDeleteResourcesTask() throws Exception {\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-public-enhancements\\linkis-bml-server\\src\\test\\java\\org\\apache\\linkis\\bml\\service\\TaskServiceImplTest.java",
  "methodName" : "testCreateRollbackVersionTask",
  "sourceCode" : "@Test\r\npublic void testCreateRollbackVersionTask() throws Exception {\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-public-enhancements\\linkis-bml-server\\src\\test\\java\\org\\apache\\linkis\\bml\\service\\TaskServiceImplTest.java",
  "methodName" : "testCreateCopyResourceTask",
  "sourceCode" : "@Test\r\npublic void testCreateCopyResourceTask() throws Exception {\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-public-enhancements\\linkis-bml-server\\src\\test\\java\\org\\apache\\linkis\\bml\\service\\TaskServiceImplTest.java",
  "methodName" : "testGetResourceLastVersion",
  "sourceCode" : "@Test\r\npublic void testGetResourceLastVersion() throws Exception {\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-public-enhancements\\linkis-bml-server\\src\\test\\java\\org\\apache\\linkis\\bml\\service\\TaskServiceImplTest.java",
  "methodName" : "testGenerateNewVersion",
  "sourceCode" : "@Test\r\npublic void testGenerateNewVersion() throws Exception {\r\n    /*\r\n    try {\r\n       Method method = TaskServiceImpl.getClass().getMethod(\"generateNewVersion\", String.class);\r\n       method.setAccessible(true);\r\n       method.invoke(<Object>, <Parameters>);\r\n    } catch(NoSuchMethodException e) {\r\n    } catch(IllegalAccessException e) {\r\n    } catch(InvocationTargetException e) {\r\n    }\r\n    */\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-public-enhancements\\linkis-bml-server\\src\\test\\java\\org\\apache\\linkis\\bml\\service\\VersionServiceImplTest.java",
  "methodName" : "testGetVersion",
  "sourceCode" : "@Test\r\npublic void testGetVersion() throws Exception {\r\n    String resourceId = \"123\";\r\n    String version = \"0.231\";\r\n    Version versionInfo = new Version();\r\n    versionInfo.setResource(resourceId);\r\n    versionInfo.setVersion(version);\r\n    Mockito.when(versionDao.getVersion(resourceId, version)).thenReturn(versionInfo);\r\n    Version versionInfo1 = versionServiceImpl.getVersion(resourceId, version);\r\n    assertTrue(versionInfo1.equals(versionInfo));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-public-enhancements\\linkis-bml-server\\src\\test\\java\\org\\apache\\linkis\\bml\\service\\VersionServiceImplTest.java",
  "methodName" : "testGetResourcesVersions",
  "sourceCode" : "@Test\r\npublic void testGetResourcesVersions() throws Exception {\r\n    Map paramMap = new HashMap();\r\n    List<ResourceVersion> list = new ArrayList<>();\r\n    list.add(buildResourceVersion());\r\n    Mockito.when(versionDao.getResourcesVersions(paramMap)).thenReturn(list);\r\n    List<ResourceVersion> list1 = versionServiceImpl.getResourcesVersions(paramMap);\r\n    assertTrue(list1.equals(list));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-public-enhancements\\linkis-bml-server\\src\\test\\java\\org\\apache\\linkis\\bml\\service\\VersionServiceImplTest.java",
  "methodName" : "testDeleteResourceVersion",
  "sourceCode" : "@Test\r\npublic void testDeleteResourceVersion() throws Exception {\r\n    String resourceId = \"123\";\r\n    String version = \"0.231\";\r\n    versionServiceImpl.deleteResourceVersion(resourceId, version);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-public-enhancements\\linkis-bml-server\\src\\test\\java\\org\\apache\\linkis\\bml\\service\\VersionServiceImplTest.java",
  "methodName" : "testDeleteResourceVersions",
  "sourceCode" : "@Test\r\npublic void testDeleteResourceVersions() throws Exception {\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-public-enhancements\\linkis-bml-server\\src\\test\\java\\org\\apache\\linkis\\bml\\service\\VersionServiceImplTest.java",
  "methodName" : "testDeleteResourcesVersions",
  "sourceCode" : "@Test\r\npublic void testDeleteResourcesVersions() throws Exception {\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-public-enhancements\\linkis-bml-server\\src\\test\\java\\org\\apache\\linkis\\bml\\service\\VersionServiceImplTest.java",
  "methodName" : "testUpdateVersion",
  "sourceCode" : "@Test\r\npublic void testUpdateVersion() throws Exception {\r\n    /* String resourceId=\"123\";\r\n    String user=\"testUser\";\r\n    MultipartFile file=Mockito.mock(MultipartFile.class);\r\n    InputStream inputStream = Mockito.mock(InputStream.class);\r\n    Map<String, Object> params=new HashMap<>();\r\n    params.put(\"newVersion\",\"c/path\");\r\n    StringBuilder stringBuilder = new StringBuilder();\r\n    Mockito.when(versionDao.getResourcePath(resourceId)).thenReturn(\"hdfs:///data/linkis/linkis/20220609/b4fd8f59-9492-4a0f-a074-9ac573a69b60\");\r\n    ResourceHelper resourceHelper=Mockito.mock(ResourceHelper.class);\r\n    Mockito.when(resourceHelper.upload(\"/etc\",user,inputStream,stringBuilder,false)).thenReturn(1l);\r\n    String version=versionServiceImpl.updateVersion(resourceId,user,file,params);\r\n    assertTrue(params.get(\"newVersion\").equals(version));*/\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-public-enhancements\\linkis-bml-server\\src\\test\\java\\org\\apache\\linkis\\bml\\service\\VersionServiceImplTest.java",
  "methodName" : "testGetNewestVersion",
  "sourceCode" : "@Test\r\npublic void testGetNewestVersion() throws Exception {\r\n    String resourceId = \"123\";\r\n    Mockito.when(versionDao.getNewestVersion(resourceId)).thenReturn(\"test\");\r\n    String startbyte = versionServiceImpl.getNewestVersion(resourceId);\r\n    assertTrue(startbyte != null);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-public-enhancements\\linkis-bml-server\\src\\test\\java\\org\\apache\\linkis\\bml\\service\\VersionServiceImplTest.java",
  "methodName" : "testDownloadResource",
  "sourceCode" : "@Test\r\npublic void testDownloadResource() throws Exception {\r\n    /*String user=\"testuser\";\r\n    String resourceId=\"123\";\r\n    String version=\"0.231\";\r\n    OutputStream outputStream=Mockito.mock(OutputStream.class);\r\n    Map<String, Object> properties=new HashMap<>();\r\n    ResourceVersion resourceVersion = buildResourceVersion();\r\n    Mockito.when(versionDao.findResourceVersion(resourceId,version)).thenReturn(resourceVersion);\r\n    boolean whether=versionServiceImpl.downloadResource(user,resourceId,version,outputStream,properties);\r\n    assertTrue(whether == true);*/\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-public-enhancements\\linkis-bml-server\\src\\test\\java\\org\\apache\\linkis\\bml\\service\\VersionServiceImplTest.java",
  "methodName" : "testGetVersions",
  "sourceCode" : "@Test\r\npublic void testGetVersions() throws Exception {\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-public-enhancements\\linkis-bml-server\\src\\test\\java\\org\\apache\\linkis\\bml\\service\\VersionServiceImplTest.java",
  "methodName" : "testSelectVersionByPage",
  "sourceCode" : "@Test\r\npublic void testSelectVersionByPage() throws Exception {\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-public-enhancements\\linkis-bml-server\\src\\test\\java\\org\\apache\\linkis\\bml\\service\\VersionServiceImplTest.java",
  "methodName" : "testGetAllResourcesViaSystem",
  "sourceCode" : "@Test\r\npublic void testGetAllResourcesViaSystem() throws Exception {\r\n    String system = \"testSystem\";\r\n    String user = \"userTest\";\r\n    List<ResourceVersion> list = new ArrayList<>();\r\n    list.add(buildResourceVersion());\r\n    Mockito.when(versionDao.getAllResourcesViaSystem(system, user)).thenReturn(list);\r\n    List<ResourceVersion> list1 = versionServiceImpl.getAllResourcesViaSystem(system, user);\r\n    assertTrue(list1.equals(list));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-public-enhancements\\linkis-bml-server\\src\\test\\java\\org\\apache\\linkis\\bml\\service\\VersionServiceImplTest.java",
  "methodName" : "testSelectResourcesViaSystemByPage",
  "sourceCode" : "@Test\r\npublic void testSelectResourcesViaSystemByPage() throws Exception {\r\n    int currentPage = 1;\r\n    int pageSize = 3;\r\n    String system = \"testSystem\";\r\n    String user = \"userTest\";\r\n    List<ResourceVersion> list = new ArrayList<>();\r\n    list.add(buildResourceVersion());\r\n    Mockito.when(versionDao.selectResourcesViaSystemByPage(system, user)).thenReturn(list);\r\n    List<ResourceVersion> list1 = versionServiceImpl.selectResourcesViaSystemByPage(currentPage, pageSize, system, user);\r\n    assertTrue(list1.equals(list));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-public-enhancements\\linkis-bml-server\\src\\test\\java\\org\\apache\\linkis\\bml\\service\\VersionServiceImplTest.java",
  "methodName" : "testCheckVersion",
  "sourceCode" : "@Test\r\npublic void testCheckVersion() throws Exception {\r\n    String resourceId = \"123\";\r\n    String version = \"0.231\";\r\n    Mockito.when(versionDao.checkVersion(resourceId, version)).thenReturn(1);\r\n    boolean whether = versionServiceImpl.checkVersion(resourceId, version);\r\n    assertTrue(whether);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-public-enhancements\\linkis-bml-server\\src\\test\\java\\org\\apache\\linkis\\bml\\service\\VersionServiceImplTest.java",
  "methodName" : "testCanAccess",
  "sourceCode" : "@Test\r\npublic void testCanAccess() throws Exception {\r\n    String resourceId = \"123\";\r\n    String version = \"0.231\";\r\n    Mockito.when(versionDao.selectResourceVersionEnbleFlag(resourceId, version)).thenReturn(1);\r\n    boolean whether = versionServiceImpl.canAccess(resourceId, version);\r\n    assertTrue(whether);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-public-enhancements\\linkis-bml-server\\src\\test\\java\\org\\apache\\linkis\\bml\\service\\VersionServiceImplTest.java",
  "methodName" : "testGenerateNewVersion",
  "sourceCode" : "@Test\r\n@DisplayName(\"Method description: ...\")\r\npublic void testGenerateNewVersion() throws Exception {\r\n    // TODO: Test goes here...\r\n    /*\r\n    try {\r\n       Method method = VersionServiceImpl.getClass().getMethod(\"generateNewVersion\", String.class);\r\n       method.setAccessible(true);\r\n       method.invoke(<Object>, <Parameters>);\r\n    } catch(NoSuchMethodException e) {\r\n    } catch(IllegalAccessException e) {\r\n    } catch(InvocationTargetException e) {\r\n    }\r\n    */\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-public-enhancements\\linkis-configuration\\src\\test\\java\\org\\apache\\linkis\\configuration\\dao\\ConfigKeyLimitForUserMapperTest.java",
  "methodName" : "batchInsertOrUpdateListTest",
  "sourceCode" : "@Test\r\nvoid batchInsertOrUpdateListTest() {\r\n    List<ConfigKeyLimitForUser> list = initData();\r\n    list.get(1).setLatestUpdateTemplateUuid(\"123456\");\r\n    int isOk = configKeyLimitForUserMapper.batchInsertOrUpdateList(list);\r\n    Assertions.assertTrue(isOk > 1);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-public-enhancements\\linkis-configuration\\src\\test\\java\\org\\apache\\linkis\\configuration\\dao\\ConfigMapperTest.java",
  "methodName" : "testInsertValue",
  "sourceCode" : "//  @Test\r\n//  void testGetConfigKeyByLabelIds() {\r\n//    List<ConfigKeyValue> configKeyValueList =\r\n//        configMapper.getConfigKeyByLabelIds(Arrays.asList(4, 5, 6));\r\n//    assertEquals(7, configKeyValueList.size());\r\n//  }\r\n//  @Test\r\n//  void testGetConfigKeyValueByLabelId() {\r\n//    List<ConfigKeyValue> configKeyValueList = configMapper.getConfigKeyValueByLabelId(1);\r\n//    assertEquals(7, configKeyValueList.size());\r\n//  }\r\n@Test\r\nvoid testInsertValue() {\r\n    ConfigValue result = insertConfigValue();\r\n    assertTrue(result.getId() > 0);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-public-enhancements\\linkis-configuration\\src\\test\\java\\org\\apache\\linkis\\configuration\\dao\\ConfigMapperTest.java",
  "methodName" : "testGetConfigValueById",
  "sourceCode" : "@Test\r\nvoid testGetConfigValueById() {\r\n    ConfigValue configValue = configMapper.getConfigValueById(6L);\r\n    assertEquals(\"1\", configValue.getConfigValue());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-public-enhancements\\linkis-configuration\\src\\test\\java\\org\\apache\\linkis\\configuration\\dao\\ConfigMapperTest.java",
  "methodName" : "testInsertValueList",
  "sourceCode" : "@Test\r\nvoid testInsertValueList() throws InterruptedException {\r\n    List<ConfigValue> result = insertConfigValueList();\r\n    assertTrue(result.get(0).getId() > 0 && result.get(1).getId() > 0);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-public-enhancements\\linkis-configuration\\src\\test\\java\\org\\apache\\linkis\\configuration\\dao\\ConfigMapperTest.java",
  "methodName" : "testUpdateUserValue",
  "sourceCode" : "@Test\r\nvoid testUpdateUserValue() {\r\n    configMapper.updateUserValue(\"10\", 1L);\r\n    assertEquals(\"10\", configMapper.getConfigValueById(1L).getConfigValue());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-public-enhancements\\linkis-configuration\\src\\test\\java\\org\\apache\\linkis\\configuration\\dao\\ConfigMapperTest.java",
  "methodName" : "testUpdateUserValueList",
  "sourceCode" : "@Test\r\nvoid testUpdateUserValueList() {\r\n    List<ConfigValue> configValueList = new ArrayList<>();\r\n    ConfigValue configValue = new ConfigValue();\r\n    configValue.setId(5L);\r\n    configValue.setConfigKeyId(5L);\r\n    configValue.setConfigValue(\"50G\");\r\n    configValue.setConfigLabelId(1);\r\n    List<ConfigValue> configValues = new ArrayList<>();\r\n    ConfigValue configValue2 = new ConfigValue();\r\n    configValue2.setId(6L);\r\n    configValue2.setConfigKeyId(6L);\r\n    configValue2.setConfigValue(\"60G\");\r\n    configValue2.setConfigLabelId(1);\r\n    configValueList.add(configValue);\r\n    configValueList.add(configValue2);\r\n    configMapper.updateUserValueList(configValueList);\r\n    ConfigValue result = configMapper.getConfigValueById(5L);\r\n    assertEquals(\"50G\", result.getConfigValue());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-public-enhancements\\linkis-configuration\\src\\test\\java\\org\\apache\\linkis\\configuration\\dao\\ConfigMapperTest.java",
  "methodName" : "testSelectKeyByKeyID",
  "sourceCode" : "@Test\r\nvoid testSelectKeyByKeyID() {\r\n    ConfigKey configKey = configMapper.selectKeyByKeyID(1L);\r\n    assertEquals(\"wds.linkis.rm.yarnqueue\", configKey.getKey());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-public-enhancements\\linkis-configuration\\src\\test\\java\\org\\apache\\linkis\\configuration\\dao\\ConfigMapperTest.java",
  "methodName" : "testSelectKeyByKeyName",
  "sourceCode" : "@Test\r\nvoid testSelectKeyByKeyName() {\r\n    // TODO 查询结果转换异常\r\n    //                ConfigKey configKey =\r\n    // configMapper.selectKeyByKeyName(\"wds.linkis.rm.yarnqueue\");\r\n    //                assertEquals(\"ide\", configKey.getDefaultValue());\r\n    //                System.out.println(configKey.getDefaultValue());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-public-enhancements\\linkis-configuration\\src\\test\\java\\org\\apache\\linkis\\configuration\\dao\\ConfigMapperTest.java",
  "methodName" : "testListKeyByStringValue",
  "sourceCode" : "@Test\r\nvoid testListKeyByStringValue() {\r\n    //        List<ConfigKey> configKeyList = configMapper.listKeyByStringValue(\"*-*,*-*\");\r\n    //        assertEquals(7, configKeyList.size());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-public-enhancements\\linkis-configuration\\src\\test\\java\\org\\apache\\linkis\\configuration\\dao\\ConfigMapperTest.java",
  "methodName" : "testGetCategory",
  "sourceCode" : "@Test\r\nvoid testGetCategory() {\r\n    List<CategoryLabel> categoryLabelList = configMapper.getCategory();\r\n    assertEquals(3, categoryLabelList.size());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-public-enhancements\\linkis-configuration\\src\\test\\java\\org\\apache\\linkis\\configuration\\dao\\ConfigMapperTest.java",
  "methodName" : "testGetCategoryById",
  "sourceCode" : "@Test\r\nvoid testGetCategoryById() {\r\n    CategoryLabel categoryLabel = configMapper.getCategoryById(1);\r\n    //        assertEquals(1, categoryLabel.getLevel());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-public-enhancements\\linkis-configuration\\src\\test\\java\\org\\apache\\linkis\\configuration\\dao\\ConfigMapperTest.java",
  "methodName" : "testInsertCategory",
  "sourceCode" : "@Test\r\nvoid testInsertCategory() {\r\n    CategoryLabel categoryLabel = new CategoryLabel();\r\n    categoryLabel.setId(4);\r\n    categoryLabel.setLevel(1);\r\n    configMapper.insertCategory(categoryLabel);\r\n    List<CategoryLabel> categoryLabelList = configMapper.getCategory();\r\n    assertEquals(4, categoryLabelList.size());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-public-enhancements\\linkis-configuration\\src\\test\\java\\org\\apache\\linkis\\configuration\\dao\\ConfigMapperTest.java",
  "methodName" : "testDeleteCategory",
  "sourceCode" : "@Test\r\nvoid testDeleteCategory() {\r\n    configMapper.deleteCategory(Arrays.asList(1, 3));\r\n    List<CategoryLabel> categoryLabelList = configMapper.getCategory();\r\n    //        assertEquals(1, categoryLabelList.size());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-public-enhancements\\linkis-configuration\\src\\test\\java\\org\\apache\\linkis\\configuration\\dao\\ConfigMapperTest.java",
  "methodName" : "testUpdateCategory",
  "sourceCode" : "@Test\r\nvoid testUpdateCategory() {\r\n    CategoryLabel categoryLabel = new CategoryLabel();\r\n    categoryLabel.setCategoryId(3);\r\n    categoryLabel.setDescription(\"取值范围：1-555，单位：个\");\r\n    configMapper.updateCategory(categoryLabel);\r\n    CategoryLabel result = configMapper.getCategoryById(3);\r\n    assertEquals(\"取值范围：1-555，单位：个\", result.getDescription());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-public-enhancements\\linkis-configuration\\src\\test\\java\\org\\apache\\linkis\\configuration\\dao\\ConfigMapperTest.java",
  "methodName" : "testInsertKey",
  "sourceCode" : "@Test\r\nvoid testInsertKey() {\r\n    ConfigKey configKey = new ConfigKey();\r\n    configKey.setKey(\"wds.linkis.rm.instance.max.max\");\r\n    configKey.setBoundaryType(3);\r\n    configMapper.insertKey(configKey);\r\n    ConfigKey result = configMapper.selectKeyByKeyID(8L);\r\n    //        assertEquals(\"wds.linkis.rm.instance.max.max\", result.getKey());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-public-enhancements\\linkis-configuration\\src\\test\\java\\org\\apache\\linkis\\configuration\\dao\\LabelMapperTest.java",
  "methodName" : "testGetLabelByKeyValue",
  "sourceCode" : "@Test\r\nvoid testGetLabelByKeyValue() {\r\n    ConfigLabel configLabel = labelMapper.getLabelByKeyValue(\"combined_userCreator_engineType\", \"*-IDE,*-*\");\r\n    assertEquals(configLabel.getId(), 2);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-public-enhancements\\linkis-configuration\\src\\test\\java\\org\\apache\\linkis\\configuration\\dao\\LabelMapperTest.java",
  "methodName" : "testInsertLabel",
  "sourceCode" : "@Test\r\nvoid testInsertLabel() {\r\n    ConfigLabel configLabel = insertConfigLabel();\r\n    assertTrue(configLabel.getId() > 0);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-public-enhancements\\linkis-configuration\\src\\test\\java\\org\\apache\\linkis\\configuration\\dao\\LabelMapperTest.java",
  "methodName" : "testDeleteLabel",
  "sourceCode" : "@Test\r\nvoid testDeleteLabel() {\r\n    labelMapper.deleteLabel(Arrays.asList(1, 2));\r\n    assertEquals(labelMapper.getLabelById(1), null);\r\n    assertEquals(labelMapper.getLabelById(2), null);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-public-enhancements\\linkis-configuration\\src\\test\\java\\org\\apache\\linkis\\configuration\\dao\\LabelMapperTest.java",
  "methodName" : "testGetLabelById",
  "sourceCode" : "@Test\r\nvoid testGetLabelById() {\r\n    ConfigLabel configLabel = labelMapper.getLabelById(1);\r\n    assertEquals(configLabel.getStringValue(), \"*-*,*-*\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-public-enhancements\\linkis-configuration\\src\\test\\java\\org\\apache\\linkis\\configuration\\dao\\TemplateConfigKeyMapperTest.java",
  "methodName" : "selectListByTemplateUuid",
  "sourceCode" : "@Test\r\nvoid selectListByTemplateUuid() {\r\n    initData();\r\n    List<TemplateConfigKey> res = templateConfigKeyMapper.selectListByTemplateUuid(uuid);\r\n    assertEquals(res.size(), 1);\r\n    assertEquals(res.get(0).getTemplateName(), name);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-public-enhancements\\linkis-configuration\\src\\test\\java\\org\\apache\\linkis\\configuration\\dao\\TemplateConfigKeyMapperTest.java",
  "methodName" : "deleteByTemplateUuidAndKeyIdList",
  "sourceCode" : "@Test\r\nvoid deleteByTemplateUuidAndKeyIdList() {\r\n    List<TemplateConfigKey> list = initData();\r\n    List<Long> KeyIdList = new ArrayList<>();\r\n    KeyIdList.add(1L);\r\n    int num = templateConfigKeyMapper.deleteByTemplateUuidAndKeyIdList(uuid, KeyIdList);\r\n    assertEquals(num, 1);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-public-enhancements\\linkis-configuration\\src\\test\\java\\org\\apache\\linkis\\configuration\\dao\\TemplateConfigKeyMapperTest.java",
  "methodName" : "batchInsertOrUpdateList",
  "sourceCode" : "@Test\r\nvoid batchInsertOrUpdateList() {\r\n    List<TemplateConfigKey> list = initData();\r\n    list.get(1).setConfigValue(\"20\");\r\n    int isOK = templateConfigKeyMapper.batchInsertOrUpdateList(list);\r\n    Assertions.assertTrue(isOK >= 1);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-public-enhancements\\linkis-configuration\\src\\test\\java\\org\\apache\\linkis\\configuration\\dao\\TemplateConfigKeyMapperTest.java",
  "methodName" : "selectListByTemplateUuidList",
  "sourceCode" : "@Test\r\nvoid selectListByTemplateUuidList() {\r\n    List<TemplateConfigKey> list = initData();\r\n    List<String> templateUuidList = new ArrayList<>();\r\n    templateUuidList.add(uuid);\r\n    templateUuidList.add(\"123456\");\r\n    List<TemplateConfigKey> res = templateConfigKeyMapper.selectListByTemplateUuidList(templateUuidList);\r\n    Assertions.assertTrue(res.size() == 1);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-public-enhancements\\linkis-configuration\\src\\test\\java\\org\\apache\\linkis\\configuration\\restful\\api\\ConfigurationRestfulApiTest.java",
  "methodName" : "TestGetFullTreesByAppName",
  "sourceCode" : "//  @Test\r\n//  public void TestAddKeyForEngine() throws Exception {\r\n//    MultiValueMap<String, String> paramsMap = new LinkedMultiValueMap<>();\r\n//    paramsMap.add(\"engineType\", \"spark\");\r\n//    paramsMap.add(\"version\", \"2.4.3\");\r\n//    paramsMap.add(\"token\", \"e8724-e\");\r\n//    paramsMap.add(\"keyJson\", \"{'engineType':'spark','version':'2.4.3','boundaryType':3}\");\r\n//    String url = \"/configuration/addKeyForEngine\";\r\n//    sendUrl(url, paramsMap, \"get\", null);\r\n//  }\r\n@Test\r\npublic void TestGetFullTreesByAppName() throws Exception {\r\n    MultiValueMap<String, String> paramsMap = new LinkedMultiValueMap<>();\r\n    paramsMap.add(\"engineType\", \"spark\");\r\n    paramsMap.add(\"version\", \"2.4.3\");\r\n    paramsMap.add(\"creator\", \"sam\");\r\n    String url = \"/configuration/getFullTreesByAppName\";\r\n    sendUrl(url, paramsMap, \"get\", null);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-public-enhancements\\linkis-configuration\\src\\test\\java\\org\\apache\\linkis\\configuration\\restful\\api\\ConfigurationRestfulApiTest.java",
  "methodName" : "TestGetCategory",
  "sourceCode" : "@Test\r\npublic void TestGetCategory() throws Exception {\r\n    String url = \"/configuration/getCategory\";\r\n    sendUrl(url, null, \"get\", null);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-public-enhancements\\linkis-configuration\\src\\test\\java\\org\\apache\\linkis\\configuration\\restful\\api\\ConfigurationRestfulApiTest.java",
  "methodName" : "TestCreateFirstCategory",
  "sourceCode" : "@Test\r\npublic void TestCreateFirstCategory() throws Exception {\r\n    String json = \"{\\\"categoryName\\\":\\\"hadoop\\\",\\\"description\\\":\\\"very good\\\"}\";\r\n    String url = \"/configuration/createFirstCategory\";\r\n    sendUrl(url, null, \"post\", json);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-public-enhancements\\linkis-configuration\\src\\test\\java\\org\\apache\\linkis\\configuration\\restful\\api\\ConfigurationRestfulApiTest.java",
  "methodName" : "TestDeleteCategory",
  "sourceCode" : "@Test\r\npublic void TestDeleteCategory() throws Exception {\r\n    String json = \"{\\\"categoryId\\\":\\\"1\\\"}\";\r\n    String url = \"/configuration/deleteCategory\";\r\n    sendUrl(url, null, \"post\", json);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-public-enhancements\\linkis-configuration\\src\\test\\java\\org\\apache\\linkis\\configuration\\restful\\api\\ConfigurationRestfulApiTest.java",
  "methodName" : "TestSaveFullTree",
  "sourceCode" : "@Test\r\npublic void TestSaveFullTree() throws Exception {\r\n    //        String json = \"{\\n\" +\r\n    //                \"  \\\"fullTree\\\": [\\n\" +\r\n    //                \"    {\\n\" +\r\n    //                \"      \\\"name\\\": \\\"hive引擎资源上限\\\",\\n\" +\r\n    //                \"      \\\"description\\\": null,\\n\" +\r\n    //                \"      \\\"settings\\\": [\\n\" +\r\n    //                \"        {\\n\" +\r\n    //                \"          \\\"id\\\": 20,\\n\" +\r\n    //                \"          \\\"key\\\": \\\"wds.linkis.rm.instance\\\",\\n\" +\r\n    //                \"          \\\"description\\\": \\\"范围：1-20，单位：个\\\",\\n\" +\r\n    //                \"          \\\"name\\\": \\\"hive引擎最大并发数\\\",\\n\" +\r\n    //                \"          \\\"defaultValue\\\": \\\"193\\\",\\n\" +\r\n    //                \"          \\\"validateType\\\": \\\"NumInterval\\\",\\n\" +\r\n    //                \"          \\\"validateRange\\\": \\\"[1,20]\\\",\\n\" +\r\n    //                \"          \\\"level\\\": 1,\\n\" +\r\n    //                \"          \\\"engineType\\\": \\\"hive\\\",\\n\" +\r\n    //                \"          \\\"treeName\\\": \\\"hive引擎资源上限\\\",\\n\" +\r\n    //                \"          \\\"valueId\\\": 268,\\n\" +\r\n    //                \"          \\\"configValue\\\": \\\"\\\",\\n\" +\r\n    //                \"          \\\"configLabelId\\\": 1,\\n\" +\r\n    //                \"          \\\"unit\\\": null,\\n\" +\r\n    //                \"          \\\"isUserDefined\\\": false,\\n\" +\r\n    //                \"          \\\"hidden\\\": false,\\n\" +\r\n    //                \"          \\\"advanced\\\": false\\n\" +\r\n    //                \"        }\\n\" +\r\n    //                \"      ]\\n\" +\r\n    //                \"    }\\n\" +\r\n    //                \"  ],\\n\" +\r\n    //                \"  \\\"creator\\\": \\\"LINKISCLI\\\",\\n\" +\r\n    //                \"  \\\"engineType\\\": \\\"hive-2.3.3\\\"\\n\" +\r\n    //                \"}\";\r\n    //        String url = \"/configuration/saveFullTree\";\r\n    //\r\n    //        sendUrl(url,null,\"post\",json);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-public-enhancements\\linkis-configuration\\src\\test\\java\\org\\apache\\linkis\\configuration\\restful\\api\\ConfigurationRestfulApiTest.java",
  "methodName" : "TestEngineType",
  "sourceCode" : "@Test\r\npublic void TestEngineType() throws Exception {\r\n    String json = \"{\\\"categoryId\\\":\\\"1\\\",\\\"description\\\":\\\"very good\\\"}\";\r\n    String url = \"/configuration/engineType\";\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-public-enhancements\\linkis-configuration\\src\\test\\java\\org\\apache\\linkis\\configuration\\restful\\api\\ConfigurationRestfulApiTest.java",
  "methodName" : "TestUpdateCategoryInfo",
  "sourceCode" : "@Test\r\npublic void TestUpdateCategoryInfo() throws Exception {\r\n    String json = \"{\\\"categoryId\\\":\\\"1\\\",\\\"description\\\":\\\"very good\\\"}\";\r\n    String url = \"/configuration/updateCategoryInfo\";\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-public-enhancements\\linkis-configuration\\src\\test\\java\\org\\apache\\linkis\\configuration\\restful\\api\\ConfigurationRestfulApiTest.java",
  "methodName" : "TestRpcTest",
  "sourceCode" : "@Test\r\npublic void TestRpcTest() throws Exception {\r\n    String json = \"{\\\"categoryId\\\":\\\"1\\\",\\\"description\\\":\\\"very good\\\"}\";\r\n    String url = \"/configuration/updateCategoryInfo\";\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-public-enhancements\\linkis-configuration\\src\\test\\java\\org\\apache\\linkis\\configuration\\restful\\api\\ConfigurationRestfulApiTest.java",
  "methodName" : "TestCheckAdmin",
  "sourceCode" : "@Test\r\npublic void TestCheckAdmin() throws Exception {\r\n    String json = \"{\\\"categoryId\\\":\\\"1\\\",\\\"description\\\":\\\"very good\\\"}\";\r\n    String url = \"/configuration/updateCategoryInfo\";\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-public-enhancements\\linkis-configuration\\src\\test\\java\\org\\apache\\linkis\\configuration\\util\\LabelEntityParserTest.java",
  "methodName" : "testParseToConfigLabel",
  "sourceCode" : "@Test\r\npublic void testParseToConfigLabel() throws Exception {\r\n    //        List<Label<?>> list = new ArrayList<>();\r\n    //\r\n    //        ConfigLabel configLabel = labelEntityParser.parseToConfigLabel(CombinedLabel);\r\n    //        assertEquals(10,configLabel.getId());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-public-enhancements\\linkis-configuration\\src\\test\\java\\org\\apache\\linkis\\configuration\\util\\LabelEntityParserTest.java",
  "methodName" : "testGenerateUserCreatorEngineTypeLabelList",
  "sourceCode" : "@Test\r\npublic void testGenerateUserCreatorEngineTypeLabelList() throws Exception {\r\n    // TODO: Test goes here...\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-public-enhancements\\linkis-configuration\\src\\test\\java\\org\\apache\\linkis\\configuration\\util\\LabelEntityParserTest.java",
  "methodName" : "testLabelDecompile",
  "sourceCode" : "@Test\r\npublic void testLabelDecompile() throws Exception {\r\n    // TODO: Test goes here...\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-public-enhancements\\linkis-cs-server\\src\\test\\java\\org\\apache\\linkis\\cs\\ContainsTest.java",
  "methodName" : "testSearch",
  "sourceCode" : "@Test\r\npublic void testSearch() throws ContextSearchFailedException {\r\n    ContextSearch contextSearch = new DefaultContextSearch();\r\n    ContextCacheService contextCacheService = Mockito.mock(ContextCacheService.class);\r\n    Mockito.when(contextCacheService.getAll(Mockito.any(ContextID.class))).thenReturn(contextKeyValues);\r\n    ConditionBuilder conditionBuilder = ConditionBuilder.newBuilder();\r\n    conditionBuilder.contains(\"abc\");\r\n    Condition condition = conditionBuilder.build();\r\n    ContextID contextID = new TestContextID();\r\n    contextID.setContextId(\"id\");\r\n    List<ContextKeyValue> list = contextSearch.search(contextCacheService, contextID, condition);\r\n    assertEquals(1, list.size());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-public-enhancements\\linkis-cs-server\\src\\test\\java\\org\\apache\\linkis\\cs\\ContainsTest.java",
  "methodName" : "testSearchNegate",
  "sourceCode" : "@Test\r\npublic void testSearchNegate() throws ContextSearchFailedException {\r\n    ContextSearch contextSearch = new DefaultContextSearch();\r\n    ContextCacheService contextCacheService = Mockito.mock(ContextCacheService.class);\r\n    Mockito.when(contextCacheService.getAll(Mockito.any(ContextID.class))).thenReturn(contextKeyValues);\r\n    ConditionBuilder conditionBuilder = ConditionBuilder.newBuilder();\r\n    conditionBuilder.contains(\"abc\");\r\n    Condition condition = conditionBuilder.build().not();\r\n    ContextID contextID = new TestContextID();\r\n    contextID.setContextId(\"id\");\r\n    List<ContextKeyValue> list = contextSearch.search(contextCacheService, contextID, condition);\r\n    assertEquals(2, list.size());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-public-enhancements\\linkis-cs-server\\src\\test\\java\\org\\apache\\linkis\\cs\\ContextScopeTest.java",
  "methodName" : "testSearch",
  "sourceCode" : "@Test\r\npublic void testSearch() throws ContextSearchFailedException {\r\n    ContextSearch contextSearch = new DefaultContextSearch();\r\n    ContextCacheService contextCacheService = Mockito.mock(ContextCacheService.class);\r\n    Mockito.when(contextCacheService.getAll(Mockito.any(ContextID.class))).thenReturn(contextKeyValues);\r\n    ConditionBuilder conditionBuilder = ConditionBuilder.newBuilder();\r\n    conditionBuilder.contextScopes(Lists.newArrayList(ContextScope.PROTECTED));\r\n    Condition condition = conditionBuilder.build();\r\n    ContextID contextID = new TestContextID();\r\n    contextID.setContextId(\"id\");\r\n    List<ContextKeyValue> list = contextSearch.search(contextCacheService, contextID, condition);\r\n    assertEquals(2, list.size());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-public-enhancements\\linkis-cs-server\\src\\test\\java\\org\\apache\\linkis\\cs\\ContextScopeTest.java",
  "methodName" : "testSearchNegate",
  "sourceCode" : "@Test\r\npublic void testSearchNegate() throws ContextSearchFailedException {\r\n    ContextSearch contextSearch = new DefaultContextSearch();\r\n    ContextCacheService contextCacheService = Mockito.mock(ContextCacheService.class);\r\n    Mockito.when(contextCacheService.getAll(Mockito.any(ContextID.class))).thenReturn(contextKeyValues);\r\n    ConditionBuilder conditionBuilder = ConditionBuilder.newBuilder();\r\n    conditionBuilder.contextScopes(Lists.newArrayList(ContextScope.PROTECTED));\r\n    Condition condition = conditionBuilder.build().not();\r\n    ContextID contextID = new TestContextID();\r\n    contextID.setContextId(\"id\");\r\n    List<ContextKeyValue> list = contextSearch.search(contextCacheService, contextID, condition);\r\n    assertEquals(1, list.size());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-public-enhancements\\linkis-cs-server\\src\\test\\java\\org\\apache\\linkis\\cs\\ContextSearchTest.java",
  "methodName" : "testSearch",
  "sourceCode" : "@Test\r\npublic void testSearch() throws ContextSearchFailedException {\r\n    ContextSearch contextSearch = new DefaultContextSearch();\r\n    ContextCacheService contextCacheService = Mockito.mock(ContextCacheService.class);\r\n    Mockito.when(contextCacheService.getAll(Mockito.any(ContextID.class))).thenReturn(contextKeyValues);\r\n    ConditionBuilder conditionBuilder = ConditionBuilder.newBuilder();\r\n    conditionBuilder.contextScopes(Lists.newArrayList(ContextScope.PRIVATE)).contains(\"key\");\r\n    Condition condition = conditionBuilder.build();\r\n    ContextID contextID = new TestContextID();\r\n    contextID.setContextId(\"id\");\r\n    List<ContextKeyValue> list = contextSearch.search(contextCacheService, contextID, condition);\r\n    assertEquals(1, list.size());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-public-enhancements\\linkis-cs-server\\src\\test\\java\\org\\apache\\linkis\\cs\\ContextTypeTest.java",
  "methodName" : "testSearch",
  "sourceCode" : "@Test\r\npublic void testSearch() throws ContextSearchFailedException {\r\n    ContextSearch contextSearch = new DefaultContextSearch();\r\n    ContextCacheService contextCacheService = Mockito.mock(ContextCacheService.class);\r\n    Mockito.when(contextCacheService.getAllByType(Mockito.any(ContextID.class), Mockito.any(ContextType.class))).thenReturn(contextKeyValues);\r\n    ConditionBuilder conditionBuilder = ConditionBuilder.newBuilder();\r\n    conditionBuilder.contextTypes(Lists.newArrayList(ContextType.DATA));\r\n    Condition condition = conditionBuilder.build();\r\n    ContextID contextID = new TestContextID();\r\n    contextID.setContextId(\"id\");\r\n    List<ContextKeyValue> list = contextSearch.search(contextCacheService, contextID, condition);\r\n    assertEquals(1, list.size());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-public-enhancements\\linkis-cs-server\\src\\test\\java\\org\\apache\\linkis\\cs\\errorcode\\LinkisCsServerErrorCodeSummaryTest.java",
  "methodName" : "enumTest",
  "sourceCode" : "@Test\r\n@DisplayName(\"enumTest\")\r\npublic void enumTest() {\r\n    String errorDesc = LinkisCsServerErrorCodeSummary.UNKNOWN_CONDITION_TYPE.getErrorDesc();\r\n    Assertions.assertNotNull(errorDesc);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-public-enhancements\\linkis-cs-server\\src\\test\\java\\org\\apache\\linkis\\cs\\exception\\ContextSearchFailedExceptionTest.java",
  "methodName" : "exceptionTest",
  "sourceCode" : "@Test\r\n@DisplayName(\"exceptionTest\")\r\npublic void exceptionTest() {\r\n    int errorCode = 1200001;\r\n    String errorDesc = \"Unknown Condition Type(未知条件类型)\";\r\n    ContextSearchFailedException exception = new ContextSearchFailedException(errorCode, errorDesc);\r\n    Assertions.assertTrue(errorCode == exception.getErrCode());\r\n    Assertions.assertEquals(errorDesc, exception.getDesc());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-public-enhancements\\linkis-cs-server\\src\\test\\java\\org\\apache\\linkis\\cs\\parser\\ApiJsonTest.java",
  "methodName" : "test",
  "sourceCode" : "@Test\r\npublic void test() throws IOException {\r\n    String apiString = \"{\\n\" + \"\\t\\\"type\\\":\\\"And\\\",\\n\" + \"\\t\\\"left\\\":{\\n\" + \"\\t\\t\\\"type\\\":\\\"ContextType\\\",\\n\" + \"\\t\\t\\\"contextType\\\":\\\"DATA\\\"\\n\" + \"\\t},\\n\" + \"\\t\\\"right\\\":{\\n\" + \"\\t\\t\\\"type\\\":\\\"And\\\",\\n\" + \"\\t\\t\\\"left\\\":{\\n\" + \"\\t\\t\\t\\\"type\\\":\\\"ContextScope\\\",\\n\" + \"\\t\\t\\t\\\"contextScope\\\":\\\"PRIVATE\\\"\\n\" + \"\\t\\t},\\n\" + \"\\t\\t\\\"right\\\":{\\n\" + \"\\t\\t\\t\\\"type\\\":\\\"Regex\\\",\\n\" + \"\\t\\t\\t\\\"regex\\\":\\\"[abc]]\\\"\\n\" + \"\\t\\t}\\n\" + \"\\t}\\n\" + \"}\";\r\n    ObjectMapper objectMapper = new ObjectMapper();\r\n    JsonNode jsonNode = objectMapper.readTree(apiString);\r\n    Map<Object, Object> conditionMap = objectMapper.convertValue(jsonNode, new TypeReference<Map<Object, Object>>() {\r\n    });\r\n    ConditionParser conditionParser = ConditionParser.parserMap.get(conditionMap.get(\"type\"));\r\n    Condition condition = conditionParser.parse(conditionMap);\r\n    assertEquals(condition.getConditionType(), ConditionType.Logic);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-public-enhancements\\linkis-cs-server\\src\\test\\java\\org\\apache\\linkis\\cs\\parser\\ApiJsonTest.java",
  "methodName" : "temp",
  "sourceCode" : "@Test\r\npublic void temp() {\r\n    String test = \"{\\\"cols\\\":[{\\\"name\\\":\\\"birthday\\\",\\\"visualType\\\":\\\"string\\\",\\\"type\\\":\\\"category\\\",\\\"config\\\":true,\\\"field\\\":{\\\"alias\\\":\\\"\\\",\\\"desc\\\":\\\"\\\",\\\"useExpression\\\":false},\\\"format\\\":{\\\"formatType\\\":\\\"default\\\"},\\\"from\\\":\\\"cols\\\"},{\\\"name\\\":\\\"name\\\",\\\"visualType\\\":\\\"string\\\",\\\"type\\\":\\\"category\\\",\\\"config\\\":true,\\\"field\\\":{\\\"alias\\\":\\\"\\\",\\\"desc\\\":\\\"\\\",\\\"useExpression\\\":false},\\\"format\\\":{\\\"formatType\\\":\\\"default\\\"},\\\"from\\\":\\\"cols\\\"}],\\\"rows\\\":[],\\\"metrics\\\":[{\\\"name\\\":\\\"score@Visualis@6F01974E\\\",\\\"visualType\\\":\\\"number\\\",\\\"type\\\":\\\"value\\\",\\\"agg\\\":\\\"sum\\\",\\\"config\\\":true,\\\"chart\\\":{\\\"id\\\":1,\\\"name\\\":\\\"table\\\",\\\"title\\\":\\\"表格\\\",\\\"icon\\\":\\\"icon-table\\\",\\\"coordinate\\\":\\\"other\\\",\\\"rules\\\":[{\\\"dimension\\\":[0,9999],\\\"metric\\\":[0,9999]}],\\\"data\\\":{\\\"cols\\\":{\\\"title\\\":\\\"列\\\",\\\"type\\\":\\\"category\\\"},\\\"rows\\\":{\\\"title\\\":\\\"行\\\",\\\"type\\\":\\\"category\\\"},\\\"metrics\\\":{\\\"title\\\":\\\"指标\\\",\\\"type\\\":\\\"value\\\"},\\\"filters\\\":{\\\"title\\\":\\\"筛选\\\",\\\"type\\\":\\\"all\\\"}},\\\"style\\\":{\\\"table\\\":{\\\"fontFamily\\\":\\\"PingFang SC\\\",\\\"fontSize\\\":\\\"12\\\",\\\"color\\\":\\\"#666\\\",\\\"lineStyle\\\":\\\"solid\\\",\\\"lineColor\\\":\\\"#D9D9D9\\\",\\\"headerBackgroundColor\\\":\\\"#f7f7f7\\\",\\\"headerConfig\\\":[],\\\"columnsConfig\\\":[],\\\"leftFixedColumns\\\":[],\\\"rightFixedColumns\\\":[],\\\"headerFixed\\\":true,\\\"autoMergeCell\\\":false,\\\"bordered\\\":true,\\\"size\\\":\\\"default\\\",\\\"withPaging\\\":true,\\\"pageSize\\\":\\\"20\\\",\\\"withNoAggregators\\\":false},\\\"spec\\\":{}}},\\\"field\\\":{\\\"alias\\\":\\\"\\\",\\\"desc\\\":\\\"\\\",\\\"useExpression\\\":false},\\\"format\\\":{\\\"formatType\\\":\\\"default\\\"},\\\"from\\\":\\\"metrics\\\"}],\\\"filters\\\":[],\\\"color\\\":{\\\"title\\\":\\\"颜色\\\",\\\"type\\\":\\\"category\\\",\\\"value\\\":{\\\"all\\\":\\\"#509af2\\\"},\\\"items\\\":[]},\\\"chartStyles\\\":{\\\"richText\\\":{\\\"content\\\":\\\"<p>〖@dv_name_dv@〗</p><p><strong style=\\\\\\\"color: rgb(230, 0, 0);\\\\\\\">〖@dv_birthday_dv@〗</strong></p>\\\"},\\\"spec\\\":{}},\\\"selectedChart\\\":15,\\\"data\\\":[],\\\"pagination\\\":{\\\"pageNo\\\":0,\\\"pageSize\\\":0,\\\"withPaging\\\":false,\\\"totalCount\\\":0},\\\"dimetionAxis\\\":\\\"col\\\",\\\"renderType\\\":\\\"rerender\\\",\\\"orders\\\":[],\\\"mode\\\":\\\"chart\\\",\\\"model\\\":{\\\"birthday\\\":{\\\"sqlType\\\":\\\"STRING\\\",\\\"visualType\\\":\\\"string\\\",\\\"modelType\\\":\\\"category\\\"},\\\"score\\\":{\\\"sqlType\\\":\\\"DOUBLE\\\",\\\"visualType\\\":\\\"number\\\",\\\"modelType\\\":\\\"value\\\"},\\\"teacher\\\":{\\\"sqlType\\\":\\\"STRING\\\",\\\"visualType\\\":\\\"string\\\",\\\"modelType\\\":\\\"category\\\"},\\\"city\\\":{\\\"sqlType\\\":\\\"STRING\\\",\\\"visualType\\\":\\\"string\\\",\\\"modelType\\\":\\\"category\\\"},\\\"sex\\\":{\\\"sqlType\\\":\\\"STRING\\\",\\\"visualType\\\":\\\"string\\\",\\\"modelType\\\":\\\"category\\\"},\\\"fee\\\":{\\\"sqlType\\\":\\\"DOUBLE\\\",\\\"visualType\\\":\\\"number\\\",\\\"modelType\\\":\\\"value\\\"},\\\"name\\\":{\\\"sqlType\\\":\\\"STRING\\\",\\\"visualType\\\":\\\"string\\\",\\\"modelType\\\":\\\"category\\\"},\\\"lesson\\\":{\\\"sqlType\\\":\\\"STRING\\\",\\\"visualType\\\":\\\"string\\\",\\\"modelType\\\":\\\"category\\\"},\\\"id\\\":{\\\"sqlType\\\":\\\"INT\\\",\\\"visualType\\\":\\\"number\\\",\\\"modelType\\\":\\\"value\\\"},\\\"class\\\":{\\\"sqlType\\\":\\\"STRING\\\",\\\"visualType\\\":\\\"string\\\",\\\"modelType\\\":\\\"category\\\"},\\\"exam_date\\\":{\\\"sqlType\\\":\\\"STRING\\\",\\\"visualType\\\":\\\"string\\\",\\\"modelType\\\":\\\"category\\\"},\\\"age\\\":{\\\"sqlType\\\":\\\"INT\\\",\\\"visualType\\\":\\\"number\\\",\\\"modelType\\\":\\\"value\\\"}},\\\"controls\\\":[],\\\"computed\\\":[],\\\"cache\\\":false,\\\"expired\\\":300,\\\"autoLoadData\\\":true,\\\"query\\\":{\\\"groups\\\":[\\\"birthday\\\",\\\"name\\\"],\\\"aggregators\\\":[{\\\"column\\\":\\\"score\\\",\\\"func\\\":\\\"sum\\\"}],\\\"filters\\\":[],\\\"orders\\\":[],\\\"pageNo\\\":0,\\\"pageSize\\\":0,\\\"nativeQuery\\\":false,\\\"cache\\\":false,\\\"expired\\\":0,\\\"flush\\\":false}}\";\r\n    Set<String> columns = getWidgetUsedColumns(test);\r\n    columns.size();\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-public-enhancements\\linkis-cs-server\\src\\test\\java\\org\\apache\\linkis\\cs\\persistence\\conf\\PersistenceConfTest.java",
  "methodName" : "constTest",
  "sourceCode" : "@Test\r\n@DisplayName(\"constTest\")\r\npublic void constTest() {\r\n    String tuningClassValue = PersistenceConf.TUNING_CLASS.getValue();\r\n    String tuningMethodValue = PersistenceConf.TUNING_METHOD.getValue();\r\n    Boolean packageHeaderValue = PersistenceConf.ENABLE_CS_DESERIALIZE_REPLACE_PACKAGE_HEADER.getValue();\r\n    String csDeserializeReplacePackageHeaderValue = PersistenceConf.CS_DESERIALIZE_REPLACE_PACKAGE_HEADER.getValue();\r\n    String csidPackageHeader = PersistenceConf.CSID_PACKAGE_HEADER;\r\n    Assertions.assertNotNull(tuningClassValue);\r\n    Assertions.assertNotNull(tuningMethodValue);\r\n    Assertions.assertTrue(packageHeaderValue.booleanValue());\r\n    Assertions.assertNotNull(csDeserializeReplacePackageHeaderValue);\r\n    Assertions.assertNotNull(csidPackageHeader);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-public-enhancements\\linkis-cs-server\\src\\test\\java\\org\\apache\\linkis\\cs\\persistence\\dao\\ContextHistoryMapperTest.java",
  "methodName" : "createHistoryTest",
  "sourceCode" : "@Test\r\n@DisplayName(\"createHistoryTest\")\r\npublic void createHistoryTest() {\r\n    ContextID contextID = new CommonContextID();\r\n    contextID.setContextId(\"1\");\r\n    PersistenceContextHistory history = createPersistenceContextHistory();\r\n    contextHistoryMapper.createHistory(history);\r\n    PersistenceContextHistory contextHistory = contextHistoryMapper.getHistory(contextID, 3L);\r\n    Assertions.assertNotNull(contextHistory);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-public-enhancements\\linkis-cs-server\\src\\test\\java\\org\\apache\\linkis\\cs\\persistence\\dao\\ContextHistoryMapperTest.java",
  "methodName" : "getHistoryBySourceTest",
  "sourceCode" : "@Test\r\n@DisplayName(\"getHistoryBySourceTest\")\r\npublic void getHistoryBySourceTest() {\r\n    ContextID contextID = new CommonContextID();\r\n    contextID.setContextId(\"1\");\r\n    PersistenceContextHistory history = createPersistenceContextHistory();\r\n    contextHistoryMapper.createHistory(history);\r\n    PersistenceContextHistory contextHistory = contextHistoryMapper.getHistoryBySource(contextID, \"source\");\r\n    Assertions.assertNotNull(contextHistory);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-public-enhancements\\linkis-cs-server\\src\\test\\java\\org\\apache\\linkis\\cs\\persistence\\dao\\ContextHistoryMapperTest.java",
  "methodName" : "getHistoriesByContextIDTest",
  "sourceCode" : "@Test\r\n@DisplayName(\"getHistoriesByContextIDTest\")\r\npublic void getHistoriesByContextIDTest() {\r\n    ContextID contextID = new CommonContextID();\r\n    contextID.setContextId(\"1\");\r\n    PersistenceContextHistory history = createPersistenceContextHistory();\r\n    contextHistoryMapper.createHistory(history);\r\n    List<PersistenceContextHistory> histories = contextHistoryMapper.getHistoriesByContextID(contextID);\r\n    Assertions.assertTrue(histories.size() > 0);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-public-enhancements\\linkis-cs-server\\src\\test\\java\\org\\apache\\linkis\\cs\\persistence\\dao\\ContextHistoryMapperTest.java",
  "methodName" : "removeHistoryTest",
  "sourceCode" : "@Test\r\n@DisplayName(\"removeHistoryTest\")\r\npublic void removeHistoryTest() {\r\n    ContextID contextID = new CommonContextID();\r\n    contextID.setContextId(\"1\");\r\n    PersistenceContextHistory history = createPersistenceContextHistory();\r\n    contextHistoryMapper.createHistory(history);\r\n    contextHistoryMapper.removeHistory(contextID, \"source\");\r\n    List<PersistenceContextHistory> histories = contextHistoryMapper.getHistoriesByContextID(contextID);\r\n    Assertions.assertTrue(histories.size() == 0);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-public-enhancements\\linkis-cs-server\\src\\test\\java\\org\\apache\\linkis\\cs\\persistence\\dao\\ContextHistoryMapperTest.java",
  "methodName" : "updateHistoryTest",
  "sourceCode" : "@Test\r\n@DisplayName(\"updateHistoryTest\")\r\npublic void updateHistoryTest() {\r\n    String keyWord = \"Test it.\";\r\n    ContextID contextID = new CommonContextID();\r\n    contextID.setContextId(\"1\");\r\n    PersistenceContextHistory history = createPersistenceContextHistory();\r\n    contextHistoryMapper.createHistory(history);\r\n    history.setKeyword(keyWord);\r\n    contextHistoryMapper.updateHistory(contextID, history);\r\n    PersistenceContextHistory contextHistory = contextHistoryMapper.getHistory(contextID, 3L);\r\n    Assertions.assertEquals(keyWord, contextHistory.getKeyword());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-public-enhancements\\linkis-cs-server\\src\\test\\java\\org\\apache\\linkis\\cs\\persistence\\dao\\ContextHistoryMapperTest.java",
  "methodName" : "searchByKeywordsTest",
  "sourceCode" : "@Test\r\n@DisplayName(\"searchByKeywordsTest\")\r\npublic void searchByKeywordsTest() {\r\n    String[] keyWords = { \"success\" };\r\n    ContextID contextID = new CommonContextID();\r\n    contextID.setContextId(\"1\");\r\n    PersistenceContextHistory history = createPersistenceContextHistory();\r\n    contextHistoryMapper.createHistory(history);\r\n    List<PersistenceContextHistory> histories = contextHistoryMapper.searchByKeywords(contextID, keyWords);\r\n    Assertions.assertTrue(histories.size() > 0);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-public-enhancements\\linkis-cs-server\\src\\test\\java\\org\\apache\\linkis\\cs\\persistence\\dao\\ContextHistoryMapperTest.java",
  "methodName" : "searchByKeywordsAndTypeTest",
  "sourceCode" : "@Test\r\n@DisplayName(\"searchByKeywordsAndTypeTest\")\r\npublic void searchByKeywordsAndTypeTest() {\r\n    String[] keyWords = { \"success\" };\r\n    ContextID contextID = new CommonContextID();\r\n    contextID.setContextId(\"1\");\r\n    PersistenceContextHistory history = createPersistenceContextHistory();\r\n    contextHistoryMapper.createHistory(history);\r\n    List<PersistenceContextHistory> histories = contextHistoryMapper.searchByKeywordsAndType(ContextType.UDF, keyWords);\r\n    Assertions.assertTrue(histories.size() > 0);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-public-enhancements\\linkis-cs-server\\src\\test\\java\\org\\apache\\linkis\\cs\\persistence\\dao\\ContextIDListenerMapperTest.java",
  "methodName" : "createIDListenerTest",
  "sourceCode" : "@Test\r\n@DisplayName(\"createIDListenerTest\")\r\npublic void createIDListenerTest() {\r\n    ContextID contextID = new CommonContextID();\r\n    contextID.setContextId(\"1\");\r\n    PersistenceContextIDListener listener = createPersistenceContextIDListener();\r\n    contextIDListenerMapper.createIDListener(listener);\r\n    List<PersistenceContextIDListener> all = contextIDListenerMapper.getAll(contextID);\r\n    Assertions.assertTrue(all.size() > 0);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-public-enhancements\\linkis-cs-server\\src\\test\\java\\org\\apache\\linkis\\cs\\persistence\\dao\\ContextIDListenerMapperTest.java",
  "methodName" : "removeTest",
  "sourceCode" : "@Test\r\n@DisplayName(\"removeTest\")\r\npublic void removeTest() {\r\n    ContextID contextID = new CommonContextID();\r\n    contextID.setContextId(\"1\");\r\n    PersistenceContextIDListener listener = createPersistenceContextIDListener();\r\n    contextIDListenerMapper.createIDListener(listener);\r\n    contextIDListenerMapper.remove(listener);\r\n    List<PersistenceContextIDListener> all = contextIDListenerMapper.getAll(contextID);\r\n    Assertions.assertTrue(all.size() == 0);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-public-enhancements\\linkis-cs-server\\src\\test\\java\\org\\apache\\linkis\\cs\\persistence\\dao\\ContextIDListenerMapperTest.java",
  "methodName" : "removeAllTest",
  "sourceCode" : "@Test\r\n@DisplayName(\"removeAllTest\")\r\npublic void removeAllTest() {\r\n    ContextID contextID = new CommonContextID();\r\n    contextID.setContextId(\"1\");\r\n    PersistenceContextIDListener listener = createPersistenceContextIDListener();\r\n    contextIDListenerMapper.createIDListener(listener);\r\n    contextIDListenerMapper.removeAll(contextID);\r\n    List<PersistenceContextIDListener> all = contextIDListenerMapper.getAll(contextID);\r\n    Assertions.assertTrue(all.size() == 0);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-public-enhancements\\linkis-cs-server\\src\\test\\java\\org\\apache\\linkis\\cs\\persistence\\dao\\ContextIDMapperTest.java",
  "methodName" : "createContextIDTest",
  "sourceCode" : "@Test\r\n@DisplayName(\"createContextIDTest\")\r\npublic void createContextIDTest() {\r\n    PersistenceContextID contextID = createPersistenceContextID();\r\n    contextIDMapper.createContextID(contextID);\r\n    PersistenceContextID persistenceContextID = contextIDMapper.getContextID(\"1\");\r\n    Assertions.assertNotNull(persistenceContextID);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-public-enhancements\\linkis-cs-server\\src\\test\\java\\org\\apache\\linkis\\cs\\persistence\\dao\\ContextIDMapperTest.java",
  "methodName" : "deleteContextIDTest",
  "sourceCode" : "@Test\r\n@DisplayName(\"deleteContextIDTest\")\r\npublic void deleteContextIDTest() {\r\n    PersistenceContextID contextID = createPersistenceContextID();\r\n    contextIDMapper.createContextID(contextID);\r\n    contextIDMapper.deleteContextID(\"1\");\r\n    PersistenceContextID persistenceContextID = contextIDMapper.getContextID(\"1\");\r\n    Assertions.assertNull(persistenceContextID);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-public-enhancements\\linkis-cs-server\\src\\test\\java\\org\\apache\\linkis\\cs\\persistence\\dao\\ContextIDMapperTest.java",
  "methodName" : "updateContextIDTest",
  "sourceCode" : "@Test\r\n@DisplayName(\"updateContextIDTest\")\r\npublic void updateContextIDTest() {\r\n    String newName = \"hadoops\";\r\n    PersistenceContextID contextID = createPersistenceContextID();\r\n    contextIDMapper.createContextID(contextID);\r\n    contextID.setUser(newName);\r\n    contextIDMapper.updateContextID(contextID);\r\n    PersistenceContextID persistenceContextID = contextIDMapper.getContextID(\"1\");\r\n    Assertions.assertEquals(newName, persistenceContextID.getUser());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-public-enhancements\\linkis-cs-server\\src\\test\\java\\org\\apache\\linkis\\cs\\persistence\\dao\\ContextIDMapperTest.java",
  "methodName" : "searchContextIDTest",
  "sourceCode" : "@Test\r\n@DisplayName(\"searchContextIDTest\")\r\npublic void searchContextIDTest() {\r\n    PersistenceContextID contextID = createPersistenceContextID();\r\n    contextIDMapper.createContextID(contextID);\r\n    List<PersistenceContextID> contextIDS = contextIDMapper.searchContextID(contextID);\r\n    Assertions.assertNotNull(contextIDS);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-public-enhancements\\linkis-cs-server\\src\\test\\java\\org\\apache\\linkis\\cs\\persistence\\dao\\ContextIDMapperTest.java",
  "methodName" : "getAllContextIDByTimeTest",
  "sourceCode" : "@Test\r\n@DisplayName(\"getAllContextIDByTimeTest\")\r\npublic void getAllContextIDByTimeTest() {\r\n    PersistenceContextID contextID = createPersistenceContextID();\r\n    contextIDMapper.createContextID(contextID);\r\n    List<PersistenceContextID> contextIDS = contextIDMapper.getAllContextIDByTime(null, null, null, null, null, null);\r\n    Assertions.assertTrue(contextIDS.size() > 0);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-public-enhancements\\linkis-cs-server\\src\\test\\java\\org\\apache\\linkis\\cs\\persistence\\dao\\ContextKeyListenerMapperTest.java",
  "methodName" : "createKeyListenerTest",
  "sourceCode" : "@Test\r\n@DisplayName(\"createKeyListenerTest\")\r\npublic void createKeyListenerTest() {\r\n    List<Integer> keyIds = new ArrayList<>();\r\n    keyIds.add(1);\r\n    PersistenceContextKeyListener listener = createPersistenceContextKeyListener();\r\n    contextKeyListenerMapper.createKeyListener(listener);\r\n    List<PersistenceContextKeyListener> all = contextKeyListenerMapper.getAll(keyIds);\r\n    Assertions.assertTrue(all.size() > 0);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-public-enhancements\\linkis-cs-server\\src\\test\\java\\org\\apache\\linkis\\cs\\persistence\\dao\\ContextKeyListenerMapperTest.java",
  "methodName" : "removeTest",
  "sourceCode" : "@Test\r\n@DisplayName(\"removeTest\")\r\npublic void removeTest() {\r\n    List<Integer> keyIds = new ArrayList<>();\r\n    keyIds.add(1);\r\n    ContextKeyListenerDomain contextKeyListenerDomain = new CommonContextKeyListenerDomain();\r\n    contextKeyListenerDomain.setSource(\"source\");\r\n    PersistenceContextKeyListener listener = createPersistenceContextKeyListener();\r\n    contextKeyListenerMapper.createKeyListener(listener);\r\n    contextKeyListenerMapper.remove(contextKeyListenerDomain, 1);\r\n    List<PersistenceContextKeyListener> all = contextKeyListenerMapper.getAll(keyIds);\r\n    Assertions.assertTrue(all.size() == 0);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-public-enhancements\\linkis-cs-server\\src\\test\\java\\org\\apache\\linkis\\cs\\persistence\\dao\\ContextKeyListenerMapperTest.java",
  "methodName" : "removeAllTest",
  "sourceCode" : "@Test\r\n@DisplayName(\"removeAllTest\")\r\npublic void removeAllTest() {\r\n    List<Integer> keyIds = new ArrayList<>();\r\n    keyIds.add(1);\r\n    ContextKeyListenerDomain contextKeyListenerDomain = new CommonContextKeyListenerDomain();\r\n    contextKeyListenerDomain.setSource(\"source\");\r\n    PersistenceContextKeyListener listener = createPersistenceContextKeyListener();\r\n    contextKeyListenerMapper.createKeyListener(listener);\r\n    contextKeyListenerMapper.removeAll(keyIds);\r\n    List<PersistenceContextKeyListener> all = contextKeyListenerMapper.getAll(keyIds);\r\n    Assertions.assertTrue(all.size() == 0);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-public-enhancements\\linkis-cs-server\\src\\test\\java\\org\\apache\\linkis\\cs\\persistence\\dao\\ContextKeyListenerMapperTest.java",
  "methodName" : "getAllTest",
  "sourceCode" : "@Test\r\n@DisplayName(\"getAllTest\")\r\npublic void getAllTest() {\r\n    List<Integer> keyIds = new ArrayList<>();\r\n    keyIds.add(1);\r\n    ContextKeyListenerDomain contextKeyListenerDomain = new CommonContextKeyListenerDomain();\r\n    contextKeyListenerDomain.setSource(\"source\");\r\n    PersistenceContextKeyListener listener = createPersistenceContextKeyListener();\r\n    contextKeyListenerMapper.createKeyListener(listener);\r\n    List<PersistenceContextKeyListener> all = contextKeyListenerMapper.getAll(keyIds);\r\n    Assertions.assertTrue(all.size() > 0);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-public-enhancements\\linkis-cs-server\\src\\test\\java\\org\\apache\\linkis\\cs\\persistence\\utils\\PersistenceUtilsTest.java",
  "methodName" : "generateSetMethodTest",
  "sourceCode" : "@Test\r\n@DisplayName(\"generateSetMethodTest\")\r\npublic void generateSetMethodTest() {\r\n    String fieldName = \"generateSetMethodTest\";\r\n    String setMethod = PersistenceUtils.generateSetMethod(fieldName);\r\n    Assertions.assertNotNull(setMethod);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-public-enhancements\\linkis-cs-server\\src\\test\\java\\org\\apache\\linkis\\cs\\RegexTest.java",
  "methodName" : "testSearch",
  "sourceCode" : "@Test\r\npublic void testSearch() throws ContextSearchFailedException {\r\n    ContextSearch contextSearch = new DefaultContextSearch();\r\n    ContextCacheService contextCacheService = Mockito.mock(ContextCacheService.class);\r\n    Mockito.when(contextCacheService.getAll(Mockito.any(ContextID.class))).thenReturn(contextKeyValues);\r\n    ConditionBuilder conditionBuilder = ConditionBuilder.newBuilder();\r\n    conditionBuilder.regex(\"[abc]\");\r\n    Condition condition = conditionBuilder.build();\r\n    ContextID contextID = new TestContextID();\r\n    contextID.setContextId(\"id\");\r\n    List<ContextKeyValue> list = contextSearch.search(contextCacheService, contextID, condition);\r\n    assertEquals(1, list.size());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-public-enhancements\\linkis-cs-server\\src\\test\\java\\org\\apache\\linkis\\cs\\RegexTest.java",
  "methodName" : "testSearchNegate",
  "sourceCode" : "@Test\r\npublic void testSearchNegate() throws ContextSearchFailedException {\r\n    ContextSearch contextSearch = new DefaultContextSearch();\r\n    ContextCacheService contextCacheService = Mockito.mock(ContextCacheService.class);\r\n    Mockito.when(contextCacheService.getAll(Mockito.any(ContextID.class))).thenReturn(contextKeyValues);\r\n    ConditionBuilder conditionBuilder = ConditionBuilder.newBuilder();\r\n    conditionBuilder.regex(\"[abc]\");\r\n    Condition condition = conditionBuilder.build().not();\r\n    ContextID contextID = new TestContextID();\r\n    contextID.setContextId(\"id\");\r\n    List<ContextKeyValue> list = contextSearch.search(contextCacheService, contextID, condition);\r\n    assertEquals(2, list.size());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-public-enhancements\\linkis-cs-server\\src\\test\\java\\org\\apache\\linkis\\cs\\server\\conf\\ContextServerConfTest.java",
  "methodName" : "constTest",
  "sourceCode" : "@Test\r\n@DisplayName(\"constTest\")\r\npublic void constTest() {\r\n    String keywordScanPackage = ContextServerConf.KEYWORD_SCAN_PACKAGE;\r\n    int csSchedulerMaxRunningJobs = ContextServerConf.CS_SCHEDULER_MAX_RUNNING_JOBS;\r\n    long csSchedulerMaxAskExecutorTimes = ContextServerConf.CS_SCHEDULER_MAX_ASK_EXECUTOR_TIMES;\r\n    long csSchedulerJobWaitMills = ContextServerConf.CS_SCHEDULER_JOB_WAIT_MILLS;\r\n    String confLabel = ContextServerConf.CS_LABEL_SUFFIX;\r\n    Assertions.assertNotNull(keywordScanPackage);\r\n    Assertions.assertTrue(100 == csSchedulerMaxRunningJobs);\r\n    Assertions.assertTrue(1000 == csSchedulerMaxAskExecutorTimes);\r\n    Assertions.assertTrue(10000 == csSchedulerJobWaitMills);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-public-enhancements\\linkis-datasource\\linkis-datasource-manager\\server\\src\\test\\java\\org\\apache\\linkis\\datasourcemanager\\core\\dao\\DataSourceDaoTest.java",
  "methodName" : "testInsertOne",
  "sourceCode" : "@Test\r\nvoid testInsertOne() {\r\n    DataSource dataSource = insertOne();\r\n    assertTrue(dataSource.getId() > 0);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-public-enhancements\\linkis-datasource\\linkis-datasource-manager\\server\\src\\test\\java\\org\\apache\\linkis\\datasourcemanager\\core\\dao\\DataSourceDaoTest.java",
  "methodName" : "testSelectOneDetail",
  "sourceCode" : "@Test\r\nvoid testSelectOneDetail() {\r\n    DataSource dataSource = insertOne();\r\n    DataSource result = dataSourceDao.selectOneDetail(dataSource.getId());\r\n    assertEquals(\"mysql\", result.getDataSourceType().getName());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-public-enhancements\\linkis-datasource\\linkis-datasource-manager\\server\\src\\test\\java\\org\\apache\\linkis\\datasourcemanager\\core\\dao\\DataSourceDaoTest.java",
  "methodName" : "testSelectOneDetailByName",
  "sourceCode" : "@Test\r\nvoid testSelectOneDetailByName() {\r\n    DataSource dataSource = insertOne();\r\n    DataSource result = dataSourceDao.selectOneDetailByName(dataSource.getDataSourceName());\r\n    assertEquals(\"mysql\", result.getDataSourceType().getName());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-public-enhancements\\linkis-datasource\\linkis-datasource-manager\\server\\src\\test\\java\\org\\apache\\linkis\\datasourcemanager\\core\\dao\\DataSourceDaoTest.java",
  "methodName" : "testSelectOne",
  "sourceCode" : "@Test\r\nvoid testSelectOne() {\r\n    DataSource dataSource = insertOne();\r\n    DataSource result = dataSourceDao.selectOne(dataSource.getId());\r\n    assertTrue(result.getId() > 0);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-public-enhancements\\linkis-datasource\\linkis-datasource-manager\\server\\src\\test\\java\\org\\apache\\linkis\\datasourcemanager\\core\\dao\\DataSourceDaoTest.java",
  "methodName" : "testSelectOneByName",
  "sourceCode" : "@Test\r\nvoid testSelectOneByName() {\r\n    DataSource dataSource = insertOne();\r\n    DataSource result = dataSourceDao.selectOneByName(dataSource.getDataSourceName());\r\n    assertTrue(result.getId() > 0);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-public-enhancements\\linkis-datasource\\linkis-datasource-manager\\server\\src\\test\\java\\org\\apache\\linkis\\datasourcemanager\\core\\dao\\DataSourceDaoTest.java",
  "methodName" : "testRemoveOne",
  "sourceCode" : "@Test\r\nvoid testRemoveOne() {\r\n    DataSource dataSource = insertOne();\r\n    int res = dataSourceDao.removeOne(dataSource.getId());\r\n    assertTrue(res == 1);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-public-enhancements\\linkis-datasource\\linkis-datasource-manager\\server\\src\\test\\java\\org\\apache\\linkis\\datasourcemanager\\core\\dao\\DataSourceDaoTest.java",
  "methodName" : "testExpireOne",
  "sourceCode" : "@Test\r\nvoid testExpireOne() {\r\n    DataSource dataSource = insertOne();\r\n    int res = dataSourceDao.expireOne(dataSource.getId());\r\n    assertTrue(res == 1);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-public-enhancements\\linkis-datasource\\linkis-datasource-manager\\server\\src\\test\\java\\org\\apache\\linkis\\datasourcemanager\\core\\dao\\DataSourceDaoTest.java",
  "methodName" : "testUpdateOne",
  "sourceCode" : "@Test\r\nvoid testUpdateOne() {\r\n    DataSource dataSource = insertOne();\r\n    dataSource = dataSourceDao.selectOne(dataSource.getId());\r\n    dataSource.setDataSourceName(\"modify \" + \"unitTest\");\r\n    dataSource.setDataSourceTypeId(1l);\r\n    dataSource.setDataSourceDesc(\"modify \" + \"unit test by h2 database\");\r\n    dataSource.setCreateIdentify(\"modify \" + \"unitTest\");\r\n    dataSource.setCreateSystem(\"modify \" + \"local\");\r\n    dataSource.setParameter(\"{}\");\r\n    dataSource.setModifyUser(\"modify \" + \"test\");\r\n    dataSource.setModifyTime(new Date());\r\n    dataSourceDao.updateOne(dataSource);\r\n    DataSource newDataSource = dataSourceDao.selectOne(dataSource.getId());\r\n    assertThat(newDataSource).usingRecursiveComparison().isEqualTo(dataSource);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-public-enhancements\\linkis-datasource\\linkis-datasource-manager\\server\\src\\test\\java\\org\\apache\\linkis\\datasourcemanager\\core\\dao\\DataSourceDaoTest.java",
  "methodName" : "testSelectByPageVo",
  "sourceCode" : "@Test\r\nvoid testSelectByPageVo() {\r\n    Date originDate = new Date();\r\n    // match\r\n    DataSource dataSource = insertOne();\r\n    // match\r\n    dataSource.setDataSourceName(\"unitTest1\");\r\n    dataSource.setCreateTime(new Date());\r\n    dataSourceDao.insertOne(dataSource);\r\n    // match\r\n    dataSource.setDataSourceName(\"unitTest2\");\r\n    dataSource.setCreateTime(originDate);\r\n    dataSourceDao.insertOne(dataSource);\r\n    // no match by datasource name\r\n    dataSource.setDataSourceName(\"tmpTest\");\r\n    dataSourceDao.insertOne(dataSource);\r\n    // on match by dataSourceTypeId\r\n    dataSource.setDataSourceName(\"unitTest3\");\r\n    dataSource.setDataSourceTypeId(2l);\r\n    dataSourceDao.insertOne(dataSource);\r\n    // no match by createUser\r\n    dataSource.setDataSourceName(\"unitTest4\");\r\n    dataSource.setDataSourceTypeId(1l);\r\n    dataSource.setCreateUser(\"other\");\r\n    dataSourceDao.insertOne(dataSource);\r\n    DataSourceVo dataSourceVo = new DataSourceVo();\r\n    dataSourceVo.setDataSourceName(\"unitTest\");\r\n    dataSourceVo.setDataSourceTypeId(1l);\r\n    dataSourceVo.setPermissionUser(\"test\");\r\n    List<DataSource> dataSources = dataSourceDao.selectByPageVo(dataSourceVo);\r\n    assertAll(\"All\", () -> assertTrue(dataSources.size() == 3), () -> assertTrue(\"unitTest\".equals(dataSources.get(1).getDataSourceName())), () -> assertTrue(\"unitTest1\".equals(dataSources.get(0).getDataSourceName())), () -> assertTrue(\"unitTest2\".equals(dataSources.get(2).getDataSourceName())));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-public-enhancements\\linkis-datasource\\linkis-datasource-manager\\server\\src\\test\\java\\org\\apache\\linkis\\datasourcemanager\\core\\dao\\DataSourceDaoTest.java",
  "methodName" : "testSetPublishedVersionId",
  "sourceCode" : "@Test\r\nvoid testSetPublishedVersionId() {\r\n    DataSource dataSource = insertOne();\r\n    dataSourceDao.setPublishedVersionId(dataSource.getId(), 10l);\r\n    assertTrue(dataSourceDao.selectByPageVo(new DataSourceVo()).get(0).getPublishedVersionId() == 10l);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-public-enhancements\\linkis-datasource\\linkis-datasource-manager\\server\\src\\test\\java\\org\\apache\\linkis\\datasourcemanager\\core\\dao\\DataSourceDaoTest.java",
  "methodName" : "testUpdateVersionId",
  "sourceCode" : "@Test\r\nvoid testUpdateVersionId() {\r\n    DataSource dataSource = insertOne();\r\n    dataSourceDao.updateVersionId(dataSource.getId(), 10l);\r\n    assertTrue(dataSourceDao.selectByPageVo(new DataSourceVo()).get(0).getVersionId() == 10l);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-public-enhancements\\linkis-datasource\\linkis-datasource-manager\\server\\src\\test\\java\\org\\apache\\linkis\\datasourcemanager\\core\\dao\\DataSourceDaoTest.java",
  "methodName" : "testSelectByIds",
  "sourceCode" : "@Test\r\nvoid testSelectByIds() {\r\n    DataSource dataSource = insertOne();\r\n    dataSource.setDataSourceName(\"unitTest\");\r\n    dataSource.setDataSourceTypeId(1l);\r\n    dataSource.setCreateUser(\"test\");\r\n    List<DataSource> list = dataSourceDao.selectByIds(Arrays.asList(dataSource.getId()));\r\n    assertTrue(CollectionUtils.isNotEmpty(list));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-public-enhancements\\linkis-datasource\\linkis-datasource-manager\\server\\src\\test\\java\\org\\apache\\linkis\\datasourcemanager\\core\\dao\\DataSourceEnvDaoTest.java",
  "methodName" : "testInsertOne",
  "sourceCode" : "@Test\r\nvoid testInsertOne() {\r\n    DataSourceEnv dataSourceEnv = insertOne();\r\n    assertTrue(dataSourceEnv.getId() > 0);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-public-enhancements\\linkis-datasource\\linkis-datasource-manager\\server\\src\\test\\java\\org\\apache\\linkis\\datasourcemanager\\core\\dao\\DataSourceEnvDaoTest.java",
  "methodName" : "testSelectOneDetail",
  "sourceCode" : "@Test\r\nvoid testSelectOneDetail() {\r\n    DataSourceEnv dataSourceEnv = insertOne();\r\n    DataSourceEnv result = dataSourceEnvDao.selectOneDetail(dataSourceEnv.getId());\r\n    assertTrue(result.getId() > 0);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-public-enhancements\\linkis-datasource\\linkis-datasource-manager\\server\\src\\test\\java\\org\\apache\\linkis\\datasourcemanager\\core\\dao\\DataSourceEnvDaoTest.java",
  "methodName" : "testListByTypeId",
  "sourceCode" : "@Test\r\nvoid testListByTypeId() {\r\n    DataSourceEnv dataSourceEnv = insertOne();\r\n    List<DataSourceEnv> dataSourceEnvs = dataSourceEnvDao.listByTypeId(dataSourceEnv.getDataSourceTypeId());\r\n    assertTrue(dataSourceEnvs.size() == 1);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-public-enhancements\\linkis-datasource\\linkis-datasource-manager\\server\\src\\test\\java\\org\\apache\\linkis\\datasourcemanager\\core\\dao\\DataSourceEnvDaoTest.java",
  "methodName" : "testRemoveOne",
  "sourceCode" : "@Test\r\nvoid testRemoveOne() {\r\n    DataSourceEnv dataSourceEnv = insertOne();\r\n    int res = dataSourceEnvDao.removeOne(dataSourceEnv.getId());\r\n    assertTrue(res == 1);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-public-enhancements\\linkis-datasource\\linkis-datasource-manager\\server\\src\\test\\java\\org\\apache\\linkis\\datasourcemanager\\core\\dao\\DataSourceEnvDaoTest.java",
  "methodName" : "testUpdateOne",
  "sourceCode" : "@Test\r\nvoid testUpdateOne() {\r\n    DataSourceEnv dataSourceEnv = insertOne();\r\n    dataSourceEnv = dataSourceEnvDao.selectOneDetail(dataSourceEnv.getId());\r\n    dataSourceEnv.setEnvName(\"modify-testEnv\");\r\n    dataSourceEnv.setEnvDesc(\"modify testEnv desc\");\r\n    dataSourceEnv.setParameter(\"{}\");\r\n    dataSourceEnv.setModifyTime(new Date());\r\n    dataSourceEnv.setModifyUser(\"modify-test\");\r\n    dataSourceEnvDao.updateOne(dataSourceEnv);\r\n    DataSourceEnv newDataSourceEnv = dataSourceEnvDao.selectOneDetail(dataSourceEnv.getId());\r\n    assertThat(newDataSourceEnv).usingRecursiveComparison().isEqualTo(dataSourceEnv);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-public-enhancements\\linkis-datasource\\linkis-datasource-manager\\server\\src\\test\\java\\org\\apache\\linkis\\datasourcemanager\\core\\dao\\DataSourceEnvDaoTest.java",
  "methodName" : "testSelectByPageVo",
  "sourceCode" : "@Test\r\nvoid testSelectByPageVo() {\r\n    // match\r\n    DataSourceEnv dataSourceEnv = insertOne();\r\n    // match\r\n    dataSourceEnv.setEnvName(\"testEnv1\");\r\n    dataSourceEnvDao.insertOne(dataSourceEnv);\r\n    // no match by env name\r\n    dataSourceEnv.setEnvName(\"devEnv1\");\r\n    dataSourceEnvDao.insertOne(dataSourceEnv);\r\n    // on match by dataSourceTypeId\r\n    dataSourceEnv.setEnvName(\"testEnv2\");\r\n    dataSourceEnv.setDataSourceTypeId(2l);\r\n    dataSourceEnvDao.insertOne(dataSourceEnv);\r\n    DataSourceEnvVo dataSourceEnvVo = new DataSourceEnvVo();\r\n    dataSourceEnvVo.setEnvName(\"testEnv\");\r\n    dataSourceEnvVo.setDataSourceTypeId(1l);\r\n    List<DataSourceEnv> dataSourceEnvs = dataSourceEnvDao.selectByPageVo(dataSourceEnvVo);\r\n    assertAll(\"All\", () -> assertTrue(dataSourceEnvs.size() == 2), () -> assertTrue(\"testEnv\".equals(dataSourceEnvs.get(0).getEnvName())), () -> assertTrue(\"testEnv1\".equals(dataSourceEnvs.get(1).getEnvName())));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-public-enhancements\\linkis-datasource\\linkis-datasource-manager\\server\\src\\test\\java\\org\\apache\\linkis\\datasourcemanager\\core\\dao\\DataSourceParamKeyDaoTest.java",
  "methodName" : "testListByDataSourceType",
  "sourceCode" : "@Test\r\nvoid testListByDataSourceType() {\r\n    List<DataSourceParamKeyDefinition> dataSourceParamKeyDefinitions = dataSourceParamKeyDao.listByDataSourceType(1l);\r\n    assertTrue(dataSourceParamKeyDefinitions.size() == 2);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-public-enhancements\\linkis-datasource\\linkis-datasource-manager\\server\\src\\test\\java\\org\\apache\\linkis\\datasourcemanager\\core\\dao\\DataSourceParamKeyDaoTest.java",
  "methodName" : "testListByDataSourceTypeAndScope",
  "sourceCode" : "@Test\r\nvoid testListByDataSourceTypeAndScope() {\r\n    List<DataSourceParamKeyDefinition> dataSourceParamKeyDefinitions = dataSourceParamKeyDao.listByDataSourceTypeAndScope(1l, DataSourceParamKeyDefinition.Scope.ENV);\r\n    assertTrue(dataSourceParamKeyDefinitions.size() == 1);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-public-enhancements\\linkis-datasource\\linkis-datasource-manager\\server\\src\\test\\java\\org\\apache\\linkis\\datasourcemanager\\core\\dao\\DataSourceTypeDaoTest.java",
  "methodName" : "testGetAllTypes",
  "sourceCode" : "@Test\r\nvoid testGetAllTypes() {\r\n    assertTrue(dataSourceTypeDao.getAllTypes().size() == 1);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-public-enhancements\\linkis-datasource\\linkis-datasource-manager\\server\\src\\test\\java\\org\\apache\\linkis\\datasourcemanager\\core\\dao\\DataSourceTypeDaoTest.java",
  "methodName" : "testSelectOne",
  "sourceCode" : "@Test\r\nvoid testSelectOne() {\r\n    assertNotNull(dataSourceTypeDao.selectOne(1l));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-public-enhancements\\linkis-datasource\\linkis-datasource-manager\\server\\src\\test\\java\\org\\apache\\linkis\\datasourcemanager\\core\\dao\\DataSourceVersionDaoTest.java",
  "methodName" : "testInsertOne",
  "sourceCode" : "@Test\r\nvoid testInsertOne() {\r\n    insertOne();\r\n    assertTrue(dataSourceVersionDao.getLatestVersion(1l) == 2l);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-public-enhancements\\linkis-datasource\\linkis-datasource-manager\\server\\src\\test\\java\\org\\apache\\linkis\\datasourcemanager\\core\\dao\\DataSourceVersionDaoTest.java",
  "methodName" : "testGetLatestVersion",
  "sourceCode" : "@Test\r\nvoid testGetLatestVersion() {\r\n    insertOne();\r\n    assertTrue(dataSourceVersionDao.getLatestVersion(1l) == 2l);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-public-enhancements\\linkis-datasource\\linkis-datasource-manager\\server\\src\\test\\java\\org\\apache\\linkis\\datasourcemanager\\core\\dao\\DataSourceVersionDaoTest.java",
  "methodName" : "testSelectOneVersion",
  "sourceCode" : "@Disabled\r\n@Test\r\nvoid testSelectOneVersion() {\r\n    /*insertOne();\r\n    String param = dataSourceVersionDao.selectOneVersion(1l, 2l);\r\n    assertTrue(\"a:b\".equals(param));*/\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-public-enhancements\\linkis-datasource\\linkis-datasource-manager\\server\\src\\test\\java\\org\\apache\\linkis\\datasourcemanager\\core\\dao\\DataSourceVersionDaoTest.java",
  "methodName" : "testGetVersionsFromDatasourceId",
  "sourceCode" : "@Test\r\nvoid testGetVersionsFromDatasourceId() {\r\n    insertOne();\r\n    assertTrue(dataSourceVersionDao.getVersionsFromDatasourceId(1l).size() == 2);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-public-enhancements\\linkis-datasource\\linkis-datasource-manager\\server\\src\\test\\java\\org\\apache\\linkis\\datasourcemanager\\core\\dao\\DataSourceVersionDaoTest.java",
  "methodName" : "testRemoveFromDataSourceId",
  "sourceCode" : "@Test\r\nvoid testRemoveFromDataSourceId() {\r\n    insertOne();\r\n    int res = dataSourceVersionDao.removeFromDataSourceId(1l);\r\n    assertTrue(res == 2);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-public-enhancements\\linkis-datasource\\linkis-datasource-manager\\server\\src\\test\\java\\org\\apache\\linkis\\datasourcemanager\\core\\restful\\DataSourceAdminRestfulApiTest.java",
  "methodName" : "insertJsonEnv",
  "sourceCode" : "@Test\r\nvoid insertJsonEnv() throws Exception {\r\n    long dataSourceEnvId = 10l;\r\n    String url = \"/data-source-manager/env/json\";\r\n    MvcUtils mvcUtils = new MvcUtils(mockMvc);\r\n    DataSourceEnv dataSourceEnv = new DataSourceEnv();\r\n    dataSourceEnv.setId(dataSourceEnvId);\r\n    StringWriter dsJsonWriter = new StringWriter();\r\n    JsonUtils.jackson().writeValue(dsJsonWriter, dataSourceEnv);\r\n    moduleUserUtils.when(() -> ModuleUserUtils.getOperationUser(isA(HttpServletRequest.class), isA(String.class))).thenReturn(\"testUser\", \"hadoop\");\r\n    Message mvcResult = mvcUtils.getMessage(mvcUtils.buildMvcResultPost(url, dsJsonWriter.toString()));\r\n    assertTrue(MessageStatus.ERROR() == mvcResult.getStatus() && mvcResult.getMessage().contains(\"is not admin user\"));\r\n    Mockito.doNothing().when(parameterValidator).validate(any(), any());\r\n    Mockito.doNothing().when(dataSourceInfoService).saveDataSourceEnv(any());\r\n    mvcResult = mvcUtils.getMessage(mvcUtils.buildMvcResultPost(url, dsJsonWriter.toString()));\r\n    assertTrue(MessageStatus.SUCCESS() == mvcResult.getStatus() && \"10\".equals(mvcResult.getData().get(\"insertId\").toString()));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-public-enhancements\\linkis-datasource\\linkis-datasource-manager\\server\\src\\test\\java\\org\\apache\\linkis\\datasourcemanager\\core\\restful\\DataSourceAdminRestfulApiTest.java",
  "methodName" : "insertJsonEnvBatch",
  "sourceCode" : "@Test\r\nvoid insertJsonEnvBatch() throws Exception {\r\n    long dataSourceEnvId = 10l;\r\n    String fromSystem = \"WTSS\";\r\n    String url = \"/data-source-manager/env/json/batch?system=\";\r\n    MvcUtils mvcUtils = new MvcUtils(mockMvc);\r\n    List<DataSourceEnv> dataSourceEnvList = new ArrayList<>();\r\n    DataSourceEnv dataSourceEnv = new DataSourceEnv();\r\n    dataSourceEnv.setId(dataSourceEnvId);\r\n    dataSourceEnvList.add(dataSourceEnv);\r\n    StringWriter dsJsonWriter = new StringWriter();\r\n    JsonUtils.jackson().writeValue(dsJsonWriter, dataSourceEnvList);\r\n    moduleUserUtils.when(() -> ModuleUserUtils.getOperationUser(isA(HttpServletRequest.class), isA(String.class))).thenReturn(\"testUser\", \"hadoop\");\r\n    Message mvcResult = mvcUtils.getMessage(mvcUtils.buildMvcResultPost(url + fromSystem, dsJsonWriter.toString()));\r\n    assertTrue(MessageStatus.ERROR() == mvcResult.getStatus() && mvcResult.getMessage().contains(\"is not admin user\"));\r\n    fromSystem = \"Qualitis\";\r\n    mvcResult = mvcUtils.getMessage(mvcUtils.buildMvcResultPost(url + fromSystem, dsJsonWriter.toString()));\r\n    Mockito.doNothing().when(parameterValidator).validate(any(), any());\r\n    Mockito.doNothing().when(dataSourceInfoService).saveDataSourceEnv(any());\r\n    assertTrue(MessageStatus.SUCCESS() == mvcResult.getStatus());\r\n    List<Map<String, Object>> dataSourceEnvMap = (List<Map<String, Object>>) mvcResult.getData().get(\"envs\");\r\n    assertTrue(CollectionUtils.isNotEmpty(dataSourceEnvMap));\r\n    assertEquals(10, dataSourceEnvMap.get(0).get(\"id\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-public-enhancements\\linkis-datasource\\linkis-datasource-manager\\server\\src\\test\\java\\org\\apache\\linkis\\datasourcemanager\\core\\restful\\DataSourceAdminRestfulApiTest.java",
  "methodName" : "updateJsonEnvBatch",
  "sourceCode" : "@Test\r\nvoid updateJsonEnvBatch() throws Exception {\r\n    long dataSourceEnvId = 10l;\r\n    String fromSystem = \"WTSS\";\r\n    String url = \"/data-source-manager/env/json/batch?system=\";\r\n    List<DataSourceEnv> dataSourceEnvList = new ArrayList<>();\r\n    DataSourceEnv dataSourceEnv = new DataSourceEnv();\r\n    dataSourceEnv.setId(dataSourceEnvId);\r\n    dataSourceEnvList.add(dataSourceEnv);\r\n    StringWriter dsJsonWriter = new StringWriter();\r\n    JsonUtils.jackson().writeValue(dsJsonWriter, dataSourceEnvList);\r\n    MvcUtils mvcUtils = new MvcUtils(mockMvc);\r\n    moduleUserUtils.when(() -> ModuleUserUtils.getOperationUser(isA(HttpServletRequest.class), isA(String.class))).thenReturn(\"testUser\", \"hadoop\");\r\n    Message mvcResult = mvcUtils.getMessage(mvcUtils.buildMvcResultPut(url + fromSystem, dsJsonWriter.toString()));\r\n    assertTrue(MessageStatus.ERROR() == mvcResult.getStatus() && mvcResult.getMessage().contains(\"is not admin user\"));\r\n    fromSystem = \"Qualitis\";\r\n    Mockito.when(dataSourceInfoService.getDataSourceEnv(dataSourceEnvId)).thenReturn(null).thenReturn(dataSourceEnv);\r\n    mvcResult = mvcUtils.getMessage(mvcUtils.buildMvcResultPut(url + fromSystem, dsJsonWriter.toString()));\r\n    assertTrue(MessageStatus.ERROR() == mvcResult.getStatus() && mvcResult.getMessage().contains(\"Fail to update data source environment\"));\r\n    mvcResult = mvcUtils.getMessage(mvcUtils.buildMvcResultPut(url, dsJsonWriter.toString()));\r\n    assertTrue(MessageStatus.SUCCESS() == mvcResult.getStatus());\r\n    List<Map<String, Object>> dataSourceEnvMap = (List<Map<String, Object>>) mvcResult.getData().get(\"envs\");\r\n    assertTrue(CollectionUtils.isNotEmpty(dataSourceEnvMap));\r\n    assertEquals(10, dataSourceEnvMap.get(0).get(\"id\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-public-enhancements\\linkis-datasource\\linkis-datasource-manager\\server\\src\\test\\java\\org\\apache\\linkis\\datasourcemanager\\core\\restful\\DataSourceAdminRestfulApiTest.java",
  "methodName" : "getAllEnvListByDataSourceType",
  "sourceCode" : "@Test\r\nvoid getAllEnvListByDataSourceType() throws Exception {\r\n    long dataSourceEnvTypeId = 10l;\r\n    String url = String.format(\"/data-source-manager/env-list/all/type/%s\", dataSourceEnvTypeId);\r\n    MvcUtils mvcUtils = new MvcUtils(mockMvc);\r\n    List<DataSourceEnv> envList = new ArrayList<>();\r\n    Mockito.when(dataSourceInfoService.listDataSourceEnvByType(dataSourceEnvTypeId)).thenReturn(envList);\r\n    Message mvcResult = mvcUtils.getMessage(mvcUtils.buildMvcResultGet(url));\r\n    assertTrue(MessageStatus.SUCCESS() == mvcResult.getStatus());\r\n    Mockito.verify(dataSourceInfoService, times(1)).listDataSourceEnvByType(dataSourceEnvTypeId);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-public-enhancements\\linkis-datasource\\linkis-datasource-manager\\server\\src\\test\\java\\org\\apache\\linkis\\datasourcemanager\\core\\restful\\DataSourceAdminRestfulApiTest.java",
  "methodName" : "getEnvEntityById",
  "sourceCode" : "@Test\r\nvoid getEnvEntityById() throws Exception {\r\n    long dataSourceEnvId = 10l;\r\n    String url = String.format(\"/data-source-manager/env/%s\", dataSourceEnvId);\r\n    MvcUtils mvcUtils = new MvcUtils(mockMvc);\r\n    List<DataSourceEnv> envList = new ArrayList<>();\r\n    Mockito.when(dataSourceInfoService.getDataSourceEnv(dataSourceEnvId)).thenReturn(new DataSourceEnv());\r\n    Message mvcResult = mvcUtils.getMessage(mvcUtils.buildMvcResultGet(url));\r\n    assertTrue(MessageStatus.SUCCESS() == mvcResult.getStatus());\r\n    Mockito.verify(dataSourceInfoService, times(1)).getDataSourceEnv(dataSourceEnvId);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-public-enhancements\\linkis-datasource\\linkis-datasource-manager\\server\\src\\test\\java\\org\\apache\\linkis\\datasourcemanager\\core\\restful\\DataSourceAdminRestfulApiTest.java",
  "methodName" : "removeEnvEntity",
  "sourceCode" : "@Test\r\nvoid removeEnvEntity() throws Exception {\r\n    long dataSourceEnvId = 10l;\r\n    String url = String.format(\"/data-source-manager/env/%s\", dataSourceEnvId);\r\n    MvcUtils mvcUtils = new MvcUtils(mockMvc);\r\n    moduleUserUtils.when(() -> ModuleUserUtils.getOperationUser(isA(HttpServletRequest.class), isA(String.class))).thenReturn(\"testUser\", \"hadoop\");\r\n    Message mvcResult = mvcUtils.getMessage(mvcUtils.buildMvcResultDelete(url));\r\n    assertTrue(MessageStatus.ERROR() == mvcResult.getStatus() && mvcResult.getMessage().contains(\"is not admin user\"));\r\n    Mockito.when(dataSourceInfoService.removeDataSourceEnv(dataSourceEnvId)).thenReturn(dataSourceEnvId);\r\n    mvcResult = mvcUtils.getMessage(mvcUtils.buildMvcResultDelete(url));\r\n    assertTrue(MessageStatus.SUCCESS() == mvcResult.getStatus() && \"10\".equals(mvcResult.getData().get(\"removeId\").toString()));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-public-enhancements\\linkis-datasource\\linkis-datasource-manager\\server\\src\\test\\java\\org\\apache\\linkis\\datasourcemanager\\core\\restful\\DataSourceAdminRestfulApiTest.java",
  "methodName" : "updateJsonEnv",
  "sourceCode" : "@Test\r\nvoid updateJsonEnv() throws Exception {\r\n    long dataSourceEnvId = 10l;\r\n    String url = String.format(\"/data-source-manager/env/%s/json\", dataSourceEnvId);\r\n    DataSourceEnv dataSourceEnv = new DataSourceEnv();\r\n    dataSourceEnv.setId(dataSourceEnvId);\r\n    StringWriter dsJsonWriter = new StringWriter();\r\n    JsonUtils.jackson().writeValue(dsJsonWriter, dataSourceEnv);\r\n    MvcUtils mvcUtils = new MvcUtils(mockMvc);\r\n    moduleUserUtils.when(() -> ModuleUserUtils.getOperationUser(isA(HttpServletRequest.class), isA(String.class))).thenReturn(\"testUser\", \"hadoop\");\r\n    Message mvcResult = mvcUtils.getMessage(mvcUtils.buildMvcResultPut(url, dsJsonWriter.toString()));\r\n    assertTrue(MessageStatus.ERROR() == mvcResult.getStatus() && mvcResult.getMessage().contains(\"is not admin user\"));\r\n    Mockito.when(dataSourceInfoService.getDataSourceEnv(dataSourceEnvId)).thenReturn(null).thenReturn(dataSourceEnv);\r\n    mvcResult = mvcUtils.getMessage(mvcUtils.buildMvcResultPut(url, dsJsonWriter.toString()));\r\n    assertTrue(MessageStatus.ERROR() == mvcResult.getStatus() && mvcResult.getMessage().contains(\"Fail to update data source environment\"));\r\n    mvcResult = mvcUtils.getMessage(mvcUtils.buildMvcResultPut(url, dsJsonWriter.toString()));\r\n    assertTrue(MessageStatus.SUCCESS() == mvcResult.getStatus());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-public-enhancements\\linkis-datasource\\linkis-datasource-manager\\server\\src\\test\\java\\org\\apache\\linkis\\datasourcemanager\\core\\restful\\DataSourceAdminRestfulApiTest.java",
  "methodName" : "queryDataSourceEnv",
  "sourceCode" : "@Test\r\nvoid queryDataSourceEnv() throws Exception {\r\n    String url = String.format(\"/data-source-manager/env\");\r\n    MvcUtils mvcUtils = new MvcUtils(mockMvc);\r\n    Mockito.when(dataSourceInfoService.queryDataSourceEnvPage(any())).thenReturn(new ArrayList<>());\r\n    Message mvcResult = mvcUtils.getMessage(mvcUtils.buildMvcResultGet(url));\r\n    assertTrue(MessageStatus.SUCCESS() == mvcResult.getStatus());\r\n    Mockito.verify(dataSourceInfoService, times(1)).queryDataSourceEnvPage(any());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-public-enhancements\\linkis-datasource\\linkis-datasource-manager\\server\\src\\test\\java\\org\\apache\\linkis\\datasourcemanager\\core\\restful\\DataSourceCoreRestfulApiTest.java",
  "methodName" : "getAllDataSourceTypes",
  "sourceCode" : "@Test\r\nvoid getAllDataSourceTypes() throws Exception {\r\n    MvcUtils mvcUtils = new MvcUtils(mockMvc);\r\n    List<DataSourceType> dataSourceTypes = new ArrayList<>();\r\n    Mockito.when(dataSourceRelateService.getAllDataSourceTypes(null)).thenReturn(dataSourceTypes);\r\n    MvcResult mvcResult = mvcUtils.buildMvcResultGet(\"/data-source-manager/type/all\");\r\n    Message res = mvcUtils.getMessage(mvcResult);\r\n    assertThat(dataSourceTypes).usingRecursiveComparison().isEqualTo(res.getData().get(\"typeList\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-public-enhancements\\linkis-datasource\\linkis-datasource-manager\\server\\src\\test\\java\\org\\apache\\linkis\\datasourcemanager\\core\\restful\\DataSourceCoreRestfulApiTest.java",
  "methodName" : "getKeyDefinitionsByType",
  "sourceCode" : "@Test\r\nvoid getKeyDefinitionsByType() throws Exception {\r\n    MvcUtils mvcUtils = new MvcUtils(mockMvc);\r\n    Long dataSourceTypeId = 1l;\r\n    List<DataSourceParamKeyDefinition> keyDefinitions = new ArrayList<>();\r\n    Mockito.when(dataSourceRelateService.getKeyDefinitionsByType(dataSourceTypeId)).thenReturn(keyDefinitions);\r\n    MvcResult mvcResult = mvcUtils.buildMvcResultGet(String.format(\"/data-source-manager/key-define/type/%s\", dataSourceTypeId));\r\n    Message res = mvcUtils.getMessage(mvcResult);\r\n    assertThat(keyDefinitions).usingRecursiveComparison().isEqualTo(res.getData().get(\"keyDefine\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-public-enhancements\\linkis-datasource\\linkis-datasource-manager\\server\\src\\test\\java\\org\\apache\\linkis\\datasourcemanager\\core\\restful\\DataSourceCoreRestfulApiTest.java",
  "methodName" : "insertJsonInfo",
  "sourceCode" : "@Test\r\nvoid insertJsonInfo() throws Exception {\r\n    MvcUtils mvcUtils = new MvcUtils(mockMvc);\r\n    DataSource dataSource = new DataSource();\r\n    dataSource.setDataSourceName(\"test\");\r\n    StringWriter dsJsonWriter = new StringWriter();\r\n    JsonUtils.jackson().writeValue(dsJsonWriter, dataSource);\r\n    Mockito.doNothing().when(dataSourceInfoService).saveDataSourceInfo(dataSource);\r\n    MvcResult mvcResult = mvcUtils.buildMvcResultPost(\"/data-source-manager/info/json\", dsJsonWriter.toString());\r\n    Message res = mvcUtils.getMessage(mvcResult);\r\n    assertEquals(MessageStatus.SUCCESS(), res.getStatus());\r\n    Mockito.when(dataSourceInfoService.existDataSource(dataSource.getDataSourceName())).thenReturn(true);\r\n    mvcResult = mvcUtils.buildMvcResultPost(\"/data-source-manager/info/json\", dsJsonWriter.toString());\r\n    ;\r\n    res = mvcUtils.getMessage(mvcResult);\r\n    assertEquals(MessageStatus.ERROR(), res.getStatus());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-public-enhancements\\linkis-datasource\\linkis-datasource-manager\\server\\src\\test\\java\\org\\apache\\linkis\\datasourcemanager\\core\\restful\\DataSourceCoreRestfulApiTest.java",
  "methodName" : "updateDataSourceInJson",
  "sourceCode" : "@Test\r\nvoid updateDataSourceInJson() throws Exception {\r\n    MvcUtils mvcUtils = new MvcUtils(mockMvc);\r\n    long dataSourceId = 1l;\r\n    String url = String.format(\"/data-source-manager/info/%s/json\", dataSourceId);\r\n    DataSource dataSource = new DataSource();\r\n    dataSource.setId(dataSourceId);\r\n    dataSource.setDataSourceName(\"ds-hive\");\r\n    StringWriter dsJsonWriter = new StringWriter();\r\n    JsonUtils.jackson().writeValue(dsJsonWriter, dataSource);\r\n    moduleUserUtils.when(() -> ModuleUserUtils.getOperationUser(isA(HttpServletRequest.class), isA(String.class))).thenReturn(\"testUser\");\r\n    Message res = mvcUtils.getMessage(mvcUtils.buildMvcResultPut(url, dsJsonWriter.toString()));\r\n    assertTrue(MessageStatus.ERROR() == res.getStatus() && res.getMessage().contains(\"This data source was not found\"));\r\n    DataSource oldDataSource = new DataSource();\r\n    oldDataSource.setCreateUser(\"hadoop\");\r\n    Mockito.when(dataSourceInfoService.getDataSourceInfoBrief(dataSource.getId())).thenReturn(oldDataSource);\r\n    res = mvcUtils.getMessage(mvcUtils.buildMvcResultPut(url, dsJsonWriter.toString()));\r\n    assertTrue(MessageStatus.ERROR() == res.getStatus() && res.getMessage().contains(\"Don't have update permission for data source\"));\r\n    oldDataSource.setCreateUser(\"testUser\");\r\n    res = mvcUtils.getMessage(mvcUtils.buildMvcResultPut(url, dsJsonWriter.toString()));\r\n    assertTrue(MessageStatus.SUCCESS() == res.getStatus());\r\n    oldDataSource.setDataSourceName(\"ds-mysql\");\r\n    Mockito.when(dataSourceInfoService.existDataSource(dataSource.getDataSourceName())).thenReturn(true);\r\n    res = mvcUtils.getMessage(mvcUtils.buildMvcResultPut(url, dsJsonWriter.toString()));\r\n    assertTrue(MessageStatus.ERROR() == res.getStatus() && res.getMessage().contains(\"has been existed\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-public-enhancements\\linkis-datasource\\linkis-datasource-manager\\server\\src\\test\\java\\org\\apache\\linkis\\datasourcemanager\\core\\restful\\DataSourceCoreRestfulApiTest.java",
  "methodName" : "insertJsonParameter",
  "sourceCode" : "@Test\r\nvoid insertJsonParameter() throws Exception {\r\n    MvcUtils mvcUtils = new MvcUtils(mockMvc);\r\n    Long datasourceId = 1l;\r\n    String url = String.format(\"/data-source-manager/parameter/%s/json\", datasourceId);\r\n    Map<String, Object> params = new HashMap<>();\r\n    Map<String, Object> connectParams = new HashMap<>();\r\n    params.put(\"connectParams\", connectParams);\r\n    params.put(\"comment\", \"comment\");\r\n    StringWriter dsJsonWriter = new StringWriter();\r\n    JsonUtils.jackson().writeValue(dsJsonWriter, params);\r\n    moduleUserUtils.when(() -> ModuleUserUtils.getOperationUser(isA(HttpServletRequest.class), isA(String.class))).thenReturn(\"testUser\");\r\n    Message res = mvcUtils.getMessage(mvcUtils.buildMvcResultPost(url, dsJsonWriter.toString()));\r\n    assertTrue(MessageStatus.ERROR() == res.getStatus() && res.getMessage().contains(\"Fail to insert data source parameter\"));\r\n    DataSource dataSource = new DataSource();\r\n    dataSource.setCreateUser(\"hadoop\");\r\n    Mockito.when(dataSourceInfoService.getDataSourceInfoBrief(datasourceId)).thenReturn(dataSource);\r\n    res = mvcUtils.getMessage(mvcUtils.buildMvcResultPost(url, dsJsonWriter.toString()));\r\n    assertTrue(MessageStatus.ERROR() == res.getStatus() && res.getMessage().contains(\"Don't have update permission\"));\r\n    dataSource.setCreateUser(\"testUser\");\r\n    List<DataSourceParamKeyDefinition> keyDefinitionList = new ArrayList<>();\r\n    Mockito.when(dataSourceRelateService.getKeyDefinitionsByType(datasourceId)).thenReturn(keyDefinitionList);\r\n    Mockito.when(dataSourceInfoService.insertDataSourceParameter(keyDefinitionList, datasourceId, connectParams, \"testUser\", \"comment\")).thenReturn(10l);\r\n    res = mvcUtils.getMessage(mvcUtils.buildMvcResultPost(url, dsJsonWriter.toString()));\r\n    assertTrue(MessageStatus.SUCCESS() == res.getStatus() && \"10\".equals(res.getData().get(\"version\").toString()));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-public-enhancements\\linkis-datasource\\linkis-datasource-manager\\server\\src\\test\\java\\org\\apache\\linkis\\datasourcemanager\\core\\restful\\DataSourceCoreRestfulApiTest.java",
  "methodName" : "getInfoByDataSourceId",
  "sourceCode" : "@Test\r\nvoid getInfoByDataSourceId() throws Exception {\r\n    MvcUtils mvcUtils = new MvcUtils(mockMvc);\r\n    Long dataSourceId = 1l;\r\n    String url = String.format(\"/data-source-manager/info/%s\", dataSourceId);\r\n    DataSource dataSource = new DataSource();\r\n    dataSource.setId(dataSourceId);\r\n    dataSource.setCreateUser(\"hadoop\");\r\n    Mockito.when(dataSourceInfoService.getDataSourceInfo(dataSourceId)).thenReturn(null).thenReturn(dataSource);\r\n    Message res = mvcUtils.getMessage(mvcUtils.buildMvcResultGet(url));\r\n    assertTrue(MessageStatus.ERROR() == res.getStatus() && res.getMessage().contains(\"No Exists The DataSource\"));\r\n    moduleUserUtils.when(() -> ModuleUserUtils.getOperationUser(isA(HttpServletRequest.class), isA(String.class))).thenReturn(\"testUser\").thenReturn(\"hadoop\");\r\n    res = mvcUtils.getMessage(mvcUtils.buildMvcResultGet(url));\r\n    assertTrue(MessageStatus.ERROR() == res.getStatus() && res.getMessage().contains(\"Don't have query permission\"));\r\n    res = mvcUtils.getMessage(mvcUtils.buildMvcResultGet(url));\r\n    assertTrue(MessageStatus.SUCCESS() == res.getStatus());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-public-enhancements\\linkis-datasource\\linkis-datasource-manager\\server\\src\\test\\java\\org\\apache\\linkis\\datasourcemanager\\core\\restful\\DataSourceCoreRestfulApiTest.java",
  "methodName" : "getInfoByDataSourceName",
  "sourceCode" : "@Test\r\nvoid getInfoByDataSourceName() throws Exception {\r\n    MvcUtils mvcUtils = new MvcUtils(mockMvc);\r\n    String dataSourceName = \"hive-test\";\r\n    String url = String.format(\"/data-source-manager/info/name/%s\", dataSourceName);\r\n    DataSource dataSource = new DataSource();\r\n    dataSource.setDataSourceName(dataSourceName);\r\n    dataSource.setCreateUser(\"hadoop\");\r\n    Mockito.when(dataSourceInfoService.getDataSourceInfo(dataSourceName)).thenReturn(null).thenReturn(dataSource);\r\n    Message res = mvcUtils.getMessage(mvcUtils.buildMvcResultGet(url));\r\n    assertTrue(MessageStatus.ERROR() == res.getStatus() && res.getMessage().contains(\"No Exists The DataSource\"));\r\n    moduleUserUtils.when(() -> ModuleUserUtils.getOperationUser(isA(HttpServletRequest.class), isA(String.class))).thenReturn(\"testUser\").thenReturn(\"hadoop\");\r\n    res = mvcUtils.getMessage(mvcUtils.buildMvcResultGet(url));\r\n    assertTrue(MessageStatus.ERROR() == res.getStatus() && res.getMessage().contains(\"Don't have query permission\"));\r\n    res = mvcUtils.getMessage(mvcUtils.buildMvcResultGet(url));\r\n    assertTrue(MessageStatus.SUCCESS() == res.getStatus());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-public-enhancements\\linkis-datasource\\linkis-datasource-manager\\server\\src\\test\\java\\org\\apache\\linkis\\datasourcemanager\\core\\restful\\DataSourceCoreRestfulApiTest.java",
  "methodName" : "getInfoByDataSourceIdAndVersion",
  "sourceCode" : "@Test\r\nvoid getInfoByDataSourceIdAndVersion() throws Exception {\r\n    MvcUtils mvcUtils = new MvcUtils(mockMvc);\r\n    long dataSourceId = 1l;\r\n    long version = 1001l;\r\n    String url = String.format(\"/data-source-manager/info/%s/%s\", dataSourceId, version);\r\n    DataSource dataSource = new DataSource();\r\n    dataSource.setId(dataSourceId);\r\n    dataSource.setVersionId(version);\r\n    dataSource.setCreateUser(\"hadoop\");\r\n    Mockito.when(dataSourceInfoService.getDataSourceInfo(dataSourceId, version)).thenReturn(null).thenReturn(dataSource);\r\n    Message res = mvcUtils.getMessage(mvcUtils.buildMvcResultGet(url));\r\n    assertTrue(MessageStatus.ERROR() == res.getStatus() && res.getMessage().contains(\"No Exists The DataSource\"));\r\n    moduleUserUtils.when(() -> ModuleUserUtils.getOperationUser(isA(HttpServletRequest.class), isA(String.class))).thenReturn(\"testUser\").thenReturn(\"hadoop\");\r\n    res = mvcUtils.getMessage(mvcUtils.buildMvcResultGet(url));\r\n    assertTrue(MessageStatus.ERROR() == res.getStatus() && res.getMessage().contains(\"Don't have query permission\"));\r\n    res = mvcUtils.getMessage(mvcUtils.buildMvcResultGet(url));\r\n    assertTrue(MessageStatus.SUCCESS() == res.getStatus());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-public-enhancements\\linkis-datasource\\linkis-datasource-manager\\server\\src\\test\\java\\org\\apache\\linkis\\datasourcemanager\\core\\restful\\DataSourceCoreRestfulApiTest.java",
  "methodName" : "getVersionList",
  "sourceCode" : "@Test\r\nvoid getVersionList() throws Exception {\r\n    MvcUtils mvcUtils = new MvcUtils(mockMvc);\r\n    long dataSourceId = 1l;\r\n    String url = String.format(\"/data-source-manager/%s/versions\", dataSourceId);\r\n    DataSource dataSource = new DataSource();\r\n    dataSource.setId(dataSourceId);\r\n    dataSource.setCreateUser(\"hadoop\");\r\n    Mockito.when(dataSourceInfoService.getDataSourceInfoBrief(dataSourceId)).thenReturn(null).thenReturn(dataSource);\r\n    Message res = mvcUtils.getMessage(mvcUtils.buildMvcResultGet(url));\r\n    assertTrue(MessageStatus.ERROR() == res.getStatus() && res.getMessage().contains(\"No Exists The DataSource\"));\r\n    moduleUserUtils.when(() -> ModuleUserUtils.getOperationUser(isA(HttpServletRequest.class), isA(String.class))).thenReturn(\"testUser\").thenReturn(\"hadoop\");\r\n    res = mvcUtils.getMessage(mvcUtils.buildMvcResultGet(url));\r\n    assertTrue(MessageStatus.ERROR() == res.getStatus() && res.getMessage().contains(\"Don't have query permission\"));\r\n    res = mvcUtils.getMessage(mvcUtils.buildMvcResultGet(url));\r\n    assertTrue(MessageStatus.SUCCESS() == res.getStatus());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-public-enhancements\\linkis-datasource\\linkis-datasource-manager\\server\\src\\test\\java\\org\\apache\\linkis\\datasourcemanager\\core\\restful\\DataSourceCoreRestfulApiTest.java",
  "methodName" : "publishByDataSourceId",
  "sourceCode" : "@Test\r\nvoid publishByDataSourceId() throws Exception {\r\n    MvcUtils mvcUtils = new MvcUtils(mockMvc);\r\n    long dataSourceId = 1l;\r\n    long version = 1001l;\r\n    String url = String.format(\"/data-source-manager/publish/%s/%s\", dataSourceId, version);\r\n    DataSource dataSource = new DataSource();\r\n    dataSource.setId(dataSourceId);\r\n    dataSource.setVersionId(version);\r\n    dataSource.setCreateUser(\"hadoop\");\r\n    Mockito.when(dataSourceInfoService.getDataSourceInfoBrief(dataSourceId)).thenReturn(null).thenReturn(dataSource);\r\n    Message res = mvcUtils.getMessage(mvcUtils.buildMvcResultPost(url));\r\n    assertTrue(MessageStatus.ERROR() == res.getStatus() && res.getMessage().contains(\"No Exists The DataSource\"));\r\n    moduleUserUtils.when(() -> ModuleUserUtils.getOperationUser(isA(HttpServletRequest.class), isA(String.class))).thenReturn(\"testUser\").thenReturn(\"hadoop\");\r\n    res = mvcUtils.getMessage(mvcUtils.buildMvcResultPost(url));\r\n    assertTrue(MessageStatus.ERROR() == res.getStatus() && res.getMessage().contains(\"Don't have publish permission\"));\r\n    Mockito.when(dataSourceInfoService.publishByDataSourceId(dataSourceId, version)).thenReturn(0).thenReturn(1);\r\n    res = mvcUtils.getMessage(mvcUtils.buildMvcResultPost(url));\r\n    assertTrue(MessageStatus.ERROR() == res.getStatus() && res.getMessage().contains(\"publish error\"));\r\n    res = mvcUtils.getMessage(mvcUtils.buildMvcResultPost(url));\r\n    assertTrue(MessageStatus.SUCCESS() == res.getStatus());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-public-enhancements\\linkis-datasource\\linkis-datasource-manager\\server\\src\\test\\java\\org\\apache\\linkis\\datasourcemanager\\core\\restful\\DataSourceCoreRestfulApiTest.java",
  "methodName" : "removeDataSource",
  "sourceCode" : "@Test\r\nvoid removeDataSource() throws Exception {\r\n    MvcUtils mvcUtils = new MvcUtils(mockMvc);\r\n    long dataSourceId = 1l;\r\n    String url = String.format(\"/data-source-manager/info/delete/%s\", dataSourceId);\r\n    DataSource dataSource = new DataSource();\r\n    dataSource.setId(dataSourceId);\r\n    dataSource.setCreateUser(\"hadoop\");\r\n    Mockito.when(dataSourceInfoService.getDataSourceInfoBrief(dataSourceId)).thenReturn(null).thenReturn(dataSource);\r\n    Message res = mvcUtils.getMessage(mvcUtils.buildMvcResultDelete(url));\r\n    assertTrue(MessageStatus.ERROR() == res.getStatus() && res.getMessage().contains(\"No Exists The DataSource\"));\r\n    moduleUserUtils.when(() -> ModuleUserUtils.getOperationUser(isA(HttpServletRequest.class), isA(String.class))).thenReturn(\"testUser\").thenReturn(\"hadoop\");\r\n    res = mvcUtils.getMessage(mvcUtils.buildMvcResultDelete(url));\r\n    assertTrue(MessageStatus.ERROR() == res.getStatus() && res.getMessage().contains(\"Don't have delete permission\"));\r\n    Mockito.when(dataSourceInfoService.removeDataSourceInfo(dataSourceId, \"\")).thenReturn(-1l).thenReturn(1l);\r\n    res = mvcUtils.getMessage(mvcUtils.buildMvcResultDelete(url));\r\n    assertTrue(MessageStatus.ERROR() == res.getStatus() && res.getMessage().contains(\"Fail to remove data source\"));\r\n    res = mvcUtils.getMessage(mvcUtils.buildMvcResultDelete(url));\r\n    assertTrue(MessageStatus.SUCCESS() == res.getStatus());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-public-enhancements\\linkis-datasource\\linkis-datasource-manager\\server\\src\\test\\java\\org\\apache\\linkis\\datasourcemanager\\core\\restful\\DataSourceCoreRestfulApiTest.java",
  "methodName" : "expireDataSource",
  "sourceCode" : "@Test\r\nvoid expireDataSource() throws Exception {\r\n    MvcUtils mvcUtils = new MvcUtils(mockMvc);\r\n    long dataSourceId = 1l;\r\n    String url = String.format(\"/data-source-manager/info/%s/expire\", dataSourceId);\r\n    DataSource dataSource = new DataSource();\r\n    dataSource.setId(dataSourceId);\r\n    dataSource.setCreateUser(\"hadoop\");\r\n    Mockito.when(dataSourceInfoService.getDataSourceInfoBrief(dataSourceId)).thenReturn(null).thenReturn(dataSource);\r\n    Message res = mvcUtils.getMessage(mvcUtils.buildMvcResultPut(url));\r\n    assertTrue(MessageStatus.ERROR() == res.getStatus() && res.getMessage().contains(\"No Exists The DataSource\"));\r\n    moduleUserUtils.when(() -> ModuleUserUtils.getOperationUser(isA(HttpServletRequest.class), isA(String.class))).thenReturn(\"testUser\").thenReturn(\"hadoop\");\r\n    res = mvcUtils.getMessage(mvcUtils.buildMvcResultPut(url));\r\n    assertTrue(MessageStatus.ERROR() == res.getStatus() && res.getMessage().contains(\"Don't have operation permission\"));\r\n    Mockito.when(dataSourceInfoService.expireDataSource(dataSourceId)).thenReturn(-1l).thenReturn(1l);\r\n    res = mvcUtils.getMessage(mvcUtils.buildMvcResultPut(url));\r\n    assertTrue(MessageStatus.ERROR() == res.getStatus() && res.getMessage().contains(\"Fail to expire data source\"));\r\n    res = mvcUtils.getMessage(mvcUtils.buildMvcResultPut(url));\r\n    assertTrue(MessageStatus.SUCCESS() == res.getStatus());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-public-enhancements\\linkis-datasource\\linkis-datasource-manager\\server\\src\\test\\java\\org\\apache\\linkis\\datasourcemanager\\core\\restful\\DataSourceCoreRestfulApiTest.java",
  "methodName" : "testGetConnectParamsById",
  "sourceCode" : "@Test\r\nvoid testGetConnectParamsById() throws Exception {\r\n    MvcUtils mvcUtils = new MvcUtils(mockMvc);\r\n    long dataSourceId = 1l;\r\n    String url = String.format(\"/data-source-manager/%s/connect-params\", dataSourceId);\r\n    DataSource dataSource = new DataSource();\r\n    dataSource.setId(dataSourceId);\r\n    dataSource.setCreateUser(\"hadoop\");\r\n    Mockito.when(dataSourceInfoService.getDataSourceInfoForConnect(dataSourceId)).thenReturn(null).thenReturn(dataSource);\r\n    Message res = mvcUtils.getMessage(mvcUtils.buildMvcResultGet(url));\r\n    assertTrue(MessageStatus.ERROR() == res.getStatus() && res.getMessage().contains(\"No Exists The DataSource\"));\r\n    moduleUserUtils.when(() -> ModuleUserUtils.getOperationUser(isA(HttpServletRequest.class), isA(String.class))).thenReturn(\"testUser\").thenReturn(\"hadoop\");\r\n    res = mvcUtils.getMessage(mvcUtils.buildMvcResultGet(url));\r\n    assertTrue(MessageStatus.ERROR() == res.getStatus() && res.getMessage().contains(\"Don't have query permission\"));\r\n    res = mvcUtils.getMessage(mvcUtils.buildMvcResultGet(url));\r\n    assertTrue(MessageStatus.SUCCESS() == res.getStatus());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-public-enhancements\\linkis-datasource\\linkis-datasource-manager\\server\\src\\test\\java\\org\\apache\\linkis\\datasourcemanager\\core\\restful\\DataSourceCoreRestfulApiTest.java",
  "methodName" : "testGetConnectParamsByName",
  "sourceCode" : "@Test\r\nvoid testGetConnectParamsByName() throws Exception {\r\n    MvcUtils mvcUtils = new MvcUtils(mockMvc);\r\n    String dataSourceName = \"hive-test\";\r\n    String url = String.format(\"/data-source-manager/name/%s/connect-params\", dataSourceName);\r\n    DataSource dataSource = new DataSource();\r\n    dataSource.setDataSourceName(dataSourceName);\r\n    dataSource.setCreateUser(\"hadoop\");\r\n    Mockito.when(dataSourceInfoService.getDataSourceInfoForConnect(dataSourceName)).thenReturn(null).thenReturn(dataSource);\r\n    Message res = mvcUtils.getMessage(mvcUtils.buildMvcResultGet(url));\r\n    assertTrue(MessageStatus.ERROR() == res.getStatus() && res.getMessage().contains(\"No Exists The DataSource\"));\r\n    moduleUserUtils.when(() -> ModuleUserUtils.getOperationUser(isA(HttpServletRequest.class), isA(String.class))).thenReturn(\"testUser\").thenReturn(\"hadoop\");\r\n    res = mvcUtils.getMessage(mvcUtils.buildMvcResultGet(url));\r\n    assertTrue(MessageStatus.ERROR() == res.getStatus() && res.getMessage().contains(\"Don't have query permission\"));\r\n    res = mvcUtils.getMessage(mvcUtils.buildMvcResultGet(url));\r\n    assertTrue(MessageStatus.SUCCESS() == res.getStatus());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-public-enhancements\\linkis-datasource\\linkis-datasource-manager\\server\\src\\test\\java\\org\\apache\\linkis\\datasourcemanager\\core\\restful\\DataSourceCoreRestfulApiTest.java",
  "methodName" : "connectDataSource",
  "sourceCode" : "@Test\r\nvoid connectDataSource() throws Exception {\r\n    MvcUtils mvcUtils = new MvcUtils(mockMvc);\r\n    long dataSourceId = 1l;\r\n    long version = 1001l;\r\n    String url = String.format(\"/data-source-manager/%s/%s/op/connect\", dataSourceId, version);\r\n    DataSource dataSource = new DataSource();\r\n    dataSource.setId(dataSourceId);\r\n    dataSource.setVersionId(version);\r\n    dataSource.setCreateUser(\"hadoop\");\r\n    DataSourceType dataSourceType = new DataSourceType();\r\n    dataSourceType.setName(\"hive\");\r\n    dataSource.setDataSourceType(dataSourceType);\r\n    moduleUserUtils.when(() -> ModuleUserUtils.getOperationUser(isA(HttpServletRequest.class), isA(String.class))).thenReturn(\"testUser\", \"testUser\", \"hadoop\");\r\n    Mockito.when(dataSourceInfoService.getDataSourceInfoForConnect(dataSourceId, version)).thenReturn(null).thenReturn(dataSource);\r\n    Message res = mvcUtils.getMessage(mvcUtils.buildMvcResultPut(url));\r\n    assertTrue(MessageStatus.ERROR() == res.getStatus() && res.getMessage().contains(\"No Exists The DataSource\"));\r\n    res = mvcUtils.getMessage(mvcUtils.buildMvcResultPut(url));\r\n    assertTrue(MessageStatus.ERROR() == res.getStatus() && res.getMessage().contains(\"Don't have operation permission\"));\r\n    Mockito.doNothing().when(metadataOperateService).doRemoteConnect(\"metadata-manager\", dataSourceType.getName(), \"hadoop\", new HashMap<>());\r\n    res = mvcUtils.getMessage(mvcUtils.buildMvcResultPut(url));\r\n    assertTrue(MessageStatus.SUCCESS() == res.getStatus());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-public-enhancements\\linkis-datasource\\linkis-datasource-manager\\server\\src\\test\\java\\org\\apache\\linkis\\datasourcemanager\\core\\restful\\DataSourceCoreRestfulApiTest.java",
  "methodName" : "queryDataSource",
  "sourceCode" : "@Test\r\nvoid queryDataSource() throws Exception {\r\n    MvcUtils mvcUtils = new MvcUtils(mockMvc);\r\n    String url = String.format(\"/data-source-manager/info\");\r\n    MultiValueMap<String, String> params = new LinkedMultiValueMap<>();\r\n    params.add(\"currentPage\", \"10\");\r\n    params.add(\"pageSize\", \"20\");\r\n    moduleUserUtils.when(() -> ModuleUserUtils.getOperationUser(isA(HttpServletRequest.class), isA(String.class))).thenReturn(\"testUser\");\r\n    DataSourceVo dataSourceVo = new DataSourceVo();\r\n    PageInfo<DataSource> pageInfo = new PageInfo<>();\r\n    pageInfo.setTotal(10l);\r\n    Mockito.when(dataSourceInfoService.queryDataSourceInfoPage(any())).thenReturn(pageInfo);\r\n    Message res = mvcUtils.getMessage(mvcUtils.buildMvcResultGet(url, params));\r\n    assertTrue(MessageStatus.SUCCESS() == res.getStatus() && \"10\".equals(res.getData().get(\"totalPage\").toString()));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-public-enhancements\\linkis-datasource\\linkis-datasource-manager\\server\\src\\test\\java\\org\\apache\\linkis\\datasourcemanager\\core\\restful\\DataSourceCoreRestfulApiTest.java",
  "methodName" : "queryDataSourceByIds",
  "sourceCode" : "@Test\r\nvoid queryDataSourceByIds() throws Exception {\r\n    long id = 10l;\r\n    MvcUtils mvcUtils = new MvcUtils(mockMvc);\r\n    String url = String.format(\"/data-source-manager/info/ids\");\r\n    StringWriter dsJsonWriter = new StringWriter();\r\n    JsonUtils.jackson().writeValue(dsJsonWriter, Arrays.asList(id));\r\n    MultiValueMap<String, String> params = new LinkedMultiValueMap<>();\r\n    params.add(\"ids\", dsJsonWriter.toString());\r\n    List<DataSource> dataSourceList = new ArrayList<>();\r\n    DataSource dataSource = new DataSource();\r\n    dataSource.setId(id);\r\n    dataSourceList.add(dataSource);\r\n    Mockito.when(dataSourceInfoService.queryDataSourceInfo(any())).thenReturn(dataSourceList);\r\n    Message res = mvcUtils.getMessage(mvcUtils.buildMvcResultGet(url, params));\r\n    assertTrue(MessageStatus.SUCCESS() == res.getStatus());\r\n    List<Map<String, Object>> queryList = (List<Map<String, Object>>) res.getData().get(\"queryList\");\r\n    assertTrue(!CollectionUtils.isEmpty(queryList));\r\n    assertEquals(10, queryList.get(0).get(\"id\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-public-enhancements\\linkis-datasource\\linkis-datasource-manager\\server\\src\\test\\java\\org\\apache\\linkis\\datasourcemanager\\core\\restful\\DataSourceOperateRestfulApiTest.java",
  "methodName" : "connect",
  "sourceCode" : "@Test\r\nvoid connect() {\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-public-enhancements\\linkis-datasource\\linkis-datasource-manager\\server\\src\\test\\java\\org\\apache\\linkis\\datasourcemanager\\core\\restful\\DataSourceOperateRestfulApiTest.java",
  "methodName" : "doConnect",
  "sourceCode" : "@Test\r\nvoid doConnect() {\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-public-enhancements\\linkis-datasource\\linkis-datasource-manager\\server\\src\\test\\java\\org\\apache\\linkis\\datasourcemanager\\core\\service\\BmlAppServiceTest.java",
  "methodName" : "testClientUploadResource",
  "sourceCode" : "@Test\r\nvoid testClientUploadResource() throws ErrorException {\r\n    InputStream inputStream = Mockito.mock(FileInputStream.class);\r\n    BmlUploadResponse bmlUploadResponse = new BmlUploadResponse(true, \"10001\", \"1\");\r\n    Mockito.when(client.uploadResource(\"test\", \"/test/a.txt\", inputStream)).thenReturn(bmlUploadResponse);\r\n    String res = bmlAppService.clientUploadResource(\"test\", \"/test/a.txt\", inputStream);\r\n    assertTrue(res.equals(\"10001\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-public-enhancements\\linkis-datasource\\linkis-datasource-manager\\server\\src\\test\\java\\org\\apache\\linkis\\datasourcemanager\\core\\service\\BmlAppServiceTest.java",
  "methodName" : "testClientRemoveResource",
  "sourceCode" : "@Test\r\nvoid testClientRemoveResource() {\r\n    String user = \"test\";\r\n    String resourceId = \"10001\";\r\n    BmlDeleteResponse bmlDeleteResponse = new BmlDeleteResponse(true);\r\n    Mockito.when(client.deleteResource(user, resourceId)).thenReturn(bmlDeleteResponse);\r\n    try {\r\n        bmlAppService.clientRemoveResource(user, resourceId);\r\n    } catch (ErrorException e) {\r\n        logger.error(\"bmlAppService clientRemoveResource error:\" + e.getMessage());\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-public-enhancements\\linkis-datasource\\linkis-datasource-manager\\server\\src\\test\\java\\org\\apache\\linkis\\datasourcemanager\\core\\service\\BmlAppServiceTest.java",
  "methodName" : "testClientUpdateResource",
  "sourceCode" : "@Test\r\nvoid testClientUpdateResource() throws ErrorException {\r\n    String userName = \"test\";\r\n    String resourceId = \"10001\";\r\n    String version = \"2\";\r\n    InputStream inputStream = Mockito.mock(FileInputStream.class);\r\n    BmlUpdateResponse bmlUpdateResponse = new BmlUpdateResponse(true, resourceId, version);\r\n    Mockito.when(client.updateResource(userName, resourceId, \"filename\", inputStream)).thenReturn(bmlUpdateResponse);\r\n    String res = bmlAppService.clientUpdateResource(userName, resourceId, inputStream);\r\n    assertTrue(version.equals(res));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-public-enhancements\\linkis-datasource\\linkis-datasource-manager\\server\\src\\test\\java\\org\\apache\\linkis\\datasourcemanager\\core\\service\\DataSourceInfoServiceTest.java",
  "methodName" : "testSaveDataSourceInfo",
  "sourceCode" : "@Test\r\nvoid testSaveDataSourceInfo() throws ErrorException {\r\n    DataSource dataSource = buildDataSource();\r\n    Mockito.doNothing().when(dataSourceDao).insertOne(dataSource);\r\n    dataSourceInfoService.saveDataSourceInfo(dataSource);\r\n    Mockito.verify(dataSourceDao, Mockito.times(1)).insertOne(dataSource);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-public-enhancements\\linkis-datasource\\linkis-datasource-manager\\server\\src\\test\\java\\org\\apache\\linkis\\datasourcemanager\\core\\service\\DataSourceInfoServiceTest.java",
  "methodName" : "testAddEnvParamsToDataSource",
  "sourceCode" : "@Test\r\nvoid testAddEnvParamsToDataSource() {\r\n    DataSource dataSource = buildDataSource();\r\n    Map<String, Object> envParamMap = new HashMap<>();\r\n    envParamMap.put(\"a\", \"b\");\r\n    dataSource.setConnectParams(envParamMap);\r\n    Long dataSourceEnvId = 1l;\r\n    DataSourceEnv dataSourceEnv = new DataSourceEnv();\r\n    Map<String, Object> envAllParamMap = new HashMap<>();\r\n    envAllParamMap.put(\"c\", \"d\");\r\n    dataSourceEnv.setConnectParams(envAllParamMap);\r\n    envAllParamMap.putAll(envAllParamMap);\r\n    Mockito.when(dataSourceEnvDao.selectOneDetail(dataSourceEnvId)).thenReturn(dataSourceEnv);\r\n    dataSourceInfoService.addEnvParamsToDataSource(dataSourceEnvId, dataSource);\r\n    assertTrue(envAllParamMap.equals(dataSource.getConnectParams()));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-public-enhancements\\linkis-datasource\\linkis-datasource-manager\\server\\src\\test\\java\\org\\apache\\linkis\\datasourcemanager\\core\\service\\DataSourceInfoServiceTest.java",
  "methodName" : "testGetDataSourceInfo",
  "sourceCode" : "@Test\r\nvoid testGetDataSourceInfo() {\r\n    DataSource dataSource = buildDataSource();\r\n    Mockito.when(dataSourceDao.selectOneDetail(dataSource.getId())).thenReturn(dataSource);\r\n    Mockito.when(dataSourceVersionDao.selectOneVersion(dataSource.getId(), dataSource.getVersionId())).thenReturn(\"a:b\");\r\n    dataSource.setParameter(\"a:b\");\r\n    DataSource actuallyDataSource = dataSourceInfoService.getDataSourceInfo(dataSource.getId());\r\n    assertThat(actuallyDataSource).usingRecursiveComparison().isEqualTo(dataSource);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-public-enhancements\\linkis-datasource\\linkis-datasource-manager\\server\\src\\test\\java\\org\\apache\\linkis\\datasourcemanager\\core\\service\\DataSourceInfoServiceTest.java",
  "methodName" : "testGetDataSourceInfoByName",
  "sourceCode" : "@Test\r\nvoid testGetDataSourceInfoByName() {\r\n    DataSource dataSource = buildDataSource();\r\n    Mockito.when(dataSourceDao.selectOneDetailByName(dataSource.getDataSourceName())).thenReturn(dataSource);\r\n    Mockito.when(dataSourceVersionDao.selectOneVersion(dataSource.getId(), dataSource.getVersionId())).thenReturn(\"a:b\");\r\n    dataSource.setParameter(\"a:b\");\r\n    DataSource actuallyDataSource = dataSourceInfoService.getDataSourceInfo(dataSource.getDataSourceName());\r\n    assertThat(actuallyDataSource).usingRecursiveComparison().isEqualTo(dataSource);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-public-enhancements\\linkis-datasource\\linkis-datasource-manager\\server\\src\\test\\java\\org\\apache\\linkis\\datasourcemanager\\core\\service\\DataSourceInfoServiceTest.java",
  "methodName" : "testGetDataSourceInfoByIdAndVerId",
  "sourceCode" : "@Test\r\nvoid testGetDataSourceInfoByIdAndVerId() {\r\n    DataSource dataSource = buildDataSource();\r\n    Mockito.when(dataSourceDao.selectOneDetail(dataSource.getId())).thenReturn(dataSource);\r\n    Mockito.when(dataSourceVersionDao.selectOneVersion(dataSource.getId(), dataSource.getVersionId())).thenReturn(\"a:b\");\r\n    dataSource.setParameter(\"a:b\");\r\n    DataSource actuallyDataSource = dataSourceInfoService.getDataSourceInfo(dataSource.getId(), dataSource.getVersionId());\r\n    assertThat(actuallyDataSource).usingRecursiveComparison().isEqualTo(dataSource);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-public-enhancements\\linkis-datasource\\linkis-datasource-manager\\server\\src\\test\\java\\org\\apache\\linkis\\datasourcemanager\\core\\service\\DataSourceInfoServiceTest.java",
  "methodName" : "testGetDataSourceInfoForConnectById",
  "sourceCode" : "@Test\r\nvoid testGetDataSourceInfoForConnectById() {\r\n    DataSource dataSource = buildDataSource();\r\n    Mockito.when(dataSourceDao.selectOneDetail(dataSource.getId())).thenReturn(dataSource);\r\n    Mockito.when(dataSourceVersionDao.selectOneVersion(dataSource.getId(), dataSource.getPublishedVersionId())).thenReturn(\"{\\\"a\\\":\\\"b\\\"}\");\r\n    String res = dataSourceInfoService.getDataSourceInfoForConnect(dataSource.getId()).getConnectParams().toString();\r\n    assertTrue(\"{a=b}\".equals(res));\r\n    Mockito.verify(dataSourceDao, Mockito.times(1)).selectOneDetail(dataSource.getId());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-public-enhancements\\linkis-datasource\\linkis-datasource-manager\\server\\src\\test\\java\\org\\apache\\linkis\\datasourcemanager\\core\\service\\DataSourceInfoServiceTest.java",
  "methodName" : "testGetDataSourceInfoForConnectByName",
  "sourceCode" : "@Test\r\nvoid testGetDataSourceInfoForConnectByName() {\r\n    DataSource dataSource = buildDataSource();\r\n    Mockito.when(dataSourceDao.selectOneDetailByName(dataSource.getDataSourceName())).thenReturn(dataSource);\r\n    Mockito.when(dataSourceVersionDao.selectOneVersion(dataSource.getId(), dataSource.getPublishedVersionId())).thenReturn(\"{\\\"a\\\":\\\"b\\\"}\");\r\n    String res = dataSourceInfoService.getDataSourceInfoForConnect(dataSource.getDataSourceName()).getConnectParams().toString();\r\n    assertTrue(\"{a=b}\".equals(res));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-public-enhancements\\linkis-datasource\\linkis-datasource-manager\\server\\src\\test\\java\\org\\apache\\linkis\\datasourcemanager\\core\\service\\DataSourceInfoServiceTest.java",
  "methodName" : "testGetDataSourceInfoForConnectByNameAndEnvId",
  "sourceCode" : "@Test\r\nvoid testGetDataSourceInfoForConnectByNameAndEnvId() {\r\n    DataSource dataSource = buildDataSource();\r\n    Mockito.when(dataSourceDao.selectOneDetailByName(dataSource.getDataSourceName())).thenReturn(dataSource);\r\n    Mockito.when(dataSourceVersionDao.selectOneVersion(dataSource.getId(), dataSource.getPublishedVersionId())).thenReturn(\"{\\\"a\\\":\\\"b\\\"}\");\r\n    String res = dataSourceInfoService.getDataSourceInfoForConnect(dataSource.getDataSourceName(), \"1\").getConnectParams().toString();\r\n    assertTrue(\"{a=b}\".equals(res));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-public-enhancements\\linkis-datasource\\linkis-datasource-manager\\server\\src\\test\\java\\org\\apache\\linkis\\datasourcemanager\\core\\service\\DataSourceInfoServiceTest.java",
  "methodName" : "testGetDataSourceInfoForConnectByIdAndVerId",
  "sourceCode" : "@Test\r\nvoid testGetDataSourceInfoForConnectByIdAndVerId() {\r\n    DataSource dataSource = buildDataSource();\r\n    Mockito.when(dataSourceDao.selectOneDetail(dataSource.getId())).thenReturn(dataSource);\r\n    Mockito.when(dataSourceVersionDao.selectOneVersion(dataSource.getId(), dataSource.getVersionId())).thenReturn(\"{\\\"a\\\":\\\"b\\\"}\");\r\n    String res = dataSourceInfoService.getDataSourceInfoForConnect(dataSource.getId(), dataSource.getVersionId()).getConnectParams().toString();\r\n    assertTrue(\"{a=b}\".equals(res));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-public-enhancements\\linkis-datasource\\linkis-datasource-manager\\server\\src\\test\\java\\org\\apache\\linkis\\datasourcemanager\\core\\service\\DataSourceInfoServiceTest.java",
  "methodName" : "testExistDataSource",
  "sourceCode" : "@Test\r\nvoid testExistDataSource() {\r\n    String dataSourceName = \"unitTest\";\r\n    DataSource dataSource = buildDataSource();\r\n    Mockito.when(dataSourceDao.selectOneByName(dataSourceName)).thenReturn(dataSource);\r\n    assertTrue(dataSourceInfoService.existDataSource(dataSourceName));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-public-enhancements\\linkis-datasource\\linkis-datasource-manager\\server\\src\\test\\java\\org\\apache\\linkis\\datasourcemanager\\core\\service\\DataSourceInfoServiceTest.java",
  "methodName" : "testGetDataSourceInfoBrief",
  "sourceCode" : "@Test\r\nvoid testGetDataSourceInfoBrief() {\r\n    DataSource dataSource = buildDataSource();\r\n    Mockito.when(dataSourceDao.selectOne(dataSource.getId())).thenReturn(dataSource);\r\n    assertThat(dataSourceInfoService.getDataSourceInfoBrief(dataSource.getId())).usingRecursiveComparison().isEqualTo(dataSource);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-public-enhancements\\linkis-datasource\\linkis-datasource-manager\\server\\src\\test\\java\\org\\apache\\linkis\\datasourcemanager\\core\\service\\DataSourceInfoServiceTest.java",
  "methodName" : "testRemoveDataSourceInfo",
  "sourceCode" : "@Test\r\nvoid testRemoveDataSourceInfo() {\r\n    DataSource dataSource = buildDataSource();\r\n    Mockito.when(dataSourceDao.selectOne(dataSource.getId())).thenReturn(dataSource).thenReturn(null);\r\n    Mockito.when(dataSourceDao.removeOne(dataSource.getId())).thenReturn(1);\r\n    assertTrue(dataSourceInfoService.removeDataSourceInfo(dataSource.getId(), dataSource.getCreateSystem()) > 0);\r\n    assertTrue(dataSourceInfoService.removeDataSourceInfo(dataSource.getId(), dataSource.getCreateSystem()) == -1);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-public-enhancements\\linkis-datasource\\linkis-datasource-manager\\server\\src\\test\\java\\org\\apache\\linkis\\datasourcemanager\\core\\service\\DataSourceInfoServiceTest.java",
  "methodName" : "testUpdateDataSourceInfo",
  "sourceCode" : "@Test\r\nvoid testUpdateDataSourceInfo() {\r\n    DataSource dataSource = buildDataSource();\r\n    dataSourceInfoService.updateDataSourceInfo(dataSource);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-public-enhancements\\linkis-datasource\\linkis-datasource-manager\\server\\src\\test\\java\\org\\apache\\linkis\\datasourcemanager\\core\\service\\DataSourceInfoServiceTest.java",
  "methodName" : "testQueryDataSourceInfoPage",
  "sourceCode" : "@Test\r\nvoid testQueryDataSourceInfoPage() {\r\n    DataSourceVo dataSourceVo = new DataSourceVo();\r\n    dataSourceVo.setPageSize(10);\r\n    dataSourceVo.setCurrentPage(1);\r\n    List<DataSource> dataSources = new ArrayList<>();\r\n    dataSources.add(buildDataSource());\r\n    dataSources.add(buildDataSource());\r\n    Mockito.when(dataSourceDao.selectByPageVo(dataSourceVo)).thenReturn(dataSources);\r\n    PageInfo<DataSource> dataSourcePageInfo = dataSourceInfoService.queryDataSourceInfoPage(dataSourceVo);\r\n    assertTrue(dataSourcePageInfo.getSize() == 2);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-public-enhancements\\linkis-datasource\\linkis-datasource-manager\\server\\src\\test\\java\\org\\apache\\linkis\\datasourcemanager\\core\\service\\DataSourceInfoServiceTest.java",
  "methodName" : "testSaveDataSourceEnv",
  "sourceCode" : "@Test\r\nvoid testSaveDataSourceEnv() throws ErrorException {\r\n    DataSourceEnv dataSourceEnv = new DataSourceEnv();\r\n    dataSourceEnv.setCreateUser(\"test\");\r\n    dataSourceEnv.setKeyDefinitions(new ArrayList<>());\r\n    dataSourceEnv.setConnectParams(new HashMap<>());\r\n    dataSourceEnv.setDataSourceTypeId(1l);\r\n    dataSourceInfoService.saveDataSourceEnv(dataSourceEnv);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-public-enhancements\\linkis-datasource\\linkis-datasource-manager\\server\\src\\test\\java\\org\\apache\\linkis\\datasourcemanager\\core\\service\\DataSourceInfoServiceTest.java",
  "methodName" : "testListDataSourceEnvByType",
  "sourceCode" : "@Test\r\nvoid testListDataSourceEnvByType() {\r\n    List<DataSourceEnv> dataSourceEnvs = new ArrayList<>();\r\n    dataSourceEnvs.add(new DataSourceEnv());\r\n    dataSourceEnvs.add(new DataSourceEnv());\r\n    Mockito.when(dataSourceEnvDao.listByTypeId(1l)).thenReturn(dataSourceEnvs);\r\n    List<DataSourceEnv> actuallyDataSourceEnvs = dataSourceInfoService.listDataSourceEnvByType(1l);\r\n    assertTrue(actuallyDataSourceEnvs.size() == 2);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-public-enhancements\\linkis-datasource\\linkis-datasource-manager\\server\\src\\test\\java\\org\\apache\\linkis\\datasourcemanager\\core\\service\\DataSourceInfoServiceTest.java",
  "methodName" : "testGetDataSourceEnv",
  "sourceCode" : "@Test\r\nvoid testGetDataSourceEnv() {\r\n    DataSourceEnv dataSourceEnv = new DataSourceEnv();\r\n    Mockito.when(dataSourceEnvDao.selectOneDetail(1l)).thenReturn(dataSourceEnv);\r\n    DataSourceEnv actuallyDataSourceEnv = dataSourceInfoService.getDataSourceEnv(1l);\r\n    assertThat(actuallyDataSourceEnv).usingRecursiveComparison().isEqualTo(dataSourceEnv);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-public-enhancements\\linkis-datasource\\linkis-datasource-manager\\server\\src\\test\\java\\org\\apache\\linkis\\datasourcemanager\\core\\service\\DataSourceInfoServiceTest.java",
  "methodName" : "testRemoveDataSourceEnv",
  "sourceCode" : "@Test\r\nvoid testRemoveDataSourceEnv() {\r\n    DataSourceEnv dataSourceEnv = new DataSourceEnv();\r\n    dataSourceEnv.setId(1l);\r\n    dataSourceEnv.setDataSourceTypeId(1l);\r\n    Map<String, Object> connectParams = new HashMap<>();\r\n    connectParams.put(\"key\", \"value\");\r\n    dataSourceEnv.setConnectParams(connectParams);\r\n    List<DataSourceParamKeyDefinition> keyDefinitions = new ArrayList<>();\r\n    DataSourceParamKeyDefinition dsParamKeyDefinition = new DataSourceParamKeyDefinition();\r\n    keyDefinitions.add(dsParamKeyDefinition);\r\n    dsParamKeyDefinition.setKey(\"key\");\r\n    dsParamKeyDefinition.setValueType(DataSourceParamKeyDefinition.ValueType.FILE);\r\n    Mockito.when(dataSourceEnvDao.selectOneDetail(dataSourceEnv.getId())).thenReturn(dataSourceEnv);\r\n    Mockito.when(dataSourceEnvDao.removeOne(dataSourceEnv.getId())).thenReturn(1);\r\n    Mockito.when(dataSourceParamKeyDao.listByDataSourceTypeAndScope(dataSourceEnv.getDataSourceTypeId(), DataSourceParamKeyDefinition.Scope.ENV)).thenReturn(keyDefinitions);\r\n    Long res = dataSourceInfoService.removeDataSourceEnv(dataSourceEnv.getId());\r\n    assertTrue(res == dataSourceEnv.getId());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-public-enhancements\\linkis-datasource\\linkis-datasource-manager\\server\\src\\test\\java\\org\\apache\\linkis\\datasourcemanager\\core\\service\\DataSourceInfoServiceTest.java",
  "methodName" : "testExpireDataSource",
  "sourceCode" : "@Test\r\nvoid testExpireDataSource() {\r\n    DataSource dataSource = buildDataSource();\r\n    Mockito.when(dataSourceDao.selectOne(dataSource.getId())).thenReturn(dataSource);\r\n    Mockito.when(dataSourceDao.expireOne(dataSource.getId())).thenReturn(1);\r\n    Long res = dataSourceInfoService.expireDataSource(dataSource.getId());\r\n    assertTrue(res == 1);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-public-enhancements\\linkis-datasource\\linkis-datasource-manager\\server\\src\\test\\java\\org\\apache\\linkis\\datasourcemanager\\core\\service\\DataSourceInfoServiceTest.java",
  "methodName" : "testPublishByDataSourceId",
  "sourceCode" : "@Test\r\nvoid testPublishByDataSourceId() {\r\n    Mockito.when(dataSourceVersionDao.getLatestVersion(1l)).thenReturn(3l).thenReturn(1l);\r\n    Mockito.when(dataSourceDao.setPublishedVersionId(1l, 2l)).thenReturn(1);\r\n    int res = dataSourceInfoService.publishByDataSourceId(1l, 2l);\r\n    assertTrue(res == 1);\r\n    res = dataSourceInfoService.publishByDataSourceId(1l, 2l);\r\n    assertTrue(res == 0);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-public-enhancements\\linkis-datasource\\linkis-datasource-manager\\server\\src\\test\\java\\org\\apache\\linkis\\datasourcemanager\\core\\service\\DataSourceInfoServiceTest.java",
  "methodName" : "testInsertDataSourceParameter",
  "sourceCode" : "@Test\r\nvoid testInsertDataSourceParameter() throws ErrorException {\r\n    List<DataSourceParamKeyDefinition> keyDefinitionList = new ArrayList<>();\r\n    Long datasourceId = 1l;\r\n    Map<String, Object> connectParams = new HashMap<>();\r\n    String username = \"test\";\r\n    String comment = \"unitTest\";\r\n    Long curVersion = 1l;\r\n    Long expectedVersion = curVersion + 1l;\r\n    Mockito.when(dataSourceVersionDao.getLatestVersion(1l)).thenReturn(curVersion);\r\n    Long res = dataSourceInfoService.insertDataSourceParameter(keyDefinitionList, datasourceId, connectParams, username, comment);\r\n    assertTrue(expectedVersion == res);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-public-enhancements\\linkis-datasource\\linkis-datasource-manager\\server\\src\\test\\java\\org\\apache\\linkis\\datasourcemanager\\core\\service\\DataSourceInfoServiceTest.java",
  "methodName" : "testExistDataSourceEnv",
  "sourceCode" : "@Test\r\nvoid testExistDataSourceEnv() {\r\n    String dataSourceEnvName = \"test_env_name\";\r\n    DataSourceEnv dataSourceEnv = new DataSourceEnv();\r\n    dataSourceEnv.setEnvName(dataSourceEnvName);\r\n    dataSourceEnv.setId(1L);\r\n    Mockito.when(dataSourceEnvDao.selectOneByName(dataSourceEnvName)).thenReturn(dataSourceEnv);\r\n    Boolean result = dataSourceInfoService.existDataSourceEnv(dataSourceEnvName);\r\n    assertTrue(result);\r\n    Mockito.when(dataSourceEnvDao.selectOneByName(dataSourceEnvName)).thenReturn(null);\r\n    result = dataSourceInfoService.existDataSourceEnv(dataSourceEnvName);\r\n    assertFalse(result);\r\n    assertFalse(dataSourceInfoService.existDataSourceEnv(\"\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-public-enhancements\\linkis-datasource\\linkis-datasource-manager\\server\\src\\test\\java\\org\\apache\\linkis\\datasourcemanager\\core\\service\\DataSourceInfoServiceTest.java",
  "methodName" : "testSaveBatchDataSourceEnv",
  "sourceCode" : "@Test\r\nvoid testSaveBatchDataSourceEnv() throws ErrorException {\r\n    List<DataSourceEnv> list = new ArrayList<>();\r\n    for (int i = 0; i < 5; i++) {\r\n        DataSourceEnv dataSourceEnv = buildDataSourceEnv();\r\n        list.add(dataSourceEnv);\r\n        Mockito.doNothing().when(dataSourceEnvDao).insertOne(dataSourceEnv);\r\n    }\r\n    dataSourceInfoService.saveBatchDataSourceEnv(list);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-public-enhancements\\linkis-datasource\\linkis-datasource-manager\\server\\src\\test\\java\\org\\apache\\linkis\\datasourcemanager\\core\\service\\DataSourceInfoServiceTest.java",
  "methodName" : "testUpdateBatchDataSourceEnv",
  "sourceCode" : "@Test\r\nvoid testUpdateBatchDataSourceEnv() throws ErrorException {\r\n    List<DataSourceEnv> list = new ArrayList<>();\r\n    for (int i = 0; i < 5; i++) {\r\n        DataSourceEnv dataSourceEnv = buildDataSourceEnv();\r\n        list.add(dataSourceEnv);\r\n        Mockito.doNothing().when(dataSourceEnvDao).updateOne(dataSourceEnv);\r\n        Mockito.when(dataSourceEnvDao.selectOneDetail(dataSourceEnv.getId())).thenReturn(dataSourceEnv);\r\n    }\r\n    dataSourceInfoService.updateBatchDataSourceEnv(list);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-public-enhancements\\linkis-datasource\\linkis-datasource-manager\\server\\src\\test\\java\\org\\apache\\linkis\\datasourcemanager\\core\\service\\DataSourceInfoServiceTest.java",
  "methodName" : "testQueryDataSourceInfo",
  "sourceCode" : "@Test\r\nvoid testQueryDataSourceInfo() {\r\n    List<DataSource> dataSourceList = new ArrayList<>();\r\n    DataSource dataSource = new DataSource();\r\n    dataSource.setId(1l);\r\n    dataSource.setCreateUser(\"test\");\r\n    dataSourceList.add(dataSource);\r\n    Mockito.when(dataSourceDao.selectByIds(Arrays.asList(1l))).thenReturn(dataSourceList);\r\n    List<DataSource> list = dataSourceInfoService.queryDataSourceInfo(Arrays.asList(1l));\r\n    assertTrue(CollectionUtils.isNotEmpty(list));\r\n    assertEquals(dataSourceList.get(0).getId(), 1l);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-public-enhancements\\linkis-datasource\\linkis-datasource-manager\\server\\src\\test\\java\\org\\apache\\linkis\\datasourcemanager\\core\\service\\DataSourceRelateServiceTest.java",
  "methodName" : "getKeyDefinitionsByType",
  "sourceCode" : "@Test\r\nvoid getKeyDefinitionsByType() {\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-public-enhancements\\linkis-datasource\\linkis-datasource-manager\\server\\src\\test\\java\\org\\apache\\linkis\\datasourcemanager\\core\\service\\DataSourceRelateServiceTest.java",
  "methodName" : "testGetKeyDefinitionsByType",
  "sourceCode" : "@Test\r\nvoid testGetKeyDefinitionsByType() {\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-public-enhancements\\linkis-datasource\\linkis-datasource-manager\\server\\src\\test\\java\\org\\apache\\linkis\\datasourcemanager\\core\\service\\DataSourceRelateServiceTest.java",
  "methodName" : "getAllDataSourceTypes",
  "sourceCode" : "@Test\r\nvoid getAllDataSourceTypes() {\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-public-enhancements\\linkis-datasource\\linkis-datasource-manager\\server\\src\\test\\java\\org\\apache\\linkis\\datasourcemanager\\core\\service\\DataSourceRelateServiceTest.java",
  "methodName" : "getDataSourceType",
  "sourceCode" : "@Test\r\nvoid getDataSourceType() {\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-public-enhancements\\linkis-datasource\\linkis-datasource-manager\\server\\src\\test\\java\\org\\apache\\linkis\\datasourcemanager\\core\\service\\MetadataOperateServiceTest.java",
  "methodName" : "doRemoteConnect",
  "sourceCode" : "@Test\r\nvoid doRemoteConnect() throws ErrorException {\r\n    String mdRemoteServiceName = \"linkis-ps-metadata-manager\";\r\n    String dataSourceType = \"mysql\";\r\n    String operator = \"test\";\r\n    Map<String, Object> connectParams = new HashMap<>();\r\n    FormStreamContent formStreamContent = new FormStreamContent();\r\n    String fileName = \"/tmp/a.txt\";\r\n    InputStream inputStream = Mockito.mock(FileInputStream.class);\r\n    formStreamContent.setFileName(fileName);\r\n    formStreamContent.setStream(inputStream);\r\n    connectParams.put(\"formStreamContent\", formStreamContent);\r\n    Mockito.when(bmlAppService.clientUploadResource(operator, fileName, inputStream)).thenReturn(\"10001\");\r\n    Mockito.mockStatic(Sender.class);\r\n    BaseRPCSender baseRPCSender = Mockito.mock(BaseRPCSender.class);\r\n    Mockito.when(Sender.getSender(\"linkis-ps-metadata-manager\")).thenReturn(baseRPCSender);\r\n    MetadataConnect metadataConnect = new MetadataConnect(dataSourceType, operator, connectParams, \"\");\r\n    MetadataResponse ok = new MetadataResponse(true, \"success\");\r\n    MetadataResponse fail = new MetadataResponse(false, \"fail\");\r\n    Mockito.when(baseRPCSender.ask(metadataConnect)).thenReturn(ok, fail);\r\n    metadataOperateService.doRemoteConnect(mdRemoteServiceName, dataSourceType, operator, connectParams);\r\n    Mockito.verify(baseRPCSender, Mockito.times(1)).ask(metadataConnect);\r\n    assertThrows(WarnException.class, () -> metadataOperateService.doRemoteConnect(mdRemoteServiceName, dataSourceType, operator, connectParams));\r\n    Mockito.verify(baseRPCSender, Mockito.times(2)).ask(metadataConnect);\r\n    assertTrue(connectParams.get(\"formStreamContent\").equals(\"10001\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-public-enhancements\\linkis-datasource\\linkis-datasource-manager\\server\\src\\test\\java\\org\\apache\\linkis\\metadata\\query\\server\\loader\\MetaClassLoaderManagerTest.java",
  "methodName" : "constTest",
  "sourceCode" : "@Test\r\n@DisplayName(\"constTest\")\r\npublic void constTest() {\r\n    Integer instanceExpireTimeValue = MetaClassLoaderManager.INSTANCE_EXPIRE_TIME.getValue();\r\n    String libDirValue = MetaClassLoaderManager.LIB_DIR.getValue();\r\n    Assertions.assertTrue(instanceExpireTimeValue.intValue() == 60);\r\n    Assertions.assertNotNull(libDirValue);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-public-enhancements\\linkis-datasource\\linkis-datasource-manager\\server\\src\\test\\java\\org\\apache\\linkis\\metadata\\query\\server\\receiver\\BaseMetaReceiverTest.java",
  "methodName" : "dealMetadataConnectRequestTest",
  "sourceCode" : "@Test\r\n@DisplayName(\"dealMetadataConnectRequestTest\")\r\npublic void dealMetadataConnectRequestTest() throws Exception {\r\n    MetadataConnect metadataConnect = new MetadataConnect(\"mysql\", \"query\", new HashMap<>(), \"1\");\r\n    Mockito.doNothing().when(metadataQueryServiceImpl).getConnection(Mockito.anyString(), Mockito.anyString(), Mockito.anyMap());\r\n    MetadataResponse response = baseMetaReceiver.dealMetadataConnectRequest(metadataConnect);\r\n    Assertions.assertTrue(response.status());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-public-enhancements\\linkis-datasource\\linkis-datasource-manager\\server\\src\\test\\java\\org\\apache\\linkis\\metadata\\query\\server\\restful\\MetadataCoreRestfulTest.java",
  "methodName" : "testGetDatabases",
  "sourceCode" : "@Test\r\nvoid testGetDatabases() {\r\n    try {\r\n        String dataSourceId = \"1l\";\r\n        String url = String.format(\"/metadatamanager/dbs/%s\", dataSourceId);\r\n        MultiValueMap<String, String> params = new LinkedMultiValueMap<>();\r\n        params.set(\"system\", \"\");\r\n        MvcUtils mvcUtils = new MvcUtils(mockMvc);\r\n        moduleUserUtils.when(() -> ModuleUserUtils.getOperationUser(isA(HttpServletRequest.class), isA(String.class))).thenReturn(\"hadoop\", \"hadoop\", \"hadoop\");\r\n        Message res = mvcUtils.getMessage(mvcUtils.buildMvcResultGet(url, params));\r\n        Assertions.assertTrue(MessageStatus.ERROR() == res.getStatus() && res.getMessage().contains(\"'system' is missing\"));\r\n        params.set(\"system\", system);\r\n        Mockito.when(metadataQueryService.getDatabasesByDsId(dataSourceId, system, \"hadoop\")).thenReturn(new ArrayList<>());\r\n        res = mvcUtils.getMessage(mvcUtils.buildMvcResultGet(url, params));\r\n        Assertions.assertTrue(MessageStatus.SUCCESS() == res.getStatus());\r\n        Mockito.doThrow(new ErrorException(1, \"\")).when(metadataQueryService).getDatabasesByDsId(dataSourceId, system, \"hadoop\");\r\n        res = mvcUtils.getMessage(mvcUtils.buildMvcResultGet(url, params));\r\n        Assertions.assertTrue(MessageStatus.ERROR() == res.getStatus() && res.getMessage().contains(\"Fail to get database list\"));\r\n    } catch (Exception e) {\r\n        // ignore\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-public-enhancements\\linkis-datasource\\linkis-datasource-manager\\server\\src\\test\\java\\org\\apache\\linkis\\metadata\\query\\server\\restful\\MetadataCoreRestfulTest.java",
  "methodName" : "testGetTables",
  "sourceCode" : "@Test\r\nvoid testGetTables() throws Exception {\r\n    String dataSourceId = \"1l\";\r\n    String database = \"hivedb\";\r\n    String url = String.format(\"/metadatamanager/tables/%s/db/%s\", dataSourceId, database);\r\n    MultiValueMap<String, String> params = new LinkedMultiValueMap<>();\r\n    params.set(\"system\", \"\");\r\n    MvcUtils mvcUtils = new MvcUtils(mockMvc);\r\n    moduleUserUtils.when(() -> ModuleUserUtils.getOperationUser(isA(HttpServletRequest.class), isA(String.class))).thenReturn(\"hadoop\", \"hadoop\", \"hadoop\");\r\n    Message res = mvcUtils.getMessage(mvcUtils.buildMvcResultGet(url, params));\r\n    Assertions.assertTrue(MessageStatus.ERROR() == res.getStatus() && res.getMessage().contains(\"'system' is missing\"));\r\n    params.set(\"system\", system);\r\n    Mockito.when(metadataQueryService.getTablesByDsId(dataSourceId, database, system, \"hadoop\")).thenReturn(new ArrayList<>());\r\n    res = mvcUtils.getMessage(mvcUtils.buildMvcResultGet(url, params));\r\n    Assertions.assertTrue(MessageStatus.SUCCESS() == res.getStatus());\r\n    Mockito.doThrow(new ErrorException(1, \"\")).when(metadataQueryService).getTablesByDsId(dataSourceId, database, system, \"hadoop\");\r\n    res = mvcUtils.getMessage(mvcUtils.buildMvcResultGet(url, params));\r\n    Assertions.assertTrue(MessageStatus.ERROR() == res.getStatus() && res.getMessage().contains(\"Fail to get table list\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-public-enhancements\\linkis-datasource\\linkis-datasource-manager\\server\\src\\test\\java\\org\\apache\\linkis\\metadata\\query\\server\\restful\\MetadataCoreRestfulTest.java",
  "methodName" : "testGetTableProps",
  "sourceCode" : "@Test\r\nvoid testGetTableProps() {\r\n    try {\r\n        String dataSourceId = \"1l\";\r\n        String database = \"hivedb\";\r\n        String table = \"testtab\";\r\n        String url = String.format(\"/metadatamanager/props/%s/db/%s/table/%s\", dataSourceId, database, table);\r\n        MultiValueMap<String, String> params = new LinkedMultiValueMap<>();\r\n        params.set(\"system\", \"\");\r\n        MvcUtils mvcUtils = new MvcUtils(mockMvc);\r\n        moduleUserUtils.when(() -> ModuleUserUtils.getOperationUser(isA(HttpServletRequest.class), isA(String.class))).thenReturn(\"hadoop\", \"hadoop\", \"hadoop\");\r\n        Message res = mvcUtils.getMessage(mvcUtils.buildMvcResultGet(url, params));\r\n        Assertions.assertTrue(MessageStatus.ERROR() == res.getStatus() && res.getMessage().contains(\"'system' is missing\"));\r\n        params.set(\"system\", system);\r\n        Mockito.when(metadataQueryService.getTablePropsByDsId(dataSourceId, database, table, system, \"hadoop\")).thenReturn(new HashMap<>());\r\n        res = mvcUtils.getMessage(mvcUtils.buildMvcResultGet(url, params));\r\n        Assertions.assertTrue(MessageStatus.SUCCESS() == res.getStatus());\r\n        Mockito.doThrow(new ErrorException(1, \"\")).when(metadataQueryService).getTablePropsByDsId(dataSourceId, database, table, system, \"hadoop\");\r\n        res = mvcUtils.getMessage(mvcUtils.buildMvcResultGet(url, params));\r\n        Assertions.assertTrue(MessageStatus.ERROR() == res.getStatus() && res.getMessage().contains(\"Fail to get table properties\"));\r\n    } catch (Exception e) {\r\n        // ignore\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-public-enhancements\\linkis-datasource\\linkis-datasource-manager\\server\\src\\test\\java\\org\\apache\\linkis\\metadata\\query\\server\\restful\\MetadataCoreRestfulTest.java",
  "methodName" : "testGetPartitions",
  "sourceCode" : "@Test\r\nvoid testGetPartitions() {\r\n    try {\r\n        String dataSourceId = \"1l\";\r\n        String database = \"hivedb\";\r\n        String table = \"testtab\";\r\n        String url = String.format(\"/metadatamanager/partitions/%s/db/%s/table/%s\", dataSourceId, database, table);\r\n        MultiValueMap<String, String> params = new LinkedMultiValueMap<>();\r\n        params.set(\"system\", \"\");\r\n        MvcUtils mvcUtils = new MvcUtils(mockMvc);\r\n        moduleUserUtils.when(() -> ModuleUserUtils.getOperationUser(isA(HttpServletRequest.class), isA(String.class))).thenReturn(\"hadoop\", \"hadoop\", \"hadoop\");\r\n        Message res = mvcUtils.getMessage(mvcUtils.buildMvcResultGet(url, params));\r\n        Assertions.assertTrue(MessageStatus.ERROR() == res.getStatus() && res.getMessage().contains(\"'system' is missing\"));\r\n        params.set(\"system\", system);\r\n        Mockito.when(metadataQueryService.getPartitionsByDsId(dataSourceId, database, table, system, false, \"hadoop\")).thenReturn(new MetaPartitionInfo());\r\n        res = mvcUtils.getMessage(mvcUtils.buildMvcResultGet(url, params));\r\n        Assertions.assertTrue(MessageStatus.SUCCESS() == res.getStatus());\r\n        Mockito.doThrow(new ErrorException(1, \"\")).when(metadataQueryService).getPartitionsByDsId(dataSourceId, database, table, system, false, \"hadoop\");\r\n        res = mvcUtils.getMessage(mvcUtils.buildMvcResultGet(url, params));\r\n        Assertions.assertTrue(MessageStatus.ERROR() == res.getStatus() && res.getMessage().contains(\"Fail to get partitions\"));\r\n    } catch (Exception e) {\r\n        // ignore\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-public-enhancements\\linkis-datasource\\linkis-datasource-manager\\server\\src\\test\\java\\org\\apache\\linkis\\metadata\\query\\server\\restful\\MetadataCoreRestfulTest.java",
  "methodName" : "testGetPartitionProps",
  "sourceCode" : "@Test\r\nvoid testGetPartitionProps() {\r\n    try {\r\n        String dataSourceId = \"1l\";\r\n        String database = \"hivedb\";\r\n        String table = \"testtab\";\r\n        String partition = \"ds\";\r\n        String url = String.format(\"/metadatamanager/props/{dataSourceId}/db/{database}/table/{table}/partition/{partition}\", dataSourceId, database, table, partition);\r\n        MultiValueMap<String, String> params = new LinkedMultiValueMap<>();\r\n        params.set(\"system\", \"\");\r\n        MvcUtils mvcUtils = new MvcUtils(mockMvc);\r\n        moduleUserUtils.when(() -> ModuleUserUtils.getOperationUser(isA(HttpServletRequest.class), isA(String.class))).thenReturn(\"hadoop\", \"hadoop\", \"hadoop\");\r\n        Message res = mvcUtils.getMessage(mvcUtils.buildMvcResultGet(url, params));\r\n        Assertions.assertTrue(MessageStatus.ERROR() == res.getStatus() && res.getMessage().contains(\"'system' is missing\"));\r\n        params.set(\"system\", system);\r\n        Mockito.when(metadataQueryService.getPartitionPropsByDsId(dataSourceId, database, table, partition, system, \"hadoop\")).thenReturn(new HashMap<>());\r\n        res = mvcUtils.getMessage(mvcUtils.buildMvcResultGet(url, params));\r\n        Assertions.assertTrue(MessageStatus.SUCCESS() == res.getStatus());\r\n        Mockito.doThrow(new ErrorException(1, \"\")).when(metadataQueryService).getPartitionPropsByDsId(dataSourceId, database, table, partition, system, \"hadoop\");\r\n        res = mvcUtils.getMessage(mvcUtils.buildMvcResultGet(url, params));\r\n        Assertions.assertTrue(MessageStatus.ERROR() == res.getStatus() && res.getMessage().contains(\"Fail to get partition properties\"));\r\n    } catch (Exception e) {\r\n        // ignore\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-public-enhancements\\linkis-datasource\\linkis-datasource-manager\\server\\src\\test\\java\\org\\apache\\linkis\\metadata\\query\\server\\restful\\MetadataCoreRestfulTest.java",
  "methodName" : "testGetColumns",
  "sourceCode" : "@Test\r\nvoid testGetColumns() {\r\n    try {\r\n        String dataSourceId = \"1l\";\r\n        String database = \"hivedb\";\r\n        String table = \"testtab\";\r\n        String url = String.format(\"/metadatamanager/columns/%s/db/%s/table/%s\", dataSourceId, database, table);\r\n        MultiValueMap<String, String> params = new LinkedMultiValueMap<>();\r\n        params.set(\"system\", \"\");\r\n        MvcUtils mvcUtils = new MvcUtils(mockMvc);\r\n        moduleUserUtils.when(() -> ModuleUserUtils.getOperationUser(isA(HttpServletRequest.class), isA(String.class))).thenReturn(\"hadoop\", \"hadoop\", \"hadoop\");\r\n        Message res = mvcUtils.getMessage(mvcUtils.buildMvcResultGet(url, params));\r\n        Assertions.assertTrue(MessageStatus.ERROR() == res.getStatus() && res.getMessage().contains(\"'system' is missing\"));\r\n        params.set(\"system\", system);\r\n        Mockito.when(metadataQueryService.getColumnsByDsId(dataSourceId, database, table, system, \"hadoop\")).thenReturn(new ArrayList<>());\r\n        res = mvcUtils.getMessage(mvcUtils.buildMvcResultGet(url, params));\r\n        Assertions.assertTrue(MessageStatus.SUCCESS() == res.getStatus());\r\n        Mockito.doThrow(new ErrorException(1, \"\")).when(metadataQueryService).getColumnsByDsId(dataSourceId, database, table, system, \"hadoop\");\r\n        res = mvcUtils.getMessage(mvcUtils.buildMvcResultGet(url, params));\r\n        Assertions.assertTrue(MessageStatus.ERROR() == res.getStatus() && res.getMessage().contains(\"Fail to get column list\"));\r\n    } catch (Exception e) {\r\n        // ignore\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-public-enhancements\\linkis-datasource\\linkis-datasource-manager\\server\\src\\test\\java\\org\\apache\\linkis\\metadata\\query\\server\\restful\\MetadataQueryRestfulTest.java",
  "methodName" : "testGetDatabases",
  "sourceCode" : "@Test\r\nvoid testGetDatabases() {\r\n    try {\r\n        String url = \"/metadataQuery/getDatabases\";\r\n        MultiValueMap<String, String> params = new LinkedMultiValueMap<>();\r\n        params.set(\"system\", \"\");\r\n        params.set(\"dataSourceName\", dataSourceName);\r\n        MvcUtils mvcUtils = new MvcUtils(mockMvc);\r\n        moduleUserUtils.when(() -> ModuleUserUtils.getOperationUser(isA(HttpServletRequest.class), isA(String.class))).thenReturn(\"hadoop\", \"hadoop\", \"hadoop\");\r\n        Message res = mvcUtils.getMessage(mvcUtils.buildMvcResultGet(url, params));\r\n        Assertions.assertTrue(MessageStatus.ERROR() == res.getStatus() && res.getMessage().contains(\"'system' is missing\"));\r\n        params.set(\"system\", system);\r\n        Mockito.when(metadataQueryService.getDatabasesByDsNameAndEnvId(dataSourceName, system, \"hadoop\", null)).thenReturn(new ArrayList<>());\r\n        res = mvcUtils.getMessage(mvcUtils.buildMvcResultGet(url, params));\r\n        Assertions.assertTrue(MessageStatus.SUCCESS() == res.getStatus());\r\n        Mockito.doThrow(new ErrorException(1, \"\")).when(metadataQueryService).getDatabasesByDsNameAndEnvId(dataSourceName, system, \"hadoop\", null);\r\n        res = mvcUtils.getMessage(mvcUtils.buildMvcResultGet(url, params));\r\n        Assertions.assertTrue(MessageStatus.ERROR() == res.getStatus() && res.getMessage().contains(\"Fail to get database list\"));\r\n    } catch (Exception e) {\r\n        // ignore\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-public-enhancements\\linkis-datasource\\linkis-datasource-manager\\server\\src\\test\\java\\org\\apache\\linkis\\metadata\\query\\server\\restful\\MetadataQueryRestfulTest.java",
  "methodName" : "testGetTables",
  "sourceCode" : "@Test\r\nvoid testGetTables() throws Exception {\r\n    String url = \"/metadataQuery/getTables\";\r\n    MultiValueMap<String, String> params = new LinkedMultiValueMap<>();\r\n    params.set(\"system\", \"\");\r\n    params.set(\"dataSourceName\", dataSourceName);\r\n    params.set(\"database\", database);\r\n    MvcUtils mvcUtils = new MvcUtils(mockMvc);\r\n    moduleUserUtils.when(() -> ModuleUserUtils.getOperationUser(isA(HttpServletRequest.class), isA(String.class))).thenReturn(\"hadoop\", \"hadoop\", \"hadoop\");\r\n    Message res = mvcUtils.getMessage(mvcUtils.buildMvcResultGet(url, params));\r\n    Assertions.assertTrue(MessageStatus.ERROR() == res.getStatus() && res.getMessage().contains(\"'system' is missing\"));\r\n    params.set(\"system\", system);\r\n    Mockito.when(metadataQueryService.getTablesByDsNameAndEnvId(dataSourceName, database, system, \"hadoop\", null)).thenReturn(new ArrayList<>());\r\n    res = mvcUtils.getMessage(mvcUtils.buildMvcResultGet(url, params));\r\n    Assertions.assertTrue(MessageStatus.SUCCESS() == res.getStatus());\r\n    Mockito.doThrow(new ErrorException(1, \"\")).when(metadataQueryService).getTablesByDsNameAndEnvId(dataSourceName, database, system, \"hadoop\", null);\r\n    res = mvcUtils.getMessage(mvcUtils.buildMvcResultGet(url, params));\r\n    Assertions.assertTrue(MessageStatus.ERROR() == res.getStatus() && res.getMessage().contains(\"Fail to get table list\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-public-enhancements\\linkis-datasource\\linkis-datasource-manager\\server\\src\\test\\java\\org\\apache\\linkis\\metadata\\query\\server\\restful\\MetadataQueryRestfulTest.java",
  "methodName" : "testGetTableProps",
  "sourceCode" : "@Test\r\nvoid testGetTableProps() {\r\n    try {\r\n        String url = \"/metadataQuery/getTableProps\";\r\n        MultiValueMap<String, String> params = new LinkedMultiValueMap<>();\r\n        params.set(\"dataSourceName\", dataSourceName);\r\n        params.set(\"database\", database);\r\n        params.set(\"table\", table);\r\n        params.set(\"system\", \"\");\r\n        MvcUtils mvcUtils = new MvcUtils(mockMvc);\r\n        moduleUserUtils.when(() -> ModuleUserUtils.getOperationUser(isA(HttpServletRequest.class), isA(String.class))).thenReturn(\"hadoop\", \"hadoop\", \"hadoop\");\r\n        Message res = mvcUtils.getMessage(mvcUtils.buildMvcResultGet(url, params));\r\n        Assertions.assertTrue(MessageStatus.ERROR() == res.getStatus() && res.getMessage().contains(\"'system' is missing\"));\r\n        params.set(\"system\", system);\r\n        Mockito.when(metadataQueryService.getTablePropsByDsName(dataSourceName, database, table, system, \"hadoop\")).thenReturn(new HashMap<>());\r\n        res = mvcUtils.getMessage(mvcUtils.buildMvcResultGet(url, params));\r\n        Assertions.assertTrue(MessageStatus.SUCCESS() == res.getStatus());\r\n        Mockito.doThrow(new ErrorException(1, \"\")).when(metadataQueryService).getTablePropsByDsName(dataSourceName, database, table, system, \"hadoop\");\r\n        res = mvcUtils.getMessage(mvcUtils.buildMvcResultGet(url, params));\r\n        Assertions.assertTrue(MessageStatus.ERROR() == res.getStatus() && res.getMessage().contains(\"Fail to get table properties\"));\r\n    } catch (Exception e) {\r\n        // ignore\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-public-enhancements\\linkis-datasource\\linkis-datasource-manager\\server\\src\\test\\java\\org\\apache\\linkis\\metadata\\query\\server\\restful\\MetadataQueryRestfulTest.java",
  "methodName" : "testGetPartitions",
  "sourceCode" : "@Test\r\nvoid testGetPartitions() {\r\n    try {\r\n        String url = \"/metadataQuery/getPartitions\";\r\n        MultiValueMap<String, String> params = new LinkedMultiValueMap<>();\r\n        params.set(\"dataSourceName\", dataSourceName);\r\n        params.set(\"database\", database);\r\n        params.set(\"table\", table);\r\n        params.set(\"system\", \"\");\r\n        MvcUtils mvcUtils = new MvcUtils(mockMvc);\r\n        moduleUserUtils.when(() -> ModuleUserUtils.getOperationUser(isA(HttpServletRequest.class), isA(String.class))).thenReturn(\"hadoop\", \"hadoop\", \"hadoop\");\r\n        Message res = mvcUtils.getMessage(mvcUtils.buildMvcResultGet(url, params));\r\n        Assertions.assertTrue(MessageStatus.ERROR() == res.getStatus() && res.getMessage().contains(\"'system' is missing\"));\r\n        params.set(\"system\", system);\r\n        Mockito.when(metadataQueryService.getPartitionsByDsName(dataSourceName, database, table, system, false, \"hadoop\")).thenReturn(new MetaPartitionInfo());\r\n        res = mvcUtils.getMessage(mvcUtils.buildMvcResultGet(url, params));\r\n        Assertions.assertTrue(MessageStatus.SUCCESS() == res.getStatus());\r\n        Mockito.doThrow(new ErrorException(1, \"\")).when(metadataQueryService).getPartitionsByDsName(dataSourceName, database, table, system, false, \"hadoop\");\r\n        res = mvcUtils.getMessage(mvcUtils.buildMvcResultGet(url, params));\r\n        Assertions.assertTrue(MessageStatus.ERROR() == res.getStatus() && res.getMessage().contains(\"Fail to get partitions\"));\r\n    } catch (Exception e) {\r\n        // ignore\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-public-enhancements\\linkis-datasource\\linkis-datasource-manager\\server\\src\\test\\java\\org\\apache\\linkis\\metadata\\query\\server\\restful\\MetadataQueryRestfulTest.java",
  "methodName" : "testGetPartitionProps",
  "sourceCode" : "@Test\r\nvoid testGetPartitionProps() {\r\n    try {\r\n        String partition = \"ds\";\r\n        String url = \"/metadataQuery/getPartitionProps\";\r\n        MultiValueMap<String, String> params = new LinkedMultiValueMap<>();\r\n        params.set(\"dataSourceName\", dataSourceName);\r\n        params.set(\"database\", database);\r\n        params.set(\"table\", table);\r\n        params.set(\"partition\", partition);\r\n        params.set(\"system\", \"\");\r\n        MvcUtils mvcUtils = new MvcUtils(mockMvc);\r\n        moduleUserUtils.when(() -> ModuleUserUtils.getOperationUser(isA(HttpServletRequest.class), isA(String.class))).thenReturn(\"hadoop\", \"hadoop\", \"hadoop\");\r\n        Message res = mvcUtils.getMessage(mvcUtils.buildMvcResultGet(url, params));\r\n        Assertions.assertTrue(MessageStatus.ERROR() == res.getStatus() && res.getMessage().contains(\"'system' is missing\"));\r\n        params.set(\"system\", system);\r\n        Mockito.when(metadataQueryService.getPartitionPropsByDsName(dataSourceName, database, table, partition, system, \"hadoop\")).thenReturn(new HashMap<>());\r\n        res = mvcUtils.getMessage(mvcUtils.buildMvcResultGet(url, params));\r\n        Assertions.assertTrue(MessageStatus.SUCCESS() == res.getStatus());\r\n        Mockito.doThrow(new ErrorException(1, \"\")).when(metadataQueryService).getPartitionPropsByDsName(dataSourceName, database, table, partition, system, \"hadoop\");\r\n        res = mvcUtils.getMessage(mvcUtils.buildMvcResultGet(url, params));\r\n        Assertions.assertTrue(MessageStatus.ERROR() == res.getStatus() && res.getMessage().contains(\"Fail to get partition properties\"));\r\n    } catch (Exception e) {\r\n        // ignore\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-public-enhancements\\linkis-datasource\\linkis-datasource-manager\\server\\src\\test\\java\\org\\apache\\linkis\\metadata\\query\\server\\restful\\MetadataQueryRestfulTest.java",
  "methodName" : "testGetColumns",
  "sourceCode" : "@Test\r\nvoid testGetColumns() {\r\n    try {\r\n        String url = \"/metadataQuery/getColumns\";\r\n        MultiValueMap<String, String> params = new LinkedMultiValueMap<>();\r\n        params.set(\"dataSourceName\", dataSourceName);\r\n        params.set(\"database\", database);\r\n        params.set(\"table\", table);\r\n        params.set(\"system\", \"\");\r\n        MvcUtils mvcUtils = new MvcUtils(mockMvc);\r\n        moduleUserUtils.when(() -> ModuleUserUtils.getOperationUser(isA(HttpServletRequest.class), isA(String.class))).thenReturn(\"hadoop\", \"hadoop\", \"hadoop\");\r\n        Message res = mvcUtils.getMessage(mvcUtils.buildMvcResultGet(url, params));\r\n        Assertions.assertTrue(MessageStatus.ERROR() == res.getStatus() && res.getMessage().contains(\"'system' is missing\"));\r\n        params.set(\"system\", system);\r\n        Mockito.when(metadataQueryService.getColumnsByDsNameAndEnvId(dataSourceName, database, table, system, \"hadoop\", null)).thenReturn(new ArrayList<>());\r\n        res = mvcUtils.getMessage(mvcUtils.buildMvcResultGet(url, params));\r\n        Assertions.assertTrue(MessageStatus.SUCCESS() == res.getStatus());\r\n        Mockito.doThrow(new ErrorException(1, \"\")).when(metadataQueryService).getColumnsByDsNameAndEnvId(dataSourceName, database, table, system, \"hadoop\", null);\r\n        res = mvcUtils.getMessage(mvcUtils.buildMvcResultGet(url, params));\r\n        Assertions.assertTrue(MessageStatus.ERROR() == res.getStatus() && res.getMessage().contains(\"Fail to get column list\"));\r\n    } catch (Exception e) {\r\n        // ignore\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-public-enhancements\\linkis-datasource\\linkis-metadata\\src\\test\\java\\org\\apache\\linkis\\metadata\\condition\\DataSourceConditionTest.java",
  "methodName" : "matchesTest",
  "sourceCode" : "@Test\r\n@DisplayName(\"matchesTest\")\r\npublic void matchesTest() {\r\n    boolean matches = new DataSourceCondition().matches(null, null);\r\n    Assertions.assertTrue(matches);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-public-enhancements\\linkis-datasource\\linkis-metadata\\src\\test\\java\\org\\apache\\linkis\\metadata\\dao\\MdqDaoTest.java",
  "methodName" : "activateTableTest",
  "sourceCode" : "@Test\r\n@DisplayName(\"activateTableTest\")\r\npublic void activateTableTest() {\r\n    mdqDao.activateTable(1L);\r\n    MdqTable mdqTable = mdqDao.selectTableForUpdate(\"ods_user_md_ind\", \"t_student_temp\");\r\n    Assertions.assertTrue(mdqTable.getAvailable().booleanValue());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-public-enhancements\\linkis-datasource\\linkis-metadata\\src\\test\\java\\org\\apache\\linkis\\metadata\\dao\\MdqDaoTest.java",
  "methodName" : "selectTableByNameTest",
  "sourceCode" : "@Test\r\n@DisplayName(\"selectTableByNameTest\")\r\npublic void selectTableByNameTest() {\r\n    MdqTable mdqTable = mdqDao.selectTableByName(\"ods_user_md_ind\", \"t_student_temp\", \"hadoop\");\r\n    Assertions.assertNotNull(mdqTable);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-public-enhancements\\linkis-datasource\\linkis-metadata\\src\\test\\java\\org\\apache\\linkis\\metadata\\dao\\MdqDaoTest.java",
  "methodName" : "listMdqFieldByTableIdTest",
  "sourceCode" : "@Test\r\n@DisplayName(\"listMdqFieldByTableIdTest\")\r\npublic void listMdqFieldByTableIdTest() {\r\n    List<MdqField> mdqFields = mdqDao.listMdqFieldByTableId(1L);\r\n    Assertions.assertTrue(mdqFields.size() > 0);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-public-enhancements\\linkis-datasource\\linkis-metadata\\src\\test\\java\\org\\apache\\linkis\\metadata\\dao\\MdqDaoTest.java",
  "methodName" : "insertTableTest",
  "sourceCode" : "@Test\r\n@DisplayName(\"insertTableTest\")\r\npublic void insertTableTest() {\r\n    MdqTable mdpTable = createMdpTable();\r\n    mdqDao.insertTable(mdpTable);\r\n    MdqTable mdqTableDao = mdqDao.selectTableByName(mdpTable.getDatabase(), mdpTable.getName(), mdpTable.getCreator());\r\n    Assertions.assertNotNull(mdqTableDao);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-public-enhancements\\linkis-datasource\\linkis-metadata\\src\\test\\java\\org\\apache\\linkis\\metadata\\dao\\MdqDaoTest.java",
  "methodName" : "insertImportTest",
  "sourceCode" : "@Test\r\n@DisplayName(\"insertImportTest\")\r\npublic void insertImportTest() {\r\n    Assertions.assertAll(() -> {\r\n        MdqImport mdqImport = new MdqImport();\r\n        mdqImport.setTableId(1L);\r\n        mdqImport.setArgs(\"name\");\r\n        mdqImport.setImportType(0);\r\n        mdqDao.insertImport(mdqImport);\r\n    });\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-public-enhancements\\linkis-datasource\\linkis-metadata\\src\\test\\java\\org\\apache\\linkis\\metadata\\dao\\MdqDaoTest.java",
  "methodName" : "insertLineageTest",
  "sourceCode" : "@Test\r\n@DisplayName(\"insertLineageTest\")\r\npublic void insertLineageTest() {\r\n    Assertions.assertAll(() -> {\r\n        MdqLineage mdqLineage = new MdqLineage();\r\n        mdqLineage.setTableId(1L);\r\n        mdqLineage.setSourceTable(\"hadoop_ind\");\r\n        mdqLineage.setUpdateTime(new Date());\r\n        mdqDao.insertLineage(mdqLineage);\r\n    });\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-public-enhancements\\linkis-datasource\\linkis-metadata\\src\\test\\java\\org\\apache\\linkis\\metadata\\dao\\MdqDaoTest.java",
  "methodName" : "selectTableForUpdateTest",
  "sourceCode" : "@Test\r\n@DisplayName(\"selectTableForUpdateTest\")\r\npublic void selectTableForUpdateTest() {\r\n    MdqTable mdqTable = mdqDao.selectTableForUpdate(\"ods_user_md_ind\", \"t_student_temp\");\r\n    Assertions.assertNotNull(mdqTable);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-public-enhancements\\linkis-datasource\\linkis-metadata\\src\\test\\java\\org\\apache\\linkis\\metadata\\dao\\MdqDaoTest.java",
  "methodName" : "deleteTableBaseInfoTest",
  "sourceCode" : "@Test\r\n@DisplayName(\"deleteTableBaseInfoTest\")\r\npublic void deleteTableBaseInfoTest() {\r\n    mdqDao.deleteTableBaseInfo(1L);\r\n    MdqTable mdqTable = mdqDao.selectTableForUpdate(\"ods_user_md_ind\", \"t_student_temp\");\r\n    Assertions.assertNull(mdqTable);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-public-enhancements\\linkis-datasource\\linkis-metadata\\src\\test\\java\\org\\apache\\linkis\\metadata\\dao\\MdqDaoTest.java",
  "methodName" : "insertFieldsTest",
  "sourceCode" : "@Test\r\n@DisplayName(\"insertFieldsTest\")\r\npublic void insertFieldsTest() {\r\n    List<MdqField> list = new ArrayList<>(Arrays.asList(createMdpField()));\r\n    mdqDao.insertFields(list);\r\n    List<MdqField> mdqFields = mdqDao.listMdqFieldByTableId(1L);\r\n    Assertions.assertTrue(mdqFields.size() > 0);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-public-enhancements\\linkis-datasource\\linkis-metadata\\src\\test\\java\\org\\apache\\linkis\\metadata\\errorcode\\LinkisMetadataErrorCodeSummaryTest.java",
  "methodName" : "enumTest",
  "sourceCode" : "@Test\r\n@DisplayName(\"enumTest\")\r\npublic void enumTest() {\r\n    int unrecognizedCode = LinkisMetadataErrorCodeSummary.UNRECOGNIZED_IMPORT_TYPE.getErrorCode();\r\n    int importHiveCode = LinkisMetadataErrorCodeSummary.IMPORT_HIVE_SOURCE_IS_NULL.getErrorCode();\r\n    int hiveCreateNullCode = LinkisMetadataErrorCodeSummary.HIVE_CREATE_IS_NULL.getErrorCode();\r\n    int hiveCreateTableNullCode = LinkisMetadataErrorCodeSummary.HIVE_CREATE__TABLE_IS_NULL.getErrorCode();\r\n    int partitionCode = LinkisMetadataErrorCodeSummary.PARTITION_IS_NULL.getErrorCode();\r\n    int expressCode = LinkisMetadataErrorCodeSummary.EXPRESS_CODE.getErrorCode();\r\n    Assertions.assertTrue(57895 == unrecognizedCode);\r\n    Assertions.assertTrue(57895 == importHiveCode);\r\n    Assertions.assertTrue(57895 == hiveCreateNullCode);\r\n    Assertions.assertTrue(57895 == hiveCreateTableNullCode);\r\n    Assertions.assertTrue(57895 == partitionCode);\r\n    Assertions.assertTrue(57895 == expressCode);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-public-enhancements\\linkis-datasource\\linkis-metadata\\src\\test\\java\\org\\apache\\linkis\\metadata\\hive\\dao\\HiveMetaDaoTest.java",
  "methodName" : "getLocationByDbAndTableTest",
  "sourceCode" : "@Test\r\n@DisplayName(\"getLocationByDbAndTableTest\")\r\npublic void getLocationByDbAndTableTest() {\r\n    MetadataQueryParam queryParam = new MetadataQueryParam();\r\n    queryParam.setDbName(\"default\");\r\n    queryParam.setTableName(\"employee\");\r\n    String location = hiveMetaDao.getLocationByDbAndTable(queryParam);\r\n    Assertions.assertNotNull(location);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-public-enhancements\\linkis-datasource\\linkis-metadata\\src\\test\\java\\org\\apache\\linkis\\metadata\\hive\\dao\\HiveMetaDaoTest.java",
  "methodName" : "getAllDbsTest",
  "sourceCode" : "@Test\r\n@DisplayName(\"getAllDbsTest\")\r\npublic void getAllDbsTest() {\r\n    List<String> dbs = hiveMetaDao.getAllDbs();\r\n    Assertions.assertTrue(dbs.size() > 0);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-public-enhancements\\linkis-datasource\\linkis-metadata\\src\\test\\java\\org\\apache\\linkis\\metadata\\hive\\dao\\HiveMetaDaoTest.java",
  "methodName" : "getRolesByUserTest",
  "sourceCode" : "@Test\r\n@DisplayName(\"getRolesByUserTest\")\r\npublic void getRolesByUserTest() {\r\n    List<String> roles = hiveMetaDao.getRolesByUser(\"admin\");\r\n    Assertions.assertTrue(roles.size() == 0);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-public-enhancements\\linkis-datasource\\linkis-metadata\\src\\test\\java\\org\\apache\\linkis\\metadata\\hive\\dao\\HiveMetaDaoTest.java",
  "methodName" : "getDbsByUserAndRolesTest",
  "sourceCode" : "@Test\r\n@DisplayName(\"getDbsByUserAndRolesTest\")\r\npublic void getDbsByUserAndRolesTest() {\r\n    List<String> dbs = hiveMetaDao.getDbsByUserAndRoles(\"admin\", new ArrayList<>());\r\n    Assertions.assertTrue(dbs.size() == 0);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-public-enhancements\\linkis-datasource\\linkis-metadata\\src\\test\\java\\org\\apache\\linkis\\metadata\\hive\\dao\\HiveMetaDaoTest.java",
  "methodName" : "getTablesByDbNameAndUserAndRolesTest",
  "sourceCode" : "@Test\r\n@DisplayName(\"getTablesByDbNameAndUserAndRolesTest\")\r\npublic void getTablesByDbNameAndUserAndRolesTest() {\r\n    MetadataQueryParam queryParam = new MetadataQueryParam();\r\n    queryParam.setDbName(\"default\");\r\n    queryParam.setTableName(\"employee\");\r\n    queryParam.setUserName(\"admin\");\r\n    List<Map<String, Object>> tables = hiveMetaDao.getTablesByDbNameAndUserAndRoles(queryParam);\r\n    Assertions.assertTrue(tables.size() == 0);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-public-enhancements\\linkis-datasource\\linkis-metadata\\src\\test\\java\\org\\apache\\linkis\\metadata\\hive\\dao\\HiveMetaDaoTest.java",
  "methodName" : "getTablesByDbNameTest",
  "sourceCode" : "@Test\r\n@DisplayName(\"getTablesByDbNameTest\")\r\npublic void getTablesByDbNameTest() {\r\n    MetadataQueryParam queryParam = new MetadataQueryParam();\r\n    queryParam.setDbName(\"default\");\r\n    List<Map<String, Object>> tables = hiveMetaDao.getTablesByDbName(queryParam);\r\n    Assertions.assertTrue(tables.size() == 1);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-public-enhancements\\linkis-datasource\\linkis-metadata\\src\\test\\java\\org\\apache\\linkis\\metadata\\hive\\dao\\HiveMetaDaoTest.java",
  "methodName" : "getPartitionSizeTest",
  "sourceCode" : "@Test\r\n@DisplayName(\"getPartitionSizeTest\")\r\npublic void getPartitionSizeTest() {\r\n    MetadataQueryParam queryParam = new MetadataQueryParam();\r\n    queryParam.setDbName(\"default\");\r\n    queryParam.setTableName(\"employee\");\r\n    queryParam.setPartitionName(\"ds=202202\");\r\n    Long size = hiveMetaDao.getPartitionSize(queryParam);\r\n    Assertions.assertTrue(size.longValue() >= 0);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-public-enhancements\\linkis-datasource\\linkis-metadata\\src\\test\\java\\org\\apache\\linkis\\metadata\\hive\\dao\\HiveMetaDaoTest.java",
  "methodName" : "getPartitionsTest",
  "sourceCode" : "@Test\r\n@DisplayName(\"getPartitionsTest\")\r\npublic void getPartitionsTest() {\r\n    MetadataQueryParam queryParam = new MetadataQueryParam();\r\n    queryParam.setDbName(\"default\");\r\n    queryParam.setTableName(\"employee\");\r\n    List<String> partitions = hiveMetaDao.getPartitions(queryParam);\r\n    Assertions.assertTrue(partitions.size() >= 0);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-public-enhancements\\linkis-datasource\\linkis-metadata\\src\\test\\java\\org\\apache\\linkis\\metadata\\hive\\dao\\HiveMetaDaoTest.java",
  "methodName" : "getColumnsTest",
  "sourceCode" : "@Test\r\n@DisplayName(\"getColumnsTest\")\r\npublic void getColumnsTest() {\r\n    MetadataQueryParam queryParam = new MetadataQueryParam();\r\n    queryParam.setDbName(\"default\");\r\n    queryParam.setTableName(\"employee\");\r\n    List<Map<String, Object>> columns = hiveMetaDao.getColumns(queryParam);\r\n    Assertions.assertTrue(columns.size() >= 0);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-public-enhancements\\linkis-datasource\\linkis-metadata\\src\\test\\java\\org\\apache\\linkis\\metadata\\hive\\dao\\HiveMetaDaoTest.java",
  "methodName" : "getStorageDescriptionIDByDbTableNameAndUserTest",
  "sourceCode" : "@Test\r\n@DisplayName(\"getStorageDescriptionIDByDbTableNameAndUserTest\")\r\npublic void getStorageDescriptionIDByDbTableNameAndUserTest() {\r\n    MetadataQueryParam queryParam = new MetadataQueryParam();\r\n    queryParam.setDbName(\"default\");\r\n    queryParam.setTableName(\"employee\");\r\n    queryParam.setUserName(\"admin\");\r\n    Map<String, Object> list = hiveMetaDao.getStorageDescriptionIDByDbTableNameAndUser(queryParam);\r\n    Assertions.assertNull(list);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-public-enhancements\\linkis-datasource\\linkis-metadata\\src\\test\\java\\org\\apache\\linkis\\metadata\\hive\\dao\\HiveMetaDaoTest.java",
  "methodName" : "getColumnsByStorageDescriptionIDTest",
  "sourceCode" : "@Test\r\n@DisplayName(\"getColumnsByStorageDescriptionIDTest\")\r\npublic void getColumnsByStorageDescriptionIDTest() {\r\n    MetadataQueryParam queryParam = new MetadataQueryParam();\r\n    queryParam.setSdId(\"1\");\r\n    List<Map<String, Object>> columns = hiveMetaDao.getColumnsByStorageDescriptionID(queryParam);\r\n    Assertions.assertTrue(columns.size() >= 0);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-public-enhancements\\linkis-datasource\\linkis-metadata\\src\\test\\java\\org\\apache\\linkis\\metadata\\hive\\dao\\HiveMetaDaoTest.java",
  "methodName" : "getPartitionKeysTest",
  "sourceCode" : "@Test\r\n@DisplayName(\"getPartitionKeysTest\")\r\npublic void getPartitionKeysTest() {\r\n    MetadataQueryParam queryParam = new MetadataQueryParam();\r\n    queryParam.setDbName(\"default\");\r\n    queryParam.setTableName(\"employee\");\r\n    List<Map<String, Object>> partitionKeys = hiveMetaDao.getPartitionKeys(queryParam);\r\n    Assertions.assertTrue(partitionKeys.size() > 0);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-public-enhancements\\linkis-datasource\\linkis-metadata\\src\\test\\java\\org\\apache\\linkis\\metadata\\type\\LifecycleTest.java",
  "methodName" : "enumTest",
  "sourceCode" : "@Test\r\n@DisplayName(\"enumTest\")\r\npublic void enumTest() {\r\n    String permanentName = Lifecycle.Permanent.getName();\r\n    String halfYearName = Lifecycle.HalfYear.getName();\r\n    String thisMonthName = Lifecycle.ThisMonth.getName();\r\n    String thisWeekName = Lifecycle.ThisWeek.getName();\r\n    String toddayName = Lifecycle.Todday.getName();\r\n    Assertions.assertNotNull(permanentName);\r\n    Assertions.assertNotNull(halfYearName);\r\n    Assertions.assertNotNull(thisMonthName);\r\n    Assertions.assertNotNull(thisWeekName);\r\n    Assertions.assertNotNull(toddayName);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-public-enhancements\\linkis-datasource\\linkis-metadata\\src\\test\\java\\org\\apache\\linkis\\metadata\\type\\ModelLevelTest.java",
  "methodName" : "enumTest",
  "sourceCode" : "@Test\r\n@DisplayName(\"enumTest\")\r\npublic void enumTest() {\r\n    String odsName = ModelLevel.ODS.getName();\r\n    String dwdName = ModelLevel.DWD.getName();\r\n    String dwsName = ModelLevel.DWS.getName();\r\n    String adsName = ModelLevel.ADS.getName();\r\n    Assertions.assertEquals(\"原始数据层\", odsName);\r\n    Assertions.assertEquals(\"明细数据层\", dwdName);\r\n    Assertions.assertEquals(\"汇总数据层\", dwsName);\r\n    Assertions.assertEquals(\"应用数据层\", adsName);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-public-enhancements\\linkis-datasource\\linkis-metadata\\src\\test\\java\\org\\apache\\linkis\\metadata\\type\\UseWayTypeTest.java",
  "methodName" : "enumTest",
  "sourceCode" : "@Test\r\n@DisplayName(\"enumTest\")\r\npublic void enumTest() {\r\n    String onceWriteMultiReadName = UseWayType.OnceWriteMultiRead.getName();\r\n    String multiOverwriteName = UseWayType.MultiOverwrite.getName();\r\n    String crudName = UseWayType.CRUD.getName();\r\n    String occasionllyReadName = UseWayType.OnceWriteOccasionllyRead.getName();\r\n    Assertions.assertEquals(\"一次写入多次读\", onceWriteMultiReadName);\r\n    Assertions.assertEquals(\"多次覆盖写\", multiOverwriteName);\r\n    Assertions.assertEquals(\"增删改查\", crudName);\r\n    Assertions.assertEquals(\"一次写偶尔读\", occasionllyReadName);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-public-enhancements\\linkis-datasource\\linkis-metadata\\src\\test\\java\\org\\apache\\linkis\\metadata\\util\\ConstantsTest.java",
  "methodName" : "constTest",
  "sourceCode" : "@Test\r\n@DisplayName(\"constTest\")\r\npublic void constTest() {\r\n    String applicationName = Constants.APPLICATION_NAME;\r\n    String submitted = Constants.SUBMITTED;\r\n    String approved = Constants.APPROVED;\r\n    String rejected = Constants.REJECTED;\r\n    String column = Constants.COLUMN;\r\n    String row = Constants.ROW;\r\n    String table = Constants.TABLE;\r\n    String script = Constants.SCRIPT;\r\n    Assertions.assertNotNull(applicationName);\r\n    Assertions.assertNotNull(submitted);\r\n    Assertions.assertNotNull(approved);\r\n    Assertions.assertNotNull(rejected);\r\n    Assertions.assertNotNull(column);\r\n    Assertions.assertNotNull(row);\r\n    Assertions.assertNotNull(table);\r\n    Assertions.assertNotNull(script);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-public-enhancements\\linkis-datasource\\linkis-metadata\\src\\test\\java\\org\\apache\\linkis\\metadata\\util\\DWSConfigTest.java",
  "methodName" : "constTest",
  "sourceCode" : "@Test\r\n@DisplayName(\"constTest\")\r\npublic void constTest() {\r\n    String hiveConfDir = DWSConfig.HIVE_CONF_DIR.getValue();\r\n    String metaUrl = DWSConfig.HIVE_META_URL.getValue();\r\n    String metaUser = DWSConfig.HIVE_META_USER.getValue();\r\n    String hiveMetaPassword = DWSConfig.HIVE_META_PASSWORD.getValue();\r\n    Boolean encodeEnabled = DWSConfig.HIVE_PASS_ENCODE_ENABLED.getValue();\r\n    Boolean hivePermissionWithLOGINUserEnabled = DWSConfig.HIVE_PERMISSION_WITH_lOGIN_USER_ENABLED.getValue();\r\n    String dbFilterKeywords = DWSConfig.DB_FILTER_KEYWORDS.getValue();\r\n    String hiveDbAdminUser = DWSConfig.HIVE_DB_ADMIN_USER.getValue();\r\n    String hdfsFileSystemRestErrs = DWSConfig.HDFS_FILE_SYSTEM_REST_ERRS;\r\n    Assertions.assertNotNull(hiveConfDir);\r\n    Assertions.assertNotNull(metaUrl);\r\n    Assertions.assertNotNull(metaUser);\r\n    Assertions.assertNotNull(hiveMetaPassword);\r\n    Assertions.assertFalse(encodeEnabled.booleanValue());\r\n    Assertions.assertTrue(hivePermissionWithLOGINUserEnabled.booleanValue());\r\n    Assertions.assertNotNull(dbFilterKeywords);\r\n    Assertions.assertNotNull(hiveDbAdminUser);\r\n    Assertions.assertNotNull(hdfsFileSystemRestErrs);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-public-enhancements\\linkis-datasource\\linkis-metadata\\src\\test\\java\\org\\apache\\linkis\\metadata\\util\\HiveUtilsTest.java",
  "methodName" : "getDefaultConfTest",
  "sourceCode" : "@Test\r\n@DisplayName(\"getDefaultConfTest\")\r\npublic void getDefaultConfTest() {\r\n    Configuration configuration = HiveUtils.getDefaultConf(\"hadoop\");\r\n    Assertions.assertNotNull(configuration);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-public-enhancements\\linkis-datasource\\linkis-metadata\\src\\test\\java\\org\\apache\\linkis\\metadata\\util\\HiveUtilsTest.java",
  "methodName" : "decodeTest",
  "sourceCode" : "@Test\r\n@DisplayName(\"decodeTest\")\r\npublic void decodeTest() {\r\n    String hadoop = HiveUtils.decode(\"hadoop\");\r\n    Assertions.assertNotNull(hadoop);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-public-enhancements\\linkis-instance-label-server\\src\\test\\java\\org\\apache\\linkis\\instance\\label\\dao\\InsLabelRelationDaoTest.java",
  "methodName" : "testSearchInsDirectByValues",
  "sourceCode" : "@Test\r\npublic void testSearchInsDirectByValues() {\r\n    Map<String, String> map = new HashMap<>();\r\n    map.put(\"test\", \"test1\");\r\n    List<Map<String, String>> list = new ArrayList<>();\r\n    list.add(map);\r\n    String relation = \"testRelation\";\r\n    List<InstanceInfo> instanceInfoList = insLabelRelationDao.searchInsDirectByValues(list, relation);\r\n    assertTrue(instanceInfoList.size() <= 0);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-public-enhancements\\linkis-instance-label-server\\src\\test\\java\\org\\apache\\linkis\\instance\\label\\dao\\InsLabelRelationDaoTest.java",
  "methodName" : "testSearchInsDirectByLabels",
  "sourceCode" : "@Test\r\npublic void testSearchInsDirectByLabels() {\r\n    List<InsPersistenceLabel> labels = new ArrayList<>();\r\n    InsPersistenceLabel insPersistenceLabel = new InsPersistenceLabel();\r\n    insPersistenceLabel.setLabelKey(\"testKey\");\r\n    insPersistenceLabel.setStringValue(\"testVa\");\r\n    labels.add(insPersistenceLabel);\r\n    List<InstanceInfo> instanceInfoList = insLabelRelationDao.searchInsDirectByLabels(labels);\r\n    assertTrue(instanceInfoList.size() <= 0);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-public-enhancements\\linkis-instance-label-server\\src\\test\\java\\org\\apache\\linkis\\instance\\label\\dao\\InsLabelRelationDaoTest.java",
  "methodName" : "testSearchInsCascadeByValues",
  "sourceCode" : "@Test\r\npublic void testSearchInsCascadeByValues() {\r\n    Map<String, String> map = new HashMap<>();\r\n    map.put(\"test\", \"test1\");\r\n    List<Map<String, String>> valueContent = new ArrayList<>();\r\n    valueContent.add(map);\r\n    String relation = \"testRelation\";\r\n    List<InstanceInfo> instanceInfoList = insLabelRelationDao.searchInsCascadeByValues(valueContent, relation);\r\n    assertTrue(instanceInfoList.size() <= 0);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-public-enhancements\\linkis-instance-label-server\\src\\test\\java\\org\\apache\\linkis\\instance\\label\\dao\\InsLabelRelationDaoTest.java",
  "methodName" : "testSearchInsCascadeByLabels",
  "sourceCode" : "@Test\r\npublic void testSearchInsCascadeByLabels() {\r\n    List<InsPersistenceLabel> labels = new ArrayList<>();\r\n    InsPersistenceLabel insPersistenceLabel = new InsPersistenceLabel();\r\n    insPersistenceLabel.setLabelKey(\"testKey\");\r\n    insPersistenceLabel.setStringValue(\"testVa\");\r\n    labels.add(insPersistenceLabel);\r\n    List<InstanceInfo> instanceInfoList = insLabelRelationDao.searchInsCascadeByLabels(labels);\r\n    assertTrue(instanceInfoList.size() <= 0);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-public-enhancements\\linkis-instance-label-server\\src\\test\\java\\org\\apache\\linkis\\instance\\label\\dao\\InsLabelRelationDaoTest.java",
  "methodName" : "testSearchUnRelateInstances",
  "sourceCode" : "@Test\r\npublic void testSearchUnRelateInstances() {\r\n    InstanceInfo instanceInfo = new InstanceInfo();\r\n    instanceInfo.setApplicationName(\"testApplicationName\");\r\n    List<InstanceInfo> instanceInfoList = insLabelRelationDao.searchUnRelateInstances(instanceInfo);\r\n    assertTrue(instanceInfoList.size() <= 0);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-public-enhancements\\linkis-instance-label-server\\src\\test\\java\\org\\apache\\linkis\\instance\\label\\dao\\InsLabelRelationDaoTest.java",
  "methodName" : "testSearchLabelRelatedInstances",
  "sourceCode" : "@Test\r\npublic void testSearchLabelRelatedInstances() {\r\n    InstanceInfo instanceInfo = new InstanceInfo();\r\n    instanceInfo.setApplicationName(\"testApplicationName\");\r\n    List<InstanceInfo> instanceInfoList = insLabelRelationDao.searchLabelRelatedInstances(instanceInfo);\r\n    assertTrue(instanceInfoList.size() <= 0);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-public-enhancements\\linkis-instance-label-server\\src\\test\\java\\org\\apache\\linkis\\instance\\label\\dao\\InsLabelRelationDaoTest.java",
  "methodName" : "testSearchLabelsByInstance",
  "sourceCode" : "@Test\r\npublic void testSearchLabelsByInstance() {\r\n    String instance = \"testInstance\";\r\n    List<InsPersistenceLabel> insPersistenceLabelList = insLabelRelationDao.searchLabelsByInstance(instance);\r\n    assertTrue(insPersistenceLabelList.size() <= 0);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-public-enhancements\\linkis-instance-label-server\\src\\test\\java\\org\\apache\\linkis\\instance\\label\\dao\\InsLabelRelationDaoTest.java",
  "methodName" : "testListAllInstanceWithLabel",
  "sourceCode" : "@Test\r\npublic void testListAllInstanceWithLabel() {\r\n    List<InstanceInfo> instanceInfoList = insLabelRelationDao.listAllInstanceWithLabel();\r\n    assertTrue(instanceInfoList.size() <= 0);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-public-enhancements\\linkis-instance-label-server\\src\\test\\java\\org\\apache\\linkis\\instance\\label\\dao\\InsLabelRelationDaoTest.java",
  "methodName" : "testGetInstancesByNames",
  "sourceCode" : "@Test\r\npublic void testGetInstancesByNames() {\r\n    String appName = \"testAppName\";\r\n    List<ServiceInstance> serviceInstanceList = insLabelRelationDao.getInstancesByNames(appName);\r\n    assertTrue(serviceInstanceList.size() <= 0);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-public-enhancements\\linkis-instance-label-server\\src\\test\\java\\org\\apache\\linkis\\instance\\label\\dao\\InsLabelRelationDaoTest.java",
  "methodName" : "testDropRelationsByInstanceAndLabelIds",
  "sourceCode" : "@Test\r\npublic void testDropRelationsByInstanceAndLabelIds() {\r\n    String testInstance = \"testInstance\";\r\n    List<Integer> labelIds = new ArrayList<>();\r\n    labelIds.add(1);\r\n    labelIds.add(2);\r\n    insLabelRelationDao.dropRelationsByInstanceAndLabelIds(testInstance, labelIds);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-public-enhancements\\linkis-instance-label-server\\src\\test\\java\\org\\apache\\linkis\\instance\\label\\dao\\InsLabelRelationDaoTest.java",
  "methodName" : "testDropRelationsByInstance",
  "sourceCode" : "@Test\r\npublic void testDropRelationsByInstance() {\r\n    String testInstance = \"testInstance\";\r\n    insLabelRelationDao.dropRelationsByInstance(testInstance);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-public-enhancements\\linkis-instance-label-server\\src\\test\\java\\org\\apache\\linkis\\instance\\label\\dao\\InsLabelRelationDaoTest.java",
  "methodName" : "testInsertRelations",
  "sourceCode" : "@Test\r\npublic void testInsertRelations() {\r\n    String testInstance = \"testInstance\";\r\n    List<Integer> labelIds = new ArrayList<>();\r\n    labelIds.add(1);\r\n    labelIds.add(2);\r\n    insLabelRelationDao.insertRelations(testInstance, labelIds);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-public-enhancements\\linkis-instance-label-server\\src\\test\\java\\org\\apache\\linkis\\instance\\label\\dao\\InsLabelRelationDaoTest.java",
  "methodName" : "testExistRelations",
  "sourceCode" : "@Test\r\npublic void testExistRelations() {\r\n    testInsertRelations();\r\n    Integer labelId = 1;\r\n    Integer integer = insLabelRelationDao.existRelations(1);\r\n    assertTrue(integer == 1);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-public-enhancements\\linkis-instance-label-server\\src\\test\\java\\org\\apache\\linkis\\instance\\label\\dao\\InstanceLabelDaoTest.java",
  "methodName" : "testSelectForUpdate",
  "sourceCode" : "@Test\r\npublic void testSelectForUpdate() {\r\n    InsPersistenceLabel label = new InsPersistenceLabel();\r\n    label.setLabelKey(\"testKey\");\r\n    label.setStringValue(\"testValue\");\r\n    label.setLabelValueSize(2);\r\n    label.setId(1);\r\n    instanceLabelDao.insert(label);\r\n    InsPersistenceLabel insPersistenceLabel = instanceLabelDao.selectForUpdate(1);\r\n    // assertTrue(insPersistenceLabel != null);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-public-enhancements\\linkis-instance-label-server\\src\\test\\java\\org\\apache\\linkis\\instance\\label\\dao\\InstanceLabelDaoTest.java",
  "methodName" : "testSearchForUpdate",
  "sourceCode" : "@Test\r\npublic void testSearchForUpdate() {\r\n    InsPersistenceLabel label = new InsPersistenceLabel();\r\n    label.setLabelKey(\"testKey\");\r\n    label.setStringValue(\"testValue\");\r\n    label.setLabelValueSize(2);\r\n    label.setId(1);\r\n    instanceLabelDao.insert(label);\r\n    String labelKey = \"testKey\";\r\n    String labelValue = \"testValue\";\r\n    InsPersistenceLabel insPersistenceLabel = instanceLabelDao.searchForUpdate(labelKey, labelValue);\r\n    assertTrue(insPersistenceLabel != null);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-public-enhancements\\linkis-instance-label-server\\src\\test\\java\\org\\apache\\linkis\\instance\\label\\dao\\InstanceLabelDaoTest.java",
  "methodName" : "testInsertBatch",
  "sourceCode" : "@Test\r\npublic void testInsertBatch() {\r\n    List<InsPersistenceLabel> labels = new ArrayList<>();\r\n    InsPersistenceLabel label = new InsPersistenceLabel();\r\n    label.setLabelKey(\"testKey\");\r\n    label.setStringValue(\"testValue\");\r\n    label.setLabelValueSize(2);\r\n    label.setId(1);\r\n    labels.add(label);\r\n    InsPersistenceLabel label1 = new InsPersistenceLabel();\r\n    label1.setLabelKey(\"testKey1\");\r\n    label1.setStringValue(\"testValue1\");\r\n    label1.setLabelValueSize(2);\r\n    label1.setId(2);\r\n    labels.add(label1);\r\n    instanceLabelDao.insertBatch(labels);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-public-enhancements\\linkis-instance-label-server\\src\\test\\java\\org\\apache\\linkis\\instance\\label\\dao\\InstanceLabelDaoTest.java",
  "methodName" : "testInsert",
  "sourceCode" : "@Test\r\npublic void testInsert() {\r\n    InsPersistenceLabel label = new InsPersistenceLabel();\r\n    label.setLabelKey(\"testKey\");\r\n    label.setStringValue(\"testValue\");\r\n    label.setLabelValueSize(2);\r\n    label.setId(1);\r\n    instanceLabelDao.insert(label);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-public-enhancements\\linkis-instance-label-server\\src\\test\\java\\org\\apache\\linkis\\instance\\label\\dao\\InstanceLabelDaoTest.java",
  "methodName" : "testUpdateForLock",
  "sourceCode" : "@Test\r\npublic void testUpdateForLock() {\r\n    InsPersistenceLabel label = new InsPersistenceLabel();\r\n    label.setLabelKey(\"testKey\");\r\n    label.setStringValue(\"testValue\");\r\n    label.setLabelValueSize(2);\r\n    label.setId(1);\r\n    instanceLabelDao.insert(label);\r\n    int i = instanceLabelDao.updateForLock(1);\r\n    // assertTrue(i == 1);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-public-enhancements\\linkis-instance-label-server\\src\\test\\java\\org\\apache\\linkis\\instance\\label\\dao\\InstanceLabelDaoTest.java",
  "methodName" : "testSearch",
  "sourceCode" : "@Test\r\npublic void testSearch() {\r\n    testInsert();\r\n    List<InsPersistenceLabelSearchVo> labelSearch = new ArrayList<>();\r\n    InsPersistenceLabelSearchVo insPersistenceLabelSearchVo = new InsPersistenceLabelSearchVo();\r\n    insPersistenceLabelSearchVo.setLabelKey(\"testKey\");\r\n    insPersistenceLabelSearchVo.setStringValue(\"testValue\");\r\n    labelSearch.add(insPersistenceLabelSearchVo);\r\n    List<InsPersistenceLabel> list = instanceLabelDao.search(labelSearch);\r\n    assertTrue(list.size() >= 1);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-public-enhancements\\linkis-instance-label-server\\src\\test\\java\\org\\apache\\linkis\\instance\\label\\dao\\InstanceLabelDaoTest.java",
  "methodName" : "testRemove",
  "sourceCode" : "@Test\r\npublic void testRemove() {\r\n    testInsert();\r\n    InsPersistenceLabel label = new InsPersistenceLabel();\r\n    label.setId(1);\r\n    instanceLabelDao.remove(label);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-public-enhancements\\linkis-instance-label-server\\src\\test\\java\\org\\apache\\linkis\\instance\\label\\dao\\InstanceLabelDaoTest.java",
  "methodName" : "testDoInsertKeyValues",
  "sourceCode" : "@Test\r\npublic void testDoInsertKeyValues() {\r\n    List<InsPersistenceLabelValue> keyValues = new ArrayList<>();\r\n    InsPersistenceLabelValue insPersistenceLabelValue = new InsPersistenceLabelValue();\r\n    insPersistenceLabelValue.setLabelId(1);\r\n    insPersistenceLabelValue.setValueKey(\"testValueKey\");\r\n    insPersistenceLabelValue.setValueContent(\"testValueContent\");\r\n    keyValues.add(insPersistenceLabelValue);\r\n    instanceLabelDao.doInsertKeyValues(keyValues);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-public-enhancements\\linkis-instance-label-server\\src\\test\\java\\org\\apache\\linkis\\instance\\label\\dao\\InstanceLabelDaoTest.java",
  "methodName" : "testDoRemoveKeyValues",
  "sourceCode" : "@Test\r\npublic void testDoRemoveKeyValues() {\r\n    testDoInsertKeyValues();\r\n    instanceLabelDao.doRemoveKeyValues(1);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-public-enhancements\\linkis-instance-label-server\\src\\test\\java\\org\\apache\\linkis\\instance\\label\\dao\\InstanceLabelDaoTest.java",
  "methodName" : "testDoRemoveKeyValuesBatch",
  "sourceCode" : "@Test\r\npublic void testDoRemoveKeyValuesBatch() {\r\n    List<Integer> labelIds = new ArrayList<>();\r\n    labelIds.add(1);\r\n    instanceLabelDao.doRemoveKeyValuesBatch(labelIds);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-public-enhancements\\linkis-instance-label-server\\src\\test\\java\\org\\apache\\linkis\\instance\\label\\service\\impl\\DefaultInsLabelServiceTest.java",
  "methodName" : "testRemoveLabelsFromInstance",
  "sourceCode" : "@Test\r\npublic void testRemoveLabelsFromInstance() throws Exception {\r\n    // TODO: Test goes here...\r\n    List<InsPersistenceLabel> labelsCandidateRemoved = new ArrayList<>();\r\n    InsPersistenceLabel insPersistenceLabel = new InsPersistenceLabel();\r\n    insPersistenceLabel.setId(1);\r\n    insPersistenceLabel.setLabelKey(\"testLabelKey\");\r\n    insPersistenceLabel.setStringValue(\"testStringValue\");\r\n    labelsCandidateRemoved.add(insPersistenceLabel);\r\n    ServiceInstance serviceInstance = new ServiceInstance();\r\n    serviceInstance.setInstance(\"testInstance\");\r\n    serviceInstance.setApplicationName(\"testApplicationName\");\r\n    Mockito.when(insLabelRelationDao.searchLabelsByInstance(serviceInstance.getInstance())).thenReturn(labelsCandidateRemoved);\r\n    Mockito.doNothing().when(insLabelRelationDao).dropRelationsByInstance(serviceInstance.getInstance());\r\n    defaultInsLabelService.removeLabelsFromInstance(serviceInstance);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-public-enhancements\\linkis-instance-label-server\\src\\test\\java\\org\\apache\\linkis\\instance\\label\\service\\impl\\DefaultInsLabelServiceTest.java",
  "methodName" : "testListAllInstanceWithLabel",
  "sourceCode" : "@Test\r\npublic void testListAllInstanceWithLabel() throws Exception {\r\n    // TODO: Test goes here...\r\n    List<InstanceInfo> list = new ArrayList<>();\r\n    InstanceInfo instanceInfo = new InstanceInfo();\r\n    instanceInfo.setInstance(\"testInstance\");\r\n    instanceInfo.setApplicationName(\"testApplicationName\");\r\n    instanceInfo.setId(1);\r\n    list.add(instanceInfo);\r\n    Mockito.when(defaultInsLabelService.listAllInstanceWithLabel()).thenReturn(list);\r\n    List<InstanceInfo> list1 = defaultInsLabelService.listAllInstanceWithLabel();\r\n    assertTrue(list.equals(list1));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-public-enhancements\\linkis-instance-label-server\\src\\test\\java\\org\\apache\\linkis\\instance\\label\\service\\impl\\DefaultInsLabelServiceTest.java",
  "methodName" : "testGetInstancesByNames",
  "sourceCode" : "@Test\r\npublic void testGetInstancesByNames() throws Exception {\r\n    // TODO: Test goes here...\r\n    String appName = \"testApplicationName\";\r\n    List<ServiceInstance> list = new ArrayList<>();\r\n    ServiceInstance serviceInstance = new ServiceInstance();\r\n    serviceInstance.setInstance(\"testInstance\");\r\n    serviceInstance.setApplicationName(\"testApplicationName\");\r\n    list.add(serviceInstance);\r\n    Mockito.when(insLabelRelationDao.getInstancesByNames(appName)).thenReturn(list);\r\n    List<ServiceInstance> list1 = defaultInsLabelService.getInstancesByNames(appName);\r\n    assertTrue(list.equals(list1));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-public-enhancements\\linkis-instance-label-server\\src\\test\\java\\org\\apache\\linkis\\instance\\label\\service\\impl\\DefaultInsLabelServiceTest.java",
  "methodName" : "testRemoveInstance",
  "sourceCode" : "@Test\r\npublic void testRemoveInstance() throws Exception {\r\n    // TODO: Test goes here...\r\n    ServiceInstance serviceInstance = new ServiceInstance();\r\n    serviceInstance.setInstance(\"testInstance\");\r\n    Mockito.doNothing().when(instanceInfoDao).removeInstance(serviceInstance);\r\n    defaultInsLabelService.removeInstance(serviceInstance);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-public-enhancements\\linkis-instance-label-server\\src\\test\\java\\org\\apache\\linkis\\instance\\label\\service\\impl\\DefaultInsLabelServiceTest.java",
  "methodName" : "testGetInstanceInfoByServiceInstance",
  "sourceCode" : "@Test\r\npublic void testGetInstanceInfoByServiceInstance() throws Exception {\r\n    // TODO: Test goes here...\r\n    InstanceInfo instanceInfo = new InstanceInfo();\r\n    instanceInfo.setInstance(\"testInstance\");\r\n    instanceInfo.setApplicationName(\"testApplicationName\");\r\n    instanceInfo.setId(1);\r\n    ServiceInstance serviceInstance = new ServiceInstance();\r\n    serviceInstance.setInstance(\"testInstance\");\r\n    serviceInstance.setApplicationName(\"testApplicationName\");\r\n    Mockito.when(instanceInfoDao.getInstanceInfoByServiceInstance(serviceInstance)).thenReturn(instanceInfo);\r\n    InstanceInfo instanceInfo1 = defaultInsLabelService.getInstanceInfoByServiceInstance(serviceInstance);\r\n    assertTrue(instanceInfo1.equals(instanceInfo));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-public-enhancements\\linkis-instance-label-server\\src\\test\\java\\org\\apache\\linkis\\instance\\label\\service\\impl\\DefaultInsLabelServiceTest.java",
  "methodName" : "testUpdateInstance",
  "sourceCode" : "@Test\r\npublic void testUpdateInstance() throws Exception {\r\n    // TODO: Test goes here...\r\n    InstanceInfo instanceInfo = new InstanceInfo();\r\n    instanceInfo.setInstance(\"testInstance1\");\r\n    instanceInfo.setApplicationName(\"testApplicationName1\");\r\n    instanceInfo.setId(1);\r\n    Mockito.doNothing().when(instanceInfoDao).updateInstance(instanceInfo);\r\n    defaultInsLabelService.updateInstance(instanceInfo);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-public-enhancements\\linkis-instance-label-server\\src\\test\\java\\org\\apache\\linkis\\instance\\label\\utils\\EntityParserTest.java",
  "methodName" : "testParseToInstanceVoInstanceInfo",
  "sourceCode" : "@Test\r\npublic void testParseToInstanceVoInstanceInfo() throws Exception {\r\n    // TODO: Test goes here...\r\n    InstanceInfo instanceInfo = new InstanceInfo();\r\n    instanceInfo.setId(1);\r\n    instanceInfo.setInstance(\"testInstance\");\r\n    instanceInfo.setApplicationName(\"testApplicationName\");\r\n    InstanceInfoVo instanceInfoVo = EntityParser.parseToInstanceVo(instanceInfo);\r\n    assertTrue(instanceInfoVo.getInstance().equals(instanceInfo.getInstance()));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-public-enhancements\\linkis-instance-label-server\\src\\test\\java\\org\\apache\\linkis\\instance\\label\\utils\\EntityParserTest.java",
  "methodName" : "testParseToInstanceVoInstanceInfos",
  "sourceCode" : "@Test\r\npublic void testParseToInstanceVoInstanceInfos() throws Exception {\r\n    // TODO: Test goes here...\r\n    List<InstanceInfo> list = new ArrayList<>();\r\n    InstanceInfo instanceInfo = new InstanceInfo();\r\n    instanceInfo.setId(1);\r\n    instanceInfo.setInstance(\"testInstance\");\r\n    instanceInfo.setApplicationName(\"testApplicationName\");\r\n    list.add(instanceInfo);\r\n    List<InstanceInfoVo> instanceInfoVoList = EntityParser.parseToInstanceVo(list);\r\n    assertTrue(list.get(0).getInstance().equals(instanceInfoVoList.get(0).getInstance()));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-public-enhancements\\linkis-jobhistory\\src\\test\\java\\org\\apache\\linkis\\jobhistory\\dao\\JobHistoryMapperTest.java",
  "methodName" : "selectJobHistoryTest",
  "sourceCode" : "@Test\r\n@DisplayName(\"selectJobHistoryTest\")\r\npublic void selectJobHistoryTest() {\r\n    JobHistory jobHistory = new JobHistory();\r\n    jobHistory.setId(1L);\r\n    List<JobHistory> histories = jobHistoryMapper.selectJobHistory(jobHistory);\r\n    Assertions.assertTrue(histories.size() > 0);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-public-enhancements\\linkis-jobhistory\\src\\test\\java\\org\\apache\\linkis\\jobhistory\\dao\\JobHistoryMapperTest.java",
  "methodName" : "insertJobHistoryTest",
  "sourceCode" : "@Test\r\n@DisplayName(\"insertJobHistoryTest\")\r\npublic void insertJobHistoryTest() {\r\n    JobHistory jobHistory = createJobHistory();\r\n    jobHistoryMapper.insertJobHistory(jobHistory);\r\n    List<JobHistory> histories = jobHistoryMapper.selectJobHistory(jobHistory);\r\n    Assertions.assertTrue(histories.size() == 1);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-public-enhancements\\linkis-jobhistory\\src\\test\\java\\org\\apache\\linkis\\jobhistory\\dao\\JobHistoryMapperTest.java",
  "methodName" : "updateJobHistoryTest",
  "sourceCode" : "@Test\r\n@DisplayName(\"updateJobHistoryTest\")\r\npublic void updateJobHistoryTest() {\r\n    JobHistory jobHistory = createJobHistory();\r\n    jobHistory.setId(1L);\r\n    jobHistoryMapper.updateJobHistory(jobHistory);\r\n    List<JobHistory> histories = jobHistoryMapper.selectJobHistory(jobHistory);\r\n    Assertions.assertEquals(\"LINKISCLI_hadoop_spark_1\", histories.get(0).getJobReqId());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-public-enhancements\\linkis-jobhistory\\src\\test\\java\\org\\apache\\linkis\\jobhistory\\dao\\JobHistoryMapperTest.java",
  "methodName" : "searchWithIdOrderAscTest",
  "sourceCode" : "@Test\r\n@DisplayName(\"searchWithIdOrderAscTest\")\r\npublic void searchWithIdOrderAscTest() {\r\n    List<String> status = new ArrayList<>();\r\n    status.add(\"Succeed\");\r\n    Date eDate = new Date(System.currentTimeMillis());\r\n    Date sDate = DateUtils.addDays(eDate, -1);\r\n    List<Integer> histories = jobHistoryMapper.searchWithIdOrderAsc(sDate, eDate, 1L, status);\r\n    Assertions.assertTrue(histories.isEmpty());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-public-enhancements\\linkis-jobhistory\\src\\test\\java\\org\\apache\\linkis\\jobhistory\\dao\\JobHistoryMapperTest.java",
  "methodName" : "searchTest",
  "sourceCode" : "@Test\r\n@DisplayName(\"searchTest\")\r\npublic void searchTest() {\r\n    List<String> status = new ArrayList<>();\r\n    status.add(\"Succeed\");\r\n    List<JobHistory> histories = jobHistoryMapper.search(1L, \"hadoop\", status, null, null, \"spark\", 1L, null, null, null);\r\n    Assertions.assertTrue(histories.size() > 0);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-public-enhancements\\linkis-jobhistory\\src\\test\\java\\org\\apache\\linkis\\jobhistory\\dao\\JobHistoryMapperTest.java",
  "methodName" : "searchWithUserCreatorTest",
  "sourceCode" : "@Test\r\n@DisplayName(\"searchWithUserCreatorTest\")\r\npublic void searchWithUserCreatorTest() {\r\n    List<String> status = new ArrayList<>();\r\n    status.add(\"Succeed\");\r\n    List<JobHistory> histories = jobHistoryMapper.searchWithUserCreator(1L, \"hadoop\", null, null, status, null, null, \"spark\", 1L, null, null, null);\r\n    Assertions.assertTrue(histories.size() > 0);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-public-enhancements\\linkis-jobhistory\\src\\test\\java\\org\\apache\\linkis\\jobhistory\\dao\\JobHistoryMapperTest.java",
  "methodName" : "searchWithCreatorOnlyTest",
  "sourceCode" : "@Test\r\n@DisplayName(\"searchWithCreatorOnlyTest\")\r\npublic void searchWithCreatorOnlyTest() {\r\n    List<String> status = new ArrayList<>();\r\n    status.add(\"Succeed\");\r\n    List<JobHistory> histories = jobHistoryMapper.searchWithCreatorOnly(1L, \"hadoop\", null, \"hadoop\", status, null, null, \"spark\", 1L, null, null, null);\r\n    Assertions.assertTrue(histories.size() > 0);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-public-enhancements\\linkis-jobhistory\\src\\test\\java\\org\\apache\\linkis\\jobhistory\\dao\\JobHistoryMapperTest.java",
  "methodName" : "countUndoneTaskNoCreatorTest",
  "sourceCode" : "@Test\r\n@DisplayName(\"countUndoneTaskNoCreatorTest\")\r\npublic void countUndoneTaskNoCreatorTest() {\r\n    List<String> status = new ArrayList<>();\r\n    status.add(\"Succeed\");\r\n    Integer counts = jobHistoryMapper.countUndoneTaskNoCreator(\"hadoop\", status, null, null, \"spark\", 1L);\r\n    Assertions.assertTrue(counts.intValue() > 0);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-public-enhancements\\linkis-jobhistory\\src\\test\\java\\org\\apache\\linkis\\jobhistory\\dao\\JobHistoryMapperTest.java",
  "methodName" : "countUndoneTaskWithUserCreatorTest",
  "sourceCode" : "@Test\r\n@DisplayName(\"countUndoneTaskWithUserCreatorTest\")\r\npublic void countUndoneTaskWithUserCreatorTest() {\r\n    List<String> status = new ArrayList<>();\r\n    status.add(\"Succeed\");\r\n    Integer counts = jobHistoryMapper.countUndoneTaskWithUserCreator(\"hadoop\", null, \"hadoop\", status, null, null, \"spark\", 1L);\r\n    Assertions.assertTrue(counts.intValue() > 0);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-public-enhancements\\linkis-jobhistory\\src\\test\\java\\org\\apache\\linkis\\jobhistory\\dao\\JobHistoryMapperTest.java",
  "methodName" : "selectJobHistoryStatusForUpdateTest",
  "sourceCode" : "@Test\r\n@DisplayName(\"selectJobHistoryStatusForUpdateTest\")\r\npublic void selectJobHistoryStatusForUpdateTest() {\r\n    String status = jobHistoryMapper.selectJobHistoryStatusForUpdate(1L);\r\n    Assertions.assertEquals(\"Succeed\", status);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-public-enhancements\\linkis-jobhistory\\src\\test\\java\\org\\apache\\linkis\\jobhistory\\entity\\JobHistoryTest.java",
  "methodName" : "testGetUpdateTimeMills",
  "sourceCode" : "@Test\r\n@DisplayName(\"Method description: ...\")\r\npublic void testGetUpdateTimeMills() throws Exception {\r\n    // 2022-02-02 02:02:02.000\r\n    long time = 1643738522000L;\r\n    // String timestr = \"2022-02-02 02:02:02.000\";\r\n    JobHistory jobHistory = new JobHistory();\r\n    Date date = new Date(time);\r\n    jobHistory.setCreatedTime(date);\r\n    jobHistory.setUpdatedTime(date);\r\n    SimpleDateFormat dateFormat = new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss.SSS\");\r\n    String expectedStr = dateFormat.format(date);\r\n    assertEquals(expectedStr, jobHistory.getUpdateTimeMills());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-public-enhancements\\linkis-jobhistory\\src\\test\\java\\org\\apache\\linkis\\jobhistory\\service\\JobHistoryDetailQueryServiceTest.java",
  "methodName" : "testAdd",
  "sourceCode" : "@Test\r\nvoid testAdd() {\r\n    JobDetailReqInsert reqInsert = new JobDetailReqInsert(buildSubJobInfo());\r\n    JobRespProtocol jobRespProtocol = service.add(reqInsert);\r\n    assertEquals(jobRespProtocol.getStatus(), 0);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-public-enhancements\\linkis-jobhistory\\src\\test\\java\\org\\apache\\linkis\\jobhistory\\service\\JobHistoryDetailQueryServiceTest.java",
  "methodName" : "testChange",
  "sourceCode" : "@Test\r\nvoid testChange() {\r\n    JobDetailReqUpdate jobDetailReqUpdate = new JobDetailReqUpdate(buildSubJobInfo());\r\n    JobRespProtocol jobRespProtocol = service.change(jobDetailReqUpdate);\r\n    assertEquals(jobRespProtocol.getStatus(), 0);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-public-enhancements\\linkis-jobhistory\\src\\test\\java\\org\\apache\\linkis\\jobhistory\\service\\JobHistoryDetailQueryServiceTest.java",
  "methodName" : "testBatchChange",
  "sourceCode" : "@Test\r\nvoid testBatchChange() {\r\n    ArrayList list = new ArrayList<SubJobInfo>();\r\n    list.add(buildSubJobInfo());\r\n    list.add(buildSubJobInfo());\r\n    JobDetailReqBatchUpdate jobDetailReqBatchUpdate = new JobDetailReqBatchUpdate(list);\r\n    ArrayList<JobRespProtocol> jobRespProtocolArrayList = service.batchChange(jobDetailReqBatchUpdate);\r\n    // list is matched with the predicate of stream for assertion judgment\r\n    Predicate<JobRespProtocol> statusPrecate = e -> e.getStatus() == 0;\r\n    assertEquals(2, jobRespProtocolArrayList.size());\r\n    assertTrue(jobRespProtocolArrayList.stream().anyMatch(statusPrecate));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-public-enhancements\\linkis-jobhistory\\src\\test\\java\\org\\apache\\linkis\\jobhistory\\service\\JobHistoryDetailQueryServiceTest.java",
  "methodName" : "testQuery",
  "sourceCode" : "@Test\r\nvoid testQuery() {\r\n    SubJobDetail subJobDetail = new SubJobDetail();\r\n    subJobDetail.setId(0L);\r\n    subJobDetail.setJobGroupId(0L);\r\n    subJobDetail.setResultLocation(\"\");\r\n    subJobDetail.setResultSize(0);\r\n    subJobDetail.setExecutionContent(\"\");\r\n    subJobDetail.setJobGroupInfo(\"\");\r\n    subJobDetail.setCreatedTime(new Date());\r\n    subJobDetail.setUpdatedTime(new Date());\r\n    subJobDetail.setStatus(\"\");\r\n    subJobDetail.setPriority(0);\r\n    JobDetailReqQuery jobDetailReqQuery = new JobDetailReqQuery(subJobDetail);\r\n    JobRespProtocol jobRespProtocol = service.query(jobDetailReqQuery);\r\n    assertEquals(jobRespProtocol.getStatus(), 0);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-public-enhancements\\linkis-jobhistory\\src\\test\\java\\org\\apache\\linkis\\jobhistory\\service\\JobHistoryDetailQueryServiceTest.java",
  "methodName" : "testUserCreatorLabel",
  "sourceCode" : "@Test\r\nvoid testUserCreatorLabel() {\r\n    UserCreatorLabel fakeLabel = new UserCreatorLabel();\r\n    fakeLabel.setUser(\"user\");\r\n    fakeLabel.setCreator(\"creator\");\r\n    String userCreator = fakeLabel.getStringValue();\r\n    assertEquals(userCreator, \"user-creator\");\r\n    assertEquals(fakeLabel.getLabelKey(), \"userCreator\");\r\n    try {\r\n        assertDoesNotThrow(() -> fakeLabel.valueCheck(fakeLabel.getStringValue()));\r\n        assertThrows(Exception.class, () -> fakeLabel.valueCheck(\"fake-label-error\"));\r\n    } catch (Exception e) {\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-public-enhancements\\linkis-jobhistory\\src\\test\\java\\org\\apache\\linkis\\jobhistory\\service\\JobHistoryQueryServiceTest.java",
  "methodName" : "addTest",
  "sourceCode" : "@Test\r\n@DisplayName(\"addTest\")\r\npublic void addTest() {\r\n    JobReqInsert jobReqInsert = new JobReqInsert(createJobRequest());\r\n    JobRespProtocol jobRespProtocol = jobRequestQueryService.add(jobReqInsert);\r\n    Assertions.assertNotNull(jobRespProtocol);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-public-enhancements\\linkis-jobhistory\\src\\test\\java\\org\\apache\\linkis\\jobhistory\\service\\JobHistoryQueryServiceTest.java",
  "methodName" : "changeTest",
  "sourceCode" : "@Test\r\n@DisplayName(\"changeTest\")\r\npublic void changeTest() {\r\n    JobReqUpdate jobReqUpdate = new JobReqUpdate(createJobRequest());\r\n    JobRespProtocol jobRespProtocol = jobRequestQueryService.change(jobReqUpdate);\r\n    Assertions.assertNotNull(jobRespProtocol);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-public-enhancements\\linkis-jobhistory\\src\\test\\java\\org\\apache\\linkis\\jobhistory\\service\\JobHistoryQueryServiceTest.java",
  "methodName" : "batchChangeTest",
  "sourceCode" : "@Test\r\n@DisplayName(\"batchChangeTest\")\r\npublic void batchChangeTest() {\r\n    JobReqBatchUpdate jobReqBatchUpdate = new JobReqBatchUpdate(new ArrayList<>(Arrays.asList(createJobRequest())));\r\n    ArrayList<JobRespProtocol> protocols = jobRequestQueryService.batchChange(jobReqBatchUpdate);\r\n    Assertions.assertTrue(protocols.size() > 0);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-public-enhancements\\linkis-jobhistory\\src\\test\\java\\org\\apache\\linkis\\jobhistory\\service\\JobHistoryQueryServiceTest.java",
  "methodName" : "queryTest",
  "sourceCode" : "@Test\r\n@DisplayName(\"queryTest\")\r\npublic void queryTest() {\r\n    JobReqQuery jobReqQuery = new JobReqQuery(createJobRequest());\r\n    JobRespProtocol jobRespProtocol = jobRequestQueryService.query(jobReqQuery);\r\n    Assertions.assertNotNull(jobRespProtocol);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-public-enhancements\\linkis-jobhistory\\src\\test\\java\\org\\apache\\linkis\\jobhistory\\service\\JobHistoryQueryServiceTest.java",
  "methodName" : "getJobHistoryByIdAndNameTest",
  "sourceCode" : "@Test\r\n@DisplayName(\"getJobHistoryByIdAndNameTest\")\r\npublic void getJobHistoryByIdAndNameTest() {\r\n    JobHistory history = jobRequestQueryService.getJobHistoryByIdAndName(1L, \"hadoop\");\r\n    Assertions.assertNull(history);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-public-enhancements\\linkis-jobhistory\\src\\test\\java\\org\\apache\\linkis\\jobhistory\\service\\JobHistoryQueryServiceTest.java",
  "methodName" : "searchTest",
  "sourceCode" : "@Test\r\n@DisplayName(\"searchTest\")\r\npublic void searchTest() {\r\n    List<JobHistory> histories = jobRequestQueryService.search(1L, \"hadoop\", \"hadoop\", \"Succeed\", new Date(), new Date(), \"spark\", 1L, null, null, null);\r\n    Assertions.assertTrue(histories.size() == 0);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-public-enhancements\\linkis-jobhistory\\src\\test\\java\\org\\apache\\linkis\\jobhistory\\service\\JobHistoryQueryServiceTest.java",
  "methodName" : "countUndoneTasksTest",
  "sourceCode" : "@Test\r\n@DisplayName(\"countUndoneTasksTest\")\r\npublic void countUndoneTasksTest() {\r\n    Integer counts = jobRequestQueryService.countUndoneTasks(\"hadoop\", \"hadoop\", new Date(), new Date(), \"spark\", 1L);\r\n    Assertions.assertTrue(counts.intValue() == 0);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-public-enhancements\\linkis-jobhistory\\src\\test\\java\\org\\apache\\linkis\\jobhistory\\service\\JobHistoryQueryServiceTest.java",
  "methodName" : "searchOneTest",
  "sourceCode" : "@Test\r\n@DisplayName(\"searchOneTest\")\r\npublic void searchOneTest() {\r\n    JobHistory jobHistory = jobRequestQueryService.searchOne(1L, new Date(), new Date());\r\n    Assertions.assertNotNull(jobHistory);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-public-enhancements\\linkis-pes-publicservice\\src\\test\\java\\org\\apache\\linkis\\filesystem\\conf\\WorkSpaceConfigurationTest.java",
  "methodName" : "staticCommonConst",
  "sourceCode" : "@Test\r\n@DisplayName(\"staticCommonConst\")\r\npublic void staticCommonConst() {\r\n    String localUserRootPath = WorkSpaceConfiguration.LOCAL_USER_ROOT_PATH.getValue();\r\n    String hdfsUserRootPathPrefix = WorkSpaceConfiguration.HDFS_USER_ROOT_PATH_PREFIX.getValue();\r\n    String hdfsUserRootPathSuffix = WorkSpaceConfiguration.HDFS_USER_ROOT_PATH_SUFFIX.getValue();\r\n    Boolean resultSetDownloadIsLimit = WorkSpaceConfiguration.RESULT_SET_DOWNLOAD_IS_LIMIT.getValue();\r\n    Integer resultSetDownloadMaxSizeCsv = WorkSpaceConfiguration.RESULT_SET_DOWNLOAD_MAX_SIZE_CSV.getValue();\r\n    Integer resultSetDownloadMaxSizeExecl = WorkSpaceConfiguration.RESULT_SET_DOWNLOAD_MAX_SIZE_EXCEL.getValue();\r\n    Long fileSystemGetTimeOut = WorkSpaceConfiguration.FILESYSTEM_GET_TIMEOUT.getValue();\r\n    Integer fileSystemFsThreadNum = WorkSpaceConfiguration.FILESYSTEM_FS_THREAD_NUM.getValue();\r\n    Integer fileSystemFsThreadCache = WorkSpaceConfiguration.FILESYSTEM_FS_THREAD_CACHE.getValue();\r\n    Boolean filesystemPathCheckTrigger = WorkSpaceConfiguration.FILESYSTEM_PATH_CHECK_TRIGGER.getValue();\r\n    Boolean filesystemPathCheckOwner = WorkSpaceConfiguration.FILESYSTEM_PATH_CHECK_OWNER.getValue();\r\n    Boolean filesystemPathAutoCreate = WorkSpaceConfiguration.FILESYSTEM_PATH_AUTO_CREATE.getValue();\r\n    Long localFilesystemUserRefreshInterval = WorkSpaceConfiguration.LOCAL_FILESYSTEM_USER_REFRESH_INTERVAL.getValue();\r\n    Boolean enableUserGroup = WorkSpaceConfiguration.ENABLE_USER_GROUP.getValue();\r\n    Assertions.assertNotNull(localUserRootPath);\r\n    Assertions.assertNotNull(hdfsUserRootPathPrefix);\r\n    Assertions.assertNotNull(hdfsUserRootPathSuffix);\r\n    Assertions.assertTrue(resultSetDownloadIsLimit.booleanValue());\r\n    Assertions.assertTrue(resultSetDownloadMaxSizeCsv.intValue() == 5000);\r\n    Assertions.assertTrue(resultSetDownloadMaxSizeExecl == 5000);\r\n    Assertions.assertTrue(fileSystemGetTimeOut == 10000L);\r\n    Assertions.assertTrue(fileSystemFsThreadNum == 10);\r\n    Assertions.assertTrue(fileSystemFsThreadCache == 1000);\r\n    Assertions.assertFalse(filesystemPathCheckTrigger);\r\n    Assertions.assertFalse(filesystemPathCheckOwner.booleanValue());\r\n    Assertions.assertFalse(filesystemPathAutoCreate.booleanValue());\r\n    Assertions.assertTrue(localFilesystemUserRefreshInterval == 1800000L);\r\n    Assertions.assertTrue(enableUserGroup.booleanValue());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-public-enhancements\\linkis-pes-publicservice\\src\\test\\java\\org\\apache\\linkis\\filesystem\\constant\\WorkSpaceConstantsTest.java",
  "methodName" : "staticCommonConst",
  "sourceCode" : "@Test\r\n@DisplayName(\"staticCommonConst\")\r\npublic void staticCommonConst() {\r\n    String xlsxResponseContentType = WorkSpaceConstants.XLSX_RESPONSE_CONTENT_TYPE;\r\n    String defaultDateType = WorkSpaceConstants.DEFAULT_DATE_TYPE;\r\n    String localReturnType = WorkSpaceConstants.LOCAL_RETURN_TYPE;\r\n    String blank = WorkSpaceConstants.BLANK;\r\n    Assertions.assertNotNull(xlsxResponseContentType);\r\n    Assertions.assertNotNull(defaultDateType);\r\n    Assertions.assertNotNull(localReturnType);\r\n    Assertions.assertNotNull(blank);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-public-enhancements\\linkis-pes-publicservice\\src\\test\\java\\org\\apache\\linkis\\filesystem\\exception\\WorkspaceExceptionManagerTest.java",
  "methodName" : "createExceptionTest",
  "sourceCode" : "@Test\r\n@DisplayName(\"createExceptionTest\")\r\npublic void createExceptionTest() {\r\n    WorkSpaceException exception = WorkspaceExceptionManager.createException(80021, \"\");\r\n    Assertions.assertTrue(80021 == exception.getErrCode());\r\n    Assertions.assertNotNull(exception.getDesc());\r\n    Exception nullPointerException = Assertions.assertThrows(NullPointerException.class, () -> WorkspaceExceptionManager.createException(8002100, \"\"));\r\n    LOG.info(\"assertThrows pass, the error message: {} \", nullPointerException.getMessage());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-public-enhancements\\linkis-pes-publicservice\\src\\test\\java\\org\\apache\\linkis\\filesystem\\exception\\WorkSpaceExceptionTest.java",
  "methodName" : "workSpaceExceptionTest",
  "sourceCode" : "@Test\r\n@DisplayName(\"workSpaceExceptionTest\")\r\npublic void workSpaceExceptionTest() {\r\n    int errorCode = 80001;\r\n    String errorMsg = \"Requesting IO-Engine to initialize fileSystem failed!(请求IO-Engine初始化fileSystem失败！)\";\r\n    String ip = \"127.0.0.1\";\r\n    int port = 8081;\r\n    String serviceKind = \"ps-service\";\r\n    WorkSpaceException workSpaceException = new WorkSpaceException(errorCode, errorMsg);\r\n    Assertions.assertTrue(errorCode == workSpaceException.getErrCode());\r\n    Assertions.assertEquals(errorMsg, workSpaceException.getDesc());\r\n    WorkSpaceException spaceException = new WorkSpaceException(errorCode, errorMsg, ip, port, serviceKind);\r\n    Assertions.assertEquals(ip, spaceException.getIp());\r\n    Assertions.assertTrue(port == spaceException.getPort());\r\n    Assertions.assertEquals(serviceKind, spaceException.getServiceKind());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-public-enhancements\\linkis-pes-publicservice\\src\\test\\java\\org\\apache\\linkis\\filesystem\\restful\\api\\BMLFsRestfulApiTest.java",
  "methodName" : "openScriptFromBMLTest",
  "sourceCode" : "@Test\r\n@DisplayName(\"openScriptFromBMLTest\")\r\npublic void openScriptFromBMLTest() throws Exception {\r\n    String querySql = this.getClass().getResource(\"/\").getPath() + \"/query.sql\";\r\n    Map<String, Object> query = new HashMap<>();\r\n    InputStream is = new FileInputStream(new File(querySql));\r\n    query.put(\"stream\", is);\r\n    query.put(\"name\", \"hadoop\");\r\n    Mockito.when(bmlHelper.query(\"hadoop\", \"1\", \"1\")).thenReturn(query);\r\n    MvcResult mvcResult = mockMvc.perform(get(\"/filesystem/openScriptFromBML\").param(\"fileName\", querySql).param(\"resourceId\", \"1\").param(\"version\", \"1\")).andExpect(status().isOk()).andExpect(content().contentType(MediaType.APPLICATION_JSON)).andReturn();\r\n    Message res = JsonUtils.jackson().readValue(mvcResult.getResponse().getContentAsString(), Message.class);\r\n    assertEquals(MessageStatus.SUCCESS(), res.getStatus());\r\n    LOG.info(mvcResult.getResponse().getContentAsString());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-public-enhancements\\linkis-pes-publicservice\\src\\test\\java\\org\\apache\\linkis\\filesystem\\restful\\api\\BMLFsRestfulApiTest.java",
  "methodName" : "openScriptFromProductBMLTest",
  "sourceCode" : "@Test\r\n@DisplayName(\"openScriptFromProductBMLTest\")\r\npublic void openScriptFromProductBMLTest() throws Exception {\r\n    String querySql = this.getClass().getResource(\"/\").getPath() + \"/query.sql\";\r\n    Map<String, Object> query = new HashMap<>();\r\n    InputStream is = new FileInputStream(new File(querySql));\r\n    query.put(\"stream\", is);\r\n    query.put(\"name\", \"hadoop\");\r\n    Mockito.when(bmlHelper.query(\"hadoop\", \"1\", \"1\")).thenReturn(query);\r\n    MvcResult mvcResult = mockMvc.perform(get(\"/filesystem/product/openScriptFromBML\").param(\"fileName\", querySql).param(\"resourceId\", \"1\").param(\"version\", \"1\")).andExpect(status().isOk()).andExpect(content().contentType(MediaType.APPLICATION_JSON)).andReturn();\r\n    Message res = JsonUtils.jackson().readValue(mvcResult.getResponse().getContentAsString(), Message.class);\r\n    assertEquals(MessageStatus.SUCCESS(), res.getStatus());\r\n    LOG.info(mvcResult.getResponse().getContentAsString());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-public-enhancements\\linkis-pes-publicservice\\src\\test\\java\\org\\apache\\linkis\\filesystem\\util\\WorkspaceUtilTest.java",
  "methodName" : "staticCommonConstTest",
  "sourceCode" : "@Test\r\n@DisplayName(\"staticCommonConstTest\")\r\npublic void staticCommonConstTest() {\r\n    String infoReg = WorkspaceUtil.infoReg;\r\n    String allReg = WorkspaceUtil.allReg;\r\n    String errorReg = WorkspaceUtil.errorReg;\r\n    String warnReg = WorkspaceUtil.warnReg;\r\n    Assertions.assertNotNull(infoReg);\r\n    Assertions.assertNotNull(allReg);\r\n    Assertions.assertNotNull(errorReg);\r\n    Assertions.assertNotNull(warnReg);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-public-enhancements\\linkis-pes-publicservice\\src\\test\\java\\org\\apache\\linkis\\filesystem\\util\\WorkspaceUtilTest.java",
  "methodName" : "logMatchTest",
  "sourceCode" : "@Test\r\n@DisplayName(\"logMatchTest\")\r\npublic void logMatchTest() {\r\n    String code = \"2022-09-18 01:03:35.120 INFO  [SpringContextShutdownHook] com.netflix.util.concurrent.ShutdownEnabledTimer 67 cancel - Shutdown hook removed for: NFLoadBalancer-PingTimer-linkis-cg-linkismanager\";\r\n    LogLevel logLevel = new LogLevel(LogLevel.Type.INFO);\r\n    List<Integer> logMatch = WorkspaceUtil.logMatch(code, logLevel);\r\n    Assertions.assertTrue(logMatch.size() == 2);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-public-enhancements\\linkis-pes-publicservice\\src\\test\\java\\org\\apache\\linkis\\filesystem\\util\\WorkspaceUtilTest.java",
  "methodName" : "suffixTuningTest",
  "sourceCode" : "@Test\r\n@DisplayName(\"suffixTuningTest\")\r\npublic void suffixTuningTest() {\r\n    String path = \"/home/hadoop/logs/linkis/apps\";\r\n    String tuningPath = WorkspaceUtil.suffixTuning(path);\r\n    Assertions.assertNotNull(tuningPath);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-public-enhancements\\linkis-ps-common-lock\\src\\test\\java\\org\\apache\\linkis\\publicservice\\common\\lock\\dao\\CommonLockMapperTest.java",
  "methodName" : "getAllTest",
  "sourceCode" : "@Test\r\n@DisplayName(\"getAll\")\r\npublic void getAllTest() {\r\n    List<CommonLock> locks = commonLockMapper.getAll();\r\n    Assertions.assertTrue(locks.size() == 1);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-public-enhancements\\linkis-ps-common-lock\\src\\test\\java\\org\\apache\\linkis\\publicservice\\common\\lock\\dao\\CommonLockMapperTest.java",
  "methodName" : "reentrantLockTest",
  "sourceCode" : "@Test\r\n@DisplayName(\"reentrantLockTest\")\r\npublic void reentrantLockTest() {\r\n    String lockObject = \"hadoop-warehouse4\";\r\n    CommonLock commonLock = new CommonLock();\r\n    commonLock.setLockObject(lockObject);\r\n    commonLock.setLocker(\"test\");\r\n    Boolean lock = reentrantLock(commonLock);\r\n    Assertions.assertTrue(lock);\r\n    lock = reentrantLock(commonLock);\r\n    Assertions.assertTrue(lock);\r\n    commonLock.setLocker(\"test1\");\r\n    lock = reentrantLock(commonLock);\r\n    Assertions.assertFalse(lock);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-public-enhancements\\linkis-ps-common-lock\\src\\test\\java\\org\\apache\\linkis\\publicservice\\common\\lock\\dao\\CommonLockMapperTest.java",
  "methodName" : "unlockTest",
  "sourceCode" : "@Test\r\n@DisplayName(\"unlockTest\")\r\npublic void unlockTest() {\r\n    String lockObject = \"hadoop-warehouse\";\r\n    CommonLock commonLock = new CommonLock();\r\n    commonLock.setLockObject(lockObject);\r\n    commonLock.setLocker(\"test\");\r\n    commonLockMapper.unlock(commonLock);\r\n    List<CommonLock> locks = commonLockMapper.getAll();\r\n    Assertions.assertTrue(locks.size() == 0);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-public-enhancements\\linkis-ps-common-lock\\src\\test\\java\\org\\apache\\linkis\\publicservice\\common\\lock\\dao\\CommonLockMapperTest.java",
  "methodName" : "lockTest",
  "sourceCode" : "@Test\r\n@DisplayName(\"lockTest\")\r\npublic void lockTest() {\r\n    String lockObject = \"hadoop-warehouse2\";\r\n    Long timeOut = 10000L;\r\n    CommonLock commonLock = new CommonLock();\r\n    commonLock.setLockObject(lockObject);\r\n    Assertions.assertThrows(RuntimeException.class, () -> commonLockMapper.lock(commonLock, timeOut));\r\n    commonLock.setLocker(\"test\");\r\n    commonLockMapper.lock(commonLock, timeOut);\r\n    List<CommonLock> locks = commonLockMapper.getAll();\r\n    Assertions.assertTrue(locks.size() == 2);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-public-enhancements\\linkis-ps-common-lock\\src\\test\\java\\org\\apache\\linkis\\publicservice\\common\\lock\\dao\\CommonLockMapperTest.java",
  "methodName" : "getLockByHostTest",
  "sourceCode" : "@Test\r\n@DisplayName(\"getLockByHostTest\")\r\npublic void getLockByHostTest() {\r\n    String lockObject = \"hadoop-warehouse3\";\r\n    CommonLock commonLock = new CommonLock();\r\n    commonLock.setLockObject(lockObject);\r\n    commonLock.setLocker(\"test\");\r\n    commonLockMapper.lock(commonLock, -1L);\r\n    CommonLock lock = commonLockMapper.getLockByLocker(commonLock.getLockObject(), commonLock.getLocker());\r\n    Assertions.assertTrue(lock != null);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-public-enhancements\\linkis-ps-common-lock\\src\\test\\java\\org\\apache\\linkis\\publicservice\\common\\lock\\service\\impl\\DefaultCommonLockServiceTest.java",
  "methodName" : "lockTest",
  "sourceCode" : "@Test\r\n@DisplayName(\"lockTest\")\r\npublic void lockTest() {\r\n    CommonLock commonLock = new CommonLock();\r\n    commonLock.setLockObject(\"hadoops\");\r\n    Long timeOut = 10000L;\r\n    Boolean lock = commonLockService.lock(commonLock, timeOut);\r\n    Assertions.assertTrue(lock.booleanValue());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-public-enhancements\\linkis-ps-common-lock\\src\\test\\java\\org\\apache\\linkis\\publicservice\\common\\lock\\service\\impl\\DefaultCommonLockServiceTest.java",
  "methodName" : "getAllTest",
  "sourceCode" : "@Test\r\n@DisplayName(\"getAllTest\")\r\npublic void getAllTest() {\r\n    List<CommonLock> locks = commonLockService.getAll();\r\n    Assertions.assertTrue(locks.size() == 0);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-public-enhancements\\linkis-udf-service\\src\\test\\java\\org\\apache\\linkis\\udf\\api\\UDFRestfulApiTest.java",
  "methodName" : "allUDFTest",
  "sourceCode" : "@Test\r\n@DisplayName(\"allUDFTest\")\r\npublic void allUDFTest() throws Exception {\r\n    MvcResult mvcResult = mockMvc.perform(post(\"/udf/all\")).andExpect(status().isOk()).andExpect(content().contentType(MediaType.APPLICATION_JSON)).andReturn();\r\n    Message res = JsonUtils.jackson().readValue(mvcResult.getResponse().getContentAsString(), Message.class);\r\n    assertEquals(MessageStatus.SUCCESS(), res.getStatus());\r\n    LOG.info(mvcResult.getResponse().getContentAsString());\r\n    Map<String, Object> param = new HashMap<>();\r\n    param.put(\"type\", \"self\");\r\n    param.put(\"treeId\", -1);\r\n    param.put(\"category\", \"all\");\r\n    String jsonString = new Gson().toJson(param);\r\n    Mockito.when(udfTreeService.getTreeById(Mockito.anyLong(), Mockito.anyString(), Mockito.anyString(), Mockito.anyString())).thenReturn(new UDFTree());\r\n    mvcResult = mockMvc.perform(post(\"/udf/all\").param(\"jsonString\", jsonString)).andExpect(status().isOk()).andExpect(content().contentType(MediaType.APPLICATION_JSON)).andReturn();\r\n    res = JsonUtils.jackson().readValue(mvcResult.getResponse().getContentAsString(), Message.class);\r\n    assertEquals(MessageStatus.SUCCESS(), res.getStatus());\r\n    LOG.info(mvcResult.getResponse().getContentAsString());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-public-enhancements\\linkis-udf-service\\src\\test\\java\\org\\apache\\linkis\\udf\\api\\UDFRestfulApiTest.java",
  "methodName" : "listUDFTest",
  "sourceCode" : "@Test\r\n@DisplayName(\"listUDFTest\")\r\npublic void listUDFTest() throws Exception {\r\n    Map<String, Object> json = new HashMap<>();\r\n    json.put(\"type\", \"self\");\r\n    json.put(\"treeId\", -1);\r\n    json.put(\"category\", \"all\");\r\n    MvcResult mvcResult = mockMvc.perform(post(\"/udf/list\").contentType(MediaType.APPLICATION_JSON)).andExpect(status().is4xxClientError()).andReturn();\r\n    Assertions.assertTrue(mvcResult.getResponse().getStatus() == 400);\r\n    mvcResult = mockMvc.perform(post(\"/udf/list\").content(new Gson().toJson(json)).contentType(MediaType.APPLICATION_JSON)).andExpect(status().isOk()).andReturn();\r\n    Message res = JsonUtils.jackson().readValue(mvcResult.getResponse().getContentAsString(), Message.class);\r\n    assertEquals(MessageStatus.SUCCESS(), res.getStatus());\r\n    LOG.info(mvcResult.getResponse().getContentAsString());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-public-enhancements\\linkis-udf-service\\src\\test\\java\\org\\apache\\linkis\\udf\\api\\UDFRestfulApiTest.java",
  "methodName" : "addUDFTest",
  "sourceCode" : "@Test\r\n@DisplayName(\"addUDFTest\")\r\npublic void addUDFTest() throws Exception {\r\n    UDFAddVo udfAddVo = new UDFAddVo();\r\n    udfAddVo.setCreateUser(\"hadoop\");\r\n    udfAddVo.setUdfName(\"test\");\r\n    udfAddVo.setUdfType(3);\r\n    udfAddVo.setTreeId(13L);\r\n    udfAddVo.setSys(\"IDE\");\r\n    udfAddVo.setClusterName(\"all\");\r\n    Map<String, UDFAddVo> paramMap = new HashMap<>();\r\n    paramMap.put(\"udfAddVo\", udfAddVo);\r\n    MvcResult mvcResult = mockMvc.perform(post(\"/udf/add\").contentType(MediaType.APPLICATION_JSON)).andExpect(status().is4xxClientError()).andReturn();\r\n    Assertions.assertTrue(mvcResult.getResponse().getStatus() == 400);\r\n    mvcResult = mockMvc.perform(post(\"/udf/add\").content(new Gson().toJson(paramMap)).contentType(MediaType.APPLICATION_JSON)).andExpect(status().isOk()).andReturn();\r\n    Message res = JsonUtils.jackson().readValue(mvcResult.getResponse().getContentAsString(), Message.class);\r\n    assertEquals(MessageStatus.SUCCESS(), res.getStatus());\r\n    LOG.info(mvcResult.getResponse().getContentAsString());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-public-enhancements\\linkis-udf-service\\src\\test\\java\\org\\apache\\linkis\\udf\\api\\UDFRestfulApiTest.java",
  "methodName" : "updateUDFTest",
  "sourceCode" : "@Test\r\n@DisplayName(\"updateUDFTest\")\r\npublic void updateUDFTest() throws Exception {\r\n    UDFUpdateVo udfUpdateVo = new UDFUpdateVo();\r\n    udfUpdateVo.setId(3L);\r\n    udfUpdateVo.setUdfName(\"test\");\r\n    udfUpdateVo.setUdfType(3);\r\n    udfUpdateVo.setPath(\"file:///home/hadoop/logs/linkis/hadoop/baoyang/udf/scalaUdf.scala\");\r\n    MvcResult mvcResult = mockMvc.perform(post(\"/udf/update\").contentType(MediaType.APPLICATION_JSON)).andExpect(status().is4xxClientError()).andReturn();\r\n    Assertions.assertTrue(mvcResult.getResponse().getStatus() == 400);\r\n    mvcResult = mockMvc.perform(post(\"/udf/update\").content(new Gson().toJson(udfUpdateVo)).contentType(MediaType.APPLICATION_JSON)).andExpect(status().isOk()).andReturn();\r\n    Message res = JsonUtils.jackson().readValue(mvcResult.getResponse().getContentAsString(), Message.class);\r\n    assertEquals(MessageStatus.SUCCESS(), res.getStatus());\r\n    LOG.info(mvcResult.getResponse().getContentAsString());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-public-enhancements\\linkis-udf-service\\src\\test\\java\\org\\apache\\linkis\\udf\\api\\UDFRestfulApiTest.java",
  "methodName" : "deleteUDFTest",
  "sourceCode" : "@Test\r\n@DisplayName(\"deleteUDFTest\")\r\npublic void deleteUDFTest() throws Exception {\r\n    MvcResult mvcResult = mockMvc.perform(post(\"/udf/delete\").contentType(MediaType.APPLICATION_JSON)).andExpect(status().is4xxClientError()).andReturn();\r\n    Assertions.assertTrue(mvcResult.getResponse().getStatus() == 404);\r\n    UDFInfo udfInfo = new UDFInfo();\r\n    udfInfo.setCreateUser(\"hadoop\");\r\n    Mockito.when(udfService.getUDFById(Mockito.anyLong(), Mockito.anyString())).thenReturn(udfInfo);\r\n    Long id = 3L;\r\n    mvcResult = mockMvc.perform(post(\"/udf/delete/{id}\", id).contentType(MediaType.APPLICATION_JSON)).andExpect(status().isOk()).andReturn();\r\n    Message res = JsonUtils.jackson().readValue(mvcResult.getResponse().getContentAsString(), Message.class);\r\n    assertEquals(MessageStatus.SUCCESS(), res.getStatus());\r\n    LOG.info(mvcResult.getResponse().getContentAsString());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-public-enhancements\\linkis-udf-service\\src\\test\\java\\org\\apache\\linkis\\udf\\api\\UDFRestfulApiTest.java",
  "methodName" : "publishUDFTest",
  "sourceCode" : "@Test\r\n@DisplayName(\"publishUDFTest\")\r\npublic void publishUDFTest() throws Exception {\r\n    MvcResult mvcResult = mockMvc.perform(post(\"/udf/publish\").contentType(MediaType.APPLICATION_JSON)).andExpect(status().is4xxClientError()).andReturn();\r\n    Assertions.assertTrue(mvcResult.getResponse().getStatus() == 400);\r\n    Map<String, Object> param = new HashMap<>();\r\n    param.put(\"udfId\", 3L);\r\n    param.put(\"version\", \"v000001\");\r\n    UDFInfo udfInfo = new UDFInfo();\r\n    udfInfo.setCreateUser(\"hadoop\");\r\n    Mockito.when(udfService.getUDFById(Mockito.anyLong(), Mockito.anyString())).thenReturn(udfInfo);\r\n    Mockito.when(udfService.isUDFManager(\"hadoop\")).thenReturn(true);\r\n    mvcResult = mockMvc.perform(post(\"/udf/publish\").content(new Gson().toJson(param)).contentType(MediaType.APPLICATION_JSON)).andExpect(status().isOk()).andReturn();\r\n    Message res = JsonUtils.jackson().readValue(mvcResult.getResponse().getContentAsString(), Message.class);\r\n    assertEquals(MessageStatus.SUCCESS(), res.getStatus());\r\n    LOG.info(mvcResult.getResponse().getContentAsString());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-public-enhancements\\linkis-udf-service\\src\\test\\java\\org\\apache\\linkis\\udf\\api\\UDFRestfulApiTest.java",
  "methodName" : "rollbackUDFTest",
  "sourceCode" : "@Test\r\n@DisplayName(\"rollbackUDFTest\")\r\npublic void rollbackUDFTest() throws Exception {\r\n    MvcResult mvcResult = mockMvc.perform(post(\"/udf/rollback\").contentType(MediaType.APPLICATION_JSON)).andExpect(status().is4xxClientError()).andReturn();\r\n    Assertions.assertTrue(mvcResult.getResponse().getStatus() == 400);\r\n    Map<String, Object> param = new HashMap<>();\r\n    param.put(\"udfId\", 3L);\r\n    param.put(\"version\", \"v000001\");\r\n    UDFInfo udfInfo = new UDFInfo();\r\n    udfInfo.setCreateUser(\"hadoop\");\r\n    Mockito.when(udfService.getUDFById(Mockito.anyLong(), Mockito.anyString())).thenReturn(udfInfo);\r\n    mvcResult = mockMvc.perform(post(\"/udf/rollback\").content(new Gson().toJson(param)).contentType(MediaType.APPLICATION_JSON)).andExpect(status().isOk()).andReturn();\r\n    Message res = JsonUtils.jackson().readValue(mvcResult.getResponse().getContentAsString(), Message.class);\r\n    assertEquals(MessageStatus.SUCCESS(), res.getStatus());\r\n    LOG.info(mvcResult.getResponse().getContentAsString());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-public-enhancements\\linkis-udf-service\\src\\test\\java\\org\\apache\\linkis\\udf\\api\\UDFRestfulApiTest.java",
  "methodName" : "versionListTest",
  "sourceCode" : "@Test\r\n@DisplayName(\"versionListTest\")\r\npublic void versionListTest() throws Exception {\r\n    MvcResult mvcResult = mockMvc.perform(get(\"/udf/versionList\").contentType(MediaType.APPLICATION_JSON)).andExpect(status().is4xxClientError()).andReturn();\r\n    Assertions.assertTrue(mvcResult.getResponse().getStatus() == 400);\r\n    mvcResult = mockMvc.perform(get(\"/udf/versionList\").contentType(MediaType.APPLICATION_JSON).param(\"udfId\", \"3\")).andExpect(status().isOk()).andReturn();\r\n    Message res = JsonUtils.jackson().readValue(mvcResult.getResponse().getContentAsString(), Message.class);\r\n    assertEquals(MessageStatus.SUCCESS(), res.getStatus());\r\n    LOG.info(mvcResult.getResponse().getContentAsString());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-public-enhancements\\linkis-udf-service\\src\\test\\java\\org\\apache\\linkis\\udf\\api\\UDFRestfulApiTest.java",
  "methodName" : "managerPagesTest",
  "sourceCode" : "@Test\r\n@DisplayName(\"managerPagesTest\")\r\npublic void managerPagesTest() throws Exception {\r\n    MvcResult mvcResult = mockMvc.perform(post(\"/udf/managerPages\").contentType(MediaType.APPLICATION_JSON)).andExpect(status().is4xxClientError()).andReturn();\r\n    Assertions.assertTrue(mvcResult.getResponse().getStatus() == 400);\r\n    HashMap<String, Object> paramMap = new HashMap();\r\n    paramMap.put(\"udfName\", \"test\");\r\n    paramMap.put(\"udfType\", \"3\");\r\n    paramMap.put(\"createUser\", \"hadoop\");\r\n    paramMap.put(\"curPage\", 0);\r\n    paramMap.put(\"pageSize\", 10);\r\n    PageInfo<UDFAddVo> pageInfo = new PageInfo<>();\r\n    pageInfo.setList(new ArrayList<>());\r\n    pageInfo.setPages(10);\r\n    pageInfo.setTotal(100);\r\n    Mockito.when(udfService.getManagerPages(Mockito.anyString(), Mockito.anyCollection(), Mockito.anyString(), Mockito.anyInt(), Mockito.anyInt())).thenReturn(pageInfo);\r\n    mvcResult = mockMvc.perform(post(\"/udf/managerPages\").content(new Gson().toJson(paramMap)).contentType(MediaType.APPLICATION_JSON)).andExpect(status().isOk()).andReturn();\r\n    Message res = JsonUtils.jackson().readValue(mvcResult.getResponse().getContentAsString(), Message.class);\r\n    assertEquals(MessageStatus.SUCCESS(), res.getStatus());\r\n    LOG.info(mvcResult.getResponse().getContentAsString());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-public-enhancements\\linkis-udf-service\\src\\test\\java\\org\\apache\\linkis\\udf\\api\\UDFRestfulApiTest.java",
  "methodName" : "allUdfUsersTest",
  "sourceCode" : "@Test\r\n@DisplayName(\"allUdfUsersTest\")\r\npublic void allUdfUsersTest() throws Exception {\r\n    MvcResult mvcResult = mockMvc.perform(get(\"/udf/allUdfUsers\").contentType(MediaType.APPLICATION_JSON)).andExpect(status().is4xxClientError()).andReturn();\r\n    Assertions.assertTrue(mvcResult.getResponse().getStatus() == 400);\r\n    HashMap<String, Object> paramMap = new HashMap();\r\n    paramMap.put(\"userName\", \"hadoop\");\r\n    mvcResult = mockMvc.perform(get(\"/udf/allUdfUsers\").content(new Gson().toJson(paramMap)).contentType(MediaType.APPLICATION_JSON)).andExpect(status().isOk()).andReturn();\r\n    Message res = JsonUtils.jackson().readValue(mvcResult.getResponse().getContentAsString(), Message.class);\r\n    assertEquals(MessageStatus.SUCCESS(), res.getStatus());\r\n    LOG.info(mvcResult.getResponse().getContentAsString());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-public-enhancements\\linkis-udf-service\\src\\test\\java\\org\\apache\\linkis\\udf\\api\\UDFRestfulApiTest.java",
  "methodName" : "getUserDirectoryTest",
  "sourceCode" : "@Test\r\n@DisplayName(\"getUserDirectoryTest\")\r\npublic void getUserDirectoryTest() throws Exception {\r\n    MvcResult mvcResult = mockMvc.perform(get(\"/udf/userDirectory\").contentType(MediaType.APPLICATION_JSON)).andExpect(status().is4xxClientError()).andReturn();\r\n    Assertions.assertTrue(mvcResult.getResponse().getStatus() == 400);\r\n    String category = \"function\";\r\n    mvcResult = mockMvc.perform(get(\"/udf/userDirectory\").contentType(MediaType.APPLICATION_JSON).param(\"category\", category)).andExpect(status().isOk()).andReturn();\r\n    Message res = JsonUtils.jackson().readValue(mvcResult.getResponse().getContentAsString(), Message.class);\r\n    assertEquals(MessageStatus.SUCCESS(), res.getStatus());\r\n    LOG.info(mvcResult.getResponse().getContentAsString());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-public-enhancements\\linkis-udf-service\\src\\test\\java\\org\\apache\\linkis\\udf\\dao\\PythonModuleInfoMapperTest.java",
  "methodName" : "testSelectByConditions",
  "sourceCode" : "/**\r\n * 测试 selectByConditions 方法的功能。\r\n */\r\n@Test\r\npublic void testSelectByConditions() {\r\n    PythonModuleInfo pythonModuleInfo = new PythonModuleInfo();\r\n    // 设置 pythonModuleInfo 的属性\r\n    when(pythonModuleInfoMapper.selectByConditions(pythonModuleInfo)).thenReturn(Arrays.asList(pythonModuleInfo));\r\n    List<PythonModuleInfo> result = pythonModuleInfoMapper.selectByConditions(pythonModuleInfo);\r\n    assertEquals(1, result.size());\r\n    // 验证结果的属性\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-public-enhancements\\linkis-udf-service\\src\\test\\java\\org\\apache\\linkis\\udf\\dao\\PythonModuleInfoMapperTest.java",
  "methodName" : "testUpdatePythonModuleInfo",
  "sourceCode" : "/**\r\n * 测试 updatePythonModuleInfo 方法的功能。\r\n */\r\n@Test\r\npublic void testUpdatePythonModuleInfo() {\r\n    PythonModuleInfo pythonModuleInfo = new PythonModuleInfo();\r\n    // 设置 pythonModuleInfo 的属性\r\n    when(pythonModuleInfoMapper.updatePythonModuleInfo(pythonModuleInfo)).thenReturn(1);\r\n    int result = pythonModuleInfoMapper.updatePythonModuleInfo(pythonModuleInfo);\r\n    assertEquals(1, result);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-public-enhancements\\linkis-udf-service\\src\\test\\java\\org\\apache\\linkis\\udf\\dao\\PythonModuleInfoMapperTest.java",
  "methodName" : "testInsertPythonModuleInfo",
  "sourceCode" : "/**\r\n * 测试 insertPythonModuleInfo 方法的功能。\r\n */\r\n@Test\r\npublic void testInsertPythonModuleInfo() {\r\n    PythonModuleInfo pythonModuleInfo = new PythonModuleInfo();\r\n    // 设置 pythonModuleInfo 的属性\r\n    when(pythonModuleInfoMapper.insertPythonModuleInfo(pythonModuleInfo)).thenReturn(1L);\r\n    Long result = pythonModuleInfoMapper.insertPythonModuleInfo(pythonModuleInfo);\r\n    assertEquals(1L, result.longValue());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-public-enhancements\\linkis-udf-service\\src\\test\\java\\org\\apache\\linkis\\udf\\dao\\PythonModuleInfoMapperTest.java",
  "methodName" : "testSelectByUserAndNameAndId",
  "sourceCode" : "/**\r\n * 测试 selectByUserAndNameAndId 方法的功能。\r\n */\r\n@Test\r\npublic void testSelectByUserAndNameAndId() {\r\n    PythonModuleInfo pythonModuleInfo = new PythonModuleInfo();\r\n    // 设置 pythonModuleInfo 的属性\r\n    when(pythonModuleInfoMapper.selectByUserAndNameAndId(pythonModuleInfo)).thenReturn(pythonModuleInfo);\r\n    PythonModuleInfo result = pythonModuleInfoMapper.selectByUserAndNameAndId(pythonModuleInfo);\r\n    assertNotNull(result);\r\n    // 验证结果的属性\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-public-enhancements\\linkis-udf-service\\src\\test\\java\\org\\apache\\linkis\\udf\\dao\\PythonModuleInfoMapperTest.java",
  "methodName" : "testSelectPathsByUsernameAndEnginetypes",
  "sourceCode" : "/**\r\n * 测试 selectPathsByUsernameAndEnginetypes 方法的功能。\r\n */\r\n@Test\r\npublic void testSelectPathsByUsernameAndEnginetypes() {\r\n    String username = \"testUser\";\r\n    List<String> enginetypes = Arrays.asList(\"type1\", \"type2\");\r\n    PythonModuleInfo pythonModuleInfo = new PythonModuleInfo();\r\n    // 设置 pythonModuleInfo 的属性\r\n    when(pythonModuleInfoMapper.selectPathsByUsernameAndEnginetypes(username, enginetypes)).thenReturn(Arrays.asList(pythonModuleInfo));\r\n    List<PythonModuleInfo> result = pythonModuleInfoMapper.selectPathsByUsernameAndEnginetypes(username, enginetypes);\r\n    assertEquals(1, result.size());\r\n    // 验证结果的属性\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-public-enhancements\\linkis-udf-service\\src\\test\\java\\org\\apache\\linkis\\udf\\dao\\UDFDaoTest.java",
  "methodName" : "addUDFTest",
  "sourceCode" : "@Test\r\n@DisplayName(\"addUDFTest\")\r\npublic void addUDFTest() {\r\n    UDFInfo udfInfo = new UDFInfo();\r\n    udfInfo.setId(6L);\r\n    udfInfo.setCreateUser(\"hadoop\");\r\n    udfInfo.setUdfType(3);\r\n    udfInfo.setTreeId(13L);\r\n    udfInfo.setCreateTime(new Date());\r\n    udfInfo.setUpdateTime(new Date());\r\n    udfInfo.setSys(\"IDE\");\r\n    udfInfo.setClusterName(\"ALL\");\r\n    udfInfo.setUdfName(\"udfNameTest\");\r\n    udfInfo.setExpire(null);\r\n    udfInfo.setShared(null);\r\n    udfDao.addUDF(udfInfo);\r\n    UDFInfo info = udfDao.getUDFById(6L);\r\n    Assertions.assertNotNull(info);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-public-enhancements\\linkis-udf-service\\src\\test\\java\\org\\apache\\linkis\\udf\\dao\\UDFDaoTest.java",
  "methodName" : "updateUDFTest",
  "sourceCode" : "@Test\r\n@DisplayName(\"updateUDFTest\")\r\npublic void updateUDFTest() {\r\n    UDFInfo udfInfo = new UDFInfo();\r\n    udfInfo.setId(4L);\r\n    udfInfo.setCreateUser(\"hadoops\");\r\n    udfInfo.setUdfName(\"updateTest\");\r\n    udfInfo.setUdfType(3);\r\n    udfInfo.setTreeId(13L);\r\n    udfInfo.setUpdateTime(new Date());\r\n    udfDao.updateUDF(udfInfo);\r\n    UDFInfo info = udfDao.getUDFById(4L);\r\n    Assertions.assertEquals(udfInfo.getCreateUser(), info.getCreateUser());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-public-enhancements\\linkis-udf-service\\src\\test\\java\\org\\apache\\linkis\\udf\\dao\\UDFDaoTest.java",
  "methodName" : "deleteUDFTest",
  "sourceCode" : "@Test\r\n@DisplayName(\"deleteUDFTest\")\r\npublic void deleteUDFTest() {\r\n    udfDao.deleteUDF(4L, \"hadoop\");\r\n    UDFInfo info = udfDao.getUDFById(4L);\r\n    Assertions.assertNull(info);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-public-enhancements\\linkis-udf-service\\src\\test\\java\\org\\apache\\linkis\\udf\\dao\\UDFDaoTest.java",
  "methodName" : "getUDFByIdTest",
  "sourceCode" : "@Test\r\n@DisplayName(\"getUDFByIdTest\")\r\npublic void getUDFByIdTest() {\r\n    UDFInfo udfInfo = udfDao.getUDFById(4L);\r\n    Assertions.assertNotNull(udfInfo);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-public-enhancements\\linkis-udf-service\\src\\test\\java\\org\\apache\\linkis\\udf\\dao\\UDFDaoTest.java",
  "methodName" : "deleteLoadInfoTest",
  "sourceCode" : "@Test\r\n@DisplayName(\"deleteLoadInfoTest\")\r\npublic void deleteLoadInfoTest() {\r\n    udfDao.deleteLoadInfo(3L, \"hadoop\");\r\n    List<Long> udfIds = udfDao.getLoadedUDFIds(\"hadoop\");\r\n    Assertions.assertTrue(udfIds.size() == 0);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-public-enhancements\\linkis-udf-service\\src\\test\\java\\org\\apache\\linkis\\udf\\dao\\UDFDaoTest.java",
  "methodName" : "addLoadInfoTest",
  "sourceCode" : "@Test\r\n@DisplayName(\"addLoadInfoTest\")\r\npublic void addLoadInfoTest() {\r\n    udfDao.addLoadInfo(7L, \"hadoops\");\r\n    List<Long> udfIds = udfDao.getLoadedUDFIds(\"hadoops\");\r\n    Assertions.assertTrue(udfIds.size() == 1);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-public-enhancements\\linkis-udf-service\\src\\test\\java\\org\\apache\\linkis\\udf\\dao\\UDFDaoTest.java",
  "methodName" : "getUDFSByUserNameTest",
  "sourceCode" : "@Test\r\n@DisplayName(\"getUDFSByUserNameTest\")\r\npublic void getUDFSByUserNameTest() {\r\n    List<UDFInfo> udfInfoList = udfDao.getUDFSByUserName(\"hadoop\");\r\n    Assertions.assertTrue(udfInfoList.size() > 0);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-public-enhancements\\linkis-udf-service\\src\\test\\java\\org\\apache\\linkis\\udf\\dao\\UDFDaoTest.java",
  "methodName" : "getUDFSByTreeIdAndUserTest",
  "sourceCode" : "@Test\r\n@DisplayName(\"getUDFSByTreeIdAndUserTest\")\r\npublic void getUDFSByTreeIdAndUserTest() {\r\n    Collection<Integer> categoryCodes = new ArrayList<>();\r\n    categoryCodes.add(3);\r\n    categoryCodes.add(4);\r\n    List<UDFInfoVo> udfInfoVoList = udfDao.getUDFSByTreeIdAndUser(13L, \"hadoop\", categoryCodes);\r\n    Assertions.assertTrue(udfInfoVoList.size() == 2);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-public-enhancements\\linkis-udf-service\\src\\test\\java\\org\\apache\\linkis\\udf\\dao\\UDFDaoTest.java",
  "methodName" : "getUDFSByUsersTest",
  "sourceCode" : "@Test\r\n@DisplayName(\"getUDFSByUsersTest\")\r\npublic void getUDFSByUsersTest() {\r\n    Collection<String> users = new ArrayList<>();\r\n    users.add(\"hadoop\");\r\n    List<UDFInfoVo> udfInfoVoList = udfDao.getUDFSByUsers(users);\r\n    Assertions.assertTrue(udfInfoVoList.size() == 4);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-public-enhancements\\linkis-udf-service\\src\\test\\java\\org\\apache\\linkis\\udf\\dao\\UDFDaoTest.java",
  "methodName" : "getSharedUDFByUserTest",
  "sourceCode" : "@Test\r\n@DisplayName(\"getSharedUDFByUserTest\")\r\npublic void getSharedUDFByUserTest() {\r\n    List<UDFInfoVo> udfInfoVos = udfDao.getSharedUDFByUser(\"hadoop\");\r\n    Assertions.assertTrue(udfInfoVos.size() == 1);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-public-enhancements\\linkis-udf-service\\src\\test\\java\\org\\apache\\linkis\\udf\\dao\\UDFDaoTest.java",
  "methodName" : "getUDFInfoByTreeIdTest",
  "sourceCode" : "@Test\r\n@DisplayName(\"getUDFInfoByTreeIdTest\")\r\npublic void getUDFInfoByTreeIdTest() {\r\n    Collection<Integer> categoryCodes = new ArrayList<>();\r\n    categoryCodes.add(3);\r\n    categoryCodes.add(4);\r\n    Exception exception = Assertions.assertThrows(Exception.class, () -> udfDao.getUDFInfoByTreeId(13L, \"hadoop\", categoryCodes));\r\n    LOG.info(\"assertThrows pass, the error message: {} \", exception.getMessage());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-public-enhancements\\linkis-udf-service\\src\\test\\java\\org\\apache\\linkis\\udf\\dao\\UDFDaoTest.java",
  "methodName" : "getLoadedUDFsTest",
  "sourceCode" : "@Test\r\n@DisplayName(\"getLoadedUDFsTest\")\r\npublic void getLoadedUDFsTest() {\r\n    Exception exception = Assertions.assertThrows(Exception.class, () -> udfDao.getLoadedUDFs(\"hadoop\"));\r\n    LOG.info(\"assertThrows pass, the error message: {} \", exception.getMessage());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-public-enhancements\\linkis-udf-service\\src\\test\\java\\org\\apache\\linkis\\udf\\dao\\UDFDaoTest.java",
  "methodName" : "getLoadedUDFIdsTest",
  "sourceCode" : "@Test\r\n@DisplayName(\"getLoadedUDFIdsTest\")\r\npublic void getLoadedUDFIdsTest() {\r\n    List<Long> loadedUDFIds = udfDao.getLoadedUDFIds(\"hadoop\");\r\n    Assertions.assertTrue(loadedUDFIds.size() == 1);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-public-enhancements\\linkis-udf-service\\src\\test\\java\\org\\apache\\linkis\\udf\\dao\\UDFDaoTest.java",
  "methodName" : "getSameLoadCountTest",
  "sourceCode" : "@Test\r\n@DisplayName(\"getSameLoadCountTest\")\r\npublic void getSameLoadCountTest() {\r\n    long loadCount = udfDao.getSameLoadCount(\"hadoop\", \"test\");\r\n    Assertions.assertTrue(loadCount == 1L);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-public-enhancements\\linkis-udf-service\\src\\test\\java\\org\\apache\\linkis\\udf\\dao\\UDFDaoTest.java",
  "methodName" : "getSameJarUDFTest",
  "sourceCode" : "@Test\r\n@DisplayName(\"getSameJarUDFTest\")\r\npublic void getSameJarUDFTest() {\r\n    Exception exception = Assertions.assertThrows(Exception.class, () -> udfDao.getSameJarUDF(\"hadoop\", \"file:///home/hadoop/logs/linkis/hadoop/hadoops/udf/udfPy.py\"));\r\n    LOG.info(\"assertThrows pass, the error message: {} \", exception.getMessage());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-public-enhancements\\linkis-udf-service\\src\\test\\java\\org\\apache\\linkis\\udf\\dao\\UDFDaoTest.java",
  "methodName" : "getSameNameCountByUserTest",
  "sourceCode" : "@Test\r\n@DisplayName(\"getSameNameCountByUserTest\")\r\npublic void getSameNameCountByUserTest() {\r\n    long counts = udfDao.getSameNameCountByUser(\"test\", \"hadoop\");\r\n    Assertions.assertTrue(counts == 1L);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-public-enhancements\\linkis-udf-service\\src\\test\\java\\org\\apache\\linkis\\udf\\dao\\UDFDaoTest.java",
  "methodName" : "selectSharedUDFInfosByTreeIdAndUserNameTest",
  "sourceCode" : "@Test\r\n@DisplayName(\"selectSharedUDFInfosByTreeIdAndUserNameTest\")\r\npublic void selectSharedUDFInfosByTreeIdAndUserNameTest() {\r\n    Collection<Integer> categoryCodes = new ArrayList<>();\r\n    categoryCodes.add(3);\r\n    categoryCodes.add(4);\r\n    Exception exception = Assertions.assertThrows(Exception.class, () -> udfDao.selectSharedUDFInfosByTreeIdAndUserName(10L, \"hadoop\", null));\r\n    LOG.info(\"assertThrows pass, the error message: {} \", exception.getMessage());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-public-enhancements\\linkis-udf-service\\src\\test\\java\\org\\apache\\linkis\\udf\\dao\\UDFDaoTest.java",
  "methodName" : "selectUDFManagerTest",
  "sourceCode" : "@Test\r\n@DisplayName(\"selectUDFManagerTest\")\r\npublic void selectUDFManagerTest() {\r\n    UDFManager udfManager = udfDao.selectUDFManager(\"hadoop\");\r\n    Assertions.assertNotNull(udfManager);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-public-enhancements\\linkis-udf-service\\src\\test\\java\\org\\apache\\linkis\\udf\\dao\\UDFDaoTest.java",
  "methodName" : "selectAllUserTest",
  "sourceCode" : "@Test\r\n@DisplayName(\"selectAllUserTest\")\r\npublic void selectAllUserTest() {\r\n    List<String> allUser = udfDao.selectAllUser();\r\n    Assertions.assertTrue(allUser.size() > 0);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-public-enhancements\\linkis-udf-service\\src\\test\\java\\org\\apache\\linkis\\udf\\dao\\UDFDaoTest.java",
  "methodName" : "getShareSameNameCountByUserTest",
  "sourceCode" : "@Test\r\n@DisplayName(\"getShareSameNameCountByUserTest\")\r\npublic void getShareSameNameCountByUserTest() {\r\n    long count = udfDao.getShareSameNameCountByUser(\"test\", \"hadoop\");\r\n    Assertions.assertTrue(count == 1L);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-public-enhancements\\linkis-udf-service\\src\\test\\java\\org\\apache\\linkis\\udf\\dao\\UDFDaoTest.java",
  "methodName" : "getShareSameNameCountExcludeUserTest",
  "sourceCode" : "@Test\r\n@DisplayName(\"getShareSameNameCountExcludeUserTest\")\r\npublic void getShareSameNameCountExcludeUserTest() {\r\n    long count = udfDao.getShareSameNameCountExcludeUser(\"test\", \"hadoop\", \"baoyang\");\r\n    Assertions.assertTrue(count == 1L);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-public-enhancements\\linkis-udf-service\\src\\test\\java\\org\\apache\\linkis\\udf\\dao\\UDFDaoTest.java",
  "methodName" : "insertUDFSharedUserTest",
  "sourceCode" : "@Test\r\n@DisplayName(\"insertUDFSharedUserTest\")\r\npublic void insertUDFSharedUserTest() {\r\n    udfDao.insertUDFSharedUser(4L, \"hadoop\");\r\n    long sharedCount = udfDao.getSharedUserCountByUdfId(4L);\r\n    Assertions.assertTrue(sharedCount == 1L);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-public-enhancements\\linkis-udf-service\\src\\test\\java\\org\\apache\\linkis\\udf\\dao\\UDFDaoTest.java",
  "methodName" : "updateUDFIsSharedTest",
  "sourceCode" : "@Test\r\n@DisplayName(\"updateUDFIsSharedTest\")\r\npublic void updateUDFIsSharedTest() {\r\n    udfDao.updateUDFIsShared(true, 3L);\r\n    UDFInfo udf = udfDao.getUDFById(3L);\r\n    Assertions.assertTrue(udf.getShared().booleanValue());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-public-enhancements\\linkis-udf-service\\src\\test\\java\\org\\apache\\linkis\\udf\\dao\\UDFDaoTest.java",
  "methodName" : "selectAllShareUDFInfoIdByUDFIdTest",
  "sourceCode" : "@Test\r\n@DisplayName(\"selectAllShareUDFInfoIdByUDFIdTest\")\r\npublic void selectAllShareUDFInfoIdByUDFIdTest() {\r\n    Long udfId = udfDao.selectAllShareUDFInfoIdByUDFId(\"hadoop\", \"test\");\r\n    Assertions.assertNotNull(udfId);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-public-enhancements\\linkis-udf-service\\src\\test\\java\\org\\apache\\linkis\\udf\\dao\\UDFDaoTest.java",
  "methodName" : "insertSharedUserTest",
  "sourceCode" : "@Test\r\n@DisplayName(\"insertSharedUserTest\")\r\npublic void insertSharedUserTest() {\r\n    udfDao.insertSharedUser(\"hadoops\", 4L);\r\n    long udfId = udfDao.getSharedUserCountByUdfId(4L);\r\n    Assertions.assertNotNull(udfId);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-public-enhancements\\linkis-udf-service\\src\\test\\java\\org\\apache\\linkis\\udf\\dao\\UDFDaoTest.java",
  "methodName" : "deleteSharedUserTest",
  "sourceCode" : "@Test\r\n@DisplayName(\"deleteSharedUserTest\")\r\npublic void deleteSharedUserTest() {\r\n    udfDao.deleteSharedUser(\"hadoop\", 3L);\r\n    long udfId = udfDao.getSharedUserCountByUdfId(3L);\r\n    Assertions.assertTrue(udfId == 0L);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-public-enhancements\\linkis-udf-service\\src\\test\\java\\org\\apache\\linkis\\udf\\dao\\UDFDaoTest.java",
  "methodName" : "deleteAllSharedUserTest",
  "sourceCode" : "@Test\r\n@DisplayName(\"deleteAllSharedUserTest\")\r\npublic void deleteAllSharedUserTest() {\r\n    udfDao.deleteAllSharedUser(3l);\r\n    long udfId = udfDao.getSharedUserCountByUdfId(3L);\r\n    Assertions.assertTrue(udfId == 0L);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-public-enhancements\\linkis-udf-service\\src\\test\\java\\org\\apache\\linkis\\udf\\dao\\UDFDaoTest.java",
  "methodName" : "getSharedUserCountByUdfIdTest",
  "sourceCode" : "@Test\r\n@DisplayName(\"getSharedUserCountByUdfIdTest\")\r\npublic void getSharedUserCountByUdfIdTest() {\r\n    long counts = udfDao.getSharedUserCountByUdfId(3L);\r\n    Assertions.assertTrue(counts == 1L);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-public-enhancements\\linkis-udf-service\\src\\test\\java\\org\\apache\\linkis\\udf\\dao\\UDFDaoTest.java",
  "methodName" : "getUserLoadCountByUdfIdTest",
  "sourceCode" : "@Test\r\n@DisplayName(\"getUserLoadCountByUdfIdTest\")\r\npublic void getUserLoadCountByUdfIdTest() {\r\n    long count = udfDao.getUserLoadCountByUdfId(3L, \"baoyang\");\r\n    Assertions.assertTrue(count == 1L);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-public-enhancements\\linkis-udf-service\\src\\test\\java\\org\\apache\\linkis\\udf\\dao\\UDFDaoTest.java",
  "methodName" : "updateLoadUserTest",
  "sourceCode" : "@Test\r\n@DisplayName(\"updateLoadUserTest\")\r\npublic void updateLoadUserTest() {\r\n    udfDao.updateLoadUser(3L, \"hadoop\", \"hadoops\");\r\n    long udfCount = udfDao.getUserLoadCountByUdfId(3L, \"hadoop\");\r\n    Assertions.assertTrue(udfCount == 1L);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-public-enhancements\\linkis-udf-service\\src\\test\\java\\org\\apache\\linkis\\udf\\dao\\UDFDaoTest.java",
  "methodName" : "getUdfInfoByPagesTest",
  "sourceCode" : "@Test\r\n@DisplayName(\"getUdfInfoByPagesTest\")\r\npublic void getUdfInfoByPagesTest() {\r\n    Collection<Integer> udfTypes = new ArrayList<>();\r\n    udfTypes.add(3);\r\n    udfTypes.add(4);\r\n    List<UDFAddVo> udfAddVos = udfDao.getUdfInfoByPages(\"test\", udfTypes, \"hadoop\");\r\n    Assertions.assertTrue(udfAddVos.size() > 0);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-public-enhancements\\linkis-udf-service\\src\\test\\java\\org\\apache\\linkis\\udf\\dao\\UDFDaoTest.java",
  "methodName" : "getLatesetPublishedUDF",
  "sourceCode" : "@Test\r\npublic void getLatesetPublishedUDF() {\r\n    Collection<Integer> udfTypes = new ArrayList<>();\r\n    udfTypes.add(3);\r\n    udfTypes.add(4);\r\n    Exception exception = Assertions.assertThrows(Exception.class, () -> udfDao.getLatesetPublishedUDF(\"hadoop\", udfTypes));\r\n    LOG.info(\"assertThrows pass, the error message: {} \", exception.getMessage());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-public-enhancements\\linkis-udf-service\\src\\test\\java\\org\\apache\\linkis\\udf\\dao\\UDFTreeDaoTest.java",
  "methodName" : "addTreeTest",
  "sourceCode" : "@Test\r\n@DisplayName(\"addTreeTest\")\r\npublic void addTreeTest() {\r\n    UDFTree udfTree = new UDFTree();\r\n    udfTree.setId(15L);\r\n    udfTree.setParent(10L);\r\n    udfTree.setName(\"jarTest\");\r\n    udfTree.setUserName(\"hadoop\");\r\n    udfTree.setDescription(\"test descs\");\r\n    udfTree.setCreateTime(new Date());\r\n    udfTree.setUpdateTime(new Date());\r\n    udfTree.setCategory(\"function\");\r\n    udfTreeDao.addTree(udfTree);\r\n    UDFTree tree = udfTreeDao.getTreeById(15L);\r\n    Assertions.assertNotNull(tree);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-public-enhancements\\linkis-udf-service\\src\\test\\java\\org\\apache\\linkis\\udf\\dao\\UDFTreeDaoTest.java",
  "methodName" : "updateTreeTest",
  "sourceCode" : "@Test\r\n@DisplayName(\"updateTreeTest\")\r\npublic void updateTreeTest() {\r\n    UDFTree udfTree = new UDFTree();\r\n    udfTree.setId(13L);\r\n    udfTree.setParent(10L);\r\n    udfTree.setName(\"udfTreeUpdates\");\r\n    udfTree.setUserName(\"hadoop\");\r\n    udfTree.setDescription(\"test descs\");\r\n    udfTree.setUpdateTime(new Date());\r\n    udfTreeDao.updateTree(udfTree);\r\n    UDFTree tree = udfTreeDao.getTreeById(13L);\r\n    Assertions.assertEquals(udfTree.getName(), tree.getName());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-public-enhancements\\linkis-udf-service\\src\\test\\java\\org\\apache\\linkis\\udf\\dao\\UDFTreeDaoTest.java",
  "methodName" : "deleteTreeTest",
  "sourceCode" : "@Test\r\n@DisplayName(\"deleteTreeTest\")\r\npublic void deleteTreeTest() {\r\n    udfTreeDao.deleteTree(13L, \"hadoop\");\r\n    UDFTree tree = udfTreeDao.getTreeById(13L);\r\n    Assertions.assertNull(tree);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-public-enhancements\\linkis-udf-service\\src\\test\\java\\org\\apache\\linkis\\udf\\dao\\UDFTreeDaoTest.java",
  "methodName" : "getTreeByIdAndCategoryTest",
  "sourceCode" : "@Test\r\n@DisplayName(\"getTreeByIdAndCategoryTest\")\r\npublic void getTreeByIdAndCategoryTest() {\r\n    UDFTree udfTree = udfTreeDao.getTreeByIdAndCategory(13L, \"function\");\r\n    Assertions.assertNotNull(udfTree);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-public-enhancements\\linkis-udf-service\\src\\test\\java\\org\\apache\\linkis\\udf\\dao\\UDFTreeDaoTest.java",
  "methodName" : "getTreeByIdAndCategoryAndUserNameTest",
  "sourceCode" : "@Test\r\n@DisplayName(\"getTreeByIdAndCategoryAndUserNameTest\")\r\npublic void getTreeByIdAndCategoryAndUserNameTest() {\r\n    UDFTree udfTree = udfTreeDao.getTreeByIdAndCategoryAndUserName(13L, \"function\", \"hadoop\");\r\n    Assertions.assertNotNull(udfTree);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-public-enhancements\\linkis-udf-service\\src\\test\\java\\org\\apache\\linkis\\udf\\dao\\UDFTreeDaoTest.java",
  "methodName" : "getTreeByIdTest",
  "sourceCode" : "@Test\r\n@DisplayName(\"getTreeByIdTest\")\r\npublic void getTreeByIdTest() {\r\n    UDFTree udfTree = udfTreeDao.getTreeById(13L);\r\n    Assertions.assertNotNull(udfTree);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-public-enhancements\\linkis-udf-service\\src\\test\\java\\org\\apache\\linkis\\udf\\dao\\UDFTreeDaoTest.java",
  "methodName" : "getTreesByParentIdTest",
  "sourceCode" : "@Test\r\n@DisplayName(\"getTreesByParentIdTest\")\r\npublic void getTreesByParentIdTest() {\r\n    Map<String, Object> params = new HashMap<>();\r\n    params.put(\"parent\", 10L);\r\n    params.put(\"userName\", \"hadoop\");\r\n    params.put(\"category\", \"function\");\r\n    List<UDFTree> udfTreeList = udfTreeDao.getTreesByParentId(params);\r\n    Assertions.assertTrue(udfTreeList.size() > 0);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-public-enhancements\\linkis-udf-service\\src\\test\\java\\org\\apache\\linkis\\udf\\dao\\UDFTreeDaoTest.java",
  "methodName" : "getTreeByNameAndUserTest",
  "sourceCode" : "@Test\r\n@DisplayName(\"getTreeByNameAndUserTest\")\r\npublic void getTreeByNameAndUserTest() {\r\n    UDFTree udfTree = udfTreeDao.getTreeByNameAndUser(\"baoyang\", \"hadoop\", \"function\");\r\n    Assertions.assertNotNull(udfTree);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-public-enhancements\\linkis-udf-service\\src\\test\\java\\org\\apache\\linkis\\udf\\dao\\UDFTreeDaoTest.java",
  "methodName" : "getUserDirectoryTest",
  "sourceCode" : "@Test\r\n@DisplayName(\"getUserDirectoryTest\")\r\npublic void getUserDirectoryTest() {\r\n    List<String> userDirectoryList = udfTreeDao.getUserDirectory(\"hadoop\", \"function\");\r\n    Assertions.assertTrue(userDirectoryList.size() == 1);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-public-enhancements\\linkis-udf-service\\src\\test\\java\\org\\apache\\linkis\\udf\\dao\\UDFVersionDaoTest.java",
  "methodName" : "addUdfVersionTest",
  "sourceCode" : "@Test\r\n@DisplayName(\"addUdfVersionTest\")\r\npublic void addUdfVersionTest() {\r\n    UDFVersion udfVersion = new UDFVersion();\r\n    udfVersion.setId(99L);\r\n    udfVersion.setUdfId(1L);\r\n    udfVersion.setPath(\"file:///home/hadoop/logs/linkis/hadoop/hadoops/udf/udfPy.py\");\r\n    udfVersion.setBmlResourceId(\"fe124e5e-4fdd-4509-aa93-10c3748ba34a\");\r\n    udfVersion.setBmlResourceVersion(\"v000006\");\r\n    udfVersion.setPublished(true);\r\n    udfVersion.setRegisterFormat(\"udf.register(\\\"pyUdfTest\\\",test)\");\r\n    udfVersion.setUseFormat(\"int pyUdfTest(api)\");\r\n    udfVersion.setDescription(\"test it\");\r\n    udfVersion.setCreateTime(new Date());\r\n    udfVersion.setMd5(\"0774ebbaef1efae6e7554ad569235d2f\");\r\n    udfVersionDao.addUdfVersion(udfVersion);\r\n    UDFVersion udfIdAndVersion = udfVersionDao.selectByUdfIdAndVersion(1L, \"v000006\");\r\n    Assertions.assertNotNull(udfIdAndVersion);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-public-enhancements\\linkis-udf-service\\src\\test\\java\\org\\apache\\linkis\\udf\\dao\\UDFVersionDaoTest.java",
  "methodName" : "selectLatestByUdfIdTest",
  "sourceCode" : "@Test\r\n@DisplayName(\"selectLatestByUdfIdTest\")\r\npublic void selectLatestByUdfIdTest() {\r\n    UDFVersion udfVersion = udfVersionDao.selectLatestByUdfId(1L);\r\n    Assertions.assertNotNull(udfVersion);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-public-enhancements\\linkis-udf-service\\src\\test\\java\\org\\apache\\linkis\\udf\\dao\\UDFVersionDaoTest.java",
  "methodName" : "selectByUdfIdAndVersionTest",
  "sourceCode" : "@Test\r\n@DisplayName(\"selectByUdfIdAndVersionTest\")\r\npublic void selectByUdfIdAndVersionTest() {\r\n    UDFVersion udfVersion = udfVersionDao.selectByUdfIdAndVersion(1L, \"v000001\");\r\n    Assertions.assertNotNull(udfVersion);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-public-enhancements\\linkis-udf-service\\src\\test\\java\\org\\apache\\linkis\\udf\\dao\\UDFVersionDaoTest.java",
  "methodName" : "updatePublishStatusTest",
  "sourceCode" : "@Test\r\n@DisplayName(\"updatePublishStatusTest\")\r\npublic void updatePublishStatusTest() {\r\n    udfVersionDao.updatePublishStatus(3L, \"v000001\", false);\r\n    List<UDFVersionVo> versionVos = udfVersionDao.getAllVersionByUdfId(2L);\r\n    Assertions.assertTrue(versionVos.size() == 1);\r\n    Assertions.assertFalse(versionVos.get(0).getPublished());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-public-enhancements\\linkis-udf-service\\src\\test\\java\\org\\apache\\linkis\\udf\\dao\\UDFVersionDaoTest.java",
  "methodName" : "getAllVersionsTest",
  "sourceCode" : "@Test\r\n@DisplayName(\"getAllVersionsTest\")\r\npublic void getAllVersionsTest() {\r\n    List<UDFVersion> allVersions = udfVersionDao.getAllVersions(1L);\r\n    Assertions.assertTrue(allVersions.size() > 0);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-public-enhancements\\linkis-udf-service\\src\\test\\java\\org\\apache\\linkis\\udf\\dao\\UDFVersionDaoTest.java",
  "methodName" : "deleteVersionByUdfIdTest",
  "sourceCode" : "@Test\r\n@DisplayName(\"deleteVersionByUdfIdTest\")\r\npublic void deleteVersionByUdfIdTest() {\r\n    udfVersionDao.deleteVersionByUdfId(4L);\r\n    List<UDFVersion> allVersions = udfVersionDao.getAllVersions(4L);\r\n    Assertions.assertTrue(allVersions.size() == 0);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-public-enhancements\\linkis-udf-service\\src\\test\\java\\org\\apache\\linkis\\udf\\dao\\UDFVersionDaoTest.java",
  "methodName" : "getSameJarCountTest",
  "sourceCode" : "@Test\r\n@DisplayName(\"getSameJarCountTest\")\r\npublic void getSameJarCountTest() {\r\n    Exception exception = Assertions.assertThrows(Exception.class, () -> udfVersionDao.getSameJarCount(\"hadoop\", \"activation.jar\"));\r\n    LOG.info(\"assertThrows pass, the error message: {} \", exception.getMessage());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-public-enhancements\\linkis-udf-service\\src\\test\\java\\org\\apache\\linkis\\udf\\dao\\UDFVersionDaoTest.java",
  "methodName" : "getOtherSameJarCountTest",
  "sourceCode" : "@Test\r\n@DisplayName(\"getOtherSameJarCountTest\")\r\npublic void getOtherSameJarCountTest() {\r\n    Exception exception = Assertions.assertThrows(Exception.class, () -> udfVersionDao.getOtherSameJarCount(\"hadoop\", \"activation.jar\", 2L));\r\n    LOG.info(\"assertThrows pass, the error message: {} \", exception.getMessage());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-public-enhancements\\linkis-udf-service\\src\\test\\java\\org\\apache\\linkis\\udf\\dao\\UDFVersionDaoTest.java",
  "methodName" : "updateResourceIdByUdfIdTest",
  "sourceCode" : "@Test\r\n@DisplayName(\"updateResourceIdByUdfIdTest\")\r\npublic void updateResourceIdByUdfIdTest() {\r\n    udfVersionDao.updateResourceIdByUdfId(2L, \"0de8c361-22ce-4402-bf6f-xxxxxxxxx\", \"hadoop\", \"hadoop\");\r\n    List<UDFVersionVo> versionVos = udfVersionDao.getAllVersionByUdfId(2L);\r\n    Assertions.assertTrue(versionVos.size() == 1);\r\n    Assertions.assertEquals(\"0de8c361-22ce-4402-bf6f-xxxxxxxxx\", versionVos.get(0).getBmlResourceId());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-public-enhancements\\linkis-udf-service\\src\\test\\java\\org\\apache\\linkis\\udf\\dao\\UDFVersionDaoTest.java",
  "methodName" : "updateUDFVersionTest",
  "sourceCode" : "@Test\r\n@DisplayName(\"updateResourceIdByUdfIdTest\")\r\npublic void updateUDFVersionTest() {\r\n    UDFVersion udfVersion = new UDFVersion();\r\n    udfVersion.setId(3L);\r\n    udfVersion.setPath(\"file:///home/hadoop/logs/linkis/hadoop/hadoops/udf/activation.jar\");\r\n    udfVersion.setRegisterFormat(\"0\");\r\n    udfVersion.setUseFormat(\"string jarUdf(name)\");\r\n    udfVersion.setDescription(\"updateTests\");\r\n    udfVersionDao.updateUDFVersion(udfVersion);\r\n    List<UDFVersionVo> versionVos = udfVersionDao.getAllVersionByUdfId(2L);\r\n    Assertions.assertTrue(versionVos.size() == 1);\r\n    Assertions.assertEquals(\"updateTests\", versionVos.get(0).getDescription());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-public-enhancements\\linkis-udf-service\\src\\test\\java\\org\\apache\\linkis\\udf\\service\\PythonModuleInfoServiceTest.java",
  "methodName" : "testGetByConditions",
  "sourceCode" : "/**\r\n * 测试 getByConditions 方法的功能。\r\n */\r\n@Test\r\npublic void testGetByConditions() {\r\n    PythonModuleInfo mockInfo = new PythonModuleInfo();\r\n    mockInfo.setId(1L);\r\n    mockInfo.setName(\"TestModule\");\r\n    when(pythonModuleInfoMapper.selectByConditions(mockInfo)).thenReturn(Arrays.asList(mockInfo));\r\n    List<PythonModuleInfo> result = pythonModuleInfoServiceImpl.getByConditions(mockInfo);\r\n    assertNotNull(result);\r\n    assertEquals(1, result.size());\r\n    assertEquals(mockInfo.getId(), result.get(0).getId());\r\n    assertEquals(mockInfo.getName(), result.get(0).getName());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-public-enhancements\\linkis-udf-service\\src\\test\\java\\org\\apache\\linkis\\udf\\service\\PythonModuleInfoServiceTest.java",
  "methodName" : "testUpdatePythonModuleInfo",
  "sourceCode" : "/**\r\n * 测试 updatePythonModuleInfo 方法的功能。\r\n */\r\n@Test\r\npublic void testUpdatePythonModuleInfo() {\r\n    PythonModuleInfo mockInfo = new PythonModuleInfo();\r\n    mockInfo.setId(1L);\r\n    mockInfo.setName(\"UpdatedModule\");\r\n    when(pythonModuleInfoMapper.updatePythonModuleInfo(mockInfo)).thenReturn(1);\r\n    int result = pythonModuleInfoServiceImpl.updatePythonModuleInfo(mockInfo);\r\n    assertEquals(1, result);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-public-enhancements\\linkis-udf-service\\src\\test\\java\\org\\apache\\linkis\\udf\\service\\PythonModuleInfoServiceTest.java",
  "methodName" : "testInsertPythonModuleInfo",
  "sourceCode" : "/**\r\n * 测试 insertPythonModuleInfo 方法的功能。\r\n */\r\n@Test\r\npublic void testInsertPythonModuleInfo() {\r\n    PythonModuleInfo mockInfo = new PythonModuleInfo();\r\n    mockInfo.setId(1L);\r\n    mockInfo.setName(\"NewModule\");\r\n    when(pythonModuleInfoMapper.insertPythonModuleInfo(mockInfo)).thenReturn(1L);\r\n    Long result = pythonModuleInfoServiceImpl.insertPythonModuleInfo(mockInfo);\r\n    assertNotNull(result);\r\n    assertEquals(1L, result.longValue());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-public-enhancements\\linkis-udf-service\\src\\test\\java\\org\\apache\\linkis\\udf\\service\\PythonModuleInfoServiceTest.java",
  "methodName" : "testGetByUserAndNameAndId",
  "sourceCode" : "/**\r\n * 测试 getByUserAndNameAndId 方法的功能。\r\n */\r\n@Test\r\npublic void testGetByUserAndNameAndId() {\r\n    PythonModuleInfo mockInfo = new PythonModuleInfo();\r\n    mockInfo.setId(1L);\r\n    mockInfo.setName(\"UniqueModule\");\r\n    when(pythonModuleInfoMapper.selectByUserAndNameAndId(mockInfo)).thenReturn(mockInfo);\r\n    PythonModuleInfo result = pythonModuleInfoServiceImpl.getByUserAndNameAndId(mockInfo);\r\n    assertNotNull(result);\r\n    assertEquals(mockInfo.getId(), result.getId());\r\n    assertEquals(mockInfo.getName(), result.getName());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-public-enhancements\\linkis-udf-service\\src\\test\\java\\org\\apache\\linkis\\udf\\service\\PythonModuleInfoServiceTest.java",
  "methodName" : "testGetPathsByUsernameAndEnginetypes",
  "sourceCode" : "/**\r\n * 测试 getPathsByUsernameAndEnginetypes 方法的功能。\r\n */\r\n@Test\r\npublic void testGetPathsByUsernameAndEnginetypes() {\r\n    String username = \"testUser\";\r\n    List<String> enginetypes = Arrays.asList(\"Engine1\", \"Engine2\");\r\n    PythonModuleInfo mockInfo1 = new PythonModuleInfo();\r\n    mockInfo1.setId(1L);\r\n    mockInfo1.setName(\"Module1\");\r\n    PythonModuleInfo mockInfo2 = new PythonModuleInfo();\r\n    mockInfo2.setId(2L);\r\n    mockInfo2.setName(\"Module2\");\r\n    when(pythonModuleInfoMapper.selectPathsByUsernameAndEnginetypes(username, enginetypes)).thenReturn(Arrays.asList(mockInfo1, mockInfo2));\r\n    List<PythonModuleInfo> result = pythonModuleInfoServiceImpl.getPathsByUsernameAndEnginetypes(username, enginetypes);\r\n    assertNotNull(result);\r\n    assertEquals(2, result.size());\r\n    assertTrue(result.contains(mockInfo1));\r\n    assertTrue(result.contains(mockInfo2));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-public-enhancements\\linkis-udf-service\\src\\test\\java\\org\\apache\\linkis\\udf\\service\\UDFServiceTest.java",
  "methodName" : "deleteUDFTest",
  "sourceCode" : "@Test\r\n@DisplayName(\"deleteUDFTest\")\r\npublic void deleteUDFTest() {\r\n    UDFInfo udfInfo = new UDFInfo();\r\n    udfInfo.setShared(false);\r\n    Mockito.when(udfDao.getUDFById(Mockito.anyLong())).thenReturn(udfInfo);\r\n    Assertions.assertAll(() -> {\r\n        Boolean deleteUDF = udfServiceImpl.deleteUDF(4L, \"hadoop\");\r\n        Assertions.assertTrue(deleteUDF.booleanValue());\r\n    });\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-public-enhancements\\linkis-udf-service\\src\\test\\java\\org\\apache\\linkis\\udf\\service\\UDFServiceTest.java",
  "methodName" : "getUDFByIdTest",
  "sourceCode" : "@Test\r\n@DisplayName(\"getUDFByIdTest\")\r\npublic void getUDFByIdTest() {\r\n    Assertions.assertAll(() -> {\r\n        UDFInfo udfInfo = udfServiceImpl.getUDFById(4L, \"hadoop\");\r\n        Assertions.assertNull(udfInfo);\r\n    });\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-public-enhancements\\linkis-udf-service\\src\\test\\java\\org\\apache\\linkis\\udf\\service\\UDFServiceTest.java",
  "methodName" : "deleteLoadInfoTest",
  "sourceCode" : "@Test\r\n@DisplayName(\"deleteLoadInfoTest\")\r\npublic void deleteLoadInfoTest() {\r\n    Assertions.assertAll(() -> {\r\n        Boolean deleteLoadInfo = udfServiceImpl.deleteLoadInfo(4L, \"hadoop\");\r\n        Assertions.assertTrue(deleteLoadInfo.booleanValue());\r\n    });\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-public-enhancements\\linkis-udf-service\\src\\test\\java\\org\\apache\\linkis\\udf\\service\\UDFServiceTest.java",
  "methodName" : "addLoadInfoTest",
  "sourceCode" : "@Test\r\n@DisplayName(\"addLoadInfoTest\")\r\npublic void addLoadInfoTest() {\r\n    UDFInfo udfInfo = new UDFInfo();\r\n    udfInfo.setUdfType(2);\r\n    Mockito.when(udfDao.getUDFById(Mockito.anyLong())).thenReturn(udfInfo);\r\n    Assertions.assertAll(() -> {\r\n        Boolean addLoadInfo = udfServiceImpl.addLoadInfo(7L, \"hadoop\");\r\n        Assertions.assertTrue(addLoadInfo.booleanValue());\r\n    });\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-public-enhancements\\linkis-udf-service\\src\\test\\java\\org\\apache\\linkis\\udf\\service\\UDFServiceTest.java",
  "methodName" : "getUDFSByTreeIdAndUserTest",
  "sourceCode" : "@Test\r\n@DisplayName(\"getUDFSByTreeIdAndUserTest\")\r\npublic void getUDFSByTreeIdAndUserTest() {\r\n    List<UDFInfoVo> udfInfoVoList = udfServiceImpl.getUDFSByTreeIdAndUser(13L, \"hadoop\", \"all\");\r\n    Assertions.assertTrue(udfInfoVoList.size() == 0);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-public-enhancements\\linkis-udf-service\\src\\test\\java\\org\\apache\\linkis\\udf\\service\\UDFServiceTest.java",
  "methodName" : "getUDFInfoByTreeIdTest",
  "sourceCode" : "@Test\r\n@DisplayName(\"getUDFInfoByTreeIdTest\")\r\npublic void getUDFInfoByTreeIdTest() {\r\n    List<UDFInfoVo> udfInfoVos = udfServiceImpl.getUDFInfoByTreeId(13L, \"hadoop\", \"all\");\r\n    Assertions.assertTrue(udfInfoVos.size() == 0);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-public-enhancements\\linkis-udf-service\\src\\test\\java\\org\\apache\\linkis\\udf\\service\\UDFServiceTest.java",
  "methodName" : "getSharedUDFsTest",
  "sourceCode" : "@Test\r\n@DisplayName(\"getSharedUDFsTest\")\r\npublic void getSharedUDFsTest() {\r\n    List<UDFInfoVo> sharedUDFs = udfServiceImpl.getSharedUDFs(\"hadoop\", \"all\");\r\n    Assertions.assertTrue(sharedUDFs.size() == 0);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-public-enhancements\\linkis-udf-service\\src\\test\\java\\org\\apache\\linkis\\udf\\service\\UDFServiceTest.java",
  "methodName" : "getExpiredUDFsTest",
  "sourceCode" : "@Test\r\n@DisplayName(\"getExpiredUDFsTest\")\r\npublic void getExpiredUDFsTest() {\r\n    List<UDFInfoVo> expiredUDFs = udfServiceImpl.getExpiredUDFs(\"hadoop\", \"all\");\r\n    Assertions.assertTrue(expiredUDFs.size() == 0);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-public-enhancements\\linkis-udf-service\\src\\test\\java\\org\\apache\\linkis\\udf\\service\\UDFServiceTest.java",
  "methodName" : "isUDFManagerTest",
  "sourceCode" : "@Test\r\n@DisplayName(\"isUDFManagerTest\")\r\npublic void isUDFManagerTest() {\r\n    Boolean isUdfManager = udfServiceImpl.isUDFManager(\"hadoop\");\r\n    Assertions.assertFalse(isUdfManager.booleanValue());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-public-enhancements\\linkis-udf-service\\src\\test\\java\\org\\apache\\linkis\\udf\\service\\UDFServiceTest.java",
  "methodName" : "setUDFSharedInfoTest",
  "sourceCode" : "@Test\r\n@DisplayName(\"setUDFSharedInfoTest\")\r\npublic void setUDFSharedInfoTest() {\r\n    Assertions.assertAll(() -> udfServiceImpl.setUDFSharedInfo(true, 13L));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-public-enhancements\\linkis-udf-service\\src\\test\\java\\org\\apache\\linkis\\udf\\service\\UDFServiceTest.java",
  "methodName" : "setUdfExpireTest",
  "sourceCode" : "@Test\r\n@DisplayName(\"setUdfExpireTest\")\r\npublic void setUdfExpireTest() {\r\n    UDFInfo udfInfo = new UDFInfo();\r\n    udfInfo.setShared(true);\r\n    Mockito.when(udfDao.getUDFById(Mockito.anyLong())).thenReturn(udfInfo);\r\n    Mockito.when(udfDao.getUserLoadCountByUdfId(Mockito.anyLong(), Mockito.anyString())).thenReturn(2L);\r\n    Assertions.assertAll(() -> {\r\n        udfServiceImpl.setUdfExpire(13L, \"hadoop\");\r\n    });\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-public-enhancements\\linkis-udf-service\\src\\test\\java\\org\\apache\\linkis\\udf\\service\\UDFServiceTest.java",
  "methodName" : "getAllSharedUsersByUdfIdTest",
  "sourceCode" : "@Test\r\n@DisplayName(\"getAllSharedUsersByUdfIdTest\")\r\npublic void getAllSharedUsersByUdfIdTest() {\r\n    List<String> users = udfServiceImpl.getAllSharedUsersByUdfId(\"hadoop\", 13L);\r\n    Assertions.assertTrue(users.size() == 0);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-public-enhancements\\linkis-udf-service\\src\\test\\java\\org\\apache\\linkis\\udf\\service\\UDFServiceTest.java",
  "methodName" : "addSharedUserTest",
  "sourceCode" : "@Test\r\n@DisplayName(\"addSharedUserTest\")\r\npublic void addSharedUserTest() {\r\n    Set<String> sharedUsers = new HashSet<>();\r\n    sharedUsers.add(\"tangxr\");\r\n    sharedUsers.add(\"baoyang\");\r\n    Assertions.assertAll(() -> udfServiceImpl.addSharedUser(sharedUsers, 4L));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-public-enhancements\\linkis-udf-service\\src\\test\\java\\org\\apache\\linkis\\udf\\service\\UDFServiceTest.java",
  "methodName" : "publishUdfTest",
  "sourceCode" : "@Test\r\n@DisplayName(\"publishUdfTest\")\r\npublic void publishUdfTest() {\r\n    UDFInfo udfInfo = new UDFInfo();\r\n    udfInfo.setShared(true);\r\n    Mockito.when(udfDao.getUDFById(Mockito.anyLong())).thenReturn(udfInfo);\r\n    Assertions.assertAll(() -> {\r\n        udfServiceImpl.publishUdf(3L, \"v000001\");\r\n    });\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-public-enhancements\\linkis-udf-service\\src\\test\\java\\org\\apache\\linkis\\udf\\service\\UDFServiceTest.java",
  "methodName" : "publishLatestUdfTest",
  "sourceCode" : "@Test\r\n@DisplayName(\"publishLatestUdfTest\")\r\npublic void publishLatestUdfTest() {\r\n    UDFVersion udfVersion = new UDFVersion();\r\n    udfVersion.setBmlResourceVersion(\"v000001\");\r\n    Mockito.when(udfVersionDao.selectLatestByUdfId(Mockito.anyLong())).thenReturn(udfVersion);\r\n    Assertions.assertAll(() -> {\r\n        udfServiceImpl.publishLatestUdf(4L);\r\n    });\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-public-enhancements\\linkis-udf-service\\src\\test\\java\\org\\apache\\linkis\\udf\\service\\UDFServiceTest.java",
  "methodName" : "getUdfVersionListTest",
  "sourceCode" : "@Test\r\n@DisplayName(\"getUdfVersionListTest\")\r\npublic void getUdfVersionListTest() {\r\n    List<UDFVersionVo> udfVersionList = udfServiceImpl.getUdfVersionList(4L);\r\n    Assertions.assertTrue(udfVersionList.size() == 0);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-public-enhancements\\linkis-udf-service\\src\\test\\java\\org\\apache\\linkis\\udf\\service\\UDFServiceTest.java",
  "methodName" : "getManagerPagesTest",
  "sourceCode" : "@Test\r\n@DisplayName(\"getManagerPagesTest\")\r\npublic void getManagerPagesTest() {\r\n    Collection<Integer> udfType = new ArrayList<>();\r\n    udfType.add(3);\r\n    udfType.add(4);\r\n    Assertions.assertAll(() -> {\r\n        PageInfo<UDFAddVo> managerPages = udfServiceImpl.getManagerPages(\"test\", udfType, \"hadoop\", 0, 10);\r\n        Assertions.assertTrue(managerPages.getSize() == 0);\r\n    });\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-public-enhancements\\linkis-udf-service\\src\\test\\java\\org\\apache\\linkis\\udf\\service\\UDFServiceTest.java",
  "methodName" : "allUdfUsersTest",
  "sourceCode" : "@Test\r\n@DisplayName(\"allUdfUsersTest\")\r\npublic void allUdfUsersTest() {\r\n    List<String> users = udfServiceImpl.allUdfUsers();\r\n    Assertions.assertTrue(users.size() == 0);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-public-enhancements\\linkis-udf-service\\src\\test\\java\\org\\apache\\linkis\\udf\\service\\UDFServiceTest.java",
  "methodName" : "getUserDirectoryTest",
  "sourceCode" : "@Test\r\n@DisplayName(\"getUserDirectoryTest\")\r\npublic void getUserDirectoryTest() {\r\n    List<String> userDirectory = udfServiceImpl.getUserDirectory(\"hadoop\", \"function\");\r\n    Assertions.assertTrue(userDirectory.size() == 0);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-public-enhancements\\linkis-udf-service\\src\\test\\java\\org\\apache\\linkis\\udf\\service\\UDFServiceTest.java",
  "methodName" : "getAllUDFSByUserNameTest",
  "sourceCode" : "@Test\r\n@DisplayName(\"getAllUDFSByUserNameTest\")\r\npublic void getAllUDFSByUserNameTest() {\r\n    Assertions.assertAll(() -> {\r\n        List<UDFInfoVo> udfs = udfServiceImpl.getAllUDFSByUserName(\"hadoop\");\r\n        Assertions.assertTrue(udfs.size() == 0);\r\n    });\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-public-enhancements\\linkis-udf-service\\src\\test\\java\\org\\apache\\linkis\\udf\\service\\UDFTreeServiceTest.java",
  "methodName" : "initTreeTest",
  "sourceCode" : "@Test\r\n@DisplayName(\"initTreeTest\")\r\npublic void initTreeTest() {\r\n    UDFTree udfTree = new UDFTree();\r\n    udfTree.setId(13L);\r\n    List<UDFTree> first = new ArrayList<>();\r\n    first.add(udfTree);\r\n    Map<String, Object> params = new HashedMap();\r\n    params.put(\"parent\", -1L);\r\n    params.put(\"userName\", \"hadoop\");\r\n    params.put(\"category\", \"all\");\r\n    Mockito.when(udfTreeDao.getTreesByParentId(Mockito.anyMap())).thenReturn(first);\r\n    Assertions.assertAll(() -> {\r\n        UDFTree initTree = udfTreeServiceImpl.initTree(\"hadoop\", \"all\");\r\n        Assertions.assertNotNull(initTree);\r\n    });\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-public-enhancements\\linkis-udf-service\\src\\test\\java\\org\\apache\\linkis\\udf\\service\\UDFTreeServiceTest.java",
  "methodName" : "addTreeTest",
  "sourceCode" : "@Test\r\n@DisplayName(\"addTreeTest\")\r\npublic void addTreeTest() {\r\n    UDFTree udfTree = new UDFTree();\r\n    udfTree.setId(15L);\r\n    udfTree.setParent(10L);\r\n    udfTree.setName(\"jarTest\");\r\n    udfTree.setUserName(\"hadoop\");\r\n    udfTree.setDescription(\"test descs\");\r\n    udfTree.setCreateTime(new Date());\r\n    udfTree.setUpdateTime(new Date());\r\n    udfTree.setCategory(\"function\");\r\n    Assertions.assertAll(() -> {\r\n        udfTreeServiceImpl.addTree(udfTree, \"hadoop\");\r\n    });\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-public-enhancements\\linkis-udf-service\\src\\test\\java\\org\\apache\\linkis\\udf\\service\\UDFTreeServiceTest.java",
  "methodName" : "updateTreeTest",
  "sourceCode" : "@Test\r\n@DisplayName(\"updateTreeTest\")\r\npublic void updateTreeTest() {\r\n    UDFTree udfTree = new UDFTree();\r\n    udfTree.setId(13L);\r\n    udfTree.setParent(10L);\r\n    udfTree.setName(\"udfTreeUpdate\");\r\n    udfTree.setUserName(\"hadoop\");\r\n    udfTree.setDescription(\"test descs\");\r\n    udfTree.setUpdateTime(new Date());\r\n    Assertions.assertAll(() -> {\r\n        udfTreeServiceImpl.updateTree(udfTree, \"hadoop\");\r\n    });\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-public-enhancements\\linkis-udf-service\\src\\test\\java\\org\\apache\\linkis\\udf\\service\\UDFTreeServiceTest.java",
  "methodName" : "deleteTreeTest",
  "sourceCode" : "@Test\r\n@DisplayName(\"deleteTreeTest\")\r\npublic void deleteTreeTest() {\r\n    Assertions.assertAll(() -> {\r\n        udfTreeServiceImpl.deleteTree(13L, \"hadoop\");\r\n    });\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-public-enhancements\\linkis-udf-service\\src\\test\\java\\org\\apache\\linkis\\udf\\service\\UDFTreeServiceTest.java",
  "methodName" : "getTreeByIdTest",
  "sourceCode" : "@Test\r\n@DisplayName(\"getTreeByIdTest\")\r\npublic void getTreeByIdTest() {\r\n    Assertions.assertAll(() -> {\r\n        UDFTree udfTree = udfTreeServiceImpl.getTreeById(13L, \"hadoop\", \"sys\", \"all\");\r\n        Assertions.assertNull(udfTree);\r\n    });\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-spring-cloud-services\\linkis-service-gateway\\linkis-gateway-authentication\\src\\test\\java\\org\\apache\\linkis\\gateway\\authentication\\dao\\TokenDaoTest.java",
  "methodName" : "testSelectTokenByName",
  "sourceCode" : "@Test\r\nvoid testSelectTokenByName() {\r\n    TokenEntity result = tokenDao.selectTokenByName(TokenName);\r\n    assertEquals(result.getTokenName(), TokenName);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-spring-cloud-services\\linkis-service-gateway\\linkis-gateway-authentication\\src\\test\\java\\org\\apache\\linkis\\gateway\\authentication\\dao\\TokenDaoTest.java",
  "methodName" : "testGetAllTokens",
  "sourceCode" : "@Test\r\nvoid testGetAllTokens() {\r\n    List<TokenEntity> result = tokenDao.getAllTokens();\r\n    assertNotEquals(result.size(), 0);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-spring-cloud-services\\linkis-service-gateway\\linkis-gateway-authentication\\src\\test\\java\\org\\apache\\linkis\\gateway\\authentication\\service\\CachedTokenServiceTest.java",
  "methodName" : "testIsTokenValid",
  "sourceCode" : "@Test\r\nvoid testIsTokenValid() {\r\n    boolean isOk = tokenService.isTokenValid(TokenName);\r\n    assertTrue(isOk);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-spring-cloud-services\\linkis-service-gateway\\linkis-gateway-authentication\\src\\test\\java\\org\\apache\\linkis\\gateway\\authentication\\service\\CachedTokenServiceTest.java",
  "methodName" : "testIsTokenAcceptableWithUser",
  "sourceCode" : "@Test\r\nvoid testIsTokenAcceptableWithUser() {\r\n    boolean isOk = tokenService.isTokenAcceptableWithUser(TokenName, \"test\");\r\n    assertTrue(isOk);\r\n    isOk = tokenService.isTokenAcceptableWithUser(TokenName, \"test1\");\r\n    assertFalse(isOk);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-spring-cloud-services\\linkis-service-gateway\\linkis-gateway-authentication\\src\\test\\java\\org\\apache\\linkis\\gateway\\authentication\\service\\CachedTokenServiceTest.java",
  "methodName" : "testIsTokenAcceptableWithHost",
  "sourceCode" : "@Test\r\nvoid testIsTokenAcceptableWithHost() {\r\n    boolean isOk = tokenService.isTokenAcceptableWithHost(TokenName, \"127.0.0.1\");\r\n    assertTrue(isOk);\r\n    isOk = tokenService.isTokenAcceptableWithHost(TokenName, \"10.10.10.10\");\r\n    assertFalse(isOk);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-spring-cloud-services\\linkis-service-gateway\\linkis-gateway-authentication\\src\\test\\java\\org\\apache\\linkis\\gateway\\authentication\\service\\CachedTokenServiceTest.java",
  "methodName" : "testDoAuth",
  "sourceCode" : "@Test\r\nvoid testDoAuth() {\r\n    boolean isOk = tokenService.doAuth(TokenName, \"test\", \"127.0.0.1\");\r\n    assertTrue(isOk);\r\n    Exception exception = assertThrows(TokenAuthException.class, () -> tokenService.doAuth(TokenName, \"test1\", \"127.0.0.1\"));\r\n    logger.info(\"assertThrows：{}\", exception.getMessage());\r\n    exception = assertThrows(TokenAuthException.class, () -> tokenService.doAuth(TokenName, \"test\", \"10.10.10.10\"));\r\n    logger.info(\"assertThrows：{}\", exception.getMessage());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-spring-cloud-services\\linkis-service-gateway\\linkis-spring-cloud-gateway\\src\\test\\java\\org\\apache\\linkis\\gateway\\springcloud\\errorcode\\GatewayErrorCodeSummaryTest.java",
  "methodName" : "testGetErrorCode",
  "sourceCode" : "@Test\r\nvoid testGetErrorCode() {\r\n    assertEquals(13001, WEBSOCKET_CONNECT_ERROR.getErrorCode());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\linkis\\linkis-spring-cloud-services\\linkis-service-gateway\\linkis-spring-cloud-gateway\\src\\test\\java\\org\\apache\\linkis\\gateway\\springcloud\\errorcode\\GatewayErrorCodeSummaryTest.java",
  "methodName" : "testGetErrorDesc",
  "sourceCode" : "@Test\r\nvoid testGetErrorDesc() {\r\n    assertEquals(\"Repeatedly creating a WebSocket connection(重复创建WebSocket连接)\", WEBSOCKET_CONNECT_ERROR.getErrorDesc());\r\n}",
  "annotations" : [ "Test" ]
} ]