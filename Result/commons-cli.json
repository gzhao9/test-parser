[ {
  "filePath" : "d:\\chenhao\\test project\\commons-cli\\src\\test\\java\\org\\apache\\commons\\cli\\AbstractParserTestCase.java",
  "methodName" : "testAmbiguousArgParsing",
  "sourceCode" : "@Test\r\nvoid testAmbiguousArgParsing() throws Exception {\r\n    final String[] args = { \"-=-\" };\r\n    final Options options = new Options();\r\n    assertThrows(UnrecognizedOptionException.class, () -> parser.parse(options, args));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-cli\\src\\test\\java\\org\\apache\\commons\\cli\\AbstractParserTestCase.java",
  "methodName" : "testAmbiguousLongWithoutEqualSingleDash",
  "sourceCode" : "@Test\r\nvoid testAmbiguousLongWithoutEqualSingleDash() throws Exception {\r\n    final String[] args = { \"-b\", \"-foobar\" };\r\n    final Options options = new Options();\r\n    options.addOption(OptionBuilder.withLongOpt(\"foo\").hasOptionalArg().create('f'));\r\n    options.addOption(OptionBuilder.withLongOpt(\"bar\").hasOptionalArg().create('b'));\r\n    final CommandLine cl = parser.parse(options, args);\r\n    assertTrue(cl.hasOption(\"b\"));\r\n    assertTrue(cl.hasOption(\"f\"));\r\n    assertEquals(\"bar\", cl.getOptionValue(\"foo\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-cli\\src\\test\\java\\org\\apache\\commons\\cli\\AbstractParserTestCase.java",
  "methodName" : "testAmbiguousLongWithoutEqualSingleDash2",
  "sourceCode" : "@Test\r\nvoid testAmbiguousLongWithoutEqualSingleDash2() throws Exception {\r\n    final String[] args = { \"-b\", \"-foobar\" };\r\n    final Options options = new Options();\r\n    options.addOption(Option.builder().longOpt(\"foo\").option(\"f\").optionalArg(true).get());\r\n    options.addOption(Option.builder().longOpt(\"bar\").option(\"b\").optionalArg(false).get());\r\n    final CommandLine cl = parser.parse(options, args);\r\n    assertTrue(cl.hasOption(\"b\"));\r\n    assertTrue(cl.hasOption(\"f\"));\r\n    assertEquals(\"bar\", cl.getOptionValue(\"foo\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-cli\\src\\test\\java\\org\\apache\\commons\\cli\\AbstractParserTestCase.java",
  "methodName" : "testAmbiguousPartialLongOption1",
  "sourceCode" : "@Test\r\nvoid testAmbiguousPartialLongOption1() throws Exception {\r\n    final String[] args = { \"--ver\" };\r\n    final Options options = new Options();\r\n    options.addOption(OptionBuilder.withLongOpt(\"version\").create());\r\n    options.addOption(OptionBuilder.withLongOpt(\"verbose\").create());\r\n    final AmbiguousOptionException e = assertThrows(AmbiguousOptionException.class, () -> parser.parse(options, args));\r\n    assertEquals(\"--ver\", e.getOption(), \"Partial option\");\r\n    assertNotNull(e.getMatchingOptions(), \"Matching options null\");\r\n    assertEquals(2, e.getMatchingOptions().size(), \"Matching options size\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-cli\\src\\test\\java\\org\\apache\\commons\\cli\\AbstractParserTestCase.java",
  "methodName" : "testAmbiguousPartialLongOption2",
  "sourceCode" : "@Test\r\nvoid testAmbiguousPartialLongOption2() throws Exception {\r\n    final String[] args = { \"-ver\" };\r\n    final Options options = new Options();\r\n    options.addOption(OptionBuilder.withLongOpt(\"version\").create());\r\n    options.addOption(OptionBuilder.withLongOpt(\"verbose\").create());\r\n    final AmbiguousOptionException e = assertThrows(AmbiguousOptionException.class, () -> parser.parse(options, args));\r\n    assertEquals(\"-ver\", e.getOption(), \"Partial option\");\r\n    assertNotNull(e.getMatchingOptions(), \"Matching options null\");\r\n    assertEquals(2, e.getMatchingOptions().size(), \"Matching options size\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-cli\\src\\test\\java\\org\\apache\\commons\\cli\\AbstractParserTestCase.java",
  "methodName" : "testAmbiguousPartialLongOption3",
  "sourceCode" : "@Test\r\nvoid testAmbiguousPartialLongOption3() throws Exception {\r\n    final String[] args = { \"--ver=1\" };\r\n    final Options options = new Options();\r\n    options.addOption(OptionBuilder.withLongOpt(\"version\").create());\r\n    options.addOption(OptionBuilder.withLongOpt(\"verbose\").hasOptionalArg().create());\r\n    final AmbiguousOptionException e = assertThrows(AmbiguousOptionException.class, () -> parser.parse(options, args));\r\n    assertEquals(\"--ver\", e.getOption(), \"Partial option\");\r\n    assertNotNull(e.getMatchingOptions(), \"Matching options null\");\r\n    assertEquals(2, e.getMatchingOptions().size(), \"Matching options size\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-cli\\src\\test\\java\\org\\apache\\commons\\cli\\AbstractParserTestCase.java",
  "methodName" : "testAmbiguousPartialLongOption4",
  "sourceCode" : "@Test\r\nvoid testAmbiguousPartialLongOption4() throws Exception {\r\n    final String[] args = { \"-ver=1\" };\r\n    final Options options = new Options();\r\n    options.addOption(OptionBuilder.withLongOpt(\"version\").create());\r\n    options.addOption(OptionBuilder.withLongOpt(\"verbose\").hasOptionalArg().create());\r\n    final AmbiguousOptionException e = assertThrows(AmbiguousOptionException.class, () -> parser.parse(options, args));\r\n    assertEquals(\"-ver\", e.getOption(), \"Partial option\");\r\n    assertNotNull(e.getMatchingOptions(), \"Matching options null\");\r\n    assertEquals(2, e.getMatchingOptions().size(), \"Matching options size\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-cli\\src\\test\\java\\org\\apache\\commons\\cli\\AbstractParserTestCase.java",
  "methodName" : "testArgumentStartingWithHyphen",
  "sourceCode" : "@Test\r\nvoid testArgumentStartingWithHyphen() throws Exception {\r\n    final String[] args = { \"-b\", \"-foo\" };\r\n    final CommandLine cl = parser.parse(options, args);\r\n    assertEquals(\"-foo\", cl.getOptionValue(\"b\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-cli\\src\\test\\java\\org\\apache\\commons\\cli\\AbstractParserTestCase.java",
  "methodName" : "testBursting",
  "sourceCode" : "@Test\r\nvoid testBursting() throws Exception {\r\n    final String[] args = { \"-acbtoast\", \"foo\", \"bar\" };\r\n    final CommandLine cl = parser.parse(options, args);\r\n    assertTrue(cl.hasOption(\"a\"), \"Confirm -a is set\");\r\n    assertTrue(cl.hasOption(\"b\"), \"Confirm -b is set\");\r\n    assertTrue(cl.hasOption(\"c\"), \"Confirm -c is set\");\r\n    assertEquals(\"toast\", cl.getOptionValue(\"b\"), \"Confirm arg of -b\");\r\n    assertEquals(2, cl.getArgList().size(), \"Confirm size of extra args\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-cli\\src\\test\\java\\org\\apache\\commons\\cli\\AbstractParserTestCase.java",
  "methodName" : "testDoubleDash1",
  "sourceCode" : "@Test\r\nvoid testDoubleDash1() throws Exception {\r\n    final String[] args = { \"--copt\", \"--\", \"-b\", \"toast\" };\r\n    final CommandLine cl = parser.parse(options, args);\r\n    assertTrue(cl.hasOption(\"c\"), \"Confirm -c is set\");\r\n    assertFalse(cl.hasOption(\"b\"), \"Confirm -b is not set\");\r\n    assertEquals(2, cl.getArgList().size(), \"Confirm 2 extra args: \" + cl.getArgList().size());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-cli\\src\\test\\java\\org\\apache\\commons\\cli\\AbstractParserTestCase.java",
  "methodName" : "testDoubleDash2",
  "sourceCode" : "@Test\r\nvoid testDoubleDash2() throws Exception {\r\n    final Options options = new Options();\r\n    options.addOption(OptionBuilder.hasArg().create('n'));\r\n    options.addOption(OptionBuilder.create('m'));\r\n    final MissingArgumentException e = assertThrows(MissingArgumentException.class, () -> parser.parse(options, new String[] { \"-n\", \"--\", \"-m\" }));\r\n    assertNotNull(e.getOption(), \"option null\");\r\n    assertEquals(\"n\", e.getOption().getOpt());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-cli\\src\\test\\java\\org\\apache\\commons\\cli\\AbstractParserTestCase.java",
  "methodName" : "testLongOptionQuoteHandling",
  "sourceCode" : "@Test\r\nvoid testLongOptionQuoteHandling() throws Exception {\r\n    final String[] args = { \"--bfile\", \"\\\"quoted string\\\"\" };\r\n    final CommandLine cl = parser.parse(options, args);\r\n    assertEquals(\"quoted string\", cl.getOptionValue(\"b\"), \"Confirm --bfile \\\"arg\\\" strips quotes\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-cli\\src\\test\\java\\org\\apache\\commons\\cli\\AbstractParserTestCase.java",
  "methodName" : "testLongOptionWithEqualsQuoteHandling",
  "sourceCode" : "@Test\r\nvoid testLongOptionWithEqualsQuoteHandling() throws Exception {\r\n    final String[] args = { \"--bfile=\\\"quoted string\\\"\" };\r\n    final CommandLine cl = parser.parse(options, args);\r\n    assertEquals(\"quoted string\", cl.getOptionValue(\"b\"), \"Confirm --bfile=\\\"arg\\\" strips quotes\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-cli\\src\\test\\java\\org\\apache\\commons\\cli\\AbstractParserTestCase.java",
  "methodName" : "testLongWithEqualDoubleDash",
  "sourceCode" : "@Test\r\nvoid testLongWithEqualDoubleDash() throws Exception {\r\n    final String[] args = { \"--foo=bar\" };\r\n    final Options options = new Options();\r\n    options.addOption(OptionBuilder.withLongOpt(\"foo\").hasArg().create('f'));\r\n    final CommandLine cl = parser.parse(options, args);\r\n    assertEquals(\"bar\", cl.getOptionValue(\"foo\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-cli\\src\\test\\java\\org\\apache\\commons\\cli\\AbstractParserTestCase.java",
  "methodName" : "testLongWithEqualSingleDash",
  "sourceCode" : "@Test\r\nvoid testLongWithEqualSingleDash() throws Exception {\r\n    final String[] args = { \"-foo=bar\" };\r\n    final Options options = new Options();\r\n    options.addOption(OptionBuilder.withLongOpt(\"foo\").hasArg().create('f'));\r\n    final CommandLine cl = parser.parse(options, args);\r\n    assertEquals(\"bar\", cl.getOptionValue(\"foo\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-cli\\src\\test\\java\\org\\apache\\commons\\cli\\AbstractParserTestCase.java",
  "methodName" : "testLongWithoutEqualDoubleDash",
  "sourceCode" : "@Test\r\nvoid testLongWithoutEqualDoubleDash() throws Exception {\r\n    final String[] args = { \"--foobar\" };\r\n    final Options options = new Options();\r\n    options.addOption(OptionBuilder.withLongOpt(\"foo\").hasArg().create('f'));\r\n    final CommandLine cl = parser.parse(options, args, true);\r\n    // foo isn't expected to be recognized with a double dash\r\n    assertFalse(cl.hasOption(\"foo\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-cli\\src\\test\\java\\org\\apache\\commons\\cli\\AbstractParserTestCase.java",
  "methodName" : "testLongWithoutEqualSingleDash",
  "sourceCode" : "@Test\r\nvoid testLongWithoutEqualSingleDash() throws Exception {\r\n    final Options options = new Options();\r\n    options.addOption(OptionBuilder.withLongOpt(\"foo\").hasArg().create('f'));\r\n    final CommandLine cl = parser.parse(options, new String[] { \"-foobar\" });\r\n    assertEquals(\"bar\", cl.getOptionValue(\"foo\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-cli\\src\\test\\java\\org\\apache\\commons\\cli\\AbstractParserTestCase.java",
  "methodName" : "testLongWithUnexpectedArgument1",
  "sourceCode" : "@Test\r\nvoid testLongWithUnexpectedArgument1() throws Exception {\r\n    final Options options = new Options();\r\n    options.addOption(OptionBuilder.withLongOpt(\"foo\").create('f'));\r\n    final UnrecognizedOptionException e = assertThrows(UnrecognizedOptionException.class, () -> parser.parse(options, new String[] { \"--foo=bar\" }));\r\n    assertEquals(\"--foo=bar\", e.getOption());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-cli\\src\\test\\java\\org\\apache\\commons\\cli\\AbstractParserTestCase.java",
  "methodName" : "testLongWithUnexpectedArgument2",
  "sourceCode" : "@Test\r\nvoid testLongWithUnexpectedArgument2() throws Exception {\r\n    final Options options = new Options();\r\n    options.addOption(OptionBuilder.withLongOpt(\"foo\").create('f'));\r\n    final UnrecognizedOptionException e = assertThrows(UnrecognizedOptionException.class, () -> parser.parse(options, new String[] { \"-foobar\" }));\r\n    assertEquals(\"-foobar\", e.getOption());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-cli\\src\\test\\java\\org\\apache\\commons\\cli\\AbstractParserTestCase.java",
  "methodName" : "testMissingArg",
  "sourceCode" : "@Test\r\nvoid testMissingArg() throws Exception {\r\n    final MissingArgumentException e = assertThrows(MissingArgumentException.class, () -> parser.parse(options, new String[] { \"-b\" }));\r\n    assertEquals(\"b\", e.getOption().getOpt(), \"option missing an argument\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-cli\\src\\test\\java\\org\\apache\\commons\\cli\\AbstractParserTestCase.java",
  "methodName" : "testMissingArgWithBursting",
  "sourceCode" : "@Test\r\nvoid testMissingArgWithBursting() throws Exception {\r\n    final String[] args = { \"-acb\" };\r\n    final MissingArgumentException e = assertThrows(MissingArgumentException.class, () -> parser.parse(options, args));\r\n    assertEquals(\"b\", e.getOption().getOpt(), \"option missing an argument\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-cli\\src\\test\\java\\org\\apache\\commons\\cli\\AbstractParserTestCase.java",
  "methodName" : "testMissingRequiredGroup",
  "sourceCode" : "@Test\r\nvoid testMissingRequiredGroup() throws Exception {\r\n    final OptionGroup optionGroup = new OptionGroup();\r\n    optionGroup.addOption(OptionBuilder.create(\"a\"));\r\n    optionGroup.addOption(OptionBuilder.create(\"b\"));\r\n    optionGroup.setRequired(true);\r\n    final Options options = new Options();\r\n    options.addOptionGroup(optionGroup);\r\n    options.addOption(OptionBuilder.isRequired().create(\"c\"));\r\n    final MissingOptionException e = assertThrows(MissingOptionException.class, () -> parser.parse(options, new String[] { \"-c\" }));\r\n    assertEquals(1, e.getMissingOptions().size());\r\n    assertTrue(e.getMissingOptions().get(0) instanceof OptionGroup);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-cli\\src\\test\\java\\org\\apache\\commons\\cli\\AbstractParserTestCase.java",
  "methodName" : "testMissingRequiredOption",
  "sourceCode" : "@Test\r\nvoid testMissingRequiredOption() {\r\n    final String[] args = { \"-a\" };\r\n    final Options options = new Options();\r\n    options.addOption(\"a\", \"enable-a\", false, null);\r\n    options.addOption(OptionBuilder.withLongOpt(\"bfile\").hasArg().isRequired().create('b'));\r\n    final MissingOptionException e = assertThrows(MissingOptionException.class, () -> parser.parse(options, args));\r\n    assertEquals(\"Missing required option: b\", e.getMessage(), \"Incorrect exception message\");\r\n    assertTrue(e.getMissingOptions().contains(\"b\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-cli\\src\\test\\java\\org\\apache\\commons\\cli\\AbstractParserTestCase.java",
  "methodName" : "testMissingRequiredOptions",
  "sourceCode" : "@Test\r\nvoid testMissingRequiredOptions() {\r\n    final String[] args = { \"-a\" };\r\n    final Options options = new Options();\r\n    options.addOption(\"a\", \"enable-a\", false, null);\r\n    options.addOption(OptionBuilder.withLongOpt(\"bfile\").hasArg().isRequired().create('b'));\r\n    options.addOption(OptionBuilder.withLongOpt(\"cfile\").hasArg().isRequired().create('c'));\r\n    final MissingOptionException e = assertThrows(MissingOptionException.class, () -> parser.parse(options, args));\r\n    assertEquals(\"Missing required options: b, c\", e.getMessage(), \"Incorrect exception message\");\r\n    assertTrue(e.getMissingOptions().contains(\"b\"));\r\n    assertTrue(e.getMissingOptions().contains(\"c\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-cli\\src\\test\\java\\org\\apache\\commons\\cli\\AbstractParserTestCase.java",
  "methodName" : "testMultiple",
  "sourceCode" : "@Test\r\nvoid testMultiple() throws Exception {\r\n    final String[] args = { \"-c\", \"foobar\", \"-b\", \"toast\" };\r\n    CommandLine cl = parser.parse(options, args, true);\r\n    assertTrue(cl.hasOption(\"c\"), \"Confirm -c is set\");\r\n    assertEquals(3, cl.getArgList().size(), \"Confirm  3 extra args: \" + cl.getArgList().size());\r\n    cl = parser.parse(options, cl.getArgs());\r\n    assertFalse(cl.hasOption(\"c\"), \"Confirm -c is not set\");\r\n    assertTrue(cl.hasOption(\"b\"), \"Confirm -b is set\");\r\n    assertEquals(\"toast\", cl.getOptionValue(\"b\"), \"Confirm arg of -b\");\r\n    assertEquals(1, cl.getArgList().size(), \"Confirm  1 extra arg: \" + cl.getArgList().size());\r\n    assertEquals(\"foobar\", cl.getArgList().get(0), \"Confirm  value of extra arg: \" + cl.getArgList().get(0));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-cli\\src\\test\\java\\org\\apache\\commons\\cli\\AbstractParserTestCase.java",
  "methodName" : "testMultipleWithLong",
  "sourceCode" : "@Test\r\nvoid testMultipleWithLong() throws Exception {\r\n    final String[] args = { \"--copt\", \"foobar\", \"--bfile\", \"toast\" };\r\n    CommandLine cl = parser.parse(options, args, true);\r\n    assertTrue(cl.hasOption(\"c\"), \"Confirm -c is set\");\r\n    assertEquals(3, cl.getArgList().size(), \"Confirm  3 extra args: \" + cl.getArgList().size());\r\n    cl = parser.parse(options, cl.getArgs());\r\n    assertFalse(cl.hasOption(\"c\"), \"Confirm -c is not set\");\r\n    assertTrue(cl.hasOption(\"b\"), \"Confirm -b is set\");\r\n    assertEquals(\"toast\", cl.getOptionValue(\"b\"), \"Confirm arg of -b\");\r\n    assertEquals(1, cl.getArgList().size(), \"Confirm  1 extra arg: \" + cl.getArgList().size());\r\n    assertEquals(\"foobar\", cl.getArgList().get(0), \"Confirm  value of extra arg: \" + cl.getArgList().get(0));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-cli\\src\\test\\java\\org\\apache\\commons\\cli\\AbstractParserTestCase.java",
  "methodName" : "testMultipleWithNull",
  "sourceCode" : "@Test\r\nvoid testMultipleWithNull() throws Exception {\r\n    final String[] args = { null, \"-c\", null, \"foobar\", null, \"-b\", null, \"toast\", null };\r\n    CommandLine cl = parser.parse(options, args, true);\r\n    assertTrue(cl.hasOption(\"c\"), \"Confirm -c is set\");\r\n    assertEquals(3, cl.getArgList().size(), \"Confirm  3 extra args: \" + cl.getArgList().size());\r\n    cl = parser.parse(options, cl.getArgs());\r\n    assertFalse(cl.hasOption(\"c\"), \"Confirm -c is not set\");\r\n    assertTrue(cl.hasOption(\"b\"), \"Confirm -b is set\");\r\n    assertEquals(\"toast\", cl.getOptionValue(\"b\"), \"Confirm arg of -b\");\r\n    assertEquals(1, cl.getArgList().size(), \"Confirm  1 extra arg: \" + cl.getArgList().size());\r\n    assertEquals(\"foobar\", cl.getArgList().get(0), \"Confirm  value of extra arg: \" + cl.getArgList().get(0));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-cli\\src\\test\\java\\org\\apache\\commons\\cli\\AbstractParserTestCase.java",
  "methodName" : "testNegativeArgument",
  "sourceCode" : "@Test\r\nvoid testNegativeArgument() throws Exception {\r\n    final String[] args = { \"-b\", \"-1\" };\r\n    final CommandLine cl = parser.parse(options, args);\r\n    assertEquals(\"-1\", cl.getOptionValue(\"b\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-cli\\src\\test\\java\\org\\apache\\commons\\cli\\AbstractParserTestCase.java",
  "methodName" : "testNegativeOption",
  "sourceCode" : "@Test\r\nvoid testNegativeOption() throws Exception {\r\n    final String[] args = { \"-b\", \"-1\" };\r\n    options.addOption(\"1\", false, null);\r\n    final CommandLine cl = parser.parse(options, args);\r\n    assertEquals(\"-1\", cl.getOptionValue(\"b\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-cli\\src\\test\\java\\org\\apache\\commons\\cli\\AbstractParserTestCase.java",
  "methodName" : "testOptionalArgsOptionBuilder",
  "sourceCode" : "@Test\r\nvoid testOptionalArgsOptionBuilder() throws Exception {\r\n    final Options options = new Options();\r\n    options.addOption(OptionBuilder.hasOptionalArgs(2).create('i'));\r\n    final Properties properties = new Properties();\r\n    CommandLine cmd = parse(parser, options, new String[] { \"-i\" }, properties);\r\n    assertTrue(cmd.hasOption(\"i\"));\r\n    assertNull(cmd.getOptionValues(\"i\"));\r\n    cmd = parse(parser, options, new String[] { \"-i\", \"paper\" }, properties);\r\n    assertTrue(cmd.hasOption(\"i\"));\r\n    assertArrayEquals(new String[] { \"paper\" }, cmd.getOptionValues(\"i\"));\r\n    cmd = parse(parser, options, new String[] { \"-i\", \"paper\", \"scissors\" }, properties);\r\n    assertTrue(cmd.hasOption(\"i\"));\r\n    assertArrayEquals(new String[] { \"paper\", \"scissors\" }, cmd.getOptionValues(\"i\"));\r\n    cmd = parse(parser, options, new String[] { \"-i\", \"paper\", \"scissors\", \"rock\" }, properties);\r\n    assertTrue(cmd.hasOption(\"i\"));\r\n    assertArrayEquals(new String[] { \"paper\", \"scissors\" }, cmd.getOptionValues(\"i\"));\r\n    assertArrayEquals(new String[] { \"rock\" }, cmd.getArgs());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-cli\\src\\test\\java\\org\\apache\\commons\\cli\\AbstractParserTestCase.java",
  "methodName" : "testOptionalArgsOptionDotBuilder",
  "sourceCode" : "@Test\r\nvoid testOptionalArgsOptionDotBuilder() throws Exception {\r\n    final Options options = new Options();\r\n    options.addOption(Option.builder(\"i\").numberOfArgs(2).optionalArg(true).get());\r\n    final Properties properties = new Properties();\r\n    CommandLine cmd = parse(parser, options, new String[] { \"-i\" }, properties);\r\n    assertTrue(cmd.hasOption(\"i\"));\r\n    assertNull(cmd.getOptionValues(\"i\"));\r\n    cmd = parse(parser, options, new String[] { \"-i\", \"paper\" }, properties);\r\n    assertTrue(cmd.hasOption(\"i\"));\r\n    assertArrayEquals(new String[] { \"paper\" }, cmd.getOptionValues(\"i\"));\r\n    cmd = parse(parser, options, new String[] { \"-i\", \"paper\", \"scissors\" }, properties);\r\n    assertTrue(cmd.hasOption(\"i\"));\r\n    assertArrayEquals(new String[] { \"paper\", \"scissors\" }, cmd.getOptionValues(\"i\"));\r\n    cmd = parse(parser, options, new String[] { \"-i\", \"paper\", \"scissors\", \"rock\" }, properties);\r\n    assertTrue(cmd.hasOption(\"i\"));\r\n    assertArrayEquals(new String[] { \"paper\", \"scissors\" }, cmd.getOptionValues(\"i\"));\r\n    assertArrayEquals(new String[] { \"rock\" }, cmd.getArgs());\r\n    options.addOption(Option.builder(\"j\").numberOfArgs(3).optionalArg(true).get());\r\n    cmd = parse(parser, options, new String[] { \"-j\" }, properties);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-cli\\src\\test\\java\\org\\apache\\commons\\cli\\AbstractParserTestCase.java",
  "methodName" : "testOptionAndRequiredOption",
  "sourceCode" : "@Test\r\nvoid testOptionAndRequiredOption() throws Exception {\r\n    final String[] args = { \"-a\", \"-b\", \"file\" };\r\n    final Options options = new Options();\r\n    options.addOption(\"a\", \"enable-a\", false, null);\r\n    options.addOption(OptionBuilder.withLongOpt(\"bfile\").hasArg().isRequired().create('b'));\r\n    final CommandLine cl = parser.parse(options, args);\r\n    assertTrue(cl.hasOption(\"a\"), \"Confirm -a is set\");\r\n    assertTrue(cl.hasOption(\"b\"), \"Confirm -b is set\");\r\n    assertEquals(\"file\", cl.getOptionValue(\"b\"), \"Confirm arg of -b\");\r\n    assertTrue(cl.getArgList().isEmpty(), \"Confirm NO of extra args\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-cli\\src\\test\\java\\org\\apache\\commons\\cli\\AbstractParserTestCase.java",
  "methodName" : "testOptionGroup",
  "sourceCode" : "@Test\r\nvoid testOptionGroup() throws Exception {\r\n    final OptionGroup optionGroup = new OptionGroup();\r\n    assertFalse(optionGroup.isSelected());\r\n    optionGroup.addOption(OptionBuilder.create(\"a\"));\r\n    optionGroup.addOption(OptionBuilder.create(\"b\"));\r\n    final Options options = new Options();\r\n    options.addOptionGroup(optionGroup);\r\n    parser.parse(options, new String[] { \"-b\" });\r\n    assertTrue(optionGroup.isSelected());\r\n    assertEquals(\"b\", optionGroup.getSelected(), \"selected option\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-cli\\src\\test\\java\\org\\apache\\commons\\cli\\AbstractParserTestCase.java",
  "methodName" : "testOptionGroupLong",
  "sourceCode" : "@Test\r\nvoid testOptionGroupLong() throws Exception {\r\n    final OptionGroup optionGroup = new OptionGroup();\r\n    optionGroup.addOption(OptionBuilder.withLongOpt(\"foo\").create());\r\n    optionGroup.addOption(OptionBuilder.withLongOpt(\"bar\").create());\r\n    final Options options = new Options();\r\n    options.addOptionGroup(optionGroup);\r\n    final CommandLine cl = parser.parse(options, new String[] { \"--bar\" });\r\n    assertTrue(cl.hasOption(\"bar\"));\r\n    assertTrue(optionGroup.isSelected());\r\n    assertEquals(\"bar\", optionGroup.getSelected(), \"selected option\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-cli\\src\\test\\java\\org\\apache\\commons\\cli\\AbstractParserTestCase.java",
  "methodName" : "testPartialLongOptionSingleDash",
  "sourceCode" : "@Test\r\nvoid testPartialLongOptionSingleDash() throws Exception {\r\n    final String[] args = { \"-ver\" };\r\n    final Options options = new Options();\r\n    options.addOption(OptionBuilder.withLongOpt(\"version\").create());\r\n    options.addOption(OptionBuilder.hasArg().create('v'));\r\n    final CommandLine cl = parser.parse(options, args);\r\n    assertTrue(cl.hasOption(\"version\"), \"Confirm --version is set\");\r\n    assertFalse(cl.hasOption(\"v\"), \"Confirm -v is not set\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-cli\\src\\test\\java\\org\\apache\\commons\\cli\\AbstractParserTestCase.java",
  "methodName" : "testPropertiesOption1",
  "sourceCode" : "@Test\r\nvoid testPropertiesOption1() throws Exception {\r\n    final String[] args = { \"-Jsource=1.5\", \"-J\", \"target\", \"1.5\", \"foo\" };\r\n    final Options options = new Options();\r\n    options.addOption(OptionBuilder.withValueSeparator().hasArgs(2).create('J'));\r\n    final CommandLine cl = parser.parse(options, args);\r\n    final List<String> values = Arrays.asList(cl.getOptionValues(\"J\"));\r\n    assertNotNull(values, \"null values\");\r\n    assertEquals(4, values.size(), \"number of values\");\r\n    assertEquals(\"source\", values.get(0), \"value 1\");\r\n    assertEquals(\"1.5\", values.get(1), \"value 2\");\r\n    assertEquals(\"target\", values.get(2), \"value 3\");\r\n    assertEquals(\"1.5\", values.get(3), \"value 4\");\r\n    final List<?> argsleft = cl.getArgList();\r\n    assertEquals(1, argsleft.size(), \"Should be 1 arg left\");\r\n    assertEquals(\"foo\", argsleft.get(0), \"Expecting foo\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-cli\\src\\test\\java\\org\\apache\\commons\\cli\\AbstractParserTestCase.java",
  "methodName" : "testPropertiesOption2",
  "sourceCode" : "@Test\r\nvoid testPropertiesOption2() throws Exception {\r\n    final String[] args = { \"-Dparam1\", \"-Dparam2=value2\", \"-D\" };\r\n    final Options options = new Options();\r\n    options.addOption(OptionBuilder.withValueSeparator().hasOptionalArgs(2).create('D'));\r\n    final CommandLine cl = parser.parse(options, args);\r\n    final Properties props = cl.getOptionProperties(\"D\");\r\n    assertNotNull(props, \"null properties\");\r\n    assertEquals(2, props.size(), \"number of properties in \" + props);\r\n    assertEquals(\"true\", props.getProperty(\"param1\"), \"property 1\");\r\n    assertEquals(\"value2\", props.getProperty(\"param2\"), \"property 2\");\r\n    final List<?> argsleft = cl.getArgList();\r\n    assertEquals(0, argsleft.size(), \"Should be no arg left\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-cli\\src\\test\\java\\org\\apache\\commons\\cli\\AbstractParserTestCase.java",
  "methodName" : "testPropertyOptionFlags",
  "sourceCode" : "@Test\r\nvoid testPropertyOptionFlags() throws Exception {\r\n    final Options options = new Options();\r\n    options.addOption(\"a\", false, \"toggle -a\");\r\n    options.addOption(\"c\", \"c\", false, \"toggle -c\");\r\n    options.addOption(OptionBuilder.hasOptionalArg().create('e'));\r\n    Properties properties = new Properties();\r\n    properties.setProperty(\"a\", \"true\");\r\n    properties.setProperty(\"c\", \"yes\");\r\n    properties.setProperty(\"e\", \"1\");\r\n    CommandLine cmd = parse(parser, options, null, properties);\r\n    assertTrue(cmd.hasOption(\"a\"));\r\n    assertTrue(cmd.hasOption(\"c\"));\r\n    assertTrue(cmd.hasOption(\"e\"));\r\n    properties = new Properties();\r\n    properties.setProperty(\"a\", \"false\");\r\n    properties.setProperty(\"c\", \"no\");\r\n    properties.setProperty(\"e\", \"0\");\r\n    cmd = parse(parser, options, null, properties);\r\n    assertFalse(cmd.hasOption(\"a\"));\r\n    assertFalse(cmd.hasOption(\"c\"));\r\n    // this option accepts an argument\r\n    assertTrue(cmd.hasOption(\"e\"));\r\n    properties = new Properties();\r\n    properties.setProperty(\"a\", \"TRUE\");\r\n    properties.setProperty(\"c\", \"nO\");\r\n    properties.setProperty(\"e\", \"TrUe\");\r\n    cmd = parse(parser, options, null, properties);\r\n    assertTrue(cmd.hasOption(\"a\"));\r\n    assertFalse(cmd.hasOption(\"c\"));\r\n    assertTrue(cmd.hasOption(\"e\"));\r\n    properties = new Properties();\r\n    properties.setProperty(\"a\", \"just a string\");\r\n    properties.setProperty(\"e\", \"\");\r\n    cmd = parse(parser, options, null, properties);\r\n    assertFalse(cmd.hasOption(\"a\"));\r\n    assertFalse(cmd.hasOption(\"c\"));\r\n    assertTrue(cmd.hasOption(\"e\"));\r\n    properties = new Properties();\r\n    properties.setProperty(\"a\", \"0\");\r\n    properties.setProperty(\"c\", \"1\");\r\n    cmd = parse(parser, options, null, properties);\r\n    assertFalse(cmd.hasOption(\"a\"));\r\n    assertTrue(cmd.hasOption(\"c\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-cli\\src\\test\\java\\org\\apache\\commons\\cli\\AbstractParserTestCase.java",
  "methodName" : "testPropertyOptionGroup",
  "sourceCode" : "@Test\r\nvoid testPropertyOptionGroup() throws Exception {\r\n    final Options options = new Options();\r\n    final OptionGroup optionGroup1 = new OptionGroup();\r\n    optionGroup1.addOption(new Option(\"a\", null));\r\n    optionGroup1.addOption(new Option(\"b\", null));\r\n    options.addOptionGroup(optionGroup1);\r\n    final OptionGroup optionGroup2 = new OptionGroup();\r\n    optionGroup2.addOption(new Option(\"x\", null));\r\n    optionGroup2.addOption(new Option(\"y\", null));\r\n    options.addOptionGroup(optionGroup2);\r\n    final String[] args = { \"-a\" };\r\n    final Properties properties = new Properties();\r\n    properties.put(\"b\", \"true\");\r\n    properties.put(\"x\", \"true\");\r\n    final CommandLine cmd = parse(parser, options, args, properties);\r\n    assertTrue(cmd.hasOption(\"a\"));\r\n    assertFalse(cmd.hasOption(\"b\"));\r\n    assertTrue(cmd.hasOption(\"x\"));\r\n    assertFalse(cmd.hasOption(\"y\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-cli\\src\\test\\java\\org\\apache\\commons\\cli\\AbstractParserTestCase.java",
  "methodName" : "testPropertyOptionMultipleValues",
  "sourceCode" : "@Test\r\nvoid testPropertyOptionMultipleValues() throws Exception {\r\n    final Options options = new Options();\r\n    options.addOption(OptionBuilder.hasArgs().withValueSeparator(',').create('k'));\r\n    final Properties properties = new Properties();\r\n    properties.setProperty(\"k\", \"one,two\");\r\n    final CommandLine cmd = parse(parser, options, null, properties);\r\n    assertTrue(cmd.hasOption(\"k\"));\r\n    final String[] values = { \"one\", \"two\" };\r\n    assertArrayEquals(values, cmd.getOptionValues('k'));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-cli\\src\\test\\java\\org\\apache\\commons\\cli\\AbstractParserTestCase.java",
  "methodName" : "testPropertyOptionRequired",
  "sourceCode" : "@Test\r\nvoid testPropertyOptionRequired() throws Exception {\r\n    final Options options = new Options();\r\n    options.addOption(OptionBuilder.isRequired().create(\"f\"));\r\n    final Properties properties = new Properties();\r\n    properties.setProperty(\"f\", \"true\");\r\n    final CommandLine cmd = parse(parser, options, null, properties);\r\n    assertTrue(cmd.hasOption(\"f\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-cli\\src\\test\\java\\org\\apache\\commons\\cli\\AbstractParserTestCase.java",
  "methodName" : "testPropertyOptionSingularValue",
  "sourceCode" : "@Test\r\nvoid testPropertyOptionSingularValue() throws Exception {\r\n    final Options options = new Options();\r\n    options.addOption(OptionBuilder.hasOptionalArgs(2).withLongOpt(\"hide\").create());\r\n    final Properties properties = new Properties();\r\n    properties.setProperty(\"hide\", \"seek\");\r\n    final CommandLine cmd = parse(parser, options, null, properties);\r\n    assertTrue(cmd.hasOption(\"hide\"));\r\n    assertEquals(\"seek\", cmd.getOptionValue(\"hide\"));\r\n    assertFalse(cmd.hasOption(\"fake\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-cli\\src\\test\\java\\org\\apache\\commons\\cli\\AbstractParserTestCase.java",
  "methodName" : "testPropertyOptionUnexpected",
  "sourceCode" : "@Test\r\nvoid testPropertyOptionUnexpected() throws Exception {\r\n    final Options options = new Options();\r\n    final Properties properties = new Properties();\r\n    properties.setProperty(\"f\", \"true\");\r\n    assertThrows(UnrecognizedOptionException.class, () -> parse(parser, options, null, properties));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-cli\\src\\test\\java\\org\\apache\\commons\\cli\\AbstractParserTestCase.java",
  "methodName" : "testPropertyOverrideValues",
  "sourceCode" : "@Test\r\nvoid testPropertyOverrideValues() throws Exception {\r\n    final Options options = new Options();\r\n    options.addOption(OptionBuilder.hasOptionalArgs(2).create('i'));\r\n    options.addOption(OptionBuilder.hasOptionalArgs().create('j'));\r\n    final String[] args = { \"-j\", \"found\", \"-i\", \"ink\" };\r\n    final Properties properties = new Properties();\r\n    properties.setProperty(\"j\", \"seek\");\r\n    final CommandLine cmd = parse(parser, options, args, properties);\r\n    assertTrue(cmd.hasOption(\"j\"));\r\n    assertEquals(\"found\", cmd.getOptionValue(\"j\"));\r\n    assertTrue(cmd.hasOption(\"i\"));\r\n    assertEquals(\"ink\", cmd.getOptionValue(\"i\"));\r\n    assertFalse(cmd.hasOption(\"fake\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-cli\\src\\test\\java\\org\\apache\\commons\\cli\\AbstractParserTestCase.java",
  "methodName" : "testReuseOptionsTwice",
  "sourceCode" : "@Test\r\nvoid testReuseOptionsTwice() throws Exception {\r\n    final Options options = new Options();\r\n    options.addOption(OptionBuilder.isRequired().create('v'));\r\n    // first parsing\r\n    parser.parse(options, new String[] { \"-v\" });\r\n    // second parsing, with the same Options instance and an invalid command line\r\n    assertThrows(MissingOptionException.class, () -> parser.parse(options, new String[0]));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-cli\\src\\test\\java\\org\\apache\\commons\\cli\\AbstractParserTestCase.java",
  "methodName" : "testShortOptionConcatenatedQuoteHandling",
  "sourceCode" : "@Test\r\nvoid testShortOptionConcatenatedQuoteHandling() throws Exception {\r\n    final CommandLine cl = parser.parse(options, new String[] { \"-b\\\"quoted string\\\"\" });\r\n    assertEquals(\"quoted string\", cl.getOptionValue(\"b\"), \"Confirm -b\\\"arg\\\" strips quotes\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-cli\\src\\test\\java\\org\\apache\\commons\\cli\\AbstractParserTestCase.java",
  "methodName" : "testShortOptionQuoteHandling",
  "sourceCode" : "@Test\r\nvoid testShortOptionQuoteHandling() throws Exception {\r\n    final CommandLine cl = parser.parse(options, new String[] { \"-b\", \"\\\"quoted string\\\"\" });\r\n    assertEquals(\"quoted string\", cl.getOptionValue(\"b\"), \"Confirm -b \\\"arg\\\" strips quotes\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-cli\\src\\test\\java\\org\\apache\\commons\\cli\\AbstractParserTestCase.java",
  "methodName" : "testShortWithEqual",
  "sourceCode" : "@Test\r\nvoid testShortWithEqual() throws Exception {\r\n    final Options options = new Options();\r\n    options.addOption(OptionBuilder.withLongOpt(\"foo\").hasArg().create('f'));\r\n    final CommandLine cl = parser.parse(options, new String[] { \"-f=bar\" });\r\n    assertEquals(\"bar\", cl.getOptionValue(\"foo\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-cli\\src\\test\\java\\org\\apache\\commons\\cli\\AbstractParserTestCase.java",
  "methodName" : "testShortWithoutEqual",
  "sourceCode" : "@Test\r\nvoid testShortWithoutEqual() throws Exception {\r\n    final Options options = new Options();\r\n    options.addOption(OptionBuilder.withLongOpt(\"foo\").hasArg().create('f'));\r\n    final CommandLine cl = parser.parse(options, new String[] { \"-fbar\" });\r\n    assertEquals(\"bar\", cl.getOptionValue(\"foo\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-cli\\src\\test\\java\\org\\apache\\commons\\cli\\AbstractParserTestCase.java",
  "methodName" : "testShortWithUnexpectedArgument",
  "sourceCode" : "@Test\r\nvoid testShortWithUnexpectedArgument() throws Exception {\r\n    final Options options = new Options();\r\n    options.addOption(OptionBuilder.withLongOpt(\"foo\").create('f'));\r\n    final UnrecognizedOptionException e = assertThrows(UnrecognizedOptionException.class, () -> parser.parse(options, new String[] { \"-f=bar\" }));\r\n    assertEquals(\"-f=bar\", e.getOption());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-cli\\src\\test\\java\\org\\apache\\commons\\cli\\AbstractParserTestCase.java",
  "methodName" : "testSimpleLong",
  "sourceCode" : "@Test\r\nvoid testSimpleLong() throws Exception {\r\n    final CommandLine cl = parser.parse(options, new String[] { \"--enable-a\", \"--bfile\", \"toast\", \"foo\", \"bar\" });\r\n    assertTrue(cl.hasOption(\"a\"), \"Confirm -a is set\");\r\n    assertTrue(cl.hasOption(\"b\"), \"Confirm -b is set\");\r\n    assertEquals(\"toast\", cl.getOptionValue(\"b\"), \"Confirm arg of -b\");\r\n    assertEquals(\"toast\", cl.getOptionValue(\"bfile\"), \"Confirm arg of --bfile\");\r\n    assertEquals(2, cl.getArgList().size(), \"Confirm size of extra args\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-cli\\src\\test\\java\\org\\apache\\commons\\cli\\AbstractParserTestCase.java",
  "methodName" : "testSimpleShort",
  "sourceCode" : "@Test\r\nvoid testSimpleShort() throws Exception {\r\n    final CommandLine cl = parser.parse(options, new String[] { \"-a\", \"-b\", \"toast\", \"foo\", \"bar\" });\r\n    assertTrue(cl.hasOption(\"a\"), \"Confirm -a is set\");\r\n    assertTrue(cl.hasOption(\"b\"), \"Confirm -b is set\");\r\n    assertEquals(\"toast\", cl.getOptionValue(\"b\"), \"Confirm arg of -b\");\r\n    assertEquals(2, cl.getArgList().size(), \"Confirm size of extra args\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-cli\\src\\test\\java\\org\\apache\\commons\\cli\\AbstractParserTestCase.java",
  "methodName" : "testSingleDash",
  "sourceCode" : "@Test\r\nvoid testSingleDash() throws Exception {\r\n    final CommandLine cl = parser.parse(options, new String[] { \"--copt\", \"-b\", \"-\", \"-a\", \"-\" });\r\n    assertTrue(cl.hasOption(\"a\"), \"Confirm -a is set\");\r\n    assertTrue(cl.hasOption(\"b\"), \"Confirm -b is set\");\r\n    assertEquals(\"-\", cl.getOptionValue(\"b\"), \"Confirm arg of -b\");\r\n    assertEquals(1, cl.getArgList().size(), \"Confirm 1 extra arg: \" + cl.getArgList().size());\r\n    assertEquals(\"-\", cl.getArgList().get(0), \"Confirm value of extra arg: \" + cl.getArgList().get(0));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-cli\\src\\test\\java\\org\\apache\\commons\\cli\\AbstractParserTestCase.java",
  "methodName" : "testStopAtExpectedArg",
  "sourceCode" : "@Test\r\nvoid testStopAtExpectedArg() throws Exception {\r\n    final String[] args = { \"-b\", \"foo\" };\r\n    final CommandLine cl = parser.parse(options, args, true);\r\n    assertTrue(cl.hasOption('b'), \"Confirm -b is set\");\r\n    assertEquals(\"foo\", cl.getOptionValue('b'), \"Confirm -b is set\");\r\n    assertTrue(cl.getArgList().isEmpty(), \"Confirm no extra args: \" + cl.getArgList().size());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-cli\\src\\test\\java\\org\\apache\\commons\\cli\\AbstractParserTestCase.java",
  "methodName" : "testStopAtNonOptionLong",
  "sourceCode" : "@Test\r\nvoid testStopAtNonOptionLong() throws Exception {\r\n    final String[] args = { \"--zop==1\", \"-abtoast\", \"--b=bar\" };\r\n    final CommandLine cl = parser.parse(options, args, true);\r\n    assertFalse(cl.hasOption(\"a\"), \"Confirm -a is not set\");\r\n    assertFalse(cl.hasOption(\"b\"), \"Confirm -b is not set\");\r\n    assertEquals(3, cl.getArgList().size(), \"Confirm  3 extra args: \" + cl.getArgList().size());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-cli\\src\\test\\java\\org\\apache\\commons\\cli\\AbstractParserTestCase.java",
  "methodName" : "testStopAtNonOptionShort",
  "sourceCode" : "@Test\r\nvoid testStopAtNonOptionShort() throws Exception {\r\n    final CommandLine cl = parser.parse(options, new String[] { \"-z\", \"-a\", \"-btoast\" }, true);\r\n    assertFalse(cl.hasOption(\"a\"), \"Confirm -a is not set\");\r\n    assertEquals(3, cl.getArgList().size(), \"Confirm  3 extra args: \" + cl.getArgList().size());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-cli\\src\\test\\java\\org\\apache\\commons\\cli\\AbstractParserTestCase.java",
  "methodName" : "testStopAtUnexpectedArg",
  "sourceCode" : "@Test\r\nvoid testStopAtUnexpectedArg() throws Exception {\r\n    final CommandLine cl = parser.parse(options, new String[] { \"-c\", \"foober\", \"-b\", \"toast\" }, true);\r\n    assertTrue(cl.hasOption(\"c\"), \"Confirm -c is set\");\r\n    assertEquals(3, cl.getArgList().size(), \"Confirm  3 extra args: \" + cl.getArgList().size());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-cli\\src\\test\\java\\org\\apache\\commons\\cli\\AbstractParserTestCase.java",
  "methodName" : "testStopBursting",
  "sourceCode" : "@Test\r\nvoid testStopBursting() throws Exception {\r\n    final CommandLine cl = parser.parse(options, new String[] { \"-azc\" }, true);\r\n    assertTrue(cl.hasOption(\"a\"), \"Confirm -a is set\");\r\n    assertFalse(cl.hasOption(\"c\"), \"Confirm -c is not set\");\r\n    assertEquals(1, cl.getArgList().size(), \"Confirm  1 extra arg: \" + cl.getArgList().size());\r\n    assertTrue(cl.getArgList().contains(\"zc\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-cli\\src\\test\\java\\org\\apache\\commons\\cli\\AbstractParserTestCase.java",
  "methodName" : "testStopBursting2",
  "sourceCode" : "@Test\r\nvoid testStopBursting2() throws Exception {\r\n    CommandLine cl = parser.parse(options, new String[] { \"-c\", \"foobar\", \"-btoast\" }, true);\r\n    assertTrue(cl.hasOption(\"c\"), \"Confirm -c is set\");\r\n    assertEquals(2, cl.getArgList().size(), \"Confirm  2 extra args: \" + cl.getArgList().size());\r\n    cl = parser.parse(options, cl.getArgs());\r\n    assertFalse(cl.hasOption(\"c\"), \"Confirm -c is not set\");\r\n    assertTrue(cl.hasOption(\"b\"), \"Confirm -b is set\");\r\n    assertEquals(\"toast\", cl.getOptionValue(\"b\"), \"Confirm arg of -b\");\r\n    assertEquals(1, cl.getArgList().size(), \"Confirm  1 extra arg: \" + cl.getArgList().size());\r\n    assertEquals(\"foobar\", cl.getArgList().get(0), \"Confirm  value of extra arg: \" + cl.getArgList().get(0));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-cli\\src\\test\\java\\org\\apache\\commons\\cli\\AbstractParserTestCase.java",
  "methodName" : "testUnambiguousPartialLongOption1",
  "sourceCode" : "@Test\r\nvoid testUnambiguousPartialLongOption1() throws Exception {\r\n    final Options options = new Options();\r\n    options.addOption(OptionBuilder.withLongOpt(\"version\").create());\r\n    options.addOption(OptionBuilder.withLongOpt(\"help\").create());\r\n    final CommandLine cl = parser.parse(options, new String[] { \"--ver\" });\r\n    assertTrue(cl.hasOption(\"version\"), \"Confirm --version is set\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-cli\\src\\test\\java\\org\\apache\\commons\\cli\\AbstractParserTestCase.java",
  "methodName" : "testUnambiguousPartialLongOption2",
  "sourceCode" : "@Test\r\nvoid testUnambiguousPartialLongOption2() throws Exception {\r\n    final Options options = new Options();\r\n    options.addOption(OptionBuilder.withLongOpt(\"version\").create());\r\n    options.addOption(OptionBuilder.withLongOpt(\"help\").create());\r\n    final CommandLine cl = parser.parse(options, new String[] { \"-ver\" });\r\n    assertTrue(cl.hasOption(\"version\"), \"Confirm --version is set\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-cli\\src\\test\\java\\org\\apache\\commons\\cli\\AbstractParserTestCase.java",
  "methodName" : "testUnambiguousPartialLongOption3",
  "sourceCode" : "@Test\r\nvoid testUnambiguousPartialLongOption3() throws Exception {\r\n    final Options options = new Options();\r\n    options.addOption(OptionBuilder.withLongOpt(\"verbose\").hasOptionalArg().create());\r\n    options.addOption(OptionBuilder.withLongOpt(\"help\").create());\r\n    final CommandLine cl = parser.parse(options, new String[] { \"--ver=1\" });\r\n    assertTrue(cl.hasOption(\"verbose\"), \"Confirm --verbose is set\");\r\n    assertEquals(\"1\", cl.getOptionValue(\"verbose\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-cli\\src\\test\\java\\org\\apache\\commons\\cli\\AbstractParserTestCase.java",
  "methodName" : "testUnambiguousPartialLongOption4",
  "sourceCode" : "@Test\r\nvoid testUnambiguousPartialLongOption4() throws Exception {\r\n    final Options options = new Options();\r\n    options.addOption(OptionBuilder.withLongOpt(\"verbose\").hasOptionalArg().create());\r\n    options.addOption(OptionBuilder.withLongOpt(\"help\").create());\r\n    final CommandLine cl = parser.parse(options, new String[] { \"-ver=1\" });\r\n    assertTrue(cl.hasOption(\"verbose\"), \"Confirm --verbose is set\");\r\n    assertEquals(\"1\", cl.getOptionValue(\"verbose\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-cli\\src\\test\\java\\org\\apache\\commons\\cli\\AbstractParserTestCase.java",
  "methodName" : "testUnlimitedArgs",
  "sourceCode" : "@Test\r\nvoid testUnlimitedArgs() throws Exception {\r\n    final Options options = new Options();\r\n    options.addOption(OptionBuilder.hasArgs().create(\"e\"));\r\n    options.addOption(OptionBuilder.hasArgs().create(\"f\"));\r\n    final CommandLine cl = parser.parse(options, new String[] { \"-e\", \"one\", \"two\", \"-f\", \"alpha\" });\r\n    assertTrue(cl.hasOption(\"e\"), \"Confirm -e is set\");\r\n    assertEquals(2, cl.getOptionValues(\"e\").length, \"number of arg for -e\");\r\n    assertTrue(cl.hasOption(\"f\"), \"Confirm -f is set\");\r\n    assertEquals(1, cl.getOptionValues(\"f\").length, \"number of arg for -f\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-cli\\src\\test\\java\\org\\apache\\commons\\cli\\AbstractParserTestCase.java",
  "methodName" : "testUnrecognizedOption",
  "sourceCode" : "@Test\r\nvoid testUnrecognizedOption() throws Exception {\r\n    final UnrecognizedOptionException e = assertThrows(UnrecognizedOptionException.class, () -> parser.parse(options, new String[] { \"-a\", \"-d\", \"-b\", \"toast\", \"foo\", \"bar\" }));\r\n    assertEquals(\"-d\", e.getOption());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-cli\\src\\test\\java\\org\\apache\\commons\\cli\\AbstractParserTestCase.java",
  "methodName" : "testUnrecognizedOptionWithBursting",
  "sourceCode" : "@Test\r\nvoid testUnrecognizedOptionWithBursting() throws Exception {\r\n    final UnrecognizedOptionException e = assertThrows(UnrecognizedOptionException.class, () -> parser.parse(options, new String[] { \"-adbtoast\", \"foo\", \"bar\" }));\r\n    assertEquals(\"-adbtoast\", e.getOption());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-cli\\src\\test\\java\\org\\apache\\commons\\cli\\AbstractParserTestCase.java",
  "methodName" : "testWithRequiredOption",
  "sourceCode" : "@Test\r\nvoid testWithRequiredOption() throws Exception {\r\n    final String[] args = { \"-b\", \"file\" };\r\n    final Options options = new Options();\r\n    options.addOption(\"a\", \"enable-a\", false, null);\r\n    options.addOption(OptionBuilder.withLongOpt(\"bfile\").hasArg().isRequired().create('b'));\r\n    final CommandLine cl = parser.parse(options, args);\r\n    assertFalse(cl.hasOption(\"a\"), \"Confirm -a is NOT set\");\r\n    assertTrue(cl.hasOption(\"b\"), \"Confirm -b is set\");\r\n    assertEquals(\"file\", cl.getOptionValue(\"b\"), \"Confirm arg of -b\");\r\n    assertTrue(cl.getArgList().isEmpty(), \"Confirm NO of extra args\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-cli\\src\\test\\java\\org\\apache\\commons\\cli\\AlreadySelectedExceptionTest.java",
  "methodName" : "testConstructor",
  "sourceCode" : "@Test\r\nvoid testConstructor() {\r\n    assertEquals(\"a\", new AlreadySelectedException(\"a\").getMessage());\r\n    assertNull(new AlreadySelectedException(\"a\").getOption());\r\n    final Option option = new Option(\"a\", \"d\");\r\n    final OptionGroup optionGroup = new OptionGroup();\r\n    assertNotNull(new AlreadySelectedException(optionGroup, option).getMessage());\r\n    assertEquals(option, new AlreadySelectedException(optionGroup, option).getOption());\r\n    assertEquals(optionGroup, new AlreadySelectedException(optionGroup, option).getOptionGroup());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-cli\\src\\test\\java\\org\\apache\\commons\\cli\\ApplicationTest.java",
  "methodName" : "testAnt",
  "sourceCode" : "/**\r\n * Ant test\r\n */\r\n@Test\r\nvoid testAnt() throws Exception {\r\n    // use the GNU parser\r\n    final CommandLineParser parser = new GnuParser();\r\n    final Options options = new Options();\r\n    options.addOption(\"help\", false, \"print this message\");\r\n    options.addOption(\"projecthelp\", false, \"print project help information\");\r\n    options.addOption(\"version\", false, \"print the version information and exit\");\r\n    options.addOption(\"quiet\", false, \"be extra quiet\");\r\n    options.addOption(\"verbose\", false, \"be extra verbose\");\r\n    options.addOption(\"debug\", false, \"print debug information\");\r\n    options.addOption(\"logfile\", true, \"use given file for log\");\r\n    options.addOption(\"logger\", true, \"the class which is to perform the logging\");\r\n    options.addOption(\"listener\", true, \"add an instance of a class as a project listener\");\r\n    options.addOption(\"buildfile\", true, \"use given buildfile\");\r\n    //@formatter:off\r\n    options.addOption(OptionBuilder.withDescription(\"use value for given property\").hasArgs().withValueSeparator().create('D'));\r\n    //, null, true, , false, true);\r\n    //@formatter:on\r\n    options.addOption(\"find\", true, \"search for buildfile towards the root of the filesystem and use it\");\r\n    final String[] args = { \"-buildfile\", \"mybuild.xml\", \"-Dproperty=value\", \"-Dproperty1=value1\", \"-projecthelp\" };\r\n    final CommandLine line = parser.parse(options, args);\r\n    // check multiple values\r\n    final String[] opts = line.getOptionValues(\"D\");\r\n    assertEquals(\"property\", opts[0]);\r\n    assertEquals(\"value\", opts[1]);\r\n    assertEquals(\"property1\", opts[2]);\r\n    assertEquals(\"value1\", opts[3]);\r\n    // check single value\r\n    assertEquals(line.getOptionValue(\"buildfile\"), \"mybuild.xml\");\r\n    // check option\r\n    assertTrue(line.hasOption(\"projecthelp\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-cli\\src\\test\\java\\org\\apache\\commons\\cli\\ApplicationTest.java",
  "methodName" : "testGroovy",
  "sourceCode" : "@Test\r\nvoid testGroovy() throws Exception {\r\n    final Options options = new Options();\r\n    //@formatter:off\r\n    options.addOption(OptionBuilder.withLongOpt(\"define\").withDescription(\"define a system property\").hasArg(true).withArgName(\"name=value\").create('D'));\r\n    options.addOption(OptionBuilder.hasArg(false).withDescription(\"usage information\").withLongOpt(\"help\").create('h'));\r\n    options.addOption(OptionBuilder.hasArg(false).withDescription(\"debug mode will print out full stack traces\").withLongOpt(\"debug\").create('d'));\r\n    options.addOption(OptionBuilder.hasArg(false).withDescription(\"display the Groovy and JVM versions\").withLongOpt(\"version\").create('v'));\r\n    options.addOption(OptionBuilder.withArgName(\"charset\").hasArg().withDescription(\"specify the encoding of the files\").withLongOpt(\"encoding\").create('c'));\r\n    options.addOption(OptionBuilder.withArgName(\"script\").hasArg().withDescription(\"specify a command line script\").create('e'));\r\n    options.addOption(OptionBuilder.withArgName(\"extension\").hasOptionalArg().withDescription(\"modify files in place; create backup if extension is given (for example \\'.bak\\')\").create('i'));\r\n    options.addOption(OptionBuilder.hasArg(false).withDescription(\"process files line by line using implicit 'line' variable\").create('n'));\r\n    options.addOption(OptionBuilder.hasArg(false).withDescription(\"process files line by line and print result (see also -n)\").create('p'));\r\n    options.addOption(OptionBuilder.withArgName(\"port\").hasOptionalArg().withDescription(\"listen on a port and process inbound lines\").create('l'));\r\n    options.addOption(OptionBuilder.withArgName(\"splitPattern\").hasOptionalArg().withDescription(\"split lines using splitPattern (default '\\\\s') using implicit 'split' variable\").withLongOpt(\"autosplit\").create('a'));\r\n    //@formatter:on\r\n    final Parser parser = new PosixParser();\r\n    final CommandLine line = parser.parse(options, new String[] { \"-e\", \"println 'hello'\" }, true);\r\n    assertTrue(line.hasOption('e'));\r\n    assertEquals(\"println 'hello'\", line.getOptionValue('e'));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-cli\\src\\test\\java\\org\\apache\\commons\\cli\\ApplicationTest.java",
  "methodName" : "testLs",
  "sourceCode" : "@Test\r\nvoid testLs() throws Exception {\r\n    // create the command line parser\r\n    final CommandLineParser parser = new PosixParser();\r\n    final Options options = new Options();\r\n    options.addOption(\"a\", \"all\", false, \"do not hide entries starting with .\");\r\n    options.addOption(\"A\", \"almost-all\", false, \"do not list implied . and ..\");\r\n    options.addOption(\"b\", \"escape\", false, \"print octal escapes for nongraphic characters\");\r\n    //@formatter:off\r\n    options.addOption(OptionBuilder.withLongOpt(\"block-size\").withDescription(\"use SIZE-byte blocks\").hasArg().withArgName(\"SIZE\").create());\r\n    //@formatter:on\r\n    options.addOption(\"B\", \"ignore-backups\", false, \"do not list implied entried ending with ~\");\r\n    options.addOption(\"c\", false, \"with -lt: sort by, and show, ctime (time of last modification of file status information) with \" + \"-l:show ctime and sort by name otherwise: sort by ctime\");\r\n    options.addOption(\"C\", false, \"list entries by columns\");\r\n    final String[] args = { \"--block-size=10\" };\r\n    final CommandLine line = parser.parse(options, args);\r\n    assertTrue(line.hasOption(\"block-size\"));\r\n    assertEquals(line.getOptionValue(\"block-size\"), \"10\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-cli\\src\\test\\java\\org\\apache\\commons\\cli\\ApplicationTest.java",
  "methodName" : "testMan",
  "sourceCode" : "/**\r\n * author Slawek Zachcial\r\n */\r\n@Test\r\nvoid testMan() {\r\n    final String cmdLine = \"man [-c|-f|-k|-w|-tZT device] [-adlhu7V] [-Mpath] [-Ppager] [-Slist] [-msystem] [-pstring] [-Llocale] [-eextension] [section]\" + \" page ...\";\r\n    //@formatter:off\r\n    final Options options = new Options().addOption(\"a\", \"all\", false, \"find all matching manual pages.\").addOption(\"d\", \"debug\", false, \"emit debugging messages.\").addOption(\"e\", \"extension\", false, \"limit search to extension type 'extension'.\").addOption(\"f\", \"whatis\", false, \"equivalent to whatis.\").addOption(\"k\", \"apropos\", false, \"equivalent to apropos.\").addOption(\"w\", \"location\", false, \"print physical location of man page(s).\").addOption(\"l\", \"local-file\", false, \"interpret 'page' argument(s) as local file name(s)\").addOption(\"u\", \"update\", false, \"force a cache consistency check.\").//FIXME - should generate -r,--prompt string\r\n    addOption(\"r\", \"prompt\", true, \"provide 'less' pager with prompt.\").addOption(\"c\", \"catman\", false, \"used by catman to reformat out of date cat pages.\").addOption(\"7\", \"ascii\", false, \"display ASCII translation or certain latin1 chars.\").addOption(\"t\", \"troff\", false, \"use troff format pages.\").//FIXME - should generate -T,--troff-device device\r\n    addOption(\"T\", \"troff-device\", true, \"use groff with selected device.\").addOption(\"Z\", \"ditroff\", false, \"use groff with selected device.\").addOption(\"D\", \"default\", false, \"reset all options to their default values.\").//FIXME - should generate -M,--manpath path\r\n    addOption(\"M\", \"manpath\", true, \"set search path for manual pages to 'path'.\").//FIXME - should generate -P,--pager pager\r\n    addOption(\"P\", \"pager\", true, \"use program 'pager' to display output.\").//FIXME - should generate -S,--sections list\r\n    addOption(\"S\", \"sections\", true, \"use colon separated section list.\").//FIXME - should generate -m,--systems system\r\n    addOption(\"m\", \"systems\", true, \"search for man pages from other Unix system(s).\").//FIXME - should generate -L,--locale locale\r\n    addOption(\"L\", \"locale\", true, \"define the locale for this particular man search.\").//FIXME - should generate -p,--preprocessor string\r\n    addOption(\"p\", \"preprocessor\", true, \"string indicates which preprocessor to run.\\n\" + \" e - [n]eqn  p - pic     t - tbl\\n\" + \" g - grap    r - refer   v - vgrind\").addOption(\"V\", \"version\", false, \"show version.\").addOption(\"h\", \"help\", false, \"show this usage message.\");\r\n    //@formatter:on\r\n    final HelpFormatter hf = new HelpFormatter();\r\n    final String eol = System.lineSeparator();\r\n    final StringWriter out = new StringWriter();\r\n    hf.printHelp(new PrintWriter(out), 60, cmdLine, null, options, HelpFormatter.DEFAULT_LEFT_PAD, HelpFormatter.DEFAULT_DESC_PAD, null, false);\r\n    //@formatter:off\r\n    assertEquals(\"usage: man [-c|-f|-k|-w|-tZT device] [-adlhu7V] [-Mpath]\" + eol + \"           [-Ppager] [-Slist] [-msystem] [-pstring]\" + eol + \"           [-Llocale] [-eextension] [section] page ...\" + eol + \" -7,--ascii                display ASCII translation or\" + eol + \"                           certain latin1 chars.\" + eol + \" -a,--all                  find all matching manual pages.\" + eol + \" -c,--catman               used by catman to reformat out of\" + eol + \"                           date cat pages.\" + eol + \" -d,--debug                emit debugging messages.\" + eol + \" -D,--default              reset all options to their\" + eol + \"                           default values.\" + eol + \" -e,--extension            limit search to extension type\" + eol + \"                           'extension'.\" + eol + \" -f,--whatis               equivalent to whatis.\" + eol + \" -h,--help                 show this usage message.\" + eol + \" -k,--apropos              equivalent to apropos.\" + eol + \" -l,--local-file           interpret 'page' argument(s) as\" + eol + \"                           local file name(s)\" + eol + \" -L,--locale <arg>         define the locale for this\" + eol + \"                           particular man search.\" + eol + \" -M,--manpath <arg>        set search path for manual pages\" + eol + \"                           to 'path'.\" + eol + \" -m,--systems <arg>        search for man pages from other\" + eol + \"                           Unix system(s).\" + eol + \" -P,--pager <arg>          use program 'pager' to display\" + eol + \"                           output.\" + eol + \" -p,--preprocessor <arg>   string indicates which\" + eol + \"                           preprocessor to run.\" + eol + \"                           e - [n]eqn  p - pic     t - tbl\" + eol + \"                           g - grap    r - refer   v -\" + eol + \"                           vgrind\" + eol + \" -r,--prompt <arg>         provide 'less' pager with prompt.\" + eol + \" -S,--sections <arg>       use colon separated section list.\" + eol + \" -t,--troff                use troff format pages.\" + eol + \" -T,--troff-device <arg>   use groff with selected device.\" + eol + \" -u,--update               force a cache consistency check.\" + eol + \" -V,--version              show version.\" + eol + \" -w,--location             print physical location of man\" + eol + \"                           page(s).\" + eol + \" -Z,--ditroff              use groff with selected device.\" + eol, out.toString());\r\n    //@formatter:on\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-cli\\src\\test\\java\\org\\apache\\commons\\cli\\ApplicationTest.java",
  "methodName" : "testNLT",
  "sourceCode" : "/**\r\n * Real world test with long and short options.\r\n */\r\n@Test\r\nvoid testNLT() throws Exception {\r\n    final Option help = new Option(\"h\", \"help\", false, \"print this message\");\r\n    final Option version = new Option(\"v\", \"version\", false, \"print version information\");\r\n    final Option newRun = new Option(\"n\", \"new\", false, \"Create NLT cache entries only for new items\");\r\n    final Option trackerRun = new Option(\"t\", \"tracker\", false, \"Create NLT cache entries only for tracker items\");\r\n    //@formatter:off\r\n    final Option timeLimit = OptionBuilder.withLongOpt(\"limit\").hasArg().withValueSeparator().withDescription(\"Set time limit for execution, in minutes\").create(\"l\");\r\n    final Option age = OptionBuilder.withLongOpt(\"age\").hasArg().withValueSeparator().withDescription(\"Age (in days) of cache item before being recomputed\").create(\"a\");\r\n    final Option server = OptionBuilder.withLongOpt(\"server\").hasArg().withValueSeparator().withDescription(\"The NLT server address\").create(\"s\");\r\n    final Option numResults = OptionBuilder.withLongOpt(\"results\").hasArg().withValueSeparator().withDescription(\"Number of results per item\").create(\"r\");\r\n    final Option configFile = OptionBuilder.withLongOpt(\"file\").hasArg().withValueSeparator().withDescription(\"Use the specified configuration file\").create();\r\n    //@formatter:on\r\n    final Options options = new Options();\r\n    options.addOption(help);\r\n    options.addOption(version);\r\n    options.addOption(newRun);\r\n    options.addOption(trackerRun);\r\n    options.addOption(timeLimit);\r\n    options.addOption(age);\r\n    options.addOption(server);\r\n    options.addOption(numResults);\r\n    options.addOption(configFile);\r\n    // create the command line parser\r\n    final CommandLineParser parser = new PosixParser();\r\n    final String[] args = { \"-v\", \"-l\", \"10\", \"-age\", \"5\", \"-file\", \"filename\" };\r\n    final CommandLine line = parser.parse(options, args);\r\n    assertTrue(line.hasOption(\"v\"));\r\n    assertEquals(line.getOptionValue(\"l\"), \"10\");\r\n    assertEquals(line.getOptionValue(\"limit\"), \"10\");\r\n    assertEquals(line.getOptionValue(\"a\"), \"5\");\r\n    assertEquals(line.getOptionValue(\"age\"), \"5\");\r\n    assertEquals(line.getOptionValue(\"file\"), \"filename\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-cli\\src\\test\\java\\org\\apache\\commons\\cli\\ArgumentIsOptionTest.java",
  "methodName" : "testOption",
  "sourceCode" : "@Test\r\nvoid testOption() throws Exception {\r\n    final String[] args = { \"-p\" };\r\n    final CommandLine cl = parser.parse(options, args);\r\n    assertTrue(cl.hasOption(\"p\"), \"Confirm -p is set\");\r\n    assertFalse(cl.hasOption(\"attr\"), \"Confirm -attr is not set\");\r\n    assertEquals(0, cl.getArgs().length, \"Confirm all arguments recognized\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-cli\\src\\test\\java\\org\\apache\\commons\\cli\\ArgumentIsOptionTest.java",
  "methodName" : "testOptionAndOptionWithArgument",
  "sourceCode" : "@Test\r\nvoid testOptionAndOptionWithArgument() throws Exception {\r\n    final String[] args = { \"-p\", \"-attr\", \"p\" };\r\n    final CommandLine cl = parser.parse(options, args);\r\n    assertTrue(cl.hasOption(\"p\"), \"Confirm -p is set\");\r\n    assertTrue(cl.hasOption(\"attr\"), \"Confirm -attr is set\");\r\n    assertEquals(\"p\", cl.getOptionValue(\"attr\"), \"Confirm arg of -attr\");\r\n    assertEquals(0, cl.getArgs().length, \"Confirm all arguments recognized\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-cli\\src\\test\\java\\org\\apache\\commons\\cli\\ArgumentIsOptionTest.java",
  "methodName" : "testOptionWithArgument",
  "sourceCode" : "@Test\r\nvoid testOptionWithArgument() throws Exception {\r\n    final String[] args = { \"-attr\", \"p\" };\r\n    final CommandLine cl = parser.parse(options, args);\r\n    assertFalse(cl.hasOption(\"p\"), \"Confirm -p is set\");\r\n    assertTrue(cl.hasOption(\"attr\"), \"Confirm -attr is set\");\r\n    assertEquals(\"p\", cl.getOptionValue(\"attr\"), \"Confirm arg of -attr\");\r\n    assertEquals(0, cl.getArgs().length, \"Confirm all arguments recognized\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-cli\\src\\test\\java\\org\\apache\\commons\\cli\\BasicParserTest.java",
  "methodName" : "testAmbiguousLongWithoutEqualSingleDash",
  "sourceCode" : "@Override\r\n@Test\r\n@Disabled(\"not supported by the BasicParser\")\r\nvoid testAmbiguousLongWithoutEqualSingleDash() throws Exception {\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-cli\\src\\test\\java\\org\\apache\\commons\\cli\\BasicParserTest.java",
  "methodName" : "testAmbiguousLongWithoutEqualSingleDash2",
  "sourceCode" : "@Override\r\n@Test\r\n@Disabled(\"not supported by the BasicParser\")\r\nvoid testAmbiguousLongWithoutEqualSingleDash2() throws Exception {\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-cli\\src\\test\\java\\org\\apache\\commons\\cli\\BasicParserTest.java",
  "methodName" : "testAmbiguousPartialLongOption1",
  "sourceCode" : "@Override\r\n@Test\r\n@Disabled(\"not supported by the BasicParser\")\r\nvoid testAmbiguousPartialLongOption1() throws Exception {\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-cli\\src\\test\\java\\org\\apache\\commons\\cli\\BasicParserTest.java",
  "methodName" : "testAmbiguousPartialLongOption2",
  "sourceCode" : "@Override\r\n@Test\r\n@Disabled(\"not supported by the BasicParser\")\r\nvoid testAmbiguousPartialLongOption2() throws Exception {\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-cli\\src\\test\\java\\org\\apache\\commons\\cli\\BasicParserTest.java",
  "methodName" : "testAmbiguousPartialLongOption3",
  "sourceCode" : "@Override\r\n@Test\r\n@Disabled(\"not supported by the BasicParser\")\r\nvoid testAmbiguousPartialLongOption3() throws Exception {\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-cli\\src\\test\\java\\org\\apache\\commons\\cli\\BasicParserTest.java",
  "methodName" : "testAmbiguousPartialLongOption4",
  "sourceCode" : "@Override\r\n@Test\r\n@Disabled(\"not supported by the BasicParser\")\r\nvoid testAmbiguousPartialLongOption4() throws Exception {\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-cli\\src\\test\\java\\org\\apache\\commons\\cli\\BasicParserTest.java",
  "methodName" : "testBursting",
  "sourceCode" : "@Override\r\n@Test\r\n@Disabled(\"not supported by the BasicParser\")\r\nvoid testBursting() throws Exception {\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-cli\\src\\test\\java\\org\\apache\\commons\\cli\\BasicParserTest.java",
  "methodName" : "testDoubleDash2",
  "sourceCode" : "@Override\r\n@Test\r\n@Disabled(\"not supported by the BasicParser\")\r\nvoid testDoubleDash2() throws Exception {\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-cli\\src\\test\\java\\org\\apache\\commons\\cli\\BasicParserTest.java",
  "methodName" : "testLongOptionWithEqualsQuoteHandling",
  "sourceCode" : "@Override\r\n@Test\r\n@Disabled(\"not supported by the BasicParser\")\r\nvoid testLongOptionWithEqualsQuoteHandling() throws Exception {\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-cli\\src\\test\\java\\org\\apache\\commons\\cli\\BasicParserTest.java",
  "methodName" : "testLongWithEqualDoubleDash",
  "sourceCode" : "@Override\r\n@Test\r\n@Disabled(\"not supported by the BasicParser\")\r\nvoid testLongWithEqualDoubleDash() throws Exception {\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-cli\\src\\test\\java\\org\\apache\\commons\\cli\\BasicParserTest.java",
  "methodName" : "testLongWithEqualSingleDash",
  "sourceCode" : "@Override\r\n@Test\r\n@Disabled(\"not supported by the BasicParser\")\r\nvoid testLongWithEqualSingleDash() throws Exception {\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-cli\\src\\test\\java\\org\\apache\\commons\\cli\\BasicParserTest.java",
  "methodName" : "testLongWithoutEqualSingleDash",
  "sourceCode" : "@Override\r\n@Test\r\n@Disabled(\"not supported by the BasicParser\")\r\nvoid testLongWithoutEqualSingleDash() throws Exception {\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-cli\\src\\test\\java\\org\\apache\\commons\\cli\\BasicParserTest.java",
  "methodName" : "testMissingArgWithBursting",
  "sourceCode" : "@Override\r\n@Test\r\n@Disabled(\"not supported by the BasicParser\")\r\nvoid testMissingArgWithBursting() throws Exception {\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-cli\\src\\test\\java\\org\\apache\\commons\\cli\\BasicParserTest.java",
  "methodName" : "testNegativeOption",
  "sourceCode" : "@Override\r\n@Test\r\n@Disabled(\"not supported by the BasicParser (CLI-184)\")\r\nvoid testNegativeOption() throws Exception {\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-cli\\src\\test\\java\\org\\apache\\commons\\cli\\BasicParserTest.java",
  "methodName" : "testPartialLongOptionSingleDash",
  "sourceCode" : "@Override\r\n@Test\r\n@Disabled(\"not supported by the BasicParser\")\r\nvoid testPartialLongOptionSingleDash() throws Exception {\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-cli\\src\\test\\java\\org\\apache\\commons\\cli\\BasicParserTest.java",
  "methodName" : "testPropertiesOption1",
  "sourceCode" : "@Override\r\n@Test\r\n@Disabled(\"not supported by the BasicParser\")\r\nvoid testPropertiesOption1() throws Exception {\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-cli\\src\\test\\java\\org\\apache\\commons\\cli\\BasicParserTest.java",
  "methodName" : "testPropertiesOption2",
  "sourceCode" : "@Override\r\n@Test\r\n@Disabled(\"not supported by the BasicParser\")\r\nvoid testPropertiesOption2() throws Exception {\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-cli\\src\\test\\java\\org\\apache\\commons\\cli\\BasicParserTest.java",
  "methodName" : "testShortOptionConcatenatedQuoteHandling",
  "sourceCode" : "@Override\r\n@Test\r\n@Disabled(\"not supported by the BasicParser\")\r\nvoid testShortOptionConcatenatedQuoteHandling() throws Exception {\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-cli\\src\\test\\java\\org\\apache\\commons\\cli\\BasicParserTest.java",
  "methodName" : "testShortWithEqual",
  "sourceCode" : "@Override\r\n@Test\r\n@Disabled(\"not supported by the BasicParser\")\r\nvoid testShortWithEqual() throws Exception {\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-cli\\src\\test\\java\\org\\apache\\commons\\cli\\BasicParserTest.java",
  "methodName" : "testShortWithoutEqual",
  "sourceCode" : "@Override\r\n@Test\r\n@Disabled(\"not supported by the BasicParser\")\r\nvoid testShortWithoutEqual() throws Exception {\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-cli\\src\\test\\java\\org\\apache\\commons\\cli\\BasicParserTest.java",
  "methodName" : "testStopBursting",
  "sourceCode" : "@Override\r\n@Test\r\n@Disabled(\"not supported by the BasicParser\")\r\nvoid testStopBursting() throws Exception {\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-cli\\src\\test\\java\\org\\apache\\commons\\cli\\BasicParserTest.java",
  "methodName" : "testStopBursting2",
  "sourceCode" : "@Override\r\n@Test\r\n@Disabled(\"not supported by the BasicParser\")\r\nvoid testStopBursting2() throws Exception {\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-cli\\src\\test\\java\\org\\apache\\commons\\cli\\BasicParserTest.java",
  "methodName" : "testUnambiguousPartialLongOption1",
  "sourceCode" : "@Override\r\n@Test\r\n@Disabled(\"not supported by the BasicParser\")\r\nvoid testUnambiguousPartialLongOption1() throws Exception {\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-cli\\src\\test\\java\\org\\apache\\commons\\cli\\BasicParserTest.java",
  "methodName" : "testUnambiguousPartialLongOption2",
  "sourceCode" : "@Override\r\n@Test\r\n@Disabled(\"not supported by the BasicParser\")\r\nvoid testUnambiguousPartialLongOption2() throws Exception {\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-cli\\src\\test\\java\\org\\apache\\commons\\cli\\BasicParserTest.java",
  "methodName" : "testUnambiguousPartialLongOption3",
  "sourceCode" : "@Override\r\n@Test\r\n@Disabled(\"not supported by the BasicParser\")\r\nvoid testUnambiguousPartialLongOption3() throws Exception {\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-cli\\src\\test\\java\\org\\apache\\commons\\cli\\BasicParserTest.java",
  "methodName" : "testUnambiguousPartialLongOption4",
  "sourceCode" : "@Override\r\n@Test\r\n@Disabled(\"not supported by the BasicParser\")\r\nvoid testUnambiguousPartialLongOption4() throws Exception {\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-cli\\src\\test\\java\\org\\apache\\commons\\cli\\BasicParserTest.java",
  "methodName" : "testUnrecognizedOptionWithBursting",
  "sourceCode" : "@Override\r\n@Test\r\n@Disabled(\"not supported by the BasicParser\")\r\nvoid testUnrecognizedOptionWithBursting() throws Exception {\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-cli\\src\\test\\java\\org\\apache\\commons\\cli\\bug\\BugCLI133Test.java",
  "methodName" : "testOrder",
  "sourceCode" : "@Test\r\nvoid testOrder() throws ParseException {\r\n    final Option optionA = new Option(\"a\", \"first\");\r\n    final Options opts = new Options();\r\n    opts.addOption(optionA);\r\n    final PosixParser posixParser = new PosixParser();\r\n    final CommandLine line = posixParser.parse(opts, null);\r\n    assertFalse(line.hasOption((String) null));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-cli\\src\\test\\java\\org\\apache\\commons\\cli\\bug\\BugCLI13Test.java",
  "methodName" : "testCLI13",
  "sourceCode" : "@Test\r\nvoid testCLI13() throws ParseException {\r\n    final String debugOpt = \"debug\";\r\n    @SuppressWarnings(\"static-access\")\r\n    final Option //@formatter:off\r\n    debug = OptionBuilder.withArgName(debugOpt).withDescription(\"turn on debugging\").withLongOpt(debugOpt).hasArg().create('d');\r\n    //@formatter:on\r\n    final Options options = new Options();\r\n    options.addOption(debug);\r\n    final CommandLine commandLine = new PosixParser().parse(options, new String[] { \"-d\", \"true\" });\r\n    assertEquals(\"true\", commandLine.getOptionValue(debugOpt));\r\n    assertEquals(\"true\", commandLine.getOptionValue('d'));\r\n    assertTrue(commandLine.hasOption('d'));\r\n    assertTrue(commandLine.hasOption(debugOpt));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-cli\\src\\test\\java\\org\\apache\\commons\\cli\\bug\\BugCLI148Test.java",
  "methodName" : "testWorkaround1",
  "sourceCode" : "@Test\r\nvoid testWorkaround1() throws Exception {\r\n    final CommandLineParser parser = new PosixParser();\r\n    final String[] args = { \"-t-something\" };\r\n    final CommandLine commandLine = parser.parse(options, args);\r\n    assertEquals(\"-something\", commandLine.getOptionValue('t'));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-cli\\src\\test\\java\\org\\apache\\commons\\cli\\bug\\BugCLI148Test.java",
  "methodName" : "testWorkaround2",
  "sourceCode" : "@Test\r\nvoid testWorkaround2() throws Exception {\r\n    final CommandLineParser parser = new PosixParser();\r\n    final String[] args = { \"-t\", \"\\\"-something\\\"\" };\r\n    final CommandLine commandLine = parser.parse(options, args);\r\n    assertEquals(\"-something\", commandLine.getOptionValue('t'));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-cli\\src\\test\\java\\org\\apache\\commons\\cli\\bug\\BugCLI162Test.java",
  "methodName" : "testInfiniteLoop",
  "sourceCode" : "@Test\r\nvoid testInfiniteLoop() {\r\n    final Options options = new Options();\r\n    options.addOption(\"h\", \"help\", false, \"This is a looooong description\");\r\n    // used to hang & crash\r\n    formatter.printHelp(new PrintWriter(sw), 20, \"app\", null, options, HelpFormatter.DEFAULT_LEFT_PAD, HelpFormatter.DEFAULT_DESC_PAD, null);\r\n    //@formatter:off\r\n    final String expected = \"usage: app\" + CR + \" -h,--help   This is\" + CR + \"             a\" + CR + \"             looooon\" + CR + \"             g\" + CR + \"             descrip\" + CR + \"             tion\" + CR;\r\n    //@formatter:on\r\n    assertEquals(expected, sw.toString());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-cli\\src\\test\\java\\org\\apache\\commons\\cli\\bug\\BugCLI162Test.java",
  "methodName" : "testLongLineChunking",
  "sourceCode" : "@Test\r\nvoid testLongLineChunking() {\r\n    final Options options = new Options();\r\n    //@formatter:off\r\n    options.addOption(\"x\", \"extralongarg\", false, \"This description has ReallyLongValuesThatAreLongerThanTheWidthOfTheColumns \" + \"and also other ReallyLongValuesThatAreHugerAndBiggerThanTheWidthOfTheColumnsBob, \" + \"yes. \");\r\n    //@formatter:on\r\n    formatter.printHelp(new PrintWriter(sw), 35, this.getClass().getName(), \"Header\", options, 0, 5, \"Footer\");\r\n    //@formatter:off\r\n    final String expected = \"usage:\" + CR + \"       org.apache.commons.cli.bug.B\" + CR + \"       ugCLI162Test\" + CR + \"Header\" + CR + \"-x,--extralongarg     This\" + CR + \"                      description\" + CR + \"                      has\" + CR + \"                      ReallyLongVal\" + CR + \"                      uesThatAreLon\" + CR + \"                      gerThanTheWid\" + CR + \"                      thOfTheColumn\" + CR + \"                      s and also\" + CR + \"                      other\" + CR + \"                      ReallyLongVal\" + CR + \"                      uesThatAreHug\" + CR + \"                      erAndBiggerTh\" + CR + \"                      anTheWidthOfT\" + CR + \"                      heColumnsBob,\" + CR + \"                      yes.\" + CR + \"Footer\" + CR;\r\n    //@formatter:on\r\n    assertEquals(expected, sw.toString(), \"Long arguments did not split as expected\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-cli\\src\\test\\java\\org\\apache\\commons\\cli\\bug\\BugCLI162Test.java",
  "methodName" : "testLongLineChunkingIndentIgnored",
  "sourceCode" : "@Test\r\nvoid testLongLineChunkingIndentIgnored() {\r\n    final Options options = new Options();\r\n    options.addOption(\"x\", \"extralongarg\", false, \"This description is Long.\");\r\n    formatter.printHelp(new PrintWriter(sw), 22, this.getClass().getName(), \"Header\", options, 0, 5, \"Footer\");\r\n    //@formatter:off\r\n    final String expected = \"usage:\" + CR + \"       org.apache.comm\" + CR + \"       ons.cli.bug.Bug\" + CR + \"       CLI162Test\" + CR + \"Header\" + CR + \"-x,--extralongarg\" + CR + \" This description is\" + CR + \" Long.\" + CR + \"Footer\" + CR;\r\n    //@formatter:on\r\n    assertEquals(expected, sw.toString(), \"Long arguments did not split as expected\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-cli\\src\\test\\java\\org\\apache\\commons\\cli\\bug\\BugCLI162Test.java",
  "methodName" : "testPrintHelpLongLines",
  "sourceCode" : "@Test\r\nvoid testPrintHelpLongLines() {\r\n    // Options build\r\n    final Options commandLineOptions;\r\n    commandLineOptions = new Options();\r\n    commandLineOptions.addOption(OPT_HELP, OPT_HELP_LONG, false, \"Prints help and quits\");\r\n    commandLineOptions.addOption(OPT_DRIVER, \"driver\", true, \"JDBC driver class name\");\r\n    //@formatter:off\r\n    commandLineOptions.addOption(OPT_DRIVER_INFO, \"info\", false, \"Prints driver information and properties. If \" + OPT + OPT_CONNECTION + \" is not specified, all drivers on the classpath are displayed.\");\r\n    //@formatter:on\r\n    commandLineOptions.addOption(OPT_CONNECTION, \"url\", true, \"Connection URL\");\r\n    commandLineOptions.addOption(OPT_USER, \"user\", true, \"A database user name\");\r\n    //@formatter:off\r\n    commandLineOptions.addOption(OPT_PASSWORD, OPT_PASSWORD_L, true, \"The database password for the user specified with the \" + OPT + OPT_USER + \" option. You can obfuscate the password with org.mortbay.jetty.security.Password,\" + \" see https://docs.codehaus.org/display/JETTY/Securing+Passwords\");\r\n    //@formatter:on\r\n    commandLineOptions.addOption(OPT_SQL, OPT_SQL_L, true, \"Runs SQL or {call stored_procedure(?, ?)} or {?=call function(?, ?)}\");\r\n    commandLineOptions.addOption(OPT_FILE_SFMD, \"sfmd\", true, \"Writes a SFMD file for the given SQL\");\r\n    commandLineOptions.addOption(OPT_FILE_BINDING, \"jdbc\", true, \"Writes a JDBC binding node file for the given SQL\");\r\n    commandLineOptions.addOption(OPT_FILE_JDBC, \"node\", true, \"Writes a JDBC node file for the given SQL (internal debugging)\");\r\n    commandLineOptions.addOption(OPT_WRITE_TO_FILE, \"outfile\", true, \"Writes the SQL output to the given file\");\r\n    commandLineOptions.addOption(OPT_DESCRIPTION, \"description\", true, \"SFMD description. A default description is used if omited. Example: \" + OPT + OPT_DESCRIPTION + \" \\\"Runs such and such\\\"\");\r\n    commandLineOptions.addOption(OPT_INTERACTIVE, \"interactive\", false, \"Runs in interactive mode, reading and writing from the console, 'go' or '/' sends a statement\");\r\n    commandLineOptions.addOption(OPT_TIMING, \"printTiming\", false, \"Prints timing information\");\r\n    commandLineOptions.addOption(OPT_METADATA, \"printMetaData\", false, \"Prints metadata information\");\r\n    commandLineOptions.addOption(OPT_STACK_TRACE, \"printStack\", false, \"Prints stack traces on errors\");\r\n    //@formatter:off\r\n    Option option = new Option(OPT_COLUMN_NAMES, \"columnNames\", true, \"Column XML names; default names column labels. Example: \" + OPT + OPT_COLUMN_NAMES + \" \\\"cname1 cname2\\\"\");\r\n    //@formatter:on\r\n    commandLineOptions.addOption(option);\r\n    //@formatter:off\r\n    option = new Option(OPT_PARAM_NAMES, \"paramNames\", true, \"Parameter XML names; default names are param1, param2, etc. Example: \" + OPT + OPT_PARAM_NAMES + \" \\\"pname1 pname2\\\"\");\r\n    //@formatter:on\r\n    commandLineOptions.addOption(option);\r\n    //\r\n    final OptionGroup outTypesOptionGroup = new OptionGroup();\r\n    final String outTypesOptionGroupDoc = OPT + OPT_PARAM_TYPES_INT + \" and \" + OPT + OPT_PARAM_TYPES_NAME + \" are mutually exclusive.\";\r\n    final String typesClassName = Types.class.getName();\r\n    //@formatter:off\r\n    option = new Option(OPT_PARAM_TYPES_INT, \"paramTypes\", true, \"Parameter types from \" + typesClassName + \". \" + outTypesOptionGroupDoc + \" Example: \" + OPT + OPT_PARAM_TYPES_INT + \" \\\"-10 12\\\"\");\r\n    //@formatter:on\r\n    commandLineOptions.addOption(option);\r\n    //@formatter:off\r\n    option = new Option(OPT_PARAM_TYPES_NAME, \"paramTypeNames\", true, \"Parameter \" + typesClassName + \" names. \" + outTypesOptionGroupDoc + \" Example: \" + OPT + OPT_PARAM_TYPES_NAME + \" \\\"CURSOR VARCHAR\\\"\");\r\n    //@formatter:on\r\n    commandLineOptions.addOption(option);\r\n    commandLineOptions.addOptionGroup(outTypesOptionGroup);\r\n    //\r\n    final OptionGroup modesOptionGroup = new OptionGroup();\r\n    final String modesOptionGroupDoc = OPT + OPT_PARAM_MODES_INT + \" and \" + OPT + OPT_PARAM_MODES_NAME + \" are mutually exclusive.\";\r\n    //@formatter:off\r\n    option = new Option(OPT_PARAM_MODES_INT, \"paramModes\", true, \"Parameters modes (\" + ParameterMetaData.parameterModeIn + \"=IN, \" + ParameterMetaData.parameterModeInOut + \"=INOUT, \" + ParameterMetaData.parameterModeOut + \"=OUT, \" + ParameterMetaData.parameterModeUnknown + \"=Unknown\" + \"). \" + modesOptionGroupDoc + \" Example for 2 parameters, OUT and IN: \" + OPT + OPT_PARAM_MODES_INT + \" \\\"\" + ParameterMetaData.parameterModeOut + \" \" + ParameterMetaData.parameterModeIn + \"\\\"\");\r\n    //@formatter:on\r\n    modesOptionGroup.addOption(option);\r\n    //@formatter:off\r\n    option = new Option(OPT_PARAM_MODES_NAME, \"paramModeNames\", true, \"Parameters mode names (\" + PMODES + \"). \" + modesOptionGroupDoc + \" Example for 2 parameters, OUT and IN: \" + OPT + OPT_PARAM_MODES_NAME + \" \\\"\" + PMODE_OUT + \" \" + PMODE_IN + \"\\\"\");\r\n    //@formatter:on\r\n    modesOptionGroup.addOption(option);\r\n    commandLineOptions.addOptionGroup(modesOptionGroup);\r\n    option = new Option(null, OPT_TRIM_L, true, \"Trims leading and trailing spaces from all column values. Column XML names can be optionally specified to set which columns to trim.\");\r\n    option.setOptionalArg(true);\r\n    commandLineOptions.addOption(option);\r\n    option = new Option(OPT_JDBC_TO_SFMD, OPT_JDBC_TO_SFMD_L, true, \"Converts the JDBC file in the first argument to an SMFD file specified in the second argument.\");\r\n    option.setArgs(2);\r\n    commandLineOptions.addOption(option);\r\n    formatter.printHelp(new PrintWriter(sw), HelpFormatter.DEFAULT_WIDTH, this.getClass().getName(), null, commandLineOptions, HelpFormatter.DEFAULT_LEFT_PAD, HelpFormatter.DEFAULT_DESC_PAD, null);\r\n    //@formatter:on\r\n    assertEquals(EXPECTED, sw.toString());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-cli\\src\\test\\java\\org\\apache\\commons\\cli\\bug\\BugCLI18Test.java",
  "methodName" : "testCLI18",
  "sourceCode" : "@Test\r\nvoid testCLI18() {\r\n    final Options options = new Options();\r\n    options.addOption(new Option(\"a\", \"aaa\", false, \"aaaaaaa\"));\r\n    options.addOption(new Option(null, \"bbb\", false, \"bbbbbbb dksh fkshd fkhs dkfhsdk fhskd hksdks dhfowehfsdhfkjshf skfhkshf sf jkshfk sfh skfh skf f\"));\r\n    options.addOption(new Option(\"c\", null, false, \"ccccccc\"));\r\n    final HelpFormatter formatter = new HelpFormatter();\r\n    final StringWriter out = new StringWriter();\r\n    formatter.printHelp(new PrintWriter(out), 80, \"foobar\", \"dsfkfsh kdh hsd hsdh fkshdf ksdh fskdh fsdh fkshfk sfdkjhskjh fkjh fkjsh khsdkj hfskdhf skjdfh ksf khf s\", options, 2, 2, \"blort j jgj j jg jhghjghjgjhgjhg jgjhgj jhg jhg hjg jgjhghjg jhg hjg jhgjg jgjhghjg jg jgjhgjgjg jhg jhgjh\" + '\\r' + '\\n' + \"rarrr\", true);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-cli\\src\\test\\java\\org\\apache\\commons\\cli\\bug\\BugCLI252Test.java",
  "methodName" : "testAmbiquousOptionName",
  "sourceCode" : "@Test\r\nvoid testAmbiquousOptionName() {\r\n    assertThrows(AmbiguousOptionException.class, () -> new DefaultParser().parse(getOptions(), new String[] { \"--pref\" }));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-cli\\src\\test\\java\\org\\apache\\commons\\cli\\bug\\BugCLI252Test.java",
  "methodName" : "testExactOptionNameMatch",
  "sourceCode" : "@Test\r\nvoid testExactOptionNameMatch() throws ParseException {\r\n    new DefaultParser().parse(getOptions(), new String[] { \"--prefix\" });\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-cli\\src\\test\\java\\org\\apache\\commons\\cli\\bug\\BugCLI265Test.java",
  "methodName" : "testShouldParseConcatenatedShortOptions",
  "sourceCode" : "@Test\r\nvoid testShouldParseConcatenatedShortOptions() throws Exception {\r\n    final String[] concatenatedShortOptions = { \"-t1\", \"-ab\" };\r\n    final CommandLine commandLine = parser.parse(options, concatenatedShortOptions);\r\n    assertTrue(commandLine.hasOption(\"t1\"));\r\n    assertNull(commandLine.getOptionValue(\"t1\"));\r\n    assertTrue(commandLine.hasOption(\"a\"));\r\n    assertTrue(commandLine.hasOption(\"b\"));\r\n    assertFalse(commandLine.hasOption(\"last\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-cli\\src\\test\\java\\org\\apache\\commons\\cli\\bug\\BugCLI265Test.java",
  "methodName" : "testShouldParseShortOptionWithoutValue",
  "sourceCode" : "@Test\r\nvoid testShouldParseShortOptionWithoutValue() throws Exception {\r\n    final String[] twoShortOptions = { \"-t1\", \"-last\" };\r\n    final CommandLine commandLine = parser.parse(options, twoShortOptions);\r\n    assertTrue(commandLine.hasOption(\"t1\"));\r\n    assertNotEquals(commandLine.getOptionValue(\"t1\"), \"Second option has been used as value for first option\", \"-last\");\r\n    assertTrue(commandLine.hasOption(\"last\"), \"Second option has not been detected\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-cli\\src\\test\\java\\org\\apache\\commons\\cli\\bug\\BugCLI265Test.java",
  "methodName" : "testShouldParseShortOptionWithValue",
  "sourceCode" : "@Test\r\nvoid testShouldParseShortOptionWithValue() throws Exception {\r\n    final String[] shortOptionWithValue = { \"-t1\", \"path/to/my/db\" };\r\n    final CommandLine commandLine = parser.parse(options, shortOptionWithValue);\r\n    assertEquals(\"path/to/my/db\", commandLine.getOptionValue(\"t1\"));\r\n    assertFalse(commandLine.hasOption(\"last\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-cli\\src\\test\\java\\org\\apache\\commons\\cli\\bug\\BugCLI266Test.java",
  "methodName" : "testOptionComparatorDefaultOrder",
  "sourceCode" : "@Test\r\nvoid testOptionComparatorDefaultOrder() {\r\n    final HelpFormatter formatter = new HelpFormatter();\r\n    final List<Option> options = new ArrayList<>(getOptions().getOptions());\r\n    Collections.sort(options, formatter.getOptionComparator());\r\n    int i = 0;\r\n    for (final Option o : options) {\r\n        assertEquals(o.getOpt(), sortOrder.get(i));\r\n        i++;\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-cli\\src\\test\\java\\org\\apache\\commons\\cli\\bug\\BugCLI266Test.java",
  "methodName" : "testOptionComparatorInsertedOrder",
  "sourceCode" : "@Test\r\nvoid testOptionComparatorInsertedOrder() {\r\n    final Collection<Option> options = getOptions().getOptions();\r\n    int i = 0;\r\n    for (final Option o : options) {\r\n        assertEquals(o.getOpt(), insertedOrder.get(i));\r\n        i++;\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-cli\\src\\test\\java\\org\\apache\\commons\\cli\\bug\\BugCLI312Test.java",
  "methodName" : "testNoOptionValues",
  "sourceCode" : "@Test\r\nvoid testNoOptionValues() {\r\n    final Option o1 = Option.builder(\"A\").get();\r\n    final Option o2 = Option.builder().option(\"D\").longOpt(\"define\").numberOfArgs(2).valueSeparator('=').get();\r\n    final Options options = new Options().addOption(o1).addOption(o2);\r\n    final CommandLineParser parser = new DefaultParser();\r\n    assertThrows(MissingArgumentException.class, () -> parser.parse(options, \"-D -A\".split(\" \")));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-cli\\src\\test\\java\\org\\apache\\commons\\cli\\bug\\BugCLI312Test.java",
  "methodName" : "testPropertyStyleOption_withGetOptionProperties",
  "sourceCode" : "@Test\r\nvoid testPropertyStyleOption_withGetOptionProperties() throws ParseException {\r\n    final Option o1 = Option.builder().option(\"D\").longOpt(\"define\").numberOfArgs(2).valueSeparator('=').get();\r\n    final Options options = new Options();\r\n    options.addOption(o1);\r\n    final CommandLineParser parser = new DefaultParser();\r\n    final CommandLine cl = parser.parse(options, \"-Dv -Dw=1 -D x=2 -D y -D z=3 other\".split(\" \"));\r\n    assertArrayEquals(new String[] { \"v\", \"w\", \"1\", \"x\", \"2\", \"y\", \"z\", \"3\" }, cl.getOptionValues('D'));\r\n    final Properties properties = cl.getOptionProperties(\"D\");\r\n    assertEquals(\"true\", properties.getProperty(\"v\"));\r\n    assertEquals(\"1\", properties.getProperty(\"w\"));\r\n    assertEquals(\"2\", properties.getProperty(\"x\"));\r\n    assertEquals(\"true\", properties.getProperty(\"y\"));\r\n    assertEquals(\"3\", properties.getProperty(\"z\"));\r\n    assertEquals(5, properties.size());\r\n    assertEquals(\"other\", cl.getArgList().get(0));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-cli\\src\\test\\java\\org\\apache\\commons\\cli\\bug\\BugCLI312Test.java",
  "methodName" : "testPropertyStyleOption_withGetOptions",
  "sourceCode" : "@Test\r\nvoid testPropertyStyleOption_withGetOptions() throws ParseException {\r\n    final Option o1 = Option.builder().option(\"D\").longOpt(\"define\").numberOfArgs(2).valueSeparator('=').get();\r\n    final Options options = new Options();\r\n    options.addOption(o1);\r\n    final CommandLineParser parser = new DefaultParser();\r\n    final CommandLine cl = parser.parse(options, \"-Dv -Dw=1 -D x=2 -D y -D z=3 other\".split(\" \"));\r\n    assertArrayEquals(new String[] { \"v\", \"w\", \"1\", \"x\", \"2\", \"y\", \"z\", \"3\" }, cl.getOptionValues('D'));\r\n    int defineOptionsFound = 0;\r\n    for (final Option o : cl.getOptions()) {\r\n        if (\"D\".equals(o.getOpt())) {\r\n            defineOptionsFound++;\r\n            switch(defineOptionsFound) {\r\n                case 1:\r\n                    assertArrayEquals(new String[] { \"v\" }, o.getValues());\r\n                    break;\r\n                case 2:\r\n                    assertArrayEquals(new String[] { \"w\", \"1\" }, o.getValues());\r\n                    break;\r\n                case 3:\r\n                    assertArrayEquals(new String[] { \"x\", \"2\" }, o.getValues());\r\n                    break;\r\n                case 4:\r\n                    assertArrayEquals(new String[] { \"y\" }, o.getValues());\r\n                    break;\r\n                case 5:\r\n                    assertArrayEquals(new String[] { \"z\", \"3\" }, o.getValues());\r\n                    break;\r\n                default:\r\n                    fail(\"Didn't expect \" + defineOptionsFound + \" occurrences of -D\");\r\n                    break;\r\n            }\r\n        }\r\n    }\r\n    assertEquals(\"other\", cl.getArgList().get(0));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-cli\\src\\test\\java\\org\\apache\\commons\\cli\\bug\\BugCLI325Test.java",
  "methodName" : "testCli325",
  "sourceCode" : "@Test\r\nvoid testCli325() throws ParseException {\r\n    // @formatter:off\r\n    final Option option = Option.builder(\"x\").hasArgs().valueSeparator().desc(\"Multiple arg option with value separator.\").get();\r\n    // @formatter:on\r\n    final String[] args = { \"-x\", \"A=a\", \"B=b\" };\r\n    final CommandLine cmdLine = DefaultParser.builder().get().parse(new Options().addOption(option), args);\r\n    final Properties props = cmdLine.getOptionProperties(option);\r\n    assertEquals(2, props.size());\r\n    assertEquals(\"a\", props.get(\"A\"));\r\n    assertEquals(\"b\", props.get(\"B\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-cli\\src\\test\\java\\org\\apache\\commons\\cli\\bug\\BugCLI71Test.java",
  "methodName" : "testBasic",
  "sourceCode" : "@Test\r\nvoid testBasic() throws Exception {\r\n    final String[] args = { \"-a\", \"Caesar\", \"-k\", \"A\" };\r\n    final CommandLine line = parser.parse(options, args);\r\n    assertEquals(\"Caesar\", line.getOptionValue(\"a\"));\r\n    assertEquals(\"A\", line.getOptionValue(\"k\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-cli\\src\\test\\java\\org\\apache\\commons\\cli\\bug\\BugCLI71Test.java",
  "methodName" : "testGetsDefaultIfOptional",
  "sourceCode" : "@Test\r\nvoid testGetsDefaultIfOptional() throws Exception {\r\n    final String[] args = { \"-k\", \"-a\", \"Caesar\" };\r\n    options.getOption(\"k\").setOptionalArg(true);\r\n    final CommandLine line = parser.parse(options, args);\r\n    assertEquals(\"Caesar\", line.getOptionValue(\"a\"));\r\n    assertEquals(\"a\", line.getOptionValue('k', \"a\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-cli\\src\\test\\java\\org\\apache\\commons\\cli\\bug\\BugCLI71Test.java",
  "methodName" : "testLackOfError",
  "sourceCode" : "@Test\r\nvoid testLackOfError() throws Exception {\r\n    final String[] args = { \"-k\", \"-a\", \"Caesar\" };\r\n    final MissingArgumentException e = assertThrows(MissingArgumentException.class, () -> parser.parse(options, args));\r\n    assertEquals(\"k\", e.getOption().getOpt(), \"option missing an argument\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-cli\\src\\test\\java\\org\\apache\\commons\\cli\\bug\\BugCLI71Test.java",
  "methodName" : "testMistakenArgument",
  "sourceCode" : "@Test\r\nvoid testMistakenArgument() throws Exception {\r\n    String[] args = { \"-a\", \"Caesar\", \"-k\", \"A\" };\r\n    CommandLine line = parser.parse(options, args);\r\n    args = new String[] { \"-a\", \"Caesar\", \"-k\", \"a\" };\r\n    line = parser.parse(options, args);\r\n    assertEquals(\"Caesar\", line.getOptionValue(\"a\"));\r\n    assertEquals(\"a\", line.getOptionValue(\"k\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-cli\\src\\test\\java\\org\\apache\\commons\\cli\\bug\\BugsTest.java",
  "methodName" : "test11456",
  "sourceCode" : "@Test\r\nvoid test11456() throws Exception {\r\n    // POSIX\r\n    Options options = new Options();\r\n    options.addOption(OptionBuilder.hasOptionalArg().create('a'));\r\n    options.addOption(OptionBuilder.hasArg().create('b'));\r\n    String[] args = { \"-a\", \"-bvalue\" };\r\n    CommandLineParser parser = new PosixParser();\r\n    CommandLine cmd = parser.parse(options, args);\r\n    assertEquals(cmd.getOptionValue('b'), \"value\");\r\n    // GNU\r\n    options = new Options();\r\n    options.addOption(OptionBuilder.hasOptionalArg().create('a'));\r\n    options.addOption(OptionBuilder.hasArg().create('b'));\r\n    args = new String[] { \"-a\", \"-b\", \"value\" };\r\n    parser = new GnuParser();\r\n    cmd = parser.parse(options, args);\r\n    assertEquals(cmd.getOptionValue('b'), \"value\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-cli\\src\\test\\java\\org\\apache\\commons\\cli\\bug\\BugsTest.java",
  "methodName" : "test11457",
  "sourceCode" : "@Test\r\nvoid test11457() throws Exception {\r\n    final Options options = new Options();\r\n    options.addOption(OptionBuilder.withLongOpt(\"verbose\").create());\r\n    final String[] args = { \"--verbose\" };\r\n    final CommandLineParser parser = new PosixParser();\r\n    final CommandLine cmd = parser.parse(options, args);\r\n    assertTrue(cmd.hasOption(\"verbose\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-cli\\src\\test\\java\\org\\apache\\commons\\cli\\bug\\BugsTest.java",
  "methodName" : "test11458",
  "sourceCode" : "@Test\r\nvoid test11458() throws Exception {\r\n    final Options options = new Options();\r\n    options.addOption(OptionBuilder.withValueSeparator('=').hasArgs().create('D'));\r\n    options.addOption(OptionBuilder.withValueSeparator(':').hasArgs().create('p'));\r\n    final String[] args = { \"-DJAVA_HOME=/opt/java\", \"-pfile1:file2:file3\" };\r\n    final CommandLineParser parser = new PosixParser();\r\n    final CommandLine cmd = parser.parse(options, args);\r\n    String[] values = cmd.getOptionValues('D');\r\n    assertEquals(values[0], \"JAVA_HOME\");\r\n    assertEquals(values[1], \"/opt/java\");\r\n    values = cmd.getOptionValues('p');\r\n    assertEquals(values[0], \"file1\");\r\n    assertEquals(values[1], \"file2\");\r\n    assertEquals(values[2], \"file3\");\r\n    final Iterator<Option> iter = cmd.iterator();\r\n    while (iter.hasNext()) {\r\n        final Option opt = iter.next();\r\n        switch(opt.getId()) {\r\n            case 'D':\r\n                assertEquals(opt.getValue(0), \"JAVA_HOME\");\r\n                assertEquals(opt.getValue(1), \"/opt/java\");\r\n                break;\r\n            case 'p':\r\n                assertEquals(opt.getValue(0), \"file1\");\r\n                assertEquals(opt.getValue(1), \"file2\");\r\n                assertEquals(opt.getValue(2), \"file3\");\r\n                break;\r\n            default:\r\n                fail(\"-D option not found\");\r\n        }\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-cli\\src\\test\\java\\org\\apache\\commons\\cli\\bug\\BugsTest.java",
  "methodName" : "test11680",
  "sourceCode" : "@Test\r\nvoid test11680() throws Exception {\r\n    final Options options = new Options();\r\n    final Option optionF = options.addOption(\"f\", true, \"foobar\").getOption(\"f\");\r\n    final Option optionM = options.addOption(\"m\", true, \"missing\").getOption(\"m\");\r\n    final String[] args = { \"-f\", \"foo\" };\r\n    final CommandLineParser parser = new PosixParser();\r\n    final CommandLine cmd = parser.parse(options, args);\r\n    // 1.7.0 API:\r\n    cmd.getOptionValue(optionF, () -> \"default f\");\r\n    cmd.getOptionValue(optionM, () -> \"default m\");\r\n    // 1.7.0 API:\r\n    cmd.getOptionValue('f', () -> \"default f\");\r\n    cmd.getOptionValue('m', () -> \"default m\");\r\n    // 1.5.0 API:\r\n    cmd.getOptionValue(optionF, \"default f\");\r\n    cmd.getOptionValue(optionM, \"default m\");\r\n    // Original API:\r\n    cmd.getOptionValue(\"f\", \"default f\");\r\n    cmd.getOptionValue(\"m\", \"default m\");\r\n    //\r\n    assertNull(cmd.getOptionValue((String) null, (String) null));\r\n    assertEquals(\"default\", cmd.getOptionValue((String) null, \"default\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-cli\\src\\test\\java\\org\\apache\\commons\\cli\\bug\\BugsTest.java",
  "methodName" : "test12210",
  "sourceCode" : "@Test\r\nvoid test12210() throws Exception {\r\n    // create the main options object which will handle the first parameter\r\n    final Options mainOptions = new Options();\r\n    // There can be 2 main exclusive options: -exec|-rep\r\n    // Therefore, place them in an option group\r\n    String[] argv = { \"-exec\", \"-exec_opt1\", \"-exec_opt2\" };\r\n    final OptionGroup optionGroup = new OptionGroup();\r\n    optionGroup.addOption(new Option(\"exec\", false, \"description for this option\"));\r\n    optionGroup.addOption(new Option(\"rep\", false, \"description for this option\"));\r\n    mainOptions.addOptionGroup(optionGroup);\r\n    // for the exec option, there are 2 options...\r\n    final Options execOptions = new Options();\r\n    execOptions.addOption(\"exec_opt1\", false, \" desc\");\r\n    execOptions.addOption(\"exec_opt2\", false, \" desc\");\r\n    // similarly, for rep there are 2 options...\r\n    final Options repOptions = new Options();\r\n    repOptions.addOption(\"repopto\", false, \"desc\");\r\n    repOptions.addOption(\"repoptt\", false, \"desc\");\r\n    // create the parser\r\n    final GnuParser parser = new GnuParser();\r\n    // finally, parse the arguments:\r\n    // first parse the main options to see what the user has specified\r\n    // We set stopAtNonOption to true so it does not touch the remaining\r\n    // options\r\n    CommandLine cmd = parser.parse(mainOptions, argv, true);\r\n    // get the remaining options...\r\n    argv = cmd.getArgs();\r\n    if (cmd.hasOption(\"exec\")) {\r\n        cmd = parser.parse(execOptions, argv, false);\r\n        // process the exec_op1 and exec_opt2...\r\n        assertTrue(cmd.hasOption(\"exec_opt1\"));\r\n        assertTrue(cmd.hasOption(\"exec_opt2\"));\r\n    } else if (cmd.hasOption(\"rep\")) {\r\n        cmd = parser.parse(repOptions, argv, false);\r\n        // process the rep_op1 and rep_opt2...\r\n    } else {\r\n        fail(\"exec option not found\");\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-cli\\src\\test\\java\\org\\apache\\commons\\cli\\bug\\BugsTest.java",
  "methodName" : "test13425",
  "sourceCode" : "@Test\r\nvoid test13425() throws Exception {\r\n    final Options options = new Options();\r\n    //@formatter:off\r\n    final Option oldpass = OptionBuilder.withLongOpt(\"old-password\").withDescription(\"Use this option to specify the old password\").hasArg().create('o');\r\n    final Option newpass = OptionBuilder.withLongOpt(\"new-password\").withDescription(\"Use this option to specify the new password\").hasArg().create('n');\r\n    //@formatter:on\r\n    final String[] args = { \"-o\", \"-n\", \"newpassword\" };\r\n    options.addOption(oldpass);\r\n    options.addOption(newpass);\r\n    assertThrows(MissingArgumentException.class, () -> new PosixParser().parse(options, args));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-cli\\src\\test\\java\\org\\apache\\commons\\cli\\bug\\BugsTest.java",
  "methodName" : "test13666",
  "sourceCode" : "@Test\r\nvoid test13666() throws Exception {\r\n    final Options options = new Options();\r\n    final Option dirOption = OptionBuilder.withDescription(\"dir\").hasArg().create('d');\r\n    options.addOption(dirOption);\r\n    final PrintStream oldSystemOut = System.out;\r\n    try {\r\n        final ByteArrayOutputStream baos = new ByteArrayOutputStream();\r\n        final String eol = System.lineSeparator();\r\n        System.setOut(new PrintStream(baos));\r\n        final HelpFormatter formatter = new HelpFormatter();\r\n        formatter.printHelp(\"dir\", options);\r\n        assertEquals(\"usage: dir\" + eol + \" -d <arg>   dir\" + eol, baos.toString());\r\n    } finally {\r\n        System.setOut(oldSystemOut);\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-cli\\src\\test\\java\\org\\apache\\commons\\cli\\bug\\BugsTest.java",
  "methodName" : "test13666_Builder",
  "sourceCode" : "@Test\r\nvoid test13666_Builder() throws Exception {\r\n    final Options options = new Options();\r\n    final Option dirOption = OptionBuilder.withDescription(\"dir\").hasArg().create('d');\r\n    options.addOption(dirOption);\r\n    final ByteArrayOutputStream baos = new ByteArrayOutputStream();\r\n    final String eol = System.lineSeparator();\r\n    final HelpFormatter formatter = HelpFormatter.builder().setPrintWriter(new PrintWriter(baos)).get();\r\n    formatter.printHelp(\"dir\", options);\r\n    assertEquals(\"usage: dir\" + eol + \" -d <arg>   dir\" + eol, baos.toString());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-cli\\src\\test\\java\\org\\apache\\commons\\cli\\bug\\BugsTest.java",
  "methodName" : "test13935",
  "sourceCode" : "@Test\r\nvoid test13935() throws Exception {\r\n    final OptionGroup directions = new OptionGroup();\r\n    final Option left = new Option(\"l\", \"left\", false, \"go left\");\r\n    final Option right = new Option(\"r\", \"right\", false, \"go right\");\r\n    final Option straight = new Option(\"s\", \"straight\", false, \"go straight\");\r\n    final Option forward = new Option(\"f\", \"forward\", false, \"go forward\");\r\n    forward.setRequired(true);\r\n    directions.addOption(left);\r\n    directions.addOption(right);\r\n    directions.setRequired(true);\r\n    final Options opts = new Options();\r\n    opts.addOptionGroup(directions);\r\n    opts.addOption(straight);\r\n    final CommandLineParser parser = new PosixParser();\r\n    assertThrows(ParseException.class, () -> parser.parse(opts, ArrayUtils.EMPTY_STRING_ARRAY));\r\n    assertThrows(ParseException.class, () -> parser.parse(opts, new String[] { \"-s\" }));\r\n    String[] args = { \"-s\", \"-l\" };\r\n    CommandLine line = parser.parse(opts, args);\r\n    assertNotNull(line);\r\n    opts.addOption(forward);\r\n    args = new String[] { \"-s\", \"-l\", \"-f\" };\r\n    line = parser.parse(opts, args);\r\n    assertNotNull(line);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-cli\\src\\test\\java\\org\\apache\\commons\\cli\\bug\\BugsTest.java",
  "methodName" : "test14786",
  "sourceCode" : "@Test\r\nvoid test14786() throws Exception {\r\n    final Option o = OptionBuilder.isRequired().withDescription(\"test\").create(\"test\");\r\n    final Options opts = new Options();\r\n    opts.addOption(o);\r\n    opts.addOption(o);\r\n    final CommandLineParser parser = new GnuParser();\r\n    final String[] args = { \"-test\" };\r\n    final CommandLine line = parser.parse(opts, args);\r\n    assertTrue(line.hasOption(\"test\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-cli\\src\\test\\java\\org\\apache\\commons\\cli\\bug\\BugsTest.java",
  "methodName" : "test15046",
  "sourceCode" : "@Test\r\nvoid test15046() throws Exception {\r\n    final CommandLineParser parser = new PosixParser();\r\n    final String[] cliArgs = { \"-z\", \"c\" };\r\n    final Options options = new Options();\r\n    options.addOption(new Option(\"z\", \"timezone\", true, \"affected option\"));\r\n    parser.parse(options, cliArgs);\r\n    // now add conflicting option\r\n    options.addOption(\"c\", \"conflict\", true, \"conflict option\");\r\n    final CommandLine line = parser.parse(options, cliArgs);\r\n    assertEquals(line.getOptionValue('z'), \"c\");\r\n    assertFalse(line.hasOption(\"c\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-cli\\src\\test\\java\\org\\apache\\commons\\cli\\bug\\BugsTest.java",
  "methodName" : "test15648",
  "sourceCode" : "@Test\r\nvoid test15648() throws Exception {\r\n    final CommandLineParser parser = new PosixParser();\r\n    final String[] args = { \"-m\", \"\\\"Two Words\\\"\" };\r\n    final Option m = OptionBuilder.hasArgs().create(\"m\");\r\n    final Options options = new Options();\r\n    options.addOption(m);\r\n    final CommandLine line = parser.parse(options, args);\r\n    assertEquals(\"Two Words\", line.getOptionValue(\"m\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-cli\\src\\test\\java\\org\\apache\\commons\\cli\\bug\\BugsTest.java",
  "methodName" : "test31148",
  "sourceCode" : "@Test\r\nvoid test31148() throws ParseException {\r\n    final Option multiArgOption = new Option(\"o\", \"option with multiple args\");\r\n    multiArgOption.setArgs(1);\r\n    final Options options = new Options();\r\n    options.addOption(multiArgOption);\r\n    final Parser parser = new PosixParser();\r\n    final String[] args = {};\r\n    final Properties props = new Properties();\r\n    props.setProperty(\"o\", \"ovalue\");\r\n    final CommandLine cl = parser.parse(options, args, props);\r\n    assertTrue(cl.hasOption('o'));\r\n    assertEquals(\"ovalue\", cl.getOptionValue('o'));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-cli\\src\\test\\java\\org\\apache\\commons\\cli\\CommandLineTest.java",
  "methodName" : "testBadGetParsedOptionValue",
  "sourceCode" : "@Test\r\nvoid testBadGetParsedOptionValue() throws Exception {\r\n    final Options options = new Options();\r\n    options.addOption(Option.builder(\"i\").hasArg().type(Number.class).get());\r\n    options.addOption(Option.builder(\"c\").hasArg().converter(s -> Count.valueOf(s.toUpperCase())).get());\r\n    final CommandLineParser parser = new DefaultParser();\r\n    final CommandLine cmd = parser.parse(options, new String[] { \"-i\", \"foo\", \"-c\", \"bar\" });\r\n    assertEquals(NumberFormatException.class, assertThrows(ParseException.class, () -> cmd.getParsedOptionValue(\"i\")).getCause().getClass());\r\n    assertEquals(IllegalArgumentException.class, assertThrows(ParseException.class, () -> cmd.getParsedOptionValue(\"c\")).getCause().getClass());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-cli\\src\\test\\java\\org\\apache\\commons\\cli\\CommandLineTest.java",
  "methodName" : "testBuilderBuild",
  "sourceCode" : "@Test\r\nvoid testBuilderBuild() {\r\n    // @formatter:off\r\n    final CommandLine cmd = CommandLine.builder().addArg(\"foo\").addArg(\"bar\").addOption(Option.builder(\"T\").get()).build();\r\n    // @formatter:on\r\n    assertEquals(\"foo\", cmd.getArgs()[0]);\r\n    assertEquals(\"bar\", cmd.getArgList().get(1));\r\n    assertEquals(\"T\", cmd.getOptions()[0].getOpt());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-cli\\src\\test\\java\\org\\apache\\commons\\cli\\CommandLineTest.java",
  "methodName" : "testBuilderGet",
  "sourceCode" : "@Test\r\nvoid testBuilderGet() {\r\n    // @formatter:off\r\n    final CommandLine cmd = CommandLine.builder().addArg(\"foo\").addArg(\"bar\").addOption(Option.builder(\"T\").get()).get();\r\n    // @formatter:on\r\n    assertEquals(\"foo\", cmd.getArgs()[0]);\r\n    assertEquals(\"bar\", cmd.getArgList().get(1));\r\n    assertEquals(\"T\", cmd.getOptions()[0].getOpt());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-cli\\src\\test\\java\\org\\apache\\commons\\cli\\CommandLineTest.java",
  "methodName" : "testBuilderNullArgs",
  "sourceCode" : "@Test\r\nvoid testBuilderNullArgs() {\r\n    final CommandLine.Builder builder = CommandLine.builder();\r\n    builder.addArg(null).addArg(null);\r\n    builder.addOption(Option.builder(\"T\").get());\r\n    final CommandLine cmd = builder.build();\r\n    assertEquals(0, cmd.getArgs().length);\r\n    assertEquals(\"T\", cmd.getOptions()[0].getOpt());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-cli\\src\\test\\java\\org\\apache\\commons\\cli\\CommandLineTest.java",
  "methodName" : "testBuilderNullOption",
  "sourceCode" : "@Test\r\nvoid testBuilderNullOption() {\r\n    final CommandLine.Builder builder = CommandLine.builder();\r\n    builder.addArg(\"foo\").addArg(\"bar\");\r\n    builder.addOption(null);\r\n    builder.addOption(null);\r\n    builder.addOption(null);\r\n    final CommandLine cmd = builder.build();\r\n    assertEquals(\"foo\", cmd.getArgs()[0]);\r\n    assertEquals(\"bar\", cmd.getArgList().get(1));\r\n    assertEquals(0, cmd.getOptions().length);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-cli\\src\\test\\java\\org\\apache\\commons\\cli\\CommandLineTest.java",
  "methodName" : "testGetOptionProperties",
  "sourceCode" : "@Test\r\nvoid testGetOptionProperties() throws Exception {\r\n    final String[] args = { \"-Dparam1=value1\", \"-Dparam2=value2\", \"-Dparam3\", \"-Dparam4=value4\", \"-D\", \"--property\", \"foo=bar\" };\r\n    final Options options = new Options();\r\n    options.addOption(Option.builder(\"D\").valueSeparator().optionalArg(true).numberOfArgs(2).get());\r\n    options.addOption(Option.builder().valueSeparator().numberOfArgs(2).longOpt(\"property\").get());\r\n    final Parser parser = new GnuParser();\r\n    final CommandLine cl = parser.parse(options, args);\r\n    final Properties props = cl.getOptionProperties(\"D\");\r\n    assertNotNull(props, \"null properties\");\r\n    assertEquals(4, props.size(), \"number of properties in \" + props);\r\n    assertEquals(\"value1\", props.getProperty(\"param1\"), \"property 1\");\r\n    assertEquals(\"value2\", props.getProperty(\"param2\"), \"property 2\");\r\n    assertEquals(\"true\", props.getProperty(\"param3\"), \"property 3\");\r\n    assertEquals(\"value4\", props.getProperty(\"param4\"), \"property 4\");\r\n    assertEquals(\"bar\", cl.getOptionProperties(\"property\").getProperty(\"foo\"), \"property with long format\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-cli\\src\\test\\java\\org\\apache\\commons\\cli\\CommandLineTest.java",
  "methodName" : "testGetOptionPropertiesWithOption",
  "sourceCode" : "@Test\r\nvoid testGetOptionPropertiesWithOption() throws Exception {\r\n    final String[] args = { \"-Dparam1=value1\", \"-Dparam2=value2\", \"-Dparam3\", \"-Dparam4=value4\", \"-D\", \"--property\", \"foo=bar\" };\r\n    final Options options = new Options();\r\n    final Option optionD = Option.builder(\"D\").valueSeparator().numberOfArgs(2).optionalArg(true).get();\r\n    final Option optionProperty = Option.builder().valueSeparator().numberOfArgs(2).longOpt(\"property\").get();\r\n    options.addOption(optionD);\r\n    options.addOption(optionProperty);\r\n    final Parser parser = new GnuParser();\r\n    final CommandLine cl = parser.parse(options, args);\r\n    final Properties props = cl.getOptionProperties(optionD);\r\n    assertNotNull(props, \"null properties\");\r\n    assertEquals(4, props.size(), \"number of properties in \" + props);\r\n    assertEquals(\"value1\", props.getProperty(\"param1\"), \"property 1\");\r\n    assertEquals(\"value2\", props.getProperty(\"param2\"), \"property 2\");\r\n    assertEquals(\"true\", props.getProperty(\"param3\"), \"property 3\");\r\n    assertEquals(\"value4\", props.getProperty(\"param4\"), \"property 4\");\r\n    assertEquals(\"bar\", cl.getOptionProperties(optionProperty).getProperty(\"foo\"), \"property with long format\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-cli\\src\\test\\java\\org\\apache\\commons\\cli\\CommandLineTest.java",
  "methodName" : "testGetOptionsBuilder",
  "sourceCode" : "@Test\r\nvoid testGetOptionsBuilder() {\r\n    final CommandLine cmd = CommandLine.builder().build();\r\n    assertNotNull(cmd.getOptions());\r\n    assertEquals(0, cmd.getOptions().length);\r\n    cmd.addOption(null);\r\n    cmd.addOption(new Option(\"a\", null));\r\n    cmd.addOption(new Option(\"b\", null));\r\n    cmd.addOption(new Option(\"c\", null));\r\n    assertEquals(3, cmd.getOptions().length);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-cli\\src\\test\\java\\org\\apache\\commons\\cli\\CommandLineTest.java",
  "methodName" : "testGetOptionsCtor",
  "sourceCode" : "@Test\r\nvoid testGetOptionsCtor() {\r\n    final CommandLine cmd = new CommandLine();\r\n    assertNotNull(cmd.getOptions());\r\n    assertEquals(0, cmd.getOptions().length);\r\n    cmd.addOption(new Option(\"a\", null));\r\n    cmd.addOption(new Option(\"b\", null));\r\n    cmd.addOption(new Option(\"c\", null));\r\n    cmd.addOption(null);\r\n    assertEquals(3, cmd.getOptions().length);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-cli\\src\\test\\java\\org\\apache\\commons\\cli\\CommandLineTest.java",
  "methodName" : "testGetOptionValue",
  "sourceCode" : "/**\r\n * Test for get option value with and without default values.  Verifies that deprecated options only report as\r\n * deprecated once.\r\n * @param args the argument strings to parse.\r\n * @param opt the option to check for values with.\r\n * @param optionGroup the option group to check for values with.\r\n * @param optDep {@code true} if the opt is deprecated.\r\n * @param optValue  The value expected from opt.\r\n * @param grpDep {@code true} if the group is deprecated.\r\n * @param grpValue the value expected from the group.\r\n * @param grpOpt the option that is expected to be processed by the group.\r\n * @throws ParseException on parse error.\r\n */\r\n@ParameterizedTest(name = \"{0}, {1}\")\r\n@MethodSource(\"createOptionValueParameters\")\r\nvoid testGetOptionValue(final String[] args, final Option opt, final OptionGroup optionGroup, final boolean optDep, final String optValue, final boolean grpDep, final String grpValue, final Option grpOpt) throws ParseException {\r\n    final Options options = new Options().addOptionGroup(optionGroup);\r\n    final List<Option> handler = new ArrayList<>();\r\n    final CommandLine commandLine = DefaultParser.builder().setDeprecatedHandler(handler::add).get().parse(options, args);\r\n    final Supplier<String> thinger = () -> \"thing\";\r\n    final OptionGroup otherGroup = new OptionGroup().addOption(Option.builder(\"o\").longOpt(\"other\").hasArg().get()).addOption(Option.builder().option(\"p\").longOpt(\"part\").hasArg().get());\r\n    final OptionGroup nullGroup = null;\r\n    // test char option\r\n    assertEquals(optValue, commandLine.getOptionValue(asChar(opt)));\r\n    checkHandler(optDep, handler, opt);\r\n    assertEquals(optValue == null ? \"thing\" : optValue, commandLine.getOptionValue(asChar(opt), \"thing\"));\r\n    checkHandler(optDep, handler, opt);\r\n    assertEquals(optValue == null ? \"thing\" : optValue, commandLine.getOptionValue(asChar(opt), thinger));\r\n    checkHandler(optDep, handler, opt);\r\n    // test short option arg\r\n    assertEquals(optValue, commandLine.getOptionValue(opt.getOpt()));\r\n    checkHandler(optDep, handler, opt);\r\n    assertEquals(optValue == null ? \"thing\" : optValue, commandLine.getOptionValue(opt.getOpt(), \"thing\"));\r\n    checkHandler(optDep, handler, opt);\r\n    assertEquals(optValue == null ? \"thing\" : optValue, commandLine.getOptionValue(opt.getOpt(), thinger));\r\n    checkHandler(optDep, handler, opt);\r\n    // test long option arg\r\n    assertEquals(optValue, commandLine.getOptionValue(opt.getLongOpt()));\r\n    checkHandler(optDep, handler, opt);\r\n    assertEquals(optValue == null ? \"thing\" : optValue, commandLine.getOptionValue(opt.getLongOpt(), \"thing\"));\r\n    checkHandler(optDep, handler, opt);\r\n    assertEquals(optValue == null ? \"thing\" : optValue, commandLine.getOptionValue(opt.getLongOpt(), thinger));\r\n    checkHandler(optDep, handler, opt);\r\n    // test Option arg\r\n    assertEquals(optValue, commandLine.getOptionValue(opt));\r\n    checkHandler(optDep, handler, opt);\r\n    assertEquals(optValue == null ? \"thing\" : optValue, commandLine.getOptionValue(opt, \"thing\"));\r\n    checkHandler(optDep, handler, opt);\r\n    assertEquals(optValue == null ? \"thing\" : optValue, commandLine.getOptionValue(opt, thinger));\r\n    checkHandler(optDep, handler, opt);\r\n    // test option group  arg\r\n    assertEquals(grpValue, commandLine.getOptionValue(optionGroup));\r\n    checkHandler(grpDep, handler, grpOpt);\r\n    assertEquals(grpValue == null ? \"thing\" : grpValue, commandLine.getOptionValue(optionGroup, \"thing\"));\r\n    checkHandler(grpDep, handler, grpOpt);\r\n    assertEquals(grpValue == null ? \"thing\" : grpValue, commandLine.getOptionValue(optionGroup, thinger));\r\n    checkHandler(grpDep, handler, grpOpt);\r\n    // test other group arg\r\n    assertNull(commandLine.getOptionValue(otherGroup));\r\n    checkHandler(false, handler, grpOpt);\r\n    assertEquals(\"thing\", commandLine.getOptionValue(otherGroup, \"thing\"));\r\n    checkHandler(false, handler, grpOpt);\r\n    assertEquals(\"thing\", commandLine.getOptionValue(otherGroup, thinger));\r\n    checkHandler(false, handler, grpOpt);\r\n    // test null Group arg\r\n    assertNull(commandLine.getOptionValue(nullGroup));\r\n    checkHandler(false, handler, grpOpt);\r\n    assertEquals(\"thing\", commandLine.getOptionValue(nullGroup, \"thing\"));\r\n    checkHandler(false, handler, grpOpt);\r\n    assertEquals(\"thing\", commandLine.getOptionValue(nullGroup, thinger));\r\n    checkHandler(false, handler, grpOpt);\r\n    // test not an option\r\n    assertNull(commandLine.getOptionValue(\"Nope\"));\r\n    checkHandler(false, handler, opt);\r\n    assertEquals(\"thing\", commandLine.getOptionValue(\"Nope\", \"thing\"));\r\n    checkHandler(false, handler, opt);\r\n    assertEquals(\"thing\", commandLine.getOptionValue(\"Nope\", thinger));\r\n    checkHandler(false, handler, opt);\r\n}",
  "annotations" : [ "ParameterizedTest" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-cli\\src\\test\\java\\org\\apache\\commons\\cli\\CommandLineTest.java",
  "methodName" : "testGetOptionValues",
  "sourceCode" : "/**\r\n * Test for get option values with and without default values.  Verifies that deprecated options only report as\r\n * deprecated once.\r\n * @param args the argument strings to parse.\r\n * @param opt the option to check for values with.\r\n * @param optionGroup the option group to check for values with.\r\n * @param optDep {@code true} if the opt is deprecated.\r\n * @param optValue  The value expected from opt.\r\n * @param grpDep {@code true} if the group is deprecated.\r\n * @param grpValue the value expected from the group.\r\n * @param grpOpt the option that is expected to be processed by the group.\r\n * @throws ParseException on parse error.\r\n */\r\n@ParameterizedTest(name = \"{0}, {1}\")\r\n@MethodSource(\"createOptionValuesParameters\")\r\nvoid testGetOptionValues(final String[] args, final Option opt, final OptionGroup optionGroup, final boolean optDep, final String[] optValue, final boolean grpDep, final String[] grpValue, final Option grpOpt) throws ParseException {\r\n    final Options options = new Options().addOptionGroup(optionGroup);\r\n    final List<Option> handler = new ArrayList<>();\r\n    final CommandLine commandLine = DefaultParser.builder().setDeprecatedHandler(handler::add).get().parse(options, args);\r\n    final OptionGroup otherGroup = new OptionGroup().addOption(Option.builder(\"o\").longOpt(\"other\").hasArg().get()).addOption(Option.builder().option(\"p\").longOpt(\"part\").hasArg().get());\r\n    final OptionGroup nullGroup = null;\r\n    // test char option arg\r\n    assertArrayEquals(optValue, commandLine.getOptionValues(asChar(opt)));\r\n    checkHandler(optDep, handler, opt);\r\n    // test short option arg\r\n    assertArrayEquals(optValue, commandLine.getOptionValues(opt.getOpt()));\r\n    checkHandler(optDep, handler, opt);\r\n    // test long option arg\r\n    assertArrayEquals(optValue, commandLine.getOptionValues(opt.getLongOpt()));\r\n    checkHandler(optDep, handler, opt);\r\n    // test Option arg\r\n    assertArrayEquals(optValue, commandLine.getOptionValues(opt));\r\n    checkHandler(optDep, handler, opt);\r\n    // test OptionGroup arg\r\n    assertArrayEquals(grpValue, commandLine.getOptionValues(optionGroup));\r\n    checkHandler(grpDep, handler, grpOpt);\r\n    // test not an option\r\n    assertNull(commandLine.getOptionValues(\"Nope\"));\r\n    checkHandler(false, handler, opt);\r\n    // test other group arg\r\n    assertNull(commandLine.getOptionValues(otherGroup));\r\n    checkHandler(false, handler, grpOpt);\r\n    // test null group arg\r\n    assertNull(commandLine.getOptionValues(nullGroup));\r\n    checkHandler(false, handler, grpOpt);\r\n}",
  "annotations" : [ "ParameterizedTest" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-cli\\src\\test\\java\\org\\apache\\commons\\cli\\CommandLineTest.java",
  "methodName" : "testGetParsedOptionValue",
  "sourceCode" : "@ParameterizedTest(name = \"{0}, {1}\")\r\n@MethodSource(\"createParsedOptionValueParameters\")\r\nvoid testGetParsedOptionValue(final String[] args, final Option opt, final OptionGroup optionGroup, final boolean optDep, final Integer optValue, final boolean grpDep, final Integer grpValue, final Option grpOpt) throws ParseException {\r\n    final Options options = new Options().addOptionGroup(optionGroup);\r\n    final List<Option> handler = new ArrayList<>();\r\n    final CommandLine commandLine = DefaultParser.builder().setDeprecatedHandler(handler::add).get().parse(options, args);\r\n    final Supplier<Integer> thinger = () -> 2;\r\n    final OptionGroup otherGroup = new OptionGroup().addOption(Option.builder(\"o\").longOpt(\"other\").hasArg().get()).addOption(Option.builder().option(\"p\").longOpt(\"part\").hasArg().get());\r\n    final OptionGroup nullGroup = null;\r\n    final Integer thing = 2;\r\n    // test char option arg\r\n    assertEquals(optValue, commandLine.getParsedOptionValue(asChar(opt)));\r\n    checkHandler(optDep, handler, opt);\r\n    assertEquals(optValue == null ? thing : optValue, commandLine.getParsedOptionValue(asChar(opt), thing));\r\n    checkHandler(optDep, handler, opt);\r\n    assertEquals(optValue == null ? thing : optValue, commandLine.getParsedOptionValue(asChar(opt), thinger));\r\n    checkHandler(optDep, handler, opt);\r\n    // test short option arg\r\n    assertEquals(optValue, commandLine.getParsedOptionValue(opt.getOpt()));\r\n    checkHandler(optDep, handler, opt);\r\n    assertEquals(optValue == null ? thing : optValue, commandLine.getParsedOptionValue(opt.getOpt(), thing));\r\n    checkHandler(optDep, handler, opt);\r\n    assertEquals(optValue == null ? thing : optValue, commandLine.getParsedOptionValue(opt.getOpt(), thinger));\r\n    checkHandler(optDep, handler, opt);\r\n    // test long option arg\r\n    assertEquals(optValue, commandLine.getParsedOptionValue(opt.getLongOpt()));\r\n    checkHandler(optDep, handler, opt);\r\n    assertEquals(optValue == null ? thing : optValue, commandLine.getParsedOptionValue(opt.getLongOpt(), thing));\r\n    checkHandler(optDep, handler, opt);\r\n    assertEquals(optValue == null ? thing : optValue, commandLine.getParsedOptionValue(opt.getLongOpt(), thinger));\r\n    checkHandler(optDep, handler, opt);\r\n    // test Option arg\r\n    assertEquals(optValue, commandLine.getParsedOptionValue(opt));\r\n    checkHandler(optDep, handler, opt);\r\n    assertEquals(optValue == null ? thing : optValue, commandLine.getParsedOptionValue(opt, thing));\r\n    checkHandler(optDep, handler, opt);\r\n    assertEquals(optValue == null ? thing : optValue, commandLine.getParsedOptionValue(opt, thinger));\r\n    checkHandler(optDep, handler, opt);\r\n    // test OptionGroup arg\r\n    assertEquals(grpValue, commandLine.getParsedOptionValue(optionGroup));\r\n    checkHandler(grpDep, handler, grpOpt);\r\n    assertEquals(grpValue == null ? thing : grpValue, commandLine.getParsedOptionValue(optionGroup, thing));\r\n    checkHandler(grpDep, handler, grpOpt);\r\n    assertEquals(grpValue == null ? thing : grpValue, commandLine.getParsedOptionValue(optionGroup, thinger));\r\n    checkHandler(grpDep, handler, grpOpt);\r\n    // test other Group arg\r\n    assertNull(commandLine.getParsedOptionValue(otherGroup));\r\n    checkHandler(false, handler, grpOpt);\r\n    assertEquals(thing, commandLine.getParsedOptionValue(otherGroup, thing));\r\n    checkHandler(false, handler, grpOpt);\r\n    assertEquals(thing, commandLine.getParsedOptionValue(otherGroup, thinger));\r\n    checkHandler(false, handler, grpOpt);\r\n    // test null Group arg\r\n    assertNull(commandLine.getParsedOptionValue(nullGroup));\r\n    checkHandler(false, handler, grpOpt);\r\n    assertEquals(thing, commandLine.getParsedOptionValue(nullGroup, thing));\r\n    checkHandler(false, handler, grpOpt);\r\n    assertEquals(thing, commandLine.getParsedOptionValue(nullGroup, thinger));\r\n    checkHandler(false, handler, grpOpt);\r\n    // test not an option\r\n    assertNull(commandLine.getParsedOptionValue(\"Nope\"));\r\n    checkHandler(false, handler, opt);\r\n    assertEquals(thing, commandLine.getParsedOptionValue(\"Nope\", thing));\r\n    checkHandler(false, handler, opt);\r\n    assertEquals(thing, commandLine.getParsedOptionValue(\"Nope\", thinger));\r\n    checkHandler(false, handler, opt);\r\n}",
  "annotations" : [ "ParameterizedTest" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-cli\\src\\test\\java\\org\\apache\\commons\\cli\\CommandLineTest.java",
  "methodName" : "testGetParsedOptionValues",
  "sourceCode" : "@ParameterizedTest(name = \"{0}, {1}\")\r\n@MethodSource(\"createParsedOptionValuesParameters\")\r\nvoid testGetParsedOptionValues(final String[] args, final Option opt, final OptionGroup optionGroup, final boolean optDep, final Integer[] optValue, final boolean grpDep, final Integer[] grpValue, final Option grpOpt) throws ParseException {\r\n    final Options options = new Options().addOptionGroup(optionGroup);\r\n    final List<Option> handler = new ArrayList<>();\r\n    final CommandLine commandLine = DefaultParser.builder().setDeprecatedHandler(handler::add).get().parse(options, args);\r\n    final Supplier<Integer[]> thinger = () -> new Integer[] { 2, 3 };\r\n    final OptionGroup otherGroup = new OptionGroup().addOption(Option.builder(\"o\").longOpt(\"other\").hasArg().get()).addOption(Option.builder().option(\"p\").longOpt(\"part\").hasArg().get());\r\n    final OptionGroup nullGroup = null;\r\n    final Integer[] thing = { 2, 3 };\r\n    // test char option arg\r\n    assertArrayEquals(optValue, commandLine.getParsedOptionValues(asChar(opt)));\r\n    checkHandler(optDep, handler, opt);\r\n    assertArrayEquals(optValue == null ? thing : optValue, commandLine.getParsedOptionValues(asChar(opt), thing));\r\n    checkHandler(optDep, handler, opt);\r\n    assertArrayEquals(optValue == null ? thing : optValue, commandLine.getParsedOptionValues(asChar(opt), thinger));\r\n    checkHandler(optDep, handler, opt);\r\n    // test short option arg\r\n    assertArrayEquals(optValue, commandLine.getParsedOptionValues(opt.getOpt()));\r\n    checkHandler(optDep, handler, opt);\r\n    assertArrayEquals(optValue == null ? thing : optValue, commandLine.getParsedOptionValues(opt.getOpt(), thing));\r\n    checkHandler(optDep, handler, opt);\r\n    assertArrayEquals(optValue == null ? thing : optValue, commandLine.getParsedOptionValues(opt.getOpt(), thinger));\r\n    checkHandler(optDep, handler, opt);\r\n    // test long option arg\r\n    assertArrayEquals(optValue, commandLine.getParsedOptionValues(opt.getLongOpt()));\r\n    checkHandler(optDep, handler, opt);\r\n    assertArrayEquals(optValue == null ? thing : optValue, commandLine.getParsedOptionValues(opt.getLongOpt(), thing));\r\n    checkHandler(optDep, handler, opt);\r\n    assertArrayEquals(optValue == null ? thing : optValue, commandLine.getParsedOptionValues(opt.getLongOpt(), thinger));\r\n    checkHandler(optDep, handler, opt);\r\n    // test Option arg\r\n    assertArrayEquals(optValue, commandLine.getParsedOptionValues(opt));\r\n    checkHandler(optDep, handler, opt);\r\n    assertArrayEquals(optValue == null ? thing : optValue, commandLine.getParsedOptionValues(opt, thing));\r\n    checkHandler(optDep, handler, opt);\r\n    assertArrayEquals(optValue == null ? thing : optValue, commandLine.getParsedOptionValues(opt, thinger));\r\n    checkHandler(optDep, handler, opt);\r\n    // test OptionGroup arg\r\n    assertArrayEquals(grpValue, commandLine.getParsedOptionValues(optionGroup));\r\n    checkHandler(grpDep, handler, grpOpt);\r\n    assertArrayEquals(grpValue == null ? thing : grpValue, commandLine.getParsedOptionValues(optionGroup, thing));\r\n    checkHandler(grpDep, handler, grpOpt);\r\n    assertArrayEquals(grpValue == null ? thing : grpValue, commandLine.getParsedOptionValues(optionGroup, thinger));\r\n    checkHandler(grpDep, handler, grpOpt);\r\n    // test other Group arg\r\n    assertNull(commandLine.getParsedOptionValues(otherGroup));\r\n    checkHandler(false, handler, grpOpt);\r\n    assertArrayEquals(thing, commandLine.getParsedOptionValues(otherGroup, thing));\r\n    checkHandler(false, handler, grpOpt);\r\n    assertArrayEquals(thing, commandLine.getParsedOptionValues(otherGroup, thinger));\r\n    checkHandler(false, handler, grpOpt);\r\n    // test null Group arg\r\n    assertNull(commandLine.getParsedOptionValues(nullGroup));\r\n    checkHandler(false, handler, grpOpt);\r\n    assertArrayEquals(thing, commandLine.getParsedOptionValues(nullGroup, thing));\r\n    checkHandler(false, handler, grpOpt);\r\n    assertArrayEquals(thing, commandLine.getParsedOptionValues(nullGroup, thinger));\r\n    checkHandler(false, handler, grpOpt);\r\n    // test not an option\r\n    assertNull(commandLine.getParsedOptionValues(\"Nope\"));\r\n    checkHandler(false, handler, opt);\r\n    assertArrayEquals(thing, commandLine.getParsedOptionValues(\"Nope\", thing));\r\n    checkHandler(false, handler, opt);\r\n    assertArrayEquals(thing, commandLine.getParsedOptionValues(\"Nope\", thinger));\r\n    checkHandler(false, handler, opt);\r\n}",
  "annotations" : [ "ParameterizedTest" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-cli\\src\\test\\java\\org\\apache\\commons\\cli\\CommandLineTest.java",
  "methodName" : "testHasOption",
  "sourceCode" : "/**\r\n * Tests the hasOption calls.\r\n * @param args the argument strings to parse.\r\n * @param opt the option to check for values with.\r\n * @param optionGroup the option group to check for values with.\r\n * @param optDep {@code true} if the opt is deprecated.\r\n * @param has {@code true} if the opt is present.\r\n * @param grpDep {@code true} if the group is deprecated.\r\n * @param hasGrp {@code true} if the group is present.\r\n * @param grpOpt the option that is expected to be processed by the group.\r\n * @throws ParseException on parsing error.\r\n */\r\n@ParameterizedTest(name = \"{0}, {1}\")\r\n@MethodSource(\"createHasOptionParameters\")\r\nvoid testHasOption(final String[] args, final Option opt, final OptionGroup optionGroup, final boolean optDep, final boolean has, final boolean grpDep, final boolean hasGrp, final Option grpOpt) throws ParseException {\r\n    final Options options = new Options().addOptionGroup(optionGroup);\r\n    final List<Option> handler = new ArrayList<>();\r\n    final CommandLine commandLine = DefaultParser.builder().setDeprecatedHandler(handler::add).get().parse(options, args);\r\n    final OptionGroup otherGroup = new OptionGroup().addOption(Option.builder(\"o\").longOpt(\"other\").hasArg().get()).addOption(Option.builder().option(\"p\").longOpt(\"part\").hasArg().get());\r\n    final OptionGroup nullGroup = null;\r\n    // test char option arg\r\n    assertEquals(has, commandLine.hasOption(asChar(opt)));\r\n    checkHandler(optDep, handler, opt);\r\n    // test short option arg\r\n    assertEquals(has, commandLine.hasOption(opt.getOpt()));\r\n    checkHandler(optDep, handler, opt);\r\n    // test long option arg\r\n    assertEquals(has, commandLine.hasOption(opt.getLongOpt()));\r\n    checkHandler(optDep, handler, opt);\r\n    // test Option arg\r\n    assertEquals(has, commandLine.hasOption(opt));\r\n    checkHandler(optDep, handler, opt);\r\n    // test OptionGroup arg\r\n    assertEquals(hasGrp, commandLine.hasOption(optionGroup));\r\n    checkHandler(grpDep, handler, grpOpt);\r\n    // test other group arg\r\n    assertFalse(commandLine.hasOption(otherGroup));\r\n    checkHandler(false, handler, grpOpt);\r\n    // test null group arg\r\n    assertFalse(commandLine.hasOption(nullGroup));\r\n    checkHandler(false, handler, grpOpt);\r\n    // test not an option\r\n    assertFalse(commandLine.hasOption(\"Nope\"));\r\n    checkHandler(false, handler, opt);\r\n}",
  "annotations" : [ "ParameterizedTest" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-cli\\src\\test\\java\\org\\apache\\commons\\cli\\CommandLineTest.java",
  "methodName" : "testHasOptionNoDeprecationHandler",
  "sourceCode" : "/**\r\n * Tests the hasOption calls.\r\n * @param args the argument strings to parse.\r\n * @param opt the option to check for values with.\r\n * @param optionGroup the option group to check for values with.\r\n * @param optDep {@code true} if the opt is deprecated.\r\n * @param has {@code true} if the opt is present.\r\n * @param grpDep {@code true} if the group is deprecated.\r\n * @param hasGrp {@code true} if the group is present.\r\n * @param grpOpt the option that is expected to be processed by the group.\r\n * @throws ParseException on parsing error.\r\n */\r\n@ParameterizedTest(name = \"{0}, {1}\")\r\n@MethodSource(\"createHasOptionParameters\")\r\nvoid testHasOptionNoDeprecationHandler(final String[] args, final Option opt, final OptionGroup optionGroup, final boolean optDep, final boolean has, final boolean grpDep, final boolean hasGrp, final Option grpOpt) throws ParseException {\r\n    final Options options = new Options().addOptionGroup(optionGroup);\r\n    final ByteArrayOutputStream baos = new ByteArrayOutputStream();\r\n    final CommandLine commandLine = DefaultParser.builder().get().parse(options, args);\r\n    final PrintStream ps = System.out;\r\n    try {\r\n        System.setOut(new PrintStream(baos));\r\n        // test char option arg\r\n        assertEquals(has, commandLine.hasOption(asChar(opt)));\r\n        assertWritten(optDep, baos);\r\n        // test short option arg\r\n        assertEquals(has, commandLine.hasOption(opt.getOpt()));\r\n        assertWritten(optDep, baos);\r\n        // test long option arg\r\n        assertEquals(has, commandLine.hasOption(opt.getLongOpt()));\r\n        assertWritten(optDep, baos);\r\n        // test Option arg\r\n        assertEquals(has, commandLine.hasOption(opt));\r\n        assertWritten(optDep, baos);\r\n        // test OptionGroup arg\r\n        assertEquals(hasGrp, commandLine.hasOption(optionGroup));\r\n        assertWritten(grpDep, baos);\r\n        // test not an option\r\n        assertFalse(commandLine.hasOption(\"Nope\"));\r\n        assertWritten(false, baos);\r\n    } finally {\r\n        System.setOut(ps);\r\n    }\r\n}",
  "annotations" : [ "ParameterizedTest" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-cli\\src\\test\\java\\org\\apache\\commons\\cli\\CommandLineTest.java",
  "methodName" : "testHasOptionNullDeprecationHandler",
  "sourceCode" : "/**\r\n * Tests the hasOption calls.\r\n * @param args the argument strings to parse.\r\n * @param opt the option to check for values with.\r\n * @param optionGroup the option group to check for values with.\r\n * @param optDep {@code true} if the opt is deprecated.\r\n * @param has {@code true} if the opt is present.\r\n * @param grpDep {@code true} if the group is deprecated.\r\n * @param hasGrp {@code true} if the group is present.\r\n * @param grpOpt the option that is expected to be processed by the group.\r\n * @throws ParseException on parsing error.\r\n */\r\n@ParameterizedTest(name = \"{0}, {1}\")\r\n@MethodSource(\"createHasOptionParameters\")\r\nvoid testHasOptionNullDeprecationHandler(final String[] args, final Option opt, final OptionGroup optionGroup, final boolean optDep, final boolean has, final boolean grpDep, final boolean hasGrp, final Option grpOpt) throws ParseException {\r\n    final Options options = new Options().addOptionGroup(optionGroup);\r\n    final ByteArrayOutputStream baos = new ByteArrayOutputStream();\r\n    final CommandLine commandLine = DefaultParser.builder().setDeprecatedHandler(null).get().parse(options, args);\r\n    final PrintStream ps = System.out;\r\n    try {\r\n        System.setOut(new PrintStream(baos));\r\n        // test char option arg\r\n        assertEquals(has, commandLine.hasOption(asChar(opt)));\r\n        assertWritten(false, baos);\r\n        // test short option arg\r\n        assertEquals(has, commandLine.hasOption(opt.getOpt()));\r\n        assertWritten(false, baos);\r\n        // test long option arg\r\n        assertEquals(has, commandLine.hasOption(opt.getLongOpt()));\r\n        assertWritten(false, baos);\r\n        // test Option arg\r\n        assertEquals(has, commandLine.hasOption(opt));\r\n        assertWritten(false, baos);\r\n        // test OptionGroup arg\r\n        assertEquals(hasGrp, commandLine.hasOption(optionGroup));\r\n        assertWritten(false, baos);\r\n        // test not an option\r\n        assertFalse(commandLine.hasOption(\"Nope\"));\r\n        assertWritten(false, baos);\r\n    } finally {\r\n        System.setOut(ps);\r\n    }\r\n}",
  "annotations" : [ "ParameterizedTest" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-cli\\src\\test\\java\\org\\apache\\commons\\cli\\CommandLineTest.java",
  "methodName" : "testNoDeprecationHandler",
  "sourceCode" : "@ParameterizedTest(name = \"{0}, {1}\")\r\n@MethodSource(\"createOptionValueParameters\")\r\nvoid testNoDeprecationHandler(final String[] args, final Option opt, final OptionGroup optionGroup, final boolean optDep, final String optValue, final boolean grpDep, final String grpValue, final Option grpOpt) throws ParseException {\r\n    final Options options = new Options().addOptionGroup(optionGroup);\r\n    final CommandLine commandLine = DefaultParser.builder().get().parse(options, args);\r\n    final Supplier<String> thinger = () -> \"thing\";\r\n    final Supplier<String> nullSupplier = null;\r\n    final ByteArrayOutputStream baos = new ByteArrayOutputStream();\r\n    final PrintStream ps = System.out;\r\n    try {\r\n        System.setOut(new PrintStream(baos));\r\n        final OptionGroup otherGroup = new OptionGroup().addOption(Option.builder(\"o\").longOpt(\"other\").hasArg().get()).addOption(Option.builder().option(\"p\").longOpt(\"part\").hasArg().get());\r\n        final OptionGroup nullGroup = null;\r\n        // test char option\r\n        assertEquals(optValue, commandLine.getOptionValue(asChar(opt)));\r\n        assertWritten(optDep, baos);\r\n        assertEquals(optValue == null ? \"thing\" : optValue, commandLine.getOptionValue(asChar(opt), \"thing\"));\r\n        assertWritten(optDep, baos);\r\n        assertEquals(optValue == null ? \"thing\" : optValue, commandLine.getOptionValue(asChar(opt), thinger));\r\n        assertWritten(optDep, baos);\r\n        assertEquals(optValue, commandLine.getOptionValue(asChar(opt), nullSupplier));\r\n        assertWritten(optDep, baos);\r\n        // test short option arg\r\n        assertEquals(optValue, commandLine.getOptionValue(opt.getOpt()));\r\n        assertWritten(optDep, baos);\r\n        assertEquals(optValue == null ? \"thing\" : optValue, commandLine.getOptionValue(opt.getOpt(), \"thing\"));\r\n        assertWritten(optDep, baos);\r\n        assertEquals(optValue == null ? \"thing\" : optValue, commandLine.getOptionValue(opt.getOpt(), thinger));\r\n        assertWritten(optDep, baos);\r\n        assertEquals(optValue, commandLine.getOptionValue(opt.getOpt(), nullSupplier));\r\n        assertWritten(optDep, baos);\r\n        // test long option arg\r\n        assertEquals(optValue, commandLine.getOptionValue(opt.getLongOpt()));\r\n        assertWritten(optDep, baos);\r\n        assertEquals(optValue == null ? \"thing\" : optValue, commandLine.getOptionValue(opt.getLongOpt(), \"thing\"));\r\n        assertWritten(optDep, baos);\r\n        assertEquals(optValue == null ? \"thing\" : optValue, commandLine.getOptionValue(opt.getLongOpt(), thinger));\r\n        assertWritten(optDep, baos);\r\n        assertEquals(optValue, commandLine.getOptionValue(opt.getLongOpt(), nullSupplier));\r\n        assertWritten(optDep, baos);\r\n        // test Option arg\r\n        assertEquals(optValue, commandLine.getOptionValue(opt));\r\n        assertWritten(optDep, baos);\r\n        assertEquals(optValue == null ? \"thing\" : optValue, commandLine.getOptionValue(opt, \"thing\"));\r\n        assertWritten(optDep, baos);\r\n        assertEquals(optValue == null ? \"thing\" : optValue, commandLine.getOptionValue(opt, thinger));\r\n        assertWritten(optDep, baos);\r\n        assertEquals(optValue, commandLine.getOptionValue(opt, nullSupplier));\r\n        assertWritten(optDep, baos);\r\n        // test optionGroup  arg\r\n        assertEquals(grpValue, commandLine.getOptionValue(optionGroup));\r\n        assertWritten(grpDep, baos);\r\n        assertEquals(grpValue == null ? \"thing\" : grpValue, commandLine.getOptionValue(optionGroup, \"thing\"));\r\n        assertWritten(grpDep, baos);\r\n        assertEquals(grpValue == null ? \"thing\" : grpValue, commandLine.getOptionValue(optionGroup, thinger));\r\n        assertWritten(grpDep, baos);\r\n        assertEquals(grpValue, commandLine.getOptionValue(optionGroup, nullSupplier));\r\n        assertWritten(grpDep, baos);\r\n        // test other group arg\r\n        assertNull(commandLine.getOptionValue(otherGroup));\r\n        assertWritten(false, baos);\r\n        assertEquals(\"thing\", commandLine.getOptionValue(otherGroup, \"thing\"));\r\n        assertWritten(false, baos);\r\n        assertEquals(\"thing\", commandLine.getOptionValue(otherGroup, thinger));\r\n        assertWritten(false, baos);\r\n        assertNull(commandLine.getOptionValue(otherGroup, nullSupplier));\r\n        assertWritten(false, baos);\r\n        // test null Group arg\r\n        assertNull(commandLine.getOptionValue(nullGroup));\r\n        assertWritten(false, baos);\r\n        assertEquals(\"thing\", commandLine.getOptionValue(nullGroup, \"thing\"));\r\n        assertWritten(false, baos);\r\n        assertEquals(\"thing\", commandLine.getOptionValue(nullGroup, thinger));\r\n        assertWritten(false, baos);\r\n        assertNull(commandLine.getOptionValue(nullGroup, nullSupplier));\r\n        assertWritten(false, baos);\r\n        // test not an option\r\n        assertNull(commandLine.getOptionValue(\"Nope\"));\r\n        assertWritten(false, baos);\r\n        assertEquals(\"thing\", commandLine.getOptionValue(\"Nope\", \"thing\"));\r\n        assertWritten(false, baos);\r\n        assertEquals(\"thing\", commandLine.getOptionValue(\"Nope\", thinger));\r\n        assertWritten(false, baos);\r\n        assertNull(commandLine.getOptionValue(\"Nope\", nullSupplier));\r\n        assertWritten(false, baos);\r\n    } finally {\r\n        System.setOut(ps);\r\n    }\r\n}",
  "annotations" : [ "ParameterizedTest" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-cli\\src\\test\\java\\org\\apache\\commons\\cli\\CommandLineTest.java",
  "methodName" : "testNullOption",
  "sourceCode" : "@Test\r\nvoid testNullOption() throws Exception {\r\n    final Options options = new Options();\r\n    final Option optI = Option.builder(\"i\").hasArg().type(Number.class).get();\r\n    final Option optF = Option.builder(\"f\").hasArg().get();\r\n    options.addOption(optI);\r\n    options.addOption(optF);\r\n    final CommandLineParser parser = new DefaultParser();\r\n    final CommandLine cmd = parser.parse(options, new String[] { \"-i\", \"123\", \"-f\", \"foo\" });\r\n    assertNull(cmd.getOptionValue((Option) null));\r\n    assertNull(cmd.getParsedOptionValue((Option) null));\r\n    assertNull(cmd.getOptionValue((OptionGroup) null));\r\n    assertNull(cmd.getParsedOptionValue((OptionGroup) null));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-cli\\src\\test\\java\\org\\apache\\commons\\cli\\ConverterTests.java",
  "methodName" : "testClass",
  "sourceCode" : "@Test\r\nvoid testClass() throws Exception {\r\n    assertNotNull(Converter.CLASS.apply(this.getClass().getName()), this.getClass().getName());\r\n    assertNotNull(Converter.CLASS.apply(this.getClass().getCanonicalName()), this.getClass().getCanonicalName());\r\n    assertThrows(ClassNotFoundException.class, () -> Converter.CLASS.apply(this.getClass().getSimpleName()), this.getClass().getSimpleName());\r\n    assertNotNull(Converter.CLASS.apply(this.getClass().getTypeName()), this.getClass().getTypeName());\r\n    assertThrows(ClassNotFoundException.class, () -> Converter.CLASS.apply(\"foo.bar\"));\r\n    assertNotNull(Converter.CLASS.apply(AClassWithoutADefaultConstructor.class.getName()));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-cli\\src\\test\\java\\org\\apache\\commons\\cli\\ConverterTests.java",
  "methodName" : "testDate",
  "sourceCode" : "@Test\r\nvoid testDate() throws Exception {\r\n    assertThrows(java.text.ParseException.class, () -> Converter.DATE.apply(\"whatever\"));\r\n    /*\r\n         * Dates calculated from strings are dependent upon configuration and environment settings for the\r\n         * machine on which the test is running.  To avoid this problem, convert the time into a string\r\n         * and then unparse that using the converter.  This produces strings that always match the correct\r\n         * time zone.\r\n         */\r\n    final Date expected = new Date(1023400137000L);\r\n    final DateFormat dateFormat = new SimpleDateFormat(\"EEE MMM dd HH:mm:ss zzz yyyy\");\r\n    final String formatted = dateFormat.format(expected);\r\n    assertEquals(expected, Converter.DATE.apply(formatted));\r\n    assertThrows(java.text.ParseException.class, () -> Converter.DATE.apply(\"Jun 06 17:48:57 EDT 2002\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-cli\\src\\test\\java\\org\\apache\\commons\\cli\\ConverterTests.java",
  "methodName" : "testFile",
  "sourceCode" : "@Test\r\nvoid testFile() throws Exception {\r\n    final URL url = this.getClass().getClassLoader().getResource(\"./org/apache/commons/cli/existing-readable.file\");\r\n    final String fileName = url.toString().substring(\"file:\".length());\r\n    assertNotNull(Converter.FILE.apply(fileName));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-cli\\src\\test\\java\\org\\apache\\commons\\cli\\ConverterTests.java",
  "methodName" : "testNumber",
  "sourceCode" : "@ParameterizedTest\r\n@MethodSource(\"numberTestParameters\")\r\nvoid testNumber(final String str, final Number expected) throws Exception {\r\n    if (expected != null) {\r\n        assertEquals(expected, Converter.NUMBER.apply(str));\r\n    } else {\r\n        assertThrows(NumberFormatException.class, () -> Converter.NUMBER.apply(str));\r\n    }\r\n}",
  "annotations" : [ "ParameterizedTest" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-cli\\src\\test\\java\\org\\apache\\commons\\cli\\ConverterTests.java",
  "methodName" : "testObject",
  "sourceCode" : "@Test\r\nvoid testObject() throws Exception {\r\n    assertNotNull(Converter.OBJECT.apply(this.getClass().getName()), this.getClass().getName());\r\n    assertNotNull(Converter.OBJECT.apply(this.getClass().getCanonicalName()), this.getClass().getCanonicalName());\r\n    assertThrows(ClassNotFoundException.class, () -> Converter.OBJECT.apply(this.getClass().getSimpleName()), this.getClass().getSimpleName());\r\n    assertNotNull(Converter.OBJECT.apply(this.getClass().getTypeName()), this.getClass().getTypeName());\r\n    assertThrows(ClassNotFoundException.class, () -> Converter.OBJECT.apply(\"foo.bar\"));\r\n    assertThrows(NoSuchMethodException.class, () -> Converter.OBJECT.apply(AClassWithoutADefaultConstructor.class.getName()));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-cli\\src\\test\\java\\org\\apache\\commons\\cli\\ConverterTests.java",
  "methodName" : "testUrl",
  "sourceCode" : "@Test\r\nvoid testUrl() throws Exception {\r\n    assertEquals(new URL(\"http://apache.org\"), Converter.URL.apply(\"http://apache.org\"));\r\n    assertThrows(java.net.MalformedURLException.class, () -> Converter.URL.apply(\"foo.bar\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-cli\\src\\test\\java\\org\\apache\\commons\\cli\\DefaultParserTest.java",
  "methodName" : "testBuilder",
  "sourceCode" : "@Test\r\nvoid testBuilder() {\r\n    // @formatter:off\r\n    final Builder builder = DefaultParser.builder().setStripLeadingAndTrailingQuotes(false).setAllowPartialMatching(false).setDeprecatedHandler(null);\r\n    // @formatter:on\r\n    parser = builder.build();\r\n    assertEquals(DefaultParser.class, parser.getClass());\r\n    parser = builder.get();\r\n    assertEquals(DefaultParser.class, parser.getClass());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-cli\\src\\test\\java\\org\\apache\\commons\\cli\\DefaultParserTest.java",
  "methodName" : "testDeprecated",
  "sourceCode" : "@Test\r\nvoid testDeprecated() throws ParseException {\r\n    final Set<Option> handler = new HashSet<>();\r\n    parser = DefaultParser.builder().setDeprecatedHandler(handler::add).build();\r\n    final Option opt1 = Option.builder().option(\"d1\").deprecated().get();\r\n    // @formatter:off\r\n    final Option opt2 = Option.builder().option(\"d2\").deprecated(DeprecatedAttributes.builder().setForRemoval(true).setSince(\"1.0\").setDescription(\"Do this instead.\").get()).get();\r\n    // @formatter:on\r\n    final Option opt3 = Option.builder().option(\"a\").get();\r\n    // @formatter:off\r\n    final CommandLine cl = parser.parse(new Options().addOption(opt1).addOption(opt2).addOption(opt3), new String[] { \"-d1\", \"-d2\", \"-a\" });\r\n    // @formatter:on\r\n    // Trigger handler:\r\n    assertTrue(cl.hasOption(opt1.getOpt()));\r\n    assertTrue(cl.hasOption(opt2.getOpt()));\r\n    assertTrue(cl.hasOption(opt3.getOpt()));\r\n    // Assert handler was triggered\r\n    assertTrue(handler.contains(opt1));\r\n    assertTrue(handler.contains(opt2));\r\n    assertFalse(handler.contains(opt3));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-cli\\src\\test\\java\\org\\apache\\commons\\cli\\DefaultParserTest.java",
  "methodName" : "testLegacyStopAtNonOption",
  "sourceCode" : "@Test\r\nvoid testLegacyStopAtNonOption() throws ParseException {\r\n    final Option a = Option.builder().option(\"a\").longOpt(\"first-letter\").get();\r\n    final Option b = Option.builder().option(\"b\").longOpt(\"second-letter\").get();\r\n    final Option c = Option.builder().option(\"c\").longOpt(\"third-letter\").get();\r\n    final Options options = new Options();\r\n    options.addOption(a);\r\n    options.addOption(b);\r\n    options.addOption(c);\r\n    // -d is rogue option\r\n    final String[] args = { \"-a\", \"-b\", \"-c\", \"-d\", \"arg1\", \"arg2\" };\r\n    final DefaultParser parser = new DefaultParser();\r\n    final CommandLine commandLine = parser.parse(options, args, null, true);\r\n    assertEquals(3, commandLine.getOptions().length);\r\n    assertEquals(3, commandLine.getArgs().length);\r\n    assertTrue(commandLine.getArgList().contains(\"-d\"));\r\n    assertTrue(commandLine.getArgList().contains(\"arg1\"));\r\n    assertTrue(commandLine.getArgList().contains(\"arg2\"));\r\n    final UnrecognizedOptionException e = assertThrows(UnrecognizedOptionException.class, () -> parser.parse(options, args, null, false));\r\n    assertTrue(e.getMessage().contains(\"-d\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-cli\\src\\test\\java\\org\\apache\\commons\\cli\\DefaultParserTest.java",
  "methodName" : "testLongOptionWithEqualsQuoteHandling",
  "sourceCode" : "@Override\r\n@Test\r\n@Disabled(\"Test case handled in the parameterized tests as \\\"DEFAULT behavior\\\"\")\r\nvoid testLongOptionWithEqualsQuoteHandling() throws Exception {\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-cli\\src\\test\\java\\org\\apache\\commons\\cli\\DefaultParserTest.java",
  "methodName" : "testParameterized",
  "sourceCode" : "@ParameterizedTest(name = \"{index}. {0}\")\r\n@ArgumentsSource(ExternalArgumentsProvider.class)\r\nvoid testParameterized(final String testName, final CommandLineParser parser, final String[] args, final String expected, final String option, final String message) throws Exception {\r\n    final CommandLine cl = parser.parse(options, args);\r\n    assertEquals(expected, cl.getOptionValue(option), message);\r\n}",
  "annotations" : [ "ParameterizedTest" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-cli\\src\\test\\java\\org\\apache\\commons\\cli\\DefaultParserTest.java",
  "methodName" : "testParseIgnoreHappyPath",
  "sourceCode" : "@Test\r\nvoid testParseIgnoreHappyPath() throws ParseException {\r\n    final Option a = Option.builder().option(\"a\").longOpt(\"first-letter\").get();\r\n    final Option b = Option.builder().option(\"b\").longOpt(\"second-letter\").get();\r\n    final Option c = Option.builder().option(\"c\").longOpt(\"third-letter\").get();\r\n    final Option d = Option.builder().option(\"d\").longOpt(\"fourth-letter\").get();\r\n    final Options baseOptions = new Options();\r\n    baseOptions.addOption(a);\r\n    baseOptions.addOption(b);\r\n    final Options specificOptions = new Options();\r\n    specificOptions.addOption(a);\r\n    specificOptions.addOption(b);\r\n    specificOptions.addOption(c);\r\n    specificOptions.addOption(d);\r\n    final String[] args = { \"-a\", \"-b\", \"-c\", \"-d\", \"arg1\", \"arg2\" };\r\n    final DefaultParser parser = new DefaultParser();\r\n    final CommandLine baseCommandLine = parser.parse(baseOptions, null, DefaultParser.NonOptionAction.IGNORE, args);\r\n    assertEquals(2, baseCommandLine.getOptions().length);\r\n    assertEquals(2, baseCommandLine.getArgs().length);\r\n    assertTrue(baseCommandLine.hasOption(\"a\"));\r\n    assertTrue(baseCommandLine.hasOption(\"b\"));\r\n    assertFalse(baseCommandLine.hasOption(\"c\"));\r\n    assertFalse(baseCommandLine.hasOption(\"d\"));\r\n    assertFalse(baseCommandLine.getArgList().contains(\"-a\"));\r\n    assertFalse(baseCommandLine.getArgList().contains(\"-b\"));\r\n    assertFalse(baseCommandLine.getArgList().contains(\"-c\"));\r\n    assertFalse(baseCommandLine.getArgList().contains(\"-d\"));\r\n    assertTrue(baseCommandLine.getArgList().contains(\"arg1\"));\r\n    assertTrue(baseCommandLine.getArgList().contains(\"arg2\"));\r\n    final CommandLine specificCommandLine = parser.parse(specificOptions, null, DefaultParser.NonOptionAction.THROW, args);\r\n    assertEquals(4, specificCommandLine.getOptions().length);\r\n    assertEquals(2, specificCommandLine.getArgs().length);\r\n    assertTrue(specificCommandLine.hasOption(\"a\"));\r\n    assertTrue(specificCommandLine.hasOption(\"b\"));\r\n    assertTrue(specificCommandLine.hasOption(\"c\"));\r\n    assertTrue(specificCommandLine.hasOption(\"d\"));\r\n    assertFalse(specificCommandLine.getArgList().contains(\"-a\"));\r\n    assertFalse(specificCommandLine.getArgList().contains(\"-b\"));\r\n    assertFalse(specificCommandLine.getArgList().contains(\"-c\"));\r\n    assertFalse(specificCommandLine.getArgList().contains(\"-d\"));\r\n    assertTrue(specificCommandLine.getArgList().contains(\"arg1\"));\r\n    assertTrue(specificCommandLine.getArgList().contains(\"arg2\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-cli\\src\\test\\java\\org\\apache\\commons\\cli\\DefaultParserTest.java",
  "methodName" : "testParseIgnoreNonHappyPath",
  "sourceCode" : "@Test\r\nvoid testParseIgnoreNonHappyPath() throws ParseException {\r\n    final Option a = Option.builder().option(\"a\").longOpt(\"first-letter\").get();\r\n    final Option b = Option.builder().option(\"b\").longOpt(\"second-letter\").get();\r\n    final Option c = Option.builder().option(\"c\").longOpt(\"third-letter\").get();\r\n    final Options baseOptions = new Options();\r\n    baseOptions.addOption(a);\r\n    baseOptions.addOption(b);\r\n    final Options specificOptions = new Options();\r\n    specificOptions.addOption(a);\r\n    specificOptions.addOption(b);\r\n    specificOptions.addOption(c);\r\n    // -d is rogue option\r\n    final String[] args = { \"-a\", \"-b\", \"-c\", \"-d\", \"arg1\", \"arg2\" };\r\n    final DefaultParser parser = new DefaultParser();\r\n    final CommandLine baseCommandLine = parser.parse(baseOptions, null, DefaultParser.NonOptionAction.IGNORE, args);\r\n    assertEquals(2, baseCommandLine.getOptions().length);\r\n    assertEquals(2, baseCommandLine.getArgs().length);\r\n    final UnrecognizedOptionException e = assertThrows(UnrecognizedOptionException.class, () -> parser.parse(specificOptions, null, DefaultParser.NonOptionAction.THROW, args));\r\n    assertTrue(e.getMessage().contains(\"-d\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-cli\\src\\test\\java\\org\\apache\\commons\\cli\\DefaultParserTest.java",
  "methodName" : "testParseNullOption",
  "sourceCode" : "@Test\r\nvoid testParseNullOption() throws ParseException {\r\n    // Edge case\r\n    assertThrows(NullPointerException.class, () -> new DefaultParser().parse(null, null, DefaultParser.NonOptionAction.IGNORE, \"-a\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-cli\\src\\test\\java\\org\\apache\\commons\\cli\\DefaultParserTest.java",
  "methodName" : "testParseSkipHappyPath",
  "sourceCode" : "@Test\r\nvoid testParseSkipHappyPath() throws ParseException {\r\n    final Option a = Option.builder().option(\"a\").longOpt(\"first-letter\").get();\r\n    final Option b = Option.builder().option(\"b\").longOpt(\"second-letter\").get();\r\n    final Option c = Option.builder().option(\"c\").longOpt(\"third-letter\").get();\r\n    final Option d = Option.builder().option(\"d\").longOpt(\"fourth-letter\").get();\r\n    final Options baseOptions = new Options();\r\n    baseOptions.addOption(a);\r\n    baseOptions.addOption(b);\r\n    final Options specificOptions = new Options();\r\n    specificOptions.addOption(a);\r\n    specificOptions.addOption(b);\r\n    specificOptions.addOption(c);\r\n    specificOptions.addOption(d);\r\n    final String[] args = { \"-a\", \"-b\", \"-c\", \"-d\", \"arg1\", \"arg2\" };\r\n    final DefaultParser parser = new DefaultParser();\r\n    final CommandLine baseCommandLine = parser.parse(baseOptions, null, DefaultParser.NonOptionAction.SKIP, args);\r\n    assertEquals(2, baseCommandLine.getOptions().length);\r\n    assertEquals(4, baseCommandLine.getArgs().length);\r\n    assertTrue(baseCommandLine.hasOption(\"a\"));\r\n    assertTrue(baseCommandLine.hasOption(\"b\"));\r\n    assertFalse(baseCommandLine.hasOption(\"c\"));\r\n    assertFalse(baseCommandLine.hasOption(\"d\"));\r\n    assertFalse(baseCommandLine.getArgList().contains(\"-a\"));\r\n    assertFalse(baseCommandLine.getArgList().contains(\"-b\"));\r\n    assertTrue(baseCommandLine.getArgList().contains(\"-c\"));\r\n    assertTrue(baseCommandLine.getArgList().contains(\"-d\"));\r\n    assertTrue(baseCommandLine.getArgList().contains(\"arg1\"));\r\n    assertTrue(baseCommandLine.getArgList().contains(\"arg2\"));\r\n    final CommandLine specificCommandLine = parser.parse(specificOptions, null, DefaultParser.NonOptionAction.THROW, args);\r\n    assertEquals(4, specificCommandLine.getOptions().length);\r\n    assertEquals(2, specificCommandLine.getArgs().length);\r\n    assertTrue(specificCommandLine.hasOption(\"a\"));\r\n    assertTrue(specificCommandLine.hasOption(\"b\"));\r\n    assertTrue(specificCommandLine.hasOption(\"c\"));\r\n    assertTrue(specificCommandLine.hasOption(\"d\"));\r\n    assertFalse(specificCommandLine.getArgList().contains(\"-a\"));\r\n    assertFalse(specificCommandLine.getArgList().contains(\"-b\"));\r\n    assertFalse(specificCommandLine.getArgList().contains(\"-c\"));\r\n    assertFalse(specificCommandLine.getArgList().contains(\"-d\"));\r\n    assertTrue(specificCommandLine.getArgList().contains(\"arg1\"));\r\n    assertTrue(specificCommandLine.getArgList().contains(\"arg2\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-cli\\src\\test\\java\\org\\apache\\commons\\cli\\DefaultParserTest.java",
  "methodName" : "testParseSkipNonHappyPath",
  "sourceCode" : "@Test\r\nvoid testParseSkipNonHappyPath() throws ParseException {\r\n    final Option a = Option.builder().option(\"a\").longOpt(\"first-letter\").get();\r\n    final Option b = Option.builder().option(\"b\").longOpt(\"second-letter\").get();\r\n    final Option c = Option.builder().option(\"c\").longOpt(\"third-letter\").get();\r\n    final Options baseOptions = new Options();\r\n    baseOptions.addOption(a);\r\n    baseOptions.addOption(b);\r\n    final Options specificOptions = new Options();\r\n    specificOptions.addOption(a);\r\n    specificOptions.addOption(b);\r\n    specificOptions.addOption(c);\r\n    // -d is rogue option\r\n    final String[] args = { \"-a\", \"-b\", \"-c\", \"-d\", \"arg1\", \"arg2\" };\r\n    final DefaultParser parser = new DefaultParser();\r\n    final CommandLine baseCommandLine = parser.parse(baseOptions, null, DefaultParser.NonOptionAction.SKIP, args);\r\n    assertEquals(2, baseCommandLine.getOptions().length);\r\n    assertEquals(4, baseCommandLine.getArgs().length);\r\n    final UnrecognizedOptionException e = assertThrows(UnrecognizedOptionException.class, () -> parser.parse(specificOptions, null, DefaultParser.NonOptionAction.THROW, args));\r\n    assertTrue(e.getMessage().contains(\"-d\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-cli\\src\\test\\java\\org\\apache\\commons\\cli\\DefaultParserTest.java",
  "methodName" : "testShortOptionConcatenatedQuoteHandling",
  "sourceCode" : "@Override\r\n@Test\r\n@Disabled(\"Test case handled in the parameterized tests as \\\"DEFAULT behavior\\\"\")\r\nvoid testShortOptionConcatenatedQuoteHandling() throws Exception {\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-cli\\src\\test\\java\\org\\apache\\commons\\cli\\DeprecatedAttributesTest.java",
  "methodName" : "testBuilderNonDefaults",
  "sourceCode" : "@Test\r\nvoid testBuilderNonDefaults() {\r\n    // @formatter:off\r\n    final DeprecatedAttributes value = DeprecatedAttributes.builder().setDescription(\"Use Bar instead!\").setForRemoval(true).setSince(\"2.0\").get();\r\n    // @formatter:on\r\n    assertEquals(\"Use Bar instead!\", value.getDescription());\r\n    assertEquals(\"2.0\", value.getSince());\r\n    assertEquals(true, value.isForRemoval());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-cli\\src\\test\\java\\org\\apache\\commons\\cli\\DeprecatedAttributesTest.java",
  "methodName" : "testBuilderNonDefaultsToString",
  "sourceCode" : "@Test\r\nvoid testBuilderNonDefaultsToString() {\r\n    // @formatter:off\r\n    assertEquals(\"Deprecated for removal since 2.0: Use Bar instead!\", DeprecatedAttributes.builder().setDescription(\"Use Bar instead!\").setForRemoval(true).setSince(\"2.0\").get().toString());\r\n    assertEquals(\"Deprecated for removal: Use Bar instead!\", DeprecatedAttributes.builder().setDescription(\"Use Bar instead!\").setForRemoval(true).get().toString());\r\n    assertEquals(\"Deprecated since 2.0: Use Bar instead!\", DeprecatedAttributes.builder().setDescription(\"Use Bar instead!\").setSince(\"2.0\").get().toString());\r\n    assertEquals(\"Deprecated: Use Bar instead!\", DeprecatedAttributes.builder().setDescription(\"Use Bar instead!\").get().toString());\r\n    // @formatter:on\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-cli\\src\\test\\java\\org\\apache\\commons\\cli\\DeprecatedAttributesTest.java",
  "methodName" : "testDefaultBuilder",
  "sourceCode" : "@Test\r\nvoid testDefaultBuilder() {\r\n    final DeprecatedAttributes defaultValue = DeprecatedAttributes.builder().get();\r\n    assertEquals(DeprecatedAttributes.DEFAULT.getDescription(), defaultValue.getDescription());\r\n    assertEquals(DeprecatedAttributes.DEFAULT.getSince(), defaultValue.getSince());\r\n    assertEquals(DeprecatedAttributes.DEFAULT.isForRemoval(), defaultValue.isForRemoval());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-cli\\src\\test\\java\\org\\apache\\commons\\cli\\DeprecatedAttributesTest.java",
  "methodName" : "testDefaultToString",
  "sourceCode" : "@Test\r\nvoid testDefaultToString() {\r\n    assertEquals(\"Deprecated\", DeprecatedAttributes.DEFAULT.toString());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-cli\\src\\test\\java\\org\\apache\\commons\\cli\\DisablePartialMatchingTest.java",
  "methodName" : "testDisablePartialMatching",
  "sourceCode" : "@Test\r\nvoid testDisablePartialMatching() throws Exception {\r\n    final CommandLineParser parser = new DefaultParser(false);\r\n    final Options options = new Options();\r\n    options.addOption(new Option(\"d\", \"debug\", false, \"Turn on debug.\"));\r\n    options.addOption(new Option(\"e\", \"extract\", false, \"Turn on extract.\"));\r\n    options.addOption(new Option(\"o\", \"option\", true, \"Turn on option with argument.\"));\r\n    final CommandLine line = parser.parse(options, new String[] { \"-de\", \"--option=foobar\" });\r\n    assertTrue(line.hasOption(\"debug\"), \"There should be an option debug in any case...\");\r\n    assertTrue(line.hasOption(\"extract\"), \"There should be an extract option because partial matching is off\");\r\n    assertTrue(line.hasOption(\"option\"), \"There should be an option option with a argument value\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-cli\\src\\test\\java\\org\\apache\\commons\\cli\\DisablePartialMatchingTest.java",
  "methodName" : "testRegularPartialMatching",
  "sourceCode" : "@Test\r\nvoid testRegularPartialMatching() throws Exception {\r\n    final CommandLineParser parser = new DefaultParser();\r\n    final Options options = new Options();\r\n    options.addOption(new Option(\"d\", \"debug\", false, \"Turn on debug.\"));\r\n    options.addOption(new Option(\"e\", \"extract\", false, \"Turn on extract.\"));\r\n    options.addOption(new Option(\"o\", \"option\", true, \"Turn on option with argument.\"));\r\n    final CommandLine line = parser.parse(options, new String[] { \"-de\", \"--option=foobar\" });\r\n    assertTrue(line.hasOption(\"debug\"), \"There should be an option debug in any case...\");\r\n    assertFalse(line.hasOption(\"extract\"), \"There should not be an extract option because partial matching only selects debug\");\r\n    assertTrue(line.hasOption(\"option\"), \"There should be an option option with a argument value\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-cli\\src\\test\\java\\org\\apache\\commons\\cli\\example\\AptHelpAppendableTest.java",
  "methodName" : "testAppendFormatTest",
  "sourceCode" : "@Test\r\nvoid testAppendFormatTest() throws IOException {\r\n    underTest.appendFormat(\"Big %s and Phantom %,d\", \"Joe\", 309);\r\n    assertEquals(String.format(\"Big Joe and Phantom 309\"), sb.toString());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-cli\\src\\test\\java\\org\\apache\\commons\\cli\\example\\AptHelpAppendableTest.java",
  "methodName" : "testAppendHeaderTest",
  "sourceCode" : "@Test\r\nvoid testAppendHeaderTest() throws IOException {\r\n    underTest.appendHeader(1, \"Hello World\");\r\n    assertEquals(String.format(\"* Hello World%n%n\"), sb.toString());\r\n    sb.setLength(0);\r\n    underTest.appendHeader(2, \"Hello World\");\r\n    assertEquals(String.format(\"** Hello World%n%n\"), sb.toString());\r\n    sb.setLength(0);\r\n    assertThrows(IllegalArgumentException.class, () -> underTest.appendHeader(0, \"Hello World\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-cli\\src\\test\\java\\org\\apache\\commons\\cli\\example\\AptHelpAppendableTest.java",
  "methodName" : "testAppendListTest",
  "sourceCode" : "@Test\r\nvoid testAppendListTest() throws IOException {\r\n    final String[] entries = { \"one\", \"two\", \"three\" };\r\n    underTest.appendList(true, Arrays.asList(entries));\r\n    assertEquals(String.format(\"    [[1]] one%n    [[2]] two%n    [[3]] three%n%n\"), sb.toString());\r\n    sb.setLength(0);\r\n    underTest.appendList(false, Arrays.asList(entries));\r\n    assertEquals(String.format(\"    * one%n    * two%n    * three%n%n\"), sb.toString());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-cli\\src\\test\\java\\org\\apache\\commons\\cli\\example\\AptHelpAppendableTest.java",
  "methodName" : "testAppendParagraphFormatTest",
  "sourceCode" : "@Test\r\nvoid testAppendParagraphFormatTest() throws IOException {\r\n    underTest.appendParagraphFormat(\"Hello %s World %,d\", \"Big Joe\", 309);\r\n    assertEquals(String.format(\"  Hello Big Joe World 309%n%n\"), sb.toString());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-cli\\src\\test\\java\\org\\apache\\commons\\cli\\example\\AptHelpAppendableTest.java",
  "methodName" : "testAppendParagraphTest",
  "sourceCode" : "@Test\r\nvoid testAppendParagraphTest() throws IOException {\r\n    underTest.appendParagraph(\"Hello World\");\r\n    assertEquals(String.format(\"  Hello World%n%n\"), sb.toString());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-cli\\src\\test\\java\\org\\apache\\commons\\cli\\example\\AptHelpAppendableTest.java",
  "methodName" : "testAppendTableTest",
  "sourceCode" : "@Test\r\nvoid testAppendTableTest() throws IOException {\r\n    final List<TextStyle> styles = Arrays.asList(TextStyle.DEFAULT, TextStyle.DEFAULT, TextStyle.DEFAULT);\r\n    final String[] headers = { \"one\", \"two\", \"three\" };\r\n    // @formatter:off\r\n    final List<List<String>> rows = Arrays.asList(Arrays.asList(new String[] { \"uno\", \"dos\", \"tres\" }), Arrays.asList(new String[] { \"aon\", \"dhá\", \"trí\" }), Arrays.asList(new String[] { \"واحد\", \"اثنين\", \"ثلاثة\" }));\r\n    // @formatter:on\r\n    List<String> expected = new ArrayList<>();\r\n    expected.add(\"*-----+-----+-------+\");\r\n    expected.add(\"| one | two | three |\");\r\n    expected.add(\"*-----+-----+-------+\");\r\n    expected.add(\"| uno | dos | tres |\");\r\n    expected.add(\"*-----+-----+-------+\");\r\n    expected.add(\"| aon | dhá | trí |\");\r\n    expected.add(\"*-----+-----+-------+\");\r\n    expected.add(\"| واحد | اثنين | ثلاثة |\");\r\n    expected.add(\"*-----+-----+-------+\");\r\n    expected.add(\"The caption\");\r\n    expected.add(\"\");\r\n    TableDefinition table = TableDefinition.from(\"The caption\", styles, Arrays.asList(headers), rows);\r\n    underTest.appendTable(table);\r\n    List<String> actual = IOUtils.readLines(new StringReader(sb.toString()));\r\n    assertEquals(expected, actual, \"full table failed\");\r\n    table = TableDefinition.from(null, styles, Arrays.asList(headers), rows);\r\n    expected.remove(9);\r\n    sb.setLength(0);\r\n    underTest.appendTable(table);\r\n    actual = IOUtils.readLines(new StringReader(sb.toString()));\r\n    assertEquals(expected, actual);\r\n    table = TableDefinition.from(null, styles, Arrays.asList(headers), Collections.emptyList());\r\n    expected = new ArrayList<>();\r\n    expected.add(\"*-----+-----+-------+\");\r\n    expected.add(\"| one | two | three |\");\r\n    expected.add(\"*-----+-----+-------+\");\r\n    expected.add(\"\");\r\n    sb.setLength(0);\r\n    underTest.appendTable(table);\r\n    actual = IOUtils.readLines(new StringReader(sb.toString()));\r\n    assertEquals(expected, actual, \"no rows test failed\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-cli\\src\\test\\java\\org\\apache\\commons\\cli\\example\\AptHelpAppendableTest.java",
  "methodName" : "testAppendTitleTest",
  "sourceCode" : "@Test\r\nvoid testAppendTitleTest() throws IOException {\r\n    sb.setLength(0);\r\n    underTest.appendTitle(\"Hello World\");\r\n    assertEquals(String.format(\"        -----%n        Hello World%n        -----%n%nHello World%n%n\"), sb.toString());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-cli\\src\\test\\java\\org\\apache\\commons\\cli\\example\\XhtmlHelpAppendableTest.java",
  "methodName" : "testAppendHeaderTest",
  "sourceCode" : "@Test\r\nvoid testAppendHeaderTest() throws IOException {\r\n    underTest.appendHeader(1, \"Hello World\");\r\n    assertEquals(String.format(\"<h1>Hello World</h1>%n\"), sb.toString());\r\n    sb.setLength(0);\r\n    underTest.appendHeader(2, \"Hello World\");\r\n    assertEquals(String.format(\"<h2>Hello World</h2>%n\"), sb.toString());\r\n    sb.setLength(0);\r\n    assertThrows(IllegalArgumentException.class, () -> underTest.appendHeader(0, \"Hello World\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-cli\\src\\test\\java\\org\\apache\\commons\\cli\\example\\XhtmlHelpAppendableTest.java",
  "methodName" : "testAppendListTest",
  "sourceCode" : "@Test\r\nvoid testAppendListTest() throws IOException {\r\n    final String[] entries = { \"one\", \"two\", \"three\" };\r\n    underTest.appendList(true, Arrays.asList(entries));\r\n    assertEquals(String.format(\"<ol>%n  <li>one</li>%n  <li>two</li>%n  <li>three</li>%n</ol>%n\"), sb.toString());\r\n    sb.setLength(0);\r\n    underTest.appendList(false, Arrays.asList(entries));\r\n    assertEquals(String.format(\"<ul>%n  <li>one</li>%n  <li>two</li>%n  <li>three</li>%n</ul>%n\"), sb.toString());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-cli\\src\\test\\java\\org\\apache\\commons\\cli\\example\\XhtmlHelpAppendableTest.java",
  "methodName" : "testAppendParagraphFormatTest",
  "sourceCode" : "@Test\r\nvoid testAppendParagraphFormatTest() throws IOException {\r\n    underTest.appendParagraphFormat(\"Hello %s World %,d\", \"Joe\", 309);\r\n    assertEquals(String.format(\"<p>Hello Joe World 309</p>%n\"), sb.toString());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-cli\\src\\test\\java\\org\\apache\\commons\\cli\\example\\XhtmlHelpAppendableTest.java",
  "methodName" : "testAppendParagraphTest",
  "sourceCode" : "@Test\r\nvoid testAppendParagraphTest() throws IOException {\r\n    underTest.appendParagraph(\"Hello World\");\r\n    assertEquals(String.format(\"<p>Hello World</p>%n\"), sb.toString());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-cli\\src\\test\\java\\org\\apache\\commons\\cli\\example\\XhtmlHelpAppendableTest.java",
  "methodName" : "testAppendTableTest",
  "sourceCode" : "@Test\r\nvoid testAppendTableTest() throws IOException {\r\n    final List<TextStyle> styles = Arrays.asList(TextStyle.DEFAULT, TextStyle.DEFAULT, TextStyle.DEFAULT);\r\n    final String[] headers = { \"one\", \"two\", \"three\" };\r\n    // @formatter:off\r\n    final List<List<String>> rows = Arrays.asList(Arrays.asList(new String[] { \"uno\", \"dos\", \"tres\" }), Arrays.asList(new String[] { \"aon\", \"dhá\", \"trí\" }), Arrays.asList(new String[] { \"واحد\", \"اثنين\", \"ثلاثة\" }));\r\n    // @formatter:on\r\n    List<String> expected = new ArrayList<>();\r\n    expected.add(\"<table class='commons_cli_table'>\");\r\n    expected.add(\"  <caption>The caption</caption>\");\r\n    expected.add(\"  <tr>\");\r\n    expected.add(\"    <th>one</th>\");\r\n    expected.add(\"    <th>two</th>\");\r\n    expected.add(\"    <th>three</th>\");\r\n    expected.add(\"  </tr>\");\r\n    expected.add(\"  <tr>\");\r\n    expected.add(\"    <td>uno</td>\");\r\n    expected.add(\"    <td>dos</td>\");\r\n    expected.add(\"    <td>tres</td>\");\r\n    expected.add(\"  </tr>\");\r\n    expected.add(\"  <tr>\");\r\n    expected.add(\"    <td>aon</td>\");\r\n    expected.add(\"    <td>dh&aacute;</td>\");\r\n    expected.add(\"    <td>tr&iacute;</td>\");\r\n    expected.add(\"  </tr>\");\r\n    expected.add(\"  <tr>\");\r\n    expected.add(\"    <td>واحد</td>\");\r\n    expected.add(\"    <td>اثنين</td>\");\r\n    expected.add(\"    <td>ثلاثة</td>\");\r\n    expected.add(\"  </tr>\");\r\n    expected.add(\"</table>\");\r\n    TableDefinition table = TableDefinition.from(\"The caption\", styles, Arrays.asList(headers), rows);\r\n    underTest.appendTable(table);\r\n    List<String> actual = IOUtils.readLines(new StringReader(sb.toString()));\r\n    assertEquals(expected, actual, \"full table failed\");\r\n    table = TableDefinition.from(null, styles, Arrays.asList(headers), rows);\r\n    expected.remove(1);\r\n    sb.setLength(0);\r\n    underTest.appendTable(table);\r\n    actual = IOUtils.readLines(new StringReader(sb.toString()));\r\n    assertEquals(expected, actual);\r\n    table = TableDefinition.from(null, styles, Arrays.asList(headers), Collections.emptyList());\r\n    expected = new ArrayList<>();\r\n    expected.add(\"<table class='commons_cli_table'>\");\r\n    expected.add(\"  <tr>\");\r\n    expected.add(\"    <th>one</th>\");\r\n    expected.add(\"    <th>two</th>\");\r\n    expected.add(\"    <th>three</th>\");\r\n    expected.add(\"  </tr>\");\r\n    expected.add(\"</table>\");\r\n    sb.setLength(0);\r\n    underTest.appendTable(table);\r\n    actual = IOUtils.readLines(new StringReader(sb.toString()));\r\n    assertEquals(expected, actual, \"no rows test failed\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-cli\\src\\test\\java\\org\\apache\\commons\\cli\\example\\XhtmlHelpAppendableTest.java",
  "methodName" : "testAppendTitleTest",
  "sourceCode" : "@Test\r\nvoid testAppendTitleTest() throws IOException {\r\n    underTest.appendTitle(\"Hello World\");\r\n    assertEquals(String.format(\"<span class='commons_cli_title'>Hello World</span>%n\"), sb.toString());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-cli\\src\\test\\java\\org\\apache\\commons\\cli\\GnuParserTest.java",
  "methodName" : "testAmbiguousLongWithoutEqualSingleDash",
  "sourceCode" : "@Override\r\n@Test\r\n@Disabled(\"not supported by the GnuParser\")\r\nvoid testAmbiguousLongWithoutEqualSingleDash() throws Exception {\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-cli\\src\\test\\java\\org\\apache\\commons\\cli\\GnuParserTest.java",
  "methodName" : "testAmbiguousLongWithoutEqualSingleDash2",
  "sourceCode" : "@Override\r\n@Test\r\n@Disabled(\"not supported by the GnuParser\")\r\nvoid testAmbiguousLongWithoutEqualSingleDash2() throws Exception {\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-cli\\src\\test\\java\\org\\apache\\commons\\cli\\GnuParserTest.java",
  "methodName" : "testAmbiguousPartialLongOption1",
  "sourceCode" : "@Override\r\n@Test\r\n@Disabled(\"not supported by the GnuParser\")\r\nvoid testAmbiguousPartialLongOption1() throws Exception {\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-cli\\src\\test\\java\\org\\apache\\commons\\cli\\GnuParserTest.java",
  "methodName" : "testAmbiguousPartialLongOption2",
  "sourceCode" : "@Override\r\n@Test\r\n@Disabled(\"not supported by the GnuParser\")\r\nvoid testAmbiguousPartialLongOption2() throws Exception {\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-cli\\src\\test\\java\\org\\apache\\commons\\cli\\GnuParserTest.java",
  "methodName" : "testAmbiguousPartialLongOption3",
  "sourceCode" : "@Override\r\n@Test\r\n@Disabled(\"not supported by the GnuParser\")\r\nvoid testAmbiguousPartialLongOption3() throws Exception {\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-cli\\src\\test\\java\\org\\apache\\commons\\cli\\GnuParserTest.java",
  "methodName" : "testAmbiguousPartialLongOption4",
  "sourceCode" : "@Override\r\n@Test\r\n@Disabled(\"not supported by the GnuParser\")\r\nvoid testAmbiguousPartialLongOption4() throws Exception {\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-cli\\src\\test\\java\\org\\apache\\commons\\cli\\GnuParserTest.java",
  "methodName" : "testBursting",
  "sourceCode" : "@Override\r\n@Test\r\n@Disabled(\"not supported by the GnuParser\")\r\nvoid testBursting() throws Exception {\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-cli\\src\\test\\java\\org\\apache\\commons\\cli\\GnuParserTest.java",
  "methodName" : "testDoubleDash2",
  "sourceCode" : "@Override\r\n@Test\r\n@Disabled(\"not supported by the GnuParser\")\r\nvoid testDoubleDash2() throws Exception {\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-cli\\src\\test\\java\\org\\apache\\commons\\cli\\GnuParserTest.java",
  "methodName" : "testLongWithoutEqualSingleDash",
  "sourceCode" : "@Override\r\n@Test\r\n@Disabled(\"not supported by the GnuParser\")\r\nvoid testLongWithoutEqualSingleDash() throws Exception {\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-cli\\src\\test\\java\\org\\apache\\commons\\cli\\GnuParserTest.java",
  "methodName" : "testLongWithUnexpectedArgument1",
  "sourceCode" : "@Override\r\n@Test\r\n@Disabled(\"not supported by the GnuParser\")\r\nvoid testLongWithUnexpectedArgument1() throws Exception {\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-cli\\src\\test\\java\\org\\apache\\commons\\cli\\GnuParserTest.java",
  "methodName" : "testLongWithUnexpectedArgument2",
  "sourceCode" : "@Override\r\n@Test\r\n@Disabled(\"not supported by the GnuParser\")\r\nvoid testLongWithUnexpectedArgument2() throws Exception {\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-cli\\src\\test\\java\\org\\apache\\commons\\cli\\GnuParserTest.java",
  "methodName" : "testMissingArgWithBursting",
  "sourceCode" : "@Override\r\n@Test\r\n@Disabled(\"not supported by the GnuParser\")\r\nvoid testMissingArgWithBursting() throws Exception {\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-cli\\src\\test\\java\\org\\apache\\commons\\cli\\GnuParserTest.java",
  "methodName" : "testNegativeOption",
  "sourceCode" : "@Override\r\n@Test\r\n@Disabled(\"not supported by the GnuParser (CLI-184)\")\r\nvoid testNegativeOption() throws Exception {\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-cli\\src\\test\\java\\org\\apache\\commons\\cli\\GnuParserTest.java",
  "methodName" : "testPartialLongOptionSingleDash",
  "sourceCode" : "@Override\r\n@Test\r\n@Disabled(\"not supported by the GnuParser\")\r\nvoid testPartialLongOptionSingleDash() throws Exception {\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-cli\\src\\test\\java\\org\\apache\\commons\\cli\\GnuParserTest.java",
  "methodName" : "testShortWithUnexpectedArgument",
  "sourceCode" : "@Override\r\n@Test\r\n@Disabled(\"not supported by the GnuParser\")\r\nvoid testShortWithUnexpectedArgument() throws Exception {\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-cli\\src\\test\\java\\org\\apache\\commons\\cli\\GnuParserTest.java",
  "methodName" : "testStopBursting",
  "sourceCode" : "@Override\r\n@Test\r\n@Disabled(\"not supported by the GnuParser\")\r\nvoid testStopBursting() throws Exception {\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-cli\\src\\test\\java\\org\\apache\\commons\\cli\\GnuParserTest.java",
  "methodName" : "testStopBursting2",
  "sourceCode" : "@Override\r\n@Test\r\n@Disabled(\"not supported by the GnuParser\")\r\nvoid testStopBursting2() throws Exception {\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-cli\\src\\test\\java\\org\\apache\\commons\\cli\\GnuParserTest.java",
  "methodName" : "testUnambiguousPartialLongOption1",
  "sourceCode" : "@Override\r\n@Test\r\n@Disabled(\"not supported by the GnuParser\")\r\nvoid testUnambiguousPartialLongOption1() throws Exception {\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-cli\\src\\test\\java\\org\\apache\\commons\\cli\\GnuParserTest.java",
  "methodName" : "testUnambiguousPartialLongOption2",
  "sourceCode" : "@Override\r\n@Test\r\n@Disabled(\"not supported by the GnuParser\")\r\nvoid testUnambiguousPartialLongOption2() throws Exception {\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-cli\\src\\test\\java\\org\\apache\\commons\\cli\\GnuParserTest.java",
  "methodName" : "testUnambiguousPartialLongOption3",
  "sourceCode" : "@Override\r\n@Test\r\n@Disabled(\"not supported by the GnuParser\")\r\nvoid testUnambiguousPartialLongOption3() throws Exception {\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-cli\\src\\test\\java\\org\\apache\\commons\\cli\\GnuParserTest.java",
  "methodName" : "testUnambiguousPartialLongOption4",
  "sourceCode" : "@Override\r\n@Test\r\n@Disabled(\"not supported by the GnuParser\")\r\nvoid testUnambiguousPartialLongOption4() throws Exception {\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-cli\\src\\test\\java\\org\\apache\\commons\\cli\\GnuParserTest.java",
  "methodName" : "testUnrecognizedOptionWithBursting",
  "sourceCode" : "@Override\r\n@Test\r\n@Disabled(\"not supported by the GnuParser\")\r\nvoid testUnrecognizedOptionWithBursting() throws Exception {\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-cli\\src\\test\\java\\org\\apache\\commons\\cli\\help\\HelpFormatterTest.java",
  "methodName" : "testDefault",
  "sourceCode" : "@Test\r\nvoid testDefault() {\r\n    final StringBuilder sb = new StringBuilder();\r\n    final TextHelpAppendable serializer = new TextHelpAppendable(sb);\r\n    final HelpFormatter formatter = HelpFormatter.builder().setHelpAppendable(serializer).get();\r\n    assertEquals(serializer, formatter.getSerializer(), \"Unexpected helpAppendable tests may fail unexpectedly\");\r\n    assertEquals(AbstractHelpFormatter.DEFAULT_COMPARATOR, formatter.getComparator(), \"Unexpected comparator tests may fail unexpectedly\");\r\n    assertEquals(AbstractHelpFormatter.DEFAULT_SYNTAX_PREFIX, formatter.getSyntaxPrefix(), \"Unexpected syntax prefix tests may fail unexpectedly\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-cli\\src\\test\\java\\org\\apache\\commons\\cli\\help\\HelpFormatterTest.java",
  "methodName" : "testPrintHelp",
  "sourceCode" : "@Test\r\nvoid testPrintHelp() throws IOException {\r\n    final StringBuilder sb = new StringBuilder();\r\n    final TextHelpAppendable serializer = new TextHelpAppendable(sb);\r\n    HelpFormatter formatter = HelpFormatter.builder().setHelpAppendable(serializer).get();\r\n    final Options options = new Options().addOption(Option.builder(\"a\").since(\"1853\").hasArg().desc(\"aaaa aaaa aaaa aaaa aaaa\").get());\r\n    List<String> expected = new ArrayList<>();\r\n    expected.add(\" usage:  commandSyntax [-a <arg>]\");\r\n    expected.add(\"\");\r\n    expected.add(\" header\");\r\n    expected.add(\"\");\r\n    expected.add(\" Options      Since           Description       \");\r\n    expected.add(\" -a <arg>     1853      aaaa aaaa aaaa aaaa aaaa\");\r\n    expected.add(\"\");\r\n    expected.add(\" footer\");\r\n    expected.add(\"\");\r\n    formatter.printHelp(\"commandSyntax\", \"header\", options, \"footer\", true);\r\n    List<String> actual = IOUtils.readLines(new StringReader(sb.toString()));\r\n    assertEquals(expected, actual);\r\n    formatter = HelpFormatter.builder().setShowSince(false).setHelpAppendable(serializer).get();\r\n    expected = new ArrayList<>();\r\n    expected.add(\" usage:  commandSyntax [-a <arg>]\");\r\n    expected.add(\"\");\r\n    expected.add(\" header\");\r\n    expected.add(\"\");\r\n    expected.add(\" Options            Description       \");\r\n    expected.add(\" -a <arg>     aaaa aaaa aaaa aaaa aaaa\");\r\n    expected.add(\"\");\r\n    expected.add(\" footer\");\r\n    expected.add(\"\");\r\n    sb.setLength(0);\r\n    formatter.printHelp(\"commandSyntax\", \"header\", options, \"footer\", true);\r\n    actual = IOUtils.readLines(new StringReader(sb.toString()));\r\n    assertEquals(expected, actual);\r\n    sb.setLength(0);\r\n    formatter.printHelp(\"commandSyntax\", \"header\", options, \"footer\", false);\r\n    expected.set(0, \" usage:  commandSyntax\");\r\n    actual = IOUtils.readLines(new StringReader(sb.toString()));\r\n    assertEquals(expected, actual);\r\n    sb.setLength(0);\r\n    formatter.printHelp(\"commandSyntax\", \"\", options, \"footer\", false);\r\n    expected.remove(3);\r\n    expected.remove(2);\r\n    actual = IOUtils.readLines(new StringReader(sb.toString()));\r\n    assertEquals(expected, actual);\r\n    sb.setLength(0);\r\n    formatter.printHelp(\"commandSyntax\", null, options, \"footer\", false);\r\n    actual = IOUtils.readLines(new StringReader(sb.toString()));\r\n    assertEquals(expected, actual);\r\n    sb.setLength(0);\r\n    formatter.printHelp(\"commandSyntax\", null, options, \"\", false);\r\n    expected.remove(6);\r\n    expected.remove(5);\r\n    actual = IOUtils.readLines(new StringReader(sb.toString()));\r\n    assertEquals(expected, actual);\r\n    sb.setLength(0);\r\n    formatter.printHelp(\"commandSyntax\", null, options, null, false);\r\n    actual = IOUtils.readLines(new StringReader(sb.toString()));\r\n    assertEquals(expected, actual);\r\n    sb.setLength(0);\r\n    final HelpFormatter fHelp = formatter;\r\n    assertThrows(IllegalArgumentException.class, () -> fHelp.printHelp(\"\", \"header\", options, \"footer\", true));\r\n    assertEquals(0, sb.length(), \"Should not write to output\");\r\n    assertThrows(IllegalArgumentException.class, () -> fHelp.printHelp(null, \"header\", options, \"footer\", true));\r\n    assertEquals(0, sb.length(), \"Should not write to output\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-cli\\src\\test\\java\\org\\apache\\commons\\cli\\help\\HelpFormatterTest.java",
  "methodName" : "testPrintHelpXML",
  "sourceCode" : "@Test\r\nvoid testPrintHelpXML() throws IOException {\r\n    final StringBuilder sb = new StringBuilder();\r\n    final XhtmlHelpAppendable serializer = new XhtmlHelpAppendable(sb);\r\n    final HelpFormatter formatter = HelpFormatter.builder().setHelpAppendable(serializer).get();\r\n    final Options options = new Options().addOption(\"a\", false, \"aaaa aaaa aaaa aaaa aaaa\");\r\n    final List<String> expected = new ArrayList<>();\r\n    expected.add(\"<p>usage:  commandSyntax [-a]</p>\");\r\n    expected.add(\"<p>header</p>\");\r\n    expected.add(\"<table class='commons_cli_table'>\");\r\n    expected.add(\"  <tr>\");\r\n    expected.add(\"    <th>Options</th>\");\r\n    expected.add(\"    <th>Since</th>\");\r\n    expected.add(\"    <th>Description</th>\");\r\n    expected.add(\"  </tr>\");\r\n    expected.add(\"  <tr>\");\r\n    expected.add(\"    <td>-a</td>\");\r\n    expected.add(\"    <td>--</td>\");\r\n    expected.add(\"    <td>aaaa aaaa aaaa aaaa aaaa</td>\");\r\n    expected.add(\"  </tr>\");\r\n    expected.add(\"</table>\");\r\n    expected.add(\"<p>footer</p>\");\r\n    formatter.printHelp(\"commandSyntax\", \"header\", options, \"footer\", true);\r\n    final List<String> actual = IOUtils.readLines(new StringReader(sb.toString()));\r\n    assertEquals(expected, actual);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-cli\\src\\test\\java\\org\\apache\\commons\\cli\\help\\HelpFormatterTest.java",
  "methodName" : "testPrintOptions",
  "sourceCode" : "@Test\r\nvoid testPrintOptions() throws IOException {\r\n    final StringBuilder sb = new StringBuilder();\r\n    final TextHelpAppendable serializer = new TextHelpAppendable(sb);\r\n    final HelpFormatter formatter = HelpFormatter.builder().setHelpAppendable(serializer).setShowSince(false).get();\r\n    // help format default column styles\r\n    // col options description helpAppendable\r\n    // styl FIXED VARIABLE VARIABLE\r\n    // LPad 0 5 1\r\n    // indent 1 1 3\r\n    //\r\n    // default helpAppendable\r\n    Options options;\r\n    List<String> expected = new ArrayList<>();\r\n    expected.add(\" Options           Description       \");\r\n    expected.add(\" -a          aaaa aaaa aaaa aaaa aaaa\");\r\n    expected.add(\"\");\r\n    options = new Options().addOption(\"a\", false, \"aaaa aaaa aaaa aaaa aaaa\");\r\n    formatter.printOptions(options);\r\n    List<String> actual = IOUtils.readLines(new StringReader(sb.toString()));\r\n    assertEquals(expected, actual);\r\n    sb.setLength(0);\r\n    serializer.setMaxWidth(30);\r\n    expected = new ArrayList<>();\r\n    expected.add(\" Options        Description    \");\r\n    expected.add(\" -a          aaaa aaaa aaaa    \");\r\n    expected.add(\"              aaaa aaaa        \");\r\n    expected.add(\"\");\r\n    formatter.printOptions(options);\r\n    actual = IOUtils.readLines(new StringReader(sb.toString()));\r\n    assertEquals(31, actual.get(0).length());\r\n    assertEquals(expected, actual);\r\n    sb.setLength(0);\r\n    serializer.setLeftPad(5);\r\n    expected = new ArrayList<>();\r\n    expected.add(\"     Options        Description    \");\r\n    expected.add(\"     -a          aaaa aaaa aaaa    \");\r\n    expected.add(\"                  aaaa aaaa        \");\r\n    expected.add(\"\");\r\n    formatter.printOptions(options);\r\n    actual = IOUtils.readLines(new StringReader(sb.toString()));\r\n    assertEquals(expected, actual);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-cli\\src\\test\\java\\org\\apache\\commons\\cli\\help\\HelpFormatterTest.java",
  "methodName" : "testSetOptionFormatBuilderTest",
  "sourceCode" : "@Test\r\nvoid testSetOptionFormatBuilderTest() {\r\n    final HelpFormatter.Builder underTest = HelpFormatter.builder();\r\n    final OptionFormatter.Builder ofBuilder = OptionFormatter.builder().setOptPrefix(\"Just Another \");\r\n    underTest.setOptionFormatBuilder(ofBuilder);\r\n    final HelpFormatter formatter = underTest.get();\r\n    final OptionFormatter oFormatter = formatter.getOptionFormatter(Option.builder(\"thing\").get());\r\n    assertEquals(\"Just Another thing\", oFormatter.getOpt());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-cli\\src\\test\\java\\org\\apache\\commons\\cli\\help\\HelpFormatterTest.java",
  "methodName" : "testSetOptionGroupSeparatorTest",
  "sourceCode" : "@Test\r\nvoid testSetOptionGroupSeparatorTest() {\r\n    final HelpFormatter.Builder underTest = HelpFormatter.builder().setOptionGroupSeparator(\" and \");\r\n    final HelpFormatter formatter = underTest.get();\r\n    final String result = formatter.toSyntaxOptions(new OptionGroup().addOption(Option.builder(\"this\").get()).addOption(Option.builder(\"that\").get()));\r\n    assertTrue(result.contains(\"-that and -this\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-cli\\src\\test\\java\\org\\apache\\commons\\cli\\help\\HelpFormatterTest.java",
  "methodName" : "testSortOptionGroupsTest",
  "sourceCode" : "@Test\r\nvoid testSortOptionGroupsTest() {\r\n    final Options options = getTestGroups();\r\n    final List<Option> optList = new ArrayList<>(options.getOptions());\r\n    final HelpFormatter underTest = HelpFormatter.builder().get();\r\n    final List<Option> expected = new ArrayList<>();\r\n    // because 1 sorts before all long values\r\n    expected.add(optList.get(0));\r\n    expected.add(optList.get(1));\r\n    expected.add(optList.get(5));\r\n    expected.add(optList.get(4));\r\n    expected.add(optList.get(6));\r\n    expected.add(optList.get(8));\r\n    expected.add(optList.get(7));\r\n    expected.add(optList.get(3));\r\n    expected.add(optList.get(2));\r\n    assertEquals(expected, underTest.sort(options));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-cli\\src\\test\\java\\org\\apache\\commons\\cli\\help\\HelpFormatterTest.java",
  "methodName" : "testSortOptionsTest",
  "sourceCode" : "@Test\r\nvoid testSortOptionsTest() {\r\n    // @formatter:off\r\n    final Options options = new Options().addOption(Option.builder(\"a\").longOpt(\"optA\").hasArg().desc(\"The description of A\").get()).addOption(Option.builder(\"b\").longOpt(\"BOpt\").hasArg().desc(\"B description\").get()).addOption(Option.builder().longOpt(\"COpt\").hasArg().desc(\"A COpt description\").get());\r\n    // @formatter:on\r\n    HelpFormatter underTest = HelpFormatter.builder().get();\r\n    final List<Option> expected = new ArrayList<>();\r\n    expected.add(options.getOption(\"a\"));\r\n    expected.add(options.getOption(\"b\"));\r\n    expected.add(options.getOption(\"COpt\"));\r\n    assertEquals(expected, underTest.sort(options));\r\n    expected.set(0, expected.get(2));\r\n    expected.set(2, options.getOption(\"a\"));\r\n    underTest = HelpFormatter.builder().setComparator(AbstractHelpFormatter.DEFAULT_COMPARATOR.reversed()).get();\r\n    assertEquals(expected, underTest.sort(options));\r\n    assertEquals(0, underTest.sort(Collections.emptyList()).size(), \"empty colleciton should return empty list\");\r\n    assertEquals(0, underTest.sort((Iterable<Option>) null).size(), \"null iterable should return empty list\");\r\n    assertEquals(0, underTest.sort((Options) null).size(), \"null Options should return empty list\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-cli\\src\\test\\java\\org\\apache\\commons\\cli\\help\\HelpFormatterTest.java",
  "methodName" : "testSyntaxPrefix",
  "sourceCode" : "@Test\r\nvoid testSyntaxPrefix() {\r\n    final StringBuilder sb = new StringBuilder();\r\n    final TextHelpAppendable serializer = new TextHelpAppendable(sb);\r\n    final HelpFormatter formatter = HelpFormatter.builder().setHelpAppendable(serializer).get();\r\n    formatter.setSyntaxPrefix(\"Something new\");\r\n    assertEquals(\"Something new\", formatter.getSyntaxPrefix());\r\n    assertEquals(0, sb.length(), \"Should not write to output\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-cli\\src\\test\\java\\org\\apache\\commons\\cli\\help\\HelpFormatterTest.java",
  "methodName" : "testToArgNameTest",
  "sourceCode" : "@Test\r\nvoid testToArgNameTest() {\r\n    final StringBuilder sb = new StringBuilder();\r\n    final TextHelpAppendable serializer = new TextHelpAppendable(sb);\r\n    final HelpFormatter formatter = HelpFormatter.builder().setHelpAppendable(serializer).get();\r\n    assertEquals(\"<some Arg>\", formatter.toArgName(\"some Arg\"));\r\n    assertEquals(\"<>\", formatter.toArgName(\"\"));\r\n    assertEquals(\"<>\", formatter.toArgName(null));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-cli\\src\\test\\java\\org\\apache\\commons\\cli\\help\\HelpFormatterTest.java",
  "methodName" : "testToSyntaxOptionGroupTest",
  "sourceCode" : "@Test\r\nvoid testToSyntaxOptionGroupTest() {\r\n    final HelpFormatter underTest = HelpFormatter.builder().get();\r\n    // @formatter:off\r\n    final OptionGroup optionGroup = new OptionGroup().addOption(Option.builder().option(\"o\").longOpt(\"one\").hasArg().get()).addOption(Option.builder().option(\"t\").longOpt(\"two\").hasArg().required().argName(\"other\").get()).addOption(Option.builder().option(\"th\").longOpt(\"three\").required().argName(\"other\").get()).addOption(Option.builder().option(\"f\").argName(\"other\").get()).addOption(Option.builder().longOpt(\"five\").hasArg().argName(\"other\").get()).addOption(Option.builder().longOpt(\"six\").required().hasArg().argName(\"other\").get()).addOption(Option.builder().option(\"s\").longOpt(\"sevem\").hasArg().get());\r\n    // @formatter:on\r\n    assertEquals(\"[-f | --five <other> | -o <arg> | -s <arg> | --six <other> | -t <other> | -th]\", underTest.toSyntaxOptions(optionGroup));\r\n    optionGroup.setRequired(true);\r\n    assertEquals(\"-f | --five <other> | -o <arg> | -s <arg> | --six <other> | -t <other> | -th\", underTest.toSyntaxOptions(optionGroup));\r\n    assertEquals(\"\", underTest.toSyntaxOptions(new OptionGroup()), \"empty group should return empty string\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-cli\\src\\test\\java\\org\\apache\\commons\\cli\\help\\HelpFormatterTest.java",
  "methodName" : "testToSyntaxOptionIterableTest",
  "sourceCode" : "@Test\r\nvoid testToSyntaxOptionIterableTest() {\r\n    final HelpFormatter underTest = HelpFormatter.builder().get();\r\n    final List<Option> options = new ArrayList<>();\r\n    options.add(Option.builder().option(\"o\").longOpt(\"one\").hasArg().get());\r\n    options.add(Option.builder().option(\"t\").longOpt(\"two\").hasArg().required().argName(\"other\").get());\r\n    options.add(Option.builder().option(\"th\").longOpt(\"three\").required().argName(\"other\").get());\r\n    options.add(Option.builder().option(\"f\").argName(\"other\").get());\r\n    options.add(Option.builder().longOpt(\"five\").hasArg().argName(\"other\").get());\r\n    options.add(Option.builder().longOpt(\"six\").required().hasArg().argName(\"other\").get());\r\n    options.add(Option.builder().option(\"s\").longOpt(\"sevem\").hasArg().get());\r\n    assertEquals(\"[-f] [--five <other>] [-o <arg>] [-s <arg>] --six <other> -t <other> -th\", underTest.toSyntaxOptions(options));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-cli\\src\\test\\java\\org\\apache\\commons\\cli\\help\\HelpFormatterTest.java",
  "methodName" : "testToSyntaxOptionOptionsTest",
  "sourceCode" : "@Test\r\nvoid testToSyntaxOptionOptionsTest() {\r\n    final HelpFormatter underTest = HelpFormatter.builder().get();\r\n    Options options = getTestGroups();\r\n    assertEquals(\"[-1 <arg> | --aon <arg> | --uno <arg>] [--dos <arg> | --dó <arg> | --two <arg>] [--three <arg> | --tres <arg> | --trí <arg>]\", underTest.toSyntaxOptions(options), \"getTestGroup options failed\");\r\n    // @formatter:off\r\n    options = new Options().addOption(Option.builder().option(\"o\").longOpt(\"one\").hasArg().get()).addOption(Option.builder().option(\"t\").longOpt(\"two\").hasArg().required().argName(\"other\").get()).addOption(Option.builder().option(\"th\").longOpt(\"three\").required().argName(\"other\").get()).addOption(Option.builder().option(\"f\").argName(\"other\").get()).addOption(Option.builder().longOpt(\"five\").hasArg().argName(\"other\").get()).addOption(Option.builder().longOpt(\"six\").required().hasArg().argName(\"other\").get()).addOption(Option.builder().option(\"s\").longOpt(\"seven\").hasArg().get());\r\n    // @formatter:on\r\n    assertEquals(\"[-f] [--five <other>] [-o <arg>] [-s <arg>] --six <other> -t <other> -th\", underTest.toSyntaxOptions(options), \"assorted options failed\");\r\n    // @formatter:off\r\n    options = new Options().addOption(Option.builder().option(\"o\").longOpt(\"one\").hasArg().get()).addOptionGroup(new OptionGroup().addOption(Option.builder().option(\"t\").longOpt(\"two\").hasArg().required().argName(\"other\").get()).addOption(Option.builder().option(\"th\").longOpt(\"three\").required().argName(\"other\").get())).addOption(Option.builder().option(\"f\").argName(\"other\").get()).addOption(Option.builder().longOpt(\"five\").hasArg().argName(\"other\").get()).addOption(Option.builder().longOpt(\"six\").required().hasArg().argName(\"other\").get()).addOption(Option.builder().option(\"s\").longOpt(\"seven\").hasArg().get());\r\n    // @formatter:on\r\n    assertEquals(\"[-f] [--five <other>] [-o <arg>] [-s <arg>] --six <other> [-t <other> | -th]\", underTest.toSyntaxOptions(options), \"option with group failed\");\r\n    // @formatter:off\r\n    final OptionGroup group1 = new OptionGroup().addOption(Option.builder().option(\"t\").longOpt(\"two\").hasArg().required().argName(\"other\").get()).addOption(Option.builder().option(\"th\").longOpt(\"three\").required().argName(\"other\").get());\r\n    // @formatter:on\r\n    group1.setRequired(true);\r\n    // @formatter:off\r\n    options = new Options().addOption(Option.builder().option(\"o\").longOpt(\"one\").hasArg().get()).addOptionGroup(group1).addOption(Option.builder().option(\"f\").argName(\"other\").get()).addOption(Option.builder().longOpt(\"five\").hasArg().argName(\"other\").get()).addOption(Option.builder().longOpt(\"six\").required().hasArg().argName(\"other\").get()).addOption(Option.builder().option(\"s\").longOpt(\"seven\").hasArg().get());\r\n    // @formatter:on\r\n    assertEquals(\"[-f] [--five <other>] [-o <arg>] [-s <arg>] --six <other> -t <other> | -th\", underTest.toSyntaxOptions(options), \"options with required group failed\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-cli\\src\\test\\java\\org\\apache\\commons\\cli\\help\\OptionFormatterTest.java",
  "methodName" : "testAsOptional",
  "sourceCode" : "@Test\r\nvoid testAsOptional() {\r\n    OptionFormatter underTest;\r\n    final Option option = Option.builder().option(\"o\").longOpt(\"opt\").hasArg().get();\r\n    underTest = OptionFormatter.from(option);\r\n    assertEquals(\"[what]\", underTest.toOptional(\"what\"));\r\n    assertEquals(\"\", underTest.toOptional(\"\"), \"enpty string should return empty string\");\r\n    assertEquals(\"\", underTest.toOptional(null), \"null should return empty string\");\r\n    underTest = OptionFormatter.builder().setOptionalDelimiters(\"-> \", \" <-\").build(option);\r\n    assertEquals(\"-> what <-\", underTest.toOptional(\"what\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-cli\\src\\test\\java\\org\\apache\\commons\\cli\\help\\OptionFormatterTest.java",
  "methodName" : "testAsSyntaxOption",
  "sourceCode" : "@Test\r\nvoid testAsSyntaxOption() {\r\n    OptionFormatter underTest;\r\n    Option option = Option.builder().option(\"o\").longOpt(\"opt\").hasArg().get();\r\n    underTest = OptionFormatter.from(option);\r\n    assertEquals(\"[-o <arg>]\", underTest.toSyntaxOption(), \"optional arg failed\");\r\n    option = Option.builder().option(\"o\").longOpt(\"opt\").hasArg().argName(\"other\").get();\r\n    underTest = OptionFormatter.from(option);\r\n    assertEquals(\"[-o <other>]\", underTest.toSyntaxOption(), \"optional 'other' arg failed\");\r\n    option = Option.builder().option(\"o\").longOpt(\"opt\").hasArg().required().argName(\"other\").get();\r\n    underTest = OptionFormatter.from(option);\r\n    assertEquals(\"-o <other>\", underTest.toSyntaxOption(), \"required 'other' arg failed\");\r\n    option = Option.builder().option(\"o\").longOpt(\"opt\").required().argName(\"other\").get();\r\n    underTest = OptionFormatter.from(option);\r\n    assertEquals(\"-o\", underTest.toSyntaxOption(), \"required no arg failed\");\r\n    option = Option.builder().option(\"o\").argName(\"other\").get();\r\n    underTest = OptionFormatter.from(option);\r\n    assertEquals(\"[-o]\", underTest.toSyntaxOption(), \"optional no arg arg failed\");\r\n    option = Option.builder().longOpt(\"opt\").hasArg().argName(\"other\").get();\r\n    underTest = OptionFormatter.from(option);\r\n    assertEquals(\"[--opt <other>]\", underTest.toSyntaxOption(), \"optional longOpt 'other' arg failed\");\r\n    option = Option.builder().longOpt(\"opt\").required().hasArg().argName(\"other\").get();\r\n    underTest = OptionFormatter.from(option);\r\n    assertEquals(\"--opt <other>\", underTest.toSyntaxOption(), \"required longOpt 'other' arg failed\");\r\n    option = Option.builder().option(\"ot\").longOpt(\"opt\").hasArg().get();\r\n    underTest = OptionFormatter.from(option);\r\n    assertEquals(\"[-ot <arg>]\", underTest.toSyntaxOption(), \"optional multi char opt arg failed\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-cli\\src\\test\\java\\org\\apache\\commons\\cli\\help\\OptionFormatterTest.java",
  "methodName" : "testCli343Part1",
  "sourceCode" : "@Test\r\nvoid testCli343Part1() {\r\n    assertThrows(IllegalStateException.class, () -> Option.builder().required(false).build());\r\n    assertThrows(IllegalStateException.class, () -> Option.builder().required(false).get());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-cli\\src\\test\\java\\org\\apache\\commons\\cli\\help\\OptionFormatterTest.java",
  "methodName" : "testCli343Part2",
  "sourceCode" : "@Test\r\nvoid testCli343Part2() {\r\n    assertThrows(IllegalStateException.class, () -> Option.builder().desc(\"description\").build());\r\n    assertThrows(IllegalStateException.class, () -> Option.builder().desc(\"description\").get());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-cli\\src\\test\\java\\org\\apache\\commons\\cli\\help\\OptionFormatterTest.java",
  "methodName" : "testComplexDeprecationFormat",
  "sourceCode" : "@ParameterizedTest(name = \"{index} {0}\")\r\n@MethodSource(\"deprecatedAttributesData\")\r\nvoid testComplexDeprecationFormat(final DeprecatedAttributes da, final String expected) {\r\n    final Option.Builder builder = Option.builder(\"o\").deprecated(da);\r\n    final Option.Builder builderWithDesc = Option.builder(\"o\").desc(\"The description\").deprecated(da);\r\n    assertEquals(expected, OptionFormatter.COMPLEX_DEPRECATED_FORMAT.apply(builder.get()));\r\n    assertEquals(expected + \" The description\", OptionFormatter.COMPLEX_DEPRECATED_FORMAT.apply(builderWithDesc.get()));\r\n}",
  "annotations" : [ "ParameterizedTest" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-cli\\src\\test\\java\\org\\apache\\commons\\cli\\help\\OptionFormatterTest.java",
  "methodName" : "testCopyConstructor",
  "sourceCode" : "@Test\r\nvoid testCopyConstructor() {\r\n    final Function<Option, String> depFunc = o -> \"Ooo Deprecated\";\r\n    final BiFunction<OptionFormatter, Boolean, String> fmtFunc = (o, b) -> \"Yep, it worked\";\r\n    // @formatter:off\r\n    final OptionFormatter.Builder builder = OptionFormatter.builder().setLongOptPrefix(\"l\").setOptPrefix(\"s\").setArgumentNameDelimiters(\"{\", \"}\").setDefaultArgName(\"Some Argument\").setOptSeparator(\" and \").setOptionalDelimiters(\"?>\", \"<?\").setSyntaxFormatFunction(fmtFunc).setDeprecatedFormatFunction(depFunc);\r\n    // @formatter:on\r\n    Option option = Option.builder(\"o\").longOpt(\"opt\").get();\r\n    OptionFormatter formatter = builder.build(option);\r\n    OptionFormatter.Builder builder2 = new OptionFormatter.Builder(formatter);\r\n    assertEquivalent(formatter, builder2.build(option));\r\n    option = Option.builder(\"o\").longOpt(\"opt\").deprecated().required().get();\r\n    formatter = builder.build(option);\r\n    builder2 = new OptionFormatter.Builder(formatter);\r\n    assertEquivalent(formatter, builder2.build(option));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-cli\\src\\test\\java\\org\\apache\\commons\\cli\\help\\OptionFormatterTest.java",
  "methodName" : "testDefaultSyntaxFormat",
  "sourceCode" : "@Test\r\nvoid testDefaultSyntaxFormat() {\r\n    Option option = Option.builder().option(\"o\").longOpt(\"opt\").hasArg().get();\r\n    OptionFormatter formatter = OptionFormatter.from(option);\r\n    assertEquals(\"[-o <arg>]\", formatter.toSyntaxOption());\r\n    assertEquals(\"-o <arg>\", formatter.toSyntaxOption(true));\r\n    option = Option.builder().option(\"o\").longOpt(\"opt\").hasArg().required().get();\r\n    formatter = OptionFormatter.from(option);\r\n    assertEquals(\"-o <arg>\", formatter.toSyntaxOption());\r\n    assertEquals(\"[-o <arg>]\", formatter.toSyntaxOption(false));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-cli\\src\\test\\java\\org\\apache\\commons\\cli\\help\\OptionFormatterTest.java",
  "methodName" : "testGetBothOpt",
  "sourceCode" : "@Test\r\nvoid testGetBothOpt() {\r\n    OptionFormatter underTest;\r\n    Option option = Option.builder().option(\"o\").longOpt(\"opt\").hasArg().get();\r\n    underTest = OptionFormatter.from(option);\r\n    assertEquals(\"-o, --opt\", underTest.getBothOpt());\r\n    option = Option.builder().longOpt(\"opt\").hasArg().get();\r\n    underTest = OptionFormatter.from(option);\r\n    assertEquals(\"--opt\", underTest.getBothOpt());\r\n    option = Option.builder().option(\"o\").hasArg().get();\r\n    underTest = OptionFormatter.from(option);\r\n    assertEquals(\"-o\", underTest.getBothOpt());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-cli\\src\\test\\java\\org\\apache\\commons\\cli\\help\\OptionFormatterTest.java",
  "methodName" : "testGetDescription",
  "sourceCode" : "@Test\r\nvoid testGetDescription() {\r\n    final Option normalOption = Option.builder().option(\"o\").longOpt(\"one\").hasArg().desc(\"The description\").get();\r\n    final Option deprecatedOption = Option.builder().option(\"o\").longOpt(\"one\").hasArg().desc(\"The description\").deprecated().get();\r\n    final Option deprecatedOptionWithAttributes = Option.builder().option(\"o\").longOpt(\"one\").hasArg().desc(\"The description\").deprecated(DeprecatedAttributes.builder().setForRemoval(true).setSince(\"now\").setDescription(\"Use something else\").get()).get();\r\n    assertEquals(\"The description\", OptionFormatter.from(normalOption).getDescription(), \"normal option failure\");\r\n    assertEquals(\"The description\", OptionFormatter.from(deprecatedOption).getDescription(), \"deprecated option failure\");\r\n    assertEquals(\"The description\", OptionFormatter.from(deprecatedOptionWithAttributes).getDescription(), \"complex deprecated option failure\");\r\n    OptionFormatter.Builder builder = OptionFormatter.builder().setDeprecatedFormatFunction(OptionFormatter.SIMPLE_DEPRECATED_FORMAT);\r\n    assertEquals(\"The description\", builder.build(normalOption).getDescription(), \"normal option failure\");\r\n    assertEquals(\"[Deprecated] The description\", builder.build(deprecatedOption).getDescription(), \"deprecated option failure\");\r\n    assertEquals(\"[Deprecated] The description\", builder.build(deprecatedOptionWithAttributes).getDescription(), \"complex deprecated option failure\");\r\n    builder = OptionFormatter.builder().setDeprecatedFormatFunction(OptionFormatter.COMPLEX_DEPRECATED_FORMAT);\r\n    assertEquals(\"The description\", builder.build(normalOption).getDescription(), \"normal option failure\");\r\n    assertEquals(\"[Deprecated] The description\", builder.build(deprecatedOption).getDescription(), \"deprecated option failure\");\r\n    assertEquals(\"[Deprecated for removal since now. Use something else] The description\", builder.build(deprecatedOptionWithAttributes).getDescription(), \"complex deprecated option failure\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-cli\\src\\test\\java\\org\\apache\\commons\\cli\\help\\OptionFormatterTest.java",
  "methodName" : "testSetArgumentNameDelimiters",
  "sourceCode" : "@Test\r\nvoid testSetArgumentNameDelimiters() {\r\n    final Option option = Option.builder().option(\"o\").longOpt(\"opt\").hasArg().get();\r\n    OptionFormatter.Builder builder = OptionFormatter.builder().setArgumentNameDelimiters(\"with argument named \", \".\");\r\n    assertEquals(\"with argument named arg.\", builder.build(option).getArgName());\r\n    builder = OptionFormatter.builder().setArgumentNameDelimiters(null, \"\");\r\n    assertEquals(\"arg\", builder.build(option).getArgName());\r\n    builder = OptionFormatter.builder().setArgumentNameDelimiters(\"\", null);\r\n    assertEquals(\"arg\", builder.build(option).getArgName());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-cli\\src\\test\\java\\org\\apache\\commons\\cli\\help\\OptionFormatterTest.java",
  "methodName" : "testSetDefaultArgName",
  "sourceCode" : "@Test\r\nvoid testSetDefaultArgName() {\r\n    final Option option = Option.builder().option(\"o\").longOpt(\"opt\").hasArg().get();\r\n    OptionFormatter.Builder builder = OptionFormatter.builder().setDefaultArgName(\"foo\");\r\n    assertEquals(\"<foo>\", builder.build(option).getArgName());\r\n    builder = OptionFormatter.builder().setDefaultArgName(\"\");\r\n    assertEquals(\"<arg>\", builder.build(option).getArgName());\r\n    builder = OptionFormatter.builder().setDefaultArgName(null);\r\n    assertEquals(\"<arg>\", builder.build(option).getArgName());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-cli\\src\\test\\java\\org\\apache\\commons\\cli\\help\\OptionFormatterTest.java",
  "methodName" : "testSetLongOptPrefix",
  "sourceCode" : "@Test\r\nvoid testSetLongOptPrefix() {\r\n    final Option option = Option.builder().option(\"o\").longOpt(\"opt\").hasArg().get();\r\n    OptionFormatter.Builder builder = OptionFormatter.builder().setLongOptPrefix(\"fo\");\r\n    assertEquals(\"foopt\", builder.build(option).getLongOpt());\r\n    builder = OptionFormatter.builder().setLongOptPrefix(\"\");\r\n    assertEquals(\"opt\", builder.build(option).getLongOpt());\r\n    builder = OptionFormatter.builder().setLongOptPrefix(null);\r\n    assertEquals(\"opt\", builder.build(option).getLongOpt());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-cli\\src\\test\\java\\org\\apache\\commons\\cli\\help\\OptionFormatterTest.java",
  "methodName" : "testSetOptArgumentSeparator",
  "sourceCode" : "@Test\r\nvoid testSetOptArgumentSeparator() {\r\n    final Option option = Option.builder().option(\"o\").longOpt(\"opt\").hasArg().get();\r\n    OptionFormatter.Builder builder = OptionFormatter.builder().setOptArgSeparator(\" with argument named \");\r\n    assertEquals(\"[-o with argument named <arg>]\", builder.build(option).toSyntaxOption());\r\n    builder = OptionFormatter.builder().setOptArgSeparator(null);\r\n    assertEquals(\"[-o<arg>]\", builder.build(option).toSyntaxOption());\r\n    builder = OptionFormatter.builder().setOptArgSeparator(\"=\");\r\n    assertEquals(\"[-o=<arg>]\", builder.build(option).toSyntaxOption());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-cli\\src\\test\\java\\org\\apache\\commons\\cli\\help\\OptionFormatterTest.java",
  "methodName" : "testSetOptSeparator",
  "sourceCode" : "@Test\r\nvoid testSetOptSeparator() {\r\n    final Option option = Option.builder().option(\"o\").longOpt(\"opt\").hasArg().get();\r\n    OptionFormatter.Builder builder = OptionFormatter.builder().setOptSeparator(\" and \");\r\n    assertEquals(\"-o and --opt\", builder.build(option).getBothOpt());\r\n    builder = OptionFormatter.builder().setOptSeparator(\"\");\r\n    assertEquals(\"-o--opt\", builder.build(option).getBothOpt(), \"Empty string should return default\");\r\n    builder = OptionFormatter.builder().setOptSeparator(null);\r\n    assertEquals(\"-o--opt\", builder.build(option).getBothOpt(), \"null string should return default\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-cli\\src\\test\\java\\org\\apache\\commons\\cli\\help\\OptionFormatterTest.java",
  "methodName" : "testSetSyntaxFormatFunction",
  "sourceCode" : "@Test\r\nvoid testSetSyntaxFormatFunction() {\r\n    final BiFunction<OptionFormatter, Boolean, String> func = (o, b) -> \"Yep, it worked\";\r\n    final Option option = Option.builder().option(\"o\").longOpt(\"opt\").hasArg().get();\r\n    OptionFormatter.Builder builder = OptionFormatter.builder().setSyntaxFormatFunction(func);\r\n    assertEquals(\"Yep, it worked\", builder.build(option).toSyntaxOption());\r\n    builder = OptionFormatter.builder().setSyntaxFormatFunction(null);\r\n    assertEquals(\"[-o <arg>]\", builder.build(option).toSyntaxOption());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-cli\\src\\test\\java\\org\\apache\\commons\\cli\\help\\TextHelpAppendableTest.java",
  "methodName" : "tesstMakeColumnQueue",
  "sourceCode" : "@Test\r\nvoid tesstMakeColumnQueue() {\r\n    final String text = \"The quick brown fox jumps over the lazy dog\";\r\n    final TextStyle.Builder styleBuilder = TextStyle.builder().setMaxWidth(10).setIndent(0).setLeftPad(0);\r\n    Queue<String> expected = new LinkedList<>();\r\n    expected.add(\"The quick \");\r\n    expected.add(\"brown fox \");\r\n    expected.add(\"jumps over\");\r\n    expected.add(\"the lazy  \");\r\n    expected.add(\"dog       \");\r\n    Queue<String> result = underTest.makeColumnQueue(text, styleBuilder.get());\r\n    assertEquals(expected, result, \"left aligned failed\");\r\n    expected.clear();\r\n    expected.add(\" The quick\");\r\n    expected.add(\" brown fox\");\r\n    expected.add(\"jumps over\");\r\n    expected.add(\"  the lazy\");\r\n    expected.add(\"       dog\");\r\n    styleBuilder.setAlignment(TextStyle.Alignment.RIGHT);\r\n    result = underTest.makeColumnQueue(text, styleBuilder.get());\r\n    assertEquals(expected, result, \"right aligned failed\");\r\n    expected.clear();\r\n    expected.add(\"The quick \");\r\n    expected.add(\"brown fox \");\r\n    expected.add(\"jumps over\");\r\n    expected.add(\" the lazy \");\r\n    expected.add(\"   dog    \");\r\n    styleBuilder.setAlignment(TextStyle.Alignment.CENTER);\r\n    result = underTest.makeColumnQueue(text, styleBuilder.get());\r\n    assertEquals(expected, result, \"center aligned failed\");\r\n    expected = new LinkedList<>();\r\n    expected.add(\"      The quick\");\r\n    expected.add(\"          brown\");\r\n    expected.add(\"            fox\");\r\n    expected.add(\"          jumps\");\r\n    expected.add(\"       over the\");\r\n    expected.add(\"       lazy dog\");\r\n    styleBuilder.setAlignment(TextStyle.Alignment.RIGHT).setLeftPad(5).setIndent(2);\r\n    result = underTest.makeColumnQueue(text, styleBuilder.get());\r\n    assertEquals(expected, result, \"right aligned failed\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-cli\\src\\test\\java\\org\\apache\\commons\\cli\\help\\TextHelpAppendableTest.java",
  "methodName" : "testAdjustTableFormat",
  "sourceCode" : "@Test\r\nvoid testAdjustTableFormat() {\r\n    // test width smaller than header\r\n    // @formatter:off\r\n    final TableDefinition tableDefinition = TableDefinition.from(\"Testing\", Collections.singletonList(TextStyle.builder().setMaxWidth(3).get()), Collections.singletonList(\"header\"), // \"data\" shorter than \"header\"\r\n    Collections.singletonList(Collections.singletonList(\"data\")));\r\n    // @formatter:on\r\n    final TableDefinition actual = underTest.adjustTableFormat(tableDefinition);\r\n    assertEquals(\"header\".length(), actual.columnTextStyles().get(0).getMaxWidth());\r\n    assertEquals(\"header\".length(), actual.columnTextStyles().get(0).getMinWidth());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-cli\\src\\test\\java\\org\\apache\\commons\\cli\\help\\TextHelpAppendableTest.java",
  "methodName" : "testAppend",
  "sourceCode" : "@Test\r\nvoid testAppend() throws IOException {\r\n    final char c = (char) 0x1F44D;\r\n    underTest.append(c);\r\n    assertEquals(1, sb.length());\r\n    assertEquals(String.valueOf(c), sb.toString());\r\n    sb.setLength(0);\r\n    underTest.append(\"Hello\");\r\n    assertEquals(\"Hello\", sb.toString());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-cli\\src\\test\\java\\org\\apache\\commons\\cli\\help\\TextHelpAppendableTest.java",
  "methodName" : "testAppendHeader",
  "sourceCode" : "@Test\r\nvoid testAppendHeader() throws IOException {\r\n    final String[] expected = { \" Hello World\", \" ===========\", \"\" };\r\n    sb.setLength(0);\r\n    underTest.appendHeader(1, \"Hello World\");\r\n    List<String> actual = IOUtils.readLines(new StringReader(sb.toString()));\r\n    assertEquals(Arrays.asList(expected), actual, \"header 1 failed\");\r\n    sb.setLength(0);\r\n    underTest.appendHeader(2, \"Hello World\");\r\n    actual = IOUtils.readLines(new StringReader(sb.toString()));\r\n    expected[1] = \" %%%%%%%%%%%\";\r\n    assertEquals(Arrays.asList(expected), actual, \"header 2 failed\");\r\n    sb.setLength(0);\r\n    underTest.appendHeader(3, \"Hello World\");\r\n    actual = IOUtils.readLines(new StringReader(sb.toString()));\r\n    expected[1] = \" +++++++++++\";\r\n    assertEquals(Arrays.asList(expected), actual, \"header 3 failed\");\r\n    sb.setLength(0);\r\n    underTest.appendHeader(4, \"Hello World\");\r\n    actual = IOUtils.readLines(new StringReader(sb.toString()));\r\n    expected[1] = \" ___________\";\r\n    assertEquals(Arrays.asList(expected), actual, \"header 4 failed\");\r\n    sb.setLength(0);\r\n    underTest.appendHeader(5, \"Hello World\");\r\n    actual = IOUtils.readLines(new StringReader(sb.toString()));\r\n    assertEquals(Arrays.asList(expected), actual, \"header 5 failed\");\r\n    sb.setLength(0);\r\n    assertThrows(IllegalArgumentException.class, () -> underTest.appendHeader(0, \"Hello World\"));\r\n    sb.setLength(0);\r\n    underTest.appendHeader(5, \"\");\r\n    assertEquals(0, sb.length(), \"empty string test failed\");\r\n    sb.setLength(0);\r\n    underTest.appendHeader(5, null);\r\n    assertEquals(0, sb.length(), \"null test failed\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-cli\\src\\test\\java\\org\\apache\\commons\\cli\\help\\TextHelpAppendableTest.java",
  "methodName" : "testAppendList",
  "sourceCode" : "@Test\r\nvoid testAppendList() throws IOException {\r\n    final List<String> expected = new ArrayList<>();\r\n    final String[] entries = { \"one\", \"two\", \"three\" };\r\n    for (int i = 0; i < entries.length; i++) {\r\n        expected.add(String.format(\"  %s. %s\", i + 1, entries[i]));\r\n    }\r\n    expected.add(\"\");\r\n    sb.setLength(0);\r\n    underTest.appendList(true, Arrays.asList(entries));\r\n    List<String> actual = IOUtils.readLines(new StringReader(sb.toString()));\r\n    assertEquals(expected, actual, \"ordered list failed\");\r\n    sb.setLength(0);\r\n    expected.clear();\r\n    for (final String entry : entries) {\r\n        expected.add(String.format(\"  * %s\", entry));\r\n    }\r\n    expected.add(\"\");\r\n    underTest.appendList(false, Arrays.asList(entries));\r\n    actual = IOUtils.readLines(new StringReader(sb.toString()));\r\n    assertEquals(expected, actual, \"unordered list failed\");\r\n    sb.setLength(0);\r\n    expected.clear();\r\n    underTest.appendList(false, Collections.emptyList());\r\n    actual = IOUtils.readLines(new StringReader(sb.toString()));\r\n    assertEquals(expected, actual, \"empty list failed\");\r\n    sb.setLength(0);\r\n    expected.clear();\r\n    underTest.appendList(false, null);\r\n    actual = IOUtils.readLines(new StringReader(sb.toString()));\r\n    assertEquals(expected, actual, \"null list failed\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-cli\\src\\test\\java\\org\\apache\\commons\\cli\\help\\TextHelpAppendableTest.java",
  "methodName" : "testAppendParagraph",
  "sourceCode" : "@Test\r\nvoid testAppendParagraph() throws IOException {\r\n    final String[] expected = { \" Hello World\", \"\" };\r\n    sb.setLength(0);\r\n    underTest.appendParagraph(\"Hello World\");\r\n    final List<String> actual = IOUtils.readLines(new StringReader(sb.toString()));\r\n    assertEquals(Arrays.asList(expected), actual);\r\n    sb.setLength(0);\r\n    underTest.appendParagraph(\"\");\r\n    assertEquals(0, sb.length(), \"empty string test failed\");\r\n    sb.setLength(0);\r\n    underTest.appendParagraph(null);\r\n    assertEquals(0, sb.length(), \"null test failed\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-cli\\src\\test\\java\\org\\apache\\commons\\cli\\help\\TextHelpAppendableTest.java",
  "methodName" : "testAppendParagraphFormat",
  "sourceCode" : "@Test\r\nvoid testAppendParagraphFormat() throws IOException {\r\n    final String[] expected = { \" Hello Joe World 309\", \"\" };\r\n    sb.setLength(0);\r\n    underTest.appendParagraphFormat(\"Hello %s World %,d\", \"Joe\", 309);\r\n    final List<String> actual = IOUtils.readLines(new StringReader(sb.toString()));\r\n    assertEquals(Arrays.asList(expected), actual);\r\n    sb.setLength(0);\r\n    underTest.appendParagraphFormat(\"\");\r\n    assertEquals(0, sb.length(), \"empty string test failed\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-cli\\src\\test\\java\\org\\apache\\commons\\cli\\help\\TextHelpAppendableTest.java",
  "methodName" : "testAppendTable",
  "sourceCode" : "@Test\r\nvoid testAppendTable() throws IOException {\r\n    final TextStyle.Builder styleBuilder = TextStyle.builder();\r\n    final List<TextStyle> styles = new ArrayList<>();\r\n    styles.add(styleBuilder.setIndent(2).get());\r\n    styles.add(styleBuilder.setIndent(0).setLeftPad(5).setAlignment(TextStyle.Alignment.RIGHT).get());\r\n    final String[] headers = { \"fox\", \"time\" };\r\n    // @formatter:off\r\n    final List<List<String>> rows = Arrays.asList(Arrays.asList(\"The quick brown fox jumps over the lazy dog\", \"Now is the time for all good people to come to the aid of their country\"), Arrays.asList(\"Léimeann an sionnach donn gasta thar an madra leisciúil\", \"Anois an t-am do na daoine maithe go léir teacht i gcabhair ar a dtír\"));\r\n    // @formatter:on\r\n    List<String> expected = new ArrayList<>();\r\n    expected.add(\" Common Phrases\");\r\n    expected.add(\"\");\r\n    expected.add(\"               fox                                       time                   \");\r\n    expected.add(\" The quick brown fox jumps over           Now is the time for all good people to\");\r\n    expected.add(\"   the lazy dog                                 come to the aid of their country\");\r\n    expected.add(\" Léimeann an sionnach donn gasta       Anois an t-am do na daoine maithe go léir\");\r\n    expected.add(\"   thar an madra leisciúil                           teacht i gcabhair ar a dtír\");\r\n    expected.add(\"\");\r\n    TableDefinition table = TableDefinition.from(\"Common Phrases\", styles, Arrays.asList(headers), rows);\r\n    sb.setLength(0);\r\n    underTest.setMaxWidth(80);\r\n    underTest.appendTable(table);\r\n    List<String> actual = IOUtils.readLines(new StringReader(sb.toString()));\r\n    assertEquals(expected, actual, \"full table failed\");\r\n    table = TableDefinition.from(null, styles, Arrays.asList(headers), rows);\r\n    expected.remove(1);\r\n    expected.remove(0);\r\n    sb.setLength(0);\r\n    underTest.appendTable(table);\r\n    actual = IOUtils.readLines(new StringReader(sb.toString()));\r\n    assertEquals(expected, actual);\r\n    table = TableDefinition.from(null, styles, Arrays.asList(headers), Collections.emptyList());\r\n    expected = new ArrayList<>();\r\n    expected.add(\" fox     time\");\r\n    expected.add(\"\");\r\n    sb.setLength(0);\r\n    underTest.appendTable(table);\r\n    actual = IOUtils.readLines(new StringReader(sb.toString()));\r\n    assertEquals(expected, actual, \"no rows test failed\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-cli\\src\\test\\java\\org\\apache\\commons\\cli\\help\\TextHelpAppendableTest.java",
  "methodName" : "testAppendTitle",
  "sourceCode" : "@Test\r\nvoid testAppendTitle() throws IOException {\r\n    final String[] expected = { \" Hello World\", \" ###########\", \"\" };\r\n    sb.setLength(0);\r\n    underTest.appendTitle(\"Hello World\");\r\n    final List<String> actual = IOUtils.readLines(new StringReader(sb.toString()));\r\n    assertEquals(Arrays.asList(expected), actual);\r\n    sb.setLength(0);\r\n    underTest.appendTitle(\"\");\r\n    assertEquals(0, sb.length(), \"empty string test failed\");\r\n    sb.setLength(0);\r\n    underTest.appendTitle(null);\r\n    assertEquals(0, sb.length(), \"null test failed\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-cli\\src\\test\\java\\org\\apache\\commons\\cli\\help\\TextHelpAppendableTest.java",
  "methodName" : "testGetStyleBuilder",
  "sourceCode" : "@Test\r\nvoid testGetStyleBuilder() {\r\n    final TextStyle.Builder builder = underTest.getTextStyleBuilder();\r\n    assertEquals(TextHelpAppendable.DEFAULT_INDENT, builder.getIndent(), \"Default indent value was changed, some tests may fail\");\r\n    assertEquals(TextHelpAppendable.DEFAULT_LEFT_PAD, builder.getLeftPad(), \"Default left pad value was changed, some tests may fail\");\r\n    assertEquals(TextHelpAppendable.DEFAULT_WIDTH, builder.getMaxWidth(), \"Default width value was changed, some tests may fail\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-cli\\src\\test\\java\\org\\apache\\commons\\cli\\help\\TextHelpAppendableTest.java",
  "methodName" : "testindexOfWrapPos",
  "sourceCode" : "@Test\r\nvoid testindexOfWrapPos() {\r\n    final String testString = \"The quick brown fox jumps over\\tthe lazy dog\";\r\n    assertEquals(9, TextHelpAppendable.indexOfWrap(testString, 10, 0), \"did not find end of word\");\r\n    assertEquals(9, TextHelpAppendable.indexOfWrap(testString, 14, 0), \"did not backup to end of word\");\r\n    assertEquals(15, TextHelpAppendable.indexOfWrap(testString, 15, 0), \"did not find word at 15\");\r\n    assertEquals(15, TextHelpAppendable.indexOfWrap(testString, 16, 0));\r\n    assertEquals(30, TextHelpAppendable.indexOfWrap(testString, 15, 20), \"did not find break character\");\r\n    assertEquals(30, TextHelpAppendable.indexOfWrap(testString, 150, 0), \"did not handle text shorter than width\");\r\n    assertThrows(IllegalArgumentException.class, () -> TextHelpAppendable.indexOfWrap(\"\", 0, 0));\r\n    assertEquals(3, TextHelpAppendable.indexOfWrap(\"Hello\", 4, 0));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-cli\\src\\test\\java\\org\\apache\\commons\\cli\\help\\TextHelpAppendableTest.java",
  "methodName" : "testindexOfWrapPosWithWhitespace",
  "sourceCode" : "@ParameterizedTest\r\n@MethodSource(\"org.apache.commons.cli.help.UtilTest#charArgs\")\r\nvoid testindexOfWrapPosWithWhitespace(final Character c, final boolean isWhitespace) {\r\n    final String text = String.format(\"Hello%cWorld\", c);\r\n    assertEquals(isWhitespace ? 5 : 6, TextHelpAppendable.indexOfWrap(text, 7, 0));\r\n}",
  "annotations" : [ "ParameterizedTest" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-cli\\src\\test\\java\\org\\apache\\commons\\cli\\help\\TextHelpAppendableTest.java",
  "methodName" : "testPrintWrapped",
  "sourceCode" : "@Test\r\nvoid testPrintWrapped() throws IOException {\r\n    String text = \"The quick brown fox jumps over the lazy dog\";\r\n    final TextStyle.Builder styleBuilder = TextStyle.builder().setMaxWidth(10).setIndent(0).setLeftPad(0);\r\n    final List<String> expected = new ArrayList<>();\r\n    expected.add(\"The quick\");\r\n    expected.add(\"brown fox\");\r\n    expected.add(\"jumps over\");\r\n    expected.add(\"the lazy\");\r\n    expected.add(\"dog\");\r\n    underTest.printWrapped(text, styleBuilder.get());\r\n    List<String> actual = IOUtils.readLines(new StringReader(sb.toString()));\r\n    assertEquals(expected, actual, \"left aligned failed\");\r\n    sb.setLength(0);\r\n    expected.clear();\r\n    expected.add(\" The quick\");\r\n    expected.add(\" brown fox\");\r\n    expected.add(\"jumps over\");\r\n    expected.add(\"  the lazy\");\r\n    expected.add(\"       dog\");\r\n    styleBuilder.setAlignment(TextStyle.Alignment.RIGHT);\r\n    underTest.printWrapped(text, styleBuilder.get());\r\n    actual = IOUtils.readLines(new StringReader(sb.toString()));\r\n    assertEquals(expected, actual, \"right aligned failed\");\r\n    sb.setLength(0);\r\n    expected.clear();\r\n    expected.add(\"The quick\");\r\n    expected.add(\"brown fox\");\r\n    expected.add(\"jumps over\");\r\n    expected.add(\" the lazy\");\r\n    expected.add(\"   dog\");\r\n    styleBuilder.setAlignment(TextStyle.Alignment.CENTER);\r\n    underTest.printWrapped(text, styleBuilder.get());\r\n    actual = IOUtils.readLines(new StringReader(sb.toString()));\r\n    assertEquals(expected, actual, \"center aligned failed\");\r\n    sb.setLength(0);\r\n    expected.clear();\r\n    expected.add(\" The quick brown fox jumps over the lazy dog\");\r\n    assertEquals(1, underTest.getLeftPad(), \"unexpected page left pad\");\r\n    assertEquals(3, underTest.getIndent(), \"unexpected page indent\");\r\n    assertEquals(74, underTest.getMaxWidth(), \"unexpected page width\");\r\n    underTest.printWrapped(text);\r\n    actual = IOUtils.readLines(new StringReader(sb.toString()));\r\n    assertEquals(expected, actual, \"default format aligned failed\");\r\n    sb.setLength(0);\r\n    text += \".\\nNow is the time for all good people to come to the aid of their country.\";\r\n    expected.clear();\r\n    expected.add(\" The quick brown fox jumps over the lazy dog.\");\r\n    expected.add(\"    Now is the time for all good people to come to the aid of their\");\r\n    expected.add(\"    country.\");\r\n    underTest.printWrapped(text);\r\n    actual = IOUtils.readLines(new StringReader(sb.toString()));\r\n    assertEquals(expected, actual, \"default format aligned failed\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-cli\\src\\test\\java\\org\\apache\\commons\\cli\\help\\TextHelpAppendableTest.java",
  "methodName" : "testResize",
  "sourceCode" : "@Test\r\nvoid testResize() {\r\n    TextStyle.Builder tsBuilder = TextStyle.builder().setIndent(2).setMaxWidth(3);\r\n    underTest.resize(tsBuilder, 0.5);\r\n    assertEquals(0, tsBuilder.getIndent());\r\n    tsBuilder = TextStyle.builder().setIndent(4).setMaxWidth(6);\r\n    underTest.resize(tsBuilder, 0.5);\r\n    assertEquals(1, tsBuilder.getIndent());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-cli\\src\\test\\java\\org\\apache\\commons\\cli\\help\\TextHelpAppendableTest.java",
  "methodName" : "testResizeTableFormat",
  "sourceCode" : "@Test\r\nvoid testResizeTableFormat() {\r\n    underTest.setMaxWidth(150);\r\n    final TableDefinition tableDefinition = TableDefinition.from(\"Caption\", Collections.singletonList(TextStyle.builder().setMinWidth(20).setMaxWidth(100).get()), Collections.singletonList(\"header\"), Collections.singletonList(Collections.singletonList(\"one\")));\r\n    final TableDefinition result = underTest.adjustTableFormat(tableDefinition);\r\n    assertEquals(20, result.columnTextStyles().get(0).getMinWidth(), \"Minimum width should not be reset\");\r\n    assertEquals(100, result.columnTextStyles().get(0).getMaxWidth(), \"Maximum width should not be reset\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-cli\\src\\test\\java\\org\\apache\\commons\\cli\\help\\TextHelpAppendableTest.java",
  "methodName" : "testSetIndent",
  "sourceCode" : "@Test\r\nvoid testSetIndent() {\r\n    assertEquals(TextHelpAppendable.DEFAULT_INDENT, underTest.getIndent(), \"Default indent value was changed, some tests may fail\");\r\n    underTest.setIndent(TextHelpAppendable.DEFAULT_INDENT + 2);\r\n    assertEquals(underTest.getIndent(), TextHelpAppendable.DEFAULT_INDENT + 2);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-cli\\src\\test\\java\\org\\apache\\commons\\cli\\help\\TextHelpAppendableTest.java",
  "methodName" : "testWriteColumnQueues",
  "sourceCode" : "@Test\r\nvoid testWriteColumnQueues() throws IOException {\r\n    final List<Queue<String>> queues = new ArrayList<>();\r\n    Queue<String> queue = new LinkedList<>();\r\n    queue.add(\"The quick \");\r\n    queue.add(\"brown fox \");\r\n    queue.add(\"jumps over\");\r\n    queue.add(\"the lazy  \");\r\n    queue.add(\"dog       \");\r\n    queues.add(queue);\r\n    queue = new LinkedList<>();\r\n    queue.add(\"     Now is the\");\r\n    queue.add(\"     time for  \");\r\n    queue.add(\"     all good  \");\r\n    queue.add(\"     people to \");\r\n    queue.add(\"     come to   \");\r\n    queue.add(\"     the aid of\");\r\n    queue.add(\"     their     \");\r\n    queue.add(\"     country   \");\r\n    queues.add(queue);\r\n    final TextStyle.Builder styleBuilder = TextStyle.builder().setMaxWidth(10).setIndent(0).setLeftPad(0);\r\n    final List<TextStyle> columns = new ArrayList<>();\r\n    columns.add(styleBuilder.get());\r\n    columns.add(styleBuilder.setLeftPad(5).get());\r\n    final List<String> expected = new ArrayList<>();\r\n    expected.add(\" The quick      Now is the\");\r\n    expected.add(\" brown fox      time for  \");\r\n    expected.add(\" jumps over     all good  \");\r\n    expected.add(\" the lazy       people to \");\r\n    expected.add(\" dog            come to   \");\r\n    expected.add(\"                the aid of\");\r\n    expected.add(\"                their     \");\r\n    expected.add(\"                country   \");\r\n    sb.setLength(0);\r\n    underTest.writeColumnQueues(queues, columns);\r\n    final List<String> actual = IOUtils.readLines(new StringReader(sb.toString()));\r\n    assertEquals(expected, actual);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-cli\\src\\test\\java\\org\\apache\\commons\\cli\\help\\TextStyleTests.java",
  "methodName" : "testDefaultStyle",
  "sourceCode" : "@Test\r\nvoid testDefaultStyle() {\r\n    final TextStyle underTest = TextStyle.DEFAULT;\r\n    assertEquals(TextStyle.Alignment.LEFT, underTest.getAlignment());\r\n    assertTrue(underTest.isScalable());\r\n    assertEquals(0, underTest.getLeftPad());\r\n    assertEquals(0, underTest.getMinWidth());\r\n    assertEquals(TextStyle.UNSET_MAX_WIDTH, underTest.getMaxWidth());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-cli\\src\\test\\java\\org\\apache\\commons\\cli\\help\\TextStyleTests.java",
  "methodName" : "testPad",
  "sourceCode" : "@ParameterizedTest(name = \"{index} {0}\")\r\n@MethodSource(\"padTestData\")\r\nvoid testPad(final TextStyle underTest, final String unindentedString, final String indentedString) {\r\n    assertEquals(unindentedString, underTest.pad(false, \"Hello world\"), \"Unindented string test failed\");\r\n    assertEquals(indentedString, underTest.pad(true, \"Hello world\"), \"Indented string test failed\");\r\n}",
  "annotations" : [ "ParameterizedTest" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-cli\\src\\test\\java\\org\\apache\\commons\\cli\\help\\UtilTest.java",
  "methodName" : "testFindNonWhitespacePos",
  "sourceCode" : "@Test\r\nvoid testFindNonWhitespacePos() {\r\n    assertEquals(-1, Util.indexOfNonWhitespace(null, 0));\r\n    assertEquals(-1, Util.indexOfNonWhitespace(\"\", 0));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-cli\\src\\test\\java\\org\\apache\\commons\\cli\\help\\UtilTest.java",
  "methodName" : "testFindNonWhitespacePos",
  "sourceCode" : "@ParameterizedTest\r\n@MethodSource(\"charArgs\")\r\nvoid testFindNonWhitespacePos(final Character c, final boolean isWhitespace) {\r\n    String text = String.format(\"%cWorld\", c);\r\n    assertEquals(isWhitespace ? 1 : 0, Util.indexOfNonWhitespace(text, 0));\r\n    text = String.format(\"%c%c%c\", c, c, c);\r\n    assertEquals(isWhitespace ? -1 : 0, Util.indexOfNonWhitespace(text, 0));\r\n}",
  "annotations" : [ "ParameterizedTest" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-cli\\src\\test\\java\\org\\apache\\commons\\cli\\help\\UtilTest.java",
  "methodName" : "testIsEmpty",
  "sourceCode" : "@Test\r\nvoid testIsEmpty() {\r\n    String str = null;\r\n    assertTrue(Util.isEmpty(str), \"null string should be empty\");\r\n    str = \"\";\r\n    assertTrue(Util.isEmpty(str), \"empty string should be empty\");\r\n    str = \" \";\r\n    assertFalse(Util.isEmpty(str), \"string with whitespace should not be empty\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-cli\\src\\test\\java\\org\\apache\\commons\\cli\\help\\UtilTest.java",
  "methodName" : "testRtrim",
  "sourceCode" : "@ParameterizedTest\r\n@MethodSource(\"charArgs\")\r\nvoid testRtrim(final Character c, final boolean isWhitespace) {\r\n    if (isWhitespace) {\r\n        assertEquals(\"worx\", Util.rtrim(String.format(\"worx%s\", c)), () -> String.format(\"Did not process character 0x%x\", (int) c));\r\n    } else {\r\n        assertNotEquals(\"worx\", Util.rtrim(String.format(\"worx%s\", c)), () -> String.format(\"Did not process character 0x%x\", (int) c));\r\n    }\r\n    final String text = String.format(\"%c%c%c\", c, c, c);\r\n    assertEquals(isWhitespace ? \"\" : text, Util.ltrim(text));\r\n}",
  "annotations" : [ "ParameterizedTest" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-cli\\src\\test\\java\\org\\apache\\commons\\cli\\HelpFormatterTest.java",
  "methodName" : "testAccessors",
  "sourceCode" : "@Test\r\nvoid testAccessors() {\r\n    final HelpFormatter formatter = new HelpFormatter();\r\n    formatter.setArgName(\"argname\");\r\n    assertEquals(\"argname\", formatter.getArgName(), \"arg name\");\r\n    formatter.setDescPadding(3);\r\n    assertEquals(3, formatter.getDescPadding(), \"desc padding\");\r\n    formatter.setLeftPadding(7);\r\n    assertEquals(7, formatter.getLeftPadding(), \"left padding\");\r\n    formatter.setLongOptPrefix(\"~~\");\r\n    assertEquals(\"~~\", formatter.getLongOptPrefix(), \"long opt prefix\");\r\n    formatter.setNewLine(\"\\n\");\r\n    assertEquals(\"\\n\", formatter.getNewLine(), \"new line\");\r\n    formatter.setOptPrefix(\"~\");\r\n    assertEquals(\"~\", formatter.getOptPrefix(), \"opt prefix\");\r\n    formatter.setSyntaxPrefix(\"-> \");\r\n    assertEquals(\"-> \", formatter.getSyntaxPrefix(), \"syntax prefix\");\r\n    formatter.setWidth(80);\r\n    assertEquals(80, formatter.getWidth(), \"width\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-cli\\src\\test\\java\\org\\apache\\commons\\cli\\HelpFormatterTest.java",
  "methodName" : "testAutomaticUsage",
  "sourceCode" : "@Test\r\nvoid testAutomaticUsage() {\r\n    final HelpFormatter hf = new HelpFormatter();\r\n    Options options;\r\n    String expected = \"usage: app [-a]\";\r\n    final ByteArrayOutputStream out = new ByteArrayOutputStream();\r\n    final PrintWriter pw = new PrintWriter(out);\r\n    options = new Options().addOption(\"a\", false, \"aaaa aaaa aaaa aaaa aaaa\");\r\n    hf.printUsage(pw, 60, \"app\", options);\r\n    pw.flush();\r\n    assertEquals(expected, out.toString().trim(), \"simple auto usage\");\r\n    out.reset();\r\n    expected = \"usage: app [-a] [-b]\";\r\n    options = new Options().addOption(\"a\", false, \"aaaa aaaa aaaa aaaa aaaa\").addOption(\"b\", false, \"bbb\");\r\n    hf.printUsage(pw, 60, \"app\", options);\r\n    pw.flush();\r\n    assertEquals(expected, out.toString().trim(), \"simple auto usage\");\r\n    out.reset();\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-cli\\src\\test\\java\\org\\apache\\commons\\cli\\HelpFormatterTest.java",
  "methodName" : "testDefaultArgName",
  "sourceCode" : "@Test\r\nvoid testDefaultArgName() {\r\n    final Option option = Option.builder(\"f\").hasArg().required(true).get();\r\n    final Options options = new Options();\r\n    options.addOption(option);\r\n    final StringWriter out = new StringWriter();\r\n    final HelpFormatter formatter = new HelpFormatter();\r\n    formatter.setArgName(\"argument\");\r\n    formatter.printUsage(new PrintWriter(out), 80, \"app\", options);\r\n    assertEquals(\"usage: app -f <argument>\" + EOL, out.toString());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-cli\\src\\test\\java\\org\\apache\\commons\\cli\\HelpFormatterTest.java",
  "methodName" : "testDeprecatedFindWrapPosZeroWidth",
  "sourceCode" : "@ParameterizedTest\r\n@ValueSource(ints = { -100, -1, 0 })\r\nvoid testDeprecatedFindWrapPosZeroWidth(final int width) {\r\n    final int pos = new HelpFormatter().findWrapPos(\"Hello World\", width, 0);\r\n    assertEquals(width, pos);\r\n}",
  "annotations" : [ "ParameterizedTest" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-cli\\src\\test\\java\\org\\apache\\commons\\cli\\HelpFormatterTest.java",
  "methodName" : "testDeprecatedPrintOptionsZeroWidth",
  "sourceCode" : "@ParameterizedTest\r\n@ValueSource(ints = { -100, -1, 0 })\r\nvoid testDeprecatedPrintOptionsZeroWidth(final int width) {\r\n    final Options options = new Options();\r\n    options.addOption(\"h\", \"help\", false, \"Show help\");\r\n    final StringWriter out = new StringWriter();\r\n    final PrintWriter pw = new PrintWriter(out);\r\n    new HelpFormatter().printOptions(pw, width, options, 1, 3);\r\n    final String result = out.toString();\r\n    assertNotNull(result);\r\n}",
  "annotations" : [ "ParameterizedTest" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-cli\\src\\test\\java\\org\\apache\\commons\\cli\\HelpFormatterTest.java",
  "methodName" : "testFindWrapPos",
  "sourceCode" : "@Test\r\nvoid testFindWrapPos() {\r\n    final HelpFormatter hf = new HelpFormatter();\r\n    String text = \"This is a test.\";\r\n    // text width should be max 8; the wrap position is 7\r\n    assertEquals(7, hf.findWrapPos(text, 8, 0), \"wrap position\");\r\n    // starting from 8 must give -1 - the wrap pos is after end\r\n    assertEquals(-1, hf.findWrapPos(text, 8, 8), \"wrap position 2\");\r\n    // words longer than the width are cut\r\n    text = \"aaaa aa\";\r\n    assertEquals(3, hf.findWrapPos(text, 3, 0), \"wrap position 3\");\r\n    // last word length is equal to the width\r\n    text = \"aaaaaa aaaaaa\";\r\n    assertEquals(6, hf.findWrapPos(text, 6, 0), \"wrap position 4\");\r\n    assertEquals(-1, hf.findWrapPos(text, 6, 7), \"wrap position 4\");\r\n    text = \"aaaaaa\\n aaaaaa\";\r\n    assertEquals(7, hf.findWrapPos(text, 6, 0), \"wrap position 5\");\r\n    text = \"aaaaaa\\t aaaaaa\";\r\n    assertEquals(7, hf.findWrapPos(text, 6, 0), \"wrap position 6\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-cli\\src\\test\\java\\org\\apache\\commons\\cli\\HelpFormatterTest.java",
  "methodName" : "testHeaderStartingWithLineSeparator0",
  "sourceCode" : "@Test\r\nvoid testHeaderStartingWithLineSeparator0() {\r\n    // related to Bugzilla #21215\r\n    final Options options = new Options();\r\n    final HelpFormatter formatter = new HelpFormatter();\r\n    final String header = EOL + \"Header\";\r\n    final String footer = \"Footer\";\r\n    final StringWriter out = new StringWriter();\r\n    formatter.printHelp(new PrintWriter(out), 80, \"foobar\", header, options, 2, 2, footer, true);\r\n    //@formatter:off\r\n    assertEquals(\"usage: foobar\" + EOL + EOL + \"Header\" + EOL + EOL + \"Footer\" + EOL, out.toString());\r\n    //@formatter:on\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-cli\\src\\test\\java\\org\\apache\\commons\\cli\\HelpFormatterTest.java",
  "methodName" : "testHeaderStartingWithLineSeparator1",
  "sourceCode" : "@Test\r\nvoid testHeaderStartingWithLineSeparator1() {\r\n    // related to Bugzilla #21215\r\n    final Options options = new Options();\r\n    final String header = EOL + \"Header\";\r\n    final String footer = \"Footer\";\r\n    final Builder builder = HelpFormatter.builder();\r\n    StringWriter out = new StringWriter();\r\n    builder.setPrintWriter(new PrintWriter(out)).get().printHelp(new PrintWriter(out), 80, \"foobar\", header, options, 2, 2, footer, true);\r\n    //@formatter:off\r\n    assertEquals(\"usage: foobar\" + EOL + \"\" + EOL + \"Header\" + EOL + \"\" + EOL + \"Footer\" + EOL, out.toString());\r\n    //@formatter:on\r\n    out = new StringWriter();\r\n    builder.setPrintWriter(new PrintWriter(out)).get().printHelp(\"foobar\", header, options, footer);\r\n    //@formatter:off\r\n    assertEquals(\"usage: foobar\" + EOL + EOL + \"Header\" + EOL + EOL + \"Footer\" + EOL, out.toString());\r\n    //@formatter:on\r\n    out = new StringWriter();\r\n    builder.setPrintWriter(new PrintWriter(out)).get().printHelp(80, \"foobar\", header, options, footer);\r\n    //@formatter:off\r\n    assertEquals(\"usage: foobar\" + EOL + EOL + \"Header\" + EOL + EOL + \"Footer\" + EOL, out.toString());\r\n    //@formatter:on\r\n    out = new StringWriter();\r\n    builder.setPrintWriter(new PrintWriter(out)).get().printHelp(\"foobar\", header, options, footer, false);\r\n    //@formatter:off\r\n    assertEquals(\"usage: foobar\" + EOL + EOL + \"Header\" + EOL + EOL + \"Footer\" + EOL, out.toString());\r\n    //@formatter:on\r\n    out = new StringWriter();\r\n    builder.setPrintWriter(new PrintWriter(out)).get().printHelp(\"foobar\", header, options, footer, true);\r\n    //@formatter:off\r\n    assertEquals(\"usage: foobar\" + EOL + EOL + \"Header\" + EOL + EOL + \"Footer\" + EOL, out.toString());\r\n    //@formatter:on\r\n    out = new StringWriter();\r\n    builder.setPrintWriter(new PrintWriter(out)).get().printHelp(\"foobar\", options, false);\r\n    //@formatter:off\r\n    assertEquals(\"usage: foobar\" + EOL + \"\" + EOL, out.toString());\r\n    //@formatter:on\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-cli\\src\\test\\java\\org\\apache\\commons\\cli\\HelpFormatterTest.java",
  "methodName" : "testHelpWithLongOptSeparator",
  "sourceCode" : "@Test\r\nvoid testHelpWithLongOptSeparator() {\r\n    final Options options = new Options();\r\n    options.addOption(\"f\", true, \"the file\");\r\n    options.addOption(Option.builder(\"s\").longOpt(\"size\").desc(\"the size\").hasArg().argName(\"SIZE\").get());\r\n    options.addOption(Option.builder().longOpt(\"age\").desc(\"the age\").hasArg().get());\r\n    final HelpFormatter formatter = new HelpFormatter();\r\n    assertEquals(HelpFormatter.DEFAULT_LONG_OPT_SEPARATOR, formatter.getLongOptSeparator());\r\n    formatter.setLongOptSeparator(\"=\");\r\n    assertEquals(\"=\", formatter.getLongOptSeparator());\r\n    final StringWriter out = new StringWriter();\r\n    formatter.printHelp(new PrintWriter(out), 80, \"create\", \"header\", options, 2, 2, \"footer\");\r\n    //@formatter:off\r\n    assertEquals(\"usage: create\" + EOL + \"header\" + EOL + \"     --age=<arg>    the age\" + EOL + \"  -f <arg>          the file\" + EOL + \"  -s,--size=<SIZE>  the size\" + EOL + \"footer\" + EOL, out.toString());\r\n    //@formatter:on\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-cli\\src\\test\\java\\org\\apache\\commons\\cli\\HelpFormatterTest.java",
  "methodName" : "testIndentedHeaderAndFooter",
  "sourceCode" : "@Test\r\nvoid testIndentedHeaderAndFooter() {\r\n    // related to CLI-207\r\n    final Options options = new Options();\r\n    final HelpFormatter formatter = new HelpFormatter();\r\n    final String header = \"  Header1\\n  Header2\";\r\n    final String footer = \"  Footer1\\n  Footer2\";\r\n    final StringWriter out = new StringWriter();\r\n    formatter.printHelp(new PrintWriter(out), 80, \"foobar\", header, options, 2, 2, footer, true);\r\n    //@formatter:off\r\n    assertEquals(\"usage: foobar\" + EOL + \"  Header1\" + EOL + \"  Header2\" + EOL + \"\" + EOL + \"  Footer1\" + EOL + \"  Footer2\" + EOL, out.toString());\r\n    //@formatter:on\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-cli\\src\\test\\java\\org\\apache\\commons\\cli\\HelpFormatterTest.java",
  "methodName" : "testOptionWithoutShortFormat",
  "sourceCode" : "@Test\r\nvoid testOptionWithoutShortFormat() {\r\n    // related to Bugzilla #19383 (CLI-67)\r\n    final Options options = new Options();\r\n    options.addOption(new Option(\"a\", \"aaa\", false, \"aaaaaaa\"));\r\n    options.addOption(new Option(null, \"bbb\", false, \"bbbbbbb\"));\r\n    options.addOption(new Option(\"c\", null, false, \"ccccccc\"));\r\n    final HelpFormatter formatter = new HelpFormatter();\r\n    final StringWriter out = new StringWriter();\r\n    formatter.printHelp(new PrintWriter(out), 80, \"foobar\", \"\", options, 2, 2, \"\", true);\r\n    //@formatter:off\r\n    assertEquals(\"usage: foobar [-a] [--bbb] [-c]\" + EOL + \"  -a,--aaa  aaaaaaa\" + EOL + \"     --bbb  bbbbbbb\" + EOL + \"  -c        ccccccc\" + EOL, out.toString());\r\n    //@formatter:on\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-cli\\src\\test\\java\\org\\apache\\commons\\cli\\HelpFormatterTest.java",
  "methodName" : "testOptionWithoutShortFormat2",
  "sourceCode" : "@Test\r\nvoid testOptionWithoutShortFormat2() {\r\n    // related to Bugzilla #27635 (CLI-26)\r\n    final Option help = new Option(\"h\", \"help\", false, \"print this message\");\r\n    final Option version = new Option(\"v\", \"version\", false, \"print version information\");\r\n    final Option newRun = new Option(\"n\", \"new\", false, \"Create NLT cache entries only for new items\");\r\n    final Option trackerRun = new Option(\"t\", \"tracker\", false, \"Create NLT cache entries only for tracker items\");\r\n    //@formatter:off\r\n    final Option timeLimit = Option.builder(\"l\").longOpt(\"limit\").hasArg().valueSeparator().desc(\"Set time limit for execution, in mintues\").get();\r\n    final Option age = Option.builder(\"a\").longOpt(\"age\").hasArg().valueSeparator().desc(\"Age (in days) of cache item before being recomputed\").get();\r\n    final Option server = Option.builder(\"s\").longOpt(\"server\").hasArg().valueSeparator().desc(\"The NLT server address\").get();\r\n    final Option numResults = Option.builder(\"r\").longOpt(\"results\").hasArg().valueSeparator().desc(\"Number of results per item\").get();\r\n    final Option configFile = Option.builder().longOpt(\"config\").hasArg().valueSeparator().desc(\"Use the specified configuration file\").get();\r\n    //@formatter:on\r\n    final Options mOptions = new Options();\r\n    mOptions.addOption(help);\r\n    mOptions.addOption(version);\r\n    mOptions.addOption(newRun);\r\n    mOptions.addOption(trackerRun);\r\n    mOptions.addOption(timeLimit);\r\n    mOptions.addOption(age);\r\n    mOptions.addOption(server);\r\n    mOptions.addOption(numResults);\r\n    mOptions.addOption(configFile);\r\n    final HelpFormatter formatter = new HelpFormatter();\r\n    final String eol = System.lineSeparator();\r\n    final StringWriter out = new StringWriter();\r\n    formatter.printHelp(new PrintWriter(out), 80, \"commandline\", \"header\", mOptions, 2, 2, \"footer\", true);\r\n    //@formatter:off\r\n    assertEquals(\"usage: commandline [-a <arg>] [--config <arg>] [-h] [-l <arg>] [-n] [-r <arg>]\" + eol + \"       [-s <arg>] [-t] [-v]\" + eol + \"header\" + eol + \"  -a,--age <arg>      Age (in days) of cache item before being recomputed\" + eol + \"     --config <arg>   Use the specified configuration file\" + eol + \"  -h,--help           print this message\" + eol + \"  -l,--limit <arg>    Set time limit for execution, in mintues\" + eol + \"  -n,--new            Create NLT cache entries only for new items\" + eol + \"  -r,--results <arg>  Number of results per item\" + eol + \"  -s,--server <arg>   The NLT server address\" + eol + \"  -t,--tracker        Create NLT cache entries only for tracker items\" + eol + \"  -v,--version        print version information\" + eol + \"footer\" + eol, out.toString());\r\n    //@formatter:on\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-cli\\src\\test\\java\\org\\apache\\commons\\cli\\HelpFormatterTest.java",
  "methodName" : "testPrintDeprecatedOptions",
  "sourceCode" : "@ParameterizedTest\r\n@MethodSource(\"deprecatedOptionsProvider\")\r\nvoid testPrintDeprecatedOptions(final HelpFormatter hf, final Option option, final String expectedTxt) {\r\n    final StringBuffer sb = new StringBuffer();\r\n    final int leftPad = 1;\r\n    final int descPad = 3;\r\n    final String lpad = hf.createPadding(leftPad);\r\n    final String dpad = hf.createPadding(descPad);\r\n    Options options;\r\n    final StringBuilder expected = new StringBuilder().append(lpad).append(\"-a,--aaa\");\r\n    options = new Options().addOption(option);\r\n    if (expectedTxt.length() > 0) {\r\n        expected.append(dpad).append(expectedTxt);\r\n    }\r\n    hf.renderOptions(sb, 160, options, leftPad, descPad);\r\n    assertEquals(expected.toString(), sb.toString());\r\n}",
  "annotations" : [ "ParameterizedTest" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-cli\\src\\test\\java\\org\\apache\\commons\\cli\\HelpFormatterTest.java",
  "methodName" : "testPrintHelpNewlineFooter",
  "sourceCode" : "@Test\r\nvoid testPrintHelpNewlineFooter() {\r\n    final HelpFormatter formatter = new HelpFormatter();\r\n    final ByteArrayOutputStream out = new ByteArrayOutputStream();\r\n    final PrintWriter pw = new PrintWriter(out);\r\n    final Options options = new Options();\r\n    options.addOption(\"a\", \"b\");\r\n    formatter.printHelp(pw, 80, \"test\" + EOL, \"header\" + EOL, options, 0, 0, EOL);\r\n    final String expected = \"usage: test\" + EOL + \"header\" + EOL + \"-ab\" + EOL + EOL;\r\n    pw.flush();\r\n    assertEquals(expected, out.toString(), \"footer newline\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-cli\\src\\test\\java\\org\\apache\\commons\\cli\\HelpFormatterTest.java",
  "methodName" : "testPrintHelpNewlineHeader",
  "sourceCode" : "@Test\r\nvoid testPrintHelpNewlineHeader() {\r\n    final HelpFormatter formatter = new HelpFormatter();\r\n    final ByteArrayOutputStream out = new ByteArrayOutputStream();\r\n    final PrintWriter pw = new PrintWriter(out);\r\n    final Options options = new Options();\r\n    options.addOption(\"a\", \"b\");\r\n    formatter.printHelp(pw, 80, \"test\" + EOL, EOL, options, 0, 0, \"footer\" + EOL);\r\n    final String expected = \"usage: test\" + EOL + EOL + \"-ab\" + EOL + \"footer\" + EOL;\r\n    pw.flush();\r\n    assertEquals(expected, out.toString(), \"header newline\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-cli\\src\\test\\java\\org\\apache\\commons\\cli\\HelpFormatterTest.java",
  "methodName" : "testPrintHelpWithEmptySyntax",
  "sourceCode" : "@Test\r\nvoid testPrintHelpWithEmptySyntax() {\r\n    final HelpFormatter formatter = new HelpFormatter();\r\n    assertThrows(IllegalArgumentException.class, () -> formatter.printHelp(null, new Options()), \"null command line syntax should be rejected\");\r\n    assertThrows(IllegalArgumentException.class, () -> formatter.printHelp(null, new Options(), true), \"null command line syntax should be rejected\");\r\n    assertThrows(IllegalArgumentException.class, () -> formatter.printHelp(null, new Options(), false), \"null command line syntax should be rejected\");\r\n    assertThrows(IllegalArgumentException.class, () -> formatter.printHelp(\"\", new Options(), true), \"null command line syntax should be rejected\");\r\n    assertThrows(IllegalArgumentException.class, () -> formatter.printHelp(\"\", new Options(), false), \"null command line syntax should be rejected\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-cli\\src\\test\\java\\org\\apache\\commons\\cli\\HelpFormatterTest.java",
  "methodName" : "testPrintHelpWithSince",
  "sourceCode" : "@Test\r\nvoid testPrintHelpWithSince() {\r\n    final String[] expected = { \"usage: Command syntax\", \"Header\", \"Options            Since   Description\", \"  -n,--no-since    -          Description for n\", \"  -W,--with-since  1.19.0     Descripton for W\", \"footer\" };\r\n    final Options options = new Options().addOption(Option.builder(\"W\").longOpt(\"with-since\").since(\"1.19.0\").desc(\"Descripton for W\").get()).addOption(Option.builder(\"n\").longOpt(\"no-since\").desc(\"Description for n\").get());\r\n    final HelpFormatter formatter = HelpFormatter.builder().setShowSince(true).get();\r\n    final ByteArrayOutputStream baos = new ByteArrayOutputStream();\r\n    try (PrintWriter pw = new PrintWriter(new OutputStreamWriter(baos))) {\r\n        formatter.printHelp(pw, 80, \"Command syntax\", \"Header\", options, 2, 5, \"footer\", false);\r\n    }\r\n    assertArrayEquals(expected, baos.toString().split(System.lineSeparator()));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-cli\\src\\test\\java\\org\\apache\\commons\\cli\\HelpFormatterTest.java",
  "methodName" : "testPrintOptionGroupUsage",
  "sourceCode" : "@Test\r\nvoid testPrintOptionGroupUsage() {\r\n    final OptionGroup optionGroup = new OptionGroup();\r\n    optionGroup.addOption(Option.builder(\"a\").get());\r\n    optionGroup.addOption(Option.builder(\"b\").get());\r\n    optionGroup.addOption(Option.builder(\"c\").get());\r\n    final Options options = new Options();\r\n    options.addOptionGroup(optionGroup);\r\n    final StringWriter out = new StringWriter();\r\n    final HelpFormatter formatter = new HelpFormatter();\r\n    formatter.printUsage(new PrintWriter(out), 80, \"app\", options);\r\n    assertEquals(\"usage: app [-a | -b | -c]\" + EOL, out.toString());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-cli\\src\\test\\java\\org\\apache\\commons\\cli\\HelpFormatterTest.java",
  "methodName" : "testPrintOptions",
  "sourceCode" : "@Test\r\nvoid testPrintOptions() {\r\n    final StringBuffer sb = new StringBuffer();\r\n    final HelpFormatter hf = new HelpFormatter();\r\n    final int leftPad = 1;\r\n    final int descPad = 3;\r\n    final String lpad = hf.createPadding(leftPad);\r\n    final String dpad = hf.createPadding(descPad);\r\n    Options options;\r\n    String expected;\r\n    options = new Options().addOption(\"a\", false, \"aaaa aaaa aaaa aaaa aaaa\");\r\n    expected = lpad + \"-a\" + dpad + \"aaaa aaaa aaaa aaaa aaaa\";\r\n    hf.renderOptions(sb, 60, options, leftPad, descPad);\r\n    assertEquals(expected, sb.toString(), \"simple non-wrapped option\");\r\n    int nextLineTabStop = leftPad + descPad + \"-a\".length();\r\n    expected = lpad + \"-a\" + dpad + \"aaaa aaaa aaaa\" + EOL + hf.createPadding(nextLineTabStop) + \"aaaa aaaa\";\r\n    sb.setLength(0);\r\n    hf.renderOptions(sb, nextLineTabStop + 17, options, leftPad, descPad);\r\n    assertEquals(expected, sb.toString(), \"simple wrapped option\");\r\n    options = new Options().addOption(\"a\", \"aaa\", false, \"dddd dddd dddd dddd\");\r\n    expected = lpad + \"-a,--aaa\" + dpad + \"dddd dddd dddd dddd\";\r\n    sb.setLength(0);\r\n    hf.renderOptions(sb, 60, options, leftPad, descPad);\r\n    assertEquals(expected, sb.toString(), \"long non-wrapped option\");\r\n    nextLineTabStop = leftPad + descPad + \"-a,--aaa\".length();\r\n    expected = lpad + \"-a,--aaa\" + dpad + \"dddd dddd\" + EOL + hf.createPadding(nextLineTabStop) + \"dddd dddd\";\r\n    sb.setLength(0);\r\n    hf.renderOptions(sb, 25, options, leftPad, descPad);\r\n    assertEquals(expected, sb.toString(), \"long wrapped option\");\r\n    options = new Options().addOption(\"a\", \"aaa\", false, \"dddd dddd dddd dddd\").addOption(\"b\", false, \"feeee eeee eeee eeee\");\r\n    expected = lpad + \"-a,--aaa\" + dpad + \"dddd dddd\" + EOL + hf.createPadding(nextLineTabStop) + \"dddd dddd\" + EOL + lpad + \"-b      \" + dpad + \"feeee eeee\" + EOL + hf.createPadding(nextLineTabStop) + \"eeee eeee\";\r\n    sb.setLength(0);\r\n    hf.renderOptions(sb, 25, options, leftPad, descPad);\r\n    assertEquals(expected, sb.toString(), \"multiple wrapped options\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-cli\\src\\test\\java\\org\\apache\\commons\\cli\\HelpFormatterTest.java",
  "methodName" : "testPrintOptionWithEmptyArgNameUsage",
  "sourceCode" : "@Test\r\nvoid testPrintOptionWithEmptyArgNameUsage() {\r\n    final Option option = new Option(\"f\", true, null);\r\n    option.setArgName(\"\");\r\n    option.setRequired(true);\r\n    final Options options = new Options();\r\n    options.addOption(option);\r\n    final StringWriter out = new StringWriter();\r\n    final HelpFormatter formatter = new HelpFormatter();\r\n    formatter.printUsage(new PrintWriter(out), 80, \"app\", options);\r\n    assertEquals(\"usage: app -f\" + EOL, out.toString());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-cli\\src\\test\\java\\org\\apache\\commons\\cli\\HelpFormatterTest.java",
  "methodName" : "testPrintRequiredOptionGroupUsage",
  "sourceCode" : "@Test\r\nvoid testPrintRequiredOptionGroupUsage() {\r\n    final OptionGroup optionGroup = new OptionGroup();\r\n    optionGroup.addOption(Option.builder(\"a\").get());\r\n    optionGroup.addOption(Option.builder(\"b\").get());\r\n    optionGroup.addOption(Option.builder(\"c\").get());\r\n    optionGroup.setRequired(true);\r\n    final Options options = new Options();\r\n    options.addOptionGroup(optionGroup);\r\n    final StringWriter out = new StringWriter();\r\n    final HelpFormatter formatter = new HelpFormatter();\r\n    formatter.printUsage(new PrintWriter(out), 80, \"app\", options);\r\n    assertEquals(\"usage: app -a | -b | -c\" + EOL, out.toString());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-cli\\src\\test\\java\\org\\apache\\commons\\cli\\HelpFormatterTest.java",
  "methodName" : "testPrintSortedUsage",
  "sourceCode" : "// uses the test for CLI-131 to implement CLI-155\r\n@Test\r\nvoid testPrintSortedUsage() {\r\n    final Options opts = new Options();\r\n    opts.addOption(new Option(\"a\", \"first\"));\r\n    opts.addOption(new Option(\"b\", \"second\"));\r\n    opts.addOption(new Option(\"c\", \"third\"));\r\n    final HelpFormatter helpFormatter = new HelpFormatter();\r\n    helpFormatter.setOptionComparator((opt1, opt2) -> opt2.getKey().compareToIgnoreCase(opt1.getKey()));\r\n    final StringWriter out = new StringWriter();\r\n    helpFormatter.printUsage(new PrintWriter(out), 80, \"app\", opts);\r\n    assertEquals(\"usage: app [-c] [-b] [-a]\" + EOL, out.toString());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-cli\\src\\test\\java\\org\\apache\\commons\\cli\\HelpFormatterTest.java",
  "methodName" : "testPrintSortedUsageWithNullComparator",
  "sourceCode" : "@Test\r\nvoid testPrintSortedUsageWithNullComparator() {\r\n    final Options opts = new Options();\r\n    opts.addOption(new Option(\"c\", \"first\"));\r\n    opts.addOption(new Option(\"b\", \"second\"));\r\n    opts.addOption(new Option(\"a\", \"third\"));\r\n    final HelpFormatter helpFormatter = new HelpFormatter();\r\n    helpFormatter.setOptionComparator(null);\r\n    final StringWriter out = new StringWriter();\r\n    helpFormatter.printUsage(new PrintWriter(out), 80, \"app\", opts);\r\n    assertEquals(\"usage: app [-c] [-b] [-a]\" + EOL, out.toString());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-cli\\src\\test\\java\\org\\apache\\commons\\cli\\HelpFormatterTest.java",
  "methodName" : "testPrintUsage",
  "sourceCode" : "// This test ensures the options are properly sorted\r\n// See https://issues.apache.org/jira/browse/CLI-131\r\n@Test\r\nvoid testPrintUsage() {\r\n    final Option optionA = new Option(\"a\", \"first\");\r\n    final Option optionB = new Option(\"b\", \"second\");\r\n    final Option optionC = new Option(\"c\", \"third\");\r\n    final Options opts = new Options();\r\n    opts.addOption(optionA);\r\n    opts.addOption(optionB);\r\n    opts.addOption(optionC);\r\n    final HelpFormatter helpFormatter = new HelpFormatter();\r\n    final ByteArrayOutputStream bytesOut = new ByteArrayOutputStream();\r\n    try (PrintWriter printWriter = new PrintWriter(bytesOut)) {\r\n        helpFormatter.printUsage(printWriter, 80, \"app\", opts);\r\n    }\r\n    assertEquals(\"usage: app [-a] [-b] [-c]\" + EOL, bytesOut.toString());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-cli\\src\\test\\java\\org\\apache\\commons\\cli\\HelpFormatterTest.java",
  "methodName" : "testRenderSince",
  "sourceCode" : "@Test\r\nvoid testRenderSince() throws IOException {\r\n    final String[] expected = { \"Options            Since   Description\", \"  -n,--no-since    -          Description for n\", \"  -W,--with-since  1.19.0     Descripton for W\" };\r\n    final Options options = new Options().addOption(Option.builder(\"W\").longOpt(\"with-since\").since(\"1.19.0\").desc(\"Descripton for W\").get()).addOption(Option.builder(\"n\").longOpt(\"no-since\").desc(\"Description for n\").get());\r\n    final HelpFormatter formatter = HelpFormatter.builder().setShowSince(true).get();\r\n    final StringBuffer sb = new StringBuffer();\r\n    formatter.renderOptions(sb, 50, options, 2, 5);\r\n    assertArrayEquals(expected, sb.toString().split(System.lineSeparator()));\r\n    // check internal exception handling for coverage\r\n    final HelpFormatter spy = spy(formatter);\r\n    when(spy.appendOptions(sb, 50, options, 2, 5)).thenThrow(IOException.class);\r\n    assertThrows(UncheckedIOException.class, () -> spy.renderOptions(sb, 50, options, 2, 5));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-cli\\src\\test\\java\\org\\apache\\commons\\cli\\HelpFormatterTest.java",
  "methodName" : "testRenderWrappedTextMultiLine",
  "sourceCode" : "@Test\r\nvoid testRenderWrappedTextMultiLine() {\r\n    // multi line text\r\n    final int width = 16;\r\n    final int padding = 0;\r\n    //@formatter:off\r\n    final String expected = \"aaaa aaaa aaaa\" + EOL + \"aaaaaa\" + EOL + \"aaaaa\";\r\n    //@formatter:on\r\n    final StringBuffer sb = new StringBuffer();\r\n    new HelpFormatter().renderWrappedText(sb, width, padding, expected);\r\n    assertEquals(expected, sb.toString(), \"multi line text\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-cli\\src\\test\\java\\org\\apache\\commons\\cli\\HelpFormatterTest.java",
  "methodName" : "testRenderWrappedTextMultiLinePadded",
  "sourceCode" : "@Test\r\nvoid testRenderWrappedTextMultiLinePadded() {\r\n    // multi-line padded text\r\n    final int width = 16;\r\n    final int padding = 4;\r\n    //@formatter:off\r\n    final String text = \"aaaa aaaa aaaa\" + EOL + \"aaaaaa\" + EOL + \"aaaaa\";\r\n    final String expected = \"aaaa aaaa aaaa\" + EOL + \"    aaaaaa\" + EOL + \"    aaaaa\";\r\n    //@formatter:on\r\n    final StringBuffer sb = new StringBuffer();\r\n    new HelpFormatter().renderWrappedText(sb, width, padding, text);\r\n    assertEquals(expected, sb.toString(), \"multi-line padded text\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-cli\\src\\test\\java\\org\\apache\\commons\\cli\\HelpFormatterTest.java",
  "methodName" : "testRenderWrappedTextSingleLine",
  "sourceCode" : "@Test\r\nvoid testRenderWrappedTextSingleLine() throws IOException {\r\n    // single line text\r\n    final int width = 12;\r\n    final int padding = 0;\r\n    final String text = \"This is a test.\";\r\n    final String expected = \"This is a\" + EOL + \"test.\";\r\n    final StringBuffer sb = new StringBuffer();\r\n    new HelpFormatter().renderWrappedText(sb, width, padding, text);\r\n    assertEquals(expected, sb.toString(), \"single line text\");\r\n    // check internal exception handling for coverage\r\n    final HelpFormatter spy = spy(new HelpFormatter());\r\n    when(spy.appendWrappedText(sb, width, padding, text)).thenThrow(IOException.class);\r\n    assertThrows(UncheckedIOException.class, () -> spy.renderWrappedText(sb, width, padding, text));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-cli\\src\\test\\java\\org\\apache\\commons\\cli\\HelpFormatterTest.java",
  "methodName" : "testRenderWrappedTextSingleLinePadded",
  "sourceCode" : "@Test\r\nvoid testRenderWrappedTextSingleLinePadded() {\r\n    // single line padded text\r\n    final int width = 12;\r\n    final int padding = 4;\r\n    final String text = \"This is a test.\";\r\n    final String expected = \"This is a\" + EOL + \"    test.\";\r\n    final StringBuffer sb = new StringBuffer();\r\n    new HelpFormatter().renderWrappedText(sb, width, padding, text);\r\n    assertEquals(expected, sb.toString(), \"single line padded text\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-cli\\src\\test\\java\\org\\apache\\commons\\cli\\HelpFormatterTest.java",
  "methodName" : "testRenderWrappedTextSingleLinePadded2",
  "sourceCode" : "@Test\r\nvoid testRenderWrappedTextSingleLinePadded2() {\r\n    // single line padded text 2\r\n    final int width = 53;\r\n    final int padding = 24;\r\n    //@formatter:off\r\n    final String text = \"  -p,--period <PERIOD>  PERIOD is time duration of form \" + \"DATE[-DATE] where DATE has form YYYY[MM[DD]]\";\r\n    final String expected = \"  -p,--period <PERIOD>  PERIOD is time duration of\" + EOL + \"                        form DATE[-DATE] where DATE\" + EOL + \"                        has form YYYY[MM[DD]]\";\r\n    //@formatter:on\r\n    final StringBuffer sb = new StringBuffer();\r\n    new HelpFormatter().renderWrappedText(sb, width, padding, text);\r\n    assertEquals(expected, sb.toString(), \"single line padded text 2\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-cli\\src\\test\\java\\org\\apache\\commons\\cli\\HelpFormatterTest.java",
  "methodName" : "testRenderWrappedTextWordCut",
  "sourceCode" : "@Test\r\nvoid testRenderWrappedTextWordCut() {\r\n    final int width = 7;\r\n    final int padding = 0;\r\n    final String text = \"Thisisatest.\";\r\n    final String expected = \"Thisisa\" + EOL + \"test.\";\r\n    final StringBuffer sb = new StringBuffer();\r\n    new HelpFormatter().renderWrappedText(sb, width, padding, text);\r\n    assertEquals(expected, sb.toString(), \"cut and wrap\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-cli\\src\\test\\java\\org\\apache\\commons\\cli\\HelpFormatterTest.java",
  "methodName" : "testRtrim",
  "sourceCode" : "@Test\r\nvoid testRtrim() {\r\n    final HelpFormatter formatter = new HelpFormatter();\r\n    assertNull(formatter.rtrim(null));\r\n    assertEquals(\"\", formatter.rtrim(\"\"));\r\n    assertEquals(\"  foo\", formatter.rtrim(\"  foo  \"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-cli\\src\\test\\java\\org\\apache\\commons\\cli\\HelpFormatterTest.java",
  "methodName" : "testUsageWithLongOptSeparator",
  "sourceCode" : "@Test\r\nvoid testUsageWithLongOptSeparator() {\r\n    final Options options = new Options();\r\n    options.addOption(\"f\", true, \"the file\");\r\n    options.addOption(Option.builder(\"s\").longOpt(\"size\").desc(\"the size\").hasArg().argName(\"SIZE\").get());\r\n    options.addOption(Option.builder().longOpt(\"age\").desc(\"the age\").hasArg().get());\r\n    final HelpFormatter formatter = new HelpFormatter();\r\n    formatter.setLongOptSeparator(\"=\");\r\n    final StringWriter out = new StringWriter();\r\n    formatter.printUsage(new PrintWriter(out), 80, \"create\", options);\r\n    assertEquals(\"usage: create [--age=<arg>] [-f <arg>] [-s <SIZE>]\", out.toString().trim());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-cli\\src\\test\\java\\org\\apache\\commons\\cli\\MissingOptionExceptionTest.java",
  "methodName" : "testGetMessage",
  "sourceCode" : "@Test\r\nvoid testGetMessage() {\r\n    final List<String> originalList = new ArrayList<>();\r\n    originalList.add(\"optA\");\r\n    originalList.add(\"optB\");\r\n    final MissingOptionException exception = new MissingOptionException(originalList);\r\n    assertEquals(\"Missing required options: optA, optB\", exception.getMessage());\r\n    assertEquals(\"Missing required options: \", new MissingOptionException(new ArrayList<>()).getMessage());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-cli\\src\\test\\java\\org\\apache\\commons\\cli\\MissingOptionExceptionTest.java",
  "methodName" : "testGetMissingOptions",
  "sourceCode" : "@Test\r\nvoid testGetMissingOptions() {\r\n    final List<String> originalList = new ArrayList<>();\r\n    originalList.add(\"optA\");\r\n    originalList.add(\"optB\");\r\n    final MissingOptionException exception = new MissingOptionException(originalList);\r\n    assertEquals(Arrays.asList(\"optA\", \"optB\"), exception.getMissingOptions());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-cli\\src\\test\\java\\org\\apache\\commons\\cli\\OptionBuilderTest.java",
  "methodName" : "testBaseOptionCharOpt",
  "sourceCode" : "@Test\r\nvoid testBaseOptionCharOpt() {\r\n    final Option base = OptionBuilder.withDescription(\"option description\").create('o');\r\n    assertEquals(\"o\", base.getOpt());\r\n    assertEquals(\"option description\", base.getDescription());\r\n    assertFalse(base.hasArg());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-cli\\src\\test\\java\\org\\apache\\commons\\cli\\OptionBuilderTest.java",
  "methodName" : "testBaseOptionStringOpt",
  "sourceCode" : "@Test\r\nvoid testBaseOptionStringOpt() {\r\n    final Option base = OptionBuilder.withDescription(\"option description\").create(\"o\");\r\n    assertEquals(\"o\", base.getOpt());\r\n    assertEquals(\"option description\", base.getDescription());\r\n    assertFalse(base.hasArg());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-cli\\src\\test\\java\\org\\apache\\commons\\cli\\OptionBuilderTest.java",
  "methodName" : "testBuilderIsResettedAlways",
  "sourceCode" : "@Test\r\nvoid testBuilderIsResettedAlways() {\r\n    assertThrows(IllegalArgumentException.class, () -> OptionBuilder.withDescription(\"JUnit\").create('\"'));\r\n    assertNull(OptionBuilder.create('x').getDescription(), \"we inherited a description\");\r\n    assertThrows(IllegalStateException.class, (Executable) OptionBuilder::create);\r\n    assertNull(OptionBuilder.create('x').getDescription(), \"we inherited a description\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-cli\\src\\test\\java\\org\\apache\\commons\\cli\\OptionBuilderTest.java",
  "methodName" : "testCompleteOption",
  "sourceCode" : "@Test\r\nvoid testCompleteOption() {\r\n    //@formatter:off\r\n    final Option simple = OptionBuilder.withLongOpt(\"simple option\").hasArg().isRequired().hasArgs().withType(Float.class).withDescription(\"this is a simple option\").create('s');\r\n    //@formatter:on\r\n    assertEquals(\"s\", simple.getOpt());\r\n    assertEquals(\"simple option\", simple.getLongOpt());\r\n    assertEquals(\"this is a simple option\", simple.getDescription());\r\n    assertEquals(simple.getType(), Float.class);\r\n    assertTrue(simple.hasArg());\r\n    assertTrue(simple.isRequired());\r\n    assertTrue(simple.hasArgs());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-cli\\src\\test\\java\\org\\apache\\commons\\cli\\OptionBuilderTest.java",
  "methodName" : "testCreateIncompleteOption",
  "sourceCode" : "@Test\r\nvoid testCreateIncompleteOption() {\r\n    assertThrows(IllegalStateException.class, (Executable) OptionBuilder::create);\r\n    // implicitly reset the builder\r\n    OptionBuilder.create(\"opt\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-cli\\src\\test\\java\\org\\apache\\commons\\cli\\OptionBuilderTest.java",
  "methodName" : "testIllegalOptions",
  "sourceCode" : "@Test\r\nvoid testIllegalOptions() {\r\n    // bad single character option\r\n    assertThrows(IllegalArgumentException.class, () -> OptionBuilder.withDescription(\"option description\").create('\"'));\r\n    // bad character in option string\r\n    assertThrows(IllegalArgumentException.class, () -> OptionBuilder.create(\"opt`\"));\r\n    // valid option\r\n    OptionBuilder.create(\"opt\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-cli\\src\\test\\java\\org\\apache\\commons\\cli\\OptionBuilderTest.java",
  "methodName" : "testOptionArgNumbers",
  "sourceCode" : "@Test\r\nvoid testOptionArgNumbers() {\r\n    //@formatter:off\r\n    final Option opt = OptionBuilder.withDescription(\"option description\").hasArgs(2).create('o');\r\n    //@formatter:on\r\n    assertEquals(2, opt.getArgs());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-cli\\src\\test\\java\\org\\apache\\commons\\cli\\OptionBuilderTest.java",
  "methodName" : "testSpecialOptChars",
  "sourceCode" : "@Test\r\nvoid testSpecialOptChars() throws Exception {\r\n    // '?'\r\n    final Option opt1 = OptionBuilder.withDescription(\"help options\").create('?');\r\n    assertEquals(\"?\", opt1.getOpt());\r\n    // '@'\r\n    final Option opt2 = OptionBuilder.withDescription(\"read from stdin\").create('@');\r\n    assertEquals(\"@\", opt2.getOpt());\r\n    // ' '\r\n    assertThrows(IllegalArgumentException.class, () -> OptionBuilder.create(' '));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-cli\\src\\test\\java\\org\\apache\\commons\\cli\\OptionBuilderTest.java",
  "methodName" : "testTwoCompleteOptions",
  "sourceCode" : "@Test\r\nvoid testTwoCompleteOptions() {\r\n    //@formatter:off\r\n    Option simple = OptionBuilder.withLongOpt(\"simple option\").hasArg().isRequired().hasArgs().withType(Float.class).withDescription(\"this is a simple option\").create('s');\r\n    //@formatter:on\r\n    assertEquals(\"s\", simple.getOpt());\r\n    assertEquals(\"simple option\", simple.getLongOpt());\r\n    assertEquals(\"this is a simple option\", simple.getDescription());\r\n    assertEquals(simple.getType(), Float.class);\r\n    assertTrue(simple.hasArg());\r\n    assertTrue(simple.isRequired());\r\n    assertTrue(simple.hasArgs());\r\n    //@formatter:off\r\n    simple = OptionBuilder.withLongOpt(\"dimple option\").hasArg().withDescription(\"this is a dimple option\").create('d');\r\n    //@formatter:on\r\n    assertEquals(\"d\", simple.getOpt());\r\n    assertEquals(\"dimple option\", simple.getLongOpt());\r\n    assertEquals(\"this is a dimple option\", simple.getDescription());\r\n    assertEquals(String.class, simple.getType());\r\n    assertTrue(simple.hasArg());\r\n    assertFalse(simple.isRequired());\r\n    assertFalse(simple.hasArgs());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-cli\\src\\test\\java\\org\\apache\\commons\\cli\\OptionGroupTest.java",
  "methodName" : "testGetNames",
  "sourceCode" : "@Test\r\nvoid testGetNames() {\r\n    final OptionGroup optionGroup = new OptionGroup();\r\n    assertFalse(optionGroup.isSelected());\r\n    optionGroup.addOption(OptionBuilder.create('a'));\r\n    optionGroup.addOption(OptionBuilder.create('b'));\r\n    assertNotNull(optionGroup.getNames(), \"null names\");\r\n    assertEquals(2, optionGroup.getNames().size());\r\n    assertTrue(optionGroup.getNames().contains(\"a\"));\r\n    assertTrue(optionGroup.getNames().contains(\"b\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-cli\\src\\test\\java\\org\\apache\\commons\\cli\\OptionGroupTest.java",
  "methodName" : "testNoOptionsExtraArgs",
  "sourceCode" : "@Test\r\nvoid testNoOptionsExtraArgs() throws Exception {\r\n    final String[] args = { \"arg1\", \"arg2\" };\r\n    final CommandLine cl = parser.parse(options, args);\r\n    assertFalse(cl.hasOption(\"r\"), \"Confirm -r is NOT set\");\r\n    assertFalse(cl.hasOption(\"f\"), \"Confirm -f is NOT set\");\r\n    assertFalse(cl.hasOption(\"d\"), \"Confirm -d is NOT set\");\r\n    assertFalse(cl.hasOption(\"s\"), \"Confirm -s is NOT set\");\r\n    assertFalse(cl.hasOption(\"c\"), \"Confirm -c is NOT set\");\r\n    assertEquals(2, cl.getArgList().size(), \"Confirm TWO extra args\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-cli\\src\\test\\java\\org\\apache\\commons\\cli\\OptionGroupTest.java",
  "methodName" : "testSingleLongOption",
  "sourceCode" : "@Test\r\nvoid testSingleLongOption() throws Exception {\r\n    final String[] args = { \"--file\" };\r\n    final CommandLine cl = parser.parse(options, args);\r\n    assertFalse(cl.hasOption(\"r\"), \"Confirm -r is NOT set\");\r\n    assertTrue(cl.hasOption(\"f\"), \"Confirm -f is set\");\r\n    assertFalse(cl.hasOption(\"d\"), \"Confirm -d is NOT set\");\r\n    assertFalse(cl.hasOption(\"s\"), \"Confirm -s is NOT set\");\r\n    assertFalse(cl.hasOption(\"c\"), \"Confirm -c is NOT set\");\r\n    assertTrue(cl.getArgList().isEmpty(), \"Confirm no extra args\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-cli\\src\\test\\java\\org\\apache\\commons\\cli\\OptionGroupTest.java",
  "methodName" : "testSingleOption",
  "sourceCode" : "@Test\r\nvoid testSingleOption() throws Exception {\r\n    final String[] args = { \"-r\" };\r\n    final CommandLine cl = parser.parse(options, args);\r\n    assertTrue(cl.hasOption(\"r\"), \"Confirm -r is set\");\r\n    assertFalse(cl.hasOption(\"f\"), \"Confirm -f is NOT set\");\r\n    assertFalse(cl.hasOption(\"d\"), \"Confirm -d is NOT set\");\r\n    assertFalse(cl.hasOption(\"s\"), \"Confirm -s is NOT set\");\r\n    assertFalse(cl.hasOption(\"c\"), \"Confirm -c is NOT set\");\r\n    assertTrue(cl.getArgList().isEmpty(), \"Confirm no extra args\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-cli\\src\\test\\java\\org\\apache\\commons\\cli\\OptionGroupTest.java",
  "methodName" : "testSingleOptionFromGroup",
  "sourceCode" : "@Test\r\nvoid testSingleOptionFromGroup() throws Exception {\r\n    final String[] args = { \"-f\" };\r\n    final CommandLine cl = parser.parse(options, args);\r\n    assertFalse(cl.hasOption(\"r\"), \"Confirm -r is NOT set\");\r\n    assertTrue(cl.hasOption(\"f\"), \"Confirm -f is set\");\r\n    assertFalse(cl.hasOption(\"d\"), \"Confirm -d is NOT set\");\r\n    assertFalse(cl.hasOption(\"s\"), \"Confirm -s is NOT set\");\r\n    assertFalse(cl.hasOption(\"c\"), \"Confirm -c is NOT set\");\r\n    assertTrue(cl.getArgList().isEmpty(), \"Confirm no extra args\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-cli\\src\\test\\java\\org\\apache\\commons\\cli\\OptionGroupTest.java",
  "methodName" : "testToString",
  "sourceCode" : "@Test\r\nvoid testToString() {\r\n    final OptionGroup optionGroup1 = new OptionGroup();\r\n    optionGroup1.addOption(new Option(null, \"foo\", false, \"Foo\"));\r\n    optionGroup1.addOption(new Option(null, \"bar\", false, \"Bar\"));\r\n    if (!\"[--bar Bar, --foo Foo]\".equals(optionGroup1.toString())) {\r\n        assertEquals(\"[--foo Foo, --bar Bar]\", optionGroup1.toString());\r\n    }\r\n    final OptionGroup optionGroup2 = new OptionGroup();\r\n    optionGroup2.addOption(new Option(\"f\", \"foo\", false, \"Foo\"));\r\n    optionGroup2.addOption(new Option(\"b\", \"bar\", false, \"Bar\"));\r\n    if (!\"[-b Bar, -f Foo]\".equals(optionGroup2.toString())) {\r\n        assertEquals(\"[-f Foo, -b Bar]\", optionGroup2.toString());\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-cli\\src\\test\\java\\org\\apache\\commons\\cli\\OptionGroupTest.java",
  "methodName" : "testTwoLongOptionsFromGroup",
  "sourceCode" : "@Test\r\nvoid testTwoLongOptionsFromGroup() throws Exception {\r\n    final String[] args = { \"--file\", \"--directory\" };\r\n    final AlreadySelectedException e = assertThrows(AlreadySelectedException.class, () -> parser.parse(options, args));\r\n    assertNotNull(e.getOptionGroup(), \"null option group\");\r\n    assertTrue(e.getOptionGroup().isSelected());\r\n    assertEquals(\"f\", e.getOptionGroup().getSelected(), \"selected option\");\r\n    assertEquals(\"d\", e.getOption().getOpt(), \"option\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-cli\\src\\test\\java\\org\\apache\\commons\\cli\\OptionGroupTest.java",
  "methodName" : "testTwoOptionsFromDifferentGroup",
  "sourceCode" : "@Test\r\nvoid testTwoOptionsFromDifferentGroup() throws Exception {\r\n    final String[] args = { \"-f\", \"-s\" };\r\n    final CommandLine cl = parser.parse(options, args);\r\n    assertFalse(cl.hasOption(\"r\"), \"Confirm -r is NOT set\");\r\n    assertTrue(cl.hasOption(\"f\"), \"Confirm -f is set\");\r\n    assertFalse(cl.hasOption(\"d\"), \"Confirm -d is NOT set\");\r\n    assertTrue(cl.hasOption(\"s\"), \"Confirm -s is set\");\r\n    assertFalse(cl.hasOption(\"c\"), \"Confirm -c is NOT set\");\r\n    assertTrue(cl.getArgList().isEmpty(), \"Confirm NO extra args\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-cli\\src\\test\\java\\org\\apache\\commons\\cli\\OptionGroupTest.java",
  "methodName" : "testTwoOptionsFromGroup",
  "sourceCode" : "@Test\r\nvoid testTwoOptionsFromGroup() throws Exception {\r\n    final String[] args = { \"-f\", \"-d\" };\r\n    final AlreadySelectedException e = assertThrows(AlreadySelectedException.class, () -> parser.parse(options, args));\r\n    assertNotNull(e.getOptionGroup(), \"null option group\");\r\n    assertTrue(e.getOptionGroup().isSelected());\r\n    assertEquals(\"f\", e.getOptionGroup().getSelected(), \"selected option\");\r\n    assertEquals(\"d\", e.getOption().getOpt(), \"option\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-cli\\src\\test\\java\\org\\apache\\commons\\cli\\OptionGroupTest.java",
  "methodName" : "testTwoOptionsFromGroupWithProperties",
  "sourceCode" : "@Test\r\nvoid testTwoOptionsFromGroupWithProperties() throws Exception {\r\n    final String[] args = { \"-f\" };\r\n    final Properties properties = new Properties();\r\n    properties.put(\"d\", \"true\");\r\n    final CommandLine cl = parser.parse(options, args, properties);\r\n    assertTrue(cl.hasOption(\"f\"));\r\n    assertFalse(cl.hasOption(\"d\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-cli\\src\\test\\java\\org\\apache\\commons\\cli\\OptionGroupTest.java",
  "methodName" : "testTwoValidLongOptions",
  "sourceCode" : "@Test\r\nvoid testTwoValidLongOptions() throws Exception {\r\n    final String[] args = { \"--revision\", \"--file\" };\r\n    final CommandLine cl = parser.parse(options, args);\r\n    assertTrue(cl.hasOption(\"r\"), \"Confirm -r is set\");\r\n    assertTrue(cl.hasOption(\"f\"), \"Confirm -f is set\");\r\n    assertFalse(cl.hasOption(\"d\"), \"Confirm -d is NOT set\");\r\n    assertFalse(cl.hasOption(\"s\"), \"Confirm -s is NOT set\");\r\n    assertFalse(cl.hasOption(\"c\"), \"Confirm -c is NOT set\");\r\n    assertTrue(cl.getArgList().isEmpty(), \"Confirm no extra args\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-cli\\src\\test\\java\\org\\apache\\commons\\cli\\OptionGroupTest.java",
  "methodName" : "testTwoValidOptions",
  "sourceCode" : "@Test\r\nvoid testTwoValidOptions() throws Exception {\r\n    final String[] args = { \"-r\", \"-f\" };\r\n    final CommandLine cl = parser.parse(options, args);\r\n    assertTrue(cl.hasOption(\"r\"), \"Confirm -r is set\");\r\n    assertTrue(cl.hasOption(\"f\"), \"Confirm -f is set\");\r\n    assertFalse(cl.hasOption(\"d\"), \"Confirm -d is NOT set\");\r\n    assertFalse(cl.hasOption(\"s\"), \"Confirm -s is NOT set\");\r\n    assertFalse(cl.hasOption(\"c\"), \"Confirm -c is NOT set\");\r\n    assertTrue(cl.getArgList().isEmpty(), \"Confirm no extra args\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-cli\\src\\test\\java\\org\\apache\\commons\\cli\\OptionGroupTest.java",
  "methodName" : "testValidLongOnlyOptions",
  "sourceCode" : "@Test\r\nvoid testValidLongOnlyOptions() throws Exception {\r\n    final CommandLine cl1 = parser.parse(options, new String[] { \"--export\" });\r\n    assertTrue(cl1.hasOption(\"export\"), \"Confirm --export is set\");\r\n    final CommandLine cl2 = parser.parse(options, new String[] { \"--import\" });\r\n    assertTrue(cl2.hasOption(\"import\"), \"Confirm --import is set\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-cli\\src\\test\\java\\org\\apache\\commons\\cli\\OptionsTest.java",
  "methodName" : "testAddConflictingOptions",
  "sourceCode" : "@Test\r\nvoid testAddConflictingOptions() {\r\n    final Options options1 = new Options();\r\n    final OptionGroup optionGroup1 = new OptionGroup();\r\n    optionGroup1.addOption(Option.builder(\"a\").get());\r\n    optionGroup1.addOption(Option.builder(\"b\").get());\r\n    options1.addOptionGroup(optionGroup1);\r\n    options1.addOption(Option.builder(\"x\").get());\r\n    options1.addOption(Option.builder(\"y\").get());\r\n    final Options options2 = new Options();\r\n    final OptionGroup optionGroup2 = new OptionGroup();\r\n    optionGroup2.addOption(Option.builder(\"x\").type(Integer.class).get());\r\n    optionGroup2.addOption(Option.builder(\"b\").type(Integer.class).get());\r\n    options2.addOptionGroup(optionGroup2);\r\n    options2.addOption(Option.builder(\"c\").get());\r\n    assertThrows(IllegalArgumentException.class, () -> options1.addOptions(options2));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-cli\\src\\test\\java\\org\\apache\\commons\\cli\\OptionsTest.java",
  "methodName" : "testAddNonConflictingOptions",
  "sourceCode" : "@Test\r\nvoid testAddNonConflictingOptions() {\r\n    final Options options1 = new Options();\r\n    final OptionGroup optionGroup1 = new OptionGroup();\r\n    optionGroup1.addOption(Option.builder(\"a\").get());\r\n    optionGroup1.addOption(Option.builder(\"b\").get());\r\n    options1.addOptionGroup(optionGroup1);\r\n    options1.addOption(Option.builder(\"x\").get());\r\n    options1.addOption(Option.builder(\"y\").get());\r\n    final Options options2 = new Options();\r\n    final OptionGroup group2 = new OptionGroup();\r\n    group2.addOption(Option.builder(\"c\").type(Integer.class).get());\r\n    group2.addOption(Option.builder(\"d\").type(Integer.class).get());\r\n    options2.addOptionGroup(group2);\r\n    options1.addOption(Option.builder(\"e\").get());\r\n    options1.addOption(Option.builder(\"f\").get());\r\n    final Options underTest = new Options();\r\n    underTest.addOptions(options1);\r\n    underTest.addOptions(options2);\r\n    final List<OptionGroup> expected = Arrays.asList(optionGroup1, group2);\r\n    assertTrue(expected.size() == underTest.getOptionGroups().size() && expected.containsAll(underTest.getOptionGroups()));\r\n    final Set<Option> expectOpt = new HashSet<>(options1.getOptions());\r\n    expectOpt.addAll(options2.getOptions());\r\n    assertEquals(8, expectOpt.size());\r\n    assertTrue(expectOpt.size() == underTest.getOptions().size() && expectOpt.containsAll(underTest.getOptions()));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-cli\\src\\test\\java\\org\\apache\\commons\\cli\\OptionsTest.java",
  "methodName" : "testAddOptions",
  "sourceCode" : "@Test\r\nvoid testAddOptions() {\r\n    final Options options = new Options();\r\n    final OptionGroup optionGroup1 = new OptionGroup();\r\n    optionGroup1.addOption(Option.builder(\"a\").get());\r\n    optionGroup1.addOption(Option.builder(\"b\").get());\r\n    options.addOptionGroup(optionGroup1);\r\n    options.addOption(Option.builder(\"X\").get());\r\n    options.addOption(Option.builder(\"y\").get());\r\n    final Options underTest = new Options();\r\n    underTest.addOptions(options);\r\n    assertEquals(options.getOptionGroups(), underTest.getOptionGroups());\r\n    assertArrayEquals(options.getOptions().toArray(), underTest.getOptions().toArray());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-cli\\src\\test\\java\\org\\apache\\commons\\cli\\OptionsTest.java",
  "methodName" : "testAddOptions2X",
  "sourceCode" : "@Test\r\nvoid testAddOptions2X() {\r\n    final Options options = new Options();\r\n    final OptionGroup optionGroup1 = new OptionGroup();\r\n    optionGroup1.addOption(Option.builder(\"a\").get());\r\n    optionGroup1.addOption(Option.builder(\"b\").get());\r\n    options.addOptionGroup(optionGroup1);\r\n    options.addOption(Option.builder(\"X\").get());\r\n    options.addOption(Option.builder(\"y\").get());\r\n    assertThrows(IllegalArgumentException.class, () -> options.addOptions(options));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-cli\\src\\test\\java\\org\\apache\\commons\\cli\\OptionsTest.java",
  "methodName" : "testDeprecated",
  "sourceCode" : "@Test\r\nvoid testDeprecated() {\r\n    final Options options = new Options();\r\n    options.addOption(Option.builder().option(\"a\").get());\r\n    options.addOption(Option.builder().option(\"b\").deprecated().get());\r\n    options.addOption(Option.builder().option(\"c\").deprecated(DeprecatedAttributes.builder().setForRemoval(true).setSince(\"2.0\").setDescription(\"Use X.\").get()).get());\r\n    options.addOption(Option.builder().option(\"d\").deprecated().longOpt(\"longD\").hasArgs().get());\r\n    // toString()\r\n    assertTrue(options.getOption(\"a\").toString().startsWith(\"[ Option a\"));\r\n    assertTrue(options.getOption(\"b\").toString().startsWith(\"[ Option b\"));\r\n    assertTrue(options.getOption(\"c\").toString().startsWith(\"[ Option c\"));\r\n    // toDeprecatedString()\r\n    assertFalse(options.getOption(\"a\").toDeprecatedString().startsWith(\"Option a\"));\r\n    assertEquals(\"Option 'b': Deprecated\", options.getOption(\"b\").toDeprecatedString());\r\n    assertEquals(\"Option 'c': Deprecated for removal since 2.0: Use X.\", options.getOption(\"c\").toDeprecatedString());\r\n    assertToStrings(options.getOption(\"a\"));\r\n    assertToStrings(options.getOption(\"b\"));\r\n    assertToStrings(options.getOption(\"c\"));\r\n    assertToStrings(options.getOption(\"d\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-cli\\src\\test\\java\\org\\apache\\commons\\cli\\OptionsTest.java",
  "methodName" : "testDuplicateLong",
  "sourceCode" : "@Test\r\nvoid testDuplicateLong() {\r\n    final Options options = new Options();\r\n    options.addOption(\"a\", \"--a\", false, \"toggle -a\");\r\n    options.addOption(\"a\", \"--a\", false, \"toggle -a*\");\r\n    assertEquals(\"toggle -a*\", options.getOption(\"a\").getDescription(), \"last one in wins\");\r\n    assertToStrings(options.getOption(\"a\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-cli\\src\\test\\java\\org\\apache\\commons\\cli\\OptionsTest.java",
  "methodName" : "testDuplicateSimple",
  "sourceCode" : "@Test\r\nvoid testDuplicateSimple() {\r\n    final Options options = new Options();\r\n    options.addOption(\"a\", false, \"toggle -a\");\r\n    assertToStrings(options.getOption(\"a\"));\r\n    options.addOption(\"a\", true, \"toggle -a*\");\r\n    assertEquals(\"toggle -a*\", options.getOption(\"a\").getDescription(), \"last one in wins\");\r\n    assertToStrings(options.getOption(\"a\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-cli\\src\\test\\java\\org\\apache\\commons\\cli\\OptionsTest.java",
  "methodName" : "testGetMatchingOpts",
  "sourceCode" : "@Test\r\nvoid testGetMatchingOpts() {\r\n    final Options options = new Options();\r\n    OptionBuilder.withLongOpt(\"version\");\r\n    options.addOption(OptionBuilder.create());\r\n    OptionBuilder.withLongOpt(\"verbose\");\r\n    options.addOption(OptionBuilder.create());\r\n    assertTrue(options.getMatchingOptions(\"foo\").isEmpty());\r\n    assertEquals(1, options.getMatchingOptions(\"version\").size());\r\n    assertEquals(2, options.getMatchingOptions(\"ver\").size());\r\n    assertToStrings(options.getOption(\"version\"));\r\n    assertToStrings(options.getOption(\"verbose\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-cli\\src\\test\\java\\org\\apache\\commons\\cli\\OptionsTest.java",
  "methodName" : "testGetOptionsGroups",
  "sourceCode" : "@Test\r\nvoid testGetOptionsGroups() {\r\n    final Options options = new Options();\r\n    final OptionGroup optionGroup1 = new OptionGroup();\r\n    optionGroup1.addOption(OptionBuilder.create('a'));\r\n    optionGroup1.addOption(OptionBuilder.create('b'));\r\n    final OptionGroup optionGroup2 = new OptionGroup();\r\n    optionGroup2.addOption(OptionBuilder.create('x'));\r\n    optionGroup2.addOption(OptionBuilder.create('y'));\r\n    options.addOptionGroup(optionGroup1);\r\n    options.addOptionGroup(optionGroup2);\r\n    assertNotNull(options.getOptionGroups());\r\n    assertEquals(2, options.getOptionGroups().size());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-cli\\src\\test\\java\\org\\apache\\commons\\cli\\OptionsTest.java",
  "methodName" : "testHelpOptions",
  "sourceCode" : "@Test\r\nvoid testHelpOptions() {\r\n    OptionBuilder.withLongOpt(\"long-only1\");\r\n    final Option longOnly1 = OptionBuilder.create();\r\n    OptionBuilder.withLongOpt(\"long-only2\");\r\n    final Option longOnly2 = OptionBuilder.create();\r\n    final Option shortOnly1 = OptionBuilder.create(\"1\");\r\n    final Option shortOnly2 = OptionBuilder.create(\"2\");\r\n    OptionBuilder.withLongOpt(\"bothA\");\r\n    final Option bothA = OptionBuilder.create(\"a\");\r\n    OptionBuilder.withLongOpt(\"bothB\");\r\n    final Option bothB = OptionBuilder.create(\"b\");\r\n    final Options options = new Options();\r\n    options.addOption(longOnly1);\r\n    options.addOption(longOnly2);\r\n    options.addOption(shortOnly1);\r\n    options.addOption(shortOnly2);\r\n    options.addOption(bothA);\r\n    options.addOption(bothB);\r\n    final Collection<Option> allOptions = new ArrayList<>();\r\n    allOptions.add(longOnly1);\r\n    allOptions.add(longOnly2);\r\n    allOptions.add(shortOnly1);\r\n    allOptions.add(shortOnly2);\r\n    allOptions.add(bothA);\r\n    allOptions.add(bothB);\r\n    final Collection<Option> helpOptions = options.helpOptions();\r\n    assertTrue(helpOptions.containsAll(allOptions), \"Everything in all should be in help\");\r\n    assertTrue(allOptions.containsAll(helpOptions), \"Everything in help should be in all\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-cli\\src\\test\\java\\org\\apache\\commons\\cli\\OptionsTest.java",
  "methodName" : "testLong",
  "sourceCode" : "@Test\r\nvoid testLong() {\r\n    final Options options = new Options();\r\n    options.addOption(\"a\", \"--a\", false, \"toggle -a\");\r\n    options.addOption(\"b\", \"--b\", true, \"set -b\");\r\n    assertTrue(options.hasOption(\"a\"));\r\n    assertTrue(options.hasOption(\"b\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-cli\\src\\test\\java\\org\\apache\\commons\\cli\\OptionsTest.java",
  "methodName" : "testMissingOptionException",
  "sourceCode" : "@Test\r\nvoid testMissingOptionException() throws ParseException {\r\n    final Options options = new Options();\r\n    OptionBuilder.isRequired();\r\n    options.addOption(OptionBuilder.create(\"f\"));\r\n    final MissingOptionException e = assertThrows(MissingOptionException.class, () -> new PosixParser().parse(options, new String[0]));\r\n    assertEquals(\"Missing required option: f\", e.getMessage());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-cli\\src\\test\\java\\org\\apache\\commons\\cli\\OptionsTest.java",
  "methodName" : "testMissingOptionsException",
  "sourceCode" : "@Test\r\nvoid testMissingOptionsException() throws ParseException {\r\n    final Options options = new Options();\r\n    OptionBuilder.isRequired();\r\n    options.addOption(OptionBuilder.create(\"f\"));\r\n    OptionBuilder.isRequired();\r\n    options.addOption(OptionBuilder.create(\"x\"));\r\n    final MissingOptionException e = assertThrows(MissingOptionException.class, () -> new PosixParser().parse(options, new String[0]));\r\n    assertEquals(\"Missing required options: f, x\", e.getMessage());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-cli\\src\\test\\java\\org\\apache\\commons\\cli\\OptionsTest.java",
  "methodName" : "testRequiredOptionInGroupShouldNotBeInRequiredList",
  "sourceCode" : "@Test\r\nvoid testRequiredOptionInGroupShouldNotBeInRequiredList() {\r\n    final String key = \"a\";\r\n    final Option option = new Option(key, \"along\", false, \"Option A\");\r\n    option.setRequired(true);\r\n    final Options options = new Options();\r\n    options.addOption(option);\r\n    assertTrue(options.getRequiredOptions().contains(key));\r\n    final OptionGroup optionGroup = new OptionGroup();\r\n    optionGroup.addOption(option);\r\n    options.addOptionGroup(optionGroup);\r\n    assertFalse(options.getOption(key).isRequired());\r\n    assertFalse(options.getRequiredOptions().contains(key), \"Option in group shouldn't be in required options list.\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-cli\\src\\test\\java\\org\\apache\\commons\\cli\\OptionsTest.java",
  "methodName" : "testSimple",
  "sourceCode" : "@Test\r\nvoid testSimple() {\r\n    final Options options = new Options();\r\n    options.addOption(\"a\", false, \"toggle -a\");\r\n    options.addOption(\"b\", true, \"toggle -b\");\r\n    assertTrue(options.hasOption(\"a\"));\r\n    assertTrue(options.hasOption(\"b\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-cli\\src\\test\\java\\org\\apache\\commons\\cli\\OptionsTest.java",
  "methodName" : "testToString",
  "sourceCode" : "@Test\r\nvoid testToString() {\r\n    final Options options = new Options();\r\n    options.addOption(\"f\", \"foo\", true, \"Foo\");\r\n    options.addOption(\"b\", \"bar\", false, \"Bar\");\r\n    final String s = options.toString();\r\n    assertNotNull(s, \"null string returned\");\r\n    assertTrue(s.toLowerCase().contains(\"foo\"), \"foo option missing\");\r\n    assertTrue(s.toLowerCase().contains(\"bar\"), \"bar option missing\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-cli\\src\\test\\java\\org\\apache\\commons\\cli\\OptionTest.java",
  "methodName" : "testAddValue",
  "sourceCode" : "@Test\r\nvoid testAddValue() {\r\n    final Option option = new Option(\"f\", null);\r\n    assertThrows(UnsupportedOperationException.class, () -> option.addValue(\"\"));\r\n    assertThrows(IllegalStateException.class, () -> option.processValue(\"\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-cli\\src\\test\\java\\org\\apache\\commons\\cli\\OptionTest.java",
  "methodName" : "testBuilderDeprecatedBuildEmpty",
  "sourceCode" : "@Test\r\nvoid testBuilderDeprecatedBuildEmpty() {\r\n    assertThrows(IllegalStateException.class, () -> Option.builder().build());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-cli\\src\\test\\java\\org\\apache\\commons\\cli\\OptionTest.java",
  "methodName" : "testBuilderEmpty",
  "sourceCode" : "@Test\r\nvoid testBuilderEmpty() {\r\n    assertThrows(IllegalStateException.class, () -> Option.builder().get());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-cli\\src\\test\\java\\org\\apache\\commons\\cli\\OptionTest.java",
  "methodName" : "testBuilderInsufficientParams1",
  "sourceCode" : "@Test\r\nvoid testBuilderInsufficientParams1() {\r\n    assertThrows(IllegalStateException.class, () -> Option.builder().desc(\"desc\").get());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-cli\\src\\test\\java\\org\\apache\\commons\\cli\\OptionTest.java",
  "methodName" : "testBuilderInsufficientParams2",
  "sourceCode" : "@Test\r\nvoid testBuilderInsufficientParams2() {\r\n    assertThrows(IllegalStateException.class, () -> Option.builder(null).desc(\"desc\").get());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-cli\\src\\test\\java\\org\\apache\\commons\\cli\\OptionTest.java",
  "methodName" : "testBuilderInvalidOptionName0",
  "sourceCode" : "@Test\r\nvoid testBuilderInvalidOptionName0() {\r\n    assertThrows(IllegalStateException.class, () -> Option.builder().option(null).get());\r\n    assertThrows(IllegalArgumentException.class, () -> Option.builder().option(\"\"));\r\n    assertThrows(IllegalArgumentException.class, () -> Option.builder().option(\" \"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-cli\\src\\test\\java\\org\\apache\\commons\\cli\\OptionTest.java",
  "methodName" : "testBuilderInvalidOptionName1",
  "sourceCode" : "@Test\r\nvoid testBuilderInvalidOptionName1() {\r\n    assertThrows(IllegalArgumentException.class, () -> Option.builder().option(\"invalid?\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-cli\\src\\test\\java\\org\\apache\\commons\\cli\\OptionTest.java",
  "methodName" : "testBuilderInvalidOptionName2",
  "sourceCode" : "@Test\r\nvoid testBuilderInvalidOptionName2() {\r\n    assertThrows(IllegalArgumentException.class, () -> Option.builder().option(\"invalid@\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-cli\\src\\test\\java\\org\\apache\\commons\\cli\\OptionTest.java",
  "methodName" : "testBuilderInvalidOptionName3",
  "sourceCode" : "@Test\r\nvoid testBuilderInvalidOptionName3() {\r\n    assertThrows(IllegalArgumentException.class, () -> Option.builder(\"invalid?\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-cli\\src\\test\\java\\org\\apache\\commons\\cli\\OptionTest.java",
  "methodName" : "testBuilderInvalidOptionName4",
  "sourceCode" : "@Test\r\nvoid testBuilderInvalidOptionName4() {\r\n    assertThrows(IllegalArgumentException.class, () -> Option.builder(\"invalid@\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-cli\\src\\test\\java\\org\\apache\\commons\\cli\\OptionTest.java",
  "methodName" : "testBuilderMethods",
  "sourceCode" : "@Test\r\nvoid testBuilderMethods() {\r\n    final char defaultSeparator = (char) 0;\r\n    checkOption(Option.builder(\"a\").desc(\"desc\").get(), \"a\", \"desc\", null, Option.UNINITIALIZED, null, false, false, defaultSeparator, String.class, null, null, null);\r\n    checkOption(Option.builder(\"a\").desc(\"desc\").get(), \"a\", \"desc\", null, Option.UNINITIALIZED, null, false, false, defaultSeparator, String.class, null, null, null);\r\n    checkOption(Option.builder(\"a\").desc(\"desc\").longOpt(\"aaa\").get(), \"a\", \"desc\", \"aaa\", Option.UNINITIALIZED, null, false, false, defaultSeparator, String.class, null, null, null);\r\n    checkOption(Option.builder(\"a\").desc(\"desc\").hasArg(true).get(), \"a\", \"desc\", null, 1, null, false, false, defaultSeparator, String.class, null, null, null);\r\n    checkOption(Option.builder(\"a\").desc(\"desc\").hasArg(false).get(), \"a\", \"desc\", null, Option.UNINITIALIZED, null, false, false, defaultSeparator, String.class, null, null, null);\r\n    checkOption(Option.builder(\"a\").desc(\"desc\").hasArg(true).get(), \"a\", \"desc\", null, 1, null, false, false, defaultSeparator, String.class, null, null, null);\r\n    checkOption(Option.builder(\"a\").desc(\"desc\").numberOfArgs(3).get(), \"a\", \"desc\", null, 3, null, false, false, defaultSeparator, String.class, null, null, null);\r\n    checkOption(Option.builder(\"a\").desc(\"desc\").required(true).get(), \"a\", \"desc\", null, Option.UNINITIALIZED, null, true, false, defaultSeparator, String.class, null, null, null);\r\n    checkOption(Option.builder(\"a\").desc(\"desc\").required(false).get(), \"a\", \"desc\", null, Option.UNINITIALIZED, null, false, false, defaultSeparator, String.class, null, null, null);\r\n    checkOption(Option.builder(\"a\").desc(\"desc\").argName(\"arg1\").get(), \"a\", \"desc\", null, Option.UNINITIALIZED, \"arg1\", false, false, defaultSeparator, String.class, null, null, null);\r\n    checkOption(Option.builder(\"a\").desc(\"desc\").optionalArg(false).get(), \"a\", \"desc\", null, Option.UNINITIALIZED, null, false, false, defaultSeparator, String.class, null, null, null);\r\n    checkOption(Option.builder(\"a\").desc(\"desc\").optionalArg(true).get(), \"a\", \"desc\", null, 1, null, false, true, defaultSeparator, String.class, null, null, null);\r\n    checkOption(Option.builder(\"a\").desc(\"desc\").valueSeparator(':').get(), \"a\", \"desc\", null, Option.UNINITIALIZED, null, false, false, ':', String.class, null, null, null);\r\n    checkOption(Option.builder(\"a\").desc(\"desc\").type(Integer.class).get(), \"a\", \"desc\", null, Option.UNINITIALIZED, null, false, false, defaultSeparator, Integer.class, null, null, null);\r\n    checkOption(Option.builder(\"a\").desc(\"desc\").type(null).get(), \"a\", \"desc\", null, Option.UNINITIALIZED, null, false, false, defaultSeparator, String.class, null, null, null);\r\n    checkOption(Option.builder().option(\"a\").desc(\"desc\").type(Integer.class).get(), \"a\", \"desc\", null, Option.UNINITIALIZED, null, false, false, defaultSeparator, Integer.class, null, null, null);\r\n    // Deprecated\r\n    checkOption(Option.builder().option(\"a\").desc(\"desc\").type(Integer.class).deprecated().get(), \"a\", \"desc\", null, Option.UNINITIALIZED, null, false, false, defaultSeparator, Integer.class, \"\", false, \"\");\r\n    checkOption(Option.builder().option(\"a\").desc(\"desc\").type(Integer.class).deprecated(DeprecatedAttributes.builder().get()).get(), \"a\", \"desc\", null, Option.UNINITIALIZED, null, false, false, defaultSeparator, Integer.class, \"\", false, \"\");\r\n    checkOption(Option.builder().option(\"a\").desc(\"desc\").type(Integer.class).deprecated(DeprecatedAttributes.builder().setDescription(\"X\").get()).get(), \"a\", \"desc\", null, Option.UNINITIALIZED, null, false, false, defaultSeparator, Integer.class, \"X\", false, \"\");\r\n    checkOption(Option.builder().option(\"a\").desc(\"desc\").type(Integer.class).deprecated(DeprecatedAttributes.builder().setDescription(\"X\").setForRemoval(true).get()).get(), \"a\", \"desc\", null, Option.UNINITIALIZED, null, false, false, defaultSeparator, Integer.class, \"X\", true, \"\");\r\n    checkOption(Option.builder().option(\"a\").desc(\"desc\").type(Integer.class).deprecated(DeprecatedAttributes.builder().setDescription(\"X\").setForRemoval(true).setSince(\"2.0\").get()).get(), \"a\", \"desc\", null, Option.UNINITIALIZED, null, false, false, defaultSeparator, Integer.class, \"X\", true, \"2.0\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-cli\\src\\test\\java\\org\\apache\\commons\\cli\\OptionTest.java",
  "methodName" : "testClear",
  "sourceCode" : "@Test\r\nvoid testClear() {\r\n    final TestOption option = new TestOption(\"x\", true, \"\");\r\n    assertEquals(0, option.getValuesList().size());\r\n    option.addValue(\"a\");\r\n    assertEquals(1, option.getValuesList().size());\r\n    option.clearValues();\r\n    assertEquals(0, option.getValuesList().size());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-cli\\src\\test\\java\\org\\apache\\commons\\cli\\OptionTest.java",
  "methodName" : "testClone",
  "sourceCode" : "// See https://issues.apache.org/jira/browse/CLI-21\r\n@Test\r\nvoid testClone() {\r\n    final TestOption a = new TestOption(\"a\", true, \"\");\r\n    final TestOption b = (TestOption) a.clone();\r\n    assertEquals(a, b);\r\n    assertNotSame(a, b);\r\n    a.setDescription(\"a\");\r\n    assertEquals(\"\", b.getDescription());\r\n    b.setArgs(2);\r\n    b.addValue(\"b1\");\r\n    b.addValue(\"b2\");\r\n    assertEquals(1, a.getArgs());\r\n    assertEquals(0, a.getValuesList().size());\r\n    assertEquals(2, b.getValues().length);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-cli\\src\\test\\java\\org\\apache\\commons\\cli\\OptionTest.java",
  "methodName" : "testEquals",
  "sourceCode" : "@Test\r\nvoid testEquals() {\r\n    final Option option1a = new Option(\"1\", null);\r\n    final Option option1b = new Option(\"1\", null);\r\n    final Option option2 = new Option(\"2\", null);\r\n    assertEquals(option1a, option1a);\r\n    assertEquals(option1a, option1b);\r\n    assertEquals(option1b, option1a);\r\n    assertNotEquals(option1a, option2);\r\n    assertNotEquals(option1b, option2);\r\n    assertNotEquals(option2, option1a);\r\n    assertNotEquals(option2, \"\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-cli\\src\\test\\java\\org\\apache\\commons\\cli\\OptionTest.java",
  "methodName" : "testGetValue",
  "sourceCode" : "@Test\r\nvoid testGetValue() {\r\n    final Option option = new Option(\"f\", null);\r\n    option.setArgs(Option.UNLIMITED_VALUES);\r\n    assertEquals(\"default\", option.getValue(\"default\"));\r\n    assertNull(option.getValue(0));\r\n    option.processValue(\"foo\");\r\n    assertEquals(\"foo\", option.getValue());\r\n    assertEquals(\"foo\", option.getValue(0));\r\n    assertEquals(\"foo\", option.getValue(\"default\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-cli\\src\\test\\java\\org\\apache\\commons\\cli\\OptionTest.java",
  "methodName" : "testHasArgName",
  "sourceCode" : "@Test\r\nvoid testHasArgName() {\r\n    final Option option = new Option(\"f\", null);\r\n    option.setArgName(null);\r\n    assertFalse(option.hasArgName());\r\n    option.setArgName(\"\");\r\n    assertFalse(option.hasArgName());\r\n    option.setArgName(\"file\");\r\n    assertTrue(option.hasArgName());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-cli\\src\\test\\java\\org\\apache\\commons\\cli\\OptionTest.java",
  "methodName" : "testHasArgs",
  "sourceCode" : "@Test\r\nvoid testHasArgs() {\r\n    final Option option = new Option(\"f\", null);\r\n    option.setArgs(0);\r\n    assertFalse(option.hasArgs());\r\n    option.setArgs(1);\r\n    assertFalse(option.hasArgs());\r\n    option.setArgs(10);\r\n    assertTrue(option.hasArgs());\r\n    option.setArgs(Option.UNLIMITED_VALUES);\r\n    assertTrue(option.hasArgs());\r\n    option.setArgs(Option.UNINITIALIZED);\r\n    assertFalse(option.hasArgs());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-cli\\src\\test\\java\\org\\apache\\commons\\cli\\OptionTest.java",
  "methodName" : "testHashCode",
  "sourceCode" : "@Test\r\nvoid testHashCode() {\r\n    assertNotEquals(Option.builder(\"test\").get().hashCode(), Option.builder(\"test2\").get().hashCode());\r\n    assertNotEquals(Option.builder(\"test\").get().hashCode(), Option.builder().longOpt(\"test\").get().hashCode());\r\n    assertNotEquals(Option.builder(\"test\").get().hashCode(), Option.builder(\"test\").longOpt(\"long test\").get().hashCode());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-cli\\src\\test\\java\\org\\apache\\commons\\cli\\OptionTest.java",
  "methodName" : "testProcessValue",
  "sourceCode" : "@Test\r\npublic void testProcessValue() {\r\n    final Option option = new Option(\"D\", true, \"Define property\");\r\n    option.setValueSeparator('=');\r\n    final NullPointerException exception = assertThrows(NullPointerException.class, () -> option.processValue(null));\r\n    assertTrue(exception.getMessage().contains(\"value\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-cli\\src\\test\\java\\org\\apache\\commons\\cli\\OptionTest.java",
  "methodName" : "testSerialization",
  "sourceCode" : "@Test\r\nvoid testSerialization() throws IOException, ClassNotFoundException {\r\n    final Option option = Option.builder(\"o\").type(TypeHandlerTest.Instantiable.class).get();\r\n    assertEquals(Converter.DEFAULT, option.getConverter());\r\n    Option roundtrip = roundTrip(option);\r\n    assertEquals(Converter.DEFAULT, roundtrip.getConverter());\r\n    // verify unregistered class converters and verifiers get reset to default.\r\n    // converters are NOT Serializable, use a serialization proxy if you want that.\r\n    option.setConverter(Converter.DATE);\r\n    roundtrip = roundTrip(option);\r\n    assertEquals(Converter.DEFAULT, roundtrip.getConverter());\r\n    // verify registered class converters and verifiers do not get reset to default.\r\n    // converters are NOT Serializable, use a serialization proxy if you want that.\r\n    // verify earlier values still set.\r\n    assertEquals(Converter.DATE, option.getConverter());\r\n    roundtrip = roundTrip(option);\r\n    assertEquals(Converter.DEFAULT, roundtrip.getConverter());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-cli\\src\\test\\java\\org\\apache\\commons\\cli\\OptionTest.java",
  "methodName" : "testSubclass",
  "sourceCode" : "@Test\r\nvoid testSubclass() {\r\n    final Option option = new DefaultOption(\"f\", \"file\", \"myfile.txt\");\r\n    final Option clone = (Option) option.clone();\r\n    assertEquals(\"myfile.txt\", clone.getValue());\r\n    assertEquals(DefaultOption.class, clone.getClass());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-cli\\src\\test\\java\\org\\apache\\commons\\cli\\OptionTest.java",
  "methodName" : "testTypeClass",
  "sourceCode" : "@Test\r\nvoid testTypeClass() {\r\n    final Option option = new Option(\"f\", null);\r\n    assertEquals(String.class, option.getType());\r\n    option.setType(CharSequence.class);\r\n    assertEquals(CharSequence.class, option.getType());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-cli\\src\\test\\java\\org\\apache\\commons\\cli\\OptionTest.java",
  "methodName" : "testTypeObject",
  "sourceCode" : "@Test\r\nvoid testTypeObject() {\r\n    final Option option = new Option(\"f\", null);\r\n    assertEquals(String.class, option.getType());\r\n    @SuppressWarnings(\"cast\")\r\n    final Object // Do NOT remove cast\r\n    type = CharSequence.class;\r\n    option.setType(type);\r\n    assertEquals(CharSequence.class, option.getType());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-cli\\src\\test\\java\\org\\apache\\commons\\cli\\OptionValidatorTest.java",
  "methodName" : "testExclusivity",
  "sourceCode" : "@Test\r\nvoid testExclusivity() {\r\n    /* since we modify acceptable chars by add and removing ADDITIONAL* chars we must verify that they do not exist in the\r\n         * base javaIdentiferPart that is used in OptionValidator to validate basic characters  */\r\n    for (final char c : OptionValidator.ADDITIONAL_LONG_CHARS) {\r\n        assertFalse(Character.isJavaIdentifierPart(c), () -> String.format(\"'%s' should not be in 'ADDITIONAL_LONG_CHARS\", c));\r\n    }\r\n    for (final char c : OptionValidator.ADDITIONAL_OPTION_CHARS) {\r\n        assertFalse(Character.isJavaIdentifierPart(c), () -> String.format(\"'%s' should not be in 'ADDITIONAL_OPTION_CHARS\", c));\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-cli\\src\\test\\java\\org\\apache\\commons\\cli\\OptionValidatorTest.java",
  "methodName" : "testValidate",
  "sourceCode" : "@ParameterizedTest(name = \"{2}\")\r\n@MethodSource(\"optionParameters\")\r\nvoid testValidate(final String str, final boolean expected, final String name) {\r\n    if (expected) {\r\n        assertEquals(str, OptionValidator.validate(str));\r\n    } else {\r\n        assertThrows(IllegalArgumentException.class, () -> OptionValidator.validate(str));\r\n    }\r\n}",
  "annotations" : [ "ParameterizedTest" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-cli\\src\\test\\java\\org\\apache\\commons\\cli\\ParseExceptionTest.java",
  "methodName" : "testConstructor",
  "sourceCode" : "@Test\r\nvoid testConstructor() {\r\n    assertEquals(\"a\", new ParseException(\"a\").getMessage());\r\n    final Throwable t = new IOException();\r\n    assertEquals(t, new ParseException(t).getCause());\r\n    assertEquals(t, ParseException.wrap(t).getCause());\r\n    final ParseException pe = new ParseException(\"A\");\r\n    assertEquals(pe, ParseException.wrap(pe));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-cli\\src\\test\\java\\org\\apache\\commons\\cli\\PatternOptionBuilderTest.java",
  "methodName" : "testClassPattern",
  "sourceCode" : "@Test\r\nvoid testClassPattern() throws Exception {\r\n    final Options options = PatternOptionBuilder.parsePattern(\"c+d+\");\r\n    final CommandLineParser parser = new PosixParser();\r\n    final CommandLine line = parser.parse(options, new String[] { \"-c\", \"java.util.Calendar\", \"-d\", \"System.DateTime\" });\r\n    assertEquals(Calendar.class, line.getOptionObject(\"c\"), \"c value\");\r\n    assertNull(line.getOptionObject(\"d\"), \"d value\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-cli\\src\\test\\java\\org\\apache\\commons\\cli\\PatternOptionBuilderTest.java",
  "methodName" : "testEmptyPattern",
  "sourceCode" : "@Test\r\nvoid testEmptyPattern() {\r\n    final Options options = PatternOptionBuilder.parsePattern(\"\");\r\n    assertTrue(options.getOptions().isEmpty());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-cli\\src\\test\\java\\org\\apache\\commons\\cli\\PatternOptionBuilderTest.java",
  "methodName" : "testExistingFilePattern",
  "sourceCode" : "@Test\r\nvoid testExistingFilePattern() throws Exception {\r\n    final Options options = PatternOptionBuilder.parsePattern(\"g<\");\r\n    final CommandLineParser parser = new PosixParser();\r\n    final CommandLine line = parser.parse(options, new String[] { \"-g\", \"src/test/resources/org/apache/commons/cli/existing-readable.file\" });\r\n    final Object parsedReadableFileStream = line.getOptionObject(\"g\");\r\n    assertNotNull(parsedReadableFileStream, \"option g not parsed\");\r\n    assertInstanceOf(FileInputStream.class, parsedReadableFileStream, \"option g not FileInputStream\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-cli\\src\\test\\java\\org\\apache\\commons\\cli\\PatternOptionBuilderTest.java",
  "methodName" : "testExistingFilePatternFileNotExist",
  "sourceCode" : "@Test\r\nvoid testExistingFilePatternFileNotExist() throws Exception {\r\n    final Options options = PatternOptionBuilder.parsePattern(\"f<\");\r\n    final CommandLineParser parser = new PosixParser();\r\n    final CommandLine line = parser.parse(options, new String[] { \"-f\", \"non-existing.file\" });\r\n    assertNull(line.getOptionObject(\"f\"), \"option f parsed\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-cli\\src\\test\\java\\org\\apache\\commons\\cli\\PatternOptionBuilderTest.java",
  "methodName" : "testNumberPattern",
  "sourceCode" : "@Test\r\nvoid testNumberPattern() throws Exception {\r\n    final Options options = PatternOptionBuilder.parsePattern(\"n%d%x%\");\r\n    final CommandLineParser parser = new PosixParser();\r\n    // 3,5 fails validation.\r\n    //assertThrows(ParseException.class, () -> parser.parse(options, new String[] {\"-n\", \"1\", \"-d\", \"2.1\", \"-x\", \"3,5\"}));\r\n    final CommandLine line = parser.parse(options, new String[] { \"-n\", \"1\", \"-d\", \"2.1\", \"-x\", \"3,5\" });\r\n    assertEquals(Long.class, line.getOptionObject(\"n\").getClass(), \"n object class\");\r\n    assertEquals(Long.valueOf(1), line.getOptionObject(\"n\"), \"n value\");\r\n    assertEquals(Double.class, line.getOptionObject(\"d\").getClass(), \"d object class\");\r\n    assertEquals(Double.valueOf(2.1), line.getOptionObject(\"d\"), \"d value\");\r\n    assertNull(line.getOptionObject(\"x\"), \"x object\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-cli\\src\\test\\java\\org\\apache\\commons\\cli\\PatternOptionBuilderTest.java",
  "methodName" : "testObjectPattern",
  "sourceCode" : "@Test\r\nvoid testObjectPattern() throws Exception {\r\n    final Options options = PatternOptionBuilder.parsePattern(\"o@i@n@\");\r\n    final CommandLineParser parser = new PosixParser();\r\n    final CommandLine line = parser.parse(options, new String[] { \"-o\", \"java.lang.String\", \"-i\", \"java.util.Calendar\", \"-n\", \"System.DateTime\" });\r\n    assertEquals(\"\", line.getOptionObject(\"o\"), \"o value\");\r\n    assertNull(line.getOptionObject(\"i\"), \"i value\");\r\n    assertNull(line.getOptionObject(\"n\"), \"n value\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-cli\\src\\test\\java\\org\\apache\\commons\\cli\\PatternOptionBuilderTest.java",
  "methodName" : "testRequiredOption",
  "sourceCode" : "@Test\r\nvoid testRequiredOption() throws Exception {\r\n    final Options options = PatternOptionBuilder.parsePattern(\"!n%m%\");\r\n    final CommandLineParser parser = new PosixParser();\r\n    final MissingOptionException e = assertThrows(MissingOptionException.class, () -> parser.parse(options, new String[] { \"\" }));\r\n    assertEquals(1, e.getMissingOptions().size());\r\n    assertTrue(e.getMissingOptions().contains(\"n\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-cli\\src\\test\\java\\org\\apache\\commons\\cli\\PatternOptionBuilderTest.java",
  "methodName" : "testSimplePattern",
  "sourceCode" : "@Test\r\nvoid testSimplePattern() throws Exception {\r\n    /*\r\n         * Dates calculated from strings are dependent upon configuration and environment settings for the\r\n         * machine on which the test is running.  To avoid this problem, convert the time into a string\r\n         * and then unparse that using the converter.  This produces strings that always match the correct\r\n         * time zone.\r\n         */\r\n    final Options options = PatternOptionBuilder.parsePattern(\"a:b@cde>f+n%t/m*z#\");\r\n    final Date expectedDate = new Date(1023400137000L);\r\n    final DateFormat dateFormat = new SimpleDateFormat(\"EEE MMM dd HH:mm:ss zzz yyyy\");\r\n    final String[] args = { \"-c\", \"-a\", \"foo\", \"-b\", \"java.util.Vector\", \"-e\", \"build.xml\", \"-f\", \"java.util.Calendar\", \"-n\", \"4.5\", \"-t\", \"https://commons.apache.org\", \"-z\", dateFormat.format(expectedDate), \"-m\", \"test*\" };\r\n    final CommandLineParser parser = new PosixParser();\r\n    final CommandLine line = parser.parse(options, args);\r\n    assertEquals(\"foo\", line.getOptionValue(\"a\"), \"flag a\");\r\n    assertEquals(\"foo\", line.getOptionObject(\"a\"), \"string flag a\");\r\n    assertEquals(new Vector<>(), line.getOptionObject(\"b\"), \"object flag b\");\r\n    assertTrue(line.hasOption(\"c\"), \"boolean true flag c\");\r\n    assertFalse(line.hasOption(\"d\"), \"boolean false flag d\");\r\n    assertEquals(new File(\"build.xml\"), line.getOptionObject(\"e\"), \"file flag e\");\r\n    assertEquals(Calendar.class, line.getOptionObject(\"f\"), \"class flag f\");\r\n    assertEquals(Double.valueOf(4.5), line.getOptionObject(\"n\"), \"number flag n\");\r\n    assertEquals(new URL(\"https://commons.apache.org\"), line.getOptionObject(\"t\"), \"url flag t\");\r\n    // tests the char methods of CommandLine that delegate to the String methods\r\n    assertEquals(\"foo\", line.getOptionValue('a'), \"flag a\");\r\n    assertEquals(\"foo\", line.getOptionObject('a'), \"string flag a\");\r\n    assertEquals(new Vector<>(), line.getOptionObject('b'), \"object flag b\");\r\n    assertTrue(line.hasOption('c'), \"boolean true flag c\");\r\n    assertFalse(line.hasOption('d'), \"boolean false flag d\");\r\n    assertEquals(new File(\"build.xml\"), line.getOptionObject('e'), \"file flag e\");\r\n    assertEquals(Calendar.class, line.getOptionObject('f'), \"class flag f\");\r\n    assertEquals(Double.valueOf(4.5), line.getOptionObject('n'), \"number flag n\");\r\n    assertEquals(new URL(\"https://commons.apache.org\"), line.getOptionObject('t'), \"url flag t\");\r\n    // FILES NOT SUPPORTED YET\r\n    assertThrows(UnsupportedOperationException.class, () -> line.getOptionObject('m'));\r\n    assertEquals(expectedDate, line.getOptionObject('z'), \"date flag z\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-cli\\src\\test\\java\\org\\apache\\commons\\cli\\PatternOptionBuilderTest.java",
  "methodName" : "testUntypedPattern",
  "sourceCode" : "@Test\r\nvoid testUntypedPattern() throws Exception {\r\n    final Options options = PatternOptionBuilder.parsePattern(\"abc\");\r\n    final CommandLineParser parser = new PosixParser();\r\n    final CommandLine line = parser.parse(options, new String[] { \"-abc\" });\r\n    assertTrue(line.hasOption('a'));\r\n    assertNull(line.getOptionObject('a'), \"value a\");\r\n    assertTrue(line.hasOption('b'));\r\n    assertNull(line.getOptionObject('b'), \"value b\");\r\n    assertTrue(line.hasOption('c'));\r\n    assertNull(line.getOptionObject('c'), \"value c\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-cli\\src\\test\\java\\org\\apache\\commons\\cli\\PatternOptionBuilderTest.java",
  "methodName" : "testURLPattern",
  "sourceCode" : "@Test\r\nvoid testURLPattern() throws Exception {\r\n    final Options options = PatternOptionBuilder.parsePattern(\"u/v/\");\r\n    final CommandLineParser parser = new PosixParser();\r\n    final CommandLine line = parser.parse(options, new String[] { \"-u\", \"https://commons.apache.org\", \"-v\", \"foo://commons.apache.org\" });\r\n    assertEquals(new URL(\"https://commons.apache.org\"), line.getOptionObject(\"u\"), \"u value\");\r\n    assertNull(line.getOptionObject(\"v\"), \"v value\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-cli\\src\\test\\java\\org\\apache\\commons\\cli\\PosixParserTest.java",
  "methodName" : "testAmbiguousLongWithoutEqualSingleDash",
  "sourceCode" : "@Override\r\n@Test\r\n@Disabled(\"not supported by the PosixParser\")\r\nvoid testAmbiguousLongWithoutEqualSingleDash() throws Exception {\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-cli\\src\\test\\java\\org\\apache\\commons\\cli\\PosixParserTest.java",
  "methodName" : "testAmbiguousLongWithoutEqualSingleDash2",
  "sourceCode" : "@Override\r\n@Test\r\n@Disabled(\"not supported by the PosixParser\")\r\nvoid testAmbiguousLongWithoutEqualSingleDash2() throws Exception {\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-cli\\src\\test\\java\\org\\apache\\commons\\cli\\PosixParserTest.java",
  "methodName" : "testAmbiguousPartialLongOption4",
  "sourceCode" : "@Override\r\n@Test\r\n@Disabled(\"not supported by the PosixParser\")\r\nvoid testAmbiguousPartialLongOption4() throws Exception {\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-cli\\src\\test\\java\\org\\apache\\commons\\cli\\PosixParserTest.java",
  "methodName" : "testDoubleDash2",
  "sourceCode" : "@Override\r\n@Test\r\n@Disabled(\"not supported by the PosixParser\")\r\nvoid testDoubleDash2() throws Exception {\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-cli\\src\\test\\java\\org\\apache\\commons\\cli\\PosixParserTest.java",
  "methodName" : "testLongWithEqualSingleDash",
  "sourceCode" : "@Override\r\n@Test\r\n@Disabled(\"not supported by the PosixParser\")\r\nvoid testLongWithEqualSingleDash() throws Exception {\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-cli\\src\\test\\java\\org\\apache\\commons\\cli\\PosixParserTest.java",
  "methodName" : "testLongWithoutEqualSingleDash",
  "sourceCode" : "@Override\r\n@Test\r\n@Disabled(\"not supported by the PosixParser\")\r\nvoid testLongWithoutEqualSingleDash() throws Exception {\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-cli\\src\\test\\java\\org\\apache\\commons\\cli\\PosixParserTest.java",
  "methodName" : "testLongWithUnexpectedArgument1",
  "sourceCode" : "@Override\r\n@Test\r\n@Disabled(\"not supported by the PosixParser\")\r\nvoid testLongWithUnexpectedArgument1() throws Exception {\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-cli\\src\\test\\java\\org\\apache\\commons\\cli\\PosixParserTest.java",
  "methodName" : "testNegativeOption",
  "sourceCode" : "@Override\r\n@Test\r\n@Disabled(\"not supported by the PosixParser (CLI-184)\")\r\nvoid testNegativeOption() throws Exception {\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-cli\\src\\test\\java\\org\\apache\\commons\\cli\\PosixParserTest.java",
  "methodName" : "testShortWithEqual",
  "sourceCode" : "@Override\r\n@Test\r\n@Disabled(\"not supported by the PosixParser\")\r\nvoid testShortWithEqual() throws Exception {\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-cli\\src\\test\\java\\org\\apache\\commons\\cli\\PosixParserTest.java",
  "methodName" : "testUnambiguousPartialLongOption4",
  "sourceCode" : "@Override\r\n@Test\r\n@Disabled(\"not supported by the PosixParser\")\r\nvoid testUnambiguousPartialLongOption4() throws Exception {\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-cli\\src\\test\\java\\org\\apache\\commons\\cli\\SolrCliTest.java",
  "methodName" : "testOptions",
  "sourceCode" : "@Test\r\nvoid testOptions() {\r\n    // sanity checks\r\n    assertNotNull(DEFAULT_CONFIG_SET);\r\n    assertNotNull(OPTION_CREDENTIALS);\r\n    assertNotNull(OPTION_HELP);\r\n    assertNotNull(OPTION_RECURSE);\r\n    assertNotNull(OPTION_SOLRURL);\r\n    assertNotNull(OPTION_SOLRURL_DEPRECATED);\r\n    assertNotNull(OPTION_VERBOSE);\r\n    assertNotNull(OPTION_ZKHOST);\r\n    assertNotNull(OPTION_ZKHOST_DEPRECATED);\r\n    assertNotNull(ZK_HOST);\r\n    assertNotNull(getDefaultSolrUrl());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-cli\\src\\test\\java\\org\\apache\\commons\\cli\\SolrCreateToolTest.java",
  "methodName" : "testHelpFormatter",
  "sourceCode" : "@Test\r\nvoid testHelpFormatter() {\r\n    final HelpFormatter formatter = new HelpFormatter();\r\n    final String actual = printHelp(formatter);\r\n    assertFalse(actual.contains(\"Deprecated\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-cli\\src\\test\\java\\org\\apache\\commons\\cli\\SolrCreateToolTest.java",
  "methodName" : "testHelpFormatterDeprecated",
  "sourceCode" : "@Test\r\nvoid testHelpFormatterDeprecated() {\r\n    final HelpFormatter formatter = HelpFormatter.builder().setShowDeprecated(true).get();\r\n    final String actual = printHelp(formatter);\r\n    assertTrue(actual.contains(\"-zkHost,--zkHost <HOST>          [Deprecated] Zookeeper connection\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-cli\\src\\test\\java\\org\\apache\\commons\\cli\\TypeHandlerTest.java",
  "methodName" : "testCreateClass",
  "sourceCode" : "@Test\r\nvoid testCreateClass() throws ParseException {\r\n    final Class<?> cls = getClass();\r\n    assertEquals(cls, TypeHandler.createClass(cls.getName()));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-cli\\src\\test\\java\\org\\apache\\commons\\cli\\TypeHandlerTest.java",
  "methodName" : "testCreateDate",
  "sourceCode" : "@ParameterizedTest\r\n@MethodSource(\"createDateFixtures\")\r\n@DefaultLocale(language = \"en\", country = \"US\")\r\nvoid testCreateDate(final Date date) {\r\n    assertEquals(date, TypeHandler.createDate(date.toString()));\r\n}",
  "annotations" : [ "ParameterizedTest" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-cli\\src\\test\\java\\org\\apache\\commons\\cli\\TypeHandlerTest.java",
  "methodName" : "testCreateFile",
  "sourceCode" : "@Test\r\nvoid testCreateFile() {\r\n    final File file = new File(\"\").getAbsoluteFile();\r\n    assertEquals(file, TypeHandler.createFile(file.toString()));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-cli\\src\\test\\java\\org\\apache\\commons\\cli\\TypeHandlerTest.java",
  "methodName" : "testCreateFiles",
  "sourceCode" : "@Test\r\nvoid testCreateFiles() {\r\n    assertThrows(UnsupportedOperationException.class, () -> TypeHandler.createFiles(null));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-cli\\src\\test\\java\\org\\apache\\commons\\cli\\TypeHandlerTest.java",
  "methodName" : "testCreateNumber",
  "sourceCode" : "@Test\r\nvoid testCreateNumber() throws ParseException {\r\n    assertEquals(0L, TypeHandler.createNumber(\"0\"));\r\n    assertEquals(0d, TypeHandler.createNumber(\"0.0\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-cli\\src\\test\\java\\org\\apache\\commons\\cli\\TypeHandlerTest.java",
  "methodName" : "testCreateObject",
  "sourceCode" : "@Test\r\nvoid testCreateObject() throws ParseException {\r\n    assertTrue(TypeHandler.createObject(Date.class.getName()) instanceof Date);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-cli\\src\\test\\java\\org\\apache\\commons\\cli\\TypeHandlerTest.java",
  "methodName" : "testCreateURL",
  "sourceCode" : "@Test\r\nvoid testCreateURL() throws ParseException, MalformedURLException {\r\n    final URL file = Paths.get(\"\").toAbsolutePath().toUri().toURL();\r\n    assertEquals(file, TypeHandler.createURL(file.toString()));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-cli\\src\\test\\java\\org\\apache\\commons\\cli\\TypeHandlerTest.java",
  "methodName" : "testCreateValue",
  "sourceCode" : "@SuppressWarnings(\"unchecked\")\r\n@ParameterizedTest(name = \"{0} as {1}\")\r\n@MethodSource(\"createValueTestParameters\")\r\nvoid testCreateValue(final String str, final Class<?> type, final Object expected) throws Exception {\r\n    @SuppressWarnings(\"cast\")\r\n    final Object // KEEP this cast\r\n    objectApiTest = type;\r\n    if (expected instanceof Class<?> && Throwable.class.isAssignableFrom((Class<?>) expected)) {\r\n        assertThrows((Class<Throwable>) expected, () -> TypeHandler.createValue(str, type));\r\n        assertThrows((Class<Throwable>) expected, () -> TypeHandler.createValue(str, objectApiTest));\r\n    } else {\r\n        assertEquals(expected, TypeHandler.createValue(str, type));\r\n        assertEquals(expected, TypeHandler.createValue(str, objectApiTest));\r\n    }\r\n}",
  "annotations" : [ "ParameterizedTest" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-cli\\src\\test\\java\\org\\apache\\commons\\cli\\TypeHandlerTest.java",
  "methodName" : "testCreateValueExistingFile",
  "sourceCode" : "@Test\r\nvoid testCreateValueExistingFile() throws Exception {\r\n    try (FileInputStream result = TypeHandler.createValue(\"src/test/resources/org/apache/commons/cli/existing-readable.file\", PatternOptionBuilder.EXISTING_FILE_VALUE)) {\r\n        assertNotNull(result);\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-cli\\src\\test\\java\\org\\apache\\commons\\cli\\TypeHandlerTest.java",
  "methodName" : "testnstantiableEquals",
  "sourceCode" : "/* proof of equality for later tests */\r\n@Test\r\nvoid testnstantiableEquals() {\r\n    assertEquals(new Instantiable(), new Instantiable());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-cli\\src\\test\\java\\org\\apache\\commons\\cli\\TypeHandlerTest.java",
  "methodName" : "testOpenFile",
  "sourceCode" : "@Test\r\nvoid testOpenFile() throws ParseException, IOException {\r\n    try (FileInputStream fis = TypeHandler.openFile(\"src/test/resources/org/apache/commons/cli/existing-readable.file\")) {\r\n        IOUtils.consume(fis);\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-cli\\src\\test\\java\\org\\apache\\commons\\cli\\TypeHandlerTest.java",
  "methodName" : "testRegister",
  "sourceCode" : "@Test\r\nvoid testRegister() {\r\n    final Map<Class<?>, Converter<?, ? extends Throwable>> map = TypeHandler.createDefaultMap();\r\n    final TypeHandler typeHandler = new TypeHandler(map);\r\n    assertEquals(Converter.PATH, typeHandler.getConverter(Path.class));\r\n    try {\r\n        map.put(Path.class, PATH_CONVERTER);\r\n        assertEquals(PATH_CONVERTER, typeHandler.getConverter(Path.class));\r\n    } finally {\r\n        map.remove(Path.class);\r\n        assertEquals(Converter.DEFAULT, typeHandler.getConverter(Path.class));\r\n    }\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-cli\\src\\test\\java\\org\\apache\\commons\\cli\\UnrecognizedOptionExceptionTest.java",
  "methodName" : "testConstructor",
  "sourceCode" : "@Test\r\nvoid testConstructor() {\r\n    assertEquals(\"a\", new UnrecognizedOptionException(\"a\").getMessage());\r\n    assertEquals(\"a\", new UnrecognizedOptionException(\"a\", \"b\").getMessage());\r\n    assertEquals(\"b\", new UnrecognizedOptionException(\"a\", \"b\").getOption());\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-cli\\src\\test\\java\\org\\apache\\commons\\cli\\UtilTest.java",
  "methodName" : "testStripLeadingAndTrailingQuotes",
  "sourceCode" : "@Test\r\nvoid testStripLeadingAndTrailingQuotes() {\r\n    assertNull(Util.stripLeadingAndTrailingQuotes(null));\r\n    assertEquals(\"\", Util.stripLeadingAndTrailingQuotes(\"\"));\r\n    assertEquals(\"foo\", Util.stripLeadingAndTrailingQuotes(\"\\\"foo\\\"\"));\r\n    assertEquals(\"foo \\\"bar\\\"\", Util.stripLeadingAndTrailingQuotes(\"foo \\\"bar\\\"\"));\r\n    assertEquals(\"\\\"foo\\\" bar\", Util.stripLeadingAndTrailingQuotes(\"\\\"foo\\\" bar\"));\r\n    assertEquals(\"\\\"foo\\\" and \\\"bar\\\"\", Util.stripLeadingAndTrailingQuotes(\"\\\"foo\\\" and \\\"bar\\\"\"));\r\n    assertEquals(\"\\\"\", Util.stripLeadingAndTrailingQuotes(\"\\\"\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-cli\\src\\test\\java\\org\\apache\\commons\\cli\\UtilTest.java",
  "methodName" : "testStripLeadingHyphens",
  "sourceCode" : "@Test\r\nvoid testStripLeadingHyphens() {\r\n    assertEquals(\"f\", Util.stripLeadingHyphens(\"-f\"));\r\n    assertEquals(\"foo\", Util.stripLeadingHyphens(\"--foo\"));\r\n    assertEquals(\"-foo\", Util.stripLeadingHyphens(\"---foo\"));\r\n    assertNull(Util.stripLeadingHyphens(null));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-cli\\src\\test\\java\\org\\apache\\commons\\cli\\ValuesTest.java",
  "methodName" : "testCharSeparator",
  "sourceCode" : "@Test\r\nvoid testCharSeparator() {\r\n    // tests the char methods of CommandLine that delegate to the String methods\r\n    assertTrue(cmd.hasOption(\"j\"), \"Option j is not set\");\r\n    assertTrue(cmd.hasOption('j'), \"Option j is not set\");\r\n    assertArrayEquals(new String[] { \"key\", \"value\", \"key\", \"value\" }, cmd.getOptionValues(\"j\"));\r\n    assertArrayEquals(new String[] { \"key\", \"value\", \"key\", \"value\" }, cmd.getOptionValues('j'));\r\n    assertTrue(cmd.hasOption(\"k\"), \"Option k is not set\");\r\n    assertTrue(cmd.hasOption('k'), \"Option k is not set\");\r\n    assertArrayEquals(new String[] { \"key1\", \"value1\", \"key2\", \"value2\" }, cmd.getOptionValues(\"k\"));\r\n    assertArrayEquals(new String[] { \"key1\", \"value1\", \"key2\", \"value2\" }, cmd.getOptionValues('k'));\r\n    assertTrue(cmd.hasOption(\"m\"), \"Option m is not set\");\r\n    assertTrue(cmd.hasOption('m'), \"Option m is not set\");\r\n    assertArrayEquals(new String[] { \"key\", \"value\" }, cmd.getOptionValues(\"m\"));\r\n    assertArrayEquals(new String[] { \"key\", \"value\" }, cmd.getOptionValues('m'));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-cli\\src\\test\\java\\org\\apache\\commons\\cli\\ValuesTest.java",
  "methodName" : "testComplexValues",
  "sourceCode" : "@Test\r\nvoid testComplexValues() {\r\n    assertTrue(cmd.hasOption(\"i\"), \"Option i is not set\");\r\n    assertTrue(cmd.hasOption(\"h\"), \"Option h is not set\");\r\n    assertArrayEquals(new String[] { \"val1\", \"val2\" }, cmd.getOptionValues(\"h\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-cli\\src\\test\\java\\org\\apache\\commons\\cli\\ValuesTest.java",
  "methodName" : "testExtraArgs",
  "sourceCode" : "@Test\r\nvoid testExtraArgs() {\r\n    assertArrayEquals(new String[] { \"arg1\", \"arg2\", \"arg3\" }, cmd.getArgs(), \"Extra args\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-cli\\src\\test\\java\\org\\apache\\commons\\cli\\ValuesTest.java",
  "methodName" : "testMultipleArgValues",
  "sourceCode" : "@Test\r\nvoid testMultipleArgValues() {\r\n    assertTrue(cmd.hasOption(\"e\"), \"Option e is not set\");\r\n    assertArrayEquals(new String[] { \"one\", \"two\" }, cmd.getOptionValues(\"e\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-cli\\src\\test\\java\\org\\apache\\commons\\cli\\ValuesTest.java",
  "methodName" : "testShortArgs",
  "sourceCode" : "@Test\r\nvoid testShortArgs() {\r\n    assertTrue(cmd.hasOption(\"a\"), \"Option a is not set\");\r\n    assertTrue(cmd.hasOption(\"c\"), \"Option c is not set\");\r\n    assertNull(cmd.getOptionValues(\"a\"));\r\n    assertNull(cmd.getOptionValues(\"c\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-cli\\src\\test\\java\\org\\apache\\commons\\cli\\ValuesTest.java",
  "methodName" : "testShortArgsWithValue",
  "sourceCode" : "@Test\r\nvoid testShortArgsWithValue() {\r\n    assertTrue(cmd.hasOption(\"b\"), \"Option b is not set\");\r\n    assertEquals(\"foo\", cmd.getOptionValue(\"b\"));\r\n    assertEquals(1, cmd.getOptionValues(\"b\").length);\r\n    assertTrue(cmd.hasOption(\"b\"), \"Option b is not set\");\r\n    assertEquals(\"bar\", cmd.getOptionValue(\"d\"));\r\n    assertEquals(1, cmd.getOptionValues(\"d\").length);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-cli\\src\\test\\java\\org\\apache\\commons\\cli\\ValuesTest.java",
  "methodName" : "testTwoArgValues",
  "sourceCode" : "@Test\r\nvoid testTwoArgValues() {\r\n    assertTrue(cmd.hasOption(\"g\"), \"Option g is not set\");\r\n    assertArrayEquals(new String[] { \"val1\", \"val2\" }, cmd.getOptionValues(\"g\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-cli\\src\\test\\java\\org\\apache\\commons\\cli\\ValueTest.java",
  "methodName" : "testLongNoArg",
  "sourceCode" : "@Test\r\nvoid testLongNoArg() {\r\n    assertTrue(cl.hasOption(\"c\"));\r\n    assertNull(cl.getOptionValue(\"c\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-cli\\src\\test\\java\\org\\apache\\commons\\cli\\ValueTest.java",
  "methodName" : "testLongNoArgWithOption",
  "sourceCode" : "@Test\r\nvoid testLongNoArgWithOption() {\r\n    assertTrue(cl.hasOption(opts.getOption(\"c\")));\r\n    assertNull(cl.getOptionValue(opts.getOption(\"c\")));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-cli\\src\\test\\java\\org\\apache\\commons\\cli\\ValueTest.java",
  "methodName" : "testLongOptionalArgValue",
  "sourceCode" : "@ParameterizedTest\r\n@MethodSource(\"parsers\")\r\nvoid testLongOptionalArgValue(final CommandLineParser parser) throws Exception {\r\n    final String[] args = { \"--fish\", \"face\" };\r\n    final CommandLine cmd = parser.parse(opts, args);\r\n    assertTrue(cmd.hasOption(\"fish\"));\r\n    assertEquals(\"face\", cmd.getOptionValue(\"fish\"));\r\n}",
  "annotations" : [ "ParameterizedTest" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-cli\\src\\test\\java\\org\\apache\\commons\\cli\\ValueTest.java",
  "methodName" : "testLongOptionalArgValues",
  "sourceCode" : "@ParameterizedTest\r\n@MethodSource(\"parsers\")\r\nvoid testLongOptionalArgValues(final CommandLineParser parser) throws Exception {\r\n    final String[] args = { \"--gravy\", \"gold\", \"garden\" };\r\n    final CommandLine cmd = parser.parse(opts, args);\r\n    assertNull(cmd.getOptionValues(NULL_OPTION));\r\n    assertNull(cmd.getOptionValues(NULL_STRING));\r\n    assertTrue(cmd.hasOption(\"gravy\"));\r\n    assertEquals(\"gold\", cmd.getOptionValue(\"gravy\"));\r\n    assertEquals(\"gold\", cmd.getOptionValues(\"gravy\")[0]);\r\n    assertEquals(\"garden\", cmd.getOptionValues(\"gravy\")[1]);\r\n    assertEquals(cmd.getArgs().length, 0);\r\n}",
  "annotations" : [ "ParameterizedTest" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-cli\\src\\test\\java\\org\\apache\\commons\\cli\\ValueTest.java",
  "methodName" : "testLongOptionalArgValuesWithOption",
  "sourceCode" : "@ParameterizedTest\r\n@MethodSource(\"parsers\")\r\nvoid testLongOptionalArgValuesWithOption(final CommandLineParser parser) throws Exception {\r\n    final String[] args = { \"--gravy\", \"gold\", \"garden\" };\r\n    final CommandLine cmd = parser.parse(opts, args);\r\n    assertNull(cmd.getOptionValues(NULL_OPTION));\r\n    assertNull(cmd.getOptionValues(NULL_STRING));\r\n    assertTrue(cmd.hasOption(opts.getOption(\"gravy\")));\r\n    assertEquals(\"gold\", cmd.getOptionValue(opts.getOption(\"gravy\")));\r\n    assertEquals(\"gold\", cmd.getOptionValues(opts.getOption(\"gravy\"))[0]);\r\n    assertEquals(\"garden\", cmd.getOptionValues(opts.getOption(\"gravy\"))[1]);\r\n    assertEquals(cmd.getArgs().length, 0);\r\n}",
  "annotations" : [ "ParameterizedTest" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-cli\\src\\test\\java\\org\\apache\\commons\\cli\\ValueTest.java",
  "methodName" : "testLongOptionalArgValueWithOption",
  "sourceCode" : "@ParameterizedTest\r\n@MethodSource(\"parsers\")\r\nvoid testLongOptionalArgValueWithOption(final CommandLineParser parser) throws Exception {\r\n    final String[] args = { \"--fish\", \"face\" };\r\n    final CommandLine cmd = parser.parse(opts, args);\r\n    assertTrue(cmd.hasOption(opts.getOption(\"fish\")));\r\n    assertEquals(\"face\", cmd.getOptionValue(opts.getOption(\"fish\")));\r\n}",
  "annotations" : [ "ParameterizedTest" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-cli\\src\\test\\java\\org\\apache\\commons\\cli\\ValueTest.java",
  "methodName" : "testLongOptionalNArgValues",
  "sourceCode" : "@ParameterizedTest\r\n@MethodSource(\"parsers\")\r\nvoid testLongOptionalNArgValues(final CommandLineParser parser) throws Exception {\r\n    final String[] args = { \"--hide\", \"house\", \"hair\", \"head\" };\r\n    final CommandLine cmd = parser.parse(opts, args);\r\n    assertTrue(cmd.hasOption(\"hide\"));\r\n    assertEquals(\"house\", cmd.getOptionValue(\"hide\"));\r\n    assertEquals(\"house\", cmd.getOptionValues(\"hide\")[0]);\r\n    assertEquals(\"hair\", cmd.getOptionValues(\"hide\")[1]);\r\n    assertEquals(cmd.getArgs().length, 1);\r\n    assertEquals(\"head\", cmd.getArgs()[0]);\r\n}",
  "annotations" : [ "ParameterizedTest" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-cli\\src\\test\\java\\org\\apache\\commons\\cli\\ValueTest.java",
  "methodName" : "testLongOptionalNArgValuesWithOption",
  "sourceCode" : "@ParameterizedTest\r\n@MethodSource(\"parsers\")\r\nvoid testLongOptionalNArgValuesWithOption(final CommandLineParser parser) throws Exception {\r\n    final CommandLine cmd = parser.parse(opts, new String[] { \"--hide\", \"house\", \"hair\", \"head\" });\r\n    assertNull(cmd.getOptionValues(NULL_OPTION));\r\n    assertNull(cmd.getOptionValues(NULL_STRING));\r\n    assertTrue(cmd.hasOption(opts.getOption(\"hide\")));\r\n    assertEquals(\"house\", cmd.getOptionValue(opts.getOption(\"hide\")));\r\n    assertEquals(\"house\", cmd.getOptionValues(opts.getOption(\"hide\"))[0]);\r\n    assertEquals(\"hair\", cmd.getOptionValues(opts.getOption(\"hide\"))[1]);\r\n    assertEquals(cmd.getArgs().length, 1);\r\n    assertEquals(\"head\", cmd.getArgs()[0]);\r\n}",
  "annotations" : [ "ParameterizedTest" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-cli\\src\\test\\java\\org\\apache\\commons\\cli\\ValueTest.java",
  "methodName" : "testLongOptionalNoValue",
  "sourceCode" : "@ParameterizedTest\r\n@MethodSource(\"parsers\")\r\nvoid testLongOptionalNoValue(final CommandLineParser parser) throws Exception {\r\n    final String[] args = { \"--fish\" };\r\n    final CommandLine cmd = parser.parse(opts, args);\r\n    assertTrue(cmd.hasOption(\"fish\"));\r\n    assertNull(cmd.getOptionValue(\"fish\"));\r\n}",
  "annotations" : [ "ParameterizedTest" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-cli\\src\\test\\java\\org\\apache\\commons\\cli\\ValueTest.java",
  "methodName" : "testLongOptionalNoValueWithOption",
  "sourceCode" : "@ParameterizedTest\r\n@MethodSource(\"parsers\")\r\nvoid testLongOptionalNoValueWithOption(final CommandLineParser parser) throws Exception {\r\n    final String[] args = { \"--fish\" };\r\n    final CommandLine cmd = parser.parse(opts, args);\r\n    assertTrue(cmd.hasOption(opts.getOption(\"fish\")));\r\n    assertNull(cmd.getOptionValue(opts.getOption(\"fish\")));\r\n}",
  "annotations" : [ "ParameterizedTest" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-cli\\src\\test\\java\\org\\apache\\commons\\cli\\ValueTest.java",
  "methodName" : "testLongWithArg",
  "sourceCode" : "@Test\r\nvoid testLongWithArg() {\r\n    assertTrue(cl.hasOption(\"d\"));\r\n    assertNotNull(cl.getOptionValue(\"d\"));\r\n    assertEquals(cl.getOptionValue(\"d\"), \"bar\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-cli\\src\\test\\java\\org\\apache\\commons\\cli\\ValueTest.java",
  "methodName" : "testLongWithArgWithOption",
  "sourceCode" : "@Test\r\nvoid testLongWithArgWithOption() {\r\n    assertTrue(cl.hasOption(opts.getOption(\"d\")));\r\n    assertNotNull(cl.getOptionValue(opts.getOption(\"d\")));\r\n    assertEquals(cl.getOptionValue(opts.getOption(\"d\")), \"bar\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-cli\\src\\test\\java\\org\\apache\\commons\\cli\\ValueTest.java",
  "methodName" : "testShortNoArg",
  "sourceCode" : "@Test\r\nvoid testShortNoArg() {\r\n    assertTrue(cl.hasOption(\"a\"));\r\n    assertNull(cl.getOptionValue(\"a\"));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-cli\\src\\test\\java\\org\\apache\\commons\\cli\\ValueTest.java",
  "methodName" : "testShortNoArgWithOption",
  "sourceCode" : "@Test\r\nvoid testShortNoArgWithOption() {\r\n    assertTrue(cl.hasOption(opts.getOption(\"a\")));\r\n    assertNull(cl.getOptionValue(opts.getOption(\"a\")));\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-cli\\src\\test\\java\\org\\apache\\commons\\cli\\ValueTest.java",
  "methodName" : "testShortOptionalArgNoValue",
  "sourceCode" : "@ParameterizedTest\r\n@MethodSource(\"parsers\")\r\nvoid testShortOptionalArgNoValue(final CommandLineParser parser) throws Exception {\r\n    final String[] args = { \"-e\" };\r\n    final CommandLine cmd = parser.parse(opts, args);\r\n    assertTrue(cmd.hasOption(\"e\"));\r\n    assertNull(cmd.getOptionValue(\"e\"));\r\n}",
  "annotations" : [ "ParameterizedTest" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-cli\\src\\test\\java\\org\\apache\\commons\\cli\\ValueTest.java",
  "methodName" : "testShortOptionalArgNoValueWithOption",
  "sourceCode" : "@ParameterizedTest\r\n@MethodSource(\"parsers\")\r\nvoid testShortOptionalArgNoValueWithOption(final CommandLineParser parser) throws Exception {\r\n    final String[] args = { \"-e\" };\r\n    final CommandLine cmd = parser.parse(opts, args);\r\n    assertTrue(cmd.hasOption(opts.getOption(\"e\")));\r\n    assertNull(cmd.getOptionValue(opts.getOption(\"e\")));\r\n}",
  "annotations" : [ "ParameterizedTest" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-cli\\src\\test\\java\\org\\apache\\commons\\cli\\ValueTest.java",
  "methodName" : "testShortOptionalArgValue",
  "sourceCode" : "@ParameterizedTest\r\n@MethodSource(\"parsers\")\r\nvoid testShortOptionalArgValue(final CommandLineParser parser) throws Exception {\r\n    final String[] args = { \"-e\", \"everything\" };\r\n    final CommandLine cmd = parser.parse(opts, args);\r\n    assertTrue(cmd.hasOption(\"e\"));\r\n    assertEquals(\"everything\", cmd.getOptionValue(\"e\"));\r\n}",
  "annotations" : [ "ParameterizedTest" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-cli\\src\\test\\java\\org\\apache\\commons\\cli\\ValueTest.java",
  "methodName" : "testShortOptionalArgValues",
  "sourceCode" : "@ParameterizedTest\r\n@MethodSource(\"parsers\")\r\nvoid testShortOptionalArgValues(final CommandLineParser parser) throws Exception {\r\n    final String[] args = { \"-j\", \"ink\", \"idea\" };\r\n    final CommandLine cmd = parser.parse(opts, args);\r\n    assertTrue(cmd.hasOption(\"j\"));\r\n    assertEquals(\"ink\", cmd.getOptionValue(\"j\"));\r\n    assertEquals(\"ink\", cmd.getOptionValues(\"j\")[0]);\r\n    assertEquals(\"idea\", cmd.getOptionValues(\"j\")[1]);\r\n    assertEquals(cmd.getArgs().length, 0);\r\n}",
  "annotations" : [ "ParameterizedTest" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-cli\\src\\test\\java\\org\\apache\\commons\\cli\\ValueTest.java",
  "methodName" : "testShortOptionalArgValuesWithOption",
  "sourceCode" : "@ParameterizedTest\r\n@MethodSource(\"parsers\")\r\nvoid testShortOptionalArgValuesWithOption(final CommandLineParser parser) throws Exception {\r\n    final String[] args = { \"-j\", \"ink\", \"idea\" };\r\n    final CommandLine cmd = parser.parse(opts, args);\r\n    assertNull(cmd.getOptionValues(NULL_OPTION));\r\n    assertNull(cmd.getOptionValues(NULL_STRING));\r\n    assertTrue(cmd.hasOption(opts.getOption(\"j\")));\r\n    assertEquals(\"ink\", cmd.getOptionValue(opts.getOption(\"j\")));\r\n    assertEquals(\"ink\", cmd.getOptionValues(opts.getOption(\"j\"))[0]);\r\n    assertEquals(\"idea\", cmd.getOptionValues(opts.getOption(\"j\"))[1]);\r\n    assertEquals(cmd.getArgs().length, 0);\r\n}",
  "annotations" : [ "ParameterizedTest" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-cli\\src\\test\\java\\org\\apache\\commons\\cli\\ValueTest.java",
  "methodName" : "testShortOptionalArgValueWithOption",
  "sourceCode" : "@ParameterizedTest\r\n@MethodSource(\"parsers\")\r\nvoid testShortOptionalArgValueWithOption(final CommandLineParser parser) throws Exception {\r\n    final String[] args = { \"-e\", \"everything\" };\r\n    final CommandLine cmd = parser.parse(opts, args);\r\n    assertNull(cmd.getOptionValues(NULL_OPTION));\r\n    assertNull(cmd.getOptionValues(NULL_STRING));\r\n    assertTrue(cmd.hasOption(opts.getOption(\"e\")));\r\n    assertEquals(\"everything\", cmd.getOptionValue(opts.getOption(\"e\")));\r\n}",
  "annotations" : [ "ParameterizedTest" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-cli\\src\\test\\java\\org\\apache\\commons\\cli\\ValueTest.java",
  "methodName" : "testShortOptionalNArgValues",
  "sourceCode" : "@ParameterizedTest\r\n@MethodSource(\"parsers\")\r\nvoid testShortOptionalNArgValues(final CommandLineParser parser) throws Exception {\r\n    final String[] args = { \"-i\", \"ink\", \"idea\", \"isotope\", \"ice\" };\r\n    final CommandLine cmd = parser.parse(opts, args);\r\n    assertNull(cmd.getOptionValues(NULL_OPTION));\r\n    assertNull(cmd.getOptionValues(NULL_STRING));\r\n    assertTrue(cmd.hasOption(\"i\"));\r\n    assertEquals(\"ink\", cmd.getOptionValue(\"i\"));\r\n    assertEquals(\"ink\", cmd.getOptionValues(\"i\")[0]);\r\n    assertEquals(\"idea\", cmd.getOptionValues(\"i\")[1]);\r\n    assertEquals(cmd.getArgs().length, 2);\r\n    assertEquals(\"isotope\", cmd.getArgs()[0]);\r\n    assertEquals(\"ice\", cmd.getArgs()[1]);\r\n}",
  "annotations" : [ "ParameterizedTest" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-cli\\src\\test\\java\\org\\apache\\commons\\cli\\ValueTest.java",
  "methodName" : "testShortOptionalNArgValuesSeparated",
  "sourceCode" : "@Test\r\nvoid testShortOptionalNArgValuesSeparated() throws Exception {\r\n    final String[] args = { \"-v=ink\", \"-v=idea\", \"-v=isotope\", \"-v=ice\" };\r\n    final CommandLineParser parser = new DefaultParser();\r\n    final CommandLine cmd = parser.parse(opts, args);\r\n    assertNull(cmd.getOptionValues(NULL_OPTION));\r\n    assertNull(cmd.getOptionValues(NULL_STRING));\r\n    assertTrue(cmd.hasOption(\"v\"));\r\n    assertEquals(\"ink\", cmd.getOptionValue(\"v\"));\r\n    assertEquals(\"ink\", cmd.getOptionValues(\"v\")[0]);\r\n    assertEquals(\"idea\", cmd.getOptionValues(\"v\")[1]);\r\n    assertEquals(\"isotope\", cmd.getOptionValues(\"v\")[2]);\r\n    assertEquals(\"ice\", cmd.getOptionValues(\"v\")[3]);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-cli\\src\\test\\java\\org\\apache\\commons\\cli\\ValueTest.java",
  "methodName" : "testShortOptionalNArgValuesWithOption",
  "sourceCode" : "@Test\r\nvoid testShortOptionalNArgValuesWithOption() throws Exception {\r\n    final String[] args = { \"-i\", \"ink\", \"idea\", \"isotope\", \"ice\" };\r\n    final CommandLineParser parser = new PosixParser();\r\n    final CommandLine cmd = parser.parse(opts, args);\r\n    assertNull(cmd.getOptionValues(NULL_OPTION));\r\n    assertNull(cmd.getOptionValues(NULL_STRING));\r\n    assertTrue(cmd.hasOption(\"i\"));\r\n    assertEquals(\"ink\", cmd.getOptionValue(opts.getOption(\"i\")));\r\n    assertEquals(\"ink\", cmd.getOptionValues(opts.getOption(\"i\"))[0]);\r\n    assertEquals(\"idea\", cmd.getOptionValues(opts.getOption(\"i\"))[1]);\r\n    assertEquals(cmd.getArgs().length, 2);\r\n    assertEquals(\"isotope\", cmd.getArgs()[0]);\r\n    assertEquals(\"ice\", cmd.getArgs()[1]);\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-cli\\src\\test\\java\\org\\apache\\commons\\cli\\ValueTest.java",
  "methodName" : "testShortWithArg",
  "sourceCode" : "@Test\r\nvoid testShortWithArg() {\r\n    assertTrue(cl.hasOption(\"b\"));\r\n    assertNotNull(cl.getOptionValue(\"b\"));\r\n    assertEquals(cl.getOptionValue(\"b\"), \"foo\");\r\n}",
  "annotations" : [ "Test" ]
}, {
  "filePath" : "d:\\chenhao\\test project\\commons-cli\\src\\test\\java\\org\\apache\\commons\\cli\\ValueTest.java",
  "methodName" : "testShortWithArgWithOption",
  "sourceCode" : "@Test\r\nvoid testShortWithArgWithOption() {\r\n    assertTrue(cl.hasOption(opts.getOption(\"b\")));\r\n    assertNotNull(cl.getOptionValue(opts.getOption(\"b\")));\r\n    assertEquals(cl.getOptionValue(opts.getOption(\"b\")), \"foo\");\r\n}",
  "annotations" : [ "Test" ]
} ]